<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>15434603</id><snippet>self.db = connect("127.0.0.1", "user", "pass", "dbname")
self.cursor = self.db.cusor()
self.cursor.execute("""INSERT INTO test (fName,lName, DOB, email)
VALUES ('self.firstName', 'self.lastName', 'self.DOBirth', 'self.emailAddress')""")
self.db.commit()
</snippet></ROW><ROW><id>15434603</id><snippet>_mysql</snippet></ROW><ROW><id>15435110</id><snippet> import datetime

 now = datetime.datetime.now()
</snippet></ROW><ROW><id>15435110</id><snippet> django.utils.timezone.now()
</snippet></ROW><ROW><id>15435467</id><snippet>from google.appengine.ext import db
import cgi

class Entity(db.Expando):
    pass

e = Entity()    
e.put()         # id is assigned
k = e.key()     # key is complete
id = k.id()     # system assigned id

html="""
&lt;html&gt;
    &lt;head&gt;&lt;/head&gt;
    &lt;body&gt;
        &lt;label&gt;Key: %s &lt;/label&gt;
        &lt;br&gt;            
    &lt;/body&gt;
&lt;/html&gt;""" % (cgi.escape(k))
</snippet></ROW><ROW><id>15435467</id><snippet>class Entity(db.Expando):
pass

e = Entity()    
e.put()         # id is assigned
k = e.key()     # key is complete
id = k.id()     # system assigned id

template = jinja_environment.get_template('templates/myTemplate')
self.response.write(template.render({'key_val':k}))
</snippet></ROW><ROW><id>15435467</id><snippet> &lt;html&gt;
   &lt;head&gt;&lt;/head&gt;
    &lt;body&gt;
     &lt;label&gt;{{key_val}}&lt;/label&gt;
     &lt;br&gt;            
    &lt;/body&gt;
 &lt;/html&gt;
</snippet></ROW><ROW><id>15435658</id><snippet>count</snippet></ROW><ROW><id>15435658</id><snippet>&gt;&gt;&gt; 't.com'.count('.')
1
&gt;&gt;&gt; 'x.t.com'.count('.')
2
</snippet></ROW><ROW><id>15435658</id><snippet>for s in string_list:
    dots = s.count('.')
    if dots == 1:
        # do something here
    elif dots == 2:
        # do something else
    else:
        # another piece of code
</snippet></ROW><ROW><id>15435658</id><snippet>def test_function(s):
    """
        &gt;&gt;&gt; test_function('b.t.com')
        't'

        &gt;&gt;&gt; test_function('x.no')
        'x'

        &gt;&gt;&gt; test_function('z')
        'z'
    """
    actions = {0: lambda x: x
               1: lambda x: x.split('.')[0],
               2: lambda x: x.split('.')[1]}
    return actions[s.count('.')](s)
</snippet></ROW><ROW><id>15435836</id><snippet>\b</snippet></ROW><ROW><id>15435836</id><snippet>regex = re.compile(r'\b('+remove+')\b', flags=re.IGNORECASE)
</snippet></ROW><ROW><id>15435836</id><snippet>regex = re.compile(r'\b('+remove+r')\b', flags=re.IGNORECASE)
                                 ^ THIS
</snippet></ROW><ROW><id>15435837</id><snippet>urlpatterns = patterns('',
                       url(r'^$', listing, name='investment-listing'))
</snippet></ROW><ROW><id>15435837</id><snippet>urlpatterns = patterns(
    '',
    url(r'^$', listing, name='investment-listing'),
)

urlpatterns = patterns(
    '', url(r'^$', listing, name='investment-listing'))
</snippet></ROW><ROW><id>15435926</id><snippet>ValueError: generator already executing</snippet></ROW><ROW><id>15435926</id><snippet>def coroutine(func):
    """ A helper function decorator from Beazley"""
    def start(*args, **kwargs):
        g = func(*args, **kwargs)
        g.next()
        return g
    return start

@coroutine
def cotuple2list():
    """This does the work"""
    result = None
    while True:
        (tup, co_pool) = (yield result)
        result = list(tup)
        # I don't like using append. So I am changing the data in place.
        for (i,x) in enumerate(result):
            # consider using "if hasattr(x,'__iter__')"
            if isinstance(x,tuple):
                result[i] = co_pool[0].send((x, co_pool[1:]))


@coroutine
def colist2tuple():
    """This does the work"""
    result = None
    while True:
        (lst, co_pool) = (yield result)
        # I don't like using append so I am changing the data in place...
        for (i,x) in enumerate(lst):
            # consider using "if hasattr(x,'__iter__')"
            if isinstance(x,list):
                lst[i] = co_pool[0].send((x, co_pool[1:]))
        result = tuple(lst)
</snippet></ROW><ROW><id>15435926</id><snippet>def list2tuple(a):
    return tuple((list2tuple(x) if isinstance(x, list) else x for x in a))
def tuple2list(a):
    return list((tuple2list(x) if isinstance(x, tuple) else x for x in a))
</snippet></ROW><ROW><id>15435926</id><snippet># Make Coroutine Pools
colist2tuple_pool = [colist2tuple() for i in xrange(20) ]
cotuple2list_pool = [cotuple2list() for i in xrange(20) ]
</snippet></ROW><ROW><id>15435926</id><snippet>def make_test(m, n):
    # Test data function taken from HYRY's post!
    return [[range(m), make_test(m, n-1)] for i in range(n)]
import timeit
t = make_test(20, 8)
%timeit list2tuple(t)
%timeit colist2tuple_pool[0].send((t, colist2tuple_pool[1:]))
</snippet></ROW><ROW><id>15435926</id><snippet>1 loops, best of 3: 1.32 s per loop
1 loops, best of 3: 4.05 us per loop
</snippet></ROW><ROW><id>15435926</id><snippet>tic = time.time()
t1 = colist2tuple_pool[0].send((t, colist2tuple_pool[1:]))
toc = time.time()
print toc - tic
</snippet></ROW><ROW><id>15435926</id><snippet>0.000446081161499
</snippet></ROW><ROW><id>15435955</id><snippet>del</snippet></ROW><ROW><id>15435955</id><snippet>for</snippet></ROW><ROW><id>15435955</id><snippet>len(intList)</snippet></ROW><ROW><id>15435955</id><snippet>for</snippet></ROW><ROW><id>15435955</id><snippet>def only_even(intList):
    new_list = []
    for i in range(0, len(intList)):
        if isEven(intList[i]) == True:
            new_list.append(intList[i])
    return new_list
</snippet></ROW><ROW><id>15435955</id><snippet>&gt;&gt;&gt; print(only_even([5, 8, 17, 6, 0, 20, 3]))
[8, 6, 20]
</snippet></ROW><ROW><id>15436496</id><snippet>from scipy.spatial import KDTree
# create some fake data
x = arange(20)
y = rand(20)
z = x**2
# put them togheter, should have a form [n_points, n_dimension]
data = np.vstack([x, y, z]).T
# create the KDTree
kd = KDTree(data)
</snippet></ROW><ROW><id>15436496</id><snippet>kd.query([1, 2, 3])
# (1.8650720813822905, 2)
# your may differs
</snippet></ROW><ROW><id>15436496</id><snippet>#bogus position
x2 = rand(20)*20
y2 = rand(20)*20
z2 = rand(20)*20
# join them togheter as the input
data2 = np.vstack([x2, y2, z2]).T
#query them
kd.query(data2)

#(array([ 14.96118553,   9.15924813,  16.08269197,  21.50037074,
#    18.14665096,  13.81840533,  17.464429  ,  13.29368755,
#    20.22427196,   9.95286671,   5.326888  ,  17.00112683,
#     3.66931946,  20.370496  ,  13.4808055 ,  11.92078034,
#     5.58668204,  20.20004206,   5.41354322,   4.25145521]),
#array([4, 3, 2, 4, 2, 2, 4, 2, 3, 3, 2, 3, 4, 4, 3, 3, 3, 4, 4, 4]))
</snippet></ROW><ROW><id>15437014</id><snippet>wget http://www.python.org/ftp/python/2.7/Python-2.7.tgz
tar xzf Python-2.7.tgz
cd Python-2.7
./configure --with-pth --with-dec-threads --with-signal-module --prefix=/opt/python-2.7
make
</snippet></ROW><ROW><id>15437014</id><snippet>sudo</snippet></ROW><ROW><id>15437014</id><snippet>su</snippet></ROW><ROW><id>15437014</id><snippet>make install
</snippet></ROW><ROW><id>15437014</id><snippet>wget</snippet></ROW><ROW><id>15437014</id><snippet>tar</snippet></ROW><ROW><id>15437014</id><snippet>configure</snippet></ROW><ROW><id>15437014</id><snippet>make</snippet></ROW><ROW><id>15437014</id><snippet>make install</snippet></ROW><ROW><id>15437147</id><snippet>.items()</snippet></ROW><ROW><id>15437147</id><snippet>next()</snippet></ROW><ROW><id>15437147</id><snippet>status = next(tweepy.Cursor(api.user_timeline).items())
</snippet></ROW><ROW><id>15437147</id><snippet>StopIteration</snippet></ROW><ROW><id>15437147</id><snippet>next()</snippet></ROW><ROW><id>15437147</id><snippet>status = next(tweepy.Cursor(api.user_timeline).items(), None)
</snippet></ROW><ROW><id>15437388</id><snippet>def iteritems_recursive(d):
  for k,v in d.iteritems():
    if isinstance(v, dict):
      for k1,v1 in iteritems_recursive(v):
        yield (k,)+k1, v1
    else:
      yield (k,),v

dic = {u'resources': {u'info': {u'load': (u'37', u'17')}, u'peak': {u'load': (u'0', u'1')}}}

for p,v in iteritems_recursive(dic):
  print p, "-&gt;", v
</snippet></ROW><ROW><id>15437388</id><snippet>iteritems_recursive</snippet></ROW><ROW><id>15437388</id><snippet>(path, value)</snippet></ROW><ROW><id>15437388</id><snippet>path</snippet></ROW><ROW><id>15437388</id><snippet>(u'resources', u'info', u'load') -&gt; (u'37', u'17')
(u'resources', u'peak', u'load') -&gt; (u'0', u'1')
</snippet></ROW><ROW><id>15437388</id><snippet>for p,v in iteritems_recursive(dic):
  diff = float(v[0]) - float(v[1])
  p = ''.join('{:10}'.format(w) for w in p)
  v = ''.join('{:5}'.format(f) for f in v)
  print p, v, diff
</snippet></ROW><ROW><id>15437388</id><snippet>resources info      load       37   17    20.0
resources peak      load       0    1     -1.0
</snippet></ROW><ROW><id>15437604</id><snippet>str.translate</snippet></ROW><ROW><id>15437604</id><snippet>None</snippet></ROW><ROW><id>15437604</id><snippet>ascii_lowercase</snippet></ROW><ROW><id>15437604</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; s.translate(None,string.ascii_lowercase)
'FOOFOOOBAR'
</snippet></ROW><ROW><id>15437604</id><snippet>timeit</snippet></ROW><ROW><id>15437836</id><snippet>url(r'^accounts/(?P&lt;username&gt;[\.\w-]+)', userena_views.ProfileListView.as_view(), name='userena_profile_list', kwargs={'template_name':'userena/profil.html', 'extra_context':Projekat.objects.all}),
</snippet></ROW><ROW><id>15437836</id><snippet>your_callable_view = userena_views.ProfileListView.as_view()
return your_callable_view(request, template_name='userena/profil.html', extra_context=projekti)
</snippet></ROW><ROW><id>15437836</id><snippet>ProfileListView.as_view()</snippet></ROW><ROW><id>15437836</id><snippet>url()</snippet></ROW><ROW><id>15437836</id><snippet>self</snippet></ROW><ROW><id>15437918</id><snippet>\r</snippet></ROW><ROW><id>15437918</id><snippet>\a</snippet></ROW><ROW><id>15437918</id><snippet>\3</snippet></ROW><ROW><id>15437918</id><snippet>r</snippet></ROW><ROW><id>15437918</id><snippet>r'C:\Software\api\render\3bit\sim&gt;'
</snippet></ROW><ROW><id>15437918</id><snippet>f2.write(line.replace('test/software', r'C:\Software\api\render\3bit\sim&gt;'))
</snippet></ROW><ROW><id>15437918</id><snippet>'C:\\Software\\api\\render\\3bit\\sim&gt;'
</snippet></ROW><ROW><id>15438309</id><snippet>def safe_eval(eval_str, variable_dict = None):
    '''welll... mostly safe:
        http://lybniz2.sourceforge.net/safeeval.html
    '''
    if variable_dict == None:
        variable_dict = {}
    return eval(eval_str, {"__builtins__" : None}, variable_dict)
</snippet></ROW><ROW><id>15438309</id><snippet>module_dict = {}
for n in dir(module):
 module_dict[n] = eval('module.'+n)
</snippet></ROW><ROW><id>15438527</id><snippet>for value in self.dataSource:
    yield self.dataSource[value]
</snippet></ROW><ROW><id>15438527</id><snippet>self.dataSource</snippet></ROW><ROW><id>15438527</id><snippet>[2, 3, 5, 6, 6, 7]</snippet></ROW><ROW><id>15438527</id><snippet>value</snippet></ROW><ROW><id>15438527</id><snippet>2</snippet></ROW><ROW><id>15438527</id><snippet>self.dataSource[2]</snippet></ROW><ROW><id>15438527</id><snippet>5</snippet></ROW><ROW><id>15438527</id><snippet>value</snippet></ROW><ROW><id>15438527</id><snippet>3</snippet></ROW><ROW><id>15438527</id><snippet>self.dataSource[3]</snippet></ROW><ROW><id>15438527</id><snippet>6</snippet></ROW><ROW><id>15438527</id><snippet>value</snippet></ROW><ROW><id>15438527</id><snippet>5</snippet></ROW><ROW><id>15438527</id><snippet>self.dataSource[5]</snippet></ROW><ROW><id>15438527</id><snippet>7</snippet></ROW><ROW><id>15438527</id><snippet>value</snippet></ROW><ROW><id>15438527</id><snippet>6</snippet></ROW><ROW><id>15438527</id><snippet>self.dataSource[6]</snippet></ROW><ROW><id>15438527</id><snippet>IndexError</snippet></ROW><ROW><id>15438527</id><snippet>for value in self.dataSource:
    yield value
</snippet></ROW><ROW><id>15438527</id><snippet>for i in range(len(self.dataSource)):
    yield self.dataSource[i]
</snippet></ROW><ROW><id>15438527</id><snippet>yield from self.dataSource</snippet></ROW><ROW><id>15438527</id><snippet>for value in self.dataSource: yield value</snippet></ROW><ROW><id>15438715</id><snippet>ori.rfind(' ')</snippet></ROW><ROW><id>15438715</id><snippet>rFind</snippet></ROW><ROW><id>15438987</id><snippet>pass</snippet></ROW><ROW><id>15438987</id><snippet>def update(self):
    #print 'Not today'
    pass

def checkout(self):
    #t
    pass

def _write_cfg(self):
    #t
    pass

def _read_cfg(self):
    #t
    pass
</snippet></ROW><ROW><id>15439089</id><snippet>(firstValue, secondValue)</snippet></ROW><ROW><id>15439089</id><snippet>def addTags(functionHere):
    def wrapper(firstValue, secondValue):
        return "NumberTag" + functionHere(firstValue, secondValue) + "NumberTagOver"
    return wrapper
</snippet></ROW><ROW><id>15439089</id><snippet>def addTags(functionHere):
    def wrapper(*args):
        return "NumberTag" + functionHere(*args) + "NumberTagOver"
    return wrapper
</snippet></ROW><ROW><id>15439089</id><snippet>*args</snippet></ROW><ROW><id>15439089</id><snippet>def addTags(functionHere):
    def wrapper(*args, **kw):
        return "NumberTag" + functionHere(*args, **kw) + "NumberTagOver"
    return wrapper
</snippet></ROW><ROW><id>15439161</id><snippet>In [3]: df = pd.DataFrame({'a' : [4,1,3], 'b' : [5,2,4]},index=[1,2,3])

In [4]: s = pd.Series([0.6,0.4],index=['a','b'])

In [5]: df.dot(s)
Out[5]: 
1    4.4
2    1.4
3    3.4
</snippet></ROW><ROW><id>15439238</id><snippet>serverThread.join()</snippet></ROW><ROW><id>15439238</id><snippet>join</snippet></ROW><ROW><id>15439278</id><snippet>pip install matplotlib --log LOG_FILE
</snippet></ROW><ROW><id>15439278</id><snippet>pip install matplotlib --log log.txt
</snippet></ROW><ROW><id>15439278</id><snippet>log.txt</snippet></ROW><ROW><id>15439459</id><snippet>try-except</snippet></ROW><ROW><id>15439459</id><snippet>def factorial(n):
    if n == 0:
        return 1
    else:
        recurse = factorial(n-1)
        result = n * recurse
        return result
try:
    print (factorial(6000))
except RuntimeError as e:
    print (e)
</snippet></ROW><ROW><id>15439459</id><snippet>#print factorial(1000)
93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000

#print factorial(6000)
maximum recursion depth exceeded in comparison
</snippet></ROW><ROW><id>15439459</id><snippet>sys.setrecursionlimit</snippet></ROW><ROW><id>15439459</id><snippet>In [4]: import sys

In [5]: sys.getrecursionlimit()
Out[5]: 1000
</snippet></ROW><ROW><id>15439837</id><snippet>Sequence()</snippet></ROW><ROW><id>15439837</id><snippet>SERIAL</snippet></ROW><ROW><id>15439837</id><snippet>id</snippet></ROW><ROW><id>15439837</id><snippet>CREATE TABLE tramos (
    id INTEGER SERIAL NOT NULL, 
    nombre VARCHAR, 
    tramo_data VARCHAR, 
    estado BOOLEAN, 
    PRIMARY KEY (id)
)
</snippet></ROW><ROW><id>15439837</id><snippet>DEFAULT</snippet></ROW><ROW><id>15439837</id><snippet>select nextval(..)</snippet></ROW><ROW><id>15440051</id><snippet>a</snippet></ROW><ROW><id>15440051</id><snippet>a</snippet></ROW><ROW><id>15440124</id><snippet>python</snippet></ROW><ROW><id>15440124</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>15440124</id><snippet>/System/Library/Frameworks/Python.framework/Versions</snippet></ROW><ROW><id>15440124</id><snippet>/usr/bin/python2.x</snippet></ROW><ROW><id>15440124</id><snippet>python2.6</snippet></ROW><ROW><id>15440124</id><snippet>python2.7</snippet></ROW><ROW><id>15440124</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>15440124</id><snippet>VERSIONER_PYTHON_VERSION</snippet></ROW><ROW><id>15440124</id><snippet>com.apple.versioner.python</snippet></ROW><ROW><id>15440124</id><snippet>python</snippet></ROW><ROW><id>15440124</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>15440124</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin</snippet></ROW><ROW><id>15440124</id><snippet>/usr/bin/easy_install-2.7 pip</snippet></ROW><ROW><id>15440124</id><snippet>/usr/local/bin/pip</snippet></ROW><ROW><id>15440124</id><snippet>. If you also install</snippet></ROW><ROW><id>15440124</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>15440124</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>15440124</id><snippet>alias</snippet></ROW><ROW><id>15440124</id><snippet>alias</snippet></ROW><ROW><id>15440124</id><snippet>python</snippet></ROW><ROW><id>15440124</id><snippet>~/.*</snippet></ROW><ROW><id>15440124</id><snippet>/etc/</snippet></ROW><ROW><id>15440124</id><snippet>grep -r alias /etc</snippet></ROW><ROW><id>15440124</id><snippet>which python
</snippet></ROW><ROW><id>15440124</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin/python</snippet></ROW><ROW><id>15440124</id><snippet>echo $PATH</snippet></ROW><ROW><id>15440124</id><snippet>ls -l /Library/Frameworks/Python.framework/Versions/2.7/bin/python</snippet></ROW><ROW><id>15440124</id><snippet>python2.7</snippet></ROW><ROW><id>15440124</id><snippet>./python2.7</snippet></ROW><ROW><id>15440124</id><snippet>py2app</snippet></ROW><ROW><id>15440124</id><snippet>sudo</snippet></ROW><ROW><id>15440300</id><snippet>value</snippet></ROW><ROW><id>15440300</id><snippet>attribute</snippet></ROW><ROW><id>15440300</id><snippet>for mapping in AttributesMapping.objects.get(product=product):
    print mapping.attribute.name, mapping.value 
</snippet></ROW><ROW><id>15440300</id><snippet>for attribute in product.attributes.all():
    mapping = attribute.attributemapping_set.get(product=product)
    print attribute.name, mapping.value
</snippet></ROW><ROW><id>15440814</id><snippet>for idx, item in enumerate(list_a):
    if idx == len(list_a) - 1:
        print item, "is the last"
    else:
        print item, "is not the last"
</snippet></ROW><ROW><id>15440814</id><snippet>0 is not the last
1 is not the last
3 is not the last
1 is the last
</snippet></ROW><ROW><id>15441073</id><snippet>zip(mydict.values())</snippet></ROW><ROW><id>15441073</id><snippet>zip(*mydict.values())</snippet></ROW><ROW><id>15441073</id><snippet>&gt;&gt;&gt; zip(mydict.values())
[([1, 2],), ([3, 4],), ([5, 6],)]
&gt;&gt;&gt; zip(*mydict.values())
[(1, 3, 5), (2, 4, 6)]
</snippet></ROW><ROW><id>15441073</id><snippet>zip([1, 2], [3, 4], [5, 6])</snippet></ROW><ROW><id>15441073</id><snippet>&gt;&gt;&gt; zip(*([k] + mydict[k] for k in sorted(mydict)))
[('asdf', 'bar', 'foo'), (5, 3, 1), (6, 4, 2)]
</snippet></ROW><ROW><id>15441073</id><snippet>writerows()</snippet></ROW><ROW><id>15441073</id><snippet>writerow()</snippet></ROW><ROW><id>15441073</id><snippet>key</snippet></ROW><ROW><id>15441073</id><snippet>sorted()</snippet></ROW><ROW><id>15441073</id><snippet>&gt;&gt;&gt; order = {'foo': 0, 'bar': 1, 'asdf': 2}
&gt;&gt;&gt; zip(*([k] + mydict[k] for k in sorted(mydict, key=order.get)))
[('foo', 'bar', 'asdf'), (1, 3, 5), (2, 4, 6)]
</snippet></ROW><ROW><id>15441095</id><snippet>g</snippet></ROW><ROW><id>15441095</id><snippet>g=open('JMB312 data 2.txt', 'w')</snippet></ROW><ROW><id>15441300</id><snippet>ids = someobject.ids()
print ','.join(''.join(row) for row in ids)
</snippet></ROW><ROW><id>15441300</id><snippet>def ids(self):
    with lite.connect('foo.db') as con:
        cur = con.cursor()    
        cur.execute("SELECT Id FROM foo")
        return cur.fetchall()
</snippet></ROW><ROW><id>15441300</id><snippet>def ids(self):
    with lite.connect('foo.db') as con:
        cur = con.cursor()    
        cur.execute("SELECT Id FROM foo")
        return cur   # just the cursor, no fetching

ids = someobject.ids()
# this'll loop over the cursor, which yields rows as required
print ','.join(''.join(row) for row in ids)
</snippet></ROW><ROW><id>15441487</id><snippet>import sys
sys.path.insert(0, 'specific/site-packages')
</snippet></ROW><ROW><id>15441487</id><snippet>specific/site-packages</snippet></ROW><ROW><id>15441487</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>15441702</id><snippet>class cyclist(list):
    def __getitem__(self, index):
        return list.__getitem__(self, index % len(self))

    def __getslice__(self, start, stop):
        return [self[n] for n in range(start, stop)]


foo = cyclist([1, 2, 3])
print foo[0:2]    # [1, 2]
print foo[7:13]   # [2, 3, 1, 2, 3, 1]
print foo[0:5]    # [1, 2, 3, 1, 2]
</snippet></ROW><ROW><id>15441706</id><snippet>&gt;&gt;&gt; text = 'Some text where the words should be'
&gt;&gt;&gt; words = ['text', 'string', 'letter', 'words']
&gt;&gt;&gt; [i for i, x in enumerate(words) if x in text]
[0, 3]
</snippet></ROW><ROW><id>15441706</id><snippet>enumerate</snippet></ROW><ROW><id>15441706</id><snippet>[i for i, x in ...]</snippet></ROW><ROW><id>15441706</id><snippet>list comprehension</snippet></ROW><ROW><id>15441978</id><snippet>old_msg.txt</snippet></ROW><ROW><id>15441978</id><snippet>hello world</snippet></ROW><ROW><id>15441978</id><snippet>.txt</snippet></ROW><ROW><id>15441978</id><snippet>old_msg</snippet></ROW><ROW><id>15441978</id><snippet>hello world</snippet></ROW><ROW><id>15442127</id><snippet>ImageGrid</snippet></ROW><ROW><id>15442127</id><snippet>import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import ImageGrid
import numpy as np

im = np.arange(100)
im.shape = 10, 10

fig = plt.figure(1, (4., 4.))
grid = ImageGrid(fig, 111, # similar to subplot(111)
                nrows_ncols = (2, 2), # creates 2x2 grid of axes
                axes_pad=0.1, # pad between axes in inch.
                aspect=False, # do not force aspect='equal'
                )

for i in range(4):
    grid[i].imshow(im) # The AxesGrid object work as a list of axes.

plt.show()
</snippet></ROW><ROW><id>15442229</id><snippet>&lt;plaintext&gt;</snippet></ROW><ROW><id>15442229</id><snippet>for pt in root.findall('.//plaintext'):
    if pt.text:
        print(pt.text)
</snippet></ROW><ROW><id>15442229</id><snippet>.text</snippet></ROW><ROW><id>15442229</id><snippet>sqrt(2)
1.4142135623730950488016887242096980785696718753769480...
[1; 2^_]
Pythagoras's constant
sqrt(2)~~1.4142  (real, principal root)
-sqrt(2)~~-1.4142  (real root)
</snippet></ROW><ROW><id>15442229</id><snippet>&lt;pod&gt;</snippet></ROW><ROW><id>15442229</id><snippet>for pod in root.findall('.//pod'):
    print(pod.attrib['title'])
    for pt in pod.findall('.//plaintext'):
        if pt.text:
            print('-', pt.text)
</snippet></ROW><ROW><id>15442229</id><snippet>Input
- sqrt(2)
Decimal approximation
- 1.4142135623730950488016887242096980785696718753769480...
Number line
Continued fraction
- [1; 2^_]
Constant name
- Pythagoras's constant
All 2nd roots of 2
- sqrt(2)~~1.4142  (real, principal root)
- -sqrt(2)~~-1.4142  (real root)
Plot of all roots in the complex plane
</snippet></ROW><ROW><id>15442440</id><snippet>r, g, b = 192, 64, 1
r, g, b = [x/255.0 for x in r, g, b]
h, l, s = colorsys.rgb_to_hls(r, g, b)
r, g, b = colorsys.hls_to_rgb(h, l, s)
r, g, b = [x*255.0 for x in r, g, b]
print r, g, b
</snippet></ROW><ROW><id>15442440</id><snippet>192.0 64.0 1.0
</snippet></ROW><ROW><id>15442584</id><snippet>import numpy as np
import datetime as dt

D = np.loadtxt("filename",delimiter=",",usecols=[0],dtype="str")
Z = np.loadtxt("filename",delimiter=",",usecols=range(1,10))

DATES = [dt.datetime.strptime(d,'"%Y-%m-%d %H:%M:%S"') for d in D]
</snippet></ROW><ROW><id>15442584</id><snippet>converters</snippet></ROW><ROW><id>15442584</id><snippet>loadtxt()</snippet></ROW><ROW><id>15442584</id><snippet>datey = lambda x: dt.datetime.strptime(x,'"%Y-%m-%d %H:%M:%S"')

D = np.loadtxt("filename",delimiter=",",usecols=[0],
               dtype=dt.datetime,converters={0:datey})
Z = np.loadtxt("filename",delimiter=",",usecols=range(1,10))
</snippet></ROW><ROW><id>15442787</id><snippet>logit = LogisticRegression(C=100)
</snippet></ROW><ROW><id>15442787</id><snippet>C</snippet></ROW><ROW><id>15442971</id><snippet>img = Gtk.Image.new_from_file('/path/to/my_file.png')
</snippet></ROW><ROW><id>15442971</id><snippet>img</snippet></ROW><ROW><id>15442971</id><snippet>GtkGrid</snippet></ROW><ROW><id>15442971</id><snippet>img.set_from_file('/path/to/my_file.png')
</snippet></ROW><ROW><id>15442971</id><snippet>...from_file</snippet></ROW><ROW><id>15442971</id><snippet>from_pixbuf</snippet></ROW><ROW><id>15443095</id><snippet>import twitter

t = twitter.Api(...)

statuses = t.GetUserTimeline('username', include_rts=True)

for tweet in statuses:
    retweets = t.GetRetweets(tweet.GetId())
    users = [retweet.GetUser().GetScreenName() for retweet in retweets]
    print tweet.GetId(), users
</snippet></ROW><ROW><id>15443141</id><snippet>next()</snippet></ROW><ROW><id>15443141</id><snippet>firstline = next(stuff, '')  # default value '' if the file is empty

for row in stuff:
    # rest of the file
</snippet></ROW><ROW><id>15443141</id><snippet>lines[0]</snippet></ROW><ROW><id>15443141</id><snippet>iter()</snippet></ROW><ROW><id>15443186</id><snippet>import numpy as np
my_array = np.random.randint(1,10, (4, 5))
pos = np.where(my_array &gt; 5)
my_array[pos]
</snippet></ROW><ROW><id>15443265</id><snippet>genfromtxt</snippet></ROW><ROW><id>15443265</id><snippet>import numpy as np
from StringIO import StringIO   # to create example file
s = """ viola.jpg  0.81 1.0693461723  100
        viola.jpg  0.44 1.31469086921  18
        viola.jpg  0.8  3.92096084523  73
        vlasta.jpg 0.88 1.36559123399 110
        vlasta.jpg 0.88 1.88126493001  45
        vlasta.jpg 0.76 1.0510328514   88"""
f = StringIO(s) # creates example file with content above
a = np.genfromtxt(f, names = "image, someval, another, someid", dtype=['S12', float, float, int])
</snippet></ROW><ROW><id>15443265</id><snippet>a</snippet></ROW><ROW><id>15443265</id><snippet>field</snippet></ROW><ROW><id>15443265</id><snippet>images = np.uniques(a['image']) # gets unique values of the column named 'image'
b = np.empty(len(images), dtype = a.dtype)
for i, image in enumerate(images):
    m = a['image'] == image
    b[i] = (image,) + tuple(a[m][n].mean() for n in a.dtype.names[1:])
</snippet></ROW><ROW><id>15443265</id><snippet>b</snippet></ROW><ROW><id>15443265</id><snippet>In [3]: b
Out[3]: 
array([('viola.jpg', 0.6833333333333332, 2.101665962246667, 63),
       ('vlasta.jpg', 0.84, 1.4326296718, 81)], 
      dtype=[('image', '|S12'), ('someval', '&lt;f8'), ('another', '&lt;f8'), ('someid', '&lt;i8')])

In [4]: b['image']
Out[4]: 
array(['viola.jpg', 'vlasta.jpg'], 
      dtype='|S12')

In [5]: b['someval']
Out[5]: array([ 0.68333333,  0.84      ])

In [6]: b[1]
Out[6]: ('vlasta.jpg', 0.84, 1.4326296718, 81)

In [7]: b[b['image']=='viola.jpg']
Out[7]: 
array([('viola.jpg', 0.6833333333333332, 2.101665962246667, 63)], 
      dtype=[('image', '|S12'), ('someval', '&lt;f8'), ('another', '&lt;f8'), ('someid', '&lt;i8')])
</snippet></ROW><ROW><id>15443265</id><snippet>a = np.array([['viola.jpg', '0.81', '1.0693461723', '100'],
              ['viola.jpg', '0.44', '1.3146908692', '18'],
              ['viola.jpg', '0.8', '3.9209608452', '73'],
              ['vlasta.jpg', '0.88', '1.3655912339', '110'],
              ['vlasta.jpg', '0.88', '1.8812649300', '45'],
              ['vlasta.jpg', '0.76', '1.0510328514', '88']])

uniques = np.uniques(a[:,0])
b = np.empty((len(uniques), len(a[0])), dtype = 'S12')

for i,s in enumerate(uniques):
    m = a[:,0] == s
    b[i] = [s] + [a[m,j].astype(float).mean() for j in [1,2]] + [int(a[m,3].astype(float).mean())]
print b
#[['viola.jpg' '0.6833333333' '2.1016659622' '64']
# ['vlasta.jpg' '0.84' '1.4326296717' '81']]
</snippet></ROW><ROW><id>15443265</id><snippet>float</snippet></ROW><ROW><id>15443265</id><snippet>int</snippet></ROW><ROW><id>15443265</id><snippet>string</snippet></ROW><ROW><id>15443279</id><snippet>Counter</snippet></ROW><ROW><id>15443279</id><snippet>count</snippet></ROW><ROW><id>15443279</id><snippet>itertools.count</snippet></ROW><ROW><id>15443279</id><snippet>import itertools

_counter = itertools.count()
def make_screenshot_file(file_name):
    order = next(_counter)
    test_suites_path = _make_job_directory()
    return make_writable_file(os.path.join(test_suites_path,'screenshot',file_name % order))
</snippet></ROW><ROW><id>15443279</id><snippet>count</snippet></ROW><ROW><id>15443279</id><snippet>PyNumber_Add</snippet></ROW><ROW><id>15443279</id><snippet>_count</snippet></ROW><ROW><id>15443279</id><snippet>__counter_instance</snippet></ROW><ROW><id>15443279</id><snippet>class Counter():
    _count = 0
    def count(self):
        Counter._count += 1
        return Counter.count
</snippet></ROW><ROW><id>15443279</id><snippet>Counter().count()</snippet></ROW><ROW><id>15443279</id><snippet>Counter().count</snippet></ROW><ROW><id>15443279</id><snippet>@property</snippet></ROW><ROW><id>15443279</id><snippet>Counter</snippet></ROW><ROW><id>15443279</id><snippet>collections.Counter</snippet></ROW><ROW><id>15443279</id><snippet>count</snippet></ROW><ROW><id>15443279</id><snippet>@classmethod</snippet></ROW><ROW><id>15443279</id><snippet>@staticmethod</snippet></ROW><ROW><id>15443279</id><snippet>_count</snippet></ROW><ROW><id>15443279</id><snippet>count()</snippet></ROW><ROW><id>15443296</id><snippet>{{ v.key1 }}
</snippet></ROW><ROW><id>15443296</id><snippet>data['GROUPS']</snippet></ROW><ROW><id>15443296</id><snippet>items</snippet></ROW><ROW><id>15443296</id><snippet>data</snippet></ROW><ROW><id>15443296</id><snippet>data</snippet></ROW><ROW><id>15443296</id><snippet>&lt;tbody&gt;
{% for group, data in data.GROUPS.items %} 
&lt;tr&gt;
    &lt;td&gt;{{ group }}&lt;/td&gt;
    {% for v in data %}
    &lt;tr&gt;
        &lt;td&gt;{{ v.key1 }}&lt;/td&gt;
        &lt;td&gt;{{ v.key2 }}&lt;/td&gt;
    &lt;/tr&gt;
    {% endfor %}
&lt;/tr&gt;
{% endfor %}
&lt;/tbody&gt;
</snippet></ROW><ROW><id>15443342</id><snippet>PETSc.Mat().createAIJ(size=(nrows,ncols), csr=(ai,aj,aa))
</snippet></ROW><ROW><id>15443342</id><snippet>ai</snippet></ROW><ROW><id>15443342</id><snippet>aj</snippet></ROW><ROW><id>15443342</id><snippet>aa</snippet></ROW><ROW><id>15443342</id><snippet>&gt; i - row indices
&gt; j - column indices
&gt; a - matrix values
</snippet></ROW><ROW><id>15443342</id><snippet>.indptr</snippet></ROW><ROW><id>15443342</id><snippet>.indices</snippet></ROW><ROW><id>15443342</id><snippet>.data</snippet></ROW><ROW><id>15443342</id><snippet>scypy.sparse.csr_matrix</snippet></ROW><ROW><id>15443342</id><snippet>&gt;&gt;&gt; from petsc4py import PETSc
&gt;&gt;&gt; import scipy.sparse
&gt;&gt;&gt; csr_mat = scipy.sparse.rand(1000, 1000, density=0.001, format='csr')
&gt;&gt;&gt; petsc_mat = PETSc.Mat().createAIJ(size=csr_mat.shape,
...                                   csr=(csr_mat.indptr, csr_mat.indices,
...                                        csr_mat.data))
</snippet></ROW><ROW><id>15443713</id><snippet>li = [2,3,0,9,6]
</snippet></ROW><ROW><id>15443713</id><snippet>0</snippet></ROW><ROW><id>15443713</id><snippet>n = 0
i = li.index(n)     # returns the first location of n (0 in your case)
left = li[:i]       # gives the left part of the list
right = li[i+1:]    #     and the right part
lsum = sum(left)
rsum = sum(right)
</snippet></ROW><ROW><id>15443713</id><snippet>.index</snippet></ROW><ROW><id>15443713</id><snippet>0</snippet></ROW><ROW><id>15443713</id><snippet>0</snippet></ROW><ROW><id>15443713</id><snippet>i</snippet></ROW><ROW><id>15443713</id><snippet>i = 2
left = sum(li[:i])
right = sum(li[i+1:])
</snippet></ROW><ROW><id>15443713</id><snippet>left</snippet></ROW><ROW><id>15443713</id><snippet>right</snippet></ROW><ROW><id>15443934</id><snippet>if</snippet></ROW><ROW><id>15443934</id><snippet>print "vals[k] = %s vals[i] = %s i = %s k = %s"%(vals[k],vals[i],i,k)
</snippet></ROW><ROW><id>15443934</id><snippet>vals</snippet></ROW><ROW><id>15443934</id><snippet>for val in vals:
    print "%s %s"%(val.__class__,val)
</snippet></ROW><ROW><id>15443953</id><snippet>str</snippet></ROW><ROW><id>15443953</id><snippet>bytes</snippet></ROW><ROW><id>15443953</id><snippet>bytearray</snippet></ROW><ROW><id>15443953</id><snippet>struct</snippet></ROW><ROW><id>15443953</id><snippet>SharedArea</snippet></ROW><ROW><id>15443953</id><snippet>anydbm</snippet></ROW><ROW><id>15443953</id><snippet>dict</snippet></ROW><ROW><id>15443953</id><snippet>int</snippet></ROW><ROW><id>15443953</id><snippet>shelve</snippet></ROW><ROW><id>15443953</id><snippet>ctypes.Structure</snippet></ROW><ROW><id>15443953</id><snippet>struct</snippet></ROW><ROW><id>15443953</id><snippet>Structure</snippet></ROW><ROW><id>15443953</id><snippet>Array</snippet></ROW><ROW><id>15443953</id><snippet>mmap</snippet></ROW><ROW><id>15443953</id><snippet>ctypes</snippet></ROW><ROW><id>15443953</id><snippet>open</snippet></ROW><ROW><id>15443953</id><snippet>read</snippet></ROW><ROW><id>15443953</id><snippet>struct</snippet></ROW><ROW><id>15443953</id><snippet>multiprocessing</snippet></ROW><ROW><id>15443953</id><snippet>ctypes</snippet></ROW><ROW><id>15443953</id><snippet>Structure</snippet></ROW><ROW><id>15443953</id><snippet>anydbm</snippet></ROW><ROW><id>15443964</id><snippet>from django.db.models import Max
OrderItems.annotate(newest_note_time=Max('ordernotes__timestamp'))
    .order_by('-ordernotes__is_active', '-newest_note_time')
</snippet></ROW><ROW><id>15444005</id><snippet>from StringIO import StringIO
import pandas as pd
data = StringIO("""b e a d c
b 0.0 0.1 0.3 0.2 0.5
e 0.1 0.0 0.4 0.9 0.3
a 0.3 0.4 0.0 0.7 0.6
d 0.2 0.9 0.7 0.0 0.1
c 0.5 0.3 0.6 0.1 0.0
""")
df = pd.read_csv(data, sep=" ")
print df.sort_index().sort_index(axis=1)
</snippet></ROW><ROW><id>15444005</id><snippet>     a    b    c    d    e
a  0.0  0.3  0.6  0.7  0.4
b  0.3  0.0  0.5  0.2  0.1
c  0.6  0.5  0.0  0.1  0.3
d  0.7  0.2  0.1  0.0  0.9
e  0.4  0.1  0.3  0.9  0.0
</snippet></ROW><ROW><id>15444308</id><snippet>binaries &amp;= ~(modifier &gt; 0.2)
</snippet></ROW><ROW><id>15444308</id><snippet>modifiler &gt; 0.2</snippet></ROW><ROW><id>15444308</id><snippet>~</snippet></ROW><ROW><id>15444308</id><snippet>&amp;=</snippet></ROW><ROW><id>15444308</id><snippet>and</snippet></ROW><ROW><id>15444308</id><snippet>~</snippet></ROW><ROW><id>15444308</id><snippet>&amp;=</snippet></ROW><ROW><id>15444701</id><snippet>command</snippet></ROW><ROW><id>15444701</id><snippet>&lt;Button-1&gt;</snippet></ROW><ROW><id>15444701</id><snippet>AuxName.bind("&lt;Button-1&gt;", ButtonClick)
</snippet></ROW><ROW><id>15444701</id><snippet>widget</snippet></ROW><ROW><id>15444701</id><snippet>def ButtonClick(event):
    event.widget['text'] = 'Goodbye'
</snippet></ROW><ROW><id>15444701</id><snippet>AuxName['command'] = ButtonClick</snippet></ROW><ROW><id>15444701</id><snippet>ButtonClick</snippet></ROW><ROW><id>15444701</id><snippet>place</snippet></ROW><ROW><id>15444701</id><snippet>pack</snippet></ROW><ROW><id>15444701</id><snippet>AuxName.place(...)
# ...
AuxName.pack()
</snippet></ROW><ROW><id>15444701</id><snippet>AuxName.grid(row=x, column=y, ...)
</snippet></ROW><ROW><id>15444788</id><snippet>try</snippet></ROW><ROW><id>15444788</id><snippet>except</snippet></ROW><ROW><id>15444788</id><snippet>import logging
logging.basicConfig(filename='log.txt', format=logging.BASIC_FORMAT)
logging.error('OH NO!')
try:
    raise Exception('Foo')
except:
    logging.exception("Oops:")
</snippet></ROW><ROW><id>15444788</id><snippet>log.txt</snippet></ROW><ROW><id>15444788</id><snippet>ERROR:root:OH NO!
</snippet></ROW><ROW><id>15444859</id><snippet>title('Subject {0} in-Trial Gaze'.format(subnum))
</snippet></ROW><ROW><id>15444859</id><snippet>gridax.set_title('Subject {0} in-Trial Gaze'.format(subnum))
</snippet></ROW><ROW><id>15444859</id><snippet>xlabel</snippet></ROW><ROW><id>15444859</id><snippet>ylabel</snippet></ROW><ROW><id>15444859</id><snippet>axes</snippet></ROW><ROW><id>15445240</id><snippet>def __gt__(self, other):
    """Greater than ordering."""
    if not isinstance(other, Key):
      return NotImplemented
    return self.__tuple() &gt; other.__tuple()

def __tuple(self):
    """Helper to return an orderable tuple."""
    return (self.app(), self.namespace(), self.pairs())
</snippet></ROW><ROW><id>15445477</id><snippet>import praw

user_agent = praw.Reddit("my_cool_user_agent")
link = "http://www.reddit.com/r/AdviceAnimals/comments/" + \
        "1adu71/apparently_people_still_need_to_hear_this/"
submission = user_agent.get_submission(link)
print submission.url
</snippet></ROW><ROW><id>15445674</id><snippet>$ time python2.7 euler.py &gt;/dev/null
python euler.py  72.23s user 0.10s system 97% cpu 1:13.86 total

$ time pypy euler.py &gt;/dev/null                       
pypy euler.py &gt; /dev/null  13.21s user 0.03s system 99% cpu 13.251 total

$ clang++ -o euler euler.cpp &amp;&amp; time ./euler &gt;/dev/null
./euler &gt; /dev/null  2.71s user 0.00s system 99% cpu 2.717 total
</snippet></ROW><ROW><id>15445674</id><snippet>xrange</snippet></ROW><ROW><id>15445674</id><snippet>range</snippet></ROW><ROW><id>15445674</id><snippet>cdef int find_number_of_divisiors(int n):
    cdef int i, div
    if n == 1:
        return 1

    div = 2 # 1 and the number itself
    for i in xrange(2, n/2 + 1):
        if (n % i) == 0:
            div += 1
    return div

cdef int m, n, t, d
m = 0
n = 1
t = 1
while True:
    n += 1
    t += n
    d = find_number_of_divisiors(t)
    if m &lt; d:
        print n, ' has ', d, ' divisors.'
        m = d

    if m == 320:
        exit(0)
</snippet></ROW><ROW><id>15445674</id><snippet>$ time python -c 'import euler_cy' &gt;/dev/null
python -c 'import euler_cy' &gt; /dev/null  4.82s user 0.02s system 98% cpu 4.941 total
</snippet></ROW><ROW><id>15445749</id><snippet>pages</snippet></ROW><ROW><id>15445749</id><snippet>dict.values</snippet></ROW><ROW><id>15445749</id><snippet>sizes = [page['revisions'][0]['size'] for page in d['query']['pages'].values()]
</snippet></ROW><ROW><id>15445749</id><snippet>pages = d['query']['pages']
# {u'120714': {u'ns': 0, u'pageid': 120714, 
#              u'revisions': [{u'size': 985}], u'title': u'Daniel Nannskog'}}
every_page = pages.values()
# [{u'ns': 0, u'pageid': 120714,
#   u'revisions': [{u'size': 985}], u'title': u'Daniel Nannskog'}]
sizes = []
for page in every_page:
    # {u'ns': 0, u'pageid': 120714,
    #  u'revisions': [{u'size': 985}], u'title': u'Daniel Nannskog'}
    sizes.append(page['revisions'][0]['size'])
</snippet></ROW><ROW><id>15445749</id><snippet>size = d['query']['pages'].values()[0]['revisions'][0]['size']
</snippet></ROW><ROW><id>15445989</id><snippet>verify</snippet></ROW><ROW><id>15445989</id><snippet>&gt;&gt;&gt; requests.get('https://kennethreitz.com', verify=False)
&lt;Response [200]&gt;
</snippet></ROW><ROW><id>15446004</id><snippet>re.sub</snippet></ROW><ROW><id>15446004</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'(\w+) (\w+)\[\]', r'\1[] \2', string)
    'void demofun(double* output, double[] db4nsfy, double[] VdSGV, int length)'
</snippet></ROW><ROW><id>15446004</id><snippet>(\w+) (\w+)\[\]</snippet></ROW><ROW><id>15446004</id><snippet>\1</snippet></ROW><ROW><id>15446004</id><snippet>\2</snippet></ROW><ROW><id>15446116</id><snippet>print "Hello"
</snippet></ROW><ROW><id>15446116</id><snippet>&gt; python hello.py
Hello

&gt; jython hello.py
Hello
</snippet></ROW><ROW><id>15446116</id><snippet>&gt; jython -m py_compile hello.py
</snippet></ROW><ROW><id>15446116</id><snippet>java</snippet></ROW><ROW><id>15446116</id><snippet>&gt; java -classpath d:\P\jython253\jython.jar;. hello$py
Hello
</snippet></ROW><ROW><id>15446143</id><snippet>queue = django_rq.get_queue('default')
queue.enqueue(populate_trends, args=(self,), timeout=500) 
</snippet></ROW><ROW><id>15446143</id><snippet>queue = django_rq.get_queue('default')
queue.enqueue(populate_trends, args=(self,), kwargs={'x': 1,}, timeout=500) 
</snippet></ROW><ROW><id>15446259</id><snippet>from celery.utils import uuid
from celery import chord

class ProgressChord(chord):

    def __call__(self, body=None, **kwargs):
        _chord = self.Chord
        body = (body or self.kwargs['body']).clone()
        kwargs = dict(self.kwargs, body=body, **kwargs)
        if _chord.app.conf.CELERY_ALWAYS_EAGER:
            return self.apply((), kwargs)
        callback_id = body.options.setdefault('task_id', uuid())
        r= _chord(**kwargs)
        return _chord.AsyncResult(callback_id), r
</snippet></ROW><ROW><id>15446259</id><snippet>def temptask(n):
    header=list(tempsubtask.si(i) for i in range(n))
    callback=templink.si('printed at last?')
    r = celery.Progresschord(celery.group(header))(callback)
    return r
</snippet></ROW><ROW><id>15446259</id><snippet>In [3]: r
Out[3]: 
(&lt;AsyncResult: bf87507c-14cb-4ac4-8070-d32e4ff326a6&gt;,
 &lt;GroupResult: af69e131-5a93-492d-b985-267484651d95 [4672cbbb-8ec3-4a9e-971a-275807124fae, a236e55f-b312-485c-a816-499d39d7de41, e825a072-b23c-43f2-b920-350413fd5c9e, e3f8378d-fd02-4a34-934b-39a5a735871d, c4f7093b-9f1a-4e5e-b90d-66f83b9c97c4, d5c7dc2c-4e10-4e71-ba2b-055a33e15f02, 07b1c6f7-fe95-4c1f-b0ba-6bc82bceaa4e, 00966cb8-41c2-4e95-b5e7-d8604c000927, e039c78e-6647-4c8d-b59b-e9baf73171a0, 6cfdef0a-25a2-4905-a40e-fea9c7940044]&gt;)
</snippet></ROW><ROW><id>15446259</id><snippet>[celery.chord][1]</snippet></ROW><ROW><id>15446259</id><snippet>[celery.task.chords.Chord][2]</snippet></ROW><ROW><id>15446290</id><snippet>print package[0][1]</snippet></ROW><ROW><id>15446290</id><snippet>0.5</snippet></ROW><ROW><id>15446290</id><snippet>sorted</snippet></ROW><ROW><id>15446290</id><snippet>a</snippet></ROW><ROW><id>15446290</id><snippet>b</snippet></ROW><ROW><id>15446290</id><snippet>package</snippet></ROW><ROW><id>15446290</id><snippet>[([1, 6], [0.5]),
 ([3, 4], [0.8]),
 ([2, 5], [0.2])]
</snippet></ROW><ROW><id>15446290</id><snippet>print package[0][1]</snippet></ROW><ROW><id>15446290</id><snippet>package[0]</snippet></ROW><ROW><id>15446290</id><snippet>([1, 6], [0.5])</snippet></ROW><ROW><id>15446290</id><snippet>[1]</snippet></ROW><ROW><id>15446290</id><snippet>0.5</snippet></ROW><ROW><id>15446290</id><snippet>sorted</snippet></ROW><ROW><id>15446290</id><snippet>([1, 6], [0.5])</snippet></ROW><ROW><id>15446290</id><snippet>([3, 4], [0.8])</snippet></ROW><ROW><id>15446290</id><snippet>lambda</snippet></ROW><ROW><id>15446290</id><snippet>[0][1]</snippet></ROW><ROW><id>15446290</id><snippet>a</snippet></ROW><ROW><id>15446303</id><snippet>blueprint.before_app_request</snippet></ROW><ROW><id>15446492</id><snippet>import numpy as np
from shapely.geometry.polygon import LinearRing

def ellipse_polyline(ellipses, n=100):
    t = linspace(0, 2*np.pi, n, endpoint=False)
    st = np.sin(t)
    ct = np.cos(t)
    result = []
    for x0, y0, a, b, angle in ellipses:
        angle = np.deg2rad(angle)
        sa = np.sin(angle)
        ca = np.cos(angle)
        p = np.empty((n, 2))
        p[:, 0] = x0 + a * ca * ct - b * sa * st
        p[:, 1] = y0 + a * sa * ct + b * ca * st
        result.append(p)
    return result

def intersections(a, b):
    ea = LinearRing(a)
    eb = LinearRing(b)
    mp = ea.intersection(eb)

    x = [p.x for p in mp]
    y = [p.y for p in mp]
    return x, y

ellipses = [(1, 1, 2, 1, 45), (2, 0.5, 5, 1.5, -30)]
a, b = ellipse_polyline(ellipses)
x, y = intersections(a, b)
plot(x, y, "o")
plot(a[:,0], a[:,1])
plot(b[:,0], b[:,1])
</snippet></ROW><ROW><id>15446518</id><snippet>MyFrame.update</snippet></ROW><ROW><id>15446518</id><snippet>self.update</snippet></ROW><ROW><id>15446518</id><snippet>processTasks</snippet></ROW><ROW><id>15446518</id><snippet>resfunc</snippet></ROW><ROW><id>15446518</id><snippet>resfunc</snippet></ROW><ROW><id>15446518</id><snippet>processTasks</snippet></ROW><ROW><id>15446518</id><snippet>self.update</snippet></ROW><ROW><id>15446518</id><snippet>    # Give the user an opportunity to interact
    wx.YieldIfNeeded()
</snippet></ROW><ROW><id>15446518</id><snippet>Yield</snippet></ROW><ROW><id>15446518</id><snippet>class Foo(object):
    def __init__(self, name):
        self.name = name
    def print_name(self):
        print(self.name)
    def give_me_a_printer_function(self):
        return self.print_name

spam = Foo('Spam')
my_function1 = spam.print_name
my_function2 = spam.give_me_a_printer_function()
my_function1()
my_function2()
</snippet></ROW><ROW><id>15446518</id><snippet>Spam</snippet></ROW><ROW><id>15446518</id><snippet>&lt;bound method Foo.print_name of &lt;__main__.Foo object at 0x104629190&gt;&gt;</snippet></ROW><ROW><id>15446580</id><snippet>def main():  # declaring a function just declares it - the code doesn't run
    print("boo")

main()  # here we call the function
</snippet></ROW><ROW><id>15446722</id><snippet>def your_view(request):
    if request.method == 'POST':
        # process form
        request.session['last_search'] = request.POST['search']
        return HttpResponse()
    else:
        form = SearchForm(initial={'search': request.session.get('last_search')
    return render(request, 'search_page.html', {'form': form})
</snippet></ROW><ROW><id>15446787</id><snippet>class A(object):
    pass

class B(object):
    def __init__(self, foo):
        self.foo = foo

someA = A() #creates an object of type A, with no custom variables or methods
someB = B('bar') #creates an object of type B, in which foo is set
</snippet></ROW><ROW><id>15447038</id><snippet>json.py</snippet></ROW><ROW><id>15447038</id><snippet>import json</snippet></ROW><ROW><id>15447038</id><snippet>try</snippet></ROW><ROW><id>15447038</id><snippet>ImportError</snippet></ROW><ROW><id>15447038</id><snippet>simplejson</snippet></ROW><ROW><id>15447038</id><snippet>serializers.json</snippet></ROW><ROW><id>15447223</id><snippet>contextmanager</snippet></ROW><ROW><id>15447223</id><snippet>yield</snippet></ROW><ROW><id>15447223</id><snippet>__exit__</snippet></ROW><ROW><id>15447223</id><snippet>try...except...finally</snippet></ROW><ROW><id>15447223</id><snippet>try</snippet></ROW><ROW><id>15447223</id><snippet>yield</snippet></ROW><ROW><id>15447223</id><snippet>finally</snippet></ROW><ROW><id>15447223</id><snippet>except</snippet></ROW><ROW><id>15447223</id><snippet>try/except</snippet></ROW><ROW><id>15447223</id><snippet>@contextlib.contextmanager
def cm():
    print "before"
    exc = None
    try:
        yield
    except Exception, exc:
        print "Exception was caught"
    print "after"
    if exc is not None:
        raise exc

&gt;&gt;&gt; with cm():
...     print "Hi!"
before
Hi!
after

&gt;&gt;&gt; with cm():
...     print "Hi!"
...     1/0
before
Hi!
Exception was caught
after
</snippet></ROW><ROW><id>15447257</id><snippet>n</snippet></ROW><ROW><id>15447404</id><snippet>import random
a = [int(1000*random.random()) for i in xrange(10)]
b = [int(1000*random.random()) for i in xrange(10)]
c = [int(1000*random.random()) for i in xrange(10)]
d = dict()
for i in xrange(10):
    for j in xrange(10 - i):
        k = 10 - i - j
        if k &lt; len(c):
            d[(i,j,k)] = a[i]+b[j]+c[k]

print max(d.values())
</snippet></ROW><ROW><id>15447404</id><snippet>In [2]: %timeit original()
10000 loops, best of 3: 166 us per loop

In [3]: %timeit new()
10000 loops, best of 3: 36.1 us per loop
</snippet></ROW><ROW><id>15447405</id><snippet>#include&lt;iostream&gt;
#include&lt;string&gt;
#include&lt;sstream&gt;

using namespace std;

string compress(string data) {
    int letter_counter = 1, i=0;
    ostringstream new_data;
    for (i; i&lt;data.length()-1; i++) {
        if (data[i] == data[i+1]) {
            letter_counter += 1;
        } else {
            new_data&lt;&lt;letter_counter;
            new_data&lt;&lt;data[i];
            letter_counter = 1;
        }
    }
    new_data&lt;&lt;letter_counter;
    new_data&lt;&lt;data[i];

    return new_data.str();
}

int main() {
    string data = string("wwwwwbbbcdee");
    string data2 = string("wwwwwwwwwwwwww");
    cout &lt;&lt; compress(data) &lt;&lt;endl;
    cout &lt;&lt; compress(data2) &lt;&lt;endl;
}
</snippet></ROW><ROW><id>15447423</id><snippet>.msi</snippet></ROW><ROW><id>15447423</id><snippet>.msi</snippet></ROW><ROW><id>15447537</id><snippet>list(...)</snippet></ROW><ROW><id>15447537</id><snippet>cached_property</snippet></ROW><ROW><id>15447537</id><snippet>@cached_property
def translations(self):
    return list(ClientTranslation.objects.filter(base=self))
</snippet></ROW><ROW><id>15448000</id><snippet>[u'\u0628', u'\u0626\u0647', u'\u062c', u'\u0627', u'\u0686'] 
</snippet></ROW><ROW><id>15448000</id><snippet>Latin = ''.join(Latin)
</snippet></ROW><ROW><id>15448289</id><snippet>hashlib.md5(pickle.dumps(a[0])).hexdigest()
</snippet></ROW><ROW><id>15448439</id><snippet>In [13]: import re
In [12]: uni = 'Привет, как дела?'.decode('utf-8')
In [14]: re.findall(ur'(?u)\w+', uni)
Out[14]: 
[u'\u041f\u0440\u0438\u0432\u0435\u0442',
 u'\u043a\u0430\u043a',
 u'\u0434\u0435\u043b\u0430']
</snippet></ROW><ROW><id>15448513</id><snippet>$.ajax({
  dataType: "json",
  url: url,
  data: data,
  success: success
});
</snippet></ROW><ROW><id>15448513</id><snippet>email: {
    required: true,
    email: true,
    remote: {
        url: "_check_mail",
        data: {
            email: function() {
                return $("#email").val();
                }
            }
         }
    },
</snippet></ROW><ROW><id>15448639</id><snippet>numpy</snippet></ROW><ROW><id>15448639</id><snippet>import numpy as np
x = np.zeros((10,20,30)) # Make a 10 by 20 by 30 array
x[0,0,0] = value1
</snippet></ROW><ROW><id>15448639</id><snippet>numpy</snippet></ROW><ROW><id>15448639</id><snippet>x = []
x.append([])
x[0].append([])
x[0][0].append(value1)
</snippet></ROW><ROW><id>15448769</id><snippet>def pred_func(predicates):
    # Define a function inside `pred_func`. This function is a "closure" and 
    # will have access to the `predicates` parameter
    def func((i, d)):
        # You can simply pass a generator to `all`
        return all(d[param] == val for param, val in predicates.iteritems())

    # Return the function
    return func
</snippet></ROW><ROW><id>15448769</id><snippet>pred_func</snippet></ROW><ROW><id>15448769</id><snippet>pred_func</snippet></ROW><ROW><id>15448769</id><snippet>filter(pred_func(predicates), eval_params.iteritems())
</snippet></ROW><ROW><id>15448804</id><snippet>a = [2, 6, 12, 13, 1, 4, 5]
b = [12, 1]

sum([ [ (bb,aa) for aa in a[0:a.index(bb)]] for bb in b], [])
</snippet></ROW><ROW><id>15448804</id><snippet>[(12, 2), (12, 6), (1, 2), (1, 6), (1, 12), (1, 13)]
</snippet></ROW><ROW><id>15448869</id><snippet>os.open</snippet></ROW><ROW><id>15449110</id><snippet>print("....")
</snippet></ROW><ROW><id>15449110</id><snippet>print</snippet></ROW><ROW><id>15449138</id><snippet>pip install lxml
</snippet></ROW><ROW><id>15449178</id><snippet>for i in range(1, 5):
    print 'Answer {0}:'.format(i)
</snippet></ROW><ROW><id>15449408</id><snippet>socket</snippet></ROW><ROW><id>15449408</id><snippet>close()</snippet></ROW><ROW><id>15449408</id><snippet>shutdown()</snippet></ROW><ROW><id>15449408</id><snippet>for portScan in port:
    try:
        print "scanning: %s" % portScan 
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((remote_ip, portScan))
        s.shutdown(socket.SHUT_RDWR)
    except:
        portFail.append(portScan)
        err = True
    finally:
        s.close()
</snippet></ROW><ROW><id>15449408</id><snippet>shutdown()</snippet></ROW><ROW><id>15449408</id><snippet>socket</snippet></ROW><ROW><id>15449584</id><snippet>compileall</snippet></ROW><ROW><id>15449592</id><snippet>modules</snippet></ROW><ROW><id>15449592</id><snippet>input</snippet></ROW><ROW><id>15449592</id><snippet>raw_input</snippet></ROW><ROW><id>15449592</id><snippet>raise KeyboardInterrupt</snippet></ROW><ROW><id>15450107</id><snippet>totalResults = [] 
totalClasses = []           
for key, location in groupby(rows, lambda k: k[0]):
    location = list(location)
    totalResults.append(dict(name=key, data=[x[2] for x in location]))
    totalClasses.append(dict(name=key, data=[x[3] for x in location]))
</snippet></ROW><ROW><id>15450687</id><snippet>message = mail.EmailMessage(sender="Me &lt;me@gmail.com&gt;",
        subject="Shop Export",
        attachments=[("shops.csv", self.response.body)])
</snippet></ROW><ROW><id>15450829</id><snippet>!important</snippet></ROW><ROW><id>15450829</id><snippet>.widget input {
    width: 200px !important;
}
</snippet></ROW><ROW><id>15450845</id><snippet>tokenize</snippet></ROW><ROW><id>15450845</id><snippet>'u'</snippet></ROW><ROW><id>15450845</id><snippet>import tokenize
import token
import io
import collections

class Token(collections.namedtuple('Token', 'num val start end line')):
    @property
    def name(self):
        return token.tok_name[self.num]

def change_str_to_unicode(text):    
    result = text.splitlines()
    # Insert a dummy line into result so indexing result
    # matches tokenize's 1-based indexing
    result.insert(0, '')
    changes = []
    for tok in tokenize.generate_tokens(io.BytesIO(text).readline):
        tok = Token(*tok)
        if tok.name == 'STRING' and not tok.val.startswith('u'):
            changes.append(tok.start)

    for linenum, s in reversed(changes):
        line = result[linenum]
        result[linenum] = line[:s] + 'u' + line[s:]
    return '\n'.join(result[1:])

text = '''print "result code %d" % result['code']
# doesn't touch 'strings' in comments
'handles multilines' + \
'okay'
u'Unicode is not touched'
'''

print(change_str_to_unicode(text))
</snippet></ROW><ROW><id>15450845</id><snippet>print u"result code %d" % result[u'code']
# doesn't touch 'strings' in comments
u'handles multilines' + u'okay'
u'Unicode is not touched'
</snippet></ROW><ROW><id>15450858</id><snippet>data</snippet></ROW><ROW><id>15450858</id><snippet>for</snippet></ROW><ROW><id>15450858</id><snippet>x = data[:, 18].astype(float)
y = data[:, 19].astype(float)
z = data[:, 6].astype(float)
f = (x+y) / z
average = np.average(f)
</snippet></ROW><ROW><id>15450858</id><snippet>np.loadtxt</snippet></ROW><ROW><id>15450858</id><snippet>data = np.loadtxt('myfile.csv', dtype=float, delimiter=',' skiprows=2,
                  usecols=(6, 18, 19))
</snippet></ROW><ROW><id>15450858</id><snippet>x</snippet></ROW><ROW><id>15450858</id><snippet>y</snippet></ROW><ROW><id>15450858</id><snippet>z</snippet></ROW><ROW><id>15450858</id><snippet>x, y, z = np.loadtxt('myfile.csv', dtype=float, delimiter=',' skiprows=2,
                     usecols=(6, 18, 19), unpack=True)
</snippet></ROW><ROW><id>15450923</id><snippet>class EntryTitle(Base):
    __tablename__ = 'entry_title'
    entry_id = Column('entry_id', Integer, primary_key=True)
    title = Column('title', String(155))
    # Assuming this is a one-to-one relationship, so setting uselist to False.
    entry_data = relationship('EntryData', backref='entry_title',
                              uselist=False)

class EntryData(Base):
    __tablename__ = 'entry_data'
    # Simply define this primary key as a foreign key to entry_title table.
    entry_id = Column('entry_id', Integer, ForeignKey('entry_title.entry_id'),
                      primary_key=True)
    body = Column('body', String(255))

# Add new objects to a session.
entry_title = EntryTitle(title='Foo')                                            
entry_title.entry_data = EntryData(body='Bar')                                   
session.add(entry_title)                                                         
session.commit()

# Query whole models.
q1 = session.query(EntryTitle, EntryData).join(EntryData)
# Or just the columns you need.
q2 = session.query(EntryTitle.title, EntryData.body).\
    join(EntryData).\
    filter(EntryTitle.entry_id == 42)
</snippet></ROW><ROW><id>15450966</id><snippet>python -u start.py &gt; test.log
</snippet></ROW><ROW><id>15451005</id><snippet>os.startfile(f, 'notepad++.exe')</snippet></ROW><ROW><id>15451005</id><snippet>import subprocess
subprocess.call([r"c:\Program ...Notepad++.exe", r"D:\my_stuff\Google Drive\Modules\nums.py"])
</snippet></ROW><ROW><id>15451005</id><snippet>subprocess.call()</snippet></ROW><ROW><id>15451133</id><snippet>import numpy as np
import mpmath as mpm
x = np.array(mpm.arange(0,4))

sin = np.vectorize(mpm.sin)
y = sin(x)
</snippet></ROW><ROW><id>15451139</id><snippet>p, v = [[vtx.pop(0)]],[[vec.pop(0)]]
while len( vtx ):       
   x = vtx.pop( 0 )
   b = vec.pop( 0 )
   a = v[ -1 ][ 0 ]       
   if threshold &gt;= math.sqrt((a[0] - b[0])**2 + (a[1]- b[1])**2 + (a[2]- b[2])**2):
      v[ -1 ].append( b )
      p[ -1 ].append( x )
   else:
      v.append( [ b ] )
      p.append( [ x ] )
</snippet></ROW><ROW><id>15451139</id><snippet>for c in verts[:]:
    if remove_condition(c): 
        verts.remove(c)
</snippet></ROW><ROW><id>15451319</id><snippet>grid_values(grid).items()</snippet></ROW><ROW><id>15451319</id><snippet>d in digits and not assign(values, s, d)</snippet></ROW><ROW><id>15451319</id><snippet>d</snippet></ROW><ROW><id>15451319</id><snippet>digits</snippet></ROW><ROW><id>15451319</id><snippet>assign(values, s, d)</snippet></ROW><ROW><id>15451319</id><snippet>False</snippet></ROW><ROW><id>15451319</id><snippet>return</snippet></ROW><ROW><id>15451319</id><snippet>returns</snippet></ROW><ROW><id>15451997</id><snippet>range(len())</snippet></ROW><ROW><id>15451997</id><snippet>weights_h = [[random.random() for e in inputs[0]] for e in range(hiden_neurons)]
</snippet></ROW><ROW><id>15451997</id><snippet>In [9]: numpy.random.random((3, 3))
Out[9]:
array([[ 0.37052381,  0.03463207,  0.10669077],
       [ 0.05862909,  0.8515325 ,  0.79809676],
       [ 0.43203632,  0.54633635,  0.09076408]])
</snippet></ROW><ROW><id>15452120</id><snippet>state</snippet></ROW><ROW><id>15452120</id><snippet>new_state = list(state)</snippet></ROW><ROW><id>15452120</id><snippet>new_state = [list(e) for e in state]
</snippet></ROW><ROW><id>15452160</id><snippet>RT</snippet></ROW><ROW><id>15452160</id><snippet>RT @somename: this is not a retweet</snippet></ROW><ROW><id>15452160</id><snippet>RT</snippet></ROW><ROW><id>15452750</id><snippet>daemon</snippet></ROW><ROW><id>15452750</id><snippet>True</snippet></ROW><ROW><id>15452750</id><snippet>daemon</snippet></ROW><ROW><id>15453151</id><snippet>data = serializers.serialize('xml', SomeModel.objects.all(), fields=('name','size'))
</snippet></ROW><ROW><id>15453151</id><snippet>from django.core.serializers.python import Serializer

class MySerialiser(Serializer):
    def end_object( self, obj ):
        self._current['id'] = obj._get_pk_val()
        self.objects.append( self._current )

 # views.py
 serializer = MySerialiser()
 data = serializer.serialize(some_qs)
</snippet></ROW><ROW><id>15453506</id><snippet>alter_list_data_to_serialize</snippet></ROW><ROW><id>15453506</id><snippet>ModelResource</snippet></ROW><ROW><id>15453507</id><snippet>find_closest</snippet></ROW><ROW><id>15453507</id><snippet>def eraseItem(self,event):
    tuple_objects = self.workspace.find_closest(event.x, event.y, halo = 5)
    if len(tuple_objects) &gt; 0 and tuple_objects[0] in self.dictID:
        objectToBeDeleted = tuple_objects[0]
        del self.dictID[objectToBeDeleted]
        self.workspace.delete(objectToBeDeleted)
</snippet></ROW><ROW><id>15453651</id><snippet>c.perform()</snippet></ROW><ROW><id>15453651</id><snippet>BytesIO</snippet></ROW><ROW><id>15453651</id><snippet>.getvalue()</snippet></ROW><ROW><id>15453651</id><snippet>import pycurl
import pprint
import json
from io import BytesIO

c = pycurl.Curl()
data = BytesIO()

c.setopt(c.URL, 'https://mydomainname.com')
c.setopt(c.WRITEFUNCTION, data.write)
c.perform()

dictionary = json.loads(data.getvalue())
pprint.pprint(dictionary["age"])
</snippet></ROW><ROW><id>15453651</id><snippet>pycurl</snippet></ROW><ROW><id>15453651</id><snippet>requests</snippet></ROW><ROW><id>15453651</id><snippet>import pprint
import requests

dictionary = requests.get('https://mydomainname.com').json()
pprint.pprint(dictionary["age"])
</snippet></ROW><ROW><id>15453651</id><snippet>urllib.request</snippet></ROW><ROW><id>15453651</id><snippet>pycurl</snippet></ROW><ROW><id>15453651</id><snippet>from urllib.request import urlopen
import pprint
import json

response = urlopen('https://mydomainname.com')
dictionary = json.load(response)
pprint.pprint(dictionary["age"])
</snippet></ROW><ROW><id>15453705</id><snippet>&gt;&gt;&gt; class MyClass(object):
...     def __init__(self):
...             pass
...     def __A(self):
...             print('Method __A()')
... 
&gt;&gt;&gt; a=MyClass()
&gt;&gt;&gt; a
&lt;__main__.MyClass object at 0x101d56b50&gt;
&gt;&gt;&gt; a._MyClass__A()
Method __A()
</snippet></ROW><ROW><id>15453705</id><snippet>MyClass</snippet></ROW><ROW><id>15453705</id><snippet>class MyClass(object):
    ...
    def _method_for_unit_testing(self):
        self.__A()
        assert &lt;something&gt;
        self.__B()
        assert &lt;something&gt;
        ....
</snippet></ROW><ROW><id>15454023</id><snippet>the_quick
quick_brown
brown_fox
fox_jumped
jumped_over
over_the
the_lazy
lazy_dog
the
quick
brown
fox
jumped
over
lazy
dog
</snippet></ROW><ROW><id>15454023</id><snippet>Document the_quick  quick_brown  ... lazy  dog   some_other_gram

1        0.01       0.02             0.1   0.05  0.0
2        0          0                0.12  0.0   0.1
3        0.5        0.4              0     0     0
</snippet></ROW><ROW><id>15454027</id><snippet>&gt;&gt;&gt; df.index[(df == [3, 1, 1, 0]).all(axis=1)]
Int64Index([2, 3], dtype=int64)
</snippet></ROW><ROW><id>15454027</id><snippet>&gt;&gt;&gt; df
   A  B  C  D
0  1  1  2  0
1  3  3  2  1
2  3  1  1  0
3  3  1  1  0
4  3  3  2  1
5  1  2  3  4
</snippet></ROW><ROW><id>15454027</id><snippet>&gt;&gt;&gt; df == [3,1,1,0]
       A      B      C      D
0  False   True  False   True
1   True  False  False  False
2   True   True   True   True
3   True   True   True   True
4   True  False  False  False
5  False  False  False  False
</snippet></ROW><ROW><id>15454027</id><snippet>&gt;&gt;&gt; (df == [3,1,1,0]).all(axis=1)
0    False
1    False
2     True
3     True
4    False
5    False
</snippet></ROW><ROW><id>15454027</id><snippet>&gt;&gt;&gt; df.index[(df == [3,1,1,0]).all(axis=1)]
Int64Index([2, 3], dtype=int64)
</snippet></ROW><ROW><id>15454063</id><snippet>reset</snippet></ROW><ROW><id>15454063</id><snippet>flush</snippet></ROW><ROW><id>15454063</id><snippet>python manage.py help flush
</snippet></ROW><ROW><id>15454158</id><snippet>import numpy as np
from scipy import pi,sin,cos
import matplotlib.pyplot as plt
import math as m

image = np.zeros(shape=(201,201))

a=4
b=3
pa = 240

def dEllipse(x,y,a,b,PA):
    the = -PA+90.0
    cos_a,sin_a=cos(the*pi/180.0),sin(the*pi/180.0)
    Xs = (x*cos_a - y*sin_a)**2.0 
    Ys = (x*sin_a + y*cos_a)**2.0 
    r = np.sqrt((Xs/a**2) + (Ys/b**2)) 
    return r

x = np.arange(0-100.0, 201-100.0)
y = np.arange(0-100.0, 201-100.0)
xx, yy = np.meshgrid(x, y)

new_image= dEllipse(xx,yy,a,b,pa)

plt.imshow(new_image)
plt.show()
</snippet></ROW><ROW><id>15454186</id><snippet>dateutil</snippet></ROW><ROW><id>15454186</id><snippet>import os
import tarfile
import dateutil.zoneinfo

zi_path = os.path.abspath(os.path.dirname(dateutil.zoneinfo.__file__))
zonesfile = tarfile.TarFile.open(os.path.join(zi_path, 'zoneinfo--latest.tar.gz'))
zonenames = zonesfile.getnames()
</snippet></ROW><ROW><id>15454196</id><snippet>guess = "sol"
word = "stackoverflow"
hint = [l if l in guess else "_" for l in word]
print "".join(hint)
</snippet></ROW><ROW><id>15454196</id><snippet>guess</snippet></ROW><ROW><id>15454196</id><snippet>word</snippet></ROW><ROW><id>15454196</id><snippet>hint</snippet></ROW><ROW><id>15454196</id><snippet>l</snippet></ROW><ROW><id>15454196</id><snippet>"s____o____lo_"</snippet></ROW><ROW><id>15454265</id><snippet>import networkx as nx

g=nx.Graph()
a=1
b=2
c=3
d=4
g.add_edge(a,b,{'distance': 4.0})
g.add_edge(a,c,{'distance': 1.5})
g.add_edge(b,c,{'distance': 2.2})
g.add_edge(c,d,{'distance': 2.6})
result = nx.current_flow_betweenness_centrality(g, weight='distance')
</snippet></ROW><ROW><id>15454427</id><snippet>dot = ax.scatter(...)</snippet></ROW><ROW><id>15454427</id><snippet>dot.set_offsets((x, y))</snippet></ROW><ROW><id>15454427</id><snippet>DataCursor</snippet></ROW><ROW><id>15454427</id><snippet>FollowDotCursor</snippet></ROW><ROW><id>15454427</id><snippet>DataCursor</snippet></ROW><ROW><id>15454427</id><snippet>FollowDotCursor</snippet></ROW><ROW><id>15454427</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import scipy.spatial as spatial

def fmt(x, y):
    return 'x: {x:0.2f}\ny: {y:0.2f}'.format(x=x, y=y)

class FollowDotCursor(object):
    """Display the x,y location of the nearest data point.
    """
    def __init__(self, ax, x, y, tolerance=5, formatter=fmt, offsets=(-20, 20)):
        try:
            x = np.asarray(x, dtype='float')
        except (TypeError, ValueError):
            x = np.asarray(mdates.date2num(x), dtype='float')
        y = np.asarray(y, dtype='float')
        self._points = np.column_stack((x, y))
        self.offsets = offsets
        self.scale = x.ptp()
        self.scale = y.ptp() / self.scale if self.scale else 1
        self.tree = spatial.cKDTree(self.scaled(self._points))
        self.formatter = formatter
        self.tolerance = tolerance
        self.ax = ax
        self.fig = ax.figure
        self.ax.xaxis.set_label_position('top')
        self.dot = ax.scatter(
            [x.min()], [y.min()], s=130, color='green', alpha=0.7)
        self.annotation = self.setup_annotation()
        plt.connect('motion_notify_event', self)

    def scaled(self, points):
        points = np.asarray(points)
        return points * (self.scale, 1)

    def __call__(self, event):
        ax = self.ax
        # event.inaxes is always the current axis. If you use twinx, ax could be
        # a different axis.
        if event.inaxes == ax:
            x, y = event.xdata, event.ydata
        elif event.inaxes is None:
            return
        else:
            inv = ax.transData.inverted()
            x, y = inv.transform([(event.x, event.y)]).ravel()
        annotation = self.annotation
        x, y = self.snap(x, y)
        annotation.xy = x, y
        annotation.set_text(self.formatter(x, y))
        self.dot.set_offsets((x, y))
        bbox = ax.viewLim
        event.canvas.draw()

    def setup_annotation(self):
        """Draw and hide the annotation box."""
        annotation = self.ax.annotate(
            '', xy=(0, 0), ha = 'right',
            xytext = self.offsets, textcoords = 'offset points', va = 'bottom',
            bbox = dict(
                boxstyle='round,pad=0.5', fc='yellow', alpha=0.75),
            arrowprops = dict(
                arrowstyle='-&gt;', connectionstyle='arc3,rad=0'))
        return annotation

    def snap(self, x, y):
        """Return the value in self.tree closest to x, y."""
        dist, idx = self.tree.query(self.scaled((x, y)), k=1, p=1)
        try:
            return self._points[idx]
        except IndexError:
            # IndexError: index out of bounds
            return self._points[0]

x = np.random.normal(0,1.0,100)
y = np.random.normal(0,1.0,100)
fig, ax = plt.subplots()

cursor = FollowDotCursor(ax, x, y, formatter=fmt, tolerance=20)
scatter_plot = plt.scatter(x, y, facecolor="b", marker="o")

#update the colour 
new_facecolors = ["r","g"]*50
scatter_plot.set_facecolors(new_facecolors)    

plt.show()
</snippet></ROW><ROW><id>15454433</id><snippet>imp</snippet></ROW><ROW><id>15454433</id><snippet>load_module</snippet></ROW><ROW><id>15454433</id><snippet>load_source</snippet></ROW><ROW><id>15454433</id><snippet>.py</snippet></ROW><ROW><id>15454433</id><snippet>dir</snippet></ROW><ROW><id>15454433</id><snippet>issubclass</snippet></ROW><ROW><id>15454445</id><snippet>&gt;&gt;&gt; r=urllib.urlopen("http://google.com")
&gt;&gt;&gt; a=r.read()
&gt;&gt;&gt; type(a)
0: &lt;type 'str'&gt;
&gt;&gt;&gt; help(a.decode)
Help on built-in function decode:

decode(...)
    S.decode([encoding[,errors]]) -&gt; object

    Decodes S using the codec registered for encoding. encoding defaults
    to the default encoding. errors may be given to set a different error
    handling scheme. Default is 'strict' meaning that encoding errors raise
    a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'
    as well as any other name registered with codecs.register_error that is
    able to handle UnicodeDecodeErrors.

&gt;&gt;&gt; b = a.decode('utf8')
&gt;&gt;&gt; type(b)
1: &lt;type 'unicode'&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15454445</id><snippet>read()</snippet></ROW><ROW><id>15454445</id><snippet>str</snippet></ROW><ROW><id>15454445</id><snippet>.decode()</snippet></ROW><ROW><id>15454489</id><snippet>temp = dataTemplate
</snippet></ROW><ROW><id>15454489</id><snippet>dataTemplate</snippet></ROW><ROW><id>15454489</id><snippet>temp</snippet></ROW><ROW><id>15454489</id><snippet>temp[ .. ] =</snippet></ROW><ROW><id>15454489</id><snippet>temp = dataTemplate.copy()
</snippet></ROW><ROW><id>15454916</id><snippet>python -c 'import sys; print sys.real_prefix' 2&gt;/dev/null &amp;&amp; INVENV=1 || INVENV=0
</snippet></ROW><ROW><id>15455032</id><snippet>matches = {0:0, 1:0, 2:0, 3:0}

for item1, item2 in zip(list1, list2):
   for i in xrange(4):
      if item1[i]==item2[i]: 
         matches[i] += 1

and you can extract data you want by:

total_letters_compared = #length of a list * 4
total_correct_matches = #sum(matches.values())
nth_letter_pair_matches = #matchs[n-1]
</snippet></ROW><ROW><id>15455053</id><snippet>import numpy

class Atom(object):
    def atoms_method(self, foo, bar):
        #...with foo and bar being arrays of Paramsof length m &amp; n
        atom_out = foo + bar
        return atom_out


array = numpy.ndarray((10,),dtype=numpy.object)

for i in xrange(10):
    array[i] = Atom()

for i in xrange(10):
    print array[i].atoms_method(i, 5)
</snippet></ROW><ROW><id>15455068</id><snippet>soup = BeautifulSoup(f, 'xml')
</snippet></ROW><ROW><id>15455068</id><snippet>lxml</snippet></ROW><ROW><id>15455068</id><snippet>lxml</snippet></ROW><ROW><id>15455068</id><snippet>lxml</snippet></ROW><ROW><id>15455137</id><snippet>x</snippet></ROW><ROW><id>15455137</id><snippet>y</snippet></ROW><ROW><id>15455137</id><snippet>xGreater()</snippet></ROW><ROW><id>15455137</id><snippet>x</snippet></ROW><ROW><id>15455137</id><snippet>y</snippet></ROW><ROW><id>15455137</id><snippet>xGreater()</snippet></ROW><ROW><id>15455137</id><snippet>gcd()</snippet></ROW><ROW><id>15455137</id><snippet>def gcd(x, y):
    if y &gt; x:
        x, y = y, x
    r = x % y
    ...
</snippet></ROW><ROW><id>15455139</id><snippet>def parse_grid(grid):
    values = dict((s, digits) for s in squares)
    for s,d in grid_values(grid).items():
        if d in digits and not assign(values, s, d):
            return False ## (Fail if we can't assign d to square s.)
    return values
</snippet></ROW><ROW><id>15455139</id><snippet>dict</snippet></ROW><ROW><id>15455139</id><snippet>True</snippet></ROW><ROW><id>15455139</id><snippet>dict</snippet></ROW><ROW><id>15455187</id><snippet>enumerate(iterable)</snippet></ROW><ROW><id>15455187</id><snippet>(index, item)</snippet></ROW><ROW><id>15455187</id><snippet>for i, char in enumerate('python'):
   print i, char

#0, 'p'
#1, 'y'
..
#5, 'n'


&gt;&gt;&gt;dict(enumerate('python')) 
{0:'p', 1:'y', ... 5:'n'}
</snippet></ROW><ROW><id>15455249</id><snippet>seq[0]</snippet></ROW><ROW><id>15455249</id><snippet>seq</snippet></ROW><ROW><id>15455249</id><snippet>list1 = [1,2,3,4]
list2 = [1,2,3,4]
for x in range(0, len(list2)):
    print(list1[list2[x]-1])
</snippet></ROW><ROW><id>15455249</id><snippet>len(list2)</snippet></ROW><ROW><id>15455249</id><snippet>len(list1)</snippet></ROW><ROW><id>15455249</id><snippet>range(0, len(list2))</snippet></ROW><ROW><id>15455249</id><snippet>range(len(list2))</snippet></ROW><ROW><id>15455249</id><snippet>range</snippet></ROW><ROW><id>15455249</id><snippet>stop</snippet></ROW><ROW><id>15455249</id><snippet>for x in range(...):
</snippet></ROW><ROW><id>15455249</id><snippet>for item in list2:
    print(list1[item-1])    
</snippet></ROW><ROW><id>15455249</id><snippet>item</snippet></ROW><ROW><id>15455249</id><snippet>list2</snippet></ROW><ROW><id>15455332</id><snippet>if len(the_entry_widget.get()) == 0:
    do_something()
</snippet></ROW><ROW><id>15455367</id><snippet>&gt;&gt;&gt; dict(p.split('=') for p in input.split('\001'))
{'key3': 'val3', 'key2': 'val2', 'key1': 'val1', 'key4': 'val4'}
</snippet></ROW><ROW><id>15455455</id><snippet>df = pd.Panel.from_dict(d).to_frame()
</snippet></ROW><ROW><id>15455455</id><snippet>                   col1        col2
major minor                        
data1 row1         0.87        0.87
      row2      15352.3     15352.3
      row3            0           0
data2 row1   Title col1  Title col2
      row2   Title col1  Title col2
      row3   Title col1  Title col2
data3 row1      14.4878     24.4878
      row2      14.9561     24.9561
      row3      16.8293     26.8293
data4 row1   Title row1  Title row1
      row2   Title row2  Title row2
      row3   Title row3  Title row3
</snippet></ROW><ROW><id>15455455</id><snippet>pd.concat(map(pd.DataFrame, d.itervalues()), keys=d.keys()).stack().unstack(0)
</snippet></ROW><ROW><id>15455518</id><snippet>clibs</snippet></ROW><ROW><id>15455518</id><snippet>setup.py</snippet></ROW><ROW><id>15455518</id><snippet># at the top:
import os
pwd = os.getcwd()

folders = [
    "module",
    "module/folder"
]

for f in folders:
    os.system("ln -s " + pwd + "/clibs " + f + "/clibs")

try:
    # setup commands...
finally:
    # used here so that if setup raises a compilation exception, we 
    # still tidy up:

    for f in folders:
        os.system("rm " + f + "/clibs")
</snippet></ROW><ROW><id>15455518</id><snippet>pwd</snippet></ROW><ROW><id>15455518</id><snippet>ln -s</snippet></ROW><ROW><id>15455518</id><snippet>rm</snippet></ROW><ROW><id>15455532</id><snippet>LE × LE × LE</snippet></ROW><ROW><id>15455532</id><snippet>itertools.product</snippet></ROW><ROW><id>15455532</id><snippet>repeat</snippet></ROW><ROW><id>15455532</id><snippet>In [60]: list(itertools.product('LE', repeat=3))
Out[60]:
[('L', 'L', 'L'),
 ('L', 'L', 'E'),
 ('L', 'E', 'L'),
 ('L', 'E', 'E'),
 ('E', 'L', 'L'),
 ('E', 'L', 'E'),
 ('E', 'E', 'L'),
 ('E', 'E', 'E')]
</snippet></ROW><ROW><id>15455532</id><snippet>In [62]: [''.join(p) for p in itertools.product('LE', repeat=3)]
Out[62]: ['LLL', 'LLE', 'LEL', 'LEE', 'ELL', 'ELE', 'EEL', 'EEE']
</snippet></ROW><ROW><id>15455628</id><snippet>def opener():
    cj=cookielib.CookieJar()
    #Process Hadlers
    opener=urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
    opener.addheaders=[
                    ('Accept', 'application/json, text/javascript, */*; q=0.01'),
                    ('X-Requested-With', 'XMLHttpRequest'),
                    ('Referer', 'http://www.namestation.com/domain-search?autosearch=1'),
                    ('Host', 'www.namestation.com'),
                    ('Content-Type', 'application/json; charset=UTF-8'),
                    ('Connection', 'keep-alive'),
                ]
    return opener
</snippet></ROW><ROW><id>15455634</id><snippet>l.sort(key=int)
</snippet></ROW><ROW><id>15455634</id><snippet>key=int</snippet></ROW><ROW><id>15455634</id><snippet>return min(l, key=int)
</snippet></ROW><ROW><id>15455634</id><snippet>l</snippet></ROW><ROW><id>15455634</id><snippet>list()</snippet></ROW><ROW><id>15455715</id><snippet>## AutoScroll
#   Called repeatedly when the mouse is outside an entry window
#   with Button 1 down.  Scroll the window left or right,
#   depending on where the mouse is, and extend the selection
#   according to the current selection mode.
#
# TODO: AutoScroll should repeat faster (50ms) than normal autorepeat.
# TODO: Need a way for Repeat scripts to cancel themselves.
</snippet></ROW><ROW><id>15455715</id><snippet>after</snippet></ROW><ROW><id>15455715</id><snippet>WM_DELETE_WINDOW</snippet></ROW><ROW><id>15455715</id><snippet>proc shutdown_ttk_repeat {args} {
    ::ttk::CancelRepeat
}
wm protocol . WM_DELETE_WINDOW shutdown_ttk_repeat
</snippet></ROW><ROW><id>15455715</id><snippet>from tkinter import Tk,Label,Button
from tkinter import ttk
from tkinter.ttk import Combobox

def cbox_do(event):
    'Used for cbox.'
    clabel.config(text=cbox.get())

a = Tk()
cbox = Combobox(a, value=('Luke','Biggs','Wedge'), takefocus=0)
cbox.bind("&lt;&lt;ComboboxSelected&gt;&gt;", cbox_do)
cbox.pack()
clabel = Label(a)
clabel.pack()

def shutdown_ttk_repeat():
    a.eval('::ttk::CancelRepeat')

a.protocol("WM_DELETE_WINDOW", shutdown_ttk_repeat)
a.mainloop()
</snippet></ROW><ROW><id>15455779</id><snippet>a = [1,2,3]
b = [3,4,5]

print(set(a)^set(b))


&gt;&gt;&gt; [1,2,4,5]
</snippet></ROW><ROW><id>15455893</id><snippet>httplib2</snippet></ROW><ROW><id>15456000</id><snippet>C(n, k) = n! / k! * ( n - k )!                            ; k! = (k - 1)! * k
        = n! / (k - 1)! * k * (n - k)!                    ; (n - k)! = (n - k + 1)! / (n - k + 1)
        = n! * (n - k + 1) / (k - 1)! * k * (n - k + 1)!  ; C(n, k - 1) = n! / (k - 1)! * ( n - k + 1 )!
        = C(n, k - 1) * (n - k + 1) / k
</snippet></ROW><ROW><id>15456000</id><snippet>def C(n, k):
    """
    Calculate C(n, k) using Dynamic Programming.
    C(n, k) = C(n, k - 1) * (n - k + 1) / k
    """
    C = 1
    for ki in range(1, k + 1):
        C = C * (n - ki + 1) / ki
    return C
</snippet></ROW><ROW><id>15456000</id><snippet>&gt;&gt; print "Response: %dx%d = %d" % (n, n, C(2 * n - 2, n - 1),)
Response: 10000x10000 = 5...
</snippet></ROW><ROW><id>15456000</id><snippet>&gt;&gt; print "Response: %dx%d = %d" % (n, m, C(n + m - 2, m - 1),)
Response: 10000x10000 = 5...    
</snippet></ROW><ROW><id>15456000</id><snippet>      N x N      | Response's Length |   Time
-----------------+-------------------+-----------
      1 x 1      |           1 chars |  0.000001
     10 x 10     |           5 chars |  0.000004
    100 x 100    |          59 chars |  0.000068
   1000 x 1000   |         600 chars |  0.002207
  10000 x 10000  |        6018 chars |  0.163647
 100000 x 100000 |       60203 chars | 40.853971
</snippet></ROW><ROW><id>15456086</id><snippet>A.add_edge('Alice', 'Emma', weight=5)
</snippet></ROW><ROW><id>15456086</id><snippet>edge = A.get_edge('Alice', 'Emma')
edge.attr['weight'] = 5
</snippet></ROW><ROW><id>15456086</id><snippet>label</snippet></ROW><ROW><id>15456086</id><snippet>edge = A.get_edge('Alice', 'Emma')
edge.attr['label'] = '5'
</snippet></ROW><ROW><id>15456185</id><snippet>sleep_until(timestamp)</snippet></ROW><ROW><id>15456185</id><snippet>time.sleep(timestamp - time.time())</snippet></ROW><ROW><id>15456185</id><snippet>import time

minute = 60
next_time = time.time()
while True:
    doSomeWork()
    next_time += minute
    sleep_time = next_time - time.time()
    if sleep_time &gt; 0:
        time.sleep(sleep_time)
</snippet></ROW><ROW><id>15456185</id><snippet>import time
import itertools

minute = 60

for next_time in itertools.count(time.time() + minute, minute):
    doSomeWork()
    sleep_time = next_time - time.time()
    if sleep_time &gt; 0:
        time.sleep(sleep_time)
</snippet></ROW><ROW><id>15456218</id><snippet>$ python -m timeit -s 'd = {"key": "value"}' 'd["key"] = "value"'
10000000 loops, best of 3: 0.0741 usec per loop
$ python -m timeit -s 'd = {"key": "value"}' 'd.update(key="value")'
1000000 loops, best of 3: 0.294 usec per loop
$ python -m timeit -s 'd = {"key": "value"}' 'd.update({"key": "value"})'
1000000 loops, best of 3: 0.461 usec per loop
</snippet></ROW><ROW><id>15456218</id><snippet>[]</snippet></ROW><ROW><id>15456218</id><snippet>update</snippet></ROW><ROW><id>15456218</id><snippet>configuration.update(
    timeout=60,
    host='example.com',
)
</snippet></ROW><ROW><id>15456391</id><snippet>                connection.send(currentlow)
                ...
                connection.send(currenthigh)
</snippet></ROW><ROW><id>15456391</id><snippet>                s.send(currentlow)
                ...
                s.send(currenthigh)
</snippet></ROW><ROW><id>15456403</id><snippet>hadoop fs -put - /path/to/file/in/hdfs.txt
</snippet></ROW><ROW><id>15456438</id><snippet>def doFoo1(testdict):
    testdict["A"] = "test1" # this changes a value contained in testdict
    print(id(testdict)) # the id

def doFoo2(testdict):
    testdict = {some:"new dict"} # this creates a new dict object
    print(id(testdict)) # prints a different id, since testdict is a new object

def foo():
    mydict = {'A': '1235', 'B': '6458', 'C': 54156}
    print(id(mydict))
    doFoo1(mydict)
    print(id(mydict))
    doFoo2(mydict)
    print(id(mydict))
</snippet></ROW><ROW><id>15456438</id><snippet>&gt;&gt;&gt; foo()
59383560
59383560
59383560
59413832
59383560
</snippet></ROW><ROW><id>15456438</id><snippet>id</snippet></ROW><ROW><id>15456438</id><snippet>foo</snippet></ROW><ROW><id>15456438</id><snippet>doFoo</snippet></ROW><ROW><id>15456438</id><snippet>testdict = {some:"new dict"}</snippet></ROW><ROW><id>15456438</id><snippet>testdict</snippet></ROW><ROW><id>15456438</id><snippet>foo</snippet></ROW><ROW><id>15456438</id><snippet>mydict</snippet></ROW><ROW><id>15456557</id><snippet>ruta = "MultimediaData/Users/$s/%s"%(self.user.username, filename)
</snippet></ROW><ROW><id>15456557</id><snippet>ruta = "MultimediaData/Users/%s/%s"%(self.user.username, filename)
#                            ^ Notice the sign change
</snippet></ROW><ROW><id>15456557</id><snippet>$</snippet></ROW><ROW><id>15456557</id><snippet>%</snippet></ROW><ROW><id>15456575</id><snippet>target</snippet></ROW><ROW><id>15456575</id><snippet>subprocess.Popen(...)</snippet></ROW><ROW><id>15456575</id><snippet>proc = subprocess.Popen(mayapy + ' -u ' + job.pyFile)
</snippet></ROW><ROW><id>15456575</id><snippet>proc.poll()</snippet></ROW><ROW><id>15456575</id><snippet>None</snippet></ROW><ROW><id>15456575</id><snippet>None</snippet></ROW><ROW><id>15456575</id><snippet>import subprocess
import shlex
import time
PIPE = subprocess.PIPE

proc = subprocess.Popen(shlex.split('ls -lR /'), stdout=PIPE)
time.sleep(1)
print(proc.poll())
# None

proc.terminate()
time.sleep(1)
print(proc.poll())
# -15
</snippet></ROW><ROW><id>15456652</id><snippet>if (isVowel == True):
</snippet></ROW><ROW><id>15456652</id><snippet>if isVowel(char):
</snippet></ROW><ROW><id>15456652</id><snippet>isVowel</snippet></ROW><ROW><id>15456652</id><snippet>isVowel == True</snippet></ROW><ROW><id>15456652</id><snippet>In [90]: 'Abracadabra'.translate(None, 'aeiouAEIOU')
Out[90]: 'brcdbr'
</snippet></ROW><ROW><id>15456652</id><snippet>In [93]: import re
In [95]: re.sub(r'(?i)[aeiou]', '', 'Abracadabra')
Out[95]: 'brcdbr'
</snippet></ROW><ROW><id>15456652</id><snippet>str.translate</snippet></ROW><ROW><id>15456652</id><snippet>In [94]: %timeit 'Abracadabra'.translate(None, 'aeiouAEIOU')
1000000 loops, best of 3: 316 ns per loop
In [96]: %timeit re.sub(r'(?i)[aeiou]', '', 'Abracadabra')
100000 loops, best of 3: 2.26 us per loop
</snippet></ROW><ROW><id>15456684</id><snippet>itempp</snippet></ROW><ROW><id>15456684</id><snippet>itempnr</snippet></ROW><ROW><id>15456684</id><snippet>//span[@class="itempp"]/text()</snippet></ROW><ROW><id>15456684</id><snippet>span[@class="itempnr"]/span[@class="itempp"]/text()</snippet></ROW><ROW><id>15456824</id><snippet>In [104]: hexstr = '003de70fc98a'

In [105]: ':'.join([hexstr[i:i+2] for i in range(0, len(hexstr), 2)])
Out[105]: '00:3d:e7:0f:c9:8a'
</snippet></ROW><ROW><id>15456824</id><snippet>In [108]: ':'.join(map(''.join, zip(*[iter(hexstr)]*2)))
Out[108]: '00:3d:e7:0f:c9:8a'
</snippet></ROW><ROW><id>15456882</id><snippet>fmt = '%02i.txt'
targets = {fmt % i for i in range(1, 25+1)}
</snippet></ROW><ROW><id>15456882</id><snippet>for f in files:
    if f in targets:
        # do stuff
</snippet></ROW><ROW><id>15457045</id><snippet>SMTP.starttls()</snippet></ROW><ROW><id>15457045</id><snippet>keyfile</snippet></ROW><ROW><id>15457045</id><snippet>certfile</snippet></ROW><ROW><id>15457112</id><snippet>using_subprocess</snippet></ROW><ROW><id>15457112</id><snippet>using_mysqldb</snippet></ROW><ROW><id>15457112</id><snippet>subprocess</snippet></ROW><ROW><id>15457112</id><snippet>mysql</snippet></ROW><ROW><id>15457112</id><snippet>subprocess</snippet></ROW><ROW><id>15457112</id><snippet>import config
import subprocess
import shlex
import timeit
import MySQLdb
import collections
import matplotlib.pyplot as plt

Popen = subprocess.Popen
PIPE = subprocess.PIPE
sql = 'select * from table limit {n}'

def using_subprocess(n):
    p1 = Popen(
        shlex.split(
            'echo {s}'.format(s=sql.format(n=n))), stdout=PIPE, close_fds=True)

    p2 = Popen(
        shlex.split(
            'mysql --host={h} -u {u} --password={p} --database={d}'.format(
                h=config.HOST,
                u=config.USER,
                p=config.PASS,
                d=config.MYDB
                )),
        stdin=p1.stdout, stdout=PIPE, close_fds=True)

    p1.stdout.close()
    out, err = p2.communicate()
    return out

def using_mysqldb(n):
    connection = MySQLdb.connect(
        host = config.HOST, user = config.USER,
        passwd = config.PASS, db = config.MYDB)
    cursor = connection.cursor()

    cursor.execute(sql.format(n=n))
    rows = cursor.fetchall()
    return rows

times = collections.defaultdict(list)
ns = [10**i for i in range(5)]
for n in ns:
    times['using_mysqldb'].append(
        timeit.timeit('m.using_mysqldb({n})'.format(n=n),
                      'import __main__ as m',
                      number = 10))
    times['using_subprocess'].append(
        timeit.timeit('m.using_subprocess({n})'.format(n=n),
                      'import __main__ as m',
                      number = 10))

for name, time in times.iteritems():
    plt.plot(ns, time, label=name)
    # print('{n}: {t}'.format(n=name, t=time))
plt.legend(loc='best')
plt.show()    
</snippet></ROW><ROW><id>15457162</id><snippet>&gt;&gt;&gt; myStr = 'AL 4447100'
&gt;&gt;&gt; myStr.split(' ')
&gt;&gt;&gt; ['AL', '447100']
</snippet></ROW><ROW><id>15457326</id><snippet>&gt;&gt;&gt; import Point2
&gt;&gt;&gt; p1 = Point()
</snippet></ROW><ROW><id>15457326</id><snippet>Point()</snippet></ROW><ROW><id>15457326</id><snippet>&gt;&gt;&gt; import Point2
&gt;&gt;&gt; p1 = Point2.Point()
</snippet></ROW><ROW><id>15457326</id><snippet>&gt;&gt;&gt; from Point2 import Point
&gt;&gt;&gt; p1 = Point()
</snippet></ROW><ROW><id>15457326</id><snippet>from x import *</snippet></ROW><ROW><id>15457326</id><snippet>foo()</snippet></ROW><ROW><id>15457326</id><snippet>bar</snippet></ROW><ROW><id>15457326</id><snippet>from bar import foo</snippet></ROW><ROW><id>15457326</id><snippet>foo()</snippet></ROW><ROW><id>15457326</id><snippet>bar.foo()</snippet></ROW><ROW><id>15457326</id><snippet>from Point import *</snippet></ROW><ROW><id>15457326</id><snippet>Point.Point()</snippet></ROW><ROW><id>15457326</id><snippet>from x import *</snippet></ROW><ROW><id>15457326</id><snippet>x</snippet></ROW><ROW><id>15457326</id><snippet>from x import y</snippet></ROW><ROW><id>15457326</id><snippet>import x</snippet></ROW><ROW><id>15457350</id><snippet>def numOfFiles(path):
    return len(next(os.walk(path))[2])
</snippet></ROW><ROW><id>15457350</id><snippet>print numOfFiles("client_side")
</snippet></ROW><ROW><id>15457400</id><snippet>hour:min:sec.usec</snippet></ROW><ROW><id>15457400</id><snippet>strptime</snippet></ROW><ROW><id>15457400</id><snippet>datetime.time</snippet></ROW><ROW><id>15457400</id><snippet>import datetime
def timeconverter(timestring):
   hour, min, sec = timestring.split(':')
   sec, usec = sec.split('.')
   time = datetime.time(*[int(x, 10) for x in (hour, min, sec, usec)])
   return time
</snippet></ROW><ROW><id>15457947</id><snippet>PyObject_Malloc</snippet></ROW><ROW><id>15457947</id><snippet>int</snippet></ROW><ROW><id>15457947</id><snippet>PyInt_ClearFreeList()</snippet></ROW><ROW><id>15457947</id><snippet>gc.collect</snippet></ROW><ROW><id>15457947</id><snippet>import os
import gc
import psutil

proc = psutil.Process(os.getpid())
gc.collect()
mem0 = proc.get_memory_info().rss

# create approx. 10**7 int objects and pointers
foo = ['abc' for x in range(10**7)]
mem1 = proc.get_memory_info().rss

# unreference, including x == 9999999
del foo, x
mem2 = proc.get_memory_info().rss

# collect() calls PyInt_ClearFreeList()
# or use ctypes: pythonapi.PyInt_ClearFreeList()
gc.collect()
mem3 = proc.get_memory_info().rss

pd = lambda x2, x1: 100.0 * (x2 - x1) / mem0
print "Allocation: %0.2f%%" % pd(mem1, mem0)
print "Unreference: %0.2f%%" % pd(mem2, mem1)
print "Collect: %0.2f%%" % pd(mem3, mem2)
print "Overall: %0.2f%%" % pd(mem3, mem0)
</snippet></ROW><ROW><id>15457947</id><snippet>Allocation: 3034.36%
Unreference: -752.39%
Collect: -2279.74%
Overall: 2.23%
</snippet></ROW><ROW><id>15457947</id><snippet>mallopt</snippet></ROW><ROW><id>15457947</id><snippet>free</snippet></ROW><ROW><id>15457947</id><snippet>range</snippet></ROW><ROW><id>15457947</id><snippet>int</snippet></ROW><ROW><id>15457947</id><snippet>int</snippet></ROW><ROW><id>15457947</id><snippet>long</snippet></ROW><ROW><id>15458071</id><snippet>(port,)</snippet></ROW><ROW><id>15458071</id><snippet>(port)</snippet></ROW><ROW><id>15458645</id><snippet>bar3d</snippet></ROW><ROW><id>15458645</id><snippet>from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

x = [0.0245, 0.015, 0.0245, 0.0285, 0.0245, 0.0245]
y = [0.0024, 0.0075, 0.0095, 0.01, 0.008, 0.0018]
z = [11.71, 2.09, 2.49, 2.05, 2.72, 22.55]

ax.bar3d(x, y, [0]*6, 0.001, 0.001, z)

ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')

plt.show()
</snippet></ROW><ROW><id>15458662</id><snippet>Test</snippet></ROW><ROW><id>15458662</id><snippet>class Test(object):
          ^^^^^^^^
</snippet></ROW><ROW><id>15458662</id><snippet>property()</snippet></ROW><ROW><id>15458662</id><snippet>object</snippet></ROW><ROW><id>15458662</id><snippet>Test</snippet></ROW><ROW><id>15458662</id><snippet>prop</snippet></ROW><ROW><id>15458662</id><snippet>In [28]: t.prop='Re-Init'

AttributeError: can't set attribute
</snippet></ROW><ROW><id>15458719</id><snippet>eval</snippet></ROW><ROW><id>15458719</id><snippet>1000000**1000000</snippet></ROW><ROW><id>15459270</id><snippet>font</snippet></ROW><ROW><id>15459270</id><snippet>canvas.create_text(x, y, font=("Purisa",12) text= k)
</snippet></ROW><ROW><id>15459270</id><snippet>rndfont="Purisa" #in principle
#some time later...
canvas.create_text(x, y, font=(rndfont,12), text= k)
</snippet></ROW><ROW><id>15459702</id><snippet>&gt;&gt;&gt; a=['a','b','c']
&gt;&gt;&gt; j=str.join
&gt;&gt;&gt; j('', a)
'abc'
&gt;&gt;&gt; j(' ', a)
'a b c'
</snippet></ROW><ROW><id>15459702</id><snippet>str.join</snippet></ROW><ROW><id>15459786</id><snippet>FileLike</snippet></ROW><ROW><id>15459786</id><snippet>t: 2012.11.18 19:39:03 50A93957 +024.50 0189
t: 2012.11.18 19:39:13 50A93961 +024.50 0189
t: 2012.11.18 19:39:23 50A9396B +024.50 0188
</snippet></ROW><ROW><id>15459786</id><snippet>import serial
import time

buffer = bytes()
ser = serial.Serial('/dev/ttyACM0',9600, timeout=10)
while buffer.count('t:') &lt; 2:
    buffer += ser.read(30)
ser.close();
# Now we have at least one complete datum. Isolate it.
start = buffer.index('t:')
end = buffer.index('t:', start+1)
items = buffer[start:end].strip().split()
print items[1], items[2], items[4]
</snippet></ROW><ROW><id>15459786</id><snippet>In [23]: buffer = '39:03 50A9\r\nt: 2012.11.18 19:39:13 50A93961 +024.50 0189\r\nt: 2012.11.18 19:39:23 50A9396B +024.50 0188'
</snippet></ROW><ROW><id>15459786</id><snippet>In [24]: buffer.count('t:')
Out[24]: 2
</snippet></ROW><ROW><id>15459786</id><snippet>In [25]: buffer.index('t:')
Out[25]: 12

In [26]: buffer.index('t:', 12+1)
Out[26]: 58
</snippet></ROW><ROW><id>15459786</id><snippet>In [27]: buffer[12:58+1].strip().split()
Out[27]: ['t:', '2012.11.18', '19:39:13', '50A93961', '+024.50', '0189', 't']

In [28]: items = buffer[12:59].strip().split()

In [29]: print items[1], items[2], items[4]
2012.11.18 19:39:13 +024.50
</snippet></ROW><ROW><id>15460019</id><snippet>import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--l1', type=str)
parser.add_argument('--l2', type=str)
args = parser.parse_args()
l1_list = args.l1.split(',') # ['1','2','3','4']
</snippet></ROW><ROW><id>15460019</id><snippet>python prog.py --l1=1,2,3,4</snippet></ROW><ROW><id>15460019</id><snippet>import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--l1', type=str, help="two numbers separated by a hyphen")
parser.add_argument('--l2', type=str)
args = parser.parse_args()
l1_list_range = xrange(*args.l1.split('-')) # xrange(1,50)
for i in l1_list_range:
    print i
</snippet></ROW><ROW><id>15460019</id><snippet>python prog.py --l1=1-50</snippet></ROW><ROW><id>15460102</id><snippet>subprocess</snippet></ROW><ROW><id>15460102</id><snippet>pdftotext</snippet></ROW><ROW><id>15460102</id><snippet>-layout</snippet></ROW><ROW><id>15460102</id><snippet>import subprocess
import re

def findCAS(pdf, page=None):
    '''Find all CAS numbers on the numbered page of a file.

    Arguments:
    pdf -- Name of the PDF file to search
    page -- number of the page to search. if None, search all pages.
    '''
    if page == None:
        args = ['pdftotext', '-layout', '-q', pdf, '-']
    else:
        args = ['pdftotext', '-f', str(page), '-l', str(page), '-layout',
                '-q', pdf, '-']
    txt = subprocess.check_output(args)
    candidates =  re.findall('\d{2,6}-\d{2}-\d{1}', txt)
    checked = [x.lstrip('0') for x in candidates if checkCAS(x)]
    return list(set(checked))

def checkCAS(cas):
    '''Check if a string is a valid CAS number.

    Arguments:
    cas -- string to check
    '''
    nums = cas[::-1].replace('-', '') # all digits in reverse order
    checksum = int(nums[0]) # first digit is the checksum
    som = 0
    # Checksum method from: http://nl.wikipedia.org/wiki/CAS-nummer
    for n, d in enumerate(nums[1:]):
        som += (n+1)*int(d)
    return som % 10 == checksum
</snippet></ROW><ROW><id>15460118</id><snippet>#include &lt;Python.h&gt;
#include &lt;stdlib.h&gt; 

static PyObject * fast_xor(PyObject* self, PyObject* args)
{
    const char* str;
    char * buf;
    Py_ssize_t count;
    PyObject * result;
    int i;

    if (!PyArg_ParseTuple(args, "s#", &amp;str, &amp;count))
    {
        return NULL;
    }

    buf = (char *)malloc(count);

    for(i=0;i&lt;count;i++)
    {
        buf[i]=str[i] ^ 55;
    }

    result = Py_BuildValue("s#", buf, count);
    free(buf);
    return result;
}
</snippet></ROW><ROW><id>15460118</id><snippet>char *</snippet></ROW><ROW><id>15460118</id><snippet>In [1]: import fastxor

In [2]: a = "abcdsafasf12q423\0sdfasdf"

In [3]: fastxor.fast_xor(a)
Out[3]: 'VUTSDVQVDQ\x06\x05F\x03\x05\x047DSQVDSQ'


In [5]: import numpy as np

In [6]: (np.frombuffer(a, np.int8)^55).tostring()
Out[6]: 'VUTSDVQVDQ\x06\x05F\x03\x05\x047DSQVDSQ'

In [7]: a = a*10000

In [8]: %timeit fastxor.fast_xor(a)
1000 loops, best of 3: 877 us per loop

In [15]: %timeit (np.frombuffer(a, np.int8)^55).tostring()
1000 loops, best of 3: 1.15 ms per loop
</snippet></ROW><ROW><id>15460463</id><snippet>beta(a, b) = gamma(a) * gamma(b) / gamma(a+b)</snippet></ROW><ROW><id>15460463</id><snippet>from scipy.special import gamma, beta
x = 10
print gamma(x+0.5)/gamma(x)
print gamma(0.5)/beta(x, 0.5)
</snippet></ROW><ROW><id>15460528</id><snippet>DataFrame.from_dict</snippet></ROW><ROW><id>15460528</id><snippet>import pandas as pd
import datetime
timeseries = {datetime.datetime(2013, 3, 17, 18, 19): {'t2': 400, 't1': 1000},
                 datetime.datetime(2013, 3, 17, 18, 20): {'t2': 300, 't1': 3000}
                }
print pd.DataFrame.from_dict(timeseries, orient="index")
</snippet></ROW><ROW><id>15460528</id><snippet>                      t2    t1
2013-03-17 18:19:00  400  1000
2013-03-17 18:20:00  300  3000
</snippet></ROW><ROW><id>15460731</id><snippet>t1 = threading.Thread(target = func1, args = (arg1, arg2))
</snippet></ROW><ROW><id>15460768</id><snippet>import urllib2
with open('books.json', 'rb') as data_file:
    my_data = data_file.read()
req = urllib2.Request(url='http://localhost:8983/solr/update/json?commit=true',
                      data=my_data)
req.add_header('Content-type', 'application/json')
f = urllib2.urlopen(req)
# Begin using data like the following
print f.read()
</snippet></ROW><ROW><id>15460768</id><snippet>POST</snippet></ROW><ROW><id>15460768</id><snippet>-H</snippet></ROW><ROW><id>15460768</id><snippet>curl</snippet></ROW><ROW><id>15460768</id><snippet>add_header</snippet></ROW><ROW><id>15460894</id><snippet>publicsuffix</snippet></ROW><ROW><id>15460894</id><snippet>&gt;&gt;&gt; from publicsuffix import PublicSuffixList
&gt;&gt;&gt; psl = PublicSuffixList()
&gt;&gt;&gt; print psl.get_public_suffix('mail.yahoo.com')
yahoo.com
&gt;&gt;&gt; print psl.get_public_suffix('account.hotmail.co.uk')
hotmail.co.uk
</snippet></ROW><ROW><id>15461076</id><snippet>create_upload_url</snippet></ROW><ROW><id>15461076</id><snippet> http://localhost:8080/_ah/admin/datastore
</snippet></ROW><ROW><id>15461086</id><snippet>def mergefill(to_fill, fill_char, fill_from):
    for filler in fill_from:
        it = iter(filler)
        yield [c if c != fill_char else next(it) for c in to_fill]
</snippet></ROW><ROW><id>15461086</id><snippet>&gt;&gt;&gt; my_list = ["A", "B", "C", "X", "X", "X"]
&gt;&gt;&gt; list(mergefill(my_list, 'X', product('LE', repeat=3)))
[['A', 'B', 'C', 'L', 'L', 'L'], ['A', 'B', 'C', 'L', 'L', 'E'], ['A', 'B', 'C', 'L', 'E', 'L'], ['A', 'B', 'C', 'L', 'E', 'E'], ['A', 'B', 'C', 'E', 'L', 'L'], ['A', 'B', 'C', 'E', 'L', 'E'], ['A', 'B', 'C', 'E', 'E', 'L'], ['A', 'B', 'C', 'E', 'E', 'E']]
</snippet></ROW><ROW><id>15461086</id><snippet>&gt;&gt;&gt; my_list = ["A", "X", "B", "X"]
&gt;&gt;&gt; list(mergefill(my_list, 'X', product('LE', repeat=2)))
[['A', 'L', 'B', 'L'], ['A', 'L', 'B', 'E'], ['A', 'E', 'B', 'L'], ['A', 'E', 'B', 'E']]
</snippet></ROW><ROW><id>15461113</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; timestamp = datetime.utcnow()
&gt;&gt;&gt; end_of_day = datetime(year=timestamp.year, month=timestamp.month, day=timestamp.day, hour=23, minute=59, second=59)
&gt;&gt;&gt; end_of_day
datetime.datetime(2013, 3, 17, 23, 59, 59)
</snippet></ROW><ROW><id>15461113</id><snippet>datetime.utcnow().hour</snippet></ROW><ROW><id>15461113</id><snippet>0</snippet></ROW><ROW><id>15461407</id><snippet>parent="menu_procurement_management" 
</snippet></ROW><ROW><id>15461431</id><snippet>import itertools as IT
import collections

list1 = ["INTJ","ENTJ","ESTJ"]
list2 = ["INTP","ESFJ","ISTJ"]

matches = collections.Counter()
for item1, item2 in zip(list1, list2):
    for n in range(1,4):
        for idx in IT.combinations(range(4), n):
            if all(item1[i] == item2[i] for i in idx):
                print(item1, item2, idx)
                matches[n] += 1

print(matches)
</snippet></ROW><ROW><id>15461431</id><snippet>% test.py
('INTJ', 'INTP', (0,))
('INTJ', 'INTP', (1,))
('INTJ', 'INTP', (2,))
('INTJ', 'INTP', (0, 1))
('INTJ', 'INTP', (0, 2))
('INTJ', 'INTP', (1, 2))
('INTJ', 'INTP', (0, 1, 2))
('ENTJ', 'ESFJ', (0,))
('ENTJ', 'ESFJ', (3,))
('ENTJ', 'ESFJ', (0, 3))
('ESTJ', 'ISTJ', (1,))
('ESTJ', 'ISTJ', (2,))
('ESTJ', 'ISTJ', (3,))
('ESTJ', 'ISTJ', (1, 2))
('ESTJ', 'ISTJ', (1, 3))
('ESTJ', 'ISTJ', (2, 3))
('ESTJ', 'ISTJ', (1, 2, 3))
Counter({1: 8, 2: 7, 3: 2})
</snippet></ROW><ROW><id>15461431</id><snippet>('ESTJ', 'ISTJ', (2, 3))
</snippet></ROW><ROW><id>15461431</id><snippet>Counter({1: 8, 2: 7, 3: 2})
</snippet></ROW><ROW><id>15461553</id><snippet>import threading, Queue

def func1(num, q):
    while num &lt; 100000000:
        num =  num**2
        q.put(num)

def func2(num, q):
    while num &lt; 100000000:
        num = q.get()
        print num,

num = 2
q = Queue.Queue()
thread1 = threading.Thread(target=func1,args=(num,q))
thread2 = threading.Thread(target=func2,args=(num,q))
print 'setup'
thread1.start()
thread2.start()
</snippet></ROW><ROW><id>15461553</id><snippet>=== pu@pumbair:~/StackOverflow:507 &gt; ./tst.py
setup
4 16 256 65536 4294967296
</snippet></ROW><ROW><id>15461647</id><snippet>__init__</snippet></ROW><ROW><id>15461647</id><snippet>def __init__(self, Dot):
    self.List = [Dot]
    self.List[self.ic]=Dot 
    self.ic=self.ic+1
</snippet></ROW><ROW><id>15461691</id><snippet>EVT_STC_KEY</snippet></ROW><ROW><id>15461691</id><snippet>Reports all keys pressed. Used on GTK+ because of some problems with keyboard focus. Not sent by Windows version.</snippet></ROW><ROW><id>15461691</id><snippet>EVT_STC_CHARADDED</snippet></ROW><ROW><id>15461691</id><snippet>event.Skip()</snippet></ROW><ROW><id>15461691</id><snippet>\r</snippet></ROW><ROW><id>15461691</id><snippet>\n</snippet></ROW><ROW><id>15461691</id><snippet>STC_KEY_DOWN</snippet></ROW><ROW><id>15461693</id><snippet>signal.alarm</snippet></ROW><ROW><id>15461693</id><snippet>SIGALRM</snippet></ROW><ROW><id>15461719</id><snippet>data</snippet></ROW><ROW><id>15461719</id><snippet>Typically, you want to send some form-encoded data — much like an HTML form.
To do this, simply pass a dictionary to the data argument.
Your dictionary of data will automatically be form-encoded
when the request is made:

&gt;&gt;&gt; payload = {'key1': 'value1', 'key2': 'value2'}
&gt;&gt;&gt; r = requests.post("http://httpbin.org/post", data=payload)
</snippet></ROW><ROW><id>15461764</id><snippet>import foo</snippet></ROW><ROW><id>15461764</id><snippet>from foo import bar</snippet></ROW><ROW><id>15461764</id><snippet>foo</snippet></ROW><ROW><id>15461764</id><snippet>foo.bar()</snippet></ROW><ROW><id>15461764</id><snippet>bar</snippet></ROW><ROW><id>15461764</id><snippet>bar()</snippet></ROW><ROW><id>15461764</id><snippet>from foo import *</snippet></ROW><ROW><id>15461764</id><snippet>__all__</snippet></ROW><ROW><id>15461764</id><snippet>foo = 42
from bar import * # bar contains a `foo`
print foo # whatever is from `bar`
</snippet></ROW><ROW><id>15461764</id><snippet>from foo import a,b,c,d,e,f,g</snippet></ROW><ROW><id>15461764</id><snippet>import foo as imported_foo</snippet></ROW><ROW><id>15461764</id><snippet>from foo import *</snippet></ROW><ROW><id>15461855</id><snippet>import io
import pandas as pd

content='''\
date time                               A  B
2013-03-15 17:00:00            1  134
2013-03-15 18:00:00          810  134
2013-03-15 19:00:00         1797  134
2013-03-15 20:00:00          813  135
2013-03-15 21:00:00         1323  134
2013-03-16 05:00:00           98  134
2013-03-16 06:00:00          515  135
2013-03-16 10:00:00          377  134
2013-03-16 11:00:00         1798  136
2013-03-16 12:00:00          985  136
2013-03-17 08:00:00          258  137'''

df = pd.read_table(io.BytesIO(content), sep='\s+',
                   parse_dates=[[0, 1]], header=0,
                   index_col=0)

print(df.groupby(['B']).sum())
</snippet></ROW><ROW><id>15461855</id><snippet>        A
B        
134  4406
135  1328
136  2783
137   258
</snippet></ROW><ROW><id>15461855</id><snippet>B</snippet></ROW><ROW><id>15461867</id><snippet>join()</snippet></ROW><ROW><id>15461867</id><snippet>clients_orders = db.Table('clients_orders',
    db.Column('client_id', db.Integer, db.ForeignKey('client.id'),
              primary_key=True),
    db.Column('order_id', db.Integer, db.ForeignKey('order.id'),
              primary_key=True)
)

class Client(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    orders = db.relationship('Order', secondary=clients_orders,
                             backref='clients')
    # Define other columns...

class Order(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    # Define other columns...

class Item(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    order_id = db.Column(db.Integer, db.ForeignKey('order.id'), nullable=False)
    order = db.relationship('Order', backref='items')
    timestamp = db.Column(db.DateTime)
    # Define other columns...
</snippet></ROW><ROW><id>15461867</id><snippet>db.session.query(Item).\
    join(Order).join(Order.clients).\
    filter(Client.id == 42).\
    order_by(Item.timestamp)
</snippet></ROW><ROW><id>15461901</id><snippet>OpenSSL 0.9.8r 8 Feb 2011</snippet></ROW><ROW><id>15461901</id><snippet>requests</snippet></ROW><ROW><id>15462095</id><snippet>/</snippet></ROW><ROW><id>15462095</id><snippet>1.0 / i</snippet></ROW><ROW><id>15462095</id><snippet>In [2]: 1 / 2
Out[2]: 0

In [3]: 1.0 / 2
Out[3]: 0.5

In [4]: 1 / 2.0
Out[4]: 0.5
</snippet></ROW><ROW><id>15462095</id><snippet>/</snippet></ROW><ROW><id>15462095</id><snippet>from __future__ import division</snippet></ROW><ROW><id>15462095</id><snippet>In [11]: from __future__ import division

In [12]: 1 / 2
Out[12]: 0.5
</snippet></ROW><ROW><id>15462123</id><snippet>C-C++</snippet></ROW><ROW><id>15462207</id><snippet>requests</snippet></ROW><ROW><id>15462207</id><snippet>urllib3</snippet></ROW><ROW><id>15462207</id><snippet>urllib</snippet></ROW><ROW><id>15462207</id><snippet>urllib2</snippet></ROW><ROW><id>15462207</id><snippet>requests</snippet></ROW><ROW><id>15462207</id><snippet>pycurl</snippet></ROW><ROW><id>15462207</id><snippet>pycurl</snippet></ROW><ROW><id>15462207</id><snippet>requests</snippet></ROW><ROW><id>15462510</id><snippet>StoppableThread</snippet></ROW><ROW><id>15462510</id><snippet>threading.Thread</snippet></ROW><ROW><id>15462510</id><snippet>class StoppableThread(threading.Thread):
    """Thread class with a stop() method. The thread itself has to check
    regularly for the stopped() condition."""

    def __init__(self,*args,**kwargs):
        super(threading.Thread,self).__init__(*args,**kwargs)
        self._stop = threading.Event()
</snippet></ROW><ROW><id>15462525</id><snippet>from pydoc_data import topics

a = topics.topics['class']
print a
</snippet></ROW><ROW><id>15462584</id><snippet>bear_room</snippet></ROW><ROW><id>15462584</id><snippet>    elif next == 'exit':
        exit_game(bear_room)
</snippet></ROW><ROW><id>15462584</id><snippet>stage</snippet></ROW><ROW><id>15462584</id><snippet>    elif con_ext == 'no':
        stage()
</snippet></ROW><ROW><id>15462952</id><snippet>int('2+2')</snippet></ROW><ROW><id>15462952</id><snippet>4</snippet></ROW><ROW><id>15462952</id><snippet>int()</snippet></ROW><ROW><id>15462952</id><snippet>eval</snippet></ROW><ROW><id>15462952</id><snippet>eval</snippet></ROW><ROW><id>15463141</id><snippet>requests</snippet></ROW><ROW><id>15463141</id><snippet>urllib2</snippet></ROW><ROW><id>15463141</id><snippet>import requests
from flask import Flask
app = Flask(__name__)

@app.route('/some-url')
def get_data():
    return requests.get('http://example.com').content
</snippet></ROW><ROW><id>15463178</id><snippet>IndexError</snippet></ROW><ROW><id>15463178</id><snippet>if line[0] != "&gt;":
    li.append(line)
</snippet></ROW><ROW><id>15463178</id><snippet>if line[0] != "&gt;":
    li.append(line.rstrip())
</snippet></ROW><ROW><id>15463178</id><snippet>seq</snippet></ROW><ROW><id>15463178</id><snippet>complement()</snippet></ROW><ROW><id>15463178</id><snippet>answer</snippet></ROW><ROW><id>15463178</id><snippet>comp</snippet></ROW><ROW><id>15463178</id><snippet>seq</snippet></ROW><ROW><id>15463178</id><snippet>ip()</snippet></ROW><ROW><id>15463178</id><snippet>COMPLEMENT = str.maketrans("ATCG", "TAGC")
LENGTH = 4

with open("palindrome.txt") as input:
    seq = ''.join(line.rstrip() for line in input if line[0] != "&gt;")

def complement(seq): return seq.translate(COMPLEMENT)

def ip(length, seq):
    n = 0
    comp = complement(seq)
    while length + n &lt;= len(seq):
        for i in range(0, length-1):
            if seq[n + i] != comp[n + length - 1 - i]:
                n += 1
                break
            if n + i &gt; n + length - 1 - i:
                print(n + 1, length)
                n += 1
    if length &lt;= 12:
        ip(length + 1, seq)

print(repr(seq))
print(repr(complement(seq)))
ip(LENGTH, seq)
</snippet></ROW><ROW><id>15463178</id><snippet>print()</snippet></ROW><ROW><id>15463358</id><snippet>conf.py</snippet></ROW><ROW><id>15463358</id><snippet>sys.path</snippet></ROW><ROW><id>15463358</id><snippet>conf.py</snippet></ROW><ROW><id>15463358</id><snippet>sphinx.ext.autodoc</snippet></ROW><ROW><id>15463358</id><snippet>extensions</snippet></ROW><ROW><id>15463358</id><snippet>sphinx.ext.autodoc</snippet></ROW><ROW><id>15463358</id><snippet>.autodoc.FunctionDocumenter</snippet></ROW><ROW><id>15463358</id><snippet>setup(app)</snippet></ROW><ROW><id>15463358</id><snippet>.autodoc.setup()</snippet></ROW><ROW><id>15463358</id><snippet>app.add_autodocumenter(SubclassName)</snippet></ROW><ROW><id>15463358</id><snippet>objtype</snippet></ROW><ROW><id>15463496</id><snippet>configure</snippet></ROW><ROW><id>15463496</id><snippet>default_font = tkFont.nametofont("TkDefaultFont")
default_font.configure(size=48)
</snippet></ROW><ROW><id>15463496</id><snippet>option_add</snippet></ROW><ROW><id>15463496</id><snippet>root.option_add("*Font", default_font)
</snippet></ROW><ROW><id>15463496</id><snippet>option_add</snippet></ROW><ROW><id>15463496</id><snippet>option_add</snippet></ROW><ROW><id>15463496</id><snippet>option_add</snippet></ROW><ROW><id>15463496</id><snippet>root.option_add("*Font", "TkDefaultFont")</snippet></ROW><ROW><id>15463501</id><snippet>timelist = []
for y in range(0, 24, 1):
    for x in range(0, 60, 10):     
        # should be ten? 
        start = datetime.time(y, x)
        timelist.append(start)


timedict = {}
for start in timelist:
    timedict[start] = 0
# is it the dictionary looking for?

start_date = datetime.time(7, 55, 56)

for i in range(len(timelist)):
    if timelist[i] &lt;= start_date:
        if i == len(timelist)-1 or start_date &lt; timelist[i+1]
            timedict[timelist[i]] += 1  # or = 1, depend on your usage
</snippet></ROW><ROW><id>15463569</id><snippet>DGRYy</snippet></ROW><ROW><id>15463569</id><snippet>import re
from itertools import chain
print list(chain.from_iterable(re.findall('[DGRYy]{3,}', data)))
# ['D', 'G', 'D', 'D', 'D', 'D', 'D', 'R', 'Y', 'D', 'y', 'D', 'G', 'R', 'D', 'D', 'Y', 'G', 'R']
</snippet></ROW><ROW><id>15463569</id><snippet>print [ch for ch in data[data.index('Ph'):].partition('Dets=')[0].split(' ', 1)[1] if ch != ' ']
</snippet></ROW><ROW><id>15463749</id><snippet>OBJECT_CACHE = dict()
class Base(object):
    def __new__(cls, *args, **kwargs):
        class_addr = cls.name()
        obj = OBJECT_CACHE.get(class_addr)
        if obj is None:
            obj = super(Base, cls).__new__(cls, *args, **kwargs)
            OBJECT_CACHE[class_addr] = obj
        return obj
    @classmethod
    def name(cls):
        names = [k.__name__.lower() for k in cls.mro() 
                if k != Base and issubclass(k, Base)]
        return '.'.join(names[::-1])


class F(Base): pass
class A(Base): pass
class E(A): pass
class B(A): pass
class C(B): pass
f = F()
a = A()
e = E()
b = B()
c = C()
print(OBJECT_CACHE.keys())
</snippet></ROW><ROW><id>15463749</id><snippet>['a', 'a.e', 'a.b.c', 'a.b', 'f']
</snippet></ROW><ROW><id>15463794</id><snippet>list_x = []</snippet></ROW><ROW><id>15463794</id><snippet>f += 1</snippet></ROW><ROW><id>15463794</id><snippet>class Ui_Wizard(object):
    def addSpins(self):
        list_x = []
        ...

    ...
    self.wizardPage2.initializePage = self.addSpins
</snippet></ROW><ROW><id>15463794</id><snippet>self.wizardPage1.registerField("cols*", self.spinBox_col)
</snippet></ROW><ROW><id>15463816</id><snippet>if</snippet></ROW><ROW><id>15463816</id><snippet>else</snippet></ROW><ROW><id>15463816</id><snippet>for</snippet></ROW><ROW><id>15463816</id><snippet>def</snippet></ROW><ROW><id>15463816</id><snippet>pass</snippet></ROW><ROW><id>15463816</id><snippet>if not item["price"]:
    pass
else:
    items.append(item)
</snippet></ROW><ROW><id>15463816</id><snippet>if item["price"]:
    items.append(item)
</snippet></ROW><ROW><id>15463899</id><snippet>Terminal.app</snippet></ROW><ROW><id>15463899</id><snippet>#!/bin/sh
osascript -e '
    on run parameters
        tell application "Terminal"
            activate
            do script with command "python " &amp; parameters
        end tell
    end run
' $@
</snippet></ROW><ROW><id>15463899</id><snippet>{
    "cmd": ["sh PATH_TO_SHELL_SCRIPT \"$file\""],
    "shell": true
}
</snippet></ROW><ROW><id>15464203</id><snippet>WHERE ANCESTOR IS</snippet></ROW><ROW><id>15464368</id><snippet>pip install -r pip-requires</snippet></ROW><ROW><id>15464368</id><snippet>pip-requires</snippet></ROW><ROW><id>15464368</id><snippet>setup.py install</snippet></ROW><ROW><id>15464368</id><snippet>install_requires</snippet></ROW><ROW><id>15464368</id><snippet>setup.py</snippet></ROW><ROW><id>15464665</id><snippet>next</snippet></ROW><ROW><id>15464665</id><snippet>popup.values = (a, b)</snippet></ROW><ROW><id>15464665</id><snippet>from Tkinter import *

class App(Tk):
    def __init__(self):
        Tk.__init__(self)
        self.a = 1
        self.b = 2
        self.label = Label(self, text="Right-click to display menu", width=40, height=20)
        self.button = Button(self, text="Quit", command=self.destroy)
        self.label.bind("&lt;Button-3&gt;", self.do_popup)
        self.label.pack()
        self.button.pack()
    def do_popup(self, event):
        popup = Popup(self, self.a, self.b)
        try:
            popup.tk_popup(event.x_root, event.y_root)
        finally:
            popup.grab_release()

class Popup(Menu):
    def __init__(self, master, a, b):
        Menu.__init__(self, master, tearoff=0)
        self.a = a
        self.b = b
        self.add_command(label="Next", command=self.next)
        self.add_command(label="Previous")
        self.add_separator()
        self.add_command(label="Home")
    def next(self):
        print self.a, self.b

app = App()
app.mainloop()
</snippet></ROW><ROW><id>15464835</id><snippet>replace</snippet></ROW><ROW><id>15464835</id><snippet>text = "foo Marko bar Jure tar"
words = ["Marko", "Jure"]
replacement = ["Petar", "Flip"]
for repl in zip(words, replacement):
    text = text.replace(*repl)
print text
</snippet></ROW><ROW><id>15464840</id><snippet>for df in store.select('df',chunksize=10000):
    print df
</snippet></ROW><ROW><id>15464900</id><snippet>None</snippet></ROW><ROW><id>15464900</id><snippet>dump</snippet></ROW><ROW><id>15464900</id><snippet>load</snippet></ROW><ROW><id>15465191</id><snippet>\n</snippet></ROW><ROW><id>15465191</id><snippet>raw_input</snippet></ROW><ROW><id>15465191</id><snippet>while True:
    c = raw_input('please enter a character: ')
    print 'you entered', c
</snippet></ROW><ROW><id>15465234</id><snippet>from itertools import chain

n = [3,5,7]
o = [4,10,8]
p = [4,10,5]

print sum(chain(n, o, p))
# 56
</snippet></ROW><ROW><id>15465234</id><snippet>chain</snippet></ROW><ROW><id>15465275</id><snippet>date_parser</snippet></ROW><ROW><id>15465275</id><snippet>dateutil.parser.parse</snippet></ROW><ROW><id>15465275</id><snippet>addtime</snippet></ROW><ROW><id>15465275</id><snippet>timedelta</snippet></ROW><ROW><id>15465275</id><snippet>from StringIO import StringIO
import datetime as dt
import pandas as pd
import dateutil.parser as parser

def addtime(temp):
    temp = parser.parse(temp) + dt.timedelta(hours=16)
    return temp

data = """\
    '12-31-2012',5100, 5200
    '01/1/2013',5300,5400"""

tdata = pd.read_csv(StringIO(data),
    names = ['date', 'field1', 'field'], index_col = None,
    parse_dates =['date'], header= None, date_parser=addtime)

print tdata
</snippet></ROW><ROW><id>15465275</id><snippet>                  date  field1  field
0  2012-12-31 16:00:00    5100   5200
1  2013-01-01 16:00:00    5300   5400
</snippet></ROW><ROW><id>15465283</id><snippet>- url: /_ah/mail/string@.*your_app_id\.appspotmail.com
  script: handler2.app
  login: admin
- url: /_ah/mail/string%2B.*@.*your_app_id\.appspotmail.com
  script: handler1.app
  login: admin
- url: /_ah/mail/.+
  script: catchall.app
  login: admin
</snippet></ROW><ROW><id>15465417</id><snippet>def normalize(arr):
    """
    Linear normalization
    http://en.wikipedia.org/wiki/Normalization_%28image_processing%29
    """
    # Do not touch the alpha channel
    for i in range(3):
        minval = arr[...,i].min()
        maxval = arr[...,i].max()
        if minval != maxval:
            arr[...,i] -= minval
            arr[...,i] *= (255.0/(maxval-minval))
    return arr
</snippet></ROW><ROW><id>15465417</id><snippet>import numpy as np
import Image

def normalize(arr):
    for i in range(3):
        minval = arr[..., i].min()
        maxval = arr[..., i].max()

        if minval != maxval:
            arr[..., i] -= minval
            arr[..., i] *= (255.0 / (maxval - minval))
    return arr

img = Image.open('orig.jpg').convert('RGBA')
a = np.array(img)
b = normalize(a)

im = Image.fromarray(b)
im.save('output.jpg')
</snippet></ROW><ROW><id>15465417</id><snippet>orig.jpg</snippet></ROW><ROW><id>15465417</id><snippet>output.jpg</snippet></ROW><ROW><id>15465566</id><snippet>text = 'aabbababacccssdd'

from itertools import groupby
print [''.join(g) for k, g in groupby(text)]
# # ['aa', 'bb', 'a', 'b', 'a', 'b', 'a', 'ccc', 'ss', 'dd']
</snippet></ROW><ROW><id>15465634</id><snippet>VALUES(column)</snippet></ROW><ROW><id>15465634</id><snippet>ON DUPLICATE KEY UPDATE</snippet></ROW><ROW><id>15465634</id><snippet>    cursor = database.cursor()
    cursor.execute("""
        INSERT INTO userfan 
            (user_id, number, round)
        VALUES 
            (%s, %s, %s) 
        ON DUPLICATE KEY UPDATE 
                                          -- no need to update the PK
            number  = VALUES(number), 
            round   = VALUES(round) ;
                   """, (user_id, number, round)     # python variables
                  )
    database.commit()
</snippet></ROW><ROW><id>15465681</id><snippet>import sys
subjects = ["History", "Science"]
topics_science = ["Light", "X-mas Exam Review"]
topics_history = ["Italian Renaissance"]
science_xmasreview = ["Q. What do we use to catogorize a habitat?",
                      "A. Damp or Dry, Hot or Cold, Windy or Calm, Dim or Bright.",
                      "Q. What is something that only eats plants?",
                      "A. Herbivore",
                      "Q. What are the properties of oxygen?"]

science_light = [
    "Q. What is an object the gives out light?",
    "A. Light source",
    "Q. What is the speed of light?",
    "A. 300 million meters per second.",
    "Q. What does transparent mean?",
    "A. Light can pass completely through a transparent material."]

history_renaissance = [
    "Q. What did Lorenzo do differently from Cosimo?",
    "A. Lorenzo made no effort to conceal his power",
    "Q. Why did the Pope want Lorenzo dead?",
    "A. Because the Pope wanted more power and saw Lorenzo as a threat.",
    "Q. Who did the Pazzi plot with to kill Lorenzo?",
    "A. Pope Sixtus IV"]

def printer(list):
    n = 0
    l = len(list)
    print
    while n &lt; l:
        print list[n]  # &lt;-- Changed this from a return to a print statement
        newline()
        n += 1
    while n == l:
        n += 1

def qanda(x):
    print
    print "Enter 1 for just questions"
    print "Enter 2 for just answers"
    print "Enter 3 for both"
    qa = raw_input("Enter number: ")
    qa = str(qa)
    if qa == '1':
        printer(x[::2])
    elif qa == '2':
        printer(x[1::2])
    elif qa == '3':
        printer(x)
    else:
        print "Not recognized"

def newline():
    raw_input()
    print



def subjectchoice():
    if subject == "1":
        print
        history()
    elif subject == "2":
        print
        science()
    else:
        print 'Not recognized.'
def science():
    print topics_science
    print "Enter 1 for Light"
    print "Enter 2 for X-mas Exam Review"
    topicchoice = raw_input("Enter number: ")
    topicchoice = str(topicchoice)
    if topicchoice == "1":
        qanda(science_light)
    elif topicchoice == "2":
        qanda(science_xmasreview)
    else:
        print "Not recognized"
        sys.exit
def history():
    print topics_history
    print "Enter 1 for Italian Renaissance"
    topicchoice = raw_input("Enter number: ")
    topicchoice = str(topicchoice)
    if topicchoice == "1":
        return qanda(history_renaissance)
    else:
        print "Not recognized"
        sys.exit()
print subjects
print "Enter 1 for History"
print "Enter 2 for Science"
subject = raw_input("Enter number: ")
subject = str(subject)
subjectchoice()
</snippet></ROW><ROW><id>15465727</id><snippet>number_of_empty_files = len([x[1] for x in v if x[1] == 'EMPTY'])
</snippet></ROW><ROW><id>15465727</id><snippet>number_of_empty_files = len(filter(lambda x: x[1] == 'EMPTY', v))
</snippet></ROW><ROW><id>15466103</id><snippet>import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

sin = np.sin
cos = np.cos
pi = np.pi
N = 100

x = np.linspace(0, pi, N)
a = sin(x)
b = cos(x)

df = pd.DataFrame({
    'A': [True]*N + [False]*N,
    'B': np.hstack((a,b))
    })

for key, grp in df.groupby(['A']):
    plt.plot(grp['B'], label=key)
    grp['D'] = pd.rolling_mean(grp['B'], window=5)    
    plt.plot(grp['D'], label='rolling ({k})'.format(k=key))
plt.legend(loc='best')    
plt.show()
</snippet></ROW><ROW><id>15466130</id><snippet>@register.inclusion_tag('includes/gravatar_links.html')
def gravatar_links(email, first_name):
    url = "http://www.gravatar.com/" + hashlib.md5(email.lower()).hexdigest()
    url += '.json'

    response = urllib2.urlopen(url)
    interm = simplejson.load(response)
    accounts_list = interm["entry"][0]["accounts"]
    data = simplejson.dumps(interm)

    return {'gravatar_links': {'accounts': accounts_list, 'name': first_name, 'data': data}}
</snippet></ROW><ROW><id>15466130</id><snippet>accounts_list = interm["entry"][0]["accounts"]</snippet></ROW><ROW><id>15466130</id><snippet>"urls"</snippet></ROW><ROW><id>15466130</id><snippet>urls_list = interm["entry"][0]["urls"]</snippet></ROW><ROW><id>15466130</id><snippet>dictionary</snippet></ROW><ROW><id>15466130</id><snippet>[element: {key1=&gt;value1, ...}, {key2=&gt;value2, ...}]</snippet></ROW><ROW><id>15466130</id><snippet>and follow {{ gravatar_links.name }} on 

{% for o in gravatar_links.accounts %}
    {% if not forloop.first and not forloop.last %}, {% endif %}
    {% if forloop.last %} and {% endif %}

    &lt;a href="{{ o.url }}"&gt;{{ o.shortname }}&lt;/a&gt;

    {% if forloop.last %}.{% endif %}
{% endfor %} 
</snippet></ROW><ROW><id>15466130</id><snippet>if forloop</snippet></ROW><ROW><id>15466130</id><snippet>and follow John on facebook and twitter.</snippet></ROW><ROW><id>15466130</id><snippet>and follow John on facebook, linkedin, and twitter.</snippet></ROW><ROW><id>15466376</id><snippet>def make_progress_report(n):
    i = [0]
    def progress_report():
        i[0] = i[0] + 1
        if i[0] % n == 0:
            print i[0]
    return progress_report
</snippet></ROW><ROW><id>15466376</id><snippet>from itertools import count
def make_progress_report(n):
    i = count(1)
    def progress_report():
        cur = i.next()
        if cur % n == 0:
            print cur
    return progress_report
</snippet></ROW><ROW><id>15466376</id><snippet>def make_progress_report(n):
    i = 0
    def progress_report():
        nonlocal i
        i = i + 1
        if i % n == 0:
            print i
    return progress_report
</snippet></ROW><ROW><id>15466398</id><snippet>siege -c20 -t30 http://www.yoururl.com/
</snippet></ROW><ROW><id>15466536</id><snippet>self.verticalHeader().setMinimumSectionSize(30)
</snippet></ROW><ROW><id>15466696</id><snippet>## client side
# get file size here, for example:
# filesize = os.path.getfilesize(filepath)
sock.sendall("FILE %s %d\n" % (filename, filesize))
sock.sendall(fd.read())


...
## server side
# error handling is left out
header = ""
while True:
    d = sock.recv(1)
    if d == '\n':
        break
    header += d

filesize = int(header.split()[-1])
# or search for the last space in header
# and get a substring of header as filename
filename = "".join(header.split()[1:-1])
data = ""
while filesize &gt; 0:
    chunk = sock.recv(1024) # or any amount of data
    filesize -= chunk
    data += chunk
</snippet></ROW><ROW><id>15466696</id><snippet>\n</snippet></ROW><ROW><id>15466696</id><snippet>## client side
sock.sendall("FILE %s\n")
sock.sendall(fd.read())

...
## server side
# data = read data here
newline = data.find('\n')
assert newline != -1 # some error handling here
header = data[newline]
filename = header[len("FILE "):]
content = data[newline+1:]
</snippet></ROW><ROW><id>15466759</id><snippet>move</snippet></ROW><ROW><id>15466759</id><snippet>dragInfo["xCoord"]</snippet></ROW><ROW><id>15466759</id><snippet>dragInfo["yCoord"]</snippet></ROW><ROW><id>15466759</id><snippet>def onPressToMove(self, event): #get initial location of object to be moved
    winX = event.x - self.canvas.canvasx(0)
    winY = event.y - self.canvas.canvasy(0)
    self.dragInfo["Widget"] = self.canvas.find_closest(event.x, event.y, halo = 5)[0]

    # reset the starting point for the next move
    self.dragInfo["xCoord"] = winX
    self.dragInfo["yCoord"] = winY
</snippet></ROW><ROW><id>15466850</id><snippet>i</snippet></ROW><ROW><id>15466850</id><snippet>Test.i</snippet></ROW><ROW><id>15466850</id><snippet>Test</snippet></ROW><ROW><id>15466850</id><snippet>i</snippet></ROW><ROW><id>15466850</id><snippet>class Test(object):
    def __init__(self):
        self.i = 0

    def add(self):
        self.i += 1
</snippet></ROW><ROW><id>15466865</id><snippet>chatbox</snippet></ROW><ROW><id>15466865</id><snippet>numlines = len(chatbox.get("1.0",END).splitlines())
</snippet></ROW><ROW><id>15466865</id><snippet>from Tkinter import *
import os
import threading

def CONVERT():
    numlines = len(chatbox.get("1.0",END).splitlines())
    if numlines &gt; 2:
        chatbox.delete("1.0",END)
        chatbox.insert(INSERT,"Console: Limit Reached, Chat Wiped" + "\n")
    chatbox.insert(INSERT,"You: "+USER_ENTRY.get()+ "\n")
    INPUT_BOX.set("")

chat = Tk()
chat.title("Net Send Client [0.4]")
chat.geometry('550x500+200+200')

title = StringVar()
title.set("Net Send Chat\n Type in box to send.")
title_widget = Label(chat,textvariable = title, height = 4)
title_widget.pack()

INPUT_BOX = StringVar()
USER_ENTRY = Entry(chat,textvariable = INPUT_BOX)
USER_ENTRY.pack(side=TOP, padx = 10, pady = 20)

send_button = Button(chat, text="Send",width = 20, command = CONVERT)
send_button.pack(padx = 10, pady = 10)

chatbox = Text(width = 60, height = 15, relief = SUNKEN)
left = Frame(chatbox)
right = Frame(chatbox)
s_start = Scrollbar(right)
s_start.pack(side=RIGHT)

chatbox.grid(row = 0, column = 0, columnspan = 3)
chatbox.pack()

chat.mainloop()
</snippet></ROW><ROW><id>15466926</id><snippet>format()</snippet></ROW><ROW><id>15466926</id><snippet>str.format()</snippet></ROW><ROW><id>15466926</id><snippet>''.join([format(el, '&lt;10') for el in list_of_strings])
</snippet></ROW><ROW><id>15466926</id><snippet>&gt;&gt;&gt; list_of_strings = ['foo', 'barbaz', 'spam-ham']
&gt;&gt;&gt; ''.join([format(el, '&lt;10') for el in list_of_strings])
'foo       barbaz    spam-ham  '
</snippet></ROW><ROW><id>15466926</id><snippet>&lt;</snippet></ROW><ROW><id>15466926</id><snippet>&gt;</snippet></ROW><ROW><id>15466926</id><snippet>^</snippet></ROW><ROW><id>15466926</id><snippet>&gt;&gt;&gt; list_of_strings = ['foo', 'ba', 'a']
&gt;&gt;&gt; ''.join([format(el, '&gt;4') for el in list_of_strings])
' foo  ba   a'
</snippet></ROW><ROW><id>15466928</id><snippet>{}</snippet></ROW><ROW><id>15466928</id><snippet>np.bytes_(b'Hello').__format__()</snippet></ROW><ROW><id>15466928</id><snippet>__format__</snippet></ROW><ROW><id>15466928</id><snippet>Python 3.2.3 (default, Oct 19 2012, 19:53:57) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; '{}'.format(np.bytes_(b'Hello'))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
RuntimeError: maximum recursion depth exceeded while calling a Python object
&gt;&gt;&gt; '{!s}'.format(np.bytes_(b'Hello'))
"b'Hello'"
&gt;&gt;&gt; '{!r}'.format(np.bytes_(b'Hello'))
"b'Hello'"
</snippet></ROW><ROW><id>15467046</id><snippet>buffer()</snippet></ROW><ROW><id>15467046</id><snippet>&gt;&gt;&gt; struct.unpack_from('&gt;h', buffer(bytearray('zabx')), 1)
(24930,)
</snippet></ROW><ROW><id>15467046</id><snippet>buffer()</snippet></ROW><ROW><id>15467046</id><snippet>&gt;&gt;&gt; b0 = bytearray('xaby')
&gt;&gt;&gt; b1 = buffer(b0)
&gt;&gt;&gt; b1
&lt;read-only buffer for ...&gt;
&gt;&gt;&gt; b1[1:3]
'ab'
&gt;&gt;&gt; b0[1:3] = 'nu'
&gt;&gt;&gt; b1[1:3]
'nu'
</snippet></ROW><ROW><id>15467046</id><snippet>Python 3.2.3 (default, Jun  8 2012, 05:36:09) 
[GCC 4.7.0 20120507 (Red Hat 4.7.0-5)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.unpack_from('&gt;h', b'xaby', 1)
(24930,)
&gt;&gt;&gt; struct.unpack_from('&gt;h', bytearray(b'xaby'), 1)
(24930,)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15467145</id><snippet>locals</snippet></ROW><ROW><id>15467145</id><snippet>pygame</snippet></ROW><ROW><id>15467145</id><snippet>import pygame.locals
</snippet></ROW><ROW><id>15467145</id><snippet>pygame</snippet></ROW><ROW><id>15467145</id><snippet>pygame/__init__.py</snippet></ROW><ROW><id>15467145</id><snippet>from . import locals</snippet></ROW><ROW><id>15467331</id><snippet>from win32com.client import Dispatch
excel = Dispatch('Excel.Application')
wb = excel.Workbooks.Open(r'c:\path\to\file.xlsx')
ws = wb.Sheets('My Sheet')
# do other stuff, just like VBA
wb.Close()
excel.Quit()
</snippet></ROW><ROW><id>15467486</id><snippet>from collections import Counter

def only_uniques(seq):
    return [k for k,n in Counter(seq).iteritems() if n == 1]
</snippet></ROW><ROW><id>15467486</id><snippet>from collections import Counter

def only_uniques_ordered(seq):
    counts = Counter(seq)
    return [k for k in seq if counts[k] == 1]
</snippet></ROW><ROW><id>15467486</id><snippet>O(n)</snippet></ROW><ROW><id>15467486</id><snippet>list_of_tuples = [tuple(k) for k in list_of_lists]
</snippet></ROW><ROW><id>15467486</id><snippet>list_of_tuples</snippet></ROW><ROW><id>15467486</id><snippet>list_of_lists = [list(k) for k in list_of_tuples]
</snippet></ROW><ROW><id>15467497</id><snippet>print sum([i**i for i in range(1,1001)])%(10**10)</snippet></ROW><ROW><id>15467497</id><snippet>print sum([i**i for i in range(1,1001)])</snippet></ROW><ROW><id>15467621</id><snippet>curl -O http://www.sec.gov/rss/news/press.xml</snippet></ROW><ROW><id>15467798</id><snippet>from nltk.tokenize import word_tokenize
from nltk.tag import pos_tag

sentences = ['alice loves to read crime novels.', 'she also loves to play chess with him']
sentences_with_pronouns = []

for sentence in sentences:
    words = word_tokenize(sentence)
    for word in words:
        word_pos = pos_tag([word])
        if word_pos[0][1] == 'PRP':
            sentences_with_pronouns.append(sentence)
            break

print sentences_with_pronouns
</snippet></ROW><ROW><id>15467798</id><snippet>['she also loves to play chess.']
</snippet></ROW><ROW><id>15467869</id><snippet>self.adln = Button(frame, text = "Add Line", command=self.adln)
self.adpt = Button(frame, text = "Add Point", command=self.adpt)
self.canvas.bind("&lt;Button-1&gt;", self.click)

#...
def adln(self):
    self.geometry = "Line"
def adpt(self):
    self.geometry = "Points"
#...

def click(self, event):
    if self.start is None:
        self.start = (event.x, event.y)
    else:
        self.draw_geometry()
        self.start = None
def draw_geometry(self):
    if self.geometry == "Points":
        p1 = Point(*self.start)
        p2 = Point(event.x, event.y)
        p1.draw(self.canvas)
        p2.draw(self.canvas)
    elif self.geometry == "Line":
        line = Line(event.x, event.y, *self.start)
        line.draw(self.canvas)
</snippet></ROW><ROW><id>15467869</id><snippet>draw</snippet></ROW><ROW><id>15467869</id><snippet>&lt;Button-1&gt;</snippet></ROW><ROW><id>15467869</id><snippet>&lt;Button-2&gt;</snippet></ROW><ROW><id>15467869</id><snippet>&lt;Button-3&gt;</snippet></ROW><ROW><id>15468115</id><snippet>POST</snippet></ROW><ROW><id>15468203</id><snippet>def hit_test(x, y, xsize, ysize):
    xmin = (x - xsize//2) // tile_size
    xmax = (x + xsize//2) // tile_size
    ymin = (y - ysize//2) // tile_size
    ymax = (y + ysize//2) // tile_size
    for xtile in range(xmin, xmax):
        for ytile in range(xmin, xmax):
            if tiles[xtile][ytile] != 0:
                COLLISION
</snippet></ROW><ROW><id>15468248</id><snippet>{% if all %}
{% for every in all %}
    {% for i in "12345" %}
        {% if forloop.counter == every.rated %}
           &lt;input type="radio" name="rate{{forloop.counter}}" value="{{forloop.counter}}" checked&gt;{{forloop.counter}}
        {% else %}
           &lt;input type="radio" name="rate{{forloop.counter}}" value="{{forloop.counter}}"&gt;{{forloop.counter}}
        {% endif %}
    {% endfor %}
{% endfor %}
{% endif %}
</snippet></ROW><ROW><id>15468267</id><snippet>PhotoImage</snippet></ROW><ROW><id>15468267</id><snippet>from PIL import Image, ImageTk

image = Image.open("images/myimage.jpg")
photoimg = ImageTk.PhotoImage(image)
b = Radiobutton(root, image=photoimg)
</snippet></ROW><ROW><id>15468368</id><snippet>def main():
screen = pygame.display.set_mode((675, 480))
pygame.display.set_caption("Space Invaders")

background = pygame.Surface(screen.get_size())
background.fill((0, 0, 0))

allSprites = pygame.sprite.Group()

for j in range(0, 5):
    for i in range(0, 10):
        invader1 = Invader1(screen, (75*i,75*j ))
        invader1.add(allSprites)
</snippet></ROW><ROW><id>15468543</id><snippet>def find(string_list, search):
    return [s for s in string_list if search in s]
</snippet></ROW><ROW><id>15468710</id><snippet>&gt;&gt;&gt; a = np.arange(100).reshape(10, 10)
&gt;&gt;&gt; a
array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
       [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
       [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],
       [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],
       [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],
       [70, 71, 72, 73, 74, 75, 76, 77, 78, 79],
       [80, 81, 82, 83, 84, 85, 86, 87, 88, 89],
       [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]])

&gt;&gt;&gt; lilm = scipy.sparse.lil_matrix(a)

&gt;&gt;&gt; lilm[[1, 2, 3], :].toarray() # extract the rows first...
array([[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
       [30, 31, 32, 33, 34, 35, 36, 37, 38, 39]])

&gt;&gt;&gt; lilm[[1, 2, 3], :][:, [4, 5, 6]].toarray() # ...then the columns
array([[14, 15, 16],
       [24, 25, 26],
       [34, 35, 36]])
</snippet></ROW><ROW><id>15468710</id><snippet>.toarray()</snippet></ROW><ROW><id>15468918</id><snippet>worker</snippet></ROW><ROW><id>15468918</id><snippet>join()</snippet></ROW><ROW><id>15468918</id><snippet>worker</snippet></ROW><ROW><id>15468918</id><snippet>join()</snippet></ROW><ROW><id>15468918</id><snippet>join()</snippet></ROW><ROW><id>15468918</id><snippet>worker</snippet></ROW><ROW><id>15469330</id><snippet>import urllib
stats_text = urllib.urlopen('http://ip.of.projector').read()
</snippet></ROW><ROW><id>15469502</id><snippet>def main():
    dict_filename = 'dictionary.txt'
    print("part 4")
    part4(dict_filename)


def part1(dict_filename):
    vowels = 'aeiouy'
    vowelcount = 0
    dictionary = open(dict_filename,'r')
    for words in dictionary:
        words = words.lower()
        vowelcount = 0
        if len(words) == 8:
            if 's' not in words:
                for letters in words:
                    if letters in vowels:
                        vowelcount += 1
                if vowelcount == 1:
                    print(words)
    return words

def part4(dict_filename):
    dictionary = open(dict_filename,'r')
    naclcount = 0
    for words in dictionary:
        if 'nacl' in words:
            naclcount = naclcount + 1
    return naclcount

main()
</snippet></ROW><ROW><id>15469502</id><snippet>if __name__ == '__main__':
    dict_filename = 'dictionary.txt'
    print("part 4")
    part4(dict_filename)
</snippet></ROW><ROW><id>15469502</id><snippet>main</snippet></ROW><ROW><id>15469521</id><snippet>{id}</snippet></ROW><ROW><id>15469521</id><snippet>id</snippet></ROW><ROW><id>15469521</id><snippet>protorpc</snippet></ROW><ROW><id>15469521</id><snippet>from google.appengine.ext import endpoints
from protorpc import messages
from protorpc import remote

class MyMessageClass(messages.Message):
  id = messages.StringField(1)  # Or any other field type

@endpoints.api(...)
class MyApi(remote.Service):
  @endpoints.method(MyMessageClass, SomeResponseClass,
                    ..., path='foos/{id}')
  def my_method(self, request):
    ...
</snippet></ROW><ROW><id>15469678</id><snippet>self.x</snippet></ROW><ROW><id>15469678</id><snippet>x</snippet></ROW><ROW><id>15469678</id><snippet>self.z</snippet></ROW><ROW><id>15469678</id><snippet>z</snippet></ROW><ROW><id>15469678</id><snippet>z</snippet></ROW><ROW><id>15469678</id><snippet>self.y = self.x</snippet></ROW><ROW><id>15469678</id><snippet>self.z.append(...)</snippet></ROW><ROW><id>15469678</id><snippet>self.z</snippet></ROW><ROW><id>15469678</id><snippet>append</snippet></ROW><ROW><id>15469678</id><snippet>if not self.z</snippet></ROW><ROW><id>15469678</id><snippet>self.x</snippet></ROW><ROW><id>15469678</id><snippet>self.x</snippet></ROW><ROW><id>15469683</id><snippet>In [1]: str1 = "This is    a  foo bar   sentence with  crazy spaces that  irritates   my program "

In [2]: ' '.join(str1.split())
Out[2]: 'This is a foo bar sentence with crazy spaces that irritates my program'
</snippet></ROW><ROW><id>15469683</id><snippet>split()</snippet></ROW><ROW><id>15469812</id><snippet>def apply_mask(a, indices, axis):
    magic_index = [np.arange(i) for i in indices.shape]
    magic_index = np.ix_(*magic_index)
    magic_index = magic_index[:axis] + (indices,) + magic_index[axis:]
    return a[magic_index]
</snippet></ROW><ROW><id>15469812</id><snippet>def apply_mask(a, indices, axis):
    magic_index = np.ogrid[tuple(slice(i) for i in indices.shape)]
    magic_index.insert(axis, indices)
    return a[magic_index]
</snippet></ROW><ROW><id>15470076</id><snippet>str</snippet></ROW><ROW><id>15470076</id><snippet>os.rename</snippet></ROW><ROW><id>15470076</id><snippet>open</snippet></ROW><ROW><id>15470076</id><snippet>dir = dirname(abspath(unicode(__file__)))</snippet></ROW><ROW><id>15470210</id><snippet>+</snippet></ROW><ROW><id>15470210</id><snippet>&gt;&gt;&gt; li = [1, 2, 3, 4]
&gt;&gt;&gt; new_list = li + [5, 6, 7]
&gt;&gt;&gt; new_list
[1, 2, 3, 4, 5, 6, 7]
</snippet></ROW><ROW><id>15470337</id><snippet>&lt;img alt="Embedded Image" src="data:image/png;base64,&lt;your base64 encoding here&gt;" /&gt;
</snippet></ROW><ROW><id>15470337</id><snippet>import base64

with open("image.png", "rb") as image:
    encoded_string = base64.b64encode(image.read())
</snippet></ROW><ROW><id>15470409</id><snippet>s</snippet></ROW><ROW><id>15470409</id><snippet>i</snippet></ROW><ROW><id>15470409</id><snippet>j</snippet></ROW><ROW><id>15470409</id><snippet>k</snippet></ROW><ROW><id>15470409</id><snippet>i &lt;= k &lt; j</snippet></ROW><ROW><id>15470409</id><snippet>i</snippet></ROW><ROW><id>15470409</id><snippet>j</snippet></ROW><ROW><id>15470409</id><snippet>len(s)</snippet></ROW><ROW><id>15470409</id><snippet>len(s)</snippet></ROW><ROW><id>15470409</id><snippet>i</snippet></ROW><ROW><id>15470409</id><snippet>None</snippet></ROW><ROW><id>15470409</id><snippet>0</snippet></ROW><ROW><id>15470409</id><snippet>j</snippet></ROW><ROW><id>15470409</id><snippet>None</snippet></ROW><ROW><id>15470409</id><snippet>len(s)</snippet></ROW><ROW><id>15470409</id><snippet>i</snippet></ROW><ROW><id>15470409</id><snippet>j</snippet></ROW><ROW><id>15470752</id><snippet>&lt;record model="ir.ui.view" id="namelist_dailyupdate"&gt;
    &lt;field name="name"&gt;checkroll.daily.update.form&lt;/field&gt;
    &lt;field name="model"&gt;checkroll.daily.update&lt;/field&gt;
    &lt;field name="inherit_id" ref="hr.view_employee_form" /&gt;
    &lt;field name="type"&gt;form&lt;/field&gt;
    &lt;field name="arch" type="xml"&gt;
        &lt;form string="daily_update"&gt;
            &lt;field name="kanganyname" /&gt;
        &lt;/form&gt;
    &lt;/field&gt;
&lt;/record&gt;
</snippet></ROW><ROW><id>15470752</id><snippet>&lt;record model="ir.ui.view" id="namelist_dailyupdate"&gt;
    &lt;field name="name"&gt;checkroll.daily.update.form&lt;/field&gt;
    &lt;field name="model"&gt;checkroll.daily.update&lt;/field&gt;
    &lt;field name="inherit_id" ref="hr.view_employee_form" /&gt;
    &lt;field name="type"&gt;form&lt;/field&gt;
    &lt;field name="arch" type="xml"&gt;
        &lt;form string="daily_update"&gt;
            &lt;xpath expr="//field[@name='name']" position="after"&gt;
                &lt;field name="kanganyname" /&gt;
           &lt;/xpath&gt;
        &lt;/form&gt;
   &lt;/field&gt;
&lt;/record&gt;
</snippet></ROW><ROW><id>15470951</id><snippet>execfile</snippet></ROW><ROW><id>15470951</id><snippet>tag_equals('value', 'foobar')
attribute_exists('value', 'value_attr')
</snippet></ROW><ROW><id>15470951</id><snippet>def main():
    for filename in sys.argv[1:]:
        run_validation(filename)

def run_validation(filename):
    # import all "built-in" names for validations
    from mychecks import tag_equals, etc
    execfile(filename, locals())

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>15470951</id><snippet>execfile</snippet></ROW><ROW><id>15470951</id><snippet>xpath_equals</snippet></ROW><ROW><id>15470951</id><snippet>for i in range(10):
tag_equals('address%d' % i, 'N/A')</snippet></ROW><ROW><id>15470951</id><snippet>execfile</snippet></ROW><ROW><id>15470951</id><snippet>execfile</snippet></ROW><ROW><id>15471212</id><snippet>localhost</snippet></ROW><ROW><id>15471212</id><snippet>python manage.py runserver your_ip:port</snippet></ROW><ROW><id>15471427</id><snippet>__eq__()</snippet></ROW><ROW><id>15471427</id><snippet>__hash__()</snippet></ROW><ROW><id>15471427</id><snippet>__eq__()</snippet></ROW><ROW><id>15471427</id><snippet>__hash__()</snippet></ROW><ROW><id>15471427</id><snippet>__eq__()</snippet></ROW><ROW><id>15471427</id><snippet>__hash__()</snippet></ROW><ROW><id>15471427</id><snippet>__hash()__</snippet></ROW><ROW><id>15471427</id><snippet>__eq()__</snippet></ROW><ROW><id>15471427</id><snippet>__hash()__</snippet></ROW><ROW><id>15471427</id><snippet>__eq()__</snippet></ROW><ROW><id>15471427</id><snippet>__hash()__</snippet></ROW><ROW><id>15471427</id><snippet>None</snippet></ROW><ROW><id>15471427</id><snippet>__hash()__</snippet></ROW><ROW><id>15471427</id><snippet>__hash__ = None</snippet></ROW><ROW><id>15471525</id><snippet>PyEval_InitThreads</snippet></ROW><ROW><id>15471525</id><snippet>PyEval_SaveThread</snippet></ROW><ROW><id>15471525</id><snippet>PyEval_RestoreThread</snippet></ROW><ROW><id>15471525</id><snippet>Py_{BEGIN,END}_ALLOW_THREADS</snippet></ROW><ROW><id>15471525</id><snippet>PyEval_InitThreads</snippet></ROW><ROW><id>15471525</id><snippet>Py_INCREF</snippet></ROW><ROW><id>15471525</id><snippet>PyGILState_Ensure</snippet></ROW><ROW><id>15471525</id><snippet>PyGILState_Release</snippet></ROW><ROW><id>15471700</id><snippet>import re
from itertools import izip

s = 'Title: Example: of a title Date: November 23 1234 Other: Other information'

keys = ['Title', 'Date', 'Other']
pattern = re.compile('({})\s+'.format(':|'.join(keys)))

print dict(izip(*[(i.strip() for i in (pattern.split(s)) if i)]*2))
</snippet></ROW><ROW><id>15471700</id><snippet>{'Date:': 'November 23 1234 ',
 'Other:': 'Other information',
 'Title:': 'Example: of a title '}
</snippet></ROW><ROW><id>15472228</id><snippet>def connect_db(): return sqlie3.connect(app.config['DATABASE'] 
</snippet></ROW><ROW><id>15472228</id><snippet>def connect_db(): return sqlie3.connect(app.config['DATABASE'])
</snippet></ROW><ROW><id>15472228</id><snippet>:</snippet></ROW><ROW><id>15472228</id><snippet>def connect_db(): return sqlie3.connect(app.config['DATABASE'] if __name__ == '__main__': ...
</snippet></ROW><ROW><id>15472228</id><snippet>:</snippet></ROW><ROW><id>15472241</id><snippet>import numpy as np
pos = np.array([[200,0], [210,210], [215,215], [192,186]], dtype=float)
lastpos = np.array([[200,2000], [ 210,210], [195, 195], [160,160]], dtype=float)
velocity = np.array([[ 5,5], [8,2], [5,3], [10,-4]], dtype=float)
mass = np.array([ 10, 20, 5, 30 ], dtype=float)
size = np.array([ 15, 25, 15, 30 ], dtype=float)

def moveParticles(pos, lastpos, velocity, dt):
    lastpos[:] = pos[:]
    pos[:] += velocity * dt
</snippet></ROW><ROW><id>15472241</id><snippet>pos</snippet></ROW><ROW><id>15472241</id><snippet>lastpos</snippet></ROW><ROW><id>15472241</id><snippet>moveParticles(pos, lastpos, velocity, 1)
</snippet></ROW><ROW><id>15472766</id><snippet>data = create_string_buffer(nLength)
</snippet></ROW><ROW><id>15472766</id><snippet>c_void_p</snippet></ROW><ROW><id>15472766</id><snippet>POINTER(c_void_p)</snippet></ROW><ROW><id>15472766</id><snippet>PVOID</snippet></ROW><ROW><id>15472766</id><snippet>void *</snippet></ROW><ROW><id>15472766</id><snippet>None</snippet></ROW><ROW><id>15472766</id><snippet>LONG</snippet></ROW><ROW><id>15472766</id><snippet>pointer(plcAddress)</snippet></ROW><ROW><id>15472766</id><snippet>POINTER(AmsAddr)</snippet></ROW><ROW><id>15472811</id><snippet>time</snippet></ROW><ROW><id>15472811</id><snippet>_multiprocessing</snippet></ROW><ROW><id>15472811</id><snippet>SetConsoleCtrlHandler</snippet></ROW><ROW><id>15472811</id><snippet>time</snippet></ROW><ROW><id>15472811</id><snippet>hInterruptEvent</snippet></ROW><ROW><id>15472811</id><snippet>sleep</snippet></ROW><ROW><id>15472811</id><snippet>WaitForSingleObject(hInterruptEvent, ul_millis)</snippet></ROW><ROW><id>15472811</id><snippet>time</snippet></ROW><ROW><id>15472811</id><snippet>imp.init_builtin('time')</snippet></ROW><ROW><id>15472811</id><snippet>time</snippet></ROW><ROW><id>15472811</id><snippet>SetConsoleCtrlHandler</snippet></ROW><ROW><id>15472811</id><snippet>time</snippet></ROW><ROW><id>15472811</id><snippet>time</snippet></ROW><ROW><id>15472811</id><snippet>scipy</snippet></ROW><ROW><id>15472811</id><snippet>time</snippet></ROW><ROW><id>15472811</id><snippet>ctypes</snippet></ROW><ROW><id>15472811</id><snippet>thread.interrupt_main</snippet></ROW><ROW><id>15472811</id><snippet>SIGINT</snippet></ROW><ROW><id>15472811</id><snippet>interrupt_main</snippet></ROW><ROW><id>15472811</id><snippet>PyErr_SetInterrupt</snippet></ROW><ROW><id>15472811</id><snippet>Handlers[SIGINT]</snippet></ROW><ROW><id>15472811</id><snippet>Py_AddPendingCall</snippet></ROW><ROW><id>15472811</id><snippet>checksignals_witharg</snippet></ROW><ROW><id>15472811</id><snippet>PyErr_CheckSignals</snippet></ROW><ROW><id>15472811</id><snippet>Handlers[SIGINT]</snippet></ROW><ROW><id>15472811</id><snippet>Handlers[SIGINT].func</snippet></ROW><ROW><id>15472811</id><snippet>func</snippet></ROW><ROW><id>15472811</id><snippet>signal.default_int_handler</snippet></ROW><ROW><id>15472811</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>15472811</id><snippet>&gt;&gt;&gt; import os, imp, thread, ctypes
&gt;&gt;&gt; import win32api
&gt;&gt;&gt; basepath = imp.find_module('numpy')[1]
&gt;&gt;&gt; lib1 = ctypes.CDLL(os.path.join(basepath, 'core', 'libmmd.dll'))
&gt;&gt;&gt; lib2 = ctypes.CDLL(os.path.join(basepath, 'core', 'libifcoremd.dll'))
&gt;&gt;&gt; def handler(sig, hook=thread.interrupt_main):
...     hook()
...     return 1
...
&gt;&gt;&gt; win32api.SetConsoleCtrlHandler(handler, 1)

&gt;&gt;&gt; import time
&gt;&gt;&gt; from scipy import stats
&gt;&gt;&gt; time.sleep(10)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyboardInterrupt
</snippet></ROW><ROW><id>15472939</id><snippet>checked = request.POST.getlist('ck1[]')</snippet></ROW><ROW><id>15472939</id><snippet>checked = request.POST.getlist('ck1')</snippet></ROW><ROW><id>15473057</id><snippet>def GroupGeneralConfig(self, *args, **kwargs)
     img = str(args[0]) + "abc"
</snippet></ROW><ROW><id>15473057</id><snippet>GroupGeneralConfig(arg_x, arg_y, kwarg_x=1, kwarg_y=2)
</snippet></ROW><ROW><id>15473180</id><snippet>Debug.Print Selection.Rows.Count
Debug.Print Selection.Columns.Count
Debug.Print Selection.Row
Debug.Print Selection.Column
</snippet></ROW><ROW><id>15473180</id><snippet>8 
7 
1 
1 
</snippet></ROW><ROW><id>15473305</id><snippet>def startrunning(self,ev):
def stoprunning(self,ev):
</snippet></ROW><ROW><id>15473305</id><snippet>w.bind('&lt;KeyPress-s&gt;',lambda ev:self.startrunning())
w.bind('&lt;KeyPress-l&gt;',lambda ev:self.stoprunning())
</snippet></ROW><ROW><id>15473425</id><snippet>None</snippet></ROW><ROW><id>15473425</id><snippet>www.reddit.com</snippet></ROW><ROW><id>15473425</id><snippet>&lt;a name="content"&gt;&lt;/a&gt;
</snippet></ROW><ROW><id>15473425</id><snippet>None</snippet></ROW><ROW><id>15473425</id><snippet>None</snippet></ROW><ROW><id>15473425</id><snippet>urls = [(i, i.get('href')) for i in soup.findAll('a')]
print [u for u in urls if u[1] is None]
</snippet></ROW><ROW><id>15473756</id><snippet>xmlData = open('xml.txt').readlines()
xml = ''.join(xmlData)

def grab(xml):
        """ Recursively walks through the whole XML data until &lt;A1&gt; is not found"""

        # base case, if the parent tag (&lt;A1&gt;) isn't there, then return
    if xml.find('&lt;A1&gt;') == -1:
        return 
    else:
                # find the location of the parent tag
        open_parent = xml.find('&lt;A1&gt;')
        close_parent = open_parent + 4

        # find the first child tag
        open_child = xml.find('&lt;a&gt;&lt;b&gt;', close_parent)
        close_child = xml.find('&lt;/b&gt;&lt;/a&gt;', open_child)

                # grab the data within that tag
        child_data = xml[open_child + 6 : close_child]
        print(child_data)

                # recursively call the grab() function
        return grab(xml[close_child:])
</snippet></ROW><ROW><id>15473780</id><snippet>a_list = [User.objects.filter(id__in= Share.objects.filter(users_id = log_id, files__file_name=k).values_list('shared_user_id', flat=True)) for k in file1]
</snippet></ROW><ROW><id>15473874</id><snippet>-- File "./Hs.hs"

import Control.Concurrent                                                   
import System.IO

main = do
  -- Important
  hSetBuffering stdout NoBuffering

  -- Read a line
  line &lt;- getLine

  -- parse the line and add one and print it back
  putStrLn (show (read line + 1))

  -- Emphasize the importance of hSetBuffering :P
  threadDelay 10000000
</snippet></ROW><ROW><id>15473874</id><snippet># File "./pyrun.py"

import os                                                                   
here = os.path.dirname(os.path.abspath(__file__))

from twisted.internet import tksupport, reactor, protocol
from twisted.protocols.basic import LineReceiver

from Tkinter import Tk, Label, Entry, StringVar

# Protocol to handle the actual communication
class HsProtocol(protocol.ProcessProtocol):
    def __init__(self, text):
        self.text = text

    def connectionMade(self):
        # When haskell prog is opened
        towrite = self.text + '\n'

        # Write a line to the haskell side
        self.transport.write(towrite)

    def outReceived(self, data):
        # When haskell prog write something to the stdout
        # Change the label in the tk window to be the received data
        label_var.set(data[:-1])

def send_num_to_hs(_event):
    content = enternum.get()

    # The abspath of the haskell program
    prog = os.path.join(here, 'Hs')
    reactor.spawnProcess(HsProtocol(content), # communication protocol to use                                           
                         prog, # path
                         [prog] # args to the prog
                         )

# Setting up tk
root = Tk()

# On main window close, stop the tk reactor
root.protocol('WM_DELETE_WINDOW', reactor.stop)

# Since I'm going to change that label..
label_var = StringVar(root, 'Enter a number')

# Label whose content will be changed
label = Label(root, textvariable=label_var)
label.pack()

# Input box
enternum = Entry(root)
enternum.pack()
enternum.bind('&lt;Return&gt;', send_num_to_hs)

# Patch the twisted reactor
tksupport.install(root)

# Start tk's (and twisted's) mainloop
reactor.run()                                                                                                           
</snippet></ROW><ROW><id>15473884</id><snippet>sed -r 's/ ([^ ]+:)/\n\1/g' input
</snippet></ROW><ROW><id>15473884</id><snippet>kent$  echo "category:buffer overflow  analyzer:data flow analyzer:buffer" |sed -r 's/ ([^ ]+:)/\n\1/g'                                                                     
category:buffer overflow 
analyzer:data flow
analyzer:buffer
</snippet></ROW><ROW><id>15473884</id><snippet>System.out.println("category:buffer overflow  analyzer:data flow analyzer:buffer".replaceAll("\\s([^\\s]+:)", "\n$1"));
</snippet></ROW><ROW><id>15473884</id><snippet>In [1]: import re

In [2]: s = 'category:buffer overflow  analyzer:data flow analyzer:buffer'                                                                                                 

In [3]: print re.sub(r"\s(?=[^\s]*:)",'\n',s)
category:buffer overflow 
analyzer:data flow
analyzer:buffer
</snippet></ROW><ROW><id>15473897</id><snippet>zip(*myList)
</snippet></ROW><ROW><id>15473897</id><snippet>[list(i) for i in zip(*myList)]
</snippet></ROW><ROW><id>15473977</id><snippet>address = Address(**{
    "city": "CAMBRIDGE",
    "suffix": "",
    "street_name": "FRANKLIN ST",
    "prefix": "",
    "zipcode": "49503",
    "state": "MA",
    "street_num": "127"
})
Buildings(_id=ObjectId(), addresses=[address]).save()
</snippet></ROW><ROW><id>15473977</id><snippet>{
    "_id": ObjectId("5146e17969d90d0f124536ee"),
    "addresses": [{
        "_types": ["Address" ],
        "city": "CAMBRIDGE",
        "suffix": "",
        "street_name": "FRANKLIN ST",
        "state": "MA",
        "zipcode": "49503",
        "prefix": "",
        "_cls": "Address",
        "street_num": "127"
    }],
    "created_at" : ISODate("2013-03-18T12:42:17.389Z")
}
</snippet></ROW><ROW><id>15473977</id><snippet>class Address(db.EmbeddedDocument):
    city = db.StringField()
    suffix = db.StringField()
    street_name = db.StringField()
    zipcode = db.StringField()
    prefix = db.StringField()
    state = db.StringField()
    is_contracted = db.IntField()
    street_num = db.StringField()

    meta = {
        'allow_inheritance': False,
    }


class Buildings(db.Document):
    addresses = db.ListField(db.EmbeddedDocumentField(Address))
    created_at = db.DateTimeField(default=datetime.datetime.now)

    meta = {
        'allow_inheritance': False,
        'indexes': ['_id'],
        'ordering': ['-created_at'],
    }
</snippet></ROW><ROW><id>15473977</id><snippet>{
    "_id": ObjectId("5146e2b069d90d0f2cc3911a"),
    "addresses": [{
        "city": "CAMBRIDGE",
        "suffix": "",
        "street_name": "FRANKLIN ST",
        "state": "MA",
        "zipcode": "49503",
        "prefix": "",
        "street_num": "127"
    }],
    "created_at": ISODate("2013-03-18T12:47:28.939Z")
}
</snippet></ROW><ROW><id>15473977</id><snippet>"_id": { "$oid": "51376F833EF9EB361F354ED0"}</snippet></ROW><ROW><id>15473977</id><snippet>"created_at":{"$date": 1361160419000.000000}</snippet></ROW><ROW><id>15473977</id><snippet>required</snippet></ROW><ROW><id>15473977</id><snippet>False</snippet></ROW><ROW><id>15473977</id><snippet>EmbeddedDocumentField</snippet></ROW><ROW><id>15473977</id><snippet>ReferenceFiled</snippet></ROW><ROW><id>15473977</id><snippet>EmbeddedDocument</snippet></ROW><ROW><id>15473977</id><snippet>Document</snippet></ROW><ROW><id>15473977</id><snippet>'self'</snippet></ROW><ROW><id>15473977</id><snippet>ComplexDateTimeField</snippet></ROW><ROW><id>15473977</id><snippet>ComplexDateTimeField</snippet></ROW><ROW><id>15474144</id><snippet>OSError, select.error</snippet></ROW><ROW><id>15474144</id><snippet>import select
# ...

except (OSError, select.error) as why:
    # ...
</snippet></ROW><ROW><id>15474144</id><snippet>OSError</snippet></ROW><ROW><id>15474144</id><snippet>select.error</snippet></ROW><ROW><id>15474225</id><snippet>&gt;&gt;&gt; import tkinter
&gt;&gt;&gt; r=Tkinter.Tk()
&gt;&gt;&gt; b=Tkinter.Button(r,text='aaa')
&gt;&gt;&gt; b.pack()
&gt;&gt;&gt; b['text']='bbb'
</snippet></ROW><ROW><id>15474225</id><snippet>&gt;&gt;&gt; t=Tkinter.Text(r)
&gt;&gt;&gt; t.pack()
&gt;&gt;&gt; t.insert('1.0','aaa')
&gt;&gt;&gt; t.delete('1.0','end') # clear text widget
&gt;&gt;&gt; t.insert('1.0','bbb')
</snippet></ROW><ROW><id>15474280</id><snippet>  # logging  
  LOG = "/tmp/ccd.log"                                                     
  logging.basicConfig(filename=LOG, filemode="w", level=logging.DEBUG)  

  # console handler  
  console = logging.StreamHandler()  
  console.setLevel(logging.ERROR)  
  logging.getLogger("").addHandler(console)
</snippet></ROW><ROW><id>15474280</id><snippet>logger = logging.getLogger(__name__)
logger.debug("hiho debug message")
</snippet></ROW><ROW><id>15474280</id><snippet>logging.debug("next line")
</snippet></ROW><ROW><id>15474335</id><snippet>np.random.permutation</snippet></ROW><ROW><id>15474335</id><snippet>np.random.shuffle</snippet></ROW><ROW><id>15474335</id><snippet>np.random.shuffle</snippet></ROW><ROW><id>15474335</id><snippet>np.random.shuffle(np.arange(n))</snippet></ROW><ROW><id>15474335</id><snippet>3280        def permutation(self, object x):
...
3307            if isinstance(x, (int, np.integer)):
3308                arr = np.arange(x)
3309            else:
3310                arr = np.array(x)
3311            self.shuffle(arr)
3312            return arr
</snippet></ROW><ROW><id>15474490</id><snippet>kwargs</snippet></ROW><ROW><id>15474490</id><snippet>sys.stdout.write(kwargs.get('sep', ''))
</snippet></ROW><ROW><id>15474586</id><snippet>.close()</snippet></ROW><ROW><id>15474586</id><snippet>Run</snippet></ROW><ROW><id>15474586</id><snippet>handlers = self.log.handlers[:]
for handler in handlers:
    handler.close()
    self.log.removeHandler(handler)
</snippet></ROW><ROW><id>15474729</id><snippet>__file__</snippet></ROW><ROW><id>15474729</id><snippet>import os.path

scriptdir = os.path.dirname(os.path.abspath(__file__))
</snippet></ROW><ROW><id>15474729</id><snippet>os.path.join()</snippet></ROW><ROW><id>15474729</id><snippet>with open(os.path.join(scriptdir, './input1.txt')) as openfile:
</snippet></ROW><ROW><id>15474969</id><snippet>if</snippet></ROW><ROW><id>15474969</id><snippet>for</snippet></ROW><ROW><id>15474969</id><snippet>if-else</snippet></ROW><ROW><id>15474969</id><snippet>[y for y in a if y not in b]
</snippet></ROW><ROW><id>15474969</id><snippet>[y if y not in b else other_value for y in a]
</snippet></ROW><ROW><id>15474997</id><snippet>__call__</snippet></ROW><ROW><id>15474997</id><snippet>()</snippet></ROW><ROW><id>15475004</id><snippet>bin/activate</snippet></ROW><ROW><id>15475004</id><snippet>VIRTUAL_ENV='/Volumes/Macintosh HD/Python/my_project'</snippet></ROW><ROW><id>15475004</id><snippet>PATH="$VIRTUAL_ENV/bin:$PATH"</snippet></ROW><ROW><id>15475004</id><snippet>echo $PATH</snippet></ROW><ROW><id>15475004</id><snippet>bin/pip</snippet></ROW><ROW><id>15475004</id><snippet>bin/easy_install</snippet></ROW><ROW><id>15475004</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>15475067</id><snippet>all()</snippet></ROW><ROW><id>15475067</id><snippet>c=='false True answer?' for c in []</snippet></ROW><ROW><id>15475067</id><snippet>in []</snippet></ROW><ROW><id>15476083</id><snippet>tempfile.mkstemp</snippet></ROW><ROW><id>15476083</id><snippet>tempfile.mkstemp</snippet></ROW><ROW><id>15476083</id><snippet>fd</snippet></ROW><ROW><id>15476083</id><snippet>tempfile.mkstemp</snippet></ROW><ROW><id>15476350</id><snippet>img = Image.open('your_wonderful_image.png')
nonwhite_positions = [(x,y) for x in range(img.size[0]) for y in range(img.size[1]) if img.getdata()[x+y*img.size[0]] != (255,255,255)]
rect = (min([x for x,y in nonwhite_positions]), min([y for x,y in nonwhite_positions]), max([x for x,y in nonwhite_positions]), max([y for x,y in nonwhite_positions]))
img.crop(rect).save('out.png')
</snippet></ROW><ROW><id>15476392</id><snippet>stop</snippet></ROW><ROW><id>15476392</id><snippet>False</snippet></ROW><ROW><id>15476392</id><snippet>stop = False</snippet></ROW><ROW><id>15476392</id><snippet>run()</snippet></ROW><ROW><id>15476392</id><snippet>def run(self):
   stop = False
   # press s to trigger
   if msvcrt.kbhit():
       if msvcrt.getch() == 's':
           stop = True
           print "Login is closed closed.\n"
   while 1:
       if (stop == False):
           print "\nClient connection received!\n"
           self.channel.send("Status: Server connection received")
</snippet></ROW><ROW><id>15476392</id><snippet>stop</snippet></ROW><ROW><id>15476392</id><snippet>while</snippet></ROW><ROW><id>15476392</id><snippet>stop = True</snippet></ROW><ROW><id>15476535</id><snippet>from dateutil import rrule
from datetime import  timedelta , datetime
holidays = [] # This is just a list of dates to exclude

def datetime_in_x_trading_hours(start_dt,future_hours):
    # First we add two hours. This is because its simpler to view the timeset
    # as 24hrs MON - FRI. (This also helps align the dates for the holidays)
    print start_dt
    start_dt += timedelta(hours=2)
    rs = get_fx_rset(start_dt)
    # Now using the set get the desired time and put the the missing hours
    future_time = rs[future_hours]
    future_time -= timedelta(hours=2)
    return future_time

def get_fx_rset(start_date_time):

    # Create a rule to recur every weekday starting today
    r = rrule.rrule(rrule.HOURLY,
                    byweekday=[rrule.MO, rrule.TU, rrule.WE, rrule.TH, rrule.FR],
                    byhour=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],
                    byminute=[0],
                    bysecond=[0],
                    dtstart=start_date_time)

    # Create a rruleset
    rs = rrule.rruleset()
    # Attach our rrule to it
    rs.rrule(r)
    # Add holidays as exclusion days
    for exdate in holidays:
        rs.exdate(exdate)

    return rs

today = datetime.now() - timedelta(days=2)
print datetime_in_x_trading_hours(today, 7)
</snippet></ROW><ROW><id>15476827</id><snippet>uint8</snippet></ROW><ROW><id>15476827</id><snippet>cv2.calcHist([img1], [ch], temp.astype(np.uint8), [256], [0, 255])
</snippet></ROW><ROW><id>15476827</id><snippet>temp = (labels_map == label[labelx]).astype(np.uint8)
</snippet></ROW><ROW><id>15476837</id><snippet>p.overlay = extra_info.image</snippet></ROW><ROW><id>15476837</id><snippet>photos = gallery.photos
photo_list = []
for p in photos:
    new_photo = {}
    new_photo['url'] = p.url
    # [...] copy any other field you need
    try:
        extra_info = SomethingElse.objects.filter(photo=p)[0]
        new_photo['overlay'] = extra_info.image
    except:
        logger.debug('overlay not found')
        new_photo['overlay'] = None
   photo_list.append(new_photo)

return render_to_response('account/site.html',
                      {'photos': photo_list},
                      context_instance=RequestContext(request))
</snippet></ROW><ROW><id>15476837</id><snippet>class Photo(models.Model):
  [...]

  def overlay(self)
    try:
      extra_info = SomethingElse.objects.filter(photo=self)[0]
      return extra_info.image
    except:
      logger.debug('overlay not found')
      return None
</snippet></ROW><ROW><id>15476958</id><snippet>def entropy2(labels):
 """ Computes entropy of label distribution. """
    n_labels = len(labels)

    if n_labels &lt;= 1:
        return 0

    counts = np.bincount(labels)
    probs = counts / n_labels
    n_classes = np.count_nonzero(probs)

    if n_classes &lt;= 1:
        return 0

    ent = 0.

    # Compute standard entropy.
    for i in probs:
        ent -= i * log(i, base=n_classes)

    return ent
</snippet></ROW><ROW><id>15476992</id><snippet>submit()</snippet></ROW><ROW><id>15477213</id><snippet>&gt;&gt;&gt; j = '{"action": "print", "method": "onData", "data": "Madan Mohan"}'
&gt;&gt;&gt; import json
&gt;&gt;&gt; 
&gt;&gt;&gt; class Payload(object):
...     def __init__(self, j):
...         self.__dict__ = json.loads(j)
... 
&gt;&gt;&gt; p = Payload(j)
&gt;&gt;&gt; print p.action
print
&gt;&gt;&gt; print p.method
onData
&gt;&gt;&gt; print p.data
Madan Mohan
</snippet></ROW><ROW><id>15477329</id><snippet>Slider.valtext</snippet></ROW><ROW><id>15477329</id><snippet>sfreq = Slider(axfreq, 'Freq', 0.1, 30.0, valinit=f0)
sfreq.valtext.set_visible(False)
</snippet></ROW><ROW><id>15477340</id><snippet>arch</snippet></ROW><ROW><id>15477340</id><snippet>position</snippet></ROW><ROW><id>15477340</id><snippet>position</snippet></ROW><ROW><id>15477340</id><snippet>&lt;xpath&gt;</snippet></ROW><ROW><id>15477340</id><snippet>expr</snippet></ROW><ROW><id>15477340</id><snippet>xpath</snippet></ROW><ROW><id>15477340</id><snippet>page</snippet></ROW><ROW><id>15477340</id><snippet>position</snippet></ROW><ROW><id>15477340</id><snippet>notebook</snippet></ROW><ROW><id>15477340</id><snippet>xpath</snippet></ROW><ROW><id>15477340</id><snippet>       &lt;field name="arch" type="xml"&gt;
            &lt;notebook position="inside"&gt;
               &lt;!-- ... elements you want to add inside the parent notebook --&gt;
            &lt;/notebook&gt;
            &lt;xpath expr="/form/notebook/page/group/field[@name='ssnid']"
                   position="attributes"&gt;
                &lt;attribute name="invisible"&gt;True&lt;/attribute&gt;
            &lt;/xpath&gt;
            &lt;xpath expr="/form/notebook/page/group/field[@name='sinid']"
                   position="attributes"&gt;
                &lt;attribute name="invisible"&gt;True&lt;/attribute&gt;
            &lt;/xpath&gt;
        &lt;/field&gt;
</snippet></ROW><ROW><id>15477356</id><snippet>Project</snippet></ROW><ROW><id>15477356</id><snippet>related_name='projects'</snippet></ROW><ROW><id>15477356</id><snippet>project_set</snippet></ROW><ROW><id>15477356</id><snippet>projects</snippet></ROW><ROW><id>15477356</id><snippet>related_name='genres'</snippet></ROW><ROW><id>15477356</id><snippet>'project_set'</snippet></ROW><ROW><id>15477457</id><snippet>sum()</snippet></ROW><ROW><id>15477457</id><snippet>def while_equal(seq, other):
    for this, that in zip(seq, other):
        if this != that:
            return
        yield this

def match(seq, other):
    return sum(1 for _ in while_equal(seq, other))
</snippet></ROW><ROW><id>15477457</id><snippet>def while_equal(seq, other):
    for this, that in zip(seq, other):
        if this != that:
            return
        yield 1

def match(seq, other):
    return sum(while_equal(seq, other))
</snippet></ROW><ROW><id>15477457</id><snippet>a = [0, 1, 2, 3, 4]
b = [0, 1, 2, 3, 4, 0]

import timeit

print(timeit.timeit('match_loop(a,b)', 'from __main__ import a, b, match_loop'))
print(timeit.timeit('match(a,b)', 'from __main__ import match, a, b'))
</snippet></ROW><ROW><id>15477457</id><snippet>1.3171300539979711
1.291257290984504
</snippet></ROW><ROW><id>15477457</id><snippet>def match_loop(seq, other):
    count = 0
    for this, that in zip(seq, other):
        if this != that:
            return count
        count += 1
    return count
</snippet></ROW><ROW><id>15477457</id><snippet>0.8548871780512854</snippet></ROW><ROW><id>15477475</id><snippet>_blobinfo_uploaded_filename</snippet></ROW><ROW><id>15477475</id><snippet>filename = files.blobstore.create(mime_type='text/plain', _blobinfo_uploaded_filename='filename.txt')
</snippet></ROW><ROW><id>15477589</id><snippet>    sys.stdout.write("|%-73s| %3d%%" % ('#' * int(self._pct*.73), self._pct) + '\n')
</snippet></ROW><ROW><id>15477589</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>15477589</id><snippet>\r</snippet></ROW><ROW><id>15477589</id><snippet>        sys.stdout.write("\r|%-73s| %3d%%" % ('#' * int(self._pct*.73), self._pct))
</snippet></ROW><ROW><id>15477589</id><snippet>%3d%%</snippet></ROW><ROW><id>15477684</id><snippet>(?&lt;!with\s)accessory
</snippet></ROW><ROW><id>15477723</id><snippet>from mpl_toolkits.axes_grid1 import ImageGrid
import matplotlib.pyplot as plt

fig = plt.figure(figsize=(20, 12))
grid = ImageGrid(fig, 111, nrows_ncols=(3, 4), axes_pad=1, aspect=False)

#get the extent of the largest box containing all the axes/subplots
extents = np.array([a.get_position().extents for a in grid])  #all axes extents
bigextents = np.empty(4)   
bigextents[:2] = extents[:,:2].min(axis=0)
bigextents[2:] = extents[:,2:].max(axis=0)

#text to mimic the x and y label. The text is positioned in the middle 
labelpad=0.08  #distance between the external axis and the text
xlab_t = fig.text((bigextents[2]+bigextents[0])/2, bigextents[1]-labelpad, 'x label',
    horizontalalignment='center', verticalalignment = 'bottom')
ylab_t = fig.text( bigextents[0]-labelpad, (bigextents[3]+bigextents[1])/2, 'y label',
    rotation='vertical', horizontalalignment = 'left', verticalalignment = 'center')
</snippet></ROW><ROW><id>15477723</id><snippet>[xy]lab_t.set_visible(False)</snippet></ROW><ROW><id>15477723</id><snippet>text.remove()</snippet></ROW><ROW><id>15477723</id><snippet>plt.tight_layout</snippet></ROW><ROW><id>15477723</id><snippet>subplots</snippet></ROW><ROW><id>15477723</id><snippet>matplotlib.Figure</snippet></ROW><ROW><id>15477723</id><snippet>artists</snippet></ROW><ROW><id>15477723</id><snippet>bbox_inches='tight'</snippet></ROW><ROW><id>15477951</id><snippet>datetime</snippet></ROW><ROW><id>15477951</id><snippet>from sqlalchemy import or_

session.query(Employee).filter(
    or_(Employee.end_date == None, Employee.end_date &gt;= datetime.now())
).all()
</snippet></ROW><ROW><id>15477951</id><snippet>from sqlalchemy.sql.expression import bindparam, column
from sqlalchemy.types import DateTime
from sqlalchemy import or_

dtnow = bindparam('dtnow', datetime.now(), DateTime)
end_date = column('enddate', DateTime)

session.query(Employee).\
    filter(or_(end_date == None, end_date &gt;= dtnow)).all()
</snippet></ROW><ROW><id>15477951</id><snippet>&gt;&gt;&gt; str(or_(end_date == None, end_date &gt;= dtnow))
'enddate IS NULL OR enddate &gt;= :dtnow'
</snippet></ROW><ROW><id>15477951</id><snippet>datetime.now()</snippet></ROW><ROW><id>15477951</id><snippet>text()</snippet></ROW><ROW><id>15477951</id><snippet>from sqlalchemy.sql.expression import bindparam, text

dtnow = bindparam('dtnow', datetime.now(), DateTime)
session.query(Employee).\
    filter(text('end_date is NULL or end_date &gt;= :dtnow', bindparams=[dtnow])).all()
</snippet></ROW><ROW><id>15477951</id><snippet>conn = session.connection()
conn.execute(text('SELECT * FROM t_employee WHERE end_date IS NULL OR end_date&gt;=:dtnow'),
   dtnow=datetime.now())
</snippet></ROW><ROW><id>15478137</id><snippet>x</snippet></ROW><ROW><id>15478137</id><snippet>n</snippet></ROW><ROW><id>15478137</id><snippet>sy</snippet></ROW><ROW><id>15478137</id><snippet>sy2</snippet></ROW><ROW><id>15478137</id><snippet>y</snippet></ROW><ROW><id>15478137</id><snippet>x</snippet></ROW><ROW><id>15478137</id><snippet>y</snippet></ROW><ROW><id>15478137</id><snippet>&gt;&gt;&gt; n, _ = np.histogram(x, bins=xbins)
&gt;&gt;&gt; sy, _ = np.histogram(x, bins=xbins, weights=y)
&gt;&gt;&gt; sy2, _ = np.histogram(x, bins=xbins, weights=y*y)
</snippet></ROW><ROW><id>15478137</id><snippet>&gt;&gt;&gt; mean = sy / n
&gt;&gt;&gt; std = np.sqrt(sy2/n - mean*mean)
</snippet></ROW><ROW><id>15478182</id><snippet>"&lt;Key&gt;"</snippet></ROW><ROW><id>15478182</id><snippet>def handler(event):
    if event.char in ('e','s','r'):
       return #Don't want to handle this keypress
    #code to clear-screen, etc.

your_frame.bind('&lt;Key&gt;',handler)
</snippet></ROW><ROW><id>15478182</id><snippet>your_frame.bind_all('&lt;Key&gt;',handler)
</snippet></ROW><ROW><id>15478251</id><snippet>import wx

class MyForm(wx.Frame):

    #----------------------------------------------------------------------
    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, "Tutorial", size=(500,500))

        # Add a panel so it looks the correct on all platforms
        panel = wx.Panel(self, wx.ID_ANY)

        SAVE_FILE_ID = wx.NewId()
        self.Bind(wx.EVT_MENU, self.saveFile, id=SAVE_FILE_ID)

        LOAD_FILE_ID = wx.NewId()
        self.Bind(wx.EVT_MENU, self.loadFile, id=LOAD_FILE_ID)

        accel_tbl = wx.AcceleratorTable([(wx.ACCEL_CTRL,  ord('O'), LOAD_FILE_ID ),
                                         (wx.ACCEL_CTRL,  ord('S'), SAVE_FILE_ID )]
                                        )
        self.SetAcceleratorTable(accel_tbl)

    #----------------------------------------------------------------------
    def loadFile(self, event):
        openFileDialog = wx.FileDialog(self, "Open", "", "", 
                                       "Python files (*.py)|*.py", 
                                       wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)
        openFileDialog.ShowModal()
        openFileDialog.GetPath()
        openFileDialog.Destroy()

    #----------------------------------------------------------------------
    def saveFile(self, event):
        saveFileDialog = wx.FileDialog(self, "Save As", "", "", 
                                       "Python files (*.py)|*.py", 
                                       wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
        saveFileDialog.ShowModal()
        saveFileDialog.GetPath()
        saveFileDialog.Destroy()

# Run the program
if __name__ == "__main__":
    app = wx.App(False)
    frame = MyForm()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>15478300</id><snippet>def while_equal(seq, other):
    for this, that in zip(seq, other):
        if this != that:
            return
        yield this

def match(seq, other):
    return sum(1 for _ in while_equal(seq, other))
</snippet></ROW><ROW><id>15478300</id><snippet>def match_loop(seq, other):
    count = 0
    for this, that in zip(seq, other):
        if this != that:
            return count
        count += 1
    return count
</snippet></ROW><ROW><id>15478802</id><snippet>someFunction</snippet></ROW><ROW><id>15478802</id><snippet>someFunction</snippet></ROW><ROW><id>15478802</id><snippet>"Hello"</snippet></ROW><ROW><id>15478802</id><snippet>someFunction</snippet></ROW><ROW><id>15478802</id><snippet>self.canvas.bind('&lt;Button-1&gt;',lambda event: self.someFunction(event,"Hello"))
</snippet></ROW><ROW><id>15478802</id><snippet>lambda</snippet></ROW><ROW><id>15478802</id><snippet>self.someFunction</snippet></ROW><ROW><id>15478808</id><snippet>get</snippet></ROW><ROW><id>15478808</id><snippet>the_widget.get()</snippet></ROW><ROW><id>15478808</id><snippet>get</snippet></ROW><ROW><id>15478808</id><snippet>the_variable.get()</snippet></ROW><ROW><id>15478808</id><snippet>entryTheta</snippet></ROW><ROW><id>15478808</id><snippet>None</snippet></ROW><ROW><id>15478808</id><snippet>foo=bar().baz()</snippet></ROW><ROW><id>15478808</id><snippet>foo</snippet></ROW><ROW><id>15478808</id><snippet>baz()</snippet></ROW><ROW><id>15478808</id><snippet>entryTheta = Entry(textvariable=thetaVar).place(x=90, y=202)</snippet></ROW><ROW><id>15478808</id><snippet>entryTheta</snippet></ROW><ROW><id>15478808</id><snippet>place</snippet></ROW><ROW><id>15478808</id><snippet>None</snippet></ROW><ROW><id>15478808</id><snippet>place</snippet></ROW><ROW><id>15478808</id><snippet>place</snippet></ROW><ROW><id>15478808</id><snippet>pack</snippet></ROW><ROW><id>15478808</id><snippet>grid</snippet></ROW><ROW><id>15478940</id><snippet>def run():
    code_task = get_active_task()
    python_pane = code_task.python_pane
    python_pane.frontend.control.buffer_size = 1000
</snippet></ROW><ROW><id>15478940</id><snippet>buffer_size</snippet></ROW><ROW><id>15478940</id><snippet>Tools (Menu) &gt; Edit Macros ...</snippet></ROW><ROW><id>15478940</id><snippet>Tools &gt; Run Macro &gt; (your macro)</snippet></ROW><ROW><id>15479088</id><snippet>com = serial.Serial()
com.port = port
com.baudrate = baud
com.timeout = 1
com.setDTR(False)
com.open()
</snippet></ROW><ROW><id>15479088</id><snippet>..., line 315, in setDTR
ValueError: Attempting to use a port that is already open
</snippet></ROW><ROW><id>15479088</id><snippet>setDTR()</snippet></ROW><ROW><id>15479314</id><snippet>class MyForm(forms.Form):

#Here for example only one input field...

class Media:
    js = (
        'http://code.jquery.com/jquery-1.8.3.js',
        'http://code.jquery.com/ui/1.10.1/jquery-ui.js',
        'load_my_plugin_here.js" onload="$("#my_text_box").my_plugin_apply();',
        )
</snippet></ROW><ROW><id>15479434</id><snippet>FIXTURE_DIRS = (
    os.path.join(PROJECT_DIR, 'dhtmlScheduler\\fixtures\\'), 
    )
</snippet></ROW><ROW><id>15479434</id><snippet>FIXTURE_DIRS = (
    os.path.join(PROJECT_DIR, 'dhtmlScheduler', 'fixtures'), 
    )
</snippet></ROW><ROW><id>15479576</id><snippet>&gt;&gt;&gt; vars = sorted(expression.free_symbols)
&gt;&gt;&gt; evaluated = expression.subs(*zip(vars, your_values))
</snippet></ROW><ROW><id>15479602</id><snippet>class RedirectText:
    def __init__(self,aWxTextCtrl):
        self.out=aWxTextCtrl

    def write(self,string):
        self.out.WriteText(string)
</snippet></ROW><ROW><id>15479602</id><snippet>def pingIP(self, ip):
    proc = subprocess.Popen("ping %s" % ip, shell=True, 
                            stdout=subprocess.PIPE) 
    print
    while True:
        line = proc.stdout.readline()                        
        wx.Yield()
        if line.strip() == "":
            pass
        else:
            print line.strip()
        if not line: break
    proc.wait()
</snippet></ROW><ROW><id>15479731</id><snippet>f = urllib2.urlopen(url)
data = f.read()
path = "path/to/file.txt"
with open(path, "wb") as textFile:
    textFile.write(data)
</snippet></ROW><ROW><id>15479974</id><snippet>dict</snippet></ROW><ROW><id>15480047</id><snippet>raw_input</snippet></ROW><ROW><id>15480047</id><snippet>is not True</snippet></ROW><ROW><id>15480047</id><snippet>is not False</snippet></ROW><ROW><id>15480047</id><snippet>HEADER</snippet></ROW><ROW><id>15480047</id><snippet>if HEADER.lower() == 'true':
</snippet></ROW><ROW><id>15480047</id><snippet>tolower()</snippet></ROW><ROW><id>15480047</id><snippet>if HEADER.strip().lower() == 'true':
</snippet></ROW><ROW><id>15480047</id><snippet>false</snippet></ROW><ROW><id>15480047</id><snippet>is not True</snippet></ROW><ROW><id>15480047</id><snippet>is False</snippet></ROW><ROW><id>15480047</id><snippet>if somebool:
</snippet></ROW><ROW><id>15480047</id><snippet>if not somebool:
</snippet></ROW><ROW><id>15480110</id><snippet>n * m</snippet></ROW><ROW><id>15480110</id><snippet>n + m</snippet></ROW><ROW><id>15480110</id><snippet>def calc_slow(L1, L2):
    result = 0
    for n, m in itertools.product(L1, L2):
        result += np.dot(n, m)
    return result
</snippet></ROW><ROW><id>15480110</id><snippet>def calc_fast(L1, L2):
    L1_sums = np.zeros(len(L1[0]))
    L2_sums = np.zeros(len(L2[0]))
    for vec in L1:
        L1_sums += vec
    for vec in L2:
        L2_sums += vec
    return np.dot(L1_sums, L2_sums)
</snippet></ROW><ROW><id>15480110</id><snippet>def calc_superfast(L1, L2):
    return np.dot(np.array(L1).sum(0),
                  np.array(L2).sum(0))
</snippet></ROW><ROW><id>15480110</id><snippet>print X[0], Y[0], calc_slow(X[0], Y[0])
print X[0], Y[0], calc_fast(X[0], Y[0])
</snippet></ROW><ROW><id>15480110</id><snippet>[[1, 2, 3], [2, 4, 5], [2, 3, 4]] [[12, 14, 15], [12, 13, 14]] 711
[[1, 2, 3], [2, 4, 5], [2, 3, 4]] [[12, 14, 15], [12, 13, 14]] 711.0
</snippet></ROW><ROW><id>15480110</id><snippet>import random
import time
def rand_vector(size=3):
    return [random.randint(1, 100) for _ in xrange(3)]
def rand_list(length=200):
    return [rand_vector() for _ in xrange(length)]

print "Generating lists..."
L1 = rand_list(200)
L2 = rand_list(200)

print "Running slow..."
s = time.time()
print calc_slow(L1, L2)
print "Slow for (%d, %d) took %.2fs" % (len(L1), len(L2), time.time() - s)

print "Running fast..."
s = time.time()
print calc_fast(L1, L2)
print "Fast for (%d, %d) took %.2fs" % (len(L1), len(L2), time.time() - s)
</snippet></ROW><ROW><id>15480110</id><snippet>Generating lists...
Running slow...
75715569
Slow for (100, 100) took 1.48s
Running fast...
75715569.0
Fast for (100, 100) took 0.03s

Generating lists...
Running slow...
309169971
Slow for (200, 200) took 5.29s
Running fast...
309169971.0
Fast for (200, 200) took 0.04s

Running fast...
3.05185703539e+12
Fast for (20000, 20000) took 1.94s
</snippet></ROW><ROW><id>15480110</id><snippet>L1 = [a, b, c], [d, e, f], [g, h, i] 
L2 = [u, v, w], [x, y, z]
</snippet></ROW><ROW><id>15480110</id><snippet>a*u + b*v + c*w + a*x + b*y + c*z +
d*u + e*v + f*w + d*x + e*y + f*z +
g*u + h*v + i*w + g*x + h*y + i*z
</snippet></ROW><ROW><id>15480110</id><snippet>u</snippet></ROW><ROW><id>15480110</id><snippet>v</snippet></ROW><ROW><id>15480110</id><snippet>w</snippet></ROW><ROW><id>15480110</id><snippet>x</snippet></ROW><ROW><id>15480110</id><snippet>y</snippet></ROW><ROW><id>15480110</id><snippet>z</snippet></ROW><ROW><id>15480110</id><snippet>u*(a + d + g) + v*(b + e + h) + w*(c + f + i) +
x*(a + d + g) + y*(b + e + h) + z*(c + f + i)
</snippet></ROW><ROW><id>15480110</id><snippet>(u + x)*(a + d + g) + (v + y)*(b + e + h) + (w + z)*(c + f + i)
</snippet></ROW><ROW><id>15480119</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>15480119</id><snippet>write()</snippet></ROW><ROW><id>15480255</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal(0.35)
Decimal('0.34999999999999997779553950749686919152736663818359375')
</snippet></ROW><ROW><id>15480610</id><snippet>def group(lst, n):
    for i in range(0, len(lst), n):
        val = lst[i:i+n]
        if len(val) == n:
            yield tuple(val)

a = 'Moscow|city|London|city|Royston Vasey|vilage'
list(group(a.split('|'), 2))
</snippet></ROW><ROW><id>15480610</id><snippet>[('Moscow', 'city'), ('London', 'city'), ('Royston Vasey', 'vilage')]</snippet></ROW><ROW><id>15480951</id><snippet>class MyDoc(Document):
    structure = {
        "name": unicode,
        "items": [{
             "category": int,
             "desc": unicode
        }]
    }

    def validate(self, *args, **kwargs):
        super(MyDoc, self).validate(*args, **kwars)
        for item in self["items"]:
            assert item["desc"], "desc is required: %s" % item
</snippet></ROW><ROW><id>15480983</id><snippet>redirect</snippet></ROW><ROW><id>15480983</id><snippet>Flask</snippet></ROW><ROW><id>15480983</id><snippet>redirect</snippet></ROW><ROW><id>15480983</id><snippet>flask.redirect(flask.url_for('operation'), code=307)
</snippet></ROW><ROW><id>15481017</id><snippet>assertRaises</snippet></ROW><ROW><id>15481058</id><snippet>            ps aux | grep openerp 
</snippet></ROW><ROW><id>15481058</id><snippet>             sudo kill -9 pid 
</snippet></ROW><ROW><id>15481058</id><snippet>                 sudo kill -9 1234
</snippet></ROW><ROW><id>15481058</id><snippet>            sudo rm /var/run/openerp-server.pid
</snippet></ROW><ROW><id>15481058</id><snippet>            sudo /etc/init.d/openerp-server restart
</snippet></ROW><ROW><id>15481428</id><snippet>python setup.py install</snippet></ROW><ROW><id>15481753</id><snippet>onecmd</snippet></ROW><ROW><id>15481753</id><snippet>self</snippet></ROW><ROW><id>15481753</id><snippet>@static_var("last", None)
def onecmd(self, line):
    onecmd = type(self).onecmd.im_func  # im_func is the wrapped function
    if line == "lastcmd":
        line = onecmd.last
    else:
        onecmd.last = line
</snippet></ROW><ROW><id>15481753</id><snippet>class Foo(object):
    last = None

    def onecmd(self, line):
        if line == "lastcmd":
            line = type(self).last
        else:
            type(onecmd).last = line
</snippet></ROW><ROW><id>15481753</id><snippet>class Foo(object):
    last = None

    @classmethod
    def onecmd(cls, line):
        if line == "lastcmd":
            line = cls.last
        else:
            cls.last = line
</snippet></ROW><ROW><id>15481761</id><snippet>numpy.genfromtxt</snippet></ROW><ROW><id>15481761</id><snippet>import numpy as np
np.genfromtxt('filename', dtype= None)
# array([(1, 2.0, 'buckle_my_shoe'), (3, 4.0, 'margery_door')], 
#       dtype=[('f0', '&lt;i4'), ('f1', '&lt;f8'), ('f2', '|S14')])
</snippet></ROW><ROW><id>15481861</id><snippet>static</snippet></ROW><ROW><id>15481861</id><snippet>from flask import url_for
url_for('static', filename='service_status.json')
</snippet></ROW><ROW><id>15481861</id><snippet>'/static/service_status.json'</snippet></ROW><ROW><id>15481877</id><snippet>if "&lt;spanlevel level='7'&gt;" in line.lower():
</snippet></ROW><ROW><id>15481877</id><snippet>line</snippet></ROW><ROW><id>15481877</id><snippet>re.search()</snippet></ROW><ROW><id>15481877</id><snippet>re.compile()</snippet></ROW><ROW><id>15481877</id><snippet>functools.lru_cache</snippet></ROW><ROW><id>15481877</id><snippet>in</snippet></ROW><ROW><id>15481906</id><snippet>Authorization</snippet></ROW><ROW><id>15481906</id><snippet>class CustomAuthorization(Authorization):
    def read_list(self, object_list, bundle):
        clinician_group = Group.objects.get(name='clinician')
        if bundle.request and hasattr(bundle.request, 'user'):
            if clinician_group in bundle.request.user.groups.all():
                patients = ExtendedUser.objects.filter(clinician_id=bundle.request.user.id)
                object_list = object_list.filter(author__id__in=patients)
            else:
                object_list = object_list.filter(author=bundle.request.user)
            return object_list
        else:
            return object_list.none()
</snippet></ROW><ROW><id>15481992</id><snippet>dict.setdefault()</snippet></ROW><ROW><id>15481992</id><snippet>for line in fd:
    new_line = line.split(' ')
    for word in new_line:
        new_word = ''.join(l for l in word if l.isalpha())
        new_word = new_word.lower()
        for ind_count, let in enumerate(new_word):
            c_dict.setdefault((let, ind_count), set()).add(new_word)
</snippet></ROW><ROW><id>15481992</id><snippet>enumerate()</snippet></ROW><ROW><id>15481992</id><snippet>ind_index</snippet></ROW><ROW><id>15481992</id><snippet>c_dict.setdefault((let, ind_count), set()).add(new_word)</snippet></ROW><ROW><id>15481992</id><snippet>if (let, ind_count) in c_dict:
    c_dict[let, ind_count].add(new_word)
else:
    c_dict[let, ind_count] = set([new_word])
</snippet></ROW><ROW><id>15482051</id><snippet>FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'
logging.basicConfig(format=FORMAT)
d = {'clientip': '192.168.0.1', 'user': 'fbloggs'}
logger = logging.getLogger('tcpserver')
logger.warning('Protocol problem: %s', 'connection reset', extra=d)
</snippet></ROW><ROW><id>15482051</id><snippet>2006-02-08 22:20:02,165 192.168.0.1 fbloggs  Protocol problem: connection reset
</snippet></ROW><ROW><id>15482053</id><snippet>import matplotlib.pyplot as plt
fig1 = plt.figure()
fig1.set_size_inches(5.5,4)
fig1.set_dpi(300)
ax = fig1.add_subplot(111)
ax.grid(True,which='both')
ax.hist(driveDistance,100)
xlabel = ax.set_xlabel('Driven Distance in km')
ax.set_ylabel('Frequency')
fig1.savefig('figure1_distance.png', bbox_extra_artists=[xlabel], bbox_inches='tight')
</snippet></ROW><ROW><id>15482078</id><snippet>fs = 44100; % sampling frequency

% synthesize a cosine waveform with frequency f1 and starting additional phase p1
p1 = 0;
dur1 = 1;
t1 = 0:1/fs:dur1; 

x1(1:length(t1)) = 0.5*cos(2*pi*f1*t1 + p1);

% Compute the phase at the end of the waveform
p2 = mod(2*pi*f1*dur1 + p1,2*pi);

dur2 = 1;
t2 = 0:1/fs:dur2; 
x2(1:length(t2)) = 0.5*cos(2*pi*f2*t2 + p2); % use p2 so that the phase is continuous!

x3 = [x1 x2]; % this should give you a waveform without any discontinuities
</snippet></ROW><ROW><id>15482206</id><snippet>import numpy as np

def fisher_criterion(v1, v2):
    return abs(np.mean(v1) - np.mean(v2)) / (np.var(v1) + np.var(v2))
</snippet></ROW><ROW><id>15482206</id><snippet>&gt;&gt;&gt; fisher_criterion([0, 1, 2], [0, 1])
0.54545454545454553
</snippet></ROW><ROW><id>15482299</id><snippet>__name__</snippet></ROW><ROW><id>15482299</id><snippet>__name__</snippet></ROW><ROW><id>15482299</id><snippet>__all__</snippet></ROW><ROW><id>15482329</id><snippet>teachers = list(School.getTeachers())
teacher1 = teachers[0]
teacher2 = teachers[1]

diff = set(teacher1.getChildrens()) - set(teacher2.getChildrens())
print "%s are not under %s" % (", ".join(c.getName() for c in diff), teacher2.getName())
</snippet></ROW><ROW><id>15482329</id><snippet>&gt;&gt;&gt; class Student(object):
...     def __init__(self, name):
...         self.name = name
...     def getName(self):
...         return self.name    
... 
&gt;&gt;&gt; class Teacher(object):
...     def __init__(self, name, students):
...         self.name = name
...         self.students = students
...     def getChildrens(self):
...         return self.students
...     def getName(self):
...         return self.name
... 
&gt;&gt;&gt; class School(object):
...     def __init__(self, teachers):
...         self.teachers = teachers
...     def getTeachers(self):
...         return self.teachers
... 
&gt;&gt;&gt; students = [Student("A"), Student("B"), Student("C"), Student("D"), Student("E"), Student("F"), ]
&gt;&gt;&gt; s = Teacher("Smith", students)
&gt;&gt;&gt; p = Teacher("Paul", students[3:])
&gt;&gt;&gt; school = School([s, p])
&gt;&gt;&gt; 
&gt;&gt;&gt; teachers = list(school.getTeachers())
&gt;&gt;&gt; teacher1 = teachers[0]
&gt;&gt;&gt; teacher2 = teachers[1]
&gt;&gt;&gt; 
&gt;&gt;&gt; diff = set(teacher1.getChildrens()) - set(teacher2.getChildrens())
&gt;&gt;&gt; print "%s are not under %s" % (", ".join(c.getName() for c in diff), teacher2.getName())
B, C, A are not under Paul
</snippet></ROW><ROW><id>15482555</id><snippet>class Bridge(object):
    def __init__(self, module):
        self.__dict__['module'] = module
    def __getattr__(self, attr):
        return getattr(self.module, attr)
    def __setattr__(self, attr, val):
        raise TypeError('{a!r} can not be set'.format(a=attr))

import sys
import socket
socket = sys.modules['socket'] = Bridge(socket)
</snippet></ROW><ROW><id>15482555</id><snippet>socket</snippet></ROW><ROW><id>15482555</id><snippet>print(socket.error)
setattr(socket, 'error', 'blah')
</snippet></ROW><ROW><id>15482555</id><snippet>% test.py
&lt;class 'socket.error'&gt;
Traceback (most recent call last):
  File "/home/unutbu/pybin/test.py", line 15, in &lt;module&gt;
    setattr(socket, 'error', 'blah')
  File "/home/unutbu/pybin/test.py", line 10, in __setattr__
    raise TypeError('{a!r} can not be set'.format(a=attr))
TypeError: 'error' can not be set
</snippet></ROW><ROW><id>15482770</id><snippet>format()</snippet></ROW><ROW><id>15482770</id><snippet>''.join(format(my_int, '02x') for my_int in my_list)
</snippet></ROW><ROW><id>15482817</id><snippet>start_date = end_date - datetime.timedelta(days=14)
</snippet></ROW><ROW><id>15483096</id><snippet>import imp
import sys


def loadm(name, path):
    fp, pathname, description = imp.find_module(name,[path])
    try:
        _module = imp.load_module(name, fp, pathname, description)
        return _module
    finally:
        # Since we may exit via an exception, close fp explicitly.
        if fp:
            fp.close()


numpy = loadm("numpy", "/home/username/py-virtual27/lib/python2.7/site-packages/")
scipy = loadm("scipy", "/home/username/py-virtual27/lib/python2.7/site-packages/")
</snippet></ROW><ROW><id>15483164</id><snippet>In [163]: re.split(r'\s*([&amp;|^])\s*', 'name1|name2', maxsplit=1)
Out[163]: ['name1', '|', 'name2']
</snippet></ROW><ROW><id>15483164</id><snippet>maxsplit=1</snippet></ROW><ROW><id>15483164</id><snippet>re.split</snippet></ROW><ROW><id>15483164</id><snippet>In [164]: re.split(r'\s*([&amp;|^])\s*', 'name1|nam^e2', maxsplit=1)
Out[164]: ['name1', '|', 'nam^e2']
</snippet></ROW><ROW><id>15483164</id><snippet>In [184]: re.search(r'\s*(.*?)\s*([&amp;|^])\s*(.*?)\s*', 'name1 | nam^e2').groups()
Out[184]: ('name1', '|', 'nam^e2')
</snippet></ROW><ROW><id>15483164</id><snippet>(.*?)</snippet></ROW><ROW><id>15483164</id><snippet>([&amp;|^])</snippet></ROW><ROW><id>15483164</id><snippet>&amp;</snippet></ROW><ROW><id>15483164</id><snippet>|</snippet></ROW><ROW><id>15483164</id><snippet>^</snippet></ROW><ROW><id>15483271</id><snippet>FooClass.method = my_method
foo_instance.method = my_method
</snippet></ROW><ROW><id>15483271</id><snippet>str</snippet></ROW><ROW><id>15483271</id><snippet>class MyStringType(str):
    def trim(self):
        # your implementation here
</snippet></ROW><ROW><id>15483271</id><snippet>__init__</snippet></ROW><ROW><id>15483271</id><snippet>__new__</snippet></ROW><ROW><id>15483271</id><snippet>str</snippet></ROW><ROW><id>15483271</id><snippet>MyStringType</snippet></ROW><ROW><id>15483271</id><snippet>class MyStringType(object):
    def __init__(self, *args, **kwargs):
        self.s = str(*args, **kwargs)
    def trim(self):
        # your implementation here
</snippet></ROW><ROW><id>15483271</id><snippet>str</snippet></ROW><ROW><id>15483271</id><snippet>__getattr__</snippet></ROW><ROW><id>15483271</id><snippet>__init__</snippet></ROW><ROW><id>15483271</id><snippet>trim</snippet></ROW><ROW><id>15483271</id><snippet>str</snippet></ROW><ROW><id>15483271</id><snippet>trim</snippet></ROW><ROW><id>15483271</id><snippet>trim</snippet></ROW><ROW><id>15483271</id><snippet>r.replace</snippet></ROW><ROW><id>15483271</id><snippet>r</snippet></ROW><ROW><id>15483271</id><snippet>unicode</snippet></ROW><ROW><id>15483271</id><snippet>bytes</snippet></ROW><ROW><id>15483271</id><snippet>str</snippet></ROW><ROW><id>15483271</id><snippet>NSString</snippet></ROW><ROW><id>15483271</id><snippet>BSTR</snippet></ROW><ROW><id>15483271</id><snippet>find</snippet></ROW><ROW><id>15483271</id><snippet>mmap</snippet></ROW><ROW><id>15483271</id><snippet>str</snippet></ROW><ROW><id>15483283</id><snippet>b</snippet></ROW><ROW><id>15483283</id><snippet>b[:,None,:]</snippet></ROW><ROW><id>15483283</id><snippet>b[:, np.newaxis, :]</snippet></ROW><ROW><id>15483283</id><snippet>In [178]: b = np.array([[1, 2], [2, 3], [3, 4]])

In [179]: b
Out[179]: 
array([[1, 2],
       [2, 3],
       [3, 4]])

In [202]: b[:,None,:]
Out[202]: 
array([[[1, 2]],

       [[2, 3]],

       [[3, 4]]])
</snippet></ROW><ROW><id>15483283</id><snippet>In [222]: b = np.array([[[1, 2], [2, 3]], [[3, 4], [5,6]]])

In [223]: b.swapaxes(0,1)
Out[223]: 
array([[[1, 2],
        [3, 4]],

       [[2, 3],
        [5, 6]]])
</snippet></ROW><ROW><id>15483283</id><snippet>b.T</snippet></ROW><ROW><id>15483283</id><snippet>b.swapaxes(0,-1)</snippet></ROW><ROW><id>15483283</id><snippet>In [226]: b.T
Out[226]: 
array([[[1, 3],
        [2, 5]],

       [[2, 4],
        [3, 6]]])

In [227]: b.swapaxes(0,-1)
Out[227]: 
array([[[1, 3],
        [2, 5]],

       [[2, 4],
        [3, 6]]])
</snippet></ROW><ROW><id>15483283</id><snippet>None</snippet></ROW><ROW><id>15483344</id><snippet>.append()</snippet></ROW><ROW><id>15483344</id><snippet>for gram in range(nGram):
   lst.append(getCollection(gram))
</snippet></ROW><ROW><id>15483344</id><snippet>lst = [getCollection(gram) for gram in range(nGram)]
</snippet></ROW><ROW><id>15483617</id><snippet>\s</snippet></ROW><ROW><id>15483617</id><snippet>[ ]</snippet></ROW><ROW><id>15483617</id><snippet>(\d+)</snippet></ROW><ROW><id>15483617</id><snippet>{3}</snippet></ROW><ROW><id>15483617</id><snippet>92</snippet></ROW><ROW><id>15483617</id><snippet>this is bananas</snippet></ROW><ROW><id>15483617</id><snippet>linepattern =  r'[ ]* (\d+) [ ]+ ([^\n]+)\n'

pattern_for_continue = re.compile(r"""
    Breakpoint [ ]+ (\d+) [ ]+ reached [ ]+ ([^\n]*?)\n
    {}
""".format(linepattern * 3), re.MULTILINE|re.VERBOSE)
</snippet></ROW><ROW><id>15483617</id><snippet>&gt;&gt;&gt; pattern_for_continue.match(sample_string).groups()
('12', '', '90', 'hey this is a great line', '91', 'this is cool too', '92', 'this is bananas')
</snippet></ROW><ROW><id>15483617</id><snippet>[ ]*</snippet></ROW><ROW><id>15483617</id><snippet>linepattern</snippet></ROW><ROW><id>15483621</id><snippet>Alist = create_matrix(file) 
start_node(Alist) 
check_neighbours(node, Alist)
</snippet></ROW><ROW><id>15483621</id><snippet>start_node(Alist)</snippet></ROW><ROW><id>15483621</id><snippet>node</snippet></ROW><ROW><id>15483621</id><snippet>node</snippet></ROW><ROW><id>15483621</id><snippet>node = start_node(Alist) 
</snippet></ROW><ROW><id>15483621</id><snippet>Alist = []</snippet></ROW><ROW><id>15483621</id><snippet>node = 0</snippet></ROW><ROW><id>15483621</id><snippet>file</snippet></ROW><ROW><id>15483621</id><snippet>def main():
    file = ("F:/media/KINGSTON/Networking/network.txt")
    Alist = create_matrix(file)
    node = start_node(Alist)
    check_neighbours(node, Alist)
main()
</snippet></ROW><ROW><id>15483797</id><snippet>current = page1
def move(dirn):
    global current
</snippet></ROW><ROW><id>15483797</id><snippet>current</snippet></ROW><ROW><id>15483797</id><snippet>wizintro</snippet></ROW><ROW><id>15483797</id><snippet>idx = pages.index(current) + dirn
</snippet></ROW><ROW><id>15483797</id><snippet>current</snippet></ROW><ROW><id>15483797</id><snippet>global</snippet></ROW><ROW><id>15483797</id><snippet>global current</snippet></ROW><ROW><id>15483797</id><snippet>move</snippet></ROW><ROW><id>15483797</id><snippet>current</snippet></ROW><ROW><id>15483797</id><snippet>nonlocal current</snippet></ROW><ROW><id>15483797</id><snippet>current</snippet></ROW><ROW><id>15483797</id><snippet>list</snippet></ROW><ROW><id>15483797</id><snippet>current=[page1]</snippet></ROW><ROW><id>15483797</id><snippet>current=current</snippet></ROW><ROW><id>15483797</id><snippet>move</snippet></ROW><ROW><id>15483797</id><snippet>move</snippet></ROW><ROW><id>15483797</id><snippet>current</snippet></ROW><ROW><id>15483797</id><snippet>current[0]</snippet></ROW><ROW><id>15483797</id><snippet>current</snippet></ROW><ROW><id>15483797</id><snippet>wizintro</snippet></ROW><ROW><id>15483797</id><snippet>move</snippet></ROW><ROW><id>15483797</id><snippet>current</snippet></ROW><ROW><id>15483894</id><snippet>expect_errors=True</snippet></ROW><ROW><id>15483894</id><snippet>self.assertEqual('400 Bad Request', response.status)
</snippet></ROW><ROW><id>15483977</id><snippet>def main(progname=sys.argv[0]):
</snippet></ROW><ROW><id>15484172</id><snippet>__slots__</snippet></ROW><ROW><id>15484172</id><snippet>setattr()</snippet></ROW><ROW><id>15484172</id><snippet>from inspect import getargspec
def save_args(values):
    for i in getargspec(values['self'].__init__).args[1:]:
        setattr(values['self'], i, values[i])
</snippet></ROW><ROW><id>15484172</id><snippet>__init__</snippet></ROW><ROW><id>15484222</id><snippet>existingEpisodeIDs = [row[0] for row in c.fetchall()] #this will end up just being a list of id's
id = 22528819
existingEpisodeIDs.remove(id)
</snippet></ROW><ROW><id>15484600</id><snippet>filename = "whatever.txt"
filename_without_extension = filename[:-4]
</snippet></ROW><ROW><id>15484600</id><snippet>os.path.splitext</snippet></ROW><ROW><id>15484600</id><snippet>path.splitext(filename)
</snippet></ROW><ROW><id>15484600</id><snippet>('whatever', '.txt')</snippet></ROW><ROW><id>15484703</id><snippet>...
for line in source:
    destination.write(line.strip() + ",a\n"))
</snippet></ROW><ROW><id>15484703</id><snippet>for line in source.readlines()
    destination.write(line + ",a\n"))
</snippet></ROW><ROW><id>15485111</id><snippet>[v for i, v in enumerate(a) if b[i]]
</snippet></ROW><ROW><id>15485111</id><snippet>[x for x, y in zip(a, b) if y]
</snippet></ROW><ROW><id>15485198</id><snippet>np.random.uniform</snippet></ROW><ROW><id>15485198</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.random.uniform(-1, 1, size=5)
array([-0.32235009, -0.8347222 , -0.83968268,  0.78546736,  0.399747  ])
</snippet></ROW><ROW><id>15485550</id><snippet>cv2.boxFilter(imgcv1, 0, (7,7), imgcv1, (-1,-1), False, cv2.BORDER_DEFAULT)
</snippet></ROW><ROW><id>15485565</id><snippet>pipes.quote</snippet></ROW><ROW><id>15485565</id><snippet>re.escape</snippet></ROW><ROW><id>15485565</id><snippet>pipes.quote</snippet></ROW><ROW><id>15485565</id><snippet>echo $(hostname)</snippet></ROW><ROW><id>15485565</id><snippet>ssh</snippet></ROW><ROW><id>15485565</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>15485565</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.call([ 'ssh', 'localhost', 'echo $(hostname)'])
myhost.example.com
0
</snippet></ROW><ROW><id>15485565</id><snippet>&gt;&gt;&gt; subprocess.call([ 'ssh', 'localhost', 'echo "one   two"; echo three'])
one   two
three
0
</snippet></ROW><ROW><id>15485611</id><snippet>class Bob(object):

    def bob(self,var1='bob',var2=' is in the class'):
        print var1,var2


def defalter(func):
    func.im_func.func_defaults = ('nate',) + func.im_func.func_defaults[1:]
    return func


b = Bob()

r = defalter(b.bob) 
r()
</snippet></ROW><ROW><id>15485611</id><snippet>Bob</snippet></ROW><ROW><id>15485611</id><snippet>b</snippet></ROW><ROW><id>15485611</id><snippet>Bob</snippet></ROW><ROW><id>15485611</id><snippet>def defalter(func):
    def new_func(var1='nate',**kwargs):
        return func(var1=var1,**kwargs)

    return new_func
</snippet></ROW><ROW><id>15485678</id><snippet>multiprocessing</snippet></ROW><ROW><id>15485896</id><snippet>col2</snippet></ROW><ROW><id>15485896</id><snippet>.median()</snippet></ROW><ROW><id>15485896</id><snippet>&gt;&gt;&gt; df
   ind  col1     col2
0    1    12  string1
1    2    23  string2
2    3    34  string1
3    4    13  string2
4    5    17  string3
&gt;&gt;&gt; df.groupby("col2")
&lt;pandas.core.groupby.DataFrameGroupBy object at 0x9f41b8c&gt;
&gt;&gt;&gt; df.groupby("col2").median()
         ind  col1
col2              
string1    2    23
string2    3    18
string3    5    17
&gt;&gt;&gt; df.groupby("col2").median().reset_index()
      col2  ind  col1
0  string1    2    23
1  string2    3    18
2  string3    5    17
</snippet></ROW><ROW><id>15485896</id><snippet>ind</snippet></ROW><ROW><id>15485896</id><snippet>.mean()</snippet></ROW><ROW><id>15485896</id><snippet>.min()</snippet></ROW><ROW><id>15485896</id><snippet>.max()</snippet></ROW><ROW><id>15485932</id><snippet>easy_install</snippet></ROW><ROW><id>15485932</id><snippet>easy_install [exeinstaller1] [exeinstaller2] ...</snippet></ROW><ROW><id>15485991</id><snippet>r"\d"</snippet></ROW><ROW><id>15485991</id><snippet>r"\d+"</snippet></ROW><ROW><id>15485991</id><snippet>cleanText = re.sub('%d.' % number, line).strip()
</snippet></ROW><ROW><id>15485991</id><snippet>str(number) + '.'</snippet></ROW><ROW><id>15485991</id><snippet>range(1, 10)</snippet></ROW><ROW><id>15485991</id><snippet>number</snippet></ROW><ROW><id>15485991</id><snippet>range(1, 11)</snippet></ROW><ROW><id>15485991</id><snippet>.</snippet></ROW><ROW><id>15485991</id><snippet>\.</snippet></ROW><ROW><id>15485991</id><snippet>cleanText = line.strip()
for i in xrange(1, 11):
    cleanText = re.sub(r'%d\.', '' , cleanText)
</snippet></ROW><ROW><id>15486148</id><snippet>class Base(object):
    def __init__(self, a=None):
        if a is None:
            print "Base created without args."
        else:
            print "Base created with %s" % a

a = Base()    # prints "Base created without args."
b = Base(123) # prints "Base created with 123."
</snippet></ROW><ROW><id>15486275</id><snippet>--manifest</snippet></ROW><ROW><id>15486380</id><snippet>serve_forever()</snippet></ROW><ROW><id>15486380</id><snippet>SocketServer</snippet></ROW><ROW><id>15486380</id><snippet>serve_forever()</snippet></ROW><ROW><id>15486380</id><snippet>class MyThreads(threading.Thread):
    def __init__(self):
        self.server = None;
        threading.Thread.__init__(self);
    def run(self):
        if self.server == None:
            address = ('localhost', 40000);
            self.server = SocketServer.TCPServer(address, EchoRequestHandler);

        self.server.serve_forever()
</snippet></ROW><ROW><id>15486380</id><snippet>time.sleep(...)</snippet></ROW><ROW><id>15486459</id><snippet>class UserEventsFilter(QtCore.QObject):
    """
    Reference: http://stackoverflow.com/a/2017400/1011276
    """
    def __init__(self, parent=None):
        super().__init__(parent)

        self.filterEnabled = False

    @QtCore.Slot()
    def enableFilter(self):
        self.filterEnabled = True

    @QtCore.Slot()
    def disableFilter(self):
        self.filterEnabled = False

    def eventFilter(self, obj, event):
        if self.filterEnabled:
            t = event.type()
            if (t == QtCore.QEvent.KeyPress or
                t == QtCore.QEvent.KeyRelease or 
                t == QtCore.QEvent.MouseButtonPress or
                t == QtCore.QEvent.MouseButtonDblClick or
                t == QtCore.QEvent.MouseMove or
                t == QtCore.QEvent.Enter or
                t == QtCore.QEvent.HoverEnter or
                t == QtCore.QEvent.HoverLeave or
                t == QtCore.QEvent.HoverMove or
                t == QtCore.QEvent.DragEnter or
                t == QtCore.QEvent.DragLeave or
                t == QtCore.QEvent.DragMove or
                t == QtCore.QEvent.Drop):
                return True
        return QtCore.QObject.eventFilter(self, obj, event)
</snippet></ROW><ROW><id>15486459</id><snippet>__init__</snippet></ROW><ROW><id>15486459</id><snippet>self.userEventFilter = UserEventsFilter(self)
app = QtCore.QCoreApplication.instance()
app.installEventFilter(self.userEventFilter)
</snippet></ROW><ROW><id>15486459</id><snippet>def startUSBProgress(self, message, operation):
    title = self.tr("Transferring USB Data")
    progress = QtGui.QProgressDialog(message, "", 0, 1, self)

    progress.setWindowModality(QtCore.Qt.WindowModal)
    progress.setCancelButton(None)
    progress.setMinimumDuration(500)  # half second
    progress.setWindowTitle(title)

    operation.completed.connect(progress.reset)
    operation.completed.connect(progress.deleteLater)
    operation.completed.connect(self.userEventFilter.disableFilter)
    operation.error.connect(progress.reset)
    operation.error.connect(progress.deleteLater)
    operation.error.connect(self.userEventFilter.disableFilter)

    self.userEventFilter.enableFilter()
    progress.setValue(0)
</snippet></ROW><ROW><id>15486461</id><snippet>wx.NO_BORDER</snippet></ROW><ROW><id>15486461</id><snippet>wx.CAPTION</snippet></ROW><ROW><id>15486580</id><snippet>self.table.tag_configure('active', foreground='black')
</snippet></ROW><ROW><id>15486818</id><snippet>def ___init___(self, value):
    self.value = value
    self.left is None
    self.right is None
    self.parent is None

def ___init___(self, value, left, right, parent):
    """set the parameters to corresponding class members"""
    self.value = value
    self.left = left
    self.right = right
    self.parent = parent
</snippet></ROW><ROW><id>15486818</id><snippet>def __init__(self, value, left=None, right=None, parent=None):
    """set the parameters to corresponding class members"""
    self.value = value
    self.left = left
    self.right = right
    self.parent = parent
</snippet></ROW><ROW><id>15487356</id><snippet>fn:</snippet></ROW><ROW><id>15487356</id><snippet>root.xpath('./svg:g/svg:g/svg:g[starts-with(@id,"route_1")]', namespaces=nsmap)
</snippet></ROW><ROW><id>15487356</id><snippet>import lxml.etree as etree
import lxml.builder as builder

nsmap = {
    'svg': 'http://www.w3.org/2000/svg',
    'xlink': 'http://www.w3.org/1999/xlink',
}

E = builder.ElementMaker(
    namespace='http://www.w3.org/2000/svg',
    nsmap=nsmap)

root = (
    E.root(
        E.g(
            E.g(
                E.g(id = "route_1_edge" )))))

print(etree.tostring(root, pretty_print=True))
print(root.xpath('./svg:g/svg:g/svg:g[@id="route_1_edge"]', namespaces=nsmap))
print(root.xpath('./svg:g/svg:g/svg:g[starts-with(@id,"route_1")]', namespaces=nsmap))
</snippet></ROW><ROW><id>15487356</id><snippet>&lt;svg:root xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
  &lt;svg:g&gt;
    &lt;svg:g&gt;
      &lt;svg:g id="route_1_edge"/&gt;
    &lt;/svg:g&gt;
  &lt;/svg:g&gt;
&lt;/svg:root&gt;

[&lt;Element {http://www.w3.org/2000/svg}g at 0xb7462c34&gt;]
[&lt;Element {http://www.w3.org/2000/svg}g at 0xb7462be4&gt;]
</snippet></ROW><ROW><id>15487376</id><snippet>__AccountHolder</snippet></ROW><ROW><id>15487376</id><snippet>__AccountHolder</snippet></ROW><ROW><id>15487376</id><snippet>print myaccount.__AccountHolder
print myaccount.Display_AccountHolder()
</snippet></ROW><ROW><id>15487376</id><snippet>print dir(myaccount)
</snippet></ROW><ROW><id>15487376</id><snippet>&gt;&gt;&gt; myaccount=AccountBannk(100000,"mehdiebagvand")
&gt;&gt;&gt; dir(myaccount)
    ['Display_AccountHolder', '_AccountBannk__AccountHolder', '__doc__', '__init__', '__module__']
&gt;&gt;&gt; myaccount.__AccountHolder="ali"
&gt;&gt;&gt; dir(myaccount)
    ['Display_AccountHolder', '_AccountBannk__AccountHolder', '__AccountHolder', '__doc__', '__init__', '__module__']
</snippet></ROW><ROW><id>15487405</id><snippet>ManyToOneRel</snippet></ROW><ROW><id>15487405</id><snippet>parent</snippet></ROW><ROW><id>15487405</id><snippet>self.foomodel_set</snippet></ROW><ROW><id>15487405</id><snippet>related_name</snippet></ROW><ROW><id>15487405</id><snippet>parent = models.ForeignKey('self', blank=True, null=True, related_name='children')
</snippet></ROW><ROW><id>15487487</id><snippet>self.imp.get != ""
</snippet></ROW><ROW><id>15487487</id><snippet>.get()</snippet></ROW><ROW><id>15487487</id><snippet>self.imp.get() != ""
</snippet></ROW><ROW><id>15487647</id><snippet>import pandas as pd
import numpy as np
np.random.seed(1)

def setup(regular=True):
    N = 10
    x = np.arange(N)
    a = np.arange(N)
    b = np.arange(N)

    if regular:
        timestamps = np.linspace(0, 120, N)
    else:
        timestamps = np.random.uniform(0, 120, N)

    df = pd.DataFrame({
        'Category': [True]*N + [False]*N,
        'Time': np.hstack((timestamps, timestamps)),
        'Value': np.hstack((a,b))
        })
    return df

df = setup(regular=False)
df.sort(['Category', 'Time'], inplace=True)
</snippet></ROW><ROW><id>15487647</id><snippet>df</snippet></ROW><ROW><id>15487647</id><snippet>In [4]: df
Out[4]: 
   Category       Time  Value    Result
12    False   0.013725      2  1.000000
15    False  11.080631      5  0.500000
14    False  17.610707      4  0.333333
16    False  22.351225      6  0.250000
13    False  36.279909      3  0.400000
17    False  41.467287      7  0.333333
18    False  47.612097      8  0.285714
10    False  50.042641      0  0.250000
19    False  64.658008      9  0.125000
11    False  86.438939      1  0.333333
2      True   0.013725      2  1.000000
5      True  11.080631      5  0.500000
4      True  17.610707      4  0.333333
6      True  22.351225      6  0.250000
3      True  36.279909      3  0.400000
7      True  41.467287      7  0.333333
8      True  47.612097      8  0.285714
0      True  50.042641      0  0.250000
9      True  64.658008      9  0.125000
1      True  86.438939      1  0.333333
</snippet></ROW><ROW><id>15487647</id><snippet>def between(a, b):
    def between_percentage(series):
        return float(len(series[(a &lt;= series) &amp; (series &lt; b)])) / float(len(series))
    return between_percentage
</snippet></ROW><ROW><id>15487647</id><snippet>between(1,3)</snippet></ROW><ROW><id>15487647</id><snippet>[1,3)</snippet></ROW><ROW><id>15487647</id><snippet>In [9]: series = pd.Series([1,2,3,4,5])

In [10]: between(1,3)(series)
Out[10]: 0.4
</snippet></ROW><ROW><id>15487647</id><snippet>df</snippet></ROW><ROW><id>15487647</id><snippet>Category</snippet></ROW><ROW><id>15487647</id><snippet>df.groupby(['Category'])
</snippet></ROW><ROW><id>15487647</id><snippet>df['Result'] = df.groupby(['Category']).apply(toeach_category)
</snippet></ROW><ROW><id>15487647</id><snippet>toeach_category</snippet></ROW><ROW><id>15487647</id><snippet>df</snippet></ROW><ROW><id>15487647</id><snippet>Result</snippet></ROW><ROW><id>15487647</id><snippet>toeach_category</snippet></ROW><ROW><id>15487647</id><snippet>toeach_category</snippet></ROW><ROW><id>15487647</id><snippet>def toeach_category(subf):
    print(subf)
</snippet></ROW><ROW><id>15487647</id><snippet>subf</snippet></ROW><ROW><id>15487647</id><snippet>Category</snippet></ROW><ROW><id>15487647</id><snippet>   Category       Time  Value    Result
12    False   0.013725      2  1.000000
15    False  11.080631      5  0.500000
14    False  17.610707      4  0.333333
16    False  22.351225      6  0.250000
13    False  36.279909      3  0.400000
17    False  41.467287      7  0.333333
18    False  47.612097      8  0.285714
10    False  50.042641      0  0.250000
19    False  64.658008      9  0.125000
11    False  86.438939      1  0.333333
</snippet></ROW><ROW><id>15487647</id><snippet>applymap</snippet></ROW><ROW><id>15487647</id><snippet>def toeach_category(subf):
    result = subf[['Time']].applymap(percentage)
</snippet></ROW><ROW><id>15487647</id><snippet>percentage</snippet></ROW><ROW><id>15487647</id><snippet>applymap</snippet></ROW><ROW><id>15487647</id><snippet>percentage</snippet></ROW><ROW><id>15487647</id><snippet>t</snippet></ROW><ROW><id>15487647</id><snippet>Value</snippet></ROW><ROW><id>15487647</id><snippet>subf</snippet></ROW><ROW><id>15487647</id><snippet>(t-60, t]</snippet></ROW><ROW><id>15487647</id><snippet>ix</snippet></ROW><ROW><id>15487647</id><snippet>subf.ix[(t-60 &lt; subf['Time']) &amp; (subf['Time'] &lt;= t), 'Value']
</snippet></ROW><ROW><id>15487647</id><snippet>Values</snippet></ROW><ROW><id>15487647</id><snippet>between(1,3)</snippet></ROW><ROW><id>15487647</id><snippet>between(1,3)(subf.ix[(t-60 &lt; subf['Time']) &amp; (subf['Time'] &lt;= t), 'Value'])
</snippet></ROW><ROW><id>15487647</id><snippet>percentage</snippet></ROW><ROW><id>15487647</id><snippet>t</snippet></ROW><ROW><id>15487647</id><snippet>def percentage(t):
    return between(1,3)(subf.ix[(t-60 &lt; subf['Time']) &amp; (subf['Time'] &lt;= t), 'Value'])
</snippet></ROW><ROW><id>15487647</id><snippet>percentage</snippet></ROW><ROW><id>15487647</id><snippet>subf</snippet></ROW><ROW><id>15487647</id><snippet>subf</snippet></ROW><ROW><id>15487647</id><snippet>percentage</snippet></ROW><ROW><id>15487647</id><snippet>applymap</snippet></ROW><ROW><id>15487647</id><snippet>percentage</snippet></ROW><ROW><id>15487647</id><snippet>toeach_category</snippet></ROW><ROW><id>15487647</id><snippet>subf</snippet></ROW><ROW><id>15487647</id><snippet>percentage(t)</snippet></ROW><ROW><id>15487647</id><snippet>subf</snippet></ROW><ROW><id>15487647</id><snippet>subf</snippet></ROW><ROW><id>15487647</id><snippet>subf</snippet></ROW><ROW><id>15487647</id><snippet>percentage</snippet></ROW><ROW><id>15487647</id><snippet>toeach_category</snippet></ROW><ROW><id>15487647</id><snippet>subf</snippet></ROW><ROW><id>15487647</id><snippet>toeach_category</snippet></ROW><ROW><id>15487647</id><snippet>def toeach_category(subf):
    def percentage(t):
        return between(1, 3)(
            subf.ix[(t - 60 &lt; subf['Time']) &amp; (subf['Time'] &lt;= t), 'Value'])
    result = subf[['Time']].applymap(percentage)
    return result
</snippet></ROW><ROW><id>15487647</id><snippet>import pandas as pd
import numpy as np
np.random.seed(1)


def setup(regular=True):
    N = 10
    x = np.arange(N)
    a = np.arange(N)
    b = np.arange(N)

    if regular:
        timestamps = np.linspace(0, 120, N)
    else:
        timestamps = np.random.uniform(0, 120, N)

    df = pd.DataFrame({
        'Category': [True] * N + [False] * N,
        'Time': np.hstack((timestamps, timestamps)),
        'Value': np.hstack((a, b))
    })
    return df


def between(a, b):
    def between_percentage(series):
        return float(len(series[(a &lt;= series) &amp; (series &lt; b)])) / float(len(series))
    return between_percentage


def toeach_category(subf):
    def percentage(t):
        return between(1, 3)(
            subf.ix[(t - 60 &lt; subf['Time']) &amp; (subf['Time'] &lt;= t), 'Value'])
    result = subf[['Time']].applymap(percentage)
    return result


df = setup(regular=False)
df.sort(['Category', 'Time'], inplace=True)
df['Result'] = df.groupby(['Category']).apply(toeach_category)
print(df)
</snippet></ROW><ROW><id>15487647</id><snippet>   Category       Time  Value    Result
12    False   0.013725      2  1.000000
15    False  11.080631      5  0.500000
14    False  17.610707      4  0.333333
16    False  22.351225      6  0.250000
13    False  36.279909      3  0.200000
17    False  41.467287      7  0.166667
18    False  47.612097      8  0.142857
10    False  50.042641      0  0.125000
19    False  64.658008      9  0.000000
11    False  86.438939      1  0.166667
2      True   0.013725      2  1.000000
5      True  11.080631      5  0.500000
4      True  17.610707      4  0.333333
6      True  22.351225      6  0.250000
3      True  36.279909      3  0.200000
7      True  41.467287      7  0.166667
8      True  47.612097      8  0.142857
0      True  50.042641      0  0.125000
9      True  64.658008      9  0.000000
1      True  86.438939      1  0.166667
</snippet></ROW><ROW><id>15487872</id><snippet>J</snippet></ROW><ROW><id>15487872</id><snippet>Q</snippet></ROW><ROW><id>15487872</id><snippet>K</snippet></ROW><ROW><id>15487872</id><snippet>    if card == "A":
        aces = aces + 1
    elif card == "J":
        value == value + 10    #xxx
    elif card == "Q":
        value == value + 10    #xxx
    elif card == "K":
        value == value + 10    #xxx
    else:
        value = value + card
</snippet></ROW><ROW><id>15487872</id><snippet>value</snippet></ROW><ROW><id>15487872</id><snippet>value + 10</snippet></ROW><ROW><id>15487872</id><snippet>True</snippet></ROW><ROW><id>15487872</id><snippet>False</snippet></ROW><ROW><id>15487872</id><snippet>    if card == "A":
        aces = aces + 1
    elif card == "J":
        value = value + 10
    elif card == "Q":
        value = value + 10
    elif card == "K":
        value = value + 10
    else:
        value = value + card
</snippet></ROW><ROW><id>15487872</id><snippet>    if card == "A":
        aces = aces + 1
    elif card == "J":
        value += 10
    elif card == "Q":
        value += 10
    elif card == "K":
        value += 10
    else:
        value += card
</snippet></ROW><ROW><id>15487893</id><snippet>dict.setdefault()</snippet></ROW><ROW><id>15487893</id><snippet>results = {}
for val in vals:
    i = some_request_to_server(val)
    results.setdefault(i, []).append(val)
</snippet></ROW><ROW><id>15487893</id><snippet>results.setdefault(i, []).append(val)</snippet></ROW><ROW><id>15487893</id><snippet>if i in results:
    results[i].append(val)
else:
    results[i] = [val]
</snippet></ROW><ROW><id>15487954</id><snippet>try:
    session.commit()
except SQLAlchemyError:
    pprint('Not quite right...')
    session.rollback()
</snippet></ROW><ROW><id>15488003</id><snippet>u</snippet></ROW><ROW><id>15488003</id><snippet># search for parts you need in column 3
for subitem in re.findall("(.*?) \((.*?)\)", item[2]):
    temp_split = [subitem[0]]
    temp_split.extend(subitem[1].split("/"))
</snippet></ROW><ROW><id>15488003</id><snippet>for item_index in range(len(data)):
    item = data[item_index]

    for subitem in re.findall("(.*?) \((.*?)\)", item[2]):
        # part before the ( )
        temp_split = [subitem[0]]
        # part in the ( )
        temp_split.extend(subitem[1].split("/"))

    temp_item = item[:2]
    temp_item.extend(temp_split)
    temp_item.extend(item[3:])

    data[item_index] = temp_item
</snippet></ROW><ROW><id>15488023</id><snippet>class Feature(object):
    counter = 0

    def __init__(self):
        self.id = Feature.counter
        Feature.counter += 1
</snippet></ROW><ROW><id>15488023</id><snippet>Feature</snippet></ROW><ROW><id>15488023</id><snippet>type(self)</snippet></ROW><ROW><id>15488023</id><snippet>self.__class__</snippet></ROW><ROW><id>15488023</id><snippet>self.name</snippet></ROW><ROW><id>15488023</id><snippet>self</snippet></ROW><ROW><id>15488023</id><snippet>self</snippet></ROW><ROW><id>15488023</id><snippet>name</snippet></ROW><ROW><id>15488023</id><snippet>self.name = ...</snippet></ROW><ROW><id>15488023</id><snippet>name</snippet></ROW><ROW><id>15488023</id><snippet>self</snippet></ROW><ROW><id>15488023</id><snippet>Feature</snippet></ROW><ROW><id>15488023</id><snippet>Sub</snippet></ROW><ROW><id>15488023</id><snippet>self.__class__.counter = self.__class__.counter + 1
</snippet></ROW><ROW><id>15488023</id><snippet>Feature.counter</snippet></ROW><ROW><id>15488023</id><snippet>Sub</snippet></ROW><ROW><id>15488023</id><snippet>Sub.counter</snippet></ROW><ROW><id>15488023</id><snippet>Sub.counter</snippet></ROW><ROW><id>15488023</id><snippet>Sub</snippet></ROW><ROW><id>15488023</id><snippet>Feature.counter</snippet></ROW><ROW><id>15488023</id><snippet>Feature</snippet></ROW><ROW><id>15488023</id><snippet>Feature.counter</snippet></ROW><ROW><id>15488023</id><snippet>counter</snippet></ROW><ROW><id>15488023</id><snippet>Feature</snippet></ROW><ROW><id>15488023</id><snippet>Feature</snippet></ROW><ROW><id>15488023</id><snippet>type(self).counter</snippet></ROW><ROW><id>15488023</id><snippet>Feature</snippet></ROW><ROW><id>15488043</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>15488043</id><snippet>#!/aaa/python2.5
</snippet></ROW><ROW><id>15488043</id><snippet>$ chmod u+x script.py
$ ./script.py
</snippet></ROW><ROW><id>15488110</id><snippet>value1 or value2</snippet></ROW><ROW><id>15488110</id><snippet>myVar = value1 if value1 else value2
</snippet></ROW><ROW><id>15488110</id><snippet>myVar = value1 or value2</snippet></ROW><ROW><id>15488265</id><snippet>test</snippet></ROW><ROW><id>15488265</id><snippet>usage: test [-h] [-a | -b | -c] [-d] [&lt;filename&gt;]
</snippet></ROW><ROW><id>15488265</id><snippet>-ab</snippet></ROW><ROW><id>15488265</id><snippet>-ad</snippet></ROW><ROW><id>15488265</id><snippet>-da</snippet></ROW><ROW><id>15488265</id><snippet>filename</snippet></ROW><ROW><id>15488265</id><snippet>usage: test [-h] [-a | -b | -c] [-d] &lt;filename&gt;
</snippet></ROW><ROW><id>15488275</id><snippet>numpy</snippet></ROW><ROW><id>15488275</id><snippet>mylist = np.array([10.18398473, 9.95722384, 9.41220631, 9.42846614, 9.7300549 , 9.69949144, 9.86997862, 10.28299122, 9.97274071, 10.08966867, 9.7])
x = 5
lowestx = np.argsort(mylist)[:x]
#array([ 2,  3,  5, 10,  4])
</snippet></ROW><ROW><id>15488366</id><snippet>DATE = "November"
def main():
    xyz=DATE
    print "Date :",DATE
if __name__ == "__main__":
   main()
</snippet></ROW><ROW><id>15488366</id><snippet>DATE = "November"
def main():
    xyz=DATE
    print "Date :",DATE
    DATE = 123
if __name__ == "__main__":
   main()
</snippet></ROW><ROW><id>15488366</id><snippet>DATE = "November"
def main():
    global DATE
    xyz=DATE
    print "Date :",DATE
    DATE = 123
if __name__ == "__main__":
   main()
</snippet></ROW><ROW><id>15488366</id><snippet>def main(my_date=DATE):
   #now there is no question and it will use global scope
   #the downside is it is set to the value of DATE at run start not at the time it goes to main
</snippet></ROW><ROW><id>15488480</id><snippet>None</snippet></ROW><ROW><id>15488480</id><snippet>None</snippet></ROW><ROW><id>15488480</id><snippet>class UnInit(object):
    """
    No value yet given to this attribute
    """

class Coordinate(object):
    x = UnInit
    y = UnInit
    z = UnInit
</snippet></ROW><ROW><id>15488524</id><snippet>&gt;&gt;&gt; class Spam(object):
...     def __getattr__(self, attr):
...         if attr.startswith('x'):
...             return attr[1:]
&gt;&gt;&gt; spam = Spam()
&gt;&gt;&gt; spam.xeggs
'eggs'
</snippet></ROW><ROW><id>15488524</id><snippet>spam.__dict__</snippet></ROW><ROW><id>15488524</id><snippet>__slots__</snippet></ROW><ROW><id>15488524</id><snippet>__init__</snippet></ROW><ROW><id>15488524</id><snippet>dir(spam)</snippet></ROW><ROW><id>15488524</id><snippet>inspect.getmembers(spam)</snippet></ROW><ROW><id>15488524</id><snippet>dir</snippet></ROW><ROW><id>15488524</id><snippet>__dict__</snippet></ROW><ROW><id>15488524</id><snippet>__dict__</snippet></ROW><ROW><id>15488524</id><snippet>__dict__</snippet></ROW><ROW><id>15488524</id><snippet>getmembers</snippet></ROW><ROW><id>15488524</id><snippet>__dict__</snippet></ROW><ROW><id>15488524</id><snippet>dict</snippet></ROW><ROW><id>15488524</id><snippet>dict</snippet></ROW><ROW><id>15488524</id><snippet>getmembers</snippet></ROW><ROW><id>15488524</id><snippet>dir</snippet></ROW><ROW><id>15488524</id><snippet>dict</snippet></ROW><ROW><id>15488524</id><snippet>{key: getattr(spam, key) for key in dir(spam)}
</snippet></ROW><ROW><id>15488524</id><snippet>object</snippet></ROW><ROW><id>15488524</id><snippet>dir</snippet></ROW><ROW><id>15488524</id><snippet>getmembers</snippet></ROW><ROW><id>15488524</id><snippet>getmembers</snippet></ROW><ROW><id>15488524</id><snippet>('__str__', &lt;method-wrapper '__str__' of Spam object at 0x1066be790&gt;</snippet></ROW><ROW><id>15488524</id><snippet>__dunder__</snippet></ROW><ROW><id>15488524</id><snippet>_private</snippet></ROW><ROW><id>15488524</id><snippet>getmembers</snippet></ROW><ROW><id>15488524</id><snippet>callable</snippet></ROW><ROW><id>15488524</id><snippet>lambda x: not callable(x)</snippet></ROW><ROW><id>15488524</id><snippet>lambda</snippet></ROW><ROW><id>15488524</id><snippet>inspect.isfoo</snippet></ROW><ROW><id>15488524</id><snippet>def get_public_variables(obj):
    return [(name, value) for name, value 
            in inspect.getmembers(obj, lambda x: not callable(x))
            if not name.startswith('_')]
</snippet></ROW><ROW><id>15488524</id><snippet>__repr__</snippet></ROW><ROW><id>15488524</id><snippet>__repr__</snippet></ROW><ROW><id>15488524</id><snippet>__repr__</snippet></ROW><ROW><id>15488524</id><snippet>__str__</snippet></ROW><ROW><id>15488524</id><snippet>print</snippet></ROW><ROW><id>15488524</id><snippet>__repr__</snippet></ROW><ROW><id>15488524</id><snippet>eval</snippet></ROW><ROW><id>15488524</id><snippet>str</snippet></ROW><ROW><id>15488524</id><snippet>repr</snippet></ROW><ROW><id>15488524</id><snippet>repr</snippet></ROW><ROW><id>15488524</id><snippet>str</snippet></ROW><ROW><id>15488524</id><snippet>repr</snippet></ROW><ROW><id>15488524</id><snippet>print</snippet></ROW><ROW><id>15488524</id><snippet>repr</snippet></ROW><ROW><id>15488524</id><snippet>list</snippet></ROW><ROW><id>15488524</id><snippet>'[' + ', '.join(map(repr, item))) + ']'</snippet></ROW><ROW><id>15488524</id><snippet>repr</snippet></ROW><ROW><id>15488524</id><snippet>def __repr__(self):
    lines = []

    classes = inspect.getmro(type(self))
    lines.append(' '.join(repr(cls) for cls in classes))

    lines.append('')
    lines.append('Attributes:')
    attributes = inspect.getmembers(self, callable)
    longest = max(len(name) for name, value in attributes)
    fmt = '{:&gt;%s}: {}' % (longest, )
    for name, value in attributes:
        if not name.startswith('__'):
            lines.append(fmt.format(name, value))

    lines.append('')
    lines.append('Methods:')
    methods = inspect.getmembers(self, negate(callable))
    for name, value in methods:
        if not name.startswith('__'):
            lines.append(name)

    return '\n'.join(lines)
</snippet></ROW><ROW><id>15488524</id><snippet>getmembers</snippet></ROW><ROW><id>15488563</id><snippet>./program ...
</snippet></ROW><ROW><id>15488563</id><snippet>program ...
</snippet></ROW><ROW><id>15488563</id><snippet>PATH</snippet></ROW><ROW><id>15488563</id><snippet>.</snippet></ROW><ROW><id>15488563</id><snippet>PATH</snippet></ROW><ROW><id>15488563</id><snippet>PATH</snippet></ROW><ROW><id>15488563</id><snippet>/usr/local/bin/</snippet></ROW><ROW><id>15488563</id><snippet>~/bin/</snippet></ROW><ROW><id>15488620</id><snippet>getstuff=br.click_link(text="Text (.prn)", nr=0)</snippet></ROW><ROW><id>15488620</id><snippet>br.open(getstuff)
csvData = br.response().read()
</snippet></ROW><ROW><id>15488620</id><snippet>br.back()
</snippet></ROW><ROW><id>15488620</id><snippet>br</snippet></ROW><ROW><id>15488620</id><snippet>br.open</snippet></ROW><ROW><id>15488733</id><snippet>wx.FRAME_FLOAT_ON_PARENT</snippet></ROW><ROW><id>15488733</id><snippet>class DockingFrame(wx.Frame):
    def __init__(self, parent):
        wx.Frame.__init__(self, parent, title="Last Hand",
                          style=wx.CAPTION  | wx.FRAME_FLOAT_ON_PARENT)

        parent.Bind(wx.EVT_MOVE, self.OnParentMove)
        parent.Bind(wx.EVT_SHOW, self.OnParentShow)

    def SnapToParent(self):
        print "*Snapping to parent"
        pr = positioning.position(
            self.Rect,
            my='right_top', at='left_top', of=self.Parent.Rect)
        self.Move(pr.top_left)

    def OnParentMove(self, moveEvent):
        moveEvent.Skip()
        self.SnapToParent()

    def OnParentShow(self, event):
        event.Skip()
        print "Parent %s" % ("Hide", "Show")[event.GetShow()]
        self.Show(event.GetShow())
</snippet></ROW><ROW><id>15489077</id><snippet>lookup = {}

def countTerms(n):
   if n not in lookup:
      if n == 1:
         lookup[n] = 1
      elif not n % 2:
         lookup[n] = countTerms(n / 2)[0] + 1
      else:
         lookup[n] = countTerms(n*3 + 1)[0] + 1

   return lookup[n], n

print max(countTerms(i) for i in range(500001, 1000000, 2))
</snippet></ROW><ROW><id>15489110</id><snippet>def __init__(self, *args):
  Parent.__init__(self, list(args))
</snippet></ROW><ROW><id>15489110</id><snippet>__init__</snippet></ROW><ROW><id>15489110</id><snippet>args</snippet></ROW><ROW><id>15489110</id><snippet>Parent.__init__(self, args)</snippet></ROW><ROW><id>15489110</id><snippet>super()</snippet></ROW><ROW><id>15489110</id><snippet>Parent.__init__()</snippet></ROW><ROW><id>15489134</id><snippet>def iterate_tests(test_suite_or_case):
    """Iterate through all of the test cases in 'test_suite_or_case'."""
    try:
        suite = iter(test_suite_or_case)
    except TypeError:
        yield test_suite_or_case
    else:
        for test in suite:
            for subtest in iterate_tests(test):
                yield subtest
</snippet></ROW><ROW><id>15489134</id><snippet>testtools.testsuite.iterate_tests(suite)</snippet></ROW><ROW><id>15489134</id><snippet>[test.id() for test in testtools.testsuite.iterate_tests(suite)]
</snippet></ROW><ROW><id>15489252</id><snippet>line:word</snippet></ROW><ROW><id>15489252</id><snippet>p = """I am working on a project where me and my 'instructor'
       have the same book, same volume, and same version. Given
       a page already (aka, we're both using the first main page),
       find the phrase given a set of 'plot points', i.e. 8:1, 13:0, etc.
    """

lines = p.split('\n') # this gives you a list of lines, so you can access the nth item in a list
line = lines[3]       # this is the 4th line
words = line.split()  # this splits a line into a list of words
word = words[0]       # this is the first word in line 3 (fourth line)

print word
#find
</snippet></ROW><ROW><id>15489287</id><snippet>def foo():
    pass

instance.foo = foo
</snippet></ROW><ROW><id>15489287</id><snippet>from types import MethodType

def foo(instance):
    # this function will receive the instance as first argument
    # similar to a bound method
    pass

instance.foo = MethodType(foo, instance, instance.__class__)
</snippet></ROW><ROW><id>15489578</id><snippet>dict</snippet></ROW><ROW><id>15489578</id><snippet>__init__</snippet></ROW><ROW><id>15489578</id><snippet>class Sector:
   x = 0     #Position of the sector. The galactic (absolute) position of any object is its in-sector position
   y = 0     #plus the galactic position offset times the size of a sector. 
   def __init__(self):
       self.stardict = dict()
</snippet></ROW><ROW><id>15489578</id><snippet>stardict</snippet></ROW><ROW><id>15489578</id><snippet>self.stardict</snippet></ROW><ROW><id>15489578</id><snippet>stardict</snippet></ROW><ROW><id>15489578</id><snippet>stardict</snippet></ROW><ROW><id>15489578</id><snippet>stardict</snippet></ROW><ROW><id>15489578</id><snippet>stardict</snippet></ROW><ROW><id>15489578</id><snippet>stardict</snippet></ROW><ROW><id>15489647</id><snippet>msg.GetGroup()</snippet></ROW><ROW><id>15489664</id><snippet>os.path</snippet></ROW><ROW><id>15489664</id><snippet>os.path.split()</snippet></ROW><ROW><id>15489664</id><snippet>l = []
while True:
    head, tail = os.path.split(filename)
    l.insert(0, tail)
    if head == "/":
        l.insert(0, "")
        break
    filename = head
"/".join(l[:7])
</snippet></ROW><ROW><id>15489664</id><snippet>string.split()</snippet></ROW><ROW><id>15489664</id><snippet>cut(1)</snippet></ROW><ROW><id>15489664</id><snippet>$ echo '/a/b/c/d/e/f/g/h' | cut -d'/' -f1-7 
/a/b/c/d/e/f

$ echo '/a/b/c/d/e/f/g/h/' | cut -d'/' -f1-7 
/a/b/c/d/e/f

$ echo '/a//b///c/d/e/f/g/h' | cut -d'/' -f1-7
/a//b///c
</snippet></ROW><ROW><id>15489664</id><snippet># Tests and comparison to string.split()

import os.path

def cut_path(filename):
    l = []
    while True:
        head, tail = os.path.split(filename)
        l.insert(0, tail)
        if head == "/":
            l.insert(0, "")
            break
        filename = head
    return "/".join(l[:7])

def cut_string(filename):
    return "/".join( filename.split("/")[:7] )

def test(filename):
    print("input:", filename)
    print("string.split:", cut_string(filename))
    print("os.path.split:", cut_path(filename))
    print()

test("/a/b/c/d/e/f/g/h")
test("/a/b/c/d/e/f/g/h/")
test("/a//b///c/d/e/f/g/h")

# input: /a/b/c/d/e/f/g/h
# string.split: /a/b/c/d/e/f
# os.path.split: /a/b/c/d/e/f
#
# input: /a/b/c/d/e/f/g/h/
# string.split: /a/b/c/d/e/f
# os.path.split: /a/b/c/d/e/f
#
# input: /a//b///c/d/e/f/g/h
# string.split: /a//b///c
# os.path.split: /a/b/c/d/e/f
</snippet></ROW><ROW><id>15489667</id><snippet>&gt;&gt;&gt; s = "Spot is a brown dog. Spot has brown hair. The hair of Spot is brown."
&gt;&gt;&gt; sum(s.count(x) for x in ("Spot", "brown", "hair"))
8
</snippet></ROW><ROW><id>15489667</id><snippet>map</snippet></ROW><ROW><id>15489667</id><snippet>&gt;&gt;&gt; sum(map(s.count, ("Spot", "brown", "hair")))
8
</snippet></ROW><ROW><id>15489667</id><snippet>&gt;&gt;&gt; import nltk  # Natural Language Toolkit
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; sum(x in {"Spot", "brown", "hair"} for x in nltk.wordpunct_tokenize(s))
8
</snippet></ROW><ROW><id>15489701</id><snippet>from pandas import concat
from pandas.stats.moments import expanding_mean, expanding_count

def handler(grouped):
    se = grouped.set_index('Date')['Sale'].sort_index()
    # se is the (ordered) time series of sales restricted to a single basket
    # we can now create a dataframe by combining different metrics
    # pandas has a function for each of the ones you are interested in!
    return  concat(
        {
            'MeanToDate': expanding_mean(se), # cumulative mean
            'MaxToDate': se.cummax(),         # cumulative max
            'SaleCount': expanding_count(se), # cumulative count
            'Sale': se,                       # simple copy
            'PrevSale': se.shift(1)           # previous sale
        },
        axis=1
     )

# we then apply this handler to all the groups and pandas combines them
# back into a single dataframe indexed by (Basket, Date)
# we simply need to reset the index to get the shape you mention in your question
new_df = df.groupby('Basket').apply(handler).reset_index()
</snippet></ROW><ROW><id>15489744</id><snippet> uname -a
</snippet></ROW><ROW><id>15489765</id><snippet>items</snippet></ROW><ROW><id>15489765</id><snippet>[k for k, v in child_parent.items() if v == 0]
</snippet></ROW><ROW><id>15489765</id><snippet>&gt;&gt;&gt; [k for k, v in child_parent.items() if v == 0]
 [1, 2]

&gt;&gt;&gt; [k for k, v in child_parent.items() if v == 2]
 [3, 4]
</snippet></ROW><ROW><id>15489842</id><snippet>start_node</snippet></ROW><ROW><id>15489842</id><snippet>return node, holder
</snippet></ROW><ROW><id>15489842</id><snippet>node = start_node(Alist)
</snippet></ROW><ROW><id>15489842</id><snippet>node</snippet></ROW><ROW><id>15489842</id><snippet>node, holder</snippet></ROW><ROW><id>15489842</id><snippet>node, holder = start_node(Alist)
</snippet></ROW><ROW><id>15489842</id><snippet>main</snippet></ROW><ROW><id>15489842</id><snippet>holder = check_neighbours(node, Alist)
</snippet></ROW><ROW><id>15489842</id><snippet>check_neighbours</snippet></ROW><ROW><id>15489842</id><snippet>holder</snippet></ROW><ROW><id>15489842</id><snippet>holder</snippet></ROW><ROW><id>15489842</id><snippet>check_neighbours</snippet></ROW><ROW><id>15489842</id><snippet>def check_neighbours(node, Alist):
    holder = #something 
</snippet></ROW><ROW><id>15489842</id><snippet>holder</snippet></ROW><ROW><id>15489842</id><snippet>holder</snippet></ROW><ROW><id>15489842</id><snippet>def check_neighbours(node, Alist, holder):
</snippet></ROW><ROW><id>15489842</id><snippet>holder = check_neighbours(node, Alist, holder)
</snippet></ROW><ROW><id>15489842</id><snippet>check_neighbors</snippet></ROW><ROW><id>15489842</id><snippet>holder</snippet></ROW><ROW><id>15489842</id><snippet>my_name = my_name.replace('Joseph', 'Joe')</snippet></ROW><ROW><id>15489842</id><snippet>check_neighbors</snippet></ROW><ROW><id>15489842</id><snippet>return holder</snippet></ROW><ROW><id>15489842</id><snippet>def main():
    file = ("F:/media/KINGSTON/Networking/network.txt")
    my_list = create_matrix(file)
    my_node, my_holder = start_node(my_list)
    my_new_holder = check_neighbours(my_node, my_list, my_holder)
</snippet></ROW><ROW><id>15489917</id><snippet>X-Forwarded-For</snippet></ROW><ROW><id>15489917</id><snippet>HTTP_X_FORWARDED_FOR</snippet></ROW><ROW><id>15489917</id><snippet>$_SERVER</snippet></ROW><ROW><id>15489917</id><snippet>opener.addheaders = [('X-Forwarded-For','1.2.3.4'),]
</snippet></ROW><ROW><id>15490011</id><snippet>grouped = df.groupby([df.index.year,df.index.day])
df['sum'] = grouped.apply(lambda x: x.Open + x.Close)
</snippet></ROW><ROW><id>15490181</id><snippet>cd</snippet></ROW><ROW><id>15490181</id><snippet>locals()</snippet></ROW><ROW><id>15490181</id><snippet>import weakref
def countdown(n):
    while n:
        yield n
        n-=1

def func():
    a = countdown(10)
    b = weakref.ref(a)
    print next(a)
    print next(a)
    return b

c = func()
print c()
</snippet></ROW><ROW><id>15490181</id><snippet>del</snippet></ROW><ROW><id>15490253</id><snippet>Executable python scripts will be put in:
/usr/local/share/python
so you may want to put "/usr/local/share/python" in your PATH, too.
</snippet></ROW><ROW><id>15490253</id><snippet>$ which virtualenv 
</snippet></ROW><ROW><id>15490253</id><snippet>"/usr/local/share/python/virtualenv"
</snippet></ROW><ROW><id>15490281</id><snippet>python -t</snippet></ROW><ROW><id>15490499</id><snippet>&gt;&gt;&gt; x = range(10)
&gt;&gt;&gt; for i in x:
...     print i
...     if i%2==0:
...             x.remove(i)
... 
0
2
4
6
8
</snippet></ROW><ROW><id>15490499</id><snippet>&gt;&gt;&gt; x = range(10)
&gt;&gt;&gt; for i in x[:]:
...     print i
...     if i%2==0:
...             x.remove(i)
... 
0
1
2
3
4
5
6
7
8
9
</snippet></ROW><ROW><id>15490700</id><snippet>with Timeout()</snippet></ROW><ROW><id>15490700</id><snippet>gevent.spawn()</snippet></ROW><ROW><id>15490700</id><snippet>pool.spawn()</snippet></ROW><ROW><id>15490700</id><snippet>urllib2.urlopen(url)</snippet></ROW><ROW><id>15490700</id><snippet>validated = []
urls = ["http://a.com", "http://b.com"]

def down(url):
    with Timeout(5, False):
        urllib2.urlopen(url)
        validated.append(url)

pool = gevent.Pool(10)
for url in urls:
    pool.add(url)
pool.join() #you didn't call pool.join() in the original code because you have a wait loop already, which is okay
print "Valid URLs are: %s" % ", ".join(validated)
</snippet></ROW><ROW><id>15490700</id><snippet>while True</snippet></ROW><ROW><id>15490700</id><snippet>pool.spawn()</snippet></ROW><ROW><id>15490700</id><snippet>with Timeout()</snippet></ROW><ROW><id>15490700</id><snippet>urllib2.urlopen()</snippet></ROW><ROW><id>15490700</id><snippet>Timeout()</snippet></ROW><ROW><id>15490700</id><snippet>200</snippet></ROW><ROW><id>15490700</id><snippet>urllib2.urlopen(url).getcode()</snippet></ROW><ROW><id>15490717</id><snippet>python manage.py reset ecommerce
</snippet></ROW><ROW><id>15490785</id><snippet>for div in nsoup.find_all(class_='cities'):
    for childdiv in div.find_all('div'):
        print (childdiv.string) #london, york
</snippet></ROW><ROW><id>15490785</id><snippet>'\n'</snippet></ROW><ROW><id>15490785</id><snippet>.children</snippet></ROW><ROW><id>15490785</id><snippet>In [137]: print foo.prettify()
&lt;div class="cities"&gt;
 &lt;div id="3232"&gt;
  London
 &lt;/div&gt;
 &lt;div id="131"&gt;
  York
 &lt;/div&gt;
&lt;/div&gt;

In [138]: for div in foo.find_all(class_ = 'cities'):
   .....:     for childdiv in div.find_all('div'):
   .....:         print childdiv.string
   .....: 
 London 
 York 

In [139]: for div in foo.find_all(class_ = 'cities'):
   .....:     for childdiv in div.find_all('div'):
   .....:         print childdiv.string, childdiv['id']
   .....: 
 London  3232
 York  131
</snippet></ROW><ROW><id>15490893</id><snippet>from reportlab.lib.pagesizes import letter, landscape
</snippet></ROW><ROW><id>15490893</id><snippet>canvas.setPageSize(landscape(letter))
</snippet></ROW><ROW><id>15490893</id><snippet>canvas.setPageSize(width, height)
</snippet></ROW><ROW><id>15490893</id><snippet>from reportlab.lib.units import inch
</snippet></ROW><ROW><id>15490893</id><snippet>canvas.setPageSize(11*inch, 8.5*inch)
</snippet></ROW><ROW><id>15490893</id><snippet>reportlab.lib.pagesizes</snippet></ROW><ROW><id>15490893</id><snippet>A0,A1,A2,A3,A4,A5,A6
B0,B1,B2,B3,B4,B5,B6
LETTER, LEGAL, ELEVENSEVENTEEN
</snippet></ROW><ROW><id>15490893</id><snippet>letter</snippet></ROW><ROW><id>15490893</id><snippet>portrait</snippet></ROW><ROW><id>15490893</id><snippet>landscape</snippet></ROW><ROW><id>15491181</id><snippet>class Student(models.Model):
    name = models.TextField()
    location = models.TextField(default="sample")
</snippet></ROW><ROW><id>15491181</id><snippet>def __init__(self, *args, **kwargs):        
    super(Student, self).__init__(*args, **kwargs)
    self.location="sample"
</snippet></ROW><ROW><id>15491402</id><snippet>&gt;&gt;&gt; def all_substr(string):
    for i in range(len(string)):

        if i == len(string) - 1:
            yield string

        first_part = string[0:i+1]
        second_part = string[i+1:]

        for j in all_substr(second_part):
            yield ','.join([first_part, j])


&gt;&gt;&gt; for x in all_substr('apple'):
    print(x)


a,p,p,l,e
a,p,p,le
a,p,pl,e
a,p,ple
a,pp,l,e
a,pp,le
a,ppl,e
a,pple
ap,p,l,e
ap,p,le
ap,pl,e
ap,ple
app,l,e
app,le
appl,e
apple
</snippet></ROW><ROW><id>15491712</id><snippet>event.inaxes</snippet></ROW><ROW><id>15491712</id><snippet>import numpy as np
from matplotlib import pyplot as plt
from functools import partial

def onclick_cbar(cbar, event):
    if event.inaxes is cbar.ax:
        print cbar.mappable
        print cbar.mappable.get_clim()
        print event.xdata, event.ydata

fig = plt.figure()
y, x = np.mgrid[-1:1:100j, -1:1:100j]
z = np.sin(x**2 + y**2)
pcm = plt.pcolormesh(x, y, z)
cbar = plt.colorbar()
cid = fig.canvas.mpl_connect('button_press_event', partial(onclick_cbar, cbar))
plt.show()
</snippet></ROW><ROW><id>15491842</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; nums = [10*random.random() for x in range(5)]
</snippet></ROW><ROW><id>15491842</id><snippet>&gt;&gt;&gt; sum(nums)/len(nums)
4.2315222659844824
</snippet></ROW><ROW><id>15491842</id><snippet>&gt;&gt;&gt; nums = [x - 4.2315222659844824 + 2.5 for x in nums]
&gt;&gt;&gt; nums
[-0.628013346633133, 4.628537956666447, -1.7219257458163257, 7.617565127420011, 2.6038360083629986]
&gt;&gt;&gt; sum(nums)/len(nums)
2.4999999999999996
</snippet></ROW><ROW><id>15491882</id><snippet>partner = {

    'name': 'Fabien Pinckaers',
    'lang': 'fr_FR',
    'address': [(0,0,{
        'type': 'default',
        'street': 'Chaussée de Namur 40',
        'zip': '1367',
        'city': 'Grand-Rosière',
        'phone': '+3281813700',
        'fax': '+3281733501',
    })]
}
</snippet></ROW><ROW><id>15491882</id><snippet>  address = {
    'type' : 'default',
    'street': 'Chaussée de Namur 40',
    'zip': '1367',
    'city': 'Grand-Rosière',
    'phone': '+3281813700',
    'fax': '+3281733501',
}

partner = {
   'name': 'Fabien Pinckaers',
   'lang': 'fr_FR',
}

partner.update({'address': [(0,0,address)]})
</snippet></ROW><ROW><id>15491926</id><snippet>pip install django</snippet></ROW><ROW><id>15491932</id><snippet>def auto_sort(request):
    sort_by = request.GET.get('sort_by', None)
    if sort_by:
        temp_path = "{0}/file.txt".format(settings.SITE_ROOT) 
        #Set new_text to whatever you want based on your logic
        new_text = 'custom' 
        f=open(temp_path,'w')
        f.write(new_text)
        f.close();

        handle=open(temp_path,'w+')
        handle.write(sort_by)
        handle.close();

    return HttpResponseRedirect(reverse('envelopes:editor'))
</snippet></ROW><ROW><id>15492109</id><snippet>SortedOrderedDict</snippet></ROW><ROW><id>15492109</id><snippet>blist</snippet></ROW><ROW><id>15492109</id><snippet>bintrees</snippet></ROW><ROW><id>15492109</id><snippet>dict</snippet></ROW><ROW><id>15492109</id><snippet>map&lt;int, int&gt;</snippet></ROW><ROW><id>15492109</id><snippet>map</snippet></ROW><ROW><id>15492109</id><snippet>bintrees.FastRBTree</snippet></ROW><ROW><id>15492109</id><snippet>long</snippet></ROW><ROW><id>15492109</id><snippet>PyObject*</snippet></ROW><ROW><id>15492109</id><snippet>OrderedDict</snippet></ROW><ROW><id>15492109</id><snippet>sorted_dict = collections.OrderedDict(sorted(d.iteritems()))
</snippet></ROW><ROW><id>15492109</id><snippet>virtualenv</snippet></ROW><ROW><id>15492109</id><snippet>venv</snippet></ROW><ROW><id>15492109</id><snippet>blist</snippet></ROW><ROW><id>15492109</id><snippet>bintrees</snippet></ROW><ROW><id>15492109</id><snippet>build_ext -i</snippet></ROW><ROW><id>15492109</id><snippet>bintrees</snippet></ROW><ROW><id>15492131</id><snippet>from rpy2.robjects.lib import ggplot2
class ScaleShapeDiscrete(ggplot2.Scale):
    _constructor = ggplot2.ggplot2_env['scale_shape_discrete']
scale_shape_discrete = ScaleShapeDiscrete.new
</snippet></ROW><ROW><id>15492653</id><snippet>import os
hit = pygame.mixer.Sound(os.path.join(os.path.dirname(__file__), "hit.wav"))
</snippet></ROW><ROW><id>15492760</id><snippet>Save</snippet></ROW><ROW><id>15492760</id><snippet>scut.Save()
</snippet></ROW><ROW><id>15493434</id><snippet>stack=[]
shift=0
def Track(func):
    def wrapper(*args, **kwargs):
        global shift
        stack.append([])
        el=stack[-1]
        el.append('%s -- call(name=%s,args=%s,kwargs=%s)' % ('    '*shift,func.__name__,args, kwargs))
        shift+=1
        res = func(*args, **kwargs)
        shift-=1
        el[0]+='return=%s)' % res
        return res
    return wrapper
</snippet></ROW><ROW><id>15493434</id><snippet>for i in stack: print i[0]
</snippet></ROW><ROW><id>15493434</id><snippet> -- call(name=f,args=(3,),kwargs={})return=10)
     -- call(name=i,args=(3,),kwargs={})return=13)
     -- call(name=i,args=(4,),kwargs={})return=14)
     -- call(name=h,args=(5,),kwargs={})return=9)
         -- call(name=j,args=(5,),kwargs={})return=0)
 -- call(name=j,args=(3,),kwargs={})return=0)
</snippet></ROW><ROW><id>15493713</id><snippet>lxml.html</snippet></ROW><ROW><id>15493713</id><snippet>from lxml import html

url = "http://site.com"
doc = html.parse(url).getroot() # download &amp; parse webpage
doc.make_links_absolute(url)
for element, attribute, link, _ in doc.iterlinks():
    if (attribute == 'href' and element.tag == 'a' and
        'somepage' in link): # or e.g., re.search('somepage', link)
        print(link)
</snippet></ROW><ROW><id>15493713</id><snippet>beautifulsoup4</snippet></ROW><ROW><id>15493713</id><snippet>import re
try:
    from urllib2 import urlopen
    from urlparse import urljoin
except ImportError: # Python 3
    from urllib.parse import urljoin
    from urllib.request import urlopen

from bs4 import BeautifulSoup, SoupStrainer # pip install beautifulsoup4

url = "http://site.com"
only_links = SoupStrainer('a', href=re.compile('somepage'))
soup = BeautifulSoup(urlopen(url), parse_only=only_links)
urls = [urljoin(url, a['href']) for a in soup(only_links)]
print("\n".join(urls))
</snippet></ROW><ROW><id>15493777</id><snippet>mmm-mode</snippet></ROW><ROW><id>15493777</id><snippet>(require 'mmm-mode)
(setq mmm-global-mode 'maybe)
(mmm-add-classes
 '((python-rst
    :submode rst-mode
    :front "^ *[ru]?\"\"\"[^\"]*$"
    :back "^ *\"\"\""
    :include-front t
    :include-back t
    :end-not-begin t)))
(mmm-add-mode-ext-class 'python-mode nil 'python-rst)
</snippet></ROW><ROW><id>15494305</id><snippet>return 1</snippet></ROW><ROW><id>15494305</id><snippet>return True</snippet></ROW><ROW><id>15494305</id><snippet>break</snippet></ROW><ROW><id>15494305</id><snippet>while</snippet></ROW><ROW><id>15494305</id><snippet>break</snippet></ROW><ROW><id>15494305</id><snippet>return 0</snippet></ROW><ROW><id>15494305</id><snippet>while</snippet></ROW><ROW><id>15494305</id><snippet>if</snippet></ROW><ROW><id>15494305</id><snippet>prime(1)</snippet></ROW><ROW><id>15494305</id><snippet>True</snippet></ROW><ROW><id>15494305</id><snippet>def prime(number):
    oldnum = number
    factor = 1
    while number &gt; 1:
        factor += 1
        if number % factor == 0:
            if 1 &lt; factor &lt; oldnum:
                return False # is not prime
            number //= factor
    return True # is prime!
</snippet></ROW><ROW><id>15494489</id><snippet>'column_prefix':'tramos'</snippet></ROW><ROW><id>15494489</id><snippet>__mapper_args__</snippet></ROW><ROW><id>15494489</id><snippet>print b.tramosid</snippet></ROW><ROW><id>15494489</id><snippet>__repr__</snippet></ROW><ROW><id>15494489</id><snippet>def __repr__(self):
    return "[id:%s][nombre:%s][tramo:%s]" % (getattr(self, 'tramosid'), self.nombre, self.tramo_data)
</snippet></ROW><ROW><id>15494775</id><snippet>read()</snippet></ROW><ROW><id>15494775</id><snippet>read()</snippet></ROW><ROW><id>15494775</id><snippet>encode()</snippet></ROW><ROW><id>15494775</id><snippet>raw = upload.file.read()
</snippet></ROW><ROW><id>15494775</id><snippet>raw = upload.file.read().encode('ISO-8859-1')
</snippet></ROW><ROW><id>15494788</id><snippet>unicode</snippet></ROW><ROW><id>15494788</id><snippet>'hello'</snippet></ROW><ROW><id>15494788</id><snippet>u'hello'</snippet></ROW><ROW><id>15494788</id><snippet>u'blah'</snippet></ROW><ROW><id>15494788</id><snippet>'blah'</snippet></ROW><ROW><id>15494788</id><snippet>*.py</snippet></ROW><ROW><id>15494788</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>15495018</id><snippet>user2 = col.User(user)
user2.pop('_id')  # you should remove the _id or saving user2 will replace user
user2["Email"] = "newEmail@rit.edu"
user2.save()
</snippet></ROW><ROW><id>15495169</id><snippet>wx.Window</snippet></ROW><ROW><id>15495169</id><snippet>def accelerate(self,*args):
    accel_tbl = wx.AcceleratorTable(args)
    self.SetAcceleratorTable(accel_tbl)
</snippet></ROW><ROW><id>15495169</id><snippet>win = YourCustomWindowClass(PUT_WINDOW_ARGUMENTS_HERE)
win.accelerate((wx.ACCEL_CTRL,'O',PUT_ID_HERE),(wx.ACCEL_CTRL,'S',PUT_ID_HERE))
</snippet></ROW><ROW><id>15495169</id><snippet>wx.Window</snippet></ROW><ROW><id>15495169</id><snippet>def accelerate(win,*args):
    accel_tbl = wx.AcceleratorTable(args)
    win.SetAcceleratorTable(accel_tbl)
</snippet></ROW><ROW><id>15495169</id><snippet>*args</snippet></ROW><ROW><id>15495169</id><snippet>AcceleratorTable</snippet></ROW><ROW><id>15495169</id><snippet>list(args)</snippet></ROW><ROW><id>15495169</id><snippet>accel_tbl = wx.AcceleratorTable(list(args))</snippet></ROW><ROW><id>15495169</id><snippet>*args</snippet></ROW><ROW><id>15495472</id><snippet>def foo(bar):
    return foo.my_map.get(bar, defaultType)()
foo.my_map = {"rab": barType, "oof": fooType}
</snippet></ROW><ROW><id>15495560</id><snippet>Entry</snippet></ROW><ROW><id>15495560</id><snippet>def printtext():
    global e
    string = e.get() 
    print string   

from Tkinter import *
root = Tk()

root.title('Name')

e = Entry(root)
e.pack()
e.focus_set()

b = Button(root,text='okay',command=printtext)
b.pack(side='bottom')
root.mainloop()
</snippet></ROW><ROW><id>15495560</id><snippet>Entry</snippet></ROW><ROW><id>15495560</id><snippet>focus_set</snippet></ROW><ROW><id>15495560</id><snippet>Entry</snippet></ROW><ROW><id>15495560</id><snippet>get</snippet></ROW><ROW><id>15495560</id><snippet>Entry</snippet></ROW><ROW><id>15495948</id><snippet>json.loads()</snippet></ROW><ROW><id>15495948</id><snippet>s</snippet></ROW><ROW><id>15495948</id><snippet>json.load()</snippet></ROW><ROW><id>15496169</id><snippet>'iskeyword'</snippet></ROW><ROW><id>15496169</id><snippet>w</snippet></ROW><ROW><id>15496169</id><snippet>e</snippet></ROW><ROW><id>15496169</id><snippet>get_context_data</snippet></ROW><ROW><id>15496169</id><snippet>ca,w</snippet></ROW><ROW><id>15496169</id><snippet>caw</snippet></ROW><ROW><id>15496267</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>15496267</id><snippet>&gt;&gt;&gt; regex = re.compile("(&lt;\s*a\s*href\s*=\s*\"something\"\s*&gt;)+")
# Run findall
&gt;&gt;&gt; regex.findall(string)
[u'&lt;a href = "something" &gt;'] # your tag
</snippet></ROW><ROW><id>15496630</id><snippet>source ~/.profile
</snippet></ROW><ROW><id>15496630</id><snippet>$ which pip
/usr/local/bin/pip
$ ls -l /usr/local/bin/pip
[..] /usr/local/bin/pip -&gt; ../Cellar/python/2.7.3/bin/pip
</snippet></ROW><ROW><id>15496630</id><snippet>pip install virtualenv
</snippet></ROW><ROW><id>15496630</id><snippet>source .profile</snippet></ROW><ROW><id>15496630</id><snippet>echo $PATH</snippet></ROW><ROW><id>15497083</id><snippet>import os
os.system('net view &gt; conn.tmp')
f = open('conn.tmp', 'r')
f.readline();f.readline();f.readline()

conn = []
host = f.readline()
while host[0] == '\\':
    conn.append(host[2:host.find(' ')])
    host = f.readline()

print conn
f.close()    
</snippet></ROW><ROW><id>15497210</id><snippet>import pandas as pd
from StringIO import StringIO

data =  StringIO("""Type     time
A        0
A        1
A        2
B        10
B        11
B        12""")
df = pd.read_csv(data, delim_whitespace=True, dtype="O")

def set_first(x):
    x["ptime"] = x.time.values[0]
    x = x[1:]
    r = x.Type + "." + x.time + "-" + x.Type + "." + x.ptime
    return r

print df.groupby(df.Type, group_keys=False).apply(set_first)
</snippet></ROW><ROW><id>15497210</id><snippet>1      A.1-A.0
2      A.2-A.0
4    B.11-B.10
5    B.12-B.10
</snippet></ROW><ROW><id>15498033</id><snippet>getattr</snippet></ROW><ROW><id>15498106</id><snippet>{% if publication.pub_type == "conference_paper" %}
{#                         ^^                    #}
</snippet></ROW><ROW><id>15498106</id><snippet>equals</snippet></ROW><ROW><id>15498285</id><snippet>numpy.clip()</snippet></ROW><ROW><id>15498285</id><snippet>import pylab as p
first = ["", "2013-02-05", "2013-02-12", "2013-02-19", "2013-02-26", "2013-03-05", "2013-03-12"]

second = [0.0, 0.0, 0, 25, 35, 0]

fig = p.figure()
ax = fig.add_subplot(1,1,1)
N = len(second)
ind = range(1, N+1)
ax.bar(ind, np.clip(second, 0.001, np.inf), facecolor='#777777', align='center', ecolor='black', )
ax.set_xticklabels(first)
fig.autofmt_xdate()
</snippet></ROW><ROW><id>15498542</id><snippet>import cv2

# load image
fname = 'Myimage.jpg'
im = cv2.imread(fname,cv2.COLOR_RGB2GRAY)
# blur image
im = cv2.blur(im,(4,4))
# apply a threshold
im = cv2.threshold(im, 175 , 250, cv2.THRESH_BINARY)
im = im[1]
# show image
cv2.imshow('',im)
cv2.waitKey(0)
</snippet></ROW><ROW><id>15498542</id><snippet>cv2.imwrite</snippet></ROW><ROW><id>15498722</id><snippet>all_compare_tables = []
for Book in rootNode.getBooks():
    CompareTables=[]
    CompareTables.append(Book.getName())
    for Table in Book.getTables():
        CompareTables.append(Table.getName())
    all_compare_tables.append(CompareTables)

print all_compare_tables[0]
print all_compare_tables[1]

# better yet, loop:

for compare_tables in all_compare_tables:
    print compare_tables
</snippet></ROW><ROW><id>15498722</id><snippet>all_compare_tables = {}
for i, Book in enumerate(rootNode.getBooks(), 1):
    CompareTables=[]
    CompareTables.append(Book.getName())
    for Table in Book.getTables():
        CompareTables.append(Table.getName())
    all_compare_tables['CompareTables{}'.format(i)] = CompareTables
</snippet></ROW><ROW><id>15498722</id><snippet>CompareTables1</snippet></ROW><ROW><id>15498722</id><snippet>CompareTables2</snippet></ROW><ROW><id>15498722</id><snippet>print all_compare_tables['CompareTables1']
print all_compare_tables['CompareTables2']
</snippet></ROW><ROW><id>15498722</id><snippet>all_compare_tables.keys()</snippet></ROW><ROW><id>15498722</id><snippet>all_compare_tables.values()</snippet></ROW><ROW><id>15499107</id><snippet>mypath.mymodule
===============

.. automodule:: mypath.mymodule
</snippet></ROW><ROW><id>15499291</id><snippet>store = pd.HDFStore('test0.h5','w')
In [31]: for chunk in pd.read_csv('Train.csv', chunksize=10000):
   ....:     store.append('df', chunk, index=False, data_columns=True)
</snippet></ROW><ROW><id>15499348</id><snippet>pandas</snippet></ROW><ROW><id>15499348</id><snippet>user</snippet></ROW><ROW><id>15499348</id><snippet>import pandas as pd
s = pd.read_csv('file.txt', sep=' ', header=None, index_col=0, squeeze=True)
</snippet></ROW><ROW><id>15499348</id><snippet>pandas</snippet></ROW><ROW><id>15499348</id><snippet>sep=' '</snippet></ROW><ROW><id>15499348</id><snippet>header=None</snippet></ROW><ROW><id>15499348</id><snippet>index_col=0</snippet></ROW><ROW><id>15499348</id><snippet>pandas</snippet></ROW><ROW><id>15499348</id><snippet>DataFrame</snippet></ROW><ROW><id>15499348</id><snippet>Series</snippet></ROW><ROW><id>15499348</id><snippet>squeeze=True</snippet></ROW><ROW><id>15499348</id><snippet>s</snippet></ROW><ROW><id>15499348</id><snippet>Series</snippet></ROW><ROW><id>15499348</id><snippet>In [37]: s.head()
Out[37]: 
0
user0    104106
user1     31024
user2     82993
user3    211414
user4    499070
Name: 1

In [38]: s['user3']
Out[38]: 211414
</snippet></ROW><ROW><id>15499348</id><snippet>'file.txt'</snippet></ROW><ROW><id>15499348</id><snippet>s</snippet></ROW><ROW><id>15499348</id><snippet>s</snippet></ROW><ROW><id>15499420</id><snippet>me</snippet></ROW><ROW><id>15499420</id><snippet>def me(self, msg)</snippet></ROW><ROW><id>15499420</id><snippet>self.me(irc, text)</snippet></ROW><ROW><id>15499420</id><snippet>def me(self, irc, msg)</snippet></ROW><ROW><id>15499561</id><snippet>wx.App.ExitMainLoop</snippet></ROW><ROW><id>15499561</id><snippet>wx.WakeUpMainThread</snippet></ROW><ROW><id>15499835</id><snippet>2013-03-19 11:28:09,249 1486 ERROR zeon1 openerp.sql_db: Programming error:  column ir_module_module.maintainer does not exist
LINE 1: ...dule."menus_by_module",ir_module_module."website",ir_module_...
</snippet></ROW><ROW><id>15500159</id><snippet>mainLayout = QtGui.QGridLayout()
mainLayout.setColumnMinimumWidth(0, 100) #set column 0 width to 100 pixels
button = QtGui.QPushButton('OK')
mainLayout.addWidget(button, 0, 0) #adds the button to the widened column
</snippet></ROW><ROW><id>15500477</id><snippet>for k in range(1, len(x)):
if y_list&gt;0:
        y_list.append(y)
        I += y[k-1] * (x[k] - x[k-1])
</snippet></ROW><ROW><id>15500477</id><snippet>if</snippet></ROW><ROW><id>15500477</id><snippet>for</snippet></ROW><ROW><id>15500477</id><snippet>for k in range(1, len(x)):
    if y_list&gt;0:
        y_list.append(y)
        I += y[k-1] * (x[k] - x[k-1])
</snippet></ROW><ROW><id>15500524</id><snippet>open(1,FILE=TRIM(filenameBC),RECL=2000)</snippet></ROW><ROW><id>15500524</id><snippet>filenameBC</snippet></ROW><ROW><id>15500524</id><snippet>TRIM</snippet></ROW><ROW><id>15500524</id><snippet>filenameBC.rstrip()</snippet></ROW><ROW><id>15500524</id><snippet>RECL=2000</snippet></ROW><ROW><id>15500524</id><snippet>"sequential"</snippet></ROW><ROW><id>15500524</id><snippet>filehandle = open('file')
line = filehandle.readline()  #or better, `next(filehandle)` :)
</snippet></ROW><ROW><id>15500524</id><snippet>integer filehandle
filehandle = 1       ! pick an integer any positive one 
                     ! will do that we haven't used already,
                     ! but it's best to avoid 0,5,6 as those 
                     ! usually mean `stderr`,`stdin` and `stdout`.
open(filehandle,file='file')
read(filehandle,*) line
</snippet></ROW><ROW><id>15500524</id><snippet>*</snippet></ROW><ROW><id>15500524</id><snippet>IF (IOEnd&gt;-1) THEN</snippet></ROW><ROW><id>15500524</id><snippet>except</snippet></ROW><ROW><id>15500524</id><snippet>ndarray</snippet></ROW><ROW><id>15500524</id><snippet>data_list = []
with open(filenameBC.rstrip()) as fin:
    for _ in range(29): #throw away first 29 lines (I think I counted right ...)
        next(fin)

    for line in fin:
        data_list.append([float(x) for x in line.strip()])

timeArray,MbolArray,uArray,gArray,rArray,iArray,zArray = zip(*data_list)
</snippet></ROW><ROW><id>15500607</id><snippet>test = [[(u'hello',), (u'hello',)], [(u'hello',)]]
for i, part_i in enumerate(test):
    for j, part_j in enumerate(part_i):
        test[i][j] = str(part_j[0])
</snippet></ROW><ROW><id>15500607</id><snippet>test = [[(u'hello',), (u'hello',)], [(u'hello',)]]
result = [[str(j[0]) for j in i] for i in test]
</snippet></ROW><ROW><id>15500821</id><snippet>x</snippet></ROW><ROW><id>15500821</id><snippet>y</snippet></ROW><ROW><id>15500821</id><snippet>while node == 0:</snippet></ROW><ROW><id>15500821</id><snippet>if node == 0</snippet></ROW><ROW><id>15500877</id><snippet>while True:
  REFERENCE = raw_input("Reference (*.shp):")
  SEGMENTED = raw_input("Segmented (*.shp):")
  METHOD = raw_input("Method (ke, pu, clinton):")
  if METHOD != "ke" and METHOD != "pu" and METHOD != "clinton":
    raise ValueError("%s is not a valid method" % METHOD)
  if METHOD == "ke" or METHOD == "clinton":
    THRESHOLD = input("Threshold (0.0 - 1.0):")
    if not check_threshold(THRESHOLD):
        raise AccuracyException("Threshold of %s is not valid" % THRESHOLD)
  else:
    THRESHOLD = None
  SEP = raw_input("Sep:")
  if SEP != "space" and SEP != "tab" and SEP != "comma" and SEP != "colon" and SEP != "semicolon" and SEP != "hyphen" and SEP != "dot":
    raise ValueError("%s is not valid" % SEP)
  HEADER = raw_input("Header (True/False):")
  if HEADER.strip() != "True" and HEADER.strip() != "False":
    raise ValueError("%s is not valid" % HEADER)
  # output 
  OUTPUT = raw_input("Output (*.txt):")
</snippet></ROW><ROW><id>15500986</id><snippet>urllib.request</snippet></ROW><ROW><id>15500986</id><snippet>import urllib.request

url = urllib.request.urlopen('http://www.bing.com')
print(url.info())
</snippet></ROW><ROW><id>15500986</id><snippet>urllib2</snippet></ROW><ROW><id>15500986</id><snippet>urllib2</snippet></ROW><ROW><id>15500986</id><snippet>urllib.request</snippet></ROW><ROW><id>15500986</id><snippet>urllib.error</snippet></ROW><ROW><id>15500986</id><snippet>2to3</snippet></ROW><ROW><id>15501181</id><snippet>sudo -E</snippet></ROW><ROW><id>15501181</id><snippet> -E          The -E (preserve environment) option indicates to the secu‐
             rity policy that the user wishes to preserve their existing
             environment variables.  The security policy may return an
             error if the -E option is specified and the user does not
             have permission to preserve the environment.
</snippet></ROW><ROW><id>15501181</id><snippet>sudo</snippet></ROW><ROW><id>15501667</id><snippet>$ sort -k2,2 -n -o log.dat log.dat
</snippet></ROW><ROW><id>15501679</id><snippet>import ctypes as ct

mylib = ct.cdll.myfile
c_int = ct.c_int(0)
mylib.my_function(ct.byref(c_int))
print c_int.value
</snippet></ROW><ROW><id>15502067</id><snippet>#!/usr/bin/env python

import pyfits, os, re, glob, sys
from scipy.optimize import leastsq
from numpy import *
from pylab import *
from scipy import *
rc('font',**{'family':'serif','serif':['Helvetica']})
rc('ps',usedistiller='xpdf')
rc('text', usetex=True)
#------------------------------------------------------

tmin = 56200
tmax = 56249
pi = 3.14
data=pyfits.open('http://heasarc.gsfc.nasa.gov/docs/swift/results/transients/weak/GX304-1.orbit.lc.fits')

time  = data[1].data.field(0)/86400. + data[1].header['MJDREFF'] + data[1].header['MJDREFI']
rate  = data[1].data.field(1)
error = data[1].data.field(2)
data.close()

cond = ((time &gt; tmin-5) &amp; (time &lt; tmax))
time=time[cond]
rate=rate[cond]
error=error[cond]

gauss_fit = lambda p, x: p[0]*(1/(2*pi*(p[2]**2))**(1/2))*exp(-(x-p[1])**2/(2*p[2]**2))+p[3]*(1/sqrt(2*pi*(p[5]**2)))*exp(-(x-p[4])**2/(2*p[5]**2)) #1d Gaussian func
e_gauss_fit = lambda p, x, y: (gauss_fit(p, x) -y) #1d Gaussian fit
v0= [0.20, 56210.0, 1, 0.40, 56234.0, 1] #inital guesses for Gaussian Fit, just do it around the peaks
out = leastsq(e_gauss_fit, v0[:], args=(time, rate), maxfev=100000, full_output=1) #Gauss Fit
v = out[0] #fit parameters out
xxx = arange(min(time), max(time), time[1] - time[0])
ccc = gauss_fit(v, xxx) # this will only work if the units are pixel and not wavelength
fig = figure(figsize=(9, 9)) #make a plot
ax1 = fig.add_subplot(111)
ax1.plot(time, rate, 'g.') #spectrum
ax1.plot(xxx, ccc, 'b-') #fitted spectrum
savefig("plotfitting.png")

axis([tmin-10,tmax,-0.00,0.45])
</snippet></ROW><ROW><id>15502318</id><snippet>%prec fakeToken</snippet></ROW><ROW><id>15502318</id><snippet>facetoken</snippet></ROW><ROW><id>15502501</id><snippet>plt.xlim(0, len(counter_trim))
</snippet></ROW><ROW><id>15502599</id><snippet>**</snippet></ROW><ROW><id>15502599</id><snippet>BINARY_POWER</snippet></ROW><ROW><id>15502599</id><snippet>PyNumber_Power</snippet></ROW><ROW><id>15502599</id><snippet>PyNumber_Power</snippet></ROW><ROW><id>15502599</id><snippet>nb_power</snippet></ROW><ROW><id>15502599</id><snippet>ternary_op</snippet></ROW><ROW><id>15502599</id><snippet>int_pow</snippet></ROW><ROW><id>15502599</id><snippet>x</snippet></ROW><ROW><id>15502599</id><snippet>2.3</snippet></ROW><ROW><id>15502599</id><snippet>float_pow</snippet></ROW><ROW><id>15502599</id><snippet>x</snippet></ROW><ROW><id>15502599</id><snippet>pow()</snippet></ROW><ROW><id>15502713</id><snippet>repr</snippet></ROW><ROW><id>15502713</id><snippet>&gt;&gt;&gt; print(repr(b'J\xe2nis'.decode('cp1252')))
u'J\xe2nis'
&gt;&gt;&gt; print(b'J\xe2nis'.decode('cp1252'))
Jânis
</snippet></ROW><ROW><id>15502842</id><snippet>from django.template import RequestContext

def portfolio(request):
    # ... view code here
   return render_to_response("portfolio.html", {'portfolio_form': portfolio_form}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>15502842</id><snippet>from django.core.context_processors import csrf
from django.shortcuts import render_to_response

def portfolio(request):
    # ... view code here

    c = {'portfolio_form': portfolio_form}
    c.update(csrf(request))
    return render_to_response("portfolio.html", c)
</snippet></ROW><ROW><id>15503628</id><snippet>'User-Agent'</snippet></ROW><ROW><id>15503628</id><snippet>import urllib2

url = 'http://www.google.com/search?tbo=p&amp;q=ininventor:"John-Mudd"&amp;hl=en&amp;tbm=pts&amp;source=lnt&amp;tbs=ptso:us'
req = urllib2.Request(url, headers={'User-Agent' : "foobar"})

response = urllib2.urlopen(req)
</snippet></ROW><ROW><id>15503630</id><snippet>views</snippet></ROW><ROW><id>15503630</id><snippet>views</snippet></ROW><ROW><id>15503630</id><snippet>forms.CreatePostForm</snippet></ROW><ROW><id>15503630</id><snippet>forms.CreatePostForm</snippet></ROW><ROW><id>15503630</id><snippet>forms.CreatePostForm</snippet></ROW><ROW><id>15503630</id><snippet>class CreatePostForm(object):
    pass
</snippet></ROW><ROW><id>15503630</id><snippet>from forms import CreatePostForm

def doit():
    print CreatePostForm()
</snippet></ROW><ROW><id>15503630</id><snippet>from mock import patch

import views

with patch('views.CreatePostForm') as Form:
    views.doit()
</snippet></ROW><ROW><id>15503775</id><snippet>=</snippet></ROW><ROW><id>15503775</id><snippet>re.findall(r'"\w+=.*?"', vars)
</snippet></ROW><ROW><id>15503775</id><snippet>&gt;&gt;&gt; re.findall(r'"\w+=.*?"', vars)
['"NAME=Product"', '"TYPE="', '"VERSION=1.2"', '"VISIBILITY="', '"SRC="', '"FOLDER=TRUE"', '"Text=foo, containing, commas"']
&gt;&gt;&gt; for match in re.findall(r'"\w+=.*?"', vars):
...     print match
... 
"NAME=Product"
"TYPE="
"VERSION=1.2"
"VISIBILITY="
"SRC="
"FOLDER=TRUE"
"Text=foo, containing, commas"
</snippet></ROW><ROW><id>15503797</id><snippet>#!/usr/bin/env python2
from kivy.app import App
from kivy.lang import Builder
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.button import Button

Builder.load_string('''
#:kivy 1.6
[SideBar@BoxLayout]:
    content: content
    orientation: 'vertical'
    size_hint: ctx.size_hint if hasattr(ctx, 'size_hint') else (1, 1)
    Image:
        source: ctx.image
        size_hint: (1, None)
        height: root.width
    GridLayout:
        cols: 2
        # just add a id that can be accessed later on
        id: content

&lt;Root&gt;:
    Button:
        center_x: root.center_x
        text: 'press to add_widgets'
        size_hint: .2, .2
        on_press:
            # what comes after `:` is basically normal python code
            sb.content.clear_widgets()
            # however using a callback that you can control in python
            # gives you more control
            root.load_content(sb.content)
    SideBar:
        id: sb
        size_hint: .2, 1
        image: 'data/images/image-loading.gif'
''')

class Root(FloatLayout):

    def load_content(self, content):
        for but in range(20):
            content.add_widget(Button(
                                text=str(but)))

class MyApp(App):
    def build(self):
        return Root()

if __name__ == '__main__':
    MyApp().run()
</snippet></ROW><ROW><id>15503797</id><snippet>#!/usr/bin/env python2
from kivy.app import App
from kivy.lang import Builder
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.button import Button
from kivy.properties import ObjectProperty

Builder.load_string('''
#:kivy 1.6
[SideBar@BoxLayout]:
    content: content
    orientation: 'vertical'
    size_hint: ctx.size_hint if hasattr(ctx, 'size_hint') else (1, 1)
    Image:
        source: ctx.image
        size_hint: (1, None)
        height: root.width
    GridLayout:
        cols: 2
        # just add a id that can be accessed later on
        id: content

&lt;Root&gt;:
    content: sb.content
    Button:
        center_x: root.center_x
        text: 'press to add_widgets'
        size_hint: .2, .2
        on_press:
            sb.content.clear_widgets()
            root.load_content()
    SideBar:
        id: sb
        size_hint: .2, 1
        image: 'data/images/image-loading.gif'
''')

class Root(FloatLayout):

    content = ObjectProperty(None)
    '''This is initialised to None and in kv code at line 28
    above (the one with `content: sb.content`) a ref to the
    actual content is passed'''

    def load_content(self):
        content = self.content
        for but in range(20):
            content.add_widget(Button(
                                text=str(but)))

class MyApp(App):
    def build(self):
        return Root()

if __name__ == '__main__':
        MyApp().run()
</snippet></ROW><ROW><id>15503977</id><snippet>setup.py install --user</snippet></ROW><ROW><id>15503985</id><snippet>rowList = [column for column in [row for row in yourListStore]]
</snippet></ROW><ROW><id>15504301</id><snippet>query = '''INSERT INTO cheese (data) VALUES (%s)'''
cur.execute(query, (bd,))
</snippet></ROW><ROW><id>15504311</id><snippet>WATCH</snippet></ROW><ROW><id>15504311</id><snippet>pipe.watch(key, another_key)
</snippet></ROW><ROW><id>15504328</id><snippet>def readDb():
    ... #Fetch a lot of data from db, spends a lot time
    return aList

def calculation(data):
    x=data
    ...process x...
    return y

data = readDb()

calculation(data)
calculation(data)
calculation(data)
</snippet></ROW><ROW><id>15504594</id><snippet>variable1, variable2 = rawi()
</snippet></ROW><ROW><id>15504619</id><snippet>cc_r: 1501-210 (W) command option t contains an incorrect subargument
</snippet></ROW><ROW><id>15504619</id><snippet>cc_r -tI ...
</snippet></ROW><ROW><id>15504619</id><snippet>make CC=/bin/gcc CCC=/bin/g++ CXX=/bin/g++
</snippet></ROW><ROW><id>15504711</id><snippet>dict</snippet></ROW><ROW><id>15504711</id><snippet>OrderedDict</snippet></ROW><ROW><id>15504711</id><snippet>r = requests.post("https://instructure-uploads.s3.amazonaws.com/", files=payload.items())
</snippet></ROW><ROW><id>15504711</id><snippet>collections.OrderedDict()</snippet></ROW><ROW><id>15504711</id><snippet>dict</snippet></ROW><ROW><id>15504711</id><snippet>items()</snippet></ROW><ROW><id>15504711</id><snippet>requests</snippet></ROW><ROW><id>15504711</id><snippet>OrderedDict</snippet></ROW><ROW><id>15504711</id><snippet>http://httpbin/post</snippet></ROW><ROW><id>15504711</id><snippet>import pprint
pprint.pprint(requests.post("http://httpbin.org/post", files=payload.items()).json())
</snippet></ROW><ROW><id>15504711</id><snippet>httpbin.org</snippet></ROW><ROW><id>15504711</id><snippet>'@log.txt'</snippet></ROW><ROW><id>15504711</id><snippet>POST /tlrsd2tl HTTP/1.1
User-Agent: python-requests/1.1.0 CPython/2.7.3 Darwin/11.4.2
Host: requestb.in
Content-Type: multipart/form-data; boundary=7b12bf345d0744b6b7e66c7890214311
Content-Length: 1601
Connection: close
Accept-Encoding: gzip, deflate, compress
Accept: */*

--7b12bf345d0744b6b7e66c7890214311
Content-Disposition: form-data; name="content-type"; filename="content-type"
Content-Type: application/octet-stream

text/plain
--7b12bf345d0744b6b7e66c7890214311
Content-Disposition: form-data; name="success_action_redirect"; filename="success_action_redirect"
Content-Type: application/octet-stream

https://ian.test.instructure.com/api/v1/files/30652543/create_success?uuid=&lt;opaque_string&gt;
--7b12bf345d0744b6b7e66c7890214311
Content-Disposition: form-data; name="Signature"; filename="Signature"
Content-Type: application/octet-stream

&lt;opaque_string&gt;
--7b12bf345d0744b6b7e66c7890214311
Content-Disposition: form-data; name="Filename"; filename="Filename"
Content-Type: application/octet-stream


--7b12bf345d0744b6b7e66c7890214311
Content-Disposition: form-data; name="acl"; filename="acl"
Content-Type: application/octet-stream

private
--7b12bf345d0744b6b7e66c7890214311
Content-Disposition: form-data; name="Policy"; filename="Policy"
Content-Type: application/octet-stream

&lt;opaque_string&gt;
--7b12bf345d0744b6b7e66c7890214311
Content-Disposition: form-data; name="key"; filename="key"
Content-Type: application/octet-stream

account_95298/attachments/30652543/log.txt
--7b12bf345d0744b6b7e66c7890214311
Content-Disposition: form-data; name="AWSAccessKeyId"; filename="AWSAccessKeyId"
Content-Type: application/octet-stream

&lt;opaque_string&gt;
--7b12bf345d0744b6b7e66c7890214311
Content-Disposition: form-data; name="file"; filename="log.txt"
Content-Type: text/plain

some
data

--7b12bf345d0744b6b7e66c7890214311--
</snippet></ROW><ROW><id>15504711</id><snippet>requests</snippet></ROW><ROW><id>15504711</id><snippet>@filename</snippet></ROW><ROW><id>15504711</id><snippet> 'file': open('log.txt', 'rb')
</snippet></ROW><ROW><id>15504711</id><snippet>content-type</snippet></ROW><ROW><id>15504711</id><snippet>'Content-Type': ..</snippet></ROW><ROW><id>15504711</id><snippet>r.text</snippet></ROW><ROW><id>15504760</id><snippet>(x,y)</snippet></ROW><ROW><id>15504760</id><snippet>s</snippet></ROW><ROW><id>15504760</id><snippet>c</snippet></ROW><ROW><id>15504760</id><snippet>s</snippet></ROW><ROW><id>15504760</id><snippet>c</snippet></ROW><ROW><id>15504760</id><snippet>import matplotlib.pyplot as plt
import collections
import numpy as np

data = [tuple(pair)
        for pair in np.random.uniform(5, size=(20,2))
        for c in range(np.random.random_integers(50))]
count = collections.Counter(data)

points = count.keys()
x, y = zip(*points)
sizes = np.array(count.values())**2
plt.scatter(x, y, s=sizes, marker='o', c=sizes)
plt.show()
</snippet></ROW><ROW><id>15504948</id><snippet>LH.tostring</snippet></ROW><ROW><id>15504948</id><snippet>In [34]: import lxml.etree as ET

In [35]: import lxml.html as LH

In [36]: LH.tostring(ET.fromstring('&lt;rt&gt;&lt;a&gt;&lt;/a&gt;&lt;CapName&gt;asd&lt;/CapName&gt;&lt;/rt&gt;'))
Out[36]: '&lt;rt&gt;&lt;a&gt;&lt;/a&gt;&lt;CapName&gt;asd&lt;/CapName&gt;&lt;/rt&gt;'
</snippet></ROW><ROW><id>15505451</id><snippet>difflib.SequencMatcher.find_longest_match</snippet></ROW><ROW><id>15505465</id><snippet>row.remove(i)</snippet></ROW><ROW><id>15505465</id><snippet>row.remove(i)</snippet></ROW><ROW><id>15505558</id><snippet>argparse.HelpFormatter</snippet></ROW><ROW><id>15505558</id><snippet>class CustomHelpFormatter(argparse.HelpFormatter):
    def _iter_indented_subactions(self, action):
        try:
            get_subactions = action._get_subactions
        except AttributeError:
            pass
        else:
            self._indent()
            if isinstance(action, argparse._SubParsersAction):
                for subaction in sorted(get_subactions(), key=lambda x: x.dest):
                    yield subaction
            else:
                for subaction in get_subactions():
                    yield subaction
            self._dedent()
</snippet></ROW><ROW><id>15505618</id><snippet>install: "sudo pip install -r requirements.txt"
</snippet></ROW><ROW><id>15505618</id><snippet>install: "pip install -r requirements.txt"
</snippet></ROW><ROW><id>15505618</id><snippet>sudo pip install -r requirements.txt</snippet></ROW><ROW><id>15505618</id><snippet>sudo pip install</snippet></ROW><ROW><id>15505648</id><snippet>def bool2int(x):
    y = 0
    for i,j in enumerate(x):
        y += j&lt;&lt;i
    return y

In [20]: a
Out[20]: 
array([[1, 1, 0, 0],
       [0, 1, 0, 0],
       [0, 1, 1, 1],
       [1, 1, 1, 1]])

In [21]: [bool2int(x[::-1]) for x in a]
Out[21]: [12, 4, 7, 15]
</snippet></ROW><ROW><id>15505747</id><snippet>"(\W|\w|\s)*"</snippet></ROW><ROW><id>15505747</id><snippet>".*"</snippet></ROW><ROW><id>15505770</id><snippet>img[i, j]</snippet></ROW><ROW><id>15505770</id><snippet>(B, G, R)</snippet></ROW><ROW><id>15505770</id><snippet>i, j.</snippet></ROW><ROW><id>15505955</id><snippet>import os
parent_folder_path = '.'
canned_insert = [
    '.DEF' + os.linesep,
    '..DRIFTSMERKING T26' + os.linesep,
    '..SPENNING T16' + os.linesep]
canned_insert_buf = ''.join(canned_insert)
for eachFile in os.listdir(parent_folder_path):
    if eachFile.endswith('.sos'):
        newfilePath = os.path.join(parent_folder_path, eachFile)
        lines = open(newfilePath, 'r').readlines()
        with open(newfilePath, 'w') as f:
            for i, line in enumerate(lines):
                if line.strip() == '...KOORDSYS -1':
                    f.write('...KOORDSYS 22' + os.linesep)
                else:
                    f.write(line)
                    if line.startswith('..DATO') and lines[i+1:i+4] != canned_insert:
                        f.write(canned_insert_buf)
</snippet></ROW><ROW><id>15506251</id><snippet>.seek(0)</snippet></ROW><ROW><id>15506251</id><snippet>f=input_file
f.seek(0)
</snippet></ROW><ROW><id>15506251</id><snippet>f.tell()</snippet></ROW><ROW><id>15506251</id><snippet>f.seek(80, 1)  # relative seek, you can use `os.SEEK_CUR` as well.
</snippet></ROW><ROW><id>15506456</id><snippet>re.sub(r'/images/stories/([\w%]+\.(?:jpg|png|gif))', r'{{media url="wysiwyg/\1"}}', content)
</snippet></ROW><ROW><id>15506456</id><snippet>(...)</snippet></ROW><ROW><id>15506456</id><snippet>(?:...)</snippet></ROW><ROW><id>15506456</id><snippet>&gt;&gt;&gt; re.sub(r'/images/stories/([\w%]+\.(?:jpg|png|gif))', r'{{media url="wysiwyg/\1"}}', content)
'&lt;img width="580" height="183" src="{{media url="wysiwyg/acidalkalinetable.jpg"}}" alt="acid alkaline table" title="Body pH Balance"&gt;'
</snippet></ROW><ROW><id>15506456</id><snippet>\1</snippet></ROW><ROW><id>15506456</id><snippet>re.sub()</snippet></ROW><ROW><id>15506456</id><snippet>re.sub()</snippet></ROW><ROW><id>15506456</id><snippet>/images/stories/..</snippet></ROW><ROW><id>15506456</id><snippet>{{media url="wisywig/.."}}</snippet></ROW><ROW><id>15506550</id><snippet>O(n)</snippet></ROW><ROW><id>15506550</id><snippet>def fn(s):
  order = []
  counts = {}
  for x in s:
    if x in counts:
      counts[x] += 1
    else:
      counts[x] = 1 
      order.append(x)
  for x in order:
    if counts[x] == 1:
      return x
  return None
</snippet></ROW><ROW><id>15506550</id><snippet>counts</snippet></ROW><ROW><id>15506550</id><snippet>1</snippet></ROW><ROW><id>15506550</id><snippet>order</snippet></ROW><ROW><id>15506550</id><snippet>counts</snippet></ROW><ROW><id>15506550</id><snippet>order</snippet></ROW><ROW><id>15506550</id><snippet>1</snippet></ROW><ROW><id>15506550</id><snippet>counts</snippet></ROW><ROW><id>15506737</id><snippet>return (Omegahot*numpy.power(Frequency,Beta))*((2*h*numpy.power(Frequency,3)/(C**2)))*(1/(numpy.exp(h*Frequency/(k*Thot))-1)) + (Omegacold*numpy.power(Frequency,Beta)*((2*h*numpy.power(Frequency,3)/(C**2)))*(1/(numpy.exp(h*Frequency/(k*Tcold))-1)))
</snippet></ROW><ROW><id>15506737</id><snippet>temp1 = Omegahot * numpy.power(Frequency, Beta)
temp2 = 2 * h * numpy.power(Frequency, 3) / (C ** 2)
temp3 = 1 / (numpy.exp(h * Frequency / (k * Thot)) - 1)
temp4 = Omegacold * numpy.power(Frequency, Beta) *
temp5 = 1 / (numpy.exp(h * Frequency / (k * Tcold)) - 1)
return (temp1 * temp2 * temp3) + (temp4 * temp2 * temp6)
</snippet></ROW><ROW><id>15506737</id><snippet>temp2</snippet></ROW><ROW><id>15507382</id><snippet>engine = create_engine('postgresql://me@localhost/mydb',
                   pool_size=20, max_overflow=0)
</snippet></ROW><ROW><id>15507456</id><snippet> from datetime import datetime, timedelta

 RecentPosts(ModelResource):
 class Meta:
      queryset= Post.objects.all()
      resource_name = 'recent-posts'
      fields = ['id','postTime']
      authentication = BasicAuthentication()
      authorization =DjangoAuthorization()
      serializer = Serializer(formats=['json'])
      include_resource_uri = False
      filtering = {
                        'postTime': ALL,
                        'description': ALL,
      }
 get_object_list(self, request):
      return super(RecentPosts, self).get_object_list.filter(postTime__range=(datetime.now() - timedelta(days=3), datetime.now()))
</snippet></ROW><ROW><id>15507621</id><snippet>factFactors</snippet></ROW><ROW><id>15507621</id><snippet>x = factFactors(100)                                       
print list(x), reduce(op.mul, [p**e for p, e in x], 1)==math.factorial(100)
</snippet></ROW><ROW><id>15507621</id><snippet>list</snippet></ROW><ROW><id>15507621</id><snippet>reduce</snippet></ROW><ROW><id>15507621</id><snippet>x = list(factFactors(100))</snippet></ROW><ROW><id>15507621</id><snippet>result</snippet></ROW><ROW><id>15507621</id><snippet>results</snippet></ROW><ROW><id>15507621</id><snippet>~/coding$ python2.7 factbug4.py
factbug4.py:31: RuntimeWarning: overflow encountered in long_scalars
  print x, reduce(lambda a, b: a*b, [p**e for p, e in x], 1)==math.factorial(100)
[(2, 97), (3, 48), (5, 24), (7, 16), (11, 9), (13, 7), (17, 5), (19, 5), (23, 4), (29, 3), (31, 3), (37, 2), (41, 2), (43, 2), (47, 2), (53, 1), (59, 1), (61, 1), (67, 1), (71, 1), (73, 1), (79, 1), (83, 1), (89, 1), (97, 1)]
Traceback (most recent call last):
  File "factbug4.py", line 31, in &lt;module&gt;
    print x, reduce(lambda a, b: a*b, [p**e for p, e in x], 1)==math.factorial(100)
  File "factbug4.py", line 31, in &lt;lambda&gt;
    print x, reduce(lambda a, b: a*b, [p**e for p, e in x], 1)==math.factorial(100)
TypeError: unsupported operand type(s) for *: 'long' and 'numpy.int32'
</snippet></ROW><ROW><id>15507621</id><snippet>primes</snippet></ROW><ROW><id>15507621</id><snippet>&gt;&gt;&gt; primes(10)
[2, 3, 5, 7]
&gt;&gt;&gt; map(type, primes(10))
[&lt;type 'int'&gt;, &lt;type 'numpy.int32'&gt;, &lt;type 'numpy.int32'&gt;, &lt;type 'numpy.int32'&gt;]
</snippet></ROW><ROW><id>15507621</id><snippet>p</snippet></ROW><ROW><id>15507621</id><snippet>e</snippet></ROW><ROW><id>15507621</id><snippet>int</snippet></ROW><ROW><id>15507621</id><snippet>print x, reduce(lambda a, b: a*b, [int(p)**int(e) for p, e in x], 1)==math.factorial(100)
</snippet></ROW><ROW><id>15507621</id><snippet>[(2, 97), (3, 48), (5, 24), (7, 16), (11, 9), (13, 7), 
(17, 5), (19, 5), (23, 4), (29, 3), (31, 3), (37, 2), 
(41, 2), (43, 2), (47, 2), (53, 1), (59, 1), (61, 1), 
(67, 1), (71, 1), (73, 1), (79, 1), (83, 1), (89, 1), (97, 1)] True
</snippet></ROW><ROW><id>15507621</id><snippet>numpy</snippet></ROW><ROW><id>15507621</id><snippet>object</snippet></ROW><ROW><id>15507621</id><snippet>&gt;&gt;&gt; np.arange(10,dtype=object)
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=object)
</snippet></ROW><ROW><id>15507621</id><snippet>numpy</snippet></ROW><ROW><id>15507810</id><snippet>item['a'] = x
item['_junk'] = {}
item['_junk']['b'] = y
item['_junk']['c'] = z
</snippet></ROW><ROW><id>15508352</id><snippet>note</snippet></ROW><ROW><id>15508352</id><snippet>&lt;div class="notes"&gt;
    {% for note in notes %}
        &lt;p&gt;&lt;strong&gt;{{ note.name }}&lt;/strong&gt;&lt;/p&gt;
        &lt;p&gt;{{ note.body }}&lt;/p&gt;
    {% endfor %}
&lt;/div&gt;
</snippet></ROW><ROW><id>15508550</id><snippet>&gt;&gt;&gt; elements=[['1', '1', '2'], ['99', '2', '3'],['360', '10', '11']]
&gt;&gt;&gt; a = np.array(elements,dtype=int)
&gt;&gt;&gt; a
array([[  1,   1,   2],
       [ 99,   2,   3],
       [360,  10,  11]])
&gt;&gt;&gt; a.max(axis=0)
array([360,  10,  11])
&gt;&gt;&gt; a.max(axis=0)[0]
360
</snippet></ROW><ROW><id>15508550</id><snippet>&gt;&gt;&gt; a[:,0]
array([  1,  99, 360])
&gt;&gt;&gt; a[:,0].max()
360
</snippet></ROW><ROW><id>15508586</id><snippet>Scrollbar</snippet></ROW><ROW><id>15508586</id><snippet>xscrollcommand</snippet></ROW><ROW><id>15508586</id><snippet>yscrollcommand</snippet></ROW><ROW><id>15508586</id><snippet>scrollregion</snippet></ROW><ROW><id>15508586</id><snippet>Canvas</snippet></ROW><ROW><id>15508586</id><snippet>from Tkinter import *

class ScrollableCanvas(Canvas):
    def __init__(self, master, *args, **options):
        self.frame = Frame(master)
        Canvas.__init__(self, self.frame, *args, **options)
        self.xscrollbar = Scrollbar(self.frame, command=self.xview, orient=HORIZONTAL)
        self.yscrollbar = Scrollbar(self.frame, command=self.yview)
        self.config(xscrollcommand=self.xscrollbar.set, yscrollcommand=self.yscrollbar.set)
    def create_line(self, *args, **options):
        Canvas.create_line(self, args, **options)
        self._resize(*args)
    def _resize(self, *args):
        maxwidth = max(args[0], args[2], int(self['width']))
        maxheight = max(args[1], args[3], int(self['height']))
        self.config(scrollregion=(0, 0, maxwidth, maxheight))
    def grid(self, *args, **options):
        self.frame.grid(*args, **options)
        Canvas.grid(self, row=0, column=0)
        self.xscrollbar.grid(row=1, column=0, sticky=E+W)
        self.yscrollbar.grid(row=0, column=1, sticky=N+S)
</snippet></ROW><ROW><id>15508664</id><snippet>package/__init__.py</snippet></ROW><ROW><id>15508664</id><snippet>from .foo import bar
</snippet></ROW><ROW><id>15508664</id><snippet>package/foo.py</snippet></ROW><ROW><id>15508664</id><snippet>bar=0
</snippet></ROW><ROW><id>15508664</id><snippet>app1.py</snippet></ROW><ROW><id>15508664</id><snippet>import package
print(package.bar)
</snippet></ROW><ROW><id>15508664</id><snippet>from package import bar
print(bar)
</snippet></ROW><ROW><id>15508664</id><snippet>0</snippet></ROW><ROW><id>15508664</id><snippet>from .foo import bar</snippet></ROW><ROW><id>15508664</id><snippet>from foo import bar</snippet></ROW><ROW><id>15508664</id><snippet>bar.py</snippet></ROW><ROW><id>15508664</id><snippet>bar</snippet></ROW><ROW><id>15508664</id><snippet>0</snippet></ROW><ROW><id>15508664</id><snippet>__all__</snippet></ROW><ROW><id>15508664</id><snippet>from foo import …</snippet></ROW><ROW><id>15508664</id><snippet>from foo import *</snippet></ROW><ROW><id>15508664</id><snippet>.foo</snippet></ROW><ROW><id>15508664</id><snippet>from .foo import bar</snippet></ROW><ROW><id>15508664</id><snippet>foo</snippet></ROW><ROW><id>15508664</id><snippet>bar</snippet></ROW><ROW><id>15508664</id><snippet>foo</snippet></ROW><ROW><id>15508664</id><snippet>bar</snippet></ROW><ROW><id>15508664</id><snippet>import</snippet></ROW><ROW><id>15508664</id><snippet>from foo import bar</snippet></ROW><ROW><id>15508664</id><snippet>foo</snippet></ROW><ROW><id>15508664</id><snippet>bar</snippet></ROW><ROW><id>15508926</id><snippet>list.sort()</snippet></ROW><ROW><id>15508926</id><snippet>None</snippet></ROW><ROW><id>15508926</id><snippet>array = array.sort()
</snippet></ROW><ROW><id>15508926</id><snippet>array.sort()
</snippet></ROW><ROW><id>15508926</id><snippet>sorted(array)</snippet></ROW><ROW><id>15508981</id><snippet>if __name__ == '__main__':
    # put code here to be run when this file is executed as a script
</snippet></ROW><ROW><id>15508981</id><snippet>import sys

def sum(a,b=5):
    "Adds two numbers"
    a = int(a)
    b = int(b)
    return a+b

sum.version = "1.0"
sum.author = "Prasad"

if __name__ == '__main__':
    k = sum(1,2)
    print(k)

    print("Function attributes: - ")
    print("Documentation string:",sum.__doc__)
    print("Function name:",sum.__name__)
    print("Default values:",sum.__defaults__)
    print("Code object for the function is:",sum.__code__)
    print("Dictionary of the function is:",sum.__dict__)

    #writing the same information to a file

    f = open('test.txt','w')
    f.write(sum.__doc__)
    f.close()
    print("\n\nthe file is successfully written with the documentation string")
</snippet></ROW><ROW><id>15509052</id><snippet>print "Your password {} is too weak!".format(password)
</snippet></ROW><ROW><id>15509052</id><snippet>.format()</snippet></ROW><ROW><id>15509052</id><snippet>print "Your password", password, "is too weak!"
print "Your password %s is too weak!" % password
import string
template = string.Template("Your password ${password} is too weak!")
print template.substitute(password=password)
</snippet></ROW><ROW><id>15509225</id><snippet>User</snippet></ROW><ROW><id>15509225</id><snippet>EndpointsModel</snippet></ROW><ROW><id>15509225</id><snippet>from google.appengine.ext import ndb
from endpoints_proto_datastore.ndb import EndpointsModel

class User(EndpointsModel):
    email = ndb.StringProperty()
    ...
</snippet></ROW><ROW><id>15509225</id><snippet>email</snippet></ROW><ROW><id>15509225</id><snippet>email</snippet></ROW><ROW><id>15509225</id><snippet>from google.appengine.ext import endpoints

@endpoints.api(...)
class SomeClass(...):

    @User.method(request_fields=('email',),
                 path='get_by_mail/{email}',
                 http_method='GET', name='user.get_by_email')
    def get_by_email(self, user):
        if not user.from_datastore:
            raise endpoints.NotFoundException('User not found.')
        return user
</snippet></ROW><ROW><id>15509225</id><snippet>from endpoints_proto_datastore.ndb import EndpointsAliasProperty

class User(EndpointsModel):
    # remove email here, as it will be an alias property 
    ...

    def EmailSet(self, value):
        # Validate the value any way you like
        self.UpdateFromKey(ndb.Key(User, value))

    @EndpointsAliasProperty(setter=IdSet, required=True)
    def email(self):
        if self.key is not None: return self.key.string_id()
</snippet></ROW><ROW><id>15509225</id><snippet>    @User.method(request_fields=('email',),
                 path='get_by_mail/{email}',
                 http_method='GET', name='user.get_by_email')
    def get_by_email(self, user):
        query = User.query(User.email == user.email)
        # We fetch 2 to make sure we have
        matched_users = query.fetch(2)
        if len(matched_users == 0):
            raise endpoints.NotFoundException('User not found.')
        elif len(matched_users == 2):
            raise endpoints.BadRequestException('User not unique.')
        else:
            return matched_users[0]
</snippet></ROW><ROW><id>15509390</id><snippet>email</snippet></ROW><ROW><id>15509390</id><snippet>phone_number</snippet></ROW><ROW><id>15509390</id><snippet>reg_id</snippet></ROW><ROW><id>15509390</id><snippet>created</snippet></ROW><ROW><id>15509390</id><snippet>id</snippet></ROW><ROW><id>15509390</id><snippet>class User(EndpointsModel):
    _message_fields_schema = ('id', 'email', 'phone_number', 
                              'reg_id', 'created')
    email = ndb.StringProperty(required=True)
    ...
</snippet></ROW><ROW><id>15509390</id><snippet>insert method</snippet></ROW><ROW><id>15509390</id><snippet>    @User.method(response_fields=('id', 'email', 'phone_number', 
                                  'reg_id', 'created'),
                 name='user.insert', path='user')
    def insert(self, user):
        user.put()
        return user
</snippet></ROW><ROW><id>15509390</id><snippet>get</snippet></ROW><ROW><id>15509390</id><snippet>if not User.from_datastore:</snippet></ROW><ROW><id>15509390</id><snippet>User.from_datastore</snippet></ROW><ROW><id>15509390</id><snippet>User</snippet></ROW><ROW><id>15509390</id><snippet>user.from_datastore</snippet></ROW><ROW><id>15509467</id><snippet>from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup(html) ## feed your html page to beautifulsoup

pleaseFind = soup.find(text="ASD")

whatINeed = pleaseFind.findNext('td')

print whatINeed.text
</snippet></ROW><ROW><id>15509560</id><snippet>file=open("sir_try.txt","r")
list_line=file.readlines()
file.close()
all_text=""

dic={}
sent="ensg"
temp_list=[]
for line in list_line:
    all_text=all_text+line
    name= line.rsplit()[0].strip()
    score=line.rsplit()[1].strip()
    dic[name]=score
for i in dic.keys():
    if sent in i:
        temp_list.append(dic[i])
hiegh_score=max(temp_list)

def check(index):
    reverse_text=all_text[index+1::-1]
    index2=reverse_text.find("\n")
    if sent==reverse_text[:index2+1][::-1][1:len(sent)+1]:
        return False
    else:
        return True

list_to_min=dic.values()
for i in temp_list:
    if i!=hiegh_score:
        index=all_text.find(str(i))
        while check(index):
            index=all_text.find(str(i),index+len(str(i)))
        all_text=all_text[0:index]+all_text[index+len(str(i)):]
        list_to_min.remove(str(i))
#write all text to "sir_try.txt"
file2=open("sir_try.txt","w")
file2.write(all_text)
file2.close()
min_score= min(list_to_min)
for j in dic.keys():
    if min_score==dic[j]:
        print "min score is :"+str(min_score)+" for person "+j
</snippet></ROW><ROW><id>15509560</id><snippet>gene name        utr length
ali                     12
ali87                   30
ensbta                  24
ensg1                   12
ensg24                  30
ensg37                  65
enscat                  22
ensm                    30
</snippet></ROW><ROW><id>15509654</id><snippet>strftime(format)</snippet></ROW><ROW><id>15509654</id><snippet>&gt;&gt;&gt; datetime.datetime.now().strftime('%a')
   'Wed'
</snippet></ROW><ROW><id>15509693</id><snippet>In [1]: import datetime

In [2]: d = datetime.date.today()

In [3]: type(d.month)
Out[3]: &lt;type 'int'&gt;

In [4]: type(d.day)
Out[4]: &lt;type 'int'&gt;
</snippet></ROW><ROW><id>15509693</id><snippet>In [5]: '{:02d}'.format(d.month)
Out[5]: '03'

In [6]: '%02d' % d.month
Out[6]: '03'

In [7]: d.strftime('%m')
Out[7]: '03'
</snippet></ROW><ROW><id>15509743</id><snippet>datapoints = [{'a': 1, 'b': 2, 'c': 6},
              {'a': 2, 'd': 8, 'p': 10},
              {'c': 9, 'd': 1, 'z': 12}]

# get all the keys ever seen
keys = sorted(set.union(*(set(dp) for dp in datapoints)))

with open("outfile.txt", "wb") as fp:
    # write the header
    fp.write("{}\n".format(' '.join([" "] + keys)))
    # loop over each point, getting the values in order (or 0 if they're absent)
    for i, datapoint in enumerate(datapoints):
        out = '{} {}\n'.format(i, ' '.join(str(datapoint.get(k, 0)) for k in keys))
        fp.write(out)
</snippet></ROW><ROW><id>15509743</id><snippet>  a b c d p z
0 1 2 6 0 0 0
1 2 0 0 8 10 0
2 0 0 9 1 0 12
</snippet></ROW><ROW><id>15509743</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; df = pd.DataFrame(datapoints).fillna(0).astype(int)
&gt;&gt;&gt; df
   a  b  c  d   p   z
0  1  2  6  0   0   0
1  2  0  0  8  10   0
2  0  0  9  1   0  12
&gt;&gt;&gt; df.to_csv("outfile_pd.csv", sep=" ")
&gt;&gt;&gt; !cat outfile_pd.csv
 a b c d p z
0 1 2 6 0 0 0
1 2 0 0 8 10 0
2 0 0 9 1 0 12
</snippet></ROW><ROW><id>15509805</id><snippet>&gt;&gt;&gt; def AbbreviateAuthors(names):
...     return ''.join(i.split()[-1][:3] for i in names.split(' and '))
&gt;&gt;&gt; AbbreviateAuthors('John Smith and Paul Anthony Doe and Chris Burns')
34: 'SmiDoeBur'
&gt;&gt;&gt; AbbreviateAuthors('John Smith and Paul Anthony Doe')
35: 'SmiDoe'
&gt;&gt;&gt; AbbreviateAuthors('John Smith')
36: 'Smi'
&gt;&gt;&gt; AbbreviateAuthors('Smith')
37: 'Smi'
&gt;&gt;&gt; AbbreviateAuthors('Sm')
38: 'Sm'
</snippet></ROW><ROW><id>15509868</id><snippet>url_mappings = (
    '/', 'index.index'
)
</snippet></ROW><ROW><id>15509868</id><snippet>index</snippet></ROW><ROW><id>15509868</id><snippet>from index import index
</snippet></ROW><ROW><id>15509868</id><snippet>module_name.class_name</snippet></ROW><ROW><id>15509868</id><snippet>import class_name from module_name</snippet></ROW><ROW><id>15509868</id><snippet>class_name</snippet></ROW><ROW><id>15509897</id><snippet>import operator
def insertionSort(L, reverse=False):       
    lt = operator.gt if reverse else operator.lt        
    for j in xrange(1,len(L)):
        valToInsert = L[j]
        i = j-1
        while 0 &lt;= i and lt(valToInsert, L[i]):
            L[i+1] = L[i]
            i -= 1
        L[i+1] = valToInsert
    return L
</snippet></ROW><ROW><id>15510458</id><snippet>import ebay</snippet></ROW><ROW><id>15510458</id><snippet>__init__.py</snippet></ROW><ROW><id>15510458</id><snippet>spiders</snippet></ROW><ROW><id>15510458</id><snippet>spiders</snippet></ROW><ROW><id>15510458</id><snippet>import os
import sys
sys.path.append(os.getcwd()+'/spiders')
print sys.path
from spiders import ebay
</snippet></ROW><ROW><id>15510512</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>15510512</id><snippet>PC_bos_7659Ae_1450sp_rev_2_1_nc_woof</snippet></ROW><ROW><id>15510512</id><snippet>inputtext = """XY_efgh_1234_0040_rev_2_1_NC_asdf
XY_abcd_1122Ae_1150_rev2_1_NC
XY_efgh_0124e_50_NC
asdf_1980_2234a_2
XY_abcd_5098_2270_2_1_NC
PC_bos_7659Ae_1450sp_rev_2_1_NC_GRAPH
PC_bos_7659Ae_1450sp_rev_2_1_nc_woof"""
print inputtext
</snippet></ROW><ROW><id>15510512</id><snippet>import re

print """\n----------------------------------------
WANTED
('1234',   '0040_rev_2_1')
('1122Ae', '1150_rev2_1')
('0124e',  '50')
('1980',   '2234a_2')
('5098',   '2270_2_1')
('7659Ae', '1450sp_rev_2_1')"""
print '----------- eyquem ----------------------'
ri = re.compile('^\D+'
                '(\d{4}[a-zA-Z]{0,3})'
                '[_-]+'
                '(.+?)'
                '(?:[_-]+NC.*)?$',
                re.MULTILINE)

for match in ri.findall(inputtext):
    print match

print '----------- Martijn ----------------------'
ro     = re.compile(
              r"""
              ([0-9]{4}
              [A-Z]{0,3})
              [_-]{1,3}
              ([0-9]{2,4}
              [0-9A-Z_-]{0,16}?)
              (?:[-_]NC)?
              """,
              re.IGNORECASE | re.VERBOSE)

for match in ro.findall(inputtext):
    print match
</snippet></ROW><ROW><id>15510512</id><snippet>----------------------------------------
WANTED
('1234',   '0040_rev_2_1')
('1122Ae', '1150_rev2_1')
('0124e',  '50')
('1980',   '2234a_2')
('5098',   '2270_2_1')
('7659Ae', '1450sp_rev_2_1')
----------- eyquem ----------------------
('1234', '0040_rev_2_1')
('1122Ae', '1150_rev2_1')
('0124e', '50')
('1980', '2234a_2')
('5098', '2270_2_1')
('7659Ae', '1450sp_rev_2_1')
('7659Ae', '1450sp_rev_2_1_nc_woof')
----------- Martijn ----------------------
('1234', '0040')
('1122Ae', '1150')
('0124e', '50')
('1980', '2234')
('5098', '2270')
('7659Ae', '1450')
('7659Ae', '1450')
</snippet></ROW><ROW><id>15510512</id><snippet>for s in inputtext.splitlines(True):
    print ri.match(s).groups()
</snippet></ROW><ROW><id>15510512</id><snippet>import re

inputtext = """XY_efgh_1234_0040_rev_2_1_NC_asdf
XY_abcd_1122Ae_1150_rev2_1_NC
XY_efgh_0124e_50_NC
XY_efgh_0228e_66-__NC
asdf_1980_2234a_2   
asdf_2999_133a
XY_abcd_5098_2270_2_1_NC
XY_abcd_6099_33370_2_1_NC
XY_abcd_6099_3370abcd_2_1_NC
PC_bos_7659Ae_1450sp_rev_2_1_NC_GRAPH
PC_bos_7659Ae_1450sp_rev_2_1___NC_GRAPH
PC_bos_7659Ae_1450sp_rev_2_1_nc_woof_NC
PC_bos_7659Ae_1450sp_rev_2_1_anc_woof_NC
PC_bos_7659Ae_1450sp_rev_2_1_abNC_woof_NC"""

print '----------- Martijn 2 ------------'
ruu     = re.compile(r"""
              ( [0-9]{4} [A-Z]{0,3} )
              [_-]{1,3}
              ( [0-9]{2,4} (?:[0-9A-Z_-](?!NC))* )
              """, re.IGNORECASE | re.VERBOSE)
for match in ruu.findall(inputtext):
    print match
print '----------- eyquem 2 ------------'
rii = re.compile('[_-]'
                '(\d{4}[A-Z]{0,3})'
                '[_-]{1,3}'
                '('
                  '(?=\d{2,4}[A-Z]{0,3}(?![\dA-Z]))'
                  '(?:[0-9A-Z_-]+?)'
                 ')'
                '(?:[-_]+NC.*)?'
                '(?![0-9A-Z_-])',
                re.IGNORECASE)
for m in rii.findall(inputtext):
    print m
</snippet></ROW><ROW><id>15510512</id><snippet>----------- Martijn 2 ------------
('1234', '0040_rev_2_1')
('1122Ae', '1150_rev2_1')
('0124e', '50')
('0228e', '66-_')
('1980', '2234a_2')
('2999', '133a')
('5098', '2270_2_1')
('6099', '33370_2_1')
('6099', '3370abcd_2_1')
('7659Ae', '1450sp_rev_2_1')
('7659Ae', '1450sp_rev_2_1__')
('7659Ae', '1450sp_rev_2_1')
('7659Ae', '1450sp_rev_2_1_')
('7659Ae', '1450sp_rev_2_1_a')
----------- eyquem 2 ------------
('1234', '0040_rev_2_1')
('1122Ae', '1150_rev2_1')
('0124e', '50')
('0228e', '66')
('1980', '2234a_2')
('2999', '133a')
('5098', '2270_2_1')
('7659Ae', '1450sp_rev_2_1')
('7659Ae', '1450sp_rev_2_1')
('7659Ae', '1450sp_rev_2_1')
('7659Ae', '1450sp_rev_2_1_anc_woof')
('7659Ae', '1450sp_rev_2_1_abNC_woof')
</snippet></ROW><ROW><id>15510520</id><snippet>guesses_left</snippet></ROW><ROW><id>15510520</id><snippet>guesses_left = MAX_GUESSES - guesses</snippet></ROW><ROW><id>15510549</id><snippet>if next in thegoodshit.values():   
</snippet></ROW><ROW><id>15510549</id><snippet>set</snippet></ROW><ROW><id>15510549</id><snippet>    while i &lt; (len(columnvalues) - 1):                                             
        next = columnenum[i+1]                                              
        if columnvalues[i] == next:                                                
            i += 1                                                          
        else:                                                               
            if next in searchable_data:                                
                i += 1                                                      
                continue                                                    
            else:                                                           
                finaldata[i+1]= next
                searchable_data.add(next)                 
                i += 1                                                      
    else:                                                                   
        return finaldata 
</snippet></ROW><ROW><id>15510552</id><snippet>.py</snippet></ROW><ROW><id>15510552</id><snippet>'epf_eligible': fields.boolean("eligible for EPF"),
'epf_number': fields.integer("EPF Number", size=10),
</snippet></ROW><ROW><id>15510552</id><snippet>..._view.xml</snippet></ROW><ROW><id>15510552</id><snippet>&lt;field name="epf_eligible"/&gt;
&lt;field name="epf_number" attrs="{'invisible':[('epf_eligible','=',True)]}"/&gt;
</snippet></ROW><ROW><id>15510552</id><snippet>EPF Number</snippet></ROW><ROW><id>15510552</id><snippet>eligible for EPF</snippet></ROW><ROW><id>15510552</id><snippet>True</snippet></ROW><ROW><id>15510689</id><snippet>(a,b) = (20,10) if x() else (10,20)
</snippet></ROW><ROW><id>15510911</id><snippet>[1242248375] SERVICE ALERT: myhostname.com;DNS: Recursive;CRITICAL
</snippet></ROW><ROW><id>15510911</id><snippet>regexp = re.compile(r'\[(\d+)\] SERVICE NOTIFICATION: (.+)')
</snippet></ROW><ROW><id>15510911</id><snippet>import re
regexp = re.compile(r'\[(\d{2}:\d{2}:\d{2}\.xxx\d{3})\][\s]+status[\s]+XYZ[\s]+ID:([0-9A-Zx]+)(.+)')

f = open("log.txt", "r")
for line in f.readlines():
    print line
    m = re.match(regexp, line)
    #print m
    if m:
        print m.groups()
</snippet></ROW><ROW><id>15510911</id><snippet>[13:40:19.xxx021] status    XYZ  ID:22P00935xxx -4  3.92     quote:    0.98/   1.02  avg:   -0.98   -0.16

('13:40:19.xxx021', '22P00935xxx', ' -4  3.92     quote:    0.98/   1.02  avg:   -0.98   -0.16')
[13:40:19.xxx024] status    XYZ  ID:22C0099xxx0 -2  26.4     quote:   11.60/  11.85  avg:  -13.20    2.70

('13:40:19.xxx024', '22C0099xxx0', ' -2  26.4     quote:   11.60/  11.85  avg:  -13.20    2.70')
[13:40:19.xxx027] status    XYZ  ID:22P0099xxx0 10  -17.18   quote:    1.86/   1.90  avg:   -1.72    1.42

('13:40:19.xxx027', '22P0099xxx0', ' 10  -17.18   quote:    1.86/   1.90  avg:   -1.72    1.42')
[13:40:19.xxx029] status    XYZ  ID:22C00995xxx 4   -42.5    quote:    8.20/   8.30  avg:  -10.62   -9.70

('13:40:19.xxx029', '22C00995xxx', ' 4   -42.5    quote:    8.20/   8.30  avg:  -10.62   -9.70')
[13:40:19.xxx031] status    XYZ  ID:22P00995xxx 2   9.66     quote:    3.30/   3.40  avg:    4.83   16.26
('13:40:19.xxx031', '22P00995xxx', ' 2   9.66     quote:    3.30/   3.40  avg:    4.83   16.26')
</snippet></ROW><ROW><id>15510911</id><snippet>print "ID is : ", m.groups()[1]
</snippet></ROW><ROW><id>15510911</id><snippet>[13:40:19.xxx021] status    XYZ  ID:22P00935xxx -4  3.92     quote:    0.98/   1.02  avg:   -0.98   -0.16

ID is :  22P00935xxx

[13:40:19.xxx024] status    XYZ  ID:22C0099xxx0 -2  26.4     quote:   11.60/  11.85  avg:  -13.20    2.70

ID is :  22C0099xxx0
</snippet></ROW><ROW><id>15510911</id><snippet>res = {}

f = open("log.txt", "r")
for line in f.readlines():
    print line
    m = re.match(regexp, line)  
    if m:
        print m.groups()
        id = m.groups()[1]
        if id in res:
            #print "added to existing ID"
            res[id].append([m.groups()[0], m.groups()[2]])
        else:
            #print "new ID"
            res[id] = [m.groups()[0], m.groups()[2]]

for id in res:
    print "ID: ", id
    print res[id]
</snippet></ROW><ROW><id>15510918</id><snippet>import re
zip(*[(i.strip() for i in re.split('(\d{4})|\||&gt;', text) if i and i.strip())]*3)
</snippet></ROW><ROW><id>15510918</id><snippet>[('year', 'title', 'medium'),
 ('1962', 'Amazing Fantasy #15', 'comic book'),
 ('1967', 'Spider-Man', 'animation'),
 ('1977', 'The Amazing Spider-Man', 'television'),
 ('1978', 'Questprobe #2 Spider-Man', 'video game'),
 ('2002', 'Spider-Man', 'movie')]
</snippet></ROW><ROW><id>15510919</id><snippet>**kwargs</snippet></ROW><ROW><id>15510919</id><snippet>def add(a, b, c, **kwargs):
    return a + b + c

kwargs = dict(a=1, b=2, c=3, d=4)
print add(**kwargs) 
#prints 6
</snippet></ROW><ROW><id>15511075</id><snippet>Runtime.exec</snippet></ROW><ROW><id>15511135</id><snippet>input()</snippet></ROW><ROW><id>15511135</id><snippet>raw_input()</snippet></ROW><ROW><id>15511135</id><snippet>input()</snippet></ROW><ROW><id>15511135</id><snippet>raw_input()</snippet></ROW><ROW><id>15511135</id><snippet>\</snippet></ROW><ROW><id>15511135</id><snippet>&gt;&gt;&gt; raw_input('Please show me how this works: ')
Please show me how this works: This is \n how it works!
'This is \\n how it works!'
</snippet></ROW><ROW><id>15511135</id><snippet>input()</snippet></ROW><ROW><id>15511135</id><snippet>raw_input()</snippet></ROW><ROW><id>15511135</id><snippet>eval()</snippet></ROW><ROW><id>15511135</id><snippet>&gt;&gt;&gt; input('Please show me how this works: ')
Please show me how this works: This is \n how it works!
'This is \\n how it works!'
</snippet></ROW><ROW><id>15511345</id><snippet>company</snippet></ROW><ROW><id>15511345</id><snippet>Employee</snippet></ROW><ROW><id>15511345</id><snippet>class Employee(models.Model):
    office = models.ForeignKey(Office)
    name = models.CharField(max_length=50)
    mail = models.EmailField(null=True, blank=True)
    def __unicode__(self):
            return self.name
</snippet></ROW><ROW><id>15511345</id><snippet>Office</snippet></ROW><ROW><id>15511345</id><snippet>Company</snippet></ROW><ROW><id>15511345</id><snippet>Employee</snippet></ROW><ROW><id>15511345</id><snippet>Office</snippet></ROW><ROW><id>15511345</id><snippet>employee.office.company</snippet></ROW><ROW><id>15511345</id><snippet>employee_one = Employee.objects.get(pk=1)
company_of_employee_one = employee_one.office.company
</snippet></ROW><ROW><id>15511345</id><snippet>company = Company.objects.get(pk=1)
offices = company.office_set.all()
for office in offices:
    employees = office.employee_set.all()
</snippet></ROW><ROW><id>15511365</id><snippet>.size</snippet></ROW><ROW><id>15511365</id><snippet>.location</snippet></ROW><ROW><id>15511365</id><snippet>dict</snippet></ROW><ROW><id>15511365</id><snippet>driver = webdriver.Firefox()
e = driver.find_element_by_xpath("//someXpath")
location = e.location
size = e.size
print(location)
print(size)
</snippet></ROW><ROW><id>15511365</id><snippet>{'y': 202, 'x': 165}
{'width': 77, 'height': 22}
</snippet></ROW><ROW><id>15511372</id><snippet>random.sample(the_list, 50)
</snippet></ROW><ROW><id>15511428</id><snippet>%</snippet></ROW><ROW><id>15511428</id><snippet>x == (x/y)*y + (x%y)</snippet></ROW><ROW><id>15511540</id><snippet>operator[]</snippet></ROW><ROW><id>15511540</id><snippet>cdef extern from "foo.h":
   cdef cppclass CppFooContainer "FooContainer":
     FooContainer()
     Foo operator[](int)
</snippet></ROW><ROW><id>15511540</id><snippet>cdef extern from "foo.h":
   cdef cppclass CppFooContainer "FooContainer":
     CppFooContainer()
     CppFoo operator[](int)
</snippet></ROW><ROW><id>15511540</id><snippet>FooContainer</snippet></ROW><ROW><id>15511540</id><snippet>Foo</snippet></ROW><ROW><id>15511663</id><snippet>import numpy as np

a = np.random.randint(0, 100, [100,100])
b = a[:, a.sum(axis=0) &gt; 5000]
print b.sum(axis=0)
</snippet></ROW><ROW><id>15511663</id><snippet>array([5359, 5045, 5116, 5512, 5143, 5261, 5209, 5018, 5009, 5025, 5353,
       5149, 5407, 5258, 5148, 5527, 5176, 5173, 5028, 5110, 5406, 5211,
       5287, 5163, 5364, 5623, 5257, 5361, 5528, 5049, 5298, 5280, 5201,
       5099, 5314, 5071, 5318, 5076, 5005, 5032, 5194, 5411, 5329, 5293])
</snippet></ROW><ROW><id>15511740</id><snippet>/Users/me/</snippet></ROW><ROW><id>15511740</id><snippet>cd /Users/me/Desktop/
python3 /Users/me/Desktop/script.py
</snippet></ROW><ROW><id>15511837</id><snippet>x = lambda y, z=None: y if z is None else z
</snippet></ROW><ROW><id>15511859</id><snippet>timedelta()</snippet></ROW><ROW><id>15511859</id><snippet>def getHoursSince(date):
    return int(datetime.timedelta(days=date).total_seconds() // 3600)
</snippet></ROW><ROW><id>15511859</id><snippet>&gt;&gt;&gt; getHoursSince(1)
24
&gt;&gt;&gt; getHoursSince(1.5)
36
&gt;&gt;&gt; getHoursSince(2)
48
&gt;&gt;&gt; getHoursSince(3)
72
</snippet></ROW><ROW><id>15511859</id><snippet>def getHoursSince(date):
    return int(24 * date)
</snippet></ROW><ROW><id>15512107</id><snippet>O(n)</snippet></ROW><ROW><id>15512107</id><snippet>&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; result = []
&gt;&gt;&gt; for d in dicts:
    h = d.copy()
    h.pop('date')
    h = tuple(h.items())
    if h not in seen:
        result.append(d)
        seen.add(h)

&gt;&gt;&gt; pprint(result)
[{'date': '12/04/12', 'element': 'Bla', 'version': 2},
 {'date': '12/04/12', 'element': 'Bla', 'version': 3}]
</snippet></ROW><ROW><id>15512107</id><snippet>h</snippet></ROW><ROW><id>15512107</id><snippet>date</snippet></ROW><ROW><id>15512107</id><snippet>pop</snippet></ROW><ROW><id>15512107</id><snippet>tuple</snippet></ROW><ROW><id>15512107</id><snippet>set</snippet></ROW><ROW><id>15512107</id><snippet>h</snippet></ROW><ROW><id>15512107</id><snippet>result</snippet></ROW><ROW><id>15512107</id><snippet>seen</snippet></ROW><ROW><id>15512107</id><snippet>seen</snippet></ROW><ROW><id>15512107</id><snippet>O(1)</snippet></ROW><ROW><id>15512107</id><snippet>h not in seen</snippet></ROW><ROW><id>15512107</id><snippet>result</snippet></ROW><ROW><id>15512107</id><snippet>h</snippet></ROW><ROW><id>15512163</id><snippet>color.txt</snippet></ROW><ROW><id>15512163</id><snippet>C:\Users\username\Desktop\color.txt</snippet></ROW><ROW><id>15512274</id><snippet>import tesseract
api = tesseract.TessBaseAPI()
api.Init(".","eng",tesseract.OEM_DEFAULT)
api.SetVariable("tessedit_char_whitelist", "0123456789abcdefghijklmnopqrstuvwxyz")
api.SetPageSegMode(tesseract.PSM_AUTO)
</snippet></ROW><ROW><id>15512274</id><snippet>api.SetVariable</snippet></ROW><ROW><id>15512274</id><snippet>TessBaseAPI::SetVariable("tessedit_char_whitelist", "0123456789");
</snippet></ROW><ROW><id>15512274</id><snippet>tessedit_char_whitelist 0123456789 
</snippet></ROW><ROW><id>15512274</id><snippet>tesseract image.tif outputbase nobatch digits 
</snippet></ROW><ROW><id>15512274</id><snippet>tesseract imagename outputbase digits
</snippet></ROW><ROW><id>15512328</id><snippet>import urllib, json
author = 'Youtube_Username'

foundAll = False
ind = 1
videos = []
while not foundAll:
    inp = urllib.urlopen(r'http://gdata.youtube.com/feeds/api/videos?start-index={0}&amp;max-results=50&amp;alt=json&amp;orderby=published&amp;author={1}'.format( ind, author ) )
    try:
        resp = json.load(inp)
        inp.close()
        returnedVideos = resp['feed']['entry']
        for video in returnedVideos:
            videos.append( video ) 

        ind += 50
        print len( videos )
        if ( len( returnedVideos ) &lt; 50 ):
            foundAll = True
    except:
        #catch the case where the number of videos in the channel is a multiple of 50
        print "error"
        foundAll = True

for video in videos:
    print video['title'] # video title
    print video['link'][0]['href'] #url
</snippet></ROW><ROW><id>15512349</id><snippet>import random

def shuffle_list(some_list):
    randomized_list = some_list[:]
    while True:
        random.shuffle(randomized_list)
        for a, b in zip(some_list, randomized_list):
            if a == b:
                break
        else:
            return randomized_list
</snippet></ROW><ROW><id>15512356</id><snippet>cursor = mywidget.getCursor() # or event.getCursor()
pos = cursor.pos()
cursor.setPos((pos[0]+1, pos[1]+1))
</snippet></ROW><ROW><id>15512422</id><snippet>B</snippet></ROW><ROW><id>15512422</id><snippet>B</snippet></ROW><ROW><id>15512422</id><snippet>list</snippet></ROW><ROW><id>15512422</id><snippet>list</snippet></ROW><ROW><id>15512422</id><snippet>def ReverseArray(A):
    B = []
    n = len(A)
    for i in range(0, n-1):
        B[n-i-1] = A[i]
    return (B)
</snippet></ROW><ROW><id>15512422</id><snippet>IndexError</snippet></ROW><ROW><id>15512422</id><snippet>B[n-i-1] = A[i]</snippet></ROW><ROW><id>15512422</id><snippet>B</snippet></ROW><ROW><id>15512422</id><snippet>n</snippet></ROW><ROW><id>15512422</id><snippet>A</snippet></ROW><ROW><id>15512422</id><snippet>A</snippet></ROW><ROW><id>15512422</id><snippet>B = list(A)
</snippet></ROW><ROW><id>15512422</id><snippet>B = [None for _ in A]
</snippet></ROW><ROW><id>15512422</id><snippet>A</snippet></ROW><ROW><id>15512422</id><snippet>n</snippet></ROW><ROW><id>15512422</id><snippet>5</snippet></ROW><ROW><id>15512422</id><snippet>range(0, n-1)</snippet></ROW><ROW><id>15512422</id><snippet>[0, 1, 2, 3]</snippet></ROW><ROW><id>15512422</id><snippet>B[0]</snippet></ROW><ROW><id>15512422</id><snippet>range</snippet></ROW><ROW><id>15512422</id><snippet>stop</snippet></ROW><ROW><id>15512422</id><snippet>range(0, n)</snippet></ROW><ROW><id>15512422</id><snippet>range(n)</snippet></ROW><ROW><id>15512433</id><snippet>object</snippet></ROW><ROW><id>15512433</id><snippet>__init__</snippet></ROW><ROW><id>15512433</id><snippet>object</snippet></ROW><ROW><id>15512433</id><snippet>object</snippet></ROW><ROW><id>15512433</id><snippet>__init__</snippet></ROW><ROW><id>15512433</id><snippet>__init__</snippet></ROW><ROW><id>15512433</id><snippet>super()</snippet></ROW><ROW><id>15512668</id><snippet>os.listdir</snippet></ROW><ROW><id>15512668</id><snippet>for filename in os.listdir(directory):
    with open(filename) as f:
</snippet></ROW><ROW><id>15512668</id><snippet>mmap</snippet></ROW><ROW><id>15512668</id><snippet>str.find</snippet></ROW><ROW><id>15512668</id><snippet>itertools</snippet></ROW><ROW><id>15512668</id><snippet>def parse_file(f):
    paths = []
    found_paths = False
    for line in f:
        line = line.strip()
        if not found_paths:
            if line == 'paths':
                found_paths = True
        else:
            if line.startswith('file path='):
                paths.append(line[len('file path='):])
            else:
                break
    return paths

paths = []
for filename in os.listdir(directory):
    with open(filename) as f:            
        paths.append(parse_file(f))
</snippet></ROW><ROW><id>15512668</id><snippet>break</snippet></ROW><ROW><id>15512668</id><snippet>if line.startswith('file path='):
    paths.append(line[len('file path='):])
else:
    break
</snippet></ROW><ROW><id>15512668</id><snippet>if line.startswith('file path='):
    paths.append(line[len('file path='):])
break
</snippet></ROW><ROW><id>15512668</id><snippet>paths = []
for filename in os.listdir(directory):
    with open(filename) as f:
        paths.append(parse_file(f))
</snippet></ROW><ROW><id>15512668</id><snippet>paths = {}
for filename in os.listdir(directory):
    with open(filename) as f:            
        paths[filename] = parse_file(f)
</snippet></ROW><ROW><id>15512668</id><snippet>None</snippet></ROW><ROW><id>15512668</id><snippet>file path=…</snippet></ROW><ROW><id>15512668</id><snippet>startswith</snippet></ROW><ROW><id>15512668</id><snippet>&lt;file path=</snippet></ROW><ROW><id>15512668</id><snippet>startswith</snippet></ROW><ROW><id>15512668</id><snippet>xml.elementtree</snippet></ROW><ROW><id>15512668</id><snippet>re</snippet></ROW><ROW><id>15512668</id><snippet>r'&lt;file path="(.*?)"/&gt;'</snippet></ROW><ROW><id>15512668</id><snippet>C:\folder\folder</snippet></ROW><ROW><id>15512668</id><snippet>C:\folder\folder\</snippet></ROW><ROW><id>15512668</id><snippet>os.path</snippet></ROW><ROW><id>15512668</id><snippet>rstrip('\\')</snippet></ROW><ROW><id>15512702</id><snippet>(?!st|nd|rd|th)</snippet></ROW><ROW><id>15512702</id><snippet>_NUM_ALPHA_PAIR_RE = re.compile(r'[0-9/]+(?!st|nd|rd|th)[,a-z]+', re.I)
</snippet></ROW><ROW><id>15512702</id><snippet>In [125]: import re
In [126]: _NUM_ALPHA_PAIR_RE = re.compile(r'[0-9/]+(?!st|nd|rd|th)[,a-z]+', re.I)

In [127]: _NUM_ALPHA_PAIR_RE.match('6A')
Out[127]: &lt;_sre.SRE_Match at 0xb141c98&gt;

In [128]: _NUM_ALPHA_PAIR_RE.match('1ST')
# None
</snippet></ROW><ROW><id>15512760</id><snippet>decode</snippet></ROW><ROW><id>15512760</id><snippet>bytes</snippet></ROW><ROW><id>15512760</id><snippet>str</snippet></ROW><ROW><id>15512760</id><snippet>with open(path) as file_obj:
    for line in file_obj:
</snippet></ROW><ROW><id>15512760</id><snippet>with open(path, encoding='utf-8') as file_obj:
    for line in file_obj:
</snippet></ROW><ROW><id>15512760</id><snippet>locale.getpreferredencoding()</snippet></ROW><ROW><id>15512760</id><snippet>locale.getpreferredencoding()</snippet></ROW><ROW><id>15513055</id><snippet>yellow_and_violent = 0    
for line in infile:
    if line.strip() and line[0]!='#':               
        lines+=1
    if ('yellow' in line) and ('violent' in line'):
        yellow_and_violent += 1
</snippet></ROW><ROW><id>15513055</id><snippet>file</snippet></ROW><ROW><id>15513055</id><snippet>import os.path

filename = input("Enter name of input file &gt;")
try:
    infile = open(filename, "r")
except IOError:
    raise Exception("Error opening file '%s', analysis will not continue" % filename)

dogs = 0
yellow_and_violent = 0

for line in infile:
    if line.strip() and line[0]!='#':               
        dogs += 1
    if ('yellow' in line) and ('violent' in line):
       yellow_and_violent += 1
print("Total dogs =",dogs)
print("Yellow and violent dogs = ", yellow_and_violent)
</snippet></ROW><ROW><id>15513191</id><snippet>QThread</snippet></ROW><ROW><id>15513191</id><snippet>MainWidget.update_software</snippet></ROW><ROW><id>15513191</id><snippet>QThread: Destroyed while thread is still running</snippet></ROW><ROW><id>15513191</id><snippet>.wait()</snippet></ROW><ROW><id>15513439</id><snippet>'testing 1,2,3'+'\n'  # 'testing 1,2,3\n'
</snippet></ROW><ROW><id>15513439</id><snippet>'testing 1,2,3+\n'
</snippet></ROW><ROW><id>15513439</id><snippet>'+'</snippet></ROW><ROW><id>15513504</id><snippet>import xml.etree.ElementTree as et

filehandler = open("file.xml","r")
raw_data = et.parse(filehandler)
data_root = raw_data.getroot()
filehandler.close()

for children in root:
    for child in children:
        print(child.tag, child.text, children.tag, children.text)
</snippet></ROW><ROW><id>15513522</id><snippet>In [4]: df = pd.DataFrame(np.random.randn(8,3),columns=['A','B','C'])
In [9]: df2 = df.copy()

In [10]: df2.ix[0:3,['B','C']] = np.nan

In [11]: df2
Out[11]: 
          A         B         C
0  0.404500       NaN       NaN
1  1.391802       NaN       NaN
2 -0.365778       NaN       NaN
3  0.693149       NaN       NaN
4  0.233268  0.332789 -0.130531
5 -0.531822  1.161906  0.210007
6 -0.507082 -2.050773 -1.258930
7  0.521823 -0.331544 -0.926364

In [12]: df
Out[12]: 
          A         B         C
0  0.404500 -0.222471  0.864739
1  1.391802 -0.503080  0.307754
2 -0.365778  0.530288 -0.743119
3  0.693149 -0.749732 -1.135363
4  0.233268  0.332789 -0.130531
5 -0.531822  1.161906  0.210007
6 -0.507082 -2.050773 -1.258930
7  0.521823 -0.331544 -0.926364
</snippet></ROW><ROW><id>15513522</id><snippet>In [14]: df[pd.isnull(df2)] = np.nan

In [15]: df
Out[15]: 
          A         B         C
0  0.404500       NaN       NaN
1  1.391802       NaN       NaN
2 -0.365778       NaN       NaN
3  0.693149       NaN       NaN
4  0.233268  0.332789 -0.130531
5 -0.531822  1.161906  0.210007
6 -0.507082 -2.050773 -1.258930
7  0.521823 -0.331544 -0.926364
</snippet></ROW><ROW><id>15513759</id><snippet>a=b</snippet></ROW><ROW><id>15513759</id><snippet>a</snippet></ROW><ROW><id>15513759</id><snippet>b</snippet></ROW><ROW><id>15513759</id><snippet>Symbol</snippet></ROW><ROW><id>15513759</id><snippet>Symbol</snippet></ROW><ROW><id>15513759</id><snippet>a = b = c = Symbol('fancy_name')</snippet></ROW><ROW><id>15513759</id><snippet>Symbol('fancy_name')</snippet></ROW><ROW><id>15513759</id><snippet>&gt;&gt;&gt; relational.Eq(x, y)
x=y
</snippet></ROW><ROW><id>15513908</id><snippet>PyQT</snippet></ROW><ROW><id>15513908</id><snippet>QtWebKit</snippet></ROW><ROW><id>15513908</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>15513908</id><snippet>from ghost import Ghost
ghost = Ghost()
page, resources = ghost.open('http://my.web.page')
</snippet></ROW><ROW><id>15513908</id><snippet>resources</snippet></ROW><ROW><id>15513908</id><snippet>resource.url</snippet></ROW><ROW><id>15514091</id><snippet>fontsize</snippet></ROW><ROW><id>15514091</id><snippet>fontsize</snippet></ROW><ROW><id>15514091</id><snippet>Table.set_fontsize</snippet></ROW><ROW><id>15514091</id><snippet>table = sub_axes.table(cellText=table_vals,
                       colWidths = [0.15, 0.25],
                       rowLabels=row_labels,
                       loc='right')
table.set_fontsize(14)
the_table.scale(1.5, 1.5)  # may help
</snippet></ROW><ROW><id>15514091</id><snippet>import matplotlib.pyplot as plt
# Based on http://stackoverflow.com/a/8531491/190597 (Andrey Sobolev)

fig = plt.figure()
ax = fig.add_subplot(111)
y = [1, 2, 3, 4, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1]    
col_labels = ['col1', 'col2', 'col3']
row_labels = ['row1', 'row2', 'row3']
table_vals = [[11, 12, 13], [21, 22, 23], [31, 32, 33]]

the_table = plt.table(cellText=table_vals,
                      colWidths=[0.1] * 3,
                      rowLabels=row_labels,
                      colLabels=col_labels,
                      loc='center right')
the_table.set_fontsize(24)
the_table.scale(2, 2)

plt.plot(y)
plt.show()
</snippet></ROW><ROW><id>15514167</id><snippet>    for entry in feed.entries:
        entrylist[entry.title]
</snippet></ROW><ROW><id>15514167</id><snippet>    for entry in feed.entries:
        entrylist[entry.title] = entry     # or some value
</snippet></ROW><ROW><id>15514167</id><snippet>KeyError</snippet></ROW><ROW><id>15514167</id><snippet>@register.inclusion_tag('feed_entries.html'):
def feed_entries():
    feed = feedparser.parse('example.rss')
    return {'items': feed}
</snippet></ROW><ROW><id>15514167</id><snippet>feed_entries.html</snippet></ROW><ROW><id>15514167</id><snippet>{% for item in items %}
&lt;p&gt; {{ item }} &lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>15514167</id><snippet>{% load feed_tags %}
...
&lt;p&gt;Here are the latest entries:&lt;/p&gt;
{% feed_entries %}
...
</snippet></ROW><ROW><id>15514167</id><snippet>feed</snippet></ROW><ROW><id>15514167</id><snippet>{% feed_entries %}</snippet></ROW><ROW><id>15514167</id><snippet>feed_entries.html</snippet></ROW><ROW><id>15514167</id><snippet>{% feed_entries %}</snippet></ROW><ROW><id>15514167</id><snippet>@register.assignment_tag
def feed_entries():
    return feedparser.parse('example.rss')
</snippet></ROW><ROW><id>15514167</id><snippet>{% feed_entries as items %}
{% for item in items %}
    &lt;p&gt;{{ item }}&lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>15514167</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>15514167</id><snippet>&lt;ul&gt;</snippet></ROW><ROW><id>15514209</id><snippet>KeyError</snippet></ROW><ROW><id>15514209</id><snippet>n = 3</snippet></ROW><ROW><id>15514209</id><snippet>if n == 1:
    print 'one'
elif n == 2:
    print 'two'
else:
    print 'too big!'
</snippet></ROW><ROW><id>15514209</id><snippet>choices = {1:'one', 2:'two'}
try:
    print choices[n]
except KeyError:
    print 'too big!'
</snippet></ROW><ROW><id>15514209</id><snippet>'too big!'</snippet></ROW><ROW><id>15514409</id><snippet>data</snippet></ROW><ROW><id>15514409</id><snippet>urlunparse</snippet></ROW><ROW><id>15514409</id><snippet>scheme, netloc, url, query, fragment = data
</snippet></ROW><ROW><id>15514409</id><snippet>netloc</snippet></ROW><ROW><id>15514409</id><snippet>scheme</snippet></ROW><ROW><id>15514409</id><snippet>uses_netloc</snippet></ROW><ROW><id>15514409</id><snippet>    url = scheme + ':' + url
</snippet></ROW><ROW><id>15514409</id><snippet>def urlunsplit(data):
    ...
    scheme, netloc, url, query, fragment = data
    if netloc or (scheme and scheme in uses_netloc and url[:2] != '//'):
        if url and url[:1] != '/': url = '/' + url
        url = '//' + (netloc or '') + url
    if scheme:
        url = scheme + ':' + url
</snippet></ROW><ROW><id>15514409</id><snippet>'ssh'</snippet></ROW><ROW><id>15514409</id><snippet>uses_netloc</snippet></ROW><ROW><id>15514409</id><snippet>uses_netloc = ['ftp', 'http', 'gopher', 'nntp', 'telnet',
               'imap', 'wais', 'file', 'mms', 'https', 'shttp',
               'snews', 'prospero', 'rtsp', 'rtspu', 'rsync', '',
               'svn', 'svn+ssh', 'sftp','nfs','git', 'git+ssh']
</snippet></ROW><ROW><id>15514409</id><snippet>ssh://</snippet></ROW><ROW><id>15514409</id><snippet>netloc</snippet></ROW><ROW><id>15514409</id><snippet>In [140]: urlparse.urlunparse(('ssh','netloc','test_path', None, None, None))
Out[140]: 'ssh://netloc/test_path'
</snippet></ROW><ROW><id>15514883</id><snippet>numpy.argsort</snippet></ROW><ROW><id>15514883</id><snippet>numpy.searchsorted</snippet></ROW><ROW><id>15514883</id><snippet>import numpy as np
A = np.unique(np.random.randint(0, 100, 100))
B = np.random.choice(A, 10)

idxA = np.argsort(A)
sortedA = A[idxA]
idxB = np.searchsorted(sortedA, B)
pos = idxA[idxB]
print A[pos]
print B
</snippet></ROW><ROW><id>15514883</id><snippet>import pandas as pd
s = pd.Index(A)
pos = s.get_indexer(B)
print A[pos]
print B
</snippet></ROW><ROW><id>15515083</id><snippet>&gt;&gt;&gt; p = Profile.objects.get(...)
&gt;&gt;&gt; isinstance(p.settings, Settings)
True
</snippet></ROW><ROW><id>15515083</id><snippet>Profile</snippet></ROW><ROW><id>15515083</id><snippet>null=True</snippet></ROW><ROW><id>15515083</id><snippet>&gt;&gt;&gt; p = Profile(settings=None, ...)
&gt;&gt;&gt; p.save()
&gt;&gt;&gt; p = Profile.objects.get(pk=p.pk)
&gt;&gt;&gt; p.settings # the settings can't be anything because you never assigned them
None
</snippet></ROW><ROW><id>15515083</id><snippet>Profile</snippet></ROW><ROW><id>15515083</id><snippet>class SettingsTest(TestCase):
    def setUp(self):
        user = User.objects.create(username='felipe', email='something@aol.com')
        self.settings = Settings.objects.create(...)
        self.profile = Profile.objects.create(short_name='Felipe',
                                              name='Felipe',
                                              user=user,
                                              settings=self.settings)
</snippet></ROW><ROW><id>15515083</id><snippet>Profile(models.Model):
    def get_default_settings(self):
        settings = Settings.objects.create(...)
        self.settings_id = settings.pk
        return settings

    def __getattribute__(self, name):
        default = object.__getattribute__(self, name)
        if name == 'settings':
            if default is None:
                return self.get_default_settings()
            else:
                return default
        else:
            return default
</snippet></ROW><ROW><id>15515208</id><snippet>a</snippet></ROW><ROW><id>15515208</id><snippet>import pygame
import math
import numpy as np

clock = pygame.time.Clock()
pygame.init()
size = (width, height) = (600,500)
screen = pygame.display.set_mode(size)


class pendulum:
    def __init__(self,x,y,x0,y0):
        self.x0 = np.array((x0, y0))
        self.x = np.array((x, y), dtype=float)
        self.v = np.zeros((2,), dtype=float)
        self.a = np.zeros((2,), dtype=float)
    def CalcForce(self):
        dx = self.x0 - self.x
        angle = math.atan2(-dx[0], dx[1])
        a = g[1]*math.sin(angle)  # tangential accelation due to gravity
        self.a[0] = at*math.cos(angle)
        self.a[1] = at*math.sin(angle)
    def move(self):
        #print np.dot(self.a, self.x-self.x0) #is a perp to string?
        self.x += dt*self.v
        self.v += dt*self.a
    def draw(self):
        pygame.draw.circle(screen, (0,0,0), self.x0, 5)
        pygame.draw.line(screen, (0,0,0), self.x0, self.x.astype(int),3)
        pygame.draw.circle(screen, (0,0,255), self.x.astype(int), 14,0)
        pygame.draw.line(screen, (255, 0, 0), (self.x+200*self.a).astype(int), self.x.astype(int), 4)
dt = .001
g = [0,0.4]
p = pendulum(350,100,300,20)

while 1:
    screen.fill((255,255,255))
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
    for i in range(100): # don't plot every timestep
        p.CalcForce()
        p.move()
        p.draw()
    clock.tick(60)
    pygame.display.flip()
</snippet></ROW><ROW><id>15515229</id><snippet>d.addCallbacks(lambda _: "success",
               lambda _: "fail")
d.addCallback(request.write)
d.addBoth(lambda _: request.finish())
return server.NOT_DONE_YET
</snippet></ROW><ROW><id>15515254</id><snippet>main</snippet></ROW><ROW><id>15515254</id><snippet>main</snippet></ROW><ROW><id>15515254</id><snippet>while</snippet></ROW><ROW><id>15515254</id><snippet>input</snippet></ROW><ROW><id>15515254</id><snippet>def main():
    line1="hello"
    line2=""
    line3=""
    line4=""
    line5=""
    while True:
        print("[1]"+line1)
        print("[2]"+line2)
        print("[3]"+line3)
        print("[4]"+line4)
        print("[5]"+line5)
        print("")
        print("Which line would you like to edit?")
        lineChoice=''
        while lineChoice not in ('1', '2', '3', '4', '5'):
            lineChoice=input("&gt; ")
        if lineChoice=="1":
            print("You are now editing Line 1.")
            line1=input("&gt; ")
        if lineChoice=="2":
            print("You are now editing Line 2.")
            line2=input("&gt; ")
        if lineChoice=="3":
            print("You are now editing Line 3.")
            line3=input("&gt; ")
        if lineChoice=="4":
            print("You are now editing Line 4.")
            line4=input("&gt; ")
        if lineChoice=="5":
            print("You are now editing Line 5.")
            line5=input("&gt; ")

main()
</snippet></ROW><ROW><id>15515321</id><snippet>Process.getErrorStream</snippet></ROW><ROW><id>15515321</id><snippet>Runtime.exec</snippet></ROW><ROW><id>15515321</id><snippet>Runtime.exec</snippet></ROW><ROW><id>15515321</id><snippet>ProcessBuilder</snippet></ROW><ROW><id>15516031</id><snippet>a, b = 0, 1
</snippet></ROW><ROW><id>15516031</id><snippet>(a, b) = (0, 1)
</snippet></ROW><ROW><id>15516031</id><snippet>0</snippet></ROW><ROW><id>15516031</id><snippet>1</snippet></ROW><ROW><id>15516031</id><snippet>a</snippet></ROW><ROW><id>15516031</id><snippet>b</snippet></ROW><ROW><id>15516031</id><snippet>a, b = b, a+b
</snippet></ROW><ROW><id>15516031</id><snippet>(a, b) = (b, a+b)
</snippet></ROW><ROW><id>15516031</id><snippet>b</snippet></ROW><ROW><id>15516031</id><snippet>a+b</snippet></ROW><ROW><id>15516031</id><snippet>a, b = 0, 1        # a=0 , b=1
a, b = b, a+b      # a=1 , b=1
</snippet></ROW><ROW><id>15516031</id><snippet>a = 0              # a=0
b = 1              # a=0 , b=1
a = b              # a=1 , b=1
b = b+a            # a=1 , b=2 
</snippet></ROW><ROW><id>15516132</id><snippet>1</snippet></ROW><ROW><id>15516132</id><snippet>2</snippet></ROW><ROW><id>15516132</id><snippet>space</snippet></ROW><ROW><id>15516132</id><snippet>parse_text()</snippet></ROW><ROW><id>15516132</id><snippet>import pygame
from pygame import Surface
from pygame.locals import *
# Todo: remove font object from TextLine() , to TextWall(). Then share a list of font's with any line.

"""Example of multi-line text class, with alpha transparency."""
lorem = """Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed aliquet
tellus eros, eu faucibus dui. Phasellus eleifend, massa id ornare sodales, est urna
congue tellus, vitae varius metus nunc non enim. Mauris elementum, arcu vitae tempor euismod, justo turpis malesuada est, sed dictum nunc nulla nec mauris. Cras felis eros, elementum vitae sollicitudin in, elementum et augue. Proin eget nunc at dui congue pretium. Donec ut ipsum ut lacus mollis tristique. In pretium varius dui eu dictum.

Proin pulvinar metus nec mi semper semper. Pellentesque habitant morbi tristique
senectus et netus et malesuada fames ac turpis egestas. Proin in diam odio. Vestibulum
at neque sed ante sodales eleifend quis id dui. Mauris sollicitudin, metus a semper consectetur,
est lectus varius erat, sit amet ultrices tortor nisi id justo. Aliquam elementum vestibulum dui ut auctor. Mauris commodo sapien vitae augue tempus sagittis. Morbi a nibh lectus, sed porta nibh. Donec et est ac dui sodales aliquet tristique et arcu. Nullam enim felis, posuere vel rutrum eu, euismod a purus. Morbi porta cursus libero, id rutrum elit lacinia vitae.

In condimentum ultrices ipsum, ut convallis odio egestas et. Cras at egestas elit. Morbi
quis neque ligula. Sed tempor, sem at fringilla rhoncus, diam quam mollis nisi, vitae semper
mi massa sit amet tellus. Vivamus congue commodo ornare. Morbi et mi non sem malesuada rutrum. Etiam est purus, interdum ut placerat sit amet, tempus eget eros. Duis eget augue quis diam facilisis blandit. Ut vulputate adipiscing eleifend. """

class TextLine(object):
    # Manages drawing and caching a single line of text
    # You can make font size, .color_fg etc be properties so they *automatically* toggle dirty bool.
    def __init__(self, font=None, size=16, text="hi world"):        
        self.font_name = font
        self.font_size = size
        self.color_fg = Color("white")
        self.color_bg = Color("gray20")

        self._aa = True 
        self._text = text                
        self.font = pygame.font.Font(font, size)
        self.screen = pygame.display.get_surface()

        self.dirty = True
        self.image = None
        self._render()

    def _render(self):
        # render for cache
        """no AA = automatic transparent. With AA you need to set the color key too"""
        self.dirty = False        
        self.image = self.font.render(self._text, self.aa, self.color_fg)            
        self.rect = self.image.get_rect()

    def draw(self):
        # Call this do draw, always prefers to use cache
        if self.dirty or (self.image is None): self._render()
        self.screen.blit(self.image, self.rect)        

    @property
    def text(self):
        return self._text

    @text.setter
    def text(self, text):
        self.dirty = True
        self._text = text

    @property
    def aa(self): return self._aa

    @aa.setter
    def aa(self, aa):
        self.dirty = True
        self._aa = aa

class TextWall(object):
    # Manages multiple lines of text / paragraphs.
    def __init__(self, font=None, size=16):
        self.font = font
        self.font_size = size        
        self.offset = Rect(20,20,1,1) # offset of whole wall

        self.screen = pygame.display.get_surface()
        self.dirty = True
        self.text_lines = []
        self._text_paragraph = "Empty\nText"
        self._render()

    def _render(self):
        # render list 
        self.dirty = False
        self.text_lines = [ TextLine(self.font, self.font_size, line) for line in self._text_paragraph ]        

        # offset whole paragraph
        self.text_lines[0].rect.top = self.offset.top

        # offset the height of each line
        prev = Rect(0,0,0,0)        
        for t in self.text_lines:
            t.rect.top += prev.bottom
            t.rect.left = self.offset.left
            prev = t.rect

    def parse_text(self, text):
        # parse raw text to something usable
        self._text_paragraph = text.split("\n")
        self._render()

    def draw(self):
        # draw with cached surfaces    
        if self.dirty: self._render()
        for text in self.text_lines: text.draw()

    @property
    def font_size(self):
        return self._font_size

    @font_size.setter
    def font_size(self, size):
        self.dirty = True
        self._font_size = size

    @property
    def text(self):
        return self._text_paragraph

    @text.setter
    def text(self, text_paragraph):
        self.dirty = True
        self.parse_text(text_paragraph)

class Game():
    done = False
    def __init__(self):
        pygame.init()
        self.screen = pygame.display.set_mode ((640,480))
        self.text = Surface([200,100])

        self.text_wall = TextWall()
        self.toggle_bg = True

        self.text_wall.parse_text(lorem)

    def loop(self):
        while not self.done:
            self.handle_events()
            self.draw()

    def draw(self):
        if self.toggle_bg: bg = Color("gray60")
        else: bg = Color("gray20")

        self.screen.fill(bg)        
        self.text_wall.draw()        
        pygame.display.update()

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT: self.done = True

            elif event.type == KEYDOWN:
                if event.key == K_ESCAPE: self.done = True                
                elif event.key == K_SPACE: self.toggle_bg = not self.toggle_bg
                elif event.key == K_1: self.text_wall.font_size -= 3
                elif event.key == K_2: self.text_wall.font_size += 3

if __name__ == "__main__":
    g = Game()
    g.loop()
</snippet></ROW><ROW><id>15516175</id><snippet>&lt;=</snippet></ROW><ROW><id>15516175</id><snippet>&gt;=</snippet></ROW><ROW><id>15516175</id><snippet>lesser</snippet></ROW><ROW><id>15516175</id><snippet>greater</snippet></ROW><ROW><id>15516175</id><snippet>from random import randint

def quickSort(lst):
    if not lst:
        return []
    else:
        pivot = randint(0, len(lst) - 1)
        pivot_value = lst[pivot]
        lesser = quickSort([l for i,l in enumerate(lst)
                           if l &lt;= pivot_value and i != pivot])
        greater = quickSort([l for l in lst if l &gt; pivot_value])
        return lesser + [pivot_value] + greater
</snippet></ROW><ROW><id>15516175</id><snippet>&gt;&gt;&gt; from random import randint
&gt;&gt;&gt;
&gt;&gt;&gt; def quickSort(lst):
...     if not lst:
...         return []
...     else:
...         pivot = randint(0, len(lst) - 1)
...         pivot_value = lst[pivot]
...         lesser = quickSort([l for i,l in enumerate(lst)
...                            if l &lt;= pivot_value and i != pivot])
...         greater = quickSort([l for l in lst if l &gt; pivot_value])
...         return lesser + [pivot_value] + greater
...
&gt;&gt;&gt; print quickSort([3, 2, 5, 6, 1, 7, 2, 4,234, 234, 23, 1234, 24, 132])
[1, 2, 2, 3, 4, 5, 6, 7, 23, 24, 132, 234, 234, 1234]
</snippet></ROW><ROW><id>15516324</id><snippet>os.popen</snippet></ROW><ROW><id>15516324</id><snippet>import subprocess

text = "es ist also ..."
tt = subprocess.Popen('treetagger/cmd/tree-tagger-german-utf8', 
                      stdout=subprocess.PIPE, 
                      stderr=subprocess.PIPE,
                      stdin=subprocess.PIPE)
tagged, stderr = tt.communicate(txt)
</snippet></ROW><ROW><id>15516482</id><snippet>&gt;&gt;&gt; keys = ['a','b','c']
&gt;&gt;&gt; value = [0, 0]
&gt;&gt;&gt; {key: list(value) for key in keys}
    {'a': [0, 0], 'b': [0, 0], 'c': [0, 0]}
</snippet></ROW><ROW><id>15516525</id><snippet>       &lt;record id="seq_type_purchase_order" model="ir.sequence.type"&gt;
            &lt;field name="name"&gt;Purchase Order&lt;/field&gt;
            &lt;field name="code"&gt;purchase.order&lt;/field&gt;
        &lt;/record&gt;
        &lt;record id="seq_purchase_order" model="ir.sequence"&gt;
            &lt;field name="name"&gt;Purchase Order&lt;/field&gt;
            &lt;field name="code"&gt;purchase.order&lt;/field&gt;
            &lt;field name="prefix"&gt;PO&lt;/field&gt;
            &lt;field name="padding"&gt;5&lt;/field&gt;
            &lt;field name="company_id" eval="False"/&gt;
        &lt;/record&gt; 



def create(self, cr, uid, vals, context=None):
     if vals.get('name','/')=='/':
        vals['name'] = self.pool.get('ir.sequence').get(cr, uid, 'purchase.order') or '/'
        order =  super(purchase_order, self).create(cr, uid, vals, context=context)
        return order
</snippet></ROW><ROW><id>15516915</id><snippet>In [1]: import numpy as np

In [2]: arr = np.arange(8).reshape(2, 2, 2)

In [3]: arr
Out[3]: 
array([[[0, 1],
        [2, 3]],

       [[4, 5],
        [6, 7]]])

In [4]: arr*arr
Out[4]: 
array([[[ 0,  1],
        [ 4,  9]],

       [[16, 25],
        [36, 49]]])
</snippet></ROW><ROW><id>15516915</id><snippet>In [5]: arr2 = np.arange(4).reshape(2, 2)

In [6]: arr2
Out[6]: 
array([[0, 1],
       [2, 3]])

In [7]: arr2 = arr2.reshape(2, 2, 1)

In [8]: arr2
Out[8]: 
array([[[0],
        [1]],

       [[2],
        [3]]])

In [9]: arr*arr2
Out[9]: 
array([[[ 0,  0],
        [ 2,  3]],

       [[ 8, 10],
        [18, 21]]])
</snippet></ROW><ROW><id>15517114</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>15517114</id><snippet>from collections import defaultdict

d = defaultdict(list)
for child in root:
    d[child.tag].append(child.attrib)
</snippet></ROW><ROW><id>15517114</id><snippet>root</snippet></ROW><ROW><id>15517114</id><snippet>L = [child.attrib for child in root]
</snippet></ROW><ROW><id>15517150</id><snippet>key = Random.new().read(16)
</snippet></ROW><ROW><id>15517150</id><snippet>openssl aes-256-cbc -d -in enc -out new.zip
</snippet></ROW><ROW><id>15517150</id><snippet>openssl aes-128-cbc -d -in enc -out new.zip
</snippet></ROW><ROW><id>15517167</id><snippet>list_</snippet></ROW><ROW><id>15517167</id><snippet>c_code</snippet></ROW><ROW><id>15517167</id><snippet>raw_input</snippet></ROW><ROW><id>15517167</id><snippet>matching_results = [t for t in list_ if t[0] == c_code]
</snippet></ROW><ROW><id>15517167</id><snippet>filter</snippet></ROW><ROW><id>15517167</id><snippet>matching_results = filter(lambda t: t[0]==c_code, list_)
</snippet></ROW><ROW><id>15517167</id><snippet>filter</snippet></ROW><ROW><id>15517167</id><snippet>list(...)</snippet></ROW><ROW><id>15517167</id><snippet>c_codes</snippet></ROW><ROW><id>15517167</id><snippet>matching_results = [t for t in list_ if t[0] in c_codes]
</snippet></ROW><ROW><id>15517328</id><snippet>json</snippet></ROW><ROW><id>15517328</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; data = {'test.com': {'@': {'NS': ['ns1.test.net', 'ns2.test.net']}, 'api': {'A': ['123.122.2.1', '121.161.51.29', '111.30.12.14']}}}
&gt;&gt;&gt; print json.dumps(data,indent=4)
{
    "test.com": {
        "@": {
            "NS": [
                "ns1.test.net", 
                "ns2.test.net"
            ]
        }, 
        "api": {
            "A": [
                "123.122.2.1", 
                "121.161.51.29", 
                "111.30.12.14"
            ]
        }
    }
}
</snippet></ROW><ROW><id>15517480</id><snippet>decode_header</snippet></ROW><ROW><id>15517480</id><snippet>=?iso-8859-1?q?p=F6stal?=</snippet></ROW><ROW><id>15517480</id><snippet>raw_data</snippet></ROW><ROW><id>15517480</id><snippet>charset</snippet></ROW><ROW><id>15517480</id><snippet>decode</snippet></ROW><ROW><id>15517480</id><snippet>encode</snippet></ROW><ROW><id>15517480</id><snippet>&gt;&gt;&gt; x = unicode('\xd5\xe2\xca\xc7\xd6\xd0\xce\xc4\xb2\xe2\xca\xd4\xa3\xa1', 'gb2312')
&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; map(unicodedata.name, x)  # see if it looks chinese
['CJK UNIFIED IDEOGRAPH-8FD9', 'CJK UNIFIED IDEOGRAPH-662F', 'CJK UNIFIED IDEOGRAPH-4E2D', 'CJK UNIFIED IDEOGRAPH-6587', 'CJK UNIFIED IDEOGRAPH-6D4B', 'CJK UNIFIED IDEOGRAPH-8BD5', 'FULLWIDTH EXCLAMATION MARK']
&gt;&gt;&gt; print x                   # this works for me because I'm in a UTF-8 locale
这是中文测试！
</snippet></ROW><ROW><id>15517480</id><snippet>&gt;&gt;&gt; with open('file.txt', 'w') as f:
...   f.write(x.encode('utf-8'))
</snippet></ROW><ROW><id>15517480</id><snippet>decode_header</snippet></ROW><ROW><id>15517480</id><snippet>make_header</snippet></ROW><ROW><id>15517480</id><snippet>unicode</snippet></ROW><ROW><id>15517480</id><snippet>subject_header = msg['subject']
subject = unicode(email.header.make_header(email.header.decode_header(subject_header))
# now proceed as before...
</snippet></ROW><ROW><id>15517480</id><snippet>make_header</snippet></ROW><ROW><id>15517480</id><snippet>decode_header</snippet></ROW><ROW><id>15517976</id><snippet>ball_list</snippet></ROW><ROW><id>15517976</id><snippet>elif event.type == pygame.MOUSEBUTTONUP:
    image = pygame.image.load("images/vulnerable.png").convert()
    for ball in ball_list:
        ball.ball_image = image
</snippet></ROW><ROW><id>15517976</id><snippet>Ball</snippet></ROW><ROW><id>15517976</id><snippet>class Ball:
    def __init__(self,X,Y,imagefile):
        self.vulnerable = False
        self.velocity = [3,3]
        self.normal_ball_image = pygame.image.load (imagefile). convert()
        self.v_ball_image = pygame.image.load("images/vulnerable.png").convert()
        self.ball_image = self.normal_ball_image
        self.ball_boundary = self.ball_image.get_rect (center=(X,Y))
        self.sound = pygame.mixer.Sound ('Thump.wav')

    def toggle(self):
        self.vulnerable = not self.vulnerable
        self.ball_image = self.v_ball_image if self.vulnerable else self.normal_ball_image
</snippet></ROW><ROW><id>15517976</id><snippet>elif event.type == pygame.MOUSEBUTTONUP:
    for ball in ball_list:
        ball.toggle()
</snippet></ROW><ROW><id>15518403</id><snippet>self.foo = self.anArg + 3</snippet></ROW><ROW><id>15518403</id><snippet>self.foo = self.anArg + "3"</snippet></ROW><ROW><id>15518403</id><snippet>TypeError</snippet></ROW><ROW><id>15518403</id><snippet>str</snippet></ROW><ROW><id>15518403</id><snippet>int</snippet></ROW><ROW><id>15518403</id><snippet>cls('f00')</snippet></ROW><ROW><id>15518403</id><snippet>import types

class VeryImportantSuperClass(object):
    def __init__(self, anArg, anotherArg):
        self.anArg = anArg
        #Extremely clever code here

def createSubclassAttempt1(name):
    source = ('def __init__(self, arg):\n'
              '    super(' + name + ', self).__init__(arg, 6.02e23)\n'
              '    self.foo = self.anArg + "3"\n')
    d = {}
    exec(source, d)
    cls = type(name, (VeryImportantSuperClass,), d)
    d[name] = cls
    return cls

if __name__ == '__main__':
    cls = createSubclassAttempt1('Foo')
    inst = cls('foo')
    print(cls('foo').foo)  # prints "foo3"
</snippet></ROW><ROW><id>15518782</id><snippet>    &lt;ul&gt;
         &lt;li&gt;&lt;a&gt;Link&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a&gt;Link&lt;/a&gt;&lt;/li&gt;
         &lt;li&gt;&lt;a&gt;Link&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

{{diskspace}}
</snippet></ROW><ROW><id>15518782</id><snippet>{% block header %}
    {% include "header.html" with diskspace='Test'%}
{% endblock %}
</snippet></ROW><ROW><id>15518782</id><snippet>{% extends "base.html" %}
{% block header %}
    {% include "header.html" with diskspace='&lt;p&gt;You need more space!&lt;/p&gt;'|safe %}
{% endblock %}
</snippet></ROW><ROW><id>15519119</id><snippet>#test.py
def hello():
    print "hello"
</snippet></ROW><ROW><id>15519119</id><snippet>#main.py
testContent = open("test.py").read()
#evaluate a content
eval(compile(testContent, "&lt;string&gt;", 'exec'))
#call function
hello() #prints hello
</snippet></ROW><ROW><id>15519119</id><snippet>#main.py
#evaluate a content
eval(compile("import test", "&lt;string&gt;", 'exec')) #test.py
#check list of methods
dir(test) # ['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'hello']
#call function
hello() #prints hello
</snippet></ROW><ROW><id>15519119</id><snippet>eval</snippet></ROW><ROW><id>15519653</id><snippet>ModelForms</snippet></ROW><ROW><id>15519663</id><snippet>global</snippet></ROW><ROW><id>15519663</id><snippet>global x
x = x * y      
return x
</snippet></ROW><ROW><id>15519663</id><snippet>&gt;&gt;&gt; x = 12
&gt;&gt;&gt; def poi():
...   x = 99
...   return x
... 
&gt;&gt;&gt; poi()
99
&gt;&gt;&gt; x
12
</snippet></ROW><ROW><id>15519667</id><snippet>from chameleon import PageTemplate

t = PageTemplate('some string template')
rendered_content = t.render(encoding='utf-8')
</snippet></ROW><ROW><id>15519802</id><snippet>r</snippet></ROW><ROW><id>15519802</id><snippet>r'test\"'
</snippet></ROW><ROW><id>15519802</id><snippet>'test\\"'
</snippet></ROW><ROW><id>15519802</id><snippet>r</snippet></ROW><ROW><id>15519802</id><snippet>\</snippet></ROW><ROW><id>15520116</id><snippet>struct/end_struct</snippet></ROW><ROW><id>15520116</id><snippet>import re

def parse(data):
    stack = [{}]

    for x in data.splitlines():
        x = re.sub(r'\s+', '', x)

        m = re.match(r'(\w+):STRUCT', x)
        if m:
            d = {}
            stack[-1][m.group(1)] = d
            stack.append(d)
            continue

        m = re.match(r'(\w+):INT(?::=(\w+))?', x)
        if m:
            stack[-1][m.group(1)] = int(m.group(2) or 0)
            continue

        m = re.match(r'END_STRUCT', x)
        if m:
            stack.pop()
            continue

    return stack[0]
</snippet></ROW><ROW><id>15520116</id><snippet>data = """
   SP : STRUCT  
    Spare : STRUCT  //Spare
     Val : INT  := 100; 
     UpLim : INT  := 100;   
     LoLim : INT ;  
     Def : INT  := 100; 
     Prot : INT  := 2;  
    END_STRUCT ;    
   END_STRUCT ; 
"""

print parse(data)
# {'SP': {'Spare': {'LoLim': 0, 'Prot': 2, 'Def': 100, 'UpLim': 100, 'Val': 100}}}
</snippet></ROW><ROW><id>15520133</id><snippet>\s</snippet></ROW><ROW><id>15520133</id><snippet>UNICODE</snippet></ROW><ROW><id>15520133</id><snippet>[ \t\n\r\f\v]</snippet></ROW><ROW><id>15520133</id><snippet>LOCALE</snippet></ROW><ROW><id>15520133</id><snippet>UNICODE</snippet></ROW><ROW><id>15520133</id><snippet>[ \t\n\r\f\v]</snippet></ROW><ROW><id>15520133</id><snippet>\s</snippet></ROW><ROW><id>15520133</id><snippet>UNICODE</snippet></ROW><ROW><id>15520133</id><snippet>r' +'</snippet></ROW><ROW><id>15521209</id><snippet>import os.path

LOCATION = os.path.dirname(os.path.abspath(__file__))
pathToScript = os.path.join(LOCATION, 'bashscript.sh')
</snippet></ROW><ROW><id>15521209</id><snippet>pathToScript</snippet></ROW><ROW><id>15521209</id><snippet>bashscript.sh</snippet></ROW><ROW><id>15521306</id><snippet>environment</snippet></ROW><ROW><id>15521306</id><snippet>dev</snippet></ROW><ROW><id>15521306</id><snippet>production</snippet></ROW><ROW><id>15521306</id><snippet>from local_settings.py import environment
if environment == 'dev':
    debug = True
    # anything you'd like
</snippet></ROW><ROW><id>15521306</id><snippet>local_settings.py</snippet></ROW><ROW><id>15521329</id><snippet>operator</snippet></ROW><ROW><id>15521329</id><snippet>import operator
ops = {'*': operator.mul, '/': operator.div, '+': operator.add, '-': operator.sub}

op = input("Please enter  *,  /,  +,  or  - : ")
result = ops[op](x, y)
</snippet></ROW><ROW><id>15521642</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>15521642</id><snippet>if __name__ == '__main__':
    import old_main_module
    old_main_module.main()
</snippet></ROW><ROW><id>15521643</id><snippet>filter()</snippet></ROW><ROW><id>15521643</id><snippet>None</snippet></ROW><ROW><id>15521643</id><snippet>newlist = filter(None, origlist)
</snippet></ROW><ROW><id>15521643</id><snippet>newlist = [el for el in origlist if el]
</snippet></ROW><ROW><id>15521702</id><snippet>%</snippet></ROW><ROW><id>15521702</id><snippet>%%</snippet></ROW><ROW><id>15521702</id><snippet>SQL = "SELECT * FROM table1 where col1 LIKE '%%%s%%'" % var
</snippet></ROW><ROW><id>15521830</id><snippet>pip</snippet></ROW><ROW><id>15521830</id><snippet>pip install -U --force-reinstall git+git://github.com/sixohsix/twitter.git#egg=twitter
</snippet></ROW><ROW><id>15521830</id><snippet>git</snippet></ROW><ROW><id>15521830</id><snippet>pip install -U --force-reinstall https://github.com/sixohsix/twitter/zipball/master#egg=twitter
</snippet></ROW><ROW><id>15521830</id><snippet>pip install -U --force-reinstall https://github.com/sixohsix/twitter/tarball/master#egg=twitter
</snippet></ROW><ROW><id>15522484</id><snippet>whereis</snippet></ROW><ROW><id>15522484</id><snippet>$PATH</snippet></ROW><ROW><id>15522484</id><snippet>which</snippet></ROW><ROW><id>15522484</id><snippet>$PATH</snippet></ROW><ROW><id>15522484</id><snippet>which</snippet></ROW><ROW><id>15522484</id><snippet>which</snippet></ROW><ROW><id>15522484</id><snippet>bash</snippet></ROW><ROW><id>15522484</id><snippet>type</snippet></ROW><ROW><id>15522752</id><snippet>dp[k]</snippet></ROW><ROW><id>15522752</id><snippet>k</snippet></ROW><ROW><id>15522752</id><snippet>d[0] = []</snippet></ROW><ROW><id>15522752</id><snippet>dp[k] = None</snippet></ROW><ROW><id>15522752</id><snippet>k &gt; 0</snippet></ROW><ROW><id>15522752</id><snippet>S</snippet></ROW><ROW><id>15522752</id><snippet>item</snippet></ROW><ROW><id>15522752</id><snippet>i = S</snippet></ROW><ROW><id>15522752</id><snippet>i = 0</snippet></ROW><ROW><id>15522752</id><snippet>dp[i] != None</snippet></ROW><ROW><id>15522752</id><snippet>i</snippet></ROW><ROW><id>15522752</id><snippet>dp[i]</snippet></ROW><ROW><id>15522752</id><snippet>item</snippet></ROW><ROW><id>15522752</id><snippet>i + item.size</snippet></ROW><ROW><id>15522752</id><snippet>dp[i + item.size] = dp[i] + [item]</snippet></ROW><ROW><id>15522752</id><snippet>items = [("ITEM01", 100, 10000), ("ITEM02", 24, 576), \
    ("ITEM03", 24, 576), ("ITEM04", 51, 2500), ("ITEM05", 155, 25)]
S = sum([item[1] for item in items])
dp = [None for i in xrange(S + 1)]
dp[0] = []

for item in items:
    for i in xrange(S, -1, -1):
        if dp[i] is not None and i + item[1] &lt;= S:
            dp[i + item[1]] = dp[i] + [item]

desired_sum = 150
i = j = desired_sum

while i &gt;= 0 and j &lt;= S:
    if dp[i] is not None:
        print dp[i]
        break
    elif dp[j] is not None:
        print dp[j]
        break
    else:
        i -= 1
        j += 1
</snippet></ROW><ROW><id>15522752</id><snippet>[('ITEM01', 100, 10000), ('ITEM04', 51, 2500)]
</snippet></ROW><ROW><id>15522752</id><snippet>O(n*S)</snippet></ROW><ROW><id>15522752</id><snippet>n</snippet></ROW><ROW><id>15522752</id><snippet>S</snippet></ROW><ROW><id>15522752</id><snippet>S</snippet></ROW><ROW><id>15522752</id><snippet>S</snippet></ROW><ROW><id>15522752</id><snippet>2 * desired_sum</snippet></ROW><ROW><id>15522752</id><snippet>[0, 2 * desired_sum]</snippet></ROW><ROW><id>15522752</id><snippet>0</snippet></ROW><ROW><id>15522752</id><snippet>S = max(min_item_size, 2 * desired_sum - min_item_size)</snippet></ROW><ROW><id>15522752</id><snippet>min_item_size</snippet></ROW><ROW><id>15522752</id><snippet>desired_size</snippet></ROW><ROW><id>15522752</id><snippet>if dp[i] is not None and i + item[1] &lt;= S:
</snippet></ROW><ROW><id>15522752</id><snippet>if dp[i] is not None and i + item[1] &lt;= S and \
    (
        dp[i + item[1]] is None
        or
        sum(set_item[2] for set_item in dp[i]) + item[2]
            &gt; sum(set_item[2] for set_item in dp[i + item[1]])
    ):
</snippet></ROW><ROW><id>15522788</id><snippet>cls</snippet></ROW><ROW><id>15522788</id><snippet>__new__</snippet></ROW><ROW><id>15522788</id><snippet>Singleton</snippet></ROW><ROW><id>15522788</id><snippet>cls == Singleton</snippet></ROW><ROW><id>15522788</id><snippet>Singleton</snippet></ROW><ROW><id>15522788</id><snippet>cls</snippet></ROW><ROW><id>15522788</id><snippet>super</snippet></ROW><ROW><id>15522788</id><snippet>Singleton</snippet></ROW><ROW><id>15522788</id><snippet>cls</snippet></ROW><ROW><id>15522788</id><snippet>Singleton</snippet></ROW><ROW><id>15522788</id><snippet>cls</snippet></ROW><ROW><id>15522788</id><snippet>__new__</snippet></ROW><ROW><id>15522788</id><snippet>class A(object): pass
class B(object): pass
class C(A, B): pass
</snippet></ROW><ROW><id>15522788</id><snippet>C.__new__</snippet></ROW><ROW><id>15522788</id><snippet>super(C, cls).__new__</snippet></ROW><ROW><id>15522788</id><snippet>A.__new__</snippet></ROW><ROW><id>15522788</id><snippet>super(A, cls).__new__</snippet></ROW><ROW><id>15522788</id><snippet>B.__new__</snippet></ROW><ROW><id>15522788</id><snippet>object.__new__</snippet></ROW><ROW><id>15522788</id><snippet>super</snippet></ROW><ROW><id>15522788</id><snippet>C</snippet></ROW><ROW><id>15522788</id><snippet>A</snippet></ROW><ROW><id>15522788</id><snippet>object</snippet></ROW><ROW><id>15522788</id><snippet>orig.__new__</snippet></ROW><ROW><id>15522788</id><snippet>object.__new__</snippet></ROW><ROW><id>15522788</id><snippet>cls</snippet></ROW><ROW><id>15523063</id><snippet>agraph.py</snippet></ROW><ROW><id>15523063</id><snippet>runprog=self._get_prog(prog) 
</snippet></ROW><ROW><id>15523063</id><snippet>runprog=r'"%s"'%self._get_prog(prog)
</snippet></ROW><ROW><id>15523233</id><snippet>cherrypy.cpg</snippet></ROW><ROW><id>15523381</id><snippet>python setup.py install develop</snippet></ROW><ROW><id>15523381</id><snippet>pip install -e .</snippet></ROW><ROW><id>15523381</id><snippet>.</snippet></ROW><ROW><id>15523381</id><snippet>sudo</snippet></ROW><ROW><id>15523463</id><snippet>getText</snippet></ROW><ROW><id>15523463</id><snippet>getText</snippet></ROW><ROW><id>15523463</id><snippet>takeInput</snippet></ROW><ROW><id>15523463</id><snippet>a</snippet></ROW><ROW><id>15523463</id><snippet>takeInput</snippet></ROW><ROW><id>15523463</id><snippet>getText</snippet></ROW><ROW><id>15523463</id><snippet>a.getString()</snippet></ROW><ROW><id>15523463</id><snippet>self.string</snippet></ROW><ROW><id>15523463</id><snippet>var</snippet></ROW><ROW><id>15523463</id><snippet>root.mainloop()</snippet></ROW><ROW><id>15523463</id><snippet>var</snippet></ROW><ROW><id>15523463</id><snippet>getText</snippet></ROW><ROW><id>15523463</id><snippet>mainloop</snippet></ROW><ROW><id>15523463</id><snippet>getText</snippet></ROW><ROW><id>15523463</id><snippet>from Tkinter import *

class takeInput(object):

    def __init__(self,requestMessage):
        self.root = Tk()
        self.string = ''
        self.frame = Frame(self.root)
        self.frame.pack()        
        self.acceptInput(requestMessage)

    def acceptInput(self,requestMessage):
        r = self.frame

        k = Label(r,text=requestMessage)
        k.pack(side='left')
        self.e = Entry(r,text='Name')
        self.e.pack(side='left')
        self.e.focus_set()
        b = Button(r,text='okay',command=self.gettext)
        b.pack(side='right')

    def gettext(self):
        self.string = self.e.get()
        self.root.destroy()

    def getString(self):
        return self.string

    def waitForInput(self):
        self.root.mainloop()

def getText(requestMessage):
    msgBox = takeInput(requestMessage)
    #loop until the user makes a decision and the window is destroyed
    msgBox.waitForInput()
    return msgBox.getString()

var = getText('enter your name')
print "Var:", var
</snippet></ROW><ROW><id>15523743</id><snippet>if</snippet></ROW><ROW><id>15523743</id><snippet>for x in my_list:
    doSomething()
if not my_list:
    print "my_list is empty"
</snippet></ROW><ROW><id>15523743</id><snippet>my_list</snippet></ROW><ROW><id>15523743</id><snippet>for</snippet></ROW><ROW><id>15523743</id><snippet>False</snippet></ROW><ROW><id>15523752</id><snippet>count = 0
def ComputeVec(self):
    window.close()
    getVecValue(angle)
    global count
    count += 1
    if count in range(values) : 
        self.CreatWindow()
</snippet></ROW><ROW><id>15523818</id><snippet>None</snippet></ROW><ROW><id>15523818</id><snippet>None</snippet></ROW><ROW><id>15523818</id><snippet>&gt;&gt;&gt; def f():
...     print "Hello"
...     
&gt;&gt;&gt; f()
Hello
&gt;&gt;&gt; print f()  # f() returns None!
Hello
None
</snippet></ROW><ROW><id>15523818</id><snippet>print None</snippet></ROW><ROW><id>15523818</id><snippet>None</snippet></ROW><ROW><id>15523818</id><snippet>None</snippet></ROW><ROW><id>15523818</id><snippet>1 &gt; None</snippet></ROW><ROW><id>15523818</id><snippet>max(1, None)</snippet></ROW><ROW><id>15523818</id><snippet>float('-inf')</snippet></ROW><ROW><id>15523992</id><snippet>filter()</snippet></ROW><ROW><id>15523992</id><snippet>data = {k: filter(bool, v) for k, v in data.iteritems()}
</snippet></ROW><ROW><id>15523992</id><snippet>data = dict((k, filter(bool, v)) for k, v in data.iteritems())
</snippet></ROW><ROW><id>15523992</id><snippet>data = {k: [i for i in v if i] for k, v in data.iteritems()}
</snippet></ROW><ROW><id>15523992</id><snippet>&gt;&gt;&gt; data = {'Fruits' : ['Mango', 'Banana', '', '', 'Apple'],
...         'Trees' : ['Pine', 'Bamboo', '', '', '', '', ''],
...         'Laptops' : ['Sony', '', '', 'LG', 'Acer', '']}
&gt;&gt;&gt; {k: filter(bool, v) for k, v in data.iteritems()}
{'Laptops': ['Sony', 'LG', 'Acer'], 'Trees': ['Pine', 'Bamboo'], 'Fruits': ['Mango', 'Banana', 'Apple']}
</snippet></ROW><ROW><id>15524151</id><snippet>[ 1 1 1 4 4 6 7 ]
  ^ first occurrence at pos 1 of 1 in l_1 / 2 in l_2
        ^ first occurrence at pos 4
</snippet></ROW><ROW><id>15524151</id><snippet>[ 1 1 1 4 4 6 6 ]
</snippet></ROW><ROW><id>15524151</id><snippet>l_4 = [ A B 0 D 0 B A ]
</snippet></ROW><ROW><id>15524151</id><snippet>      [ 1 2 3 4 3 2 1 ]
</snippet></ROW><ROW><id>15524151</id><snippet>def canonical_form(li):
  """ Note, this implementation overwrites li """
  first = dict()
  for i in range(len(li)):
    v = first.get(li[i])
    if v is None:
      first[li[i]] = i
      v = i
    li[i] = v
  return li

print canonical_form([ 1, 1, 1, 0, 0, 2, 6 ])
# [0, 0, 0, 3, 3, 5, 6]
print canonical_form([ 2, 2, 2, 9, 9, 3, 1 ])
# [0, 0, 0, 3, 3, 5, 6]
print canonical_form([ 2, 2, 2, 9, 9, 3, 3 ])
# [0, 0, 0, 3, 3, 5, 5]
print canonical_form(['A','B',0,'D',0,'B','A'])
# [0, 1, 2, 3, 2, 1, 0]
print canonical_form([1,1,1,0,0,2,6]) == canonical_form([2,2,2,9,9,3,1])
# True
print canonical_form([1,1,1,0,0,2,6]) == canonical_form([2,2,2,9,9,3,3])
# False
</snippet></ROW><ROW><id>15524285</id><snippet>stdin</snippet></ROW><ROW><id>15524285</id><snippet>import sys
print sys.stdin.read()
</snippet></ROW><ROW><id>15524285</id><snippet>stdin</snippet></ROW><ROW><id>15524371</id><snippet>uid.set('hosts',&lt;value&gt;)
</snippet></ROW><ROW><id>15524371</id><snippet>uid['hosts'] = &lt;value&gt;
</snippet></ROW><ROW><id>15524446</id><snippet>__del__</snippet></ROW><ROW><id>15524446</id><snippet>__del__</snippet></ROW><ROW><id>15524446</id><snippet>with</snippet></ROW><ROW><id>15524446</id><snippet>__exit__</snippet></ROW><ROW><id>15524446</id><snippet>os._exit</snippet></ROW><ROW><id>15524649</id><snippet>with</snippet></ROW><ROW><id>15524649</id><snippet>with open("file1.txt", 'r') as in_file, open("file2.txt", 'a') as out_file:
    for lines in in_file:
        line = lines.strip()
        # Perform some operation
        out_file.write(line)
        out_file.write('\r\n')
</snippet></ROW><ROW><id>15524649</id><snippet>open</snippet></ROW><ROW><id>15524649</id><snippet>file</snippet></ROW><ROW><id>15524649</id><snippet>file</snippet></ROW><ROW><id>15524819</id><snippet>threading.Event</snippet></ROW><ROW><id>15525330</id><snippet>awk</snippet></ROW><ROW><id>15525330</id><snippet>awk '{for(i=1;i&lt;=NF;i+=2)$(i+1)=$(i+1)OFS sprintf("%.3f",1-$(i+1)-$i)}1' OFS='\t' file
0.800   0.200   0.000   0.000   0.200   0.800   0.800   0.200   0.000
0.000   0.900   0.100   0.000   0.900   0.100   0.000   0.900   0.100
0.900   0.010   0.090   0.900   0.010   0.090   0.770   0.010   0.220
</snippet></ROW><ROW><id>15526008</id><snippet>answers</snippet></ROW><ROW><id>15526008</id><snippet>QuestionFormAnswer</snippet></ROW><ROW><id>15526008</id><snippet>FreeText</snippet></ROW><ROW><id>15526070</id><snippet>    if node['id'] == parent:
        parent = node['parent']
</snippet></ROW><ROW><id>15526070</id><snippet>parent</snippet></ROW><ROW><id>15526070</id><snippet>return node_list</snippet></ROW><ROW><id>15526070</id><snippet>node_list</snippet></ROW><ROW><id>15526070</id><snippet>def pop_list(nodes=None, parent=None, node_list=None):
    if parent is None:
        return node_list
    node_list.append([])
    for node in nodes:
        if node['parent'] == parent:
            node_list[-1].append(node)
        if node['id'] == parent:
            next_parent = node['parent']

    pop_list(nodes, next_parent, node_list)
    return node_list

&gt;&gt;&gt; print pop_list(nodes, 5, node_list)
[[{'id': 6, 'parent': 5}], [{'id': 4, 'parent': 2}, {'id': 5, 'parent': 2}], [{'id': 2, 'parent': 1}, {'id': 3, 'parent': 1}]]  
</snippet></ROW><ROW><id>15526703</id><snippet>myList = [[0,0] for _ in range(myLen)]
</snippet></ROW><ROW><id>15526703</id><snippet>myList = [[0,0]]
for _ in range(myLen - 1):
    myList.append(myList[0])
</snippet></ROW><ROW><id>15526703</id><snippet>myList = []
for _ in range(myLen):
    myList.append([0,0])
</snippet></ROW><ROW><id>15526787</id><snippet>extend()</snippet></ROW><ROW><id>15526787</id><snippet>append()</snippet></ROW><ROW><id>15526787</id><snippet>n_brace.append([numEL, valueLX[j],valueB[jj], el[2]])
</snippet></ROW><ROW><id>15526787</id><snippet>with open("C:/Abaqus_JOBS/brace.txt", 'w') as fbrace:
    for row in n_brace:
        print &gt;&gt;fbrace, ', '.join(map(str, row))
</snippet></ROW><ROW><id>15526901</id><snippet>import color

class Color(color.Color):
    ...
</snippet></ROW><ROW><id>15526901</id><snippet>color.Color</snippet></ROW><ROW><id>15526901</id><snippet>object</snippet></ROW><ROW><id>15526901</id><snippet>class Color(object):
    ...
</snippet></ROW><ROW><id>15526921</id><snippet>regex</snippet></ROW><ROW><id>15526921</id><snippet>(?:foo){s&lt;=2} 
</snippet></ROW><ROW><id>15526921</id><snippet>&gt;&gt;&gt; regex.findall(r'(?:foo){s&lt;=2}', 'xxfoo')
['xfo']
&gt;&gt;&gt; regex.findall(r'(?:foo){s&lt;=2}', 'xxfoo', regex.BESTMATCH)
['foo']
</snippet></ROW><ROW><id>15526927</id><snippet>def load_tests(loader, standard_tests, pattern):
    # top level directory cached on loader instance
try:
    this_dir = os.path.dirname(__file__)
    package_tests = loader.discover(start_dir=this_dir, pattern=pattern)
    standard_tests.addTests(package_tests)
except Exception as e:
    print 'Error loading tests: %s' % str(e)
return standard_tests
</snippet></ROW><ROW><id>15526928</id><snippet>''.join(n for n in phone_str if n.isdigit())
</snippet></ROW><ROW><id>15526928</id><snippet>x = row.translate(None, string.digits)
</snippet></ROW><ROW><id>15526928</id><snippet>list = x.split()
</snippet></ROW><ROW><id>15527094</id><snippet>data</snippet></ROW><ROW><id>15527094</id><snippet>'date': None</snippet></ROW><ROW><id>15527094</id><snippet>new_data = {'user': self.user, 'category': c, 'date': datetime.datetime.now()}
data.update(new_data)
city_obj = City(**data)
</snippet></ROW><ROW><id>15527094</id><snippet>data</snippet></ROW><ROW><id>15527672</id><snippet>&gt;&gt;&gt; for x in zip(*p):
    for i in range(len(x)-1):
        print '{0} - {1} = {2}'.format(x[i+1],x[i],x[i+1]-x[i])


17 - 9 = 8
14 - 17 = -3
14 - 14 = 0
14 - 14 = 0
14 - 9 = 5
15 - 14 = 1
15 - 15 = 0
15 - 15 = 0
18 - 9 = 9
17 - 18 = -1
17 - 17 = 0
15 - 17 = -2
</snippet></ROW><ROW><id>15527708</id><snippet>import re
text = re.sub('\s*\n\s*', '', text)
</snippet></ROW><ROW><id>15527708</id><snippet>&lt;/attack_headline&gt;</snippet></ROW><ROW><id>15527708</id><snippet>re.sub('(?&lt;!&lt;\/attack_headline&gt;)\s*\n\s*', '',  x)
</snippet></ROW><ROW><id>15527860</id><snippet>ipaddress</snippet></ROW><ROW><id>15527860</id><snippet>import ipaddress

def ipEntered():
    while True:
        try:
            val = input("Please enter the ip address of the server you wish to connect with:")
            return ipaddress.ip_address(val)
        except ValueError:
            print("Not a valid IP address")
</snippet></ROW><ROW><id>15527860</id><snippet>"100.200.30.40"</snippet></ROW><ROW><id>15527860</id><snippet>:</snippet></ROW><ROW><id>15527860</id><snippet>return ipaddress.IPv4Address(val)</snippet></ROW><ROW><id>15528253</id><snippet>from django import template
from django.template.loader import render_to_string

register = template.Library()

@register.simple_tag
def tag_cloud(): 

    tags = ['foo', 'bar']         # Fetch the tag cloud data here

    return render_to_string('tag_cloud_template.html', {'tags: tags})
</snippet></ROW><ROW><id>15528362</id><snippet>update</snippet></ROW><ROW><id>15528380</id><snippet>u</snippet></ROW><ROW><id>15528810</id><snippet>word = raw_input("what words do you want to turn into past tense?")
word2 = word

if word2.endswith("re"):
    word3 = word2[:-2] + 'u'
    print word3

elif word2.endswith("ir"):
    word3 = word2[:-2] + "i"
    print word3

elif word2.endswith("er"):
    word3 = word2[:-2] + "e"
    print word3

else:
    print "nope"
</snippet></ROW><ROW><id>15528810</id><snippet>what words do you want to turn into past tense?sentir
senti
</snippet></ROW><ROW><id>15528810</id><snippet>what words do you want to turn into past tense?manger
mange
</snippet></ROW><ROW><id>15528952</id><snippet>for</snippet></ROW><ROW><id>15528952</id><snippet>zip</snippet></ROW><ROW><id>15528952</id><snippet>hmag = np.array(hmag)
jmag = np.array(jmah)

colorjh = jmag - hmag
idx_c = (colorjh &gt; 0) &amp; (colorjh &lt; 1) # where condition on c is met
idx_h = (hmag &gt; 10) &amp; (hmag &lt; 13) # where condition on h is met
idx = idx_c &amp; idx_h # where both conditions are met

plt.scatter(colorjh[idx], hmag[idx], c='g', s=1, alpha=0.05)
</snippet></ROW><ROW><id>15528984</id><snippet>statusLabel = Label(root,text="Oh, hello.").pack()
</snippet></ROW><ROW><id>15528984</id><snippet>.pack()</snippet></ROW><ROW><id>15528984</id><snippet>None</snippet></ROW><ROW><id>15528984</id><snippet>statusLabel</snippet></ROW><ROW><id>15528984</id><snippet>Label</snippet></ROW><ROW><id>15528984</id><snippet>statusLabel = Label(root,text="Oh, hello.")
statusLabel.pack()
</snippet></ROW><ROW><id>15529142</id><snippet>background_color</snippet></ROW><ROW><id>15529142</id><snippet>kivy.uix.stacklayout.StackLayout</snippet></ROW><ROW><id>15529142</id><snippet>kivy.uix.layout.Layout</snippet></ROW><ROW><id>15529142</id><snippet>kivy.uix.widget.Widget</snippet></ROW><ROW><id>15529142</id><snippet>StackLayout:
    canvas:
        Color:
            rgba: 1, 1, 1, 1
        Rectangle:
            pos: self.pos
            size: self.size
</snippet></ROW><ROW><id>15529208</id><snippet>0</snippet></ROW><ROW><id>15529208</id><snippet>&gt;&gt;&gt; 016
14
</snippet></ROW><ROW><id>15529208</id><snippet>&gt;&gt;&gt; str(1).zfill(4)
'0001'
</snippet></ROW><ROW><id>15529208</id><snippet>str(df2['district_code']).zfill(4)
</snippet></ROW><ROW><id>15529247</id><snippet>recarray</snippet></ROW><ROW><id>15529247</id><snippet>__dir__</snippet></ROW><ROW><id>15529247</id><snippet>numpy</snippet></ROW><ROW><id>15529247</id><snippet>numpy</snippet></ROW><ROW><id>15529247</id><snippet>isinstance</snippet></ROW><ROW><id>15529247</id><snippet>object.__dir__</snippet></ROW><ROW><id>15529247</id><snippet>recarray</snippet></ROW><ROW><id>15529247</id><snippet>__dict__</snippet></ROW><ROW><id>15529247</id><snippet>__slots__</snippet></ROW><ROW><id>15529247</id><snippet>__dir__</snippet></ROW><ROW><id>15529247</id><snippet>__dir__</snippet></ROW><ROW><id>15529247</id><snippet>__dict__</snippet></ROW><ROW><id>15529247</id><snippet>__slots__</snippet></ROW><ROW><id>15529247</id><snippet>__getattr__</snippet></ROW><ROW><id>15529247</id><snippet>__getattribute__</snippet></ROW><ROW><id>15529390</id><snippet>gzip</snippet></ROW><ROW><id>15529390</id><snippet>import gzip
import cStringIO

def decompressStringToFile(value, outputFile):
  """
  decompress the given string value (which must be valid compressed gzip
  data) and write the result in the given open file.
  """
  stream = cStringIO.StringIO(value)
  decompressor = gzip.GzipFile(fileobj=stream, mode='r')
  while True:  # until EOF
    chunk = decompressor.read(8192)
    if not chunk:
      decompressor.close()
      outputFile.close()
      return 
    outputFile.write(chunk)

def compressFileToString(inputFile):
  """
  read the given open file, compress the data and return it as string.
  """
  stream = cStringIO.StringIO()
  compressor = gzip.GzipFile(fileobj=stream, mode='w')
  while True:  # until EOF
    chunk = inputFile.read(8192)
    if not chunk:  # EOF?
      compressor.close()
      return stream.getvalue()
    compressor.write(chunk)
</snippet></ROW><ROW><id>15529390</id><snippet>cStringIO.StringIO()</snippet></ROW><ROW><id>15529447</id><snippet>import zipfile

with zipfile.ZipFile() as input_zipfile:
    for f in input_zipfile.namelist():
        lines = input_zipfile.read(f).split("\n")
        print lines[1]
</snippet></ROW><ROW><id>15529493</id><snippet>self.label111['text']</snippet></ROW><ROW><id>15529493</id><snippet>"."</snippet></ROW><ROW><id>15529493</id><snippet>self.label111 = Tkinter.Label(self, bg ='red', text=random_row.QuestionID)
# ...
SQL = 'SELECT Hint FROM tblQuestion WHERE QuestionID = %s' % self.label111['text']
</snippet></ROW><ROW><id>15529605</id><snippet>on_draw</snippet></ROW><ROW><id>15529605</id><snippet>on_mouse_press</snippet></ROW><ROW><id>15529605</id><snippet>pyglet.window.Window</snippet></ROW><ROW><id>15529605</id><snippet>dispatch_event()</snippet></ROW><ROW><id>15529605</id><snippet>EventLoop</snippet></ROW><ROW><id>15529605</id><snippet>on_draw</snippet></ROW><ROW><id>15529605</id><snippet>flip()</snippet></ROW><ROW><id>15529605</id><snippet>class EventLoop(event.EventDispatcher):
    # ...
    def idle(self):
        # ...
        # Redraw all windows
        for window in app.windows:
            if redraw_all or (window._legacy_invalid and window.invalid):
                window.switch_to()
                window.dispatch_event('on_draw')
                window.flip()
                window._legacy_invalid = False
</snippet></ROW><ROW><id>15529813</id><snippet>set(list1).difference(list2)
set(list2).difference(list1)
</snippet></ROW><ROW><id>15529813</id><snippet>&gt;&gt;&gt; print 'Missing values =', ','.join(set(list1).difference(list2))
Missing values = 1,3,2
&gt;&gt;&gt; print 'Additional values =', ','.join(set(list2).difference(list1))
Additional values = 7,8
</snippet></ROW><ROW><id>15529813</id><snippet>set1, set2 = set(list1), set(list2)
[i for i in list1 if i not in set2]
[i for i in list2 if i not in set1]
</snippet></ROW><ROW><id>15529813</id><snippet>&gt;&gt;&gt; print 'Missing values =', ','.join([i for i in list1 if i not in set2])
Missing values = 1,2,3
&gt;&gt;&gt; print 'Missing values =', ','.join([i for i in list2 if i not in set1])
Additional values = 7,8
</snippet></ROW><ROW><id>15530226</id><snippet>with open(input_file) as f:
   reader = csv.DictReader(f)
   cars_list = tuple([row["Model"] for row in reader])
</snippet></ROW><ROW><id>15530288</id><snippet>.split()</snippet></ROW><ROW><id>15530288</id><snippet>with open('dist.all.last') as inputfile:
    names = [line.split()[0] for line in inputfile if line.strip()]
</snippet></ROW><ROW><id>15530288</id><snippet>import random
with open('dist.all.last') as inputfile:
    name = None
    for i, line in enumerate(inputfile):
        r = random.randint(0, i)
        if not r and line.strip():
            name = line.split()[0]
</snippet></ROW><ROW><id>15530313</id><snippet>pygame.mixer.music.play()
</snippet></ROW><ROW><id>15530313</id><snippet>sound = pygame.mixer.music.load("dodgeSound.mp3")



if event.type == KEYDOWN:

            sound.play()
</snippet></ROW><ROW><id>15530313</id><snippet>sound = pygame.mixer.Sound("dodgeSound.mp3")
</snippet></ROW><ROW><id>15530341</id><snippet>import numpy as np
import scipy as sp
</snippet></ROW><ROW><id>15530341</id><snippet>from ... import *</snippet></ROW><ROW><id>15530341</id><snippet>numpy</snippet></ROW><ROW><id>15530341</id><snippet>scipy</snippet></ROW><ROW><id>15530341</id><snippet>&gt;&gt;&gt; any(['foo'])
True
&gt;&gt;&gt; from scipy import *
&gt;&gt;&gt; any(['foo'])

Traceback (most recent call last):
  File "&lt;pyshell#2&gt;", line 1, in &lt;module&gt;
     any(['foo'])
  File "C:\Python27\lib\site-packages\numpy\core\fromnumeric.py", line 1575, in any
    return _wrapit(a, 'any', axis, out)
  File "C:\Python27\lib\site-packages\numpy\core\fromnumeric.py", line 37, in _wrapit
    result = getattr(asarray(obj),method)(*args, **kwds)
TypeError: cannot perform reduce with flexible type
</snippet></ROW><ROW><id>15530341</id><snippet>any</snippet></ROW><ROW><id>15530341</id><snippet>scipy.any</snippet></ROW><ROW><id>15530341</id><snippet>any</snippet></ROW><ROW><id>15530613</id><snippet>import time
from threading import Thread

answer = None

def check():
    time.sleep(2)
    if answer != None:
        return
    print "Too Slow"

Thread(target = check).start()

answer = raw_input("Input something: ")
</snippet></ROW><ROW><id>15530712</id><snippet>from __future__ import division
from collections import Counter
import random
import string

VOWELS = "aeiou"
CONSONANTS = "".join(set(string.lowercase) - set(VOWELS))

def dealHand(n):
    numVowels = n // 3
    lettersets = [VOWELS] * numVowels + [CONSONANTS] * (n - numVowels)
    return Counter(c
        for letterset in lettersets
        for c in random.choice(letterset)
    )
</snippet></ROW><ROW><id>15530712</id><snippet>def dealHand2(n):
    while True:
        candidate = dealHand(n)
        if all(v &lt;= 2 for v in candidate.values()):
            return candidate
</snippet></ROW><ROW><id>15530738</id><snippet>In [11]: list(map(list, set(map(tuple, L))))
Out[11]: [[3, 4, 5], [1, 2, 3]]
</snippet></ROW><ROW><id>15530917</id><snippet>.__hash__()</snippet></ROW><ROW><id>15530917</id><snippet>.__eq__()</snippet></ROW><ROW><id>15530917</id><snippet>.__eq__()</snippet></ROW><ROW><id>15530917</id><snippet>True</snippet></ROW><ROW><id>15530917</id><snippet>.__hash__()</snippet></ROW><ROW><id>15530917</id><snippet>hash()</snippet></ROW><ROW><id>15530917</id><snippet>class Foo(object):
    def __init__(self, bar, baz):
        self.bar = bar
        self.baz = baz

    def __eq__(self, other):
        if isinstance(other, type(self)):
            return self.bar == other.bar and self.baz == other.baz
        return False

    def __hash__(self):
        return hash(self.bar) ^ hash(self.baz)
</snippet></ROW><ROW><id>15530917</id><snippet>&gt;&gt;&gt; foo1 = Foo('ham', 'eggs')
&gt;&gt;&gt; foo2 = Foo('ham', 'eggs')
&gt;&gt;&gt; foo3 = Foo('spam', 'vikings')
&gt;&gt;&gt; foo1 == foo2
True
&gt;&gt;&gt; foo1 == foo3
False
&gt;&gt;&gt; hash(foo1)
1838536788654183919
&gt;&gt;&gt; hash(foo1) == hash(foo2)
True
&gt;&gt;&gt; hash(foo1) == hash(foo3)
False
&gt;&gt;&gt; mapping = {}
&gt;&gt;&gt; mapping[foo1] = 'Monty Python'
&gt;&gt;&gt; foo1 in mapping
True
&gt;&gt;&gt; foo2 in mapping
True
&gt;&gt;&gt; foo3 in mapping
False
&gt;&gt;&gt; mapping[foo2]
'Monty Python'
</snippet></ROW><ROW><id>15530923</id><snippet>grid_columnconfigure</snippet></ROW><ROW><id>15530923</id><snippet>winAddNew.grid_columnconfigure(1, weight=1)
</snippet></ROW><ROW><id>15531122</id><snippet>"</snippet></ROW><ROW><id>15531122</id><snippet>"substring"</snippet></ROW><ROW><id>15531122</id><snippet>import re
str = 'a    b    c  "d   e   f"'  
str = re.sub(r'("[^"]*")|[ \t]+', lambda m: m.group(1) if m.group(1) else ' ', str)

print(str)
#'a b c "d   e   f"'
</snippet></ROW><ROW><id>15531122</id><snippet>("[^"]*")|[ \t]+</snippet></ROW><ROW><id>15531122</id><snippet>[ \t]+</snippet></ROW><ROW><id>15531122</id><snippet>()</snippet></ROW><ROW><id>15531122</id><snippet>m.group(1)</snippet></ROW><ROW><id>15531122</id><snippet>def repl(match):
    quoted = match.group(1)
    return quoted if quoted else ' '

str = re.sub(r'("[^"]*")|[ \t]+', repl, str)
</snippet></ROW><ROW><id>15531320</id><snippet>get_tweet_text</snippet></ROW><ROW><id>15531320</id><snippet>return text</snippet></ROW><ROW><id>15531392</id><snippet>import a_module
print a_module.__file__
</snippet></ROW><ROW><id>15531392</id><snippet>import os, a_module
path = os.path.dirname(a_module.__file__)
</snippet></ROW><ROW><id>15531392</id><snippet>def foo(path):
    f=read(path,"r")
</snippet></ROW><ROW><id>15531392</id><snippet>import os, test1
path = os.path.dirname(test1.__file__)
test1.foo(path + "/test1.dat")
</snippet></ROW><ROW><id>15531706</id><snippet>subparsers.add_parser()</snippet></ROW><ROW><id>15531706</id><snippet>ArgumentParser</snippet></ROW><ROW><id>15531706</id><snippet>argparse.ArgumentParser()</snippet></ROW><ROW><id>15531706</id><snippet>RawTextHelpFormatter</snippet></ROW><ROW><id>15531706</id><snippet>formatter_class</snippet></ROW><ROW><id>15531706</id><snippet>&gt;&gt;&gt; import argparse
&gt;&gt;&gt; parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
&gt;&gt;&gt; subparsers = parser.add_subparsers()
</snippet></ROW><ROW><id>15531706</id><snippet>formatter_class</snippet></ROW><ROW><id>15531706</id><snippet>&gt;&gt;&gt; parser_start = subparsers.add_parser('stop', formatter_class=argparse.RawTextHelpFormatter)
</snippet></ROW><ROW><id>15531706</id><snippet>&gt;&gt;&gt; parser_start.add_argument("file", help="firstline\nnext line\nlast line")
_StoreAction(option_strings=[], dest='file', nargs=None, const=None, default=None, type=None, choices=None, help='firstline\nnext line\nlast line', metavar=None)

&gt;&gt;&gt; print parser.parse_args(['stop', '--help'])
usage:  stop [-h] file

positional arguments:
  file        firstline
              next line
              last line

optional arguments:
  -h, --help  show this help message and exit
</snippet></ROW><ROW><id>15531898</id><snippet>class Spheroid(object):
    def __init__(self, a, b):
        self.long  = a
        self.short = b

    @property
    def volume(self):
        return 4 * pi / 3 * self.long * self.short * self.short
</snippet></ROW><ROW><id>15531898</id><snippet>.volume</snippet></ROW><ROW><id>15531898</id><snippet>&gt;&gt;&gt; s = Spheroid(2, 3)
&gt;&gt;&gt; s.volume
75.39822368615503
</snippet></ROW><ROW><id>15531898</id><snippet>property</snippet></ROW><ROW><id>15531898</id><snippet>object</snippet></ROW><ROW><id>15531898</id><snippet>&gt;&gt;&gt; s.volume = None
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: can't set attribute
</snippet></ROW><ROW><id>15531898</id><snippet>class Spheroid(object):
    _volume = None

    def __init__(self, a, b):
        self.long  = a
        self.short = b

    @property
    def volume(self):
        if self._volume is None:
            self._volume = 4 * pi / 3 * self.long * self.short * self.short
        return self._volume
</snippet></ROW><ROW><id>15531898</id><snippet>Spheroid</snippet></ROW><ROW><id>15531898</id><snippet>__init__</snippet></ROW><ROW><id>15531898</id><snippet>@property</snippet></ROW><ROW><id>15531898</id><snippet>class Spheroid(object):
    def __init__(self, a, b):
        self.long  = a
        self.short = b

    @property
    def volume(self):
        return 4 * pi / 3 * self.long * self.short * self.short

    @volume.setter
    def volume(self, newvolume):
        # adjust the short radius
        self.short = sqrt(newvolume / (4 * pi / 3 * self.long))
</snippet></ROW><ROW><id>15531898</id><snippet>&gt;&gt;&gt; s = Spheroid(2, 1)
&gt;&gt;&gt; s.volume
8.377580409572781
&gt;&gt;&gt; s.volume = 75.39822368615503
&gt;&gt;&gt; s.long, s.short
(2, 3.0)
</snippet></ROW><ROW><id>15532289</id><snippet>from xml.etree import ElementTree

tree = ElementTree.parse(somefile)

for network in tree.findall('.//network_object'):
    for name in network.findall('.//Name'):
        if name.text is not None and 'cluster' in name.text:
            continue  # skip this one
</snippet></ROW><ROW><id>15532447</id><snippet>paragraph</snippet></ROW><ROW><id>15532447</id><snippet>from nltk.tokenize import sent_tokenize

paragraph = "How does chickens harden over the acceptance? Chickens comprises coffee. Chickens crushes a popular vet next to the eater. Will chickens sweep beneath a project? Coffee funds chickens. Chickens abides against an ineffective drill."
highlights = ["vet","funds"]
sentencesWithHighlights = []
</snippet></ROW><ROW><id>15532447</id><snippet>for sentence in sent_tokenize(paragraph):
    for highlight in highlights:
        if highlight in sentence:
            sentencesWithHighlights.append(sentence)
            break
</snippet></ROW><ROW><id>15532447</id><snippet>for</snippet></ROW><ROW><id>15532447</id><snippet>sentence</snippet></ROW><ROW><id>15532447</id><snippet>highlight</snippet></ROW><ROW><id>15532447</id><snippet>sentence</snippet></ROW><ROW><id>15532447</id><snippet>highlight</snippet></ROW><ROW><id>15532447</id><snippet>highlightIndices = [100,169]
subtractFromIndex = 0
for sentence in sent_tokenize(paragraph):
    for index in highlightIndices:
        if 0 &lt; index - subtractFromIndex &lt; len(sentence):
            sentencesWithHighlights.append(sentence)
            break
    subtractFromIndex += len(sentence)
</snippet></ROW><ROW><id>15532447</id><snippet>sentencesWithHighlights = ['Chickens crushes a popular vet next to the eater.', 'Coffee funds chickens.']
</snippet></ROW><ROW><id>15532900</id><snippet>__init__</snippet></ROW><ROW><id>15532900</id><snippet>class FooBar():
    def __init__(self):
        self.somelist = []
</snippet></ROW><ROW><id>15533009</id><snippet>After for 0</snippet></ROW><ROW><id>15533009</id><snippet>Before for 0</snippet></ROW><ROW><id>15533009</id><snippet>def findversion(aNode, aList, aFlag, i=1):
    print "FindVersion ", aNode[0:1], 'call:', i
    print "Findversion ", aFlag, 'call:', i
    if aNode[1].find('Software') != -1:
        aFlag = 1
        aList.append(aNode[1])
    if aFlag == 1 and aNode[0] == 'b':
        aList.append(aNode[1])
    print "Before for ", aFlag, 'call:', i
    for elem in aNode[2:]:
        print "After for ", aFlag, 'call:', i
        findversion(elem,aList,aFlag,i+1)
</snippet></ROW><ROW><id>15533009</id><snippet>FindVersion  ['tr'] call: 1
Findversion  0 call: 1
Before for  0 call: 1
After for  0 call: 1
FindVersion  ['td'] call: 2
Findversion  0 call: 2
Before for  1 call: 2         # this is from the recursive call
After for  0 call: 1          # this is from the original call
FindVersion  ['td'] call: 2
Findversion  0 call: 2
Before for  0 call: 2
After for  0 call: 2
FindVersion  ['b'] call: 3
Findversion  0 call: 3
Before for  0 call: 3
Main  ['Software version']
</snippet></ROW><ROW><id>15533356</id><snippet>/usr/lib/pymodules/python2.7/matplotlib/axes.pyc in fill_between(self, x, y1, y2, where, interpolate, **kwargs)

   6542                 start = xslice[0], y2slice[0]
-&gt; 6543                 end = xslice[-1], y2slice[-1]

[...]
/usr/local/lib/python2.7/dist-packages/pandas-0.11.0.dev_fc8de6d-py2.7-linux-i686.egg/pandas/core/index.pyc in get_value(self, series, key)

    725         try:
--&gt; 726             return self._engine.get_value(series, key)
    727         except KeyError, e1:
    728             if len(self) &gt; 0 and self.inferred_type == 'integer':

[...]

KeyError: -1L
</snippet></ROW><ROW><id>15533356</id><snippet>data.X</snippet></ROW><ROW><id>15533356</id><snippet>data.Y</snippet></ROW><ROW><id>15533356</id><snippet>Series</snippet></ROW><ROW><id>15533356</id><snippet>[-1]</snippet></ROW><ROW><id>15533356</id><snippet>-1</snippet></ROW><ROW><id>15533356</id><snippet>-1</snippet></ROW><ROW><id>15533356</id><snippet>pandas</snippet></ROW><ROW><id>15533356</id><snippet>KeyError</snippet></ROW><ROW><id>15533356</id><snippet>IndexError</snippet></ROW><ROW><id>15533369</id><snippet>lxml.etree</snippet></ROW><ROW><id>15533369</id><snippet>lxml.html</snippet></ROW><ROW><id>15533369</id><snippet>&gt;&gt;&gt; import base64
&gt;&gt;&gt; import lxml.etree
&gt;&gt;&gt; text = "&lt;attack_headline&gt;&lt;site_id&gt;1&lt;/site_id&gt;&lt;category&gt;U1FMIEluamVjdGlvbg==&lt;/category&gt;&lt;subcategory&gt;Q2xhc3NpYyBTUUwgQ29tbWVudCAmcXVvdDstLSZxdW90Ow==&lt;/subcategory&gt;&lt;client_ip&gt;192.168.1.102&lt;/client_ip&gt;&lt;date&gt;1363807248&lt;/date&gt;&lt;gmt_diff&gt;0&lt;/gmt_diff&gt;&lt;reference_id&gt;E711-3EFB-5F43-5FAC&lt;/reference_id&gt;&lt;/attack_headline&gt;"
&gt;&gt;&gt; xml = lxml.etree.fromstring(text)
&gt;&gt;&gt; for tag_with_base64 in ('category','subcategory'):
...     node = xml.find(tag_with_base64)
...     if node:
...         node.text = base64.b64decode(node.text)
&gt;&gt;&gt; lxml.etree.tostring(xml)
'&lt;attack_headline&gt;&lt;site_id&gt;1&lt;/site_id&gt;&lt;category&gt;SQL Injection&lt;/category&gt;&lt;subcategory&gt;Classic SQL Comment "--"&lt;/subcategory&gt;&lt;client_ip&gt;192.168.1.102&lt;/client_ip&gt;&lt;date&gt;1363807248&lt;/date&gt;&lt;gmt_diff&gt;0&lt;/gmt_diff&gt;&lt;reference_id&gt;E711-3EFB-5F43-5FAC&lt;/reference_id&gt;&lt;/attack_headline&gt;'
</snippet></ROW><ROW><id>15533407</id><snippet>q = db.Query(Post)
q.filter('receiver =', uId)
</snippet></ROW><ROW><id>15533407</id><snippet>Post</snippet></ROW><ROW><id>15533407</id><snippet>db.ReferenceProperty</snippet></ROW><ROW><id>15533407</id><snippet>submitter</snippet></ROW><ROW><id>15533407</id><snippet>receiver</snippet></ROW><ROW><id>15533407</id><snippet>class Post(db.Model):
post = db.StringProperty(required = True, multiline = True)
submitter = db.ReferenceProperty(reference_class=User, required = True)
receiver = db.ReferenceProperty(reference_class=User, required = True)
created = db.DateTimeProperty(auto_now_add = True)
</snippet></ROW><ROW><id>15533689</id><snippet>Bar</snippet></ROW><ROW><id>15533689</id><snippet>show</snippet></ROW><ROW><id>15533689</id><snippet>def main():
    app = QtGui.QApplication(sys.argv)
    ex = Example()
    bar = Bar()
    bar.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>15533689</id><snippet>QMainWindow</snippet></ROW><ROW><id>15533689</id><snippet>import sys
from PyQt4 import QtGui, QtCore

class Bar(QtGui.QMainWindow):

    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        self.initUI()

    def initUI(self):
        self.setGeometry(300,300,200,200)
        self.b1 = QtGui.QPushButton("Button", self)
        self.b1.move(100,100)
        self.setWindowTitle("Example")
        self.statusBar().showMessage("Statusbar")

def main():
    app = QtGui.QApplication(sys.argv)
    bar = Bar()
    bar.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>15534247</id><snippet>def add_numbers(a):
    total = 0
    i = 0
    while a[i] &lt; 10 and i &lt; len(a):
        total = total + a[i]
        i = i + 1
    return total        # return  should be outside the loop
</snippet></ROW><ROW><id>15534268</id><snippet>(?&lt;!...)</snippet></ROW><ROW><id>15534268</id><snippet>if re.search(r'(?&lt;!Distillr)\\AcroTray\.exe', filePath):
</snippet></ROW><ROW><id>15534268</id><snippet>In [45]: re.search(r'(?&lt;!Distillr)\\AcroTray\.exe', r'C:\SomeDir\AcroTray.exe')
Out[45]: &lt;_sre.SRE_Match at 0xb57f448&gt;
</snippet></ROW><ROW><id>15534268</id><snippet>In [46]: re.search(r'(?&lt;!Distillr)\\AcroTray\.exe', r'C:\Distillr\AcroTray.exe')
# None
</snippet></ROW><ROW><id>15534440</id><snippet>class A(object) :
    def __init__(self) :
        d = {"arg1" : (1, "arg1_v"),
             "arg2" : (2, "arg2_v")}
        for key, value in d.items() :
            setattr(self, key, f(*value))

a = A()
print a.arg1
print a.arg2
</snippet></ROW><ROW><id>15534440</id><snippet>def f_arg1(x) :
    return x
def f_arg2(x, y) :
    return (x, y)

class A(object) :
    def __init__(self) :
        d = {"arg1" : ((1,), f_arg1),
             "arg2" : ((2,3), f_arg2)}
        for key, value in d.items() :
            a, f = value
            setattr(self, key, f(*a))

a = A()
print a.arg1
print a.arg2
</snippet></ROW><ROW><id>15534449</id><snippet>declared_attr</snippet></ROW><ROW><id>15534449</id><snippet>__init__</snippet></ROW><ROW><id>15534449</id><snippet>declarative</snippet></ROW><ROW><id>15534449</id><snippet>super()</snippet></ROW><ROW><id>15534449</id><snippet>import datetime
from sqlalchemy import Column, DateTime, Integer, String
from sqlalchemy.ext.declarative import declared_attr, declarative_base

class BaseMixin(object):
    @declared_attr
    def last_updated(cls):
        return Column(DateTime)

    def __init__(self, last_updated, *args, **kwargs):
        super(BaseMixin, self).__init__(last_updated=datetime.datetime.now(), *args, **kwargs)
        print "BaseMixin.__init__"
        self.last_updated = last_updated

ModelBase = declarative_base()
</snippet></ROW><ROW><id>15534449</id><snippet>class User(BaseMixin, ModelBase):
    """Defines the user but should also have the last_updated inherited from ModelBase"""
    __tablename__ = 'user'

    id = Column(Integer, primary_key=True)
    username = Column(String)

    def __init__(self, *args, **kwargs):
        super(User, self).__init__(last_updated=datetime.datetime.now(), *args, **kwargs)
        print "User.__init__"

if __name__ == '__main__':
    from sqlalchemy import create_engine
    from sqlalchemy.orm import sessionmaker
    engine = create_engine('sqlite:///:memory:', echo=True)
    ModelBase.metadata.create_all(engine)
    user = User(username='alice')

    Session = sessionmaker(engine)
    session = Session()
    session.add(user)
    session.commit()
</snippet></ROW><ROW><id>15534449</id><snippet>__init__</snippet></ROW><ROW><id>15534449</id><snippet>__init__</snippet></ROW><ROW><id>15534449</id><snippet>Column()</snippet></ROW><ROW><id>15534449</id><snippet>from sqlalchemy import func

class BaseMixin(object):
    @declared_attr
    def created_date(cls):
        return Column(DateTime, default=func.now())

    @declared_attr
    def modified_date(cls):
        return Column(DateTime, default=func.now(), onupdate=func.now())
</snippet></ROW><ROW><id>15534449</id><snippet>cls=</snippet></ROW><ROW><id>15534449</id><snippet>ModelBase = declarative_base(cls=BaseMixin)


class User(ModelBase):
    __tablename__ = 'user'

    id = Column(Integer, primary_key=True)
    username = Column(String)

if __name__ == '__main__':
    engine = create_engine('sqlite:///:memory:', echo=True)
    ModelBase.metadata.create_all(engine)
    user = User(username='alice')

    Session = sessionmaker(engine)
    session = Session()
    session.add(user)
    session.commit()

    session = Session()
    sameuser = session.query(User).one()
    sameuser.username = 'bob'
    session.commit()
</snippet></ROW><ROW><id>15534540</id><snippet>get</snippet></ROW><ROW><id>15534540</id><snippet>people</snippet></ROW><ROW><id>15534662</id><snippet>def find_all_paths(graph, start, end, path=[]):
        path = path + [start]
        if start == end:
            return [path]
        if start not in graph:
            return []
        paths = []
        for node in graph[start]:
            if node not in path:
                newpaths = find_all_paths(graph, node, end, path)
                for newpath in newpaths:
                    paths.append(newpath)
        return paths       

def min_path(graph, start, end):
    paths=find_all_paths(graph,start,end)
    mt=10**99
    mpath=[]
    print '\tAll paths:',paths
    for path in paths:
        t=sum(graph[i][j] for i,j in zip(path,path[1::]))
        print '\t\tevaluating:',path, t
        if t&lt;mt: 
            mt=t
            mpath=path

    e1=' '.join('{}-&gt;{}:{}'.format(i,j,graph[i][j]) for i,j in zip(mpath,mpath[1::]))
    e2=str(sum(graph[i][j] for i,j in zip(mpath,mpath[1::])))
    print 'Best path: '+e1+'   Total: '+e2+'\n'  

if __name__ == "__main__":
    graph = {'A': {'B':5, 'C':4},
             'B': {'C':3, 'D':10},
             'C': {'D':12},
             'D': {'C':5, 'E':9},
             'E': {'F':8},
             'F': {'C':7}}
    min_path(graph,'A','E')
    min_path(graph,'A','D')
    min_path(graph,'A','F')
</snippet></ROW><ROW><id>15534662</id><snippet>    All paths: [['A', 'C', 'D', 'E'], ['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'D', 'E']]
        evaluating: ['A', 'C', 'D', 'E'] 25
        evaluating: ['A', 'B', 'C', 'D', 'E'] 29
        evaluating: ['A', 'B', 'D', 'E'] 24
Best path: A-&gt;B:5 B-&gt;D:10 D-&gt;E:9   Total: 24

    All paths: [['A', 'C', 'D'], ['A', 'B', 'C', 'D'], ['A', 'B', 'D']]
        evaluating: ['A', 'C', 'D'] 16
        evaluating: ['A', 'B', 'C', 'D'] 20
        evaluating: ['A', 'B', 'D'] 15
Best path: A-&gt;B:5 B-&gt;D:10   Total: 15

    All paths: [['A', 'C', 'D', 'E', 'F'], ['A', 'B', 'C', 'D', 'E', 'F'], ['A', 'B', 'D', 'E', 'F']]
        evaluating: ['A', 'C', 'D', 'E', 'F'] 33
        evaluating: ['A', 'B', 'C', 'D', 'E', 'F'] 37
        evaluating: ['A', 'B', 'D', 'E', 'F'] 32
Best path: A-&gt;B:5 B-&gt;D:10 D-&gt;E:9 E-&gt;F:8   Total: 32
</snippet></ROW><ROW><id>15534687</id><snippet>threading.Timer</snippet></ROW><ROW><id>15534687</id><snippet>doneFlag</snippet></ROW><ROW><id>15534687</id><snippet>Timer</snippet></ROW><ROW><id>15534687</id><snippet>wx</snippet></ROW><ROW><id>15534687</id><snippet>callLater</snippet></ROW><ROW><id>15534687</id><snippet>twisted</snippet></ROW><ROW><id>15534687</id><snippet>Timer</snippet></ROW><ROW><id>15534687</id><snippet>Timer</snippet></ROW><ROW><id>15534687</id><snippet>Condition</snippet></ROW><ROW><id>15534687</id><snippet>RLock</snippet></ROW><ROW><id>15534687</id><snippet>t0 = time.time()
dur = 1.0
while True:
    time.sleep(dur)
    t1 = time.time()
    dur = 1.0 - (t1 - t0)
    if dur &lt;= 0:
        break
</snippet></ROW><ROW><id>15534813</id><snippet>re.findall()</snippet></ROW><ROW><id>15534813</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; strs='A.21,48;B.64,91;C.95,125;D.139,166;E.175,200'
&gt;&gt;&gt; re.findall(r"\d+",strs)
['21', '48', '64', '91', '95', '125', '139', '166', '175', '200']
</snippet></ROW><ROW><id>15534813</id><snippet>re.sub()</snippet></ROW><ROW><id>15534813</id><snippet>&gt;&gt;&gt; re.sub(r"[A-Z;,.]"," ",strs).split()
['21', '48', '64', '91', '95', '125', '139', '166', '175', '200']
</snippet></ROW><ROW><id>15534813</id><snippet>Help on function findall in module re:

findall(pattern, string, flags=0)
Return a list of all non-overlapping matches in the string.

If one or more groups are present in the pattern, return a
list of groups; this will be a list of tuples if the pattern
has more than one group.

Empty matches are included in the result.
</snippet></ROW><ROW><id>15534984</id><snippet>...
ax2 = ax1.twiny()
a,b = 0,25000
ax1.set_ylim(a,b)
ax2.set_ylim(a,b)
</snippet></ROW><ROW><id>15535204</id><snippet>array_slice</snippet></ROW><ROW><id>15535204</id><snippet>array_slice($data_ar, 4);
</snippet></ROW><ROW><id>15535220</id><snippet>os.listdir()</snippet></ROW><ROW><id>15535220</id><snippet>path = r"C:\Program Files (x86)\Folder\Folder"
for filename in os.listdir(path):
    with open(os.path.join(path, filename)) as f:            
</snippet></ROW><ROW><id>15535246</id><snippet>&gt;&gt;&gt; 'test\n'[:-1]
'test'
</snippet></ROW><ROW><id>15535246</id><snippet>&gt;&gt;&gt; ''[:-1]
''
</snippet></ROW><ROW><id>15535362</id><snippet>a or 'Not None!'</snippet></ROW><ROW><id>15535389</id><snippet>import sys
import subprocess

logfile = open('logfile', 'w')
proc=subprocess.Popen(['cat', 'file'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
for line in proc.stdout:
    sys.stdout.write(line)
    logfile.write(line)
proc.wait()
</snippet></ROW><ROW><id>15535464</id><snippet>x + y</snippet></ROW><ROW><id>15535464</id><snippet>x + y</snippet></ROW><ROW><id>15535464</id><snippet>print</snippet></ROW><ROW><id>15535464</id><snippet>return</snippet></ROW><ROW><id>15535464</id><snippet>print</snippet></ROW><ROW><id>15535464</id><snippet>print</snippet></ROW><ROW><id>15535531</id><snippet>import subprocess
import select

cmd = subprocess.Popen(['bash'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)

poll = select.poll()
poll.register(cmd.stdout.fileno(),select.POLLIN)

# Write the first command
command = "export greeting=hello\n"
cmd.stdin.write(command)
cmd.stdin.flush() # Must include this to ensure data is passed to child process
ready = poll.poll(500)
if ready:
   result = cmd.stdout.readline()
   print result

# Write the second command
command = "echo $greeting world\n"
cmd.stdin.write(command)
cmd.stdin.flush() # Must include this to ensure data is passed to child process
ready = poll.poll(500)
if ready:
   result = cmd.stdout.readline()
   print result
</snippet></ROW><ROW><id>15535635</id><snippet>M/X.py</snippet></ROW><ROW><id>15535635</id><snippet>M/_X.py</snippet></ROW><ROW><id>15535635</id><snippet>M/__init__.py</snippet></ROW><ROW><id>15535635</id><snippet>from ._X import f</snippet></ROW><ROW><id>15535635</id><snippet>X</snippet></ROW><ROW><id>15535635</id><snippet>_X</snippet></ROW><ROW><id>15535751</id><snippet>dates = sorted([datetime.strptime(regex_obtained_str, '%B %d, %Y, %I:%M:%S %p') 
                for regex_obtained_str in strings])
l = [date.strftime('%m/%d/%Y %I:%M:%S %p') for date in dates]
</snippet></ROW><ROW><id>15535800</id><snippet>class OpticalTransition(object):
    def __init__(self, chemical, i, j=None, k=0)
        self.chemical = chemical
        self.i = i
        self.k = k
        self.j = j if j is not None else i
</snippet></ROW><ROW><id>15535800</id><snippet>j</snippet></ROW><ROW><id>15535800</id><snippet>k</snippet></ROW><ROW><id>15535800</id><snippet>OpticalTransition('sodium', 5, 100, 27)</snippet></ROW><ROW><id>15535800</id><snippet>j</snippet></ROW><ROW><id>15535800</id><snippet>k</snippet></ROW><ROW><id>15535800</id><snippet>OpticalTransition('sodium', 5, k=27)</snippet></ROW><ROW><id>15535913</id><snippet>import urllib2

def open_url_with_default_protocol(*args, **kwargs):
    #  Use the HTTP scheme by default if none is given
    #  pass through all other arguments to urllib2.urlopen

    default_scheme = 'http://'

    url = args[0]
    scheme, address = urllib2.splittype(url)

    if not scheme:
        #  Replace the url in the args tuple by a URL with the default scheme
        args = (default_scheme + args[0],) + args[1:]

    return urllib2.urlopen(*args, **kwargs)
</snippet></ROW><ROW><id>15535913</id><snippet>&gt;&gt;&gt; open_url_with_default_protocol('http://google.com')
&lt;addinfourl at 4496800872 whose fp = &lt;socket._fileobject object at 0x10bd92b50&gt;&gt;
&gt;&gt;&gt; open_url_with_default_protocol('google.com')
&lt;addinfourl at 4331750464 whose fp = &lt;socket._fileobject object at 0x1027960d0&gt;&gt;
</snippet></ROW><ROW><id>15535967</id><snippet>/=</snippet></ROW><ROW><id>15535967</id><snippet>var i = 10;
i /= 2;
</snippet></ROW><ROW><id>15535967</id><snippet>var i = 10;
i = i / 2;
</snippet></ROW><ROW><id>15535967</id><snippet>i = 10
i /= 2
</snippet></ROW><ROW><id>15535967</id><snippet>i = 10
i = i / 2
</snippet></ROW><ROW><id>15535967</id><snippet>var i = 10;
var j = i /= 2;
</snippet></ROW><ROW><id>15535967</id><snippet>var i = 10;
i /= 2;
var j = i;
</snippet></ROW><ROW><id>15535967</id><snippet>i = 10
j = i /= 2
</snippet></ROW><ROW><id>15535967</id><snippet>SyntaxError</snippet></ROW><ROW><id>15535967</id><snippet>def easeInQuad(x, t, b, c, d):
    t /= d
    return c*t*t+b
</snippet></ROW><ROW><id>15535967</id><snippet>old_t = t
t /= d
</snippet></ROW><ROW><id>15535967</id><snippet>t</snippet></ROW><ROW><id>15535967</id><snippet>t/=d</snippet></ROW><ROW><id>15535967</id><snippet>old_t</snippet></ROW><ROW><id>15535967</id><snippet>t/=d</snippet></ROW><ROW><id>15535967</id><snippet>old_t</snippet></ROW><ROW><id>15535967</id><snippet>t</snippet></ROW><ROW><id>15535967</id><snippet>return c * (t/d) * (t/d) + b
return c * (t/d)**2 + b
return c * t*t / d*d + b
</snippet></ROW><ROW><id>15535967</id><snippet>t_over_d = t/d
return c * t_over_d * t_over_d + b
</snippet></ROW><ROW><id>15535967</id><snippet>t</snippet></ROW><ROW><id>15535967</id><snippet>t_over_d</snippet></ROW><ROW><id>15535967</id><snippet>(t/=d)</snippet></ROW><ROW><id>15535967</id><snippet>t</snippet></ROW><ROW><id>15535967</id><snippet>t/=d</snippet></ROW><ROW><id>15535967</id><snippet>t</snippet></ROW><ROW><id>15535967</id><snippet>GetValue</snippet></ROW><ROW><id>15535967</id><snippet>SetValue</snippet></ROW><ROW><id>15536078</id><snippet>class Spheroid(object):

    def __init__(self, shortt, longg):
        self.shortax = shortt
        self.longax = longg
        self.alpha = self.longax / self.shortax

    @property
    def vol(self):
        return Spheroid.volume(self.shortax, self.longax)

    @staticmethod
    def volume(shortax, longax):
        return (4 * np.pi / 3) * shortax * shortax * longax

# outside the instance call it like this
Spheroid.volume(X, Y)
</snippet></ROW><ROW><id>15536137</id><snippet>numpy.einsum</snippet></ROW><ROW><id>15536137</id><snippet>import numpy as np

A = np.random.random((2, 2, 3))
B = np.random.random((2, 2, 3))

C1 = np.empty((2, 2, 3))
for i in range(3):
    C1[:, :, i] = np.dot(A[:, :, i], B[:, :, i])

C2 = np.einsum('ijn,jkn-&gt;ikn', A, B)
np.allclose(C1, C2)
</snippet></ROW><ROW><id>15536230</id><snippet>ldd</snippet></ROW><ROW><id>15536230</id><snippet>ldd /path/to/your/library.so
</snippet></ROW><ROW><id>15536344</id><snippet>if monthStr in Mylist1 and dayStr in range(0, 32):
    print("Valid date")
else:
    print("Not a Valid date")
</snippet></ROW><ROW><id>15536344</id><snippet>monthStr</snippet></ROW><ROW><id>15536355</id><snippet>prods</snippet></ROW><ROW><id>15536355</id><snippet>maxnum</snippet></ROW><ROW><id>15536355</id><snippet>maxnum</snippet></ROW><ROW><id>15536355</id><snippet>maxnum = float("-inf")</snippet></ROW><ROW><id>15536355</id><snippet>lookaround</snippet></ROW><ROW><id>15536656</id><snippet>__del__</snippet></ROW><ROW><id>15536656</id><snippet>__del__()</snippet></ROW><ROW><id>15536656</id><snippet>__del__</snippet></ROW><ROW><id>15536656</id><snippet>atexit</snippet></ROW><ROW><id>15536673</id><snippet>for key, value in d.items():
    d[key] = value / 2
</snippet></ROW><ROW><id>15536752</id><snippet>import lxml.etree

text = """
&lt;root&gt;
  &lt;pgBreak pgId="1"/&gt;
  &lt;p&gt;
    some text to fill out a para
    &lt;pgBreak pgId="2"/&gt;
    some more text 
    &lt;quote&gt; A quoted block &lt;/quote&gt;
    remainder of para
    &lt;pgBreak pgId="3"/&gt;
    &lt;p&gt;
       blurb
    &lt;/p&gt;
  &lt;/p&gt;
&lt;/root&gt;
"""

root = lxml.etree.fromstring(text)
for pgbreak in root.xpath('//pgBreak'):
    inner = pgbreak.getparent()
    if inner == root:
        continue
    outer = inner.getparent()
    pgbreak_index = inner.index(pgbreak)
    inner_index = outer.index(inner) + 1
    siblings = inner[pgbreak_index+1:]
    inner.remove(pgbreak)
    outer.insert(inner_index,pgbreak)
    if siblings[0].tag != 'p':
        p = lxml.etree.Element('p')
        p.text = pgbreak.tail
        pgbreak.tail = None
        for node in siblings:
            p.append(node)
        outer.insert(inner_index+1,p)
    else:
        for node in siblings:
            inner_index += 1
            outer.insert(inner_index,node)
</snippet></ROW><ROW><id>15536752</id><snippet>&lt;root&gt;
  &lt;pgBreak pgId="1"/&gt;
  &lt;p&gt;
    some text to fill out a para
  &lt;/p&gt;
  &lt;pgBreak pgId="2"/&gt;
  &lt;p&gt;
    some more text 
    &lt;quote&gt; A quoted block &lt;/quote&gt;
    remainder of para
  &lt;/p&gt;
  &lt;pgBreak pgId="3"/&gt;
  &lt;p&gt;
    blurb
  &lt;/p&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>15536753</id><snippet>class Teacher(ndb.Model):
    user = ndb.KeyProperty(User)
    ranking = ndb.FloatProperty(required=True)
</snippet></ROW><ROW><id>15536753</id><snippet>Teacher.User.name == 'bob'</snippet></ROW><ROW><id>15536753</id><snippet>t = Teacher.query(Teacher.user == user.key).fetch(1)
</snippet></ROW><ROW><id>15536953</id><snippet>|</snippet></ROW><ROW><id>15536953</id><snippet>cat</snippet></ROW><ROW><id>15536953</id><snippet>bash</snippet></ROW><ROW><id>15536953</id><snippet>POpen</snippet></ROW><ROW><id>15536953</id><snippet>shell=True</snippet></ROW><ROW><id>15536953</id><snippet>cat</snippet></ROW><ROW><id>15536953</id><snippet>grep cmd /opt/vinci/rxDaemons
</snippet></ROW><ROW><id>15537069</id><snippet>def treeToList(node, order=Order.INORDER):
    if node is None:
        return []

    right = treeToList(node.right, order)
    down = treeToList(node.down, order)
    current = [node.data]

    if order == Order.PREORDER:
        return current + right + down

    if order == Order.INORDER:
        return right + current + down

    if order == Order.POSTORDER:
        return right + down + current
</snippet></ROW><ROW><id>15537121</id><snippet>    ld -bundle -flat_namespace -undefined suppress -L/PATH/local/gsl/lib -lgsl -lgslcblas -lm -o _pythoncpp.so *.o
</snippet></ROW><ROW><id>15537163</id><snippet>concurrent.futures.ProcessPoolExecutor</snippet></ROW><ROW><id>15537163</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>15537163</id><snippet>Process</snippet></ROW><ROW><id>15537163</id><snippet>Queue</snippet></ROW><ROW><id>15537163</id><snippet>def run(self):
    try:
        for i in iter(self.inputQueue.get, 'STOP'):
            # (code that does stuff)
            1 / 0 # Dumb error
            # (more code that does stuff)
            self.outputQueue.put(result)
    except Exception as e:
        self.outputQueue.put(e)
</snippet></ROW><ROW><id>15537163</id><snippet>Exception</snippet></ROW><ROW><id>15537163</id><snippet>yield outq.pop()
</snippet></ROW><ROW><id>15537163</id><snippet>result = outq.pop()
if isinstance(result, Exception):
    raise result
yield result
</snippet></ROW><ROW><id>15537163</id><snippet>run</snippet></ROW><ROW><id>15537163</id><snippet>i in iter</snippet></ROW><ROW><id>15537163</id><snippet>try</snippet></ROW><ROW><id>15537163</id><snippet>for</snippet></ROW><ROW><id>15537163</id><snippet>Exception</snippet></ROW><ROW><id>15537163</id><snippet>(result, exception)</snippet></ROW><ROW><id>15537163</id><snippet>def run(self):
    try:
        for i in iter(self.inputQueue.get, 'STOP'):
            # (code that does stuff)
            1 / 0 # Dumb error
            # (more code that does stuff)
            self.outputQueue.put((result, None))
    except Exception as e:
        self.outputQueue.put((None, e))
</snippet></ROW><ROW><id>15537163</id><snippet>result, exception = outq.pop()
if exception:
    raise exception
yield result
</snippet></ROW><ROW><id>15537163</id><snippet>(err, result)</snippet></ROW><ROW><id>15537163</id><snippet>run</snippet></ROW><ROW><id>15537163</id><snippet>Future</snippet></ROW><ROW><id>15537163</id><snippet>concurrent.futures</snippet></ROW><ROW><id>15537163</id><snippet>Worker.run</snippet></ROW><ROW><id>15537163</id><snippet>return</snippet></ROW><ROW><id>15537163</id><snippet>raise</snippet></ROW><ROW><id>15537163</id><snippet>submit</snippet></ROW><ROW><id>15537163</id><snippet>map</snippet></ROW><ROW><id>15537163</id><snippet>def job(i):
    # (code that does stuff)
    1 / 0 # Dumb error
    # (more code that does stuff)
    return result

with concurrent.futures.ProcessPoolExecutor(max_workers=1) as executor:
    results = executor.map(job, range(10))
</snippet></ROW><ROW><id>15537163</id><snippet>raise result</snippet></ROW><ROW><id>15537163</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>15537163</id><snippet>pickle</snippet></ROW><ROW><id>15537163</id><snippet>stderr</snippet></ROW><ROW><id>15537163</id><snippet>exit(1)</snippet></ROW><ROW><id>15537163</id><snippet>traceback</snippet></ROW><ROW><id>15537163</id><snippet>copyreg</snippet></ROW><ROW><id>15537163</id><snippet>__reduce__</snippet></ROW><ROW><id>15537266</id><snippet>import urllib2

downloaded_data  = urllib2.urlopen('http://...')

for line in downloaded_data.readlines():
    print line
</snippet></ROW><ROW><id>15537266</id><snippet>import urllib2, csv

downloaded_data  = urllib2.urlopen('http://...')
csv_data = csv.reader(downloaded_data)

for row in csv_data:
    print row
</snippet></ROW><ROW><id>15537266</id><snippet>import csv
import urllib.request

downloaded_data  = urllib.request.urlopen('http://...')
csv_data = csv.reader(downloaded_data)

for row in csv_data:
    print(row)
</snippet></ROW><ROW><id>15537266</id><snippet>csv</snippet></ROW><ROW><id>15537462</id><snippet>==</snippet></ROW><ROW><id>15537462</id><snippet>System.out.print()</snippet></ROW><ROW><id>15537462</id><snippet>Object.toString()</snippet></ROW><ROW><id>15537462</id><snippet>toString</snippet></ROW><ROW><id>15537462</id><snippet>equals</snippet></ROW><ROW><id>15537462</id><snippet>equals</snippet></ROW><ROW><id>15537462</id><snippet>hashCode</snippet></ROW><ROW><id>15537462</id><snippet>HashSet</snippet></ROW><ROW><id>15537462</id><snippet>hashCode</snippet></ROW><ROW><id>15537462</id><snippet>equals</snippet></ROW><ROW><id>15537462</id><snippet>public class Point {
    private int x;
    private int y;

    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    @Override
    public String toString() {
        return "(" + x + ", " + y + ")";
    }

    public static void main(String[] args) {
        System.out.println(new Point(1, 2));
    }
}
</snippet></ROW><ROW><id>15537541</id><snippet>s = requests.Session()
r = s.get(url)
doStuff(r)
s.close()
</snippet></ROW><ROW><id>15537541</id><snippet>s = requests.Session()
try:
    r = s.get(url)
    doStuff(r)
finally:
    s.close()
</snippet></ROW><ROW><id>15537596</id><snippet>export FLASKR_SETTING = /somepath/config.txt
</snippet></ROW><ROW><id>15537596</id><snippet>- Find the config file (/somepath/config.txt etc.)
- lets say the contents of config file is:
    SECRET_KEY="whatever"
    DEBUG = True
- Then using the 2 above, it will be translated to:
    app.config['SECRET_KEY'] = "whatever"
    app.config['DEBUG'] = True
</snippet></ROW><ROW><id>15537757</id><snippet>import heapq

def mult_comb(n):
    heap = []
    visited = {}
    visited[n*n] = True
    prod = n*n
    heapq.heappush(heap, (-prod, n, n))
    while prod &gt; 1:
        (prod,x,y) = heapq.heappop(heap)
        yield -prod,x,y
        prod = -prod

        prod1 = (x-1)*y
        prod2 = x*(y-1)
        if not prod1 in visited:
            heapq.heappush(heap, (-prod1, x-1,y))
            visited[prod1] = True
        if not prod2 in visited:
            heapq.heappush(heap, (-prod2, x,y-1))
            visited[prod2] = True

def main():
    for tup in mult_comb(10):
        print tup

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>15537821</id><snippet>postcmd</snippet></ROW><ROW><id>15537821</id><snippet>cmdloop</snippet></ROW><ROW><id>15537821</id><snippet>import cmd
class Test(cmd.Cmd):
    # your stuff (do_XXX methods should return nothing or False)
    def do_exit(self,*args):
        return True
</snippet></ROW><ROW><id>15537834</id><snippet>def load_image(name, colorkey = None):
    """loads an image and converts it to pixels. raises an exception if image not found"""
    fullname = os.path.join('data', name)
    try:
        image = pygame.image.load(fullname)
    except pygame.error, message:
        print 'Cannot load image:', name
        raise SystemExit, message
    image = image.convert()
    # set the colorkey to be the color of the top left pixel
    if colorkey is not None:
        if colorkey is -1:
            colorkey = image.get_at((0,0))
        image.set_colorkey(colorkey, RLEACCEL)
    return image, image.get_rect()
</snippet></ROW><ROW><id>15538187</id><snippet>import numpy as np:
xs=[]; ys=[]
for x,y in xy_list:
  xs.append(x)
  ys.append(y)
xs=np.asarray(xs)
ys=np.asarray(ys)
plot(xs,ys,'ro')
</snippet></ROW><ROW><id>15538275</id><snippet>return {func.__name__ + '(' + str(list(args))[1:-1] + ')' : str(result)}
</snippet></ROW><ROW><id>15538275</id><snippet>class memoize:
  def __init__(self, function):
    self.function = function
    self.func_name = function.__name__
    self.memoized = {}

  def __call__(self, *args):
    try:
      print "Using Memo Solution for " + self.func_name + " on " + str(args)
      return self.memoized[args]
    except KeyError:
      print "Computing Solution Now for " + self.func_name + " on " + str(args)
      self.memoized[args] = self.function(*args)
    return self.memoized[args]
</snippet></ROW><ROW><id>15538275</id><snippet>@memoize
def fibonacci(n):
  assert n &gt;= 0
  if n &lt; 2:
    return n
  else:
    return (fibonacci(n-1) + fibonacci(n-2))
</snippet></ROW><ROW><id>15538275</id><snippet>class memoize:
  def __init__(self, function):
    self.function = function
    self.func_name = function.__name__
    self.memoized = {}

  def __call__(self, *args):
    try:
      print "Using Memo Solution for " + self.func_name + " on " + str(args)
      return self.memoized[args]
    except KeyError:
      print "Computing Solution Now for " + self.func_name + " on " + str(args)
      self.memoized[args] = self.function(*args)
    return self.memoized[args]

@memoize
def fibonacci(n):
  assert n &gt;= 0
  if n &lt; 2:
    return n
  else:
    return (fibonacci(n-1) + fibonacci(n-2))

def allfib():
  n = 0
  while True:
    yield fibonacci(n)
    n += 1

result = []
generator = allfib()
while len(result) &lt; 10:
  x = next(generator)
  result.append(x)
print result
</snippet></ROW><ROW><id>15538411</id><snippet>import itertools


itertools.product([0, 1], repeat=8)
&gt;&gt;&gt; list(itertools.product([0, 1], repeat=8))
[(0, 0, 0, 0, 0, 0, 0, 0),
 (0, 0, 0, 0, 0, 0, 0, 1),
</snippet></ROW><ROW><id>15538411</id><snippet> (1, 1, 1, 1, 1, 1, 1, 0),
 (1, 1, 1, 1, 1, 1, 1, 1)]
</snippet></ROW><ROW><id>15538443</id><snippet>li = [ 0, '21', '51', '67', '96', '102', '128', '130', '0', '11', '36', '53', '81', '86', '113', '116', '0', '21', '48', '64', '91', '95','125', '139', '166', '175', '200', 205]   

# Convert all items to integers for calculations
li = [int(x) for x in li]

for x, y in zip(li, li[1:]):
    if y != 0:
        a = abs(x - y)      
        print '|%3d - %3d| = %3d' % (x, y, a)
    else:
        print ''
</snippet></ROW><ROW><id>15538443</id><snippet>|  0 -  21| =  21
| 21 -  51| =  30
| 51 -  67| =  16
| 67 -  96| =  29
| 96 - 102| =   6
|102 - 128| =  26
|128 - 130| =   2

|  0 -  11| =  11
| 11 -  36| =  25
| 36 -  53| =  17
| 53 -  81| =  28
| 81 -  86| =   5
| 86 - 113| =  27
|113 - 116| =   3

|  0 -  21| =  21
| 21 -  48| =  27
| 48 -  64| =  16
| 64 -  91| =  27
| 91 -  95| =   4
| 95 - 125| =  30
|125 - 139| =  14
|139 - 166| =  27
|166 - 175| =   9
|175 - 200| =  25
|200 - 205| =   5
</snippet></ROW><ROW><id>15538516</id><snippet>print type(tweet.GetId())</snippet></ROW><ROW><id>15538516</id><snippet>singletweet = 'URL' + str(tweet.GetId())
</snippet></ROW><ROW><id>15538516</id><snippet>singletweet = 'URL%s'%tweet.GetId()  # For Python2.5 or older
</snippet></ROW><ROW><id>15538516</id><snippet>singletweet = 'URL{id}'.format(id=tweet.GetId())  # For Python2.6 or newer
</snippet></ROW><ROW><id>15538621</id><snippet>__getattribute__</snippet></ROW><ROW><id>15538621</id><snippet>class Interface(object):
    def __init__(self, real_object, interface):
        if isinstance(interface, str):
            interface = interface.split()
        self.interface  = interface
        self.object = real_object
        Interface.validate(self)

    def __getattribute__(self, attr):
        # Retrieve the real attributes of self,
        # bypassing the normal attribute mechanism:
        interface = object.__getattribute__(self, "interface")
        real_object =  object.__getattribute__(self, "object")
        if attr in interface:
            return getattr(real_object, attr)
        raise AttributeError

    def validate(self):
        interface = object.__getattribute__(self, "interface")
        real_object =  object.__getattribute__(self, "object")
        for attr in interface:
            try:
                getattr(real_object, attr)
            except AttributeError:
                raise ValueError("Passed object does not conform to given interface")
</snippet></ROW><ROW><id>15538621</id><snippet>&gt;&gt;&gt; class A(object):
...   a = 1 
...   b = 2
...   c = 3
... 
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; b = Interface(a, "a b")
&gt;&gt;&gt; b = Interface(a, "a b")&gt;&gt;&gt; b.a
1
&gt;&gt;&gt; b.b
2
&gt;&gt;&gt; b.c
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 16, in __getattribute__
AttributeError
&gt;&gt; class C(object): pass
... 
&gt;&gt;&gt; Interface(C(), "a")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 7, in __init__
  File "&lt;stdin&gt;", line 25, in validate
ValueError: Passed object does not conform to given interface
</snippet></ROW><ROW><id>15538800</id><snippet> User: {{ user.username }}
 squats: {{ user.userprofile.squats }} 
 lunges: {{ user.userprofile.lunges }}
 Skip Stairs: 
    {% if user.userprofile.skipStairs %}
       Yes
    {% else %}
       No
    {% endif %}
 Stair: {{ user.userprofile.stairDaysCount }}}
 Week Completed: 
    {% if user.userprofile.weekOneComplete %}
        Yes
    {% else %}
        In-Progress
    {% endif %}
</snippet></ROW><ROW><id>15538800</id><snippet>user = UserProfile(user=request.user)
user.weekOne.squats += 5
user.weekOne.save()
user.save()
</snippet></ROW><ROW><id>15538800</id><snippet>class UserProfile(models.Model):
    user = models.OneToOneField(User)
    weekOne = models.ForeignKey(WeekOne)

    def check_updates(self):
        check = WeekOne.object.get(id=self.weekOne)

        if check.skipStairs and \
           check.squats == 1000 and \
           check.lunges == 250 and \
           check.stairDaysCount == 3:

           check.weekOneComplete = True
           check.save()
</snippet></ROW><ROW><id>15538800</id><snippet>user = UserProfile.objects.get(user=request.user)
user.check_updates()
</snippet></ROW><ROW><id>15538865</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getcwd()
'/home/adam'
</snippet></ROW><ROW><id>15538976</id><snippet>f</snippet></ROW><ROW><id>15538976</id><snippet>try:
    f = bz2.BZ2File(corpus, mode='r')
except IOError:
    f = codecs.open(corpus, encoding='utf-8')
for data in parse_lines(f):
    yield data
f.close()
</snippet></ROW><ROW><id>15538976</id><snippet>BZ</snippet></ROW><ROW><id>15538976</id><snippet>bz2.BZ2Decompressor</snippet></ROW><ROW><id>15539331</id><snippet>data=[b.string for b in main_div.findAll('b')]
</snippet></ROW><ROW><id>15539464</id><snippet>class JSONCollector():
    char_buffer = StringIO.StringIO()
</snippet></ROW><ROW><id>15539464</id><snippet>class JSONCollector():
    def __init__(self):
        self.char_buffer = StringIO.StringIO()
</snippet></ROW><ROW><id>15539464</id><snippet>char_buffer</snippet></ROW><ROW><id>15539505</id><snippet>import json
c = json.dumps({'event': 'data', 'progress': a, 'level': b})
</snippet></ROW><ROW><id>15539747</id><snippet>&lt;xpath expr="//notebook/page[@string='Accounting']" position="replace"&gt;
&lt;/xpath&gt;
</snippet></ROW><ROW><id>15539751</id><snippet>from pyramid.mako_templating import IMakoLookup
lookup = request.registry.queryUtility(IMakoLookup, name='mako.')
tmpl = lookup.get_template('myapp:templates/foo.mako')

opts = {} # rendering context
result = tmpl.render_unicode(**opts)
</snippet></ROW><ROW><id>15539943</id><snippet>GreedyRange</snippet></ROW><ROW><id>15539943</id><snippet>JoinAdapter</snippet></ROW><ROW><id>15539943</id><snippet>class JoinAdapter(Adapter):
    def _decode(self, obj, context):
        return "".join(obj)

ADVERT_PAYLOAD = Struct("ADVERT_PAYLOAD",
    Field("AdvertAddress",6),
    JoinAdapter(GreedyRange(Field("AdvertData", 1)))
)

payload = '2\x15\x00a\x02\x00\x02\x01\x06\x07\x03\x03\x18\x02\x18\x04\x18\x03\x19\x00\x02\x02\n\xfe\t\tAS-D1532'
print ADVERT_PAYLOAD.parse(payload)
</snippet></ROW><ROW><id>15539943</id><snippet>Container:
    AdvertAddress = '2\x15\x00a\x02\x00'
    AdvertData = '\x02\x01\x06\x07\x03\x03\x18\x02\x18\x04\x18\x03\x19\x00\x02\x02\n\xfe\t\tAS-D1532'
</snippet></ROW><ROW><id>15540021</id><snippet>__init__</snippet></ROW><ROW><id>15540021</id><snippet>__new__</snippet></ROW><ROW><id>15540021</id><snippet>__init__</snippet></ROW><ROW><id>15540021</id><snippet>y</snippet></ROW><ROW><id>15540021</id><snippet>None</snippet></ROW><ROW><id>15540021</id><snippet>y = obj.__init__()</snippet></ROW><ROW><id>15540547</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtGui, QtCore

class MyWindow(QtGui.QWidget):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

        self.pushButtonImage = QtGui.QPushButton(self)
        self.pushButtonImage.setText("Insert Image!")
        self.pushButtonImage.clicked.connect(self.on_pushButtonImage_clicked)

        self.textEditImage = QtGui.QTextEdit(self)
        self.textEditImage.setPlainText("Insert an image here:")

        self.layoutVertical = QtGui.QVBoxLayout(self)
        self.layoutVertical.addWidget(self.pushButtonImage)
        self.layoutVertical.addWidget(self.textEditImage)

    def on_pushButtonImage_clicked(self):
        filePath = QtGui.QFileDialog.getOpenFileName(
            self,
            "Select an image",
            ".",
            "Image Files(*.png *.gif *.jpg *jpeg *.bmp)"
        )

        if not filePath.isEmpty():
            self.insertImage(filePath)

    def insertImage(self, filePath):
        imageUri = QtCore.QUrl(QtCore.QString("file://{0}".format(filePath)))
        image    = QtGui.QImage(QtGui.QImageReader(filePath).read())

        self.textEditImage.document().addResource(
            QtGui.QTextDocument.ImageResource,
            imageUri,
            QtCore.QVariant(image)
        )

        imageFormat = QtGui.QTextImageFormat()
        imageFormat.setWidth(image.width())
        imageFormat.setHeight(image.height())
        imageFormat.setName(imageUri.toString())

        textCursor = self.textEditImage.textCursor()
        textCursor.movePosition(
            QtGui.QTextCursor.End,
            QtGui.QTextCursor.MoveAnchor
        )
        textCursor.insertImage(imageFormat)

        # This will hide the cursor
        blankCursor = QtGui.QCursor(QtCore.Qt.BlankCursor)
        self.textEditImage.setCursor(blankCursor)

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>15540842</id><snippet>collections</snippet></ROW><ROW><id>15540842</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; binary = bin(20)[2:]
&gt;&gt;&gt; Counter(binary)
Counter({'0': 3, '1': 2})
</snippet></ROW><ROW><id>15540842</id><snippet>count()</snippet></ROW><ROW><id>15540842</id><snippet>&gt;&gt;&gt; binary = bin(20)[2:]
&gt;&gt;&gt; binary.count('1')
2
</snippet></ROW><ROW><id>15540842</id><snippet>&gt;&gt;&gt; sum(1 for i in bin(20)[2:] if i == '1')
2
</snippet></ROW><ROW><id>15540842</id><snippet>count()</snippet></ROW><ROW><id>15540855</id><snippet>set_edgecolors</snippet></ROW><ROW><id>15540855</id><snippet>set_facecolors</snippet></ROW><ROW><id>15540855</id><snippet>from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.gca(projection='3d')

x = np.random.sample(20)
y = np.random.sample(20)
z = np.random.sample(20)
s = ax.scatter(x, y, z, c="r")
s.set_edgecolors = s.set_facecolors = lambda *args:None

ax.legend()
ax.set_xlim3d(0, 1)
ax.set_ylim3d(0, 1)
ax.set_zlim3d(0, 1)

plt.show()
</snippet></ROW><ROW><id>15540855</id><snippet>set_edgecolors</snippet></ROW><ROW><id>15540855</id><snippet>set_facecolors</snippet></ROW><ROW><id>15540855</id><snippet>s._set_facecolors, s._set_edgecolors = s.set_facecolors, s.set_edgecolors
</snippet></ROW><ROW><id>15541298</id><snippet>&lt;form string='bpl_work_offer' version="7.0"&gt;
</snippet></ROW><ROW><id>15541391</id><snippet>/sys/bus/usb/devices/*/idProduct
/sys/bus/usb/devices/*/idVendor
</snippet></ROW><ROW><id>15541556</id><snippet>"strin"+"g"</snippet></ROW><ROW><id>15541556</id><snippet>"string"</snippet></ROW><ROW><id>15541556</id><snippet>  # s1 = "string"
  2           0 LOAD_CONST               1 ('string')
              3 STORE_FAST               0 (s1)

  # s2 = "strin" + "g"
  3           6 LOAD_CONST               4 ('string')
              9 STORE_FAST               1 (s2)
</snippet></ROW><ROW><id>15541556</id><snippet>  # s3a = "strin"
  # s3 = s3a + "g"
  4          12 LOAD_CONST               2 ('strin')
             15 STORE_FAST               2 (s3a)

  5          18 LOAD_FAST                2 (s3a)
             21 LOAD_CONST               3 ('g')
             24 BINARY_ADD          
             25 STORE_FAST               3 (s3)
             28 LOAD_CONST               0 (None)
             31 RETURN_VALUE        
</snippet></ROW><ROW><id>15541556</id><snippet>intern()</snippet></ROW><ROW><id>15541556</id><snippet>&gt;&gt;&gt; s3a = "strin"
&gt;&gt;&gt; s3 = s3a + "g"
&gt;&gt;&gt; s3 is "string"
False
&gt;&gt;&gt; intern(s3) is "string"
True
</snippet></ROW><ROW><id>15541762</id><snippet>HTML</snippet></ROW><ROW><id>15541762</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>15541762</id><snippet>soup = BS(response.text)
</snippet></ROW><ROW><id>15541926</id><snippet>import xlrd
workbook = xlrd.open_workbook('book.xls')
for sheet in workbook.sheets():
    for row in range(sheet.nrows):
        for column in range(sheet.ncols):
            print "row::::: ", row
            print "column:: ", column
            print "value::: ", sheet.cell(row,column).value
</snippet></ROW><ROW><id>15541926</id><snippet>row</snippet></ROW><ROW><id>15541926</id><snippet>column</snippet></ROW><ROW><id>15541926</id><snippet>cell</snippet></ROW><ROW><id>15542105</id><snippet>import math, random

def poisson(m, n):
    p=math.exp(-m)
    r=[p]
    for i in range(1, n):
        p*=m/float(i)
        r.append(p)
    return r

def simulate(mx, my, n):
    r=[0.0 for i in range(3)]
    px, py = (poisson(mx, n), 
              poisson(my, n))
    for i in range(n):
        for j in range(n):
            if i &gt; j:
                k=0
            elif i &lt; j:
                k=1
            else:
                k=2
            r[k]+=px[i]*py[j]
    return r

from scipy import optimize

Target, N = [0.5, 0.2, 0.3], 10

def error(p, target, n):
    r = simulate(p[0], p[1], n)
    return np.sum(np.subtract(target, r)**2)

r = optimize.fmin(error, (0, 0), args=(Target, N))
print simulate(r[0], r[1], n)
</snippet></ROW><ROW><id>15542105</id><snippet>Optimization terminated successfully.
         Current function value: 0.000000
         Iterations: 67
         Function evaluations: 125
[0.49999812501285623, 0.20000418001288445, 0.2999969464616799]
</snippet></ROW><ROW><id>15542158</id><snippet>g++</snippet></ROW><ROW><id>15542387</id><snippet>s = True
while s:
    s, i = capture.read()
    if s:
        do_some_stuff(i)
</snippet></ROW><ROW><id>15542794</id><snippet>def get_matching_country(order_num):
    i = 1
    matching_req = Country.objects.none()
    while true:
        req = Country.objects.filter(country_code=order_num[:i])
        if res.exists():
            matching_req = req
            i += 1
        else:
            break

    return matching_req
</snippet></ROW><ROW><id>15543039</id><snippet>[]</snippet></ROW><ROW><id>15543039</id><snippet>\w*/{0,10}
</snippet></ROW><ROW><id>15543039</id><snippet>()</snippet></ROW><ROW><id>15543039</id><snippet>(\w*/){0,10}
</snippet></ROW><ROW><id>15543039</id><snippet>^((?:[:\w]+/){0,3})(\w+(?:\.\w{1,3})?)?$
</snippet></ROW><ROW><id>15543039</id><snippet>((?:[:\w]+/){0,3})
</snippet></ROW><ROW><id>15543039</id><snippet>(\w+(?:\.\w{1,3})?)?
</snippet></ROW><ROW><id>15543039</id><snippet>?</snippet></ROW><ROW><id>15543039</id><snippet>^</snippet></ROW><ROW><id>15543039</id><snippet>$</snippet></ROW><ROW><id>15543039</id><snippet>&gt;&gt;&gt; pat=re.compile('^((?:[:\w]+/){0,3})(\w+(?:\.\w{1,3})?)?$')
&gt;&gt;&gt; my_str='fwefw/wfwf/wefwf/dde.cdf'
&gt;&gt;&gt; pat.search(my_str).groups()
('fwefw/wfwf/wefwf/', 'dde.cdf')
&gt;&gt;&gt; my_str='fwefw/dde.cdf'
&gt;&gt;&gt; pat.search(my_str).groups()
('fwefw/', 'dde.cdf')
</snippet></ROW><ROW><id>15543166</id><snippet>is</snippet></ROW><ROW><id>15543166</id><snippet>is</snippet></ROW><ROW><id>15543166</id><snippet>id</snippet></ROW><ROW><id>15543166</id><snippet>&gt;&gt;&gt; isinstance(a, tuple)
True
</snippet></ROW><ROW><id>15543166</id><snippet>type(a)</snippet></ROW><ROW><id>15543166</id><snippet>tuple</snippet></ROW><ROW><id>15543166</id><snippet>a</snippet></ROW><ROW><id>15543166</id><snippet>tuple</snippet></ROW><ROW><id>15543166</id><snippet>verbose=True</snippet></ROW><ROW><id>15543166</id><snippet>&gt;&gt;&gt; sgn_tuple = namedtuple('sgnt',['signal','type'],verbose=True)

class sgnt(tuple):
        'sgnt(signal, type)' 

        __slots__ = () 

        _fields = ('signal', 'type') 

        def __new__(_cls, signal, type):
            'Create new instance of sgnt(signal, type)'
            return _tuple.__new__(_cls, (signal, type)) 

        @classmethod
        def _make(cls, iterable, new=tuple.__new__, len=len):
            'Make a new sgnt object from a sequence or iterable'
            result = new(cls, iterable)
            if len(result) != 2:
                raise TypeError('Expected 2 arguments, got %d' % len(result))
            return result 

        def __repr__(self):
            'Return a nicely formatted representation string'
            return 'sgnt(signal=%r, type=%r)' % self 

        def _asdict(self):
            'Return a new OrderedDict which maps field names to their values'
            return OrderedDict(zip(self._fields, self)) 

        __dict__ = property(_asdict) 

        def _replace(_self, **kwds):
            'Return a new sgnt object replacing specified fields with new values'
            result = _self._make(map(kwds.pop, ('signal', 'type'), _self))
            if kwds:
                raise ValueError('Got unexpected field names: %r' % kwds.keys())
            return result 

        def __getnewargs__(self):
            'Return self as a plain tuple.  Used by copy and pickle.'
            return tuple(self) 

        signal = _property(_itemgetter(0), doc='Alias for field number 0')
        type = _property(_itemgetter(1), doc='Alias for field number 1')
</snippet></ROW><ROW><id>15543166</id><snippet>exec</snippet></ROW><ROW><id>15543338</id><snippet>%</snippet></ROW><ROW><id>15543338</id><snippet>print '%s' % (temp.zfill(3))
           ^ THIS
</snippet></ROW><ROW><id>15543429</id><snippet>collections.MutableSequence</snippet></ROW><ROW><id>15543429</id><snippet>list</snippet></ROW><ROW><id>15543429</id><snippet>MutableSequence</snippet></ROW><ROW><id>15543429</id><snippet>from collections import MutableSequence

class IntList(MutableSequence):
    def __init__(self):
        super(IntList, self).__init__()
        self._list = []

    def __len__(self):
        return len(self._list)

    def __getitem__(self, index):
        return self._list[index]

    def __setitem__(self, index, value):
        if not isinstance(value, int):
            raise TypeError('only integers accepted')
        self._list[index] = value

    def __delitem__(self, index):
        del self._list[index]

    def insert(self, index, value):
        if not isinstance(value, int):
            raise TypeError('only integers accepted')
        self._list.insert(index, value)
</snippet></ROW><ROW><id>15543429</id><snippet>list</snippet></ROW><ROW><id>15543429</id><snippet>extend</snippet></ROW><ROW><id>15543429</id><snippet>MutableSequence</snippet></ROW><ROW><id>15543429</id><snippet>__len__</snippet></ROW><ROW><id>15543429</id><snippet>__insert__</snippet></ROW><ROW><id>15543429</id><snippet>MutableSequence</snippet></ROW><ROW><id>15543429</id><snippet>list</snippet></ROW><ROW><id>15543598</id><snippet>self</snippet></ROW><ROW><id>15543598</id><snippet>self</snippet></ROW><ROW><id>15543598</id><snippet>from functools import wraps
def user_permission():
    @wraps(f)
    def decorated(self, *args, **kwargs):
        if self.myname == 'My Name':
            return f(self, *args, **kwargs)
        else:
            return "Not Permitted"
    return decorated
</snippet></ROW><ROW><id>15543965</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup('&lt;html&gt;&lt;body&gt;&lt;a&gt;bbb&lt;/a&gt;&lt;/body&gt;&lt;/html')
soup.find('a')
</snippet></ROW><ROW><id>15544008</id><snippet>class Child(Base):

    __tablename__ = "childs"

    mid = Column(Integer(11), primary_key = True, autoincrement = False)
    cid = Column(Integer(11), primary_key = True)
    uid = Column(Integer(11), primary_key = True)

    __table_args__ = (ForeignKeyConstraint([cid, uid], [Parent.cid, Parent.uid]), {})
</snippet></ROW><ROW><id>15544081</id><snippet>buttons = [stop, lap, reset, close]
my_font = tkFont.Font(family='Helvetica',size='18')
for button in buttons:
    button.config(font=my_font)
</snippet></ROW><ROW><id>15544148</id><snippet>PyPy</snippet></ROW><ROW><id>15544148</id><snippet>NumPy</snippet></ROW><ROW><id>15544696</id><snippet>DIGIT.keys()</snippet></ROW><ROW><id>15544696</id><snippet>DIGIT.values()</snippet></ROW><ROW><id>15544696</id><snippet>import matplotlib.pyplot as plt
import unicodedata as UD

DIGIT = {
    'MINUS': u'-',
    'ZERO': u'0',
    'ONE': u'1',
    'TWO': u'2',
    'THREE': u'3',
    'FOUR': u'4',
    'FIVE': u'5',
    'SIX': u'6',
    'SEVEN': u'7',
    'EIGHT': u'8',
    'NINE': u'9',
    'STOP': u'.'
    }

def guess(unistr):
    return ''.join([value for u in unistr
                    for key,value in DIGIT.iteritems()
                    if key in UD.name(u)])

fig, ax = plt.subplots(1)
ax.plot([-1, 0, 1, 2], range(4))
plt.savefig('/tmp/test.png')
labels = ax.get_xticklabels()
for label in labels:
    label = label.get_text()
    print(guess(label))
</snippet></ROW><ROW><id>15544696</id><snippet>-1.0
-0.5
0.0
0.5
1.0
1.5
2.0
</snippet></ROW><ROW><id>15544704</id><snippet>with open('date.txt') as tar:
    target = tar.read().strip()
    if date.today() &gt;= datetime.strptime(target, '%Y-%m-%d').date():
</snippet></ROW><ROW><id>15544704</id><snippet>.strip()</snippet></ROW><ROW><id>15544704</id><snippet>\r</snippet></ROW><ROW><id>15544704</id><snippet>\r\n</snippet></ROW><ROW><id>15544704</id><snippet>datetime</snippet></ROW><ROW><id>15544704</id><snippet>datetime.date</snippet></ROW><ROW><id>15544704</id><snippet>%Y-%m-%d</snippet></ROW><ROW><id>15544704</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; str(datetime.date.today())
'2013-03-21'
</snippet></ROW><ROW><id>15544704</id><snippet>datetime.date</snippet></ROW><ROW><id>15544704</id><snippet>datetime.datetime</snippet></ROW><ROW><id>15544704</id><snippet>.combine()</snippet></ROW><ROW><id>15544704</id><snippet>datetime.time</snippet></ROW><ROW><id>15544704</id><snippet>&gt;&gt;&gt; datetime.datetime.combine(datetime.date.today(), datetime.time.min)
datetime.datetime(2013, 3, 21, 0, 0)
</snippet></ROW><ROW><id>15544704</id><snippet>.date()</snippet></ROW><ROW><id>15544704</id><snippet>datetime.datetime</snippet></ROW><ROW><id>15544704</id><snippet>datetime.date</snippet></ROW><ROW><id>15544704</id><snippet>&gt;&gt;&gt; datetime.datetime.now().date()
datetime.date(2013, 3, 21)
</snippet></ROW><ROW><id>15544840</id><snippet>executor.map</snippet></ROW><ROW><id>15544840</id><snippet>map</snippet></ROW><ROW><id>15544840</id><snippet>runCommand</snippet></ROW><ROW><id>15544840</id><snippet>lambda x: x.runCommand()</snippet></ROW><ROW><id>15544840</id><snippet>executor.map</snippet></ROW><ROW><id>15544840</id><snippet>def runCommand(cj):
    return cj.runCommand()

l = executor.map(runCommand, self.parent_job.child_jobs)
</snippet></ROW><ROW><id>15544840</id><snippet>l</snippet></ROW><ROW><id>15544840</id><snippet>w = list(l)</snippet></ROW><ROW><id>15544840</id><snippet>w</snippet></ROW><ROW><id>15544898</id><snippet>def PrintGame():
    htmlquestions = []
    for question in QASKEDN:
        htmlquestions.append("""
                        &lt;tr&gt;
                              &lt;td&gt;{} :&lt;/td&gt;
                              &lt;td&gt;&lt;input type="text" name="A1"/&gt;&lt;/td&gt;
                        &lt;/tr&gt;""".format(question))
    html = ("""
    &lt;html&gt;
    &lt;div id = "textbody"&gt;
            &lt;h2&gt;Quiz&lt;/h2&gt;
                &lt;form method="post" action="quiz.cgi"&gt;
                    &lt;table border="0"&gt;""" 
    + "".join(htmlquestions) + 
    """                &lt;/table&gt;
                &lt;/form&gt;
             &lt;/div&gt;
        &lt;/body&gt;
    &lt;/html&gt;
    """)
</snippet></ROW><ROW><id>15545449</id><snippet>&gt;&gt;&gt; def foo(): print 'Hello world!'
...
&gt;&gt;&gt; foo
&lt;function foo at 0x10c4685f0&gt;
&gt;&gt;&gt; foo()
Hello world!
&gt;&gt;&gt; bar = foo
&gt;&gt;&gt; bar()
Hello world!
</snippet></ROW><ROW><id>15545449</id><snippet>RK4</snippet></ROW><ROW><id>15545602</id><snippet>self.lock_tables("read", ['nets_permissions as n', 'devices_permissions as d'])
usrs = self.db.query("SELECT n.user_id FROM nets_permissions as n \
                    left join devices_permissions as d \
                    on n.user_id = d.user_id \
                    where d.user_id is null \
                    and n.network_id=%s and n.perm&lt;&gt;3", netid)
self.unlock_tables()

for usr in usrs:
    self.lock_tables("write", ['devices_permissions'])
    self.db.execute("INSERT devices_permissions SET \
                     user_id=%s, network_id=%s, device_id=%s, perm=%s",\
                     usr['user_id'], netid, sensid, perm)
    self.unlock_tables();
</snippet></ROW><ROW><id>15545623</id><snippet>for i in xrange(len(alist)):
    letter = blist[i]
    if letter not in dictNames:
        dictNames[letter] = []
    dictNames[letter].append(alist[i])
</snippet></ROW><ROW><id>15545623</id><snippet>{'A': [11, 12, 11], 'B': [13, 15]}
</snippet></ROW><ROW><id>15545884</id><snippet>kwargs.pop</snippet></ROW><ROW><id>15545890</id><snippet>class test(object):
    def __init__(self):
        self.lst = []
    str = 'xyz'
</snippet></ROW><ROW><id>15545890</id><snippet>self</snippet></ROW><ROW><id>15545890</id><snippet>test().str = 'xyz'</snippet></ROW><ROW><id>15545890</id><snippet>self</snippet></ROW><ROW><id>15546157</id><snippet>Tk</snippet></ROW><ROW><id>15546157</id><snippet>Tk</snippet></ROW><ROW><id>15546157</id><snippet>Tk</snippet></ROW><ROW><id>15546195</id><snippet>replace_with()</snippet></ROW><ROW><id>15546195</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; markup = '&lt;font color="red"&gt;this text is red&lt;/font&gt;'
&gt;&gt;&gt; soup = BeautifulSoup(markup)
&gt;&gt;&gt; soup.font
&lt;font color="red"&gt;this text is red&lt;/font&gt;
&gt;&gt;&gt; new_tag = soup.new_tag('span')
&gt;&gt;&gt; new_tag['style'] = 'color: ' + soup.font['color']
&gt;&gt;&gt; new_tag.string = soup.font.string
&gt;&gt;&gt; soup.font.replace_with(new_tag)
&lt;font color="red"&gt;this text is red&lt;/font&gt;
&gt;&gt;&gt; soup
&lt;span style="color: red"&gt;this text is red&lt;/span&gt;
</snippet></ROW><ROW><id>15546260</id><snippet>x = -c/b</snippet></ROW><ROW><id>15546260</id><snippet>x = -c/float(b)</snippet></ROW><ROW><id>15546354</id><snippet>class Stack(object):
    def __init__(self, index, name, disks):
        self.index = index
        self.name = name
        self.disks = disks
    def __str__(self):
        return self.name
    def __repr__(self):
        return 'Stack(%r, %r, %r)' % (self.index, self.name, self.disks)
    def is_adjacent(self, other):
        return other.index in (self.index + 1, self.index - 1)
    def push(self, disk):
        assert len(self.disks) == 0 or self.disks[-1] &gt; disk
        self.disks.append(disk)
    def pop(self):
        return self.disks.pop()

class Hanoi(object):

    def __init__(self, n):
        source = Stack(0, "source", range(n, 0, -1))
        helper = Stack(1, "helper", [])
        target = Stack(2, "target", [])
        self.stacks = [source, helper, target]
        self.hanoi(n, source, target)

    def hanoi(self, n, source, target):
        """Move n disks from source to target using remaining stack"""
        helper = self.stacks[3 - source.index - target.index]
        if n == 0:
            return
        if source.is_adjacent(target):
            self.hanoi(n - 1, source, helper)
            self.move(source, target)
            self.hanoi(n - 1, helper, target)
        else:
            assert helper.is_adjacent(source) and helper.is_adjacent(target)
            self.hanoi(n - 1, source, target)
            self.move(source, helper)
            self.hanoi(n - 1, target, source)
            self.move(helper, target)
            self.hanoi(n - 1, source, target)

    def move(self, s, d):
        assert s.is_adjacent(d)
        disk = s.pop()
        print "moving %d from %s to %s" % (disk, s, d)
        d.push(disk)

Hanoi(5)
</snippet></ROW><ROW><id>15546354</id><snippet>Stack</snippet></ROW><ROW><id>15546354</id><snippet>Hanoi</snippet></ROW><ROW><id>15546354</id><snippet>hanoi</snippet></ROW><ROW><id>15546354</id><snippet>move</snippet></ROW><ROW><id>15546354</id><snippet>hanoi</snippet></ROW><ROW><id>15546354</id><snippet>else</snippet></ROW><ROW><id>15546354</id><snippet>else</snippet></ROW><ROW><id>15546677</id><snippet>/bin/bash -l -c "export PATH=\"\$PATH:\"/path/to/sources/drush\" \" &amp;&amp; drush"
                                                                ^HERE
</snippet></ROW><ROW><id>15546677</id><snippet>bash</snippet></ROW><ROW><id>15547065</id><snippet>findall()</snippet></ROW><ROW><id>15547065</id><snippet>re.findall()</snippet></ROW><ROW><id>15547065</id><snippet>(do|re|mi)+</snippet></ROW><ROW><id>15547065</id><snippet>findall()</snippet></ROW><ROW><id>15547065</id><snippet>r'Some example text: ((?:do|re|me)+)'
</snippet></ROW><ROW><id>15547295</id><snippet>timedelta(days=1)</snippet></ROW><ROW><id>15547295</id><snippet>import datetime

def get_start_of_previous_month(dt):
    '''
    Return the datetime corresponding to the start of the month
    before the provided datetime.
    '''
    previous = dt.date().replace(day=1) - datetime.timedelta(days=1)
    return datetime.datetime.combine(previous.replace(day=1), datetime.time.min)
</snippet></ROW><ROW><id>15547295</id><snippet>.replace(day=1)</snippet></ROW><ROW><id>15547295</id><snippet>&gt;&gt;&gt; get_start_of_previous_month(datetime.datetime.now())
datetime.datetime(2013, 2, 1, 0, 0)
&gt;&gt;&gt; get_start_of_previous_month(datetime.datetime(2013, 1, 21, 12, 23))
datetime.datetime(2012, 12, 1, 0, 0)
</snippet></ROW><ROW><id>15547930</id><snippet>__init__</snippet></ROW><ROW><id>15547930</id><snippet>except</snippet></ROW><ROW><id>15548196</id><snippet>str.isdigit()</snippet></ROW><ROW><id>15548196</id><snippet>&gt;&gt;&gt; 'a1'.isdigit()
False
&gt;&gt;&gt; '11'.isdigit()
True
&gt;&gt;&gt; '1a'.isdigit()
False
</snippet></ROW><ROW><id>15548196</id><snippet>serial</snippet></ROW><ROW><id>15548196</id><snippet>s_int = [int(d) for d in serial]
</snippet></ROW><ROW><id>15548196</id><snippet>if s_int[0] + s_int[1] != 9:
</snippet></ROW><ROW><id>15548196</id><snippet>import operator

tests = (
    (0, 1, operator.add, 9),
    (2, 3, operator.mul, 9),
    (4, 5, operator.sub, 2),
    (5, 4, operator.mod, 2),
    (6, 7, operator.truediv, 7),
    (8, 9, operator.sub, 2),
    (7, 1, operator.mul, 9),
)

for i, (a, b, op, res) in enumerate(tests, 3):
    if op(s_int[a], s_int[b]) != res:
        print("Failed test {}".format(i))
        return False
</snippet></ROW><ROW><id>15548398</id><snippet>sig_dig = num // 10**k % 10</snippet></ROW><ROW><id>15548398</id><snippet>//</snippet></ROW><ROW><id>15548398</id><snippet>val == 0</snippet></ROW><ROW><id>15548398</id><snippet>val</snippet></ROW><ROW><id>15548398</id><snippet>max_digits = int(math.ceil(math.log(max(lst), 10)))</snippet></ROW><ROW><id>15548398</id><snippet>for k in range(max_digits):</snippet></ROW><ROW><id>15548398</id><snippet>dequeue</snippet></ROW><ROW><id>15548398</id><snippet>Queue</snippet></ROW><ROW><id>15548398</id><snippet>dequeue</snippet></ROW><ROW><id>15548398</id><snippet>extend</snippet></ROW><ROW><id>15548398</id><snippet>import math

from my_queue import Queue

def rsort(n):
    '''(list of int) -&gt; list of int
    '''
    bin_list = [Queue for _ in range(10)]
    max_digits = int(math.ceil(math.log(max(lst), 10))) # calculate # of digits

    for k in range(max_digits):
        for num in alist:
            sig_dig = num / 10**k % 10 # find digit's value
            bin_list[sig_dig].enqueue(num)

        n = [] # we can reuse the name `n`, rather than using a different name
        for bins in bin_list:
            while not bins.is_empty(): # loop to dequeue all values
                n.append(bins.dequeue())

    return n # the return statement is outside the loop!
</snippet></ROW><ROW><id>15548576</id><snippet>crosstab</snippet></ROW><ROW><id>15548576</id><snippet>import numpy as np
import pandas as pd

factor = pd.cut(distance, 100)

# the crosstab dataframe with the value counts in each bucket
ct = pd.crosstab(factor, adjacency, margins=True,
                 rownames=['distance'], colnames=['adjacency'])

# from here computing the probability of nodes being adjacent is straightforward
ct['prob'] = np.true_divide(ct[1], ct['All'])
</snippet></ROW><ROW><id>15548576</id><snippet>&gt;&gt;&gt; ct

adjacency           0    1  All      prob
distance
(0.00685, 0.107]    7    4   11  0.363636
(0.107, 0.205]      6    9   15  0.600000
(0.205, 0.304]      6    6   12  0.500000
(0.304, 0.403]      5    2    7  0.285714
(0.403, 0.502]      4    6   10  0.600000
(0.502, 0.6]        8    3   11  0.272727
(0.6, 0.699]        6    2    8  0.250000
(0.699, 0.798]      4    6   10  0.600000
(0.798, 0.896]      4    5    9  0.555556
(0.896, 0.995]      5    2    7  0.285714
All                55   45  100  0.450000
</snippet></ROW><ROW><id>15548688</id><snippet>class YourModelAdmin(admin.ModelAdmin):
    raw_id_fields=('professor', )

admin.site.register(YourModel, YourModelAdmin)
</snippet></ROW><ROW><id>15549422</id><snippet>ls =['RBS-UK','GOOG-US']
map(lambda x: x.replace('-UK', '-GB'), ls)
</snippet></ROW><ROW><id>15549698</id><snippet>csv.writer()</snippet></ROW><ROW><id>15549698</id><snippet>dialect</snippet></ROW><ROW><id>15549698</id><snippet>fmtparams</snippet></ROW><ROW><id>15549698</id><snippet>time</snippet></ROW><ROW><id>15549698</id><snippet>Informationen.csv</snippet></ROW><ROW><id>15549698</id><snippet>csv.writer(myfile, dialect='excel', delimiter=' ')</snippet></ROW><ROW><id>15549698</id><snippet>bla</snippet></ROW><ROW><id>15549698</id><snippet>element1 element2 element3</snippet></ROW><ROW><id>15549698</id><snippet>element1,element2,element3</snippet></ROW><ROW><id>15549698</id><snippet>time</snippet></ROW><ROW><id>15549698</id><snippet>'Landhaus , Nord'</snippet></ROW><ROW><id>15549698</id><snippet>time</snippet></ROW><ROW><id>15549698</id><snippet>time</snippet></ROW><ROW><id>15549698</id><snippet>bla</snippet></ROW><ROW><id>15549698</id><snippet>delimiter=' '</snippet></ROW><ROW><id>15549698</id><snippet>csv.writer(myfile, dialect='excel', delimiter=' ')</snippet></ROW><ROW><id>15549698</id><snippet>import csv

car = ['car 11']
finish = ['Landhaus , Nord']
time = ["['05:36']", "['06:06']", "['06:36']", "['07:06']", "['07:36']"]
try:
    with open('Informationen.csv', 'w') as myfile:
        writer = csv.writer(myfile, dialect='excel')
        bla = [car, finish]
        for each_time in time:
            bla.append(each_time)
        writer.writerow(bla)
except IOError as ioe:
    print('Error: ' + str(ioe))
</snippet></ROW><ROW><id>15549731</id><snippet>__repr__</snippet></ROW><ROW><id>15549731</id><snippet>&gt;&gt;&gt; list(sorted(my_function().items()))
[('a', 'dictionary'), ('this', 'is')]
</snippet></ROW><ROW><id>15549731</id><snippet>&gt;&gt;&gt; my_function() == {'this': 'is', 'a': 'dictionary'}
True
</snippet></ROW><ROW><id>15549916</id><snippet>with_labels=False</snippet></ROW><ROW><id>15549916</id><snippet>networkx.draw()</snippet></ROW><ROW><id>15549916</id><snippet>networkx.draw(G, pos=pos, node_color=colors[curve],
    node_size=80, with_labels=False)
</snippet></ROW><ROW><id>15549916</id><snippet>networkx.draw_networkx_labels(G,pos, labels)
</snippet></ROW><ROW><id>15550332</id><snippet>\r\n</snippet></ROW><ROW><id>15550332</id><snippet>\n</snippet></ROW><ROW><id>15550332</id><snippet>\r</snippet></ROW><ROW><id>15550332</id><snippet>\r</snippet></ROW><ROW><id>15550332</id><snippet>\r</snippet></ROW><ROW><id>15550332</id><snippet>import re
textstr = ""
with open("mytext.txt", "rb") as fh:
    for line in fh:
        textstr += re.sub(r'\r$', '', line)
print(repr(textstr))
</snippet></ROW><ROW><id>15550415</id><snippet>imf = np.float32(imgcv1)/255.0  # float conversion/scale
dst = cv2.dct(imf)           # the dct
imgcv1 = np.uint8(dst)*255.0    # convert back
</snippet></ROW><ROW><id>15550618</id><snippet>from pprint import pprint
my_var = ['one', 'two', ('red','green'), {'state' : 'Oregon', 'city' : 'Portland'}]
pprint(my_var, width=1)
</snippet></ROW><ROW><id>15550660</id><snippet>np.savetxt</snippet></ROW><ROW><id>15550660</id><snippet>np.savetxt</snippet></ROW><ROW><id>15550660</id><snippet>scipy.savetxt('y.txt', y...)</snippet></ROW><ROW><id>15550660</id><snippet>(x, y)</snippet></ROW><ROW><id>15550660</id><snippet>0 1 2 3 4 5
10 11 12 13 14 15
</snippet></ROW><ROW><id>15550660</id><snippet>np.column_stack</snippet></ROW><ROW><id>15550660</id><snippet>import numpy as np
np.savetxt(filename, np.column_stack((x,y)), fmt='%g')
</snippet></ROW><ROW><id>15550660</id><snippet>x</snippet></ROW><ROW><id>15550660</id><snippet>y</snippet></ROW><ROW><id>15550660</id><snippet>unpack=True</snippet></ROW><ROW><id>15550660</id><snippet>x, y = np.genfromtxt(filename, unpack=True)
</snippet></ROW><ROW><id>15550712</id><snippet>lesser</snippet></ROW><ROW><id>15550712</id><snippet>greater</snippet></ROW><ROW><id>15550712</id><snippet>int lesser[]  = {};
int greater[]  ={};
</snippet></ROW><ROW><id>15550712</id><snippet>lesser[j] = lst[i];
</snippet></ROW><ROW><id>15550712</id><snippet>0</snippet></ROW><ROW><id>15550712</id><snippet>int len_lesser = sizeof(lesser)/sizeof(int);
</snippet></ROW><ROW><id>15550712</id><snippet>gcc</snippet></ROW><ROW><id>15550712</id><snippet>-Wall -W -pedantic</snippet></ROW><ROW><id>15550712</id><snippet> 36:26: error: zero-size array 'lesser'
 37:26: error: zero-size array 'greater'
</snippet></ROW><ROW><id>15551058</id><snippet>plt.plot</snippet></ROW><ROW><id>15551058</id><snippet>lines.Line2D</snippet></ROW><ROW><id>15551058</id><snippet>plt.show()
</snippet></ROW><ROW><id>15551204</id><snippet>re.findall(r'(https?://[^\s"]+)', s)
</snippet></ROW><ROW><id>15551242</id><snippet>df.ix['2001']</snippet></ROW><ROW><id>15551326</id><snippet>ModelForm</snippet></ROW><ROW><id>15551326</id><snippet>ModelForm</snippet></ROW><ROW><id>15551326</id><snippet>DateTimeField</snippet></ROW><ROW><id>15551326</id><snippet>DateTimeField</snippet></ROW><ROW><id>15551326</id><snippet>DateField</snippet></ROW><ROW><id>15551385</id><snippet>def foo(*args, **kw):
    a = kw.get('a', MyComplexObject())
    b = kw.get('b', b=Something())
    print a, b, args
</snippet></ROW><ROW><id>15551385</id><snippet>**</snippet></ROW><ROW><id>15551385</id><snippet>inspect.getargspec()</snippet></ROW><ROW><id>15551385</id><snippet>import inspect

defaults = inspect.getargspec(foo).defaults
foo(*(defaults + (1,2,3)))
</snippet></ROW><ROW><id>15551385</id><snippet>defaults</snippet></ROW><ROW><id>15551385</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; def foo(a='spam', b='foo', *args):
...     print a, b, args
... 
&gt;&gt;&gt; defaults = inspect.getargspec(foo).defaults
&gt;&gt;&gt; foo(*(defaults + (1,2,3)))
spam foo (1, 2, 3)
</snippet></ROW><ROW><id>15551516</id><snippet>from nltk.corpus import wordnet as wn

word = "dog"
synsets = wn.synsets(word)

sense2freq = {}
for s in synsets:
  freq = 0  
  for lemma in s.lemmas:
    freq+=lemma.count()
  sense2freq[s.offset+"-"+s.pos] = freq

for s in sense2freq:
  print s, sense2freq[s]
</snippet></ROW><ROW><id>15551548</id><snippet>print</snippet></ROW><ROW><id>15551548</id><snippet>print('my string with content and the like')
</snippet></ROW><ROW><id>15551576</id><snippet>b = ''
while 1:
    r = f.read()
    if r == '':break
    b += r
</snippet></ROW><ROW><id>15551611</id><snippet>import subprocess

the_name = 'the_name'
myproc = subprocess.Popen(['echo %s | bash Hello.sh' % the_name], stdin = subprocess.PIPE, stdout = subprocess.PIPE, shell=True)
out, err = myproc.communicate()

print out
</snippet></ROW><ROW><id>15551615</id><snippet>with sqlite.connect(...) as db:
    with db.cursor() as c:
        ...
</snippet></ROW><ROW><id>15551735</id><snippet>sys.executable</snippet></ROW><ROW><id>15551735</id><snippet>import sys

p = subprocess.Popen([sys.executable, 'myscript.py', arg1, arg2, arg3])
</snippet></ROW><ROW><id>15551735</id><snippet>stderr</snippet></ROW><ROW><id>15551735</id><snippet>stdout</snippet></ROW><ROW><id>15551735</id><snippet>communicate</snippet></ROW><ROW><id>15551735</id><snippet>(stdoutdata, stderrdata) = p.communicate()

print stdoutdata, 
print stderrdata
</snippet></ROW><ROW><id>15551806</id><snippet>import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.DataFrame(np.random.rand(37,4), columns=list('ABCD'))
columns_my_order = ['C', 'A', 'D', 'B']
fig, ax = plt.subplots()
for position, column in enumerate(columns_my_order):
    ax.boxplot(df[column], positions=[position])

ax.set_xticks(range(position+1))
ax.set_xticklabels(columns_my_order)
ax.set_xlim(xmin=-0.5)
plt.show()
</snippet></ROW><ROW><id>15552001</id><snippet>__init__</snippet></ROW><ROW><id>15552001</id><snippet>instance = WhateverClass()</snippet></ROW><ROW><id>15552001</id><snippet>_list</snippet></ROW><ROW><id>15552001</id><snippet>__init__</snippet></ROW><ROW><id>15552001</id><snippet>class Singleton(object):
    _instance = None
    def __new__(class_, *args, **kwargs):
        if not isinstance(class_._instance, class_):
            class_._instance = object.__new__(class_, *args, **kwargs)
            return class_._instance

class Foo(Singleton):
    def __init__(self):
        self.data = []
    pass

a = Foo()
a.data.append('Never see this')
b = Foo()
print a is b  #True
print a.data  # []
</snippet></ROW><ROW><id>15552002</id><snippet>datetime</snippet></ROW><ROW><id>15552002</id><snippet>import datetime
day = datetime.datetime.strptime('Tue Feb 19 00:09:28 +1100 2013', '%a %b %d %H:%M:%S +1100 %Y')
delta = day - datetime.datetime.now()
print delta.days
</snippet></ROW><ROW><id>15552002</id><snippet>datetime.datetime</snippet></ROW><ROW><id>15552002</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>15552002</id><snippet>days</snippet></ROW><ROW><id>15552002</id><snippet>python-dateutil</snippet></ROW><ROW><id>15552002</id><snippet>&gt;&gt;&gt; from dateutil import parser
&gt;&gt;&gt; parser.parse('Tue Feb 19 00:09:28 +1100 2013')
datetime.datetime(2013, 2, 19, 0, 9, 28, tzinfo=tzoffset(None, 39600))
</snippet></ROW><ROW><id>15552002</id><snippet>datetime</snippet></ROW><ROW><id>15552002</id><snippet>&gt;&gt;&gt; from dateutil import tz
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; utcnow = datetime.datetime.now(tz.tzutc())
&gt;&gt;&gt; then = parser.parse('Tue Feb 19 00:09:28 +1100 2013')
&gt;&gt;&gt; utcnow - then
datetime.timedelta(31, 12087, 617740)
&gt;&gt;&gt; (utcnow - then).days
31
</snippet></ROW><ROW><id>15552002</id><snippet>utcnow</snippet></ROW><ROW><id>15552169</id><snippet>(\r|\n)+</snippet></ROW><ROW><id>15552252</id><snippet>import sys

if len(sys.argv) == 1:
    sys.argv.append("py2exe")
</snippet></ROW><ROW><id>15552518</id><snippet>if</snippet></ROW><ROW><id>15552518</id><snippet>elif</snippet></ROW><ROW><id>15552518</id><snippet>a</snippet></ROW><ROW><id>15552518</id><snippet>b</snippet></ROW><ROW><id>15552518</id><snippet>c</snippet></ROW><ROW><id>15552518</id><snippet>a</snippet></ROW><ROW><id>15552518</id><snippet>b</snippet></ROW><ROW><id>15552518</id><snippet>c</snippet></ROW><ROW><id>15552676</id><snippet>HEAD</snippet></ROW><ROW><id>15552676</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; c = httplib.HTTPConnection("www.google.co.uk")
&gt;&gt;&gt; c.request("HEAD", "/index.html")
&gt;&gt;&gt; r = c.getresponse()
&gt;&gt;&gt; r.getheaders()
[('x-xss-protection', '1; mode=block'), ('transfer-encoding', 'chunked'), ('set-cookie', 'PREF=ID=7867b0a5641d5f7b:FF=0:TM=1363882090:LM=1363882090:S=EXLl2JgBqzMKODcq; expires=Sat, 21-Mar-2015 16:08:10 GMT; path=/; domain=.google.co.uk, NID=67=qElAph6eqHyYKbh995ivP4B-21YRDRED4-uRXx0AvC3vLpv0SF1LkdsI2k6Hg1IhsatrVVqWf2slcMCaQsAZwZ89YfU0F1iPVBdt9PC2FItff31oRJ3gvhJVTQLa_RAt; expires=Fri, 20-Sep-2013 16:08:10 GMT; path=/; domain=.google.co.uk; HttpOnly'), ('expires', '-1'), ('server', 'gws'), ('cache-control', 'private, max-age=0'), ('date', 'Thu, 21 Mar 2013 16:08:10 GMT'), ('p3p', 'CP="This is not a P3P policy! See http://www.google.com/support/accounts/bin/answer.py?hl=en&amp;answer=151657 for more info."'), ('content-type', 'text/html; charset=ISO-8859-1'), ('x-frame-options', 'SAMEORIGIN')]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>15552709</id><snippet>pssh</snippet></ROW><ROW><id>15552787</id><snippet>#
# Weekdays
#

# Start 7 am - End 12 pm =&gt; run script every 5 minutes
*/5  7-11      * * mon-fri *   yourscript

# Start 12:00 pm - End 4 pm =&gt; run script every 30 minutes
0,30 12-15     * * mon-fri *   yourscript

# Start 4 pm - End 9 pm =&gt; run script every 5 minutes
*/5  16-20     * * mon-fri *   yourscript

# Start 9 pm - End 7 am =&gt; run script every hour
0    0-6,21-23 * * mon-fri *   yourscript

# 
# Weekends
#

# Run script every half hour
0,30 *         * * sat-sun *   yourscript
</snippet></ROW><ROW><id>15552945</id><snippet>\t</snippet></ROW><ROW><id>15552945</id><snippet>\t&lt;shortcut&gt;</snippet></ROW><ROW><id>15552945</id><snippet>Ctrl + T</snippet></ROW><ROW><id>15552945</id><snippet>menu = wx.Menu()
item_id = 1
item_name = 'My menu item\tCtrl+T'
help_text = 'Clicking this does something interesting.'
item = menu.Append(item_id, item_name, help_text)
</snippet></ROW><ROW><id>15552945</id><snippet>item_name</snippet></ROW><ROW><id>15552945</id><snippet>AcceleratorTable</snippet></ROW><ROW><id>15552945</id><snippet>menu = wx.Menu()
item_id = 1

# Ctrl+T is bound to the keybinding
accelerator_table = wx.AcceleratorTable([(wx.ACCEL_CTRL, ord('T'), item_id)])
self.setAcceleratorTable(accelerator_table)

# Ctrl+T is not included, but the menu item can be accessed via Alt key
item_name = '&amp;My menu item'

help_text = 'Clicking this does something interesting.'
item = menu.Append(item_id, item_name, help_text)
</snippet></ROW><ROW><id>15552945</id><snippet>item_id</snippet></ROW><ROW><id>15553326</id><snippet>oauth_access_token = (instance.tokens).get('oauth_token')
</snippet></ROW><ROW><id>15553565</id><snippet>text</snippet></ROW><ROW><id>15553565</id><snippet>homepage_link</snippet></ROW><ROW><id>15553565</id><snippet>SQL = 'SELECT Hint FROM tblQuestion WHERE QuestionID = %s' % self.label111['text'] 
</snippet></ROW><ROW><id>15553635</id><snippet>pickle</snippet></ROW><ROW><id>15553635</id><snippet>import pickle

copy = pickle.loads(pickle.dumps(someobject))
</snippet></ROW><ROW><id>15553662</id><snippet>ordered_sculptures = Sculpture.objects.filter(potter=potter).order_by('-created') 
ordered_vases = Vase.objects.filter(potter=potter).order_by('-created')
</snippet></ROW><ROW><id>15553662</id><snippet>latest = ordered_sculptures[0]
</snippet></ROW><ROW><id>15553662</id><snippet>latest = Sculpture.objects.filter(potter=potter).reverse()[0]
</snippet></ROW><ROW><id>15553757</id><snippet>class sqlalchemy.pool.Pool(creator, recycle=-1, echo=None, use_threadlocal=False, logging_name=None, reset_on_return=True, listeners=None, events=None, _dispatch=None)
</snippet></ROW><ROW><id>15554115</id><snippet>children</snippet></ROW><ROW><id>15554115</id><snippet>__init__</snippet></ROW><ROW><id>15554115</id><snippet>self.children = []</snippet></ROW><ROW><id>15554288</id><snippet>im.convert("1")</snippet></ROW><ROW><id>15554288</id><snippet>im_arr = np.array(im.getdata(), dtype = np.uint8).reshape(im.size[0], im.size[1])
</snippet></ROW><ROW><id>15554288</id><snippet>matplotlib.pyplot.imshow</snippet></ROW><ROW><id>15554288</id><snippet>np.int</snippet></ROW><ROW><id>15554288</id><snippet>np.int8</snippet></ROW><ROW><id>15554288</id><snippet>np.uint8</snippet></ROW><ROW><id>15554288</id><snippet>PIL.Image</snippet></ROW><ROW><id>15554288</id><snippet>.getdata()</snippet></ROW><ROW><id>15554407</id><snippet>7z</snippet></ROW><ROW><id>15554407</id><snippet>subprocess</snippet></ROW><ROW><id>15554407</id><snippet>import subprocess
subprocess.call(["7z", "x", "-ppassword", "test.zip"])
</snippet></ROW><ROW><id>15554416</id><snippet>cmd = [
    'mysql',
    '--database=%s' % self._database,
    '--password=%s' % self._password,
    '--execute=%s' % query
]

(...)

p = subprocess.Popen(cmd, shell = False, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
out, err = p.communicate()
errcode = p.returncode
</snippet></ROW><ROW><id>15554476</id><snippet>def delete(word,letter):
    word = []
    char = ""
    if char != letter: 
        word+=char # or `word = word.append(char)` in 2nd version
    return word
</snippet></ROW><ROW><id>15554476</id><snippet>char</snippet></ROW><ROW><id>15554476</id><snippet>letter</snippet></ROW><ROW><id>15554476</id><snippet>char</snippet></ROW><ROW><id>15554476</id><snippet>word</snippet></ROW><ROW><id>15554476</id><snippet>word</snippet></ROW><ROW><id>15554476</id><snippet>+</snippet></ROW><ROW><id>15554476</id><snippet>append</snippet></ROW><ROW><id>15554476</id><snippet>def delete(word, letter):
    newWord = '' # let's not overwrite the passed word
    for char in word:
        # `char` is now each character of the original word.
        # Here you now need to decide if you want to keep the
        # character for `newWord` or not.
    return newWord
</snippet></ROW><ROW><id>15554476</id><snippet>for var in something</snippet></ROW><ROW><id>15554476</id><snippet>something</snippet></ROW><ROW><id>15554476</id><snippet>var</snippet></ROW><ROW><id>15554533</id><snippet>from itertools import combinations

def venn_count(named_sets):
    names = set(named_sets)
    for i in range(1, len(named_sets)+1):
        for to_intersect in combinations(sorted(named_sets), i):
            others = names.difference(to_intersect)
            intersected = set.intersection(*(named_sets[k] for k in to_intersect))
            unioned = set.union(*(named_sets[k] for k in others)) if others else set()
            yield to_intersect, others, len(intersected - unioned)


ns = {"a": {1,2,5,10,12}, "b": {1,2,6,9,12,15}, "c": {1,2,7,8,15}}
for intersected, unioned, count in venn_count(ns):
    print 'len({}{}) = {}'.format(' &amp; '.join(sorted(intersected)),
                                  ' - ' + ' - '.join(sorted(unioned)) if unioned else '',
                                  count)
</snippet></ROW><ROW><id>15554533</id><snippet>len(a - b - c) = 2
len(b - a - c) = 2
len(c - a - b) = 2
len(a &amp; b - c) = 1
len(a &amp; c - b) = 0
len(b &amp; c - a) = 1
len(a &amp; b &amp; c) = 2
</snippet></ROW><ROW><id>15554574</id><snippet>myfile = open('your_filename_here', r+)
</snippet></ROW><ROW><id>15554574</id><snippet>myregex = re.compile('zone.*?\};', re.DOTALL | re.MULTILINE)
mylist = myregex.findall(myfile.read())
</snippet></ROW><ROW><id>15554574</id><snippet>for entry in mylist:
    if 'string_to_remove' in entry:
        mylist.remove(entry)
</snippet></ROW><ROW><id>15554574</id><snippet>myfile.seek(0)
for entry in mylist:
    myfile.write(entry)
myfile.truncate()
myfile.close()
</snippet></ROW><ROW><id>15554684</id><snippet>pipe(2)</snippet></ROW><ROW><id>15554684</id><snippet>epoll.register()</snippet></ROW><ROW><id>15554684</id><snippet>epoll.poll()</snippet></ROW><ROW><id>15554921</id><snippet>max(appleCreated, bananaCreated, lemonCreated, orangeCreated)
</snippet></ROW><ROW><id>15555126</id><snippet>scatter</snippet></ROW><ROW><id>15555126</id><snippet>import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
from pylab import *

figure(figsize=(15, 8))
# use ginput to select markers for the sensors
matplotlib.pyplot.hot()

markers = [(269, 792, 0.65), (1661, 800, 0.5), (1017, 457, 0.8)]
x,y,t = zip(*markers)

img = mpimg.imread('floor.png')
imgplot = plt.imshow(img, cmap=cm.hot)
scatter(x, y, marker='h', c=t, s=150)

colorbar()
show()
</snippet></ROW><ROW><id>15555126</id><snippet>plot</snippet></ROW><ROW><id>15555126</id><snippet>cmap</snippet></ROW><ROW><id>15555126</id><snippet>scatter</snippet></ROW><ROW><id>15555398</id><snippet>\x0A</snippet></ROW><ROW><id>15555398</id><snippet>re.sub('(?s)^\x72.([^\x7A]+)....
</snippet></ROW><ROW><id>15555498</id><snippet>sa.Column('id', sa.Integer, Sequence('srv_feed_r_t_seq'),primary_key=True),</snippet></ROW><ROW><id>15555498</id><snippet>#creating the table
op.create_table(
    'srv_feed_return_type',
    sa.Column('id', sa.Integer, Sequence('srv_feed_r_t_seq'),primary_key=True),
    sa.Column('name', sa.String(50), nullable=False),
    sa.Column('created', sa.DateTime, server_default=func.now(), nullable=False),
    sa.Column('created_by', sa.String(50), nullable=False),
    sa.Column('last_updated', sa.DateTime, nullable=False),
    sa.Column('last_updated_by', sa.String(50), nullable=False)
)
</snippet></ROW><ROW><id>15555498</id><snippet>op.execute</snippet></ROW><ROW><id>15555498</id><snippet>op.bulk_insert</snippet></ROW><ROW><id>15555498</id><snippet>bulk_insert</snippet></ROW><ROW><id>15555498</id><snippet>execute(table.update ...)</snippet></ROW><ROW><id>15555498</id><snippet>connection = op.get_bind()
r = connection.execute(srv_feed_return_type.select().where(...))
for row in r:
    pk_id = r['id']
    """or something more sophisticated"""
</snippet></ROW><ROW><id>15555575</id><snippet>if word[-1] in ".?":
</snippet></ROW><ROW><id>15555575</id><snippet>in</snippet></ROW><ROW><id>15555745</id><snippet>dict.setdefault</snippet></ROW><ROW><id>15555745</id><snippet>get</snippet></ROW><ROW><id>15555745</id><snippet>&gt;&gt;&gt; my_dict = {}
&gt;&gt;&gt; my_dict.setdefault('some key', 'a value')
'a value'
&gt;&gt;&gt; my_dict
{'some key': 'a value'}
&gt;&gt;&gt; my_dict.get('some key2', 'a value2')
'a value2'
&gt;&gt;&gt; my_dict
{'some key': 'a value'}
</snippet></ROW><ROW><id>15555745</id><snippet>&gt;&gt;&gt; def what(*words):
...     d = dict()
...     for word in words:
...             curr = d
...             for letter in word:
...                     curr = curr.setdefault(letter, {})
...             curr = curr.setdefault('.', '.')
...             print 'curr is now: %r while d is %r' % (curr, d)
... 
&gt;&gt;&gt; what('foo')
curr is now: '.' while d is {'f': {'o': {'o': {'.': '.'}}}}
</snippet></ROW><ROW><id>15555745</id><snippet>curr</snippet></ROW><ROW><id>15555745</id><snippet>setdefault</snippet></ROW><ROW><id>15555745</id><snippet>dict</snippet></ROW><ROW><id>15555745</id><snippet>curr</snippet></ROW><ROW><id>15555745</id><snippet>d</snippet></ROW><ROW><id>15555745</id><snippet>dict</snippet></ROW><ROW><id>15555745</id><snippet>{'f': {'o': {'o': {'.': '.'}}}}</snippet></ROW><ROW><id>15555745</id><snippet>{}</snippet></ROW><ROW><id>15555745</id><snippet>curr = curr.setdefault(letter, {})</snippet></ROW><ROW><id>15555745</id><snippet>dict</snippet></ROW><ROW><id>15555745</id><snippet>curr</snippet></ROW><ROW><id>15555745</id><snippet>dict</snippet></ROW><ROW><id>15555745</id><snippet>&gt;&gt;&gt; my_dict = {}
&gt;&gt;&gt; curr = my_dict
&gt;&gt;&gt; for letter in 'foo':
...     print 'my_dict is now %r. curr is now %r' % (my_dict, curr)
...     curr = curr.setdefault(letter, {})
... 
my_dict is now {}. curr is now {}
my_dict is now {'f': {}}. curr is now {}
my_dict is now {'f': {'o': {}}}. curr is now {}
&gt;&gt;&gt; my_dict
{'f': {'o': {'o': {}}}}
</snippet></ROW><ROW><id>15555745</id><snippet>my_dict</snippet></ROW><ROW><id>15555745</id><snippet>'foo' -&gt; {'f': {}, 'o': {}}</snippet></ROW><ROW><id>15555745</id><snippet>&gt;&gt;&gt; my_dict = {}
&gt;&gt;&gt; for letter in 'foo':
...     my_dict.setdefault(letter, {})
... 
&gt;&gt;&gt; my_dict
{'o': {}, 'f': {}}
</snippet></ROW><ROW><id>15555794</id><snippet>find</snippet></ROW><ROW><id>15555794</id><snippet>rfind</snippet></ROW><ROW><id>15555794</id><snippet>def crop(doc, start, end):
    return doc[doc.find(start):doc.rfind(end)+len(end)]
</snippet></ROW><ROW><id>15555935</id><snippet>__slots__</snippet></ROW><ROW><id>15555935</id><snippet>class Person(object):
   __slots__ = ['name', 'age']
   def __init__(self):
      self.name = 'jack'
      self.age = 99
</snippet></ROW><ROW><id>15556231</id><snippet>outfile</snippet></ROW><ROW><id>15556231</id><snippet>outfile.close()</snippet></ROW><ROW><id>15556231</id><snippet>close</snippet></ROW><ROW><id>15556257</id><snippet>self.commit()</snippet></ROW><ROW><id>15556257</id><snippet>self.commit() # write changes to db   
</snippet></ROW><ROW><id>15556257</id><snippet>()</snippet></ROW><ROW><id>15556257</id><snippet>execute()</snippet></ROW><ROW><id>15556257</id><snippet>def execute(self, query):
    return self.cur.execute(query)
</snippet></ROW><ROW><id>15556413</id><snippet>ÆîÀy�loader_mc�@�   �i�@�p@�    �i�@�¬@�    �i�@�ä@�    �i�@@�  �i�@T@� �i�@@�  �i�@È@� �i�@�@� �i�@8@� �i�@p@� �i�@¬@� �i�
</snippet></ROW><ROW><id>15556413</id><snippet>base64</snippet></ROW><ROW><id>15556471</id><snippet>-m</snippet></ROW><ROW><id>15556471</id><snippet>C:\python27\python -m myscript
</snippet></ROW><ROW><id>15556471</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>15556544</id><snippet>Cleaner</snippet></ROW><ROW><id>15556544</id><snippet>page_structure</snippet></ROW><ROW><id>15556544</id><snippet>&gt;&gt;&gt; from lxml.html.clean import Cleaner                                                           
&gt;&gt;&gt; cleaner = Cleaner(page_structure=False)                                          
&gt;&gt;&gt; cleaner.clean_html("&lt;html&gt;&lt;body&gt;&lt;h1&gt;hi&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;")
'&lt;html&gt;&lt;body&gt;&lt;h1&gt;hi&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;' 
</snippet></ROW><ROW><id>15556544</id><snippet>page_structure</snippet></ROW><ROW><id>15556544</id><snippet>True</snippet></ROW><ROW><id>15556600</id><snippet>    ipElement = network_object.getElementsByTagName("ipaddr")
if ipElement:    
    ipElement = network_object.getElementsByTagName("ipaddr")[0]
    ipaddr = ipElement.firstChild.data
maskElement = network_object.getElementsByTagName("netmask")
if maskElement:
    maskElement = network_object.getElementsByTagName("netmask")[0]
    netmask = maskElement.firstChild.data
</snippet></ROW><ROW><id>15556634</id><snippet>from collections import defaultdict
bookdict = defaultdict(set)
for book, name in bookList:
    bookdict[name].add(book)
logged_in_user = 'fred'
for person, books in bookdict.items():
    if person == logged_in_user:
        continue
    common = books.intersection(bookdict[logged_in_user])
    if common:
        print '%s also has %s' % (person, ', '.join(common))
</snippet></ROW><ROW><id>15556665</id><snippet>0.1</snippet></ROW><ROW><id>15556665</id><snippet>float</snippet></ROW><ROW><id>15556665</id><snippet>0.1</snippet></ROW><ROW><id>15556665</id><snippet>In [2]: '%.20f' % 0.1
Out[2]: '0.10000000000000000555'
</snippet></ROW><ROW><id>15556665</id><snippet>x</snippet></ROW><ROW><id>15556665</id><snippet>1.0</snippet></ROW><ROW><id>15556975</id><snippet>mode</snippet></ROW><ROW><id>15556975</id><snippet>scipy.stats</snippet></ROW><ROW><id>15556975</id><snippet>In [32]: import numpy as np

In [33]: from scipy.stats import mode

In [34]: data = np.random.randint(1,6, size=(6,8))

In [35]: data
Out[35]: 
array([[2, 1, 5, 5, 3, 3, 1, 4],
       [5, 3, 2, 2, 5, 2, 5, 3],
       [2, 2, 5, 3, 3, 2, 1, 1],
       [2, 4, 1, 5, 4, 4, 4, 5],
       [4, 4, 5, 5, 2, 4, 4, 4],
       [2, 4, 1, 1, 3, 3, 1, 3]])

In [36]: val, count = mode(data, axis=0)

In [37]: val
Out[37]: array([[ 2.,  4.,  5.,  5.,  3.,  2.,  1.,  3.]])

In [38]: count
Out[38]: array([[ 4.,  3.,  3.,  3.,  3.,  2.,  3.,  2.]])
</snippet></ROW><ROW><id>15557002</id><snippet>if __name__ == '__main__':
    hello()
</snippet></ROW><ROW><id>15557056</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>15557056</id><snippet>from bs4 import BeautifulSoup

result = '''&lt;div class="test"&gt;
             &lt;a href="example"&gt;Result 1&lt;/a&gt;
            &lt;/div&gt;

            &lt;div class="test"&gt;
             &lt;a href="example2"&gt;Result 2&lt;/a&gt;
            &lt;/div&gt;'''

soup = BeautifulSoup(result)

for div in soup.findAll('div', attrs={'class':'test'}):
    print div.find('a').text

Result 1
Result 2
</snippet></ROW><ROW><id>15557059</id><snippet>with engine.begin() as db:
    convert_email(db, user_id, response)
</snippet></ROW><ROW><id>15557059</id><snippet>rollback()</snippet></ROW><ROW><id>15557059</id><snippet>Transaction.close()</snippet></ROW><ROW><id>15557313</id><snippet>usr = authenticate(username=usrnym,password=psswrd)</snippet></ROW><ROW><id>15557321</id><snippet>pack()</snippet></ROW><ROW><id>15557321</id><snippet>pack(side='left')</snippet></ROW><ROW><id>15557335</id><snippet>class LoginFormWithoutNickname(LoginForm):
    def __init__(self, *args, **kwargs):
        super (LoginFormWithoutNickname, self).__init__(*args,**kwargs)
        self.fields.pop('nickname')
</snippet></ROW><ROW><id>15557377</id><snippet>from copy import deepcopy

g={1:'a',2:'b',3:["k",'c'],4:'d'}

gt=copy.deepcopy(g)  

gt[3].remove('c')
</snippet></ROW><ROW><id>15557671</id><snippet>event_post</snippet></ROW><ROW><id>15557671</id><snippet>SDL_PushEvent</snippet></ROW><ROW><id>15557671</id><snippet>SDL_PushEvent</snippet></ROW><ROW><id>15557731</id><snippet>secsAfterADEpoch = float(your_weird_time) / 10000000.0 # seconds since jan 1st 1601
ADToUnixConvertor = ((1970-1601) * 365.242190) * 86400 # unix epoch - AD epoch * number of tropical days * seconds in a day
unixified = (secsAfterADEpoch-ADToUnixConvertor)+31800 # unix Timestamp version of AD timestamp + correction time
</snippet></ROW><ROW><id>15557731</id><snippet>+31800</snippet></ROW><ROW><id>15557808</id><snippet>last_five = somesequence[-5:]
</snippet></ROW><ROW><id>15557847</id><snippet>datetime.datetime</snippet></ROW><ROW><id>15557847</id><snippet>.date()</snippet></ROW><ROW><id>15557847</id><snippet>datetime.datetime.strptime('30-01-12', '%d-%m-%y').date()
</snippet></ROW><ROW><id>15557847</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.strptime('30-01-12', '%d-%m-%y').date()
datetime.date(2012, 1, 30)
</snippet></ROW><ROW><id>15557959</id><snippet>-Inf</snippet></ROW><ROW><id>15557959</id><snippet>DF &lt;- read.table('http://filebin.ca/azuz9Piv0z8/test.data')
DF[!is.finite(DF[,1]) | !is.finite(DF[,2]),]
#        V1   V2
# 5952 -Inf -Inf
</snippet></ROW><ROW><id>15558000</id><snippet>C:\Python??\Lib\Site.py</snippet></ROW><ROW><id>15558000</id><snippet>sys.setdefaultencoding('latin-1')
</snippet></ROW><ROW><id>15558183</id><snippet>for line in hosts:
        print line.split()[1:]
</snippet></ROW><ROW><id>15558190</id><snippet>raw = np.loadtxt(StringIO(a), dtype='f8')
resh = raw.reshape(-1,2) # This will work for any (even) length initial data
rec = resh.view([('x', 'f8'), ('y', 'f8')], np.recarray)
</snippet></ROW><ROW><id>15558407</id><snippet>y=78</snippet></ROW><ROW><id>15558407</id><snippet>tmp[0]</snippet></ROW><ROW><id>15558407</id><snippet>matrix[0][78]</snippet></ROW><ROW><id>15558407</id><snippet>matrix[0][78]</snippet></ROW><ROW><id>15558407</id><snippet>min_path</snippet></ROW><ROW><id>15558407</id><snippet>min_path</snippet></ROW><ROW><id>15558407</id><snippet>min_path[x][y]</snippet></ROW><ROW><id>15558407</id><snippet>[x][y]</snippet></ROW><ROW><id>15558407</id><snippet>min_path</snippet></ROW><ROW><id>15558407</id><snippet>min_path[i][j]</snippet></ROW><ROW><id>15558407</id><snippet>min_path</snippet></ROW><ROW><id>15558407</id><snippet>sum_to</snippet></ROW><ROW><id>15558443</id><snippet>isalpha()</snippet></ROW><ROW><id>15558443</id><snippet>&gt;&gt;&gt; s = "a123b"
&gt;&gt;&gt; for i in s:
...     print i, i.isalpha()
... 
a True
1 False
2 False
3 False
b True
</snippet></ROW><ROW><id>15558659</id><snippet>re.sub(r'\b\w', lambda m: m.group(0).upper(), s.lower())
</snippet></ROW><ROW><id>15558796</id><snippet>hist</snippet></ROW><ROW><id>15558796</id><snippet>x, y, o = plt.hist(hdata)

print x.max()
print y.max()
</snippet></ROW><ROW><id>15558796</id><snippet>len(x) = len(y) - 1</snippet></ROW><ROW><id>15558828</id><snippet>out = None
oldfile = None
with open("entry.txt") as f: 
    for line in f:
        newfile = l.split("\t")[0]
        if newfile != oldfile:
            if out: out.close()
            out = open(newfile + ".txt", "w")
            oldfile = newfile
        out.write("\t".join(line.split("\t")[1:]))
</snippet></ROW><ROW><id>15558918</id><snippet>request.GET.get('feature')</snippet></ROW><ROW><id>15559137</id><snippet>Encoder(0,0).start()</snippet></ROW><ROW><id>15559137</id><snippet>run</snippet></ROW><ROW><id>15559137</id><snippet>rotations</snippet></ROW><ROW><id>15559137</id><snippet>run</snippet></ROW><ROW><id>15559137</id><snippet>Thread = Encoder(0,0).start()</snippet></ROW><ROW><id>15559252</id><snippet>def convert(ls):
    last = None
    for x in ls:
        if x == 'prev': x = -1
        if x == 'next': x = +1
        if isinstance(x, int) and isinstance(last, int):
            x += last
        elif last:  # last is not None if you want zeroes
            yield last
        last = x
    yield last
</snippet></ROW><ROW><id>15559334</id><snippet>parts = re.search("(.*?)=(.*)", exp);
</snippet></ROW><ROW><id>15559334</id><snippet>=</snippet></ROW><ROW><id>15559334</id><snippet>$</snippet></ROW><ROW><id>15559334</id><snippet>left, _, right = exp.partition('=')
</snippet></ROW><ROW><id>15559369</id><snippet>def to_dict(self):
  return dict([(p, unicode(getattr(self, p))) for p,t in self.properties().items() if type(t) is not db.BlobProperty])
</snippet></ROW><ROW><id>15559407</id><snippet>.mode</snippet></ROW><ROW><id>15559407</id><snippet>x</snippet></ROW><ROW><id>15559407</id><snippet>.mode</snippet></ROW><ROW><id>15559407</id><snippet>.mode</snippet></ROW><ROW><id>15559499</id><snippet>for</snippet></ROW><ROW><id>15559499</id><snippet>def asterix_triangle(depth):
        rows = [ (depth-i)*' ' + i*'*' + '*'   for i in range(depth) ]
        for i in rows:
            print i
</snippet></ROW><ROW><id>15559499</id><snippet>&gt;&gt;&gt; asterix_triangle(4)
    *
   **
  ***
 ****
</snippet></ROW><ROW><id>15559499</id><snippet>def asterix_triangle(depth):
        rows = [ (depth-i)*' ' + i*'*' + '*' + i*'*'  for i in range(depth) ]
        for j in rows:
            print j
</snippet></ROW><ROW><id>15559499</id><snippet>&gt;&gt;&gt; asterix_triangle(4)
    *
   ***
  *****
 *******
</snippet></ROW><ROW><id>15559519</id><snippet>index = 0</snippet></ROW><ROW><id>15559519</id><snippet>run</snippet></ROW><ROW><id>15559519</id><snippet>class ThreadClass(threading.Thread):
    def __init__(self, index):
        super(ThreadClass, self).__init__()
        self.index = index
    def run(self):
        sn = serverlist[self.index]
        print sn
        # same code as before, minus the index = index + 1 bit

for i in range(len(severlist)):
    t = ThreadClass(i)
    t.start()
</snippet></ROW><ROW><id>15559519</id><snippet>serverlist</snippet></ROW><ROW><id>15559519</id><snippet>severlist</snippet></ROW><ROW><id>15559519</id><snippet>sn</snippet></ROW><ROW><id>15559519</id><snippet>class ThreadClass(threading.Thread):
    def __init__(self, sn):
        super(ThreadClass, self).__init__()
        self.sn = sn
    def run(self):
        print self.sn
        # same code as last version, but use self.sn instead of sn

for sn in severlist:
    t = ThreadClass(sn)
    t.start()
</snippet></ROW><ROW><id>15559519</id><snippet>index = 0
index_lock = threading.Lock()

class ThreadClass(threading.Thread):
    def run(self):
        global index, index_lock
        with index_lock:
            sn = serverlist[index]
            index += 1
        print sn
        # same code as first version
</snippet></ROW><ROW><id>15559519</id><snippet>def job(sn):
    print sn
    # same code as first version again

with concurrent.futures.ThreadPoolExecutor() as executor:
    executor.map(job, serverlist)
</snippet></ROW><ROW><id>15559519</id><snippet>max_workers=len(serverlist)</snippet></ROW><ROW><id>15559519</id><snippet>ThreadPoolExecutor</snippet></ROW><ROW><id>15559595</id><snippet>mkdir /mnt/pip-cache
</snippet></ROW><ROW><id>15559595</id><snippet>[global]
download-cache = /mnt/pip-cache
</snippet></ROW><ROW><id>15559654</id><snippet>np.histogram</snippet></ROW><ROW><id>15559654</id><snippet>y</snippet></ROW><ROW><id>15559654</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x = np.random.rand(100)
y = np.sin(2*np.pi*x) + 2 * x * (np.random.rand(100)-0.5)
nbins = 10

n, _ = np.histogram(x, bins=nbins)
sy, _ = np.histogram(x, bins=nbins, weights=y)
sy2, _ = np.histogram(x, bins=nbins, weights=y*y)
mean = sy / n
std = np.sqrt(sy2/n - mean*mean)

plt.plot(x, y, 'bo')
plt.errorbar((_[1:] + _[:-1])/2, mean, yerr=std, fmt='r-')
plt.show()
</snippet></ROW><ROW><id>15559756</id><snippet>p4.run_sync()</snippet></ROW><ROW><id>15559756</id><snippet>p4.run_COMMAND()</snippet></ROW><ROW><id>15559756</id><snippet>p4.run</snippet></ROW><ROW><id>15559756</id><snippet>Whether the elements of the array are strings or dictionaries depends on
(a) server support for tagged output for the command, and
(b) whether tagged output was disabled by calling p4.tagged = False.
</snippet></ROW><ROW><id>15559756</id><snippet>p4.run_sync()</snippet></ROW><ROW><id>15559756</id><snippet>p4 sync ...</snippet></ROW><ROW><id>15559756</id><snippet>change</snippet></ROW><ROW><id>15559756</id><snippet>rev</snippet></ROW><ROW><id>15559756</id><snippet>depotFile</snippet></ROW><ROW><id>15559756</id><snippet>//depot/branch1/dir1/file1#4</snippet></ROW><ROW><id>15559756</id><snippet>fstat</snippet></ROW><ROW><id>15559756</id><snippet>&gt;&gt;&gt; result = p4.run_fstat("//depot/branch1/dir1/file1#4")
&gt;&gt;&gt; print result[0]['headChange']
12345
</snippet></ROW><ROW><id>15559756</id><snippet>//depot/branch1/dir1/file1</snippet></ROW><ROW><id>15559756</id><snippet>12345</snippet></ROW><ROW><id>15559890</id><snippet>z</snippet></ROW><ROW><id>15559890</id><snippet>f</snippet></ROW><ROW><id>15559890</id><snippet>iterators =  izip(*f(z()))
</snippet></ROW><ROW><id>15559890</id><snippet>f</snippet></ROW><ROW><id>15559890</id><snippet>for _ in z: pass  # z is a function
</snippet></ROW><ROW><id>15559890</id><snippet>TypeError: 'function' object is not iterable
</snippet></ROW><ROW><id>15559890</id><snippet># ceval.c

static PyObject *
ext_do_call(PyObject *func, PyObject ***pp_stack, int flags, int na, int nk)
{
 ...

            t = PySequence_Tuple(stararg);
            if (t == NULL) {
                if (PyErr_ExceptionMatches(PyExc_TypeError)) {
                    PyErr_Format(PyExc_TypeError,
                                 "%.200s%.200s argument after * "
                                 "must be a sequence, not %200s",
                                 PyEval_GetFuncName(func),
                                 PyEval_GetFuncDesc(func),
                                 stararg-&gt;ob_type-&gt;tp_name);
 ...
</snippet></ROW><ROW><id>15560058</id><snippet>import urllib2, re

def get_data_text(month, year):
    """given a month and a year, this method returns the raw data file (as a list of rows)"""
    url_pattern = 'http://www.treasurydirect.gov/govt/reports/pd/mspd/{year:4d}/opds{month:02d}{year:4d}.prn'
    url = url_pattern.format(month=month, year=year)
    source = urllib2.urlopen(url)
    data = source.readlines()
    source.close()
    return data


def keep_only_interesting_rows(data, interesting_rows):
    """filter data rows in order to keep only the ones that start with strings in interesting_rows list"""
    return [line for line in data if any([line.strip().startswith(ir) for ir in interesting_rows])]


def convert_data_to_dict(data):
    """converts every row in data to a dictionary element """
    return {re.sub('\.*\s*$', '', el[0:46]).strip():(int(el[47:63].replace(',','')), int(el[69:90].replace(',','')), int(el[95:115].replace(',',''))) for el in data}
</snippet></ROW><ROW><id>15560058</id><snippet>interesting_rows = ['Bills', 'Notes', 'Total Public Debt Outstanding']  # add the initial part of any row you are interested at (without leading spaces)

mytext = get_data_text(2, 2013)  # gets the text for feb, 2013 as rows
data = keep_only_interesting_rows(mytext, interesting_rows)  # filter rows
final_data = convert_data_to_dict(data)  # convert remaining rows into a dict

print final_data
print final_data['Bills'][2]  # this gives you the third column


# &gt;&gt;&gt; {'Notes': (7416574, 5888, 7422462), 'Bills': (1738404, 3546, 1741950), 'Total Public Debt Outstanding': (11822436, 4864853, 16687289)}
# &gt;&gt;&gt; 1741950
</snippet></ROW><ROW><id>15560058</id><snippet>mytext = get_data_text(9, 2012)  # this time let's get the text for September, 2012 
print mytext[0]
</snippet></ROW><ROW><id>15560058</id><snippet>    MONTHLY STATEMENT OF THE PUBLIC DEBT
</snippet></ROW><ROW><id>15560169</id><snippet>self.WeekOne</snippet></ROW><ROW><id>15560169</id><snippet>self.weekOne</snippet></ROW><ROW><id>15560169</id><snippet>week_one</snippet></ROW><ROW><id>15560169</id><snippet>class UserProfile(models.Model):
</snippet></ROW><ROW><id>15560169</id><snippet>    def check_updates(self):
        if (self.week_one.squats &gt;= WeekOne.squatBenchmark and
            self.week_one.lunges &gt;= WeekOne.lungBenchmark and
            self.week_one.stairs_day_count &gt;= WeekOne.stair_days_count_benchmark and
            self.week_one.skip_stairs):
                self.week_one.week_one_complete = True
                self.save()
                self.week_one.save()
</snippet></ROW><ROW><id>15560169</id><snippet>profile = UserProfile(user=request.user)
week_one = WeekOne()
week_one.save()
profile.week_one = week_one
profile.save()
</snippet></ROW><ROW><id>15560415</id><snippet>id</snippet></ROW><ROW><id>15560415</id><snippet>primary_key=True</snippet></ROW><ROW><id>15560415</id><snippet>date = DateField(primary_key=True)
</snippet></ROW><ROW><id>15560415</id><snippet>id</snippet></ROW><ROW><id>15560425</id><snippet>user_list</snippet></ROW><ROW><id>15560425</id><snippet>a_false_count = len(user_list) - a_true_count</snippet></ROW><ROW><id>15560425</id><snippet>b_false_count = len(user_list) - b_true_count</snippet></ROW><ROW><id>15560425</id><snippet>filter()</snippet></ROW><ROW><id>15560425</id><snippet>a_false_count = len(filter(lambda x: x.a,user_list))
b_false_count = len(filter(lambda x: x.b,user_list))
</snippet></ROW><ROW><id>15560488</id><snippet>ecomstore</snippet></ROW><ROW><id>15560488</id><snippet>catalog</snippet></ROW><ROW><id>15560488</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>15560488</id><snippet>settings.py</snippet></ROW><ROW><id>15560488</id><snippet>ecomstore</snippet></ROW><ROW><id>15560488</id><snippet>INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Uncomment the next line to enable the admin:
    'django.contrib.admin',
    # Uncomment the next line to enable admin documentation:
    # 'django.contrib.admindocs',
    'catalog'
)
</snippet></ROW><ROW><id>15560803</id><snippet>recursive</snippet></ROW><ROW><id>15560803</id><snippet>def asterix_triangle(i, t=0):
    if i == 0:
        return 0
    else:
        print(' ' * ( i + 1 ) + '*' * ( t * 2 + 1 ))
        return asterix_triangle( i - 1, t + 1 )

asterix_triangle(5)
</snippet></ROW><ROW><id>15560803</id><snippet>def upside_down_asterix_triangle(i, t=0):
    if i == 0:
        return 0
    else:
        print(' ' * ( t + 1 ) + '*' * ( i * 2 - 1 ))
        return upside_down_asterix_triangle( i - 1, t + 1 )

upside_down_asterix_triangle(5)
</snippet></ROW><ROW><id>15560803</id><snippet>def asterix_triangle(i, t=0):
    if i == 0:
        return 0
    else:
        print ' ' * ( i + 1 ) + '*' * ( t * 2 + 1 )
        return asterix_triangle( i - 1, t + 1 )

asterix_triangle(5)
</snippet></ROW><ROW><id>15560803</id><snippet>def upside_down_asterix_triangle(i, t=0):
    if i == 0:
        return 0
    else:
        print ' ' * ( t + 1 ) + '*' * ( i * 2 - 1 )
        return upside_down_asterix_triangle( i - 1, t + 1 )

upside_down_asterix_triangle(5)
</snippet></ROW><ROW><id>15560803</id><snippet>def create_pyramid(rows):
    for i in range(rows):
        print((' ' * ( rows- i - 1 ) + '*' * ( 2 * i + 1)))

print((create_pyramid(5)))

def create_upside_down_pyramid(rows):
    for i in reversed(list(range(rows))):
        print((' ' * ( rows- i - 1 ) + '*' * ( 2 * i + 1)))

print((create_upside_down_pyramid(5)))
</snippet></ROW><ROW><id>15560969</id><snippet>EnvironmentVariables</snippet></ROW><ROW><id>15560969</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;com.example.app&lt;/string&gt;
    &lt;key&gt;Program&lt;/key&gt;
    &lt;string&gt;/path/to/your/script&lt;/string&gt;
    &lt;key&gt;EnvironmentVariables&lt;/key&gt;
    &lt;dict&gt;
        &lt;key&gt;PYTHONPATH&lt;/key&gt;
        &lt;string&gt;/your/python/path&lt;/string&gt;
    &lt;/dict&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</snippet></ROW><ROW><id>15560969</id><snippet>launchd(8)</snippet></ROW><ROW><id>15560969</id><snippet>/etc/launchd.conf</snippet></ROW><ROW><id>15560969</id><snippet>/etc/launchd-user.conf</snippet></ROW><ROW><id>15560969</id><snippet>$HOME/.launchd.conf</snippet></ROW><ROW><id>15560969</id><snippet>launchctl(1)</snippet></ROW><ROW><id>15560969</id><snippet>setenv PYTHONPATH /your/python/path
</snippet></ROW><ROW><id>15560974</id><snippet>self.summed_array</snippet></ROW><ROW><id>15560974</id><snippet>class objectA(object):
    def __init__(self,somevar):
        ...

    @property
    def summed_array(self):
        return sum(b.array for b in self.list_of_Bs)
</snippet></ROW><ROW><id>15560974</id><snippet>self.list_of_Bs</snippet></ROW><ROW><id>15560974</id><snippet>objectA</snippet></ROW><ROW><id>15561210</id><snippet>execfile("myfuncs.py")
</snippet></ROW><ROW><id>15561291</id><snippet>dictsort</snippet></ROW><ROW><id>15561291</id><snippet>{% for feature in phone.features.all|dictsort:"order" %}</snippet></ROW><ROW><id>15561333</id><snippet>getprop</snippet></ROW><ROW><id>15561333</id><snippet>/system/build.prop</snippet></ROW><ROW><id>15561333</id><snippet>[ro.product.manufacturer]: [samsung]
[ro.product.model]: [GT-I9100]
</snippet></ROW><ROW><id>15561345</id><snippet>./manage runserver</snippet></ROW><ROW><id>15561345</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>15561345</id><snippet>MY_DB_PASSWORD</snippet></ROW><ROW><id>15561345</id><snippet>DJANGO_SETTINGS_MODULE=myproject.settings.dev MY_DB_PASSWORD=foo ./manage.py runserver
</snippet></ROW><ROW><id>15561345</id><snippet>import os
db_passwd = os.environ.get('MY_DB_PASSWORD', 'default-db-password')
</snippet></ROW><ROW><id>15561345</id><snippet>.profile</snippet></ROW><ROW><id>15561345</id><snippet>.profile</snippet></ROW><ROW><id>15561345</id><snippet>settings.py</snippet></ROW><ROW><id>15561345</id><snippet>settings.py</snippet></ROW><ROW><id>15561345</id><snippet>import os
db_passwd_file = os.environ.get('DB_PASSWD_FILE', '/etc/myproject/db_passwords.ini')

# Instantiate a ConfigParser object here to read passwords from db_passwd_file.
</snippet></ROW><ROW><id>15561345</id><snippet>/etc/myprojecdt/db_passwords.ini</snippet></ROW><ROW><id>15561345</id><snippet>DB_PASSWD_FILE</snippet></ROW><ROW><id>15561345</id><snippet>DB_PASSWD_FILE</snippet></ROW><ROW><id>15561345</id><snippet>.profile</snippet></ROW><ROW><id>15561345</id><snippet>DB_PASSWD_FILE</snippet></ROW><ROW><id>15561765</id><snippet>from shapely.geometry import MultiPoint
points = MultiPoint([(0.0, 0.0), (1.0, 1.0)])
print points.centroid #True centroid, not necessarily an existing point
</snippet></ROW><ROW><id>15561788</id><snippet>s.decode('string_escape')</snippet></ROW><ROW><id>15562297</id><snippet>data = "POLYGON ((159.5 534.5, 157.5 535.5, 157.5 554.5, 155.5 557.5))"
print [tuple(map(float, x.split())) for x in data.replace('POLYGON ((', '').replace('))', '').strip().split(', ')]
</snippet></ROW><ROW><id>15562297</id><snippet>data = data.replace('POLYGON ((', '').replace('))', '').strip()
res = []
for rec in data.split(', '):
    res.append(tuple(float(val) for val in rec.split()))
</snippet></ROW><ROW><id>15562352</id><snippet>P(blue) = P(blue 1) * P(blue 2) * ... * P(blue n)</snippet></ROW><ROW><id>15562352</id><snippet>P(blue 1)</snippet></ROW><ROW><id>15562352</id><snippet>P(blue 2)</snippet></ROW><ROW><id>15562352</id><snippet>0.7143 * 0.7 = 0.5</snippet></ROW><ROW><id>15562352</id><snippet>probabilityOfBlue (numBlueInDeck, numRedInDeck, numBlueToPull)
  if (numBlueToPull &gt; numBlueInDeck or numBlueToPull &lt; 0 or (numBlueInDeck + numRedInDeck) == 0)
    return 0

  probability = 1.0
  i = 0
  while i &lt; numBlueToPull
    probability = probability * (numBlueInDeck/(numBlueInDeck + numRedInDeck))
    numBlueInDeck = numBlueInDeck - 1
    i = i + 1

  return probability
</snippet></ROW><ROW><id>15562645</id><snippet>status=staticmethod(status)</snippet></ROW><ROW><id>15562645</id><snippet>status()</snippet></ROW><ROW><id>15562645</id><snippet>status</snippet></ROW><ROW><id>15562645</id><snippet>Critter.status()</snippet></ROW><ROW><id>15562645</id><snippet>status()</snippet></ROW><ROW><id>15562645</id><snippet>x</snippet></ROW><ROW><id>15562645</id><snippet>Critter.status()</snippet></ROW><ROW><id>15562645</id><snippet>staticmethod</snippet></ROW><ROW><id>15562645</id><snippet>status()</snippet></ROW><ROW><id>15562645</id><snippet>class Critter(object):
    """your very own bug generator"""
    total=0

    def status():
        print Critter.total
    status=staticmethod(status)

    def __init__(self,name):
        print 'a critter has been created'
        self.name=name
        Critter.total+=1

crit1=Critter('pooch')
crit2=Critter('Duff')
crit3=Critter('pluto')

Critter.status()
print'\nAccessing the class attributes through an object:',crit1.total
</snippet></ROW><ROW><id>15562645</id><snippet>a critter has been created
a critter has been created
a critter has been created
3

Accessing the class attributes through an object: 3
</snippet></ROW><ROW><id>15562645</id><snippet>@staticmethod</snippet></ROW><ROW><id>15562645</id><snippet>class Critter(object):
    """your very own bug generator"""
    total=0

    @staticmethod
    def status():
        print Critter.total

    def __init__(self,name):
        print 'a critter has been created'
        self.name=name
        Critter.total+=1
</snippet></ROW><ROW><id>15562804</id><snippet>html_translator_class</snippet></ROW><ROW><id>15562804</id><snippet>conf.py</snippet></ROW><ROW><id>15562804</id><snippet>html_translator_class = 'html2.HTMLTranslator'
</snippet></ROW><ROW><id>15562804</id><snippet>html2</snippet></ROW><ROW><id>15562804</id><snippet>sphinx.writers.html</snippet></ROW><ROW><id>15562804</id><snippet>def visit_displaymath(self, node):
    import sphinx.ext.mathjax
    sphinx.ext.mathjax.html_visit_displaymath(self, node)
def depart_displaymath(self, node):
    return
def visit_math(self, node):
    import sphinx.ext.mathjax
    sphinx.ext.mathjax.html_visit_math(self, node)
def depart_math(self, node):
    return
</snippet></ROW><ROW><id>15562807</id><snippet>local machine ---X--- machine A
              |            |
              |            Z
              |            |
              ---Y---- machine B
</snippet></ROW><ROW><id>15562807</id><snippet>X</snippet></ROW><ROW><id>15562807</id><snippet>Y</snippet></ROW><ROW><id>15562807</id><snippet>machine A</snippet></ROW><ROW><id>15562807</id><snippet>machine B</snippet></ROW><ROW><id>15562807</id><snippet>Z</snippet></ROW><ROW><id>15562807</id><snippet>machine A</snippet></ROW><ROW><id>15562807</id><snippet>machine B</snippet></ROW><ROW><id>15562807</id><snippet>machine A</snippet></ROW><ROW><id>15562807</id><snippet>machine B</snippet></ROW><ROW><id>15562807</id><snippet>machine A/B</snippet></ROW><ROW><id>15562807</id><snippet>ssh</snippet></ROW><ROW><id>15562807</id><snippet>ssh user@machineA 'scp myfile user@machineB'
</snippet></ROW><ROW><id>15562807</id><snippet>machine A</snippet></ROW><ROW><id>15562807</id><snippet>scp</snippet></ROW><ROW><id>15562807</id><snippet>machine A</snippet></ROW><ROW><id>15562807</id><snippet>ssh = paramiko.SSHClient()
ssh.connect('machineA', username='user', password='passwd')
stdin, stdout, stderr = ssh.exec_command("scp '{imgpath}' user@machineB".format(
    imgpath='path/to/file/on/machineA')
</snippet></ROW><ROW><id>15562807</id><snippet>machine A</snippet></ROW><ROW><id>15562807</id><snippet>machine B</snippet></ROW><ROW><id>15562807</id><snippet>machine B</snippet></ROW><ROW><id>15562807</id><snippet>wget</snippet></ROW><ROW><id>15562807</id><snippet>localhost</snippet></ROW><ROW><id>15562807</id><snippet>ssh = paramiko.SSHClient()
ssh.connect('machineB', username='user', password='passwd')
stdin, stdout, stderr = ssh.exec_command("wget '{imgurl}'".format(
    imgurl='http://url.to.image/file')
</snippet></ROW><ROW><id>15562880</id><snippet>app = webapp2.WSGIApplication([ 
    ...
    ('/(.+)', GetPost)
    ...
</snippet></ROW><ROW><id>15562880</id><snippet>class GetPost(webapp2.RequestHandler):
    def get(self, captured_thing):
        self.response.write(captured_thing)
</snippet></ROW><ROW><id>15562880</id><snippet>/xyz</snippet></ROW><ROW><id>15562880</id><snippet>captured_thing</snippet></ROW><ROW><id>15562880</id><snippet>'xyz'</snippet></ROW><ROW><id>15562961</id><snippet>pandoc -f markdown_mmd -t markdown
</snippet></ROW><ROW><id>15563100</id><snippet>data='C:\Sandbox\build\Windows\release\my.exe'
arg1 = '/t:Rebuild'
arg2 = '/p:Configuration=Release'
arg3 = '/p:Platform=x86'
arg4 = '/p:ExePath=data'
p = subprocess.call([self.msbuild,projpath,arg1,arg2,arg3])
</snippet></ROW><ROW><id>15563100</id><snippet>&lt;PropertyGroup&gt;
    &lt;DefineConstants&gt;
    Sandbox=$(ExePath)
    &lt;/DefineConstants&gt;
&lt;/PropertyGroup&gt;
</snippet></ROW><ROW><id>15563100</id><snippet>&lt;Component Id='MainExecutable' Guid='*'&gt;
&lt;File Id='ExecutableFile' Name='my.exe' DiskId='1' Source='$(var.Sandbox)\my.exe' KeyPath='yes' Checksum='yes'/&gt;       
&lt;/Component&gt;
</snippet></ROW><ROW><id>15563122</id><snippet>&gt;&gt; installcms.log &gt; 2&gt;&amp;1</snippet></ROW><ROW><id>15563122</id><snippet>&gt;&gt; installcms.log 2&gt;&amp;1</snippet></ROW><ROW><id>15563673</id><snippet>foobar = Foo.bar.label("foobar")
session.query(foobar).filter(foobar &gt; 10).all()
</snippet></ROW><ROW><id>15563877</id><snippet>genre_id = None # Should I just use Integer Primary Key for each table id?
</snippet></ROW><ROW><id>15563877</id><snippet>id</snippet></ROW><ROW><id>15563877</id><snippet>INTEGER PRIMARY KEY</snippet></ROW><ROW><id>15563877</id><snippet>title_id = None # How do i determines these?
cost_id = None # But then how do I get those id values to put into
</snippet></ROW><ROW><id>15563877</id><snippet>INSERT INTO Cost(Base, Shipping, Total) VALUES (..., ..., ...)</snippet></ROW><ROW><id>15563877</id><snippet>cursor.lastrowid</snippet></ROW><ROW><id>15564204</id><snippet>http://blah:8090/get/file</snippet></ROW><ROW><id>15564204</id><snippet>http://blah:8090/exists/file</snippet></ROW><ROW><id>15564204</id><snippet>http://blah:8090/get/etc/hosts</snippet></ROW><ROW><id>15564204</id><snippet>#!/usr/bin/python
import bottle 
import os.path


@bottle.route("/get/&lt;filepath:path&gt;")
def index(filepath):
    filepath = "/" + filepath
    print "getting", filepath 
    if not os.path.exists(filepath):
        return "file not found"

    print open(filepath).read() # prints file 
    return '&lt;br&gt;'.join(open(filepath).read().split("\n")) # prints file with &lt;br&gt; for browser readability

@bottle.route("/exists/&lt;filepath:path&gt;")
def test(filepath):
    filepath = "/" + filepath
    return str(os.path.exists(filepath))


bottle.run(host='0.0.0.0', port=8090, reloader=True)
</snippet></ROW><ROW><id>15564301</id><snippet># Code for thinning a binary image using Zhang-Suen algorithm
from scipy import weave
import numpy as np
import cv2
import sys

def _thinningIteration(im, iter):
    I, M = im, np.zeros(im.shape, np.uint8)
    expr = """
    for (int i = 1; i &lt; NI[0]-1; i++) {
        for (int j = 1; j &lt; NI[1]-1; j++) {
            int p2 = I2(i-1, j);
            int p3 = I2(i-1, j+1);
            int p4 = I2(i, j+1);
            int p5 = I2(i+1, j+1);
            int p6 = I2(i+1, j);
            int p7 = I2(i+1, j-1);
            int p8 = I2(i, j-1);
            int p9 = I2(i-1, j-1);

            int A  = (p2 == 0 &amp;&amp; p3 == 1) + (p3 == 0 &amp;&amp; p4 == 1) +
                     (p4 == 0 &amp;&amp; p5 == 1) + (p5 == 0 &amp;&amp; p6 == 1) +
                     (p6 == 0 &amp;&amp; p7 == 1) + (p7 == 0 &amp;&amp; p8 == 1) +
                     (p8 == 0 &amp;&amp; p9 == 1) + (p9 == 0 &amp;&amp; p2 == 1);
            int B  = p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9;
            int m1 = iter == 0 ? (p2 * p4 * p6) : (p2 * p4 * p8);
            int m2 = iter == 0 ? (p4 * p6 * p8) : (p2 * p6 * p8);

            if (A == 1 &amp;&amp; B &gt;= 2 &amp;&amp; B &lt;= 6 &amp;&amp; m1 == 0 &amp;&amp; m2 == 0) {
                M2(i,j) = 1;
            }
        }
    } 
    """
    weave.inline(expr, ["I", "iter", "M"])
    return (I &amp; ~M)


def thinning(src):
    dst = src.copy() / 255
    prev = np.zeros(src.shape[:2], np.uint8)
    diff = None

    while True:
        dst = _thinningIteration(dst, 0)
        dst = _thinningIteration(dst, 1)
        diff = np.absolute(dst - prev)
        prev = dst.copy()
        if np.sum(diff) == 0:
            break

    return dst * 255

if __name__ == "__main__":
    src = cv2.imread("image.png")
    if src == None:
        sys.exit()
    bw = cv2.cvtColor(src, cv2.cv.CV_BGR2GRAY)
    _, bw2 = cv2.threshold(bw, 10, 255, cv2.THRESH_BINARY)
    bw2 = thinning(bw2)
    cv2.imshow("src", bw)
    cv2.imshow("thinning", bw2)
    cv2.waitKey()
</snippet></ROW><ROW><id>15564662</id><snippet>def makeDeco(a):
    def deco(cls):
        print cls, a
        return cls
    return deco

&gt;&gt;&gt; @makeDeco(3)
... class Foo(object):
...     pass
&lt;class '__main__.Foo'&gt; 3
</snippet></ROW><ROW><id>15564662</id><snippet>functools.wraps</snippet></ROW><ROW><id>15564662</id><snippet>a</snippet></ROW><ROW><id>15564662</id><snippet>@makeDeco(3)</snippet></ROW><ROW><id>15564662</id><snippet>makeDeco(3)</snippet></ROW><ROW><id>15564662</id><snippet>makeDeco</snippet></ROW><ROW><id>15564662</id><snippet>makeDeco</snippet></ROW><ROW><id>15564679</id><snippet>machines</snippet></ROW><ROW><id>15564679</id><snippet>m2</snippet></ROW><ROW><id>15564679</id><snippet>m3</snippet></ROW><ROW><id>15565270</id><snippet>{1,3}</snippet></ROW><ROW><id>15565270</id><snippet>going to the</snippet></ROW><ROW><id>15565270</id><snippet>(?!to try)</snippet></ROW><ROW><id>15565270</id><snippet>import re
infile = open("input", "r")
for line in infile:
    m = re.match("going to the ((?:\w+\s*(?!to try)){1,3})", line)
    if m:
        print m.group(1).rstrip()
</snippet></ROW><ROW><id>15565270</id><snippet>luna park
capital city of
moon
</snippet></ROW><ROW><id>15565336</id><snippet>csr_matrix</snippet></ROW><ROW><id>15565336</id><snippet>lil</snippet></ROW><ROW><id>15565336</id><snippet>lil_matrix</snippet></ROW><ROW><id>15565336</id><snippet>N, M, K = 100, 200, 300
matrixs = [sparse.rand(N, M, format="csr") for i in xrange(K)]
matrixs2 = [m.tolil().reshape((1, N*M)) for m in matrixs]
m1 = sparse.vstack(matrixs2).tocsr()

# test with dense array
#m2 = np.vstack([m.toarray().reshape(-1) for m in matrixs])
#np.allclose(m1.toarray(), m2)
</snippet></ROW><ROW><id>15565781</id><snippet>isinstance</snippet></ROW><ROW><id>15565781</id><snippet>type</snippet></ROW><ROW><id>15565781</id><snippet>a = [1,2,3]
b = (1,2,3) # Not a list

type(a) == type([])   # True
type(b) == type([])   # False

type(a) is list       # True
type(b) is list       # False

isinstance(a, list)   # True
isinstance(b, list)   # False
</snippet></ROW><ROW><id>15565781</id><snippet>type</snippet></ROW><ROW><id>15565781</id><snippet>isinstance</snippet></ROW><ROW><id>15565781</id><snippet>if(isinstance(myList[0][0], list)):
    # Use myList[0][0][0]
else:
    # Use myList[0][0]
</snippet></ROW><ROW><id>15565989</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib as mpl
fig = plt.figure()
ax = fig.add_subplot(111)
ax.set_xlim(-0.05,1);ax.set_ylim(-0.05,1);
plt.grid('on');

#Rotate rectangle patch object
ts = ax.transData
coords = ts.transform([0.2, 0.5])
tr = mpl.transforms.Affine2D().rotate_deg_around(coords[0], coords[1], 10)
t= ts + tr

rec0 = patches.Rectangle((0.2,0.5),0.25,0.2,alpha=0.5)
ax.add_patch(rec0)

#Rotated rectangle patch
rect1 = patches.Rectangle((0.2,0.5),0.25,0.2,color='blue',alpha=0.5,transform=t)
ax.add_patch(rect1);

#The (desired) point of rotation
ax.scatter([0.0,0.2],[0.0,0.5],c=['g','r'],zorder=10)
txt = ax.annotate('Desired point of rotation',xy=(0.2,0.5),fontsize=16,\
xytext=(0.25,0.35),arrowprops=dict(arrowstyle="-&gt;",connectionstyle="arc3,rad=-.2"))
txt2 = ax.annotate('Actual point of rotation',xy=(0.0,0.0),fontsize=16,\
xytext=(0.15,0.15),arrowprops=dict(arrowstyle="-&gt;",connectionstyle="arc3,rad=.2"))

plt.show()
</snippet></ROW><ROW><id>15566019</id><snippet>val = raw_input("Type your three digit number please: ")

print 'The first digit is {}'.format(val[0])
print 'The second digit is {}'.format(val[1])
print 'The third digit is {}'.format(val[2])
</snippet></ROW><ROW><id>15566019</id><snippet>str</snippet></ROW><ROW><id>15566019</id><snippet>int</snippet></ROW><ROW><id>15566019</id><snippet>int()</snippet></ROW><ROW><id>15566019</id><snippet>val[]</snippet></ROW><ROW><id>15566019</id><snippet>int(val[0])</snippet></ROW><ROW><id>15566363</id><snippet>In [1]: '{{{0}'.format('foo')
Out[1]: '{foo'
</snippet></ROW><ROW><id>15566377</id><snippet>a = a.lower()
b = b.lower()
print a.endswith(b) or b.endswith(a)
</snippet></ROW><ROW><id>15566377</id><snippet>a = a.lower()
b = b.lower()
c = max(a, b, key=len)
d = min(a, b, key=len)
print d == c[-len(d):]
</snippet></ROW><ROW><id>15566377</id><snippet>endswith</snippet></ROW><ROW><id>15566468</id><snippet>find_closest</snippet></ROW><ROW><id>15566468</id><snippet>gettags</snippet></ROW><ROW><id>15566468</id><snippet>def identify(event):
    item = w.find_closest(event.x, event.y)[0]
    tags = w.gettags(item)
    print tags
</snippet></ROW><ROW><id>15566540</id><snippet>JobState</snippet></ROW><ROW><id>15566540</id><snippet>cdef extern from "rpc/plow_types.h" namespace "Plow":

    ctypedef enum JobState_type "Plow::JobState::type":
        JOBSTATE_INITIALIZE "Plow::JobState::INITIALIZE"
        JOBSTATE_RUNNING "Plow::JobState::RUNNING"
        JOBSTATE_FINISHED "Plow::JobState::FINISHED" 
</snippet></ROW><ROW><id>15566540</id><snippet>JobState_type</snippet></ROW><ROW><id>15566540</id><snippet>vector[JobState_type]</snippet></ROW><ROW><id>15566540</id><snippet>cimport cython

@cython.internal
cdef class _JobState:
    cdef:
        readonly int INITIALIZE 
        readonly int RUNNING 
        readonly int FINISHED 

    def __cinit__(self):
        self.INITIALIZE = JOBSTATE_INITIALIZE
        self.RUNNING = JOBSTATE_RUNNING
        self.FINISHED = JOBSTATE_FINISHED

JobState = _JobState()
</snippet></ROW><ROW><id>15566540</id><snippet>JobState</snippet></ROW><ROW><id>15566540</id><snippet>vector[JobState_type]</snippet></ROW><ROW><id>15566540</id><snippet>someList = [JobState.RUNNING]
...
cdef:
    JobState_type i
    vector[JobState_type] vec_states

for i in someList:
    vec_states.push_back(i)
</snippet></ROW><ROW><id>15566580</id><snippet>Authenticated</snippet></ROW><ROW><id>15566580</id><snippet>Everyone</snippet></ROW><ROW><id>15566580</id><snippet>[username, Authenticated, Everyone]</snippet></ROW><ROW><id>15566580</id><snippet>[Everyone]</snippet></ROW><ROW><id>15566580</id><snippet>NonAuthenticated</snippet></ROW><ROW><id>15566580</id><snippet>Everyone</snippet></ROW><ROW><id>15566580</id><snippet>Authenticated</snippet></ROW><ROW><id>15566580</id><snippet>__acl__ = [
    (Deny, 'group:B', 'something'),   # If user in B, deny
    (Allow, 'group:A', 'something'),  # Else (=if user not in B), if user in A, allow
    (Deny, Everyone, 'something'),    # Else, Deny
]
</snippet></ROW><ROW><id>15566606</id><snippet>def key_tree_Tab(self, treeview, event,namewidget):
    keyname = Gdk.keyval_name(event.keyval)

    path, col = treeview.get_cursor() 
    ## only visible columns!! 
    columns = [c for c in treeview.get_columns() if c.get_visible()] 
    colnum = columns.index(col)     


    if keyname=="Tab" or keyname=="Esc":

        if colnum + 1 &lt; len(columns): 
            next_column = columns[colnum + 1]               

        else: 
            tmodel = treeview.get_model() 
            titer = tmodel.iter_next(tmodel.get_iter(path)) 
            if titer is None: 
                titer = tmodel.get_iter_first() 
            path = tmodel.get_path(titer) 
            next_column = columns[0] 


        if keyname == 'Tab':
            #Thank you Jordan!!!!!! Great hack!
            GLib.timeout_add(50,
                            treeview.set_cursor,
                            path, next_column, True)
        elif keyname == 'Escape':
            pass
</snippet></ROW><ROW><id>15566771</id><snippet>{{ value.item_total|floatformat }}
</snippet></ROW><ROW><id>15566774</id><snippet>data=text.get(1.0,END)[:-1]
</snippet></ROW><ROW><id>15566774</id><snippet>&gt;&gt;&gt; "\n"[:-1]
''
&gt;&gt;&gt; ""[:-1]
''
</snippet></ROW><ROW><id>15566998</id><snippet>def opendirFactsheetHochwasserGebaeude (self) :</snippet></ROW><ROW><id>15566998</id><snippet>Tkinter.Tk()</snippet></ROW><ROW><id>15566998</id><snippet>Tkinter.Toplevel(parent)</snippet></ROW><ROW><id>15566998</id><snippet>facthwgeb.mainloop()</snippet></ROW><ROW><id>15566998</id><snippet>def closeFactsheetHochwGeb (self):</snippet></ROW><ROW><id>15566998</id><snippet>self.tkinterFrame.destroy()</snippet></ROW><ROW><id>15566998</id><snippet>self.tkinterFrame.quit()</snippet></ROW><ROW><id>15566998</id><snippet>self.tkinterFrame.destroy ()</snippet></ROW><ROW><id>15566998</id><snippet>self.tkinterFrame.master.destroy()</snippet></ROW><ROW><id>15567100</id><snippet>{{ value.time.date }}
</snippet></ROW><ROW><id>15567277</id><snippet>&gt;</snippet></ROW><ROW><id>15567277</id><snippet>d = dict(chunk.split(None,1) for chunk in denfile.split('&gt;') if chunk)
</snippet></ROW><ROW><id>15567277</id><snippet>d["Entry1.1"]</snippet></ROW><ROW><id>15567277</id><snippet>def NewMethod(entry):
    '''Do processing of correponding lines in Block'''

def retrieve_chunks(filename, alist):
    '''Generator that yields entries from file when entry name is in alist'''
    aset = set(alist)   #use a set for fast lookups
    chunk = None
    with open(filename) as f:
        for line in f:
            if line.startswith('&gt;'):
                if chunk:
                    yield chunk
                name = line[1:].strip() 
                if name in aset:
                    chunk = [name] #enables capture of subsequent lines
                else:
                    chunk = None   #disables capture
            elif chunk:
                chunk.append(line)
    if chunk:
        yield chunk

main():
    npool = Pool(int(nproc))
    results = []
    for entry in retrieve_chunks(density_file, a_list): 
        results.append(npool.apply_async(NewMethod, (entry,)))

    for proxy in results:
        fh_out.write(proxy.get())
</snippet></ROW><ROW><id>15567277</id><snippet>Pool.map_async</snippet></ROW><ROW><id>15567277</id><snippet>apply_async</snippet></ROW><ROW><id>15567381</id><snippet>distribute</snippet></ROW><ROW><id>15567381</id><snippet>/etc</snippet></ROW><ROW><id>15567381</id><snippet>distribute</snippet></ROW><ROW><id>15567381</id><snippet>/etc</snippet></ROW><ROW><id>15567381</id><snippet>try:</snippet></ROW><ROW><id>15567381</id><snippet>except:</snippet></ROW><ROW><id>15567381</id><snippet>setup.py</snippet></ROW><ROW><id>15567381</id><snippet>/etc</snippet></ROW><ROW><id>15567381</id><snippet> try:
      with open('/etc/bash_completion.d/completion', 'w') eo:
          eo.write('test')
      data_files = ['completion', '/etc/bash_completion.d/completion']
 except error:
      print 'User does not have write access to /etc completion will not work'
      data_files = []

 setup(
      ...
      data_files=data_files,
      etc...
 )
</snippet></ROW><ROW><id>15567980</id><snippet>__dict__</snippet></ROW><ROW><id>15567980</id><snippet>foo.x</snippet></ROW><ROW><id>15567980</id><snippet>foo.__dict__['x']</snippet></ROW><ROW><id>15567980</id><snippet>__slots__</snippet></ROW><ROW><id>15567980</id><snippet>__module__</snippet></ROW><ROW><id>15567980</id><snippet>&gt;&gt;&gt; object.__module__
'__builtin__' # object is part of the builtin module
</snippet></ROW><ROW><id>15567980</id><snippet>__weakref__</snippet></ROW><ROW><id>15567980</id><snippet>weakref</snippet></ROW><ROW><id>15567980</id><snippet>object()</snippet></ROW><ROW><id>15567980</id><snippet>__dict__</snippet></ROW><ROW><id>15567980</id><snippet>&gt;&gt;&gt; dir(object)
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']
</snippet></ROW><ROW><id>15567980</id><snippet>type</snippet></ROW><ROW><id>15567980</id><snippet>object</snippet></ROW><ROW><id>15567980</id><snippet>{}</snippet></ROW><ROW><id>15567980</id><snippet>b.f = 4</snippet></ROW><ROW><id>15568275</id><snippet>__enter__</snippet></ROW><ROW><id>15568275</id><snippet>__exit__</snippet></ROW><ROW><id>15568275</id><snippet>connection = util.get_db_connection()

with connection as cursor:
    cursor.execute(...)

# connection commit is issued if no exceptions were raised.
</snippet></ROW><ROW><id>15568275</id><snippet>sqlite3</snippet></ROW><ROW><id>15568275</id><snippet>__enter__</snippet></ROW><ROW><id>15568275</id><snippet>con = sqlite3.connect(":memory:")
with con:
    cursor = con.cursor()
    # or use the connection directly
    con.execute(...)
</snippet></ROW><ROW><id>15568275</id><snippet>self</snippet></ROW><ROW><id>15568275</id><snippet>__enter__</snippet></ROW><ROW><id>15569069</id><snippet>sys.stdout.write("\r%d%%" %percentage)
</snippet></ROW><ROW><id>15569069</id><snippet>sys.stdout.write("\r[%d%%" %percentage)
</snippet></ROW><ROW><id>15569241</id><snippet>    sys.exit("Error");
</snippet></ROW><ROW><id>15569241</id><snippet>n</snippet></ROW><ROW><id>15569314</id><snippet>private bool CheckName(List&lt;string&gt; evals, string name, bool all)
{
    return all ? !evals.Any(x =&gt; !Regex.IsMatch(name, x, RegexOptions.IgnoreCase)) 
                : evals.Any( x =&gt; Regex.IsMatch(name, x, RegexOptions.IgnoreCase));
}
</snippet></ROW><ROW><id>15569314</id><snippet>List&lt;string&gt; list = new List&lt;string&gt;();

Func&lt;string, bool, bool&gt; checkName = (name, all) =&gt; all
    ? !list.Any(x =&gt; !Regex.IsMatch(name, x, RegexOptions.IgnoreCase))
    : list.Any(x =&gt; Regex.IsMatch(name, x, RegexOptions.IgnoreCase));

checkName("filename", true) 
</snippet></ROW><ROW><id>15569485</id><snippet>line.split('\t', 10)</snippet></ROW><ROW><id>15569485</id><snippet>csv</snippet></ROW><ROW><id>15569485</id><snippet>import csv
import os

for filename, target in ((filename1, CNVs1), (filename2, CNVs2)):
    with open(os.path.join(resultsdir, filename + ".csv"), 'rb') as csvfile:
        reader = csv.reader(csvfile, delimiter='\t')
        for row in reader:
            start.p, end.p = row[:2]
            BF = float(row[8])
            target[chr].append([int(start), int(end), BF])
</snippet></ROW><ROW><id>15569539</id><snippet>&gt;&gt;&gt; [[el] for el in ["foo","banana","apple"]]
[['foo'], ['banana'], ['apple']]
</snippet></ROW><ROW><id>15569619</id><snippet>def chunked_res():
    yield "Chunk 1"
    yield " " * 1024    # Encourage browser to render incrementally (either 1024 or 1024-7{length of "chunk 1"} = 1017)

    stop = time.time() + 5    # wait for 5 seconds
    while time.time() &lt; stop:
        pass

    yield "Chunk 2"


def myview(request):
    g = chunked_res()
    return HttpResponse(g)
</snippet></ROW><ROW><id>15570269</id><snippet>from xml.dom import minidom

net_xml = minidom.parse("network_objects.xml")

NetworkObjectsTag = net_xml.getElementsByTagName("network_objects")[0]

# Pull individual network objects
NetworkObjectTag = NetworkObjectsTag.getElementsByTagName("network_object")

for network_object in NetworkObjectTag:
name = network_object.getElementsByTagName("Name")[0].firstChild.data
class_name = network_object.getElementsByTagName("Class_Name")[0].firstChild.data
color = network_object.getElementsByTagName("color")[0].firstChild.data
ipElement = network_object.getElementsByTagName("ipaddr")
if ipElement:    
    ipElement = network_object.getElementsByTagName("ipaddr")[0]
    ipaddr = ipElement.firstChild.data
maskElement = network_object.getElementsByTagName("netmask")
if maskElement:
    maskElement = network_object.getElementsByTagName("netmask")[0]
    netmask = maskElement.firstChild.data
#address_ranges
ipaddr_firstElement = network_object.getElementsByTagName("ipaddr_first")
if ipaddr_firstElement:
    ipaddr_firstElement = network_object.getElementsByTagName("ipaddr_first")[0]
    ipaddr_first = ipaddr_firstElement.firstChild.data
ipaddr_lastElement = network_object.getElementsByTagName("ipaddr_last")
if ipaddr_lastElement:
    ipaddr_lastElement = network_object.getElementsByTagName("ipaddr_last")[0]
    ipaddr_last = ipaddr_lastElement.firstChild.data    
if ipaddr_firstElement:
    print(name,class_name,ipaddr,netmask,ipaddr_first,ipaddr_last,color)
else:
        print(name,class_name,ipaddr,netmask,color)
</snippet></ROW><ROW><id>15570385</id><snippet>python register.py</snippet></ROW><ROW><id>15570385</id><snippet>backend/register.py</snippet></ROW><ROW><id>15570385</id><snippet>__main__</snippet></ROW><ROW><id>15570385</id><snippet>backend</snippet></ROW><ROW><id>15570385</id><snippet>backend</snippet></ROW><ROW><id>15570385</id><snippet>python -m backend.register</snippet></ROW><ROW><id>15570385</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>15570433</id><snippet>httplib</snippet></ROW><ROW><id>15570433</id><snippet>httpplus</snippet></ROW><ROW><id>15570433</id><snippet>Expect: 100-Continue</snippet></ROW><ROW><id>15570433</id><snippet>    # handle 100-continue response
    hdrs, body = self.raw_response.split(self._end_headers, 1)
    http_ver, status = hdrs.split(' ', 1)
    if status.startswith('100'):
        self.raw_response = body
        self.continued = True
        logger.debug('continue seen, setting body to %r', body)
        return
</snippet></ROW><ROW><id>15570437</id><snippet>default_options={
    "x":10,
    "y":10
}

def f1(**kwargs):
    x=kwargs.get('x', defalut_options['x'])
    return x**2

def f2(**kwargs):
    y=kwargs.get('y', defalut_options['y'])
    return x**4

def f(**kwargs):
    x=kwargs.get('x', defalut_options['x'])
    y=kwargs.get('y', defalut_options['y'])
    return f1(x=x, y=y)

if __name__=="__main__":
    import argparse
    parser = argparse.ArgumentParser(description = "A toy application", formatter_class=argparse.ArgumentDefaultsHelpFormatter )
    parser.add_argument("--f1-x",help="the parameter passed to f1",
      type = float,dest = "x")
    parser.add_argument("--f2-x",help="the parameter passed to f2",
      type = float, dest = "y")

    parser.set_defaults(**default_options)

    options= parser.parse_args()
    print f(options.x,options.y)
</snippet></ROW><ROW><id>15570437</id><snippet>dest</snippet></ROW><ROW><id>15570437</id><snippet>add_argument</snippet></ROW><ROW><id>15570437</id><snippet>dest</snippet></ROW><ROW><id>15570437</id><snippet>f1_x</snippet></ROW><ROW><id>15570437</id><snippet>f2_x</snippet></ROW><ROW><id>15570437</id><snippet>-</snippet></ROW><ROW><id>15570437</id><snippet>_</snippet></ROW><ROW><id>15570437</id><snippet>dest</snippet></ROW><ROW><id>15570437</id><snippet>parser.set_defaults</snippet></ROW><ROW><id>15570437</id><snippet>Namespace</snippet></ROW><ROW><id>15570437</id><snippet>kwargs</snippet></ROW><ROW><id>15570574</id><snippet>for elem in test.find_all(class_="photo"):
    print elem.next_sibling
</snippet></ROW><ROW><id>15570574</id><snippet>.stripped_strings</snippet></ROW><ROW><id>15570574</id><snippet>for elem in test.find_all(class_="photo"):
    print ' '.join(elem.parent.stripped_strings)
</snippet></ROW><ROW><id>15570574</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup('''\
... &lt;div&gt; &lt;img class="photo" /&gt; text1 &lt;/div&gt;
... &lt;div&gt; &lt;img class="photo" /&gt; text2 &lt;/div&gt;
... ''')
&gt;&gt;&gt; for elem in soup.find_all(class_="photo"):
...     print elem.next_sibling
... 
 text1 
 text2 
&gt;&gt;&gt; for elem in soup.find_all(class_="photo"):
...     print ' '.join(elem.parent.stripped_strings)
... 
text1
text2
</snippet></ROW><ROW><id>15570694</id><snippet>def numpy_gcd(a, b):
    a, b = np.broadcast_arrays(a, b)
    a = a.copy()
    b = b.copy()
    pos = np.nonzero(b)[0]
    while len(pos) &gt; 0:
        b2 = b[pos]
        a[pos], b[pos] = b2, a[pos] % b2
        pos = pos[b[pos]!=0]
    return a
</snippet></ROW><ROW><id>15570694</id><snippet>In [181]:
n = 2000
a = np.random.randint(100, 1000, n)
b = np.random.randint(1, 100, n)
al = a.tolist()
bl = b.tolist()
cl = zip(al, bl)
from fractions import gcd
g1 = numpy_gcd(a, b)
g2 = [gcd(x, y) for x, y in cl]
print np.all(g1 == g2)

True

In [182]:
%timeit numpy_gcd(a, b)

1000 loops, best of 3: 721 us per loop

In [183]:
%timeit [gcd(x, y) for x, y in cl]

1000 loops, best of 3: 1.64 ms per loop
</snippet></ROW><ROW><id>15571965</id><snippet>yerr</snippet></ROW><ROW><id>15571965</id><snippet>errorbar</snippet></ROW><ROW><id>15571965</id><snippet>yerr=0</snippet></ROW><ROW><id>15571965</id><snippet>yerr=0</snippet></ROW><ROW><id>15571965</id><snippet>fill_between</snippet></ROW><ROW><id>15571965</id><snippet># plot all points without error bars
plot(iterations, average)
# plot errorbars for every 50th point
errorbar(iterations[::50], average[::50], yerr=error[::50])
</snippet></ROW><ROW><id>15572280</id><snippet>for</snippet></ROW><ROW><id>15572280</id><snippet>iter()</snippet></ROW><ROW><id>15572280</id><snippet>&gt;&gt;&gt; list_iter = iter([])
&gt;&gt;&gt; list_iter
&lt;listiterator object at 0x10056a990&gt;
&gt;&gt;&gt; dir(list_iter)
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__iter__', '__length_hint__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'next']
</snippet></ROW><ROW><id>15572280</id><snippet>def toggle():
    while True:
        yield True
        yield False
</snippet></ROW><ROW><id>15572280</id><snippet>True</snippet></ROW><ROW><id>15572280</id><snippet>False</snippet></ROW><ROW><id>15572280</id><snippet>enumerate()</snippet></ROW><ROW><id>15572280</id><snippet>enumerate()</snippet></ROW><ROW><id>15572280</id><snippet>enumerate()</snippet></ROW><ROW><id>15572280</id><snippet>def enumerate(sequence, start=0):
    n = start
    for elem in sequence:
        yield n, elem
        n += 1
</snippet></ROW><ROW><id>15572451</id><snippet>itertools.groupby</snippet></ROW><ROW><id>15572451</id><snippet>str.isalpha</snippet></ROW><ROW><id>15572451</id><snippet>In [1]: from itertools import groupby

In [2]: s = "125A12C15"

In [3]: [''.join(g) for _, g in groupby(s, str.isalpha)]
Out[3]: ['125', 'A', '12', 'C', '15']
</snippet></ROW><ROW><id>15572451</id><snippet>re.findall</snippet></ROW><ROW><id>15572451</id><snippet>re.split</snippet></ROW><ROW><id>15572451</id><snippet>In [4]: import re

In [5]: re.findall('\d+|\D+', s)
Out[5]: ['125', 'A', '12', 'C', '15']

In [6]: re.split('(\d+)', s)  # note that you may have to filter out the empty
                              # strings at the start/end if using re.split
Out[6]: ['', '125', 'A', '12', 'C', '15', '']

In [7]: re.split('(\D+)', s)
Out[7]: ['125', 'A', '12', 'C', '15']
</snippet></ROW><ROW><id>15572451</id><snippet>In [8]: %timeit re.findall('\d+|\D+', s*1000)
100 loops, best of 3: 2.15 ms per loop

In [9]: %timeit [''.join(g) for _, g in groupby(s*1000, str.isalpha)]
100 loops, best of 3: 8.5 ms per loop

In [10]: %timeit re.split('(\d+)', s*1000)
1000 loops, best of 3: 1.43 ms per loop
</snippet></ROW><ROW><id>15572602</id><snippet>IOError: [Errno 13] Permission denied</snippet></ROW><ROW><id>15572602</id><snippet>IOError: [Errno 2] No such file</snippet></ROW><ROW><id>15572602</id><snippet>Errno 13</snippet></ROW><ROW><id>15572759</id><snippet>Qt.TextWordWrap</snippet></ROW><ROW><id>15572759</id><snippet>QPainter()</snippet></ROW><ROW><id>15572759</id><snippet>    painter.drawText(self.rect(), self.alignment() | Qt.TextWordWrap, self.text())
</snippet></ROW><ROW><id>15572840</id><snippet>Eq</snippet></ROW><ROW><id>15572840</id><snippet>POrd</snippet></ROW><ROW><id>15572840</id><snippet>Set</snippet></ROW><ROW><id>15572840</id><snippet>Eq</snippet></ROW><ROW><id>15572840</id><snippet>POrd</snippet></ROW><ROW><id>15572840</id><snippet>Set</snippet></ROW><ROW><id>15572840</id><snippet>Eq</snippet></ROW><ROW><id>15572840</id><snippet>class POrd:
    ...

class Eq(POrd):
    ...

class Set(Eq): 
    ...
</snippet></ROW><ROW><id>15572930</id><snippet>key:listOfValues</snippet></ROW><ROW><id>15572930</id><snippet>def transposeDict(listOfDicts):
    """Turn a list of dicts into a dict of lists.  Assumes all dicts in the list have the exact same keys."""

    keys = listOfDicts[0].iterkeys()
    return dict((key, [d[key] for d in listOfDicts]) for key in keys)
</snippet></ROW><ROW><id>15572930</id><snippet>def transposeDict(listOfDicts):
    """Turn a list of dicts into a dict of lists.  Assumes all dicts in the list have the exact same keys."""

    keys = listOfDicts[0].iterkeys()
    return {key: [d[key] for d in listOfDicts] for key in keys}
</snippet></ROW><ROW><id>15572930</id><snippet>from collections import defaultdict

def transposeListOfDicts(listOfDicts):
    """Turn a list of dict into a dict of lists"""

    result = defaultdict(list)

    for d in listofDicts:
        for key, value in d.iteritems():
            result[key].append(item)

    return result
</snippet></ROW><ROW><id>15572930</id><snippet>def transposeListOfDicts(listOfDicts):
    keys = {}
    for d in listOfDicts:
        keys.update(d.iterkeys())

    return {key: [d.get(key, None) for d in listOfDicts] for key in keys}
</snippet></ROW><ROW><id>15573103</id><snippet>I</snippet></ROW><ROW><id>15573103</id><snippet>4s</snippet></ROW><ROW><id>15573285</id><snippet>type</snippet></ROW><ROW><id>15573285</id><snippet>type</snippet></ROW><ROW><id>15573317</id><snippet>mysql</snippet></ROW><ROW><id>15573317</id><snippet>create database DemoApp;
</snippet></ROW><ROW><id>15573550</id><snippet>In [33]: a['f0']
Out[33]: array([1, 3], dtype=int64)

In [34]: a['f1']
Out[34]: array([ 2.,  4.])

In [35]: a['f2']
Out[35]: 
array(['buckle_my_shoe', 'margery_door'], 
      dtype='|S14')
</snippet></ROW><ROW><id>15573550</id><snippet>f0</snippet></ROW><ROW><id>15573550</id><snippet>f1</snippet></ROW><ROW><id>15573550</id><snippet>f2</snippet></ROW><ROW><id>15573550</id><snippet>dtype</snippet></ROW><ROW><id>15573556</id><snippet>from sqlalchemy import Table, Column, MetaData, DateTime
from datetime import datetime, timedelta

metadata = MetaData()
example = Table('users', metadata,
   Column('expire', DateTime)
)

tomorrow = datetime.now() + timedelta(days=1)

ins = example.insert().values(expire=tomorrow)
</snippet></ROW><ROW><id>15574383</id><snippet>open</snippet></ROW><ROW><id>15574383</id><snippet>__builtins__</snippet></ROW><ROW><id>15574383</id><snippet>patch.object</snippet></ROW><ROW><id>15574383</id><snippet>from mock import patch
class TestCases(unittest.TestCase):
    def test_something(self):
        from amodule import bmodule

        open_mock = mock.MagicMock(spec=open)
        read_mock = mock.MagicMock()
        open_mock.return_value.__enter__.return_value = read_mock
        with patch.object(bmodule, 'open', open_mock, create=True):
            self.assertTrue(bmodule.some_function())
        self.assertEqual(open_mock.call_args_list, ['filename1', 'filename2'])
</snippet></ROW><ROW><id>15574383</id><snippet>create=True</snippet></ROW><ROW><id>15574383</id><snippet>open</snippet></ROW><ROW><id>15574383</id><snippet>bmodule</snippet></ROW><ROW><id>15574383</id><snippet>__builtins__</snippet></ROW><ROW><id>15574383</id><snippet>bmodule</snippet></ROW><ROW><id>15574495</id><snippet>def unencodeRLE(i):
    i = list(i) #Copies the list to a new list, so the original one is not changed.
    r = []

    while i:
        count = i.pop(0)
        n = i.pop(0)
        r+= [n for _ in xrange(count)]
    return r
</snippet></ROW><ROW><id>15574498</id><snippet>get_url</snippet></ROW><ROW><id>15574498</id><snippet>SiteMap</snippet></ROW><ROW><id>15574498</id><snippet>class CustomCMSSitemap(CMSSitemap):
    def get_urls(self, *args, **kwargs):
       super(CustomCMSSitemap, self).get_urls(*args, **kwargs)
       //your code here
</snippet></ROW><ROW><id>15574498</id><snippet>SiteMap</snippet></ROW><ROW><id>15574498</id><snippet>url(r'^sitemap.xml$', 'django.contrib.sitemaps.views.sitemap', {'sitemaps': {'cmspages': CMSSitemap}})</snippet></ROW><ROW><id>15574498</id><snippet>urls.py</snippet></ROW><ROW><id>15574498</id><snippet>url(r'^sitemap.xml$', 'django.contrib.sitemaps.views.sitemap', {'sitemaps': {'cmspages': CustomCMSSitemap}})</snippet></ROW><ROW><id>15574875</id><snippet>In [10]: table = pivot_table(df, values=['SalesToday', 'SalesMTD','SalesYTD'],\
                     rows=['State'], cols=['City'], aggfunc=np.sum, margins=True)


In [11]: table.stack('City')
Out[11]: 
            SalesMTD  SalesToday  SalesYTD
State City                                
stA   All        900          50      2100
      ctA        400          20      1000
      ctB        500          30      1100
stB   All        700          50      2200
      ctC        500          10       900
      ctD        200          40      1300
stC   All        300          30       800
      ctF        300          30       800
All   All       1900         130      5100
      ctA        400          20      1000
      ctB        500          30      1100
      ctC        500          10       900
      ctD        200          40      1300
      ctF        300          30       800
</snippet></ROW><ROW><id>15574906</id><snippet>if  N % 24 == 0 or N % 8 == 0 or N % 5 == 0
</snippet></ROW><ROW><id>15574906</id><snippet>%</snippet></ROW><ROW><id>15574906</id><snippet> 15 (-8) --&gt; 7 (-5) --&gt; 2 --&gt; False
</snippet></ROW><ROW><id>15574906</id><snippet> 26 (-24) --&gt; 2 --&gt; False
</snippet></ROW><ROW><id>15574906</id><snippet>def numPens(n):
    """
    n is a non-negative integer

    Returns True if some non-negative integer combination of 5, 8 and 24 equals n
    Otherwise returns False.
    """
    # Base case: Negative numbers are by definition false.
    if n &lt; 0:
        return False

    # Base case: 0 is true. It is formed by a combination of zero addends,
    # and zero is a non-negative integer.
    if n == 0:
        return True

    # General case: Try subtracting *each* of the possible numbers, not just
    # the largest one. No matter what n-x will always be smaller than n so
    # eventually we'll reach one of the base cases (either a negative number or 0).
    for x in (24, 8, 5):
        if numPens(n - x):
            return True

    return False
</snippet></ROW><ROW><id>15575341</id><snippet>_ctypes._SimpleCData</snippet></ROW><ROW><id>15575341</id><snippet>Py_TPFLAGS_CHECKTYPES</snippet></ROW><ROW><id>15575341</id><snippet>__coerce__</snippet></ROW><ROW><id>15575341</id><snippet>binary_op1</snippet></ROW><ROW><id>15575341</id><snippet>void *</snippet></ROW><ROW><id>15575341</id><snippet>tp_flags</snippet></ROW><ROW><id>15575341</id><snippet>from ctypes import *
import _ctypes

Py_TPFLAGS_CHECKTYPES = 1 &lt;&lt; 4

class PyTypeObject(Structure):
  _fields_ = [
    ('ob_refcnt', c_ssize_t),
    ('ob_type', c_void_p),
    ('ob_size', c_ssize_t),
    ('tp_name', c_char_p),
    ('tp_basicsize', c_ssize_t),
    ('tp_itemsize', c_ssize_t),
    ('tp_dealloc', c_void_p),
    ('tp_print', c_void_p),
    ('tp_getattr', c_void_p),
    ('tp_setattr', c_void_p),
    ('tp_compare', c_void_p),
    ('tp_repr', c_void_p),
    ('tp_as_number', c_void_p),
    ('tp_as_sequence', c_void_p),
    ('tp_as_mapping', c_void_p),
    ('tp_hash', c_void_p),
    ('tp_call', c_void_p),
    ('tp_str', c_void_p),
    ('tp_getattro', c_void_p),
    ('tp_setattro', c_void_p),
    ('tp_as_buffer', c_void_p),
    ('tp_flags', c_long),
  ]
</snippet></ROW><ROW><id>15575341</id><snippet>unsigned long</snippet></ROW><ROW><id>15575341</id><snippet>from_address</snippet></ROW><ROW><id>15575341</id><snippet>PyTypeObject</snippet></ROW><ROW><id>15575341</id><snippet>id</snippet></ROW><ROW><id>15575341</id><snippet>class c_ulong(_ctypes._SimpleCData):
    _type_ = "L"

    def __rshift__(self, other):
        print '__rshift__', self, other
        if hasattr(other, 'value'):
            other = other.value
        return c_ulong(self.value &gt;&gt; other)

c_ulong_type = PyTypeObject.from_address(id(c_ulong))
</snippet></ROW><ROW><id>15575341</id><snippet>&gt;&gt;&gt; a = c_ulong(16)
&gt;&gt;&gt; b = c_ulong(2)

&gt;&gt;&gt; a &gt;&gt; b
__rshift__ c_ulong(16L) c_ulong(2L)
c_ulong(4L)

&gt;&gt;&gt; a &gt;&gt; 2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for &gt;&gt;: 'c_ulong' and 'int'
</snippet></ROW><ROW><id>15575341</id><snippet>&gt;&gt;&gt; c_ulong_type.tp_flags |= Py_TPFLAGS_CHECKTYPES

&gt;&gt;&gt; a &gt;&gt; 2
__rshift__ c_ulong(16L) 2
c_ulong(4L)
</snippet></ROW><ROW><id>15575341</id><snippet>__coerce__</snippet></ROW><ROW><id>15575341</id><snippet>class c_ulong(_ctypes._SimpleCData):
    _type_ = "L"

    def __rshift__(self, other):
        print '__rshift__', self, other
        if hasattr(other, 'value'):
            other = other.value
        return c_ulong(self.value &gt;&gt; other)

    def __coerce__(self, other):
        print '__coerce__', self, other
        try:
            return self, self.__class__(other)
        except TypeError:
            return NotImplemented
</snippet></ROW><ROW><id>15575341</id><snippet>&gt;&gt;&gt; a = c_ulong(16)
&gt;&gt;&gt; b = c_ulong(2)

&gt;&gt;&gt; a &gt;&gt; 2
__coerce__ c_ulong(16L) 2
__rshift__ c_ulong(16L) c_ulong(2L)
c_ulong(4L)

&gt;&gt;&gt; 16 &gt;&gt; b
__coerce__ c_ulong(2L) 16
__rshift__ c_ulong(16L) c_ulong(2L)
c_ulong(4L)
</snippet></ROW><ROW><id>15575341</id><snippet>c_ulong</snippet></ROW><ROW><id>15575341</id><snippet>float</snippet></ROW><ROW><id>15575341</id><snippet>&gt;&gt;&gt; a &gt;&gt; 2.0
__coerce__ c_ulong(16L) 2.0
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for &gt;&gt;: 'c_ulong' and 'float'
</snippet></ROW><ROW><id>15575402</id><snippet>print '%s (...) %s (...) %s%s (...)%s (...)' % tuple(mylist)
</snippet></ROW><ROW><id>15575402</id><snippet>&gt;&gt;&gt; mylist = ['a', 'b', 'c', 'd', 'e']
&gt;&gt;&gt; print '%s (...) %s (...) %s%s (...)%s (...)' % tuple(mylist)
a (...) b (...) cd (...)e (...)
</snippet></ROW><ROW><id>15575402</id><snippet>.format()</snippet></ROW><ROW><id>15575402</id><snippet>print '{} (...) {} (...) {}{} (...){} (...)'.format(*mylist)
</snippet></ROW><ROW><id>15575402</id><snippet>.format()</snippet></ROW><ROW><id>15575402</id><snippet>print '{0[0]} (...) {0[1]} (...) {0[2]}{0[3]} (...){0[4]} (...)'.format(mylist)
</snippet></ROW><ROW><id>15575454</id><snippet>size = raw_input("File size in KB: ")
speed = raw_input("Speed in KB/sec: ")
est = float(size) / float(speed)
print "It will take %f seconds." % est
</snippet></ROW><ROW><id>15575454</id><snippet>sizeInKb = float(size) * 1024
est = float(sizeInKb) / float(speed)
</snippet></ROW><ROW><id>15575454</id><snippet>datetime</snippet></ROW><ROW><id>15575454</id><snippet>print "Estimated Time: %s" % datetime.timedelta(seconds = est)
</snippet></ROW><ROW><id>15575725</id><snippet>defaultdict</snippet></ROW><ROW><id>15575725</id><snippet>from collections import defaultdict
orig = ['a=1', 'b=2', 'c=3', 'd=4', 'd=5', 'd=6', 'e=7']
d = defaultdict(list)
for item in orig:
    k,v = item.split('=',1)
    d[k].append(v)

new = ['{0}={1}'.format(k,','.join(v)) for k,v in d.items()]
print(new)  #['a=1', 'c=3', 'b=2', 'e=7', 'd=4,5,6']
</snippet></ROW><ROW><id>15575725</id><snippet>OrderedDict</snippet></ROW><ROW><id>15575725</id><snippet>setdefault</snippet></ROW><ROW><id>15575725</id><snippet>from collections import OrderedDict
orig = ['a=1', 'b=2', 'c=3', 'd=4', 'd=5', 'd=6', 'e=7']
d = OrderedDict()
for item in orig:
    k,v = item.split('=',1)
    d.setdefault(k,[]).append(v)

new = ['{0}={1}'.format(k,','.join(v)) for k,v in d.items()]
print new # ['a=1', 'b=2', 'c=3', 'd=4,5,6', 'e=7']
</snippet></ROW><ROW><id>15575735</id><snippet>   1 def OnSaveToFile( self, event ):
   2         context = wx.ClientDC( self )
   3         memory = wx.MemoryDC( )
   4         x, y = self.ClientSize
   5         bitmap = wx.EmptyBitmap( x, y, -1 )
   6         memory.SelectObject( bitmap )
   7         memory.Blit( 0, 0, x, y, context, 0, 0)
   8         memory.SelectObject( wx.NullBitmap)
   9         bitmap.SaveFile( 'test.jpg', wx.BITMAP_TYPE_JPEG )
</snippet></ROW><ROW><id>15575868</id><snippet>?;</snippet></ROW><ROW><id>15575868</id><snippet>re</snippet></ROW><ROW><id>15575868</id><snippet>def unescape(iterable):
    for item in iterable:
        yield item.replace('?;', ';')

for elem in unescape(re.split(r'(?&lt;!\?);', txt)):
    print elem
</snippet></ROW><ROW><id>15576062</id><snippet>state</snippet></ROW><ROW><id>15576062</id><snippet>NaN</snippet></ROW><ROW><id>15576062</id><snippet>NaN</snippet></ROW><ROW><id>15576062</id><snippet>frame['state'] = np.NAN</snippet></ROW><ROW><id>15576248</id><snippet>except</snippet></ROW><ROW><id>15576248</id><snippet>pass</snippet></ROW><ROW><id>15576248</id><snippet>raise</snippet></ROW><ROW><id>15576248</id><snippet>socket.error: [Errno 1] Operation not permitted
</snippet></ROW><ROW><id>15576248</id><snippet>root</snippet></ROW><ROW><id>15576248</id><snippet>AttributeError: 'list' object has no attribute 'haslayer'
</snippet></ROW><ROW><id>15576248</id><snippet>root</snippet></ROW><ROW><id>15576248</id><snippet>from scapy.all import *

while 1:

    pktl = sniff ( iface="eth0" , count = 1 )
    pktl.summary()

    for pkt in pktl:
        try:
            if pkt.haslayer(IP):
                ipsrc =pkt.getlayer(IP).src
                print ipsrc
        except:
            raise
</snippet></ROW><ROW><id>15576694</id><snippet>from __future__ import print_function #needed python 2.7 only


import random
example_expression = lambda: random.random()

a = [0]
b = [-1]

[ print(a[0]) 
  for i in iter(int,1) #causes an infinite loop
  if  not a.__setitem__(0,example_expression()) #__setitem__ will return None 
  and a[0]&gt;b[0] 
  and not b.__setitem__(0,a[0])  ]
</snippet></ROW><ROW><id>15576758</id><snippet>id="west1"</snippet></ROW><ROW><id>15576758</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>15576758</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>15576758</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>15576758</id><snippet>import BeautifulSoup as bs

content = '''&lt;div class="widget_title clearfix"&gt;
        &lt;h2&gt;Account Balance&lt;/h2&gt;
    &lt;/div&gt;
    &lt;div class="widget_body"&gt;
        &lt;div class="widget_content"&gt;
            &lt;table class="simple"&gt;
                &lt;tr&gt;
                    &lt;td&gt;&lt;a href="#" id="west1" title="Total earned daily"&gt;Daily Earnings&lt;/a&gt;&lt;/td&gt;
                    &lt;td style="text-align: right; width: 125px; color: #119911; font-weight: bold;"&gt;
                        150                         
                    &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;&lt;a href="#" id="west2" title="Total weekly earnings"&gt;Weekly Earnings&lt;/a&gt;&lt;/td&gt;
                    &lt;td style="text-align: right; border-bottom: 1px solid #000; color: #119911; font-weight: bold;"&gt;
                        500                     &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;&lt;a href="#" id="west3" title="Total Monthly earnings"&gt;Monthly Earnings&lt;/a&gt;&lt;/td&gt;
                    &lt;td style="text-align: right; color: #119911; font-weight: bold;"&gt;
                        1500                        &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;&lt;a href="#" id="west4" title="Total expenses"&gt;Total expended&lt;/a&gt;&lt;/td&gt;
                    &lt;td style="text-align: right; border-bottom: 1px solid #000; color: #880000; font-weight: bold;"&gt;
                        430                     &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;&lt;a href="#" id="west5" title="Total available"&gt;Account Balance&lt;/a&gt;&lt;/td&gt;
                    &lt;td style="text-align: right; border-bottom: 3px double #000; color: #119911; font-weight: bold;"&gt;
                        840                     &lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;td&gt;&lt;/td&gt;
                    &lt;td style="padding: 5px;"&gt;
                        &lt;center&gt;
                            &lt;form id="request_bill" method="POST" action="index.php?page=dashboard"&gt;
                                &lt;input type="hidden" name="secret_token" value="" /&gt;
                                &lt;input type="hidden" name="request_payout" value="1" /&gt;
                                &lt;input type="submit" class="btn blue large" value="Request Payout" /&gt;
                            &lt;/form&gt;
                        &lt;/center&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;'''

def parseo(archivohtml):
    html = archivohtml
    parsed_html = bs.BeautifulSoup(html)
    par = parsed_html.find('a', attrs={'id':'west1'}).findNext('td')        
    print par.string.strip()

parseo(content)
</snippet></ROW><ROW><id>15576758</id><snippet>150
</snippet></ROW><ROW><id>15576792</id><snippet>data = session.query('order', 'location').from_statement(sql).all()
</snippet></ROW><ROW><id>15576792</id><snippet>data = session.query(*query).from_statement(sql).all()
</snippet></ROW><ROW><id>15576792</id><snippet>&gt;&gt;&gt; x = (1,2,3)
&gt;&gt;&gt; def f(*x):
    print x
&gt;&gt;&gt; f(x)
((1, 2, 3),)
&gt;&gt;&gt; f("location", "order")
('location', 'order')
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15576813</id><snippet>&gt;&gt;&gt; List = [['Name',[1, 4, 6]],
...     ['Another Name', [1,2,5]]]
&gt;&gt;&gt; List[0].insert(1,"Another Value")
&gt;&gt;&gt; List
[['Name', 'Another Value', [1, 4, 6]], ['Another Name', [1, 2, 5]]]
</snippet></ROW><ROW><id>15576813</id><snippet>inner = List[0]
inner.insert(1,'Another Value')
</snippet></ROW><ROW><id>15577169</id><snippet>tempBoard = genBoard
</snippet></ROW><ROW><id>15577169</id><snippet>genBoard</snippet></ROW><ROW><id>15577169</id><snippet>tempBoard</snippet></ROW><ROW><id>15577169</id><snippet>tempBoard</snippet></ROW><ROW><id>15577169</id><snippet>genBoard</snippet></ROW><ROW><id>15577169</id><snippet>tempBoard[i]</snippet></ROW><ROW><id>15577169</id><snippet>genBoard[i]</snippet></ROW><ROW><id>15577169</id><snippet>tempBoard = list(genBoard)
tempBoard = genBoard[:]
tempBoard = copy.copy(genBoard)
</snippet></ROW><ROW><id>15577169</id><snippet>genBoard</snippet></ROW><ROW><id>15577169</id><snippet>tempboard</snippet></ROW><ROW><id>15577169</id><snippet>genboard</snippet></ROW><ROW><id>15577169</id><snippet>tempBoard = copy.deepcopy(genBoard)
</snippet></ROW><ROW><id>15577331</id><snippet>&gt;&gt;&gt; import dateutil.parser
&gt;&gt;&gt; dateutil.parser.parse('2013-03-23T04:00:00.000-05:00')
&gt;&gt;&gt; dt = dateutil.parser.parse('2013-03-23T04:00:00.000-05:00')
&gt;&gt;&gt; dt.strftime('%I:%M')
'04:00'
</snippet></ROW><ROW><id>15577553</id><snippet>FormRequest</snippet></ROW><ROW><id>15577553</id><snippet>formdata</snippet></ROW><ROW><id>15577553</id><snippet>class FormRequest(Request):
    def __init__(self, *args, **kwargs):
        formdata = kwargs.pop('formdata', None)
</snippet></ROW><ROW><id>15577553</id><snippet>formdata=</snippet></ROW><ROW><id>15577553</id><snippet>requests.append(FormRequest(url, formdata=data))
</snippet></ROW><ROW><id>15577643</id><snippet>&gt;&gt;&gt; [sub for i in range(1, 4) for sub in (2*i, -2*i)]
[2, -2, 4, -4, 6, -6]
</snippet></ROW><ROW><id>15577660</id><snippet>&gt;&gt;&gt; message = 'HelloWorld'
&gt;&gt;&gt; encoded = ''.join(chr(ord(letter) - 3) for letter in message)
&gt;&gt;&gt; decoded = ''.join(chr(ord(letter) + 3) for letter in encoded)
</snippet></ROW><ROW><id>15578062</id><snippet>r'^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$'</snippet></ROW><ROW><id>15578246</id><snippet>double ***list3</snippet></ROW><ROW><id>15578246</id><snippet>l3</snippet></ROW><ROW><id>15578246</id><snippet>npy_intp</snippet></ROW><ROW><id>15578246</id><snippet>import cmod, numpy
l2 = numpy.array([[1.0,2.0,3.0],
                  [4.0,5.0,6.0],
                  [7.0,8.0,9.0],
                  [3.0, 5.0, 0.0]], dtype="double")

l3 = numpy.array([[[2,7, 1, 11], [6, 3, 9, 12]],
                  [[1, 10, 13, 15], [4, 2, 6, 2]]], dtype="double")

cmod.func(l2, l3)
</snippet></ROW><ROW><id>15578313</id><snippet>zlib.decompressobj</snippet></ROW><ROW><id>15578313</id><snippet>decompress</snippet></ROW><ROW><id>15578313</id><snippet>wbits</snippet></ROW><ROW><id>15578485</id><snippet>import csv

data=[('smith, bob',2),('carol',3),('ted',4),('alice',5)]

with open('ur file.csv','w') as out:
    csv_out=csv.writer(out)
    csv_out.writerow(['name','num'])
    for row in data:
        csv_out.writerow(row)
</snippet></ROW><ROW><id>15578485</id><snippet>name,num
"smith, bob",2
carol,3
ted,4
alice,5
</snippet></ROW><ROW><id>15578502</id><snippet>AuthorCreate</snippet></ROW><ROW><id>15578502</id><snippet>AjaxableResponseMixin</snippet></ROW><ROW><id>15578502</id><snippet>CreateView</snippet></ROW><ROW><id>15578502</id><snippet>&gt;&gt;&gt; class a(object): pass
... 
&gt;&gt;&gt; class b(object): pass
... 
&gt;&gt;&gt; class c(a,b): pass
... 
&gt;&gt;&gt; c.mro()
[&lt;class '__main__.c'&gt;, &lt;class '__main__.a'&gt;, &lt;class '__main__.b'&gt;, &lt;type 'object'&gt;]
</snippet></ROW><ROW><id>15578502</id><snippet>mro()</snippet></ROW><ROW><id>15578502</id><snippet>super</snippet></ROW><ROW><id>15578621</id><snippet>__init__</snippet></ROW><ROW><id>15578621</id><snippet>__int__.py</snippet></ROW><ROW><id>15578626</id><snippet>for</snippet></ROW><ROW><id>15578626</id><snippet>while List:</snippet></ROW><ROW><id>15578626</id><snippet>while List:
    for item in List:
        if item &lt; (Min):
            Min = item
            nList.append(Min)
            List.remove(Min)
</snippet></ROW><ROW><id>15578626</id><snippet>while</snippet></ROW><ROW><id>15578626</id><snippet>List</snippet></ROW><ROW><id>15578626</id><snippet>Min</snippet></ROW><ROW><id>15578626</id><snippet>List[0]</snippet></ROW><ROW><id>15578626</id><snippet>item &gt;= Min</snippet></ROW><ROW><id>15578626</id><snippet>List</snippet></ROW><ROW><id>15578698</id><snippet>bisect</snippet></ROW><ROW><id>15578698</id><snippet>&gt;&gt;&gt; data = [('red', 5), ('blue', 1), ('yellow', 8), ('black', 0)]
&gt;&gt;&gt; data.sort(key=lambda r: r[1])
&gt;&gt;&gt; keys = [r[1] for r in data]         # precomputed list of keys
&gt;&gt;&gt; data[bisect_left(keys, 0)]
('black', 0)
&gt;&gt;&gt; data[bisect_left(keys, 1)]
('blue', 1)
&gt;&gt;&gt; data[bisect_left(keys, 5)]
('red', 5)
&gt;&gt;&gt; data[bisect_left(keys, 8)]
('yellow', 8)
</snippet></ROW><ROW><id>15578698</id><snippet>nested_list = [[123,'Aaron','CA'],[124,'Bob','WY'],[125,'John','TX']]
insert_me = [122,'George','AL']                                
keys = [r[1] for r in nested_list]
nested_list.insert(bisect.bisect_left(keys,insert_me[1]),insert_me)
[[123, 'Aaron', 'CA'],
 [124, 'Bob', 'WY'],
 [122, 'George', 'AL'],
 [125, 'John', 'TX']]
</snippet></ROW><ROW><id>15578698</id><snippet>keys</snippet></ROW><ROW><id>15578698</id><snippet>keys</snippet></ROW><ROW><id>15578698</id><snippet>keys.insert(bisect_left(keys,insert_me[1]),insert_me[1])
</snippet></ROW><ROW><id>15578698</id><snippet># elements  heapq   insert/bisect  append/sorted
10,000      0.01s   0.08s           2.43s         
20,000      0.03s   0.28s          10.06s
30,000      0.04s   0.60s          22.81s
</snippet></ROW><ROW><id>15578955</id><snippet>raw_input</snippet></ROW><ROW><id>15578955</id><snippet>rackNo = int(raw_input("Enter the Rack number you are using: "))
</snippet></ROW><ROW><id>15578955</id><snippet>&gt;</snippet></ROW><ROW><id>15578955</id><snippet>&lt;</snippet></ROW><ROW><id>15578955</id><snippet>__cmp__</snippet></ROW><ROW><id>15578955</id><snippet>__gt__</snippet></ROW><ROW><id>15578955</id><snippet>__gt__()</snippet></ROW><ROW><id>15578960</id><snippet>copy</snippet></ROW><ROW><id>15578960</id><snippet>In [1]: template = {'thing1': '', 'thing2': '', 'thing3': ''}

In [2]: apile = template.copy()

In [3]: apile['thing1'] = 1

In [4]: apile
Out[4]: {'thing1': 1, 'thing2': '', 'thing3': ''}

In [5]: template
Out[5]: {'thing1': '', 'thing2': '', 'thing3': ''}
</snippet></ROW><ROW><id>15578960</id><snippet>copied_list = original_list[:]
</snippet></ROW><ROW><id>15578960</id><snippet>copy</snippet></ROW><ROW><id>15578960</id><snippet>copy.copy(x)
</snippet></ROW><ROW><id>15578960</id><snippet>copy.deepcopy(x)
</snippet></ROW><ROW><id>15578960</id><snippet>In [23]: p = dict(template)

In [24]: p['thing1'] = 1

In [25]: template
Out[25]: {'thing1': '', 'thing2': '', 'thing3': ''}

In [26]: p
Out[26]: {'thing1': 1, 'thing2': '', 'thing3': ''}
</snippet></ROW><ROW><id>15579130</id><snippet>width</snippet></ROW><ROW><id>15579130</id><snippet>plt.annotate(df.index[i], 
    xy=(x[i],y[i]), xytext=(x[i]+1.31,y[i]-0.55),
    arrowprops=dict(facecolor='blue', shrink=0.1),
    width=2
)
</snippet></ROW><ROW><id>15579130</id><snippet>width</snippet></ROW><ROW><id>15579130</id><snippet>frac</snippet></ROW><ROW><id>15579130</id><snippet>headwidth</snippet></ROW><ROW><id>15579130</id><snippet>shrink</snippet></ROW><ROW><id>15579189</id><snippet>if (main_version, sub_version) &lt; (3, 6):
    print "Firefox version is too old"
</snippet></ROW><ROW><id>15579189</id><snippet>'2' &lt; 3</snippet></ROW><ROW><id>15579189</id><snippet>'4' &lt; 3</snippet></ROW><ROW><id>15579189</id><snippet>'3'</snippet></ROW><ROW><id>15579189</id><snippet>3</snippet></ROW><ROW><id>15579189</id><snippet>'11' &lt; '3'</snippet></ROW><ROW><id>15579189</id><snippet>Popen</snippet></ROW><ROW><id>15579189</id><snippet>OSError</snippet></ROW><ROW><id>15579189</id><snippet>major</snippet></ROW><ROW><id>15579189</id><snippet>minor</snippet></ROW><ROW><id>15579189</id><snippet>main</snippet></ROW><ROW><id>15579189</id><snippet>sub</snippet></ROW><ROW><id>15579189</id><snippet>subprocess</snippet></ROW><ROW><id>15579189</id><snippet>def firefox_36_or_later():
    try:
        output = subprocess.check_output(['firefox', '--version'])
    except Exception as e:
        print "Failed to run Firefox: {}".format(e)
        return False
    try:
        major, minor = map(int, re.search(r"(\d+).(\d+)", output).groups())
    except Exception as e:
        print "Failed to parse '{}' for version number: {}".format(output, e)
        return False
    if (major, minor) &lt; (3, 6):
        print "Firefox version is too old"
        return False
    return True
</snippet></ROW><ROW><id>15579296</id><snippet>re.split()</snippet></ROW><ROW><id>15579296</id><snippet>re.split(r'(\s+)', line)
</snippet></ROW><ROW><id>15579296</id><snippet>&gt;&gt;&gt; re.split(r'(\s+)', line)['BBP1', '   ', '0.000000', '  ', '-0.150000', '    ', '2.033000', '  ', '0.00', ' ', '-0.150', '   ', '1.77']
</snippet></ROW><ROW><id>15579311</id><snippet>import numpy as np

m1 = np.array([0,1,1,3])
m2 = np.array([0,0,1,1])

mask = (m1 == 1) &amp; (m2 == 1)
data[mask]
# returns array([30])
</snippet></ROW><ROW><id>15579311</id><snippet>m1</snippet></ROW><ROW><id>15579311</id><snippet>m1 == 1</snippet></ROW><ROW><id>15579311</id><snippet>False</snippet></ROW><ROW><id>15579311</id><snippet>m2</snippet></ROW><ROW><id>15579311</id><snippet>False</snippet></ROW><ROW><id>15579311</id><snippet>data[False] = data[0] = 10</snippet></ROW><ROW><id>15579456</id><snippet>import db

db_handler = db.DbHandler()
</snippet></ROW><ROW><id>15579681</id><snippet>unique_together</snippet></ROW><ROW><id>15579681</id><snippet>class Reservation(models.Model):
     resource = models.ForeignKey(Resource)
     date = models.DateField()
     hour = models.PositiveSmallIntegerField()

     class Meta:
         unique_together = ('resource', 'date', 'hour')
</snippet></ROW><ROW><id>15579711</id><snippet>REAL = re.compile("^\d+\.\d+$")</snippet></ROW><ROW><id>15579711</id><snippet>re.match('13.4.5')</snippet></ROW><ROW><id>15579711</id><snippet>None</snippet></ROW><ROW><id>15579711</id><snippet>re.match('2.3.4')</snippet></ROW><ROW><id>15579711</id><snippet>'13.4.5'</snippet></ROW><ROW><id>15579711</id><snippet>'4.5'</snippet></ROW><ROW><id>15579711</id><snippet>'1'</snippet></ROW><ROW><id>15579711</id><snippet>'13.4.5'</snippet></ROW><ROW><id>15579807</id><snippet>np.array(result.items(), dtype=dtype)</snippet></ROW><ROW><id>15579807</id><snippet>import numpy as np
result = {0: 1.1181753789488595, 1: 0.5566080288678394, 2: 0.4718269778030734, 3: 0.48716683119447185, 4: 1.0, 5: 0.1395076201641266, 6: 0.20941558441558442}

names = ['id','data']
formats = ['f8','f8']
dtype = dict(names = names, formats=formats)
array = np.array(result.items(), dtype=dtype)

print(repr(array))
</snippet></ROW><ROW><id>15579807</id><snippet>array([(0.0, 1.1181753789488595), (1.0, 0.5566080288678394),
       (2.0, 0.4718269778030734), (3.0, 0.48716683119447185), (4.0, 1.0),
       (5.0, 0.1395076201641266), (6.0, 0.20941558441558442)], 
      dtype=[('id', '&lt;f8'), ('data', '&lt;f8')])
</snippet></ROW><ROW><id>15579807</id><snippet>result.items()</snippet></ROW><ROW><id>15579807</id><snippet>result.iteritems()</snippet></ROW><ROW><id>15579807</id><snippet>np.fromiter</snippet></ROW><ROW><id>15579807</id><snippet>array = np.fromiter(result.iteritems(), dtype=dtype, count=len(result))
</snippet></ROW><ROW><id>15579807</id><snippet>[key,val]</snippet></ROW><ROW><id>15579807</id><snippet>numpy.array([[key,val] for (key,val) in result.iteritems()],dtype)
</snippet></ROW><ROW><id>15579807</id><snippet>[key, val]</snippet></ROW><ROW><id>15579807</id><snippet>(key, val)</snippet></ROW><ROW><id>15579807</id><snippet>numpy.array([(key,val) for (key,val) in result.iteritems()],dtype)
</snippet></ROW><ROW><id>15579807</id><snippet>numpy.array(result.items(),dtype)
</snippet></ROW><ROW><id>15579807</id><snippet>np.array</snippet></ROW><ROW><id>15579807</id><snippet>(0.0, 1.1181753789488595)</snippet></ROW><ROW><id>15579896</id><snippet>strftime</snippet></ROW><ROW><id>15579896</id><snippet>print time.strftime("%a %b %d %H:%M:%S %Z %Y")
</snippet></ROW><ROW><id>15580252</id><snippet>GqlQuery</snippet></ROW><ROW><id>15580252</id><snippet>.get()</snippet></ROW><ROW><id>15580252</id><snippet>.fetch(1)</snippet></ROW><ROW><id>15580252</id><snippet>Book</snippet></ROW><ROW><id>15580252</id><snippet>q = db.GqlQuery("SELECT * FROM Book WHERE author = :1 ", author)
my_book = q.get()
</snippet></ROW><ROW><id>15580252</id><snippet>method</snippet></ROW><ROW><id>15580252</id><snippet>my_book_key = my_book.key() # don't forget the parens/brackets

template_values = { 
    'author': author,
    'key': my_book_key,         
}
</snippet></ROW><ROW><id>15580367</id><snippet>french, english, prob = result[0]
</snippet></ROW><ROW><id>15580367</id><snippet>for result in result:
    french, english, prob = result
    # do something with this particular french, english, prob
</snippet></ROW><ROW><id>15580367</id><snippet>frenchies, englishers, probs = zip(*results)
</snippet></ROW><ROW><id>15580367</id><snippet>prob</snippet></ROW><ROW><id>15580367</id><snippet>float</snippet></ROW><ROW><id>15580367</id><snippet>prob = float(prob)
</snippet></ROW><ROW><id>15580367</id><snippet>probs = map(float, probs)
</snippet></ROW><ROW><id>15580368</id><snippet>PyDev</snippet></ROW><ROW><id>15580406</id><snippet>from twisted.internet import reactor
from scrapy.crawler import Crawler
# scrapy.conf.settings singlton was deprecated last year
from scrapy.utils.project import get_project_settings
from scrapy import log

def setup_crawler(spider_name):
    crawler = Crawler(settings)
    crawler.configure()
    spider = crawler.spiders.create(spider_name)
    crawler.crawl(spider)
    crawler.start()

log.start()
settings = get_project_settings()
crawler = Crawler(settings)
crawler.configure()

for spider_name in crawler.spiders.list():
    setup_crawler(spider_name)

reactor.run()
</snippet></ROW><ROW><id>15580406</id><snippet>from scrapy.command import ScrapyCommand
from scrapy.utils.project import get_project_settings
from scrapy.crawler import Crawler

class Command(ScrapyCommand):

    requires_project = True

    def syntax(self):
        return '[options]'

    def short_desc(self):
        return 'Runs all of the spiders'

    def run(self, args, opts):
        settings = get_project_settings()

        for spider_name in self.crawler.spiders.list():
            crawler = Crawler(settings)
            crawler.configure()
            spider = crawler.spiders.create(spider_name)
            crawler.crawl(spider)
            crawler.start()

        self.crawler.start()
</snippet></ROW><ROW><id>15580458</id><snippet>os.symlink</snippet></ROW><ROW><id>15580458</id><snippet>ln -s</snippet></ROW><ROW><id>15580458</id><snippet>dst = args[-1]
for src in args[:-1]:
    os.symlink(src, os.path.join(dst, os.path.dirname(src)))
</snippet></ROW><ROW><id>15580458</id><snippet>ln -s /home/guest/dir1/* /home/guest/dir2/</snippet></ROW><ROW><id>15580458</id><snippet>exec</snippet></ROW><ROW><id>15580458</id><snippet>ln</snippet></ROW><ROW><id>15580458</id><snippet>*</snippet></ROW><ROW><id>15580458</id><snippet>/home/guest/dir1/</snippet></ROW><ROW><id>15580458</id><snippet>dst = args[-1]
for srcglob in args[:-1]:
    for src in glob.glob(srcglob):
        os.symlink(src, os.path.join(dst, os.path.dirname(src)))
</snippet></ROW><ROW><id>15580458</id><snippet>os.symlink</snippet></ROW><ROW><id>15580458</id><snippet>find . -name foo</snippet></ROW><ROW><id>15580458</id><snippet>os.walk</snippet></ROW><ROW><id>15580458</id><snippet>ln -s /home/guest/dir1/* /home/guest/dir2/</snippet></ROW><ROW><id>15580458</id><snippet>glob</snippet></ROW><ROW><id>15580458</id><snippet>fnmatch</snippet></ROW><ROW><id>15580458</id><snippet>os.listdir</snippet></ROW><ROW><id>15580458</id><snippet>os.walk</snippet></ROW><ROW><id>15580458</id><snippet>*</snippet></ROW><ROW><id>15580516</id><snippet>__eq__()</snippet></ROW><ROW><id>15580516</id><snippet>__hash__()</snippet></ROW><ROW><id>15580516</id><snippet>class Test(object):
    def __init__(self):
        self.i = random.randint(1, 10)

    def __eq__(self, other):
        return self.i == other.i

    def __hash__(self):
        return self.i
</snippet></ROW><ROW><id>15580516</id><snippet>__hash__()</snippet></ROW><ROW><id>15580516</id><snippet>__eq__()</snippet></ROW><ROW><id>15580516</id><snippet>__cmp__()</snippet></ROW><ROW><id>15580516</id><snippet>delnan</snippet></ROW><ROW><id>15580516</id><snippet>class Test(object):
    def __init__(self):
        self.i = random.randint(1, 10)
        self.k = random.randint(1, 10)
        self.j = random.randint(1, 10)

    def __eq__(self, other):
        return (self.i, self.k, self.j) == (other.i, other.k, other.j)

    def __hash__(self):
        return hash((self.i, self.k, self.j))
</snippet></ROW><ROW><id>15580653</id><snippet>def PPResults(module,alist):##Parallel processing
    npool = Pool(int(nproc))    
    res = npool.map_async(module, alist)
    results = (res.get())###results returned in form of a list 
    return results
</snippet></ROW><ROW><id>15580653</id><snippet>fh_out = open('./TestResults', 'w')
for i in results:##Write Results from list to file
    fh_out.write(i)
</snippet></ROW><ROW><id>15580711</id><snippet>command</snippet></ROW><ROW><id>15580711</id><snippet>command=self.display()</snippet></ROW><ROW><id>15580711</id><snippet>command</snippet></ROW><ROW><id>15580711</id><snippet>self.b4 = Button(..., command=self.display, ...)
</snippet></ROW><ROW><id>15580862</id><snippet>if</snippet></ROW><ROW><id>15580862</id><snippet>for link in hxs.select('//a/@href').extract():
    url = link
    if not link.startswith('http://') and not link.startswith('#'):
        url = (self.start_urls[0] + link).replace('//','/')

    print url
    yield Request(url, callback=self.suppose_to_parse)
</snippet></ROW><ROW><id>15580870</id><snippet>new_list</snippet></ROW><ROW><id>15580870</id><snippet>open</snippet></ROW><ROW><id>15580870</id><snippet>read</snippet></ROW><ROW><id>15580870</id><snippet>write</snippet></ROW><ROW><id>15580870</id><snippet>new_list</snippet></ROW><ROW><id>15580870</id><snippet>def save_file(filename, new_list):
    with open(filename, 'w') as f:
        f.write(''.join(new_list))
</snippet></ROW><ROW><id>15580870</id><snippet>def save_file(filename, new_list):
    with open(filename, 'w') as f:
        f.writelines(new_list)
</snippet></ROW><ROW><id>15580870</id><snippet>def save_file(filename, new_list):
    with open(filename, 'w') as f:
        for line in new_list:
            f.write(line)
</snippet></ROW><ROW><id>15580870</id><snippet>def save_file(filename, new_list):
    with open(filename, 'w') as f:
        f.write('\n'.join(new_list) + '\n')

def save_file(filename, new_list):
    with open(filename, 'w') as f:
        f.writelines(line + '\n' for line in new_list)

def save_file(filename, new_list):
    with open(filename, 'w') as f:
        for line in new_list:
            f.write(line + '\n')
</snippet></ROW><ROW><id>15580870</id><snippet>load_file</snippet></ROW><ROW><id>15580870</id><snippet>None</snippet></ROW><ROW><id>15580870</id><snippet>print</snippet></ROW><ROW><id>15580870</id><snippet>def load_file(filename):
    lines = []
    with open(filename, 'Ur') as f:
        for line in f:
            lines.append(line)
    return lines
</snippet></ROW><ROW><id>15580870</id><snippet>for line in f:</snippet></ROW><ROW><id>15580870</id><snippet>f</snippet></ROW><ROW><id>15580870</id><snippet>def load_file(filename):
    with open(filename, 'Ur') as f:
        return list(f)
</snippet></ROW><ROW><id>15581020</id><snippet>^</snippet></ROW><ROW><id>15581020</id><snippet>$</snippet></ROW><ROW><id>15581020</id><snippet>import re
data = "asdsaq2323-asds"
if re.compile("^[a-zA-Z0-9*]+$").match(data):
    print "match"
else:
    print "no match"
</snippet></ROW><ROW><id>15581020</id><snippet>re.match</snippet></ROW><ROW><id>15581020</id><snippet>import re
data = "asdsaq2323-asds"
if re.match("^[a-zA-Z0-9*]+$", data):
    print "match"
else:
    print "no match"
</snippet></ROW><ROW><id>15581031</id><snippet>spider = LernaSpider('http://example.com')
</snippet></ROW><ROW><id>15581031</id><snippet>$scrapy crawl lerna</snippet></ROW><ROW><id>15581031</id><snippet>class LernaSpider(CrawlSpider):
    """Our ad-hoc spider"""

    name = "lerna"

    def __init__(self, name=None, url=url, allow_follow='.*', deny_follow='', allow_extraction='.*', deny_extraction='', **kw):
        parsed_url = urlparse(url)
        domain = str(parsed_url.netloc)
        self.allowed_domains = [domain]
        self.start_urls = [url]
        self.rules = (
            # Extract links
            # and follow links from them (since no callback means follow=True by default).
            Rule(SgmlLinkExtractor(allow=allow_follow, deny=deny_follow)),

            # Extract links and parse them with the spider's method parse_item
            Rule(SgmlLinkExtractor(allow=allow_extraction, deny=deny_extraction), callback='parse_item'),
        )
        super(LernaSpider, self).__init__(name, **kw)

    def parse_item(self, response):
        print 'Crawling... %s' % response.url
        # more stuff here
</snippet></ROW><ROW><id>15581061</id><snippet>[in the loop]
  if k == 'left':
    if not leftmost:
      leftmost = d
    if v &lt; lowest['left']:
      lowest = d

# swap
lefmost['left'], lowest['left'] = lowest['left'], lefmost['left']
</snippet></ROW><ROW><id>15581066</id><snippet>os.chdir()</snippet></ROW><ROW><id>15581066</id><snippet>os.listdir('.')</snippet></ROW><ROW><id>15581066</id><snippet>Counter()</snippet></ROW><ROW><id>15581066</id><snippet>update()</snippet></ROW><ROW><id>15581066</id><snippet>import collections
import re
import os

all_files_frequency = collections.Counter()

previous_dir = os.getcwd()
os.chdir('testfilefolder')
for filename in os.listdir('.'):
    with open(filename) as f:
        file_contents = f.read().lower()

    words = re.findall(r"[a-zA-Z0-9']+", file_contents) # Breaks up into words
    frequency = collections.Counter(words)              # For this file only
    all_files_frequency.update(words)                   # For all files
    print(frequency)

os.chdir(previous_dir)

print ''
print all_files_frequency
</snippet></ROW><ROW><id>15581186</id><snippet>header[0].header['opp'] = "34:04:32.04"
print (sum(float(x) for x in header[0].header['opp'].split(":")))
</snippet></ROW><ROW><id>15581186</id><snippet>70.03999999999999
</snippet></ROW><ROW><id>15581186</id><snippet>s = "34:04:32.04"
ss = [float(x) for x in s.split(":")]
print (ss[0] + ss[1]/60 + ss[2]/3600)
</snippet></ROW><ROW><id>15581186</id><snippet>34.07556666666667
</snippet></ROW><ROW><id>15581205</id><snippet>pos_tag</snippet></ROW><ROW><id>15581205</id><snippet>pickle</snippet></ROW><ROW><id>15581205</id><snippet>_POS_TAGGER</snippet></ROW><ROW><id>15581205</id><snippet>&gt;&gt;&gt; text = nltk.word_tokenize("They refuse to permit us to obtain the refuse permit")
&gt;&gt;&gt; nltk.pos_tag(text)
[('They', 'PRP'), ('refuse', 'VBP'), ('to', 'TO'), ('permit', 'VB'), ('us', 'PRP'),
('to', 'TO'), ('obtain', 'VB'), ('the', 'DT'), ('refuse', 'NN'), ('permit', 'NN')]
</snippet></ROW><ROW><id>15581509</id><snippet>start*frameRate</snippet></ROW><ROW><id>15581510</id><snippet>order.path</snippet></ROW><ROW><id>15581510</id><snippet>zipfile</snippet></ROW><ROW><id>15581605</id><snippet>a = {
    'breakfast': {
        'time': "8AM",
        'items': ['banana', 'yogurt']
    },
    'lunch': {
        'time': '2PM',
        'items': ['fish', 'tartar sauce']
    },
    'dinner': {
        'time': '8PM',
        'items': ['soup', 'salad']
    }
}
</snippet></ROW><ROW><id>15581605</id><snippet>a['breakfast']['time']
'8AM'

a['breakfast']['items']
['banana', 'yogurt']
</snippet></ROW><ROW><id>15581676</id><snippet>jQuery</snippet></ROW><ROW><id>15581676</id><snippet>datetime</snippet></ROW><ROW><id>15581676</id><snippet>strptime</snippet></ROW><ROW><id>15581676</id><snippet>dt = datetime.datetime.strptime(jsondate)
</snippet></ROW><ROW><id>15581676</id><snippet>dt = datetime.datetime.strptime(jsondate.partition('(')[0])
</snippet></ROW><ROW><id>15581676</id><snippet>'('</snippet></ROW><ROW><id>15581676</id><snippet>-0600</snippet></ROW><ROW><id>15581676</id><snippet>datetime</snippet></ROW><ROW><id>15581676</id><snippet>pytz</snippet></ROW><ROW><id>15581676</id><snippet>strptime</snippet></ROW><ROW><id>15581676</id><snippet>datetime</snippet></ROW><ROW><id>15581676</id><snippet>datetime</snippet></ROW><ROW><id>15581676</id><snippet>datetime</snippet></ROW><ROW><id>15581676</id><snippet>astimezon</snippet></ROW><ROW><id>15581676</id><snippet>datetime</snippet></ROW><ROW><id>15581676</id><snippet>pytz</snippet></ROW><ROW><id>15581683</id><snippet>logger</snippet></ROW><ROW><id>15581683</id><snippet>--logging-level</snippet></ROW><ROW><id>15581683</id><snippet>--logging-filter</snippet></ROW><ROW><id>15581856</id><snippet>for</snippet></ROW><ROW><id>15581856</id><snippet>for</snippet></ROW><ROW><id>15581856</id><snippet>for item in nums</snippet></ROW><ROW><id>15581856</id><snippet>for (int i = 0; i &lt; nums.length; i++) {
    int item = nums[i];

    ...
}
</snippet></ROW><ROW><id>15581856</id><snippet>False</snippet></ROW><ROW><id>15581856</id><snippet>2</snippet></ROW><ROW><id>15581856</id><snippet>3</snippet></ROW><ROW><id>15581856</id><snippet>False</snippet></ROW><ROW><id>15581856</id><snippet>def has23(nums):
    for i in nums:
        if i == 2 or i == 3:
            return True  # Only return `True` if the value is 2 or 3

    return False  # The `for` loop ended, so there are no 2s or 3s in the list.
</snippet></ROW><ROW><id>15581856</id><snippet>in</snippet></ROW><ROW><id>15581856</id><snippet>def has23(nums):
    return 2 in nums or 3 in nums
</snippet></ROW><ROW><id>15581940</id><snippet>def add_info(new_info, new_list):
    # Persons name is the first item of the list
    name = new_info[0]

    # Check if we already have an item with that name
    for item in new_list:
        if item[0] == name:
            print "%s is already in the list" % name
            return False

    # Insert the item into the list
    new_list.append(new_info)
    return True
</snippet></ROW><ROW><id>15582119</id><snippet>MyProperty</snippet></ROW><ROW><id>15582119</id><snippet>class MyProperty(object):
    def __init__(self, fget):
        self.fget = fget
    def __get__(self, obj, objtype=None):
        print('IN MyProperty.__get__')
        try:
            return self.fget.__get__(obj, objtype)()
        except AttributeError: # self.fget has no __get__ method
            return self.fget(obj)
</snippet></ROW><ROW><id>15582119</id><snippet>class A(object):
    @MyProperty
    @MyClassMethod
    def klsproperty(cls):
        return 555

print(A.klsproperty)
</snippet></ROW><ROW><id>15582119</id><snippet>IN MyProperty.__get__
IN MyClassMethod.__get__
555
</snippet></ROW><ROW><id>15582215</id><snippet>memset</snippet></ROW><ROW><id>15582215</id><snippet>PyStringObject</snippet></ROW><ROW><id>15582215</id><snippet>typedef struct {
    Py_ssize_t ob_refcnt;         // 4|8 bytes
    struct _typeobject *ob_type;  // 4|8 bytes
    Py_ssize_t ob_size;           // 4|8 bytes
    long ob_shash;                // 4|8 bytes (4 on 64-bit Windows)
    int ob_sstate;                // 4 bytes
    char ob_sval[1];
} PyStringObject; 
</snippet></ROW><ROW><id>15582215</id><snippet>sys.getsizeof</snippet></ROW><ROW><id>15582215</id><snippet>id</snippet></ROW><ROW><id>15582215</id><snippet>__sizeof__</snippet></ROW><ROW><id>15582215</id><snippet>&gt;&gt;&gt; a = 'abcdef'
&gt;&gt;&gt; bufsize = len(a) + 1
&gt;&gt;&gt; offset = sys.getsizeof(a) - bufsize
&gt;&gt;&gt; ctypes.memset(id(a) + offset, 0, bufsize)
3074822964L
&gt;&gt;&gt; a
'\x00\x00\x00\x00\x00\x00'
</snippet></ROW><ROW><id>15582215</id><snippet>PyStringObject</snippet></ROW><ROW><id>15582215</id><snippet>ob_sstate</snippet></ROW><ROW><id>15582215</id><snippet>from ctypes import *

class PyStringObject(Structure):
    _fields_ = [
      ('ob_refcnt', c_ssize_t),
      ('ob_type', py_object),
      ('ob_size', c_ssize_t),
      ('ob_shash', c_long),
      ('ob_sstate', c_int),
      # ob_sval varies in size
      # zero with memset is simpler
    ]

def zerostr(s):
    """zero a non-interned string"""
    if not isinstance(s, str):
        raise TypeError(
          "expected str object, not %s" % type(s).__name__)

    s_obj = PyStringObject.from_address(id(s))
    if s_obj.ob_sstate &gt; 0:
        raise RuntimeError("cannot zero interned string")

    s_obj.ob_shash = -1  # not hashed yet
    offset = sizeof(PyStringObject)
    memset(id(s) + offset, 0, len(s))
</snippet></ROW><ROW><id>15582215</id><snippet>&gt;&gt;&gt; s = 'abcd' # interned by code object
&gt;&gt;&gt; zerostr(s)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 10, in zerostr
RuntimeError: cannot zero interned string

&gt;&gt;&gt; s = raw_input() # not interned
abcd
&gt;&gt;&gt; zerostr(s)
&gt;&gt;&gt; s
'\x00\x00\x00\x00'
</snippet></ROW><ROW><id>15582355</id><snippet>if newString == "" or char != newString[len(newString)-1] or char != sub:
</snippet></ROW><ROW><id>15582359</id><snippet>import pandas as pd
import numpy as np
df_a = pd.DataFrame([{"a": 1, "b": 4}, {"a": 2, "b": 5}, {"a": 3, "b": 6}, {"a": 4, "b": 8}, {"a": 1, "b": 7}])
df_b = pd.DataFrame([{"c": 2, "d": 7}, {"c": 3, "d": 8}, {"c": 2, "d": 10}])
print "df_a"
print df_a
print "df_b"
print df_b
</snippet></ROW><ROW><id>15582359</id><snippet>df_a
   a  b
0  1  4
1  2  5
2  3  6
3  4  8
4  1  7
df_b
   c   d
0  2   7
1  3   8
2  2  10
</snippet></ROW><ROW><id>15582359</id><snippet>c</snippet></ROW><ROW><id>15582359</id><snippet>a</snippet></ROW><ROW><id>15582359</id><snippet>ia, ib = np.where(np.less.outer(df_a.a, df_b.c))
print pd.concat((df_a.take(ia).reset_index(drop=True), 
                 df_b.take(ib).reset_index(drop=True)), axis=1)
</snippet></ROW><ROW><id>15582359</id><snippet>   a  b  c   d
0  1  4  2   7
1  1  4  3   8
2  1  4  2  10
3  2  5  3   8
4  1  7  2   7
5  1  7  3   8
6  1  7  2  10
</snippet></ROW><ROW><id>15582359</id><snippet>numpy.setdiff1d()</snippet></ROW><ROW><id>15582359</id><snippet>df_a</snippet></ROW><ROW><id>15582359</id><snippet>na = np.setdiff1d(np.arange(len(df_a)), ia)
nb = -1 * np.ones_like(na)
oa = np.concatenate((ia, na))
ob = np.concatenate((ib, nb))
print pd.concat([df_a.take(oa).reset_index(drop=True), 
                 df_b.take(ob).reset_index(drop=True)], axis=1)
</snippet></ROW><ROW><id>15582359</id><snippet>   a  b   c   d
0  1  4   2   7
1  1  4   3   8
2  1  4   2  10
3  2  5   3   8
4  1  7   2   7
5  1  7   3   8
6  1  7   2  10
7  3  6 NaN NaN
8  4  8 NaN NaN
</snippet></ROW><ROW><id>15582486</id><snippet>append</snippet></ROW><ROW><id>15582486</id><snippet>&gt;&gt;&gt; l1 = [1,2,3,4]
&gt;&gt;&gt; l1.append([5])
&gt;&gt;&gt; l1
[1, 2, 3, 4, [5]]
</snippet></ROW><ROW><id>15582486</id><snippet>extend</snippet></ROW><ROW><id>15582486</id><snippet>append</snippet></ROW><ROW><id>15582486</id><snippet>mylist + otherlist</snippet></ROW><ROW><id>15582486</id><snippet>+</snippet></ROW><ROW><id>15582902</id><snippet>for i, j in replace.items():
    if i in originalText:
        newText = originalText.replace(i,j)
        print(newText.upper())
        break
else:
    print(originalText.upper())
</snippet></ROW><ROW><id>15582902</id><snippet>break</snippet></ROW><ROW><id>15582902</id><snippet>else</snippet></ROW><ROW><id>15582902</id><snippet>for</snippet></ROW><ROW><id>15582902</id><snippet>break</snippet></ROW><ROW><id>15583136</id><snippet>def gen(x):
    def f():
        nonlocal x # add this line
        x += 1
        return x

    return f

print(gen(1)())
</snippet></ROW><ROW><id>15583182</id><snippet>key=lambda item: (item[1], item[0])
</snippet></ROW><ROW><id>15583182</id><snippet>for key, value in sorted(my_dict.iteritems(), key=lambda k,v: v,k):
</snippet></ROW><ROW><id>15583182</id><snippet>SyntaxError: non-keyword arg after arg
</snippet></ROW><ROW><id>15583182</id><snippet>k</snippet></ROW><ROW><id>15583182</id><snippet>sorted()</snippet></ROW><ROW><id>15583182</id><snippet>key=lambda (k,v): (v,k)</snippet></ROW><ROW><id>15583213</id><snippet>def main():
    alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,.?! \t\n\r"
    PrintDescription()
    a = None
    while a not in ('e', 'd', 'q'):
        if a:
            print "Try again!"
        else:
            StartMenu()
        a = raw_input("")
    if a == 'q':
        sys.exit(0)
</snippet></ROW><ROW><id>15583213</id><snippet>if a:</snippet></ROW><ROW><id>15583213</id><snippet>False</snippet></ROW><ROW><id>15583213</id><snippet>if a:</snippet></ROW><ROW><id>15583213</id><snippet>True</snippet></ROW><ROW><id>15583442</id><snippet>Entry.objects</snippet></ROW><ROW><id>15583442</id><snippet>published</snippet></ROW><ROW><id>15583442</id><snippet>Entry.objects.all().published()</snippet></ROW><ROW><id>15583442</id><snippet>Entry.objects.get_queryset().published()</snippet></ROW><ROW><id>15583442</id><snippet>published</snippet></ROW><ROW><id>15583442</id><snippet>class EntryQueryset(QuerySet):

    def published(self):
        return self.filter(status='published')
</snippet></ROW><ROW><id>15583455</id><snippet>import numpy as np
import networkx as nx
import matplotlib
matplotlib.use("TkAgg")

import pylab as plt
plt.ion()

fig = plt.figure()

pause = False

def onclick(event):
    global pause
    pause = not pause

fig.canvas.mpl_connect('button_press_event', onclick)

def drawGraph(matrix):
    fig.clear()
    G = nx.DiGraph(np.array(matrix))
    nx.draw_networkx(G)
    plt.draw()

A=[[0,1],[1,0]]
B=[[0,1],[0,0]]
x=1
while True:
    if not pause:
        if x==1:
            drawGraph(A)
            x=0
        else:
            drawGraph(B)
            x=1
    fig.canvas.get_tk_widget().update() # process events
</snippet></ROW><ROW><id>15583820</id><snippet>def PrintDescription():
    print 'This program encrypts and descrypts messages using multiple \
encryption methods.\nInput files must be in the same directory as this program.\
\nOutput files will be created in this same directory.'

def GetChoice(acceptable_answers):
    while True:
        user_choice = raw_input('')
        if user_choice in acceptable_answers:
            return user_choice
        else:
            print 'Please try:', ', '.join(acceptable_answers)

def StartMenu():
    print 'Do you wish to encrypt or decrypt?'
    print '&lt;e&gt;ncrypt'
    print '&lt;d&gt;ecrypt'
    print '&lt;q&gt;uit'
    user_choice = GetChoice('edq')
    return user_choice

def MethodMenu():
    print 'Which method would you like to use?'
    print '&lt;c&gt;aesarian fixed offset'
    print '&lt;p&gt;seudo-random offset'
    print '&lt;s&gt;ubstitution cipher'
    user_choice = GetChoice('cps')
    return user_choice

def main():
    alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,.?! \t\n\r"
    PrintDescription()

    while True:
        user_choice = StartMenu()
        if user_choice in ('e', 'd'):
            user_choice = MethodMenu()
            # Do something based on the user_choice
        if user_choice == 'q':
            break

main()
</snippet></ROW><ROW><id>15583820</id><snippet>MethodMenu()</snippet></ROW><ROW><id>15583910</id><snippet>    parser.add_argument('--verbose', action="store")
    parser.add_argument('-c', '--config', nargs="?", dest="config_file")
    parser.add_argument('--dry-run', action="store_true", dest="dryrun")
    parser.add_argument('args', nargs='*')
</snippet></ROW><ROW><id>15583910</id><snippet>args</snippet></ROW><ROW><id>15583910</id><snippet>nargs</snippet></ROW><ROW><id>15583910</id><snippet>CLI-argparse</snippet></ROW><ROW><id>15583947</id><snippet># using defaultdict
lookup = collections.defaultdict(list)
for item in items:
    lookup[key(item)].append(item)

# or, using plain dict
lookup = {}
for item in items:
    lookup.setdefault(key(item), []).append(item)
</snippet></ROW><ROW><id>15584019</id><snippet>[0, 1]</snippet></ROW><ROW><id>15584019</id><snippet>[-1, 1]</snippet></ROW><ROW><id>15584019</id><snippet>StandardScaler</snippet></ROW><ROW><id>15584019</id><snippet>gamma</snippet></ROW><ROW><id>15584019</id><snippet>epsilon</snippet></ROW><ROW><id>15584261</id><snippet>project_home = u'/home/thefritobandit/microblog/app</snippet></ROW><ROW><id>15584261</id><snippet>project_home = u'/home/thefritobandit/microblog</snippet></ROW><ROW><id>15584261</id><snippet>from __init__ import app as application</snippet></ROW><ROW><id>15584261</id><snippet>from app import app as application</snippet></ROW><ROW><id>15584430</id><snippet>string</snippet></ROW><ROW><id>15584430</id><snippet>string.punctuation</snippet></ROW><ROW><id>15584430</id><snippet>str</snippet></ROW><ROW><id>15584430</id><snippet>In [32]: import string

In [33]: string.punctuation
Out[33]: '!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~'
</snippet></ROW><ROW><id>15584597</id><snippet>runserver.py</snippet></ROW><ROW><id>15584597</id><snippet>facebook</snippet></ROW><ROW><id>15584597</id><snippet>from facebook import app
app.run(debug=True)
</snippet></ROW><ROW><id>15584895</id><snippet>import math
y = 122.32*math.exp(-0.31*page_load_time)
</snippet></ROW><ROW><id>15585107</id><snippet>STATIC_URL</snippet></ROW><ROW><id>15585107</id><snippet>   &lt;script type="text/javascript" src="{{ STATIC_URL }}/css/watermark.jquery.js"&gt;&lt;/script&gt;
   &lt;script type="text/javascript" src="{{ STATIC_URL }}/css/watermark.jquery.min.js"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>15585107</id><snippet>watermark.png</snippet></ROW><ROW><id>15585107</id><snippet>"path": "{{ STATIC_URL }}/css/watermark.png"
</snippet></ROW><ROW><id>15585107</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>15585107</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>15585107</id><snippet>STATIC_URL</snippet></ROW><ROW><id>15585347</id><snippet>os.system('cd /some/where')</snippet></ROW><ROW><id>15585347</id><snippet>os.system</snippet></ROW><ROW><id>15585347</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>15585347</id><snippet>proc = subprocess.Popen(
    'python %s/python_repeat_deckgen_remote.py -m %s' % (path, module),
    shell = True)
status = proc.wait()
</snippet></ROW><ROW><id>15585347</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; x = subprocess.Popen('echo $$')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/lib/python2.7/subprocess.py", line 679, in __init__
    errread, errwrite)
  File "/usr/local/lib/python2.7/subprocess.py", line 1249, in _execute_child
    raise child_exception
OSError: [Errno 2] No such file or directory
&gt;&gt;&gt; x = subprocess.Popen('echo $$', shell = True); x.wait()
81628
0
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15585347</id><snippet>&gt;&gt;&gt; x = subprocess.Popen(['echo', '$$']); x.wait()
$$
0
&gt;&gt;&gt;
</snippet></ROW><ROW><id>15585347</id><snippet>$$</snippet></ROW><ROW><id>15585347</id><snippet>proc = subprocess.Popen(['python',
    os.path.join(path, 'python_repeat_deckgen_remote.py'),
    '-m',
    module])
</snippet></ROW><ROW><id>15585347</id><snippet>path</snippet></ROW><ROW><id>15585347</id><snippet>module</snippet></ROW><ROW><id>15585347</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>15585347</id><snippet>cwd = path</snippet></ROW><ROW><id>15585347</id><snippet>os.path.join</snippet></ROW><ROW><id>15585478</id><snippet>each</snippet></ROW><ROW><id>15585478</id><snippet>for each in current_staff_list:
   print(each.variable_name)
</snippet></ROW><ROW><id>15585478</id><snippet>for</snippet></ROW><ROW><id>15585553</id><snippet>read</snippet></ROW><ROW><id>15585553</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; desc = os.pipe()
&gt;&gt;&gt; desc
(3, 4)
&gt;&gt;&gt; os.write(desc[1], 'foo')
3
&gt;&gt;&gt; os.read(desc[0], 100)
'foo'
&gt;&gt;&gt; os.read(desc[0], 100)
</snippet></ROW><ROW><id>15585553</id><snippet>...
KeyboardInterrupt
&gt;&gt;&gt; os.write(desc[1], 'a')
1
&gt;&gt;&gt; os.read(desc[0], 100)
'a'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15585923</id><snippet>&lt;bar&gt;</snippet></ROW><ROW><id>15585923</id><snippet>&lt;buildCommand&gt;</snippet></ROW><ROW><id>15585926</id><snippet>from numpy import array</snippet></ROW><ROW><id>15585926</id><snippet>array</snippet></ROW><ROW><id>15585926</id><snippet>from pylab import *</snippet></ROW><ROW><id>15585926</id><snippet>from numpy import *</snippet></ROW><ROW><id>15585926</id><snippet>from numpy import *</snippet></ROW><ROW><id>15585926</id><snippet>from pylab import *</snippet></ROW><ROW><id>15585926</id><snippet>import numpy as np</snippet></ROW><ROW><id>15585926</id><snippet>np.array(…)</snippet></ROW><ROW><id>15586186</id><snippet>from twisted.python.modules import getModule
script = getModule(__name__).filePath.path
# ...
reactor.spawnProcess(..., script, ...)
</snippet></ROW><ROW><id>15586186</id><snippet>python -m</snippet></ROW><ROW><id>15586221</id><snippet>grouped = {prefix: list(folders) for 
    prefix, folders in itertools.groupby(folderList, lambda x: x[:2])}
</snippet></ROW><ROW><id>15586221</id><snippet>folderList</snippet></ROW><ROW><id>15586221</id><snippet>from collections import defaultdict
grouped = defaultdict(list)
for folder in folderList:
    grouped[folder[:2]].append(folder)
</snippet></ROW><ROW><id>15586434</id><snippet>&amp;text='Kid got swag'
</snippet></ROW><ROW><id>15586434</id><snippet>url="http://%s:%d/cgi-bin/sendsms?username=%s&amp;password=%s&amp;to=%s&amp;text='%s'" \
    % ('localhost', 13013, 'kannel', 'kannel', str(mobile_no), message)
</snippet></ROW><ROW><id>15586434</id><snippet>&amp;text='%s'</snippet></ROW><ROW><id>15586434</id><snippet>&gt;&gt;&gt; payload = {'key1': 'value1', 'key2': 'value2'}
&gt;&gt;&gt; r = requests.get("http://httpbin.org/get", params=payload)
</snippet></ROW><ROW><id>15586809</id><snippet>__init__.py</snippet></ROW><ROW><id>15586809</id><snippet>from MultiString import MultiString
</snippet></ROW><ROW><id>15586809</id><snippet>from multistring.MultiString import MultiString
</snippet></ROW><ROW><id>15586809</id><snippet>from .MultiString import MultiString
</snippet></ROW><ROW><id>15587016</id><snippet>&gt;&gt;&gt; def tree(D, x):
        if x is None: 
            return []
        else: 
            return [x] + tree(D, D[x])


&gt;&gt;&gt; tree(D, 'A')
['A', 'AF', 'Z']
</snippet></ROW><ROW><id>15587016</id><snippet>def tree(D, x):
    return [] if x is None else [x] + tree(D, D[x])
</snippet></ROW><ROW><id>15587016</id><snippet>.append</snippet></ROW><ROW><id>15587210</id><snippet>re.findall("((?&lt;=^\[)[^[\]]+(?=\]$)|^[INTEXT]{3}\. .+?$)", text)
</snippet></ROW><ROW><id>15587312</id><snippet>__init__.py</snippet></ROW><ROW><id>15587312</id><snippet>my_script.py</snippet></ROW><ROW><id>15587312</id><snippet>my_script</snippet></ROW><ROW><id>15587312</id><snippet>conf.py</snippet></ROW><ROW><id>15587312</id><snippet>sys.path.insert(0, os.path.abspath('..'))
</snippet></ROW><ROW><id>15587312</id><snippet>.. automodule:: bin.my_script
</snippet></ROW><ROW><id>15587371</id><snippet>[A-Z]{5}_(.*)_(.*)\.log
</snippet></ROW><ROW><id>15587371</id><snippet>.</snippet></ROW><ROW><id>15587371</id><snippet>"XXXXX_&lt;starttime&gt;_&lt;endtime&gt;", "log"
</snippet></ROW><ROW><id>15587371</id><snippet>_</snippet></ROW><ROW><id>15587371</id><snippet>"XXXXX", "&lt;starttime&gt;", "&lt;endtime&gt;"
</snippet></ROW><ROW><id>15587371</id><snippet>'XXXXX_&lt;starttime&gt;_&lt;endtime&gt;.log'.split('.')[0].split('_')
</snippet></ROW><ROW><id>15587371</id><snippet>['XXXXX', '&lt;starttime&gt;', '&lt;endtime&gt;']
</snippet></ROW><ROW><id>15587371</id><snippet>DEFGH&lt;starttime&gt;__&lt;endtime&gt;.log</snippet></ROW><ROW><id>15587418</id><snippet>lru_cache</snippet></ROW><ROW><id>15587418</id><snippet>from functools import wraps

def cached(func):
    func.cache = {}
    @wraps(func)
    def wrapper(*args):
        try:
            return func.cache[args]
        except KeyError:
            func.cache[args] = result = func(*args)
            return result   
    return wrapper
</snippet></ROW><ROW><id>15587418</id><snippet>&gt;&gt;&gt; @cached
... def fibonacci(n):
...     if n &lt; 2:
...             return n
...     return fibonacci(n-1) + fibonacci(n-2)
... 
&gt;&gt;&gt; fibonacci(100)
354224848179261915075L
</snippet></ROW><ROW><id>15587418</id><snippet>cache</snippet></ROW><ROW><id>15587418</id><snippet>&gt;&gt;&gt; fibonacci.cache
{(32,): 2178309, (23,): 28657, ... }
</snippet></ROW><ROW><id>15587418</id><snippet>fibonacci.cache = pickle.load(cache_file_object)
</snippet></ROW><ROW><id>15587418</id><snippet>lru_cache</snippet></ROW><ROW><id>15587418</id><snippet>lru_cache</snippet></ROW><ROW><id>15587430</id><snippet>import io
import sys
import numpy as np
import matplotlib.pyplot as plt
import mpl_toolkits.mplot3d.axes3d as axes3d
import scipy.interpolate as interpolate

content = '''0.025876 139 0
0.030881 140 0
0.030982 141 0
0.035602 142 0
0.035521 143 0
0.038479 144 0
0.040668 145 0
0.040121 146 0
0.037953 147 0
0.039027 148 0
0.038338 149 0
0.047557 139 1
0.045105 140 1
0.044943 141 1
0.042370 142 1
0.042025 143 1
0.038946 144 1
0.037953 145 1
0.033373 146 1
0.030070 147 1
0.029118 148 1
0.025552 149 1'''

data = np.genfromtxt(io.BytesIO(content), dtype=None, names='x, y, z')

# Or, to read from a file:
# data = np.genfromtxt(filename, dtype=None, names='x, y, z')

x, y, z = data['x'], data['y'], data['z']
N = 20
xi = np.linspace(x.min(), x.max(), N)
yi = np.linspace(y.min(), y.max(), N)

X, Y = np.meshgrid(xi, yi)
Z = interpolate.griddata((x, y), z, (X, Y), method='nearest')

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1, projection='3d')
ax.scatter(data['x'], data['y'], data['z'])
ax.plot_wireframe(X, Y, Z, rstride=1, cstride=1)
# ax.plot_surface(X, Y, Z)
plt.show()
</snippet></ROW><ROW><id>15587911</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>15587911</id><snippet>chmod +x arbitraryname
</snippet></ROW><ROW><id>15587911</id><snippet>cd ~/bin/
ln -s ~/some/path/to/myscript/arbitraryname
</snippet></ROW><ROW><id>15587974</id><snippet>netaddr</snippet></ROW><ROW><id>15587974</id><snippet>from netaddr import IPSet

A1 = IPSet(['1.2.3.4','145.2.3.0/24'])
A2 = IPSet(['6.5.0.0/16','3.4.1.0/24'])
B1 = IPSet(['1.5.6.7','10.0.3.0/24'])
B2 = IPSet(['1.2.3.0/24','3.4.0.0/16'])

A1B1 = A1 &amp; B1
A1B2 = A1 &amp; B2
A2B1 = A2 &amp; B1
A2B2 = A2 &amp; B2

A1B1 | A1B2 | A2B1 | A2B2
-&gt; IPSet(['1.2.3.4/32', '3.4.1.0/24'])
</snippet></ROW><ROW><id>15587974</id><snippet>import random

f = open('iplist1.txt','w')
for i in range(5000):
    ip = '.'.join([str(random.randint(1,254)) for i in range(4)])
    ip += '/'+str(random.randint(8,24))
    f.write(ip+'\n')
f.close()

f = open('iplist2.txt','w')
for i in range(5000):
    ip = '.'.join([str(random.randint(1,254)) for i in range(4)])
    ip += '/'+str(random.randint(8,24))
    f.write(ip+'\n')
f.close()
</snippet></ROW><ROW><id>15587974</id><snippet>import time
import netaddr

ipset1 = netaddr.IPSet(open('iplist1.txt','r').readlines())
ipset2 = netaddr.IPSet(open('iplist2.txt','r').readlines())

print "Set 1:", len(ipset1), "IP addresses"
print "Set 2:", len(ipset2), "IP addresses"

start = time.time()
ipset = ipset1 &amp; ipset2
print "Elapsed:", time.time() - start
print "Intersection:",len(ipset),"IP addresses"
</snippet></ROW><ROW><id>15588069</id><snippet>add_checkbutton()</snippet></ROW><ROW><id>15588069</id><snippet>add_radiobutton()</snippet></ROW><ROW><id>15588069</id><snippet>value</snippet></ROW><ROW><id>15588069</id><snippet>onvalue</snippet></ROW><ROW><id>15588069</id><snippet>offvalue</snippet></ROW><ROW><id>15588069</id><snippet>self.var = IntVar(root)
self.var.set(1)
optionsmenu.add_checkbutton(label='Pop Up set to on??', command=self.togglePopUp,
                            variable=self.var, onvalue=1, offvalue=0)
</snippet></ROW><ROW><id>15588069</id><snippet>self.togglePopUp</snippet></ROW><ROW><id>15588239</id><snippet>import re
re.sub("^u'(.*)'$",r'\1',"u'text'")
-&gt; text
</snippet></ROW><ROW><id>15588239</id><snippet>re.sub("u'([^']*)'",r'\1',STRING)
</snippet></ROW><ROW><id>15588239</id><snippet>re.sub("u'([^']*)'",r'\1',"u'value1',u'value2',u'value3'")
-&gt; value1,value2,value3
</snippet></ROW><ROW><id>15588435</id><snippet>import os

input="someFile.pdf"
output="out.txt"
os.system(("ps2ascii %s %s") %( input , output))
</snippet></ROW><ROW><id>15588486</id><snippet>start</snippet></ROW><ROW><id>15588486</id><snippet>class MyDrag(QtGui.QDrag):
    dragStarted = QtCore.pyqtSignal()

    def __init__(self, dragSource):
        super(MyDrag, self).__init__(dragSource)

    def start(self):
        self.dragStarted.emit()

        super(MyDrag, self).start()
</snippet></ROW><ROW><id>15588626</id><snippet>// the actual Ajax
$("#submitSquats").click(function() {
    var form = $(this).parent();
    $.post(
        "submitWorkout1", //url
        form.serialize(), //data
        function() {      //success method
            $('#squats').html('&lt;span&gt;Success&lt;/span&gt;');
        }
    );
    return false;
});
</snippet></ROW><ROW><id>15588626</id><snippet>form.serialize()</snippet></ROW><ROW><id>15588631</id><snippet>def square_of_sum():
  sum_ = 0
  for x in xrange(1, 11):
    sum_ += x
  return sum_ ** 2
</snippet></ROW><ROW><id>15588631</id><snippet>def square_of_sum():
  return sum(range(11)) ** 2
</snippet></ROW><ROW><id>15588631</id><snippet>def square_of_sum(x):
   print (x * (x + 1) / 2) ** 2
</snippet></ROW><ROW><id>15588631</id><snippet>for</snippet></ROW><ROW><id>15588631</id><snippet>for</snippet></ROW><ROW><id>15588631</id><snippet>x + sum = sum</snippet></ROW><ROW><id>15588631</id><snippet>sum = sum + x</snippet></ROW><ROW><id>15588631</id><snippet>sum += x</snippet></ROW><ROW><id>15588631</id><snippet>sum</snippet></ROW><ROW><id>15588631</id><snippet>sum</snippet></ROW><ROW><id>15588631</id><snippet>sum*sum</snippet></ROW><ROW><id>15588631</id><snippet>**</snippet></ROW><ROW><id>15588631</id><snippet>sum ** 2</snippet></ROW><ROW><id>15588771</id><snippet>Board</snippet></ROW><ROW><id>15588771</id><snippet>xpos = None
opos = None
count = None
status = []
</snippet></ROW><ROW><id>15588771</id><snippet>__init__()</snippet></ROW><ROW><id>15588771</id><snippet>self.status = []
</snippet></ROW><ROW><id>15588771</id><snippet>status</snippet></ROW><ROW><id>15588806</id><snippet>self._on_clicked</snippet></ROW><ROW><id>15588806</id><snippet>self</snippet></ROW><ROW><id>15588806</id><snippet>self</snippet></ROW><ROW><id>15588806</id><snippet>Button</snippet></ROW><ROW><id>15588806</id><snippet>self._on_clicked(self)
</snippet></ROW><ROW><id>15588806</id><snippet>Button</snippet></ROW><ROW><id>15588806</id><snippet>&lt;Button.Button object at 0x0707C350&gt;</snippet></ROW><ROW><id>15588865</id><snippet>socket</snippet></ROW><ROW><id>15588865</id><snippet>ExcelFile</snippet></ROW><ROW><id>15588865</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; link = 'http://www.econ.yale.edu/~shiller/data/chapt26.xls'
&gt;&gt;&gt; socket = urllib2.urlopen(link)
&gt;&gt;&gt; xd = pd.ExcelFile(socket)
NOTE *** Ignoring non-worksheet data named u'PDVPlot' (type 0x02 = Chart)
NOTE *** Ignoring non-worksheet data named u'ConsumptionPlot' (type 0x02 = Chart)
&gt;&gt;&gt; xd.sheet_names
[u'Data', u'Consumption', u'Calculations']
&gt;&gt;&gt; df = xd.parse(xd.sheet_names[-1], header=None)
&gt;&gt;&gt; df
                                   0   1   2   3         4
0        Average Real Interest Rate: NaN NaN NaN  1.028826
1    Geometric Average Stock Return: NaN NaN NaN  0.065533
2              exp(geo. Avg. return) NaN NaN NaN  0.067728
3  Geometric Average Dividend Growth NaN NaN NaN  0.012025
</snippet></ROW><ROW><id>15589084</id><snippet>ip = (getenv("HTTP_CLIENT_IP") or
getenv("HTTP_X_FORWARDED_FOR") or
getenv("REMOTE_ADDR") or
"UNKNOWN")
</snippet></ROW><ROW><id>15589084</id><snippet>last_ip_raw = c.execute('SELECT ip FROM dl ORDER BY id DESC LIMIT 1')
last_ip_tup = c.fetchone()
last_ip = str("%s" % last_ip_tup)
</snippet></ROW><ROW><id>15589084</id><snippet>def count():
        if last_ip != ip:
                c.execute("INSERT INTO dl VALUES ('%d', '%s', '%s', '%s')" % (index, dt, ip, client))
                conn.commit()
                conn.close()
</snippet></ROW><ROW><id>15589113</id><snippet>...
if instrument+'.pdf' in fileName:
...
</snippet></ROW><ROW><id>15589381</id><snippet>itertools.product</snippet></ROW><ROW><id>15589381</id><snippet>product</snippet></ROW><ROW><id>15589381</id><snippet>def product(*args, **kwds):
    # product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy
    # product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111
    pools = map(tuple, args) * kwds.get('repeat', 1)
    result = [[]]
    for pool in pools:
        result = [x+[y] for x in result for y in pool]
    for prod in result:
        yield tuple(prod)
</snippet></ROW><ROW><id>15589381</id><snippet>itertools.permutations</snippet></ROW><ROW><id>15589381</id><snippet>list(set((product(*[range(2) for _ in range(length)]))))
</snippet></ROW><ROW><id>15589381</id><snippet>list(product(*[range(2) for _ in range(length)]))
</snippet></ROW><ROW><id>15589381</id><snippet>length</snippet></ROW><ROW><id>15589381</id><snippet>range(2)</snippet></ROW><ROW><id>15589551</id><snippet>data[year] = {}
data[year][month] = [day]
</snippet></ROW><ROW><id>15589551</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>15589551</id><snippet>from collections import defaultdict

data = defaultdict(dict)

data[year][month] = [day]
</snippet></ROW><ROW><id>15589551</id><snippet>def monthdict():
    return defaultdict(list)
data = defaultdict(monthdict)

data[year][month].append(day)
</snippet></ROW><ROW><id>15589551</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; def monthdict():
...     return defaultdict(list)
... 
&gt;&gt;&gt; data = defaultdict(monthdict)
&gt;&gt;&gt; data[2013][3].append(23)
&gt;&gt;&gt; data
defaultdict(&lt;function monthdict at 0x10c9d0500&gt;, {2013: defaultdict(&lt;type 'list'&gt;, {3: [23]})})
</snippet></ROW><ROW><id>15589695</id><snippet>def mhello1():
    toplevel = Toplevel()
    toplevel.title('Another window')
    toplevel.focus_set()
</snippet></ROW><ROW><id>15589825</id><snippet>import cv2
img = cv2.imread("lenna.png")
crop_img = img[100:200, 200:400] # Crop from x, y, w, h -&gt; 100, 200, 100, 200
cv2.imshow("cropped", crop_img)
cv2.waitKey(0)
</snippet></ROW><ROW><id>15589851</id><snippet>s = []
people = int(raw_input())
for i in range(people):
    firstn = raw_input()
    lastn = raw_input()
    numbers = int(raw_input())

    print(firstn, lastn, numbers)
    temp = 0
    for b in range(numbers):
        numbers = float(raw_input())
        temp += numbers
    s.append(temp)
print(s)
</snippet></ROW><ROW><id>15589909</id><snippet>fill_betweenx</snippet></ROW><ROW><id>15589909</id><snippet>ax2.fill_betweenx(y,x, x2=0.5, where=x&gt;0.5,interpolate=True)
</snippet></ROW><ROW><id>15590006</id><snippet>d1.groupby('ExamenYear').agg({'Participated': len, 
                              'Passed': lambda x: sum(x == 'yes')})
</snippet></ROW><ROW><id>15590253</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>15590253</id><snippet>FILE_SHARE_DELETE</snippet></ROW><ROW><id>15590253</id><snippet>open</snippet></ROW><ROW><id>15590253</id><snippet>FILE_SHARE_DELETE</snippet></ROW><ROW><id>15590268</id><snippet>/Users/&lt;your_username&gt;/Music/iTunes/iTunes Media/Automatically Add to iTunes
</snippet></ROW><ROW><id>15590268</id><snippet>cd /Users/&lt;your_username&gt;/Music/iTunes/iTunes\ Media/Automatically\ Add\ to\ iTunes</snippet></ROW><ROW><id>15590268</id><snippet>import commands
commands.getoutput("cp file.mp3 /Users/&lt;your_username&gt;/Music/iTunes/iTunes Media/Automatically Add to iTunes")
</snippet></ROW><ROW><id>15590320</id><snippet>QTabBar::tab</snippet></ROW><ROW><id>15590320</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtGui, QtCore

class MyWindow(QtGui.QTabWidget):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

        self.setStyleSheet("""
            QTabBar::tab {
                color: #FF0000;
            }
        """)

        for tabNumber in range(3):
            widget = QtGui.QLabel(self)
            widget.setText("This is widget #{0}".format(tabNumber))

            self.addTab(widget, "Tab {0}".format(tabNumber))

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>15590384</id><snippet>nltk.pos_tag()</snippet></ROW><ROW><id>15590384</id><snippet>nltk.tag._POS_TAGGER</snippet></ROW><ROW><id>15590384</id><snippet>nltk.tag._POS_TAGGER
&gt;&gt;&gt; 'taggers/maxent_treebank_pos_tagger/english.pickle' 
</snippet></ROW><ROW><id>15590384</id><snippet>def get_wordnet_pos(treebank_tag):

    if treebank_tag.startswith('J'):
        return wordnet.ADJ
    elif treebank_tag.startswith('V'):
        return wordnet.VERB
    elif treebank_tag.startswith('N'):
        return wordnet.NOUN
    elif treebank_tag.startswith('R'):
        return wordnet.ADV
    else
        return ''
</snippet></ROW><ROW><id>15590384</id><snippet>lemmatizer.lemmatize('going', wordnet.VERB)
&gt;&gt;&gt; 'go'
</snippet></ROW><ROW><id>15590665</id><snippet>sys.exceptHook</snippet></ROW><ROW><id>15590665</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

import cStringIO, traceback

from PyQt4 import QtGui, QtCore

errorNotice = """
An unhandled exception occurred. Details will be reported
via an automatic email.
"""

class MyMessageBox(QtGui.QMessageBox):
    def __init__(self, *args, **kwargs):            
        super(MyMessageBox, self).__init__(*args, **kwargs)
        self.tracebackInfoStream = cStringIO.StringIO()

        self.setIcon(QtGui.QMessageBox.Critical)
        self.finished.connect(self.on_finished)

    def getTraceback(self, exceptionTraceback):
        traceback.print_tb(
            exceptionTraceback,
            None,
            self.tracebackInfoStream
        )

        self.tracebackInfoStream.seek(0)

        return self.tracebackInfoStream.read()

    def exceptHook(self, exceptionType, exceptionValue, exceptionTraceback):   
        tracebackInfo = self.getTraceback(exceptionTraceback)

        self.setDetailedText(tracebackInfo)
        self.setText(errorNotice)
        self.exec_()

    @QtCore.pyqtSlot()
    def on_finished(self):  
        QtGui.QApplication.quit()

class MyWindow(QtGui.QWidget):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

        self.pushButtonError = QtGui.QPushButton(self)
        self.pushButtonError.setText("Raise an Error!")
        self.pushButtonError.clicked.connect(self.on_pushButtonError_clicked)

        self.layoutVertical = QtGui.QVBoxLayout(self)
        self.layoutVertical.addWidget(self.pushButtonError)

    @QtCore.pyqtSlot()
    def on_pushButtonError_clicked(self):
        raise UserWarning("This is an error")

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    myMessageBox = MyMessageBox()

    sys.excepthook = myMessageBox.exceptHook

    main = MyWindow()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>15590773</id><snippet>path</snippet></ROW><ROW><id>15590773</id><snippet>match</snippet></ROW><ROW><id>15590773</id><snippet>recursive</snippet></ROW><ROW><id>15590773</id><snippet>FilePathField</snippet></ROW><ROW><id>15590773</id><snippet>from django.forms.fields import FilePathField
a = FilePathField(path='/path')
print a.choices
</snippet></ROW><ROW><id>15590834</id><snippet>after</snippet></ROW><ROW><id>15590834</id><snippet>tk.after</snippet></ROW><ROW><id>15590834</id><snippet>watch_clipboard</snippet></ROW><ROW><id>15590834</id><snippet>class GUI:
    def __init__(self):
        self.tk = Tk()
        self.tk.resizable(0, 0)
        self.tk.title('watch clipboard')
        self.last_content = ''
        self.tk.after(100, self.watch_clipboard)
        self.tk.mainloop()
    def watch_clipboard(self):
        try:
            content = self.tk.clipboard_get()
            if content != self.last_content and content.startswith('http:'):
                self.last_content = content
                self.tk.clipboard_clear()
                messagebox.askokcancel('', 'add this in?', default='ok')
        except TclError:
            pass
        self.tk.after(100, self.watch_clipboard)
</snippet></ROW><ROW><id>15591007</id><snippet>.bash_profile</snippet></ROW><ROW><id>15591007</id><snippet>export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
</snippet></ROW><ROW><id>15591007</id><snippet>source ~/.bash_profile
</snippet></ROW><ROW><id>15591007</id><snippet>ipython</snippet></ROW><ROW><id>15591007</id><snippet>ipython notebook
</snippet></ROW><ROW><id>15591134</id><snippet>Python2.7 &lt;script&gt;</snippet></ROW><ROW><id>15591134</id><snippet>python2.7 -m easy_install twisted</snippet></ROW><ROW><id>15591134</id><snippet>easy_install</snippet></ROW><ROW><id>15591134</id><snippet>Python 2.7</snippet></ROW><ROW><id>15591327</id><snippet>&gt;&gt;&gt; [i for i,x in enumerate(stuff) if x == "baz"]
[2]
</snippet></ROW><ROW><id>15591327</id><snippet>&gt;&gt;&gt; gen = (i for i,x in enumerate(stuff) if x == "baz")
&gt;&gt;&gt; list(gen)
[2]
</snippet></ROW><ROW><id>15591335</id><snippet>relx, rely = ev.pos[x] - mx, ev.pos[y] - my
number = rely//boxsize*numboxsx + relx//boxsize
</snippet></ROW><ROW><id>15591394</id><snippet>cython-cmake-example</snippet></ROW><ROW><id>15591394</id><snippet>UseCython.cmake</snippet></ROW><ROW><id>15591394</id><snippet>cython_add_module()</snippet></ROW><ROW><id>15591394</id><snippet>DYNAMIC_LOOKUP</snippet></ROW><ROW><id>15591394</id><snippet>function( cython_add_module _name _dynamic_lookup )
  set( pyx_module_sources "" )
  set( other_module_sources "" )
  foreach( _file ${ARGN} )
    if( ${_file} MATCHES ".*\\.py[x]?$" )
      list( APPEND pyx_module_sources ${_file} )
    else()
      list( APPEND other_module_sources ${_file} )
    endif()
  endforeach()
  compile_pyx( ${_name} generated_file ${pyx_module_sources} )
  include_directories( ${PYTHON_INCLUDE_DIRS} )
  python_add_module( ${_name} ${generated_file} ${other_module_sources} )
  ### Added here ##
  if( ${_dynamic_lookup} )
    message( STATUS "Not linking target ${_name} against libpython" )
    set_target_properties( ${_name} PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
  else()
    target_link_libraries( ${_name} ${PYTHON_LIBRARIES} )
  endif()
endfunction()
</snippet></ROW><ROW><id>15591394</id><snippet>cython_add_module</snippet></ROW><ROW><id>15591542</id><snippet>create database contacts;
create user contacts identified by 'contacts';
grant all on contacts.* to 'contacts'@'%';
grant select on `mysql`.`proc` to 'contacts'@'%';
use contacts;
</snippet></ROW><ROW><id>15591545</id><snippet>try-except</snippet></ROW><ROW><id>15591545</id><snippet>def get_currency(msg):
    curr = input(msg)
    try:
        float(curr)
        print('You must enter text. Numerical values are not accepted at this stage')
        return get_currency(msg)  #ask for input again
    except:
        return curr               #valid input, return the currency name

curr1=get_currency('Please enter the currency you would like to convert:')
curr2=get_currency('Please enter the currency you would like to convert into:')
ExRate = float(input('Please enter the exchange rate in the order of, 1 '+curr1+' = '+curr2)) 
Amount = float(input('Please enter the amount you would like to convert:'))
print (Amount*ExRate)
</snippet></ROW><ROW><id>15591545</id><snippet>$ python3 foo.py

Please enter the currency you would like to convert:123
You must enter text. Numerical values are not accepted at this stage
Please enter the currency you would like to convert:rupee
Please enter the currency you would like to convert into:100
You must enter text. Numerical values are not accepted at this stage
Please enter the currency you would like to convert into:dollar
Please enter the exchange rate in the order of, 1 rupee = dollar 50
Please enter the amount you would like to convert: 10
500.0
</snippet></ROW><ROW><id>15591656</id><snippet>session['nickname']</snippet></ROW><ROW><id>15591656</id><snippet>session['nickname'] = nickname</snippet></ROW><ROW><id>15591656</id><snippet>if 'user' in session:
       User=session['user']
       print User # Prints User

if 'nickname' in session:
       Nickname=session['nickname']
       print Nickname # Prints nickname
</snippet></ROW><ROW><id>15591656</id><snippet>@app.route('/login', methods=['POST'])
def login():
    """ Authenticate User """
    username = request.form['username'].strip()
    nickname = request.form['nickname'].strip()
    password = request.form['password']
    try:
        if Auth().VerifyLogin(username,password):
            session['username'] = username
            session['nickname'] = nickname
        else:
            # failed to login, do something.
    except Exception,e:
        app.logger.critical('.....')
</snippet></ROW><ROW><id>15591801</id><snippet>import MySQLdb
db = MySQLdb.connect(host="localhost", user="stackoverflow", passwd="", db="stackoverflow")
cursor = db.cursor()
try:
    sql = 'create table if not exists anzahlids( tweetid int ) ; '
except:
    #ignore
    pass

sql = ("""INSERT INTO anzahlids (tweetid) VALUES (%s)""")
data = [1,2,3,4,5,6,7,8,9]
length = [len(data)]
cursor.executemany(sql,length)
db.commit()
</snippet></ROW><ROW><id>15591801</id><snippet>sql = ("""INSERT INTO anzahlids (tweetid) VALUES (%s)""") % len(idset)
cursor.execute(sql)
db.commit()
</snippet></ROW><ROW><id>15592044</id><snippet>writeln('Enter the code which contains 11 digits:');
readln(C);

nr1:=...
nr2:=...
</snippet></ROW><ROW><id>15592044</id><snippet>nr1:= C[1];
nr2:= C[2];
...
</snippet></ROW><ROW><id>15592044</id><snippet>uses sysutils;
var  C:string
     nr1, nr2, nr3, nr4, nr5, nr6, nr7, nr8, nr9, nr10, nr11: integer;

begin
readln(C);
nr1:=strtoint(C[1]);
nr2:=strtoint(C[2]);
nr3:=strtoint(C[3]);
.
.
.
if nr11 = (nr1*1 + nr2*2 + nr3*3 + nr4*4 + nr5*5 + nr6*6 + nr7*7 + nr8*8 + nr9*9 + nr10*1) mod 11 then
   writeln('The code is correct!') 
   //if you skip the begin/end statements, only the next statement 
   //is executed in loops/if statements
else writeln('Not correct'); //notice that I didn't use ELSE IF but ELSE
readln; 
//in Pascal you can skip the parathenses if you don't pass arguments to the function
end.
</snippet></ROW><ROW><id>15592330</id><snippet>if i not in combos:</snippet></ROW><ROW><id>15592330</id><snippet>set</snippet></ROW><ROW><id>15592330</id><snippet>&gt;&gt;&gt; from itertools import permutations
&gt;&gt;&gt; x = ["$5", "$10", "$10", "TAX", "$5", "20%", "BOGO", "BOGO", "TAX", "BOGO"]
&gt;&gt;&gt; %time p = set(permutations(x, 9))
CPU times: user 0.88 s, sys: 0.01 s, total: 0.90 s
Wall time: 0.90 s
&gt;&gt;&gt; len(p)
75600
</snippet></ROW><ROW><id>15592643</id><snippet>socket.settimeout</snippet></ROW><ROW><id>15592643</id><snippet>urllib2</snippet></ROW><ROW><id>15592643</id><snippet>socket.send</snippet></ROW><ROW><id>15592643</id><snippet>socket.recv</snippet></ROW><ROW><id>15592643</id><snippet>urllib2</snippet></ROW><ROW><id>15592643</id><snippet>send</snippet></ROW><ROW><id>15592643</id><snippet>socket.settimeout</snippet></ROW><ROW><id>15592643</id><snippet>setsockopt</snippet></ROW><ROW><id>15592643</id><snippet>SO_RCVTIMEO</snippet></ROW><ROW><id>15592643</id><snippet>SO_SNDTIMEO</snippet></ROW><ROW><id>15592643</id><snippet>socket.settimeout</snippet></ROW><ROW><id>15592643</id><snippet>Requests</snippet></ROW><ROW><id>15592643</id><snippet>urllib2</snippet></ROW><ROW><id>15592643</id><snippet>recv</snippet></ROW><ROW><id>15592643</id><snippet>import socket
import time

listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
listener.bind(("localhost", 12346))
listener.listen(1)
sock,_ = listener.accept()

interval = 0.5
while 1:
  interval += 1 # increase interval by 1 second
  time.sleep(interval)
  # Get 1MB but will be really limited by the buffer
  data = sock.recv(1000000)
  print interval, len(data)
  if not data:
    break
</snippet></ROW><ROW><id>15592643</id><snippet>import requests

data = "x"*100000000 # 100MB beefy chunk
requests.post("http://localhost:12346", data=data, timeout=4)
</snippet></ROW><ROW><id>15592643</id><snippet>import urllib2

data = "x"*100000000 # 100MB beefy chunk
urllib2.urlopen("http://localhost:12346", data=data, timeout=4)
</snippet></ROW><ROW><id>15592643</id><snippet>&gt; 1.5 522832
&gt; 2.5 645816
&gt; 3.5 646180
&gt; 4.5 637832 &lt;--- Here the client dies (4.5 seconds without data transfer)
&gt; 5.5 294444
&gt; 6.5 0
</snippet></ROW><ROW><id>15592643</id><snippet># urllib2
URLError: timeout('timed out',)

# Requests
Timeout: TimeoutError("HTTPConnectionPool(host='localhost', port=12346): Request timed out. (timeout=4)",)
</snippet></ROW><ROW><id>15592643</id><snippet>urllib2</snippet></ROW><ROW><id>15592643</id><snippet>socket.setdefaulttimeout</snippet></ROW><ROW><id>15592643</id><snippet>Requests</snippet></ROW><ROW><id>15592643</id><snippet>OSX 10.8.3
Python 2.7.2
Requests 1.1.0
</snippet></ROW><ROW><id>15592800</id><snippet>if ('g' and 'd') in line: 
</snippet></ROW><ROW><id>15592800</id><snippet>if 'd' in line:
</snippet></ROW><ROW><id>15592800</id><snippet>&gt;&gt;&gt; 'g' and 'd'
'd'
</snippet></ROW><ROW><id>15592800</id><snippet>if 'g' in line and 'd' in line:
</snippet></ROW><ROW><id>15592800</id><snippet>if all(char in line for char in 'gde'):
</snippet></ROW><ROW><id>15592819</id><snippet>bencode</snippet></ROW><ROW><id>15592905</id><snippet>var tagbs = {{ tags|safe }};
</snippet></ROW><ROW><id>15592905</id><snippet>tagbs</snippet></ROW><ROW><id>15592905</id><snippet>var tagbs = {{ tags|safe }};
alert(tagbs[0].fields.ParentVideoFile);
</snippet></ROW><ROW><id>15593004</id><snippet>print('&lt;a href="http://www.example.com"&gt;example text&lt;/a&gt;')</snippet></ROW><ROW><id>15593071</id><snippet>def get_int(prompt, error_msg):
    while True:
        try:
            return int(input(prompt))
        except ValueError:
            print(error_msg)


rate = get_int(
    'Please enter the exchange rate in the order of, 1 {} = {}'
        .format(Currency1, Currency2),
    error_msg="Rate must be an integer")
amount = get_int(
    'Please enter the amount you would like to convert:',
    error_msg="Amount must be an integer")
</snippet></ROW><ROW><id>15593089</id><snippet>defence</snippet></ROW><ROW><id>15593089</id><snippet>class Hero():
    """docstring for Hero"""
    def __init__(self, hp, mp, strength, defence, level, armour):
        self.hp = hp 
        self.mp = mp 
        self.strength = strength
        self.level = level
        self.armour = armour

    @property
    def defence(self):
        return 3.14159 * self.level * self.armour
</snippet></ROW><ROW><id>15593089</id><snippet>knight.defence</snippet></ROW><ROW><id>15593148</id><snippet>bookday = form.cleaned_data['day']
</snippet></ROW><ROW><id>15593148</id><snippet>bookday = date(form.day) #WRONG CODE
</snippet></ROW><ROW><id>15593495</id><snippet>def square_sum_difference(n):
    return int((3*n**2 + 2*n) * (1 - n**2) / 12)
</snippet></ROW><ROW><id>15593495</id><snippet>def square_sum_difference(n):
    return int(n*(n+1)*(2*n+1)/6 - (n*(n+1)/2)**2)
</snippet></ROW><ROW><id>15593495</id><snippet>n*(n+1)*(2*n+1)/6</snippet></ROW><ROW><id>15593495</id><snippet>n</snippet></ROW><ROW><id>15593495</id><snippet>(n*(n+1)/2))**2</snippet></ROW><ROW><id>15593495</id><snippet>n</snippet></ROW><ROW><id>15593495</id><snippet>sum</snippet></ROW><ROW><id>15593495</id><snippet>def sum_square_difference(n):
    r = range(1, n+1)  # first n natural numbers
    return sum(i**2 for i in r) - sum(r)**2
</snippet></ROW><ROW><id>15593495</id><snippet>range(1, n+1)</snippet></ROW><ROW><id>15593495</id><snippet>n</snippet></ROW><ROW><id>15593495</id><snippet>&gt;&gt;&gt; list(range(1, 4+1))
[1, 2, 3, 4]
</snippet></ROW><ROW><id>15593495</id><snippet>sum(i**2 for i in r)</snippet></ROW><ROW><id>15593495</id><snippet>sum(r)**2</snippet></ROW><ROW><id>15593519</id><snippet>from __future__ import division
import numpy as np
import matplotlib.pyplot as plt

U = np.random.rand(10, 10, 10) - 0.5
V = np.random.rand(10, 10, 10) - 0.5
cmap = plt.cm.jet
time_samples = U.shape[-1]
for t in xrange(time_samples):
    plt.quiver(U[..., t], V[..., t], color=cmap(j/time_samples))
plt.show()
</snippet></ROW><ROW><id>15593539</id><snippet>-t -t</snippet></ROW><ROW><id>15593712</id><snippet>'include_html': True</snippet></ROW><ROW><id>15593712</id><snippet>'handlers': {
    'mail_admins': {
        'level': 'ERROR',
        'filters': ['require_debug_false',],
        'class': 'django.utils.log.AdminEmailHandler',
        'include_html': True
    }
}
</snippet></ROW><ROW><id>15593712</id><snippet>django.utils.log.AdminEmailHandler</snippet></ROW><ROW><id>15593712</id><snippet>django.views.debug.ExceptionReporter</snippet></ROW><ROW><id>15593733</id><snippet>import numpy as np
a = np.array([[1,2,4],[4,5,6]])
item = 4
row_indices, col_indices = np.where(a == item)
</snippet></ROW><ROW><id>15593773</id><snippet>or</snippet></ROW><ROW><id>15593773</id><snippet>alpha = ['a','b','c','d','e','f',
     'g','h','i','j','k','l',
     'm','n','o','p','q','r',
     's','t','u','v','w','x',
     'y','z']

shift = range(26)

def user_info():
    info = input("\nPress 'e' to encrypt or 'd' to decrypt: ").lower()
    if info in ('e', 'd'): # 'or' does not work how you think it does
        return info

def user_message():
    code = input("What is your message?: ")
    return code

def user_shift():
     while True:
         shift = int(input("What is your shift number?: "))
         if shift == int(shift):
             return shift

def True_Message(info, code, shift):

    if info[0] == 'd':     #This encrypts the code 
         shift = -shift    

    for letter in code:
        if letter in alpha:
            alpha_2 = ord(letter) + shift
            secret_message = ""
    if alpha_2 in range (0, len(alpha)):
        final_mix = chr(alpha)
        secret_message += final_mix

    return secret_message
</snippet></ROW><ROW><id>15594097</id><snippet>def hook(r, **kwargs):
    # ...
</snippet></ROW><ROW><id>15594226</id><snippet>.lower()</snippet></ROW><ROW><id>15594226</id><snippet>CURRENCY = {
    '¥': 'JPY', 'yen': 'JPY', 'jpy': 'JPY',
    '€': 'EUR', 'euro': 'EUR', 'eur': 'EUR',
    '$': 'USD', 'dollar': 'USD', 'usd': 'USD',
    '£': 'GBP', 'pound': 'GBP', 'gbp': 'GBP',
}

def read_currency(prompt):
    """Prompt the user to enter a currency.

    Returns a currency code.
    """
    while True:
        x = input(prompt)
        try:
            return CURRENCY[x.lower()]
        except KeyError:
            print('Unknown currency: {!r}'.format(x))
</snippet></ROW><ROW><id>15594226</id><snippet>from decimal import Decimal
RATES = { 
    'JPY': Decimal("0.010589"),
    'EUR': Decimal("1.2983"),
    'GBP': Decimal("1.5228"),
    'USD': Decimal("1.0000"),
}
def conversion_rate(cur1, cur2):
    """Get the conversion rate from currency 1 to currency 2."""
    return RATES[cur1] / RATES[cur2]
</snippet></ROW><ROW><id>15594226</id><snippet>amount = Decimal(input('Enter amount: '))
currency1 = read_currency('Enter source currency: ')
currency2 = read_currency('Enter target currency: ')
rate = conversion_rate(currency1, currency2)
print('{} {} is equal to {} {}'
      .format(currency1, amount, currency2, amount * rate))
</snippet></ROW><ROW><id>15594396</id><snippet>&gt;&gt;&gt; from string import punctuation
&gt;&gt;&gt; word = "-scary!"
&gt;&gt;&gt; word.strip(punctuation)
'scary'
</snippet></ROW><ROW><id>15594396</id><snippet>lstrip</snippet></ROW><ROW><id>15594396</id><snippet>rstrip</snippet></ROW><ROW><id>15594441</id><snippet>n/d == q</snippet></ROW><ROW><id>15594441</id><snippet>n % d == r</snippet></ROW><ROW><id>15594441</id><snippet>n</snippet></ROW><ROW><id>15594441</id><snippet>q</snippet></ROW><ROW><id>15594441</id><snippet>r</snippet></ROW><ROW><id>15594441</id><snippet>d</snippet></ROW><ROW><id>15594480</id><snippet>sorted(['a','2%20q'], key=lambda x: 0 if x == '2%20q' else 1)</snippet></ROW><ROW><id>15594836</id><snippet>import os.path
import glob
import re
import itertools
from collections import namedtuple, deque
from operator import attrgetter

R_PREFIX_VALUE = re.compile(r'^(?P&lt;prefix&gt;[A-Z]+)(?P&lt;suffix&gt;\d+)\s+(?P&lt;value&gt;\d+)\s*$')

getvalue  = attrgetter('value')

def interleave(seq, val):
    return itertools.chain.from_iterable(itertools.izip(seq, itertools.repeat(val)))

class Fileline(namedtuple('Fileline', 'filename prefix suffix value')):
    @classmethod
    def _fromstr(cls, s, filename=None, rematch=R_PREFIX_VALUE.match):
        m = rematch(s)
        if not m:
            raise ValueError('No valid line found in %r' % s)
        d = m.groupdict()
        d['value'] = int(d['value'])
        d['filename'] = filename
        return cls(**d)

    def _asstr(self):
        return '{}{} {}'.format(self.prefix, self.suffix, self.value)

def max_value_with_prefix(lineseq, prefix, getvalue=getvalue):
    withprefix = (line for line in lineseq if line.prefix==prefix)
    return max_value(withprefix)

def filter_lt_line(lineseq, maxline):
    for line in lineseq:
        if line.prefix != maxline.prefix or line.value &gt;= maxline.value:
            yield line

def extreme_value(fn, lineseq, getvalue=getvalue):
    try:
        return fn((l for l in lineseq if l is not None), key=getvalue)
    except ValueError:
        return None

def max_value(lineseq):
    return extreme_value(max, lineseq)

def min_value(lineseq):
    return extreme_value(min, lineseq)

def read_lines(fn, maker=Fileline._fromstr):
    with open(fn, 'rb') as f:
        return deque(maker(l, fn) for l in f)

def write_file(fn, lineseq):
    lines = (l._asstr() for l in lineseq)
    newlines = interleave(lines, '\n')
    with open(fn, 'wb') as f:
        f.writelines(newlines)

def write_output_file(fn, lineseq):
    lines = ("{} {}".format(l.filename, l.value) for l in lineseq)
    newlines = interleave(lines, "\n")
    with open(fn, 'wb') as f:
        f.writelines(newlines)

def filter_max_returning_min(fn, prefix):
    lineseq = read_lines(fn)
    maxvalue = max_value_with_prefix(lineseq, prefix)
    filteredlineseq = deque(filter_lt_line(lineseq, maxvalue))
    write_file(fn, filteredlineseq)
    minline = min_value(filteredlineseq)
    return minline

def main(fileglob, prefix, outputfile):
    minlines = []
    for fn in glob.iglob(fileglob):
        minlines.append(filter_max_returning_min(fn, prefix))
    write_output_file(outputfile, minlines)
</snippet></ROW><ROW><id>15594836</id><snippet>main()</snippet></ROW><ROW><id>15594836</id><snippet>main('txtdir', 'ENSG', 'output.txt')</snippet></ROW><ROW><id>15594836</id><snippet>filter_max_returning_min()</snippet></ROW><ROW><id>15594836</id><snippet>def _worker(args):
    return filter_max_returning_min(*args)

def multi_main(fileglob, prefix, outputfile, processes):
    from multiprocessing import Pool
    pool = Pool(processes=processes)
    workerargs = ((fn, prefix) for fn in glob.iglob(fileglob))
    minlines = pool.imap_unordered(_worker, workerargs, processes)
    write_file(outputfile, minlines)
</snippet></ROW><ROW><id>15594836</id><snippet>def _argparse():
    import argparse

    def positive_int(s):
        v = int(s)
        if v &lt; 1:
            raise argparse.ArgumentTypeError('{:r} must be a positive integer'.format(s))
        return v

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="""Filter text files and write min value.

    Performs these operations on the text files in supplied `filedir`:

    1. In each file, identify lines starting with the matching `maxprefix`
       which do *not* contain the maximum value for that prefix in that file.
    2. DESTRUCTIVELY REWRITE each file with lines found in step 1 removed!
    3. Write the minimum value (for all lines in all files) to `outputfile`.
    """)
    parser.add_argument('filedir',
        help="Directory containg the text files to process. WILL REWRITE FILES!")
    parser.add_argument('maxprefix', nargs="?", default="ENSG", 
        help="Line prefix which should have values less than max value removed in each file")
    parser.add_argument('outputfile', nargs="?", default="output.txt",
        help="File in which to write min value found. WILL REWRITE FILES!")
    parser.add_argument('-p', '--parallel', metavar="N", nargs="?", type=positive_int, const=10,
        help="Process files in parallel, with N workers. Default is to process a file at a time.")
    return parser.parse_args()

if __name__ == '__main__':
    args = _argparse()
    fileglob = os.path.join(args.filedir, '*.txt')
    prefix = args.maxprefix
    outputfile = args.outputfile
    if args.parallel:
        multi_main(fileglob, prefix, outputfile, args.parallel)
    else:
        main(fileglob, prefix, outputfile)
</snippet></ROW><ROW><id>15594836</id><snippet>$ python ENSG.py txtdir ENSCAFG --parallel=4
</snippet></ROW><ROW><id>15594897</id><snippet>a = a + 1</snippet></ROW><ROW><id>15594897</id><snippet>a[0] = a[0] + 1</snippet></ROW><ROW><id>15594897</id><snippet>f</snippet></ROW><ROW><id>15594897</id><snippet>a</snippet></ROW><ROW><id>15594897</id><snippet>a</snippet></ROW><ROW><id>15594897</id><snippet>global a</snippet></ROW><ROW><id>15594897</id><snippet>a + 1</snippet></ROW><ROW><id>15594897</id><snippet>a</snippet></ROW><ROW><id>15594897</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>15594897</id><snippet>f</snippet></ROW><ROW><id>15594897</id><snippet>a</snippet></ROW><ROW><id>15594897</id><snippet>a</snippet></ROW><ROW><id>15594897</id><snippet>NameError</snippet></ROW><ROW><id>15594911</id><snippet>def num_palindromes(start, end):
    count = 0
    for i in range(start, end + 1):
        if str(i) == str(i)[::-1]:
            count += 1
    return count
</snippet></ROW><ROW><id>15594911</id><snippet>def num_palindromes(start, end):
    return sum(str(i) == str(i)[::-1] for i in range(start, end + 1))
</snippet></ROW><ROW><id>15594928</id><snippet>f = open( ... )

f.seek(last_pos)

line = f.readline()  # no 's' at the end of `readline()`

last_pos = f.tell()

f.close()
</snippet></ROW><ROW><id>15594928</id><snippet>last_pos</snippet></ROW><ROW><id>15595005</id><snippet>break</snippet></ROW><ROW><id>15595005</id><snippet>for</snippet></ROW><ROW><id>15595005</id><snippet>while</snippet></ROW><ROW><id>15595005</id><snippet>e = Pd - (P1 + P2 + P3)
</snippet></ROW><ROW><id>15595005</id><snippet>if (P1 + P2 + P3) &lt; Pd:
</snippet></ROW><ROW><id>15595039</id><snippet>{{ p }}</snippet></ROW><ROW><id>15595039</id><snippet>Photo</snippet></ROW><ROW><id>15595039</id><snippet>&lt;__main__.Photo object at 0xfcbd9ef0&gt;</snippet></ROW><ROW><id>15595112</id><snippet>class Car(models.Model):

    # everything that has to do _only_ with a car

class CarDescription(models.Model):

    car = models.ForeignKey(Car) # each description can belong to only one car
    length = models.IntegerField(max_length=10)
    # other fields that have only to do with a description

    def __unicode__(self):
        return unicode("description of the car no %d" % (self.car.pk))
</snippet></ROW><ROW><id>15595113</id><snippet>&gt;&gt;&gt; dd = {'a': 20, 'c': 60, 'b': 10}
&gt;&gt;&gt; keys = [i for i in dd]
&gt;&gt;&gt; [(keys[i],keys[j]) for i in range(len(keys)) for j in range(i+1,len(keys))]
[('a', 'c'), ('a', 'b'), ('c', 'b')]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15595113</id><snippet>dict</snippet></ROW><ROW><id>15595283</id><snippet>class BlobKey(db.Model) :
    blob_key = db.StringProperty()
</snippet></ROW><ROW><id>15595283</id><snippet>blob_key = BlobKey.all().get()
blob = blobstore.get(blob_key)
if blob : blob.delete()
db.delete( blob_key )    # you don't need it anymore

file_name = files.blobstore.create( mime_type = 'text/csv')
with files.open(file_name, 'a') as f:
    f.write( your_content )

files.finalize(file_name)
blob_key = files.blobstore.get_blob_key(file_name)

BlobKey( blob_key = str(blob_key) ).put()   # save the new key
</snippet></ROW><ROW><id>15595283</id><snippet>BlobstoreDownloadHandler</snippet></ROW><ROW><id>15595283</id><snippet>blob_key = BlobKey.all().get()
if blobstore.get(blob_key):
    self.send_blob(blobstore.BlobInfo.get(blob_key),
        content_type = 'text/csv', save_as=True)    # False to mangle file name
else:
    self.error(404)
</snippet></ROW><ROW><id>15595358</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = r'Downstream line rate: (\d\d*) kbps&lt;br /&gt;'
&gt;&gt;&gt; re.search(regex, "Downstream line rate: 6736 kbps&lt;br /&gt;").group(1)
'6736'
</snippet></ROW><ROW><id>15595358</id><snippet>r'Downstream.*(\d\d*)'</snippet></ROW><ROW><id>15595447</id><snippet>value = 0
def default():
    global value
    value = 1
</snippet></ROW><ROW><id>15595447</id><snippet>import globals
def main():
    globals.default()
    print globals.value

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>15595639</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>15595639</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; with open("file.txt", 'r') as f:
        data = ast.literal_eval(f.read())
&gt;&gt;&gt; # You're done!
</snippet></ROW><ROW><id>15595729</id><snippet>punch.voters.filter(pk=request.user.pk)
</snippet></ROW><ROW><id>15595729</id><snippet>filter</snippet></ROW><ROW><id>15595729</id><snippet>try-expect</snippet></ROW><ROW><id>15595729</id><snippet>get</snippet></ROW><ROW><id>15596150</id><snippet>import json
json.loads(page_detail_string)
</snippet></ROW><ROW><id>15596366</id><snippet>"après"</snippet></ROW><ROW><id>15596366</id><snippet>u"apr\u00e8s".encode("utf-8")</snippet></ROW><ROW><id>15596366</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>15596366</id><snippet>u"après"</snippet></ROW><ROW><id>15596366</id><snippet>"après"</snippet></ROW><ROW><id>15596366</id><snippet>u"après".encode("utf-8")</snippet></ROW><ROW><id>15596435</id><snippet>&gt;&gt;&gt; import scipy.io.wavfile
&gt;&gt;&gt; rate, data = scipy.io.wavfile.read('Happy Tree Friends.wav')
&gt;&gt;&gt; rate
8000
&gt;&gt;&gt; data
array([ 5, -5,  5, ...,  0, -1,  0], dtype=int16)
&gt;&gt;&gt; data_bis = np.fft.ifft(np.fft.fft(data))
&gt;&gt;&gt; data_bis
array([  5.00000000e+00 -1.55406753e-11j,
        -5.00000000e+00 +1.95349676e-11j,
         5.00000000e+00 +1.41131140e-11j, ...,
         8.06674092e-12 -7.58643463e-13j,
        -1.00000000e+00 -2.21611283e-12j,  -2.04999489e-11 +4.55890751e-12j])
&gt;&gt;&gt; data_bis.dtype
dtype('complex128')
</snippet></ROW><ROW><id>15596435</id><snippet>data</snippet></ROW><ROW><id>15596435</id><snippet>data_bis</snippet></ROW><ROW><id>15596435</id><snippet>&gt;&gt;&gt; scipy.io.wavfile.write('test.wav', rate, data_bis)
&gt;&gt;&gt; scipy.io.wavfile.read('test.wav')
TypeError: data type not understood
</snippet></ROW><ROW><id>15596435</id><snippet>dtype</snippet></ROW><ROW><id>15596435</id><snippet>&gt;&gt;&gt; scipy.io.wavfile.write('test.wav', rate, data_bis.astype(data.dtype))
__main__:1: ComplexWarning: Casting complex values to real discards the imaginary part
&gt;&gt;&gt; scipy.io.wavfile.read('test.wav')
(8000, array([ 4, -5,  4, ...,  0, -1,  0], dtype=int16))
</snippet></ROW><ROW><id>15596758</id><snippet>Sleep</snippet></ROW><ROW><id>15596758</id><snippet>set_timer</snippet></ROW><ROW><id>15596758</id><snippet>get_ticks</snippet></ROW><ROW><id>15596758</id><snippet>import pygame
from pygame.locals import *

def main():
    pygame.init()
    pygame.display.set_mode((480, 360))
    gamepad = pygame.joystick.Joystick(0)
    gamepad.init()

    delay = 1000
    neutral = True
    pressed = 0
    last_update = pygame.time.get_ticks()

    while True:
        for event in pygame.event.get():
            if event.type == QUIT:
                return

        move = False
        if gamepad.get_axis(1) == 0:
            neutral = True
            pressed = 0
        else:
            if neutral:
                move = True
                neutral = False
            else:
                pressed += pygame.time.get_ticks() - last_update
        if pressed &gt; delay:
            move = True
            pressed -= delay
        if move:
            print "move"
        last_update = pygame.time.get_ticks()

if __name__ == "__main__":
    main()
    pygame.quit()
</snippet></ROW><ROW><id>15596758</id><snippet>get_axis</snippet></ROW><ROW><id>15596853</id><snippet>from collections import Counter
[letter for letter,count in Counter("Thomas Jones").items() if count &gt; 1]
</snippet></ROW><ROW><id>15596949</id><snippet>for level in levels.values():
    newLevels = loadLinkedLevels(level, p.screen, levels.keys())

levels.update(newLevels)
</snippet></ROW><ROW><id>15596949</id><snippet>levels</snippet></ROW><ROW><id>15596949</id><snippet>newLevels</snippet></ROW><ROW><id>15596949</id><snippet>from collections import deque

def load_all_levels(root, p):
    """Load all levels reachable from `root`.
    Return a dictionary mapping level id to level.
    """
    # Queue of levels that have been loaded but whose neighbours have not.
    q = deque([root])
    # Map from level id to level for all levels loaded so far.
    loaded = {root.id: root}
    while q:
        for level_id in q.popleft().warps.values():
            if level_id not in loaded:
                level = LevelBuilder.loadLevel(level_id, p.screen)
                loaded[level_id] = level
                q.append(level)
    return loaded
</snippet></ROW><ROW><id>15596965</id><snippet>datetime.strptime</snippet></ROW><ROW><id>15596965</id><snippet>"%a, %d %b %Y %H:%M:%S %z"
</snippet></ROW><ROW><id>15596965</id><snippet>Python 3.3.0 (default, Mar 22 2013, 20:14:41) 
[GCC 4.2.1 Compatible FreeBSD Clang 3.1 ((branches/release_31 156863))] on freebsd9
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; s = 'Wed, 20 Mar 2013 05:39:25 +0000'
&gt;&gt;&gt; datetime.strptime(s, "%a, %d %b %Y %H:%M:%S %z")
datetime.datetime(2013, 3, 20, 5, 39, 25, tzinfo=datetime.timezone.utc)
</snippet></ROW><ROW><id>15596965</id><snippet>datetime</snippet></ROW><ROW><id>15596965</id><snippet>Python 2.7.3 (default, Jan 17 2013, 21:23:30) 
[GCC 4.2.1 Compatible FreeBSD Clang 3.0 (branches/release_30 142614)] on freebsd9
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; s = 'Wed, 20 Mar 2013 05:39:25 +0000'
&gt;&gt;&gt; datetime.strptime(s, "%a, %d %b %Y %H:%M:%S %z")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/lib/python2.7/_strptime.py", line 317, in _strptime
    (bad_directive, format))
ValueError: 'z' is a bad directive in format '%a, %d %b %Y %H:%M:%S %z'
</snippet></ROW><ROW><id>15596965</id><snippet>%z</snippet></ROW><ROW><id>15596965</id><snippet>/usr/local/lib/python2.7/_strptime.py</snippet></ROW><ROW><id>15596965</id><snippet>&gt;&gt;&gt; datetime.strptime(s[:-6], "%a, %d %b %Y %H:%M:%S")
datetime.datetime(2013, 3, 20, 5, 39, 25)
</snippet></ROW><ROW><id>15596965</id><snippet>split</snippet></ROW><ROW><id>15596965</id><snippet>join</snippet></ROW><ROW><id>15596965</id><snippet>&gt;&gt;&gt; datetime.strptime(' '.join(s.split()[:-1]), "%a, %d %b %Y %H:%M:%S")
datetime.datetime(2013, 3, 20, 5, 39, 25)
</snippet></ROW><ROW><id>15596965</id><snippet>tzinfo</snippet></ROW><ROW><id>15596965</id><snippet>FixedOffset</snippet></ROW><ROW><id>15596965</id><snippet>datetime.replace()</snippet></ROW><ROW><id>15596965</id><snippet>datetime</snippet></ROW><ROW><id>15597001</id><snippet>ctypes</snippet></ROW><ROW><id>15597001</id><snippet>struct</snippet></ROW><ROW><id>15597001</id><snippet># Setup test data based on incomplete sample
bytes = "\x16\x00\x00\x00\xdc\x5a\x9f\xd2\x31\x04\xca\x01\xba\x81\x89\x1a\x81\xe2\xcd\x01\xba\x81\x89\x1a\x81\xe2\xcd\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x24\x00\x52\x00\x65\x00\x63\x00\x79\x00\x63\x00\x6c\x00\x65\x00\x2e\x00\x42\x00\x69\x00\x6e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
bytes = bytes + "\x00"*(592-len(bytes))

import struct
import codecs

# typedef struct _WIN32_FIND_DATA {
#   DWORD    dwFileAttributes;
#   FILETIME ftCreationTime;
#   FILETIME ftLastAccessTime;
#   FILETIME ftLastWriteTime;
#   DWORD    nFileSizeHigh;
#   DWORD    nFileSizeLow;
#   DWORD    dwReserved0;
#   DWORD    dwReserved1;
#   TCHAR    cFileName[MAX_PATH];
#   TCHAR    cAlternateFileName[14];


fmt = "&lt;L3Q4L520s28s"

attrs, creation, access, write, sizeHigh, sizeLow, reserved0, reserved1, name, alternateName = struct.unpack(fmt, bytes)
name = codecs.utf_16_le_decode(name)[0].strip('\x00')
alternateName = codecs.utf_16_le_decode(alternateName)[0].strip('\x00')
print name
</snippet></ROW><ROW><id>15597409</id><snippet>filter</snippet></ROW><ROW><id>15597409</id><snippet>isnull</snippet></ROW><ROW><id>15597409</id><snippet>&gt;&gt;&gt; ModelA.objects.filter(slug__iexact="foo", modelb__isnull=True)
</snippet></ROW><ROW><id>15597569</id><snippet>BODY[0]</snippet></ROW><ROW><id>15597569</id><snippet>(BODY[1])</snippet></ROW><ROW><id>15597590</id><snippet>if shape in ("triangle", "Triangle")
</snippet></ROW><ROW><id>15597590</id><snippet>if shape.lower() == "triangle"
</snippet></ROW><ROW><id>15597592</id><snippet>profile['profile_picture_raw_path'],</snippet></ROW><ROW><id>15597592</id><snippet>profile['profile_picture_raw_path'], \
profile['profile_picture_thumbnail'], \
profile['profile_picture'] = self.picture_path(profile['profile_picture'])
</snippet></ROW><ROW><id>15597872</id><snippet>    for slovo in slova:
        if pygame.mouse.get_pressed()[0] and slovo["rect"].collidepoint(pygame.mouse.get_pos()):
            xy = 0
            for i in range (len(randRijec)):
                if slovo["name"] in randRijec[i]:
                    xy = 1
                    if i == 0:
                        slovo1 = randRijec[i].upper()
                        prvoSlovo = 1
                        break
                    if i == 1:
                        slovo2 = randRijec[i].upper()
                        drugoSlovo = 1
                        break
            slova.remove(slovo)
            if xy == 0:
                pogresnoBrojac += 1

    ...
    ...
    ...

    xy = 1
    pygame.display.update()
    time.tick(value)
</snippet></ROW><ROW><id>15597965</id><snippet>curl -s "https://api.vk.com/method/photos.getAlbums?uid=6015870&amp;access_token=0275127e915981fe795840165e532169482cbdfc4ca1dbd48619a687a65fead88c468cdafe9743e231c37" | python -m json.tool
</snippet></ROW><ROW><id>15597965</id><snippet>&amp;</snippet></ROW><ROW><id>15597965</id><snippet>curl -s https://api.vk.com/method/photos.getAlbums?uid=6015870</snippet></ROW><ROW><id>15597965</id><snippet>[4] 8822</snippet></ROW><ROW><id>15597965</id><snippet>access_token=0275127e915981fe795840165e532169482cbdfc4ca1dbd48619a687a65fead88c468cdafe9743e231c37 | python -m json.tool
</snippet></ROW><ROW><id>15597965</id><snippet>$ access_token=0275127e915981fe795840165e532169482cbdfc4ca1dbd48619a687a65fead88c468cdafe9743e231c37 | python -m json.tool
No JSON object could be decoded
</snippet></ROW><ROW><id>15597965</id><snippet>Narnia:~ vitaly$ {"response":[{"aid":"109967643","thumb_id":"163950716","owner_id":"6015870","title":"9 мая 2010","description":"","created":"1273613868","updated":"1273695901","size":7},{"aid":"95299056","thumb_id":"135702541","owner_id":"6015870","title":"Kemer 2009","description":"http:\/\/picasaweb.google.com.ua\/Ivanov.Vitalii\/Kemer2009","created":"1250355164","updated":"1250520619","size":72},{"aid":"43368938","thumb_id":"116630327","owner_id":"6015870","title":"Лето 2008 (Алупка)","description":"","created":"1220478168","updated":"1221348162","size":43},{"aid":"38630587","thumb_id":"116886016","owner_id":"6015870","title":"Flowers","description":"","created":"1217680400","updated":"1236774230","size":9},{"aid":"36658103","thumb_id":"163954451","owner_id":"6015870","title":"Моя ката","description":"","created":"1216419744","updated":"1273698620","size":8},{"aid":"23100962","thumb_id":"112723283","owner_id":"6015870","title":"Только пипл","description":"","created":"1208636545","updated":"1210382181","size":9},{"aid":"15473894","thumb_id":"114370266","owner_id":"6015870","title":"other","description":"","created":"1203516879","updated":"1327679223","size":29},{"aid":"15471241","thumb_id":"95266020","owner_id":"6015870","title":"Сам батя или чего нельзя в фотошопе =)","description":"","created":"1203516081","updated":"1203516728","size":4}]}
[4]   Done                    curl -s https://api.vk.com/method/photos.getAlbums?uid=6015870
</snippet></ROW><ROW><id>15597965</id><snippet>$ curl -s "https://api.vk.com/method/photos.getAlbums?uid=6015870&amp;access_token=0275127e915981fe795840165e532169482cbdfc4ca1dbd48619a687a65fead88c468cdafe9743e231c37" | python -m json.tool
{
    "error": {
        "error_code": 5, 
        "error_msg": "User authorization failed: access_token was given to another ip address.", 
        "request_params": [
            {
                "key": "oauth", 
                "value": "1"
            }, 
            {
                "key": "method", 
                "value": "photos.getAlbums"
            }, 
            {
                "key": "uid", 
                "value": "6015870"
            }, 
            {
                "key": "access_token", 
                "value": "0275127e915981fe795840165e532169482cbdfc4ca1dbd48619a687a65fead88c468cdafe9743e231c37"
            }
        ]
    }
}
</snippet></ROW><ROW><id>15598180</id><snippet>value = input("Enter a number 1 - 9 separted by commas: ")

def user_input(value):
    if isinstance(value, tuple):
        return list(value)
    else:
        user_list = value.split(',')
        numbers = [(x.strip()) for x in user_list]
        return numbers


unit_number = {0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 
           5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine'}

def convert_n_to_w(numbers):
    for n in numbers:
        print(unit_number[int(n)])

numbers = user_input(value)

convert_n_to_w(numbers)
</snippet></ROW><ROW><id>15598183</id><snippet>\t</snippet></ROW><ROW><id>15598183</id><snippet>test_file=open(r'c:\Python27\test.txt','r')
</snippet></ROW><ROW><id>15598183</id><snippet>test_file=open('c:\\Python27\\test.txt','r')
</snippet></ROW><ROW><id>15598183</id><snippet>test_file=open('c:/Python27/test.txt','r')
</snippet></ROW><ROW><id>15598318</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtGui, QtCore

class MyWindow(QtGui.QLabel):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

    def animate(self):
        animation = QtCore.QPropertyAnimation(self, "size", self)
        animation.setDuration(3333)
        animation.setStartValue(QtCore.QSize(self.width(), self.height()))
        animation.setEndValue(QtCore.QSize(333, 333))
        animation.start()

    def paintEvent(self, event):
        painter = QtGui.QPainter(self)
        painter.setBrush(QtGui.QBrush(QtCore.Qt.red))
        painter.drawEllipse(0, 0, self.width() - 1, self.height() - 1)
        painter.end()

    def sizeHint(self):
        return QtCore.QSize(111, 111)

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow()
    main.show()
    main.animate()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>15598381</id><snippet>__module__</snippet></ROW><ROW><id>15598381</id><snippet>clsmembers = [c for c in inspect.getmembers(sys.modules[__name__], inspect.isclass) if c[1].__module__ == __name__]
</snippet></ROW><ROW><id>15598381</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; import sys
&gt;&gt;&gt; class Foo(object): pass
... 
&gt;&gt;&gt; from json import *
&gt;&gt;&gt; inspect.getmembers(sys.modules[__name__], inspect.isclass)
[('Foo', &lt;class '__main__.Foo'&gt;), ('JSONDecoder', &lt;class 'json.decoder.JSONDecoder'&gt;), ('JSONEncoder', &lt;class 'json.encoder.JSONEncoder'&gt;)]
&gt;&gt;&gt; [c for c in inspect.getmembers(sys.modules[__name__], inspect.isclass) if c[1].__module__ == __name__]
[('Foo', &lt;class '__main__.Foo'&gt;)]
</snippet></ROW><ROW><id>15598396</id><snippet>QDialogButtonBox</snippet></ROW><ROW><id>15598396</id><snippet>...
auto buttons = new QDialogButtonBox( this );
buttons-&gt;addButton( "Import", QDialogButtonBox::AcceptRole );
buttons-&gt;addButton( "Cancel", QDialogButtonBox::RejectRole );
...
</snippet></ROW><ROW><id>15598396</id><snippet>ButtonRole</snippet></ROW><ROW><id>15598449</id><snippet>node2</snippet></ROW><ROW><id>15598449</id><snippet>node2</snippet></ROW><ROW><id>15598449</id><snippet>message.arrive()</snippet></ROW><ROW><id>15598449</id><snippet>node2</snippet></ROW><ROW><id>15598503</id><snippet>Model</snippet></ROW><ROW><id>15598928</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.arange(-10, 10, 0.1)
&gt;&gt;&gt; y = x**3
&gt;&gt;&gt; np.interp(5.05, x, y)
128.82549999999998
&gt;&gt;&gt; 5.05**3
128.787625
</snippet></ROW><ROW><id>15598928</id><snippet>scipy</snippet></ROW><ROW><id>15598928</id><snippet>&gt;&gt;&gt; import scipy.interpolate
&gt;&gt;&gt; f = scipy.interpolate.UnivariateSpline(x, y)
&gt;&gt;&gt; f
&lt;scipy.interpolate.fitpack2.LSQUnivariateSpline object at 0xa85708c&gt;
&gt;&gt;&gt; f(5.05)
array(128.78762500000025)
</snippet></ROW><ROW><id>15599033</id><snippet>from django import forms

class MyForm(forms.Form):
    my_field = forms.CharField(label='My label', widget=forms.Textarea)
</snippet></ROW><ROW><id>15599271</id><snippet>save</snippet></ROW><ROW><id>15599271</id><snippet>__init__</snippet></ROW><ROW><id>15599271</id><snippet>self.thread</snippet></ROW><ROW><id>15599466</id><snippet>customer1: [item1, item3, item8, ...]
customer2: [item7, item8, item74, ...]
</snippet></ROW><ROW><id>15599466</id><snippet>Create an N*N matrix, and initialize it to 0.
for each item
  Get the list of customers who bought the item (from your item-to-customer index).
  Create an empty dictionary of related items
  for each customer in that list
    for each item that the customer bought
      update the dictionary (add new item, or increase count)
    end for
  end for
  You now have a dictionary that contains the related items,
  and how many customers bought each one. You can update the matrix row
  for the current item from that dictionary.
end for
</snippet></ROW><ROW><id>15599468</id><snippet>python</snippet></ROW><ROW><id>15599468</id><snippet>python</snippet></ROW><ROW><id>15599468</id><snippet>$PATH</snippet></ROW><ROW><id>15599468</id><snippet>echo $PATH</snippet></ROW><ROW><id>15599468</id><snippet>which python</snippet></ROW><ROW><id>15599468</id><snippet>python</snippet></ROW><ROW><id>15599468</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>15599468</id><snippet>/usr/bin</snippet></ROW><ROW><id>15599468</id><snippet>python</snippet></ROW><ROW><id>15599468</id><snippet>python  -&gt; pythonX
pythonX -&gt; pythonX.Y
</snippet></ROW><ROW><id>15599468</id><snippet>python  -&gt; python2
python2 -&gt; python2.7
</snippet></ROW><ROW><id>15599468</id><snippet>python</snippet></ROW><ROW><id>15599468</id><snippet>ls -l $(which python)
</snippet></ROW><ROW><id>15599468</id><snippet>/usr/local/bin/python -&gt; python2
</snippet></ROW><ROW><id>15599468</id><snippet>ls -l $(which python2)
</snippet></ROW><ROW><id>15599468</id><snippet>/usr/local/bin/python2 -&gt; python2.7
</snippet></ROW><ROW><id>15599468</id><snippet>python</snippet></ROW><ROW><id>15599468</id><snippet>python3</snippet></ROW><ROW><id>15599468</id><snippet>$PATH</snippet></ROW><ROW><id>15599468</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>15599468</id><snippet>/usr/bin</snippet></ROW><ROW><id>15599468</id><snippet>python</snippet></ROW><ROW><id>15599468</id><snippet>-f</snippet></ROW><ROW><id>15599468</id><snippet>ln</snippet></ROW><ROW><id>15599468</id><snippet>python3</snippet></ROW><ROW><id>15599468</id><snippet>#!/bin/env python3</snippet></ROW><ROW><id>15599468</id><snippet>python</snippet></ROW><ROW><id>15599468</id><snippet>python3</snippet></ROW><ROW><id>15599468</id><snippet>alias python='/path/to/python3</snippet></ROW><ROW><id>15599468</id><snippet>yum</snippet></ROW><ROW><id>15599468</id><snippet>python</snippet></ROW><ROW><id>15599468</id><snippet>python</snippet></ROW><ROW><id>15599575</id><snippet>UserProfile</snippet></ROW><ROW><id>15599575</id><snippet>userprofile = UserProfile(form.username.data)
db.session.add(userprofile)
</snippet></ROW><ROW><id>15599575</id><snippet>add()</snippet></ROW><ROW><id>15599608</id><snippet>str</snippet></ROW><ROW><id>15599608</id><snippet>msvcrt.getch().decode('ASCII')
</snippet></ROW><ROW><id>15599608</id><snippet>msvcrt.getch()</snippet></ROW><ROW><id>15599608</id><snippet>msvcrt.getwch()</snippet></ROW><ROW><id>15599648</id><snippet>with open('somefile') as openfileobject:
    for line in openfileobject:
        do_something()
</snippet></ROW><ROW><id>15599648</id><snippet>raw_input()</snippet></ROW><ROW><id>15599648</id><snippet>import sys

for line in sys.stdin:
    do_something()
</snippet></ROW><ROW><id>15599648</id><snippet>from functools import partial

with open('somefile', 'rb') as openfileobject:
    for chunk in iter(partial(openfileobject.read, 1024), ''):
        do_something()
</snippet></ROW><ROW><id>15599760</id><snippet>re</snippet></ROW><ROW><id>15599760</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; [x.start() for x in re.finditer('foo', 'foo foo foo foo')]
[0, 4, 8, 12]
</snippet></ROW><ROW><id>15599760</id><snippet>re.finditer</snippet></ROW><ROW><id>15599760</id><snippet>for-loop</snippet></ROW><ROW><id>15599760</id><snippet>&gt;&gt;&gt; [x.span() for x in re.finditer('foo', 'foo foo foo foo')]
[(0, 3), (4, 7), (8, 11), (12, 15)]
</snippet></ROW><ROW><id>15599876</id><snippet>.py</snippet></ROW><ROW><id>15599876</id><snippet>__init__.py</snippet></ROW><ROW><id>15599882</id><snippet>multiprocessing</snippet></ROW><ROW><id>15599882</id><snippet>multiprocessing</snippet></ROW><ROW><id>15599882</id><snippet>multiprocessing</snippet></ROW><ROW><id>15599882</id><snippet>class Test(multiprocessing.Process):
    def __init__(self, manager):
        super().__init__()
        self.quit = manager.Event()
        self.dict = manager.dict()

    def stop(self):
        self.quit.set()
        self.join()

    def run(self):
        self.dict['item'] = 0
        while not self.quit.is_set():
        time.sleep(1)
            self.dict['item'] += 1

m = multiprocessing.Manager()
t = Test(m)
t.start()
for x in range(10):
    time.sleep(1.2)
    print(t.dict)
t.stop()
</snippet></ROW><ROW><id>15599882</id><snippet>multiprocessing</snippet></ROW><ROW><id>15600147</id><snippet>echo</snippet></ROW><ROW><id>15600147</id><snippet>stdin</snippet></ROW><ROW><id>15600147</id><snippet>Popen()</snippet></ROW><ROW><id>15600147</id><snippet>grep</snippet></ROW><ROW><id>15600147</id><snippet>env = dict(os.environ)
env['LC_ALL'] = 'en_US.UTF-8'
p = subprocess.Popen(['grep', '-E', mainconf["MSG_FORMAT"][msgtype,fieldname]], stdin=subprocess.PIPE, env=env)
p.communicate(datarecord[fieldname])
if p.returncode:
     return fieldname
</snippet></ROW><ROW><id>15600303</id><snippet>    r == g[1][0]
    r == g[1][1]
    i[0] == r[0]
</snippet></ROW><ROW><id>15600303</id><snippet>    r = g[1][0]
    r = g[1][1]
    i[0] = r[0]
</snippet></ROW><ROW><id>15600458</id><snippet>&gt;&gt;&gt; f = lambda x: x
&gt;&gt;&gt; g = lambda x: x
&gt;&gt;&gt; f is g
False
</snippet></ROW><ROW><id>15600458</id><snippet>self.query.textChanged.disconnect()</snippet></ROW><ROW><id>15600458</id><snippet>self.func1 = lambda: self.makeThread(self.googleSearch())
self.query.textChanged.conncet(self.func1)
...
self.query.textChanged.disconnect(self.func1)
</snippet></ROW><ROW><id>15600584</id><snippet>estates[0].id</snippet></ROW><ROW><id>15600584</id><snippet>if estates:
    return {'value': {'bpl_estate_id': [e.id for e in estates] } }
# rest of code
</snippet></ROW><ROW><id>15600736</id><snippet>HTTPError</snippet></ROW><ROW><id>15600736</id><snippet>from urllib2 import HTTPError
</snippet></ROW><ROW><id>15600789</id><snippet>unstable</snippet></ROW><ROW><id>15600789</id><snippet>unstable</snippet></ROW><ROW><id>15601031</id><snippet>&gt;&gt;&gt; a = list(map(int, str(5**150000)))
</snippet></ROW><ROW><id>15601031</id><snippet>&gt;&gt;&gt; maximum = current = sum(a[:50000])
&gt;&gt;&gt; current
225318
</snippet></ROW><ROW><id>15601031</id><snippet>&gt;&gt;&gt; for i in range(0, len(a)-50000):
...     current = current - a[i] + a[i+50000]
</snippet></ROW><ROW><id>15601031</id><snippet>...     if current &gt; maximum: maximum = current
...
</snippet></ROW><ROW><id>15601031</id><snippet>maximum</snippet></ROW><ROW><id>15601031</id><snippet>&gt;&gt;&gt; maximum
225621
</snippet></ROW><ROW><id>15601031</id><snippet>def maxdigitsum(number, digits):
    l = list(map(int, str(number)))
    maximum = current = sum(l[:digits])
    for i in range(0, len(l)-digits):
        current = current - l[i] + l[i+digits]
        if current &gt; maximum: maximum = current
    return maximum
</snippet></ROW><ROW><id>15601122</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; control_input="prompt_029"
&gt;&gt;&gt; if re.match('^prompt_[0-9]+$',control_input):
...     print("Matches Format")
... else:
...     print("Doesn't Match Format")
... 
Matches Format
</snippet></ROW><ROW><id>15601122</id><snippet>^prompt_[0-9]+$</snippet></ROW><ROW><id>15601122</id><snippet>^        # The start of the string 
prompt_  # The literal string 'prompt_'
[0-9]+   # One or more digit 
$        # The end of the string 
</snippet></ROW><ROW><id>15601122</id><snippet>^prompt_[0-9]{3}$</snippet></ROW><ROW><id>15601122</id><snippet>^prompt_[0-9]{1,3}$</snippet></ROW><ROW><id>15601158</id><snippet>Consolas</snippet></ROW><ROW><id>15601158</id><snippet>C:\&gt;chcp 1253
Active code page: 1253

C:\&gt;python temp.py
ΚΑΛΗΜΕΡΑ
Σάββατο
</snippet></ROW><ROW><id>15601158</id><snippet>C:\&gt;temp.py
????????
Σάββατο
</snippet></ROW><ROW><id>15601240</id><snippet>items = Item.objects.filter(customer_items__customer=customer, customer_items__item_count__gt = 0)
</snippet></ROW><ROW><id>15601240</id><snippet>related_name='customer_items'</snippet></ROW><ROW><id>15601240</id><snippet>Item</snippet></ROW><ROW><id>15601240</id><snippet>CustomerItem</snippet></ROW><ROW><id>15601240</id><snippet>Item</snippet></ROW><ROW><id>15601240</id><snippet>item.customer_items</snippet></ROW><ROW><id>15601308</id><snippet>main()</snippet></ROW><ROW><id>15601308</id><snippet>def main():
    print "This is main"

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>15601308</id><snippet>main()</snippet></ROW><ROW><id>15601308</id><snippet>main()</snippet></ROW><ROW><id>15601308</id><snippet>main()</snippet></ROW><ROW><id>15601308</id><snippet>__init__.py</snippet></ROW><ROW><id>15601444</id><snippet>form.helper['peso'].wrap(AppendedText, "kg")
</snippet></ROW><ROW><id>15601481</id><snippet>levels</snippet></ROW><ROW><id>15601481</id><snippet>import numpy as np
import matplotlib.pyplot as plt

fig, axs = plt.subplots(1,2)

x = np.linspace(0, 1, 100)
X, Y = np.meshgrid(x, x)
Z = np.sin(X)*np.sin(Y)

levels = np.linspace(-1, 1, 40)

zdata = np.sin(8*X)*np.sin(8*Y)

cs = axs[0].contourf(X, Y, zdata, levels=levels)
fig.colorbar(cs, ax=axs[0], format="%.2f")

cs = axs[1].contourf(X, Y, zdata, levels=[-1,0,1])
fig.colorbar(cs, ax=axs[1])

plt.show()
</snippet></ROW><ROW><id>15601547</id><snippet>[\d+ ]?</snippet></ROW><ROW><id>15601547</id><snippet>.</snippet></ROW><ROW><id>15601547</id><snippet>#!python3
# coding: utf-8
import re

data = '''\
49 602 DSKOD SMCX 262,59 1 131,30 1 1 131,30
49 602 DSKOD SMCX 3 5 262,59 1 131,30 1 1 131,30
50 61-201 łóćźż 1 2 669,50 334,75 1 334,75
50 61-201 łóćźż 1 669,50 334,75 1 334,75
51 1-214 AÓŻĆÓDS" 70,35 350,18 3 105,53
'''.splitlines()

regex = re.compile(r"(\d+) ([\d-]+) (.*?) ((?:\d{1,3})?(?:\ \d{3})*,\d{2}) ((?:\d{1,3})?(?:\ \d{3})*,\d{2}) (\d+) ((?:\d{1,3})?(?:\ \d{3})*,\d{2})", re.UNICODE)
for line in data:
    print(regex.match(line).groups())
</snippet></ROW><ROW><id>15601547</id><snippet>('49', '602', 'DSKOD SMCX', '262,59', '1 131,30', '1', '1 131,30')
('49', '602', 'DSKOD SMCX 3', '5 262,59', '1 131,30', '1', '1 131,30')
('50', '61-201', 'łóćźż 1', '2 669,50', '334,75', '1', '334,75')
('50', '61-201', 'łóćźż', '1 669,50', '334,75', '1', '334,75')
('51', '1-214', 'AÓŻĆÓDS"', '70,35', '350,18', '3', '105,53')
</snippet></ROW><ROW><id>15601648</id><snippet>max_value = max(stats.itervalues())
</snippet></ROW><ROW><id>15601648</id><snippet>max_only</snippet></ROW><ROW><id>15601648</id><snippet>max_only = {k: v for k, v in stats.iteritems() if v == max_value}
</snippet></ROW><ROW><id>15601648</id><snippet>itervalues()</snippet></ROW><ROW><id>15601648</id><snippet>iteritems()</snippet></ROW><ROW><id>15601648</id><snippet>values()</snippet></ROW><ROW><id>15601648</id><snippet>items()</snippet></ROW><ROW><id>15601648</id><snippet>dict(max(stats.iteritems(), key=lambda kv: kv[1]))
</snippet></ROW><ROW><id>15601846</id><snippet>\n</snippet></ROW><ROW><id>15601846</id><snippet>\r\n</snippet></ROW><ROW><id>15601846</id><snippet>open()</snippet></ROW><ROW><id>15601846</id><snippet>'\n'</snippet></ROW><ROW><id>15601846</id><snippet>'b'</snippet></ROW><ROW><id>15601999</id><snippet>quickstart</snippet></ROW><ROW><id>15601999</id><snippet>dcoprompt</snippet></ROW><ROW><id>15601999</id><snippet>def physical_setup(...):
    memory = {
        'dirs': [],
        'symlinks': [],
        'files': []
    }
    try:
        # start doing physical setup
        memory['dirs'].append('/tmp/dir1')        
        os.path.mkdir('/tmp/dir1')

    # catching all exceptions is considered a bad practice but sometimes be a little badass
    except Exception as e:
        for key, valist in memory.iteritems():
            if key == 'dirs':
                for dir in valist:
                    shutil.rmtree(dir)
</snippet></ROW><ROW><id>15602142</id><snippet>my_command = '''"done('1') &amp;&amp; done('2')"'''
</snippet></ROW><ROW><id>15602142</id><snippet>my_command = """"done('1') &amp;&amp; done('2')\""""
</snippet></ROW><ROW><id>15602142</id><snippet>strip</snippet></ROW><ROW><id>15602142</id><snippet>my_command = """
"done('1') &amp;&amp; done('2')"
""".strip()
# Blank lines are for illustrative purposes only
# You can do it all on one line as well (but then it looks like you have
# 4 quotes (which can be confusing)
</snippet></ROW><ROW><id>15602455</id><snippet>if task == 'Convert' or 'convert':
</snippet></ROW><ROW><id>15602455</id><snippet>if (task == 'Convert') or ('convert'):
</snippet></ROW><ROW><id>15602455</id><snippet>'convert'</snippet></ROW><ROW><id>15602455</id><snippet>True</snippet></ROW><ROW><id>15602455</id><snippet>if task == 'Convert' or task == 'convert':
</snippet></ROW><ROW><id>15602455</id><snippet>if task in ('Convert', 'convert'):

if task.lower() == 'convert':
</snippet></ROW><ROW><id>15602469</id><snippet>creature</snippet></ROW><ROW><id>15602469</id><snippet>simulation</snippet></ROW><ROW><id>15602469</id><snippet>creature</snippet></ROW><ROW><id>15602511</id><snippet>Iterables.filter()</snippet></ROW><ROW><id>15602511</id><snippet>FluentIterable.filter()</snippet></ROW><ROW><id>15602572</id><snippet>__str__()</snippet></ROW><ROW><id>15602572</id><snippet>str(x)</snippet></ROW><ROW><id>15602572</id><snippet>x.__str__()</snippet></ROW><ROW><id>15602694</id><snippet>import gevent.monkey
from gevent.queue import Queue
from gevent import sleep
gevent.monkey.patch_all()

MAX_REQUESTS = 10

requests = Queue(MAX_REQUESTS)
articles = Queue()

mock_responses = range(100)
mock_responses.reverse()

def request():
    print "worker started"
    while True:
        print "request %s" % requests.get()
        sleep(1)

        try:
            articles.put('article response %s' % mock_responses.pop())
        except IndexError:
            articles.put(StopIteration)
            break

def run():
    print "run"

    i = 1
    while True:
        requests.put(i)
        i += 1

if __name__ == '__main__':
    for worker in range(MAX_REQUESTS):
        gevent.spawn(request)

    gevent.spawn(run)
    for article in articles:
        print "Got article: %s" % article
</snippet></ROW><ROW><id>15602833</id><snippet>windows-1252</snippet></ROW><ROW><id>15602833</id><snippet>utf-8</snippet></ROW><ROW><id>15602941</id><snippet>retry</snippet></ROW><ROW><id>15602941</id><snippet>process_response</snippet></ROW><ROW><id>15603180</id><snippet>_, keep_this, _ = f()
</snippet></ROW><ROW><id>15603180</id><snippet>_</snippet></ROW><ROW><id>15603180</id><snippet>_</snippet></ROW><ROW><id>15603180</id><snippet>keep_this = f()[1]
</snippet></ROW><ROW><id>15603499</id><snippet>str.rstrip</snippet></ROW><ROW><id>15603499</id><snippet>for i in lines:
    print i.rstrip('\n')
</snippet></ROW><ROW><id>15603499</id><snippet>rstrip</snippet></ROW><ROW><id>15603499</id><snippet>&gt;&gt;&gt; 'foobar\n'.rstrip('\n')
foobar
&gt;&gt;&gt; 'foobar'.rstrip('\n')
foobar
&gt;&gt;&gt; 'foobar  \t \n'.rstrip()
foobar
</snippet></ROW><ROW><id>15603499</id><snippet>str.strip</snippet></ROW><ROW><id>15603499</id><snippet>str.lstrip</snippet></ROW><ROW><id>15603547</id><snippet>y</snippet></ROW><ROW><id>15603547</id><snippet>mid_lag_lead_df_model.beta.dot(pandas.Series([0.000207, -0.000361, -0.000091]))
</snippet></ROW><ROW><id>15603572</id><snippet>subprocess</snippet></ROW><ROW><id>15603572</id><snippet>import subprocess,re
p = subprocess.Popen('commands',stdout=subprocess.PIPE,stderr=subprocess.PIPE)
results, errors = p.communicate()
print results
re.search('&lt;(\d+)&gt;', results).group(1) #Cheers, Jon Clements
</snippet></ROW><ROW><id>15603572</id><snippet>os.popen</snippet></ROW><ROW><id>15603572</id><snippet>p_os = os.popen("commands","r")
line = p_os.readline()
print line
re.search('&lt;(\d+)&gt;', line).group(1) #Cheers, Jon Clements
</snippet></ROW><ROW><id>15603572</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>15603572</id><snippet>&gt;&gt;&gt; subprocess.check_output(["echo", "Hello World!"])
'Hello World!\n' 
</snippet></ROW><ROW><id>15603604</id><snippet>/usr/local/lib/python2.7/dist-packages</snippet></ROW><ROW><id>15603604</id><snippet>/usr/local/lib/python2.7/</snippet></ROW><ROW><id>15603604</id><snippet>easy_install</snippet></ROW><ROW><id>15603604</id><snippet>/usr/lib/python2.7/dist-packages</snippet></ROW><ROW><id>15603604</id><snippet>"/usr/lib/python2.7</snippet></ROW><ROW><id>15603604</id><snippet>pandas</snippet></ROW><ROW><id>15603604</id><snippet>easy_install</snippet></ROW><ROW><id>15603604</id><snippet>statsmodels</snippet></ROW><ROW><id>15603604</id><snippet>which python</snippet></ROW><ROW><id>15603604</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>15603604</id><snippet>/usr/local/python</snippet></ROW><ROW><id>15603604</id><snippet>ls -l /usr/bin | grep python</snippet></ROW><ROW><id>15603604</id><snippet>python</snippet></ROW><ROW><id>15603604</id><snippet>sudo pip install statsmodels</snippet></ROW><ROW><id>15603809</id><snippet>hashlib</snippet></ROW><ROW><id>15603809</id><snippet>import hashlib,binascii
hash = hashlib.new('md4', "password".encode('utf-16le')).digest()
print binascii.hexlify(hash)
</snippet></ROW><ROW><id>15603809</id><snippet>python-ntlm</snippet></ROW><ROW><id>15604146</id><snippet>return re.sub(r".*?(\d)(\d)", r"\1.\2", path)
</snippet></ROW><ROW><id>15604146</id><snippet>return re.sub(r".*?(\d*?)(\d)$", r"\1.\2", path)
</snippet></ROW><ROW><id>15604241</id><snippet>import re

l = ['iter1apple', 'iter2banana', 'iter3carrot', 'iter4apple', 'iter5orange', 'iter6banana', 'iter7mango']
duplicates = []
lnew = []
for item in l:
    match = re.match("^iter\d+(\w+)$", item)
    if match and not match.group(1) in duplicates:
        duplicates.append(match.group(1))
        lnew.append(item)

# lnew = ['iter1apple','iter2banana','iter3carrot','iter5orange','iter7mango']
</snippet></ROW><ROW><id>15604338</id><snippet>pylab</snippet></ROW><ROW><id>15604338</id><snippet>import numpy as np
#import pylab as pl
import matplotlib.pyplot as plt

x = np.linspace(0, 2*np.pi, 100)
plt.plot(x, np.sin(x), "-x", label=u"sin")
plt.plot(x, np.random.standard_normal(len(x)), 'o', label=u"rand")
leg = plt.legend(numpoints=3)

plt.show()
</snippet></ROW><ROW><id>15604455</id><snippet>regex</snippet></ROW><ROW><id>15604455</id><snippet>$ sudo port install py33-regex
[...]
$ python3.3
Python 3.3.0 (default, Nov 23 2012, 10:26:01) 
[GCC 4.2.1 Compatible Apple Clang 4.1 ((tags/Apple/clang-421.11.66))] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import regex
&gt;&gt;&gt; regex.match(r'[a-z]+', 'abc123').group(0)
'abc'
</snippet></ROW><ROW><id>15604455</id><snippet>ppc7400</snippet></ROW><ROW><id>15604455</id><snippet>lipo</snippet></ROW><ROW><id>15604455</id><snippet>file</snippet></ROW><ROW><id>15604544</id><snippet>return</snippet></ROW><ROW><id>15604544</id><snippet>None</snippet></ROW><ROW><id>15604544</id><snippet>def b(self, p, data): 
    current = p 
    if current.data == data: 
        return True 
    elif current.data == 1:
        return False 
    else: 
        self.b(current.next, data)
</snippet></ROW><ROW><id>15604544</id><snippet>None</snippet></ROW><ROW><id>15604544</id><snippet>    else:
        return self.b(current.next, data)
</snippet></ROW><ROW><id>15604587</id><snippet>$ heroku config:set PYTHONPATH=fakepath
</snippet></ROW><ROW><id>15604604</id><snippet>def get_dangerous_query():
    # do some database access
    # For a demo, just return what we know the table contains
    return "SELECT * FROM TABLE WHERE COL1 = '%s' and COL2 = '%s'"

qry = get_dangerous_query() % (var1, var2)
</snippet></ROW><ROW><id>15604604</id><snippet>"""</snippet></ROW><ROW><id>15604604</id><snippet>"</snippet></ROW><ROW><id>15604632</id><snippet>from mpl_toolkits.mplot3d import Axes3D
from matplotlib import pylab as pl
from PIL import Image
import numpy as np
import pylab

img = Image.open('40.jpg').convert('L')
z   = np.asarray(img)
mydata = z[::1,::1]
fig = pl.figure(facecolor='w')
ax1 = fig.add_subplot(1,2,1)
im = ax1.imshow(mydata,interpolation='nearest',cmap=pl.cm.jet)
ax1.set_title('2D')

ax2 = fig.add_subplot(1,2,2,projection='3d')
x,y = np.mgrid[:mydata.shape[0],:mydata.shape[1]]
ax2.plot_surface(x,y,mydata,cmap=pl.cm.jet,rstride=1,cstride=1,linewidth=0.,antialiased=False)
ax2.set_title('3D')
ax2.set_zlim3d(0,100)
pl.show()
</snippet></ROW><ROW><id>15604659</id><snippet>In [35]: s = '=D8=B3=D9=84=D8=A7=D9=85_=DA=A9=D8=AC=D8=A7=D8=A6=DB=8C?='
In [36]: s.decode('quoted-printable')
Out[36]: '\xd8\xb3\xd9\x84\xd8\xa7\xd9\x85_\xda\xa9\xd8\xac\xd8\xa7\xd8\xa6\xdb\x8c?'
</snippet></ROW><ROW><id>15604659</id><snippet>In [37]: s.decode('quoted-printable').decode('utf8')
Out[37]: u'\u0633\u0644\u0627\u0645_\u06a9\u062c\u0627\u0626\u06cc?'
</snippet></ROW><ROW><id>15604659</id><snippet>In [39]: print s.decode('quoted-printable')
سلام_کجائی?
</snippet></ROW><ROW><id>15604985</id><snippet>description</snippet></ROW><ROW><id>15604985</id><snippet>name_to_index = dict( (d[0], i) for i, d in enumerate(cursor.description) )
</snippet></ROW><ROW><id>15604985</id><snippet>clientidList = []
for clientid in clientids:
    clientidList.append(clientid[name_to_index['id']])
</snippet></ROW><ROW><id>15605142</id><snippet>makeSel()</snippet></ROW><ROW><id>15605142</id><snippet>self.makeSel()</snippet></ROW><ROW><id>15605142</id><snippet>self</snippet></ROW><ROW><id>15605142</id><snippet>return self.makeSel()</snippet></ROW><ROW><id>15605142</id><snippet>mainSel()</snippet></ROW><ROW><id>15605142</id><snippet>mainSel()</snippet></ROW><ROW><id>15605142</id><snippet>class Main:

    def makeSel(self):
        while True
            selection = input()
            if(slection == 1):
                return StupidBot('StupidBot')
            elif(slection == 2):
                return RandomBot('RandomBot')
            elif(selection == 3):
                return IterativeBot('IterativeBot')
            elif(selection == 4):
                return LastPlayBot('LastPlayBot')
            elif(selection == 5):
                return MyBot('MyBot')
            elif(selection == 6):
                return HumanPlayer('HumanPlayer')
            else:
                print('Invalid selection, please try again.  Enter 1, 2, 3, 4, 5, or 6')
</snippet></ROW><ROW><id>15605335</id><snippet>import re

data = []

for block in re.findall(r'(?s)\|-(.+?)(?=\|-|})', text):
    r = [x.split()[-1] for x in re.findall(r'\[(.+?)\]', block)]
    if r:
        data.append(r)

print data
</snippet></ROW><ROW><id>15605335</id><snippet>[['SEC.12.0', '\\DATA\\LOC', '\\ftp\\location'], ['SEC.13.0', '\\DATA\\LOC2', '\\ftp\\location2']]
</snippet></ROW><ROW><id>15605401</id><snippet>In [48]: characters = ['A', 'B', 'C', 'D', 'E']

In [50]: list(itertools.combinations(characters, 2))
Out[50]:
[('A', 'B'),
 ('A', 'C'),
 ('A', 'D'),
 ('A', 'E'),
 ('B', 'C'),
 ('B', 'D'),
 ('B', 'E'),
 ('C', 'D'),
 ('C', 'E'),
 ('D', 'E')]
</snippet></ROW><ROW><id>15605401</id><snippet>characters = ['A', 'B', 'C', 'D', 'E']
relations = list(itertools.combinations(characters, 2))
</snippet></ROW><ROW><id>15605891</id><snippet>str.strip()</snippet></ROW><ROW><id>15605891</id><snippet>with open("source.txt") as file:
    a = [line.strip() for line in file]
</snippet></ROW><ROW><id>15605891</id><snippet>str.lstrip()</snippet></ROW><ROW><id>15605891</id><snippet>str.rstrip()</snippet></ROW><ROW><id>15605891</id><snippet>str.rstrip()</snippet></ROW><ROW><id>15605891</id><snippet>str.lstrip("\n")</snippet></ROW><ROW><id>15605891</id><snippet>line.rstrip("\n").lstrip()</snippet></ROW><ROW><id>15605893</id><snippet>&gt;&gt;&gt; d = {row[0]: row[1:] for row in zip(a['columns'], *a['data'])}
&gt;&gt;&gt; d
    {u'count': (u'4004658', u'4756668'),
 u'dt_pst': (u'2013-03-19', u'2013-03-20'),
 u'timestamp': (u'1363762799', u'1363849199')}
</snippet></ROW><ROW><id>15605893</id><snippet>dict()</snippet></ROW><ROW><id>15605893</id><snippet>d = dict((row[0], row[1:]) for row in zip(a['columns'], *a['data']))
</snippet></ROW><ROW><id>15605893</id><snippet>max</snippet></ROW><ROW><id>15605893</id><snippet>&gt;&gt;&gt; max(d['timestamp'], key=int)
    u'1363849199'
&gt;&gt;&gt; max(map(int, d['timestamp']))
    1363849199
</snippet></ROW><ROW><id>15606026</id><snippet>if os.path.exists(self.destDirectory):
    self.now = datetime.datetime.now()
    print(self.now)
    self.now = str(self.now.strftime("%Y_%m_%d_%H_%M"))
    print('rename {0} {1}'.format(self.destDirectory, 'old_' + self.now))
    os.rename( self.destDirectory, 'old_' + self.now )
</snippet></ROW><ROW><id>15606129</id><snippet>R</snippet></ROW><ROW><id>15606129</id><snippet>matpoints</snippet></ROW><ROW><id>15606129</id><snippet>matlines</snippet></ROW><ROW><id>15606129</id><snippet>boxplot</snippet></ROW><ROW><id>15606129</id><snippet>dd &lt;- data.frame(x=rnorm(15), y= rnorm(15))

boxplot(dd, boxwex = 0.3)
# note that you need to transpose `dd`
matpoints(y= t(dd), x= c(1.17,1.83),pch=19, col='black')
matlines(y= t(dd), x= c(1.2,1.8), lty=1, col = 'black')
</snippet></ROW><ROW><id>15606149</id><snippet>sys</snippet></ROW><ROW><id>15606149</id><snippet>sys.last_type</snippet></ROW><ROW><id>15606149</id><snippet>sys.last_value</snippet></ROW><ROW><id>15606149</id><snippet>sys.last_traceback</snippet></ROW><ROW><id>15606149</id><snippet>sys.last_value</snippet></ROW><ROW><id>15606276</id><snippet>/**
   \brief Convert the given benchmark into SMT-LIB formatted string.

   \conly \warning The result buffer is statically allocated by Z3. It will
   \conly be automatically deallocated when #Z3_del_context is invoked.
   \conly So, the buffer is invalidated in the next call to \c Z3_benchmark_to_smtlib_string.

   \param c - context.
   \param name - name of benchmark. The argument is optional.
   \param logic - the benchmark logic. 
   \param status - the status string (sat, unsat, or unknown)
   \param attributes - other attributes, such as source, difficulty or category.
   \param num_assumptions - number of assumptions.
   \param assumptions - auxiliary assumptions.
   \param formula - formula to be checked for consistency in conjunction with assumptions.

   def_API('Z3_benchmark_to_smtlib_string', STRING, (_in(CONTEXT), _in(STRING), _in(STRING), _in(STRING), _in(STRING), _in(UINT), _in_array(5, AST), _in(AST)))
*/
Z3_string Z3_API Z3_benchmark_to_smtlib_string(__in   Z3_context c, 
                                               __in Z3_string name,
                                               __in Z3_string logic,
                                               __in Z3_string status,
                                               __in Z3_string attributes,
                                               __in   unsigned num_assumptions,
                                               __in_ecount(num_assumptions) Z3_ast const assumptions[],
                                               __in   Z3_ast formula);
</snippet></ROW><ROW><id>15606459</id><snippet>price = 99.99
while price &gt; 7.74:
    price = get_price()
    time.sleep(5)
</snippet></ROW><ROW><id>15606459</id><snippet>get_price</snippet></ROW><ROW><id>15606459</id><snippet>float()</snippet></ROW><ROW><id>15606459</id><snippet>price = 99.99
while price &gt; 7.74:
    price += 1
    time.sleep(5)
</snippet></ROW><ROW><id>15606459</id><snippet>Updated based on comments.</snippet></ROW><ROW><id>15606459</id><snippet>if price_now == 'Y':
    print(get_price())
else:
    price = 0.0
    # While price is lower than 7.74 continue to check for price changes.
    while price &lt; 7.74: 
        price = get_price()
        time.sleep(5)
</snippet></ROW><ROW><id>15606484</id><snippet> def get_profile(request, token=None):
    args = {
        'client_id': settings.FACEBOOK_APP_ID,
        'client_secret': settings.FACEBOOK_APP_SECRET,
        'redirect_uri': request.build_absolute_uri(reverse('pets:fb_callback')),
        'code': token,
    }

    target = urllib.urlopen('https://graph.facebook.com/oauth/access_token?' + urllib.urlencode(args)).read()
    response = cgi.parse_qs(target)
    access_token = response['access_token'][-1]

    return access_token 



def fb_login(request):
    args = {
        'client_id': settings.FACEBOOK_APP_ID,
        'scope': settings.FACEBOOK_SCOPE,
        'redirect_uri': request.build_absolute_uri(reverse('app_name:fb_callback')),
    }
    return HttpResponseRedirect('https://www.facebook.com/dialog/oauth?' + urllib.urlencode(args))



def fb_callback(request):
    access_token = get_profile(request, request.GET.get('code'))  
    fb_profile = urllib.urlopen('https://graph.facebook.com/me?access_token={0}'.format(access_token))
    fb_profile = json.load(fb_profile)

    fb_username = fb_profile.get('username', fb_profile['email'].split('@')[0])
    fb_id = fb_profile.id
    fb_email = fb_profile.email

    [.........]
</snippet></ROW><ROW><id>15606851</id><snippet>(4,2)</snippet></ROW><ROW><id>15606851</id><snippet>def random_path(origin, nsteps, choices, choice_probs, choice_map):
    directions = np.random.choice(choices, size=(15,), p=choice_probs)
    return directions

dir_map = np.array([[0,1], [0,-1], [1,0], [-1,0]])
# Everything else is the same as defined by OP

path_directions = random_path(origin, 15, np.arange(4), dir_probabilities, dir_map)
path = dir_map[path_directions]
</snippet></ROW><ROW><id>15606851</id><snippet>path</snippet></ROW><ROW><id>15606851</id><snippet>(15,2)</snippet></ROW><ROW><id>15606851</id><snippet>dir_map</snippet></ROW><ROW><id>15606891</id><snippet>defaultdict</snippet></ROW><ROW><id>15606891</id><snippet>from collections import defaultdict
D = defaultdict(list)
data = [('item', 'category1'), ('item2', 'category1'), ('item3', 'category2')]

for item,category in data:
    D[category].append(item)
print(D)
</snippet></ROW><ROW><id>15606891</id><snippet>defaultdict(&lt;class 'list'&gt;, {'category2': ['item3'], 'category1': ['item', 'item2']})
</snippet></ROW><ROW><id>15607003</id><snippet>int</snippet></ROW><ROW><id>15607003</id><snippet>uint</snippet></ROW><ROW><id>15607003</id><snippet>long</snippet></ROW><ROW><id>15607003</id><snippet>int</snippet></ROW><ROW><id>15607003</id><snippet>long</snippet></ROW><ROW><id>15607003</id><snippet>int</snippet></ROW><ROW><id>15607003</id><snippet>long</snippet></ROW><ROW><id>15607003</id><snippet>Console.WriteLine(new BigInteger(2466250752) &lt;&lt; 1);
// output is 4932501504
</snippet></ROW><ROW><id>15607003</id><snippet>Console.WriteLine(new BigInteger(2466250752) &lt;&lt; 1000);
// output is 26426089082476043843620786304598663584184261590451906619194221930186703343408641580508146166393907795104656740341094823575842096015719243506448572304002696283531880333455226335616426281383175835559603193956495848019208150304342043576665227249501603863012525070634185841272245152956518296810797380454760948170752
</snippet></ROW><ROW><id>15607007</id><snippet>BLOG_SLUG = "/"
APPEND_SLASH = "/"
</snippet></ROW><ROW><id>15607007</id><snippet>url("^add%s$" % _slashes[1], "blog_post_add", name="blog_post_add"),
//this is equivalent to url("^add/$", "blog_post_add", name="blog_post_add")
</snippet></ROW><ROW><id>15607007</id><snippet>_slashes = (
    "/" if settings.BLOG_SLUG else "",
    "/" if settings.APPEND_SLASH else "",
)
</snippet></ROW><ROW><id>15607007</id><snippet>if BLOG_SLUG is True and not EMPTY then it is equivalent to "/", the same also in APPEND_SLASH</snippet></ROW><ROW><id>15607224</id><snippet>for xCoord in xrange(1, 10):
    for yCoord in xrange(1, 10):
        Text(Point(xCoord , yCoord ), "*").draw(win)
</snippet></ROW><ROW><id>15607319</id><snippet>.write()</snippet></ROW><ROW><id>15607319</id><snippet>f.write('&lt;pro&gt;' + set[0] + '&lt;/pro&gt;')
</snippet></ROW><ROW><id>15607319</id><snippet>set</snippet></ROW><ROW><id>15607319</id><snippet>set</snippet></ROW><ROW><id>15607705</id><snippet>if request.method == 'POST':
    images = request.POST.getlist('images[]')
    other_field = request.POST.get('other_field')

    for i in range(len(images)):
        data = MyModel()
        data.images = images[i]
        data.other_field = other_field
        data.save()
</snippet></ROW><ROW><id>15607794</id><snippet>urlpatterns = patterns('',
    url(r'^myapp/', include('myapp.urls')),
    url(r'^admin/', include(admin.site.urls)),
)

#myapp/urls.py
urlpatterns = patterns('myapp.views',
    url(r'^$', 'index', name='index'),
    url(r'^register/$', 'register', name='register'),
    url(r'^myaccount/$', 'myaccount', name='myaccount'),
    url(r'^login/$', 'login_page', name='login'),
    url(r'^logout/$', 'logout_user', name='logout')
)
</snippet></ROW><ROW><id>15607971</id><snippet>664</snippet></ROW><ROW><id>15607971</id><snippet>1230</snippet></ROW><ROW><id>15607971</id><snippet>os.chmod("/tmp/test_file", 436)
</snippet></ROW><ROW><id>15608262</id><snippet>Do you want to continue (Y/n):</snippet></ROW><ROW><id>15608262</id><snippet>from __future__ import print_function

import sys
from time import sleep

fp = sys.stdout
print('Do you want to continue (Y/n): ', end='')
# fp.flush()
sleep(5)
</snippet></ROW><ROW><id>15608566</id><snippet>import matplotlib.pyplot as plt

x = [0, 1, 2, 3, 4, 5]
y = [1, 3, 2, 5, 3, 1]
plt.figure()
plt.plot(x,y,'b-')
plt.plot(x,y,'wo', markersize=25, markeredgecolor = 'w')
plt.plot(x,y,'bo', markersize=7, markeredgecolor = 'w')
plt.show()
</snippet></ROW><ROW><id>15608804</id><snippet>userLetters.remove(letter)</snippet></ROW><ROW><id>15608804</id><snippet>for letter in userLetters:</snippet></ROW><ROW><id>15608804</id><snippet>for letter in userLetters[:]:</snippet></ROW><ROW><id>15609250</id><snippet>environ</snippet></ROW><ROW><id>15609250</id><snippet>/projects</snippet></ROW><ROW><id>15609250</id><snippet>request.environ['SCRIPT_NAME'] == '/projects'</snippet></ROW><ROW><id>15609250</id><snippet>/foo/bar</snippet></ROW><ROW><id>15609250</id><snippet>/projects</snippet></ROW><ROW><id>15609250</id><snippet>environ</snippet></ROW><ROW><id>15609250</id><snippet>/projects/foo/bar</snippet></ROW><ROW><id>15609250</id><snippet>environ['SCRIPT_NAME'] == '/projects'</snippet></ROW><ROW><id>15609250</id><snippet>environ['PATH_INFO'] == '/foo/bar'</snippet></ROW><ROW><id>15609250</id><snippet>PATH_INFO</snippet></ROW><ROW><id>15609250</id><snippet>SCRIPT_NAME</snippet></ROW><ROW><id>15609250</id><snippet>environ</snippet></ROW><ROW><id>15609250</id><snippet>[app:myapp]
use = egg:myapp

# ...

[filter:proxy-prefix]
use = egg:PasteDeploy#prefix
prefix = /projects

[pipeline:main]
pipeline =
    proxy-prefix
    myapp
</snippet></ROW><ROW><id>15609596</id><snippet>class Baseclass(object):    
    @classmethod
    def extend(cls, key):
        if not 'extra_fields' in cls.__dict__:
            cls.extra_fields=[]
        cls.extra_fields.append(key)   

class A(Baseclass):
    pass

class B(Baseclass):
    pass

A.extend("foo")
</snippet></ROW><ROW><id>15610160</id><snippet>to_csv</snippet></ROW><ROW><id>15610160</id><snippet>read_csv</snippet></ROW><ROW><id>15610160</id><snippet>encoding</snippet></ROW><ROW><id>15610160</id><snippet>import pandas as pd

name = u'Amiel, Henri-Fr\xe9d\xe9ric'
array = [name]
df = pd.DataFrame({'Names':array})
df.to_csv('names', encoding='utf-8')
uni = pd.read_csv('names', index_col = [0], encoding='utf-8')
print uni  # for me it works with or without print
</snippet></ROW><ROW><id>15610160</id><snippet>                   Names
0  Amiel, Henri-Frédéric
</snippet></ROW><ROW><id>15611016</id><snippet>sorted_lists = sorted(izip(a, b, c, d, score), reverse=True, key=lambda x: x[4])
a, b, c, d, score = [[x[i] for x in sorted_lists] for i in range(5)]
</snippet></ROW><ROW><id>15611016</id><snippet>zip</snippet></ROW><ROW><id>15611016</id><snippet>key</snippet></ROW><ROW><id>15611016</id><snippet>reverse=True</snippet></ROW><ROW><id>15611016</id><snippet>sorted_lists</snippet></ROW><ROW><id>15611016</id><snippet>a, b, c, d, score = izip(*sorted(izip(a, b, c, d, score), reverse=True,
                         key=lambda x: x[4]))
</snippet></ROW><ROW><id>15611016</id><snippet>def sort_lists_by(lists, key_list=0, desc=False):
    return izip(*sorted(izip(*lists), reverse=desc,
                 key=lambda x: x[key_list]))
</snippet></ROW><ROW><id>15611153</id><snippet>echo</snippet></ROW><ROW><id>15611153</id><snippet>exec("python script.py", $output);
echo implode( "\n", $output );
</snippet></ROW><ROW><id>15611153</id><snippet>exec()</snippet></ROW><ROW><id>15611153</id><snippet>return</snippet></ROW><ROW><id>15611236</id><snippet>django.db.backends</snippet></ROW><ROW><id>15611236</id><snippet>mysql</snippet></ROW><ROW><id>15611471</id><snippet>detectMultiScale</snippet></ROW><ROW><id>15611471</id><snippet>test</snippet></ROW><ROW><id>15611471</id><snippet>False</snippet></ROW><ROW><id>15611471</id><snippet>faces</snippet></ROW><ROW><id>15611471</id><snippet>test</snippet></ROW><ROW><id>15611471</id><snippet>True</snippet></ROW><ROW><id>15611471</id><snippet>detectMultiScale</snippet></ROW><ROW><id>15611471</id><snippet>faces</snippet></ROW><ROW><id>15611471</id><snippet>import cv2
def detect(img, cascade_fn='haarcascade_frontalface_alt2.xml',
       scaleFactor=1.3, minNeighbors=4, minSize=(20, 20),
       flags=cv2.cv.CV_HAAR_SCALE_IMAGE):
    cascade = cv2.CascadeClassifier(cascade_fn)
    faces = list()
    rect = cascade.detectMultiScale(img, scaleFactor=scaleFactor,
                                     minNeighbors=minNeighbors,
                                     minSize=minSize, flags=flags)
    for x1, y1, x2, y2 in rect:
        faces.append(img[y1:y2, x1:x2])
        cv2.rectangle(img, (x1, y1), (x2, y2), color, (0, 0, 0))
    return faces
</snippet></ROW><ROW><id>15611590</id><snippet>from random import random

def random_selection(filename, temp_dir, minx, maxy, size, parse, num):
    selection = {}
    excluded = set()
    with open(filename) as file:
        for i, line in enumerate(file):
            x, y, _ = line.split(parse, 2)
            row_col = point_grid_id(float(x), float(y), minx, maxy, size)
            try:
                n, selected_i = selection[row_col]
            except KeyError:
                selection[row_col] = 1, i
            else:
                n += 1
                if random() &lt; 1.0 / n:
                    excluded.add(selected_i)
                    selected_i = i
                selection[row_col] = n, selected_i

    with open(filename) as file:
        for i, line in enumerate(file):
            if i not in excluded:
                #process the line
</snippet></ROW><ROW><id>15611703</id><snippet>nltk_data/corpora</snippet></ROW><ROW><id>15611703</id><snippet>~/nltk_data/corpora</snippet></ROW><ROW><id>15611703</id><snippet>__init__.py</snippet></ROW><ROW><id>15611703</id><snippet>.../site-packages/nltk/corpus/</snippet></ROW><ROW><id>15611776</id><snippet>root = tk.Tk()</snippet></ROW><ROW><id>15611776</id><snippet>self._tk = master.tk
</snippet></ROW><ROW><id>15611776</id><snippet>master</snippet></ROW><ROW><id>15611776</id><snippet>None</snippet></ROW><ROW><id>15611776</id><snippet>class Variable:
    def __init__(self, master=None, value=None, name=None):

        if not master:
            master = _default_root
        ...
        self._tk = master.tk
</snippet></ROW><ROW><id>15611776</id><snippet>master</snippet></ROW><ROW><id>15611776</id><snippet>BooleanVar</snippet></ROW><ROW><id>15611776</id><snippet>Variable</snippet></ROW><ROW><id>15611776</id><snippet>master</snippet></ROW><ROW><id>15611776</id><snippet>None</snippet></ROW><ROW><id>15611776</id><snippet>_default_root</snippet></ROW><ROW><id>15611776</id><snippet>None</snippet></ROW><ROW><id>15611776</id><snippet>master</snippet></ROW><ROW><id>15611776</id><snippet>None</snippet></ROW><ROW><id>15611776</id><snippet>BooleanVar</snippet></ROW><ROW><id>15611776</id><snippet>tk.BooleanVar()</snippet></ROW><ROW><id>15611776</id><snippet>root = tk.Tk()</snippet></ROW><ROW><id>15611776</id><snippet>_default_root</snippet></ROW><ROW><id>15611776</id><snippet>useTk</snippet></ROW><ROW><id>15611776</id><snippet>True</snippet></ROW><ROW><id>15611776</id><snippet>_default_root</snippet></ROW><ROW><id>15611776</id><snippet>BooleanVar</snippet></ROW><ROW><id>15611776</id><snippet>tk.BooleanVar(master)</snippet></ROW><ROW><id>15611776</id><snippet>root = tk.Tk()</snippet></ROW><ROW><id>15611776</id><snippet>_default_root</snippet></ROW><ROW><id>15611776</id><snippet>tk.BooleanVar()</snippet></ROW><ROW><id>15611776</id><snippet>tk.BooleanVar(master)</snippet></ROW><ROW><id>15611776</id><snippet>In [1]: import Tkinter as tk

In [2]: root = tk.Tk()

In [3]: x = tk.BooleanVar()

In [4]: x.set(True)

In [5]: x.get()
Out[5]: 1
</snippet></ROW><ROW><id>15612287</id><snippet>def fst(ID):
    return FirstClass(ID)
</snippet></ROW><ROW><id>15612287</id><snippet>second.py</snippet></ROW><ROW><id>15612287</id><snippet>sample_name = fst('sample_name')
</snippet></ROW><ROW><id>15612287</id><snippet>sample_name</snippet></ROW><ROW><id>15612287</id><snippet>global</snippet></ROW><ROW><id>15612287</id><snippet>globals()</snippet></ROW><ROW><id>15612287</id><snippet># retrieve caller globals
import sys
caller_globals = sys._getframe(1).f_globals
</snippet></ROW><ROW><id>15612287</id><snippet>sys._getframe()</snippet></ROW><ROW><id>15612307</id><snippet>any</snippet></ROW><ROW><id>15612307</id><snippet>any</snippet></ROW><ROW><id>15612307</id><snippet>in</snippet></ROW><ROW><id>15612307</id><snippet>any(self.phrase in text for text in [
       story.getSubject(), story.getSummary(), story.getTitle()
  ])
</snippet></ROW><ROW><id>15612307</id><snippet>any</snippet></ROW><ROW><id>15612307</id><snippet>True</snippet></ROW><ROW><id>15612307</id><snippet>True</snippet></ROW><ROW><id>15612307</id><snippet>False</snippet></ROW><ROW><id>15612307</id><snippet>any</snippet></ROW><ROW><id>15612307</id><snippet>self.phrase in story.getSubject()</snippet></ROW><ROW><id>15612307</id><snippet>self.phrase in story.getSummary()</snippet></ROW><ROW><id>15612307</id><snippet>self.phrase in story.getTitle()</snippet></ROW><ROW><id>15612307</id><snippet>any([self.phrase in story.getSubject(),
     self.phrase in story.getSummary(),
     self.phrase in story.getTitle()
  ])
</snippet></ROW><ROW><id>15612417</id><snippet>$output .= $c;
</snippet></ROW><ROW><id>15612417</id><snippet>$output = $c . $output;
</snippet></ROW><ROW><id>15612704</id><snippet>^</snippet></ROW><ROW><id>15612704</id><snippet>python a.py a^&amp;7
</snippet></ROW><ROW><id>15612704</id><snippet>python a.py "a&amp;7"
</snippet></ROW><ROW><id>15613104</id><snippet>random.random()</snippet></ROW><ROW><id>15613104</id><snippet>random() &lt; 1.0</snippet></ROW><ROW><id>15613104</id><snippet>random() &lt; 0.0</snippet></ROW><ROW><id>15613104</id><snippet>random() &lt; 0.5</snippet></ROW><ROW><id>15613104</id><snippet>True</snippet></ROW><ROW><id>15613104</id><snippet>random.random()</snippet></ROW><ROW><id>15613154</id><snippet>quotes</snippet></ROW><ROW><id>15613154</id><snippet>request</snippet></ROW><ROW><id>15613154</id><snippet>quotes</snippet></ROW><ROW><id>15613154</id><snippet>quotes</snippet></ROW><ROW><id>15613154</id><snippet>quoted_by</snippet></ROW><ROW><id>15613154</id><snippet>randrange</snippet></ROW><ROW><id>15613154</id><snippet>from random import choice

# List of pairs (quotation, author).
quotations = [
    ("Focusing is about saying no.", "Steve Jobs"),
    ("First make it run, then make it run fast.", "Brian Kernighan"),
    ("It's easier to ask forgiveness than it is to get permission.", "Grace Hopper"),
    # ... etc ...
]

def quotes():
    """Pick a random quotation and return a context dictionary with keys
    'quotes' and 'quoted_by'.
    """
    quotation, author = choice(quotations)
    return dict(quotes = quotation, quoted_by = author)
</snippet></ROW><ROW><id>15613202</id><snippet>container = {
    'item1': {'test1', 'test2'},
    'item2': {'test3', 'test4'},
    'item3': {'test5'}
}
    }
check = 'test1'

for key in container:
    if check in container[key]:
        break

result = container[key]
print result
</snippet></ROW><ROW><id>15613202</id><snippet>{ }</snippet></ROW><ROW><id>15613366</id><snippet>__init__</snippet></ROW><ROW><id>15613366</id><snippet>import unittest 

class A(unittest.TestCase):

    def postMessages(self):
        print "i post messages in the server!"

class B(A):

    @classmethod
    def setUpClass(cls):
        cls.foo(cls(methodName='test_method')) # should post messages for the tests in the class to work on

    def foo(self):
        self.postMessages()

    def test_method(self):
        pass


B.setUpClass()
</snippet></ROW><ROW><id>15613366</id><snippet>class TestCase: 
    """A class whose instances are single test cases.""" 

    def __init__(self, methodName='runTest'): 
        """Create an instance of the class that will use the named test 
           method when executed. Raises a ValueError if the instance does 
           not have a method with the specified name. 
        """ 
        try: 
           self._testMethodName = methodName 
           testMethod = getattr(self, methodName) 
           self._testMethodDoc = testMethod.__doc__ 
           except AttributeError: 
               raise ValueError, "no such test method in %s: %s" % \ 
                   (self.__class__, methodName) 
</snippet></ROW><ROW><id>15613366</id><snippet>class A(unittest.TestCase):

    def foo(self, arg1):
        pass

a = A(methodName='foo')
a.foo('an_argument')
</snippet></ROW><ROW><id>15613410</id><snippet>    ##player.worldPosition is the vector        
    x = player.worldPosition[0]
    y = player.worldPosition[1]
    z = player.worldPosition[2]                      
    xyz = [x,y,z] #forming the list
    ddd = pickle.dumps(xyz) #serialize the list
    self.socket.sendto(ddd,self.server_address) #off it goes 
</snippet></ROW><ROW><id>15613448</id><snippet>&lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;script src="http://code.highcharts.com/stock/highstock.js"&gt;&lt;/script&gt;
&lt;script src="http://code.highcharts.com/stock/modules/exporting.js"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>15613559</id><snippet>enable_callback</snippet></ROW><ROW><id>15613559</id><snippet>def callback_properties(callbacks_attribute, *names):
    def create_callback_property(name):
        def getter(self):
            return getattr(self, '_' + name)
        def setter(self, value):
            setattr(self, '_' + name, value)
            for f in getattr(self, callbacks_attribute):
                f(value)
        return property(getter, setter)

    def add_callback_properties(cls):
        for name in names:
            setattr(cls, name, create_callback_property(name)

        return cls

    return add_callback_properties
</snippet></ROW><ROW><id>15613559</id><snippet>@add_callback_properties('var_callbacks', 'var1', 'var2)
class A(object):
    # everything else
</snippet></ROW><ROW><id>15613606</id><snippet>import numpy as np
nk=np.genfromtxt('input.txt', dtype=None)
result1={}
for x in nk:
    result1.setdefault(x[3].split('_')[0],[]).append(x[4])
for x in nk:
    if x[4]==max(result1[x[3].split('_')[0]]):print x
</snippet></ROW><ROW><id>15613606</id><snippet>('A1', 9, 12, 'g3', 18)
('A1', 15, 24, 'g4', 2)
('A1', 25, 27, 'g5', 5)
('A1', 30, 33, 'g1_1', 20)
('A1', 44, 67, 'g10', 19)
('A1', 69, 77, 'g9', 19)
('A1', 80, 99, 'g6', 19)
('A1', 153, 166, 'g2_1', 19)
</snippet></ROW><ROW><id>15614118</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>15614118</id><snippet>In [4]: collections.OrderedDict(sorted(result.items()))
Out[4]: OrderedDict([('1', 'value1'), ('2', 'value2')])
</snippet></ROW><ROW><id>15614226</id><snippet>http://mediadl.microsoft.com/mediadl/iisnet/smoothmedia/Experience/BigBuckBunny_720p.ism/Manifest</snippet></ROW><ROW><id>15614226</id><snippet>Url</snippet></ROW><ROW><id>15614226</id><snippet>http://mediadl.microsoft.com/mediadl/iisnet/smoothmedia/Experience/BigBuckBunny_720p.ism/QualityLevels(2040000)/Fragments(video=360000000)
</snippet></ROW><ROW><id>15614242</id><snippet>pipes.quote()</snippet></ROW><ROW><id>15614242</id><snippet>import pipes
def delete_tables():
    the_command = "SELECT string_agg(table_name, ',') FROM information_schema.tables WHERE table_schema='public'"
    run("TABLES=`psql -U db_user -d db_name $PGDB -t --command %s`" % pipes.quote(the_command))
</snippet></ROW><ROW><id>15614898</id><snippet>class Calc(models.Model):
    field1 = forms.CharField()
    field2 = forms.CharField()
    field3 = forms.CharField()
</snippet></ROW><ROW><id>15614898</id><snippet>class Calc(models.Model):
    field1 = models.CharField(max_length=10)
    field2 = models.CharField(max_length=10)
    field3 = models.CharField(max_length=10)
</snippet></ROW><ROW><id>15614898</id><snippet>syncdb</snippet></ROW><ROW><id>15614898</id><snippet>syncdb</snippet></ROW><ROW><id>15614898</id><snippet>{% if calculator %}
    &lt;h3&gt;Calculation Form&lt;/h3&gt;
    &lt;form action="/calculator/" method="post"&gt; 
        &lt;table&gt;
            {{ calculator }}
        &lt;/table&gt;
        &lt;input type="submit" value="Submit" /&gt;
    &lt;/form&gt;
{% endif %}
</snippet></ROW><ROW><id>15615058</id><snippet>PYTHONPATH= /Library/Frameworks/Python.framework/Versions/7.3/bin/python -c "import tables; print tables.__version__"
</snippet></ROW><ROW><id>15615058</id><snippet>PYTHONPATH= /Library/Frameworks/EPD64.framework/Versions/7.3/bin/python -c "import tables; print tables.__version__"
</snippet></ROW><ROW><id>15615058</id><snippet> PYTHONPATH= /Library/Frameworks/EPD64.framework/Versions/7.3/bin/python -c "import sys; print sys.path"
</snippet></ROW><ROW><id>15615082</id><snippet>readonly</snippet></ROW><ROW><id>15615082</id><snippet>'register_no': fields.char('Register No', size=32, help='Register No', readonly=True),
</snippet></ROW><ROW><id>15615082</id><snippet>_default</snippet></ROW><ROW><id>15615082</id><snippet>sale.py</snippet></ROW><ROW><id>15615249</id><snippet>&gt;&gt;&gt; words = { 'ArabicWord' : { 'POS1' : 'EnglishTranslation1' } }
&gt;&gt;&gt; words['ArabicWord']['POS2'] = 'EnglishTranslation2'
&gt;&gt;&gt; words
{'ArabicWord': {'POS2': 'EnglishTranslation2', 'POS1': 'EnglishTranslation1'}}
</snippet></ROW><ROW><id>15615249</id><snippet>&gt;&gt;&gt; words['ArabicWord'].keys()
['POS2', 'POS1']
</snippet></ROW><ROW><id>15615249</id><snippet>&gt;&gt;&gt; words['ArabicWord']['POS1']
'EnglishTranslation1'
</snippet></ROW><ROW><id>15615463</id><snippet>models.F</snippet></ROW><ROW><id>15615463</id><snippet>qs.update(field_1=models.F('field_1')+field_1_delta,
          field_2=models.F('field_2')+field_2_delta, 
          ...)
</snippet></ROW><ROW><id>15615463</id><snippet>new_stats = {
    'NumberOfHealthPickups': 99
    # ...
}
updated_stats = {}
for stat in new_stats:
    updated_stats[stat] = models.F(stat) + new_stats[stat]
PlayerStats.objects.filter(user=user).update(**updated_stats)
</snippet></ROW><ROW><id>15615485</id><snippet>sorted(((k1, k2) for k1 in d for k2 in d[k1]), key=lambda t: d[t[0]][t[1]], reverse=True)
</snippet></ROW><ROW><id>15615485</id><snippet>&gt;&gt;&gt; sorted(((k1, k2) for k1 in d for k2 in d[k1]), key=lambda t: d[t[0]][t[1]], reverse=True)
[(4, 'g'), (4, 'a'), (12, 'b'), (11, 'c'), (11, 'b'), (11, 'a'), (4, 'r'), (12, 'g'), (4, 'f')]
</snippet></ROW><ROW><id>15615575</id><snippet>import re
</snippet></ROW><ROW><id>15615634</id><snippet>git clone</snippet></ROW><ROW><id>15615634</id><snippet>isclose</snippet></ROW><ROW><id>15615634</id><snippet>import numpy as np
def isclose(a, b, rtol=1.e-5, atol=1.e-8, equal_nan=False):
    """
    https://github.com/joferkington/numpy/blob/3a85c0a9af64b0296b9a4c97f43f2f209c849077/numpy/core/numeric.py
    Returns a boolean array where two arrays are element-wise equal within a
    tolerance.

    The tolerance values are positive, typically very small numbers.  The
    relative difference (`rtol` * abs(`b`)) and the absolute difference
    `atol` are added together to compare against the absolute difference
    between `a` and `b`.

    Parameters
    ----------
    a, b : array_like
        Input arrays to compare.
    rtol : float
        The relative tolerance parameter (see Notes).
    atol : float
        The absolute tolerance parameter (see Notes).
    equal_nan : bool
        Whether to compare NaN's as equal.  If True, NaN's in `a` will be
        considered equal to NaN's in `b` in the output array.

    Returns
    -------
    y : array_like
        Returns a boolean array of where `a` and `b` are equal within the
        given tolerance. If both `a` and `b` are scalars, returns a single
        boolean value.

    See Also
    --------
    allclose

    Notes
    -----
    For finite values, isclose uses the following equation to test whether
    two floating point values are equivalent.
     absolute(`a` - `b`) &lt;= (`atol` + `rtol` * absolute(`b`))
    The above equation is not symmetric in `a` and `b`, so that
    `isclose(a, b)` might be different from `isclose(b, a)` in
    some rare cases.

    Examples
    --------
    &gt;&gt;&gt; np.isclose([1e10,1e-7], [1.00001e10,1e-8])
    array([True, False])
    &gt;&gt;&gt; np.isclose([1e10,1e-8], [1.00001e10,1e-9])
    array([True, True])
    &gt;&gt;&gt; np.isclose([1e10,1e-8], [1.0001e10,1e-9])
    array([False, True])
    &gt;&gt;&gt; np.isclose([1.0, np.nan], [1.0, np.nan])
    array([True, False])
    &gt;&gt;&gt; np.isclose([1.0, np.nan], [1.0, np.nan], equal_nan=True)
    array([True, True])
    """
    def within_tol(x, y, atol, rtol):
        result = np.less_equal(abs(x - y), atol + rtol * abs(y))
        if np.isscalar(a) and np.isscalar(b):
            result = result[0]
        return result
    x = np.array(a, copy=False, ndmin=1)
    y = np.array(b, copy=False, ndmin=1)
    xfin = np.isfinite(x)
    yfin = np.isfinite(y)
    if np.all(xfin) and np.all(yfin):
        return within_tol(x, y, atol, rtol)
    else:
        # Avoid subtraction with infinite/nan values...
        cond = np.zeros(broadcast(x, y).shape, dtype=bool)
        mask = xfin &amp; yfin
        cond[mask] = within_tol(x[mask], y[mask], atol, rtol)
        # Check for equality of infinite values...
        cond[~mask] = (x[~mask] == y[~mask])
        if equal_nan:
            # Make NaN == NaN
            cond[isnan(x) &amp; isnan(y)] = True
        return cond
</snippet></ROW><ROW><id>15615634</id><snippet>import utils_num as UN
print(UN.isclose([1e10,1e-7], [1.00001e10,1e-8]))
</snippet></ROW><ROW><id>15615634</id><snippet>array([ True, False], dtype=bool)
</snippet></ROW><ROW><id>15615803</id><snippet>numpy.zeros((3,4,5))+numpy.sum(numpy.ones((3,4,5)),axis=2)[...,None]
</snippet></ROW><ROW><id>15616192</id><snippet>split</snippet></ROW><ROW><id>15616192</id><snippet>    data_list.append(tuple(line.strip().split(',')))
</snippet></ROW><ROW><id>15616192</id><snippet>csv</snippet></ROW><ROW><id>15616557</id><snippet>import wx

class MyFrame(wx.Frame):
    def __init__(self, parent):
        wx.Frame.__init__(self, parent=parent)
        self.panel=wx.Panel(self)
        for i in range(5):
            self.button=wx.Button(self.panel, -1, label='b'+str(i), pos=(20,30*i))
            self.button.Bind(wx.EVT_BUTTON, self.on_button)
            self.label=wx.StaticText(self.panel, -1, label='label'+str(i), pos=(120,30*i), name='label'+str(i))

    def on_button(self, event):
        b=event.GetEventObject().GetLabel()

        if b.endswith('1'):
            newLabel = "sss"
            self.resetLabel('1', newLabel)
        elif b.endswith('2'):
            self.resetLabel('2', "Number 2!")

    #----------------------------------------------------------------------
    def resetLabel(self, number, newLabel):
        """"""
        lbls = [widget for widget in self.panel.GetChildren() if isinstance(widget, wx.StaticText)]
        for lbl in lbls:
            if number in lbl.GetLabel():
                lbl.SetLabel(newLabel)
                break

x=wx.App()
y=MyFrame(None).Show()
x.MainLoop()
</snippet></ROW><ROW><id>15616557</id><snippet>import wx

class MyFrame(wx.Frame):
    def __init__(self, parent):
        wx.Frame.__init__(self, parent=parent)
        self.panel=wx.Panel(self)
        for i in range(5):
            setattr(self, "button%s" % i, 
                    wx.Button(self.panel, -1, label='b'+str(i), pos=(20,30*i))
                    )
            btn = getattr(self, "button%s" % i)
            btn.Bind(wx.EVT_BUTTON, self.on_button)
            setattr(self, "label%s" % i,
                    wx.StaticText(self.panel, -1, label='label'+str(i), pos=(120,30*i), name='label'+str(i))
                    )
        print

    def on_button(self, event):
        b=event.GetEventObject().GetLabel()

        if b.endswith('1'):
            self.label1.SetLabel("sss")
        elif b.endswith('2'):
            self.label2.SetLabel("Number 2!")



x=wx.App()
y=MyFrame(None).Show()
x.MainLoop()
</snippet></ROW><ROW><id>15616644</id><snippet>&lt;Name&gt;</snippet></ROW><ROW><id>15616644</id><snippet>&lt;Class_Name&gt;</snippet></ROW><ROW><id>15616644</id><snippet>&lt;network_object&gt;</snippet></ROW><ROW><id>15616644</id><snippet>iterfind</snippet></ROW><ROW><id>15616644</id><snippet>&lt;network_objects&gt;</snippet></ROW><ROW><id>15616644</id><snippet>find</snippet></ROW><ROW><id>15616644</id><snippet>&lt;Name&gt;</snippet></ROW><ROW><id>15616644</id><snippet>&lt;Class_Name&gt;</snippet></ROW><ROW><id>15616644</id><snippet>import xml.etree.ElementTree as ET

content='''&lt;network_objects&gt;
&lt;network_object&gt;
&lt;Name&gt;Test_Group_A&lt;/Name&gt;
&lt;Class_Name&gt;network_object_group&lt;/Class_Name&gt;
&lt;members&gt;
  &lt;reference&gt;
    &lt;Name&gt;Host1&lt;/Name&gt;
    &lt;Table&gt;network_objects&lt;/Table&gt;
  &lt;/reference&gt;
  &lt;reference&gt;
    &lt;Name&gt;Host2&lt;/Name&gt;
    &lt;Table&gt;network_objects&lt;/Table&gt;
  &lt;/reference&gt;
  &lt;reference&gt;
    &lt;Name&gt;Host3&lt;/Name&gt;
    &lt;Table&gt;network_objects&lt;/Table&gt;
  &lt;/reference&gt;
  &lt;reference&gt;
    &lt;Name&gt;Host4&lt;/Name&gt;
    &lt;Table&gt;network_objects&lt;/Table&gt;
  &lt;/reference&gt;
  &lt;reference&gt;
    &lt;Name&gt;Host5&lt;/Name&gt;
    &lt;Table&gt;network_objects&lt;/Table&gt;
  &lt;/reference&gt;
  &lt;reference&gt;
    &lt;Name&gt;Host6&lt;/Name&gt;
    &lt;Table&gt;network_objects&lt;/Table&gt;
  &lt;/reference&gt;
&lt;/members&gt;
&lt;/network_object&gt;
&lt;/network_objects&gt;  
'''
</snippet></ROW><ROW><id>15616644</id><snippet>root = ET.fromstring(content)
for network in root.iterfind('network_object'):
    name = network.find('Name')
    class_name = network.find('Class_Name')
    print (name.text,class_name.text)
    for subname in network.iterfind('members/reference/Name'):
        print(subname.text)
</snippet></ROW><ROW><id>15616644</id><snippet>('Test_Group_A', 'network_object_group')
Host1
Host2
Host3
Host4
Host5
Host6
</snippet></ROW><ROW><id>15616665</id><snippet>icon:</snippet></ROW><ROW><id>15616665</id><snippet>&lt;!-- notice i change from icon -&gt; graphIcon icon is too general  --&gt;
&lt;!--a stylist would be angry at you for using icon --&gt;
&lt;a class="graphIcon" href="/physical_graph#physical.circular"&gt; .. &lt;/a&gt;
</snippet></ROW><ROW><id>15616665</id><snippet>jQuery("#circular_icon").click(function() {
   $.ajax({
         url:'/physical_graph', 
         data:{
               'graph_type': 'physical_graph.circular'
         },
         'success':function(data){
             //your function goes here. 
         }
   })
} );
</snippet></ROW><ROW><id>15616665</id><snippet>@app.route('/physical_graph') 
@login_required 
def physical_graph():
  _type = request.args.get('graph_type')
</snippet></ROW><ROW><id>15616725</id><snippet>&gt;&gt;&gt; [x for x in name if not any(word in x for word in name if word != x)]
    ['road', 'ball']
</snippet></ROW><ROW><id>15616725</id><snippet>for candidate in name:
    for word in name:
        # candidate is a compound if it contains any other word (not equal to it)
        if word != candidate and word in candidate:
            break      # a compound. break inner loop, continue outer
    else:              # no breaks occured, must be a basic noun
        print candidate 
</snippet></ROW><ROW><id>15616994</id><snippet>import bz2

class SimpleBZ2File(object):

    def __init__(self,path,readsize=1024):
        self.decomp = bz2.BZ2Decompressor()
        self.rawinput = open(path,'rb')
        self.eof = False
        self.readsize = readsize
        self.leftover = ''

    def tell(self):
        return self.rawinput.tell()

    def __iter__(self):
        while not self.eof:
            rawdata = self.rawinput.read(self.readsize)
            if rawdata == '':
                self.eof = True
            else:
                data = self.decomp.decompress(rawdata)
                if not data:
                    continue #we need to supply more raw to decompress
                newlines = list(data.splitlines(True))
                yield self.leftover + newlines[0]
                self.leftover = ''
                for l in newlines[1:-1]:
                    yield l
                if newlines[-1].endswith('\n'):
                    yield newlines[-1]
                else:
                    self.leftover = newlines[-1]
        if self.leftover:
            yield self.leftover
        self.rawinput.close()
</snippet></ROW><ROW><id>15617576</id><snippet>scatter</snippet></ROW><ROW><id>15617576</id><snippet>import matplotlib as mpl
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.gca(projection='3d')
theta = np.linspace(-4 * np.pi, 4 * np.pi, 100)
z = np.linspace(-2, 2, 100)
r = z**2 + 1
x = r * np.sin(theta)
y = r * np.cos(theta)

#1 colored by value of `z`
ax.scatter(x, y, z, c = plt.cm.jet(z/max(z))) 

#2 colored by index (same in this example since z is a linspace too)
N = len(z)
ax.scatter(x, y, z, c = plt.cm.jet(np.linspace(0,1,N)))

plt.show()
</snippet></ROW><ROW><id>15617576</id><snippet>for i in xrange(N-1):
    ax.plot(x[i:i+2], y[i:i+2], z[i:i+2], color=plt.cm.jet(255*i/N))
</snippet></ROW><ROW><id>15617844</id><snippet>i</snippet></ROW><ROW><id>15617844</id><snippet>for i in ['hello', 'world', 'app']:
    def method(i=i):
        print i
    setattr(self, i, method)
</snippet></ROW><ROW><id>15617844</id><snippet>i</snippet></ROW><ROW><id>15617844</id><snippet>method</snippet></ROW><ROW><id>15617844</id><snippet>def method_factory(i):
    def method():
        print i
    return method 

for i in ['hello', 'world', 'app']:
    setattr(self, i, method_factory(i))
</snippet></ROW><ROW><id>15617969</id><snippet>p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>15617969</id><snippet>p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
</snippet></ROW><ROW><id>15618041</id><snippet>data = tornado.escape.json_decode(self.request.body) 
</snippet></ROW><ROW><id>15618273</id><snippet>flask_login.py</snippet></ROW><ROW><id>15618273</id><snippet>_create_identifier</snippet></ROW><ROW><id>15618273</id><snippet>digest()</snippet></ROW><ROW><id>15618273</id><snippet>serialization_method</snippet></ROW><ROW><id>15618311</id><snippet>Signal.disconnect</snippet></ROW><ROW><id>15618311</id><snippet>signals.satchmo_cart_add_verify.disconnect(
    signals.satchmo_cart_add_verify.receivers[0][1]())
</snippet></ROW><ROW><id>15618442</id><snippet>zip(*rows)</snippet></ROW><ROW><id>15618442</id><snippet>any()</snippet></ROW><ROW><id>15618442</id><snippet>zip(*columns)</snippet></ROW><ROW><id>15618442</id><snippet>with open('data.txt', 'rb') as f:
    rows = list(map(float, row) for row in csv.reader(f, delimiter=','))

rows = zip(*[col for col in zip(*rows) if any(col)])
</snippet></ROW><ROW><id>15618442</id><snippet>&gt;&gt;&gt; rows = [[0, 0.1, 0.3, 0.4, 0], [0, 0.2, 0.5, 0.3, 0], [0, 0.7, 0.9, 0.2, 0]]
&gt;&gt;&gt; zip(*[col for col in zip(*rows) if any(col)])
[(0.1, 0.3, 0.4), (0.2, 0.5, 0.3), (0.7, 0.9, 0.2)]
</snippet></ROW><ROW><id>15618468</id><snippet>board</snippet></ROW><ROW><id>15618468</id><snippet>board</snippet></ROW><ROW><id>15618468</id><snippet>board</snippet></ROW><ROW><id>15618468</id><snippet>board</snippet></ROW><ROW><id>15618468</id><snippet>board</snippet></ROW><ROW><id>15618468</id><snippet>from MyModule import *
</snippet></ROW><ROW><id>15618468</id><snippet>board</snippet></ROW><ROW><id>15618468</id><snippet>import MyModule
</snippet></ROW><ROW><id>15618468</id><snippet>MyModule.board</snippet></ROW><ROW><id>15618468</id><snippet>board</snippet></ROW><ROW><id>15618594</id><snippet>class App(Frame):
    def __init__(self,master=None):
            Frame.__init__(self,master)
            self.pack()
</snippet></ROW><ROW><id>15618594</id><snippet>__init__</snippet></ROW><ROW><id>15618594</id><snippet>__init__</snippet></ROW><ROW><id>15619126</id><snippet>format(value, '.6f')
</snippet></ROW><ROW><id>15619126</id><snippet>&gt;&gt;&gt; format(2.0, '.6f')
'2.000000'
</snippet></ROW><ROW><id>15619126</id><snippet>format()</snippet></ROW><ROW><id>15619180</id><snippet>import os

newtime = createnewtime()
command = 'echo "python setHeater.py" | at ' + newtime
os.system(command)
</snippet></ROW><ROW><id>15619180</id><snippet>import os

newtime = createnewtime()
command = "python setHeater.py | at " + newtime
os.system(command)
</snippet></ROW><ROW><id>15619301</id><snippet>from django import forms
print "forms is :", forms
# ....
from koalified.seeker.models import *
print "forms is :", forms
</snippet></ROW><ROW><id>15619483</id><snippet>        # If the bookmark is being updated, clear old tag list.
   #    ↓ should be lowercase
        if not created:
            bookmark.tag_set.clear()
</snippet></ROW><ROW><id>15619513</id><snippet>class MultipleMacroFor(object):
    def __init__(self, macro, names):
        self._macro = macro
        self._names = names

    def get_renderable(self, macro_var):
        return get_template_attribute(self.macro, macro_var)

    def __getattr__(self, name):
        if name in self._names:
            return self.get_renderable(name)
        raise AttributeError(
            "object %s has no attribute '%s'" % (
                type(self).__name__, name)
            )
</snippet></ROW><ROW><id>15619513</id><snippet>class MultipleMacroFor(object):
    def __init__(self, macro, names):
        self._macro = macro
        self._names = names


    def get_renderable(self, macro_var):
        return get_template_attribute(self.macro, macro_var)

def MultipleMacroForFactory(macro, names):
    attrs = dict()
    for name in names:
        attrs[name] = property(
            lambda self, name=name: self.get_renderable(name)
            )

    clsname = "MultipleMacroFor%s" % "".join(
        name.capitalize() for name in names
        )

    return type(clsname, (MultipleMacroFor,), attrs)(macro, names)
</snippet></ROW><ROW><id>15619537</id><snippet>re.findall('^([^;]+);(.*)(\r\n\(%i\d+\).+)$', text, re.S)
</snippet></ROW><ROW><id>15619537</id><snippet>re.findall('^([^;]+;)(.*)(\r\n\(%i\d+\).+)$', text, re.S)
</snippet></ROW><ROW><id>15619722</id><snippet>grid</snippet></ROW><ROW><id>15619722</id><snippet>pack</snippet></ROW><ROW><id>15619722</id><snippet>import Tkinter as tk

class Example(tk.Frame):
    def __init__(self, master, *args, **kwargs):
        tk.Frame.__init__(self, master, *args, **kwargs)
        self.master = master
        self.s1 = tk.Frame(self, background="pink", width=200, height=200)
        self.s2 = tk.Frame(self, background="blue", width=200, height=200)
        self.s3 = tk.Frame(self, background="bisque", width=200, height=200)

        self.s1.grid(row=0, column=0, sticky="nsew")
        self.s2.grid(row=0, column=1, sticky="nsew")
        self.s3.grid(row=1, column=0, columnspan=2, sticky="nsew")

        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)

if __name__ == "__main__":
    root = tk.Tk()
    Example(root).pack(side="top", fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>15619722</id><snippet>searchSection</snippet></ROW><ROW><id>15619722</id><snippet>import Tkinter as tk

class Example(tk.Frame):
    def __init__(self, master, *args, **kwargs):
        tk.Frame.__init__(self, master, *args, **kwargs)

        self.s1 = tk.Frame(self, background="pink", width=200, height=200)
        self.s2 = tk.Frame(self, background="blue", width=200, height=200)
        self.s3 = tk.Frame(self, background="bisque", width=200, height=200)

        self.s1.grid(row=0, column=0, sticky="nsew")
        self.s2.grid(row=0, column=1, sticky="nsew")
        self.s3.grid(row=1, column=0, columnspan=2, sticky="nsew")

        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)

        # now create the search section
        self.searchSection(self.s1)

    def searchSection(self, parent):
        l = tk.Label(parent, text="Search :", bg='grey')
        self.searchField = tk.Entry(parent)
        self.search = tk.Menubutton(parent, text="Search", bg="grey")
        self.search.menu = tk.Menu(self.search, tearoff = 0)
        self.search['menu'] = self.search.menu
        self.SearchType1Var = tk.IntVar()
        self.search.menu.add_checkbutton(label="SearchType1", 
                                         variable = self.SearchType1Var)

        l.grid(row=0, column=0, columnspan=2, sticky='w')
        self.searchField.grid(row=1, column=0, sticky="ew")
        self.search.grid(row=1, column=1, sticky="ew")

        parent.grid_columnconfigure(0, weight=1)

if __name__ == "__main__":
    root = tk.Tk()
    Example(root).pack(side="top", fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>15619899</id><snippet>u</snippet></ROW><ROW><id>15619899</id><snippet>v</snippet></ROW><ROW><id>15619899</id><snippet>def test1(u, v):
    return (u[0]-v[0])**2 + (u[1]-v[1])**2 + (u[3]-v[3])**2

dis.dis(test1)
 0 LOAD_FAST                0 (u)
 3 LOAD_CONST               1 (0)
 6 BINARY_SUBSCR       
 7 LOAD_FAST                1 (v)
10 LOAD_CONST               1 (0)
13 BINARY_SUBSCR       
14 BINARY_SUBTRACT     
15 LOAD_CONST               2 (2)
18 BINARY_POWER        
19 LOAD_FAST                0 (u)
22 LOAD_CONST               3 (1)
25 BINARY_SUBSCR       
26 LOAD_FAST                1 (v)
29 LOAD_CONST               3 (1)
32 BINARY_SUBSCR       
33 BINARY_SUBTRACT     
34 LOAD_CONST               2 (2)
37 BINARY_POWER        
38 BINARY_ADD          
39 LOAD_FAST                0 (u)
42 LOAD_CONST               4 (3)
45 BINARY_SUBSCR       
46 LOAD_FAST                1 (v)
49 LOAD_CONST               4 (3)
52 BINARY_SUBSCR       
53 BINARY_SUBTRACT     
54 LOAD_CONST               2 (2)
57 BINARY_POWER        
58 BINARY_ADD          
59 RETURN_VALUE        
</snippet></ROW><ROW><id>15619899</id><snippet>def test2(u, v):
    sum((a-b)**2 for a, b in izip(u, v))

dis.dis(test2)
 0 LOAD_GLOBAL              0 (sum)
 3 LOAD_CONST               1 (&lt;code object &lt;genexpr&gt; at 02C6F458, file "&lt;pyshell#10&gt;", line 2&gt;)
 6 MAKE_FUNCTION            0
 9 LOAD_GLOBAL              1 (izip)
12 LOAD_FAST                0 (u)
15 LOAD_FAST                1 (v)
18 CALL_FUNCTION            2
21 GET_ITER            
22 CALL_FUNCTION            1
25 CALL_FUNCTION            1
28 RETURN_VALUE        
</snippet></ROW><ROW><id>15619899</id><snippet>_izip</snippet></ROW><ROW><id>15619899</id><snippet>_sum</snippet></ROW><ROW><id>15619899</id><snippet>def test3(u, v):
    sum = 0
    for i in xrange(len(u)):
        sum += (u[i]-v[i])**2

dis.dis(test3)
 0 LOAD_CONST               1 (0)
 3 STORE_FAST               2 (sum)

 6 SETUP_LOOP              52 (to 61)
 9 LOAD_GLOBAL              0 (xrange)
12 LOAD_GLOBAL              1 (len)
15 LOAD_FAST                0 (u)
18 CALL_FUNCTION            1
21 CALL_FUNCTION            1
24 GET_ITER            
25 FOR_ITER                32 (to 60)
28 STORE_FAST               3 (i)

31 LOAD_FAST                2 (sum)
34 LOAD_FAST                0 (u)
37 LOAD_FAST                3 (i)
40 BINARY_SUBSCR       
41 LOAD_FAST                1 (v)
44 LOAD_FAST                3 (i)
47 BINARY_SUBSCR       
48 BINARY_SUBTRACT     
49 LOAD_CONST               2 (2)
52 BINARY_POWER        
53 INPLACE_ADD         
54 STORE_FAST               2 (sum)
57 JUMP_ABSOLUTE           25
60 POP_BLOCK           
61 LOAD_CONST               0 (None)
64 RETURN_VALUE
</snippet></ROW><ROW><id>15619899</id><snippet>test2</snippet></ROW><ROW><id>15619899</id><snippet>xrange(len(u))</snippet></ROW><ROW><id>15619899</id><snippet>def test4(u, v):
    mysum = 0
    for a, b in izip(u, v) :
        mysum += (a-b)**2
    return mysum

dis.dis(test4)
 0 LOAD_CONST               1 (0)
 3 STORE_FAST               2 (mysum)

 6 SETUP_LOOP              47 (to 56)
 9 LOAD_GLOBAL              0 (izip)
12 LOAD_FAST                0 (u)
15 LOAD_FAST                1 (v)
18 CALL_FUNCTION            2
21 GET_ITER            
22 FOR_ITER                30 (to 55)
25 UNPACK_SEQUENCE          2
28 STORE_FAST               3 (a)
31 STORE_FAST               4 (b)

34 LOAD_FAST                2 (mysum)
37 LOAD_FAST                3 (a)
40 LOAD_FAST                4 (b)
43 BINARY_SUBTRACT     
44 LOAD_CONST               2 (2)
47 BINARY_POWER        
48 INPLACE_ADD         
49 STORE_FAST               2 (mysum)
52 JUMP_ABSOLUTE           22
55 POP_BLOCK           

56 LOAD_FAST                2 (mysum)
59 RETURN_VALUE
</snippet></ROW><ROW><id>15619899</id><snippet>eval</snippet></ROW><ROW><id>15619899</id><snippet>test2</snippet></ROW><ROW><id>15619932</id><snippet>'^(aby|xyz)_.*?(?&lt;!_Result)\.csv$'
</snippet></ROW><ROW><id>15620025</id><snippet>cursor.execute("select Forename,Surname,DOB from employees where (DOBmonth=?))",thismonth)
</snippet></ROW><ROW><id>15620025</id><snippet>str(thismonth))
</snippet></ROW><ROW><id>15620214</id><snippet>import threading, time, random

class Key(object):
    results={}
    def __init__(self,refresh,name):
        self.refresh=refresh
        self.name=name
        self.t0=time.time()
        self.t=threading.Timer(refresh,self.now_what)
        self.t.start()

    def now_what(self):
        s='{}: {:6.4f}'.format(self.name,time.time()-self.t0)
        Key.results.setdefault(self.refresh,[]).append(s)
        # do the thing you want at this time ref with the Key...

    def time_left(self):
        return max(self.t0+self.refresh-time.time(),0)

keys=[Key(random.randint(2,15),'Key {}'.format(i)) for i in range(1,1001)]
t=time.time()
while any(key.time_left() for key in keys):
    if time.time()-t &gt; 1:
        kc=filter(lambda x: x, (key.time_left() for key in keys))
        if kc:
            tmpl='{} keys; max life: {:.2f}; average life: {:.2f}'
            print tmpl.format(len(kc),max(kc),sum(kc)/len(kc))
            t=time.time()

for k in sorted(Key.results):
    print '\nKeys with {} secs life:'.format(k)
    for e in Key.results[k]:
        print '\t{}'.format(e)
</snippet></ROW><ROW><id>15620214</id><snippet>1000 keys; max life: 13.98; average life: 7.38
933 keys; max life: 12.98; average life: 6.85
870 keys; max life: 11.97; average life: 6.29
796 keys; max life: 10.97; average life: 5.80
729 keys; max life: 9.97; average life: 5.26
666 keys; max life: 8.96; average life: 4.68
594 keys; max life: 7.96; average life: 4.16
504 keys; max life: 6.96; average life: 3.77
427 keys; max life: 5.96; average life: 3.32
367 keys; max life: 4.95; average life: 2.74
304 keys; max life: 3.95; average life: 2.16
215 keys; max life: 2.95; average life: 1.76
138 keys; max life: 1.95; average life: 1.32
84 keys; max life: 0.95; average life: 0.72

Keys with 2 secs life:
    Key 26: 2.0052
    Key 27: 2.0053
    Key 41: 2.0048
    ...
Keys with 3 secs life:
    Key 4: 3.0040
    Key 31: 3.0065
    Key 32: 3.0111
    ...
Keys with 4 secs life:
...
</snippet></ROW><ROW><id>15620230</id><snippet>read</snippet></ROW><ROW><id>15620230</id><snippet>imread</snippet></ROW><ROW><id>15620230</id><snippet>&gt;&gt;&gt; from scipy.misc import imread
&gt;&gt;&gt; img = imread("test.jpg")
0: array([[[135, 130, 136],
        [139, 134, 140],
        [132, 127, 133],
        ...

&gt;&gt;&gt; img.flatten()
1: array([135, 130, 136, ..., 162, 160, 165], dtype=uint8)
</snippet></ROW><ROW><id>15620382</id><snippet>zip()</snippet></ROW><ROW><id>15620382</id><snippet>zip()</snippet></ROW><ROW><id>15620382</id><snippet>iter()</snippet></ROW><ROW><id>15620382</id><snippet>for slicelist, text in zip(lists_of_lists, just_a_list):
    for start, stop in zip(*([iter(slicelist)]*2)):
        print(text[int(start):int(stop) + 1])
</snippet></ROW><ROW><id>15620382</id><snippet>&gt;&gt;&gt; for slicelist, text in zip(lists_of_lists, just_a_list):
...     for start, stop in zip(*([iter(slicelist)]*2)):
...         print(text[int(start):int(stop) + 1])
... 
HEQU
KBROWNF
JUMPED
YDOG
ULDL
VETOGET
HTHIS
ONASPOSSIB
</snippet></ROW><ROW><id>15620403</id><snippet>words = ['road', 'roadwork', 'pill', 'pillbox', 'pillow', 'ball', 'football', 'basketball', 'work', 'box', 'foot', 'basket']

wordSet = set(words)

def isWord(w):
    return w in wordSet

def isCompoundWord(word):
    for idx in range(1, len(word)):
        left = word[:idx]
        right = word[idx:]
        if isWord(left) and isWord(right):
            return True
    return False

nonCompoundWords = [word for word in words if not isCompoundWord(word)]
print nonCompoundWords
</snippet></ROW><ROW><id>15620403</id><snippet>['road', 'pill', 'pillow', 'ball', 'work', 'box', 'foot', 'basket']
</snippet></ROW><ROW><id>15620427</id><snippet>pip</snippet></ROW><ROW><id>15620427</id><snippet>/usr/local/lib/python2.7/dist-packages</snippet></ROW><ROW><id>15620427</id><snippet>python2.7</snippet></ROW><ROW><id>15620447</id><snippet>__init__()</snippet></ROW><ROW><id>15620447</id><snippet>self</snippet></ROW><ROW><id>15620447</id><snippet>__init__()</snippet></ROW><ROW><id>15620447</id><snippet>class MyCommand(sublime_plugin.TextCommand):
    def __init__(self, view):
        self.view = view # EDIT
        self.thevariable = 'YOUR VALUE'
</snippet></ROW><ROW><id>15620447</id><snippet>MyCommandObject.thevariable</snippet></ROW><ROW><id>15620498</id><snippet>BROKER_POOL_LIMIT=100
</snippet></ROW><ROW><id>15620964</id><snippet>{% for form in formset.forms %}
&lt;script type="text/javascript" src="/static/selectable/js/jquery.dj.selectable.js"&gt;&lt;/script&gt;
&lt;div id="table_rel"&gt;
</snippet></ROW><ROW><id>15621178</id><snippet>print df[['VAR1']].unstack('ID').resample('W-THU').stack('ID')
Params         VAR1
DATE       ID
2013-01-03 A   69.0
           B   69.0
2013-01-10 A   76.0
           B   73.5
</snippet></ROW><ROW><id>15621222</id><snippet>direct_to_template</snippet></ROW><ROW><id>15621222</id><snippet>urls.py</snippet></ROW><ROW><id>15621222</id><snippet>from django.views.generic import TemplateView

urlpatterns = patterns('',
    url(r'^$', TemplateView.as_view(template_name='homepage.html'), name="home"),
)
</snippet></ROW><ROW><id>15621288</id><snippet>dict</snippet></ROW><ROW><id>15621288</id><snippet>namespace</snippet></ROW><ROW><id>15621288</id><snippet>attributes</snippet></ROW><ROW><id>15621288</id><snippet>namespace</snippet></ROW><ROW><id>15621288</id><snippet>*args</snippet></ROW><ROW><id>15621288</id><snippet>**kwargs</snippet></ROW><ROW><id>15621288</id><snippet>__init__()</snippet></ROW><ROW><id>15621288</id><snippet>__init__</snippet></ROW><ROW><id>15621288</id><snippet>*args</snippet></ROW><ROW><id>15621288</id><snippet>**kwargs</snippet></ROW><ROW><id>15621288</id><snippet>super()</snippet></ROW><ROW><id>15621288</id><snippet>class Singleton(type):
    def __init__(cls, *args, **kwargs):
        super().__init__(*args, **kwargs)
        cls.INSTANCE = None

    def __call__(cls, *args, **kwargs):
        if cls.INSTANCE is None:
            cls.INSTANCE = super().__call__(*args, **kwargs)
        return cls.INSTANCE
</snippet></ROW><ROW><id>15621348</id><snippet>class RedirectText:
    def __init__(self,aWxTextCtrl):
        self.out=aWxTextCtrl

    def write(self,string):
        self.out.WriteText(string)
</snippet></ROW><ROW><id>15621348</id><snippet>def pingIP(self, ip):
    proc = subprocess.Popen("ping %s" % ip, shell=True, 
                            stdout=subprocess.PIPE) 
    print
    while True:
        line = proc.stdout.readline()                        
        wx.Yield()
        if line.strip() == "":
            pass
        else:
            print line.strip()
        if not line: break
    proc.wait()
</snippet></ROW><ROW><id>15621381</id><snippet>def __init__(self, attrs=None, hour_step=None, minute_step=None, second_step=None, twelve_hr=False):
</snippet></ROW><ROW><id>15621381</id><snippet>def __init__(self, attrs={'readonly':'readonly'}, hour_step=None, minute_step=None, second_step=None, twelve_hr=False):
</snippet></ROW><ROW><id>15621381</id><snippet>select_html = Select(choices=hour_choices).render(self.hour_field % name, hour_val, local_attrs)
select_html = Select(choices=minute_choices).render(self.minute_field % name, minute_val, local_attrs)
select_html = Select(choices=second_choices).render(self.second_field % name, second_val, local_attrs)
</snippet></ROW><ROW><id>15621381</id><snippet>select_html = TextInput().render(self.hour_field % name, hour_val, local_attrs)
select_html = TextInput().render(self.minute_field % name, minute_val, local_attrs)
select_html = TextInput().render(self.second_field % name, second_val, local_attrs)
</snippet></ROW><ROW><id>15621381</id><snippet>class time_form(forms.Form):
    def __init__(self, *args, **kwargs):
        super(time_form, self).__init__(*args, **kwargs)

        self.fields['From'] = forms.CharField(widget=forms.TextInput(attrs={'onchange':'this.form.submit()'}))
        self.fields['To'] = forms.CharField(widget=forms.TextInput(attrs={'onchange':'this.form.submit()'}))
        self.fields['From_Time'] = forms.TimeField(widget = SelectTimeWidget())
</snippet></ROW><ROW><id>15621381</id><snippet>form = time_form({'From_Time':'12:34:56 P.M.',})
</snippet></ROW><ROW><id>15621468</id><snippet>or</snippet></ROW><ROW><id>15621468</id><snippet>and</snippet></ROW><ROW><id>15621468</id><snippet>or</snippet></ROW><ROW><id>15621468</id><snippet>True</snippet></ROW><ROW><id>15621468</id><snippet>&gt;&gt;&gt; 'a' or 'b'
'a'
&gt;&gt;&gt; False or 'b'
'b'
</snippet></ROW><ROW><id>15621468</id><snippet>and</snippet></ROW><ROW><id>15621468</id><snippet>False</snippet></ROW><ROW><id>15621468</id><snippet>False</snippet></ROW><ROW><id>15621468</id><snippet>&gt;&gt;&gt; False and 'b'
False
&gt;&gt;&gt; 'a' and 'b'
'b'
</snippet></ROW><ROW><id>15621468</id><snippet>x and y</snippet></ROW><ROW><id>15621468</id><snippet>x</snippet></ROW><ROW><id>15621468</id><snippet>x</snippet></ROW><ROW><id>15621468</id><snippet>y</snippet></ROW><ROW><id>15621468</id><snippet>x or y</snippet></ROW><ROW><id>15621468</id><snippet>x</snippet></ROW><ROW><id>15621468</id><snippet>x</snippet></ROW><ROW><id>15621468</id><snippet>y</snippet></ROW><ROW><id>15621614</id><snippet>6.7.  Quoted-Printable Content-Transfer-Encoding

   The Quoted-Printable encoding is intended to represent data that
   largely consists of octets that correspond to printable characters in
   the US-ASCII character set.  It encodes the data in such a way that
   the resulting octets are unlikely to be modified by mail transport.
   If the data being encoded are mostly US-ASCII text, the encoded form
   of the data remains largely recognizable by humans.  A body which is
   entirely US-ASCII may also be encoded in Quoted-Printable to ensure
   the integrity of the data should the message pass through a
   character-translating, and/or line-wrapping gateway.

   In this encoding, octets are to be represented as determined by the
   following rules:

    (1)   (General 8bit representation) Any octet, except a CR or
          LF that is part of a CRLF line break of the canonical
          (standard) form of the data being encoded, may be
          represented by an "=" followed by a two digit
          hexadecimal representation of the octet's value.  The
          digits of the hexadecimal alphabet, for this purpose,
          are "0123456789ABCDEF".  Uppercase letters must be
          used; lowercase letters are not allowed.  Thus, for
          example, the decimal value 12 (US-ASCII form feed) can
          be represented by "=0C", and the decimal value 61 (US-
          ASCII EQUAL SIGN) can be represented by "=3D".  This
          rule must be followed except when the following rules
          allow an alternative encoding.

    (2)   (Literal representation) Octets with decimal values of
          33 through 60 inclusive, and 62 through 126, inclusive,
          MAY be represented as the US-ASCII characters which
          correspond to those octets (EXCLAMATION POINT through
          LESS THAN, and GREATER THAN through TILDE,
          respectively).

    (3)   (White Space) Octets with values of 9 and 32 MAY be
          represented as US-ASCII TAB (HT) and SPACE characters,

          respectively, but MUST NOT be so represented at the end
          of an encoded line.  Any TAB (HT) or SPACE characters
          on an encoded line MUST thus be followed on that line
          by a printable character.  In particular, an "=" at the
          end of an encoded line, indicating a soft line break
          (see rule #5) may follow one or more TAB (HT) or SPACE
          characters.  It follows that an octet with decimal
          value 9 or 32 appearing at the end of an encoded line
          must be represented according to Rule #1.  This rule is
          necessary because some MTAs (Message Transport Agents,
          programs which transport messages from one user to
          another, or perform a portion of such transfers) are
          known to pad lines of text with SPACEs, and others are
          known to remove "white space" characters from the end
          of a line.  Therefore, when decoding a Quoted-Printable
          body, any trailing white space on a line must be
          deleted, as it will necessarily have been added by
          intermediate transport agents.

    (4)   (Line Breaks) A line break in a text body, represented
          as a CRLF sequence in the text canonical form, must be
          represented by a (RFC 822) line break, which is also a
          CRLF sequence, in the Quoted-Printable encoding.  Since
          the canonical representation of media types other than
          text do not generally include the representation of
          line breaks as CRLF sequences, no hard line breaks
          (i.e. line breaks that are intended to be meaningful
          and to be displayed to the user) can occur in the
          quoted-printable encoding of such types.  Sequences
          like "=0D", "=0A", "=0A=0D" and "=0D=0A" will routinely
          appear in non-text data represented in quoted-
          printable, of course.

          Note that many implementations may elect to encode the
          local representation of various content types directly
          rather than converting to canonical form first,
          encoding, and then converting back to local
          representation.  In particular, this may apply to plain
          text material on systems that use newline conventions
          other than a CRLF terminator sequence.  Such an
          implementation optimization is permissible, but only
          when the combined canonicalization-encoding step is
          equivalent to performing the three steps separately.

    (5)   (Soft Line Breaks) The Quoted-Printable encoding
          REQUIRES that encoded lines be no more than 76
          characters long.  If longer lines are to be encoded
          with the Quoted-Printable encoding, "soft" line breaks
          must be used.  An equal sign as the last character on a
          encoded line indicates such a non-significant ("soft")
          line break in the encoded text.
</snippet></ROW><ROW><id>15621751</id><snippet>@hosts(['ec2-54-xxx.xxx.xxx.compute-1.amazonaws.com'])
def bootstrap():
    env.user = "ubuntu"
    env.key_filename = "/home/ubuntu/omg.pem"
</snippet></ROW><ROW><id>15622069</id><snippet>r.raw</snippet></ROW><ROW><id>15622069</id><snippet>r = requests.get(url, params=payload, stream=True)
etree.parse(r.raw)
</snippet></ROW><ROW><id>15622069</id><snippet>stream=True</snippet></ROW><ROW><id>15622069</id><snippet>.get()</snippet></ROW><ROW><id>15622069</id><snippet>r.content</snippet></ROW><ROW><id>15622069</id><snippet>r = requests.get(url, params=payload)
etree.fromstring(r.content)
</snippet></ROW><ROW><id>15622242</id><snippet>getpixel</snippet></ROW><ROW><id>15622242</id><snippet>int</snippet></ROW><ROW><id>15622242</id><snippet>uint64</snippet></ROW><ROW><id>15622242</id><snippet>for ii in range(N):
    coordinate = tuple(map(int, rand_pix[ii,:]))
    rand_image.putpixel(coordinate, im.getpixel(coordinate))
</snippet></ROW><ROW><id>15622355</id><snippet>str(input('What ...'))</snippet></ROW><ROW><id>15622355</id><snippet>inputCheck</snippet></ROW><ROW><id>15622355</id><snippet>else</snippet></ROW><ROW><id>15622355</id><snippet>inputCheck</snippet></ROW><ROW><id>15622355</id><snippet>input</snippet></ROW><ROW><id>15622355</id><snippet>raw_input</snippet></ROW><ROW><id>15622355</id><snippet>menuChoice</snippet></ROW><ROW><id>15622355</id><snippet>while True:
    userChoice = str(raw_input('What Would You Like To Do? '))
    if userChoice in valid:
        inputCheck(userChoice)
        break
    else:
        print('Sorry But You Didnt Choose an available option... Try Again')
</snippet></ROW><ROW><id>15622445</id><snippet>context['status_form'] = self.status_form # Django is complaining that status_form is not existing, result since the post method is not executed
</snippet></ROW><ROW><id>15622445</id><snippet>self.status_from</snippet></ROW><ROW><id>15622445</id><snippet>get_context_data</snippet></ROW><ROW><id>15622445</id><snippet>get_context_data</snippet></ROW><ROW><id>15622445</id><snippet>context = self.get_context_data(**kwargs)
status_form = context['status_form']
</snippet></ROW><ROW><id>15622445</id><snippet>status_form</snippet></ROW><ROW><id>15622445</id><snippet>post</snippet></ROW><ROW><id>15622445</id><snippet>self</snippet></ROW><ROW><id>15622445</id><snippet>get_context_data</snippet></ROW><ROW><id>15622445</id><snippet>status_form</snippet></ROW><ROW><id>15622445</id><snippet>StatusFormProcessView</snippet></ROW><ROW><id>15622445</id><snippet>List</snippet></ROW><ROW><id>15622445</id><snippet>post</snippet></ROW><ROW><id>15622445</id><snippet>class List(ListView);
    #
    #
    def post(self, request, *args, **kwargs):
        return StatusFormView.as_view(request) # What ever you need be pass to you form processing view
</snippet></ROW><ROW><id>15622445</id><snippet>POST</snippet></ROW><ROW><id>15622445</id><snippet>GET</snippet></ROW><ROW><id>15622445</id><snippet>IndexView</snippet></ROW><ROW><id>15622445</id><snippet>GET</snippet></ROW><ROW><id>15622445</id><snippet>get()</snippet></ROW><ROW><id>15622445</id><snippet>POST</snippet></ROW><ROW><id>15622445</id><snippet>post()</snippet></ROW><ROW><id>15622445</id><snippet>search_form</snippet></ROW><ROW><id>15622445</id><snippet>search_form</snippet></ROW><ROW><id>15622445</id><snippet>status_form = context['status_form']</snippet></ROW><ROW><id>15622445</id><snippet>context['status_form'] = status_form
</snippet></ROW><ROW><id>15622445</id><snippet>status_form</snippet></ROW><ROW><id>15622445</id><snippet>context</snippet></ROW><ROW><id>15622445</id><snippet>status_form = context['status_form']
</snippet></ROW><ROW><id>15622445</id><snippet>self.request.POST</snippet></ROW><ROW><id>15622588</id><snippet>__import__()</snippet></ROW><ROW><id>15622588</id><snippet>allowed_modules = ['os', 're', 'your_module', 'parser_class1.py', 'parser_class2.py']

if not results.module:
    aparser.error('Error! no module')
try:
    if results.module in allowed_modules:
        module = __import__(results.module)
        print '%s imported as "module"'%(results.module)
    else:
        print 'hey what are you trying to do?'
except ImportError, e:
    print e

module.your_function(your_data)
</snippet></ROW><ROW><id>15622588</id><snippet>EVAL</snippet></ROW><ROW><id>15622588</id><snippet>__IMPORT__()</snippet></ROW><ROW><id>15622588</id><snippet>eval</snippet></ROW><ROW><id>15622588</id><snippet>__import__()</snippet></ROW><ROW><id>15622588</id><snippet>allowed_modules</snippet></ROW><ROW><id>15622588</id><snippet>allowed_modules</snippet></ROW><ROW><id>15622753</id><snippet>def data(self, index, role):
    ...
    if role == Qt.BackgroundRole:
        return QBrush(Qt.yellow)
</snippet></ROW><ROW><id>15622753</id><snippet>from PyQt4.QtCore import *
from PyQt4.QtCore import *
from PyQt4.QtGui import *
import sys

my_array = [['00','01','02'],
            ['10','11','12'],
            ['20','21','22']]

def main():
    app = QApplication(sys.argv)
    w = MyWindow()
    w.show()
    sys.exit(app.exec_())

class MyWindow(QTableView):
    def __init__(self, *args):
        QTableView.__init__(self, *args)

        tablemodel = MyTableModel(my_array, self)
        self.setModel(tablemodel)

class MyTableModel(QAbstractTableModel):
    def __init__(self, datain, parent=None, *args):
        QAbstractTableModel.__init__(self, parent, *args)
        self.arraydata = datain

    def rowCount(self, parent):
        return len(self.arraydata)

    def columnCount(self, parent):
        return len(self.arraydata[0])

    def data(self, index, role):
        if not index.isValid():
            return QVariant()
        # vvvv this is the magic part
        elif role == Qt.BackgroundRole:
            if index.row() % 2 == 0:
                return QBrush(Qt.yellow)
            else:
                return QBrush(Qt.red)
        # ^^^^ this is the magic part
        elif role != Qt.DisplayRole:
            return QVariant()
        return QVariant(self.arraydata[index.row()][index.column()])

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>15622888</id><snippet>print()</snippet></ROW><ROW><id>15622888</id><snippet>args</snippet></ROW><ROW><id>15622888</id><snippet>print()</snippet></ROW><ROW><id>15622888</id><snippet>print(args[0], args[1], args[2], args[3])</snippet></ROW><ROW><id>15622888</id><snippet>1&lt;space&gt;2&lt;space&gt;3&lt;space&gt;4&lt;space&gt;
</snippet></ROW><ROW><id>15622888</id><snippet>1&lt;space&gt;2&lt;space&gt;3&lt;space&gt;4&lt;newline&gt;
</snippet></ROW><ROW><id>15622906</id><snippet>import re
regex = re.compile(r'(\d{8}\s*\-\s*\d{8})')
found = re.search(regex, "11111111-01234567")
print found.group(0)
found = re.search(regex, "22222222 - 01234567")
print found.group(0)
</snippet></ROW><ROW><id>15622916</id><snippet>rename</snippet></ROW><ROW><id>15622916</id><snippet>MultiIndex</snippet></ROW><ROW><id>15622978</id><snippet>$ sudo env CC=clang easy_install -U pyobjc-core
$ sudo env CC=clang easy_install -U pyobjc
</snippet></ROW><ROW><id>15623025</id><snippet>create_user</snippet></ROW><ROW><id>15623025</id><snippet>create_user</snippet></ROW><ROW><id>15623043</id><snippet>threading</snippet></ROW><ROW><id>15623043</id><snippet>active_count()</snippet></ROW><ROW><id>15623043</id><snippet>thread</snippet></ROW><ROW><id>15623043</id><snippet>import thread
dir(thread)
</snippet></ROW><ROW><id>15623043</id><snippet>['LockType', '__doc__', '__name__', '__package__', '_count', '_local', 'allocate', 'allocate_lock', 'error', 'exit', 'exit_thread', 'get_ident', 'interrupt_main', 'stack_size', 'start_new', 'start_new_thread']
</snippet></ROW><ROW><id>15623043</id><snippet>thread</snippet></ROW><ROW><id>15623043</id><snippet>_count</snippet></ROW><ROW><id>15623043</id><snippet>thread._count()</snippet></ROW><ROW><id>15623043</id><snippet>_count</snippet></ROW><ROW><id>15623056</id><snippet>python my_script.py -par1 -par2
</snippet></ROW><ROW><id>15623056</id><snippet>import sys

arg1,arg2 = sys.argv[1:3]

myfunc(arg1,arg2)
</snippet></ROW><ROW><id>15623090</id><snippet>islice(datafile, 1000000)</snippet></ROW><ROW><id>15623090</id><snippet>groupby</snippet></ROW><ROW><id>15623090</id><snippet>from itertools import groupby, count
with open(filename, 'r') as datafile:
    groups = groupby(datafile, key=lambda k, line=count(): next(line)//1000000)
    for k, group in groups:
        for line in group:
            ... 
</snippet></ROW><ROW><id>15623190</id><snippet>.sort()</snippet></ROW><ROW><id>15623190</id><snippet>l.sort(key=lambda item:item['followupdate'], reverse=True)
</snippet></ROW><ROW><id>15623190</id><snippet>&gt;&gt;&gt; l = [{'followupdate': datetime.date(2013, 3, 25)}, {'followupdate': datetime.date(2013, 3, 24)}, {'followupdate': datetime.date(2013, 3, 29)}]
&gt;&gt;&gt; l
[{'followupdate': datetime.date(2013, 3, 25)}, {'followupdate': datetime.date(2013, 3, 24)}, {'followupdate': datetime.date(2013, 3, 29)}]
&gt;&gt;&gt; l.sort(key=lambda item:item['followupdate'], reverse=True)
&gt;&gt;&gt; l
[{'followupdate': datetime.date(2013, 3, 29)}, {'followupdate': datetime.date(2013, 3, 25)}, {'followupdate': datetime.date(2013, 3, 24)}]
</snippet></ROW><ROW><id>15623286</id><snippet>s = pd.concat([df[i] for i in df], ignore_index = True)
</snippet></ROW><ROW><id>15623505</id><snippet>out_filename</snippet></ROW><ROW><id>15623505</id><snippet>import StringIO

f=StringIO.StringIO()

for line in ['line {}\n'.format(i) for i in range(25)]:
    f.write(line)

f.seek(0)

for line in f:
    print line.strip() 
</snippet></ROW><ROW><id>15623505</id><snippet>with open(out_filename, 'w') as outfile: ...</snippet></ROW><ROW><id>15623505</id><snippet>outfile=StringIO.StringIO()</snippet></ROW><ROW><id>15623505</id><snippet>with open(in_filename, 'r') as infile:
    outfile=StringIO.StringIO()
    outfile.write(struct.pack('&lt;Q', filesize))
    outfile.write(iv)

    while True:
        chunk = infile.read(chunksize)
        if len(chunk) == 0:
            break
        elif len(chunk) % 16 != 0:
            chunk += ' ' * (16 - len(chunk) % 16)

        outfile.write(encryptor.encrypt(chunk)) 
</snippet></ROW><ROW><id>15623721</id><snippet>sudo apt-get remove python-matplotlib</snippet></ROW><ROW><id>15623721</id><snippet>sudo apt-get build-dep python-matplotlib</snippet></ROW><ROW><id>15623721</id><snippet>sudo pip install matplotlib</snippet></ROW><ROW><id>15623721</id><snippet>matplotlib.rcParams['backend'] = 'GTK'</snippet></ROW><ROW><id>15623936</id><snippet>MatchObject</snippet></ROW><ROW><id>15623936</id><snippet>.search()</snippet></ROW><ROW><id>15623936</id><snippet>.end()</snippet></ROW><ROW><id>15623936</id><snippet>0</snippet></ROW><ROW><id>15623936</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; a = re.compile('(my|your) regex')
&gt;&gt;&gt; match = a.search('Somewhere in this string is my regex; not much different from your regex.')
&gt;&gt;&gt; print match.end()
36
&gt;&gt;&gt; print match.end(1)
30
</snippet></ROW><ROW><id>15623999</id><snippet>try:
    # do something that *might* raise an exception
except Exception:
    raise
finally:
    # something I *always* want to run
</snippet></ROW><ROW><id>15623999</id><snippet>finally</snippet></ROW><ROW><id>15623999</id><snippet>finally</snippet></ROW><ROW><id>15623999</id><snippet>try</snippet></ROW><ROW><id>15623999</id><snippet>except</snippet></ROW><ROW><id>15623999</id><snippet>else</snippet></ROW><ROW><id>15623999</id><snippet>finally</snippet></ROW><ROW><id>15623999</id><snippet>finally</snippet></ROW><ROW><id>15623999</id><snippet>finally</snippet></ROW><ROW><id>15623999</id><snippet>break</snippet></ROW><ROW><id>15623999</id><snippet>return</snippet></ROW><ROW><id>15623999</id><snippet>finally</snippet></ROW><ROW><id>15623999</id><snippet>def f():
    try:
        1/0
    finally:
        return 42

&gt;&gt;&gt; f()
42
</snippet></ROW><ROW><id>15623999</id><snippet>break</snippet></ROW><ROW><id>15623999</id><snippet>continue</snippet></ROW><ROW><id>15623999</id><snippet>return</snippet></ROW><ROW><id>15623999</id><snippet>try</snippet></ROW><ROW><id>15623999</id><snippet>finally</snippet></ROW><ROW><id>15623999</id><snippet>return</snippet></ROW><ROW><id>15623999</id><snippet>break</snippet></ROW><ROW><id>15623999</id><snippet>continue</snippet></ROW><ROW><id>15623999</id><snippet>try</snippet></ROW><ROW><id>15623999</id><snippet>try</snippet></ROW><ROW><id>15623999</id><snippet>finally</snippet></ROW><ROW><id>15623999</id><snippet>finally</snippet></ROW><ROW><id>15623999</id><snippet>except</snippet></ROW><ROW><id>15623999</id><snippet>finally</snippet></ROW><ROW><id>15623999</id><snippet>try</snippet></ROW><ROW><id>15623999</id><snippet>try</snippet></ROW><ROW><id>15623999</id><snippet>try:
    try:
        # some code that could raise an exception
    except SomeException:
        # exception handler
finally:
    # cleanup code, always executed
</snippet></ROW><ROW><id>15624051</id><snippet>&gt;&gt;&gt; import boto
&gt;&gt;&gt; boto.__version__
'2.8.0-dev'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>15624198</id><snippet>text_bytes = bytearray(plaintext,'utf-8')
num_bytes_padding = text_bytes[len(text_bytes) - 1]
text_bytes[-1 * num_bytes_padding:] = []
plaintext = text_bytes.decode('utf-8') 
</snippet></ROW><ROW><id>15624246</id><snippet># Just to pre-compile our XPath. This will get all the text from this element from
# each of the child elements that aren't 'script' or 'style'
textXpath = etree.XPath(
    '(.|.//*[not(name()="script")][not(name()="style")])/text()')

# If instead you don't want to include the current element:
# textXpath = etree.XPath(
#   './/*[not(name()="script")][not(name()="style")]/text()')

results = ''.join(textXpath(textTag))
</snippet></ROW><ROW><id>15624303</id><snippet>xData = np.load('xData.npy')*10**5
yData = np.load('yData.npy')*10**5
</snippet></ROW><ROW><id>15624303</id><snippet>from __future__ import division

import os
os.chdir(os.path.expanduser('~/tmp'))

import numpy as np
import scipy.optimize as optimize
import matplotlib.pyplot as plt

def func(x,a,b,c):
   return a*np.exp(-b*x)-c


xData = np.load('xData.npy')*10**5
yData = np.load('yData.npy')*10**5

print(xData.min(), xData.max())
print(yData.min(), yData.max())

trialX = np.linspace(xData[0], xData[-1], 1000)

# Fit a polynomial 
fitted = np.polyfit(xData, yData, 10)[::-1]
y = np.zeros(len(trialX))
for i in range(len(fitted)):
   y += fitted[i]*trialX**i

# Fit an exponential
popt, pcov = optimize.curve_fit(func, xData, yData)
print(popt)
yEXP = func(trialX, *popt)

plt.figure()
plt.plot(xData, yData, label='Data', marker='o')
plt.plot(trialX, yEXP, 'r-',ls='--', label="Exp Fit")
plt.plot(trialX, y, label = '10 Deg Poly')
plt.legend()
plt.show()
</snippet></ROW><ROW><id>15624303</id><snippet>xData</snippet></ROW><ROW><id>15624303</id><snippet>yData</snippet></ROW><ROW><id>15624303</id><snippet>curve_fit</snippet></ROW><ROW><id>15624303</id><snippet>a</snippet></ROW><ROW><id>15624303</id><snippet>b</snippet></ROW><ROW><id>15624303</id><snippet>c</snippet></ROW><ROW><id>15624303</id><snippet>curve_fit</snippet></ROW><ROW><id>15624303</id><snippet>curve_fit</snippet></ROW><ROW><id>15624303</id><snippet>guess = (-1, 0.1, 0)
popt, pcov = optimize.curve_fit(func, xData, yData, guess)
</snippet></ROW><ROW><id>15624303</id><snippet>curve_fit</snippet></ROW><ROW><id>15624328</id><snippet>key</snippet></ROW><ROW><id>15624328</id><snippet>.sort()</snippet></ROW><ROW><id>15624328</id><snippet>my_scores.sort(key=lambda row: row[1:], reverse=True)
</snippet></ROW><ROW><id>15624328</id><snippet>lambda</snippet></ROW><ROW><id>15624328</id><snippet>&gt;&gt;&gt; my_scores = [
...         ['1', 0.03, 0.4, 0.6, 0.01, 0.1],
...         ['2', 0.02, 0.5, 0.7, 0.01, 0.1],
...         ['3', 0.01, 0.5, 0.7, 0.02, 0.3],
...         ['4', 0.01, 0.5, 0.7, 0.03, 0.4],
...         ['5', 0.03, 0.1, 0.2, 0.03, 0.4],
...        ]
&gt;&gt;&gt; my_scores.sort(key=lambda row: row[1:], reverse=True)
&gt;&gt;&gt; import pprint 
&gt;&gt;&gt; pprint.pprint(my_scores)
[['1', 0.03, 0.4, 0.6, 0.01, 0.1],
 ['5', 0.03, 0.1, 0.2, 0.03, 0.4],
 ['2', 0.02, 0.5, 0.7, 0.01, 0.1],
 ['4', 0.01, 0.5, 0.7, 0.03, 0.4],
 ['3', 0.01, 0.5, 0.7, 0.02, 0.3]]
</snippet></ROW><ROW><id>15624426</id><snippet>names</snippet></ROW><ROW><id>15624426</id><snippet>tmp = df.ix['ExistingTransition'].copy()
tmp['Transition'] = 'NewTransition'
tmp = tmp.set_index('Transition', append=True)
tmp.index = tmp.index.reorder_levels([2, 0, 1])
# ...Do whatever else needs to be done to this before applying as template...
df = df.append(tmp)
</snippet></ROW><ROW><id>15624426</id><snippet>names</snippet></ROW><ROW><id>15624426</id><snippet>set_values()</snippet></ROW><ROW><id>15624589</id><snippet>ne_110m_admin_0_countries.shp</snippet></ROW><ROW><id>15624589</id><snippet>&lt;Map background-color="black" srs="+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"&gt;
  &lt;Style name="My Style"&gt;
    &lt;Rule&gt;
      &lt;PolygonSymbolizer fill="#f2eff9" /&gt;
      &lt;LineSymbolizer stroke="rgb(50%,50%,50%)" stroke-width="5.0" /&gt;
    &lt;/Rule&gt;
  &lt;/Style&gt;
  &lt;Layer name="world" srs="+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"&gt;
    &lt;StyleName&gt;My Style&lt;/StyleName&gt;
    &lt;Datasource&gt;
      &lt;Parameter name="type"&gt;shape&lt;/Parameter&gt;
      &lt;Parameter name="file"&gt;ne_110m_admin_0_countries.shp&lt;/Parameter&gt;
    &lt;/Datasource&gt;
  &lt;/Layer&gt;
&lt;/Map&gt;
</snippet></ROW><ROW><id>15624589</id><snippet>import mapnik
stylesheet = 'world_style.xml'
image = 'world_style.png'
m = mapnik.Map(2000, 1500)
mapnik.load_map(m, stylesheet)
m.zoom_all() 
mapnik.render_to_file(m, image)
print "rendered image to '%s'" % image
</snippet></ROW><ROW><id>15624617</id><snippet>def Timer(swimmer):
    myFile = open("race.txt", "r")
    lists = myFile.readlines()
    found = [l for l in lists if l.startswith(swimmer)][0]  # Gets first found swimmer
    time = found.split()[-1]  # Gets last item (eg. time) in splitted list
    myFile.close()
    return time

print Timer('jack')
</snippet></ROW><ROW><id>15624698</id><snippet>.execute()</snippet></ROW><ROW><id>15624698</id><snippet>try:
    with con:
       con.execute("INSERT INTO A VALUES (?);", (v,))
       con.execute("UPDATE B SET hit_number=hit_number+1 WHERE user_id=(?);", (id,)
except sqlite3.IntegrityError:
   return False
return True
</snippet></ROW><ROW><id>15624728</id><snippet>django.views.generic.list_detail</snippet></ROW><ROW><id>15624728</id><snippet>django.views.generic.list.ListView</snippet></ROW></DATA>