<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>10178796</id><snippet>annotate()</snippet></ROW><ROW><id>10178796</id><snippet>Max()</snippet></ROW><ROW><id>10178796</id><snippet>letterversion__created</snippet></ROW><ROW><id>10178796</id><snippet>order_by()</snippet></ROW><ROW><id>10178796</id><snippet>from django.db.models import Max

lettersAll = Letter.objects.filter(
        item=i_iID,
        deleted__isnull=True
    ).annotate(
        last_created_version=Max('letterversion_created')
    ).order_by('-last_created_version')[:3]
</snippet></ROW><ROW><id>10178879</id><snippet>y-x</snippet></ROW><ROW><id>10178879</id><snippet>(2) (2,5)</snippet></ROW><ROW><id>10178879</id><snippet>(2,1) (2,5)</snippet></ROW><ROW><id>10178879</id><snippet>.reshape</snippet></ROW><ROW><id>10178879</id><snippet>y.reshape(2,1) - x
</snippet></ROW><ROW><id>10178879</id><snippet>array([[19, 18, 17, 16, 15],
   [ 4,  3,  2,  1,  0]])
</snippet></ROW><ROW><id>10179329</id><snippet>remove_specific_key</snippet></ROW><ROW><id>10179329</id><snippet>remove_keys</snippet></ROW><ROW><id>10179329</id><snippet>def remove_keys(obj, rubbish):
    if isinstance(obj, dict):
        obj = {
            key: remove_keys(value, rubbish) 
            for key, value in obj.iteritems()
            if key not in rubbish}
    elif isinstance(obj, list):
        obj = [remove_keys(item, rubbish)
                  for item in obj
                  if item not in rubbish]
    return obj
</snippet></ROW><ROW><id>10179329</id><snippet>rubbish</snippet></ROW><ROW><id>10179329</id><snippet>product = remove_keys(product, set(['_event', 'length']))
</snippet></ROW><ROW><id>10179329</id><snippet>remove_key</snippet></ROW><ROW><id>10179329</id><snippet>    obj = dict((key, remove_keys(value, rubbish))
               for key, value in obj.iteritems()
               if key not in rubbish)
</snippet></ROW><ROW><id>10179710</id><snippet>    &lt;TD STYLE="border-top: 1px solid #000000; border-bottom: 1px solid #000000; border-left: 1px solid #000000; border-right: 1px solid #000000" COLSPAN=3 ALIGN=LEFT VALIGN=BOTTOM SDNUM="1033;0;0.000000"&gt;&lt;FONT FACE="Calibri" COLOR="#000000"&gt;"""+str(C9)+"""&lt;/FONT&gt;&lt;/TD&gt;
</snippet></ROW><ROW><id>10179791</id><snippet>zip</snippet></ROW><ROW><id>10179791</id><snippet>dict</snippet></ROW><ROW><id>10179791</id><snippet>dict(zip(keys, values))
</snippet></ROW><ROW><id>10180166</id><snippet>word_list</snippet></ROW><ROW><id>10180166</id><snippet>word_list</snippet></ROW><ROW><id>10180166</id><snippet>word_list = ['love','does','not','make','the','world','go','round','love',
             'is','what','makes','the','ride','worthwhile']
#your code: 
from nltk.corpus import stopwords
for word in word_list:
    #print word
    if word in stopwords.words('english'):
       #print word #print out stopword for checking
       word_list.remove(word)
    else:
       print word   
#now put:
print word_list
#output:
['love', 'not', 'make', 'world', 'go', 'round', 'love', 'what',
 'makes', 'ride', 'worthwhile']
</snippet></ROW><ROW><id>10180409</id><snippet>params = [(str(keywords[i]), date, time, position[i]) for i in range(20)]
</snippet></ROW><ROW><id>10180745</id><snippet>any</snippet></ROW><ROW><id>10180745</id><snippet>all</snippet></ROW><ROW><id>10180745</id><snippet>def any(S):
    for x in S:
        if x:
            return x
    return S[-1]

def all(S):
    for x in S:
        if not x:
            return x
    return S[-1]
</snippet></ROW><ROW><id>10180745</id><snippet>any</snippet></ROW><ROW><id>10180745</id><snippet>all</snippet></ROW><ROW><id>10180745</id><snippet>any</snippet></ROW><ROW><id>10180745</id><snippet>all</snippet></ROW><ROW><id>10180745</id><snippet>and</snippet></ROW><ROW><id>10180745</id><snippet>or</snippet></ROW><ROW><id>10180806</id><snippet>open()</snippet></ROW><ROW><id>10180806</id><snippet>&gt;&gt;&gt; open(u'someUnicodeFilenameλ')
&lt;open file u'someUnicodeFilename\u03bb', mode 'r' at 0x7f1b97e70780&gt;
</snippet></ROW><ROW><id>10180806</id><snippet>with</snippet></ROW><ROW><id>10180806</id><snippet>open()</snippet></ROW><ROW><id>10180806</id><snippet>os.listdir()</snippet></ROW><ROW><id>10180806</id><snippet>&gt;&gt;&gt; os.listdir(".")
['someUnicodeFilename\xce\xbb', 'old', 'Dropbox', 'gdrb']
&gt;&gt;&gt; os.listdir(u".")
[u'someUnicodeFilename\u03bb', u'old', u'Dropbox', u'gdrb']
</snippet></ROW><ROW><id>10180806</id><snippet>open('someUnicodeFilename\xce\xbb')
&lt;open file 'someUnicodeFilenameλ', mode 'r' at 0x7f1b97e70660&gt;
</snippet></ROW><ROW><id>10180897</id><snippet>q.get_messages(n)</snippet></ROW><ROW><id>10180897</id><snippet>all_messages=[]
rs=q.get_messages(10)
while len(rs)&gt;0:
    all_messages.extend(rs)
    rs=q.get_messages(10)
</snippet></ROW><ROW><id>10180897</id><snippet>def dump(self, file_name, page_size=10, vtimeout=10, sep='\n'):
    """Utility function to dump the messages in a queue to a file
    NOTE: Page size must be &lt; 10 else SQS errors"""
</snippet></ROW><ROW><id>10181080</id><snippet>max</snippet></ROW><ROW><id>10181080</id><snippet>izip_longest</snippet></ROW><ROW><id>10181080</id><snippet>from itertools import izip_longest

d={1: [0, 1, 0, 0, 3, 0],
 2: [1, 0, 0, 0, 0, 4, 5],
 3: [0, 5, 6, 0, 1, 1]}

# there are other variations like
# [max(column) for column in izip_longest(*d.itervalues())]
print map(max, izip_longest(*d.values()))
# [1, 5, 6, 0, 3, 4, 5]
</snippet></ROW><ROW><id>10181080</id><snippet>zip_longest</snippet></ROW><ROW><id>10181080</id><snippet>d = {1: {'a': [0, 1, 0, 0, 3, 0]},
     2: {'a': [1, 0, 0, 0, 0, 4, 5]},
     3: {'a': [0, 5, 6, 0, 1, 1]}}

def value_gen(obj):
    for key in obj:
        yield obj[key]['a']
</snippet></ROW><ROW><id>10181080</id><snippet>map(max, izip_longest(*value_gen(d)))
</snippet></ROW><ROW><id>10181203</id><snippet>lxml</snippet></ROW><ROW><id>10181203</id><snippet>&gt;&gt;&gt; from lxml.etree import fromstring
&gt;&gt;&gt; tree = fromstring('''&lt;section&gt; Fubar, I'm so fubar, fubar and even more &lt;fref bar="baz"&gt;fubare&lt;/fref&gt;. And yet more fubar. &lt;/section&gt;''')
&gt;&gt;&gt; elem = tree.xpath('/section/fref')[0]
&gt;&gt;&gt; elem.text
'fubare'
&gt;&gt;&gt; elem.tail
'. And yet more fubar. '
&gt;&gt;&gt; elem.getparent().text
" Fubar, I'm so fubar, fubar and even more "
</snippet></ROW><ROW><id>10181203</id><snippet>lxml.etree</snippet></ROW><ROW><id>10181203</id><snippet>&gt;&gt;&gt; from lxml.etree import tostring
&gt;&gt;&gt; tostring(html, method="text")
" Fubar, I'm so fubar, fubar and even more fubare. And yet more fubar. "
</snippet></ROW><ROW><id>10181401</id><snippet>find_packages()</snippet></ROW><ROW><id>10181401</id><snippet>tests</snippet></ROW><ROW><id>10181401</id><snippet>setup(name='mydjangoapp',
  version='1.0',
  description='A django app',
  package_dir={'':'mock'},
  packages=find_packages('mock', exclude=['tests', '*.tests']),
)
</snippet></ROW><ROW><id>10181401</id><snippet>tests.py</snippet></ROW><ROW><id>10181401</id><snippet>MANIFEST.in</snippet></ROW><ROW><id>10181401</id><snippet>distutils</snippet></ROW><ROW><id>10181401</id><snippet>tests.py</snippet></ROW><ROW><id>10181401</id><snippet>recursive-exclude * tests.py
</snippet></ROW><ROW><id>10181401</id><snippet>marketing/tests.py</snippet></ROW><ROW><id>10181401</id><snippet>python setup.py clean --all
</snippet></ROW><ROW><id>10181462</id><snippet>&gt;&gt;&gt; with open('test.test') as f:
...     num_to_scores = {}
...     for linenum, line in enumerate(f):
...         splitline = line.split()
...         if 'danny' in line and 'james' in line:
...             store_next_vals = True
...             dannyloc, jamesloc = splitline.index('danny'), splitline.index('james')
...         else:
...             if store_next_vals:
...                 num_to_scores[linenum] = {"james":splitline[jamesloc], "danny":splitline[dannyloc]}
...                 store_next_vals = False
&gt;&gt;&gt; with open('out.test', 'w') as f:
...     f.write('line number,james,danny\n')
...     for linenum in num_to_scores:
...         f.write('%d,%s,%s\n' % (linenum, num_to_scores[linenum]['james'], num_to_scores[linenum]['danny']))
&gt;&gt;&gt; print open('out.test').read()
line number,james,danny
1,6,3
7,15,10
</snippet></ROW><ROW><id>10181503</id><snippet>dummy.func1</snippet></ROW><ROW><id>10181503</id><snippet>self</snippet></ROW><ROW><id>10181503</id><snippet>def greet(f,name):
    d = dummy()
    f(d, name)

greet(dummy.func1,'Bala')
</snippet></ROW><ROW><id>10181656</id><snippet>ser = serial.Serial('/dev/ttyACM0')
</snippet></ROW><ROW><id>10181699</id><snippet>values</snippet></ROW><ROW><id>10181699</id><snippet>annotate</snippet></ROW><ROW><id>10181699</id><snippet>Song</snippet></ROW><ROW><id>10181699</id><snippet>song</snippet></ROW><ROW><id>10181699</id><snippet>song__id</snippet></ROW><ROW><id>10181699</id><snippet>Song.objects.get(id=...)
</snippet></ROW><ROW><id>10181699</id><snippet>song__artist</snippet></ROW><ROW><id>10181699</id><snippet>values</snippet></ROW><ROW><id>10181699</id><snippet>annotate</snippet></ROW><ROW><id>10181699</id><snippet>SongPlay.past_month
    .filter(user=user)
    .values('song__artist')
    .annotate(plays=Count('song__artist'))
    .order_by('-plays')[:20]
</snippet></ROW><ROW><id>10181810</id><snippet>from threading import Lock
from flask import Flask
app = Flask(__name__)

a = 1
b = 2
c = 3
lock = Lock()

@app.route("/")
def hello():
    with lock:
        a += 1
        b += a
        c += b
    return "Hello World!"

if __name__ == "__main__":
    app.run()
</snippet></ROW><ROW><id>10182324</id><snippet>xdata</snippet></ROW><ROW><id>10182324</id><snippet>xprime = 1000*x</snippet></ROW><ROW><id>10182324</id><snippet>xprime</snippet></ROW><ROW><id>10182324</id><snippet>y</snippet></ROW><ROW><id>10182324</id><snippet>q</snippet></ROW><ROW><id>10182324</id><snippet>y = q[0] + q[1] * (xprime ** q[2]) 
  = q[0] + q[1] * ((1000*x) ** q[2])
</snippet></ROW><ROW><id>10182324</id><snippet>p[0] = q[0]
p[1] = q[1] * (1000**q[2])
p[2] = q[2]
</snippet></ROW><ROW><id>10182324</id><snippet>y = p[0] + p[1] * (x ** p[2])</snippet></ROW><ROW><id>10182324</id><snippet>[max(ydata), -1, -0.5]</snippet></ROW><ROW><id>10182324</id><snippet>from scipy import optimize
import numpy as np

def fitfunc(p, x):
    return p[0] + p[1] * (x ** p[2])
def errfunc(p, x, y):
    return y - fitfunc(p, x)

xdata=np.array([ 0.00010851,  0.00021701,  0.00043403,  0.00086806,
                 0.00173611, 0.00347222])
ydata=np.array([ 29.56241016,  29.82245508,  25.33930469,  19.97075977,
                 12.61276074, 7.12695312])

N = 5000
xprime = xdata * N

qout,success = optimize.leastsq(errfunc, [max(ydata),-1,-0.5],
                               args=(xprime, ydata),maxfev=3000)

out = qout[:]
out[0] = qout[0]
out[1] = qout[1] * (N**qout[2])
out[2] = qout[2]
print "%g + %g*x^%g"%(out[0],out[1],out[2])
</snippet></ROW><ROW><id>10182504</id><snippet>class CompanyAdmin(admin.ModelAdmin):
    def render_change_form(self, request, context, *args, **kwargs):
         context['adminform'].form.fields['theme'].queryset = Theme.objects.filter(name__iexact='company')
         return super(CompanyAdmin, self).render_change_form(request, context, args, kwargs)         
</snippet></ROW><ROW><id>10182530</id><snippet>self.conn</snippet></ROW><ROW><id>10182530</id><snippet>conn</snippet></ROW><ROW><id>10182530</id><snippet>get_conn</snippet></ROW><ROW><id>10182530</id><snippet>self.conn</snippet></ROW><ROW><id>10182530</id><snippet>get_conn</snippet></ROW><ROW><id>10182530</id><snippet>self.conn</snippet></ROW><ROW><id>10182530</id><snippet>class DBConnection:
    def __init__(self, DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME):
        self.host = DB_HOST
        self.port = DB_PORT
        self.name = DB_NAME
        self.user = DB_USER
        self.password = DB_PASSWORD
        self.conn = None

    def get_conn(self):
        self.conn = MySQLdb.connect(host = self.host,
                                    port = self.port,
                                    db = self.name,
                                    user = self.user,
                                    passwd = self.password)
</snippet></ROW><ROW><id>10182530</id><snippet>self.conn</snippet></ROW><ROW><id>10182530</id><snippet>get_conn</snippet></ROW><ROW><id>10182530</id><snippet>def get_conn(self):
    if self.conn is None:
        self.conn = MySQLdb.connect(host = self.host,
                                    port = self.port,
                                    db = self.name,
                                    user = self.user,
                                    passwd = self.password)
    return self.conn
</snippet></ROW><ROW><id>10182530</id><snippet>get_conn</snippet></ROW><ROW><id>10182530</id><snippet>mydbconnobj = DBConnection('localhost',3306,'foouser','foopass','foodbname')
mydbconn = mydbconnobj.get_conn()
</snippet></ROW><ROW><id>10182547</id><snippet>open()</snippet></ROW><ROW><id>10182547</id><snippet>for line in f:
    # do something with the line
</snippet></ROW><ROW><id>10182547</id><snippet>f.readline()</snippet></ROW><ROW><id>10182547</id><snippet>f.readlines()</snippet></ROW><ROW><id>10182848</id><snippet>foo_element = soup.find('macro', attrs={"name" : "foo"}) # returns the foo element
foo_element['value'] = "baz" # changes the value attribute
</snippet></ROW><ROW><id>10182901</id><snippet>def camel(s):
    return (s != s.lower() and s != s.upper())

tests = [
        "camel",
        "camelCase",
        "CamelCase",
        "CAMELCASE",
        "camelcase",
        "Camelcase",
        "Case"
        ]

for test in tests:
    print test, camel(test)
</snippet></ROW><ROW><id>10182901</id><snippet>camel False
camelCase True
CamelCase True
CAMELCASE False
camelcase False
Camelcase True
Case True
</snippet></ROW><ROW><id>10182957</id><snippet>resp, items = m.search(None, 'FROM', '"Impact Stats Script"')
</snippet></ROW><ROW><id>10182957</id><snippet>resp, items = m.search(None, 'UNSEEN', 'FROM', '"Impact Stats Script"')
</snippet></ROW><ROW><id>10182957</id><snippet>imaplib</snippet></ROW><ROW><id>10182957</id><snippet>UNSEEN</snippet></ROW><ROW><id>10182957</id><snippet>  UNSEEN
     Messages that do not have the \Seen flag set.
</snippet></ROW><ROW><id>10182984</id><snippet>cur = sqlite_conn.cursor()

cur.execute("SELECT name FROM sqlite_master WHERE type='table'")

    rows = cur.fetchall()

    for row in rows:
        print row[0]
</snippet></ROW><ROW><id>10182984</id><snippet>SELECT * from &lt;Tablename&gt;</snippet></ROW><ROW><id>10183147</id><snippet>from collections import defaultdict
import re

# card_list = card_area.splitlines()
card_list = [
    "2 Cardname", "3 Cardname Two", "1 Cardname Three",
    "Cardname", "Cardname Two", "Cardname Three",
    "1x Cardname", "4X Cardname Two", "2 X Cardname Three",
]

card_dict = defaultdict(int)

pat = re.compile(r'(\d*)\s*(?:[xX]\s+)?(\S.*)')

for card in card_list:
    m = re.search(pat, card)
    if not m:
        continue
    if m.group(1):
        qty = int(m.group(1))
    else:
        qty = 1

    name = m.group(2)
    card_dict[name] += qty


if not card_dict:
    print("empty card_dict!")
else:
    for name in sorted(card_dict):
        print("%20s|%4d" % (name, card_dict[name]))
</snippet></ROW><ROW><id>10183147</id><snippet>(?:</snippet></ROW><ROW><id>10183147</id><snippet>(</snippet></ROW><ROW><id>10183147</id><snippet>defaultdict()</snippet></ROW><ROW><id>10183147</id><snippet>(?:[xX]\s+)?</snippet></ROW><ROW><id>10183147</id><snippet>(?:[xX]\s*)?</snippet></ROW><ROW><id>10183147</id><snippet>+</snippet></ROW><ROW><id>10183147</id><snippet>*</snippet></ROW><ROW><id>10183147</id><snippet>\s</snippet></ROW><ROW><id>10183148</id><snippet>$ python -m timeit 'd = {i:{j:"a" for j in range(1000)} for i in range(1000)};a = [d[i][j] for j in range(1000) for i in range(1000)];'
10 loops, best of 3: 316 msec per loop
$ python -m timeit 'd = {(i, j):"a" for j in range(1000) for i in range(1000)};a = [d[i, j] for j in range(1000) for i in range(1000)];'
10 loops, best of 3: 970 msec per loop
</snippet></ROW><ROW><id>10183148</id><snippet>$ python -m timeit 'a = [(hash(i), hash(j)) for i in range(1000) for j in range(1000)]'
10 loops, best of 3: 304 msec per loop
$ python -m timeit 'a = [hash((i, j)) for i in range(1000) for j in range(1000)]'
10 loops, best of 3: 172 msec per loop
$ python -m timeit 'd = {i:{j:"a" for j in range(1000)} for i in range(1000)}'
10 loops, best of 3: 101 msec per loop
$ python -m timeit 'd = {(i, j):"a" for j in range(1000) for i in range(1000)}'
10 loops, best of 3: 645 msec per loop
</snippet></ROW><ROW><id>10183192</id><snippet>top_artists_file = open("C:\artist.txt", "w")
</snippet></ROW><ROW><id>10183192</id><snippet>C:  \a rtist.txt
</snippet></ROW><ROW><id>10183192</id><snippet>\a</snippet></ROW><ROW><id>10183192</id><snippet># doubling the backslash prevents misinterpreting the 'a'
top_artists_file = open("C:\\artist.txt", "w")
</snippet></ROW><ROW><id>10183192</id><snippet># define the string literal as a raw string to prevent the escape behavior
top_artists_file = open(r"C:\artist.txt", "w")
</snippet></ROW><ROW><id>10183192</id><snippet># forward slashes work just fine as path separators on Windows.
top_artists_file = open("C:/artist.txt", "w")
</snippet></ROW><ROW><id>10183340</id><snippet>cd /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/</snippet></ROW><ROW><id>10183340</id><snippet>cd ~/Downloads</snippet></ROW><ROW><id>10183340</id><snippet>sh install_superpack.sh</snippet></ROW><ROW><id>10183340</id><snippet>are you installing from a repository cloned to this machine</snippet></ROW><ROW><id>10183340</id><snippet>import numpy, scipy, matplotlib</snippet></ROW><ROW><id>10183465</id><snippet>dict</snippet></ROW><ROW><id>10183465</id><snippet>import json

with open('grocery_stock.txt', 'r') as file:
    grocery_stock = json.load(file)

...

with open('grocery_stock.txt', 'w') as file:
    json.dump(grocery_stock, file, indent=4)
</snippet></ROW><ROW><id>10183465</id><snippet>{
    "title": "Sample Konfabulator Widget",
    "name": "main_window",
    "width": 500,
    "height": 500
}
</snippet></ROW><ROW><id>10183465</id><snippet>with open('grocery_stock.txt', 'w') as file:
    for key, value in grocery_stock.items():
        file.write(key+" "+value+"\n")
</snippet></ROW><ROW><id>10183465</id><snippet>with open('grocery_stock.txt','r') as file:
    grocery_stock = {key: value for key, *value in (line.split() for line in file if line.strip())}
</snippet></ROW><ROW><id>10183927</id><snippet>data = {'test_dict':test_dict}
return render_to_response('home.html',data,context_instance=RequestContext(request))
</snippet></ROW><ROW><id>10183927</id><snippet>template = Template()
for k, v in dictionary.items():
    template[k] = v
</snippet></ROW><ROW><id>10183966</id><snippet>def file_split(f, delim=',', bufsize=1024):
    prev = ''
    while True:
        s = f.read(bufsize)
        if not s:
            break
        split = s.split(delim)
        if len(split) &gt; 1:
            yield prev + split[0]
            prev = split[-1]
            for x in split[1:-1]:
                yield x
        else:
            prev += s
    if prev:
        yield prev
</snippet></ROW><ROW><id>10183966</id><snippet>for item in file_split(open('filename.txt')):
    doStuff(item)
</snippet></ROW><ROW><id>10184046</id><snippet>/etc</snippet></ROW><ROW><id>10184046</id><snippet>config</snippet></ROW><ROW><id>10184046</id><snippet>ConfigParser</snippet></ROW><ROW><id>10184046</id><snippet>config</snippet></ROW><ROW><id>10184149</id><snippet>from futures import Future
</snippet></ROW><ROW><id>10184149</id><snippet>from future import Future
</snippet></ROW><ROW><id>10184149</id><snippet>future</snippet></ROW><ROW><id>10184149</id><snippet>concurrent.futures</snippet></ROW><ROW><id>10184259</id><snippet># http://stackoverflow.com/questions/6849600/does-anyone-have-a-categorized-xml-corpus-reader-for-nltk
from CatXMLReader import CategorizedXMLCorpusReader

from nltk.corpus import cicero
from nltk import Text

fileids = cicero.abspaths()
reader = CategorizedXMLCorpusReader('/', fileids, cat_file='cats.txt')
words = Text(reader.words(fileids))
print words.concordance('et')
</snippet></ROW><ROW><id>10184716</id><snippet>datetime.date</snippet></ROW><ROW><id>10184716</id><snippet>date</snippet></ROW><ROW><id>10184716</id><snippet>date</snippet></ROW><ROW><id>10184716</id><snippet>&gt;&gt;&gt; from datetime import timedelta, date, datetime
&gt;&gt;&gt; whole = date.today()
&gt;&gt;&gt; wholestr = str(whole)
&gt;&gt;&gt; vali = wholestr.split('-')
&gt;&gt;&gt; year = int(vali[0])
&gt;&gt;&gt; month = int(vali[1])
&gt;&gt;&gt; day = int(vali[2])
&gt;&gt;&gt; sub = date(year, month, 16)
&gt;&gt;&gt; sub
datetime.date(2012, 4, 16)
&gt;&gt;&gt; print sub
2012-04-16
</snippet></ROW><ROW><id>10184716</id><snippet>datetime</snippet></ROW><ROW><id>10184716</id><snippet>&gt;&gt;&gt; datetime(year, month, 16)
datetime.datetime(2012, 4, 16, 0, 0)
</snippet></ROW><ROW><id>10184716</id><snippet>import datetime</snippet></ROW><ROW><id>10184845</id><snippet>def sum67(nums):
    nums=nums[:]
    while 6 in nums:
        i=nums.index(6)
        j=nums.index(7,i)
        del nums[i:j+1]
    return sum(nums)
</snippet></ROW><ROW><id>10184883</id><snippet>form = OrderCreateForm(creator_list=dictionary['creator_list'], data=request.POST)
</snippet></ROW><ROW><id>10184883</id><snippet>data</snippet></ROW><ROW><id>10185041</id><snippet>create_line</snippet></ROW><ROW><id>10185041</id><snippet>from Tkinter import Tk, Canvas, mainloop
master = Tk()
points = [10, 10, 50, 10, 50, 50, 10, 50 ]
c = Canvas(master, width=200, height=100)
c.pack()
c.create_line(points + points[0:2], fill = "red")
mainloop()
</snippet></ROW><ROW><id>10185053</id><snippet>[server:main]
use = egg:waitress
host = 0.0.0.0
port = 80
</snippet></ROW><ROW><id>10185403</id><snippet>from PySide.QtCore import *
from PySide.QtGui import *

import sys


class Main(QWidget):


    def __init__(self, parent=None):
        super(Main, self).__init__(parent)

        layout  = QHBoxLayout(self)

        picture = PictureLabel("pic.png", self)
        picture.pictureClicked.connect(self.anotherSlot)

        layout.addWidget(picture)
        layout.addWidget(QLabel("click on the picture"))

    def anotherSlot(self, passed):
        print passed
        print "now I'm in Main.anotherSlot"


class PictureLabel(QLabel):

    pictureClicked = Signal(str) # can be other types (list, dict, object...)

    def __init__(self, image, parent=None):
        super(PictureLabel, self).__init__(parent)        
        self.setPixmap(image)

    def mousePressEvent(self, event):
        print "from PictureLabel.mousePressEvent"
        self.pictureClicked.emit("emit the signal")

a = QApplication([])
m = Main()
m.show()
sys.exit(a.exec_())
</snippet></ROW><ROW><id>10185481</id><snippet>bookin.replace(ogword, subword)
</snippet></ROW><ROW><id>10185481</id><snippet>bookin = bookin.replace(ogword, subword)
</snippet></ROW><ROW><id>10185481</id><snippet>replace</snippet></ROW><ROW><id>10185941</id><snippet>py2app</snippet></ROW><ROW><id>10185941</id><snippet>py2app</snippet></ROW><ROW><id>10186332</id><snippet>WSGIServerAlias</snippet></ROW><ROW><id>10186360</id><snippet>itertools.groupby</snippet></ROW><ROW><id>10186360</id><snippet>import csv
import datetime
import itertools

with open("file.csv", "rb") as quotes:
    csvReader = csv.DictReader(quotes)

    lmb = lambda d: datetime.datetime.strptime(d["Date"], "%d-%b-%Y").date()
    for k, g in itertools.groupby(csvReader, key = lmb):
        # do stuff per day
        counts = (int(data["Count"]) for data in g)
        print "On {0} the total count was {1}".format(k, sum(counts))
</snippet></ROW><ROW><id>10186360</id><snippet>Date,Time,Count
1-Apr-2012,13:23,10
2-Apr-2012,10:57,5
2-Apr-2012,11:38,23
2-Apr-2012,15:10,1
3-Apr-2012,17:47,123
3-Apr-2012,18:21,8
</snippet></ROW><ROW><id>10186360</id><snippet>On 2012-04-01 the total count was 10
On 2012-04-02 the total count was 29
On 2012-04-03 the total count was 131
</snippet></ROW><ROW><id>10187330</id><snippet>from scikits.audiolab import Sndfile, play
f = Sndfile(filename, 'r')
data = f.read_frames(10000)
play(data) # Just to test the read data
</snippet></ROW><ROW><id>10187361</id><snippet>True</snippet></ROW><ROW><id>10187361</id><snippet>False</snippet></ROW><ROW><id>10187361</id><snippet>True</snippet></ROW><ROW><id>10187770</id><snippet>TransactionTestCase</snippet></ROW><ROW><id>10188144</id><snippet>Class.variable</snippet></ROW><ROW><id>10188144</id><snippet>strings = { "string": [[arg1, arg2, arg3],[arg1, arg2, arg3]], 
            "string2": [[arg1, arg2, arg3],[arg1, arg2, arg3]] }
</snippet></ROW><ROW><id>10188144</id><snippet>strings[separateVariable][0]</snippet></ROW><ROW><id>10188144</id><snippet>"string"[separateVariable][0]</snippet></ROW><ROW><id>10188144</id><snippet>separateVariable</snippet></ROW><ROW><id>10188344</id><snippet>extra_environ = {'HTTP_X_REQUESTED_WITH' : 'XMLHttpRequest'}
</snippet></ROW><ROW><id>10188677</id><snippet>b[:,:,None] + c
</snippet></ROW><ROW><id>10188677</id><snippet>b[:,:,newaxis] + c
</snippet></ROW><ROW><id>10188677</id><snippet>* from numpy</snippet></ROW><ROW><id>10188677</id><snippet>import numpy as np</snippet></ROW><ROW><id>10188677</id><snippet>import numpy as np
a = np.array([10,20]).reshape(2,1)
b = np.array([100,200,300]).reshape(1,3)
c = np.arange(1,11).reshape(1,1,10)

print a + b
print a + c
print b[:,:,np.newaxis] + c
</snippet></ROW><ROW><id>10188796</id><snippet>temp = {}
for k,v in d.items():
    for key,val in v.items():
        fn = val.split('.')[0]
        if fn.isdigit():
            temp.setdefault(k, set()).add(fn)
print dict((k, list(v)) for k, v in temp.items())
</snippet></ROW><ROW><id>10188796</id><snippet>{'a': ['100100', '100200'], 'b': ['100100']}
</snippet></ROW><ROW><id>10188796</id><snippet>dict((k, list(set(e.split('.')[0] for e in v.values() if e.split('.')[0].isdigit()))) for k,v in d.items())
</snippet></ROW><ROW><id>10188816</id><snippet>&gt;&gt;&gt; [' '.join(macrolist[5 * i: 5 * i + 5]) for i in range(0, len(macrolist) / 5)]
['hans are we the baddies', 'cake or death cake please', 'do you have a flag']
</snippet></ROW><ROW><id>10188837</id><snippet>import subprocess
def _run_command( _args, input=[],withShell=False):
    """
    Pass args as array, like ['echo', 'hello']
    Waits for completion and returns
    tuple (returncode, stdout, stderr)
    """
    p = subprocess.Popen(_args, shell = withShell,
                         stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    [p.stdin.write(v) for v in input]
    stdout, stderr = p.communicate()
    return p.returncode, stdout, stderr

_,op,er = _run_command(['cat'],["this","is","for","testing"])
value="".join(op)
print value

_,op,er = _run_command(['ls',"/tmp"])
value="".join(op)
print value
</snippet></ROW><ROW><id>10188887</id><snippet>const char bullet_utf8[] = "\xe2\x80\xa2";
gtk_text_buffer_insert_at_cursor(textBuffer, bullet_utf8, strlen(bullet_utf8));
</snippet></ROW><ROW><id>10189754</id><snippet>openfile = open('test.txt','w')
</snippet></ROW><ROW><id>10189754</id><snippet>openfile.close()
</snippet></ROW><ROW><id>10189754</id><snippet>openfile.write(str(cost)+'\n')
</snippet></ROW><ROW><id>10189812</id><snippet>test_samp</snippet></ROW><ROW><id>10189812</id><snippet>modules['test_samp']</snippet></ROW><ROW><id>10189812</id><snippet>scripts.test_samp</snippet></ROW><ROW><id>10189812</id><snippet>__init__.py</snippet></ROW><ROW><id>10189812</id><snippet>import scripts</snippet></ROW><ROW><id>10189812</id><snippet>scripts.test_samp.function("test")</snippet></ROW><ROW><id>10189812</id><snippet>reload(scripts)</snippet></ROW><ROW><id>10189937</id><snippet>iterkeys</snippet></ROW><ROW><id>10189937</id><snippet>viewkeys</snippet></ROW><ROW><id>10189937</id><snippet>keys</snippet></ROW><ROW><id>10189937</id><snippet>iterkeys</snippet></ROW><ROW><id>10189937</id><snippet>viewkeys</snippet></ROW><ROW><id>10189937</id><snippet>keys</snippet></ROW><ROW><id>10189937</id><snippet>viewkeys</snippet></ROW><ROW><id>10189980</id><snippet>blue</snippet></ROW><ROW><id>10189980</id><snippet>sky</snippet></ROW><ROW><id>10189980</id><snippet>sky != 'blue'</snippet></ROW><ROW><id>10189980</id><snippet>not sky == 'blue'</snippet></ROW><ROW><id>10189980</id><snippet>'blue'</snippet></ROW><ROW><id>10189980</id><snippet>BLUE = 'blue'

if sky != BLUE:
    make_the_sky(BLUE)
</snippet></ROW><ROW><id>10189980</id><snippet>has_key</snippet></ROW><ROW><id>10189980</id><snippet>has_key</snippet></ROW><ROW><id>10189980</id><snippet>'blue' in sky</snippet></ROW><ROW><id>10189980</id><snippet>'blue' not in sky</snippet></ROW><ROW><id>10190016</id><snippet>Process</snippet></ROW><ROW><id>10190016</id><snippet>Process</snippet></ROW><ROW><id>10190016</id><snippet>Process</snippet></ROW><ROW><id>10190016</id><snippet>Process</snippet></ROW><ROW><id>10190016</id><snippet>class Event(Simpy.Process):
    def call_do(self, subject):
        subject.do()
</snippet></ROW><ROW><id>10190016</id><snippet>Process</snippet></ROW><ROW><id>10190016</id><snippet>event</snippet></ROW><ROW><id>10190016</id><snippet>class mod():
    def do(self):
        print(Simpy.now(), "Do!")
</snippet></ROW><ROW><id>10190016</id><snippet>while True:
    e = Event()
    Simpy.activate(e, e.call_do(self.target), delay = 5.0)
    yield Simpy.hold, self, 1.0
</snippet></ROW><ROW><id>10190481</id><snippet>ifconfig eth0 down &amp;&amp; ifconfig br0 up</snippet></ROW><ROW><id>10190481</id><snippet>ifconfig br0 down &amp;&amp; ifconfig eth0 up</snippet></ROW><ROW><id>10190481</id><snippet>ip route ls</snippet></ROW><ROW><id>10190481</id><snippet>ip route add &lt;whatever&gt; table 2
ip rule add from br0 table 2
</snippet></ROW><ROW><id>10190481</id><snippet>network-bridge</snippet></ROW><ROW><id>10190481</id><snippet># Usage: transfer_addrs src dst
# Copy all IP addresses (including aliases) from device $src to device $dst.
transfer_addrs () {
    local src=$1
    local dst=$2
    # Don't bother if $dst already has IP addresses.
    if ip addr show dev ${dst} | egrep -q '^ *inet ' ; then
        return
    fi
    # Address lines start with 'inet' and have the device in them.
    # Replace 'inet' with 'ip addr add' and change the device name $src
    # to 'dev $src'.
    ip addr show dev ${src} | egrep '^ *inet ' | sed -e "
s/inet/ip addr add/
s@\([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+/[0-9]\+\)@\1@
s/${src}/dev ${dst}/
" | sh -e
    # Remove automatic routes on destination device
    ip route list | sed -ne "
/dev ${dst}\( \|$\)/ {
  s/^/ip route del /
  p
}" | sh -e
}

# Usage: transfer_routes src dst
# Get all IP routes to device $src, delete them, and
# add the same routes to device $dst.
# The original routes have to be deleted, otherwise adding them
# for $dst fails (duplicate routes).
transfer_routes () {
    local src=$1
    local dst=$2
    # List all routes and grep the ones with $src in.
    # Stick 'ip route del' on the front to delete.
    # Change $src to $dst and use 'ip route add' to add.
    ip route list | sed -ne "
/dev ${src}\( \|$\)/ {
  h
  s/^/ip route del /
  P
  g
  s/${src}/${dst}/
  s/^/ip route add /
  P
  d
}" | sh -e
}
</snippet></ROW><ROW><id>10190778</id><snippet>কয়া</snippet></ROW><ROW><id>10190778</id><snippet>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; map(unicodedata.name, u'কয়া')
['BENGALI LETTER KA', 'BENGALI LETTER YA', 'BENGALI SIGN NUKTA', 'BENGALI VOWEL SIGN AA']
</snippet></ROW><ROW><id>10190778</id><snippet>BanglaAlphabet</snippet></ROW><ROW><id>10190778</id><snippet>u</snippet></ROW><ROW><id>10190778</id><snippet>\u0995</snippet></ROW><ROW><id>10190778</id><snippet>BanglaWordPattern</snippet></ROW><ROW><id>10190778</id><snippet>|</snippet></ROW><ROW><id>10190778</id><snippet>(stuff1|stuff2|stuff3|stuff4|)+</snippet></ROW><ROW><id>10190778</id><snippet>m = re.match(BanglaWordPattern, w[::-1]); print m.group(0)</snippet></ROW><ROW><id>10190778</id><snippet>(?:...)</snippet></ROW><ROW><id>10190778</id><snippet>import re

bangla_categories = dict(
    consonant         = u'[\u0995-\u09B9\u09CE\u09DC-\u09DF]',
    independent_vowel = u'[\u0985-\u0994]',
    dependent_vowel   = u'[\u09BE-\u09CC\u09D7]',
    nukta             = u'[\u09BC]',
)

bangla_word_re = re.compile(ur"""(?:
    {consonant}{nukta}{dependent_vowel} |
    {consonant}{dependent_vowel} |
    {independent_vowel} |
    {consonant}
)+(?:\b|$)""".format(**bangla_categories), re.VERBOSE)
</snippet></ROW><ROW><id>10191021</id><snippet>interpolation='none'</snippet></ROW><ROW><id>10191021</id><snippet>import numpy as np
import matplotlib.pyplot as plt

data = np.random.rand(4,4)

fig = plt.figure()
ax = fig.add_subplot(111)
ax.imshow(data,interpolation='none')

fig.savefig('test.eps')
fig.savefig('test.pdf')
fig.savefig('test.png')
</snippet></ROW><ROW><id>10191526</id><snippet>if ( $foo =~ /$ipv4_re/ or $foo =~ /$ipv6_re/ or $foo =~ /$hostname_re/ ) {
    ...
}
</snippet></ROW><ROW><id>10191776</id><snippet>a1 --- [list1, list2] --- list1 = [0, 0]
                      --- list2 = [0, 0]

a2 --- [list3, list3] --- list3 = [0, 0]
</snippet></ROW><ROW><id>10191776</id><snippet>&gt;&gt;&gt; a2 = [[0]*2 for _ in range(2)]
&gt;&gt;&gt; a2[0][0] = 1
&gt;&gt;&gt; a2
[[1, 0], [0, 0]]
</snippet></ROW><ROW><id>10191776</id><snippet>copy</snippet></ROW><ROW><id>10191776</id><snippet>[0]*2</snippet></ROW><ROW><id>10191776</id><snippet>int</snippet></ROW><ROW><id>10191796</id><snippet>{% if some_dict %}
    Some (k, v) - {{ some_dict.items.0 }}
{% endif %}
</snippet></ROW><ROW><id>10191804</id><snippet>requests.post</snippet></ROW><ROW><id>10191804</id><snippet>payload = {'some':'data'}
headers = {'content-type': 'application/json'}
url = "https://www.toggl.com/api/v6/" + data_description + ".json"
response = requests.delete(url, data=json.dumps(payload), headers=headers,auth=HTTPBasicAuth(toggl_token, 'api_token'))
</snippet></ROW><ROW><id>10192611</id><snippet>multiprocessing.current_process()</snippet></ROW><ROW><id>10192611</id><snippet>import multiprocessing

def f(x):
    print multiprocessing.current_process()
    return x * x

p = multiprocessing.Pool()
print p.map(f, range(6))
</snippet></ROW><ROW><id>10192611</id><snippet>$ python foo.py 
&lt;Process(PoolWorker-1, started daemon)&gt;
&lt;Process(PoolWorker-2, started daemon)&gt;
&lt;Process(PoolWorker-3, started daemon)&gt;
&lt;Process(PoolWorker-1, started daemon)&gt;
&lt;Process(PoolWorker-2, started daemon)&gt;
&lt;Process(PoolWorker-4, started daemon)&gt;
[0, 1, 4, 9, 16, 25]
</snippet></ROW><ROW><id>10192611</id><snippet>id</snippet></ROW><ROW><id>10192611</id><snippet>ident</snippet></ROW><ROW><id>10192611</id><snippet>pid</snippet></ROW><ROW><id>10192611</id><snippet>Process</snippet></ROW><ROW><id>10192611</id><snippet>multiprocessing</snippet></ROW><ROW><id>10192611</id><snippet>itertools.counter</snippet></ROW><ROW><id>10192611</id><snippet>_identity</snippet></ROW><ROW><id>10192611</id><snippet>Process</snippet></ROW><ROW><id>10192611</id><snippet>':'.join(...)</snippet></ROW><ROW><id>10192611</id><snippet>Pool</snippet></ROW><ROW><id>10192611</id><snippet>replace</snippet></ROW><ROW><id>10192611</id><snippet>Process</snippet></ROW><ROW><id>10192611</id><snippet>_identity</snippet></ROW><ROW><id>10192611</id><snippet>import multiprocessing

def f(x):
    created = multiprocessing.Process()
    current = multiprocessing.current_process()
    print 'running:', current.name, current._identity
    print 'created:', created.name, created._identity
    return x * x

p = multiprocessing.Pool()
print p.map(f, range(6))
</snippet></ROW><ROW><id>10192611</id><snippet>$ python foo.py 
running: PoolWorker-1 (1,)
created: Process-1:1 (1, 1)
running: PoolWorker-2 (2,)
created: Process-2:1 (2, 1)
running: PoolWorker-3 (3,)
created: Process-3:1 (3, 1)
running: PoolWorker-1 (1,)
created: Process-1:2 (1, 2)
running: PoolWorker-2 (2,)
created: Process-2:2 (2, 2)
running: PoolWorker-4 (4,)
created: Process-4:1 (4, 1)
[0, 1, 4, 9, 16, 25]
</snippet></ROW><ROW><id>10192631</id><snippet>wxWidgets</snippet></ROW><ROW><id>10192634</id><snippet>def wrap(to_wrap, wrap_in):
    contents = to_wrap.replace_with(wrap_in)
    wrap_in.append(contents)
</snippet></ROW><ROW><id>10192634</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup("&lt;body&gt;&lt;a&gt;Some text&lt;/a&gt;&lt;/body&gt;")
wrap(soup.a, soup.new_tag("b"))
print soup.body
# &lt;body&gt;&lt;b&gt;&lt;a&gt;Some text&lt;/a&gt;&lt;/b&gt;&lt;/body&gt;
</snippet></ROW><ROW><id>10192634</id><snippet>for footnote in soup.find_all("div", "footnote"):
    new_tag = soup.new_tag("div")
    new_tag['class'] = 'footnote-out'
    wrap(footnote, new_tag)
</snippet></ROW><ROW><id>10192677</id><snippet>class A(object):
  def __init__(self):
    self.x = self.request.url
</snippet></ROW><ROW><id>10192835</id><snippet>import sysconfig
print sysconfig.get_config_vars()
</snippet></ROW><ROW><id>10192835</id><snippet>sysconfig.get_config_var('HAVE_LIBREADLINE')
</snippet></ROW><ROW><id>10192835</id><snippet>import distutils.sysconfig
</snippet></ROW><ROW><id>10193165</id><snippet>import matplotlib.pyplot as plt
from matplotlib.patches import Circle, Rectangle

rect = Rectangle((-2,-2),4,2, facecolor="none", edgecolor="none")
circle = Circle((0,0),1)

plt.axes().add_artist(rect)
plt.axes().add_artist(circle)

circle.set_clip_path(rect)

plt.axis('equal')
plt.axis((-2,2,-2,2))
plt.show()
</snippet></ROW><ROW><id>10193282</id><snippet>%</snippet></ROW><ROW><id>10193282</id><snippet>a = 100
while a:
    shave = int(raw_input("Input a number to subtract from %i:" % a))
    if ( shave &gt; 0 ) and ( shave &lt;= a ):
        a -= shave
    else:
        print ("Number needs to be positive and less than %i." % a)
</snippet></ROW><ROW><id>10193282</id><snippet>Input a number to subtract from 100:50
Input a number to subtract from 50:100
Number needs to be positive and less than 50.
Input a number to subtract from 50:30
Input a number to subtract from 20:20
</snippet></ROW><ROW><id>10193282</id><snippet>%i</snippet></ROW><ROW><id>10193282</id><snippet>i</snippet></ROW><ROW><id>10193282</id><snippet>%</snippet></ROW><ROW><id>10193282</id><snippet>%f</snippet></ROW><ROW><id>10193282</id><snippet>%s</snippet></ROW><ROW><id>10193282</id><snippet>%.3f</snippet></ROW><ROW><id>10193282</id><snippet>&gt;&gt;&gt; "My name is %s and I'm %.2f metres tall." % ('Li-aung',1.83211)
"My name is Li-aung and I'm 1.83 metres tall."
</snippet></ROW><ROW><id>10193282</id><snippet>"My name is " + name + " and I'm " + str(round(age,2)) + " metres tall"
</snippet></ROW><ROW><id>10193310</id><snippet>input = [('A1', 'B1', 'C1', 'Value'), (...)]

from collections import defaultdict

tree = defaultdict(lambda: defaultdict(lambda: defaultdict(list)))
#Alternatively you could use partial() rather than lambda:
#tree = defaultdict(partial(defaultdict, partial(defaultdict, list)))

for x, y, z, value in input:
    tree[x][y][z].append(value)
</snippet></ROW><ROW><id>10193829</id><snippet>nonlocal</snippet></ROW><ROW><id>10193829</id><snippet>global</snippet></ROW><ROW><id>10193829</id><snippet>i</snippet></ROW><ROW><id>10193829</id><snippet>foo</snippet></ROW><ROW><id>10193829</id><snippet>__init__</snippet></ROW><ROW><id>10193829</id><snippet>nonlocal</snippet></ROW><ROW><id>10193829</id><snippet>nonlocal</snippet></ROW><ROW><id>10193869</id><snippet>self</snippet></ROW><ROW><id>10194580</id><snippet>c_float</snippet></ROW><ROW><id>10194580</id><snippet>None</snippet></ROW><ROW><id>10194580</id><snippet>c_float</snippet></ROW><ROW><id>10194580</id><snippet>ctypes</snippet></ROW><ROW><id>10194580</id><snippet>None</snippet></ROW><ROW><id>10194580</id><snippet>None</snippet></ROW><ROW><id>10194580</id><snippet>None</snippet></ROW><ROW><id>10194580</id><snippet>None</snippet></ROW><ROW><id>10194976</id><snippet>&gt;&gt;&gt; sorted(cityPopulation.iteritems(),key=lambda (k,v): v[0],reverse=True) #1990
[('C', [30, 10, 20]), ('B', [20, 30, 10]), ('A', [10, 20, 30])]
&gt;&gt;&gt; sorted(cityPopulation.iteritems(),key=lambda (k,v): v[2],reverse=True) #2010
[('A', [10, 20, 30]), ('C', [30, 10, 20]), ('B', [20, 30, 10])]
</snippet></ROW><ROW><id>10195058</id><snippet>default</snippet></ROW><ROW><id>10195058</id><snippet>datetime.datetime.now</snippet></ROW><ROW><id>10195296</id><snippet> cursor.execute('select distinct col1 from table1 where col1 like ? limit 3', [word])
</snippet></ROW><ROW><id>10195296</id><snippet>word</snippet></ROW><ROW><id>10195314</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; i = xrange(1,3)
&gt;&gt;&gt; j = xrange(3,5)
&gt;&gt;&gt; k = xrange(5,7)
&gt;&gt;&gt; indices = [ i, j, k ]
&gt;&gt;&gt; for item in product(*indices):
        print item


(1, 3, 5)
(1, 3, 6)
(1, 4, 5)
(1, 4, 6)
(2, 3, 5)
(2, 3, 6)
(2, 4, 5)
(2, 4, 6)
</snippet></ROW><ROW><id>10195334</id><snippet>printResult</snippet></ROW><ROW><id>10195334</id><snippet>page = getPage(url, method='POST').addCallback(self.assertTrue)
</snippet></ROW><ROW><id>10195334</id><snippet>page = getPage(url, method='POST').addCallback(self.assertIsNotNone)
</snippet></ROW><ROW><id>10195334</id><snippet>TestCase</snippet></ROW><ROW><id>10195344</id><snippet>cursor = conn.cursor(MySQLdb.cursors.DictCursor)
cursor.execute("SELECT name, category FROM animal")
result_set = cursor.fetchall()
for row in result_set:
    print "%s, %s" % (row["name"], row["category"])
</snippet></ROW><ROW><id>10195344</id><snippet>pymysql</snippet></ROW><ROW><id>10195347</id><snippet>imshow</snippet></ROW><ROW><id>10195347</id><snippet>matshow</snippet></ROW><ROW><id>10195347</id><snippet>import matplotlib.pyplot as plt
import numpy as np

# Make a 9x9 grid...
nrows, ncols = 9,9
image = np.zeros(nrows*ncols)

# Set every other cell to a random number (this would be your data)
image[::2] = np.random.random(nrows*ncols //2 + 1)

# Reshape things into a 9x9 grid.
image = image.reshape((nrows, ncols))

row_labels = range(nrows)
col_labels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']
plt.matshow(image)
plt.xticks(range(ncols), col_labels)
plt.yticks(range(nrows), row_labels)
plt.show()
</snippet></ROW><ROW><id>10195347</id><snippet>for i, (image_row, data_row) in enumerate(zip(image, data)):
    image_row[i%2::2] = data_row
</snippet></ROW><ROW><id>10195347</id><snippet>plt.table</snippet></ROW><ROW><id>10195347</id><snippet>matplotlib.table.Table</snippet></ROW><ROW><id>10195347</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import pandas

from matplotlib.table import Table

def main():
    data = pandas.DataFrame(np.random.random((12,8)), 
                columns=['A','B','C','D','E','F','G','H'])
    checkerboard_table(data)
    plt.show()

def checkerboard_table(data, fmt='{:.2f}', bkg_colors=['yellow', 'white']):
    fig, ax = plt.subplots()
    ax.set_axis_off()
    tb = Table(ax, bbox=[0,0,1,1])

    nrows, ncols = data.shape
    width, height = 1.0 / ncols, 1.0 / nrows

    # Add cells
    for (i,j), val in np.ndenumerate(data):
        # Index either the first or second item of bkg_colors based on
        # a checker board pattern
        idx = [j % 2, (j + 1) % 2][i % 2]
        color = bkg_colors[idx]

        tb.add_cell(i, j, width, height, text=fmt.format(val), 
                    loc='center', facecolor=color)

    # Row Labels...
    for i, label in enumerate(data.index):
        tb.add_cell(i, -1, width, height, text=label, loc='right', 
                    edgecolor='none', facecolor='none')
    # Column Labels...
    for j, label in enumerate(data.columns):
        tb.add_cell(-1, j, width, height/2, text=label, loc='center', 
                           edgecolor='none', facecolor='none')
    ax.add_table(tb)
    return fig

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>10195711</id><snippet>return 1 / sum_p if sum_p else 0
</snippet></ROW><ROW><id>10195711</id><snippet>if</snippet></ROW><ROW><id>10195711</id><snippet>return (this_value if this_condition_is_true else that_value)
</snippet></ROW><ROW><id>10195711</id><snippet>return</snippet></ROW><ROW><id>10195711</id><snippet>if</snippet></ROW><ROW><id>10195711</id><snippet>return</snippet></ROW><ROW><id>10195711</id><snippet>\</snippet></ROW><ROW><id>10196049</id><snippet>numpy.dot(A,B)
51
</snippet></ROW><ROW><id>10196049</id><snippet>n = math.sqrt(numpy.dot(A,A.conj()))
</snippet></ROW><ROW><id>10196049</id><snippet>&gt;&gt;&gt; t1=timeit.Timer("n = math.sqrt(numpy.dot(A,A.conj()))","from __main__ import A,math,numpy")
&gt;&gt;&gt; t2=timeit.Timer("n = math.sqrt(sum(abs(A)**2))","from __main__ import A,math")
&gt;&gt;&gt; t3=timeit.Timer("numpy.linalg.norm(A)","from __main__ import A,numpy")
&gt;&gt;&gt; print "%.2f usec/pass" % (1000000 * t1.timeit(number=100000)/100000)
2.82 usec/pass
&gt;&gt;&gt; print "%.2f usec/pass" % (1000000 * t2.timeit(number=100000)/100000)
13.16 usec/pass
&gt;&gt;&gt; print "%.2f usec/pass" % (1000000 * t3.timeit(number=100000)/100000)
15.68 usec/pass
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10196466</id><snippet>def get_block(data_rows):
    samples = []

    for cell in data_rows[0]:
        samples.append('')

    # add one row at a time to each sample and see if all are unique
    for row_index, row in enumerate(data_rows):
        for cell_index, cell in enumerate(row):
            samples[cell_index] = '%s%s' % (samples[cell_index], cell)

        are_all_unique = True
        sample_dict = {} # use dictionary keys to find repeats
        for sample in samples:
            if sample_dict.get(sample):
                # already there, so another row needed
                are_all_unique = False
                break
            sample_dict[sample] = True # add the key to the dictionary
        if are_all_unique:
            return True, row_index

    return False, None

def get_all_blocks(all_rows):
    remaining_rows = all_rows[:] # make a copy    
    blocks = []

    while True:
        found_block, block_end_index = get_block(remaining_rows)
        if found_block:
            blocks.append(remaining_rows[:block_end_index+1])
            remaining_rows = remaining_rows[block_end_index+1:]
            if not remaining_rows:
                break
        else:
            blocks.append(remaining_rows[:])
            break

    return blocks


if __name__ == "__main__":
    v1 = ['00', '00', '11', '01']
    v2 = ['00', '00', '00', '00']
    v3 = ['01', '11', '00', '00']
    v4 = ['00', '00', '00', '00']

    all_rows = [v1, v2, v3, v4]

    blocks = get_all_blocks(all_rows)

    for index, block in enumerate(blocks):
        print "This is block %s." % index
        for row in block:
            print row
        print
</snippet></ROW><ROW><id>10196823</id><snippet>B=[0,1,0]

def check(ll,callback):
    """
    This function only works if you 
    increment the last element in the list.
    All other incrementing is done in this function.
    """
    for idx in reversed(range(len(ll))):
        if(callback(ll)):
            ll[idx]=0
            ll[idx-1]+=1
        else:
            break  #this index wasn't updated, so the next one won't be either.

    #a check to see if every element is 1
    return all(map(lambda x: x==1,ll))

def checksum(ll):
    return True if sum(ll)&gt;100 else False

count=0
while True:
    count+=1
    B[-1]+=1
    if(check(B,checksum)): break
    print B

print B   # [1,1,1]
print count
</snippet></ROW><ROW><id>10196823</id><snippet>break</snippet></ROW><ROW><id>10196944</id><snippet>Q</snippet></ROW><ROW><id>10196944</id><snippet>from django.db.models import Q
len(Document.objects.filter( Q(category=c) | Q(category=None) ) )
</snippet></ROW><ROW><id>10197489</id><snippet>parts = rule.split(" ")
aclName, _, lineNumber, _, action, protocol = parts[:6]
endpoints = parts[6:]

def get_endpoint(eps):
    host, port = "*", "*"
    if eps[0] == "host":
        host = eps[1]
        eps = eps[2:]
    elif eps[0] == "any":
        eps = eps[1:]
    else:
        host = eps[0] + "/" + mask_to_bits(eps[1])
        eps = eps[2:]

    if eps and eps[0] == 'eq':
        port = eps[1]
        eps = eps[2:]
    return host, port, eps

sourceIP, sourcePort, endpoints = get_endpoint(endpoints)
destIP, destPort, endpoints = get_endpoint(endpoints)
</snippet></ROW><ROW><id>10197799</id><snippet>def my_memb(request):
    if request.method=="POST":
            form=MembForm(request.POST)
            if form.is_valid():
                    data=form.cleaned_data
                    form.save()
            return HttpResponseRedirect('/good/')
    else:
            form=MembForm()
    return render_to_response('member.html',{'MembForm':MembForm}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>10197799</id><snippet>    if request.method=="POST":
            form=MembForm(request.POST)
            if form.is_valid():
                    data=form.cleaned_data
                    form.save()
            return HttpResponseRedirect('/good/')
</snippet></ROW><ROW><id>10197799</id><snippet>    if request.method=="POST":
            form=MembForm(request.POST)
            if form.is_valid():
                    data=form.cleaned_data
                    form.save()
                    return HttpResponseRedirect('/good/')
            else:
                return HttpResponse #something else, or maybe just the form
</snippet></ROW><ROW><id>10197799</id><snippet>    if request.method=="POST":
            form=MembForm(request.POST)
            if form.is_valid():
                    data=form.cleaned_data # by the way, what is this for? seems extraneous.
                    form.save()
                    return HttpResponseRedirect('/good/')
</snippet></ROW><ROW><id>10197799</id><snippet>  class MembForm(ModelForm):
        class Meta:
             model=Memb
             fields=('slug','member')
</snippet></ROW><ROW><id>10197932</id><snippet>from cgi import escape
from json import dumps

ajax_response = dumps(escape('&lt;a href="http://www.example.com/path/location'
                             '?query=string&amp;more=this#anchor"&gt;'
                             'FooBar &amp; Friends&lt;/a&gt;'))
</snippet></ROW><ROW><id>10198149</id><snippet>repr</snippet></ROW><ROW><id>10198149</id><snippet>datetime.time</snippet></ROW><ROW><id>10198149</id><snippet>isoformat</snippet></ROW><ROW><id>10198149</id><snippet>repr</snippet></ROW><ROW><id>10198149</id><snippet>import datetime

timestring = datetime.datetime.now().time().isoformat()

timeobj = datetime.datetime.strptime(timestring, "%H:%M:%S.%f").time()
</snippet></ROW><ROW><id>10198486</id><snippet>script.sh</snippet></ROW><ROW><id>10198486</id><snippet>.py</snippet></ROW><ROW><id>10198486</id><snippet>#!/bin/bash</snippet></ROW><ROW><id>10198486</id><snippet>chmod +x ./script.sh</snippet></ROW><ROW><id>10198486</id><snippet>blainer@ubuntu:~/Desktop/convert$ ./script.sh</snippet></ROW><ROW><id>10198654</id><snippet>[c.run() for c in objs]
</snippet></ROW><ROW><id>10198681</id><snippet>lsof</snippet></ROW><ROW><id>10198681</id><snippet>lsof | grep &lt;name of file&gt;
</snippet></ROW><ROW><id>10198880</id><snippet>ns.othersharedstuff = x
killsig = mgr.Event()
processes = [ MyProcess(ns, killsig) for _ in range(8) ]
for p in processes: p.start()
while not killsig.isSet():
    time.sleep(0.01) # 10 milliseconds 
for p in processes: p.terminate()
get data from ns.mylist()
</snippet></ROW><ROW><id>10198880</id><snippet>while true:</snippet></ROW><ROW><id>10199667</id><snippet>#!python
from indigo import *
from indigo_renderer import *
from array import *
import sys, cgitb, cgi

cgitb.enable()
httpArgs = cgi.FieldStorage()
print "Content-type: image/png"
print

indigo = Indigo()
renderer = IndigoRenderer(indigo)

mol1 = indigo.loadMolecule("ONc1cccc1")

indigo.setOption("render-output-format", "png")
indigo.setOption("render-highlight-color-enabled", "true")

outputStream = renderer.renderToBuffer(mol1)
if sys.platform == "win32":
   import os, msvcrt
   msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)
else:
sys.exit()
sys.stdout.write(outputStream.tostring())
</snippet></ROW><ROW><id>10199818</id><snippet>map(int, ...</snippet></ROW><ROW><id>10199818</id><snippet>map(int, MyList)
</snippet></ROW><ROW><id>10199818</id><snippet>[int(x) for x in MyList]
</snippet></ROW><ROW><id>10199818</id><snippet>map</snippet></ROW><ROW><id>10199818</id><snippet>map</snippet></ROW><ROW><id>10199894</id><snippet>for</snippet></ROW><ROW><id>10199894</id><snippet>self.connections[0]</snippet></ROW><ROW><id>10199894</id><snippet>threading.Event</snippet></ROW><ROW><id>10199894</id><snippet>threading.Event</snippet></ROW><ROW><id>10199894</id><snippet>self.new_conn</snippet></ROW><ROW><id>10199894</id><snippet>def do_loop(self):
    for line in self.connections[0].iter_lines():
        if self.new_conn.is_set():
            break # or could raise exception here
        print line
</snippet></ROW><ROW><id>10199894</id><snippet>.iter_lines()</snippet></ROW><ROW><id>10199894</id><snippet>def iter_lines(self):
    for line in self.connections[0].private_data_lines:
        if self.new_conn.is_set():
            break
        yield line
</snippet></ROW><ROW><id>10200437</id><snippet>  myList = ['a', 'b','c', 'd', 'e', 'f']
  myList[3:] + myList[:3]
</snippet></ROW><ROW><id>10200437</id><snippet>  ['d', 'e', 'f', 'a', 'b', 'c']
</snippet></ROW><ROW><id>10200576</id><snippet>&lt;option tal:repeat="option options"
        value="${option.isoformat()}"
        tal:attributes="selected 'selected' if request.get_param('%s%d%s' %(day, row,
        type))==option.isoformat() else None"&gt;
    ${int(option.strftime('%I'))}${option.strftime(':%M%p')}
&lt;/option&gt;
</snippet></ROW><ROW><id>10200707</id><snippet>import csv
import matplotlib.pyplot as plt

### Making test CSV file ###
data = [['2011/12/15,5'],['2011/12/11,4'],['2011/12/19,2'],['2011/12/16,3'],['2011/12/20,8'],['2011/12/14,4'],['2011/12/10,10'],['2011/12/9,7']]
with open('test.csv', 'wb') as f:
    writer = csv.writer(f)
    for i in data:
        writer.writerow(i)


### Extract data from CSV ###
with open('test.csv', 'rb') as n:
    reader = csv.reader(n)
    dates = []
    freq = []
    for row in reader:
        values = row[0].split(',')
        dates.append(values[0])
        freq.append(values[1])          


### Do plot ###
false_x = [x for x in range(len(dates))]
plt.plot(false_x,freq, 'o-')
plt.xticks(range(len(dates)), (dates), rotation=45)
# plt.axis([xmin, xmax, ymin, ymax]) - sets axes limits on graph
plt.axis([-1, 8, 0, 11])
plt.show()
</snippet></ROW><ROW><id>10200774</id><snippet>json</snippet></ROW><ROW><id>10200774</id><snippet>cursor.fetchall()</snippet></ROW><ROW><id>10200774</id><snippet>import json

json_data = json.dumps(data)
</snippet></ROW><ROW><id>10200774</id><snippet>json.dump(some_file_object, data)</snippet></ROW><ROW><id>10200774</id><snippet>csv</snippet></ROW><ROW><id>10200774</id><snippet>import csv

writer = csv.writer(some_file_object)

for row in cursor:
    # the csv module can't handle unicode, so encode the strings
    row = [item.encode('utf-8') if isinstance(item, basestring) else item 
                                                                for item in data]
    writer.writerow(row)
</snippet></ROW><ROW><id>10201319</id><snippet>classmethod</snippet></ROW><ROW><id>10201319</id><snippet>class MyModel(models.Model):
    @classmethod
    def my_function(cls):
        new_instance = cls(...)
        new_instance.save()
        # etc...
</snippet></ROW><ROW><id>10201439</id><snippet>xml.dom.minidom</snippet></ROW><ROW><id>10201439</id><snippet>columns = [c.firstChild.data for c in pmaexport.getElementsByTagName('column') if c.getAttribute('name') == 'news_title']
</snippet></ROW><ROW><id>10201717</id><snippet>&gt;&gt;&gt; def foo(arg, **kwargs):
...     print kwargs
... 
&gt;&gt;&gt; foo('a', b="2", c="3", bar="bar")
{'c': '3', 'b': '2', 'bar': 'bar'}
</snippet></ROW><ROW><id>10201717</id><snippet>&gt;&gt;&gt; def bar(arg, *args):
...     print args
... 
&gt;&gt;&gt; bar(1, 2, 3, 'a', 'b')
(2, 3, 'a', 'b')
</snippet></ROW><ROW><id>10201717</id><snippet>&gt;&gt;&gt; def foobar(*args, **kwargs):
...     print args
...     print kwargs
... 
&gt;&gt;&gt; foobar(1, 2, a='3', spam='eggs')
(1, 2)
{'a': '3', 'spam': 'eggs'}
</snippet></ROW><ROW><id>10201898</id><snippet>Text</snippet></ROW><ROW><id>10201898</id><snippet>Text(Point(60, 60), "kitchen").draw(win)
</snippet></ROW><ROW><id>10201898</id><snippet>3.7 Text Methods</snippet></ROW><ROW><id>10201993</id><snippet>reversed(x)  # returns an iterator
</snippet></ROW><ROW><id>10201993</id><snippet>x[::-1]  # returns a new tuple
</snippet></ROW><ROW><id>10201993</id><snippet>reversed</snippet></ROW><ROW><id>10201993</id><snippet>def myreversed(seq):
    for i in range(len(x) - 1, -1, -1):
        yield seq[i]
</snippet></ROW><ROW><id>10201993</id><snippet>seq[::-1]</snippet></ROW><ROW><id>10201993</id><snippet>reversed</snippet></ROW><ROW><id>10202037</id><snippet>&gt;&gt;&gt; iterable1 = [0,1,2,3,4]
&gt;&gt;&gt; iterable2 = ['a','b','c']
&gt;&gt;&gt; import itertools as it
&gt;&gt;&gt; list(x+y for x,y in it.product(it.combinations(iterable1, 2), it.combinations(iterable2, 1)))
[(0, 1, 'a'), (0, 1, 'b'), (0, 1, 'c'), (0, 2, 'a'), (0, 2, 'b'), (0, 2, 'c'), (0, 3, 'a'), (0, 3, 'b'), (0, 3, 'c'), (0, 4, 'a'), (0, 4, 'b'), (0, 4, 'c'), (1, 2, 'a'), (1, 2, 'b'), (1, 2, 'c'), (1, 3, 'a'), (1, 3, 'b'), (1, 3, 'c'), (1, 4, 'a'), (1, 4, 'b'), (1, 4, 'c'), (2, 3, 'a'), (2, 3, 'b'), (2, 3, 'c'), (2, 4, 'a'), (2, 4, 'b'), (2, 4, 'c'), (3, 4, 'a'), (3, 4, 'b'), (3, 4, 'c')]
</snippet></ROW><ROW><id>10202189</id><snippet>$arch</snippet></ROW><ROW><id>10202189</id><snippet>run('echo \'Server = http://repo.archlinux.fr/$arch\' | sudo -s tee -a /etc/pacman.conf')
</snippet></ROW><ROW><id>10202189</id><snippet>echo 'Server = http://repo.archlinux.fr/$arch' | sudo -s tee -a /etc/pacman.conf
</snippet></ROW><ROW><id>10202189</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.system('echo \'Server = /foo/$arch\' ')
Server = /foo/$arch
0
</snippet></ROW><ROW><id>10202191</id><snippet>comb()</snippet></ROW><ROW><id>10202191</id><snippet>from itertools import permutations

lst = range(4)
result = list(comb(lst, 2))  # output of print statement is now shown

print(result) # prints: [(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3)]
</snippet></ROW><ROW><id>10202191</id><snippet>comb()</snippet></ROW><ROW><id>10202191</id><snippet>list()</snippet></ROW><ROW><id>10202233</id><snippet>pipe = subprocess.Popen(...)
</snippet></ROW><ROW><id>10202233</id><snippet>output = "".join(pipe.stdout.readlines())
</snippet></ROW><ROW><id>10202233</id><snippet>.communicate()</snippet></ROW><ROW><id>10202233</id><snippet>pipe.returncode</snippet></ROW><ROW><id>10202233</id><snippet>sts = pipe.returncode
if sts is None: sts = 0
</snippet></ROW><ROW><id>10202233</id><snippet>sts</snippet></ROW><ROW><id>10202233</id><snippet>None</snippet></ROW><ROW><id>10202233</id><snippet>subprocess</snippet></ROW><ROW><id>10202233</id><snippet>sts = pipe.wait()
</snippet></ROW><ROW><id>10202233</id><snippet>is None</snippet></ROW><ROW><id>10202233</id><snippet>.wait()</snippet></ROW><ROW><id>10202233</id><snippet>.communicate()</snippet></ROW><ROW><id>10202233</id><snippet>.wait()</snippet></ROW><ROW><id>10202233</id><snippet>"".join(...)</snippet></ROW><ROW><id>10202233</id><snippet>output = pipe.stdout.read()
</snippet></ROW><ROW><id>10202233</id><snippet>'\r'</snippet></ROW><ROW><id>10202233</id><snippet>\r</snippet></ROW><ROW><id>10202418</id><snippet>&gt;&gt;&gt; 0.**0.3
0.0
</snippet></ROW><ROW><id>10202418</id><snippet>a = 0±0</snippet></ROW><ROW><id>10202418</id><snippet>a**x</snippet></ROW><ROW><id>10202418</id><snippet>x</snippet></ROW><ROW><id>10202418</id><snippet>x</snippet></ROW><ROW><id>10202418</id><snippet>x</snippet></ROW><ROW><id>10202418</id><snippet>a=0±0.1</snippet></ROW><ROW><id>10202418</id><snippet>a**x</snippet></ROW><ROW><id>10202418</id><snippet>a</snippet></ROW><ROW><id>10202418</id><snippet>a = 0±0</snippet></ROW><ROW><id>10202418</id><snippet>a**x</snippet></ROW><ROW><id>10202418</id><snippet>a = 0±0.3</snippet></ROW><ROW><id>10202418</id><snippet>a</snippet></ROW><ROW><id>10202418</id><snippet>a**x</snippet></ROW><ROW><id>10202418</id><snippet>x&gt;0</snippet></ROW><ROW><id>10202418</id><snippet>a=0</snippet></ROW><ROW><id>10202578</id><snippet>__new__()</snippet></ROW><ROW><id>10202578</id><snippet>int</snippet></ROW><ROW><id>10202578</id><snippet>MyInt(1) is MyInt(1)</snippet></ROW><ROW><id>10202578</id><snippet>&gt;&gt;&gt; MyInt(1) + MyInt(1) is 2
True
</snippet></ROW><ROW><id>10202578</id><snippet>__add__</snippet></ROW><ROW><id>10202614</id><snippet>from launchpage.models import EmailForm</snippet></ROW><ROW><id>10202614</id><snippet>from launchpage.forms import EmailForm</snippet></ROW><ROW><id>10202614</id><snippet>{'form': form,}</snippet></ROW><ROW><id>10202614</id><snippet>{'form': form}</snippet></ROW><ROW><id>10202614</id><snippet>{{ form.email }}</snippet></ROW><ROW><id>10202614</id><snippet>{{ form }}</snippet></ROW><ROW><id>10202614</id><snippet>render</snippet></ROW><ROW><id>10202668</id><snippet>sys.stdout = sys.stdout.detach()
</snippet></ROW><ROW><id>10202668</id><snippet>print</snippet></ROW><ROW><id>10202668</id><snippet>print</snippet></ROW><ROW><id>10202668</id><snippet>sys.stdout = sys._stdout
</snippet></ROW><ROW><id>10202668</id><snippet>stdout</snippet></ROW><ROW><id>10202686</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>10202686</id><snippet>doc = lxml.html.parse(url)
scripts = doc.xpath('//script')
for script in scripts:
    match = re.findall(r"DetailPage\.StateController\.setState\('parent_asin', '(.*)'\);", script.text)
    if match:
        print match[0]
</snippet></ROW><ROW><id>10202726</id><snippet>child.expect ('Would you like to create one now.*?:')
</snippet></ROW><ROW><id>10202726</id><snippet>child.expect ('Would you like to create one now\? \(yes\/no\):')
</snippet></ROW><ROW><id>10202789</id><snippet>argmax()</snippet></ROW><ROW><id>10202789</id><snippet>&gt;&gt;&gt; import pandas
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; df = pandas.DataFrame(np.random.randn(5,3),columns=['A','B','C'])
&gt;&gt;&gt; df
          A         B         C
0  1.232853 -1.979459 -0.573626
1  0.140767  0.394940  1.068890
2  0.742023  1.343977 -0.579745
3  2.125299 -0.649328 -0.211692
4 -0.187253  1.908618 -1.862934
&gt;&gt;&gt; df['A'].argmax()
3
&gt;&gt;&gt; df['B'].argmax()
4
&gt;&gt;&gt; df['C'].argmax()
1
</snippet></ROW><ROW><id>10203286</id><snippet>import os
os.getenv("PATH")
</snippet></ROW><ROW><id>10203881</id><snippet>#!/bin/bash
# install:
# * rename the original script to script.original
# * rename the wrapper.sh to script
# * DONE! all calls are going to be logged now
TIMESTAMP=`date -u +"%Y-%m-%dT%H:%M:%SZ"`

ME=`basename $0`
WRAPPED_COMMAND=$ME.original

echo "${TIMESTAMP} exec: $0 $@" &gt;&gt;${ME}.stdout.log

#${WRAPPED_COMMAND} "$@"|tee -a "${LOGFILE}"
${WRAPPED_COMMAND} "$@" &gt; &gt;(tee -a ${ME}.stdout.log) 2&gt; &gt;(tee -a ${ME}.stderr.tmp &gt;&amp;2)
RET=$?
TIMESTAMP_END=`date -u +"%Y-%m-%dT%H:%M:%SZ"`

if [ -s ${ME}.stderr.tmp ] # if we have something logged to stderr (not usual)
then
    echo "${TIMESTAMP} exec: $0 $@" &gt;&gt;${ME}.stderr.log
    cat  &gt;&gt; ${ME}.stderr.log
    echo "${TIMESTAMP_END} retured: ${RET}" &gt;&gt;${ME}.stderr.log
fi
rm  -f "${ME}.stderr.tmp"

echo "${TIMESTAMP_END} retured: ${RET}" &gt;&gt;${ME}.stdout.log
exit $RET
</snippet></ROW><ROW><id>10204229</id><snippet>&gt;&gt;&gt; {i:(''.join(str(x) for x in j[0]) if j else '') for i,j in d.items()}
{0: '1.0-8', 1: '.3.2001-', 2: '', 3: '..', 4: '', 5: '2012-01-19', 6: '1.0095'}
</snippet></ROW><ROW><id>10204229</id><snippet>d_new = {}
for i,j in d.items():
    if j:
        d_new[i] = ''.join(str(x) for x in j[0])
    else:
        d_new[i] = ''
</snippet></ROW><ROW><id>10205007</id><snippet>if not uname and not passwd:
</snippet></ROW><ROW><id>10205007</id><snippet>if (not uname) and (not passwd):
</snippet></ROW><ROW><id>10205007</id><snippet>if not (uname or passwd):
</snippet></ROW><ROW><id>10205007</id><snippet>uname</snippet></ROW><ROW><id>10205007</id><snippet>password</snippet></ROW><ROW><id>10205007</id><snippet>print</snippet></ROW><ROW><id>10205007</id><snippet>uname = ""
passwd = "jhj"

if not (uname or passwd):
    print "either"
elif not uname:
    print "uname"
elif not passwd:
    print "passwd"
</snippet></ROW><ROW><id>10205174</id><snippet>def paths(tree, sum_so_far):
    #Helper function
    #receives a tree and 
    #returns all paths that have this node as root
    if not tree:
        return []
    else: #tree is a node
        root = tree.ID
        val = tree.Value
        rooted_paths = [[[root], value]]
        for subtree in tree.nextDest:
            useable = paths(subtree, sum_so_far + val)
            for path in useable:
                rooted_paths.append([[root]+path[0], path[1]])
    return rooted_paths
</snippet></ROW><ROW><id>10205240</id><snippet>str</snippet></ROW><ROW><id>10205240</id><snippet>unicode</snippet></ROW><ROW><id>10205240</id><snippet>bytes</snippet></ROW><ROW><id>10205240</id><snippet>str</snippet></ROW><ROW><id>10205240</id><snippet>encoding</snippet></ROW><ROW><id>10205240</id><snippet>stdin</snippet></ROW><ROW><id>10205240</id><snippet>stdin.buffer</snippet></ROW><ROW><id>10205240</id><snippet>encode</snippet></ROW><ROW><id>10205240</id><snippet>encoding</snippet></ROW><ROW><id>10205287</id><snippet>from BeautifulSoup import BeautifulSoup
soup = BeautifulSoup(htmlString)

raw_data = soup.find(**{"class": "quick"}).contents
data = [x for x in raw_data if not hasattr(x, "name") or not x.name == "br"]
</snippet></ROW><ROW><id>10205287</id><snippet>if not hasattr(x, "name") or not x.name == "br"</snippet></ROW><ROW><id>10205287</id><snippet>NavigableString</snippet></ROW><ROW><id>10205287</id><snippet>&lt;BR&gt;</snippet></ROW><ROW><id>10205287</id><snippet>data</snippet></ROW><ROW><id>10205287</id><snippet>[&lt;KEY&gt;, &lt;VALUE&gt;, &lt;KEY&gt;, &lt;VALUE&gt;]</snippet></ROW><ROW><id>10205713</id><snippet>RequestContext</snippet></ROW><ROW><id>10205713</id><snippet>Context</snippet></ROW><ROW><id>10205713</id><snippet>render_to_response</snippet></ROW><ROW><id>10205713</id><snippet>optional arguments</snippet></ROW><ROW><id>10205713</id><snippet>render_to_response</snippet></ROW><ROW><id>10205713</id><snippet>return render_to_response('base.html', context_instance=RequestContext(request))
</snippet></ROW><ROW><id>10205978</id><snippet>install()</snippet></ROW><ROW><id>10205978</id><snippet>egg_link = os.path.join(self.buildout['buildout']['eggs-directory'], 'external-package.egg-link')
f = open(egg_link, 'wt')
f.write(self.options['install-directory'] + '\n')
f.close()
self.options.created(egg_link)
return self.options.created()
</snippet></ROW><ROW><id>10205978</id><snippet>.egg-info</snippet></ROW><ROW><id>10205978</id><snippet>[buildout]
parts = external_package python
develop = .
eggs = my_project
       external_package
       recipe.as.above

[external_package]
recipe = recipe.as.above:config
install-directory = ../path/to/my/local/package/build

[python]
recipe = zc.recipe.egg
interpreter = python
eggs = ${buildout:eggs}
</snippet></ROW><ROW><id>10205978</id><snippet>install-directory</snippet></ROW><ROW><id>10205978</id><snippet>recipe.as.above</snippet></ROW><ROW><id>10205978</id><snippet>buildout.cfg</snippet></ROW><ROW><id>10205978</id><snippet>.cfg</snippet></ROW><ROW><id>10206181</id><snippet>__new__</snippet></ROW><ROW><id>10206581</id><snippet>__file__</snippet></ROW><ROW><id>10206581</id><snippet>logging.Logger</snippet></ROW><ROW><id>10206581</id><snippet>Logger.log</snippet></ROW><ROW><id>10206581</id><snippet>log</snippet></ROW><ROW><id>10206581</id><snippet>inspect.stack()</snippet></ROW><ROW><id>10206581</id><snippet>inspect.getframeinfo()</snippet></ROW><ROW><id>10206581</id><snippet>log</snippet></ROW><ROW><id>10206581</id><snippet>logging</snippet></ROW><ROW><id>10206581</id><snippet>logging.setLoggerClass()</snippet></ROW><ROW><id>10206725</id><snippet>csrf_exempt</snippet></ROW><ROW><id>10206725</id><snippet>csrf_protect</snippet></ROW><ROW><id>10206725</id><snippet>django.middleware.csrf.CsrfViewMiddleware</snippet></ROW><ROW><id>10206725</id><snippet>csrf_exempt</snippet></ROW><ROW><id>10206725</id><snippet>csrf_protect</snippet></ROW><ROW><id>10206774</id><snippet>def __init__(self, *args, **kwargs):
   # First pop your kwargs that may bother the parent __init__ method
   self.root_entity = kwargs.pop('root_entity')
   # Then, let the ModelForm initialize:
   super(MyForm, self).__init__(*args, **kwargs)
   # Finally, access the fields dict that was created by the super().__init__ call
   self.fields['parent_entities'].queryset = Entity.objects.filter(root_entity=self.root_entity)
</snippet></ROW><ROW><id>10206809</id><snippet>setattr(profile, "mtoder_autoalpha", newvalue)</snippet></ROW><ROW><id>10206900</id><snippet>graph = tree.find(graphml.get("graph"))
nodes = graph.findall(graphml.get("node"))
edges = graph.findall(graphml.get("edge"))

for node in nodes + edges:
    attribs = {}
    for data in node.findall(graphml.get('data')):
        attribs[data.get('key')] = data.text
    print 'Node', node, 'have', attribs
</snippet></ROW><ROW><id>10206900</id><snippet>Node &lt;Element {http://graphml.graphdrawing.org/xmlns}node at 0x7ff053d3e5a0&gt; have {'name': 'node1'}
Node &lt;Element {http://graphml.graphdrawing.org/xmlns}node at 0x7ff053d3e5f0&gt; have {'name': 'node2'}
Node &lt;Element {http://graphml.graphdrawing.org/xmlns}edge at 0x7ff053d3e640&gt; have {'weight': '1'}
</snippet></ROW><ROW><id>10208086</id><snippet>imshow()</snippet></ROW><ROW><id>10208086</id><snippet>show()</snippet></ROW><ROW><id>10208086</id><snippet>plt.Figure()
thismanager = get_current_fig_manager()
thismanager.window.wm_iconbitmap("icon.ico")
</snippet></ROW><ROW><id>10208086</id><snippet>show()</snippet></ROW><ROW><id>10208140</id><snippet>import win32gui
tempWindowName=win32gui.GetWindowText (win32gui.GetForegroundWindow())
import time
while True:
    if (tempWindowName==win32gui.GetWindowText (win32gui.GetForegroundWindow()))
        pass
    else
        tempWindowName=win32gui.GetWindowText (win32gui.GetForegroundWindow())
        #do what you want
    time.sleep(0.1)
</snippet></ROW><ROW><id>10208825</id><snippet>[3]</snippet></ROW><ROW><id>10208825</id><snippet>mm</snippet></ROW><ROW><id>10208825</id><snippet>&gt;&gt;&gt; sorted(a,key=lambda key:key[2]['mm'])
[[{'aa': 1L}, {}, {'mm': 5L}, {}, {}], [{'aa': 2L}, {}, {'mm': 7L}, {}, {}], [{'aa': 5L}, {}, {'mm': 7L}, {}, {}], [{'aa': 2L}, {}, {'mm': 9L}, {}, {}]]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10209342</id><snippet>'Won't "compile"
(42+99)
</snippet></ROW><ROW><id>10209342</id><snippet>MyWorkbook.Worksheets(TabName).Name</snippet></ROW><ROW><id>10209342</id><snippet>'Fine: gets value of `Name` property
Debug.Print MyWorkbook.Worksheets(TabName).Name
</snippet></ROW><ROW><id>10209342</id><snippet>'Error: tries to call `Name` as method
MyWorkbook.Worksheets(TabName).Name
</snippet></ROW><ROW><id>10209342</id><snippet>Name</snippet></ROW><ROW><id>10209342</id><snippet>Name</snippet></ROW><ROW><id>10209342</id><snippet>Worksheet</snippet></ROW><ROW><id>10209553</id><snippet>['dig', '+short', x]
</snippet></ROW><ROW><id>10209553</id><snippet>['dig', '+short', '%s' % x]
</snippet></ROW><ROW><id>10209577</id><snippet>try:
    with open(filename, 'r+') as f:
        data = f.read()
        f.seek(0,0)
        f.write(header)
        f.write(data)
        #f.truncate() is not needed here as the file will always grow
    print("Header added to", filename)
except IOError:
    print("Sorry, could not open file for reading/writing")
</snippet></ROW><ROW><id>10209949</id><snippet>_make</snippet></ROW><ROW><id>10209949</id><snippet>item_data(Item='Name', Name='Price', Cost='Qty', Qty='Item', Price='Cost', Description='Description')</snippet></ROW><ROW><id>10209949</id><snippet>for row in (item_data(**data) for data in read_data):
    if row.Item == str(item):
        return row
return failure
</snippet></ROW><ROW><id>10209949</id><snippet>_make</snippet></ROW><ROW><id>10209949</id><snippet>map()</snippet></ROW><ROW><id>10210082</id><snippet>with open("csv") as f:
    for i, line in enumerate(f):
         if i % 2 == 0:
             print(line)
</snippet></ROW><ROW><id>10210121</id><snippet>def check_initialize():
    if not db().select(db.auth_user.ALL).first():        
        db.auth_user.insert(
            username = 'administrator',
            password = db.auth_user.password.validate('admin1234')[0],
            email = 'null@null.com',
            first_name = 'System',
            last_name = 'Administrator',
            is_admin = True,
        )

# do initialization check
cache.ram('db_initialized', lambda: check_initialize(), time_expire=None)
</snippet></ROW><ROW><id>10210121</id><snippet>def users():
    form = SQLFORM.grid(db.auth_user)
    return dict(form=form)
</snippet></ROW><ROW><id>10210342</id><snippet>&gt;&gt;&gt; a = [[]]
&gt;&gt;&gt; b = []
&gt;&gt;&gt; b in a
True
&gt;&gt;&gt; b is a[0]
False
</snippet></ROW><ROW><id>10210342</id><snippet>__contains__()</snippet></ROW><ROW><id>10210345</id><snippet>tst.csv</snippet></ROW><ROW><id>10210345</id><snippet>&gt;&gt;&gt; with open("tst.csv") as fin, open("tst.out","w" )as fout:
    for line in fin:
        fout.write(line.rpartition(" ")[-1])
</snippet></ROW><ROW><id>10210656</id><snippet>.split('\n')</snippet></ROW><ROW><id>10210656</id><snippet>tokens = message.split('\n')
f_email = tokens[0]
f_title = tokens[1]
f_description = tokens[2]
</snippet></ROW><ROW><id>10210656</id><snippet>assert(len(tokens)&gt;=3)
</snippet></ROW><ROW><id>10210656</id><snippet>try/except</snippet></ROW><ROW><id>10210656</id><snippet>tokens = message.split('\n')
try:  
    f_description = tokens[2]
except:
    f_description = None
</snippet></ROW><ROW><id>10210683</id><snippet>a_detail_slug</snippet></ROW><ROW><id>10210683</id><snippet>pk</snippet></ROW><ROW><id>10210683</id><snippet>filler</snippet></ROW><ROW><id>10210683</id><snippet>class ARedirect(RedirectView):
    def get_redirect_url(self, pk):
        filler = get_filler_somehow()
        return reverse('a_detail_slug', args=(pk, filler))
</snippet></ROW><ROW><id>10210756</id><snippet>int()</snippet></ROW><ROW><id>10210756</id><snippet>int("0x5E", 16)</snippet></ROW><ROW><id>10210756</id><snippet>int(chr(int("0x5E", 16)),16)</snippet></ROW><ROW><id>10210756</id><snippet>int("^",16)</snippet></ROW><ROW><id>10210756</id><snippet>makevalue('0x01', '0x5E') -&gt;  350 0x15e 0b101011110
makevalue('0xFF', '0x00') -&gt;  65280 0xff00 0b1111111100000000
makevalue('0x01', '0xFF') -&gt;  511 0x1ff 0b111111111
makevalue('0xFF', '0xFF') -&gt;  65535 0xffff 0b1111111111111111
</snippet></ROW><ROW><id>10210756</id><snippet>def makeValue(highbyte, lowbyte):
    return int(highbyte, 16)*256 + int(lowbyte, 16)
</snippet></ROW><ROW><id>10210756</id><snippet>def makeValue(highbyte, lowbyte):
    return int(highbyte+lowbyte[2:], 16) # strips leading "0x" from lowbyte be4 concat
</snippet></ROW><ROW><id>10210779</id><snippet>conf.py</snippet></ROW><ROW><id>10210779</id><snippet>shutil</snippet></ROW><ROW><id>10210779</id><snippet>Project/docs/spec</snippet></ROW><ROW><id>10210779</id><snippet>Project/modules</snippet></ROW><ROW><id>10210779</id><snippet>modules/module1/docs/module1</snippet></ROW><ROW><id>10210890</id><snippet>class Person:

    def __init__(self,person_dict):
        self.name = person_dict.get('name')
</snippet></ROW><ROW><id>10210890</id><snippet>self.name = person_dict.get('name')</snippet></ROW><ROW><id>10210890</id><snippet>name</snippet></ROW><ROW><id>10210890</id><snippet>None</snippet></ROW><ROW><id>10210890</id><snippet>getName</snippet></ROW><ROW><id>10210890</id><snippet>name</snippet></ROW><ROW><id>10211143</id><snippet>import Tkinter
root = Tkinter.Tk()
</snippet></ROW><ROW><id>10211143</id><snippet>root.withdraw()
</snippet></ROW><ROW><id>10211303</id><snippet>charset=ISO-8859-1</snippet></ROW><ROW><id>10211758</id><snippet>import pylab
counts = [0,0,0,125,56,0,0,0,34,77,123,0,0,0]
artists = pylab.bar(*zip(*enumerate(counts)), align='center')

lefts = [item.get_x() for item in artists]
rights = [item.get_x() + item.get_width() for item in artists]
pylab.xlim([min(lefts), max(rights)])

pylab.show()
</snippet></ROW><ROW><id>10211855</id><snippet>find()</snippet></ROW><ROW><id>10211855</id><snippet>$or</snippet></ROW><ROW><id>10211855</id><snippet>from bson.tz_util import utc
cursor = db.collection.find({'$or': [
    {'col1': 1, 'col2': 'foo'},
    {'col3': {'$gt': datetime(2012, 01, 01, tzinfo=utc)}},
    {'col3': {'$lt': datetime(2012, 01, 02, tzinfo=utc)}},
]})
</snippet></ROW><ROW><id>10211855</id><snippet>datetime</snippet></ROW><ROW><id>10211855</id><snippet>datetime</snippet></ROW><ROW><id>10211855</id><snippet>from bson.tz_util import utc
cursor = db.collection.find({'$or': [
    {'col1': 1, 'col2': 'foo'},
    {'col3': {'$gt': datetime(2012, 01, 01, tzinfo=utc)}},
    {'col3': {'$lt': datetime(2012, 01, 02, tzinfo=utc)}},
]}, fields=['col1', 'col2'])
</snippet></ROW><ROW><id>10211855</id><snippet>from bson.tz_util import utc
from pymongo import ASCENDING
cursor = db.collection.find({'$or': [
    {'col1': 1, 'col2': 'foo'},
    {'col3': {'$gt': datetime(2012, 01, 01, tzinfo=utc)}},
    {'col3': {'$lt': datetime(2012, 01, 02, tzinfo=utc)}},
]}, fields=['col1', 'col2', 'col4', 'col5'])
cursor.sort([('col4', ASCENDING), ('col5', ASCENDING)])
</snippet></ROW><ROW><id>10211855</id><snippet>from bson.tz_util import utc
from pymongo import ASCENDING
cursor = db.collection.find({'$or': [
    {'col1': 1, 'col2': 'foo'},
    {'col3': {'$gt': datetime(2012, 01, 01, tzinfo=utc)}},
    {'col3': {'$lt': datetime(2012, 01, 02, tzinfo=utc)}},
]}, fields=['col1', 'col2', 'col4', 'col5'])
cursor.sort([('col4', ASCENDING), ('col5', ASCENDING)])

# groupby REQUIRES that the iterable be sorted to work 
# correctly; we've asked Mongo to do this, so we don't
# need to do so explicitly here.
from itertools import groupby
groups = groupby(cursor, keyfunc=lambda doc: (doc['col1'], doc['col2'])
out = []
for (col1, col2), docs in groups:
    col4sum = 0
    col5max = float('-inf')
    for doc in docs:
        col4sum += doc['col4']
        col5max = max(col5max, doc['col5'])
    out.append({
        'col1': col1,
        'col2': col2,
        'col4sum': col4sum,
        'col5max': col5max
    })
</snippet></ROW><ROW><id>10211855</id><snippet>aggregate</snippet></ROW><ROW><id>10211855</id><snippet>from bson.son import SON
from pymongo import ASCENDING, DESCENDING
group_key = SON([('col4', '$col4'), ('col5': '$col5')])
sort_key = SON([('$col1', DESCENDING), ('$col2', ASCENDING)])
db.command('aggregate', 'collection_name', pipeline=[
    # this is like the WHERE clause
    {'$match': {'$or': [
        {'col1': 1, 'col2': 'foo'},
        {'col3': {'$gt': datetime(2012, 01, 01, tzinfo=utc)}},
        {'col3': {'$lt': datetime(2012, 01, 02, tzinfo=utc)}},
        ]}},
    # SELECT sum(col4), max(col5) ... GROUP BY col4, col5
    {'$group': {
        '_id': group_key,
        'col4sum': {'$sum': '$col4'},
        'col5max': {'$max': '$col5'}}},
    # ORDER BY col1 DESC, col2 ASC
    {'$sort': sort_key}
])
</snippet></ROW><ROW><id>10211855</id><snippet>aggregate</snippet></ROW><ROW><id>10211855</id><snippet>$sort</snippet></ROW><ROW><id>10212030</id><snippet>session.commit()</snippet></ROW><ROW><id>10212468</id><snippet>result = [myFunc(p, additionalArgument) for p in pages]
</snippet></ROW><ROW><id>10212815</id><snippet>itertools.groupby</snippet></ROW><ROW><id>10212815</id><snippet>groupby</snippet></ROW><ROW><id>10212815</id><snippet>referred_item</snippet></ROW><ROW><id>10212815</id><snippet>ReferredItem</snippet></ROW><ROW><id>10213106</id><snippet>fubar = Fubar()
myMethod = fubar.myMethod # note instance fubar, resulting in a bound method.
fubar.myMethod = lambda self, calls = [myMethod, (lambda: 'MyMock'), myMethod]: calls.pop()()
</snippet></ROW><ROW><id>10213106</id><snippet>myMethod</snippet></ROW><ROW><id>10213106</id><snippet>myMethod</snippet></ROW><ROW><id>10213106</id><snippet>next</snippet></ROW><ROW><id>10213106</id><snippet>pop</snippet></ROW><ROW><id>10213106</id><snippet>fubar.myMethod = lambda self, calls = iter([myMethod, (lambda: 'MyMock'), myMethod]): next(calls)()
</snippet></ROW><ROW><id>10213157</id><snippet>&gt;&gt; xs = ['a', 'b', 'c']
&gt;&gt; 1.upto(xs.size).flat_map { |n| xs.repeated_permutation(n).map(&amp;:join) }
=&gt; ["a", "b", "c", "aa", "ab", "ac", ...,  "cca", "ccb", "ccc"]
</snippet></ROW><ROW><id>10213157</id><snippet>each</snippet></ROW><ROW><id>10213157</id><snippet>map</snippet></ROW><ROW><id>10213157</id><snippet>require './lazy'

xs = ("a".."z").to_a
strings = 1.upto(xs.size).lazy.flat_map do |n| 
  xs.repeated_permutation(n).lazy.map(&amp;:join)
end

strings.each { |s| puts s }
</snippet></ROW><ROW><id>10213525</id><snippet>a.all(axis=(1, 2)) &amp; b.all(axis=(1, 2))
</snippet></ROW><ROW><id>10213603</id><snippet>pps = int(''.join(p.split()), 16)
</snippet></ROW><ROW><id>10213719</id><snippet>/usr</snippet></ROW><ROW><id>10213719</id><snippet>/usr/local</snippet></ROW><ROW><id>10213719</id><snippet>/System/Library</snippet></ROW><ROW><id>10213719</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>10213719</id><snippet>/usr/local/bin/python2.7</snippet></ROW><ROW><id>10213719</id><snippet>virtualenv</snippet></ROW><ROW><id>10213719</id><snippet>Distribute</snippet></ROW><ROW><id>10213719</id><snippet>setuptools</snippet></ROW><ROW><id>10213719</id><snippet>easy_install</snippet></ROW><ROW><id>10213719</id><snippet>pip</snippet></ROW><ROW><id>10213719</id><snippet>easy_install</snippet></ROW><ROW><id>10213719</id><snippet>brew</snippet></ROW><ROW><id>10213719</id><snippet>$ which python
/Library/Frameworks/Python.framework/Versions/2.7/bin/python
$ curl -O http://python-distribute.org/distribute_setup.py
$ python distribute_setup.py
[...]
creating /Library/Frameworks/Python.framework/Versions/2.7.3_release_10.6/lib/python2.7/site-packages/distribute-0.6.26-py2.7.egg
Extracting distribute-0.6.26-py2.7.egg to /Library/Frameworks/Python.framework/Versions/2.7.3_release_10.6/lib/python2.7/site-packages
Adding distribute 0.6.26 to easy-install.pth file
Installing easy_install script to /Library/Frameworks/Python.framework/Versions/2.7/bin
Installing easy_install-2.7 script to /Library/Frameworks/Python.framework/Versions/2.7/bin

Installed /Library/Frameworks/Python.framework/Versions/2.7.3_release_10.6/lib/python2.7/site-packages/distribute-0.6.26-py2.7.egg
Processing dependencies for distribute==0.6.26
Finished processing dependencies for distribute==0.6.26
After install bootstrap.
Creating /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/setuptools-0.6c11-py2.7.egg-info
Creating /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/setuptools.pth
$ curl -O https://raw.github.com/pypa/pip/master/contrib/get-pip.py
$ python get-pip.py
$ which pip
/Library/Frameworks/Python.framework/Versions/2.7/bin/pip
$ pip install virtualenv
[...]
    Installing virtualenv script to /Library/Frameworks/Python.framework/Versions/2.7/bin
Successfully installed virtualenv
Cleaning up...
$ which virtualenv
/Library/Frameworks/Python.framework/Versions/2.7/bin/virtualenv
$ virtualenv ENV
New python executable in ENV/bin/python
Installing setuptools............done.
Installing pip...............done.
$ source ENV/bin/activate
(ENV)$ which python
/Users/nad/ENV/bin/python
(ENV)$  
</snippet></ROW><ROW><id>10213729</id><snippet>web: python project/manage.py runserver 0.0.0.0:$PORT --noreload
</snippet></ROW><ROW><id>10213729</id><snippet>heroku run bash
</snippet></ROW><ROW><id>10213729</id><snippet>heroku scale web=1
</snippet></ROW><ROW><id>10214072</id><snippet>(1, 3)</snippet></ROW><ROW><id>10214072</id><snippet>(3, (1, 3))</snippet></ROW><ROW><id>10214072</id><snippet>tuple</snippet></ROW><ROW><id>10214072</id><snippet>tuple</snippet></ROW><ROW><id>10214072</id><snippet>tuple</snippet></ROW><ROW><id>10214072</id><snippet>(3, (1, 3))</snippet></ROW><ROW><id>10214072</id><snippet>(1, 3)</snippet></ROW><ROW><id>10214072</id><snippet>key</snippet></ROW><ROW><id>10214072</id><snippet>sorted</snippet></ROW><ROW><id>10214072</id><snippet>sorted(list_of_tuples, key=lambda tup: tup[1]) # or key=operator.itemgetter(1)
</snippet></ROW><ROW><id>10214072</id><snippet>tuple</snippet></ROW><ROW><id>10214072</id><snippet>sorted(list_of_tuples, key=lambda tup: tup[::-1]) 
                              # or key=operator.itemgetter(slice(None, None, -1))
</snippet></ROW><ROW><id>10214175</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup(html_doc)

tables = soup.find_all( 'table' )
for table in tables:
    contents = str( table.contents )
    new_contents = transform( contents )
    table.replaceWith( new_contents )
</snippet></ROW><ROW><id>10214175</id><snippet>soup.replace_with</snippet></ROW><ROW><id>10214369</id><snippet>os.getcwd()</snippet></ROW><ROW><id>10214369</id><snippet>__file__</snippet></ROW><ROW><id>10214369</id><snippet>import os.path
fn = os.path.join(os.path.dirname(__file__), 'text.txt')
with open(fn, 'r') as file:
   # Do something, like ...
   print(file.read())
</snippet></ROW><ROW><id>10214825</id><snippet>python-memcached</snippet></ROW><ROW><id>10214825</id><snippet>memcache</snippet></ROW><ROW><id>10214825</id><snippet>setup(name='foo',
  version='1.0',
  requires = ['memcache','psycopg2']
)
</snippet></ROW><ROW><id>10214825</id><snippet>pylibmc</snippet></ROW><ROW><id>10214842</id><snippet>visio = win32com.client.Dispatch("Visio.InvisibleApp")
</snippet></ROW><ROW><id>10214941</id><snippet>class UserProfileForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super(UserProfileForm, self).__init__(*args, **kwargs)
        if self.instance.pk is None:
            self.empty_permitted = False # Here

    class Meta:
        model = UserProfile


class UserProfileInline(admin.TabularInline):         
    model = UserProfile                               
    form = UserProfileForm  
</snippet></ROW><ROW><id>10215053</id><snippet>if st.find("e") &lt; st.find("t"): 
    st.replace("e","i",1)
</snippet></ROW><ROW><id>10215053</id><snippet>&gt;&gt;&gt; pos_t=st.find("t")
&gt;&gt;&gt; "".join(e if (e != 'e' or i &gt; pos_t) else 'i' for i,e in enumerate(st))
</snippet></ROW><ROW><id>10215100</id><snippet>pip freeze</snippet></ROW><ROW><id>10215100</id><snippet>grep</snippet></ROW><ROW><id>10215100</id><snippet>$ pip freeze | grep Jinja2
Jinja2==2.6
</snippet></ROW><ROW><id>10215219</id><snippet>zip()</snippet></ROW><ROW><id>10215219</id><snippet>&gt;&gt;&gt; l0 = [1,4]; l1 = [4,10]; l2 = [9,18]
&gt;&gt;&gt; zip(l0, l1, l2)
[(1, 4, 9), (4, 10, 18)]
&gt;&gt;&gt; [x for t in zip(l0, l1, l2) for x in t]
[1, 4, 9, 4, 10, 18]
</snippet></ROW><ROW><id>10215219</id><snippet>itertools.chain</snippet></ROW><ROW><id>10215219</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(chain(*zip(l0, l1, l2)))
[1, 4, 9, 4, 10, 18]
</snippet></ROW><ROW><id>10215219</id><snippet>zip</snippet></ROW><ROW><id>10215219</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>10215233</id><snippet>.date</snippet></ROW><ROW><id>10215233</id><snippet>.date</snippet></ROW><ROW><id>10215233</id><snippet>year</snippet></ROW><ROW><id>10215233</id><snippet>year</snippet></ROW><ROW><id>10215233</id><snippet>blog_years=[]
for entry in blog_entries:
    if entry.date.date().year not in blog_years:
        blog_years.append(entry.date.date().year)
</snippet></ROW><ROW><id>10215233</id><snippet>blog_years=[]
for entry in blog_entries:
    if entry.date.year not in blog_years:
        blog_years.append(entry.date.year)
</snippet></ROW><ROW><id>10215240</id><snippet>def numeral_C(number_par):
   while number_par &gt;=100:
      #this numeral_C is already a known function name, now youre reusing it as an int
      numeral_C = number_par / 100
      #you're using print inside a function, not a best practice, but.....
      print "C"*numeral_C,
      #uncomment the below line to see why the loop is unnecessary
      #print '%d = %d - %d' % (number_par - numeral_C*100, number_par, numeral_C*100)
      number_par = number_par - numeral_C*100
   return ""
   #you're printing, rather than returning, making this useless, and you're str()-ing the "" on return

number = 25101;
etruscan_C = str(numeral_C(number))
print

def numeral_c(number_par):
   num_c = number_par / 100
   return 'C'*num_c

print numeral_c(number)
</snippet></ROW><ROW><id>10215240</id><snippet>'C'*int(number/100)
</snippet></ROW><ROW><id>10215313</id><snippet>my_list.append(value)
</snippet></ROW><ROW><id>10215313</id><snippet>my_dict[key].append(value)
</snippet></ROW><ROW><id>10215337</id><snippet>String</snippet></ROW><ROW><id>10215337</id><snippet>int</snippet></ROW><ROW><id>10215337</id><snippet>String[]</snippet></ROW><ROW><id>10215337</id><snippet>String[]</snippet></ROW><ROW><id>10215337</id><snippet>main</snippet></ROW><ROW><id>10215337</id><snippet>main</snippet></ROW><ROW><id>10215725</id><snippet>after</snippet></ROW><ROW><id>10215725</id><snippet>...
textOne=Entry(self,width=2)
textOne.x=0
def increment_textOne():
    textOne.x+=1
    self.after(1000,increment_textOne) #reregister this function to be called in 1s

self.after(1000,increment_textOne) #register increment_textOne to be called 1s from now.
...
</snippet></ROW><ROW><id>10215725</id><snippet>class Foo(Frame):
     def __init__(self,master=None):
        Frame.__init__(self,master)
        self.x=0
        self.id=self.after(1000,self.callme)
     def callme(self):
        self.x+=1
        print self.x
        self.id=self.after(1000,self.callme)  #can cancel the call by self.after_cancel(self.id)

Gui=Foo()
Gui.mainloop()
</snippet></ROW><ROW><id>10215788</id><snippet>from itertools import combinations

def partial_duplicate_destroyer(mydict, tolerance):
    #Modifies in-place. Returns only as a convenience. Copy if you don't want this behaviour.
    for key1, key2 in combinations(mydict, 2):
       if key1 in mydict and key2 - tolerance &lt; key1 &lt; key2 + tolerance:
         del mydict[key1]
    return mydict
</snippet></ROW><ROW><id>10215788</id><snippet>&gt;&gt;&gt; mydict = {1:5,2:7,3:9,4:9,7:7,8:0,111:43,110:77}
&gt;&gt;&gt; partial_duplicate_destroyer(mydict, 2)
{4: 9, 8: 0, 111: 43}
&gt;&gt;&gt; partial_duplicate_destroyer(mydict, 20)
{8: 0, 111: 43}
&gt;&gt;&gt; partial_duplicate_destroyer(mydict, 200)
{111: 43}
&gt;&gt;&gt; mydict
{111: 43}
</snippet></ROW><ROW><id>10215788</id><snippet>itertools.combinations()</snippet></ROW><ROW><id>10215788</id><snippet>mydict</snippet></ROW><ROW><id>10215788</id><snippet>mydict</snippet></ROW><ROW><id>10215788</id><snippet>{111: 43}</snippet></ROW><ROW><id>10215797</id><snippet>def allOnes2d(L):
    return all(allOnes(a) for a in L)
</snippet></ROW><ROW><id>10215969</id><snippet>from myapp.models import MenuItem
def menu(request):
    return {'menu': MenuItem.objects.all() }
</snippet></ROW><ROW><id>10215969</id><snippet>TEMPLATE_CONTEXT_PROCESSOR</snippet></ROW><ROW><id>10215969</id><snippet>settings.py</snippet></ROW><ROW><id>10215969</id><snippet>TEMPLATE_CONTEXT_PROCESSORS = (
    ...,
    'myapp.menu_context_processor.menu'
)
</snippet></ROW><ROW><id>10215969</id><snippet>{{ menu }}</snippet></ROW><ROW><id>10215969</id><snippet>{{ STATIC_URL }}</snippet></ROW><ROW><id>10215971</id><snippet>SELECT DISTINCT ?location
WHERE { 
   ?location vcard:fn [].
}
</snippet></ROW><ROW><id>10215971</id><snippet>:pt0001</snippet></ROW><ROW><id>10215971</id><snippet>SELECT ?location ?prop ?value
WHERE { 
   ?location vcard:fn [];
             ?prop ?value .
} ORDER BY ?location
</snippet></ROW><ROW><id>10215971</id><snippet>?location    ?prop           ?value
:pt0001      vcard:category  "Poste e Telegrafi"
:pt0001      vcard:name      "Ufficio Bologna 1"
:pt0001      vcard:tel       "051 243425"
(etc...)   
</snippet></ROW><ROW><id>10215971</id><snippet>SELECT ?location ?name ?cat ?tel
WHERE { 
   ?location vcard:fn ?name ;
             vcard:category ?cat ;
             vcard:tel ?tel .
} ORDER BY ?location
</snippet></ROW><ROW><id>10215971</id><snippet>?location ?name               ?cat                ?tel
:pt0001   "Ufficio Bologna 1" "Poste e Telegrafi" "051 243425"
</snippet></ROW><ROW><id>10215971</id><snippet> CONSTRUCT { ?subject ?predicate ?object }
 WHERE { 
   ?subject ?predicate ?object ;
            vcard:fn [] 
 }
</snippet></ROW><ROW><id>10216000</id><snippet>Surface.get_at((x, y)): return Color</snippet></ROW><ROW><id>10216429</id><snippet>version, sdk = re.findall(r'(?:Version: |SDK )([\w.-]+)', s)
</snippet></ROW><ROW><id>10216429</id><snippet>s = "New builds available Version: 20120418-abcdef-1 (based on SDK 0.0.0.1)"

import re
version, sdk = re.findall(r'(?:Version: |SDK )([\w.-]+)', s)

print version
print sdk

## 20120418-abcdef-1
## 0.0.0.1
</snippet></ROW><ROW><id>10216506</id><snippet>open(lock, 'w').write(os.getpid())</snippet></ROW><ROW><id>10216514</id><snippet>&gt;&gt;&gt; from celery import conf
&gt;&gt;&gt; conf.CELERYD_MAX_TASKS_PER_CHILD is None
True
</snippet></ROW><ROW><id>10216574</id><snippet>db.eval(Code("function () {"
             "coll.find({}, {field1: 1, field2: 2})"
             ".forEach( function(doc) {"
             "    doc.field1 += doc.field2;"
             "    coll.save(doc);"
             "    });"
             "}"))
</snippet></ROW><ROW><id>10216574</id><snippet>db.system.js.save({_id:'myfunc', value: function(){...}});</snippet></ROW><ROW><id>10216574</id><snippet>db.eval(Code('return myfunc()'))</snippet></ROW><ROW><id>10216708</id><snippet>data.append(dict(zip(('name', 'surname', 'phone', 'address', 'email', 'etc'),
                     line.split(";", 6))))
</snippet></ROW><ROW><id>10216773</id><snippet>In [30]: import struct
In [38]: struct.pack('&gt;3b',0,0,1)
Out[38]: '\x00\x00\x01'

In [39]: struct.unpack('&gt;i','\x00'+'\x00\x00\x01')
Out[39]: (1,)
</snippet></ROW><ROW><id>10216781</id><snippet>crawl</snippet></ROW><ROW><id>10216781</id><snippet>def crawl(url):
    d = getPage(url)
    d.addCallback(handlePage)

def handlePage(output):
    urls = getAllUrls(output)
    for url in urls:
        crawl(url)

crawl(url)
reactor.run()
</snippet></ROW><ROW><id>10216945</id><snippet>'QuerySet' object has no attribute 'create_user'</snippet></ROW><ROW><id>10216945</id><snippet>User.objects.db_manager('new_users').create_user(username=username, password=password, email='')
</snippet></ROW><ROW><id>10216945</id><snippet>new_user = User()
new_user.username = username
new_user.password = password
new_user.email = ''
new_user.save(using='user_data')
</snippet></ROW><ROW><id>10217202</id><snippet>from fractions import gcd

def generateTriples(limit):
    for n in xrange(1, limit):
        if (n**2 + (n+1)**2 &gt; limit):
            break
        for m in xrange(n+1, limit, 2):
            if (n**2 + m**2 &gt; limit):
                break
            if (gcd(n, m) &gt; 1):
                continue
            yield (m**2 - n**2, 2*m*n, m**2 + n**2)

def generate_triples_limit_leg(leg):
    limit = leg**2 / 2 + 1

    for triple in generateTriples(limit):
        if min(triple) &lt;= leg:
            yield triple

print list(generate_triples_limit_leg(i))
</snippet></ROW><ROW><id>10217202</id><snippet>def generate_triples(limit):
    # for each number up to the limit
    # Python ranges don't include the max number
    # start from 4 because 1 and 2 are invalid
    # and 3 and 4 give the same triplet
    for i in range(4, limit + 1):
        # if i is odd
        if i % 2:
            # the two larger legs are the integers
            # above and below half of the square of the smallest leg
            # // is floor division
            big = i**2 // 2
            yield i, big, big + 1
        else:
            # the two other legs are the integers
            # above and below half of the smallest leg squared
            big = (i // 2)**2
            yield i, big - 1, big + 1


print list(generate_triples(10))
# [(3, 4, 5), (5, 12, 13), (6, 8, 10),  (7, 24, 25), 
#             (8, 15, 17), (9, 40, 41), (10, 24, 26)]
</snippet></ROW><ROW><id>10217229</id><snippet>f1.read()</snippet></ROW><ROW><id>10217229</id><snippet>f1.seek(os.SEEK_SET)</snippet></ROW><ROW><id>10217307</id><snippet>#!/usr/bin/env TEST=anything python
</snippet></ROW><ROW><id>10217307</id><snippet>TEST=anything python</snippet></ROW><ROW><id>10217307</id><snippet>env</snippet></ROW><ROW><id>10217307</id><snippet>env</snippet></ROW><ROW><id>10217307</id><snippet>env</snippet></ROW><ROW><id>10217388</id><snippet>Daemon</snippet></ROW><ROW><id>10217388</id><snippet>#!/usr/bin/env python

import sys, os, time, atexit
from signal import SIGTERM

class Daemon:
        """
        A generic daemon class.

        Usage: subclass the Daemon class and override the run() method
        """
        def __init__(self, pidfile, stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):
                self.stdin = stdin
                self.stdout = stdout
                self.stderr = stderr
                self.pidfile = pidfile

        def daemonize(self):
                """
                do the UNIX double-fork magic, see Stevens' "Advanced
                Programming in the UNIX Environment" for details (ISBN 0201563177)
                http://www.erlenstar.demon.co.uk/unix/faq_2.html#SEC16
                """
                try:
                        pid = os.fork()
                        if pid &gt; 0:
                                # exit first parent
                                sys.exit(0)
                except OSError, e:
                        sys.stderr.write("fork #1 failed: %d (%s)\n" % (e.errno, e.strerror))
                        sys.exit(1)

                # decouple from parent environment
                os.chdir("/")
                os.setsid()
                os.umask(0)

                # do second fork
                try:
                        pid = os.fork()
                        if pid &gt; 0:
                                # exit from second parent
                                sys.exit(0)
                except OSError, e:
                        sys.stderr.write("fork #2 failed: %d (%s)\n" % (e.errno, e.strerror))
                        sys.exit(1)

                # redirect standard file descriptors
                sys.stdout.flush()
                sys.stderr.flush()
                si = file(self.stdin, 'r')
                so = file(self.stdout, 'a+')
                se = file(self.stderr, 'a+', 0)
                os.dup2(si.fileno(), sys.stdin.fileno())
                os.dup2(so.fileno(), sys.stdout.fileno())
                os.dup2(se.fileno(), sys.stderr.fileno())

                # write pidfile
                atexit.register(self.delpid)
                pid = str(os.getpid())
                file(self.pidfile,'w+').write("%s\n" % pid)

        def delpid(self):
                os.remove(self.pidfile)

        def start(self):
                """
                Start the daemon
                """
                # Check for a pidfile to see if the daemon already runs
                try:
                        pf = file(self.pidfile,'r')
                        pid = int(pf.read().strip())
                        pf.close()
                except IOError:
                        pid = None

                if pid:
                        message = "pidfile %s already exist. Daemon already running?\n"
                        sys.stderr.write(message % self.pidfile)
                        sys.exit(1)

                # Start the daemon
                self.daemonize()
                self.run()

        def stop(self):
                """
                Stop the daemon
                """
                # Get the pid from the pidfile
                try:
                        pf = file(self.pidfile,'r')
                        pid = int(pf.read().strip())
                        pf.close()
                except IOError:
                        pid = None

                if not pid:
                        message = "pidfile %s does not exist. Daemon not running?\n"
                        sys.stderr.write(message % self.pidfile)
                        return # not an error in a restart

                # Try killing the daemon process       
                try:
                        while 1:
                                os.kill(pid, SIGTERM)
                                time.sleep(0.1)
                except OSError, err:
                        err = str(err)
                        if err.find("No such process") &gt; 0:
                                if os.path.exists(self.pidfile):
                                        os.remove(self.pidfile)
                        else:
                                print str(err)
                                sys.exit(1)

        def restart(self):
                """
                Restart the daemon
                """
                self.stop()
                self.start()

        def run(self):
                """
                You should override this method when you subclass Daemon. It will be called after the process has been
            daemonized by start() or restart().
                """
</snippet></ROW><ROW><id>10217388</id><snippet>#!/usr/bin/env python

import sys, time
from daemon import Daemon

class MyDaemon(Daemon):
        def run(self):
                while True:
                        time.sleep(1)

if __name__ == "__main__":
        daemon = MyDaemon('/tmp/daemon-example.pid')
        if len(sys.argv) == 2:
                if 'start' == sys.argv[1]:
                        daemon.start()
                elif 'stop' == sys.argv[1]:
                        daemon.stop()
                elif 'restart' == sys.argv[1]:
                        daemon.restart()
                else:
                        print "Unknown command"
                        sys.exit(2)
                sys.exit(0)
        else:
                print "usage: %s start|stop|restart" % sys.argv[0]
                sys.exit(2)
</snippet></ROW><ROW><id>10217437</id><snippet>import os
import re
import shutil

def toInt(str):
  try:
    return int(str)
  except:
    return 0

filePath = "./"
extension = "png"

dirList = os.listdir(filePath)

regx = re.compile("[0-9]+a")

for filename in dirList:
  ext = filename[-len(extension):]
  if(ext != extension): continue
  rslts = regx.search(filename)
  if(rslts == None): continue
  pieces = regx.split(filename)
  if(len(pieces) &lt; 2): pieces.append("")
  filenumber = toInt(rslts.group(0).rstrip("a"))
  newFileNum = (filenumber + 1) / 2
  fileChar = "b"
  if(filenumber % 2): fileChar = "a"
  newFileName = "%s%03d%s%s" % (pieces[0], newFileNum, fileChar, pieces[1])
  shutil.move("%s%s" % (filePath, filename), "%s%s" % (filePath, newFileName))
</snippet></ROW><ROW><id>10217591</id><snippet>def application(environ, start_response):
    write = start_response('200 OK', [])
    try:
       write("response")
    except socket.error, ex:
       print ex
</snippet></ROW><ROW><id>10217683</id><snippet>&lt;form action=""</snippet></ROW><ROW><id>10217683</id><snippet>if request.method == 'POST'</snippet></ROW><ROW><id>10217683</id><snippet>response.redirect</snippet></ROW><ROW><id>10217941</id><snippet>pickle</snippet></ROW><ROW><id>10217941</id><snippet>memcached</snippet></ROW><ROW><id>10217941</id><snippet>memcached</snippet></ROW><ROW><id>10218015</id><snippet>with open('mytextfile.txt', encoding='utf-8') as f:
    for line in f:
        print(line, end='')
</snippet></ROW><ROW><id>10218015</id><snippet>end=''</snippet></ROW><ROW><id>10218015</id><snippet>print()</snippet></ROW><ROW><id>10218015</id><snippet>utf-8</snippet></ROW><ROW><id>10218135</id><snippet>run()</snippet></ROW><ROW><id>10218135</id><snippet>t.is_alive()</snippet></ROW><ROW><id>10218135</id><snippet>False</snippet></ROW><ROW><id>10218135</id><snippet>del t</snippet></ROW><ROW><id>10218215</id><snippet>hex(bignum).rstrip("L").lstrip("0x") or "0"
</snippet></ROW><ROW><id>10218215</id><snippet>strip()</snippet></ROW><ROW><id>10218312</id><snippet>Edit</snippet></ROW><ROW><id>10218312</id><snippet>UpdateView</snippet></ROW><ROW><id>10218312</id><snippet>update_object</snippet></ROW><ROW><id>10218517</id><snippet>from collections import defaultdict
recursivedict = lambda: defaultdict(recursivedict)
mydict = recursivedict()
</snippet></ROW><ROW><id>10218517</id><snippet>mydict['foo']</snippet></ROW><ROW><id>10218517</id><snippet>mydict['foo']</snippet></ROW><ROW><id>10218517</id><snippet>recursivedict</snippet></ROW><ROW><id>10218517</id><snippet>recursivedict</snippet></ROW><ROW><id>10218517</id><snippet>mydict['foo']['bar']['foobar']</snippet></ROW><ROW><id>10218517</id><snippet>25</snippet></ROW><ROW><id>10218573</id><snippet>result = fdf.groupby(['row',col'])['percent'].sum()
result.unstack('col').values
</snippet></ROW><ROW><id>10218573</id><snippet>fdf.pivot_table('percent', rows='row', cols='col', aggfunc='sum').values
</snippet></ROW><ROW><id>10218713</id><snippet>symlog</snippet></ROW><ROW><id>10218713</id><snippet>log</snippet></ROW><ROW><id>10218713</id><snippet>linthreshy</snippet></ROW><ROW><id>10219042</id><snippet>&gt;&gt;&gt; heap = []
&gt;&gt;&gt; counter = itertools.count()
&gt;&gt;&gt; for i in range(10):
...     heapq.heappush(heap, (i, -next(counter), str(i) + ' oldest'))
...     heapq.heappush(heap, (i, -next(counter), str(i) + ' newest'))
... 
&gt;&gt;&gt; heapq.heappop(heap)
(0, -1, '0 newest')
&gt;&gt;&gt; heapq.heappop(heap)
(0, 0, '0 oldest')
&gt;&gt;&gt; heapq.heappop(heap)
(1, -3, '1 newest')
&gt;&gt;&gt; heapq.heappop(heap)
(1, -2, '1 oldest')
</snippet></ROW><ROW><id>10219042</id><snippet>heapq</snippet></ROW><ROW><id>10219191</id><snippet>PKCS1OAEP.encrypt</snippet></ROW><ROW><id>10219293</id><snippet>collections.Counter</snippet></ROW><ROW><id>10219293</id><snippet>string = "baggage"
count = [0] * 256  # This should be big enough to hold counters for every 8 bit character

for x in string:
    num_value = ord(x)
    count[num_value] += 1

for i in range(256):  # loop through all the possible 8 numbers
    if count[i]: 
        print chr(i)*count[i]

# you can join them all back into a string like this
newstr = ''.join(chr(i)*c for i,c in enumerate(count))
</snippet></ROW><ROW><id>10219473</id><snippet>QMainWindow</snippet></ROW><ROW><id>10219473</id><snippet>QWidget</snippet></ROW><ROW><id>10219473</id><snippet>setCentralWidget</snippet></ROW><ROW><id>10219473</id><snippet>QMainWindow</snippet></ROW><ROW><id>10219473</id><snippet>from PyQt4.QtCore import Qt, SIGNAL
from PyQt4.QtGui import *

from ui_mainwindow import Ui_MainWindow

class Window(QMainWindow, Ui_MainWindow):
    def __init__(self, parent = None):

        QMainWindow.__init__(self, parent)
        # or better
        # super(Window, self).__init__(parent)

        self.setupUi(self)
</snippet></ROW><ROW><id>10219621</id><snippet>if __name__ == '__main__':
    app.debug = True
    app.run()
</snippet></ROW><ROW><id>10219621</id><snippet>TypeError: 'dict' object is not callable
</snippet></ROW><ROW><id>10219621</id><snippet>def api_response():
    from flask import jsonify
    if request.method == 'POST':
        return jsonify(**request.json)
</snippet></ROW><ROW><id>10219811</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>10219811</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>10219811</id><snippet>re.DOTALL</snippet></ROW><ROW><id>10219811</id><snippet>&gt;&gt;&gt; text = """this is the first line
and this is the second line
now it is the third line
wow, the fourth line
but now it's the fifth line
etc...
etc...
etc..."""
&gt;&gt;&gt; import re
&gt;&gt;&gt; match = re.search('^(now it is.*?but now.*?)$', text, flags=re.MULTILINE|re.DOTALL)
&gt;&gt;&gt; print match.group()
now it is the third line
wow, the fourth line
but now it's the fifth line
</snippet></ROW><ROW><id>10219819</id><snippet>Class.__dict__</snippet></ROW><ROW><id>10219819</id><snippet>dict</snippet></ROW><ROW><id>10219819</id><snippet>dictproxy</snippet></ROW><ROW><id>10219819</id><snippet>__dict__</snippet></ROW><ROW><id>10219819</id><snippet>obj.m is not obj.m</snippet></ROW><ROW><id>10219819</id><snippet>obj.m = obj.m</snippet></ROW><ROW><id>10219819</id><snippet>obj.m is obj.m</snippet></ROW><ROW><id>10219819</id><snippet>__get__()</snippet></ROW><ROW><id>10219819</id><snippet>id</snippet></ROW><ROW><id>10219819</id><snippet>id</snippet></ROW><ROW><id>10219819</id><snippet>id</snippet></ROW><ROW><id>10219819</id><snippet>id</snippet></ROW><ROW><id>10219981</id><snippet>**cd</snippet></ROW><ROW><id>10219981</id><snippet>BlogEntry</snippet></ROW><ROW><id>10219981</id><snippet>BlogTag</snippet></ROW><ROW><id>10219981</id><snippet>tags</snippet></ROW><ROW><id>10219981</id><snippet>BlogTag</snippet></ROW><ROW><id>10219981</id><snippet>BlogEntry</snippet></ROW><ROW><id>10220022</id><snippet>obj2</snippet></ROW><ROW><id>10220022</id><snippet>C2</snippet></ROW><ROW><id>10220022</id><snippet>f</snippet></ROW><ROW><id>10220022</id><snippet>C2</snippet></ROW><ROW><id>10220022</id><snippet>C2.f</snippet></ROW><ROW><id>10220022</id><snippet>C2.f</snippet></ROW><ROW><id>10220022</id><snippet>self.g</snippet></ROW><ROW><id>10220022</id><snippet>C2.g</snippet></ROW><ROW><id>10220022</id><snippet>C2</snippet></ROW><ROW><id>10220022</id><snippet>class C2(C1)</snippet></ROW><ROW><id>10220022</id><snippet>C1</snippet></ROW><ROW><id>10220022</id><snippet>C1.g</snippet></ROW><ROW><id>10220213</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; epoch_start = datetime.datetime(1601, 1, 1)
&gt;&gt;&gt; delta = datetime.timedelta(microseconds=12979264931952304)
&gt;&gt;&gt; epoch_start + delta
datetime.datetime(2012, 4, 18, 23, 22, 11, 952304)
</snippet></ROW><ROW><id>10220213</id><snippet>&gt;&gt;&gt; from dateutil import tz
&gt;&gt;&gt; from_zone = tz.tzutc()
&gt;&gt;&gt; to_zone = tz.tzlocal()
&gt;&gt;&gt; utc_time = (epoch_start + delta).replace(tzinfo=from_zone)
&gt;&gt;&gt; utc_time.astimezone(to_zone)
datetime.datetime(2012, 4, 18, 19, 22, 11, 952304, tzinfo=tzlocal())
</snippet></ROW><ROW><id>10220357</id><snippet>m×n</snippet></ROW><ROW><id>10220357</id><snippet>n</snippet></ROW><ROW><id>10220357</id><snippet>m</snippet></ROW><ROW><id>10220357</id><snippet>array1.dot(array2)</snippet></ROW><ROW><id>10220357</id><snippet>numpy.dot(array1, array2)</snippet></ROW><ROW><id>10220357</id><snippet>from numpy import array

values = array([(x % 2) for x in range(12)], dtype=bool).reshape((4,3))

weights = array(range(1, 4))

answers = values.dot(weights)
print answers
# output: [ 2 4 2 4 ]
</snippet></ROW><ROW><id>10220357</id><snippet>timeit</snippet></ROW><ROW><id>10220428</id><snippet>csv</snippet></ROW><ROW><id>10220428</id><snippet>delimiter</snippet></ROW><ROW><id>10220428</id><snippet>reader</snippet></ROW><ROW><id>10220428</id><snippet>import csv

txt_file = r"mytxt.txt"
csv_file = r"mycsv.csv"

# use 'with' if the program isn't going to immediately terminate
# so you don't leave files open
# the 'b' is necessary on Windows
# it prevents \x1a, Ctrl-z, from ending the stream prematurely
# and also stops Python converting to / from different line terminators
# On other platforms, it has no effect
in_txt = csv.reader(open(txt_file, "rb"), delimiter = '\t')
out_csv = csv.writer(open(csv_file, 'wb'))

out_csv.writerows(in_txt)
</snippet></ROW><ROW><id>10220713</id><snippet>Arrays.asList</snippet></ROW><ROW><id>10220713</id><snippet>List.indexOf</snippet></ROW><ROW><id>10220713</id><snippet>Arrays.binarySearch</snippet></ROW><ROW><id>10220908</id><snippet>kwd_mark = object()     # sentinel for separating args from kwargs

def cached_call(*args, **kwargs):
    key = args + (kwd_mark,) + tuple(sorted(kwds.items()))
    return cache.get(key)
</snippet></ROW><ROW><id>10220908</id><snippet>str(sorted(someset))</snippet></ROW><ROW><id>10220994</id><snippet>response = raw_input("What would you like to do next?")
</snippet></ROW><ROW><id>10220994</id><snippet>response = input("What would you like to do next?")
</snippet></ROW><ROW><id>10221013</id><snippet>\x00\x00\x00\x00\x00\x00\x00\x00
</snippet></ROW><ROW><id>10221013</id><snippet>\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00
</snippet></ROW><ROW><id>10221013</id><snippet>s = line.strip().split('\\x')
r = ''
for v in s:
    if len(v) &gt; 0:
        print v
        r += struct.pack('b', int(v, 16))
val = struct.unpack('d', r)[0]
print val
</snippet></ROW><ROW><id>10221052</id><snippet>&gt;&gt;&gt; def walk(d, val):
        while val in d:
            val = d[val]
        return None if val == '-' else val

&gt;&gt;&gt; d = {'1': '-', '0': '6', '3': '1', '2': '3', '4': '5', '6': '9'}
&gt;&gt;&gt; print {k: walk(d, k) for k in d}
{'1': None, '0': '9', '3': None, '2': None, '4': '5', '6': '9'}
</snippet></ROW><ROW><id>10221263</id><snippet>def myfunction():
   num = 5 
   return num  #returns 5


variableThatIsNotCalledNum = myfunction()
# my long named variable now holds the value 5

#error: no such variable around here
print num 

# prints the 5
print variableThatIsNotCalledNum 
</snippet></ROW><ROW><id>10221263</id><snippet>numericGrade()</snippet></ROW><ROW><id>10221263</id><snippet>letterGrade()</snippet></ROW><ROW><id>10221263</id><snippet>return</snippet></ROW><ROW><id>10221263</id><snippet>score</snippet></ROW><ROW><id>10221263</id><snippet>grade</snippet></ROW><ROW><id>10221311</id><snippet>int()</snippet></ROW><ROW><id>10221311</id><snippet>.replace()</snippet></ROW><ROW><id>10221311</id><snippet>"\n"</snippet></ROW><ROW><id>10221311</id><snippet>string = """
012345
242432
234323""".replace('\n', '')
</snippet></ROW><ROW><id>10221311</id><snippet>for</snippet></ROW><ROW><id>10221651</id><snippet>for o in main_object_list:
    o.my_special_flag = True 

for o in main_object_list:
    obj_list = o.get_this_object_list()
    for i in obj_list:
        if hasattr(i, 'my_special_flag'):
</snippet></ROW><ROW><id>10221651</id><snippet>set.intersection</snippet></ROW><ROW><id>10221651</id><snippet>main_object_set = set(main_object_list)

for o in main_object_list:
    obj_list = o.get_this_object_list()
    objs_in_main_list = main_object_set.intersection(obj_list)
    for i in objs_in_main_list:
        //do something with i
</snippet></ROW><ROW><id>10221651</id><snippet>main_object_set = set(main_object_list)

objs_in_main_list = set().update(
                           *(o.get_this_object_list() for o in main_object_list))
objs_in_main_list.intersection_update(main_object_set)
</snippet></ROW><ROW><id>10221740</id><snippet>created_at</snippet></ROW><ROW><id>10221740</id><snippet>DateTimeField</snippet></ROW><ROW><id>10221740</id><snippet>TIME_RANGE = datetime.timedelta(days=7)
now = datetime.datetime.now()

KarmaAction.objects.filter(created_at__gte=now - TIME_RANGE) \
                   .filter(user=recepient_user) \
                   .values('sender') \
                   .annotate(total_sent=Sum('karma')) \
                   .order_by('total_sent')
</snippet></ROW><ROW><id>10221740</id><snippet>values</snippet></ROW><ROW><id>10221740</id><snippet>sender</snippet></ROW><ROW><id>10221740</id><snippet>karma</snippet></ROW><ROW><id>10221740</id><snippet>order_by</snippet></ROW><ROW><id>10221740</id><snippet>n</snippet></ROW><ROW><id>10221740</id><snippet>[:5]</snippet></ROW><ROW><id>10221740</id><snippet>-total_sent</snippet></ROW><ROW><id>10221740</id><snippet>filter</snippet></ROW><ROW><id>10221885</id><snippet>ModelChoiceField</snippet></ROW><ROW><id>10221885</id><snippet>choices</snippet></ROW><ROW><id>10221885</id><snippet>queryset</snippet></ROW><ROW><id>10221885</id><snippet>{% regroup form.fields.product.queryset by supplier as grouped_products %}
{% for gp in grouped_products %}
    Supplier: {{ gp.grouper }} 
    {% for choice in gp.list %}
        &lt;input type="radio" name="product" value="{{ choice.pk }}" /&gt; {{ choice }}
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>10221978</id><snippet>data2 = data.replace('&amp;', 'and')
</snippet></ROW><ROW><id>10222192</id><snippet>import MySQLdb</snippet></ROW><ROW><id>10222428</id><snippet>r''</snippet></ROW><ROW><id>10222428</id><snippet>(?P&lt;video_id&gt;[^/]+)</snippet></ROW><ROW><id>10222428</id><snippet>video_id</snippet></ROW><ROW><id>10222428</id><snippet>video_id</snippet></ROW><ROW><id>10222428</id><snippet>view/([^/]+)/$</snippet></ROW><ROW><id>10222778</id><snippet>import re

js = open("yourfile.js", "r").readlines()[:2]

matcher_rex = re.compile(r'^var\s+(?P&lt;varname&gt;\w+)\s+=\s+"(?P&lt;varvalue&gt;[\w\s]+)";?$')
for line in js:
    matches = matcher_rex.match(line)
    if matches:
        name, value = matches.groups()
        print name, value
</snippet></ROW><ROW><id>10222837</id><snippet>           for td in cols:
                hum =  td.text.replace(" ", " ")
                print hum
                ws.write(x,y,hum)
</snippet></ROW><ROW><id>10223248</id><snippet>messages</snippet></ROW><ROW><id>10223428</id><snippet>class Name(webapp.RequestHandler):
  def get(self):
    names = db.GqlQuery('SELECT * FROM Main WHERE name=:1 LIMIT 1','Alan')
    photo_array = [] #initialize an array to store the photos dicts
    for name in names:
      for photos in name.photos: #go over all the Photo entities that reference 'Alan'
        #retrieve and put in a dictionary, and append to the photo_array
        photo_array.append({"photo1":photos.photo1, "photo2": photos.photo2})
    values = {'names':names, 'photos': photo_array}
    self.response.out.write(template.render('base.html', values))
</snippet></ROW><ROW><id>10223536</id><snippet>def crazy_fn(table):  
    result=dict()
    titles=read_col_headers(table)
    for title in titles:
        dict[title]=VALUE(TITLE)
    return result
</snippet></ROW><ROW><id>10223536</id><snippet>def crazy_fn(table):
   return {title : VALUE(TITLE) for title in read_col_headers(table)}
</snippet></ROW><ROW><id>10223544</id><snippet>.encode()</snippet></ROW><ROW><id>10223544</id><snippet>.decode()</snippet></ROW><ROW><id>10223544</id><snippet>\xfa\xe5\xeb\xf0\xe9\xfa \xf2\xe1\xe5\xe3\xe4
</snippet></ROW><ROW><id>10223544</id><snippet>תוכנית עבודה
</snippet></ROW><ROW><id>10223544</id><snippet>decode</snippet></ROW><ROW><id>10223544</id><snippet>"Windows-1255"</snippet></ROW><ROW><id>10223544</id><snippet>&gt;&gt;&gt; s
'\xfa\xe5\xeb\xf0\xe9\xfa \xf2\xe1\xe5\xe3\xe4'
&gt;&gt;&gt; s.decode("Windows-1255")
u'\u05ea\u05d5\u05db\u05e0\u05d9\u05ea \u05e2\u05d1\u05d5\u05d3\u05d4'
</snippet></ROW><ROW><id>10223544</id><snippet>&gt;&gt;&gt; s.decode("Windows-1255").encode("utf-8")
'\xd7\xaa\xd7\x95\xd7\x9b\xd7\xa0\xd7\x99\xd7\xaa \xd7\xa2\xd7\x91\xd7\x95\xd7\x93\xd7\x94'
</snippet></ROW><ROW><id>10223544</id><snippet>latin-1</snippet></ROW><ROW><id>10223643</id><snippet>tastypie.resources</snippet></ROW><ROW><id>10223643</id><snippet>1027</snippet></ROW><ROW><id>10223643</id><snippet>def get_list(self, request, **kwargs):

    # ...

    # TODO: Uncached for now. Invalidation that works for everyone may be
    #       impossible.
    objects = self.obj_get_list(
        request=request, **self.remove_api_resource_names(kwargs))

    # ...
</snippet></ROW><ROW><id>10223643</id><snippet>1050</snippet></ROW><ROW><id>10223643</id><snippet>def get_detail(self, request, **kwargs):

   # ...

   try:
       obj = self.cached_obj_get(
           request=request, **self.remove_api_resource_names(kwargs))

   # ...
</snippet></ROW><ROW><id>10223643</id><snippet>obj_get_list</snippet></ROW><ROW><id>10223643</id><snippet>cached_obj_get_list</snippet></ROW><ROW><id>10223643</id><snippet>get_list</snippet></ROW><ROW><id>10223643</id><snippet>cached_obj_get_list</snippet></ROW><ROW><id>10223643</id><snippet>http://localhost:8000/api/poll/&lt;pk&gt;/?format=json</snippet></ROW><ROW><id>10223643</id><snippet>http://localhost:8000/api/poll/?format=json</snippet></ROW><ROW><id>10223962</id><snippet>d = {}
l1 = [1, 2, 3]
l2 = [4, 5, 6]
d['l1'] = l1  # Define your own key for 'l1' 
d['l2'] = l2  # Define your own key for 'l2' 
</snippet></ROW><ROW><id>10224010</id><snippet>class Room:
    def __init__(self, name):
        self.name = name
    def examine(self):
        return "This %s looks clean!" % self.name

class Furniture:
    def __init__(self, name):
        self.name = name
    def examine(self):
        return "This %s looks comfortable..." % self.name

def examination(l):
    for item in l:
        print item.examine()

list_of_objects = [ Room("Living Room"), Furniture("Couch"), 
                    Room("Restrooms"), Furniture("Bed") ]
examination(list_of_objects)
</snippet></ROW><ROW><id>10224010</id><snippet>This Living Room looks clean!
This Couch looks comfortable...
This Restrooms looks clean!
This Bed looks comfortable...
</snippet></ROW><ROW><id>10224010</id><snippet>examine()</snippet></ROW><ROW><id>10224010</id><snippet>my_dict = {'look': CallLook(rooms[i])} # this is no dict of functions
</snippet></ROW><ROW><id>10224010</id><snippet>dict</snippet></ROW><ROW><id>10224010</id><snippet>{'look': None}</snippet></ROW><ROW><id>10224010</id><snippet>examine()</snippet></ROW><ROW><id>10224010</id><snippet>my_dict = {'look': CallLook} # this is a dict of functions
</snippet></ROW><ROW><id>10224010</id><snippet>'look'</snippet></ROW><ROW><id>10224010</id><snippet>room</snippet></ROW><ROW><id>10224010</id><snippet>CallLook</snippet></ROW><ROW><id>10224010</id><snippet>def CallLook(current_room)
   return current_room.examine # return the bound examine
my_dict = {'look': CallLook(room[i])} # this is also a dict of functions
</snippet></ROW><ROW><id>10224010</id><snippet>dict()</snippet></ROW><ROW><id>10224010</id><snippet>dict</snippet></ROW><ROW><id>10224838</id><snippet>invoice_line</snippet></ROW><ROW><id>10224838</id><snippet>account.invoice.line</snippet></ROW><ROW><id>10224838</id><snippet>account.service.line</snippet></ROW><ROW><id>10224919</id><snippet>/</snippet></ROW><ROW><id>10224919</id><snippet>\\</snippet></ROW><ROW><id>10224919</id><snippet>e:/python/ex15_sample.txt</snippet></ROW><ROW><id>10224919</id><snippet>e:\\python\\ex15_sample.txt</snippet></ROW><ROW><id>10225191</id><snippet>db.test.find({'col1': {'$in': ['foo', 'bar']}});</snippet></ROW><ROW><id>10225191</id><snippet>col1</snippet></ROW><ROW><id>10225191</id><snippet>in</snippet></ROW><ROW><id>10225191</id><snippet>['foo', 'bar']</snippet></ROW><ROW><id>10225593</id><snippet>r"(?:[KR]-*){1,3}(?:[^-]?-*){2}[KR]-*(?:[^-]-*){2}(?:[^-]?-*){2}[ILVM]-*[^-]-*[ILVF]"
</snippet></ROW><ROW><id>10225593</id><snippet>(?:</snippet></ROW><ROW><id>10225593</id><snippet>{m,n}</snippet></ROW><ROW><id>10225736</id><snippet>DATABASES = {
    'default': {
        'NAME': 'celerybeat.db',
        'ENGINE': 'django.db.backends.sqlite3',
    },
}
INSTALLED_APPS = ('djcelery', )
</snippet></ROW><ROW><id>10225736</id><snippet>$ PYTHONPATH=. django-admin.py syncdb --settings=celeryconfig
</snippet></ROW><ROW><id>10225736</id><snippet>$ PYTHONPATH=. django-admin.py celerybeat --settings=celeryconfig \
    -S djcelery.schedulers.DatabaseScheduler
</snippet></ROW><ROW><id>10225736</id><snippet>djcelerymon</snippet></ROW><ROW><id>10225736</id><snippet>   $ djcelerymon
</snippet></ROW><ROW><id>10225828</id><snippet>dict['hits'].update({'&amp;lt': 30})
</snippet></ROW><ROW><id>10226269</id><snippet>manage.py dumpdata sites</snippet></ROW><ROW><id>10226269</id><snippet>fixtures/initial_data.json</snippet></ROW><ROW><id>10226269</id><snippet>fixtures/initial_data.json</snippet></ROW><ROW><id>10226353</id><snippet>raw_input()</snippet></ROW><ROW><id>10226353</id><snippet>ESC</snippet></ROW><ROW><id>10226353</id><snippet>curses</snippet></ROW><ROW><id>10226353</id><snippet>msvcrt</snippet></ROW><ROW><id>10226353</id><snippet>Ctrl-C</snippet></ROW><ROW><id>10226353</id><snippet>if</snippet></ROW><ROW><id>10226353</id><snippet>elif</snippet></ROW><ROW><id>10226353</id><snippet>elif</snippet></ROW><ROW><id>10226421</id><snippet>reduce</snippet></ROW><ROW><id>10226421</id><snippet>functools</snippet></ROW><ROW><id>10226421</id><snippet>import functools

def main():
    def add(x,y): return x+y
    functools.reduce(add, range(1, 11))
</snippet></ROW><ROW><id>10226465</id><snippet>.bat</snippet></ROW><ROW><id>10226465</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>10226465</id><snippet>schtasks /Create /SC HOURLY /TN PythonTask /TR "my_scheduled_task.bat"
</snippet></ROW><ROW><id>10226465</id><snippet>my_scheduled_task.bat</snippet></ROW><ROW><id>10226465</id><snippet>c:
cd \my\dest\dir
c:\python32\python.exe c:\my\superscripts\dbsynchronizator.py
</snippet></ROW><ROW><id>10226658</id><snippet>&gt;&gt;&gt; url =  urllib.urlopen('http://www.edmunds.com/dealerships/Texas/Grapevine/GrapevineFordLincoln_1/fullservice-505318162.html')
&gt;&gt;&gt; url.headers.get('content-type')
'text/html; charset=ISO-8859-1'

&gt;&gt;&gt; response = url.read()
#let's convert to unicode first
&gt;&gt;&gt; response_unicode = codecs.decode(response, 'ISO-8859-1')
&gt;&gt;&gt; dom = html.fromstring(response_unicode)
#and now...
&gt;&gt;&gt; dom.xpath("//div[@class='description item vcard']")[0].xpath(".//p[@class='service-review-paragraph loose-spacing']")[0].text_content()
u'\n                  On December 5th, my vehicle completely shut down.\nI had it towed to Grapevine Ford where they told me that the intak.....
</snippet></ROW><ROW><id>10226674</id><snippet>&gt;&gt;&gt; [100.0 * a1 / a2 - 100 for a1, a2 in zip(a[1:], a)]
[5.0, -4.7619047619047592, -5.0, 5.2631578947368354]
</snippet></ROW><ROW><id>10226674</id><snippet>&gt;&gt;&gt; a = range(5)
&gt;&gt;&gt; a
[0, 1, 2, 3, 4]
&gt;&gt;&gt; zip(a, a[1:])
[(0, 1), (1, 2), (2, 3), (3, 4)]
</snippet></ROW><ROW><id>10226971</id><snippet>src = ColorConvert[Import["http://davemark.com/images/sudoku.jpg"], "Grayscale"];
white = Closing[src, DiskMatrix[5]];
srcAdjusted = Image[ImageData[src]/ImageData[white]]
</snippet></ROW><ROW><id>10226971</id><snippet>components = 
  ComponentMeasurements[
    ColorNegate@Binarize[srcAdjusted], {"ConvexArea", "Mask"}][[All, 
    2]];
largestComponent = Image[SortBy[components, First][[-1, 2]]]
</snippet></ROW><ROW><id>10226971</id><snippet>mask = FillingTransform[largestComponent]
</snippet></ROW><ROW><id>10226971</id><snippet>lY = ImageMultiply[MorphologicalBinarize[GaussianFilter[srcAdjusted, 3, {2, 0}], {0.02, 0.05}], mask];
lX = ImageMultiply[MorphologicalBinarize[GaussianFilter[srcAdjusted, 3, {0, 2}], {0.02, 0.05}], mask];
</snippet></ROW><ROW><id>10226971</id><snippet>verticalGridLineMasks = 
  SortBy[ComponentMeasurements[
      lX, {"CaliperLength", "Centroid", "Mask"}, # &gt; 100 &amp;][[All, 
      2]], #[[2, 1]] &amp;][[All, 3]];
horizontalGridLineMasks = 
  SortBy[ComponentMeasurements[
      lY, {"CaliperLength", "Centroid", "Mask"}, # &gt; 100 &amp;][[All, 
      2]], #[[2, 2]] &amp;][[All, 3]];
</snippet></ROW><ROW><id>10226971</id><snippet>centerOfGravity[l_] := 
 ComponentMeasurements[Image[l], "Centroid"][[1, 2]]
gridCenters = 
  Table[centerOfGravity[
    ImageData[Dilation[Image[h], DiskMatrix[2]]]*
     ImageData[Dilation[Image[v], DiskMatrix[2]]]], {h, 
    horizontalGridLineMasks}, {v, verticalGridLineMasks}];
</snippet></ROW><ROW><id>10226971</id><snippet>fnX = ListInterpolation[gridCenters[[All, All, 1]]];
fnY = ListInterpolation[gridCenters[[All, All, 2]]];
transformed = 
 ImageTransformation[
  srcAdjusted, {fnX @@ Reverse[#], fnY @@ Reverse[#]} &amp;, {9*50, 9*50},
   PlotRange -&gt; {{1, 10}, {1, 10}}, DataRange -&gt; Full]
</snippet></ROW><ROW><id>10227085</id><snippet>import serial
ser = serial.Serial('/dev/ttyS1', 9600, timeout=1)
ser.write("hello")
result = ser.readline()  # read a '\n' terminated line
print(result)
ser.close()
</snippet></ROW><ROW><id>10227085</id><snippet>ser = serial.Serial('COM12', 19200, timeout=1)
</snippet></ROW><ROW><id>10227085</id><snippet>serial.tools.list_ports.comports()</snippet></ROW><ROW><id>10227414</id><snippet>QTabWidget.currentWidget</snippet></ROW><ROW><id>10227478</id><snippet>^\[([0-9 ]+)\]\s+(.+)\s*$

^                  start of the line
\[                 literal [
([0-9 ]+)          group of 0-9 or space, one or more times
\]                 literal ]
\s+                one or more spaces
(.+)               group of anything one or moretimes
\s*                zero or more spaces 
$                  end of line


eg: "[5 5 5] blah"

gives:
    group1 = "5 5 5"
    group2 = blah

^([0-9A-Fx]+)\s+([0-9A-Fx]+)\s+(\[([ 0-9]+)\]|\w+)\s+(.*?)\s*$

^                  start of line
([0-9A-Fx]+)       group of chars one or more times
\s+                one or more spaces
([0-9A-Fx]+)       group of chars one or more times
\s+                one or more spaces
(
    \[             literal [
    ([ 0-9]+)      group of char 1 or more times
    \]             literal [
    |              or
    \w+            word char, one or more times
)
\s+                one or more spaces
(.*?)              any char zero or more times, non greedy
\s*                zero or more spaces
$                  end of line
</snippet></ROW><ROW><id>10227479</id><snippet>&gt;&gt;&gt; con = b'\x00\x00\x00\x01'
&gt;&gt;&gt; struct.unpack('&gt;i', con)
(1,)
</snippet></ROW><ROW><id>10227493</id><snippet>&gt;&gt;&gt; sorted([bool, int, float, long, list, tuple, dict, str, unicode])
[&lt;type 'bool'&gt;, &lt;type 'float'&gt;, &lt;type 'int'&gt;, &lt;type 'list'&gt;, &lt;type 'long'&gt;,
 &lt;type 'dict'&gt;, &lt;type 'str'&gt;, &lt;type 'tuple'&gt;, &lt;type 'unicode'&gt;]
</snippet></ROW><ROW><id>10227493</id><snippet>&gt;&gt;&gt; sorted(zoo)
[None, -5, -5.0, 0, 0.0, -0.0, False, True, 10, 10.0, 11.5, {},
 {'abc': 10}, {'lmno': 20}, [], [1, 2], [1, 2, 3], [1, [2, 3]],
 '', u'', 'alpha', u'alpha', 'bingo', 'cat', (), (1, 2), 
 (1, 2, 3), (1, (2, 3)), u'bingo', u'cat']
</snippet></ROW><ROW><id>10227734</id><snippet>Content-Type=image/jpeg</snippet></ROW><ROW><id>10227734</id><snippet>Content-Disposition</snippet></ROW><ROW><id>10228558</id><snippet>pip</snippet></ROW><ROW><id>10228558</id><snippet>pip</snippet></ROW><ROW><id>10228558</id><snippet>pyCURL</snippet></ROW><ROW><id>10228558</id><snippet>pip</snippet></ROW><ROW><id>10228558</id><snippet>python2.7</snippet></ROW><ROW><id>10228558</id><snippet>pip install pycurl</snippet></ROW><ROW><id>10228558</id><snippet>distribute</snippet></ROW><ROW><id>10228979</id><snippet>import struct
s.sendall(struct.pack('i', len(data)))
</snippet></ROW><ROW><id>10229092</id><snippet>itertools.product</snippet></ROW><ROW><id>10229092</id><snippet>def seq(s):
    length = 1
    while True:
        for p in itertools.product(s, repeat=length):
            yield p
        length += 1
</snippet></ROW><ROW><id>10229092</id><snippet>&gt;&gt;&gt; zip(range(10), seq(set((1, 2, 3))))
[(0, (1,)), (1, (2,)), (2, (3,)), (3, (1, 1)), (4, (1, 2)), 
 (5, (1, 3)), (6, (2, 1)), (7, (2, 2)), (8, (2, 3)), (9, (3, 1))]
</snippet></ROW><ROW><id>10229092</id><snippet>&gt;&gt;&gt; test_seq = itertools.izip(itertools.count(), seq(set((1, 2, 3))))
&gt;&gt;&gt; for i in range(10):
...     next(test_seq)
... 
(0, (1,))
(1, (2,))
(2, (3,))
(3, (1, 1))
(4, (1, 2))
(5, (1, 3))
(6, (2, 1))
(7, (2, 2))
(8, (2, 3))
(9, (3, 1))
</snippet></ROW><ROW><id>10229092</id><snippet>itertools</snippet></ROW><ROW><id>10229092</id><snippet>&gt;&gt;&gt; from itertools import chain, product, count
&gt;&gt;&gt; s = set((1, 2, 3))
&gt;&gt;&gt; test_seq = chain.from_iterable(product(s, repeat=n) for n in count(1))
&gt;&gt;&gt; zip(range(10), test_seq)
[(0, (1,)), (1, (2,)), (2, (3,)), (3, (1, 1)), (4, (1, 2)), (5, (1, 3)), 
 (6, (2, 1)), (7, (2, 2)), (8, (2, 3)), (9, (3, 1))]
</snippet></ROW><ROW><id>10229153</id><snippet>put</snippet></ROW><ROW><id>10229153</id><snippet>put_file</snippet></ROW><ROW><id>10229153</id><snippet>def put(self):
        path = '/' + self.request_path
        self.client.put_file(ROOT, os.path.dirname(path), self.request.body_file, file_name=os.path.basename(path))
        self.response.set_status(201,'Created')
</snippet></ROW><ROW><id>10229153</id><snippet>put_file</snippet></ROW><ROW><id>10229153</id><snippet>f = open('working-draft.txt')
response = client.put_file('/magnum-opus.txt', f)
print "uploaded:", response
</snippet></ROW><ROW><id>10229153</id><snippet>put_file</snippet></ROW><ROW><id>10229153</id><snippet>self.client.put_file(path, self.request.body_file)
</snippet></ROW><ROW><id>10229153</id><snippet>put_file</snippet></ROW><ROW><id>10229153</id><snippet>put_file</snippet></ROW><ROW><id>10229407</id><snippet>width</snippet></ROW><ROW><id>10229407</id><snippet>.. image:: _images/report_title.png
   :width: 30%
.. image:: _images/report_slide1.png
   :width: 30%
.. image:: _images/report_slide2.png
   :width: 30%
</snippet></ROW><ROW><id>10229473</id><snippet>myvar = MyClass(name="example")
</snippet></ROW><ROW><id>10229473</id><snippet>in = new Scanner(System.in);
</snippet></ROW><ROW><id>10229473</id><snippet>fahr = in.nextDouble();
</snippet></ROW><ROW><id>10229511</id><snippet>zip</snippet></ROW><ROW><id>10229511</id><snippet>itertools.izip</snippet></ROW><ROW><id>10229511</id><snippet>from itertools import izip

for synset, synset_scores in izip(wn.synsets(wordstr), swn_senti_synset):
    # Now you can deal with both at once in this loop.
    len_lemma_names = len(synset.lemma_names)
    count_lemma += len_lemma_names
    count_synset += 1
    # Mix to taste.
    print len_lemma_names, count_synset
</snippet></ROW><ROW><id>10229511</id><snippet>count_synset</snippet></ROW><ROW><id>10229511</id><snippet>enumerate</snippet></ROW><ROW><id>10229772</id><snippet>sftp</snippet></ROW><ROW><id>10229772</id><snippet>$ sftp remote-server
subsystem request failed on channel 0
Couldn't read packet: Connection reset by peer
</snippet></ROW><ROW><id>10229772</id><snippet>sftp</snippet></ROW><ROW><id>10229772</id><snippet>Subsystem sftp /usr/lib/openssh/sftp-server
</snippet></ROW><ROW><id>10229772</id><snippet>/etc/ssh/sshd_config</snippet></ROW><ROW><id>10229772</id><snippet>/etc/init.d/ssh restart</snippet></ROW><ROW><id>10229772</id><snippet>Subsystem sftp internal-sftp
</snippet></ROW><ROW><id>10229772</id><snippet>ssh</snippet></ROW><ROW><id>10229772</id><snippet>$ sftp remote-server
Connected to remote-server
sftp&gt;
</snippet></ROW><ROW><id>10230197</id><snippet>initial = ["Fred-Jim","Fred","Fred-Jim-Bob", "Fred-Jim-Jack", "John", "John-Jim"]

result = {}

for item in initial:
    hierarchy = item.split('-')
    local_result = result
    for node in hierarchy:
        local_result = local_result.setdefault(node, {})

print result
</snippet></ROW><ROW><id>10230197</id><snippet>{
    'John': {
        'Jim': {}
    }, 
    'Fred': {
        'Jim': {
            'Bob': {},
            'Jack': {}
        }
    }
}
</snippet></ROW><ROW><id>10230240</id><snippet>groupby</snippet></ROW><ROW><id>10230240</id><snippet>Counter</snippet></ROW><ROW><id>10230240</id><snippet>defaultdict</snippet></ROW><ROW><id>10230240</id><snippet>groupby</snippet></ROW><ROW><id>10230240</id><snippet>defaultdict</snippet></ROW><ROW><id>10230240</id><snippet>Counter</snippet></ROW><ROW><id>10230240</id><snippet>import collections

#tuples of (length, position)
rods = [(18, 21), (17, 2), (15, 3), (14, 21), (14, 5), (13, 6), (13, 7),
        (13, 8), (13, 9), (13, 10), (13, 11), (13, 12), (13, 13), (13, 14),
        (13, 15), (13, 16), (13, 17), (13, 18), (13, 19), (13, 20), (13, 21),
        (13, 22), (13, 23), (13, 24), (13, 25), (13, 26), (12, 5), (12, 21),
        (12, 2)]

lengths = (length for length, position in rods)
length_freq = collections.Counter(lengths)
((best_length, _),) = length_freq.most_common(1)
print best_length

#cumulative frequency of rods near best_length, with unique position:
rod_filter = ((l, p) for l, p in rods if best_length - 1 &lt;= l &lt;= best_length + 1)
tally = len(set((best_length, p) for l, p in rod_filter))

print length_freq
print tally
</snippet></ROW><ROW><id>10230240</id><snippet>Counter</snippet></ROW><ROW><id>10230240</id><snippet>length_freq = collections.Counter(lengths)
((best_length, _),) = length_freq.most_common(1)
</snippet></ROW><ROW><id>10230240</id><snippet>length_freq = collections.defaultdict(int)
for l in lengths:
    length_freq[l] += 1
best_length = max(length_freq, key=length_freq.get)
</snippet></ROW><ROW><id>10230291</id><snippet>&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, 'English')
&gt;&gt;&gt; 'English_United States.1252'

&gt;&gt;&gt; print locale.format('%.2f', 123456789.0, True)
&gt;&gt;&gt; 123,456,789.00
</snippet></ROW><ROW><id>10230412</id><snippet>if request.method == "POST":

    if form.is_valid():
        # ....
    return HttpResponseRedirect('/login/')  # not indented
</snippet></ROW><ROW><id>10230412</id><snippet>if request.method == "POST":

    if form.is_valid():
        # ....
        return HttpResponseRedirect('/login/')  # indented
</snippet></ROW><ROW><id>10230412</id><snippet>def clean_username(self):
    username = self.cleaned_data['username']
    try:
        User.objects.get(username=username)
    except User.DoesNotExist:
        return username

        raise forms.ValidationError("That username  already exists. Please select another")
</snippet></ROW><ROW><id>10230412</id><snippet>def clean_username(self):
    username = self.cleaned_data['username']
    try:
        User.objects.get(username=username)
        raise forms.ValidationError("That username already exists. "
                                    "Please select another")
    except User.DoesNotExist:
        return username
</snippet></ROW><ROW><id>10230491</id><snippet>useful = []
with open ("Report.txt", "r") as myfile:
    for line in myfile:
        if "===" in line:
            break
    for line in myfile:
        useful.append(line)
a_string = "".join(useful)
</snippet></ROW><ROW><id>10230491</id><snippet>def report_iterator():
    with open ("Report.txt", "r") as myfile:
        for line in myfile:
            if "===" in line:
                break
        for line in myfile:
            yield line

for line in report_iterator():
    # do stuff with line
</snippet></ROW><ROW><id>10231166</id><snippet>{{thing['attr'] if defined('thing') else ''}}
</snippet></ROW><ROW><id>10231336</id><snippet>\</snippet></ROW><ROW><id>10231336</id><snippet>\</snippet></ROW><ROW><id>10231336</id><snippet>\</snippet></ROW><ROW><id>10231336</id><snippet>self.c='\\begin{tabular} ['
</snippet></ROW><ROW><id>10231336</id><snippet>self.c=r'\begin{tabular} ['
</snippet></ROW><ROW><id>10231509</id><snippet>&gt;&gt;&gt; map(lambda x: x.foo(), [B(1), C(1)])
&gt;&gt;&gt; [2, 0]
</snippet></ROW><ROW><id>10231525</id><snippet>&gt;&gt;&gt; def fill(shape,value):
    if not shape: return value
    return [fill(shape[1:],value) for i in range(shape[0])]
</snippet></ROW><ROW><id>10231525</id><snippet>&gt;&gt;&gt; import copy
&gt;&gt;&gt; def fill(shape,value):
    result=value
    for i in reversed(shape):
        result=[copy.deepcopy(result) for j in range(i)]
    return result
</snippet></ROW><ROW><id>10231622</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>10231622</id><snippet>json.dump*()</snippet></ROW><ROW><id>10231622</id><snippet>codecs.open()</snippet></ROW><ROW><id>10232037</id><snippet>import re
re.findall("[0-9]{4}","8584320342564023450211233923239923239110001012346596")
</snippet></ROW><ROW><id>10232037</id><snippet>&gt;&gt;&gt; re.findall("(?=(\d{4}))","8584320342564023450211233923239923239110001012346596")
['8584', '5843', '8432', '4320', '3203', '2034', '0342', '3425', '4256', '2564', '5640', '6402', '4023', '0234', '2345', '3450', '4502', '5021', '0211', '2112', '1123', '1233', '2339', '3392', '3923', '9232', '2323', '3239', '2399', '3992', '9923', '9232', '2323', '3239', '2391', '3911', '9110', '1100', '1000', '0001', '0010', '0101', '1012', '0123', '1234', '2346', '3465', '4659', '6596']
</snippet></ROW><ROW><id>10232298</id><snippet>line = line.strip(); 
if not line: continue
</snippet></ROW><ROW><id>10232298</id><snippet>if not json.loads(line).get('text'):
    continue
</snippet></ROW><ROW><id>10232298</id><snippet>word_count = defaultdict(int)
for line in file:
    # get words and add them to dict
    for word in words:
        word_count[word]+=1
</snippet></ROW><ROW><id>10232522</id><snippet>username</snippet></ROW><ROW><id>10232522</id><snippet>__getattribute__</snippet></ROW><ROW><id>10232522</id><snippet>type.__getattribute__()</snippet></ROW><ROW><id>10232522</id><snippet>class MyD(object):
    def __init__(self, val):
        self.val = val

    def __get__(self, obj, objtype):
        return self.val

    def __set__(self, obj, val):
        self.val = val

class C(object):
    a = MyD(42)
    def __init__(self):
        self.d = MyD(42)

    def __getattribute__(self, name):
        attr = super(C, self).__getattribute__(name)
        if hasattr(attr, '__get__'):
            return attr.__get__(self, C)
        return attr

c = C()
print c.d
print c.a
</snippet></ROW><ROW><id>10232522</id><snippet>42
42
</snippet></ROW><ROW><id>10232540</id><snippet>import cgi
import cgitb     #this...
cgitb.enable()   #..and this are not really necessary but helps debuging

data= cgi.FieldStorage()

#remove this commant to take a look in the data received by python
#print data

#here you can retrieve the value passed by ajax
print data['testdata'].value
</snippet></ROW><ROW><id>10232555</id><snippet>main</snippet></ROW><ROW><id>10232555</id><snippet>term</snippet></ROW><ROW><id>10232555</id><snippet>count</snippet></ROW><ROW><id>10232555</id><snippet>total</snippet></ROW><ROW><id>10232555</id><snippet>main</snippet></ROW><ROW><id>10232555</id><snippet>0</snippet></ROW><ROW><id>10232555</id><snippet>main</snippet></ROW><ROW><id>10232555</id><snippet>global term, count, total</snippet></ROW><ROW><id>10232555</id><snippet>main</snippet></ROW><ROW><id>10232555</id><snippet>main</snippet></ROW><ROW><id>10232555</id><snippet>main</snippet></ROW><ROW><id>10232555</id><snippet>total</snippet></ROW><ROW><id>10232555</id><snippet>print(main())</snippet></ROW><ROW><id>10232555</id><snippet>fibonacci</snippet></ROW><ROW><id>10232555</id><snippet>main</snippet></ROW><ROW><id>10232555</id><snippet>term</snippet></ROW><ROW><id>10232691</id><snippet>xrange</snippet></ROW><ROW><id>10232691</id><snippet>set</snippet></ROW><ROW><id>10232691</id><snippet>permutation_indices = set()
while len(permutation_indices) &lt; k:
    permutation_indices.add(random.randrange(total_permutations))
</snippet></ROW><ROW><id>10233116</id><snippet>&lt;form method="post" action="{{ url_for('add_notes',agency='something') }}"&gt;
</snippet></ROW><ROW><id>10233196</id><snippet>,(?=\S)
</snippet></ROW><ROW><id>10233196</id><snippet>&gt;&gt;&gt; re.sub(r",(?=\S)", ", ", "Hello,World! Hello, World!")
'Hello, World! Hello, World!'
</snippet></ROW><ROW><id>10233305</id><snippet>re</snippet></ROW><ROW><id>10233305</id><snippet>sys.path</snippet></ROW><ROW><id>10233620</id><snippet>query = "SELECT seqid, date, name, steamid, team, text, type, 'hunting_term' as triggerword, '0.01' as weight FROM chatlogs WHERE date &gt; '2012-04-18 23:47:58.439124' AND text LIKE '%hunting_term%' ORDER BY DATE"
db.cursor().execute(query, ())
</snippet></ROW><ROW><id>10233620</id><snippet>db.cursor().execute()</snippet></ROW><ROW><id>10233620</id><snippet>query % ()
</snippet></ROW><ROW><id>10233620</id><snippet>&gt;&gt;&gt; query % ()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: not enough arguments for format string
</snippet></ROW><ROW><id>10233620</id><snippet>%</snippet></ROW><ROW><id>10233620</id><snippet>%%</snippet></ROW><ROW><id>10233620</id><snippet>db.cursor().execute()</snippet></ROW><ROW><id>10233620</id><snippet>query = "SELECT seqid, date, name, steamid, team, text, type, '%s' as triggerword, '%s' as weight FROM chatlogs WHERE date &gt; '%s' AND text LIKE '%%%%%s%%%%' ORDER BY DATE" % (word, weight, self.setting['LAST_RUN_TIME'], word)
</snippet></ROW><ROW><id>10233620</id><snippet>query = "SELECT seqid, date, name, steamid, team, text, type, %s as triggerword, %s as weight FROM chatlogs WHERE date &gt; %s AND text LIKE %s ORDER BY DATE"
parameters = (word, weight, setting['LAST_RUN_TIME'], '%%%s%%' % word)
for message in mysqldb.query(query, *parameters):
    print "A row"
</snippet></ROW><ROW><id>10233735</id><snippet>%s</snippet></ROW><ROW><id>10233735</id><snippet>import datetime
d = datetime.datetime(2012, 4, 19, 22, 37, 1, 866262)
d.strftime("%s") # gives: ''
</snippet></ROW><ROW><id>10234043</id><snippet>test_method = MethodType(partial(test_number, n=i), TestNumbers)
</snippet></ROW><ROW><id>10234043</id><snippet>test_method = MethodType(partial(test_number, n=i), None, TestNumbers)
</snippet></ROW><ROW><id>10234043</id><snippet>test_method = MethodType(partial(test_number, n=i), TestNumbers)
</snippet></ROW><ROW><id>10234043</id><snippet>test_method = lambda self: test_number(self, i)
</snippet></ROW><ROW><id>10234043</id><snippet>code = test_number.__code__
globals = test_number.__globals__
closure = test_number.__closure__

testx = FunctionType(code, globals, "test"+name, (i,), closure)
setattr(TestNumbers, "test" + name, testx)
</snippet></ROW><ROW><id>10234407</id><snippet>clean</snippet></ROW><ROW><id>10234407</id><snippet>class Meta</snippet></ROW><ROW><id>10234554</id><snippet>*</snippet></ROW><ROW><id>10234735</id><snippet>itertools.product(characters, repeat = 3)</snippet></ROW><ROW><id>10234735</id><snippet>itertools.product</snippet></ROW><ROW><id>10234735</id><snippet>&gt;&gt;&gt; ' '.join(''.join(x) for x in itertools.product('abcd', repeat = 2))
aa ab ac ad ba bb bc bd ca cb cc cd da db dc dd
</snippet></ROW><ROW><id>10234867</id><snippet>import itertools
for s in itertools.product(*somelist):
    function(something=s)
</snippet></ROW><ROW><id>10234994</id><snippet>&gt;&gt;&gt; s1=", ".join(re.findall("(//.*?)#\d+",s))
&gt;&gt;&gt; s2=", ".join(re.findall("#(\d+)",s))
&gt;&gt;&gt; s1
'//name, //name2, //name3'
&gt;&gt;&gt; s2
'1, 1, 3'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10235208</id><snippet>//tr[td/span[text() = "what I'm looking for"]]/td/button
</snippet></ROW><ROW><id>10235208</id><snippet>tr</snippet></ROW><ROW><id>10235208</id><snippet>td/span</snippet></ROW><ROW><id>10235208</id><snippet>tr</snippet></ROW><ROW><id>10235208</id><snippet>td/button</snippet></ROW><ROW><id>10235301</id><snippet>import hashlib

# hash 1 time...
digest = hashlib.sha256(raw).digest()

# then hash 64k-1 times
for x in range(0, 64000-1):
  digest = hashlib.sha256(digest).digest()
print digest.encode("hex")
</snippet></ROW><ROW><id>10235478</id><snippet>OM01</snippet></ROW><ROW><id>10235478</id><snippet>OM50</snippet></ROW><ROW><id>10235478</id><snippet>root</snippet></ROW><ROW><id>10235478</id><snippet>parameters = []
for i in range(1, 51):
    parameter = getattr(root, 'OM%02d' % i)
    parameters.append(parameter)

# now all of your parameters are in the parameter array
</snippet></ROW><ROW><id>10235478</id><snippet>parameters = [getattr(root, 'OM%02d' % i) for i in range(1, 51)]
</snippet></ROW><ROW><id>10235478</id><snippet>Fitter</snippet></ROW><ROW><id>10235478</id><snippet>results = []
for i in range(1, 51):
    parameter = getattr(hdf2.root, 'OM%02d' % i)
    result = Fitter(parameter, plot=False)
    results.append(result)
</snippet></ROW><ROW><id>10235478</id><snippet>results = []
for i in range(1, 51):
    filename = 'hdf2.root.OM%02d' % i
    result = Fitter(filename, plot=False)
    results.append(result)
</snippet></ROW><ROW><id>10235581</id><snippet>twistd -n dns --pyzone example-domain.com --pyzone example-domain.net
</snippet></ROW><ROW><id>10235734</id><snippet>from pyparsing import Word,alphanums,Forward,Optional,nestedExpr,delimitedList

topicString = Word(alphanums+'-')
expr = Forward()
expr &lt;&lt; topicString + Optional(nestedExpr(content=delimitedList(expr)))

test = 'topic(subtopic(sub-subtopic), subtopic2), topic2'

print delimitedList(expr).parseString(test).asList()
</snippet></ROW><ROW><id>10235734</id><snippet>['topic', ['subtopic', ['sub-subtopic'], 'subtopic2'], 'topic2']
</snippet></ROW><ROW><id>10235734</id><snippet>topic:subtopic</snippet></ROW><ROW><id>10235749</id><snippet>url = urllib2.urlopen('http://example.com/foo.jpg')
f = StringIO()
zip = zilfile.ZipFile(f, 'w')
zip.writestr('foo.jpg', url.read())
response = HttpResponse(f.getvalue(), content_type="application/zip")
response['Content-Disposition'] = 'attachment; filename=foobar.zip'
return response
</snippet></ROW><ROW><id>10235775</id><snippet>open('/path/to/file')</snippet></ROW><ROW><id>10235775</id><snippet>os.path.join()</snippet></ROW><ROW><id>10235775</id><snippet>os.path</snippet></ROW><ROW><id>10235775</id><snippet>"some\\file"</snippet></ROW><ROW><id>10235775</id><snippet>r"some\file"</snippet></ROW><ROW><id>10235775</id><snippet>os.path.join()</snippet></ROW><ROW><id>10235775</id><snippet>with</snippet></ROW><ROW><id>10235775</id><snippet>with open(os.path.join("path", "to", "file.csv"), 'rU') as file:
    target_doc = csv.reader(file, delimiter=",", quotechar='|')
    ...
</snippet></ROW><ROW><id>10235775</id><snippet>with</snippet></ROW><ROW><id>10236110</id><snippet>globals()</snippet></ROW><ROW><id>10236110</id><snippet>globals()</snippet></ROW><ROW><id>10236110</id><snippet>a = 'foo'

def my_func(a = 'bar'):
    globals()['a'] = a
</snippet></ROW><ROW><id>10236207</id><snippet>subprocess.call()</snippet></ROW><ROW><id>10236518</id><snippet>hrs, min, sec, msec = (int(group) for group in re.search('(\d+):(\d+):(\d+).(\d+)', current_line).groups())
</snippet></ROW><ROW><id>10236553</id><snippet>itertools.product</snippet></ROW><ROW><id>10236553</id><snippet>from itertools import product

def start():
    for chars in product("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ12234567890!@#$%^&amp;*?,()-=+[]/;", repeat = 4):
        print chars
</snippet></ROW><ROW><id>10236638</id><snippet>links</snippet></ROW><ROW><id>10236638</id><snippet>links</snippet></ROW><ROW><id>10236909</id><snippet>root = Tk()</snippet></ROW><ROW><id>10236966</id><snippet>last_login</snippet></ROW><ROW><id>10236966</id><snippet>DateTimeField</snippet></ROW><ROW><id>10236966</id><snippet>User</snippet></ROW><ROW><id>10236966</id><snippet>contrib.auth</snippet></ROW><ROW><id>10236966</id><snippet>User</snippet></ROW><ROW><id>10236966</id><snippet>last_login</snippet></ROW><ROW><id>10236966</id><snippet>from django.contrib.auth.models import User

for user in User.objects.all():
    print user.last_login
</snippet></ROW><ROW><id>10236966</id><snippet>last_login</snippet></ROW><ROW><id>10236966</id><snippet>from django.contrib.auth.models import User

last_login = User.objects.get(username='bob').last_login
</snippet></ROW><ROW><id>10236966</id><snippet>last_login</snippet></ROW><ROW><id>10237256</id><snippet>onecmd()</snippet></ROW><ROW><id>10237256</id><snippet>onecmd()</snippet></ROW><ROW><id>10237256</id><snippet>cmd.py</snippet></ROW><ROW><id>10237256</id><snippet>urlparse.parse_qs()</snippet></ROW><ROW><id>10237256</id><snippet>import cmd
import urlparse

class myCmd(cmd.Cmd):
    def onecmd(self, line):
        """Mostly ripped from Python's cmd.py"""
        cmd, arg, line = self.parseline(line)
        arg = urlparse.parse_qs(arg) # &lt;- added line
        if not line:
            return self.emptyline()
        if cmd is None:
            return self.default(line)
        self.lastcmd = line
        if cmd == '':
            return self.default(line)
        else:
            try:
                func = getattr(self, 'do_' + cmd)
            except AttributeError:
                return self.default(line)
            return func(arg)

    def do_foo(self, arg)
        print arg

my_cmd = myCmd()
my_cmd.cmdloop()
</snippet></ROW><ROW><id>10237256</id><snippet>(Cmd) foo
{}
(Cmd) foo a b c
{}
(Cmd) foo a=b&amp;c=d
{'a': ['b'], 'c': ['d']}
</snippet></ROW><ROW><id>10237256</id><snippet>cmd.Cmd</snippet></ROW><ROW><id>10237256</id><snippet>do_*</snippet></ROW><ROW><id>10237256</id><snippet>import cmd
import urlparse
import types

# function decorator to add parse_qs to individual functions
def parse_qs_f(f):
    def f2(self, arg):
        return f(self, urlparse.parse_qs(arg))
    return f2

# class decorator to iterate over all attributes of a class and apply
# the parse_qs_f decorator to all do_* methods
def parse_qs(cls):
    for attr_name in dir(cls):
        attr = getattr(cls, attr_name)
        if attr_name.startswith('do_') and type(attr) == types.MethodType:
            setattr(cls, attr_name, parse_qs_f(attr))
    return cls

@parse_qs
class myCmd(cmd.Cmd):
    def do_foo(self, args):
        print args

my_cmd = myCmd()
my_cmd.cmdloop()
</snippet></ROW><ROW><id>10237517</id><snippet>"INSERT INTO md_patentinfo (patentno, filed) VALUES ('%s',STR_TO_DATE('%s','%%M %%d,%%Y'))" % ('123','Apr 14,2012')
</snippet></ROW><ROW><id>10237666</id><snippet>add.apply_async(args, kwargs, task_id=i)

add.apply_async((1, 4), task_id=i)
</snippet></ROW><ROW><id>10237666</id><snippet>task.request.id</snippet></ROW><ROW><id>10237666</id><snippet>task.id</snippet></ROW><ROW><id>10237745</id><snippet>self.a</snippet></ROW><ROW><id>10237745</id><snippet>import copy

class Poly:
    ...
    def copy(self):
        return Poly(copy.copy(self.a))
</snippet></ROW><ROW><id>10237818</id><snippet>my_dict = {'call': Call(array[0]), 'call2': Call2(array[1])}
</snippet></ROW><ROW><id>10237818</id><snippet>Call</snippet></ROW><ROW><id>10237818</id><snippet>Call2</snippet></ROW><ROW><id>10237818</id><snippet>input</snippet></ROW><ROW><id>10237818</id><snippet>input</snippet></ROW><ROW><id>10237818</id><snippet>"&gt; "</snippet></ROW><ROW><id>10237918</id><snippet>(module, item)</snippet></ROW><ROW><id>10237918</id><snippet>module</snippet></ROW><ROW><id>10237918</id><snippet>item</snippet></ROW><ROW><id>10238140</id><snippet>def tobits(s):
    result = []
    for c in s:
        bits = bin(ord(c))[2:]
        bits = '00000000'[len(bits):] + bits
        result.extend([int(b) for b in bits])
    return result

def frombits(bits):
    chars = []
    for b in range(len(bits) / 8):
        byte = bits[b*8:(b+1)*8]
        chars.append(chr(int(''.join([str(bit) for bit in byte]), 2)))
   return ''.join(chars)
</snippet></ROW><ROW><id>10238146</id><snippet>sys</snippet></ROW><ROW><id>10238146</id><snippet>import sys
message = sys.stdin.readlines()
</snippet></ROW><ROW><id>10238161</id><snippet>str.find</snippet></ROW><ROW><id>10238161</id><snippet>method.find('_')</snippet></ROW><ROW><id>10238161</id><snippet>not</snippet></ROW><ROW><id>10238161</id><snippet>True</snippet></ROW><ROW><id>10238161</id><snippet>not 0</snippet></ROW><ROW><id>10238161</id><snippet>True</snippet></ROW><ROW><id>10238161</id><snippet>'_' not in method</snippet></ROW><ROW><id>10238166</id><snippet>&lt;</snippet></ROW><ROW><id>10238166</id><snippet>&gt;&gt;&gt; a = 'x'
&gt;&gt;&gt; b = (1,)
&gt;&gt;&gt; c = u'x'
&gt;&gt;&gt; a &lt; b
True
&gt;&gt;&gt; b &lt; c
True
&gt;&gt;&gt; a &lt; c
False
</snippet></ROW><ROW><id>10238362</id><snippet>with open("from.json", "r") as from, open("to.json", "r") as to:
    to_insert = json.load(from)
    destination = json.load(to)
    destination.append(to_insert) #The exact nature of this line varies. See below.
with open("to.json", "w") as to:
    json.dump(to, destination)
</snippet></ROW><ROW><id>10238362</id><snippet>json</snippet></ROW><ROW><id>10238362</id><snippet>dict</snippet></ROW><ROW><id>10238362</id><snippet>with open("from.json", "r") as from, open("to.json", "w") as to:
    to.write(from.read())
</snippet></ROW><ROW><id>10238362</id><snippet>shutil</snippet></ROW><ROW><id>10238362</id><snippet>with</snippet></ROW><ROW><id>10238362</id><snippet>with</snippet></ROW><ROW><id>10238362</id><snippet>with open("from.json", "r") as from:
    with open("to.json", "r+") as to:
        ...
</snippet></ROW><ROW><id>10238440</id><snippet>import json
with open('file.json') as infile:
  o = json.load(infile)
  chunkSize = 1000
  for i in xrange(0, len(o), chunkSize):
    with open('file_' + str(i//chunkSize) + '.json', 'w') as outfile:
      json.dump(o[i:i+chunkSize], outfile)
</snippet></ROW><ROW><id>10238540</id><snippet>#pylint: disable-all
</snippet></ROW><ROW><id>10238540</id><snippet>#pylint: skip-file
</snippet></ROW><ROW><id>10238672</id><snippet>strptime</snippet></ROW><ROW><id>10238672</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; s = "Apr 18 17:19:42"
&gt;&gt;&gt; t = datetime.datetime.strptime(s, "%b %d %H:%M:%S")
&gt;&gt;&gt; t
datetime.datetime(1900, 4, 18, 17, 19, 42)
&gt;&gt;&gt; t = t.replace(year = 2012)
&gt;&gt;&gt; n = datetime.datetime.now()
&gt;&gt;&gt; n
datetime.datetime(2012, 4, 20, 10, 21, 42, 165657)
&gt;&gt;&gt; d = n-t
&gt;&gt;&gt; d.total_seconds()
147720.165657
</snippet></ROW><ROW><id>10238784</id><snippet>art.title.encode("utf-8")</snippet></ROW><ROW><id>10238784</id><snippet>art.title.decode("utf-8")</snippet></ROW><ROW><id>10238788</id><snippet>if str_p == str_q:
    result = True
else:
    result = False
return result
</snippet></ROW><ROW><id>10238788</id><snippet>return str_p == str_q
</snippet></ROW><ROW><id>10238788</id><snippet>str_q = p[b+1:]
</snippet></ROW><ROW><id>10238833</id><snippet>pycassa.index.GT</snippet></ROW><ROW><id>10238895</id><snippet>&gt;&gt;&gt; def func(x, objects=[]):
...     objects.append(x)
... 
&gt;&gt;&gt; func(1)
&gt;&gt;&gt; func.func_defaults
([1],)
&gt;&gt;&gt; func(2)
&gt;&gt;&gt; func.func_defaults
([1, 2],)
&gt;&gt;&gt; func(3)
&gt;&gt;&gt; func.func_defaults
([1, 2, 3],)
</snippet></ROW><ROW><id>10238895</id><snippet>class MyClass:
@staticmethod
def func(objects=None, a=None, b=None):
    if objects is None:
        objects = []
    objects.append(a)
    print 'objects: %s'%objects
    print 'b: %s'%b
</snippet></ROW><ROW><id>10238915</id><snippet>print sorted(L1, key=abs)[::-1][:kv]
print sorted(L2, key=abs)[::-1]
</snippet></ROW><ROW><id>10238995</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>10238995</id><snippet>cd /path/to/location</snippet></ROW><ROW><id>10238995</id><snippet>python myscript.py</snippet></ROW><ROW><id>10238995</id><snippet>#!...</snippet></ROW><ROW><id>10238995</id><snippet>python</snippet></ROW><ROW><id>10238995</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>10238995</id><snippet>cd</snippet></ROW><ROW><id>10239186</id><snippet>*args</snippet></ROW><ROW><id>10239186</id><snippet>stored_results[args]</snippet></ROW><ROW><id>10239186</id><snippet>memoize</snippet></ROW><ROW><id>10239186</id><snippet>memoized</snippet></ROW><ROW><id>10239186</id><snippet>memoize</snippet></ROW><ROW><id>10239186</id><snippet>memoized</snippet></ROW><ROW><id>10239186</id><snippet>memoized</snippet></ROW><ROW><id>10239199</id><snippet>filtered_words = [w for w in word_count \
          if w.lower() not in stopwords.words('english')]
</snippet></ROW><ROW><id>10239199</id><snippet>w</snippet></ROW><ROW><id>10239199</id><snippet>w</snippet></ROW><ROW><id>10239199</id><snippet>the</snippet></ROW><ROW><id>10239200</id><snippet>__acl__ = [
(Deny, Everyone, 'view'),
(Allow, 'group:admin', 'view')
]
</snippet></ROW><ROW><id>10239200</id><snippet>__acl__ = [
(Allow, 'group:admin', 'view'),
(Deny, Everyone, 'view')
]
</snippet></ROW><ROW><id>10239200</id><snippet>myobject.__acl__ = load_acls(myobject) 
</snippet></ROW><ROW><id>10239200</id><snippet>root
  \--pages with acl
      +---- page1  without acl
      \---- page2  with acl
</snippet></ROW><ROW><id>10239313</id><snippet>from bs4 import BeautifulSoup
data = '&lt;p&gt;This text is my &lt;a href="#"&gt;text&lt;/a&gt;&lt;p&gt;'

soup = BeautifulSoup(data)
original_string = soup.p.contents[0]

print(original_string)
# "This text is my "

import re
this, text, is_my = re.compile("(text)").split(original_string)
</snippet></ROW><ROW><id>10239313</id><snippet>text</snippet></ROW><ROW><id>10239313</id><snippet>Tag</snippet></ROW><ROW><id>10239313</id><snippet>text_link = soup.new_tag("a", href="#")
text_link.string = text
</snippet></ROW><ROW><id>10239313</id><snippet>re.split()</snippet></ROW><ROW><id>10239313</id><snippet>this</snippet></ROW><ROW><id>10239313</id><snippet>is_my</snippet></ROW><ROW><id>10239313</id><snippet>NavigableString</snippet></ROW><ROW><id>10239313</id><snippet>this = soup.new_string(this)
is_my = soup.new_string(is_my)
</snippet></ROW><ROW><id>10239313</id><snippet>replace_with()</snippet></ROW><ROW><id>10239313</id><snippet>insert_after</snippet></ROW><ROW><id>10239313</id><snippet>original_string.replace_with(this)
this.insert_after(text_link)
text_link.insert_after(is_my)
</snippet></ROW><ROW><id>10239313</id><snippet>print(soup.p)
# &lt;p&gt;This &lt;a href="#"&gt;text&lt;/a&gt; is my &lt;a href=""&gt;&lt;/a&gt;&lt;/p&gt;
</snippet></ROW><ROW><id>10239347</id><snippet>__class__</snippet></ROW><ROW><id>10239347</id><snippet>Test</snippet></ROW><ROW><id>10239347</id><snippet>datetime</snippet></ROW><ROW><id>10239347</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; class Test(datetime):
...   def a(self):
...     return '{0:02d}{1:02d}{2:02d}{3:02d}'.format(self.year % 100, self.month, self.day, self.hour)
...
&gt;&gt;&gt;
&gt;&gt;&gt; t = Test(2010, 05, 02, 06)
&gt;&gt;&gt; d = datetime(2010, 05, 02, 06)
&gt;&gt;&gt;
&gt;&gt;&gt; getattr(t, '__class__')
&lt;class '__main__.Test'&gt;
&gt;&gt;&gt; getattr(d, '__class__')
&lt;type 'datetime.datetime'&gt;
</snippet></ROW><ROW><id>10239347</id><snippet>Test</snippet></ROW><ROW><id>10239347</id><snippet>datetime</snippet></ROW><ROW><id>10239347</id><snippet>Test</snippet></ROW><ROW><id>10239347</id><snippet>datetime</snippet></ROW><ROW><id>10239347</id><snippet>matplotlib.units</snippet></ROW><ROW><id>10239347</id><snippet>&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; import matplotlib.units, matplotlib.dates
&gt;&gt;&gt; import datetime
&gt;&gt;&gt;
&gt;&gt;&gt; class Test(datetime.datetime):
...   def a(self):
...     return '{0:02d}{1:02d}{2:02d}{3:02d}'.format(self.year % 100, self.month, self.day, self.hour)
...
&gt;&gt;&gt; matplotlib.units.registry[Test] = matplotlib.dates.DateConverter()
&gt;&gt;&gt;
&gt;&gt;&gt; x = [Test(2010, 05, 02, 06), Test(2010, 05, 02, 12)]
&gt;&gt;&gt; y = [0, 1]
&gt;&gt;&gt; plt.plot(x, y)
[&lt;matplotlib.lines.Line2D object at 0x02F6E730&gt;]
</snippet></ROW><ROW><id>10239355</id><snippet>self.img = pygame.image.load(self.ani[0])
</snippet></ROW><ROW><id>10239355</id><snippet>import pygame
from pygame.locals import *

pygame.init()
clock = pygame.time.Clock()
FPS = 30

width = 800
height = 600

screen = pygame.display.set_mode((width, height), 0, 32)

class player:
    def __init__(self, init_pos = (10,10), init_ani_speed = 10):
        self.x = init_pos[0]
        self.y = init_pos[1]

        self.ani_speed_init = init_ani_speed
        self.ani_speed = self.ani_speed_init

        self.ani = []
        # nux-style code here! :)
        # self.ani.append(glob.glob("game\\redplayer_01*.png"))
        # self.ani.append(glob.glob("game\\redplayer_02*.png"))

        self.ani.append("./ani/super_neko_01.png")
        self.ani.append("./ani/super_neko_02.png")

        self.ani_max = len(self.ani)-1
        self.ani_pos = 0

        self.img = []
        for item in self.ani:
            self.img.append(pygame.image.load(item))

        self.update(0)


    def update(self, pos = 0):
        # init: starts at 10, immediately blits self to screen at x,y
        if pos != 0:
            self.ani_speed -= 1 
            self.x += pos # move right by pos pixels
            if self.ani_speed == 0:
                self.ani_speed = self.ani_speed_init
                if self.ani_pos &lt; self.ani_max:
                    self.ani_pos += 1
                else:
                    self.ani_pos = 0

        tempSurf = self.img[self.ani_pos]
        screen.blit(tempSurf,(self.x, self.y))

player1 = player()

# Main Game Loop
quit = False
while quit == False:
    for event in pygame.event.get():
        if (event.type == KEYUP): 
                    if (event.key == K_q):
                        quit = True

    if quit == False:
        player1.update(1)
        pygame.display.update()
    clock.tick(FPS)

pygame.quit()
</snippet></ROW><ROW><id>10239415</id><snippet>strings = ['abc', 'abcde', 'abcd', 'abcdefgh']
outputs = map(lambda x: "%d %s" % (len(x), x), strings) # ['3 abc', '5 abcde', '4 abcd', '8 abcdefgh']
f = open("file.out", 'w')
data = '\n'.join(outputs) # Concat all strings in list, separated by line break
f.write(data)
f.close()
</snippet></ROW><ROW><id>10239470</id><snippet>#!/usr/bin/python
# -- coding: utf-8 --

import xlwt
import urllib2
import sys
import re
from bs4 import BeautifulSoup as soup
import urllib
liste_countries = ['USA','AFG','ALA','ALB','DZA','ASM','AND','AGO','AIA','ATA','ATG','ARG','ARM','ABW','AUS','AUT','AZE','BHS','BHR','BGD','BRB','BLR','BEL','BLZ','BEN','BMU','BTN','BOL','BES','BIH','BWA','BVT','BRA','IOT','BRN','BGR','BFA','BDI','BDI','KHM','CMR','CAN','CPV','CYM','CAF','TCD','CHL','CHN','CXR','CCK','COL','COM','COG','COD','COK','CRI','CIV','HRV','CUW','CYP','CZE','DNK','DJI','DMA','DOM','ECU','EGY','SLV','GNQ','ERI','EST','ETH','FLK','FRO','FJI','FIN','FRA','GUF','PYF','ATF','GAB','GMB','GEO','DEU','GHA','GIB','GRC','GRL','GRD','GLP','GUM','GTM','GGY','GIN','GNB','GUY','HTI','HMD','HND','HKG','HUN','ISL','IND','IDN','IRN','IRQ','IRL','IMN','ISR','ITA','JAM','JPN','JEY','JOR','KAZ','KEN','KIR','PRK','KOR','KWT','KGZ','LAO','LVA','LBN','LSO','LBR','LBY','LIE','LTU','LUX','MAC','MKD','MDG','MWI','MYS','MDV','MLI','MLT','MHL','MTQ','MRT','MUS','MYT','MEX','FSM','MDA','MCO','MNG','MNE','MSR','MAR','MOZ','MMR','NAM','NRU','NPL','NLD','NCL','NZL','NIC','NER','NGA','NIU','NFK','MNP','NOR','OMN','PAK','PLW','PSE','PAN','PNG','PRY','PER','PHL','PCN','POL','PRT','PRI','QAT','REU','ROU','RUS','RWA','BLM','KNA','LCA','MAF','WSM','SMR','STP','SAU','SEN','SRB','SYC','SLE','SGP','SXM','SVK','SVN','SLB','SOM','ZAF','SGS','SSD','ESP','LKA','SHN','SPM','VCT','SDN','SUR','SJM','SWZ','SWE','CHE','TWN','TJK','TZA','THA','TLS','TKL','TON','TTO','TUN','TUR','TKM','TCA','TUV','UGA','UKR','ARE','GBR','URY','UMI','UZB','VUT','VAT','VEN','VNM','VGB','VIR','WLF','ESH','YEM','ZMB','ZWE']


name_doc_out = raw_input("What do you want for name for the Excel output document ? &gt;&gt;&gt; ")
wb = xlwt.Workbook(encoding='utf-8')
ws = wb.add_sheet("PTE_TC")
x = 0
y = 0
numero = 0
total = len(liste_countries)
total_city = len(villes_us)
number_city = 0
for liste in liste_countries:
            if 0 == 1:
                        print("THIS IF IS JUST FOR TEST")
            else:
                        print("Fetching country number %s on %s" % (numero, total))
                        numero = numero + 1
                        url = 'http://www6.pearsonvue.com/Dispatcher?v=W2L&amp;application=VTCLocator&amp;HasXSes=Y&amp;layerPath=ROOT.VTCLocator.SelTestCenterPage&amp;wscid=199372577&amp;layer=SelTestCenterPage&amp;action=actDisplay&amp;bfp=top.VTCLocatorPageFrame&amp;bfpapp=top&amp;wsid=1334887910891'
                        values = {
                                'sortColumn' : 2,
                                'sortDirection' : 1,
                                'distanceUnits' : 0,
                                'proximitySearchLimit'  : 20,
                                'countryCode'  : liste,

                                    }

                        user_agent = 'Mozilla/5 (Solaris 10) Gecko'
                        headers = { 'User-Agent' : user_agent }

                        data = urllib.urlencode(values)
                        req = urllib2.Request(url, data, headers)
                        response = urllib2.urlopen(req)
                        thePage = response.read()
                        the_page = soup(thePage)

                        #print the_page
                        tableau = the_page.find('table', attrs={'id' : 'apptable'})
                        print tableau
                        try:
                                    rows = tableau.findAll('tr')
                                    for tr in rows:
                                                cols = tr.findAll('td')
                                                # del / remove les td qui faut pas
                                                y = 0
                                                x = x + 1
                                                for td in cols:
                                                            print td.text
                                                            ws.write(x,y,td.text.strip())
                                                            wb.save("%s.xls" % name_doc_out)
                                                            y = y + 1
                        except (IndexError, AttributeError):
                                    pass
</snippet></ROW><ROW><id>10239477</id><snippet>click()</snippet></ROW><ROW><id>10239477</id><snippet>this.click()</snippet></ROW><ROW><id>10239566</id><snippet> _mkdir(self.filepath[:-4] + "\\models\\")
</snippet></ROW><ROW><id>10239566</id><snippet> self._mkdir(self.filepath[:-4] + "\\models\\")
</snippet></ROW><ROW><id>10239566</id><snippet>self</snippet></ROW><ROW><id>10239566</id><snippet>_mkdir()</snippet></ROW><ROW><id>10239677</id><snippet>def readTTable(fname):
    try:
</snippet></ROW><ROW><id>10239677</id><snippet>except</snippet></ROW><ROW><id>10239677</id><snippet>try:</snippet></ROW><ROW><id>10239677</id><snippet>try</snippet></ROW><ROW><id>10239677</id><snippet>except</snippet></ROW><ROW><id>10239725</id><snippet>def function(s):
    if len(s) == 1:
        print 'single:', s[0],  # (A) this is where your first output is generated for a single character
    else:
        print 'calling function again with ',s[1:]
        function(s[1:]) # (B) you call function again, i.e., your recursive call
        print ' unwind-&gt;', s[0], # (C) the "unwinding" step, i.e, finish the rest
                                 # of the function when you return from the recursive call
</snippet></ROW><ROW><id>10239725</id><snippet>calling function again with 234
calling function again with 34
calling function again with 4
single: 4  unwind-&gt; 3  unwind-&gt; 2  unwind-&gt; 1
</snippet></ROW><ROW><id>10239725</id><snippet>else</snippet></ROW><ROW><id>10239725</id><snippet>else</snippet></ROW><ROW><id>10239725</id><snippet>else</snippet></ROW><ROW><id>10239894</id><snippet>pdb.gimp_item_get_children(group_layer)</snippet></ROW><ROW><id>10239894</id><snippet>gimp.Item.from_id</snippet></ROW><ROW><id>10239894</id><snippet>&gt;&gt;&gt; img = gimp.image_list()[0]
&gt;&gt;&gt; c = img.layers[0]
&gt;&gt;&gt; c
&lt;gimp.Layer 'Layer Group'&gt;
&gt;&gt;&gt; pdb.gimp_item_get_children(c)
(1, (4,))
&gt;&gt;&gt; c2 = gimp.Item.from_id(4)
&gt;&gt;&gt; c2
&lt;gimp.Layer 'cam2'&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10239894</id><snippet> Date:   Fri Apr 20 04:49:16 2012 -0300

     pygimp: adds proper support for layer groups

     Layer groups where barely supported using numeric IDs and
     by calling gimp.Item.from_id. This adds a Python
     GroupLayer class.
</snippet></ROW><ROW><id>10239974</id><snippet>ForeignKey</snippet></ROW><ROW><id>10239974</id><snippet>auth.User</snippet></ROW><ROW><id>10239974</id><snippet>commit=False</snippet></ROW><ROW><id>10239974</id><snippet>save()</snippet></ROW><ROW><id>10239974</id><snippet>class Task(models.Model):
    user = models.ForeignKey('auth.User')
    name = models.CharField(max_length=100)
    added_at = models.DateTimeField(auto_now_add=True)
    last_update = models.DateTimeField(auto_now=True)

class TaskForm(forms.ModelForm):
    class Meta:
        model = Task
        exclude = ['user', ]

def task_create(request):
    form = TaskForm(data=request.POST or None)
    if request.method == 'POST' and form.is_valid():
        task = form.save(commit=False)
        task.user = request.user
        task.save()
        return reverse("todo_list")
    return render(request,
        'task_create.html',
        {'form': form}
    )
</snippet></ROW><ROW><id>10239974</id><snippet>request.user</snippet></ROW><ROW><id>10239974</id><snippet>@login_required</snippet></ROW><ROW><id>10239999</id><snippet>AsyncResult</snippet></ROW><ROW><id>10239999</id><snippet>id</snippet></ROW><ROW><id>10240047</id><snippet>def main():
    print "Hello World"

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>10240339</id><snippet>import argparse

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('integers', metavar='N', type=int, nargs='+',
                   help='an integer for the accumulator')
parser.add_argument('--sum', dest='accumulate', action='store_const',
                   const=sum, default=max,
                   help='sum the integers (default: find the max)')

args = parser.parse_args()
print args.accumulate(args.integers)
</snippet></ROW><ROW><id>10240722</id><snippet>from pyramid.threadlocal import get_current_registry
from pyramid.httpexceptions import HTTPFound

#Define some awesome student views here
@view_config(name='student')
def student(request):
    return HTTPFound('Foo!')

if get_current_registry().settings['teacher_enabled']:

    #Some awesome student and teacher views here
    @view_config(name='student_and_teacher')
    def student_and_teacher(request):
        return HTTPFound('Bar!')
</snippet></ROW><ROW><id>10240722</id><snippet>from your_models.teacher import Teacher
from sqlalchemy.exc import NoSuchTableError

try:
    teacher = session.query(Teacher).filter(Teacher.id==42).first()
except NoSuchTableError:
    teacher = Teacher('Unknown')
</snippet></ROW><ROW><id>10241077</id><snippet>return json.dumps(*args, **kwargs)
</snippet></ROW><ROW><id>10241077</id><snippet>dumps = json.dumps
loads = json.loads
</snippet></ROW><ROW><id>10241436</id><snippet>configure</snippet></ROW><ROW><id>10241436</id><snippet># Tkinter in Python 2.7 &amp; tkinter in 3.2
import Tkinter as tk

class GUI(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)

        bF = tk.Frame(self, bd=8, relief='sunken')
        bF.pack(expand='true', fill='x')
        changeButton = tk.Button(bF, text='Change', bd=4, fg='white',
                                relief='groove', activebackground='green',
                                command=self.change_label)
        changeButton.pack()

        self.entryLabel = tk.Label(self, text='Hello')
        self.entryLabel.pack()

        self.mEntry = tk.Entry(self, bd=4, relief='sunken')
        self.mEntry.pack()

    def change_label(self):
        data = self.mEntry.get()
        self.entryLabel.configure(text=data)


gui = GUI()
gui.mainloop()
</snippet></ROW><ROW><id>10241436</id><snippet>import Tkinter as tk

class GUI(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)

        bF = tk.Frame(self, bd=8, relief='sunken')
        bF.pack(expand='true', fill='x')

        var = tk.StringVar()
        var.set('Hello')
        entryLabel = tk.Label(self, textvariable=var)
        entryLabel.pack()

        mEntry = tk.Entry(self, bd=4, relief='sunken', textvariable=var)
        mEntry.pack()

gui = GUI()
gui.mainloop()
</snippet></ROW><ROW><id>10241680</id><snippet> class A:
     friend = Friend('themodule.B')
</snippet></ROW><ROW><id>10241680</id><snippet> class A:
     friend = Friend(B)
</snippet></ROW><ROW><id>10241680</id><snippet>class A:
    pass

class B:
    pass

A.friend = Friend(B)
B.friend = Friend(A)
</snippet></ROW><ROW><id>10242074</id><snippet>stdout</snippet></ROW><ROW><id>10242305</id><snippet>sort</snippet></ROW><ROW><id>10242305</id><snippet>db.test.find({"number": {"$gt": 1}}).sort([("number", 1), ("date", -1)])
</snippet></ROW><ROW><id>10242305</id><snippet>dict</snippet></ROW><ROW><id>10242354</id><snippet>from pylab import *
spread= rand(50) * 100
center = ones(25) * 50
flier_high = rand(10) * 100 + 100
flier_low = rand(10) * -100
data =concatenate((spread, center, flier_high, flier_low), 0)
r = boxplot(data)
</snippet></ROW><ROW><id>10242354</id><snippet>top_points = r["fliers"][0].get_data()[1]
bottom_points = r["fliers"][2].get_data()[1]
plot(np.ones(len(top_points)), top_points, "+")
plot(np.ones(len(bottom_points)), bottom_points, "+")
</snippet></ROW><ROW><id>10242362</id><snippet>def recursive_add(s):
    if s:
        return s[0]**2 + recursive_add(s[1:])
    else:
        return 0
</snippet></ROW><ROW><id>10242419</id><snippet>words = ["This", "is", "an", "example", "sentence" ]

dict = {}

// insert 2 items at front/back to avoid
// additional conditions in the for loop
words.insert(0, None)
words.insert(0, None)
words.append(None)
words.append(None)

for i in range(len(words)-4):   
    dict[ words[i+2] ] = [w for w in words[i:i+5] if w]
</snippet></ROW><ROW><id>10242432</id><snippet>iterparse</snippet></ROW><ROW><id>10242432</id><snippet>from io import BytesIO
some_file_like = BytesIO("&lt;root&gt;&lt;a&gt;data&lt;/a&gt;&lt;/root&gt;".encode('utf-8'))
</snippet></ROW><ROW><id>10242466</id><snippet>user_profile = new_user.get_profile()
user_profile.company = company
user_profile.save()
</snippet></ROW><ROW><id>10242875</id><snippet>QWebKit</snippet></ROW><ROW><id>10242875</id><snippet>QNetworkDiskCache</snippet></ROW><ROW><id>10242875</id><snippet>QNetworkManager</snippet></ROW><ROW><id>10242875</id><snippet>webkit.py</snippet></ROW><ROW><id>10243013</id><snippet>files</snippet></ROW><ROW><id>10243013</id><snippet>r = requests.post(url, data=payload, headers=headers, files={})
</snippet></ROW><ROW><id>10243151</id><snippet>if not m and n</snippet></ROW><ROW><id>10243151</id><snippet>if (not m) and n</snippet></ROW><ROW><id>10243151</id><snippet>if not m and not n</snippet></ROW><ROW><id>10243151</id><snippet>if not (m or n)</snippet></ROW><ROW><id>10243303</id><snippet>student_details.find("userID" : user_id})</snippet></ROW><ROW><id>10243532</id><snippet>collections.Counter</snippet></ROW><ROW><id>10243532</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; a = ( ('309','308','308'), ('309','308','307'), ('308', '309','306', '304'))
&gt;&gt;&gt; Counter((x, y) for (x, y, *z) in a)
Counter({('309', '308'): 2, ('308', '309'): 1})
&gt;&gt;&gt; Counter((x, z) for (x, y, z, *w) in a)
Counter({('308', '306'): 1, ('309', '308'): 1, ('309', '307'): 1})
</snippet></ROW><ROW><id>10243532</id><snippet>Counter((item[0], item[1]) for item in a)
</snippet></ROW><ROW><id>10243532</id><snippet>Counter</snippet></ROW><ROW><id>10243532</id><snippet>dict</snippet></ROW><ROW><id>10243532</id><snippet>&gt;&gt;&gt; count = Counter((x, y) for (x, y, *z) in a)
&gt;&gt;&gt; count['309', '308']
2
</snippet></ROW><ROW><id>10243532</id><snippet>Counter((item[0], item[1]) for item in a if len(item) &gt;= 2)
</snippet></ROW><ROW><id>10243532</id><snippet>&gt;&gt;&gt; a = ( ('309',), ('309','308','308'), ('309','308','307'), ('308', '309','306', '304'))
&gt;&gt;&gt; Counter((x, y) for (x, y, *z) in a)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python3.2/collections.py", line 460, in __init__
    self.update(iterable, **kwds)
  File "/usr/lib/python3.2/collections.py", line 540, in update
    _count_elements(self, iterable)
  File "&lt;stdin&gt;", line 1, in &lt;genexpr&gt;
ValueError: need more than 1 value to unpack
&gt;&gt;&gt; Counter((item[0], item[1]) for item in a)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python3.2/collections.py", line 460, in __init__
    self.update(iterable, **kwds)
  File "/usr/lib/python3.2/collections.py", line 540, in update
    _count_elements(self, iterable)
  File "&lt;stdin&gt;", line 1, in &lt;genexpr&gt;
IndexError: tuple index out of range
&gt;&gt;&gt; Counter((item[0], item[1]) for item in a if len(item) &gt;= 2)
Counter({('309', '308'): 2, ('308', '309'): 1})
</snippet></ROW><ROW><id>10243532</id><snippet>start = 0
end = 2
Counter(item[start:end] for item in a if len(item) &gt;= start+end)
</snippet></ROW><ROW><id>10243532</id><snippet>def pick(seq, indices):
    return tuple([seq[i] for i in indices])

columns = [1, 3]
maximum = max(columns)
Counter(pick(item, columns) for item in a if len(item) &gt; maximum)
</snippet></ROW><ROW><id>10243600</id><snippet>l = l + [len(re.findall(word,line))]</snippet></ROW><ROW><id>10243600</id><snippet>l+=[len(re.findall(word,line))]</snippet></ROW><ROW><id>10243622</id><snippet>from django.contrib.staticfiles.urls import staticfiles_urlpatterns
urlpatterns += staticfiles_urlpatterns()
</snippet></ROW><ROW><id>10243622</id><snippet>url(
    regex=r'^static/(?P&lt;path&gt;.*)$', 
    view='django.views.static.serve', 
    kwargs={'document_root': settings.STATIC_ROOT,}
)
</snippet></ROW><ROW><id>10243932</id><snippet>&gt;&gt;&gt; l = [1,2,3,4,5,6,7,8,9,10,"prime"]
&gt;&gt;&gt; [l[i:i+2] for i in xrange(0, len(l), 2)]
[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], ['prime']]
&gt;&gt;&gt; [l[i:i+3] for i in xrange(0, len(l), 3)]
[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 'prime']]
&gt;&gt;&gt; [l[i:i+4] for i in xrange(0, len(l), 4)]
[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 'prime']]
</snippet></ROW><ROW><id>10243988</id><snippet>"yourself"&lt;="zeros"</snippet></ROW><ROW><id>10243988</id><snippet>lexicographically</snippet></ROW><ROW><id>10243988</id><snippet>"zz"</snippet></ROW><ROW><id>10243988</id><snippet>zz</snippet></ROW><ROW><id>10243988</id><snippet>lexicographically</snippet></ROW><ROW><id>10243988</id><snippet>common_words</snippet></ROW><ROW><id>10243988</id><snippet>isCommonword()</snippet></ROW><ROW><id>10243988</id><snippet>def isCommonWord(word):

    commonWordList = open("common_words.txt")
    commonWord = [x.rstrip() for x in commonWordList]
    if word in commonWord:
        return True
    else:return False
</snippet></ROW><ROW><id>10244865</id><snippet>x</snippet></ROW><ROW><id>10244865</id><snippet>x + y</snippet></ROW><ROW><id>10245303</id><snippet>popen = subprocess.Popen(['myexe', 'params'], creationflags=subprocess.CREATE_NEW_CONSOLE)
popen.wait()
</snippet></ROW><ROW><id>10245303</id><snippet>args = ['xterm', '-e'] + ['myexe', 'params']
popen = subprocess.Popen(args)
popen.wait()
</snippet></ROW><ROW><id>10245384</id><snippet>plt.plot</snippet></ROW><ROW><id>10245384</id><snippet>import matplotlib.pyplot as plt
import itertools
markers = itertools.cycle([ '+', '*', ',', 'o', '.', '1', 'p', ])
while x &lt;= stopFrequency:
    y = startVoltage
    ys = []
    vals = []
    while y &lt;= stopVoltage:
        ys.append(y)
        vals.append(getCapacity)
        getCapacity = y * 2
        y += stepValueVoltage
    plt.plot(ys, vals, 
             label = 'x: {0}'.format(x),
             marker = next(markers))
    x += stepValueFrequency
plt.legend(loc = 'best')
plt.show()
</snippet></ROW><ROW><id>10245553</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>10245553</id><snippet>matrix_lookup = {1 : matrix(...), 2 : matrix(...), ...}
</snippet></ROW><ROW><id>10245553</id><snippet>matrix_lookup</snippet></ROW><ROW><id>10245553</id><snippet>p = Pool(6)
pool.map(func, [(vector, 1), (vector, 2), (vector, 1), ...])
</snippet></ROW><ROW><id>10245601</id><snippet>is_displayed()</snippet></ROW><ROW><id>10245804</id><snippet>"""
restricting execution based on request body size
"""
from pyramid.config import Configurator
from pyramid.view import view_config
from pyramid.events import NewRequest, subscriber
from webob import Response, Request
from webob.exc import HTTPBadRequest
import unittest


def restrict_body_middleware(app, max_size=0):
    """
    this is straight wsgi middleware and in this case only depends on
    webob. this can be used with any wsgi compliant web
    framework(which is pretty much all of them)
    """
    def m(environ, start_response):
        r = Request(environ)
        if r.content_length &lt;= max_size:
            return r.get_response(app)(environ, start_response)
        else:
            err_body = """
            request content_length(%s) exceeds
            the configured maximum content_length allowed(%s)
            """ % (r.content_length, max_size)
            res = HTTPBadRequest(err_body)
            return res(environ, start_response)

    return m


def new_request_restrict(event):
    """
    pyramid event handler called whenever there is a new request
    recieved

    http://docs.pylonsproject.org/projects/pyramid/en/1.2-branch/narr/events.html
    """
    request = event.request
    if request.content_length &gt;= 0:
        raise HTTPBadRequest("too big")


@view_config()
def index(request):
    return Response("HI THERE")


def make_application():
    """
    make appplication with one view
    """
    config = Configurator()
    config.scan()
    return config.make_wsgi_app()


def make_application_with_event():
    """
    make application with one view and one event subsriber subscribed
    to NewRequest
    """
    config = Configurator()
    config.add_subscriber(new_request_restrict, NewRequest)
    return config.make_wsgi_app()


def make_application_with_middleware():
    """
    make application with one view wrapped in wsgi middleware
    """
    return restrict_body_middleware(make_application())



class TestWSGIApplication(unittest.TestCase):
    def testNoRestriction(self):
        app = make_application()
        request = Request.blank("/", body="i am a request with a body")
        self.assert_(request.content_length &gt; 0, "content_length should be &gt; 0")
        response = request.get_response(app)
        self.assert_(response.status_int == 200, "expected status code 200 got %s" % response.status_int)

    def testRestrictedByMiddleware(self):
        app = make_application_with_middleware()
        request = Request.blank("/", body="i am a request with a body")
        self.assert_(request.content_length &gt; 0, "content_length should be &gt; 0")
        response = request.get_response(app)
        self.assert_(response.status_int == 400, "expected status code 400 got %s" % response.status_int)

    def testRestrictedByEvent(self):
        app = make_application_with_event()
        request = Request.blank("/", body="i am a request with a body")
        self.assert_(request.content_length &gt; 0, "content_length should be &gt; 0")
        response = request.get_response(app)
        self.assert_(response.status_int == 400, "expected status code 400 got %s" % response.status_int)



if __name__ == "__main__":
    unittest.main()
</snippet></ROW><ROW><id>10246026</id><snippet>&gt;&gt;&gt; l = ['a', 'b', 'c', 'b', 'a', 'd']
&gt;&gt;&gt; import itertools as it
&gt;&gt;&gt; dict(it.izip(reversed(l), reversed(xrange(len(l)))))
{'a': 0, 'b': 1, 'c': 2, 'd': 5}
</snippet></ROW><ROW><id>10246669</id><snippet>myapi.com</snippet></ROW><ROW><id>10246669</id><snippet>myapi.com</snippet></ROW><ROW><id>10246669</id><snippet>myapi.com</snippet></ROW><ROW><id>10246669</id><snippet>myapi.com</snippet></ROW><ROW><id>10246669</id><snippet>myapi.com</snippet></ROW><ROW><id>10246669</id><snippet>myapi.com</snippet></ROW><ROW><id>10246669</id><snippet>myapi.com</snippet></ROW><ROW><id>10246947</id><snippet>'sahar'</snippet></ROW><ROW><id>10246947</id><snippet>manage.py shell</snippet></ROW><ROW><id>10246947</id><snippet>user = User.objects.get(username=username)

# use set_password method
user.set_password('sahar')
user.save()

# INSTEAD OF 
user.password = 'sahar'
user.save()
</snippet></ROW><ROW><id>10246947</id><snippet>user.password = '...'</snippet></ROW><ROW><id>10246947</id><snippet>User.objects.create(password='...')</snippet></ROW><ROW><id>10247085</id><snippet>group</snippet></ROW><ROW><id>10247085</id><snippet>list_of_dicts</snippet></ROW><ROW><id>10247085</id><snippet>{% for group in (list_of_dicts | groupby('attribute'))[:9] -%}
    ...
{% endfor %}
</snippet></ROW><ROW><id>10247126</id><snippet>for name in duV.dtype.names:
    globals()[name.lower()] = duV.field(name)
</snippet></ROW><ROW><id>10247271</id><snippet>#for getting
total = 0
shard_keys = []
for i in range(20): #20 shards
    key_name = shard + str(i)
    shard_keys.append(db.Key.from_path('Counter', key_name))
counters = db.get(shard_keys)
for counter in counters:
    if counter:
        total += counter.count

#for incrementing a shard
import random
key_name = 'shard' + str(int(random.random()*20)) #choose a random shard
counter = Counter.get_by_key_name(key_name) #try to retrieve from datastore
if not counter:
    counter = Counter(key_name=key_name) #shard doesn't exist, create one
counter.count += 1
db.put(counter)
</snippet></ROW><ROW><id>10247418</id><snippet>start_urls = ['http://www.e3050.com/Items.aspx?cat=SON']
pro_urls = [] # all product Urls

def parse(self, response): # select 50 products on each page
    yield FormRequest.from_response(response,
        formdata={'ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$pagesddl': '50',
                  'ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$sortddl': 'Price(ASC)'},
        meta={'curr': 1, 'total': 0, 'flag': True},
        dont_click=True,
        callback=self.page_rs_50)

def page_rs_50(self, response): # paginate the pages
    hxs = HtmlXPathSelector(response)
    curr = int(response.request.meta['curr'])
    total = int(response.request.meta['total'])
    flag = response.request.meta['flag']
    self.pro_urls.extend(hxs.select(
        "//td[@class='name']//a[contains(@id,'ctl00_ctl00_ContentPlaceHolder1_ItemListPlaceHolder_itemslv_ctrl')]/@href"
    ).extract())
    if flag:
        total = hxs.select(
            "//span[@id='ctl00_ctl00_ContentPlaceHolder1_ItemListPlaceHolder_lbl_pagesizeBtm']/text()").re('\d+')[0]
    if curr &lt; total:
        curr += 1
        yield FormRequest.from_response(response,
            formdata={'ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$pagesddl': '50',
                      'ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$sortddl': 'Price(ASC)',
                      'ctl00$ctl00$ScriptManager1': 'ctl00$ctl00$ScriptManager1|ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$pager1$ctl00$ctl01'
                , '__EVENTTARGET': 'ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$pager1$ctl00$ctl01',
                      'ctl00$ctl00$ContentPlaceHolder1$ItemListPlaceHolder$hfVSFileName': hxs.select(
                          ".//input[@id='ctl00_ctl00_ContentPlaceHolder1_ItemListPlaceHolder_hfVSFileName']/@value").extract()[
                                                                                          0]},
            meta={'curr': curr, 'total': total, 'flag': False},
            dont_click=True,
            callback=self.page_rs_50
        )
    else:
        for pro in self.pro_urls:
            yield Request("http://www.e3050.com/%s" % pro,
                callback=self.parse_product)


def parse_product(self, response):
    pass
    #TODO Implementation Required For Parsing
</snippet></ROW><ROW><id>10247625</id><snippet>import requests

response = requests.get(url, auth=(username, password))
# search for your string in response.contents
</snippet></ROW><ROW><id>10247698</id><snippet>known = {'d': 'dval', 'e': 'eval'}
unknown = ['a', 'b', 'c']
# instead of
"SELECT * FROM table WHERE (a like ? OR b like ? OR c like ?) AND (d like :d AND e like :e)"
known.update(dict((str(i), v) for i, v in enumerate(unknown)))
# and use
"SELECT * FROM table WHERE (a like :1 OR b like :2 OR c like :3) AND (d like :d AND e like :e)"
</snippet></ROW><ROW><id>10247732</id><snippet>with</snippet></ROW><ROW><id>10247854</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; data = 3 * ('x ',  (1,), u'x')
&gt;&gt;&gt; [k for k, c in Counter(data).iteritems() if c &gt; 1]
[u'x', 'x ', (1,)]
</snippet></ROW><ROW><id>10248028</id><snippet>setup.cfg</snippet></ROW><ROW><id>10248028</id><snippet>python setup.py install --help</snippet></ROW><ROW><id>10248028</id><snippet>Options for 'install' command:
  --prefix            installation prefix
  --exec-prefix       (Unix only) prefix for platform-specific files
  --home              (Unix only) home directory to install under
  --user              install in user site-package
                      '/home/yannpaul/.local/lib/python2.6/site-packages'
  --install-base      base installation directory (instead of --prefix or --
                      home)
</snippet></ROW><ROW><id>10248028</id><snippet>vertualenv</snippet></ROW><ROW><id>10248028</id><snippet>matplotlib</snippet></ROW><ROW><id>10248281</id><snippet>import wx
import  wx.lib.scrolledpanel as scrolled

class TestFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, size=(1000, 550))
        panel = wx.Panel(self)

        mainSizer = wx.BoxSizer(wx.VERTICAL)
        pbox0 = wx.BoxSizer(wx.VERTICAL)
        controlback0 = wx.Button(panel, label="Back0")
        controlforward0 = wx.Button(panel, label="Forward0")
        pbox0.Add(controlback0, 0, wx.ALL)
        pbox0.Add(controlforward0, 0, wx.ALL)
        mainSizer.Add(pbox0)

        self.scrolling_window = scrolled.ScrolledPanel( panel )
        self.scrolling_window.SetAutoLayout(1)
        self.scrolling_window.SetupScrolling()
        self.sizer = wx.BoxSizer( wx.VERTICAL )
        self.child_windows = []
        for i in range(0,8):
            wind = self.addBox()
            self.sizer.Add(wind, 0, wx.CENTER|wx.ALL, 5)
        self.scrolling_window.SetSizer(self.sizer)

        mainSizer.Add(self.scrolling_window, 1, wx.EXPAND)
        panel.SetSizer(mainSizer)

    def addBox(self):
        pbox = wx.BoxSizer(wx.VERTICAL)

        controlback = wx.Button(self.scrolling_window, label="Back")
        controlforward = wx.Button(self.scrolling_window, label="Forward")

        pbox.AddMany([(controlback, 0, wx.ALL), (controlforward, 0, wx.ALL)])
        return pbox

    def OnSize(self, event):
        self.scrolling_window.SetSize(self.GetClientSize())

if __name__=='__main__':
    app = wx.App(False)
    f = TestFrame()
    f.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>10248314</id><snippet>requests</snippet></ROW><ROW><id>10248314</id><snippet>urllib*</snippet></ROW><ROW><id>10248314</id><snippet>$ pip install requests
</snippet></ROW><ROW><id>10248314</id><snippet>import requests
url_0 = "http://webapp.pucrs.br/consulta/principal.jsp"
url = "https://webapp.pucrs.br/consulta/servlet/consulta.aluno.ValidaAluno"
data = {"pr1": "123456789", "pr2": "1234"}

s = requests.session()
s.get(url_0)
r = s.post(url, data)
</snippet></ROW><ROW><id>10248314</id><snippet>pr1</snippet></ROW><ROW><id>10248322</id><snippet>def make_form(exclude_user=True):
    class Form(forms.ModelForm):
        class Meta:
            model = Folder         
            exclude = ['user'] if exclude_user else None
    return Form

form_cls = make_form(request.user != folder.owner)
</snippet></ROW><ROW><id>10248543</id><snippet>e</snippet></ROW><ROW><id>10248543</id><snippet>e.__context__</snippet></ROW><ROW><id>10248543</id><snippet>try:
    try:
        raise Exception("in the try")
    finally:
        raise Exception("in the finally")
except Exception as e:
    print(repr(e.__context__))
</snippet></ROW><ROW><id>10248543</id><snippet>Exception('in the try',)
</snippet></ROW><ROW><id>10248543</id><snippet>__context__</snippet></ROW><ROW><id>10248668</id><snippet>print 'Your name is {}!'.format(name)
</snippet></ROW><ROW><id>10248668</id><snippet>print 'your name is %s!' %name
</snippet></ROW><ROW><id>10249354</id><snippet>  --play-and-exit, --no-play-and-exit
                             Play and exit (default disabled)
</snippet></ROW><ROW><id>10249392</id><snippet>&gt;&gt;&gt; from cv2 import __version__
&gt;&gt;&gt; __version__
'$Rev: 4557 $'
</snippet></ROW><ROW><id>10249392</id><snippet>cv</snippet></ROW><ROW><id>10249392</id><snippet>cv2</snippet></ROW><ROW><id>10249428</id><snippet>tty</snippet></ROW><ROW><id>10249428</id><snippet>ls &lt; /dev/pts/1 &gt; /dev/pts/1 2&gt; /dev/pts/1</snippet></ROW><ROW><id>10249428</id><snippet>os.system</snippet></ROW><ROW><id>10249428</id><snippet>&amp;</snippet></ROW><ROW><id>10249428</id><snippet>suprocess</snippet></ROW><ROW><id>10249428</id><snippet>cd</snippet></ROW><ROW><id>10249428</id><snippet>cd</snippet></ROW><ROW><id>10249428</id><snippet>from Tkinter import *
from os import system as cmd

root = Tk()
termf = Frame(root, height=700, width=1000)
termf.pack(fill=BOTH, expand=YES)
wid = termf.winfo_id()

f=Frame(root)
Label(f,text="/dev/pts/").pack(side=LEFT)
tty_index = Entry(f, width=3)
tty_index.insert(0, "1")
tty_index.pack(side=LEFT)
Label(f,text="Command:").pack(side=LEFT)
e = Entry(f)
e.insert(0, "ls -l")
e.pack(side=LEFT,fill=X,expand=1)

def send_entry_to_terminal(*args):
    """*args needed since callback may be called from no arg (button)
   or one arg (entry)
   """
    command=e.get()
    tty="/dev/pts/%s" % tty_index.get()
    cmd("%s &lt;%s &gt;%s 2&gt; %s" % (command,tty,tty,tty))

e.bind("&lt;Return&gt;",send_entry_to_terminal)
b = Button(f,text="Send", command=send_entry_to_terminal)
b.pack(side=LEFT)
f.pack(fill=X, expand=1)

cmd('xterm -into %d -geometry 160x50 -sb -e "tty; sh" &amp;' % wid)

root.mainloop()
</snippet></ROW><ROW><id>10249828</id><snippet>urllib.request.urlopen(uri)</snippet></ROW><ROW><id>10249828</id><snippet>from itertools import islice

def getLines(self)
    res = []
    for line in islice(self.code,100): 
        res.append(line)
    return res
</snippet></ROW><ROW><id>10249828</id><snippet>islice</snippet></ROW><ROW><id>10249828</id><snippet>while</snippet></ROW><ROW><id>10249828</id><snippet>readline()</snippet></ROW><ROW><id>10249828</id><snippet>for</snippet></ROW><ROW><id>10249828</id><snippet>for i in xrange(100): 
    ... 
</snippet></ROW><ROW><id>10249960</id><snippet>&gt;&gt;&gt; pattern = '[a-zA-Z_]\w*(?![\(\w])'
&gt;&gt;&gt; re.findall(pattern, "funcname(arg, another_arg)*20 + second_func(arg1, arg2)")
['arg', 'another_arg', 'arg1', 'arg2']
&gt;&gt;&gt; re.findall(pattern, "value1 + value_two")
['value1', 'value_two']
</snippet></ROW><ROW><id>10249985</id><snippet>&gt;&gt;&gt; re.findall(r"\w+", "CHROMOSOME_IV ncRNA gene 5723085 5723105 . - . ID=Gene:WBGene00045518 CHROMOSOME_IV ncRNA ncRNA 5723085 5723105 . - . Parent=Gene:WBGene00045518")
['CHROMOSOME_IV', 'ncRNA', 'gene', '5723085', '5723105', 'ID', 'Gene', 'WBGene00045518', 'CHROMOSOME_IV', 'ncRNA', 'ncRNA', '5723085', '5723105', 'Parent', 'Gene', 'WBGene00045518']
</snippet></ROW><ROW><id>10249985</id><snippet>import re

with open("f1.txt", "r") as infile1:
    udict = dict(line.strip().split("\t", 1) for line in infile1)

with open("f2.txt", "r") as infile2, open("out.txt", "w") as outfile:
    for line in infile2:
        for word in re.findall(r"\w+", line):
            if word in udict:
                line = line.replace(word, udict[word])
        outfile.write(line)
</snippet></ROW><ROW><id>10249985</id><snippet>with open("f1.txt", "r") as infile1:
    udict = dict(line.strip().split("\t", 1) for line in infile1)
regex = re.compile("|".join(map(re.escape, udict)))
with open("f2.txt", "r") as infile2, open("out.txt", "w") as outfile:
    for line in infile2:
        outfile.write(regex.sub(lambda m: udict[m.group()], line))
</snippet></ROW><ROW><id>10250408</id><snippet>sys.path.append('/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages')
import pymongo
</snippet></ROW><ROW><id>10250521</id><snippet>utf-8</snippet></ROW><ROW><id>10250623</id><snippet>def make_mix(numg): 
    def mix(x, *p): 
        ng = numg
        p1 = p[:3*ng]
        p2 = p[3*ng:]
        a = sumarray(gaussian(x,p1),lorentzian(x,p2))
        return a
    return mix
</snippet></ROW><ROW><id>10250623</id><snippet>leastsq, covar = opt.curve_fit(make_mix(numg),energy,intensity,inputtot)
</snippet></ROW><ROW><id>10250720</id><snippet>PyCell_SET (but not PyCell_Set!)
PyList_SetItem, PyList_SET_ITEM
PyModule_AddObject
PyTuple_SetItem, PyTuple_SET_ITEM
</snippet></ROW><ROW><id>10250720</id><snippet>all PyArg_Xxx functions
PyCell_GET (but not PyCell_Get!)
PyDict_GetItem
PyDict_GetItemString
PyDict_Next
PyErr_Occurred
PyEval_GetBuiltins
PyEval_GetFrame
PyEval_GetGlobals
PyEval_GetLocals
PyFile_Name
PyFunction_GetClosure
PyFunction_GetCode
PyFunction_GetDefaults
PyFunction_GetGlobals
PyFunction_GetModule
PyImport_AddModule
PyImport_GetModuleDict
PyList_GetItem, PyList_GETITEM
PyMethod_Class, PyMethod_GET_CLASS
PyMethod_Function, PyMethod_GET_FUNCTION
PyMethod_Self, PyMethod_GET_SELF
PyModule_GetDict
PyObject_Init
PyObject_InitVar
PySequence_Fast_GET_ITEM
PySys_GetObject
PyThreadState_GetDict
PyTuple_GetItem, PyTuple_GET_ITEM
PyWeakref_GetObject, PyWeakref_GET_OBJECT
Py_InitModule
Py_InitModule3
Py_InitModule4
</snippet></ROW><ROW><id>10250811</id><snippet>I_shape</snippet></ROW><ROW><id>10250811</id><snippet>None</snippet></ROW><ROW><id>10250811</id><snippet>__variable</snippet></ROW><ROW><id>10250924</id><snippet>str(row)</snippet></ROW><ROW><id>10250924</id><snippet>row</snippet></ROW><ROW><id>10250924</id><snippet>results</snippet></ROW><ROW><id>10250924</id><snippet>with open('test.txt', 'w') as f:
    for row in results:
        print row
        f.write("%s\n" % str(row))
</snippet></ROW><ROW><id>10250924</id><snippet>with</snippet></ROW><ROW><id>10250924</id><snippet>str</snippet></ROW><ROW><id>10251018</id><snippet>data = ['header', 1, 2, 3, 4]

with open("infile", 'r') as inf, open("infile.2", 'w') as outf:
    outf.writelines('%s,%s\n' % (s.strip(), n) for s, n in zip(inf, data))
</snippet></ROW><ROW><id>10251018</id><snippet>import os
os.unlink("infile")
os.rename("infile.2", "infile")
</snippet></ROW><ROW><id>10251529</id><snippet>stdout=</snippet></ROW><ROW><id>10251529</id><snippet>stderr=</snippet></ROW><ROW><id>10251529</id><snippet>subprocess.call()</snippet></ROW><ROW><id>10251529</id><snippet>stdout</snippet></ROW><ROW><id>10251529</id><snippet>stderr</snippet></ROW><ROW><id>10251529</id><snippet>devnull = open('/dev/null', 'w')
subprocess.call(shlex.split(
    '/usr/local/itms/bin/iTMSTransporter -m lookupMetadata '
    '-apple_id %s -destination %s' % (self,apple_id, self.destination)),
  stdout=devnull, stderr=devnull)
</snippet></ROW><ROW><id>10251529</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>10251711</id><snippet>Nothing</snippet></ROW><ROW><id>10251711</id><snippet>objAccess</snippet></ROW><ROW><id>10251711</id><snippet>del objAccess
</snippet></ROW><ROW><id>10251711</id><snippet>.Quit</snippet></ROW><ROW><id>10251711</id><snippet>objAccess.Application.Quit()
</snippet></ROW><ROW><id>10251711</id><snippet>objDB</snippet></ROW><ROW><id>10251711</id><snippet>del objDB
</snippet></ROW><ROW><id>10251711</id><snippet>objDB</snippet></ROW><ROW><id>10251730</id><snippet>re</snippet></ROW><ROW><id>10251730</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "{'id': '1'}"
&gt;&gt;&gt; re.sub(r"{'([^\']*)'.*$", r'\1', string)
'id'
</snippet></ROW><ROW><id>10251730</id><snippet>sub()</snippet></ROW><ROW><id>10251730</id><snippet>r</snippet></ROW><ROW><id>10252005</id><snippet>connection_t = ctypes.c_uint32

link = mydll.link
link.argtypes=(ctypes.c_char_p, ctypes.POINTER(connection_t) )
connect = mydll.connect
connect.argtypes=(connection_t,)
...
connection = connection_t()
link ("localhost: 5412", ctypes.byref(connection))
...
</snippet></ROW><ROW><id>10252159</id><snippet>Pool</snippet></ROW><ROW><id>10252159</id><snippet>multiprocessing</snippet></ROW><ROW><id>10252159</id><snippet>Pool.map()</snippet></ROW><ROW><id>10252159</id><snippet>  if __name__ == '__main__':
     files = ['first.in', 'second.in', 'third.in'] # et cetera
     info('main line')
     p = Pool()
     p.map(convertor, files)
     p.close()
</snippet></ROW><ROW><id>10252159</id><snippet>convertor()</snippet></ROW><ROW><id>10252159</id><snippet>"Convert DICOM files to PNG format, remove blank areas."

import os
import sys # voor argv.
import subprocess
from multiprocessing import Pool, Lock

def checkfor(args):
    try:
        subprocess.check_output(args, stderr=subprocess.STDOUT)
    except CalledProcessError:
        print "Required program '{}' not found! exiting.".format(progname)
        sys.exit(1)

def processfile(fname):
    size = '1574x2048'
    args = ['convert', fname, '-units', 'PixelsPerInch', '-density', '300', 
            '-crop', size+'+232+0', '-page', size+'+0+0', fname+'.png']
    rv = subprocess.call(args)
    globallock.acquire()
    if rv != 0:
        print "Error '{}' when processing file '{}'.".format(rv, fname)
    else:
        print "File '{}' processed.".format(fname)
    globallock.release()

## This is the main program ##
if __name__ == '__main__':
    if len(sys.argv) == 1:
        path, binary = os.path.split(sys.argv[0])
        print "Usage: {} [file ...]".format(binary)
        sys.exit(0)
    checkfor('convert')
    globallock = Lock()
    p = Pool()
    p.map(processfile, sys.argv[1:])
    p.close()
</snippet></ROW><ROW><id>10252593</id><snippet>join()</snippet></ROW><ROW><id>10252593</id><snippet>import time

def run(self):

    print "running client"  
    start = datetime.now().second
    host ='localhost'
    port = 5010

    client = None

    while True:

        if client is None:
            client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            try:
                client.connect((host,port))
            except socket.error:
                print "Connection failed. Retrying."
                client = None
                time.sleep(.25)
                continue


        time = str(abs(datetime.now().second-start))
        print time
        try:
            client.sendall(time)
        except:
            print "Send error."
            client.close()
            client = None

        time.sleep(.25)
</snippet></ROW><ROW><id>10252613</id><snippet>emp.has_perm('myappname.is_member')</snippet></ROW><ROW><id>10252613</id><snippet>False</snippet></ROW><ROW><id>10252613</id><snippet>Employer</snippet></ROW><ROW><id>10252613</id><snippet>is_member</snippet></ROW><ROW><id>10252613</id><snippet>Employer</snippet></ROW><ROW><id>10252613</id><snippet>user_permissions</snippet></ROW><ROW><id>10252613</id><snippet>from django.contrib.auth.models import Permission
from django.contrib.contenttypes.models import ContentType

content_type = ContentType.objects.get_for_model(Employer)
permission = Permission.objects.get(content_type=content_type, codename='is_member')

emp = Employer.objects.create(blablabla)
emp.save()
emp.user_permissions.add(permission)
</snippet></ROW><ROW><id>10252613</id><snippet>has_perm</snippet></ROW><ROW><id>10252613</id><snippet>delattr(emp, '_perm_cache')
</snippet></ROW><ROW><id>10252613</id><snippet>Employer</snippet></ROW><ROW><id>10252613</id><snippet>is_member</snippet></ROW><ROW><id>10252613</id><snippet>save</snippet></ROW><ROW><id>10252613</id><snippet>Employer</snippet></ROW><ROW><id>10252613</id><snippet>self.pk</snippet></ROW><ROW><id>10252613</id><snippet>'is_member'</snippet></ROW><ROW><id>10252613</id><snippet>User</snippet></ROW><ROW><id>10252613</id><snippet>Employer</snippet></ROW><ROW><id>10252613</id><snippet>True</snippet></ROW><ROW><id>10252613</id><snippet>User</snippet></ROW><ROW><id>10252613</id><snippet>Employer</snippet></ROW><ROW><id>10252779</id><snippet>employer =Employer.objects.create(username=form.cleaned_data["username"],password= form.cleaned_data['password'],first_name=form.cleaned_data['first_name'],last_name=form.cleaned_data['last_name'],email=form.cleaned_data['email'],address=form.cleaned_data['address'],mobile=form.cleaned_data['mobile'])
</snippet></ROW><ROW><id>10252779</id><snippet>create()</snippet></ROW><ROW><id>10252779</id><snippet>import datetime
#last_login=datetime.datetime.now(), date_joined=datetime.date.now()
</snippet></ROW><ROW><id>10252779</id><snippet>employer =Employer.objects.create(last_login=datetime.datetime.now(),date_joined=datetime.datetime.now(),username=form.cleaned_data["username"],password= form.cleaned_data['password'],first_name=form.cleaned_data['first_name'],last_name=form.cleaned_data['last_name'],email=form.cleaned_data['email'],address=form.cleaned_data['address'],mobile=form.cleaned_data['mobile'])
</snippet></ROW><ROW><id>10252779</id><snippet>.is_valid()</snippet></ROW><ROW><id>10252779</id><snippet>if request.method == 'POST':
    form = SignUpForm(request.POST)
    print form
    print"then"
    print form.errors
    if form.is_valid():
        print 'hello'
</snippet></ROW><ROW><id>10252779</id><snippet>if request.method == 'POST':
    data = request.POST.copy()
    data['date_joined'] = datetime.date.today()
    data['last_login'] = datetime.datetime.now()

    form = SignUpForm(data)
    print form
    print"then"
    print form.errors
    if form.is_valid():
        print 'hello'
</snippet></ROW><ROW><id>10252789</id><snippet>def is_mail_start(line):
    return line.startswith("From")

def build_index(fname):
    with open(fname, "rb") as f:
        i = 0
        b = 0
        # find start of first message
        for line in f:
            b += len(line)
            if is_mail_start(line):
                break
        # find start of each message, and yield up (index, length) of previous message
        for line in f:
            if is_mail_start(line):
                yield (i, b)
                i += b
                b = 0
            b += len(line)
        yield (i, b) # yield up (index, length) of last message

# get index as a list
mbox_index = list(build_index(fname))
</snippet></ROW><ROW><id>10252789</id><snippet>.seek()</snippet></ROW><ROW><id>10252789</id><snippet>.read(length)</snippet></ROW><ROW><id>10252789</id><snippet>mailbox</snippet></ROW><ROW><id>10252899</id><snippet>In [17]: nameArr = np.array(['josh','is','a','person'])

In [18]: [np.where(nameArr==i) for i in ['a','is']]
Out[18]: [(array([2]),), (array([1]),)]
</snippet></ROW><ROW><id>10253422</id><snippet>ip</snippet></ROW><ROW><id>10253422</id><snippet>UNSIGNED INT</snippet></ROW><ROW><id>10253422</id><snippet>UNIQUE</snippet></ROW><ROW><id>10253422</id><snippet>INSERT
INTO    mytable (ip, count)
VALUES  (INET_ATON($ip), 1)
ON DUPLICATE KEY
UPDATE
        count = count + 1
</snippet></ROW><ROW><id>10253422</id><snippet>192.168.1.1</snippet></ROW><ROW><id>10253422</id><snippet>SELECT  INET_NTOA(ip)
FROM    mytable
</snippet></ROW><ROW><id>10253422</id><snippet>CREATE UNIQUE INDEX ux_mytaable_ip ON mytable (ip(15))
</snippet></ROW><ROW><id>10253422</id><snippet>INT</snippet></ROW><ROW><id>10253503</id><snippet>def queryset(self, request):
        qs = super(ContentAdmin, self).queryset(request)
        return qs.filter(score__name='Twitter').order_by('-score__score')
</snippet></ROW><ROW><id>10253723</id><snippet>subprocess.call()</snippet></ROW><ROW><id>10253837</id><snippet>def __hash__(self):
    return hash(tuple(self.list_attribute))
</snippet></ROW><ROW><id>10253837</id><snippet>list_attribute</snippet></ROW><ROW><id>10253916</id><snippet>cd</snippet></ROW><ROW><id>10253916</id><snippet>import sys, os
myPath = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, myPath + '/../')
</snippet></ROW><ROW><id>10253916</id><snippet>PYTHONPATH=../</snippet></ROW><ROW><id>10254010</id><snippet>import cgitb; cgitb.enable()</snippet></ROW><ROW><id>10254010</id><snippet>enctype="multipart/form-data"</snippet></ROW><ROW><id>10254038</id><snippet>-L localport:server:remoteport</snippet></ROW><ROW><id>10254038</id><snippet>paramiko</snippet></ROW><ROW><id>10254038</id><snippet>localhost</snippet></ROW><ROW><id>10254186</id><snippet>__copy__</snippet></ROW><ROW><id>10254186</id><snippet>__deepcopy__</snippet></ROW><ROW><id>10254186</id><snippet>copy</snippet></ROW><ROW><id>10254186</id><snippet>__deepcopy__</snippet></ROW><ROW><id>10254186</id><snippet>__deepcopy__</snippet></ROW><ROW><id>10254419</id><snippet>__setitem__()</snippet></ROW><ROW><id>10254419</id><snippet>__getitem__()</snippet></ROW><ROW><id>10254419</id><snippet>class Example(object):
    # define which names can be assigned using [...] syntax
    validkeys = set("alpha beta gamma".split())

    # assign valid names as attributes on our object
    def __setitem__(self, key, value):
        if key in self.validkeys:
            setattr(self, key, value)
        else:
            raise KeyError("Key must be one of %s", ", ".join(self.validkeys))

e = Example()
e["alpha"] = 42
print(e.alpha)   # prints 42
</snippet></ROW><ROW><id>10254423</id><snippet>locals().keys()</snippet></ROW><ROW><id>10254423</id><snippet>locals().iterkeys()</snippet></ROW><ROW><id>10254423</id><snippet>locals().values()</snippet></ROW><ROW><id>10254423</id><snippet>locals().itervalues()</snippet></ROW><ROW><id>10254423</id><snippet>locals().items()</snippet></ROW><ROW><id>10254423</id><snippet>key, value</snippet></ROW><ROW><id>10254423</id><snippet>locals().iteritems()</snippet></ROW><ROW><id>10254636</id><snippet>__hash__</snippet></ROW><ROW><id>10254636</id><snippet>tuple</snippet></ROW><ROW><id>10254636</id><snippet>class X2(list):
    def __hash__(self):
        return hash(tuple(self))
</snippet></ROW><ROW><id>10254636</id><snippet>def __hash__(self):
    return hash("foobar"*len(self))
</snippet></ROW><ROW><id>10254814</id><snippet>QMainWindow</snippet></ROW><ROW><id>10254814</id><snippet>QMainWindow</snippet></ROW><ROW><id>10254814</id><snippet>centralWidget</snippet></ROW><ROW><id>10254814</id><snippet>QDockWidget</snippet></ROW><ROW><id>10254814</id><snippet>QDockWidget</snippet></ROW><ROW><id>10254814</id><snippet>QDockWidget</snippet></ROW><ROW><id>10254814</id><snippet>QMainWindow</snippet></ROW><ROW><id>10254814</id><snippet>minimumSize</snippet></ROW><ROW><id>10254814</id><snippet>QDockWidget</snippet></ROW><ROW><id>10254814</id><snippet>QMainWindow</snippet></ROW><ROW><id>10254814</id><snippet>sizeHint</snippet></ROW><ROW><id>10254814</id><snippet>dock1.widget().setMinimumSize(QSize(width, height))
dock2.widget().setMinimumSize(QSize(width, height))
dock3.widget().setMinimumSize(QSize(width, height))
</snippet></ROW><ROW><id>10254962</id><snippet>cStringIO.StringIO(unicode_object)</snippet></ROW><ROW><id>10254962</id><snippet>chm</snippet></ROW><ROW><id>10254962</id><snippet>Python 2.7.2 (default, Jun 12 2011, 15:08:59) [MSC v.1500 32 bit (Intel)] on win32
&gt;&gt;&gt; import StringIO, cStringIO, sys
&gt;&gt;&gt; StringIO.StringIO(u"fubar").getvalue()
u'fubar' &lt;&lt;=== unicode object
&gt;&gt;&gt; cStringIO.StringIO(u"fubar").getvalue()
'f\x00u\x00b\x00a\x00r\x00' &lt;&lt;=== str object
cStringIO.StringIO(u"\u0405\u0406").getvalue()
'\x05\x04\x06\x04' &lt;&lt;=== "accepts"
&gt;&gt;&gt; sys.maxunicode
65535 # your sender presumably emits 1114111 (wide unicode)
&gt;&gt;&gt; sys.byteorder
'little'
</snippet></ROW><ROW><id>10254962</id><snippet>UTF-(16|32)-(B|L)E</snippet></ROW><ROW><id>10254962</id><snippet>u'content-length'.encode('utf-8')</snippet></ROW><ROW><id>10254962</id><snippet>str</snippet></ROW><ROW><id>10254962</id><snippet>'content-length'</snippet></ROW><ROW><id>10254962</id><snippet>foo.encode(utf8').decode('utf8')</snippet></ROW><ROW><id>10254962</id><snippet>foo</snippet></ROW><ROW><id>10255115</id><snippet>OneToOneField</snippet></ROW><ROW><id>10255115</id><snippet>related_name</snippet></ROW><ROW><id>10255115</id><snippet>'movie'</snippet></ROW><ROW><id>10255115</id><snippet>'book'</snippet></ROW><ROW><id>10255115</id><snippet>'software'</snippet></ROW><ROW><id>10255115</id><snippet>prefetch_related</snippet></ROW><ROW><id>10255115</id><snippet>LEFT OUTER JOIN</snippet></ROW><ROW><id>10255115</id><snippet>select_related</snippet></ROW><ROW><id>10255115</id><snippet>Item.objects.select_related('movie', 'book', 'software')
</snippet></ROW><ROW><id>10255115</id><snippet>Movie</snippet></ROW><ROW><id>10255115</id><snippet>Book</snippet></ROW><ROW><id>10255115</id><snippet>Software</snippet></ROW><ROW><id>10255115</id><snippet>prefetch_related</snippet></ROW><ROW><id>10255115</id><snippet>ManyToManyField</snippet></ROW><ROW><id>10255115</id><snippet>ForeignKey</snippet></ROW><ROW><id>10255682</id><snippet>instant_debug.py</snippet></ROW><ROW><id>10255682</id><snippet>import signal
import pdb

def handler(signum, frame):
  pdb.set_trace()

signal.signal(signal.SIGQUIT, handler)
</snippet></ROW><ROW><id>10255682</id><snippet>import instant_debug
import time

for i in xrange(1000000):
  print i
  time.sleep(0.1)
</snippet></ROW><ROW><id>10255682</id><snippet>CTRL+\</snippet></ROW><ROW><id>10255682</id><snippet>u</snippet></ROW><ROW><id>10255682</id><snippet>d</snippet></ROW><ROW><id>10255682</id><snippet>pdb</snippet></ROW><ROW><id>10255682</id><snippet>c</snippet></ROW><ROW><id>10256078</id><snippet>price_str = price.get_text() # $17.95
</snippet></ROW><ROW><id>10256078</id><snippet>price_str = price_str.lstrip('$') # 17.95
</snippet></ROW><ROW><id>10256139</id><snippet>player1.attack = randn ()
[player2 etc]
minval = randn ()
for player in players:
  if player.attack &gt; minval:
    [...attack...]
</snippet></ROW><ROW><id>10256139</id><snippet>variable = random.randrange(1,10)

if 0 &lt;= variable &lt; 3:
   then do this
if 3 &lt;= variable &lt; 5:
   then do this
if 5 &lt;= variable &lt; 9:
   then do this
</snippet></ROW><ROW><id>10256141</id><snippet>strptime</snippet></ROW><ROW><id>10256141</id><snippet>%a %b %d %H:%M:%S %Y</snippet></ROW><ROW><id>10256141</id><snippet>import datetime
import time

datetime.datetime.strptime(time.ctime(), "%a %b %d %H:%M:%S %Y")
</snippet></ROW><ROW><id>10256165</id><snippet>hp = None
lvl = None
atk = None
defn = None

def LON():
    global hp, lvl, atk, defn
    # rest of LON

# rest of the functions
</snippet></ROW><ROW><id>10256282</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; x = range(20)
&gt;&gt;&gt; a = []
&gt;&gt;&gt; b = []
&gt;&gt;&gt; for v in x:
...     random.choice((a, b)).append(v)
... 
&gt;&gt;&gt; a
[0, 2, 3, 4, 6, 7, 10, 12, 15, 17]
&gt;&gt;&gt; b
[1, 5, 8, 9, 11, 13, 14, 16, 18, 19]
</snippet></ROW><ROW><id>10256282</id><snippet>&gt;&gt;&gt; x = range(20)
&gt;&gt;&gt; b = x[:]
&gt;&gt;&gt; a = sorted([b.pop(b.index(random.choice(b))) for n in xrange(limit)])
&gt;&gt;&gt; a
[0, 1, 5, 10, 15, 16, 17]
&gt;&gt;&gt; b
[2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 18, 19]
</snippet></ROW><ROW><id>10256282</id><snippet>def random_split(items, size):
    sample = set(random.sample(items, size))
    return sorted(sample), sorted(set(items) - sample)
</snippet></ROW><ROW><id>10256282</id><snippet>def random_split(items, size):
    sample = set(random.sample(items, size))
    a = [x for x in items if x in sample]
    b = [x for x in items if x not in sample]
    return a, b
</snippet></ROW><ROW><id>10256370</id><snippet>(?:^|(?&lt;=(.)))(?!\1)(.)\2{n-1}(?!\2)
</snippet></ROW><ROW><id>10256370</id><snippet>(?:^|(?&lt;=(.)))</snippet></ROW><ROW><id>10256370</id><snippet>^</snippet></ROW><ROW><id>10256370</id><snippet>(?&lt;=(.))</snippet></ROW><ROW><id>10256370</id><snippet>\1</snippet></ROW><ROW><id>10256370</id><snippet>(?!\1)(.)</snippet></ROW><ROW><id>10256370</id><snippet>\1</snippet></ROW><ROW><id>10256370</id><snippet>\2</snippet></ROW><ROW><id>10256370</id><snippet>\2{n-1}</snippet></ROW><ROW><id>10256370</id><snippet>\2</snippet></ROW><ROW><id>10256370</id><snippet>(?!\2)</snippet></ROW><ROW><id>10256370</id><snippet>\2</snippet></ROW><ROW><id>10256370</id><snippet>n-1</snippet></ROW><ROW><id>10256370</id><snippet>8-1</snippet></ROW><ROW><id>10256370</id><snippet>(.)\1{n-1}(?!\1)</snippet></ROW><ROW><id>10256370</id><snippet>\1</snippet></ROW><ROW><id>10256493</id><snippet># phrase_trie.py

from collections import defaultdict

CATEGORIES = {"!DETERMINER": set(["a","an","the"]),
              "!VERB": set(["walked","talked","had"])}

def get_category(word):
    for name,words in CATEGORIES.items():
        if word in words:
            return name
    return None

class PhraseTrie(object):
    def __init__(self):
        self.children = defaultdict(PhraseTrie)
        self.categories = defaultdict(PhraseTrie)

    def insert(self, phrase):
        if not phrase: # nothing to insert
            return

        this=phrase[0]
        rest=phrase[1:]

        if this in CATEGORIES: # it's a category name
            self.categories[this].insert(rest)
        else:
            self.children[this].insert(rest)

    def contains(self, phrase):
        if not phrase:
            return True # the empty phrase is in everything

        this=phrase[0]
        rest=phrase[1:]

        test = False

        # the `if not test` are because if the phrase satisfies one of the
        # previous tests we don't need to bother searching more

        # allow search for ["!DETERMINER", "cat"]
        if this in self.categories: 
            test = self.categories[this].contains(rest)

        # the word is literally contained
        if not test and this in self.children:
            test = self.children[this].contains(rest)

        if not test:
            # check for the word being in a category class like "a" in
            # "!DETERMINER"
            cat = get_category(this)
            if cat in self.categories:
                test = self.categories[cat].contains(rest)
        return test

    def __str__(self):
        return '(%s,%s)' % (dict(self.children), dict(self.categories))
    def __repr__(self):
        return str(self)

if __name__ == '__main__':
    words = PhraseTrie()
    words.insert(["he", "had", "!DETERMINER", "nerve"])
    words.insert(["he", "had", "the", "evren"])
    words.insert(["she", "!VERB", "the", "nerve"])
    words.insert(["no","categories","here"])

    for phrase in ("he had the nerve",
                   "he had the evren",
                   "she had the nerve",
                   "no categories here",
                   "he didn't have the nerve",
                   "she had the nerve more"):
        print '%25s =&gt;' % phrase, words.contains(phrase.split())
</snippet></ROW><ROW><id>10256493</id><snippet>python phrase_trie.py</snippet></ROW><ROW><id>10256493</id><snippet>         he had the nerve =&gt; True
         he had the evren =&gt; True
        she had the nerve =&gt; True
       no categories here =&gt; True
 he didn't have the nerve =&gt; False
   she had the nerve more =&gt; False
</snippet></ROW><ROW><id>10256493</id><snippet>defaultdict</snippet></ROW><ROW><id>10256493</id><snippet>insert</snippet></ROW><ROW><id>10256493</id><snippet>get_category</snippet></ROW><ROW><id>10256493</id><snippet>get_category</snippet></ROW><ROW><id>10256493</id><snippet>get_category</snippet></ROW><ROW><id>10256493</id><snippet>PhraseTrie</snippet></ROW><ROW><id>10256725</id><snippet>def magicWord(count):
    answer = raw_input("What is the password? ")
    if answer == 'lucas':
        print 'ACESS GRANTED'
    else:
        count += 1
        if count &gt; 2:
            print "na na na you didn\'t say the magic word. "
            return
        else:
            magicWord(count)
</snippet></ROW><ROW><id>10256725</id><snippet>&gt;&gt;&gt; magicWord(0)
What is the password? alan
What is the password? ellie
What is the password? ian
na na na you didn't say the magic word.
</snippet></ROW><ROW><id>10256749</id><snippet>lst = ['paragraph 1','paragraph 2','paragraph 3']
corpus = Corpus(documents=[Document(x) for x in lst])
</snippet></ROW><ROW><id>10256883</id><snippet>Telephone.objects.filter(contact__nickname='jill')
</snippet></ROW><ROW><id>10256883</id><snippet> what if i wanted to be able to edit jill and give her more than one number via
 different saves is this possible?
</snippet></ROW><ROW><id>10256883</id><snippet>ForeignKey</snippet></ROW><ROW><id>10256883</id><snippet>jill = Contact.objects.get(nickname='jill') # assuming you only have one jill
new_num = Telephone.objects.create(contact=jill,number=5551212)
</snippet></ROW><ROW><id>10256883</id><snippet>call_jill = Telephone.objects.filter(contact=jill) # if you already pulled jill
call_jill = Telephone.objects.filter(contact__nickname='jill')
</snippet></ROW><ROW><id>10256883</id><snippet>ManyToMany</snippet></ROW><ROW><id>10256883</id><snippet>   class Telephone(models.Model):
      number = models.PhoneNumberField()

   class Contact(models.Model):
      # your normal fields
      phones = models.ManyToMany(Telephone)
</snippet></ROW><ROW><id>10256883</id><snippet>   jills_phones = Contact.objects.get(nickname='jill').phones.all()
</snippet></ROW><ROW><id>10256883</id><snippet>   jill = Contact.objects.get(nickname='jill')
   jill.phones.add(Telephone.objects.create(number=5551212))
   jill.save()
</snippet></ROW><ROW><id>10256883</id><snippet>   phone = Telephone.objects.get(number=5551212)
   whose_is_it = phone.contact_set.all()
</snippet></ROW><ROW><id>10256883</id><snippet>ManyToMany</snippet></ROW><ROW><id>10256883</id><snippet>ForeignKey</snippet></ROW><ROW><id>10256883</id><snippet>ForeignKey</snippet></ROW><ROW><id>10256883</id><snippet>class Pizza(models.Model):
   topping = models.ForeignKey('Topping')

class Topping(models.Model):
   name = models.CharField(max_length=100)

class AssembledPizza(models.Model):
   topping = models.ForeignKey('Topping')
   pizza = models.ForeignKey('Pizza')
</snippet></ROW><ROW><id>10256883</id><snippet>class Pizza(models.Model):
   toppings = models.ManyToMany('Topping')

class Topping(models.Model):
   name = models.CharField(max_length=100)
</snippet></ROW><ROW><id>10256883</id><snippet>create</snippet></ROW><ROW><id>10256883</id><snippet>veggie = Pizza()
veggie.toppings.add(Topping.objects.create(name='Olives'))
veggie.toppings.add(Topping.objects.create(name='Peppers'))
veggie.save()
</snippet></ROW><ROW><id>10256940</id><snippet>import numpy as np
from matplotlib import pyplot as plt

def get_color():
    for item in ['r', 'g', 'b', 'c', 'm', 'y', 'k']:
        yield item

x = 0.3 * np.array(range(40))

color = get_color()

for group in range(5):
    # generates a collection of points
    y = np.exp2(x + 0.5 * group)
    # fit to a polynomial
    z = np.polyfit(x, y, 6)
    p = np.poly1d(z)

    acolor = next(color)

    plt.scatter(x, y, color=acolor, marker='o')
    plt.plot(x, p(x), acolor + '-', label=str(group))

plt.legend()
plt.xlim((0, 15))
plt.show() 
</snippet></ROW><ROW><id>10256940</id><snippet>&gt;&gt;&gt; color = iter(list_of_colors)
&gt;&gt;&gt; acolor = next(color)
</snippet></ROW><ROW><id>10256940</id><snippet>itertools.cycle</snippet></ROW><ROW><id>10256940</id><snippet>&gt;&gt;&gt; from itertools import cycle
&gt;&gt;&gt; color = cycle(['r', 'g', 'b', 'c', 'm', 'y', 'k'])
&gt;&gt;&gt; next(color)
'r'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10256940</id><snippet>import colorsys
import numpy as np
from matplotlib import pyplot as plt

def get_color(color):
    for hue in range(color):
        hue = 1. * hue / color
        col = [int(x) for x in colorsys.hsv_to_rgb(hue, 1.0, 230)]
        yield "#{0:02x}{1:02x}{2:02x}".format(*col)

x = 0.3 * np.array(range(40))

color = get_color(15)

for group in range(15):
    # generates a collection of points
    y = np.exp2(x + 0.5 * group)
    # fit to a polynomial
    z = np.polyfit(x, y, 6)
    p = np.poly1d(z)

    acolor = next(color)

    plt.scatter(x, y, color=acolor, marker='o')
    plt.plot(x, p(x), color=acolor, linestyle='dashed', label=str(group))

plt.legend()
plt.xlim((0, 15))
plt.show() 
</snippet></ROW><ROW><id>10256940</id><snippet>for hue in range(0, color*3, 3):
</snippet></ROW><ROW><id>10257070</id><snippet>p.StandardInput.WriteLine(@"exit");
</snippet></ROW><ROW><id>10257070</id><snippet>var p = new Process();
p.StartInfo.FileName = @"Python.exe";
p.StartInfo.Arguments = "main.py input.xml output.xml";
p.StartInfo.WorkingDirectory = @"D:\python-source \mypgms";
p.StartInfo.WindowStyle = ProcessWindowStyle.Normal;
p.StartInfo.UseShellExecute = false;
p.StartInfo.RedirectStandardOutput = true;
p.Start();
p.WaitForExit();
</snippet></ROW><ROW><id>10257507</id><snippet>f = open('myfile','r')
print repr(f.readlines()[99])
</snippet></ROW><ROW><id>10257507</id><snippet>37</snippet></ROW><ROW><id>10257507</id><snippet>enumerate()</snippet></ROW><ROW><id>10257507</id><snippet>3rubbish7</snippet></ROW><ROW><id>10257507</id><snippet>for idx,att_name in enumerate(header):
    arff_str.write("@attribute '%s' %s\n" % (name,attributes[att_name]))
</snippet></ROW><ROW><id>10257507</id><snippet>name</snippet></ROW><ROW><id>10257507</id><snippet>att_name</snippet></ROW><ROW><id>10257507</id><snippet>int</snippet></ROW><ROW><id>10257507</id><snippet>features[name] = int(value)</snippet></ROW><ROW><id>10257507</id><snippet>unicode</snippet></ROW><ROW><id>10257507</id><snippet>str</snippet></ROW><ROW><id>10257507</id><snippet>import re, sys
# sample data line:
# {40 1,101 3,319 2,375 2,525 2,530 bug}
# Looks like all data lines end in ",530 bug}" or ",530 other}"
pattern1 = r"\{(?:\d+ \d+,)*\d+ \w+\}$"
matcher1 = re.compile(pattern1).match
pattern2 = r"\{(?:\d+ \d+,)*"
matcher2 = re.compile(pattern2).match
bad_atts = re.compile(r"\D\d+\s+\W").findall
got_data = False
for lino, line in enumerate(open(sys.argv[1], "r"), 1):
    if not got_data:
        got_data = line.startswith('@data')
        continue
    if not matcher1(line):
        print
        print lino, repr(line)
        m = matcher2(line)
        if m:
            print "OK up to offset", m.end()
            print bad_atts(line)
</snippet></ROW><ROW><id>10257507</id><snippet>581 '{2 1,7 1,9 1,12 1,13 1,14 1,15 1,16 1,17 1,18 1,21 1,22 1,24 1,25 1,26 1,27
 1,29 1,32 1,33 1,36 1,39 1,40 1,44 1,48 1,49 1,50 1,54 1,57 1,58 1,60 1,67 1,68
 1,69 1,71 1,74 1,75 1,76 1,77 1,80 1,88 1,93 1,101 ,103 6,104 2,109 20,110 3,11
2 2,114 1,119 17,120 4,124 39,128 5,137 1,138 1,139 1,162 1,168 1,172 18,175 1,1
76 6,179 1,180 1,181 2,185 2,187 9,188 8,190 1,193 1,195 2,196 4,197 1,199 3,201
 3,202 4,203 5,206 1,207 2,208 1,210 2,211 1,212 5,213 1,215 2,216 3,218 2,220 2
,221 3,225 8,226 1,233 1,241 4,242 1,248 5,254 2,255 1,257 4,258 4,260 1,266 1,2
68 1,269 3,270 2,271 5,273 1,276 1,277 1,280 1,282 1,283 11,285 1,288 1,289 1,29
6 8,298 1,299 1,303 1,304 11,306 5,308 1,309 8,310 1,315 3,316 1,319 11,320 5,32
1 11,322 2,329 1,342 2,345 1,349 1,353 2,355 2,358 3,359 1,362 1,367 2,368 1,369
 1,373 2,375 9,377 1,381 4,382 1,383 3,387 1,388 5,395 2,397 2,400 1,401 7,407 2
,412 1,416 1,419 2,421 2,422 1,425 2,427 1,431 1,433 7,434 1,435 1,436 2,440 1,4
49 1,454 2,455 1,460 3,461 1,463 1,467 1,470 1,471 2,472 7,477 2,478 11,479 31,4
82 6,485 7,487 1,490 2,492 16,494 2,495 1,497 1,499 1,501 1,502 1,503 1,504 11,5
06 3,510 2,515 1,516 2,517 3,518 1,522 4,523 2,524 1,525 4,527 2,528 7,529 3,530
 bug}\n'
OK up to offset 203
[',101 ,']

709 '{101 ,124 2,184 1,188 1,333 1,492 3,500 4,530 bug}\n'
OK up to offset 1
['{101 ,']
</snippet></ROW><ROW><id>10257507</id><snippet>att_idx == 101</snippet></ROW><ROW><id>10257507</id><snippet>''</snippet></ROW><ROW><id>10257507</id><snippet>  if ((not att_type == constants.ARRF_NUMERIC)
      or not ((value == None) or value == 0)):
</snippet></ROW><ROW><id>10257507</id><snippet>if value or att_type != constants.ARFF_NUMERIC:
</snippet></ROW><ROW><id>10257507</id><snippet>if value:</snippet></ROW><ROW><id>10257507</id><snippet>None</snippet></ROW><ROW><id>10257507</id><snippet>0</snippet></ROW><ROW><id>10257507</id><snippet>""</snippet></ROW><ROW><id>10257507</id><snippet>att_idx == 101</snippet></ROW><ROW><id>10257507</id><snippet>[line 103] @attribute 'priority' STRING
</snippet></ROW><ROW><id>10257507</id><snippet>features[name] = int(value)</snippet></ROW><ROW><id>10257507</id><snippet>int("")</snippet></ROW><ROW><id>10257972</id><snippet>PyObject</snippet></ROW><ROW><id>10257972</id><snippet>PyErr_..</snippet></ROW><ROW><id>10257972</id><snippet>PyObject</snippet></ROW><ROW><id>10257972</id><snippet>Py_None</snippet></ROW><ROW><id>10257972</id><snippet>Py_RETURN_NONE</snippet></ROW><ROW><id>10257972</id><snippet>Py_RETURN_TRUE</snippet></ROW><ROW><id>10257972</id><snippet>PyObject *self</snippet></ROW><ROW><id>10257972</id><snippet>PyObject *args</snippet></ROW><ROW><id>10257972</id><snippet>static PyObject *PyMyClass_MyFunc(PyObject *self) {
  /* ..do something.. */
  Py_RETURN_TRUE;
}
</snippet></ROW><ROW><id>10257972</id><snippet>PyCFunction</snippet></ROW><ROW><id>10257972</id><snippet>PyMethodDef</snippet></ROW><ROW><id>10257972</id><snippet>METH_NOARGS</snippet></ROW><ROW><id>10257972</id><snippet>static PyObject *PyMyClass_Func(PyObject *self, PyObject *args, PyObject *kwds)
{
  /*...*/
}
</snippet></ROW><ROW><id>10257972</id><snippet>PyCFunction</snippet></ROW><ROW><id>10257972</id><snippet>METH_KEYWORDS</snippet></ROW><ROW><id>10258246</id><snippet>_download_cb</snippet></ROW><ROW><id>10258246</id><snippet># retrieve file from ftp to memory,
# consider using cStringIO or tempfile modules for your actual usage

from StringIO import StringIO
from django.core.files.base import ContentFile
s = StringIO()
nvcftp.retrbinary("RETR " + fname, s.write)
s.seek(0)  
# feed the fetched file to Django image field
new_image.image.save(fname, ContentFile(s.read()))
s.close()

# Or
from django.core.files.base import File
s = StringIO()
nvcftp.retrbinary("RETR " + fname, s.write)
s.size = s.tell()
new_image.image.save(fname, File(s))
</snippet></ROW><ROW><id>10258353</id><snippet>PyOpenGL</snippet></ROW><ROW><id>10258353</id><snippet>easy_install</snippet></ROW><ROW><id>10258353</id><snippet>python setup.py install</snippet></ROW><ROW><id>10258429</id><snippet>from random import random

# Generate data and keep record of scores
data = []
a_list = []
b_list = []
for i in range(50):
    a = int(random()*500)+1
    b = int(random()*500)+1
    rec = { 's' : 's%s' % i,
            'a' : a,
            'b' : b
             }
    a_list.append(a)
    b_list.append(b)
    data.append(rec)

# divide A and B ranges into five bins

def make_bins(f_list):
    f_min = min(f_list)
    f_max = max(f_list)
    f_step_size = (f_max - f_min) / 5.0
    f_steps = [ (f_min + i * f_step_size,
                 f_min + (i+1) * f_step_size)
                for i in range(5) ]
    # adjust top bin to be just larger than maximum
    top = f_steps[4]
    f_steps[4] = ( top[0], f_max+1 )
    return f_steps

a_steps = make_bins(a_list)
b_steps = make_bins(b_list)

# collect the strings that fit into any of the bins
# thus all the strings in cell[4,3] of your matrix
# would fit these conditions:
# string would have a Score A that is
# greater than or equal to the first element in a_steps[3]
# AND less than the second element in a_steps[3]
# AND it would have a Score B that is
# greater than or equal to the first element in b_steps[2]
# AND less than the second element in a_steps[2]
# NOTE: there is a need to adjust the pointers due to
#       the way you have numbered the cells of your matrix

def query_matrix(ptr_a, ptr_b):
    ptr_a -= 1
    from_a = a_steps[ptr_a][0]
    to_a = a_steps[ptr_a][1]

    ptr_b -= 1
    from_b = b_steps[ptr_b][0]
    to_b = b_steps[ptr_b][1]

    results = []
    for rec in data:
        s = rec['s']
        a = rec['a']
        b = rec['b']
        if (a &gt;= from_a and
            a &lt; to_a and
            b &gt;= from_b and
            b &lt; to_b):
            results.append(s)
    return results

# Print out the results for a visual check
total = 0
for i in range(5):
    for j in range(5):
        print '=' * 80
        print 'Cell: ', i+1, j+1, ' contains: ',
        hits = query_matrix(i+1,j+1)
        total += len(hits)
        print hits
print '=' * 80
print 'Total number of strings found: ', total
</snippet></ROW><ROW><id>10258738</id><snippet>[nums[0][0]] + [x[1] for x in nums]
</snippet></ROW><ROW><id>10258738</id><snippet>range(nums[-1][-1] + 1)
</snippet></ROW><ROW><id>10258745</id><snippet>os.subprocess</snippet></ROW><ROW><id>10258745</id><snippet>exec()</snippet></ROW><ROW><id>10258745</id><snippet>os.subprocess</snippet></ROW><ROW><id>10258745</id><snippet>wget</snippet></ROW><ROW><id>10258745</id><snippet>-A</snippet></ROW><ROW><id>10258745</id><snippet>wget -r -P /save/location -A jpeg,jpg,bmp,gif,png http://www.domain.com
</snippet></ROW><ROW><id>10259284</id><snippet>CONSTRUCT {?s ?p ?o}
        WHERE {
                ?s ?p ?o;
                vcard:fn ?name.
                FILTER regex (?name ,"^ufficio bologna 1$", "i")
                }
</snippet></ROW><ROW><id>10259411</id><snippet>x = (lambda result=some_very_complex_computation(y): [(t, result) for t in z])()
</snippet></ROW><ROW><id>10259411</id><snippet>x = zip(z, itertools.repeat(some_very_complex_computation(y)))
</snippet></ROW><ROW><id>10259411</id><snippet>some_very_complex_computation</snippet></ROW><ROW><id>10259411</id><snippet>some_very_complex_computation</snippet></ROW><ROW><id>10259411</id><snippet>from functools import lru_cache

@lru_cache()
def some_very_complex_computation(y):
  # ...
</snippet></ROW><ROW><id>10259411</id><snippet>from functools import wraps

def memoize(f):
  cache = {}
  @wraps(f)
  def memoized(*args):
    if args in cache:
      return cache[args]
    res = cache[args] = f(*args)
    return res
  return memoized

@memoize
some_very_complex_computation(x):
  # ...
</snippet></ROW><ROW><id>10259487</id><snippet>Entries</snippet></ROW><ROW><id>10259487</id><snippet>annotate</snippet></ROW><ROW><id>10259487</id><snippet>values</snippet></ROW><ROW><id>10259487</id><snippet>from django.db.models import Min
results = (Entries.objects
           .filter(date__lte = date)
           .values('name')
           .annotate(date = Min('date'))
           .order_by('name', 'date'))
</snippet></ROW><ROW><id>10259487</id><snippet>Entries</snippet></ROW><ROW><id>10259487</id><snippet>extra</snippet></ROW><ROW><id>10259487</id><snippet>sql = '''id = (SELECT E.id FROM myapp_entries AS E
                WHERE E.name_id = myapp_entries.name_id
                ORDER BY E.date
                LIMIT 1)'''
results = (Entries.objects
           .extra(where = [sql])
           .filter(date__lte = date)
           .order_by('name', 'date'))
</snippet></ROW><ROW><id>10259636</id><snippet>import math

def ci_lower_bound(pos, n, neg=0):

    if n == 0:
        return 0

    # Cannot calculate the square-root of a negative number
    if pos == 0:
        votes, use_neg = neg, True
    else:
        votes, use_neg = pos, False


    # Confidence
    z = 1.96

    phat = 1.0 * votes / n

    # Calculate how confident we are that this is bad or good.
    score = (phat + z*z/(2*n) - z * math.sqrt((phat*(1-phat)+z*z/(4*n))/n))/(1+z*z/n)

    # This relationship is defined above.
    # Multiply by -1 to return a negative confidence.
    if use_neg:
        return -1 * score

    return score
</snippet></ROW><ROW><id>10259649</id><snippet>element.get_attribute('value')</snippet></ROW><ROW><id>10259649</id><snippet>element.tag_name</snippet></ROW><ROW><id>10259649</id><snippet>driver = webdriver.Firefox()
driver.get('http://www.w3c.org')
element = driver.find_element_by_name('q')
element.send_keys('hi mom')

element_text = element.text
element_attribute_value = element.get_attribute('value')

print element
print 'element.text: {0}'.format(element_text)
print 'element.get_attribute(\'value\'): {0}'.format(element_attribute_value)
driver.quit()
</snippet></ROW><ROW><id>10260290</id><snippet>XTestExtension</snippet></ROW><ROW><id>10260290</id><snippet>XSendEvent()</snippet></ROW><ROW><id>10260290</id><snippet>xpyb</snippet></ROW><ROW><id>10260290</id><snippet>xte</snippet></ROW><ROW><id>10260290</id><snippet>xautomation</snippet></ROW><ROW><id>10260290</id><snippet>sudo apt-get install xautomation</snippet></ROW><ROW><id>10260290</id><snippet>man xte</snippet></ROW><ROW><id>10260290</id><snippet>xte</snippet></ROW><ROW><id>10260290</id><snippet>XTestExtension</snippet></ROW><ROW><id>10260372</id><snippet>&gt;&gt;&gt; from string import punctuation
&gt;&gt;&gt; text = 'i like: a, b, 007 and c!!'
&gt;&gt;&gt; re.findall('\w+|[{0}]+'.format(punctuation),text)
['i', 'like', ':', 'a', ',', 'b', ',', '007', 'and', 'c', '!!']
</snippet></ROW><ROW><id>10260372</id><snippet>&gt;&gt;&gt; re.findall('\w+|\S+',text)
['i', 'like', ':', 'a', ',', 'b', ',', '007', 'and', 'c', '!!']
</snippet></ROW><ROW><id>10260399</id><snippet>lt = l1[:max(5, 10 - len(l2))] + l2[:max(5, 10 - len(l1))]
</snippet></ROW><ROW><id>10260809</id><snippet>import shelve

DOC1 = "The problem of Programming Communication with"
DOC2 = "Programming of Arithmetic Operations"

DOC1 = DOC1.lower()
DOC2 = DOC2.lower()

all_words = DOC1.split()
all_words.extend(DOC2.split())
all_words = set(all_words)

inverted_index = {}

def location(doc, word):
    return doc[:doc.find(word)].count(' ') + 1


for word in all_words:
    if word in DOC1:
        if word in inverted_index:
            inverted_index[word].append(('DOC1', location(DOC1, word)))
        else:
            inverted_index[word] = [('DOC1', location(DOC1, word))]
    if word in DOC2:
        if word in inverted_index:
            inverted_index[word].append(('DOC2', location(DOC2, word)))
        else:
            inverted_index[word] = [('DOC2', location(DOC2, word))]

# Saving to persistent object
inverted_index_file = shelve.open('temp.db')
inverted_index_file['1'] = inverted_index
inverted_index_file.close()
</snippet></ROW><ROW><id>10260809</id><snippet>&gt;&gt;&gt; import shelve
&gt;&gt;&gt; t = shelve.open('temp.db')['1']
&gt;&gt;&gt; print t
{'operations': [('DOC2', 4)], 'of': [('DOC1', 3), ('DOC2', 2)], 'programming': [('DOC1',   4), ('DOC2', 1)], 'communication': [('DOC1', 5)], 'the': [('DOC1', 1)], 'with': [('DOC1', 6)], 'problem': [('DOC1', 2)], 'arithmetic': [('DOC2', 3)]}
</snippet></ROW><ROW><id>10260809</id><snippet>shelve</snippet></ROW><ROW><id>10260809</id><snippet>sqlite3</snippet></ROW><ROW><id>10260899</id><snippet>in</snippet></ROW><ROW><id>10260899</id><snippet>__contains__</snippet></ROW><ROW><id>10260899</id><snippet>def __contains__(self, obj):
    for item in self:
        if item == obj:
            return True

    return False
</snippet></ROW><ROW><id>10260899</id><snippet>PySequence_Contains</snippet></ROW><ROW><id>10260899</id><snippet>abstract.c</snippet></ROW><ROW><id>10260933</id><snippet>main_loop</snippet></ROW><ROW><id>10260933</id><snippet>display_profile</snippet></ROW><ROW><id>10260933</id><snippet>build_profile</snippet></ROW><ROW><id>10260933</id><snippet>amend_profile</snippet></ROW><ROW><id>10260933</id><snippet>options</snippet></ROW><ROW><id>10260933</id><snippet>profile</snippet></ROW><ROW><id>10260933</id><snippet>points</snippet></ROW><ROW><id>10260933</id><snippet>options</snippet></ROW><ROW><id>10260933</id><snippet>points</snippet></ROW><ROW><id>10260933</id><snippet>main_loop</snippet></ROW><ROW><id>10260933</id><snippet>def main_loop():
    options = ["Strength", "Health", "Wisdom", "Dexterity"]
    profile = []
    points = 30

    choice = None
    while choice != "0":
        print(menu_string)   #define menu_string elsewhere
        choice = input("Please choose an option: ")
        print()

        if choice == "0":
            print("Good bye.")
        elif choice == "1":
            display_profile(profile)
        elif choice == "2":
            profile, points = build_profile(options, profile, points)
        elif choice == "3":
            profile, points = amend_profile(profile, points)
        else:
            print("Sorry, but this is not a valid choice!")
            input("Press the enter key to continue.\n")

    input("\n\nPress the enter key to exit.")
</snippet></ROW><ROW><id>10260933</id><snippet>    def build_profile(options, profile, points):
        # insert logic here
        return profile, points
</snippet></ROW><ROW><id>10260933</id><snippet>profile</snippet></ROW><ROW><id>10260933</id><snippet>amend_profile</snippet></ROW><ROW><id>10260933</id><snippet>    def amend_profile(profile, points):
        # other code ...
        new_profile = []
        for item in profile:
            attribute, points_aloc = item
            # other code ...
            new_proflie.append(entry)
        # other code ...

        return new_profile, points
</snippet></ROW><ROW><id>10260933</id><snippet>entry</snippet></ROW><ROW><id>10260933</id><snippet>(item, point_new)</snippet></ROW><ROW><id>10260933</id><snippet>(attribute, point_new)</snippet></ROW><ROW><id>10260933</id><snippet>item</snippet></ROW><ROW><id>10260933</id><snippet>attribute</snippet></ROW><ROW><id>10261044</id><snippet>trainingset.txt</snippet></ROW><ROW><id>10261044</id><snippet>Without-pay</snippet></ROW><ROW><id>10261044</id><snippet>&lt;=50k</snippet></ROW><ROW><id>10261044</id><snippet>__init__</snippet></ROW><ROW><id>10261044</id><snippet>        for row in data:
              if row[15] == ' &gt;50K':
                    self.greaterThan_data.append(row)
              else:
                    self.lessThan_data.append(row)
</snippet></ROW><ROW><id>10261044</id><snippet>Without-pay</snippet></ROW><ROW><id>10261044</id><snippet>&gt;50k</snippet></ROW><ROW><id>10261044</id><snippet>greaterThan_data</snippet></ROW><ROW><id>10261044</id><snippet>        self.greater_class_prob_dist = self.getCatProbs(self.greaterThan_data,2)
</snippet></ROW><ROW><id>10261053</id><snippet>import sys

spliced = False
if '-s' in sys.argv:
    spliced = True
    sys.argv.remove('-s')
infile, outfile = sys.argv[1:]
</snippet></ROW><ROW><id>10261053</id><snippet>import argparse

parser = argparse.ArgumentParser(description='Tool for extracting genes')
parser.add_argument('infile', help='source file with the genes')
parser.add_argument('outfile', help='outfile file in a FASTA format')
parser.add_argument('-s', '--spliced', action='store_true', help='remove introns')

if __name__ == '__main__':
    result = parser.parse_args('-s myin myout'.split())
    print vars(result)
</snippet></ROW><ROW><id>10261229</id><snippet>In [35]: ast.literal_eval('1')
Out[35]: 1

In [36]: type(ast.literal_eval('1'))
Out[36]: int

In [38]: type(ast.literal_eval('1.0'))
Out[38]: float

In [40]: type(ast.literal_eval('[1,2,3]'))
Out[40]: list
</snippet></ROW><ROW><id>10261229</id><snippet>import ast, re
def dataType(str):
    str=str.strip()
    if len(str) == 0: return 'BLANK'
    try:
        t=ast.literal_eval(str)

    except ValueError:
        return 'TEXT'
    except SyntaxError:
        return 'TEXT'

    else:
        if type(t) in [int, long, float, bool]:
            if t in set((True,False)):
                return 'BIT'
            if type(t) is int or type(t) is long:
                return 'INT'
            if type(t) is float:
                return 'FLOAT'
        else:
            return 'TEXT' 



testSet=['   1  ', ' 0 ', 'True', 'False',   #should all be BIT
         '12', '34l', '-3','03',              #should all be INT
         '1.2', '-20.4', '1e66', '35.','-   .2','-.2e6',      #should all be FLOAT
         '10-1', 'def', '10,2', '[1,2]','35.9.6','35..','.']

for t in testSet:
    print "{:10}:{}".format(t,dataType(t))
</snippet></ROW><ROW><id>10261229</id><snippet>   1      :BIT
 0        :BIT
True      :BIT
False     :BIT
12        :INT
34l       :INT
-3        :INT
03        :INT
1.2       :FLOAT
-20.4     :FLOAT
1e66      :FLOAT
35.       :FLOAT
-   .2    :FLOAT
-.2e6     :FLOAT
10-1      :TEXT
def       :TEXT
10,2      :TEXT
[1,2]     :TEXT
35.9.6    :TEXT
35..      :TEXT
.         :TEXT
</snippet></ROW><ROW><id>10261229</id><snippet>def regDataType(str):
    str=str.strip()
    if len(str) == 0: return 'BLANK'

    if re.match(r'True$|^False$|^0$|^1$', str):
        return 'BIT'
    if re.match(r'([-+]\s*)?\d+[lL]?$', str): 
        return 'INT'
    if re.match(r'([-+]\s*)?[1-9][0-9]*\.?[0-9]*([Ee][+-]?[0-9]+)?$', str): 
        return 'FLOAT'
    if re.match(r'([-+]\s*)?[0-9]*\.?[0-9][0-9]*([Ee][+-]?[0-9]+)?$', str): 
        return 'FLOAT'

    return 'TEXT' 
</snippet></ROW><ROW><id>10261277</id><snippet>celeryconfig.py</snippet></ROW><ROW><id>10261733</id><snippet>form = SQLFORM.factory(db.table1, db.table2)
if form.process().accepted:
    invoice_id = db.table.insert(**db.table1._filter_fields(form.vars))
    form.vars.invoice_id = invoice_id
    db.table2.insert(**db.table2._filter_fields(form.vars))
</snippet></ROW><ROW><id>10261920</id><snippet>touch</snippet></ROW><ROW><id>10261920</id><snippet>import os, time

checkdir="./"

for item in os.listdir(checkdir):
    item_path = "%s%s"%(checkdir,item)
    mtime = os.path.getmtime(item_path)
    print "%s: %s" %(item_path,mtime)
</snippet></ROW><ROW><id>10261970</id><snippet>s = s.replace("\r\n", "&lt;br /&gt;")
s = s.replace("\n", "&lt;br /&gt;")
</snippet></ROW><ROW><id>10262027</id><snippet>exit()</snippet></ROW><ROW><id>10262027</id><snippet>pygame.quit()</snippet></ROW><ROW><id>10262027</id><snippet>finish = True</snippet></ROW><ROW><id>10262027</id><snippet>start = False</snippet></ROW><ROW><id>10262027</id><snippet>pygame.quit()</snippet></ROW><ROW><id>10262027</id><snippet>game()</snippet></ROW><ROW><id>10262027</id><snippet>pygame.quit()</snippet></ROW><ROW><id>10262027</id><snippet>game()</snippet></ROW><ROW><id>10262105</id><snippet>np.select([z &lt; 0, z == 0, z &gt; 0], [1 / (z + (z == 0)), 0, 1 + z])
</snippet></ROW><ROW><id>10262105</id><snippet>z == 0</snippet></ROW><ROW><id>10262105</id><snippet>z</snippet></ROW><ROW><id>10262105</id><snippet>z</snippet></ROW><ROW><id>10262105</id><snippet>np.select</snippet></ROW><ROW><id>10262180</id><snippet>os.environ</snippet></ROW><ROW><id>10262180</id><snippet>bash_profile</snippet></ROW><ROW><id>10262191</id><snippet>import multiprocessing
from itertools import product

alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ12234567890!@#$%^&amp;*?,()-=+[]/;"
num_parts = 4
part_size = len(alphabet) // num_parts

def do_job(first_bits):
    for x in product(first_bits, alphabet, alphabet, alphabet):
        print(x)

if __name__ == '__main__':
    pool = multiprocessing.Pool(processes=4)
    results = []
    for i in range(num_parts):
        if i == num_parts - 1:
            first_bit = alphabet[part_size * i :]
        else:
            first_bit = alphabet[part_size * i : part_size * (i+1)]
        results.append(pool.apply_async(do_job(first_bit)))

    pool.close()
    pool.join()
</snippet></ROW><ROW><id>10262191</id><snippet>results</snippet></ROW><ROW><id>10262191</id><snippet>do_job</snippet></ROW><ROW><id>10262307</id><snippet>xx = np.matrix([[1.2,3.4],[5.4,6.7],[9.8, 5.2]])
zz = np.matrix([[str(ele) for ele in a] for a in np.array(xx)])
</snippet></ROW><ROW><id>10262307</id><snippet>&gt;&gt;&gt; xx
matrix([[ 1.2,  3.4],
        [ 5.4,  6.7],
        [ 9.8,  5.2]])
&gt;&gt;&gt; zz
matrix([['1.2', '3.4'],
        ['5.4', '6.7'],
        ['9.8', '5.2']], 
       dtype='|S3')
</snippet></ROW><ROW><id>10262424</id><snippet>if sys.argv[1] != '-s':
    print('Invalid parameter, if spliced, must be -s')
    sys.exit(1)
</snippet></ROW><ROW><id>10262424</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>10262424</id><snippet>'-s'</snippet></ROW><ROW><id>10262424</id><snippet>'-s'</snippet></ROW><ROW><id>10262424</id><snippet>if '-s' in sys.argv:
    spliced = True
    sys.argv.remove('s')
</snippet></ROW><ROW><id>10262424</id><snippet>if len(sys.argv[0]) &lt; 2 or len(sys.argv[0]) &gt; 3:
</snippet></ROW><ROW><id>10262424</id><snippet>if not 3 &lt;= len(sys.argv) &lt;= 4: # len(sys.argv) - 1 is the number of parameters for the script, as sys.argv[0] is the scriptname itself
</snippet></ROW><ROW><id>10262424</id><snippet>if cols[8] != '\t\d+':
</snippet></ROW><ROW><id>10262424</id><snippet>re</snippet></ROW><ROW><id>10262825</id><snippet>unicode</snippet></ROW><ROW><id>10262825</id><snippet>print(' '.join(arr))</snippet></ROW><ROW><id>10262825</id><snippet>u""</snippet></ROW><ROW><id>10262897</id><snippet>super()</snippet></ROW><ROW><id>10262945</id><snippet>x</snippet></ROW><ROW><id>10262945</id><snippet>y</snippet></ROW><ROW><id>10262945</id><snippet>z</snippet></ROW><ROW><id>10262945</id><snippet>x = []
</snippet></ROW><ROW><id>10262945</id><snippet>[]</snippet></ROW><ROW><id>10262945</id><snippet>x</snippet></ROW><ROW><id>10262945</id><snippet>x = []
foo = lambda x: x.append(None)
foo(x)
</snippet></ROW><ROW><id>10262945</id><snippet>[]</snippet></ROW><ROW><id>10262945</id><snippet>x</snippet></ROW><ROW><id>10262945</id><snippet>foo</snippet></ROW><ROW><id>10262945</id><snippet>foo</snippet></ROW><ROW><id>10262945</id><snippet>x</snippet></ROW><ROW><id>10262945</id><snippet>foo</snippet></ROW><ROW><id>10262945</id><snippet>None</snippet></ROW><ROW><id>10262945</id><snippet>None</snippet></ROW><ROW><id>10262945</id><snippet>x = 0
def foo(x):
    x += 1
foo(x)
</snippet></ROW><ROW><id>10262945</id><snippet>0</snippet></ROW><ROW><id>10262945</id><snippet>x</snippet></ROW><ROW><id>10262945</id><snippet>foo</snippet></ROW><ROW><id>10262945</id><snippet>foo</snippet></ROW><ROW><id>10262945</id><snippet>x</snippet></ROW><ROW><id>10262945</id><snippet>foo</snippet></ROW><ROW><id>10262945</id><snippet>x</snippet></ROW><ROW><id>10262984</id><snippet>tempfile.gettempdir()</snippet></ROW><ROW><id>10263078</id><snippet>for line in tmp:
</snippet></ROW><ROW><id>10263078</id><snippet>import copy
for line in copy.deepcopy(tmp):
</snippet></ROW><ROW><id>10263078</id><snippet>&gt;&gt;&gt; line = [['CC', 'DC', 'EC', 'FC', 'GC', 'HC', 'XX'], ['value1']]
&gt;&gt;&gt; line[0].append(line.pop()[0])
&gt;&gt;&gt; line
[['CC', 'DC', 'EC', 'FC', 'GC', 'HC', 'XX', 'value1']]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10263085</id><snippet>list</snippet></ROW><ROW><id>10263085</id><snippet>spy</snippet></ROW><ROW><id>10263085</id><snippet>[2]=8</snippet></ROW><ROW><id>10263085</id><snippet>= "hello"</snippet></ROW><ROW><id>10263205</id><snippet>id, fname, lname, email, pswd, whatever = result
</snippet></ROW><ROW><id>10263528</id><snippet>{$ for beer in beers %}
</snippet></ROW><ROW><id>10263528</id><snippet>$</snippet></ROW><ROW><id>10263528</id><snippet>%</snippet></ROW><ROW><id>10263528</id><snippet>for</snippet></ROW><ROW><id>10263528</id><snippet>for</snippet></ROW><ROW><id>10263528</id><snippet>endfor</snippet></ROW><ROW><id>10263540</id><snippet>curses.doupdate()</snippet></ROW><ROW><id>10263765</id><snippet>def xticks(*args, **kwargs):
    ax = gca()

    if len(args)==0:
        locs = ax.get_xticks()
        labels = ax.get_xticklabels()
    elif len(args)==1:
        locs = ax.set_xticks(args[0])
        labels = ax.get_xticklabels()
    elif len(args)==2:
        locs = ax.set_xticks(args[0])
        labels = ax.set_xticklabels(args[1], **kwargs)
    else: raise TypeError('Illegal number of arguments to xticks')
    if len(kwargs):
        for l in labels:
            l.update(kwargs)

    draw_if_interactive()
    return locs, silent_list('Text xticklabel', labels)
</snippet></ROW><ROW><id>10263765</id><snippet>plt.xticks(range(len(dates)), (dates), rotation=45)
</snippet></ROW><ROW><id>10263765</id><snippet>len(args)==2</snippet></ROW><ROW><id>10263765</id><snippet>self.axes.plot(...)</snippet></ROW><ROW><id>10263765</id><snippet>self.axes.set_xticks(range(len(dates)))
self.axes.set_xticklabels(dates, rotation=45)
</snippet></ROW><ROW><id>10263880</id><snippet>class RecList:
  def __init__(self, head=None, rest=None):
    self._head = head
    self._rest = rest
  def __str__(self):
    if self._rest is None:
        return str(self._head)
    return str(self._head) + ' ' + self._rest.__str__()
  def reverse(self):
    return self._reverse_aux(None)
  def _reverse_aux(self, acc):
    if self._rest is None:
        return RecList(self._head, acc)
    return self._rest._reverse_aux(RecList(self._head, acc))

lst = RecList(1, RecList(2, RecList(3, None)))
print lst
&gt; 1 2 3
print lst.reverse()
&gt; 3 2 1
</snippet></ROW><ROW><id>10263921</id><snippet>PyObject_Str()</snippet></ROW><ROW><id>10263921</id><snippet>PyObject_Bytes()</snippet></ROW><ROW><id>10263921</id><snippet>char*</snippet></ROW><ROW><id>10263976</id><snippet>"False"</snippet></ROW><ROW><id>10263976</id><snippet>"True"</snippet></ROW><ROW><id>10263981</id><snippet>class Company(models.Model):
  name = models.CharField(max_length=100, null=True)
  address = models.CharField(max_length=100, null=True)
  lat = models.DecimalField(max_digits=20, decimal_places=10, null=True)
  long = models.DecimalField(max_digits=20, decimal_places=10, null=True)
  phone = models.CharField(max_length=15, null=True)
  website = models.UrlField(max_length=50, null=True)
  email = models.EmailField(max_length=50, null=True)
  hiring = models.BooleanField(default=False)
  about_us = models.CharField(max_length=500, null=True)
  approved = models.BooleanField(default=False)
</snippet></ROW><ROW><id>10264070</id><snippet>&gt;&gt;&gt; utctime.isoformat()
'1601-01-01T00:00:00.000050'
</snippet></ROW><ROW><id>10264070</id><snippet>iso = utctime.isoformat()
tokens = iso.strip().split("T")
last_visit_time = "Last visit time: %s %s" % (tokens[0], tokens[1].strip().split(".")[0])
</snippet></ROW><ROW><id>10264070</id><snippet>strftime</snippet></ROW><ROW><id>10264197</id><snippet>x &lt; y</snippet></ROW><ROW><id>10264197</id><snippet>if x &lt; y:
    x, y = y, x
</snippet></ROW><ROW><id>10264197</id><snippet>min</snippet></ROW><ROW><id>10264197</id><snippet>max</snippet></ROW><ROW><id>10264197</id><snippet>x, y = max(x,y), min(x,y)
</snippet></ROW><ROW><id>10264349</id><snippet>correct = next_line(the_file)</snippet></ROW><ROW><id>10264349</id><snippet>correct</snippet></ROW><ROW><id>10264349</id><snippet>'1\n'</snippet></ROW><ROW><id>10264349</id><snippet>correct[0]</snippet></ROW><ROW><id>10264349</id><snippet>'1'</snippet></ROW><ROW><id>10264349</id><snippet>raw_input</snippet></ROW><ROW><id>10264349</id><snippet>\n</snippet></ROW><ROW><id>10264349</id><snippet>[0]</snippet></ROW><ROW><id>10264349</id><snippet>.strip()</snippet></ROW><ROW><id>10264391</id><snippet>sessionmaker</snippet></ROW><ROW><id>10264391</id><snippet>bind</snippet></ROW><ROW><id>10264391</id><snippet>Session = sessionmaker(bind=engine)
# Session is a class
session = Session()
# now session is a instance of the class Session
session.execute(...)
</snippet></ROW><ROW><id>10264525</id><snippet>def words(fileobj):
    for line in fileobj:
        for word in line.split():
            yield word
</snippet></ROW><ROW><id>10264525</id><snippet>with open("offsetfile.txt") as wordfile:
    wordgen = words(wordfile)
    for word in wordgen:
        if word in searchterms:   # searchterms should be a set() to make this fast
            break
    else:
        word = None               # makes sure word is None if the word wasn't found

    foundwords = [word, next(wordgen, None), next(wordgen, None)]
</snippet></ROW><ROW><id>10264525</id><snippet>foundwords[0]</snippet></ROW><ROW><id>10264525</id><snippet>foundwords[1]</snippet></ROW><ROW><id>10264525</id><snippet>foundwords[2]</snippet></ROW><ROW><id>10264525</id><snippet>None</snippet></ROW><ROW><id>10264535</id><snippet>str</snippet></ROW><ROW><id>10264535</id><snippet>soup = BeautifulSoup("&lt;html&gt;&lt;body&gt;&lt;span&gt;This is my text&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;")
span = soup.find('span')
str(span) # Outputs '&lt;span&gt;This is my text&lt;/span&gt;'
</snippet></ROW><ROW><id>10264590</id><snippet>linalg</snippet></ROW><ROW><id>10264590</id><snippet>numpy.linalg
</snippet></ROW><ROW><id>10264590</id><snippet>import numpy

x = numpy.array([[1,2],[5,7]])
det_x = numpy.linalg.det(x)

#or

import numpy as np

x = np.array([[1,2],[5,7]])
det_x = np.linalg.det(x)
</snippet></ROW><ROW><id>10264604</id><snippet>from google.appengine.ext import webapp

class MyRequestHandler(webapp.RequestHandler):
    def get(self):
        self.response.out.write(self.request.cookies.get('cookiename'))
</snippet></ROW><ROW><id>10264604</id><snippet>server</snippet></ROW><ROW><id>10264604</id><snippet>client</snippet></ROW><ROW><id>10264604</id><snippet>HTTP header</snippet></ROW><ROW><id>10264604</id><snippet>Set-cookie</snippet></ROW><ROW><id>10264604</id><snippet>request.cookies</snippet></ROW><ROW><id>10264604</id><snippet>dict</snippet></ROW><ROW><id>10264613</id><snippet>yield</snippet></ROW><ROW><id>10264613</id><snippet>return</snippet></ROW><ROW><id>10264613</id><snippet>return</snippet></ROW><ROW><id>10264613</id><snippet> self.get_next_probe(new_list, probes, unit_length)
</snippet></ROW><ROW><id>10264613</id><snippet> for val in self.get_next_probe(new_list, probes, unit_length):
     yield val
</snippet></ROW><ROW><id>10264666</id><snippet>User</snippet></ROW><ROW><id>10264666</id><snippet>Thing</snippet></ROW><ROW><id>10264666</id><snippet>from sqlalchemy import Table, Integer, Column, ForeignKey
from sqlalchemy.orm import relationship, backref
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

association_table = Table('association', Base.metadata,
    Column('user_id', Integer, ForeignKey('user.id')),
    Column('thing_id', Integer, ForeignKey('thing.id'))
)

class User(Base):
    __tablename__ = 'user'
    # Whatever you need in this model
    inventory = relationship('Thing', secondary = association_table, backref = 'users')

class Thing(Base):
    __tablename__ = 'thing'
    # Whatever you need in this model
</snippet></ROW><ROW><id>10264666</id><snippet>Thing</snippet></ROW><ROW><id>10264666</id><snippet>User</snippet></ROW><ROW><id>10264666</id><snippet>george</snippet></ROW><ROW><id>10264666</id><snippet>george.inventory</snippet></ROW><ROW><id>10264666</id><snippet>backref</snippet></ROW><ROW><id>10264757</id><snippet>import Tkinter as tk

class application:
    def __init__(self,window):
        """ Initalize the Application """
        self.myentrybox = tk.Entry(window)
        self.myentrybox.pack()
        self.myentrybox.insert(0,"some default value")
        self.myentrybox.bind("&lt;Return&gt;",self.Enter)

    def Enter(self,event):
        """ Someone Pressed Enter """
        print "You entered &gt;&gt; %s" % (self.myentrybox.get())

root=tk.Tk()
myapp = application(root)
root.mainloop()
</snippet></ROW><ROW><id>10264789</id><snippet>PYTHONSTARTUP</snippet></ROW><ROW><id>10264789</id><snippet>ENVIRONMENT VARIABLES</snippet></ROW><ROW><id>10264789</id><snippet>sys.ps1</snippet></ROW><ROW><id>10264789</id><snippet>~/.pythonrc.py</snippet></ROW><ROW><id>10264789</id><snippet>PYTHONSTARTUP</snippet></ROW><ROW><id>10264789</id><snippet>export PYTHONSTARTUP=~/.pythonrc.py
</snippet></ROW><ROW><id>10264916</id><snippet>def pairSum(data, value):
  s = set()
  for i in data:
    if (value - i) in s:
      return True
    else:
      s.add(i)
  else:
    return False
</snippet></ROW><ROW><id>10264922</id><snippet>&gt;&gt;&gt; data = {u'City':u'Ciri\xe8'}
&gt;&gt;&gt; data['City']
u'Ciri\xe8'
&gt;&gt;&gt; print data['City']
Ciriè
</snippet></ROW><ROW><id>10264922</id><snippet>u''</snippet></ROW><ROW><id>10264922</id><snippet>\xe8</snippet></ROW><ROW><id>10264922</id><snippet>print</snippet></ROW><ROW><id>10264922</id><snippet>&gt;&gt;&gt; print u'\xe8'
è
&gt;&gt;&gt; print u'\x81'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "d:\dev\Python27\lib\encodings\cp437.py", line 12, in encode
    return codecs.charmap_encode(input,errors,encoding_map)
UnicodeEncodeError: 'charmap' codec can't encode character u'\x81' in position 0: character maps to &lt;undefined&gt;
</snippet></ROW><ROW><id>10264939</id><snippet>add_object</snippet></ROW><ROW><id>10264939</id><snippet>rect</snippet></ROW><ROW><id>10264939</id><snippet>add_objects</snippet></ROW><ROW><id>10264939</id><snippet>get_elements</snippet></ROW><ROW><id>10264939</id><snippet>get_elements</snippet></ROW><ROW><id>10264939</id><snippet>def find_or_create(self, rect, create = False):
    "find or create the sub-tree that contains the given point"
    if self.current_level == self.max_level:
        return self # we contain it
    half_size = (self.size[0]/2, self.size[1]/2)
    if rect.collide_rect((self.location, half_size)):
        name = 'top_left'
        location = self.location
    else if rect.collide_rect(...):
        name = 'top_right'
        location = ... # top right location
    else ... [as before, each time setting name and location]
    # now, after deciding which sub-quadrant applies...
    quad = getattr(self, name)
    # if the sub-quadrant already exists, recurse
    if quad:
        return quad.find_or_create(rect, create)
    # otherwise, if we are supposed to create it, do that
    if create:
        quad = QuadTree(...) # this is why you also have to compute "location"
        setattr(self, name, quad)
    return quad # return the new quadtree, or None, as appropriate
</snippet></ROW><ROW><id>10264939</id><snippet>getattr</snippet></ROW><ROW><id>10264939</id><snippet>setattr</snippet></ROW><ROW><id>10264939</id><snippet>name</snippet></ROW><ROW><id>10264939</id><snippet>    quad = self.find_or_create(rect, True)
    quad.objects.append(new_object)
</snippet></ROW><ROW><id>10264939</id><snippet>rect</snippet></ROW><ROW><id>10265017</id><snippet>export CC=llvm-gcc-4.2
export CXX=llvm-g++-4.2
</snippet></ROW><ROW><id>10265037</id><snippet>time</snippet></ROW><ROW><id>10265037</id><snippet>time</snippet></ROW><ROW><id>10265037</id><snippet>time</snippet></ROW><ROW><id>10265037</id><snippet>import time
x = 1
t = 1
time_passed = t + 1 # use "time_passed" instead of "time" for example
while x == 1:
    print time_passed
    if time_passed &gt;= 10:
        time_passed = t - 1
    elif time_passed &lt;= 0:
        time_passed = t + 1
    time.sleep(time_passed)
</snippet></ROW><ROW><id>10265037</id><snippet>time</snippet></ROW><ROW><id>10265037</id><snippet>import time as tm</snippet></ROW><ROW><id>10265037</id><snippet>tm.sleep(time)</snippet></ROW><ROW><id>10265037</id><snippet>import time as tm # alias the time module as "tm" for example
x = 1
t = 1
time  = t + 1
while x == 1:
    print time
    if time &gt;= 10:
        time = t - 1
    elif time &lt;= 0:
        time = t + 1
    tm.sleep(time) # use "tm" to refer to the module
</snippet></ROW><ROW><id>10265037</id><snippet>sleep</snippet></ROW><ROW><id>10265037</id><snippet>time</snippet></ROW><ROW><id>10265037</id><snippet>from time import sleep</snippet></ROW><ROW><id>10265037</id><snippet>sleep(time)</snippet></ROW><ROW><id>10265037</id><snippet>from time import sleep # only import "sleep" from time, not the whole module
x = 1
t = 1
time  = t + 1
while x == 1:
    print time
    if time &gt;= 10:
        time = t - 1
    elif time &lt;= 0:
        time = t + 1
    sleep(time) # use "sleep" directly
</snippet></ROW><ROW><id>10265037</id><snippet>from time import sleep
x = 1
t = 1
time  = t + 1
incr = True
while x == 1:
    print time
    if time &gt;= 10:
        time = 9
        incr = False
    elif time &lt;= 0:
        time = t + 1
        incr = True
    else:
        if incr:
            time = time + 1
        else:
            time = time - 1
    sleep(time)
</snippet></ROW><ROW><id>10265103</id><snippet>enumerate()</snippet></ROW><ROW><id>10265168</id><snippet>proj</snippet></ROW><ROW><id>10265168</id><snippet>sys.path</snippet></ROW><ROW><id>10265168</id><snippet>proj/
   __init__.py
   app/
       __init__.py
       foo.py

# In proj directory, enter Python shell
&gt;&gt;&gt; import sys

&gt;&gt;&gt; before = set(sys.modules)
&gt;&gt;&gt; import app.foo
&gt;&gt;&gt; set(sys.modules) - before
set(['app', 'app.foo'])

&gt;&gt;&gt; before = set(sys.modules)
&gt;&gt;&gt; from proj.app import foo
&gt;&gt;&gt; set(sys.modules) - before
set(['proj.app.foo', 'proj', 'proj.app'])
</snippet></ROW><ROW><id>10265168</id><snippet>proj.app.foo</snippet></ROW><ROW><id>10265168</id><snippet>app.foo</snippet></ROW><ROW><id>10265168</id><snippet>app/__init__.py</snippet></ROW><ROW><id>10265168</id><snippet>app/foo.py</snippet></ROW><ROW><id>10265168</id><snippet>proj</snippet></ROW><ROW><id>10265168</id><snippet>../proj</snippet></ROW><ROW><id>10265168</id><snippet>'mysite.blog'</snippet></ROW><ROW><id>10265168</id><snippet>import blog</snippet></ROW><ROW><id>10265168</id><snippet>proj</snippet></ROW><ROW><id>10265168</id><snippet>dispatch_uid</snippet></ROW><ROW><id>10265235</id><snippet>__init__</snippet></ROW><ROW><id>10265235</id><snippet>class RegistrationForm(UserCreationForm):
    """Provide a view for creating users with only the requisite fields."""

    class Meta:
        model = User
        # Note that password is taken care of for us by auth's UserCreationForm.
        fields = ('username', 'email')

    def __init__(self, *args, **kwargs):
        super(RegistrationForm, self).__init__(*args, **kwargs)
        self.fields['email'].required = True
</snippet></ROW><ROW><id>10265262</id><snippet>__init__.py</snippet></ROW><ROW><id>10265262</id><snippet>importlib.import_module</snippet></ROW><ROW><id>10265262</id><snippet>__import__</snippet></ROW><ROW><id>10265262</id><snippet># import appropriate module as mod depending on settings, environment
# using importlib.import_module, or __import__

__all__ = []

_instance = mod.WordProc()
for attr in dir(_instance):
    if not attr.startswith('_') and callable(getattr(_instance, attr)):
        locals()[attr] = getattr(_instance, attr)
</snippet></ROW><ROW><id>10265323</id><snippet># your_app.models
from django.contrib.auth.models import User


class AuthorUser(User):
    class Meta:
        proxy = True

    def __unicode__(self):
        return '%s %s' % (self.first_name, self.last_name)


class YourModel(models.Model):
    author = models.ForeignKey(AuthorUser)
</snippet></ROW><ROW><id>10265419</id><snippet>-v</snippet></ROW><ROW><id>10265422</id><snippet>ps</snippet></ROW><ROW><id>10265422</id><snippet>ps</snippet></ROW><ROW><id>10265422</id><snippet>ps</snippet></ROW><ROW><id>10265515</id><snippet>lobbies = Lobby.all().fetch(10)
keys = [lobby.key() for lobby in lobbies]
q = aUser.gql('WHERE lobby IN :1', keys)
users = q.fetch(1000)
</snippet></ROW><ROW><id>10265903</id><snippet>Q*Layout</snippet></ROW><ROW><id>10265903</id><snippet>setStyleSheet</snippet></ROW><ROW><id>10265903</id><snippet>QWidget</snippet></ROW><ROW><id>10266041</id><snippet>dict</snippet></ROW><ROW><id>10266041</id><snippet>class MakesiteForm(forms.ModelForm):

    # your code... Then

    def clean_sitename(self):
        sitename = self.cleaned_data['sitename']
        return ''.join(sitename.split()).lower()
</snippet></ROW><ROW><id>10266283</id><snippet>A</snippet></ROW><ROW><id>10266283</id><snippet>class Trk(object):
    """Track some values and compute a function if any change"""
    def __init__(self, name, fn, **objects_to_track):
        def _trk_fn(self):
            if any(self.__dict__[x] != self.original_objects[x] for x in self.original_objects):
                self.value = self.saved_fn(self.__dict___)
                # now that self.value is updated, also update self.original_objects
                for x in self.original_objects:
                    self.original_objects[x] = self.__dict__[x]
            return self.value

        self.original_objects = objects_to_track  # make reference copy
        self.__dict__.update(objects_to_track)
        self.name = name
        self.saved_fn = fn
        self.fn = self._trk_fn()
        self.value = self.fn()
</snippet></ROW><ROW><id>10266283</id><snippet># want to track x, y, z
trk = Trk(x, y, z)
trk.fn() # returns up-to-date value

trk.x = new_value
trk.fn() #detects that trk.x changed and computes new trk.value
</snippet></ROW><ROW><id>10266283</id><snippet>self.fn()</snippet></ROW><ROW><id>10266283</id><snippet>self.value</snippet></ROW><ROW><id>10266283</id><snippet>self.original_objects</snippet></ROW><ROW><id>10266317</id><snippet>class StampValue(webapp.RequestHandler):
    _task_url = '/tasks/stamp'
    _page_size = 100

    @classmethod
    def fire(cls, **params):
        taskqueue.add(url=cls._task_url, params=params)

    def get(self):
        self.fire()

    def post(self):
        key = self.request.get('key')
        if key:
            entities = MyModel.gql('WHERE __key__ &gt;= :1 ORDER BY __key__ ASC', db.Key(key)).fetch(self._page_size+1)
        else:
            entities = MyModel.gql('ORDER BY __key__ ASC').fetch(self._page_size+1)

        key = None
        if len(entities) == self._page_size+1:
            key = str(entities[-1].key())
            self.fire(key=key)
            entities = entities[:self._page_size]

        for entity in entities:
            # update your field here
        db.put(entities)
</snippet></ROW><ROW><id>10266320</id><snippet>def recursive_bubble_ands_up(expr):
    """ Bubble all 'and's in the expression up one level, no matter how nested.
    """
    # if the expression is just a single thing, like 'a', just return it. 
    if is_atomic(expr):
        return expr
    # if it has an 'and' in one of its subexpressions 
    #  (but the subexpression isn't just the 'and' operator itself)
    #  rewrite it to bubble the and up
    and_clauses = [('and' in subexpr and not is_atomic(subexpr)) 
                   for subexpr in expr]
    if any(and_clauses):
        first_and_clause = and_clauses.index(True)
        expr_before_and = expr[:first_and_clause]
        expr_after_and = expr[first_and_clause+1:]
        and_parts = expr[first_and_clause][1:]
        expr = ('and',) + tuple([expr_before_and + (and_part,) + expr_after_and 
                                 for and_part in and_parts])
    # apply recursive_bubble_ands_up to all the elements and return result
    return tuple([recursive_bubble_ands_up(subexpr) for subexpr in expr])

def is_atomic(expr):
    """ Return True if expr is an undividable component 
    (operator or value, like 'and' or 'a'). """
    # not sure how this should be implemented in the real case, 
    #  if you're not really just working on strings
    return isinstance(expr, str)
</snippet></ROW><ROW><id>10266320</id><snippet>&gt;&gt;&gt; tmp.recursive_bubble_ands_up(('pred', ('and', 'a', 'b'), 'x'))
('and', ('pred', 'a', 'x'), ('pred', 'b', 'x'))
&gt;&gt;&gt; tmp.recursive_bubble_ands_up(( ('and', 'a', 'b'), 'x'))
('and', ('a', 'x'), ('b', 'x'))
&gt;&gt;&gt; tmp.recursive_bubble_ands_up(('not', ('p', ('and', 'a', 'b'), 'x') ))
('not', ('and', ('p', 'a', 'x'), ('p', 'b', 'x')))
</snippet></ROW><ROW><id>10266320</id><snippet>not</snippet></ROW><ROW><id>10266320</id><snippet>&gt;&gt;&gt; tmp.recursive_bubble_ands_up(((('and', 'a', 'b'), 'x'), 'y' ))
(('and', ('a', 'x'), ('b', 'x')), 'y')
&gt;&gt;&gt; tmp.recursive_bubble_ands_up((('and', ('a', 'x'), ('b', 'x')), 'y'))
('and', (('a', 'x'), 'y'), (('b', 'x'), 'y'))
</snippet></ROW><ROW><id>10266320</id><snippet>def repeat_bubble_until_finished(expr):
    """ Repeat recursive_bubble_ands_up until there's no change 
    (i.e. until all possible bubbling has been done). 
    """
    while True:
        old_expr = expr
        expr = recursive_bubble_ands_up(old_expr)
        if expr == old_expr:
            break
    return expr
</snippet></ROW><ROW><id>10266320</id><snippet>&gt;&gt;&gt; tmp.recursive_bubble_ands_up(('not', ('p', ('and', 'a', 'b'), 'x')))
('not', ('and', ('p', 'a', 'x'), ('p', 'b', 'x')))
&gt;&gt;&gt; tmp.repeat_bubble_until_finished(('not', ('p', ('and', 'a', 'b'), 'x')))
('and', ('not', ('p', 'a', 'x')), ('not', ('p', 'b', 'x')))
</snippet></ROW><ROW><id>10266320</id><snippet>recursive_bubble_ands_up</snippet></ROW><ROW><id>10266320</id><snippet>recursive_bubble_ands_up</snippet></ROW><ROW><id>10266320</id><snippet>repeat_bubble_until_finished</snippet></ROW><ROW><id>10267406</id><snippet>panel.SetSizerAndFit(grid)
</snippet></ROW><ROW><id>10267406</id><snippet>sizer</snippet></ROW><ROW><id>10267406</id><snippet>panel</snippet></ROW><ROW><id>10267406</id><snippet>frame</snippet></ROW><ROW><id>10267406</id><snippet>    #panel.CreateStatusBar()
    vSizer.Add(grid, 0, wx.ALL, 5)
    panel.SetSizerAndFit(grid)
    self.CreateStatusBar()
    self.SetInitialSize()
    self.Show(True)
</snippet></ROW><ROW><id>10267734</id><snippet>MyBaseObject</snippet></ROW><ROW><id>10267734</id><snippet>signal</snippet></ROW><ROW><id>10267734</id><snippet>definition</snippet></ROW><ROW><id>10267777</id><snippet>&lt;&lt;Set key="PythonCode"&gt;&lt;![CDATA[ 

YOUR CODE HERE

]]&gt;&lt;/Set&gt;
</snippet></ROW><ROW><id>10267827</id><snippet>range([start], stop[, step])
</snippet></ROW><ROW><id>10267827</id><snippet>for(..; ..; ..)</snippet></ROW><ROW><id>10267827</id><snippet>for(int i = start; i != stop; i += step)
</snippet></ROW><ROW><id>10267827</id><snippet>&gt;&gt;&gt; range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; range(1, 11)
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&gt;&gt;&gt; range(0, 30, 5)
[0, 5, 10, 15, 20, 25]
&gt;&gt;&gt; range(0, 10, 3)
[0, 3, 6, 9]
&gt;&gt;&gt; range(0, -10, -1)
[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
&gt;&gt;&gt; range(0)
[]
&gt;&gt;&gt; range(1, 0)
[]
</snippet></ROW><ROW><id>10267949</id><snippet>-e hg+https://bitbucket.org/etienned/pil-2009-raclette/#egg=PIL
</snippet></ROW><ROW><id>10267949</id><snippet>       --------------------------------------------------------------------
       PIL 1.2a0 SETUP SUMMARY
       --------------------------------------------------------------------
       version       1.2a0
       platform      Python 2.7.2 (default, Oct 31 2011, 16:22:04)
                     [GCC 4.4.3] on linux2
       --------------------------------------------------------------------
       *** TKINTER support not available
       --- JPEG support available
       *** WEBP support not available
       --- ZLIB (PNG/ZIP) support available
       --- FREETYPE2 support available
       --- LITTLECMS support available
       --------------------------------------------------------------------
</snippet></ROW><ROW><id>10267963</id><snippet>or</snippet></ROW><ROW><id>10267963</id><snippet>True</snippet></ROW><ROW><id>10267963</id><snippet>i[-4:] == ('.png' or '.jpg' or 'jpeg')
</snippet></ROW><ROW><id>10267963</id><snippet>i[-4:]</snippet></ROW><ROW><id>10267963</id><snippet>('.png' or '.jpg' or 'jpeg') 
</snippet></ROW><ROW><id>10267963</id><snippet>True</snippet></ROW><ROW><id>10267963</id><snippet>True</snippet></ROW><ROW><id>10267963</id><snippet>True</snippet></ROW><ROW><id>10267963</id><snippet>True</snippet></ROW><ROW><id>10267963</id><snippet>False</snippet></ROW><ROW><id>10267963</id><snippet>'.png'</snippet></ROW><ROW><id>10267963</id><snippet>[i for i in os.listdir('.') if i[-4:] in ('.png', '.jpg', 'jpeg')]
</snippet></ROW><ROW><id>10267963</id><snippet>[i for i in os.listdir('.') if os.path.splitext(i)[1] in ('.png','.jpg','.jpeg')]
</snippet></ROW><ROW><id>10267987</id><snippet>TypeError</snippet></ROW><ROW><id>10267987</id><snippet>def numeric_operation(arg):
   # Do numeric things

try: 
  numeric_operation("abc")
except TypeError:
  print("That was supposed to be numeric.")
</snippet></ROW><ROW><id>10268036</id><snippet>#! /usr/bin/python
#filename modify_hob.py

# Open the file with filenames list.
with open('filenames.txt') as list_f:

    # Iterate over the lines, each line represents a file name.
    for filename in list_f:

        # Rewrite its content.
        with open(filename) as f:
            content = f.read()
        with open(filename, 'w') as f:
            f.write(content.replace('.txt', '.csv'))
</snippet></ROW><ROW><id>10268036</id><snippet>f</snippet></ROW><ROW><id>10268036</id><snippet>filename.txt</snippet></ROW><ROW><id>10268036</id><snippet>fileinput</snippet></ROW><ROW><id>10268076</id><snippet>grid_remove</snippet></ROW><ROW><id>10268076</id><snippet>grid()</snippet></ROW><ROW><id>10268123</id><snippet>container_frame.pack_propagate(False)</snippet></ROW><ROW><id>10268123</id><snippet>container_frame.pack(side="top", fill="both", expand=True)
</snippet></ROW><ROW><id>10268139</id><snippet>networkx.draw_circular(G)</snippet></ROW><ROW><id>10268139</id><snippet>import networkx as nx
import matplotlib.pyplot as plt

G=nx.DiGraph()
R=[('S0','S1'),('S1','S2'),('S1','S7'),('S0','S7')] 

G.add_edges_from(R)

# Calculate layout and get all positions
pos = nx.circular_layout(G)

# Draw everything
nx.draw_networkx_nodes(G, pos)
nx.draw_networkx_edges(G, pos)
nx.draw_networkx_labels(G, pos)
nx.draw_networkx_edge_labels(G, pos, 
    {
        ('S0', 'S1'): 'edge1',
        ('S1', 'S2'): 'edge2',
        ('S1', 'S7'): 'edge3',
        ('S0', 'S7'): 'edge4'
    }
)

plt.axis('off')
plt.savefig("path.png");
plt.show()
</snippet></ROW><ROW><id>10268164</id><snippet>reshape</snippet></ROW><ROW><id>10268164</id><snippet>&gt;&gt;&gt; def shape_preserving_mult(x, y):
...     return (x.reshape((-1,)) * y.reshape((-1))).reshape(x.shape)
... 
</snippet></ROW><ROW><id>10268164</id><snippet>&gt;&gt;&gt; def shape_preserving_mult(x, y):
...     return x * y.reshape(x.shape)
... 
&gt;&gt;&gt; shape_preserving_mult(x, y)
array([[ 0],
       [ 1],
       [ 4],
       [ 9],
       [16]])
&gt;&gt;&gt; shape_preserving_mult(x, y.T)
array([[ 0],
       [ 1],
       [ 4],
       [ 9],
       [16]])
&gt;&gt;&gt; shape_preserving_mult(x.T, y)
array([[ 0,  1,  4,  9, 16]])
&gt;&gt;&gt; shape_preserving_mult(x.T, y.T)
array([[ 0,  1,  4,  9, 16]])
</snippet></ROW><ROW><id>10268164</id><snippet>(1, 4)</snippet></ROW><ROW><id>10268164</id><snippet>(4,)</snippet></ROW><ROW><id>10268164</id><snippet>&gt;&gt;&gt; x = numpy.arange(5).reshape((5, 1))
&gt;&gt;&gt; y = numpy.arange(5)
&gt;&gt;&gt; x.shape
(5, 1)
&gt;&gt;&gt; x.T.shape
(1, 5)
&gt;&gt;&gt; y * x.T
array([[ 0,  1,  4,  9, 16]])
</snippet></ROW><ROW><id>10268164</id><snippet>a</snippet></ROW><ROW><id>10268164</id><snippet>a.T</snippet></ROW><ROW><id>10268164</id><snippet>T</snippet></ROW><ROW><id>10268164</id><snippet>(5,)</snippet></ROW><ROW><id>10268164</id><snippet>&gt;&gt;&gt; def transposed_mult(x, y):
...     return (x.T * y).T
... 
&gt;&gt;&gt; transposed_mult(x, y)
array([[ 0],
       [ 1],
       [ 4],
       [ 9],
       [16]])
</snippet></ROW><ROW><id>10268164</id><snippet>(1, 5)</snippet></ROW><ROW><id>10268164</id><snippet>&gt;&gt;&gt; transposed_mult(x.T, y)
array([[ 0,  0,  0,  0,  0],
       [ 0,  1,  2,  3,  4],
       [ 0,  2,  4,  6,  8],
       [ 0,  3,  6,  9, 12],
       [ 0,  4,  8, 12, 16]])
</snippet></ROW><ROW><id>10268164</id><snippet>transposed_mult</snippet></ROW><ROW><id>10268315</id><snippet>def set_active_border(self, window):
    border_color = self.colormap.alloc_named_color(\
        "#ff00ff").pixel
    window.configure(border_width = 2)
    window.change_attributes(None,border_pixel=border_color,
         border_width = 2)
    self.dpy.sync()
</snippet></ROW><ROW><id>10268315</id><snippet>def set_active_border(self, window):
    border_color = self.colormap.alloc_named_color(\
        "#ff00ff").pixel
    window.configure(border_width = 2)
    window.change_attributes(None,border_pixel=border_color)
    self.dpy.sync()
</snippet></ROW><ROW><id>10268336</id><snippet>Dispach</snippet></ROW><ROW><id>10268336</id><snippet>Dispatch</snippet></ROW><ROW><id>10268548</id><snippet> a="\u2026"
</snippet></ROW><ROW><id>10268548</id><snippet>decode('unicode-escape')</snippet></ROW><ROW><id>10268548</id><snippet>a="\u2026"
print repr(a)
print repr(a.decode('unicode-escape'))

## '\\u2026'
## u'\u2026'
</snippet></ROW><ROW><id>10268598</id><snippet>with</snippet></ROW><ROW><id>10268598</id><snippet>__enter__</snippet></ROW><ROW><id>10268598</id><snippet>__exit__</snippet></ROW><ROW><id>10268598</id><snippet>&gt;&gt;&gt; class DummyManager(object):
...     def __enter__(self):
...         print 'entering with block!'
...         return 'foo'
...     def __exit__(self, exc_type, exc_val, exc_tb):
...         print 'exiting with block!'
...         print 'this is exception info, if an exception was raised:'
...         print exc_type, exc_val, exc_tb
... 
&gt;&gt;&gt; with DummyManager() as dummy:
...     print dummy
... 
entering with block!
foo
exiting with block!
this is exception info, if an exception was raised:
None None None
</snippet></ROW><ROW><id>10268598</id><snippet>__enter__</snippet></ROW><ROW><id>10268598</id><snippet>__exit__</snippet></ROW><ROW><id>10268598</id><snippet>with</snippet></ROW><ROW><id>10268598</id><snippet>with</snippet></ROW><ROW><id>10268598</id><snippet>loadTask</snippet></ROW><ROW><id>10268598</id><snippet>saveTask</snippet></ROW><ROW><id>10268598</id><snippet>x.open(...)</snippet></ROW><ROW><id>10268598</id><snippet>x.close()</snippet></ROW><ROW><id>10268598</id><snippet>__enter__</snippet></ROW><ROW><id>10268598</id><snippet>__exit__</snippet></ROW><ROW><id>10268598</id><snippet>def loadTreeFrom(self, source, sourcePath):
    if source not in ('CSV', 'DB'):
        raise AttributeError('Unknown source : supported sources are CSV or DB')

    dao = None
    if source == 'CSV':
        dao = CSV            # dao just a reference to the class now
    elif source == "DB":
        dao = SQLite

    with dao() as tasks:
        #populate the tasks first
        for task in tasks:
            self.tasks[unicode(task.id)] = task

        # then populate the dependencies
        for item in self.tasks.iteritems():
            ancestorsID = dao.loadPredecessorsID(item[1])
            self.addDependencies(item[1], ancestorsID)
</snippet></ROW><ROW><id>10268598</id><snippet>loadPredecessorsID</snippet></ROW><ROW><id>10268707</id><snippet>class TypeTwoEvent(Event):

    def __init__(self, level=None, *args, **kwargs):
        super(TypeTwoEvent, self).__init__(*args, **kwargs)
        self.sr1 = level
        self.state = STATE_EVENT_TWO

    def __repr__(self):
        return  "Type Two event (Level @: {0:.2f})".format(self.sr1)
</snippet></ROW><ROW><id>10268707</id><snippet>__init__</snippet></ROW><ROW><id>10268707</id><snippet>__init__</snippet></ROW><ROW><id>10268707</id><snippet>super(ClassName, self).__init__(arguments, that, goes, to, parents)
</snippet></ROW><ROW><id>10268707</id><snippet>*args</snippet></ROW><ROW><id>10268707</id><snippet>**kwargs</snippet></ROW><ROW><id>10268707</id><snippet>__init__</snippet></ROW><ROW><id>10268740</id><snippet>fatal: No names found, cannot describe anything</snippet></ROW><ROW><id>10268740</id><snippet>git describe --tags</snippet></ROW><ROW><id>10268740</id><snippet>git describe --all</snippet></ROW><ROW><id>10268740</id><snippet>git describe</snippet></ROW><ROW><id>10268913</id><snippet>function utf8_length(str)
        return select(2, string.gsub(str, "[^\128-\193]", ""));
end
</snippet></ROW><ROW><id>10269001</id><snippet>import urllib
</snippet></ROW><ROW><id>10269001</id><snippet>urllib.parse</snippet></ROW><ROW><id>10269001</id><snippet>import urllib.parse
</snippet></ROW><ROW><id>10269001</id><snippet>import urllib</snippet></ROW><ROW><id>10269674</id><snippet>complement = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'}
s = "AAAAAAAAAACCCCCCCCCCTTTTTTTTTTGGGGGGGGGG"
"".join(complement[c] for c in s[-20:-10])
</snippet></ROW><ROW><id>10269674</id><snippet>bc = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A', 'N':'N'}

f = open('chr22.fa')
l = ''.join(line.strip() for line in f)
f.seek(0)

for line in f:
    fields = line.split('\t')
    gene_ID, chr, strand = fields[:2]

    start = int(fields[3])
    end = int(fields[4])

    if strand == '-':
        start, end = -(start + 1), -(end + 1)

    geneseq = ''.join(bc[base.upper()] for base in l[start:end])
</snippet></ROW><ROW><id>10269715</id><snippet>tcpdump</snippet></ROW><ROW><id>10269715</id><snippet>tcpdump</snippet></ROW><ROW><id>10269715</id><snippet>tcpdump</snippet></ROW><ROW><id>10269715</id><snippet>-w</snippet></ROW><ROW><id>10269715</id><snippet>send</snippet></ROW><ROW><id>10269715</id><snippet>send</snippet></ROW><ROW><id>10269715</id><snippet>connect()</snippet></ROW><ROW><id>10269715</id><snippet>send()</snippet></ROW><ROW><id>10269715</id><snippet>connect()</snippet></ROW><ROW><id>10269828</id><snippet>sorted(lst, key=lambda s: s.lower())
</snippet></ROW><ROW><id>10269828</id><snippet>lower</snippet></ROW><ROW><id>10269828</id><snippet>&gt;&gt;&gt; lst = ['Aden', u'abe1']
&gt;&gt;&gt; sorted(lst)
['Aden', u'abe1']
&gt;&gt;&gt; sorted(lst, key=lambda s: s.lower())
[u'abe1', 'Aden']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10269848</id><snippet>import pandas, re, numpy as np

def load_file(filename, num_cols, delimiter='\t'):
    data = None
    try:
        data = np.load(filename + '.npy')
    except:
        splitter = re.compile(delimiter)

        def items(infile):
            for line in infile:
                for item in splitter.split(line):
                    yield item

        with open(filename, 'r') as infile:
            data = np.fromiter(items(infile), float64, -1)
            data = data.reshape((-1, num_cols))
            np.save(filename, data)

    return pandas.DataFrame(data)
</snippet></ROW><ROW><id>10269864</id><snippet>def onchange_form_type(self, cr, uid, ids, form_type, context=None):

    val={}
    flag=0
    if form_type == 'form_c':
        flag="1"
    val = { 'flag': flag }
 return {'value': val}
</snippet></ROW><ROW><id>10269877</id><snippet>rstrip()</snippet></ROW><ROW><id>10269877</id><snippet>In [9]: s = {'Hello\n','World\n'}

In [10]: s
Out[10]: set(['World\n', 'Hello\n'])


In [12]: for i in s:
   ....:     print i
World

Hello


In [13]: for i in s:
   ....:     print i.rstrip()

World
Hello
</snippet></ROW><ROW><id>10269877</id><snippet>with open('data.txt') as infp:
   for line in infp:
       line = line.rstrip()
       # rest of processing
</snippet></ROW><ROW><id>10269904</id><snippet>def getArea(self):
    if (self.type == "Square"):
        return self.width * self.height
    elif (self.type == "Circle"):
        return math.pi*(self.radius**2)
</snippet></ROW><ROW><id>10269904</id><snippet>Rectangle</snippet></ROW><ROW><id>10269904</id><snippet>Circle</snippet></ROW><ROW><id>10269904</id><snippet>from abc import ABCMeta, abstractmethod

class Shape: 
  __metaclass__ = ABCMeta

  @abstractmethod
  def getArea(self):
    pass

class Rectangle (Shape):
  def getArea(self):
    return self.width * self.height

class Circle (Shape):
  def getArea(self):
    return math.pi*(self.radius**2)
</snippet></ROW><ROW><id>10269904</id><snippet>def Shape:
  def __init__(self, centrePoint, colour, **kwargs):
    self.centrePoint = centrePoint
    self.colour      = colour
    self.width       = kwargs.get('width')
    self.height      = kwargs.get('height')
    self.radius      = kwargs.get('radius')
</snippet></ROW><ROW><id>10269904</id><snippet>rect = Rectangle(0, "red", width=100, height=20)
circ = Circle(0, "blue", radius=5)
</snippet></ROW><ROW><id>10269904</id><snippet>kwargs</snippet></ROW><ROW><id>10269904</id><snippet>&gt;&gt;&gt; rect = Rectangle(...)
&gt;&gt;&gt; print isinstance(rect, Rectangle)
True
&gt;&gt;&gt; print isinstance(rect, Circle)
False
</snippet></ROW><ROW><id>10270106</id><snippet>freearg</snippet></ROW><ROW><id>10270106</id><snippet>%typemap(freearg) DataWrap *buff {
    delete $1-&gt;data;
}
</snippet></ROW><ROW><id>10270106</id><snippet>delete $1;</snippet></ROW><ROW><id>10270106</id><snippet>delete $1-&gt;data</snippet></ROW><ROW><id>10270106</id><snippet>fun1</snippet></ROW><ROW><id>10270106</id><snippet>/MD</snippet></ROW><ROW><id>10270106</id><snippet>new</snippet></ROW><ROW><id>10270106</id><snippet>x.cpp</snippet></ROW><ROW><id>10270106</id><snippet>freearg</snippet></ROW><ROW><id>10270106</id><snippet>_x.pyd: x_wrap.cxx x.dll
    cl /MD /nologo /LD /Zi /EHsc /W4 x_wrap.cxx /Id:\dev\python27\include -link /LIBPATH:d:\dev\python27\libs /OUT:_x.pyd x.lib

x.dll: x.cpp x.h
    cl /MD /nologo /Zi /LD /EHsc /W4 x.cpp

x_wrap.cxx: x.h x.i
    swig -python -c++ x.i
</snippet></ROW><ROW><id>10270106</id><snippet>%module x

%begin %{
#pragma warning(disable:4127 4211 4706)
%}

%{
    #include "x.h"
%}

%include &lt;windows.i&gt;

%typemap(in) (const char *szInBuffer,unsigned int inSize) {
   if (!PyString_Check($input)) {
       PyErr_SetString(PyExc_ValueError, "Expecting a string");
       return NULL;
   }
   $1 = PyString_AsString($input);
   $2 = PyString_Size($input);
}

%typemap(in, numinputs=0) DataWrap* buff (DataWrap temp) {
   $1 = &amp;temp;
}

%typemap(argout) DataWrap* buff {
    int byteorder = -1;
    $result = PyUnicode_DecodeUTF16((const char*)($1-&gt;data), ($1-&gt;size)*sizeof(wchar_t), NULL, &amp;byteorder);
    delete [] $1-&gt;data;
}

%include "x.h"
</snippet></ROW><ROW><id>10270106</id><snippet>#ifdef API_EXPORTS
#   define API __declspec(dllexport)
#else
#   define API __declspec(dllimport)
#endif

struct DataWrap
{
    wchar_t* data;
    int size;
};

extern "C" API void fun1(const char* szInBuffer, unsigned int inSize, DataWrap* buff);
</snippet></ROW><ROW><id>10270106</id><snippet>#include &lt;stdlib.h&gt;

#define API_EXPORTS
#include "x.h"

API void fun1(const char* szInBuffer, unsigned int inSize, DataWrap* buff)
{
    unsigned int i;
    buff-&gt;size = inSize;
    buff-&gt;data = new wchar_t[inSize];
    for(i = 0; i &lt; inSize; i++)
        buff-&gt;data[i] = szInBuffer[i];
}
</snippet></ROW><ROW><id>10270106</id><snippet>Python 2.7.3 (default, Apr 10 2012, 23:31:26) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import x
&gt;&gt;&gt; x.fun1('abc')
u'abc'
</snippet></ROW><ROW><id>10270393</id><snippet>def change(s):
    return s + "!"
</snippet></ROW><ROW><id>10270393</id><snippet>word = 'holiday'
print change(word)
</snippet></ROW><ROW><id>10270393</id><snippet>word = 'holiday'
word = change(word)
print word
</snippet></ROW><ROW><id>10270393</id><snippet>s</snippet></ROW><ROW><id>10270413</id><snippet>    self.e1.bind("&lt;Return&gt;", self._on_return)
</snippet></ROW><ROW><id>10270413</id><snippet>_on_return</snippet></ROW><ROW><id>10270413</id><snippet>def __init__(self, master):
    ...
    self.maintext = Label(master, fg="blue")
    ...

def _on_return(self, event):
    self.maintext.configure(text="Welcome, %s" % self.e1.get())
</snippet></ROW><ROW><id>10270536</id><snippet>&gt;&gt;&gt; from functools import lru_cache
&gt;&gt;&gt; x = lru_cache()(lambda a,b:a+b)
&gt;&gt;&gt; x(2,3)
5
&gt;&gt;&gt; x(4,2)
6
&gt;&gt;&gt; x(2,3)
5
&gt;&gt;&gt; x.cache_info()
CacheInfo(hits=1, misses=2, maxsize=100, currsize=2)
</snippet></ROW><ROW><id>10270542</id><snippet>&gt;&gt;&gt; def ipAddressPrettyIn(self, value):
...   return origIpAddressPrettyIn(self, value[:4])
...
&gt;&gt;&gt; origIpAddressPrettyIn = v2c.IpAddress.prettyIn
&gt;&gt;&gt; v2c.IpAddress.prettyIn = ipAddressPrettyIn
&gt;&gt;&gt;
&gt;&gt;&gt; msg, rest = decoder.decode(wholeMsg, asn1Spec=v2c.Message())
&gt;&gt;&gt; print msg.prettyPrint()
Message:
version='version-2'
 community=public
 data=PDUs:
 response=ResponsePDU:
  request-id=6564368
  error-status='noError'
  error-index=0
  variable-bindings=VarBindList:
   VarBind:
    name=1.3.6.1.2.1.4.24.4.1.2.169.254.0.0.0.0.255.255.0.0.0.0.0
    =_BindValue:
     value=ObjectSyntax:
       application-wide=ApplicationSyntax:
       ipAddress-value=0.0.255.255
</snippet></ROW><ROW><id>10270605</id><snippet>print</snippet></ROW><ROW><id>10270605</id><snippet>for i in range(len(Adapters)):
    print Adapters[i]
</snippet></ROW><ROW><id>10270668</id><snippet>import rpyc
conn = rpyc.classic.connect("localhost")
data_obj = conn.modules.lazyme.AwesomeObject("ABCDE")
print data_obj.calculate(10)
</snippet></ROW><ROW><id>10270668</id><snippet># wrap the remote function with async(), which turns the invocation asynchronous
acalc = rpyc.async(data_obj.calculate)
res = acalc(10)
print res.ready, res.value
</snippet></ROW><ROW><id>10270668</id><snippet>Node</snippet></ROW><ROW><id>10270668</id><snippet>Sink</snippet></ROW><ROW><id>10270668</id><snippet>Distributor</snippet></ROW><ROW><id>10270668</id><snippet>Pool</snippet></ROW><ROW><id>10270668</id><snippet>multiprocessing</snippet></ROW><ROW><id>10270668</id><snippet>from multiprocessing import Pool
p = Pool(5)
def f(x):
     return x*x
print p.map(f, [1,2,3])
</snippet></ROW><ROW><id>10270668</id><snippet>print p.map_async(f, [1,2,3])
</snippet></ROW><ROW><id>10271078</id><snippet>x</snippet></ROW><ROW><id>10271078</id><snippet>def f():
    f.x = 0
    def g():
        h()
    def h():
        f.x += 1
        print(f.x)
    g()
</snippet></ROW><ROW><id>10271078</id><snippet>nonlocal</snippet></ROW><ROW><id>10271189</id><snippet>&gt;&gt;&gt; a = (1, 2, [])
&gt;&gt;&gt; a[2].append(1000)
&gt;&gt;&gt; a
(1, 2, [1000])
</snippet></ROW><ROW><id>10271189</id><snippet>deepcopy</snippet></ROW><ROW><id>10271189</id><snippet>copy</snippet></ROW><ROW><id>10271189</id><snippet>&gt;&gt;&gt; from copy import copy, deepcopy

&gt;&gt;&gt; a = (1, 2, [])
&gt;&gt;&gt; c = copy(a)
&gt;&gt;&gt; d = deepcopy(a)

&gt;&gt;&gt; a[2].append(1000)

&gt;&gt;&gt; c
(1, 2, [1000])
&gt;&gt;&gt; d
(1, 2, [])
</snippet></ROW><ROW><id>10271404</id><snippet>from itertools import product

def nodes_iter(n, k):
    """ returns generator (lazy iterator) rather than creating whole list """
    return product(range(k+1),repeat=n)
</snippet></ROW><ROW><id>10271404</id><snippet>for node in nodes_iter(3,1):
    print node


(0, 0, 0)
(0, 0, 1)
(0, 1, 0)
(0, 1, 1)
(1, 0, 0)
(1, 0, 1)
(1, 1, 0)
(1, 1, 1)
</snippet></ROW><ROW><id>10271430</id><snippet>&gt;&gt;&gt; tuple = ('one', 'two', 'one', 'two', 'one')
&gt;&gt;&gt; ['&lt;strong&gt;%s&lt;/strong&gt;' % tuple[i] if i%2 else tuple[i] for i in range(len(tuple))]
['one', '&lt;strong&gt;two&lt;/strong&gt;', 'one', '&lt;strong&gt;two&lt;/strong&gt;', 'one']
</snippet></ROW><ROW><id>10271504</id><snippet>zip()</snippet></ROW><ROW><id>10271504</id><snippet>[a*b for a,b in zip(lista,listb)]
</snippet></ROW><ROW><id>10272023</id><snippet>from collections import MutableSequence
def multiply(list_):
    for index, item in enumerate(list_):
        if isinstance(item, MutableSequence):
            multiply(item)
        else:
            list_[index] *= 2
</snippet></ROW><ROW><id>10272023</id><snippet>isinstance(item, list)</snippet></ROW><ROW><id>10272023</id><snippet>isinstance(item, MutableSequence)</snippet></ROW><ROW><id>10272217</id><snippet>sys</snippet></ROW><ROW><id>10272217</id><snippet>__builtins__</snippet></ROW><ROW><id>10272312</id><snippet>with open(targetpath, 'w+') as targetfile:
   ..code that writes to targetfile
</snippet></ROW><ROW><id>10272358</id><snippet>L[i:i] = L[a:b]</snippet></ROW><ROW><id>10272358</id><snippet>L[a:b] = []</snippet></ROW><ROW><id>10272358</id><snippet>insert</snippet></ROW><ROW><id>10272358</id><snippet>pop</snippet></ROW><ROW><id>10272358</id><snippet>+</snippet></ROW><ROW><id>10272358</id><snippet>L[:]</snippet></ROW><ROW><id>10272358</id><snippet>    # items:   0 | 1   2   3 | 4   5   6   7 | 8   9
    #            a   span1   b     span2     c
    # pos:       1           4               8

    # Result:
    #          0 | 4   5   6   7 | 1   2   3 | 8   9
    #            a     span2         span2   c
</snippet></ROW><ROW><id>10272358</id><snippet>a = start</snippet></ROW><ROW><id>10272358</id><snippet>b = end = start + length</snippet></ROW><ROW><id>10272358</id><snippet>c</snippet></ROW><ROW><id>10272358</id><snippet>|</snippet></ROW><ROW><id>10272358</id><snippet>span1</snippet></ROW><ROW><id>10272358</id><snippet>span2</snippet></ROW><ROW><id>10272358</id><snippet>b = start</snippet></ROW><ROW><id>10272358</id><snippet>c = end</snippet></ROW><ROW><id>10272358</id><snippet>a</snippet></ROW><ROW><id>10272358</id><snippet>span1</snippet></ROW><ROW><id>10272358</id><snippet>span2</snippet></ROW><ROW><id>10272358</id><snippet>def inplace_shift(L, start, length, pos):
    if pos &gt; start + length:
        (a, b, c) = (start, start + length, pos)
    elif pos &lt; start:
        (a, b, c) = (pos, start, start + length)
    else:
        raise ValueError("Cannot shift a subsequence to inside itself")
    if not (0 &lt;= a &lt; b &lt; c &lt;= len(L)):
        msg = "Index check 0 &lt;= {0} &lt; {1} &lt; {2} &lt;= {3} failed."
        raise ValueError(msg.format(a, b, c, len(L)))

    span1, span2 = (b - a, c - b)
    if span1 &lt; span2:
        tmp = L[a:b]
        L[a:a + span2] = L[b:c]
        L[c - span1:c] = tmp
    else:
        tmp = L[b:c]
        L[a + span2:c] = L[a:b]
        L[a:a + span2] = tmp
</snippet></ROW><ROW><id>10272358</id><snippet>end</snippet></ROW><ROW><id>10272358</id><snippet>start</snippet></ROW><ROW><id>10272358</id><snippet>length</snippet></ROW><ROW><id>10272358</id><snippet>Nick Craig-Wood: 100 loops, best of 3: 8.58 msec per loop 
vivek: 100 loops, best of 3: 4.36 msec per loop
PaulP.R.O. (deleted?): 1000 loops, best of 3: 838 usec per loop
unbeli: 1000 loops, best of 3: 264 usec per loop
lazyr: 10000 loops, best of 3: 44.6 usec per loop
</snippet></ROW><ROW><id>10272473</id><snippet>import re

def string_fix(filename, dict):
    filename = filename.replace('.', ' ')
    for key, val in dict.items():
        filename = re.sub(key, val, filename, flags=re.IGNORECASE)
    return filename

dict = {
         r'Legal[\s\-_]?Studies' : 'Legal Studies',
         r'Media[\s\-_]?Studies' : 'Media Studies',
         r'dts' : 'DTS',
         r'hd[\s\-_]?dvd': 'HD DVD',
         r'blu[\s\-_]?ray' : 'Blu-ray',
         r'unix' : 'UNIX',
         r'aac[\s\-_]?2[\.]?0' : 'AAC2.0',
         r'xvid' : 'XviD',
         r'computer[\s\-_]?science' : 'Computer Science'
     }

string_1 = 'legal.studies.131.race.relations.in.the.United.States.'
string_2 = 'mediastudies the triumph of bluray over hddvd'
string_3 = 'computer Science Microsoft vs unix'
string_4 = 'Perception - metamers dts'
string_5 = 'Perception - Cue Integration - flashing dot example aac20 xvid'

print(string_fix(string_1, dict))
print(string_fix(string_2, dict))
print(string_fix(string_3, dict))
print(string_fix(string_4, dict))
print(string_fix(string_5, dict))
</snippet></ROW><ROW><id>10272662</id><snippet>SendFrame()</snippet></ROW><ROW><id>10272662</id><snippet>ReceiveFrame()</snippet></ROW><ROW><id>10272662</id><snippet>DeliverData()</snippet></ROW><ROW><id>10272662</id><snippet>MakeFrame()</snippet></ROW><ROW><id>10272662</id><snippet>ExtractData()</snippet></ROW><ROW><id>10272662</id><snippet>pyInstaller</snippet></ROW><ROW><id>10272662</id><snippet>py2exe</snippet></ROW><ROW><id>10272662</id><snippet>socket.sendall()</snippet></ROW><ROW><id>10272662</id><snippet>socket.recv()</snippet></ROW><ROW><id>10272662</id><snippet>SendFrame()</snippet></ROW><ROW><id>10272662</id><snippet>ReceiveFrame()</snippet></ROW><ROW><id>10272662</id><snippet>ExtractData()</snippet></ROW><ROW><id>10272662</id><snippet>DeliverData()</snippet></ROW><ROW><id>10272662</id><snippet>MESSAGE_FRAME_START = '@'
MESSAGE_FRAME_END = '#'

def process_raw_socket_message_stream(raw_message_stream):
    message_list = []
    cmd = ''
    last_footer_idx = message_string.rfind(MESSAGE_FRAME_END)
    cmd_str_len = len(message_string)
    byte_cnt = 0
    while (byte_cnt &lt;= last_footer_idx):
        cmd_chr = message_string[byte_cnt]
        cmd += cmd_chr
        if cmd_chr == MESSAGE_FRAME_START:
            cmd = MESSAGE_FRAME_START
        elif cmd_chr == MESSAGE_FRAME_END:
            message_list.append(cmd)

        byte_cnt += 1

    # Remove the parsed data
    if last_footer_idx &gt; 0:
        message_string = message_string[last_footer_idx+1:]

    return message_list, message_string

def add_message_frames(unframed_message):
    return MESSAGE_FRAME_START + unframed_message + MESSAGE_FRAME_END

def remove_message_frames(framed_message):
    clean_message = framed_message.lstrip(MESSAGE_FRAME_START)
    clean_message = clean_message.rstrip(MESSAGE_FRAME_END)
    return clean_message

def process_messsage(clean_message):
    # Do what needs to be done
    pass

def send_data(mysocket, payload):
    framed_payload = add_message_frames(payload)
    mysocket.sendall(framed_payload)

def receive_data(mysocket, byte_size=1024):
    data = ''
    while(1):
        try: # Wait for data
            data += mysocket.recv(byte_size)
            if(data != '') and (data != None):
                # Decode all messsages
                message_list, remaining_data = process_raw_socket_message_stream(data)

                # Process all of the messages
                for messsage in message_list:
                    process_messsage(remove_message_frames(message))

                # Store the remaining data
                data = remaining_data
        except:
            print "Unexpected Error"
</snippet></ROW><ROW><id>10272927</id><snippet>ar = [('four' if i % 4 == 0 else ('six' if i % 6 == 0 else i)) for i in range(1, n)]
</snippet></ROW><ROW><id>10272927</id><snippet>n = 30</snippet></ROW><ROW><id>10272927</id><snippet>[1, 2, 3, 'four', 5, 'six', 7, 'four', 9, 10, 11, 'four', 13, 14, 15, 'four', 17, 'six', 19, 'four', 21, 22, 23, 'four', 25, 26, 27, 'four', 29]
</snippet></ROW><ROW><id>10272927</id><snippet>CONDITIONS = [(lambda i: i % 4 == 0, "four"), (lambda i: i % 6 == 0, "six"),
              (lambda i: i % 7 == 0, "seven")]

def apply_conditions(i):
    for condition, replacement in CONDITIONS:
        if condition(i):
            return replacement
    return i

ar = map(apply_conditions, range(0, n))
</snippet></ROW><ROW><id>10272967</id><snippet>pylab.cla()</snippet></ROW><ROW><id>10272967</id><snippet>cla()</snippet></ROW><ROW><id>10272967</id><snippet>import matplotlib.pyplot as plt
import numpy as np

images = np.random.uniform(0, 255, size=(40, 50, 50))

fig, ax = plt.subplots()

fig.show()
for image in images:
    ax.imshow(image)
    fig.canvas.draw()
    ax.cla()
</snippet></ROW><ROW><id>10272967</id><snippet>import matplotlib.pyplot as plt
import numpy as np

images = np.random.uniform(0, 255, size=(40, 50, 50))

fig, ax = plt.subplots()

im = ax.imshow(images[0])
fig.show()
for image in images[1:]:
    im.set_data(image)
    fig.canvas.draw()
</snippet></ROW><ROW><id>10272972</id><snippet>[x for x in dict1.keys() if x not in dict2.keys()]
</snippet></ROW><ROW><id>10272978</id><snippet>for k, v in pairs(obj) do
  --Do stuff with k(ey) and v(alue)
end
</snippet></ROW><ROW><id>10273158</id><snippet>os</snippet></ROW><ROW><id>10273158</id><snippet>os.path</snippet></ROW><ROW><id>10273158</id><snippet>shutil</snippet></ROW><ROW><id>10273158</id><snippet>os.walk</snippet></ROW><ROW><id>10273158</id><snippet>shutil.move</snippet></ROW><ROW><id>10273158</id><snippet>import os
import shutil as sh
from collections import defaultdict

DESKTOP = '/home/mac/Desktop'

#This dictionary will contain: &lt;extension&gt;: &lt;list_of_files&gt; mappings
register = defaultdict(list)

#Populate the register
for dir_, dirs, fnames in os.walk('/home/mac/Desktop'):
    for fname in fnames:
        register[fname.rsplit('.', 1)[1]].append(os.path.join(dir_, fname))

#Iterate over the register, creating the directory and moving the files 
#with that extension in it.
for dirname, files in register.iteritems():
    dirname = os.path.join(DESKTOP, dirname)
    if not os.path.exists(dirname):
        os.makedirs(dirname)
    for file_ in files:
        sh.move(file_, dirname)
</snippet></ROW><ROW><id>10273378</id><snippet>A.py</snippet></ROW><ROW><id>10273378</id><snippet>B.py</snippet></ROW><ROW><id>10273378</id><snippet>tv</snippet></ROW><ROW><id>10273378</id><snippet>B</snippet></ROW><ROW><id>10273378</id><snippet>tv</snippet></ROW><ROW><id>10273378</id><snippet>def blitSpecial(surf):
    surf.blit()
</snippet></ROW><ROW><id>10273378</id><snippet>import B

tv = pygame.display.set_mode((256, 256))
B.blitSpecial(tv)
</snippet></ROW><ROW><id>10273378</id><snippet>A.py</snippet></ROW><ROW><id>10273437</id><snippet>from django import template

register = template.Library()

@register.simple_tag
def active(request, pattern):
    path = request.path
    if path == pattern:
        return 'active'
    return ''
</snippet></ROW><ROW><id>10273437</id><snippet>{% load my_tags %}

{% url orders_list as orders %}
&lt;li class="{% active request orders %}"&gt; 
    &lt;a href="{{ orders }}"&gt; Orders &lt;/a&gt; 
&lt;/li&gt;
</snippet></ROW><ROW><id>10273490</id><snippet>import sys, os

opts = (
    'STACKEXCHANGE_CLIENT_ID', 
    'STACKEXCHANGE_CLIENT_SECRET'
)

module = sys.modules[__name__]
for o in opts:
    setattr(module, o, os.getenv(o))
</snippet></ROW><ROW><id>10273490</id><snippet>globals()</snippet></ROW><ROW><id>10273490</id><snippet>_g = globals()
for o in opts:
    _g[o] = os.getenv(o)
</snippet></ROW><ROW><id>10273546</id><snippet>abc.py</snippet></ROW><ROW><id>10273546</id><snippet>abc.pyc</snippet></ROW><ROW><id>10273546</id><snippet>abc</snippet></ROW><ROW><id>10273591</id><snippet>getattr()</snippet></ROW><ROW><id>10273658</id><snippet>import re

def getstring(string):
    testforstring = re.search("\((.*)\)",string)
    if testforstring:
        return testforstring.group(1)
    testforstring = re.search("@(.*?)\s+.*",string)
    if testforstring:
        return testforstring.group(1)
    return None
</snippet></ROW><ROW><id>10273658</id><snippet>&gt;&gt;&gt; print getstring('(hello)')
hello
&gt;&gt;&gt; print getstring('@hello sdfdsf')
hello
</snippet></ROW><ROW><id>10273708</id><snippet>WITH b AS (  
   SELECT bookid
   FROM  (
      SELECT DISTINCT bookid  
      FROM   characterNames  
      WHERE  name='XXX'  

      UNION ALL  
      SELECT DISTINCT bookid  
      FROM   characterNames  
      WHERE  name='YYY'  

      UNION ALL
      SELECT DISTINCT bookid  
      FROM   locations  
      WHERE  locname='ZZZ'  
      ) x
   GROUP  BY bookid
   HAVING count(*) &gt; 1
   )
SELECT bookid, position, 'char' AS what
FROM   b
JOIN   characternames USING (bookid)
WHERE  name = 'XXX'

UNION  ALL
SELECT bookid, position, 'loc' AS what
FROM   b
JOIN   locations USING (bookid)
WHERE  locname = 'YYY'
ORDER  BY bookid, position;
</snippet></ROW><ROW><id>10273708</id><snippet>UNION ALL</snippet></ROW><ROW><id>10273708</id><snippet>UNION</snippet></ROW><ROW><id>10273708</id><snippet>DISTINCT</snippet></ROW><ROW><id>10273708</id><snippet>GROUP BY 1</snippet></ROW><ROW><id>10273708</id><snippet>GROUP BY</snippet></ROW><ROW><id>10273708</id><snippet>DISTINCT bookid</snippet></ROW><ROW><id>10273708</id><snippet>HAVING</snippet></ROW><ROW><id>10273708</id><snippet> HAVING count(*) &gt; 1
</snippet></ROW><ROW><id>10273708</id><snippet>WHERE</snippet></ROW><ROW><id>10273708</id><snippet>EXPLAIN ANALYZE</snippet></ROW><ROW><id>10273708</id><snippet>characterNames</snippet></ROW><ROW><id>10273708</id><snippet>characterNames</snippet></ROW><ROW><id>10273708</id><snippet>sum(hits)</snippet></ROW><ROW><id>10273708</id><snippet>SELECT</snippet></ROW><ROW><id>10273708</id><snippet>WITH b AS (  
   SELECT bookid
   FROM  (
      SELECT bookid
           , max((name='XXX')::int)
           + max((name='YYY')::int) AS hits
      FROM   characterNames  
      WHERE  (name='XXX'
           OR name='YYY')
      GROUP  BY bookid

      UNION ALL
      SELECT DISTINCT bookid, 1 AS hits  
      FROM   locations  
      WHERE  locname='ZZZ'  
      ) x
   GROUP  BY bookid
   HAVING sum(hits) &gt; 1
   )
...
</snippet></ROW><ROW><id>10273708</id><snippet>boolean</snippet></ROW><ROW><id>10273708</id><snippet>integer</snippet></ROW><ROW><id>10273708</id><snippet>0</snippet></ROW><ROW><id>10273708</id><snippet>FALSE</snippet></ROW><ROW><id>10273708</id><snippet>1</snippet></ROW><ROW><id>10273708</id><snippet>TRUE</snippet></ROW><ROW><id>10273708</id><snippet>WITH b AS (  
   SELECT bookid

        , (EXISTS (
            SELECT *
            FROM   characterNames c
            WHERE  c.bookid = b.bookid
            AND    c.name = 'XXX'))::int
        + (EXISTS (
            SELECT *
            FROM   characterNames c
            WHERE  c.bookid = b.bookid
            AND    c.name = 'YYY'))::int AS c_hits

        , (EXISTS (
            SELECT *
            FROM   locations l
            WHERE  l.bookid = b.bookid
            AND    l.locname='ZZZ'))::int AS l_hits
   FROM   books b  
   WHERE  (c_hits + l_hits) &gt; 1
   )
SELECT c.bookid, c.position, 'char' AS what
FROM   b
JOIN   characternames c USING (bookid)
WHERE  b.c_hits &gt; 0
AND    c.name IN ('XXX', 'YYY')

UNION  ALL
SELECT l.bookid, l.position, 'loc' AS what
FROM   b
JOIN   locations l USING (bookid)
WHERE  b.l_hits &gt; 0
AND    l.locname = 'YYY'
ORDER  BY 1,2,3;
</snippet></ROW><ROW><id>10273708</id><snippet>EXISTS</snippet></ROW><ROW><id>10273708</id><snippet>GROUP BY</snippet></ROW><ROW><id>10273737</id><snippet>counter.form[token][file_name] += 1
</snippet></ROW><ROW><id>10273737</id><snippet>counter.form</snippet></ROW><ROW><id>10273737</id><snippet>self.form = collections.defaultdict(collections.Counter)
</snippet></ROW><ROW><id>10273737</id><snippet>self.form</snippet></ROW><ROW><id>10273737</id><snippet>collection.Counter</snippet></ROW><ROW><id>10273737</id><snippet>defaultdict(int)</snippet></ROW><ROW><id>10273737</id><snippet>file_name</snippet></ROW><ROW><id>10273737</id><snippet>self.form = collections.Counter()
</snippet></ROW><ROW><id>10273737</id><snippet>counter.form[token] += 1
</snippet></ROW><ROW><id>10273766</id><snippet>import glob

files = [open(f) for f in glob.glob('./*.data')] #Make list of open files
fout = open("res.csv", 'w')

for row in range(21):
    for f in files:
        fout.write( f.readline().strip() ) # strip removes trailing newline
        fout.write(',')
    fout.write('\n')

fout.close()
</snippet></ROW><ROW><id>10273801</id><snippet>allKeys = {}
for subdict in (LowKeys, MidKeys, ..., FlatHighKeys):
    allKeys.update(subdict)

notes = [allKeys[note] for note in notes]
</snippet></ROW><ROW><id>10274136</id><snippet>print</snippet></ROW><ROW><id>10274136</id><snippet>def count_chars(s):
    '''Return a dict that contains each character in str s as a key. The
    value associated with each key is the number of times that character
    occurs in s.'''

    d = {}
    for ch in s:
       if ch in d:
          print('{} is in d'.format(ch))
          d[ch] += 1
       else:
          print('{} is NOT in d'.format(ch))
          d[ch] = 1
      print('d is now: {}'.format(d))
    return d

count_chars('abcdaaaa')
</snippet></ROW><ROW><id>10274136</id><snippet>a is NOT in d
d is now: {'a': 1}
b is NOT in d
d is now: {'a': 1, 'b': 1}
c is NOT in d
d is now: {'a': 1, 'c': 1, 'b': 1}
d is NOT in d
d is now: {'a': 1, 'c': 1, 'b': 1, 'd': 1}
a is in d
d is now: {'a': 2, 'c': 1, 'b': 1, 'd': 1}
a is in d
d is now: {'a': 3, 'c': 1, 'b': 1, 'd': 1}
a is in d
d is now: {'a': 4, 'c': 1, 'b': 1, 'd': 1}
{'a': 4, 'c': 1, 'b': 1, 'd': 1}
</snippet></ROW><ROW><id>10274211</id><snippet>new_account = Account(owner=current_user, id=current_user.user_id(), name='Some Name')
</snippet></ROW><ROW><id>10274211</id><snippet>existing_account = Account.get_by_id(current_user.user_id())
</snippet></ROW><ROW><id>10274333</id><snippet>def change_1(x):       # the x parameter is a reference to the global 'x' list
    x = x.remove(x[0]) # on the left, though, is a new 'x' that is local to the function
    return x           # the local x is returned

&gt;&gt;&gt; x = [1, 2, 3]
&gt;&gt;&gt; y = change_1(x)    # assign the return value to 'y'
&gt;&gt;&gt; print y
None                   # this is None because x.remove() assigned None to the local 'x' inside the function
&gt;&gt;&gt; print x
[2, 3]                 # but x.remove() modified the global x inside the function

def change_2(x):
    x = x[1:]          # again, x on left is local, it gets a copy of the slice, but the 'x' parameter is not changed
    return x           # return the slice (copy)

&gt;&gt;&gt; x = [1, 2, 3] 
&gt;&gt;&gt; y = change_2(x)
&gt;&gt;&gt; print x
[1, 2, 3]             # the global 'x' is not changed!
&gt;&gt;&gt; print y
[2, 3]                # but the slice created in the function is assigned to 'y'
</snippet></ROW><ROW><id>10274338</id><snippet>os</snippet></ROW><ROW><id>10274338</id><snippet>os.path</snippet></ROW><ROW><id>10274338</id><snippet>os.path</snippet></ROW><ROW><id>10274338</id><snippet>posixpath</snippet></ROW><ROW><id>10274338</id><snippet>listdir</snippet></ROW><ROW><id>10274338</id><snippet>os.path</snippet></ROW><ROW><id>10274338</id><snippet>os.path</snippet></ROW><ROW><id>10274338</id><snippet>os</snippet></ROW><ROW><id>10274338</id><snippet>os.path.join</snippet></ROW><ROW><id>10274338</id><snippet>os.path.dirname</snippet></ROW><ROW><id>10274338</id><snippet>os.path.splitext</snippet></ROW><ROW><id>10274338</id><snippet>os.listdir</snippet></ROW><ROW><id>10274338</id><snippet>os.getcwd</snippet></ROW><ROW><id>10274338</id><snippet>os.remove</snippet></ROW><ROW><id>10274338</id><snippet>os.stat</snippet></ROW><ROW><id>10274338</id><snippet>os.path</snippet></ROW><ROW><id>10274338</id><snippet>exists</snippet></ROW><ROW><id>10274338</id><snippet>getmtime</snippet></ROW><ROW><id>10274338</id><snippet>islink</snippet></ROW><ROW><id>10274338</id><snippet>os.stat</snippet></ROW><ROW><id>10274338</id><snippet>os.path</snippet></ROW><ROW><id>10274338</id><snippet>os.path</snippet></ROW><ROW><id>10274338</id><snippet>posixpath</snippet></ROW><ROW><id>10274338</id><snippet>ntpath</snippet></ROW><ROW><id>10274338</id><snippet>macpath</snippet></ROW><ROW><id>10274338</id><snippet>os2emxpath</snippet></ROW><ROW><id>10274338</id><snippet>os</snippet></ROW><ROW><id>10274435</id><snippet>def is_all_words(a_string, dictionary):
    str_len = len(a_string)
    S = [False] * (str_len)
# I replaced is_word function by a simple list lookup, 
# feel free to replace it with whatever function you use. 
# tries or suffix tree are best for this.
    S[0] = (a_string[0] in dictionary) 
    for i in range(1, str_len):
        check = a_string[0:i+1] in dictionary # i+1 instead of i
        if (check):
            S[i] = check
    else:
        for j in range(0,i+1): # i+1 instead of i
        if (S[j-1] and (a_string[j:i+1] in dictionary)): # i+1 instead of i
            S[i] = True
            break


    return S

a_string = "carrotforever"
S = is_all_words(a_string, ["a","car","carrot","for","eve","forever"])
print(S[len(a_string)-1) #prints FALSE

a_string = "helloworld"
S = is_all_words(a_string, ["hello","world"])
print(S[len(a_string)-1) #prints TRUE
</snippet></ROW><ROW><id>10274506</id><snippet>h5py</snippet></ROW><ROW><id>10274506</id><snippet>with h5py.File('the_filename', 'r') as f:
    my_array = f['array_name'].value
</snippet></ROW><ROW><id>10274506</id><snippet>.value</snippet></ROW><ROW><id>10274789</id><snippet>itertools.compress</snippet></ROW><ROW><id>10274789</id><snippet>def compress(data, selectors):
    # compress('ABCDEF', [1,0,1,0,1,1]) --&gt; A C E F
    return (d for d, s in izip(data, selectors) if s)
</snippet></ROW><ROW><id>10274854</id><snippet>string == ""</snippet></ROW><ROW><id>10274854</id><snippet>1</snippet></ROW><ROW><id>10274854</id><snippet>2</snippet></ROW><ROW><id>10274854</id><snippet>nfsmsim</snippet></ROW><ROW><id>10274854</id><snippet>nfsmsim</snippet></ROW><ROW><id>10274854</id><snippet>nfsmsim</snippet></ROW><ROW><id>10274854</id><snippet>if</snippet></ROW><ROW><id>10274854</id><snippet>elif (current, string[0]) in edges.keys():
    global loc
    string = string[1:]
    nfsmsim(string, loc[0], edges, accepting)
elif len(loc)&gt;1:
    global loc
    nfsmsim(string, loc[1], edges, accepting)
</snippet></ROW><ROW><id>10274892</id><snippet>list.index()</snippet></ROW><ROW><id>10275085</id><snippet>not not A = A</snippet></ROW><ROW><id>10275085</id><snippet>while not X</snippet></ROW><ROW><id>10275085</id><snippet>X</snippet></ROW><ROW><id>10275085</id><snippet> not ( (s[0] != "s") or (len(s) != 6) or (s[0] != "t") )
</snippet></ROW><ROW><id>10275085</id><snippet>s[0] != "s"</snippet></ROW><ROW><id>10275085</id><snippet>not( (s[0] == "s" and len(s) == 6) or (s[0] == "t") )
</snippet></ROW><ROW><id>10275085</id><snippet>(s[0] == "s" and len(s) == 6)</snippet></ROW><ROW><id>10275085</id><snippet>s[0] == "t"</snippet></ROW><ROW><id>10275903</id><snippet>ANONYMOUS_USER_ID</snippet></ROW><ROW><id>10275903</id><snippet>ANONYMOUS_USER_ID</snippet></ROW><ROW><id>10275903</id><snippet>./manage.py diffsettings</snippet></ROW><ROW><id>10276045</id><snippet>from somemodule import *</snippet></ROW><ROW><id>10276754</id><snippet>Query.all</snippet></ROW><ROW><id>10276754</id><snippet>instances = session.query(versions_table).filter(versions_table.c.version==Version).all()
</snippet></ROW><ROW><id>10276949</id><snippet>request.GET</snippet></ROW><ROW><id>10276949</id><snippet>render</snippet></ROW><ROW><id>10276949</id><snippet>request</snippet></ROW><ROW><id>10276949</id><snippet>request</snippet></ROW><ROW><id>10276949</id><snippet>{{ request.GET.focus }}</snippet></ROW><ROW><id>10276949</id><snippet>def get_focus(request):
    return {'focus': request.GET.get('focus', '')}
</snippet></ROW><ROW><id>10276949</id><snippet>{{ focus }}</snippet></ROW><ROW><id>10277168</id><snippet>%f</snippet></ROW><ROW><id>10277228</id><snippet>&gt;&gt;&gt; issubclass(EOFError,Exception)
True
&gt;&gt;&gt; issubclass(EOFError,EOFerror)
True
</snippet></ROW><ROW><id>10277613</id><snippet>"我"</snippet></ROW><ROW><id>10277613</id><snippet>""</snippet></ROW><ROW><id>10277613</id><snippet>'\xe6\x88\x91'</snippet></ROW><ROW><id>10277613</id><snippet>'\xce\xd2'</snippet></ROW><ROW><id>10277613</id><snippet>a</snippet></ROW><ROW><id>10277613</id><snippet>u"我"</snippet></ROW><ROW><id>10277613</id><snippet>我</snippet></ROW><ROW><id>10277613</id><snippet>u'\xce\xd2'</snippet></ROW><ROW><id>10277613</id><snippet>u'\xe6\x88\x91'</snippet></ROW><ROW><id>10277613</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

print(u"liberté")
print("liberté")
</snippet></ROW><ROW><id>10277819</id><snippet>from django.utils import unittest
from django.test.client import RequestFactory

class SimpleTest(unittest.TestCase):
    def setUp(self):
        # Every test needs access to the request factory.
        self.factory = RequestFactory()

    def test_details(self):
        # Create an instance of a GET request.
        request = self.factory.get('/customer/details')

        # Test my_view() as if it were deployed at /customer/details
        response = my_view(request)
        self.assertEqual(response.status_code, 200)
</snippet></ROW><ROW><id>10278319</id><snippet>&gt;&gt;&gt; tmp = np.array([-10**10, 10**10])
&gt;&gt;&gt; tmp_max = tmp.max()
&gt;&gt;&gt; log_D = log(sum(exp(tmp - tmp_max))) + tmp_max
&gt;&gt;&gt; log_v = tmp - log_D
&gt;&gt;&gt; v = np.exp(log_v)
&gt;&gt;&gt; v
array([ 0.,  1.])
</snippet></ROW><ROW><id>10278319</id><snippet>scipy.misc.logsumexp</snippet></ROW><ROW><id>10278486</id><snippet>dataChanged</snippet></ROW><ROW><id>10278486</id><snippet>def incrementData(row, column):
    self.arraydata[row][column] += 1
    idx = self.index(row, column)
    self.emit(SIGNAL("dataChanged(QModelIndex,QModelIndex)"), idx, idx)
</snippet></ROW><ROW><id>10278624</id><snippet>for i, month in enumerate(months,1): 
    line.replace(month, str(i))
</snippet></ROW><ROW><id>10278624</id><snippet>months</snippet></ROW><ROW><id>10278629</id><snippet>d = {(i,j):f(i,j) for i in xrange(A) for j in xrange(B)}
</snippet></ROW><ROW><id>10278718</id><snippet>:ConqueTerm python
</snippet></ROW><ROW><id>10279073</id><snippet>return True
</snippet></ROW><ROW><id>10279073</id><snippet>'e'</snippet></ROW><ROW><id>10279073</id><snippet>e</snippet></ROW><ROW><id>10279073</id><snippet>False</snippet></ROW><ROW><id>10279134</id><snippet>wget -U "Mozilla/5.0" http://www.idealo.de/preisvergleich/Shop/27039.html
</snippet></ROW><ROW><id>10279134</id><snippet>import urllib2
opener = urllib2.build_opener()
opener.addheaders = [('User-agent', 'Mozilla/5.0')]
a = opener.open("http://www.idealo.de/preisvergleich/Shop/27039.html")
</snippet></ROW><ROW><id>10279137</id><snippet>self.tail.next = e</snippet></ROW><ROW><id>10279137</id><snippet>self.tail.next = e</snippet></ROW><ROW><id>10279137</id><snippet>self.tail = e</snippet></ROW><ROW><id>10279503</id><snippet>re</snippet></ROW><ROW><id>10279503</id><snippet>\1</snippet></ROW><ROW><id>10279503</id><snippet>&gt;&gt;&gt; print (re.sub(r'.(?&lt;!\0)', r'(\g&lt;0&gt;)', test))
(x)(A)(A)(A)(A)(A)(y)(B)(B)(B)(B)(z)
&gt;&gt;&gt;
&gt;&gt;&gt; re.compile(r'(.*)(?&lt;!\1)') # This should trigger an error but doesn't!
&lt;_sre.SRE_Pattern object at 0x00000000026A89C0&gt;
</snippet></ROW><ROW><id>10279503</id><snippet>&gt;&gt;&gt; print (re.sub(r'(.)(?&lt;=\1)', r'(\g&lt;0&gt;)', test))
x(A)(A)(A)(A)Ay(B)(B)(B)Bz
</snippet></ROW><ROW><id>10279503</id><snippet>&gt;&gt;&gt; print (re.sub(r'(.+)(?&lt;=\1)', r'(\g&lt;0&gt;)', test))
x(AA)(A)(A)Ay(BB)(B)Bz
</snippet></ROW><ROW><id>10279692</id><snippet>def comparisons(seq):
    return [abs(a-b) for a, b in zip(seq, seq[1:])]
</snippet></ROW><ROW><id>10279692</id><snippet>[3, 0, 3, 0]
</snippet></ROW><ROW><id>10279692</id><snippet>length-1</snippet></ROW><ROW><id>10279692</id><snippet>length-1</snippet></ROW><ROW><id>10279692</id><snippet>(length-1)**2</snippet></ROW><ROW><id>10279692</id><snippet>3</snippet></ROW><ROW><id>10279692</id><snippet>[0, 2, 0]</snippet></ROW><ROW><id>10279692</id><snippet>[2, 2]</snippet></ROW><ROW><id>10279692</id><snippet>4</snippet></ROW><ROW><id>10279692</id><snippet>0</snippet></ROW><ROW><id>10279692</id><snippet>length-1</snippet></ROW><ROW><id>10279692</id><snippet>[0, 1, 0]</snippet></ROW><ROW><id>10279692</id><snippet>from collections import deque
from itertools import permutations
from operator import itemgetter

def comparisons(seq):
    return [abs(a-b) for a, b in zip(seq, seq[1:])]

def best_order(n):
    temp = deque([0, n-1])
    low = 1
    high = n-2
    while low &lt; high:
        left = temp[0]
        right = temp[-1]
        if left &lt; right:
            temp.append(low)
            temp.appendleft(high)
        else:
            temp.append(high)
            temp.appendleft(low)
        low += 1
        high -= 1
    if len(temp) &lt; n:
        temp.append(low)
    return list(temp)

def brute_force(n):
    getcomp = itemgetter(2)
    return max([(list(a), comparisons(a), sum(comparisons(a))) for a in permutations(range(n))], key=getcomp)

for i in range(2, 6):
    print("Algorithmic:", best_order(i), comparisons(best_order(i)), sum(comparisons(best_order(i))))
    print("Brute Force:", *brute_force(i))
</snippet></ROW><ROW><id>10279692</id><snippet>Algorithmic: [0, 1] [1] 1
Brute Force: [0, 1] [1] 1
Algorithmic: [0, 2, 1] [2, 1] 3
Brute Force: [0, 2, 1] [2, 1] 3
Algorithmic: [2, 0, 3, 1] [2, 3, 2] 7
Brute Force: [1, 3, 0, 2] [2, 3, 2] 7
Algorithmic: [3, 0, 4, 1, 2] [3, 4, 3, 1] 11
Brute Force: [1, 3, 0, 4, 2] [2, 3, 4, 2] 11
</snippet></ROW><ROW><id>10279692</id><snippet>from collections import deque

def comparisons(seq):
    return [abs(a-b) for a, b in zip(seq, seq[1:])]

def best_order(seq):
    pool = deque(sorted(seq))
    temp = deque([pool.popleft(), pool.pop()])
    try:
        while pool:
            if temp[0] &lt; temp[-1]:
                temp.append(pool.popleft())
                temp.appendleft(pool.pop())
            else:
                temp.append(pool.pop())
                temp.appendleft(pool.popleft())
    except IndexError:
        pass
    return list(temp)

i = [0, 1, 2, 3, 4, 5, 6, 0, 0, 1, 1, 2, 2]
print("Algorithmic:", best_order(i), comparisons(best_order(i)), sum(comparisons(best_order(i))))
for n in range(2, 6):
    i = list(range(n))
    print("Algorithmic:", best_order(i), comparisons(best_order(i)), sum(comparisons(best_order(i))))
</snippet></ROW><ROW><id>10279692</id><snippet>Algorithmic: [2, 1, 3, 0, 5, 0, 6, 0, 4, 1, 2, 1, 2] [1, 2, 3, 5, 5, 6, 6, 4, 3, 1, 1, 1] 38
Algorithmic: [0, 1] [1] 1
Algorithmic: [0, 2, 1] [2, 1] 3
Algorithmic: [2, 0, 3, 1] [2, 3, 2] 7
Algorithmic: [3, 0, 4, 1, 2] [3, 4, 3, 1] 11
</snippet></ROW><ROW><id>10279727</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(sums)
{'air': 2,
 'and': 1,
 'at': 3,
 'be': 1,
 'body': 1,
 ....., # and so on...
 'you': 2}
</snippet></ROW><ROW><id>10280083</id><snippet>&lt;page String="Géneral"&gt;
</snippet></ROW><ROW><id>10280083</id><snippet>&lt;page string="Géneral"&gt;
</snippet></ROW><ROW><id>10280357</id><snippet>defaultdict</snippet></ROW><ROW><id>10280357</id><snippet>from collections import defaultdict

wordsFreq = defaultdict(int)
while True:
    word = raw_input()
    if not word:
        break
    wordsFreq[word] += 1
</snippet></ROW><ROW><id>10280357</id><snippet>defaultdict</snippet></ROW><ROW><id>10280357</id><snippet>wordsFreq = {}
while True:
    word = raw_input()
    if not word:
        break
    wordsFreq[word] = wordFreq.get(word, 0) + 1
</snippet></ROW><ROW><id>10280470</id><snippet>rs.initiate</snippet></ROW><ROW><id>10280470</id><snippet>(config)</snippet></ROW><ROW><id>10280470</id><snippet>function (c) {
    return db._adminCommand({replSetInitiate:c});
}
</snippet></ROW><ROW><id>10280470</id><snippet>&gt;&gt;&gt; from pymongo import Connection
&gt;&gt;&gt; c = Connection("morton.local:27017", slave_okay=True)
&gt;&gt;&gt; d.command( "replSetInitiate", c );
</snippet></ROW><ROW><id>10280470</id><snippet>c</snippet></ROW><ROW><id>10280640</id><snippet>class LabelUpdater(object):
    def create_variabletext_intlabel(self,root,col,row):
        val=IntVar()
        self.label=label=Label(root,textvariable=val)
        label.grid(column=col,row=row)
        return val, label

    #this is the function creating the entry
    def create_entry_string(self,root,width,col,row,columnspan,rowspan):
        val=StringVar()
        entry=ttk.Entry(root,width=width,textvariable=val)
        entry.grid(column=col,row=row,columnspan=columnspan,rowspan=rowspan)
        entry.bind("&lt;Any-KeyPress&gt;",self.bind_entry)
        #Here is my problem, when I call the function bind_entry.
        return val, entry

     def bind_entry(self,event):
        self.label.set(m.counting_point(char(event))) 

#At this point, I don't understand your code anymore since I don't know what g
#is or how it's create_entry_string method calls your create_entry_string function...
#I'll assume that the module where g's class is defined imports this file...
#If that's how it works, then the following may be ok, although probably not because
#of circular imports...

container=LabelUpdater()
create_variabletext_intlabel=container.create_variabletext_intlabel
create_entry_string=container.create_entry_string

val_entry_word, entry_word =g.create_entry_string(root,15,1,1,1,1) #somehow calls create_variabletext_intlabel which is mapped to container.create_variable_intlabel???

# I call the function create_variabletext_intlabel in another file
# initiating all the widget for the GUI
val_points,label_points=g.create_variabletext_intlabel(root,1,2)
</snippet></ROW><ROW><id>10280640</id><snippet>def myfunc(root):
    label=Label(root,text="cow")
    label.pack()
    return label

#This is the callback we want...
#  Q: but how do we pass S? 
#  A: we need to wrap this call in another -- a perfect use for lambda functions!
def change_label(label,S):
    label.config(text=S)

root=Tk()
lbl=myfunc(root)
lbl.bind("&lt;Enter&gt;",lambda e: change_label("Horse"))
lbl.bind("&lt;Leave&gt;",lambda e: change_label("Cow"))        
</snippet></ROW><ROW><id>10281022</id><snippet>mplayer video.flv -vo null -ao pcm:file=file.wav
</snippet></ROW><ROW><id>10281051</id><snippet>align='center'</snippet></ROW><ROW><id>10281051</id><snippet>bar</snippet></ROW><ROW><id>10281051</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import datetime

x = [datetime.datetime(2010, 12, 1, 0, 0),
    datetime.datetime(2011, 1, 1, 0, 0),
    datetime.datetime(2011, 5, 1, 1, 0)]
y = [4, 9, 2]

ax = plt.subplot(111)
barWidth=20
ax.bar(x, y, width=barWidth, align='center') #&lt; added align keyword
ax.xaxis_date()

plt.savefig('baralign.png')
plt.show()
</snippet></ROW><ROW><id>10281051</id><snippet>matplotlib</snippet></ROW><ROW><id>10281083</id><snippet>import psyco</snippet></ROW><ROW><id>10281083</id><snippet>except</snippet></ROW><ROW><id>10281083</id><snippet>else</snippet></ROW><ROW><id>10281083</id><snippet>try</snippet></ROW><ROW><id>10281141</id><snippet>import glob
results = [open(f) for f in glob.glob("*.data")]
sep = ","
# Uncomment if your Excel formats decimal numbers like 3,14 instead of 3.14
# sep = ";"

with open("res.csv", 'w') as fout:
    for row in range(21):
        iterator = (f.readline().strip().replace("\t", sep) for f in results)
        line = sep.join(iterator)
        fout.write("{0}\n".format(line))
</snippet></ROW><ROW><id>10281576</id><snippet>-a</snippet></ROW><ROW><id>10281813</id><snippet>#!</snippet></ROW><ROW><id>10281813</id><snippet>ShellExecute</snippet></ROW><ROW><id>10281813</id><snippet>"C:\Program Files\Windows NT\Accessories\Wordpad.exe" "%1"
</snippet></ROW><ROW><id>10281813</id><snippet>"C:\Program Files\Python\Python.exe" "D:\github\Miscellaneous-Programs\Python\check.py"
</snippet></ROW><ROW><id>10281813</id><snippet>.bat</snippet></ROW><ROW><id>10281813</id><snippet>check.bat</snippet></ROW><ROW><id>10281813</id><snippet>python check.py %*
</snippet></ROW><ROW><id>10281839</id><snippet>      1
    2   3
  9   1   2
1   1   2   4
</snippet></ROW><ROW><id>10281885</id><snippet>for row in c.fetchall():
    print row[0], row[1], row[2], row[3], row[4].strftime('%Y-%m-%d')
</snippet></ROW><ROW><id>10281885</id><snippet>file.write(",".join((row[0], row[1], row[2], row[3], row[4].strftime('%Y-%m-%d'))))
</snippet></ROW><ROW><id>10282053</id><snippet>cd</snippet></ROW><ROW><id>10282053</id><snippet>from fabric.api import run, env
from fabric.context_managers import cd

env.use_ssh_config = True

def list_files():
    with cd('/tmp'):
        run('ls')
</snippet></ROW><ROW><id>10282121</id><snippet>os.walk()</snippet></ROW><ROW><id>10282121</id><snippet>os.path.getsize()</snippet></ROW><ROW><id>10282121</id><snippet>os.path.getmtime()</snippet></ROW><ROW><id>10282121</id><snippet>import os
from os.path import join, getsize, getmtime

oldest_file, oldest_file_mtime = None, 9999999999
largest_file, largest_file_size = None, 0

for root, dirs, files in os.walk('/your/root'):
    for name in files:
        a_file = join(root, name)
        if getmtime(a_file) &lt; oldest_file_mtime:
            oldest_file_mtime = getmtime(a_file)
            oldest_file = a_file
        if getsize(a_file) &gt; largest_file_size:
            largest_file_size = getsize(a_file)
            largest_file = a_file

print "oldest file is: ", oldest_file
print "largest file is: ", largest_file
</snippet></ROW><ROW><id>10282152</id><snippet>import __builtin__</snippet></ROW><ROW><id>10282152</id><snippet>__builtin__.object</snippet></ROW><ROW><id>10282152</id><snippet>&gt;&gt;&gt; import __builtin__
&gt;&gt;&gt; __builtin__.object
&lt;type 'object'&gt;
&gt;&gt;&gt; class SomeOldStyleClass():
...    pass
... 
&gt;&gt;&gt; SomeOldStyleClass.__subclasses__()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: class SomeOldStyleClass has no attribute '__subclasses__'
&gt;&gt;&gt; class SomeClass(__builtin__.object):
...    pass
... 
&gt;&gt;&gt; SomeClass.__subclasses__()
[]
</snippet></ROW><ROW><id>10282152</id><snippet>object</snippet></ROW><ROW><id>10282278</id><snippet>{% trans "text" %}</snippet></ROW><ROW><id>10282278</id><snippet>{% blocktrans %} text {% endblocktrans %}</snippet></ROW><ROW><id>10282278</id><snippet>ugettext</snippet></ROW><ROW><id>10282278</id><snippet>makemessages</snippet></ROW><ROW><id>10282278</id><snippet>.po</snippet></ROW><ROW><id>10282278</id><snippet>compilemessages</snippet></ROW><ROW><id>10282300</id><snippet>eval</snippet></ROW><ROW><id>10282300</id><snippet>Warning The pickle module is not intended to be secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.</snippet></ROW><ROW><id>10282332</id><snippet>_compare</snippet></ROW><ROW><id>10282332</id><snippet>_currentTactics</snippet></ROW><ROW><id>10282332</id><snippet>_currenTactics</snippet></ROW><ROW><id>10282332</id><snippet>self._currentTactics += new_tactics</snippet></ROW><ROW><id>10282426</id><snippet>cherrypy.request.is_index</snippet></ROW><ROW><id>10282426</id><snippet>RoutesDispatcher</snippet></ROW><ROW><id>10282426</id><snippet>is_index</snippet></ROW><ROW><id>10282524</id><snippet>import re

def remove_commas(mystring):
    return re.sub(r'"(\d+?),(\d+?)"', r'\1\2', mystring)
</snippet></ROW><ROW><id>10282524</id><snippet>import re

def remove_commas_and_quotes(mystring):
    return re.sub(r'","|",|"', ',', re.sub(r'(?:(\d+?),)',r'\1',mystring))
</snippet></ROW><ROW><id>10282852</id><snippet>&gt;&gt;&gt; pow is math.pow
False
</snippet></ROW><ROW><id>10282852</id><snippet>import math
import traceback
import sys

inf = float("inf")
NaN = float("nan")

vals = [inf, NaN, 0.0, 1.0, 2.2, -1.0, -0.0, -2.2, -inf, 1, 0, 2]

tests = set([])

for vala in vals:
  for valb in vals:
    tests.add( (vala, valb) )
    tests.add( (valb, vala) )


for a,b in tests:
  print("math.pow(%f,%f)"%(a,b) )
  try:
    print("    %f "%math.pow(a,b))
  except:
    traceback.print_exc()

  print("__builtins__.pow(%f,%f)"%(a,b) )
  try:
    print("    %f "%__builtins__.pow(a,b))
  except:
    traceback.print_exc()
</snippet></ROW><ROW><id>10282852</id><snippet>math.pow(0.000000,-2.200000)
    ValueError: math domain error

__builtins__.pow(0.000000,-2.200000)
    ZeroDivisionError: 0.0 cannot be raised to a negative power
</snippet></ROW><ROW><id>10282852</id><snippet>math.pow()</snippet></ROW><ROW><id>10282852</id><snippet>math.pow()</snippet></ROW><ROW><id>10282852</id><snippet>**</snippet></ROW><ROW><id>10282852</id><snippet>pow()</snippet></ROW><ROW><id>10282852</id><snippet>math.pow()</snippet></ROW><ROW><id>10282852</id><snippet>static PyObject *
math_pow(PyObject *self, PyObject *args)
{
    PyObject *ox, *oy;
    double r, x, y;
    int odd_y;

    if (! PyArg_UnpackTuple(args, "pow", 2, 2, &amp;ox, &amp;oy))
        return NULL;
    x = PyFloat_AsDouble(ox);
    y = PyFloat_AsDouble(oy);
/*...*/
</snippet></ROW><ROW><id>10282852</id><snippet>pow()</snippet></ROW><ROW><id>10282852</id><snippet>pow()</snippet></ROW><ROW><id>10282852</id><snippet>**</snippet></ROW><ROW><id>10282852</id><snippet>**</snippet></ROW><ROW><id>10282852</id><snippet>__pow__()</snippet></ROW><ROW><id>10282852</id><snippet>__rpow__()</snippet></ROW><ROW><id>10282852</id><snippet>__ipow__()</snippet></ROW><ROW><id>10282852</id><snippet>__pow__()</snippet></ROW><ROW><id>10282852</id><snippet>__rpow__()</snippet></ROW><ROW><id>10282852</id><snippet>__ipow__()</snippet></ROW><ROW><id>10282852</id><snippet>class Uncertain:
  def __init__(self, x, delta=0):
    self.delta = delta
    self.x = x
  def __pow__(self, other):
    return Uncertain(
      self.x**other.x, 
      Uncertain._propagate_power(self, other)
    )
  @staticmethod
  def _propagate_power(A, B):
    return math.sqrt(
      ((B.x*(A.x**(B.x-1)))**2)*A.delta*A.delta +
      (((A.x**B.x)*math.log(B.x))**2)*B.delta*B.delta
    )
</snippet></ROW><ROW><id>10282852</id><snippet>math.pow()</snippet></ROW><ROW><id>10282852</id><snippet>def new_pow(a,b):
    _a = Uncertain(a)
    _b = Uncertain(b)
    return _a ** _b

math.pow = new_pow
</snippet></ROW><ROW><id>10282852</id><snippet>Uncertain</snippet></ROW><ROW><id>10282852</id><snippet>Uncertain</snippet></ROW><ROW><id>10282852</id><snippet>__init__()</snippet></ROW><ROW><id>10282940</id><snippet>sudo apt-get install python-dev
</snippet></ROW><ROW><id>10282940</id><snippet>sudo apt-get install python2.6-dev  #substitute your python version here...
</snippet></ROW><ROW><id>10282956</id><snippet>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = ['a', 'b']
&gt;&gt;&gt; c = ['%d%c' % (x, y) for x in a for y in b]
&gt;&gt;&gt; c
['1a', '1b', '2a', '2b', '3a', '3b']
</snippet></ROW><ROW><id>10283633</id><snippet>class Thing(db.Model):
    __tablename__ = 'thing'
    id = db.Column(db.Integer, primary_key=True)
    actions = db.relationship('Action', backref=db.backref('thing'))

class Action(db.Model):
    __tablename__ = 'action'
    id = db.Column(db.Integer, primary_key=True)
    thing_id = db.Column(db.Integer, db.ForeignKey('thing.id'))
    discriminator = db.Column('type', db.String(50))
    __mapper_args__ = {'polymorphic_on': discriminator}

class BuildAction(Action):
    __mapper_args__ = {'polymorphic_identity': 'build_action'}
    time_required = db.Column(db.Integer)
</snippet></ROW><ROW><id>10283633</id><snippet>Action</snippet></ROW><ROW><id>10283633</id><snippet>thing</snippet></ROW><ROW><id>10283633</id><snippet>action.type</snippet></ROW><ROW><id>10283932</id><snippet>*</snippet></ROW><ROW><id>10283932</id><snippet>#</snippet></ROW><ROW><id>10283932</id><snippet>from numpy import *

amp = 10
length = 100
wavelength = 20

omega = (2*pi)/wavelength
phi   = wavelength*(0.5)
X = arange(1,length)
Y1 = round_(amp*(sin(omega*X) + 1))
Y2 = round_(amp*(sin(omega*X+phi) + 1))

offset = phi/2
Z1 = sin(omega*X + offset)
Z2 = sin(omega*X + phi + offset)

T1 = " ######### "
T2 = " ********* "
clen = len(T1)

H = zeros((length,amp*2+clen),dtype='str')
H[:,:] = " "

for n,(y1,y2,z1,z2) in enumerate(zip(Y1,Y2,Z1,Z2)):
    H[n,y1:y1+clen] = list(T1)
    H[n,y2:y2+clen] = list(T2)

    # Overwrite if first helix is on top
    if z1&gt;z2: H[n,y1:y1+clen] = list(T1)

for line in H:
    print "".join(line)
</snippet></ROW><ROW><id>10283932</id><snippet>   *********  #########        
  *********      #########     
 *********         #########   
 *********           ######### 
   *********         ######### 
     *********       ######### 
       *********   #########   
          ****** #########     
              #########        
           ######### ****      
        #########  *********   
     #########      *********  
   #########         ********* 
 #########           ********* 
 #########         *********   
 #########       *********     
   #########   *********       
     ###### *********          
        *********              
      ********* ####           
   *********  #########        
  *********      #########     
 *********         #########   
 *********           ######### 
   *********         ######### 
     *********       ######### 
       *********   #########   
          ****** #########     
              #########        
</snippet></ROW><ROW><id>10284361</id><snippet>HTTP Redirect</snippet></ROW><ROW><id>10284361</id><snippet>urllib</snippet></ROW><ROW><id>10284361</id><snippet>requests</snippet></ROW><ROW><id>10284361</id><snippet>re</snippet></ROW><ROW><id>10284361</id><snippet>r'location.replace\((.*?)\)'</snippet></ROW><ROW><id>10284901</id><snippet>if sys.platform == 'cygwin':
    from pypy.translator.platform.linux import Linux, Linux64
    import platform
    if platform.architecture()[0] == '32bit':
        host_factory = Linux
    else:
        host_factory = Linux64
elif sys.platform.startswith('linux'):
</snippet></ROW><ROW><id>10285513</id><snippet>request = urllib2.Request(url,None)
request.add_header('User-Agent','Python Script') # Or 'Not a python script'
</snippet></ROW><ROW><id>10285513</id><snippet>urllib2</snippet></ROW><ROW><id>10285513</id><snippet>request.add_header('User-Agent','None of your business.')
</snippet></ROW><ROW><id>10285743</id><snippet>r"whatever"</snippet></ROW><ROW><id>10285743</id><snippet>'\n'</snippet></ROW><ROW><id>10285743</id><snippet>'\'</snippet></ROW><ROW><id>10285743</id><snippet>'n'</snippet></ROW><ROW><id>10285743</id><snippet>import matplotlib.pyplot as plt

plt.annotate('Testing\nThis\nOut', xy=(0.5, 0.5))

plt.show()
</snippet></ROW><ROW><id>10285743</id><snippet>import matplotlib.pyplot as plt

plt.annotate(r'Testing\nThis\nOut', xy=(0.5, 0.5))

plt.show()
</snippet></ROW><ROW><id>10285784</id><snippet>def abc(host, protocol):
    ...

abc("10.1.0.100", "http")
abc(host="10.1.0.100", protocol="http")
</snippet></ROW><ROW><id>10285784</id><snippet>abc({"host" : "10.1.0.100", "protocol" : "http"})
</snippet></ROW><ROW><id>10285784</id><snippet>abc(**{...})</snippet></ROW><ROW><id>10285784</id><snippet>def abc(**kwargs):
</snippet></ROW><ROW><id>10286261</id><snippet>datetime.datetime.fromtimestamp()</snippet></ROW><ROW><id>10286261</id><snippet>1000.0</snippet></ROW><ROW><id>10286261</id><snippet>&gt;&gt;&gt; dt = datetime.datetime.fromtimestamp(jsts/1000.0)
&gt;&gt;&gt; dt
datetime.datetime(2012, 4, 23, 11, 30, 4, 950000)
</snippet></ROW><ROW><id>10286671</id><snippet>key</snippet></ROW><ROW><id>10286671</id><snippet>sorted</snippet></ROW><ROW><id>10286671</id><snippet>&gt;&gt;&gt; target_list = [1,2,8,20]
&gt;&gt;&gt; sorted(target_list, key=lambda x: abs(4-x))
[2, 1, 8, 20]
</snippet></ROW><ROW><id>10286671</id><snippet>sort</snippet></ROW><ROW><id>10286671</id><snippet>key</snippet></ROW><ROW><id>10286671</id><snippet>&gt;&gt;&gt; target_list.sort(key=lambda x: abs(4-x))
&gt;&gt;&gt; target_list
[2, 1, 8, 20]
</snippet></ROW><ROW><id>10287012</id><snippet>self.a</snippet></ROW><ROW><id>10287012</id><snippet>a</snippet></ROW><ROW><id>10287012</id><snippet>__init</snippet></ROW><ROW><id>10287012</id><snippet>__init__</snippet></ROW><ROW><id>10287033</id><snippet>class obj(object): pass
items={}
for line in textinput:
    if(line.find("NameOfItem")!=-1):
       current_object=items[line.replace("NameOfItem","")]=obj()
    else:
       attr,val=line.split('=',1)
       setattr(current_object,attr.strip(),val.strip())
</snippet></ROW><ROW><id>10287033</id><snippet>ConfigParser</snippet></ROW><ROW><id>10287033</id><snippet>"NameOfItem"</snippet></ROW><ROW><id>10287033</id><snippet>[item]</snippet></ROW><ROW><id>10287092</id><snippet>checkCmd = ["sudo", "pyrit", "-r", self.capFile, "analyze"]
checkExec = Popen(checkCmd, shell=False, stdout=PIPE, stderr=STDOUT)
grepExec = Popen(["grep", "good"], stdin=checkExec.stdout, stdout=PIPE)

for line in grepExec.stdout:
    # do something with line
</snippet></ROW><ROW><id>10287092</id><snippet>communicate</snippet></ROW><ROW><id>10287092</id><snippet>shell=True</snippet></ROW><ROW><id>10287092</id><snippet>checkCmd = ["sudo", "pyrit", "-r", self.capFile, "analyze"]
checkExec = Popen(checkCmd, shell=False, stdout=PIPE, stderr=STDOUT)
for line in checkExec.stdout:
    if line.find('good') != -1:
        do something with the matched line here
</snippet></ROW><ROW><id>10287297</id><snippet>#!/usr/local/bin/MathematicaScript -script

value=ToExpression[$ScriptCommandLine[[2]]];

(*The next lime prints the script name.*)
(*Print[$ScriptCommandLine[[1]]];*)

Print[value];
</snippet></ROW><ROW><id>10287297</id><snippet>sudo chmod +x runMath
</snippet></ROW><ROW><id>10287297</id><snippet>sudo mv runMath /usr/bin/
</snippet></ROW><ROW><id>10287297</id><snippet>#!/usr/bin/python
from subprocess import *
from sys import *

command='/usr/bin/runMath'
parameter=argv[1]

call([command,parameter])
</snippet></ROW><ROW><id>10287297</id><snippet>sudo mv run /usr/bin
</snippet></ROW><ROW><id>10287297</id><snippet>$run Prime[100]
541

$run 'Sum[2x-1,{x,1,k}]'
k^2

$run Integrate[Log[x],x]
-x + x*Log[x]

$run 'Zeta[2]'
Pi^2/6
</snippet></ROW><ROW><id>10287297</id><snippet>'</snippet></ROW><ROW><id>10287297</id><snippet>'</snippet></ROW><ROW><id>10287297</id><snippet>$run 'f[n_] := f[n] = f[n - 1] + f[n - 2]; f[1] = f[2] = 1; Table[f[n],{n,5}]'
{1, 1, 2, 3, 5}
</snippet></ROW><ROW><id>10287422</id><snippet>- In your app.yaml file, you can include an env_variables stanza that will set
  the given environment variables in your application's runtime.
</snippet></ROW><ROW><id>10287869</id><snippet>settings.py</snippet></ROW><ROW><id>10287869</id><snippet>DEBUG=True</snippet></ROW><ROW><id>10287869</id><snippet>debug_toolbar</snippet></ROW><ROW><id>10287869</id><snippet>settings.py</snippet></ROW><ROW><id>10287869</id><snippet>local_settings.py</snippet></ROW><ROW><id>10287873</id><snippet>configurationID</snippet></ROW><ROW><id>10287873</id><snippet>None</snippet></ROW><ROW><id>10287873</id><snippet>generate_configurationID()</snippet></ROW><ROW><id>10287873</id><snippet>configurationID</snippet></ROW><ROW><id>10287873</id><snippet>None</snippet></ROW><ROW><id>10287873</id><snippet>generate_configurationID()</snippet></ROW><ROW><id>10287873</id><snippet>None</snippet></ROW><ROW><id>10287873</id><snippet>configurationID</snippet></ROW><ROW><id>10287873</id><snippet>generate_configurationID()</snippet></ROW><ROW><id>10287873</id><snippet>generate_configurationID()</snippet></ROW><ROW><id>10287879</id><snippet>data = environ['QUERY_STRING'].split('=')[1])
</snippet></ROW><ROW><id>10287907</id><snippet>py.test</snippet></ROW><ROW><id>10287997</id><snippet>def f2(L):
    sum = 0
    i = 1
    while i &lt; len(L):
        sum = sum + L[i]
        i = i * 2
    return sum
</snippet></ROW><ROW><id>10287997</id><snippet>sum = 0
i = 1
# [...]
return sum
</snippet></ROW><ROW><id>10287997</id><snippet>    sum = sum + L[i] # time to lookup L[i] (`timelookup(L)`) plus time to add to the sum (obviously constant time)
    i = i * 2 # obviously constant time
</snippet></ROW><ROW><id>10287997</id><snippet>loops(L)</snippet></ROW><ROW><id>10287997</id><snippet>loops(L) * (timelookup(L) + const)</snippet></ROW><ROW><id>10287997</id><snippet>O(loops(L))</snippet></ROW><ROW><id>10287997</id><snippet>len()</snippet></ROW><ROW><id>10287997</id><snippet>L</snippet></ROW><ROW><id>10288019</id><snippet>__call__</snippet></ROW><ROW><id>10288019</id><snippet>__call__</snippet></ROW><ROW><id>10288019</id><snippet>__call__</snippet></ROW><ROW><id>10288019</id><snippet>__call__</snippet></ROW><ROW><id>10288019</id><snippet>__call__</snippet></ROW><ROW><id>10288025</id><snippet>def filtered(lines):
    for line in lines:
        if line.startswith('Student:') or line.startswith('Your score for this lab:'):
            yield line.rstrip().split()[-1]

with open('test.txt', 'r') as f:
    for student, score in zip(*[filtered(f)]*2):
        print(student, score)
</snippet></ROW><ROW><id>10288151</id><snippet>crop</snippet></ROW><ROW><id>10288151</id><snippet>save</snippet></ROW><ROW><id>10288151</id><snippet>save</snippet></ROW><ROW><id>10288293</id><snippet>unittest</snippet></ROW><ROW><id>10288330</id><snippet>functools.partial</snippet></ROW><ROW><id>10288330</id><snippet>other_function(callback=functools.partial(the_other_function, param1='foo', param2='bar'))
</snippet></ROW><ROW><id>10288438</id><snippet>encode("utf-8")</snippet></ROW><ROW><id>10288438</id><snippet>str</snippet></ROW><ROW><id>10288438</id><snippet>uni.encode(encoding)</snippet></ROW><ROW><id>10288438</id><snippet>s.decode(encoding)</snippet></ROW><ROW><id>10288438</id><snippet>unicode(s, encoding)</snippet></ROW><ROW><id>10288438</id><snippet>fullFilePath</snippet></ROW><ROW><id>10288438</id><snippet>path</snippet></ROW><ROW><id>10288438</id><snippet>str</snippet></ROW><ROW><id>10288438</id><snippet>path = path.decode('utf-8')
fullFilePath = fullFilePath.decode('utf-8')
</snippet></ROW><ROW><id>10288438</id><snippet>execute()</snippet></ROW><ROW><id>10288438</id><snippet>cur.execute(u"update docs set path = :fullFilePath where path = :path", locals())
</snippet></ROW><ROW><id>10288782</id><snippet>json.load</snippet></ROW><ROW><id>10288782</id><snippet>json_file = open('json.txt')
data = json.load(json_file)
json_file.close()

print data
</snippet></ROW><ROW><id>10288914</id><snippet>os.rename</snippet></ROW><ROW><id>10288914</id><snippet>os.chdir</snippet></ROW><ROW><id>10288914</id><snippet>os.rename(os.path.join(path, f),
          os.path.join(path, basename + '_' + randid + '_' + str(index) + ext) 
#                                                                             ^
</snippet></ROW><ROW><id>10289055</id><snippet>key=lambda x: abs(x._norm - number)
</snippet></ROW><ROW><id>10289513</id><snippet>break</snippet></ROW><ROW><id>10289513</id><snippet>while True:
    title_selection = raw_input("Please type in the number of your title and press Enter.\n%s" % (raw_input_string))
    if title_selection:
        break
    print "Sorry, you have to enter something."
</snippet></ROW><ROW><id>10289563</id><snippet>*?</snippet></ROW><ROW><id>10289563</id><snippet>import re

_PHP_TAG = re.compile(r'&lt;\?php.*?\?&gt;', re.DOTALL)
def strip_php(content):
    return _PHP_TAG.sub('', content)

INPUT = """
Simple: &lt;?php echo $a ?&gt;.
Two on one line: &lt;?php echo $a ?&gt;, &lt;?php echo $b ?&gt;.
Multiline: &lt;?php 
    if ($a) {
        echo $b;
    }
?&gt;.
"""

print strip_php(INPUT)
</snippet></ROW><ROW><id>10289563</id><snippet>&lt;?php echo '?&gt;' ?&gt;
</snippet></ROW><ROW><id>10289563</id><snippet>dstr = r'"(?:[^"\\]|\\.)*"'
sstr = r"'(?:[^'\\]|\\.)*'"
_PHP_TAG = re.compile(
    r'''&lt;\?[^"']*?(?:(?:%s|%s)[^"']*?)*(?:\?&gt;|$)''' % (dstr, sstr)
)
def strip_php(content):
    return _PHP_TAG.sub('', content)
</snippet></ROW><ROW><id>10289563</id><snippet>Zend/zend_language_scanner.l</snippet></ROW><ROW><id>10289760</id><snippet>resp = urllib2.urlopen('http://www.google.com')
file_read = resp.read(max_wanted_size)
if resp.read(1) != '':
    #file is bigger than expected code
</snippet></ROW><ROW><id>10290058</id><snippet>font_measure</snippet></ROW><ROW><id>10290058</id><snippet>font_measure</snippet></ROW><ROW><id>10290078</id><snippet>submenu.add_command(label=p, command = lambda p=p: onButtonPosObject(p), underline=0)
</snippet></ROW><ROW><id>10290239</id><snippet>communicate</snippet></ROW><ROW><id>10290239</id><snippet>&gt;&gt;&gt; from subprocess import *
&gt;&gt;&gt; Popen(['echo', 'Hi'], stdout=PIPE).communicate()[0]
'Hi\n'
</snippet></ROW><ROW><id>10290422</id><snippet>Traceback (most recent call last):
  File "./test.py", line 39, in &lt;module&gt;
    testPdf()
  File "./test.py", line 36, in testPdf
    doc.build(elements)
  File "/usr/local/greenplum-db/ext/python/lib/python2.6/site-packages/reportlab/platypus/doctemplate.py", line 880, in build
    self.handle_flowable(flowables)
  File "/usr/local/greenplum-db/ext/python/lib/python2.6/site-packages/reportlab/platypus/doctemplate.py", line 763, in handle_flowable
    if frame.add(f, canv, trySplit=self.allowSplitting):
  File "/usr/local/greenplum-db/ext/python/lib/python2.6/site-packages/reportlab/platypus/frames.py", line 159, in _add
    w, h = flowable.wrap(aW, h)
  File "/usr/local/greenplum-db/ext/python/lib/python2.6/site-packages/reportlab/platypus/tables.py", line 1113, in wrap
    self._calc(availWidth, availHeight)
  File "/usr/local/greenplum-db/ext/python/lib/python2.6/site-packages/reportlab/platypus/tables.py", line 587, in _calc
    self._calc_height(availHeight,availWidth,W=W)
  File "/usr/local/greenplum-db/ext/python/lib/python2.6/site-packages/reportlab/platypus/tables.py", line 553, in _calc_height
    spanFixDim(H0,H,spanCons,lim=hmax)
  File "/usr/local/greenplum-db/ext/python/lib/python2.6/site-packages/reportlab/platypus/tables.py", line 205, in spanFixDim
    t = sum([V[x]+M.get(x,0) for x in xrange(x0,x1)])
TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'
</snippet></ROW><ROW><id>10290422</id><snippet>KeepTogether</snippet></ROW><ROW><id>10290440</id><snippet>$ lame --preset insane /path/to/file.wav
</snippet></ROW><ROW><id>10290440</id><snippet>file.wav.mp3
</snippet></ROW><ROW><id>10290440</id><snippet>wav = 'myfile.wav'
cmd = 'lame --preset insane %s' % wav
subprocess.call(cmd, shell=True)
</snippet></ROW><ROW><id>10290514</id><snippet>pal</snippet></ROW><ROW><id>10290514</id><snippet>True</snippet></ROW><ROW><id>10290514</id><snippet>False</snippet></ROW><ROW><id>10290514</id><snippet>pal</snippet></ROW><ROW><id>10290514</id><snippet>False</snippet></ROW><ROW><id>10290514</id><snippet>def palindrome2(s):
    n = len(s)
    pal = True

    for i in range(n/2)
        if s[i] != s[n-i-1]: # the moment it's false
           pal = False       # set pal and
           break             # drop out of the loop

    return pal
</snippet></ROW><ROW><id>10290514</id><snippet>    ...
    for i in range(n/2)
        if s[i] != s[n-i-1]: # the moment it's false
           return False      # exit the function by returning False

    return True  # otherwise return True
</snippet></ROW><ROW><id>10290674</id><snippet>&lt;html&gt;</snippet></ROW><ROW><id>10290674</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.w3.org/MarkUp/SCHEMA/xhtml11.xsd"
  xml:lang="en"&gt;
  &lt;head&gt;            
    &lt;title&gt;Document Title&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
  &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>10290674</id><snippet>&gt;&gt;&gt; doc = etree.parse(open('foo.html'))
&gt;&gt;&gt; doc.xpath('//title')
[]
</snippet></ROW><ROW><id>10290674</id><snippet>&lt;title&gt;</snippet></ROW><ROW><id>10290674</id><snippet>foo:title</snippet></ROW><ROW><id>10290674</id><snippet>bar:title</snippet></ROW><ROW><id>10290674</id><snippet>foo:</snippet></ROW><ROW><id>10290674</id><snippet>bar:</snippet></ROW><ROW><id>10290674</id><snippet>&gt;&gt;&gt; doc.xpath('//html:title',
...   namespaces={'html': 'http://www.w3.org/1999/xhtml'})
[&lt;Element {http://www.w3.org/1999/xhtml}title at 0x1087910&gt;]
</snippet></ROW><ROW><id>10290674</id><snippet>tag</snippet></ROW><ROW><id>10290674</id><snippet>&gt;&gt;&gt; titleIter = etree.iterparse(StringIO(str), 
...   tag='{http://www.w3.org/1999/xhtml}title')
&gt;&gt;&gt; list(titleIter)
[(u'end', &lt;Element {http://www.w3.org/1999/xhtml}title at 0x7fddb7c4b8c0&gt;)]
</snippet></ROW><ROW><id>10290734</id><snippet>root</snippet></ROW><ROW><id>10290734</id><snippet>root = xml.Element(dasub)</snippet></ROW><ROW><id>10290879</id><snippet>through</snippet></ROW><ROW><id>10290879</id><snippet>Thing.labels.through</snippet></ROW><ROW><id>10290879</id><snippet># Fetch all labels and things:
labels = list(Label.objects.all())
things = list(Thing.objects.all())
# Fetch all label-thing pairs:
labels_of = defaultdict(lambda: [])
for pair in Thing.labels.through.objects.filter(label__in=labels):
    labels_of[pair.thing_id].append(pair.label_id)
# Put everything together:
data = {}
data['labels'] = [model_to_dict(label) for label in labels]
data['things'] = []
for thing in things:
    thing_dict = model_to_dict(thing, exclude='labels')
    thing_dict['labels'] = labels_of[thing.id]
    data['things'].append(thing_dict)
</snippet></ROW><ROW><id>10290879</id><snippet>for pair in Thing.labels.through.objects.filter(thing__in=things):
</snippet></ROW><ROW><id>10290879</id><snippet>Label</snippet></ROW><ROW><id>10290879</id><snippet>Thing</snippet></ROW><ROW><id>10290879</id><snippet>IN</snippet></ROW><ROW><id>10290879</id><snippet>debugsqlshell</snippet></ROW><ROW><id>10290922</id><snippet>def main():
  application = webapp.WSGIApplication([
    ('/', MainHandler),
    ('/portfolio/', Portfolio),
    ('/contact/', Contant),
    ('/about/', About)
    ])
  util.run_wsgi_app(application)
</snippet></ROW><ROW><id>10290922</id><snippet>class About(webapp.RequestHandler):
  def get(self):
    self.response.out.write(template.render('about.html', None))
</snippet></ROW><ROW><id>10290955</id><snippet>aspect='auto'</snippet></ROW><ROW><id>10290955</id><snippet>imshow</snippet></ROW><ROW><id>10290955</id><snippet>imshow</snippet></ROW><ROW><id>10290955</id><snippet>imshow</snippet></ROW><ROW><id>10290955</id><snippet>import matplotlib.pyplot as plt
import numpy as np

fig, axes = plt.subplots(nrows=2)

for ax in axes:
    ax.plot(np.random.random(100))

axes[1].autoscale(False)
imdata = np.random.random((10,10))
axes[1].imshow(imdata, aspect='auto', extent=[5, 20, 0.3, 0.8])

plt.show()
</snippet></ROW><ROW><id>10290991</id><snippet>t.py</snippet></ROW><ROW><id>10290991</id><snippet>class Foo():
  def RaiseBar(self):
    raise Foo.Bar("hi")
  class Bar(Exception):
    pass
</snippet></ROW><ROW><id>10290991</id><snippet>&gt;&gt;&gt; import t
&gt;&gt;&gt; x = t.Foo()
&gt;&gt;&gt; try:
...     x.RaiseBar()
... except t.Foo.Bar as e:
...     print e
... 
hi
</snippet></ROW><ROW><id>10291030</id><snippet>data = numpy.loadtxt(fileName, dtype='float')
</snippet></ROW><ROW><id>10291030</id><snippet>numpy.vstack</snippet></ROW><ROW><id>10291030</id><snippet>loadtxt</snippet></ROW><ROW><id>10291030</id><snippet>numpy.vstack</snippet></ROW><ROW><id>10291030</id><snippet>data = [row.split('\t') for row in inputs]
data = np.array(data, dtype='float')
</snippet></ROW><ROW><id>10291030</id><snippet>import numpy as np
myArray = np.zeros((10,3))
for i in xrange(len(myArray)):
    myArray[i] = [i, i+1, i+2]

# or:
myArray = []
for i in xrange(10):
    myArray.append(np.array([i, i+1, i+2]))
myArray = np.vstack(myArray)
</snippet></ROW><ROW><id>10291037</id><snippet>RequestHandler</snippet></ROW><ROW><id>10291118</id><snippet>a</snippet></ROW><ROW><id>10291118</id><snippet>&gt;&gt;&gt; def mygen(x):
...     i = 0
...     while i &lt; x:
...         yield i
...         i += 1
... 
&gt;&gt;&gt; mg = mygen(4)
&gt;&gt;&gt; list(mg)
[0, 1, 2, 3]
&gt;&gt;&gt; list(mg)
[]
</snippet></ROW><ROW><id>10291118</id><snippet>mygen</snippet></ROW><ROW><id>10291118</id><snippet>mygen</snippet></ROW><ROW><id>10291118</id><snippet>&gt;&gt;&gt; def make_n_lists(gen, gen_args, n):
...     list_of_lists = []
...     for _ in range(n):
...         list_of_lists.append(list(gen(*gen_args)))
...     return list_of_lists
... 
&gt;&gt;&gt; make_n_lists(mygen, (3,), 3)
[[0, 1, 2], [0, 1, 2], [0, 1, 2]]
</snippet></ROW><ROW><id>10291118</id><snippet>&gt;&gt;&gt; def make_n_lists(gen_func, n):
...     return [list(gen_func()) for _ in range(n)]
... 
&gt;&gt;&gt; make_n_lists(lambda: mygen(3), 3)
[[0, 1, 2], [0, 1, 2], [0, 1, 2]]
</snippet></ROW><ROW><id>10291118</id><snippet>lambda</snippet></ROW><ROW><id>10291118</id><snippet>&gt;&gt;&gt; def call_mygen_with_3():
...     return mygen(3)
... 
&gt;&gt;&gt; make_n_lists(call_mygen_with_3, 3)
[[0, 1, 2], [0, 1, 2], [0, 1, 2]]
</snippet></ROW><ROW><id>10291237</id><snippet>print "Tmin=", ", ".join(Tmin)
</snippet></ROW><ROW><id>10291237</id><snippet>print "Tmin=", Tmin[0]
</snippet></ROW><ROW><id>10291237</id><snippet>writer.writerow(['Tmin']+Tmin) #note this is already printing the result to a file so dont "print" the return value
</snippet></ROW><ROW><id>10291456</id><snippet>#!/usr/bin/python2.7
# Your python script
</snippet></ROW><ROW><id>10291557</id><snippet>for el in l:
    d['k'] = el
    print '&gt; ' + str(d)
    r.append(d)

print r  
</snippet></ROW><ROW><id>10291557</id><snippet>el</snippet></ROW><ROW><id>10291557</id><snippet>1</snippet></ROW><ROW><id>10291557</id><snippet>d['k']</snippet></ROW><ROW><id>10291557</id><snippet>1</snippet></ROW><ROW><id>10291557</id><snippet>d</snippet></ROW><ROW><id>10291557</id><snippet>r</snippet></ROW><ROW><id>10291557</id><snippet>el</snippet></ROW><ROW><id>10291557</id><snippet>2</snippet></ROW><ROW><id>10291557</id><snippet>d['k']</snippet></ROW><ROW><id>10291557</id><snippet>2</snippet></ROW><ROW><id>10291557</id><snippet>d</snippet></ROW><ROW><id>10291557</id><snippet>r</snippet></ROW><ROW><id>10291557</id><snippet>r</snippet></ROW><ROW><id>10291557</id><snippet>r = [d, d]
</snippet></ROW><ROW><id>10291557</id><snippet>d['k']</snippet></ROW><ROW><id>10291557</id><snippet>2</snippet></ROW><ROW><id>10291557</id><snippet>d</snippet></ROW><ROW><id>10291557</id><snippet>r</snippet></ROW><ROW><id>10291557</id><snippet>{'k': 2}</snippet></ROW><ROW><id>10291641</id><snippet>params</snippet></ROW><ROW><id>10291641</id><snippet>key1, value1), (key2, value2), ...)</snippet></ROW><ROW><id>10291641</id><snippet>params.append(('api_key',self.api_key))</snippet></ROW><ROW><id>10291641</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>10291641</id><snippet>key1=value1&amp;key2=value2&amp;api_key=23423</snippet></ROW><ROW><id>10291688</id><snippet>send</snippet></ROW><ROW><id>10291688</id><snippet>def genFn(a, b, c):
    # some initialisation / pre-computation
    startPt = fn(a, b, c)
    data = (yield startPt)
    while True:
        # perform some computation
        data = (yield result)

f = genFn(5, 6, 7)
startPt = f.send(None)  # first yield returns the start point
for data in dataseries[startPt:]:
    k = f.send(data)
</snippet></ROW><ROW><id>10291688</id><snippet>.send(None)</snippet></ROW><ROW><id>10291688</id><snippet>.next()</snippet></ROW><ROW><id>10291688</id><snippet>__init__</snippet></ROW><ROW><id>10291688</id><snippet>class GenCl(object):
    def __init__(self, a, b, c):
        self.startPt = fn(a, b, c)

    def gen(self):
        startPt = self.startPt  # get the startPt calculated in __init__
        data = (yield None)
        while True:
            # perform some computation
            data = (yield result)

o = genCl(5, 6, 7)
startPt = o.startPt
f = o.gen()  # create the generator object
f.send(None)
for data in dataseries[startPt:]:
    k = f.send(data)
</snippet></ROW><ROW><id>10291688</id><snippet>def genFn(a, b, c):
    # some initialisation / pre-computation
    startPt = fn(a, b, c)
    def gen():  # actual generator function
        data = (yield None)
        while True:
            # perform some computation
            data = (yield result)
    return gen(), startPt  # returns generator and startPt

f, startPt = genFn(5, 6, 7)
f.send(None)
for data in dataseries[startPt:]:
    k = f.send(data)
</snippet></ROW><ROW><id>10291719</id><snippet>from __future__ import print_function
import os

try:
        os.stat("xxx")
except OSError as err:
        print (err)
        # The "err" object is on instance of OSError. It supports indexing, with the first element as the errno value.
        print(err[0])
</snippet></ROW><ROW><id>10291719</id><snippet>[Errno 2] No such file or directory: 'xxx'
2
</snippet></ROW><ROW><id>10291834</id><snippet>import workerpool
import urllib3

URL_LIST = [] # Fill this from somewhere

NUM_SOCKETS = 3
NUM_WORKERS = 5

# We want a few more workers than sockets so that they have extra
# time to parse things and such.

http = urllib3.PoolManager(maxsize=NUM_SOCKETS)
workers = workerpool.WorkerPool(size=NUM_WORKERS)

class MyJob(workerpool.Job):
    def __init__(self, url):
       self.url = url

    def run(self):
        r = http.request('GET', self.url)
        # ... do parsing stuff here


for url in URL_LIST:
    workers.put(MyJob(url))

# Send shutdown jobs to all threads, and wait until all the jobs have been completed
# (If you don't do this, the script might hang due to a rogue undead thread.)
pool.shutdown()
pool.wait()
</snippet></ROW><ROW><id>10291955</id><snippet>ad.usr = self.current_user.key.to_old_key()
</snippet></ROW><ROW><id>10292086</id><snippet>env</snippet></ROW><ROW><id>10292160</id><snippet>ConfigParser</snippet></ROW><ROW><id>10292160</id><snippet>==&gt; multipliers.ini &lt;==
[parameters]
p1=3
p2=4

==&gt; multipliers.py &lt;==
#!/usr/bin/env python

import ConfigParser

config = ConfigParser.SafeConfigParser()
config.read('multipliers.ini')


p1 = config.getint('parameters', 'p1')
p2 = config.getint('parameters', 'p2')

print p1 * p2
</snippet></ROW><ROW><id>10292416</id><snippet>value</snippet></ROW><ROW><id>10292416</id><snippet>dict</snippet></ROW><ROW><id>10292416</id><snippet>postings.insert(posting.__dict__)
</snippet></ROW><ROW><id>10292600</id><snippet>using (Tiff image = Tiff.Open(filePaths[i], "a"))
{        
    image.SetDirectory(0);

    // read auto-registered tag 33922
    FieldValue[] value = image.GetField((TiffTag)33922);
    int count = value[0].ToInt();
    double[] array = value[1].ToDoubleArray();
    System.Console.Out.WriteLine("Tag 33922 value(s) are as follows:");
    System.Console.Out.WriteLine(string.Join(",", array));

    double[] newarray = { 0.5, 0.5, 0, array[3], array[4], array[5] };
    image.SetField((TiffTag)33922, 6, newarray);

    System.Console.Out.WriteLine("Tag 33922 value(s) have been updated to:");
    System.Console.Out.WriteLine(string.Join(",", newarray));

    // Write the information to the file
    image.CheckpointDirectory();
}
</snippet></ROW><ROW><id>10293148</id><snippet>use_alter=True</snippet></ROW><ROW><id>10293148</id><snippet>primary_key</snippet></ROW><ROW><id>10293148</id><snippet>Email</snippet></ROW><ROW><id>10293148</id><snippet>autoincrement</snippet></ROW><ROW><id>10293148</id><snippet>foreign_keys</snippet></ROW><ROW><id>10293148</id><snippet>SA (sqlalchemy)</snippet></ROW><ROW><id>10293148</id><snippet>Email</snippet></ROW><ROW><id>10293148</id><snippet>User.email_id</snippet></ROW><ROW><id>10293148</id><snippet>email</snippet></ROW><ROW><id>10293148</id><snippet>user.email_id = addy</snippet></ROW><ROW><id>10293148</id><snippet>user.email_id = addy.address</snippet></ROW><ROW><id>10293148</id><snippet>relationship</snippet></ROW><ROW><id>10293148</id><snippet>User.email_id</snippet></ROW><ROW><id>10293148</id><snippet>User.emails</snippet></ROW><ROW><id>10293148</id><snippet>ForeignKey</snippet></ROW><ROW><id>10293148</id><snippet>[users.id, users.email_id] to [user_emails.user_id, user_emails.email]</snippet></ROW><ROW><id>10293148</id><snippet>""" models.py """
class User(Base):
    __tablename__ = 'users'
    # ...
    email_id = Column(String(50),
                      ForeignKey('emails.address', use_alter=True,
                                 name='fk_email_id'), unique=True,
                      nullable=False)
    default_email = relationship("Email", backref="default_for_user")

""" script """
# ... (all that you have below until next line)
# user.email_id = addy.address
user.default_email = addy
</snippet></ROW><ROW><id>10293205</id><snippet>o.x_podate</snippet></ROW><ROW><id>10293205</id><snippet>[[ o.x_podate or "" ]]</snippet></ROW><ROW><id>10293476</id><snippet>for line in text:
</snippet></ROW><ROW><id>10293476</id><snippet>while 1</snippet></ROW><ROW><id>10293476</id><snippet>"Your name is {name}.".format(name="John")
</snippet></ROW><ROW><id>10293476</id><snippet>with open(...) as f:
</snippet></ROW><ROW><id>10293476</id><snippet>f.close()</snippet></ROW><ROW><id>10293560</id><snippet>con.text()</snippet></ROW><ROW><id>10293560</id><snippet>bytes</snippet></ROW><ROW><id>10293560</id><snippet>str()</snippet></ROW><ROW><id>10293560</id><snippet>\\xe2\\x80\\x99</snippet></ROW><ROW><id>10293560</id><snippet>bytes</snippet></ROW><ROW><id>10293560</id><snippet>str</snippet></ROW><ROW><id>10293560</id><snippet>str</snippet></ROW><ROW><id>10293560</id><snippet>unicode</snippet></ROW><ROW><id>10293560</id><snippet>bytes</snippet></ROW><ROW><id>10293560</id><snippet>str</snippet></ROW><ROW><id>10293560</id><snippet>utf-8</snippet></ROW><ROW><id>10293560</id><snippet>str()</snippet></ROW><ROW><id>10293560</id><snippet>bytes.decode</snippet></ROW><ROW><id>10293560</id><snippet>&gt;&gt;&gt; import urllib.request as u
&gt;&gt;&gt; zipcode = 47401
&gt;&gt;&gt; url = 'http://watchdog.net/us/?zip={}'.format(zipcode)
&gt;&gt;&gt; con = u.urlopen(url)
&gt;&gt;&gt; page = con.read().decode('utf-8')
&gt;&gt;&gt; page[page.find("&lt;title&gt;") + 7:page.find("&lt;/title&gt;") - 15]
'IN-09: Indiana’s 9th'
</snippet></ROW><ROW><id>10293560</id><snippet>bytes</snippet></ROW><ROW><id>10293560</id><snippet>'utf-8'</snippet></ROW><ROW><id>10293906</id><snippet>.PHONY: check
check:
    ./runtests.sh
</snippet></ROW><ROW><id>10293906</id><snippet>DEB_MAKE_CHECK_TARGET = check
</snippet></ROW><ROW><id>10294024</id><snippet>#!/usr/bin/perl
use strict;
use warnings;

my %buildings;

while (&lt;DATA&gt;) {
    chomp;
    $buildings{$1} = [] if /^Re: Building ([AB])/;
    push @{$buildings{$1}}, $_ if $_;
}

while (my ($building, $data) = each %buildings) {
    open(my $out, '&gt;', "$building.txt") or die "Unable to open file for writing: $!\n";

    for my $i (1 .. $#$data / 2) {
        print $out sprintf "%s\t%s\n", $data-&gt;[$i*2-1], $data-&gt;[$i*2];
    }
    close $out;
}
</snippet></ROW><ROW><id>10294024</id><snippet>Month   kWh
1       100
2       110
3       105
</snippet></ROW><ROW><id>10294024</id><snippet>Month   kWh
1       200
2       210
3       205
</snippet></ROW><ROW><id>10294198</id><snippet>   PORT=3000 MONGO_URL=mongodb://localhost:27017/myapp node bundle/main.js
</snippet></ROW><ROW><id>10294376</id><snippet>python</snippet></ROW><ROW><id>10294376</id><snippet>python2</snippet></ROW><ROW><id>10294376</id><snippet>which python2.7</snippet></ROW><ROW><id>10294376</id><snippet>python2.7</snippet></ROW><ROW><id>10294376</id><snippet>python</snippet></ROW><ROW><id>10294376</id><snippet>python2</snippet></ROW><ROW><id>10294376</id><snippet>python -&gt;    python2.4</snippet></ROW><ROW><id>10294376</id><snippet>python2 -&gt; python2.4</snippet></ROW><ROW><id>10294435</id><snippet>import sys

if hasattr(sys, 'frozen'):
    print(sys.executable)
else:
    print(sys.argv[0])
</snippet></ROW><ROW><id>10294435</id><snippet>H:\Python\Examples\cxfreeze\pwdme.py
</snippet></ROW><ROW><id>10294435</id><snippet>D:\&gt;h:\Python\Examples\cxfreeze\dist\pwdme.exe
h:\Python\Examples\cxfreeze\dist\pwdme.exe
</snippet></ROW><ROW><id>10294435</id><snippet>D:\&gt;pwdme.exe
h:\Python\Examples\cxfreeze\dist\pwdme.exe
</snippet></ROW><ROW><id>10294761</id><snippet>request.user</snippet></ROW><ROW><id>10294761</id><snippet>'[%(asctime)s] %(levelname)s %(module)s %(message)s %(user)s'
</snippet></ROW><ROW><id>10294761</id><snippet>logger.debug('My message with %s', 'args', extra={'user': request.user})
</snippet></ROW><ROW><id>10294761</id><snippet>extra</snippet></ROW><ROW><id>10294761</id><snippet>user</snippet></ROW><ROW><id>10294761</id><snippet>django.request</snippet></ROW><ROW><id>10294761</id><snippet>extra</snippet></ROW><ROW><id>10294761</id><snippet>request.user</snippet></ROW><ROW><id>10294761</id><snippet>logging.Filter</snippet></ROW><ROW><id>10294761</id><snippet>class RequestUserFilter(logging.Filter):
    def filter(self, record):
        record.user = record.request.user
        return True
</snippet></ROW><ROW><id>10295042</id><snippet>range(5)</snippet></ROW><ROW><id>10295042</id><snippet>[0,1,2,3,4]
</snippet></ROW><ROW><id>10295042</id><snippet>y(0) = y(0) + x(0) &gt;&gt;&gt; 0
y(1) = y(0) + x(1) &gt;&gt;&gt; 1
y(3) = y(1) + x(2) &gt;&gt;&gt; 3
y(6) = y(3) + x(3) &gt;&gt;&gt; 6
y(10) = y(6) + x(4) &gt;&gt;&gt; 10
</snippet></ROW><ROW><id>10295188</id><snippet>displays = (wx.Display(i) for i in range(wx.Display.GetCount()))
sizes = [display.GetGeometry().GetSize() for display in displays]
</snippet></ROW><ROW><id>10295188</id><snippet>wx.Rect</snippet></ROW><ROW><id>10295188</id><snippet>GetGeometry()</snippet></ROW><ROW><id>10295263</id><snippet>firstStr = 'hello'
secondStr = 'world'
print my_str
print secondStr
</snippet></ROW><ROW><id>10295512</id><snippet>.</snippet></ROW><ROW><id>10295512</id><snippet>,</snippet></ROW><ROW><id>10295512</id><snippet>123.456</snippet></ROW><ROW><id>10295512</id><snippet>123,456</snippet></ROW><ROW><id>10295512</id><snippet>123456</snippet></ROW><ROW><id>10295512</id><snippet>123.456</snippet></ROW><ROW><id>10295512</id><snippet>123.45</snippet></ROW><ROW><id>10295586</id><snippet>search</snippet></ROW><ROW><id>10295586</id><snippet>re.escape</snippet></ROW><ROW><id>10295586</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; substrings = ['microsoft.com', 'ibm.com', 'cnn', '.ru']
&gt;&gt;&gt; pattern = "(?:%s)" % "|".join(map(re.escape, substrings))
&gt;&gt;&gt; print(pattern)
(?:microsoft\.com|ibm\.com|cnn|\.ru)
&gt;&gt;&gt; pattern = re.compile(pattern)
&gt;&gt;&gt; [x for x in ["www.microsoft.com", "example.com", "foo.ru"]
...    if not pattern.search(x)]
['example.com']
</snippet></ROW><ROW><id>10295905</id><snippet>if</snippet></ROW><ROW><id>10295905</id><snippet>raise expression</snippet></ROW><ROW><id>10295905</id><snippet>raise exception</snippet></ROW><ROW><id>10295905</id><snippet>if not bool:
    raise MyException
return value
</snippet></ROW><ROW><id>10296008</id><snippet>python appcfg.py update myapp/</snippet></ROW><ROW><id>10296201</id><snippet>&gt;&gt;&gt; import pdb
&gt;&gt;&gt; import yourmodule
&gt;&gt;&gt; pdb.run('yourmodule.foo()')
</snippet></ROW><ROW><id>10296201</id><snippet>pdb.set_trace()</snippet></ROW><ROW><id>10296293</id><snippet>max(my_dict.items(), key=lambda x: x[1]['last_event'])[0]
</snippet></ROW><ROW><id>10296301</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>10296301</id><snippet>settings.py</snippet></ROW><ROW><id>10296301</id><snippet>INSTALLED_APPS = (
...
'cms.plugins.snippet',
'cms.plugins.flash',
...
)
</snippet></ROW><ROW><id>10296371</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>10296371</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>10296371</id><snippet>&lt;blockquote&gt;</snippet></ROW><ROW><id>10296371</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>10296371</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>10296371</id><snippet>&lt;blockquote&gt;</snippet></ROW><ROW><id>10296531</id><snippet>&gt;&gt;&gt; [x for x in l if all(y.strip() for y in x)]
[['200801', '100'], ['200802', '151'], ['200805', '160'], ['200812', '50']]
</snippet></ROW><ROW><id>10296668</id><snippet>Toplevel</snippet></ROW><ROW><id>10296829</id><snippet>--</snippet></ROW><ROW><id>10296998</id><snippet>for tactic in self._currentTactics:
</snippet></ROW><ROW><id>10296998</id><snippet>for tactic in self._currentTactics[:]:
</snippet></ROW><ROW><id>10297181</id><snippet>s1="hello world"
L1=s1.split(" ")
t1=tuple(L1)
print type(t1)
tuple


print(t1)
('hello', 'world')
</snippet></ROW><ROW><id>10297272</id><snippet>decoded_data = json.loads(data)</snippet></ROW><ROW><id>10297272</id><snippet>decoded_data['results'][0]['formatted_address']</snippet></ROW><ROW><id>10297614</id><snippet>sys.path</snippet></ROW><ROW><id>10297614</id><snippet># assuming that the code is in test's __init__.py
import os
import sys
sys.path.insert(0, os.path.abspath( os.path.join(os.path.dirname(__file__), 
                                               '../src/') ))
# now you can be sure that the project_root_dir/src comes first in sys.path
</snippet></ROW><ROW><id>10297655</id><snippet>File</snippet></ROW><ROW><id>10297655</id><snippet>django.core.files.base.ContentFile</snippet></ROW><ROW><id>10297655</id><snippet>self.image.save("test.jpg", ContentFile(content), save=False)
</snippet></ROW><ROW><id>10297655</id><snippet>File</snippet></ROW><ROW><id>10297655</id><snippet>StringIO</snippet></ROW><ROW><id>10297655</id><snippet>size</snippet></ROW><ROW><id>10297655</id><snippet>size</snippet></ROW><ROW><id>10297655</id><snippet>File</snippet></ROW><ROW><id>10297655</id><snippet>ImageFile</snippet></ROW><ROW><id>10297655</id><snippet>StringIO</snippet></ROW><ROW><id>10297655</id><snippet>s = StringIO()
s.write(urllib2.urlopen(self.creative_url).read())
s.size = s.tell()
self.image.save('test.jpg', File(s), save=False)
</snippet></ROW><ROW><id>10297655</id><snippet>save=False</snippet></ROW><ROW><id>10297655</id><snippet>self.image.save</snippet></ROW><ROW><id>10297655</id><snippet>save=True</snippet></ROW><ROW><id>10297655</id><snippet>save</snippet></ROW><ROW><id>10298193</id><snippet>(?&lt;=&lt;b&gt;).*?(?=&lt;\/b&gt;)
</snippet></ROW><ROW><id>10298439</id><snippet>timeout=False</snippet></ROW><ROW><id>10298439</id><snippet>for doc in coll.find(timeout=False)
</snippet></ROW><ROW><id>10298531</id><snippet>class Bar: 
    ...


class BarAction(argparse.Action):
    def __call__(self,parser,namespace,values,option_string=None):
        try:  #Catch the runtime error if it occures.
           l=[Bar(v) for v in values] #Create Bars, raise RuntimeError if bad arg passed.
        except RuntimeError as E:
           #Optional:  Print some other error here.  for example: `print E; exit(1)`  
           parser.error()

        setattr(namespace,self.dest,l) #add the list to the namespace

...
parser.add_argument('-b', '--bar', nargs='*',
                    choices=VALID_BAR_NAMES,
                    action=BarAction,  # SELECTED TYPE -- The action does all the type conversion instead of the type keyword.
                    help=('Specify one or many valid bar(s)'))

...
</snippet></ROW><ROW><id>10298872</id><snippet>connection = MasterSlaveConnection(master, slaves=[slave1, slave2, master)
</snippet></ROW><ROW><id>10299274</id><snippet>def save(self, commit=True):
    user = super(CustomFormThing, self).save(commit=False)
    #set some other attrs on user here ...
    user._some = 'some'
    user._other = 'other'
    if commit:
        user.save()

    return user

@receiver(post_save, sender=User)
def create_profile(sender, instance, created, **kwargs):
    some_id = getattr(instance, '_some', None)
    other_id = getattr(instance, '_other', None)

    if created:
        #do something with the kwargs above...
</snippet></ROW><ROW><id>10300101</id><snippet>sorted(a.keys(), key=a.get)[:10]
</snippet></ROW><ROW><id>10300304</id><snippet>TypeError: bad operand type for abs(): 'str'
</snippet></ROW><ROW><id>10300304</id><snippet>listA.sort(key = lambda x: abs(int(x)))
</snippet></ROW><ROW><id>10300381</id><snippet>first, rest = seq[0], seq[1:]</snippet></ROW><ROW><id>10300381</id><snippet>first, *rest = seq</snippet></ROW><ROW><id>10300381</id><snippet>it = iter(seq)</snippet></ROW><ROW><id>10300381</id><snippet>first = it.next()</snippet></ROW><ROW><id>10300381</id><snippet>rest = list(it)</snippet></ROW><ROW><id>10300381</id><snippet>def unpack(first, *rest): 
  return first, rest
first, rest = unpack( *seq )
</snippet></ROW><ROW><id>10300381</id><snippet>def unpack_nfirst(seq, nfirst):
  it = iter(seq)
  for x in xrange(nfirst):
    yield next(it, None)
  yield tuple(it)
first, rest = unpack_nfirst(seq, 1)
</snippet></ROW><ROW><id>10300650</id><snippet>myapplication.wsgi</snippet></ROW><ROW><id>10300650</id><snippet>import os
import sys

sys.path.append('/srv/www/domain.com/myapplication/')
os.environ['PYTHON_EGG_CACHE'] = '/srv/www/domain.com/myapplication/.python-egg'

from myapplication import app as application
</snippet></ROW><ROW><id>10300657</id><snippet>ListData</snippet></ROW><ROW><id>10300657</id><snippet>ListData[i]</snippet></ROW><ROW><id>10300657</id><snippet>i</snippet></ROW><ROW><id>10300657</id><snippet>ListData[i][0]</snippet></ROW><ROW><id>10300657</id><snippet>max_val</snippet></ROW><ROW><id>10300657</id><snippet>ListData = [int(item/max_val) for item in ListData]
</snippet></ROW><ROW><id>10300973</id><snippet>from random import shuffle

def merge(events, actors, index=None):
    """Returns list of unique pairs of events and actors, none of which may on index"""
    if len(events) == 0:
        return []
    if index is None:
        index = set()

    merged = None
    tried_pairs = set()
    for event in events:
        for i, actor in enumerate(actors):
            pair = (event, actor)
            if pair not in index and pair not in tried_pairs:
                new_index = index.union([pair])
                rest = merge(events[1:], actors[:i]+actors[i+1:], new_index)

                if rest is not None:
                    # Found! Done.
                    merged = [pair] + rest
                    break
                else:
                    tried_pairs.add(pair)
        if merged is not None:
            break

    return merged


if __name__ == '__main__':
    _events = ['P1','P1','P1','P2','P2','P2','P3','P3','P3','P4','P5','P6','P7','P7']
    _actors = ['IE','IE','ID','ID','IA','IA','IA','IC','IB','IF','IG','IH','IH','IA']
    shuffle(_events)
    edgelist = merge(_events, _actors)

    if edgelist is not None:
        print 'Solution obtained: '
        for item in edgelist:
            print item
    else:
        print 'No possible solution with these events and actors.'
</snippet></ROW><ROW><id>10300995</id><snippet>def a(x):
   ...

a = my_decorator(a)
</snippet></ROW><ROW><id>10300995</id><snippet>@my_decorator(param1, param2)
def my_func(...):
   ...
</snippet></ROW><ROW><id>10300995</id><snippet>f</snippet></ROW><ROW><id>10300995</id><snippet>def my_dec_factory(param1, param2):
   ...
   ...
   def real_decorator(func):
       ...
       def wraper_func(*args, **kw):
           ...
           #use param1
           result = func(*args, **kw)
           #use param2
           return result
</snippet></ROW><ROW><id>10300995</id><snippet>class MyDecorator(object):
    def __init__(self, func, param1, param2):
        self.func = func
        self.param1, self.param2 = param1, param2

     def __call__(self, *args, **kw):
           ...
           #use self.param1
           result = self.func(*args, **kw)
           #use self.param2
           return result

def my_dec_factory(param1, param2):
    def decorator(func):
         return MyDecorator(func, param1, param2)
    return decorator
</snippet></ROW><ROW><id>10301159</id><snippet>import sys
from code import InteractiveConsole

class FileCacher:
    "Cache the stdout text so we can analyze it before returning it"
    def __init__(self):
        self.reset()

    def reset(self):
        self.out = []

    def write(self, line):
        self.out.append(line)

    def flush(self):
        output = '\n'.join(self.out)
        self.reset()
        return output


class Shell(InteractiveConsole):
    "Wrapper around Python that can filter input/output to the shell"
    def __init__(self):
        self.stdout = sys.stdout
        self.cache = FileCacher()
        InteractiveConsole.__init__(self)
        return

    def get_output(self):
        sys.stdout = self.cache

    def return_output(self):
        sys.stdout = self.stdout

    def push(self, line):
        self.get_output()
        # you can filter input here by doing something like
        # line = filter(line)
        InteractiveConsole.push(self, line)
        self.return_output()
        output = self.cache.flush()
        # you can filter the output here by doing something like
        # output = filter(output)
        print output  # or do something else with it
        return

if __name__ == '__main__':
    try:
        import IPython
        IPython.embed()
    except:
        sh = Shell()
        sh.interact()
</snippet></ROW><ROW><id>10301159</id><snippet>cache</snippet></ROW><ROW><id>10301159</id><snippet>stdout</snippet></ROW><ROW><id>10301174</id><snippet>from datetime import datetime
#            date                 open   close    high    low
quotes = [(datetime(2012, 2, 1), 103.62, 102.01, 103.62, 101.90),
          (datetime(2012, 2, 2), 102.24, 102.90, 103.16, 102.09),
          ...
          (datetime(2012, 4, 12), 100.89, 102.59, 102.86, 100.51)]
</snippet></ROW><ROW><id>10301174</id><snippet>matplotlib.dates.date2num</snippet></ROW><ROW><id>10301174</id><snippet>from matplotlib.dates import date2num

# I'm assuming you have tuples, so we can't modify them in-place...
quotes = [(date2num(item[0]),) + item[1:] for item in quotes]
</snippet></ROW><ROW><id>10301189</id><snippet>import bisect
import random
import timeit


def bisect_solution(size=10000):
    lst = []
    for n in xrange(size):
        value = random.randint(1, 1000000)
        bisect.insort_left(lst, value)
    return lst


# Cut out of the bisect module to be used in bisect_solution2()
def insort_left(a, x, lo=0, hi=None):
    """Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the left of the leftmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    """

    if lo &lt; 0:
        raise ValueError('lo must be non-negative')
    if hi is None:
        hi = len(a)
    while lo &lt; hi:
        mid = (lo+hi)//2
        if a[mid] &lt; x: lo = mid+1
        else: hi = mid
    a.insert(lo, x)


def bisect_solution2(size=10000):
    lst = []
    for n in xrange(size):
        value = random.randint(1, 1000000)
        insort_left(lst, value)
    return lst


def sort_solution(size=10000):
    lst = []
    for n in xrange(size):
        value = random.randint(1, 1000000)
        lst.append(value)
        lst.sort()
    return lst


t = timeit.timeit('bisect_solution()', 'from __main__ import bisect_solution', number = 10)
print "bisect_solution: ", t

t = timeit.timeit('bisect_solution2()', 'from __main__ import bisect_solution2', number = 10)
print "bisect_solution2: ", t

t = timeit.timeit('sort_solution()', 'from __main__ import sort_solution', number = 10)
print "sort_solution: ", t
</snippet></ROW><ROW><id>10301189</id><snippet>bisect_solution:  0.637892403587
bisect_solution2:  0.988893038133
sort_solution:  15.3521410901
</snippet></ROW><ROW><id>10301189</id><snippet>import random
import timeit


def random_date_tuple():
    s1 = '{0}-{1:02}-{2:02}'.format(random.randint(2000, 2050),
                                    random.randint(1, 12),
                                    random.randint(1, 31))
    e2 = random.randint(1,50)
    return (s1, e2)


def my_cmp(a, b):
    result = cmp(a[0], b[0])   # comparing the date part of the tuple
    if result == 0:
        return cmp(a[1], b[1]) # comparint the other part of the tuple
    return result


def my_insort_left(a, x, cmp=my_cmp, lo=0, hi=None):
    """The bisect.insort_left() modified for comparison of tuples."""

    if lo &lt; 0:
        raise ValueError('lo must be non-negative')
    if hi is None:
        hi = len(a)
    while lo &lt; hi:
        mid = (lo+hi)//2
        if cmp(a[mid], x) &lt; 0: 
            lo = mid+1
        else: 
            hi = mid
    a.insert(lo, x)


def bisect_solution3(size=1000):
    lst = []
    for n in xrange(size):
        value = random_date_tuple()
        my_insort_left(lst, value)
    return lst


def sort_solution(size=1000):
    lst = []
    for n in xrange(size):
        value = random_date_tuple()
        lst.append(value)
        lst.sort(cmp=my_cmp)
    return lst


t = timeit.timeit('bisect_solution3()', 'from __main__ import bisect_solution3', number = 10)
print "bisect_solution3: ", t

t = timeit.timeit('sort_solution()', 'from __main__ import sort_solution', number = 10)
print "sort_solution: ", t

print bisect_solution3()[:10]
</snippet></ROW><ROW><id>10301189</id><snippet>bisect_solution3:  0.223602245968
sort_solution:  3.69388944301
[('2000-02-01', 20), ('2000-02-13', 48), ('2000-03-11', 25), ('2000-03-13', 43),
 ('2000-03-26', 48), ('2000-05-04', 17), ('2000-06-06', 23), ('2000-06-12', 31),
 ('2000-06-15', 15), ('2000-07-07', 50)]
</snippet></ROW><ROW><id>10301360</id><snippet>dixnary()</snippet></ROW><ROW><id>10301360</id><snippet>print dixnary()</snippet></ROW><ROW><id>10301360</id><snippet>def dixnary():
    return "Dictionary contents :\n%s\nLength = %d" % (d1, len(d1))

print dixnary()
</snippet></ROW><ROW><id>10301664</id><snippet>from collections import defaultdict

x = defaultdict(list)
x['Key1'].append((1.000,2.003,3.0029))
</snippet></ROW><ROW><id>10301755</id><snippet>with open("a.txt") as a:
    with open("b.txt") as b:
        with open("c.txt", "w") as c:
            c.write("".join(set(a) - set(b)))
</snippet></ROW><ROW><id>10301755</id><snippet>with open("a.txt") as a:
    with open("b.txt") as b:
        with open("c.txt", "w") as c:
            b_lines = set(b)
            c.write("".join(line for line in a if not line in b_lines))
</snippet></ROW><ROW><id>10301958</id><snippet>timeit.timeit('try:\n    a=1\nexcept:\n    pass')
</snippet></ROW><ROW><id>10301958</id><snippet>stmt = '''\
try:
    a=1
except:
    pass'''
timeit.timeit(stmt)
</snippet></ROW><ROW><id>10302174</id><snippet>getrefcount()</snippet></ROW><ROW><id>10302174</id><snippet>getrefcount().</snippet></ROW><ROW><id>10302174</id><snippet>getrefcount()</snippet></ROW><ROW><id>10302174</id><snippet>del a</snippet></ROW><ROW><id>10302235</id><snippet>import timeit

def auto_timeit(stmt='pass', setup='pass'):
    n = 1
    t = timeit.timeit(stmt, setup, number=n)

    while t &lt; 0.2:
        n *= 10
        t = timeit.timeit(stmt, setup, number=n)

    return t / n # normalise to time-per-run
</snippet></ROW><ROW><id>10302295</id><snippet>os</snippet></ROW><ROW><id>10302295</id><snippet>pickle</snippet></ROW><ROW><id>10302295</id><snippet># pickle.py
def find_class(self, module, name):
    # Subclasses may override this
    __import__(module)
    mod = sys.modules[module]
    klass = getattr(mod, name)
    return klass
</snippet></ROW><ROW><id>10302295</id><snippet>__import__(module)</snippet></ROW><ROW><id>10302295</id><snippet>GLOBAL 'os system'</snippet></ROW><ROW><id>10302314</id><snippet>scores.append(line.rstrip("\n"))</snippet></ROW><ROW><id>10302314</id><snippet>int(raw_input("What score did you get?: "))</snippet></ROW><ROW><id>10302314</id><snippet>'1' &lt; '12' &lt; '3'</snippet></ROW><ROW><id>10302314</id><snippet>&gt;&gt;&gt; sorted([1, 8, '11', '3', '8'])
[1, 8, '11', '3', '8']
</snippet></ROW><ROW><id>10302314</id><snippet>scores.sort(reverse=True)</snippet></ROW><ROW><id>10302314</id><snippet>except:</snippet></ROW><ROW><id>10302314</id><snippet>^C</snippet></ROW><ROW><id>10302314</id><snippet>except Exception:</snippet></ROW><ROW><id>10302483</id><snippet>getPage</snippet></ROW><ROW><id>10302483</id><snippet>Agent</snippet></ROW><ROW><id>10302483</id><snippet>getPage</snippet></ROW><ROW><id>10302483</id><snippet>HTTPClientFactory</snippet></ROW><ROW><id>10302483</id><snippet>method</snippet></ROW><ROW><id>10302483</id><snippet>postdata</snippet></ROW><ROW><id>10302483</id><snippet>getPage</snippet></ROW><ROW><id>10302483</id><snippet>d = getPage(url, method='POST', postdata="hello, world, or whatever.")
</snippet></ROW><ROW><id>10302483</id><snippet>Agent</snippet></ROW><ROW><id>10302483</id><snippet>FileBodyProducer</snippet></ROW><ROW><id>10302538</id><snippet>bdb</snippet></ROW><ROW><id>10302538</id><snippet>pdb.Pdb</snippet></ROW><ROW><id>10302538</id><snippet>bdb</snippet></ROW><ROW><id>10302600</id><snippet>_lolanimal</snippet></ROW><ROW><id>10302600</id><snippet>lolanimal</snippet></ROW><ROW><id>10302600</id><snippet>lolanimal</snippet></ROW><ROW><id>10302600</id><snippet>_lolanimal</snippet></ROW><ROW><id>10302600</id><snippet>_lolanimal</snippet></ROW><ROW><id>10302600</id><snippet>lolspecific</snippet></ROW><ROW><id>10302612</id><snippet>m</snippet></ROW><ROW><id>10302612</id><snippet>x</snippet></ROW><ROW><id>10302612</id><snippet>k</snippet></ROW><ROW><id>10302612</id><snippet>u</snippet></ROW><ROW><id>10302612</id><snippet>n</snippet></ROW><ROW><id>10302612</id><snippet>N</snippet></ROW><ROW><id>10302612</id><snippet>a_m</snippet></ROW><ROW><id>10302612</id><snippet>f(x)</snippet></ROW><ROW><id>10302612</id><snippet>1/N</snippet></ROW><ROW><id>10302753</id><snippet>from math import *
def erfcc(x):
    """Complementary error function."""
    z = abs(x)
    t = 1. / (1. + 0.5*z)
    r = t * exp(-z*z-1.26551223+t*(1.00002368+t*(.37409196+
        t*(.09678418+t*(-.18628806+t*(.27886807+
        t*(-1.13520398+t*(1.48851587+t*(-.82215223+
        t*.17087277)))))))))
    if (x &gt;= 0.):
        return r
    else:
        return 2. - r

def ncdf(x):
    return 1. - 0.5*erfcc(x/(2**0.5))
</snippet></ROW><ROW><id>10302886</id><snippet>pauseProducing</snippet></ROW><ROW><id>10302886</id><snippet>resumeProducing</snippet></ROW><ROW><id>10302886</id><snippet>pauseProducing</snippet></ROW><ROW><id>10302886</id><snippet>resumeProducing</snippet></ROW><ROW><id>10302886</id><snippet>registerProducer</snippet></ROW><ROW><id>10302886</id><snippet>pauseProducing</snippet></ROW><ROW><id>10302886</id><snippet>resumeProducing</snippet></ROW><ROW><id>10303127</id><snippet>N = 10
diag = np.zeros(N) + 2
udiag = np.zeros(N) + 1
ldiag = np.zeros(N) + 1
mat = scipy.sparse.dia_matrix(([diag, udiag, ldiag], [0, 2, -2]), shape=(N, N))
print mat.todense()
[[ 2.  0.  1.  0.  0.  0.  0.  0.  0.  0.]
[ 0.  2.  0.  1.  0.  0.  0.  0.  0.  0.]
[ 1.  0.  2.  0.  1.  0.  0.  0.  0.  0.]
[ 0.  1.  0.  2.  0.  1.  0.  0.  0.  0.]
[ 0.  0.  1.  0.  2.  0.  1.  0.  0.  0.]
[ 0.  0.  0.  1.  0.  2.  0.  1.  0.  0.]
[ 0.  0.  0.  0.  1.  0.  2.  0.  1.  0.]
[ 0.  0.  0.  0.  0.  1.  0.  2.  0.  1.]
[ 0.  0.  0.  0.  0.  0.  1.  0.  2.  0.]
[ 0.  0.  0.  0.  0.  0.  0.  1.  0.  2.]]
</snippet></ROW><ROW><id>10303392</id><snippet>categories = models.ManyToManyField(Category, null = True, blank = True)
</snippet></ROW><ROW><id>10303392</id><snippet>categories = models.ForeignKey("Category", null = True, blank = True)
</snippet></ROW><ROW><id>10303392</id><snippet>def inlineformset_factory(parent_model, model, form=ModelForm,
                          formset=BaseInlineFormSet, fk_name=None,
                          fields=None, exclude=None,
                          extra=3, can_order=False, can_delete=True, max_num=None,
                          formfield_callback=None):
    """
    Returns an ``InlineFormSet`` for the given kwargs.

    You must provide ``fk_name`` if ``model`` has more than one ``ForeignKey``
    to ``parent_model``.
    """
</snippet></ROW><ROW><id>10303461</id><snippet>pylint --errors-only --ignored-classes=_socketobject</snippet></ROW><ROW><id>10303461</id><snippet>ignored-classes=SQLObject,_socketobject
</snippet></ROW><ROW><id>10303461</id><snippet>~/.pylintrc</snippet></ROW><ROW><id>10303539</id><snippet>types.FunctionType</snippet></ROW><ROW><id>10303539</id><snippet>def test_func(): print 'wow' 
dynf = types.FunctionType(test_func.func_code, {})
dynf()
</snippet></ROW><ROW><id>10303539</id><snippet>wow
</snippet></ROW><ROW><id>10303539</id><snippet>dynf = types.FunctionType(compile('print "really WoW"', 'dyn.py', 'exec'), {})
dynf()
</snippet></ROW><ROW><id>10303539</id><snippet>really WoW
</snippet></ROW><ROW><id>10303539</id><snippet>dynf = types.FunctionType(compile('test_func():\ntest_func()', 'dyn.py', 'exec'), globals())
dynf()
</snippet></ROW><ROW><id>10303539</id><snippet>wow
wow
</snippet></ROW><ROW><id>10303539</id><snippet>types.CodeType</snippet></ROW><ROW><id>10303539</id><snippet>import types
import sys,imp

code = """def f(a,b,c):
    print a+b+c, "really WoW"
"""
module = imp.new_module('myfunctions')
exec code in module.__dict__
module.f('W', 'o', 'W')
</snippet></ROW><ROW><id>10303539</id><snippet>WoW really WoW
</snippet></ROW><ROW><id>10303876</id><snippet># start with an empty output dictionary
out = {}

# iterate through the keys in the dictionary
for key in p:
   # iterate through the values in the sublist
   for val in p[key]:
      # check to see if we've seen this one before
      if not out.has_key(val):
         # if not, start it out at 0
         out[val] = 0

      # increment by one because we've seen it once more
      out[val] += 1

print out
</snippet></ROW><ROW><id>10303901</id><snippet>&gt;&gt;&gt; ("%.4f" % k).lstrip('0')
'.1337'
</snippet></ROW><ROW><id>10303901</id><snippet>[1:]</snippet></ROW><ROW><id>10303901</id><snippet>&gt;&gt;&gt; re.sub('0(?=[.])', '', ("%0.4f" % -k))
'-.1337'
</snippet></ROW><ROW><id>10303989</id><snippet>from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np

NANGLES = 200

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
nvals = [0, 2, 4, 10, 20, 40, 100]
for iy in range(len(nvals)):
    n = nvals[iy]
    x = np.arange(NANGLES) / float(NANGLES)
    y = np.ones(NANGLES)*iy # set y position to same value, with regular step
    z = np.sin(n*x*np.pi)
    ax.plot(x, y, z)
ax.set_ylabel('n')
ax.set_yticklabels(nvals) # update y ticks (set at regular step) to your vals

plt.savefig('stackedplot.png')
plt.show()
</snippet></ROW><ROW><id>10304143</id><snippet>string = " this is how i do is it..is this is how we do it.. this is how everyone do it is"

from collections import Counter 

s_count = Counter(string)

def score_count(x):
    return sum(s_count[ele] for ele in x)

most_imp = None
high_val = 0
n = 10   

for i in xrange(0, len(string) - n):

    temp_value = score_count(string[i: i + n])

    if temp_value &gt; high_val:
        high_val = temp_value
        most_imp = string[i : i + n]
</snippet></ROW><ROW><id>10304143</id><snippet>&gt;&gt;&gt; most_imp
' i do is i'
</snippet></ROW><ROW><id>10304210</id><snippet>output = np.zeros((N, 2), dtype='float')
output[:, 1] = C[:N]
</snippet></ROW><ROW><id>10304916</id><snippet>assem</snippet></ROW><ROW><id>10304916</id><snippet>file</snippet></ROW><ROW><id>10304916</id><snippet>assem</snippet></ROW><ROW><id>10304916</id><snippet>input = open(file, 'r')</snippet></ROW><ROW><id>10304916</id><snippet>file</snippet></ROW><ROW><id>10304916</id><snippet>import myParser</snippet></ROW><ROW><id>10304916</id><snippet>from myParser import Parser</snippet></ROW><ROW><id>10305046</id><snippet>import sys
sys.path.append('/path/to/wibble')
</snippet></ROW><ROW><id>10305046</id><snippet>export PYTHONPATH=$PYTHONPATH:/path/to/wibble
</snippet></ROW><ROW><id>10305071</id><snippet>import os, os.path, fnmatch

def find_files(root, pattern, exclude_hidden=True):
    """ Get the path to arbitrary .ext file under the root dir """
    for dir, _, files in os.walk(root):
        for f in fnmatch.filter(files, pattern):
            path = os.path.join(dir, f)
            if '/.' not in path or not exclude_hidden:
                yield path
</snippet></ROW><ROW><id>10305071</id><snippet> first_txt = next(find_files(some_dir, '*.txt'))
</snippet></ROW><ROW><id>10305218</id><snippet>mystring = mystring.replace(',', ' ')  # convert all commas to spaces
tokens = mystring.split()  # split at spaces
</snippet></ROW><ROW><id>10305218</id><snippet>p = '(NM_\d+)\s+(chr\d+)\s+([+|-])\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+),(\d+),\s+(\d+),(\d+),'</snippet></ROW><ROW><id>10305218</id><snippet>[+-]</snippet></ROW><ROW><id>10305218</id><snippet>\s+</snippet></ROW><ROW><id>10305218</id><snippet>(chr\d+)</snippet></ROW><ROW><id>10305218</id><snippet>\</snippet></ROW><ROW><id>10305218</id><snippet>,s+(</snippet></ROW><ROW><id>10305400</id><snippet>&gt;&gt;&gt; def decomposition(i):
        while i &gt; 0:
            n = random.randint(1, i)
            yield n
            i -= n

&gt;&gt;&gt; list(decomposition(7))
[2, 4, 1]
&gt;&gt;&gt; list(decomposition(7))
[2, 1, 3, 1]
&gt;&gt;&gt; list(decomposition(7))
[3, 1, 3]
&gt;&gt;&gt; list(decomposition(7))
[6, 1]
&gt;&gt;&gt; list(decomposition(7))
[5, 1, 1]
</snippet></ROW><ROW><id>10305460</id><snippet>Lib/tests</snippet></ROW><ROW><id>10305494</id><snippet>def DownloadThreadFunc(self):
    try:
        url = self.lines[1]
        data = None
        req = urllib2.Request(url, data, {})
        handle = urllib2.urlopen(req)

        self.size = int(handle.info()["Content-Length"])
        self.actualSize = 0
        name = path.join(DIR_UPDATES, url.split("/")[-1])
        blocksize = 64*1024

        fo = open(name, "wb")
        while not self.terminate:
            block = handle.read(blocksize)
            self.actualSize += len(block)
            if len(block) == 0:
                break
            fo.write(block)
        fo.close()
    except (urllib2.URLError, socket.timeout), e:
        try:
            fo.close()
        except:
            pass
        error("Download failed.", unicode(e))  
</snippet></ROW><ROW><id>10305494</id><snippet>self.size</snippet></ROW><ROW><id>10305494</id><snippet>self.actualSize</snippet></ROW><ROW><id>10305494</id><snippet>self.terminate</snippet></ROW><ROW><id>10305696</id><snippet>:~/Downloads/avbin-linux-x86-64-7$ sudo ./install.sh 
</snippet></ROW><ROW><id>10305714</id><snippet>PyList_SET_ITEM</snippet></ROW><ROW><id>10305714</id><snippet>NULL</snippet></ROW><ROW><id>10305714</id><snippet>i</snippet></ROW><ROW><id>10305714</id><snippet>PyList_SET_ITEM</snippet></ROW><ROW><id>10305714</id><snippet>PyList_SetItem</snippet></ROW><ROW><id>10305714</id><snippet>i</snippet></ROW><ROW><id>10305714</id><snippet>PyList_SET_ITEM</snippet></ROW><ROW><id>10305714</id><snippet>PyList_SetItem</snippet></ROW><ROW><id>10305714</id><snippet>PyList_SetItem</snippet></ROW><ROW><id>10305714</id><snippet>PyList_SET_ITEM</snippet></ROW><ROW><id>10305739</id><snippet>if cols[2] != '+' or '-':
</snippet></ROW><ROW><id>10305739</id><snippet>if not (cols[2] == '+' or cols[2] =='-'):
</snippet></ROW><ROW><id>10305739</id><snippet>if cols[2] not in ('+', '-'):
</snippet></ROW><ROW><id>10305739</id><snippet>fp.readlines()</snippet></ROW><ROW><id>10305739</id><snippet>fp</snippet></ROW><ROW><id>10305739</id><snippet>for line in fp:
</snippet></ROW><ROW><id>10305739</id><snippet>n</snippet></ROW><ROW><id>10305739</id><snippet>for n, line in enumerate(fp, 1):
</snippet></ROW><ROW><id>10305739</id><snippet>enumerate()</snippet></ROW><ROW><id>10305739</id><snippet>with</snippet></ROW><ROW><id>10305739</id><snippet>with open(infile, 'r') as fp:
    line = fp.readline().strip()
    if not line.startswith('#'):
        print ('First line does not start with #')
        sys.exit(1)
    for line in fp:
        # process lines here
</snippet></ROW><ROW><id>10305739</id><snippet>i = search(d, line)
</snippet></ROW><ROW><id>10305739</id><snippet>from re import search</snippet></ROW><ROW><id>10305739</id><snippet>import re</snippet></ROW><ROW><id>10305739</id><snippet>re.search()</snippet></ROW><ROW><id>10305739</id><snippet>i</snippet></ROW><ROW><id>10305739</id><snippet>re.search()</snippet></ROW><ROW><id>10305739</id><snippet>None</snippet></ROW><ROW><id>10305739</id><snippet>r</snippet></ROW><ROW><id>10305739</id><snippet>i</snippet></ROW><ROW><id>10305739</id><snippet>r</snippet></ROW><ROW><id>10305739</id><snippet>m</snippet></ROW><ROW><id>10305739</id><snippet>len(cols[8])</snippet></ROW><ROW><id>10305739</id><snippet>cols[8]</snippet></ROW><ROW><id>10305739</id><snippet>.split('')</snippet></ROW><ROW><id>10305739</id><snippet>ValueError: empty separator</snippet></ROW><ROW><id>10305739</id><snippet>.split()</snippet></ROW><ROW><id>10305739</id><snippet>FirstLine</snippet></ROW><ROW><id>10305739</id><snippet>import sys

def parse_list_of_int(s):
    try:
        return [int(x) for x in s.split(',')]
    except Exception:
        return None

with open("test.txt", 'r') as f:
    # read line 1
    line = f.readline().strip()
    if not line.startswith('#'):
        print ('First line does not start with #')
        sys.exit(1)

    # need to start enumerate() at 2 because we pulled line 1 out above
    for i, line in enumerate(f, 2):
        cols = line.strip().split()
        if len(cols) != 10:
            print('line {0}: Length not equal to 10'.format(i))
            sys.exit(1)
        if cols[2] not in ('+', '-'):
            print('line {0}: Column 2 is not a + or - symbol'.format(i))
            sys.exit(1)
        lst8 = parse_list_of_int(cols[8])
        if lst8 is None:
            print('line {0}: Column 8 is not a comma-separated list of integers').format(i)
            sys.exit(1)
        lst9 = parse_list_of_int(cols[9])
        if lst9 is None:
            print('line {0}: Column 9 is not a comma-separated list of integers'.format(i))
            sys.exit(1)
        if len(lst8) != len(lst9):
            print('line {0}: Column 8 and column 9 do not have same number of integers'.format(i))
            sys.exit(1)

print('No problems!')
sys.exit(0)
</snippet></ROW><ROW><id>10305865</id><snippet>reversed(yourList)</snippet></ROW><ROW><id>10305865</id><snippet>reversed(enumerate(yourList))</snippet></ROW><ROW><id>10305865</id><snippet>enumerate</snippet></ROW><ROW><id>10305865</id><snippet>reversed</snippet></ROW><ROW><id>10305865</id><snippet>for i in xrange(len(yourList)-1, -1, -1):
    item = yourList[i]
    ...
</snippet></ROW><ROW><id>10305865</id><snippet>reversed</snippet></ROW><ROW><id>10305865</id><snippet>range</snippet></ROW><ROW><id>10305865</id><snippet>xrange</snippet></ROW><ROW><id>10305865</id><snippet>for i in reversed(range(len(yourList))):  
    item = yourList[i]
    ...
</snippet></ROW><ROW><id>10305865</id><snippet>next(reversed(range(10**10)))</snippet></ROW><ROW><id>10306159</id><snippet>python assembler.py &lt;filename&gt;</snippet></ROW><ROW><id>10306159</id><snippet>if __name__ == "__main__"</snippet></ROW><ROW><id>10306159</id><snippet>argparse</snippet></ROW><ROW><id>10306159</id><snippet>optparse</snippet></ROW><ROW><id>10306159</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>10306159</id><snippet>def assem(myFile):
    print "Hello ,World!" 
    import myParser
    from myParser import Parser
    import code
    import symboleTable
    from symboleTable import SymboleTable

    newFile = "Prog.hack"
    output = open(newFile, 'w')
    input = open(myFile, 'r')
    prsr = Parser(input)

    while prsr.hasMoreCommands():
        str = "BLANK"
        if(parser.commandType() == Parser.C_COMMAND):
            str= "111" + code.comp(prsr.comp()
                ) + code.dest(prsr.dest()) + code.jump(prsr.jump()
                ) + "\n"

        output.write(str)
        prsr.advance()

if __name__ == "__main__":
    import sys
    assem(sys.argv[1])
</snippet></ROW><ROW><id>10306159</id><snippet>python string formatting</snippet></ROW><ROW><id>10306191</id><snippet>self</snippet></ROW><ROW><id>10306191</id><snippet>def Process(self, *values):
</snippet></ROW><ROW><id>10306210</id><snippet>sliced=False</snippet></ROW><ROW><id>10306210</id><snippet>def getGenes(spliced, infile, outfile):
     spliced = False
</snippet></ROW><ROW><id>10306210</id><snippet>sys.argv.remove('s')</snippet></ROW><ROW><id>10306210</id><snippet>sys.argv.remove('-s')</snippet></ROW><ROW><id>10306210</id><snippet>if '-s' in sys.argv:
    spliced = True
    sys.argv.remove('-s') # you removed '-s' from sys.argv ,so the below if condition becomes false
    infile, outfile = sys.argv[1:]  

if sys.argv[1] != '-s':
    print('Invalid parameter, if spliced, must be -s')
    sys.exit(1)
</snippet></ROW><ROW><id>10306210</id><snippet>import sys

def getGenes(spliced, infile, outfile):
 spliced = False
if '-s' in sys.argv:
    spliced = True
    infile, outfile = sys.argv[2:]
if not infile.endswith('.genes'):
    print('Incorrect input file type')
    sys.exit(1)
if not outfile.endswith('.fa' or '.fasta'):
    print('Incorrect output file type')
    sys.exit(1)
if not 3 &lt;= len(sys.argv) &lt;= 4:
    print('Command line parameters missing')
    sys.exit(1)
if sys.argv[1] != '-s':
    print('Invalid parameter, if spliced, must be -s')
    sys.exit(1)
</snippet></ROW><ROW><id>10306658</id><snippet>get_by_id</snippet></ROW><ROW><id>10306658</id><snippet>entity = MyModel(parent = parentkey,
                 name   = 'somename')
entity.put()

entity_by_id = MyModel.get_by_id(entity.key().id(), parent = parentkey)
</snippet></ROW><ROW><id>10306781</id><snippet>def format_tree(tree):                                                                                            
    prefix = ''
    for node in tree:
        if isinstance(node, basestring):
            prefix = node
            yield node
        else:
            for elt in format_tree(node):
                yield prefix + '_' + elt 
</snippet></ROW><ROW><id>10306781</id><snippet>&gt;&gt;&gt; a = ['parent', ['child', 'child2', ['grandchild', ['ggrandchild']], 'child3']]
&gt;&gt;&gt; print '\n'.join(format_tree(a))
parent
parent_child
parent_child2
parent_child2_grandchild
parent_child2_grandchild_ggrandchild
parent_child3
</snippet></ROW><ROW><id>10306786</id><snippet>dnspython</snippet></ROW><ROW><id>10306786</id><snippet>import dns.resolver

answers = dns.resolver.query('dnspython.org', 'MX')
for rdata in answers:
    print 'Host', rdata.exchange, 'has preference', rdata.preference
</snippet></ROW><ROW><id>10306786</id><snippet>answers = dns.resolver.query(rdata.exchange)
[a.address for a in answers]
</snippet></ROW><ROW><id>10306786</id><snippet>try:
    answers = dns.resolver.query('bogus.test.for.nxdomain')
except dns.resolver.NXDOMAIN:
    print "NXDOMAIN exception caught."
else:
    print "What?  Maybe my query is going to a 'helpful' server" \
          "that resolves non-existant dns queries to its own server."
    print "Add a filter for the ip address(s) we just got."
    print list(answers)
</snippet></ROW><ROW><id>10306811</id><snippet>zip</snippet></ROW><ROW><id>10306811</id><snippet>from collections import Mapping

def treeZip(t1,t2):
    if isinstance(t1,Mapping) and isinstance(t2,Mapping):
        assert set(t1)==set(t2)
        for k,v1 in t1.items():
            v2 = t2[k]
            for tuple in treeZip(v1,v2):
                yield tuple
    else:
        yield (t1,t2)
</snippet></ROW><ROW><id>10306811</id><snippet>&gt;&gt;&gt; dict_a = {'a':1, 'b':2, 'c':{'d':3}}
&gt;&gt;&gt; dict_b = {'a':2, 'b':4, 'c':{'d':6}}
&gt;&gt;&gt; list( treeZip(dict_a, dict_b) )
[(1, 2), (3, 6), (2, 4)]
</snippet></ROW><ROW><id>10306811</id><snippet>from collections import Mapping

def treeZip(t1,t2, path=[]):
    if isinstance(t1,Mapping) and isinstance(t2,Mapping):
        assert set(t1)==set(t2)
        for k,v1 in t1.items():
            v2 = t2[k]
            for tuple in treeZip(v1,v2, path=path+[k]):
                yield tuple
    else:
        yield (path, (t1,t2))

&gt;&gt;&gt; list( treeZip(dict_a, dict_b) )
[(['a'], (1, 2)), (['c', 'd'], (3, 6)), (['b'], (2, 4))]
</snippet></ROW><ROW><id>10307016</id><snippet>import numpy as np
bins_x, bins_y = 1., 1.
x = np.array([1,1,2,2,3,3,3])
y = np.array([1,1,2,2,3,3,3])
w = np.array([1,2,3,4,5,6,7], 'float')

# You can get a bin number for each point like this
x = (x // bins_x).astype('int')
y = (y // bins_y).astype('int')
shape = [x.max()+1, y.max()+1]
bin = np.ravel_multi_index([x, y], shape)

# You could get the mean by doing something like:
mean = np.bincount(bin, w) / np.bincount(bin)

# Median is a bit harder
order = bin.argsort()
bin = bin[order]
w = w[order]
edges = (bin[1:] != bin[:-1]).nonzero()[0] + 1
med_index = (np.r_[0, edges] + np.r_[edges, len(w)]) // 2
median = w[med_index]

# But that's not quite right, so maybe
median2 = [np.median(i) for i in np.split(w, edges)]
</snippet></ROW><ROW><id>10307188</id><snippet>usage</snippet></ROW><ROW><id>10307188</id><snippet>c.execute("INSERT INTO cpu (`usage`) VALUES (%s)", (usage))
</snippet></ROW><ROW><id>10307252</id><snippet>def attach_listener(window, event_name, function):
    def wrapper(*args, **kwargs):
        if window.exists():
            return function(*args, **kwargs)
        else:
            remove_listener(wrapper.id_number)
    wrapper.id_number = add_listener(event_name, wrapper)
</snippet></ROW><ROW><id>10307480</id><snippet>&gt;&gt;&gt; shorten_title = lambda x, y: x[:x.rindex(' ', 0, y)]
&gt;&gt;&gt; shorten_title('Shorten title to a certain length', 20)
'Shorten title to a'
</snippet></ROW><ROW><id>10307480</id><snippet>def shorten_title2(x, y):
    if len(x) &lt;= y:
        return x
    elif ' ' not in x[:y]:                                          
        return x[:y]
    else:
        return x[:x.rindex(' ', 0, y + 1)]
</snippet></ROW><ROW><id>10307481</id><snippet>syncdb</snippet></ROW><ROW><id>10307481</id><snippet>south</snippet></ROW><ROW><id>10307551</id><snippet>bin()</snippet></ROW><ROW><id>10307551</id><snippet>&gt;&gt;&gt; bin(11)
'0b1011'
&gt;&gt;&gt; bin(11) + '0000'
'0b10110000'
</snippet></ROW><ROW><id>10307551</id><snippet>symbol</snippet></ROW><ROW><id>10307551</id><snippet>str.format()</snippet></ROW><ROW><id>10307551</id><snippet>bin()</snippet></ROW><ROW><id>10307551</id><snippet>0b</snippet></ROW><ROW><id>10307551</id><snippet>bin()</snippet></ROW><ROW><id>10307551</id><snippet>&gt;&gt;&gt; '0b{0:0&gt;8b}'.format(3)
'0b00000011'
&gt;&gt;&gt; '0b{0:0&gt;8b}'.format(11)
'0b00001011'
</snippet></ROW><ROW><id>10307630</id><snippet>pip</snippet></ROW><ROW><id>10307630</id><snippet>sudo apt-get install python-pip python-dev build-essential
sudo pip install reddit -U
</snippet></ROW><ROW><id>10307630</id><snippet>sudo easy_install pip
sudo pip install reddit -U
</snippet></ROW><ROW><id>10307738</id><snippet>%</snippet></ROW><ROW><id>10307738</id><snippet>def func(animalType):
    """
    This is a sample function.

    @param animalType: "It takes one of these animal types %(ANIMAL_TYPES)s"
    """ % {'ANIMAL_TYPES': ANIMAL_TYPES}
</snippet></ROW><ROW><id>10307738</id><snippet>%</snippet></ROW><ROW><id>10307738</id><snippet>__doc__</snippet></ROW><ROW><id>10307738</id><snippet>&gt;&gt;&gt; def a(): 'docstring works'
... 
&gt;&gt;&gt; a.__doc__
'docstring works'
&gt;&gt;&gt; def b(): "formatted docstring doesn't work %s" % ':-('
... 
&gt;&gt;&gt; b.__doc__
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10307738</id><snippet>func.__doc__ %= {'ANIMAL_TYPES': ANIMAL_TYPES}</snippet></ROW><ROW><id>10307738</id><snippet>python -OO</snippet></ROW><ROW><id>10307738</id><snippet>__doc__</snippet></ROW><ROW><id>10307738</id><snippet>-OO</snippet></ROW><ROW><id>10307738</id><snippet>&gt;&gt;&gt; def c(): "formatted docstring works %s"
... 
&gt;&gt;&gt; c.__doc__
"formatted docstring works %s"
&gt;&gt;&gt; c.__doc__ %= 'after'
&gt;&gt;&gt; c.__doc__
"formatted docstring works after"
</snippet></ROW><ROW><id>10307766</id><snippet>def find_loops(rna, min_pairs=3, min_loop=3):
    n = len(rna)
    result = []
    for loop_start in xrange(min_pairs, n - min_pairs - min_loop + 1):
        for loop_end in xrange(loop_start + min_loop, n - min_pairs):
            if (loop_end - loop_start &lt; min_loop + 2 or 
                    not base_pair(rna[loop_start], rna[loop_end - 1])):
                max_pairs = min(loop_start, n - loop_end)
                for k in xrange(max_pairs):
                    if not base_pair(rna[loop_start - k - 1], rna[loop_end + k]):
                        break
                else:
                    k = max_pairs
                if k &gt;= min_pairs:
                    result.append((loop_start - k, k, loop_end - loop_start))
    return result

def base_pair(x, y):
    return (x == 'A' and y == 'U' or
            x == 'C' and y == 'G' or
            x == 'G' and y == 'C' or
            x == 'U' and y == 'A')
</snippet></ROW><ROW><id>10307766</id><snippet>if</snippet></ROW><ROW><id>10307766</id><snippet>(start_pos, pair_count, loop_length)</snippet></ROW><ROW><id>10307766</id><snippet>pair_count</snippet></ROW><ROW><id>10307766</id><snippet>start_pos</snippet></ROW><ROW><id>10307766</id><snippet>loop_length</snippet></ROW><ROW><id>10307766</id><snippet>start_pos + pair_count + loop_length</snippet></ROW><ROW><id>10307766</id><snippet>print find_loops('GGGGAUUACAGCGUGUAAUCAAUA')</snippet></ROW><ROW><id>10307766</id><snippet>[(4, 3, 13), (3, 7, 3)]</snippet></ROW><ROW><id>10307766</id><snippet>AUU</snippet></ROW><ROW><id>10307766</id><snippet>AAU</snippet></ROW><ROW><id>10307766</id><snippet>GAUUACA</snippet></ROW><ROW><id>10307766</id><snippet>UGUAAUC</snippet></ROW><ROW><id>10307766</id><snippet>if</snippet></ROW><ROW><id>10307766</id><snippet>GAUUAC</snippet></ROW><ROW><id>10307766</id><snippet>GUAAUC</snippet></ROW><ROW><id>10307785</id><snippet>reactor</snippet></ROW><ROW><id>10307785</id><snippet>reactor</snippet></ROW><ROW><id>10307785</id><snippet>reactor.run() #@UndefinedVariable
</snippet></ROW><ROW><id>10307909</id><snippet>SELECT *
FROM  (
   SELECT unnest(
    ARRAY['1', '1.1', '1.2', '2', '2.1A', '2.1B', '2.2A', '101.1', '101.2']) AS s
   ) x
ORDER  BY rtrim(s, 'AB')::numeric, s;
</snippet></ROW><ROW><id>10307909</id><snippet>ARRAY</snippet></ROW><ROW><id>10307909</id><snippet>unnest()</snippet></ROW><ROW><id>10307909</id><snippet>ORDER BY</snippet></ROW><ROW><id>10307909</id><snippet>rtrim()</snippet></ROW><ROW><id>10307918</id><snippet>x_dt.replace(tzinfo=Eastern)</snippet></ROW><ROW><id>10307918</id><snippet>x_dt.replace(tzinfo=Eastern).utcoffset()</snippet></ROW><ROW><id>10307918</id><snippet>datetime.timedelta(-1, 72000)</snippet></ROW><ROW><id>10308007</id><snippet>str(exception_variable)</snippet></ROW><ROW><id>10308007</id><snippet>try:
  ...
except ValidationError as e:
  print str(e)
</snippet></ROW><ROW><id>10308007</id><snippet>msg</snippet></ROW><ROW><id>10308007</id><snippet>message</snippet></ROW><ROW><id>10308007</id><snippet>msg</snippet></ROW><ROW><id>10308007</id><snippet>message</snippet></ROW><ROW><id>10308007</id><snippet>str(exception)</snippet></ROW><ROW><id>10308187</id><snippet>plt.legend(numpoints=1)
</snippet></ROW><ROW><id>10308278</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.vstack([np.ones(11), np.arange(11)])

# We have two channels along axis 0, the signals are along axis 1
&gt;&gt;&gt; a
array([[  1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.],
       [  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.]])
&gt;&gt;&gt; np.fft.irfft(np.fft.rfft(a, axis=1), axis=1)
array([[  1.1       ,   1.1       ,   1.1       ,   1.1       ,
          1.1       ,   1.1       ,   1.1       ,   1.1       ,
          1.1       ,   1.1       ],
       [  0.55      ,   1.01836542,   2.51904294,   3.57565618,
          4.86463721,   6.05      ,   7.23536279,   8.52434382,
          9.58095706,  11.08163458]])
# irfft returns an even number along axis=1, even though a was (2, 11)

# When a is even along axis 1, we get a back after the irfft.
&gt;&gt;&gt; a = np.vstack([np.ones(10), np.arange(10)])
&gt;&gt;&gt; np.fft.irfft(np.fft.rfft(a, axis=1), axis=1)
array([[  1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
          1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
          1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
          1.00000000e+00],
       [  7.10542736e-16,   1.00000000e+00,   2.00000000e+00,
          3.00000000e+00,   4.00000000e+00,   5.00000000e+00,
          6.00000000e+00,   7.00000000e+00,   8.00000000e+00,
          9.00000000e+00]])

# It seems like you signals are along axis 0, here is an example where the signals are on axis 0
&gt;&gt;&gt; a = np.vstack([np.ones(10), np.arange(10)]).T
&gt;&gt;&gt; a
array([[ 1.,  0.],
       [ 1.,  1.],
       [ 1.,  2.],
       [ 1.,  3.],
       [ 1.,  4.],
       [ 1.,  5.],
       [ 1.,  6.],
       [ 1.,  7.],
       [ 1.,  8.],
       [ 1.,  9.]])
&gt;&gt;&gt; np.fft.irfft(np.fft.rfft(a, axis=0), axis=0)
array([[  1.00000000e+00,   7.10542736e-16],
       [  1.00000000e+00,   1.00000000e+00],
       [  1.00000000e+00,   2.00000000e+00],
       [  1.00000000e+00,   3.00000000e+00],
       [  1.00000000e+00,   4.00000000e+00],
       [  1.00000000e+00,   5.00000000e+00],
       [  1.00000000e+00,   6.00000000e+00],
       [  1.00000000e+00,   7.00000000e+00],
       [  1.00000000e+00,   8.00000000e+00],
       [  1.00000000e+00,   9.00000000e+00]])
</snippet></ROW><ROW><id>10308431</id><snippet>chr11</snippet></ROW><ROW><id>10308431</id><snippet>chr11</snippet></ROW><ROW><id>10308431</id><snippet>valid = false</snippet></ROW><ROW><id>10308431</id><snippet>import re

fp = open(infile, 'r')
fp.readline()
tar = re.findall(r'chr\d+', fp.readline())[0]
for line in fp:
    if (line.find(tar) == -1):
        print("Not valid")
        break
</snippet></ROW><ROW><id>10308756</id><snippet>for i in range(1, 10):
    for j in "abcdefghijklmnopqrstuvwxyz":
        print j * i
</snippet></ROW><ROW><id>10308830</id><snippet>import numpy as np
import matplotlib.pyplot as plt

a = np.array(((1, 2, 3), (4, 5, 6)))
plt.imshow(a)
plt.show()
</snippet></ROW><ROW><id>10308980</id><snippet>[(x[1],x[2]) for x in (x.split(";") for x in a.split("\n")) if x[1] != 5]
</snippet></ROW><ROW><id>10309046</id><snippet>from apiclient.discovery import build
...
service = build("plus or some other service name here", "v1", http=http)
</snippet></ROW><ROW><id>10309397</id><snippet>nav_json = json.dumps(nav_data)
nav_b64=base64.b64encode(nav_json)
self.response.set_cookie('nav_data', nav_b64)
</snippet></ROW><ROW><id>10309397</id><snippet>var user_data_base64= $.cookie('nav_data');
// remove quotes from around the string
user_data_base64 = user_data_base64.replace(/"/g,"");
// replace \075 with =
user_data_base64 = user_data_base64.replace(/\\075/g,"=");
var user_data_encoded=$.base64.decode( user_data_base64 );
var user_data = $.parseJSON(user_data_encoded);
</snippet></ROW><ROW><id>10309397</id><snippet>&lt;script type="text/javascript"&gt;
var nav_data='{% autoescape false %}{{nav_data}}{% endautoescape %}';
$.cookie('nav_data', nav_data, { path: '/' });
window.location.replace("{{next}}")
&lt;/script&gt;
</snippet></ROW><ROW><id>10309400</id><snippet>return self.next</snippet></ROW><ROW><id>10309400</id><snippet>self.next</snippet></ROW><ROW><id>10309400</id><snippet>return self.next[:]
</snippet></ROW><ROW><id>10309400</id><snippet>list()</snippet></ROW><ROW><id>10309400</id><snippet>return list(self.next)
</snippet></ROW><ROW><id>10309472</id><snippet>years = r'((?:19|20)\d\d)'
pattern = r'(%s) +(%s), *%s' % years

thirties = pattern % (
     "September|April|June|November",
     r'0?[1-9]|[12]\d|30')

thirtyones = pattern % (
     "January|March|May|July|August|October|December",
     r'0?[1-9]|[12]\d|3[01]')

fours = '(?:%s)' % '|'.join('%02d' % x for x in range(4, 100, 4))

feb = r'(February) +(?:%s|%s)' % (
     r'(?:(0?[1-9]|1\d|2[0-8]), *%s' % years, # 1-28 any year
     r'(?:(29), *((?:(?:19|20)%s)|2000))' % fours)  # 29 leap years only

result = '|'.join('(?:%s)' % x for x in (thirties, thirtyones, feb))
r = re.compile(result)
print result
</snippet></ROW><ROW><id>10309472</id><snippet>&gt;&gt;&gt; r.match('January 30, 2001') is not None
True
&gt;&gt;&gt; r.match('January 31, 2001') is not None
True
&gt;&gt;&gt; r.match('January 32, 2001') is not None
False
&gt;&gt;&gt; r.match('February 32, 2001') is not None
False
&gt;&gt;&gt; r.match('February 29, 2001') is not None
False
&gt;&gt;&gt; r.match('February 28, 2001') is not None
True
&gt;&gt;&gt; r.match('February 29, 2000') is not None
True
&gt;&gt;&gt; r.match('April 30, 1908') is not None
True
&gt;&gt;&gt; r.match('April 31, 1908') is not None
False
</snippet></ROW><ROW><id>10309472</id><snippet>&gt;&gt;&gt; print result
(?:(September|April|June|November) +(0?[1-9]|[12]\d|30), *((?:19|20)\d\d))|(?:(January|March|May|July|August|October|December) +(0?[1-9]|[12]\d|3[01]), *((?:19|20)\d\d))|(?:February +(?:(?:(0?[1-9]|1\d|2[0-8]), *((?:19|20)\d\d))|(?:(29), *((?:(?:19|20)(?:04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96))|2000))))
</snippet></ROW><ROW><id>10309647</id><snippet>find()</snippet></ROW><ROW><id>10309647</id><snippet>find_all()</snippet></ROW><ROW><id>10309647</id><snippet>table1 = soup.find("table", border=1)
table2 = table1.find('tbody')
table3 = table2.find_all('tr')
</snippet></ROW><ROW><id>10309647</id><snippet>rows = soup.find("table", border=1).find("tbody").find_all("tr")

for row in rows:
    cells = row.find_all("td")
    rn = cells[0].get_text()
    # and so on
</snippet></ROW><ROW><id>10309805</id><snippet>In [1]: x = ((1, 2, 3), (4, 5, 6), (7, 8, 9))

In [2]: tuple(a[:-1] for a in x)
</snippet></ROW><ROW><id>10310071</id><snippet>re.findall()</snippet></ROW><ROW><id>10310071</id><snippet>(?:...)</snippet></ROW><ROW><id>10310071</id><snippet>(...)</snippet></ROW><ROW><id>10310071</id><snippet>pattern = """
    (?:September|April|June|November)
    ,[ ] 
    (?:0?[1-9]|[12]\d|30)
    ,[ ]
    (?:19|20)\d\d # Months with 30 days

    |

    (?:January|March|May|July|August|October|December)
    ,[ ] 
    (?:0?[1-9]|[12]\d|3[01])
    ,[ ] 
    (?:19|20)\d\d # Months with 31 days

    |

    February
    ,[ ] 
    (?:
     (?:0?[1-9]|1\d|2[0-8])
     ,[ ] 
     (?:19|20)\d\d
    |
     29
     ,[ ] 
     (?:
      (?:19|20)
      (?:04|08|12|16|20|24|28|32|36|40|44|48|
         52|56|60|64|68|72|76|80|84|88|92|96)
     |
      2000
     )
    ) # February with 28 days or 29 with a leap year"""
</snippet></ROW><ROW><id>10310071</id><snippet>February, 31, 2000</snippet></ROW><ROW><id>10310071</id><snippet>pattern = """
    (?:January|February|March|April|May|June|
       July|August|September|October|November|December)
    ,[ ]
    [0-3]?\d
    ,[ ]
    (?:19|20)\d\d
"""
</snippet></ROW><ROW><id>10310071</id><snippet>January, 0, 1999</snippet></ROW><ROW><id>10310071</id><snippet>February, 31, 2000</snippet></ROW><ROW><id>10310107</id><snippet>multiprocessing</snippet></ROW><ROW><id>10310107</id><snippet>test</snippet></ROW><ROW><id>10310107</id><snippet>lol\n</snippet></ROW><ROW><id>10310107</id><snippet>import multiprocessing
import os

def open_file(x):
   with open(x, 'r') as file_obj:
     return file_obj.readlines()

a = multiprocessing.Pool(4)
print a.map(open_file, ['test']*4)
</snippet></ROW><ROW><id>10310107</id><snippet>➜  ~ git:(master) ✗ python open_test.py
[['lol\n'], ['lol\n'], ['lol\n'], ['lol\n']]
</snippet></ROW><ROW><id>10310160</id><snippet>append((7,7))</snippet></ROW><ROW><id>10310445</id><snippet>(lambda x: x, lambda x: x**2)</snippet></ROW><ROW><id>10310532</id><snippet>'</snippet></ROW><ROW><id>10310532</id><snippet>move</snippet></ROW><ROW><id>10310532</id><snippet>shutil.rmtree</snippet></ROW><ROW><id>10310532</id><snippet>shutil.move</snippet></ROW><ROW><id>10310532</id><snippet>shutil.rmtree</snippet></ROW><ROW><id>10310532</id><snippet>shutil.move</snippet></ROW><ROW><id>10310532</id><snippet>shutil.rmtree</snippet></ROW><ROW><id>10310532</id><snippet>self.src_f</snippet></ROW><ROW><id>10310532</id><snippet>shutil.move</snippet></ROW><ROW><id>10310532</id><snippet>shutil.rmtree</snippet></ROW><ROW><id>10310532</id><snippet>@patch.object(shutil, 'move')
def test_move_catch_exception(self, mock_move):
    ''' Tests moving a target hits exception. '''
    e = OSError('abc')
    mock_move.side_effect = e
    returns = move(self.src_f, self.src_f, **self.kwargs)
    assert returns == (False, e)
</snippet></ROW><ROW><id>10310774</id><snippet>QTEST.table</snippet></ROW><ROW><id>10310774</id><snippet>MyWindow</snippet></ROW><ROW><id>10310774</id><snippet>self.table = MyWindow()</snippet></ROW><ROW><id>10310774</id><snippet>PyQt4.QtCore.pyqtWrapperType</snippet></ROW><ROW><id>10310880</id><snippet>|</snippet></ROW><ROW><id>10310880</id><snippet>[6][1-2][0-9]{3}[J]
</snippet></ROW><ROW><id>10310880</id><snippet>6[12][0-9]{3}J</snippet></ROW><ROW><id>10310880</id><snippet>CJ[0-9]{4}
</snippet></ROW><ROW><id>10310880</id><snippet>[CJ]</snippet></ROW><ROW><id>10310880</id><snippet>^6[12][0-9]{3}(J|CJ)[0-9]{4}$
</snippet></ROW><ROW><id>10310880</id><snippet>^6[12][0-9]{3}C?J[0-9]{4}$
</snippet></ROW><ROW><id>10311390</id><snippet>l = ['1', '2', '3', '4']  # original list
s = ', '.join(l) + ','
</snippet></ROW><ROW><id>10311390</id><snippet>l = ['1', '2', '3', '4']  # original list
s = ' '.join(map(lambda x: '%s,' % x, l))
</snippet></ROW><ROW><id>10311390</id><snippet>l</snippet></ROW><ROW><id>10311390</id><snippet>l = ['1', '2', '3', '4']  # original list
s = ', '.join(l + ['']).rstrip(' ')
</snippet></ROW><ROW><id>10311390</id><snippet>l = ['1', '2', '3', '4']  # original list
s = '%s,' % (', '.join(l))
</snippet></ROW><ROW><id>10311429</id><snippet>with open('myfile.chn', 'rb') as f:
    data = []
    for line in f:  # a file supports direct iteration
        data.extend(hex(int(x, 2)) for x in line.split())
</snippet></ROW><ROW><id>10311429</id><snippet>open()</snippet></ROW><ROW><id>10311429</id><snippet>file()</snippet></ROW><ROW><id>10311429</id><snippet>rb</snippet></ROW><ROW><id>10311693</id><snippet>my_string = 'qwer123asd!@#$%^'
predef = set('0x#$qi')

if set(my_string).issubset(predef):
    print "only predefined symbols"
</snippet></ROW><ROW><id>10311914</id><snippet>re.VERBOSE</snippet></ROW><ROW><id>10311914</id><snippet>\s</snippet></ROW><ROW><id>10311914</id><snippet>#</snippet></ROW><ROW><id>10311974</id><snippet>import xml.etree.ElementTree as ET

class Parser:

    def __init__(self):
        self.output_list = []  # collected output lines
        self.il = 0            # indentation level


    def __iter__(self):
        return iter(self.output_list)


    def out(self, s):
        '''Output the indented string to the output list.'''
        self.output_list.append('    ' * self.il + s)


    def indent(self, num=1):
        '''Increase the indentation level.'''
        self.il += num


    def dedent(self, num=1):
        '''Decrease the indentation level.'''
        self.il -= num


    def parse(self, elem):
        '''Call the parser of the elem.tag name.

        The tag name appended to "parse_" and then the name of that
        function is called.  If the function is not defined, then
        self.parse_undefined() is called.'''

        fn_name = 'parse_' + elem.tag
        try:
            fn = getattr(self, fn_name)
        except AttributeError:
            fn = self.parse_undefined
        return fn(elem)


    def loop(self, elem):
        '''Helper method to loop through the child elements.'''
        for e in elem:
            self.parse(e)


    def parseXMLfile(self, fname):
        '''Reads the XML file and starts parsing from the root element.'''
        tree = ET.parse(fname)
        script = tree.getroot()
        assert script.tag == 'script'
        self.parse(script)


    ###################### ELEMENT PARSERS #######################

    def parse_undefined(self, elem):
        '''Called for the element that has no parser defined.'''
        self.out('PARSING UNDEFINED for ' + elem.tag)


    def parse_script(self, elem):
        self.loop(elem)


    def parse_stage(self, elem):
        self.out('')
        self.out('Parsing the stage: ' + elem.attrib['id'])
        self.indent()
        self.loop(elem)
        self.dedent()


    def parse_initialise(self, elem):
        self.out('')
        self.out('#---------- ' + elem.tag + ' ----------')
        self.loop(elem)


    def parse_variable(self, elem):
        tt = str   # default type
        if elem.attrib['type'] == 'Integer': 
            tt = int
        # elif ... etc for other types

        # Conversion of the value to the type because of the later repr().
        value = tt(elem.attrib['value'])  

        id_ = elem.attrib['id']

        # Produce the line of the output.
        self.out('{0} = {1}'.format(id_, repr(value)))


    def parse_execute(self, elem):
        self.out('')
        self.out('#---------- ' + elem.tag + ' ----------')
        self.loop(elem)


    def parse_if(self, elem):
        assert elem[0].tag == 'condition'
        condition = self.parse(elem[0])
        self.out('if ' + condition + ':')
        self.indent()
        self.loop(elem[1:])
        self.dedent()


    def parse_condition(self, elem):
        assert len(elem) == 0
        return elem.text


    def parse_then(self, elem):
        self.loop(elem)


    def parse_else(self, elem):
        self.dedent()
        self.out('else:')
        self.indent()
        self.loop(elem)


    def parse_error(self, elem):
        assert len(elem) == 0
        errorID = elem.attrib.get('errorID', None)
        fieldID = elem.attrib.get('fieldID', None)
        self.out('error({0}, {1})'.format(errorID, fieldID))


    def parse_setNextStage(self, elem):
        assert len(elem) == 0
        self.out('setNextStage --&gt; ' + elem.text)


if __name__ == '__main__':
    parser = Parser()
    parser.parseXMLfile('data.xml')
    for s in parser:
        print s
</snippet></ROW><ROW><id>10311974</id><snippet>Parsing the stage: stage1

    #---------- initialise ----------
    taxyear = 2012
    taxyearstart = '06/04/2012'
    taxyearend = '05/04/2013'
    previousemergencytaxcode = '747L'
    emergencytaxcode = '810L'
    nextemergencytaxcode = '810L'

    ...

    maxLimitAmount = 0
    PARSING UNDEFINED for executeMethod
    if $maxLimitReached$ == True:
        employeepayrecord = 'N'
        employeepayrecordstate = '2'
    else:
        employeepayrecordstate = '1'
    gender = ''
    genderstate = '1'
    title = ''
    forename = ''
    forename2 = ''
    surname = ''
    dob = ''
    dobinvalid = ''

    #---------- execute ----------
    if $dobstring$ != "":
        validDOBCheck = 'False'
        PARSING UNDEFINED for executeMethod
        if $validDOBCheck$ == False:
            error(224, dob)
        else:
            minimumDOBDate = ''
            PARSING UNDEFINED for executeMethod
            validDOBCheck = 'False'
            PARSING UNDEFINED for executeMethod
            if $validDOBCheck$ == False:
                error(3007161, dob)
        if $dobstring$ == "01/01/1901":
            error(231, dob)
    else:
        error(231, dob)

Parsing the stage: stage2

    #---------- initialise ----------
    address1 = ''

    ...
</snippet></ROW><ROW><id>10312134</id><snippet>plt.plt(row[1], row[2], 'b-', marker='o');
</snippet></ROW><ROW><id>10312895</id><snippet>__main__.py</snippet></ROW><ROW><id>10312895</id><snippet>__main__.py</snippet></ROW><ROW><id>10312895</id><snippet>python foo.zip</snippet></ROW><ROW><id>10312895</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>10312919</id><snippet>print()</snippet></ROW><ROW><id>10312919</id><snippet>repr(line)</snippet></ROW><ROW><id>10313115</id><snippet>urllib2</snippet></ROW><ROW><id>10313115</id><snippet>@app.route("/test", methods=["POST"])
def test():
    return _test(request.form["test"])

@app.route("/index")
def index():
    return _test("My Test Data")

def _test(argument):
    return "TEST: %s" % argument
</snippet></ROW><ROW><id>10313152</id><snippet>&gt;&gt;&gt; a = ["test", "test", "something", "else"]
&gt;&gt;&gt; a
['test', 'test', 'something', 'else']
&gt;&gt;&gt; set(a)
{'test', 'something', 'else'}
</snippet></ROW><ROW><id>10313152</id><snippet>class Book:
    def __init__(self, title, author):
        self.title = title
        self.author = author

    def __eq__(self, other):
        return self.title == other.title and self.author == other.author

    def __hash__(self):
        return hash(self.title)+hash(self.author)

    def __repr__(self):
        return "Book("+repr(self.title)+", "+repr(self.author)+")"
</snippet></ROW><ROW><id>10313152</id><snippet>&gt;&gt;&gt; a = [Book("Some Book", "Some Guy"), Book("Some Book", "Some Guy"), Book("Some Other Book", "Some Other Guy")]
&gt;&gt;&gt; a
[Book('Some Book', 'Some Guy'), Book('Some Book', 'Some Guy'), Book('Some Other Book', 'Some Other Guy')]
&gt;&gt;&gt; set(a)
{Book('Some Other Book', 'Some Other Guy'), Book('Some Book', 'Some Guy')}
</snippet></ROW><ROW><id>10313152</id><snippet>def remove_duplicates_preserving_order(seq):
    seen = set()
    return [ x for x in seq if x not in seen and not seen.add(x)]
</snippet></ROW><ROW><id>10313152</id><snippet>set.add()</snippet></ROW><ROW><id>10313152</id><snippet>CapWords</snippet></ROW><ROW><id>10313152</id><snippet>lowercase_with_underscores</snippet></ROW><ROW><id>10313152</id><snippet>__init__()</snippet></ROW><ROW><id>10313152</id><snippet>__eq__()</snippet></ROW><ROW><id>10313152</id><snippet>__hash__()</snippet></ROW><ROW><id>10313152</id><snippet>&gt;&gt;&gt; a = [("Book", "Author"), ("Book", "Author"), ("OtherBook", "OtherAuthor")] 
&gt;&gt;&gt; set(a)
{('Book', 'Author'), ('OtherBook', 'OtherAuthor')}
</snippet></ROW><ROW><id>10313399</id><snippet>$this-&gt;soapClient = new SoapClient($wsdl_url);
// What interface is available, which function can you call?
var_dump($this-&gt;soapClient-&gt;__getFunctions());

// Call
$result = $this-&gt;soapClient-&gt;someMethodExposedByTheApi();

// Soap Elements (Tags in the XML) are available as properties:
echo $result-&gt;someProperty;

// Nested Tags are available as object chain:
echo $result-&gt;someNestedTags-&gt;nestedTag;
</snippet></ROW><ROW><id>10313587</id><snippet>Classes</snippet></ROW><ROW><id>10313587</id><snippet>Class instances</snippet></ROW><ROW><id>10313772</id><snippet>)</snippet></ROW><ROW><id>10314185</id><snippet>from logging import Handler, getLogger

class ListboxHandler(Handler):
    def __init__(self, box):
        self._box = box
        Handler.__init__(self)

    def emit(self, record):
        r = self.format(record)
        self._box.insert(0, r)

# quick test:
target = [] # supports insert like Listbox :)
rootLogger = getLogger()
# add handler to the root logger here
# should be done in the config...
rootLogger.addHandler(ListboxHandler(target))
rootLogger.warn('test')
print(target)
</snippet></ROW><ROW><id>10314522</id><snippet>school = school_form.save(commit=False)
address_formset = AddressFormSet(request.POST, instance=school)
</snippet></ROW><ROW><id>10314522</id><snippet>views.py
def school_address(request, school_id):
    school = School.objects.get(pk=school_id)
    address_formset = AddressFormSet(instance=school)
    return render(request, "school/school_address.html",
                  {'address_formset': address_formset})
</snippet></ROW><ROW><id>10314522</id><snippet>&lt;form&gt;
&lt;a href="" id="edit_school" schoolid="{{ school.id }}"&gt;Edit&lt;/a&gt;
{{ school_form }}
&lt;div id="school_address"&gt;&lt;/div&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>10314522</id><snippet>{{ address_formset }}
</snippet></ROW><ROW><id>10314522</id><snippet>$("#edit_school").click(function(e){
  e.preventDefault();
  $.ajax({
    url: '/school_address/' + this.getAttribute('schoolid') + '/'
    success: function(data){
      $("#school_address").html(data);
    }
  });
});
</snippet></ROW><ROW><id>10314522</id><snippet>&lt;input type="hidden" id="schoolid" value="{{ school.id }} /&gt;
</snippet></ROW><ROW><id>10315402</id><snippet>print "Content_type: text/html\n\n"
</snippet></ROW><ROW><id>10315402</id><snippet>#! usr/local/bin/python
import cgi;
import cgitb;
import Cookie;
import os;
import sqlite3;

cgitb.enable()
username= None
form= cgi.FieldStorage()

#open connection
conn= sqlite3.connect("manager.db")
cur= conn.cursor()

pagehead= """
    &lt;html&gt;
        &lt;head&gt; Redirecting &lt;/head&gt;
        &lt;body&gt;

            """
pagefoot="""&lt;form method= POST action="http://localhost:8000/cgi-bin/page1.py"&gt;
            &lt;p&gt; Validated! &lt;input type="submit" value="Enter"/&gt; &lt;/p&gt;
            &lt;/form&gt;
        &lt;/body&gt;
    &lt;/html&gt; """
errorpagefoot= """
&lt;form action="http://localhost:8000/cgi-bin/index.py"&gt;
&lt;p&gt; Error! &lt;input type="submit" value="Go Back"/&gt; &lt;/p&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;"""


userName= form.getvalue('usernameLogin')
userPW= form.getvalue('passwordLogin')
userPWDatabase = conn.execute("SELECT username,passwrd FROM login WHERE username=? and passwrd=?",[userName,userPW])
cur.fetchone()
for result in userPWDatabase:
    userDb= result[0]
    pwDb= result[1]
    if userDb == userName and pwDb == userPW:
        #Create Cookie
        C= Cookie.SimpleCookie()
        #take the value of usernameLogin into the variable username
        username= form.getvalue('usernameLogin')
        #Set-Cookie header with the usernameLogin key
        C['usernameLogin'] = username
        print C
    elif userDb != userName and pwDb != userPW:
        print errorpagefoot

print "Content_type: text/html\n\n"
print pagehead
if username:
    print pagefoot
else:
    print errorpagefoot
</snippet></ROW><ROW><id>10315602</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = '&lt;2006-12-20 00:10:24 Cattle is a tree&gt;'
&gt;&gt;&gt; re.sub(r'\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} ', '', s)
'&lt;Cattle is a tree&gt;'
</snippet></ROW><ROW><id>10315861</id><snippet>dbaccess.find("ONE.TWO.THREE": {"$gt": 0})</snippet></ROW><ROW><id>10316004</id><snippet>\s</snippet></ROW><ROW><id>10316449</id><snippet>PyObject* module = Py_InitModule("poco",LoggingPocoMethods);
PyObject* code = Py_CompileString("class Test:\n\tdef __repr__(self):\n\t\treturn 'Hello world'","",Py_file_input);
PyImport_ExecCodeModule("poco",code);
</snippet></ROW><ROW><id>10316449</id><snippet>PyObject* module = Py_InitModule("poco",LoggingPocoMethods);
PyObject* mainModule = PyImport_AddModule("__main__");

PyObject* dict = PyModule_GetDict(module);
PyObject* mainDict = PyModule_GetDict(mainModule);

PyRun_String("def test():\n\tprint 'test'\n",Py_file_input,mainDict,dict);
</snippet></ROW><ROW><id>10316480</id><snippet>pip install -U Celery</snippet></ROW><ROW><id>10316791</id><snippet>from Tkinter import *

import MySQLdb

class App:

    def __init__(self, master):
        Button3 = Button(master, text="Transaction", command=self.tran).pack()

    def tran(self) :

        first = Tk()

        label1 = Label(first ,text="From")

        label1.pack()

        self.box1=Entry(first )

        self.box1.pack()

        label2=Label(first ,text="To")

        label2.pack()

        self.box2=Entry(first )

        self.box2.pack()


        label3=Label(first ,text="Amt")

        label3.pack()

        self.box3=Entry(first )

        self.box3.pack()

        Button1 = Button(first , text="Next", command=self.func3).pack() 


    def func3(self) :

        conn = MySQLdb.connect (host = "localhost", user = "root", passwd = "natty", db = "dbms")

        cursor=conn.cursor()

        From=int(self.box1.get().strip())

        To=int(self.box2.get().strip())

        Amt=int(self.box3.get().strip())
        cursor.execute ("select bal from account where acc="+str(From)+"")

        a=cursor.fetchone()

        fromval=int(a[0])

        cursor.execute ("select bal from account where acc="+str(To)+"")

        b=cursor.fetchone()

        toval=int(b[0])

        fromval=fromval-Amt

        toval=toval+Amt

        cursor.execute("update account set bal="+str(fromval)+" where acc="+str(From)+"")

        cursor.execute("update account set bal="+str(toval)+" where acc="+str(To)+"")

        cursor.close ()

        conn.close ()

master = Tk()

app = App(master)

master.mainloop()
</snippet></ROW><ROW><id>10316968</id><snippet>import matplotlib.pyplot as plt

ax = plt.subplot(111)
ax.grid(clip_on=False, marker='o', markersize=10)
plt.savefig('crosses.png')
plt.show()
</snippet></ROW><ROW><id>10316968</id><snippet>'o'</snippet></ROW><ROW><id>10316968</id><snippet>Artists</snippet></ROW><ROW><id>10316968</id><snippet>import matplotlib.pyplot as plt
import numpy as np

NPOINTS=100

def set_grid_cross(ax, in_back=True):
    xticks = ax.get_xticks()
    yticks = ax.get_yticks()
    xgrid, ygrid = np.meshgrid(xticks, yticks)
    kywds = dict() 
    if in_back:
        kywds['zorder'] = 0
    grid_lines = ax.plot(xgrid, ygrid, 'k+', **kywds)

xvals = np.arange(NPOINTS)
yvals = np.random.random(NPOINTS) * NPOINTS

ax1 = plt.subplot(121)
ax2 = plt.subplot(122)

ax1.plot(xvals, yvals, linewidth=4)
ax1.plot(xvals, xvals, linewidth=7)
set_grid_cross(ax1)
ax2.plot(xvals, yvals, linewidth=4)
ax2.plot(xvals, xvals, linewidth=7)
set_grid_cross(ax2, in_back=False)

plt.savefig('gridpoints.png')
plt.show()
</snippet></ROW><ROW><id>10316968</id><snippet>meshgrid</snippet></ROW><ROW><id>10316968</id><snippet>'+'</snippet></ROW><ROW><id>10316968</id><snippet>zorder</snippet></ROW><ROW><id>10316968</id><snippet>set_grid_cross</snippet></ROW><ROW><id>10316968</id><snippet>xticks = ax.get_xticks()[1:-1] #&lt; notice the slicing
yticks = ax.get_yticks()[1:-1] #&lt; notice the slicing
xgrid, ygrid = np.meshgrid(xticks, yticks)
</snippet></ROW><ROW><id>10317371</id><snippet>SELECT *
  FROM pg_locks l
  JOIN pg_class t ON l.relation = t.oid AND t.relkind = 'r'
 WHERE t.relname = 'Bill';
</snippet></ROW><ROW><id>10317937</id><snippet>tries = [
    ('S0001', '.tif'),
    ('S0001', '.tiff'),
    ('_0_', '.tif'),
]

for sep, subst in tries:
    num = imBN.split(sep)[-1].replace(subst, '')
    try:
        imNo = int(num)
        break
    except ValueError:
        pass
else:
    raise ValueError, "String doesn't match any of the possible patterns"
</snippet></ROW><ROW><id>10317937</id><snippet>def custom_func(imBN):
    if 'first' in imBN: return 1
    if 'second' in imBN: return 2

tries = [
    lambda: int(imBN.split('S0001')[-1].replace('.tif','')),
    lambda: int(imBN.split('S0001')[-1].replace('.tiff','')),
    lambda: int(imBN.split('_0_')[-1].replace('.tif','')),
    lambda: custom_func(imBN),
]

for expr in tries:
    try:
        result = expr()
        break
    except:
        pass
else:
    # error
</snippet></ROW><ROW><id>10318295</id><snippet>def commandType(self):
    print self.cmds[self.counter]
    if '@' in self.cmds[self.counter]):
        return Parser.A_COMMAND

    elif '(' in self.cmds[self.counter]:
        return Parser.L_COMMAND

    else:
        return Parser.C_COMMAND
</snippet></ROW><ROW><id>10318901</id><snippet>def format_yticklabel(number):
    return '{0:.1e}'.format(number).replace('+0', '').replace('-0', '-')

&gt;&gt;&gt; format_yticklabel(1.99)
'2.0e0'
</snippet></ROW><ROW><id>10319014</id><snippet>(?!...)</snippet></ROW><ROW><id>10319014</id><snippet>pattern = r'pt\d\d(?!_\d\d)'
</snippet></ROW><ROW><id>10319014</id><snippet>pt</snippet></ROW><ROW><id>10319014</id><snippet>&gt;&gt;&gt; p = re.compile(pattern)
&gt;&gt;&gt; bool(p.search("data_pt01_pr"))
True
&gt;&gt;&gt; bool(p.search("data_pt02_2"))
True
&gt;&gt;&gt; bool(p.search("data_pt01_01_pr"))
False
&gt;&gt;&gt; bool(p.search("data_pt22_22"))
False
</snippet></ROW><ROW><id>10319068</id><snippet>__init__.py</snippet></ROW><ROW><id>10319201</id><snippet>print</snippet></ROW><ROW><id>10319201</id><snippet>(Pdb) print list(values)
</snippet></ROW><ROW><id>10319374</id><snippet>#HEATMAP ANALYSIS
    for p in gameinfo.planets:

        ave_self_value = 0
        for q in gameinfo.my_planets:
            if q != p:
                ave_self_value = ave_self_value + (self.planet_distances[p][q] * gameinfo.planets[q].num_ships / self.own_strength)

        ave_enemy_value = 0
        for q in gameinfo.enemy_planets:
            if q != p:
                ave_enemy_value = ave_enemy_value + (self.planet_distances[p][q] * gameinfo.planets[q].num_ships / self.enemy_strength)

        self.heatmap[p] = ave_enemy_value - ave_self_value

    hmin, hmax = min(self.heatmap.values()), max(self.heatmap.values())

    for h in self.heatmap.keys():
        self.heatmap[h] = 2 * (self.heatmap[h] - hmin) / (hmax - hmin) - 1

    self.heatmap_mean = sum(self.heatmap.values(), 0.0) / len(self.heatmap)
    #END HEATMAP ANALYSIS
</snippet></ROW><ROW><id>10319404</id><snippet>MyGlobals</snippet></ROW><ROW><id>10319404</id><snippet>class MyGlobals(object):
    pass
g = MyGlobals()
</snippet></ROW><ROW><id>10319404</id><snippet>g</snippet></ROW><ROW><id>10319404</id><snippet>g.foo = "foo"
print g.foo
</snippet></ROW><ROW><id>10319809</id><snippet>lxml</snippet></ROW><ROW><id>10319809</id><snippet>urllib</snippet></ROW><ROW><id>10319809</id><snippet>import lxml.html as html

root = html.parse(open('links.html'))
for link in root.findall('//a'):
  url = link.get('href')
</snippet></ROW><ROW><id>10319809</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>10319809</id><snippet>import urllib
import urlparse

# extract the final path component and use it as
# the local filename.
name = urlparse.urlparse(url).path.split('/')[-1]

fd = urllib.urlopen(url)
open(name, 'w').write(fd.read())
</snippet></ROW><ROW><id>10319897</id><snippet>Node(self._candidates.append(self._allCandidates[self._depth])
</snippet></ROW><ROW><id>10319897</id><snippet>.append</snippet></ROW><ROW><id>10319897</id><snippet>None</snippet></ROW><ROW><id>10319923</id><snippet>isinstance</snippet></ROW><ROW><id>10319923</id><snippet>collections.Mapping</snippet></ROW><ROW><id>10319923</id><snippet>import collections

for element in (collection.values() 
                if isinstance(collection, collections.Mapping) else collection):
</snippet></ROW><ROW><id>10319923</id><snippet>def values(collection):
    return (collection.values() 
                  if isinstance(collection, collections.Mapping) else collection)

for element in values(collection):
</snippet></ROW><ROW><id>10320037</id><snippet>global</snippet></ROW><ROW><id>10320037</id><snippet>global options
(options, _) = parser.parse_args()
</snippet></ROW><ROW><id>10320291</id><snippet>join()</snippet></ROW><ROW><id>10320291</id><snippet>per = list(itertools.permutations(number))
        for x in per:
            print "".join(x)
        print '\nNumber of possible combinations: ',len(per),'\n'
</snippet></ROW><ROW><id>10320338</id><snippet>(.)(?&lt;!\1.)\1{N-1}(?!\1)</snippet></ROW><ROW><id>10320338</id><snippet>r"(.)(?&lt;!(?=\1)..)\1{N-1}(?!\1)"</snippet></ROW><ROW><id>10320338</id><snippet>(?=\1)..</snippet></ROW><ROW><id>10320338</id><snippet>\1.</snippet></ROW><ROW><id>10320338</id><snippet>[x.group() for x in re.finditer(r"(.)\1*", "xxaaaayyybbbbbzzccccxx") if len(x.group()) == 4]</snippet></ROW><ROW><id>10320377</id><snippet>declaratives</snippet></ROW><ROW><id>10320377</id><snippet># I suppose you already have your session somehow...
# If you want to add it to the database
# Assuming you did not change the __init__ method
obj = Object(**data_dictionary_with_keys_matching_column_names)
session.add(obj)

# If you want to issue an update
# obj is already there somehow...
for k, v in data_dictionary_with_keys_matching_column_names.iterkeys():
    setattr(obj, k, v)

session.commit()
</snippet></ROW><ROW><id>10320377</id><snippet>wx.Validator</snippet></ROW><ROW><id>10320524</id><snippet>csv</snippet></ROW><ROW><id>10320524</id><snippet>import csv
with open("master.csv") as m, open("update.csv") as u, open("out.csv", "w") as o:
    master = { line['ID']: line for line in csv.DictReader(m) }
    update = { line['ID']: line for line in csv.DictReader(u) }
    master.update(update)
    fields = csv.DictReader(open("master.csv")).fieldnames
    out = csv.DictWriter(o, fields)
    out.writeheader()
    out.writerows(master.values())
</snippet></ROW><ROW><id>10320524</id><snippet>ID,Name,Foo,Bar,Baz,Description
1000001,Name here:1,1001,1,description here
1000002,Name here:2,1002,2,description here
1000003,Name here:3,1003,3,description here
1000004,Name here:4,1004,4,description here
1000005,Name here:5,1005,5,description here
1000006,Name here:6,1006,6,description here
1000007,Name here:7,1007,7,description here
1000008,Name here:8,1008,8,description here
1000009,Name here:9,1009,9,description here
</snippet></ROW><ROW><id>10320524</id><snippet>ID,Name,Foo,Bar,Baz,Description
1000003,UPDATED Name here:3,1003,3, UPDATED description here
1000010,NEW ITEM Name here:9,1009,9,NEW ITEM description here 
</snippet></ROW><ROW><id>10320524</id><snippet>ID,Name,Foo,Bar,Baz,Description
1000010,NEW ITEM Name here:9,1009,9,NEW ITEM description here ,
1000008,Name here:8,1008,8,description here,
1000009,Name here:9,1009,9,description here,
1000006,Name here:6,1006,6,description here,
1000007,Name here:7,1007,7,description here,
1000004,Name here:4,1004,4,description here,
1000005,Name here:5,1005,5,description here,
1000002,Name here:2,1002,2,description here,
1000003,UPDATED Name here:3,1003,3, UPDATED description here,
1000001,Name here:1,1001,1,description here,
</snippet></ROW><ROW><id>10320602</id><snippet>request.args</snippet></ROW><ROW><id>10320602</id><snippet>searchword = request.args.get('key', '')    
</snippet></ROW><ROW><id>10320604</id><snippet>def onLaterPages(self, doc, canvas):
    if doc.page == TOTAL_PAGES:
        canvas.saveState()
        canvas.drawImage(filename, 0, 0, *pagesize)
        canvas.restoreState()

# and when calling doc.build
doc.build(..., onLaterPages=onLaterPages)
</snippet></ROW><ROW><id>10320799</id><snippet>main_table=('sample',metadata,...
</snippet></ROW><ROW><id>10320799</id><snippet>main_table=Table('sample',metadata,...
#          ^^^^^
</snippet></ROW><ROW><id>10320936</id><snippet>{
    "common": {
        "rq": {
            "ct": ""
        },
        "up": "chg",
        "down": "chr",
        "linktargetInternal": ""
    }
}
</snippet></ROW><ROW><id>10320967</id><snippet>Python 2.7.2+ (default, Oct  4 2011, 20:06:09) 
[GCC 4.6.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; x=float("NaN")
&gt;&gt;&gt; x==x
False
</snippet></ROW><ROW><id>10321387</id><snippet>'%s/log/some-%s.log' % (PROJECT_ROOT, os.getpid())
</snippet></ROW><ROW><id>10321465</id><snippet>curs.execute("INSERT INTO foo VALUES ('''''')")
</snippet></ROW><ROW><id>10321465</id><snippet>curs.execute("INSERT INTO foo VALUES (%s)", ("''",))
</snippet></ROW><ROW><id>10321835</id><snippet>a = 'hi how \\are you'
</snippet></ROW><ROW><id>10321835</id><snippet>a.replace('\\','')

&gt;'hi how are you'
</snippet></ROW><ROW><id>10321865</id><snippet>~/coding$ time python2.6 enormread.py &lt; sample.txt 
0

real    0m3.971s
user    0m3.712s
sys 0m0.256s
~/coding$ time python2.7 enormread.py &lt; sample.txt 
0

real    0m2.637s
user    0m2.428s
sys 0m0.204s
~/coding$ time python3.2 enormread.py &lt; sample.txt 
0

real    0m10.412s
user    0m10.065s
sys 0m0.344s
~/coding$ time ~/sys/Python-3.3.0a2/python enormread.py &lt; sample.txt 
0

real    0m6.776s
user    0m6.336s
sys 0m0.436s
~/coding$ time pypy enormread.py &lt; sample.txt 
0

real    0m2.211s
user    0m1.948s
sys 0m0.028s
</snippet></ROW><ROW><id>10321865</id><snippet>(sum(not int(line) % t for line in sys.stdin[.buffer]))</snippet></ROW><ROW><id>10321865</id><snippet>~/coding$ time python2.7 enormfast.py &lt; sample.txt 
0

real    0m1.454s
user    0m1.436s
sys 0m0.016s
~/coding$ time python3.2 enormfast.py &lt; sample.txt 
0

real    0m2.243s
user    0m2.228s
sys 0m0.012s
</snippet></ROW><ROW><id>10322018</id><snippet>def bitfield(n):
    return [int(digit) for digit in bin(n)[2:]] # [2:] to chop off the "0b" part 
</snippet></ROW><ROW><id>10322018</id><snippet>&gt;&gt;&gt; bitfield(123)
[1, 1, 1, 1, 0, 1, 1]
&gt;&gt;&gt; bitfield(255)
[1, 1, 1, 1, 1, 1, 1, 1]
&gt;&gt;&gt; bitfield(1234567)
[1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1]
</snippet></ROW><ROW><id>10322018</id><snippet>int</snippet></ROW><ROW><id>10322018</id><snippet>int()</snippet></ROW><ROW><id>10322018</id><snippet>def bitfield(n):
    return [1 if digit=='1' else 0 for digit in bin(n)[2:]]
</snippet></ROW><ROW><id>10322018</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit("[int(digit) for digit in bin(123)[2:]]")
7.895014818543946
&gt;&gt;&gt; timeit.timeit("[123 &gt;&gt; i &amp; 1 for i in range(7,-1,-1)]")
2.966295244250407
&gt;&gt;&gt; timeit.timeit("[1 if digit=='1' else 0 for digit in bin(123)[2:]]")
1.7918431924733795
</snippet></ROW><ROW><id>10322163</id><snippet>select_related()</snippet></ROW><ROW><id>10322163</id><snippet>prefetch_related()</snippet></ROW><ROW><id>10322163</id><snippet>select_related()</snippet></ROW><ROW><id>10322163</id><snippet>Tag.objects.prefetch_related('product__alternatepartnumber_set').filter...</snippet></ROW><ROW><id>10322163</id><snippet>alternatepartnumber_set</snippet></ROW><ROW><id>10322206</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; protein_regex = re.compile('^[A-Z]+')
&gt;&gt;&gt; dna = 'PROTEINNAMEatcgatcg... JFENVKDFDFLK'
&gt;&gt;&gt; protein_regex.sub('', dna)
'atcgatcg... JFENVKDFDFLK'
</snippet></ROW><ROW><id>10322206</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; dna.lstrip(string.uppercase)
'atcgatcg... JFENVKDFDFLK'
</snippet></ROW><ROW><id>10322206</id><snippet>python -m timeit -n 10000 -s 'import re' -s 'protein_regex = re.compile("^[A-Z]+")' -s 'dna = "PROTEINNAMEatcgatcg... JFENVKDFDFLK"' 'protein_regex.sub("", dna)'
10000 loops, best of 3: 1.36 usec per loop

python -m timeit -n 10000 -s 'import string' -s 'dna = "PROTEINNAMEatcgatcg... JFENVKDFDFLK"' 'dna.lstrip(string.uppercase)'
10000 loops, best of 3: 0.444 usec per loop
</snippet></ROW><ROW><id>10322322</id><snippet>itertools.combinations(array, 3)
</snippet></ROW><ROW><id>10322322</id><snippet>&gt;&gt;&gt; [x for x in itertools.combinations([123,345,543,234],3)]
[(123, 345, 543), (123, 345, 234), (123, 543, 234), (345, 543, 234)]
</snippet></ROW><ROW><id>10322473</id><snippet>[toaddr, tocc]</snippet></ROW><ROW><id>10322473</id><snippet>toaddr + tocc</snippet></ROW><ROW><id>10322479</id><snippet>utf-8</snippet></ROW><ROW><id>10322479</id><snippet>print page['html'].encode('utf-8')
</snippet></ROW><ROW><id>10322479</id><snippet>print</snippet></ROW><ROW><id>10322585</id><snippet>win32com</snippet></ROW><ROW><id>10322585</id><snippet>pywinauto</snippet></ROW><ROW><id>10322585</id><snippet>SendKeys</snippet></ROW><ROW><id>10322762</id><snippet>class SendDocuments(webapp2.RequestHandler):
    def post(self):
        document_key = self.request.get("document_key")
        document_key = Key(str(document_key))
        the_document = DocumentsModel.all().filter("__key__ =", document_key).get()
        file_data = blobstore.BlobInfo.get(str(the_document.blobstore_key))
        payload = {}
        payload['user_id'] = '1234123412341234'
        payload['test_file'] = MultipartParam('the_file', filename="something",
                                      filetype=file_data.content_type,
                                      fileobj=file_data.open())
</snippet></ROW><ROW><id>10322904</id><snippet>import numpy as np, numpy.random as nprand, time, bisect

bigN = 5e6
smallN = 1000
maxn = 1e7
nprand.seed(1)  
bigArr = nprand.randint(0, maxn, size=bigN)
smallArr = nprand.randint(0, maxn, size=smallN)

# brute force 
t1 = time.time()
for i in range(len(smallArr)):
    inds = np.where(bigArr == smallArr[i])[0]
t2 = time.time()
print "Brute", t2-t1

# not brute force (like nested loop with index scan)
t1 = time.time()
sortedind = np.argsort(bigArr)
sortedbigArr = bigArr[sortedind]
for i in range(len(smallArr)):
    i1 = bisect.bisect_left(sortedbigArr, smallArr[i])
    i2 = bisect.bisect_right(sortedbigArr, smallArr[i])
    inds = sortedind[i1:i2]
t2=time.time()
print "Non-brute", t2-t1
</snippet></ROW><ROW><id>10322992</id><snippet>line[3:7]</snippet></ROW><ROW><id>10323019</id><snippet>from pyparsing import White, Keyword, nestedExpr, lineEnd, Suppress

insource = """
annotation (
  foo1(k=3),
  bar(
    x=0.29,
    y=0,
    bar1(
    x=3, y=4),
    width=0.71,
    height=0.85),
  foo2(System(...))
"""

barRef = White(' \t') + Keyword('bar') + nestedExpr() + ',' + lineEnd

out = Suppress(barRef).transformString(insource)
print out
</snippet></ROW><ROW><id>10323019</id><snippet>annotation (
  foo1(k=3),
  foo2(System(...))
</snippet></ROW><ROW><id>10323019</id><snippet>barRef = White(' \t') + Keyword('bar') + nestedExpr()('barargs') + ','
def skipEndingIn85(tokens):
    if tokens.barargs[0][-1].endswith('85'):
        raise ParseException('ends with 85, skipping...')
barRef.setParseAction(skipEndingIn85)
</snippet></ROW><ROW><id>10323079</id><snippet>UserWarning</snippet></ROW><ROW><id>10323079</id><snippet>Warning</snippet></ROW><ROW><id>10323079</id><snippet>UserWarning</snippet></ROW><ROW><id>10323079</id><snippet>RuntimeWarning</snippet></ROW><ROW><id>10323079</id><snippet>Warning</snippet></ROW><ROW><id>10323079</id><snippet>Exception</snippet></ROW><ROW><id>10323079</id><snippet>XXXError</snippet></ROW><ROW><id>10323079</id><snippet>ValueError</snippet></ROW><ROW><id>10323079</id><snippet>try:
     # do something
except MyCustomWarningOne:
    # do something else
except MyCustomWarningTwo:
    # do something else also
except ValueError: # or RuntimeWarning if you subclass from it
    # catch some other warning (both of these subclass from ValueError for example)
</snippet></ROW><ROW><id>10323079</id><snippet>warnings</snippet></ROW><ROW><id>10323282</id><snippet>self.factory.whatever_name_for_db_connection.doSomething() 
</snippet></ROW><ROW><id>10323282</id><snippet>from twisted.protocols import amp
from twisted.internet import reactor
from twisted.internet.protocol import Factory
import time

class AMPDBAccessProtocolFactory(Factory):
    def getDBConnection(self):
        if 'dbConnection' in dir(self):
            return self.dbConnection
        else:
            self.dbConnection = SQLLiteTestConnection(self.dbURL)
            return self.dbConnection

class SQLLiteTestConnection(object):
    """
    Provides abstraction for database access and some business functions.
    """
    def __init__(self,dbURL):
        self.dbPool =  adbapi.ConnectionPool("sqlite3" , dbURL,  check_same_thread=False)

    def insertBTData4(self,data):
        query = "INSERT INTO btdata4(co2_data, patient_Id, sensor_Id) VALUES (%s,%s,%s)" 
        tm=time.time()
        print "insert time:",tm
        chx=data
        PID=2
        device_ID=5
        dF = self.dbPool.runQuery(query,(chx, PID, device_ID)) 
        dF.addCallback(self.onQuerySuccess,insert_data=data)
        return dF
    def onQuerySuccess(self,insert_data,*r):
        """
        Here you can inspect query results or add any other valuable information to be parsed at client.
        For the test sake we will just return True to a customer if query was a success.
        original data available at kw argument insert_data
        """
        return True


class Insert(amp.Command):
    arguments = [('data', amp.Integer())]
    response = [('insert_result', amp.Integer())]

class MyAMPProtocol(amp.AMP):

    @Insert.responder
    def dbInsert(self, data):
        db = self.factory.getDBConnection()
        dF = db.insertBTData4(data)
        dF.addErrback(self.onInsertError,data)
        return dF

    def onInsertError(self, error, data):
        """
        Here you could do some additional error checking or inspect data 
        which was handed for insert here. For now we will just throw the same exception again
        so that the client gets notified
        """
        raise error

if __name__=='__main__':
    pf = AMPDBAccessProtocolFactory()
    pf.protocol = MyAMPProtocol
    pf.dbURL='biomed1.db'
    reactor.listenTCP(1234, pf) 
    reactor.run()
</snippet></ROW><ROW><id>10323282</id><snippet>from twisted.internet import reactor
from twisted.internet.protocol import ClientCreator
from twisted.protocols import amp
import time

class Insert(amp.Command):
    arguments = [('data', amp.Integer())]
    response = [('insert_result', amp.Integer())]

class ServerProxy(object):
    def connected(self,protocol):
        self.serverProxy = protocol # assign protocol as instance variable
        reactor.callLater(5,self.startMultipleInsert) #after five seconds start multiple insert procedure

    def remote_insert(self,data):
        return self.serverProxy.callRemote(Insert, data)

    def startMultipleInsert(self):
        for i in range (10): #send data over ten times
            dF = self.remote_insert(i)
            dF.addCallback(self.gotInsertResult)
            dF.addErrback(error)

    def gotInsertResult(self,result):
        print 'insert_result:', str(result)
        tm=time.time()
        print "stop", tm    

def error(reason):
    print "error", reason


def main():
    tm=time.time()
    print "start",tm
    serverProxy = ServerProxy()
    ClientCreator(reactor, amp.AMP).connectTCP('127.0.0.1', 1234).addCallback(serverProxy.connected).addErrback(error)
    reactor.run()    

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>10323620</id><snippet>pydoc -p</snippet></ROW><ROW><id>10323620</id><snippet>sphinx-server</snippet></ROW><ROW><id>10323620</id><snippet>#!/bin/sh
sphinx-apidoc -F -o "$2" "$1"
cd "$2"
make html
cd _build/html
python -mSimpleHTTPServer 2345
</snippet></ROW><ROW><id>10323773</id><snippet>AWS_S3_FILE_OVERWRITE</snippet></ROW><ROW><id>10323826</id><snippet>class BorgLike:
    _shared = 'default'
    def __init__(self, unique):
        self.unique = unique
    @property
    def shared(self):
        return BorgLike._shared
    @shared.setter
    def shared(self, value):
        BorgLike._shared = value
</snippet></ROW><ROW><id>10323858</id><snippet>original = list(range(10))
modified = list(original)
modified[5] = "a"
modified[6] = "a"

def without_repeated(original, modified):
    seen = set()
    for (o, m) in zip(original, modified):
        if m not in seen:
            seen.add(m)
            yield o, m

original, modified = zip(*without_repeated(original, modified))

print(original)
print(modified)
</snippet></ROW><ROW><id>10323858</id><snippet>(0, 1, 2, 3, 4, 5, 7, 8, 9)
(0, 1, 2, 3, 4, 'a', 7, 8, 9)
</snippet></ROW><ROW><id>10323858</id><snippet>seen = set()
original, modified = zip(*((o, m) for (o, m) in zip(original, modified) if m not in seen and not seen.add(m)))
</snippet></ROW><ROW><id>10324011</id><snippet>ajax()</snippet></ROW><ROW><id>10324011</id><snippet>$('#someform').click(function() {
    ajax("{{=URL('default', 'login_status')}}", [], ':eval');
});

// some controller.py
def login_status():
    if auth.user:
        return 'this.show()' # or appropriate Javascript code to show the form
    else:
        return 'window.location = "%s"' % URL('default', 'index')
</snippet></ROW><ROW><id>10324011</id><snippet>URL()</snippet></ROW><ROW><id>10324011</id><snippet>ajax()</snippet></ROW><ROW><id>10324011</id><snippet>{{ }}</snippet></ROW><ROW><id>10324011</id><snippet>return 'window.location = "%s"' % URL('default', 'index')
</snippet></ROW><ROW><id>10324011</id><snippet>redirect(URL('default', 'index'), client_side=True)
</snippet></ROW><ROW><id>10324073</id><snippet>pattern = re.compile(r'(\n--)([0-9A-F]+)(--)?', re.I | re.S | re.M)
</snippet></ROW><ROW><id>10324090</id><snippet>def weighted_random_choice(choices):
    max = sum(choices.values())
    pick = random.uniform(0, max)
    current = 0
    for key, value in choices.items():
        current += value
        if current &gt; pick:
            return key
</snippet></ROW><ROW><id>10324090</id><snippet>choices = {chromosome: chromosome.fitness for chromosome in chromosomes}
</snippet></ROW><ROW><id>10324090</id><snippet>def weighted_random_choice(chromosomes):
    max = sum(chromosome.fitness for chromosome in chromosomes)
    pick = random.uniform(0, max)
    current = 0
    for chromosome in chromosomes:
        current += chromosome.fitness
        if current &gt; pick:
            return chromosome
</snippet></ROW><ROW><id>10324108</id><snippet>sharpener = PIL.ImageEnhance.Sharpness (img.convert('RGB'))
</snippet></ROW><ROW><id>10324108</id><snippet>convert</snippet></ROW><ROW><id>10324264</id><snippet>\n</snippet></ROW><ROW><id>10324304</id><snippet>UPDATE financial_statements
SET url = %s
WHERE provider=%s AND date=%s
</snippet></ROW><ROW><id>10324475</id><snippet>exec /bin/su -c "cd /var/www/ssrc/...; python ..." - www-data
</snippet></ROW><ROW><id>10324600</id><snippet>import re
import pyparsing

class BoolRegEx(object):

  def Match(self, tags=[], query=""):
    self.tags = tags
    if ' ' not in query:
      return self.Search(query)
    else:
      return pyparsing.operatorPrecedence(
        pyparsing.Word(pyparsing.printables, excludeChars="()"), [
          (pyparsing.Literal("NOT"), 1, pyparsing.opAssoc.RIGHT, self.Not),
          (pyparsing.Literal("OR"),  2, pyparsing.opAssoc.LEFT,  self.Or),
          (pyparsing.Literal("AND"), 2, pyparsing.opAssoc.LEFT,  self.And),
        ]
      ).parseString(query, parseAll=True)[0]

  def Search(self, a):
    try:
      regex = re.compile(a.replace("&lt;&lt;", "#~").replace("&gt;&gt;", "~#").replace("&gt;", ")").replace("&lt;", "(").replace("#~", "&lt;").replace("~#", "&gt;"))
      for tag in self.tags:
        match = regex.match(tag)
        if match and len(match.group(0)) == len(tag):
          return True
      return False
    except:
      raise

  def And(self, t):
    for a in t[0][0::2]:
      if isinstance(a, basestring):
        v = self.Search(a)
      else:
        v = bool(a)
      if not v:
        return False
    return True

  def Or(self, t):
    for a in t[0][0::2]:
      if isinstance(a, basestring):
        v = self.Search(a)
      else:
        v = bool(a)
      if v:
        return True
    return False

  def Not(self, t):
    a = t[0][1]
    if isinstance(a, basestring):
      return not self.Search(a)
    else:
      return not bool(a)

print BoolRegEx().Match(['client/chat', 'user_a', 'limited', 'extraspecial'], "client/.+ AND user_a AND NOT ( limited AND NOT ( .+&lt;r|i&gt;special OR godmode ) )")
# False

print BoolRegEx().Match(['client/chat', 'user_a', 'limited', 'superspecial'], "client/.+ AND user_a AND NOT ( limited AND NOT ( .+&lt;r|i&gt;special OR godmode ) )")
# True
</snippet></ROW><ROW><id>10324962</id><snippet>y_test</snippet></ROW><ROW><id>10324962</id><snippet>from sklearn.metrics import zero_one_score

y_pred = svm.predict(test_samples)
accuracy = zero_one_score(y_test, y_pred)
error_rate = 1 - accuracy
</snippet></ROW><ROW><id>10324979</id><snippet>liveCoords2</snippet></ROW><ROW><id>10324979</id><snippet>liveCoords2 = liveCoords</snippet></ROW><ROW><id>10324979</id><snippet>liveCoords2</snippet></ROW><ROW><id>10324979</id><snippet>liveCoords</snippet></ROW><ROW><id>10324979</id><snippet>liveCoords2 = list(liveCoords)</snippet></ROW><ROW><id>10324979</id><snippet>liveCoords2 = liveCoords[:]</snippet></ROW><ROW><id>10324979</id><snippet>listCoords</snippet></ROW><ROW><id>10324979</id><snippet>listCoords2</snippet></ROW><ROW><id>10324979</id><snippet>listCoords</snippet></ROW><ROW><id>10324979</id><snippet>import copy
liveCoords2 = copy.deepcopy(liveCoords)
</snippet></ROW><ROW><id>10325283</id><snippet>visited = {}
for line in open('3GFT.pdb'):
    list = line.split()
    id = list[0]
    if id == 'ATOM':
        type = list[2]
        if type == 'CA':
            residue = list[3]
            type_of_chain = list[4]
            atom_count = int(list[5])
            position = list[6:8]
            if atom_count &gt;= 0:
                if type_of_chain not in visited:
                    visited[type_of_chain] = 1
                    print residue,type_of_chain,atom_count,' '.join(position)
</snippet></ROW><ROW><id>10325283</id><snippet>MET A 1 62.935 97.579
GLY B 0 39.524 105.916
GLY C 0 67.295 110.376
MET D 1 59.311 124.106
GLY E 0 44.038 96.819
GLY F 0 44.187 123.590
</snippet></ROW><ROW><id>10325368</id><snippet>~/test$ ctags -x --c-types=f ./test.c
func1            function      1 ./test.c         int func1 (int para) {
func2            function      5 ./test.c         int func2 (int para) {
~/test$ # Clean up the output a little bit
~/test$ ctags -x --c-types=f ./test.c | sed -e 's/\s\+/ /g' | cut -d ' ' -f 5-
int func1 (int para) {
int func2 (int para) {
</snippet></ROW><ROW><id>10325400</id><snippet>client_action_multi</snippet></ROW><ROW><id>10325400</id><snippet>production_packing</snippet></ROW><ROW><id>10325484</id><snippet>multiprocessing.Connection</snippet></ROW><ROW><id>10325484</id><snippet>multiprocessing</snippet></ROW><ROW><id>10325545</id><snippet>import itertools
itertools.chain.from_iterable(itertools.repeat([1, 2, 3], 5))
</snippet></ROW><ROW><id>10325959</id><snippet>text</snippet></ROW><ROW><id>10325959</id><snippet>93: text = font.render('Starting Twerk... ', True, (100,100,100))
</snippet></ROW><ROW><id>10325959</id><snippet>text(...)</snippet></ROW><ROW><id>10325959</id><snippet>text</snippet></ROW><ROW><id>10325959</id><snippet>text</snippet></ROW><ROW><id>10326089</id><snippet>x = numpy.zeros((1+N,1+N))</snippet></ROW><ROW><id>10326089</id><snippet>x[:,3] = 1</snippet></ROW><ROW><id>10326089</id><snippet>x = [m*[0] for i in range(n)]</snippet></ROW><ROW><id>10326089</id><snippet>x</snippet></ROW><ROW><id>10326089</id><snippet>x[3] = ...</snippet></ROW><ROW><id>10326123</id><snippet>_subprocess</snippet></ROW><ROW><id>10326123</id><snippet>subprocess</snippet></ROW><ROW><id>10326123</id><snippet>subprocess</snippet></ROW><ROW><id>10326123</id><snippet>_subprocess</snippet></ROW><ROW><id>10326123</id><snippet>if mswindows</snippet></ROW><ROW><id>10326123</id><snippet>* support routines for subprocess module
*
* Currently, this extension module is only required when using the
* subprocess module on Windows, but in the future, stubs for other
* platforms might be added here as well.
</snippet></ROW><ROW><id>10326158</id><snippet>import base64

def num_to_alpha(num):
    num = hex(num)[2:].rstrip("L")

    if len(num) % 2:
        num = "0" + num

    return base64.b64encode(num.decode('hex'))
</snippet></ROW><ROW><id>10326158</id><snippet>def alpha_to_num(alpha):
    num_bytes = base64.b64decode(alpha)
    return int(num_bytes.encode('hex'), 16)
</snippet></ROW><ROW><id>10326158</id><snippet>&gt;&gt;&gt; num_to_alpha(20120425161608678259146181504021022591461815040210220120425161608667)
'vw4LUVm4Ea3fMnoTkHzNOlP6Z7eUAkHNdZjN2w=='
&gt;&gt;&gt; alpha_to_num('vw4LUVm4Ea3fMnoTkHzNOlP6Z7eUAkHNdZjN2w==')
20120425161608678259146181504021022591461815040210220120425161608667
</snippet></ROW><ROW><id>10326392</id><snippet>(r'^blog/detail/(?P&lt;slug_id&gt;[-w]+/$', 'blog.views.detailView'), 
</snippet></ROW><ROW><id>10326392</id><snippet>(r'^blog/detail/(?P&lt;slug_id&gt;[-w]+)/$', 'blog.views.detailView'), 
</snippet></ROW><ROW><id>10326607</id><snippet>dir</snippet></ROW><ROW><id>10326642</id><snippet>admin.site.register([Blog, BlogAdmin])
</snippet></ROW><ROW><id>10326642</id><snippet>Blog</snippet></ROW><ROW><id>10326642</id><snippet>BlogAdmin</snippet></ROW><ROW><id>10326642</id><snippet>Model</snippet></ROW><ROW><id>10326642</id><snippet>ModelAdmin</snippet></ROW><ROW><id>10326642</id><snippet>admin.site.register(Blog, BlogAdmin) 
</snippet></ROW><ROW><id>10326775</id><snippet>.grid</snippet></ROW><ROW><id>10326775</id><snippet>None</snippet></ROW><ROW><id>10326775</id><snippet>print message_frame</snippet></ROW><ROW><id>10326775</id><snippet>None</snippet></ROW><ROW><id>10326775</id><snippet>message_frame=LabelFrame(root,text="testing",padx=0,pady=0,width=100,height=100)
message_frame.grid(row=0,column=0)
</snippet></ROW><ROW><id>10326775</id><snippet>pub_label</snippet></ROW><ROW><id>10326775</id><snippet>priv_label</snippet></ROW><ROW><id>10326775</id><snippet>None</snippet></ROW><ROW><id>10327097</id><snippet>&gt;&gt;&gt; set("aeiou").issuperset("hello world")
False
&gt;&gt;&gt; set("aeiou").issuperset("eoo")
True
</snippet></ROW><ROW><id>10327156</id><snippet>def replacer(original, looking_for, replace_with):
   ''' A straightforward way... '''
   return original.replace(looking_for, replace_with, 1)
   #return regex.sub(replace_with, looking_for, 1)
</snippet></ROW><ROW><id>10327156</id><snippet>replace</snippet></ROW><ROW><id>10327226</id><snippet># Static content
    Alias /media/ C:/Programs/TestDjango/mysite/media/

    &lt;Directory C:/Programs/TestDjango/mysite/media/&gt;
    Order deny,allow
    Allow from all
    &lt;/Directory&gt;

# Django dynamic content

    WSGIScriptAlias / C:/Programs/TestDjango/mysite/apache/django.wsgi

    &lt;Directory C:/Programs/TestDjango/mysite/apache&gt;
    Order deny,allow
    Allow from all
    &lt;/Directory&gt;`
</snippet></ROW><ROW><id>10327226</id><snippet>      ` import os
        import sys

        sys.path.append('C:/Programs/TestDjango')
        os.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings'

        import django.core.handlers.wsgi
        application = django.core.handlers.wsgi.WSGIHandler()`
</snippet></ROW><ROW><id>10327232</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>10327791</id><snippet>pip install south==0.7.4
</snippet></ROW><ROW><id>10327986</id><snippet>logging.getLogger("").handlers</snippet></ROW><ROW><id>10327986</id><snippet>addHandler()</snippet></ROW><ROW><id>10327986</id><snippet>logging_tree</snippet></ROW><ROW><id>10327986</id><snippet>pdb</snippet></ROW><ROW><id>10327986</id><snippet>self._logger.info(…)</snippet></ROW><ROW><id>10328142</id><snippet>ax.auto_scale_xyz([0, 500], [0, 500], [0, 0.15])
</snippet></ROW><ROW><id>10328142</id><snippet>xmin, xmax = self.get_xlim3d() / self.pbaspect[0]
ymin, ymax = self.get_ylim3d() / self.pbaspect[1]
zmin, zmax = self.get_zlim3d() / self.pbaspect[2]
</snippet></ROW><ROW><id>10328142</id><snippet>ax = fig.gca(projection = '3d')
ax.pbaspect = [2.0, 0.6, 0.25]
</snippet></ROW><ROW><id>10328344</id><snippet>  s = [i.replace("'", "") for i in s]
</snippet></ROW><ROW><id>10328718</id><snippet>x = 2
y = 3
nestedArray = [[0]*y for a in xrange(x)]
</snippet></ROW><ROW><id>10328718</id><snippet>class NestedArray(object):
    def __init__(self, x, y, defaultValue=0):
        self.x = x
        self.y = y
        self.array = [[defaultValue]*y for a in xrange(x)]

    def __len__(self):
        return self.x * self.y

    def __getitem__(self, key):
            return self.array[key]

    def __setitem__(self, key, value):
            self.array[key] = value
</snippet></ROW><ROW><id>10328808</id><snippet>from scipy.integrate import quad
from scipy.optimize import fsolve
from math import cos, sin, sqrt, pi

def circle_diff(t):
    dx = -sin(t)
    dy = cos(t)
    return sqrt(dx*dx+dy*dy)

def sin_diff(t):
    dx = 1
    dy = cos(t)
    return sqrt(dx*dx+dy*dy)

def curve_length(t0, S, length):
    return quad(S, 0, t0)[0] - length

def solve_t(curve_diff, length):    
    return fsolve(curve_length, 0.0, (curve_diff, length))[0]

print solve_t(circle_diff, 2*pi)
print solve_t(sin_diff, 7.640395578)
</snippet></ROW><ROW><id>10328972</id><snippet>s = ', '.join(l)
</snippet></ROW><ROW><id>10328972</id><snippet>&gt;&gt;&gt; l = ['banana', 'apple', 'pear']
&gt;&gt;&gt; ', '.join(l)
'banana, apple, pear'
</snippet></ROW><ROW><id>10328972</id><snippet>for (int i = 0; i &lt; l.length; i++) {
  if (i != 0) {
    s += ", ";
  }
  s += l[i];
}
</snippet></ROW><ROW><id>10329482</id><snippet>{% if user.is_authenticated %}
  ... html stuff ...
{% endif %}
</snippet></ROW><ROW><id>10329482</id><snippet>@login_required</snippet></ROW><ROW><id>10330184</id><snippet>import traceback

def foo():
    bar()

def bar():
    baz()

def baz():
    traceback.print_stack() 
    # or trace = traceback.extract_stack()

foo()
</snippet></ROW><ROW><id>10330744</id><snippet>/usr/lib/gcc/x86_64-redhat-linux/4.6.2/include/stdarg.h</snippet></ROW><ROW><id>10330744</id><snippet>gcc</snippet></ROW><ROW><id>10330756</id><snippet>bar</snippet></ROW><ROW><id>10330756</id><snippet>alpha</snippet></ROW><ROW><id>10330756</id><snippet>alpha</snippet></ROW><ROW><id>10330756</id><snippet>sys.modules</snippet></ROW><ROW><id>10330756</id><snippet>&gt;&gt;&gt; import alpha
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: No module named alpha
&gt;&gt;&gt; import sys; sys.modules['alpha'] = object()
&gt;&gt;&gt; import alpha
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10330756</id><snippet>sys.modules</snippet></ROW><ROW><id>10330756</id><snippet>alpha</snippet></ROW><ROW><id>10330756</id><snippet>alpha</snippet></ROW><ROW><id>10330756</id><snippet>bar</snippet></ROW><ROW><id>10330756</id><snippet>bar</snippet></ROW><ROW><id>10330756</id><snippet>alpha</snippet></ROW><ROW><id>10330785</id><snippet>__name__ == '__main__'</snippet></ROW><ROW><id>10330785</id><snippet>--exe</snippet></ROW><ROW><id>10331031</id><snippet>&gt;&gt;&gt; def change_list(lst):
...   lst[0] = lst[0] * 2
... 
&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; change_list(a)
&gt;&gt;&gt; a
[2, 2, 3]
</snippet></ROW><ROW><id>10331031</id><snippet>&gt;&gt;&gt; def change_list(lst):
...   lst[0] = lst[0] * 2
... 
&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; cpy_a = list(a)
&gt;&gt;&gt; change_list(cpy_a)
&gt;&gt;&gt; a
[1, 2, 3]
</snippet></ROW><ROW><id>10331031</id><snippet>&gt;&gt;&gt; def change_list(lst):
...   lst_cpy = list(lst)
...   lst_cpy[0] = lst_cpy[0] * 2
... 
&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; change_list(a)
&gt;&gt;&gt; a
[1, 2, 3]
</snippet></ROW><ROW><id>10331248</id><snippet>&gt;&gt;&gt; frm = 'acdefhnoprstuw'
&gt;&gt;&gt; to = 'אקדיפהנופרסתאו'
&gt;&gt;&gt; trans_table = str.maketrans(frm, to)
&gt;&gt;&gt; hebrew_phrase = 'fear cuts deeper than swords'.translate(trans_table)
&gt;&gt;&gt; hebrew_phrase
'פיאר קאתס דייפיר תהאנ סוורדס'
</snippet></ROW><ROW><id>10331395</id><snippet>break</snippet></ROW><ROW><id>10331395</id><snippet>break</snippet></ROW><ROW><id>10331395</id><snippet>return</snippet></ROW><ROW><id>10331456</id><snippet>pip install package
</snippet></ROW><ROW><id>10331942</id><snippet>&gt;&gt;&gt; "IR05 měsíční (monthly)".decode('utf8')
u'IR05 m\u011bs\xed\u010dn\xed (monthly)'
</snippet></ROW><ROW><id>10331942</id><snippet>&gt;&gt;&gt; 'IR05 m\xecs\xed\xe8n\xed (monthly)'.decode('latin2')
u'IR05 m\u011bs\xed\u010dn\xed (monthly)'
</snippet></ROW><ROW><id>10331942</id><snippet>&gt;&gt;&gt; s_utf8 = "IR05 měsíční (monthly)"
&gt;&gt;&gt; s_latin2 = 'IR05 m\xecs\xed\xe8n\xed (monthly)'
&gt;&gt;&gt; s_utf8.decode('utf8') == s_latin2.decode('latin2')
True
</snippet></ROW><ROW><id>10331942</id><snippet>encode</snippet></ROW><ROW><id>10331942</id><snippet>&gt;&gt;&gt; s = s_utf8.decode('utf8')

&gt;&gt;&gt; filehandle.write(s.encode('utf8'))
</snippet></ROW><ROW><id>10332841</id><snippet>long_value = long(string_value.decode('hex'), 16)
# maybe someone knows a better way?
</snippet></ROW><ROW><id>10332841</id><snippet>from Crypto.PublicKey import RSA
with open("keyfile", "rb") as f:
    key = RSA.importKey(f.read())
</snippet></ROW><ROW><id>10332841</id><snippet>u</snippet></ROW><ROW><id>10332841</id><snippet>1/p % q (where p &gt; q)</snippet></ROW><ROW><id>10332856</id><snippet>startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
</snippet></ROW><ROW><id>10332856</id><snippet>dwFlags</snippet></ROW><ROW><id>10332856</id><snippet>STARTF_USESHOWWINDOW</snippet></ROW><ROW><id>10332856</id><snippet>1</snippet></ROW><ROW><id>10332856</id><snippet>dwFlags</snippet></ROW><ROW><id>10332856</id><snippet>1</snippet></ROW><ROW><id>10332856</id><snippet>0</snippet></ROW><ROW><id>10332856</id><snippet>|=</snippet></ROW><ROW><id>10332856</id><snippet>1</snippet></ROW><ROW><id>10332856</id><snippet>00101000</snippet></ROW><ROW><id>10332856</id><snippet>00101001</snippet></ROW><ROW><id>10332856</id><snippet>subprocess.STARTF_USESHOWWINDOW</snippet></ROW><ROW><id>10332887</id><snippet>non_field_errors</snippet></ROW><ROW><id>10332887</id><snippet>{% include %}</snippet></ROW><ROW><id>10332954</id><snippet>result = myRecords.get()
</snippet></ROW><ROW><id>10332954</id><snippet>result.title</snippet></ROW><ROW><id>10332954</id><snippet>setattr(result, 'title', 'New Title')</snippet></ROW><ROW><id>10332954</id><snippet>result.put()</snippet></ROW><ROW><id>10333943</id><snippet>helloWorld.pyx</snippet></ROW><ROW><id>10333943</id><snippet>import sys
sys.path.append(".") #yourlib is in current folder
import yourlib #you can import any python module

cdef public void helloWorld():
    print "Hello World Cython!"
    yourlib.helloWorld("Python")

cdef public int my_sum(int x, int y):
    return x*x+y

from libcpp.string cimport string

cdef public string testString( string sx, string sy ):
    x = int(sx.c_str())
    y = int(sy.c_str())
    ret= "%d*%d+%d=%d"%(x,x,y,my_sum(x,y))
    cdef char* ret2= ret
    return string( ret2 )
</snippet></ROW><ROW><id>10333943</id><snippet>helloWorld.cpp</snippet></ROW><ROW><id>10333943</id><snippet>helloWorld.h</snippet></ROW><ROW><id>10333943</id><snippet>    cython --cplus helloWorld.pyx
</snippet></ROW><ROW><id>10333943</id><snippet>program.cpp</snippet></ROW><ROW><id>10333943</id><snippet>#include &lt;string&gt;
#include &lt;iostream&gt;
#include "Python.h"
#include "helloWorld.h" // it's cpp header so remove __PYX_EXTERN_C (bug)

int main(int argc, char *argv[]) {
    Py_Initialize(); //start python interpreter
    inithelloWorld(); //run module helloWorld
    helloWorld();
    std::cout &lt;&lt; testString("6","6") &lt;&lt; std::endl; #it's fast!
    Py_Finalize();
    return 0;
}
</snippet></ROW><ROW><id>10333943</id><snippet>    g++ program.cpp helloWorld.cpp -I/usr/include/python2.7/ -lpython2.7
    ./a.out
    Hello World Cython!
    Hello World Python!
    6*6+6=42
</snippet></ROW><ROW><id>10333943</id><snippet>program.cpp</snippet></ROW><ROW><id>10333943</id><snippet>#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;boost/python.hpp&gt;

int main(int argc, char *argv[]) {
    Py_Initialize();
    boost::python::object sys = boost::python::import("sys");
    sys.attr("path").attr("append")(".");
    boost::python::object main_module = boost::python::import("yourlib");
    main_module.attr("helloWorld")("boost_python");
    boost::python::object ret= main_module.attr( "my_sum" )( 10, 10 );
    std::cout &lt;&lt; boost::python::extract&lt;char const*&gt;(ret) &lt;&lt; std::endl;
    Py_Finalize();
    return 0;
}
</snippet></ROW><ROW><id>10333943</id><snippet>    g++ program.cpp -I/usr/include/python2.7/ -lpython2.7 -lpython_boost
    ./a.out
    Hello World boost_python!
    10*10+10=110
</snippet></ROW><ROW><id>10333977</id><snippet>.bashrc
/etc/profile
Anything in /etc/profile.d/  (typically loaded from /etc/profile)
~/.bash_profile
~/.bash_login
</snippet></ROW><ROW><id>10333977</id><snippet>man bash</snippet></ROW><ROW><id>10333977</id><snippet>  When bash is invoked as an interactive login shell, or as
  a non-interactive shell with the --login option,  it  first
  reads  and  executes commands from the file /etc/profile, 
  if that file exists.  After reading that file, it looks for
  ~/.bash_profile, ~/.bash_login, and ~/.profile
</snippet></ROW><ROW><id>10333977</id><snippet>   When an interactive shell that is not a login shell is started,
   bash reads and executes commands from  ~/.bashrc,  if that
   file exists.
</snippet></ROW><ROW><id>10334047</id><snippet>class BodyMassIndex(object): #Inheriting from object in 2.x ensures a new-style class.
  count = 0
  def __init__(self, name, weight, height):
    self.name = name
    self.weight = 14 * weight
    self.height = 12 * height
    self.notes = None
    self.bmitotal = 0
    BodyMassIndex.count += 1

  def display_count(self):
    print "Total number of objects is %d" % BodyMassIndex.count

  def calculate_bmi(self):
    return ( self.weight * 703 ) / ( self.height ** 2 )

test = BodyMassIndex("bob", 10, 10)
test.notes = "some notes"
print(test.notes)
</snippet></ROW><ROW><id>10334047</id><snippet>notes</snippet></ROW><ROW><id>10334047</id><snippet>bmitotal</snippet></ROW><ROW><id>10334346</id><snippet>lin</snippet></ROW><ROW><id>10334346</id><snippet>factory</snippet></ROW><ROW><id>10334346</id><snippet>__init__.py</snippet></ROW><ROW><id>10334346</id><snippet>factory</snippet></ROW><ROW><id>10334346</id><snippet>lin</snippet></ROW><ROW><id>10334346</id><snippet>from top import lin

lin.factory.AClass()
</snippet></ROW><ROW><id>10334346</id><snippet>top/lin/__init__.py</snippet></ROW><ROW><id>10334346</id><snippet>ImportError: No module named factory</snippet></ROW><ROW><id>10334346</id><snippet>top/lin/__init__.py</snippet></ROW><ROW><id>10334346</id><snippet>import top.lin.factory</snippet></ROW><ROW><id>10334346</id><snippet>factory.AClass()</snippet></ROW><ROW><id>10334346</id><snippet>lin</snippet></ROW><ROW><id>10335137</id><snippet>numpy.clip</snippet></ROW><ROW><id>10335137</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = numpy.arange(-10, 10)
&gt;&gt;&gt; a
array([-10,  -9,  -8,  -7,  -6,  -5,  -4,  -3,  -2,  -1,   0,   1,   2,
         3,   4,   5,   6,   7,   8,   9])
&gt;&gt;&gt; a.clip(0, 10)
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
</snippet></ROW><ROW><id>10335137</id><snippet>clip(0)</snippet></ROW><ROW><id>10335137</id><snippet>&gt;&gt;&gt; a = numpy.array([1, 2, 3, -4, 5])
&gt;&gt;&gt; a.clip(0)
array([1, 2, 3, 0, 5])
</snippet></ROW><ROW><id>10335137</id><snippet>clip(max=n)</snippet></ROW><ROW><id>10335137</id><snippet>NaN</snippet></ROW><ROW><id>10335137</id><snippet>out</snippet></ROW><ROW><id>10335137</id><snippet>&gt;&gt;&gt; a.clip(max=2)
array([ 1,  2,  2, -4,  2])
</snippet></ROW><ROW><id>10335137</id><snippet>where</snippet></ROW><ROW><id>10335137</id><snippet>&gt;&gt;&gt; numpy.where(a &lt;= 2, a, 2)
array([ 1,  2,  2, -4,  2])
</snippet></ROW><ROW><id>10335237</id><snippet>#!/bin/sh
while read p; do
  pip install $p
done &lt; requirements.pip
</snippet></ROW><ROW><id>10335627</id><snippet>distutils.core.setup()</snippet></ROW><ROW><id>10335627</id><snippet>install_requires</snippet></ROW><ROW><id>10335627</id><snippet>setup.py</snippet></ROW><ROW><id>10335627</id><snippet>requires</snippet></ROW><ROW><id>10335627</id><snippet>install_requires</snippet></ROW><ROW><id>10335702</id><snippet>url_for</snippet></ROW><ROW><id>10335802</id><snippet>JPEG</snippet></ROW><ROW><id>10335802</id><snippet>GIF</snippet></ROW><ROW><id>10335802</id><snippet>palette</snippet></ROW><ROW><id>10335802</id><snippet>PIL</snippet></ROW><ROW><id>10335802</id><snippet>RGBA</snippet></ROW><ROW><id>10335802</id><snippet>palette</snippet></ROW><ROW><id>10335802</id><snippet>RGB</snippet></ROW><ROW><id>10335802</id><snippet>RGBA</snippet></ROW><ROW><id>10335802</id><snippet>import Image
import sys

def processImage(infile):
    try:
        im = Image.open(infile)
    except IOError:
        print "Cant load", infile
        sys.exit(1)
    i = 0
    mypalette = im.getpalette()

    try:
        while 1:
            im.putpalette(mypalette)
            new_im = Image.new("RGBA", im.size)
            new_im.paste(im)
            new_im.save('foo'+str(i)+'.png')

            i += 1
            im.seek(im.tell() + 1)

    except EOFError:
        pass # end of sequence

processImage('gif_example.gif')
</snippet></ROW><ROW><id>10336112</id><snippet>python2.7</snippet></ROW><ROW><id>10336112</id><snippet>Build-Depends</snippet></ROW><ROW><id>10336112</id><snippet>apt-get install</snippet></ROW><ROW><id>10336218</id><snippet>if</snippet></ROW><ROW><id>10336218</id><snippet>elif</snippet></ROW><ROW><id>10336218</id><snippet>import sys

mark_boundaries = [("A", 41), ("B", 31), ("C", 21), ("D", 11), ("C", 0)]

try:
    marks = []
    for i in range(10):
        marks.append(int(input()))
except ValueError:
    print("You entered an invalid mark, it must be a number.")
    sys.exit(1)

average = sum(marks) #I'd just like to note the misleading variable name here.
#average = sum(marks)/len(marks) #This would be the actual average mark.
print(average)

for mark, boundary in mark_boundaries:
    if average &gt;= boundary:
        print("Grade "+mark)
        break #We only want to print out the best grade they got.
</snippet></ROW><ROW><id>10336218</id><snippet>int(input())</snippet></ROW><ROW><id>10336218</id><snippet>eval(input())</snippet></ROW><ROW><id>10336218</id><snippet>ValueError</snippet></ROW><ROW><id>10336218</id><snippet>dict</snippet></ROW><ROW><id>10336218</id><snippet>dict</snippet></ROW><ROW><id>10336218</id><snippet>if 31 &lt; average &lt; 41: #Equivalent to `if 31 &lt; average and average &lt; 41:`
    print("Grade B")
</snippet></ROW><ROW><id>10336218</id><snippet>if</snippet></ROW><ROW><id>10336218</id><snippet>elif</snippet></ROW><ROW><id>10336249</id><snippet>import pygame</snippet></ROW><ROW><id>10336249</id><snippet>&gt;&gt;&gt; import pygame
&gt;&gt;&gt; from pygame.locals import *
&gt;&gt;&gt; set(dir(pygame.locals)).issubset(set(dir(pygame)))
True
</snippet></ROW><ROW><id>10336249</id><snippet>pygame.locals</snippet></ROW><ROW><id>10336249</id><snippet>import pygame</snippet></ROW><ROW><id>10336249</id><snippet>pygame</snippet></ROW><ROW><id>10336348</id><snippet>pip --download-cache</snippet></ROW><ROW><id>10336348</id><snippet>matplotlib</snippet></ROW><ROW><id>10336348</id><snippet>pip install --download-cache /path/to/pip/cache matplotlib
</snippet></ROW><ROW><id>10336728</id><snippet>{% block extra_head %}</snippet></ROW><ROW><id>10336728</id><snippet>&lt;head&gt;</snippet></ROW><ROW><id>10336728</id><snippet>base_site.html</snippet></ROW><ROW><id>10336728</id><snippet>base_site.html</snippet></ROW><ROW><id>10336728</id><snippet>'DEFAULT_STYLESHEET</snippet></ROW><ROW><id>10336728</id><snippet>base_site.html</snippet></ROW><ROW><id>10336748</id><snippet>my_list[:] = []</snippet></ROW><ROW><id>10336748</id><snippet>foo</snippet></ROW><ROW><id>10336748</id><snippet>create=True</snippet></ROW><ROW><id>10336845</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>10336845</id><snippet>sys.path</snippet></ROW><ROW><id>10336883</id><snippet>libraries:
- name: lxml
  version: latest
</snippet></ROW><ROW><id>10337130</id><snippet>import urllib2
import re, sys
from HTMLParser import HTMLParser

# EDIT 1: import the packag
from BeautifulSoup import BeautifulSoup

class MLStripper(HTMLParser):
    def __init__(self):
        self.reset()
        self.fed = []
    def handle_data(self, d):
        self.fed.append(d)
    def get_data(self):
        return ''.join(self.fed)

def stripHTMLTags(html):
    html = re.sub(r'&lt;{1}br{1}&gt;', '\n', html)
    s = MLStripper()
    s.feed(html)
    text = s.get_data()
    if "External links" in text:
        text, sep, tail = text.partition('External links')
    if "External Links" in text:
        text, sep, tail = text.partition('External Links')
    text = text = text.replace("See also","\n\n See Also - \n")
    text = text.replace("*","- ")
    text = text.replace(".", ". ")
    text = text.replace("  "," ")
    text = text.replace("""   /
 / ""","")
    return text

opener = urllib2.build_opener()
opener.addheaders = [('User-agent', 'Mozilla/5.0')]
infile = opener.open('http://en.wikipedia.org/w/index.php?title=Albert_Einstein&amp;printable=yes')
page = infile.read()

# EDIT 2: convert the page and extract text from the first &lt;p&gt; tag
soup = BeautifulSoup(page)
para = soup.findAll("p", limit=1)[0].text

print stripHTMLTags(para)
</snippet></ROW><ROW><id>10337286</id><snippet>str()</snippet></ROW><ROW><id>10337286</id><snippet>ascii</snippet></ROW><ROW><id>10337484</id><snippet>print subprocess.call(["command","param"])</snippet></ROW><ROW><id>10337484</id><snippet>0</snippet></ROW><ROW><id>10337643</id><snippet>bottleneck</snippet></ROW><ROW><id>10337643</id><snippet>bottleneck.partsort()</snippet></ROW><ROW><id>10337643</id><snippet>z = -bottleneck.partsort(-a, 10)[:10]</snippet></ROW><ROW><id>10337643</id><snippet>z = a.argsort()[-10:]</snippet></ROW><ROW><id>10337643</id><snippet>z = heapq.nlargest(10, a)</snippet></ROW><ROW><id>10337643</id><snippet>a</snippet></ROW><ROW><id>10337643</id><snippet>bottleneck.partsort()</snippet></ROW><ROW><id>10337643</id><snippet>np.argsort()</snippet></ROW><ROW><id>10337643</id><snippet>heapq.nlargest()</snippet></ROW><ROW><id>10337844</id><snippet>#!/usr/bin/perl 
use IO::Socket::INET;
use POSIX qw(strftime);
$print_time = strftime "%Y%m%d-%H_%M_%S", localtime; 
$myport=515; 
$pserve=IO::Socket::INET-&gt;new(LocalPort =&gt; $myport,Type=&gt;SOCK_STREAM,Reuse=&gt;1,Listen=&gt;1) or die "Socket error: $!\n"; 
while ($pjob=$pserve-&gt;accept()) {
    open(J,"&gt;&gt;/tmp/printserv/outs/".$print_time.".txt") or print "File open error: $!\n"; 
    while (&lt;$pjob&gt;) { 
        print J "$_"; 
    } 
    close J; 
    close $pjob;
    print  "DONE..."; 
}
</snippet></ROW><ROW><id>10338002</id><snippet>#!/usr/bin/env python

import Queue
import threading
import urllib2
import time
import htmllib, formatter

class LinksExtractor(htmllib.HTMLParser):
    # derive new HTML parser

    def __init__(self, formatter):        
        # class constructor
        htmllib.HTMLParser.__init__(self, formatter)  
        # base class constructor
        self.links = []        
        # create an empty list for storing hyperlinks

    def start_a(self, attrs) :  # override handler of &lt;A ...&gt;...&lt;/A&gt; tags
        # process the attributes
        if len(attrs) &gt; 0 :
            for attr in attrs :
                if attr[0] == "href":         
                    # ignore all non HREF attributes
                    self.links.append(attr[1]) # save the link info in the list

    def get_links(self) :     
        # return the list of extracted links
        return self.links

format = formatter.NullFormatter()
htmlparser = LinksExtractor(format)

data = open("links.html")
htmlparser.feed(data.read())
htmlparser.close()

hosts = htmlparser.links

queue = Queue.Queue()

class ThreadUrl(threading.Thread):
    """Threaded Url Grab"""
    def __init__(self, queue):
        threading.Thread.__init__(self)
        self.queue = queue

    def run(self):
        while True:
            #grabs host from queue
            host = self.queue.get()

            ####################################
            ############FIX THIS PART###########
            #VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV#

            url = urllib2.urlopen(host)
            morehtml = url.read() # your own your own with this

            #signals to queue job is done
            self.queue.task_done()

start = time.time()
def main():
    #spawn a pool of threads, and pass them queue instance 
    for i in range(5):
        t = ThreadUrl(queue)
        t.setDaemon(True)
        t.start()

        #populate queue with data   
    for host in hosts:
        queue.put(host)

    #wait on the queue until everything has been processed     
    queue.join()

main()
print "Elapsed Time: %s" % (time.time() - start)
</snippet></ROW><ROW><id>10338023</id><snippet>def get_upload_to(instance, filename):
    return School._meta.get_field(instance.field_name).upload_to+"/"+filename
</snippet></ROW><ROW><id>10338054</id><snippet>%</snippet></ROW><ROW><id>10338054</id><snippet>%3d</snippet></ROW><ROW><id>10338054</id><snippet>%.2f</snippet></ROW><ROW><id>10338054</id><snippet>String Formatting Operations</snippet></ROW><ROW><id>10338054</id><snippet>number_of_Widgets = 5
cost = 66.8788
print 'Total cost for %d widgets is $ %5.2f.' % (number_of_Widgets, cost)
</snippet></ROW><ROW><id>10338054</id><snippet>Total cost for 5 widgets is $ 66.88.
</snippet></ROW><ROW><id>10338054</id><snippet>In [9]: for i in xrange(5,15):
   ...:     print '%d is the number' % i
   ...:
5 is the number
6 is the number
7 is the number
8 is the number
9 is the number
10 is the number
11 is the number
12 is the number
13 is the number
14 is the number
</snippet></ROW><ROW><id>10338054</id><snippet>In [10]: for i in xrange(5,15):
   ....:     print '%2d is the number' % i
   ....:
 5 is the number
 6 is the number
 7 is the number
 8 is the number
 9 is the number
10 is the number
11 is the number
12 is the number
13 is the number
14 is the number
</snippet></ROW><ROW><id>10338267</id><snippet>xml.etree.ElementTree.register_namespace(prefix, uri)</snippet></ROW><ROW><id>10338267</id><snippet>xml.etree.ElementTree.register_namespace("lc", "http://schemas.com/labcore/configuration")
</snippet></ROW><ROW><id>10338267</id><snippet>loggingTag = rootElement.find("lc:labcore.logging.service")
</snippet></ROW><ROW><id>10338350</id><snippet>ImportError</snippet></ROW><ROW><id>10338350</id><snippet>import login</snippet></ROW><ROW><id>10338350</id><snippet>from ... import login</snippet></ROW><ROW><id>10338350</id><snippet>/admin/</snippet></ROW><ROW><id>10338350</id><snippet>AUTHENTICATION_BACKENDS</snippet></ROW><ROW><id>10338679</id><snippet>from ..models import House
</snippet></ROW><ROW><id>10339339</id><snippet>#!/usr/bin/env python

import paramiko

username = ('user')
password = ('1234')
hostname = ('test-server.com')
ports = 22
localD = ('/var/tmp/testxxxxxxxx.tar.gz')
remoteD = ('/var/tmp/testxxxxxxxx.tar.gz')

def check(sftp, path):
    parts = path.split('/')
    for n in range(2, len(parts) + 1):
        path = '/'.join(parts[:n])
        print 'Path:', path,
        sys.stdout.flush()
        try:
            s = sftp.stat(path)
            print 'mode =', oct(s.st_mode)
        except IOError as e:
            print e

paramiko.util.log_to_file('/tmp/paramiko.log')
transport = paramiko.Transport((hostname, ports))
transport.connect(username = username, password = password)
sftp = paramiko.SFTPClient.from_transport(transport)
check(sftp, remoteD)

sftp.close()
transport.close()
</snippet></ROW><ROW><id>10339339</id><snippet>Path: /var mode = 040755
Path: /var/tmp mode = 040700
Path: /var/tmp/testxxxxxxxx.tar.gz [Errno 2] No such file
</snippet></ROW><ROW><id>10339420</id><snippet>
xxd -b filename
</snippet></ROW><ROW><id>10339423</id><snippet>http://api.hostip.info/get_html.php?ip=64.233.160.0
</snippet></ROW><ROW><id>10339423</id><snippet>urllib2</snippet></ROW><ROW><id>10339423</id><snippet>import urllib2
f = urllib2.urlopen("http://api.hostip.info/get_html.php?ip=64.233.160.0")
data = f.read()
f.close()
</snippet></ROW><ROW><id>10339423</id><snippet>position=true</snippet></ROW><ROW><id>10339423</id><snippet>http://api.hostip.info/get_html.php?ip=64.233.160.0&amp;position=true
</snippet></ROW><ROW><id>10339503</id><snippet>ARCHFLAGS="-arch x86_64" python setup.py build
</snippet></ROW><ROW><id>10339647</id><snippet>1 / 2</snippet></ROW><ROW><id>10339647</id><snippet>0.5</snippet></ROW><ROW><id>10339647</id><snippet>1 / 2</snippet></ROW><ROW><id>10339647</id><snippet>0</snippet></ROW><ROW><id>10339647</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>10339647</id><snippet>(td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10.0**6
</snippet></ROW><ROW><id>10339706</id><snippet>client_max_body_size 10m;
</snippet></ROW><ROW><id>10340032</id><snippet>tuple1</snippet></ROW><ROW><id>10340032</id><snippet>tuple2</snippet></ROW><ROW><id>10340032</id><snippet>1</snippet></ROW><ROW><id>10340032</id><snippet>2</snippet></ROW><ROW><id>10340032</id><snippet>&gt;&gt;&gt; my_data = {1: (1,2,3), 2: (4,5,6)}
&gt;&gt;&gt; my_data
{1: (1, 2, 3), 2: (4, 5, 6)}
&gt;&gt;&gt; my_data[1]
(1, 2, 3)
&gt;&gt;&gt; my_data[2]
(4, 5, 6)
</snippet></ROW><ROW><id>10340032</id><snippet>&gt;&gt;&gt; my_data = [(1,2,3), (4,5,6)]
&gt;&gt;&gt; my_data[0]
(1, 2, 3)
&gt;&gt;&gt; my_data[1]
(4, 5, 6)
&gt;&gt;&gt; for tup in my_data:
...     print tup
... 
(1, 2, 3)
(4, 5, 6)
</snippet></ROW><ROW><id>10340059</id><snippet>validation = {'studio': studio, 'movie': movie}
validation_errors = []
for key in validation:
    if not validation[key]:
        validation_errors.append(key)
</snippet></ROW><ROW><id>10340252</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>10340252</id><snippet>sorted</snippet></ROW><ROW><id>10340252</id><snippet>import ast
from operator import itemgetter

def parse_item(s):
  name, score = ast.literal_eval(s)
  return name, int(score)

with open("infile", "r") as infile:
  items = [parse_item(line.strip()) for line in infile]

for item in sorted(items, key=itemgetter(1), reverse=True):
  print item
</snippet></ROW><ROW><id>10340252</id><snippet>print ''.join(sorted(open('infile'), key=lambda l: -int(ast.literal_eval(l)[1]))),
</snippet></ROW><ROW><id>10340315</id><snippet>M-x describe-function RET python-mode</snippet></ROW><ROW><id>10340315</id><snippet>python-mode is an interactive compiled Lisp function in ``python.el'</snippet></ROW><ROW><id>10340315</id><snippet>python.el</snippet></ROW><ROW><id>10340315</id><snippet>M-x pwd</snippet></ROW><ROW><id>10340498</id><snippet>CLASSPATH</snippet></ROW><ROW><id>10340609</id><snippet>bottle.default_app()</snippet></ROW><ROW><id>10340609</id><snippet>if __name__ == "__main__":
    bottle_app = bottle.default_app()
    bottle_handler = tornado.wsgi.WSGIContainer(bottle_app)
    HTTPServer(Application([(r"/ws", WSHandler),
                            (r"/css/(.*)", StaticFileHandler, {"path": "./css/"}),
                            (r"/js/(.*)", StaticFileHandler, {"path": "./js/"}),
                            (r"/img/(.*)", StaticFileHandler, {"path": "./img/"}),
                            ("/(.*)", bottle_handler)])
                         ).listen(1024)
    IOLoop.instance().start()
</snippet></ROW><ROW><id>10340657</id><snippet>urlopen</snippet></ROW><ROW><id>10340657</id><snippet>wepage = urlopen(http://www.main-url.com/'+ re.sub(r'\s', '', tag['href']))
soup = BeautifulSoup(webpage)
</snippet></ROW><ROW><id>10340775</id><snippet>__VIEWSTATE</snippet></ROW><ROW><id>10340775</id><snippet>POST</snippet></ROW><ROW><id>10341149</id><snippet>os.urandom(16).encode('hex')
</snippet></ROW><ROW><id>10341149</id><snippet>random.random()</snippet></ROW><ROW><id>10341212</id><snippet>href</snippet></ROW><ROW><id>10341212</id><snippet>(&lt;a href ="edit/{{note.key().id()}}"&gt;edit &lt;/a&gt;)
</snippet></ROW><ROW><id>10341214</id><snippet>while True: score += 100</snippet></ROW><ROW><id>10341214</id><snippet>from apscheduler.scheduler import Scheduler

# Start the scheduler
sched = Scheduler()
sched.start()

# Schedule job_function to be called every 5 seconds
@sched.interval_schedule(seconds=5)
def incr_score():
    score += 100
</snippet></ROW><ROW><id>10341356</id><snippet>./pycharm</snippet></ROW><ROW><id>10341356</id><snippet>Console &gt; Django Console</snippet></ROW><ROW><id>10341356</id><snippet>LC_ALL=en_US.UTF-8</snippet></ROW><ROW><id>10341499</id><snippet>dict</snippet></ROW><ROW><id>10341499</id><snippet>[{}]*6</snippet></ROW><ROW><id>10341499</id><snippet>e = [{} for i in range(6)] 
</snippet></ROW><ROW><id>10341539</id><snippet>my_file.function</snippet></ROW><ROW><id>10341539</id><snippet>function</snippet></ROW><ROW><id>10341539</id><snippet>from</snippet></ROW><ROW><id>10341539</id><snippet>import my_file</snippet></ROW><ROW><id>10341539</id><snippet>from my_file import *</snippet></ROW><ROW><id>10341539</id><snippet>from my_file import function1, function2, class1</snippet></ROW><ROW><id>10341539</id><snippet>from my_file import function as awesomePythonFunction</snippet></ROW><ROW><id>10341539</id><snippet>myfile, myfile2</snippet></ROW><ROW><id>10341539</id><snippet>function</snippet></ROW><ROW><id>10341539</id><snippet>function</snippet></ROW><ROW><id>10341539</id><snippet>function</snippet></ROW><ROW><id>10341619</id><snippet>import re

full_pattern = r'\w{3,4}\W\s\d{1,2}\s\w{3}\s\d{4}\s\d{2}:\d{2}:\d{2}'
time_pattern = r'\d{1,2}:\d{2}(\s(A|P)M)?'
combo_regex = '(%s)' % ('|'.join([full_pattern, time_pattern]),)

with open(r'C:\Users\spikem\file_with_two_different_types_of_dates.txt','r') as f:
    for line in f:
        p = re.search(combo_regex, line, re.IGNORECASE)
        if p:
            print p.group() # Assumes a max of one match per line
</snippet></ROW><ROW><id>10341619</id><snippet>Fri, 20 Apr 2012 09:15:17
12:24 PM
Tue, 10 Jan 2012 00:00:00
Fri, 20 Jan 2012 00:00:00
Mon, 30 Jan 2012 00:00:00
Thu, 09 Feb 2012 00:00:00
Sun, 19 Feb 2012 00:00:00
Wed, 29 Feb 2012 00:00:00
Sat, 10 Mar 2012 00:00:00
Tue, 20 Mar 2012 00:00:00
Fri, 30 Mar 2012 00:00:00
Mon, 09 Apr 2012 00:00:00
Thu, 19 Apr 2012 00:00:00
Sun, 29 Apr 2012 00:00:00
Wed, 09 May 2012 00:00:00
Sat, 19 May 2012 00:00:00
Tue, 29 May 2012 00:00:00
Fri, 08 Jun 2012 00:00:00
Mon, 18 Jun 2012 00:00:00
Thu, 28 Jun 2012 00:00:00
Sun, 08 Jul 2012 00:00:00
Wed, 18 Jul 2012 00:00:00
Sat, 28 Jul 2012 00:00:00
Tue, 07 Aug 2012 00:00:00
Fri, 17 Aug 2012 00:00:00
Mon, 27 Aug 2012 00:00:00
Thu, 06 Sep 2012 00:00:00
Sun, 16 Sep 2012 00:00:00
Wed, 26 Sep 2012 00:00:00
Sat, 06 Oct 2012 00:00:00
Tue, 16 Oct 2012 00:00:00
Fri, 26 Oct 2012 00:00:00
</snippet></ROW><ROW><id>10341726</id><snippet>title</snippet></ROW><ROW><id>10341726</id><snippet>-t</snippet></ROW><ROW><id>10341733</id><snippet>pip</snippet></ROW><ROW><id>10341733</id><snippet>pip freeze --local &gt; requirements.txt</snippet></ROW><ROW><id>10341733</id><snippet>pip install -r requirements.txt</snippet></ROW><ROW><id>10341733</id><snippet>find -name '*.pyc' -delete</snippet></ROW><ROW><id>10342112</id><snippet>return render_to_response('list.html', {'error': error})
</snippet></ROW><ROW><id>10342604</id><snippet>OrderedDict</snippet></ROW><ROW><id>10342604</id><snippet>&gt;&gt;&gt; class SortIterDict(dict):
...     def __iter__(self):
...         return iter(sorted(super(SortIterDict, self).__iter__()))
...     def __reversed__(self):
...         return reversed(tuple(iter(self)))
...     def get_next(self, n):
...         return next((x for x in iter(self) if x &gt; n), None)
...     def get_prev(self, n):
...         return next((x for x in reversed(self) if x &lt; n), None)
... 
&gt;&gt;&gt; d = SortIterDict({'d':6, 'a':5, 'c':2})
&gt;&gt;&gt; list(d)
['a', 'c', 'd']
&gt;&gt;&gt; list(reversed(d))
['d', 'c', 'a']
&gt;&gt;&gt; d.get_next('b')
'c'
&gt;&gt;&gt; d.get_prev('b')
'a'
</snippet></ROW><ROW><id>10342948</id><snippet>itertools.product</snippet></ROW><ROW><id>10342948</id><snippet>itertools</snippet></ROW><ROW><id>10342948</id><snippet>def powerset(iterable):
    "powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))
</snippet></ROW><ROW><id>10342948</id><snippet>&gt;&gt;&gt; test = {1, 2, 3}
&gt;&gt;&gt; list(powerset(test))
[(), (1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)]
&gt;&gt;&gt; list(product(test, test))
[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]
</snippet></ROW><ROW><id>10343360</id><snippet>redirect</snippet></ROW><ROW><id>10343360</id><snippet>return redirect('/projects/?login_error=error')
</snippet></ROW><ROW><id>10343360</id><snippet>request.GET</snippet></ROW><ROW><id>10343378</id><snippet>&gt;&gt;&gt; a = list(range(10))
&gt;&gt;&gt; a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; a [5:20]
[5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>10343450</id><snippet>set</snippet></ROW><ROW><id>10343450</id><snippet>def has1dup(lst):
    return len(lst)-1 == len(set(lst))
</snippet></ROW><ROW><id>10343474</id><snippet>sum()</snippet></ROW><ROW><id>10343474</id><snippet>&gt;&gt;&gt;items = [[datetime.datetime(2000, 12, 10, 0, 0), 0.0011], [datetime.datetime(2000, 12, 11, 0, 0), 0.0013 ], [datetime.datetime(2000, 12, 12, 0, 0), 0.0014]]
&gt;&gt;&gt;sum(item[1] for item in items)
0.0038000000000000004
</snippet></ROW><ROW><id>10343474</id><snippet>functools.reduce()</snippet></ROW><ROW><id>10343474</id><snippet>reduce</snippet></ROW><ROW><id>10343474</id><snippet>from functools import reduce
import datetime

items = [[datetime.datetime(2000, 12, 10, 0, 0), 0.0011], [datetime.datetime(2000, 12, 11, 0, 0), 0.0013 ], [datetime.datetime(2000, 12, 12, 0, 0), 0.0014]]

def add_printing_result(a, b):
    total = a+b
    print(total)
    return total

reduce(add_printing_result, (item[1] for item in items))
</snippet></ROW><ROW><id>10343474</id><snippet>0.0024000000000000002
0.0038000000000000004
</snippet></ROW><ROW><id>10343576</id><snippet>plot_layout</snippet></ROW><ROW><id>10343576</id><snippet>QVBoxLayout</snippet></ROW><ROW><id>10343576</id><snippet>plot_canvas</snippet></ROW><ROW><id>10343576</id><snippet>MatplotlibWidget</snippet></ROW><ROW><id>10343576</id><snippet>import numpy as np
from PyQt4.QtCore import Qt
from PyQt4.QtGui import *
from matplotlib.backends.backend_qt4 import NavigationToolbar2QT as NavigationToolbar
from plot_dialog2 import Ui_Form

class PlotDialog(QWidget, Ui_Form):
    def __init__(self):
        QWidget.__init__(self)
        self.setupUi(self)
        self.navi_toolbar = NavigationToolbar(self.plot_canvas, self)
        self.plot_layout.addWidget(self.navi_toolbar)

if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    dialog = PlotDialog()
    dialog.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>10343767</id><snippet>import os

def filter_dirs(dirs=[]):
    result = []
    for dir in dirs:
        files = os.listdir(dir)
        file_a = 'a.shp' in files
        file_b = 'b.shp' in files
        if file_a or file_b:
            result.append({'dir':dir, 'file_a':file_a, 'file_b':file_b})
    return result
</snippet></ROW><ROW><id>10343767</id><snippet>filter_dirs(['D:\folder1', 'D:\folder2', 'D:\folder3'])
</snippet></ROW><ROW><id>10343836</id><snippet>librt.so</snippet></ROW><ROW><id>10343836</id><snippet>ldd</snippet></ROW><ROW><id>10343836</id><snippet>/home/nyap/proj/p4-rollback/Tools/Perforce/p4python/build/lib.linux-x86_64-2.7/P4API.so</snippet></ROW><ROW><id>10343836</id><snippet>librt</snippet></ROW><ROW><id>10343836</id><snippet>librt</snippet></ROW><ROW><id>10343836</id><snippet>LD_PRELOAD=/path/to/librt.so python ...
</snippet></ROW><ROW><id>10343836</id><snippet>LD_DEBUG=libs</snippet></ROW><ROW><id>10343836</id><snippet>LD_PRELOAD=libs python
</snippet></ROW><ROW><id>10344015</id><snippet>yolk</snippet></ROW><ROW><id>10344015</id><snippet>PyPI</snippet></ROW><ROW><id>10344015</id><snippet>pip</snippet></ROW><ROW><id>10344015</id><snippet>http://pypi.python.org/simple/&lt;PACKAGE_NAME&gt;</snippet></ROW><ROW><id>10344155</id><snippet>&gt;&gt;&gt; a.time = 1234567890
&gt;&gt;&gt; wrpcap('single-tcp-packet.pcap', a)

# tcpdump -tt -r single-tcp-packet.pcap
reading from file single-tcp-packet.pcap, link-type EN10MB (Ethernet)
1234567890.000000 IP 1.1.1.1.menandmice-dns &gt; arennes-651-1-107-2.w2-2.abo.wanadoo.fr.31337: Flags [S], seq 0, win 8192, length 0
</snippet></ROW><ROW><id>10344231</id><snippet>Meta</snippet></ROW><ROW><id>10344851</id><snippet>a = ANY(b_array)</snippet></ROW><ROW><id>10344851</id><snippet>a</snippet></ROW><ROW><id>10344851</id><snippet>IN</snippet></ROW><ROW><id>10344851</id><snippet>(elements_of_b_array)</snippet></ROW><ROW><id>10344851</id><snippet>in_()</snippet></ROW><ROW><id>10344851</id><snippet>a = ALL(b_array)</snippet></ROW><ROW><id>10344851</id><snippet>@&gt;</snippet></ROW><ROW><id>10344851</id><snippet>contains</snippet></ROW><ROW><id>10344851</id><snippet>&lt;@</snippet></ROW><ROW><id>10344851</id><snippet>is contained by</snippet></ROW><ROW><id>10344851</id><snippet>SELECT * FROM my_table WHERE 10000 = ANY (array_field);
</snippet></ROW><ROW><id>10344851</id><snippet>SELECT * FROM my_table WHERE 10000 &lt;@ array_field;
</snippet></ROW><ROW><id>10344851</id><snippet>op()</snippet></ROW><ROW><id>10344851</id><snippet>&gt;&gt;&gt; print users.c.name.op('tiddlywinks')('foo') users.name tiddlywinks :name_1
</snippet></ROW><ROW><id>10344851</id><snippet>s = select([my_table], array_field.op('@&gt;')('ARRAY[10000]'))
</snippet></ROW><ROW><id>10344851</id><snippet>s = select([my_table], array_field.op('@&gt;') (cast('{10000}', int[])))
</snippet></ROW><ROW><id>10344851</id><snippet>SELECT '{NULL}'::int[] &lt;@ ... -- that's an array with a single NULL element
</snippet></ROW><ROW><id>10344851</id><snippet>FALSE</snippet></ROW><ROW><id>10344851</id><snippet>SELECT NULL IN (...)
SELECT NULL = ANY (...)
SELECT NULL::int[] &lt;@ ...
</snippet></ROW><ROW><id>10344851</id><snippet>NULL</snippet></ROW><ROW><id>10344851</id><snippet>NULL</snippet></ROW><ROW><id>10344868</id><snippet>(?P&lt;name&gt;)</snippet></ROW><ROW><id>10344868</id><snippet>(?&lt;name&gt;)</snippet></ROW><ROW><id>10344868</id><snippet>\b(?P&lt;case&gt;(review|case|bug[zs]?(\s| )*(id)?:?)s?(\s| )*([#:; ]| )+)((([ ,:;#]|and)*)(?P&lt;bugid&gt;\d+))+
</snippet></ROW><ROW><id>10344868</id><snippet>r'regex'</snippet></ROW><ROW><id>10344868</id><snippet>@"regex"</snippet></ROW><ROW><id>10344868</id><snippet>(\s| )</snippet></ROW><ROW><id>10344868</id><snippet>(\s)</snippet></ROW><ROW><id>10344868</id><snippet>\s</snippet></ROW><ROW><id>10344868</id><snippet>([#:; ]| )</snippet></ROW><ROW><id>10344868</id><snippet>([#:; ])</snippet></ROW><ROW><id>10344909</id><snippet>if sortfunction==1:
        ff = 0.0
        array=x[increment-1:n:increment]
        for my in array:
            ff += sort_timehelp(x,quick_sort)
            print "%d\t %f" %(my, ff)
</snippet></ROW><ROW><id>10345354</id><snippet>def f(x, y) : return x + y
</snippet></ROW><ROW><id>10345354</id><snippet>f</snippet></ROW><ROW><id>10345354</id><snippet>lambda x, y: (x+y, x-y)
</snippet></ROW><ROW><id>10345354</id><snippet>self.entry_1.bind</snippet></ROW><ROW><id>10345522</id><snippet>from Acquisition import aq_inner
from zope.component import getUtility
from zope.intid.interfaces import IIntIds
from zope.security import checkPermission
from zc.relation.interfaces import ICatalog


def back_references(source_object, attribute_name):
    """ Return back references from source object on specified attribute_name """
    catalog = getUtility(ICatalog)
    intids = getUtility(IIntIds)
    result = []
    for rel in catalog.findRelations(
                            dict(to_id=intids.getId(aq_inner(source_object)),
                                 from_attribute=attribute_name)
                            ):
        obj = intids.queryObject(rel.from_id)
        if obj is not None and checkPermission('zope2.View', obj):
            result.append(obj)
    return result
</snippet></ROW><ROW><id>10345522</id><snippet>class LabEquipmentView(BrowserView):

    def aparatus_backrefs(self):
        return back_references(self.context, 'apparatus')
</snippet></ROW><ROW><id>10345787</id><snippet>sentance= input("Enter your sentence: ")
</snippet></ROW><ROW><id>10345787</id><snippet>' '.join(yoda_words)
</snippet></ROW><ROW><id>10345787</id><snippet>input</snippet></ROW><ROW><id>10346115</id><snippet>email</snippet></ROW><ROW><id>10346115</id><snippet>__init__.py</snippet></ROW><ROW><id>10346115</id><snippet>from email.mime import multipart as MIMEMultipart
from email.mime import base as MIMEBase
from email import encoders as Encoders
</snippet></ROW><ROW><id>10346225</id><snippet>lemon = item(10)</snippet></ROW><ROW><id>10346225</id><snippet>def __init__(self):
    self.lemon = item(10)
</snippet></ROW><ROW><id>10346225</id><snippet>health</snippet></ROW><ROW><id>10346225</id><snippet>obj.health</snippet></ROW><ROW><id>10346573</id><snippet>sHeader</snippet></ROW><ROW><id>10346573</id><snippet>c_uint16</snippet></ROW><ROW><id>10346573</id><snippet>c_uint32</snippet></ROW><ROW><id>10346573</id><snippet>from ctypes import *

class sHeader(Structure):
    _fields_ = [("CC", c_uint32, 4),
        ("AFC", c_uint32, 2),
        ("TSC", c_uint32, 2),
        ("PID", c_uint32, 13),
        ("TP", c_uint32, 1),
        ("PSI", c_uint32, 1),
        ("TEI", c_uint32, 1),
        ("SyncByte", c_uint32, 8)] # note: added 8 here

print sHeader.PID
print sHeader.SyncByte
</snippet></ROW><ROW><id>10346573</id><snippet>&lt;Field type=c_uint, ofs=0:8, bits=13&gt;
&lt;Field type=c_uint, ofs=0:24, bits=8&gt;
</snippet></ROW><ROW><id>10346573</id><snippet>print</snippet></ROW><ROW><id>10346783</id><snippet>login: required</snippet></ROW><ROW><id>10346783</id><snippet>app.yaml</snippet></ROW><ROW><id>10346872</id><snippet>friends = {'Matt' : {'phone' : '13579', 
                  'birthday' : '2 Dec', 
                  'address' : 'Sydney',
                  'interests' : ['a', 'b', 'c' ]},

       'Tim' : {'phone' : '24680', 
                 'birthday' : '19 Feb', 
                 'address' : 'Honolulu',
                 'interests' : ['x', 'y', 'z' ]},

       'Kate' : {'phone' :'12345', 
                  'birthday' : '30 Jun', 
                  'address' : 'Beijing',
                  'interests' : ['q', 'w', 'e' ]}
       }
</snippet></ROW><ROW><id>10346872</id><snippet>name = raw_input('Please enter search criteria: ')
name = name.strip() # remove whitespace at the beginning and the end of the string
name = name.capitalize() # capitilize the first letter
</snippet></ROW><ROW><id>10346872</id><snippet> name = name.strip().capitalize()
</snippet></ROW><ROW><id>10346872</id><snippet>friends[name]['&lt;key&gt;']</snippet></ROW><ROW><id>10346967</id><snippet>ftp = ftplib.FTP(timeout=100)
</snippet></ROW><ROW><id>10347322</id><snippet>data = dict()
for elem in finance:
    data[elem.tag] = elem.attrib['data']
</snippet></ROW><ROW><id>10347322</id><snippet>data</snippet></ROW><ROW><id>10347322</id><snippet>{'symbol': 'AAPL', 'company': 'Apple Inc.', 'currency': 'USD', 'volume': '19145182' ... }
</snippet></ROW><ROW><id>10347322</id><snippet>print data['company']
</snippet></ROW><ROW><id>10347326</id><snippet>ModelA._meta.get_field('foo').rel.to
</snippet></ROW><ROW><id>10347326</id><snippet>for field in ModelC._meta.fields:
    if field.get_internal_type() == "ForeignKey":
        print field.rel.to
</snippet></ROW><ROW><id>10347824</id><snippet>(year, month)</snippet></ROW><ROW><id>10347824</id><snippet>import glob
from datetime import datetime
from lxml import etree

def file_timestamp(filepath):
    """Return the timestamp from a file name"""
    filename = os.path.split(filepath)[1]
    filename = os.path.splitext(filename)[0]
    if '_' in filename:
        return filename.split('_')[1]
    return None

class Datafiles(object):
    def __init__(self, dir_path):
        self.date_cache = {}
        self.dir_path = dir_path

    def __iter__(self):
        return self.files()

    def next(self):
        return self.files().next()

    def files(self):
        filepaths = glob.glob(self.dir_path + '*_*.xml')
        filepaths = sorted(filepaths, key=file_timestamp)

        for filepath in filepaths:
            ## Parse data (xml)
            data = self.parse_file(filepath)
            ## If year/month is seen before, skip
            date = datetime.strptime(data['period'].text, '%m%Y')
            month = (date.year, date.month)
            if month in self.date_cache:
                continue

            ## Else store date and yield
            self.date_cache[month] = filepath
            yield data

    def parse_file(self, filepath):
        # YOUR XML PARSING HERE
        return etree.parse(filepath)
</snippet></ROW><ROW><id>10347824</id><snippet>&gt;&gt;&gt; files = Datafiles(data_directory)
&gt;&gt;&gt; for xml_data in files:
...     ## do something with the data
</snippet></ROW><ROW><id>10348395</id><snippet> #!/usr/bin/env python
 # -*- coding: utf-8 -*-
 p = open('/tmp/file_to_test', 'a+')
 p.write("test")
 p.close()
</snippet></ROW><ROW><id>10348411</id><snippet>classifieds</snippet></ROW><ROW><id>10348411</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>10348411</id><snippet>settings.py</snippet></ROW><ROW><id>10348647</id><snippet>&lt;a href="?page={{ contacts.previous_page_number }}"&gt;previous&lt;/a&gt;
</snippet></ROW><ROW><id>10348750</id><snippet>print '%x' % ord(unicodedata.lookup('LATIN LETTER SMALL CAPITAL Z'))
## 1d22
</snippet></ROW><ROW><id>10348762</id><snippet>&lt;input type="file" name="foo"/&gt;</snippet></ROW><ROW><id>10348762</id><snippet>request.files['foo']</snippet></ROW><ROW><id>10348762</id><snippet>content_length</snippet></ROW><ROW><id>10348766</id><snippet>TestCase</snippet></ROW><ROW><id>10348766</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>10348766</id><snippet>TestCase</snippet></ROW><ROW><id>10348766</id><snippet>TestCase</snippet></ROW><ROW><id>10348766</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>10348766</id><snippet>TestCase</snippet></ROW><ROW><id>10348766</id><snippet>assertRaisesExp</snippet></ROW><ROW><id>10348766</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>10348766</id><snippet>TestCase</snippet></ROW><ROW><id>10348766</id><snippet>TestCase</snippet></ROW><ROW><id>10349291</id><snippet>MyModel.objects.filter(terms__term__startswith='foo')
</snippet></ROW><ROW><id>10349291</id><snippet>MyModel.objects.filter(Q(terms__term__startswith='foo') | Q(terms__term__startswith='bar'))
</snippet></ROW><ROW><id>10349291</id><snippet>prefixes = ['foo', 'bar', 'baz']
query = reduce(lambda q1, q2: q1.__or__(q2), 
               map(lambda prefix: Q(terms__term__startswith=prefix)))
MyModel.objects.filter(query)
</snippet></ROW><ROW><id>10349381</id><snippet>connect(parameters...)


    host
        name of host to connect to. Default: use the local host via a UNIX socket (where applicable)
    user
        user to authenticate as. Default: current effective user.
    passwd
        password to authenticate with. Default: no password.
    db
        database to use. Default: no default database.
    port
        TCP port of MySQL server. Default: standard port (3306).
</snippet></ROW><ROW><id>10349541</id><snippet>print</snippet></ROW><ROW><id>10349541</id><snippet>'\\'</snippet></ROW><ROW><id>10349541</id><snippet>findall</snippet></ROW><ROW><id>10349541</id><snippet>print</snippet></ROW><ROW><id>10349541</id><snippet>&gt;&gt;&gt; print(re.findall(r'\\',"i am \\nit")[0])
\
</snippet></ROW><ROW><id>10349541</id><snippet>r</snippet></ROW><ROW><id>10349541</id><snippet>\</snippet></ROW><ROW><id>10349541</id><snippet>r'\'</snippet></ROW><ROW><id>10349541</id><snippet>"\\"</snippet></ROW><ROW><id>10349626</id><snippet>__eq__</snippet></ROW><ROW><id>10349626</id><snippet>def __eq__(self, other):
    return self.attrfoo == other.attrfoo # change that to your needs
</snippet></ROW><ROW><id>10349626</id><snippet>__cmp__(self, other)</snippet></ROW><ROW><id>10349626</id><snippet>rich comparison</snippet></ROW><ROW><id>10349746</id><snippet>&gt;&gt;&gt; import boto
&gt;&gt;&gt; c = boto.connect_dynamodb()
&gt;&gt;&gt; t = c.get_table('counter')
&gt;&gt;&gt; item = t.get_item('counter')
&gt;&gt;&gt; item
{u'id': 'counter', u'n': 1}
&gt;&gt;&gt; item.add_attribute('n', 20)
&gt;&gt;&gt; item.save()
{u'ConsumedCapacityUnits': 1.0}
&gt;&gt;&gt; item  # Here's the bug, local Item is not updated
{u'id': 'counter', u'n': 1}
&gt;&gt;&gt; item = t.get_item('counter')  # Refetch item just to verify change occurred
&gt;&gt;&gt; item
{u'id': 'counter', u'n': 21}
</snippet></ROW><ROW><id>10349746</id><snippet>2012-04-27 04:17:59,170 foo [DEBUG]:StringToSign:
POST
/

host:dynamodb.us-east-1.amazonaws.com
x-amz-date:Fri, 27 Apr 2012 11:17:59 GMT
x-amz-security-    token:&lt;removed&gt; ==
x-amz-target:DynamoDB_20111205.UpdateItem

{"AttributeUpdates": {"n": {"Action": "ADD", "Value": {"N": "20"}}}, "TableName": "counter", "Key": {"HashKeyElement": {"S": "counter"}}}
</snippet></ROW><ROW><id>10349746</id><snippet>&gt;&gt;&gt; import boto
&gt;&gt;&gt; c = boto.connect_dynamodb()
&gt;&gt;&gt; t = c.get_table('counter')
&gt;&gt;&gt; item = t.new_item('counter')
&gt;&gt;&gt; item.add_attribute('n', 20)
&gt;&gt;&gt; item.save()
{u'ConsumedCapacityUnits': 1.0}
</snippet></ROW><ROW><id>10349937</id><snippet>filter</snippet></ROW><ROW><id>10349937</id><snippet>lambda</snippet></ROW><ROW><id>10349937</id><snippet>def get_clothes():
    return (t for t in allThings if t.garment)

def get_hats():
    return (t for t in get_clothes() if t.headgear)
</snippet></ROW><ROW><id>10349937</id><snippet>def get_clothes():
    for t in allThings:
       if t.garment:
           yield t

def get_hats():
    for t in get_clothes():
        if t.headgear:
            yield t
</snippet></ROW><ROW><id>10349937</id><snippet>list</snippet></ROW><ROW><id>10349937</id><snippet>iterator</snippet></ROW><ROW><id>10349937</id><snippet>hats_list = list(get_hats())
</snippet></ROW><ROW><id>10350038</id><snippet>resp = 'From dictionary:\ndefinition: ' + ('\n' + ind).join(defn) +'\n'
resp += '  synonyms:' + ', '.join(syns) +'\n'
if ants:
    resp += '  antonyms:' + ', '.join(a.name for a in ants)) +'\n'
if syn.examples:
    resp += '  examples: ' + ('\n' + ind).join(syn.examples)) +'\n'
</snippet></ROW><ROW><id>10350303</id><snippet>.svg</snippet></ROW><ROW><id>10350303</id><snippet>types_map</snippet></ROW><ROW><id>10350303</id><snippet>mimetypes</snippet></ROW><ROW><id>10350303</id><snippet>&gt;&gt;&gt; import mimetypes
&gt;&gt;&gt; print '.svg' in mimetypes.types_map
False
</snippet></ROW><ROW><id>10350303</id><snippet>mimetypes</snippet></ROW><ROW><id>10350303</id><snippet>/etc/mime.types</snippet></ROW><ROW><id>10350303</id><snippet>$ cat /etc/mime.types  | grep svg
image/svg+xml                   svg svgz
</snippet></ROW><ROW><id>10350303</id><snippet>mimetypes.add_type</snippet></ROW><ROW><id>10350303</id><snippet>&gt;&gt;&gt; import mimetypes
&gt;&gt;&gt; mimetypes.guess_type("ulla.svg")
(None, None)
&gt;&gt;&gt; mimetypes.add_type("image/svg+xml", ".svg")
&gt;&gt;&gt; mimetypes.guess_type("ulla.svg")
('image/svg+xml', None)
</snippet></ROW><ROW><id>10350785</id><snippet>put_server_metadata</snippet></ROW><ROW><id>10350785</id><snippet>def put_server_metadata(self, serv_id, label, version):  # a method
  ...
  new_js = str(self.put_server_metadata) % ... # not consistent with
                                               # put_server_metadata being a method
</snippet></ROW><ROW><id>10350785</id><snippet>put_server_metadata</snippet></ROW><ROW><id>10351007</id><snippet>.text</snippet></ROW><ROW><id>10351007</id><snippet>find()</snippet></ROW><ROW><id>10351007</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; from urllib2 import urlopen
&gt;&gt;&gt; soup = BeautifulSoup(urlopen('http://www.reference.com/wordoftheday'))
&gt;&gt;&gt; soup.find('h2').text
u'nosh'
</snippet></ROW><ROW><id>10351334</id><snippet>print</snippet></ROW><ROW><id>10351334</id><snippet>print()</snippet></ROW><ROW><id>10351334</id><snippet>In [1]: print(1,2,3)
(1, 2, 3)
</snippet></ROW><ROW><id>10351334</id><snippet>print</snippet></ROW><ROW><id>10351334</id><snippet>In [2]: print 1,2,3
1 2 3
</snippet></ROW><ROW><id>10351334</id><snippet>print</snippet></ROW><ROW><id>10351334</id><snippet>print("Happy Birthday, dear " + person + ".")
</snippet></ROW><ROW><id>10351526</id><snippet>&amp;0xFF</snippet></ROW><ROW><id>10351526</id><snippet>&gt;&gt;&gt; strdata = 'hello'
&gt;&gt;&gt; bytearray([len(strdata)]) + strdata if strdata else bytearray()
bytearray(b'\x05hello')
</snippet></ROW><ROW><id>10351526</id><snippet>import struct
bytearray(struct.pack('B%ds' % len(strdata), len(strdata), strdata))
</snippet></ROW><ROW><id>10351626</id><snippet>i</snippet></ROW><ROW><id>10351626</id><snippet>j</snippet></ROW><ROW><id>10351626</id><snippet>for i in xrange(1, 4):
    for j in xrange(2, 6):
        setattr(Tests, "test_%r_%r" % (i, j), lambda self: self.check(i, j))
</snippet></ROW><ROW><id>10351626</id><snippet>i</snippet></ROW><ROW><id>10351626</id><snippet>j</snippet></ROW><ROW><id>10351626</id><snippet>i</snippet></ROW><ROW><id>10351626</id><snippet>j</snippet></ROW><ROW><id>10351626</id><snippet>i</snippet></ROW><ROW><id>10351626</id><snippet>j</snippet></ROW><ROW><id>10351626</id><snippet>itertools.product</snippet></ROW><ROW><id>10351626</id><snippet>from itertools import product
from operator import methodcaller

for i, j in product(range(1, 4), range(2, 6)):
  setattr(Tests, "test_%r_%r" % (i, j),
          lambda self, i=i, j=j: self.check(i, j))
</snippet></ROW><ROW><id>10351626</id><snippet>check(i, j)</snippet></ROW><ROW><id>10351626</id><snippet>Tests</snippet></ROW><ROW><id>10351626</id><snippet>spam</snippet></ROW><ROW><id>10351626</id><snippet>self</snippet></ROW><ROW><id>10351626</id><snippet>test_[i]_[j]()</snippet></ROW><ROW><id>10351626</id><snippet>Tests</snippet></ROW><ROW><id>10351626</id><snippet>Tests</snippet></ROW><ROW><id>10351626</id><snippet>self</snippet></ROW><ROW><id>10351785</id><snippet>__getattr__()</snippet></ROW><ROW><id>10351785</id><snippet>class A(object):
    def __init__(self, a):
        self.a = a
        self.b = a-1

class B(list):
    """
    Some customization of this class...
    """
    def __getattr__(self, name):
        return (getattr(item, name) for item in self)

bb = B([A(i) for i in range(10)])
print(list(bb.a))
print(list(bb.b))
</snippet></ROW><ROW><id>10351785</id><snippet>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8]
</snippet></ROW><ROW><id>10351785</id><snippet>__getattr__()</snippet></ROW><ROW><id>10351785</id><snippet>bb.b</snippet></ROW><ROW><id>10351785</id><snippet>bb = B([A(i) for i in range(10)])
bb.b = 5
print(list(bb.a))
print(bb.b)
</snippet></ROW><ROW><id>10351785</id><snippet>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
5
</snippet></ROW><ROW><id>10351785</id><snippet>B</snippet></ROW><ROW><id>10351785</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; b = B([datetime.date(2012, 1, 1), datetime.date(2012, 2, 2), datetime.date(2012, 3, 3)])
&gt;&gt;&gt; list(b.month)
[1, 2, 3]
</snippet></ROW><ROW><id>10351785</id><snippet>class B(list):
    """
    Some customization of this class...
    """
@property
def a(self):
    return (item.a for item in self)
</snippet></ROW><ROW><id>10351785</id><snippet>@property
def a(self):
    for item in self:
        yield item.a
</snippet></ROW><ROW><id>10351785</id><snippet>property()</snippet></ROW><ROW><id>10351785</id><snippet>B.a</snippet></ROW><ROW><id>10351785</id><snippet>bb = B([A(i) for i in range(10)])
print(list(bb.a))
</snippet></ROW><ROW><id>10351785</id><snippet>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>10351785</id><snippet>class B(list):
        """
        Some customization of this class...
        """
    def __init__(self, *args):
        super(B, self).__init__(*args)
        self.a = (item.a for item in self)
</snippet></ROW><ROW><id>10351983</id><snippet>login_check</snippet></ROW><ROW><id>10351983</id><snippet>my_index</snippet></ROW><ROW><id>10351983</id><snippet>print Pos:B</snippet></ROW><ROW><id>10351990</id><snippet>Choice == 'N' or 'n'</snippet></ROW><ROW><id>10351990</id><snippet>(Choice == 'N') or 'n'</snippet></ROW><ROW><id>10351990</id><snippet>Choice in ('N', 'n')</snippet></ROW><ROW><id>10352131</id><snippet>decode</snippet></ROW><ROW><id>10352131</id><snippet>print(doc.toprettyxml(indent=' '*spaces, encoding='utf-8').decode('utf-8'))
</snippet></ROW><ROW><id>10352164</id><snippet>urlparse.parse_qs</snippet></ROW><ROW><id>10352164</id><snippet>{'age': ['35'], 'name': ['john']}</snippet></ROW><ROW><id>10352164</id><snippet>{'age': '35', 'name': 'john'}</snippet></ROW><ROW><id>10352164</id><snippet>urlparse.parse_qsl</snippet></ROW><ROW><id>10352164</id><snippet>modified_query_dict = dict(urlparse.parse_qsl(input_query) + [('debug', 'sp')])
</snippet></ROW><ROW><id>10352231</id><snippet>O_TRUNC
If the file exists and is a regular file, and the file is successfully
opened O_RDWR or O_WRONLY, its length is truncated to 0 and the mode
and owner are unchanged. It will have no effect on FIFO special files
or terminal device files. Its effect on other file types is
implementation-dependent. The result of using O_TRUNC with O_RDONLY is
undefined.
</snippet></ROW><ROW><id>10352231</id><snippet>os.open()</snippet></ROW><ROW><id>10352231</id><snippet>def touchopen(filename, *args, **kwargs):
    # Open the file in R/W and create if it doesn't exist. *Don't* pass O_TRUNC
    fd = os.open(filename, os.O_RDWR | os.O_CREAT)

    # Encapsulate the low-level file descriptor in a python file object
    return os.fdopen(fd, *args, **kwargs)
</snippet></ROW><ROW><id>10352231</id><snippet># Open an existing file or create if it doesn't exist
with touchopen("./tool.run", "r+") as doing_fd:

    # Acquire a non-blocking exclusive lock
    fcntl.lockf(doing_fd, fcntl.LOCK_EX)

    # Read a previous value if present
    previous_value = doing_fd.read()
    print previous_value 

    # Write the new value and truncate
    doing_fd.seek(0)
    doing_fd.write("new value")
    doing_fd.truncate()
</snippet></ROW><ROW><id>10352514</id><snippet>with</snippet></ROW><ROW><id>10352514</id><snippet>x.__enter__()
try:
    ...
finally:
    x.__exit__()
</snippet></ROW><ROW><id>10352514</id><snippet>close()</snippet></ROW><ROW><id>10352514</id><snippet>contextlib.closing</snippet></ROW><ROW><id>10352557</id><snippet>&gt;&gt;&gt; ele = doc.createElement('ele')
&gt;&gt;&gt; ele.attributes['name']= "bla"
&gt;&gt;&gt; ele.appendChild(doc.createTextNode(''))
&gt;&gt;&gt; print ele.toxml()
&lt;ele name="bla"&gt;&lt;/ele&gt;
</snippet></ROW><ROW><id>10352656</id><snippet>from django import forms

from models import MyModel

class MyModelForm(forms.ModelForm):
    extra_file = forms.FileField()

    class Meta:
        model = MyModel
</snippet></ROW><ROW><id>10352656</id><snippet>from django.contrib import admin

from models import MyModel
from forms import MyModelForm

class MyModelAdmin(admin.ModelAdmin):
    form = MyModelForm
admin.site.register(MyModel, MyModelAdmin)
</snippet></ROW><ROW><id>10352856</id><snippet>@subscriber(NewRequest)
def new_request_subscriber(event):
  if condition:
    raise pyramid.httpexceptions.HTTPFound(location=somelocation) ## to issue a proper redirect
</snippet></ROW><ROW><id>10353065</id><snippet>myapp
    __init__.py
    scripts
        __init__.py
        initialize_db.py
    models
        __init__.py
        meta.py
        foo.py
        moo.py
</snippet></ROW><ROW><id>10353065</id><snippet>meta.py</snippet></ROW><ROW><id>10353065</id><snippet>Base</snippet></ROW><ROW><id>10353065</id><snippet>DBSession</snippet></ROW><ROW><id>10353065</id><snippet>Base = declarative_base()
DBSession = scoped_session(sessionmaker(extension=ZopeTransactionExtension))
</snippet></ROW><ROW><id>10353065</id><snippet>foo.py</snippet></ROW><ROW><id>10353065</id><snippet>moo.py</snippet></ROW><ROW><id>10353065</id><snippet>meta.py</snippet></ROW><ROW><id>10353065</id><snippet>from .meta import Base

class Foo(Base):
    pass
</snippet></ROW><ROW><id>10353065</id><snippet>models</snippet></ROW><ROW><id>10353065</id><snippet>models/__init__.py</snippet></ROW><ROW><id>10353065</id><snippet>from .meta import DBSession
from .foo import Foo
from .moo import Moo
</snippet></ROW><ROW><id>10353065</id><snippet>Base</snippet></ROW><ROW><id>10353065</id><snippet>create_all</snippet></ROW><ROW><id>10353065</id><snippet>initialize_db</snippet></ROW><ROW><id>10353065</id><snippet>from myapp.models.meta import Base
Base.metadata.create_all(bind=engine)
</snippet></ROW><ROW><id>10353065</id><snippet>from myapp.models import DBSession
from myapp.models import Foo
</snippet></ROW><ROW><id>10353158</id><snippet>degeneracy(G) = max(networkx.core_number(G).values())</snippet></ROW><ROW><id>10353232</id><snippet>f.close()</snippet></ROW><ROW><id>10353232</id><snippet>f.closed</snippet></ROW><ROW><id>10353232</id><snippet>with</snippet></ROW><ROW><id>10353232</id><snippet>with open('data.txt', 'w') as f:
    # etc...
</snippet></ROW><ROW><id>10353339</id><snippet>class Process(wx.Panel):
    def loadMap(self, event):
        frame = MainFrame()
        frame.sPath = str(mapFile.readline()).strip("\n")
        frame.loadSource()
</snippet></ROW><ROW><id>10353339</id><snippet>MainFrame.sPath = ...</snippet></ROW><ROW><id>10353339</id><snippet>MainFrame()</snippet></ROW><ROW><id>10353339</id><snippet>self</snippet></ROW><ROW><id>10353339</id><snippet>MainFrame</snippet></ROW><ROW><id>10353339</id><snippet>.sPath</snippet></ROW><ROW><id>10353339</id><snippet>loadSource()</snippet></ROW><ROW><id>10353339</id><snippet>MainFrame</snippet></ROW><ROW><id>10353339</id><snippet>MainFrame().Show()</snippet></ROW><ROW><id>10353339</id><snippet>loadMap</snippet></ROW><ROW><id>10353339</id><snippet>app = wx.App(0)
#MainFrame().Show()
mainFrame = MainFrame() # or, insteadof making it a global variable, pass it as an argument to the objects you create, or store a reference to it anywhere else.
mainFrame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>10353339</id><snippet>loadMap</snippet></ROW><ROW><id>10353339</id><snippet>def loadMap(self, event):
    global mainFrame # or wherever you stored the reference to it
    # ...
    # remove this:
    # mainFrame = MainFrame()
    # set the sPath to the OBJECT mainFrame not the CLASS MainFrame
    mainFrame.sPath = str(mapFile.readline()).strip("\n")
    mainFrame.srcTc.SetValue(MainFrame.sPath)
</snippet></ROW><ROW><id>10353802</id><snippet>ON DUPLICATE KEY UPDATE</snippet></ROW><ROW><id>10353802</id><snippet>INSERT</snippet></ROW><ROW><id>10353802</id><snippet>mysqlimport</snippet></ROW><ROW><id>10353802</id><snippet>INSERT</snippet></ROW><ROW><id>10353802</id><snippet>UPDATE</snippet></ROW><ROW><id>10353802</id><snippet>mysqlimport</snippet></ROW><ROW><id>10353802</id><snippet>LOAD DATA INFILE</snippet></ROW><ROW><id>10353906</id><snippet>"([^"]+)"</snippet></ROW><ROW><id>10354184</id><snippet>&gt;&gt;&gt;def x():
&gt;&gt;&gt;    print(20)
&gt;&gt;&gt;y = x
&gt;&gt;&gt;y()
20
</snippet></ROW><ROW><id>10354184</id><snippet>y</snippet></ROW><ROW><id>10354184</id><snippet>x</snippet></ROW><ROW><id>10354184</id><snippet>None</snippet></ROW><ROW><id>10354198</id><snippet>import numpy as np
import matplotlib.pyplot as plt

N = 5
menMeans = (20, 35, 30, 35, 27,43,444,44)
menStd =   (2, 3, 4, 1, 2,43,4,33)

ind = np.arange(8)  # the x locations for the groups
width = 0.35       # the width of the bars

fig = plt.figure()
ax = fig.add_subplot(111)
rects1 = ax.bar(ind, menMeans, width, color='r', yerr=menStd)

womenMeans = (25, 32, 34, 25,322,3,443,3)
womenStd =   (3, 5, 2, 3, 3,32,33,322)
rects2 = ax.bar(ind+width, womenMeans, width, color='y', yerr=womenStd)

# add some
ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.set_xticks(ind+width)
ax.set_xticklabels( ('G1', 'G2', 'G3', 'G4', 'G5','K','K','Z') )

ax.legend( (rects1[0], rects2[0]), ('Men', 'Women') )
ax.set_ylim(0)

def autolabel(rects):
    # attach some text labels
    for rect in rects:
        height = rect.get_height()
        ax.text(rect.get_x()+rect.get_width()/2., 1.05*height, '%d'%int(height),
                ha='center', va='bottom')

autolabel(rects1)
autolabel(rects2)

plt.show()
</snippet></ROW><ROW><id>10354198</id><snippet>ax.set_ylim(0)</snippet></ROW><ROW><id>10354474</id><snippet>\dreampie\subp_main.py</snippet></ROW><ROW><id>10354474</id><snippet>sys.setdefaultencoding('utf-8')
</snippet></ROW><ROW><id>10354474</id><snippet>import platform 
if not "3.2" in platform.python_version(): 
    sys.setdefaultencoding('utf-8')
</snippet></ROW><ROW><id>10354649</id><snippet>    if form.is_valid():
        nickname = form.save(commit=False)
        nickname.nickname = msms()
        nickname.save()
</snippet></ROW><ROW><id>10354662</id><snippet> import multiprocessing
 class processThread ( multiprocessing.Process ):


def __init__ ( self,idT,inputqueue,idqueue, Function ,resultqueue ):

    self.idT = idT
    self.inputlist = inputqueue
    self.idqueue=idqueue
    self.Function = Function 
    self.resultqueue=resultqueue

    multiprocessing.Process.__init__ ( self )

def run ( self ):
    s="process number: "+str(self.idT)+" starting"
    print s
    result=[]

    while self.inputqueue.qsize()&gt;0
                    try:
                        inp=self.inputqueue.get()
                    except Exception:
                        pass
                    result=self.Function(inp)
                    while 1:
                       try:
             self.resultqueue.put([self.id, ] )
                       except Exception:
                         pass
                       else:
                         break
            self.idqueue.put(id)
            return
</snippet></ROW><ROW><id>10354662</id><snippet>inputqueue=multiprocessing.Queue()
resultqueue=multiprocessing.Queue()
idqueue=multiprocessing.Queue()

def Function(data):
    print data #or what you want

for data in datas:
       inputqueue.put(data)
for i in xrange(nbprocess):
      processThread(i, inputqueue,idqueue,Function,resultqueue).start()
</snippet></ROW><ROW><id>10354662</id><snippet>results=[]
while idqueue.qsize()&lt;nbprocess:
   pass
while resultqueue.qsize()&gt;0:
   results.append(resultqueue.get())
</snippet></ROW><ROW><id>10354667</id><snippet>surface.set_at()</snippet></ROW><ROW><id>10354667</id><snippet>surface.set_at((x, y), color)
</snippet></ROW><ROW><id>10354667</id><snippet>pygame.gfxdraw.pixel()</snippet></ROW><ROW><id>10354667</id><snippet>from pygame import gfxdraw
gfxdraw.pixel(surface, x, y, color)
</snippet></ROW><ROW><id>10354667</id><snippet>surface.fill()</snippet></ROW><ROW><id>10354667</id><snippet>def pixel(surface, color, pos):
    surface.fill(color, (pos, (1, 1))
</snippet></ROW><ROW><id>10354667</id><snippet>def pixel(surface, color, pos):
    pygame.draw.line(surface, color, pos, pos)
</snippet></ROW><ROW><id>10354849</id><snippet>import os

f = open(os.path.join(OUTPUT_DIR, 'file.txt'), 'w')
f.write('This is the new file.')
f.close()
</snippet></ROW><ROW><id>10354988</id><snippet>import webapp2

form= """
  &lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Unit 2 Rot 13&lt;/title&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;h2&gt;Enter some text to ROT13:&lt;/h2&gt;
    &lt;form method="post" action="/rot13"&gt;
      &lt;textarea name="text"
                style="height: 100px; width: 400px;"&gt;&lt;/textarea&gt;
      &lt;br&gt;
      &lt;input type="submit"&gt;
    &lt;/form&gt;
  &lt;/body&gt;

  &lt;/html&gt; """

class MainHandler(webapp2.RequestHandler):
    def get(self):
        self.response.out.write(form)

class Rot13Handler(webapp2.RequestHandler):
    # Error here: mistyped get instead of post :)
    def get(self):
        text = self.request.get("text")
        self.response.out.write(text)


app = webapp2.WSGIApplication([('/', MainHandler),
                               ('/rot13', Rot13Handler)],
                              debug=True)
</snippet></ROW><ROW><id>10354988</id><snippet>app = webapp2.WSGIApplication([('/', MainHandler),
                               ('/rot13', MainHandler)],
                              debug=True)
</snippet></ROW><ROW><id>10354988</id><snippet>app.yaml</snippet></ROW><ROW><id>10354988</id><snippet>main.py</snippet></ROW><ROW><id>10354993</id><snippet>ax.yaxis.tick_right()</snippet></ROW><ROW><id>10354993</id><snippet>from matplotlib import pyplot as plt

f = plt.figure()
ax = f.add_subplot(111)
ax.yaxis.tick_right()
plt.plot([2,3,4,5])
plt.show()
</snippet></ROW><ROW><id>10355059</id><snippet>s = 'hello there'

word1, word2 = s.split()
</snippet></ROW><ROW><id>10355059</id><snippet>In [63]: s = 'hello there'
In [64]: word1, word2 = s.split()
In [65]: print word1
hello
In [66]: print word2
there
</snippet></ROW><ROW><id>10355059</id><snippet>split()</snippet></ROW><ROW><id>10355059</id><snippet>split()</snippet></ROW><ROW><id>10355316</id><snippet>bc[base.upper()] for base in chr_string[newstart:newend]</snippet></ROW><ROW><id>10355316</id><snippet>join</snippet></ROW><ROW><id>10355316</id><snippet>''.join(c[base.upper()] for base in chr_string[newstart:newend])</snippet></ROW><ROW><id>10356045</id><snippet>if x and y and z:
    ...
</snippet></ROW><ROW><id>10356045</id><snippet>False</snippet></ROW><ROW><id>10356045</id><snippet>and</snippet></ROW><ROW><id>10356045</id><snippet>False</snippet></ROW><ROW><id>10356045</id><snippet>&gt;&gt;&gt; def test(n):
...     print("test", n)
...     return n
... 
&gt;&gt;&gt; test(1) and test(2)
test 1
test 2
2
&gt;&gt;&gt; test(0) and test(2)
test 0
0
&gt;&gt;&gt; test(0) and test(2) and test(3)
test 0
0
&gt;&gt;&gt; test(1) and test(0) and test(3)
test 1
test 0
0
</snippet></ROW><ROW><id>10356254</id><snippet>&gt;&gt;&gt; re.search('\s*\S+\s*', '   foo   ').group(0)
'   foo   '
&gt;&gt;&gt; re.search('\s*\S+\s*', 'foo   ').group(0)
'foo   '
&gt;&gt;&gt; re.search('\s*\S+\s*', 'foo').group(0)
'foo'
</snippet></ROW><ROW><id>10356259</id><snippet>Could not load file or assembly 'Microsoft.Scripting...</snippet></ROW><ROW><id>10356259</id><snippet>C:\tmp\IronPython-2.7.2.1\IronPython-2.7.2.1</snippet></ROW><ROW><id>10356259</id><snippet>cd C:\tmp\IronPython-2.7.2.1\IronPython-2.7.2.1</snippet></ROW><ROW><id>10356259</id><snippet>C:\tmp\IronPython-2.7.2.1\IronPython-2.7.2.1&gt;gacutil -if Microsoft.Dynamic.dll
Microsoft (R) .NET Global Assembly Cache Utility.  Version 4.0.30319.1
Copyright (c) Microsoft Corporation.  All rights reserved.

Assembly successfully added to the cache

C:\tmp\IronPython-2.7.2.1\IronPython-2.7.2.1&gt;gacutil -if IronPython.dll
Microsoft (R) .NET Global Assembly Cache Utility.  Version 4.0.30319.1
Copyright (c) Microsoft Corporation.  All rights reserved.

Assembly successfully added to the cache

C:\tmp\IronPython-2.7.2.1\IronPython-2.7.2.1&gt;gacutil -if Microsoft.Scripting.dll
Microsoft (R) .NET Global Assembly Cache Utility.  Version 4.0.30319.1
Copyright (c) Microsoft Corporation.  All rights reserved.

Assembly successfully added to the cache
</snippet></ROW><ROW><id>10356259</id><snippet># could not get a simple import to work from hosted
# works fine from "not hosted"
#import os

def GetIPData():
    #os.listdir(r'C:\\')
    return range(0,100)
</snippet></ROW><ROW><id>10356259</id><snippet>using System;
using System.Collections.Generic;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using IronPython.Hosting;
using Microsoft.Scripting.Hosting;

/// &lt;summary&gt;
/// Attempt to use IP script as a source
/// http://blogs.msdn.com/b/charlie/archive/2009/10/25/hosting-ironpython-in-a-c-4-0-program.aspx
/// &lt;/summary&gt;
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{

    /// &lt;summary&gt;
    /// Create data rows and fill those buckets
    /// &lt;/summary&gt;
    public override void CreateNewOutputRows()
    {
        foreach (var item in this.GetData())
        {
            Output0Buffer.AddRow();
            Output0Buffer.Content = item;
        }

    }

    /// &lt;summary&gt;
    /// I've written plenty of code, but I'm quite certain this is some of the ugliest.
    /// There certainly must be more graceful means of 
    /// * feeding your source code to the ironpython run-time than a file
    /// * processing the output of the code the method call
    /// * sucking less at life
    /// &lt;/summary&gt;
    /// &lt;returns&gt;A list of strings&lt;/returns&gt;
    public List&lt;string&gt; GetData()
    {
        List&lt;string&gt; output = null;
        var ipy = Python.CreateRuntime();
        dynamic test = ipy.UseFile(@"C:\ssisdata\simplePy.py");
        output = new List&lt;string&gt;();
        var pythonData = test.GetIPData();
        foreach (var item in pythonData)
        {
            output.Add(item.ToString());
        }

        return output;
    }
}
</snippet></ROW><ROW><id>10356400</id><snippet>pattern = re.compile('^[^ ]* ([^ ]*) ([0-9]*) ([0-9:]*) ([0-9]*) ')
</snippet></ROW><ROW><id>10356466</id><snippet>clean()</snippet></ROW><ROW><id>10356466</id><snippet>self.cleaned_data</snippet></ROW><ROW><id>10356478</id><snippet>conf.py</snippet></ROW><ROW><id>10356478</id><snippet>conf.py</snippet></ROW><ROW><id>10356478</id><snippet>def my_doc_skip(app, what, name, obj, skip, options):
    if what != "method":
        return True

    # if obj is decorated with @api
    #     return True
    # return False

def setup(app):
    app.connect('autodoc-process-docstring', my_process_docstring)
    app.connect('autodoc-skip-member', my_doc_skip)
</snippet></ROW><ROW><id>10356535</id><snippet>from collections import defaultdict
import re

myarch = 'C:/code/test5.txt'   #this is your archive
mydict = defaultdict(int)

with open(myarch) as f:
    for line in f:
        codes = re.findall("\'(\S*)\'", line)
        for key in codes:
            mydict[key] +=1

out = []
for key, value in mydict.iteritems():
    if value &gt; 1:
        text = "['%s'], %s" % (key, value)
        out.append(text)

#save to a file
with open('C:/code/fileout.txt', 'w') as fo:
    fo.write('\n'.join(out))
</snippet></ROW><ROW><id>10356535</id><snippet>from collections import defaultdict
import re

myarch = 'C:/code/test5.txt'
mydict = defaultdict(int)

with open(myarch) as f:
    for line in f:
        for key in re.findall("\'(\S*)\'", line):
            mydict[key] +=1

out = ["['%s'], %s" % (key, value) for key, value in mydict.iteritems() if value &gt; 1]

#save to a file
with open('C:/code/fileout.txt', 'w') as fo:
    fo.write('\n'.join(out))
</snippet></ROW><ROW><id>10356802</id><snippet>time</snippet></ROW><ROW><id>10357418</id><snippet>StrictHostKeyChecking</snippet></ROW><ROW><id>10357418</id><snippet>StrictHostKeyChecking</snippet></ROW><ROW><id>10357418</id><snippet>scp -o StrictHostKeyChecking=no ...
</snippet></ROW><ROW><id>10357418</id><snippet>BatchMode=yes</snippet></ROW><ROW><id>10357604</id><snippet>__unicode__</snippet></ROW><ROW><id>10357604</id><snippet>unicode</snippet></ROW><ROW><id>10357604</id><snippet>__unicode__</snippet></ROW><ROW><id>10357604</id><snippet>unicode</snippet></ROW><ROW><id>10357604</id><snippet>def __unicode__(self):
    return unicode(self.order_num)
</snippet></ROW><ROW><id>10358021</id><snippet>def convert(s, replacements):
    for before, after in replacements.items():
        s = before.join([segment.replace(before, after) for segment in s.split(before + before)])
    return s

&gt;&gt;&gt; convert('&lt; &lt;&lt; &gt;', {'&lt;': '(', '&gt;': ')'})
'( &lt; )'
</snippet></ROW><ROW><id>10358193</id><snippet>Byte 0 Shape Type 21 Integer 1 Little
Byte 4 X X Double 1 Little
Byte 12 Y Y Double 1 Little
Byte 20 M M Double 1 Little
</snippet></ROW><ROW><id>10358193</id><snippet>Position Field Value Type Number Order
Byte 0 Shape Type 1 Integer 1 Little
Byte 4 X X Double 1 Little
Byte 12 Y Y Double 1 Little
</snippet></ROW><ROW><id>10358193</id><snippet>IDDD
IDDD
IDDD
IDDD
IDDD
IDDD
</snippet></ROW><ROW><id>10358193</id><snippet>IDD      Rec 1 Read OK
did      Rec 2 Error on Type
ddi      Rec 3 error on Type
ddd      Rec 4 error on Type
IDD      Rec 5 Read OK
</snippet></ROW><ROW><id>10358198</id><snippet>read</snippet></ROW><ROW><id>10358198</id><snippet>read</snippet></ROW><ROW><id>10358198</id><snippet>import Numeric

fastRead :: String -&gt; Int
fastRead s = case readDec s of [(n, "")] -&gt; n
</snippet></ROW><ROW><id>10358198</id><snippet>~/programming% time ./test.slow
./test.slow  9.82s user 0.06s system 99% cpu 9.901 total
~/programming% time ./test.fast
./test.fast  6.99s user 0.05s system 99% cpu 7.064 total
~/programming% time ./test.bytestring
./test.bytestring  4.94s user 0.06s system 99% cpu 5.026 total
</snippet></ROW><ROW><id>10358198</id><snippet>ByteString</snippet></ROW><ROW><id>10358198</id><snippet>import qualified Data.ByteString as BS
import Data.Attoparsec.ByteString.Char8
import Control.Applicative
import Data.List

parser = many (decimal &lt;* char '\n')

reallyParse p bs = case parse p bs of
    Partial f -&gt; f BS.empty
    v -&gt; v

main = do
    numbers &lt;- BS.readFile "data"
    case reallyParse parser numbers of
        Done t r | BS.null t -&gt; writeFile "sorted" . unlines . map show . sort $ r
</snippet></ROW><ROW><id>10358201</id><snippet>foo.com</snippet></ROW><ROW><id>10358201</id><snippet>location / {
 # your normal stuff
}
</snippet></ROW><ROW><id>10358201</id><snippet>location / {
   rewrite  ^/bar/(.*)$  bar.com/$1? break;
}
</snippet></ROW><ROW><id>10358286</id><snippet>self.get_argument("ID", default=None, strip=False)
</snippet></ROW><ROW><id>10358308</id><snippet>counter.stats[tokens][category]</snippet></ROW><ROW><id>10358308</id><snippet>a b c d e</snippet></ROW><ROW><id>10358308</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; two_d = namedtuple('twoDPoint', ['x', 'y'])
&gt;&gt;&gt; x = two_d(1, 2)
&gt;&gt;&gt; x = two_d(1, 2)
&gt;&gt;&gt; three_d = namedtuple('threeDPoint', ['x', 'y', 'z'])
&gt;&gt;&gt; x
twoDPoint(x=1, y=2)
&gt;&gt;&gt; y = three_d(*x, z=3)
&gt;&gt;&gt; y
threeDPoint(x=1, y=2, z=3)
</snippet></ROW><ROW><id>10358323</id><snippet>def new_line(tokens): 
    return '\n' + tokens.responsenumber
</snippet></ROW><ROW><id>10358454</id><snippet>$ c++filt __ZN3MPI3Win14Set_errhandlerERKNS_10ErrhandlerE
MPI::Win::Set_errhandler(MPI::Errhandler const&amp;)
</snippet></ROW><ROW><id>10358454</id><snippet>readelf -s /path/to/libfoo.so
</snippet></ROW><ROW><id>10358489</id><snippet>readlines()</snippet></ROW><ROW><id>10358489</id><snippet>readlines()</snippet></ROW><ROW><id>10358489</id><snippet>str.split()</snippet></ROW><ROW><id>10358489</id><snippet>csv</snippet></ROW><ROW><id>10358489</id><snippet>import csv

with open("addressbook1.txt") as input, open("college_age.txt", "w") as college, open("adult_age.txt", "w") as adult:
   reader = csv.DictReader(input, dialect="excel-tab")
   fieldnames = reader.fieldnames
   writer_college = csv.DictWriter(college, fieldnames, dialect="excel-tab")
   writer_adult = csv.DictWriter(adult, fieldnames, dialect="excel-tab")
   writer_college.writeheader()
   writer_adult.writeheader()
   for row in reader:
       if int(row["Age"]) &lt; 23:
          writer_college.writerow(row)
       else:
          writer_adult.writerow(row)
</snippet></ROW><ROW><id>10358489</id><snippet>with</snippet></ROW><ROW><id>10358489</id><snippet>DictReader</snippet></ROW><ROW><id>10358489</id><snippet>DictReader</snippet></ROW><ROW><id>10358489</id><snippet>csv.reader()</snippet></ROW><ROW><id>10358489</id><snippet>with</snippet></ROW><ROW><id>10358489</id><snippet>import csv

fieldnames = ["Name", "Date", "Age", "Sex", "Color"]
filenames = ["addressbook1.txt", "addressbook2.txt", ...]

with open("college_age.txt", "w") as college, open("adult_age.txt", "w") as adult:
   writer_college = csv.DictWriter(college, fieldnames, dialect="excel-tab")
   writer_adult = csv.DictWriter(adult, fieldnames, dialect="excel-tab")
   writer_college.writeheader()
   writer_adult.writeheader()
   for filename in filenames:
       with open(filename, "r") as input:
           reader = csv.DictReader(input, dialect="excel-tab")
           for row in reader:
               if int(row["Age"]) &lt; 23:
                  writer_college.writerow(row)
               else:
                  writer_adult.writerow(row)
</snippet></ROW><ROW><id>10358574</id><snippet>__init__</snippet></ROW><ROW><id>10358605</id><snippet>{{ companies | jsonify }}
</snippet></ROW><ROW><id>10358621</id><snippet>unicode</snippet></ROW><ROW><id>10358621</id><snippet>unicode.join(u'\n',map(unicode,item))</snippet></ROW><ROW><id>10358621</id><snippet>cp437</snippet></ROW><ROW><id>10358621</id><snippet>Møller</snippet></ROW><ROW><id>10358621</id><snippet>print foo</snippet></ROW><ROW><id>10358621</id><snippet>print repr(foo)</snippet></ROW><ROW><id>10358673</id><snippet>from pybrain.datasets            import ClassificationDataSet
from pybrain.utilities           import percentError
from pybrain.tools.shortcuts     import buildNetwork
from pybrain.supervised.trainers import BackpropTrainer
from pybrain.structure.modules   import SoftmaxLayer

from pylab import ion, ioff, figure, draw, contourf, clf, show, hold, plot
from scipy import diag, arange, meshgrid, where
from numpy.random import multivariate_normal

means = [(-1,0),(2,4),(3,1)]
cov = [diag([1,1]), diag([0.5,1.2]), diag([1.5,0.7])]
n_klass = 2
alldata = ClassificationDataSet(2, 1, nb_classes=n_klass)
for n in xrange(400):
    for klass in range(n_klass):
        input = multivariate_normal(means[klass],cov[klass])
        alldata.addSample(input, [klass])
</snippet></ROW><ROW><id>10358673</id><snippet>tstdata, trndata = alldata.splitWithProportion(0.25)

trndata._convertToOneOfMany()
tstdata._convertToOneOfMany()
</snippet></ROW><ROW><id>10358673</id><snippet>fnn = buildNetwork( trndata.indim, 5, trndata.outdim, outclass=SoftmaxLayer )

trainer = BackpropTrainer( fnn, dataset=trndata, momentum=0.1, verbose=True,             weightdecay=0.01)

ticks = arange(-3.,6.,0.2)
X, Y = meshgrid(ticks, ticks)
# need column vectors in dataset, not arrays
griddata = ClassificationDataSet(2,1, nb_classes=n_klass)
for i in xrange(X.size):
    griddata.addSample([X.ravel()[i],Y.ravel()[i]], [0])
griddata._convertToOneOfMany()  # this is still needed to make the fnn feel comfy
</snippet></ROW><ROW><id>10358673</id><snippet>for i in range(20):
    trainer.trainEpochs( 1 )
    trnresult = percentError( trainer.testOnClassData(),
                              trndata['class'] )
    tstresult = percentError( trainer.testOnClassData(
           dataset=tstdata ), tstdata['class'] )

    print "epoch: %4d" % trainer.totalepochs, \
          "  train error: %5.2f%%" % trnresult, \
          "  test error: %5.2f%%" % tstresult

    out = fnn.activateOnDataset(griddata)
    out = out.argmax(axis=1)  # the highest output activation gives the class
    out = out.reshape(X.shape)

    figure(1)
    ioff()  # interactive graphics off
    clf()   # clear the plot
    hold(True) # overplot on
    for c in range(n_klass):
        here, _ = where(tstdata['class']==c)
        plot(tstdata['input'][here,0],tstdata['input'][here,1],'o')
    if out.max()!=out.min():  # safety check against flat field
        contourf(X, Y, out)   # plot the contour
    ion()   # interactive graphics on
    draw()  # update the plot
</snippet></ROW><ROW><id>10358673</id><snippet>from pyroc import *
random_sample  = random_mixture_model()  # Generate a custom set randomly

#Example instance labels (first index) with the decision function , score (second index)
#-- positive class should be +1 and negative 0.
roc = ROCData(random_sample)  #Create the ROC Object
roc.auc() #get the area under the curve
roc.plot(title='ROC Curve') #Create a plot of the ROC curve
</snippet></ROW><ROW><id>10358673</id><snippet>x = random_mixture_model()
r1 = ROCData(x)
y = random_mixture_model()
r2 = ROCData(y)
lista = [r1,r2]
plot_multiple_roc(lista,'Multiple ROC Curves',include_baseline=True)
</snippet></ROW><ROW><id>10358673</id><snippet>activateOnDataset</snippet></ROW><ROW><id>10358673</id><snippet>random_mixture_model</snippet></ROW><ROW><id>10358826</id><snippet>fun plus(x, y, k) = k(x + y)

plus(2, 4, print o Int.toString)
</snippet></ROW><ROW><id>10358826</id><snippet>def plus(x, y, k):
    return k(x, y)

plus(2, 4, lambda n: print '%d' % n)
</snippet></ROW><ROW><id>10359334</id><snippet>In [1]: exonstarts = [10,50,100]

In [2]: exonends = [20,60,110]

In [3]: zip(exonstarts, exonends)
Out[3]: [(10, 20), (50, 60), (100, 110)]
</snippet></ROW><ROW><id>10359458</id><snippet>&gt;&gt;&gt; a = (100, 0)
&gt;&gt;&gt; b = (50, 50)
&gt;&gt;&gt; [(a &gt; b) for a, b in zip(a,b)]
[True, False]
</snippet></ROW><ROW><id>10359565</id><snippet>"".join(chr_string[slice(*exon_interval)] for exon_interval in zipped)
</snippet></ROW><ROW><id>10359645</id><snippet>write</snippet></ROW><ROW><id>10359645</id><snippet>scipy.io.wavfile</snippet></ROW><ROW><id>10359645</id><snippet>import numpy as np
from scipy.io.wavfile import write

data = np.random.uniform(-1,1,44100) # 44100 random samples between -1 and 1
scaled = np.int16(data/np.max(np.abs(data)) * 32767)
write('test.wav', 44100, scaled)
</snippet></ROW><ROW><id>10359672</id><snippet>class</snippet></ROW><ROW><id>10359672</id><snippet>type</snippet></ROW><ROW><id>10359672</id><snippet>def make_thingy(bases):
    new_thingy_class = type("???", bases, {})
    new_thingy_instance = new_thingy_class()
    print new_thingy_instance.some_attribute_in_pet
    print new_thingy_instance.some_attribute_in_species
    return new_thingy_instance

x = new_thingy(Dog)
</snippet></ROW><ROW><id>10359699</id><snippet>allow_all_keys</snippet></ROW><ROW><id>10359699</id><snippet>allowed_keys</snippet></ROW><ROW><id>10359699</id><snippet>result = [k for k in my_dict if my_dict[k] &gt; min_value and 
                                (allow_all_keys or k in allowed_keys)]
</snippet></ROW><ROW><id>10359762</id><snippet>import urllib2
import os

os.environ['http_proxy'] = "http://10.8.0.1:8118/"
print urllib2.urlopen("http://twitter.com").read()
</snippet></ROW><ROW><id>10359789</id><snippet>def assign(value, lst):
    lst[0] = value
    return value

a = [None]
if assign(func_cliche_start(line), a):
   #... do stuff with 'a[0]' and line here
elif assign(func_test_start(line), a):
   #...
</snippet></ROW><ROW><id>10359898</id><snippet>&gt;&gt;&gt; x = [(10, 20), (50, 60), (100, 110)]
&gt;&gt;&gt; ','.join('-'.join(map(str, t)) for t in x)
'10-20,50-60,100-110'
</snippet></ROW><ROW><id>10359921</id><snippet>range_str = ",".join(["%s-%s" % item for item in zipped])
</snippet></ROW><ROW><id>10359921</id><snippet>10-20,50-60,100-110
</snippet></ROW><ROW><id>10360018</id><snippet>+=</snippet></ROW><ROW><id>10360147</id><snippet>from django.core import serializers
json_serializer = serializers.get_serializer("json")()
companies = json_serializer.serialize(Company.objects.all().order_by('id')[:5], ensure_ascii=False)
</snippet></ROW><ROW><id>10360147</id><snippet>var companies = '{{ companies|escapejs }}';
</snippet></ROW><ROW><id>10360149</id><snippet>s = ''.join(bc[base.upper()] for base in (chr_string[-starts-1:-ends-1]\
                                         ^
            for starts, ends in zipped)) +'\n'
                                      ^
</snippet></ROW><ROW><id>10360149</id><snippet>strands = (chr_string[-starts-1:-ends-1] for starts, ends in zipped)
complementary_strands = (bc[base.upper()] for base in stage_1)
joined_exons = ''.join(stage_2) + '\n'
</snippet></ROW><ROW><id>10360255</id><snippet>from module import function

def foo(x):
    return function(x)
</snippet></ROW><ROW><id>10360255</id><snippet>function</snippet></ROW><ROW><id>10360255</id><snippet>global function</snippet></ROW><ROW><id>10360255</id><snippet>X</snippet></ROW><ROW><id>10360255</id><snippet>function</snippet></ROW><ROW><id>10360255</id><snippet>global X</snippet></ROW><ROW><id>10360255</id><snippet>global function</snippet></ROW><ROW><id>10360284</id><snippet>enemies</snippet></ROW><ROW><id>10360284</id><snippet>velocity</snippet></ROW><ROW><id>10360284</id><snippet>Score</snippet></ROW><ROW><id>10360284</id><snippet>score</snippet></ROW><ROW><id>10360477</id><snippet>def prepare_parser():
    from pyparsing import Word, alphas, Optional, ...
    # do stuff, and get the final thing to return
    return ...

parser = prepare_parser()
</snippet></ROW><ROW><id>10360835</id><snippet>//a[starts-with(@href, 'http://biz.yahoo.com/ic/')
  and
    substring(@href, string-length(@href)-4) = '.html'
  and
    string-length
      (substring-before
          (substring-after(@href, 'http://biz.yahoo.com/ic/'), 
           '.')
      ) = 3
  and
    translate(substring-before
               (substring-after(@href, 'http://biz.yahoo.com/ic/'), 
                '.'),
              '0123456789',
              ''
              )
     = ''
   ]
</snippet></ROW><ROW><id>10360835</id><snippet>a</snippet></ROW><ROW><id>10360835</id><snippet>href</snippet></ROW><ROW><id>10360835</id><snippet>"'http://biz.yahoo.com/ic/"</snippet></ROW><ROW><id>10360835</id><snippet>".html"</snippet></ROW><ROW><id>10360835</id><snippet>&lt;xsl:stylesheet version="1.0"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
 &lt;xsl:output omit-xml-declaration="yes" indent="yes"/&gt;

 &lt;xsl:template match="/"&gt;
  &lt;xsl:copy-of select=
   "//a[starts-with(@href, 'http://biz.yahoo.com/ic/')
      and
        substring(@href, string-length(@href)-4) = '.html'
      and
        string-length
          (substring-before
              (substring-after(@href, 'http://biz.yahoo.com/ic/'),
               '.')
          ) = 3
      and
        translate(substring-before
                   (substring-after(@href, 'http://biz.yahoo.com/ic/'),
                    '.'),
                  '0123456789',
                  ''
                  )
         = ''
       ]
   "/&gt;
 &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</snippet></ROW><ROW><id>10360835</id><snippet>&lt;html&gt;
  &lt;body&gt;
    &lt;a href="http://biz.yahoo.com/ic/123.html"&gt;Link1&lt;/a&gt;
    &lt;a href="http://biz.yahoo.com/ic/1234.html"&gt;Incorrect&lt;/a&gt;
    &lt;a href="http://biz.yahoo.com/ic/x23.html"&gt;Incorrect&lt;/a&gt;
    &lt;a href="http://biz.yahoo.com/ic/621.html"&gt;Link2&lt;/a&gt;
  &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>10360835</id><snippet>&lt;a href="http://biz.yahoo.com/ic/123.html"&gt;Link1&lt;/a&gt;
&lt;a href="http://biz.yahoo.com/ic/621.html"&gt;Link2&lt;/a&gt;
</snippet></ROW><ROW><id>10360835</id><snippet>a</snippet></ROW><ROW><id>10360838</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>10360838</id><snippet>os.rename</snippet></ROW><ROW><id>10360838</id><snippet>ffmpeg</snippet></ROW><ROW><id>10360838</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>10361334</id><snippet>def create_attr_filter(request, mapped_class):
    """Create an ``and_`` SQLAlchemy filter (a ClauseList object) based
    on the request params (``queryable``, ``eq``, ``ne``, ...).

    Arguments:

    request
        the request.

    mapped_class
        the SQLAlchemy mapped class.
    """

    mapping = {
        'eq'   : '__eq__',
        'ne'   : '__ne__',
        'lt'   : '__lt__',
        'lte'  : '__le__',
        'gt'   : '__gt__',
        'gte'  : '__ge__',
        'like' : 'like',
        'ilike': 'ilike'
    }
    filters = []
    if 'queryable' in request.params:
        queryable = request.params['queryable'].split(',')
        for k in request.params:
            if len(request.params[k]) &lt;= 0 or '__' not in k:
                continue
            col, op = k.split("__")
            if col not in queryable or op not in mapping.keys():
                continue
            column = getattr(mapped_class, col)
            f = getattr(column, mapping[op])(request.params[k])
            filters.append(f)
    return and_(*filters) if len(filters) &gt; 0 else None
</snippet></ROW><ROW><id>10361796</id><snippet>def render_to_s(request, *args, **kwargs):
    panelDisplays = PanelDisplay.listAll()
    csrf_token_value = request.COOKIES['csrftoken']

    c = {"panelDisplays": panelDisplays, "csrf_token_value": csrf_token_value}
    return render_to_string('panels/config.html', c)
</snippet></ROW><ROW><id>10361796</id><snippet>&lt;div style='display:none'&gt;&lt;input type='hidden' name='csrfmiddlewaretoken' value='{{ csrf_token_value }}'/&gt;&lt;/div&gt;
</snippet></ROW><ROW><id>10361844</id><snippet>print 'not init'</snippet></ROW><ROW><id>10361844</id><snippet>bla</snippet></ROW><ROW><id>10361844</id><snippet>bla</snippet></ROW><ROW><id>10361844</id><snippet>&gt;&gt;&gt; class bla():
...    print 'not init'
...    def __init__(self):
...        print 'init'
not init

&gt;&gt;&gt; b = bla()
init
</snippet></ROW><ROW><id>10361907</id><snippet>:bot!~botty@112.443.22.5 PRIVMSG #fish :!help
</snippet></ROW><ROW><id>10361907</id><snippet>line</snippet></ROW><ROW><id>10361907</id><snippet>def parse_irc(line):
    src = None
    parts = line.split(' ')
    if parts[0][0] == ':':
        srcpart = parts.pop(0)[1:]
        src = {'ident': None, 'host': None}
        if '!' not in srcpart:
            # e.g. a message from a server
            src['nick'] = srcpart
        else:
            # nick!ident@host
            tmp = srcpart.split('!', 1)
            src['nick'] = tmp[0]
            src['ident'], src['host'] = tmp[1].split('@', 1)
    cmd = parts.pop(0)
    args = []
    for i, arg in enumerate(parts):
        if arg[0] == ':':
            args.append(' '.join(parts[i:])[1:])
            break
        args.append(arg)
    return src, cmd, args
</snippet></ROW><ROW><id>10361907</id><snippet>&gt; python ircparser.py 'PING :12345'
src:  None
cmd:  'PING'
args: ['12345']
&gt; python ircparser.py 'NOTICE AUTH :Welcome to this server'
src:  None
cmd:  'NOTICE'
args: ['AUTH', 'Welcome to this server']
&gt; python ircparser.py ':me!ident@host PRIVMSG #channel :hi'
src:  {'nick': 'me', 'host': 'host', 'ident': 'ident'}
cmd:  'PRIVMSG'
args: ['#channel', 'hi']
&gt; python ircparser.py ':me!ident@host PRIVMSG #channel :!help me'
src:  {'nick': 'me', 'host': 'host', 'ident': 'ident'}
cmd:  'PRIVMSG'
args: ['#channel', '!help me']
</snippet></ROW><ROW><id>10362016</id><snippet>css = Bundle(
  'css/reset.css',
  'css/style.css',
  'css/fancybox.css',        
  Bundle('css/*.less', filters='less', debug=False)
  output='gen/packed.css'
)
</snippet></ROW><ROW><id>10362035</id><snippet>PasswordInput</snippet></ROW><ROW><id>10362035</id><snippet>attrs</snippet></ROW><ROW><id>10362035</id><snippet>login_password = forms.CharField(label=u'password', widget=forms.PasswordInput(render_value=False, attrs={'placeholder': 'password'}))
</snippet></ROW><ROW><id>10362345</id><snippet>yield</snippet></ROW><ROW><id>10362345</id><snippet>types.GeneratorType</snippet></ROW><ROW><id>10362345</id><snippet>itertools</snippet></ROW><ROW><id>10362395</id><snippet>req_egg = cursor.fetchmany(2)
</snippet></ROW><ROW><id>10362395</id><snippet>LIMIT</snippet></ROW><ROW><id>10362490</id><snippet>urlparse.urlparse</snippet></ROW><ROW><id>10362490</id><snippet>netloc</snippet></ROW><ROW><id>10362490</id><snippet>&gt;&gt;&gt; urls = ['http://www.doopa.pl/1','http://www.doopa.pl/2',
...     'http://www.dupa2.pl/4/php.pl', 'http://www.dupa3.pl/4/php?gfdgfd=44',
...     'www.dupa4.pl/4/php.pl']
&gt;&gt;&gt; from urlparse import urlparse
&gt;&gt;&gt; dict((urlparse(u).netloc, u) for u in urls).values()
['www.dupa4.pl/4/php.pl', 'http://www.dupa2.pl/4/php.pl', 'http://www.doopa.pl/2', 'http://www.dupa3.pl/4/php?gfdgfd=44']
</snippet></ROW><ROW><id>10362490</id><snippet>urls</snippet></ROW><ROW><id>10362490</id><snippet>reversed(urls)</snippet></ROW><ROW><id>10362574</id><snippet>{% if rows %}</snippet></ROW><ROW><id>10362574</id><snippet>{% if rows %}
&lt;thead&gt;
&lt;/thead&gt;
{% endif %}

&lt;tbody&gt;
{% for row in rows %}
...
&lt;/tbody&gt;
</snippet></ROW><ROW><id>10362579</id><snippet>from twisted.internet.threads import deferToThread as __deferToThread
from twisted.internet import reactor

def mmprint(s):
    print(s)

class TwistedRAWInput(object):
    def start(self,callable,terminator):
        self.callable=callable
        self.terminator=terminator
        self.startReceiving()
    def startReceiving(self,s=''):
        if s!=self.terminator:
            self.callable(s)
            __deferToThread(raw_input,':').addCallback(self.startReceiving)


tri = TwistedRAWInput()
reactor.callWhenRunning(tri.start,mmprint,'q')
reactor.run()
</snippet></ROW><ROW><id>10362807</id><snippet>map</snippet></ROW><ROW><id>10362807</id><snippet>Pool</snippet></ROW><ROW><id>10362807</id><snippet>multiprocessing</snippet></ROW><ROW><id>10363020</id><snippet>cities = db.ListProperty(db.Key)
</snippet></ROW><ROW><id>10363020</id><snippet>itemsCities = ItemLocation.get(item.cities)
</snippet></ROW><ROW><id>10363233</id><snippet>from BeautifulSoup import BeautifulSoup

# Note: I have added the &lt;movielist&gt; root element
xml = """&lt;movielist&gt;
&lt;movie id = 0&gt; 
  &lt;Movie_name&gt;The Shawshank Redemption   &lt;/Movie_name&gt; 
  &lt;Address&gt;http://www.imdb.com/title/tt0111161/
  &lt;/Address&gt; 
  &lt;year&gt;1994  &lt;/year&gt; 
  &lt;stars&gt;Tim Robbins  Morgan Freeman  Bob Gunton    &lt;/stars&gt; 
  &lt;plot&gt; plot...
  &lt;/plot&gt; 
  &lt;keywords&gt;Reviews, Showtimes&lt;/keywords&gt;
&lt;/movieNum&gt;

&lt;movie id = 1&gt; 
  &lt;Movie_name&gt;Inglourious Basterds   &lt;/Movie_name&gt; 
  &lt;Address&gt;http://www.imdb.com/title/tt0361748/
  &lt;/Address&gt; 
  &lt;year&gt;2009  &lt;/year&gt; 
  &lt;stars&gt;Brad Pitt  Mélanie Laurent  Christoph Waltz    &lt;/stars&gt; 
  &lt;plot&gt;plot/... 
  &lt;/plot&gt; 
  &lt;keywords&gt;Reviews, credits  &lt;/keywords&gt;
&lt;/movieNum&gt;

&lt;/movielist&gt;"""

soup = BeautifulSoup(xml)
movies = soup.findAll('movie')

for movie in movies:
    id_tag = movie['id']
    name = movie.find("movie_name").text
    url = movie.find("address").text
    year = movie.find("year").text
    stars = movie.find("stars").text
    plot = movie.find("plot").text
    keywords = movie.find("keywords").text
    for item in (id_tag, name, url, year, stars, plot, keywords):
        print item
    print '=' * 50
</snippet></ROW><ROW><id>10363233</id><snippet>0
The Shawshank Redemption
http://www.imdb.com/title/tt0111161/
1994
Tim Robbins  Morgan Freeman  Bob Gunton
plot...
Reviews, Showtimes
==================================================
1
Inglourious Basterds
http://www.imdb.com/title/tt0361748/
2009
Brad Pitt  Mélanie Laurent  Christoph Waltz
plot/...
Reviews, credits
==================================================
</snippet></ROW><ROW><id>10363278</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup(definition)

import re
infobox_start = re.compile("^Infobox") 

start_at = soup.find(text=infobox_start)
for string in start_at.parent.stripped_strings:
    print string
</snippet></ROW><ROW><id>10363310</id><snippet>parse_date_range</snippet></ROW><ROW><id>10363310</id><snippet>daterangeparser</snippet></ROW><ROW><id>10363310</id><snippet>daterangeparser.parse_date_range</snippet></ROW><ROW><id>10363310</id><snippet>parse_date_range</snippet></ROW><ROW><id>10363310</id><snippet>__init__</snippet></ROW><ROW><id>10363310</id><snippet>parse</snippet></ROW><ROW><id>10363310</id><snippet>from daterangeparser import parse</snippet></ROW><ROW><id>10363489</id><snippet>import sys

class CherryPyApp(object):

  def default(self):
    sys.exit()
  default.exposed = True

cherrypy.quickstart(CherryPyApp())
</snippet></ROW><ROW><id>10363592</id><snippet>concordance</snippet></ROW><ROW><id>10363592</id><snippet>Text</snippet></ROW><ROW><id>10363592</id><snippet>text1</snippet></ROW><ROW><id>10363592</id><snippet>Text</snippet></ROW><ROW><id>10363592</id><snippet>gutenberg</snippet></ROW><ROW><id>10363592</id><snippet>from nltk.corpus import gutenberg
for s in gutenberg.sents('melville-moby_dick.txt'):
    if 'Ahab' in s and 'Moby' in s:
        print " ".join(s)
</snippet></ROW><ROW><id>10363693</id><snippet>query % db.literal(args)
</snippet></ROW><ROW><id>10363693</id><snippet>query</snippet></ROW><ROW><id>10363693</id><snippet>%s</snippet></ROW><ROW><id>10363693</id><snippet>db.literal(args)</snippet></ROW><ROW><id>10363693</id><snippet>query</snippet></ROW><ROW><id>10364168</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; memfield = (ctypes.c_char).from_address(0x0A7F03E4)
</snippet></ROW><ROW><id>10364168</id><snippet>&gt;&gt;&gt; memarray = (ctypes.c_char*memoryfieldlen).from_address(0x0A7F03E4)
</snippet></ROW><ROW><id>10364399</id><snippet>&gt;&gt;&gt; x = [1,2,3,4,5,6,7,8,9]
&gt;&gt;&gt; zip(*[iter(x)]*3)
[(1, 2, 3), (4, 5, 6), (7, 8, 9)]
</snippet></ROW><ROW><id>10364493</id><snippet>collide_circle</snippet></ROW><ROW><id>10364493</id><snippet>pygame.sprite.spritecollide(hook, fish, False, pygame.sprite.collide_circle)
</snippet></ROW><ROW><id>10364493</id><snippet>collided</snippet></ROW><ROW><id>10364712</id><snippet>class sdict(dict):
    def __getattr__(self, attr):
        if attr.startswith('__'):
            raise AttributeError
        return self.get(attr, None)
    __setattr__= dict.__setitem__
    __delattr__= dict.__delitem__
</snippet></ROW><ROW><id>10364712</id><snippet>__getattr__</snippet></ROW><ROW><id>10364712</id><snippet>"__getstate__"</snippet></ROW><ROW><id>10364712</id><snippet>AttributeError</snippet></ROW><ROW><id>10364712</id><snippet>__getattr__</snippet></ROW><ROW><id>10364776</id><snippet>def findprev(graph, distance, el, path=None):
    if path is None:
        path = [el]
    else:
        path.append(el)
    value = distance[el]
    if value == 0:
        print(path)

    for i in graph[el]:
        if value - 1 == distance[i]:
            findprev(graph, distance, i, path[:])

findprev(graph, distance, 10)
</snippet></ROW><ROW><id>10364776</id><snippet>[10, 7, 1, 2]
[10, 7, 8, 3]
[10, 6, 8, 3]
</snippet></ROW><ROW><id>10364776</id><snippet>def findprev(graph, distance, el, path=None):
    if path is None:
        path = [el]
    else:
        path.append(el)
    value = distance[el]
    if value == 0:
        return [path]

    result = []
    for i in graph[el]:
        if value - 1 == distance[i]:
            paths = findprev(graph, distance, i, path[:])
            for p in paths:
                result.append(p)
    return result
</snippet></ROW><ROW><id>10364880</id><snippet>threading</snippet></ROW><ROW><id>10364880</id><snippet>thread</snippet></ROW><ROW><id>10364880</id><snippet>import thread
import time

def run():
    time.sleep(2)
    print('ok')

thread.start_new_thread(run, ())
</snippet></ROW><ROW><id>10364880</id><snippet>Unhandled exception in thread started by 
sys.excepthook is missing
lost sys.stderr
</snippet></ROW><ROW><id>10364880</id><snippet>import threading
import time

def run():
    time.sleep(2)
    print('ok')

t=threading.Thread(target=run)
t.daemon = True  # set thread to daemon ('ok' won't be printed in this case)
t.start()
</snippet></ROW><ROW><id>10364888</id><snippet>from ..
from ..
class MainPage ..
application = ..
def main() ..
if __name__ ..
</snippet></ROW><ROW><id>10364888</id><snippet>webapp</snippet></ROW><ROW><id>10364888</id><snippet>run_wsgi_app</snippet></ROW><ROW><id>10364888</id><snippet>MainPage</snippet></ROW><ROW><id>10364888</id><snippet>def</snippet></ROW><ROW><id>10364888</id><snippet>def</snippet></ROW><ROW><id>10364888</id><snippet>webapp.WSGIApplication</snippet></ROW><ROW><id>10364888</id><snippet>application</snippet></ROW><ROW><id>10364888</id><snippet>main</snippet></ROW><ROW><id>10364888</id><snippet>__name__</snippet></ROW><ROW><id>10364888</id><snippet>__name__</snippet></ROW><ROW><id>10364888</id><snippet>__name__</snippet></ROW><ROW><id>10364888</id><snippet>"__main__"</snippet></ROW><ROW><id>10364888</id><snippet>main()</snippet></ROW><ROW><id>10364888</id><snippet>run_wsgi_app</snippet></ROW><ROW><id>10364888</id><snippet>application</snippet></ROW><ROW><id>10364888</id><snippet>MainPage</snippet></ROW><ROW><id>10364888</id><snippet>MainPage</snippet></ROW><ROW><id>10364888</id><snippet>.get()</snippet></ROW><ROW><id>10364888</id><snippet>MainPage</snippet></ROW><ROW><id>10364888</id><snippet>get</snippet></ROW><ROW><id>10364917</id><snippet>Popen().communicate()</snippet></ROW><ROW><id>10364917</id><snippet>Popen()</snippet></ROW><ROW><id>10364917</id><snippet>-l</snippet></ROW><ROW><id>10364917</id><snippet>p = subprocess.Popen(['sed', '-l', 's/a/x/g'],
                     stdout=subprocess.PIPE,
                     stdin=subprocess.PIPE)
</snippet></ROW><ROW><id>10364941</id><snippet>value = Ks.data
column_index = Ks.indices
row_pointers = Ks.indptr
</snippet></ROW><ROW><id>10365161</id><snippet>import boto
s3 = boto.connect_s3('access', 'secret')
b = s3.get_bucket('destination_bucket')
mp = b.initiate_multipart_upload('tmp/large-copy-test.mp4')
mp.copy_part_from_key('source_bucket', 'path/to/source/key', 1, 0, 999999999)
mp.copy_part_from_key('source_bucket', 'path/to/source/key', 2, 1000000000, 1999999999)
mp.copy_part_from_key('source_bucket', 'path/to/source/key', 3, 2000000000, 2999999999)
mp.copy_part_from_key('source_bucket', 'path/to/source/key', 4, 3000000000, 3999999999)
mp.copy_part_from_key('source_bucket', 'path/to/source/key', 5, 4000000000, 4999999999)
mp.copy_part_from_key('source_bucket', 'path/to/source/key', 6, 5000000000, 5500345712)
mp.complete_upload()
</snippet></ROW><ROW><id>10365251</id><snippet>findall</snippet></ROW><ROW><id>10365251</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = '300 gm'
&gt;&gt;&gt; re.findall('\d+', s)
['300']
&gt;&gt;&gt; s = '300 gm 200 kgm some more stuff a number: 439843'
&gt;&gt;&gt; re.findall('\d+', s)
['300', '200', '439843']
</snippet></ROW><ROW><id>10365251</id><snippet>int</snippet></ROW><ROW><id>10365251</id><snippet>&gt;&gt;&gt; map(int, re.findall('\d+', s))
[300, 200, 439843]
</snippet></ROW><ROW><id>10365338</id><snippet>func_closure</snippet></ROW><ROW><id>10365338</id><snippet>a.getValue.func_closure[0].cell_contents.test</snippet></ROW><ROW><id>10365338</id><snippet>getValue</snippet></ROW><ROW><id>10365536</id><snippet>self.geometry("300x300+10+10") # numbers corresponding to [width]x[height]+[x offset]+[y offset]
</snippet></ROW><ROW><id>10365639</id><snippet>int</snippet></ROW><ROW><id>10365639</id><snippet>&gt;&gt;&gt; sys.getsizeof(int())
24
</snippet></ROW><ROW><id>10365663</id><snippet>super()</snippet></ROW><ROW><id>10365663</id><snippet>class Base(object):
    def __init__(self):
        super(Base, self).__init__()
        print "BASE"

class Next(Base):
    def __init__(self):
        super(Next, self).__init__()
        print "NEXT"

class Final(Next):
    def __init__(self):
        super(Final, self).__init__()    
        print "FINAL"

f = Final()
</snippet></ROW><ROW><id>10365663</id><snippet>self</snippet></ROW><ROW><id>10365663</id><snippet>self</snippet></ROW><ROW><id>10365663</id><snippet>__init__</snippet></ROW><ROW><id>10365663</id><snippet>f</snippet></ROW><ROW><id>10365663</id><snippet>self</snippet></ROW><ROW><id>10365663</id><snippet>Final</snippet></ROW><ROW><id>10365663</id><snippet>super()</snippet></ROW><ROW><id>10365926</id><snippet>from argparse import ArgumentParser,Action

class Foo(object):
    def __init__(self,*args):
        self.args=args
    def __str__(self):
        return str(self.args)

class FooAction(Action):
    def __call__(self,parser,namespace,values,option_string=None):
        setattr(namespace,self.dest,Foo(*values))  #Add Foo to the options...
class BarAction(Action):
    def __call__(self,parser,namespace,values,option_string=None):
        FooObj=getattr(namespace,'foo')  #raises an error if foo isn't in namespace...
                                         #In this way, BarAction is like a filter on the
                                         #object created by foo.
        FooObj.args=tuple(list(FooObj.args)+list(values)) #append to the list of args.

parser=ArgumentParser()
parser.add_argument('--foo',nargs='*',action=FooAction,help="Foo!")
parser.add_argument('--bar',nargs='*',action=BarAction,help="Bar! : Must be used after --foo")

namespace=parser.parse_args("--foo Hello World --bar Nice Day".split())
print (namespace)
print (namespace.foo)
</snippet></ROW><ROW><id>10365926</id><snippet>-argument</snippet></ROW><ROW><id>10365926</id><snippet>-a</snippet></ROW><ROW><id>10365926</id><snippet>--argument</snippet></ROW><ROW><id>10365926</id><snippet>[</snippet></ROW><ROW><id>10365926</id><snippet>]</snippet></ROW><ROW><id>10365926</id><snippet>optparse</snippet></ROW><ROW><id>10365926</id><snippet>getopt</snippet></ROW><ROW><id>10365960</id><snippet>datetime</snippet></ROW><ROW><id>10365960</id><snippet>date()</snippet></ROW><ROW><id>10365960</id><snippet>date</snippet></ROW><ROW><id>10365960</id><snippet>obj.cohort_date = datetime.strptime(datetemp, "%m/%d/%y").date()
</snippet></ROW><ROW><id>10366106</id><snippet>class foo:
    def bar1():
        pass
def bar2():
    pass
</snippet></ROW><ROW><id>10366106</id><snippet>import foo
f = foo.foo()
f.bar1()
foo.bar2()
</snippet></ROW><ROW><id>10366146</id><snippet>LongName['aname']</snippet></ROW><ROW><id>10366146</id><snippet>LongName[aname]</snippet></ROW><ROW><id>10366146</id><snippet>def get(d, key):
    return d.get(key, '')

register.filter(get)
</snippet></ROW><ROW><id>10366146</id><snippet>{{ LongName|get:aname }}
</snippet></ROW><ROW><id>10366146</id><snippet> # in view
 name_abbrevs = [(k, LongName[k]) for k in ShortName]

 # in template
 {% for short_name, long_name in name_abbrevs %}
     {{ short_name }} stands for {{ long_name }}
 {% endif %}
</snippet></ROW><ROW><id>10366417</id><snippet>sum</snippet></ROW><ROW><id>10366417</id><snippet>reduce</snippet></ROW><ROW><id>10366417</id><snippet>operator</snippet></ROW><ROW><id>10366417</id><snippet>def product(xs):
    return reduce(operator.mul, xs, 1)
</snippet></ROW><ROW><id>10366417</id><snippet>reduce</snippet></ROW><ROW><id>10366417</id><snippet>foldl</snippet></ROW><ROW><id>10366417</id><snippet>foldr</snippet></ROW><ROW><id>10366417</id><snippet>reduce</snippet></ROW><ROW><id>10366744</id><snippet>&gt;&gt;&gt; from PIL import Image
&gt;&gt;&gt; im = Image.open('ball.png')
&gt;&gt;&gt; from io import BytesIO
&gt;&gt;&gt; buffer = BytesIO()
&gt;&gt;&gt; im.save(buffer, format='png')
&gt;&gt;&gt; buffer.getvalue()
'\x89PNG\r\n\x1a\n\x00\ ... 
</snippet></ROW><ROW><id>10366764</id><snippet>In [5]: import numpy as np

In [6]: t = np.array([4, 5, 0, 7, 1, 6, 8, 3, 2, 9])

In [7]: t + np.r_[t[1:],t[0]]
Out[7]: array([ 9,  5,  7,  8,  7, 14, 11,  5, 11, 13])
</snippet></ROW><ROW><id>10366764</id><snippet>In [10]: t + np.roll(t,-1)
Out[10]: array([ 9,  5,  7,  8,  7, 14, 11,  5, 11, 13])
</snippet></ROW><ROW><id>10366764</id><snippet>np.roll</snippet></ROW><ROW><id>10366764</id><snippet>In [11]: timeit t + np.roll(t,-1)
100000 loops, best of 3: 17.2 us per loop

In [12]: timeit t + np.r_[t[1:],t[0]]
10000 loops, best of 3: 35.5 us per loop
</snippet></ROW><ROW><id>10366814</id><snippet>import time
import datetime

class MySQLWrapper:
  def __init__(self, min_period_seconds):
    self.min_period = datetime.timedelta(seconds=min_period_seconds)
    self.last_calltime = datetime.datetime.now() - self.min_period
  def insert(self, item):
    now = datetime.datetime.now()
    if now-self.last_calltime &lt; self.min_period:
      print "not insert"
    else:
     self.last_calltime = now
     print "insert", item

m = MySQLWrapper(5)
m.insert(1) # insert 1
m.insert(2) # not insert
time.sleep(5)
m.insert(3) # insert 3
</snippet></ROW><ROW><id>10367036</id><snippet>b</snippet></ROW><ROW><id>10367036</id><snippet>set</snippet></ROW><ROW><id>10367036</id><snippet>&gt;&gt;&gt; a = [1, 2, 3, 4, 5]
&gt;&gt;&gt; b = set([9, 7, 6, 5, 1, 0])
&gt;&gt;&gt; [i for i,item in enumerate(a) if item in b]
[0, 4]
</snippet></ROW><ROW><id>10367045</id><snippet>re.search()</snippet></ROW><ROW><id>10367045</id><snippet>lines = data.split('\n')
a = re.search('regex', lines[3])
</snippet></ROW><ROW><id>10367304</id><snippet>link(const char* set, conn_type* connection );
func(conn_type* connection, uint32_t* status);
</snippet></ROW><ROW><id>10367304</id><snippet>mydll=ctypes.CDLL('mydll')
connection_t = ctypes.c_uint32
link = mydll.link
link.argtypes=(ctypes.c_char_p, ctypes.POINTER(connection_t) )
connection = connection_t()
link("localhost: 5412", ctypes.byref(connection))

func=mydll.func
status_t=ctypes.c_uint32
status=status_t()
func.argtypes=(ctypes.POINTER(connection_t),ctypes.POINTER(status_t))
result=func(ctypes.byref(connection), ctypes.byref(status))
</snippet></ROW><ROW><id>10367327</id><snippet>&gt;&gt;&gt; def rot13(st):
...     import string
...     tab1 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
...     tab2 = 'nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM'
...     tab = string.maketrans(tab1, tab2)
...     return st.translate(tab)
... 
&gt;&gt;&gt; rot13('test')
'grfg'
&gt;&gt;&gt; rot13(u'test')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 6, in rot13
TypeError: character mapping must return integer, None or unicode
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10367327</id><snippet>return str(st).translate(tab)
</snippet></ROW><ROW><id>10367461</id><snippet>def foo(x): return 1
bar = foo
</snippet></ROW><ROW><id>10367461</id><snippet>foo</snippet></ROW><ROW><id>10367461</id><snippet>bar</snippet></ROW><ROW><id>10367461</id><snippet>delete_function(foo)</snippet></ROW><ROW><id>10367461</id><snippet>delete_function(bar)</snippet></ROW><ROW><id>10367461</id><snippet>delete_function</snippet></ROW><ROW><id>10367461</id><snippet>foo</snippet></ROW><ROW><id>10367461</id><snippet>bar</snippet></ROW><ROW><id>10367461</id><snippet>delete_function</snippet></ROW><ROW><id>10367461</id><snippet>foo</snippet></ROW><ROW><id>10367461</id><snippet>bar</snippet></ROW><ROW><id>10367461</id><snippet>delete_function</snippet></ROW><ROW><id>10367461</id><snippet>delete_function</snippet></ROW><ROW><id>10367614</id><snippet>__</snippet></ROW><ROW><id>10367614</id><snippet>temp = Item.objects.filter(assignedTo__username='matthew')
</snippet></ROW><ROW><id>10367764</id><snippet>sorted_data</snippet></ROW><ROW><id>10367764</id><snippet>final_data</snippet></ROW><ROW><id>10367764</id><snippet>final_data</snippet></ROW><ROW><id>10367764</id><snippet>for filename, size in sorted_data:
    print filename, final_data[filename]
</snippet></ROW><ROW><id>10367764</id><snippet>def human_readable_size(size):
    # logic to convert size
    return hr_size
</snippet></ROW><ROW><id>10367764</id><snippet>for filename, size in sorted_data:
    print filename, human_readable_size(size)
</snippet></ROW><ROW><id>10367791</id><snippet>def</snippet></ROW><ROW><id>10367791</id><snippet>def f(x):
    print x
</snippet></ROW><ROW><id>10367791</id><snippet>f</snippet></ROW><ROW><id>10367791</id><snippet>f</snippet></ROW><ROW><id>10367791</id><snippet># defining the function f - won't print anything, since it's just a function definition
def f(x):
    print x
# and now calling the function on the argument "Hello!" - this should print "Hello!"
f("Hello!")
</snippet></ROW><ROW><id>10367892</id><snippet>from contextlib import contextmanager

@contextmanager
def tag(name):
    print "&lt;%s&gt;" % name
    yield
    print "&lt;/%s&gt;" % name

&gt;&gt;&gt; with tag("h1"):
...    print "foo"
...
&lt;h1&gt;
foo
&lt;/h1&gt;
</snippet></ROW><ROW><id>10367955</id><snippet>powerset</snippet></ROW><ROW><id>10367955</id><snippet>def powerset(iterable):
    "powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))
</snippet></ROW><ROW><id>10368024</id><snippet>syncdb</snippet></ROW><ROW><id>10368024</id><snippet>python manage.py reset appname</snippet></ROW><ROW><id>10368024</id><snippet>syncdb</snippet></ROW><ROW><id>10368126</id><snippet>\r\n</snippet></ROW><ROW><id>10368126</id><snippet>\n</snippet></ROW><ROW><id>10368126</id><snippet>\r</snippet></ROW><ROW><id>10368126</id><snippet>\r\n\r\n</snippet></ROW><ROW><id>10368126</id><snippet>\n\n</snippet></ROW><ROW><id>10368126</id><snippet>repr()</snippet></ROW><ROW><id>10368126</id><snippet>&gt;&gt;&gt; mystring = #[[a line of your file]]
&gt;&gt;&gt; repr(mystring)
"'\\nmulti\\nline\\nstring '"
</snippet></ROW><ROW><id>10368126</id><snippet>with open(file.txt, 'r') as f:
    for line in f:
        print (line)
</snippet></ROW><ROW><id>10368192</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; url = '/url?q=http://www.amazon.com/Quantitative-Trading-Build-Algorithmic-Business/dp/0470284889&amp;sa=U&amp;ei=P2ycT6OoNuasiAL2ncV5&amp;ved=0CBIQFjAA&amp;usg=AFQjCNEo_ujANAKnjheWDRlBKnJ1BGe'
&gt;&gt;&gt; data = urlparse.parse_qs(
...     urlparse.urlparse(url).query
... )
&gt;&gt;&gt; data
{'ei': ['P2ycT6OoNuasiAL2ncV5'],
 'q': ['http://www.amazon.com/Quantitative-Trading-Build-Algorithmic-Business/dp/0470284889'],
 'sa': ['U'],
 'usg': ['AFQjCNEo_ujANAKnjheWDRlBKnJ1BGe'],
 'ved': ['0CBIQFjAA']}
&gt;&gt;&gt; data['q'][0]
'http://www.amazon.com/Quantitative-Trading-Build-Algorithmic-Business/dp/0470284889'
</snippet></ROW><ROW><id>10368244</id><snippet>// noddy.cpp
namespace {

struct noddy_NoddyObject
{
    PyObject_HEAD
    // Type-specific fields go here.
    std::shared_ptr&lt;int&gt; value; // WARNING
};

PyObject* Noddy_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    try {
        Noddy *self = (Noddy *)type-&gt;tp_alloc(type, 0);
        if (self) {
            self-&gt;value = std::make_shared(7);
            // or more complex operations that may throw
            // or extract complex initialisation as Noddy_init function
            return self;
        }
    }
    catch (...) {
        // do something, log, etc.
    }
    return 0;
}

PyTypeObject noddy_NoddyType =
{
    PyObject_HEAD_INIT(NULL)
    // ...
}

} // unnamed namespace
</snippet></ROW><ROW><id>10368244</id><snippet>std::shared_ptr</snippet></ROW><ROW><id>10368244</id><snippet>dealloc</snippet></ROW><ROW><id>10368244</id><snippet>noddy_NoddyType</snippet></ROW><ROW><id>10368244</id><snippet>value</snippet></ROW><ROW><id>10368244</id><snippet>nullptr</snippet></ROW><ROW><id>10368244</id><snippet>shared_ptr</snippet></ROW><ROW><id>10368244</id><snippet>noddy_NoddyType</snippet></ROW><ROW><id>10368244</id><snippet>dealloc</snippet></ROW><ROW><id>10368244</id><snippet>value</snippet></ROW><ROW><id>10368315</id><snippet>break</snippet></ROW><ROW><id>10368315</id><snippet>while</snippet></ROW><ROW><id>10368315</id><snippet>for</snippet></ROW><ROW><id>10368315</id><snippet>pos</snippet></ROW><ROW><id>10368315</id><snippet>last</snippet></ROW><ROW><id>10368402</id><snippet>python</snippet></ROW><ROW><id>10368402</id><snippet>ruby</snippet></ROW><ROW><id>10368402</id><snippet>export LANG=en_US.UTF-8</snippet></ROW><ROW><id>10368402</id><snippet>.profile</snippet></ROW><ROW><id>10368402</id><snippet>pip</snippet></ROW><ROW><id>10368402</id><snippet>easy_install pip</snippet></ROW><ROW><id>10368402</id><snippet>sudo</snippet></ROW><ROW><id>10368402</id><snippet>pip install</snippet></ROW><ROW><id>10368402</id><snippet>pip uninstall</snippet></ROW><ROW><id>10368439</id><snippet>python setup.py register</snippet></ROW><ROW><id>10368578</id><snippet>list.append</snippet></ROW><ROW><id>10368578</id><snippet>None</snippet></ROW><ROW><id>10368578</id><snippet>global</snippet></ROW><ROW><id>10368578</id><snippet>d = []

class MyHTMLParser(HTMLParser):
    def handle_data(self, data):
        d.append(data)
</snippet></ROW><ROW><id>10368578</id><snippet>d</snippet></ROW><ROW><id>10368618</id><snippet>e</snippet></ROW><ROW><id>10368618</id><snippet>long</snippet></ROW><ROW><id>10368618</id><snippet>n</snippet></ROW><ROW><id>10368618</id><snippet>long</snippet></ROW><ROW><id>10368618</id><snippet>import M2Crypto
key = M2Crypto.RSA.new_pub_key((
    M2Crypto.m2.bn_to_mpi(M2Crypto.m2.hex_to_bn(hex(e)[2:])),
    M2Crypto.m2.bn_to_mpi(M2Crypto.m2.hex_to_bn(hex(n)[2:])),
    ))
</snippet></ROW><ROW><id>10368618</id><snippet>0xA45E</snippet></ROW><ROW><id>10368618</id><snippet>0x</snippet></ROW><ROW><id>10368618</id><snippet>import M2Crypto
from binascii import hexlify 
e = f.read(4)
n = f.read(0x80)
key = M2Crypto.RSA.new_pub_key((
    M2Crypto.m2.bn_to_mpi(M2Crypto.m2.hex_to_bn(hexlify(e))),
    M2Crypto.m2.bn_to_mpi(M2Crypto.m2.hex_to_bn(hexlify(n))),
    ))
</snippet></ROW><ROW><id>10368618</id><snippet>new_pub_key</snippet></ROW><ROW><id>10368618</id><snippet>00010001</snippet></ROW><ROW><id>10368618</id><snippet>000003010001</snippet></ROW><ROW><id>10368621</id><snippet>notid</snippet></ROW><ROW><id>10368621</id><snippet>delimitedList</snippet></ROW><ROW><id>10368621</id><snippet>notid</snippet></ROW><ROW><id>10368829</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; paths = ['00093282.dbf', '00345602.dbf', '69209340.dbf', '69806980.dbf', '92406482.dbf', '93609360.dbf','aaa.dbf', 'bbb.dbf']
&gt;&gt;&gt; for path in paths:
        file_name,ext = os.path.splitext(path)
        if file_name.isdigit():
            print '{0} {1}'.format(file_name[:4],file_name[4:])


0009 3282
0034 5602
6920 9340
6980 6980
9240 6482
9360 9360
</snippet></ROW><ROW><id>10368833</id><snippet>&gt;&gt;&gt; pool.close()
</snippet></ROW><ROW><id>10369000</id><snippet>subprocess.call</snippet></ROW><ROW><id>10369000</id><snippet>shell=True</snippet></ROW><ROW><id>10369000</id><snippet>subprocess.Popen(['/path/to/program', 'arg1', 'arg2'], *otherarguments)
</snippet></ROW><ROW><id>10369006</id><snippet>self.maximum = int(math.ceil(maximum))</snippet></ROW><ROW><id>10369006</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; class ChangeableRange:
        def __init__(self, maximum, start=0, step=1):
            """Sets the maximum, start, and step"""
            try:
                self.maximum = math.ceil(maximum)
                self.start = math.ceil(start)
                self.step = math.ceil(step)
            except TypeError:
                return "Error, attributes must be of type int or float"
        def __iter__(self):
            """Iterates over the range"""
            return iter(range(self.start, self.maximum, self.step))


&gt;&gt;&gt; j = ChangeableRange(4)
&gt;&gt;&gt; print(list(j)) 
[0, 1, 2, 3]
</snippet></ROW><ROW><id>10369073</id><snippet>import urllib
post_data = { 'data': 'test data' } #A dictionary of your post data
body = urllib.urlencode(post_data) #Make it into a post request
http_client.fetch("http://0.0.0.0:8888", handle_request, method='POST', headers=None, body=body) #Send it off!
</snippet></ROW><ROW><id>10369073</id><snippet>data = self.get_argument('data', 'No data received')
</snippet></ROW><ROW><id>10369171</id><snippet>from PyQt4 import QtGui

app = QtGui.QApplication([])

w = QtGui.QMainWindow()
menu = QtGui.QMenu("menu", w)

menu.addAction(QtGui.QAction('50%', menu, checkable=True))
menu.addAction(QtGui.QAction('100%', menu, checkable=True))
menu.addAction(QtGui.QAction('200%', menu, checkable=True))
menu.addAction(QtGui.QAction('300%', menu, checkable=True))
menu.addAction(QtGui.QAction('400%', menu, checkable=True))

w.menuBar().addMenu(menu)
w.show()
app.exec_()
</snippet></ROW><ROW><id>10369171</id><snippet>from PyQt4 import QtGui

app = QtGui.QApplication([])

w = QtGui.QMainWindow()
menu = QtGui.QMenu("menu", w)
ag = QtGui.QActionGroup(w, exclusive=True)

a = ag.addAction(QtGui.QAction('50%', w, checkable=True))
menu.addAction(a)

a = ag.addAction(QtGui.QAction('100%', w, checkable=True))
menu.addAction(a)

a = ag.addAction(QtGui.QAction('200%', w, checkable=True))
menu.addAction(a)

a = ag.addAction(QtGui.QAction('300%', w, checkable=True))
menu.addAction(a)

a = ag.addAction(QtGui.QAction('400%', w, checkable=True))
menu.addAction(a)

w.menuBar().addMenu(menu)
w.show()
app.exec_()
</snippet></ROW><ROW><id>10369276</id><snippet>Tab</snippet></ROW><ROW><id>10369276</id><snippet>Tab</snippet></ROW><ROW><id>10369276</id><snippet>Tab</snippet></ROW><ROW><id>10369276</id><snippet>self.tabs</snippet></ROW><ROW><id>10369276</id><snippet>MyFrame</snippet></ROW><ROW><id>10369276</id><snippet>Tab</snippet></ROW><ROW><id>10369276</id><snippet>Tab</snippet></ROW><ROW><id>10369335</id><snippet>itertools.product</snippet></ROW><ROW><id>10369335</id><snippet>import itertools
combined = [f + ' ' + l for f, l in itertools.product(first, last)]
</snippet></ROW><ROW><id>10369344</id><snippet>class RegionField(SelectField):

    def __init__(self, *args, **kwargs):
        super(RegionField, self).__init__(*args, **kwargs)
        # a sample sqlalchemy query that returns a list of tuples (id, name)
        self.choices = models.Session.query(models.Region.id, models.Region.name).order_by(models.Region.name).all()

class AddCityForm(Form):
    region = RegionField()
    name = TextField(_('Name'))
</snippet></ROW><ROW><id>10369344</id><snippet>populate_obj(self, obj, name)</snippet></ROW><ROW><id>10369407</id><snippet>&gt;&gt;&gt; from nltk import PorterStemmer
&gt;&gt;&gt; PorterStemmer().stem_word('complications')
</snippet></ROW><ROW><id>10369528</id><snippet>connect_db()</snippet></ROW><ROW><id>10369528</id><snippet>def connect_db():
  global conn
  conn = mdb.connect(dbinfo.server, dbinfo.username, dbinfo.password, dbinfo.database)
  return conn.cursor(mdb.cursors.DictCursor)
</snippet></ROW><ROW><id>10369528</id><snippet>def connect_db():
  global conn
  conn = mdb.connect(dbinfo.server, dbinfo.username, dbinfo.password, dbinfo.database, charset='utf8', use_unicode=True)
  return conn.cursor(mdb.cursors.DictCursor)
</snippet></ROW><ROW><id>10369528</id><snippet>charset='utf8', use_unicode=True</snippet></ROW><ROW><id>10369567</id><snippet>scramble = {  0: self.up_turn,
              1: self.down_turn,
              etc.
</snippet></ROW><ROW><id>10369567</id><snippet>scramble[i]()</snippet></ROW><ROW><id>10369567</id><snippet>scramble[i][0](scramble[i][1])</snippet></ROW><ROW><id>10369567</id><snippet>6: lambda: self.up_turn("inverted")
7: lambda: self.down_turn("inverted")
</snippet></ROW><ROW><id>10369733</id><snippet>    docusers = Docuser.all().fetch(1000)
    docuser_dict = dict( [(i.key(), i.name) for i in docusers] )
</snippet></ROW><ROW><id>10369733</id><snippet>    documents = Document.all().fetch(1000)
    for i,d in enumerate(documents):
        docuser_key = Document.lastEditedBy.get_value_for_datastore(d)
        last_editedby_name = docuser_dict.get(docuser_key)
        out += '&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;' % (d.title, last_editedby_name)
</snippet></ROW><ROW><id>10369955</id><snippet>x</snippet></ROW><ROW><id>10369955</id><snippet>width</snippet></ROW><ROW><id>10369955</id><snippet>import numpy as np
import matplotlib.pyplot as plt

N = 5
menMeans = (20, 35, 30, 35, 27)
menStd =   (2, 3, 4, 1, 2)

ind = np.arange(N)  # the x locations for the groups
width = 0.35       # the width of the bars

fig = plt.figure()
ax = fig.add_subplot(111)
rects1 = ax.bar(ind, menMeans, width, color='r', yerr=menStd)

womenMeans = (25, 32, 34, 20, 25)
womenStd =   (3, 5, 2, 3, 3)
rects2 = ax.bar(ind+width, womenMeans, width, color='y', yerr=womenStd)

# add some
ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.set_xticks(ind+width)
ax.set_xticklabels( ('G1', 'G2', 'G3', 'G4', 'G5') )

ax.legend( (rects1[0], rects2[0]), ('Men', 'Women') )

plt.show()
</snippet></ROW><ROW><id>10370180</id><snippet>items["BE1234"] = ["2", "100"]</snippet></ROW><ROW><id>10370180</id><snippet>current_val = items["BE1234"]
new_val = "100";
new_array = [current_val, new_val]
items["BE1234"] = new_array
</snippet></ROW><ROW><id>10370414</id><snippet>import jinja2

# NOTE: in this template there is no data relating to specific posts.
# There are only references to data structures passed in from your main code
page_template = jinja2.Template('''
    &lt;!-- this is a navigation block that should probably be in base.html --&gt;
    {% block blog_posts %}
        &lt;!-- links/targets for the side menu to jump to a post --&gt;
        {% for post in posts %}
          &lt;li&gt;&lt;a href="{{ post.url }}"&gt;{{ post.title }} 
                                       - {{ post.date }}&lt;/a&gt;&lt;/li&gt;
        {% endfor %}
    {% endblock %}

    &lt;!-- this is a content block that should probably be in page.html --&gt;
    {% block content %}
        &lt;div id="post"&gt;
            &lt;h1&gt;{{ current.title }}&lt;/h1&gt;
            &lt;h2&gt;{{ current.date }}&lt;/h2&gt;
            &lt;p&gt;{{ current.content }}&lt;/p&gt;
        &lt;/div&gt;
    {% endblock %}
''')

# NOTE your main code would create a data structure such as this 
# list of dictionaries ready to pass in to your template
list_of_posts = [
         { 'url' : '#post1',
          'title' : 'My first post',
          'date' : 'Feb 2012',
          'content' : 'My first post is about Hello World.'},

         { 'url' : '#post2',
          'title' : 'My second post',
          'date' : 'Apr 2012',
          'content' : 'My second post is about Foo Bar.'}
         ]

# Pass in a full list of posts and a variable containing the last
# post in the list, assumed to be the most recent. 
print page_template.render(posts = list_of_posts,
                           current = list_of_posts[-1])
</snippet></ROW><ROW><id>10370752</id><snippet>class PhoneForm(forms.ModelForm):
    class Meta:
        model = Phone

class ContractForm(forms.ModelForm):
    class Meta:
        model = Contract
        exclude = ('phone',)

def add(request):
   ...
   if request.method == 'POST':
       phone_form = PhoneForm(request.POST)
       contract_form = ContractForm(request.POST)
       if phone_form.is_valid() and contract_form.is_valid():
           phone = phone_form.save()
           contract = contract_form.save(commit=False)
           contract.phone = phone
           contract.save()
   ...
</snippet></ROW><ROW><id>10370752</id><snippet>OneToOneField</snippet></ROW><ROW><id>10370752</id><snippet>ForeignKey</snippet></ROW><ROW><id>10370752</id><snippet>ManyToManyField</snippet></ROW><ROW><id>10370956</id><snippet>Firebug</snippet></ROW><ROW><id>10370956</id><snippet>POST</snippet></ROW><ROW><id>10370956</id><snippet>$("#form").submit(function(event) {
        var $form = $(this),
        $inputs = $form.find("input, select, button, textarea"),
        serializedData = $form.serialize();

        $.ajax({
            url: "/donate/",
            type: "post",
            data: serializeData,
            success: function(response) {
                alert(response)
            }
        })
        event.preventDefault();
    });
</snippet></ROW><ROW><id>10370956</id><snippet>if request.is_ajax() or request.method == 'POST':
        form = DonateForm(data=request.POST)
        if form.is_valid():
            return HttpResponse("Success")
        else:
            return HttpResponse("Fail")
</snippet></ROW><ROW><id>10370956</id><snippet>$.ajax()</snippet></ROW><ROW><id>10370956</id><snippet>$.post()</snippet></ROW><ROW><id>10371084</id><snippet>image</snippet></ROW><ROW><id>10371084</id><snippet>x_range = 4.4 - 0.55</snippet></ROW><ROW><id>10371084</id><snippet>x_offset = 0.55</snippet></ROW><ROW><id>10371084</id><snippet>y_range = 23000 - 2500</snippet></ROW><ROW><id>10371084</id><snippet>y_offset = 2500</snippet></ROW><ROW><id>10371084</id><snippet>import Image
import numpy as np

def get_data(im, x_range, x_offset, y_range, y_offset):
    x_data = np.array([])
    y_data = np.array([])
    width, height = im.size
    im = im.convert('1')
    for x in xrange(width):
        for y in xrange(height):
            if im.getpixel((x, y)) == 0:
                x_data = np.append(x_data, x)
                y_data = np.append(y_data, height - y)
                break
    x_data = (x_data / width) * x_range + x_offset
    y_data = (y_data / height) * y_range + y_offset
    return x_data, y_data

im = Image.open('clean_data_2.png')
x_data, y_data = get_data(im,4.4-0.55,0.55,23000-2500,2500)

from pylab import *
plot(x_data, y_data)
grid(True)
savefig('new_data.png')
show()
</snippet></ROW><ROW><id>10371084</id><snippet>np.trapz</snippet></ROW><ROW><id>10371084</id><snippet>def find_peak(start, grad):
    for index, gr in enumerate(grad[start:]):
        if gr &lt; 0:
            return index + start

def find_end(peak, grad):
    for index, gr in enumerate(grad[peak:]):
        if gr &gt;= 0:
            return index + peak + 1

def find_peaks(grad):
    peaks=[]
    i = 0
    while i &lt; len(grad[:-1]):
        if grad[i] &gt; 0:
            start = i
            peak_index = find_peak(start, grad)
            end = find_end(peak_index, grad)
            area = np.trapz(y_data[start:end], x_data[start:end])
            peaks.append((x_data[peak_index], y_data[peak_index], area))
            i = end - 1
        else:
            i+=1
    return peaks

y_data = np.where(y_data &gt; 5000, y_data, 0)

grad = np.diff(y_data)

peaks = find_peaks(grad)

from pylab import *
plot(x_data, y_data)    
for peak in peaks:
    text(peak[0], 1.01*peak[1], '%d'%int(peak[2]))
grid(True)
show()
</snippet></ROW><ROW><id>10371103</id><snippet>dict</snippet></ROW><ROW><id>10371103</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>10371147</id><snippet>self.menu = Gtk.Menu()
self.menu_items = {}
group = []
for i in range(1,5):
    menu_item = Gtk.RadioMenuItem.new_with_label(group, str(i))
    group = menu_item.get_group()
    self.menu_items[i] = menu_item
    self.menu.append(menu_item)
    menu_item.connect("activate", self.on_menu_select, i)
    menu_item.show()

self.menu_items[2].set_active(True)
</snippet></ROW><ROW><id>10371147</id><snippet>def button_press(self, widget, event, data=None):
    self.menu.popup(None, None, None, None,
                    event.button, event.time)
</snippet></ROW><ROW><id>10371169</id><snippet>PyObject</snippet></ROW><ROW><id>10371169</id><snippet>struct foo {};

struct foo *test() {
  static struct foo inst;
  return &amp;inst;
}
</snippet></ROW><ROW><id>10371169</id><snippet>test()</snippet></ROW><ROW><id>10371169</id><snippet>PyObject</snippet></ROW><ROW><id>10371169</id><snippet>PyObject</snippet></ROW><ROW><id>10371169</id><snippet>PyObject</snippet></ROW><ROW><id>10371169</id><snippet>PyObject</snippet></ROW><ROW><id>10371271</id><snippet>function CreateTableWithDefaultElement(default)
  local tbl = {}
  local mtbl = {}
  mtbl.__index = function(tbl, key)
    local val = rawget(tbl, key)
    return val or default
  end
  setmetatable(tbl, mtbl)
  return tbl
end
</snippet></ROW><ROW><id>10371326</id><snippet>&gt;&gt;&gt; from flaskr import init_db; init_db()</snippet></ROW><ROW><id>10371506</id><snippet>lxml</snippet></ROW><ROW><id>10371506</id><snippet>import urllib
import lxml.html

fd = urllib.urlopen('http://epaper.derstandarddigital.at/')
doc = lxml.html.parse(fd)
matches = doc.xpath('//img[@id="imgPage2]')
if matches:
  print matches[0].get('src')
</snippet></ROW><ROW><id>10371506</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>10371710</id><snippet>{% extends "base.html" %}
</snippet></ROW><ROW><id>10371710</id><snippet>{% include "nav.html" %}
</snippet></ROW><ROW><id>10371710</id><snippet>extends</snippet></ROW><ROW><id>10371710</id><snippet>include</snippet></ROW><ROW><id>10371710</id><snippet>extends</snippet></ROW><ROW><id>10371754</id><snippet>kidshair['allkids', 'child3', 'hair']
mypath = ('allkids', 'child3', 'hair')
kidshair[mypath]
</snippet></ROW><ROW><id>10371754</id><snippet>'child3'</snippet></ROW><ROW><id>10371754</id><snippet>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; test = {"a": {"b": {"c": 1}}}
&gt;&gt;&gt; def itemsetter(item):
...     def f(name, value):
...         item[name] = value
...     return f
...
&gt;&gt;&gt; mypath = partial(itemsetter(test["a"]["b"]), "c")
&gt;&gt;&gt; mypath(2)
&gt;&gt;&gt; test
{'a': {'b': {'c': 2}}}
</snippet></ROW><ROW><id>10371754</id><snippet>itemsetter()</snippet></ROW><ROW><id>10371754</id><snippet>operator.itemgetter()</snippet></ROW><ROW><id>10371754</id><snippet>functools.partial</snippet></ROW><ROW><id>10371754</id><snippet>mypath = blue</snippet></ROW><ROW><id>10371754</id><snippet>operator</snippet></ROW><ROW><id>10371754</id><snippet>def dictsetter(item, name):
     def f(value):
         item[name] = value
     return f

mypath = dictsetter(test["a"]["b"], "c")

mypath(2)
</snippet></ROW><ROW><id>10371999</id><snippet>&gt;&gt;&gt; import difflib
&gt;&gt;&gt; Org = ['AMEND', 'ASTRT', 'ETIME', 'OBJ', 'ast', 'bias', 'chip', 'cold']
&gt;&gt;&gt; mod = ['AMEND', 'ASTRT', 'OBJ', 'ast', 'bias', 'chip', 'cold', 'flat', 'deb']
&gt;&gt;&gt; list(difflib.ndiff(Org, mod))
['  AMEND', '  ASTRT', '- ETIME', '  OBJ', '  ast', '  bias', '  chip', '  cold', '+ flat', '+ deb']
</snippet></ROW><ROW><id>10371999</id><snippet>Org = ['a', 'b' ,'c', 'd', 'e', 'f', 'g', 'h', 'i']
mod = ['i', 'b', 'c', 'z', 'd', 'f', 'g', 'h', 'a']
differences = set(difflib.ndiff(Org, mod))

moved = set([item[2:] for item in differences if item[0]=='+' and '-' + item[1:] in differences])
removed = set([item[2:] for item in differences if item[0]=='-']) - moved
added = set([item[2:] for item in differences if item[0]=='+']) - moved

print 'moved items:', moved
print 'removed items:', removed
print 'added items:', added
#output:
moved items: set(['a', 'i'])
removed items: set(['e'])
added items: set(['z'])
</snippet></ROW><ROW><id>10372030</id><snippet>itertools.groupby</snippet></ROW><ROW><id>10372030</id><snippet>zip()</snippet></ROW><ROW><id>10372030</id><snippet>data = [
    ['A', '21', '45'],
    ['A', '12', '23'],
    ['A', '54', '21'],
    ['A', '15', '54'],
    ['B', '23', '53'],
    ['B', '34', '53'],
    ['B', '32', '54'],
    ['B', '24', '13'],
    ['C', '31', '43'],
    ['C', '42', '54'],
    ['C', '35', '54'],
    ['C', '12', '11']
]

from itertools import groupby
from operator import itemgetter

for name, values in groupby(data, itemgetter(0)):
    _, first, second = zip(*values)
    print(name, max(first), min(second))
</snippet></ROW><ROW><id>10372030</id><snippet>groupby()</snippet></ROW><ROW><id>10372030</id><snippet>groupby()</snippet></ROW><ROW><id>10372030</id><snippet>zip()</snippet></ROW><ROW><id>10372030</id><snippet>A 54 21
B 34 13
C 42 11
</snippet></ROW><ROW><id>10372030</id><snippet>str.split()</snippet></ROW><ROW><id>10372030</id><snippet>data = """\
A  21 45
A  12 23
A  54 21
A  15 54
B  23 53
B  34 53
B  32 54
B  24 13
C  31 43
C  42 54
C  35 54
C  12 11\
"""

data = [value.split() for value in data.split("\n")]
</snippet></ROW><ROW><id>10372030</id><snippet>for name, values in groupby(data, itemgetter(0)):
    _, first, second, *_ = zip(*values)
    print(name, max(first), min(second))
</snippet></ROW><ROW><id>10372030</id><snippet>for name, values in groupby(data, itemgetter(0)):
    first, second = zip(*values)[1:3]
    print name, max(first), min(second)
</snippet></ROW><ROW><id>10372030</id><snippet>def max_min_by_group(group):
    for name, values in group:
        _, first, second, *_ = zip(*values)
        yield [name, max(first), min(second)]

new = [item for item in max_min_by_group(groupby(data, itemgetter(0)))]
</snippet></ROW><ROW><id>10372030</id><snippet>[['A', '54', '21'], ['B', '34', '13'], ['C', '42', '11']]
</snippet></ROW><ROW><id>10372038</id><snippet>pexpect</snippet></ROW><ROW><id>10372038</id><snippet>subprocess</snippet></ROW><ROW><id>10372038</id><snippet>pexpect</snippet></ROW><ROW><id>10372038</id><snippet>child = pexpect.spawn('scp foo myname@host.example.com:.')
child.expect ('Password:')
child.sendline (mypassword)
</snippet></ROW><ROW><id>10372172</id><snippet>Popen</snippet></ROW><ROW><id>10372172</id><snippet>from subprocess import Popen
p = Popen(['/full/path/to/ppshelper', '-sms', '15062929382','warning'])
p.terminate()
</snippet></ROW><ROW><id>10372265</id><snippet>SO_KEEPALIVE</snippet></ROW><ROW><id>10372265</id><snippet>SO_RCVTIMEO</snippet></ROW><ROW><id>10372265</id><snippet>SO_SNDTIMEO</snippet></ROW><ROW><id>10372265</id><snippet>man 7 socket</snippet></ROW><ROW><id>10372331</id><snippet>makefile</snippet></ROW><ROW><id>10372331</id><snippet>readlines</snippet></ROW><ROW><id>10372331</id><snippet>recv</snippet></ROW><ROW><id>10372349</id><snippet>function annotations</snippet></ROW><ROW><id>10372349</id><snippet>def haul(item: Haulable, *vargs: PackAnimal) -&gt; Distance:
</snippet></ROW><ROW><id>10372349</id><snippet>def compile(source: "something compilable",
            filename: "where the compilable thing comes from",
            mode: "is this a single statement or a suite?"):
</snippet></ROW><ROW><id>10372349</id><snippet>type checking</snippet></ROW><ROW><id>10372373</id><snippet>django.middleware.cache</snippet></ROW><ROW><id>10372373</id><snippet>&gt;&gt;&gt; from django.middleware.cache import get_cache_key as gk
&gt;&gt;&gt; help(gk)
</snippet></ROW><ROW><id>10372373</id><snippet>get_cache_key(request, key_prefix=None, method='GET', cache=None)
    Returns a cache key based on the request path and query. It can be used
    in the request phase because it pulls the list of headers to take into
    account from the global path registry and uses those to build a cache key
    to check against.
</snippet></ROW><ROW><id>10372373</id><snippet>KEY_FUNCTION</snippet></ROW><ROW><id>10372392</id><snippet>sys.stdout</snippet></ROW><ROW><id>10372535</id><snippet>@route('/open/&lt;item_id:int&gt;/&lt;url:path&gt;')
def open(item_id , url):
    if request.query_string:
        url += '?' + request.query_string
    print url
</snippet></ROW><ROW><id>10373337</id><snippet>app = webapp2.WSGIApplication([(r'/', MainHandler),
                               (r'/welcome', WelcomeHandler)],
                               debug=True)
</snippet></ROW><ROW><id>10373341</id><snippet>err.py</snippet></ROW><ROW><id>10373341</id><snippet>err.py</snippet></ROW><ROW><id>10373341</id><snippet># File: recur.py
import recur
print "This is the module"

if __name__ == '__main__':
    print "This is main"
</snippet></ROW><ROW><id>10373341</id><snippet>import A</snippet></ROW><ROW><id>10373341</id><snippet># err.py
...
if __name__=="__main__":
    from prog.err import *     # add this line
</snippet></ROW><ROW><id>10373353</id><snippet>&lt;img src=""&gt;.
</snippet></ROW><ROW><id>10373353</id><snippet>import requests
from bs4 import BeautifulSoup

r = requests.get('http://goodnewshackney.com')
soup = BeautifulSoup(r.text)

for img in soup.find_all('img'):
    print(img.get('src'))
</snippet></ROW><ROW><id>10373353</id><snippet>http://24.media.tumblr.com/avatar_69da5d8bb161_128.png
http://24.media.tumblr.com/avatar_69da5d8bb161_128.png
....
http://25.media.tumblr.com/tumblr_m07jjfqKj01qbulceo1_250.jpg
http://27.media.tumblr.com/tumblr_m05s9b5hyc1qbulceo1_250.jpg
</snippet></ROW><ROW><id>10373442</id><snippet>min</snippet></ROW><ROW><id>10373442</id><snippet>max</snippet></ROW><ROW><id>10373442</id><snippet>a = min(maximum, a)
</snippet></ROW><ROW><id>10373442</id><snippet>a = maximum ^ ((a ^ maximum) &amp; -(a &lt; maximum))
</snippet></ROW><ROW><id>10373442</id><snippet>min</snippet></ROW><ROW><id>10373686</id><snippet>tokenizer</snippet></ROW><ROW><id>10373686</id><snippet>analyzer</snippet></ROW><ROW><id>10373686</id><snippet>analyze</snippet></ROW><ROW><id>10373686</id><snippet>class MyAnalyzer(object):
    @staticmethod
    def analyze(s):
        return s.split()

v = CountVectorizer(analyzer=MyAnalyzer())
</snippet></ROW><ROW><id>10373691</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

import numpy as np
import pylab
import matplotlib.cm as cm
import Image

f = pylab.figure()
for n, fname in enumerate(('1.png', '2.png')):
    image=Image.open(fname).convert("L")
    arr=np.asarray(image)
    f.add_subplot(2, 1, n)  # this line outputs images on top of each other
    # f.add_subplot(1, 2, n)  # this line outputs images side-by-side
    pylab.imshow(arr,cmap=cm.Greys_r)
pylab.title('Double image')
pylab.show()
</snippet></ROW><ROW><id>10373737</id><snippet>INSERT INTO profiles_flat (username, headline, age)
VALUES (%s, %s, %s)
</snippet></ROW><ROW><id>10374103</id><snippet>tokenize</snippet></ROW><ROW><id>10374103</id><snippet>import tokenize

def tokens_with_offset(path):
    line_offsets = []
    line_offset_accum = 0
    with open(path) as f:
        for line in f:
            line_offsets.append(line_offset_accum)
            line_offset_accum += len(line)

    with open(path) as f:
        for ttype, tstring, tbegin, tend, tline in tokenize.generate_tokens(f.readline):
            offset_begin = line_offsets[tbegin[0]] + tbegin[1]
            offset_end = line_offsets[tend[0]] + tend[1]
            yield ttype, tstring, offset_begin, offset_end, tline
</snippet></ROW><ROW><id>10374125</id><snippet>templates</snippet></ROW><ROW><id>10374125</id><snippet>.py</snippet></ROW><ROW><id>10374125</id><snippet>static</snippet></ROW><ROW><id>10374125</id><snippet>/flaskwp1.py
/templates
  webcode.html
/static
  webcodestyle.css
</snippet></ROW><ROW><id>10374125</id><snippet>from flask import Flask, render_template

app = Flask('flaskwp1')
# webcode = open('webcode.html').read() - not needed

@app.route('/')
def webprint():
    return render_template('webcode.html') 

if __name__ == '__main__':
    app.run(host = '0.0.0.0', port = 3000)
</snippet></ROW><ROW><id>10374125</id><snippet>webcode.html</snippet></ROW><ROW><id>10374125</id><snippet>&lt;link rel="stylesheet"
      type="text/css"
      href="/static/webcodestyle.css"/&gt;
</snippet></ROW><ROW><id>10374168</id><snippet>os.normpath</snippet></ROW><ROW><id>10374168</id><snippet> image_path = os.path.normpath(
     os.path.join(settings.MEDIA_ROOT, str(bg.background))
 )
</snippet></ROW><ROW><id>10374168</id><snippet>try:
    bg = BackgroundModel.objects.get(user=request.user)
except BackgroundModel.DoesNotExist:
    pass
else:
    if bg.background != '':
        image_path = os.path.join(settings.MEDIA_ROOT, str(bg.background))
        try:
            os.unlink(image_path)
        except:
            pass

    bg.background = bg.tmpbg
    bg.save()
 return HttpResponse("")
</snippet></ROW><ROW><id>10374287</id><snippet>t</snippet></ROW><ROW><id>10374287</id><snippet>make_bd</snippet></ROW><ROW><id>10374287</id><snippet>None</snippet></ROW><ROW><id>10374287</id><snippet>return t
</snippet></ROW><ROW><id>10374456</id><snippet>g1</snippet></ROW><ROW><id>10374456</id><snippet>In [19]: type(g1)
Out[19]: pandas.core.frame.DataFrame

In [20]: g1.index
Out[20]: 
MultiIndex([('Alice', 'Seattle'), ('Bob', 'Seattle'), ('Mallory', 'Portland'),
       ('Mallory', 'Seattle')], dtype=object)
</snippet></ROW><ROW><id>10374456</id><snippet>In [21]: g1.add_suffix('_Count').reset_index()
Out[21]: 
      Name      City  City_Count  Name_Count
0    Alice   Seattle           1           1
1      Bob   Seattle           2           2
2  Mallory  Portland           2           2
3  Mallory   Seattle           1           1
</snippet></ROW><ROW><id>10374456</id><snippet>In [36]: DataFrame({'count' : df1.groupby( [ "Name", "City"] ).size()}).reset_index()
Out[36]: 
      Name      City  count
0    Alice   Seattle      1
1      Bob   Seattle      2
2  Mallory  Portland      2
3  Mallory   Seattle      1
</snippet></ROW><ROW><id>10374465</id><snippet>&gt;&gt;&gt; class Books():
...     def __init__(self):
...         self.__dict__['referTable'] = 1
...     @property
...     def referTable(self):
...         try:
...             return self.__dict__['referTable']
...         except KeyError:
...             return 2
... 
&gt;&gt;&gt; a = Books()
&gt;&gt;&gt; a.referTable
1
&gt;&gt;&gt; del a.__dict__['referTable']
&gt;&gt;&gt; a.referTable
2
</snippet></ROW><ROW><id>10374465</id><snippet>__dict__</snippet></ROW><ROW><id>10374465</id><snippet>class Books():
    def __init__(self):
        self._referTable = 1

    @property
    def referTable(self):
        return self._referTable if self._referTable else 2
</snippet></ROW><ROW><id>10374465</id><snippet>property()</snippet></ROW><ROW><id>10374569</id><snippet>class Doer(object):
    def __init__(self):
        self.name = "Bob"

    def doSomething(self):
        print "%s got it done" % self.name

def doItBetter(self):
    print "%s got it done better" % self.name

Doer.doSomething = doItBetter
</snippet></ROW><ROW><id>10374569</id><snippet>lambda</snippet></ROW><ROW><id>10374652</id><snippet>pywinauto</snippet></ROW><ROW><id>10374652</id><snippet>42</snippet></ROW><ROW><id>10374652</id><snippet>from pywinauto import application

app = application.Application()
app.connect_(title='Calculator')
window = app.Calculator
print window.Children[5].Text
</snippet></ROW><ROW><id>10374661</id><snippet>1/6</snippet></ROW><ROW><id>10374661</id><snippet>1/6</snippet></ROW><ROW><id>10374661</id><snippet>0</snippet></ROW><ROW><id>10374661</id><snippet>1.0/6</snippet></ROW><ROW><id>10374670</id><snippet>raw-unicode-escape</snippet></ROW><ROW><id>10374670</id><snippet>encode('raw-unicode-escape').decode('utf-8')</snippet></ROW><ROW><id>10374678</id><snippet># select is sqlalchemy.sql.expression.select() 
# each selected column was derived as column = table.c[reference].label(label_with_dot)

labels = [c.name for c in select.columns]
...
record = dict(zip(labels, row))
</snippet></ROW><ROW><id>10374678</id><snippet>conn = engine.connect().execution_options(sqlite_raw_colnames=True)
result = conn.execute(stmt)
</snippet></ROW><ROW><id>10374803</id><snippet>ans = sr1(IP(dst="www.google.com",ttl=5)/ICMP(),verbose=0)
address = ans.getlayer(IP).src
</snippet></ROW><ROW><id>10374803</id><snippet>if ans.haslayer(IP):
    print "Packet has the layer IP"
</snippet></ROW><ROW><id>10374811</id><snippet>import cv2
from scipy.interpolate import griddata
import numpy as np

grid_x, grid_y = np.mgrid[0:149:150j, 0:149:150j]
destination = np.array([[0,0], [0,49], [0,99], [0,149],
                  [49,0],[49,49],[49,99],[49,149],
                  [99,0],[99,49],[99,99],[99,149],
                  [149,0],[149,49],[149,99],[149,149]])
source = np.array([[22,22], [24,68], [26,116], [25,162],
                  [64,19],[65,64],[65,114],[64,159],
                  [107,16],[108,62],[108,111],[107,157],
                  [151,11],[151,58],[151,107],[151,156]])
grid_z = griddata(destination, source, (grid_x, grid_y), method='cubic')
map_x = np.append([], [ar[:,1] for ar in grid_z]).reshape(150,150)
map_y = np.append([], [ar[:,0] for ar in grid_z]).reshape(150,150)
map_x_32 = map_x.astype('float32')
map_y_32 = map_y.astype('float32')

orig = cv2.imread("tmp.png")
warped = cv2.remap(orig, map_x_32, map_y_32, cv2.INTER_CUBIC)
cv2.imwrite("warped.png", warped)
</snippet></ROW><ROW><id>10375083</id><snippet>&gt;&gt;&gt; from django.contrib.sites.models import Site
&gt;&gt;&gt; Site.objects.get_current().domain
'example.com'
&gt;&gt;&gt; 'http://%s/path/to/file.ext' % Site.objects.get_current().domain
'http://example.com/path/to/file.ext'
</snippet></ROW><ROW><id>10375315</id><snippet>new = ""
file = open("file.cpp")
for line in file:
    if "#define" in file:
        splitline = line.split(" ")
        new += "static const "
        if '"' in line:
            new += "string "
        else:
            new += "int "
        new += splitline[1]
        new += " = "
        new += splitline[2]
        new += ";\n"
    else:
        new += line + "\n"
file.close()
newfile = open("new.cpp")
newfile.write(new)
</snippet></ROW><ROW><id>10375434</id><snippet>import win32com.client as win32
word = win32.Dispatch("Word.Application")
word.Visible = 0
word.Documents.Open("MyDocument")
doc = word.ActiveDocument
</snippet></ROW><ROW><id>10375434</id><snippet>doc.Tables.Count
</snippet></ROW><ROW><id>10375434</id><snippet>table = doc.Tables(1)
</snippet></ROW><ROW><id>10375434</id><snippet>table.Cell(Row = 1, Column= 1)
</snippet></ROW><ROW><id>10375434</id><snippet>table.Cell(Row =1, Column =1).Range.Text
</snippet></ROW><ROW><id>10375434</id><snippet>def Column_index(header_text):
for i in range(1 , table.Columns.Count+1):
    if table.Cell(Row = 1,Column = i).Range.Text == header_text:
        return i
</snippet></ROW><ROW><id>10375434</id><snippet>table.Cell(Row =1, Column = Column_index("The Column Header") ).Range.Text
</snippet></ROW><ROW><id>10375441</id><snippet>noOfCl</snippet></ROW><ROW><id>10375441</id><snippet>class New(Server):
    noOfCl = 0        

    def onConnect(self, socket):
        print "Client connected"
        New.noOfCl+=1
        print(New.noOfCl)
</snippet></ROW><ROW><id>10375441</id><snippet>print</snippet></ROW><ROW><id>10375458</id><snippet>PyExecute</snippet></ROW><ROW><id>10375458</id><snippet>PyInit</snippet></ROW><ROW><id>10375458</id><snippet>PyExecute</snippet></ROW><ROW><id>10375458</id><snippet>while True:</snippet></ROW><ROW><id>10375458</id><snippet>PyExecute</snippet></ROW><ROW><id>10375458</id><snippet>PyRun_SimpleString</snippet></ROW><ROW><id>10375458</id><snippet>while True:
    data = s.recv(4096)
    if data.find ( 'PING' ) != -1:
        s.send ( 'PONG ' + data.split() [ 1 ] + '\r\n' )
    if data.find ( 'You need to send your password. Try /quote PASS &lt;username&gt;:&lt;password&gt;' ) != -1:
        s.send ('PASS ' + zncauth + ' \r\n')
</snippet></ROW><ROW><id>10375458</id><snippet>PyExecute(
    "while True:\n"
    "  data = s.recv(4096)\n"
    "  if (data.find('PING') != -1:\n"
    "    s.send('PONG' + data.split()[1] + '\\r\\n')\n"
    ...)
</snippet></ROW><ROW><id>10375458</id><snippet>\n</snippet></ROW><ROW><id>10375458</id><snippet>"..."</snippet></ROW><ROW><id>10375979</id><snippet>import wx

#===================================================================================================
class UpperPanel(wx.Panel):
    def __init__(self, *args, **kwargs):
        wx.Panel.__init__(self, *args, **kwargs)
        self.combo = wx.ComboBox(self, choices=["0", "1", "2", "3", "4"], size=(200, -1))
        self.combo.Bind(wx.EVT_COMBOBOX, self.GetParent().middlePanel.Change)
        self.logo = wx.Button(self, size=(300, 100))

        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.combo, 0, wx.EXPAND)
        self.sizer.Add(self.logo, 0, wx.EXPAND)

        self.SetSizerAndFit(self.sizer)

#===================================================================================================
class MiddlePanel(wx.Panel):
    def __init__(self, *args, **kwargs):
        wx.Panel.__init__(self, *args, **kwargs)
        self.subs = []
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.SetSizerAndFit(self.sizer)


    def Change(self, e):
        self.sizer = wx.BoxSizer(wx.VERTICAL)

        for a in self.subs:
            a.Destroy()

        self.subs = []

        for a in range(int(e.GetString())):
            b = wx.Button(self, size=(-1, 50))
            self.subs.append(b)
            self.sizer.Add(b, 1, wx.EXPAND)

        self.SetSizerAndFit(self.sizer)
        self.GetParent().Fit()

#===================================================================================================
class MainWin(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)

        self.middlePanel = MiddlePanel(self)
        self.upperPanel = UpperPanel(self)
        self.textArea = wx.TextCtrl(self, size=(-1, 300), style=wx.TE_MULTILINE)

        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.upperPanel, 0, wx.EXPAND)
        self.sizer.Add(self.middlePanel, 0, wx.EXPAND)
        self.sizer.Add(self.textArea, 1, wx.EXPAND)

        self.SetSizerAndFit(self.sizer)

#===================================================================================================
if __name__ == '__main__':
    app = wx.PySimpleApp()
    main_win = MainWin()
    main_win.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>10376063</id><snippet>data</snippet></ROW><ROW><id>10376063</id><snippet>data={"BE1234":"abc", "BA3212":"efg", etc}
context = {'data': data}
</snippet></ROW><ROW><id>10376268</id><snippet>self._tkcanvas.create_image(int(w/2), int(h/2), image=self._tkphoto)
</snippet></ROW><ROW><id>10376268</id><snippet>matplotlib</snippet></ROW><ROW><id>10376268</id><snippet>__init__</snippet></ROW><ROW><id>10376268</id><snippet>resize</snippet></ROW><ROW><id>10376268</id><snippet>resize</snippet></ROW><ROW><id>10376268</id><snippet># copy of /usr/lib/pymodules/python2.7/matplotlib/backends/backend_tkagg.py
# with fix:
class FigureCanvasTkAggFix(FigureCanvasTkAgg):
  def __init__(self, figure, master=None, resize_callback=None):
    matplotlib.backends.backend_tkagg.FigureCanvasAgg.__init__(self, figure)
    self._idle = True
    t1,t2,w,h = self.figure.bbox.bounds
    w, h = int(w), int(h)
    self._tkcanvas = tk.Canvas(
      master=master, width=w, height=h, borderwidth=4)
    self._tkphoto = tk.PhotoImage(
      master=self._tkcanvas, width=w, height=h)
    self._tkcanvas.create_image(int(w/2), int(h/2), image=self._tkphoto) # fix
    self._resize_callback = resize_callback
    self._tkcanvas.bind("&lt;Configure&gt;", self.resize)
    self._tkcanvas.bind("&lt;Key&gt;", self.key_press)
    self._tkcanvas.bind("&lt;Motion&gt;", self.motion_notify_event)
    self._tkcanvas.bind("&lt;KeyRelease&gt;", self.key_release)
    for name in "&lt;Button-1&gt;", "&lt;Button-2&gt;", "&lt;Button-3&gt;":
      self._tkcanvas.bind(name, self.button_press_event)
    for name in "&lt;ButtonRelease-1&gt;", "&lt;ButtonRelease-2&gt;", "&lt;ButtonRelease-3&gt;":
      self._tkcanvas.bind(name, self.button_release_event)
    for name in "&lt;Button-4&gt;", "&lt;Button-5&gt;":
      self._tkcanvas.bind(name, self.scroll_event)
    root = self._tkcanvas.winfo_toplevel()
    root.bind("&lt;MouseWheel&gt;", self.scroll_event_windows)
    self._master = master
    self._tkcanvas.focus_set()
    self.sourced = dict()
    def on_idle(*ignore):
      self.idle_event()
      return True
  def resize(self, event):
    width, height = event.width, event.height
    printse("WH", width, height, "\n")
    if self._resize_callback is not None:
      self._resize_callback(event)
    # compute desired figure size in inches
    dpival = self.figure.dpi
    winch = width/dpival
    hinch = height/dpival
    self.figure.set_size_inches(winch, hinch)
    self._tkcanvas.delete(self._tkphoto)
    self._tkphoto = tk.PhotoImage(
      master=self._tkcanvas, width=width, height=height)
    self._tkcanvas.create_image(width/2,height/2,image=self._tkphoto)
    self.resize_event()
    self.show()
</snippet></ROW><ROW><id>10376468</id><snippet>def euler(h, t, y, f):
    return (y + h*v for y,v in zip(y,f(t,y)))

def f1(t,status):
    x, = status
    return -2*t*x,

def f2(t,status):
    x, y = status
    return x - t*y, y + x/t


print list(euler(0.01, 1, (1,2), f2))
print list(euler(0.01, 1, (1,), f1))
</snippet></ROW><ROW><id>10376519</id><snippet>*</snippet></ROW><ROW><id>10376519</id><snippet>tester(*returner())
</snippet></ROW><ROW><id>10376519</id><snippet>&gt;&gt;&gt; def test():
...    return 1,2,3
... 
&gt;&gt;&gt; def test2(arg1, arg2, arg3):
...    print(arg1, arg2, arg3)
... 
&gt;&gt;&gt; test2(*test())
1 2 3
</snippet></ROW><ROW><id>10376655</id><snippet>__</snippet></ROW><ROW><id>10376655</id><snippet>__repr__()</snippet></ROW><ROW><id>10376655</id><snippet>class A(object):
    def __repr__(self):
        return self._repr()
   def _repr(self):
        return object.__repr__(self)
</snippet></ROW><ROW><id>10376655</id><snippet>__repr__()</snippet></ROW><ROW><id>10376655</id><snippet>_repr()</snippet></ROW><ROW><id>10377148</id><snippet>&amp;</snippet></ROW><ROW><id>10377148</id><snippet>and</snippet></ROW><ROW><id>10377148</id><snippet>|</snippet></ROW><ROW><id>10377148</id><snippet>or</snippet></ROW><ROW><id>10377148</id><snippet>area1 = N.where(((A&gt;0) &amp; (A&lt;10)) | ((A&gt;40) &amp; (A&lt;60))),1,0)
</snippet></ROW><ROW><id>10377179</id><snippet>
  from chardet import detect
  encoding = lambda x: detect(x)['encoding']
  print encoding(line)
</snippet></ROW><ROW><id>10377179</id><snippet>
  n_line=unicode(line,encoding(line),errors='ignore')
  print n_line
  print n_line.encode('utf8')
</snippet></ROW><ROW><id>10377256</id><snippet>.pem</snippet></ROW><ROW><id>10377256</id><snippet>.pem</snippet></ROW><ROW><id>10377256</id><snippet>openssl rsa ...</snippet></ROW><ROW><id>10377256</id><snippet>.pem</snippet></ROW><ROW><id>10377256</id><snippet>.pem</snippet></ROW><ROW><id>10377795</id><snippet>prefixed</snippet></ROW><ROW><id>10377795</id><snippet>prefixed = Group(Word("okay").setResultsName("base") + the_list)
</snippet></ROW><ROW><id>10377863</id><snippet>make alt-install</snippet></ROW><ROW><id>10377863</id><snippet>python3.1</snippet></ROW><ROW><id>10377863</id><snippet>python</snippet></ROW><ROW><id>10377863</id><snippet>easy_install-2.7</snippet></ROW><ROW><id>10377863</id><snippet>python3.1</snippet></ROW><ROW><id>10377863</id><snippet>easy_install-3.1</snippet></ROW><ROW><id>10377863</id><snippet>easy_install</snippet></ROW><ROW><id>10377910</id><snippet>partialdft</snippet></ROW><ROW><id>10377910</id><snippet>x</snippet></ROW><ROW><id>10377910</id><snippet>x</snippet></ROW><ROW><id>10377910</id><snippet>&gt;&gt;&gt; x[0:10]
[0.0, 0.62666616782152129, 1.243449435824274, 1.8406227634233896, 2.4087683705085765, 2.9389262614623659, 3.4227355296434436, 3.852566213878946, 4.2216396275100756, 4.5241352623300983]
</snippet></ROW><ROW><id>10377910</id><snippet>x</snippet></ROW><ROW><id>10377910</id><snippet>&gt;&gt;&gt; partialdft(x, 0.01, y)
0.051462873158853464
&gt;&gt;&gt; x[0:10]
[0.0, -2.8072359998573911e-13, 1.114040042207106e-12, -2.4744131119314365e-12, 4.316161702819329e-12, -6.5865746141630883e-12, 9.202604511389696e-12, -1.2082375495190468e-11, 1.5129125329320302e-11, -8.1617793532956823e-23]
</snippet></ROW><ROW><id>10377910</id><snippet>x</snippet></ROW><ROW><id>10377910</id><snippet>def partialdft(d,step,w):
    i = 0
    x = d[:]
    #...
</snippet></ROW><ROW><id>10378012</id><snippet>for i in os.listdir(os.getcwd()):
    if i.endswith(".asm") or i.endswith(".py"): 
        ##print i
        continue
    else:
        continue
</snippet></ROW><ROW><id>10378495</id><snippet>RequestContext</snippet></ROW><ROW><id>10378495</id><snippet>render</snippet></ROW><ROW><id>10378495</id><snippet>django.core.context_processors.request</snippet></ROW><ROW><id>10378531</id><snippet>any(('damon' in v) for v in yourDict.values() if isinstance(v,str))
</snippet></ROW><ROW><id>10378531</id><snippet>any((isinstance(v,str) and 'damon' in v) for v in yourDict.values())
</snippet></ROW><ROW><id>10378683</id><snippet>get_support()</snippet></ROW><ROW><id>10378683</id><snippet>ch2</snippet></ROW><ROW><id>10378683</id><snippet>k = 100</snippet></ROW><ROW><id>10378683</id><snippet>get_support()</snippet></ROW><ROW><id>10378683</id><snippet>X_train</snippet></ROW><ROW><id>10378683</id><snippet>SelectKBest</snippet></ROW><ROW><id>10378683</id><snippet>SelectKBest</snippet></ROW><ROW><id>10378703</id><snippet>from django.contrib.sitemaps import Sitemap, FlatPageSitemap

sitemaps = {
  'site': Sitemap,
  'flatpages': FlatPageSitemap,
}

# ..
# Some url patterns. urlpatterns must be defined by now
# ..

urlpatterns += patterns("",
  url(r'^sitemap\.xml$', 
      'django.contrib.sitemaps.views.sitemap', 
      {'sitemaps': sitemaps}
  ),
)
</snippet></ROW><ROW><id>10378766</id><snippet>import os
os.system('I:/dosefile.exe')
</snippet></ROW><ROW><id>10378767</id><snippet>execute</snippet></ROW><ROW><id>10378767</id><snippet>cursor1 = conn.cursor()
cursor2 = conn.cursor()
cursor1.execute("select * FROM spam")
cursor2.execute("select * FROM eggs")
cursor1.fetchone() #first result from query 1
cursor2.fetchone() #first result from query 2
</snippet></ROW><ROW><id>10379213</id><snippet>img=mpimg.imread('MARBLES.TIF ')
imgplot = plt.imshow(img)
</snippet></ROW><ROW><id>10379213</id><snippet>imgplot2 = plt.imshow(band3Array)
plt.show()
</snippet></ROW><ROW><id>10379434</id><snippet>p.assignees.remove(c)
</snippet></ROW><ROW><id>10379434</id><snippet>c</snippet></ROW><ROW><id>10379434</id><snippet>p.assignees</snippet></ROW><ROW><id>10379434</id><snippet>c</snippet></ROW><ROW><id>10379656</id><snippet>a = zeros([20,1,6])
</snippet></ROW><ROW><id>10379656</id><snippet>a = zeros([20,6,1])
</snippet></ROW><ROW><id>10379656</id><snippet>a = cv.CreateMat(20,1,cv.MAKETYPE(cv.CV_32F,6))
</snippet></ROW><ROW><id>10379656</id><snippet>a = cv.CreateMat(20, 6, cv.CV_32F)
</snippet></ROW><ROW><id>10379985</id><snippet>&lt;None&gt;</snippet></ROW><ROW><id>10379985</id><snippet>doc.name = "test"
print(doc)
</snippet></ROW><ROW><id>10379985</id><snippet>&lt;test&gt;</snippet></ROW><ROW><id>10379985</id><snippet>parse</snippet></ROW><ROW><id>10379985</id><snippet>print(doc.toxml())</snippet></ROW><ROW><id>10380021</id><snippet>'1'</snippet></ROW><ROW><id>10380021</id><snippet>1</snippet></ROW><ROW><id>10380021</id><snippet>'1'</snippet></ROW><ROW><id>10380165</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; [
...    ' '.join(items)
...    for _, items in itertools.groupby('DEL MONTE Alfredo'.split(), str.isupper)
... ]
['DEL MONTE', 'Alfredo']
</snippet></ROW><ROW><id>10380168</id><snippet>__init__</snippet></ROW><ROW><id>10380168</id><snippet>def __init__(self, default_factory, *args, **kwargs):
    super().__init__(*args, **kwargs)
    self.default_factory = default_factory
</snippet></ROW><ROW><id>10380168</id><snippet>__setitem__</snippet></ROW><ROW><id>10380168</id><snippet>key</snippet></ROW><ROW><id>10380168</id><snippet>range</snippet></ROW><ROW><id>10380168</id><snippet>super().__setitem__</snippet></ROW><ROW><id>10380168</id><snippet>.append</snippet></ROW><ROW><id>10380168</id><snippet>def __setitem__(self, key, value):
    try:
        super().__setitem__(key, value)
    except IndexError:
        for i in range(len(self), key):
            self.append(self.default_factory())
        self.append(value)
</snippet></ROW><ROW><id>10380385</id><snippet>xcel</snippet></ROW><ROW><id>10380385</id><snippet>j</snippet></ROW><ROW><id>10380385</id><snippet>i</snippet></ROW><ROW><id>10380385</id><snippet>xcel[i][j]   # not xcel[i[j]]!
</snippet></ROW><ROW><id>10380385</id><snippet>j</snippet></ROW><ROW><id>10380385</id><snippet>i</snippet></ROW><ROW><id>10380385</id><snippet>velocities</snippet></ROW><ROW><id>10380385</id><snippet>positions</snippet></ROW><ROW><id>10380431</id><snippet>pexpect.wait()</snippet></ROW><ROW><id>10380562</id><snippet>for line in open('links.txt', 'rU'):
</snippet></ROW><ROW><id>10381488</id><snippet>cursor = collection.find().where( "this.a % 4 &gt;= 2" );
</snippet></ROW><ROW><id>10382040</id><snippet>AttributeError</snippet></ROW><ROW><id>10382040</id><snippet>def test</snippet></ROW><ROW><id>10382040</id><snippet>test</snippet></ROW><ROW><id>10382040</id><snippet>class SomeObject(object):

    def get_test(self):
        return "some value"

    def set_test(self, value):
        print(value)

    test = property(get_test)
    test = test.setter(set_test)
    # OR
    test = property(get_test, set_test)
</snippet></ROW><ROW><id>10382548</id><snippet>preparse</snippet></ROW><ROW><id>10382548</id><snippet>sage: preparse('a = 1')
'a = Integer(1)'
sage: preparse('2^40')
'Integer(2)**Integer(40)'
sage: preparse('F.&lt;x&gt; = PolynomialRing(ZZ)')
"F = PolynomialRing(ZZ, names=('x',)); (x,) = F._first_ngens(1)"
</snippet></ROW><ROW><id>10382548</id><snippet>Integer</snippet></ROW><ROW><id>10382548</id><snippet>int</snippet></ROW><ROW><id>10382548</id><snippet>[a..b]</snippet></ROW><ROW><id>10383624</id><snippet>lol.py</snippet></ROW><ROW><id>10383624</id><snippet>"http://lol.com/my</snippet></ROW><ROW><id>10383624</id><snippet>project/"</snippet></ROW><ROW><id>10383624</id><snippet>./lol.py "$(if [ -n "$URL" ]; then echo -u "$URL"; fi)"
</snippet></ROW><ROW><id>10383624</id><snippet>$()</snippet></ROW><ROW><id>10383793</id><snippet>__setattr__</snippet></ROW><ROW><id>10383793</id><snippet>&gt;&gt;&gt; class Meta(type):
    def __new__(meta, name, bases, dict):
        def _check(self, attr, value):
            if attr in self.defaults:
                if not isinstance(value, self.defaults[attr]):
                    raise TypeError('%s cannot be %s' % (attr, type(value)))
            else:                        
                self.defaults[attr] = type(value)

        def _setattr(self, attr, value):
            _check(self, attr, value)
            object.__setattr__(self, attr, value)

        cls = type.__new__(meta, name, bases, dict)
        # Set up default type for every attribute
        cls.defaults = {name: type(value) for name, value in dict.items()}
        cls.__setattr__ = _setattr
        return cls


&gt;&gt;&gt; class Image(object):
    __metaclass__ = Meta
    height = 0
    width = 0
    path = '/tmp'
    size = 0


&gt;&gt;&gt; i = Image()
&gt;&gt;&gt; i.height = 240
&gt;&gt;&gt; i.height
240
&gt;&gt;&gt; i.size
0
&gt;&gt;&gt; i.size = 7
&gt;&gt;&gt; i.size
7
&gt;&gt;&gt; i.path = '/tmp/subdir'
&gt;&gt;&gt; i.path
'/tmp/subdir'
&gt;&gt;&gt; i.path = 23
TypeError: path cannot be &lt;type 'int'&gt;
</snippet></ROW><ROW><id>10383793</id><snippet>class MetaBase(object):
    def _check(self, attr, value):
        if attr in self.defaults:
            if not isinstance(value, self.defaults[attr]):
                raise TypeError('%s cannot be %s' % (attr, type(value)))
        else:
            self.defaults[attr] = type(value)
    def __setattr__(self, attr, value):
        self._check(attr, value)
        super(MetaBase, self).__setattr__(attr, value)

class Meta(type):
    def __new__(meta, name, bases, dict):
        cls = type.__new__(meta, name, (MetaBase,) + bases, dict)
        cls.defaults = {name: type(value) for name, value in dict.items()}
        return cls

class Image(object):
    __metaclass__ = Meta
    height = 0
    width = 0
    path = '/tmp'
    size = 0
</snippet></ROW><ROW><id>10383808</id><snippet>&gt;&gt;&gt; def encode(num):
        import string
        ALPHABET = string.digits + string.ascii_uppercase
        tmp = []
        while num:
            num, rem = divmod(num, len(ALPHABET))
            tmp.append(ALPHABET[rem])
        return ''.join(reversed(tmp))

&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; the_hash = hashlib.md5('test').hexdigest()
&gt;&gt;&gt; decimal_representation = int(the_hash, 16)
&gt;&gt;&gt; encoded = encode(decimal_representation)
&gt;&gt;&gt; the_hash
'098f6bcd4621d373cade4e832627b4f6'
&gt;&gt;&gt; decimal_representation
12707736894140473154801792860916528374L
&gt;&gt;&gt; encoded
'KDISMNX5MOYU6Q6PZT8TQDPY'
&gt;&gt;&gt; decimal_representation == int(encoded, 36)
True
&gt;&gt;&gt; hex(int(encoded, 36))
'0x98f6bcd4621d373cade4e832627b4f6L'
</snippet></ROW><ROW><id>10383836</id><snippet>config.add_route('home','/')
config.add_route('home1','home/')
</snippet></ROW><ROW><id>10383836</id><snippet>config.add_view(yourview, route_name='home')
config.add_view(yourview, route_name='home1')
</snippet></ROW><ROW><id>10383836</id><snippet>@view_config</snippet></ROW><ROW><id>10383836</id><snippet>@view_config(route_name='home')
@view_config(route_name='home1') 
def your_method(request):
   ..... 
</snippet></ROW><ROW><id>10383949</id><snippet>set</snippet></ROW><ROW><id>10383949</id><snippet>dict</snippet></ROW><ROW><id>10383949</id><snippet>d[item1] = item1
d[item2] = item2
</snippet></ROW><ROW><id>10383949</id><snippet>item1</snippet></ROW><ROW><id>10383949</id><snippet>d</snippet></ROW><ROW><id>10383949</id><snippet>item1</snippet></ROW><ROW><id>10384041</id><snippet>SIGINT</snippet></ROW><ROW><id>10384041</id><snippet>try:
    do_stuff()
except KeyboardInterrupt:
    pass
</snippet></ROW><ROW><id>10384222</id><snippet>import html5lib
from html5lib import treebuilders
parser = html5lib.HTMLParser(tree=treebuilders.getTreeBuilder("simpleTree"))
with open('test.html') as test:
    doc = parser.parse(test)
    for child in doc:
        if child.parent.name == "body":
            return child.toxml()
</snippet></ROW><ROW><id>10384222</id><snippet>replace()</snippet></ROW><ROW><id>10384367</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>10384367</id><snippet>first_name= 'Matthew'</snippet></ROW><ROW><id>10384367</id><snippet>last_name = 'Walsh'

first_name_re = "".join('(%s|%s)' % (re.escape(c.upper()),re.escape(c.lower())) for c in first_name)
last_name_re = "".join('(%s|%s)' % (re.escape(c.upper()),re.escape(c.lower())) for c in last_name)


# now that they are safe -we can simply put them in the middle of the regex
middle_name_regex_str = "\b?((%s (?P&lt;middle_name1&gt;[A-Z][^ ]?[a-z]* )?%s)|(%s (?P&lt;middle_name2&gt;[A-Z][^ ]?[a-z]* )?%s))" % (first_name_re, last_name_re, first_name_re, last_name_re) 
</snippet></ROW><ROW><id>10384785</id><snippet>1 / array</snippet></ROW><ROW><id>10384785</id><snippet>array([1, 0, 0, 0])</snippet></ROW><ROW><id>10384785</id><snippet>1. / array</snippet></ROW><ROW><id>10384785</id><snippet>&gt;&gt;&gt; array = np.array([1, 2, 3, 4])
&gt;&gt;&gt; 1. / array
array([ 1.        ,  0.5       ,  0.33333333,  0.25      ])
</snippet></ROW><ROW><id>10385158</id><snippet>from PIL import Image

source = Image.open("source.jpg")
colors = source.getcolors(source.size[0] * source.size[1]) #maxcolor value =256, get   all colors with source.size[0] * source.size[1]
pixels = []
for i, color in colors:
    pixels.extend(i * [color])
pixels.sort()
new = Image.new('RGB', source.size)
new.putdata(pixels) 
new.save("new.png")
</snippet></ROW><ROW><id>10385471</id><snippet>https://github.com/kennethreitz/osx-gcc-installer
</snippet></ROW><ROW><id>10385520</id><snippet>translate</snippet></ROW><ROW><id>10385520</id><snippet>translate</snippet></ROW><ROW><id>10385520</id><snippet>translate</snippet></ROW><ROW><id>10385765</id><snippet>SOMETHING := [something_placeholder]</snippet></ROW><ROW><id>10385765</id><snippet>make</snippet></ROW><ROW><id>10385786</id><snippet>a</snippet></ROW><ROW><id>10385786</id><snippet>a</snippet></ROW><ROW><id>10385786</id><snippet>&gt;&gt;&gt; index_dict = dict((value, idx) for idx,value in enumerate(a))
&gt;&gt;&gt; [index_dict[x] for x in b]
[0, 2, 0]
</snippet></ROW><ROW><id>10385786</id><snippet>a.index</snippet></ROW><ROW><id>10385996</id><snippet>str.count()</snippet></ROW><ROW><id>10385996</id><snippet>&gt;&gt;&gt; "test".count("t")
2
</snippet></ROW><ROW><id>10385996</id><snippet>string.count()</snippet></ROW><ROW><id>10385996</id><snippet>str.count()</snippet></ROW><ROW><id>10385996</id><snippet>string.count()</snippet></ROW><ROW><id>10385996</id><snippet>string</snippet></ROW><ROW><id>10385996</id><snippet>&gt;&gt;&gt; "test".count("t")
2
&gt;&gt;&gt; import string
&gt;&gt;&gt; string.count("test", "t")
2
</snippet></ROW><ROW><id>10386227</id><snippet>&gt;&gt;&gt; class Test(object): pass
&gt;&gt;&gt; t = Test()
&gt;&gt;&gt; type(t) is t.__class__
True
&gt;&gt;&gt; type(t)
__main__.Test
</snippet></ROW><ROW><id>10386227</id><snippet>self.__class__</snippet></ROW><ROW><id>10386227</id><snippet>type(t)</snippet></ROW><ROW><id>10386227</id><snippet>instance</snippet></ROW><ROW><id>10386227</id><snippet>&gt;&gt;&gt; class Test(): pass
&gt;&gt;&gt; t = Test()
&gt;&gt;&gt; type(t) is t.__class__
False
&gt;&gt;&gt; type(t)
instance
</snippet></ROW><ROW><id>10386420</id><snippet>sudo</snippet></ROW><ROW><id>10386420</id><snippet>import os
cpstr = 'echo %(pass)s | sudo -S cp "%(from)s" "%(to)s"'
os.system(cpstr % {'pass':'userpassword', 'from':'./build/bin/myapp', 'to':'/bin/myapp'})
</snippet></ROW><ROW><id>10386665</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; l = [('a',1),('b',2),('a',2)]
&gt;&gt;&gt; collapsed_l = defaultdict(list)     
&gt;&gt;&gt; for letter,num in l:
        collapsed_l[letter].append(num)


&gt;&gt;&gt; collapsed_l
defaultdict(&lt;type 'list'&gt;, {'a': [1, 2], 'b': [2]})
</snippet></ROW><ROW><id>10386902</id><snippet>**</snippet></ROW><ROW><id>10386902</id><snippet>user_fields = {"name", "pwd"}
jsondict= {"name":"value","pwd":"pwdvalue","email":"email@gmail.com"}
userdict = {key: value for (key, value) in jsondict.items() if key in user_fields}
u = users(**userdict)
</snippet></ROW><ROW><id>10386902</id><snippet>user_fields</snippet></ROW></DATA>