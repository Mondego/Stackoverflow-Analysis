<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>15818171</id><snippet>check_output</snippet></ROW><ROW><id>15818171</id><snippet>In [3]: import subprocess

In [4]: subprocess.check_output("ip link show wlan0 | grep link | awk '{print $2}'",shell=True).strip()
Out[4]: '48:5d:60:80:e5:5f'
</snippet></ROW><ROW><id>15818171</id><snippet>ip link show</snippet></ROW><ROW><id>15818679</id><snippet>set_contents_from_filename</snippet></ROW><ROW><id>15818679</id><snippet>Content-MD5</snippet></ROW><ROW><id>15818679</id><snippet>ETag</snippet></ROW><ROW><id>15818769</id><snippet>multiply</snippet></ROW><ROW><id>15818769</id><snippet>product.config</snippet></ROW><ROW><id>15818769</id><snippet>DoubleVar</snippet></ROW><ROW><id>15818769</id><snippet>product.set</snippet></ROW><ROW><id>15818769</id><snippet>&lt;KeyRelease&gt;</snippet></ROW><ROW><id>15818769</id><snippet>&lt;KeyPress&gt;</snippet></ROW><ROW><id>15818769</id><snippet>Product</snippet></ROW><ROW><id>15818769</id><snippet>&lt;KeyRelease&gt;</snippet></ROW><ROW><id>15818769</id><snippet>&lt;KeyPress&gt;</snippet></ROW><ROW><id>15818769</id><snippet>&lt;&lt;ComboboxSelected&gt;&gt;</snippet></ROW><ROW><id>15818769</id><snippet>&lt;&lt;Clear&gt;&gt;</snippet></ROW><ROW><id>15818769</id><snippet>&lt;&lt;Cut&gt;&gt;</snippet></ROW><ROW><id>15818769</id><snippet>&lt;&lt;Paste&gt;&gt;</snippet></ROW><ROW><id>15818769</id><snippet>StringVar</snippet></ROW><ROW><id>15818769</id><snippet>Combobox</snippet></ROW><ROW><id>15818769</id><snippet>bind</snippet></ROW><ROW><id>15818769</id><snippet>Num_One.trace("w", multiply)
Num_Two.trace("w", multiply)
</snippet></ROW><ROW><id>15818795</id><snippet>urlopen</snippet></ROW><ROW><id>15819142</id><snippet>dic2</snippet></ROW><ROW><id>15819142</id><snippet>dic1</snippet></ROW><ROW><id>15819142</id><snippet>comunes = [x for x in dic1 if x in dic2]
</snippet></ROW><ROW><id>15819142</id><snippet>float</snippet></ROW><ROW><id>15819142</id><snippet>media2 = sum([dic2[x][1] for x in comunes]) / nComunes
</snippet></ROW><ROW><id>15819142</id><snippet>dic1</snippet></ROW><ROW><id>15819142</id><snippet>dic2</snippet></ROW><ROW><id>15819240</id><snippet>labels_true</snippet></ROW><ROW><id>15819240</id><snippet>make_blobs</snippet></ROW><ROW><id>15819240</id><snippet>X</snippet></ROW><ROW><id>15819459</id><snippet>setdefault</snippet></ROW><ROW><id>15819459</id><snippet>format_to_year_to_value_dict.setdefault(format_str, {})[year] = value
</snippet></ROW><ROW><id>15819459</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>15819459</id><snippet>format_to_year_to_value_dict = defaultdict(dict)
...
format_to_year_to_value_dict[format_str][year] = value
</snippet></ROW><ROW><id>15819459</id><snippet>def example(format_str, year, value):
  format_to_year_to_value_dict = {}

  format_to_year_to_value_dict.setdefault(format_str, {}).setdefault(year, []).append(value)
</snippet></ROW><ROW><id>15819459</id><snippet>def example(format_str, year, value):
  format_to_year_to_value_dict = defaultdict(lambda: defaultdict(list))

  format_to_year_to_value_dict[format_str][year].append(value)
</snippet></ROW><ROW><id>15819459</id><snippet>tree = lambda: defaultdict(tree)

my_tree = tree()
my_tree['a']['b']['c']['d']['e'] = 'whatever'
</snippet></ROW><ROW><id>15819610</id><snippet>rec_lsts = orgi_dict['records']
new_dict = {}
for l_list in rec_lsts:
    new_dict[l_lst[0]] = l_lst[1:]
</snippet></ROW><ROW><id>15819674</id><snippet>_</snippet></ROW><ROW><id>15819758</id><snippet>fp = webdriver.FirefoxProfile()

fp.set_preference("browser.download.folderList",2)
fp.set_preference("browser.download.manager.showWhenStarting",False)
fp.set_preference("browser.download.dir",getcwd())
fp.set_preference("browser.helperApps.neverAsk.saveToDisk","text/csv")

browser = webdriver.Firefox(firefox_profile=fp)
</snippet></ROW><ROW><id>15819789</id><snippet>get_or_create</snippet></ROW><ROW><id>15819789</id><snippet>get_or_create</snippet></ROW><ROW><id>15819789</id><snippet>new_tag = Tag.object.create(slug=tag)
TagStatus.objects.create(status=status, tag=new_tag, user=user)
</snippet></ROW><ROW><id>15819789</id><snippet>@login_required
def tags(request):
    all_tags = Tag.objects.all()
    context = base_context(request)
    if request.method == 'POST':
        if 'status_check' in request.POST:
            status = int(request.POST['select'])
            tag = request.POST['tag']
            user = request.user

            new_tag = Tag.object.create(slug=tag)
            TagStatus.objects.create(status=status, tag=new_tag, user=user)

            response = simplejson.dumps({"status": "Successfully changed status"})
        else:
            response = simplejson.dumps({"status": "Error"})
            return HttpResponse (response, mimetype='application/json')
    status_form = TagStatusForm()
    context['all_tags'] = all_tags
    return render_to_response('tags/tags.html', context, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>15820179</id><snippet>add()</snippet></ROW><ROW><id>15820179</id><snippet>seen = set()
for (value, fmt) in formats:
    l1 = len(seen)
    seen.add(fmt)
    if l1 != len(seen):
         process(value, fmt)
</snippet></ROW><ROW><id>15820179</id><snippet>in</snippet></ROW><ROW><id>15820179</id><snippet>len()</snippet></ROW><ROW><id>15820179</id><snippet>In [4]: seen = set(range(10000))

In [5]: %timeit 5995 in seen
10000000 loops, best of 3: 122 ns per loop

In [6]: %timeit len(seen)
1000000 loops, best of 3: 167 ns per loop
</snippet></ROW><ROW><id>15820332</id><snippet>import socket

if __name__ == "__main__":
    sock = socket.socket()
    sock.connect(("localhost", 50839))

    with open("data.bin", "rb") as fd:
        buf = fd.read(1024)
        while (buf):
            sock.send(buf)
            buf = fd.read(1024)
    sock.close()
</snippet></ROW><ROW><id>15820332</id><snippet>str</snippet></ROW><ROW><id>15820332</id><snippet>fd.read</snippet></ROW><ROW><id>15820332</id><snippet>python server.py &gt; data2.bin</snippet></ROW><ROW><id>15820332</id><snippet>import socket
import sys

if __name__ == "__main__":
    sock = socket.socket()
    sock.bind(("localhost", 50839))
    sock.listen(1)

    client, address = sock.accept()

    buf = client.recv(1024)
    while (buf):
        sys.stdout.write(buf)
        buf = client.recv(1024)

    client.close()
    sock.close()
</snippet></ROW><ROW><id>15820332</id><snippet>% md5 data.bin data2.bin      
MD5 (data.bin) = 8b3280072275badf3e53a6f7aae0b8be
MD5 (data2.bin) = 8b3280072275badf3e53a6f7aae0b8be
</snippet></ROW><ROW><id>15820383</id><snippet>Lock</snippet></ROW><ROW><id>15820383</id><snippet>RLock</snippet></ROW><ROW><id>15820383</id><snippet>Condition</snippet></ROW><ROW><id>15820383</id><snippet>Semaphore</snippet></ROW><ROW><id>15820383</id><snippet>BoundedSemaphore</snippet></ROW><ROW><id>15820383</id><snippet>with</snippet></ROW><ROW><id>15820383</id><snippet>if hasattr(x, '__exit__'):
    print('x is a context manager')

try:
    with x:
        pass
except AttributeError:
    pass
else:
    print('x is a context manager')
</snippet></ROW><ROW><id>15820383</id><snippet>help(open)</snippet></ROW><ROW><id>15820383</id><snippet>open</snippet></ROW><ROW><id>15820383</id><snippet>file</snippet></ROW><ROW><id>15820383</id><snippet>help</snippet></ROW><ROW><id>15820383</id><snippet>help</snippet></ROW><ROW><id>15820383</id><snippet>__exit__</snippet></ROW><ROW><id>15820383</id><snippet>with</snippet></ROW><ROW><id>15820383</id><snippet>AttributeError</snippet></ROW><ROW><id>15820383</id><snippet>__exit__</snippet></ROW><ROW><id>15820383</id><snippet>with</snippet></ROW><ROW><id>15820383</id><snippet>close</snippet></ROW><ROW><id>15820383</id><snippet>contextlib.closing</snippet></ROW><ROW><id>15820383</id><snippet>with closing(legacy_file_like_object):
</snippet></ROW><ROW><id>15820383</id><snippet>with closing(legacy_file_like_object_producer()) as f:
</snippet></ROW><ROW><id>15820383</id><snippet>contextlib</snippet></ROW><ROW><id>15820383</id><snippet>@contextmanager</snippet></ROW><ROW><id>15820383</id><snippet>nested</snippet></ROW><ROW><id>15820383</id><snippet>closing</snippet></ROW><ROW><id>15820383</id><snippet>@contextmanager</snippet></ROW><ROW><id>15820383</id><snippet>help('with')</snippet></ROW><ROW><id>15820383</id><snippet>with foo(bar) as baz, qux as quux:</snippet></ROW><ROW><id>15820383</id><snippet>foo(bar)</snippet></ROW><ROW><id>15820383</id><snippet>qux</snippet></ROW><ROW><id>15820630</id><snippet>def getHeader(filename):
     import csv
     headername = None
     charList = ['a', 'b', 'c', 'd', 'e', 'A', 'B', 'C', 'D', 'E', 'F']
     headercsv = open(filename, 'r', newline = '')
     headerreader = csv.reader(headercsv, delimiter = ',')
     for row in headerreader:
         if row[0][0] in charList:
              headername = row

     headercsv.close()
     return headername
</snippet></ROW><ROW><id>15820630</id><snippet>thisHeader = getHeader('csvfile.csv')
</snippet></ROW><ROW><id>15820864</id><snippet>def fib(n):
    cur = 1
    old = 1
    i = 1
    while (i &lt; n):
        cur, old, i = cur+old, cur, i+1
    return cur

for i in range(10):
    print(fib(i))
</snippet></ROW><ROW><id>15820864</id><snippet>def fib(n):
    old = 0
    cur = 1
    i = 1
    yield cur
    while (i &lt; n):
        cur, old, i = cur+old, cur, i+1
        yield cur

for f in fib(10):
    print(f)
</snippet></ROW><ROW><id>15820864</id><snippet>def memoize(func):
    memo = dict()
    def decorated(n):
        if n not in memo:
            memo[n] = func(n)
        return memo[n]

    return decorated

@memoize
def fib(n):
    #added for demonstration purposes only - not really needed
    global call_count
    call_count = call_count + 1
    #end demonstration purposes

    if n&lt;=1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

call_count = 0 #added for demonstration purposes only - not really needed
for i in range(100):
    print(fib(i))
print(call_count) #prints 100
</snippet></ROW><ROW><id>15820864</id><snippet>fib</snippet></ROW><ROW><id>15820864</id><snippet>fib_n = int(input("Fib number?"))
fibs = [fib(i) for i in range(fib_n)]
print " ".join(fibs) 
</snippet></ROW><ROW><id>15820864</id><snippet>" "</snippet></ROW><ROW><id>15820864</id><snippet>"\n"</snippet></ROW><ROW><id>15820889</id><snippet>def findLine(prog, target):
   for l in range(0, len(prog)):  #range doesn't include last element.
      progX = prog[l].split()
      #you probably only want to check the first element in progX
      #since that's the one with the label
      if progX[0] == target:
          return l  #This is the one we want, return the index

      #Your code for comparison
      #for i in range(0, len(progX)):
      #   if progX[i] == target:
      #      a = progX[i]
</snippet></ROW><ROW><id>15820889</id><snippet>enumerate</snippet></ROW><ROW><id>15820889</id><snippet>def findLine(prog, target):
   for l,line in enumerate(prog):
      progX = line.split()
      if progX[0] == target:
          return l  #This is the one we want, return the index
</snippet></ROW><ROW><id>15820889</id><snippet>def findLine(prog,target):
    return next(i for i,line in enumerate(prog) if line.split()[0] == target)
</snippet></ROW><ROW><id>15820889</id><snippet>next</snippet></ROW><ROW><id>15821063</id><snippet>ijson</snippet></ROW><ROW><id>15821063</id><snippet>for prefix, event, value in parser:
    if event == 'map_key':
        print value
</snippet></ROW><ROW><id>15821159</id><snippet>os.getcwd</snippet></ROW><ROW><id>15821159</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getcwd()
'C:\\Program Files\\Python33'
</snippet></ROW><ROW><id>15821159</id><snippet>os.chdir</snippet></ROW><ROW><id>15821159</id><snippet>&gt;&gt;&gt; os.chdir('C:\\Users\\poke\\Desktop\\')
&gt;&gt;&gt; os.getcwd()
'C:\\Users\\poke\\Desktop'
&gt;&gt;&gt; with open('someFile.txt', 'w+') as f:
        f.write('This should be at C:\\Users\\poke\\Desktop\\someFile.txt now.')
</snippet></ROW><ROW><id>15821211</id><snippet>items</snippet></ROW><ROW><id>15821211</id><snippet>for item in fs_checkin_data['response']['checkins']['items']:
    venue = item['venue']
    print venue['canonicalUrl'], venue['name']
</snippet></ROW><ROW><id>15821211</id><snippet>checkins</snippet></ROW><ROW><id>15821211</id><snippet>items</snippet></ROW><ROW><id>15821211</id><snippet>count</snippet></ROW><ROW><id>15821211</id><snippet>checkins</snippet></ROW><ROW><id>15821211</id><snippet>item</snippet></ROW><ROW><id>15821211</id><snippet>'count'</snippet></ROW><ROW><id>15821211</id><snippet>'items'</snippet></ROW><ROW><id>15821211</id><snippet>items</snippet></ROW><ROW><id>15821316</id><snippet>os.path.join</snippet></ROW><ROW><id>15821316</id><snippet>\\</snippet></ROW><ROW><id>15821316</id><snippet>.replace</snippet></ROW><ROW><id>15821508</id><snippet>urllib</snippet></ROW><ROW><id>15821688</id><snippet>+</snippet></ROW><ROW><id>15821688</id><snippet>for seq in sequences:
    lower_output.append(re.findall("[a-z]+", seq)) # add substrings
</snippet></ROW><ROW><id>15821688</id><snippet>+</snippet></ROW><ROW><id>15821688</id><snippet>'[a-z]'</snippet></ROW><ROW><id>15821688</id><snippet>for seq in sequences:
    matches = re.finditer("[a-z]+", seq) # List of Match objects.
    lower_output.append([match.group(0) for match in matches]) # add substrings
    lower_indx.append([match.start(0) for match in matches]) # add indices

print lower_output
&gt;&gt;&gt; [['defgdefgdefg'], ['wowhello', 'onemore'], []]

print lower_indx
&gt;&gt;&gt; [[9], [9, 23], []]
</snippet></ROW><ROW><id>15822013</id><snippet>datetime.now().replace(second=0, microsecond=0)</snippet></ROW><ROW><id>15822066</id><snippet>fetchall</snippet></ROW><ROW><id>15822066</id><snippet>cin</snippet></ROW><ROW><id>15822084</id><snippet>if ' ' not in message:
    if len(message) &lt; 11:
        return elicitations[len(message)]
    else:
        return elicitations[11]
else:
    for pair in reflections:
        message = message.replace(*pair)
</snippet></ROW><ROW><id>15822084</id><snippet>r'\b{}\b'.format(oldword)</snippet></ROW><ROW><id>15822084</id><snippet>import re
for old, new in reflections:
    message = re.sub(r'\b{}\b'.format(old), new, message)
</snippet></ROW><ROW><id>15822526</id><snippet>In [94]: dic={'1': 2, '0': 0, '3': 4, '2': 4, '5': 1, '4': 1, '7': 0, '6': 0, '9': 0, '8': 0}

In [95]: {x:y for x,y in dic.items() if y!=0}
Out[95]: {'1': 2, '2': 4, '3': 4, '4': 1, '5': 1}
</snippet></ROW><ROW><id>15822590</id><snippet>xclip -o | sed 's/^./\U&amp;/g' | xclip -i
</snippet></ROW><ROW><id>15822612</id><snippet>for</snippet></ROW><ROW><id>15822612</id><snippet>fyle.seek(0)
</snippet></ROW><ROW><id>15822612</id><snippet>with open('filename.txt', 'r') as handle:
    lines = list(handle)
</snippet></ROW><ROW><id>15822612</id><snippet>if rows == 2:
    self.collisionLayer[rowcount][colcount] = False
else:
    self.collisionLayer[rowcount][colcount] = True
</snippet></ROW><ROW><id>15822612</id><snippet>self.collisionLayer[rowcount][colcount] = rows != 2
</snippet></ROW><ROW><id>15822706</id><snippet>with open('testfilefolder/wssnt10.txt') as f:
 file_contents = f.read().lower().split(' ') # split line on spaces to make a list
 filtered = fnmatch.filter(file_contents, 'th*')
</snippet></ROW><ROW><id>15822811</id><snippet>In [17]: df1 = pd.DataFrame(dict(A = range(10000)),index=pd.date_range('20130101',periods=10000,freq='s'))

In [18]: df1
Out[18]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 10000 entries, 2013-01-01 00:00:00 to 2013-01-01 02:46:39
Freq: S
Data columns (total 1 columns):
A    10000  non-null values
dtypes: int64(1)

In [19]: df4 = pd.DataFrame()

The concat

In [20]: %timeit pd.concat([df1,df2,df3])
1000 loops, best of 3: 270 us per loop

This is equavalent of your append

In [21]: %timeit pd.concat([df4,df1,df2,df3])
10 loops, best of 

 3: 56.8 ms per loop
</snippet></ROW><ROW><id>15822891</id><snippet>uic</snippet></ROW><ROW><id>15822891</id><snippet>pyuic4</snippet></ROW><ROW><id>15822891</id><snippet>.ui</snippet></ROW><ROW><id>15822891</id><snippet>pyuic4</snippet></ROW><ROW><id>15822891</id><snippet>pyuic4</snippet></ROW><ROW><id>15822999</id><snippet>palindrome_list.append(product)
</snippet></ROW><ROW><id>15822999</id><snippet>palindrome_list.append(int(product))
</snippet></ROW><ROW><id>15822999</id><snippet>palindromes()[-1]
=&gt; 906609
</snippet></ROW><ROW><id>15823095</id><snippet>id</snippet></ROW><ROW><id>15823095</id><snippet>von_location</snippet></ROW><ROW><id>15823095</id><snippet>id</snippet></ROW><ROW><id>15823095</id><snippet>Rating.objects.filter(von_location=1).order_by('-id')[0]
</snippet></ROW><ROW><id>15823104</id><snippet>import time
mytime = "09:00PM"
time.strptime(mytime, '%I:00%p')
time.struct_time(tm_year=1900, tm_mon=1, tm_mday=1, tm_hour=21, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=1, tm_isdst=-1)
</snippet></ROW><ROW><id>15823104</id><snippet>%p</snippet></ROW><ROW><id>15823104</id><snippet>'PM'</snippet></ROW><ROW><id>15823247</id><snippet>add_option</snippet></ROW><ROW><id>15823247</id><snippet>option_class</snippet></ROW><ROW><id>15823247</id><snippet>OptionParser</snippet></ROW><ROW><id>15823247</id><snippet>optparse.Option</snippet></ROW><ROW><id>15823247</id><snippet>MyOption.__init__</snippet></ROW><ROW><id>15823247</id><snippet>OptionParser.add_option</snippet></ROW><ROW><id>15823247</id><snippet>class MyOption(Option):
    def __init__(self, *args, **kwargs):
        if 'deft' in kwargs:
            newDef = kwargs.pop('deft')
        else:
            newDef = process_args_for_deft(args)
        if newDef is not None:
            kwargs["default"] = newDef

        Option.__init__(self, *args, **kwargs)
</snippet></ROW><ROW><id>15823247</id><snippet>parser.add_option("-f", "--file", dest="filename",
             help="write report to FILE", metavar="FILE", deft ="xyz")
</snippet></ROW><ROW><id>15823247</id><snippet>option_class</snippet></ROW><ROW><id>15823247</id><snippet>OptionParser</snippet></ROW><ROW><id>15823247</id><snippet>parser = MyOptionParser(option_class=MyOption)
</snippet></ROW><ROW><id>15823422</id><snippet>numpy</snippet></ROW><ROW><id>15823422</id><snippet>PIL</snippet></ROW><ROW><id>15823422</id><snippet>import numpy as np
import Image

dirname = '...'
[np.asarray(Image.open(os.path.join(dirname, fn))) for fn in os.listdir(dirname)]
</snippet></ROW><ROW><id>15823472</id><snippet>mainMask = ' '.join(('_' for i in range(len(secretWord))))
numMask = ' '.join((str(i) for i in range(len(secretWord))))
</snippet></ROW><ROW><id>15823472</id><snippet>mask = ' '.join(('_' for i in range(len(secretWord)))) + '\n' + ' '.join((str(i) for i in range(len(secretWord))))
</snippet></ROW><ROW><id>15823579</id><snippet>digit</snippet></ROW><ROW><id>15823579</id><snippet>integer</snippet></ROW><ROW><id>15823839</id><snippet>&gt;&gt;&gt; a=u'aaa'
&gt;&gt;&gt; a
u'aaa'
&gt;&gt;&gt; a.encode('ascii','ignore')
'aaa'
&gt;&gt;&gt; a.encode('utf8','ignore')
'aaa'
&gt;&gt;&gt; str(a)
'aaa'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15823857</id><snippet>f = open('fileToWrite.txt', 'w')
</snippet></ROW><ROW><id>15823857</id><snippet>f = open('fileToWrite.txt', 'a')
</snippet></ROW><ROW><id>15823857</id><snippet>with</snippet></ROW><ROW><id>15823900</id><snippet>paramiko</snippet></ROW><ROW><id>15823900</id><snippet>spur</snippet></ROW><ROW><id>15823900</id><snippet>paramiko</snippet></ROW><ROW><id>15823900</id><snippet>ssh</snippet></ROW><ROW><id>15823900</id><snippet>subprocess</snippet></ROW><ROW><id>15823900</id><snippet>os.system</snippet></ROW><ROW><id>15823900</id><snippet>os.system</snippet></ROW><ROW><id>15823900</id><snippet>stderr</snippet></ROW><ROW><id>15823900</id><snippet>os.system("ssh -qt hostname 'sudo yum list updates --security &gt; /tmp/yum_update_packagelist.txt';echo $?")
</snippet></ROW><ROW><id>15823900</id><snippet>ssh</snippet></ROW><ROW><id>15823900</id><snippet>echo $?</snippet></ROW><ROW><id>15823900</id><snippet>ssh</snippet></ROW><ROW><id>15823900</id><snippet>sudo</snippet></ROW><ROW><id>15823900</id><snippet>ssh</snippet></ROW><ROW><id>15823900</id><snippet>yum</snippet></ROW><ROW><id>15823900</id><snippet>sudo</snippet></ROW><ROW><id>15823900</id><snippet>os.system</snippet></ROW><ROW><id>15823900</id><snippet>stdout</snippet></ROW><ROW><id>15823900</id><snippet>echo</snippet></ROW><ROW><id>15823900</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>15823900</id><snippet>os.system</snippet></ROW><ROW><id>15823900</id><snippet>paramiko</snippet></ROW><ROW><id>15824004</id><snippet>list(SomeTable.objects.all())  # First db query.
list(SomeTable.objects.all())  # Second db query unrelated to first.
</snippet></ROW><ROW><id>15824004</id><snippet>connection.close()</snippet></ROW><ROW><id>15824004</id><snippet>start transaction</snippet></ROW><ROW><id>15824004</id><snippet>commit</snippet></ROW><ROW><id>15824004</id><snippet>rollback</snippet></ROW><ROW><id>15824016</id><snippet>class JsonWriterPipeline(object):
    def __init__(self):
        self.file = (open(filepath, 'a'))
    def process_item(self, item, spider):
        self.file.write(json.dumps(dict(item)) + '\n')
        return item
</snippet></ROW><ROW><id>15824297</id><snippet>{% block "content" %}</snippet></ROW><ROW><id>15824297</id><snippet>{% block content %}</snippet></ROW><ROW><id>15824297</id><snippet>marker</snippet></ROW><ROW><id>15824297</id><snippet>{% block content %}{% endblock %}</snippet></ROW><ROW><id>15824450</id><snippet>daemon</snippet></ROW><ROW><id>15824450</id><snippet>main.py</snippet></ROW><ROW><id>15824450</id><snippet>import</snippet></ROW><ROW><id>15824450</id><snippet>execfile</snippet></ROW><ROW><id>15824450</id><snippet>autorun.py</snippet></ROW><ROW><id>15824450</id><snippet>main.py</snippet></ROW><ROW><id>15824450</id><snippet>main.py</snippet></ROW><ROW><id>15824450</id><snippet>autorun</snippet></ROW><ROW><id>15824450</id><snippet>kill</snippet></ROW><ROW><id>15824450</id><snippet>daemon</snippet></ROW><ROW><id>15824450</id><snippet>SIGTERM</snippet></ROW><ROW><id>15824450</id><snippet>main.py</snippet></ROW><ROW><id>15824450</id><snippet>daemon</snippet></ROW><ROW><id>15824450</id><snippet>daemon</snippet></ROW><ROW><id>15824596</id><snippet>import numpy as np
nx=128; ny=128;
bxo=np.zeros((nx,ny),dtype=float)
bxo=something
bxf=open('Fbx.dat',mode='wb')
np.transpose(bxo).tofile(bxf) # We transpose the array to map indices 
                              # from python to fortran properly
bxo.close()
</snippet></ROW><ROW><id>15824596</id><snippet>  program test
  implicit none
  double precision, dimension(128,128) :: bx
  integer :: NNN, i, j
  inquire(iolength=NNN) bx
  open(unit=23,file='Fbx.dat',form='unformatted',status='old',&amp;
        access='direct',recl=NNN)
  read(23,rec=1) bx
  close(23)
  ! Write it out to a text file to test it
  ! by plotting in gnuplot
  do i=1,128; do j=1,128
     write(23,*) i,j,bx(i,j)
  enddo; enddo
  end
</snippet></ROW><ROW><id>15824731</id><snippet>0</snippet></ROW><ROW><id>15824731</id><snippet>0</snippet></ROW><ROW><id>15824731</id><snippet>&gt;&gt;&gt; theThing = []
&gt;&gt;&gt; theThing.append(12)
&gt;&gt;&gt; theThing
[12]
&gt;&gt;&gt; theThing[0] = 0
&gt;&gt;&gt; theThing
[0]
</snippet></ROW><ROW><id>15824731</id><snippet>&gt; x
[]
&gt; x[3] = 5
5
&gt; x
[undefined × 3, 5]
</snippet></ROW><ROW><id>15824803</id><snippet>decimal.ROUND_HALF_UP</snippet></ROW><ROW><id>15824803</id><snippet>quantize</snippet></ROW><ROW><id>15824803</id><snippet>&gt;&gt;&gt; for x in ('3.605', '29342398479823.605', '3.604', '3.606'):
    print x, repr(Decimal(x).quantize(Decimal('.01'), decimal.ROUND_HALF_UP))

3.605 Decimal('3.61')
29342398479823.605 Decimal('29342398479823.61')
3.604 Decimal('3.60')
3.606 Decimal('3.61')
</snippet></ROW><ROW><id>15824896</id><snippet>index</snippet></ROW><ROW><id>15824896</id><snippet>DnaID</snippet></ROW><ROW><id>15824896</id><snippet>index = 0
DnaID=1
for char in my_DNA:             
    #... rest of loop here
</snippet></ROW><ROW><id>15824896</id><snippet>ATGA 1
TGAT 2
GATA 3
ATAT 4
TATA 5
ATAT 6
TATC 6
ATCT 7
TCTA 8
CTAT 9
TATC 10
ATCA 10
TCAT 11
CAT 12
AT 13
T 14
</snippet></ROW><ROW><id>15824896</id><snippet>for i in range(len(my_DNA)-3):
    #... rest of loop here
</snippet></ROW><ROW><id>15824896</id><snippet>ATGA 1
TGAT 2
GATA 3
ATAT 4
TATA 5
ATAT 6
TATC 6
ATCT 7
TCTA 8
CTAT 9
TATC 10
ATCA 10
TCAT 11
</snippet></ROW><ROW><id>15825033</id><snippet>extent</snippet></ROW><ROW><id>15825033</id><snippet>ax = gca()
ax.imshow(rand(15,15), extent=[0, .5, 0, .5])
ax.imshow(rand(15,15), extent=[.5, 1,  .5, 1])

ax.set_xlim([0, 1])
ax.set_ylim([0, 1])

plt.draw()
</snippet></ROW><ROW><id>15825084</id><snippet>./</snippet></ROW><ROW><id>15825084</id><snippet>pydc [PATH TO PYC FILE]</snippet></ROW><ROW><id>15825084</id><snippet>[PATH to PYC FILE]</snippet></ROW><ROW><id>15825084</id><snippet>example.py</snippet></ROW><ROW><id>15825084</id><snippet>C:\Users\Bobby\example.py</snippet></ROW><ROW><id>15825084</id><snippet>python pycdc C:\Users\Bobby\example.py
</snippet></ROW><ROW><id>15825173</id><snippet>wait.until(EC.element_to_be_clickable((By.ID, 'main_buttonMissionTextNext')))
while EC.element_to_be_clickable((By.ID,'main_buttonMissionTextNext')):
    driver.find_element_by_id("main_buttonMissionTextNext").click()
    if not driver.find_element_by_id("main_buttonMissionTextNext").click().is_enabled():
        break
    wait.until(EC.element_to_be_clickable((By.ID, 'main_buttonMissionTextNext')))
</snippet></ROW><ROW><id>15825173</id><snippet>is_enabled()</snippet></ROW><ROW><id>15825193</id><snippet>friends_hometown</snippet></ROW><ROW><id>15825193</id><snippet>friends = graph.get_connections("me", "friends", fields="hometown")
</snippet></ROW><ROW><id>15825193</id><snippet>friends</snippet></ROW><ROW><id>15825193</id><snippet>data</snippet></ROW><ROW><id>15825193</id><snippet>paging</snippet></ROW><ROW><id>15825193</id><snippet>for fr in friends['data']:
    if 'hometown' in fr:
    print fr['id'] + ' ' + fr['hometown']['name']
</snippet></ROW><ROW><id>15825494</id><snippet>class Location(models.Model):
    locationname = models.CharField(max_length=100)

    def __unicode__(self):
        return self.locationname

    def latest(self):
        return Rating.objects.values('rating').filter(von_location=self).order_by('-id')[0]

class Rating(models.Model):
   von_location = models.ForeignKey(Location,related_name="locations_rate")
   rating = models.IntegerField()

   def __unicode__(self):
        return "{0}".format(self.rating)
</snippet></ROW><ROW><id>15825494</id><snippet>all_locs = Location.objects.all()
</snippet></ROW><ROW><id>15825494</id><snippet>{% for location in all_locs %}
   {{ location.locationname }} - {{ location.latest.rating }}&lt;br/&gt;
{% endfor %}
</snippet></ROW><ROW><id>15825612</id><snippet>class Location(models.Model):
    locationname = models.CharField(max_length=100)

    def __unicode__(self):
        return self.locationname

    def latest(self):
        return Rating.objects.values('rating').filter(von_location=self).order_by('-id')[0]

class Rating(models.Model):
   von_location = models.ForeignKey(Location,related_name="locations_rate")
   rating = models.IntegerField()

   def __unicode__(self):
        return "{0}".format(self.rating)
</snippet></ROW><ROW><id>15825612</id><snippet>all_locs = Location.objects.all()
</snippet></ROW><ROW><id>15825612</id><snippet>{% for location in all_locs %}
   {{ location.locationname }} - {{ location.latest.rating }}&lt;br/&gt;
{% endfor %}
</snippet></ROW><ROW><id>15825903</id><snippet>matches = [ k for k in yourdictionary.keys() if 'gc' in k.lower() ]
number_of_matches = len(matches)
</snippet></ROW><ROW><id>15825903</id><snippet>regex</snippet></ROW><ROW><id>15825903</id><snippet>string.find</snippet></ROW><ROW><id>15825903</id><snippet>string.count</snippet></ROW><ROW><id>15825903</id><snippet>if substring in string</snippet></ROW><ROW><id>15826160</id><snippet>target</snippet></ROW><ROW><id>15826160</id><snippet>threading.Thread</snippet></ROW><ROW><id>15826160</id><snippet>__call__</snippet></ROW><ROW><id>15826160</id><snippet>import threading

def foo(number, name):
    print 'Hello from new thread'
    print 'Here are some arguments:', number, name

thread = threading.Thread(target=foo, args=(5,'bar'))
thread.start()

thread.join()
</snippet></ROW><ROW><id>15826368</id><snippet>__dict__</snippet></ROW><ROW><id>15826368</id><snippet>descriptors = [m for m,v in ContrivedExample.__dict__.iteritems()
               if isinstance(v, Descriptor)]

# descriptors is set to ['Name', 'Date']
</snippet></ROW><ROW><id>15826610</id><snippet>collection</snippet></ROW><ROW><id>15826610</id><snippet>rows</snippet></ROW><ROW><id>15826610</id><snippet>gc.collect()</snippet></ROW><ROW><id>15826610</id><snippet># if you don't need random-access to elements in a sequence
# a deque uses less memory and has faster appends and deletes
# from both the front and the back.
from collections import deque
from itertools import izip, repeat, islice, chain
import re

re_redshift_chars = re.compile(r'[abcdefg]')

def istrjoin(sep, seq):
    """Return a generator that acts like sep.join(seq), but lazily

    The separator will be yielded separately
    """
    return islice(chain.from_iterable(izip(repeat(sep), seq)), 1, None)

def escape_redshift(s):
    return re_redshift_chars.sub(r'\\\g&lt;0&gt;', s)

def tabulate(row):
    return "\t".join(escape_redshift(str(v)) if v is not None else '' for v in row)
</snippet></ROW><ROW><id>15826610</id><snippet>cursor = db.cursor()
cursor.execute("""SELECT * FROM bigtable""")
rowstrings = (tabulate(row) for row in cursor.fetchall())
lines = istrjoin("\n", rowstrings)
file_like_obj.writelines(lines)
cursor.close()
</snippet></ROW><ROW><id>15826610</id><snippet>cursor = db.cursor()
cursor.execute("SELECT * FROM bigtable")
collection = deque(cursor.fetchall())
cursor.close()
rowstrings = (tabulate(row) for row in collection)
lines = istrjoin("\n", rowstrings)
file_like_obj.writelines(lines)
</snippet></ROW><ROW><id>15826610</id><snippet>collection</snippet></ROW><ROW><id>15826610</id><snippet>def drain(coll):
    """Return an iterable that deletes items from coll as it yields them.

    coll must support `coll.pop(0)` or `del coll[0]`. A deque is recommended!
    """
    if hasattr(coll, 'pop'):
        def pop(coll):
            try:
                return coll.pop(0)
            except IndexError:
                raise StopIteration
    else:
        def pop(coll):
            try:
                item = coll[0]
            except IndexError:
                raise StopIteration
            del coll[0]
            return item
    while True:
        yield pop(coll)
</snippet></ROW><ROW><id>15826610</id><snippet>drain(collection)</snippet></ROW><ROW><id>15826610</id><snippet>collection</snippet></ROW><ROW><id>15826610</id><snippet>drain(collection)</snippet></ROW><ROW><id>15826610</id><snippet>collection</snippet></ROW><ROW><id>15826622</id><snippet>class purchase_order(osv.osv):
    _inherit = "purchase.order"
    _columns = {
        'requisition_id' : fields.many2one('purchase.requisition','Purchase Requisition')
    }
    def wkf_confirm_order(self, cr, uid, ids, context=None):
        res = super(purchase_order, self).wkf_confirm_order(cr, uid, ids, context=context)
        proc_obj = self.pool.get('procurement.order')
        for po in self.browse(cr, uid, ids, context=context):
            if po.requisition_id and (po.requisition_id.exclusive=='exclusive'):
                for order in po.requisition_id.purchase_ids:
                    if order.id&lt;&gt;po.id:
                        proc_ids = proc_obj.search(cr, uid, [('purchase_id', '=', order.id)])
                        if proc_ids and po.state=='confirmed':
                            proc_obj.write(cr, uid, proc_ids, {'purchase_id': po.id})
                        wf_service = netsvc.LocalService("workflow")
                        wf_service.trg_validate(uid, 'purchase.order', order.id, 'purchase_cancel', cr)
                    po.requisition_id.tender_done(context=context)
        return res
</snippet></ROW><ROW><id>15826758</id><snippet>upload_to</snippet></ROW><ROW><id>15826758</id><snippet>FileField</snippet></ROW><ROW><id>15826758</id><snippet>def only_filename(instance, filename):
    return filename

class MyModel(models.Model):
    file = models.FileField(upload_to=only_filename)
</snippet></ROW><ROW><id>15826934</id><snippet>std::string target_path( "C:\\" );
boost::regex my_filter( "*\.bmp" );
std::vector&lt; std::string &gt; all_matching_files;
for ( boost::filesystem::recursive_directory_iterator end, dir(target_path); 
    dir != end; ++dir ) 
{
    // Skip if not a file
    if( !boost::filesystem::is_regular_file( i-&gt;status() ) ) 
        continue;
    boost::smatch what;

    // Skip if no match
    if( !boost::regex_match( i-&gt;leaf(), what, my_filter ) ) continue;

    // File matches, store it
    all_matching_files.push_back( i-&gt;leaf() );                                 
}
</snippet></ROW><ROW><id>15826934</id><snippet>filesStack = new QStack&lt;QString&gt;();

QDir selectedDir("C:\\");
selectedDir.setFilter(QDir::Files | QDir::Dirs | QDir::NoDot | QDir::NoDotDot);
QStringList qsl; qsl.append("*.bmp");
selectedDir.setNameFilters(qsl);
findFilesRecursively(selectedDir);


void findFilesRecursively(QDir rootDir) 
{
    QDirIterator it(rootDir, QDirIterator::Subdirectories);
    while(it.hasNext()) 
    {
        filesStack-&gt;push(it.next());
    }
}
</snippet></ROW><ROW><id>15826995</id><snippet>datastore_query.CompositeOrder</snippet></ROW><ROW><id>15826995</id><snippet>PropertyOrder</snippet></ROW><ROW><id>15827312</id><snippet>extra</snippet></ROW><ROW><id>15827312</id><snippet>Record</snippet></ROW><ROW><id>15827312</id><snippet>Handler</snippet></ROW><ROW><id>15827312</id><snippet>Handler</snippet></ROW><ROW><id>15827312</id><snippet>import logging

class MultiFileHandler(logging.FileHandler):

    def __init__(self, filename, mode, encoding=None, delay=0):
        logging.FileHandler.__init__(self, filename, mode, encoding, delay)

    def emit(self, record):
        if self.should_change_file(record):
            self.change_file(record.file_id)
        logging.FileHandler.emit(self, record)

    def should_change_file(self, record):
        if not hasattr(record, 'file_id') or record.file_id == self.baseFilename:
             return False
        return True

    def change_file(self, file_id):
        self.stream.close()

        self.baseFilename = file_id
        self.stream = self._open()

if __name__ == '__main__':

    logger = logging.getLogger('request_logger')
    logger.setLevel(logging.DEBUG)    
    handler = MultiFileHandler(filename='out.log', mode='a')
    handler.setLevel(logging.DEBUG)    
    logger.addHandler(handler)

    # Log some messages to the original file
    logger.debug('debug message')
    logger.info('info message')

    # Log some messages to a different file
    logger.debug('debug message',       extra={'file_id':'changed.log'})
    logger.info('info message',         extra={'file_id':'changed.log'})
    logger.warn('warn message',         extra={'file_id':'changed.log'})
    logger.error('error message',       extra={'file_id':'changed.log'})
    logger.critical('critical message', extra={'file_id':'changed.log'})
</snippet></ROW><ROW><id>15827441</id><snippet>ZipFile.write()</snippet></ROW><ROW><id>15827441</id><snippet>arcname</snippet></ROW><ROW><id>15827441</id><snippet>os.path.basename()</snippet></ROW><ROW><id>15827441</id><snippet>def zip_write(zip, filename):
    zip.write(filename, os.path.basename(filename))

z = zipfile.ZipFile('myzip.zip', 'w')
zip_write(z, '/some/path/mytxt1.txt')
zip_write(z, '/some/other/path/mytxt2.txt')
z.close()
</snippet></ROW><ROW><id>15827525</id><snippet>import unittest

class BlackBox1():
    def calc(self, a, b):
        return a + b

class BlackBox2():
    def calc(self, a, b):
        return a * b

class TestBlackBox1(unittest.TestCase):
    test_params = {"blackbox": BlackBox1, "a": 3, "b": 5, "result": 8}
    def setUp(self):
        self.box = self.test_params["blackbox"]()
        self.param_a = self.test_params["a"]
        self.param_b = self.test_params["b"]
        self.expected_result = self.test_params["result"]

    def test_calc_method(self):
        real_result = self.box.calc(self.param_a, self.param_b)
        self.assertEqual(real_result, self.expected_result,
                        "{0} gives wrong result: {1} instead of {2}".format
                        (self.box.__class__, real_result, self.expected_result))

class TestBlackBox2(TestBlackBox1):
    test_params = {"blackbox": BlackBox2, "a": 4, "b": 7, "result": 28}

TBB1 = unittest.defaultTestLoader.loadTestsFromTestCase(TestBlackBox1)
TBB2 = unittest.defaultTestLoader.loadTestsFromTestCase(TestBlackBox2)
</snippet></ROW><ROW><id>15828429</id><snippet>upstream pythonserver {
    server localhost:5000;
}

server {
    // normal server config stuff...

    location /some/uri/here {
        // Minimum required settings to proxy websocket connections
        proxy_pass http://pythonserver;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        // Other settings for this location
    }
}
</snippet></ROW><ROW><id>15828583</id><snippet>.EntireColumn.Insert</snippet></ROW><ROW><id>15828583</id><snippet>from openpyxl.workbook import Workbook
from openpyxl.cell import get_column_letter, Cell, column_index_from_string, coordinate_from_string

wb = Workbook()
dest_filename = r'empty_book.xlsx'
ws = wb.worksheets[0]
ws.title = "range names"

# inserting sample data
for col_idx in xrange(1, 10):
    col = get_column_letter(col_idx)
    for row in xrange(1, 10):
        ws.cell('%s%s' % (col, row)).value = '%s%s' % (col, row)

# inserting column between 4 and 5
column_index = 5
new_cells = {}
ws.column_dimensions = {}
for coordinate, cell in ws._cells.iteritems():
    column_letter, row = coordinate_from_string(coordinate)
    column = column_index_from_string(column_letter)

    # shifting columns
    if column &gt;= column_index:
        column += 1

    column_letter = get_column_letter(column)
    coordinate = '%s%s' % (column_letter, row)

    # it's important to create new Cell object
    new_cells[coordinate] = Cell(ws, column_letter, row, cell.value)

ws._cells = new_cells
wb.save(filename=dest_filename)
</snippet></ROW><ROW><id>15828863</id><snippet>r'^user/$</snippet></ROW><ROW><id>15829430</id><snippet>seleccion.getThread</snippet></ROW><ROW><id>15829430</id><snippet>db.query</snippet></ROW><ROW><id>15829430</id><snippet>web.iterbetter</snippet></ROW><ROW><id>15829430</id><snippet>d.list()</snippet></ROW><ROW><id>15829430</id><snippet>d</snippet></ROW><ROW><id>15829430</id><snippet>web.iterbetter</snippet></ROW><ROW><id>15829430</id><snippet>list</snippet></ROW><ROW><id>15829430</id><snippet>'/c/(.*)','index'</snippet></ROW><ROW><id>15829430</id><snippet>def GET(self,cat=None):</snippet></ROW><ROW><id>15829430</id><snippet>'/c/(.+)','index'</snippet></ROW><ROW><id>15829430</id><snippet>'/c/'</snippet></ROW><ROW><id>15829494</id><snippet>df.score.groupby(df.page_id).transform(lambda s:s.diff().combine_first(s)).cumsum()
</snippet></ROW><ROW><id>15829494</id><snippet>from StringIO import StringIO
txt = """date,page_id,score
2001-05-23 19:50:14,  1,3
2001-05-25 11:53:55,  2,4
2001-05-27 17:36:37,  1,5
2001-05-28 19:36:37,  1,1
2001-05-28 19:36:38,  3,6
2001-05-28 19:36:39,  3,9
"""

df = pd.read_csv(StringIO(txt), index_col=0)

def score_sum_py(page_id, scores):
    from itertools import izip
    score_sum = 0
    last_score = [0]*(np.max(page_id)+1)
    result = np.empty_like(scores)
    for i, (pid, score) in enumerate(izip(page_id, scores)):
        score_sum = score_sum - last_score[pid] + score
        last_score[pid] = score
        result[i] = score_sum
    result.name = "score_sum"
    return result

print score_sum_py(pd.factorize(df.page_id)[0], df.score)
</snippet></ROW><ROW><id>15829494</id><snippet>date
2001-05-23 19:50:14     3
2001-05-25 11:53:55     7
2001-05-27 17:36:37     9
2001-05-28 19:36:37     5
2001-05-28 19:36:38    11
2001-05-28 19:36:39    14
Name: score_sum
</snippet></ROW><ROW><id>15829494</id><snippet>%%cython
cimport cython
cimport numpy as np
import numpy as np

@cython.wraparound(False) 
@cython.boundscheck(False)
def score_sum(np.ndarray[int] page_id, np.ndarray[long long] scores):
    cdef int i
    cdef long long score_sum, pid, score
    cdef np.ndarray[long long] last_score, result

    score_sum = 0
    last_score = np.zeros(np.max(page_id)+1, dtype=np.int64)
    result = np.empty_like(scores)

    for i in range(len(page_id)):
        pid = page_id[i]
        score = scores[i]
        score_sum = score_sum - last_score[pid] + score
        last_score[pid] = score
        result[i] = score_sum

    result.name = "score_sum"
    return result
</snippet></ROW><ROW><id>15829494</id><snippet>pandas.factorize()</snippet></ROW><ROW><id>15829494</id><snippet>page_id</snippet></ROW><ROW><id>15829494</id><snippet>page_id</snippet></ROW><ROW><id>15829494</id><snippet>pandas.factorize()</snippet></ROW><ROW><id>15829548</id><snippet>names  = []

for row in cursor.fetchall():
    names.append(row[0])
</snippet></ROW><ROW><id>15829568</id><snippet>'partref_id': fields.many2one('res.partner', 'Related Company'),
'ref_partner_ids': fields.one2many('res.partner', 'partref_id', 'Refrence partner'),
</snippet></ROW><ROW><id>15829939</id><snippet>request.POST</snippet></ROW><ROW><id>15829939</id><snippet>doc = request.POST.get('xml','')
if not doc:
  raise Exception()
h = etree.XML(doc.encode('ascii'), parser)
</snippet></ROW><ROW><id>15830409</id><snippet>&gt;&gt;&gt; a = np.zeros(1000, dtype='float32, (10000,2)float32')
&gt;&gt;&gt; a[200][0]
0.0
&gt;&gt;&gt; a[200][1][2000]
array([ 0.,  0.], dtype=float32)
</snippet></ROW><ROW><id>15830409</id><snippet>&gt;&gt;&gt; b = np.zeros((1000,10000,2))
&gt;&gt;&gt; b[:,:,1] += 1
</snippet></ROW><ROW><id>15830409</id><snippet>a[:][1][:,1]</snippet></ROW><ROW><id>15830429</id><snippet>from collections import OrderedDict

with open('/home/jon/testdata.txt') as fin:
    lines = (line.rstrip() for line in fin)
    unique_lines = OrderedDict.fromkeys( (line for line in lines if line) )

print unique_lines.keys()
# ['None_None', 'ConfigHandler_56663624', 'ColumnConverter_56963312',PredicatesFactory_56963424', 'PredicateConverter_56963648', 'ConfigHandler_80134888']
</snippet></ROW><ROW><id>15830619</id><snippet>from lxml import etree
from lxml.etree import fromstring

if request.POST:
    xml = request.POST['xml'].encode('utf-8')
    parser = etree.XMLParser(ns_clean=True, recover=True, encoding='utf-8')
    h = fromstring(xml, parser=parser)

    return HttpResponse(h.cssselect('delivery_reciept status').text_content())
</snippet></ROW><ROW><id>15830954</id><snippet>myVars = {}
for param in parameters:
    myVars[param] = []
</snippet></ROW><ROW><id>15830954</id><snippet>locals()</snippet></ROW><ROW><id>15830954</id><snippet>exec</snippet></ROW><ROW><id>15830954</id><snippet>def test():
    for param im parameters:
        locals()[param] = []
    exec ""
    print WindSp_Avg
</snippet></ROW><ROW><id>15830954</id><snippet>&gt;&gt;&gt; test()
[]
</snippet></ROW><ROW><id>15831027</id><snippet>import pxssh
host = pxssh.pxssh
host.login('hostname','username','password')
host.sendline('command')#'ls'
print host.before
</snippet></ROW><ROW><id>15831372</id><snippet>xxxx@toad:~$ rm .ssh/known_hosts
</snippet></ROW><ROW><id>15831372</id><snippet>child = pexpect.spawn('ssh tiger@172.16.0.190 -p 8888')
child.logfile = open("/tmp/mylog", "w")
print child.before
child.expect('.*Are you sure you want to continue connecting (yes/no)?')
child.sendline("yes")

child.expect(".*assword:")
child.sendline("tiger\r")
child.expect('Press any key to continue...')
child.send('\r')
child.expect('C:\Users\.*&gt;')
child.sendline('dir')
child.prompt('C:\Users\.*&gt;')
</snippet></ROW><ROW><id>15831505</id><snippet>winsound.PlaySound('D:\1.wav',winsound.SND_FILENAME)
</snippet></ROW><ROW><id>15831505</id><snippet>winsound.PlaySound('D:\\1.wav',winsound.SND_FILENAME)
</snippet></ROW><ROW><id>15831505</id><snippet>&gt;&gt;&gt; a = '\1.wav'
&gt;&gt;&gt; a
'\x01.wav'
</snippet></ROW><ROW><id>15831505</id><snippet>winsound.SND_NODEFAULT</snippet></ROW><ROW><id>15831505</id><snippet>D:\test_sounds\</snippet></ROW><ROW><id>15831505</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>15831505</id><snippet>import sys
if "D:\\my_sound_folder" not in sys.path:
    sys.path.append("D:\\my_sound_folder")
</snippet></ROW><ROW><id>15831505</id><snippet>winsound.PlaySOund('1.wav', winsound.SND_FILENAME)</snippet></ROW><ROW><id>15831900</id><snippet>xpath</snippet></ROW><ROW><id>15831900</id><snippet>&gt;&gt;&gt; h.xpath('status/text()')
['Delivered']
</snippet></ROW><ROW><id>15831900</id><snippet>def first(seq,default=None):
  for item in seq:
    return item
  return default

...

status = first(h.xpath('status/text()'))
</snippet></ROW><ROW><id>15831914</id><snippet>lst = ['145,153,8,1.3565949', '1,2,3,4,5,6', '9,8,7,6,5,4']

[','.join(elem.split(',', 2)[:2]) for elem in lst]
</snippet></ROW><ROW><id>15831914</id><snippet>['145,153', '1,2', '9,8']
</snippet></ROW><ROW><id>15832230</id><snippet>$ django-admin.py startproject mysite
</snippet></ROW><ROW><id>15832230</id><snippet>settings.py</snippet></ROW><ROW><id>15832230</id><snippet>TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)
</snippet></ROW><ROW><id>15832230</id><snippet>import os
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')
if os.sep != '/':
    # Django says, "Always use forward slashes, even on Windows."
    TEMPLATE_DIR = TEMPLATE_DIR.replace(os.sep, '/')
TEMPLATE_DIRS = (TEMPLATE_DIR,)
</snippet></ROW><ROW><id>15832230</id><snippet>os.pardir</snippet></ROW><ROW><id>15832230</id><snippet>os.sep</snippet></ROW><ROW><id>15832403</id><snippet>.encode</snippet></ROW><ROW><id>15832403</id><snippet>'xmlcharrefreplace'</snippet></ROW><ROW><id>15832403</id><snippet>errors</snippet></ROW><ROW><id>15832403</id><snippet>In [1]: help(unicode.encode)
Help on method_descriptor:

encode(...)
    S.encode([encoding[,errors]]) -&gt; string or unicode

    Encodes S using the codec registered for encoding. encoding defaults
    to the default encoding. errors may be given to set a different error
    handling scheme. Default is 'strict' meaning that encoding errors raise
    a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
    'xmlcharrefreplace' as well as any other name registered with
    codecs.register_error that can handle UnicodeEncodeErrors.
</snippet></ROW><ROW><id>15832403</id><snippet>In [2]: ustr = u'\xa9 \u20ac'

In [3]: print ustr
© €

In [4]: print ustr.encode('ascii', 'xmlcharrefreplace')
© €
</snippet></ROW><ROW><id>15832442</id><snippet>[x, y]</snippet></ROW><ROW><id>15832442</id><snippet>list</snippet></ROW><ROW><id>15832442</id><snippet>stars = []
for i in range(1200):
    x = random.randint(0, screen.get_width())
    y = random.randint(0, screen.get_height())
    stars.append([x,y])
</snippet></ROW><ROW><id>15832442</id><snippet>x</snippet></ROW><ROW><id>15832442</id><snippet>y</snippet></ROW><ROW><id>15832442</id><snippet>for star in stars:
    draw_star(star)
</snippet></ROW><ROW><id>15832442</id><snippet>[x, y]</snippet></ROW><ROW><id>15832442</id><snippet>draw_star</snippet></ROW><ROW><id>15832442</id><snippet>def draw_star(star): # drawing a star
</snippet></ROW><ROW><id>15832442</id><snippet>star[0]</snippet></ROW><ROW><id>15832442</id><snippet>x</snippet></ROW><ROW><id>15832442</id><snippet>star[1]</snippet></ROW><ROW><id>15832442</id><snippet>y</snippet></ROW><ROW><id>15832442</id><snippet>    # you only need to change a pixel, so use set_at, not draw.line
    screen.set_at((star[0], star[1]), (255, 255, 255))
</snippet></ROW><ROW><id>15832442</id><snippet>    star[0] -= 1
</snippet></ROW><ROW><id>15832442</id><snippet>    if star[0] &lt; 0:
        star[0] = screen.get_width()
        star[1] = random.randint(0, screen.get_height())
</snippet></ROW><ROW><id>15832442</id><snippet>for star in stars: draw_star(star)</snippet></ROW><ROW><id>15832442</id><snippet>draw_star()</snippet></ROW><ROW><id>15832442</id><snippet>stars</snippet></ROW><ROW><id>15832453</id><snippet>from itertools import product
A = [(X(x), Y(y), Z(z)) for x, y, z in product(range(N), repeat=3)]
</snippet></ROW><ROW><id>15832785</id><snippet>NULL</snippet></ROW><ROW><id>15832785</id><snippet>NULL</snippet></ROW><ROW><id>15832785</id><snippet>Py_INCREF(pyfd);</snippet></ROW><ROW><id>15832899</id><snippet>location</snippet></ROW><ROW><id>15832899</id><snippet>GOTO</snippet></ROW><ROW><id>15832922</id><snippet>r = requests.get(account_url)
&gt;&gt;&gt; r.url
u'https://twitter.com/IaMaGuyGetIt'
&gt;&gt;&gt; r.text
u'&lt;html&gt;&lt;body&gt;You are being &lt;a href="https://twitter.com/account/suspended"&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;'
</snippet></ROW><ROW><id>15832988</id><snippet>[map(int, elem.split()) for elem in originallist]
</snippet></ROW><ROW><id>15832988</id><snippet>map()</snippet></ROW><ROW><id>15832988</id><snippet>[[int(n) for n in elem.split()] for elem in originallist]
</snippet></ROW><ROW><id>15832988</id><snippet>&gt;&gt;&gt; originallist = ['136 145', '136 149', '137 145', '138 145', '139 145', '142 149', '142 153', '145 153']
&gt;&gt;&gt; [[int(n) for n in elem.split()] for elem in originallist]
[[136, 145], [136, 149], [137, 145], [138, 145], [139, 145], [142, 149], [142, 153], [145, 153]]
</snippet></ROW><ROW><id>15832988</id><snippet>elem.split()</snippet></ROW><ROW><id>15832988</id><snippet>[int(n) for elem in originallist for n in elem.split()]
</snippet></ROW><ROW><id>15832988</id><snippet>[136, 145, 136, 149, 137, 145, 138, 145, 139, 145, 142, 149, 142, 153, 145, 153]
</snippet></ROW><ROW><id>15833182</id><snippet>import numpy as np
a=np.array([1,2,3,4,5,6,7,8,9])
b=np.array([-1,-2,-3,-4,-5,1,2,-3,-4])

plot(a, b)
m = b &gt; 0
plot(np.ma.array(a, mask=m), np.ma.array(b, mask=m), 'r--', lw=2)
</snippet></ROW><ROW><id>15833182</id><snippet>import numpy as np
a=np.array([1,2,3,4,5,6,7,8,9])
b=np.array([-1,-2,-3,-4,-5,1,2,-3,-4])

x = np.linspace(a.min(), a.max(), 1000)
y = np.interp(x, a, b)

m = y &lt;= 0
plot(np.ma.array(x, mask=m), np.ma.array(y, mask=m), 'b-', lw=2)
m = y &gt; 0
plot(np.ma.array(x, mask=m), np.ma.array(y, mask=m), 'r--', lw=2)
</snippet></ROW><ROW><id>15833182</id><snippet>np.interp()</snippet></ROW><ROW><id>15833182</id><snippet>idx1 = np.where(b[1:] * b[:-1] &lt; 0)[0]
idx2 = idx1 + 1

x0 = a[idx1] + np.abs(b[idx1] / (b[idx2] - b[idx1])) * (a[idx2] - a[idx1]) 

a2 = np.insert(a, idx2, x0)
b2 = np.insert(b, idx2, 0)

m = b2 &lt; 0
plot(np.ma.array(a2, mask=m), np.ma.array(b2, mask=m), 'b-', lw=2)
m = b2 &gt; 0
plot(np.ma.array(a2, mask=m), np.ma.array(b2, mask=m), 'r--', lw=2)
</snippet></ROW><ROW><id>15833229</id><snippet>BEGIN PROGRAM PYTHON.
import subprocess
subprocess.call(['C:\\R\\R.exe', 'CMD', 'BATCH', 'C:\\Files\\MyRcode.R'])
END PROGRAM.
</snippet></ROW><ROW><id>15833229</id><snippet>HOST COMMAND=['R CMD BATCH C:\Files\MyRcode.R'].
</snippet></ROW><ROW><id>15833229</id><snippet>os.system()</snippet></ROW><ROW><id>15833229</id><snippet>SCRIPT</snippet></ROW><ROW><id>15833279</id><snippet>cat replacement-list-files* | awk 'FILENAME == "-" { 
  split( $0, a, "~" ); repl[ a[1] ] = a[2]; next }
  { for( i in repl ) gsub( i, repl[i] ) }1' - input-file
</snippet></ROW><ROW><id>15833279</id><snippet>1</snippet></ROW><ROW><id>15833279</id><snippet>{ print &gt; ( FILENAME ".new" ) }</snippet></ROW><ROW><id>15833304</id><snippet>unicode</snippet></ROW><ROW><id>15833304</id><snippet>unicode</snippet></ROW><ROW><id>15833304</id><snippet>str</snippet></ROW><ROW><id>15833304</id><snippet>str</snippet></ROW><ROW><id>15833304</id><snippet># I assume you use utf-8 everywhere 
text_content = plaintext.render(d).encode("utf-8")
html_content = htmly.render(d).encode("utf-8")
</snippet></ROW><ROW><id>15833589</id><snippet>os.walk()</snippet></ROW><ROW><id>15833589</id><snippet>filePath = u'C:\\Test\\'  # Test folder haveing file BitComet_比特彗星_1_25.exe

for (adir, dirs, files) in os.walk(filePath):
</snippet></ROW><ROW><id>15833655</id><snippet>Python</snippet></ROW><ROW><id>15833655</id><snippet>libmpfr4</snippet></ROW><ROW><id>15833700</id><snippet>lambdify()</snippet></ROW><ROW><id>15833700</id><snippet>import numpy as np
from sympy import *

x, y = symbols("x, y")
eq = sqrt(x**2 + y**2)

xa = np.random.rand(10)
ya = np.random.rand(10)
f = lambdify((x, y),eq,'numpy')

print f(xa, ya)
print np.sqrt(xa**2 + ya**2)
</snippet></ROW><ROW><id>15833738</id><snippet>&gt;&gt;&gt; nums = [[23,34],[43,23]]
&gt;&gt;&gt; [[y + 2 for y in x] for x in nums]
[[25, 36], [45, 25]]
</snippet></ROW><ROW><id>15833950</id><snippet>std::vector</snippet></ROW><ROW><id>15833950</id><snippet>id</snippet></ROW><ROW><id>15833950</id><snippet>#include &lt;Python.h&gt;

extern "C"
void append_to_list(uintptr_t lst_id)
{
    PyObject* lst = reinterpret_cast&lt;PyObject*&gt;(ptr);
    PyObject* new_num = PyFloat_FromDouble(2.0);
    if (!new_num) {
        ... PyFloat creation failed ...
    }
    int ret = PyList_Append(lst, new_num);
    Py_DECREF(new_num);
    if (ret) {
        ... PyList_Append failed ...
    }
}
</snippet></ROW><ROW><id>15833986</id><snippet>son_value = family['son']
family.clear()
family['son'] = son_value
</snippet></ROW><ROW><id>15833986</id><snippet>for k in family:
    if k != 'son':
        del family[k]
</snippet></ROW><ROW><id>15834292</id><snippet>dict((z[0],list(z[1:])) for z in zip(list1,list2,list3))
</snippet></ROW><ROW><id>15834292</id><snippet>{z[0]:list(z[1:]) for z in zip(list1,list2,list3)}
</snippet></ROW><ROW><id>15834292</id><snippet>list_of_lists = [list1,list2,list3,...]
{z[0]:list(z[1:]) for z in zip(*list_of_lists)} 
</snippet></ROW><ROW><id>15834292</id><snippet>def to_int(iterable):
    return [int(x) for x in iterable]

{z[0]:to_int(z[1:]) for z in zip(*list_of_lists)}
</snippet></ROW><ROW><id>15834319</id><snippet>if response.error:
        print("Terzo")
        print response.error
        raise Exception(response.error)
        return
</snippet></ROW><ROW><id>15834319</id><snippet>Uncaught Exception</snippet></ROW><ROW><id>15834922</id><snippet>allletters = set(list('abcdefghijklmnopqrstuvwxyz'))
usedletters = set() # update this as you go
availletters = allletters.difference(usedletters) #s - t    new set with elements in s but not in t
</snippet></ROW><ROW><id>15834922</id><snippet>print sorted(availletters)
</snippet></ROW><ROW><id>15834922</id><snippet>print ', '.join(sorted(availletters))
</snippet></ROW><ROW><id>15834922</id><snippet>allletters = set(list('abcdefghijklmnopqrstuvwxyz'))
usedletters = set() # update this as you go
while( len(usedletters) != len(allletters) ):
    guessedletter = raw_input("pick a letter")
    availletters = allletters.difference(usedletters)
    usedletters.update(guessedletter)
</snippet></ROW><ROW><id>15834922</id><snippet>allletters = set(list('abcdefghijklmnopqrstuvwxyz'))
while( len(usedletters) != len(allletters) ):
    guessedletter = raw_input("pick a letter")
    allletters.difference_update(guessedletter)
</snippet></ROW><ROW><id>15835012</id><snippet>import datetime as DT
dow = dict(zip('monday tuesday wednesday thursday friday saturday sunday'.split(),
           range(7)))

def getDateFromDayOf(dateTimeObj, reqDayOf):
    weekday = dateTimeObj.weekday()        
    return dateTimeObj + DT.timedelta(days=(dow[reqDayOf.lower()]-weekday-1)%7+1)
</snippet></ROW><ROW><id>15835012</id><snippet>In [90]: getDateFromDayOf(DT.datetime.now(), 'Monday').date()
Out[90]: datetime.date(2013, 4, 8)

In [91]: getDateFromDayOf(DT.datetime.now(), 'Tuesday').date()
Out[91]: datetime.date(2013, 4, 9)

In [92]: getDateFromDayOf(DT.datetime.now(), 'Friday').date()
Out[92]: datetime.date(2013, 4, 12)
</snippet></ROW><ROW><id>15835012</id><snippet>import datetime as DT
import dateutil
import dateutil.relativedelta as rdelta
import dateutil.rrule as rrule

dow = dict(zip('monday tuesday wednesday thursday friday saturday sunday'.split(),
               (getattr(rdelta, d) for d in 'MO TU WE TH FR SA SU'.split())))
def getDateFromDayOf(dateTimeObj, reqDayOf):
    rr = rrule.rrule(
        rrule.DAILY,                       # step by days
        byweekday = dow[reqDayOf.lower()], # return only this day of the week
        dtstart = dateTimeObj)             # start on this day 
    res = rr.after(dateTimeObj, inc=False) # inc=False means don't include the dtstart day
    return res
</snippet></ROW><ROW><id>15835012</id><snippet>DT.timedelta(days=(dow[reqDayOf.lower()]-weekday-1)%7+1)
</snippet></ROW><ROW><id>15835083</id><snippet>install_requires</snippet></ROW><ROW><id>15835083</id><snippet>setup</snippet></ROW><ROW><id>15835083</id><snippet>requires</snippet></ROW><ROW><id>15835083</id><snippet>setuptools</snippet></ROW><ROW><id>15835083</id><snippet>easy_install</snippet></ROW><ROW><id>15835083</id><snippet>pip</snippet></ROW><ROW><id>15835083</id><snippet>setup_requires</snippet></ROW><ROW><id>15835083</id><snippet>test_requires</snippet></ROW><ROW><id>15835083</id><snippet>setup.py</snippet></ROW><ROW><id>15835286</id><snippet>foo = [{} for _ in range(n)]
</snippet></ROW><ROW><id>15835286</id><snippet>xrange(n)</snippet></ROW><ROW><id>15835286</id><snippet>range(n)</snippet></ROW><ROW><id>15835286</id><snippet>[{}] * n</snippet></ROW><ROW><id>15835286</id><snippet>n</snippet></ROW><ROW><id>15835286</id><snippet>n</snippet></ROW><ROW><id>15835428</id><snippet>import matplotlib.pyplot as plt
fig, axs = plt.subplots(nrows=3, ncols=2)

for ax in axs.flat:
    plotxy(ax,x,y)
</snippet></ROW><ROW><id>15835428</id><snippet>plt.subplot</snippet></ROW><ROW><id>15835428</id><snippet>plt.axes</snippet></ROW><ROW><id>15835570</id><snippet>L</snippet></ROW><ROW><id>15835570</id><snippet>struct.pack("!L", 104277)
</snippet></ROW><ROW><id>15835686</id><snippet>str.find()</snippet></ROW><ROW><id>15835686</id><snippet>str.find(sub[, start[, end]])</snippet></ROW><ROW><id>15835686</id><snippet>s[start:end]</snippet></ROW><ROW><id>15835686</id><snippet>while</snippet></ROW><ROW><id>15835686</id><snippet>start_index</snippet></ROW><ROW><id>15835686</id><snippet>-1</snippet></ROW><ROW><id>15835686</id><snippet>return data[start_index + 3:end_index]</snippet></ROW><ROW><id>15835686</id><snippet>if start_index &gt; -1:</snippet></ROW><ROW><id>15835686</id><snippet>while</snippet></ROW><ROW><id>15835686</id><snippet>start_index</snippet></ROW><ROW><id>15836097</id><snippet>xpath()</snippet></ROW><ROW><id>15836097</id><snippet>submission_ref = h.xpath('submission_ref/text()')[0]
</snippet></ROW><ROW><id>15836154</id><snippet>&gt;&gt;&gt; try:
...   x = 5/1 + 4*a/3
... except 0:
...   print 'error'
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
NameError: name 'a' is not defined
&gt;&gt;&gt; try:
...   x = 5/0 + 4*a/3
... except 0:
...   print 'error'
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
ZeroDivisionError: integer division or modulo by zero
</snippet></ROW><ROW><id>15836154</id><snippet>NameError</snippet></ROW><ROW><id>15836154</id><snippet>ZeroDivisionError</snippet></ROW><ROW><id>15836154</id><snippet>0</snippet></ROW><ROW><id>15836154</id><snippet>&gt;&gt;&gt; try:
...   print 'error'
... except:
... 
KeyboardInterrupt
&gt;&gt;&gt; try:
...   x = 5/0 + 4*a/3
... except:
...   print 'error'
... 
error
</snippet></ROW><ROW><id>15836331</id><snippet>first_name</snippet></ROW><ROW><id>15836331</id><snippet>for books in xmlDocTree.iter('book'):
    book_id = books[0].text
    book_name = books[1].text
    publisher_name = books[2].text

    author_id = books[3].text     
    first_name = books[4].text
    last_name = books[5].text 
    email = books[6].text
    age = books[7].text 

    author, _ = Author.objects.get_or_create(id=author_id, defaults={'first_name': first_name, 'last_name': last_name, 'email': email, 'age': age})
    author.save()

    book, - =  Book.objects.get_or_create(book_id=book_id, defaults={'book_name': book_name, 'published_name': publisher_name, 'author': author)})
    book.save()
</snippet></ROW><ROW><id>15836331</id><snippet>Author</snippet></ROW><ROW><id>15836331</id><snippet>author_id</snippet></ROW><ROW><id>15836394</id><snippet>class InstancesList(object): 
    def __new__(cls, *args, **kw):
        if not hasattr(cls, 'instances'):
            cls.instances = []
        return super(InstancesList, cls).__new__(cls, *args, **kw)

    def __init__(self):
        self.index = len(type(self).instances)
        type(self).instances.append(self)

class Foo(InstancesList):
    def __init__(self, arg1, arg2):
        super(Foo, self).__init__()
        # Foo-specific initialization
</snippet></ROW><ROW><id>15836544</id><snippet>unpack</snippet></ROW><ROW><id>15836544</id><snippet>Python 2.4.3 (#1, May  5 2011, 16:39:10) 
[GCC 4.1.2 20080704 (Red Hat 4.1.2-50)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from struct import *
&gt;&gt;&gt; unpack('hhl',"\001\027\002\025\001+\001\024" )
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
struct.error: unpack str size does not match format
&gt;&gt;&gt; unpack('=hhl',"\001\027\002\025\001+\001\024" )
(5889, 5378, 335620865)
</snippet></ROW><ROW><id>15836544</id><snippet>struct.unpack</snippet></ROW><ROW><id>15836686</id><snippet>drawRectangle</snippet></ROW><ROW><id>15836686</id><snippet>applyLayers()</snippet></ROW><ROW><id>15836686</id><snippet>&gt;&gt;&gt; from SimpleCV import Image,Color
&gt;&gt;&gt; Color.RED
(255, 0, 0)
&gt;&gt;&gt; i=Image((100,100))  
&gt;&gt;&gt; i.drawRectangle(10,10,20,20,Color.RED,0,255) 
&gt;&gt;&gt; i.getPixel(15,15)
(0.0, 0.0, 0.0)   
</snippet></ROW><ROW><id>15836686</id><snippet>&gt;&gt;&gt; i=i.applyLayers() 
&gt;&gt;&gt; i.getPixel(15,15)
(254.0, 0.0, 0.0)
</snippet></ROW><ROW><id>15836714</id><snippet>choices</snippet></ROW><ROW><id>15836714</id><snippet>...
parser.add_argument('--val', dest='val', action='store',
                      choices=['a','b','c'],
                      help='Special testing value')

args = parser.parse_args(sys.argv[1:])
</snippet></ROW><ROW><id>15836715</id><snippet>chatserver.py</snippet></ROW><ROW><id>15836715</id><snippet>root</snippet></ROW><ROW><id>15836715</id><snippet>chmod 777 chatserver.py</snippet></ROW><ROW><id>15836715</id><snippet>groupadd chatserver
</snippet></ROW><ROW><id>15836715</id><snippet>usermod -a -G chatserver willroberts
</snippet></ROW><ROW><id>15836715</id><snippet>chatserver.py</snippet></ROW><ROW><id>15836715</id><snippet>chown root:chatserver chatserver.py
</snippet></ROW><ROW><id>15836865</id><snippet>exec</snippet></ROW><ROW><id>15836865</id><snippet>def your_common_function(i, txt):
   # here you may decide what to do with arguments according to "i" value
   if i == 1:
      print(txt)
   else:
      print(txt+'s')

for i in range(1, 233):
    exec("def add%d(txt):\n\tyour_common_function(%d, txt)" % (i, i))

add1("hello world")  # prints "hello world"
add167("hello world")  # prints "hello worlds" 
</snippet></ROW><ROW><id>15836880</id><snippet>sys.exit()</snippet></ROW><ROW><id>15836880</id><snippet>SystemExit</snippet></ROW><ROW><id>15836880</id><snippet>SystemExit</snippet></ROW><ROW><id>15836880</id><snippet>exit_test.py</snippet></ROW><ROW><id>15836880</id><snippet>import sys
import unittest


def func():
    sys.exit()


class MyTest(unittest.TestCase):

    def test_func(self):
        self.assertRaises(SystemExit, func)


if __name__ == "__main__":
    unittest.main()
</snippet></ROW><ROW><id>15836880</id><snippet>$ python exit_test.py 
.
----------------------------------------------------------------------
Ran 1 test in 0.000s

OK
</snippet></ROW><ROW><id>15836998</id><snippet>parser = argparse.ArgumentParser()
parser.add_argument('-a',default=[None],action='store',type=int,nargs='*')
print parser.parse_args(''.split())
print parser.parse_args('-a'.split())
print parser.parse_args('-a 1 2 3'.split())
</snippet></ROW><ROW><id>15836998</id><snippet>-a</snippet></ROW><ROW><id>15836998</id><snippet>import argparse
class MyAction(argparse.Action):
    def __call__(self,parser,namespace,values,option_string=None):
        if not values:
            setattr(namespace,self.dest,[0])
        else:
            setattr(namespace,self.dest,values)

parser = argparse.ArgumentParser()
parser.add_argument('-a',default=[None],action=MyAction,type=int,nargs='*')
print parser.parse_args(''.split())
print parser.parse_args('-a'.split())
print parser.parse_args('-a 1 2 3'.split())
</snippet></ROW><ROW><id>15837097</id><snippet>&gt;&gt;&gt; out = [[u'test', None, 35], [u'7kv903nfjfr9', 0, 35], [u'm3u33mm534o', 14, 23], [u'2w3dfbv333g', 20, 34]]
&gt;&gt;&gt; x = out.sort(key=lambda x: float(x[1]))
...
TypeError: float() argument must be a string or a number
</snippet></ROW><ROW><id>15837097</id><snippet>for i in out:
    try:
        float(i[1])
    except TypeError:
        print "error is here:", i
</snippet></ROW><ROW><id>15837131</id><snippet>zip(*[locals()[x] for x in my_arguments.split(',')])</snippet></ROW><ROW><id>15837131</id><snippet>locals</snippet></ROW><ROW><id>15837131</id><snippet>globals</snippet></ROW><ROW><id>15837131</id><snippet>A</snippet></ROW><ROW><id>15837131</id><snippet>B</snippet></ROW><ROW><id>15837131</id><snippet>C</snippet></ROW><ROW><id>15837131</id><snippet>namespace = {'A':A,
             'B':B,
             'C':C,
            }
zip_args = [namespace[x.strip()] for x in my_arguments.split(',')]
output = zip(*zip_args)
</snippet></ROW><ROW><id>15837131</id><snippet>locals()</snippet></ROW><ROW><id>15837131</id><snippet>output</snippet></ROW><ROW><id>15837222</id><snippet>xx[xx['Business']=="1"]['Label'].tolist()
</snippet></ROW><ROW><id>15837325</id><snippet>lambertw.c</snippet></ROW><ROW><id>15837504</id><snippet>maxlen</snippet></ROW><ROW><id>15837504</id><snippet>def get_longest(seq):
    maxlen = -1
    ret = []
    for el in seq:
        if len(el) &gt; maxlen:
            ret = [el]
            maxlen = len(el)
        elif len(el) == maxlen:
            ret.append(el)
    return ret

sequences = [['aaa'],['aaaa','bb'],[],['aaaaaa','bb','cccccc']]
example_output = list(map(get_longest, sequences))
print(example_output)
</snippet></ROW><ROW><id>15837504</id><snippet>[['aaa'], ['aaaa'], [], ['aaaaaa', 'cccccc']]
</snippet></ROW><ROW><id>15837629</id><snippet>PYTHON_PATH</snippet></ROW><ROW><id>15837629</id><snippet>sys.path</snippet></ROW><ROW><id>15837796</id><snippet>&gt;&gt;&gt; random.sample(set('abcdefghijklmnopqrstuvwxyz'), 1)
['f']
</snippet></ROW><ROW><id>15837814</id><snippet>book</snippet></ROW><ROW><id>15837814</id><snippet>books</snippet></ROW><ROW><id>15837814</id><snippet>&lt;books&gt;
  &lt;book&gt; ... &lt;/book&gt;
  &lt;book&gt; ... &lt;/book&gt;
&lt;/books&gt;
</snippet></ROW><ROW><id>15837814</id><snippet>bad_line = xmlDocData.splitlines()[12]
</snippet></ROW><ROW><id>15837832</id><snippet>NewCaseFile.csv</snippet></ROW><ROW><id>15837832</id><snippet>.close()</snippet></ROW><ROW><id>15837868</id><snippet>class MyClass(metaclass=MyMeta):
    pass
</snippet></ROW><ROW><id>15837974</id><snippet>def f(ls):
    ct=0
    for x in ls:
    #       ^     Do not call the method, but just parse through the list 
        if x%2==1:
            ct+=x
    return(ct)
    #     ^  ^ parenthesis are not necessary 

print(f([2,5,4,6,7,8,2]))
#      ^               ^    Missing paranthesis
</snippet></ROW><ROW><id>15838079</id><snippet>request_exit_status</snippet></ROW><ROW><id>15838079</id><snippet>exit-status</snippet></ROW><ROW><id>15838079</id><snippet>def request_exit_status(self, data):
    """
    When the server sends the command's exit status, record it for later
    delivery to the protocol.

    @param data: The network-order four byte representation of the exit
        status of the command.
    @type data: L{bytes}
    """
    (status,) = unpack('&gt;L', data)
    if status != 0:
        self._reason = ProcessTerminated(status, None, None)
</snippet></ROW><ROW><id>15838079</id><snippet>request_exit_signal</snippet></ROW><ROW><id>15838079</id><snippet>exit-signal</snippet></ROW><ROW><id>15838079</id><snippet>exit-status</snippet></ROW><ROW><id>15838079</id><snippet>def request_exit_signal(self, data):
    """
    When the server sends the command's exit status, record it for later
    delivery to the protocol.

    @param data: The network-order four byte representation of the exit
        signal of the command.
    @type data: L{bytes}
    """
    (signal,) = unpack('&gt;L', data)
    self._reason = ProcessTerminated(None, signal, None)
</snippet></ROW><ROW><id>15838079</id><snippet>SSHChannel</snippet></ROW><ROW><id>15838079</id><snippet>request_foo</snippet></ROW><ROW><id>15838182</id><snippet>db.collection.aggregate({$group:{_id:"$loc", count: {$sum:1}}}
</snippet></ROW><ROW><id>15838322</id><snippet>__traceback__</snippet></ROW><ROW><id>15838322</id><snippet>except Exception as e:
    et, ei, tb = sys.exc_info()
    ei.filename = filename
    ei.__traceback__ = tb
    raise ei
</snippet></ROW><ROW><id>15838322</id><snippet>.with_traceback()</snippet></ROW><ROW><id>15838322</id><snippet>except Exception as e:
    et, ei, tb = sys.exc_info()
    ei.filename = filename
    raise ei.with_traceback(tb)
</snippet></ROW><ROW><id>15838322</id><snippet>raise</snippet></ROW><ROW><id>15838322</id><snippet>__traceback__</snippet></ROW><ROW><id>15838322</id><snippet>class FilenameException(Exception):
    filename = None
    def __init__(self, filename):
        super().__init__(filename)
        self.filename = filename

try:
    something(filename)
except Exception as e:
    raise FilenameException(filename) from e
</snippet></ROW><ROW><id>15838322</id><snippet>newexception.__context__</snippet></ROW><ROW><id>15838395</id><snippet>\mathdefault{...}</snippet></ROW><ROW><id>15838395</id><snippet>\mathregular{...}</snippet></ROW><ROW><id>15838474</id><snippet>SONManipulator</snippet></ROW><ROW><id>15838474</id><snippet>from pymongo.son_manipulator import SONManipulator

class Transform(SONManipulator):
  def transform_incoming(self, son, collection):
    for (key, value) in son.items():
      if isinstance(value, Custom):
        son[key] = encode_custom(value)
      elif isinstance(value, dict): # Make sure we recurse into sub-docs
        son[key] = self.transform_incoming(value, collection)
    return son
  def transform_outgoing(self, son, collection):
    for (key, value) in son.items():
      if isinstance(value, dict):
        if "_type" in value and value["_type"] == "custom":
          son[key] = decode_custom(value)
        else: # Again, make sure to recurse into sub-docs
          son[key] = self.transform_outgoing(value, collection)
    return son
</snippet></ROW><ROW><id>15838474</id><snippet>db.add_son_manipulator(Transform())
</snippet></ROW><ROW><id>15838474</id><snippet>_type</snippet></ROW><ROW><id>15838589</id><snippet>append()</snippet></ROW><ROW><id>15838589</id><snippet>y1</snippet></ROW><ROW><id>15838589</id><snippet>None</snippet></ROW><ROW><id>15838589</id><snippet>y1.append()</snippet></ROW><ROW><id>15838589</id><snippet>y2.append()</snippet></ROW><ROW><id>15838589</id><snippet>y1</snippet></ROW><ROW><id>15838589</id><snippet>y2</snippet></ROW><ROW><id>15838589</id><snippet>&gt;&gt;&gt; a = []
&gt;&gt;&gt; b = a.append(1)
&gt;&gt;&gt; b is None
True
&gt;&gt;&gt; a
[1]
&gt;&gt;&gt; a.append(2)
&gt;&gt;&gt; a
[1, 2]
</snippet></ROW><ROW><id>15838589</id><snippet>+</snippet></ROW><ROW><id>15838589</id><snippet>[]</snippet></ROW><ROW><id>15838589</id><snippet>3</snippet></ROW><ROW><id>15838589</id><snippet>&gt;&gt;&gt; a = a + [3]
&gt;&gt;&gt; a
[1, 2, 3]
</snippet></ROW><ROW><id>15838611</id><snippet>__str__</snippet></ROW><ROW><id>15838611</id><snippet>print(varulista[0])
</snippet></ROW><ROW><id>15838611</id><snippet>def __str__(self):
    s  = "Name:    %s\n" % self.namn
    s += "Price:   %s\n" % self.pris
    s += "Quantity:%s\n" % self.antal
    s += "Code:    %s\n" % self.kod
</snippet></ROW><ROW><id>15838611</id><snippet>print(varulista)</snippet></ROW><ROW><id>15838611</id><snippet>__repr__</snippet></ROW><ROW><id>15838611</id><snippet>varulista</snippet></ROW><ROW><id>15838611</id><snippet>__repr__</snippet></ROW><ROW><id>15838611</id><snippet>__repr__</snippet></ROW><ROW><id>15838611</id><snippet>eval()</snippet></ROW><ROW><id>15838611</id><snippet>__repr__()</snippet></ROW><ROW><id>15838611</id><snippet>eval()</snippet></ROW><ROW><id>15838611</id><snippet>__repr__()</snippet></ROW><ROW><id>15838611</id><snippet>__repr__()</snippet></ROW><ROW><id>15838611</id><snippet>eval()</snippet></ROW><ROW><id>15838611</id><snippet>__repr__()</snippet></ROW><ROW><id>15838611</id><snippet>[Item{Name:"Hat",Price:150,Quantity:100,Code:223},Item{Name:"Shirt",Price:450,Quantity:10,Code:225}]
</snippet></ROW><ROW><id>15838611</id><snippet>__repr()__</snippet></ROW><ROW><id>15838611</id><snippet>print(varulista)
</snippet></ROW><ROW><id>15838611</id><snippet>for item in varulista: print item
</snippet></ROW><ROW><id>15838611</id><snippet>__str__()</snippet></ROW><ROW><id>15838611</id><snippet>__str__</snippet></ROW><ROW><id>15838611</id><snippet>__repr__</snippet></ROW><ROW><id>15838611</id><snippet># Define a convenience function to add items to the dictionary
def add_item(d,i): d[i.kod] = i

# Create a new dictionary
items = {}

# Add items to dictionary
add_item(items, vara(223, "Hat", 150, 100))
add_item(items, vara(225, "Shirt", 450, 10))
</snippet></ROW><ROW><id>15838611</id><snippet>items</snippet></ROW><ROW><id>15838611</id><snippet>items[223] #&lt;-- This is the "Hat" item
items[225] #&lt;-- This is the "Shirt" item
</snippet></ROW><ROW><id>15838691</id><snippet>df = subprocess.Popen(["df", options.partname], stdout=subprocess.PIPE)
output = df.communicate()[0]
output = ' '.join(output.splitlines()[1:])
device, size, used, available, percent, mountpoint = output.split()
</snippet></ROW><ROW><id>15839028</id><snippet>&lt;li&gt;((?!&lt;li&gt;).)*?&lt;/li&gt;
</snippet></ROW><ROW><id>15839028</id><snippet>&lt;li&gt;</snippet></ROW><ROW><id>15839028</id><snippet>&lt;/li&gt;</snippet></ROW><ROW><id>15839028</id><snippet>&lt;li&gt;</snippet></ROW><ROW><id>15839028</id><snippet>&lt;li&gt; &lt;ul&gt;&lt;li&gt;&lt;ul&gt;&lt;li&gt;this is a bullet lev 3&lt;/li&gt;</snippet></ROW><ROW><id>15839028</id><snippet>&lt;li&gt;this is a bullet lev 3&lt;/li&gt;</snippet></ROW><ROW><id>15839207</id><snippet>reload</snippet></ROW><ROW><id>15839207</id><snippet>.pyc</snippet></ROW><ROW><id>15839315</id><snippet>__init__.py</snippet></ROW><ROW><id>15839315</id><snippet>from .ghost import Ghost
</snippet></ROW><ROW><id>15839371</id><snippet>os.path.join</snippet></ROW><ROW><id>15839371</id><snippet>os.path.join(DB_NAME, 'sqlite3DB.db')
</snippet></ROW><ROW><id>15839428</id><snippet>parse_start_url</snippet></ROW><ROW><id>15839428</id><snippet>from scrapy.contrib.spiders import CrawlSpider, Rule
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor

class DownloadSpider(CrawlSpider):
    name = 'downloader'
    allowed_domains = ['bnt-chemicals.de']
    start_urls = [
        "http://www.bnt-chemicals.de",
    ]
    rules = (
        Rule(SgmlLinkExtractor(allow='prod'), callback='parse_start_url', follow=True),
    )
    fname = 0

    def parse_start_url(self, response):
        self.fname += 1
        fname = '%s.txt' % self.fname

        with open(fname, 'w') as f:
            f.write('%s, %s\n' % (response.url, response.meta.get('depth', 0)))
            f.write('%s\n' % response.body)
</snippet></ROW><ROW><id>15839583</id><snippet>parse()</snippet></ROW><ROW><id>15839583</id><snippet>def parse(self, response):
    if 'person.xml' in response.url:
        item = PersonItem()
    elif 'product.xml' in response.url:
        item = ProductItem()
    else:
        raise Exception('Could not determine item type')
</snippet></ROW><ROW><id>15839583</id><snippet>start_requests()</snippet></ROW><ROW><id>15839583</id><snippet>class MySpider(BaseSpider):
    name = "myspider"
    allowed_domains = ["example.com"]
    pid = "4545-fw"
    person = "bob"

    def start_requests(self):
        start_urls = (
            ('http://www.example.com/person/%s/person.xml' % self.person, PersonItem),
            ('http://www.example.com/%s/product.xml' % self.pid, ProductItem),
        )
        for url, cls in start_urls:
            yield Request(url, meta=dict(cls=cls))

    def parse(self, response):
        item = response.meta['cls']()
</snippet></ROW><ROW><id>15839640</id><snippet>x</snippet></ROW><ROW><id>15839640</id><snippet>y</snippet></ROW><ROW><id>15839640</id><snippet>def check_victory(board):
    combinations = [
        # horizontal
        ((0,0), (1,0), (2,0)),
        ((0,1), (1,1), (2,1)),
        ((0,2), (1,2), (2,2)),
        # vertical
        ((0,0), (0,1), (0,2)),
        ((1,0), (1,1), (1,2)),
        ((2,0), (2,1), (2,2)),
        # crossed
        ((0,0), (1,1), (2,2)),
        ((2,0), (1,1), (0,2))
    ]

    for coordinates in combinations:
        letters = [board[y][x] for x,y in coordinates]
        if len(set(letters)) == 1:
            return letters[0] # returns corresponding letter for winner (X/O)

    return False
</snippet></ROW><ROW><id>15839646</id><snippet>.pyc</snippet></ROW><ROW><id>15839646</id><snippet>.pyc</snippet></ROW><ROW><id>15839646</id><snippet>.py</snippet></ROW><ROW><id>15839646</id><snippet>.pyc</snippet></ROW><ROW><id>15839646</id><snippet>.pyc</snippet></ROW><ROW><id>15839646</id><snippet>.py</snippet></ROW><ROW><id>15839646</id><snippet>.pyc</snippet></ROW><ROW><id>15839703</id><snippet>from x import *</snippet></ROW><ROW><id>15840231</id><snippet>"all"</snippet></ROW><ROW><id>15840231</id><snippet>"all"</snippet></ROW><ROW><id>15840231</id><snippet>canvas.delete("all")
</snippet></ROW><ROW><id>15840231</id><snippet>"all"</snippet></ROW><ROW><id>15840349</id><snippet>return (high_price)</snippet></ROW><ROW><id>15840349</id><snippet>high_price</snippet></ROW><ROW><id>15840349</id><snippet>(high_price[0],low_price[0])</snippet></ROW><ROW><id>15840349</id><snippet>high_price</snippet></ROW><ROW><id>15840349</id><snippet>return (high_price,)</snippet></ROW><ROW><id>15840689</id><snippet>try..except</snippet></ROW><ROW><id>15840689</id><snippet>import datetime as DT
import numpy as np

def timeConv(x):
    try:
        return DT.datetime.strptime(x, '%Y-%m-%d %H:%M:%S.%f')
    except ValueError as err:
        return DT.datetime.strptime(x, '%Y-%m-%d %H:%M:%S')

time = np.genfromtxt(file, dtype='object', delimiter=',', skip_header=4,
                     usecols=(0), converters = {0: timeConv})
</snippet></ROW><ROW><id>15840689</id><snippet>timeConv</snippet></ROW><ROW><id>15840689</id><snippet>genfromtxt</snippet></ROW><ROW><id>15840689</id><snippet>lambda</snippet></ROW><ROW><id>15840689</id><snippet>import dateutil.parser as dparser
import numpy as np

time = np.genfromtxt(file, dtype='object', delimiter=',', skip_header=4,
                     usecols=(0), converters = {0: dparser.parse})
</snippet></ROW><ROW><id>15840689</id><snippet>dparser.parse</snippet></ROW><ROW><id>15840689</id><snippet>2013-8-9</snippet></ROW><ROW><id>15840689</id><snippet>dayfirst</snippet></ROW><ROW><id>15840689</id><snippet>yearfirst</snippet></ROW><ROW><id>15840695</id><snippet>http.server</snippet></ROW><ROW><id>15840729</id><snippet>multiprocessing</snippet></ROW><ROW><id>15840729</id><snippet>execution</snippet></ROW><ROW><id>15840729</id><snippet>execution</snippet></ROW><ROW><id>15840729</id><snippet>import multiprocessing
import execution
import datetime

#assume we have a function:
#exection.run_main_with_args(filename,name,today_str,dbfolder)

today = datetime.datetime.today()
def my_execute(filename):
    if '.htm' in filename:
       name = filename.strip('.htm')
       dbfolder = "C:/newscript/db/" + name
       os.makedirs(dbfolder)
       execution.run_main_with_args(filename,name,str(today),dbfolder)

p = multiprocessing.Pool()
p.map(my_execute,list_of_files_to_process)
</snippet></ROW><ROW><id>15840742</id><snippet>input()</snippet></ROW><ROW><id>15840742</id><snippet>hello</snippet></ROW><ROW><id>15840742</id><snippet>raw_input()</snippet></ROW><ROW><id>15840742</id><snippet>print</snippet></ROW><ROW><id>15841088</id><snippet>import csv

with open('file1') as file1, open('file2') as file2, open('output', 'w') as output:
    next(file1), next(file2) # skip the header lines
    c1, c2 = csv.reader(file1, delimiter=' '), csv.reader(file2, delimiter=' ')
    c3 = csv.writer(output, delimiter=' ')
    c3.writerow(['listname', 'a', 'b', 'diff(b-a)'])
    for (row1, row2) in zip(c1, c2):
        c3.writerow(('full', row1[1], row2[1], int(row2[1])-int(row1[1])))
        c3.writerow(('part', row1[2], row2[2], int(row2[2])-int(row1[2])))
</snippet></ROW><ROW><id>15841088</id><snippet>full part
1 30 10
</snippet></ROW><ROW><id>15841088</id><snippet>full part
1 32 15
</snippet></ROW><ROW><id>15841088</id><snippet>listname a b diff(b-a)
full 30 32 2
part 10 15 5
</snippet></ROW><ROW><id>15841088</id><snippet>delimiter='\t'</snippet></ROW><ROW><id>15841088</id><snippet>delimiter=' '</snippet></ROW><ROW><id>15841088</id><snippet>delimiter=' '</snippet></ROW><ROW><id>15841088</id><snippet>skipinitialspace=True</snippet></ROW><ROW><id>15841088</id><snippet>c3.writerow(…)</snippet></ROW><ROW><id>15841088</id><snippet>c3.writerow('{:&lt;20}'.format(col) for col in …)</snippet></ROW><ROW><id>15841088</id><snippet>writer</snippet></ROW><ROW><id>15841088</id><snippet>csv</snippet></ROW><ROW><id>15841088</id><snippet>csv</snippet></ROW><ROW><id>15841088</id><snippet>DictReader</snippet></ROW><ROW><id>15841088</id><snippet>DictWriter</snippet></ROW><ROW><id>15841088</id><snippet>reader</snippet></ROW><ROW><id>15841088</id><snippet>writer</snippet></ROW><ROW><id>15841088</id><snippet>csv.reader</snippet></ROW><ROW><id>15841088</id><snippet>zip</snippet></ROW><ROW><id>15841088</id><snippet>itertools.izip</snippet></ROW><ROW><id>15841088</id><snippet>reader</snippet></ROW><ROW><id>15841088</id><snippet>int</snippet></ROW><ROW><id>15841119</id><snippet>from __future__ import division
import numpy as np

# Create a sample data set
c1, c2 = 10, 5
idx1, idx2 = np.arange(c1), np.arange(c2)
idx1, idx2 = np.repeat(idx1, c2), np.tile(idx2, c1)

items = 1000
i = np.random.randint(c1*c2, size=(items - 2*c1*c2,))
d = np.random.rand(items+5)

dataset = np.empty((items+5,), [('idx1', np.int), ('idx2', np.int),
                             ('data', np.float)])
dataset['idx1'][:2*c1*c2] =  np.tile(idx1, 2)
dataset['idx1'][2*c1*c2:-5] = idx1[i]
dataset['idx2'][:2*c1*c2] = np.tile(idx2, 2)
dataset['idx2'][2*c1*c2:-5] = idx2[i]
dataset['data'] = d
# Add blocks with only 2 and only 3 elements to test corner case
dataset['idx1'][-5:] = -1
dataset['idx2'][-5:] = [0] * 2 + [1]*3
</snippet></ROW><ROW><id>15841119</id><snippet># For randomness, shuffle the entire array
np.random.shuffle(dataset)

blocks, _ = np.unique(dataset[['idx1', 'idx2']], return_inverse=True)
block_count = np.bincount(_)
where = np.argsort(_)
block_start = np.concatenate(([0], np.cumsum(block_count)[:-1]))

# If we have n elements in a block, and we assign 1 to each array, we
# are left with only n-2. If we randomly assign a fraction x of these
# to the first array, the expected ratio of items will be
# (x*(n-2) + 1) : ((1-x)*(n-2) + 1)
# Setting the ratio equal to 4 (80/20) and solving for x, we get
# x = 4/5 + 3/5/(n-2)

x = 4/5 + 3/5/(block_count - 2)
x = np.clip(x, 0, 1) # if n in (2, 3), the ratio is larger than 1
threshold = np.repeat(x, block_count)
threshold[block_start] = 1 # first item goes to A
threshold[block_start + 1] = 0 # seconf item goes to B

a_idx = threshold &gt; np.random.rand(len(dataset))

A = dataset[where[a_idx]]
B = dataset[where[~a_idx]]
</snippet></ROW><ROW><id>15841119</id><snippet>&gt;&gt;&gt; len(A)
815
&gt;&gt;&gt; len(B)
190
&gt;&gt;&gt; np.all(np.unique(A[['idx1', 'idx2']]) == np.unique(B[['idx1', 'idx2']]))
True
</snippet></ROW><ROW><id>15841246</id><snippet>for lis in lista:   
    for r in listaCorta:
        direccion='%s/%s_1.pc2' % (userPath, r)
        print lis,direccion
</snippet></ROW><ROW><id>15841246</id><snippet>for lis in lista:
    direccion='%s/%s_1.pc2' % (userPath, str(lis).split(".")[1])
</snippet></ROW><ROW><id>15841246</id><snippet>import os
userPath=("/mnt/die/go")

lista = ("r.alas", "r.guantes","r.cabeza","r.res")

for lis in lista:   
    direccion='%s/%s_1.pc2' % (userPath, str(lis).split(".")[1])
    print lis, direccion
</snippet></ROW><ROW><id>15841439</id><snippet>orig_array[[slice(o, o+e) for o, e in zip(offset, extent)]]
</snippet></ROW><ROW><id>15841439</id><snippet>&gt;&gt;&gt; x = np.arange(4**4).reshape((4, 4, 4, 4))
&gt;&gt;&gt; x[0:2, 1:2, 2:3, 1:3]
array([[[[25, 26]]],


       [[[89, 90]]]])
&gt;&gt;&gt; offset = (0, 1, 2, 1)
&gt;&gt;&gt; extent = (2, 1, 1, 2)
&gt;&gt;&gt; x[[slice(o, o+e) for o, e in zip(offset, extent)]]
array([[[[25, 26]]],


       [[[89, 90]]]])
</snippet></ROW><ROW><id>15841486</id><snippet>type</snippet></ROW><ROW><id>15841486</id><snippet>classobj</snippet></ROW><ROW><id>15841486</id><snippet>type</snippet></ROW><ROW><id>15841486</id><snippet>classobj</snippet></ROW><ROW><id>15841486</id><snippet>types</snippet></ROW><ROW><id>15841486</id><snippet>isinstance(MyClass, (types.TypeType, types.ClassType))
</snippet></ROW><ROW><id>15841486</id><snippet>isinstance(MyClass, type)
</snippet></ROW><ROW><id>15841486</id><snippet>str</snippet></ROW><ROW><id>15841486</id><snippet>&gt;&gt;&gt; class MyClassicClass:
...     pass
&gt;&gt;&gt; str(type(MyClassicClass)) == "&lt;type 'classobj'&gt;"
True
&gt;&gt;&gt; str("&lt;type 'classobj'&gt;") == "&lt;type 'classobj'&gt;"
True
</snippet></ROW><ROW><id>15841486</id><snippet>&gt;&gt;&gt; type(MyClassicClass) == types.ClassType
True
&gt;&gt;&gt; "&lt;type 'classobj'&gt;" == types.ClassType
False
</snippet></ROW><ROW><id>15841486</id><snippet>repr</snippet></ROW><ROW><id>15841486</id><snippet>str</snippet></ROW><ROW><id>15841685</id><snippet>def proc(n):
    for i in range(0,n):
        C = i
        p.append(C)
</snippet></ROW><ROW><id>15841685</id><snippet>global</snippet></ROW><ROW><id>15841685</id><snippet>n = 0
def set_n(i):
    global n
    n = i
</snippet></ROW><ROW><id>15841802</id><snippet>[np.asarray(Image.open(os.path.join(dirname, fn))) for fn in os.listdir(dirname)]</snippet></ROW><ROW><id>15841802</id><snippet>X</snippet></ROW><ROW><id>15841802</id><snippet>X</snippet></ROW><ROW><id>15841802</id><snippet>shape</snippet></ROW><ROW><id>15841802</id><snippet>dim0 = X[0].shape</snippet></ROW><ROW><id>15841883</id><snippet>df[df.names.index('a')] = df.rx2('a').ro / 10
</snippet></ROW><ROW><id>15841906</id><snippet>a = '\nThu Apr 04           Finish PTI Video\n                     Weigh In\n                         Eat out\n\nSat Apr 06           Collect NIC\n\nMon Apr 08           Serum uric acid        test\n\n'
b = {}
same_day = ''
for x in a.split('\n'):
    c = x.split('           ')
    if c[0] is '':
        for q in c:
            if q is not '':
                b.update({same_day: b[same_day] + ', ' + q.strip()})
                break
    else:
        same_day = c[0]
        b.update({c[0] : c[1]})
</snippet></ROW><ROW><id>15841924</id><snippet>    self.entries = []
    for i in range (int(self.row)):
        self.entries.append([])
        for x in range (int(self.columns)):
            ...
            e = Entry(self, width=15)
            self.entries[-1].append(e)
            ...
</snippet></ROW><ROW><id>15841924</id><snippet> self.entries[row_idx][col_idx]
</snippet></ROW><ROW><id>15842170</id><snippet>[txt for item in hxs.select('some-item/value') for txt in item.select('text()').extract() or [u'']]
</snippet></ROW><ROW><id>15842269</id><snippet>[item for item in L1 if item not in L2]
</snippet></ROW><ROW><id>15842269</id><snippet>L2</snippet></ROW><ROW><id>15842335</id><snippet>if len(tarray) &gt;= 1:
    res = zip(tarray, xarray) if len(tarray) == len(xarray) else xarray
else:
    # Error message

for each in res:
    # Do some stuff 
</snippet></ROW><ROW><id>15842806</id><snippet>letter</snippet></ROW><ROW><id>15842806</id><snippet>def print_guessed(letter):
    #do_stuff
</snippet></ROW><ROW><id>15842806</id><snippet>print_guessed(letter)
</snippet></ROW><ROW><id>15842891</id><snippet>@app.route('/user/&lt;name&gt;-&lt;location&gt;')
def user(name, location):
    # do stuff...
</snippet></ROW><ROW><id>15842891</id><snippet>/user/James-Oregon</snippet></ROW><ROW><id>15842891</id><snippet>name</snippet></ROW><ROW><id>15842891</id><snippet>location</snippet></ROW><ROW><id>15843010</id><snippet>fig, axes_lst = plt.subplots(2, 1)

ln_1, ln_2 = axes_lst[0].plot(range(5), range(5), range(5), np.arange(5) ** 2)
axes_lst[1].legend((ln_1, ln_2), ('lin', 'quad'), loc='center')
plt.draw()
</snippet></ROW><ROW><id>15843010</id><snippet>axes</snippet></ROW><ROW><id>15843010</id><snippet>legend</snippet></ROW><ROW><id>15843088</id><snippet>&gt;&gt;&gt; result = [None]*(len(by_time)+len(by_prio))
&gt;&gt;&gt; result[::2] = by_time
&gt;&gt;&gt; result[1::2] = by_prio
&gt;&gt;&gt; result = [result.pop(i) for i in range(len(result))[::-1] if result.count(result[i]) &gt; 1 ]
</snippet></ROW><ROW><id>15843150</id><snippet>l1 = set(open('f1.csv'))
l2 = set(open('f2.csv'))
open('f3.csv', 'wb').writelines(l1 &amp; l2)
</snippet></ROW><ROW><id>15843150</id><snippet>l1</snippet></ROW><ROW><id>15843150</id><snippet>l2</snippet></ROW><ROW><id>15843150</id><snippet>l1 &amp; l2</snippet></ROW><ROW><id>15843404</id><snippet>eval</snippet></ROW><ROW><id>15843404</id><snippet>builtins</snippet></ROW><ROW><id>15843404</id><snippet>/* or PyEval_GetBuiltins() if you know you're at the interpreter's top level */
PyObject *builtins = PyImport_ImportModule("builtins");
PyObject *eval = PyObject_GetAttrString(builtins, "eval");
PyObject *args = Py_BuildValue("(s)", expression_as_c_string);
PyObject *result = PyObject_Call(eval, args);
</snippet></ROW><ROW><id>15843404</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>15843404</id><snippet>eval</snippet></ROW><ROW><id>15843404</id><snippet>"builtins"</snippet></ROW><ROW><id>15843404</id><snippet>"ast"</snippet></ROW><ROW><id>15843404</id><snippet>"eval"</snippet></ROW><ROW><id>15843404</id><snippet>"literal_eval"</snippet></ROW><ROW><id>15843404</id><snippet>eval</snippet></ROW><ROW><id>15843404</id><snippet>"foo = eval(%s)"</snippet></ROW><ROW><id>15843404</id><snippet>PyRun_SimpleString</snippet></ROW><ROW><id>15843404</id><snippet>Py_CompileString</snippet></ROW><ROW><id>15843404</id><snippet>PyEval_EvalCode</snippet></ROW><ROW><id>15843404</id><snippet>PyEval_GetLocals</snippet></ROW><ROW><id>15843404</id><snippet>PyEval_GetGlobals</snippet></ROW><ROW><id>15843670</id><snippet>numpy</snippet></ROW><ROW><id>15843670</id><snippet>easy_install</snippet></ROW><ROW><id>15843670</id><snippet>pip</snippet></ROW><ROW><id>15843670</id><snippet>sudo</snippet></ROW><ROW><id>15843730</id><snippet>gtk.main()</snippet></ROW><ROW><id>15843730</id><snippet>self.startItUp</snippet></ROW><ROW><id>15843730</id><snippet>broWin.startItUp</snippet></ROW><ROW><id>15843730</id><snippet>self.startItUp()</snippet></ROW><ROW><id>15843730</id><snippet>multiprocessing</snippet></ROW><ROW><id>15843730</id><snippet>fatherLoop = TopGUI()</snippet></ROW><ROW><id>15843730</id><snippet>Process</snippet></ROW><ROW><id>15843730</id><snippet>class TopGUI(gtk.Window):
    # ...
    def on_clicked(self, leButton):
        self.child = multiprocessing.Process(target=child_main)
        self.child.start()
    # ...

def parent_main():
    fatherLoop = TopGUI()

def child_main():
    broWin = SecondGUI()

if __name__ == '__main__':
    parent_main()
</snippet></ROW><ROW><id>15843730</id><snippet>TopGUI()</snippet></ROW><ROW><id>15843730</id><snippet>SecondGUI()</snippet></ROW><ROW><id>15843730</id><snippet>self.startItUp()</snippet></ROW><ROW><id>15844067</id><snippet>cpdef</snippet></ROW><ROW><id>15844067</id><snippet>cdef</snippet></ROW><ROW><id>15844134</id><snippet>timeit</snippet></ROW><ROW><id>15844134</id><snippet>time</snippet></ROW><ROW><id>15844134</id><snippet>func.__name__</snippet></ROW><ROW><id>15844134</id><snippet>testIterator</snippet></ROW><ROW><id>15844134</id><snippet>def testGenerator(arr,sample):
    for i in (x for x in sample if x in arr):
        k = random.random()

def testIterator(arr,sample):
    for i in ifilter(lambda x: x in sample, arr):
        k = random.random()

def testList(arr,sample):
    for i in [x for x in sample if x in arr]:
        k = random.random()

tests = testIterator, testGenerator, testList

for arr in listArrays:
    print 'Size of array: %s ' % len(arr)
    print 'number of iterations %s' % nb_rep
    sample = random.sample(arr, nb_elem)
    funcs = [partial(test, arr, sample) for test in tests]
    times = [timeit.timeit(func, number=nb_rep) for func in funcs]
    norm = min(*times)
    print 'maximum runtime %.6f' % max(*times)
    print 'normalized times:\n iterator: %.6f \n list: %.6f \n generator: %.6f' % (times[0]/norm,times[1]/norm,times[2]/norm)
    print '======================================================'
</snippet></ROW><ROW><id>15844134</id><snippet>k = random.random()</snippet></ROW><ROW><id>15844134</id><snippet>for</snippet></ROW><ROW><id>15844134</id><snippet>deque(it, maxlen=0)</snippet></ROW><ROW><id>15844134</id><snippet>def discard(it):
    collections.deque(it, maxlen=0)

def testGenerator(arr,sample):
    discard(x for x in sample if x in arr)

def testIterator(arr,sample):
    discard(ifilter(sample.__contains__, arr))

def testList(arr,sample):
    discard([x for x in sample if x in arr])
</snippet></ROW><ROW><id>15844134</id><snippet>discard</snippet></ROW><ROW><id>15844134</id><snippet>testIterator</snippet></ROW><ROW><id>15844134</id><snippet>ifilter</snippet></ROW><ROW><id>15844134</id><snippet>sample.__contains__</snippet></ROW><ROW><id>15844134</id><snippet>lambda x: x in sample</snippet></ROW><ROW><id>15844134</id><snippet>list</snippet></ROW><ROW><id>15844134</id><snippet>generator</snippet></ROW><ROW><id>15844134</id><snippet>iterator</snippet></ROW><ROW><id>15844134</id><snippet>iterator</snippet></ROW><ROW><id>15844134</id><snippet>generator</snippet></ROW><ROW><id>15844134</id><snippet>list</snippet></ROW><ROW><id>15844205</id><snippet>clip_on</snippet></ROW><ROW><id>15844205</id><snippet>import matplotlib.pyplot as plt

plt.ion()
fig = plt.figure()
ax = fig.add_subplot(111)

ax.text(0.5, 0.2, 'text')
ax.annotate('anno', (0.5, 0.3))
ax.text(0.5, 0.5, 'text-clip', clip_on=True)

plt.draw()
</snippet></ROW><ROW><id>15844205</id><snippet>axes.text</snippet></ROW><ROW><id>15844302</id><snippet>else</snippet></ROW><ROW><id>15844302</id><snippet>success = False
for x in list:
   if x is 1:
      do a bunch of commands
      break
   else:
      do a bunch of other commands
      success = True

if success:
    print 'Success'
</snippet></ROW><ROW><id>15844302</id><snippet>else</snippet></ROW><ROW><id>15844302</id><snippet>True</snippet></ROW><ROW><id>15844302</id><snippet>if</snippet></ROW><ROW><id>15844302</id><snippet>True</snippet></ROW><ROW><id>15844302</id><snippet>'Success'</snippet></ROW><ROW><id>15844418</id><snippet>subforum_id = 1  # some id here by which you need to sort

sql = ''.join((
    'CASE professionalNetwork ',
    'WHEN {} THEN 1 '.format(subforum_id),
    'ELSE -1',
))
q = Group.objects.extra(select={'same_subforum': sql})
q = q.extra(order_by=['same_subforum'])
</snippet></ROW><ROW><id>15844751</id><snippet>NoneType</snippet></ROW><ROW><id>15844751</id><snippet>types</snippet></ROW><ROW><id>15844751</id><snippet>None</snippet></ROW><ROW><id>15844751</id><snippet>obj is None</snippet></ROW><ROW><id>15844751</id><snippet>NoneType</snippet></ROW><ROW><id>15844751</id><snippet>NoneType = type(None)
</snippet></ROW><ROW><id>15844751</id><snippet>types.NoneType</snippet></ROW><ROW><id>15844751</id><snippet>from .. import</snippet></ROW><ROW><id>15844751</id><snippet>import types</snippet></ROW><ROW><id>15844756</id><snippet>queue</snippet></ROW><ROW><id>15844756</id><snippet>text_box</snippet></ROW><ROW><id>15844756</id><snippet>widget.show_popup()</snippet></ROW><ROW><id>15844756</id><snippet>Toplevel</snippet></ROW><ROW><id>15844756</id><snippet>widget.show_popup()</snippet></ROW><ROW><id>15844756</id><snippet>update_me()</snippet></ROW><ROW><id>15844756</id><snippet>self.top_frame.after(2000, self.show_popup)</snippet></ROW><ROW><id>15844756</id><snippet>pipeToWidget</snippet></ROW><ROW><id>15844756</id><snippet>pipeToPopup</snippet></ROW><ROW><id>15844756</id><snippet>mtTkinter</snippet></ROW><ROW><id>15844846</id><snippet>__all__ = ['UP', 'DOWN', 'LEFT', 'RIGHT', 'RED']

# Directions
UP = 1
DOWN = 2
LEFT = 3
RIGHT = 4

# Colors
RED = [255, 0, 0]
</snippet></ROW><ROW><id>15844846</id><snippet>from enum import *</snippet></ROW><ROW><id>15844846</id><snippet>__all__</snippet></ROW><ROW><id>15844846</id><snippet>from foo import *</snippet></ROW><ROW><id>15845085</id><snippet>constraint=False</snippet></ROW><ROW><id>15845085</id><snippet>A.add_edge(word_link[0], word_link[1], constraint=False, color='sienna', style='filled')
</snippet></ROW><ROW><id>15845106</id><snippet>bytes</snippet></ROW><ROW><id>15845106</id><snippet>\x03</snippet></ROW><ROW><id>15845106</id><snippet>print</snippet></ROW><ROW><id>15845106</id><snippet>str</snippet></ROW><ROW><id>15845106</id><snippet>bytes</snippet></ROW><ROW><id>15845106</id><snippet>b'\x03'</snippet></ROW><ROW><id>15845106</id><snippet>b</snippet></ROW><ROW><id>15845106</id><snippet>print(len(my_bytes))</snippet></ROW><ROW><id>15845106</id><snippet>print(my_bytes[0])</snippet></ROW><ROW><id>15845106</id><snippet>1</snippet></ROW><ROW><id>15845106</id><snippet>3</snippet></ROW><ROW><id>15845106</id><snippet>bytes</snippet></ROW><ROW><id>15845106</id><snippet>bytes</snippet></ROW><ROW><id>15845125</id><snippet>def addition(float1,float2):
     '''(float,float)-&gt; float

return the addition of float1 and float2 .

&gt;&gt;&gt; addition(2,3)
5.0
&gt;&gt;&gt;addition(4,6)
10.0 '''
     return float1+float2


def mean(x , y ):
    '''
(number,number)-&gt; float
return the mean of two numbers , x and y .
&gt;&gt;&gt; mean(2,4)
 3.0
&gt;&gt;&gt; mean(9,2)
5.5
 '''
    return  addition(x,y)/ 2



def Mean_Addition(t,s):
    ''' &lt;----- the error was here
(float,float)-&gt;float
return the mean of the two numbers plus the addition of the two numbers
&gt;&gt;&gt; Mean_Addition(1,2)
4.5
&gt;&gt;&gt; Mean_Addition(4,5)
13.5
'''
    return addition(t,s) + mean(t,s)
</snippet></ROW><ROW><id>15845315</id><snippet>r</snippet></ROW><ROW><id>15845315</id><snippet># ...
puntos= raw_input()
arrayPuntos = puntos.split(" ")
# ...
r =(puntos[2])
</snippet></ROW><ROW><id>15845315</id><snippet>split</snippet></ROW><ROW><id>15845315</id><snippet>r</snippet></ROW><ROW><id>15845315</id><snippet>float(r)</snippet></ROW><ROW><id>15845315</id><snippet>22.0</snippet></ROW><ROW><id>15845315</id><snippet>int(r)</snippet></ROW><ROW><id>15845315</id><snippet>22</snippet></ROW><ROW><id>15845315</id><snippet>r=int(r)</snippet></ROW><ROW><id>15845315</id><snippet>--r</snippet></ROW><ROW><id>15845315</id><snippet>--r</snippet></ROW><ROW><id>15845315</id><snippet>r</snippet></ROW><ROW><id>15845315</id><snippet>-(-(r))</snippet></ROW><ROW><id>15845315</id><snippet>r</snippet></ROW><ROW><id>15845315</id><snippet>--</snippet></ROW><ROW><id>15845315</id><snippet>r -= 1
x = str(r)
</snippet></ROW><ROW><id>15845349</id><snippet>- url: /.*?([^/]*\.css)
  static_files: css/\1
  upload: css/.*\.css
</snippet></ROW><ROW><id>15845441</id><snippet>def check_time(until_when, def_time, how_long):
    arg_dict = {def_time:how_long}
    dt = datetime.timedelta(**arg_dict)
    if until_when- datetime.datetime.now() &gt; dt:
        input('Task has been finished.\nPress any key to quit\n')
        exit()
</snippet></ROW><ROW><id>15845467</id><snippet>service.py</snippet></ROW><ROW><id>15845467</id><snippet>v1</snippet></ROW><ROW><id>15845467</id><snippet>client.py</snippet></ROW><ROW><id>15845467</id><snippet>v2</snippet></ROW><ROW><id>15845467</id><snippet>client</snippet></ROW><ROW><id>15845467</id><snippet>client.py</snippet></ROW><ROW><id>15845467</id><snippet>"""Provides a client to interact with Google Data API servers.

This module is used for version 2 of the Google Data APIs. The primary class
in this module is GDClient.

  GDClient: handles auth and CRUD operations when communicating with servers.
  GDataClient: deprecated client for version one services. Will be removed.
"""
</snippet></ROW><ROW><id>15845657</id><snippet>123%456%789</snippet></ROW><ROW><id>15845657</id><snippet>http://www.domain.com/service/?format=json&amp;key=123%25456%25789</snippet></ROW><ROW><id>15845657</id><snippet>123%456%789</snippet></ROW><ROW><id>15845657</id><snippet>http://www.domain.com/service/?format=json&amp;key=123%456%789</snippet></ROW><ROW><id>15845657</id><snippet>123E6x9</snippet></ROW><ROW><id>15845657</id><snippet>APP_KEY</snippet></ROW><ROW><id>15845657</id><snippet>APP_KEY</snippet></ROW><ROW><id>15845657</id><snippet>urlparse.parse_qs</snippet></ROW><ROW><id>15845657</id><snippet>furl</snippet></ROW><ROW><id>15845657</id><snippet>furl</snippet></ROW><ROW><id>15845657</id><snippet>furl</snippet></ROW><ROW><id>15845657</id><snippet>furl('http://www.google.com/?one=1').add({'two':2}).url</snippet></ROW><ROW><id>15845657</id><snippet>"key=123%25456%25789"</snippet></ROW><ROW><id>15845657</id><snippet>furl</snippet></ROW><ROW><id>15845657</id><snippet>request_url = furl('http://www.domain.com/service/?key={}'.format(APP_KEY)) \
    .add({
    'format'     : 'json',
    'location'      : address_line_1 + ',' + city + ',' + state,
}).url
</snippet></ROW><ROW><id>15845657</id><snippet>furl</snippet></ROW><ROW><id>15845705</id><snippet>\xC9</snippet></ROW><ROW><id>15845705</id><snippet>string_record = 'foo \xc9 bar'
print string_record.decode('Windows-1252')  # Output: "foo É bar"
</snippet></ROW><ROW><id>15845726</id><snippet>fig, ax = subplots(1, 1)
plot(randn(100));
</snippet></ROW><ROW><id>15845726</id><snippet>ax.set_xlim(20, 40)
fig
</snippet></ROW><ROW><id>15845800</id><snippet>estConButton = Button(root, text="Establish serial connection", command=estCon())
</snippet></ROW><ROW><id>15845800</id><snippet>estConButton = Button(root, text="Establish serial connection", command=estCon)
</snippet></ROW><ROW><id>15845800</id><snippet>()</snippet></ROW><ROW><id>15845900</id><snippet>class ExpandingList(list):
    def __setitem__(self, key, value):
        try:
            list.__setitem__(self, key, value)
        except IndexError:
            self.extend((key - len(self)) * [None] + [value])

&gt;&gt;&gt; a = ExpandingList()
&gt;&gt;&gt; a[1] = 4
&gt;&gt;&gt; a
[None, 4]
&gt;&gt;&gt; a[4] = 4
&gt;&gt;&gt; a
[None, 4, None, None, 4]
</snippet></ROW><ROW><id>15846062</id><snippet>f.write(g)
</snippet></ROW><ROW><id>15846062</id><snippet>f.write(g.read())
</snippet></ROW><ROW><id>15846064</id><snippet>recv</snippet></ROW><ROW><id>15846064</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>15846064</id><snippet>requests</snippet></ROW><ROW><id>15846064</id><snippet>recv</snippet></ROW><ROW><id>15846064</id><snippet>libcurl</snippet></ROW><ROW><id>15846064</id><snippet>pycurl</snippet></ROW><ROW><id>15846064</id><snippet>import pycurl

buf = ''

def callback(newbuf):
    global buf
    buf += newbuf
    if '&lt;div style="float: right; margin-left: 8px;"&gt;' in buf:
        return 0
    return len(newbuf)

c = pycurl.Curl()
c.setopt(c.URL, 'http://curl.haxx.se/dev/')
c.setopt(c.WRITEFUNCTION, callback)
try:
    c.perform()
except Exception as e:
    print(e)
c.close()

print len(buf)
</snippet></ROW><ROW><id>15846064</id><snippet>recv</snippet></ROW><ROW><id>15846064</id><snippet>buf[-len(needle):] + newbuf</snippet></ROW><ROW><id>15846064</id><snippet>receiver-multi.py</snippet></ROW><ROW><id>15846064</id><snippet>curl</snippet></ROW><ROW><id>15846064</id><snippet>multiprocessing</snippet></ROW><ROW><id>15846064</id><snippet>concurrent.futures</snippet></ROW><ROW><id>15846139</id><snippet>&gt;&gt;&gt; s = """abc: 234234
... aadfa: 235345
... bcsd: 992"""
&gt;&gt;&gt; print s
abc: 234234
aadfa: 235345
bcsd: 992
</snippet></ROW><ROW><id>15846139</id><snippet>&gt;&gt;&gt; pairs = [x.split() for x in s.split('\n') ]
&gt;&gt;&gt; pairs
[['abc:', ' 234234'], ['aadfa:', ' 235345'], ['bcsd:', ' 992']]
</snippet></ROW><ROW><id>15846139</id><snippet>&gt;&gt;&gt; for pair in pairs:
...     print '{0:10} {1}'.format(pair[0], pair[1])
...
abc:        234234
aadfa:      235345
bcsd:       992
</snippet></ROW><ROW><id>15846139</id><snippet>{0:10}</snippet></ROW><ROW><id>15846171</id><snippet>db = dbfreader(f)
headers = db.next()
spec =  db.next()
for record in db:
    print record
</snippet></ROW><ROW><id>15846386</id><snippet>BooleanField</snippet></ROW><ROW><id>15846451</id><snippet>passw</snippet></ROW><ROW><id>15846451</id><snippet>users</snippet></ROW><ROW><id>15846451</id><snippet>if passw == users[login]:
    print "Login successful!\n"
</snippet></ROW><ROW><id>15846451</id><snippet>q</snippet></ROW><ROW><id>15846451</id><snippet>displayMenu</snippet></ROW><ROW><id>15846451</id><snippet>status</snippet></ROW><ROW><id>15846451</id><snippet>status</snippet></ROW><ROW><id>15846451</id><snippet>while status != "q": 
</snippet></ROW><ROW><id>15846451</id><snippet>status</snippet></ROW><ROW><id>15846451</id><snippet>while status != "q":
    status = displayMenu()
</snippet></ROW><ROW><id>15846451</id><snippet>displayMenu</snippet></ROW><ROW><id>15846451</id><snippet>return status
</snippet></ROW><ROW><id>15846451</id><snippet>status</snippet></ROW><ROW><id>15846451</id><snippet>displayMenu</snippet></ROW><ROW><id>15846451</id><snippet>while</snippet></ROW><ROW><id>15846451</id><snippet>displayMenu</snippet></ROW><ROW><id>15846451</id><snippet>global status
</snippet></ROW><ROW><id>15846451</id><snippet>status</snippet></ROW><ROW><id>15846451</id><snippet>displayMenu</snippet></ROW><ROW><id>15846451</id><snippet>status</snippet></ROW><ROW><id>15846524</id><snippet>datetime</snippet></ROW><ROW><id>15846524</id><snippet>date</snippet></ROW><ROW><id>15846524</id><snippet>datetime.datetime.now().date()</snippet></ROW><ROW><id>15846524</id><snippet>if condtion</snippet></ROW><ROW><id>15846524</id><snippet>import datetime
if datetime.datetime.now().date() &gt;= datetime.date(2012, 1, 15): #insert your date here
    print "True" 
    ...........
    Your Code
    ...........
</snippet></ROW><ROW><id>15846685</id><snippet>string</snippet></ROW><ROW><id>15846685</id><snippet>character</snippet></ROW><ROW><id>15846685</id><snippet>Test</snippet></ROW><ROW><id>15846685</id><snippet>&gt;&gt;&gt; unicode('Test')
u'Test'
&gt;&gt;&gt; s = unicode('Test')
&gt;&gt;&gt; type(s)
&lt;type 'unicode'&gt;
</snippet></ROW><ROW><id>15846685</id><snippet>python</snippet></ROW><ROW><id>15846787</id><snippet>math module.c</snippet></ROW><ROW><id>15846787</id><snippet>static PyObject *
math_frexp(PyObject *self, PyObject *arg)
{
    int i;
    double x = PyFloat_AsDouble(arg);
    if (x == -1.0 &amp;&amp; PyErr_Occurred())
        return NULL;
    /* deal with special cases directly, to sidestep platform
       differences */
    if (Py_IS_NAN(x) || Py_IS_INFINITY(x) || !x) {
        i = 0;
    }
    else {
        PyFPE_START_PROTECT("in math_frexp", return 0);
        x = frexp(x, &amp;i);
        PyFPE_END_PROTECT(x);
    }
    return Py_BuildValue("(di)", x, i);
}
</snippet></ROW><ROW><id>15846787</id><snippet>float</snippet></ROW><ROW><id>15846787</id><snippet>PyFloat_AsDouble</snippet></ROW><ROW><id>15846787</id><snippet>exp</snippet></ROW><ROW><id>15846787</id><snippet>static PyObject *
math_factorial(PyObject *self, PyObject *arg)
{
    long x;
    PyObject *result, *odd_part, *two_valuation;

    if (PyFloat_Check(arg)) {
        PyObject *lx;
        double dx = PyFloat_AS_DOUBLE((PyFloatObject *)arg);
        if (!(Py_IS_FINITE(dx) &amp;&amp; dx == floor(dx))) {
            PyErr_SetString(PyExc_ValueError,
                            "factorial() only accepts integral values");
            return NULL;
        }
        lx = PyLong_FromDouble(dx);
        if (lx == NULL)
            return NULL;
        x = PyLong_AsLong(lx);
        Py_DECREF(lx);
.........................................................
</snippet></ROW><ROW><id>15847318</id><snippet>os.system</snippet></ROW><ROW><id>15847318</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.system('net use')
</snippet></ROW><ROW><id>15847375</id><snippet>django.utils.text.Truencate</snippet></ROW><ROW><id>15847375</id><snippet>django.utils.text.Truncator</snippet></ROW><ROW><id>15847375</id><snippet>words()</snippet></ROW><ROW><id>15847375</id><snippet>Truncator(value).words(length, html=True, truncate=' ...')
</snippet></ROW><ROW><id>15847639</id><snippet>TowelStuff/</snippet></ROW><ROW><id>15847639</id><snippet>towelstuff/</snippet></ROW><ROW><id>15847639</id><snippet>setup.py</snippet></ROW><ROW><id>15847639</id><snippet>'packages': ['towelstuff']
</snippet></ROW><ROW><id>15847639</id><snippet>TowelStuff/</snippet></ROW><ROW><id>15847639</id><snippet>site-packages/towelstuff</snippet></ROW><ROW><id>15847639</id><snippet>from towelstuff import ...</snippet></ROW><ROW><id>15847736</id><snippet>runForever</snippet></ROW><ROW><id>15847736</id><snippet>target = l.runForever</snippet></ROW><ROW><id>15847736</id><snippet>runforever()</snippet></ROW><ROW><id>15847736</id><snippet>runForever</snippet></ROW><ROW><id>15847736</id><snippet>runForever</snippet></ROW><ROW><id>15847736</id><snippet>runForever</snippet></ROW><ROW><id>15847908</id><snippet>def indices(lst, items):
    last_index = 0

    for item in items:
        last_index += lst.index(item, last_index + 1) + 1

        yield last_index
</snippet></ROW><ROW><id>15848154</id><snippet>django-db-log</snippet></ROW><ROW><id>15848154</id><snippet>models.URLField(verify_exists=False, null=True, blank=True)</snippet></ROW><ROW><id>15848154</id><snippet> from django.utils.hashcompat import md5_constructor //deprecated also
</snippet></ROW><ROW><id>15848261</id><snippet>key, value, name, password = (line.strip() for line in f)
</snippet></ROW><ROW><id>15848261</id><snippet>f.close()</snippet></ROW><ROW><id>15848261</id><snippet>with</snippet></ROW><ROW><id>15848261</id><snippet>def get_values(input_file):
    with open(input_file) as f:
        key, value, name, password = (line.strip() for line in f)
    return key, value, name, password
</snippet></ROW><ROW><id>15848261</id><snippet>def get_values(input_file):
    with open(input_file) as f:
        info = [line.strip() for line in f]
    return info
</snippet></ROW><ROW><id>15848447</id><snippet>import os, sys, re
from glob import glob

def mv(src, dest):
    print 'mv "%s" "%s"' % (src, dest)
    #os.rename(src, dest)  # uncomment this to actually rename the files

dir = sys.argv[1]

vid_files = sorted(glob(os.path.join(dir, '*.mp4')))
sub_files = sorted(glob(os.path.join(dir, '*.srt')))
assert len(sub_files) == len(vid_files), "lists of different lengths"

for vidf, subf in zip(vid_files, sub_files):
    new_vidf = re.sub(r'\.srt$', '.mp4', subf)
    if vidf == new_vidf:
        print '%s OK' % ( vidf, )
        continue
    mv(vidf, new_vidf)
</snippet></ROW><ROW><id>15848447</id><snippet>argparse</snippet></ROW><ROW><id>15848447</id><snippet>assert</snippet></ROW><ROW><id>15848452</id><snippet>ldconfig</snippet></ROW><ROW><id>15848452</id><snippet>ldconfig</snippet></ROW><ROW><id>15848452</id><snippet>make install</snippet></ROW><ROW><id>15848532</id><snippet>functools.reduce()</snippet></ROW><ROW><id>15848532</id><snippet>from functools import reduce

chains = (
    (doStuff1,),
    (doStuff1, doStuff2),
    (doStuff1, doStuff2, doStuff3),
)

for textfile in path:
    for chain in chains:
        data = reduce(lambda data, func: func(data), chain, textfile)
        calculateandPrint(data)
</snippet></ROW><ROW><id>15848532</id><snippet>reduce()</snippet></ROW><ROW><id>15848532</id><snippet>func3(func2(func1(textfile))</snippet></ROW><ROW><id>15848532</id><snippet>chain</snippet></ROW><ROW><id>15848532</id><snippet>calculateandPrint()</snippet></ROW><ROW><id>15848532</id><snippet>for chain in chains</snippet></ROW><ROW><id>15848532</id><snippet>doStuffx</snippet></ROW><ROW><id>15848532</id><snippet>for textfile in path</snippet></ROW><ROW><id>15848532</id><snippet>for chain in chains:
    for doc in documents:
        doc.list_strippedtext = reduce(lambda data, func: func(data), chain, doc.text)
    bow = createBOW(documents)  
</snippet></ROW><ROW><id>15848604</id><snippet>^</snippet></ROW><ROW><id>15848604</id><snippet>href</snippet></ROW><ROW><id>15848604</id><snippet>/im</snippet></ROW><ROW><id>15848604</id><snippet>re.</snippet></ROW><ROW><id>15848604</id><snippet>/.../flags</snippet></ROW><ROW><id>15848604</id><snippet>5678-random-stuff-here-letters-and-numbers</snippet></ROW><ROW><id>15848604</id><snippet>object_name = re.findall(r'href="(/dirone/Dir_Two\/dirthree/[^"/]*)"', url, re.I)
</snippet></ROW><ROW><id>15848604</id><snippet>^</snippet></ROW><ROW><id>15848604</id><snippet>(...)</snippet></ROW><ROW><id>15848604</id><snippet>findall()</snippet></ROW><ROW><id>15848604</id><snippet>[^"/]*</snippet></ROW><ROW><id>15848604</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; example = '&lt;a href="/dirone/Dir_Two/dirthree/5678-random-stuff-here-letters-and-numbers"&gt;'
&gt;&gt;&gt; re.findall(r'href="(/dirone/Dir_Two\/dirthree/[^"/]*)"', example, re.I)
['/dirone/Dir_Two/dirthree/5678-random-stuff-here-letters-and-numbers']
</snippet></ROW><ROW><id>15848910</id><snippet>typedbytes</snippet></ROW><ROW><id>15848928</id><snippet>class MultiOrderedDict(OrderedDict):
    def __setitem__(self, key, value):
        if isinstance(value, list) and key in self:
            self[key].extend(value)
        else:
            super(OrderedDict, self).__setitem__(key, value)

config = ConfigParser.RawConfigParser(dict_type=MultiOrderedDict)
config.read(['a.txt'])
print config.get("test",  "foo")
print config.get("test",  "xxx")
</snippet></ROW><ROW><id>15848928</id><snippet>['value1', 'value2']
['yyy']
</snippet></ROW><ROW><id>15849185</id><snippet>x</snippet></ROW><ROW><id>15849185</id><snippet>for i in range(10):  # xrange in Python 2
    for j in range(i, 10):
        calc_something(x[i], x[j])
</snippet></ROW><ROW><id>15849185</id><snippet>enumerate</snippet></ROW><ROW><id>15849185</id><snippet>for i, el in enumerate(x):
    for j in x[i:]:
        calc_something(el, j)
</snippet></ROW><ROW><id>15849206</id><snippet>s = raw_input("Please input something: ")
# now I input "f John Cleese", so that is now the value of 's'
# printing the value of 's' will let you see what it is exactly.

command = s.split(' ', 1) 
# the above code will split the string 's' on a ' ' space, 
# and only do it once, and then create a list with the pieces
# so the value of 'command' will be ['f', 'John Cleese'] for your example.

# to access items in the command list use brackets []
command[0] # 'f'
command[1] # 'John Cleese'
</snippet></ROW><ROW><id>15849213</id><snippet>print returnFiles</snippet></ROW><ROW><id>15849213</id><snippet>return returnFiles</snippet></ROW><ROW><id>15849530</id><snippet>'\xef\xbb\xbfAT+CMGL="ALL"\n\n+CMGL: 1,"REC READ","+918884100421","","13/04/05,08:24:36+22"\nhere\'s message one \n\n+CMGL: 2,"REC READ","+918884100421","","13/04/05,09:40:38+22"\nhere\'s message two\n\n+CMGL: 3,"REC READ","+918884100421","","13/04/05,09:41:04+22"\nhere\'s message three\n\n+CMGL: 4,"REC READ","+918884100421","","13/04/05,10:04:18+22"\nhere\'s message four\n\n+CMGL: 5,"REC READ","+918884100421","","13/04/05,10:04:32+22"\nhere\'s message five\n'
</snippet></ROW><ROW><id>15849530</id><snippet>''.join()</snippet></ROW><ROW><id>15849530</id><snippet>\r\n</snippet></ROW><ROW><id>15849530</id><snippet>\n</snippet></ROW><ROW><id>15849530</id><snippet>\n</snippet></ROW><ROW><id>15849530</id><snippet>findall</snippet></ROW><ROW><id>15849530</id><snippet>def parse(x):
    res = []
    match = re.finditer("\+CMGL: (\d+),""(.+)"",""(.+)"",(.*),""(.+)""\n(.+)\n", x)
    for each in match:
        res.append(each.group(6))
    return res
</snippet></ROW><ROW><id>15849530</id><snippet>["here's message one ", "here's message two", "here's message three", "here's message four", "here's message five"]</snippet></ROW><ROW><id>15849530</id><snippet>finditer</snippet></ROW><ROW><id>15849530</id><snippet>findall</snippet></ROW><ROW><id>15849530</id><snippet> def parse(x):
        res = []
        match = re.findall("\+CMGL: (\d+),""(.+)"",""(.+)"",(.*),""(.+)""\n(.+)\n", x)
        for each in match:
            res.append(each[5])
        return res
</snippet></ROW><ROW><id>15849554</id><snippet>&gt;&gt;&gt; a = []
&gt;&gt;&gt; a[:] = [a] * 4
&gt;&gt;&gt; a
[[...], [...], [...], [...]]
</snippet></ROW><ROW><id>15849554</id><snippet>list_repr</snippet></ROW><ROW><id>15849554</id><snippet>listobject.c</snippet></ROW><ROW><id>15849554</id><snippet>Py_ReprEnter</snippet></ROW><ROW><id>15849554</id><snippet>Py_ReprLeave</snippet></ROW><ROW><id>15849554</id><snippet>object.c</snippet></ROW><ROW><id>15849554</id><snippet> i = Py_ReprEnter((PyObject*)v);
 if (i != 0) {
     return i &gt; 0 ? PyString_FromString("[...]") : NULL;
 }

 // ...

 Py_ReprLeave((PyObject *)v);
 return result;
</snippet></ROW><ROW><id>15849561</id><snippet>(\.xls)+</snippet></ROW><ROW><id>15849561</id><snippet>.xls</snippet></ROW><ROW><id>15849561</id><snippet>.xls.xls</snippet></ROW><ROW><id>15849561</id><snippet>x</snippet></ROW><ROW><id>15849561</id><snippet>.xlsx</snippet></ROW><ROW><id>15849561</id><snippet>\.xls.*</snippet></ROW><ROW><id>15849561</id><snippet>.xls</snippet></ROW><ROW><id>15849561</id><snippet>basename</snippet></ROW><ROW><id>15849561</id><snippet>splitext</snippet></ROW><ROW><id>15849561</id><snippet>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; os.path.basename('home/robert/Documents/Workspace/datafile.xlsx')
'datafile.xlsx'
&gt;&gt;&gt; os.path.splitext(os.path.basename('home/robert/Documents/Workspace/datafile.xlsx'))[0]
'datafile'
</snippet></ROW><ROW><id>15849561</id><snippet>.xls</snippet></ROW><ROW><id>15849561</id><snippet>.xlsx</snippet></ROW><ROW><id>15849561</id><snippet>&gt;&gt;&gt; a = ['home/robert/Documents/Workspace/datafile.xlsx', 'home/robert/Documents/Workspace/datafile2.xls', 'home/robert/Documents/Workspace/datafile3.xlsx']
&gt;&gt;&gt; [os.path.splitext(os.path.basename(fn))[0] for fn in a]
['datafile', 'datafile2', 'datafile3']
</snippet></ROW><ROW><id>15849581</id><snippet>spacerItem</snippet></ROW><ROW><id>15849581</id><snippet>grid</snippet></ROW><ROW><id>15849581</id><snippet>
    def initUI(self):
        lb = QtGui.QLabel('Search Word')
        self.keyWordEdit = QtGui.QLineEdit()
        self.OKButton = QtGui.QPushButton('Search')
        self.containFilter = QtGui.QLineEdit()
        self.exceptFilter = QtGui.QLineEdit()
        self.result = QtGui.QTextBrowser()

        spacerItem = QtGui.QSpacerItem(30, 50)

        grid = QtGui.QGridLayout()
        grid.setSpacing(10)
        grid.addItem(&lt;b&gt;spacerItem&lt;/b&gt;, 0, 0)
        grid.addWidget(lb, 1, 0)
        grid.addWidget(self.keyWordEdit, 2, 0)
        grid.addWidget(self.OKButton, 5, 0)
        grid.addItem(&lt;b&gt;spacerItem&lt;/b&gt;, 7, 0)
        grid.addWidget(self.result, 0, 1, 8, 1)
        grid.setColumnStretch(1, 4)
        self.setLayout(grid)

</snippet></ROW><ROW><id>15849581</id><snippet>QSpacerItem</snippet></ROW><ROW><id>15849581</id><snippet>
    def initUI(self):
        lb = QtGui.QLabel('Search Word')
        self.keyWordEdit = QtGui.QLineEdit()
        self.OKButton = QtGui.QPushButton('Search')
        self.containFilter = QtGui.QLineEdit()
        self.exceptFilter = QtGui.QLineEdit()
        self.result = QtGui.QTextBrowser()

        spacerItem = QtGui.QSpacerItem(30, 50)
        &lt;b&gt;spacerItem2 = QtGui.QSpacerItem(30, 50)&lt;/b&gt;

        grid = QtGui.QGridLayout()
        grid.setSpacing(10)
        grid.addItem(spacerItem, 0, 0)
        grid.addWidget(lb, 1, 0)
        grid.addWidget(self.keyWordEdit, 2, 0)
        grid.addWidget(self.OKButton, 5, 0)
        grid.addItem(&lt;b&gt;spacerItem2&lt;/b&gt;, 7, 0)
        grid.addWidget(self.result, 0, 1, 8, 1)
        grid.setColumnStretch(1, 4)
        self.setLayout(grid)

</snippet></ROW><ROW><id>15849586</id><snippet>driver.find_elements_by_css_selector('input[id*='cell.line.order(240686080)']')
</snippet></ROW><ROW><id>15849586</id><snippet>driver.find_elements_by_xpath('//*[contains(@id, 'cell.line.order(240686080)')]')
</snippet></ROW><ROW><id>15849804</id><snippet>output.replace("\\","")
</snippet></ROW><ROW><id>15850347</id><snippet>myredis.lpush('foo', *[1,2,3,4])
</snippet></ROW><ROW><id>15850751</id><snippet>QInputDialog</snippet></ROW><ROW><id>15850751</id><snippet>setOkButtonText</snippet></ROW><ROW><id>15850751</id><snippet>setCancelButtonText</snippet></ROW><ROW><id>15850751</id><snippet>gitInt</snippet></ROW><ROW><id>15850751</id><snippet>QInputDialog</snippet></ROW><ROW><id>15850751</id><snippet>getInt</snippet></ROW><ROW><id>15850751</id><snippet>InputIntegerDialog(QtGui.QInputDialog)</snippet></ROW><ROW><id>15850780</id><snippet>AppendText()</snippet></ROW><ROW><id>15850780</id><snippet>page.textCtrl</snippet></ROW><ROW><id>15850780</id><snippet>def onButtonMessage(self, event):
    page = self.notebook3.GetCurrentPage()
    page.textCtrl.AppendText("Yeah this works ")
</snippet></ROW><ROW><id>15850780</id><snippet>MainFrame</snippet></ROW><ROW><id>15850780</id><snippet>Page</snippet></ROW><ROW><id>15850780</id><snippet>class Page(wx.Panel):
    ...

    def AppendText(text):
        self.textCtrl.AppendText(text)
</snippet></ROW><ROW><id>15850780</id><snippet>MainFrame</snippet></ROW><ROW><id>15850780</id><snippet>class MainFrame(wx.Frame):
    def onButtonMessage(self, event):
        page = self.notebook3.GetCurrentPage()
        page.AppendText("Yeah this works ")
</snippet></ROW><ROW><id>15850780</id><snippet>MainFrame</snippet></ROW><ROW><id>15850780</id><snippet>notebook3</snippet></ROW><ROW><id>15850780</id><snippet>textCtrl</snippet></ROW><ROW><id>15850780</id><snippet>AppendText()</snippet></ROW><ROW><id>15850780</id><snippet>MainFrame</snippet></ROW><ROW><id>15850780</id><snippet>pub.sendMessage()</snippet></ROW><ROW><id>15850780</id><snippet>textCtrl</snippet></ROW><ROW><id>15850780</id><snippet>MainFrame</snippet></ROW><ROW><id>15850780</id><snippet>workbook3</snippet></ROW><ROW><id>15850780</id><snippet>pannel</snippet></ROW><ROW><id>15850780</id><snippet>workbook3</snippet></ROW><ROW><id>15850780</id><snippet>import wx
from wx.lib.pubsub import setupkwargs #this line not required in wxPython2.9.
                                      #See documentation for more detail
from wx.lib.pubsub import pub

#This message requires the argument "text"
MSG_CHANGE_TEXT = "change.text"

class Page(wx.Panel):
    def __init__(self, parent):
        self.textCtrl = wx.TextCtrl(self, -1, "THIS IS A PAGE OBJECT ",
                                style=wx.TE_MULTILINE | wx.BORDER_NONE)
        ...

        pub.subscribe(self.onChangeText, MSG_CHANGE_TEXT)

    def onChangeText(self, text):
        self.textCtrl.AppendText(text)

class MainFrame(wx.Frame):
    ...

    def onButtonMessage(self, event):
        pub.sendMessage(MSG_CHANGE_TEXT, text="Yeah this works ")
</snippet></ROW><ROW><id>15850780</id><snippet>pannel</snippet></ROW><ROW><id>15850780</id><snippet>workbook3</snippet></ROW><ROW><id>15850780</id><snippet>workbook3</snippet></ROW><ROW><id>15850780</id><snippet>pannel</snippet></ROW><ROW><id>15850785</id><snippet>first()</snippet></ROW><ROW><id>15850785</id><snippet>None</snippet></ROW><ROW><id>15850785</id><snippet>  u = Users.query.filter_by(username=form.username.data).first()
  if u is not None:
      print u.username
      print u.email      
</snippet></ROW><ROW><id>15850785</id><snippet>  user_by_name = Users.query.filter_by(username=form.username.data).first()
  user_by_email = Users.query.filter_by(email=form.email.data).first()
  if user_by_name:
    error = 'Username already taken. Choose another'
  elif user_by_email:
    error = 'Email already registered. Login or register with another Email'
  else:
      #Unique user and email
</snippet></ROW><ROW><id>15850785</id><snippet> existing = Users.query.filter((Users.username == form.username.data) | (Users.email == form.email.data)).all()
 if existing:
     error = 'User or email taken'
</snippet></ROW><ROW><id>15850785</id><snippet>filter</snippet></ROW><ROW><id>15850785</id><snippet>filter_by</snippet></ROW><ROW><id>15850785</id><snippet>filter_by</snippet></ROW><ROW><id>15851019</id><snippet>class TickGenerator(Observer):
    def __init__(self):
        self.price = 1000
</snippet></ROW><ROW><id>15851244</id><snippet>self</snippet></ROW><ROW><id>15851244</id><snippet>if keyfunc(current_time,freq) != reference_timestamp[freq]:
</snippet></ROW><ROW><id>15851244</id><snippet>if keyfunc(current_time, self.freq) != reference_timestamp[self.freq]:
</snippet></ROW><ROW><id>15851244</id><snippet>reference_timestamp</snippet></ROW><ROW><id>15851572</id><snippet>~/.local/share/applications</snippet></ROW><ROW><id>15851572</id><snippet>/usr/share/applications</snippet></ROW><ROW><id>15851572</id><snippet>[Desktop Entry]
Name=AppName
Exec=/path/to/app
Icon=/path/to/icon.png
Terminal=false
Type=Application
Categories=Utility;Application;
</snippet></ROW><ROW><id>15851610</id><snippet>pip install PIL</snippet></ROW><ROW><id>15851622</id><snippet>name = name op right-hand-expression</snippet></ROW><ROW><id>15851622</id><snippet>name op= right-hand-expression</snippet></ROW><ROW><id>15851622</id><snippet>commandout = commandout | 0x18
commandout = commandout &lt;&lt; 3
</snippet></ROW><ROW><id>15851622</id><snippet>list += rhs</snippet></ROW><ROW><id>15851622</id><snippet>list.extend(rhs)</snippet></ROW><ROW><id>15851622</id><snippet>list = list + rhs</snippet></ROW><ROW><id>15851622</id><snippet>self</snippet></ROW><ROW><id>15851622</id><snippet>commandout</snippet></ROW><ROW><id>15851721</id><snippet>str.rsplit()</snippet></ROW><ROW><id>15851721</id><snippet>print x.rsplit('-', 1)[0]
</snippet></ROW><ROW><id>15851721</id><snippet>.rsplit()</snippet></ROW><ROW><id>15851721</id><snippet>&gt;&gt;&gt; x = 'http://test.com/lalala-134'
&gt;&gt;&gt; print x.rsplit('-', 1)[0]
http://test.com/lalala
&gt;&gt;&gt; 'something-with-a-lot-of-dashes'.rsplit('-', 1)[0]
'something-with-a-lot-of'
</snippet></ROW><ROW><id>15852252</id><snippet>hg log -u USERNAME</snippet></ROW><ROW><id>15852252</id><snippet>hg log -r "author(USERNAME)"</snippet></ROW><ROW><id>15852337</id><snippet>super</snippet></ROW><ROW><id>15852337</id><snippet>def __init__(self, urls_file, N=10, *a, **kw):
    data = open(urls_file, 'r').readlines()[:N]
    self.allowed_domains = [urlparse(i).hostname.strip() for i in data]
    self.start_urls = ['http://' + domain for domain in self.allowed_domains]
    super(DownloadSpider, self).__init__(*a, **kw)
</snippet></ROW><ROW><id>15852337</id><snippet>CrawlSpider.__init__()</snippet></ROW><ROW><id>15852337</id><snippet>super(DownloadSpider, self).__init__()</snippet></ROW><ROW><id>15852337</id><snippet>self._compile_rules()
</snippet></ROW><ROW><id>15852357</id><snippet>my_new_list = zip(my_list[0::2], my_list[1::2])
</snippet></ROW><ROW><id>15852357</id><snippet>[(1, 109), (2, 109), (2, 130), (2, 131), (2, 132), (3, 28), (3, 127)]
</snippet></ROW><ROW><id>15852357</id><snippet>print my_list[0::2] # [1, 2, 2, 2, 2, 3, 3]
print my_list[1::2] # [109, 109, 130, 131, 132, 28, 127]
</snippet></ROW><ROW><id>15852357</id><snippet>print zip(my_list[0::2], my_list[1::2])
</snippet></ROW><ROW><id>15852383</id><snippet>def ask_for_filename():
    #left as an exercise
    return filename

def read_data(filename):
    #left as an exercise
    return data

def column_matches(line, substring, which_column):
    #left as an exercise

def show_by_name(name, data):
    for line in data:
        if column_matches(line, name, 0):
            print line

def do_search(data):
    propmt = "Enter A=&lt;animal&gt; for animal search or B=&lt;where lives?&gt; for place of living search: \n"
    user_input = raw_input(prompt)
    if user_input.startswith('A='):
        show_by_name(user_input[2:], data)

# main program

filename = ask_for_filename()
data = read_data(filename)
while True:
    do_search(data)
</snippet></ROW><ROW><id>15852383</id><snippet>column_matches()</snippet></ROW><ROW><id>15852383</id><snippet>which_column</snippet></ROW><ROW><id>15852383</id><snippet>line</snippet></ROW><ROW><id>15852383</id><snippet>substring</snippet></ROW><ROW><id>15852383</id><snippet>column_matches("foo\tbar\tbaz", "bar", 1)</snippet></ROW><ROW><id>15852383</id><snippet>True</snippet></ROW><ROW><id>15852383</id><snippet>def column_matches(line, substring, which_column):
    delimiter = '\t'
    columns = line.split(delimiter)
    value = columns[which_column]
    if value == substring:
        return True
    else:
        return False
</snippet></ROW><ROW><id>15852383</id><snippet>def column_matches(line, substring, which_column):
    return line.split('\t')[which_column] == substring
</snippet></ROW><ROW><id>15852488</id><snippet>most_common(self, n=None) method of collections.Counter instance
    List the n most common elements and their counts from the most
    common to the least.  If n is None, then list all element counts.

    &gt;&gt;&gt; Counter('abcdeabcdabcaba').most_common(3)
    [('a', 5), ('b', 4), ('c', 3)]
</snippet></ROW><ROW><id>15852488</id><snippet>&gt;&gt;&gt; c.most_common()
[('foo', 124123), ('foofro', 5676), ('barbar', 234), ('bar', 43)]
&gt;&gt;&gt; c.most_common(2)[-1]
('foofro', 5676)
</snippet></ROW><ROW><id>15852488</id><snippet>max(c)</snippet></ROW><ROW><id>15852488</id><snippet>Counter</snippet></ROW><ROW><id>15852488</id><snippet>max(c) == max(c.keys()) == 'foofro'</snippet></ROW><ROW><id>15852488</id><snippet>&gt;&gt;&gt; max(c, key=c.get)
'foo'
</snippet></ROW><ROW><id>15852488</id><snippet>most_common</snippet></ROW><ROW><id>15852488</id><snippet>&gt;&gt;&gt; sorted(c, key=c.get)[-2]
'foofro'
</snippet></ROW><ROW><id>15852657</id><snippet>def dowork(observer=None):
  worker = WorkerClass()
  u = worker.updater()
  total = u.next()
  if observer:
    observer.progress_total(total)
  for i in u:
    if i == 'end': break
    if observer:
      observer.progress(i)
  print 'done!'
</snippet></ROW><ROW><id>15852657</id><snippet>class ProgressBarObserver(object):
  def __init__(self, progbar):
    self.progbar = progbar
  def progress_total(self, n):
    self.progbar.setRange(0, n)
  def progress(self, i):
    self.progbar.setValue(i)
</snippet></ROW><ROW><id>15852657</id><snippet>dowork(ProgressBarObserver(self.progress_bar))
</snippet></ROW><ROW><id>15853083</id><snippet>view</snippet></ROW><ROW><id>15853083</id><snippet>In [21]: x
Out[21]: 
array([[  0.,   1.,   2.,   3.,   4.],
       [  5.,   6.,   7.,   8.,   9.],
       [ 10.,  11.,  12.,  13.,  14.]])

In [22]: y = x.ravel().view(dtype=[('idx1', float), ('idx2', float), ('data', float, 3)])

In [23]: y['idx1']
Out[23]: array([  0.,   5.,  10.])

In [24]: y['data']
Out[24]: 
array([[  2.,   3.,   4.],
       [  7.,   8.,   9.],
       [ 12.,  13.,  14.]])

In [25]: y['data'][1]
Out[25]: array([ 7.,  8.,  9.])
</snippet></ROW><ROW><id>15853083</id><snippet>y</snippet></ROW><ROW><id>15853083</id><snippet>y = x.view(...)</snippet></ROW><ROW><id>15853083</id><snippet>x</snippet></ROW><ROW><id>15853083</id><snippet>y</snippet></ROW><ROW><id>15853083</id><snippet>y['idx1']</snippet></ROW><ROW><id>15853107</id><snippet>weight=0</snippet></ROW><ROW><id>15853107</id><snippet>for j in range(0,d)</snippet></ROW><ROW><id>15853107</id><snippet>for j in range(1,d)</snippet></ROW><ROW><id>15853107</id><snippet>weight</snippet></ROW><ROW><id>15853107</id><snippet>1/x^p</snippet></ROW><ROW><id>15853107</id><snippet>zeros(n*d).reshape((n,d))</snippet></ROW><ROW><id>15853107</id><snippet>zeros( (n,d) )</snippet></ROW><ROW><id>15853107</id><snippet>dot(inv(fTx),fTy)</snippet></ROW><ROW><id>15853107</id><snippet>linalg.solve(fTx,fTy)</snippet></ROW><ROW><id>15853171</id><snippet>python3 setup.py install</snippet></ROW><ROW><id>15853342</id><snippet>from setuptools.command.install import install</snippet></ROW><ROW><id>15853342</id><snippet>distutils</snippet></ROW><ROW><id>15853481</id><snippet>{{event}}</snippet></ROW><ROW><id>15853481</id><snippet>__unicode__</snippet></ROW><ROW><id>15853481</id><snippet>{% for event in events %}
    {{ event.country }}
    {{ event.location }}
    .
    .
    .
{% endfor %}
</snippet></ROW><ROW><id>15853864</id><snippet>&gt;&gt;&gt; x = set([1,2,3])
&gt;&gt;&gt; y = x
&gt;&gt;&gt; y -= set([1])
&gt;&gt;&gt; x
set([2, 3])

&gt;&gt;&gt; map(id, (x, y))
[18641904, 18641904]
</snippet></ROW><ROW><id>15853864</id><snippet>&gt;&gt;&gt; x = set([1,2,3])
&gt;&gt;&gt; y = x
&gt;&gt;&gt; y = y - set([1])
&gt;&gt;&gt; x
set([1, 2, 3])

&gt;&gt;&gt; map(id, (x, y))
[2774000, 21166000]
</snippet></ROW><ROW><id>15853864</id><snippet>y -= set(...)</snippet></ROW><ROW><id>15853864</id><snippet>y</snippet></ROW><ROW><id>15853864</id><snippet>x</snippet></ROW><ROW><id>15853864</id><snippet>y</snippet></ROW><ROW><id>15853864</id><snippet>y = y - set(...)</snippet></ROW><ROW><id>15853864</id><snippet>y</snippet></ROW><ROW><id>15853864</id><snippet>x</snippet></ROW><ROW><id>15854105</id><snippet>import urllib, urllib2, cookielib

cookieJar = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookieJar))
params = urllib.urlencode({'cookie_name': 'cookie_value'})
request = urllib2.Request('http://httpbin.org/cookies/set?' + params)
opener.open(request)
request = urllib2.Request('http://httpbin.org/cookies')
response = opener.open(request)
print response.read()
</snippet></ROW><ROW><id>15854105</id><snippet>{
  "cookies": {
    "cookie_name": "cookie_value"
  }
}
</snippet></ROW><ROW><id>15854151</id><snippet>n &gt; 0</snippet></ROW><ROW><id>15854151</id><snippet>n * n-1</snippet></ROW><ROW><id>15854151</id><snippet>(n * n) - 1</snippet></ROW><ROW><id>15854151</id><snippet>n * (n - 1)</snippet></ROW><ROW><id>15854151</id><snippet>factorial</snippet></ROW><ROW><id>15854151</id><snippet>return n * n - 1</snippet></ROW><ROW><id>15854319</id><snippet>read()</snippet></ROW><ROW><id>15854319</id><snippet>file</snippet></ROW><ROW><id>15854319</id><snippet>read</snippet></ROW><ROW><id>15854319</id><snippet>html</snippet></ROW><ROW><id>15854319</id><snippet>id</snippet></ROW><ROW><id>15854319</id><snippet>file</snippet></ROW><ROW><id>15854319</id><snippet>from pyquery import PyQuery

html = open('temp.html').read()

jquery = PyQuery(html)
ids = jquery.find('[id]')

print ids
&gt;&gt;&gt;[&lt;link#screen-switcher-stylesheet&gt;, &lt;div#search&gt;, &lt;input#term.input-text&gt;, &lt;input#submit.input-button&gt;]
</snippet></ROW><ROW><id>15854392</id><snippet>choices = [(obj.id, obj.profile.display_name()) for obj in User.objects.all()]

participants = UserMultipleChoiceField(
    queryset=User.objects.none(),
    label="",
    widget=forms.SelectMultiple(
        attrs={
            "data-placeholder": "Choose members.. "
        }
    ),
    choices=choices
)
</snippet></ROW><ROW><id>15854641</id><snippet>admin.site.register</snippet></ROW><ROW><id>15854641</id><snippet>def register(self, model_or_iterable, admin_class=None, **options):
    """
    Registers the given model(s) with the given admin class.

    The model(s) should be Model classes, not instances.

    If an admin class isn't given, it will use ModelAdmin (the default
    admin options). If keyword arguments are given -- e.g., list_display --
    they'll be applied as options to the admin class.

    If a model is already registered, this will raise AlreadyRegistered.

    If a model is abstract, this will raise ImproperlyConfigured.
    """
</snippet></ROW><ROW><id>15855055</id><snippet>CACHES = ...
if 'test' in sys.argv:
    CACHES['default'] = {'BACKEND': 'django.core.cache.backends.dummy.DummyCache',}}
</snippet></ROW><ROW><id>15855447</id><snippet>def firstThing():  # this could be your 'cd' task
    print 'ran first task'

def secondThing(): # another task you would want to run
    print 'ran second task'

def showCommands(): # a task to show available commands
    print functionDict.keys()

# a dictionary mapping commands to functions (you could do the same with classes)
functionDict = {'f1': firstThing, 'f2': secondThing, 'help': showCommands}

# the actual function that gets the input
def main():
    cont = True
    while(cont):
        selection = raw_input('enter your selection ')
        if selection == 'q': # quick and dirty way to give the user a way out
            cont = False
        elif selection in functionDict.keys():
            functionDict[selection]()
        else:
            print 'my friend, you do not know me. enter help to see VALID commands'

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>15855503</id><snippet>django-admin</snippet></ROW><ROW><id>15855503</id><snippet>urls.py</snippet></ROW><ROW><id>15855503</id><snippet>admin</snippet></ROW><ROW><id>15855536</id><snippet>python-memcache</snippet></ROW><ROW><id>15855536</id><snippet>import memcache

mc = memcache.Client(['127.0.0.1:11211'],
    debug = 0,
    server_max_value_length = 1024*1024*10
)
</snippet></ROW><ROW><id>15855543</id><snippet>all</snippet></ROW><ROW><id>15855543</id><snippet>&gt;&gt;&gt; i = 2*3*17*23
&gt;&gt;&gt; divs = [2, 17, 23]
&gt;&gt;&gt; all(i % x == 0 for x in divs)
True
&gt;&gt;&gt; all(i % x == 0 for x in [2,13,17])
False
</snippet></ROW><ROW><id>15855543</id><snippet>any</snippet></ROW><ROW><id>15855543</id><snippet>next</snippet></ROW><ROW><id>15855543</id><snippet>&gt;&gt;&gt; any(i % x == 0 for x in [5, 17, 101])
True
&gt;&gt;&gt; next(x for x in [5, 17, 101] if i % x == 0)
17
</snippet></ROW><ROW><id>15855614</id><snippet>import easygui as eg</snippet></ROW><ROW><id>15855614</id><snippet>fn = raw_input("Enter the name of the file you want to edit: ")</snippet></ROW><ROW><id>15855614</id><snippet>fn = eg.fileopenbox(title = 'HexReplace', msg = 'Browse to the file you wish to edit')</snippet></ROW><ROW><id>15855614</id><snippet>hexcode = raw_input("3 bytes color hex number: ")</snippet></ROW><ROW><id>15855614</id><snippet>hexcode = eg.enterbox(msg = '3 bytes color hex number', title = 'HexReplace')</snippet></ROW><ROW><id>15855614</id><snippet>print x</snippet></ROW><ROW><id>15855614</id><snippet>eg.msgbox(title = 'HexReplace', msg = x)</snippet></ROW><ROW><id>15855614</id><snippet>title</snippet></ROW><ROW><id>15855614</id><snippet>try</snippet></ROW><ROW><id>15855614</id><snippet>null = open(os.devnull, 'W's); oldstdout = system.stdout; sys.stdout = null</snippet></ROW><ROW><id>15855630</id><snippet>my_string = "this is my very first python program"
n = len(my_string.split(' '))
for i in range(n):
    my_string_split = [x.replace (" ", "+") for x in my_string.split(' ', n-i-1)]
    print my_string_split
</snippet></ROW><ROW><id>15855643</id><snippet>import networkx as nx
import matplotlib.pyplot as plt
import random

N = 20 # number of nodes
K = 3 # number of "long" edges

G = nx.cycle_graph(N)

for node in G.nodes():
    while len(G.neighbors(node)) &lt; K+2:
        # Add K neighbors to each node
        # (each node already has two neighbors from the cycle)
        valid_target_found = False
        while not valid_target_found:
            # CAUTION
            # This loop will not terminate
            # if K is too high relative to N
            target = random.randint(0,N-1)
            # pick a random node
            if (not target in G.neighbors(node)
                and len(G.neighbors(target)) &lt; K+2):
                # Accept the target if (a) it is not already
                # connected to source and (b) target itself
                # has less than K long edges
                valid_target_found = True
        G.add_edge(node, target)

nx.draw_circular(G)
plt.show()
</snippet></ROW><ROW><id>15855774</id><snippet>min(l, key=lambda v: (abs(v - 0), v &lt; 0))
</snippet></ROW><ROW><id>15855774</id><snippet>False &lt; True</snippet></ROW><ROW><id>15855774</id><snippet>1</snippet></ROW><ROW><id>15855774</id><snippet>(1, False)</snippet></ROW><ROW><id>15855774</id><snippet>-1</snippet></ROW><ROW><id>15855774</id><snippet>(1, True)</snippet></ROW><ROW><id>15855811</id><snippet>&gt;&gt;&gt; a = [[1,2],[3,4]]
&gt;&gt;&gt; b = [[1,2],[3,4]]
&gt;&gt;&gt; a == b
True
</snippet></ROW><ROW><id>15855811</id><snippet>==</snippet></ROW><ROW><id>15855811</id><snippet>a</snippet></ROW><ROW><id>15855811</id><snippet>b</snippet></ROW><ROW><id>15855811</id><snippet>&gt;&gt;&gt; a = [[3,4],[1,2]]
&gt;&gt;&gt; b = [[1,2],[3,4]]
&gt;&gt;&gt; a == b
False
</snippet></ROW><ROW><id>15855811</id><snippet>sorted(a)==sorted(b)</snippet></ROW><ROW><id>15855811</id><snippet>c = [[4,3], [2,1]]</snippet></ROW><ROW><id>15855811</id><snippet>sorted(c) == sorted(a) == False</snippet></ROW><ROW><id>15855811</id><snippet>sorted(c)</snippet></ROW><ROW><id>15855811</id><snippet>[[2,1],[4,3]]</snippet></ROW><ROW><id>15855946</id><snippet>b</snippet></ROW><ROW><id>15855946</id><snippet>r</snippet></ROW><ROW><id>15855946</id><snippet>None</snippet></ROW><ROW><id>15855998</id><snippet>z[k] = sum_n a[n] * conj(v[n+k])
</snippet></ROW><ROW><id>15855998</id><snippet>df['a']</snippet></ROW><ROW><id>15855998</id><snippet>df['b']</snippet></ROW><ROW><id>15855998</id><snippet>df.corr</snippet></ROW><ROW><id>15855998</id><snippet>Beta</snippet></ROW><ROW><id>15855998</id><snippet>cov = np.cov(a, b)
beta = cov[1, 0] / cov[0, 0]
</snippet></ROW><ROW><id>15855998</id><snippet>import numpy as np
import matplotlib.pyplot as plt
np.random.seed(100)


def geometric_brownian_motion(T=1, N=100, mu=0.1, sigma=0.01, S0=20):
    """
    http://stackoverflow.com/a/13203189/190597 (unutbu)
    """
    dt = float(T) / N
    t = np.linspace(0, T, N)
    W = np.random.standard_normal(size=N)
    W = np.cumsum(W) * np.sqrt(dt)  # standard brownian motion ###
    X = (mu - 0.5 * sigma ** 2) * t + sigma * W
    S = S0 * np.exp(X)  # geometric brownian motion ###
    return S

N = 10 ** 6
a = geometric_brownian_motion(T=1, mu=0.1, sigma=0.01, N=N)
b = geometric_brownian_motion(T=1, mu=0.2, sigma=0.01, N=N)

cov = np.cov(a, b)
print(cov)
# [[ 0.38234755  0.80525967]
#  [ 0.80525967  1.73517501]]
beta = cov[1, 0] / cov[0, 0]
print(beta)
# 2.10609347015

plt.plot(a)
plt.plot(b)
plt.show()
</snippet></ROW><ROW><id>15855998</id><snippet>mu</snippet></ROW><ROW><id>15855998</id><snippet>beta</snippet></ROW><ROW><id>15855998</id><snippet>df.corr</snippet></ROW><ROW><id>15855998</id><snippet>import pandas as pd
df = pd.DataFrame({'a': a, 'b': b})
beta2 = (df.corr() * df['b'].std() * df['a'].std() / df['a'].var()).ix[0, 1]
print(beta2)
# 2.10609347015
assert np.allclose(beta, beta2)
</snippet></ROW><ROW><id>15856080</id><snippet>Robe</snippet></ROW><ROW><id>15856080</id><snippet>Dress</snippet></ROW><ROW><id>15856080</id><snippet>class Base(object):
    pass

def base_factory():
    return Base()  # in real code, this would probably be something opaque

def Derived(Base):
    def __new__(cls):
        self = base_factory()     # get an instance of Base
        self.__class__ = Derived  # and turn it into an instance of Derived
        return self
</snippet></ROW><ROW><id>15856080</id><snippet>__new__</snippet></ROW><ROW><id>15856080</id><snippet>base_factory</snippet></ROW><ROW><id>15856080</id><snippet>Base</snippet></ROW><ROW><id>15856080</id><snippet>Base()</snippet></ROW><ROW><id>15856080</id><snippet>super(Derived, cls).__new__(cls)</snippet></ROW><ROW><id>15856080</id><snippet>__class__</snippet></ROW><ROW><id>15856080</id><snippet>Derived.__new__</snippet></ROW><ROW><id>15856080</id><snippet>Derived</snippet></ROW><ROW><id>15856080</id><snippet>Derived.__init__</snippet></ROW><ROW><id>15856150</id><snippet>curl</snippet></ROW><ROW><id>15856150</id><snippet>curl -d 'uuid=admin&amp;password=admin'
</snippet></ROW><ROW><id>15856150</id><snippet>400 Bad Request</snippet></ROW><ROW><id>15856150</id><snippet>request.form</snippet></ROW><ROW><id>15856150</id><snippet>request.json</snippet></ROW><ROW><id>15856150</id><snippet>request.form</snippet></ROW><ROW><id>15856150</id><snippet>curl</snippet></ROW><ROW><id>15856150</id><snippet>curl -d '{"uuid":"admin","password":"admin"}' -H "Content-Type: application/json" 
</snippet></ROW><ROW><id>15856160</id><snippet>for i in range(len(lists))</snippet></ROW><ROW><id>15856160</id><snippet>lists</snippet></ROW><ROW><id>15856160</id><snippet>total += sum(i)</snippet></ROW><ROW><id>15856160</id><snippet>int</snippet></ROW><ROW><id>15856160</id><snippet>list</snippet></ROW><ROW><id>15856160</id><snippet>def list_sum(L):
    total = 0  
    for i in L:
        if isinstance(i, list): 
            total += list_sum(i)
        else:
            total += i
    return total
</snippet></ROW><ROW><id>15856160</id><snippet>sum(sum(i) if isinstance(i, list) else i for i in L)
</snippet></ROW><ROW><id>15856238</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; s = "{{39.830000, -98.580000}, {20.265710, 64.589962}}"
&gt;&gt;&gt; s = s.replace("{", "[").replace("}", "]")
&gt;&gt;&gt; l = ast.literal_eval(s)
&gt;&gt;&gt; l
[[39.83, -98.58], [20.26571, 64.589962]]
</snippet></ROW><ROW><id>15856238</id><snippet>float</snippet></ROW><ROW><id>15856238</id><snippet>list</snippet></ROW><ROW><id>15856238</id><snippet>&gt;&gt;&gt; (a, b), (c, d) = l   # Thanks Lev!
&gt;&gt;&gt; a
39.83
&gt;&gt;&gt; # etc.
</snippet></ROW><ROW><id>15856444</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; A = [1, 2, 3]
&gt;&gt;&gt; B = [10, 11]
&gt;&gt;&gt; [a + b for a, b in itertools.izip_longest(A, B, fillvalue=0)]
[11, 13, 3]
</snippet></ROW><ROW><id>15856444</id><snippet>def suma(A, B):
    return [a + b for a, b in itertools.izip_longest(A, B, fillvalue=0)]
</snippet></ROW><ROW><id>15856536</id><snippet>export PATH="/usr/bin/python3/bin:$PATH" 
</snippet></ROW><ROW><id>15856593</id><snippet>class Root(object):
    @cherrypy.expose
    def index(self, foo=None):
        if not foo:
            jsondict = [('foo', '1'), ('foo', '2')]
            p = urllib.urlencode(jsondict)
            #url = urllib.urlopen("http://localhost:8080?%s" % params)
            #urlVar = 1
            #urlVar2 = 2
            #requests.get("localhost:8080/?", params =p)

            raise cherrypy.HTTPRedirect("/index?" + p)

        return foo
</snippet></ROW><ROW><id>15856684</id><snippet>patch</snippet></ROW><ROW><id>15856684</id><snippet>from unittest import TestCase
from mock import patch


def method_a(some_thing):
    #some logic here
    return update({'a': 1}, request=some_thing)


def update(value, request):
    if request:
        return value.update({'b': 2})
    return value.update({'c': 3})


class TestMethodA(TestCase):
    def test_mocked_update(self):
        with patch('%s.update' % __name__, lambda value, request: value):
            self.assertEqual(method_a('test'), {'a': 1})
</snippet></ROW><ROW><id>15856753</id><snippet>{'I': 'you', 'you': 'I'}
</snippet></ROW><ROW><id>15856753</id><snippet>import re

def replace_all(text, dic):
    words = sorted(dic, key=len, reverse=True)
    return re.sub('\\b(' + '|'.join(map(re.escape, words)) + ')\\b',
                  lambda m: dic[m.group(0)], text)
</snippet></ROW><ROW><id>15856753</id><snippet>\b(you|I)\b
</snippet></ROW><ROW><id>15856753</id><snippet>re</snippet></ROW><ROW><id>15856753</id><snippet>\b</snippet></ROW><ROW><id>15856753</id><snippet>|</snippet></ROW><ROW><id>15856753</id><snippet>I</snippet></ROW><ROW><id>15856753</id><snippet>I'm</snippet></ROW><ROW><id>15856753</id><snippet>I'm</snippet></ROW><ROW><id>15856753</id><snippet>I</snippet></ROW><ROW><id>15856753</id><snippet>I'm</snippet></ROW><ROW><id>15856753</id><snippet>re.sub</snippet></ROW><ROW><id>15856753</id><snippet>&gt;&gt;&gt; replace_all("I'm not convinced.", {"I": "you"})
"you'm not convinced."
</snippet></ROW><ROW><id>15856753</id><snippet>&gt;&gt;&gt; replace_all("I'm not convinced.", {"I": "you", "I'm": "you're"})
"you're not convinced."
</snippet></ROW><ROW><id>15856818</id><snippet>class</snippet></ROW><ROW><id>15856818</id><snippet>url</snippet></ROW><ROW><id>15856818</id><snippet>from pandas import *
left = DataFrame({'url': ['foo.com', 'bar.com', 'foo.com', 'tmp', 'foo.com'], 'action': [0, 1, 0, 2, 4]})
left["klass"] = NaN
right1 = DataFrame({'url': ['foo.com', 'tmp'], 'klass': [10, 20]})
right2 = DataFrame({'url': ['bar.com'], 'klass': [30]})

left["klass"] = left.klass.combine_first(right1.set_index('url').klass[left.url].reset_index(drop=True))
left["klass"] = left.klass.combine_first(right2.set_index('url').klass[left.url].reset_index(drop=True))

print left
</snippet></ROW><ROW><id>15856818</id><snippet>import pandas as pd
left = pd.DataFrame({'url': ['foo.com', 'foo.com', 'bar.com'], 'action': [0, 1, 0]})
left["class"] = NaN
right1 = pd.DataFrame({'url': ['foo.com'], 'class': [0]})
right2 = pd.DataFrame({'url': ['bar.com'], 'class': [ 1]})

pd.merge(left.drop("class", axis=1), pd.concat([right1, right2]), on="url")
</snippet></ROW><ROW><id>15856818</id><snippet>   action      url  class
0       0  foo.com      0
1       1  foo.com      0
2       0  bar.com      1
</snippet></ROW><ROW><id>15857016</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'Hello, this is a string'
&gt;&gt;&gt; m = re.search(',\s[a-z]',s)
&gt;&gt;&gt; m.group()
', t'
&gt;&gt;&gt; m.start()
5
</snippet></ROW><ROW><id>15857067</id><snippet>import re

text = 'You can visit &lt;a class="hyperlink" href="https://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt;'
new_text = re.sub(r'href="http(s)?:\/\/(.+?)"', r'href="https://mydomain.com/\2"', text)
</snippet></ROW><ROW><id>15857103</id><snippet>.communicate()</snippet></ROW><ROW><id>15857103</id><snippet>while</snippet></ROW><ROW><id>15857103</id><snippet>p.stdout</snippet></ROW><ROW><id>15857103</id><snippet>p.stdout</snippet></ROW><ROW><id>15857103</id><snippet>p.stdout</snippet></ROW><ROW><id>15857103</id><snippet>import fcntl, os
fcntl.fcntl(p.stdout.fileno(), fcntl.F_SETFL,
    fcntl.fcntl(p.stdout.fileno(), fcntl.F_GETFL) | os.O_NONBLOCK)
</snippet></ROW><ROW><id>15857103</id><snippet>IOError: [Errno 11] Resource temporarily unavailable</snippet></ROW><ROW><id>15857103</id><snippet>select.select()</snippet></ROW><ROW><id>15857103</id><snippet>p.stdout.readline()</snippet></ROW><ROW><id>15857103</id><snippet>select.select([p.stdout], [], [], &lt;timeout&gt;)[0]</snippet></ROW><ROW><id>15857103</id><snippet>def perform_command(p, cmd, expect):
    import select
    p.stdin.write(cmd + '\n') # there's no need for a \n at the beginning
    while select.select([p.stdout], [], [], 0.05)[0]: # give mplayer time to answer...
        output = p.stdout.readline()
        print("output: {}".format(output.rstrip()))
        split_output = output.split(expect + '=', 1)
        if len(split_output) == 2 and split_output[0] == '': # we have found it
            value = split_output[1]
            return value.rstrip()
</snippet></ROW><ROW><id>15857103</id><snippet>print perform_command(p, 'get_meta_artist', 'ANS_META_ARTIST')
print perform_command(p, 'get_time_pos', 'ANS_TIME_POSITION')
</snippet></ROW><ROW><id>15857167</id><snippet>class MyDeleteView(DeleteView):
    success_url = reverse('list')

    def get(self, *a, **kw):
        return self.delete(*a, **kw)
</snippet></ROW><ROW><id>15857167</id><snippet>&lt;ul&gt;
    {% for item in object_list %}
        &lt;li&gt;Item1 (&lt;a href="{% url 'mydelete' pk=item.pk %}"&gt;Delete&lt;/a&gt;)&lt;/li&gt;
    {% endif %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>15857254</id><snippet>{% for error in field.errors %}
      &lt;p class="help-block"&gt;{{ error }}&lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>15857254</id><snippet>def validate_user</snippet></ROW><ROW><id>15857542</id><snippet>oauth_verifier</snippet></ROW><ROW><id>15857542</id><snippet>oauth_verifier</snippet></ROW><ROW><id>15857542</id><snippet>callback_url</snippet></ROW><ROW><id>15857542</id><snippet>get_authorized_tokens</snippet></ROW><ROW><id>15857542</id><snippet>response = self.client.get(self.access_token_url)
</snippet></ROW><ROW><id>15857542</id><snippet>callback_url = self.callback_url or 'oob'
request_args = urllib.urlencode({'oauth_callback': callback_url, 'oauth_verifier':self.oauth_verifier })
response = self.client.post(self.access_token_url, params=request_args)
</snippet></ROW><ROW><id>15857559</id><snippet>sys.path</snippet></ROW><ROW><id>15857559</id><snippet>sys.path.append('/path/to/django/dir')</snippet></ROW><ROW><id>15857559</id><snippet>import django</snippet></ROW><ROW><id>15857559</id><snippet>'/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages'</snippet></ROW><ROW><id>15857694</id><snippet>input_handle = open(os.path.join(os.getcwd,results/f), "r")</snippet></ROW><ROW><id>15857694</id><snippet>os.curdir</snippet></ROW><ROW><id>15857694</id><snippet>.</snippet></ROW><ROW><id>15857847</id><snippet>from xml.dom import minidom

doc = minidom.parse(svg_file)  # parseString also exists
path_strings = [path.getAttribute('d') for path
                in doc.getElementsByTagName('path')]
doc.unlink()
</snippet></ROW><ROW><id>15857859</id><snippet>POP1STND = 78784000
</snippet></ROW><ROW><id>15857859</id><snippet>def Pop1Stnd=78784000
</snippet></ROW><ROW><id>15857859</id><snippet>def pop_function("paramaters go here"):
    "do some stuff here"
</snippet></ROW><ROW><id>15858047</id><snippet>savefig</snippet></ROW><ROW><id>15858047</id><snippet>transparent=True</snippet></ROW><ROW><id>15858047</id><snippet>In [30]: x = np.linspace(0,6,31)

In [31]: y = np.exp(-0.5*x) * np.sin(x)

In [32]: plot(x, y, 'bo-')
Out[32]: [&lt;matplotlib.lines.Line2D at 0x3f29750&gt;]            

In [33]: savefig('demo.png', transparent=True)
</snippet></ROW><ROW><id>15858197</id><snippet>capitalize()</snippet></ROW><ROW><id>15858197</id><snippet>def capitalize_nth(s, n):
    return s[:n].lower() + s[n:].capitalize()
</snippet></ROW><ROW><id>15858237</id><snippet>import tarfile, io
byte_array = client.read_bytes()
file_like_object = io.BytesIO(byte_array)
tar = tarfile.open(fileobj=file_like_object)
# use "tar" as a regular TarFile object
for member in tar.getmembers():
    f = tar.extractfile(member)
    print(f)
</snippet></ROW><ROW><id>15858244</id><snippet>else</snippet></ROW><ROW><id>15858244</id><snippet>keys[pygame.K_RIGHT]</snippet></ROW><ROW><id>15858244</id><snippet>    if keys[pygame.K_LEFT]:
        pad_x_c -= 2

    if keys[pygame.K_RIGHT]:
        pad_x_c += 2  
    else:
        pad_x_c = 0
</snippet></ROW><ROW><id>15858244</id><snippet>elif</snippet></ROW><ROW><id>15858244</id><snippet>    if keys[pygame.K_LEFT]:
        pad_x_c -= 2
    elif keys[pygame.K_RIGHT]:
        pad_x_c += 2  
    else:
        pad_x_c = 0
</snippet></ROW><ROW><id>15858262</id><snippet>def perimeter(side1, side2, side3):
    return float(side1 + side2 + side3)
</snippet></ROW><ROW><id>15858264</id><snippet>plt.*</snippet></ROW><ROW><id>15858264</id><snippet>gca().*</snippet></ROW><ROW><id>15858264</id><snippet>plt.subplot</snippet></ROW><ROW><id>15858264</id><snippet>axes</snippet></ROW><ROW><id>15858264</id><snippet>import matplotlib.pyplot as plt

ax1 = plt.subplot(131)
ax1.scatter([1, 2], [3, 4])
ax1.set_xlim([0, 5])
ax1.set_ylim([0, 5])


ax2 = plt.subplot(132)
ax2.scatter([1, 2],[3, 4])
ax2.set_xlim([0, 5])
ax2.set_ylim([0, 5])
</snippet></ROW><ROW><id>15858264</id><snippet>import matplotlib.pyplot as plt

DATA_x = ([1, 2],
          [2, 3],
          [3, 4])

DATA_y = DATA_x[::-1]

XLIMS = [[0, 10]] * 3
YLIMS = [[0, 10]] * 3

for j, (x, y, xlim, ylim) in enumerate(zip(DATA_x, DATA_y, XLIMS, YLIMS)):
    ax = plt.subplot(1, 3, j + 1)
    ax.scatter(x, y)
    ax.set_xlim(xlim)
    ax.set_ylim(ylim)
</snippet></ROW><ROW><id>15858496</id><snippet>import random

def gen_people_in_group(age, num_male, num_female):
    males = ['m%s' % age] * num_male
    females = ['f%s' % age] * num_female
    return males + females

def gen_random_sample(num_in_group=5):
    groups = [1, 4, 6], [2, 5, 5], [3, 7, 3], [4, 2, 8], [5, 4, 6]

    population = []
    for group in groups:
        population += gen_people_in_group(*group)

    random.shuffle(population)

    for idx in xrange(0, len(population), num_in_group):
        yield population[idx:(idx + num_in_group)]

def main():
    for rand_group in gen_random_sample():
        print rand_group

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>15858496</id><snippet>['m3', 'f3', 'm5', 'f4', 'm1']
['f4', 'f4', 'm4', 'f2', 'm2']
['m4', 'f3', 'm5', 'm3', 'f5']
['m3', 'f5', 'f1', 'm3', 'f4']
['m5', 'f2', 'f1', 'f1', 'f5']
['m1', 'f2', 'f2', 'f1', 'm2']
['f5', 'f4', 'f4', 'm2', 'f4']
['m3', 'm2', 'f2', 'f1', 'f5']
['m3', 'm5', 'm2', 'f5', 'f1']
['m1', 'm3', 'f3', 'm1', 'f4']
</snippet></ROW><ROW><id>15858545</id><snippet>global</snippet></ROW><ROW><id>15858545</id><snippet>r</snippet></ROW><ROW><id>15858545</id><snippet>Root</snippet></ROW><ROW><id>15858545</id><snippet>class Root(object):
    r = 1
    @cherrypy.expose
    def index(self,  **params):
        #...
        if Root.r != 1:
            Root.r += 1
        #...
</snippet></ROW><ROW><id>15858994</id><snippet>Qt4Agg</snippet></ROW><ROW><id>15858994</id><snippet>TkAgg</snippet></ROW><ROW><id>15858994</id><snippet>draw()</snippet></ROW><ROW><id>15858994</id><snippet>pause(0.001)</snippet></ROW><ROW><id>15859003</id><snippet>list</snippet></ROW><ROW><id>15859003</id><snippet>from ast import literal_eval

numbers = literal_eval(your_string)
</snippet></ROW><ROW><id>15859040</id><snippet>awk</snippet></ROW><ROW><id>15859040</id><snippet>awk '{ a[$2]++ } END { for (i in a) print "total no:of", i, a[i] }' &lt;(awk '!a[$1,$2]++' file1) &lt;(awk '!a[$1,$2]++' file2)
</snippet></ROW><ROW><id>15859040</id><snippet>awk</snippet></ROW><ROW><id>15859040</id><snippet>awk -f script.awk file{1..200}
</snippet></ROW><ROW><id>15859040</id><snippet>script.awk</snippet></ROW><ROW><id>15859040</id><snippet>{
    a[FILENAME,$1,$2]
}

END {
    for (i in a) {
        split (i,x,SUBSEP)
        b[x[3]]++
    }
    for (j in b) {
        print "total no:of", j, b[j]
    }
}
</snippet></ROW><ROW><id>15859040</id><snippet>awk '{ a[FILENAME,$1,$2] } END { for (i in a) { split (i,x,SUBSEP); b[x[3]]++ } for (j in b) print "total no:of", j, b[j] }' file{1..200}
</snippet></ROW><ROW><id>15859040</id><snippet>total no:of LEU 2
total no:of ALA 4
total no:of VAL 1
</snippet></ROW><ROW><id>15859074</id><snippet>class ShowForm(forms.ModelForm):
    class Meta:
        model = Show

    def __init__(self, *args, **kwargs):
        super(ShowForm, self).__init__(*args, **kwargs)
        if Address.objects.exists():
            self.fields['optional_address'].required = True
</snippet></ROW><ROW><id>15859101</id><snippet>&gt;&gt;&gt; print html2text.html2text(s)
find /home/tiger/workspace&amp;nbsp_place_holder; -name "[0-9]*"

find /home/tiger/workspace&amp;nbsp_place_holder; -name "[!0-9]*"

find /home/tiger/workspace&amp;nbsp_place_holder; -name "[^0-9]*"


找出所有包含数字的文件，不包含数字的文件。

tiger@debian:~$ find /home/tiger&amp;nbsp_place_holder; -name
"*[0-9]*"&amp;nbsp_place_holder; &gt;kan1

tiger@debian:~$ find /home/tiger&amp;nbsp_place_holder; -name
"[0-9]*"&amp;nbsp_place_holder; &gt;kan2

tiger@debian:~$ find /home/tiger&amp;nbsp_place_holder; -name
"*[0-9]"&amp;nbsp_place_holder; &gt;kan3



包含数字，数字开头，数字结尾
</snippet></ROW><ROW><id>15859179</id><snippet>uuid.UUID</snippet></ROW><ROW><id>15859179</id><snippet>import uuid

o = {
    "name": "Unknown",
    "parent": "Uncategorized",
    "uuid": "06335e84-2872-4914-8c5d-3ed07d2a2f16"
}

print uuid.UUID(o['uuid']).hex
</snippet></ROW><ROW><id>15859216</id><snippet>import tarfile
tar = tarfile.open("file.tgz")
for file in tar.getmembers():
    print file.name
</snippet></ROW><ROW><id>15859587</id><snippet>class X():
  button = widget.libray.Button()

  @button.on_click
  def click(self, event):
    # blah
</snippet></ROW><ROW><id>15859587</id><snippet>button</snippet></ROW><ROW><id>15859587</id><snippet>@onclick('button')</snippet></ROW><ROW><id>15859587</id><snippet>button</snippet></ROW><ROW><id>15859587</id><snippet>__init__</snippet></ROW><ROW><id>15859587</id><snippet>self.button</snippet></ROW><ROW><id>15859587</id><snippet>__init__</snippet></ROW><ROW><id>15859628</id><snippet>$ port select --list python
vailable versions for python:
    none
    python25-apple
    python26-apple
    python27 (active)
    python27-apple
</snippet></ROW><ROW><id>15859628</id><snippet>$ sudo port select python27-apple
</snippet></ROW><ROW><id>15859628</id><snippet>/opt/local</snippet></ROW><ROW><id>15859628</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>15859628</id><snippet>/opt/local/sbin</snippet></ROW><ROW><id>15859628</id><snippet>/usr/bin</snippet></ROW><ROW><id>15859628</id><snippet>/usr/sbin</snippet></ROW><ROW><id>15859628</id><snippet>$ ls -l /opt/local/bin/python
lrwxr-xr-x  1 root  admin  24 Dec  5  2011 /opt/local/bin/python -&gt; /opt/local/bin/python2.7
</snippet></ROW><ROW><id>15860356</id><snippet>&gt;&gt;&gt; from collection import defaultdict
&gt;&gt;&gt; grammar = {'AB':('S', 'B'), 'BB':'A', 'a':'A', 'b':'B'}
&gt;&gt;&gt; tmp_result = defaultdict(list)
&gt;&gt;&gt; def tuplify(val):
...     if not isinstance(val, tuple):
...         val = (val,)
...     return val
... 
&gt;&gt;&gt; for key, value in grammar.items():
...     values = tuplify(value)
...     for val in values:
...         tmp_result[val].append(key)
... 
&gt;&gt;&gt; tmp_result
defaultdict(&lt;type 'list'&gt;, {'A': ['a', 'BB'], 'S': ['AB'], 'B': ['AB', 'b']})
&gt;&gt;&gt; result = {key:tuple(val) for key, val in tmp_result.items()}
&gt;&gt;&gt; result
{'A': ('a', 'BB'), 'S': ('AB',), 'B': ('AB', 'b')}
</snippet></ROW><ROW><id>15860356</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>15860356</id><snippet>dict</snippet></ROW><ROW><id>15860356</id><snippet>&gt;&gt;&gt; D = defaultdict(list)
&gt;&gt;&gt; D[5].append(3)
&gt;&gt;&gt; D[5]
[3]
</snippet></ROW><ROW><id>15860356</id><snippet>dict</snippet></ROW><ROW><id>15860356</id><snippet>&gt;&gt;&gt; D = {}
&gt;&gt;&gt; if 5 in D: # key present, use that value
...     val = D[5]
... else:      # otherwise create a default value and sets it
...     val = list()
...     D[5] = val
... 
&gt;&gt;&gt; val.append(3)
&gt;&gt;&gt; D[5]
[3]
</snippet></ROW><ROW><id>15860356</id><snippet>defaultdict(factory)</snippet></ROW><ROW><id>15860356</id><snippet>&gt;&gt;&gt; n = 0
&gt;&gt;&gt; def factory():
...     global n
...     print('Factory called!')
...     n += 1
...     return n   #returns numbers 1, 2, 3, 4, ...
... 
&gt;&gt;&gt; D = defaultdict(factory)
&gt;&gt;&gt; D[0]
Factory called!
1
&gt;&gt;&gt; D[0]   # the keys exists, thus the factory is not called.
1
&gt;&gt;&gt; D[1]
Factory called!
2
&gt;&gt;&gt; D[1]
2
</snippet></ROW><ROW><id>15860430</id><snippet>import sys
sys.stdout = sys.stderr
</snippet></ROW><ROW><id>15860513</id><snippet>FATFS fatFs;
FIL newFile;

// The drive number may differ 
if (f_mount(0, &amp;fatFs) != FR_OK) {
  // Something went wrong
}

if (f_open(&amp;newFile, "/test.txt", FA_WRITE | FA_OPEN_ALWAYS) != FR_OK) {
  // Something went wrong
}
</snippet></ROW><ROW><id>15860531</id><snippet>class MessageManager(models.Manager):
    def get_matching_messages(self, ref_id):
        try:
            return Message.objects.filter(gateway_message_id__icontains=ref_id)
        except Message.DoesNotExist:
            pass
</snippet></ROW><ROW><id>15860531</id><snippet>filter()</snippet></ROW><ROW><id>15860531</id><snippet>get()</snippet></ROW><ROW><id>15860531</id><snippet>__iexact</snippet></ROW><ROW><id>15860531</id><snippet>MultipleObjectsReturned</snippet></ROW><ROW><id>15860531</id><snippet>class MessageManager(models.Manager):
    def get_matching_messages(self, ref_id):
        try:
            return Message.objects.get(gateway_message_id__iexact=ref_id)
        except (Message.DoesNotExist, Message.MultipleObjectsReturned):
            pass
</snippet></ROW><ROW><id>15860531</id><snippet>gateway</snippet></ROW><ROW><id>15860531</id><snippet>gateway_message_id=ref_ID</snippet></ROW><ROW><id>15860531</id><snippet>gateway.message_id=ref_ID</snippet></ROW><ROW><id>15860558</id><snippet>fromstring</snippet></ROW><ROW><id>15860558</id><snippet>parse</snippet></ROW><ROW><id>15860558</id><snippet>import xml.etree.ElementTree as ET
tree = ET.parse("C:\DATA\US_Patent_Data\2012\ipgb20120103_wk01\ipgb20120103.xml")
root = tree.getroot()
</snippet></ROW><ROW><id>15860558</id><snippet>with open('ipgb20120103.xml', 'r') as f:
    xml_string = "&lt;root&gt;%s&lt;/root&gt;" % f.read()

root = ET.fromstring(xml_string)
</snippet></ROW><ROW><id>15860720</id><snippet>def require_post_decorator(function=None, redirect_url='/'):
    def _decorator(view_function):
        def _view(request, *args, **kwargs):
            if request.method == 'POST':
                #do some before the view is reached stuffs here.
                return view_function(request, *args, **kwargs)
            else:
                return HttpResponseRedirect(redirect_url)

        _view.__name__ = view_function.__name__
        _view.__dict__ = view_function.__dict__
        _view.__doc__ = view_function.__doc__

        return _view

    if function:
        return _decorator(function)
    return _decorator
</snippet></ROW><ROW><id>15860745</id><snippet>line_one = itertools.islice(plot_data, 0, None, 4)
line_two = itertools.islice(plot_data, 2, None, 4)
</snippet></ROW><ROW><id>15860745</id><snippet>plot_data</snippet></ROW><ROW><id>15860745</id><snippet>itertools.tee</snippet></ROW><ROW><id>15860745</id><snippet>plot1, plot2 = itertools.tee(plot_data, 2)
line_one = itertools.islice(plot1, 0, None, 4)
line_two = itertools.islice(plot2, 2, None, 4)
</snippet></ROW><ROW><id>15860829</id><snippet>A == B
# lists are in the same order with the same items.
all(a in B for a in A)
# all items in A are in B. (order not checked)
all(b in A for b in B)
# all items in B are in A. (order not checked)
all(A[i] == B[i] for i in range(len(A)))
# all items in A are in B. (order checked) (len(A) &lt;= len(B))
all(B[i] == A[i] for i in range(len(B)))
# all items in B are in A. (order checked) (len(B) &lt;= len(A))
</snippet></ROW><ROW><id>15860829</id><snippet>def gen_diff(A, B):
    if len(A) != len(B):
        raise IndexError('lists not of same length')
    for i in range(len(A)):
        if A[i] == B[i]:
            yield (True, i)
        else:
            yield (False, i)
</snippet></ROW><ROW><id>15861175</id><snippet>integer</snippet></ROW><ROW><id>15861175</id><snippet>In [1]: import re

In [2]: integer_re = re.compile('[ ]*integer[^:]*::\s+(.+)')

In [3]: progtext = '''  program average

  ! Read in some numbers and take the average
  ! As written, if there are no data points, an average of zero is returned
  ! While this may not be desired behavior, it keeps this example simple

  implicit none

  real, dimension(:), allocatable :: points
  integer                         :: number_of_points
  real                            :: average_points=0., positive_average=0., negative_average=0.

  write (*,*) "Input number of points to average:"
  read  (*,*) number_of_points

  allocate (points(number_of_points))

  write (*,*) "Enter the points to average:"
  read  (*,*) points

  ! Take the average by summing points and dividing by number_of_points
  if (number_of_points &gt; 0) average_points = sum(points) / number_of_points

  ! Now form average over positive and negative points only
  if (count(points &gt; 0.) &gt; 0) then
     positive_average = sum(points, points &gt; 0.) / count(points &gt; 0.)
  end if

  if (count(points &lt; 0.) &gt; 0) then
     negative_average = sum(points, points &lt; 0.) / count(points &lt; 0.)
  end if

  deallocate (points)

  ! Print result to terminal
  write (*,'(a,g12.4)') 'Average = ', average_points
  write (*,'(a,g12.4)') 'Average of positive points = ', positive_average
  write (*,'(a,g12.4)') 'Average of negative points = ', negative_average

  end program average'''

In [4]: integer_re = re.compile('[ ]*integer[^:]*::\s+(.+)')

In [5]: integer_re.findall(progtext)
Out[5]: ['number_of_points']
</snippet></ROW><ROW><id>15861175</id><snippet>In [6]: real_re = re.compile('[ ]*real[^:]*::\s+(.*)')

In [7]: real_re.findall(progtext)
Out[7]: ['average_points=0., positive_average=0., negative_average=0.']
</snippet></ROW><ROW><id>15861175</id><snippet>In [8]: real_re.findall(progtext)[0].split()
Out[8]: ['average_points=0.,', 'positive_average=0.,', 'negative_average=0.']
</snippet></ROW><ROW><id>15861175</id><snippet>In [9]: re.findall('([a-z_]+)', real_re.findall(progtext)[0])
Out[9]: ['average_points', 'positive_average', 'negative_average']
</snippet></ROW><ROW><id>15861303</id><snippet>dict</snippet></ROW><ROW><id>15861303</id><snippet>in</snippet></ROW><ROW><id>15861303</id><snippet>if somestring in d[key]:
    d[key][somestring] += 1
else:
    d[key][somestring] = 1
</snippet></ROW><ROW><id>15861303</id><snippet>Counter</snippet></ROW><ROW><id>15861303</id><snippet>from collections import defaultdict, Counter
d = defaultdict(Counter)

d[key][somestring] += 1
</snippet></ROW><ROW><id>15861303</id><snippet>defaultdict</snippet></ROW><ROW><id>15861303</id><snippet>Counter</snippet></ROW><ROW><id>15861303</id><snippet>0</snippet></ROW><ROW><id>15861303</id><snippet>.update()</snippet></ROW><ROW><id>15861303</id><snippet>d[key].update(sequence_of_strings)
</snippet></ROW><ROW><id>15861303</id><snippet>Counter</snippet></ROW><ROW><id>15861303</id><snippet>Counter</snippet></ROW><ROW><id>15861364</id><snippet>unicode</snippet></ROW><ROW><id>15861364</id><snippet>''.format()</snippet></ROW><ROW><id>15861364</id><snippet>unicode</snippet></ROW><ROW><id>15861364</id><snippet>u''</snippet></ROW><ROW><id>15861364</id><snippet>print u"DocID:    {0}\nTitle:    {1}\nLast Name: {2}\nFirst Name: {3}\nStreet: {4}\ncity: {5}\nstate: {6}\npostcode: {7}\ncountry: {8}\n".format(docID,title,lastName,firstName,street,city,state,postcode,country)
</snippet></ROW><ROW><id>15861985</id><snippet>st_mode</snippet></ROW><ROW><id>15861985</id><snippet>stat</snippet></ROW><ROW><id>15861985</id><snippet>import stat

if stat.S_ISDIR(lstat_result.st_mode):
</snippet></ROW><ROW><id>15862203</id><snippet>repo.iter_commits('BRANCH..BRANCH@{u}')
</snippet></ROW><ROW><id>15862203</id><snippet>list(repo.iter_commits('BRANCH..BRANCH@{u}'))
</snippet></ROW><ROW><id>15862203</id><snippet>BRANCH@{u}</snippet></ROW><ROW><id>15862203</id><snippet>BRANCH</snippet></ROW><ROW><id>15862264</id><snippet>s</snippet></ROW><ROW><id>15862264</id><snippet>scipy.interpolate.UnivariateSpline()</snippet></ROW><ROW><id>15862269</id><snippet>class LoginForm(AuthenticationForm):
    def __init__(self, *args, **kwargs):
        super(LoginForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_tag = False
        self.helper.layout = Layout(
            Field('username', placeholder="username"),
            Field('password', placeholder="password"),
        )
</snippet></ROW><ROW><id>15862269</id><snippet>AuthenticationForm</snippet></ROW><ROW><id>15862269</id><snippet>LoginForm</snippet></ROW><ROW><id>15862465</id><snippet>class PreparedStatement(object):

    def __init__(self, name, query, vars):
        self.name = name
        self.query = query
        self.vars = vars

    def prepare(self):
        SQL = "PREPARE %s FROM " % self.name
        self.__executeQuery(SQL + " %s ;", self.query)

    def get_prepared(self):
        # store a map of all prepared queries on the current connection
        return getattr(connection, "__prepared", default={})

    def execute(self, **kwvars):

        if not self.name in self.get_prepared().keys()
           # Statement will be prepared once per session.
           self.prepare()

        SQL = "EXECUTE %s " % self.name

        if self.vars:
            missing_vars = set(self.vars) - set(kwvars)
            if missing_vars:
                raise TypeError("Prepared Statement %s requires variables: %s" % (
                                    self.name, ", ".join(missing_variables) ) )

            param_list = [ var + "=%s" for var in self.vars ]
            param_vals = [ kwvars[var] for var in self.vars ]

            SQL += "USING " + ", ".join( param_list )

            return self.__executeQuery(SQL, *param_vals)
        else:
            return self.__executeQuery(SQL)

    def __executeQuery(self,query, *args):
        cursor = connection.cursor()
        if args:
            cursor.execute(query,args)
        else:
            cursor.execute(query)
        return cursor
</snippet></ROW><ROW><id>15862465</id><snippet># Global
getDiscountsById = PreparedStatement(
     "getDiscountsById",
     "SELECT * FROM table WHERE id = ? LIMIT 1",
     vars=["id"] # List out the names of the placeholders. This will assist in error checking.
)

#local to a view
result = getDiscountsById.execute(id=5)
</snippet></ROW><ROW><id>15862578</id><snippet>syncdb</snippet></ROW><ROW><id>15862578</id><snippet>ALTER TABLE</snippet></ROW><ROW><id>15862596</id><snippet>df['date'] = [i.date() for i in df.index]
</snippet></ROW><ROW><id>15862596</id><snippet>df['dailyOpen'] = df.groupby('date').open.transform(lambda s: s[0])
</snippet></ROW><ROW><id>15862596</id><snippet>df['flag'] = (df.low &lt; df.dailyOpen) &amp; (df.close &gt; df.dailyOpen)
</snippet></ROW><ROW><id>15862596</id><snippet>res = df.groupby('date').flag.sum()
</snippet></ROW><ROW><id>15862695</id><snippet>reversed()</snippet></ROW><ROW><id>15862695</id><snippet>list</snippet></ROW><ROW><id>15862695</id><snippet>tuple</snippet></ROW><ROW><id>15862870</id><snippet>s = input()
# input() is a function that gets input from the user
len(s.split())
# len() checks the length of a list, s.split() splits the users input into a word list.
</snippet></ROW><ROW><id>15862870</id><snippet>&gt;&gt;&gt; s = input()
"hello world"
&gt;&gt;&gt; s
'hello world'
&gt;&gt;&gt; s.split()
['hello', 'world']
&gt;&gt;&gt; len(s.split())
2
</snippet></ROW><ROW><id>15862870</id><snippet>print('You wrote {} words!'.format(len(input("Enter some text, I will tell you how many words you wrote!: ").split())))
</snippet></ROW><ROW><id>15863003</id><snippet>itertools.chain.from_iterable()</snippet></ROW><ROW><id>15863003</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; x = [e for e in ([n for n in xrange(random.randrange(1, 5))] 
...      for x in xrange(10))]
&gt;&gt;&gt; list(chain.from_iterable(x))
[0, 0, 0, 1, 2, 3, 0, 1, 2, 3, 0, 0, 1, 2, 3, 0, 1, 0, 1, 0, 0, 1, 2]
</snippet></ROW><ROW><id>15863102</id><snippet>re.search(r'\bis\b', your_string)
</snippet></ROW><ROW><id>15863102</id><snippet>re</snippet></ROW><ROW><id>15863187</id><snippet>class CandleBuffer():
    def __init__(self,candle):
        self.candlebuffer={0 : candle}
    def update(self,candle):
        self.candlebuffer[candle.timestamp]= candle

# ...
candleBuffer = CandleBuffer(a_candle)
candleBuffer.update(another_candle)
</snippet></ROW><ROW><id>15863313</id><snippet>hashlib</snippet></ROW><ROW><id>15863313</id><snippet>import crypt # Interface to crypt(3), to encrypt passwords.
import getpass # To get a password from user input.
import spwd # Shadow password database (to read /etc/shadow).

def login(user, password):
    """Tries to authenticate a user.
    Returns True if the authentication succeeds, else the reason
    (string) is returned."""
    try:
        enc_pwd = spwd.getspnam(user)[1]
        if enc_pwd in ["NP", "!", "", None]:
            return "user '%s' has no password set" % user
        if enc_pwd in ["LK", "*"]:
            return "account is locked"
        if enc_pwd == "!!":
            return "password has expired"
        # Encryption happens here, the hash is stripped from the
        # enc_pwd and the algorithm id and salt are used to encrypt
        # the password.
        if crypt.crypt(password, enc_pwd) == enc_pwd:
            return True
        else:
            return "incorrect password"
    except KeyError:
        return "user '%s' not found" % user
    return "unknown error"

if __name__ == "__main__":
    username = raw_input("Username:")
    password = getpass.getpass()
    status = login(username, password)
    if status == True:
        print("Logged in!")
    else:
        print("Login failed, %s." % status)
</snippet></ROW><ROW><id>15863335</id><snippet>class User(models.Model):
  ...
  friends = models.ManyToManyField(self) # self means User.
</snippet></ROW><ROW><id>15863335</id><snippet>class User(models.Model):
    ...
    friends = models.ManyToManyField(self, through='Friendship')


class Friendship(models.Model):
    from_user = models.ForeignKey(User, related_name="from_user")
    to_user = models.ForeignKey(User, related_name="to_user")
    friend_type = models.CharField(max_length=255)
    friend_rated = models.FloatField()
</snippet></ROW><ROW><id>15863503</id><snippet>genfromtxt()</snippet></ROW><ROW><id>15863503</id><snippet>table = numpy.loadtxt('bot1.csv', delimiter=',')
</snippet></ROW><ROW><id>15863503</id><snippet>array</snippet></ROW><ROW><id>15863503</id><snippet>from numpy import *</snippet></ROW><ROW><id>15863503</id><snippet>from pylab import *</snippet></ROW><ROW><id>15863503</id><snippet>array</snippet></ROW><ROW><id>15863503</id><snippet>numpy.array()</snippet></ROW><ROW><id>15863503</id><snippet>array()</snippet></ROW><ROW><id>15863718</id><snippet>Model</snippet></ROW><ROW><id>15863718</id><snippet>class MyModel(models.Model):
    .... some fields here...

    def clean(self):
        from django.core.exceptions import ValidationError
        # Don't allow draft entries to have a pub_date.
        if self.status == 'draft' and self.pub_date is not None:
            raise ValidationError('Draft entries may not have a publication date.')
        # Set the pub_date for published items if it hasn't been set already.
        if self.status == 'published' and self.pub_date is None:
            self.pub_date = datetime.date.today()
</snippet></ROW><ROW><id>15863718</id><snippet>clean</snippet></ROW><ROW><id>15863718</id><snippet>required</snippet></ROW><ROW><id>15863718</id><snippet>null=True</snippet></ROW><ROW><id>15863839</id><snippet>self.data</snippet></ROW><ROW><id>15863839</id><snippet>num is None</snippet></ROW><ROW><id>15863839</id><snippet>class Lazy:
    def __init__(self):
        self.data = 0

    def __call__(self, num):
        if num is None:
            return self.data
        else:
            self.data += num
</snippet></ROW><ROW><id>15863839</id><snippet>self.data</snippet></ROW><ROW><id>15863839</id><snippet>lazy = Lazy()
</snippet></ROW><ROW><id>15863839</id><snippet>None</snippet></ROW><ROW><id>15863839</id><snippet>lazy(None)
</snippet></ROW><ROW><id>15863839</id><snippet>__call__</snippet></ROW><ROW><id>15863839</id><snippet>True</snippet></ROW><ROW><id>15863839</id><snippet>self.data</snippet></ROW><ROW><id>15863839</id><snippet>self.data</snippet></ROW><ROW><id>15863839</id><snippet>print(a) # How do you expect Python to know the value of a?
a = 5    # too late to assign it now...
</snippet></ROW><ROW><id>15863842</id><snippet>continue</snippet></ROW><ROW><id>15863842</id><snippet>break</snippet></ROW><ROW><id>15863842</id><snippet>&lt;snip&gt;
else:
    try:
        parse = get_parse(INPUT)
    except ValueError:
        print "Delimiter type not valid"
        print "Try again..."
        continue
    if check_header(INPUT):
        print "Header is not valid"
        print "Try again..."
        continue
    # do other stuff
    doit = raw_input("Continue (Y/N)?[Y]: ")
    if doit == 'N'or doit == 'n':
        print "Exiting....."
        break
</snippet></ROW><ROW><id>15864014</id><snippet>%{
#include "simple.h"
%}
</snippet></ROW><ROW><id>15864014</id><snippet>i:c(2) 14
f:c(2.300000) 14.8000001907
d:c(2.3) 14.8
</snippet></ROW><ROW><id>15864099</id><snippet>test.py</snippet></ROW><ROW><id>15864099</id><snippet>abch open(__file__, 'r+') as f:
    f.write('abc')
</snippet></ROW><ROW><id>15864168</id><snippet>/xxx/</snippet></ROW><ROW><id>15864168</id><snippet>+</snippet></ROW><ROW><id>15864168</id><snippet>('/xxx/[a-zA-Z0-9-_]+', MyHandler)
</snippet></ROW><ROW><id>15864186</id><snippet>while</snippet></ROW><ROW><id>15864186</id><snippet>break</snippet></ROW><ROW><id>15864186</id><snippet>while</snippet></ROW><ROW><id>15864186</id><snippet>user_play</snippet></ROW><ROW><id>15864186</id><snippet>computer_play</snippet></ROW><ROW><id>15864186</id><snippet>usr_pts = 0
cmp_pts = 0

while (usr_pts &lt; 5 and cmp_pts &lt; 5):
    solved_word = False
    # set up word
    user_turn = False
    user_correct_guess = 0
    ai_correct_guess = 0
    while not solved_word:
        user_turn = not user_turn
        if user_turn:
            guess = play_user(...)
        else:
            guess = computer_play(...)
        # what ever accounting you need to do
        is_guess_in_word = test_guess_in_word(guess, ...)
        if is_guess_in_word:
            if user_turn:
                user_correct_guess += 1
            else:
                ai_correct_guess += 1
        solved_word = sort_out_if_word_solved(...)

    if user_correct_guess &gt; ai_correct_guess:
        usr_pts += 1
    elif user_correct_guess &lt; ai_correct_guess:
        cmp_pts +=1
    else:
        # a tie
        pass
</snippet></ROW><ROW><id>15864235</id><snippet>sql = "SELECT * FROM webuserid WHERE userid = %s"

try:
    # Execute the SQL command
    cursor.execute(sql, (dub_userid,))
    found = cursor.rowcount
except:
    print "SQL Error: Unable to fetch data"
if not found:
    print "User doesn't exist - Creating"
else:
    sys.exit("User exists")

sql = """INSERT INTO webuserid(userid)
         VALUES (%s)"""
try:
    # Execute the SQL command
    cursor.execute(sql, (userid,))
    # Commit your changes in the database
    db.commit()
except:
    #Rollback in case there is any error
    db.rollback()
# disconnect from server
db.close()
</snippet></ROW><ROW><id>15864235</id><snippet>db</snippet></ROW><ROW><id>15864235</id><snippet>with db:
    cursor.execute(sql, (userid,))

db.close()
</snippet></ROW><ROW><id>15864328</id><snippet>parser = ArgumentParser()
group = parser.add_mutually_exclusive_group()
group.set_defaults(mode='insert')
group.add_argument('--delete', action='store_const', dest='mode', const='delete')
group.add_argument('--update', action='store_const', dest='mode', const='update')
group.add_argument('--insert', action='store_const', dest='mode', const='insert')
parser.add_argument('value', nargs='?')
args = parser.parse_args()
</snippet></ROW><ROW><id>15864328</id><snippet>program --delete</snippet></ROW><ROW><id>15864328</id><snippet>value</snippet></ROW><ROW><id>15864328</id><snippet>if args.mode != 'insert' and args.value:
    parser.error("can't {} without a value argument".format(args.mode))
</snippet></ROW><ROW><id>15864328</id><snippet>program --insert</snippet></ROW><ROW><id>15864328</id><snippet>value</snippet></ROW><ROW><id>15864328</id><snippet>mode</snippet></ROW><ROW><id>15864328</id><snippet>None</snippet></ROW><ROW><id>15864328</id><snippet>args.mode is not None</snippet></ROW><ROW><id>15864328</id><snippet>if args.mode is None: args.mode = 'insert'</snippet></ROW><ROW><id>15864429</id><snippet>def ismember(a, b):
    bind = {}
    for i, elt in enumerate(b):
        if elt not in bind:
            bind[elt] = i
    return [bind.get(itm, None) for itm in a]  # None can be replaced by any other "not in b" value
</snippet></ROW><ROW><id>15864429</id><snippet>O(len(A)*len(B))</snippet></ROW><ROW><id>15864429</id><snippet>O(len(A)+len(B))</snippet></ROW><ROW><id>15864429</id><snippet>A = [2378, 2378, 2378, 2378]
B = [2378, 2379]
</snippet></ROW><ROW><id>15864429</id><snippet>None</snippet></ROW><ROW><id>15864429</id><snippet>None</snippet></ROW><ROW><id>15864429</id><snippet>Bind.get(item,None)</snippet></ROW><ROW><id>15864483</id><snippet>self</snippet></ROW><ROW><id>15864483</id><snippet>label1</snippet></ROW><ROW><id>15864483</id><snippet>def question1_UI(self):
    # ...
    label1 = Label(self, image=gif1)
    label1.image = gif1 
    label1.grid(row = 0, column = 0, columnspan = 2, sticky=NW)

    questionAButton = Button(self, text='Submit',font=('MS', 8,'bold'))
    questionAButton.grid(row = 1, column = 0, sticky = S)
    questionBButton = Button(self, text='Submit',font=('MS', 8,'bold'))
    questionBButton.grid(row = 1, column = 1, sticky = S)
    questionCButton = Button(self, text='Submit',font=('MS', 8,'bold'))
    questionCButton.grid(row = 2, column = 0, sticky = S)
    questionDButton = Button(self, text='Submit',font=('MS', 8,'bold'))
    questionDButton.grid(row = 2, column = 1, sticky = S)
</snippet></ROW><ROW><id>15864541</id><snippet>particlesx=old_particles
</snippet></ROW><ROW><id>15864541</id><snippet>particlesx</snippet></ROW><ROW><id>15864541</id><snippet>old_particles</snippet></ROW><ROW><id>15864541</id><snippet>import copy
...
particlesx = copy.deepcopy(old_particles)
</snippet></ROW><ROW><id>15864795</id><snippet>results.append([{'title': title, 'finished': test.grade_date_time, 'grade': test.test_grade}])
</snippet></ROW><ROW><id>15864827</id><snippet>Rect</snippet></ROW><ROW><id>15864827</id><snippet>Rect.move_ip</snippet></ROW><ROW><id>15864827</id><snippet>myrect = pygame.Rect(0, 0, 10, 10)
myrect.move_ip(100, 50)
</snippet></ROW><ROW><id>15864827</id><snippet>Rect.clamp_ip</snippet></ROW><ROW><id>15864827</id><snippet>myrect = pygame.Rect(100, 0, 10, 10)
bounds = pygame.Rect(0, 0, 50, 50)
myrect.clamp_ip(bounds)
</snippet></ROW><ROW><id>15864827</id><snippet>Rect.colliderect</snippet></ROW><ROW><id>15864827</id><snippet>myrect = pygame.Rect(0, 0, 10, 10)
another = pygame.Rect(5, 5, 10, 10)
print(myrect.colliderect(another)) # 1
</snippet></ROW><ROW><id>15864827</id><snippet>colliderect</snippet></ROW><ROW><id>15864827</id><snippet>import pygame

# Constants
WIDTH = 700
HEIGHT = 500
SCREEN_AREA = pygame.Rect(0, 0, WIDTH, HEIGHT)
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)

# Initialization
pygame.init()
screen = pygame.display.set_mode([WIDTH, HEIGHT])
pygame.mouse.set_visible(0)
pygame.display.set_caption("Breakout Recreation WIP")
clock = pygame.time.Clock()

# Variables
paddle = pygame.Rect(350, 480, 50, 10)
ball = pygame.Rect(10, 250, 15, 15)
paddle_movement_x = 0
ball_direction = (1, 1)
balls = 3
done = False

while not done and balls &gt; 0:

    # Process events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            paddle_movement_x = -2
        elif keys[pygame.K_RIGHT]:
            paddle_movement_x = 2
        else:
            paddle_movement_x = 0

    # Move paddle
    paddle.move_ip(paddle_movement_x, 0)
    paddle.clamp_ip(SCREEN_AREA)

    # Move ball
    ball.move_ip(*ball_direction)
    if ball.right &gt; WIDTH or ball.left &lt; 0:
        ball_direction = -ball_direction[0], ball_direction[1]
    elif ball.top &lt; 0 or ball.bottom &gt; HEIGHT or paddle.colliderect(ball):
        ball_direction = ball_direction[0], -ball_direction[1]
    ball.clamp_ip(SCREEN_AREA)

    # Redraw screen
    screen.fill(BLACK)
    pygame.draw.rect(screen, WHITE, paddle)
    pygame.draw.rect(screen, WHITE, ball)
    pygame.display.flip()
    clock.tick(100)

pygame.quit()
</snippet></ROW><ROW><id>15864963</id><snippet>#!/usr/bin/env python

# difflib_test

import difflib

file1 = open('/home/saad/Code/test/new_tweets', 'r')
file2 = open('/home/saad/PTITVProgs', 'r')

diff = difflib.ndiff(file1.readlines(), file2.readlines())
delta = ''.join(x[2:] for x in diff if x.startswith('- '))
print delta
</snippet></ROW><ROW><id>15865275</id><snippet>i</snippet></ROW><ROW><id>15865275</id><snippet>i</snippet></ROW><ROW><id>15865275</id><snippet>def _is_min_heap(L, i):
    l, r = 2 * i + 1, 2 * i + 2

    if r &lt; len(L): # has left and right children
        if L[l] &lt; L[i] or L[r] &lt; L[i]: # heap property is violated
            return False

        # check both children trees
        return _is_min_heap(L, l) and _is_min_heap(L, r)
    elif l &lt; len(L): # only has left children
        if L[l] &lt; L[i]: # heap property is violated
            return False

        # check left children tree
        return _is_min_heap(L, l)
    else: # has no children
        return True
</snippet></ROW><ROW><id>15865460</id><snippet>append()</snippet></ROW><ROW><id>15865460</id><snippet>dict1["A"].append(1)
</snippet></ROW><ROW><id>15865460</id><snippet>append()</snippet></ROW><ROW><id>15865460</id><snippet>None</snippet></ROW><ROW><id>15865460</id><snippet>&gt;&gt;&gt; dict1 = {'A': []}
&gt;&gt;&gt; dict1['A'].append(1)
&gt;&gt;&gt; dict1
{'A': [1]}
</snippet></ROW><ROW><id>15865460</id><snippet>None</snippet></ROW><ROW><id>15865460</id><snippet>&gt;&gt;&gt; alist = []
&gt;&gt;&gt; alist.append(1) is None
True
&gt;&gt;&gt; alist
[1]
</snippet></ROW><ROW><id>15865546</id><snippet>ax.imshow(X)</snippet></ROW><ROW><id>15865546</id><snippet>cmap</snippet></ROW><ROW><id>15865546</id><snippet>highlight</snippet></ROW><ROW><id>15865546</id><snippet>colour</snippet></ROW><ROW><id>15865546</id><snippet>X</snippet></ROW><ROW><id>15865546</id><snippet>ax.imshow</snippet></ROW><ROW><id>15865546</id><snippet>vmin=0</snippet></ROW><ROW><id>15865546</id><snippet>vmax=1</snippet></ROW><ROW><id>15865546</id><snippet>ax.imshow</snippet></ROW><ROW><id>15865546</id><snippet>import numpy as np
import matplotlib.pyplot as plt

N = 150
highlightc = np.zeros([N, N])

M = 1000
hl = np.random.randint(N, size=(M, 2))
highlightc[zip(*hl)] = 1

colour = 0.21
fig, ax = plt.subplots()
h = ax.imshow(
    (highlightc * colour), interpolation='nearest', cmap=plt.cm.spectral_r,
    vmin=0, vmax=1)
plt.show()
</snippet></ROW><ROW><id>15865563</id><snippet>setup.py</snippet></ROW><ROW><id>15865563</id><snippet>requests</snippet></ROW><ROW><id>15865563</id><snippet>pip install requests</snippet></ROW><ROW><id>15865596</id><snippet>re</snippet></ROW><ROW><id>15865596</id><snippet>import re

yourrule = re.compile(r"@£$¥èéùìòÇ\fØø\nÅåΔ_ΦΓΛΩΠΨΣΘΞÆæßÉ !\"#¤%&amp;'()*+,-./[0-9]:;&lt;=&gt;\?¡[A-Z]ÄÖÑÜ§¿[a-z]äöñüà\^\{\}\[~\]\|€")

def validate_GSM_characters(value):
    """ Raise a ValidationError if the value contains any values not within
        the GSM character set.
    """
    if not yourrule.search(value):
        msg = u"Invalid characters."

        raise ValidationError(msg)
</snippet></ROW><ROW><id>15865596</id><snippet>RegexValidator</snippet></ROW><ROW><id>15865770</id><snippet>C[k] == i</snippet></ROW><ROW><id>15865770</id><snippet>B[k] == i</snippet></ROW><ROW><id>15865770</id><snippet>import numpy as np

N = 5
M = 2

A = np.zeros((M,N))
B = np.random.randint(M, size=N) # contains indices for A
C = np.random.rand(N,N)

for i in range(M):
    for j in range(N):
        for k in range(N):
            if B[k] == i:
                A[i,j] += C[j,k]
</snippet></ROW><ROW><id>15865770</id><snippet>k</snippet></ROW><ROW><id>15865770</id><snippet>for i in range(M):
    for j in range(N):
        A[i,j] = C[j, B == i].sum()
</snippet></ROW><ROW><id>15865770</id><snippet>C[j][B == i].sum()</snippet></ROW><ROW><id>15865770</id><snippet>j</snippet></ROW><ROW><id>15865770</id><snippet>C</snippet></ROW><ROW><id>15865770</id><snippet>B</snippet></ROW><ROW><id>15865770</id><snippet>i</snippet></ROW><ROW><id>15865770</id><snippet>i</snippet></ROW><ROW><id>15865770</id><snippet>i = np.arange(M)[:,np.newaxis]
mask = (B == i).astype(int)
for j in range(N):
    A[:,j] = (C[j] * mask).sum(axis=-1)
</snippet></ROW><ROW><id>15865770</id><snippet>A</snippet></ROW><ROW><id>15865770</id><snippet>A</snippet></ROW><ROW><id>15865770</id><snippet>C</snippet></ROW><ROW><id>15865770</id><snippet>C</snippet></ROW><ROW><id>15865770</id><snippet>B</snippet></ROW><ROW><id>15865770</id><snippet>i</snippet></ROW><ROW><id>15865770</id><snippet>i</snippet></ROW><ROW><id>15865770</id><snippet>B == i</snippet></ROW><ROW><id>15865770</id><snippet>B:
    array([1, 1, 1, 1, 0])

i: 
    array([[0],
           [1]])

B == i:
    array([[False, False, False, False,  True],
           [ True,  True,  True,  True, False]], dtype=bool)
</snippet></ROW><ROW><id>15865770</id><snippet>M</snippet></ROW><ROW><id>15865770</id><snippet>C[j]</snippet></ROW><ROW><id>15865770</id><snippet>B == i</snippet></ROW><ROW><id>15865770</id><snippet>j</snippet></ROW><ROW><id>15865770</id><snippet>A</snippet></ROW><ROW><id>15865770</id><snippet>C</snippet></ROW><ROW><id>15865770</id><snippet>B == i</snippet></ROW><ROW><id>15865770</id><snippet>C</snippet></ROW><ROW><id>15865770</id><snippet>B == i</snippet></ROW><ROW><id>15865770</id><snippet>False</snippet></ROW><ROW><id>15865770</id><snippet>C</snippet></ROW><ROW><id>15865770</id><snippet>B == i</snippet></ROW><ROW><id>15865770</id><snippet>mask = (B == i).astype(int):
    array([[0, 0, 0, 0, 1],
           [1, 1, 1, 1, 0]])
</snippet></ROW><ROW><id>15865770</id><snippet>C</snippet></ROW><ROW><id>15865770</id><snippet>C[j]:
    array([ 0.19844887,  0.44858679,  0.35370919,  0.84074259,  0.74513377])

C[j] * mask:
    array([[ 0.        ,  0.        ,  0.        ,  0.        ,  0.74513377],
           [ 0.19844887,  0.44858679,  0.35370919,  0.84074259,  0.        ]])
</snippet></ROW><ROW><id>15865770</id><snippet>A</snippet></ROW><ROW><id>15865770</id><snippet>A[:,j]</snippet></ROW><ROW><id>15865770</id><snippet>(C[j] * mask).sum(axis=-1):
    array([ 0.74513377,  1.84148744])
</snippet></ROW><ROW><id>15865770</id><snippet>j</snippet></ROW><ROW><id>15865770</id><snippet>i = np.arange(M)[:,np.newaxis,np.newaxis]
mask = (B == i).astype(int)
A = (C * mask).sum(axis=-1)
</snippet></ROW><ROW><id>15865770</id><snippet>A = (B == np.arange(M)[:,np.newaxis]).dot(C.T)
</snippet></ROW><ROW><id>15865770</id><snippet>M</snippet></ROW><ROW><id>15865770</id><snippet>N</snippet></ROW><ROW><id>15865770</id><snippet>B == np.arange(M)[:,np.newaxis]</snippet></ROW><ROW><id>15865770</id><snippet>B == i</snippet></ROW><ROW><id>15865770</id><snippet>j</snippet></ROW><ROW><id>15865770</id><snippet>k</snippet></ROW><ROW><id>15865770</id><snippet>dot</snippet></ROW><ROW><id>15865770</id><snippet>B == i</snippet></ROW><ROW><id>15865770</id><snippet>C</snippet></ROW><ROW><id>15865770</id><snippet>C</snippet></ROW><ROW><id>15865770</id><snippet>dot</snippet></ROW><ROW><id>15865770</id><snippet>ATLAS</snippet></ROW><ROW><id>15865770</id><snippet>MKL</snippet></ROW><ROW><id>15865770</id><snippet>M</snippet></ROW><ROW><id>15865770</id><snippet>N</snippet></ROW><ROW><id>15865770</id><snippet>M, N = 2, 5

%timeit loops(B,C,M)
10000 loops, best of 3: 83 us per loop

%timeit k_vectorized(B,C,M)
10000 loops, best of 3: 106 us per loop

%timeit vectorized(B,C,M)
10000 loops, best of 3: 23.7 us per loop

%timeit askewchan(B,C,M)
10000 loops, best of 3: 42.7 us per loop

%timeit einsum(B,C,M)
100000 loops, best of 3: 15.2 us per loop

%timeit dsm(B,C,M)
100000 loops, best of 3: 13.9 us per loop
</snippet></ROW><ROW><id>15865770</id><snippet>M</snippet></ROW><ROW><id>15865770</id><snippet>N</snippet></ROW><ROW><id>15865770</id><snippet>M, N = 50, 20

%timeit loops(B,C,M)
10 loops, best of 3: 50.3 ms per loop

%timeit k_vectorized(B,C,M)
100 loops, best of 3: 10.5 ms per loop

%timeit ik_vectorized(B,C,M)
1000 loops, best of 3: 963 us per loop

%timeit vectorized(B,C,M)
1000 loops, best of 3: 247 us per loop

%timeit askewchan(B,C,M)
1000 loops, best of 3: 493 us per loop

%timeit einsum(B,C,M)
10000 loops, best of 3: 134 us per loop

%timeit dsm(B,C,M)
10000 loops, best of 3: 80.2 us per loop
</snippet></ROW><ROW><id>15865807</id><snippet>new = [{k.upper(): v for k, v in r.iteritems()} for r in reader]
</snippet></ROW><ROW><id>15865807</id><snippet>for r in reader:
    r = {{k.upper(): v for k, v in r.iteritems()}
    # use r
</snippet></ROW><ROW><id>15865945</id><snippet>str()</snippet></ROW><ROW><id>15865945</id><snippet>enumerate()</snippet></ROW><ROW><id>15865945</id><snippet>d = {str(i): value for i, value in enumerate(targets)}
</snippet></ROW><ROW><id>15865945</id><snippet>d = {'column{}'.format(i): value for i, value in enumerate(targets)}
</snippet></ROW><ROW><id>15865995</id><snippet>execute_from_command_line</snippet></ROW><ROW><id>15865995</id><snippet>from django.core.management import execute_from_command_line
</snippet></ROW><ROW><id>15865995</id><snippet>execute_from_command_line(["manage.py", "syncdb"])
</snippet></ROW><ROW><id>15865995</id><snippet>import subprocess
output = subprocess.check_output(["python", "manage.py", "syncdb"])
for line in output.split('\n'):
    # do something with line
</snippet></ROW><ROW><id>15866133</id><snippet>transactions</snippet></ROW><ROW><id>15866133</id><snippet>transactions</snippet></ROW><ROW><id>15866133</id><snippet>transactions</snippet></ROW><ROW><id>15866133</id><snippet>transactions</snippet></ROW><ROW><id>15866133</id><snippet>transactions</snippet></ROW><ROW><id>15866133</id><snippet>GET /transactions/ # reads all transactions for all users
GET /transactions/yyyy # reads all trasnsaction for all users with date 
GET /users/uuid/transactions # reads all transaction for a particular user
GET /users/uuid/transactions/yyyy # reads all transactions for a particular user with date        
</snippet></ROW><ROW><id>15866375</id><snippet>k(d-e)</snippet></ROW><ROW><id>15866375</id><snippet>k</snippet></ROW><ROW><id>15866375</id><snippet>d-e</snippet></ROW><ROW><id>15866375</id><snippet>k*(d-e)</snippet></ROW><ROW><id>15866538</id><snippet>query = session.query(
       date_trunc('min', http.date).label('date_minute')
      ,http.statusline
      ,func.count(http.statusline).label('count')
   ).filter(http.statusline.contains(status)
           ,http.date&gt;=(DD)
   ).group_by('date_minute'
             ,http.statusline
   ).order_by(asc('date_minute')).all()
</snippet></ROW><ROW><id>15866538</id><snippet>date_trunc('min', http.date)</snippet></ROW><ROW><id>15866538</id><snippet>http.date</snippet></ROW><ROW><id>15866538</id><snippet>SELECT</snippet></ROW><ROW><id>15866538</id><snippet>GROUP BY</snippet></ROW><ROW><id>15866538</id><snippet>ORDER BY</snippet></ROW><ROW><id>15866538</id><snippet>date</snippet></ROW><ROW><id>15866538</id><snippet>timestamp</snippet></ROW><ROW><id>15866635</id><snippet>r'^[\w@?£!1$"¥#è?¤é%ù&amp;ì\\ò(Ç)*:Ø+;ÄäøÆ,&lt;LÖlöæ\-=ÑñÅß.&gt;ÜüåÉ/§à¡¿\']+$'
</snippet></ROW><ROW><id>15866635</id><snippet>^</snippet></ROW><ROW><id>15866635</id><snippet>$</snippet></ROW><ROW><id>15866635</id><snippet>\s</snippet></ROW><ROW><id>15866702</id><snippet>exec(..., globals(), locals())</snippet></ROW><ROW><id>15866702</id><snippet>globals() is locals()</snippet></ROW><ROW><id>15866702</id><snippet>class A(object):

  items = (
    'foo/bar',
    'foo/baz',
    'foof',
    'barf/fizz',
  )

  whitelist = (
    'foo/',
  )

  for key in items:
    try:
      # Not terribly efficient, but who cares; computers are fast.
      next(True for prefix in whitelist if key.startswith(prefix))
      # Found!
      print(key)
    except StopIteration:
      pass
</snippet></ROW><ROW><id>15866729</id><snippet>z2*(10**degree)</snippet></ROW><ROW><id>15866729</id><snippet>2*m</snippet></ROW><ROW><id>15866729</id><snippet>m</snippet></ROW><ROW><id>15866729</id><snippet>int( ceil(len(x) / 2.0))</snippet></ROW><ROW><id>15866729</id><snippet>len(x)</snippet></ROW><ROW><id>15866729</id><snippet>len(y)</snippet></ROW><ROW><id>15866729</id><snippet>degree</snippet></ROW><ROW><id>15866729</id><snippet>def kmult(x, y):
    if min(x, y) &lt; 10:
        return x * y

    m = half_ceil(degree(max(x, y)))

    x1, x0 = decompose(x, m)
    y1, y0 = decompose(y, m)

    z2 = kmult(x1, y1)
    z0 = kmult(x0, y0)
    z1 = kmult(x1 + x0, y1 + y0) - z2 - z0

    xy = z2 * 10**(2*m)  +  z1 * 10**m  +  z0
    return xy


def decompose(x, m):
    return x // 10 ** m, x % 10 ** m

def degree(x):
    return len(str(x))

def half_ceil(n):
    return n // 2 + (n &amp; 1)
</snippet></ROW><ROW><id>15866729</id><snippet>print kmult(100, 100)

def test_kmult(r):
    for x, y in [(a, b) for b in range(r+1) for a in range(r+1)]:
        if kmult(x, y) != x * y:
            print('fail')
            break
    else:
        print('success')


test_kmult(100)
</snippet></ROW><ROW><id>15866729</id><snippet>10000
success
</snippet></ROW><ROW><id>15866880</id><snippet>pyreadline</snippet></ROW><ROW><id>15866880</id><snippet>PIL</snippet></ROW><ROW><id>15866880</id><snippet>cython</snippet></ROW><ROW><id>15866957</id><snippet>from BeautifulSoup import BeautifulSoup

t="""
&lt;h2 class="tabellen_ueberschrift al"&gt;Points&lt;/h2&gt;
&lt;table class="tabelle_grafik lh" cellpadding="2" cellspacing="1"&gt;
&lt;th&gt;&lt;td&gt;yes me!&lt;/th&gt;&lt;/td&gt;&lt;/table&gt;
&lt;h2 class="tabellen_ueberschrift al"&gt;Bad&lt;/h2&gt;
&lt;table class="tabelle_grafik lh" cellpadding="2" cellspacing="1"&gt;
&lt;th&gt;&lt;td&gt;woo woo&lt;/td&gt;&lt;/th&gt;&lt;/table&gt;
"""

soup = BeautifulSoup(t)

for ta in soup.findAll('table'):
    for s in ta.findPreviousSiblings():
        if s.name == u'h2':
            if s.text == u'Points':
                print ta 
            else:
                break;
</snippet></ROW><ROW><id>15867252</id><snippet>#update_data={"enable_vod_hd": "1", "enable_est_hd": "1"}
newfile.write((
    """&lt;cleared_for_hd_vod&gt;%(enable_est_hd)s&lt;/cleared_for_hd_vod&gt;
       &lt;cleared_for_hd_sale&gt;%(enable_vod_hd)s&lt;/cleared_for_hd_sale&gt;
    """ %
    ({
      'enable_est_hd': bool(update_data["enable_est_hd"]),
      'enable_vod_hd': bool(update_data["enable_vod_hd"])
    })
).lower())
</snippet></ROW><ROW><id>15867277</id><snippet>sets</snippet></ROW><ROW><id>15867277</id><snippet>In [5]: se1=set(x[1] for x in lstup1)

In [6]: se2=set(x[1] for x in lstup2)

In [7]: len(se1&amp;se2)
Out[7]: 2
</snippet></ROW><ROW><id>15867277</id><snippet>O(min(len(se1), len(se2))</snippet></ROW><ROW><id>15867277</id><snippet>O(L)</snippet></ROW><ROW><id>15867277</id><snippet>L</snippet></ROW><ROW><id>15867277</id><snippet>izip()</snippet></ROW><ROW><id>15867277</id><snippet>sum(i[1]==j[1] for i,j in izip(lstup1,lstup2))
</snippet></ROW><ROW><id>15867312</id><snippet>main</snippet></ROW><ROW><id>15867312</id><snippet>import os
import sys

def main():
    ...

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>15867536</id><snippet>PATH = C:/Python27/</snippet></ROW><ROW><id>15867578</id><snippet>import numpy as np
import Image
import glob

filenames = glob.glob('/path/to/your/files/*.pgm')
images = [Image.open(fn).convert('L') for fn in filenames]
data = np.dstack([np.array(im) for im in images])
</snippet></ROW><ROW><id>15867578</id><snippet>filenames.sort()</snippet></ROW><ROW><id>15867689</id><snippet>myCar.set_make=('Porche')</snippet></ROW><ROW><id>15867689</id><snippet>'Porche'</snippet></ROW><ROW><id>15867689</id><snippet>=</snippet></ROW><ROW><id>15867689</id><snippet>myCar.set_make('Porche')
myCar.get_make() # Porche
</snippet></ROW><ROW><id>15867689</id><snippet>set_make</snippet></ROW><ROW><id>15867689</id><snippet>def set_make(self, make):
    self.__make = make # carMake is not defined!
</snippet></ROW><ROW><id>15867992</id><snippet>\b</snippet></ROW><ROW><id>15867992</id><snippet>\bstr1\b</snippet></ROW><ROW><id>15867992</id><snippet>str1</snippet></ROW><ROW><id>15867992</id><snippet>\b</snippet></ROW><ROW><id>15867992</id><snippet>str1</snippet></ROW><ROW><id>15867992</id><snippet>\b</snippet></ROW><ROW><id>15867992</id><snippet>output = re.search("Torsion " + str1 + " Group", inputstring)
</snippet></ROW><ROW><id>15867992</id><snippet>output = re.search("Torsion %s Group" % str1, inputstring)
</snippet></ROW><ROW><id>15867992</id><snippet>inputstring = 'What is a Torsion Abelian Group (TAB)?'
str1 = "Abelian"
output = re.search("Torsion %s Group" % str1, inputstring)
if output:
    print str(output.group(0))
</snippet></ROW><ROW><id>15867992</id><snippet>Torsion Abelian Group
</snippet></ROW><ROW><id>15868000</id><snippet>os</snippet></ROW><ROW><id>15868000</id><snippet>os.py</snippet></ROW><ROW><id>15868000</id><snippet>posixmodule.c</snippet></ROW><ROW><id>15868000</id><snippet>os.listdir()</snippet></ROW><ROW><id>15868000</id><snippet>opendir</snippet></ROW><ROW><id>15868000</id><snippet>readdir</snippet></ROW><ROW><id>15868000</id><snippet>closedir</snippet></ROW><ROW><id>15868049</id><snippet>map = numpy.random.randint(10, size=(2 * World.MAP_WIDTH, 2 * World.MAP_HEIGHT))
map[0 : World.MAP_WIDTH / 4, :] = -1
map[7 * World.MAP_WIDTH / 4 : 2 * World.MAP_WIDTH, :] = -1
map[:, 0 : World.MAP_HEIGHT / 4] = -1
map[:, 7 * World.MAP_HEIGHT / 4 : 2 * World.MAP_WIDTH] = -1
</snippet></ROW><ROW><id>15868341</id><snippet>from itertools import groupby
with open('testing.txt') as file:
    goodlines = [line.strip() for line in file if line.strip()]
    splitted = list( list(val[1]) for val in groupby(goodlines, lambda l: l[0].isdigit()))
    names = [ list(val)[0] for val in splitted[::2] ]
    val_split = [ [v.split() for v in val] for val in splitted[1::2] ]
    val_sorted = [ sorted(val, key=lambda v:int(v[1]))[-1][0] for val in val_split]
    result = dict(zip(names, val_sorted))
print result
</snippet></ROW><ROW><id>15868432</id><snippet>shell=True</snippet></ROW><ROW><id>15868432</id><snippet>call(args, shell=True)
</snippet></ROW><ROW><id>15868470</id><snippet>.items()</snippet></ROW><ROW><id>15868470</id><snippet>{% for item, children in data.items() %}
    &lt;h3&gt;{{ item }}&lt;/h3&gt;

    {% for c in children %}
        {{ c.name }}
    {% endfor %}

{% endfor %}
</snippet></ROW><ROW><id>15868531</id><snippet>numpy.asarray</snippet></ROW><ROW><id>15868531</id><snippet>import numpy as np
myarray = np.asarray(mylist)
</snippet></ROW><ROW><id>15868535</id><snippet>import re
sentence = "You are my favorite. Are you my friend? Are you an elephant?"
items = []
for item in re.finditer("[Aa]re", sentence, ):
    items.append(item.start())
</snippet></ROW><ROW><id>15868703</id><snippet>&gt;&gt;&gt; N_SUBBITS = 4
&gt;&gt;&gt; N_SUBLISTS = 3
&gt;&gt;&gt; ([0] + [1]*(N_SUBBITS-1)) * N_SUBLISTS
[0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1]
</snippet></ROW><ROW><id>15868835</id><snippet>--result-file=file</snippet></ROW><ROW><id>15868835</id><snippet>subprocess.call(shlex.split('mysqldump -u root updates --result-file=%s' % filepath ))</snippet></ROW><ROW><id>15868835</id><snippet>&gt;</snippet></ROW><ROW><id>15868846</id><snippet>initUI</snippet></ROW><ROW><id>15868846</id><snippet>def initUI(self):
    # ...
    self.run_val = Entry(self)          
    self.run_val["width"] = 5
    self.run_val.place(x=80, y=40)
</snippet></ROW><ROW><id>15868846</id><snippet>self.run_val.get()</snippet></ROW><ROW><id>15868982</id><snippet>#:Loads the qico plug-in lets you use .ico icons
QPlugin = QPluginLoader("qico4.dll")
</snippet></ROW><ROW><id>15869092</id><snippet>Lib/test</snippet></ROW><ROW><id>15869139</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; x = struct.pack("@L",1000)
&gt;&gt;&gt; map(ord, x)
[232, 3, 0, 0]
</snippet></ROW><ROW><id>15869139</id><snippet>&gt;&gt;&gt; map(hex, map(ord, x))
['0xe8', '0x3', '0x0', '0x0']
</snippet></ROW><ROW><id>15869278</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>15869278</id><snippet>python</snippet></ROW><ROW><id>15869278</id><snippet>$PATH</snippet></ROW><ROW><id>15869278</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>15869278</id><snippet>/usr/bin/env python</snippet></ROW><ROW><id>15869278</id><snippet>type -a python</snippet></ROW><ROW><id>15869278</id><snippet>python</snippet></ROW><ROW><id>15869278</id><snippet>$PATH</snippet></ROW><ROW><id>15869278</id><snippet>type -a python</snippet></ROW><ROW><id>15869278</id><snippet>python is /opt/local/bin/python
python is /usr/bin/python
python is /usr/local/bin/python
</snippet></ROW><ROW><id>15869278</id><snippet>$PATH</snippet></ROW><ROW><id>15869278</id><snippet>/usr/bin/env</snippet></ROW><ROW><id>15869280</id><snippet>ValueError: time data '' does not match format '%m/%d/%Y %H:%M'
</snippet></ROW><ROW><id>15869280</id><snippet>row[1] == ''</snippet></ROW><ROW><id>15869280</id><snippet>time.strptime('', '%m/%d/%Y %H:%M')</snippet></ROW><ROW><id>15869442</id><snippet>from __future__ import print_function
import urllib2

baseURL = "http://www.website.com/page/"

for n in xrange(100):
    fullURL = baseURL + str(n)
    #print fullURL
    try:
        req = urllib2.Request(fullURL)
        resp = urllib2.urlopen(req)
        if resp.getcode() == 404:
            #Do whatever you want if 404 is found
            print ("404 Found!")
        else:
            #Do your normal stuff here if page is found.
            print ("URL: {0} Response: {1}".format(fullURL, resp.getcode()))
    except:
        print ("Could not connect to URL: {0} ".format(fullURL))
</snippet></ROW><ROW><id>15869442</id><snippet>urllib2</snippet></ROW><ROW><id>15869442</id><snippet>scapy</snippet></ROW><ROW><id>15869442</id><snippet>urllib2</snippet></ROW><ROW><id>15869442</id><snippet>404 - Not Found</snippet></ROW><ROW><id>15869526</id><snippet>set_of_tuples = []
while `&lt;loop-condition&gt;`:
    set_of_tuples.append(function(n, n, n))
</snippet></ROW><ROW><id>15869526</id><snippet>average = tuple(sum(x[i] for x in set_of_tuples) / len(set_of_tuples)
                for i in range(len(set_of_tuples[0])))
</snippet></ROW><ROW><id>15869526</id><snippet>average = numpy.average(arr, axis=0)
</snippet></ROW><ROW><id>15869620</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import matplotlib.ticker as ticker
import datetime as DT

dates = mdates.num2date(mdates.drange(DT.datetime(2012, 11, 30),
                                      DT.datetime(2012, 12, 4),
                                      DT.timedelta(days=1)))
print(dates)
# [datetime.datetime(2012, 11, 30, 0, 0, tzinfo=&lt;matplotlib.dates._UTC object at 0x8c8f8ec&gt;), datetime.datetime(2012, 12, 1, 0, 0, tzinfo=&lt;matplotlib.dates._UTC object at 0x8c8f8ec&gt;), datetime.datetime(2012, 12, 2, 0, 0, tzinfo=&lt;matplotlib.dates._UTC object at 0x8c8f8ec&gt;), datetime.datetime(2012, 12, 3, 0, 0, tzinfo=&lt;matplotlib.dates._UTC object at 0x8c8f8ec&gt;)]

vals = np.random.randint(10, size=len(dates))
fig, ax = plt.subplots()
ax.bar(dates, vals, align='center')
ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
plt.xticks(rotation=25)
ax.set_xticks(dates)
plt.show()
</snippet></ROW><ROW><id>15869803</id><snippet>_RSAobj.blind()</snippet></ROW><ROW><id>15869803</id><snippet>_RSAobj.unblind()</snippet></ROW><ROW><id>15869803</id><snippet>long</snippet></ROW><ROW><id>15869803</id><snippet>string</snippet></ROW><ROW><id>15869803</id><snippet>int</snippet></ROW><ROW><id>15869803</id><snippet>long</snippet></ROW><ROW><id>15869803</id><snippet>L</snippet></ROW><ROW><id>15869803</id><snippet>9001L</snippet></ROW><ROW><id>15869803</id><snippet>_RSAobj.sign()</snippet></ROW><ROW><id>15869803</id><snippet>messageHashed = md5.new('MyMessage').digest()
print 'Message MD5:%s' % messageHashed
blindSigned = loadedPublic.blind(messageHashed,123L)
print 'Blinded: %s' % blindSigned
blindSigned = loadedPrivate.sign(blindSigned,loadedPrivate.n)[0]
print 'Blinded Signed: %s' % str(blindSigned)

unblind = loadedPublic.unblind(blindSigned,123L)
print '-------------'
print 'Unblinded: %s' % unblind
verify = loadedPublic.verify(unblind,(loadedPrivate.n,loadedPrivate.d))
print 'Verify: %s' % verify
</snippet></ROW><ROW><id>15869803</id><snippet>verify</snippet></ROW><ROW><id>15869803</id><snippet>False</snippet></ROW><ROW><id>15869803</id><snippet>messageHashed</snippet></ROW><ROW><id>15869803</id><snippet>_RSAobj.verify(self, M, signature)</snippet></ROW><ROW><id>15869803</id><snippet>signature</snippet></ROW><ROW><id>15869803</id><snippet>verify = loadedPublic.verify(messageHashed, (unblind,))
</snippet></ROW><ROW><id>15869803</id><snippet>verify</snippet></ROW><ROW><id>15869803</id><snippet>True</snippet></ROW><ROW><id>15869889</id><snippet>f = open('text.txt','wb')
</snippet></ROW><ROW><id>15869889</id><snippet>f.write(chr(510).encode('utf-8'))
</snippet></ROW><ROW><id>15869889</id><snippet>f.write(unichr(510).encode('utf-8'))
</snippet></ROW><ROW><id>15869889</id><snippet>f.close()
</snippet></ROW><ROW><id>15869889</id><snippet>&gt;&gt;&gt; f = open('e:\\text.txt','wt',encoding="utf-8")
&gt;&gt;&gt; f.write(chr(510))
&gt;&gt;&gt; f.close()
</snippet></ROW><ROW><id>15869889</id><snippet>&gt;&gt;&gt; f = open('e:\\text.txt','rb')
&gt;&gt;&gt; content = f.read().decode('utf-8')
&gt;&gt;&gt; content
'Ǿ'
</snippet></ROW><ROW><id>15869889</id><snippet>&gt;&gt;&gt; f = open('e:\\text.txt','rt',encoding='utf-8')
&gt;&gt;&gt; f.read()
'Ǿ'
</snippet></ROW><ROW><id>15869993</id><snippet>if yy &lt; -.00001:</snippet></ROW><ROW><id>15869993</id><snippet>yy = sh</snippet></ROW><ROW><id>15869993</id><snippet>if yy&lt;-.00001:
    y=0
    yy=sh   # &lt;- add this line
    y+= 1
    pygame.draw.circle(windowSurface, GREEN , (250,y), 13, 0)
</snippet></ROW><ROW><id>15869993</id><snippet>import pygame, sys, time, random
from pygame.locals import *
from time import *

pygame.init()
windowSurface = pygame.display.set_mode((500, 400), 0, 32)
pygame.display.set_caption("Bounce")

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

info = pygame.display.Info()
sw = info.current_w
sh = info.current_h
y = 0

# Initial direction is down
direction = 1

while True:
    windowSurface.fill(BLACK)
    pygame.draw.circle(windowSurface, GREEN , (250,y), 13, 0)
    #print "Drawing at 250,", y
    sleep(.006)
    y += direction
    if y &gt;= sh:
        # Changes the direction from down to up
        direction = -1
    elif y &lt;= 0:
        # Changes the direction from up to down
        direction = 1

    pygame.display.update()

    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
</snippet></ROW><ROW><id>15869993</id><snippet>print</snippet></ROW><ROW><id>15870085</id><snippet>def strip_string(string, to_strip):
    if to_strip:
        while string.startswith(to_strip):
            string = string[len(to_strip):]
        while string.endswith(to_strip):
            string = string[:-len(to_strip)]
    return string
</snippet></ROW><ROW><id>15870292</id><snippet>endheaders</snippet></ROW><ROW><id>15870292</id><snippet>send</snippet></ROW><ROW><id>15870292</id><snippet>data</snippet></ROW><ROW><id>15870292</id><snippet>.endheaders(data)</snippet></ROW><ROW><id>15870292</id><snippet>_send_output()</snippet></ROW><ROW><id>15870292</id><snippet>896         # If msg and message_body are sent in a single send() call,
897         # it will avoid performance problems caused by the interaction
898         # between delayed ack and the Nagle algorithm.
</snippet></ROW><ROW><id>15870585</id><snippet>"http://www.loc.gov/mods/v3 http://www.loc.gov/standards/mods/v3/mods-3-0.xsd"</snippet></ROW><ROW><id>15870694</id><snippet>In [1]: import numpy as np

In [2]: x = np.arange(0,1100,100)

In [3]: y = np.random.rand(6,11)

In [4]: i = 2

In [5]: plt.plot(x, y[i])
Out[5]: [&lt;matplotlib.lines.Line2D at 0x1043cc790&gt;]
</snippet></ROW><ROW><id>15870694</id><snippet>x</snippet></ROW><ROW><id>15870694</id><snippet>y</snippet></ROW><ROW><id>15870694</id><snippet>plot</snippet></ROW><ROW><id>15870694</id><snippet>In [6]: x.shape
Out[6]: (11,)

In [7]: y.shape
Out[7]: (6, 11)

In [8]: y[i].shape
Out[8]: (11,)
</snippet></ROW><ROW><id>15870694</id><snippet>plt.plot</snippet></ROW><ROW><id>15870694</id><snippet>In [9]: xl = range(0, 1100, 100)

In [10]: plt.plot(xl, y[i])
Out[10]: [&lt;matplotlib.lines.Line2D at 0x10462aed0&gt;]
</snippet></ROW><ROW><id>15870843</id><snippet>\n</snippet></ROW><ROW><id>15871521</id><snippet>&gt;&gt;&gt; my_list = ["This", "is", "an", "example", "list", "hehe"]
&gt;&gt;&gt; counter = 3
&gt;&gt;&gt; zip(*[iter(my_list)] * counter)
[('This', 'is', 'an'), ('example', 'list', 'hehe')]
</snippet></ROW><ROW><id>15871521</id><snippet>zip()</snippet></ROW><ROW><id>15871521</id><snippet>list</snippet></ROW><ROW><id>15871521</id><snippet>&gt;&gt;&gt; list(zip(*[iter(my_list)] * counter))
[('This', 'is', 'an'), ('example', 'list', 'hehe')]
</snippet></ROW><ROW><id>15871521</id><snippet>map</snippet></ROW><ROW><id>15871521</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>15871521</id><snippet>&gt;&gt;&gt; my_list = ["This", "is", "an", "example", "list", "hehe", "onemore"]
&gt;&gt;&gt; map(None, *[iter(my_list)] * counter)
[('This', 'is', 'an'), ('example', 'list', 'hehe'), ('onemore', None, None)]


&gt;&gt;&gt; from itertools import izip_longest
&gt;&gt;&gt; list(izip_longest(*[iter(my_list)] * counter, fillvalue = ''))
[('This', 'is', 'an'), ('example', 'list', 'hehe'), ('onemore', '', '')]
</snippet></ROW><ROW><id>15871726</id><snippet>class BitData(ndb.Model):
    key = ndb.KeyProperty()
    tstamp = ndb.DateTimeProperty()
    price = ndb.IntegerProperty()
    amount = ndb.IntegerProperty()
</snippet></ROW><ROW><id>15871780</id><snippet>awk '
{ a[FNR] = a[FNR] (NR==FNR?"":"\t") $2 }
END{ for (i=1;i&lt;=FNR;i++) print a[i] }
' file1 file2 file3 ....
</snippet></ROW><ROW><id>15871788</id><snippet>C:\Python27</snippet></ROW><ROW><id>15871788</id><snippet>C:\Program Files</snippet></ROW><ROW><id>15871788</id><snippet>cmd.exe</snippet></ROW><ROW><id>15871788</id><snippet>c:\python27\python.exe "c:\Program Files\pyinstaller-2.0\pyinstaller.py" --help
</snippet></ROW><ROW><id>15871804</id><snippet>Content-Type</snippet></ROW><ROW><id>15871804</id><snippet>ISO-8859-1</snippet></ROW><ROW><id>15871804</id><snippet>from_encoding</snippet></ROW><ROW><id>15871804</id><snippet>SoupStrainer</snippet></ROW><ROW><id>15871804</id><snippet>parse_only</snippet></ROW><ROW><id>15871804</id><snippet>content-td</snippet></ROW><ROW><id>15871804</id><snippet>for</snippet></ROW><ROW><id>15871804</id><snippet>import urllib2
import bs4

webpage = urllib2.urlopen('http://facts.randomhistory.com/interesting-facts-about-cats.html')
soup = bs4.BeautifulSoup(webpage, from_encoding='UTF-8',
                         parse_only=bs4.SoupStrainer(attrs='content-td'))
for li in soup('li'):
    print li.text.encode('utf-8')
</snippet></ROW><ROW><id>15871812</id><snippet>&lt;group&gt;
       &lt;field name="date_start" position="attributes"&gt;&lt;!--removed / from the end--&gt;
       &lt;attribute name="invisible"&gt;True&lt;/attribute&gt;
       &lt;/field&gt;
       &lt;field name="date_end" position="replace"/&gt;
       &lt;field name="warehouse_id" widget="selection" groups="stock.group_locations"/&gt;
       &lt;field name="company_id" groups="base.group_multi_company" widget="selection"/&gt;
 &lt;/group&gt;
</snippet></ROW><ROW><id>15871921</id><snippet>if isinstance(criterion_val, basestring)</snippet></ROW><ROW><id>15871921</id><snippet>str</snippet></ROW><ROW><id>15871921</id><snippet>regex_fields = ['s1', 's2']
</snippet></ROW><ROW><id>15871921</id><snippet>if criterion in regex_fields</snippet></ROW><ROW><id>15872053</id><snippet>routing_key="task.poisoned"</snippet></ROW><ROW><id>15872432</id><snippet>D:\Projekte\test&gt;type main.cmd
@sub1
@sub2

D:\Projekte\test&gt;type sub1.cmd
@echo This is sub 1

D:\Projekte\test&gt;type sub2.cmd
@echo This is sub 2
</snippet></ROW><ROW><id>15872432</id><snippet>D:\Projekte\test&gt;main
This is sub 1
</snippet></ROW><ROW><id>15872432</id><snippet>call pyuic4 mainwindow.ui --output mainwindow.py
</snippet></ROW><ROW><id>15872518</id><snippet>@to_json
def getAllUsersFrom(db):
    return list(db.users.find())
</snippet></ROW><ROW><id>15872608</id><snippet>current_state = penup
next_state = pendown
def space_bar():
    global current_state, next_state
    next_state()
    current_state, next_state = next_state, current_state
</snippet></ROW><ROW><id>15872718</id><snippet>&lt;field name="name" groups="GROUP_XML_ID"/&gt;
</snippet></ROW><ROW><id>15872718</id><snippet>&lt;separator string="Description" colspan="4" attrs="{'invisible': [('show_config', '=', False)]}" /&gt;
</snippet></ROW><ROW><id>15872935</id><snippet># ...
with open(filename) as f:
    for line in f:
        tok = line.split()
        op = tok[0]
        qty = int(tok[1])
        # ...
# ...
</snippet></ROW><ROW><id>15872935</id><snippet>op</snippet></ROW><ROW><id>15872935</id><snippet>qty</snippet></ROW><ROW><id>15872935</id><snippet># ...</snippet></ROW><ROW><id>15873054</id><snippet>import Image
import ImageDraw

im = Image.new('RGB',(500,500),(255,255,255))
draw = ImageDraw.Draw(im)
draw.line(points, fill=(255,0,0))
del draw 
im.save('output.jpg')
</snippet></ROW><ROW><id>15873662</id><snippet>####</snippet></ROW><ROW><id>15873662</id><snippet>import ftplib
import os
import os
import socket

HOST = 'ftp.server.com'
DIRN = 'DirectoryInFTPServer'
filematch = '*.xml'
username = 'username'
password = 'password'
storetodir='DirectoryToStoreFilesIn' ####
def main():
    try:
        f = ftplib.FTP(HOST)
    except (socket.error, socket.gaierror), e:
        print 'ERROR: cannot reach "%s"' % HOST
        return
    print '*** Connected to host "%s"' % HOST

    try:
        f.login(username, password)
    except ftplib.error_perm, e:
        print 'ERROR: cannot login'
        f.quit
        return
    print '*** Logged in successfully'

    try:
        f.cwd(DIRN)
    except ftplib.error_perm, e:
        print 'ERROR: cannot CD to "%s"' % DIRN
        f.quit()
    print '*** Changed to folder: "%s"' % DIRN

    currdir=os.getcwd() ####

    try:
        os.chdir(storetodir)####
        s = 0;

        for filename in f.nlst(filematch):
            fhandle = open(filename, 'wb')
            print 'Getting ' + filename
            f.retrbinary('RETR ' + filename, fhandle.write)
            s = s + 1
    except ftplib.error_perm, e:
        print 'ERROR: cannot read file "%s"' % filename
        os.unlink(filename)
    os.chdir(currdir) ####
    f.quit()
    print 'Files downloaded: ' + str(s)
    return

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>15873965</id><snippet>def your_view(request):
    students = Student.objects.filter()

    if request.GET.get('student'):
        students = students.filter(
            Q(name__contains=request.GET['student']) |
            Q(studentID__contains=request.GET['student']) |
            Q(city__contains=request.GET['student'])
            )

    if request.GET.get('subjects'):
        students = students.filter(
            Q(name__contains=request.GET['subjects']) |
            Q(credits__contains=request.GET['subjects'])
            )

    //more search here

    return render(request, 'page.html', {'students': students})
</snippet></ROW><ROW><id>15873997</id><snippet>re.M</snippet></ROW><ROW><id>15873997</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>15874059</id><snippet>import numpy as np
import pandas as pd

df = pd.DataFrame(np.random.normal(loc=.5,scale=.2,size=(1000, 4)), columns=['a', 'b', 'c', 'd'])

df1 = pd.DataFrame(df[df.a&gt; 0.5].a)
df2 = pd.DataFrame(df[df.a&lt;= 0.5].a)

dfjoined = df1.join(df2, lsuffix='_gt', rsuffix='_lt', how='outer')
</snippet></ROW><ROW><id>15874059</id><snippet>fig, ax = plt.subplots(1,1)

ax.hist(dfjoined.a_gt, bins=10,range=(0,1), color='r')
ax.hist(dfjoined.a_lt, bins=10,range=(0,1), color='b')
</snippet></ROW><ROW><id>15874870</id><snippet>&lt;record id="student_certificados_form" model="ir.ui.view"&gt;
            &lt;field name="name"&gt;certificados.result.form&lt;/field&gt;
            &lt;field name="model"&gt;certificados.certificados&lt;/field&gt;
            &lt;field name="arch" type="xml"&gt;
                &lt;form string="Introducir los datos" version="7.0"&gt;
                    &lt;sheet&gt;
                        &lt;div class="oe_edit_only"&gt;
                            &lt;label for="Registro_Numero" class="oe_inline"/&gt;
                        &lt;/div&gt;
                        &lt;h1&gt;
                            &lt;field name="Registro_Numero" class="oe_inline"/&gt;
                        &lt;/h1&gt;
                        &lt;group&gt;
                            &lt;group&gt;
                                &lt;field name="Fecha_de_Emision"/&gt;
                                &lt;field name="Fecha_de_Solicitud"/&gt;
                            &lt;/group&gt;
                            &lt;group&gt;
                                &lt;field name="Fecha_del_Documento"/&gt;
                                &lt;field name="Vigencia"/&gt;
                            &lt;/group&gt;
                            &lt;group&gt;
                                &lt;field name="Codigo_Arancelario"/&gt;
                                &lt;field name="Descripcion_Arancelaria"/&gt;
                            &lt;/group&gt;
                            &lt;group&gt;
                                &lt;field name="Especificaciones_Tecnicas"/&gt;
                                &lt;field name="Cantidad"/&gt;
                            &lt;/group&gt;
                            &lt;group&gt;
                                &lt;field name="Precio_Unitario_Declarado"/&gt;
                                &lt;field name="Valor_En_Divisas"/&gt;
                            &lt;/group&gt;
                            &lt;group&gt;
                                &lt;field name="Cantidad_Consumida"/&gt;
                                &lt;field name="notas"/&gt;
                            &lt;/group&gt;
                        &lt;/group&gt;
                    &lt;/sheet&gt;
                &lt;/form&gt;
            &lt;/field&gt;
        &lt;/record&gt;
</snippet></ROW><ROW><id>15875132</id><snippet>posts = list(Post.objects.filter(...))
</snippet></ROW><ROW><id>15875132</id><snippet>UNION</snippet></ROW><ROW><id>15875132</id><snippet>sql = "SELECT * FROM comments WHERE post_id=%s LIMIT 5"
query = []
for post in posts:
    query.append( sql % post.id )
query = " UNION ".join(query)
</snippet></ROW><ROW><id>15875132</id><snippet>comments = Comments.objects.raw(query)
</snippet></ROW><ROW><id>15875232</id><snippet>range()</snippet></ROW><ROW><id>15875232</id><snippet>stop</snippet></ROW><ROW><id>15875232</id><snippet>range()</snippet></ROW><ROW><id>15875232</id><snippet>def foo(*params):
    if 3 &lt; len(params) &lt; 1:
        raise ValueError('foo takes 1 - 3 arguments')
    elif len(params) == 1
        b = params[0]
    elif:
        a, b = params[:2]
        c = params[2] if len(params) &gt; 2 else 1
</snippet></ROW><ROW><id>15875232</id><snippet>def range(start, stop=None, step=1):
    if stop is None:
        start, stop = 0, start
</snippet></ROW><ROW><id>15875504</id><snippet>list1 = [('Donut', '320', '4.00'), ('Apple Pie', '200', '3.20')]

def search_info(name, list1):
    for c in list1:
        if name in c:
            return True
    return False
</snippet></ROW><ROW><id>15875504</id><snippet>enumerate</snippet></ROW><ROW><id>15875684</id><snippet>_</snippet></ROW><ROW><id>15875684</id><snippet>gettext</snippet></ROW><ROW><id>15875684</id><snippet>import gettext
gettext.bindtextdomain('myapplication', '/path/to/my/language/directory')
gettext.textdomain('myapplication')
_ = gettext.gettext
# ...
print _('This is a translatable string.')
</snippet></ROW><ROW><id>15875684</id><snippet>%(name)s</snippet></ROW><ROW><id>15875684</id><snippet>{'first' : a,'second' : b}</snippet></ROW><ROW><id>15875684</id><snippet>s</snippet></ROW><ROW><id>15875684</id><snippet>s</snippet></ROW><ROW><id>15875704</id><snippet>&gt;&gt;&gt; a = [["Hello", "Bye"], ["Morning", "Night"], ["Cat", "Dog"]]
&gt;&gt;&gt; dict(a)
{'Cat': 'Dog', 'Hello': 'Bye', 'Morning': 'Night'}
</snippet></ROW><ROW><id>15875704</id><snippet>{"one": 1, "two": 2, "three": 3}</snippet></ROW><ROW><id>15875704</id><snippet>&gt;&gt;&gt; a = dict(one=1, two=2, three=3)
&gt;&gt;&gt; b = {'one': 1, 'two': 2, 'three': 3}
&gt;&gt;&gt; c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
&gt;&gt;&gt; d = dict([('two', 2), ('one', 1), ('three', 3)]) #&lt;-Your case(Key/value pairs)
&gt;&gt;&gt; e = dict({'three': 3, 'one': 1, 'two': 2})
&gt;&gt;&gt; a == b == c == d == e
True
</snippet></ROW><ROW><id>15876035</id><snippet>C.py</snippet></ROW><ROW><id>15876035</id><snippet>argparse</snippet></ROW><ROW><id>15876035</id><snippet>main</snippet></ROW><ROW><id>15876035</id><snippet>import argparse

def create_parser():
    parser = argparse.ArgumentParser(description="Args for B.py")
    parser.add_argument("--param1B", type=int)
    parser.add_argument("--param2B", type=int)
    return parser
</snippet></ROW><ROW><id>15876035</id><snippet>import argparse
import sys
import C

def main(args):
    valB1 = args.param1B
    valB2 = args.param2B
    # do stuff
    return 0

if __name__ == '__main__':
    parser = C.create_parser()
    args = parser.parse_args()
    sys.exit(main(args))
</snippet></ROW><ROW><id>15876035</id><snippet>import argparse
import sys
import C
import B

def main(args):
    valA1 = args.param1A
    valA2 = args.param2A
    # do stuff
    return 0


if __name__ == '__main__':
    parser = C.create_parser()
    parser.add_argument("--param1A", type=int)
    parser.add_argument("--param2A", type=int)
    args = parser.parse_args()
    B.main(args)
    sys.exit(main(args))
</snippet></ROW><ROW><id>15876203</id><snippet>def btest(i, pos):
    return i &amp; (1 &lt;&lt; pos)
</snippet></ROW><ROW><id>15876277</id><snippet>json.dump</snippet></ROW><ROW><id>15876277</id><snippet>default</snippet></ROW><ROW><id>15876277</id><snippet>def default(obj):
    if isinstance(obj, np.array):
        return obj.tolist()
    raise TypeError('Not serializable')

with open('data.txt','w') as fl:
    json.dump(data, fl, default=default)
</snippet></ROW><ROW><id>15877137</id><snippet>import os
for root, dirs, files in os.walk(path):
    for filename in files:
        filename = os.path.join(root, filename)
        print(filename)
</snippet></ROW><ROW><id>15877227</id><snippet>handle</snippet></ROW><ROW><id>15877227</id><snippet>line</snippet></ROW><ROW><id>15877227</id><snippet>Infile</snippet></ROW><ROW><id>15877227</id><snippet>for line in handle.readlines():
    line = line.strip()
    os.system("grep \"%s\" %s &gt; %s.%s" % (line, Infile, Infile, line))
</snippet></ROW><ROW><id>15877227</id><snippet>line = handle.readline()</snippet></ROW><ROW><id>15877227</id><snippet>for</snippet></ROW><ROW><id>15877227</id><snippet>while</snippet></ROW><ROW><id>15877366</id><snippet>import irc

def start():
  irc.run()
</snippet></ROW><ROW><id>15877366</id><snippet>import cmd, time

def run():
  while 1:
    print cmd.dothis()
    reload(cmd)
    time.sleep(1)
</snippet></ROW><ROW><id>15877366</id><snippet>def dothis():
  return 1
</snippet></ROW><ROW><id>15877366</id><snippet>return 2</snippet></ROW><ROW><id>15877392</id><snippet>from ctypes import *</snippet></ROW><ROW><id>15877392</id><snippet>ctypes</snippet></ROW><ROW><id>15877392</id><snippet>WinDLL</snippet></ROW><ROW><id>15877392</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; lib = WinDLL('C:/Develop/test/SDK.dll')
</snippet></ROW><ROW><id>15877392</id><snippet>ctypes</snippet></ROW><ROW><id>15877392</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; lib = ctypes.WinDLL('C:/Develop/test/SDK.dll')
</snippet></ROW><ROW><id>15877454</id><snippet>class A(object): pass</snippet></ROW><ROW><id>15877454</id><snippet>class A(object):
    pass
a = A()
class A(object):          # a different class
    pass
print isinstance(a, A)    # False
</snippet></ROW><ROW><id>15877454</id><snippet>reload()</snippet></ROW><ROW><id>15877463</id><snippet>heapq</snippet></ROW><ROW><id>15877463</id><snippet>import heapq

heapq.nlargest(10, zip(x, y))
</snippet></ROW><ROW><id>15877478</id><snippet>readlines()</snippet></ROW><ROW><id>15877478</id><snippet>lines = sys.stdin.readlines()
</snippet></ROW><ROW><id>15877478</id><snippet>head</snippet></ROW><ROW><id>15877478</id><snippet>head = lines[0]
</snippet></ROW><ROW><id>15877478</id><snippet>#HP</snippet></ROW><ROW><id>15877478</id><snippet>for i, line in enumerate(lines):
  if "#HP" in line:
    lines = lines[i+1 : i+1+cntHetPos]
</snippet></ROW><ROW><id>15877478</id><snippet>    print ''.join(lines),
</snippet></ROW><ROW><id>15877478</id><snippet>break</snippet></ROW><ROW><id>15877478</id><snippet>print</snippet></ROW><ROW><id>15877478</id><snippet>import sys

lines = sys.stdin.readlines()
head = lines[0]
head = head.strip()
head = head.split('\t')
cntHetPos = int(head[1])
for i, line in enumerate(lines):
  if "#HP" in line:
    lines = lines[i+1 : i+1+cntHetPos]
    print ''.join(lines),
    break
</snippet></ROW><ROW><id>15877691</id><snippet>import mechanize

br = mechanize.Browser()
br.open(URL)
br.select_form(nr=0)
for i in range(0, len(br.find_control(type="checkbox").items)):
    br.find_control(type="checkbox").items[i].selected =True
reponse = br.submit()
print reponse.read()
</snippet></ROW><ROW><id>15877691</id><snippet>import mechanize

br = mechanize.Browser()
br.open(URL)
br.select_form(nr=0)
for i in range(0, len(br.find_control(type="checkbox").items)):
    if "modify" not in str(br.find_control(type="checkbox").items[i]):
        br.find_control(type="checkbox").items[i].selected =True
reponse = br.submit()
print reponse.read()
</snippet></ROW><ROW><id>15877996</id><snippet>"{%" + " display_cookies_accepted {} ".format(self.client.cookies) + "%}"
</snippet></ROW><ROW><id>15877996</id><snippet>"{} display_cookies_accepted {} {}".format('{%', self.client.cookies, '%}')
</snippet></ROW><ROW><id>15878532</id><snippet>None</snippet></ROW><ROW><id>15878532</id><snippet>__init__</snippet></ROW><ROW><id>15878532</id><snippet>def create_foo(infile):
    foo = Foo(infile)
    return foo, foo.time_stamp

...

obj, ts = create_foo(a_file)
</snippet></ROW><ROW><id>15878532</id><snippet>class Foo(object):
    ...
    @staticmethod:
    def create(infile):
        obj = Foo(infile)

        return obj, obj.time_stamp

...

obj, ts = Foo.create(a_file)
</snippet></ROW><ROW><id>15878532</id><snippet>class Foo(object):
    ...
    @classmethod
    def create(cls, infile):
        obj = cls(infile)

        return obj, obj.time_stamp

...

obj, ts = Foo.create(a_file)
</snippet></ROW><ROW><id>15878532</id><snippet>class Foo(object):
    def __init__(self, infile):
        self.time_stamp = ...


obj = Foo(a_file)
ts = obj.time_stamp
</snippet></ROW><ROW><id>15878580</id><snippet>HttpResponse</snippet></ROW><ROW><id>15878580</id><snippet>country_id</snippet></ROW><ROW><id>15878580</id><snippet>for</snippet></ROW><ROW><id>15878580</id><snippet>country_id</snippet></ROW><ROW><id>15878580</id><snippet>country_name</snippet></ROW><ROW><id>15878580</id><snippet>Country</snippet></ROW><ROW><id>15878580</id><snippet>Countries</snippet></ROW><ROW><id>15878580</id><snippet>$("#country_name").change({
    $.ajax({
        type: 'GET',
        dataType: 'json',
        url: "/country/getid/",
        data: {'country_name': $("#country_name").val()},
        success: function(response) {   
            $("#country_id").val() = response.country_id;
        }
    });
});
</snippet></ROW><ROW><id>15878580</id><snippet>import json
from django.http import HttpResponse

def get_country_id(request):
    country_name = request.GET['country_name']
    response = {}

    try:
        country = Countries.objects.get(country_name=country_name)
        response['country_id'] = country.country_id
    except Countries.DoesNotExist:
        response['country_id'] = ''

    return HttpResponse(json.dumps(response), mimetype='application/json') 
</snippet></ROW><ROW><id>15879027</id><snippet>my_data = {}
my_data['v1'] = range(5)
my_data['v2'] = range(9)
...etc...

my_data = {k: vstack(v) for k, v in my_data.iteritems()}
</snippet></ROW><ROW><id>15879108</id><snippet>import random

def shuffle(ary):
    initial = ary[:]
    a=len(ary)
    b=a-1
    for d in range(b,0,-1):
      e=random.randint(0,d)
      if e == d:
            return shuffle(initial)
      ary[d],ary[e]=ary[e],ary[d]
    return ary


ary = [1,2,3,4,5,6]
print shuffle(ary)
</snippet></ROW><ROW><id>15879108</id><snippet>from random import randrange

def sattoloCycle(items):
    i = len(items)
    while i &gt; 1:
        i = i - 1
        j = randrange(i)  # 0 &lt;= j &lt;= i-1
        items[j], items[i] = items[i], items[j]
    return
</snippet></ROW><ROW><id>15879108</id><snippet>from random import randrange

def FisherYates(items):
    i = len(items)
    while i &gt; 1:
        i = i - 1
        j = randrange(i+1)  # 0 &lt;= j &lt;= i
        items[j], items[i] = items[i], items[j]
    return
</snippet></ROW><ROW><id>15879277</id><snippet>latex_documents</snippet></ROW><ROW><id>15879277</id><snippet>conf.py</snippet></ROW><ROW><id>15879277</id><snippet>latex</snippet></ROW><ROW><id>15879277</id><snippet>latex_documents = [
   ('index', 'Kaskady.tex', u'Kaskady  Documentation',
    u'Author', 'manual'),
   ('profile', 'profiles.tex', u'Wyznaczanie profili', 
    u'Author', 'howto'),
]
</snippet></ROW><ROW><id>15879370</id><snippet>exit</snippet></ROW><ROW><id>15879370</id><snippet>exit</snippet></ROW><ROW><id>15879370</id><snippet>exit</snippet></ROW><ROW><id>15879370</id><snippet>IPython.core.autocall.ExitAutocall</snippet></ROW><ROW><id>15879370</id><snippet>In [6]: exit?
Type:       ExitAutocall
String Form:&lt;IPython.core.autocall.ExitAutocall object at 0x9f4c02c&gt;
File:       /data1/unutbu/.virtualenvs/arthur/local/lib/python2.7/site-packages/ipython-0.14.dev-py2.7.egg/IPython/core/autocall.py
Definition: exit(self)
Docstring:
An autocallable object which will be added to the user namespace so that
exit, exit(), quit or quit() are all valid ways to close the shell.
Call def:   exit(self)

In [7]: type(exit)
Out[7]: IPython.core.autocall.ExitAutocall
</snippet></ROW><ROW><id>15879370</id><snippet>class ExitAutocall(IPyAutocall):
    """An autocallable object which will be added to the user namespace so that
    exit, exit(), quit or quit() are all valid ways to close the shell."""
    rewrite = False

    def __call__(self):
        self._ip.ask_exit()
</snippet></ROW><ROW><id>15879370</id><snippet>self._ip.ask_exit()</snippet></ROW><ROW><id>15879370</id><snippet>def ask_exit(self):
    """ Ask the shell to exit. Can be overiden and used as a callback. """
    self.exit_now = True
</snippet></ROW><ROW><id>15879446</id><snippet>import gzip
from itertools import islice, izip

file1 = r"path\to\file1.gz"
file2 = r"path\to\file2.gz"

with gzip.open(file1) as f1, gzip.open(file2) as f2:
    for line1, line2 in islice(izip(f1, f2)), 3, None, 4):
        compare(line1, line2)
</snippet></ROW><ROW><id>15879527</id><snippet>np.array</snippet></ROW><ROW><id>15879527</id><snippet>ndarray</snippet></ROW><ROW><id>15879527</id><snippet>np.ndarray</snippet></ROW><ROW><id>15879527</id><snippet>np.ndarray</snippet></ROW><ROW><id>15879527</id><snippet>array</snippet></ROW><ROW><id>15879527</id><snippet>zeros</snippet></ROW><ROW><id>15879527</id><snippet>empty</snippet></ROW><ROW><id>15879527</id><snippet>ndarray(...)</snippet></ROW><ROW><id>15879626</id><snippet>line = None
for line in proc.stdout:
    pass
# now line is either the last line or None.
if line is not None:
    process(line)
</snippet></ROW><ROW><id>15879860</id><snippet>re.split</snippet></ROW><ROW><id>15879860</id><snippet>In [10]: import re

In [11]: line = 'DATA(VALUE1|VALUE2||VALUE4)'

In [12]: re.split(r'[(|)]', line)
Out[12]: ['DATA', 'VALUE1', 'VALUE2', '', 'VALUE4', '']
</snippet></ROW><ROW><id>15879860</id><snippet>In [13]: parts = re.split(r'[(|)]', line)

In [14]: data = parts[0]

In [15]: values = parts[1:-1]

In [16]: values
Out[16]: ['VALUE1', 'VALUE2', '', 'VALUE4']
</snippet></ROW><ROW><id>15879987</id><snippet>Person.objects.count()</snippet></ROW><ROW><id>15880044</id><snippet>[x[4] for x in data["interactions"][0]["input"]]

[x[9] for x in data["interactions"][0]["input"]]
</snippet></ROW><ROW><id>15880044</id><snippet>[[x[4], x[9]] for x in data["interactions"][0]["input"]]
</snippet></ROW><ROW><id>15880044</id><snippet>[[x[4], x[9]] for x in interaction["input"] for interaction in data["interactions"]]
</snippet></ROW><ROW><id>15880282</id><snippet>from itertools import chain

x = xrange(3)
y = xrange(3, 7)
z = chain(x, y) # pass this to your template
for i in z:
    print i
</snippet></ROW><ROW><id>15880282</id><snippet>{% for M in GRP1|list + GRP2|list %}
</snippet></ROW><ROW><id>15880482</id><snippet>import mechanize

br = mechanize.Browser()
br.open(URL)
br.select_form(nr=0)
br.form['self'] = ["88"]
r = br.submit()

print r.read()
</snippet></ROW><ROW><id>15880582</id><snippet>{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block content %}
    {% form|crispy %}
{% endblock %}
</snippet></ROW><ROW><id>15880923</id><snippet>dict</snippet></ROW><ROW><id>15880923</id><snippet>set</snippet></ROW><ROW><id>15880923</id><snippet>__hash__()</snippet></ROW><ROW><id>15880923</id><snippet>hash(obj)</snippet></ROW><ROW><id>15880923</id><snippet>var1</snippet></ROW><ROW><id>15880923</id><snippet>hash()</snippet></ROW><ROW><id>15880923</id><snippet>OrderedDict</snippet></ROW><ROW><id>15880923</id><snippet>list</snippet></ROW><ROW><id>15880923</id><snippet>&gt;&gt;&gt; L = [1, 2, 3]
&gt;&gt;&gt; set([L])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
&gt;&gt;&gt; hash(L)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
</snippet></ROW><ROW><id>15880923</id><snippet>set()</snippet></ROW><ROW><id>15880985</id><snippet>object_map = {o['id']: o for o in objects}
objects = [object_map[id] for id in ids]
</snippet></ROW><ROW><id>15881062</id><snippet>long int</snippet></ROW><ROW><id>15881062</id><snippet>float</snippet></ROW><ROW><id>15881062</id><snippet>double</snippet></ROW><ROW><id>15881062</id><snippet>real(8)</snippet></ROW><ROW><id>15881062</id><snippet>function prnt(s)          ! byref(s), byval(length) [long int, implicit]
    character(len=*):: s  ! variable length input
    logical :: prnt
    write(*, "(A)") s     ! formatted, to remove initial space
    prnt = .true.
end function prnt

function sin_2(r)         ! byref(r)
    real:: r, sin_2       ! float; use real(8) for double
    sin_2 = sin(r)**2
end function sin_2
</snippet></ROW><ROW><id>15881062</id><snippet>argtypes</snippet></ROW><ROW><id>15881062</id><snippet>restype</snippet></ROW><ROW><id>15881062</id><snippet>sin_2</snippet></ROW><ROW><id>15881062</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; test = CDLL('./test.so')

&gt;&gt;&gt; test.prnt_.argtypes = [c_char_p, c_long]
&gt;&gt;&gt; test.sin_2_.argtypes = [POINTER(c_float)]
&gt;&gt;&gt; test.sin_2_.restype = c_float

&gt;&gt;&gt; s = 'Mary had a little lamb'
&gt;&gt;&gt; test.prnt_(s, len(s))
Mary had a little lamb
1

&gt;&gt;&gt; x = c_float(4.56)
&gt;&gt;&gt; test.sin_2_(byref(x))
0.9769567847251892
</snippet></ROW><ROW><id>15881138</id><snippet>def ksp_yen(graph, node_start, node_end, max_k=2):
    distances, previous = dijkstra(graph, node_start)

    A = [{'cost': distances[node_end], 
          'path': path(previous, node_start, node_end)}]
    B = []

    if not A[0]['path']: return A

    for k in range(1, max_k):
        for i in range(0, len(A[-1]['path']) - 1):
            node_spur = A[-1]['path'][i]
            path_root = A[-1]['path'][:i+1]

            edges_removed = []
            for path_k in A:
                curr_path = path_k['path']
                if len(curr_path) &gt; i and path_root == curr_path[:i+1]:
                    cost = graph.remove_edge(curr_path[i], curr_path[i+1])
                    if cost == -1:
                        continue
                    edges_removed.append([curr_path[i], curr_path[i+1], cost])

            path_spur = dijkstra(graph, node_spur, node_end)

            if path_spur['path']:
                path_total = path_root[:-1] + path_spur['path']
                dist_total = distances[node_spur] + path_spur['cost']
                potential_k = {'cost': dist_total, 'path': path_total}

                if not (potential_k in B):
                    B.append(potential_k)

            for edge in edges_removed:
                graph.add_edge(edge[0], edge[1], edge[2])

        if len(B):
            B = sorted(B, key=itemgetter('cost'))
            A.append(B[0])
            B.pop(0)
        else:
            break

    return A
</snippet></ROW><ROW><id>15881195</id><snippet>import datetime
too_old = datetime.datetime.today() - datetime.timedelta(days=1)
for table in reversed(meta.sorted_tables):
    engine.execute(table.delete().where(table.c.timestampinserted &lt;= too_old))
</snippet></ROW><ROW><id>15881195</id><snippet>foreign key constraints</snippet></ROW><ROW><id>15881195</id><snippet>truncate</snippet></ROW><ROW><id>15881195</id><snippet>foreign key constraint</snippet></ROW><ROW><id>15881272</id><snippet>sql</snippet></ROW><ROW><id>15881272</id><snippet>sqlindexes</snippet></ROW><ROW><id>15881332</id><snippet>import numpy as np
import itertools as it

data = np.array([[0.5,0,-21],
        [0.5,0,-23],
        [1.0,0,-29],
        [1.0,0,-30],
        [0.5,45,-22],
        [0.5,45,-23]])
# convert signal strength
data[:,-1]= np.pow(10, data[:,-1]/10.)

# get the unique values of radius and angles
uradius = np.unique(data[:,0])
uangle = np.unique(data[:,1])

mean_data = []
for ur, ua in it.product(uradius, uangle):
    samepoints = (data[:,0]==ur) &amp; (data[:,1]==ua)
    if samepoints.sum() &gt; 1:  # check if there is more than one match
        mean_data.append([ur, ua, np.mean(data[samepoints,-1])])
    elif samepoints.sum() == 1:
        mean_data.append([ur, ua, data[samepoints,-1]])
</snippet></ROW><ROW><id>15881332</id><snippet>np.pow(..)</snippet></ROW><ROW><id>15881332</id><snippet># convert signal strength
data[:,-1]= 10**(data[:,-1]/10.)
</snippet></ROW><ROW><id>15881355</id><snippet>add_argument</snippet></ROW><ROW><id>15881355</id><snippet>import argparse

args = ('foo','bar','baz','qux')

#This is not the order the get printed in, so it's not using a dict...
print (set(args))  

parser = argparse.ArgumentParser()
for x in args:
    parser.add_argument('--{0}'.format(x),help=x)

parser.parse_args(['-h'])
</snippet></ROW><ROW><id>15881355</id><snippet>set(['baz', 'foo', 'bar', 'qux'])
usage: test.py [-h] [--foo FOO] [--bar BAR] [--baz BAZ] [--qux QUX]

optional arguments:
  -h, --help  show this help message and exit
  --foo FOO   foo
  --bar BAR   bar
  --baz BAZ   baz
  --qux QUX   qux
</snippet></ROW><ROW><id>15881355</id><snippet>argparse</snippet></ROW><ROW><id>15881438</id><snippet>ax.format_coord</snippet></ROW><ROW><id>15881438</id><snippet>"""
Show how to modify the coordinate formatter to report the image "z"
value of the nearest pixel given x and y
"""
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm

X = 10*np.random.rand(5,3)

fig = plt.figure()
ax = fig.add_subplot(111)
ax.imshow(X, cmap=cm.jet, interpolation='nearest')

numrows, numcols = X.shape
def format_coord(x, y):
    col = int(x+0.5)
    row = int(y+0.5)
    if col&gt;=0 and col&lt;numcols and row&gt;=0 and row&lt;numrows:
        z = X[row,col]
        return 'x=%1.4f, y=%1.4f, z=%1.4f'%(x, y, z)
    else:
        return 'x=%1.4f, y=%1.4f'%(x, y)

ax.format_coord = format_coord
plt.show()
</snippet></ROW><ROW><id>15881466</id><snippet>def Simulation(i): 
    return output

p = mp.Pool(16)

result = p.map(Simulation,range(10))
result = np.array(result).reshape(...)
p.close()
p.join()
</snippet></ROW><ROW><id>15881610</id><snippet>add_argument</snippet></ROW><ROW><id>15881610</id><snippet>help=argparse.SUPPRESS</snippet></ROW><ROW><id>15881610</id><snippet>import argparse

args = ('foo','bar','baz','qux')    
parser = argparse.ArgumentParser()

for x in args:
    parser.add_argument('--{0}'.format(x),help=x if x != 'baz' else argparse.SUPPRESS)

parser.parse_args(['-h'])
</snippet></ROW><ROW><id>15881610</id><snippet>baz</snippet></ROW><ROW><id>15881917</id><snippet>elem.get('attr_name', default_value)
</snippet></ROW><ROW><id>15881917</id><snippet>for name, value in elem.items():
</snippet></ROW><ROW><id>15881917</id><snippet>elem.attrib() - dictionary
</snippet></ROW><ROW><id>15881917</id><snippet>...
if event == 'start' and elem.tag == 'record':
... 
</snippet></ROW><ROW><id>15881952</id><snippet>&gt;&gt;&gt; print [float(15)/x*100 for x in range(15,21)]
[100.0, 93.75, 88.23529411764706, 83.33333333333334, 78.94736842105263, 75.0]
</snippet></ROW><ROW><id>15881952</id><snippet>round</snippet></ROW><ROW><id>15881952</id><snippet>&gt;&gt;&gt; print ['{0:.2f}'.format(float(15)/x*100) for x in range(15,21)]
['100.00', '93.75', '88.24', '83.33', '78.95', '75.00']
</snippet></ROW><ROW><id>15882194</id><snippet>&gt;&gt;&gt; True or ThingThatDoesNotExist
</snippet></ROW><ROW><id>15882433</id><snippet>csv</snippet></ROW><ROW><id>15882433</id><snippet>a = numpy.array([(1, 2.0, 'buckle_my_shoe'),
                 (3,4.0,'lock_the_door')],dtype=('i4,f8,a14'))
with open('test.txt','w') as f:
     f.write(' '.join([str(item) for sublist in a for item in sublist]))
print open('test.txt','r').read()
</snippet></ROW><ROW><id>15882433</id><snippet>1 2.0 buckle_my_shoe 3 4.0 lock_the_door
</snippet></ROW><ROW><id>15882573</id><snippet>with open('somefile') as fin:
    points = [line.split()[1] for line in fin if line.startswith('something')]
</snippet></ROW><ROW><id>15882662</id><snippet>form.clean_*</snippet></ROW><ROW><id>15882662</id><snippet>form.clean()</snippet></ROW><ROW><id>15882662</id><snippet>cleaned_data</snippet></ROW><ROW><id>15882662</id><snippet>clean_*</snippet></ROW><ROW><id>15882662</id><snippet>class MyForm(...):
    readonly_fields = ("afield", "another",)
    def __init__(self, *args, **kw):
         super(MyForm, self).__init__(*args, **kw)
         for field in self.readonly_fields:
             self.fields[field].widget.attrs['readonly']
             def clean():
                 # assume fieldname == instance attribute name
                 return getattr(self.instance, field) 
             setattr(self, "clean_%s" % field, clean)
</snippet></ROW><ROW><id>15882662</id><snippet>Form.clean</snippet></ROW><ROW><id>15882833</id><snippet>class ArticleViewCount(model):
    counter = models.PositiveIntegerField()
    article = models.OneToOneField(Article)
</snippet></ROW><ROW><id>15882897</id><snippet>zip()</snippet></ROW><ROW><id>15882897</id><snippet>zip(x, y)
</snippet></ROW><ROW><id>15882897</id><snippet>[(random.randint(0,100), random.randint(0,100)) for i in xrange(3000)]
</snippet></ROW><ROW><id>15882918</id><snippet>print("Content-type: text/html")
</snippet></ROW><ROW><id>15882918</id><snippet>#!/usr/bin/env python

print "Content-Type: text/html"
print
print """
    &lt;TITLE&gt;CGI script ! Python&lt;/TITLE&gt;
    &lt;H1&gt;This is my first CGI script&lt;/H1&gt;
    Hello, world!
"""
</snippet></ROW><ROW><id>15882918</id><snippet>#!/usr/bin/env python3

print("Content-Type: text/html")
print()
print ("""
    &lt;TITLE&gt;CGI script ! Python&lt;/TITLE&gt;
    &lt;H1&gt;This is my first CGI script&lt;/H1&gt;
    Hello, world!
"""
)
</snippet></ROW><ROW><id>15883321</id><snippet>&lt;head&gt;</snippet></ROW><ROW><id>15883321</id><snippet>&lt;button&gt;</snippet></ROW><ROW><id>15883321</id><snippet>&lt;html&gt;</snippet></ROW><ROW><id>15883321</id><snippet>&lt;title&gt;</snippet></ROW><ROW><id>15883321</id><snippet>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Test&lt;/title&gt;
    {% block js-custom %}
    {% load static %}
    &lt;script src="{{ STATIC_URL }}scripts/jquery-1.9.1.min.js"&gt;&lt;/script&gt;
    &lt;script src="{{ STATIC_URL }}scripts/modernizr-2.0.6.min.js"&gt;&lt;/script&gt;
    &lt;script src="{{ STATIC_URL }}scripts/myscript.js"&gt;&lt;/script&gt;
    {% endblock %}
&lt;/head&gt;
&lt;body&gt;
    &lt;button id="loadjson"&gt;Load JSON&lt;/button&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>15883353</id><snippet>' '.join(myCoords)</snippet></ROW><ROW><id>15883376</id><snippet>y</snippet></ROW><ROW><id>15883376</id><snippet>[1,N/2]</snippet></ROW><ROW><id>15883376</id><snippet>[1,2*N]</snippet></ROW><ROW><id>15883376</id><snippet>x+2*y = N

//replace x with N-2*y
N-2*(y) + 2*y = N
N-2*(N/2) + 2*y = N
2*y = N

//therefore, when x=0, y is maximum, and y = N/2
y = N/2
</snippet></ROW><ROW><id>15883376</id><snippet>for y in range(1,int(N/2)):
   x = N - (y&lt;&lt;1)
   print x, y
</snippet></ROW><ROW><id>15883440</id><snippet>try</snippet></ROW><ROW><id>15883440</id><snippet>except</snippet></ROW><ROW><id>15883440</id><snippet>try:
    j1 = json.loads(r_positive.text)
except ValueError:
    # decoding failed
    continue
else:
    do_next_procedures()
</snippet></ROW><ROW><id>15883440</id><snippet>requests</snippet></ROW><ROW><id>15883440</id><snippet>if r_positive.history:
    # more than one request, we were redirected:
    continue
else:
    j1 = r_positive.json()
</snippet></ROW><ROW><id>15883440</id><snippet>r = requests.post(url, allow_redirects=False)
if r.status == 200:
    j1 = r.json() 
</snippet></ROW><ROW><id>15883492</id><snippet>def dict_keys_without(d,excludes_set):
    return (k for k in d if k not in excludes_set)
</snippet></ROW><ROW><id>15883492</id><snippet>for key in dict_keys_without(d,{'foo','bar'}):
    #do something with `k` or `d[k]`, etc.
</snippet></ROW><ROW><id>15883492</id><snippet>d.iteritems()</snippet></ROW><ROW><id>15883492</id><snippet>d.itervalues()</snippet></ROW><ROW><id>15883492</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>15883492</id><snippet>OrderedDict</snippet></ROW><ROW><id>15883492</id><snippet>values = iter(od.values())
_ = next(values,None)  #scrap the first one
for value in values:
    pass #Do something with the next values.
</snippet></ROW><ROW><id>15883620</id><snippet>None</snippet></ROW><ROW><id>15883620</id><snippet>subplots_adjust</snippet></ROW><ROW><id>15883620</id><snippet>fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=None, hspace=None)
</snippet></ROW><ROW><id>15883620</id><snippet>ImageAxes</snippet></ROW><ROW><id>15883620</id><snippet>mat = np.random.random((100,100))
im = ax.imshow(mat,interpolation='nearest')
with writer.saving(fig, "writer_test.mp4", 100):
    for i in range(100):
        mat = np.random.random((100,100))
        im.set_data(mat)
        writer.grab_frame()
</snippet></ROW><ROW><id>15883620</id><snippet>imshow</snippet></ROW><ROW><id>15883620</id><snippet>fig.set_size_inches(w, h, forward=True)
</snippet></ROW><ROW><id>15883620</id><snippet>imshow</snippet></ROW><ROW><id>15883620</id><snippet>im = ax.imshow(..., aspect='auto')
</snippet></ROW><ROW><id>15883682</id><snippet>foo.bar</snippet></ROW><ROW><id>15883682</id><snippet>__name__</snippet></ROW><ROW><id>15883682</id><snippet>'foo.bar'</snippet></ROW><ROW><id>15883682</id><snippet>import.c</snippet></ROW><ROW><id>15883682</id><snippet>import</snippet></ROW><ROW><id>15883682</id><snippet>__import__</snippet></ROW><ROW><id>15883682</id><snippet>PyImport_ImportModuleLevelObject</snippet></ROW><ROW><id>15883682</id><snippet>__import__()</snippet></ROW><ROW><id>15883682</id><snippet>PyImport_ImportModuleLevelObject</snippet></ROW><ROW><id>15883682</id><snippet>name</snippet></ROW><ROW><id>15883682</id><snippet>PyImport_AddModuleObject</snippet></ROW><ROW><id>15883682</id><snippet>name</snippet></ROW><ROW><id>15883682</id><snippet>name</snippet></ROW><ROW><id>15883682</id><snippet>PyImport_ImportModuleLevelObject</snippet></ROW><ROW><id>15883682</id><snippet>__name__</snippet></ROW><ROW><id>15883682</id><snippet>moduleobject.c</snippet></ROW><ROW><id>15883684</id><snippet>text</snippet></ROW><ROW><id>15883684</id><snippet>from numpy import *
import matplotlib.pyplot as plt

symbols = [u'\u2B21', u'\u263A', u'\u29C6', u'\u2B14', u'\u2B1A', u'\u25A6', u'\u229E', u'\u22A0', u'\u22A1', u'\u20DF']

x = arange(10.)
y = arange(10.)

plt.figure()
for i, symbol in enumerate(symbols):
    y2 = y + 4*i
    plt.plot(x, y2, 'g')
    for x0, y0 in zip(x, y2):
        plt.text(x0, y0, symbol, fontname='STIXGeneral', size=30, va='center', ha='center', clip_on=True)

plt.show()
</snippet></ROW><ROW><id>15883684</id><snippet>plot</snippet></ROW><ROW><id>15883684</id><snippet>plt.figure()
for i, symbol in enumerate(symbols):
    y2 = y + 4*i
    plt.plot(x, y2, 'g')
    marker = "$%s$" % symbol
    plt.plot(x, y2, 'k', marker=marker, markersize=30)
</snippet></ROW><ROW><id>15883858</id><snippet>pad</snippet></ROW><ROW><id>15883858</id><snippet>yax = ax.get_yaxis()
yax.set_tick_params(pad=pad)
</snippet></ROW><ROW><id>15883858</id><snippet>import numpy as np
import matplotlib.pyplot as plt

ticks = ["Lorem ipsum dolor sit amet, consectetur adipisicin", "g elit, sed do",      "eiusmod tempor incididunt ut labo", "re et dolore magna ali", "qua. Ut en", "im ad minim veniam, quis nostr", "ud exercitation ullamco labo", "ris nisi ut aliquip ex ea c", "ommodo co", "nsequat. Duis aute irure dolor in rep"]
data = [5,1,2,4,1,4,5,2,1,5]
ind = np.arange(len(data))
fig = plt.figure(tight_layout=True) # need tight_layout to make everything fit
ax = plt.subplot(111)
ax.barh(ind, data, 0.999)
ax.set_yticks(ind + 0.5)
r = ax.set_yticklabels(ticks, ha = 'left')
fig.set_size_inches(12, 8, forward=True) 
# re-size first, the shift needs to be in display units
plt.draw()  # this is needed because get_window_extent needs a renderer to work
yax = ax.get_yaxis()
# find the maximum width of the label on the major ticks
pad = max(T.label.get_window_extent().width for T in yax.majorTicks)

yax.set_tick_params(pad=pad)
plt.draw()
</snippet></ROW><ROW><id>15883976</id><snippet>sql = 'select * from tablename where ' + ' and '.join(k + ' = %s' for k in data)
cursor.execute(sql, tuple(data.values()))
</snippet></ROW><ROW><id>15883976</id><snippet>sql</snippet></ROW><ROW><id>15883976</id><snippet>data</snippet></ROW><ROW><id>15883976</id><snippet>dict</snippet></ROW><ROW><id>15884072</id><snippet>url_for</snippet></ROW><ROW><id>15884072</id><snippet>redirect</snippet></ROW><ROW><id>15884072</id><snippet>from flask import url_for, redirect

@app.route('/')
def home():
    return redirect(url_for('static', filename='hi.html'))
</snippet></ROW><ROW><id>15884165</id><snippet>pyrcc4 -py3 F:\computing\Payrollv22\icon.qrc -o icon_rc.py
</snippet></ROW><ROW><id>15884381</id><snippet>body</snippet></ROW><ROW><id>15884381</id><snippet>body</snippet></ROW><ROW><id>15884381</id><snippet>content</snippet></ROW><ROW><id>15884381</id><snippet>&lt;REUTERS TOPICS="NO" LEWISSPLIT="TRAIN" CGISPLIT="TRAINING-SET" OLDID="16321" NEWID="1001"&gt;
&lt;DATE&gt; 3-MAR-1987 09:18:21.26&lt;/DATE&gt;
&lt;TOPICS&gt;&lt;/TOPICS&gt;
&lt;PLACES&gt;&lt;D&gt;usa&lt;/D&gt;&lt;D&gt;ussr&lt;/D&gt;&lt;/PLACES&gt;
&lt;PEOPLE&gt;&lt;/PEOPLE&gt;
&lt;ORGS&gt;&lt;/ORGS&gt;
&lt;EXCHANGES&gt;&lt;/EXCHANGES&gt;
&lt;COMPANIES&gt;&lt;/COMPANIES&gt;
&lt;UNKNOWN&gt; 
G T
reute
d f BC-SANDOZ-PLANS-WEEDKILL   03-03 0095&lt;/UNKNOWN&gt;
&lt;TEXT&gt;
&lt;TITLE&gt;SANDOZ PLANS WEEDKILLER JOINT VENTURE IN USSR&lt;/TITLE&gt;
&lt;DATELINE&gt;    BASLE, March 3 - &lt;/DATELINE&gt;&lt;CONTENT&gt;Sandoz AG said it planned a joint venture
to produce herbicides in the Soviet Union.
    The company said it had signed a letter of intent with the
Soviet Ministry of Fertiliser Production to form the first
foreign joint venture the ministry had undertaken since the
Soviet Union allowed Western firms to enter into joint ventures
two months ago.
    The ministry and Sandoz will each have a 50 pct stake, but
a company spokeswoman was unable to give details of the size of
investment or planned output.
 Reuter
&lt;/CONTENT&gt;&lt;/TEXT&gt;
&lt;/REUTERS&gt;
</snippet></ROW><ROW><id>15884381</id><snippet>from bs4 import BeautifulSoup,SoupStrainer
f = open('dataset/reut2-001.sgm', 'r')
data= f.read()
soup = BeautifulSoup(data)
contents = soup.findAll('content')
for content in contents:
    print content.text
</snippet></ROW><ROW><id>15884574</id><snippet>numpy.ndarray.tofile</snippet></ROW><ROW><id>15884590</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>15884590</id><snippet>2.3</snippet></ROW><ROW><id>15884590</id><snippet>"hello"</snippet></ROW><ROW><id>15884590</id><snippet>compile()</snippet></ROW><ROW><id>15884590</id><snippet>ast.parse()</snippet></ROW><ROW><id>15884601</id><snippet>import Tkinter as tk

class Example(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)

        # a simple label, just to show there's something in the frame
        label = tk.Label(self, text="Example of using place")
        label.pack(side="top", fill="both", expand=True)

        # we'll place this image in every corner...
        self.image = tk.PhotoImage(data='''
            R0lGODlhEAAQALMAAAAAAP//AP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
            AAAAAAAAAAAA\nAAAAACH5BAEAAAIALAAAAAAQABAAQAQ3UMgpAKC4hm13uJnWgR
            TgceZJllw4pd2Xpagq0WfeYrD7\n2i5Yb+aJyVhFHAmnazE/z4tlSq0KIgA7\n
        ''')

        # ... by creating four label widgets ...
        self.nw = tk.Label(self, image=self.image)
        self.ne = tk.Label(self, image=self.image)
        self.sw = tk.Label(self, image=self.image)
        self.se = tk.Label(self, image=self.image)

        # ... and using place as the geometry manager
        self.nw.place(relx=0.0, rely=0.0, anchor="nw")
        self.ne.place(relx=1.0, rely=0.0, anchor="ne")
        self.sw.place(relx=0.0, rely=1.0, anchor="sw")
        self.se.place(relx=1.0, rely=1.0, anchor="se")

if __name__ == "__main__":
    root = tk.Tk()
    root.wm_geometry("400x400")
    Example(root).pack(side="top", fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>15884636</id><snippet>if sys.argv[0].endswith('memory_profiler.py'):
    del sys.argv[0]
</snippet></ROW><ROW><id>15884750</id><snippet>hex()</snippet></ROW><ROW><id>15884750</id><snippet>&gt;&gt;&gt; hex(15)[2:]
'f'
</snippet></ROW><ROW><id>15884750</id><snippet>str.zfill()</snippet></ROW><ROW><id>15884750</id><snippet>&gt;&gt;&gt; hex(15)[2:].zfill(2)
'0f'
</snippet></ROW><ROW><id>15884750</id><snippet>fc = '0x'
for i in b[0x15c:0x15f]:
    fc += hex(ord(i))[2:].zfill(2)
</snippet></ROW><ROW><id>15884815</id><snippet>couchpy</snippet></ROW><ROW><id>15884840</id><snippet>all</snippet></ROW><ROW><id>15884840</id><snippet>any</snippet></ROW><ROW><id>15884840</id><snippet>def evaluate_bool(expr):
    if isinstance(expr, list):
        return all(evaluate_bool(e) for e in expr)
    elif isinstance(expr, tuple):
        return any(evaluate_bool(e) for e in expr)
    else:
        return expr

evaluate_bool([(True, False, False), True]) # True
evaluate_bool((False, [True, True, False], False)) # False
</snippet></ROW><ROW><id>15884853</id><snippet>markets = {}

markets['Walmart'] = "food","bread"
markets['Costco'] = "furniture","electronics"

for k,v in markets.iteritems():  #use items if you are using python 3x
    print k,v
</snippet></ROW><ROW><id>15885163</id><snippet>import re

s = '''(ArrayOfNotificationData){NotificationData[] = (NotificationData){Id = 1 Title = "notification 1" Message = "bla bla." Published = 2000-01-01 00:00:00}, (NotificationData){Id = 2 Title = "notification 2" Message = "bla bla." Published = 2000-01-01 00:00:00},}'''

def f(d):
    for k, v in d.items():
        if v is None:
            d[k] = ''
    return d

def g(reg, rep):
    c1 = s
    c2 = ''
    while c1 != c2:
        c2 = c1
        c1 = re.sub(reg, lambda m: rep.format(**f(m.groupdict())), c1)
    print c1

g('(?P&lt;m&gt;\w+)\s+=\s+(?:(?P&lt;v&gt;\\d+-\\d+-\\d+ \\d+:\\d+:\\d+|\w+)|"(?P&lt;v3&gt;[^"]*)")|(?:(?:\\w|\\[|\\])+\\s*=\\s*)?\\((?P&lt;m2&gt;\w+)\\){(?P&lt;v2&gt;[^}{]*)}\s*,?', '&lt;{m}{m2}&gt;{v}{v2}{v3}&lt;/{m}{m2}&gt;')
</snippet></ROW><ROW><id>15885163</id><snippet>&lt;ArrayOfNotificationData&gt;

    &lt;NotificationData&gt;

        &lt;Id&gt;1&lt;/Id&gt; 
        &lt;Title&gt;notification 1&lt;/Title&gt; 
        &lt;Message&gt;bla bla.&lt;/Message&gt; 
        &lt;Published&gt;2000-01-01 00:00:00&lt;/Published&gt;

    &lt;/NotificationData&gt; 
    &lt;NotificationData&gt;

        &lt;Id&gt;2&lt;/Id&gt; 
        &lt;Title&gt;notification 2&lt;/Title&gt; 
        &lt;Message&gt;bla bla.&lt;/Message&gt; 
        &lt;Published&gt;2000-01-01 00:00:00&lt;/Published&gt;

    &lt;/NotificationData&gt;

&lt;/ArrayOfNotificationData&gt;
</snippet></ROW><ROW><id>15885163</id><snippet>&lt;ArrayOfNotificationData&gt;&lt;NotificationData&gt;&lt;Id&gt;1&lt;/Id&gt; &lt;Title&gt;notification 1&lt;/Title&gt; &lt;Message&gt;bla bla.&lt;/Message&gt; &lt;Published&gt;2000-01-01 00:00:00&lt;/Published&gt;&lt;/NotificationData&gt; &lt;NotificationData&gt;&lt;Id&gt;2&lt;/Id&gt; &lt;Title&gt;notification 2&lt;/Title&gt; &lt;Message&gt;bla bla.&lt;/Message&gt; &lt;Published&gt;2000-01-01 00:00:00&lt;/Published&gt;&lt;/NotificationData&gt;&lt;/ArrayOfNotificationData&gt;
</snippet></ROW><ROW><id>15885163</id><snippet>}</snippet></ROW><ROW><id>15885163</id><snippet>{</snippet></ROW><ROW><id>15885163</id><snippet>""</snippet></ROW><ROW><id>15885163</id><snippet>Title = "notification} 1"</snippet></ROW><ROW><id>15885175</id><snippet>from sys import stdout

with open('file') as f:
    for n,line in enumerate(f):        
        if line.startswith('###'):            
            stdout.write(('' if not n else '\n')+line.strip('#\n'))
        else:
            stdout.write('\t'+line)
</snippet></ROW><ROW><id>15885175</id><snippet>John    someData1
        someData2
        SomeData3

Mike    someData1
        someData2

Ford    someData1
        someData2
        SomeData3
        someData4
        someData5
        SomeData6
</snippet></ROW><ROW><id>15885352</id><snippet>def num_of_times(n):
    if n &gt; 0 and n &lt;= 50:
        return 1
    elif n &gt; 50:
        return 1+num_of_times(n - 50)
    else:
        return 0
</snippet></ROW><ROW><id>15885909</id><snippet>execfile('parameters.dat')

var_par = 'B'
array = [1.4, 2.6, 4.8, 5.6]

for I in array: # Start choosing the values in array

    if var_par in params: params[var_par][0] = I

    f = open('params_temp.dat', 'w')
    print &gt;&gt; f, 'params = {'
    for p in params:
        if type(params[p][0]) == str:
            print &gt;&gt; f, ''.join(map(str,['"', p,'"',':'])), '\t',
            print &gt;&gt; f, ''.join(map(str,['[', '"', params[p][0], '"', ','])), '\t', ''.join(map(str,['"', params[p][1], '"', ']', ',']))
        else:
            print &gt;&gt; f, ''.join(map(str,['"', p,'"',':'])), '\t',
            print &gt;&gt; f, ''.join(map(str,['[', params[p][0], ','])), '\t', ''.join(map(str,['"', params[p][1], '"', ']', ',']))
    print &gt;&gt; f, '}'
    f.close()
    os.remove('parameters.dat')
    os.rename('params_temp.dat', 'parameters.dat')

    execfile('script.py')
</snippet></ROW><ROW><id>15885909</id><snippet>parameters.dat</snippet></ROW><ROW><id>15885909</id><snippet>params = {
    "A":    ["A part of",      "#comment 1"],
    "B":    [1.2,              "#comment 2"],
    "C":    ["the test run.",  "#comment 3"]
}
</snippet></ROW><ROW><id>15885909</id><snippet>parameters.dat</snippet></ROW><ROW><id>15885909</id><snippet>script.py</snippet></ROW><ROW><id>15885909</id><snippet>array</snippet></ROW><ROW><id>15885909</id><snippet>array</snippet></ROW><ROW><id>15885909</id><snippet>"B"</snippet></ROW><ROW><id>15885909</id><snippet>" B "</snippet></ROW><ROW><id>15885920</id><snippet>class Model:
  @classmethod
  def instantiator(self, motor_generator):
    # you can not put the yield here. it will transform this function into a generator.
    return map(self, motor_generator) # map is lazy in python 3
</snippet></ROW><ROW><id>15885920</id><snippet>class Model:
  @classmethod
  def instantiator(self, motor_generator):
    attrss = motor_generator # I put this outside because i fear a syntax misunderstanding with generators
    return [self(attrs) for attrs in attrss] # with round brackets it would be evaluated on demand = in the for loop but not in this method
</snippet></ROW><ROW><id>15885920</id><snippet>for instance in Model.instantiator((yield motor_generator)):
  instance.attr = 'asdf'
</snippet></ROW><ROW><id>15885974</id><snippet>collections.Counter</snippet></ROW><ROW><id>15885974</id><snippet>In [2]: dic={'1234':{'alertStatus': 'open', 'reasonDescription': None}, 
   ...: '4321': {'alertStatus': 'closed', 'reasonDescription': 'Public'},
   ...: '6789': {'alertStatus': 'open', 'reasonDescription': 'None'}}

In [3]: from collections import Counter

In [4]: Counter(v['alertStatus'] for k,v in dic.items())

Out[4]: Counter({'open': 2, 'closed': 1})
</snippet></ROW><ROW><id>15886161</id><snippet>sum()</snippet></ROW><ROW><id>15886161</id><snippet>sum(iterable[, start])</snippet></ROW><ROW><id>15886161</id><snippet>sum()</snippet></ROW><ROW><id>15886161</id><snippet>row[7] = str( (row[6] * row[0] * row[8]) + 
              (row[1] * row[9]) + 
              (row[2] * row[10]) )
</snippet></ROW><ROW><id>15886356</id><snippet>isabs()</snippet></ROW><ROW><id>15886356</id><snippet>os.path.basename()</snippet></ROW><ROW><id>15886356</id><snippet>os.path.dirname()</snippet></ROW><ROW><id>15886375</id><snippet>&gt;&gt;&gt; s = 'abcdefgABCDEFGHIJKLMNOP'
&gt;&gt;&gt; ''.join([c for c in s if c.isupper()])
'ABCDEFGHIJKLMNOP'
</snippet></ROW><ROW><id>15886375</id><snippet>&gt;&gt;&gt; ''.join(c for c in s if c.isupper())
'ABCDEFGHIJKLMNOP
</snippet></ROW><ROW><id>15886375</id><snippet>&gt;&gt;&gt; re.sub('[^A-Z]', '', s)
'ABCDEFGHIJKLMNOP'
</snippet></ROW><ROW><id>15886728</id><snippet>from mongoengine import connect

db = connect('test')
db.drop_database('test')
</snippet></ROW><ROW><id>15886728</id><snippet>from mongoengine import connect
from mongoengine.connection import _get_db

connect('test')

db = _get_db()
db.connection.drop_database('test')
</snippet></ROW><ROW><id>15886903</id><snippet>sys.path</snippet></ROW><ROW><id>15886903</id><snippet>_tkinter</snippet></ROW><ROW><id>15886903</id><snippet>module.txt</snippet></ROW><ROW><id>15886903</id><snippet>import module</snippet></ROW><ROW><id>15886903</id><snippet>import _tkinter; print(_tkinter.__file__)</snippet></ROW><ROW><id>15886903</id><snippet>_tkinter</snippet></ROW><ROW><id>15886970</id><snippet>l = [['apple','banana','kiwi'],['chair','table','spoon']]
def findItem(theList, item):
   return [(ind, theList[ind].index(item)) for ind in xrange(len(theList)) if item in theList[ind]]

findItem(l, 'apple') # [(0, 0)]
findItem(l, 'spoon') # [(1, 2)]
</snippet></ROW><ROW><id>15887055</id><snippet>s = "7A"
firstHex, secondHex = list(s)
</snippet></ROW><ROW><id>15887055</id><snippet>firstHex = 7
secondHex = A
</snippet></ROW><ROW><id>15887173</id><snippet> with open('versions.txt', 'r') as verFile:
    for line in verFile:
        if 'VERSION_2_' in line:
            # Split the line from the right on underscores and
            # take the last part of the resulting list.
            print line.rpartition('_')[-1]
</snippet></ROW><ROW><id>15887173</id><snippet>with open('resultfile', 'w') as wFile:
    wFile.write(line.rpartition('_')[-1])
</snippet></ROW><ROW><id>15887173</id><snippet># It doesn't matter which `with` block is the outermost.
with open('resultfile', 'w') as wFile:
    with open('versions.txt', 'r') as verFile:
        for line in verFile:
            if 'VERSION_2_' in line:
                # Split the line from the right on underscores and
                # take the last part of the resulting list.
                wFile.write(line.rpartition('_')[-1])
</snippet></ROW><ROW><id>15887202</id><snippet>call</snippet></ROW><ROW><id>15887202</id><snippet>call</snippet></ROW><ROW><id>15887282</id><snippet>&gt;&gt;&gt; np.linalg.pinv([[1, 2, 3, 4]])
array([[ 0.03333333],
       [ 0.06666667],
       [ 0.1       ],
       [ 0.13333333]])
</snippet></ROW><ROW><id>15887546</id><snippet>.log</snippet></ROW><ROW><id>15887546</id><snippet>KEYWORD</snippet></ROW><ROW><id>15887546</id><snippet>import os
theKeyword = 'KEYWORD'
directory = '.' 
with open('output.csv', 'w') as out:
    for file in os.listdir(directory):
        if file.endswith(".log"):
            with open(file, 'r') as f:
                for line in f:
                    if theKeyword in line:
                        out.write(line)
</snippet></ROW><ROW><id>15887546</id><snippet>glob</snippet></ROW><ROW><id>15887546</id><snippet>os.listdir</snippet></ROW><ROW><id>15887546</id><snippet>from glob import glob
with open('output.csv', 'w') as out:
    for file in glob('*.log'):
        with open(file, 'r') as f:
            for line in f:
                if 'KEYWORD' in line:
                    out.write(line)
</snippet></ROW><ROW><id>15887546</id><snippet>fileinput</snippet></ROW><ROW><id>15887546</id><snippet>from glob import glob
import fileinput
with open('output.csv', 'w') as out:
    for line in fileinput.input(glob('*.log')):
        if 'KEYWORD' in line:
            out.write(line)
</snippet></ROW><ROW><id>15887546</id><snippet>from glob import glob
import fileinput
with open('output.csv', 'w') as out:
    out.writelines(line for line in fileinput.input(glob('*.log')) if 'KEYWORD' in line)
</snippet></ROW><ROW><id>15887546</id><snippet>fileinput.input</snippet></ROW><ROW><id>15887546</id><snippet>sys.argv[1:]</snippet></ROW><ROW><id>15887546</id><snippet>os.walk</snippet></ROW><ROW><id>15887546</id><snippet>$ cat *.log| grep KEYWORD &gt;output.csv
</snippet></ROW><ROW><id>15887568</id><snippet>prevLine</snippet></ROW><ROW><id>15887568</id><snippet>out.write("%s \t\t %d\n" % (prevLine.rstrip() , curCount))
</snippet></ROW><ROW><id>15887638</id><snippet>scrapper.py</snippet></ROW><ROW><id>15887638</id><snippet>scrapper/</snippet></ROW><ROW><id>15887638</id><snippet>python -m scrapper.bot.scrapper</snippet></ROW><ROW><id>15887638</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>15887638</id><snippet>.pth</snippet></ROW><ROW><id>15887638</id><snippet>site-packages</snippet></ROW><ROW><id>15887638</id><snippet>__main__</snippet></ROW><ROW><id>15887776</id><snippet>__init__.py</snippet></ROW><ROW><id>15887776</id><snippet># Emit a warning if numpy is too old
majver, minver = [float(i) for i in _num.version.version.split('.')[:2]]
</snippet></ROW><ROW><id>15887776</id><snippet>&gt;&gt;&gt; import numpy as _num
&gt;&gt;&gt; _num.version.version
'1.6.2'
&gt;&gt;&gt; _num.version.version.split('.')[:2]
['1', '6']
&gt;&gt;&gt; majver, minver = [float(i) for i in _num.version.version.split('.')[:2]]
&gt;&gt;&gt; i
'6'
</snippet></ROW><ROW><id>15887903</id><snippet>firstDigit = x[0]
lastDigit = x[-1]
</snippet></ROW><ROW><id>15887903</id><snippet>x[0:1]</snippet></ROW><ROW><id>15887903</id><snippet> item0, item1, item2, item3
^ interval 0
        ^ interval 1
              ^ interval 2 
                     ^ interval 3    
</snippet></ROW><ROW><id>15887903</id><snippet>x[0:2]</snippet></ROW><ROW><id>15887938</id><snippet>{"stuff": 1, "morestuff": 2}</snippet></ROW><ROW><id>15887938</id><snippet>&lt;&lt;ListboxSelect&gt;&gt;</snippet></ROW><ROW><id>15887938</id><snippet>import Tkinter as tk

class Example(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        self.label = tk.Label(self)
        self.selection = tk.Listbox(self, width=40)

        self.label.pack(side="top", fill="x", expand=False)
        self.selection.pack(side="top", fill="both", expand=True)

        self.data = {"stuff": 1, "morestuff": 2}
        self.selection.insert("end", "stuff", "morestuff")

        self.selection.bind("&lt;&lt;ListboxSelect&gt;&gt;", self.on_listbox_select)

    def on_listbox_select(self, event):
        i = self.selection.curselection()[0]
        text = self.selection.get(i)
        self.label.configure(text="new value: %s (%s)" % (self.data[text], text))

if __name__ == "__main__":
    root = tk.Tk()
    Example(root).pack(side="top", fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>15888236</id><snippet>active_children()</snippet></ROW><ROW><id>15888236</id><snippet>atexit</snippet></ROW><ROW><id>15888236</id><snippet>atexit</snippet></ROW><ROW><id>15888236</id><snippet>os._exit()</snippet></ROW><ROW><id>15888236</id><snippet>SIGKILL</snippet></ROW><ROW><id>15888236</id><snippet>kill -9 $PARENTPID</snippet></ROW><ROW><id>15888236</id><snippet>kill -- -12345</snippet></ROW><ROW><id>15888405</id><snippet>class SOQLException(SFDCException): 
    def __init__(self, errorCode, message):
        self.errorCode = errorCode
        self.message = message
</snippet></ROW><ROW><id>15888405</id><snippet>data</snippet></ROW><ROW><id>15888405</id><snippet>    if len(data) == 1 and u"errorCode" in data[0]:
        error = data[0]
        raise SOQLException(**error)
</snippet></ROW><ROW><id>15888628</id><snippet>class MyHandler(tornado.web.RequestHandler):
    @tornado.web.asynchronous
    def get(self):
        self._pcb = tornado.ioloop.PeriodicCallback(self._cb, 1000)
        self._pcb.start()

    def _cb(self):
        self.write('Kapooya, Kapooya!')
        self.flush()

    def on_connection_close(self):
        self._pcb.stop()
</snippet></ROW><ROW><id>15889078</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>15889080</id><snippet>Scale</snippet></ROW><ROW><id>15889080</id><snippet>def cmd(value):
    print int(value)
</snippet></ROW><ROW><id>15889080</id><snippet>"command"</snippet></ROW><ROW><id>15889080</id><snippet>def cmd(*args):
    print('Scale command says {}'.format(args))

def enable(*args):
    print('Button command says {}'.format(args))
</snippet></ROW><ROW><id>15889307</id><snippet>organize_map</snippet></ROW><ROW><id>15889307</id><snippet>parse</snippet></ROW><ROW><id>15889307</id><snippet>-t</snippet></ROW><ROW><id>15889307</id><snippet>python -t myscript.py
</snippet></ROW><ROW><id>15889519</id><snippet>elif contains(r1, r2):
  separate = False
else:
  separate = False
</snippet></ROW><ROW><id>15889519</id><snippet>False</snippet></ROW><ROW><id>15889519</id><snippet>r1</snippet></ROW><ROW><id>15889519</id><snippet>r2</snippet></ROW><ROW><id>15889519</id><snippet>... or \
not contains(r1, r2)
</snippet></ROW><ROW><id>15889519</id><snippet>False</snippet></ROW><ROW><id>15889519</id><snippet>r1</snippet></ROW><ROW><id>15889519</id><snippet>r2</snippet></ROW><ROW><id>15889519</id><snippet>True</snippet></ROW><ROW><id>15889519</id><snippet>r1</snippet></ROW><ROW><id>15889519</id><snippet>r2</snippet></ROW><ROW><id>15889519</id><snippet>r2</snippet></ROW><ROW><id>15889519</id><snippet>r1</snippet></ROW><ROW><id>15889561</id><snippet>400</snippet></ROW><ROW><id>15889561</id><snippet>403</snippet></ROW><ROW><id>15889561</id><snippet>409</snippet></ROW><ROW><id>15889561</id><snippet>403</snippet></ROW><ROW><id>15889561</id><snippet>409</snippet></ROW><ROW><id>15889561</id><snippet>localhost</snippet></ROW><ROW><id>15889561</id><snippet>foo@mymachine</snippet></ROW><ROW><id>15889561</id><snippet>foo@localhost</snippet></ROW><ROW><id>15889561</id><snippet>cli=xmpp.Client(jid.getDomain())
</snippet></ROW><ROW><id>15889561</id><snippet>cli=xmpp.Client("hostname")
</snippet></ROW><ROW><id>15889565</id><snippet>%</snippet></ROW><ROW><id>15889565</id><snippet>/</snippet></ROW><ROW><id>15889565</id><snippet>self.operator</snippet></ROW><ROW><id>15889565</id><snippet>self.operators = ['+', '/', 'C',
                  '-', '%', 'M',
                  '*', '^', 'M+']

for index in range(9):
    Button(...).grid(padx=2,pady=2,row=index/3,column=index%3)
</snippet></ROW><ROW><id>15889670</id><snippet>import SocketServer

class DebugTCPServer(SocketServer.TCPServer):
    def __init__(self, server_address, RequestHandlerClass, bind_and_activate=True, debug=True):
        self.debug = debug
        SocketServer.TCPServer.__init__(self, server_address, RequestHandlerClass, bind_and_activate=True)

class DebugMETCPHandler(SocketServer.BaseRequestHandler):
    def handle(self):
        # self.server is an instance of the DebugTCPServer
        DEBUG = self.server.debug
        self.data = self.request.recv(1024).strip()
        if DEBUG:
            print "{} wrote:".format(self.client_address[0])
        r = MExpressHandler(self.data, False)


server = DebugTCPServer((HOST, PORT), DebugMETCPHandler, debug=True)
</snippet></ROW><ROW><id>15889670</id><snippet>server = DebugTCPServer((HOST, PORT), DebugMETCPHandler)
</snippet></ROW><ROW><id>15889710</id><snippet># this will be the namespace of the user when the code loads or nothing
# and it will never change as long as the instance is up
namespace_manager.set_namespace(user.namespace)  

class YourHandler(webapp2.RequestHandler):
    def get(self):
       # get the user....
       namespace_manager.set_namespace(user.namespace)
       # setting the namespace here will change it for each request.
</snippet></ROW><ROW><id>15890156</id><snippet>main.py</snippet></ROW><ROW><id>15890156</id><snippet>module1.py</snippet></ROW><ROW><id>15890156</id><snippet>Traceback (most recent call last):
  File "Z:\Python\main.py", line 10, in &lt;module&gt;
    module1.cool()
  File "Z:\Python\module1.py", line 3, in cool
    print pi
NameError: global name 'pi' is not defined
</snippet></ROW><ROW><id>15890156</id><snippet>module1</snippet></ROW><ROW><id>15890156</id><snippet>pi</snippet></ROW><ROW><id>15890156</id><snippet>from math import *</snippet></ROW><ROW><id>15890156</id><snippet>main.py</snippet></ROW><ROW><id>15890156</id><snippet>math</snippet></ROW><ROW><id>15890156</id><snippet>main</snippet></ROW><ROW><id>15890156</id><snippet>extern</snippet></ROW><ROW><id>15890156</id><snippet>pi</snippet></ROW><ROW><id>15890156</id><snippet>module1</snippet></ROW><ROW><id>15890156</id><snippet>from math import *</snippet></ROW><ROW><id>15890156</id><snippet>module1.py</snippet></ROW><ROW><id>15890156</id><snippet>module1.py</snippet></ROW><ROW><id>15890156</id><snippet>from main import *</snippet></ROW><ROW><id>15890156</id><snippet>main.py</snippet></ROW><ROW><id>15890156</id><snippet>module1.pi = pi</snippet></ROW><ROW><id>15890156</id><snippet>pi</snippet></ROW><ROW><id>15890156</id><snippet>builtins</snippet></ROW><ROW><id>15890156</id><snippet>__builtin__</snippet></ROW><ROW><id>15890156</id><snippet>import</snippet></ROW><ROW><id>15890156</id><snippet>from foo import *</snippet></ROW><ROW><id>15890156</id><snippet>import foo</snippet></ROW><ROW><id>15890156</id><snippet>from foo import bar, baz</snippet></ROW><ROW><id>15890397</id><snippet>Foo.test 
</snippet></ROW><ROW><id>15890397</id><snippet>Foo</snippet></ROW><ROW><id>15890397</id><snippet>Foo().test 
</snippet></ROW><ROW><id>15890397</id><snippet>Foo</snippet></ROW><ROW><id>15890397</id><snippet>self</snippet></ROW><ROW><id>15890397</id><snippet>test</snippet></ROW><ROW><id>15890397</id><snippet>Bar</snippet></ROW><ROW><id>15890397</id><snippet>Foo</snippet></ROW><ROW><id>15890397</id><snippet>import types 

class Bar(object):
    def __init__(self):
        self._foo = Foo(5)

        raw_function = Bar.test_Bar.__func__                        # 1)
        bound_to_foo = types.MethodType(raw_function, self._foo)    # 2)    
        self._foo.test = bound_to_foo                               # 3)

    def test(self):
        print self._x * 10
</snippet></ROW><ROW><id>15890593</id><snippet>log</snippet></ROW><ROW><id>15890593</id><snippet>log</snippet></ROW><ROW><id>15890593</id><snippet>&gt;&gt;&gt; from math import log
&gt;&gt;&gt; log(-1)
Traceback (most recent call last):
  File "&lt;pyshell#59&gt;", line 1, in &lt;module&gt;
    log(-1)
ValueError: math domain error
</snippet></ROW><ROW><id>15890593</id><snippet>newtonRaphson2</snippet></ROW><ROW><id>15890593</id><snippet>x[2]</snippet></ROW><ROW><id>15890596</id><snippet>NoneType</snippet></ROW><ROW><id>15890596</id><snippet>None</snippet></ROW><ROW><id>15890596</id><snippet>cart_item</snippet></ROW><ROW><id>15890596</id><snippet>charm == False</snippet></ROW><ROW><id>15890752</id><snippet>foo</snippet></ROW><ROW><id>15890752</id><snippet>self</snippet></ROW><ROW><id>15890752</id><snippet>bar</snippet></ROW><ROW><id>15890752</id><snippet>b=bar(10)
c=bar(20)
</snippet></ROW><ROW><id>15890752</id><snippet>c.var</snippet></ROW><ROW><id>15890752</id><snippet>20</snippet></ROW><ROW><id>15890752</id><snippet>b.var</snippet></ROW><ROW><id>15890752</id><snippet>10</snippet></ROW><ROW><id>15890752</id><snippet>foo</snippet></ROW><ROW><id>15890752</id><snippet>f=foo(10)
g=foo(20)
</snippet></ROW><ROW><id>15890752</id><snippet>f.var</snippet></ROW><ROW><id>15890752</id><snippet>g.var</snippet></ROW><ROW><id>15890752</id><snippet>20</snippet></ROW><ROW><id>15890752</id><snippet>foo.var</snippet></ROW><ROW><id>15890752</id><snippet>20</snippet></ROW><ROW><id>15890752</id><snippet>g</snippet></ROW><ROW><id>15890752</id><snippet>f=foo(10)
g=foo(20)
f.var=30
</snippet></ROW><ROW><id>15890752</id><snippet>g.var==foo.var==20</snippet></ROW><ROW><id>15890752</id><snippet>f.var==30</snippet></ROW><ROW><id>15890752</id><snippet>f.var</snippet></ROW><ROW><id>15890752</id><snippet>del f.var
</snippet></ROW><ROW><id>15890752</id><snippet>f</snippet></ROW><ROW><id>15890752</id><snippet>var</snippet></ROW><ROW><id>15890752</id><snippet>f.var</snippet></ROW><ROW><id>15890752</id><snippet>var</snippet></ROW><ROW><id>15890752</id><snippet>f.var==g.var==foo.var==20</snippet></ROW><ROW><id>15890752</id><snippet>self.var</snippet></ROW><ROW><id>15890752</id><snippet>classname.var</snippet></ROW><ROW><id>15890787</id><snippet>dis</snippet></ROW><ROW><id>15890787</id><snippet>In [29]: def func():
   ....:     return 5 -+-+-+ 2
   ....: 

In [30]: import dis

In [31]: dis.dis(func)
  2           0 LOAD_CONST               1 (5)
              3 LOAD_CONST               2 (2)
              6 UNARY_POSITIVE      
              7 UNARY_NEGATIVE      
              8 UNARY_POSITIVE      
              9 UNARY_NEGATIVE      
             10 UNARY_POSITIVE      
             11 BINARY_SUBTRACT     
             12 RETURN_VALUE        
</snippet></ROW><ROW><id>15890787</id><snippet>In [32]: 5 - (+(-(+(-(+(2))))))
Out[32]: 3
</snippet></ROW><ROW><id>15890900</id><snippet>loop_context</snippet></ROW><ROW><id>15890900</id><snippet>ttl</snippet></ROW><ROW><id>15890900</id><snippet>loop_context.keep_running()</snippet></ROW><ROW><id>15891170</id><snippet>Support more locale-specific formatting options for the money
data type (Tom Lane)

Specifically, honor all the POSIX options for ordering of the
value, sign, and currency symbol in monetary output. Also, make
sure that the thousands separator is only inserted to the left
of the decimal point, as required by POSIX.
</snippet></ROW><ROW><id>15891191</id><snippet>In [43]: a = [[{},{},{}],[{},{},{}]]

In [44]: a = numpy.array(a)

In [45]: a[1][1] = {'hello':'world','something':5}

In [46]: a
Out[46]:
array([[{}, {}, {}],
       [{}, {'hello': 'world', 'something': 5}, {}]], dtype=object)
</snippet></ROW><ROW><id>15891196</id><snippet>flatten=true</snippet></ROW><ROW><id>15891196</id><snippet>im = scipy.misc.imread('flower.png', flatten=True).astype(np.uint8)
</snippet></ROW><ROW><id>15891196</id><snippet>im1 = ndimage.grey_erosion(im, size=(15,15))
</snippet></ROW><ROW><id>15891393</id><snippet>data</snippet></ROW><ROW><id>15891393</id><snippet>htmltext[u"data"]
</snippet></ROW><ROW><id>15891393</id><snippet>"sku"</snippet></ROW><ROW><id>15891393</id><snippet>"data"</snippet></ROW><ROW><id>15891393</id><snippet>inner_dict = htmltext[u"data"][0]

print(inner_dict[u"sku"])
</snippet></ROW><ROW><id>15891393</id><snippet>def get_data(dict_index, key):
        return htmltext[u"data"][dict_index][key]

print(get_data(0, u"sku"))
</snippet></ROW><ROW><id>15891446</id><snippet>images -= np.mean(images, axis=0)</snippet></ROW><ROW><id>15891651</id><snippet>import csv
import os

os.chdir(r"C:\Users\Robert\Documents\qwe")

output_ary = []
with open("gdweights_feh_robert_cmr.csv",'rb') as f:
    reader = csv.reader(f, delimiter= ',')
    zerovar = 0
    for row in reader:
        if zerovar==0:
            zerovar = zerovar + 1
        else:
            sn = row [11]
            zerovar = zerovar + 1
            x = float(sn)
            if x &gt; 20:
                print x
                output_ary.append(row)

with open("output.csv",'w') as f2:
    for row in output_ary:
        for item in row:
            f2.write(item + ",")
</snippet></ROW><ROW><id>15892002</id><snippet>groups = {'GroupA': (Threading.Lock(), {}), 'GroupB': (Threading.Lock(), {})}


def request_handler(request):
    # Assuming these come from the user's http post
    user_id = request.userid
    user_group = request.user_group

    glock, group = groups[user_group]
    with glock:
        group[user_id] = group.get(user_id, 0) + 1
</snippet></ROW><ROW><id>15892002</id><snippet>groups</snippet></ROW><ROW><id>15892002</id><snippet>Queue</snippet></ROW><ROW><id>15892182</id><snippet>borderwidth</snippet></ROW><ROW><id>15892182</id><snippet>highlightthickness</snippet></ROW><ROW><id>15892182</id><snippet>border</snippet></ROW><ROW><id>15892182</id><snippet>highlightthickness</snippet></ROW><ROW><id>15892182</id><snippet>highlightcolor</snippet></ROW><ROW><id>15892265</id><snippet>&gt;&gt;&gt; class A(object): pass
&gt;&gt;&gt; class B(A): pass
&gt;&gt;&gt; class C(object): pass
&gt;&gt;&gt; issubclass(A, A)
True
&gt;&gt;&gt; issubclass(B, A)
True
&gt;&gt;&gt; issubclass(C, A)
False
</snippet></ROW><ROW><id>15892302</id><snippet>app = wx.App(False)
frame = wx.Frame(None)
panel = ExamplePanel(frame)
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>15892302</id><snippet>app = wx.App(False)
frame = wx.Frame(None)
panel = ExamplePanel(frame)
frame.Fit()
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>15892445</id><snippet>r+</snippet></ROW><ROW><id>15892445</id><snippet>os.rename</snippet></ROW><ROW><id>15892493</id><snippet>class Post(models.Model):
    pass


class Project(models.Model):
    posts = models.ManyToManyField(Post)
</snippet></ROW><ROW><id>15892493</id><snippet>project_obj.posts.all()
</snippet></ROW><ROW><id>15892493</id><snippet>post_obj.project_set.all()
</snippet></ROW><ROW><id>15892493</id><snippet>post_list = ProjectPost.objects.filter(project=project_object).values('post')
</snippet></ROW><ROW><id>15892554</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; L = [['x','a'], ['y','b'], ['z','a']]
&gt;&gt;&gt; freq = Counter(y for x, y in L)
&gt;&gt;&gt; [[x, y, freq[y]] for x, y in L]
[['x', 'a', 2], ['y', 'b', 1], ['z', 'a', 2]]
</snippet></ROW><ROW><id>15892615</id><snippet>from django.forms.models import model_to_dict, fields_for_model


class UserDetailsForm(ModelForm):
    def __init__(self, instance=None, *args, **kwargs):
        _fields = ('first_name', 'last_name', 'email',)
        _initial = model_to_dict(instance.user, _fields) if instance is not None else {}
        super(UserDetailsForm, self).__init__(initial=_initial, instance=instance, *args, **kwargs)
        self.fields.update(fields_for_model(User, _fields))

    class Meta:
        model = UserDetails
        exclude = ('user',)

    def save(self, *args, **kwargs):
        u = self.instance.user
        u.first_name = self.cleaned_data['first_name']
        u.last_name = self.cleaned_data['last_name']
        u.email = self.cleaned_data['email']
        u.save()
        profile = super(UserDetailsForm, self).save(*args,**kwargs)
        return profile
</snippet></ROW><ROW><id>15892622</id><snippet>for key in set(sourceDict).intersection(targetDict):
    # Now we have only keys that occur in both dicts
    if sourceDict[key] != targetDict[key]:
        diffList.append(key)
</snippet></ROW><ROW><id>15892622</id><snippet>(k for k in set(sourceDict).intersection(targetDict) if sourceDict[key] != targetDict[key])
</snippet></ROW><ROW><id>15892677</id><snippet>info = []
for model in modelslist:
    htmltext = urllib.urlopen("http://dx.com/p/GetProductInfoRealTime?skus="+model)
    htmltext = json.load(htmltext)
    if htmltext['success'] == True:
        def get_data(dict_index, key):
            return htmltext[u"data"][dict_index][key]
        for description in descriptionlist:
            info.append(description)
            info.append(get_data(0,description))
print info
</snippet></ROW><ROW><id>15893138</id><snippet>    The db, ndb, users, urlfetch, and memcache modules are imported.
dev~cash-drawer&gt; class X(ndb.Expando):
...    pass
... 
dev~cash-drawer&gt; 
dev~cash-drawer&gt; 
dev~cash-drawer&gt; y = X()
dev~cash-drawer&gt; y.a = ndb.GenericProperty()
dev~cash-drawer&gt; y.a = 100
dev~cash-drawer&gt; y.a
100
dev~cash-drawer&gt; repr(y.a)
'100'
dev~cash-drawer&gt; type(y.a)
&lt;type 'int'&gt;
dev~cash-drawer&gt; y._properties
{'a': GenericProperty('a')}
dev~cash-drawer&gt; 
</snippet></ROW><ROW><id>15893195</id><snippet>import datetime

now = datetime.datetime.now()

for h in xrange(24):
    for m in xrange(60):
        for s in xrange(60):
           time_string = '%02d:%02d:%02d' % (h,m,s)
           if time_string == now.strftime('%H:%m:%S'):
               print 'you found it! %s' % time_string
</snippet></ROW><ROW><id>15893363</id><snippet>"(.+?)Value_*|(.+?)Value2_*"
</snippet></ROW><ROW><id>15893363</id><snippet>.+</snippet></ROW><ROW><id>15893363</id><snippet>?</snippet></ROW><ROW><id>15893388</id><snippet>logger.error('This should go to both console and file')
</snippet></ROW><ROW><id>15893388</id><snippet>logging.error('this will go to the default logger which you have not changed the config of')
</snippet></ROW><ROW><id>15893392</id><snippet>authenticate</snippet></ROW><ROW><id>15893392</id><snippet>__name__</snippet></ROW><ROW><id>15893392</id><snippet>wrapper</snippet></ROW><ROW><id>15893392</id><snippet>functools.wraps</snippet></ROW><ROW><id>15893392</id><snippet>func</snippet></ROW><ROW><id>15893392</id><snippet>new_function = authenticate(old_function)
</snippet></ROW><ROW><id>15893392</id><snippet>@authenticate
def function(...)
</snippet></ROW><ROW><id>15893392</id><snippet>new_function</snippet></ROW><ROW><id>15893392</id><snippet>old_function</snippet></ROW><ROW><id>15893722</id><snippet>ax.xaxis.set_major_locator(matplotlib.dates.DayLocator())
</snippet></ROW><ROW><id>15893824</id><snippet>__new__</snippet></ROW><ROW><id>15893824</id><snippet>obj = FunClass()
</snippet></ROW><ROW><id>15893824</id><snippet>globals()['FunClass']()</snippet></ROW><ROW><id>15893824</id><snippet>obj.getThings()
</snippet></ROW><ROW><id>15893824</id><snippet>getattr(obj, 'getThings')()</snippet></ROW><ROW><id>15893824</id><snippet>object.__new__</snippet></ROW><ROW><id>15893910</id><snippet>&gt;&gt;&gt; from datetime import date, timedelta

&gt;&gt;&gt; class Int(int):
        def days_ago(self):
            return date.today() - timedelta(days=self)
        def days_from_now(self):
            return date.today() + timedelta(days=self)

&gt;&gt;&gt; Int(3).days_ago()
datetime.date(2013, 4, 5)
&gt;&gt;&gt; Int(4).days_from_now()
datetime.date(2013, 4, 12)
</snippet></ROW><ROW><id>15894137</id><snippet>with (open("./greekSymbols.txt") as infile, 
      open("./greekSymbolsFormated.txt", "w+") as outfile):
    for line in infile:
        up, low, name = line.split()
        outfile.write("{0}\t{1}".format(up,name))
        outfile.write("{0}\t{1}".format(low,name))
</snippet></ROW><ROW><id>15894137</id><snippet>pattern = re.compile(r"(\S+)\s+(\S+)\s+(.+)", re.UNICODE)
</snippet></ROW><ROW><id>15894199</id><snippet>&gt;&gt;&gt; 013
11
</snippet></ROW><ROW><id>15894199</id><snippet>013</snippet></ROW><ROW><id>15895461</id><snippet>&gt;&gt;&gt; {i: {j: (d[i][j], e[j]) for j in d[i]} for i in d}
{u'1': {1746L: (1, 3), 2239L: (1, 2)}, u'3': {2056L: (4, 3), 2425L: (1, 4)}, u'2': {1965L: (2, 3)}}
</snippet></ROW><ROW><id>15895516</id><snippet>WSGIApplicationGroup %{GLOBAL}
WSGIRestrictEmbedded On
</snippet></ROW><ROW><id>15896098</id><snippet>for l in ll:
    if l[0] == 2:
        l[:] = [10]
</snippet></ROW><ROW><id>15896098</id><snippet>[:]</snippet></ROW><ROW><id>15896098</id><snippet>l</snippet></ROW><ROW><id>15896098</id><snippet>l</snippet></ROW><ROW><id>15896098</id><snippet>&gt;&gt;&gt; ll= [[1,2,3], [2,3,4], [4,5,6]]
&gt;&gt;&gt; for l in ll:
...     if l[0] == 2:
...         l[:] = [10]
... 
&gt;&gt;&gt; ll
[[1, 2, 3], [10], [4, 5, 6]]
</snippet></ROW><ROW><id>15896112</id><snippet>fat_ioctl_get_attributes</snippet></ROW><ROW><id>15896112</id><snippet>ioctl</snippet></ROW><ROW><id>15896112</id><snippet>import array
import fcntl
import os

FAT_IOCTL_GET_ATTRIBUTES = 0x80047210
FATATTR_BITS = 'rhsvda67'

def get_fat_attrs(fn):
    fd = os.open(fn, os.O_RDONLY)
    try:
        buf = array.array('L', [0])
        try:
            fcntl.ioctl(fd, FAT_IOCTL_GET_ATTRIBUTES, buf, True)
        except IOError as ioe:
            if ioe.errno == 25: # Not a FAT volume
                return None
            else:
                raise

        return buf[0]
    finally:
        os.close(fd)

if __name__ == '__main__':
    import sys
    for fn in sys.argv[1:]:
        attrv = get_fat_attrs(fn)
        if attrv is None:
            print(fn + ': Not on a FAT volume')
            continue
        s = ''.join((fb if (1 &lt;&lt; idx) &amp; attrv else ' ')
                    for idx,fb in enumerate(FATATTR_BITS))
        print(fn + ': ' + s)
</snippet></ROW><ROW><id>15896185</id><snippet>windows=['main.py']</snippet></ROW><ROW><id>15896185</id><snippet>console=['main.py']</snippet></ROW><ROW><id>15896226</id><snippet>b = np.zeros([d2*d3, d1])</snippet></ROW><ROW><id>15896226</id><snippet>d1</snippet></ROW><ROW><id>15896226</id><snippet>d2*d3</snippet></ROW><ROW><id>15896226</id><snippet>b</snippet></ROW><ROW><id>15896226</id><snippet># Step2: create 2D flattened version of 3D input array
d1,d2,d3 = images.shape
b = np.empty([d1,d2*d3])  #if you know that you are filling the whole array it's faster that using np.zeros or np.ones
for i, im in enumerate(images): 
    b[i,:] = im.flatten()

#Step 3: PCA
results = PCA(b.T)
</snippet></ROW><ROW><id>15896226</id><snippet>images</snippet></ROW><ROW><id>15896226</id><snippet>images</snippet></ROW><ROW><id>15896226</id><snippet>enumerate</snippet></ROW><ROW><id>15896226</id><snippet>images</snippet></ROW><ROW><id>15896226</id><snippet>images</snippet></ROW><ROW><id>15896226</id><snippet>PIL</snippet></ROW><ROW><id>15896226</id><snippet>d1,d2,d3 = len(img), img[0].shape
</snippet></ROW><ROW><id>15896226</id><snippet>numpy.asarray</snippet></ROW><ROW><id>15896352</id><snippet>super</snippet></ROW><ROW><id>15896352</id><snippet>name</snippet></ROW><ROW><id>15896352</id><snippet>/DIR/
(?P&lt;super&gt;
    (?P&lt;name&gt;.*?)
    (?P&lt;modifier&gt;-W\d\.\d{2}[+-]\d{3})?\.(?P&lt;extension&gt;raw\.gz|root)$
)
</snippet></ROW><ROW><id>15896508</id><snippet>#!/usr/bin/python
import pyglet
from time import time, sleep

class Window(pyglet.window.Window):
    def __init__(self, refreshrate):
        super(Window, self).__init__(vsync = False)
        self.frames = 0
        self.framerate = pyglet.text.Label(text='Unknown', font_name='Verdana', font_size=8, x=10, y=10, color=(255,255,255,255))
        self.last = time()
        self.alive = 1
        self.refreshrate = refreshrate
        self.click = None
        self.drag = False

    def on_draw(self):
        self.render()

    def on_mouse_press(self, x, y, button, modifiers):
        self.click = x,y

    def on_mouse_drag(self, x, y, dx, dy, buttons, modifiers):
        if self.click:
            self.drag = True
            print 'Drag offset:',(dx,dy)

    def on_mouse_release(self, x, y, button, modifiers):
        if not self.drag and self.click:
            print 'You clicked here', self.click, 'Relese point:',(x,y)
        else:
            print 'You draged from', self.click, 'to:',(x,y)
        self.click = None
        self.drag = False

    def render(self):
        self.clear()
        if time() - self.last &gt;= 1:
            self.framerate.text = str(self.frames)
            self.frames = 0
            self.last = time()
        else:
            self.frames += 1
        self.framerate.draw()
        self.flip()

    def on_close(self):
        self.alive = 0

    def run(self):
        while self.alive:
            self.render()
            # ----&gt; Note: &lt;----
            #  Without self.dispatc_events() the screen will freeze
            #  due to the fact that i don't call pyglet.app.run(),
            #  because i like to have the control when and what locks
            #  the application, since pyglet.app.run() is a locking call.
            event = self.dispatch_events()
            sleep(1.0/self.refreshrate)

win = Window(23) # set the fps
win.run()
</snippet></ROW><ROW><id>15896594</id><snippet>super</snippet></ROW><ROW><id>15896594</id><snippet>self</snippet></ROW><ROW><id>15896594</id><snippet>def super(cls, inst):
    mro = inst.__class__.mro() # Always the most derived class
    return mro[mro.index(cls) + 1]
</snippet></ROW><ROW><id>15896594</id><snippet>namedtuple</snippet></ROW><ROW><id>15896928</id><snippet>if my_object.supplier_invoice.id:
    do_this()
</snippet></ROW><ROW><id>15897645</id><snippet>units</snippet></ROW><ROW><id>15897645</id><snippet>sympify</snippet></ROW><ROW><id>15897645</id><snippet>&gt;&gt;&gt; import sympy.physics.units as u 
... subs = {} 
... for k, v in u.__dict__.items(): 
...     if isinstance(v, Expr) and v.has(u.Unit): 
...         subs[Symbol(k)] = v # Map the `Symbol` for a unit to the unit

&gt;&gt;&gt; # sympify returns `Symbol`s, `subs` maps them to `Unit`s
&gt;&gt;&gt; print sympify('yard*millimeter/ly').subs(subs)
127*m/1313990343414000000000
</snippet></ROW><ROW><id>15897645</id><snippet>units</snippet></ROW><ROW><id>15897645</id><snippet>barn</snippet></ROW><ROW><id>15897645</id><snippet>&gt;&gt;&gt; print sympify('barn/meter**2').subs(subs)
barn/m**2 
</snippet></ROW><ROW><id>15897645</id><snippet>subs</snippet></ROW><ROW><id>15897645</id><snippet>&gt;&gt;&gt; subs[Symbol('almost_meter')] = 0.9*u.meter
... sympify('almost_meter').subs(subs)
0.9*m
</snippet></ROW><ROW><id>15897645</id><snippet>km</snippet></ROW><ROW><id>15897645</id><snippet>Unit</snippet></ROW><ROW><id>15897645</id><snippet>Integer</snippet></ROW><ROW><id>15897645</id><snippet>subs</snippet></ROW><ROW><id>15897645</id><snippet>&gt;&gt;&gt; import sympy.physics.units as u
... subs = {} 
... for k, v in u.__dict__.items(): 
...     if (isinstance(v, Expr) and v.has(u.Unit)) or isinstance(v, Integer): 
...         subs[Symbol(k)] = v 

&gt;&gt;&gt; print sympify('mega*m').subs(subs)
1000000*m 
</snippet></ROW><ROW><id>15897645</id><snippet>Unit</snippet></ROW><ROW><id>15897645</id><snippet>sympy/physics/units.py</snippet></ROW><ROW><id>15897645</id><snippet>&gt;&gt;&gt; from sympy.parsing.sympy_parser import (parse_expr,
... standard_transformations, implicit_multiplication_application)

&gt;&gt;&gt; parse_expr("10sin**2 x**2 + 3xyz + tan theta",
...            transformations=(standard_transformations + 
...                             (implicit_multiplication_application,)))
3*x*y*z + 10*sin(x**2)**2 + tan(theta) 
</snippet></ROW><ROW><id>15897645</id><snippet>sympify</snippet></ROW><ROW><id>15897645</id><snippet>eval</snippet></ROW><ROW><id>15898651</id><snippet>with</snippet></ROW><ROW><id>15898651</id><snippet>with open(inputFileName, 'rU') as inputFile:
    with open(outputFileName,'w') as outputFile:
</snippet></ROW><ROW><id>15898651</id><snippet>$ python2.6
Python 2.6.8 (unknown, Apr 19 2012, 01:24:00) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; with open(inputFileName, 'rU') as inputFile, open(outputFileName,'w') as outputFile:
  File "&lt;stdin&gt;", line 1
    with open(inputFileName, 'rU') as inputFile, open(outputFileName,'w') as outputFile:
                                               ^
SyntaxError: invalid syntax
&gt;&gt;&gt;

$ python2.7
Python 2.7.3 (default, Oct 22 2012, 06:12:32) 
[GCC 4.2.1 Compatible Apple Clang 3.1 (tags/Apple/clang-318.0.58)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; with open(inputFileName, 'rU') as inputFile, open(outputFileName,'w') as outputFile:
... 
</snippet></ROW><ROW><id>15898651</id><snippet>with</snippet></ROW><ROW><id>15898651</id><snippet>except</snippet></ROW><ROW><id>15898651</id><snippet>try:</snippet></ROW><ROW><id>15898651</id><snippet>except:</snippet></ROW><ROW><id>15898651</id><snippet>with</snippet></ROW><ROW><id>15898651</id><snippet>try:
    with open(inputFileName, 'rU') as inputFile, open(outputFileName,'w') as outputFile:
       print "do something"
except IOError as e: #(errno,strerror,filename):
    ## Control jumps directly to here if any of the above lines throws IOError.
    sys.stderr.write("problem with '{}'. ".format(e.filename))
    sys.stderr.write(' I/O error({0}): {1}.\n'.format(e.errno, e.strerror))
except:
    print "Unexpected error in generate_include_file() : ", sys.exc_info()[0]
</snippet></ROW><ROW><id>15898746</id><snippet>sqlite3</snippet></ROW><ROW><id>15898746</id><snippet>conn = sqlite3.connect(":memory:")
conn.isolation_level = None
cur = conn.cursor()
</snippet></ROW><ROW><id>15898768</id><snippet>import sys
import time
import ctypes
import ctypes.wintypes

EVENT_SYSTEM_DIALOGSTART = 0x0010
WINEVENT_OUTOFCONTEXT = 0x0000

user32 = ctypes.windll.user32
ole32 = ctypes.windll.ole32

ole32.CoInitialize(0)

WinEventProcType = ctypes.WINFUNCTYPE(
    None, 
    ctypes.wintypes.HANDLE,
    ctypes.wintypes.DWORD,
    ctypes.wintypes.HWND,
    ctypes.wintypes.LONG,
    ctypes.wintypes.LONG,
    ctypes.wintypes.DWORD,
    ctypes.wintypes.DWORD
)

def callback(hWinEventHook, event, hwnd, idObject, idChild, dwEventThread, dwmsEventTime):
    length = user32.GetWindowTextLengthA(hwnd)
    buff = ctypes.create_string_buffer(length + 1)
    user32.GetWindowTextA(hwnd, buff, length + 1)
    print buff.value

WinEventProc = WinEventProcType(callback)

user32.SetWinEventHook.restype = ctypes.wintypes.HANDLE
hook = user32.SetWinEventHook(
    EVENT_SYSTEM_DIALOGSTART,
    EVENT_SYSTEM_DIALOGSTART,
    0,
    WinEventProc,
    0,
    0,
    WINEVENT_OUTOFCONTEXT
)
if hook == 0:
    print 'SetWinEventHook failed'
    sys.exit(1)

msg = ctypes.wintypes.MSG()
while user32.GetMessageW(ctypes.byref(msg), 0, 0, 0) != 0:
    user32.TranslateMessageW(msg)
    user32.DispatchMessageW(msg)

user32.UnhookWinEvent(hook)
ole32.CoUninitialize()
</snippet></ROW><ROW><id>15898782</id><snippet>#! /usr/bin/python
# -*- coding: utf-8 -*-
# Python v2.7  
############################################################################# 
def _creadict(c, d={}):

    # recherche des enfants
    for cle in d:
        for cat, catpar in c:
            if catpar==cle:
                d[cle][cat] = {}
        # recherche récursive
        d[cle] = _creadict(c, d[cle])        

    return d  
#============================================================================ 
def creadict(cats):

    # simplification de la liste =&gt; [[cat, catparent], ...]
    c = []
    for i, (id1, id2, cat, idpar) in enumerate(cats):
        if idpar==0:
            c.append([cat, 0])
        else:
            for elem in cats:
                if idpar==elem[0]:
                    c.append([cat, elem[2]])
                    break    

    # recherche des 'cat' sans parent (catpar==0)
    d = {}
    for cat, catpar in c:
        if catpar==0:
            d[cat] = {}

    # recherche récursive des enfants
    d = _creadict(c, d)

    return d  
cats = ((1, 1, 'Cat1', 0), (2, 2, 'Cat2', 0), (3, 3, 'Cat3', 2), (4, 4, 'Cat4', 2), (5, 5, 'Cat5', 3), (6, 6, 'Cat6', 4), (7, 7, 'Cat7', 2))
d = creadict(cats)
print d
</snippet></ROW><ROW><id>15898839</id><snippet>ls -l</snippet></ROW><ROW><id>15898839</id><snippet>ls &gt; some_other_filename</snippet></ROW><ROW><id>15898905</id><snippet>nestedList.sort(key=lambda x: x[0])
</snippet></ROW><ROW><id>15898905</id><snippet>import operator as op

nestedList.sort(key=op.itemgetter(0))
</snippet></ROW><ROW><id>15899027</id><snippet>load_log_file = open ('a file location' , 'r')
read_log_file = load_log_file.read ()

def txt_search (read_log_file):
    errors = open ('another file location' , 'r')
    for error in errors.readlines() :
        if error.strip ('\r\n') in read_log_file:
            return 'Error found in log !!!'

    return "All is good!!!  :-D "

print txt_search (read_log_file)
</snippet></ROW><ROW><id>15899027</id><snippet>return</snippet></ROW><ROW><id>15899184</id><snippet>for table in soup.find('table', class_='tabelle_grafik'):
    count = len(table.find('a'))
</snippet></ROW><ROW><id>15899184</id><snippet>clubs = {}

for table in soup.find_all('table', class_='tabelle_grafik'):
    club_name = table.find('th', class_='al').text
    count = len(table.find_all('a'))
    clubs[club_name] = count
</snippet></ROW><ROW><id>15899538</id><snippet>&lt;page string="Special Deductions"&gt;
&lt;field name='special_deduction_ids' nolabel='1'&gt;
&lt;tree string='List' editable='bottom'&gt;
&lt;field name='deduction_id' invisible="1" /&gt;
&lt;field name='special_deduction_type' /&gt;
&lt;field name='bank_id'
attrs="{'invisible': [('special_deduction_type','in',('loan','union','insurance'))]}"/&gt;
&lt;field name='union_id'
attrs="{'invisible': [('special_deduction_type','in',('bank','loan','insurance'))]}"/&gt;
&lt;field name='insurance_id'
attrs="{'invisible': [('special_deduction_type','in',('loan','union','bank'))]}"/&gt;
&lt;field name='loan_id'
attrs="{'invisible': [('special_deduction_type','in',('bank','union','insurance'))]}"/&gt;

&lt;/tree&gt;
&lt;/field&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/page&gt;
</snippet></ROW><ROW><id>15899818</id><snippet>from subprocess import *

c = 'dir' #Windows

handle = Popen(c, stdin=PIPE, stderr=PIPE, stdout=PIPE, shell=True)
print handle.stdout.read()
handle.flush()
</snippet></ROW><ROW><id>15899818</id><snippet>shell=True</snippet></ROW><ROW><id>15899818</id><snippet>Popen()</snippet></ROW><ROW><id>15899818</id><snippet>c = ['ls', '-l'] #Linux
</snippet></ROW><ROW><id>15899818</id><snippet>handle = Popen(c, stdin=PIPE, stderr=PIPE, stdout=PIPE)
print handle.stdout.read()
handle.flush()
</snippet></ROW><ROW><id>15899818</id><snippet>from subproccess import check_output
print check_output('dir')
</snippet></ROW><ROW><id>15899818</id><snippet>import os
os.system("start cmd /K dir") #/K remains the window, /C executes and dies (popup)
</snippet></ROW><ROW><id>15899844</id><snippet>def load_friends(filename):
    v = []
    with open(filename, 'Ur') as f:
        for line in f:
            line = line.strip()
            line = line.split(',')
            line = tuple(line)
            v.append(line)
    return v
</snippet></ROW><ROW><id>15899844</id><snippet>+</snippet></ROW><ROW><id>15899844</id><snippet>line.append(tuple)</snippet></ROW><ROW><id>15899844</id><snippet>line</snippet></ROW><ROW><id>15899844</id><snippet>def load_friends(filename):
    with open(filename, 'rU') as f:
        return [tuple(line.strip().split(',')) for line in f]
</snippet></ROW><ROW><id>15899896</id><snippet>str.split()</snippet></ROW><ROW><id>15899896</id><snippet>&gt;&gt;&gt; 'd    55     r:100:10000'.split()
['d', '55', 'r:100:10000']
</snippet></ROW><ROW><id>15899896</id><snippet>&gt;&gt;&gt; int('d    55     r:100:10000'.split()[1])
55
</snippet></ROW><ROW><id>15899896</id><snippet>None</snippet></ROW><ROW><id>15899896</id><snippet>None</snippet></ROW><ROW><id>15899896</id><snippet>[]</snippet></ROW><ROW><id>15900083</id><snippet>findpossible</snippet></ROW><ROW><id>15900083</id><snippet>findcmd</snippet></ROW><ROW><id>15900083</id><snippet>hg pus</snippet></ROW><ROW><id>15900083</id><snippet>push</snippet></ROW><ROW><id>15900083</id><snippet>hg log --patch</snippet></ROW><ROW><id>15900083</id><snippet>hg log --pat</snippet></ROW><ROW><id>15900164</id><snippet>instance = MyModel.objects.create(some_field=some_value)  # post save signal triggered here
instance.my_m2mfield = my_set_of_m2m_models
</snippet></ROW><ROW><id>15900164</id><snippet>django.db.models.signals.m2m_changed</snippet></ROW><ROW><id>15900164</id><snippet>def post_save_mymodel(sender, instance, action, reverse, *args, **kwargs):
    if action == 'post_add' and not reverse:
        for e in instance.my_m2mfield.all():
            # Query including "e"
m2m_changed.connect(post_save_mymodel, sender=MyModel.my_m2mfield.through)
</snippet></ROW><ROW><id>15900195</id><snippet>process_exception</snippet></ROW><ROW><id>15900195</id><snippet>process_exception(self, request, exception)</snippet></ROW><ROW><id>15900195</id><snippet>request</snippet></ROW><ROW><id>15900195</id><snippet>HttpRequest</snippet></ROW><ROW><id>15900195</id><snippet>exception</snippet></ROW><ROW><id>15900195</id><snippet>Exception</snippet></ROW><ROW><id>15900195</id><snippet>process_exception()</snippet></ROW><ROW><id>15900195</id><snippet>process_exception()</snippet></ROW><ROW><id>15900195</id><snippet>None</snippet></ROW><ROW><id>15900195</id><snippet>HttpResponse</snippet></ROW><ROW><id>15900195</id><snippet>HttpResponse</snippet></ROW><ROW><id>15900195</id><snippet>import traceback
from django.http import HttpResponse

class PlainTextExceptionMiddleware(object):
     def process_exception(self, request, exception):
         return HttpResponse(traceback.format_exc(), "text/plain")
</snippet></ROW><ROW><id>15900195</id><snippet>MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>15900453</id><snippet>params</snippet></ROW><ROW><id>15900453</id><snippet>data</snippet></ROW><ROW><id>15900453</id><snippet>json</snippet></ROW><ROW><id>15900453</id><snippet>import json

data = {"eventType": "AAS_PORTAL_START", "data": {"uid": "hfe3hf45huf33545", "aid": "1", "vid": "1"}}
data = json.dumps(data)
</snippet></ROW><ROW><id>15900453</id><snippet>params = {'sessionKey': '9ebbd0b25760557393a43064a92bae539d962103', 'format': 'xml', 'platformId': 1}
</snippet></ROW><ROW><id>15900453</id><snippet>import requests
import json

headers = {'content-type': 'application/json'}
url = 'http://192.168.3.45:8080/api/v2/event/log'

data = {"eventType": "AAS_PORTAL_START", "data": {"uid": "hfe3hf45huf33545", "aid": "1", "vid": "1"}}
params = {'sessionKey': '9ebbd0b25760557393a43064a92bae539d962103', 'format': 'xml', 'platformId': 1}

requests.post(url, params=params, data=json.dumps(data), headers=headers)
</snippet></ROW><ROW><id>15900584</id><snippet>pip ...</snippet></ROW><ROW><id>15900584</id><snippet>pip3 ...</snippet></ROW><ROW><id>15900629</id><snippet>H = sp.csr_matrix(H)
</snippet></ROW><ROW><id>15900629</id><snippet>H[0,0] = 0
H[0,1] = 0
H[0,2] = 0
</snippet></ROW><ROW><id>15900629</id><snippet>#SciPy Sparse linear algebra takes care of sparse matrix computations
#http://docs.scipy.org/doc/scipy/reference/sparse.linalg.html
import scipy.sparse as sp
import scipy.sparse.linalg  as la

import numpy as np
import matplotlib.pyplot as plt

#discretize x-axis
N = 1100
x = np.linspace(-100,100,N)
V = x * x / 2.
h = len(x)/(N)
hi2 = 1./(h**2)

#discretize Schroedinger Equation, i.e. build 
#banded matrix from difference equation
C0 = np.ones(N)*30. + V
C1 = np.ones(N) * -16.
C2 = np.ones(N) * 1.

H = sp.spdiags([C2, C1, C0, C1, C2],[-2,-1,0,1,2], N, N)
H *= hi2 * (- 1./12.) * (- 1. / 2.)
H = sp.csr_matrix(H)
H[0,0] = 0
H[0,1] = 0
H[0,2] = 0

#check structure of H
plt.figure()
plt.spy(H)
plt.show()

EV = la.eigsh(H,return_eigenvectors = False)
</snippet></ROW><ROW><id>15900708</id><snippet>pprint.PrettyPrinter</snippet></ROW><ROW><id>15900708</id><snippet>.format()</snippet></ROW><ROW><id>15900708</id><snippet>from pprint import PrettyPrinter, _recursion

class MyPrettyPrinter(PrettyPrinter):
    def format(self, object, context, maxlevels, level):
        if isinstance(object, OrderedDict):
            if not object:
                return "()", True, False

            objid = id(object)
            if maxlevels and level &gt;= maxlevels:
                return "(...)", False, objid in context
            if objid in context:
                return _recursion(object), False, True
            context[objid] = 1
            readable = True
            recursive = False
            components = []
            append = components.append
            level += 1
            selfformat = self.format
            for k, v in sorted(object.items()):
                krepr, kreadable, krecur = selfformat(k, context, maxlevels, level)
                vrepr, vreadable, vrecur = selfformat(v, context, maxlevels, level)
                append('({}, {})'.format(krepr, vrepr))
                readable = readable and kreadable and vreadable
                if krecur or vrecur:
                    recursive = True
            del context[objid]
            return '({})'.format(', '.join(components)), readable, recursive

        formatted, readable, recursion = PrettyPrinter.format(self, object, context, maxlevels, level)
        if isinstance(object, unicode):
            formatted = formatted.lstrip('u')

        return formatted, readable, recursion
</snippet></ROW><ROW><id>15900708</id><snippet>OrderedDict</snippet></ROW><ROW><id>15900708</id><snippet>__repr__</snippet></ROW><ROW><id>15900708</id><snippet>pprint</snippet></ROW><ROW><id>15900708</id><snippet>pprint.pprint()</snippet></ROW><ROW><id>15900708</id><snippet>mypprint = MyPrettyPrinter()

mypprint.pprint(x)
</snippet></ROW><ROW><id>15900708</id><snippet>&gt;&gt;&gt; mypprint = MyPrettyPrinter()
&gt;&gt;&gt; mypprint.pprint(x)
[(('D-ID', 'clci-2'), ('R', '1691')),
 (('D-ID', 'dallas-pcc-1'), ('R', '5498')),
 (('D-ID', 'gx-1'), ('R', '2275')),
 (('D-ID', 'gx-2'), ('R', '0')),
 (('D-ID', 'ocs-1'), ('R', '31735')),
 (('D-ID', 'ocs-2'), ('R', '0')),
 (('D-ID', 'pcc-gx-1'), ('R', '46351')),
 (('D-ID', 'rgx-1'), ('R', '907')),
 (('D-ID', 'rgx-2'), ('R', '1010')),
 (('D-ID', 'rocs-1'), ('R', '915')),
 (('D-ID', 'rocs-2'), ('R', '1033'))]
</snippet></ROW><ROW><id>15900791</id><snippet>SELECT P.id, (TP.id IS NOT NULL) AS done
FROM myapp_place P
LEFT OUTER JOIN myapp_team_places TP
ON P.id = TP.place_id AND TP.team_id = %s
</snippet></ROW><ROW><id>15900791</id><snippet>ORDER BY</snippet></ROW><ROW><id>15900791</id><snippet>Place</snippet></ROW><ROW><id>15900791</id><snippet>&gt;&gt;&gt; sql = ''' ... as above ... '''
&gt;&gt;&gt; places = Place.objects.raw(sql, [team.id])
&gt;&gt;&gt; for p in places:
...     print p.id, bool(p.done)
...
1 True
2 True
3 False
</snippet></ROW><ROW><id>15900861</id><snippet>p</snippet></ROW><ROW><id>15900861</id><snippet>p[span]</snippet></ROW><ROW><id>15900861</id><snippet>p</snippet></ROW><ROW><id>15900861</id><snippet>span</snippet></ROW><ROW><id>15900861</id><snippet>ptags_with_span = content.xpath('//*[@id="ciHomeContentlhs"]/div[4]/div[2]/div[1]/p[span]')
no_of_p_tags = len(ptags_with_span)
for ptag in ptags_with_span:
    print ptag.xpath('./span/text()')
</snippet></ROW><ROW><id>15900896</id><snippet>wx = (w &lt;&lt; 32) + x;
</snippet></ROW><ROW><id>15900955</id><snippet>max</snippet></ROW><ROW><id>15900955</id><snippet>pix.max()</snippet></ROW><ROW><id>15900955</id><snippet>numpy.max(pix)</snippet></ROW><ROW><id>15900955</id><snippet>numpy.amax(pix)</snippet></ROW><ROW><id>15900958</id><snippet>_save</snippet></ROW><ROW><id>15900958</id><snippet>get_available_name</snippet></ROW><ROW><id>15900958</id><snippet>class MediaFileSystemStorage(FileSystemStorage):
    def get_available_name(self, name):
        return name

    def _save(self, name, content):
        if self.exists(name):
            # if the file exists, do not call the superclasses _save method
            return name
        # if the file is new, DO call it
        return super(MediaFileSystemStorage, self)._save(name, content)


def media_file_name(instance, filename):
    h = instance.md5sum
    basename, ext = os.path.splitext(filename)
    return os.path.join('mediafiles', h[0:1], h[1:2], h + ext.lower())


class Media(models.Model):
    # use the custom storage class fo the FileField
    orig_file = models.FileField(
        upload_to=media_file_name, storage=MediaFileSystemStorage())
    md5sum = models.CharField(max_length=36)
    ...

    def save(self, *args, **kwargs):
            if not self.pk:  # file is new
                md5 = hashlib.md5()
                for chunk in self.orig_file.chunks():
                    md5.update(chunk)
                self.md5sum = md5.hexdigest()
            super(Media, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>15901229</id><snippet>import xlrd

book = xlrd.open_workbook('myfile.xls')

print book.nsheets
print book.sheet_names()

sh = book.sheet_by_index(0)
print sh.name, sh.nrows, sh.ncols
</snippet></ROW><ROW><id>15901229</id><snippet>worksheet = workbook.sheet_by_name('Sheet1')
num_rows = worksheet.nrows - 1
curr_row = -1
while curr_row &lt; num_rows:
    curr_row += 1
    row = worksheet.row(curr_row)
    print row
</snippet></ROW><ROW><id>15901351</id><snippet>array ^= 255
</snippet></ROW><ROW><id>15901634</id><snippet>numexpr</snippet></ROW><ROW><id>15901634</id><snippet>or</snippet></ROW><ROW><id>15901634</id><snippet>or</snippet></ROW><ROW><id>15901752</id><snippet>import json

scriptline = next((line for line in scripttag.string.splitlines()
    if 'Sw.preloadedData["overview"]' in line))
data = scriptline.split('=', 1)[1].strip(' ;')
data = json.loads(data)
</snippet></ROW><ROW><id>15901752</id><snippet>next(..., '')</snippet></ROW><ROW><id>15901752</id><snippet>Sw.preloadedData["overview"]</snippet></ROW><ROW><id>15901752</id><snippet>=</snippet></ROW><ROW><id>15901752</id><snippet>{u'Category': u'Internet_and_Telecom/Social_Network',
 u'CategoryRank': [1, 27564, 0],
 u'Country': 840,
 u'CountryRanks': {u'100': [1, 473283, 0],
                   u'12': [1, 830254, 0],
                   u'124': [1, 1950051, 0],
                   u'152': [1, 725504, 0],
                   u'156': [25, 375144, -1],
                   u'158': [1, 408462, 0],
                   u'170': [1, 1048409, 0],
                   u'191': [1, 348589, 0],
                   u'203': [1, 623702, 0],
                   u'208': [1, 350294, 0],
                   u'246': [1, 387528, 0],
                   u'250': [1, 1887449, 0],
                   u'276': [1, 2752131, 0],
                   u'300': [1, 654931, 0],
                   u'32': [1, 1223765, 0],
                   u'344': [1, 284415, 0],
                   u'348': [1, 471458, 0],
                   u'356': [2, 2356839, 1],
                   u'36': [1, 857177, 0],
                   u'360': [1, 1541560, 0],
                   u'372': [1, 361215, 0],
                   u'376': [1, 390754, 0],
                   u'380': [1, 1441457, 0],
                   u'392': [3, 979893, 1],
                   u'40': [1, 700209, 0],
                   u'410': [1, 327519, 0],
                   u'458': [1, 851821, 0],
                   u'484': [1, 1329484, 0],
                   u'504': [1, 672216, 0],
                   u'528': [1, 1092022, 0],
                   u'554': [1, 268216, 0],
                   u'56': [1, 1124680, 0],
                   u'578': [1, 349987, 0],
                   u'586': [1, 553155, 0],
                   u'604': [1, 599566, 0],
                   u'608': [1, 986465, 0],
                   u'616': [2, 1430485, 0],
                   u'620': [1, 841554, 0],
                   u'642': [1, 814441, 0],
                   u'643': [8, 1424933, 1],
                   u'682': [1, 692392, 0],
                   u'688': [1, 534093, 0],
                   u'702': [1, 427637, 0],
                   u'703': [1, 341310, 0],
                   u'704': [2, 918752, 0],
                   u'710': [2, 439567, 1],
                   u'724': [2, 1432992, 0],
                   u'752': [1, 577990, 0],
                   u'756': [1, 903074, 0],
                   u'76': [1, 2733763, 0],
                   u'764': [1, 857348, 0],
                   u'784': [1, 564929, 0],
                   u'792': [1, 979507, 0],
                   u'804': [8, 1073943, 1],
                   u'818': [1, 463162, 0],
                   u'826': [1, 2062694, 0],
                   u'840': [1, 5142062, 0],
                   u'862': [1, 724854, 0]},
 u'Description': u'A social utility that connects people, to keep up with friends, upload photos, share links and videos.',
 u'Engagments': [{u'Bounce': [0.18813037420762707, 0.04348134904172363],
                  u'Month': 9,
                  u'PPV': [21.312597646825566, 0.034059623863791355],
                  u'Reach': [0.3236483914825198, 0.012621437484750864],
                  u'Time': [1225.8536260294338, 0.0009026673459306966],
                  u'Year': 2012},
                 {u'Bounce': [0.17672838267013638, -0.060606861520974054],
                  u'Month': 10,
                  u'PPV': [25.612224490959978, 0.20174109770119109],
                  u'Reach': [0.3132553630508028, -0.03211209666178205],
                  u'Time': [1308.5613956266043, 0.0674695313053506],
                  u'Year': 2012},
                 {u'Bounce': [0.186024790640559, 0.052602801145837264],
                  u'Month': 11,
                  u'PPV': [24.020971463806184, -0.06212865374951859],
                  u'Reach': [0.33350274816471975, 0.06463539815161368],
                  u'Time': [1300.8263833937028, -0.005911080869994256],
                  u'Year': 2012},
                 {u'Bounce': [0.18107629094748873, -0.02660129155920865],
                  u'Month': 12,
                  u'PPV': [24.916914500937356, 0.03729836815638965],
                  u'Reach': [0.3244161087234065, -0.027246070658540122],
                  u'Time': [1331.3137947173564, 0.023436956470790138],
                  u'Year': 2012},
                 {u'Bounce': [0.18097482510209897, -0.0005603485959361221],
                  u'Month': 1,
                  u'PPV': [25.52485794831804, 0.02439882543875216],
                  u'Reach': [0.2999822245222873, -0.07531649490917003],
                  u'Time': [1334.5042854365543, 0.0023964979044441836],
                  u'Year': 2013},
                 {u'Bounce': [0.18673378186827794, 0.03182186673162968],
                  u'Month': 2,
                  u'PPV': [23.201378273544368, -0.09102811382841713],
                  u'Reach': [0.2842911869016958, -0.05230655798215711],
                  u'Time': [1281.8427161473487, -0.03946152130337932],
                  u'Year': 2013}],
 u'GlobalRank': [1, 28115594, 0],
 u'RedirectUrl': u'facebook.com',
 u'Title': u'Facebook',
 u'TrafficReach': [0.3236447516162034,
                   0.3238506691231212,
                   0.3247648143721332,
                   0.31948943452696626,
                   0.310612833573507,
                   0.3086742084043239,
                   0.3066650958404128,
                   0.3133412877265817,
                   0.3355154609011924,
                   0.3260064922555041,
                   0.3339616481060937,
                   0.3399959232708455,
                   0.33711315799626795,
                   0.32152719433964483,
                   0.31986157880865085,
                   0.32069766148623413,
                   0.3306823871380894,
                   0.32266565637788247,
                   0.2903477786960325,
                   0.29286953998372667,
                   0.29969130766646174,
                   0.3071060984450904,
                   0.28517166164955293,
                   0.29038329556338477,
                   0.2845053957123595],
 u'TrafficReachEnd': 1362096000,
 u'TrafficReachStart': 1346457600,
 u'TrafficSources': {u'Direct': 0.6014880950132592,
                     u'Mail': 0.018352638254343783,
                     u'Paid Referrals': 0.0010665044954870533,
                     u'Referrals': 0.24273597651387802,
                     u'Search': 0.12679771428369516,
                     u'Social': 0.009559071439336665}}
</snippet></ROW><ROW><id>15901752</id><snippet>JSONDecoder.raw_decode()</snippet></ROW><ROW><id>15901752</id><snippet>import json

script_rest = scripttag.string.split('Sw.preloadedData["overview"]', 1)[1].lstrip(' =')
decoder = json.JSONDecoder()
data, _ = decoder.raw_decode(script_rest)
</snippet></ROW><ROW><id>15901752</id><snippet>raw_decode()</snippet></ROW><ROW><id>15901752</id><snippet>=</snippet></ROW><ROW><id>15901752</id><snippet>Sw.preloadedData["overview"]</snippet></ROW><ROW><id>15901909</id><snippet>new_list</snippet></ROW><ROW><id>15901909</id><snippet>str</snippet></ROW><ROW><id>15901909</id><snippet>&gt;&gt;&gt; ("foo","bar") + "\n"
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can only concatenate tuple (not "str") to tuple
</snippet></ROW><ROW><id>15901909</id><snippet>str.join</snippet></ROW><ROW><id>15901909</id><snippet>tuple</snippet></ROW><ROW><id>15901909</id><snippet>str</snippet></ROW><ROW><id>15901909</id><snippet>"\n"</snippet></ROW><ROW><id>15901909</id><snippet>&gt;&gt;&gt; ','.join(("foo","bar")) + "\n"
'foo,bar\n'
</snippet></ROW><ROW><id>15901909</id><snippet>def save_friends(friend_info, new_list):
    with open(friend_info, 'w') as f:
        for line in new_list:
            f.write(','.join(line) + '\n')
</snippet></ROW><ROW><id>15901909</id><snippet>line</snippet></ROW><ROW><id>15901909</id><snippet>str</snippet></ROW><ROW><id>15901909</id><snippet>f.write(','.join(str(x) for x in line) + '\n')
</snippet></ROW><ROW><id>15901909</id><snippet>join</snippet></ROW><ROW><id>15901909</id><snippet>&gt;&gt;&gt; ','.join((1,2,3))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: sequence item 0: expected string, int found
</snippet></ROW><ROW><id>15901965</id><snippet>from ctypes import *
from ctypes.wintypes import *

#Constants

#For touchMask
TOUCH_MASK_NONE=          0x00000000 #Default
TOUCH_MASK_CONTACTAREA=   0x00000001
TOUCH_MASK_ORIENTATION=   0x00000002
TOUCH_MASK_PRESSURE=      0x00000004
TOUCH_MASK_ALL=           0x00000007

#For touchFlag
TOUCH_FLAG_NONE=          0x00000000

#For pointerType
PT_POINTER=               0x00000001#All
PT_TOUCH=                 0x00000002
PT_PEN=                   0x00000003
PT_MOUSE=                 0x00000004

#For pointerFlags
POINTER_FLAG_NONE=        0x00000000#Default
POINTER_FLAG_NEW=         0x00000001
POINTER_FLAG_INRANGE=     0x00000002
POINTER_FLAG_INCONTACT=   0x00000004
POINTER_FLAG_FIRSTBUTTON= 0x00000010
POINTER_FLAG_SECONDBUTTON=0x00000020
POINTER_FLAG_THIRDBUTTON= 0x00000040
POINTER_FLAG_FOURTHBUTTON=0x00000080
POINTER_FLAG_FIFTHBUTTON= 0x00000100
POINTER_FLAG_PRIMARY=     0x00002000
POINTER_FLAG_CONFIDENCE=  0x00004000
POINTER_FLAG_CANCELED=    0x00008000
POINTER_FLAG_DOWN=        0x00010000
POINTER_FLAG_UPDATE=      0x00020000
POINTER_FLAG_UP=          0x00040000
POINTER_FLAG_WHEEL=       0x00080000
POINTER_FLAG_HWHEEL=      0x00100000
POINTER_FLAG_CAPTURECHANGED=0x00200000


#Structs Needed

class POINTER_INFO(Structure):
    _fields_=[("pointerType",c_uint32),
              ("pointerId",c_uint32),
              ("frameId",c_uint32),
              ("pointerFlags",c_int),
              ("sourceDevice",HANDLE),
              ("hwndTarget",HWND),
              ("ptPixelLocation",POINT),
              ("ptHimetricLocation",POINT),
              ("ptPixelLocationRaw",POINT),
              ("ptHimetricLocationRaw",POINT),
              ("dwTime",DWORD),
              ("historyCount",c_uint32),
              ("inputData",c_int32),
              ("dwKeyStates",DWORD),
              ("PerformanceCount",c_uint64),
              ("ButtonChangeType",c_int)
              ]


class POINTER_TOUCH_INFO(Structure):
    _fields_=[("pointerInfo",POINTER_INFO),
              ("touchFlags",c_int),
              ("touchMask",c_int),
              ("rcContact", RECT),
              ("rcContactRaw",RECT),
              ("orientation", c_uint32),
              ("pressure", c_uint32)]



#Initialize Pointer and Touch info

pointerInfo=POINTER_INFO(pointerType=PT_TOUCH,
                         pointerId=0,
                         ptPixelLocation=POINT(950,540))

touchInfo=POINTER_TOUCH_INFO(pointerInfo=pointerInfo,
                             touchFlags=TOUCH_FLAG_NONE,
                             touchMask=TOUCH_MASK_ALL,
                             rcContact=RECT(pointerInfo.ptPixelLocation.x-5,
                                  pointerInfo.ptPixelLocation.y-5,
                                  pointerInfo.ptPixelLocation.x+5,
                                  pointerInfo.ptPixelLocation.y+5),
                             orientation=90,
                             pressure=32000)


def makeTouch(x,y,fingerRadius):
    touchInfo.pointerInfo.ptPixelLocation.x=x
    touchInfo.pointerInfo.ptPixelLocation.y=y

    touchInfo.rcContact.left=x-fingerRadius
    touchInfo.rcContact.right=x+fingerRadius
    touchInfo.rcContact.top=y-fingerRadius
    touchInfo.rcContact.bottom=y+fingerRadius

    #Initialize Touch Injection
    if (windll.user32.InitializeTouchInjection(1,1) != 0):
        print "Initialized Touch Injection"

    #Press Down
    touchInfo.pointerInfo.pointerFlags=(POINTER_FLAG_DOWN|
                                        POINTER_FLAG_INRANGE|
                                        POINTER_FLAG_INCONTACT)

    if (windll.user32.InjectTouchInput(1, byref(touchInfo))==0):
        print "Failed with Error: "+ FormatError()

    else:
        print "Touch Down Succeeded!"

    #Pull Up
    touchInfo.pointerInfo.pointerFlags=POINTER_FLAG_UP

    if (windll.user32.InjectTouchInput(1,byref(touchInfo))==0):
        print "Failed with Error: "+FormatError()

    else:
        print "Pull Up Succeeded!"

    return

#Ex:
#makeTouch(950,270,5)
</snippet></ROW><ROW><id>15902153</id><snippet>import lxml.html
import feedparser

def test():
    try:
        lxml.html.document_fromstring('')
    except Exception as e:
        print e

d = feedparser.parse('blog.xml')
e = d.entries[0].content[0]['value'].encode('utf-8')

test() # XMLSyntaxError: None

lxml.html.document_fromstring(e)
test() # XMLSyntaxError: line 1407: Tag b:include invalid
</snippet></ROW><ROW><id>15902153</id><snippet>import lxml.html
import feedparser
d = feedparser.parse('blog.xml')
for num,entry in enumerate(d.entries):
    string=entry.content[0]['value'].encode("utf-8") 
    if not string:
        continue
    myhtml=lxml.html.document_fromstring(string)
    print  myhtml.text_content()
</snippet></ROW><ROW><id>15902186</id><snippet>class A(object):
   myvariable = 0
</snippet></ROW><ROW><id>15902186</id><snippet>import module1
module1.A.myvariable += 1
</snippet></ROW><ROW><id>15902186</id><snippet>class Name:
   Name.myvar = 0
</snippet></ROW><ROW><id>15902186</id><snippet>myvar</snippet></ROW><ROW><id>15902262</id><snippet>[pd.set_option(option, setting) for option, setting in [('max_rows', 1000), ('notebook_repr_html', False)]]
</snippet></ROW><ROW><id>15902262</id><snippet>pd.set_option('max_rows',1000)
pd.set_option('notebook_repr_html',False)
</snippet></ROW><ROW><id>15902420</id><snippet>verbose_name</snippet></ROW><ROW><id>15902420</id><snippet>verbose_name_plural</snippet></ROW><ROW><id>15902420</id><snippet>class Company(User):
    objects = UserManager()
    class Meta:
        verbose_name = "Company"
        verbose_name_plural = "Companies"
</snippet></ROW><ROW><id>15902504</id><snippet>class LatestEntriesFeed(Feed):
    title = "Chicagocrime.org site news"
    link = "/sitenews/"
    description = "Updates on changes and additions to chicagocrime.org."

    def items(self):
        return NewsItem.objects.order_by('-pub_date')[:5]

    def item_title(self, item):
        return item.title

    def item_description(self, item):
        return item.description

    # item_link is only needed if NewsItem has no get_absolute_url method.
    def item_link(self, item):
        return reverse('news-item', args=[item.pk])
</snippet></ROW><ROW><id>15902660</id><snippet>display_name</snippet></ROW><ROW><id>15902660</id><snippet>self</snippet></ROW><ROW><id>15902660</id><snippet>self</snippet></ROW><ROW><id>15902660</id><snippet>display_name</snippet></ROW><ROW><id>15902660</id><snippet>self</snippet></ROW><ROW><id>15902660</id><snippet>self</snippet></ROW><ROW><id>15902660</id><snippet>class Animals():
    def display_name(self):
        print ('Name is Mr.X')

    def display_age(self):
        print('Age is 25')    

class Name(Animals):
    def call_display_name(self):
        self.display_name()

class Age(Animals):
    def call_display_name(self):
        self.display_age()

Name().call_display_name()
</snippet></ROW><ROW><id>15902779</id><snippet>def info(name, food_list):
    food_list = = [('Donut', '320', '4.00'), ('Apple Pie', '200', '3.20')]
    for c in food_list:
        if name in c:
            print c[0],':',c[1], ' ', c[2]
            return None
    else:
        print "Unknown food", name
        return None
</snippet></ROW><ROW><id>15902970</id><snippet>perl -e 'print sprintf("%1.0f",2 * shift) / 2'  -- 6.79
7
</snippet></ROW><ROW><id>15903075</id><snippet>collections.Counter()</snippet></ROW><ROW><id>15903075</id><snippet>In [52]: from collections import Counter

In [53]: c=Counter("aaabbc")

In [54]: c
Out[54]: Counter({'a': 3, 'b': 2, 'c': 1})

In [55]: c.most_common()
Out[55]: [('a', 3), ('b', 2), ('c', 1)]
</snippet></ROW><ROW><id>15903075</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>15903075</id><snippet>In [58]: from collections import defaultdict

In [59]: strs="aaabbc"

In [61]: dic=defaultdict(int)

In [62]: for x in strs:
   ....:     dic[x]+=1
   ....:     

In [63]: dic
Out[63]: defaultdict(&lt;type 'int'&gt;, {'a': 3, 'c': 1, 'b': 2})

In [64]: from operator import itemgetter

In [66]: sorted(dic.items(),reverse=True,key=itemgetter(1))
Out[66]: [('a', 3), ('b', 2), ('c', 1)]
</snippet></ROW><ROW><id>15903090</id><snippet>self</snippet></ROW><ROW><id>15903090</id><snippet>__init__()</snippet></ROW><ROW><id>15903090</id><snippet>super()</snippet></ROW><ROW><id>15903090</id><snippet>def __init__(self):
    super(lala, self).__init__()    
</snippet></ROW><ROW><id>15903090</id><snippet>rules</snippet></ROW><ROW><id>15903090</id><snippet>rule</snippet></ROW><ROW><id>15903090</id><snippet>class lala(CrawlSpider):
    name="lala"
    start_url=["http://www.lala.net/"]       
    rules = [
        Rule(SgmlLinkExtractor(), follow=True, callback='self.parse')
    ] 
</snippet></ROW><ROW><id>15903143</id><snippet>checkbox[]</snippet></ROW><ROW><id>15903143</id><snippet>checkbox%5B%5D</snippet></ROW><ROW><id>15903378</id><snippet>str</snippet></ROW><ROW><id>15903378</id><snippet>str</snippet></ROW><ROW><id>15903378</id><snippet>print(firstname.value.decode("utf-8"))
</snippet></ROW><ROW><id>15903571</id><snippet>pages.models</snippet></ROW><ROW><id>15903571</id><snippet>shorturl.models.Link</snippet></ROW><ROW><id>15903571</id><snippet>shorturl.models</snippet></ROW><ROW><id>15903571</id><snippet>Content</snippet></ROW><ROW><id>15903571</id><snippet>pages.models</snippet></ROW><ROW><id>15903920</id><snippet>np.savez_compressed()</snippet></ROW><ROW><id>15903920</id><snippet>np.save()</snippet></ROW><ROW><id>15904260</id><snippet>list</snippet></ROW><ROW><id>15904260</id><snippet>list</snippet></ROW><ROW><id>15904260</id><snippet>def func1():
    my_list=[]
    """Do stuff
    """
    return list

def func2(my_list):
    """Do stuff with my_list
    """
    return

def func3(my_list):
    """Do stuff with my_list
    """
    return

def main():
    """First we retrieve the list from func1, 
    func2/3 get it passed to them as an argument
    """
    foo=func1
    func2(foo)
    func3(foo)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>15904277</id><snippet>edgecolor</snippet></ROW><ROW><id>15904277</id><snippet>"none"</snippet></ROW><ROW><id>15904277</id><snippet>bar(..., edgecolor = "none")</snippet></ROW><ROW><id>15904329</id><snippet>mag_list = [value for value in var_s[4::3] if value != 99.]
</snippet></ROW><ROW><id>15904329</id><snippet>var_s</snippet></ROW><ROW><id>15904329</id><snippet>itertools.islice(var_s,4,None,3)</snippet></ROW><ROW><id>15904329</id><snippet>vs = np.array(var_s[4::3],dtype=np.float64)  #could slice after array conversion too ...
med_mag = np.median(vs[vs!=99.])
</snippet></ROW><ROW><id>15904893</id><snippet>def example(somefunc):
  somefunc() 

example(someFunction)
example(lambda x: x ** 2)
</snippet></ROW><ROW><id>15904893</id><snippet>def example2():
  return lambda x: x + 1
</snippet></ROW><ROW><id>15904893</id><snippet>def example3():
  def rf(x):
    return x + 2
  return rf

myfunc = example3()
myfunc(2) #returns 4
</snippet></ROW><ROW><id>15905210</id><snippet>IN_MOVED_TO</snippet></ROW><ROW><id>15905210</id><snippet>mask = pyinotify.IN_CREATE | pyinotify.IN_MOVED_TO

class PTmp(pyinotify.ProcessEvent):
    ...
    def process_IN_MOVED_TO(self, event):
        print "Moved: %s " % os.path.join(event.path, event.name)
        event_log = open('/home/saad/Code/test/event_log', 'a')
        event_log.write(event.name + ' - ' + timestamp.strftime('%c') + '\n')
        event_log.close()
</snippet></ROW><ROW><id>15905326</id><snippet>len(f)</snippet></ROW><ROW><id>15905326</id><snippet>f</snippet></ROW><ROW><id>15905326</id><snippet>f</snippet></ROW><ROW><id>15905326</id><snippet>if f: alim = f[-1]
</snippet></ROW><ROW><id>15905326</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>15905326</id><snippet>!=</snippet></ROW><ROW><id>15905519</id><snippet>isinstance</snippet></ROW><ROW><id>15905519</id><snippet>isinstance(x, tuple)
</snippet></ROW><ROW><id>15905519</id><snippet>isinstance</snippet></ROW><ROW><id>15905519</id><snippet>type</snippet></ROW><ROW><id>15905519</id><snippet>def proc(arg):
    if isinstance(arg, tuple):
        # handle as tuple
    elif isinstance(arg, str):
        # handle as str
    else:
        # unhandled?
</snippet></ROW><ROW><id>15905540</id><snippet>Font::FreeType</snippet></ROW><ROW><id>15905540</id><snippet>use Font::FreeType;
Font::FreeType-&gt;new-&gt;face('DejaVuSans.ttf')-&gt;foreach_char(sub {
    printf("%04X\n", $_-&gt;char_code);
});
</snippet></ROW><ROW><id>15905932</id><snippet>def next_string(s):
    if len(s) == 0:
        return '1'
    head = s[0:-1]
    tail = s[-1]
    if tail == 'Z':
        return next_string(head) + '1'
    if tail == '9':
        return head+'A'
    if tail == 'H':
        return head+'J'
    if tail == 'N':
        return head+'P'
    return head + chr(ord(tail)+1)
</snippet></ROW><ROW><id>15905932</id><snippet>&gt;&gt;&gt; next_string('11A')
'11B'
&gt;&gt;&gt; next_string('11A')
'11B'
&gt;&gt;&gt; next_string('11Z')
'121'
&gt;&gt;&gt; next_string('119')
'11A'
&gt;&gt;&gt; next_string('1')
'2'
&gt;&gt;&gt; next_string('ZZ')
'111'
&gt;&gt;&gt; next_string('ZZ1')
'ZZ2'
&gt;&gt;&gt; next_string('ZZ9')
'ZZA'
&gt;&gt;&gt; next_string('ZZH')
'ZZJ'
</snippet></ROW><ROW><id>15906562</id><snippet>def replace2inplace(lst):
    lst[1::2], lst[::2] = lst[::2], lst[1::2]
</snippet></ROW><ROW><id>15906562</id><snippet>&gt;&gt;&gt; somelst = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; replace2inplace(somelst)
&gt;&gt;&gt; somelst
[2, 1, 4, 3, 6, 5]
</snippet></ROW><ROW><id>15906562</id><snippet>itertools</snippet></ROW><ROW><id>15906562</id><snippet>from itertools import izip, chain

def replace2copy(lst):
    lst1, lst2 = tee(iter(lst), 2)
    return list(chain.from_iterable(izip(lst[1::2], lst[::2])))
</snippet></ROW><ROW><id>15906562</id><snippet>&gt;&gt;&gt; replace2([1, 2, 3, 4, 5, 6])
[2, 1, 4, 3, 6, 5]
</snippet></ROW><ROW><id>15906562</id><snippet>list()</snippet></ROW><ROW><id>15906562</id><snippet>from itertools import izip, chain, islice, tee

def replace2gen(lst):
    lst1, lst2 = tee(iter(lst))
    return chain.from_iterable(izip(islice(lst1, 1, None, 2), islice(lst2, None, None, 2)))

for i in replace2gen([1, 2, 3, 4, 5, 6]):
    print i
</snippet></ROW><ROW><id>15906562</id><snippet>replace2gen()</snippet></ROW><ROW><id>15906722</id><snippet>#!/usr/bin/python

import sys
import random

if __name__ == "__main__":
    for line in sys.stdin:
        if random.random() &lt; 0.70:
            print line
</snippet></ROW><ROW><id>15906907</id><snippet>...
dw.writeheader()
dw.writerows(information)
</snippet></ROW><ROW><id>15906937</id><snippet>date_a = datetime.strptime('2013-04-15 14:00:00','%Y-%m-%d %H:%M:%S')
date_b = datetime.strptime('2013-04-15 14:02:05','%Y-%m-%d %H:%M:%S')

elapsed_time = date_b - date_a
</snippet></ROW><ROW><id>15906937</id><snippet>print elapsed_time.total_seconds()</snippet></ROW><ROW><id>15906937</id><snippet>elapsed_time</snippet></ROW><ROW><id>15906937</id><snippet>%Y-%m-%d %H:%M:%S</snippet></ROW><ROW><id>15906963</id><snippet> randints = np.random.binomial(1,p,(n,n))
</snippet></ROW><ROW><id>15906963</id><snippet>0</snippet></ROW><ROW><id>15906963</id><snippet>1</snippet></ROW><ROW><id>15906963</id><snippet> rand_true_false = randints == 1
</snippet></ROW><ROW><id>15906963</id><snippet>1</snippet></ROW><ROW><id>15906963</id><snippet>True</snippet></ROW><ROW><id>15906963</id><snippet>0</snippet></ROW><ROW><id>15906963</id><snippet>False</snippet></ROW><ROW><id>15907028</id><snippet>D={}
with open("file1.txt","rU") as f1:
    for line in f1:
        line=line.rstrip().rsplit("\t")
        if line[6]=="+" and line[2]=="start_codon":
            D[line[3]] = line[8].rstrip('"')[9]
            keys = D.keys()

count=[]
results=[]
number = 12
with open("file2.txt","rU") as f2:
    for line in f2:
        line=line.rstrip().rsplit("\t")
        if int(line[1]) &gt;= 70:
            count.append(line[1])
            if line[0] in D:
                results.append(D[line[0]])
                if len(count) &gt; number:
                    results.append(str(number))
                else:
                    results.append(str(len(count)-1))
                print "\t".join(results)
                count=[]

        else:
            count=[]
</snippet></ROW><ROW><id>15907232</id><snippet>writeheader()</snippet></ROW><ROW><id>15907232</id><snippet>with open(os.path.join(directory, 'csv.csv'), 'wb') as csvfile:
    writer = csv.DictWriter(csvfile, fieldnames = ["stuff1", "stuff2", "stuff3"], delimiter = ';')
    writer.writeheader()
</snippet></ROW><ROW><id>15907232</id><snippet>DictWriter()</snippet></ROW><ROW><id>15907592</id><snippet>__idiv__</snippet></ROW><ROW><id>15907592</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>15907592</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>15907592</id><snippet>__i*__</snippet></ROW><ROW><id>15907593</id><snippet>\s</snippet></ROW><ROW><id>15907593</id><snippet>[ ]</snippet></ROW><ROW><id>15907593</id><snippet>&gt;&gt;&gt; re.findall("^\s*xyxyxy[ ]+([a-z0-9]+).*$", text, re.MULTILINE)
[u'testmatch0', u'testmatch1', u'testmatch2', u'testmatch3']
</snippet></ROW><ROW><id>15907635</id><snippet>class Images(models.Model):
    job=models.OneToOneField('Jobs')
    image=models.ImageField()

class Jobs(models.Model):
    picture=models.ForeignKey(Images, null=True)
</snippet></ROW><ROW><id>15907704</id><snippet>band</snippet></ROW><ROW><id>15907704</id><snippet>p.communicate()</snippet></ROW><ROW><id>15907704</id><snippet>\n</snippet></ROW><ROW><id>15907704</id><snippet>select.select()</snippet></ROW><ROW><id>15908214</id><snippet>def check_col(self, rect):
for tilerect in self.collision_list:
    if rect.x + rect.w &gt; tilerect.x or rect.y + rect.h &gt; tilerect.y or rect.x &lt; tilerect.x + tilerect.w or rect.y &lt; tilerect.y + tilerect.h:
        return True
    else:
        return False
</snippet></ROW><ROW><id>15908214</id><snippet>def check_col(self, rect):
    for tilerect in self.collision_list:
        if ((rect.x + rect.w &gt; tilerect.x and rect.x &lt;= tilerect.x + tilerect.width) or
            (tilerect.x + tilerect.width &gt; rect.x and tilerect.x &lt;= rect.x + rect.width)) and
            ((rect.y + rect.h &gt; tilerect.y and rect.y &lt;= tilerect.y + tilerect.height) or
            (tilerect.y + tilerect.height &gt; rect.y and tilerect.y &lt;= rect.y + rect.height))

            return true
        else:
            return false
</snippet></ROW><ROW><id>15908242</id><snippet>pytz</snippet></ROW><ROW><id>15908242</id><snippet>normalize</snippet></ROW><ROW><id>15908242</id><snippet>localize</snippet></ROW><ROW><id>15908242</id><snippet>datetime</snippet></ROW><ROW><id>15908244</id><snippet>dosnames=['CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9']
final=''
string='th\xe8is i\xaas \xb2a te&gt;&lt;s\x0b\xe6t\xb0.\xb4'
for char in string:
  if not (char in '&lt;&gt;:"/\|?*'):
    if ord(char)&gt;31:
      final+=char
if final in dosnames:
  #oh dear...
  raise SystemError('final string is a DOS name!')
elif final.replace('.', '')=='':
  raise SystemError('final string is all periods!')
</snippet></ROW><ROW><id>15908244</id><snippet>print final</snippet></ROW><ROW><id>15908244</id><snippet>'this is a test.'</snippet></ROW><ROW><id>15908260</id><snippet>names</snippet></ROW><ROW><id>15908260</id><snippet>import pandas as pd

def value(item):
    return item[item.find('=')+1:]

df = pd.read_table('data.txt', header=None, delimiter=',',
                   converters={i:value for i in range(5)},
                   names='symbol exchange timestamp price quantity'.split())
print(df)
</snippet></ROW><ROW><id>15908260</id><snippet>  symbol exchange         timestamp    price quantity
0   ESM3   GLOBEX  1365428525690751  1548.00      551
1   ESM3   GLOBEX  1365428525697183  1548.00      551
2   ESM3   GLOBEX  1365428525714498  1548.00      551
3   ESM3   GLOBEX  1365428525734967  1548.00      551
4   ESM3   GLOBEX  1365428525735567  1548.00      555
5   ESM3   GLOBEX  1365428525735585  1548.00      556
6   ESM3   GLOBEX  1365428525736116  1548.00      556
7   ESM3   GLOBEX  1365428525740757  1548.00      556
8   ESM3   GLOBEX  1365428525748502  1548.00      556
9   ESM3   GLOBEX  1365428525748952  1548.00      557
</snippet></ROW><ROW><id>15908289</id><snippet>Device ID: ([0-9A-Za-z-.&amp;]+)\s+Entry address\(es\):\s+(?:IP address: ([0-9.]+)\s+)(?:IP address: ([0-9.]+)\s+)?(?:IP address: ([0-9.]+)\s+)?(?:IP address: ([0-9.]+)\s+)?
                                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
</snippet></ROW><ROW><id>15908289</id><snippet>$2</snippet></ROW><ROW><id>15908289</id><snippet>$3</snippet></ROW><ROW><id>15908289</id><snippet>$4</snippet></ROW><ROW><id>15908289</id><snippet>$5</snippet></ROW><ROW><id>15908289</id><snippet>$</snippet></ROW><ROW><id>15908289</id><snippet>$2</snippet></ROW><ROW><id>15908289</id><snippet>Device ID: ([0-9A-Za-z-.&amp;]+)\s+Entry address\(es\):\s+((?:IP address: (?:[0-9.]+)\s+)+)
                                                      ^                ^^             ^
</snippet></ROW><ROW><id>15908296</id><snippet>Usage:</snippet></ROW><ROW><id>15908296</id><snippet>Usage:</snippet></ROW><ROW><id>15908521</id><snippet>import turtle as t

def showTurtle():
    t.st()
    return

def getPos(x,y):
    print("(", x, "," ,y,")")
    return

def hideTurtle(x,y):
    t.ht()
    return

def main():
    t.speed(20)
    t.shapesize(1000,1000)
    t.up()
    t.goto(1000,0)
    t.ht()
    t.onkey(showTurtle,"a")
    t.listen()
    t.onclick(getPos)
    t.onrelease(hideTurtle)
    t.mainloop()
main()
</snippet></ROW><ROW><id>15908529</id><snippet>d[key]</snippet></ROW><ROW><id>15908529</id><snippet>[..]</snippet></ROW><ROW><id>15908529</id><snippet>d['USA'][1] += 1
d['CAN'][0] += 1
</snippet></ROW><ROW><id>15908529</id><snippet>sublist = d['USA']
sublist[1] += 1
sublist = d['CAN']
sublist[0] += 1
</snippet></ROW><ROW><id>15908623</id><snippet>fflush(stdout)</snippet></ROW><ROW><id>15908623</id><snippet>fprintf()</snippet></ROW><ROW><id>15908623</id><snippet>isatty(3)</snippet></ROW><ROW><id>15908623</id><snippet>setbuf(3)</snippet></ROW><ROW><id>15908623</id><snippet>readline</snippet></ROW><ROW><id>15908628</id><snippet>values.append(str(mydatasheet.cell(row,col).value))
</snippet></ROW><ROW><id>15908696</id><snippet>tr</snippet></ROW><ROW><id>15908696</id><snippet>row</snippet></ROW><ROW><id>15908696</id><snippet>row</snippet></ROW><ROW><id>15908696</id><snippet>for tr in table.findAll('tr')[2:]:
    col = tr.findAll('td')
</snippet></ROW><ROW><id>15908696</id><snippet>125/1,B 28D 1/00,B 28D 1/221,E 01C 23/081,B 28D 1/005,B 28D 1/06more...

125/2,B 23Q 35/10,B 22C 9/18,B 23B 5/162,B 23D 63/18,B 24B 53/07more...

125/3,B 28D 1/18,B 28D 1/003,B 28D 1/048,B 28D 1/181,B 24B 7/22more...
</snippet></ROW><ROW><id>15908698</id><snippet>$(python -c "import urllib, sys; print urllib.unquote(sys.argv[1])" "h%23g")
</snippet></ROW><ROW><id>15908698</id><snippet>h#g</snippet></ROW><ROW><id>15908698</id><snippet>h#g</snippet></ROW><ROW><id>15908698</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>15908698</id><snippet>-c</snippet></ROW><ROW><id>15908698</id><snippet>urllib.unquote('-c')</snippet></ROW><ROW><id>15908698</id><snippet>'-c'</snippet></ROW><ROW><id>15908698</id><snippet>sys.argv</snippet></ROW><ROW><id>15908698</id><snippet>-c</snippet></ROW><ROW><id>15908698</id><snippet>argv[0]</snippet></ROW><ROW><id>15908698</id><snippet>'-c'</snippet></ROW><ROW><id>15908698</id><snippet>-c</snippet></ROW><ROW><id>15908698</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>15908698</id><snippet>'-c'</snippet></ROW><ROW><id>15908698</id><snippet>-c</snippet></ROW><ROW><id>15908698</id><snippet>sys.argv</snippet></ROW><ROW><id>15908698</id><snippet>sys.argv</snippet></ROW><ROW><id>15908818</id><snippet>strategy = SelectField('strategy', session['strategy'])</snippet></ROW><ROW><id>15908818</id><snippet>Create_Indicator_Form</snippet></ROW><ROW><id>15908818</id><snippet>working outside of request context</snippet></ROW><ROW><id>15908818</id><snippet>def CreateIndicatorForm():

    class IndicatorForm(Form):
        security = TextField('Ticker Name', [
                             validators.Required(),
                             validators.Length(min=1, max=6)])
        mva_10 = BooleanField('10 day moving average')
        mva_25 = BooleanField('25 day moving average')
        strategy = SelectField('strategy', session['strategy'])
        def validate_mva_10(form, field):
            if form.mva_25.data is True and field.data is True:
                raise ValidationError('You can only choose one reference')
            if form.mva_25.data is False and field.data is False:
                raise ValidationError('You must choose at least one reference')

return IndicatorForm
</snippet></ROW><ROW><id>15908818</id><snippet>session['strategy']</snippet></ROW><ROW><id>15908894</id><snippet>results = ['N'] * 12  # prebuild results to all no

safety_courses = UserMonthlySafetyCurriculums.objects.filter(
                     users_id=id).order_by('month_assigned')

for course in safety_courses:
    results[course.month_assigned - 1] = 'Y'
</snippet></ROW><ROW><id>15908894</id><snippet>month_assigned</snippet></ROW><ROW><id>15909069</id><snippet>np.interp</snippet></ROW><ROW><id>15909069</id><snippet>f2 = np.interp(np.arange(0,31,.1), t, ft)
</snippet></ROW><ROW><id>15909315</id><snippet>dictionary = {'a':'n', 'b':'o', 'c':'p',
             'd':'q', 'e':'r', 'f':'s',
             'g':'t','h':'u','i':'v',
             'j':'w', 'k':'x','l':'y',
             'm':'z','n':'a','o':'b',
             'p':'c','q':'d','r':'e',
             's':'f','t':'g','u':'h',
             'v':'i', 'w':'j','x':'k',
             'y':'l','z':'m'}

def rot(xy):
    rot13 = ''
    for c in xy:
        if c.islower():
            rot13 += dictionary.get(c)
        if c.isupper():
            c = c.lower()
            rot13 += dictionary.get(c).capitalize()
        if c not in dictionary:
            rot13 += c
    print "ROTTED: ", rot13  
    return rot13
</snippet></ROW><ROW><id>15909400</id><snippet>IRC</snippet></ROW><ROW><id>15909400</id><snippet>on_connect</snippet></ROW><ROW><id>15909400</id><snippet>on_disconnect</snippet></ROW><ROW><id>15909400</id><snippet>on_schedule</snippet></ROW><ROW><id>15909400</id><snippet>QSocketNotifier</snippet></ROW><ROW><id>15909400</id><snippet>QTimer</snippet></ROW><ROW><id>15909400</id><snippet>class PySideIRCClient(IRC):
    def __init__(self):
        self.socket_notifiers = {}
        return IRC(self.on_connect, self.on_disconnect, self.on_schedule)

    def on_connect(self, socket):
        notifier = QtCore.QSocketNotifier(socket, QtCore.QSocketNotifier.Read)
        notifier.activated.connect(self.socket_activated)
        self.socket_notifiers[socket] = notifier

    def socket_activated(self, socket):
        self.process_data([socket])

    def on_disconnect(self, socket):
        self.socket_notifiers[socket].setEnabled(False)
        del self.socket_notifiers[socket]

    def on_schedule(self, seconds):
        QtCore.QTimer.singleShot(seconds * 1000, self.process_timeout)
</snippet></ROW><ROW><id>15909400</id><snippet>PySideIRCClient</snippet></ROW><ROW><id>15909400</id><snippet>QtGui.QApplication.exec_()</snippet></ROW><ROW><id>15909419</id><snippet>def display_info(name, info_list):
        for i in info_list:
            if i == name:
                print ' '.join(name)
                break
            else:
                print False
</snippet></ROW><ROW><id>15909419</id><snippet>name</snippet></ROW><ROW><id>15909419</id><snippet>name[0]</snippet></ROW><ROW><id>15909419</id><snippet>name[0]</snippet></ROW><ROW><id>15909419</id><snippet>i</snippet></ROW><ROW><id>15909748</id><snippet>ax = plt.gca()
ax.grid(True)
ax.plot(millionspins, millions, marker='+', color='b')
</snippet></ROW><ROW><id>15909748</id><snippet>plot</snippet></ROW><ROW><id>15909748</id><snippet>scatter</snippet></ROW><ROW><id>15909829</id><snippet>x=['#%d' % i for i in range(10)]
['Hey!' if i%3 == 0 else b for  i,b in enumerate(x)]
</snippet></ROW><ROW><id>15909871</id><snippet>try/except</snippet></ROW><ROW><id>15909871</id><snippet>if</snippet></ROW><ROW><id>15909871</id><snippet>if something:
   try:
       #make an error
       ;fdsfas
    except Exception, e:
        raise CustomException(e.message, file='somefile.txt', var2='something')
else:
    raise CustomException('this is my custom message', file='somefile.txt', var2='something')
</snippet></ROW><ROW><id>15909871</id><snippet>if/else</snippet></ROW><ROW><id>15909917</id><snippet>dict_data = {}
with open('data.txt') as f:
    for key in f:
        dict_data[key.strip()] = next(f).split()

print dict_data
</snippet></ROW><ROW><id>15909917</id><snippet>key.strip()</snippet></ROW><ROW><id>15909917</id><snippet>f.next()</snippet></ROW><ROW><id>15909917</id><snippet>f.next().split()</snippet></ROW><ROW><id>15909917</id><snippet>dict_data[key.strip()] = ...</snippet></ROW><ROW><id>15909917</id><snippet>dict_data['Tim'] = [ ... ]</snippet></ROW><ROW><id>15909917</id><snippet>f.next()</snippet></ROW><ROW><id>15909917</id><snippet>next(f)</snippet></ROW><ROW><id>15909917</id><snippet>        dict_data[key.strip()] = next(f).split()
</snippet></ROW><ROW><id>15909917</id><snippet>        dict_data[key.strip()] = [int(i) for i in next(f).split()]
</snippet></ROW><ROW><id>15909989</id><snippet>from scrapy.settings import Settings
</snippet></ROW><ROW><id>15910007</id><snippet>import csv, datetime

addresses = [
    {'address': {'value': '123 road', 'count': 1}, 'delete': False},
    {'address': {'value': '456 road', 'count': 1}, 'delete': False},
    {'address': {'value': '789 road', 'count': 1}, 'delete': False},

    {'address': {'value': '1 new road', 'count': 1}, 'delete': False},
]

now = datetime.datetime.now()

### create the csv
##with open('address.csv', 'wb') as csv_file:
##    writer = csv.writer(csv_file)
##    for row in addresses:
##        writer.writerow([ row['address']['value'], row['address']['count'], now.strftime('%Y-%m-%d %H:%M:%S') ])

# make lookup keys for the dict
address_lookup = {}
for i in range(len(addresses)):
    address_row = addresses[i]
    address_lookup[address_row['address']['value']] = i

# read csv once
with open('address.csv', 'rb') as csv_file:
    reader = csv.reader(csv_file)
    for row in reader:
        print row
        # if address is found in the dict, set delete flag to true
        if row[0] in address_lookup:
            print 'flagging address as old: %s' % row[0]
            addresses[ address_lookup[row[0]] ]['delete'] = True

with open('address.csv', 'ab') as csv_file:
    # go back through addresses and add any that shouldnt be deleted to the csv
    writer = csv.writer(csv_file)
    for address_row in addresses:
        if address_row['delete'] is False:
            print 'adding row: '
            print address_row
            #writer.writerow([  row['address']['value'], row['address']['count'], now.strftime('%Y-%m-%d %H:%M:%S') ])
</snippet></ROW><ROW><id>15910183</id><snippet>import ConfigParser
parser = ConfigParser.ConfigParser()

info = {"User1-votes":"36","User1-gamestart":"13232323","User2-votes":"36","User2-gamestart":"234234234","User3-votes":"36","User3-gamestart":"13232323"}

parser.add_section('User-Info')
for key in info.keys():
    parser.set('User-Info', key, info[key])

with open('config.ini', 'w') as f:
    parser.write(f)
</snippet></ROW><ROW><id>15910195</id><snippet>pylab.legend</snippet></ROW><ROW><id>15910195</id><snippet>pylab.legend(my_legend, ...)</snippet></ROW><ROW><id>15910195</id><snippet>for i in range(start, start + size*chunks):
    [...]
    label = " = ".join([self.dtypes[v1], "%.2f" %data[v1, slc1]])
    [...]
    pl.plot(jx, jy, "o", color = colorVal, label=label)
    pl.plot(lx, ly, color = colorVal)

[...]
pl.legend(loc = "upper left", shadow = True)
</snippet></ROW><ROW><id>15910195</id><snippet>label=label</snippet></ROW><ROW><id>15910195</id><snippet>mylines</snippet></ROW><ROW><id>15910195</id><snippet>mylegend</snippet></ROW><ROW><id>15910195</id><snippet>pl.legend(mylines, mylegend, ...)</snippet></ROW><ROW><id>15910354</id><snippet>grid</snippet></ROW><ROW><id>15910354</id><snippet>columnspan</snippet></ROW><ROW><id>15910354</id><snippet>bttn_0.grid(row = 5, column = 0, pady = 5, columnspan = 2)
</snippet></ROW><ROW><id>15910600</id><snippet>mysocket.setblocking(0)
ACK, address = mysocket.recvfrom(1024)
</snippet></ROW><ROW><id>15910600</id><snippet>import socket

mysocket = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
mysocket.settimeout(0.5)
dest = ('127.0.0.01', 88)

user_input = raw_input()

while user_input:
    mysocket.sendto(user_input, dest)     
    acknowledged = False
    # spam dest until they acknowledge me (sounds like my kids)
    while not acknowledged:
        try:
            ACK, address = mysocket.recvfrom(1024)
            acknowledged = True
        except socket.timeout:
            mysocket.sendto(user_input, dest)
    print ACK
    user_input = raw_input()

mysocket.close()
</snippet></ROW><ROW><id>15910735</id><snippet>range()</snippet></ROW><ROW><id>15910735</id><snippet>len()</snippet></ROW><ROW><id>15910735</id><snippet>x</snippet></ROW><ROW><id>15910735</id><snippet>[0:len(x)]</snippet></ROW><ROW><id>15910735</id><snippet>x[-1]</snippet></ROW><ROW><id>15910735</id><snippet>x[len(x)-1]</snippet></ROW><ROW><id>15910889</id><snippet>import shlex
import subprocess
proc = subprocess.Popen(shlex.split('sudo insteon on 23'))
proc.communicate()
</snippet></ROW><ROW><id>15911083</id><snippet>multiprocessing.dummy</snippet></ROW><ROW><id>15911083</id><snippet>threading</snippet></ROW><ROW><id>15911083</id><snippet>threading</snippet></ROW><ROW><id>15911083</id><snippet>SIGUSR1</snippet></ROW><ROW><id>15911083</id><snippet>import os
import signal
import threading
from pipes import quote

class MPlayer(object):

    def __init__(self):
        self.process = Process(['mplayer',
            '-slave', '-idle',
            '-really-quiet', '-msglevel', 'global=6:cplayer=4', '-msgmodule',
            '-input', 'nodefault-bindings',
            '-cache', '1024',
        ], bufsize=1)
        self.write_lock = threading.Lock()

    # (...)

    def load(self, path):

        with self.write_lock:
            self.p.write('loadfile {}\n'.format(quote(path)))

        def wait_for_finish(process):
            # HERE: poll process for track ending with process.read()
            os.kill(os.getpid(), signal.SIGUSR1)

        t = threading.Thread(target=wait_for_finish, args=(self.process,))
        t.daemon = True
        t.start()
</snippet></ROW><ROW><id>15911083</id><snippet>import cmd
import signal
from player import MPlayer

class PlayCommand(cmd.Cmd, object):

    def __init__(self, *args, **kwargs):

        # (...)

        self.p = MPlayer()
        signal.signal(signal.SIGUSR1, self._song_end_handler)

    def _song_end_handler(self, signum, frame):
        print('SIGUSR1!!!!!!!!!!111!1')
        # HERE: Fetch new track URL
        self.p.load()
</snippet></ROW><ROW><id>15911124</id><snippet>no_dupes = set()

for row in reader:
    type, year = row[0], row[1]
    values_list = row[2:]

    for index, value in enumerate(values_list, start=1):
        line = (type, year, index, value)
        no_dupes.add(line)

for t in no_dupes:
    writer.writerow(t)
</snippet></ROW><ROW><id>15911145</id><snippet>if</snippet></ROW><ROW><id>15911145</id><snippet>'BATCH' in sample</snippet></ROW><ROW><id>15911145</id><snippet>for</snippet></ROW><ROW><id>15911145</id><snippet>while True</snippet></ROW><ROW><id>15911145</id><snippet>def get_batches(data):
    textblocks = (txt for txt in data.split('\n\n') if txt.strip())
    batch = [next(textblocks)]
    for sample in textblocks:
        if 'BATCH' in sample:
            yield batch
            batch = []
        batch.append(sample)
    yield batch
</snippet></ROW><ROW><id>15911145</id><snippet>batch</snippet></ROW><ROW><id>15911145</id><snippet>batch</snippet></ROW><ROW><id>15911145</id><snippet>data</snippet></ROW><ROW><id>15911145</id><snippet>batch</snippet></ROW><ROW><id>15911145</id><snippet>StopIteration</snippet></ROW><ROW><id>15911185</id><snippet>import os, sys

# No other fds have been opened, so the lowest available are used (3, 4)
read, write = os.pipe()

# We want the child to write into fd#3, but right now that's the read
# end of the pipe, so do a little switching around:
temp = os.dup(read)
os.dup2(write, read)
os.dup2(temp, write)
os.close(temp)
read, write = write, read # swap actual values to avoid confusion

pid = os.fork()
if pid == 0: # child
   os.close(read)
   try:
       os.execl('/bin/bash', 'bash', '-c', 'echo testing...&gt;&amp;3')
   except OSError:
       sys.exit(1)
else: # parent
   os.close(write)
   progress = os.fdopen(read)
   print progress.read()
   os.wait()
</snippet></ROW><ROW><id>15911185</id><snippet>bash</snippet></ROW><ROW><id>15911185</id><snippet>subprocess</snippet></ROW><ROW><id>15911185</id><snippet>FD_CLOEXEC</snippet></ROW><ROW><id>15911221</id><snippet>grep -E "[0-9]+ (month|year|day|week)s? ago" a.txt| grep -Eo "^[a-zA-Z0-9]+"
</snippet></ROW><ROW><id>15911270</id><snippet>from random import sample

def mutate(s, num, target):
    change_locs = set(sample(range(len(s)), num))
    changed = (target if i in change_locs else c for i,c in enumerate(s))
    return ''.join(changed)
</snippet></ROW><ROW><id>15911270</id><snippet>&gt;&gt;&gt; mutate('ABC', 2, 'M')
'MMC'
&gt;&gt;&gt; mutate('ABC', 2, 'M')
'AMM'
&gt;&gt;&gt; mutate('ABC', 2, 'M')
'MMC'
&gt;&gt;&gt; mutate('ABC', 2, 'M')
'MBM'
</snippet></ROW><ROW><id>15911270</id><snippet>def mutate(s, num, target):
    change_locs = sample(range(len(s)), num)
    new_s = list(s)
    for change_loc in change_locs:
        new_s[change_loc] = target
    return ''.join(new_s)
</snippet></ROW><ROW><id>15911302</id><snippet>mmap</snippet></ROW><ROW><id>15911302</id><snippet>ctypes</snippet></ROW><ROW><id>15911302</id><snippet>class Entry(ctypes.Structure):
    _fields_ = [("x", ctypes.c_uint8), ("y", ctypes.c_uint8),
                ("i", ctypes.c_uint8), ("j", ctypes.c_uint8), ("k", ctypes.c_uint8)]
Entries = ctypes.POINTER(Entry)
with open(fname, 'wb') as f:
    f.truncate(ctypes.sizeof(Entry * (yn - y0)))
    m = mmap.mmap(f.fileno(), access=mmap.ACCESS_WRITE)
</snippet></ROW><ROW><id>15911302</id><snippet>struct</snippet></ROW><ROW><id>15911302</id><snippet>print &gt;&gt;f, x, y, 8*i, 0, 0
</snippet></ROW><ROW><id>15911302</id><snippet>f.write(struct.pack('BBBBB', x, y, 8*i, 0, 0))
</snippet></ROW><ROW><id>15911302</id><snippet>x, y, i8, 0, 0 = struct.unpack('BBBBB', f.read(struct.calcsize('BBBBB')))
i = i8//8
</snippet></ROW><ROW><id>15911302</id><snippet>x</snippet></ROW><ROW><id>15911302</id><snippet>y</snippet></ROW><ROW><id>15911302</id><snippet>f.write(struct.pack('&gt;hhBBB', x, y, 8*i, 0, 0))
</snippet></ROW><ROW><id>15911302</id><snippet>mmap</snippet></ROW><ROW><id>15911302</id><snippet>struct.pack_into</snippet></ROW><ROW><id>15911302</id><snippet>struct.unpack_from</snippet></ROW><ROW><id>15911302</id><snippet>pack</snippet></ROW><ROW><id>15911302</id><snippet>write</snippet></ROW><ROW><id>15911302</id><snippet>unpack</snippet></ROW><ROW><id>15911302</id><snippet>read</snippet></ROW><ROW><id>15911302</id><snippet>pickle</snippet></ROW><ROW><id>15911302</id><snippet>pickle.dump</snippet></ROW><ROW><id>15911302</id><snippet>pickle.dumps</snippet></ROW><ROW><id>15911302</id><snippet>shelve</snippet></ROW><ROW><id>15911302</id><snippet>str</snippet></ROW><ROW><id>15911331</id><snippet>ZODB.DB</snippet></ROW><ROW><id>15911331</id><snippet>class Example(tornado.web.RequestHandler):
    def get(self):
        connection = some_connection_pool.get_connection()
        with transaction.manager:
            root = conn.root()
            res = fn(root)
            root._p_changed = 1
</snippet></ROW><ROW><id>15911331</id><snippet>transaction.manager</snippet></ROW><ROW><id>15911331</id><snippet>from contextlib import contextmanager

@contextmanager
def zodbconn(db):
    conn = db.open()
    yield conn.root()
    conn.close()
</snippet></ROW><ROW><id>15911331</id><snippet>class Example(tornado.web.RequestHandler):
    def get(self):
        with zodbconn(db) as root, transaction.manager:
            res = fn(root)
            root._p_changed = 1
</snippet></ROW><ROW><id>15911521</id><snippet>highlightc = np.ones([N, N])
for x, y in hl:
    highlightc[x, y] = .21 ##set so binary matrix knows where to plot
h=ax.imshow(highlightc*colour), interpolation='nearest',cmap=plt.cm.spectral_r, vmin=0, mvax=1)
fig.canvas.draw()
</snippet></ROW><ROW><id>15911521</id><snippet>highlgihtc</snippet></ROW><ROW><id>15911521</id><snippet>1</snippet></ROW><ROW><id>15911521</id><snippet>0.21</snippet></ROW><ROW><id>15911709</id><snippet>try:
   #Some code
   ...
except xml.parsers.expat.ExpatError, ex:
   print ex
   continue
</snippet></ROW><ROW><id>15911709</id><snippet>continue</snippet></ROW><ROW><id>15911720</id><snippet>    self.yPos = self.xPos - 59
</snippet></ROW><ROW><id>15911720</id><snippet>self.xPos</snippet></ROW><ROW><id>15911720</id><snippet>self.yPos</snippet></ROW><ROW><id>15911720</id><snippet>time.sleep</snippet></ROW><ROW><id>15911720</id><snippet>time.sleep</snippet></ROW><ROW><id>15911720</id><snippet>delete</snippet></ROW><ROW><id>15911720</id><snippet>move</snippet></ROW><ROW><id>15911720</id><snippet>move</snippet></ROW><ROW><id>15911720</id><snippet>update</snippet></ROW><ROW><id>15911720</id><snippet>update</snippet></ROW><ROW><id>15911720</id><snippet>update</snippet></ROW><ROW><id>15911720</id><snippet>while True</snippet></ROW><ROW><id>15911720</id><snippet>def draw_one_frame():
    &lt;do whatever you need to do to move each item once&gt;
    root.after(500, self.draw_one_frame)
</snippet></ROW><ROW><id>15911720</id><snippet>def start():
    running = True
    draw_one_frame()
def stop():
    running = False
def draw_one_frame():
    if running:
        &lt;do whatever...&gt;
        root.after(500, self.draw_one_frame)
</snippet></ROW><ROW><id>15911805</id><snippet>def addEggs(func):
    func.eggs = "foobar"
    return func

@addEggs
def spam():
    pass

&gt;&gt;&gt; spam.eggs
'foobar'
</snippet></ROW><ROW><id>15911805</id><snippet>def addAttr(attr, value):
    def deco(func):
        setattr(func, attr, value)
        return func
    return deco

@addAttr('attrName', 'value')
def spam():
    pass

&gt;&gt;&gt; spam.attrName
'value'
</snippet></ROW><ROW><id>15912917</id><snippet>pip</snippet></ROW><ROW><id>15912917</id><snippet>pip install --user Foo
</snippet></ROW><ROW><id>15912917</id><snippet>easy_install</snippet></ROW><ROW><id>15912917</id><snippet>distribute</snippet></ROW><ROW><id>15912917</id><snippet>setuptools</snippet></ROW><ROW><id>15912917</id><snippet>--user</snippet></ROW><ROW><id>15912917</id><snippet>pip</snippet></ROW><ROW><id>15912917</id><snippet>setuptools</snippet></ROW><ROW><id>15912917</id><snippet>distribute</snippet></ROW><ROW><id>15912917</id><snippet>easy_install</snippet></ROW><ROW><id>15912917</id><snippet>pip</snippet></ROW><ROW><id>15912917</id><snippet>virtualenv</snippet></ROW><ROW><id>15912917</id><snippet>pip</snippet></ROW><ROW><id>15912917</id><snippet>virtualenv</snippet></ROW><ROW><id>15913056</id><snippet>n = input("insert a number: ")
r = 1
while (r * r &lt;= n):
        r = r + 1

print  "the result is:", r -1
</snippet></ROW><ROW><id>15913265</id><snippet>attack</snippet></ROW><ROW><id>15913265</id><snippet>BattleEngine</snippet></ROW><ROW><id>15913265</id><snippet>self</snippet></ROW><ROW><id>15913265</id><snippet>battle = BattleEngine()
if decision == "fight":
    player_wins = battle.attack(Player.strength, 3)
</snippet></ROW><ROW><id>15913265</id><snippet>.attack()</snippet></ROW><ROW><id>15913265</id><snippet>.outwit()</snippet></ROW><ROW><id>15913265</id><snippet>elif decision == "wit":
    player_wins = battle.outwit(Player.wit, 3)    
</snippet></ROW><ROW><id>15913265</id><snippet>.attack()</snippet></ROW><ROW><id>15913265</id><snippet>.outwit()</snippet></ROW><ROW><id>15913265</id><snippet>return player_wins</snippet></ROW><ROW><id>15913265</id><snippet>return 'death'</snippet></ROW><ROW><id>15913265</id><snippet>True</snippet></ROW><ROW><id>15913265</id><snippet>False</snippet></ROW><ROW><id>15913265</id><snippet>self</snippet></ROW><ROW><id>15913265</id><snippet>BattleEngine</snippet></ROW><ROW><id>15913265</id><snippet>BattleEngine()</snippet></ROW><ROW><id>15913265</id><snippet>self</snippet></ROW><ROW><id>15913523</id><snippet>with open('tmp.bin_hex', 'rb') as fin, open(bin_output, 'w') as fout:
</snippet></ROW><ROW><id>15913523</id><snippet>with open('tmp.bin_hex', 'r') as fin, open(bin_output, 'wb') as fout:
</snippet></ROW><ROW><id>15913646</id><snippet>&gt;&gt;&gt; from django.forms import forms
&gt;&gt;&gt; forms.__file__
'…/django/forms/forms.pyc'
</snippet></ROW><ROW><id>15913681</id><snippet>&lt;&lt;ListboxSelect&gt;&gt;</snippet></ROW><ROW><id>15913707</id><snippet>loadtxt</snippet></ROW><ROW><id>15913707</id><snippet>skiprows=2</snippet></ROW><ROW><id>15913707</id><snippet>delimiter=' '</snippet></ROW><ROW><id>15913707</id><snippet>dtype=string</snippet></ROW><ROW><id>15913707</id><snippet>dtype=object</snippet></ROW><ROW><id>15913707</id><snippet>a = numpy.loadtxt("ephemeris.txt", delimiter=' ', dtype=string, skiprows=2)
</snippet></ROW><ROW><id>15913707</id><snippet>x,y,z,etc = numpy.hsplit(a, a.shape[1])
x = x.astype(datetime)

# or
x = a[:,0].astype(datetime)
y = a[:,1].astype(some_type)
</snippet></ROW><ROW><id>15913821</id><snippet># i and j are the indices for the node whose neighbors you want to find
def find_neighbors(m, i, j, dist=1):
    return [row[max(0, j-dist):j+dist+1] for row in m[max(0, i-1):i+dist+1]]
</snippet></ROW><ROW><id>15913821</id><snippet>m = create_matrix(file)
i = some_y_location
j = some_x_location
neighbors = find_neighbors(m, i, j)
</snippet></ROW><ROW><id>15913821</id><snippet>def find_neighbors(m, i, j, dist=1):
    neighbors = []
    i_min = max(0, i-dist)
    i_max = i+dist+1
    j_low = max(0, j-dist)
    j_max = j+dist+1
    for row in m[i_min:i_max]:
        neighbors.append(row[j_min:j_max])
    return neighbors
</snippet></ROW><ROW><id>15913821</id><snippet>neighbors = [elem for nlist in neighbors for elem in nlist]
</snippet></ROW><ROW><id>15913821</id><snippet>def find_neighbor_indices(m, i, j, dist=1):
    irange = range(max(0, i-dist), min(len(m), i+dist+1))
    if len(m) &gt; 0:
        jrange = range(max(0, j-dist), min(len(m[0]), j+dist+1))
    else:
        jrange = []
    for icheck in irange:
        for jcheck in jrange:
            # Skip when i==icheck and j==jcheck
            if icheck != i or jcheck != j:
                neighbors.append((icheck, jcheck))
    return neighbors
</snippet></ROW><ROW><id>15913834</id><snippet>Field</snippet></ROW><ROW><id>15913834</id><snippet>to_python</snippet></ROW><ROW><id>15913834</id><snippet>FIELD_PYTHON_TYPES = {
    'AutoField': int,
    'BooleanField': bool,
    'CharField': unicode,
    'DateField': datetime.date,
    'DateTimeField': datetime.datetime,
    'DecimalField': decimal.Decimal,
    'FloatField': float,
    'IntegerField': int,
    'BigIntegerField': int,
     ... # etc.
}
</snippet></ROW><ROW><id>15913834</id><snippet>get_internal_type</snippet></ROW><ROW><id>15913834</id><snippet>for field in MyModel._meta.fields:
    FIELD_PYTHON_TYPES[field.get_internal_type()]
</snippet></ROW><ROW><id>15913834</id><snippet>NullBooleanField</snippet></ROW><ROW><id>15913834</id><snippet>bool</snippet></ROW><ROW><id>15913834</id><snippet>NoneType</snippet></ROW><ROW><id>15913865</id><snippet>def create_pyramid(rows):
    for i in range(rows):
        print('Y' * ( i + 1))

create_pyramid(6)
</snippet></ROW><ROW><id>15913865</id><snippet>Y</snippet></ROW><ROW><id>15913865</id><snippet>'Y' * i</snippet></ROW><ROW><id>15913865</id><snippet>+ 1</snippet></ROW><ROW><id>15913865</id><snippet>i</snippet></ROW><ROW><id>15913865</id><snippet>Y</snippet></ROW><ROW><id>15913865</id><snippet>Y
YY
YYY
YYYY
YYYYY
</snippet></ROW><ROW><id>15913900</id><snippet>celery.execute.send_task("task.fqn", args=[], kwargs={})
</snippet></ROW><ROW><id>15914073</id><snippet>if 35**2 &lt;= (i**2+j**2) &lt;= 65**2:
</snippet></ROW><ROW><id>15914073</id><snippet>randint</snippet></ROW><ROW><id>15914073</id><snippet>(-50, 50)</snippet></ROW><ROW><id>15914073</id><snippet>(0, 100)</snippet></ROW><ROW><id>15914086</id><snippet>fsolve</snippet></ROW><ROW><id>15914086</id><snippet>from scipy.optimize import fsolve
import numpy as np

def f(r):
    return 0.1 + 1 / (2 * r ** 2) - 2 / (3 * np.sqrt(r ** 3))

r = fsolve(f, 1)
f(r)
</snippet></ROW><ROW><id>15914086</id><snippet>r = 2.22213541
</snippet></ROW><ROW><id>15914086</id><snippet>import numpy as np

def f(r):
    return 0.1 + 1 / (2 * r ** 2) - 2 / (3 * np.sqrt(r ** 3))

r = np.linspace(0.6, 3, 1000)
plot(r, f(r))
</snippet></ROW><ROW><id>15914162</id><snippet>connect</snippet></ROW><ROW><id>15914162</id><snippet>.boto</snippet></ROW><ROW><id>15914162</id><snippet>run_instance</snippet></ROW><ROW><id>15914162</id><snippet>instance = conn.run_instances( ami.ami_id, key_name=ami.sshkey.name,
     instance_type=server.game.instance_type,
     security_groups=[server.game.security_group] )
instance = instance.instances[0]

while instance.update() == "pending":
    time.sleep( 5 )
</snippet></ROW><ROW><id>15914162</id><snippet>running</snippet></ROW><ROW><id>15914162</id><snippet>with settings( host_string="ec2-user@%s" % instance.ip_address,
    key_filename=os.path.join( os.getenv( "HOME" ), 
    ".ssh", "%s.pem" % ami.sshkey.name ),
    connection_attempts=5, timeout=60 ):

    ...
    sudo( "yum -y install mysql mysql-devel" )
    ...
</snippet></ROW><ROW><id>15914233</id><snippet>+</snippet></ROW><ROW><id>15914233</id><snippet>def validate(password):
    match = re.match('^[a-z0-9_-]+$', password, re.I)
    if match is not None:
        return password
    else:
        raise ValueError
</snippet></ROW><ROW><id>15914445</id><snippet>Checksum(Header)</snippet></ROW><ROW><id>15914445</id><snippet>x = ( ~( x % 0x10000 ) ) + 1
</snippet></ROW><ROW><id>15914445</id><snippet>x = (( ~( x % 0x10000 ) ) + 1) % 0x10000
</snippet></ROW><ROW><id>15914445</id><snippet>~</snippet></ROW><ROW><id>15914445</id><snippet>~x</snippet></ROW><ROW><id>15914445</id><snippet>x</snippet></ROW><ROW><id>15914445</id><snippet>Checksum(Header)</snippet></ROW><ROW><id>15914445</id><snippet>sprintf(buf, "%04hx", -0x08fb)</snippet></ROW><ROW><id>15914445</id><snippet>f705</snippet></ROW><ROW><id>15914445</id><snippet>"%04hx" % -0x08fb</snippet></ROW><ROW><id>15914445</id><snippet>-8fb</snippet></ROW><ROW><id>15914445</id><snippet>hex(-0x08fb)</snippet></ROW><ROW><id>15914445</id><snippet>-0x8fb</snippet></ROW><ROW><id>15914445</id><snippet>split</snippet></ROW><ROW><id>15914445</id><snippet>x</snippet></ROW><ROW><id>15914445</id><snippet>8fb</snippet></ROW><ROW><id>15914445</id><snippet>zfill</snippet></ROW><ROW><id>15914445</id><snippet>08fb</snippet></ROW><ROW><id>15914445</id><snippet>% 0x10000</snippet></ROW><ROW><id>15914445</id><snippet>"%04hx" % (-0x08fb % 0x10000)</snippet></ROW><ROW><id>15914445</id><snippet>f705</snippet></ROW><ROW><id>15914455</id><snippet>print</snippet></ROW><ROW><id>15914455</id><snippet>repo</snippet></ROW><ROW><id>15914455</id><snippet>python</snippet></ROW><ROW><id>15914455</id><snippet>python2</snippet></ROW><ROW><id>15914455</id><snippet>python2 `which repo`
</snippet></ROW><ROW><id>15914455</id><snippet>python2</snippet></ROW><ROW><id>15914455</id><snippet>Python 3.2.3 (default, Nov  7 2012, 19:36:04) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; b'asd'.startswith('asd')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: startswith first arg must be bytes or a tuple of bytes, not str
</snippet></ROW><ROW><id>15914455</id><snippet>_CheckGitVersion()</snippet></ROW><ROW><id>15914455</id><snippet>def _CheckGitVersion():
  cmd = [GIT, '--version']
  try:
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)

   ...

  ver_str = proc.stdout.read().strip()
  proc.stdout.close()
  proc.wait()

  if not ver_str.startswith('git version '):
</snippet></ROW><ROW><id>15914455</id><snippet>read</snippet></ROW><ROW><id>15914455</id><snippet>stdout</snippet></ROW><ROW><id>15914455</id><snippet>Popen</snippet></ROW><ROW><id>15914455</id><snippet>bytes</snippet></ROW><ROW><id>15914455</id><snippet>startswith</snippet></ROW><ROW><id>15914455</id><snippet>bytes</snippet></ROW><ROW><id>15914455</id><snippet>str</snippet></ROW><ROW><id>15914459</id><snippet>rhinoscriptsyntax.CurveLength</snippet></ROW><ROW><id>15914459</id><snippet>AddLine</snippet></ROW><ROW><id>15914459</id><snippet>CurveLength</snippet></ROW><ROW><id>15914459</id><snippet>rs.CurveLength(ln)
</snippet></ROW><ROW><id>15914505</id><snippet>url_for</snippet></ROW><ROW><id>15914505</id><snippet>@app.route('/&lt;username&gt;/&lt;postname&gt;', methods=['GET'])
def view_user_post(username, postname):
    ...
</snippet></ROW><ROW><id>15914505</id><snippet>{{ url_for('view_user_post', username=user.name, postname=post.name) }}
</snippet></ROW><ROW><id>15914544</id><snippet>In [45]: lis=[(0, 1), (1, 0), (1, 1)]

In [46]: for i,j in lis:
   ....:     print i,j
   ....:     
0 1
1 0
1 1
</snippet></ROW><ROW><id>15914646</id><snippet>users</snippet></ROW><ROW><id>15914646</id><snippet>users</snippet></ROW><ROW><id>15914646</id><snippet>TaskSearchCriteria</snippet></ROW><ROW><id>15914646</id><snippet>get_param_dict</snippet></ROW><ROW><id>15914646</id><snippet>def get_param_dict(self, users=[]):
    retval = dict()

    # ...

    # retreive users from the m2m relation
    if self.pk:
        ids = [user_id[0] for user_id in self.users.all().values_list('pk')]
        if ids:
            retval["users__in"] = ids

    # when model is not saved - get user ids from the parameter
    else:
        if users:
            retval["users__in"] = users

    return retval
</snippet></ROW><ROW><id>15914855</id><snippet>self.classname = sys._getframe(1).f_code.co_name
</snippet></ROW><ROW><id>15914855</id><snippet>code</snippet></ROW><ROW><id>15914855</id><snippet>f_locals['__module__']</snippet></ROW><ROW><id>15914855</id><snippet>def class_deco(cls):
    for name, method in inspect.getmembers(cls, callable):
        if hasattr(method, 'class_fixup'):
            method.class_fixup(cls)
    return cls
</snippet></ROW><ROW><id>15914855</id><snippet>f.class_fixup = fixup</snippet></ROW><ROW><id>15914855</id><snippet>return f</snippet></ROW><ROW><id>15914890</id><snippet>'xml'</snippet></ROW><ROW><id>15914890</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>15914890</id><snippet>soup = BeautifulSoup(your_xml, 'xml')
</snippet></ROW><ROW><id>15915121</id><snippet>if grid[player.x][player.y] == some_collidable_thing:
    # there was a collision
</snippet></ROW><ROW><id>15915121</id><snippet>def check_col(self, rect):
    for row in self.cLayer:
        for column in row:
            grid_position = (row*element_size, column*element_width)
            collide_x = False
            collide_y = False

            # check x axis for collision
            if self.rect.x + self.rect.w &gt; grid_position[0]:
                collide_x = True
            elif self.rect.x &lt; grid_position[0] + element_width:
                collide_x = True

            # check y axis for collision
            if self.rect.y &lt; grid_position[1] + element_height:
                collide_y = True
            elif self.rect.y + self.rect.h &gt; grid_position[1]:
                collide_y = True

            # act on a collision on both axis
            if collide_x and collide_y:
                # act on the collision
                return True
            else:
                # act on no collision
                return False
</snippet></ROW><ROW><id>15915208</id><snippet>pip</snippet></ROW><ROW><id>15915208</id><snippet>git+https://path/to/repo.git</snippet></ROW><ROW><id>15915208</id><snippet>setuptools</snippet></ROW><ROW><id>15915208</id><snippet>setup.py</snippet></ROW><ROW><id>15915208</id><snippet>setuptools</snippet></ROW><ROW><id>15915208</id><snippet>pip</snippet></ROW><ROW><id>15915208</id><snippet>setuptools</snippet></ROW><ROW><id>15915208</id><snippet>dependency_links</snippet></ROW><ROW><id>15915208</id><snippet>depencency_links</snippet></ROW><ROW><id>15915208</id><snippet>dependency_links=["https://bitbucket.org/myuser/project-two/get/master.zip#egg=project-two"]
</snippet></ROW><ROW><id>15915283</id><snippet>lists = []

for dirpath, dirnames, filenames in os.walk(...):
    lists.append(...)
</snippet></ROW><ROW><id>15915393</id><snippet>pip</snippet></ROW><ROW><id>15915393</id><snippet>python setup.py egg_info</snippet></ROW><ROW><id>15915393</id><snippet>numpy</snippet></ROW><ROW><id>15915393</id><snippet>matplotlib</snippet></ROW><ROW><id>15915393</id><snippet>matplotlib</snippet></ROW><ROW><id>15915477</id><snippet>500.html</snippet></ROW><ROW><id>15915477</id><snippet>500.html</snippet></ROW><ROW><id>15915523</id><snippet>ep</snippet></ROW><ROW><id>15915523</id><snippet>numpy</snippet></ROW><ROW><id>15915523</id><snippet>numpy.where</snippet></ROW><ROW><id>15915523</id><snippet>numpy.nonzero</snippet></ROW><ROW><id>15915523</id><snippet>ep</snippet></ROW><ROW><id>15915523</id><snippet>pseudo_ep = (np.random.rand(512,512) &gt; 0.9)
rows,cols = np.where(pseudo_ep)
</snippet></ROW><ROW><id>15915560</id><snippet>'Content-type'</snippet></ROW><ROW><id>15915560</id><snippet>'POST': '/o/oauth2/token HTTP/1.1'</snippet></ROW><ROW><id>15915560</id><snippet>'HOST:': 'accounts.google.com'</snippet></ROW><ROW><id>15915560</id><snippet>h = Http()
post_data = {'client_id':ClientID,
             'client_secret':ClientSecret,
             'refresh_token':SavedRefreshToken,
             'grant_type':'refresh_token'}

headers = {'Content-type': 'application/x-www-form-urlencoded'}

resp, content = h.request("https://accounts.google.com/o/oauth2/token", 
                          "POST", 
                          urlencode(post_data),
                          headers=headers)

print content
</snippet></ROW><ROW><id>15915560</id><snippet>{
  "access_token" : "ya29.AHBS6ZCtS8mBc_vEC9FFBkW2x3ipa7FLOs-Hi-3UhVkpacOm",
  "token_type" : "Bearer",
  "expires_in" : 3600
}
</snippet></ROW><ROW><id>15915689</id><snippet>&lt;link href="styles/bootstrap.css" rel="stylesheet"&gt;
</snippet></ROW><ROW><id>15915689</id><snippet>&lt;link href="/styles/bootstrap.css" rel="stylesheet"&gt;
</snippet></ROW><ROW><id>15915689</id><snippet>href</snippet></ROW><ROW><id>15915689</id><snippet>src</snippet></ROW><ROW><id>15915689</id><snippet>href</snippet></ROW><ROW><id>15915936</id><snippet>pygame.key.set_repeat(50, 50)
</snippet></ROW><ROW><id>15915936</id><snippet>set_repeat()</snippet></ROW><ROW><id>15916624</id><snippet>pyplot</snippet></ROW><ROW><id>15916624</id><snippet>figure</snippet></ROW><ROW><id>15916624</id><snippet>axes</snippet></ROW><ROW><id>15916624</id><snippet>artists</snippet></ROW><ROW><id>15916624</id><snippet>axis</snippet></ROW><ROW><id>15916760</id><snippet>25</snippet></ROW><ROW><id>15916760</id><snippet>numpy</snippet></ROW><ROW><id>15916760</id><snippet>0.37</snippet></ROW><ROW><id>15916760</id><snippet>import numpy as np

a_in = np.memmap('foreman_cif.yuv', mode='readonly')
a_out = np.memmap('py_10bpp.yuv', mode='write', shape=2*len(a_in))
a_out[::2] = a_in &lt;&lt; 2
a_out[1::2] = a_in &gt;&gt; 6
</snippet></ROW><ROW><id>15916760</id><snippet>cython</snippet></ROW><ROW><id>15916760</id><snippet>0.20</snippet></ROW><ROW><id>15916760</id><snippet>from functools import partial

import pyximport; pyximport.install() # pip install cython
from bpp8to10 import convert # bpp8to10.pyx

f_in = 'foreman_cif.yuv'
f_out = 'py_10bpp.yuv'

def main():
    with open(f_in, 'rb') as fd_in, open(f_out, 'wb') as fd_out:
        for chunk in iter(partial(fd_in.read, 8192), b''):
            fd_out.write(convert(chunk))
main()
</snippet></ROW><ROW><id>15916760</id><snippet>bpp8to10.pyx</snippet></ROW><ROW><id>15916760</id><snippet>from cpython.bytes cimport PyBytes_FromStringAndSize

def convert(bytes chunk not None):
    cdef:
        bytes data = PyBytes_FromStringAndSize(NULL, len(chunk)*2)
        char* buf = data # no copy
        Py_ssize_t j = 0
        unsigned char c
    for c in chunk:
        buf[j] = (c &lt;&lt; 2) 
        buf[j + 1] = (c &gt;&gt; 6)
        j += 2
    return data
</snippet></ROW><ROW><id>15916760</id><snippet>main()</snippet></ROW><ROW><id>15916760</id><snippet>6.7</snippet></ROW><ROW><id>15916760</id><snippet>from functools import partial
from multiprocessing import Pool

f_in = 'foreman_cif.yuv'
f_out = 'py_10bpp.yuv'

def convert(chunk):
    data = bytearray() # [] -&gt; bytearray(): 17 -&gt; 15 seconds
    data_append = data.append # 15 -&gt; 12  seconds
    for b in bytearray(chunk): # on Python 3: `for b in chunk:`
        data_append((b &lt;&lt; 2) &amp; 0xff)
        data_append((b &gt;&gt; 8) &amp; 0xff)
    return data

def main(): # put in main(): # 25 -&gt; 17 seconds
    pool = Pool(processes=2) # 12 -&gt; 6.7 seconds
    with open(f_in, 'rb') as fd_in, open(f_out, 'wb') as fd_out:
        for data in pool.imap(convert, iter(partial(fd_in.read, 8192), b'')):
            fd_out.write(data)
main()
</snippet></ROW><ROW><id>15916760</id><snippet>pypy</snippet></ROW><ROW><id>15916760</id><snippet>1.6</snippet></ROW><ROW><id>15916760</id><snippet>f_in = 'foreman_cif.yuv'
f_out = 'py_10bpp.yuv'

def convert(chunk):
    data = bytearray() # 1.6 -&gt; 1.5 seconds for preallocated data
    for b in bytearray(chunk): 
        data.append((b &lt;&lt; 2) &amp; 0xff)
        data.append((b &gt;&gt; 6) &amp; 0xff)
    return data

with open(f_in, 'rb') as fd_in, open(f_out, 'wb') as fd_out:
    while True:
        chunk = fd_in.read(8192)
        if not chunk:
            break
        fd_out.write(convert(chunk))
</snippet></ROW><ROW><id>15916824</id><snippet>        if (lst[i] &lt; lst[i + 1]):
            swapped = False
            lst[i+1], lst[i] = lst[i], lst[i+1]
</snippet></ROW><ROW><id>15916824</id><snippet>lst = [lst]</snippet></ROW><ROW><id>15916824</id><snippet>#!/usr/bin/python
import turtle as t

def draw(lst, width):
  for x in lst:
    height = x[0]
    t.color(x[1])
    t.forward(width)
    t.left(90)
    t.forward(height)
    t.left(90)
    t.forward(width)
    t.left(90)
    t.forward(height)
    t.left(90)
    t.penup()
    t.forward(30)
    t.pendown()

def bubble_sort(orig_lst):  
  lst = [ (x, "blue") for x in orig_lst ]
  n = len(lst)-1 
  t.pensize(3)
  draw(lst, width)
  swapped = True  
  while swapped:  
    swapped = False  
    for i in range(n):  
        if lst[i+1][0] &lt; lst[i][0]:  
            lst[i], lst[i+1] = lst[i+1], lst[i]
            lst[i] = (lst[i][0], "green")  
            swapped = True 
            next = raw_input("hit any key to continue ")
            t.home()
            t.clear() 
            draw(lst,width)
  newLst = [ x[0] for x in lst ]
  return newLst

# TOP LEVEL
original_lst = input("Enter list to be sorted: ")
width = input("Provide the width: ")

newLst = bubble_sort(original_lst)
print "Done! Sorted list is: ", newLst
next = raw_input("hit any key to exit ")
</snippet></ROW><ROW><id>15916855</id><snippet>VIII</snippet></ROW><ROW><id>15916855</id><snippet>V</snippet></ROW><ROW><id>15916855</id><snippet>tokens = ['IX', 'C', 'D', 'XL', 'I', 'XC', 'M', 'L', 'CD', 'X', 'IV', 'CM']

def rn_split(numeral, results_so_far=[]):
    if len(numeral)==0:
        return results_so_far # Break the recursion
    for token in tokens:
        if numeral.startswith(token):
            results_so_far.append(token)
            recurse_numeral = numeral[ (len(token)): ]
            return rn_split(recurse_numeral, results_so_far)
    # Remainder of numeral didn't match.  Bail out
    results_so_far.append(numeral)
    return results_so_far
</snippet></ROW><ROW><id>15917101</id><snippet>i = sel.is_text_present("Schedule")    #text that the test case is 'waiting' for 
while i != True:
    print i
    print "Waiting for job..."
    sel.refresh()
    i = sel.is_text_present("Schedule")    #text that the test case is 'waiting' for

print "Job found..."
</snippet></ROW><ROW><id>15917109</id><snippet>import wx

class MyForm(wx.Frame):

    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, "Spin Button Tutorial")
        panel = wx.Panel(self, wx.ID_ANY)

        self.text = wx.SpinCtrl(panel, value="1")
        self.text.SetRange(1, 8)
        self.text.SetValue(1)

        self.text.Bind(wx.EVT_SPINCTRL, self.OnSpin)
        self.text.Bind(wx.EVT_TEXT, self.OnSpin)



    def OnSpin(self, event):
        if self.text.GetValue() &gt; 7:
               self.text.SetValue(7)
               wx.MessageDialog(self,"Test Message","Too Big!").ShowModal()

# Run the program
if __name__ == "__main__":
    app = wx.App(False)
    frame = MyForm()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>15917215</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.random.rand(3,3)
&gt;&gt;&gt; a
array([[ 0.43852835,  0.07928864,  0.33829191],
       [ 0.60776121,  0.02688291,  0.67274362],
       [ 0.2188034 ,  0.58202254,  0.44704166]])
&gt;&gt;&gt; a.max(axis=1)
array([ 0.43852835,  0.67274362,  0.58202254])
</snippet></ROW><ROW><id>15917248</id><snippet>numpy</snippet></ROW><ROW><id>15917248</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; r1 = np.array([1, 2, 3, 4, 5, 6, 0, 3, 3, 0, 0, 0, 1, 1])
&gt;&gt;&gt; r2 = np.array([4, 0, 3, 0, 0, 0, 1, 2, 3, 5, 6, 7, 8, 9])
&gt;&gt;&gt; 1 - np.linalg.norm(r1-r2) / np.linalg.norm(r1+r2)
0.20227596478253429
</snippet></ROW><ROW><id>15917248</id><snippet>numpy.linalg.norm</snippet></ROW><ROW><id>15917312</id><snippet>np.random.dirichlet</snippet></ROW><ROW><id>15917312</id><snippet>dirichlet_sample</snippet></ROW><ROW><id>15917312</id><snippet>alphas</snippet></ROW><ROW><id>15917312</id><snippet>alpha</snippet></ROW><ROW><id>15917312</id><snippet>alphas</snippet></ROW><ROW><id>15917312</id><snippet>dirichlet_sample</snippet></ROW><ROW><id>15917312</id><snippet>np.random.dirichlet</snippet></ROW><ROW><id>15917312</id><snippet>import numpy as np


def dirichlet_sample(alphas):
    """
    Generate samples from an array of alpha distributions.

    `alphas` must be a numpy array with shape (n, k).
    """
    r = np.random.standard_gamma(alphas)
    r /= r.sum(-1).reshape(-1, 1)
    return r


if __name__ == "__main__":
    alphas = 2 ** np.random.randint(0, 4, size=(6, 3))

    np.random.seed(1234)
    d1 = dirichlet_sample(alphas)
    print "dirichlet_sample:"
    print d1

    np.random.seed(1234)
    d2 = np.empty(alphas.shape)
    for k in range(len(alphas)):
        d2[k] = np.random.dirichlet(alphas[k])
    print "np.random.dirichlet:"
    print d2

    # Compare d1 and d2:
    err = np.abs(d1 - d2).max()
    print "max difference:", err
</snippet></ROW><ROW><id>15917312</id><snippet>dirichlet_sample:
[[ 0.38980834  0.4043844   0.20580726]
 [ 0.14076375  0.26906604  0.59017021]
 [ 0.64223074  0.26099934  0.09676991]
 [ 0.21880145  0.33775249  0.44344606]
 [ 0.39879859  0.40984454  0.19135688]
 [ 0.73976425  0.21467288  0.04556287]]
np.random.dirichlet:
[[ 0.38980834  0.4043844   0.20580726]
 [ 0.14076375  0.26906604  0.59017021]
 [ 0.64223074  0.26099934  0.09676991]
 [ 0.21880145  0.33775249  0.44344606]
 [ 0.39879859  0.40984454  0.19135688]
 [ 0.73976425  0.21467288  0.04556287]]
max difference: 5.55111512313e-17
</snippet></ROW><ROW><id>15917325</id><snippet>&lt;field name="Valor_En_Divisas" string="Valor En Divisas" /&gt;</snippet></ROW><ROW><id>15917325</id><snippet>&lt;record model="ir.ui.view" id="certificados_search"&gt;
            &lt;field name="name"&gt;certificados.search&lt;/field&gt;
            &lt;field name="model"&gt;certificados.certificados&lt;/field&gt;
            &lt;field name="type"&gt;search&lt;/field&gt;
            &lt;field name="arch" type="xml"&gt;
            &lt;search string="Buscar Certificados" &gt;
                &lt;field name="notas" string="Notas" /&gt;

                &lt;field name="Valor_En_Divisas" string="Valor En Divisas" /&gt;
            &lt;/search&gt;
            &lt;/field&gt;
        &lt;/record&gt;
</snippet></ROW><ROW><id>15917325</id><snippet>&lt;record id="certificados_certificados_tree" model="ir.ui.view"&gt;
                &lt;field name="name"&gt;certificados.result.tree.new&lt;/field&gt;
                &lt;field name="model"&gt;certificados.certificados&lt;/field&gt;
                &lt;field name="type"&gt;tree&lt;/field&gt;
                &lt;field name="arch" type="xml"&gt;
                        &lt;tree string="Crear_Certificado" &gt;
                                &lt;field name="Item" /&gt;
                                &lt;field name="Codigo_Arancelario" /&gt;
                                &lt;field name="Descripcion_Arancelaria" /&gt;
                                &lt;field name="Especificaciones_Tecnicas" /&gt;
                                &lt;field name="Precio_Unitario_Declarado" /&gt;
                                &lt;field name="Valor_En_Divisas" /&gt;
                                &lt;field name="Cantidad_Consumida" /&gt;
                                &lt;field name="Cantidad_Disponible" /&gt;

                        &lt;/tree&gt;
                &lt;/field&gt;
        &lt;/record&gt;
</snippet></ROW><ROW><id>15917325</id><snippet>&lt;field name="Item" /&gt;</snippet></ROW><ROW><id>15917355</id><snippet>sort</snippet></ROW><ROW><id>15917355</id><snippet>sort</snippet></ROW><ROW><id>15917355</id><snippet>sort -t' ' -k4 -n -r
</snippet></ROW><ROW><id>15917355</id><snippet>-t</snippet></ROW><ROW><id>15917355</id><snippet>' '</snippet></ROW><ROW><id>15917355</id><snippet>"-t "</snippet></ROW><ROW><id>15917355</id><snippet>sort = subprocess.Popen(['sort', '-t ', '-k4', '-n', '-r'],
                        stdin=awk.stdout,
                        stdout=subprocess.PIPE,
                        )
</snippet></ROW><ROW><id>15917355</id><snippet>&gt; output.csv</snippet></ROW><ROW><id>15917355</id><snippet>&gt;</snippet></ROW><ROW><id>15917355</id><snippet>output.csv</snippet></ROW><ROW><id>15917355</id><snippet>&gt;</snippet></ROW><ROW><id>15917355</id><snippet>head = subprocess.Popen(['head', '-10'],
                        stdin=sort.stdout,
                        stdout=open('output.csv', 'w'),  # Not a pipe here
                        )
</snippet></ROW><ROW><id>15917474</id><snippet>'account_id': commission.salesperson.partner_id.property_account_receivable.id
</snippet></ROW><ROW><id>15917474</id><snippet>'account_id': commission.salesperson.partner_id.property_account_payable.id
</snippet></ROW><ROW><id>15917474</id><snippet>'account_id': commission.salesperson.partner_id.property_account_receivable.id,
</snippet></ROW><ROW><id>15917535</id><snippet>from couchdb import design, mapping

class Post(mapping.Document):

   by_author = design.FilterFunction('posts', 'by_name', '''
function(doc, req){
  if (req.query.author){
    return doc.author === req.query.author;
  }
  throw({'invalid_query': 'author name was not specified'});
}
''')

if __name__ == '__main__:
    design.sync_docs(db, [Post])
</snippet></ROW><ROW><id>15917861</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; def repl(match):
...     start, end = match.groups()
...     return ','.join(str(i) for i in range(int(start), int(end)+1))
... 
&gt;&gt;&gt; re.sub(r'(\d+)-(\d+)', repl, "235:2,4,6-9,12,14-19;240:3,5-9,10;245:4,9,10-15,18")
'235:2,4,6,7,8,9,12,14,15,16,17,18,19;240:3,5,6,7,8,9,10;245:4,9,10,11,12,13,14,15,18'
</snippet></ROW><ROW><id>15917861</id><snippet>repl</snippet></ROW><ROW><id>15917861</id><snippet>re.sub</snippet></ROW><ROW><id>15917861</id><snippet>expand(s)</snippet></ROW><ROW><id>15917861</id><snippet>import re

def repl(match):
    start, end = match.groups()
    return ','.join(str(i) for i in range(int(start), int(end)+1))

def expand(s):
    return re.sub('(\d+)-(\d+)', repl, s)
</snippet></ROW><ROW><id>15918519</id><snippet>cp1252</snippet></ROW><ROW><id>15918519</id><snippet>utf-8</snippet></ROW><ROW><id>15918519</id><snippet>import logging
def force_decode(string, codecs=['utf8', 'cp1252']):
    for i in codecs:
        try:
            return string.decode(i)
        except:
            pass

    logging.warn("cannot decode url %s" % ([string]))

for item in os.listdir(rootPath):
    #Convert to Unicode
    if isinstance(item, str):
        item = force_decode(item)
    print item
</snippet></ROW><ROW><id>15918742</id><snippet>if __name__</snippet></ROW><ROW><id>15918742</id><snippet>import concurrent.futures

nums = [1,2,3,4,5,6,7,8,9,10]

def f(x):
    return x * x
def main():
    # Make sure the map and function are working
    print([val for val in map(f, nums)])

    # Test to make sure concurrent map is working
    with concurrent.futures.ProcessPoolExecutor() as executor:
        print([val for val in executor.map(f, nums)])

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>15918742</id><snippet>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
</snippet></ROW><ROW><id>15918750</id><snippet>&lt;input type="text" value="defaultValue" /&gt;
</snippet></ROW><ROW><id>15918750</id><snippet>$("#inputId").val( "defaultValue" )</snippet></ROW><ROW><id>15918818</id><snippet>from lxml import etree

XML= """
&lt;tag attrib1='I'&gt;
  &lt;subtag1 subattrib1='1'&gt;
    &lt;subtext&gt;text1&lt;/subtext&gt;
  &lt;/subtag1&gt;
  &lt;subtag3 subattrib3='3'&gt;
    &lt;subtext&gt;text3&lt;/subtext&gt;
  &lt;/subtag3&gt;
&lt;/tag&gt;"""

parser = etree.XMLParser(remove_blank_text=True)
tag = etree.fromstring(XML, parser)

subtag1 = doc.find("subtag1")
subtag2 = etree.Element("subtag2", subattrib2="2")
subtext = etree.SubElement(subtag2, "subtext")
subtext.text = "text2"
subtag1.addnext(subtag2)   # Add subtag2 as a following sibling of subtag1

print etree.tostring(tag, pretty_print=True)
</snippet></ROW><ROW><id>15918818</id><snippet>&lt;tag attrib1="I"&gt;
  &lt;subtag1 subattrib1="1"&gt;
    &lt;subtext&gt;text1&lt;/subtext&gt;
  &lt;/subtag1&gt;
  &lt;subtag2 subattrib2="2"&gt;
    &lt;subtext&gt;text2&lt;/subtext&gt;
  &lt;/subtag2&gt;
  &lt;subtag3 subattrib3="3"&gt;
    &lt;subtext&gt;text3&lt;/subtext&gt;
  &lt;/subtag3&gt;
&lt;/tag&gt;
</snippet></ROW><ROW><id>15918818</id><snippet>insert()</snippet></ROW><ROW><id>15918818</id><snippet>subtag2 = etree.Element("subtag2", subattrib2="2")
subtext = etree.SubElement(subtag2, "subtext")
subtext.text = "text2"
tag.insert(1, subtag2)   # Add subtag2 as the second child (index 1) of the root element
</snippet></ROW><ROW><id>15919024</id><snippet>urllib2</snippet></ROW><ROW><id>15919024</id><snippet>pygoogle</snippet></ROW><ROW><id>15919118</id><snippet>normalizedHash</snippet></ROW><ROW><id>15919673</id><snippet>detrend</snippet></ROW><ROW><id>15919673</id><snippet>import numpy as np
import scipy.signal as signal

t = np.linspace(0, 5, 100)    
assert np.allclose(signal.detrend(t), signal.detrend(2*t))
</snippet></ROW><ROW><id>15919673</id><snippet>undetrend</snippet></ROW><ROW><id>15919673</id><snippet>signal.detrend(t)</snippet></ROW><ROW><id>15919673</id><snippet>t</snippet></ROW><ROW><id>15919673</id><snippet>signal.detrend(2*t)</snippet></ROW><ROW><id>15919673</id><snippet>2*t</snippet></ROW><ROW><id>15919673</id><snippet>signal.detrend(t)</snippet></ROW><ROW><id>15919673</id><snippet>signal.detrend(2*t)</snippet></ROW><ROW><id>15919692</id><snippet>CRITICAL</snippet></ROW><ROW><id>15920005</id><snippet>members=[["DI_CACHE.lengua","DI_CACHE.vidrios","DI_CACHE.dientes_abajo"],["TOTO_GALLO_cache.lengua","TOTO_GALLO_cache.dientes_01","TOTO_GALLO_cache.plumas_guantes"]]'
</snippet></ROW><ROW><id>15920005</id><snippet>folders=[["Anim_2p.scn_c_DI_rig"],["Anim_2p.scn_c_TOTO_GALLO_rig"]]
</snippet></ROW><ROW><id>15920005</id><snippet>for i in xrange(len(a)):
    for n,m in itertools.product(a[i],b[i]):
        print n,m
</snippet></ROW><ROW><id>15920005</id><snippet>DI_CACHE.lengua Anim_2p.scn_c_DI_rig
DI_CACHE.vidrios Anim_2p.scn_c_DI_rig
DI_CACHE.dientes_abajo Anim_2p.scn_c_DI_rig
TOTO_GALLO_cache.lengua Anim_2p.scn_c_TOTO_GALLO_rig
TOTO_GALLO_cache.dientes_01 Anim_2p.scn_c_TOTO_GALLO_rig
TOTO_GALLO_cache.plumas_guantes Anim_2p.scn_c_TOTO_GALLO_rig
</snippet></ROW><ROW><id>15920064</id><snippet>def process_spider_output(self, response, result, spider):
    items = []
    for x in result:
        if isinstance(x, Request):
            if x.dont_filter or self.should_follow(x, spider):
                yield x
            else:
                domain = urlparse_cached(x).hostname
                if domain and domain not in self.domains_seen[spider]:
                    self.domains_seen[spider].add(domain)
                    # create an item here and yield it 
        else:
            yield x
</snippet></ROW><ROW><id>15920183</id><snippet>i</snippet></ROW><ROW><id>15920183</id><snippet>DATETIME_FORMAT = 'Y-m-d H:i'
</snippet></ROW><ROW><id>15920183</id><snippet>i</snippet></ROW><ROW><id>15920183</id><snippet>'00'</snippet></ROW><ROW><id>15920183</id><snippet>'59'</snippet></ROW><ROW><id>15920207</id><snippet>soup.find('div', attrs={'class':'media item avatar profile'}).a.img['src']
</snippet></ROW><ROW><id>15920207</id><snippet>In [1]: from bs4 import BeautifulSoup

In [2]: html = """\
   ...: &lt;div class="media item avatar profile"&gt;
   ...: &lt;a href="http://..." class="media-link action-medialink"&gt;
   ...: &lt;img class="media-item-img" src="http://...jpeg" alt="name" title="name" width="150" height="200"&gt;
   ...: &lt;/a&gt;
   ...: &lt;/div&gt;"""

In [3]: soup = BeautifulSoup(html)

In [4]: soup.find('div', attrs={'class':'media item avatar profile'}).a.img['src']
Out[4]: 'http://...jpeg'
</snippet></ROW><ROW><id>15920226</id><snippet>asyncore</snippet></ROW><ROW><id>15920226</id><snippet>select</snippet></ROW><ROW><id>15920226</id><snippet>asyncore</snippet></ROW><ROW><id>15920226</id><snippet>asyncore</snippet></ROW><ROW><id>15920226</id><snippet>twisted</snippet></ROW><ROW><id>15920226</id><snippet>asyncore</snippet></ROW><ROW><id>15920226</id><snippet>gevent</snippet></ROW><ROW><id>15920226</id><snippet>tulip</snippet></ROW><ROW><id>15920226</id><snippet>asyncore</snippet></ROW><ROW><id>15920226</id><snippet>httplib</snippet></ROW><ROW><id>15920226</id><snippet>asyncore</snippet></ROW><ROW><id>15920226</id><snippet>twisted</snippet></ROW><ROW><id>15920226</id><snippet>gevent</snippet></ROW><ROW><id>15920226</id><snippet>tulip</snippet></ROW><ROW><id>15920226</id><snippet>pycurl</snippet></ROW><ROW><id>15920226</id><snippet>libcurl</snippet></ROW><ROW><id>15920226</id><snippet>curl_multi</snippet></ROW><ROW><id>15920226</id><snippet>grequests</snippet></ROW><ROW><id>15920226</id><snippet>requests</snippet></ROW><ROW><id>15920226</id><snippet>gevent</snippet></ROW><ROW><id>15920226</id><snippet>asyncore</snippet></ROW><ROW><id>15920226</id><snippet>epoll</snippet></ROW><ROW><id>15920226</id><snippet>kqueue</snippet></ROW><ROW><id>15920226</id><snippet>poll</snippet></ROW><ROW><id>15920226</id><snippet>asyncore</snippet></ROW><ROW><id>15920226</id><snippet>poll</snippet></ROW><ROW><id>15920226</id><snippet>asyncore</snippet></ROW><ROW><id>15920226</id><snippet>grequests</snippet></ROW><ROW><id>15920226</id><snippet>httplib</snippet></ROW><ROW><id>15920226</id><snippet>urllib2</snippet></ROW><ROW><id>15920226</id><snippet>gevents</snippet></ROW><ROW><id>15920226</id><snippet>asyncore</snippet></ROW><ROW><id>15920226</id><snippet>twisted</snippet></ROW><ROW><id>15920226</id><snippet>asyncore</snippet></ROW><ROW><id>15920226</id><snippet>httplib</snippet></ROW><ROW><id>15920226</id><snippet>asyncore</snippet></ROW><ROW><id>15920377</id><snippet>bincount()</snippet></ROW><ROW><id>15920377</id><snippet>a</snippet></ROW><ROW><id>15920377</id><snippet>b</snippet></ROW><ROW><id>15920377</id><snippet>n</snippet></ROW><ROW><id>15920377</id><snippet>m</snippet></ROW><ROW><id>15920377</id><snippet>bincount()</snippet></ROW><ROW><id>15920377</id><snippet>a * m + b</snippet></ROW><ROW><id>15920377</id><snippet>In [15]: a = np.array([1, 2, 1, 1, 2])

In [16]: b = np.array([2, 1, 1, 1, 1])

In [17]: cnt = np.bincount(a * 3 + b)

In [18]: cnt.resize((3, 3))

In [19]: cnt
Out[19]: 
array([[0, 0, 0],
       [0, 2, 1],
       [0, 2, 0]])
</snippet></ROW><ROW><id>15920377</id><snippet>np.ravel_multi_index()</snippet></ROW><ROW><id>15920377</id><snippet>In [20]: cnt = np.bincount(np.ravel_multi_index(np.vstack((a, b)), (3, 3)))

In [21]: np.resize(cnt, (3, 3))
Out[21]: 
array([[0, 0, 0],
       [0, 2, 1],
       [0, 2, 0]])
</snippet></ROW><ROW><id>15920377</id><snippet>ravel_multi_index</snippet></ROW><ROW><id>15920514</id><snippet>t = loader.get_template('orders/invoice_email.html')
c = {
        'order': order,
    }

body = u''.join(t.render(Context(c))).encode('utf-8').strip()
email = EmailMessage(subject, body, from_mail, [to, ])
email.encoding = "utf-8"
email.content_subtype = "html"
email.attach_file(invoice.name, mimetype="application/pdf")
email.send()
</snippet></ROW><ROW><id>15921305</id><snippet>%g</snippet></ROW><ROW><id>15921305</id><snippet>&gt;&gt;&gt; "%g, %g, %g, %g" % (2.1, 2.01, 2.001, 2.0001)
'2.1, 2.01, 2.001, 2.0001'
</snippet></ROW><ROW><id>15921438</id><snippet>virtualenv</snippet></ROW><ROW><id>15921511</id><snippet>row</snippet></ROW><ROW><id>15921511</id><snippet>def blsimpv_(row):
    blsimpv(row['spot'], row['strike'], row['rf'], row['dy'], row['T'], row['price'], row['w'])
</snippet></ROW><ROW><id>15921511</id><snippet>apply</snippet></ROW><ROW><id>15921511</id><snippet>apply(blsimpv_, axis=1)
</snippet></ROW><ROW><id>15921588</id><snippet>pywin32</snippet></ROW><ROW><id>15921588</id><snippet>from win32api import *
from win32gui import *
import win32con
import sys, os
import struct
import time

class WindowsBalloonTip:
    def __init__(self, title, msg):
        message_map = {
                win32con.WM_DESTROY: self.OnDestroy,
        }
        # Register the Window class.
        wc = WNDCLASS()
        hinst = wc.hInstance = GetModuleHandle(None)
        wc.lpszClassName = "PythonTaskbar"
        wc.lpfnWndProc = message_map # could also specify a wndproc.
        classAtom = RegisterClass(wc)
        # Create the Window.
        style = win32con.WS_OVERLAPPED | win32con.WS_SYSMENU
        self.hwnd = CreateWindow( classAtom, "Taskbar", style, \
                0, 0, win32con.CW_USEDEFAULT, win32con.CW_USEDEFAULT, \
                0, 0, hinst, None)
        UpdateWindow(self.hwnd)
        iconPathName = os.path.abspath(os.path.join( sys.path[0], "balloontip.ico" ))
        icon_flags = win32con.LR_LOADFROMFILE | win32con.LR_DEFAULTSIZE
        try:
           hicon = LoadImage(hinst, iconPathName, \
                    win32con.IMAGE_ICON, 0, 0, icon_flags)
        except:
          hicon = LoadIcon(0, win32con.IDI_APPLICATION)
        flags = NIF_ICON | NIF_MESSAGE | NIF_TIP
        nid = (self.hwnd, 0, flags, win32con.WM_USER+20, hicon, "tooltip")
        Shell_NotifyIcon(NIM_ADD, nid)
        Shell_NotifyIcon(NIM_MODIFY, \
                         (self.hwnd, 0, NIF_INFO, win32con.WM_USER+20,\
                          hicon, "Balloon  tooltip",msg,200,title))
        # self.show_balloon(title, msg)
        time.sleep(10)
        DestroyWindow(self.hwnd)
    def OnDestroy(self, hwnd, msg, wparam, lparam):
        nid = (self.hwnd, 0)
        Shell_NotifyIcon(NIM_DELETE, nid)
        PostQuitMessage(0) # Terminate the app.

def balloon_tip(title, msg):
    w=WindowsBalloonTip(title, msg)

if __name__ == '__main__':
    balloon_tip("Title for popup", "This is the popup's message")
</snippet></ROW><ROW><id>15922099</id><snippet>self</snippet></ROW><ROW><id>15922099</id><snippet>getattr</snippet></ROW><ROW><id>15922099</id><snippet>def call_by_name(self, method_name):
    method = getattr(self, method_name)
    method()
</snippet></ROW><ROW><id>15922331</id><snippet>import os, os.path, sys
import glob
from xml.etree import ElementTree

def run(files):
    xml_files = glob.glob(files +"/*.xml")
    xml_element_tree = None
    for xml_file in xml_files:
        data = ElementTree.parse(xml_file).getroot()
        # print ElementTree.tostring(data)
        for result in data.iter('results'):
            if xml_element_tree is None:
                xml_element_tree = data 
                insertion_point = xml_element_tree.findall("./results")[0]
            else:
                insertion_point.extend(result) 
    if xml_element_tree is not None:
        print ElementTree.tostring(xml_element_tree)
</snippet></ROW><ROW><id>15922331</id><snippet>&lt;sample="1"&gt;
    ...
&lt;/sample&gt;
</snippet></ROW><ROW><id>15922331</id><snippet>&lt;sample id="1"&gt;
    ...
&lt;/sample&gt;
</snippet></ROW><ROW><id>15922411</id><snippet>#! python
for line in open('/var/log/apache2/access.log'):
        ip = line.split(' ')[0]
        print ip
</snippet></ROW><ROW><id>15922411</id><snippet>#! python
f = open("ip.txt", "w")
for line in open('/var/log/apache2/access.log'):
        ip = line.split(' ')[0]
        f.write(ip + '\n')
f.close()
</snippet></ROW><ROW><id>15922417</id><snippet>def EpiChange(self)
</snippet></ROW><ROW><id>15922417</id><snippet>class Add(QtGui.QMainWindow,Ui_AddShotDetails):

    def __init__(self, manager):
        super(Add,self).__init__()
        self.manager = manager
        self.setupUi(self)

    def addDetails(self):
        #Do some stuff and call method in Manager class
        self.manager.EpiChange() # I get the error at this line
</snippet></ROW><ROW><id>15922417</id><snippet>self.AddWindow = Add(self)
</snippet></ROW><ROW><id>15923157</id><snippet>Pagination</snippet></ROW><ROW><id>15923157</id><snippet>items</snippet></ROW><ROW><id>15923157</id><snippet>Post</snippet></ROW><ROW><id>15923157</id><snippet>{% for post in posts.items %}
    {{ post.title }}
    {{ post.content }}
{% endfor %}
</snippet></ROW><ROW><id>15923157</id><snippet>iter_pages()</snippet></ROW><ROW><id>15923157</id><snippet>&lt;div id="pagination-links"&gt;
    {% for page in posts.iter_pages() %}
        {{ page }}
    {% endfor %}
&lt;/div&gt;
</snippet></ROW><ROW><id>15923157</id><snippet>{% macro render_pagination(pagination, endpoint) %}
    &lt;div class=pagination&gt;
        {%- for page in pagination.iter_pages() %}
            {% if page %}
                {% if page != pagination.page %}
                    &lt;a href="{{ url_for(endpoint, page=page) }}"&gt;{{ page }}&lt;/a&gt;
                {% else %}
                    &lt;strong&gt;{{ page }}&lt;/strong&gt;
                {% endif %}
            {% else %}
                &lt;span class=ellipsis&gt;…&lt;/span&gt;
            {% endif %}
        {%- endfor %}
    &lt;/div&gt;
{% endmacro %}
</snippet></ROW><ROW><id>15923228</id><snippet>Y</snippet></ROW><ROW><id>15923228</id><snippet>shape</snippet></ROW><ROW><id>15923228</id><snippet>(300, 1)</snippet></ROW><ROW><id>15923228</id><snippet>Y[:, 0]</snippet></ROW><ROW><id>15923228</id><snippet>np.reshape(a, len(a))</snippet></ROW><ROW><id>15923747</id><snippet>  p = subprocess.Popen(["/path/to/program", '-c', '-', cmd_here],
  stdout=subprocess.PIPE) 
  proc_stdout, proc_stderr = proc.communicate()
  proc.wait()
</snippet></ROW><ROW><id>15923878</id><snippet>import random

def some(x, n):
    return x.ix[random.sample(x.index, n)]
</snippet></ROW><ROW><id>15924227</id><snippet>metric="precomputed"</snippet></ROW><ROW><id>15924402</id><snippet>constant_cmd_part = ["/path/to/program", "-opt", "-more_opt"]
proc = subprocess.Popen(constant_cmd_part + [variable_part],
                        stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>15924858</id><snippet>boundmethod.im_class.__name__
</snippet></ROW><ROW><id>15925098</id><snippet>..</snippet></ROW><ROW><id>15925098</id><snippet>import os
os.path.join(os.path.dirname(__file__), os.pardir)
</snippet></ROW><ROW><id>15925098</id><snippet>import os
split_limit = 1 if os.path.isdir(__file__) else 0
parent_dir = os.path.abspath(__file__).rsplit(os.path.sep, split_limit)[0]
</snippet></ROW><ROW><id>15925201</id><snippet>out_dict[C] = max(lst)
</snippet></ROW><ROW><id>15925429</id><snippet>robot_list = [Robot() for i in xrange(num_robots)]
</snippet></ROW><ROW><id>15925429</id><snippet>num_robots</snippet></ROW><ROW><id>15925429</id><snippet>Robot</snippet></ROW><ROW><id>15925429</id><snippet>robot_list</snippet></ROW><ROW><id>15925429</id><snippet>robot_list = [Robot('robot{}'.format(i)) for i in xrange(num_robots)]
</snippet></ROW><ROW><id>15925792</id><snippet>getpass.getuser()</snippet></ROW><ROW><id>15925792</id><snippet>'LOGNAME', 'USER', 'LNAME', 'USERNAME'</snippet></ROW><ROW><id>15925792</id><snippet>os.getuid()</snippet></ROW><ROW><id>15925792</id><snippet>pwd.getpwuid(os.getuid())</snippet></ROW><ROW><id>15925879</id><snippet>fanout</snippet></ROW><ROW><id>15925879</id><snippet>topic</snippet></ROW><ROW><id>15926212</id><snippet>0  B
BT 0
</snippet></ROW><ROW><id>15926212</id><snippet>In [1]: import numpy as np

In [2]: import networkx as nx

In [3]: b = np.matrix([[1,0,1],[0,1,1]]) 

In [4]: r,s = b.shape

In [5]: a = np.vstack( (np.hstack((np.zeros((r,r)),b)), np.hstack((b.T,np.zeros((s,s)) ))) )

In [6]: G = nx.Graph(a)

In [7]: G.edges()
Out[7]: [(0, 2), (0, 4), (1, 3), (1, 4)]
</snippet></ROW><ROW><id>15926276</id><snippet>\\hostname\sharename</snippet></ROW><ROW><id>15926276</id><snippet>net use</snippet></ROW><ROW><id>15926276</id><snippet>net use</snippet></ROW><ROW><id>15926276</id><snippet>Status       Local     Remote                    Network
-------------------------------------------------------------------------------
OK           R:        \\hostname\sharename      Microsoft Windows Network
</snippet></ROW><ROW><id>15926276</id><snippet>net use R: \\hostname\sharename</snippet></ROW><ROW><id>15926276</id><snippet>net use</snippet></ROW><ROW><id>15926276</id><snippet>net use</snippet></ROW><ROW><id>15926765</id><snippet>if os.path.isfile(file_path): # or some other condition
    delete = True             # Standard action: delete
    try:
        with open(file_path) as infile:
            if "dollar" in infile.read(): # don't delete if "dollar" is found
                delete = False 
    except IOError:
        print("Could not access file {}".format(file_path))
    if delete: 
        os.unlink(file_path)
</snippet></ROW><ROW><id>15926765</id><snippet>with</snippet></ROW><ROW><id>15926765</id><snippet>        with open(file_path) as infile:
            for line in file:
                if "dollar" in line:
                    delete = False
                    break
</snippet></ROW><ROW><id>15926997</id><snippet>In [1]: import re

In [2]: truth = "I like turtles, turtles4756-+=[]}{@##:) I like"

In [3]: re.findall?
    Definition: re.findall(pattern, string, flags=0)
    ...
    Return a list of all non-overlapping matches in the string.

    If one or more groups are present in the pattern, return a
    list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result.

# [word boundary]turt followed by word characters
In [4]: re.findall(r'\bturt\w*', truth)
Out[4]: ['turtles', 'turtles4756']

# [word boundary]turt followed by non-whitespace characters
In [5]: re.findall(r'\bturt\S*', truth)
Out[5]: ['turtles,', 'turtles4756-+=[]}{@##:)']

In [10]: truth = "I like turtles, turtles4756-+=[]}{@##:) I like superturtles"

In [11]: re.findall(r'turt\S+', truth)
Out[11]: ['turtles,', 'turtles4756-+=[]}{@##:)', 'turtles']

In [12]: re.findall(r'\bturt\S+', truth)
Out[12]: ['turtles,', 'turtles4756-+=[]}{@##:)']
</snippet></ROW><ROW><id>15927038</id><snippet>var s = "may the force";
var t = s.substring(4);

alert(t); //alerts "the force"
</snippet></ROW><ROW><id>15927330</id><snippet>self.decrease</snippet></ROW><ROW><id>15927330</id><snippet>self.increase</snippet></ROW><ROW><id>15927330</id><snippet>self.decrease</snippet></ROW><ROW><id>15927330</id><snippet>self.increase</snippet></ROW><ROW><id>15927330</id><snippet>self.increase</snippet></ROW><ROW><id>15927330</id><snippet>self</snippet></ROW><ROW><id>15927330</id><snippet>addRow</snippet></ROW><ROW><id>15927330</id><snippet># Somewhere in __init__ or in parseBossItem
self.increase = []

# in addRow
self.increase.append(QtGui.QPushButton("+"))
self.layout.addWidget(self.increase[-1])
self.increase[-1].clicked.connect(self.add_subtract)
# and so on...
</snippet></ROW><ROW><id>15927330</id><snippet>def onIncrease(self):
    button = self.sender()
    if isinstance(button, QtGui.QPushButton):
        buttonName = button.text()
        if buttonName == 'name of button 1':
            self.itemCount[0].setText(str(int(self.itemCount[0])+1))
        elif buttonName == 'name of button 2':
            ...
</snippet></ROW><ROW><id>15927330</id><snippet>self.itemCount</snippet></ROW><ROW><id>15927330</id><snippet># in addRow
self.increase.clicked.connect(lambda: self.onIncrease(itemCount))

def onIncrease(self, edit):
    edit.setText(str(int(edit.text()+1))
</snippet></ROW><ROW><id>15927661</id><snippet>resp = mechanize.Request(url, data)
cj.add_cookie_header(resp)
res1 = mechanize.urlopen(resp)
print res1.read()
</snippet></ROW><ROW><id>15927769</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; d = {'usage': [0, 1, 1, 2, 1, 4, 7], 'power': [2, 2, 3, 6, 3, 3, 2], 'time': [1, 2, 2, 3, 4, 4, 5]}
&gt;&gt;&gt; groups = groupby(zip(d['time'], d['power'], d['usage']), key=itemgetter(0))
&gt;&gt;&gt; lists = zip(*[[k] + map(sum, zip(*g)[1:]) for k, g in groups])
&gt;&gt;&gt; dict(zip(('time', 'power', 'usage'), lists))
{'usage': (0, 2, 2, 5, 7), 'power': (2, 5, 6, 6, 2), 'time': (1, 2, 3, 4, 5)}
</snippet></ROW><ROW><id>15927769</id><snippet>keys</snippet></ROW><ROW><id>15927769</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; keys = ('time', 'power', 'usage')
&gt;&gt;&gt; groups = groupby(zip(*[d[k] for k in keys]), key=itemgetter(0))
&gt;&gt;&gt; lists = zip(*[[k] + map(sum, zip(*g)[1:]) for k, g in groups])
&gt;&gt;&gt; dict(zip(keys, lists))
{'usage': (0, 2, 2, 5, 7), 'power': (2, 5, 6, 6, 2), 'time': (1, 2, 3, 4, 5)}
</snippet></ROW><ROW><id>15927914</id><snippet>phases = ( phases + np.pi) % (2 * np.pi ) - np.pi
</snippet></ROW><ROW><id>15928170</id><snippet>ImportError</snippet></ROW><ROW><id>15928170</id><snippet>try:
    import dependency
except ImportError:
    # dependency missing, issue a warning
    import warnings
    warnings.warn('dependency not found, please install to enable xyz feature')
</snippet></ROW><ROW><id>15928170</id><snippet>extras_require</snippet></ROW><ROW><id>15928170</id><snippet>setup.py</snippet></ROW><ROW><id>15928170</id><snippet>pip</snippet></ROW><ROW><id>15928170</id><snippet>easy_install</snippet></ROW><ROW><id>15928170</id><snippet>zc.buildout</snippet></ROW><ROW><id>15928170</id><snippet>extras_require</snippet></ROW><ROW><id>15928170</id><snippet>extras_require</snippet></ROW><ROW><id>15928276</id><snippet>testing</snippet></ROW><ROW><id>15928276</id><snippet>csv</snippet></ROW><ROW><id>15928276</id><snippet>for row in testing:</snippet></ROW><ROW><id>15928276</id><snippet>testing</snippet></ROW><ROW><id>15928276</id><snippet>csv.reader</snippet></ROW><ROW><id>15928276</id><snippet>list()</snippet></ROW><ROW><id>15928276</id><snippet>csv.reader</snippet></ROW><ROW><id>15928276</id><snippet>testing</snippet></ROW><ROW><id>15928276</id><snippet>csv.reader</snippet></ROW><ROW><id>15928519</id><snippet>datetime.py</snippet></ROW><ROW><id>15928519</id><snippet>datetime</snippet></ROW><ROW><id>15928804</id><snippet>indexHandler</snippet></ROW><ROW><id>15928804</id><snippet>index.py</snippet></ROW><ROW><id>15928804</id><snippet>from index import indexHandler, listAllHandler, checkPersonHandler, deleteHandler
HANDLERS = [(r"/", indexHandler), (r"/listall/", listAllHandler), (r"/check/", checkPersonHandler), (r"/delete/", deleteHandler), ]
handlers = handlers.HANDLERS
</snippet></ROW><ROW><id>15928805</id><snippet>csv</snippet></ROW><ROW><id>15928805</id><snippet>with open('path/to/file/sites.csv', 'rU') as datafile:
    for line in datafile:
        print line.strip()
</snippet></ROW><ROW><id>15929098</id><snippet>;</snippet></ROW><ROW><id>15929098</id><snippet>run.py -n test_app; run.py -n test_delete_app; run.py -n test_create_app
</snippet></ROW><ROW><id>15929211</id><snippet>ax = gca()
ax.axhline(.5, linestyle='--')
trans = matplotlib.transforms.blended_transform_factory(
    ax.transAxes,
    ax.transData)

ax.annotate('label', xy=(1.01, .5), xycoords=trans, clip_on=False, va='center')
ax.set_xlim([0,2])
plt.draw()
</snippet></ROW><ROW><id>15929381</id><snippet>import scipy.integrate as integrate
import matplotlib.pyplot as plt
import numpy as np

pi = np.pi
sqrt = np.sqrt
cos = np.cos
sin = np.sin

def deriv_z(z, phi):
    u, udot = z
    return [udot, -u + sqrt(u)]

phi = np.linspace(0, 7.0*pi, 2000)
zinit = [1.49907, 0]
z = integrate.odeint(deriv_z, zinit, phi)
u, udot = z.T
# plt.plot(phi, u)
fig, ax = plt.subplots()
ax.plot(1/u*cos(phi), 1/u*sin(phi))
ax.set_aspect('equal')
plt.grid(True)
plt.show()
</snippet></ROW><ROW><id>15929541</id><snippet>ALTER TABLE imageset_image ALTER COLUMN id SET DEFAULT nextval('imageset_image_id_seq'::regclass);
</snippet></ROW><ROW><id>15929640</id><snippet>Select4</snippet></ROW><ROW><id>15929640</id><snippet>def Select4(M, I):
  return Concat(Select(M, I + 3), Select(M, I + 2), Select(M, I+1), Select(M, I))
</snippet></ROW><ROW><id>15929640</id><snippet>Concat</snippet></ROW><ROW><id>15929640</id><snippet>Extract</snippet></ROW><ROW><id>15929640</id><snippet>MI = BitVecSort(32)
MV = BitVecSort(8)
Mem = Array('Mem', MI, MV)

pmt = BitVec('pmt', 32)
pmt2 = BitVec('pmt2', 8)

def Select4(M, I):
  return Concat(Select(M, I + 3), Select(M, I + 2), Select(M, I+1), Select(M, I))

g = True
g = And(g, pmt2 == Select(Mem, pmt))
t3 = BitVec('t3', 32)
g = And(g, t3 == Select4(Mem, pmt))

solve(g, pmt2 &gt; 10)
</snippet></ROW><ROW><id>15929855</id><snippet>def test_check_url(self):
    url_a = "http://audaxing.wordpress.com"
    dummy_event = self.generate_dummy_auction_event(url_a)
    with patch("sys.stdin") as mock_stdin:
        MaddUrl = Mock()
        Minit = Mock(return_value=None)
        with patch('Foo.crawler.crawlerapp.CrawlerApp.__init__', Minit, create=True):
            with patch('Foo.crawler.crawlerapp.CrawlerApp.addUrl', MaddUrl, create=True):

                ca = Foo.crawler.crawlerapp.CrawlerApp(1)
                mock_stdin.read.return_value = EventDataFrame(1, "TOKEN1", dummy_event.SerializeToString()).to_bytes()
                ca._running = True
                input_thread = threading.Thread(target=ca.inputStreamThread)
                input_thread.start()
                time.sleep(0.5)
                ca._running = False
    MaddUrl.assert_called_with(url_a)
</snippet></ROW><ROW><id>15930295</id><snippet>|</snippet></ROW><ROW><id>15930295</id><snippet>zbarimg code.png | ./in.py
</snippet></ROW><ROW><id>15930295</id><snippet>sys.stdin.readlines()</snippet></ROW><ROW><id>15930295</id><snippet>raw_input</snippet></ROW><ROW><id>15930326</id><snippet>scipy.ndimage</snippet></ROW><ROW><id>15930326</id><snippet>import scipy.misc, scipy.ndimage

# Read the image
img = scipy.misc.imread("Skel.png")

# Retain only the skeleton
img[img!=255] = 0
img = img.astype(bool)

# Fill the holes
img2 = scipy.ndimage.binary_fill_holes(img)

# Compare the two, an image without cycles will have no holes
print "Cycles in image: ", ~(img == img2).all()

# As a test break the cycles
img3 = img.copy()
img3[0:200, 0:200] = 0
img4 = scipy.ndimage.binary_fill_holes(img3)

# Compare the two, an image without cycles will have no holes
print "Cycles in image: ", ~(img3 == img4).all()
</snippet></ROW><ROW><id>15930506</id><snippet>elif</snippet></ROW><ROW><id>15930506</id><snippet>if</snippet></ROW><ROW><id>15930506</id><snippet>if(input('username=')=='hello' and input('passcode=')=='goodbye'):
    print('continue')
else :
    print ('alert')
</snippet></ROW><ROW><id>15930521</id><snippet>0.1 + 0.2
</snippet></ROW><ROW><id>15930521</id><snippet>0.30000000000000004
</snippet></ROW><ROW><id>15930521</id><snippet>0.1</snippet></ROW><ROW><id>15930521</id><snippet>0.1</snippet></ROW><ROW><id>15930521</id><snippet>0.0001100110011001100110011001100110011001100110011...
</snippet></ROW><ROW><id>15930642</id><snippet>commandList</snippet></ROW><ROW><id>15930642</id><snippet>fA</snippet></ROW><ROW><id>15930642</id><snippet>fB</snippet></ROW><ROW><id>15930642</id><snippet>commandList = {
            'fA'              : fA(),
            'fB'              : fB(),
            }                     ~~ &lt;-- remove these parentheses
</snippet></ROW><ROW><id>15930652</id><snippet>line1, = ax.plot([], [],'-k',label='black')
line2, = ax.plot([], [],'-r',label='red')
ax.legend()
for i in range(0, SIZE):
  A.append(R1 * i * np.sin(i))
  B.append(R2 * i * np.cos(i))
  line1.set_ydata(A)
  line1.set_xdata(range(len(A)))
  line2.set_ydata(B)
  line2.set_xdata(range(len(B)))
  ax.relim()
  ax.autoscale_view()
  plt.draw() 
</snippet></ROW><ROW><id>15930652</id><snippet>xdata</snippet></ROW><ROW><id>15930977</id><snippet>class Super1(object):
    def __init__(self, value1):
        self._value1 = value1

    @property
    def value1(self):
        return self._value1[0]

    @value1.setter
    def value1(self, value):
        self._value1[0] = value
</snippet></ROW><ROW><id>15930977</id><snippet>&gt;&gt;&gt; a = np.arange(4)
&gt;&gt;&gt; obj = [Super1(a[j:j+1]) for j in xrange(len(a))]
&gt;&gt;&gt; obj[0].value1
0
&gt;&gt;&gt; obj[0].value1 = 5
&gt;&gt;&gt; a
array([5, 1, 2, 3])
&gt;&gt;&gt; obj[2].value1
2
&gt;&gt;&gt; a[2] = 8
&gt;&gt;&gt; obj[2].value1
8
</snippet></ROW><ROW><id>15931153</id><snippet>.py</snippet></ROW><ROW><id>15931153</id><snippet>hello.py</snippet></ROW><ROW><id>15931153</id><snippet>hello</snippet></ROW><ROW><id>15931153</id><snippet>import</snippet></ROW><ROW><id>15931153</id><snippet>foo.py</snippet></ROW><ROW><id>15931153</id><snippet>bar.py</snippet></ROW><ROW><id>15931153</id><snippet>foo.py</snippet></ROW><ROW><id>15931153</id><snippet># foo.py

hello = 'world'

def sum(a, b):
    return a + b
</snippet></ROW><ROW><id>15931153</id><snippet>foo.py</snippet></ROW><ROW><id>15931153</id><snippet>bar.py</snippet></ROW><ROW><id>15931153</id><snippet># bar.py

# the following import the whole foo module (foo.py file)
import foo

number = foo.sum(1, 2)
</snippet></ROW><ROW><id>15931153</id><snippet>bar.py</snippet></ROW><ROW><id>15931153</id><snippet>foo</snippet></ROW><ROW><id>15931153</id><snippet>foo</snippet></ROW><ROW><id>15931153</id><snippet>from .. import ..</snippet></ROW><ROW><id>15931153</id><snippet>bar.py</snippet></ROW><ROW><id>15931153</id><snippet>sum</snippet></ROW><ROW><id>15931153</id><snippet>foo</snippet></ROW><ROW><id>15931153</id><snippet># bar.py

# import only the sum function from foo module
from foo import sum

number = foo.sum(1, 2)
</snippet></ROW><ROW><id>15931153</id><snippet>models.py</snippet></ROW><ROW><id>15931153</id><snippet>forms.py</snippet></ROW><ROW><id>15931153</id><snippet>models.py</snippet></ROW><ROW><id>15931153</id><snippet># models.py

from django.db import models

class FooModel(models.Model):
    pass
</snippet></ROW><ROW><id>15931153</id><snippet>models.py</snippet></ROW><ROW><id>15931153</id><snippet>models</snippet></ROW><ROW><id>15931153</id><snippet>forms.py</snippet></ROW><ROW><id>15931153</id><snippet># forms.py

# import django forms - take this statement for granted
from django import forms

# import the model
from models import FooModel

class FooModelForm(forms.ModelForm):
    class Meta:
        model = FooModel
</snippet></ROW><ROW><id>15931168</id><snippet>X3
Y3
</snippet></ROW><ROW><id>15931168</id><snippet>ind3 .....
</snippet></ROW><ROW><id>15931168</id><snippet>awk -F'\t' -v OFS='\t' 'NR==FNR{a[NR]=$0;next}{print $1,$2,a[(FNR-1)*3+2],$3,a[FNR*3],$4}' file2 file
</snippet></ROW><ROW><id>15931168</id><snippet>kent$  head file file2
==&gt; file &lt;==
ind1    A1      B1      C1
ind2    A2      B2      C2
ind3    A3      B3      C3

==&gt; file2 &lt;==
ind1
X1
Y1
ind2
X2
Y2
ind3
X3
Y3

kent$  awk -F'\t' -v OFS='\t' 'NR==FNR{a[NR]=$0;next}{print $1,$2,a[(FNR-1)*3+2],$3,a[FNR*3],$4}' file2 file
ind1    A1      X1      B1      Y1      C1
ind2    A2      X2      B2      Y2      C2
ind3    A3      X3      B3      Y3      C3
</snippet></ROW><ROW><id>15931544</id><snippet>Cellar/python3/3.3.0//Frameworks/Python.framework/Versions/3.3/include/python3.3m/
</snippet></ROW><ROW><id>15931575</id><snippet>Line2D</snippet></ROW><ROW><id>15931575</id><snippet>th = np.linspace(0, 2 * np.pi, 64)
y = np.sin(th)
ax = plt.gca()

lin, = ax.plot(th, y, lw=5)
mark, = ax.plot(th, y, marker='o', alpha=.5, ms=10)

ax.legend([(lin, mark)], ['merged'])
plt.draw()
</snippet></ROW><ROW><id>15931813</id><snippet>ob1.var += 2</snippet></ROW><ROW><id>15931813</id><snippet>&gt;&gt;&gt; ob1 = A()
&gt;&gt;&gt; ob1.var += 2
&gt;&gt;&gt; ob1.__dict__
{'var': 7}
&gt;&gt;&gt; ob1.__class__.__dict__
{'var': 5, '__module__': '__main__', '__doc__': None}
</snippet></ROW><ROW><id>15931813</id><snippet>A.var += 2</snippet></ROW><ROW><id>15931813</id><snippet>ob1.__class__.var += 2</snippet></ROW><ROW><id>15931813</id><snippet>class A(object):
    _var = 5

    @property
    def var(self):
        return self.__class__._var

    @var.setter
    def var(self, value):
        self.__class__._var = value
</snippet></ROW><ROW><id>15931813</id><snippet>var</snippet></ROW><ROW><id>15931813</id><snippet>A</snippet></ROW><ROW><id>15931813</id><snippet>&gt;&gt;&gt; ob1 = A()
&gt;&gt;&gt; ob2 = A()
&gt;&gt;&gt; ob1.var += 2
&gt;&gt;&gt; ob2.var
7
</snippet></ROW><ROW><id>15932185</id><snippet>http://myserver/userid.html</snippet></ROW><ROW><id>15932185</id><snippet>http://myserver/sec.html?userid=1234</snippet></ROW><ROW><id>15932691</id><snippet>p.imap(f.f, jobs)
</snippet></ROW><ROW><id>15932691</id><snippet>p.imap</snippet></ROW><ROW><id>15932691</id><snippet>RuntimeError: Queue objects should only be shared between processes through inheritance
</snippet></ROW><ROW><id>15932691</id><snippet>p.imap</snippet></ROW><ROW><id>15932691</id><snippet>F</snippet></ROW><ROW><id>15932691</id><snippet>f.f</snippet></ROW><ROW><id>15932691</id><snippet>import multiprocessing as mp
import copy_reg
import types

def _pickle_method(method):
    # Author: Steven Bethard (author of argparse)
    # http://bytes.com/topic/python/answers/552476-why-cant-you-pickle-
    # instancemethods
    func_name = method.im_func.__name__
    obj = method.im_self
    cls = method.im_class
    cls_name = ''
    if func_name.startswith('__') and not func_name.endswith('__'):
        cls_name = cls.__name__.lstrip('_')
    if cls_name:
        func_name = '_' + cls_name + func_name
    return _unpickle_method, (func_name, obj, cls)


def _unpickle_method(func_name, obj, cls):
    # Author: Steven Bethard
    # http://bytes.com/topic/python/answers/552476-why-cant-you-pickle-
    # instancemethods
    for cls in cls.mro():
        try:
            func = cls.__dict__[func_name]
        except KeyError:
            pass
        else:
            break
    return func.__get__(obj, cls)

# This call to copy_reg.pickle allows you to pass methods as the first arg to
# mp.Pool methods. If you comment out this line, `pool.map(self.foo, ...)` results in
# PicklingError: Can't pickle &lt;type 'instancemethod'&gt;: attribute lookup
# __builtin__.instancemethod failed

copy_reg.pickle(types.MethodType, _pickle_method, _unpickle_method)

class F(object):
    def f(self, x):
        fq.put('Doing: ' + str(x))        
        return x*x

def f_init(q):
    # http://stackoverflow.com/a/3843313/190597 (Olson)
    global fq
    fq = q

def main():
    jobs = range(1,6)
    q = mp.Queue()
    p = mp.Pool(None, f_init, [q]) 
    f = F()
    results = p.imap(f.f, jobs)
    p.close()

    for r in results:
        print(r, q.get())

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>15932691</id><snippet>(1, 'Doing: 2')
(4, 'Doing: 3')
(9, 'Doing: 4')
(16, 'Doing: 1')
(25, 'Doing: 5')
</snippet></ROW><ROW><id>15932715</id><snippet>def fn_tdm_df(docs, xColNames = None, **kwargs):
          ''' create a term document matrix as pandas DataFrame
          with **kwargs you can pass arguments of CountVectorizer
         if xColNames is given the dataframe gets columns Names'''
         import pandas as pd
         from sklearn.feature_extraction.text import CountVectorizer
         #initialize the  vectorizer
         vectorizer = CountVectorizer(**kwargs)
         x1 = vectorizer.fit_transform(docs)
         #create dataFrame
          df = pd.DataFrame(x1.toarray().transpose(), index = vectorizer.get_feature_names())
        if xColNames is not None:
             df.columns = xColNames
        return df
</snippet></ROW><ROW><id>15932715</id><snippet>DIR = 'C:/Data/'

def fn_CorpusFromDIR(xDIR):
''' functions to create corpus from a Directories
Input: Directory
Output: A dictionary with 
         Names of files ['ColNames']
         the text in corpus ['docs']'''
import os
Res = dict(docs = [open(os.path.join(xDIR,f)).read() for f in os.listdir(xDIR)],
           ColNames = map(lambda x: 'P_' + x[0:6], os.listdir(xDIR)))
return Res
</snippet></ROW><ROW><id>15932715</id><snippet>d1 = fn_tdm_df(docs = fn_CorpusFromDIR(DIR)['docs'],
          xColNames = fn_CorpusFromDIR(DIR)['ColNames'], 
          stop_words=None, charset_error = 'replace')  
</snippet></ROW><ROW><id>15932960</id><snippet>body = modles.TextField()</snippet></ROW><ROW><id>15932960</id><snippet>body = models.TextField()</snippet></ROW><ROW><id>15932960</id><snippet>title = modles.CharField(max_lenght=100)</snippet></ROW><ROW><id>15932960</id><snippet>title = models.CharField(max_lenght=100)</snippet></ROW><ROW><id>15932990</id><snippet>rename_axis</snippet></ROW><ROW><id>15932990</id><snippet>In [42]: df
Out[42]: 
   garbled #### one  garbled #### two
a                 1                 1
b                 2                 2
c                 3                 3
d                 4                 4

In [43]: df.rename_axis(lambda x: x.split()[0]+ " " +x.split()[2])
Out[43]: 
   garbled one  garbled two
a            1            1
b            2            2
c            3            3
d            4            4

In [44]: df.rename_axis({'garbled #### one': 'one', 'garbled #### two': 'two'})
Out[44]: 
   one  two
a    1    1
b    2    2
c    3    3
d    4    4
</snippet></ROW><ROW><id>15933043</id><snippet>def p_expression_assign(t):
    'expression : NAME EQUALS expression'
    t[0] = names[t[1]] = t[3]
</snippet></ROW><ROW><id>15933043</id><snippet>t[0]</snippet></ROW><ROW><id>15933043</id><snippet>a=(b=1)*1</snippet></ROW><ROW><id>15933200</id><snippet>print re.sub("\((I+|i+|[a-z0-9])\)","\n\g&lt;0&gt;",buff)
</snippet></ROW><ROW><id>15933200</id><snippet>The Integrated Programme Framework of the ISSSS has been established to: 
(a) create a protective environment for civilians by strengthening the security forces,     and improving discipline and control; 
(b) support the demobilization and reintegration of armed groups; 
(c) re-establish state functions in areas formerly controlled by armed groups, through     the training and deployment of state officials (police, penitentiary, judicial     and administration) to uphold the rule of law and public order, 
(d) ensure open road access and infrastructure; 
(e) promote a safe and dignified return of internally displaced persons and refugees; and 
(f) address priority social needs and key sources of conflict and initiate economic recovery.
</snippet></ROW><ROW><id>15933200</id><snippet>&gt;&gt;&gt; buff += "This is a) test of i) one ii) two iii) three a. four and b- five"
&gt;&gt;&gt; print re.sub(" \({0,1}(I+|i+|[a-zA-Z0-9])(\)|\.|-)","\n\g&lt;0&gt;",buff)

The Integrated Programme Framework of the ISSSS has been established to:
 (a) create a protective environment for civilians by strengthening the security forces, and improving discipline and control;
 (b) support the demobilization and reintegration of armed groups;
 (c) re-establish state functions in areas formerly controlled by armed groups, through the training and deployment of state officials (police, penitentiary, judicial and administration) to uphold the rule of law and public order,
 (d) ensure open road access and infrastructure;
 (e) promote a safe and dignified return of internally displaced persons and refugees; and
 (f) address priority social needs and key sources of conflict and initiate economic recovery.This is
 a) test of
 i) one
 ii) two
 iii) three
 a. four and
 b- five
</snippet></ROW><ROW><id>15933232</id><snippet>def foo(some,arguments):
    pass #do something here
</snippet></ROW><ROW><id>15933232</id><snippet>API_class_instance.register_callback(foo)
</snippet></ROW><ROW><id>15933232</id><snippet>API_class_instance</snippet></ROW><ROW><id>15933232</id><snippet>foo</snippet></ROW><ROW><id>15933321</id><snippet>&gt;&gt;&gt; d = {'4089e04a': ['24.0', '24.0', '24.0', '23.93', '23.93',\
'23.93'], '408b2e00': ['20.91', '33.33'], '408b2e0c': ['44.44']}
&gt;&gt;&gt; [item[0] for item in d.values()]
['24.0', '20.91', '44.44']
</snippet></ROW><ROW><id>15933404</id><snippet>setInterval</snippet></ROW><ROW><id>15933404</id><snippet>&lt;script type="text/javascript"&gt;
        function changebackground() {
            var colors = ["#0099cc","#c0c0c0","#587b2e",
"#990000","#000000","#1C8200","#987baa","#464646",
"#AA8971","#1987FC","#99081E"];

            setInterval(function() {
                var bodybgarrayno = Math.floor(Math.random() * colors.length);
                var selectedcolor = colors[bodybgarrayno];
                document.body.style.background = selectedcolor;
            }, 3000);
        }
        &lt;/script&gt;
</snippet></ROW><ROW><id>15933451</id><snippet>conn = httplib.HTTPSConnection("192.168.1.112/dj/api/image-gen")
conn.request("GET", "/")
</snippet></ROW><ROW><id>15933451</id><snippet>conn = httplib.HTTPSConnection("192.168.1.112")
conn.request("GET", "/dj/api/image-gen")
</snippet></ROW><ROW><id>15933451</id><snippet>data = urllib.urlopen('https://192.168.1.112/dj/api/image-gen').read()
</snippet></ROW><ROW><id>15933654</id><snippet>from math import *
import numpy as np
import matplotlib.pyplot as plt

k = range(11)

yvals = [[] for i in range(len(k))] #there should be a more pythonic way to
x = np.arange(0.4,5,0.1)               #create nested lists i think, ALM I added np.


for i in k:
    for j in x:
        i = float(i) #this conversion from int to float was to debug,       
        j = float(j) #it should be made better
        y=1/(2*j**2) + i/(2*j**2)
        i = int(i)
        yvals[i].append(y)


for i in k:
    plt.plot(x,yvals[i])

plt.show()
</snippet></ROW><ROW><id>15933700</id><snippet>mkvirtualenv lxml
pip install --no-install --build-dir="./build" lxml
cd build/lxml/
python setup.py build --static-deps --libxml2-version=2.7.8 --libxslt-version=1.1.27
cd -
pip install --no-download --build-dir="./build" lxml
</snippet></ROW><ROW><id>15933700</id><snippet>pip install \
    --install-option="--static-deps" \
    --install-option="--libxml2-version=2.7.8" \
    --install-option="--libxslt-version=1.1.27" \
    lxml
</snippet></ROW><ROW><id>15933700</id><snippet>pip install lxml</snippet></ROW><ROW><id>15933800</id><snippet>import urllib
from lxml import etree

noaa_xml = urllib.urlopen('http://graphical.weather.gov/xml/sample_products/browser_interface/ndfdXMLclient.php?listZipCodeList=20910+25414').read()
root = etree.fromstring(noaa_xml)
print root[0].text
</snippet></ROW><ROW><id>15933933</id><snippet>n/2</snippet></ROW><ROW><id>15933933</id><snippet>for</snippet></ROW><ROW><id>15933933</id><snippet>j = 1, 2, ... i</snippet></ROW><ROW><id>15933933</id><snippet>i</snippet></ROW><ROW><id>15933933</id><snippet>len(lst)</snippet></ROW><ROW><id>15933933</id><snippet>len(lst) - 2</snippet></ROW><ROW><id>15933933</id><snippet>1</snippet></ROW><ROW><id>15933933</id><snippet>while</snippet></ROW><ROW><id>15933933</id><snippet>for</snippet></ROW><ROW><id>15933933</id><snippet>j = 1, 2, ..., len(lst)</snippet></ROW><ROW><id>15933933</id><snippet>j = 1, 2, ..., len(lst) - 2</snippet></ROW><ROW><id>15933933</id><snippet>j = 1</snippet></ROW><ROW><id>15933933</id><snippet>O(n^2)</snippet></ROW><ROW><id>15933933</id><snippet>for</snippet></ROW><ROW><id>15933933</id><snippet>for</snippet></ROW><ROW><id>15933933</id><snippet>10**5</snippet></ROW><ROW><id>15933933</id><snippet>O(n^2)</snippet></ROW><ROW><id>15933933</id><snippet>def f3_simple(n):
    i = n                         
    condition = i&gt;0               
    while condition:              
        r1 = range(i)             
        for j in r1:              
            r2 = range(j, 10**5)  
            for k in r2:          
                print(i)          
        i -= 2                    
        condition = i&gt;0           
</snippet></ROW><ROW><id>15933933</id><snippet>def f3_simple(n):
    i = n                         # "length": O(1)
    condition = i&gt;0               # comparison: O(1)
    while condition:              # executed O(n) times per function call
        r1 = range(i)               # range(i): O(i)
        for j in r1:                # executed O(n) times per WHILE iteration
            r2 = range(j, 10**5)      # range(j, 10**5): O(10**5 - j) = O(1)
            for k in r2:              # executed O(1) times per OUTER FOR iteration
                print(i)                # print: O(1)
        i -= 2                      # decrement: O(1)
        condition = i&gt;0             # comparison: O(1)
</snippet></ROW><ROW><id>15933933</id><snippet>O(n^2)</snippet></ROW><ROW><id>15933952</id><snippet>In [184]: List1 = [['_', '_', '_'], ['_', '_', '_'], ['_','_','_']]

In [185]: List2 = [['Test', 'Word', 'Sudo'], ['Fu', 'Lu', 'Shou'], ['Ham', 'Spam', 'Eggs']]

In [186]: List3 = [3, 5, 7,]

In [187]: for x in List3:
    q,r=divmod(x,3)
    List1[q][r]=List2[q][r]
   .....:     

In [188]: List1
Out[188]: [['_', '_', '_'], ['Fu', '_', 'Shou'], ['_', 'Spam', '_']]
</snippet></ROW><ROW><id>15933997</id><snippet>&gt;&gt;&gt; fh = open("e:\\text.txt","rb")
&gt;&gt;&gt; fh.seek(0,2)
&gt;&gt;&gt; length = fh.tell()
&gt;&gt;&gt; for i in range(length, 0, -1):
        fh.seek(i-1,0)
        char = fh.read(1)
        print(char)
</snippet></ROW><ROW><id>15933997</id><snippet>&gt;&gt;&gt; fh = open("e:\\text.txt","rb")
&gt;&gt;&gt; fc = fh.read()
&gt;&gt;&gt; fh.close()
&gt;&gt;&gt; for i in range(len(fc),0,-1):
     print(fc[i-1])
</snippet></ROW><ROW><id>15934081</id><snippet>&gt;&gt;&gt; import warnings
&gt;&gt;&gt; 
&gt;&gt;&gt; warnings.filterwarnings('error')
&gt;&gt;&gt; 
&gt;&gt;&gt; try:
...     warnings.warn(Warning())
... except Warning:
...     print 'Warning was raised as an exception!'
... 
Warning was raised as an exception!
</snippet></ROW><ROW><id>15934081</id><snippet>filterwarnings</snippet></ROW><ROW><id>15934081</id><snippet>catch_warnings</snippet></ROW><ROW><id>15934081</id><snippet>filterwarnings</snippet></ROW><ROW><id>15934081</id><snippet>&gt;&gt;&gt; import warnings
&gt;&gt;&gt; with warnings.catch_warnings():
...     warnings.filterwarnings('error')
...     try:
...         warnings.warn(Warning())
...     except Warning: print 'Raised!'
... 
Raised!
&gt;&gt;&gt; try:
...     warnings.warn(Warning())
... except Warning: print 'Not raised!'
... 
__main__:2: Warning: 
</snippet></ROW><ROW><id>15934081</id><snippet>numpy.seterr</snippet></ROW><ROW><id>15934081</id><snippet>numpy.seterr</snippet></ROW><ROW><id>15934081</id><snippet>RuntimeWarning</snippet></ROW><ROW><id>15934081</id><snippet>print</snippet></ROW><ROW><id>15934081</id><snippet>numpy.seterr</snippet></ROW><ROW><id>15934081</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.array([1])/0   #'warn' mode
__main__:1: RuntimeWarning: divide by zero encountered in divide
array([0])
&gt;&gt;&gt; np.seterr(all='print')
{'over': 'warn', 'divide': 'warn', 'invalid': 'warn', 'under': 'ignore'}
&gt;&gt;&gt; np.array([1])/0   #'print' mode
Warning: divide by zero encountered in divide
array([0])
</snippet></ROW><ROW><id>15934081</id><snippet>stdout</snippet></ROW><ROW><id>15934081</id><snippet>seterr</snippet></ROW><ROW><id>15934081</id><snippet>numpy.seterr(all='error')</snippet></ROW><ROW><id>15934081</id><snippet>numpy.seterr(all='warn')</snippet></ROW><ROW><id>15934206</id><snippet>data = {
    'page1': {
        'word1': 5,
        'word2': 10,
        'word3': 2,
    },
    'page2': {
        'word2': 2,
        'word3': 1,
    }
}

from collections import defaultdict
class Entry(object):
    def __init__(self):
        self.pages = 0
        self.occurrences = 0
    def __iadd__(self, occurrences):
        self.pages += 1
        self.occurrences += occurrences
        return self
    def __str__(self):
        return '{} occurrences on {} pages'.format(self.occurrences, self.pages)
    def __repr__(self):
        return '&lt;Entry {} occurrences, {} pages&gt;'.format(self.occurrences, self.pages)

counts = defaultdict(Entry)

for page_words in data.itervalues():
    for word, count in page_words.iteritems():
        counts[word] += count

for word, entry in counts.iteritems():
    print word, ':', entry
</snippet></ROW><ROW><id>15934206</id><snippet>word1 : 5 occurrences on 1 pages
word3 : 3 occurrences on 2 pages
word2 : 12 occurrences on 2 pages
</snippet></ROW><ROW><id>15934206</id><snippet>n</snippet></ROW><ROW><id>15934206</id><snippet>n</snippet></ROW><ROW><id>15934206</id><snippet>from heapq import nlargest
def by_pages_then_occurrences(item):
    entry = item[1]
    return entry.pages, entry.occurrences
print nlargest(2, counts.iteritems(), key=by_pages_then_occurrences)
</snippet></ROW><ROW><id>15934386</id><snippet>re.split('\s{4,}',text)
</snippet></ROW><ROW><id>15934386</id><snippet>'\n\s{3,}'</snippet></ROW><ROW><id>15934443</id><snippet>def convert(i):
    result = ''
    for c in struct.pack('&gt;i', 67):
        c = hex(ord(c))[2:]
        if len(c) &lt; 2:
            c = '0%s' % c
        result += '\\x%s' % c
    return result

&gt;&gt;&gt; print convert(67)
\x00\x00\x00\x43
</snippet></ROW><ROW><id>15934742</id><snippet>sitecustomize.py</snippet></ROW><ROW><id>15934742</id><snippet>import site
site.addsitedir('/home/YOUR_USER/.local/lib/python2.7/site-packages')
</snippet></ROW><ROW><id>15934742</id><snippet>/home/YOUR_USER</snippet></ROW><ROW><id>15934742</id><snippet>python -c "from distutils.sysconfig import get_python_lib; print get_python_lib()"
</snippet></ROW><ROW><id>15935015</id><snippet>ImageActor</snippet></ROW><ROW><id>15935015</id><snippet>obj = mlab.imshow(img)
obj.actor.orientation = [0, 0, 0] # the required orientation 
obj.actor.position = [0, 0, 0] # the required  position 
obj.actor.scale = [0, 0, 0] # the required scale
</snippet></ROW><ROW><id>15935033</id><snippet>class InterpolatedArray(object):
    """ An array-like object that provides interpolated values between set points.
    """
    points = None
    wrap_value = None
    offset = None

    def _mod_delta(self, a, b):
        """ Perform a difference within a modular domain.
            Return a value in the range +/- wrap_value/2.
        """
        limit = self.wrap_value / 2.
        val = a - b
        if val &lt; -limit: val += self.wrap_value
        elif val &gt; limit: val -= self.wrap_value
        return val

    def __init__(self, points, wrap_value=None):
        """Initialization of InterpolatedArray instance.

        Parameter 'points' is a list of two-element tuples, each of which maps
        an input value to an output value.  The list does not need to be sorted.

        Optional parameter 'wrap_value' is used when the domain is closed, to
        indicate that both the input and output domains wrap.  For example, a
        table of degree values would provide a 'wrap_value' of 360.0.

        After sorting, a wrapped domain's output values must all be monotonic
        in either the positive or negative direction.

        For tables that don't wrap, attempts to interpolate values outside the
        input range cause a ValueError exception.
        """
        if wrap_value is None:
            points.sort()   # Sort in-place on first element of each tuple
        else:   # Force values to positive modular range
            points = sorted([(p[0]%wrap_value, p[1]%wrap_value) for p in points])
            # Wrapped domains must be monotonic, positive or negative
            monotonic = [points[x][1] &lt; points[x+1][1] for x in xrange(0,len(points)-1)]
            num_pos_steps = monotonic.count(True)
            num_neg_steps = monotonic.count(False)
            if num_pos_steps &gt; 1 and num_neg_steps &gt; 1: # Allow 1 wrap point
                raise ValueError("Table for wrapped domains must be monotonic.")
        self.wrap_value = wrap_value
        # Pre-compute inter-value slopes
        self.x_list, self.y_list = zip(*points)
        if wrap_value is None:
            intervals = zip(self.x_list, self.x_list[1:], self.y_list, self.y_list[1:])
            self.slopes = [(y2 - y1)/(x2 - x1) for x1, x2, y1, y2 in intervals]
        else:   # Create modular slopes, including wrap element
            x_rot = list(self.x_list[1:]); x_rot.append(self.x_list[0])
            y_rot = list(self.y_list[1:]); y_rot.append(self.y_list[0])
            intervals = zip(self.x_list, x_rot, self.y_list, y_rot)
            self.slopes = [self._mod_delta(y2, y1)/self._mod_delta(x2, x1) for x1, x2, y1, y2 in intervals]

    def __getitem__(self, x):       # Works with indexing operator []
        result = None
        if self.wrap_value is None:
            if x &lt; self.x_list[0] or x &gt; self.x_list[-1]:
                raise ValueError('Input value out-of-range: %s'%str(x))
            i = bisect.bisect_left(self.x_list, x) - 1
            result = self.y_list[i] + self.slopes[i] * (x - self.x_list[i])
        else:
            x %= self.wrap_value
            i = bisect.bisect_left(self.x_list, x) - 1
            result = self.y_list[i] + self.slopes[i] * self._mod_delta(x, self.x_list[i])
            result %= self.wrap_value
        return result
</snippet></ROW><ROW><id>15935033</id><snippet>import nose

def xfrange(start, stop, step=1.):
    """ Floating point equivalent to xrange()."""
    while start &lt; stop:
        yield start
        start += step

# Test simple inverted mapping for non-wrapped domain
pts = [(x,-x) for x in xfrange(1.,16., 1.)]
a = InterpolatedArray(pts)
for i in xfrange(1., 15., 0.1):
    nose.tools.assert_almost_equal(a[i], -i)
# Cause expected over/under range errors
result = False  # Assume failure
try: x = a[0.5]
except ValueError: result = True
assert result
result = False
try: x = a[15.5]
except ValueError: result = True
assert result

# Test simple wrapped domain
wrap = 360.
offset = 1.234
pts = [(x,((wrap/2.) - x)) for x in xfrange(offset, wrap+offset, 10.)]
a = InterpolatedArray(pts, wrap)
for i in xfrange(0.5, wrap, 0.1):
    nose.tools.assert_almost_equal(a[i], (((wrap/2.) - i)%wrap))
</snippet></ROW><ROW><id>15935038</id><snippet>file.tell()</snippet></ROW><ROW><id>15935038</id><snippet>stdio</snippet></ROW><ROW><id>15935038</id><snippet>ftell()</snippet></ROW><ROW><id>15935038</id><snippet>tell()</snippet></ROW><ROW><id>15935038</id><snippet>fgets()</snippet></ROW><ROW><id>15935038</id><snippet>XXX Windows support below is likely incomplete</snippet></ROW><ROW><id>15935038</id><snippet>tell</snippet></ROW><ROW><id>15935038</id><snippet>ftell()</snippet></ROW><ROW><id>15935038</id><snippet>tell()</snippet></ROW><ROW><id>15935038</id><snippet>io</snippet></ROW><ROW><id>15935038</id><snippet>tell</snippet></ROW><ROW><id>15935038</id><snippet>seek</snippet></ROW><ROW><id>15935504</id><snippet>self.figure = pl.figure()
</snippet></ROW><ROW><id>15935504</id><snippet>self.figure = matplotlib.figure.Figure()
</snippet></ROW><ROW><id>15935638</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>15935638</id><snippet>get_text()</snippet></ROW><ROW><id>15935638</id><snippet>tag</snippet></ROW><ROW><id>15935638</id><snippet>find_all()</snippet></ROW><ROW><id>15935638</id><snippet>&lt;table&gt;
    &lt;tr&gt;
        &lt;td align="left"&gt;11/10&lt;/td&gt;
        &lt;td&gt;N ARMY&lt;/td&gt;
        &lt;td&gt;-7.5&lt;/td&gt;
        &lt;td&gt;NL&lt;/td&gt;
        &lt;td&gt;&lt;b&gt;76-65&lt;/b&gt;&lt;/td&gt;
        &lt;td&gt;&lt;span style="color:green"&gt;W&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;&lt;span style="color:green"&gt;W&lt;/span&gt;&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td class="cell4"&gt;50.0%&lt;/td&gt;
        &lt;td class="cell4"&gt;76.9%&lt;/td&gt;
        &lt;td class="cell4"&gt;37.5%&lt;/td&gt;
        &lt;td class="cell5"&gt;37.1%&lt;/td&gt;
        &lt;td class="cell5"&gt;90.0%&lt;/td&gt;
        &lt;td class="cell5"&gt;29.4%&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</snippet></ROW><ROW><id>15935638</id><snippet>td</snippet></ROW><ROW><id>15935638</id><snippet>get_text()</snippet></ROW><ROW><id>15935638</id><snippet>from bs4 import BeautifulSoup

with open('test.html', 'rb') as html: #My local version of your html file
    soup = BeautifulSoup(html.read())

for td in soup.find_all('td'):
    print td.get_text()
</snippet></ROW><ROW><id>15935638</id><snippet>11/10
N ARMY
-7.5
NL
76-65
W
W

50.0%
76.9%
37.5%
37.1%
90.0%
29.4%
[Finished in 0.1s]
</snippet></ROW><ROW><id>15935794</id><snippet>import urllib2
import urllib
import json

url = 'http://nominatim.openstreetmap.org/search?'
place = 'MCRAE, GA'
params = urllib.urlencode(dict(q=place, format='json'))
# print(url+params)
response = urllib.urlopen(url+params)
data = json.loads(response.read())[0]
print(data['lon'], data['lat'])
</snippet></ROW><ROW><id>15935794</id><snippet>(u'-82.9006993', u'32.0679541')
</snippet></ROW><ROW><id>15935934</id><snippet>codecs.open()</snippet></ROW><ROW><id>15935934</id><snippet>with open('/tmp/ddfh', 'wb') as output:
    output.write(sa)
</snippet></ROW><ROW><id>15935934</id><snippet>str.join()</snippet></ROW><ROW><id>15935934</id><snippet>unicode.join()</snippet></ROW><ROW><id>15936125</id><snippet>for person in ENTIRELIST:
    person_name, toys = person.items()[0]
    if person_name != name:                # inverted to reduce nesting
        continue

    for (price_min, price_max), toy in toys.items():
        if price_min &lt;= price &lt; price_max:
            return toy
</snippet></ROW><ROW><id>15936125</id><snippet>GIRLMAP = {girl: GIRLTOYPRICES for girl in GIRLS}
BOYMAP = {boy: BOYTOYPRICES for boy in BOYS}

ENTIREMAP = dict(GIRLMAP, **BOYMAP)

for (price_min, price_max), toy in ENTIREMAP[name].items():
    if price_min &lt;= price &lt; price_max:
        return toy
</snippet></ROW><ROW><id>15936223</id><snippet>PRIVMSG #testblablub Es spielen mit:
</snippet></ROW><ROW><id>15936223</id><snippet>PRIVMSG #testblablub :Es spielen mit ...
</snippet></ROW><ROW><id>15936223</id><snippet>USER</snippet></ROW><ROW><id>15936223</id><snippet>&lt;username&gt; &lt;hostname&gt; &lt;servername&gt; :&lt;full name/realname&gt;
</snippet></ROW><ROW><id>15936223</id><snippet>\r\n</snippet></ROW><ROW><id>15936223</id><snippet>\n</snippet></ROW><ROW><id>15936223</id><snippet>\r\n</snippet></ROW><ROW><id>15936223</id><snippet>sock.sendall(...)</snippet></ROW><ROW><id>15936223</id><snippet>sock.send(...)</snippet></ROW><ROW><id>15936223</id><snippet>PING</snippet></ROW><ROW><id>15936223</id><snippet>PONG &lt;server-name (usually sent with PING)&gt;\r\n</snippet></ROW><ROW><id>15936223</id><snippet>JOIN</snippet></ROW><ROW><id>15936223</id><snippet>JOIN</snippet></ROW><ROW><id>15936223</id><snippet>PONG irc.iz-smart.net\r\n</snippet></ROW><ROW><id>15936223</id><snippet>JOIN</snippet></ROW><ROW><id>15936223</id><snippet>   def haupt_schleife(self):
        while True:
            antwort = sock.recv(4096)
            join = "JOIN #testblablub \r\n"
            print antwort
            if antwort[0:4] == "PING":
                self.pong(antwort, join)
            elif antwort.split()[3] == ":quiz.start":
                sock.sendall("PRIVMSG #testblablub Es spielen mit: "
                            +mitspieler1+" und "+mitspieler2+"\r\n"
                            )
                time.sleep(2)
                self.fragen(antwort)
            elif antwort.split()[3] == ":blau":
                sock.sendall("PRIVMSG #testblablub RISCHTISH!\r\n")
</snippet></ROW><ROW><id>15936223</id><snippet>self.fragen(...)</snippet></ROW><ROW><id>15936223</id><snippet>quiz.start</snippet></ROW><ROW><id>15936223</id><snippet>if</snippet></ROW><ROW><id>15936223</id><snippet>def fragen(...)</snippet></ROW><ROW><id>15936223</id><snippet>if</snippet></ROW><ROW><id>15936223</id><snippet>fragen(...)</snippet></ROW><ROW><id>15936223</id><snippet>    def fragen(self, antwort):
            sock.sendall("PRIVMSG #testblablub Welche Farbe hat der Himmel ? \r\n")
            time.sleep(3)
</snippet></ROW><ROW><id>15936223</id><snippet>if</snippet></ROW><ROW><id>15936223</id><snippet>elif</snippet></ROW><ROW><id>15936223</id><snippet>haupt_schleife</snippet></ROW><ROW><id>15936223</id><snippet>fragen</snippet></ROW><ROW><id>15936223</id><snippet>elif antwort.split()[3] == ":quiz.start":</snippet></ROW><ROW><id>15936260</id><snippet>as_p</snippet></ROW><ROW><id>15936260</id><snippet>{{ form.as_p }}
</snippet></ROW><ROW><id>15936260</id><snippet>&lt;input type="checkbox" id="livereport" name="livereport" {% if form.livereport.value %}checked="checked"{% endif %}&gt;
&lt;label for="livereport"&gt;Show live report&lt;/label&gt;
</snippet></ROW><ROW><id>15936389</id><snippet>cursor.execute("INSERT INTO MyTable VALUES(1, 'Having Trouble', '" + str(datetime.datetime.now()) + "')")
</snippet></ROW><ROW><id>15936574</id><snippet>testedInstance</snippet></ROW><ROW><id>15936574</id><snippet>self.testedInstance</snippet></ROW><ROW><id>15936574</id><snippet>def test_creation(self):
    self.testedInstance = Node(1)
    self.assertIsNotNone(self.testedInstance)
</snippet></ROW><ROW><id>15936574</id><snippet>Node</snippet></ROW><ROW><id>15936574</id><snippet>def test_creation(self):
    testedInstance = Node(1)
    self.assertIsNotNone(testedInstance)
</snippet></ROW><ROW><id>15936625</id><snippet>db.myApp.ensureIndex({'id':1})
</snippet></ROW><ROW><id>15936789</id><snippet>t[t=='']='0'
</snippet></ROW><ROW><id>15936827</id><snippet>sys.argv</snippet></ROW><ROW><id>15936865</id><snippet>explicit is better than implicit</snippet></ROW><ROW><id>15937087</id><snippet>def write_to_file(file_name, n_t_argument):
    with open(file_name + '.txt', 'a', newline='') as outputfile:
        wrtr  = csv.writer(outputfile, dialect = 'excel-tab')
        wrtr.writerow(n_t_argument)
</snippet></ROW><ROW><id>15937215</id><snippet>dedent</snippet></ROW><ROW><id>15937215</id><snippet>parser.add_argument('--argument', '-a', help='''
    this is my
    long help text
    ''')
</snippet></ROW><ROW><id>15937335</id><snippet>import os
import re

# Fetch all hashes and counts
file_c = open('num.txt')
file_c = file_c.read()
lines = re.findall(r'\w+\.txt \d+', file_c)
numbers = {}

for line in lines:
    line_split = line.split('.txt ')
    hash_name = line_split[0]
    count = line_split[1]

    numbers[hash_name] = count

#print(numbers)

# The input file
file_i = open('input.txt')
file_i = file_i.read()

for hash_name, count in numbers.iteritems():
    regex = '(' + hash_name.strip() + ')'
    result = re.findall(r'&gt;.*\|(' + regex + ')(.*?)&gt;', file_i, re.S)

    if len(result) &gt; 0:
        data_original = result[0][2]
        stripped_data = result[0][2][int(count):]

        file_i = file_i.replace(data_original, '\n' + stripped_data)

        #print(data_original)
        #print(stripped_data)

#print(file_i)


# Write the input file to new input_new.txt
f = open('input_new.txt', 'wt')
f.write(file_i)
</snippet></ROW><ROW><id>15937461</id><snippet>from mpl_toolkits.axes_grid.axislines import SubplotZero
from matplotlib.ticker import MultipleLocator, FuncFormatter
import matplotlib.pyplot as plt
import numpy as np

plt.ion()

fig = plt.figure(1)
ax = SubplotZero(fig, 111)
fig.add_subplot(ax)

for dir in ax.axis:
    ax.axis[dir].set_visible(dir.endswith("zero"))

ax.set_xlim(-.35,.4)
ax.set_ylim(-.25,.45)
ax.set_aspect('equal')

tick_format = lambda x, i: '' if x == 0.0 else '%.1f' % x
for a in [ax.xaxis, ax.yaxis]:
    a.set_minor_locator(MultipleLocator(0.02))
    a.set_major_formatter(FuncFormatter(tick_format))

theta = np.arange(2*np.pi/3,6*np.pi,0.01)
r = 1 / theta

ax.plot(r*np.cos(theta), r*np.sin(theta), lw=2)

plt.show()
raw_input()
</snippet></ROW><ROW><id>15937542</id><snippet>from pkg.module import MyClass</snippet></ROW><ROW><id>15937542</id><snippet>MyClass</snippet></ROW><ROW><id>15937542</id><snippet># Awkward
from package import reallylongmodule
reallylongmodule.MyClass()

# Less awkward
from package import reallylongmodule as rlm
rlm.MyClass()
</snippet></ROW><ROW><id>15937667</id><snippet>staticmethod</snippet></ROW><ROW><id>15937667</id><snippet>class A():
    bar = staticmethod(foo)

&gt;&gt;&gt; test = A()
&gt;&gt;&gt; test.bar()
Hello world
</snippet></ROW><ROW><id>15937719</id><snippet>activate</snippet></ROW><ROW><id>15937719</id><snippet>Scripts\activate.bat</snippet></ROW><ROW><id>15937719</id><snippet>set "TCL_LIBRARY=C:\Python27\tcl\tcl8.5"
</snippet></ROW><ROW><id>15937719</id><snippet>activate</snippet></ROW><ROW><id>15937719</id><snippet>TK_LIBRARY=/usr/lib/python2.7/lib-tk:/usr/lib/python2.7/site-packages/PIL:/usr/lib
TKPATH=/usr/lib/python2.7/lib-tk:/usr/lib/python2.7/site-packages/PIL:/usr/lib 
TCL_LIBRARY=/usr/lib 
export TCL_LIBRARY TK_LIBRARY TKKPATH
</snippet></ROW><ROW><id>15937803</id><snippet>sum()</snippet></ROW><ROW><id>15937803</id><snippet>len()</snippet></ROW><ROW><id>15937803</id><snippet>def get_average(self):
    return sum(self.gradeBook, 0.0) / len(self.gradeBook)
</snippet></ROW><ROW><id>15937807</id><snippet>x= math.floor(x)
</snippet></ROW><ROW><id>15937826</id><snippet>conn = engine.connect()
conn.execute("SET DateStyle='somestring'")
# work with conn
</snippet></ROW><ROW><id>15937826</id><snippet>from sqlalchemy import event
from sqlalchemy.engine import Engine

@event.listens_for(Engine, "connect")
def connect(dbapi_connection, connection_record):
    cursor = dbapi_connection.cursor()
    cursor.execute("SET DateStyle='somestring'")
    cursor.close()
</snippet></ROW><ROW><id>15937890</id><snippet>dayfirst</snippet></ROW><ROW><id>15937890</id><snippet>to_datetime</snippet></ROW><ROW><id>15937890</id><snippet>In [23]: pd.to_datetime(df.index, dayfirst=True)
Out[23]:
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2012-12-26 00:00:00, 2013-01-10 00:00:00]
Length: 2, Freq: None, Timezone: None
</snippet></ROW><ROW><id>15937890</id><snippet>format</snippet></ROW><ROW><id>15937890</id><snippet>In [24]: pd.to_datetime(df.index, format='%d/%m/%Y')
Out[24]:
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2012-12-26 00:00:00, 2013-01-10 00:00:00]
Length: 2, Freq: None, Timezone: None
</snippet></ROW><ROW><id>15937926</id><snippet>scipy.interpolate</snippet></ROW><ROW><id>15937926</id><snippet>k</snippet></ROW><ROW><id>15937926</id><snippet>1 ... k-1</snippet></ROW><ROW><id>15937926</id><snippet>k=3</snippet></ROW><ROW><id>15937926</id><snippet>splev(..., der=2)</snippet></ROW><ROW><id>15937973</id><snippet>zip()</snippet></ROW><ROW><id>15937973</id><snippet>&gt;&gt;&gt; list(zip(*matrix))
[(0, 3, 9, 10), (1, 7, 4, 3)]
</snippet></ROW><ROW><id>15937973</id><snippet>zip()</snippet></ROW><ROW><id>15937973</id><snippet>itertools.izip()</snippet></ROW><ROW><id>15937973</id><snippet>zip()</snippet></ROW><ROW><id>15938014</id><snippet>g</snippet></ROW><ROW><id>15938014</id><snippet>diff2</snippet></ROW><ROW><id>15938014</id><snippet>diff2</snippet></ROW><ROW><id>15938014</id><snippet>f</snippet></ROW><ROW><id>15938014</id><snippet>diff2</snippet></ROW><ROW><id>15938014</id><snippet>f</snippet></ROW><ROW><id>15938014</id><snippet>g</snippet></ROW><ROW><id>15938014</id><snippet>diff2</snippet></ROW><ROW><id>15938014</id><snippet>f(x-h)</snippet></ROW><ROW><id>15938014</id><snippet>g</snippet></ROW><ROW><id>15938014</id><snippet>diff2(g, t)</snippet></ROW><ROW><id>15938014</id><snippet>diff2</snippet></ROW><ROW><id>15938014</id><snippet>g</snippet></ROW><ROW><id>15938014</id><snippet>g</snippet></ROW><ROW><id>15938014</id><snippet>diff2</snippet></ROW><ROW><id>15938014</id><snippet>f(x-h) # calls g with x-h as the argument
f(x)   # calls g with x as the argument
f(x+h) # calls g with x+h as the argument
</snippet></ROW><ROW><id>15938014</id><snippet>diff2(g(t), t)</snippet></ROW><ROW><id>15938014</id><snippet>g(1.2)</snippet></ROW><ROW><id>15938014</id><snippet>g</snippet></ROW><ROW><id>15938014</id><snippet>diff2</snippet></ROW><ROW><id>15938014</id><snippet>diff2</snippet></ROW><ROW><id>15938014</id><snippet>f</snippet></ROW><ROW><id>15938014</id><snippet>f</snippet></ROW><ROW><id>15938014</id><snippet>g(1.2)</snippet></ROW><ROW><id>15938036</id><snippet>fa = aliased(FoodCategory)
s.query(Food, fa).filter(Food.category_id == fa.id).all()
</snippet></ROW><ROW><id>15938093</id><snippet>q = session.query(Link)</snippet></ROW><ROW><id>15938093</id><snippet>Query</snippet></ROW><ROW><id>15938093</id><snippet>session.close()</snippet></ROW><ROW><id>15938093</id><snippet>Query</snippet></ROW><ROW><id>15938093</id><snippet>Session</snippet></ROW><ROW><id>15938093</id><snippet>all()</snippet></ROW><ROW><id>15938093</id><snippet>Session</snippet></ROW><ROW><id>15938093</id><snippet>Session</snippet></ROW><ROW><id>15938094</id><snippet>from itertools import groupby

with open(f, "r") as fin:
    groups = groupby(fin, key=lambda k:k.strip() in ("HEADER", "FOOTER"))
    any(k for k,g in groups)
    content = list(next(groups)[1])
print content
</snippet></ROW><ROW><id>15938550</id><snippet>## Error metric
import numpy as np
def rmse(train,test):
    return np.sqrt(np.mean(pow(test - train+,2)))

## Print test set error
## Input the RandomForestRegressor, test set feature and test set known values
def rfErrCurve(rf_model,test_X,test_y):
    p = []
    for i,tree in enumerate(rf_model.estimators_):
                p.insert(i,tree.predict(test_X))
                print rmse(np.mean(p,axis=0),test_y)
</snippet></ROW><ROW><id>15938800</id><snippet>plt.plot(t, p)
</snippet></ROW><ROW><id>15938800</id><snippet>p</snippet></ROW><ROW><id>15938800</id><snippet>range(len(p))</snippet></ROW><ROW><id>15938829</id><snippet>sort</snippet></ROW><ROW><id>15938829</id><snippet>sort</snippet></ROW><ROW><id>15938829</id><snippet>key</snippet></ROW><ROW><id>15938829</id><snippet>sort</snippet></ROW><ROW><id>15938829</id><snippet>int</snippet></ROW><ROW><id>15938829</id><snippet>class MyList(list):
    def sort(self, cmp=None, key=None, reverse=None):
        if cmp is None and key is None:
            key = int
        return super(MyList, self).sort(cmp, key, reverse)
</snippet></ROW><ROW><id>15938829</id><snippet>super</snippet></ROW><ROW><id>15938829</id><snippet>cmp</snippet></ROW><ROW><id>15938829</id><snippet>sort</snippet></ROW><ROW><id>15938829</id><snippet>class MyList(list):
    def sort(self, key=None, reverse=None):
        if key is None:
            key = int
        return super().sort(key, reverse)
</snippet></ROW><ROW><id>15938829</id><snippet>old_sort = MyList.sort
def new_sort(self, cmp=None, key=None, reverse=None):
    if cmp is None and key is None:
        key = int
    return old_sort(self, cmp, key, reverse)
MyList.sort = types.UnboundMethodType(new_sort, None, MyList)
</snippet></ROW><ROW><id>15938829</id><snippet>old_sort = MyList.sort
def new_sort(self, key=None, reverse=None):
    if key is None:
        key = int
    return old_sort(self, key, reverse)
MyList.sort = new_sort
</snippet></ROW><ROW><id>15938918</id><snippet>set_data_interval</snippet></ROW><ROW><id>15938918</id><snippet>ax = plt.subplot(111)
plt.plot(x, y)
plot.axis((0, 10, -5, 5))
</snippet></ROW><ROW><id>15938918</id><snippet>ax.xaxis.set_data_interval(0, 10)
ax.yaxis.set_data_interval(-5, 5)
</snippet></ROW><ROW><id>15938918</id><snippet>axis</snippet></ROW><ROW><id>15938918</id><snippet>ax.xaxis</snippet></ROW><ROW><id>15938918</id><snippet>ax.yaxis</snippet></ROW><ROW><id>15939064</id><snippet>pythonpath = os.env['PYTHONPATH']
file_relative_path = os.path.join('subdir', 'resourcefile') // e.g. subdir/resourcefile
for dir in pythonpath.split(os.pathsep):
    resource_path = os.path.join(dir, file_relative_path)
    if os.path.exists(resource_path):
        return resource_path
</snippet></ROW><ROW><id>15939080</id><snippet>rows</snippet></ROW><ROW><id>15939080</id><snippet>cols</snippet></ROW><ROW><id>15939080</id><snippet>&gt;&gt;&gt; l = [[1, 2, 3], [4, 5, 6]]
&gt;&gt;&gt; x = l[0][1:]
&gt;&gt;&gt; x
[2, 3]
&gt;&gt;&gt; l[0][1] = 4
&gt;&gt;&gt; x
[2, 3]
</snippet></ROW><ROW><id>15939080</id><snippet>def has_someone_won(board):
    # Rows
    for row in board:
        if row[0] == row[1] == row[2] != '-':
            return True

    # Columns
    for i in range(3):
        if board[0][i] == board[1][i] == board[2][i] != '-':
            return True

    # Diagonal 1
    if board[0][0] == board[1][1] == board[2][2] != '-':
        return True

    # Diagonal 2
    if board[2][0] == board[1][1] == board[0][2] != '-':
        return True

    # There's no winner
    return False
</snippet></ROW><ROW><id>15939100</id><snippet>s = Decimal((13591409+545140134*k)) / Decimal(((640320**3)**k))
</snippet></ROW><ROW><id>15939100</id><snippet>r</snippet></ROW><ROW><id>15939365</id><snippet>conn.commit()
</snippet></ROW><ROW><id>15939365</id><snippet>query = "INSERT INTO price_update (model) values (%s)"
...
x.execute(query, ('12345',))
</snippet></ROW><ROW><id>15939392</id><snippet>ctypes</snippet></ROW><ROW><id>15939392</id><snippet>ctypes.c_short(int('FF20', 16)).value
</snippet></ROW><ROW><id>15939395</id><snippet>reduce(np.maximum, matrix)</snippet></ROW><ROW><id>15939395</id><snippet>import numpy as np
np.random.seed(0)

N, M = 1000, 1000
matrix = [np.random.rand(N) for _ in xrange(M)]

%timeit np.max(matrix, axis = 0)
%timeit np.max(np.vstack(matrix), axis = 0)
%timeit reduce(np.maximum, matrix)
</snippet></ROW><ROW><id>15939395</id><snippet>10 loops, best of 3: 116 ms per loop
10 loops, best of 3: 10.6 ms per loop
100 loops, best of 3: 3.66 ms per loop
</snippet></ROW><ROW><id>15939395</id><snippet>def argmax_list(matrix):
    m = matrix[0].copy()
    idx = np.zeros(len(m), dtype=np.int)
    for i, a in enumerate(matrix[1:], 1):
        mask = m &lt; a
        m[mask] = a[mask]
        idx[mask] = i
    return idx
</snippet></ROW><ROW><id>15939395</id><snippet>argmax()</snippet></ROW><ROW><id>15939395</id><snippet>%timeit np.argmax(matrix, axis=0)
%timeit np.argmax(np.vstack(matrix), axis=0)
%timeit argmax_list(matrix)
</snippet></ROW><ROW><id>15939395</id><snippet>10 loops, best of 3: 131 ms per loop
10 loops, best of 3: 21 ms per loop
100 loops, best of 3: 13.1 ms per loop
</snippet></ROW><ROW><id>15939457</id><snippet>tees = pd.Index(datetime(2000, 1, 1, 23, 0, n) for n in xrange(8))
df2 = df1.reindex(df1.index + tees)
df2['value'] = df2.value.ffill()

In [14]: df2
Out[14]:
                            value
2000-01-01 23:00:00           NaN
2000-01-01 23:00:00.100000     10
2000-01-01 23:00:01            10
2000-01-01 23:00:01.200000      8
2000-01-01 23:00:01.600000      0
2000-01-01 23:00:02             0
2000-01-01 23:00:03             0
2000-01-01 23:00:04             0
2000-01-01 23:00:05             0
2000-01-01 23:00:06             0
2000-01-01 23:00:06.300000      4
2000-01-01 23:00:07             4
</snippet></ROW><ROW><id>15939457</id><snippet>shift</snippet></ROW><ROW><id>15939457</id><snippet>df3['difference'] = df3['index'].shift(-1) - df3['index']
df3['tot'] = df3.apply(lambda row: np.nan
                                   if row['difference'].seconds &gt; 2  # a not very robust check for NaT
                                   else row['difference'].microseconds * row['value'] / 1000000,
                        axis=1)

In [17]: df3
Out[17]:
                        index  value      difference  tot
0         2000-01-01 23:00:00    NaN 00:00:00.100000  NaN
1  2000-01-01 23:00:00.100000     10 00:00:00.900000  9.0
2         2000-01-01 23:00:01     10 00:00:00.200000  2.0
3  2000-01-01 23:00:01.200000      8 00:00:00.400000  3.2
4  2000-01-01 23:00:01.600000      0 00:00:00.400000  0.0
5         2000-01-01 23:00:02      0        00:00:01  0.0
6         2000-01-01 23:00:03      0        00:00:01  0.0
7         2000-01-01 23:00:04      0        00:00:01  0.0
8         2000-01-01 23:00:05      0        00:00:01  0.0
9         2000-01-01 23:00:06      0 00:00:00.300000  0.0
10 2000-01-01 23:00:06.300000      4 00:00:00.700000  2.8
11        2000-01-01 23:00:07      4             NaT  NaN
</snippet></ROW><ROW><id>15939457</id><snippet>In [18]: df3.set_index('index')['tot'].resample('S', how='sum')
Out[18]:
index
2000-01-01 23:00:00    9.0
2000-01-01 23:00:01    5.2
2000-01-01 23:00:02    0.0
2000-01-01 23:00:03    0.0
2000-01-01 23:00:04    0.0
2000-01-01 23:00:05    0.0
2000-01-01 23:00:06    2.8
2000-01-01 23:00:07    NaN
Freq: S, dtype: float64
</snippet></ROW><ROW><id>15939802</id><snippet>array</snippet></ROW><ROW><id>15939802</id><snippet>    for row in range(0,self.NRows):                                
        binvaluesL1.read(L1,self.NCols);
        binvaluesPF.read(PF,self.NCols);
        dataL1 = Num.array(binvaluesL1, dtype=Num.float);
        dataPF = Num.array(binvaluesPF, dtype=Num.float);
        dataSPF = dataL1 + dataPF;
        binvaluesSPF.fromlist(Num.array(dataSPF).tolist());                                
        for col in range(0,self.NCols):                     
            if(dataL1[col] &gt;= self.MetalThreshold and dataPF[col] &gt;= self.PFThreshold):
                if(col &gt;= int(firstPoint[0]) and col &lt;= int(secondPoint[0]) and row &gt;= int(firstPoint[1]) and row &lt;= int(secondPoint[1])):
                    posX = self.startX + (self.gridSizeX * col);                         
                    posY = self.startY - (self.gridSizeY * row);
                    self.UTM2LL(posY,posX);
                    tmp1 = self.decdeg2dms(posY);
                    tmp2 = self.decdeg2dms(posX);
                    strTarget = "Decimal Degree:: " + str(posX) + "E " + str(posY) + "N \t Lat long:: " + str(tmp1) + " " + str(tmp2) + "\n";
                    targetFilename.write(strTarget);
        binvaluesSPF.tofile(SPF);
</snippet></ROW><ROW><id>15939802</id><snippet>array</snippet></ROW><ROW><id>15939802</id><snippet>grid = np.fromfile(yourfile, dtype=np.float32).reshape(ncols, nrows)</snippet></ROW><ROW><id>15939802</id><snippet>import numpy as np
import pyproj

def main():
    config = Config('PF.bin.hdr')
    grid1, grid2 = load_data('l1.bin', 'PF.bin', config.nrows, config.ncols)

    spf = grid1 + grid2
    spf.tofile('pySPF_L1.bin')

    easting_aoi, northing_aoi = subset_data(grid1, grid2, config)
    save_selected_region(easting_aoi, northing_aoi, config.zone, 
                        'testPythonROI.txt')

def load_data(filename1, filename2, nrows, ncols):
    """It would really be good to use more descriptive variable names than "L1"
    and "PF".  I have no idea what L1 and PF are, so I'm just calling them
    grid1 and grid2."""
    grid1 = np.fromfile(filename1, dtype=np.float32).reshape(nrows, ncols)
    grid2 = np.fromfile(filename2, dtype=np.float32).reshape(nrows, ncols)
    return grid1, grid2

def subset_data(grid1, grid2, config):
    """Select points that satisfy some threshold criteria (explain??) and are
    within a user-specified rectangular AOI."""
    northing, easting = np.mgrid[:config.nrows, :config.ncols]
    easting = config.xstart + config.xgridsize * easting
    northing = config.ystart + config.ygridsize * northing

    grids = grid1, grid2, easting, northing
    grid1, grid2, easting, northing = [item[config.user_aoi] for item in grids]

    mask = (grid1 &gt;= config.metal_threshold) &amp; (grid2 &gt;= config.pf_threshold)
    return easting[mask], northing[mask]

def save_selected_region(easting, northing, zone, filename):
    """Convert the given eastings and northings (in UTM zone "zone") to 
    lat/long and save to a tab-delimited-text file."""
    lat, lon = utm2geographic(easting, northing, zone)
    data = np.vstack([easting, northing, lat, lon]).T
    with open(filename, 'w') as outfile:
        outfile.write('Easting\tNorthing\tLatitude\tLongitude\n')
        np.savetxt(outfile, data, delimiter='\t')

def utm2geographic(easting, northing, zone):
    """We need to know which datum/ellipsoid the UTM coords are in as well!!!!
    I'm assuming it's a Clark 1866 ellipsoid, based on the numbers in your
    code..."""
    utm = pyproj.Proj(proj='utm', zone=zone, ellip='clrk66')
    geographic = pyproj.Proj(proj='latlong', ellip='clrk66')
    return pyproj.transform(utm, geographic, easting, northing)

class Config(object):
    """Read and store configuration values for (something?)."""
    config_file = 'config.txt'
    def __init__(self, filename):
        """You should add docstrings to clarify what you're expecting 
        "filename" to contain."""
        with open(filename, 'r') as infile:
            crs_values = list(infile)[12].split(',')
        crs_values = [float(item) for item in crs_values]
        self.xstart, self.ystart = crs_values[3:5]
        self.xgridsize, self.ygridsize = crs_values[5:7]
        self.zone = int(crs_values[7])

        with open(self.config_file, 'r') as infile:
            srs_values = list(infile)
        self.nrows, self.ncols = srs_values[1], srs_values[4]

        # It would be good to explain a bit about these (say, units, etc)
        self.metal_threshold = 5.0
        self.pf_threshold = 0.9

        self.user_aoi = self.read_user_aoi()

    def read_user_aoi(self):
        """Get an area of interest of the grids in pixel coordinates."""
        top_left = raw_input('Enter top left index\t')
        bottom_right = raw_input('Enter bottom right index\t')
        min_i, min_j = [int(item) for item in top_left.split()]
        max_i, max_j = [int(item) for item in bottom_right.split()]
        return slice(min_i, max_i), slice(min_j, max_j)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>15939806</id><snippet>import numpy as np

A = np.array([1,2,3,4,5,6,7])
B = np.array([2,4,6])
C = np.searchsorted(A, B)

D = np.delete(np.arange(np.alen(A)), C)

D
#array([0, 2, 4, 6])
</snippet></ROW><ROW><id>15939892</id><snippet>outHandle.close()
</snippet></ROW><ROW><id>15939892</id><snippet>close</snippet></ROW><ROW><id>15939892</id><snippet>flush</snippet></ROW><ROW><id>15940424</id><snippet>node</snippet></ROW><ROW><id>15940424</id><snippet>1 + node_size[node]+j</snippet></ROW><ROW><id>15940424</id><snippet>node</snippet></ROW><ROW><id>15940424</id><snippet>node</snippet></ROW><ROW><id>15940424</id><snippet>node</snippet></ROW><ROW><id>15940424</id><snippet>node</snippet></ROW><ROW><id>15940424</id><snippet>node</snippet></ROW><ROW><id>15940424</id><snippet>it = (1 + node_size[node]+j for node in [node] for j in xrange(3))
</snippet></ROW><ROW><id>15940424</id><snippet>node</snippet></ROW><ROW><id>15940424</id><snippet>def gen(nodeVal):
    for j in xrange(3):
        yield 1 + node_size[nodeVal]+j
for node in range(1, 4):
    iters.append(gen(node))
</snippet></ROW><ROW><id>15940424</id><snippet>nodeVal</snippet></ROW><ROW><id>15940424</id><snippet>nodeVal</snippet></ROW><ROW><id>15940542</id><snippet>src/mac/_lightblue.py</snippet></ROW><ROW><id>15940542</id><snippet>deviceInquiryComplete_error_aborted_ = objc.selector(
    deviceInquiryComplete_error_aborted_, signature="v@:@iB")
</snippet></ROW><ROW><id>15940542</id><snippet>v@:@iB</snippet></ROW><ROW><id>15940542</id><snippet>v@:@iZ</snippet></ROW><ROW><id>15940542</id><snippet>cd &lt;lightblue_root&gt; &amp;&amp; sudo python setup.py install
</snippet></ROW><ROW><id>15940542</id><snippet>LightAquaBlue.framework</snippet></ROW><ROW><id>15940542</id><snippet>/Library/Frameworks</snippet></ROW><ROW><id>15940636</id><snippet>    pygame.draw.rect(DISPLAYSURF, GREEN, (20(N), floorx, TILESIZE, TILESIZE))
</snippet></ROW><ROW><id>15940636</id><snippet>20(N)</snippet></ROW><ROW><id>15940636</id><snippet>20*N</snippet></ROW><ROW><id>15940636</id><snippet>while (N &lt; tilesNeeded):</snippet></ROW><ROW><id>15940636</id><snippet>for N in range(tilesNeeded):</snippet></ROW><ROW><id>15940827</id><snippet>list</snippet></ROW><ROW><id>15940827</id><snippet>&gt;&gt;&gt; d={'world':'hunger'}
&gt;&gt;&gt; s=['world']
&gt;&gt;&gt; d[s[0]]
'hunger'
&gt;&gt;&gt; c = d[s[0]]
&gt;&gt;&gt; c
'hunger'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15940827</id><snippet>has_key</snippet></ROW><ROW><id>15940827</id><snippet>KeyError</snippet></ROW><ROW><id>15941034</id><snippet>browser.form.enctype = ""</snippet></ROW><ROW><id>15941054</id><snippet>re.compile(r"([A]*)*")
</snippet></ROW><ROW><id>15941054</id><snippet>[A]*</snippet></ROW><ROW><id>15941054</id><snippet>([A]*)*</snippet></ROW><ROW><id>15941054</id><snippet>[A]*</snippet></ROW><ROW><id>15941054</id><snippet>r"http://[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+([-A-Z0-9a-z_$.+!*()/\\\,:;@&amp;=?~#%]*)"
</snippet></ROW><ROW><id>15941054</id><snippet>*</snippet></ROW><ROW><id>15941243</id><snippet>url_for</snippet></ROW><ROW><id>15941243</id><snippet>url_for</snippet></ROW><ROW><id>15941243</id><snippet>/accounts/</snippet></ROW><ROW><id>15941243</id><snippet>&lt;a data-bind="attr: { href: '{{ url_for('account') }}' + '/' + id() }"&gt;
    &lt;span data-bind="text: name"&gt;&lt;/span&gt;
&lt;/a&gt;
</snippet></ROW><ROW><id>15941349</id><snippet>&lt;record id="view_certificados_tree" model="ir.ui.view"&gt;
    &lt;field name="name"&gt;certificados.tree&lt;/field&gt;
    &lt;field name="model"&gt;certificados.certificados&lt;/field&gt;
    &lt;field name="type"&gt;tree&lt;/field&gt;
    &lt;field name="arch" type="xml"&gt;
        &lt;tree string="Certificados" &gt;
            &lt;field name="Registro_Numero" /&gt;
            &lt;field name="Fecha_de_Emision" /&gt;
            &lt;field name="Fecha_de_Solicitud" /&gt;
            &lt;field name="Fecha_del_Documento" /&gt;
            &lt;field name="Vigencia" /&gt;
            &lt;field name="descripcion" /&gt;
        &lt;/tree&gt;
    &lt;/field&gt;
&lt;/record&gt;
</snippet></ROW><ROW><id>15941381</id><snippet>with open('youfilename.sql', 'r') as f:
    fileAsString = f.read().replace("\n", "")

sqlStatements = fileAsString.split(";")
</snippet></ROW><ROW><id>15941381</id><snippet>cursor = db.cursor()
for statement in sqlStatements:
    try:
        cursor.execute(statement)
        db.commit()
    except:     
        db.rollback()
</snippet></ROW><ROW><id>15941619</id><snippet>multiprocessing</snippet></ROW><ROW><id>15941619</id><snippet>Queue</snippet></ROW><ROW><id>15941619</id><snippet>multiprocessing</snippet></ROW><ROW><id>15941619</id><snippet>import multiprocessing
from multiprocessing import Queue, Process
from Queue import Empty as QueueEmpty

# Assuming this text is very very very very large
text="Here I am writing some nonsense\nBut people will read\n..."

def read(q):
   """Read the text and put in a queue"""
   for line in text.split("\n"):
       q.put(line)

def work(qi, qo):
   """Put the line into the queue out"""
   while True:
        try:
            data = qi.get(timeout = 1) # Timeout after 1 second
            qo.put(data)
        except QueueEmpty:
            return # Exit when all work is done
        except:
            raise # Raise all other errors

def join(q):
    """Join all the output queue and write to a text file"""
    f = open("file.txt", w)
    while True:
         try:
            f.write(q.get(timeout=1))
         except QueueEmpty:
            f.close()
            return
         except:
            raise

def main():
   # Input queue
   qi = Queue()
   # Output queue
   qo = Queue()
   # Start the producer
   Process(target = read, args = (qi, ).start()
   # Start 8 consumers
   for i in range(8):
        Process(target = work, args = (qi, qo, ).start()
   # Final process to handle the queue out
   Process(target = join, args = (qo, ).start()
</snippet></ROW><ROW><id>15941975</id><snippet>item = QtGui.QTreeWidgetItem()
item.mydata = my_namedtuple
</snippet></ROW><ROW><id>15942113</id><snippet>int</snippet></ROW><ROW><id>15942113</id><snippet>float</snippet></ROW><ROW><id>15942113</id><snippet>ast</snippet></ROW><ROW><id>15942113</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval('1')
1
&gt;&gt;&gt; ast.literal_eval('1.0')
1.0
&gt;&gt;&gt; ast.literal_eval('1e10')
10000000000.0
</snippet></ROW><ROW><id>15942156</id><snippet>py.test</snippet></ROW><ROW><id>15942156</id><snippet>py.test</snippet></ROW><ROW><id>15942156</id><snippet>assert</snippet></ROW><ROW><id>15942156</id><snippet>py.test</snippet></ROW><ROW><id>15942156</id><snippet>unittest</snippet></ROW><ROW><id>15942156</id><snippet>@pytest.mark.my_meta_name</snippet></ROW><ROW><id>15942156</id><snippet>my_meta_name</snippet></ROW><ROW><id>15942156</id><snippet>py.test --markers</snippet></ROW><ROW><id>15942156</id><snippet># content of test_server.py

import pytest

@pytest.mark.webtest
def test_send_http():
    pass # perform some webtest test for your app

def test_always_succeeds():
    assert 2 == 3 - 1

def test_will_always_fail():
    assert 4 == 5
</snippet></ROW><ROW><id>15942156</id><snippet>-m</snippet></ROW><ROW><id>15942156</id><snippet>test_send_http()</snippet></ROW><ROW><id>15942156</id><snippet>py.test -v -m webtest
</snippet></ROW><ROW><id>15942362</id><snippet>yaml.dump(data, ff, allow_unicode=True)
</snippet></ROW><ROW><id>15942362</id><snippet>json.dump(data, outfile, ensure_ascii=False)
</snippet></ROW><ROW><id>15942421</id><snippet>udev</snippet></ROW><ROW><id>15942421</id><snippet>MAJOR number 8</snippet></ROW><ROW><id>15942421</id><snippet>for device in context.list_devices(MAJOR='8'):
    if (device.device_type == 'disk'):
        print "{}, ({})".format(device.device_node, device.device_type)
</snippet></ROW><ROW><id>15942421</id><snippet>/dev/sda, (disk)
/dev/sdf, (disk)
/dev/sdb, (disk)
/dev/sdc, (disk)
/dev/sdd, (disk)
/dev/sde, (disk)
/dev/sr0, (disk)
/dev/loop0, (disk)
/dev/loop1, (disk)
/dev/loop2, (disk)
/dev/loop3, (disk)
/dev/loop4, (disk)
/dev/loop5, (disk)
/dev/loop6, (disk)
/dev/loop7, (disk)
</snippet></ROW><ROW><id>15942421</id><snippet>/dev/sda, (disk)
/dev/sdf, (disk)
/dev/sdb, (disk)
/dev/sdc, (disk)
/dev/sdd, (disk)
/dev/sde, (disk)
</snippet></ROW><ROW><id>15942421</id><snippet>sdX</snippet></ROW><ROW><id>15942421</id><snippet>hdX</snippet></ROW><ROW><id>15942421</id><snippet>/dev/hdX</snippet></ROW><ROW><id>15942421</id><snippet>for device in context.list_devices(DEVTYPE='disk'):
    major = device['MAJOR']
    if major == '8' or major == '3':
        print "{}, ({})".format(device.device_node, device.device_type)
</snippet></ROW><ROW><id>15942639</id><snippet>np.array</snippet></ROW><ROW><id>15942639</id><snippet>ndmin</snippet></ROW><ROW><id>15942639</id><snippet>copy=False</snippet></ROW><ROW><id>15942639</id><snippet>arr.shape += (1,) * (4 - arr.ndim)
</snippet></ROW><ROW><id>15942833</id><snippet>import os
import shutil
files = os.listdir("Path")
for file in files:
    if file.startswith("Hello"):
       shutil.copy("Full path to file", "Full path to dest folder")
</snippet></ROW><ROW><id>15942919</id><snippet>turn_lf = lt(step_size )
</snippet></ROW><ROW><id>15942919</id><snippet>lt</snippet></ROW><ROW><id>15942919</id><snippet>step_size</snippet></ROW><ROW><id>15942919</id><snippet>lt</snippet></ROW><ROW><id>15942919</id><snippet>step_size</snippet></ROW><ROW><id>15942919</id><snippet>functools.partial</snippet></ROW><ROW><id>15942919</id><snippet>step_size</snippet></ROW><ROW><id>15942919</id><snippet>from functools import partial
turn_lf = partial(lt, step_size) # `lt` is not called yet.

# Now, later on, we can do
turn_lf() # and it's just as if we did `lt(step_size)`.
# So now we can store `turn_lf` in a dict, look it up and call it later, etc.

# Similarly for all the other functions you want to make.
</snippet></ROW><ROW><id>15942919</id><snippet>color</snippet></ROW><ROW><id>15942919</id><snippet>'brown'</snippet></ROW><ROW><id>15942919</id><snippet>partial(color, 'brown')</snippet></ROW><ROW><id>15942919</id><snippet>"z" : delete</snippet></ROW><ROW><id>15942919</id><snippet>undo</snippet></ROW><ROW><id>15942919</id><snippet>partial(undo)</snippet></ROW><ROW><id>15942919</id><snippet>undo</snippet></ROW><ROW><id>15942919</id><snippet>for key in key_action:
    pressed_key = key
    activated_key = key_action[key]
</snippet></ROW><ROW><id>15942919</id><snippet>for pressed_key, activated_key in key_action.items():
</snippet></ROW><ROW><id>15943039</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.mlab import griddata
from mpl_toolkits.mplot3d import Axes3D

data=np.genfromtxt('fluorescence_2.txt')
x=data[:,0]
fig=plt.figure()
ax=fig.gca(projection='3d')

for i in range(1,17,2):
    y=data[:,i]
    z=data[:,i+1]
    xi=np.linspace(min(x),max(x))
    yi=np.linspace(min(y),max(y))
    X,Y=np.meshgrid(xi,yi)
    Z=griddata(x,y,z,xi,yi)
    ax.plot_surface(X,Y,Z,rstride=50,cstride=1,cmap='RdYlBu')
    ax.set_zlim3d(np.min(Z),np.max(Z))

ax.set_title('Fluorescence spectra (WL ex = 350 nm)')
ax.set_xlabel('WL em (nm)')
ax.set_ylabel('Spectrum')
ax.set_yticks([])
ax.set_zlabel('Emission')
plt.show()
</snippet></ROW><ROW><id>15943601</id><snippet>last_file</snippet></ROW><ROW><id>15943601</id><snippet>None</snippet></ROW><ROW><id>15943601</id><snippet>import glob
import os

last_file = None
time=0
for i in glob.glob("Hello.txt_*"):
    if os.path.getctime(i) &gt; time: 
        last_file = i
</snippet></ROW><ROW><id>15943975</id><snippet>.shape</snippet></ROW><ROW><id>15943975</id><snippet>len(DataFrame.index)</snippet></ROW><ROW><id>15943975</id><snippet>In [1]: import numpy as np

In [2]: import pandas as pd

In [3]: df =pd.DataFrame(np.arange(9).reshape(3,3))

In [4]: df
Out[4]: 
   0  1  2
0  0  1  2
1  3  4  5
2  6  7  8

In [5]: df.shape
Out[5]: (3, 3)

In [6]: timeit df.shape
1000000 loops, best of 3: 1.17 us per loop

In [7]: timeit df[0].count()
10000 loops, best of 3: 56 us per loop

In [8]: len(df.index)
Out[8]: 3

In [9]: timeit len(df.index)
1000000 loops, best of 3: 381 ns per loop
</snippet></ROW><ROW><id>15943975</id><snippet>len(df.index)</snippet></ROW><ROW><id>15943975</id><snippet>df[0].count()</snippet></ROW><ROW><id>15943975</id><snippet>count</snippet></ROW><ROW><id>15943975</id><snippet>NaN</snippet></ROW><ROW><id>15944304</id><snippet>"&amp;Close"</snippet></ROW><ROW><id>15944304</id><snippet>&amp;&amp;</snippet></ROW><ROW><id>15944304</id><snippet>"&amp;Close"</snippet></ROW><ROW><id>15944304</id><snippet>"&amp;Copy"</snippet></ROW><ROW><id>15944344</id><snippet>getattr()</snippet></ROW><ROW><id>15944344</id><snippet>__init__</snippet></ROW><ROW><id>15944344</id><snippet>class A(object):
    _methods_dict = {
        'a': 'f1',
        'b': 'f2'
    }    

    def __init__(self, mode='a'):
        self.f = getattr(self, self._methods_dict[mode])

    def f1(self, x):
        return x

    def f2(self, x):
        return x ** 2
</snippet></ROW><ROW><id>15944344</id><snippet>class A(object):
    _methods_dict = {
        'a': 'f1',
        'b': 'f2'
    }

    def __init__(self,mode = 'a'):
        self._mode = mode

    @property
    def f(self):
        return getattr(self, self._methods_dict[self._mode])

    def f1(self, x):
        return x

    def f2(self, x):
        return x ** 2
</snippet></ROW><ROW><id>15944344</id><snippet>f</snippet></ROW><ROW><id>15944344</id><snippet>&gt;&gt;&gt; a1 = A()
&gt;&gt;&gt; a2 = A('b')
&gt;&gt;&gt; a1.f(10)
10
&gt;&gt;&gt; a2.f(10)
100
</snippet></ROW><ROW><id>15944344</id><snippet>&gt;&gt;&gt; vars(a1)
{'f': &lt;bound method A.f1 of &lt;__main__.A object at 0x10aa1ec50&gt;&gt;}
&gt;&gt;&gt; vars(a2)
{'f': &lt;bound method A.f2 of &lt;__main__.A object at 0x10aa1ed50&gt;&gt;}
</snippet></ROW><ROW><id>15944344</id><snippet>&gt;&gt;&gt; vars(a1)
{'_mode': 'a'}
&gt;&gt;&gt; vars(a2)
{'_mode': 'b'}
</snippet></ROW><ROW><id>15944689</id><snippet>input_formats</snippet></ROW><ROW><id>15944835</id><snippet>hclust()</snippet></ROW><ROW><id>15944835</id><snippet>from rpy2.robjects.packages import importr
stats = importr("stats")
d = stats.as_dist(m)
hc = r.hclust(d)
</snippet></ROW><ROW><id>15945430</id><snippet>_module</snippet></ROW><ROW><id>15945430</id><snippet>csv.py</snippet></ROW><ROW><id>15945430</id><snippet>_csv.c</snippet></ROW><ROW><id>15945430</id><snippet>Dialect</snippet></ROW><ROW><id>15945430</id><snippet>Sniffer</snippet></ROW><ROW><id>15945430</id><snippet>DictReader</snippet></ROW><ROW><id>15945430</id><snippet>DictWriter</snippet></ROW><ROW><id>15945430</id><snippet>module</snippet></ROW><ROW><id>15945430</id><snippet>_module</snippet></ROW><ROW><id>15945684</id><snippet>array([1., 2, 3]) * [3, 4, 5]
</snippet></ROW><ROW><id>15945684</id><snippet>test_ufunc.py</snippet></ROW><ROW><id>15945732</id><snippet>Number(...) =&gt; Int/Float/...</snippet></ROW><ROW><id>15945732</id><snippet>__init__</snippet></ROW><ROW><id>15945732</id><snippet>__init__</snippet></ROW><ROW><id>15945732</id><snippet>__new__</snippet></ROW><ROW><id>15945732</id><snippet>__new__</snippet></ROW><ROW><id>15945732</id><snippet>__reduce__</snippet></ROW><ROW><id>15945732</id><snippet>__slots__</snippet></ROW><ROW><id>15945732</id><snippet>__new__</snippet></ROW><ROW><id>15945732</id><snippet>__init__</snippet></ROW><ROW><id>15945732</id><snippet>__init__</snippet></ROW><ROW><id>15945732</id><snippet>__init__</snippet></ROW><ROW><id>15945732</id><snippet>class X(object):
    def __new__(self): # sorry but self is the class I apologize!
        obj = object.__new__(Y)
        return obj
    def __init__(self):
        print 1

&gt;&gt;&gt; class Y(object):
    def __init__(self):
        print 2
&gt;&gt;&gt; X() # no __init__ call, limiting you to stay in the class hierarchy
&lt;__main__.Y object at 0x7f287e769350&gt;
&gt;&gt;&gt; class Y(X):
    def __init__(self):
        print 2


&gt;&gt;&gt; X() # one __init__ call
2
&lt;__main__.Y object at 0x7f287e7693d0&gt;
&gt;&gt;&gt; class X(object):
    def __new__(self):
        obj = Y()
        return obj
    def __init__(self):
        print 1


&gt;&gt;&gt; class Y(X):
    def __new__(self):
        return object.__new__(self)
    def __init__(self):
        print 2


&gt;&gt;&gt; X() # __init__ called twice, structure copied from number.py
2
2
&lt;__main__.Y object at 0x7f287e7692d0&gt;
</snippet></ROW><ROW><id>15945732</id><snippet>__init__</snippet></ROW><ROW><id>15945739</id><snippet>list</snippet></ROW><ROW><id>15945739</id><snippet>&gt;&gt;&gt; a = np.arange(4, dtype=object).reshape((2,2))
&gt;&gt;&gt; a
array([[0, 1],
       [2, 3]], dtype=object)
&gt;&gt;&gt; a[:,0]             #multidimensional slicing
array([0, 2], dtype=object)
&gt;&gt;&gt; b = a[:,0]
&gt;&gt;&gt; b[:] = True        #can assign scalar
&gt;&gt;&gt; a                  #contents of a changed because b is a view to a
array([[True, 1],
       [True, 3]], dtype=object)    
</snippet></ROW><ROW><id>15945847</id><snippet>from subprocess import Popen, PIPE

p = Popen(cmd_rancli, stdin=PIPE, stdout=PIPE)
output = p.communicate(ran_opt_get_ap)[0]
</snippet></ROW><ROW><id>15945847</id><snippet>.communicate()</snippet></ROW><ROW><id>15945847</id><snippet>ran_opt_get_ap</snippet></ROW><ROW><id>15945847</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>15945847</id><snippet>bufsize</snippet></ROW><ROW><id>15945847</id><snippet>pexpect</snippet></ROW><ROW><id>15945847</id><snippet>pty</snippet></ROW><ROW><id>15945847</id><snippet>stdbuf</snippet></ROW><ROW><id>15945847</id><snippet>unbuffer</snippet></ROW><ROW><id>15945847</id><snippet>script</snippet></ROW><ROW><id>15946152</id><snippet>target</snippet></ROW><ROW><id>15946152</id><snippet>threading.Thread(target=DoWorkItem(), args=())
</snippet></ROW><ROW><id>15946152</id><snippet>threading.Thread(target=DoWorkItem, args=())
</snippet></ROW><ROW><id>15946279</id><snippet>&lt;img class="profilfoto" src="{{MEDIA_URL|escapejs}}{{user.foto.name}}" /&gt;
</snippet></ROW><ROW><id>15946279</id><snippet>user/2013\u002D04\u002D10_170411/image.png</snippet></ROW><ROW><id>15946279</id><snippet>&lt;form id="registerform" action="/angemeldet/" method="post" 
    enctype="multipart/form-data"&gt;
    {% csrf_token %}
</snippet></ROW><ROW><id>15946279</id><snippet>form = YourForm(request.POST, request.FILES)
    if form.is_valid():
</snippet></ROW><ROW><id>15946778</id><snippet>wx.Panel</snippet></ROW><ROW><id>15946778</id><snippet>pyed.py</snippet></ROW><ROW><id>15946778</id><snippet>self.panel = wx.Panel(self, -1)
</snippet></ROW><ROW><id>15946778</id><snippet>self.SetTitle("PyEd - Editing ... " + filename)
</snippet></ROW><ROW><id>15946778</id><snippet>wx.FileDialog</snippet></ROW><ROW><id>15946778</id><snippet>wx.Frame.__init__(self, parent, id, 'PyEd', (-1, -1), wx.Size(640, 480))
</snippet></ROW><ROW><id>15946778</id><snippet>wx.Frame.__init__(self, parent=parent, id=id, title='PyEd', size=wx.Size(640, 480))
</snippet></ROW><ROW><id>15946778</id><snippet>wx.Size</snippet></ROW><ROW><id>15946778</id><snippet>wx.Frame.__init__(self, parent=None, title='PyEd', size=(640, 480))
</snippet></ROW><ROW><id>15946778</id><snippet>def create_buttons(parent):
    parent.button1 = wx.Button(label='Button 1')
    parent.button2 = wx.Button(label='Button 2')
    parent.button3 = wx.Button(label='Button 3')

    parent.button1.Bind(wx.EVT_BUTTON, on_button_1)
    parent.button2.Bind(wx.EVT_BUTTON, on_button_2)
    parent.button3.Bind(wx.EVT_BUTTON, on_button_3)

def on_button_1(event):
    print 'You clicked button 1'

def on_button_2(event):
    print 'You clicked button 2'

def on_button_3(event):
    print 'You clicked button 3'
</snippet></ROW><ROW><id>15946778</id><snippet>def create_buttons(parent):
    parent.buttons = [wx.Button(id=i, label='Button %d' % i) for i in range(100)]
    parent.Bind(wx.EVT_BUTTON, on_button)

def on_button(event):
    button_id = event.GetId()
    print 'You clicked button %d' % button_id
</snippet></ROW><ROW><id>15946778</id><snippet>id</snippet></ROW><ROW><id>15947208</id><snippet>re.escape()</snippet></ROW><ROW><id>15947208</id><snippet>somedata = re.sub(re.escape(key), 'newvalue', somedata)
</snippet></ROW><ROW><id>15947208</id><snippet>somedata = somedata.replace(key, 'newvalue')
</snippet></ROW><ROW><id>15947208</id><snippet>\b</snippet></ROW><ROW><id>15947208</id><snippet>somedata = re.sub(r'\b{}\b'.format(re.escape(key)), 'newvalue', somedata)
</snippet></ROW><ROW><id>15947208</id><snippet>\b</snippet></ROW><ROW><id>15947208</id><snippet>baz</snippet></ROW><ROW><id>15947208</id><snippet>foo baz bar</snippet></ROW><ROW><id>15947208</id><snippet>foo bazbaz bar</snippet></ROW><ROW><id>15947208</id><snippet>somedata = re.sub(r'(?:^|(?&lt;=\s)){}(?:$|(?=\s))'.format(re.escape(key)), 'newvalue', somedata)
</snippet></ROW><ROW><id>15947208</id><snippet>(?:^|(?&lt;=\s))</snippet></ROW><ROW><id>15947208</id><snippet>(?:$|(?=\s)</snippet></ROW><ROW><id>15947567</id><snippet>read()</snippet></ROW><ROW><id>15947567</id><snippet>import subprocess
p = subprocess.Popen(['ls'], stdout=subprocess.PIPE)
help(p.stdout.read)
</snippet></ROW><ROW><id>15947567</id><snippet>read([size]) -&gt; read at most size bytes, returned as a string.

If the size argument is negative or omitted, read until EOF is reached.
Notice that when in non-blocking mode, less data than what was requested
may be returned, even if no size parameter was given.
</snippet></ROW><ROW><id>15947567</id><snippet>read()</snippet></ROW><ROW><id>15947567</id><snippet>EOF</snippet></ROW><ROW><id>15947567</id><snippet>os.read</snippet></ROW><ROW><id>15947567</id><snippet>man 3 read</snippet></ROW><ROW><id>15947567</id><snippet>man stdio.h</snippet></ROW><ROW><id>15947616</id><snippet>from turtle import *
#we make an object from class Turtle
alex=Turtle()
def parallel_lines(number):
    #number is number of lines
    with_s=alex.window_width()
    height_s=alex.window_height()
    alex.setheading(90)
    alex.pu()
    #for fill all screen and equall distance below line needed
    alex.setposition(with_s/-2,height_s/-2)
    for i in range(1,number+1):
        alex.pd()
        alex.fd(height_s)
        alex.pu()
        alex.setposition(with_s/-2+i*(with_s/(number-1)),height_s/-2)

parallel_lines(5)
</snippet></ROW><ROW><id>15947616</id><snippet>output</snippet></ROW><ROW><id>15947629</id><snippet>python -tt yourscript.py
</snippet></ROW><ROW><id>15947692</id><snippet>setup.bat</snippet></ROW><ROW><id>15947692</id><snippet>@echo off
for /f "tokens=*" %%a in ('python setup.py') do %%a
</snippet></ROW><ROW><id>15947692</id><snippet>setup.py</snippet></ROW><ROW><id>15947692</id><snippet>import os
print 'set FOO=foo'
print 'set PATH=%s;%s' % ('C:\\my_path_dir', os.environ['PATH'])
</snippet></ROW><ROW><id>15947692</id><snippet>python.exe</snippet></ROW><ROW><id>15947692</id><snippet>setup.bat</snippet></ROW><ROW><id>15947692</id><snippet>setup.py</snippet></ROW><ROW><id>15947692</id><snippet>setup.py</snippet></ROW><ROW><id>15947692</id><snippet>setup.bat</snippet></ROW><ROW><id>15947692</id><snippet>setup.bat</snippet></ROW><ROW><id>15947692</id><snippet>@echo off
if "%1" == "setenv" (
    for /f "tokens=*" %%a in ('python setup.py %1') do %%a
) else (
    python setup.py %*
)
</snippet></ROW><ROW><id>15947692</id><snippet>setup.py</snippet></ROW><ROW><id>15947692</id><snippet>import sys
import os

if len(sys.argv) &gt; 1 and sys.argv[1] == 'setenv':
    print 'set FOO=foo'
    print 'set PATH=%s;%s' % ('C:\\my_path_dir', os.environ['PATH'])
else:
    print "I'm gonna do something else with argv=%r" % sys.argv
</snippet></ROW><ROW><id>15947822</id><snippet>__init__.py</snippet></ROW><ROW><id>15947822</id><snippet>app_config = read_config()

def read_config():
    configparser = ConfigParser.RawConfigParser()
    configparser.read(some_config_filename)
    return configparser.as_dict() #An imaginery method which returns the vals as dict.
</snippet></ROW><ROW><id>15947841</id><snippet>^[A-Z0-9]{5}$
</snippet></ROW><ROW><id>15947841</id><snippet>^[A-Za-z0-9]{5}$
</snippet></ROW><ROW><id>15948155</id><snippet>’</snippet></ROW><ROW><id>15948155</id><snippet>In [6]: s = u"isn’t"

In [7]: print HTMLParser.HTMLParser().unescape(s)
isn’t

In [8]: print HTMLParser.HTMLParser().unescape(s).replace(u'\u2019', "'")
isn't
</snippet></ROW><ROW><id>15948155</id><snippet>&amp;</snippet></ROW><ROW><id>15948155</id><snippet>&amp;</snippet></ROW><ROW><id>15948155</id><snippet>&#13;</snippet></ROW><ROW><id>15948155</id><snippet>CR</snippet></ROW><ROW><id>15948155</id><snippet>\r</snippet></ROW><ROW><id>15948285</id><snippet>import os, cgi
fs = cgi.FieldStorage()
fileitem = fs['userfile']

# Test if the file was uploaded
if fileitem.filename:
   fn = os.path.basename(fileitem.filename)
   open('/tmp/' + fn, 'wb').write(fileitem.file.read())
   message = 'The file "' + fn + '" was uploaded successfully'
else:
   message = 'No file was uploaded'
</snippet></ROW><ROW><id>15948392</id><snippet>is</snippet></ROW><ROW><id>15948392</id><snippet>==</snippet></ROW><ROW><id>15948392</id><snippet>if property == "version":
    ...
elif property == "brand":
    ...
etc.
</snippet></ROW><ROW><id>15948392</id><snippet>is</snippet></ROW><ROW><id>15948392</id><snippet>&gt;&gt;&gt; a = "dialog-bmp"
&gt;&gt;&gt; b = "dialog-bmp"
&gt;&gt;&gt; a is b
False
&gt;&gt;&gt; id(a)
32571184L
&gt;&gt;&gt; id(b)
32571088L
&gt;&gt;&gt; a = "brand"
&gt;&gt;&gt; b = "brand"
&gt;&gt;&gt; a is b
True
&gt;&gt;&gt; id(a)
32610664L
&gt;&gt;&gt; id(b)
32610664L
</snippet></ROW><ROW><id>15948412</id><snippet>.all()</snippet></ROW><ROW><id>15948412</id><snippet>.yield_per()</snippet></ROW><ROW><id>15948412</id><snippet>for row in db_session.query(Data).yield_per(10):
    do_something_with_data(row)
</snippet></ROW><ROW><id>15948412</id><snippet>.all()</snippet></ROW><ROW><id>15948412</id><snippet>.yield_per()</snippet></ROW><ROW><id>15948412</id><snippet>.count()</snippet></ROW><ROW><id>15948412</id><snippet>result = db_session.query(Data)
count = result.count()

for row in result.yield_per(10):
    update_progress_bar(progress, count)
    do_something_with_data(row)
    progress += 1
</snippet></ROW><ROW><id>15948412</id><snippet>.count()</snippet></ROW><ROW><id>15948412</id><snippet>.yield_per()</snippet></ROW><ROW><id>15948568</id><snippet>config</snippet></ROW><ROW><id>15948568</id><snippet>respawn</snippet></ROW><ROW><id>15948568</id><snippet>False</snippet></ROW><ROW><id>15948568</id><snippet>circus.watcher.Watcher</snippet></ROW><ROW><id>15948568</id><snippet>Circus Library</snippet></ROW><ROW><id>15948768</id><snippet>*</snippet></ROW><ROW><id>15948768</id><snippet>+</snippet></ROW><ROW><id>15948768</id><snippet>../</snippet></ROW><ROW><id>15948768</id><snippet>*</snippet></ROW><ROW><id>15948768</id><snippet>+</snippet></ROW><ROW><id>15948768</id><snippet>import re

url = "www.google.com/"
line = "../../asyouwish.html"

num = re.sub(r'([.]{2}/)+', url, line)
print ("Final : ", num)
</snippet></ROW><ROW><id>15948768</id><snippet>('Final : ', 'www.google.com/asyouwish.html')
</snippet></ROW><ROW><id>15948768</id><snippet>re.sub</snippet></ROW><ROW><id>15948768</id><snippet>'../'</snippet></ROW><ROW><id>15948768</id><snippet>url</snippet></ROW><ROW><id>15948768</id><snippet>url</snippet></ROW><ROW><id>15948768</id><snippet>url</snippet></ROW><ROW><id>15948768</id><snippet>num = re.sub(r'([.]{2}/)+', url+'/', line)
</snippet></ROW><ROW><id>15948768</id><snippet>r'([.]{2}/)*'</snippet></ROW><ROW><id>15948768</id><snippet>line</snippet></ROW><ROW><id>15948768</id><snippet>In [9]: x = 'www.google.comawww.google.comswww.google.comywww.google.comowww.google.comuwww.google.comwwww.google.comiwww.google.comswww.google.comhwww.google.com.www.google.comhwww.google.comtwww.google.commwww.google.comlwww.google.com'

In [13]: x.split('www.google.com')
Out[13]: ['', 'a', 's', 'y', 'o', 'u', 'w', 'i', 's', 'h', '.', 'h', 't', 'm', 'l', '']
</snippet></ROW><ROW><id>15949461</id><snippet>        nameChange1 = self.TextField2.get()
        CusNo = self.TextField1.get()
        c.execute("""
            UPDATE customer
            SET first_name = ?
            WHERE customer_id = ?""", (nameChange1, CusNo,) )
</snippet></ROW><ROW><id>15949495</id><snippet>d = {k:[elem for elem in v if not elem.endswith(')')] for k,v in d.iteritems()}
</snippet></ROW><ROW><id>15949626</id><snippet>b</snippet></ROW><ROW><id>15949626</id><snippet>a</snippet></ROW><ROW><id>15949626</id><snippet>a = "hi"
b = ["hello there", "goodbye", "nice to meet you"]

next(w for w in b if len(w.split()) == len(a))
# returns 'hello there'

[w for w in b if len(w.split()) == len(a)]
# returns ['hello there']
</snippet></ROW><ROW><id>15949631</id><snippet>print</snippet></ROW><ROW><id>15949631</id><snippet>MoveTower(n)</snippet></ROW><ROW><id>15949631</id><snippet>MoveTower(n)
print str(2**n-1), 'moves total'
</snippet></ROW><ROW><id>15949631</id><snippet>None</snippet></ROW><ROW><id>15949631</id><snippet>print MoveTower(n)</snippet></ROW><ROW><id>15949631</id><snippet>None</snippet></ROW><ROW><id>15949631</id><snippet>MoveTower()</snippet></ROW><ROW><id>15949880</id><snippet>LIB_GSL</snippet></ROW><ROW><id>15949880</id><snippet>LIB_GSL</snippet></ROW><ROW><id>15949880</id><snippet>\bin</snippet></ROW><ROW><id>15949880</id><snippet>LIB_GSL=C:/GSL</snippet></ROW><ROW><id>15949880</id><snippet>C:\GSL\bin</snippet></ROW><ROW><id>15949880</id><snippet>PATH</snippet></ROW><ROW><id>15950023</id><snippet>**</snippet></ROW><ROW><id>15950023</id><snippet>callable_method(user=user, **{option_name: user_defaults[option_name]})
</snippet></ROW><ROW><id>15950304</id><snippet>SpectrumHeader = SpectraFullList[item]['head'].copy()
</snippet></ROW><ROW><id>15950485</id><snippet>val</snippet></ROW><ROW><id>15950485</id><snippet>ID</snippet></ROW><ROW><id>15950485</id><snippet>maindict = {}
for m in result:
    val = maindict.setdefault(m[0], {})
    f= open(path+m[1]+'.txt', 'r')
    for line in f:
        search_str= "my_name"
        if line.startswith(search_str):            
            linename = line.split(' ',2)[1].strip()
            key= get_name_part(linename)                       
            val[key] = val.get(key, 0) + 1 
</snippet></ROW><ROW><id>15950485</id><snippet>collections.Counter</snippet></ROW><ROW><id>15950485</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>15950485</id><snippet>from collections import Counter, defaultdict
import os

maindict = defaultdict(Counter)

for m in result:
    counts = maindict[m[0]]
    with open(os.path.join(path, m[1] + '.txt'), 'r') as f:
        search_str = "my_name"
        counts.update(get_name_part(line.split(None, 2)[1])
            for line in f if line.startswith(search_str))
</snippet></ROW><ROW><id>15950554</id><snippet>~</snippet></ROW><ROW><id>15950554</id><snippet>street_name</snippet></ROW><ROW><id>15950554</id><snippet>street_suffix</snippet></ROW><ROW><id>15950554</id><snippet>from pyparsing import *

street_number = Word(nums)('street_number')
street_suffix = oneOf("ST RD DR LN AVE WAY")('street_suffix')
street_name = OneOrMore(~street_suffix + Word(alphas))('street_name')

address = street_number + street_name + street_suffix
result = address.parseString("444 PARK GARDEN LN")
print result.dump()
</snippet></ROW><ROW><id>15950554</id><snippet>setResultsName</snippet></ROW><ROW><id>15950628</id><snippet>SELECT * FROM examples_calculationsmetric</snippet></ROW><ROW><id>15950628</id><snippet>Core_prices</snippet></ROW><ROW><id>15950628</id><snippet>results</snippet></ROW><ROW><id>15950628</id><snippet>for</snippet></ROW><ROW><id>15950628</id><snippet>results1</snippet></ROW><ROW><id>15950628</id><snippet>RAM_prices = 0
Core_prices = 0
HHD_SATA_prices = 0
HHD_SSD_prices = 0
CPU_priority = 0
Avaibility = 0
</snippet></ROW><ROW><id>15950837</id><snippet>def join_punctuation(seq, characters='.,;?!'):
    characters = set(characters)
    seq = iter(seq)
    current = next(seq)

    for nxt in seq:
        if nxt in characters:
            current += nxt
        else:
            yield current
            current = nxt

    yield current

c = ' '.join(join_punctuation(b))
</snippet></ROW><ROW><id>15950837</id><snippet>join_punctuation</snippet></ROW><ROW><id>15950837</id><snippet>&gt;&gt;&gt; b = ['Hello', ',', 'who', 'are', 'you', '?']
&gt;&gt;&gt; list(join_punctuation(b))
['Hello,', 'who', 'are', 'you?']
&gt;&gt;&gt; ' '.join(join_punctuation(b))
'Hello, who are you?'
</snippet></ROW><ROW><id>15950936</id><snippet>exec("/opt/libreoffice4.0/program/soffice.bin  --headless --convert-to pdf --outdir ".$path."  ".$filename.".".$extension, $output, $return_var);
</snippet></ROW><ROW><id>15951126</id><snippet>CREATE TABLE recipe(ID, People, CookingTime);
CREATE TABLE ingredient(ID, RecipeID, MassNumber, MassType, FoodType);
</snippet></ROW><ROW><id>15951126</id><snippet>INSERT INTO ingredient(RecipeID, MassNumber, MassType, FoodType) VALUES (42, ...)
</snippet></ROW><ROW><id>15951161</id><snippet>var('x,y,z,t,x1,y1,z1,t1,var1')
U=function('U0',x,y,z,t,x1,y1,z1,t1)
U0(x,y,z,t,x1,y1,z1,t1)=sin(x-x1)*sin(y-y1)*sin(z-z1)*sin(t-t1)
    # if write U0=... instead of U0(...)=... the order of arguments of U0 is not
    # specified and e.g. sin(x-x1) might become sin(x-y) from the system's viewpoint

num=2.0
def numint(func, h):
    #global var1
    integ = 0.5*h*(func(var1=0) + func(var1=1))
    for i in range(1,num):
        integ = integ + h * func(var1=i*h)
    return integ


print numint(U0(x=var1),1/num)+numint(U0(y1=var1),1/num)
</snippet></ROW><ROW><id>15952432</id><snippet>from collections import deque
from datetime import datetime

import transaction
from zope.app.component.hooks import setSite
from Testing.makerequest import makerequest
from AccessControl.SecurityManagement import newSecurityManager

from my.newproduct.types import ArchetypesContentType


site_id = 'Plone'     # adjust to match your Plone site object id.
admin_user = 'admin'  # usually 'admin', probably won't need adjusting
app = makerequest(app)
site = app[site_id]
setSite(site)
user = app.acl_users.getUser(admin_user).__of__(site.acl_users)
newSecurityManager(None, user)


def treeWalker(root):
    # stack holds (parent, id, obj) tuples
    stack = deque([(None, None, root)])
    while stack:
        parent, id, next = stack.popleft()
        try:
            stack.extend((next, id, child) for id, child in next.objectItems())
        except AttributeError:
            # No objectItems method
            pass
        yield parent, id, next


count = 0
for parent, id, obj in treeWalker(site):
    if isinstance(obj, ArchetypesContentType):
        print 'Found content type object {} at {}'.format(id, '/'.join(object.getPhysicalPath()))
        obj._p_changed = True  # mark it as changed, force a commit
        count += 1
        if count % 100 == 0:
            # flush changes so far to disk to minimize memory usage
            transaction.savepoint(True)
            print '{} - Processed {} items'.format(datetime.now(), count)

transaction.commit()
</snippet></ROW><ROW><id>15952432</id><snippet>ZODB.broken.Broken</snippet></ROW><ROW><id>15952432</id><snippet>bin/instance run</snippet></ROW><ROW><id>15952432</id><snippet>bin/instance run path/to/this/script.py
</snippet></ROW><ROW><id>15953037</id><snippet>Counter</snippet></ROW><ROW><id>15953037</id><snippet>from collections import Counter
lines = Counter([line for line in myfile if match_string in line])
</snippet></ROW><ROW><id>15953037</id><snippet>myfile</snippet></ROW><ROW><id>15953037</id><snippet>123abc
abc456
789
123abc
abc456
</snippet></ROW><ROW><id>15953037</id><snippet>match_string</snippet></ROW><ROW><id>15953037</id><snippet>"abc"</snippet></ROW><ROW><id>15953037</id><snippet>&gt;&gt;&gt; lines
Counter({'123abc': 2, 'abc456': 2})
</snippet></ROW><ROW><id>15953037</id><snippet>patterns = ["abc", "123"]
# initialize one Counter for each pattern
results = {pattern:Counter() for pattern in patterns}  
for line in myfile:
   for pattern in patterns:
       if pattern in line:
           results[pattern][line] += 1
</snippet></ROW><ROW><id>15953431</id><snippet>re_sections=re.compile(r"(?P&lt;section&gt;Section\d)\s*(?P&lt;section_data&gt;.+?)(?=(?:Section\d|$))", re.DOTALL)
</snippet></ROW><ROW><id>15953431</id><snippet>.+?</snippet></ROW><ROW><id>15953431</id><snippet>&gt;&gt;&gt; re_sections=re.compile(r"(?P&lt;section&gt;Section\d)\s*(?P&lt;section_data&gt;.+?)(?=(?:Section\d|$))", re.DOTALL)
&gt;&gt;&gt; for m in re_sections.finditer(text): print m.groupdict()
... 
{'section': 'Section1', 'section_data': 'stuff belonging to section1\nstuff belonging to section1\nstuff belonging to section1\n'}
{'section': 'Section2', 'section_data': 'stuff belonging to section2\nstuff belonging to section2\nstuff belonging to section2'}
</snippet></ROW><ROW><id>15953477</id><snippet>bash$ nohup python your_script.py &amp;&gt;output &amp;
</snippet></ROW><ROW><id>15953477</id><snippet>python-daemon</snippet></ROW><ROW><id>15953481</id><snippet>args</snippet></ROW><ROW><id>15953481</id><snippet>*args</snippet></ROW><ROW><id>15953481</id><snippet>arg</snippet></ROW><ROW><id>15953481</id><snippet>myfunc2</snippet></ROW><ROW><id>15953481</id><snippet>myfunc1</snippet></ROW><ROW><id>15953481</id><snippet>def myfunc2(*args):
    pass
</snippet></ROW><ROW><id>15953481</id><snippet>myfunc2(a, b, c)
</snippet></ROW><ROW><id>15953481</id><snippet>*</snippet></ROW><ROW><id>15953481</id><snippet>newargs = (a, b, c)
myfunc2(*newargs)
</snippet></ROW><ROW><id>15953481</id><snippet>newargs = (b, c)
myfunc2(a, *newargs)
</snippet></ROW><ROW><id>15953481</id><snippet>**</snippet></ROW><ROW><id>15953574</id><snippet>MultiValueField</snippet></ROW><ROW><id>15953574</id><snippet>class ExpiryDateField(forms.MultiValueField):
    """
    Form field that validates credit card expiry dates.
    """

    default_error_messages = {
        'invalid_month': _(u'Please enter a valid month.'),
        'invalid_year': _(u'Please enter a valid year.'),
        'date_passed': _(u'This expiry date has passed.'),
    }

    def __init__(self, *args, **kwargs):
        today = date.today()
        error_messages = self.default_error_messages.copy()
        if 'error_messages' in kwargs:
            error_messages.update(kwargs['error_messages'])
        if 'initial' not in kwargs:
            # Set default expiry date based on current month and year
            kwargs['initial'] = today
        months = [(x, '%02d (%s)' % (x, date(2000, x, 1).strftime(MONTH_FORMAT))) for x in xrange(1, 13)]
        years = [(x, x) for x in xrange(today.year, today.year + 15)]
        fields = (
            forms.ChoiceField(choices=months, error_messages={'invalid': error_messages['invalid_month']}),
            forms.ChoiceField(choices=years, error_messages={'invalid': error_messages['invalid_year']}),
        )
        super(ExpiryDateField, self).__init__(fields, *args, **kwargs)
        self.widget = ExpiryDateWidget(widgets=[fields[0].widget, fields[1].widget])

    def clean(self, value):
        expiry_date = super(ExpiryDateField, self).clean(value)
        if date.today() &gt; expiry_date:
            raise forms.ValidationError(self.error_messages['date_passed'])
        return expiry_date

    def compress(self, data_list):
        if data_list:
            try:
                month = int(data_list[0])
            except (ValueError, TypeError):
                raise forms.ValidationError(self.error_messages['invalid_month'])
            try:
                year = int(data_list[1])
            except (ValueError, TypeError):
                raise forms.ValidationError(self.error_messages['invalid_year'])
            try:
                day = monthrange(year, month)[1] # last day of the month
            except IllegalMonthError:
                raise forms.ValidationError(self.error_messages['invalid_month'])
            except ValueError:
                raise forms.ValidationError(self.error_messages['invalid_year'])
            return date(year, month, day)
        return None
</snippet></ROW><ROW><id>15953632</id><snippet>from collections import defaultdict

sums = defaultdict(float)
for c, a, b in regions:
    sums[a, b] += c
result = [(csum, a, b) for (a, b), csum in sums.iteritems()]
</snippet></ROW><ROW><id>15953841</id><snippet>import sys; sys.executable</snippet></ROW><ROW><id>15953860</id><snippet>fields = {key: [] for key in 'ABCD'}
</snippet></ROW><ROW><id>15953860</id><snippet>fields['A']</snippet></ROW><ROW><id>15954000</id><snippet> python /path/to/thescript.py
</snippet></ROW><ROW><id>15954000</id><snippet>PATH</snippet></ROW><ROW><id>15954000</id><snippet>chmod +x thescript.py</snippet></ROW><ROW><id>15954000</id><snippet>#!/bin/env python
</snippet></ROW><ROW><id>15954000</id><snippet>pylauncher</snippet></ROW><ROW><id>15954031</id><snippet>[A-Z /]</snippet></ROW><ROW><id>15954031</id><snippet>In [8]: re.match(r'\s*(\d+)\s*([A-Z /]+?)\s*(\w+)$', '  15 ABREU/VANDA            3HDNQQ').groups()
Out[8]: ('15', 'ABREU/VANDA', '3HDNQQ')
</snippet></ROW><ROW><id>15954031</id><snippet>In [15]: s = '  15 ABREU/VANDA            3HDNQQ'

In [16]: s[-6:]
Out[16]: '3HDNQQ'
</snippet></ROW><ROW><id>15954199</id><snippet>unknown</snippet></ROW><ROW><id>15954199</id><snippet>qe</snippet></ROW><ROW><id>15954199</id><snippet>smt</snippet></ROW><ROW><id>15954199</id><snippet>   s = Solver()
</snippet></ROW><ROW><id>15954199</id><snippet>   s = Then('qe', 'smt').solver()
</snippet></ROW><ROW><id>15954199</id><snippet>Then</snippet></ROW><ROW><id>15954199</id><snippet>qe</snippet></ROW><ROW><id>15954199</id><snippet>smt</snippet></ROW><ROW><id>15954199</id><snippet>.solver()</snippet></ROW><ROW><id>15954214</id><snippet>arr[:, i]</snippet></ROW><ROW><id>15954214</id><snippet>u</snippet></ROW><ROW><id>15954214</id><snippet>u1, u2 = u.T</snippet></ROW><ROW><id>15954214</id><snippet>np.</snippet></ROW><ROW><id>15954214</id><snippet>plt.</snippet></ROW><ROW><id>15954214</id><snippet>def deriv(u, t):
    return np.array([ u[1], u[0] - np.sqrt(u[0]) ])

time = np.arange(0.01, 7 * np.pi, 0.0001)
uinit = np.array([ 1.49907, 0])
u = odeint(deriv, uinit, time)

x = 1 / u[:, 0] * np.cos(time)
y = 1 / u[:, 1] * np.sin(time)

plt.plot(x, y)
plt.show()
</snippet></ROW><ROW><id>15954359</id><snippet>class HashableRect(pygame.Rect):
    def __hash__(self):
        return hash(tuple(self))
</snippet></ROW><ROW><id>15954359</id><snippet> &gt;&gt;&gt; r = HashableRect(1,2,3,4)
 &gt;&gt;&gt; {r: 'something'}
 {&lt;rect(1, 2, 3, 4)&gt;: 'something'}
</snippet></ROW><ROW><id>15954359</id><snippet>pygame.Rect</snippet></ROW><ROW><id>15954359</id><snippet>id(self)</snippet></ROW><ROW><id>15954359</id><snippet>def merge(self, parent_list, child_list):
    tile_dict = dict(zip(map(tuple, parent_list), child_list))
    return tile_dict

merged = merge(prarent_list, child_list)
...
child = merged[tuple(parent)]
</snippet></ROW><ROW><id>15954366</id><snippet>gstate = PyGILState_Ensure();
PyEval_CallObject(inactivity_callback, arglist);
PyGILState_Release(gstate);
</snippet></ROW><ROW><id>15954417</id><snippet>MyInt</snippet></ROW><ROW><id>15954417</id><snippet>int</snippet></ROW><ROW><id>15954417</id><snippet>int</snippet></ROW><ROW><id>15954417</id><snippet>MyInt</snippet></ROW><ROW><id>15954662</id><snippet>from xml.etree import ElementTree

tree = ElementTree.fromstring(example)

for child in tree.findall('.//child'):
    attribute1 = int(child.attrib['attribute1'])
    attribute2 = [int(v) for v in child.attrib['attribute2'].split(',')]
    print attribute1, attribute2
</snippet></ROW><ROW><id>15954662</id><snippet>&gt;&gt;&gt; for child in tree.findall('.//child'):
...     attribute1 = int(child.attrib['attribute1'])
...     attribute2 = [int(v) for v in child.attrib['attribute2'].split(',')]
...     print attribute1, attribute2
... 
100 [1, 2]
200 [1, 2, 5]
300 [1, 2, 5, 10]
</snippet></ROW><ROW><id>15954691</id><snippet>if re.match("^[a-zA-Z]+$", aString):
</snippet></ROW><ROW><id>15954691</id><snippet>^</snippet></ROW><ROW><id>15954691</id><snippet>$</snippet></ROW><ROW><id>15954691</id><snippet>+</snippet></ROW><ROW><id>15954691</id><snippet>str.isalpha()</snippet></ROW><ROW><id>15954691</id><snippet>&gt;&gt;&gt; 'foobar'.isalpha()
True
&gt;&gt;&gt; 'foobar42'.isalpha()
False
&gt;&gt;&gt; ''.isalpha()
False
</snippet></ROW><ROW><id>15954970</id><snippet>In [13]: a = np.random.rand(1000)

In [14]: %timeit np.sort(a)
10000 loops, best of 3: 31.9 us per loop

In [15]: %timeit np.ediff1d(a)
100000 loops, best of 3: 15.2 us per loop

In [16]: %timeit np.diff(a)
100000 loops, best of 3: 7.76 us per loop

In [17]: %timeit np.min(a)
100000 loops, best of 3: 3.19 us per loop

In [18]: %timeit np.unique(a)
10000 loops, best of 3: 53.8 us per loop
</snippet></ROW><ROW><id>15954970</id><snippet>unique</snippet></ROW><ROW><id>15954970</id><snippet>sort</snippet></ROW><ROW><id>15954970</id><snippet>diff</snippet></ROW><ROW><id>15954970</id><snippet>min</snippet></ROW><ROW><id>15954970</id><snippet>0</snippet></ROW><ROW><id>15954970</id><snippet>unique</snippet></ROW><ROW><id>15954970</id><snippet>ediff1d</snippet></ROW><ROW><id>15954970</id><snippet>diff</snippet></ROW><ROW><id>15954970</id><snippet>In [19]: %timeit np.min(np.diff(np.sort(a)))
10000 loops, best of 3: 47.7 us per loop

In [20]: %timeit np.min(np.ediff1d(np.sort(a)))
10000 loops, best of 3: 57.1 us per loop
</snippet></ROW><ROW><id>15954999</id><snippet>getcwd()</snippet></ROW><ROW><id>15954999</id><snippet>getcwd</snippet></ROW><ROW><id>15954999</id><snippet>os</snippet></ROW><ROW><id>15954999</id><snippet>import os</snippet></ROW><ROW><id>15954999</id><snippet>os.getcwd()</snippet></ROW><ROW><id>15954999</id><snippet>from os import getcwd</snippet></ROW><ROW><id>15954999</id><snippet>import os
from selenium import webdriver

profile = webdriver.FirefoxProfile()
profile.set_preference('browser.download.folderList', 2)
profile.set_preference('browser.download.manager.showWhenStarting', False)
profile.set_preference('browser.download.dir', os.getcwd())
profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'text/csv/xls')
driver = webdriver.Firefox(profile)
</snippet></ROW><ROW><id>15955004</id><snippet>class</snippet></ROW><ROW><id>15955004</id><snippet>class_</snippet></ROW><ROW><id>15955004</id><snippet>{{ form.password(autocomplete="off") }}
</snippet></ROW><ROW><id>15955004</id><snippet>**kwargs</snippet></ROW><ROW><id>15955004</id><snippet>{{ render_field(form.password, autocomplete="off") }}
</snippet></ROW><ROW><id>15955246</id><snippet>TransactionTestCase</snippet></ROW><ROW><id>15955246</id><snippet>TestCase</snippet></ROW><ROW><id>15955264</id><snippet>ForeignKey</snippet></ROW><ROW><id>15955264</id><snippet>location</snippet></ROW><ROW><id>15955264</id><snippet>ModelChoiceField</snippet></ROW><ROW><id>15955264</id><snippet>ModelChoiceField.queryset</snippet></ROW><ROW><id>15955264</id><snippet>TheModel.objects.all()</snippet></ROW><ROW><id>15955264</id><snippet>TextWidget</snippet></ROW><ROW><id>15955264</id><snippet>TextInput</snippet></ROW><ROW><id>15955264</id><snippet>TextInput</snippet></ROW><ROW><id>15955264</id><snippet>&lt;input type="text" /&gt;</snippet></ROW><ROW><id>15955264</id><snippet>&lt;input type="text" /&gt;</snippet></ROW><ROW><id>15955264</id><snippet>&lt;input type="text" value="Lisboa, Madrid" name="location" /&gt;
</snippet></ROW><ROW><id>15955264</id><snippet>{'location': 'Lisboa, Madrid'}</snippet></ROW><ROW><id>15955264</id><snippet>CharField</snippet></ROW><ROW><id>15955264</id><snippet>ModelMultipleChoiceField</snippet></ROW><ROW><id>15955264</id><snippet>{'location': [3,5]}</snippet></ROW><ROW><id>15955264</id><snippet>ModelChoiceField</snippet></ROW><ROW><id>15955264</id><snippet>{'location': 3}</snippet></ROW><ROW><id>15955264</id><snippet>autocomplete_light.ChoiceWidget</snippet></ROW><ROW><id>15955264</id><snippet>ChoiceWidget</snippet></ROW><ROW><id>15955264</id><snippet>TextWidget</snippet></ROW><ROW><id>15955327</id><snippet>array[i] &lt;&lt; 8</snippet></ROW><ROW><id>15955327</id><snippet>array[i]</snippet></ROW><ROW><id>15955327</id><snippet>array[i]</snippet></ROW><ROW><id>15955327</id><snippet>&lt;&lt; 8</snippet></ROW><ROW><id>15955327</id><snippet>int</snippet></ROW><ROW><id>15955327</id><snippet>(int)array[i]</snippet></ROW><ROW><id>15955505</id><snippet>class TestApp:
    def __init__(...):
        ...
        self.images = []
        ...
        for name in image_names:
            ...
            img_obj = ImageTk.PhotoImage(img)
            self.images.append(img_obj)
</snippet></ROW><ROW><id>15955706</id><snippet>from functools import wraps
from threading import local

def recursion_detector(func):
    func._thread_locals = local()

    @wraps(func)
    def wrapper(*args, **kwargs):
        params = tuple(args) + tuple(kwargs.items())

        if not hasattr(func._thread_locals, 'seen'):
            func._thread_locals.seen = set()
        if params in func._thread_locals.seen:
            raise RuntimeError('Already called this function with the same arguments')

        func._thread_locals.seen.add(params)
        try:
            res = func(*args, **kwargs)
        finally:
            func._thread_locals.seen.remove(params)

        return res

    return wrapper
</snippet></ROW><ROW><id>15955706</id><snippet>&gt;&gt;&gt; @recursion_detector
... def foo(bar):
...     return foo(not bar)
... 
&gt;&gt;&gt; foo(True)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 10, in wrapper
  File "&lt;stdin&gt;", line 3, in foo
  File "&lt;stdin&gt;", line 10, in wrapper
  File "&lt;stdin&gt;", line 3, in foo
  File "&lt;stdin&gt;", line 7, in wrapper
RuntimeError: Already called this function with the same arguments
&gt;&gt;&gt; foo(False)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 10, in wrapper
  File "&lt;stdin&gt;", line 3, in foo
  File "&lt;stdin&gt;", line 10, in wrapper
  File "&lt;stdin&gt;", line 3, in foo
  File "&lt;stdin&gt;", line 7, in wrapper
RuntimeError: Already called this function with the same arguments
</snippet></ROW><ROW><id>15955816</id><snippet>from flask import render_template

@app.route('/form/')
def hello(name=None):
    return render_template('hello.html', buttons=['A', 'B', 'C'], active_btns=['A', 'C'])
</snippet></ROW><ROW><id>15955816</id><snippet>&lt;div id="radios1" class="btn-group view-opt-btn-group" data-toggle="buttons-radio"&gt;
{% for button in buttons %}
    {% if button in active_btns %}
        &lt;button type="button" class="btn active" name="choice1" value="{{ button }}"&gt;{{ button }}&lt;/button&gt;
    {% else %}
        &lt;button type="button" class="btn" name="choice1" value="{{ button }}"&gt;{{ button }}&lt;/button&gt;
    {% endif %}
{% endfor %}
&lt;/div&gt;
</snippet></ROW><ROW><id>15955816</id><snippet>&lt;button type="button" class="btn{{" active" if button in active_btns}}" name="choice1" value="{{ button }}"&gt;{{ button }}&lt;/button&gt;
</snippet></ROW><ROW><id>15955830</id><snippet>whole = "0.5C199.66"
start = whole[0:whole.find("C")]
end = whole[whole.find("C"):]
</snippet></ROW><ROW><id>15955830</id><snippet>start == "0.5"</snippet></ROW><ROW><id>15955830</id><snippet>end == "C199.66"</snippet></ROW><ROW><id>15956157</id><snippet>yield &lt;value&gt;</snippet></ROW><ROW><id>15956157</id><snippet>f((yield x))</snippet></ROW><ROW><id>15956157</id><snippet>&gt;&gt;&gt; def f(val):
...     return "Hi"
&gt;&gt;&gt; x = [1, 2, 3]
&gt;&gt;&gt; list(f((yield a)) for a in x)
[1, 'Hi', 2, 'Hi', 3, 'Hi']
</snippet></ROW><ROW><id>15956157</id><snippet>yield</snippet></ROW><ROW><id>15956157</id><snippet>yield x</snippet></ROW><ROW><id>15956157</id><snippet>f((yield x))</snippet></ROW><ROW><id>15956157</id><snippet>f((yield x))</snippet></ROW><ROW><id>15956157</id><snippet>f</snippet></ROW><ROW><id>15956157</id><snippet>"-o"</snippet></ROW><ROW><id>15956157</id><snippet>"x=1"</snippet></ROW><ROW><id>15956157</id><snippet>"-o"</snippet></ROW><ROW><id>15956157</id><snippet>list(reversed(list(...)))</snippet></ROW><ROW><id>15956157</id><snippet>"-o"</snippet></ROW><ROW><id>15956157</id><snippet>kvs = [...] # same list comprehension can be used for this part
result = []
for keyval in kvs:
   result.append("-o")
   result.append(keyval)
return result
</snippet></ROW><ROW><id>15956157</id><snippet>return sum([["-o", keyval] for keyval in kvs], [])
</snippet></ROW><ROW><id>15956157</id><snippet>kvs</snippet></ROW><ROW><id>15956157</id><snippet>kvs = [str(optName) + separator + str(optValue) for optName, optValue in options.items()]
</snippet></ROW><ROW><id>15956341</id><snippet>arr</snippet></ROW><ROW><id>15956341</id><snippet>np.mean(arr.reshape(-1, 3), axis=1)
</snippet></ROW><ROW><id>15956367</id><snippet>split</snippet></ROW><ROW><id>15956367</id><snippet>fileHandle = open('file', 'r')

for line in fileHandle:
    fields = line.split('|')

    print(fields[0]) # prints the first fields value
    print(fields[1]) # prints the second fields value

fileHandle.close()
</snippet></ROW><ROW><id>15956601</id><snippet>def twice(self, length=None):
    if length is None:
        length = self._length
    return length*2
</snippet></ROW><ROW><id>15956734</id><snippet>import operator
oldlist = [('A', 6L), ('B', 7L), ('C', 8L), ('D', 8L), ('E', 6L), ('F', 8L)]
newlist = []

oldlist.sort(key=operator.itemgetter(1))
while oldlist and oldlist[0][1] != oldlist[-1][1]:
    newlist.append(oldlist.pop(0) + oldlist.pop())
newlist.extend(oldlist)  #unmatched items
</snippet></ROW><ROW><id>15956771</id><snippet>for link in soup.find_all('img'):
    print  link.get('src')
</snippet></ROW><ROW><id>15956771</id><snippet>link.get('src')+'\n'</snippet></ROW><ROW><id>15956771</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup(open("youtube.htm"))


file = open("parseddata.txt", "wb")

for link in soup.find_all('img'):
    print  link.get('src')
    file.write(link.get('src')+"\n")

file.flush()
file.close()
</snippet></ROW><ROW><id>15956771</id><snippet>with</snippet></ROW><ROW><id>15956771</id><snippet>with</snippet></ROW><ROW><id>15956771</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup(open("youtube.htm"))


with open("parseddata.txt", "wb") as file:
    for link in soup.find_all('img'):
        print  link.get('src')
        file.write(link.get('src')+"\n")
</snippet></ROW><ROW><id>15956925</id><snippet>locationslist</snippet></ROW><ROW><id>15956925</id><snippet>locationslist</snippet></ROW><ROW><id>15956925</id><snippet>for inneritem in userword:
    locationslist = []
    thedictionary.append((inneritem,locationslist))
    # etc.
</snippet></ROW><ROW><id>15956972</id><snippet>The ideal cryptographic hash function has four main properties:

    1. it is easy to compute the hash value for any given message
    2. it is infeasible to generate a message that has a given hash
    3. it is infeasible to modify a message without changing the hash
    4. it is infeasible to find two different messages with the same hash.
</snippet></ROW><ROW><id>15956972</id><snippet>from Crypto.Cipher import AES
import base64

cipher = AES.new(secret_key,AES.MODE_ECB) # never use ECB in strong systems obviously
encoded = base64.b64encode(cipher.encrypt(msg_text))
# ...
decoded = cipher.decrypt(baes64.b64decode(msg_text))
</snippet></ROW><ROW><id>15957021</id><snippet>copy_key</snippet></ROW><ROW><id>15957064</id><snippet>[[0]*4]*4</snippet></ROW><ROW><id>15957064</id><snippet>[0]*4</snippet></ROW><ROW><id>15957064</id><snippet>&gt;&gt;&gt; var1 = [[0]*4]*4
&gt;&gt;&gt; var1
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
&gt;&gt;&gt; var1[0][0] = 2
&gt;&gt;&gt; var1
[[2, 0, 0, 0], [2, 0, 0, 0], [2, 0, 0, 0], [2, 0, 0, 0]]
&gt;&gt;&gt; var1[0] is var1[1]
True
</snippet></ROW><ROW><id>15957064</id><snippet>&gt;&gt; inner = [0]*4
&gt;&gt; var1 = [inner, inner, inner, inner]
&gt;&gt;&gt; var1
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
&gt;&gt;&gt; inner[0] = 1
&gt;&gt;&gt; var1
[[1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0]]
</snippet></ROW><ROW><id>15957262</id><snippet>1) Test mod1 with mod2
2) Mock functions in mo2d
</snippet></ROW><ROW><id>15957262</id><snippet>https://github.com/django/django/blob/master/django/db/models/loading.py
https://github.com/tangentlabs/django-oscar/blob/master/oscar/core/loading.py
</snippet></ROW><ROW><id>15957361</id><snippet>import unittest, time

from selenium.webdriver import Remote
from selenium.webdriver import  DesiredCapabilities
from selenium.webdriver.remote import webelement , command
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.touch_actions import TouchActions




class Test(unittest.TestCase):


    def setUp(self):
        remote = Remote(command_executor='http://localhost:8080/wd/hub',  desired_capabilities=DesiredCapabilities.ANDROID)
        self.remote=remote
        remote.implicitly_wait(30)

    def tearDown(self):
        pass


    def testName(self):
        # self.remote.get("http://icd.intraxinc.com/pxr")
        self.remote.get("https://icd.intraxinc.com/pxr/ext/login.action")
        elems= self.remote.find_element_by_css_selector("#j_username")
        print dir(self)
        print dir(self.remote)
        touchactions = TouchActions(self.remote)
        print dir(touchactions)
        touchactions.double_tap(elems)


if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()
</snippet></ROW><ROW><id>15957361</id><snippet>        touchactions = TouchActions(self.remote)
        print dir(touchactions)
        touchactions.double_tap(elems)
</snippet></ROW><ROW><id>15957371</id><snippet>#!/bin/bash
for SITE_NAME in &lt;site1&gt; &lt;site2&gt; &lt;site3&gt;
do
    SITE=$SITE_NAME ./manage.py collectstatic --noinput
done
</snippet></ROW><ROW><id>15957372</id><snippet>file</snippet></ROW><ROW><id>15957372</id><snippet>merger.py</snippet></ROW><ROW><id>15957372</id><snippet>from io import FileIO as file
</snippet></ROW><ROW><id>15957503</id><snippet>MultiDict</snippet></ROW><ROW><id>15957503</id><snippet>MultiDict</snippet></ROW><ROW><id>15957503</id><snippet>.getone()</snippet></ROW><ROW><id>15957503</id><snippet>.getall()</snippet></ROW><ROW><id>15957503</id><snippet>.mixed()</snippet></ROW><ROW><id>15957565</id><snippet>echo "
set key left
set datafile separator comma
plot for [i = 1:2] '&lt; awk \"/^#{8} File:/ { f = 1; n++ } f &amp;&amp; n == wanted; /^#{8} End/ { f = 0 }\" \
                    wanted='.i.' MYTEST_1.out' using 1:2 with lines title 'File '.i
" | gnuplot --persist
</snippet></ROW><ROW><id>15957565</id><snippet>BEGIN {
  print "set datafile separator comma"
  print "set key left box"
  plot_str = "plot"
  col1     = 1
  col2     = 2
}

# In the first pass we determine number plots, plot titles and x/y labels
FNR == NR &amp;&amp; /^#{8} File:/ {
  plot_str = plot_str " '-' using " col1 ":" col2 " with lines title '" $3 "', "
  if(!xylabels) {
    oFS=FS; FS=" *, *"
    getline
    print "set xlabel '" $col1 "'"
    print "set ylabel '" $col2 "'" 
    xylabels = 1
    FS=oFS
  }
} 

# Skip rest of script if this is the first pass
FNR == NR { next }

# The second pass starts here

# Only print 'plot_str' once
!f { print plot_str; f=1}

# If line starts with a number assume it is data
/^[0-9]/

# Terminate plot sequence
/^#{8} End/ {
  print "e"
}
</snippet></ROW><ROW><id>15957565</id><snippet>awk -f parse.awk infile infile | gnuplot
</snippet></ROW><ROW><id>15957565</id><snippet>awk -f parse.awk col2=3 infile infile | gnuplot
</snippet></ROW><ROW><id>15957566</id><snippet>cs=map.pcolormesh(x,y,value,cmap=varvid,norm=norm)
</snippet></ROW><ROW><id>15957566</id><snippet>cs=plt.scatter(x,y,c=value,s=0.6, edgecolors='none',marker=',',cmap=varvid,norm=norm)
</snippet></ROW><ROW><id>15957590</id><snippet># insertion sort
x = [7, 2, 3, 5, 9, 1]

def insertion(list):
    for index in range(1,len(list)):
        value = list[index]
        i = index - 1
        while i&gt;=0 and (value &lt; list[i]):
            list[i+1] = list[i] # shift number in slot i right to slot i+1
            list[i] = value # shift value left into slot i
            i = i - 1

# bubble sort
y = [7, 2, 3, 5, 9, 1]

def bubble(unsorted_list):
    length = len(unsorted_list) - 1
    sorted = False

    while not sorted:
        sorted = True
        for i in range(length):
            if unsorted_list[i] &gt; unsorted_list[i+1]:
                sorted = False
                unsorted_list[i], unsorted_list[i+1] = unsorted_list[i+1], unsorted_list[i]

def test():
    start = time.clock()
    bubble(y)
    elapsed = (time.clock() - start)
    print "Time taken for bubble = ", elapsed
    start = time.clock()
    insertion(x)
    elapsed = (time.clock() - start)
    print "Time taken for Insertion = ", elapsed

if __name__ == '__main__':
    import time
    test() 
</snippet></ROW><ROW><id>15957675</id><snippet>_CallPythonObject</snippet></ROW><ROW><id>15957675</id><snippet>PyGILState_Ensure()</snippet></ROW><ROW><id>15957675</id><snippet>PyThreadState_New</snippet></ROW><ROW><id>15957675</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; import threading
&gt;&gt;&gt; lock = threading.Lock()
&gt;&gt;&gt; lib = CDLL('./tmp.so')
&gt;&gt;&gt; callback_t = CFUNCTYPE(c_int)

&gt;&gt;&gt; def f():
...   with lock:
...     print threading.current_thread()
...   return 21
... 
&gt;&gt;&gt; callback = callback_t(f)

&gt;&gt;&gt; lib.registerCallback(callback)
0
&gt;&gt;&gt; lock.acquire()
True
&gt;&gt;&gt; t = threading.Thread(target=lib.event)  # prevent deadlock
&gt;&gt;&gt; t.start()
&gt;&gt;&gt; lock.locked()  # waiting...
True
&gt;&gt;&gt; lock.release()
&gt;&gt;&gt; &lt;_DummyThread(Dummy-2, started daemon -1230402704)&gt;
res: 21
</snippet></ROW><ROW><id>15957675</id><snippet>DummyThread</snippet></ROW><ROW><id>15957675</id><snippet>gcc -shared -fPIC -o tmp.so tmp.c</snippet></ROW><ROW><id>15957675</id><snippet>#include &lt;stdio.h&gt;
#include &lt;pthread.h&gt;

typedef int (*callback_t)(void);
callback_t callback = NULL;

void *doCallback(void *arg)
{
    int res = callback();
    printf("res: %d\n", res);
    pthread_exit(0);
}

int event(void)
{
    pthread_t callback_thread;
    pthread_create(&amp;callback_thread, NULL, doCallback, NULL);
    pthread_join(callback_thread, NULL);
    return 0;
}

int registerCallback(callback_t foo)
{
    callback = foo;
    return 0;
}
</snippet></ROW><ROW><id>15957823</id><snippet>sudo pip install django==1.4 #or any desired version.
</snippet></ROW><ROW><id>15958099</id><snippet>connect</snippet></ROW><ROW><id>15958099</id><snippet>close</snippet></ROW><ROW><id>15958099</id><snippet>s = socket.socket()</snippet></ROW><ROW><id>15958099</id><snippet>create_connection</snippet></ROW><ROW><id>15958312</id><snippet>dict</snippet></ROW><ROW><id>15958312</id><snippet>list</snippet></ROW><ROW><id>15958312</id><snippet>list</snippet></ROW><ROW><id>15958312</id><snippet>list</snippet></ROW><ROW><id>15958312</id><snippet>dict</snippet></ROW><ROW><id>15958312</id><snippet>d1 = {elem[0]: elem for elem in f1}
</snippet></ROW><ROW><id>15958312</id><snippet>for z in f3:
    if word == z[0]:
</snippet></ROW><ROW><id>15958312</id><snippet>z = d3.get(word)
if z is not None:
</snippet></ROW><ROW><id>15958312</id><snippet>try</snippet></ROW><ROW><id>15958312</id><snippet>for word, score in d.iteritems():
    try:
        x, y, z = d1[word], d2[word], d3[word]
    except KeyError:
        continue
    A = x[2] * x[3]
    # etc.
</snippet></ROW><ROW><id>15958312</id><snippet>list_of_dicts = [{elem[0]: elem for elem in lst} for lst in list_of_lists]
for word, score in d.iteritems():
    try:
        values = [d[word] for d in list_of_dicts]
    except KeyError:
        continue
    A = values[0][2] * values[0][3]
    # etc.
</snippet></ROW><ROW><id>15958312</id><snippet>sort</snippet></ROW><ROW><id>15958312</id><snippet>bisect</snippet></ROW><ROW><id>15958312</id><snippet>SortedCollection</snippet></ROW><ROW><id>15958312</id><snippet>blist.sortedlist</snippet></ROW><ROW><id>15958312</id><snippet>dict</snippet></ROW><ROW><id>15958312</id><snippet>for</snippet></ROW><ROW><id>15958312</id><snippet>if</snippet></ROW><ROW><id>15958312</id><snippet>find_in_list</snippet></ROW><ROW><id>15958312</id><snippet>dict</snippet></ROW><ROW><id>15958312</id><snippet>sortedlist</snippet></ROW><ROW><id>15958312</id><snippet>find_in_list</snippet></ROW><ROW><id>15958685</id><snippet>t = "\"productId\":\"111111\""
m = re.match("\W*productId[^:]*:\D*(\d+)", t)
if m:
    print m.group(1)
</snippet></ROW><ROW><id>15958685</id><snippet>\W*</snippet></ROW><ROW><id>15958685</id><snippet>productId</snippet></ROW><ROW><id>15958685</id><snippet>[^:]*</snippet></ROW><ROW><id>15958685</id><snippet>:</snippet></ROW><ROW><id>15958685</id><snippet>\D*</snippet></ROW><ROW><id>15958685</id><snippet>(\d+)</snippet></ROW><ROW><id>15958685</id><snippet>111111
</snippet></ROW><ROW><id>15958721</id><snippet>MyWebServer</snippet></ROW><ROW><id>15958721</id><snippet>@classmethod</snippet></ROW><ROW><id>15958721</id><snippet>MyQApplication</snippet></ROW><ROW><id>15958721</id><snippet>MyWebServer</snippet></ROW><ROW><id>15958721</id><snippet>MyWebServer</snippet></ROW><ROW><id>15958721</id><snippet>ClientConnection</snippet></ROW><ROW><id>15958721</id><snippet>MyWebServer.instance.db.execute</snippet></ROW><ROW><id>15958721</id><snippet>self.db</snippet></ROW><ROW><id>15958721</id><snippet>ClientConnection</snippet></ROW><ROW><id>15958721</id><snippet>self.db.execute</snippet></ROW><ROW><id>15958721</id><snippet>MyWebServer</snippet></ROW><ROW><id>15958721</id><snippet>ClientConnection</snippet></ROW><ROW><id>15958721</id><snippet>ClientConnection</snippet></ROW><ROW><id>15958721</id><snippet>ClientConnection</snippet></ROW><ROW><id>15958791</id><snippet>help()</snippet></ROW><ROW><id>15958791</id><snippet>&gt;&gt;&gt; class Fantasy():
...     def womble(self):
...         print('I am a womble!')
...     def dragon(self):
...         """ Make the Dragon roar! """
...         print('I am a dragon...ROAR!')
...
&gt;&gt;&gt; help(Fantasy)
Help on class Fantasy in module __main__:

class Fantasy(builtins.object)
 |  Methods defined here:
 |
 |  dragon(self)
 |      Make the Dragon roar!
 |
 |  womble(self)
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)
</snippet></ROW><ROW><id>15959076</id><snippet>collections.Counter</snippet></ROW><ROW><id>15959076</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>15959076</id><snippet>from collections import Counter, defaultdict
import csv

counts = defaultdict(Counter)

with open(somefilename, 'rb') as f:
    reader = csv.reader(f)
    next(reader)  # skip the header
    for row in reader:
        key, time_bin, count = row[0], int(row[1]), int(row[2])
        counts[time_bin][key] += count

for time_bin in counts:
    print '{}=&gt; {}'.format(time_bin, counts[time_bin].most_common(2))
</snippet></ROW><ROW><id>15959076</id><snippet>Counter.most_common()</snippet></ROW><ROW><id>15959076</id><snippet>1=&gt; [('abc1', 300), ('abc2', 300)]
2=&gt; [('abc2', 800), ('abc', 230)]
</snippet></ROW><ROW><id>15959076</id><snippet>.most_common()</snippet></ROW><ROW><id>15959259</id><snippet>with open('versions.txt', 'r') as verFile, open('newfile.txt', 'w') as wFile:
    version2,version3 = '',''
    for line in verFile:
        # if pound sign, skip line
        if line.startswith('#'):
            continue
        # if version_2 there, store
        if 'VERSION_2_' in line:
            version2 = line
        # if version_3 there, store
        if 'VERSION_3_' in line:
            version3 = line
        # if both versions there, produce error and stop
        if version2 and version3:
            print "There's an error, you have both versions in your text file"
            break
    else:
    # write out found version
        if version2:
            wFile.write(version2.rpartition('* ')[-1])
        elif version3:
            wFile.write(version3.rpartition('* ')[-1])
        else:
            print "There's an error, you don't have any of these versions in your text     file"
</snippet></ROW><ROW><id>15959264</id><snippet>import somemodule

somemodule.someclass = debug_signals(somemodule.someclass)
</snippet></ROW><ROW><id>15959264</id><snippet>somemodule.someclass</snippet></ROW><ROW><id>15959264</id><snippet>debug_signals</snippet></ROW><ROW><id>15959264</id><snippet>somemodule.someclass</snippet></ROW><ROW><id>15959359</id><snippet>if type(x) == int or float:

if type(x) == int or type(x) == float:
</snippet></ROW><ROW><id>15959359</id><snippet>type(x) == int</snippet></ROW><ROW><id>15959359</id><snippet>or</snippet></ROW><ROW><id>15959359</id><snippet>float</snippet></ROW><ROW><id>15959359</id><snippet>True</snippet></ROW><ROW><id>15959359</id><snippet>x</snippet></ROW><ROW><id>15959359</id><snippet>int</snippet></ROW><ROW><id>15959359</id><snippet>float</snippet></ROW><ROW><id>15959359</id><snippet>True</snippet></ROW><ROW><id>15959359</id><snippet>float</snippet></ROW><ROW><id>15959359</id><snippet>if</snippet></ROW><ROW><id>15959359</id><snippet>else</snippet></ROW><ROW><id>15959359</id><snippet>type(x) == int</snippet></ROW><ROW><id>15959359</id><snippet>type(x) == float</snippet></ROW><ROW><id>15959359</id><snippet>or</snippet></ROW><ROW><id>15959359</id><snippet>True</snippet></ROW><ROW><id>15959359</id><snippet>x</snippet></ROW><ROW><id>15959359</id><snippet>int</snippet></ROW><ROW><id>15959359</id><snippet>x</snippet></ROW><ROW><id>15959359</id><snippet>float</snippet></ROW><ROW><id>15959359</id><snippet>False</snippet></ROW><ROW><id>15959359</id><snippet>in</snippet></ROW><ROW><id>15959359</id><snippet>if type(x) in (int, float)
</snippet></ROW><ROW><id>15959359</id><snippet>isinstance</snippet></ROW><ROW><id>15959359</id><snippet>if isinstance(x, (int, float)):
</snippet></ROW><ROW><id>15959359</id><snippet>int</snippet></ROW><ROW><id>15959359</id><snippet>int</snippet></ROW><ROW><id>15959359</id><snippet>long</snippet></ROW><ROW><id>15959359</id><snippet>if isinstance(x, numbers.Real)
</snippet></ROW><ROW><id>15959359</id><snippet>float</snippet></ROW><ROW><id>15959359</id><snippet>int</snippet></ROW><ROW><id>15959359</id><snippet>long</snippet></ROW><ROW><id>15959359</id><snippet>numbers.Real</snippet></ROW><ROW><id>15959359</id><snippet>abs</snippet></ROW><ROW><id>15959359</id><snippet>try:
    return abs(x)
except TypeError:
    return "Not a number!"
</snippet></ROW><ROW><id>15959359</id><snippet>return abs(x)
</snippet></ROW><ROW><id>15959894</id><snippet>^(?=.*m_)(?!.*phys_)(?!.*Shape$).*$
</snippet></ROW><ROW><id>15960031</id><snippet>cur.execute</snippet></ROW><ROW><id>15960031</id><snippet>... LIKE '%s' %s ORDER BY id
</snippet></ROW><ROW><id>15960031</id><snippet>... LIKE %s ORDER BY id
</snippet></ROW><ROW><id>15960031</id><snippet>%s</snippet></ROW><ROW><id>15960031</id><snippet>''</snippet></ROW><ROW><id>15960031</id><snippet>"... %s" % ('spam',)
</snippet></ROW><ROW><id>15960031</id><snippet>cursor.execute("... %s", ('spam',))
</snippet></ROW><ROW><id>15960138</id><snippet>and</snippet></ROW><ROW><id>15960138</id><snippet>or</snippet></ROW><ROW><id>15960138</id><snippet>and/or</snippet></ROW><ROW><id>15960138</id><snippet>all/any</snippet></ROW><ROW><id>15960138</id><snippet>def gen():
    yield 1
    yield this_wont_be_evaluated

print any(gen())
</snippet></ROW><ROW><id>15960198</id><snippet>from mysite.views import current_datetime, hello
</snippet></ROW><ROW><id>15960275</id><snippet>writerows</snippet></ROW><ROW><id>15960275</id><snippet>writerow</snippet></ROW><ROW><id>15960275</id><snippet>writer.writerow([data])</snippet></ROW><ROW><id>15960275</id><snippet>writer.writerow(data)</snippet></ROW><ROW><id>15960293</id><snippet>convolve</snippet></ROW><ROW><id>15960293</id><snippet>from pylab import plot, show
import numpy as np

times = np.arange(0,100,0.1)
intensities = np.random.rand(len(times))

def window(size):
    return np.ones(size)/float(size)

plot(times,intensities,'k.')
plot(times,np.convolve(intensities,window(10),'same'),'r')
plot(times,np.convolve(intensities,window(100),'same'),'b')
show()
</snippet></ROW><ROW><id>15960388</id><snippet>q.get()</snippet></ROW><ROW><id>15960562</id><snippet>a</snippet></ROW><ROW><id>15960562</id><snippet>b</snippet></ROW><ROW><id>15960562</id><snippet>c</snippet></ROW><ROW><id>15960562</id><snippet>ref_dict = {'field1': 'a', 'field2': 'b', 'field3': 'c'}
def update(field, value):
    globals()[ref_dict[field]] = value
</snippet></ROW><ROW><id>15960562</id><snippet>class GlobalReference(object):
    def __init__(self, name):
        self.name = name
    def get(self):
        return globals()[self.name]
    def set(self, value):
        globals()[self.name] = value

ref_dict = {'field1': GlobalReference('a'), 'field2': GlobalReference('b')}
def update(field, value):
    ref_dict[field].set(value)
</snippet></ROW><ROW><id>15960562</id><snippet>globals</snippet></ROW><ROW><id>15960562</id><snippet>class NamespaceReference(object):
    def __init__(self, namespace, name):
        self.namespace, self.name = namespace, name
    def get(self):
        return getattr(self.namespace, self.name)
    def set(self, value):
        setattr(self.namespace, self.name, value)

ref_dict = {'field1': GlobalReference('a'), 'field2': NamespaceReference('myobj', 'b')}
</snippet></ROW><ROW><id>15960562</id><snippet>dict</snippet></ROW><ROW><id>15960666</id><snippet>lambda = 1.50</snippet></ROW><ROW><id>15960666</id><snippet>x=[0, sqrt(2)/2, sqrt(2)/2]</snippet></ROW><ROW><id>15960670</id><snippet>readlines</snippet></ROW><ROW><id>15960670</id><snippet>with open("myfile.txt") as myfile:
    # Get only numbers
    read = myfile.readlines()[2:-2]

# Remove newlines
read = [number.strip() for number in read]
print read
</snippet></ROW><ROW><id>15960890</id><snippet>PCA</snippet></ROW><ROW><id>15960890</id><snippet>in __init__ 
n, m = a.shape 
ValueError: need more than 1 value to unpack
</snippet></ROW><ROW><id>15960890</id><snippet>a</snippet></ROW><ROW><id>15960890</id><snippet>a.shape</snippet></ROW><ROW><id>15960890</id><snippet>input_image.T.shape</snippet></ROW><ROW><id>15960890</id><snippet>input_image = input_image.flatten()
</snippet></ROW><ROW><id>15960890</id><snippet>input_image = np.array(input_image)
</snippet></ROW><ROW><id>15960890</id><snippet>numpy</snippet></ROW><ROW><id>15960890</id><snippet>PIL</snippet></ROW><ROW><id>15960890</id><snippet>input_image = np.asarray(input_image)
</snippet></ROW><ROW><id>15961019</id><snippet>xml.etree</snippet></ROW><ROW><id>15961019</id><snippet>lxml</snippet></ROW><ROW><id>15961019</id><snippet>etree</snippet></ROW><ROW><id>15961138</id><snippet>os.setenv('JAVA_HOME', '/usr/java/jdk1.5.0_07')</snippet></ROW><ROW><id>15961138</id><snippet>Popen</snippet></ROW><ROW><id>15961138</id><snippet>PATH</snippet></ROW><ROW><id>15961138</id><snippet>os.environ['PATH'] += ":/usr/java/jdk1.5.0_07"
</snippet></ROW><ROW><id>15961138</id><snippet>Popen</snippet></ROW><ROW><id>15961138</id><snippet>env</snippet></ROW><ROW><id>15961138</id><snippet>environ = os.environ.copy()
environ['JAVA_HOME'] = '/usr/java/jdk1.5.0_07'
environ['PATH'] += ':/usr/java/jdk1.5.0_07/bin'
subprocess.Popen(args, env=environ)
</snippet></ROW><ROW><id>15961138</id><snippet>Popen</snippet></ROW><ROW><id>15961138</id><snippet>stdout</snippet></ROW><ROW><id>15961138</id><snippet>stderr</snippet></ROW><ROW><id>15961138</id><snippet>output = open(outfile, 'wb')
subprocess.Popen(args, stdout=output, stderr=output)
</snippet></ROW><ROW><id>15961138</id><snippet>shell=True</snippet></ROW><ROW><id>15961138</id><snippet>Popen</snippet></ROW><ROW><id>15961138</id><snippet>Popen("curl www.vit.org/downloads/doc/tariff.doc | java -jar tika-app-1.3.jar --text &gt;out_txt.txt", shell=True)
</snippet></ROW><ROW><id>15961198</id><snippet>&gt;&gt;&gt; re.search("brown fox\W+(?:\w+\W+){1,4}lazy dog", s)
&lt;_sre.SRE_Match at 0x3045850&gt;

&gt;&gt;&gt; re.search("brown fox\W+(?:\w+\W+){1,3}lazy dog", s)
&lt;_sre.SRE_Match at 0x3045920&gt;

&gt;&gt;&gt; re.search("brown fox\W+(?:\w+\W+){1,2}lazy dog", s)
(None)
</snippet></ROW><ROW><id>15961226</id><snippet>django-admin compilemessages</snippet></ROW><ROW><id>15961333</id><snippet>b = []
seen = set()
for t in a:
    s = tuple(sorted(t))
    if s not in seen:
        seen.add(s)
        b.append(t)
</snippet></ROW><ROW><id>15961333</id><snippet>seen = set()
b = [t for t in a if tuple(sorted(t)) not in seen and not seen.add(tuple(sorted(t)))]
</snippet></ROW><ROW><id>15961372</id><snippet>import urllib
import base64
import httplib

CONSUMER_KEY = 'my_key'
CONSUMER_SECRET = 'my_secret'

encoded_CONSUMER_KEY = urllib.quote(CONSUMER_KEY)
encoded_CONSUMER_SECRET = urllib.quote(CONSUMER_SECRET)

concat_consumer_url = encoded_CONSUMER_KEY + ":" + encoded_CONSUMER_SECRET

host = 'api.twitter.com'
url = '/oauth2/token/'
params = urllib.urlencode({'grant_type' : 'client_credentials'})
req = httplib.HTTPSConnection(host)
req.putrequest("POST", url)
req.putheader("Host", host)
req.putheader("User-Agent", "My Twitter 1.1")
req.putheader("Authorization", "Basic %s" % base64.b64encode(concat_consumer_url))
req.putheader("Content-Type" ,"application/x-www-form-urlencoded;charset=UTF-8")
req.putheader("Content-Length", "29")
req.putheader("Accept-Encoding", "gzip")

req.endheaders()
req.send(params)

resp = req.getresponse()
print resp.status, resp.reason
</snippet></ROW><ROW><id>15961383</id><snippet>&gt;&gt;&gt; "D:\\Whatever\\Folder\\Etc 1"
'D:\\Whatever\\Folder\\Etc 1'
&gt;&gt;&gt; 
&gt;&gt;&gt; print "D:\\Whatever\\Folder\\Etc 1"
D:\Whatever\Folder\Etc 1
</snippet></ROW><ROW><id>15961383</id><snippet>'\\'</snippet></ROW><ROW><id>15961383</id><snippet>&gt;&gt;&gt; "D:\\Whatever\\Folder\\Etc 1"[2]
'\\'
</snippet></ROW><ROW><id>15961383</id><snippet>&gt;&gt;&gt; len("D:\\Whatever\\Folder\\Etc 1")
24
&gt;&gt;&gt; "D:\\Whatever\\Folder\\Etc 1"[23]
'1'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15961383</id><snippet>'\\'</snippet></ROW><ROW><id>15961383</id><snippet>1</snippet></ROW><ROW><id>15961383</id><snippet>&gt;&gt;&gt; len('\\')
1
</snippet></ROW><ROW><id>15961383</id><snippet>&gt;&gt;&gt; 'a\nb'
'a\nb'              # single \
&gt;&gt;&gt; print 'a\nb'
a                   # no \ but, b printed on new line
b
</snippet></ROW><ROW><id>15961403</id><snippet>            if player.x + 32 &gt; grid_position[0]:
                collide_x = True
            elif player.x &lt; grid_position[0] + 32:
                collide_x = True
</snippet></ROW><ROW><id>15961403</id><snippet>            if grid_position[0] + 32 &gt; player.x &gt; grid_position[0]:
                collide_x = True
</snippet></ROW><ROW><id>15961916</id><snippet>{(k1,v):k2 for k1 in dict1 for k2 in dict2 
           for v in dict2[k2] if k2 in dict1[k1]}
</snippet></ROW><ROW><id>15962017</id><snippet>pcolor</snippet></ROW><ROW><id>15962017</id><snippet>pcolormesh</snippet></ROW><ROW><id>15962017</id><snippet>pcolormesh</snippet></ROW><ROW><id>15962017</id><snippet>specgram</snippet></ROW><ROW><id>15962017</id><snippet>pcolormesh</snippet></ROW><ROW><id>15962017</id><snippet>imshow</snippet></ROW><ROW><id>15962017</id><snippet>import numpy as np
import matplotlib.pyplot as plt

z = np.random.random((11,11))
x, y = np.mgrid[:11, :11]

fig, ax = plt.subplots()
ax.set_yscale('symlog')
ax.pcolormesh(x, y, z)
plt.show()
</snippet></ROW><ROW><id>15962017</id><snippet>specgram</snippet></ROW><ROW><id>15962017</id><snippet>specgram</snippet></ROW><ROW><id>15962017</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.cumsum(np.random.random(1000) - 0.5)

fig, (ax1, ax2) = plt.subplots(nrows=2)
data, freqs, bins, im = ax1.specgram(x)
ax1.axis('tight')

# "specgram" actually plots 10 * log10(data)...
ax2.pcolormesh(bins, freqs, 10 * np.log10(data))
ax2.axis('tight')

plt.show()
</snippet></ROW><ROW><id>15962017</id><snippet>pcolormesh</snippet></ROW><ROW><id>15962017</id><snippet>pcolormesh</snippet></ROW><ROW><id>15962017</id><snippet>pcolormesh</snippet></ROW><ROW><id>15962017</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.cumsum(np.random.random(1000) - 0.5)

fig, (ax1, ax2) = plt.subplots(nrows=2)
data, freqs, bins, im = ax1.specgram(x)
ax1.axis('tight')

# We need to explictly set the linear threshold in this case...
# Ideally you should calculate this from your bin size...
ax2.set_yscale('symlog', linthreshy=0.01)

ax2.pcolormesh(bins, freqs, 10 * np.log10(data))
ax2.axis('tight')

plt.show()
</snippet></ROW><ROW><id>15962050</id><snippet>\w</snippet></ROW><ROW><id>15962050</id><snippet>[a-z]</snippet></ROW><ROW><id>15962050</id><snippet>[a-zA-Z]</snippet></ROW><ROW><id>15962050</id><snippet>&gt;&gt;&gt; replacer = re.compile("(\w+)")
&gt;&gt;&gt; replacer.sub(r'"\1"', "4 python code")
'"4" "python" "code"'
</snippet></ROW><ROW><id>15962062</id><snippet>Query</snippet></ROW><ROW><id>15962062</id><snippet>from sqlalchemy.orm import Query

class MyQuery(Query):

  def all_active(self):
    return self.filter(User.is_active == True)
</snippet></ROW><ROW><id>15962062</id><snippet>db = SQLAlchemy(session_options={'query_cls': MyQuery})
</snippet></ROW><ROW><id>15962062</id><snippet>sessionmaker</snippet></ROW><ROW><id>15962062</id><snippet>sessionmaker(bind=engine, query_cls=MyQuery)
</snippet></ROW><ROW><id>15962062</id><snippet>User</snippet></ROW><ROW><id>15962062</id><snippet>class MyOtherQuery(Query):

  def _get_models(self):
    """Returns the query's underlying model classes."""
    if hasattr(query, 'attr'):
      # we are dealing with a subquery
      return [query.attr.target_mapper]
    else:
      return [
        d['expr'].class_
        for d in query.column_descriptions
        if isinstance(d['expr'], Mapper)
      ]

  def all_active(self):
    model_class = self._get_models()[0]
    return self.filter(model_class.is_active == True)
</snippet></ROW><ROW><id>15962062</id><snippet>users = relationship(..., query_class=MyOtherQuery)
</snippet></ROW><ROW><id>15962261</id><snippet>t = threading.Thread(self.pingTimer(wChSocket))
</snippet></ROW><ROW><id>15962261</id><snippet>self.pingTimer</snippet></ROW><ROW><id>15962261</id><snippet>threading.Thread</snippet></ROW><ROW><id>15962261</id><snippet>t = threading.Thread(target=self.pingTimer, args=(wChSocket,))
</snippet></ROW><ROW><id>15962729</id><snippet>http://localhost:5000/latestmessage?t=timestamp</snippet></ROW><ROW><id>15962794</id><snippet>getattr</snippet></ROW><ROW><id>15962794</id><snippet>import nltk.corpus
corpus_data = getattr(nltk.corpus, corpus_name)
</snippet></ROW><ROW><id>15962844</id><snippet>tr</snippet></ROW><ROW><id>15962844</id><snippet>td</snippet></ROW><ROW><id>15962844</id><snippet>ol</snippet></ROW><ROW><id>15962844</id><snippet>li</snippet></ROW><ROW><id>15962844</id><snippet>loop</snippet></ROW><ROW><id>15962844</id><snippet>for</snippet></ROW><ROW><id>15962844</id><snippet>&lt;td&gt;{{loop.index}}. {{item}}&lt;/td&gt;
</snippet></ROW><ROW><id>15963012</id><snippet>import matplotlib.pyplot as plt

def my_plot_1(ax=None):
    if ax is None:
      ax = plt.gca()
    ax.plot([1, 2, 3], 'b-')

def my_plot_2(ax=None):
    if ax is None:
      ax = plt.gca()
    ax.plot([3, 2, 1], 'ro')

def my_combo_plot():
    ax1 = plt.subplot(1,2,1)
    ax2 = plt.subplot(1,2,2)
    my_plot_1(ax1)
    my_plot_2(ax2)
</snippet></ROW><ROW><id>15963031</id><snippet>Py_Flushline</snippet></ROW><ROW><id>15963031</id><snippet>int
Py_FlushLine(void)
{
       PyObject *f = PySys_GetObject("stdout");
       if (f == NULL)
               return 0;
       if (!PyFile_SoftSpace(f, 0))
               return 0;
       return PyFile_WriteString("\n", f);
}
</snippet></ROW><ROW><id>15963061</id><snippet>scipy.misc.imrotate</snippet></ROW><ROW><id>15963061</id><snippet>scipy.ndimage.rotate</snippet></ROW><ROW><id>15963061</id><snippet>scipy.misc</snippet></ROW><ROW><id>15963061</id><snippet>cval</snippet></ROW><ROW><id>15963061</id><snippet>import numpy as np
import scipy.ndimage

data = 256 * np.random.random((10,10))
data = data.astype(np.uint8)

rotated = scipy.ndimage.rotate(data, 60, cval=255)
print rotated
</snippet></ROW><ROW><id>15963061</id><snippet>[[255 255 255 255 255 255 255 255 255 255 255 255 255 255]
 [255 255 255 255 255 150 255 255 255 255 255 255 255 255]
 [255 255 255 255 160 234 179 152 255 255 255 255 255 255]
 [255 255 255 255 120 206 114  19 173 188 255 255 255 255]
 [255 255 255 172 113 144 159 162 175  89  43  62 255 255]
 [255 255 255  81 170 194 205 137 158 190 196 123 186 255]
 [255 255 115  67 118 101  53  33 108  34 125  61 255 255]
 [255 255 176 126 113 189 170 120 118  10 182 165 255 255]
 [255 150 209 101   9 146 213  99 134 162 133 255 255 255]
 [255 255 190 126 194 159 119  67 171 240 143 255 255 255]
 [255 255 255 255 174 184 211  99 103 139 255 255 255 255]
 [255 255 255 255 255 255 167 232  70 247 255 255 255 255]
 [255 255 255 255 255 255 255 255 102 255 255 255 255 255]
 [255 255 255 255 255 255 255 255 255 255 255 255 255 255]]
</snippet></ROW><ROW><id>15963143</id><snippet>Record</snippet></ROW><ROW><id>15963143</id><snippet>record.ttamclient</snippet></ROW><ROW><id>15963143</id><snippet>account = Account.objects.get(...)
for record in account.records.all():
    client = record.ttamclient
    ...
</snippet></ROW><ROW><id>15963201</id><snippet>DISPLAYSURF.fill(white)
</snippet></ROW><ROW><id>15963201</id><snippet>L_monster = pygame.transform.scale(L_monster, (500, 500))
</snippet></ROW><ROW><id>15963239</id><snippet>string.replace(' ', 'x')
</snippet></ROW><ROW><id>15963343</id><snippet>findall</snippet></ROW><ROW><id>15963343</id><snippet>out = []
sentences = corpus.findall('.//sentence')
for sentence in sentences:
    out.append(sentence.text)
    instances = sentence.findall('instance')
    for instance in instances:
        out.append(instance.text)
        out.append(instance.tail)
    out.append(sentence.tail)

filterout = []
for i in out:
    txt = i.replace('\n', ' ').strip()
    if len(txt):
        filterout.append(txt)
print ' '.join(filterout)
</snippet></ROW><ROW><id>15963458</id><snippet>import pickle
kQuestion = 'question'
kGuess = 'guess'
questfile = 'questfile.txt'
nodes = []
....
</snippet></ROW><ROW><id>15963458</id><snippet>def questor_file():
    global nodes
    try:
        questor = open(questfile,'rb')
        try:
            nodes= pickle.load(questor)
            quest = nodes[0]
            questor.close()
            return quest
        except:
            print 'P.load failed'
            nodes = []

    except:
        print 'File did not open'
        nodes = []
    return Qnode('python')
</snippet></ROW><ROW><id>15963458</id><snippet>class Qnode:
    # initialization method
    def __init__(self,guess):
        self.nodetype = kGuess
        self.desc = guess
        nodes.append(self)
</snippet></ROW><ROW><id>15963458</id><snippet>questor = open(questfile,'wb')
q = pickle.dump(nodes,questor)
</snippet></ROW><ROW><id>15963506</id><snippet>1. &lt;record model="ir.module.category" id="module_lunch_category"&gt;
</snippet></ROW><ROW><id>15963506</id><snippet>2. &lt;record id="group_lunch_user" model="res.groups"&gt;
</snippet></ROW><ROW><id>15963506</id><snippet>&lt;record model="res.groups" id="group_bpl_manager"&gt;
            &lt;field name="name"&gt;Manager&lt;/field&gt;
        &lt;/record&gt;


&lt;record model="res.groups" id="group_bpl_user"&gt;
            &lt;field name="name"&gt;User&lt;/field&gt;
        &lt;/record&gt;
</snippet></ROW><ROW><id>15963506</id><snippet>3.&lt;field name="implied_ids" eval="[(4, ref('group_lunch_user'))]"/&gt;
</snippet></ROW><ROW><id>15963802</id><snippet>min_boundaries = set(min for id, min, max in orig)
max_boundaries = set(max for id, min, max in orig)
segment_boundaries = sorted(list(min_boundaries | max_boundaries))
</snippet></ROW><ROW><id>15963802</id><snippet>result = []
old_boundary = segment_boundaries[0]
for boundary in segment_boundaries[1:]:
    bounds = [old_boundary, boundary]
    middle = (old_boundary + boundary) / 2
    ids = [id for id, min, max in orig if min &lt; middle &lt; max]
    result.append(ids)
    result.append(bounds)
    old_boundary = boundary
</snippet></ROW><ROW><id>15963824</id><snippet>&gt;&gt;&gt; s = {'s1','s2','s3'}
&gt;&gt;&gt; {x + '!' for x in s}
set(['s1!', 's2!', 's3!'])
</snippet></ROW><ROW><id>15963824</id><snippet>&gt;&gt;&gt; s = set(['s1','s2','s3'])
&gt;&gt;&gt; set(x + '!' for x in s)
set(['s1!', 's2!', 's3!'])
</snippet></ROW><ROW><id>15964003</id><snippet>blah
blah
This is a first string
blah
blah
</snippet></ROW><ROW><id>15964003</id><snippet>import sys
import os
import re
import shutil

tf = open('tmp', 'a+')

with open('test1.txt') as f:
    for line in f.readlines():
        build = re.sub ('This is.*','This is a second string',line)
        tf.write(build)
tf.close()
f.close()
shutil.copy('tmp', 'test1.txt')
os.remove('tmp')
</snippet></ROW><ROW><id>15964003</id><snippet>blah
blah
This is a second string
blah
blah
</snippet></ROW><ROW><id>15964020</id><snippet>import re

re_domain = re.compile(".*\.(.*)")
sites = {}

for index in indexes:
    match = re_domain.search(index)
    if match:
        sites.setdefault(match.group(1), []).append(index)

for site_key in sites.keys():
    devices = sites[site_key]
</snippet></ROW><ROW><id>15964020</id><snippet>import collections
import os.path

sites = collections.defaultdict(list)

for index in indexes:
    root, ext = os.path.splitext(index)
    sites[ext].append(index)

for site_key, devices in sites.iteritems():
    ...
</snippet></ROW><ROW><id>15964049</id><snippet>numbers = map(int, raw_input().split())
</snippet></ROW><ROW><id>15964049</id><snippet>int()</snippet></ROW><ROW><id>15964049</id><snippet>numbers = list(map(int, input().split()))
</snippet></ROW><ROW><id>15964049</id><snippet>numbers = [int(n) for n in input().split()]
</snippet></ROW><ROW><id>15964099</id><snippet>User matching query does not exist</snippet></ROW><ROW><id>15964099</id><snippet>&lt;form action="/update_userprofile/?userid={{user.id}}" method="POST"&gt;
</snippet></ROW><ROW><id>15964099</id><snippet>user id</snippet></ROW><ROW><id>15964099</id><snippet>method=POST</snippet></ROW><ROW><id>15964185</id><snippet>def is_prime(n):
        status = True
        if n &lt; 2:
            status = False
        else:
            for i in range(2,n):
                if n % i == 0:
                    status = False
        return status
for n in range(1,101):
    if is_prime(n):
        if n==97:
            print n
        else:
            print n,",",
</snippet></ROW><ROW><id>15964185</id><snippet>output</snippet></ROW><ROW><id>15964185</id><snippet>2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 , 41 , 43 , 47 , 53 , 59 , 61 , 67 , 71 , 73 , 79 , 83 , 89 , 97</snippet></ROW><ROW><id>15964196</id><snippet>&lt;script src=https://pubnub.a.ssl.fastly.net/pubnub-3.4.3.min.js&gt;&lt;/script&gt;
&lt;script&gt;(function(){

    var pubnub = PUBNUB.init({ subscribe_key : 'demo', ssl : true });
    pubnub.subscribe({
        channel : '0IHM4b2VpamZhaWU0eThyaWpvaWdma3Mg',  // SESSION ID
        message : function(message) { alert(message) }  // ALERT MESSAGE
    });

})();&lt;/script&gt;
</snippet></ROW><ROW><id>15964196</id><snippet>&lt;div&gt;{message-here}&lt;/div&gt;</snippet></ROW><ROW><id>15964196</id><snippet>taskqueue.add(
    url='/my-long-task',                                                                              
    countdown=1,
    method='GET',
    params={ 'sessionid' : '0IHM4b2VpamZhaWU0eThyaWpvaWdma3Mg' }
)
</snippet></ROW><ROW><id>15964196</id><snippet>import webapp2
from Pubnub import Pubnub ## Download - https://raw.github.com/pubnub/pubnub-api/master/google-app-engine/python/Pubnub.py
pubnub = Pubnub( "demo", "demo" )

def server_to_client_notify( sessionId, message ):
        pubnub.publish({
            "channel" : sessionId, ## SESSION ID
            "message" : "hi!"
        })

class LongRunningTaskQueue(webapp2.RequestHandler):
    def get(self):
        ## GET Session ID
        sessionId = urllib.unquote(self.request.get( 'sessionid', '' ))

        server_to_client_notify( sessionId, "Starting Your Job" )
        ## - DO A LOT OF WORK - ##
        ## - DO A LOT OF WORK - ##
        ## - DO A LOT OF WORK - ##

        server_to_client_notify( sessionId, "Your Job is Nearly Complete" )
        ## - DO A LOT OF WORK - ##
        ## - DO A LOT OF WORK - ##
        ## - DO A LOT OF WORK - ##

        server_to_client_notify( sessionId, "Your Job has Finished!" )

app = webapp2.WSGIApplication([('/my-long-task', LongRunningTaskQueue)])
</snippet></ROW><ROW><id>15964245</id><snippet>today = datetime.datetime.today().strftime("%m-%d-%Y_%H.%M.%S")
fname = "text" + today
f = open(fname,'w')
</snippet></ROW><ROW><id>15964245</id><snippet>open(...)</snippet></ROW><ROW><id>15964245</id><snippet>f</snippet></ROW><ROW><id>15964245</id><snippet>file</snippet></ROW><ROW><id>15964245</id><snippet>w+</snippet></ROW><ROW><id>15964265</id><snippet>url(r'^public/search/$', MyView.as_view(template_name="search1.html"), name= 'public_search')
url(r'^private/search/$', MyView.as_view(template_name="search2.html"), name= 'private_search')
</snippet></ROW><ROW><id>15964449</id><snippet>iteritems()</snippet></ROW><ROW><id>15964449</id><snippet>setattr()</snippet></ROW><ROW><id>15964449</id><snippet>for key, value in data.iteritems():
    setattr(property_selected, key, value)
</snippet></ROW><ROW><id>15964449</id><snippet>for key, value in data.items():
    if key in ['foo_field', 'bar_field']:
        setattr(property_selected, key, value)
</snippet></ROW><ROW><id>15964838</id><snippet>#    import your java package by this way
import com.yourcomp.yourpackage as yourpackage 

#   gets superclass
def get_ancestor_4_class( c ):
    if not c or not c.__bases__: return java.lang.Object
    return c.__bases__[0].__name__

#   there all class to ancestor
#   mapping will be placed        
class2ancestor = {}

#   list (generator) of all classes in yourpackage 
yourclasses = (eval('yourpackage.%s' % classname) \
    for classname in dir( yourpackage ))

#    showtime!
for c in yourclasses:
    class2ancestor[ c.__name__ ] = get_ancestor_4_class( c ).__name__
</snippet></ROW><ROW><id>15964838</id><snippet>class2ancestor</snippet></ROW><ROW><id>15964863</id><snippet>!!opencv-matrix</snippet></ROW><ROW><id>15964863</id><snippet>tag:yaml.org,2002:opencv-matrix</snippet></ROW><ROW><id>15964863</id><snippet>add_constructor</snippet></ROW><ROW><id>15964863</id><snippet>!opencv-matrix</snippet></ROW><ROW><id>15964863</id><snippet>!!opencv-matrix</snippet></ROW><ROW><id>15964863</id><snippet>tag:yaml.org,2002:opencv-matrix</snippet></ROW><ROW><id>15964863</id><snippet>add_constructor</snippet></ROW><ROW><id>15964863</id><snippet>!</snippet></ROW><ROW><id>15964863</id><snippet>!!</snippet></ROW><ROW><id>15964927</id><snippet>mydic['q4a1_0']['choices']
</snippet></ROW><ROW><id>15964991</id><snippet>127.0.0.1 localhost
127.0.0.1 local.development.com
</snippet></ROW><ROW><id>15965012</id><snippet>=&gt;</snippet></ROW><ROW><id>15965012</id><snippet>:</snippet></ROW><ROW><id>15965012</id><snippet>    'CUSTOMVARS' :
        {
        },
'NO_ORDERLINE' : 0, 'AUTOSHIP' : 0, 'PRODUCT_GROUP' : -1, ...
</snippet></ROW><ROW><id>15965012</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>15965012</id><snippet>ast.literal_eval(node_or_string)
</snippet></ROW><ROW><id>15965012</id><snippet>#!/usr/bin/env python2
# -*- encoding: utf8 -*-

import urllib2
import ast
import re
from pprint import PrettyPrinter

pp = PrettyPrinter()
resp = urllib2.urlopen("http://pastie.org/pastes/7461356/download")
content = resp.read()
content = re.search(r"\s+=\s+({(?:.|\n)+});", content).group(1)
# Fix following line to handle =&gt; inside strings, if needed
content = re.sub(r"=&gt;", r":", content) 
parsed = ast.literal_eval(content)
pp.pprint(parsed)
</snippet></ROW><ROW><id>15965012</id><snippet>=&gt;</snippet></ROW><ROW><id>15965012</id><snippet>re.search</snippet></ROW><ROW><id>15965012</id><snippet>\s+=\s+      # This marks the = before the start of the hash
({           # Capture the first {
  (?:.|\n)+  # This matches all characters.
             # The (?: is to prevent capture-inside-capture
})           # Capture the last }
;            # This is not captured
</snippet></ROW><ROW><id>15965084</id><snippet>ls *</snippet></ROW><ROW><id>15965084</id><snippet>ls file1 file2 file3 ...</snippet></ROW><ROW><id>15965084</id><snippet>glob</snippet></ROW><ROW><id>15965084</id><snippet>proc = subprocess.Popen('ls -v ' + self.localDbPath + 'labris.urls.*',
                        shell=True,
                        stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>15965086</id><snippet>python setup.py sdist upload
</snippet></ROW><ROW><id>15965212</id><snippet>__setitem__</snippet></ROW><ROW><id>15965212</id><snippet>and</snippet></ROW><ROW><id>15965212</id><snippet>or</snippet></ROW><ROW><id>15965395</id><snippet>random</snippet></ROW><ROW><id>15965395</id><snippet>random.gauss(mu, sigma)</snippet></ROW><ROW><id>15965395</id><snippet>random.normalvariate(mu, sigma)</snippet></ROW><ROW><id>15965609</id><snippet>f=open('chars.csv', encoding='utf-8', errors='ignore')</snippet></ROW><ROW><id>15965609</id><snippet>errors</snippet></ROW><ROW><id>15965705</id><snippet>def parse(s):
    results = [float(x) for x in s.split(' ') if x.count('.') == 1]
</snippet></ROW><ROW><id>15965705</id><snippet>&gt;&gt; [30.1, 288.3, 1.9, 45.3]</snippet></ROW><ROW><id>15965705</id><snippet>&gt;&gt; [155.5, 334.7, 6.7, 44.5]</snippet></ROW><ROW><id>15965705</id><snippet>for every `x` in the split string, which I've split on whitespace, 
cast it to a float if x's count of `.` is 1.
</snippet></ROW><ROW><id>15965705</id><snippet>count()</snippet></ROW><ROW><id>15965705</id><snippet>.</snippet></ROW><ROW><id>15965705</id><snippet>index()</snippet></ROW><ROW><id>15965715</id><snippet>form action=""</snippet></ROW><ROW><id>15965715</id><snippet>&lt;form name="search" action="/cgi-bin/test.py" method="get"&gt;
Search: &lt;input type="text" name="searchbox"&gt;
&lt;input type="submit" value="Submit"&gt;
&lt;/form&gt; 
</snippet></ROW><ROW><id>15965715</id><snippet>import cgi
form = cgi.FieldStorage()
seachterm =  form.getvalue('searchbox')
</snippet></ROW><ROW><id>15965846</id><snippet>help()</snippet></ROW><ROW><id>15965846</id><snippet>modules</snippet></ROW><ROW><id>15965856</id><snippet>d[ch] = d.get(ch,[]).append(1)</snippet></ROW><ROW><id>15965856</id><snippet>d[ch]</snippet></ROW><ROW><id>15965856</id><snippet>append</snippet></ROW><ROW><id>15965856</id><snippet>d[ch] = d.get(ch, [])
d[ch].append(1)
</snippet></ROW><ROW><id>15965977</id><snippet>Agent</snippet></ROW><ROW><id>15965977</id><snippet>ManyToManyField</snippet></ROW><ROW><id>15965977</id><snippet>AgentCategory</snippet></ROW><ROW><id>15965977</id><snippet>agentcategory</snippet></ROW><ROW><id>15965977</id><snippet>agent_cats = AgentCategory.objects.filter(...)
property_selected.agentcategory.clear()
property_selected.agentcategory = agent_cats
property_selected.agentcategory.save()
</snippet></ROW><ROW><id>15966092</id><snippet>index = zeros(shape=(1,dx+dy))</snippet></ROW><ROW><id>15966092</id><snippet>index[r]+=1</snippet></ROW><ROW><id>15966092</id><snippet>r</snippet></ROW><ROW><id>15966092</id><snippet>index = zeros(shape=(dx+dy))
</snippet></ROW><ROW><id>15966092</id><snippet>index[0, r]+=1
</snippet></ROW><ROW><id>15966092</id><snippet>index[:, r]+=1
</snippet></ROW><ROW><id>15966122</id><snippet>User.find(user_id)
User.find_by_email(user_email)
</snippet></ROW><ROW><id>15966122</id><snippet>to_*</snippet></ROW><ROW><id>15966122</id><snippet>Foo</snippet></ROW><ROW><id>15966122</id><snippet>Bar</snippet></ROW><ROW><id>15966122</id><snippet>to_bar</snippet></ROW><ROW><id>15966122</id><snippet>foo = Foo.new(...)   # make a new Foo
bar = foo.to_bar     # convert it to a Bar
</snippet></ROW><ROW><id>15966122</id><snippet>bars = foos.map(&amp;:to_bar)
</snippet></ROW><ROW><id>15966122</id><snippet>Foo.parse(str)</snippet></ROW><ROW><id>15966122</id><snippet>Foo.toBar = function(foo) {
   return new Bar(...);
};
</snippet></ROW><ROW><id>15966122</id><snippet>var bars = _.map(foos, Foo.toBar);
</snippet></ROW><ROW><id>15966122</id><snippet>Foo.toBar : foo -&gt; bar
Foo.fromBar : bar -&gt; foo
</snippet></ROW><ROW><id>15966122</id><snippet>val bar = Foo.toBar foo;
val bars = map Foo.toBar foos;
</snippet></ROW><ROW><id>15966267</id><snippet>&gt;&gt;&gt; d = {'a': [1, 2, 3], 'b': [5, 6, 7], 'c': [9, 0]}
&gt;&gt;&gt; [y for x in d.values() for y in x]
[1, 2, 3, 9, 0, 5, 6, 7]
</snippet></ROW><ROW><id>15966267</id><snippet>for</snippet></ROW><ROW><id>15966267</id><snippet>[y 
 for x in d.values() 
 for y in x]
</snippet></ROW><ROW><id>15966299</id><snippet>pool.map</snippet></ROW><ROW><id>15966299</id><snippet>numpy_array</snippet></ROW><ROW><id>15966299</id><snippet>decode</snippet></ROW><ROW><id>15966299</id><snippet>def numpy_array(data, peaks):
    processors=4
    pool = mp.Pool(processes=processors)
    chunk_size=len(data)/processors
    print range(processors)
    map_parameters = [] # new
    for i in range(processors):
        counter = i*chunk_size
        chunk=peaks[i*chunk_size:(i+1)*chunk_size-1]
        map_parameters.append((data,chunk,counter)) # new
    pool.map(decode, map_parameters) # new

def decode((data,chunk,counter)): # changed
    for x in chunk:
        peak_counter=0
        data_buff=base64.b64decode(x)
        buff_size=len(data_buff)/4
        unpack_format="&gt;%dL" % buff_size
        index=0
        for y in struct.unpack(unpack_format,data_buff):
            buff1=struct.pack("I",y)
            buff2=struct.unpack("f",buff1)[0]
            if (index % 2 == 0):
                data[counter][1][peak_counter][0]=float(buff2)
            else:
                data[counter][1][peak_counter][1]=float(buff2)
                peak_counter+=1
            index+=1
        print data[counter][1][10][0]
        counter+=1
</snippet></ROW><ROW><id>15966866</id><snippet>raw_input()</snippet></ROW><ROW><id>15966866</id><snippet>map()</snippet></ROW><ROW><id>15966942</id><snippet>boost::asio</snippet></ROW><ROW><id>15966942</id><snippet>boost::python</snippet></ROW><ROW><id>15966942</id><snippet>SWIG</snippet></ROW><ROW><id>15967347</id><snippet>$ openssl req -new -x509 -days 365 -nodes -out cert.pem -keyout key.pem
Generating a 1024 bit RSA private key
# ...
Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:MyState
Locality Name (eg, city) []:Some City
Organization Name (eg, company) [Internet Widgits Pty Ltd]:My Organization, Inc.
Organizational Unit Name (eg, section) []:My Group
Common Name (eg, YOUR name) []:myserver.mygroup.myorganization.com
Email Address []:ops@myserver.mygroup.myorganization.com
$
</snippet></ROW><ROW><id>15967347</id><snippet>cacerts</snippet></ROW><ROW><id>15967347</id><snippet>ssl.CERT_NONE</snippet></ROW><ROW><id>15967347</id><snippet>wrap_socket</snippet></ROW><ROW><id>15967590</id><snippet>query_list = []
for field_name in ['student_process', 'student_status', 'student_number', 'student_region', ]:
    value = request.GET.get(field_name, None)
    if value:
        query_list.append(Q(**{field_name+'s_icontains': value}))
queryset = Student.objects.filter(reduce(operator.and_, query_list))
</snippet></ROW><ROW><id>15967895</id><snippet>Security
  ----ir.model.access.csv
  ----sale_security.xml
</snippet></ROW><ROW><id>15967895</id><snippet>id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_sale_shop,sale.shop,model_sale_shop,base.group_user,1,0,0,0
access_sale_order,sale.order,model_sale_order,base.group_sale_salesman,1,1,1,0
</snippet></ROW><ROW><id>15967944</id><snippet>root.update()
root.deiconify()
</snippet></ROW><ROW><id>15968044</id><snippet>print ' '.join(format(f, '.3f') for f in z)
</snippet></ROW><ROW><id>15968044</id><snippet>format()</snippet></ROW><ROW><id>15968044</id><snippet>&gt;&gt;&gt; pi=3.14159265359
&gt;&gt;&gt; e=2.71828182
&gt;&gt;&gt; z=(pi,e)
&gt;&gt;&gt; print ' '.join(format(f, '.3f') for f in z)
3.142 2.718
</snippet></ROW><ROW><id>15968440</id><snippet>forms.ModelForm</snippet></ROW><ROW><id>15968440</id><snippet>class YourForm(forms.ModelForm):
    amount = forms.FloatField() 

    def __init__(self, *args, **kwargs):
        super(YourForm, self).__init__(*args, **kwargs)
        self.fields['amount'].widget = forms.HiddenInput() 
        self.fields['amount'].initial = '' 
</snippet></ROW><ROW><id>15968472</id><snippet>_sre</snippet></ROW><ROW><id>15968472</id><snippet>re</snippet></ROW><ROW><id>15968472</id><snippet>__file__</snippet></ROW><ROW><id>15968472</id><snippet>_sre.c</snippet></ROW><ROW><id>15968516</id><snippet>__del__</snippet></ROW><ROW><id>15968516</id><snippet>__del__</snippet></ROW><ROW><id>15968516</id><snippet>atexit</snippet></ROW><ROW><id>15968516</id><snippet>atexit.register(my_named_temporary_file.close)</snippet></ROW><ROW><id>15968561</id><snippet>If</snippet></ROW><ROW><id>15968561</id><snippet>def z3py.If   (       a,
          b,
          c,
          ctx = None 
  )   
</snippet></ROW><ROW><id>15968561</id><snippet>&gt;&gt;&gt; x = Int('x')
&gt;&gt;&gt; y = Int('y')
&gt;&gt;&gt; max = If(x &gt; y, x, y)
&gt;&gt;&gt; max
If(x &gt; y, x, y)
&gt;&gt;&gt; simplify(max)
If(x &lt;= y, y, x)
</snippet></ROW><ROW><id>15968847</id><snippet>sudo pip install virtualenv virtualenvwrapper
</snippet></ROW><ROW><id>15968847</id><snippet># consider adding this to ~/.profile or equivalent
source /usr/local/bin/virtualenvwrapper.sh
</snippet></ROW><ROW><id>15968847</id><snippet>mkvirtualenv ipy
</snippet></ROW><ROW><id>15968847</id><snippet>pip install -r repo/reqs.txt
</snippet></ROW><ROW><id>15968847</id><snippet>tornado
pyzmq
ipython
numpy
matplotlib
</snippet></ROW><ROW><id>15968847</id><snippet>workon ipy
</snippet></ROW><ROW><id>15968847</id><snippet>ipython notebook
</snippet></ROW><ROW><id>15968994</id><snippet>#At the beginning
import threading

#Instead of def getKeyPress()
class getKeyPress(threading.Thread):
    def run(self):
        import pygame
        pygame.init()
        global targets
        global status
        while not status:
               pygame.event.pump()
               keys = pygame.key.get_pressed()
               targets, status = processOutputs(targets, keys)
        targets = np.array(targets)
        targets = flattenMatrix(targets)
        sio.savemat('targets.mat', {'targets':targets}) 

#Instead of 
#targetProcess = multiprocessing.Process(target=getKeyPress)
#targetProcess.daemon = True
#targetProcess.start()  
gkp = getKeyPress()
gkp.start()
</snippet></ROW><ROW><id>15969003</id><snippet>cherrypy.config.update('myapp.config')
</snippet></ROW><ROW><id>15969003</id><snippet>app = cherrypy.tree.mount(c, '/', 'myapp.config')
</snippet></ROW><ROW><id>15969353</id><snippet>__init__.py</snippet></ROW><ROW><id>15969571</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; string = "DAY MONTH      YEAR    THIS   HAS RANDOM   SPACES"
&gt;&gt;&gt; [match.start() for match in re.finditer(r'\b\w', string)]
[0, 4, 15, 23, 30, 34, 43]
</snippet></ROW><ROW><id>15969642</id><snippet>for link in links: #links contains the links linked to current issue
    if linked_issue.key not in self.tracked:
        return self.collect_links(linked_issue.key) #links changes
</snippet></ROW><ROW><id>15969642</id><snippet>for</snippet></ROW><ROW><id>15969642</id><snippet>links</snippet></ROW><ROW><id>15969642</id><snippet>return</snippet></ROW><ROW><id>15970173</id><snippet>&gt;&gt;&gt; numpy.matrix([[1,2],[1,2]])
matrix([[1, 2],
        [1, 2]])
</snippet></ROW><ROW><id>15970188</id><snippet>numpy.roll</snippet></ROW><ROW><id>15970188</id><snippet>a = np.array([0,1,2,3,4])
b = np.roll(a,1)
print(b)
&gt;&gt;&gt; [4 0 1 2 3]
</snippet></ROW><ROW><id>15971148</id><snippet>os.system</snippet></ROW><ROW><id>15971148</id><snippet>stdout</snippet></ROW><ROW><id>15971148</id><snippet>0</snippet></ROW><ROW><id>15971148</id><snippet>subprocess</snippet></ROW><ROW><id>15971148</id><snippet>import subprocess

def selector():
    filename = askopenfilename() 
    p = subprocess.Popen(["dmtxread", "-n", filename], stdout=subprocess.PIPE)
    stdout, stderr = p.communicate()
    res.insert(INSERT, stdout)
    res.pack()
</snippet></ROW><ROW><id>15971423</id><snippet>numpy.outer()</snippet></ROW><ROW><id>15971423</id><snippet>In [6]: numpy.outer(weights, values)
Out[6]: 
array([[ 1,  3, 10,  4,  2],
       [ 5, 15, 50, 20, 10],
       [ 2,  6, 20,  8,  4]])
</snippet></ROW><ROW><id>15971460</id><snippet>[[x,y,z] for x,y,z in zip(frame_position,energy,cell_volume)]
</snippet></ROW><ROW><id>15971505</id><snippet>from datetime import datetime

now = datetime.now()
seconds_since_midnight = (now - now.replace(hour=0, minute=0, second=0, microsecond=0)).total_seconds()
</snippet></ROW><ROW><id>15971505</id><snippet>datetime.now() - datetime.now()
</snippet></ROW><ROW><id>15971684</id><snippet>import datetime
import collections

raw_data = [
{'name':'AB', 'date':datetime.date(2012, 10, 2), 'price': 23.80}, 
{'name':'AB', 'date':datetime.date(2012, 10, 3), 'price': 23.72},
{'name':'AB', 'date':datetime.date(2012, 10, 4), 'price': 25.90},
{'name':'AB', 'date':datetime.date(2012, 10, 5), 'price': 29.95}
]

#all unique names in raw_data
names = set(row["name"] for row in raw_data)
#lowest prices, keyed by name
lowestPrices = {name: min(row["price"] for row in raw_data) for name in names}

for row in raw_data:
    name = row["name"]
    lowestPrice = lowestPrices[name]
    price = row["price"]
    percentage = ((price/lowestPrice)-1)*100
    row["percentage"] = percentage

print raw_data
</snippet></ROW><ROW><id>15971684</id><snippet>[
{'date': datetime.date(2012, 10, 5), 'price': 29.95, 'percentage': 26.264755480607093, 'name': 'AB'},
{'date': datetime.date(2012, 10, 4), 'price': 25.9, 'percentage': 9.190556492411472, 'name': 'AB'}, 
{'date': datetime.date(2012, 10, 2), 'price': 23.8, 'percentage': 0.337268128161905, 'name': 'AB'}, 
{'date': datetime.date(2012, 10, 3), 'price': 23.72, 'percentage': 0, 'name': 'AB'} 
]
</snippet></ROW><ROW><id>15971771</id><snippet>python testMyCase.py MyCase.testItIsHot
</snippet></ROW><ROW><id>15972041</id><snippet>In [11]: lst = [(3L, (2L,)), (108L, (11L,))]

In [12]: tuple(el for subl in lst for el in subl)
Out[12]: (3L, (2L,), 108L, (11L,))
</snippet></ROW><ROW><id>15972283</id><snippet>sleep()</snippet></ROW><ROW><id>15972309</id><snippet>import csv
with open('/home/test/kelvin1/add.csv', 'wb') as csvfile:
    kev = csv.writer(csvfile, delimiter=' ',
                 quotechar='|', quoting=csv.QUOTE_MINIMAL)
    k ={'ID1':{'sam':1,'maj':5,'tif':7,'paul':1},'ID2':{'maj':4,'bib':5}}
    for i in k:
          kev.writerow(i)
          for j in k[i]:
              kev.writerow(j)
              kev.writerow('%d' % (k[i][j]))
</snippet></ROW><ROW><id>15972553</id><snippet>SIGKILL</snippet></ROW><ROW><id>15972553</id><snippet>nohup ~/Desktop/left.py &amp;
</snippet></ROW><ROW><id>15972553</id><snippet>SIGHUP</snippet></ROW><ROW><id>15972553</id><snippet>SIGKILL</snippet></ROW><ROW><id>15972553</id><snippet>SIGSTOP</snippet></ROW><ROW><id>15972593</id><snippet>c.execute("DELETE FROM orders WHERE orders_id=?)", (orderToDelete,))</snippet></ROW><ROW><id>15972593</id><snippet>conn.commit()</snippet></ROW><ROW><id>15972594</id><snippet>apply</snippet></ROW><ROW><id>15972594</id><snippet>In [11]: df.apply(lambda row: windchill(row['Temperature'], row['Wind Speed']),
                 axis=1)
Out[11]:
2003-03-01 06:00:00-05:00    24.794589
2003-03-01 07:00:00-05:00    25.136527
2003-03-01 08:00:00-05:00    25.934114
2003-03-01 09:00:00-05:00    28.219431
2003-03-01 10:00:00-05:00    29.505105

In [12]: df['Wind Chill'] = df.apply(lambda row: windchill(row['Temperature'], row['Wind Speed']),
                                    axis=1)

In [13]: df
Out[13]:
                           Day  Temperature  Wind Speed  Year  Wind Chill
2003-03-01 06:00:00-05:00    1        30.27        5.27  2003   24.794589
2003-03-01 07:00:00-05:00    1        30.21        4.83  2003   25.136527
2003-03-01 08:00:00-05:00    1        31.81        6.09  2003   25.934114
2003-03-01 09:00:00-05:00    1        34.04        6.61  2003   28.219431
2003-03-01 10:00:00-05:00    1        35.31        6.97  2003   29.505105
</snippet></ROW><ROW><id>15972594</id><snippet>In [21]: for _, row in df.iterrows(): row['Day'] = 2
</snippet></ROW><ROW><id>15972594</id><snippet>row</snippet></ROW><ROW><id>15972594</id><snippet>In [22]: row
Out[22]:
Day               2.00
Temperature      35.31
Wind Speed        6.97
Year           2003.00
Name: 2003-03-01 10:00:00-05:00
</snippet></ROW><ROW><id>15972594</id><snippet>In [23]: df
Out[23]:
                           Day  Temperature  Wind Speed  Year
2003-03-01 06:00:00-05:00    1        30.27        5.27  2003
2003-03-01 07:00:00-05:00    1        30.21        4.83  2003
2003-03-01 08:00:00-05:00    1        31.81        6.09  2003
2003-03-01 09:00:00-05:00    1        34.04        6.61  2003
2003-03-01 10:00:00-05:00    1        35.31        6.97  2003
</snippet></ROW><ROW><id>15972594</id><snippet>df</snippet></ROW><ROW><id>15972594</id><snippet>In [24]: row = df.ix[0]  # also a copy

In [25]: row['Day'] = 2
</snippet></ROW><ROW><id>15972594</id><snippet>df</snippet></ROW><ROW><id>15972594</id><snippet>In [26]: row = df.ix[2:3]  # this one's a view

In [27]: row['Day'] = 3
</snippet></ROW><ROW><id>15973396</id><snippet>from base64 import b64encode, b64decode</snippet></ROW><ROW><id>15973396</id><snippet>json.dumps({1 : 2, 'hey' : 'you'})</snippet></ROW><ROW><id>15973396</id><snippet>def encrypt(s):
    encryptedString = AES.encrypt(s)
    return b64encode(encryptedString)

sock.connect(server)
jsondata = {1 : 2}
sock.send( encrypt(json.dumps(jsondata)) )
</snippet></ROW><ROW><id>15973396</id><snippet>data = sock.recv(1024)
jsondata = json.loads( b64decode(decrypt(data))) )
print(jsondata)
</snippet></ROW><ROW><id>15973396</id><snippet>def encrypt(s):
    encryptedString = AES.encrypt(s)
    return b64encode(encryptedString)

sock.connect(server)
jsondata = {1 : encrypt(2)}
sock.send( json.dumps(jsondata) )
</snippet></ROW><ROW><id>15973396</id><snippet>data = sock.recv(1024)
jsondata = json.loads(data)
jsondata[1] = decrypt(b64decode(jsondata[1]))
</snippet></ROW><ROW><id>15973424</id><snippet>def some_funct():
    """
    :raises ExceptionType: Some multi-line \
        exception description.
    """
</snippet></ROW><ROW><id>15973424</id><snippet>def some_funct():
    """
    :raises ExceptionType: Some multi-line
        exception description.
    """
</snippet></ROW><ROW><id>15973480</id><snippet>lines</snippet></ROW><ROW><id>15973480</id><snippet>def lines(xcoord, ycoord):  
    penup()  
    goto(xcoord, ycoord)  
    startPoint = pos()
    pensize(3)  
    pendown()  
    color("blue")  
    forward(10)  
    right(randint(0,360))
    endPoint = pos()
    penup()
    return (startPoint, endPoint)
</snippet></ROW><ROW><id>15973480</id><snippet>myLines = []
for i in range(10):
    #not pictured: generate xcoord and ycoord however you want
    myLines.append(lines(xcoord,ycoord))
</snippet></ROW><ROW><id>15973480</id><snippet>def intersects(line1, line2):
    #todo: implement line-line intersection test that you read about

#iterate through all combinations of lines,
#testing whether the two intersect
for i, line1 in enumerate(myLines):
    for j, line2 in enumerate(myLines):
        #we don't care if a line intersects with itself
        if i == j: 
            continue
        if intersects(line1, line2):
            print "Line #{} intersects with Line #{}".format(i,j)
</snippet></ROW><ROW><id>15973592</id><snippet>timeit()</snippet></ROW><ROW><id>15973592</id><snippet>In : a = (3, 2, 9, 4)

In : f1 = lambda: [x + 1 for x in a]

In : f2 = lambda: tuple(x + 1 for x in a)

In : timeit.timeit(f1)
Out: 0.595026969909668

In : timeit.timeit(f2)
Out: 2.360887050628662
</snippet></ROW><ROW><id>15973592</id><snippet>In : f3 = lambda: list(x + 1 for x in a)

In : timeit.timeit(f3)
Out: 2.5421998500823975
</snippet></ROW><ROW><id>15973592</id><snippet>map()</snippet></ROW><ROW><id>15973592</id><snippet>In : inc = partial(operator.add,1)

In : f4 = lambda:map(inc, a)

In : timeit.timeit(f4)
Out: 1.2346529960632324
</snippet></ROW><ROW><id>15973592</id><snippet>In : f5 = lambda: tuple([x + 1 for x in a])

In : timeit.timeit(f5)
Out: 0.7900090217590332
</snippet></ROW><ROW><id>15973747</id><snippet>generator</snippet></ROW><ROW><id>15973747</id><snippet>coroutine</snippet></ROW><ROW><id>15973747</id><snippet>run_async</snippet></ROW><ROW><id>15973747</id><snippet>decorator</snippet></ROW><ROW><id>15973747</id><snippet>import tornado.ioloop
import tornado.web
import tornado.gen
import time
from threading import Thread
from functools import wraps

def run_async(func):
  @wraps(func)
  def async_func(*args, **kwargs):
    func_hl = Thread(target = func, args = args, kwargs = kwargs)
    func_hl.start()
    return func_hl

  return async_func

@run_async
def login(username,password,callback=None):
  m = hashlib.md5()
  m.update(password)
  hashed = m.hexdigest()
  login = User.objects(UserName=username.lower(),Password=hashed).exclude("Password","Wall","FriendsRequested","Friends","FriendsRequesting")
  if login.first() is None:
    login = User.objects(Email=username.lower(),Password=hashed).exclude("Password","Wall","FriendsRequested","Friends","FriendsRequesting")
    if login.first() is None:
      return None
  logger.info(username + " has logged in")
  if callback != None:
    return callback(login.first())
  return login.first()


class AuthLoginHandler(BaseHandler):
  @tornado.web.asynchronous
  def get(self):
    self.render("login.html")

  @tornado.web.asynchronous
  @tornado.gen.coroutine
  def post(self):
    username = self.get_argument("UserName",strip = True)
    password = self.get_argument("Password",strip = True)
    user = yield tornado.gen.Task(auth_actions.login, username, password)
    if not user:
      self.redirect("/auth/login")
      return
    self.set_secure_cookie("userdata", tornado.escape.json_encode(dumps(user.to_mongo())))
    self.redirect("/")
</snippet></ROW><ROW><id>15973761</id><snippet>NullPool</snippet></ROW><ROW><id>15973761</id><snippet>NullPool</snippet></ROW><ROW><id>15973761</id><snippet>Engine.connect</snippet></ROW><ROW><id>15973761</id><snippet>SingletonThreadPool</snippet></ROW><ROW><id>15973761</id><snippet>SingletonThreadPool</snippet></ROW><ROW><id>15973761</id><snippet>:memory:</snippet></ROW><ROW><id>15973761</id><snippet>poolclass</snippet></ROW><ROW><id>15973761</id><snippet>connect</snippet></ROW><ROW><id>15973761</id><snippet>from sqlalchemy.pool import SingletonThreadPool

engine = create_engine('sqlite:///mydb.db', poolclass=SingletonThreadPool)
</snippet></ROW><ROW><id>15973761</id><snippet>try:
    engine = create_engine(URL, pool_size=10)
except TypeError:
    # The pool_size argument won't work for the default SQLite setup in SQLAlchemy 0.7, try without
    engine = create_engine(URL)
</snippet></ROW><ROW><id>15973918</id><snippet>&gt;&gt;&gt; buff = """
... functionOne("I want this text", iDontWantThis);
... functionTwo("I also want this text");"""
&gt;&gt;&gt; re.findall("(?:functionOne|functionTwo)\(.*?\"(.*?)\".*?\)",buff)
['I want this text', 'I also want this text']
</snippet></ROW><ROW><id>15973918</id><snippet>foo("hello, this is a very long
     string that needs to be less than
     80 characters", var1, var2)
</snippet></ROW><ROW><id>15974029</id><snippet>buildpath</snippet></ROW><ROW><id>15974029</id><snippet>.replace()</snippet></ROW><ROW><id>15974029</id><snippet>.replace()</snippet></ROW><ROW><id>15974029</id><snippet>.replace()</snippet></ROW><ROW><id>15974029</id><snippet>buildpath</snippet></ROW><ROW><id>15974029</id><snippet>r</snippet></ROW><ROW><id>15974029</id><snippet>r'\\'</snippet></ROW><ROW><id>15974029</id><snippet>r'\\\\'</snippet></ROW><ROW><id>15974029</id><snippet>buildpath = sys.argv[1]
buildpath = buildpath.replace('\\', '\\\\')
print buildpath
</snippet></ROW><ROW><id>15974280</id><snippet>greenlet==0.4.0</snippet></ROW><ROW><id>15974280</id><snippet>GCC 4.8</snippet></ROW><ROW><id>15974280</id><snippet>CFLAGS="-O0" pip install greenlet==0.4.0</snippet></ROW><ROW><id>15974280</id><snippet>setup.py</snippet></ROW><ROW><id>15974280</id><snippet>os.environ["CFLAGS"]</snippet></ROW><ROW><id>15974280</id><snippet>greenlet.so</snippet></ROW><ROW><id>15974362</id><snippet>from itertools import permutations
def test_add_dependency(self):
    """Tasks can be added with dependencies"""
    for p in permutations("AB"):
        self.done = []
        def test(id):
            self.done.append("Test " + id)
        s = Schedule(threads=1)
        tasks = {id: Task("Test " + id, partial(test, id)) for id in "AB"}
        s.add_task(tasks['A'])
        s.add_task(tasks['B'])
        s.add_dependency(tasks[p[0]], tasks[p[1]])
        s.run()
        self.assertEqual(self.done, ["Test " + p[1], "Test " + p[0]])
</snippet></ROW><ROW><id>15974362</id><snippet>Schedule</snippet></ROW><ROW><id>15974362</id><snippet>add_dependency</snippet></ROW><ROW><id>15974368</id><snippet>FILTER_SOURCE_FILES = YES
INPUT_FILTER = "python path/to/doxypy.py"
</snippet></ROW><ROW><id>15974488</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>15974488</id><snippet>list</snippet></ROW><ROW><id>15974488</id><snippet>from itertools import chain
from collections import defaultdict

di = defaultdict(list)

for key, value in chain(zip(listanum, lista), zip(listbnum, listb)):
    di[key].append(value)
</snippet></ROW><ROW><id>15974488</id><snippet>chain</snippet></ROW><ROW><id>15974488</id><snippet>+</snippet></ROW><ROW><id>15974488</id><snippet>pprint</snippet></ROW><ROW><id>15974488</id><snippet>dict</snippet></ROW><ROW><id>15974488</id><snippet>&gt;&gt;&gt; pprint(dict(di))
{1: [['l', 'k'], ['a', 'k']],
 2: [['e', '3']],
 3: [['c', 'k'], ['c', 'm']],
 4: [['x', 'i'], ['v', 'f']],
 5: [['d', 'f']]}
</snippet></ROW><ROW><id>15974488</id><snippet>dicta = dict(zip(listanum, lista))
dictb = dict(zip(listbnum, listb))

di = {k: [dicta.get(k, []), dictb.get(k, [])] for k in dicta.viewkeys() | dictb.viewkeys()}
</snippet></ROW><ROW><id>15974488</id><snippet>.keys()</snippet></ROW><ROW><id>15974488</id><snippet>.viewkeys()</snippet></ROW><ROW><id>15974488</id><snippet>&gt;&gt;&gt; pprint(di)
{1: [['l', 'k'], ['a', 'k']],
 2: [['e', '3'], []],
 3: [['c', 'k'], ['c', 'm']],
 4: [['x', 'i'], ['v', 'f']],
 5: [['d', 'f'], []]}
</snippet></ROW><ROW><id>15974488</id><snippet>i</snippet></ROW><ROW><id>15974488</id><snippet>lista</snippet></ROW><ROW><id>15974488</id><snippet>pos</snippet></ROW><ROW><id>15974488</id><snippet>  if i in listbnum:
    di[pos][1].append(listb[i])
</snippet></ROW><ROW><id>15974488</id><snippet>i = 4</snippet></ROW><ROW><id>15974488</id><snippet>i in listbnum</snippet></ROW><ROW><id>15974488</id><snippet>True</snippet></ROW><ROW><id>15974488</id><snippet>listb[4]</snippet></ROW><ROW><id>15974488</id><snippet>lista</snippet></ROW><ROW><id>15974488</id><snippet>listb</snippet></ROW><ROW><id>15974488</id><snippet>listb</snippet></ROW><ROW><id>15974488</id><snippet>listbnum</snippet></ROW><ROW><id>15974488</id><snippet>di = {}
for i, pos in enumerate(listanum):
    if pos not in di:
        di[pos] = [[],[]]
    di[pos][0][:] = lista[i]

for i, pos in enumerate(listbnum):
    di[pos][1][:] = listb[i]
</snippet></ROW><ROW><id>15974565</id><snippet>p=[(0, 0), (1, 0), (5, 1), (0, 1), (3, 0)]
Polygon(*p)
</snippet></ROW><ROW><id>15974565</id><snippet>Polygon((0, 0), (1, 0), (5, 1), (0, 1), (3, 0))</snippet></ROW><ROW><id>15974809</id><snippet>class pagesByUrl(dict):
    "a cross reference of pages by url rather than object name"
    def __init__(self):
        dict.__init__(self) #!
        pages={}
        for page in dir(xxxPages):
            try:
                pgAttr=getattr(xxxPages, page)
                pg=pgAttr('dummybrowser')
                pages[pg.url] = page
            except (KeyError, TypeError, AttributeError):
                pass

       self.update(pages)
       #Alternatively, forgo the previous `dict.__init__(self)` and the 
       #previous line and do:
       #dict.__init__(self,pages)
</snippet></ROW><ROW><id>15974809</id><snippet>self = pages</snippet></ROW><ROW><id>15974809</id><snippet>self</snippet></ROW><ROW><id>15974809</id><snippet>__init__</snippet></ROW><ROW><id>15974809</id><snippet>pages</snippet></ROW><ROW><id>15974809</id><snippet>self</snippet></ROW><ROW><id>15974809</id><snippet>pages</snippet></ROW><ROW><id>15974809</id><snippet>self</snippet></ROW><ROW><id>15974809</id><snippet>class pagesByUrl(dict):
    "a cross reference of pages by url rather than object name"
    def __init__(self):
        dict.__init__(self)
        for page in dir(xxxPages):
            try:
                pgAttr=getattr(xxxPages, page)
                pg=pgAttr('dummybrowser')
                self[pg.url] = page
            except (KeyError, TypeError, AttributeError):
                pass
</snippet></ROW><ROW><id>15974854</id><snippet>from Tkinter import *</snippet></ROW><ROW><id>15974854</id><snippet>import Tkinter</snippet></ROW><ROW><id>15974854</id><snippet>import Tkinter as tk</snippet></ROW><ROW><id>15974854</id><snippet>import foo</snippet></ROW><ROW><id>15974854</id><snippet>import foo as x</snippet></ROW><ROW><id>15974854</id><snippet>from foo import *</snippet></ROW><ROW><id>15974854</id><snippet>from foo import A, C</snippet></ROW><ROW><id>15974854</id><snippet>from foo import B as Bar</snippet></ROW><ROW><id>15974854</id><snippet>from module import object</snippet></ROW><ROW><id>15974854</id><snippet>from module import object as whatiwantittocall</snippet></ROW><ROW><id>15974854</id><snippet>import module</snippet></ROW><ROW><id>15974854</id><snippet>import module as shortname</snippet></ROW><ROW><id>15974854</id><snippet>from module import *</snippet></ROW><ROW><id>15974855</id><snippet>json.dumps()</snippet></ROW><ROW><id>15974855</id><snippet>default</snippet></ROW><ROW><id>15974855</id><snippet>def default(obj):
    if isinstance(obj, (Car, Person)):  # so if this is one of *your* objects
        return obj.__dict__             # turn it into a python dict

    raise TypeError                     # Sorry, don't know how to handle this
</snippet></ROW><ROW><id>15974855</id><snippet>json.dumps(p, default=default)
</snippet></ROW><ROW><id>15974855</id><snippet>&gt;&gt;&gt; json.dumps(p, default=default)
'{"cars": [{"make": "VW", "model": "Jetta"}, {"make": "BMW", "model": "X5"}], "name": "John Smith"}'
</snippet></ROW><ROW><id>15974874</id><snippet>eval</snippet></ROW><ROW><id>15974874</id><snippet>eval("2*x+5")</snippet></ROW><ROW><id>15974874</id><snippet>eval</snippet></ROW><ROW><id>15974915</id><snippet>with open(sys.argv[1]) as inputfile, open("result.txt","w") as outputfile:
    name = None
    investment_id = max_investment = 0
    for line in inputfile:
        if not line.strip(): continue  # skip empty lines

        if not line[:1].isdigit():  # name
            if name and investment_id: 
                # write previous name
                outputfile.write('{} {}\n'.format(name, investment_id))
            name = line.strip()
            investment_id = max_investment = 0

        else:
            id, investment = [int(i) for i in line.split()]
            if investment &gt; max_investment:
                max_investment = investment
                investment_id = id

    if name and investment_id: 
        # write last name
        outputfile.write('{} {}\n'.format(name, investment_id))
</snippet></ROW><ROW><id>15974915</id><snippet>Thomas Hales 45
Peter Lebones 10
John White 11
</snippet></ROW><ROW><id>15974956</id><snippet>del a_set</snippet></ROW><ROW><id>15974956</id><snippet>__del__</snippet></ROW><ROW><id>15974956</id><snippet>__dealloc__</snippet></ROW><ROW><id>15974956</id><snippet>close</snippet></ROW><ROW><id>15975041</id><snippet>Request</snippet></ROW><ROW><id>15975041</id><snippet>    http://www.example.com/myapplication/page.html?x=y
</snippet></ROW><ROW><id>15975041</id><snippet>    path             /page.html
    script_root      /myapplication
    base_url         http://www.example.com/myapplication/page.html
    url              http://www.example.com/myapplication/page.html?x=y
    url_root         http://www.example.com/myapplication/
</snippet></ROW><ROW><id>15975301</id><snippet>characterize</snippet></ROW><ROW><id>15975301</id><snippet>dict_compare</snippet></ROW><ROW><id>15975301</id><snippet>dictobject.c</snippet></ROW><ROW><id>15975301</id><snippet>&gt;&gt;&gt; sorted([{1:2}, {}])
[{}, {1: 2}]
&gt;&gt;&gt; sorted([{1:2}, {0:1}])
[{0: 1}, {1: 2}]
&gt;&gt;&gt; sorted([{1:2}, {1:1}])
[{1: 1}, {1: 2}]
</snippet></ROW><ROW><id>15975301</id><snippet>&gt;&gt;&gt; sorted([{}, {}])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: dict() &lt; dict()
</snippet></ROW><ROW><id>15975547</id><snippet>datetime.py</snippet></ROW><ROW><id>15975547</id><snippet>/Users/ripple/Dropbox/Python/datetime.py</snippet></ROW><ROW><id>15975547</id><snippet>/Users/ripple/Dropbox/Python/datetime.pyc</snippet></ROW><ROW><id>15975843</id><snippet>    test_name = 'test_translation_test_phrases_for_%s_pages' % language
    setattr(LanguageSpecificTest, test_name, t)
</snippet></ROW><ROW><id>15975843</id><snippet>language</snippet></ROW><ROW><id>15975843</id><snippet>test_name</snippet></ROW><ROW><id>15975843</id><snippet>style</snippet></ROW><ROW><id>15975864</id><snippet>assertEqual</snippet></ROW><ROW><id>15975864</id><snippet>super(MyTestCase, self).assertEqual(first, second, msg)
</snippet></ROW><ROW><id>15976131</id><snippet>numpy.lexsort</snippet></ROW><ROW><id>15976131</id><snippet>In [1]: import numpy as np
In [2]: a = np.array([(4,0), (1,9), (1,0), (4,9)],
                     dtype=[('x',int),('y',float)])

In [3]: a
Out[3]: 
array([(4, 0.0), (1, 9.0), (1, 0.0), (4, 9.0)], 
      dtype=[('x', '&lt;i8'), ('y', '&lt;f8')])

In [4]: a['x']
Out[4]: array([4, 1, 1, 4])

In [5]: a['y']
Out[5]: array([ 0.,  9.,  0.,  9.])
</snippet></ROW><ROW><id>15976131</id><snippet>lexsort</snippet></ROW><ROW><id>15976131</id><snippet>np.sort(..., order=...)</snippet></ROW><ROW><id>15976131</id><snippet>'x'</snippet></ROW><ROW><id>15976131</id><snippet>'y'</snippet></ROW><ROW><id>15976131</id><snippet>In [6]: a[np.lexsort((a['y'], -a['x']))]
Out[6]: 
array([(4, 0.0), (4, 9.0), (1, 0.0), (1, 9.0)], 
      dtype=[('x', '&lt;i8'), ('y', '&lt;f8')])
</snippet></ROW><ROW><id>15976131</id><snippet>a['x'][::-1]</snippet></ROW><ROW><id>15976131</id><snippet>-a['x']</snippet></ROW><ROW><id>15976132</id><snippet>t = (s,) + tuple(l)
</snippet></ROW><ROW><id>15976289</id><snippet>assert len(raw) &gt;= 4
assert raw.startswith('\x89PNG')
</snippet></ROW><ROW><id>15976289</id><snippet>raw = p.stdout.read()
</snippet></ROW><ROW><id>15976289</id><snippet>from subprocess import check_output
from cStringIO import StringIO
from PIL import Image

raw = check_output(cmd)
buff = StringIO(raw)
im = Image.open(buff)
im.show()
</snippet></ROW><ROW><id>15976289</id><snippet>qrcode.exe</snippet></ROW><ROW><id>15976539</id><snippet>csv</snippet></ROW><ROW><id>15976539</id><snippet>data.txt</snippet></ROW><ROW><id>15976539</id><snippet>import csv

with open('data.txt', 'rb') as match_data:
    reader = csv.reader(match_data)
    match_data = {tuple(row[:2]): row for row in reader}

with open('m_list.txt', 'rb') as match_list, open('done.txt', 'wb') as outfile:
    reader = csv.reader(match_list)
    writer = csv.writer(outfile)

    for row in reader:
        row = tuple(row)
        if row in match_data:
            writer.writerow(match_data[row])
</snippet></ROW><ROW><id>15976744</id><snippet>import os
os.walk('C:\\')
</snippet></ROW><ROW><id>15976744</id><snippet>import os
for root, folders, files in os.walk('C:\\'):
    print 'In ' + root + ' There are ' + str(len(folders)) + ' folders and ' + str(len(files)) + '!'
</snippet></ROW><ROW><id>15976744</id><snippet>import os, time
from os.path import abspath
for root, folders, files in os.walk('C:\\'):
    for f in files:
        (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(abspath(root + '/' + f)
        print f + " was last modified: %s" % time.ctime(mtime)
</snippet></ROW><ROW><id>15976770</id><snippet>a(t) = t
b(t) = t**2
</snippet></ROW><ROW><id>15976770</id><snippet>c(t) = t**4 / 12
</snippet></ROW><ROW><id>15976770</id><snippet>&gt;&gt;&gt; delta = 0.001
&gt;&gt;&gt; t = np.arange(1000) * delta
&gt;&gt;&gt; a = t
&gt;&gt;&gt; b = t**2
&gt;&gt;&gt; c = np.convolve(a, b) * delta
&gt;&gt;&gt; d = t**4 / 12
&gt;&gt;&gt; plt.plot(np.arange(len(c)) * delta, c)
[&lt;matplotlib.lines.Line2D object at 0x00000000025C37B8&gt;]
&gt;&gt;&gt; plt.plot(t[::50], d[::50], 'o')
[&lt;matplotlib.lines.Line2D object at 0x000000000637AB38&gt;]
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>15976770</id><snippet>a</snippet></ROW><ROW><id>15976770</id><snippet>b</snippet></ROW><ROW><id>15976770</id><snippet>n</snippet></ROW><ROW><id>15976770</id><snippet>n</snippet></ROW><ROW><id>15976770</id><snippet>c</snippet></ROW><ROW><id>15976906</id><snippet>datetime.strftime</snippet></ROW><ROW><id>15976906</id><snippet>unicode</snippet></ROW><ROW><id>15976906</id><snippet>unicode</snippet></ROW><ROW><id>15976906</id><snippet>unicode</snippet></ROW><ROW><id>15976906</id><snippet>str</snippet></ROW><ROW><id>15976906</id><snippet># -*- coding: utf-8 -*-
from jinja2 import Environment, DictLoader
import datetime

def strftime(date, fmt):
    return date.strftime(fmt.encode('utf-8')).decode('utf-8')

env = Environment(loader=DictLoader({'test': u'''Hello {{ d|strftime('%Y 年 %m 月') }}!'''}))
env.filters['strftime'] = strftime
t = env.get_template('test')
print t.render(d=datetime.datetime.utcnow())
</snippet></ROW><ROW><id>15976920</id><snippet>**</snippet></ROW><ROW><id>15976920</id><snippet>math.pow()</snippet></ROW><ROW><id>15976920</id><snippet>float</snippet></ROW><ROW><id>15976920</id><snippet>**</snippet></ROW><ROW><id>15976920</id><snippet>pow()</snippet></ROW><ROW><id>15976952</id><snippet>nonzero</snippet></ROW><ROW><id>15976952</id><snippet>argwhere</snippet></ROW><ROW><id>15976952</id><snippet>True</snippet></ROW><ROW><id>15976952</id><snippet>where</snippet></ROW><ROW><id>15976952</id><snippet>nonzero</snippet></ROW><ROW><id>15976952</id><snippet>np.where(mask,a,b)
</snippet></ROW><ROW><id>15976952</id><snippet>a[i] if mask[i] else b[i]
</snippet></ROW><ROW><id>15976952</id><snippet>a</snippet></ROW><ROW><id>15976952</id><snippet>b</snippet></ROW><ROW><id>15976952</id><snippet>nonzero</snippet></ROW><ROW><id>15976952</id><snippet>argnonzero</snippet></ROW><ROW><id>15976952</id><snippet>nonzero</snippet></ROW><ROW><id>15976952</id><snippet>mask = a == 0 #entire array of bools
mask = np.nonzero(a)
</snippet></ROW><ROW><id>15976952</id><snippet>argnonzero</snippet></ROW><ROW><id>15977227</id><snippet>os.walk</snippet></ROW><ROW><id>15977227</id><snippet>for (cur, dirs, files) in os.walk('.'):
    pass
</snippet></ROW><ROW><id>15977227</id><snippet>for (cur, dirs, files) in os.walk('.'):
    depth = len(cur.split('/'))
    print "--" * depth, cur
    for fname in files:
        print "--" * (depth + 1), fname
</snippet></ROW><ROW><id>15977303</id><snippet>.py</snippet></ROW><ROW><id>15977303</id><snippet>.class</snippet></ROW><ROW><id>15977402</id><snippet>samples/python2</snippet></ROW><ROW><id>15977596</id><snippet>for row in table.findAll('tr')[1:]:
</snippet></ROW><ROW><id>15977596</id><snippet>for row in table.findAll('tr')[2:]:
</snippet></ROW><ROW><id>15977850</id><snippet>.__get__</snippet></ROW><ROW><id>15977850</id><snippet>&gt;&gt;&gt; What.__dict__['meth']
&lt;function meth at 0x10a6f9c80&gt;
&gt;&gt;&gt; What.__dict__['meth'].__get__(None, What)
&lt;unbound method What.meth&gt;
&gt;&gt;&gt; What.__dict__['meth'].__get__(What(), What)
&lt;bound method What.meth of &lt;__main__.What object at 0x10a6f7b10&gt;&gt;
</snippet></ROW><ROW><id>15977850</id><snippet>==</snippet></ROW><ROW><id>15977850</id><snippet>.im_self</snippet></ROW><ROW><id>15977850</id><snippet>.im_func</snippet></ROW><ROW><id>15977850</id><snippet>im_func</snippet></ROW><ROW><id>15977850</id><snippet>&gt;&gt;&gt; What.meth == What.meth     # unbound methods (or functions in Python 3)
True
&gt;&gt;&gt; What().meth == What.meth   # unbound method and bound method
False
&gt;&gt;&gt; What().meth == What().meth # bound methods with *different* instances
False
&gt;&gt;&gt; What().meth.im_func == What().meth.im_func  # functions
True
</snippet></ROW><ROW><id>15977923</id><snippet>In [4]: data = np.zeros(250,dtype='float32, (250000,2)float32')
</snippet></ROW><ROW><id>15977923</id><snippet>In [5]: data2 = data.view('float32')
</snippet></ROW><ROW><id>15977923</id><snippet>In [7]: data3 = data2.view('float32, (250000,2)float32')
</snippet></ROW><ROW><id>15977923</id><snippet>import numpy as np
import multiprocessing as mp
import contextlib
import ctypes
import struct
import base64


def decode(arg):
    chunk, counter = arg
    print len(chunk), counter
    for x in chunk:
        peak_counter = 0
        data_buff = base64.b64decode(x)
        buff_size = len(data_buff) / 4
        unpack_format = "&gt;%dL" % buff_size
        index = 0
        for y in struct.unpack(unpack_format, data_buff):
            buff1 = struct.pack("I", y)
            buff2 = struct.unpack("f", buff1)[0]
            with shared_arr.get_lock():
                data = tonumpyarray(shared_arr).view(
                    [('f0', '&lt;f4'), ('f1', '&lt;f4', (250000, 2))])
                if (index % 2 == 0):
                    data[counter][1][peak_counter][0] = float(buff2)
                else:
                    data[counter][1][peak_counter][1] = float(buff2)
                    peak_counter += 1
            index += 1
        counter += 1


def pool_init(shared_arr_):
    global shared_arr
    shared_arr = shared_arr_  # must be inherited, not passed as an argument


def tonumpyarray(mp_arr):
    return np.frombuffer(mp_arr.get_obj())


def numpy_array(shared_arr, peaks):
    """Fills the NumPy array 'data' with m/z-intensity values acquired
    from b64 decoding and unpacking the binary string read from the
    mzXML file, which is stored in the list 'peaks'.

    The m/z values are assumed to be ordered without validating this
    assumption.

    Note: This function uses multi-processing
    """
    processors = mp.cpu_count()
    with contextlib.closing(mp.Pool(processes=processors,
                                    initializer=pool_init,
                                    initargs=(shared_arr, ))) as pool:
        chunk_size = int(len(peaks) / processors)
        map_parameters = []
        for i in range(processors):
            counter = i * chunk_size
            # WARNING: I removed -1 from (i + 1)*chunk_size, since the right
            # index is non-inclusive. 
            chunk = peaks[i*chunk_size : (i + 1)*chunk_size]
            map_parameters.append((chunk, counter))
        pool.map(decode, map_parameters)

if __name__ == '__main__':
    shared_arr = mp.Array(ctypes.c_float, (250000 * 2 * 250) + 250)
    peaks = ...
    numpy_array(shared_arr, peaks)
</snippet></ROW><ROW><id>15977923</id><snippet>if (index % 2 == 0):
    data[counter][1][peak_counter][0] = float(buff2)
else:
    data[counter][1][peak_counter][1] = float(buff2)
</snippet></ROW><ROW><id>15977923</id><snippet>with shared_arr.get_lock():
</snippet></ROW><ROW><id>15977980</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup(html_doc)
soup.find({"class":"fix"})
</snippet></ROW><ROW><id>15978469</id><snippet>for</snippet></ROW><ROW><id>15978469</id><snippet>with</snippet></ROW><ROW><id>15978469</id><snippet>with open(filename + "record.txt", "wb+") as f:</snippet></ROW><ROW><id>15978469</id><snippet>fp</snippet></ROW><ROW><id>15978469</id><snippet>fp.write()</snippet></ROW><ROW><id>15978469</id><snippet>import sys, bz2, string, os
#instead of hardcoding filename, get it from arguments
#filename = os.getcwd()
filename = raw_input("Enter the path of bz2 document e.g. files/access_log-20130301.bz2: ")
print "Using file : " + filename
with open(filename+"record.txt", "wb+") as fp:
    source_file = bz2.BZ2File(filename, "r") 
    for line in source_file:
        #Extract the date and put into a variable 
        logdate = string.split(line)[3][1:12]
        #Extract movie name and put into variable movie
        movie = string.split(line)[6]
        #extract who read the movie username = 
        usernames = string.split(line)[2]
        #Only process the movie line if we have /media/movie in it. 
        if movie.find('media/movies') &gt; 0:
            #Prints all things prosscesed
            print "User:" + usernames + " On:" +  logdate + " Was watching:"+ movie
            #p=open(filename+"record.txt", "w")
            fp.write("User: " + usernames + " On: " +  logdate + " Was watching: "+ movie+" File from:"+filename+"\n")

# The with block has ended at this point, so the file will already be closed here.

sys.exit()
</snippet></ROW><ROW><id>15978952</id><snippet>import memcache

def fib(n):
    v = mc.get(str(n))
    if not v is None:
        print "Hit on cache: %s = %s" %(n, v)
        return v

    print "Miss on cache"
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        v = fib(n-1) + fib(n-2)
        mc.set(str(n), v)
        return v

mc = memcache.Client(['127.0.0.1:11211'], debug=0)
x=input('which fibonnaci do you want?')
print fib(x)
</snippet></ROW><ROW><id>15978993</id><snippet>def remove_empties(list1):
    """removes any empty lists from our list"""
    list2 = [x for x in list1 if x]
    return list2

def merge_to_couples(new_list):
    answer = []
    new_list = remove_empties(new_list)

    while True:
        answer.append([new_list[0][0], new_list[1][0]])
        del new_list[0][0], new_list[1][0]

        new_list = remove_empties(new_list) #remove empty lists every iteration

        if len(new_list) == 0: #if length is 0, our work is done
            return answer 
        if len(new_list) == 1: #if length is 1, we need to append remaining numbers as lists with length 1
            for i in new_list[0]:
                answer.append([i])
            return answer


A_list = [1,2,3]
B_list = [4]
C_list = [5,6,7,8]
D_list = [9,10]

new_list = [A_list, B_list, C_list, D_list]

print merge_to_couples(new_list)
</snippet></ROW><ROW><id>15978995</id><snippet>__tablename__</snippet></ROW><ROW><id>15979691</id><snippet># Seconds before cached records expire
cache_expire = 500

# Create hash of parameters, to use as a lookup for job.id (cache)
hash = hashlib.sha1()
for param in search:
    hash.update(str(search[param]))
url_hash = 'url:{0}'.format(hash.hexdigest())

# Check if we have a cached result, need old job_key
job_key = r.hget(url_hash, 'job_key')
if job_key:
    job_hash = 'rq:job:{0}'.format(job_key)
    ttl = r.ttl(job_hash)
    if ttl:
        # Add 30 more seconds of buffer room
        # to ensure job.result doesn't get deleted pre-maturely
        r.expire(job_hash, ttl+30)
        return jsonify(search_id=job_key)
    else:
        # Job result has already been deleted, clear lookup hash
        r.delete(url_hash)

# Create new job
job = q.enqueue_call(func=worker.search, args=(search,), result_ttl=cache_expire)
# Create job.id lookup using hash as key (for cache)
if r.hsetnx(url_hash, 'job_key', job.id):
    r.expire(url_hash, cache_expire)

return jsonify(search_id=job.id)
</snippet></ROW><ROW><id>15979755</id><snippet>from threading import Thread

def send_async_email(msg):
    mail.send(msg)

def send_email(subject, sender, recipients, text_body, html_body):
    msg = Message(subject, sender = sender, recipients = recipients)
    msg.body = text_body
    msg.html = html_body
    thr = Thread(target = send_async_email, args = [msg])
    thr.start()
</snippet></ROW><ROW><id>15979957</id><snippet>def iroot(k, n):
    hi = 1
    while pow(hi, k) &lt; n:
        hi *= 2
    lo = hi / 2
    while hi - lo &gt; 1:
        mid = (lo + hi) // 2
        midToK = pow(mid, k)
        if midToK &lt; n:
            lo = mid
        elif n &lt; midToK:
            hi = mid
        else:
            return mid
    if pow(hi, k) == n:
        return hi
    else:
        return lo
</snippet></ROW><ROW><id>15979957</id><snippet>def iroot(k, n):
    u, s = n, n+1
    while u &lt; s:
        s = u
        t = (k-1) * s + n // pow(s, k-1)
        u = t // k
    return s
</snippet></ROW><ROW><id>15980009</id><snippet>/</snippet></ROW><ROW><id>15980009</id><snippet>\</snippet></ROW><ROW><id>15980009</id><snippet>left = (self.nzw[:,w] + self.beta) / (self.nz + self.beta * vocab_size)
</snippet></ROW><ROW><id>15980596</id><snippet>file_list.extend(eachLine.split())
</snippet></ROW><ROW><id>15980779</id><snippet>&gt;&gt;&gt; L = ['John', 'House', '23 4500', 'grass', '542 3256']
&gt;&gt;&gt; [y for x in L for y in x.split()]
['John', 'House', '23', '4500', 'grass', '542', '3256']
</snippet></ROW><ROW><id>15980779</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(chain.from_iterable(map(str.split, L)))
['John', 'House', '23', '4500', 'grass', '542', '3256']
</snippet></ROW><ROW><id>15980889</id><snippet>'\x61'</snippet></ROW><ROW><id>15980889</id><snippet>'a'</snippet></ROW><ROW><id>15980889</id><snippet>x</snippet></ROW><ROW><id>15980889</id><snippet>6</snippet></ROW><ROW><id>15980889</id><snippet>1</snippet></ROW><ROW><id>15980889</id><snippet>&gt;&gt;&gt; '\x61' == 'a'  # two notations for the same value
True
&gt;&gt;&gt; len('\x61')    # it's just 1 character
1
&gt;&gt;&gt; '\\x61'        # escape the escape
'\\x61'
&gt;&gt;&gt; r'\x61'        # or use a raw literal instead
'\\x61'
&gt;&gt;&gt; len('\\x61')   # which produces 4 characters
4
</snippet></ROW><ROW><id>15980980</id><snippet>math.pi</snippet></ROW><ROW><id>15980980</id><snippet>math.sin(math.pi)</snippet></ROW><ROW><id>15980980</id><snippet>&gt;&gt;&gt; from sympy import *
&gt;&gt;&gt; sin(pi)
0
&gt;&gt;&gt; pi
pi
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15980991</id><snippet>def foo():
    print('foo')
foo = onEvent(eventSpecificArgument)(foo)
</snippet></ROW><ROW><id>15980991</id><snippet>onEvent()</snippet></ROW><ROW><id>15980991</id><snippet>foo</snippet></ROW><ROW><id>15980991</id><snippet>onEvent</snippet></ROW><ROW><id>15980991</id><snippet>registry = {}

def onEvent(eventname):
    def eventdecorator(func):
        registry.setdefault(eventname, []).append(func)
        return func
    return eventdecorator
</snippet></ROW><ROW><id>15980991</id><snippet>func</snippet></ROW><ROW><id>15980991</id><snippet>for func in registry.get(eventname, ()):
    func()
</snippet></ROW><ROW><id>15981007</id><snippet>else</snippet></ROW><ROW><id>15981007</id><snippet>for</snippet></ROW><ROW><id>15981007</id><snippet>print "Hello student need help multiplying by any mutiplicaton"
student = raw_input("If so then tell me which ones? =&gt; ") # no need for lower()
for i in range(0, 11):
    if student == '0':
        i_num = 0 * i
        print "0 times %d equals %d" % (i,i_num)
    elif student == '1':
        i_num = 1 * 1
        print "1 times %d equals %d" % (i,i_num)
    else:
        print "Try this program when you can't figure it out your multiplications."
</snippet></ROW><ROW><id>15981007</id><snippet>print "Hello student need help multiplying by any mutiplicaton"
num = int(raw_input("If so then tell me which ones? =&gt; "))
for i in range(0, 11):
    print "%d times %d equals %d" % (num, i, i * num)
</snippet></ROW><ROW><id>15981034</id><snippet>for key, values in sequencelist.items():
    with open(key, 'w') as out:
        for value in values:
            out.write('\n'.join(value.split()))
</snippet></ROW><ROW><id>15981243</id><snippet>try:
    # Some code that might fail
    b = float(a)
    # Some condition I want to check
    if b &lt; 0:
        b = 999.
except ValueError:
    # This code should be run if the code fails
    # or the condition is not met
    b = 999.
</snippet></ROW><ROW><id>15981243</id><snippet>b = 999.
if a &gt;= 0:
    try:
        b = float(a)
    except ValueError:
        pass
</snippet></ROW><ROW><id>15981243</id><snippet>SpecialError</snippet></ROW><ROW><id>15981243</id><snippet>ValueError</snippet></ROW><ROW><id>15981243</id><snippet>try:
    b = float(a)
    if b &lt; 0:
        raise ValueError
except ValueError:
    b = 999.
</snippet></ROW><ROW><id>15981243</id><snippet>raise</snippet></ROW><ROW><id>15981342</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtGui, QtCore

class MyWindow(QtGui.QTextEdit):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

        self.setPlainText("Hello!")

        cursor = self.textCursor()
        cursor.movePosition(QtGui.QTextCursor.End, QtGui.QTextCursor.MoveAnchor)

        self.setTextCursor(cursor)

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>15981366</id><snippet>class SpiderFailSignal(object):

    def process_exception(self, request, exception, spider):
        response = Response(request.url, status=666, body='error')
        spider.queue.put(response)
        return response
</snippet></ROW><ROW><id>15981366</id><snippet>settings.overrides['DOWNLOADER_MIDDLEWARES'] = {'seerspider.SpiderFailSignal': 901}
</snippet></ROW><ROW><id>15981476</id><snippet>lxml</snippet></ROW><ROW><id>15981476</id><snippet>libxml2</snippet></ROW><ROW><id>15981476</id><snippet>html.parser</snippet></ROW><ROW><id>15981476</id><snippet>soup4 = BeautifulSoup('&lt;div&gt;&lt;b&gt;soup 4&lt;/b&gt;&lt;/div&gt;')
if soup4.body:
    return soup4.body.next
elif soup4.html:
    return soup4.html.next
else:
    return soup4
</snippet></ROW><ROW><id>15981476</id><snippet>div</snippet></ROW><ROW><id>15981476</id><snippet>soup4 = BeautifulSoup('&lt;div&gt;&lt;b&gt;soup 4&lt;/b&gt;&lt;/div&gt;')
return soup4.div
</snippet></ROW><ROW><id>15981476</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>15981519</id><snippet>&gt;&gt;&gt; sampleOne= {'a':4, 'b':7, 'c':3, 'd':5}
&gt;&gt;&gt; sampleTwo= {'a':6, 'b':3, 'c':7, 'd':2}
&gt;&gt;&gt; for k in sampleOne.viewkeys() | sampleTwo.viewkeys(): # On Py 3 use .keys() instead
        print k, sampleOne.get(k, 0), sampleTwo.get(k, 0)


a 4 6
c 3 7
b 7 3
d 5 2
</snippet></ROW><ROW><id>15981519</id><snippet>for k in sampleOne.viewkeys() | sampleTwo.viewkeys()
</snippet></ROW><ROW><id>15981519</id><snippet>for k in sorted(sampleOne.viewkeys() | sampleTwo.viewkeys())
</snippet></ROW><ROW><id>15981646</id><snippet>for count, (key, values) in enumerate(sequencelist.items()):
    with open('OTU(%d)_%s.txt' % (count+1, str(key)), 'w') as out:
        for value in values:
            out.write('\n'.join(value.split()) + '\n')
</snippet></ROW><ROW><id>15981646</id><snippet>len(sequencelist)</snippet></ROW><ROW><id>15981646</id><snippet>j</snippet></ROW><ROW><id>15981646</id><snippet>%d</snippet></ROW><ROW><id>15981646</id><snippet>%s</snippet></ROW><ROW><id>15981646</id><snippet>str()</snippet></ROW><ROW><id>15981646</id><snippet>&lt;class __main__.Test at 0x00000....&gt;</snippet></ROW><ROW><id>15981677</id><snippet>monkeyrunner</snippet></ROW><ROW><id>15981677</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>15981677</id><snippet>/usr/bin/env python test.py</snippet></ROW><ROW><id>15981677</id><snippet>./test.py</snippet></ROW><ROW><id>15981677</id><snippet>chmod +x</snippet></ROW><ROW><id>15981677</id><snippet>monkeyrunner</snippet></ROW><ROW><id>15981677</id><snippet>monkeyrunner</snippet></ROW><ROW><id>15981677</id><snippet>monkeyrunner</snippet></ROW><ROW><id>15981677</id><snippet>PyMySQL</snippet></ROW><ROW><id>15981677</id><snippet>JDBC</snippet></ROW><ROW><id>15981677</id><snippet>zxJDBC</snippet></ROW><ROW><id>15981677</id><snippet>zxJDBC</snippet></ROW><ROW><id>15981701</id><snippet>or</snippet></ROW><ROW><id>15981701</id><snippet>if</snippet></ROW><ROW><id>15981701</id><snippet>mv == 'N'</snippet></ROW><ROW><id>15981701</id><snippet>False</snippet></ROW><ROW><id>15981701</id><snippet>'n'</snippet></ROW><ROW><id>15981701</id><snippet>True</snippet></ROW><ROW><id>15981701</id><snippet>mv == 'N' or 'n'</snippet></ROW><ROW><id>15981701</id><snippet>True</snippet></ROW><ROW><id>15981701</id><snippet>if mv in ['n', 'N']:
    Me.Position.Y += 10
</snippet></ROW><ROW><id>15981701</id><snippet>if mv in 'nN':
    Me.Position.Y += 10
</snippet></ROW><ROW><id>15981731</id><snippet>QNetworkAcessManager</snippet></ROW><ROW><id>15981731</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtCore, QtNetwork

if __name__ == '__main__':
    import sys

    print "Starting request...",

    app = QtCore.QCoreApplication(sys.argv)
    url = QtCore.QUrl("http://www.example.com/")

    request = QtNetwork.QNetworkRequest()
    request.setUrl(url)
    request.setRawHeader("User-Agent", "MyAppName/1.0 (Nokia; Qt)")

    manager = QtNetwork.QNetworkAccessManager()
    manager.finished.connect(app.quit)
    manager.get(request)

    print "done."

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>15982108</id><snippet>123</snippet></ROW><ROW><id>15982108</id><snippet>"abc"</snippet></ROW><ROW><id>15982108</id><snippet>123 + 456</snippet></ROW><ROW><id>15982108</id><snippet>123</snippet></ROW><ROW><id>15982108</id><snippet>123</snippet></ROW><ROW><id>15982108</id><snippet>&gt;&gt;&gt; my_list = list()
&gt;&gt;&gt; my_list.append(123)
&gt;&gt;&gt; my_list
[123]
</snippet></ROW><ROW><id>15982108</id><snippet>&gt;&gt;&gt; my_list[0] - 120
3
</snippet></ROW><ROW><id>15982108</id><snippet>&gt;&gt;&gt; my_other_list = [my_list, 2]
</snippet></ROW><ROW><id>15982108</id><snippet>&gt;&gt;&gt; a = 3
&gt;&gt;&gt; b = 3
&gt;&gt;&gt; a is b
True
&gt;&gt;&gt; id(a) == id(b)
True
</snippet></ROW><ROW><id>15982108</id><snippet>b = 3</snippet></ROW><ROW><id>15982108</id><snippet>a = 3</snippet></ROW><ROW><id>15982108</id><snippet>3</snippet></ROW><ROW><id>15982108</id><snippet>3</snippet></ROW><ROW><id>15982108</id><snippet>3</snippet></ROW><ROW><id>15982108</id><snippet>is</snippet></ROW><ROW><id>15982108</id><snippet>id</snippet></ROW><ROW><id>15982203</id><snippet>Pool</snippet></ROW><ROW><id>15982203</id><snippet>work</snippet></ROW><ROW><id>15982203</id><snippet>1.txt</snippet></ROW><ROW><id>15982203</id><snippet>20.txt</snippet></ROW><ROW><id>15982203</id><snippet>from multiprocessing import Pool

pool = Pool(processes=4)
result = pool.map_async(work, ("%d.txt"%n for n in xrange(1,21)))
print sum(result.get())
</snippet></ROW><ROW><id>15982218</id><snippet>fun = 'test_fun'                                                     
arg = 'hi'                                                                          
ulen = len(fun)                                                                    
arglen = len(arg)                                                                  
buflen = (2 + ulen) + (2 + arglen)                                                 
buf = pack('!B', 173)                                                              
buf += pack('&lt;H', buflen)                                                          
buf += pack('!B', 0)                                                               
c.send(buf)                                     

buf = pack('!B', ulen &amp; 0xff)                                                      
buf += pack('!B', (ulen&gt;&gt;8) &amp; 0xff)                                                
buf += fun                                                                         
buf += pack('!B', arglen &amp; 0xff)                                                   
buf += pack('!B', (arglen&gt;&gt;8) &amp; 0xff)                                              
buf += arg                                                                         
sent = c.send(buf)                                                                 
print "sent", sent
</snippet></ROW><ROW><id>15982404</id><snippet>numpy.frombuffer</snippet></ROW><ROW><id>15982404</id><snippet>fromstring</snippet></ROW><ROW><id>15982404</id><snippet>frombuffer</snippet></ROW><ROW><id>15982404</id><snippet>f = gzip.GzipFile(filename)
f.read(10000) # fixed length ascii header
event_dtype = np.dtype([
        ('Id', '&gt;u4'),                # simplified
        ('UnixTimeUTC', '&gt;u4', 2), 
        ('Data', '&gt;i2', (1600,1024) ) 
        ])
s = f.read( event_dtype.itemsize )
event = np.frombuffer(s, dtype=event_dtype, count=1)
</snippet></ROW><ROW><id>15982404</id><snippet>import numpy as np

x = "hello"
y = np.frombuffer(x, dtype=np.uint8)

# Make "y" writeable...
y.flags.writeable = True

# Prove that we're using the same memory
y[0] = 121
print x # &lt;-- Notice that we're outputting changing y and printing x...
</snippet></ROW><ROW><id>15982404</id><snippet>yello</snippet></ROW><ROW><id>15982404</id><snippet>hello</snippet></ROW><ROW><id>15982419</id><snippet>add_url_rule</snippet></ROW><ROW><id>15982419</id><snippet>__name__</snippet></ROW><ROW><id>15982419</id><snippet>add_url_rule</snippet></ROW><ROW><id>15982419</id><snippet>app.add_url_rule('/posts1_add', methods['POST'], 'posts1_add', posts.post1.add)
</snippet></ROW><ROW><id>15982559</id><snippet>params</snippet></ROW><ROW><id>15982559</id><snippet>r = requests.get(uri, data=es_query)
</snippet></ROW><ROW><id>15982776</id><snippet>temp = seq1.lower()
seq1 = temp

temp = seq2.lower()
</snippet></ROW><ROW><id>15982776</id><snippet>seq1 = seq1.lower()</snippet></ROW><ROW><id>15982776</id><snippet>temp = seq1.lower()
</snippet></ROW><ROW><id>15982776</id><snippet>str</snippet></ROW><ROW><id>15982776</id><snippet>seq1</snippet></ROW><ROW><id>15982776</id><snippet>lower()</snippet></ROW><ROW><id>15982776</id><snippet>temp</snippet></ROW><ROW><id>15982776</id><snippet>seq1 = temp
</snippet></ROW><ROW><id>15982776</id><snippet>seq1</snippet></ROW><ROW><id>15982776</id><snippet>str</snippet></ROW><ROW><id>15982776</id><snippet>temp</snippet></ROW><ROW><id>15982776</id><snippet>temp = seq2.lower()
</snippet></ROW><ROW><id>15982776</id><snippet>temp</snippet></ROW><ROW><id>15982776</id><snippet>temp</snippet></ROW><ROW><id>15982776</id><snippet>str</snippet></ROW><ROW><id>15982776</id><snippet>seq1</snippet></ROW><ROW><id>15982776</id><snippet>while</snippet></ROW><ROW><id>15982776</id><snippet>seq1</snippet></ROW><ROW><id>15982776</id><snippet>seq2</snippet></ROW><ROW><id>15982776</id><snippet>char*</snippet></ROW><ROW><id>15982776</id><snippet>seq1</snippet></ROW><ROW><id>15982776</id><snippet>str</snippet></ROW><ROW><id>15982776</id><snippet>str</snippet></ROW><ROW><id>15982776</id><snippet>cpdef unsigned int func(char *sequence1, char *sequence2, bool case_sensitive=True):
    seq1, seq2 = str(sequence1), str(sequence2)
</snippet></ROW><ROW><id>15982776</id><snippet>str</snippet></ROW><ROW><id>15982776</id><snippet>cdef</snippet></ROW><ROW><id>15982846</id><snippet>kwargs</snippet></ROW><ROW><id>15982846</id><snippet>x</snippet></ROW><ROW><id>15982846</id><snippet>x</snippet></ROW><ROW><id>15982846</id><snippet>x+1</snippet></ROW><ROW><id>15982846</id><snippet>nonlocal</snippet></ROW><ROW><id>15982846</id><snippet>__closure__</snippet></ROW><ROW><id>15982967</id><snippet>LOCAL_INSTALL_DIR</snippet></ROW><ROW><id>15982967</id><snippet>stat()</snippet></ROW><ROW><id>15982982</id><snippet>class LongRunningClass(models.Model):
    is_paused = models.BooleanField(default=False)
    processed_files = models.IntegerField(default=0)
    total_files = models.IntegerField(default=100)

    def get_is_paused(self):
        db_obj = LongRunningClass.objects.get(pk=self.pk)
        return db_obj.is_paused

    def long_task(self):
        remaining_files = self.total_files - self.processed_files
        for i in xrange(remaining_files):
            if not self.get_is_paused:
                self.processed_files += 1
                time.sleep(1)

    # Task complete, let's save.
    self.save() 
</snippet></ROW><ROW><id>15982982</id><snippet>long_task</snippet></ROW><ROW><id>15982982</id><snippet>LongRunningClass</snippet></ROW><ROW><id>15982982</id><snippet>@celery.task(run_every=2minutes)  # adding XX files for processing every XX minutes
def scheduled_task(lr_pk):
    lr = LongRunningClass.objects.get(pk=lr_pk)
    if not lr.is paused:
        remaining_files = self.total_files - self.processed_files
        for i in xrange(lr.files_per_iteration):
            process_file.delay(lr.pk,i)

@celery.task(rate=1/m,queue='process_file')  # processing each file
def process_file(lr_pk,i):
    #  do somthing with i
    lr = LongRunningClass.objects.get(pk=lr_pk)
    lr.processed_files += 1
    lr.save() 
</snippet></ROW><ROW><id>15982982</id><snippet>sleep(1)</snippet></ROW><ROW><id>15983165</id><snippet>/home/user/APPS.d/QUICKFIX.d/latest/lib/python/...
</snippet></ROW><ROW><id>15983165</id><snippet>/home/user/APPS.d/QUICKFIX.d/latest/lib/...
</snippet></ROW><ROW><id>15983165</id><snippet>user$ cd /home/user/.local/lib/python2.7/site-packages
user$ rm _quickfix.so _quickfix.dylib
user$ ln -s /home/user/APPS.d/QUICKFIX.d/latest/lib/_quickfix.so    _quickfix.so
user$ ln -s /home/user/APPS.d/QUICKFIX.d/latest/lib/_quickfix.dylib _quickfix.dylib
</snippet></ROW><ROW><id>15983165</id><snippet>user$ cd /home/user/APPS.d/QUICKFIX.d/latest/lib
user$ ln -s libquickfix_python.so _quickfix.so
user$ ln -s &lt;???&gt; _quickfix.dylib  # Actually I didn't create this one yet. It's not yet clear to me what it should point to. I Will update this post later.
</snippet></ROW><ROW><id>15983165</id><snippet>Note: Because I compiled QuickFix so that it does not install to the traditional "/usr/local/" directory structure, I had to append my "LD_LIBRARY_PATH" to include: "/home/user/APPS.d/QUICKFIX.d/latest/lib"
</snippet></ROW><ROW><id>15983165</id><snippet>user$ python -c "import quickfix"; echo ${?}
0
user$ python -c "import quickfix42"; echo ${?}
0
</snippet></ROW><ROW><id>15983181</id><snippet>lambda</snippet></ROW><ROW><id>15983181</id><snippet>&gt;&gt;&gt; F = lambda v: F(v[1:]) if v and v[0] == 'Home' else v
&gt;&gt;&gt; L = ['Home', 'Home', 'Home and Garden', 'Home', 'Kitchen']
&gt;&gt;&gt; F(L)
['Home and Garden', 'Home', 'Kitchen']
</snippet></ROW><ROW><id>15983181</id><snippet>&gt;&gt;&gt; from itertools import dropwhile
&gt;&gt;&gt; L = ['Home', 'Home', 'Home and Garden', 'Home', 'Kitchen']
&gt;&gt;&gt; list(dropwhile(lambda x: x == 'Home', L))
['Home and Garden', 'Home', 'Kitchen']
</snippet></ROW><ROW><id>15983181</id><snippet>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; from operator import eq
&gt;&gt;&gt; from itertools import dropwhile
&gt;&gt;&gt; L = ['Home', 'Home', 'Home and Garden', 'Home', 'Kitchen']
&gt;&gt;&gt; list(dropwhile(partial(eq, "Home"), L))
['Home and Garden', 'Home', 'Kitchen']
</snippet></ROW><ROW><id>15983461</id><snippet>&gt; find /opt/ -name 'libintl*'
/opt/local/include/libintl.h
/opt/local/lib/libintl.8.dylib
...
</snippet></ROW><ROW><id>15983461</id><snippet>/usr/</snippet></ROW><ROW><id>15983461</id><snippet>&gt; sudo bash
&gt; mkdir -p /usr/local/libodep/lib
&gt; ln -s /opt/local/lib/libintl.8.dylib /usr/local/libodep/lib/libintl.8.dylib
</snippet></ROW><ROW><id>15983883</id><snippet>from turtle import *
from random import choice
accuracy=64
colors = ['red', 'blue', 'green']
dist=400/accuracy
turn=360/accuracy
color_times = dict(zip(colors, [0, 0, 0])) # {'red':0, 'blue':0', 'green':0}
for j in range(5):
    my_color = choice(colors)
    color(my_color)
    color_times[my_color] += 1
    down()
    for i in range(0,360,turn):
        fd(dist)
        left(turn)
    up()
    fd(25)
mainloop()
print '{}:{}\n {}:{}\n {}:{}'.format('red', color_times['red'], 'blue', color_times['blue', 'green', color_times['green'])
</snippet></ROW><ROW><id>15983883</id><snippet>color(random.choice(colors))</snippet></ROW><ROW><id>15983883</id><snippet>my_color = random.choice(colors)
color(my_color)
color_times[my_color] += 1 # you have to initialize color_times before the loop
</snippet></ROW><ROW><id>15984052</id><snippet>board = []
count = 0 
currentBoard = 0 

fp = open('input.txt')
for i,line in enumerate(fp.readlines()):
    if i == 0:
        count = int(i)
        board.append([])
    else:
        if len(line[:-1]) == 0:
            currentBoard += 1
            board.append([])
        else: #this has board data
            board[currentBoard].append(line[:-1])
fp.close()
import pprint
pprint.pprint(board)
</snippet></ROW><ROW><id>15984052</id><snippet>from collections import OrderedDict
currentBoard = 0
board = {}
board[currentBoard] = []

fp = open('input.txt')
lines = fp.readlines()
fp.close()

for line in lines[1:]:
    if len(line[:-1]) == 0:
        currentBoard += 1
        board[currentBoard] = []
    else:
        board[currentBoard].append(line[:-1])

count = len(board)
print(count)
import pprint
pprint.pprint(board)
</snippet></ROW><ROW><id>15984116</id><snippet>threadsafe</snippet></ROW><ROW><id>15984116</id><snippet>subroutine foo(a)
!f2py threadsafe
!f2py intent(out) :: a
integer a
a = 5
end subroutine foo
</snippet></ROW><ROW><id>15984116</id><snippet>f2py -c -m foo --build-dir test_build foo.f90
</snippet></ROW><ROW><id>15984116</id><snippet>grep THREAD test_build/src.*/*.c
build/src.linux-x86_64-2.7/testmodule.c:      Py_BEGIN_ALLOW_THREADS
build/src.linux-x86_64-2.7/testmodule.c:      Py_END_ALLOW_THREADS
</snippet></ROW><ROW><id>15984116</id><snippet>!f2py threadsafe</snippet></ROW><ROW><id>15984175</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; print(os.path.normcase(os.path.normpath("C:\\abc/def/hij\\")))
c:\abc\def\hij
</snippet></ROW><ROW><id>15984271</id><snippet>convert=True</snippet></ROW><ROW><id>15984271</id><snippet>file = drive_service.files().insert(body=body, media_body=media_body, convert=True).execute()
</snippet></ROW><ROW><id>15984310</id><snippet>p/2 &lt; alpha and t &gt; 0</snippet></ROW><ROW><id>15984310</id><snippet>p/2 &lt; alpha and t &lt; 0</snippet></ROW><ROW><id>15984410</id><snippet>def quantize(signal, partitions, codebook):
    indices = []
    quanta = []
    for datum in signal:
        index = 0
        while index &lt; len(partitions) and datum &gt; partitions[index]:
            index += 1
        indices.append(index)
        quanta.append(codebook[index])
    return indices, quanta
</snippet></ROW><ROW><id>15984410</id><snippet>&gt;&gt;&gt; index, quants = quantize([3, 34, 84, 40, 23], range(10, 90, 10), range(10, 100, 10))
&gt;&gt;&gt; index
[0, 3, 8, 3, 2]
&gt;&gt;&gt; quants
[10, 40, 90, 40, 30]
</snippet></ROW><ROW><id>15984410</id><snippet>from __future__ import division
import math

def opt_quantize(signal, num_quanta, partition_start, partition_step,
                 codebook_start, codebook_step):
    indices = []
    quanta = []
    for datum in signal:
        index = int(math.floor((datum - partition_start) / partition_step + 1))
        if index &lt; 0:
            index = 0
        if index &gt;= num_quanta:
            index = num_quanta - 1
        indices.append(index)
        quanta.append(codebook_start + codebook_step * index)
    return indices, quanta
</snippet></ROW><ROW><id>15984410</id><snippet>&gt;&gt;&gt; index, quants = opt_quantize([3, 34, 84, 40, 23], 9, 10, 10, 10, 10)
&gt;&gt;&gt; index
[0, 3, 8, 4, 2]
&gt;&gt;&gt; quants
[10, 40, 90, 50, 30]
</snippet></ROW><ROW><id>15984410</id><snippet>import numpy as np

def np_quantize(signal, num_quanta, partition_start, partition_step,
                codebook_start, codebook_step):
    signal = np.asarray(signal, dtype=float)
    indices = np.empty_like(signal, dtype=int)
    np.floor_divide((signal - partition_start + partition_step), \
                    partition_step, indices)
    np.clip(indices, 0, num_quanta - 1, indices)
    quanta = np.asarray(indices, dtype=float) * codebook_step + codebook_start
    return indices, quanta
</snippet></ROW><ROW><id>15984410</id><snippet>~$ python -m timeit -s 'from quantize import orig_quantize' 'orig_quantize([-3, -2, -1, 0, 1, 2, 3], [-0.5, 0.5], [-1, 0, 1])'
100000 loops, best of 3: 8.58 usec per loop
~$ python -m timeit -s 'from quantize import opt_quantize' 'opt_quantize([-3, -2, -1, 0, 1, 2, 3], 3, -0.5, 1, -1, 1)'
100000 loops, best of 3: 10.8 usec per loop
~$ python -m timeit -s 'from quantize import np_quantize' 'np_quantize([-3, -2, -1, 0, 1, 2, 3], 3, -0.5, 1, -1, 1)'
10000 loops, best of 3: 57.4 usec per loop
</snippet></ROW><ROW><id>15984410</id><snippet>cimport cython
cimport numpy as np

cdef extern from "math.h":
    float floorf(float)


@cython.boundscheck(False)
def cynp_quantize(np.ndarray[float, ndim=1] signal, int num_quanta,
                  float partition_start, float partition_step,
                  float codebook_start, float codebook_step):
    cdef int i
    cdef int index
    cdef np.ndarray[np.int_t, ndim=1] indices = np.empty_like(signal, dtype=int)
    cdef np.ndarray[float, ndim=1] quanta = np.empty_like(signal)
    for i in range(signal.shape[0]):
        index = &lt;int&gt;floorf((signal[i] - partition_start)
                            / partition_step + 1.0)
        if index &lt; 0:
            index = 0
        if index &gt;= num_quanta:
            index = num_quanta - 1
        indices[i] = index
        quanta[i] = codebook_start + index * codebook_step
    return indices, quanta
</snippet></ROW><ROW><id>15984781</id><snippet>for row in act:
    row = row.strip()
    if row:
        curr.append(row)
</snippet></ROW><ROW><id>15985220</id><snippet>matshow</snippet></ROW><ROW><id>15985220</id><snippet>ax.matshow(newcm, cmap=pyplot.cm.Greys)
</snippet></ROW><ROW><id>15985531</id><snippet>&gt;&gt;&gt; L = ['X', 'X', 'X', 'T', '.', '.', '.', '.', 'O', 'O', '.', '.', '.', '.', '.', '.', 'X', 'O', 'X', 'T', 'X', 'X', 'O', 'O', 'O', 'X', 'O', 'X', 'X', 'X', 'O', 'O', 'X', 'O', 'X', '.', 'O', 'X', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'O', 'O', 'X', 'X', 'O', 'X', 'X', 'X', 'O', 'X', '.', 'T', 'O', '.', '.', 'O', 'X', 'X', 'X', 'O', '.', '.', 'O', '.', '.', 'O', '.', '.', 'T', '.', '.', '.', 'O', 'X', 'X', 'X', 'X', 'O', '.', '.', '.', '.', 'O', '.', '.', '.', '.', 'O']
&gt;&gt;&gt; cases = list(zip(*[iter(L)]*16))
</snippet></ROW><ROW><id>15985531</id><snippet>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(cases, width=400)
[('X', 'X', 'X', 'T', '.', '.', '.', '.', 'O', 'O', '.', '.', '.', '.', '.', '.'),
 ('X', 'O', 'X', 'T', 'X', 'X', 'O', 'O', 'O', 'X', 'O', 'X', 'X', 'X', 'O', 'O'),
 ('X', 'O', 'X', '.', 'O', 'X', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'),
 ('O', 'O', 'X', 'X', 'O', 'X', 'X', 'X', 'O', 'X', '.', 'T', 'O', '.', '.', 'O'),
 ('X', 'X', 'X', 'O', '.', '.', 'O', '.', '.', 'O', '.', '.', 'T', '.', '.', '.'),
 ('O', 'X', 'X', 'X', 'X', 'O', '.', '.', '.', '.', 'O', '.', '.', '.', '.', 'O')]
</snippet></ROW><ROW><id>15985717</id><snippet>SELECT</snippet></ROW><ROW><id>15985717</id><snippet>SELECT artistname FROM artist WHERE artistid = ?
</snippet></ROW><ROW><id>15985717</id><snippet>SELECT artist.artistid,
       artist.artistname,
       track.trackname
FROM track JOIN artist ON track.artistid = artist.artistid
WHERE artist.artistid = ?
</snippet></ROW><ROW><id>15986028</id><snippet>print browser.current_url
</snippet></ROW><ROW><id>15986212</id><snippet> File "C:\Python26\Lib\site-packages\numpy\core\memmap.py", line 257, in __array_finalize__
   self.filename = obj.filename
AttributeError: 'memmap' object has no attribute 'filename'
</snippet></ROW><ROW><id>15986212</id><snippet>numpy-discussion</snippet></ROW><ROW><id>15986212</id><snippet>memmap</snippet></ROW><ROW><id>15986879</id><snippet>Bar</snippet></ROW><ROW><id>15986879</id><snippet>Foo</snippet></ROW><ROW><id>15986879</id><snippet>Foo</snippet></ROW><ROW><id>15986879</id><snippet>Bar</snippet></ROW><ROW><id>15986879</id><snippet>Foo</snippet></ROW><ROW><id>15986879</id><snippet>foo</snippet></ROW><ROW><id>15986879</id><snippet>foo.bar</snippet></ROW><ROW><id>15986879</id><snippet>foo.bar</snippet></ROW><ROW><id>15986879</id><snippet>foo</snippet></ROW><ROW><id>15986879</id><snippet>Bar</snippet></ROW><ROW><id>15986879</id><snippet>Foo</snippet></ROW><ROW><id>15986879</id><snippet>thisown</snippet></ROW><ROW><id>15986879</id><snippet>foo.thisown = 0</snippet></ROW><ROW><id>15986879</id><snippet>get_bar</snippet></ROW><ROW><id>15986905</id><snippet>for line in file:
    print line
</snippet></ROW><ROW><id>15986905</id><snippet>print</snippet></ROW><ROW><id>15986905</id><snippet>'\n'</snippet></ROW><ROW><id>15986905</id><snippet>for line in file:
    print line,
</snippet></ROW><ROW><id>15986905</id><snippet>.rstrip()</snippet></ROW><ROW><id>15986905</id><snippet>for line in file:
    print line.rstrip('\n')
</snippet></ROW><ROW><id>15987076</id><snippet>matches = re.findall(r'(?m)(?:^fruit: (.+)\n)(?:^fruit: (.+)\n)?(?:^fruit: (.+)\n)?', text)
# [('apple', 'banana', ''), ('kiwi', 'orange', 'pear')]
</snippet></ROW><ROW><id>15987076</id><snippet>matches = [re.findall(': (.+)', x) 
    for x in re.findall(r'(?m)((?:^fruit: .+\n)+)', text)]
# [['apple', 'banana'], ['kiwi', 'orange', 'pear']]
</snippet></ROW><ROW><id>15987076</id><snippet>m.captures(n)</snippet></ROW><ROW><id>15987076</id><snippet>m.group(n)</snippet></ROW><ROW><id>15987076</id><snippet>import regex
matches = [x.captures(2) for x in regex.finditer(r'(?m)((?:^fruit: (.+)\n)+)', text)]
# [['apple', 'banana'], ['kiwi', 'orange', 'pear']]
</snippet></ROW><ROW><id>15987285</id><snippet>&gt;&gt;&gt; keys = [0.5, 1] # goes from 0 to 1, specify end interval
&gt;&gt;&gt; vals = ['red', 'orange']
&gt;&gt;&gt; import bisect
&gt;&gt;&gt; vals[bisect.bisect_right(keys, 0.464897)]
'red'
&gt;&gt;&gt; vals[bisect.bisect_right(keys, 0.5)]
'orange'
</snippet></ROW><ROW><id>15987725</id><snippet>collections.abc.Iterable</snippet></ROW><ROW><id>15987725</id><snippet>&gt;&gt;&gt; from collections import abc
&gt;&gt;&gt; isinstance(set(), abc.Iterable)
True
&gt;&gt;&gt; isinstance((), abc.Iterable)
True
&gt;&gt;&gt; isinstance([], abc.Iterable)
True
&gt;&gt;&gt; isinstance('', abc.Iterable)
True
&gt;&gt;&gt; isinstance({}, abc.Iterable)
True
&gt;&gt;&gt; isinstance(0, abc.Iterable)
False
</snippet></ROW><ROW><id>15987759</id><snippet>In [22]: df = pd.DataFrame({'A': ['foo', 'bar'] * 3,
                            'B': rand.randn(6),
                            'C': rand.randint(0, 20, 6)})

In [23]: groups = list(df.groupby('A'))

In [24]: random.shuffle(groups)

In [25]: for g, grp in groups:
    print grp
   ....:     
     A         B   C
0  foo  0.900856   4
2  foo -0.122890  19
4  foo -0.267888   8
     A         B  C
1  bar -0.683728  5
3  bar -0.935769  6
5  bar  0.530355  0
</snippet></ROW><ROW><id>15987783</id><snippet>None</snippet></ROW><ROW><id>15987783</id><snippet>1.0</snippet></ROW><ROW><id>15987840</id><snippet>tk.Button(..., command=lambda route=prog.theroute: runprog(route))
</snippet></ROW><ROW><id>15987840</id><snippet>import functools 
...
tk.Button(..., command=functools.partial(runprog,route)
</snippet></ROW><ROW><id>15987840</id><snippet>tk.Button(..., command=prog.runprog)
</snippet></ROW><ROW><id>15988235</id><snippet>repr</snippet></ROW><ROW><id>15988235</id><snippet>foo</snippet></ROW><ROW><id>15988235</id><snippet>open('foo.txt', 'w').write(repr(foo))
</snippet></ROW><ROW><id>15988473</id><snippet>data = connection.recv(4096)
</snippet></ROW><ROW><id>15988473</id><snippet>connection.setblocking(0)
buffer = ''
while 1:        
    try:
        data = connection.recv(4096)
        if not data:
            # Client has closed outbound connection
            break
        else:
            # Append to buffer
            buffer += data
    except socket.error, e:
        code = e.args[0]
        if code == 11:
            # Got EWOULDBLOCK/EAGAIN
            time.sleep(0.1)
        else:
            # Got another error
            raise
do_something_with(buffer)
</snippet></ROW><ROW><id>15988543</id><snippet>all</snippet></ROW><ROW><id>15988543</id><snippet>all(row_a[1] == row_b[1] for row_a, row_b in zip(arr1, arr2))
</snippet></ROW><ROW><id>15988543</id><snippet>   #    arr1         arr2
   [             [
    [1, 2, 3],     [9, 2, 8],
    [4, 5, 6],     [7, 5, 7],
    [7, 8, 9]      [3, 8, 1]
   ]             ]


   # zip(arr1, arr2)
   [
     #   row_a       row_b
     ( [1, 2, 3],  [9, 2, 8] ),
     ( [4, 5, 6],  [7, 5, 7] ),
     ( [7, 8, 9],  [3, 8, 1] )
   ]

   [
     #   row_a[1]   row_b[1]
     ( [ , 2,  ],  [ , 2,  ] ),
     ( [ , 5,  ],  [ , 5,  ] ),
     ( [ , 8,  ],  [ , 8,  ] )
   ]
</snippet></ROW><ROW><id>15988543</id><snippet>zip</snippet></ROW><ROW><id>15988543</id><snippet>all</snippet></ROW><ROW><id>15988852</id><snippet>&gt;&gt;&gt; a = np.array([[1,2,3], [4,5,6]])
&gt;&gt;&gt; a
array([[1, 2, 3],
       [4, 5, 6]])
&gt;&gt;&gt; # one way to get Matlab behaivor
... (a.T).ravel()
array([1, 4, 2, 5, 3, 6])
</snippet></ROW><ROW><id>15988852</id><snippet>numpy.ravel</snippet></ROW><ROW><id>15988852</id><snippet>(:)</snippet></ROW><ROW><id>15988852</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[1,2,3], [4,5,6]])
&gt;&gt;&gt; a
array([[1, 2, 3],
       [4, 5, 6]])
&gt;&gt;&gt; a.ravel()
array([1, 2, 3, 4, 5, 6])
</snippet></ROW><ROW><id>15988888</id><snippet>python
</snippet></ROW><ROW><id>15988902</id><snippet>self</snippet></ROW><ROW><id>15988902</id><snippet>self</snippet></ROW><ROW><id>15988902</id><snippet>self</snippet></ROW><ROW><id>15988902</id><snippet>class ParamDict(dict):
    def __getitem__(self, key):
        val = dict.__getitem__(self, key)
        return callable(val) and val(self) or val

params = ParamDict({
    'a': 5,
    'b': lambda self: 2**self['a']
    })
</snippet></ROW><ROW><id>15988923</id><snippet>field</snippet></ROW><ROW><id>15988923</id><snippet>for i in range(0,5):
    field = []
    for j in range(0,3):
        x = 1
        field.append(x)
    fields.append(field)
</snippet></ROW><ROW><id>15988923</id><snippet>field</snippet></ROW><ROW><id>15988923</id><snippet>fields[2][2] = 0</snippet></ROW><ROW><id>15988923</id><snippet>&gt;&gt;&gt; fields
[[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]
&gt;&gt;&gt; fields[2][2] = 0
&gt;&gt;&gt; fields
[[1, 1, 1], [1, 1, 1], [1, 1, 0], [1, 1, 1], [1, 1, 1]]
</snippet></ROW><ROW><id>15988954</id><snippet>op</snippet></ROW><ROW><id>15988954</id><snippet>r</snippet></ROW><ROW><id>15989219</id><snippet>http://www.kickstarter.com/projects/597507018/pebble-e-paper-watch-for-iphone-and-android/backers?cursor=675683697
</snippet></ROW><ROW><id>15989250</id><snippet>strauss.familyName</snippet></ROW><ROW><id>15989250</id><snippet>Family</snippet></ROW><ROW><id>15989250</id><snippet>Person</snippet></ROW><ROW><id>15989250</id><snippet>familyName</snippet></ROW><ROW><id>15989250</id><snippet>Person</snippet></ROW><ROW><id>15989250</id><snippet>class Person(Family):
    def __init__(self, personName, familyName):
        super(Person, self).__init__(familyName)
        self.personName = personName

johaness = Person('Johaness', 'Strauss')
richard = Person('Richard', 'Strauss')
</snippet></ROW><ROW><id>15989250</id><snippet>Person</snippet></ROW><ROW><id>15989250</id><snippet>Family</snippet></ROW><ROW><id>15989250</id><snippet>class Person(object):
    def __init__(self, personName, family):
        self.personName = personName
        self.family = family
</snippet></ROW><ROW><id>15989250</id><snippet>Person</snippet></ROW><ROW><id>15989250</id><snippet>Family</snippet></ROW><ROW><id>15989250</id><snippet>strauss = Family('Strauss')
johaness = Person('Johaness', strauss)
richard = Person('Richard', strauss)

print johaness.family.familyName
</snippet></ROW><ROW><id>15989267</id><snippet>import matplotlib.pyplot as plt

plt.pcolor(data, cmap=plt.cm.OrRd)
plt.yticks(np.arange(0.5,10.5),range(0,10))
plt.xticks(np.arange(0.5,10.5),range(0,10))
plt.colorbar()
plt.gca().invert_yaxis()
plt.gca().set_aspect('equal')
plt.show()
</snippet></ROW><ROW><id>15989267</id><snippet>LinearSegmentedColormap</snippet></ROW><ROW><id>15989599</id><snippet>call</snippet></ROW><ROW><id>15989599</id><snippet>call(["mail", "-s", "'Subject'", "abc@def.com"], shell=True)
</snippet></ROW><ROW><id>15989599</id><snippet>sudo touch /var/mail/&lt;username&gt;
sudo chown &lt;username&gt;:mail /var/mail/&lt;username&gt;
sudo chmod o-r /var/mail/&lt;username&gt;
sudo chmod g+rw /var/mail/&lt;username&gt;
</snippet></ROW><ROW><id>15989602</id><snippet>numbers</snippet></ROW><ROW><id>15989602</id><snippet>bubble_sort</snippet></ROW><ROW><id>15989602</id><snippet>list_n</snippet></ROW><ROW><id>15989602</id><snippet>numbers</snippet></ROW><ROW><id>15989602</id><snippet>bubble_sort</snippet></ROW><ROW><id>15989602</id><snippet>swap</snippet></ROW><ROW><id>15989602</id><snippet>list_n</snippet></ROW><ROW><id>15989613</id><snippet>m = [l1, l2, l3, l4]
</snippet></ROW><ROW><id>15989613</id><snippet>&gt;&gt;&gt; l1=[1,2,3,4]
&gt;&gt;&gt; l2=[5,6,7,8]
&gt;&gt;&gt; l3=[9,10,11,12]
&gt;&gt;&gt; l4=[13,14,15,16]
&gt;&gt;&gt; m = [l1, l2, l3, l4]
&gt;&gt;&gt; pprint(m)
[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
</snippet></ROW><ROW><id>15989613</id><snippet>&gt;&gt;&gt; print m[1][3]
8
</snippet></ROW><ROW><id>15989702</id><snippet>w = [uim.get_widget('/MainMenu/MenuFile/MenuSave')]
</snippet></ROW><ROW><id>15989927</id><snippet>collections.Counter</snippet></ROW><ROW><id>15989927</id><snippet>.most_common()</snippet></ROW><ROW><id>15989927</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; scores={'L Messi':18, 'R Falcao':16, 'R Van Persie':14, 'F Torres':0, 'C Ronaldo':16}
&gt;&gt;&gt; scores = Counter(scores)
&gt;&gt;&gt; for name, score in scores.most_common(4):
...     print '{}: {}'.format(name, score)
... 
L Messi: 18
R Falcao: 16
C Ronaldo: 16
R Van Persie: 14
</snippet></ROW><ROW><id>15989927</id><snippet>.most_common()</snippet></ROW><ROW><id>15989927</id><snippet>.most_common()</snippet></ROW><ROW><id>15989927</id><snippet>heapq</snippet></ROW><ROW><id>15989927</id><snippet>def most_common_values(counter, count):
    values = set()
    most_common = iter(counter.most_common())
    while len(values) &lt; count:
        key, value = next(most_common)
        values.add(value)
        yield key, value
</snippet></ROW><ROW><id>15989927</id><snippet>&gt;&gt;&gt; for name, score in most_common_values(scores, 3):
...     print '{}: {}'.format(name, score)
... 
L Messi: 18
R Falcao: 16
C Ronaldo: 16
R Van Persie: 14
</snippet></ROW><ROW><id>15989950</id><snippet>if pressedKeys[ord('a')]:
        vx = -MOVESPEED
    if pressedKeys[ord('d')]:
        vx = MOVESPEED
</snippet></ROW><ROW><id>15989950</id><snippet>if pressedKeys[ord('a')]:
        vx = -1*MOVESPEED*timeDiff/3.0
    if pressedKeys[ord('d')]:
        vx = MOVESPEED*timeDiff/3.0
    if not pressedKeys[ord('d')] and not pressedKeys[ord('a')]:
        vx = 0

    player.x += vx
    player.y += vy
</snippet></ROW><ROW><id>15989950</id><snippet>3.0</snippet></ROW><ROW><id>15990007</id><snippet>a = list(r)
</snippet></ROW><ROW><id>15990007</id><snippet>&gt;&gt;&gt; r='ABCD'
&gt;&gt;&gt; list(r)
['A', 'B', 'C', 'D']
</snippet></ROW><ROW><id>15990158</id><snippet>expose-event</snippet></ROW><ROW><id>15990158</id><snippet>def on_drawing_area_expose(drawing_area, event, data=None):
    # ... do your drawing here ...

drawing_area.connect('expose-event', on_drawing_area_expose)
</snippet></ROW><ROW><id>15990370</id><snippet>AttributeError: 'tuple' object has no attribute 'insert'</snippet></ROW><ROW><id>15990537</id><snippet>In [9]: df1 = pd.DataFrame(np.random.randn(3,2),columns=list('AB'),index=pd.date_range('20000101',periods=3))

In [10]: df2 = pd.DataFrame(np.random.randn(3,2),columns=list('AB'),index=pd.date_range('20000101',periods=3))

In [11]: df1
Out[11]: 
                   A         B
2000-01-01  0.129994  1.189608
2000-01-02 -1.126812  1.087617
2000-01-03 -0.930070  0.253098

In [12]: df2
Out[12]: 
                   A         B
2000-01-01  0.535700 -0.769533
2000-01-02 -1.698531 -0.456667
2000-01-03  0.451622 -1.500175

In [13]: pd.concat(dict(df1 = df1, df2 = df2),axis=1)
Out[13]: 
                 df1                 df2          
                   A         B         A         B
2000-01-01  0.129994  1.189608  0.535700 -0.769533
2000-01-02 -1.126812  1.087617 -1.698531 -0.456667
2000-01-03 -0.930070  0.253098  0.451622 -1.500175
</snippet></ROW><ROW><id>15990609</id><snippet>for list in dict.keys():
    for elem in list:
        # Logic
</snippet></ROW><ROW><id>15990662</id><snippet>world.py</snippet></ROW><ROW><id>15990662</id><snippet>def show(text):
    return some_gui_stuff.confirm(text)
</snippet></ROW><ROW><id>15990662</id><snippet>fakeworld.py</snippet></ROW><ROW><id>15990662</id><snippet>def show(text):
    return True
</snippet></ROW><ROW><id>15990662</id><snippet>import sys
sys.modules['world'] = __import__('fakeworld')
execfile('example1.py')
</snippet></ROW><ROW><id>15990662</id><snippet>example1.py</snippet></ROW><ROW><id>15990662</id><snippet>import world</snippet></ROW><ROW><id>15990662</id><snippet>world.py</snippet></ROW><ROW><id>15990662</id><snippet>import world
import fakeworld
world.show = fakeworld.show
execfile('example1.py')
</snippet></ROW><ROW><id>15990662</id><snippet>world.show</snippet></ROW><ROW><id>15990662</id><snippet>fakeworld.py</snippet></ROW><ROW><id>15990662</id><snippet>import world
world.show = lambda x: True
execfile('example1.py')
</snippet></ROW><ROW><id>15990682</id><snippet>MonthlyPayment = FixedPayment + (
    TotalAmountMortgage - (
         (FixedPayment * TotalMonthsFixedInterest + AlreadyPaidAmount)
    ) * FloatingInterest / 1200)
         ----------------------^
</snippet></ROW><ROW><id>15990682</id><snippet>[]</snippet></ROW><ROW><id>15990682</id><snippet>{}</snippet></ROW><ROW><id>15990693</id><snippet>{
    'name': 'ERP System',
    'author': 'Bellvantage (Pvt) Ltd',
    'version': '1.0',
    'depends': ['base', 'hr'],
    'category' : 'Production',
    'summary': 'ERP Information System for Plantation Industry',
    'description': """
    """,
    'data': ['bpl_security.xml',
             'ir.model.access.csv',
             'bpl_worker_registration_sequence.xml',
             'bpl_view.xml',
             ],
    'css':[],
    'images': [],
    'demo': [],
    'installable': True,
    'application' : True,
    'certificate' : '',
    'images': [],
}
</snippet></ROW><ROW><id>15990799</id><snippet>str()</snippet></ROW><ROW><id>15990799</id><snippet>sys.defaultencoding</snippet></ROW><ROW><id>15990799</id><snippet>UTF8</snippet></ROW><ROW><id>15990799</id><snippet>ASCII</snippet></ROW><ROW><id>15990799</id><snippet>self.assertEqual(str(mymodel), 'Chéri'.encode('utf8'))
</snippet></ROW><ROW><id>15990799</id><snippet>self.assertEqual(str(mymodel).decode('utf8'), 'Chéri')
</snippet></ROW><ROW><id>15990799</id><snippet>&gt;&gt;&gt; from __future__ import unicode_literals
&gt;&gt;&gt; b'Ch\xc3\xa9ri' == 'Chéri'.encode('utf8')
True
&gt;&gt;&gt; b'Ch\xc3\xa9ri'.decode('utf8') == 'Chéri'
True
</snippet></ROW><ROW><id>15991031</id><snippet>' '.join([''.join(sorted(word)) for word in sentence.split()])
</snippet></ROW><ROW><id>15991031</id><snippet>sorted()</snippet></ROW><ROW><id>15991031</id><snippet>alphabeticalWord = lambda w: ''.join(sorted(word))

' '.join([alphabeticalWord(word) for word in sentence.split()])
</snippet></ROW><ROW><id>15991343</id><snippet>sudo launchctl</snippet></ROW><ROW><id>15991343</id><snippet>launchctl</snippet></ROW><ROW><id>15991343</id><snippet>launchctl</snippet></ROW><ROW><id>15991343</id><snippet>launchctl load</snippet></ROW><ROW><id>15991343</id><snippet>launchctl</snippet></ROW><ROW><id>15991343</id><snippet>sudo launchctl load</snippet></ROW><ROW><id>15991343</id><snippet>tail -f /var/log/system.log</snippet></ROW><ROW><id>15991343</id><snippet>&lt;key&gt;StandardOutPath&lt;/key&gt;
&lt;string&gt;/tmp/turtle.out&lt;/string&gt;
&lt;key&gt;StandardErrorPath&lt;/key&gt;
&lt;string&gt;/tmp/turtle.err&lt;/string&gt;
</snippet></ROW><ROW><id>15991343</id><snippet>WorkingDirectory</snippet></ROW><ROW><id>15991343</id><snippet>EnvironmentVariables</snippet></ROW><ROW><id>15991731</id><snippet>READAHEAD_BUFSIZE</snippet></ROW><ROW><id>15991731</id><snippet>for line in fileobj:
    print line
</snippet></ROW><ROW><id>15991731</id><snippet>fread</snippet></ROW><ROW><id>15991731</id><snippet>file.next()</snippet></ROW><ROW><id>15991731</id><snippet>for</snippet></ROW><ROW><id>15991731</id><snippet>next()</snippet></ROW><ROW><id>15991731</id><snippet>next()</snippet></ROW><ROW><id>15991731</id><snippet>readline()</snippet></ROW><ROW><id>15991731</id><snippet>seek()</snippet></ROW><ROW><id>15991731</id><snippet>setvbuf</snippet></ROW><ROW><id>15991731</id><snippet>Py_UniversalNewlineFread</snippet></ROW><ROW><id>15991731</id><snippet>fread</snippet></ROW><ROW><id>15991731</id><snippet>fread()</snippet></ROW><ROW><id>15991731</id><snippet>fread()</snippet></ROW><ROW><id>15991731</id><snippet>readahead_get_line_skip()</snippet></ROW><ROW><id>15991731</id><snippet>fileobj.tell()</snippet></ROW><ROW><id>15991731</id><snippet>&gt;&gt;&gt; with open('test.txt') as f:
...     for line in f:
...         print f.tell()
... 
8192   # 1 times the buffer size
8192
8192
~ lines elided
18432  # + 1.25 times the buffer size
18432
18432
~ lines elided
26624  # + 1 times the buffer size; the last newline must've aligned on the buffer boundary
26624
26624
~ lines elided
36864  # + 1.25 times the buffer size
36864
36864
</snippet></ROW><ROW><id>15991731</id><snippet>fileobj</snippet></ROW><ROW><id>15991731</id><snippet>fread()</snippet></ROW><ROW><id>15991735</id><snippet>&amp;</snippet></ROW><ROW><id>15991735</id><snippet>odd = number &amp; 1
</snippet></ROW><ROW><id>15991735</id><snippet>In [24]: for number in range(1, 5):
   ....:     print(number &amp; 1)
   ....:     
   ....:     
1
0
1
0
</snippet></ROW><ROW><id>15991999</id><snippet>name()</snippet></ROW><ROW><id>15992024</id><snippet>1) MtGox::Client#buy! should place a bid
     Failure/Error: buy = @client.buy!(0.88, 0.89)
     WebMock::NetConnectNotAllowedError:
       Real HTTP connections are disabled. Unregistered request: POST https://data.mtgox.com/api/0/buyBTC.php with body 'amount=0.88&amp;price=0.89&amp;nonce=1321745961249676' with headers {'Accept'=&gt;'*/*', 'Content-Type'=&gt;'application/x-www-form-urlencoded', 'Rest-Key'=&gt;'key', 'Rest-Sign'=&gt;'ixxn/IrNcHJVB6ztBisOVfUSfm3PUVK3n/YAb2lACdFRrQWFFFMDBTbwIBu8aELgBmgL8j3qqIpY99ozh9FjcA==', 'User-Agent'=&gt;'Ruby'}

       You can stub this request with the following snippet:

       stub_request(:post, "https://data.mtgox.com/api/0/buyBTC.php").
         with(:body =&gt; {"amount"=&gt;"0.88", "nonce"=&gt;"1321745961249676", "price"=&gt;"0.89"},
              :headers =&gt; {'Accept'=&gt;'*/*', 'Content-Type'=&gt;'application/x-www-form-urlencoded', 'Rest-Key'=&gt;'key', 'Rest-Sign'=&gt;'ixxn/IrNcHJVB6ztBisOVfUSfm3PUVK3n/YAb2lACdFRrQWFFFMDBTbwIBu8aELgBmgL8j3qqIpY99ozh9FjcA==', 'User-Agent'=&gt;'Ruby'}).
         to_return(:status =&gt; 200, :body =&gt; "", :headers =&gt; {})

       registered request stubs:

       stub_request(:post, "https://mtgox.com/api/0/buyBTC.php").
         with(:body =&gt; "amount=0.88&amp;price=0.89&amp;nonce=1321745961249676",
              :headers =&gt; {'Rest-Key'=&gt;'key', 'Rest-Sign'=&gt;'ixxn/IrNcHJVB6ztBisOVfUSfm3PUVK3n/YAb2lACdFRrQWFFFMDBTbwIBu8aELgBmgL8j3qqIpY99ozh9FjcA=='})

       ============================================================
     # ./lib/mtgox/request.rb:16:in `request'
     # ./lib/mtgox/request.rb:10:in `post'
     # ./lib/mtgox/client.rb:178:in `buy!'
     # ./spec/mtgox/client_spec.rb:211:in `block (3 levels) in &lt;top (required)&gt;'
</snippet></ROW><ROW><id>15992180</id><snippet>__init__.py</snippet></ROW><ROW><id>15992180</id><snippet>models.py</snippet></ROW><ROW><id>15992180</id><snippet>views.py</snippet></ROW><ROW><id>15992180</id><snippet>from kuchiyose import app
from flask.ext.sqlalchemy import SQLAlchemy

db = SQLAlchemy(app)
</snippet></ROW><ROW><id>15992180</id><snippet>from kuchiyose.dashboard import models
</snippet></ROW><ROW><id>15992231</id><snippet>x = iter(rhs)
a, b, c = next(x), next(x), list(x)
</snippet></ROW><ROW><id>15992231</id><snippet>a, b, *c = rhs</snippet></ROW><ROW><id>15992413</id><snippet>ConfigParser</snippet></ROW><ROW><id>15992465</id><snippet>argparse</snippet></ROW><ROW><id>15992465</id><snippet>usage: test.py [-h] (-f FILENAME | -b BULKFILE BULKFILE | -l | -s)
test.py: error: one of the arguments -f/--filename -b/--bulkfile -l/--load -s/--supply is required
</snippet></ROW><ROW><id>15992465</id><snippet>-l</snippet></ROW><ROW><id>15992465</id><snippet>-s</snippet></ROW><ROW><id>15992465</id><snippet>usage: test.py [-h] (-f FILENAME | -b BULKFILE BULKFILE | -l | -s)
test.py: error: argument -s/--supply: not allowed with argument -l/--load
</snippet></ROW><ROW><id>15992484</id><snippet>C.x</snippet></ROW><ROW><id>15992484</id><snippet>C.__dict__["x"]</snippet></ROW><ROW><id>15992541</id><snippet>translation</snippet></ROW><ROW><id>15992541</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>15992541</id><snippet>import collections

dict_all = collections.defaultdict(list)
for t in bundle.obj.facilities.filter(foo_type = i.foo_type):
    for field in get_translatable_fields(t.foo_type.__class__):
        for translation in t.foo_type.translations.all():
            value = getattr(translation, field)
            dict_all[translation.language_code].append(value)
</snippet></ROW><ROW><id>15992541</id><snippet>defaultdict</snippet></ROW><ROW><id>15992541</id><snippet>dict_all = dict(dict_all.items())
</snippet></ROW><ROW><id>15992581</id><snippet>Data="LineString(1 1,2 2,3 3)"</snippet></ROW><ROW><id>15992581</id><snippet>(GeomFromText('%(Data)s'))</snippet></ROW><ROW><id>15992581</id><snippet> sql="""INSERT INTO `polylines` (Type, Label, Data) VALUES ('%(Type)s', '%(Label)s', (GeomFromText('%(Data)s')))"""%{"Type":type, "Label":label, "Data":data} 
</snippet></ROW><ROW><id>15992604</id><snippet>import itertools as IT

items = ['Thu Apr 04', ' Weigh In', 'Sat Apr 06', ' Collect NIC', ' Finish PTI Video', 'Wed Apr 10', ' Serum uric acid test', 'Sat Apr 13', ' 1:00pm', 'Get flag from dhariwal', 'Sun Apr 14', ' Louis CK Oh My God', ' 4:00pm', 'UPS Guy']

date_word = ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun')

def isdate(datestring):
    return any(datestring.startswith(d) for d in date_word)

items = (item.strip() for item in items)

data = (list(group) for key, group in IT.groupby(items, key=isdate))
for date, items in IT.izip(*[data]*2):
    print('{d} {i}'.format(d=date[0], i=items))
</snippet></ROW><ROW><id>15992604</id><snippet>Thu Apr 04 ['Weigh In']
Sat Apr 06 ['Collect NIC', 'Finish PTI Video']
Wed Apr 10 ['Serum uric acid test']
Sat Apr 13 ['1:00pm', 'Get flag from dhariwal']
Sun Apr 14 ['Louis CK Oh My God', '4:00pm', 'UPS Guy']
</snippet></ROW><ROW><id>15992604</id><snippet>zip(*[iterator]*2)</snippet></ROW><ROW><id>15992604</id><snippet>dict</snippet></ROW><ROW><id>15992744</id><snippet>imshow</snippet></ROW><ROW><id>15992744</id><snippet># figure set up
fig, ax_lst = plt.subplots(2, 1)
ax_lst = ax_lst.ravel()

#fake data
data = rand(512, 512)
x = np.linspace(0, 5, 512)
X, Y = meshgrid(x, x)

data2 = np.sin(X ** 2 + Y **2)
# plot the first time#fake data

im = ax_lst[0].imshow(data, interpolation='nearest', 
                            origin='bottom', 
                            aspect='auto', # get rid of this to have equal aspect
                            vmin=np.min(data),
                            vmax=np.max(data), 
                            cmap='jet')

cb = plt.colorbar(im)

pc = ax_lst[1].pcolor(data)
cb2 = plt.colorbar(pc)
</snippet></ROW><ROW><id>15992744</id><snippet># update_data (imshow)
im.set_data(data2) 
plt.draw()
</snippet></ROW><ROW><id>15992744</id><snippet>pcolor</snippet></ROW><ROW><id>15992744</id><snippet>my_cmap = plt.get_cmap('jet')
#my_nom = # you will need to scale your read data between [0, 1]
new_color = my_cmap(data2.T.ravel())
pc.update({'facecolors':new_color})

draw() 
</snippet></ROW><ROW><id>15992776</id><snippet>def start_monitor(this_id):
    monitor = Monitor()
    monitor.initialize(this_id)
    # run the eventloop, or this will return immediately and destroy the monitor

... inside Prefect.check_if():

    proc = Process(target=start_monitor, args=(this_id,))
    proc.start()
    self.monitors.append(this_id)
</snippet></ROW><ROW><id>15992809</id><snippet>subprocess.communicate</snippet></ROW><ROW><id>15992809</id><snippet>shell=True</snippet></ROW><ROW><id>15992809</id><snippet>call(["echo abc|mail -s Subject abc@def.com"], shell=True)
</snippet></ROW><ROW><id>15992816</id><snippet>NORTH_EAST = [x_coordinate + 1, y_coordinate - 1]
</snippet></ROW><ROW><id>15992816</id><snippet>x_coordinate</snippet></ROW><ROW><id>15992816</id><snippet>y_coordinate</snippet></ROW><ROW><id>15992816</id><snippet>directions = {
    "north east": (+1, -1),
    "north west": (-1, -1),
    "south east": (+1, +1),
    "south west": (-1, +1),
}

def new_position(old, direction):
    x, y = old
    dx, dy = directions[direction]
    return x + dx, y + dy

position = 100, 100
direction = "north east"

while True:
    print(position)
    position = new_position(position, direction)
</snippet></ROW><ROW><id>15992816</id><snippet>x</snippet></ROW><ROW><id>15992816</id><snippet>y</snippet></ROW><ROW><id>15992972</id><snippet>r = re.compile(r'[*-/]')
</snippet></ROW><ROW><id>15992972</id><snippet>-</snippet></ROW><ROW><id>15992972</id><snippet>*</snippet></ROW><ROW><id>15992972</id><snippet>/</snippet></ROW><ROW><id>15992972</id><snippet>*      42
+      43
,      44
-      45
.      46
/      47
</snippet></ROW><ROW><id>15992972</id><snippet>.</snippet></ROW><ROW><id>15992972</id><snippet>&gt;&gt;&gt; print r.match('+')
&lt;_sre.SRE_Match object at 0x100483370&gt;
&gt;&gt;&gt; print r.match(',')
&lt;_sre.SRE_Match object at 0x100483370&gt;
</snippet></ROW><ROW><id>15992972</id><snippet>*</snippet></ROW><ROW><id>15992972</id><snippet>-</snippet></ROW><ROW><id>15992972</id><snippet>/</snippet></ROW><ROW><id>15992972</id><snippet>-</snippet></ROW><ROW><id>15992972</id><snippet>r = re.compile(r'[*\-/]')
</snippet></ROW><ROW><id>15992972</id><snippet>.</snippet></ROW><ROW><id>15992972</id><snippet>&gt;&gt;&gt; print r.match('.') is not None
False
</snippet></ROW><ROW><id>15993126</id><snippet>attrib</snippet></ROW><ROW><id>15993126</id><snippet>&lt;span&gt;</snippet></ROW><ROW><id>15993126</id><snippet>span</snippet></ROW><ROW><id>15993126</id><snippet>if span.has_key('id'):
    del span['id']
</snippet></ROW><ROW><id>15993126</id><snippet>&gt;&gt;&gt; soup = BeautifulSoup('&lt;span id="internal-source-marker_0.9510186333209276"&gt;&lt;/span&gt;')
&gt;&gt;&gt; span = soup.find('span')
&gt;&gt;&gt; span
&lt;span id="internal-source-marker_0.9510186333209276"&gt;&lt;/span&gt;
&gt;&gt;&gt; if span.has_key('id'):
...     del span['id']
... 
&gt;&gt;&gt; span
&lt;span&gt;&lt;/span&gt;
</snippet></ROW><ROW><id>15993377</id><snippet>import sys, tty, termios, codecs, unicodedata
from contextlib import contextmanager
</snippet></ROW><ROW><id>15993377</id><snippet>tty</snippet></ROW><ROW><id>15993377</id><snippet>@contextmanager
def cbreak():
    old_attrs = termios.tcgetattr(sys.stdin)
    tty.setcbreak(sys.stdin)
    try:
        yield
    finally:
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_attrs)
</snippet></ROW><ROW><id>15993377</id><snippet>with cbreak():
    single_char_no_newline = sys.stdin.read(1)
</snippet></ROW><ROW><id>15993377</id><snippet>reset</snippet></ROW><ROW><id>15993377</id><snippet>def uinput():
    reader = codecs.getreader(sys.stdin.encoding)(sys.stdin)
    with cbreak():
        while True:
            yield reader.read(1)
</snippet></ROW><ROW><id>15993377</id><snippet>def is_printable(c):
    return not unicodedata.category(c).startswith('C')
</snippet></ROW><ROW><id>15993377</id><snippet>def is_backspace(c):
    return c in ('\x08','\x7F')

def is_interrupt(c):
    return c == '\x04'
</snippet></ROW><ROW><id>15993377</id><snippet>xinput()</snippet></ROW><ROW><id>15993377</id><snippet>def xinput(callback):
    text = ''

    for c in uinput():
        if   is_printable(c): text += c
        elif is_backspace(c): text = text[:-1]
        elif is_interrupt(c): break

        callback(text)

    return text
</snippet></ROW><ROW><id>15993377</id><snippet>def test(text):
    print 'Buffer now holds', text

xinput(test)
</snippet></ROW><ROW><id>15993377</id><snippet>Buffer now holds H
Buffer now holds He
Buffer now holds Hel
Buffer now holds Hell
Buffer now holds Hellx
Buffer now holds Hell
Buffer now holds Hello
Buffer now holds Hello 
Buffer now holds Hello w
Buffer now holds Hello wo
Buffer now holds Hello wor
Buffer now holds Hello worl
Buffer now holds Hello world
</snippet></ROW><ROW><id>15993515</id><snippet>import random

class ListDict(object):
    def __init__(self):
        self.item_to_position = {}
        self.items = []

    def add_item(self, item):
        if item in self.item_to_position:
            return
        self.items.append(item)
        self.item_to_position[item] = len(self.items)-1

    def remove_item(self, item):
        position = self.item_to_position.pop(item)
        last_item = self.items.pop()
        if position != len(self.items):
            self.items[position] = last_item
            self.item_to_position[last_item] = position

    def choose_random_item(self):
        return random.choice(self.items)
</snippet></ROW><ROW><id>15993515</id><snippet>.pop()</snippet></ROW><ROW><id>15993515</id><snippet>.append()</snippet></ROW><ROW><id>15993549</id><snippet>import flask
# You want to automatically generate the token and store it somewhere on the server (database for example)
flask.session['some_token'] = some_token
</snippet></ROW><ROW><id>15993549</id><snippet>class Session(db.Model):
    token = Column('token') # auto generated thingy
    # foreign key to user for example
    # expiration time/date
</snippet></ROW><ROW><id>15993606</id><snippet>if number &lt; 0:
    ...
</snippet></ROW><ROW><id>15993606</id><snippet>for number in numbers:
    if number &lt; 0:
        ...
</snippet></ROW><ROW><id>15993606</id><snippet>count = 0
for number in numbers:
    if number &lt; 0:
        count += 1
</snippet></ROW><ROW><id>15993606</id><snippet>sum()</snippet></ROW><ROW><id>15993606</id><snippet>&gt;&gt;&gt; numbers = [1, 2, -3, 3, -7, 5, 4, -1, 4, 5]
&gt;&gt;&gt; sum(1 for number in numbers if number &lt; 0)
3
</snippet></ROW><ROW><id>15993825</id><snippet>{% if form.sender_name.queryset.count == 0 %}

link here

{% endif %}
</snippet></ROW><ROW><id>15993825</id><snippet>form.sender_name.field.queryset.count</snippet></ROW><ROW><id>15993867</id><snippet>numpy</snippet></ROW><ROW><id>15993867</id><snippet>300</snippet></ROW><ROW><id>15993867</id><snippet>all_words = nltk.FreqDist(word for word in movie_reviews.words())
top_words = set(all_words.keys()[:300])
</snippet></ROW><ROW><id>15993867</id><snippet>top_words</snippet></ROW><ROW><id>15993867</id><snippet>list</snippet></ROW><ROW><id>15993867</id><snippet>tuple</snippet></ROW><ROW><id>15993867</id><snippet>dict</snippet></ROW><ROW><id>15993867</id><snippet>def word_feats(words):
    return {word:True for word in words if word in top_words}
</snippet></ROW><ROW><id>15993871</id><snippet>elif a[3] == 4:
    a[3] = ("Is Good TOo")
</snippet></ROW><ROW><id>15993871</id><snippet>a = [1,2,3,4,5]
for i in range(0, len(a)):
  if i == 0:
    a[i] = "Good"
  elif i == 3:
    a[i] = "Is Good TOo"
</snippet></ROW><ROW><id>15994175</id><snippet>import numpy as np

#define triangles
triangles = np.array([[coords[e] for e in elem] for elem in elems])

#find centroid of each triangle
CM = np.mean(triangles,axis=1)

#find vector from each point in triangle pointing towards centroid
point_to_CM_vectors = CM[:,np.newaxis] - triangles

#calculate similar triangles 1% smaller
new_triangle = triangles + 0.01*point_to_CM_vectors
</snippet></ROW><ROW><id>15994247</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>15994247</id><snippet>from subprocess import Popen
midori_process = Popen(["midori"])
</snippet></ROW><ROW><id>15994453</id><snippet>{% if perms.foo %}
    &lt;p&gt;You have permission to do something in the foo app.&lt;/p&gt;
    {% if perms.foo.can_vote %}
        &lt;p&gt;You can vote!&lt;/p&gt;
    {% endif %}
    {% if perms.foo.can_drive %}
        &lt;p&gt;You can drive!&lt;/p&gt;
    {% endif %}
{% else %}
    &lt;p&gt;You don't have permission to do anything in the foo app.&lt;/p&gt;
{% endif %}
</snippet></ROW><ROW><id>15994453</id><snippet>from django import http

class PermissionMiddleware(object):
    def process_view(self, request, view_func, view_args, view_kwargs):
        # you should somehow derive this from the view function and/or view args/kwargs
        your_object = SomeThing.objects.get(...)

        if not request.user.has_perm('name_of_your_object.permission'):
            return http.HttpResponseForbidden()
</snippet></ROW><ROW><id>15994564</id><snippet>reply</snippet></ROW><ROW><id>15994564</id><snippet>print any(row[0] in reply for row in list_in_list)
</snippet></ROW><ROW><id>15994564</id><snippet>reply</snippet></ROW><ROW><id>15994564</id><snippet>for row in list_in_list:
    reply = reply.replace(row[0], row[1])
print reply
</snippet></ROW><ROW><id>15994564</id><snippet>reply = "This is a test I We Her"
#rw = replace_with
rw = {"I":"You", "We":"Us", "Her":"Him"}

reply = " ".join([rw[word] if word in rw else word for word in reply.split()])

print reply
</snippet></ROW><ROW><id>15994627</id><snippet>FILE.read()</snippet></ROW><ROW><id>15994627</id><snippet>for filepath in glob.glob(filelocation): # for each file
    FILE = codecs.open(filepath, 'r', encoding="utf-8")
    contents = FILE.read().lower()
    if "every kind of asset" in contents:
        print("Found in " + os.path.basename(filepath))
        freq = contents.count("every kind of asset")
        print(freq)
    else:
        print("not found in " + os.path.basename(filepath))
</snippet></ROW><ROW><id>15995202</id><snippet>7</snippet></ROW><ROW><id>15995202</id><snippet>47</snippet></ROW><ROW><id>15995202</id><snippet>def post(self):
    my_arg = self.get_argument('my_arg')
    if not 7 &lt;= my_arg &lt;= 47:
        raise tornado.web.HTTPError(400)  # 400 Bad Request
</snippet></ROW><ROW><id>15995202</id><snippet>class MyHandler(tornado.web.RequestHandler):

    def get_argument(self, name, minimum, maximum):
        argument = super(MyHandler, self).get_argument(name)
        if not minimum &lt;= argument &lt;= maximum:
            raise tornado.web.HTTPError(400)  # 400 Bad Request
        return argument

    def post(self):
        small_arg = self.get_argument('small_arg', 1, 3)
        medium_arg = self.get_argument('medium_arg', 7, 47)
        large_arg = self.get_argument('large_arg', 9001, 10000)
</snippet></ROW><ROW><id>15995249</id><snippet>zip</snippet></ROW><ROW><id>15995249</id><snippet>csv</snippet></ROW><ROW><id>15995249</id><snippet>x = [['a','b','c'], ['d','e','f'], ['g','h','i']]
y = [['j','k','l'], ['m','n','o'], ['p','q','r']]

from itertools import chain
import csv
res = zip(*list(chain.from_iterable(zip(x, y))))
with open(r'yourfile.csv', 'wb') as fout:
    csvout = csv.writer(fout)
    csvout.writerows(res)
</snippet></ROW><ROW><id>15995249</id><snippet>fillvalue=</snippet></ROW><ROW><id>15995249</id><snippet>zip</snippet></ROW><ROW><id>15995310</id><snippet>x</snippet></ROW><ROW><id>15995310</id><snippet>0</snippet></ROW><ROW><id>15995310</id><snippet>i</snippet></ROW><ROW><id>15995310</id><snippet>&gt;&gt;&gt; 1e-1000
0.0
</snippet></ROW><ROW><id>15995355</id><snippet>class Channel(db.Model):
    name = db.StringProperty(required = True)
    subscriber_list = db.ListProperty(users.User)

    @classmethod
    def addChannelWithName(cls,name):
        channel = cls()
        channel.name = name
        channel.put()
</snippet></ROW><ROW><id>15995567</id><snippet>&gt;&gt;&gt; for x in xrange(1,1):
...     if True:
...         print "hi"
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15995823</id><snippet>rm_invalid_char()</snippet></ROW><ROW><id>15995823</id><snippet>rm_invalid_char()</snippet></ROW><ROW><id>15995823</id><snippet>print(repr(str))</snippet></ROW><ROW><id>15995823</id><snippet>rm_invalid_char()</snippet></ROW><ROW><id>15995823</id><snippet>rm_invalid_char()</snippet></ROW><ROW><id>15995823</id><snippet>str</snippet></ROW><ROW><id>15995855</id><snippet># monkey patch OAuth
import oauth2
old_request = oauth2.Request
del oauth2.Request
class NewRequest(old_request):
    def to_header(self, realm=''):
        """According Github documentation this is enough for authentication
        http://developer.github.com/v3/#authentication."""
        return {'Authorization': 'token %s' % self['oauth_token']}

oauth2.Request = NewRequest
# end monkey patch
</snippet></ROW><ROW><id>15995855</id><snippet>rauth</snippet></ROW><ROW><id>15995873</id><snippet>from __future__ import division
from pylab import *

dx, dy = 0.01, 0.01
D = 0.01
dx2, dy2 = dx**2 ,dy**2
dt = (dx2*dy2)/(2*D*(dx2+dy2))
endt = 0.1
Nt = int (endt/dt)
endX,endY = 1,1
nx, ny = int(endX/dx), int(endY/dy)
T = zeros([nx,ny])
Tcopy = zeros([nx,ny])
"""initial conditions"""

for i in range(nx):
 for j in range(ny):
  if( ((i*dx - 0.5)**2 +(j*dy - 0.5)**2 &lt; 0.1) and ((i*dx - 0.5)**2 +(j*dy - 0.5)**2 &gt;0.05) ):
   T[i][j] = 10


def integrate(T,Tcopy):

 T[1:-1, 1:-1] = Tcopy[1:-1, 1:-1] + D*dt*( (Tcopy[2:, 1:-1] - 2*Tcopy[1:-1, 1:-1] + T[:-2, 1:-1])/dx2 + (Tcopy[1:-1, 2:] - 2*Tcopy[1:-1, 1:-1] + T[1:-1, :-2])/dy2  )
 Tcopy = copy(T)
 return Tcopy,T

x = arange(0, endX, dx)
y = arange(0, endY, dy)
X,Y = meshgrid(x, y)

"""creating the plot"""

fig, ax_lst = plt.subplots(1, 2)
ax_lst[0].imshow(T, interpolation='nearest',
                            origin='bottom',
                            aspect='auto',
                            vmin=np.min(T),
                            vmax=np.max(T),
                            cmap='hot',extent=[0,1,0,1])
im = ax_lst[1].imshow(T, interpolation='nearest',
                            origin='bottom',
                            aspect='auto',
                            vmin=np.min(T),
                            vmax=np.max(T),
                            cmap='hot',extent=[0,1,0,1])
fig.colorbar(im)

"""main loop"""

for t in range(Nt):
 im.set_data(T)
 plt.draw()
 plt.pause(0.1)
 Tcopy,T = integrate(T,Tcopy)
 print np.mean(T), np.max(T), np.min(T)
</snippet></ROW><ROW><id>15995873</id><snippet>im = ax_lst.imshow(T, interpolation='nearest',
                        origin='bottom',
                        aspect='auto',
                        vmin=np.min(T) + .01, # so 0 doesn't blow up the log
                        vmax=np.max(T),
                        cmap='hot',extent=[0,1,0,1],
                        norm=matplotlib.colors.LogNorm(clip=True),)
</snippet></ROW><ROW><id>15995897</id><snippet>if raw_input()=='a': do_stuff()
</snippet></ROW><ROW><id>15995917</id><snippet>new_list = [elem for elem in your_list if elem.endswith('.txt')]
</snippet></ROW><ROW><id>15995917</id><snippet>list</snippet></ROW><ROW><id>15995917</id><snippet>list</snippet></ROW><ROW><id>15995920</id><snippet>winfo_children</snippet></ROW><ROW><id>15995920</id><snippet>for child in infoFrame.winfo_children():
    child.destroy()
</snippet></ROW><ROW><id>15995940</id><snippet>import itertools

def prob():
    testlists = list(itertools.combinations([1,2,3,4,5,6,7,8,9,0],4))
    for itervalue in range(5,50):
        for tlist in testlists:
            print itervalue
</snippet></ROW><ROW><id>15995946</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class A(Base):
    __tablename__ = "a"

    id = Column(Integer, primary_key=True)
    data = Column(String(20))
    boolean = Column(Boolean)

# works
e = create_engine("sqlite://", echo=True)

# works
#e = create_engine("postgresql://scott:tiger@localhost/test", echo=True)

# works
#e = create_engine("mysql://scott:tiger@localhost/test", echo=True)

Base.metadata.create_all(e)

s = Session(e)
s.add_all([
    A(data='a1', boolean=True),
    A(data='a2', boolean=False),
    A(data='a3', boolean=True),
])

# works
print s.query(A).filter(A.data &gt; 'a1', A.boolean).all()

# works
print s.query(A).filter(A.boolean).all()

# if before 0.8, need to use and_() or table-bound column
# print s.query(A).filter(and_(A.data &gt; 'a1', A.boolean)).all()
# print s.query(A).filter(A.__table__.c.boolean).all()
</snippet></ROW><ROW><id>15995964</id><snippet>def selection_sort(A,n):
    moves=0
    for i in xrange(n):
        minn=i
        for j in xrange(i+1,n):
            if A[j]&lt;A[minn]:
                minn=j
        moves+=minn-i       
        A[i],A[minn]=A[minn],A[i]
    print moves,A

#examples:
selection_sort(['1', '0', '1', '0', '1', '0'],6)
selection_sort(['1', '0', '1', '1', '1', '1'],6)
</snippet></ROW><ROW><id>15995964</id><snippet>6 ['0', '0', '0', '1', '1', '1']
1 ['0', '1', '1', '1', '1', '1']
</snippet></ROW><ROW><id>15995964</id><snippet>1</snippet></ROW><ROW><id>15995964</id><snippet>0</snippet></ROW><ROW><id>15995964</id><snippet>itertools.cycle</snippet></ROW><ROW><id>15995964</id><snippet>&gt;&gt;&gt; from itertools import cycle
&gt;&gt;&gt; c=cycle(('1','0'))
&gt;&gt;&gt; n=3
&gt;&gt;&gt; [next(c) for _ in xrange(n*2)]
['1', '0', '1', '0', '1', '0']
</snippet></ROW><ROW><id>15995964</id><snippet>def Arrange_Disks(A):
    length=len(A)
    moves=0
    for i in xrange(length):
        minn=i
        for j in xrange(i+1,length):
            if A[j]&lt;A[minn]:
                minn=j
        moves+=minn-i       
        A[i],A[minn]=A[minn],A[i]
    return A,moves                #returns a tuple containing both A and moves


def main():

    n=input("Please enter a number between 2 to 10: ")
    A=[]
    for disk in range (1,(2*n+1)):
        if (disk%2) != 0:
            A.append("1")
        else:
            A.append("0")
    print "This is the original array: ", A

    A,moves=Arrange_Disks(A)

    print "This is the sorted array: ", A
    print "This is the number of moves required: ", moves

main()
</snippet></ROW><ROW><id>15995964</id><snippet>Please enter a number between 2 to 10: 3
This is the original array:  ['1', '0', '1', '0', '1', '0']
This is the sorted array:  ['0', '0', '0', '1', '1', '1']
This is the number of moves required:  6

Please enter a number between 2 to 10: 5
This is the original array:  ['1', '0', '1', '0', '1', '0', '1', '0', '1', '0']
This is the sorted array:  ['0', '0', '0', '0', '0', '1', '1', '1', '1', '1']
This is the number of moves required:  15
</snippet></ROW><ROW><id>15996199</id><snippet>sum(len(x) for x in multilist)
</snippet></ROW><ROW><id>15996243</id><snippet>b, a+b</snippet></ROW><ROW><id>15996243</id><snippet>a</snippet></ROW><ROW><id>15996243</id><snippet>b</snippet></ROW><ROW><id>15996265</id><snippet>fsolve()</snippet></ROW><ROW><id>15996265</id><snippet>f(x) = 0</snippet></ROW><ROW><id>15996265</id><snippet>f(x)</snippet></ROW><ROW><id>15996265</id><snippet>x</snippet></ROW><ROW><id>15996265</id><snippet>x = -1</snippet></ROW><ROW><id>15996265</id><snippet>x = 1</snippet></ROW><ROW><id>15996265</id><snippet>x &gt; 1</snippet></ROW><ROW><id>15996265</id><snippet>x &lt; -1</snippet></ROW><ROW><id>15996265</id><snippet>sqrt()</snippet></ROW><ROW><id>15996265</id><snippet>invalid value encountered in sqrt</snippet></ROW><ROW><id>15996265</id><snippet>fsolve()</snippet></ROW><ROW><id>15996451</id><snippet>nohup python start.py &amp;</snippet></ROW><ROW><id>15996453</id><snippet>'rb'</snippet></ROW><ROW><id>15996453</id><snippet>read</snippet></ROW><ROW><id>15996453</id><snippet>with open('filename', 'rb') as f:
    block = f.read(512 * 2**10)
    while block != "":
        # Do stuff with a block
        block = f.read(512 * 2**10)
</snippet></ROW><ROW><id>15996540</id><snippet>if any(x in players for x in ("1111111", "0000000", "blablabla")):
    # do something
</snippet></ROW><ROW><id>15996540</id><snippet>players</snippet></ROW><ROW><id>15996540</id><snippet>set</snippet></ROW><ROW><id>15996563</id><snippet>[start:stop:step]
</snippet></ROW><ROW><id>15996563</id><snippet>start</snippet></ROW><ROW><id>15996563</id><snippet>stop</snippet></ROW><ROW><id>15996563</id><snippet>step</snippet></ROW><ROW><id>15996563</id><snippet>-1</snippet></ROW><ROW><id>15996563</id><snippet>1</snippet></ROW><ROW><id>15996563</id><snippet>2</snippet></ROW><ROW><id>15996563</id><snippet>-1</snippet></ROW><ROW><id>15996858</id><snippet>exec</snippet></ROW><ROW><id>15996858</id><snippet>exec"x=10\nwhile x&gt;0: print x; x-= 1"
</snippet></ROW><ROW><id>15997016</id><snippet>id</snippet></ROW><ROW><id>15997016</id><snippet>float</snippet></ROW><ROW><id>15997016</id><snippet>float</snippet></ROW><ROW><id>15997016</id><snippet>small_ints</snippet></ROW><ROW><id>15997081</id><snippet>import wx

class Cartesian(wx.Frame):
    def __init__(self, parent=None, id=-1, title=""):
        wx.Frame.__init__(self, parent, id, title, size=(640, 480))

        self.panel = wx.Panel(self)
        self.panel.Bind(wx.EVT_PAINT, self.OnPaint)

    def OnPaint(self, event):
        dc = wx.PaintDC(event.GetEventObject())
        dc.Clear()
        dc.SetPen(wx.Pen(wx.BLACK))
        dc.DrawLine(320, 0, 320, 480)
        dc.DrawLine(0, 240, 640, 240)

app = wx.App(False)
frame = Cartesian()
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>15997081</id><snippet>dc.DrawLine()</snippet></ROW><ROW><id>15997081</id><snippet>wx.StaticLine()</snippet></ROW><ROW><id>15997081</id><snippet>import wx

class Cartesian(wx.Frame):
    def __init__(self, parent=None, id=-1, title=""):
        wx.Frame.__init__(self, parent, id, title, size=(640, 480))

        self.panel = wx.Panel(self)

        wx.StaticLine(self.panel, pos=(320, 0), size=(1, 480), style=wx.LI_VERTICAL)
        wx.StaticLine(self.panel, pos=(0, 240), size=(640, 1), style=wx.LI_HORIZONTAL)

app = wx.App(False)
frame = Cartesian()
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>15997164</id><snippet>id</snippet></ROW><ROW><id>15997164</id><snippet>a</snippet></ROW><ROW><id>15997164</id><snippet>b</snippet></ROW><ROW><id>15997164</id><snippet>id</snippet></ROW><ROW><id>15997164</id><snippet>a</snippet></ROW><ROW><id>15997164</id><snippet>b</snippet></ROW><ROW><id>15997164</id><snippet>int</snippet></ROW><ROW><id>15997170</id><snippet>pattern=re.compile(r'case \S+ is\s*(.*?)\s*end case', re.DOTALL)
matches=pattern.findall(data)

print(matches)
# ['case body 1', 'case body 2']
</snippet></ROW><ROW><id>15997170</id><snippet>()</snippet></ROW><ROW><id>15997170</id><snippet>.</snippet></ROW><ROW><id>15997170</id><snippet>search</snippet></ROW><ROW><id>15997170</id><snippet>findall</snippet></ROW><ROW><id>15997172</id><snippet>encode</snippet></ROW><ROW><id>15997172</id><snippet>Encoder</snippet></ROW><ROW><id>15997172</id><snippet>In [1]: import json

In [2]: d = {"0": "data0", "1": "data1", "2": {"0": "data0", "1": "data1", "2": "data2"}}

In [3]: def convert(obj):
   ...:     if isinstance(obj, (list, tuple)):
   ...:         return [convert(i) for i in obj]
   ...:     elif isinstance(obj, dict):
   ...:         _, values = zip(*sorted(obj.items()))  
   ...:         return convert(values)
   ...:     return obj

In [4]: json.dumps(convert(d))
Out[4]: '["data0", "data1", ["data0", "data1", "data2"]]'
</snippet></ROW><ROW><id>15997465</id><snippet>0</snippet></ROW><ROW><id>15997465</id><snippet>n</snippet></ROW><ROW><id>15997465</id><snippet>countBetween(a,b) = countTo(b) - countTo(a)
</snippet></ROW><ROW><id>15997465</id><snippet>countTo(b ± 1) - countTo(a ± 1)</snippet></ROW><ROW><id>15997465</id><snippet>countTo</snippet></ROW><ROW><id>15997465</id><snippet>countBetween</snippet></ROW><ROW><id>15997465</id><snippet>countTo(n)</snippet></ROW><ROW><id>15997465</id><snippet>&lt;= 0</snippet></ROW><ROW><id>15997465</id><snippet>n</snippet></ROW><ROW><id>15997465</id><snippet>palindromes_below(n) = #{ k : 0 &lt;= k &lt; n, k is a palindrome }
</snippet></ROW><ROW><id>15997465</id><snippet>d</snippet></ROW><ROW><id>15997465</id><snippet>0</snippet></ROW><ROW><id>15997465</id><snippet>b-1</snippet></ROW><ROW><id>15997465</id><snippet>b</snippet></ROW><ROW><id>15997465</id><snippet>d &gt;= 3</snippet></ROW><ROW><id>15997465</id><snippet>d &gt;= 5</snippet></ROW><ROW><id>15997465</id><snippet>d = 2*k + 1</snippet></ROW><ROW><id>15997465</id><snippet>d = 2*k + 2</snippet></ROW><ROW><id>15997465</id><snippet>k</snippet></ROW><ROW><id>15997465</id><snippet>9 * 10**k
</snippet></ROW><ROW><id>15997465</id><snippet>d</snippet></ROW><ROW><id>15997465</id><snippet>(b-1) * b**k</snippet></ROW><ROW><id>15997465</id><snippet>b</snippet></ROW><ROW><id>15997465</id><snippet>n</snippet></ROW><ROW><id>15997465</id><snippet>n</snippet></ROW><ROW><id>15997465</id><snippet>   n/2-1                n/2-1
2 *  ∑ 9*10**k =  18 *    ∑ 10**k = 18 * (10**(n/2) - 1) / (10 - 1) = 2 * (10**(n/2) - 1)
    k=0                  k=0
</snippet></ROW><ROW><id>15997465</id><snippet>n</snippet></ROW><ROW><id>15997465</id><snippet>b</snippet></ROW><ROW><id>15997465</id><snippet>2 * (b**(n/2) - 1)</snippet></ROW><ROW><id>15997465</id><snippet>(b+1) * b**((n-1)/2) - 2</snippet></ROW><ROW><id>15997465</id><snippet>def palindromes_up_to_n_digits(n):
    if n &lt; 1:
        return 0
    if n % 2 == 0:
        return 2*10**(n//2) - 2
    else:
        return 11*10**(n//2) - 2
</snippet></ROW><ROW><id>15997465</id><snippet>n &gt; 0</snippet></ROW><ROW><id>15997465</id><snippet>k</snippet></ROW><ROW><id>15997465</id><snippet>&lt; n</snippet></ROW><ROW><id>15997465</id><snippet>k</snippet></ROW><ROW><id>15997465</id><snippet>palindromes_up_to_n_digits(k-1)</snippet></ROW><ROW><id>15997465</id><snippet>k</snippet></ROW><ROW><id>15997465</id><snippet>n</snippet></ROW><ROW><id>15997465</id><snippet>m = (k-1)//2</snippet></ROW><ROW><id>15997465</id><snippet>d[1] d[2] ... d[m] d[m+1] ... d[k]
</snippet></ROW><ROW><id>15997465</id><snippet>n</snippet></ROW><ROW><id>15997465</id><snippet>    k
n = ∑ d[j]*10**(k-j)
   j=1
</snippet></ROW><ROW><id>15997465</id><snippet>1 &lt;= c[1] &lt; d[1]</snippet></ROW><ROW><id>15997465</id><snippet>m</snippet></ROW><ROW><id>15997465</id><snippet>c[2], ..., c[m+1]</snippet></ROW><ROW><id>15997465</id><snippet>p = c[1] c[2] ... c[m+1] {c[m+1]} c[m] ... c[2] c[1]
</snippet></ROW><ROW><id>15997465</id><snippet>c[m+1]</snippet></ROW><ROW><id>15997465</id><snippet>k</snippet></ROW><ROW><id>15997465</id><snippet>k</snippet></ROW><ROW><id>15997465</id><snippet>c[1]*(10**(k-1) + 1) &lt;= p &lt; (c[1] + 1)*10**(k-1) &lt;= d[1]*10**(k-1) &lt;= n,
</snippet></ROW><ROW><id>15997465</id><snippet>10**m</snippet></ROW><ROW><id>15997465</id><snippet>c[1]</snippet></ROW><ROW><id>15997465</id><snippet>n</snippet></ROW><ROW><id>15997465</id><snippet>(d[1] - 1) * 10**m</snippet></ROW><ROW><id>15997465</id><snippet>k</snippet></ROW><ROW><id>15997465</id><snippet>n</snippet></ROW><ROW><id>15997465</id><snippet>k</snippet></ROW><ROW><id>15997465</id><snippet>d[1]</snippet></ROW><ROW><id>15997465</id><snippet>n</snippet></ROW><ROW><id>15997465</id><snippet>k == 2</snippet></ROW><ROW><id>15997465</id><snippet>d[1] &lt; d[2]</snippet></ROW><ROW><id>15997465</id><snippet>k &gt;= 3</snippet></ROW><ROW><id>15997465</id><snippet>0 &lt;= c[2] &lt; d[2]</snippet></ROW><ROW><id>15997465</id><snippet>m-1</snippet></ROW><ROW><id>15997465</id><snippet>c[3] ... c[m+1]</snippet></ROW><ROW><id>15997465</id><snippet>p = d[1] c[2] c[3] ... c[m] c[m+1] {c[m+1]} c[m] ... c[3] c[2] d[1]
</snippet></ROW><ROW><id>15997465</id><snippet>p &lt; n</snippet></ROW><ROW><id>15997465</id><snippet>d[1]*(10**(k-1) + 1) + c[2]*(10**(k-2) + 10)
         &lt;= p &lt; d[1]*(10**(k-1) + 1) + (c[2] + 1)*(10**(k-2) + 10)
         &lt;= d[1]*(10**(k-1) + 1) + d[2]*(10**(k-2) + 10) &lt;= n
</snippet></ROW><ROW><id>15997465</id><snippet>k &gt; 3</snippet></ROW><ROW><id>15997465</id><snippet>k == 3</snippet></ROW><ROW><id>15997465</id><snippet>10**(k-2) + 10</snippet></ROW><ROW><id>15997465</id><snippet>d[2]*10**(m-1)</snippet></ROW><ROW><id>15997465</id><snippet>k</snippet></ROW><ROW><id>15997465</id><snippet>d[1]</snippet></ROW><ROW><id>15997465</id><snippet>d[2]</snippet></ROW><ROW><id>15997465</id><snippet>1 &lt;= r &lt;= m</snippet></ROW><ROW><id>15997465</id><snippet>d[m+1]*10**(m-r)
</snippet></ROW><ROW><id>15997465</id><snippet>k</snippet></ROW><ROW><id>15997465</id><snippet>r</snippet></ROW><ROW><id>15997465</id><snippet>d[1] ... d[r]</snippet></ROW><ROW><id>15997465</id><snippet>r+1</snippet></ROW><ROW><id>15997465</id><snippet>d[r+1]</snippet></ROW><ROW><id>15997465</id><snippet>(d[1]-1])*10**m + d[2]*10**(m-1) + ... + d[m]*10 + d[m+1]
</snippet></ROW><ROW><id>15997465</id><snippet>k</snippet></ROW><ROW><id>15997465</id><snippet>m+1</snippet></ROW><ROW><id>15997465</id><snippet>n</snippet></ROW><ROW><id>15997465</id><snippet>n</snippet></ROW><ROW><id>15997465</id><snippet>n</snippet></ROW><ROW><id>15997465</id><snippet>k</snippet></ROW><ROW><id>15997465</id><snippet>p</snippet></ROW><ROW><id>15997465</id><snippet>m+1</snippet></ROW><ROW><id>15997465</id><snippet>d[1] .. d[m+1]</snippet></ROW><ROW><id>15997465</id><snippet>p &lt; n</snippet></ROW><ROW><id>15997465</id><snippet>def palindromes_below(n):
    if n &lt; 1:
        return 0
    if n &lt; 10:
        return n   # 0, 1, ..., n-1

    # General case
    dec = str(n)
    digits = len(dec)
    count = palindromes_up_to_n_digits(digits-1) + 1   # + 1 for 0
    half_length = (digits-1) // 2
    front_part = dec[0:half_length + 1]
    count += int(front_part) - 10**half_length
    i, j = half_length, half_length+1
    if digits % 2 == 1:
        i -= 1
    while i &gt;= 0 and dec[i] == dec[j]:
        i -= 1
        j += 1
    if i &gt;= 0 and dec[i] &lt; dec[j]:
        count += 1
    return count
</snippet></ROW><ROW><id>15997465</id><snippet>def count_palindromes(start, end):
    return palindromes_below(end+1) - palindromes_below(start)
</snippet></ROW><ROW><id>15997465</id><snippet>&gt;&gt;&gt; bench(10**100,10**101-1)
900000000000000000000000000000000000000000000000000 palindromes between
10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
and
99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
in 0.000186920166016 seconds
</snippet></ROW><ROW><id>15997551</id><snippet>QMenu::addAction(const QString&amp;)</snippet></ROW><ROW><id>15997551</id><snippet>QAction</snippet></ROW><ROW><id>15997551</id><snippet>trigger()</snippet></ROW><ROW><id>15997551</id><snippet>action = menu.addAction(linktype)
...
action.trigger();
</snippet></ROW><ROW><id>15997670</id><snippet>ORG1 != A</snippet></ROW><ROW><id>15997670</id><snippet>ORG2 == A</snippet></ROW><ROW><id>15997670</id><snippet>mask = (df['ORG1'] != 'A')&amp;(df[orgi] == 'A')
</snippet></ROW><ROW><id>15997670</id><snippet>mask</snippet></ROW><ROW><id>15997670</id><snippet>df['ORG1'][mask] = df['ORG2'][mask]
</snippet></ROW><ROW><id>15997670</id><snippet>A</snippet></ROW><ROW><id>15997670</id><snippet>df['ORG1'][mask] = 'A'
</snippet></ROW><ROW><id>15997670</id><snippet>'aureus'</snippet></ROW><ROW><id>15997670</id><snippet>df[orgi].str.contains('aureus') == True
</snippet></ROW><ROW><id>15997670</id><snippet>str.contains</snippet></ROW><ROW><id>15997670</id><snippet>df[orgi].str.contains('aureus')</snippet></ROW><ROW><id>15997670</id><snippet>== True</snippet></ROW><ROW><id>15997670</id><snippet>df[orgi]</snippet></ROW><ROW><id>15997670</id><snippet>NaN</snippet></ROW><ROW><id>15997670</id><snippet>NaN</snippet></ROW><ROW><id>15997670</id><snippet>df[orgi].str.contains('aureus') == True</snippet></ROW><ROW><id>15997670</id><snippet>import pandas as pd

filename = 'data.txt'
df = pd.read_table(filename, delimiter='\s+')
print(df)
#    Index ORG1 ORG2 ORG3  AB1 AS101 AS201 AS301    AB2 AS102 AS202 AS302
# 0      1    A  NaN  NaN  pen     S   NaN   NaN  dfluc     S   NaN   NaN
# 1      2    A    B    C  pen     R     S     S  dfluc     S     R     S
# 2      3    B    A    B  pen     S     S     R  dfluc     S     S     R
# 3      4    A  NaN  NaN  pen     R   NaN   NaN  dfluc     S   NaN   NaN
# 4      5    A  NaN  NaN  pen     R   NaN   NaN  dfluc     S   NaN   NaN
# 5      6    C    A    A  pen     S     R     R  dfluc     R     S     R
# 6      7    B  NaN    A  pen     R   NaN     S  dfluc     S   NaN     S
# 7      8    A    B    A  pen     R     R     R  dfluc     R     R     R
# 8      9    A  NaN  NaN  pen     R   NaN   NaN  dfluc     S   NaN   NaN

for i in range(2,4):
    orgi = 'ORG{i}'.format(i=i)
    # mask = (df['ORG1'] != 'A')&amp;(df[orgi] == 'A')
    mask = (df['ORG1'].str.contains('A') == False)&amp;(df[orgi].str.contains('A') == True)
    # Move ORGi --&gt; ORG1
    df['ORG1'][mask] = df[orgi][mask]
    for j in range(1,4):
        # Move ASij --&gt; AS1j
        source_as = 'AS{i}{j:02d}'.format(i=i, j=j)
        target_as = 'AS1{j:02d}'.format(i=i, j=j)
        try:
            df[target_as][mask] = df[source_as][mask]
        except KeyError:
            pass

print(df)
</snippet></ROW><ROW><id>15997670</id><snippet>   Index ORG1 ORG2 ORG3  AB1 AS101 AS201 AS301    AB2 AS102 AS202 AS302
0      1    A  NaN  NaN  pen     S   NaN   NaN  dfluc     S   NaN   NaN
1      2    A    B    C  pen     R     S     S  dfluc     S     R     S
2      3    A    A    B  pen     S     S     R  dfluc     S     S     R
3      4    A  NaN  NaN  pen     R   NaN   NaN  dfluc     S   NaN   NaN
4      5    A  NaN  NaN  pen     R   NaN   NaN  dfluc     S   NaN   NaN
5      6    A    A    A  pen     R     R     R  dfluc     S     S     R
6      7    A  NaN    A  pen     S   NaN     S  dfluc     S   NaN     S
7      8    A    B    A  pen     R     R     R  dfluc     R     R     R
8      9    A  NaN  NaN  pen     R   NaN   NaN  dfluc     S   NaN   NaN
</snippet></ROW><ROW><id>15997670</id><snippet>ORG2 == A</snippet></ROW><ROW><id>15997670</id><snippet>ORG3 == A</snippet></ROW><ROW><id>15997670</id><snippet>AS20*</snippet></ROW><ROW><id>15997670</id><snippet>AS30*</snippet></ROW><ROW><id>15997670</id><snippet>AS10*</snippet></ROW><ROW><id>15997670</id><snippet>AS30*</snippet></ROW><ROW><id>15997837</id><snippet>|XY|</snippet></ROW><ROW><id>15997837</id><snippet>Xp,Yp</snippet></ROW><ROW><id>15997960</id><snippet>context_processor</snippet></ROW><ROW><id>15997960</id><snippet>get_theme_file('layout.html')</snippet></ROW><ROW><id>15997960</id><snippet>themes/blue/layout.html</snippet></ROW><ROW><id>15997960</id><snippet>def get_theme_file(fname):
    theme = get_theme()
    if os.path.exists(os.path.join(theme.theme_dir, fname)):
        return os.path.join('themes', theme.name, fname)
    return os.path.join('themes', 'default', fname)
...
    # Each render_template should reference this
    return render_template(get_theme_file('layout.html'))
</snippet></ROW><ROW><id>15997960</id><snippet>{% include get_theme_file('layout.html') %}
</snippet></ROW><ROW><id>15997960</id><snippet>os.listdir</snippet></ROW><ROW><id>15997960</id><snippet>get_theme().theme_dir</snippet></ROW><ROW><id>15997960</id><snippet>get_theme_file</snippet></ROW><ROW><id>15997960</id><snippet>in</snippet></ROW><ROW><id>15997960</id><snippet>listdir</snippet></ROW><ROW><id>15998256</id><snippet>def OnSaveToFile(self, event):
    context = wx.ClientDC(self)
    memory = wx.MemoryDC()
    x, y = self.ClientSize
    bitmap = wx.EmptyBitmap(x, y, -1)
    memory.SelectObject(bitmap)
    memory.Blit(0, 0, x, y, context, 0, 0)
    memory.SelectObject(wx.NullBitmap)
    bitmap.SaveFile('test.bmp', wx.BITMAP_TYPE_BMP)
</snippet></ROW><ROW><id>15998476</id><snippet>result</snippet></ROW><ROW><id>15998476</id><snippet>hunting</snippet></ROW><ROW><id>15998476</id><snippet>hunting</snippet></ROW><ROW><id>15998476</id><snippet>result</snippet></ROW><ROW><id>15998476</id><snippet>hunting</snippet></ROW><ROW><id>15998476</id><snippet>if hunting &lt; 10:
    result = "You couldn't find anything."
else:
    huntluck += 1
    huntskill += 1
    result = ("You succeeded in hunting. Your hunting skill increases. " +
    "(%s)" %huntskill)
</snippet></ROW><ROW><id>15998496</id><snippet>fmt="%9.2f"</snippet></ROW><ROW><id>15998496</id><snippet>    25.72    433.54    135.69    898.93
   177.46    120.65    954.13    480.82
   963.45    774.35    289.08     93.64
</snippet></ROW><ROW><id>15998562</id><snippet>import signal
signal.signal(signal.SIGINT, signal.SIG_IGN)
</snippet></ROW><ROW><id>15998654</id><snippet>scrapy</snippet></ROW><ROW><id>15998654</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>15998807</id><snippet>if</snippet></ROW><ROW><id>15998807</id><snippet>waypoints = {'c': 3.0}
if E1.get():
    waypoints['Way point1']: (2, E1.get())
if E2.get():
    waypoints['Way point2']: (2, E2.get())

data = [waypoints]
</snippet></ROW><ROW><id>15998859</id><snippet>models</snippet></ROW><ROW><id>15998859</id><snippet>google.appengine.ext.db</snippet></ROW><ROW><id>15998859</id><snippet>db</snippet></ROW><ROW><id>15998859</id><snippet>google.appengine.ext</snippet></ROW><ROW><id>15998859</id><snippet>models</snippet></ROW><ROW><id>15998859</id><snippet>models</snippet></ROW><ROW><id>15998859</id><snippet>google.appengine.ext.db</snippet></ROW><ROW><id>15998859</id><snippet>models</snippet></ROW><ROW><id>15998859</id><snippet>models</snippet></ROW><ROW><id>15998871</id><snippet>class exampleClass(object):

    def doSomething(self,number):
        return number + 1 

class exampleClass2(exampleClass):

    def __init__(self):
        self.member1 = exampleClass()

    def callDefDoSomething(self):
        print self.member1.doSomething(5)


object2 = exampleClass2()
object2.callDefDoSomething()
</snippet></ROW><ROW><id>15998988</id><snippet>go &lt;b&gt;north&lt;/b&gt;</snippet></ROW><ROW><id>15998988</id><snippet>go &lt;b&gt;south&lt;/b&gt;</snippet></ROW><ROW><id>15998988</id><snippet>go()</snippet></ROW><ROW><id>15998988</id><snippet>go()</snippet></ROW><ROW><id>15998988</id><snippet>class Game:

    # Initialize internal variables, method automatically called on g = Game()
    def __init__(self):
        self._exit = False

        # Array of known commands, used in run, basically maps commands
            # to function and it says: if will get 'go' execute self._go
        self._commands = {
            'go': self._go,
            'quit': self._quit
        }

        # Array of go sub commands, used by _go
        self._commands_go = {
            'north': self._go_north
            # ...
        }

    # Mathod for parsing command, if it gets "comamnd" returns ("command",None)
    # if "command arg1 arg2" returns ("command", "arg1 arg2")
    @staticmethod
    def parse_command(string):
        string = str(string)
        index = string.find(' ')
        if index &lt; 0:
            return (string, None)

        return (string[:index], string[index+1:])

    # This is main method; the only one which should be called from outside
    # It will just read data from input in never ending loop and parse commands
    def run(self):
        while not self._exit:
            src = input('&gt; ')
            (command,args) = Game.parse_command( src)

            # Do we have this command, execute it
            if command in self._commands:
                self._commands[command](args)
            else:
                print( 'I\'m sorry I don\'t known command {}, try one of these:'.format(command))
                print( '\n'.join( self._commands.keys()))

    #######################################################
    # All game commands go here
    #######################################################
    def _quit(self,args):
        self._exit = True
        print( 'Bye bye')

    # Movement handling, will get executed when user types 'go ...' nad '...' will be in arg
    def _go(self,args):
        # No argument
        if args is None:
            print( 'Go excepts one of these:', '; '.join( self._commands_go.keys()))
            return False

        # Split sub command anr arguments
        (command,args) = Game.parse_command(args)
        if command not in self._commands_go:
            print( 'Go excepts one of these:', '; '.join( self._commands_go.keys()))
            return False

        if args is not None:
            print( 'Too many arguments for go')
            return False

        self._commands_go[command](args)
        return True

    # Go north
    def _go_north(self, args):
        print( 'Going north')


game = Game()
game.run()
</snippet></ROW><ROW><id>15998988</id><snippet>inventory item 123 update use potion 345</snippet></ROW><ROW><id>15998988</id><snippet>go north</snippet></ROW><ROW><id>15998988</id><snippet>gn</snippet></ROW><ROW><id>15998988</id><snippet>'gn': self._go_north</snippet></ROW><ROW><id>15998988</id><snippet>_commands</snippet></ROW><ROW><id>15998988</id><snippet>(item_id, action, args) = self._parse_item_action(args)</snippet></ROW><ROW><id>15998988</id><snippet>goasdf</snippet></ROW><ROW><id>15998988</id><snippet>go</snippet></ROW><ROW><id>15998988</id><snippet>for i in self._commands:
    if input.startswirh( i):
        return self._commands[i](...)
print('Invalid command')
return False
</snippet></ROW><ROW><id>15998993</id><snippet>__invert__</snippet></ROW><ROW><id>15998993</id><snippet>__invert__</snippet></ROW><ROW><id>15998993</id><snippet>~</snippet></ROW><ROW><id>15998993</id><snippet>-</snippet></ROW><ROW><id>15998993</id><snippet>In [104]: s = pd.Series([True, True, False, True])

In [105]: ~s
Out[105]: 
0    False
1    False
2     True
3    False
</snippet></ROW><ROW><id>15998993</id><snippet>np.invert(s)</snippet></ROW><ROW><id>15998993</id><snippet>~s</snippet></ROW><ROW><id>15998993</id><snippet>-s</snippet></ROW><ROW><id>15998993</id><snippet>In [119]: s = pd.Series([True, True, False, True]*10000)

In [120]: %timeit np.invert(s)
10000 loops, best of 3: 52.4 us per loop

In [121]: %timeit ~s
10000 loops, best of 3: 52.4 us per loop

In [199]: %timeit (-s)
10000 loops, best of 3: 52.5 us per loop
</snippet></ROW><ROW><id>15999176</id><snippet>re.compare</snippet></ROW><ROW><id>15999176</id><snippet>re</snippet></ROW><ROW><id>15999176</id><snippet>re.search()</snippet></ROW><ROW><id>15999176</id><snippet>re.match()</snippet></ROW><ROW><id>15999176</id><snippet>float()</snippet></ROW><ROW><id>15999176</id><snippet>tach_start</snippet></ROW><ROW><id>15999176</id><snippet>tach_end</snippet></ROW><ROW><id>15999176</id><snippet>def get_digits(line):
    try:
        return float(line)
    except ValueError:
        return None
</snippet></ROW><ROW><id>15999200</id><snippet>data_columns=True</snippet></ROW><ROW><id>15999200</id><snippet># this is the new behavior (after code updates)
n [340]: dfs = DataFrame(dict(A = 'foo', B = 'bar'),index=range(5))

In [341]: dfs
Out[341]: 
     A    B
0  foo  bar
1  foo  bar
2  foo  bar
3  foo  bar
4  foo  bar

# A and B have a size of 30
In [342]: store.append('dfs', dfs, min_itemsize = 30)

In [343]: store.get_storer('dfs').table
Out[343]: 
/dfs/table (Table(5,)) ''
  description := {
  "index": Int64Col(shape=(), dflt=0, pos=0),
  "values_block_0": StringCol(itemsize=30, shape=(2,), dflt='', pos=1)}
  byteorder := 'little'
  chunkshape := (963,)
  autoIndex := True
  colindexes := {
    "index": Index(6, medium, shuffle, zlib(1)).is_CSI=False}

# A is created as a data_column with a size of 30
# B is size is calculated
In [344]: store.append('dfs2', dfs, min_itemsize = { 'A' : 30 })

In [345]: store.get_storer('dfs2').table
Out[345]: 
/dfs2/table (Table(5,)) ''
  description := {
  "index": Int64Col(shape=(), dflt=0, pos=0),
  "values_block_0": StringCol(itemsize=3, shape=(1,), dflt='', pos=1),
  "A": StringCol(itemsize=30, shape=(), dflt='', pos=2)}
  byteorder := 'little'
  chunkshape := (1598,)
  autoIndex := True
  colindexes := {
    "A": Index(6, medium, shuffle, zlib(1)).is_CSI=False,
    "index": Index(6, medium, shuffle, zlib(1)).is_CSI=False}
</snippet></ROW><ROW><id>15999312</id><snippet>a = create_object()
b = create_object()
c = create_object()
</snippet></ROW><ROW><id>15999495</id><snippet>re.search()</snippet></ROW><ROW><id>15999495</id><snippet>re.search(r'[12]\d{3}', piece)
</snippet></ROW><ROW><id>15999573</id><snippet>loadToolBox</snippet></ROW><ROW><id>15999573</id><snippet>()</snippet></ROW><ROW><id>15999573</id><snippet>toolbox.loadToolbox()
</snippet></ROW><ROW><id>15999573</id><snippet>loadToolbox()</snippet></ROW><ROW><id>15999573</id><snippet>gp</snippet></ROW><ROW><id>15999573</id><snippet>gp</snippet></ROW><ROW><id>15999573</id><snippet>toolbox</snippet></ROW><ROW><id>15999573</id><snippet>gp</snippet></ROW><ROW><id>15999573</id><snippet>loadToolbox</snippet></ROW><ROW><id>15999573</id><snippet>script.py</snippet></ROW><ROW><id>15999573</id><snippet>toolbox.loadToolbox(gp)
</snippet></ROW><ROW><id>15999573</id><snippet>toolbox.py</snippet></ROW><ROW><id>15999573</id><snippet>def loadToolbox(gp):
    # rest of function
</snippet></ROW><ROW><id>15999600</id><snippet>command</snippet></ROW><ROW><id>15999600</id><snippet>set</snippet></ROW><ROW><id>15999667</id><snippet>range</snippet></ROW><ROW><id>15999667</id><snippet>figure()
#imshow(np.array([[0] * 8] * 12), extent=[-6, 6, -4.5, 4.5])
hist2d(xval, yval, bins=1000, range=np.array([(-6, 6), (-4.5, 4.5)]))
xlim([-6, 6])
ylim([-4.5, 4.5])
</snippet></ROW><ROW><id>15999731</id><snippet>create_image</snippet></ROW><ROW><id>15999731</id><snippet>image</snippet></ROW><ROW><id>15999731</id><snippet>visual</snippet></ROW><ROW><id>15999731</id><snippet>visual = gif1</snippet></ROW><ROW><id>15999731</id><snippet>image = gif1</snippet></ROW><ROW><id>15999731</id><snippet>gif1</snippet></ROW><ROW><id>15999731</id><snippet>import sys
from tkinter import * #or Tkinter if you're on Python2.7

def button1():
    novi = Toplevel()
    canvas = Canvas(novi, width = 300, height = 200)
    canvas.pack(expand = YES, fill = BOTH)
    gif1 = PhotoImage(file = 'image.gif')
                                #image not visual
    canvas.create_image(50, 10, image = gif1, anchor = NW)
    #assigned the gif1 to the canvas object
    canvas.gif1 = gif1


mGui = Tk()
button1 = Button(mGui,text ='Sklop',command = button1, height=5, width=20).pack()

mGui.mainloop()
</snippet></ROW><ROW><id>15999731</id><snippet>Button</snippet></ROW><ROW><id>15999731</id><snippet>button1</snippet></ROW><ROW><id>15999806</id><snippet>exec</snippet></ROW><ROW><id>15999806</id><snippet>PyEval_GetGlobals()</snippet></ROW><ROW><id>15999806</id><snippet>PyEval_GetLocals()</snippet></ROW><ROW><id>15999806</id><snippet>f_locals</snippet></ROW><ROW><id>15999806</id><snippet>IMPORT_NAME</snippet></ROW><ROW><id>15999806</id><snippet>STORE_NAME</snippet></ROW><ROW><id>15999806</id><snippet>LOAD_NAME</snippet></ROW><ROW><id>15999806</id><snippet>globals() == locals()</snippet></ROW><ROW><id>15999806</id><snippet>STORE_NAME</snippet></ROW><ROW><id>15999806</id><snippet>globals</snippet></ROW><ROW><id>15999806</id><snippet>exec</snippet></ROW><ROW><id>15999806</id><snippet>locals</snippet></ROW><ROW><id>15999806</id><snippet>def main():
    instructions = urllib.request.urlopen(URL)
    exec(instructions.read().decode(), globals())
</snippet></ROW><ROW><id>15999806</id><snippet>__name__</snippet></ROW><ROW><id>15999806</id><snippet>def main():
    instructions = urllib.request.urlopen(URL)
    g = {'__name__': '__main__'}
    exec(instructions.read().decode(), g)
</snippet></ROW><ROW><id>15999806</id><snippet>exec</snippet></ROW><ROW><id>16000031</id><snippet>html = r"""&lt;div id="karte_data_aktuelle_temperatur___CHA" class="karte_text_hidden"&gt;
    &lt;span style="font-size: 10px;"&gt;9.0&lt;/span&gt;
    &lt;br/&gt;
&lt;/div&gt;"""


from bs4 import BeautifulSoup

soup = BeautifulSoup(html)
elem = soup.find('div')

print elem['id'], 'is the id'
print elem.text, 'is the value' #9.0
</snippet></ROW><ROW><id>16000464</id><snippet>str.split()</snippet></ROW><ROW><id>16000464</id><snippet>-</snippet></ROW><ROW><id>16000464</id><snippet>re.findall()</snippet></ROW><ROW><id>16000464</id><snippet>(-.+?-)</snippet></ROW><ROW><id>16000464</id><snippet>matches = re.findall(r'(-.+?-)', 'This is a -string- with a -foo bar-')
print(matches) # ['-string-', '-foo bar-']
</snippet></ROW><ROW><id>16000527</id><snippet>func1</snippet></ROW><ROW><id>16000527</id><snippet>ui</snippet></ROW><ROW><id>16000527</id><snippet>StartQT4</snippet></ROW><ROW><id>16000527</id><snippet>statusbar</snippet></ROW><ROW><id>16000527</id><snippet>func2</snippet></ROW><ROW><id>16000527</id><snippet>StartQT4</snippet></ROW><ROW><id>16000527</id><snippet>def func2(qtWnd): # Self should go here if func2 is beloning to some class, if not, then it is not necessary
   qtWnd.ui.statusbar.showMessage("This should work now!")

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    myapp = StartQT4()
    myapp.show()
    func2(myapp)
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>16000851</id><snippet>gmpy2</snippet></ROW><ROW><id>16000851</id><snippet>gmpy2</snippet></ROW><ROW><id>16000851</id><snippet>fesetround</snippet></ROW><ROW><id>16000851</id><snippet>ctypes</snippet></ROW><ROW><id>16000851</id><snippet>fenv.h</snippet></ROW><ROW><id>16000851</id><snippet>import numpy as np
import ctypes
FE_TONEAREST = 0x0000
FE_DOWNWARD = 0x0400
FE_UPWARD = 0x0800
FE_TOWARDZERO = 0x0c00
libc = ctypes.CDLL('libc.dylib')

v = 1. / (1&lt;&lt;23)
print repr(np.float32(1+v) - np.float32(v/2)) # prints 1.0
libc.fesetround(FE_UPWARD)
print repr(np.float32(1+v) - np.float32(v/2)) # prints 1.0000002
</snippet></ROW><ROW><id>16000963</id><snippet>def exclude_function(filename):
    if filename.startswith('a'):
        return True
    else:
        return False

mytarfile.add(..., exclude=exclude_function)
</snippet></ROW><ROW><id>16000963</id><snippet>EXCLUDE_FILES = ['README', 'INSTALL', '.cvsignore']

def exclude_function(filename):
    if filename in EXCLUDE_FILES:
        return True
    else:
        return False

mytarfile.add(..., exclude=exclude_function)
</snippet></ROW><ROW><id>16000963</id><snippet>EXCLUDE_FILES = ['README', 'INSTALL', '.cvsignore']

mytarfile.add(..., exclude=lambda x: x in EXCLUDE_FILES)
</snippet></ROW><ROW><id>16000963</id><snippet>filter</snippet></ROW><ROW><id>16000963</id><snippet>EXCLUDE_FILES = ['README', 'INSTALL', '.cvsignore']

def filter_function(tarinfo):
    if tarinfo.name in EXCLUDE_FILES:
        return None
    else:
        return tarinfo

mytarfile.add(..., filter=filter_function)
</snippet></ROW><ROW><id>16000963</id><snippet>EXCLUDE_FILES = ['README', 'INSTALL', '.cvsignore']

mytarfile.add(..., filter=lambda x: None if x.name in EXCLUDE_FILES else x)
</snippet></ROW><ROW><id>16001332</id><snippet>results_str.replace('\n', "") 
</snippet></ROW><ROW><id>16001332</id><snippet>\</snippet></ROW><ROW><id>16001332</id><snippet>results_str.replace('\\n', "") 
results_str.replace(r'\n', "") 
</snippet></ROW><ROW><id>16001332</id><snippet>replace()</snippet></ROW><ROW><id>16001332</id><snippet>results_str = results_str.replace(r'\n', "")
</snippet></ROW><ROW><id>16001332</id><snippet>json</snippet></ROW><ROW><id>16001333</id><snippet>from unittest import TestCase
from playhouse.test_utils import test_database
from peewee import *

from my_app.models import User, Tweet

test_db = SqliteDatabase(':memory:')

class TestUsersTweets(TestCase):
    def create_test_data(self):
        # ... create a bunch of users and tweets
        for i in range(10):
            User.create(username='user-%d' % i)

    def test_timeline(self):
        with test_database(test_db, (User, Tweet)):
            # This data will be created in `test_db`
            self.create_test_data()

            # Perform assertions on test data inside ctx manager.
            self.assertEqual(Tweet.timeline('user-0') [...])

        # once we exit the context manager, we're back to using the normal database
</snippet></ROW><ROW><id>16001355</id><snippet>x</snippet></ROW><ROW><id>16001355</id><snippet>def simpson(f, a, b, n):
    h=(b-a)/n
    k=0.0
    x=a + h
    for i in range(1,n/2 + 1):
        k += 4*f(x)
        x += 2*h

    x = a + 2*h
    for i in range(1,n/2):
        k += 2*f(x)
        x += 2*h
    return (h/3)*(f(a)+f(b)+k)
</snippet></ROW><ROW><id>16001355</id><snippet>x += 2 * h</snippet></ROW><ROW><id>16001355</id><snippet>x = a - h</snippet></ROW><ROW><id>16001355</id><snippet>2 * h</snippet></ROW><ROW><id>16001883</id><snippet>curl -v -X POST http://127.0.0.1:5000 -d '{"email": "user@email.com", "password": "p"}' -H "Content-Type: application/json" -c cookies.txt* About to connect() to 127.0.0.1 port 5000 (#0)
*   Trying 127.0.0.1...
* connected
* Connected to 127.0.0.1 (127.0.0.1) port 5000 (#0)
&gt; POST / HTTP/1.1
&gt; User-Agent: curl/7.27.0
&gt; Host: 127.0.0.1:5000
&gt; Accept: */*
&gt; Content-Type: application/json
&gt; Content-Length: 44
&gt;
* upload completely sent off: 44 out of 44 bytes
* HTTP 1.0, assume close after body
&lt; HTTP/1.0 200 OK
&lt; Content-Type: application/json
&lt; Content-Length: 9
* Added cookie session=""DRRrrffY/WGHU80TJ++KY5UaoYU=?USER_TOKEN=UycuZUp3RndjRVJ3Q0FJQk1CZWVJY1pRVVNzSlpNSEo5cF9DZGw5Q1RaSGFUZU9PNTBObVp3U3lxanMyTzU2U3VtaEM4aXBKbXZtdXFNcExDVERiYVBzOUtIMF9maUJGQ0UudHA0NEsyd3ZxRWREaHlGQmw5cUNiclpVZnNFJwpwMQou"" for domain 127.0.0.1, path /, expire 0
&lt; Set-Cookie: session="DRRrrffY/WGHU80TJ++KY5UaoYU=?USER_TOKEN=UycuZUp3RndjRVJ3Q0FJQk1CZWVJY1pRVVNzSlpNSEo5cF9DZGw5Q1RaSGFUZU9PNTBObVp3U3lxanMyTzU2U3VtaEM4aXBKbXZtdXFNcExDVERiYVBzOUtIMF9maUJGQ0UudHA0NEsyd3ZxRWREaHlGQmw5cUNiclpVZnNFJwpwMQou"; Path=/; HttpOnly
&lt; Server: Werkzeug/0.8.3 Python/2.7.2
&lt; Date: Sun, 14 Apr 2013 17:02:00 GMT
&lt;
* Closing connection #0
"success"%
</snippet></ROW><ROW><id>16001883</id><snippet>Added cookie session</snippet></ROW><ROW><id>16001883</id><snippet>cookies.txt</snippet></ROW><ROW><id>16001883</id><snippet>$cat cookies.txt
# Netscape HTTP Cookie File
# http://curl.haxx.se/docs/http-cookies.html
# This file was generated by libcurl! Edit at your own risk.

#HttpOnly_127.0.0.1 FALSE   /   FALSE   0   session "DRRrrffY/WGHU80TJ++KY5UaoYU=?USER_TOKEN=UycuZUp3RndjRVJ3Q0FJQk1CZWVJY1pRVVNzSlpNSEo5cF9DZGw5Q1RaSGFUZU9PNTBObVp3U3lxanMyTzU2U3VtaEM4aXBKbXZtdXFNcExDVERiYVBzOUtIMF9maUJGQ0UudHA0NEsyd3ZxRWREaHlGQmw5cUNiclpVZnNFJwpwMQou"
</snippet></ROW><ROW><id>16001883</id><snippet>curl -v -b cookies.txt http://127.0.0.1:5000/users/uuid/transactions # see I am sending the file with -b option
</snippet></ROW><ROW><id>16001883</id><snippet>&lt;SecureCookieSession {'USER_TOKEN': '.eJwFwcERwCAIBMBeeIcZQUSsJZMHJ9p_Cdl9CTZHaTeOO50NmZwSyqjs2O56SumhC8ipJmvmuqMpLCTDbaPs9KH0_fiBFCE.tp44K2wvqEdDhyFBl9qCbrZUfsE'}&gt;
data: [u'b475d234-8f76-4baa-a182-bda3bc662ed2', u'fbb1ed0197a9f502b481a864cbd4e352']
</snippet></ROW><ROW><id>16001994</id><snippet>import re

data = 'var v = "this is string constant + some numbers and \" is also included "\r\nvar v = "and another \"line\" "'
matches = re.findall( r'= "(.*(?&lt;!\\))"', data, re.I | re.M)
print(matches)
</snippet></ROW><ROW><id>16001994</id><snippet>['this is string constant + some numbers and " is also included ', 'and another "line" ']
</snippet></ROW><ROW><id>16001995</id><snippet>for</snippet></ROW><ROW><id>16001995</id><snippet>x</snippet></ROW><ROW><id>16001995</id><snippet>found = False
for x in some_list:
    if x.value == value: 
        print('Found')
        found = True

if not found:
    print("Not Found.")
</snippet></ROW><ROW><id>16001995</id><snippet>any()</snippet></ROW><ROW><id>16001995</id><snippet>if not any(x.value == value for x in some_list):
    print("Not Found.")
</snippet></ROW><ROW><id>16001998</id><snippet>&gt;&gt;&gt; mylist = [1, 2, 3]
&gt;&gt;&gt; newlist = mylist
&gt;&gt;&gt; newlist.append(4)
&gt;&gt;&gt; newlist
[1, 2, 3, 4]
&gt;&gt;&gt; mylist
[1, 2, 3, 4]
</snippet></ROW><ROW><id>16001998</id><snippet>&gt;&gt;&gt; mylist = [1, 2, 3]
&gt;&gt;&gt; newlist = mylist[:]  # OR :
&gt;&gt;&gt; newlist = [x for x in mylist]
&gt;&gt;&gt; newlist.append(4)
&gt;&gt;&gt; newlist
[1, 2, 3, 4]
&gt;&gt;&gt; mylist
[1, 2, 3]
</snippet></ROW><ROW><id>16001998</id><snippet>&gt;&gt;&gt; newlist = [x[:] for x in mylist]
</snippet></ROW><ROW><id>16002139</id><snippet>var</snippet></ROW><ROW><id>16002139</id><snippet>max</snippet></ROW><ROW><id>16002139</id><snippet>&gt;&gt;&gt; dic = {0 : 'some', 10 : 'values', 20 : 'whatever'}
&gt;&gt;&gt; var = 14
&gt;&gt;&gt; max(k for k in dic if k &lt;= var)
10
</snippet></ROW><ROW><id>16002139</id><snippet>&gt;&gt;&gt; dic[max(k for k in dic if k &lt;= var)]
'values'
</snippet></ROW><ROW><id>16002139</id><snippet>ValueError</snippet></ROW><ROW><id>16002139</id><snippet>max</snippet></ROW><ROW><id>16002158</id><snippet>scan</snippet></ROW><ROW><id>16002158</id><snippet>lexicon</snippet></ROW><ROW><id>16002158</id><snippet>Lexicon</snippet></ROW><ROW><id>16002158</id><snippet>self</snippet></ROW><ROW><id>16002158</id><snippet>Lexicon</snippet></ROW><ROW><id>16002158</id><snippet>scan</snippet></ROW><ROW><id>16002305</id><snippet># This statement doesn't reference 'users' at compile time
def bind_form(func):
    ...

# This statement doesn't reference 'users' at compile time
class Create_User(Forms.Form):

    # This statement declares a new scope
    def clean(self):

        # This statement references 'users' at runtime, but not at compile time
        if users.user_exists(user):
            ...

# Now import
import users
</snippet></ROW><ROW><id>16002305</id><snippet># Import
import forms

# This statement references 'forms' at compile time
@forms.bind_form(form=forms.Create_User)
def create_user(**kwargs):
    ...
</snippet></ROW><ROW><id>16002305</id><snippet>users</snippet></ROW><ROW><id>16002305</id><snippet>Create_User.clean()</snippet></ROW><ROW><id>16002660</id><snippet>u'foo'</snippet></ROW><ROW><id>16002660</id><snippet>json.loads()</snippet></ROW><ROW><id>16002684</id><snippet>    params = { }
    params[ 'sensor' ] = "false"
    params[ 'address' ] = query
</snippet></ROW><ROW><id>16002902</id><snippet>\n — newline
\r — carriage return
\t — tab character
\b — backspace
</snippet></ROW><ROW><id>16002902</id><snippet>'Normalized Distance in Chamber ($\\frac{x}{L}$)'
</snippet></ROW><ROW><id>16002902</id><snippet>r'Normalized Distance in Chamber ($\frac{x}{L}$)'
</snippet></ROW><ROW><id>16002911</id><snippet>value</snippet></ROW><ROW><id>16002911</id><snippet>from lxml import etree

attributes = ("name", "address")
context = etree.iterparse("test.xml", tag="document")

for event, element in context:
    for child in element:
        if child.attrib.get("name") in attributes:
            print next(c for c in child).text
    element.clear() # clear the subtree from the memory
</snippet></ROW><ROW><id>16002911</id><snippet>for</snippet></ROW><ROW><id>16002911</id><snippet>if child.attrib.get("name") in attributes:
    for subchild in child:
        if subchild.tag == 'value':
            print subchild.text
</snippet></ROW><ROW><id>16003118</id><snippet>pcap.py</snippet></ROW><ROW><id>16003118</id><snippet> def writepkt(self, pkt, ts=None):
    if ts is None:
        ts = time.time()
    #some more code..
</snippet></ROW><ROW><id>16003118</id><snippet>pkt</snippet></ROW><ROW><id>16003260</id><snippet>regex</snippet></ROW><ROW><id>16003260</id><snippet>from string import ascii_lowercase as al
def find_vo_cons(strs,val):
    vowels="aeiou"
    consonants=set(al)-set(vowels) #set containing only consonants   
    le=float(len(strs))

    vowel_count=0
    consonant_count=0

    for x in strs:
        if x.lower() in vowels:
            vowel_count+=1
        elif x.lower() in consonants:
            consonant_count+=1

    if val in ("V","v"):
        return vowel_count/le
    elif val in ("C","c"):
        return consonant_count/le

def main():
    VOCO = input("Search for VOWELS(v) or CONSONANTS(c): ")
    dic={"v":"Vowels","c":"Consonants"}
    strs=  input("Enter the string: ")
    print ("The average of {0} count is {1}".format(dic[VOCO.lower()],find_vo_cons(strs,VOCO)))

main()
</snippet></ROW><ROW><id>16003260</id><snippet>~$ python3 so.py
Search for VOWELS(v) or CONSONANTS(c): v
Enter the string: foObAr
The average of Vowels count is 0.5

~$ python3 so.py
Search for VOWELS(v) or CONSONANTS(c): c
Enter the string: qwertyuiop
The average of Consonants count is 0.6
</snippet></ROW><ROW><id>16003429</id><snippet>d.get('a', {'j': 'NA'})['j']
</snippet></ROW><ROW><id>16003429</id><snippet>j</snippet></ROW><ROW><id>16003429</id><snippet>d.get('a', {}).get('j', 'NA')
</snippet></ROW><ROW><id>16003429</id><snippet>class DefaultNASubdict(dict):
    class NADict(object):
        def __getitem__(self, k):
            return 'NA'

    NA = NADict()

    def __missing__(self, k):
        return self.NA

nadict = DefaultNASubdict({
                'a': {'j':1,'k':2},
                'b': {'j':2,'k':3},
                'd': {'j':1,'k':3}
            })

print nadict['a']['j']  # 1
print nadict['b']['j']  # 2
print nadict['c']['j']  # NA
</snippet></ROW><ROW><id>16003429</id><snippet>defaultdict</snippet></ROW><ROW><id>16003429</id><snippet>import collections

class NADict(object):
    def __getitem__(self, k):
        return 'NA'

    @staticmethod
    def instance():
        return NADict._instance

NADict._instance = NADict()


nadict = collections.defaultdict(NADict.instance, {
                'a': {'j':1,'k':2},
                'b': {'j':2,'k':3},
                'd': {'j':1,'k':3}
            })
</snippet></ROW><ROW><id>16003550</id><snippet>e1 = Entry(root, width=10).grid(row=r, column=1)
</snippet></ROW><ROW><id>16003550</id><snippet>e1 = Entry(root, width=10)
e1 = e1.grid(row=r, column=1)
</snippet></ROW><ROW><id>16003550</id><snippet>e1.grid(...)</snippet></ROW><ROW><id>16003550</id><snippet>e1 = None</snippet></ROW><ROW><id>16003550</id><snippet>None</snippet></ROW><ROW><id>16003550</id><snippet>... e1.get() ...</snippet></ROW><ROW><id>16003662</id><snippet>fibonacci</snippet></ROW><ROW><id>16003662</id><snippet>fibonacci</snippet></ROW><ROW><id>16003662</id><snippet>from Tkinter import *
import threading
import time

# ...

class App:

    def __init__(self, master):
        # ...
        self.counter = 0
        self.running = False

    def mainprog(self):
        self.running = True
        threading.Thread(target=self.start_fibonacci).start()

    def start_fibonacci(self):
        while self.running:
            print fibonacci(self.counter)
            self.counter += 1
            time.sleep(1)

    def stopprog(self):
        self.running = False
        print 'Stop'


root = Tk()
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>16003723</id><snippet>foo = input("some prompt"). 
</snippet></ROW><ROW><id>16003723</id><snippet>&lt;stdin&gt;</snippet></ROW><ROW><id>16003723</id><snippet>()</snippet></ROW><ROW><id>16003723</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>16003723</id><snippet>&lt;&lt;&lt;</snippet></ROW><ROW><id>16003723</id><snippet>Command Line, interactive mode (or IDLE): 
&gt;&gt;&gt; foo = input("GIMME SOME INPUT: ")  #tell it to take some input
&lt;&lt;&lt;GIMME SOME INPUT: foo          # it prints out, "GIMME SOME INPUT:" user types in foo
&gt;&gt;&gt; print(foo)
&lt;&lt;&lt; foo
</snippet></ROW><ROW><id>16003723</id><snippet>print ("CHOICE")
print ("A.Gimme the gun!")
print ("B.Fine")
choice = input("What do you choose?")
if choice == 'A' or choice == 'a':
    #Some Action 
if choice == 'B' or choice == 'b': 
    #Some Other Action  
</snippet></ROW><ROW><id>16003867</id><snippet>generator.throw(...)</snippet></ROW><ROW><id>16003867</id><snippet>raise</snippet></ROW><ROW><id>16003867</id><snippet>raise</snippet></ROW><ROW><id>16003867</id><snippet>x.throw(Exception("i'm an argument"))
</snippet></ROW><ROW><id>16003867</id><snippet>raise type, value, traceback
</snippet></ROW><ROW><id>16003948</id><snippet>def get_absolute_url(self):
    return reverse("society_with_tag", args=[self.name,])
</snippet></ROW><ROW><id>16003948</id><snippet>def get_absolute_url(self):
    return reverse("society_with_tag", args=[self.name])
</snippet></ROW><ROW><id>16004070</id><snippet>In [18]: text=['words words','words words words','words words words words']

def pyramid(text):
    with open("abc","w") as f:
        max_width=len(text[-1])
        for line in text: 
            f.write("{0:^{1}s}\n".format(line,max_width))  #use string formatting
   ....:             

In [20]: pyramid(text)                                                

In [21]: print open("abc").read()
      words words      
   words words words   
words words words words
</snippet></ROW><ROW><id>16004131</id><snippet>class ShoppingList(Base):
    thing1_id = Column(Integer, primary_key=True)
    thing2_id = Column(Integer, primary_key=True)
</snippet></ROW><ROW><id>16004139</id><snippet>canvas.pack(fill=BOTH, expand=1)</snippet></ROW><ROW><id>16004139</id><snippet>for x in range(10):
    for y in range(10):
        if type(landMass[x][y]) is Land:
            color = "grey" 
        if type(landMass[x][y]) is Food:
            color = "green"
        if type(landMass[x][y]) is Water:
            color = "blue"
        if type(landMass[x][y]) is Shelter:
            color = "black"
        rec = canvas.create_rectangle(3 + 50 * y, 3 + 50 * x, 53 + 50 * y, 53 + 50 * x , fill=color)
        text = canvas.create_text(3 + 50 * y, 3 + 50 * x, anchor=NW, fill="white", text=landMass[x][y].elevation)
</snippet></ROW><ROW><id>16004139</id><snippet>canvas.pack(fill=BOTH, expand=1)
</snippet></ROW><ROW><id>16004171</id><snippet>from time import time, sleep

while True:
    #do other stuff
    sleep(5)
</snippet></ROW><ROW><id>16004284</id><snippet>lil_matrix.todense()</snippet></ROW><ROW><id>16004284</id><snippet>matrix</snippet></ROW><ROW><id>16004284</id><snippet>ndim = 2</snippet></ROW><ROW><id>16004284</id><snippet>ndarray</snippet></ROW><ROW><id>16004284</id><snippet>test_mat = np.ones((4,6))
test_list = test_mat[0:1,:].tolist()
</snippet></ROW><ROW><id>16004284</id><snippet>test_mat = np.matrix(np.ones((4,6)))
test_list = test_mat[0:1,:].tolist()
</snippet></ROW><ROW><id>16004284</id><snippet>lil_matrix</snippet></ROW><ROW><id>16004284</id><snippet>In [137]: ma = np.ones((4,6))

In [138]: mm = np.matrix(np.ones((4,6)))

In [139]: ms = lil_matrix(np.ones((4,6)))

In [141]: ma[0,:]
Out[141]: array([ 1.,  1.,  1.,  1.,  1.,  1.])

In [142]: mm[0,:]
Out[142]: matrix([[ 1.,  1.,  1.,  1.,  1.,  1.]])

In [143]: ms[0,:].todense()
Out[143]: matrix([[ 1.,  1.,  1.,  1.,  1.,  1.]])
</snippet></ROW><ROW><id>16004284</id><snippet>In [144]: ma[0:1,:]
Out[144]: array([[ 1.,  1.,  1.,  1.,  1.,  1.]])
</snippet></ROW><ROW><id>16004284</id><snippet>In [145]: ma[0:1,:].shape
Out[145]: (1, 6)

In [146]: ma[0,:].shape
Out[146]: (6,)

In [147]: mm[0,:].shape
Out[147]: (1, 6)

In [148]: ms[0,:].shape
Out[148]: (1, 6)
</snippet></ROW><ROW><id>16004317</id><snippet>ready==True</snippet></ROW><ROW><id>16004317</id><snippet>False</snippet></ROW><ROW><id>16004317</id><snippet>ready</snippet></ROW><ROW><id>16004317</id><snippet>False</snippet></ROW><ROW><id>16004380</id><snippet>main()</snippet></ROW><ROW><id>16004380</id><snippet>get_roomnumbers_dict</snippet></ROW><ROW><id>16004380</id><snippet>def get_roomnumbers_dict():
    var=0    
    d = {} # this line to initalize the dictionary

    while (var&lt;33):
        .....
</snippet></ROW><ROW><id>16004380</id><snippet>        .....
        Acuity1= a+b+c+d+e
        print "Patient in room %s, is graded at acuity %s"%(room, Acuity1)
        d[int(room)] = Acuity1 # saves to the dictionary
        var= var + 1
        # end of while loop here

    return d # returns dictionary for someone to check acuity and room number
</snippet></ROW><ROW><id>16004380</id><snippet>acquity_by_roomnumber = get_roomnumbers_dict() # and that gets the dictionary
</snippet></ROW><ROW><id>16004471</id><snippet>cj = cookielib.LWPCookieJar()
cj.save('cookies.txt', ignore_discard=False, ignore_expires=False)
...
cj.load('cookies.txt', ignore_discard=False, ignore_expires=False)
</snippet></ROW><ROW><id>16004535</id><snippet>config</snippet></ROW><ROW><id>16004535</id><snippet>from lib import config
</snippet></ROW><ROW><id>16004535</id><snippet>from . import config
</snippet></ROW><ROW><id>16004535</id><snippet>import config</snippet></ROW><ROW><id>16004535</id><snippet>config</snippet></ROW><ROW><id>16004580</id><snippet>session.query(SourcetoPort).filter_by(src_address=packet.dst)
</snippet></ROW><ROW><id>16004580</id><snippet>'packet.dst'</snippet></ROW><ROW><id>16004580</id><snippet>SourcetoPort</snippet></ROW><ROW><id>16004580</id><snippet>packet.src</snippet></ROW><ROW><id>16004580</id><snippet>'packet.src'</snippet></ROW><ROW><id>16004580</id><snippet>SourcetoPort(src_address=packet.src, port_no=packet_in.in_port)
</snippet></ROW><ROW><id>16004580</id><snippet>.all()</snippet></ROW><ROW><id>16004580</id><snippet>if</snippet></ROW><ROW><id>16004580</id><snippet>.count()</snippet></ROW><ROW><id>16004580</id><snippet>.all()</snippet></ROW><ROW><id>16004580</id><snippet>if session.query(SourcetoPort).filter_by(src_address=packet.dst).count():
</snippet></ROW><ROW><id>16004583</id><snippet>/bin/stty -F /dev/ttyAMA010</snippet></ROW><ROW><id>16004583</id><snippet>speed 9600 baud; line = 0;
-brkint -imaxbel
</snippet></ROW><ROW><id>16004583</id><snippet>speed 9600 baud; line = 0;
min = 0; time = 0;
-brkint -icrnl -imaxbel
-opost
-isig -icanon -iexten -echo -echoe -echok -echoctl -echoke
</snippet></ROW><ROW><id>16004583</id><snippet>stty -F /dev/ttyAMA0 -isig
stty -F /dev/ttyAMA0 -icanon
</snippet></ROW><ROW><id>16004611</id><snippet>set</snippet></ROW><ROW><id>16004611</id><snippet>if not d.viewkeys() &amp; {'amount', 'name'}:
    raise ValueError
</snippet></ROW><ROW><id>16004611</id><snippet>if not d.keys() &amp; {'amount', 'name'}:
    raise ValueError
</snippet></ROW><ROW><id>16004611</id><snippet>.keys()</snippet></ROW><ROW><id>16004611</id><snippet>.viewkeys()</snippet></ROW><ROW><id>16004611</id><snippet>.keys()</snippet></ROW><ROW><id>16004611</id><snippet>&gt;&gt;&gt; d = {
...   'name': 'name',
...   'date': 'date',
...   'amount': 'amount',
... }
&gt;&gt;&gt; not d.viewkeys() &amp; {'amount', 'name'}
False
&gt;&gt;&gt; del d['name']
&gt;&gt;&gt; not d.viewkeys() &amp; {'amount', 'name'}
False
&gt;&gt;&gt; del d['amount']
&gt;&gt;&gt; not d.viewkeys() &amp; {'amount', 'name'}
True
</snippet></ROW><ROW><id>16004611</id><snippet>if not d.viewkeys() &gt;= {'amount', 'name'}:
    raise ValueError
</snippet></ROW><ROW><id>16004611</id><snippet>&gt;&gt;&gt; d = {
...   'name': 'name',
...   'date': 'date',
...   'amount': 'amount',
... }
&gt;&gt;&gt; not d.viewkeys() &gt;= {'amount', 'name'}
False
&gt;&gt;&gt; del d['amount']
&gt;&gt;&gt; not d.viewkeys() &gt;= {'amount', 'name'})
True
</snippet></ROW><ROW><id>16004611</id><snippet>if d.keys() != ['amount', 'name']:
    raise ValueError
</snippet></ROW><ROW><id>16004663</id><snippet>    if (z&gt;0 and math.sqrt(z)): ...
</snippet></ROW><ROW><id>16004663</id><snippet>z &gt; 0</snippet></ROW><ROW><id>16004663</id><snippet>math.sqrt(z)</snippet></ROW><ROW><id>16004663</id><snippet>scipy.sqrt()</snippet></ROW><ROW><id>16004663</id><snippet>&gt;&gt;&gt; import scipy as sp
&gt;&gt;&gt; sp.sqrt(-1)
1j
</snippet></ROW><ROW><id>16004826</id><snippet>intA=input("Integer A: ")
intB=input("Integer B: ")
</snippet></ROW><ROW><id>16004826</id><snippet>intA=int(input("Integer A: "))
intB=int(input("Integer B: "))
</snippet></ROW><ROW><id>16005056</id><snippet>x.remove</snippet></ROW><ROW><id>16005056</id><snippet>for number in x</snippet></ROW><ROW><id>16005056</id><snippet>for</snippet></ROW><ROW><id>16005056</id><snippet>in</snippet></ROW><ROW><id>16005351</id><snippet>self.thread</snippet></ROW><ROW><id>16005351</id><snippet>
    def run(self):
        # start the worker thread
        self.thread = QtCore.QThread(&lt;b&gt;self&lt;/b&gt;)
        self.worker = Worker()
        self.worker.moveToThread(self.thread)
        QtCore.QObject.connect(self.thread, QtCore.SIGNAL('started()'), self.worker.process)
        QtCore.QObject.connect(self.worker, QtCore.SIGNAL('finished()'), self.thread.quit)
        QtCore.QObject.connect(self.worker, QtCore.SIGNAL('finished()'), self.worker.deleteLater)
        QtCore.QObject.connect(self.thread, QtCore.SIGNAL('finished()'), self.thread.deleteLater)
        self.thread.start()
</snippet></ROW><ROW><id>16005351</id><snippet>class Worker(QtCore.QObject):
    def __init__(self):
        QtCore.QObject.__init__(self)

    def process(self):
        # dummy worker process
        self.flag = False
        for n in range(0, 10):
            if self.flag:
                print 'stop'
                break
            print 'process {}'.format(n)
            time.sleep(0.5)
        self.finished.emit()

    finished = QtCore.pyqtSignal()

class Dialog(QtGui.QDialog):
    def __init__(self, parent=None):
        QtGui.QDialog.__init__(self, parent)
        self.init_ui()

    def init_ui(self):
        self.layout = QtGui.QVBoxLayout(self)
        self.btn_run = QtGui.QPushButton('Run', self)
        self.layout.addWidget(self.btn_run)
        self.btn_cancel = QtGui.QPushButton('Cancel', self)
        self.layout.addWidget(self.btn_cancel)

        QtCore.QObject.connect(self.btn_run, QtCore.SIGNAL('clicked()'), self.run)
        QtCore.QObject.connect(self.btn_cancel, QtCore.SIGNAL('clicked()'), self.reject)

        QtCore.QObject.connect(self, QtCore.SIGNAL('rejected()'), self.stop_worker)

        self.show()
        self.raise_()

    def stop_worker(self):
        print 'stop'
        self.worker.flag = True

    def run(self):
        # start the worker thread
        self.thread = QtCore.QThread(self)
        self.worker = Worker()
        self.worker.moveToThread(self.thread)
        QtCore.QObject.connect(self.thread, QtCore.SIGNAL('started()'), self.worker.process)
        QtCore.QObject.connect(self.worker, QtCore.SIGNAL('finished()'), self.thread.quit)
        QtCore.QObject.connect(self.worker, QtCore.SIGNAL('finished()'), self.worker.deleteLater)
        QtCore.QObject.connect(self.thread, QtCore.SIGNAL('finished()'), self.thread.deleteLater)
        self.thread.start()
</snippet></ROW><ROW><id>16005405</id><snippet>__get__</snippet></ROW><ROW><id>16005405</id><snippet>import types

class E(object):
    def __get__(self,obj,cls):

        def returned(*args):
            print(obj.__dict__)
        return types.MethodType(returned, obj, cls)
</snippet></ROW><ROW><id>16005441</id><snippet>def goodEnough(guess, x):
    return abs((x - (guess * guess))) &lt;= .01 #change this value to make the function more or less accurate
</snippet></ROW><ROW><id>16005441</id><snippet>def newGuess(guess, x):
    return (guess + guess/x)/2
</snippet></ROW><ROW><id>16005441</id><snippet>def root(guess, x):
    if goodEnough(guess, x):
        return guess
    else:
        return root(newGuess(guess, x), x)
</snippet></ROW><ROW><id>16005441</id><snippet>def sqrt(x):
    return root(x/2, x) #x/2 is usually somewhat close to the square root of a number
</snippet></ROW><ROW><id>16005676</id><snippet>        pic1 = graphics.getPixel(x,y)
        pic2 = graphics.setPixel(X-x,y)
</snippet></ROW><ROW><id>16005676</id><snippet>        pic1 = img.getPixel(x,y)
        pic2 = img.setPixel(X-x,y)
</snippet></ROW><ROW><id>16005870</id><snippet>with open("file.txt", 'r') as f:
    lines = f.readlines()
    current_line_index = 0
    next_line = lines[current_line_index + 1]
    print next_line
</snippet></ROW><ROW><id>16005870</id><snippet>import csv

word_list = []
number_list = []

with open("file.txt", 'r') as f:
    reader = csv.reader(f)
    for line in reader:
        if line[0].strip().isdigit():
            number_list.append(line)
        else:
            word_list.append(line)

print number_list
print word_list
</snippet></ROW><ROW><id>16005944</id><snippet>pivot_table</snippet></ROW><ROW><id>16005944</id><snippet>&gt;&gt;&gt; df
   A  B  C
a  1  1  3
b  1  2  4
c  2  1  5
d  2  2  6
&gt;&gt;&gt; pd.pivot_table(df, rows="A", cols="B", values="C")
B  1  2
A      
1  3  4
2  5  6
</snippet></ROW><ROW><id>16005995</id><snippet>href="{{ ulr.url|urlize }}"
</snippet></ROW><ROW><id>16006187</id><snippet>def alfa(j,k):
    return AJ(j,k) - (BJ(j,k)*gamma(j,k))
def gamma(j,k):
    return npy.matrix.I((alfa(g,k))*CJ(g,k))
</snippet></ROW><ROW><id>16006187</id><snippet>alfa</snippet></ROW><ROW><id>16006187</id><snippet>gamma</snippet></ROW><ROW><id>16006187</id><snippet>alfa</snippet></ROW><ROW><id>16006187</id><snippet>gamma</snippet></ROW><ROW><id>16006187</id><snippet>def alfa(j,k):
    print 'alfa({},{}) called'.format(j,k)
    return AJ(j,k) - (BJ(j,k)*gamma(j,k))
def gamma(j,k):
    print 'gamma({},{}) called'.format(j,k)
    return npy.matrix.I((alfa(g,k))*CJ(g,k))
</snippet></ROW><ROW><id>16006187</id><snippet>In [199]: alfa(3,1)
alfa(3,1) called
gamma(3,1) called
alfa(2,1) called
gamma(2,1) called
alfa(2,1) called
gamma(2,1) called
alfa(2,1) called
gamma(2,1) called
alfa(2,1) called
gamma(2,1) called
alfa(2,1) called
gamma(2,1) called
alfa(2,1) called
gamma(2,1) called
alfa(2,1) called
gamma(2,1) called
alfa(2,1) called
gamma(2,1) called
alfa(2,1) called
gamma(2,1) called
alfa(2,1) called
gamma(2,1) called
alfa(2,1) called
gamma(2,1) called
alfa(2,1) called
gamma(2,1) called
</snippet></ROW><ROW><id>16006296</id><snippet>os.rename</snippet></ROW><ROW><id>16006296</id><snippet>os.renames</snippet></ROW><ROW><id>16006296</id><snippet>dest_dir = '/home/xxxx/public_html/xxxx.com/test/uploads/'
os.rename(dest_dir + fn, dest_dir + 'equations.txt')
</snippet></ROW><ROW><id>16006296</id><snippet>os.renames('/home/xxxx/public_html/xxxx.com/test/uploads/' + fn, 'equations.txt')
</snippet></ROW><ROW><id>16006326</id><snippet>def Flip(image1, image2):
    img = graphics.Image(graphics.Point(0, 0), image1)
    X = img.getWidth()
    Y = img.getHeight()
    for y in range(Y):
        for x in range(X):
            A = img.getPixel(x,y)
            r = A[0]
            g = A[1]
            b = A[2]
            color = graphics.color_rgb(r,g,b)
</snippet></ROW><ROW><id>16006326</id><snippet>            r, g, b = img.getPixel(x,y)
            color = graphics.color_rgb(r,g,b)

            img.setPixel(X-x,y,color)
</snippet></ROW><ROW><id>16006326</id><snippet>img</snippet></ROW><ROW><id>16006326</id><snippet>X-x</snippet></ROW><ROW><id>16006326</id><snippet>X-x = 100 - 0 = 100</snippet></ROW><ROW><id>16006326</id><snippet>    img = graphics.Image(graphics.Point(0,0), image2)
</snippet></ROW><ROW><id>16006326</id><snippet>img</snippet></ROW><ROW><id>16006326</id><snippet>    win = graphics.GraphWin(image2, img.getWidth(), img.getHeight())
    img.draw(win)
</snippet></ROW><ROW><id>16006326</id><snippet>import graphics
import sys

def Flip(image_filename):
    img_src = graphics.Image(graphics.Point(0, 0), image_filename)
    img_dst = img_src.clone()
    X, Y = img_src.getWidth(), img_src.getHeight()
    for x in range(X):
        for y in range(Y):
            r, g, b = img_src.getPixel(x, y)
            color = graphics.color_rgb(r, g, b)
            img_dst.setPixel(X-x-1, y, color)

    return img_dst

if __name__ == '__main__':
    input = sys.argv[1] or 'my_image.ppm'
    output = 'mirror-%s' % input
    img = Flip (input)
    img.save(output)
</snippet></ROW><ROW><id>16006326</id><snippet>Flip</snippet></ROW><ROW><id>16006326</id><snippet>def Flip(image_filename):
    img = graphics.Image(graphics.Point(0, 0), image_filename)
    X, Y = img.getWidth(), img.getHeight()
    for x in range(X/2):
        for y in range(Y):
            r_1, g_1, b_1 = img.getPixel(x, y)
            color_1 = graphics.color_rgb(r_1, g_1, b_1)

            r_2, g_2, b_2 = img.getPixel(X-x-1, y)
            color_2 = graphics.color_rgb(r_2, g_2, b_2)

            img.setPixel(X-x-1, y, color_1)
            img.setPixel(x, y, color_2)

    return img
</snippet></ROW><ROW><id>16006418</id><snippet>return dell(2,k) (2,1) 
</snippet></ROW><ROW><id>16006418</id><snippet>return dell(2, k)[1,1]
</snippet></ROW><ROW><id>16006418</id><snippet>[]</snippet></ROW><ROW><id>16006418</id><snippet>()</snippet></ROW><ROW><id>16006418</id><snippet>[row, col]</snippet></ROW><ROW><id>16006418</id><snippet>[1,1]</snippet></ROW><ROW><id>16006418</id><snippet>In [201]: a = npy.array([[1,2],[3,4]])

In [202]: a
Out[202]: 
array([[1, 2],
       [3, 4]])

In [203]: a[1,1]
Out[203]: 4

In [204]: a[0,0]
Out[204]: 1

In [205]: a[0,1]
Out[205]: 2
</snippet></ROW><ROW><id>16006418</id><snippet># the first row
In [206]: a[0]
Out[206]: array([1, 2])

# the second row
In [207]: a[1]
Out[207]: array([3, 4])

# the second column
In [208]: a[:,1]         # the : gives all rows here, the 1 gets second column
Out[208]: array([2, 4])

# the first row again, using a `:` even though it's not required
In [209]: a[0,:]         # here the : gives all columns (it can be left off as in line 206)
Out[209]: array([1, 2])
</snippet></ROW><ROW><id>16006719</id><snippet>updateFileName(filename, "sixty", reset=True)
updateFileName(filename, "sixty", decrease=True)
updateFileName(filename, "sixty")
</snippet></ROW><ROW><id>16006719</id><snippet>import fileinput
def updateFileName(filename, input_value, decrease=False, reset=False):
    try:
        for line in fileinput.input(filename, inplace=True):
            key, value = line.split(",")
            if key == input_value:
                if decrease:
                    sys.stdout.write("%s,%s"(key, int(value) - 1)
                elif reset:
                    sys.stdout.write("%s,%s"(key, 1)
                else:
                    sys.stdout.write("%s,%s"(key, int(value) + 1)
                continue
            sys.stdout.write(line)

    finally:
        fileinput.close()
</snippet></ROW><ROW><id>16006794</id><snippet>GtkNotebook</snippet></ROW><ROW><id>16006794</id><snippet>GtkBuilder</snippet></ROW><ROW><id>16006794</id><snippet>GtkBox</snippet></ROW><ROW><id>16006850</id><snippet>func(*args)</snippet></ROW><ROW><id>16006850</id><snippet>func(arg1, arg2, arg3, ...)</snippet></ROW><ROW><id>16006850</id><snippet>args</snippet></ROW><ROW><id>16006850</id><snippet>[x]</snippet></ROW><ROW><id>16006850</id><snippet>func(x)</snippet></ROW><ROW><id>16006850</id><snippet>build_opener(YandexCertHandler())</snippet></ROW><ROW><id>16006850</id><snippet>import json
import requests

# name and path to files with the secret key and certificate
KEYFILE = '/path/to/private.key'
CERTFILE = '/path/to/cert.crt' 

# address for sending JSON requests
url = 'https://api.direct.yandex.ru/json-api/v4/'

# input data structure (dictionary)
data = {
   'method': 'GetClientInfo',
   'param': ['agrom'],
   'locale': 'en'
}

# convert the dictionary to JSON format and change encoding to UTF-8
jdata = json.dumps(data, ensure_ascii=False).encode('utf-8')

response = requests.post(url, data=jdata, cert=(CERTFILE, KEYFILE))

print(response.content)
</snippet></ROW></DATA>