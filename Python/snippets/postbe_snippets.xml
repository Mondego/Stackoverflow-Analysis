<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>7365021</id><snippet>import collections
data = collections.defaultdict(list)

for n, d in zip(name, date):
    data[n].append(d)
</snippet></ROW><ROW><id>7365305</id><snippet>'/'</snippet></ROW><ROW><id>7365305</id><snippet>script: /dailybasic.py</snippet></ROW><ROW><id>7365305</id><snippet>- url: /dailybasic/.*
  script: dailybasic.py
  login: admin
</snippet></ROW><ROW><id>7365343</id><snippet>&gt;&gt;&gt; print 'Soci\u00E9t\u00E9'
Soci\u00E9t\u00E9           #ewwwwwww
&gt;&gt;&gt; print u'Soci\u00E9t\u00E9'
Société                     #yay!!!
</snippet></ROW><ROW><id>7365350</id><snippet>os.system</snippet></ROW><ROW><id>7365350</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>7365350</id><snippet>commands = ['pdflatex','bibtex','pdflatex','pdflatex']

for command in commands:
    subprocess.call((command, src_file)) 
</snippet></ROW><ROW><id>7365480</id><snippet>for item in list:
    if item != list[-1]:
        #Do stuff
</snippet></ROW><ROW><id>7365805</id><snippet>[(1.0,1.0), (2.0,3.0), (3.0,1.0)]</snippet></ROW><ROW><id>7365805</id><snippet>(2-1,3-1,0) = (1,2,0)</snippet></ROW><ROW><id>7365805</id><snippet>(3-1,1-1,0) = (2,0,0)</snippet></ROW><ROW><id>7365805</id><snippet>(1,2,0) x (2,0,0) = (0,0,0-4) = (0,0,-4)
</snippet></ROW><ROW><id>7365805</id><snippet>import numpy as  np
np.cross([1,2,0],[2,0,0])
# array([ 0,  0, -4])
</snippet></ROW><ROW><id>7365805</id><snippet>[(1.0,1.0), (2.0,3.0), (1.0,2.0)]</snippet></ROW><ROW><id>7365805</id><snippet>(2-1,3-1,0) = (1,2,0)</snippet></ROW><ROW><id>7365805</id><snippet>(1-1,2-1,0) = (0,1,0)</snippet></ROW><ROW><id>7365805</id><snippet>np.cross([1,2,0],[0,1,0])
# array([0, 0, 1])
</snippet></ROW><ROW><id>7365805</id><snippet>(y2-y1)*(x2-x1) - (y3-y1)*(x2-x1)
</snippet></ROW><ROW><id>7366263</id><snippet>setattr(self, attribute_name, int(tokens[1])</snippet></ROW><ROW><id>7366263</id><snippet>attribute_dict = dict(cols="width", rows="height", turntime="turntime", ...)
[...]
value = int(tokens[1])
if key == "player_seed":
    random.seed(value)
else:
    setattr(self, attribute_dict[key], value)
</snippet></ROW><ROW><id>7366342</id><snippet>x = data['list_price'].astype('int64')
</snippet></ROW><ROW><id>7366342</id><snippet>y</snippet></ROW><ROW><id>7366342</id><snippet>csv2rec</snippet></ROW><ROW><id>7366342</id><snippet>converterd</snippet></ROW><ROW><id>7366578</id><snippet>PYTHONPATH=. python tests/ex47_tests.py
</snippet></ROW><ROW><id>7366607</id><snippet>#!/usr/bin/python
</snippet></ROW><ROW><id>7366607</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>7366844</id><snippet>parser.add_argument('path', nargs=1, help='File path to process')
</snippet></ROW><ROW><id>7366874</id><snippet>r"(?P&lt;name&gt;[A-Za-z\t .]+)"
</snippet></ROW><ROW><id>7366874</id><snippet>\s</snippet></ROW><ROW><id>7366985</id><snippet>&lt;C-n&gt;</snippet></ROW><ROW><id>7366985</id><snippet>&lt;C-x&gt;&lt;C-o&gt;</snippet></ROW><ROW><id>7366985</id><snippet>&lt;C-n&gt;</snippet></ROW><ROW><id>7366985</id><snippet>&lt;C-p&gt;</snippet></ROW><ROW><id>7366985</id><snippet>&lt;C-x&gt;&lt;C-o&gt;</snippet></ROW><ROW><id>7367031</id><snippet>data = {
 'jan': ['John Smith', 'Cat Stevens', 'Andrew Alexander', 'El Gordo Baba'],
 'feb': ['Louis le Roy', 'John Smith'],
 'mar': ['Cat Stevens', 'Louis le Roy']
}

from itertools import izip

keys = 'jan feb mar'.split()
for m1,m2 in izip(keys,keys[1:]):
    a = set(data[m1])
    b = set(data[m2])
    print m1, '\n\tsubscribed:', ','.join(b-a), '\n\tquit:', ','.join(a - b )
</snippet></ROW><ROW><id>7367031</id><snippet>jan 
    subscribed: Louis le Roy 
    quit: Andrew Alexander,Cat Stevens,El Gordo Baba
feb 
    subscribed: Cat Stevens 
    quit: John Smith
</snippet></ROW><ROW><id>7367034</id><snippet>find(letter, word, startindex)</snippet></ROW><ROW><id>7367034</id><snippet>&gt;&gt;&gt; find('red blue', 'd', 0) # starts at index 0 and finds 'd' at index 2
2
&gt;&gt;&gt; find('red blue', 'd', 3) # starts at index 3 and finds no d's
-1
&gt;&gt;&gt; find('red blue', 'e', 3) # starts at index 3, so misses the 'e' at index 1
7
</snippet></ROW><ROW><id>7367289</id><snippet>3</snippet></ROW><ROW><id>7367388</id><snippet>blog_list = Blog.objects.filter( town__country__country_name = 'Canada' ).order_by( '-id' )
</snippet></ROW><ROW><id>7367420</id><snippet>PlayerStat.objects.order_by('receiving_yards')[:5]
</snippet></ROW><ROW><id>7367420</id><snippet>PlayerStat.objects.order_by('receiving_yards,receptions,receiving_touchdowns')[:5]
</snippet></ROW><ROW><id>7367688</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; output = subprocess.check_output(['echo', '640x360'])
&gt;&gt;&gt; print output
640x360
</snippet></ROW><ROW><id>7367688</id><snippet>&gt;&gt;&gt; p = subprocess.Popen(['echo', '640x360'], stdout=subprocess.PIPE)
&gt;&gt;&gt; p.communicate()
('640x360\n', None)
</snippet></ROW><ROW><id>7368066</id><snippet>re.sub(r"(\{\{foobar[^\}]*)thisoption ?= ?xxx", r"\1thisoption = abc", string)
</snippet></ROW><ROW><id>7368207</id><snippet>on Ubuntu 11.04 in order to have proper indentation and syntax highlighting</snippet></ROW><ROW><id>7368308</id><snippet>dict()</snippet></ROW><ROW><id>7368308</id><snippet>dict()</snippet></ROW><ROW><id>7368308</id><snippet>(key, value)</snippet></ROW><ROW><id>7368308</id><snippet>key = value</snippet></ROW><ROW><id>7368308</id><snippet>&gt;&gt;&gt; input = {'key1': 'value1', 'key2': 'value2'}
&gt;&gt;&gt; type(input)
&lt;type 'dict'&gt;
&gt;&gt;&gt; dict(input)
{'key2': 'value2', 'key1': 'value1'}
&gt;&gt;&gt; input = "{'key1': 'value1', 'key2': 'value2'}" # This is your 2nd form.
&gt;&gt;&gt; type(input)
&lt;type 'str'&gt;
&gt;&gt;&gt; dict(input)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: dictionary update sequence element #0 has length 1; 2 is required
</snippet></ROW><ROW><id>7368308</id><snippet>dict()</snippet></ROW><ROW><id>7368323</id><snippet>import mako.runtime
mako.runtime.UNDEFINED = ''
</snippet></ROW><ROW><id>7368323</id><snippet>class Undefined(object):
    """Represents an undefined value in a template.

    All template modules have a constant value 
    ``UNDEFINED`` present which is an instance of this
    object.

    """
    def __str__(self):
        raise NameError("Undefined")
    def __nonzero__(self):
        return False
</snippet></ROW><ROW><id>7368512</id><snippet>&gt;&gt;&gt; print s.replace(',', '\t')
a    b    c    d
</snippet></ROW><ROW><id>7368512</id><snippet>repr(s.replace(',', '\t'))</snippet></ROW><ROW><id>7368512</id><snippet>repr()</snippet></ROW><ROW><id>7368512</id><snippet>&gt;&gt;&gt; print s.replace(',', (' '*4))
a    b    c    d
</snippet></ROW><ROW><id>7368553</id><snippet>system</snippet></ROW><ROW><id>7368639</id><snippet>m</snippet></ROW><ROW><id>7368639</id><snippet>[x() for x in [lambda m=m: m for m in [1,2,3]]]
# [1, 2, 3]
</snippet></ROW><ROW><id>7368639</id><snippet>m</snippet></ROW><ROW><id>7368639</id><snippet>m</snippet></ROW><ROW><id>7368677</id><snippet>@rocksportrocker repr(album.title.text) returns str:
'\xd0\x92\xd0\xb8\xd0\xb4 \xd0\xb8\xd0\xb7 \xd0\xbe\xd0\xba\xd0\xbd\xd0\xb0'
</snippet></ROW><ROW><id>7368677</id><snippet>@d-k Yep, I've tried it. The result is the same.
For example repr(album.title.text.encode('utf-8')) returns str:
'\xd0\x92\xd0\xb8\xd0\xb4 \xd0\xb8\xd0\xb7 \xd0\xbe\xd0\xba\xd0\xbd\xd0\xb0'
</snippet></ROW><ROW><id>7368677</id><snippet>UnicodeDecodeError: 'ascii' codec can't decode byte 0xd0 in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>7368677</id><snippet>str</snippet></ROW><ROW><id>7368677</id><snippet>&gt;&gt;&gt; foo = '\xd0\x92\xd0\xb8\xd0\xb4 \xd0\xb8\xd0\xb7 \xd0\xbe\xd0\xba\xd0\xbd\xd0\xb0'
&gt;&gt;&gt; from unicodedata import name
&gt;&gt;&gt; for uc in foo.decode('utf8'):
...     print "U+%04X" % ord(uc), name(uc)
...
U+0412 CYRILLIC CAPITAL LETTER VE
U+0438 CYRILLIC SMALL LETTER I
U+0434 CYRILLIC SMALL LETTER DE
U+0020 SPACE
U+0438 CYRILLIC SMALL LETTER I
U+0437 CYRILLIC SMALL LETTER ZE
U+0020 SPACE
U+043E CYRILLIC SMALL LETTER O
U+043A CYRILLIC SMALL LETTER KA
U+043D CYRILLIC SMALL LETTER EN
U+0430 CYRILLIC SMALL LETTER A
&gt;&gt;&gt;
</snippet></ROW><ROW><id>7368677</id><snippet>&gt;&gt;&gt; bar =  '\xd0\x9e\xd1\x81\xd0\xb5\xd0\xbd\xd1\x8c\Autumnal-Equinox.jpg'
&gt;&gt;&gt; for uc in bar.decode('utf8'):
...     print "U+%04X" % ord(uc), name(uc)
...
U+041E CYRILLIC CAPITAL LETTER O
U+0441 CYRILLIC SMALL LETTER ES
U+0435 CYRILLIC SMALL LETTER IE
U+043D CYRILLIC SMALL LETTER EN
U+044C CYRILLIC SMALL LETTER SOFT SIGN
U+005C REVERSE SOLIDUS
U+0041 LATIN CAPITAL LETTER A
U+0075 LATIN SMALL LETTER U
U+0074 LATIN SMALL LETTER T
# snipped the remainder
</snippet></ROW><ROW><id>7368677</id><snippet>&gt;&gt;&gt; bar =  '\xd0\x9e\xd1\x81\xd0\xb5\xd0\xbd\xd1\x8c.txt'
&gt;&gt;&gt; ubar = bar.decode('utf8')
&gt;&gt;&gt; print repr(ubar)
u'\u041e\u0441\u0435\u043d\u044c.txt'
&gt;&gt;&gt; f = open(ubar, 'wb')
&gt;&gt;&gt; f.write('hello\n')
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; open(ubar, 'rb').read()
'hello\n'
</snippet></ROW><ROW><id>7368801</id><snippet>results = map(int, results)
</snippet></ROW><ROW><id>7368826</id><snippet>def api_response(request):
    try:
        data=json.loads(request.raw_post_data)
        label=data['label']
        url=data['url']
        print label, url
    except:
        print 'nope'
    return HttpResponse('')
</snippet></ROW><ROW><id>7369284</id><snippet>dict.fromkeys(my_csv_dict.keys(),[])</snippet></ROW><ROW><id>7369284</id><snippet>unsure_rows = None
for row in csv_reader:
#   if row['Start Time'] != 'None':
    try:
        if before_date &gt; strptime(row['Start Time'], '%Y-%m-%d %H:%M:%S') &gt; after_date:
            continue
    except ValueError:
        if not unsure_rows:
            # Initialize the unsure rows dictionary
            unsure_rows = dict.fromkeys(csv_reader.fieldnames,[])
        for key in unsure_rows:
            unsure_rows[key].append(row[key])
</snippet></ROW><ROW><id>7369491</id><snippet>from boto.s3.key import Key
k=Key(bucket)
k.key='cli-images/image-thumb.jpg'
k.copy('bucketname', 'cli-images/moved/image-thumb.jpg')
k.delete()
</snippet></ROW><ROW><id>7369651</id><snippet>$ convert -append photo1.jpg photo2.jpg photo3.jpg row1.jpg
</snippet></ROW><ROW><id>7369651</id><snippet>$ convert +append row1.jpg row2.jpg row3.jpg a4.jpg
</snippet></ROW><ROW><id>7369810</id><snippet>factory = SMPPClientFactory(self.config, self.msgHandler)</snippet></ROW><ROW><id>7369986</id><snippet>import re
import numpy

def read_pgm(filename, byteorder='&gt;'):
    """Return image data from a raw PGM file as numpy array.

    Format specification: http://netpbm.sourceforge.net/doc/pgm.html

    """
    with open(filename, 'rb') as f:
        buffer = f.read()
    try:
        header, width, height, maxval = re.search(
            b"(^P5\s(?:\s*#.*[\r\n])*"
            b"(\d+)\s(?:\s*#.*[\r\n])*"
            b"(\d+)\s(?:\s*#.*[\r\n])*"
            b"(\d+)\s(?:\s*#.*[\r\n]\s)*)", buffer).groups()
    except AttributeError:
        raise ValueError("Not a raw PGM file: '%s'" % filename)
    return numpy.frombuffer(buffer,
                            dtype='u1' if int(maxval) &lt; 256 else byteorder+'u2',
                            count=int(width)*int(height),
                            offset=len(header)
                            ).reshape((int(height), int(width)))


if __name__ == "__main__":
    from matplotlib import pyplot
    image = read_pgm("foo.pgm", byteorder='&lt;')
    pyplot.imshow(image, pyplot.cm.gray)
    pyplot.show()
</snippet></ROW><ROW><id>7370327</id><snippet>ast.literal_eval(node_or_string)</snippet></ROW><ROW><id>7370353</id><snippet>read()</snippet></ROW><ROW><id>7370353</id><snippet>read()</snippet></ROW><ROW><id>7370353</id><snippet>read()</snippet></ROW><ROW><id>7370353</id><snippet>'\n'</snippet></ROW><ROW><id>7370353</id><snippet>os.read()</snippet></ROW><ROW><id>7370353</id><snippet>read()</snippet></ROW><ROW><id>7370353</id><snippet>read()</snippet></ROW><ROW><id>7370353</id><snippet>read()</snippet></ROW><ROW><id>7370353</id><snippet>read()</snippet></ROW><ROW><id>7370353</id><snippet>file.readline()</snippet></ROW><ROW><id>7370353</id><snippet>iter(file)</snippet></ROW><ROW><id>7370353</id><snippet>read()</snippet></ROW><ROW><id>7370353</id><snippet>iter(file.readline, '')</snippet></ROW><ROW><id>7370548</id><snippet>class MainSearchForm(FacetedSearchForm):

    def search(self):

        query = self.cleaned_data['q']
        g = geocoders.Google()
        place, (lat, lng) = g.geocode('%s' % query)
        pnt = fromstr('POINT(%s %s)' % (lng, lat), srid=4326)
</snippet></ROW><ROW><id>7370548</id><snippet>        sqs = RelatedSearchQuerySet().load_all()
        sqs = sqs.load_all_queryset(Listing, 
                                    Listing.objects.filter(location__distance_lte=(pnt, D(mi=20))))
        return sqs
</snippet></ROW><ROW><id>7371083</id><snippet>from django.views.generic.base import View

class MyView(View):

    def get(self, request, *args, **kwargs):
        # return a response here

    def post(self, request, *args, **kwargs):
        # return a response here
</snippet></ROW><ROW><id>7371083</id><snippet>View</snippet></ROW><ROW><id>7371083</id><snippet>TemplateView</snippet></ROW><ROW><id>7371083</id><snippet>FormView</snippet></ROW><ROW><id>7371218</id><snippet>/tmp</snippet></ROW><ROW><id>7371218</id><snippet>chmod a+t</snippet></ROW><ROW><id>7371254</id><snippet>None</snippet></ROW><ROW><id>7371254</id><snippet>def save_file(self, outputfilename=None): 
    if outputfilename is None:
        outputfilename = self.image_filename
    self.file.read(outputfilename)
    ....
</snippet></ROW><ROW><id>7371521</id><snippet>{surprise : "perturbating at start  ", game:Available Universal Dices Game,
    player:FTROE875574,location
:"Lakeview School, Kingsmere Boulevard, Saskatoon, Saskatchewan , Canada",time:15h18}

{"game":"Available","   player":"LOI4531",
"location":  "Perth, Australia","time":"08h13","date":"Available"}

{"game":Available,player:PLLI874,location:"Chelsea, London, England",time:20h35}

{special:"midnight happening",game:"Available","player":YTR44,
"location":"Paris, France","time":"02h24"
,
"date":"Available"}

{game:Available,surprise:"  hretyuuhuhu  ",player:FT875,location
:,"time":11h22}

{"game":"Available","player":"LOI4531","location":
"Damas,Syria","time":"unavailable","date":"Available"}

{"surprise   " : GARAMANANATALA Tower ,  game:Available Dices,player  :
  PuLuLu874,location:"  Westminster, London, England  ",time:20h01}

{"game":"Available",special:"overnight",   "player":YTR44,"location":
"Madrid, Spain"    ,     "time":
"12h33",
date:"Available"
}
</snippet></ROW><ROW><id>7371521</id><snippet>import re

dicreg = re.compile('(?&lt;=\{)[^}]*}')

kvregx = re.compile('[ \r\n]*'
                    '(" *)?((location)|[^:]+?)(?(1) *")'
                    '[ \r\n]*'
                    ':'
                    '[ \r\n]*'
                    '(?(3)|(" *)?)([^:]*?)(?(4) *")'
                    '[ \r\n]*(?:,(?=[^,]+?:)|\})')


checking_dict = {}
checking_list = []

filename = 'zzz.txt'

with open(filename) as f:

    ######## First part: to gather all the keys in all the dictionaries

    prec,chunk = '','go'
    ecr = []
    while chunk:
        chunk = f.read(120)
        ss = ''.join((prec,chunk))
        ecr.append('\n\n------------------------------------------------------------\nss   == %r' %ss)
        mat_dic = None
        for mat_dic in dicreg.finditer(ss):
            ecr.append('\nmmmmmmm dictionary found in ss mmmmmmmmmmmmmm')
            for mat_kv in kvregx.finditer(mat_dic.group()):
                k,v = mat_kv.group(2,5)
                ecr.append('%s  :  %s' % (k,v))
                if k in checking_list:
                    checking_dict[k] += 1
                else:
                    checking_list.append(k)
                    checking_dict[k] = 1
        if mat_dic:
            prec = ss[mat_dic.end():]
        else:
            prec += chunk

    print '\n'.join(ecr)
    print '\n\n\nchecking_dict == %s\n\nchecking_list        == %s' %(checking_dict,checking_list)

    ######## The keys are sorted in order that the less frequent ones are at the end
    checking_list.sort(key=lambda k: checking_dict[k], reverse=True)
    posis = dict((k,i) for i,k in enumerate(checking_list))
    print '\nchecking_list sorted == %s\n\nposis == %s' % (checking_list,posis)



    ######## Now, the file is read again to build a list of rows 

    f.seek(0,0)  # the file's pointer is move backed to the beginning of the file

    prec,chunk = '','go'
    base = [ '' for i in xrange(len(checking_list))]
    rows = []
    while chunk:
        chunk = f.read(110)
        ss = ''.join((prec,chunk))
        mat_dic = None
        for mat_dic in dicreg.finditer(ss):
            li = base[:]
            for mat_kv in kvregx.finditer(mat_dic.group()):
                k,v = mat_kv.group(2,5)
                li[posis[k]] = v
            rows.append(li)
        if mat_dic:
            prec = ss[mat_dic.end():]
        else:
            prec += chunk


    print '\n\n%s\n%s' % (checking_list,30*'___')
    print '\n'.join(str(li) for li in rows)
</snippet></ROW><ROW><id>7371521</id><snippet>------------------------------------------------------------
ss   == '{surprise : "perturbating at start  ", game:Available Universal Dices Game,\n    player:FTROE875574,location\n:"Lakeview S'


------------------------------------------------------------
ss   == '{surprise : "perturbating at start  ", game:Available Universal Dices Game,\n    player:FTROE875574,location\n:"Lakeview School, Kingsmere Boulevard, Saskatoon, Saskatchewan , Canada",time:15h18}\n\n{"game":"Available","   player":"LOI4531",\n"l'

mmmmmmm dictionary found in ss mmmmmmmmmmmmmm
surprise  :  perturbating at start
game  :  Available Universal Dices Game
player  :  FTROE875574
location  :  "Lakeview School, Kingsmere Boulevard, Saskatoon, Saskatchewan , Canada"
time  :  15h18


------------------------------------------------------------
ss   == '\n\n{"game":"Available","   player":"LOI4531",\n"location":  "Perth, Australia","time":"08h13","date":"Available"}\n\n{"game":Available,player:PLLI874,location:"Chelsea, Lo'

mmmmmmm dictionary found in ss mmmmmmmmmmmmmm
game  :  Available
player  :  LOI4531
location  :  "Perth, Australia"
time  :  08h13
date  :  Available


------------------------------------------------------------
ss   == '\n\n{"game":Available,player:PLLI874,location:"Chelsea, London, England",time:20h35}\n\n{special:"midnight happening",game:"Available","player":YTR44,\n"location":"Paris, France","t'

mmmmmmm dictionary found in ss mmmmmmmmmmmmmm
game  :  Available
player  :  PLLI874
location  :  "Chelsea, London, England"
time  :  20h35


------------------------------------------------------------
ss   == '\n\n{special:"midnight happening",game:"Available","player":YTR44,\n"location":"Paris, France","time":"02h24"\n,\n"date":"Available"}\n\n{game:Available,surprise:"  hretyuuhuhu  ",player:FT875,location\n:,"time":11h22}\n\n{"'

mmmmmmm dictionary found in ss mmmmmmmmmmmmmm
special  :  midnight happening
game  :  Available
player  :  YTR44
location  :  "Paris, France"
time  :  02h24
date  :  Available

mmmmmmm dictionary found in ss mmmmmmmmmmmmmm
game  :  Available
surprise  :  hretyuuhuhu
player  :  FT875
location  :  
time  :  11h22


------------------------------------------------------------
ss   == '\n\n{"game":"Available","player":"LOI4531","location":\n"Damas,Syria","time":"unavailable","date":"Available"}\n\n{"surprise   " '

mmmmmmm dictionary found in ss mmmmmmmmmmmmmm
game  :  Available
player  :  LOI4531
location  :  "Damas,Syria"
time  :  unavailable
date  :  Available


------------------------------------------------------------
ss   == '\n\n{"surprise   " : GARAMANANATALA Tower ,  game:Available Dices,player  :\n  PuLuLu874,location:"  Westminster, London, England  ",time:20'


------------------------------------------------------------
ss   == '\n\n{"surprise   " : GARAMANANATALA Tower ,  game:Available Dices,player  :\n  PuLuLu874,location:"  Westminster, London, England  ",time:20h01}\n\n{"game":"Available",special:"overnight",   "player":YTR44,"location":\n"Madrid, Spain"    ,     "time":\n"12h33",\nda'

mmmmmmm dictionary found in ss mmmmmmmmmmmmmm
surprise  :  GARAMANANATALA Tower
game  :  Available Dices
player  :  PuLuLu874
location  :  "  Westminster, London, England  "
time  :  20h01


------------------------------------------------------------
ss   == '\n\n{"game":"Available",special:"overnight",   "player":YTR44,"location":\n"Madrid, Spain"    ,     "time":\n"12h33",\ndate:"Available"\n}'

mmmmmmm dictionary found in ss mmmmmmmmmmmmmm
game  :  Available
special  :  overnight
player  :  YTR44
location  :  "Madrid, Spain"
time  :  12h33
date  :  Available


------------------------------------------------------------
ss   == ''



checking_dict == {'player': 8, 'game': 8, 'location': 8, 'time': 8, 'date': 4, 'surprise': 3, 'special': 2}

checking_list        == ['surprise', 'game', 'player', 'location', 'time', 'date', 'special']

checking_list sorted == ['game', 'player', 'location', 'time', 'date', 'surprise', 'special']

posis == {'player': 1, 'game': 0, 'location': 2, 'time': 3, 'date': 4, 'surprise': 5, 'special': 6}


['game', 'player', 'location', 'time', 'date', 'surprise', 'special']
__________________________________________________________________________________________
['Available Universal Dices Game', 'FTROE875574', '"Lakeview School, Kingsmere Boulevard, Saskatoon, Saskatchewan , Canada"', '15h18', '', 'perturbating at start', '']
['Available', 'LOI4531', '"Perth, Australia"', '08h13', 'Available', '', '']
['Available', 'PLLI874', '"Chelsea, London, England"', '20h35', '', '', '']
['Available', 'YTR44', '"Paris, France"', '02h24', 'Available', '', 'midnight happening']
['Available', 'FT875', '', '11h22', '', 'hretyuuhuhu', '']
['Available', 'LOI4531', '"Damas,Syria"', 'unavailable', 'Available', '', '']
['Available Dices', 'PuLuLu874', '"  Westminster, London, England  "', '20h01', '', 'GARAMANANATALA Tower', '']
['Available', 'YTR44', '"Madrid, Spain"', '12h33', 'Available', '', 'overnight']
</snippet></ROW><ROW><id>7371521</id><snippet>while chunk:
    chunk = f.read(120)
    ss = ''.join((prec,chunk))
    ecr.append('\n\n------------------------------------------------------------\nss   == %r' %ss)
    mat_dic = None
    for mat_dic in dicreg.finditer(ss):
        ............
        ...............
    if mat_dic:
        prec = ss[mat_dic.end():]
    else:
        prec += chunk
</snippet></ROW><ROW><id>7371521</id><snippet>import re

dicreg = re.compile('(?&lt;=\{)[^}]*}')

kvregx = re.compile('[ \r\n]*'
                    '(" *)?((location)|[^:]+?)(?(1) *")'
                    '[ \r\n]*'
                    ':'
                    '[ \r\n]*'
                    '(?(3)|(" *)?)([^:]*?)(?(4) *")'
                    '[ \r\n]*(?:,(?=[^,]+?:)|\})')


checking_dict = {}
checking_list = []

filename = 'zzz.txt'

with open(filename) as f:
    content = f.read()




######## First part: to gather all the keys in all the dictionaries

ecr = []

for mat_dic in dicreg.finditer(content):
    ecr.append('\nmmmmmmm dictionary found in ss mmmmmmmmmmmmmm')
    for mat_kv in kvregx.finditer(mat_dic.group()):
        k,v = mat_kv.group(2,5)
        ecr.append('%s  :  %s' % (k,v))
        if k in checking_list:
            checking_dict[k] += 1
        else:
            checking_list.append(k)
            checking_dict[k] = 1


print '\n'.join(ecr)
print '\n\n\nchecking_dict == %s\n\nchecking_list        == %s' %(checking_dict,checking_list)

######## The keys are sorted in order that the less frequent ones are at the end
checking_list.sort(key=lambda k: checking_dict[k], reverse=True)
posis = dict((k,i) for i,k in enumerate(checking_list))
print '\nchecking_list sorted == %s\n\nposis == %s' % (checking_list,posis)



######## Now, the file is read again to build a list of rows 


base = [ '' for i in xrange(len(checking_list))]
rows = []

for mat_dic in dicreg.finditer(content):
    li = base[:]
    for mat_kv in kvregx.finditer(mat_dic.group()):
        k,v = mat_kv.group(2,5)
        li[posis[k]] = v
    rows.append(li)


print '\n\n%s\n%s' % (checking_list,30*'___')
print '\n'.join(str(li) for li in rows)
</snippet></ROW><ROW><id>7371851</id><snippet>def f(x,poslist):
  v = 0
  for pos in poslist:
    v += 1/((x-pos)*(x-pos))
  return v
</snippet></ROW><ROW><id>7371851</id><snippet>def addterm(f, pos):
  def g(x):
    return f(x)+1/((x-pos)*(x-pos))
  return g

def zero(x): return 0
f = zero
for pos in poslist:
  f=addterm(f, pos)
</snippet></ROW><ROW><id>7371971</id><snippet>s='aAaBbcCdE'
sorted(s, lambda x,y: cmp(x.lower(), y.lower()) or cmp(x,y))
</snippet></ROW><ROW><id>7372077</id><snippet>slice__</snippet></ROW><ROW><id>7372077</id><snippet>Main.objects.filter(subs__name__exists=True).fields(slice__subs=[0,2])
</snippet></ROW><ROW><id>7372167</id><snippet>nums = [1, 2]
f = open("file", "r")
source = f.read()
f.close()
out = open("file", "w")
for line in source.splitlines():
    found = False
    for n in nums:
        if line.find(str(n)) &gt; -1:
            found = True
            break
    if found:
        continue
    out.write(line+"\n")
out.close()
</snippet></ROW><ROW><id>7372246</id><snippet>import  glob, shutil, os.path

# glob.glob returns a list with all pathes according to the given pattern 
for path in glob.glob("music_folder/*.mp3"):

     # os.path.dirname gives the directory name, here it is "music_folder"
     dirname = os.path.dirname(path)

     # example: 01_artist_name_-_album_title_-_song_title_somethingelse.mp3
     # split returns "_song_title_somethingelse.mp3"
     interesting = path.split("-")[2]

     # titlepart is a list with ["song", "title"], the beginning "_" and the
     # 'somehting' string is removed by choosing the slice 1:-1
     titlepart = interesting.split("_")[1:-1]

     # capitalize converts song -&gt; Song, title -&gt; title
     # join gluest both to "Song_Title"
     new_name = "_".join(p.capitalize() for p in titlepart)+".mp3"

     # shutil.move renames the given file
     shutil.move(path, os.path.join(dirname, new_name))
</snippet></ROW><ROW><id>7372246</id><snippet>     m=re.search(".*-_(\S+_\S+)_.*",path)
     if m is None:
        raise Exception("file name does not match regular expression")
     song_name = m.groups()[0]
     titlepart = song_name.split("_")
</snippet></ROW><ROW><id>7372443</id><snippet>static</snippet></ROW><ROW><id>7372443</id><snippet>private</snippet></ROW><ROW><id>7372443</id><snippet>final</snippet></ROW><ROW><id>7372651</id><snippet>import subprocess
subprocess.call(['java', '-jar', 'Blender.jar'])
</snippet></ROW><ROW><id>7372651</id><snippet>/proc/sys/fs/binfmt_misc/jar</snippet></ROW><ROW><id>7372678</id><snippet>numpy.newaxis</snippet></ROW><ROW><id>7372678</id><snippet>&gt;&gt;&gt; from numpy import zeros, newaxis
&gt;&gt;&gt; a = zeros((6, 8))
&gt;&gt;&gt; a.shape
(6, 8)
&gt;&gt;&gt; b = a[:, :, newaxis]
&gt;&gt;&gt; b.shape
(6, 8, 1)
</snippet></ROW><ROW><id>7372678</id><snippet>&gt;&gt;&gt; b = a[..., newaxis]
&gt;&gt;&gt; b.shape
(6, 8, 1)
</snippet></ROW><ROW><id>7372717</id><snippet>__del__</snippet></ROW><ROW><id>7372717</id><snippet>Browser</snippet></ROW><ROW><id>7372717</id><snippet>ui</snippet></ROW><ROW><id>7372717</id><snippet>Browser</snippet></ROW><ROW><id>7372717</id><snippet>def __init__(self, parent):
    ...
    for item in menuitems:
        entry = menu.addAction(item)
    menu.triggered.connect(self.doStuff)

def doStuff(self, entry):
    print entry.text()
</snippet></ROW><ROW><id>7372812</id><snippet>xls</snippet></ROW><ROW><id>7372812</id><snippet>xlsx</snippet></ROW><ROW><id>7372812</id><snippet>xlsx</snippet></ROW><ROW><id>7372812</id><snippet>xls</snippet></ROW><ROW><id>7372812</id><snippet>xlsx</snippet></ROW><ROW><id>7372816</id><snippet>responseType</snippet></ROW><ROW><id>7372816</id><snippet>XMLHttpRequest</snippet></ROW><ROW><id>7372816</id><snippet>arraybuffer</snippet></ROW><ROW><id>7372816</id><snippet>function base64ArrayBuffer(arrayBuffer) {
  var base64    = ''
  var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

  var bytes         = new Uint8Array(arrayBuffer)
  var byteLength    = bytes.byteLength
  var byteRemainder = byteLength % 3
  var mainLength    = byteLength - byteRemainder

  var a, b, c, d
  var chunk

  // Main loop deals with bytes in chunks of 3
  for (var i = 0; i &lt; mainLength; i = i + 3) {
    // Combine the three bytes into a single integer
    chunk = (bytes[i] &lt;&lt; 16) | (bytes[i + 1] &lt;&lt; 8) | bytes[i + 2]

    // Use bitmasks to extract 6-bit segments from the triplet
    a = (chunk &amp; 16515072) &gt;&gt; 18 // 16515072 = (2^6 - 1) &lt;&lt; 18
    b = (chunk &amp; 258048)   &gt;&gt; 12 // 258048   = (2^6 - 1) &lt;&lt; 12
    c = (chunk &amp; 4032)     &gt;&gt;  6 // 4032     = (2^6 - 1) &lt;&lt; 6
    d = chunk &amp; 63               // 63       = 2^6 - 1

    // Convert the raw binary segments to the appropriate ASCII encoding
    base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d]
  }

  // Deal with the remaining bytes and padding
  if (byteRemainder == 1) {
    chunk = bytes[mainLength]

    a = (chunk &amp; 252) &gt;&gt; 2 // 252 = (2^6 - 1) &lt;&lt; 2

    // Set the 4 least significant bits to zero
    b = (chunk &amp; 3)   &lt;&lt; 4 // 3   = 2^2 - 1

    base64 += encodings[a] + encodings[b] + '=='
  } else if (byteRemainder == 2) {
    chunk = (bytes[mainLength] &lt;&lt; 8) | bytes[mainLength + 1]

    a = (chunk &amp; 64512) &gt;&gt; 10 // 64512 = (2^6 - 1) &lt;&lt; 10
    b = (chunk &amp; 1008)  &gt;&gt;  4 // 1008  = (2^6 - 1) &lt;&lt; 4

    // Set the 2 least significant bits to zero
    c = (chunk &amp; 15)    &lt;&lt;  2 // 15    = 2^4 - 1

    base64 += encodings[a] + encodings[b] + encodings[c] + '='
  }

  return base64
}
</snippet></ROW><ROW><id>7372816</id><snippet>var xhr = new XMLHttpRequest();
xhr.open('GET', 'http://some.tld/favicon.png', false);
xhr.responseType = 'arraybuffer';
xhr.onload = function(e) {
    console.log(base64ArrayBuffer(e.currentTarget.response));
};
xhr.send();
</snippet></ROW><ROW><id>7372816</id><snippet>ArrayBuffer</snippet></ROW><ROW><id>7372816</id><snippet>btoa()</snippet></ROW><ROW><id>7372816</id><snippet>function getBinary(file){
    var xhr = new XMLHttpRequest();
    xhr.open("GET", file, false);
    xhr.overrideMimeType("text/plain; charset=x-user-defined");
    xhr.send(null);
    return xhr.responseText;
}

function base64Encode(str) {
    var CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var out = "", i = 0, len = str.length, c1, c2, c3;
    while (i &lt; len) {
        c1 = str.charCodeAt(i++) &amp; 0xff;
        if (i == len) {
            out += CHARS.charAt(c1 &gt;&gt; 2);
            out += CHARS.charAt((c1 &amp; 0x3) &lt;&lt; 4);
            out += "==";
            break;
        }
        c2 = str.charCodeAt(i++);
        if (i == len) {
            out += CHARS.charAt(c1 &gt;&gt; 2);
            out += CHARS.charAt(((c1 &amp; 0x3)&lt;&lt; 4) | ((c2 &amp; 0xF0) &gt;&gt; 4));
            out += CHARS.charAt((c2 &amp; 0xF) &lt;&lt; 2);
            out += "=";
            break;
        }
        c3 = str.charCodeAt(i++);
        out += CHARS.charAt(c1 &gt;&gt; 2);
        out += CHARS.charAt(((c1 &amp; 0x3) &lt;&lt; 4) | ((c2 &amp; 0xF0) &gt;&gt; 4));
        out += CHARS.charAt(((c2 &amp; 0xF) &lt;&lt; 2) | ((c3 &amp; 0xC0) &gt;&gt; 6));
        out += CHARS.charAt(c3 &amp; 0x3F);
    }
    return out;
}

console.log(base64Encode(getBinary('http://www.google.fr/images/srpr/logo3w.png')));
</snippet></ROW><ROW><id>7372830</id><snippet>perl -p -i -e 's/old_text/new_text/g' file1 file2 ...
</snippet></ROW><ROW><id>7372914</id><snippet>def main_app_config(config):

    config.add_route('image_upload', '/admin/image_upload/', 
    view='mainapp.views.uploader',
    view_renderer='/site/upload.mako')
</snippet></ROW><ROW><id>7372914</id><snippet>from my.main.app import main_app_config

# do your new application Configurator setup, etc.
# then "include" it.

config.include(main_app_config)

# continue on with your new app configuration
</snippet></ROW><ROW><id>7373249</id><snippet>operator.attrgetter()</snippet></ROW><ROW><id>7373707</id><snippet>tools.auth_basic.checkpassword =  Infrastructure.App.Authentication.FindPassword
</snippet></ROW><ROW><id>7373707</id><snippet>@staticmethod
def FindPassword(realm, username, password):
    print realm
    print username
    print password
    return "password"
</snippet></ROW><ROW><id>7373889</id><snippet>from mapreduce import operation as op  
def process(entity):
    entity.small = None
    yield op.db.Put(entity)  
</snippet></ROW><ROW><id>7373946</id><snippet>None</snippet></ROW><ROW><id>7373946</id><snippet>None</snippet></ROW><ROW><id>7373946</id><snippet>def f(x):
    if (x&lt;10):
        return f(x+1)
return x
</snippet></ROW><ROW><id>7374184</id><snippet>class Movement(EntityComponent):
    def __init__(self):
        # Default values
        self.speed = 0
        self.acceleration = 0

    serializable_fields = [
        ('speed', int),
        ('acceleration', int)
    ]

def load(object, source):
    for name, field_type in object.serialiable_fields: 
        settarr(object, name, field_type(source[name]))

def save(object):
    target = PropertyTree()
    for name, field_type in object.serializable_fields:
         target[name] = str(getattr(object, name))
    return target
</snippet></ROW><ROW><id>7374385</id><snippet>combomethod</snippet></ROW><ROW><id>7374385</id><snippet>class A:
    def __init__(self):
        self.data = 'instance'

    @combomethod 
    def foo(param):
        if isinstance(param, A):
            print("This is an " + param.data + " method.")
        elif param is A:
            print("This is a class method.")

&gt;&gt;&gt; a = A()
&gt;&gt;&gt; A.foo
&lt;function foo at 0x00CFE810&gt;
&gt;&gt;&gt; a.foo
&lt;function foo at 0x00CFE858&gt;

&gt;&gt;&gt; A.foo()
This is a class method.
&gt;&gt;&gt; a.foo()
This is an instance method.
</snippet></ROW><ROW><id>7374385</id><snippet>&gt;&gt;&gt; A.foo is A.foo
False
&gt;&gt;&gt; a.foo is a.foo
False
</snippet></ROW><ROW><id>7374385</id><snippet>foo</snippet></ROW><ROW><id>7374385</id><snippet>_wrapper</snippet></ROW><ROW><id>7374385</id><snippet>&gt;&gt;&gt; A.foo.__code__.co_name
'_wrapper'
</snippet></ROW><ROW><id>7374385</id><snippet>self.method</snippet></ROW><ROW><id>7374385</id><snippet>&gt;&gt;&gt; print(*zip(A.foo.__code__.co_freevars, A.foo.__closure__), sep='\n')
('obj', &lt;cell at 0x011983F0: NoneType object at 0x1E1DF8F4&gt;)
('self', &lt;cell at 0x01198530: combomethod object at 0x00D29630&gt;)
('objtype', &lt;cell at 0x00D29D10: type object at 0x01196858&gt;)
</snippet></ROW><ROW><id>7374385</id><snippet>&gt;&gt;&gt; print(*zip(a.foo.__code__.co_freevars, a.foo.__closure__), sep='\n')
('obj', &lt;cell at 0x01198570: A object at 0x00D29FD0&gt;)
('self', &lt;cell at 0x01198530: combomethod object at 0x00D29630&gt;)
('objtype', &lt;cell at 0x00D29D10: type object at 0x01196858&gt;)
</snippet></ROW><ROW><id>7374385</id><snippet>&gt;&gt;&gt; A.foo.__closure__[1].cell_contents.method
&lt;function foo at 0x00D1CB70&gt;
&gt;&gt;&gt; A.foo.__closure__[1].cell_contents.method.__code__.co_name
'foo'
</snippet></ROW><ROW><id>7374385</id><snippet>_wrapper</snippet></ROW><ROW><id>7374385</id><snippet>self.method</snippet></ROW><ROW><id>7374385</id><snippet>if obj is not None:
    return self.method(obj, *args, **kwargs)
else:
    return self.method(objtype, *args, **kwargs)
</snippet></ROW><ROW><id>7374586</id><snippet>a=((5,10,32,35), (64,76,23,53)) 
</snippet></ROW><ROW><id>7374586</id><snippet>for i in a:
     print i[0]
</snippet></ROW><ROW><id>7374586</id><snippet>elements=[i[0] for i in a]

avg=sum(elements)/float(len(elements))
</snippet></ROW><ROW><id>7374648</id><snippet>from google.appengine.api import urlfetch, taskqueue, users, images
</snippet></ROW><ROW><id>7374648</id><snippet>from google.appengine import api
</snippet></ROW><ROW><id>7374648</id><snippet>from google.appengine import api as gaeapi
</snippet></ROW><ROW><id>7374716</id><snippet>TypeError: unbound method ... must be called with ... instance as first argument (got ... instance instead)</snippet></ROW><ROW><id>7374716</id><snippet>.setter</snippet></ROW><ROW><id>7374716</id><snippet>property</snippet></ROW><ROW><id>7374716</id><snippet>class Table(object):
    '''A CSV backed SQL table.'''
    @property
    def fieldnames(self):
        with open(self.filename) as f:
            return csv.DictReader(f).fieldnames

    @fieldnames.setter # &lt;&lt;&lt;
    def fieldnames(self, fieldnames):
        with open(self.filename, 'w') as f:
            dr = csv.reader(f)
            dw = csv.DictWriter(f, fieldnames=fieldnames)
            dw.writerow(dict((field, field) for field in fieldnames))
            for row in self:
                dw.writerow(row)
</snippet></ROW><ROW><id>7374784</id><snippet>p1 = Popen(["dmesg"], stdout=PIPE)
p2 = Popen(["grep", "hda"], stdin=p1.stdout, stdout=PIPE)
p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.
output = p2.communicate()[0]
</snippet></ROW><ROW><id>7374784</id><snippet>import subprocess
import shlex
import re
url='http://url/1video.mp4'
proc=subprocess.Popen(shlex.split('ffmpeg -i {f}'.format(f=url)),
                      stdout=subprocess.PIPE,
                      stderr=subprocess.PIPE)
dimensions=None
for line in proc.stderr:
    match=re.search(r'(\d+x\d+)',line)
    if match:
        dimensions=match.group(1)
        break
print(dimensions)
</snippet></ROW><ROW><id>7374811</id><snippet>class MyObject(object):
    # This is a normal attribute
    foo = 1

    @property
    def bar(self):
        return self.foo

    @bar.setter
    def bar(self, value):
        self.foo = value


obj = MyObject()
assert obj.foo == 1
assert obj.bar == obj.foo
obj.bar = 2
assert obj.foo == 2
assert obj.bar == obj.foo
</snippet></ROW><ROW><id>7374849</id><snippet>list.__str__</snippet></ROW><ROW><id>7374849</id><snippet>repr</snippet></ROW><ROW><id>7374849</id><snippet>str</snippet></ROW><ROW><id>7374849</id><snippet>&gt;&gt;&gt; str(1.6)
'1.6'
&gt;&gt;&gt; repr(1.6)
'1.6000000000000001'
</snippet></ROW><ROW><id>7374849</id><snippet>&gt;&gt;&gt; 1.6 == 1.6000000000000001
True
</snippet></ROW><ROW><id>7374949</id><snippet>table</snippet></ROW><ROW><id>7374949</id><snippet>import re

table={}
with open('synonyms','r') as syn:
    for line in syn:
        match=re.match(r'(\w+)\s+=\s+(.+)',line)
        if match:
            primary,synonyms=match.groups()
            synonyms=[synonym.lower() for synonym in synonyms.split()]
            for synonym in synonyms:
                table[synonym]=primary.lower()

print(table)
</snippet></ROW><ROW><id>7374949</id><snippet>{'word3_1': 'word3', 'word3_3': 'word3', 'word3_2': 'word3', 'contr': 'contracting', 'contract': 'contracting', 'contractor': 'contracting', 'contra': 'contracting', 'identify': 'identification', 'contractors': 'contracting', 'word3_n': 'word3', 'ID': 'identification'}
</snippet></ROW><ROW><id>7374949</id><snippet>table</snippet></ROW><ROW><id>7374949</id><snippet>with open('textfile','r') as f:
    for line in f:
        print(''.join(table.get(word.lower(),word) 
                      for word in re.findall(r'(\W+|\w+)',line)))
</snippet></ROW><ROW><id>7374949</id><snippet>identification     identification    identity   contracting     contracting     contracting   medicine   medicine  medicine
</snippet></ROW><ROW><id>7374949</id><snippet>re.findall(r'(\w+|\W+)',line)</snippet></ROW><ROW><id>7374949</id><snippet>line</snippet></ROW><ROW><id>7374949</id><snippet>line.split()</snippet></ROW><ROW><id>7374949</id><snippet>table.get(word,word)</snippet></ROW><ROW><id>7374949</id><snippet>table[word]</snippet></ROW><ROW><id>7374949</id><snippet>table</snippet></ROW><ROW><id>7374949</id><snippet>word</snippet></ROW><ROW><id>7374949</id><snippet>word</snippet></ROW><ROW><id>7374949</id><snippet>table</snippet></ROW><ROW><id>7375053</id><snippet>import json

x='''{"Field": [{"Name": "health", "Value": 100}, {"Name": "toxicity", "Value": 78}],
    "Name": "life",
    "Class": "hero.attributes.Life"}'''

attribute=json.loads(x)

# {u'Class': u'hero.attributes.Life',
#  u'Field': [{u'Name': u'health', u'Value': 100},
#             {u'Name': u'toxicity', u'Value': 78}],
#  u'Name': u'life'}
</snippet></ROW><ROW><id>7375053</id><snippet>attr=json.dumps(attribute)
</snippet></ROW><ROW><id>7375621</id><snippet>Table</snippet></ROW><ROW><id>7375621</id><snippet>class Classic: pass
class NewStyle(object): pass

print(dir(Classic))
# ['__doc__', '__module__']

print(dir(NewStyle))
# ['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']
</snippet></ROW><ROW><id>7375621</id><snippet>class Foo(Base1, Base2):
</snippet></ROW><ROW><id>7375621</id><snippet>Foo</snippet></ROW><ROW><id>7375621</id><snippet>Base1</snippet></ROW><ROW><id>7375621</id><snippet>Base2</snippet></ROW><ROW><id>7375621</id><snippet>object</snippet></ROW><ROW><id>7375621</id><snippet>object</snippet></ROW><ROW><id>7375621</id><snippet>Table</snippet></ROW><ROW><id>7375716</id><snippet>import time, logging as log
from celery.task import task
from celery.task.sets import TaskSet
from app import Entry

@task(send_error_emails=True)
def long_running_analysis():
    entries = list(Entry.objects.all().values('id'))
    num_entries = len(entries)
    taskset = TaskSet(analyse_entry.subtask(entry.id) for entry in entries)
    results = taskset.apply_async()
    while not results.ready()
        time.sleep(10000)
        print log.info("long_running_analysis is %d% complete",
                       completed_count()*100/num_entries)
    if results.failed():
        log.error("Analysis Failed!")
    result_set = results.join() # brings back results in 
                                # the order of entries
    #perform collating or count or percentage calculations here
    log.error("Analysis Complete!")

@task
def analyse_entry(id): # inputs must be serialisable
    logger = analyse_entry.get_logger()
    entry = Entry.objects.get(id=id)
    try:
        analysis = entry.analyse()
        logger.info("'%s' found to be %s.", entry, analysis['status'])
        return analysis # must be a dict or serialisable.
    except Exception as e:
        logger.error("Could not process '%s': %s", entry, e)
        return None 
</snippet></ROW><ROW><id>7375721</id><snippet>while row_down &gt; 1:
</snippet></ROW><ROW><id>7375721</id><snippet>1</snippet></ROW><ROW><id>7375721</id><snippet>c1</snippet></ROW><ROW><id>7375721</id><snippet>c1(3)</snippet></ROW><ROW><id>7375721</id><snippet>c1('3')</snippet></ROW><ROW><id>7375721</id><snippet>3 &gt; '1'
# False
</snippet></ROW><ROW><id>7375721</id><snippet>i</snippet></ROW><ROW><id>7375721</id><snippet>s</snippet></ROW><ROW><id>7375721</id><snippet>'3' - 1
# TypeError: unsupported operand type(s) for +: 'int' and 'str'
</snippet></ROW><ROW><id>7375721</id><snippet>c1('3')</snippet></ROW><ROW><id>7375807</id><snippet>treeFunction = lambda x,y: mult(2, add(x, y))
</snippet></ROW><ROW><id>7375807</id><snippet>treeFunction(2, 3)
</snippet></ROW><ROW><id>7376026</id><snippet>a_list[1:1] = b_list
</snippet></ROW><ROW><id>7376026</id><snippet>my_extend</snippet></ROW><ROW><id>7376026</id><snippet>list</snippet></ROW><ROW><id>7376026</id><snippet>def my_extend(self, other_list, index):
    self[index:index] = other_list
</snippet></ROW><ROW><id>7376116</id><snippet>import</snippet></ROW><ROW><id>7376116</id><snippet>gdata</snippet></ROW><ROW><id>7376116</id><snippet>gdata.docs.client</snippet></ROW><ROW><id>7376116</id><snippet>import</snippet></ROW><ROW><id>7376116</id><snippet>import gdata.docs.client
</snippet></ROW><ROW><id>7376362</id><snippet>Fraction</snippet></ROW><ROW><id>7376362</id><snippet>1 + fractions.Fraction('1/2')</snippet></ROW><ROW><id>7376362</id><snippet>def convert(f):
    whole, frac = f.split()
    return int(whole) + fractions.Fraction(frac)
</snippet></ROW><ROW><id>7376436</id><snippet>brew install python</snippet></ROW><ROW><id>7376436</id><snippet>brew install mysql</snippet></ROW><ROW><id>7376436</id><snippet>python setup.py install</snippet></ROW><ROW><id>7376436</id><snippet>python</snippet></ROW><ROW><id>7376436</id><snippet>import _mysql</snippet></ROW><ROW><id>7376436</id><snippet>which python</snippet></ROW><ROW><id>7376436</id><snippet>libmysqlclient.18.dylib</snippet></ROW><ROW><id>7376436</id><snippet>/usr/local/Cellar/mysql/5.5.14/lib</snippet></ROW><ROW><id>7376436</id><snippet>DYLD_LIBRARY_PATH</snippet></ROW><ROW><id>7376436</id><snippet>export DYLD_LIBRARY_PATH="$DYLD_LIBRARY_PATH:/usr/local/Cellar/mysql/5.5.14/lib"</snippet></ROW><ROW><id>7376721</id><snippet>import numpy as np
import  matplotlib.pyplot as plt

def generate_x_y(prob_map):
    s = prob_map.shape
    x, y = np.meshgrid(np.arange(s[0]), np.arange(s[1]))
    return x.ravel(), y.ravel()

def heatmap(prob_map):
    x, y = generate_x_y(prob_map)
    plt.figure()
    plt.hexbin(x, y, C=prob_map.ravel())

probs = np.random.rand(200, 200)
heatmap(probs)
plt.show()
</snippet></ROW><ROW><id>7376721</id><snippet>probs = np.random.rand(200, 200)
heatmap(probs)
plt.show()
</snippet></ROW><ROW><id>7376895</id><snippet>def func(fruwappah, qitzy=None):
    if fruwappah:
        fruit_cake = 'plain'
    else:
        fruit_cake = qitzy
    frosting = 'orange'
</snippet></ROW><ROW><id>7376895</id><snippet>fruwappah</snippet></ROW><ROW><id>7376895</id><snippet>qitzy</snippet></ROW><ROW><id>7376895</id><snippet>fruit_cake</snippet></ROW><ROW><id>7376895</id><snippet>frosting</snippet></ROW><ROW><id>7376895</id><snippet>self</snippet></ROW><ROW><id>7376895</id><snippet>del traceback_object</snippet></ROW><ROW><id>7376930</id><snippet>lib-dynload</snippet></ROW><ROW><id>7376930</id><snippet>easy_install -a readline</snippet></ROW><ROW><id>7377009</id><snippet>google.appengine.api.images.Image</snippet></ROW><ROW><id>7377009</id><snippet>flux = img.read() # From your request

image_ref = Image(image_data=flux)
w = image_ref.width
h = image_ref.height
</snippet></ROW><ROW><id>7377681</id><snippet>$&gt; telnet www.bkstr.com 80
Trying 64.37.224.85...
Connected to www.bkstr.com.
Escape character is '^]'.
GET /webapp/wcs/stores/servlet/CourseMaterialsResultsView?catalogId=10001&amp;categoryId=9604&amp;storeId=10161&amp;langId=-1&amp;programId=562&amp;termId=100020629&amp;divisionDisplayName=Stanford&amp;departmentDisplayName=ILAC&amp;courseDisplayName=126&amp;sectionDisplayName=01&amp;demoKey=d&amp;purpose=browse HTTP/1.0

Connection closed by foreign host.
</snippet></ROW><ROW><id>7377681</id><snippet>import cookielib, urllib2

cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
#Need to set a cookie
opener.open("http://www.bkstr.com/")
#Now open the page we want
data = opener.open("http://www.bkstr.com/webapp/wcs/stores/servlet/CourseMaterialsResultsView?catalogId=10001&amp;categoryId=9604&amp;storeId=10161&amp;langId=-1&amp;programId=562&amp;termId=100020629&amp;divisionDisplayName=Stanford&amp;departmentDisplayName=ILAC&amp;courseDisplayName=126&amp;sectionDisplayName=01&amp;demoKey=d&amp;purpose=browse").read()
</snippet></ROW><ROW><id>7377777</id><snippet>a=sys.argv[1]
_,a=sys.argv
</snippet></ROW><ROW><id>7377777</id><snippet>_,a,b,c,d,e,f=sys.argv
</snippet></ROW><ROW><id>7377777</id><snippet>__import__</snippet></ROW><ROW><id>7377777</id><snippet>from sys import argv as v
v=__import__('sys').argv
</snippet></ROW><ROW><id>7378144</id><snippet>user_version</snippet></ROW><ROW><id>7378144</id><snippet>cur.execute( "PRAGMA user_version = {v:d}".format(v=version) )
</snippet></ROW><ROW><id>7378144</id><snippet>{v:d}</snippet></ROW><ROW><id>7378144</id><snippet>version</snippet></ROW><ROW><id>7378294</id><snippet>exec</snippet></ROW><ROW><id>7378294</id><snippet>exec</snippet></ROW><ROW><id>7378294</id><snippet>lambda</snippet></ROW><ROW><id>7378294</id><snippet>lambda</snippet></ROW><ROW><id>7378294</id><snippet>&gt;&gt;&gt; d = {
...      'a': lambda: 5 + 5,
...      'b': lambda: 10 + 10
...     }
&gt;&gt;&gt; d['a']()
10
</snippet></ROW><ROW><id>7378313</id><snippet>itertools.combinations</snippet></ROW><ROW><id>7378313</id><snippet>&gt;&gt;&gt; list(itertools.combinations((1, 2, 3), 2))
[(1, 2), (1, 3), (2, 3)]
</snippet></ROW><ROW><id>7378313</id><snippet>&gt;&gt;&gt; s = set((1, 2, 3))
&gt;&gt;&gt; map(set, itertools.combinations(s, 2))
[set([1, 2]), set([1, 3]), set([2, 3])]
</snippet></ROW><ROW><id>7378316</id><snippet> setattr(Person, 'first_name', 'John')
</snippet></ROW><ROW><id>7378577</id><snippet>db.options_detail.question_id.requires = IS_IN_DB(
    db(db.question.has_options_detail==True), 'question.id')
</snippet></ROW><ROW><id>7378577</id><snippet>requires</snippet></ROW><ROW><id>7378577</id><snippet>Field()</snippet></ROW><ROW><id>7378760</id><snippet>findAll</snippet></ROW><ROW><id>7378760</id><snippet>data[0]</snippet></ROW><ROW><id>7378760</id><snippet>&lt;div&gt;something&lt;/div&gt;</snippet></ROW><ROW><id>7378760</id><snippet>&lt;div&gt;&lt;p&gt;something&lt;/p&gt;&lt;/div&gt;</snippet></ROW><ROW><id>7378760</id><snippet>.contents</snippet></ROW><ROW><id>7378847</id><snippet>def application(environ, start_response):
    # your implementation here
</snippet></ROW><ROW><id>7378847</id><snippet>environ</snippet></ROW><ROW><id>7378847</id><snippet>start_response</snippet></ROW><ROW><id>7378847</id><snippet>response_headers = [('Content-Type', 'text/plain'),
  ('Content-Length', str(len(response_body)))]
</snippet></ROW><ROW><id>7378847</id><snippet>response.headers['Content-Type'] = 'text/plain'
response.headers['Content-Length'] = len(response_body))
</snippet></ROW><ROW><id>7379062</id><snippet>class UpdateManager(object):
  waiters = []
  attrs = []
  other_attrs = []

  @classmethod
  def set_attr(cls, attr):
    cls.attrs.append(attr)

  @classmethod
  def set_other_attr(cls, attr):
    cls.other_attrs.append(attr)

  @classmethod
  def add_callback(cls, cb):
    cls.waiters.append(cb)

  @classmethod
  def send(cls):
    for cb in cls.waiters:
      cb(cls.attrs, cls.other_attrs)
</snippet></ROW><ROW><id>7379062</id><snippet>from update import UpdateManager
UpdateManager.send()
</snippet></ROW><ROW><id>7379303</id><snippet>myinput = myinput.split(",")
</snippet></ROW><ROW><id>7379303</id><snippet>data.append( (int(myinput[0]), int(myinput[1])) )
</snippet></ROW><ROW><id>7379303</id><snippet>for adding in mytuple:
    print("{0:4d}".format(adding[0] + adding[1]))
</snippet></ROW><ROW><id>7379608</id><snippet>import subprocess
import shlex
process = subprocess.Popen(
    shlex.split("""x-terminal-emulator -e 'bash -c "test.py"'"""), stdout=subprocess.PIPE)
process.wait()
print (process.returncode)
</snippet></ROW><ROW><id>7379608</id><snippet>x-terminal-emulator</snippet></ROW><ROW><id>7379626</id><snippet>try:
    #do some things
finally:
    myClass.close()
</snippet></ROW><ROW><id>7379626</id><snippet>myClass.close()</snippet></ROW><ROW><id>7379626</id><snippet>try:
    #do some things
except Exception, error:
    raise # re-raise the original exception
finally:
    myClass.close()
</snippet></ROW><ROW><id>7379788</id><snippet>open</snippet></ROW><ROW><id>7379788</id><snippet>import subprocess

subprocess.call(['/usr/bin/open', '~'])
</snippet></ROW><ROW><id>7379982</id><snippet>a_list += [x for lst in [fun(item) for item in a_list] for x in lst]  
</snippet></ROW><ROW><id>7379982</id><snippet>[fun(item) for item in a_list]
</snippet></ROW><ROW><id>7379982</id><snippet>fun</snippet></ROW><ROW><id>7379982</id><snippet>item</snippet></ROW><ROW><id>7379982</id><snippet>a_list</snippet></ROW><ROW><id>7379982</id><snippet>fun(item)</snippet></ROW><ROW><id>7379982</id><snippet>for lst in [fun(item) for item in a_list]
</snippet></ROW><ROW><id>7379982</id><snippet>[x for lst in [fun(item) for item in a_list] for x in lst]
</snippet></ROW><ROW><id>7379982</id><snippet>x</snippet></ROW><ROW><id>7379982</id><snippet>lst</snippet></ROW><ROW><id>7380021</id><snippet>retCode=1</snippet></ROW><ROW><id>7380442</id><snippet>good_dirs = []
bad_dirs = []

for root, files, dirs in os.walk("/tmp/folder/B03"):
    # this will walk recursively depth first into B03 
    # root will be the pwd, so we can test for that
    if root.count(".") == 1: ###i think aregex here might help
        good_dirs.append(root)
    else:
        bad_dirs.append(root)
</snippet></ROW><ROW><id>7380444</id><snippet>self.fields = dict( key, value for key, value in fields.items()
                     if accept_key(key, data) )
</snippet></ROW><ROW><id>7380493</id><snippet>bytes</snippet></ROW><ROW><id>7380493</id><snippet>str</snippet></ROW><ROW><id>7380493</id><snippet># Python 3
key = bytes([0x13, 0x00, 0x00, 0x00, 0x08, 0x00])

# Python 2
key = ''.join(chr(x) for x in [0x13, 0x00, 0x00, 0x00, 0x08, 0x00])
</snippet></ROW><ROW><id>7380493</id><snippet>base64</snippet></ROW><ROW><id>7380493</id><snippet># Python 3
key = base64.b16decode(b'130000000800')

# Python 2
key = base64.b16decode('130000000800')
</snippet></ROW><ROW><id>7380493</id><snippet># Python 3
key = b'\x13\0\0\0\x08\0'

# Python 2
key = '\x13\0\0\0\x08\0'
</snippet></ROW><ROW><id>7380585</id><snippet>        if not picture.objects.filter(id=form.cleaned_data['ordered_picture']).exists():
</snippet></ROW><ROW><id>7380643</id><snippet>in1d</snippet></ROW><ROW><id>7380643</id><snippet>np.where(np.in1d(foo[:,0], [12, 1, 2]), False, True)
</snippet></ROW><ROW><id>7380643</id><snippet>where</snippet></ROW><ROW><id>7380643</id><snippet>in1d</snippet></ROW><ROW><id>7380643</id><snippet>foo[np.in1d(foo[:,0], [12, 1, 2])]
</snippet></ROW><ROW><id>7380643</id><snippet>foo[~np.in1d(foo[:,0], [12, 1, 2])]
</snippet></ROW><ROW><id>7380643</id><snippet>in1d</snippet></ROW><ROW><id>7380696</id><snippet>import MySQLdb
from lxml import etree
import config

def fast_iter(context, func, args=[], kwargs={}):
    # http://www.ibm.com/developerworks/xml/library/x-hiperfparse/
    # Author: Liza Daly    
    for event, elem in context:
        func(elem, *args, **kwargs)
        elem.clear()
        while elem.getprevious() is not None:
            del elem.getparent()[0]
    del context

def extract_paper_elements(element,cursor):
    pub={}        
    pub['InventoryID']=element.attrib['ID']
    try:
        pub['PublisherClassID']=element.xpath('PublisherClass/@ID')[0]
    except IndexError:
        pub['PublisherClassID']=None
    pub['PublisherClassID']=element.xpath('PublisherClass/@ID')[0]
    for key in ('Name','Type','ID'):
        try:
            pub[key]=element.xpath(
                'PublisherClass/Publisher/PublisherDetails/{k}/text()'.format(k=key))[0]
        except IndexError:
            pub[key]=None
    sql='''INSERT INTO Publishers (InventoryID, PublisherClassID, Name, Type, ID)
           VALUES (%s, %s, %s, %s, %s)
        '''
    args=[pub.get(key) for key in
          ('InventoryID', 'PublisherClassID', 'Name', 'Type', 'ID')]
    print(args)
    # cursor.execute(sql,args)
    for bookdetail in element.xpath('descendant::BookList/Listing/Book/BookDetail'):
        pub['BookDetailID']=bookdetail.attrib['ID']
        for key in ('BookName', 'Author', 'Pages', 'ISBN'):
            try:
                pub[key]=bookdetail.xpath('{k}/text()'.format(k=key))[0]
            except IndexError:
                pub[key]=None
        sql='''INSERT INTO Books
               (PublisherID, BookDetailID, Name, Author, Pages, ISBN)
               VALUES (%s, %s, %s, %s, %s, %s)
            '''           
        args=[pub.get(key) for key in
              ('ID', 'BookDetailID', 'BookName', 'Author', 'Pages', 'ISBN')]
        # cursor.execute(sql,args)
        print(args)


def main():
    context = etree.iterparse("book.xml", events=("end",), tag='Inventory')
    connection=MySQLdb.connect(
        host=config.HOST,user=config.USER,
        passwd=config.PASS,db=config.MYDB)
    cursor=connection.cursor()

    fast_iter(context,extract_paper_elements,args=(cursor,))

    cursor.close()
    connection.commit()
    connection.close()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>7380696</id><snippet>fast_iter2</snippet></ROW><ROW><id>7380696</id><snippet>fast_iter</snippet></ROW><ROW><id>7380696</id><snippet>extract_paper_elements</snippet></ROW><ROW><id>7380696</id><snippet>fast_iter2</snippet></ROW><ROW><id>7380696</id><snippet>tag</snippet></ROW><ROW><id>7380696</id><snippet>etree.iterparse("book.xml",
events=("end",), tag='Inventory')</snippet></ROW><ROW><id>7380696</id><snippet>extract_paper_elements</snippet></ROW><ROW><id>7380696</id><snippet>Inventory</snippet></ROW><ROW><id>7380696</id><snippet>xpath</snippet></ROW><ROW><id>7380696</id><snippet>args</snippet></ROW><ROW><id>7380696</id><snippet>kwargs</snippet></ROW><ROW><id>7380696</id><snippet>fast_iter</snippet></ROW><ROW><id>7380696</id><snippet>cursor</snippet></ROW><ROW><id>7380696</id><snippet>extract_paper_elements</snippet></ROW><ROW><id>7380723</id><snippet>/proc</snippet></ROW><ROW><id>7380723</id><snippet>For status, visit: http://localhost:12345/ 
</snippet></ROW><ROW><id>7380905</id><snippet>bisect</snippet></ROW><ROW><id>7380905</id><snippet>&gt;&gt;&gt; class PrefixCompares(object):
...     def __init__(self, value):
...         self.value = value
...     def __lt__(self, other):
...         return self.value &lt; other[0:len(self.value)]
... 
&gt;&gt;&gt; import bisect
&gt;&gt;&gt; names = ['adam', 'bob', 'bob', 'bob', 'bobby', 'bobert', 'chris']
&gt;&gt;&gt; names.sort()
&gt;&gt;&gt; key = PrefixCompares('bob')
&gt;&gt;&gt; leftIndex = bisect.bisect_left(names, key)
&gt;&gt;&gt; rightIndex = bisect.bisect_right(names, key)
&gt;&gt;&gt; print(names[leftIndex:rightIndex])
['adam', 'bob', 'bob', 'bob', 'bobby', 'bobert']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7380905</id><snippet>&gt;&gt;&gt; class HasPrefix(object):
...     def __init__(self, value):
...         self.value = value
...     def __lt__(self, other):
...         return self.value[0:len(other.value)] &lt; other.value
... 
&gt;&gt;&gt; class Prefix(object):
...     def __init__(self, value):
...         self.value = value
...     def __lt__(self, other):
...         return self.value &lt; other.value[0:len(self.value)]
... 
&gt;&gt;&gt; class AdaptPrefix(object):
...     def __init__(self, seq):
...         self.seq = seq
...     def __getitem__(self, key):
...         return HasPrefix(self.seq[key])
...     def __len__(self):
...         return len(self.seq)
... 
&gt;&gt;&gt; import bisect
&gt;&gt;&gt; names = ['adam', 'bob', 'bob', 'bob', 'bobby', 'bobert', 'chris']
&gt;&gt;&gt; names.sort()
&gt;&gt;&gt; needle = Prefix('bob')
&gt;&gt;&gt; haystack = AdaptPrefix(names)
&gt;&gt;&gt; leftIndex = bisect.bisect_left(haystack, needle)
&gt;&gt;&gt; rightIndex = bisect.bisect_right(haystack, needle)
&gt;&gt;&gt; print(names[leftIndex:rightIndex])
['bob', 'bob', 'bob', 'bobby', 'bobert']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7381190</id><snippet>for i in range(len(mylist)/size_x):
    print(mylist[i*size_x:(i+1)*size_x])
</snippet></ROW><ROW><id>7381190</id><snippet>newlist = []
for i in range(len(mylist)/size_x):
    newlist.append(''.join(mylist[i*size_x:(i+1)*size_x]))
</snippet></ROW><ROW><id>7381190</id><snippet>print('\n'.join(newlist))</snippet></ROW><ROW><id>7381190</id><snippet>xrange()</snippet></ROW><ROW><id>7381190</id><snippet>range()</snippet></ROW><ROW><id>7381190</id><snippet>range()</snippet></ROW><ROW><id>7381190</id><snippet>mylist = list('hello this is supposed to be a long line')
size_x=5
for i in range(len(mylist)/size_x):
    print(mylist[i*size_x:(i+1)*size_x])

['h', 'e', 'l', 'l', 'o']
[' ', 't', 'h', 'i', 's']
[' ', 'i', 's', ' ', 's']
['u', 'p', 'p', 'o', 's']
['e', 'd', ' ', 't', 'o']
[' ', 'b', 'e', ' ', 'a']
[' ', 'l', 'o', 'n', 'g']
[' ', 'l', 'i', 'n', 'e']

newlist = []
for i in range(len(mylist)/size_x):
    newlist.append(''.join(mylist[i*size_x:(i+1)*size_x]))
print('\n'.join(newlist))

hello
 this
 is s
uppos
ed to
 be a
 long
 line
</snippet></ROW><ROW><id>7381199</id><snippet>a</snippet></ROW><ROW><id>7381199</id><snippet>b</snippet></ROW><ROW><id>7381199</id><snippet>c</snippet></ROW><ROW><id>7381199</id><snippet>c</snippet></ROW><ROW><id>7381199</id><snippet>MyClass</snippet></ROW><ROW><id>7381199</id><snippet>self</snippet></ROW><ROW><id>7381199</id><snippet>__d</snippet></ROW><ROW><id>7381199</id><snippet>c</snippet></ROW><ROW><id>7381199</id><snippet>b</snippet></ROW><ROW><id>7381199</id><snippet>__init__</snippet></ROW><ROW><id>7381199</id><snippet>__init__</snippet></ROW><ROW><id>7381199</id><snippet>b</snippet></ROW><ROW><id>7381199</id><snippet>c</snippet></ROW><ROW><id>7381199</id><snippet>__d</snippet></ROW><ROW><id>7381199</id><snippet>b</snippet></ROW><ROW><id>7381199</id><snippet>self</snippet></ROW><ROW><id>7381199</id><snippet>a</snippet></ROW><ROW><id>7381199</id><snippet>MyClass</snippet></ROW><ROW><id>7381221</id><snippet>import urllib, urllib2
from django.http import HttpResponse
from HTMLParser import HTMLParser

class MyHTMLParser(HTMLParser):
    def __init__(self, *args, **kwargs):
        self.capture_data = False
        self.data_list = []
        HTMLParser.__init__(self, *args, **kwargs)

    def handle_starttag(self, tag, attrs):
        if tag == 'td':
            self.capture_data = True

    def handle_endtag(self, tag):
        if tag == 'td':
            self.capture_data = False

    def handle_data(self, data):
        if self.capture_data and data and not data.isspace():
            self.data_list.append(data)

def parse_url(request):
    p = MyHTMLParser()
    url = 'http://www.mysite.com/lists.asp'
    content = urllib.urlopen(url).read()
    p.feed(content)
    return HttpResponse(str(p.data_list))
</snippet></ROW><ROW><id>7381344</id><snippet>random.sample</snippet></ROW><ROW><id>7381344</id><snippet>izvucena = random.sample(spil, 1)[0] # grab only element from list returned
</snippet></ROW><ROW><id>7381344</id><snippet>random.choice</snippet></ROW><ROW><id>7381344</id><snippet>izvucena = random.choice(spil)
</snippet></ROW><ROW><id>7381398</id><snippet>combinedList = [(placeList[i],speakerList[i]) for i in range(4)]

{% for entry in combinedList %}
&lt;tr&gt;
&lt;td&gt;{{ entry.0 }}&lt;/td&gt;
&lt;td&gt;1:30&lt;/td&gt;
&lt;td&gt;{{ entry.1 }}&lt;/td&gt;
&lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>7381398</id><snippet>combinedList = [{'place':placeList[i],'speaker':speakerList[i]} for i in range(4)]

{% for entry in combinedList %}
&lt;tr&gt;
&lt;td&gt;{{ entry.place }}&lt;/td&gt;
&lt;td&gt;1:30&lt;/td&gt;
&lt;td&gt;{{ entry.speaker }}&lt;/td&gt;
&lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>7381725</id><snippet>json.dump()</snippet></ROW><ROW><id>7381725</id><snippet>$ cat t.json
{
  "label": "hd",
  "url": "google",
  "format": "mp4",
  "video_codec": "h264",
  "audio_codec": "aac",
  "size": "1080x720"
}
$ python &lt;&lt; EOF
&gt; import json
&gt; f = open('t.json')
&gt; print json.load(f)
&gt; f.close()
&gt; EOF
{u'format': u'mp4', u'url': u'google', u'label': u'hd', u'audio_codec': u'aac', u'video_codec': u'h264', u'size': u'1080x720'}
</snippet></ROW><ROW><id>7381930</id><snippet>NAME</snippet></ROW><ROW><id>7381930</id><snippet>NAME</snippet></ROW><ROW><id>7381985</id><snippet>chipset[19]</snippet></ROW><ROW><id>7381985</id><snippet>chipset[19] = [4 for element in chipset[19]]
</snippet></ROW><ROW><id>7381985</id><snippet>element = 4</snippet></ROW><ROW><id>7381985</id><snippet>element</snippet></ROW><ROW><id>7381985</id><snippet>4</snippet></ROW><ROW><id>7382198</id><snippet>&gt;grep -Inr SECRET_KEY *
conf/global_settings.py:255:SECRET_KEY = ''
conf/project_template/settings.py:61:SECRET_KEY = ''
contrib/auth/tokens.py:54:        hash = sha_constructor(settings.SECRET_KEY + unicode(user.id) +
contrib/comments/forms.py:86:        info = (content_type, object_pk, timestamp, settings.SECRET_KEY)
contrib/formtools/utils.py:15:    order, pickles the result with the SECRET_KEY setting, then takes an md5
contrib/formtools/utils.py:32:    data.append(settings.SECRET_KEY)
contrib/messages/storage/cookie.py:112:        SECRET_KEY, modified to make it unique for the present purpose.
contrib/messages/storage/cookie.py:114:        key = 'django.contrib.messages' + settings.SECRET_KEY
contrib/sessions/backends/base.py:89:        pickled_md5 = md5_constructor(pickled + settings.SECRET_KEY).hexdigest()
contrib/sessions/backends/base.py:95:        if md5_constructor(pickled + settings.SECRET_KEY).hexdigest() != tamper_check:
contrib/sessions/backends/base.py:134:        # Use settings.SECRET_KEY as added salt.
contrib/sessions/backends/base.py:143:                       settings.SECRET_KEY)).hexdigest()
contrib/sessions/models.py:16:        pickled_md5 = md5_constructor(pickled + settings.SECRET_KEY).hexdigest()
contrib/sessions/models.py:59:        if md5_constructor(pickled + settings.SECRET_KEY).hexdigest() != tamper_check:
core/management/commands/startproject.py:32:        # Create a random SECRET_KEY hash, and put it in the main settings.
core/management/commands/startproject.py:37:        settings_contents = re.sub(r"(?&lt;=SECRET_KEY = ')'", secret_key + "'", settings_contents)
middleware/csrf.py:38:                % (randrange(0, _MAX_CSRF_KEY), settings.SECRET_KEY)).hexdigest()
middleware/csrf.py:41:    return md5_constructor(settings.SECRET_KEY + session_id).hexdigest()
</snippet></ROW><ROW><id>7382264</id><snippet>if typedname in ['Scott', 'Doug', 'Sam', 'Harry']:
    print('You are', typedname):
else:
    print('You are not in the names list')
</snippet></ROW><ROW><id>7382264</id><snippet>if typedname in {'Scott', 'Doug', 'Sam', 'Harry'}:
</snippet></ROW><ROW><id>7382264</id><snippet>frozenset</snippet></ROW><ROW><id>7382286</id><snippet>tolist</snippet></ROW><ROW><id>7382286</id><snippet>ss = series.tolist()
</snippet></ROW><ROW><id>7382286</id><snippet>extend</snippet></ROW><ROW><id>7382286</id><snippet>append</snippet></ROW><ROW><id>7382286</id><snippet>rowp.extend(series.tolist())
</snippet></ROW><ROW><id>7382377</id><snippet>&gt;&gt;&gt; obj = AES.new('blablablablablab', AES.MODE_CBC, 'a' * 16)
&gt;&gt;&gt; obj.encrypt('z' * 16)
"?R\xd9/\xc2\xcb\x98\x8cL\xd4\xe3M\r'-k"
&gt;&gt;&gt; obj.encrypt('z' * 16)
'\xa0QL\x92\xcb\xac{y\xceG\xce\xe2\x05t\xe8\xc3'
&gt;&gt;&gt; obj.encrypt('z' * 16)
'\xc4x\x87L\x025\xbc\xe6\xf1`\x16w\xe0\x94$\x17'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7382406</id><snippet>from PyQt4.QtCore import *
from PyQt4.QtGui import *

import sys

class MyWindow(QMainWindow):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__()
        self.label = QLabel('Window')
        self.setCentralWidget(self.label)
        self.setFocusPolicy(Qt.StrongFocus)

    def focusInEvent(self, event):
        self.label.setText('Got focus')

    def focusOutEvent(self, event):
        self.label.setText('Lost focus')

def changedFocusSlot(old, now):
    if (now==None and QApplication.activeWindow()!=None):
        print "set focus to the active window"
        QApplication.activeWindow().setFocus()

def main():
    app = QApplication(sys.argv)
    QObject.connect(app, SIGNAL("focusChanged(QWidget *, QWidget *)"), changedFocusSlot)

    win1 = MyWindow()
    win2 = MyWindow()
    win1.show()
    win2.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main() 
</snippet></ROW><ROW><id>7382485</id><snippet>for each symbol:
    push that symbol onto the stack

while an item X can be popped off the stack:
    if X contains a non-terminal
        calculate each possible result with variation of the leftmost nonterminal
        if that variation is lower than the max length
             push it to the stack
    else
        add the popped X to a set Q of results (for de-duping)

print out the contents of Q (sorted, if so desired)
</snippet></ROW><ROW><id>7382485</id><snippet>set()</snippet></ROW><ROW><id>7382643</id><snippet>if</snippet></ROW><ROW><id>7382643</id><snippet>with</snippet></ROW><ROW><id>7382643</id><snippet>try</snippet></ROW><ROW><id>7382643</id><snippet>except</snippet></ROW><ROW><id>7382812</id><snippet>c = a == 1
c &amp;= b == 0 # (Or *=)
</snippet></ROW><ROW><id>7383531</id><snippet>def Welcome(email, temporaryPassword):
    model = type('lamdbaobject', (object,), {})()
    model.TemporaryPassword = temporaryPassword
    model.Email = email
    return model


t = Welcome('a@b.com','1234')
print(str(t.TemporaryPassword))
</snippet></ROW><ROW><id>7383532</id><snippet>if numberr == x:</snippet></ROW><ROW><id>7383532</id><snippet>=</snippet></ROW><ROW><id>7383532</id><snippet>if number == 1:</snippet></ROW><ROW><id>7383532</id><snippet>if</snippet></ROW><ROW><id>7383532</id><snippet>raw_input</snippet></ROW><ROW><id>7383532</id><snippet>raw_imput</snippet></ROW><ROW><id>7383532</id><snippet>import random

def Main() :

    print "TESTING"
    print
    print
    print "1 1d4"

    sum = raw_input("&gt; ")

    if sum == '1':
        numberr = random.randrange(1, 5)
        if numberr == 1:
            print "Small"
        elif numberr == 2:
            print "Medium"
        elif numberr == 3:
            print "Large"
        elif numberr == 4:
            print "Huge"

while 1:
    input = raw_input("Press Enter to continue or q to quit").upper()
    if input == 'Q': break
    elif input == '' : Main()
</snippet></ROW><ROW><id>7383924</id><snippet>loggedin</snippet></ROW><ROW><id>7383924</id><snippet>username</snippet></ROW><ROW><id>7383924</id><snippet>initializer</snippet></ROW><ROW><id>7383924</id><snippet>dict</snippet></ROW><ROW><id>7383936</id><snippet>&gt;&gt;&gt; regex = "([^-]*-)(?=([^-]*))"
&gt;&gt;&gt; for result in re.finditer(regex, "foo-foobar-foobaz"):
&gt;&gt;&gt;     print("".join(result.groups()))
foo-foobar
foobar-foobaz
</snippet></ROW><ROW><id>7383936</id><snippet>[^-]*</snippet></ROW><ROW><id>7383936</id><snippet>.*</snippet></ROW><ROW><id>7383936</id><snippet>-</snippet></ROW><ROW><id>7384038</id><snippet>u"= ="</snippet></ROW><ROW><id>7384038</id><snippet>u"\0= ="</snippet></ROW><ROW><id>7384099</id><snippet>ListProperty</snippet></ROW><ROW><id>7384099</id><snippet>list</snippet></ROW><ROW><id>7384099</id><snippet>list</snippet></ROW><ROW><id>7384099</id><snippet>ListProperty</snippet></ROW><ROW><id>7384099</id><snippet>employee.departments.remove(department.key())
employee.put()
</snippet></ROW><ROW><id>7384099</id><snippet>ListProperty</snippet></ROW><ROW><id>7384350</id><snippet>r'&lt;img[^&gt;]*\ssrc="(.*?)"'</snippet></ROW><ROW><id>7384350</id><snippet>r'&lt;img[^&gt;]*\salt="(.*?)"'</snippet></ROW><ROW><id>7384350</id><snippet>[^&gt;]*</snippet></ROW><ROW><id>7384350</id><snippet>\s</snippet></ROW><ROW><id>7384634</id><snippet>h</snippet></ROW><ROW><id>7384634</id><snippet>createBlog</snippet></ROW><ROW><id>7384634</id><snippet>view</snippet></ROW><ROW><id>7384634</id><snippet>class Foo(object):
    def __init__(self, request):
        self.request = request

    def createBlog(self):
        return render('blog.mako'. {})

    @view_config(...)
    def myview(self):
        return {}
</snippet></ROW><ROW><id>7384634</id><snippet>${view.createBlog()}</snippet></ROW><ROW><id>7385114</id><snippet>def execute_sp( sp_name, paramaters ):
    #helper method to run sp's and return results
    db = Db()
    cursor = db.cursor()
    cursor.callproc(sp_name,paramaters)
    cursor.nextset() #Need the second result set in the proc
    results = cursor.fetchallDict()
    cursor.close()
    return results
</snippet></ROW><ROW><id>7385776</id><snippet>result[(slice(None),) + indices + (iteration,)]</snippet></ROW><ROW><id>7386010</id><snippet>MySpider.commentList</snippet></ROW><ROW><id>7386010</id><snippet>class MySpider(object):

    commentList = []

    def parse_post(self, response):
        ...  
        MySpider.commentList.append(someData)

    def parse_comments(self, response):
        ...  
        MySpider.commentList.append(someData)
</snippet></ROW><ROW><id>7386010</id><snippet>MySpider</snippet></ROW><ROW><id>7386010</id><snippet>MySpider</snippet></ROW><ROW><id>7386010</id><snippet>commentList</snippet></ROW><ROW><id>7386010</id><snippet>self.commentList</snippet></ROW><ROW><id>7386010</id><snippet>class MySpider(object):

    def __init__(self):    
        self.commentList = []

    def parse_post(self, response):
        ...  
        self.commentList.append(someData)

    def parse_comments(self, response):
        ...  
        self.commentList.append(someData)
</snippet></ROW><ROW><id>7386665</id><snippet>safe</snippet></ROW><ROW><id>7386665</id><snippet>[1, 2, 'foo', u'bar']</snippet></ROW><ROW><id>7386665</id><snippet>u"[1, 2, 'foo', u'bar']"</snippet></ROW><ROW><id>7386665</id><snippet>SafeString</snippet></ROW><ROW><id>7386665</id><snippet>unicode</snippet></ROW><ROW><id>7386665</id><snippet>safeseq</snippet></ROW><ROW><id>7386665</id><snippet>safe</snippet></ROW><ROW><id>7386665</id><snippet>&lt;ul&gt;
{% for author in authors|safeseq %}
    &lt;li&gt;{{ author }}&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>7386665</id><snippet>safe</snippet></ROW><ROW><id>7386665</id><snippet>&lt;ul&gt;
{% for author in authors %}
    &lt;li&gt;{{ author|safe }}&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>7386665</id><snippet>safeseq</snippet></ROW><ROW><id>7386665</id><snippet>unordered_list</snippet></ROW><ROW><id>7386665</id><snippet>&lt;ul&gt;{{ authors|safeseq|unordered_list }}&lt;/ul&gt;
</snippet></ROW><ROW><id>7387471</id><snippet>def runifmain(mainname):
    def deco(clas):
        if mainname == '__main__':
            clas().run()
        return clas
    return deco


@runifmain(__name__)
class B(A):
    [...]
</snippet></ROW><ROW><id>7387471</id><snippet>runifmain()</snippet></ROW><ROW><id>7387471</id><snippet>@runifmain(__name__)</snippet></ROW><ROW><id>7387538</id><snippet>os.walk()</snippet></ROW><ROW><id>7387538</id><snippet>os.stat()</snippet></ROW><ROW><id>7387593</id><snippet>d</snippet></ROW><ROW><id>7387593</id><snippet>d['results'][0]['geometry']['location']
</snippet></ROW><ROW><id>7387593</id><snippet>[0]</snippet></ROW><ROW><id>7387593</id><snippet>'geometry'</snippet></ROW><ROW><id>7387593</id><snippet>simplejson.load()</snippet></ROW><ROW><id>7387593</id><snippet>dict</snippet></ROW><ROW><id>7387593</id><snippet>list</snippet></ROW><ROW><id>7387593</id><snippet>simplejson.dumps()</snippet></ROW><ROW><id>7387593</id><snippet>simplejson.loads()</snippet></ROW><ROW><id>7387593</id><snippet>&gt;&gt;&gt; q = {}
&gt;&gt;&gt; q['foo'] = 'bar'
&gt;&gt;&gt; q[1] = 'baz'
&gt;&gt;&gt; simplejson.dumps(q)
'{"1": "baz", "foo": "bar"}'
</snippet></ROW><ROW><id>7387638</id><snippet>&gt;&gt;&gt; l = [i.split(": ") for i in open("def.txt")] #read and parse the input
&gt;&gt;&gt; l #here is what we got
[['build number', '5513'], ['build date', '12/09/2011']]
&gt;&gt;&gt; with open("out.txt", "w") as f: #open the out file
...    f.write("&lt;tbl&gt;\n") 
...    for k, v in l: #iterate and write
...         f.write("&lt;tr&gt;&lt;td&gt;{}&lt;/td&gt;&lt;td&gt;{}&lt;/td&gt;&lt;/tr&gt;\n".format(k, v)) 
...    f.write("&lt;/tbl&gt;\n")
</snippet></ROW><ROW><id>7387773</id><snippet>sys.getdefaultencoding()</snippet></ROW><ROW><id>7387773</id><snippet>python os default encoding</snippet></ROW><ROW><id>7387773</id><snippet>python system default encoding</snippet></ROW><ROW><id>7388483</id><snippet>{% for author in authors %}
    &lt;li&gt;{{ author|safe }}&lt;/li&gt;
{% endfor %}
</snippet></ROW><ROW><id>7388539</id><snippet>os.stat</snippet></ROW><ROW><id>7388539</id><snippet>curDir = os.getcwd()+'/test'
os.chdir(curDir)
</snippet></ROW><ROW><id>7388539</id><snippet>os.stat</snippet></ROW><ROW><id>7388539</id><snippet>if os.stat(os.path.join(paths, f))[stat.ST_SIZE]&gt;0:
  print f
</snippet></ROW><ROW><id>7388635</id><snippet>for i in s:
    print i
    try:
        socket.gethostbyname(i.strip())
    except socket.gaierror:
        print "unable to get address for", i
</snippet></ROW><ROW><id>7388635</id><snippet>gethostbyname</snippet></ROW><ROW><id>7388635</id><snippet>except</snippet></ROW><ROW><id>7388883</id><snippet> theFrame.grab_focus()
</snippet></ROW><ROW><id>7388883</id><snippet>def outOfFocus(self, widget):
    focusInFrame = False
    for child in widget.get_parent():
        if child.has_focus():
            focusInFrame = True
    if focusInFrame == False:
        theFrame.hide()
</snippet></ROW><ROW><id>7389310</id><snippet>d = {
    "stephane": {}, 
    "philippe": {}, 
    "helene": {
        "hugo": {}, 
        "jean-michel": {},
        "fernand": {},
    }, 
    "gustave": {},
}

def sort_dict_as_list(d):
    sorted_list = []
    for k, v in sorted(d.items()):
        if k:    
            sorted_list.append(k)
        if v:
            sorted_list.append(v)
    return sorted_list

def sort_recursive(d):
    if d:
        for k, v in d.items():
            d[k] = sort_recursive(v)
        return sort_dict_as_list(d)
    else:
        return d

if __name__ == "__main__":
    print sort_recursive(d)
</snippet></ROW><ROW><id>7389310</id><snippet>python sortit.py
['gustave', 'helene', ['fernand', 'hugo', 'jean-michel'], 'philippe', 'stephane']
</snippet></ROW><ROW><id>7389396</id><snippet># Enthought library imports.
from envisage.ui.action.api import Action, Group, Menu, ToolBar
from envisage.ui.workbench.api import WorkbenchActionSet


class TestActionSet(WorkbenchActionSet):
    """ An action test useful for testing. """

    #### 'ActionSet' interface ################################################

    tool_bars = [
        ToolBar(name='Fred', groups=['AToolBarGroup']),
        ToolBar(name='Wilma'),
        ToolBar(name='Barney')
    ]

    actions = [
        Action(
            path='ToolBar',
            class_name='acme.workbench.action.new_view_action:NewViewAction'
        ),]
</snippet></ROW><ROW><id>7389396</id><snippet>""" An action that dynamically creates and adds a view. """


# Enthought library imports.
from pyface.api import ImageResource
from pyface.action.api import Action
from pyface.workbench.api import View


class NewViewAction(Action):
    """ An action that dynamically creates and adds a view. """

    #### 'Action' interface ###################################################

    # A longer description of the action.
    description = 'Create and add a new view'

    # The action's name (displayed on menus/tool bar tools etc).
    name = 'New View'

    # A short description of the action used for tooltip text etc.
    tooltip = 'Create and add a new view'

    image = ImageResource(Your Image File Name Goes Here)

    ###########################################################################
    # 'Action' interface.
    ###########################################################################

    def perform(self, event):
        """ Perform the action. """
    # You can give the view a position... (it default to 'left')...
    view = View(id='my.view.fred', name='Fred', position='right')
    self.window.add_view(view)

    # or you can specify it on the call to 'add_view'...
    view = View(id='my.view.wilma', name='Wilma')
    self.window.add_view(view, position='top')

    return

#### EOF ######################################################################
</snippet></ROW><ROW><id>7389468</id><snippet>Tuple&lt;,&gt;</snippet></ROW><ROW><id>7389468</id><snippet>KeyValuePair&lt;,&gt;</snippet></ROW><ROW><id>7389468</id><snippet>public static IEnumerable&lt;KeyValuePair&lt;int, T&gt;&gt; Enumerate&lt;T&gt;(this IEnumerable&lt;T&gt; items) {
    return items.Select((item, key) =&gt; new KeyValuePair(key, item));
}
</snippet></ROW><ROW><id>7389473</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>7389473</id><snippet>log = open('some file.txt', 'a')  # so that data written to it will be appended
c = subprocess.Popen(['dir', '/p'], stdout=log, stderr=log, shell=True)
</snippet></ROW><ROW><id>7389473</id><snippet>subprocess</snippet></ROW><ROW><id>7389473</id><snippet>write()</snippet></ROW><ROW><id>7389473</id><snippet>log</snippet></ROW><ROW><id>7389473</id><snippet>subprocess</snippet></ROW><ROW><id>7389473</id><snippet>log = open('some file.txt', 'a')
log.write('some text, as header of the file\n')
log.flush()  # &lt;-- here's something not to forget!
c = subprocess.Popen(['dir', '/p'], stdout=log, stderr=log, shell=True)
</snippet></ROW><ROW><id>7389473</id><snippet>flush</snippet></ROW><ROW><id>7389616</id><snippet>data_uri = open('11.png', 'rb').read().encode('base64').replace('\n', '')
img_tag = '&lt;img src="data:image/png;base64,{0}"&gt;'.format(data_uri)

print(img_tag)
</snippet></ROW><ROW><id>7389616</id><snippet>data_uri = open('11.png', 'rb').read().encode('base64').replace('\n', '')
img_tag = '&lt;img src="data:image/png;base64,%s"&gt;' % data_uri

print(img_tag)
</snippet></ROW><ROW><id>7390044</id><snippet>&gt;&gt;&gt; globals()
{'__builtins__': &lt;module '__builtin__' (built-in)&gt;, '__name__': '__main__', '__doc__': None, '__package__': None}
&gt;&gt;&gt; x=2
&gt;&gt;&gt; globals()
{'__builtins__': &lt;module '__builtin__' (built-in)&gt;, '__name__': '__main__', 'x': 2, '__doc__': None, '__package__': None}
</snippet></ROW><ROW><id>7390044</id><snippet>"__.*?__$"</snippet></ROW><ROW><id>7390044</id><snippet>$ python
Python 2.7.1 (r271:86832, Jun  5 2011, 15:52:25) 
[GCC 4.2.1 (Apple Inc. build 5659)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; x = 3
&gt;&gt;&gt; import re
&gt;&gt;&gt; [name for name in dir() if not re.match(r'__.*?__$', name)]
['re', 'x']
</snippet></ROW><ROW><id>7390044</id><snippet>$</snippet></ROW><ROW><id>7390044</id><snippet>__abc__1</snippet></ROW><ROW><id>7390044</id><snippet>dir()</snippet></ROW><ROW><id>7390044</id><snippet>globals()</snippet></ROW><ROW><id>7390263</id><snippet>[n for n in dir() if re.match("f.*[0-9]$", n)]</snippet></ROW><ROW><id>7390263</id><snippet>~/.startup.py</snippet></ROW><ROW><id>7390263</id><snippet># Ned's startup.py file, loaded into interactive python prompts.

print("(.startup.py)")

import datetime, os, pprint, re, sys, time

print("(imported datetime, os, pprint, re, sys, time)")

def dirx(thing, regex):
    return [ n for n in dir(thing) if re.search(regex, n) ]

pp = pprint.pprint
</snippet></ROW><ROW><id>7390502</id><snippet>preferred_genre = models.ForeignKey("Genre")
</snippet></ROW><ROW><id>7390549</id><snippet>reader = csv.reader(yourFileHandle)
writer = csv.writer(outputFileHandle)
for row in reader:
    row[5] = row[5].replace(r'\','')
    writer.writerow(row)
</snippet></ROW><ROW><id>7390842</id><snippet>tools.staticdir.root = "/"</snippet></ROW><ROW><id>7390842</id><snippet>tools.staticdir.on = True</snippet></ROW><ROW><id>7390842</id><snippet>tools.staticfile.root</snippet></ROW><ROW><id>7390842</id><snippet>tools.staticdir.root</snippet></ROW><ROW><id>7390842</id><snippet>.root</snippet></ROW><ROW><id>7390842</id><snippet>os.path.join(root, dir)</snippet></ROW><ROW><id>7390842</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.join('/path/to/Application', '/css/ab.css')
'/css/ab.css'
&gt;&gt;&gt; os.path.join('/path/to/Application', 'css/ab.css')
'/path/to/Application/css/ab.css'
</snippet></ROW><ROW><id>7390842</id><snippet>[/]
tools.staticfile.root = "/path/to/Application"

[/css/ab.css]
tools.staticfile.on = True
tools.staticfile.filename = "css/ab.css"
</snippet></ROW><ROW><id>7390947</id><snippet>send_now()</snippet></ROW><ROW><id>7390947</id><snippet>EmailBackend</snippet></ROW><ROW><id>7390947</id><snippet>deliver()</snippet></ROW><ROW><id>7390947</id><snippet>NOTIIFICATION_BACKENDS</snippet></ROW><ROW><id>7390947</id><snippet>class MyBackend(BaseBackend):
    def deliver(self, recepient, sender, notice_type, extra_context):
        messages = self.get_formatted_messages(["notice.html"],
            notice_type.label, extra_context)
        notice = Notice.objects.create(recipient=recepient,  
            message=messages['notice.html'], notice_type=notice_type, 
            on_site=on_site, sender=sender)
        notice.save()
</snippet></ROW><ROW><id>7391111</id><snippet>FOO_SYNTAX = (file, float, int)
def foo_cmd(infile, infloat, inint):
    pass

def parse_args(rule, args):
    if len(rule) != len(args):
        raise ValueError, "Wrong number of arguments"
    return [rule_item(arg) for rule_item, arg in zip(rule, args)]

COMMANDS = {'foo': (FOO_SYNTAX, foo_cmd)}

def dispatch(line):
    cmd, rest = line.split(None, 1)
    args = rest.split()
    syntax, cmd_func = COMMANDS[cmd]
    cmd_func(*parse_args(syntax, args))
</snippet></ROW><ROW><id>7391453</id><snippet>db_index=True</snippet></ROW><ROW><id>7391453</id><snippet>CREATE INDEX</snippet></ROW><ROW><id>7391453</id><snippet>class Customer(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)

class Order(models.Model):
    customer = models.ForeignKey(Customer, db_index=True)
</snippet></ROW><ROW><id>7391453</id><snippet>BEGIN;
CREATE TABLE `foo_app_customer` (
    `id` integer AUTO_INCREMENT NOT NULL PRIMARY KEY,
    `first_name` varchar(100) NOT NULL,
    `last_name` varchar(100) NOT NULL
)
;
CREATE TABLE `foo_app_order` (
    `id` integer AUTO_INCREMENT NOT NULL PRIMARY KEY,
    `customer_id` integer NOT NULL
)
;
ALTER TABLE `foo_app_order` ADD CONSTRAINT `customer_id_refs_id_27e4f922` FOREIGN KEY (`customer_id`) REFERENCES `foo_app_customer` (`id`);
CREATE INDEX `foo_app_order_12366e04` ON `foo_app_order` (`customer_id`);
COMMIT;  
</snippet></ROW><ROW><id>7391453</id><snippet>ALTER TABLE</snippet></ROW><ROW><id>7391453</id><snippet>CREATE INDEX</snippet></ROW><ROW><id>7391453</id><snippet>inspectdb</snippet></ROW><ROW><id>7391517</id><snippet>mylist2 = mylist1[:]
</snippet></ROW><ROW><id>7391517</id><snippet>mylist2 = mylist1
</snippet></ROW><ROW><id>7391609</id><snippet>\r\n</snippet></ROW><ROW><id>7391609</id><snippet>\n</snippet></ROW><ROW><id>7391609</id><snippet>\n</snippet></ROW><ROW><id>7391609</id><snippet>\r\n</snippet></ROW><ROW><id>7391833</id><snippet>path =</snippet></ROW><ROW><id>7391833</id><snippet># render WebPlayer.unity3d on /
- url: /
  static_files: static/WebPlayer.unity3d
  upload: static/WebPlayer.unity3d

# match other .unity3d files
- url: /(.*\.unity3d)
  static_files: static/\1
  upload: static/(.*\.unity3d)

# match *.html and anything else
- url: .*
  script: main.py
</snippet></ROW><ROW><id>7391906</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>7391906</id><snippet>import urllib
url = '/test/test?' + urllib.urlencode({
  'Monetization Source': mid,
  'Channel Id': cid,
})
</snippet></ROW><ROW><id>7391973</id><snippet>[u'']</snippet></ROW><ROW><id>7391973</id><snippet>&gt;&gt;&gt; search = [u'']
&gt;&gt;&gt; bool(search)
True
</snippet></ROW><ROW><id>7391991</id><snippet>import urllib, cStringIO

file = cStringIO.StringIO(urllib.urlopen(URL).read())
img = Image.open(file)
</snippet></ROW><ROW><id>7392258</id><snippet>import random
import time

class Data(object):
    ID = 0
    def __init__(self, data):
        Data.ID+=1
        self.id =Data.ID
        self.data = data
        self.duplicates = None

def fill_data(N):
    data_list = []
    # create alist of random data
    sample = list("anuraguniyal")
    for i in range(N):
        random.shuffle(sample)
        data_list.append(Data("".join(sample)))
    return data_list

def find_duplicate(data_list):
    data_map = {}
    for data in data_list:
        if data.data in data_map:
            data_map[data.data].append(data)
        else:
            data_map[data.data] = [data]

        data.duplicates = data_map[data.data]

st = time.time()
data_list = fill_data(500000)
print "fill_data time:", time.time()-st
st = time.time()
find_duplicate(data_list)
print "find_duplicate time:", time.time()-st

total_duplicates = 0
max_duplicates = 0
for data in data_list:
    total_duplicates += (len(data.duplicates) - 1)
    max_duplicates = max(len(data.duplicates),max_duplicates)
print "total_duplicates count:",total_duplicates
print "max_duplicates count:",max_duplicates
</snippet></ROW><ROW><id>7392258</id><snippet>fill_data time: 7.83853507042
find_duplicate time: 2.55058097839
total_duplicates count: 12348
max_duplicates count: 3
</snippet></ROW><ROW><id>7392272</id><snippet>i = 0
While True:
    try:
        result=br.open('http://www.example.com/sample.txt?r=%d' % i).read()
        break
    except:
        i += 1
    time.sleep(10)
</snippet></ROW><ROW><id>7392364</id><snippet>""" Partition a list into sublists whose sums don't exceed a maximum 
    using a First Fit Decreasing algorithm. See
    http://www.ams.org/new-in-math/cover/bins1.html
    for a simple description of the method.
"""


class Bin(object):
    """ Container for items that keeps a running sum """
    def __init__(self):
        self.items = []
        self.sum = 0

    def append(self, item):
        self.items.append(item)
        self.sum += item

    def __str__(self):
        """ Printable representation """
        return 'Bin(sum=%d, items=%s)' % (self.sum, str(self.items))


def pack(values, maxValue):
    values = sorted(values, reverse=True)
    bins = []

    for item in values:
        # Try to fit item into a bin
        for bin in bins:
            if bin.sum + item &lt;= maxValue:
                #print 'Adding', item, 'to', bin
                bin.append(item)
                break
        else:
            # item didn't fit into any bin, start a new bin
            #print 'Making new bin for', item
            bin = Bin()
            bin.append(item)
            bins.append(bin)

    return bins


if __name__ == '__main__':
    import random

    def packAndShow(aList, maxValue):
        """ Pack a list into bins and show the result """
        print 'List with sum', sum(aList), 'requires at least', (sum(aList)+maxValue-1)/maxValue, 'bins'

        bins = pack(aList, maxValue)

        print 'Solution using', len(bins), 'bins:'
        for bin in bins:
            print bin

        print


    aList = [10,9,8,7,6,5,4,3,2,1]
    packAndShow(aList, 11)

    aList = [ random.randint(1, 11) for i in range(100) ]
    packAndShow(aList, 11)
</snippet></ROW><ROW><id>7392411</id><snippet>__init__.py</snippet></ROW><ROW><id>7392411</id><snippet>import init_test.a.aaa</snippet></ROW><ROW><id>7392411</id><snippet>import ..a.aaa</snippet></ROW><ROW><id>7392411</id><snippet>bbb.py</snippet></ROW><ROW><id>7392411</id><snippet>import sys
import os

dirname = os.path.dirname(__file__)
sys.path.insert(0, os.path.join(dirname, "../.."))

import sys
sys.path.insert(0, ".")
import init_test.a.aaa
if __name__ == "__main__":
    inittest.a.aaa.test()
</snippet></ROW><ROW><id>7392411</id><snippet>python init_test/b/bbb.y
</snippet></ROW><ROW><id>7392411</id><snippet>python bbb.py
</snippet></ROW><ROW><id>7392591</id><snippet>import lighthouse
</snippet></ROW><ROW><id>7392591</id><snippet>sys.path</snippet></ROW><ROW><id>7392591</id><snippet>sys.path</snippet></ROW><ROW><id>7392591</id><snippet>&gt;&gt;&gt; sys.path
['', '/usr/local/lib/python2.6/dist-packages/Paste-1.7.5.1-py2.6.egg', '/usr/local/lib/python2.6/dist-packages/tornado-1.1-py2.6.egg', '/usr/local/lib/python2.6/dist-packages/pymongo-1.10.1-py2.6-linux-x86_64.egg', '/usr/local/lib/python2.6/dist-packages/mongoengine-0.4-py2.6.egg', '/usr/local/lib/python2.6/dist-packages/django_debug_toolbar-0.8.5-py2.6.egg', '/usr/lib/python2.6', '/usr/lib/python2.6/plat-linux2', '/usr/lib/python2.6/lib-tk', '/usr/lib/python2.6/lib-old', '/usr/lib/python2.6/lib-dynload', '/usr/local/lib/python2.6/dist-packages', '/usr/local/lib/python2.6/dist-packages/PIL', '/usr/lib/python2.6/dist-packages', '/usr/lib/python2.6/dist-packages/PIL', '/usr/lib/python2.6/dist-packages/gst-0.10', '/usr/lib/pymodules/python2.6', '/usr/lib/python2.6/dist-packages/gtk-2.0', '/usr/lib/pymodules/python2.6/gtk-2.0']
</snippet></ROW><ROW><id>7392591</id><snippet>/usr/local/lib/pthon2.6/dist-packages/</snippet></ROW><ROW><id>7392657</id><snippet>args</snippet></ROW><ROW><id>7392657</id><snippet>(cmd)</snippet></ROW><ROW><id>7392657</id><snippet>cmd</snippet></ROW><ROW><id>7392657</id><snippet>thread = Thread(target=threadedCommand, args=(cmd,))
#                                                ^
</snippet></ROW><ROW><id>7392788</id><snippet>[10, 20, 30, 50, 15]
</snippet></ROW><ROW><id>7392788</id><snippet>    key = mylist[4]
    mylist[4] = mylist[3]
    mylist[3] = key
</snippet></ROW><ROW><id>7392788</id><snippet>[10, 20, 30, 15, 50]
</snippet></ROW><ROW><id>7392788</id><snippet>while ???:
    key = mylist[i]
    mylist[i] = mylist[i-1]
    mylist[i-1] = key
    i -= 1
</snippet></ROW><ROW><id>7392788</id><snippet>[10, 20, 30, 50, 15]
[10, 20, 30, 15, 50]
[10, 20, 15, 30, 50]
[10, 15, 20, 30, 50]
# stop! we are sorted now!
</snippet></ROW><ROW><id>7392788</id><snippet>key = mylist[i]
while key &lt; mylist[i-1]:
    mylist[i] = mylist[i-1]
    mylist[i-1] = key
    i -= 1
</snippet></ROW><ROW><id>7392788</id><snippet>key = mylist[i]
while i &gt; 0 and key &lt; mylist[i-1]:
    mylist[i] = mylist[i-1]
    mylist[i-1] = key
    i -= 1
</snippet></ROW><ROW><id>7392788</id><snippet> [8, 2, 4, 9, 3, 6]
</snippet></ROW><ROW><id>7392788</id><snippet> [8, 2, 4, 9, 3, 6]
</snippet></ROW><ROW><id>7392788</id><snippet> [2, 8, 4, 9, 3, 6]
</snippet></ROW><ROW><id>7392788</id><snippet> [2, 4, 8, 9, 3, 6]
</snippet></ROW><ROW><id>7392788</id><snippet> [2, 4, 8, 9, 3, 6]
 [2, 4, 8, 9, 3, 6]
 [2, 3, 4, 8, 9, 6]
 [2, 3, 4, 6, 8, 9]
</snippet></ROW><ROW><id>7392788</id><snippet>for j in range(len(mylist)):
    i = j
    key = mylist[i]
    while i &gt; 0 and key &lt; mylist[i-1]:
        mylist[i] = mylist[i-1]
        mylist[i-1] = key
        i -= 1 
</snippet></ROW><ROW><id>7392788</id><snippet>for j in range(1, len(mylist)):
    i = j
    key = mylist[i]
    while i &gt; 0 and key &lt; mylist[i-1]:
        mylist[i] = mylist[i-1]
        mylist[i-1] = key
        i -= 1 
</snippet></ROW><ROW><id>7392788</id><snippet>for j in range(1, len(mylist)):
    key = mylist[j]
    i = j
    while i &gt; 0 and key &lt; mylist[i-1]:
        mylist[i] = mylist[i-1]
        i -= 1 
        mylist[i] = key
</snippet></ROW><ROW><id>7392870</id><snippet>$EDITOR</snippet></ROW><ROW><id>7392870</id><snippet># Your application makes a system call like:
$EDITOR /tmp/randfile1124098weasc9839x.txt
</snippet></ROW><ROW><id>7392870</id><snippet>$EDITOR</snippet></ROW><ROW><id>7392870</id><snippet>/usr/bin/vi</snippet></ROW><ROW><id>7392870</id><snippet>/usr/bin/emacs</snippet></ROW><ROW><id>7392889</id><snippet>combos = [str(i) + str(n) for i in x for n in y] # or `i`+`n`, () for a generator
combinations = dict((i+1,c) for i,c in enumerate(combos))
# Only in Python 2.6 and newer:
combinations = dict(enumerate(combos, 1))
# Only in Python 2.7 and newer:
combinations = {i+1:c for i,c in enumerate(combos)}
</snippet></ROW><ROW><id>7393480</id><snippet>izip_longest_next</snippet></ROW><ROW><id>7393480</id><snippet>izip_longest</snippet></ROW><ROW><id>7393480</id><snippet>            item = PyIter_Next(it);
            if (item == NULL) {
                lz-&gt;numactive -= 1;
                if (lz-&gt;numactive == 0 || PyErr_Occurred()) {
                    lz-&gt;numactive = 0;
                    Py_DECREF(result);
                    return NULL;
                } else {
                    Py_INCREF(lz-&gt;fillvalue);
                    item = lz-&gt;fillvalue;
                    PyTuple_SET_ITEM(lz-&gt;ittuple, i, NULL);
                    Py_DECREF(it);
                }
            }
</snippet></ROW><ROW><id>7393480</id><snippet>def izip_longest_modified(*args, **kwds):
    # izip_longest('ABCD', 'xy', fillvalue='-') --&gt; Ax By C- D-
    fillvalue = kwds.get('fillvalue')
    class LongestExhausted(Exception):
        pass
    def sentinel(counter = ([fillvalue]*(len(args)-1)).pop):
        try:
            yield counter()         # yields the fillvalue, or raises IndexError
        except:
            raise LongestExhausted
    fillers = repeat(fillvalue)
    iters = [chain(it, sentinel(), fillers) for it in args]
    try:
        for tup in izip(*iters):
            yield tup
    except LongestExhausted:
        pass
</snippet></ROW><ROW><id>7393597</id><snippet>app.run</snippet></ROW><ROW><id>7393784</id><snippet>return iter(self.forms.sort( ...
</snippet></ROW><ROW><id>7393784</id><snippet>sort()</snippet></ROW><ROW><id>7393784</id><snippet>None</snippet></ROW><ROW><id>7393784</id><snippet>return iter(sorted(self.forms, ...
</snippet></ROW><ROW><id>7393792</id><snippet>({ ..},)</snippet></ROW><ROW><id>7393792</id><snippet>{..}</snippet></ROW><ROW><id>7393792</id><snippet>distinctiveFeatures = ['Beak', 'Blood-Drenched', 'Boiling or Steaming Body', 'Constantly Shedding', 'Distinctive Markings', 'Elongated Neck', 'Hood', 'Expanded bone Structure', 'Albino', 'Eye Stalks', 'Glowing Eyes', 'Hair', 'Horns', 'Lizard-Like Fin', 'Fish-Like Fin', 'Icy or Cold Body', 'Illusionary Features', 'Metal-Like Features', 'Multiple Arms', 'MultipleHeads', 'Antlers', 'Multiple Legs', 'Multiple Eyes', 'Stinger', 'Odor', 'On Fire', 'Oozing Sores', 'Plant Features', 'Prehensile Tongue', 'Pulsating Skin', 'Faces', 'Rocklike Features', 'Rubber boned', 'RubberyBody', 'Scales', 'Serpent Appendages', 'Shade Form', 'Shambling Gait', 'Shell', 'Shimmering Body', 'Skeletal Appearance', 'Slimy', 'Speech', 'Suction Cups on Limbs', 'Tail', 'Tentacles', 'Transparent', 'Unusual Color', 'Weapons for Hands', 'Wet or Drenched Body', 'Wings', 'MechanicalFeatures', 'Multiple Features', 'Special']
</snippet></ROW><ROW><id>7393792</id><snippet>distinctiveFeatures[0]
</snippet></ROW><ROW><id>7393792</id><snippet>'Beak'
</snippet></ROW><ROW><id>7393991</id><snippet>filename</snippet></ROW><ROW><id>7393991</id><snippet>body.append('Content-Disposition: form-data; name="image"; filename="%s"' % filename)
</snippet></ROW><ROW><id>7393991</id><snippet>body</snippet></ROW><ROW><id>7393991</id><snippet>join()</snippet></ROW><ROW><id>7393991</id><snippet>Content-Disposition</snippet></ROW><ROW><id>7393991</id><snippet>filename= os.path.basename(filename).encode('us-ascii', 'ignore')</snippet></ROW><ROW><id>7394296</id><snippet>twisted.python.log</snippet></ROW><ROW><id>7394296</id><snippet>'message'</snippet></ROW><ROW><id>7394353</id><snippet>karta = []
for i in range(10):
    karta.append(karte())
</snippet></ROW><ROW><id>7394353</id><snippet>karta = [karte() for i in range(10)]
</snippet></ROW><ROW><id>7394353</id><snippet>karta[i]</snippet></ROW><ROW><id>7394353</id><snippet>globals()</snippet></ROW><ROW><id>7394353</id><snippet>g = globals()
for i in range(10):
    g["karte" + str(i)] = karte()
</snippet></ROW><ROW><id>7394606</id><snippet>from collections import defaultdict

d = defaultdict(int)

for sub in outer:
  for val in sub:
    d[val] += 1

print sorted(d.keys(), key=lambda k: d[k], reverse = True)
# Output: [4, 2, 3, 1, 5, 6]
</snippet></ROW><ROW><id>7394606</id><snippet>d.keys()</snippet></ROW><ROW><id>7394781</id><snippet>nonlocal</snippet></ROW><ROW><id>7394781</id><snippet>def sentinel(fillvalue = fillvalue):
    def ret():
        sentinel.counter += 1
        if sentinel.counter == len(args):
            raise LongestExhausted
        yield fillvalue
    return ret()
sentinel.counter = 0
</snippet></ROW><ROW><id>7394781</id><snippet>global</snippet></ROW><ROW><id>7394781</id><snippet>ret</snippet></ROW><ROW><id>7394781</id><snippet>izip_longest</snippet></ROW><ROW><id>7394781</id><snippet>global counter
counter = 0
def sentinel(fillvalue = fillvalue):
    def ret():
        global counter
        counter += 1
        if counter == len(args):
            raise LongestExhausted
        yield fillvalue
    return ret()
</snippet></ROW><ROW><id>7394781</id><snippet>global</snippet></ROW><ROW><id>7394781</id><snippet>izip_longest</snippet></ROW><ROW><id>7394781</id><snippet>ret</snippet></ROW><ROW><id>7394781</id><snippet>sentinel</snippet></ROW><ROW><id>7394781</id><snippet>global counter
counter = 0
arglen = len(args)

def ret():
    global counter
    counter += 1
    if counter == arglen:
        raise LongestExhausted
    return fillvalue

def sentinel():
    yield ret()
</snippet></ROW><ROW><id>7394781</id><snippet>sentinel</snippet></ROW><ROW><id>7394781</id><snippet>izip_longest</snippet></ROW><ROW><id>7394781</id><snippet>def sentinel(counter, arglen, fillvalue):
    def ret():
        counter[0] += 1
        if counter[0] == arglen:
            raise LongestExhausted
        yield fillvalue
    return ret()


def izip_longest_modified_my(*args, **kwds):
    # izip_longest('ABCD', 'xy', fillvalue='-') --&gt; Ax By C- D-
    fillvalue = kwds.get('fillvalue')

    class LongestExhausted(Exception):
        pass

    fillers = repeat(fillvalue)
    counter = [0]
    arglen = len(args)
    iters = [chain(it, sentinel(counter, arglen, fillvalue), fillers) for it in args]
    try:
        for tup in izip(*iters):
            yield tup
    except LongestExhausted:
        pass
</snippet></ROW><ROW><id>7394841</id><snippet>X</snippet></ROW><ROW><id>7394841</id><snippet>c</snippet></ROW><ROW><id>7394841</id><snippet>X[np.diag_indices_from(X)] /= c
</snippet></ROW><ROW><id>7394841</id><snippet>diag_indices_from</snippet></ROW><ROW><id>7395082</id><snippet>int(s)</snippet></ROW><ROW><id>7395082</id><snippet>s</snippet></ROW><ROW><id>7395082</id><snippet>with open("powersearch.txt") as fileIn:
    for line in fileIn:
        n1, n2 = (int(s) for s in line.split())
        print(n1, n2)
</snippet></ROW><ROW><id>7395478</id><snippet>{{extend 'path/to/web2py/templates/layout.html'}}
</snippet></ROW><ROW><id>7395518</id><snippet>argv</snippet></ROW><ROW><id>7395518</id><snippet>name = temp.season(int(b)).episode(int(c))
</snippet></ROW><ROW><id>7395518</id><snippet>getopt</snippet></ROW><ROW><id>7395711</id><snippet>for s in self.level.sprites:
  spritelayer.fill((0), s.rect)
</snippet></ROW><ROW><id>7395958</id><snippet>def as_float32(self):
    """
    See: http://en.wikipedia.org/wiki/IEEE_754-2008
    """
    from struct import pack,unpack
    s = self.bitlist
    return unpack("f",pack("I", bits2int(s)))

# Where the bits2int function converts bits to an integer.  
def bits2int(bits):
    # You may want to change ::-1 if depending on which bit is assumed
    # to be most significant. 
    bits = [int(x) for x in bits[::-1]]

    x = 0
    for i in range(len(bits)):
        x += bits[i]*2**i
    return x
</snippet></ROW><ROW><id>7395964</id><snippet>foo</snippet></ROW><ROW><id>7395983</id><snippet>key = '\x13\x00\x00\x00'
</snippet></ROW><ROW><id>7396033</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>7396033</id><snippet>d = defaultdict(int)
</snippet></ROW><ROW><id>7396033</id><snippet>d[a]= d[a] + int(b)
</snippet></ROW><ROW><id>7396033</id><snippet>if</snippet></ROW><ROW><id>7396103</id><snippet>def trav(root, s=""):
</snippet></ROW><ROW><id>7396103</id><snippet>s = ""</snippet></ROW><ROW><id>7396103</id><snippet>trav(a)</snippet></ROW><ROW><id>7396103</id><snippet>from numbers import Number

a = [[[1,2],[3,4]],[[5,6],[7,8]]]


def trav(root, s=""):
    if isinstance(root, Number):
        print("%s -&gt; %s" % (root, s))
    else:
        trav(root[0], s + "0")
        trav(root[1], s + "1")

trav(a)
</snippet></ROW><ROW><id>7396103</id><snippet>s</snippet></ROW><ROW><id>7396119</id><snippet>self</snippet></ROW><ROW><id>7396119</id><snippet>class App:
    email_queue = EmailQueue()

App.email_queue.DoSomething()
</snippet></ROW><ROW><id>7396296</id><snippet>dbsession</snippet></ROW><ROW><id>7396296</id><snippet>main()</snippet></ROW><ROW><id>7396313</id><snippet>ax.axis([xmin, xmax, ymin, ymax])</snippet></ROW><ROW><id>7396313</id><snippet>scaley=False</snippet></ROW><ROW><id>7396313</id><snippet>plot</snippet></ROW><ROW><id>7396313</id><snippet>import numpy as np
import matplotlib.pyplot as plt

fig, ax = plt.subplots()
x1 = np.linspace(-1,1,100)

ax.plot(x1, np.sin(x1))
ax.plot(x1, np.sin(x1 / 2.0))
ax.autoscale(False)         #You could skip this line and use scalex=False on
ax.plot(x1, 3 * np.sin(x1)) #the "theoretical" plot. It has to be last either way

fig.savefig('test.pdf')
</snippet></ROW><ROW><id>7396313</id><snippet>zorder</snippet></ROW><ROW><id>7396313</id><snippet>Line2D</snippet></ROW><ROW><id>7396313</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.transforms as mtransforms

def main():
    fig, ax = plt.subplots()
    x1 = np.linspace(-1,1,100)

    line1, = ax.plot(x1, np.sin(x1))
    line2, = ax.plot(x1, 3 * np.sin(x1))
    line3, = ax.plot(x1, np.sin(x1 / 2.0))
    autoscale_based_on(ax, [line1, line3])

    plt.show()

def autoscale_based_on(ax, lines):
    ax.dataLim = mtransforms.Bbox.unit()
    for line in lines:
        xy = np.vstack(line.get_data()).T
        ax.dataLim.update_from_data_xy(xy, ignore=False)
    ax.autoscale_view()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>7396665</id><snippet>aa_meetings.csv</snippet></ROW><ROW><id>7396665</id><snippet>windows-1252</snippet></ROW><ROW><id>7396665</id><snippet>'\xe2\x80\x99'</snippet></ROW><ROW><id>7396665</id><snippet>encode</snippet></ROW><ROW><id>7396665</id><snippet>decode</snippet></ROW><ROW><id>7396665</id><snippet># encoding: utf-8
import urllib2

# read raw CSV data from URL
url = urllib2.urlopen('http://www.aaphoenix.org/meetings/aa_meetings.csv')
raw = url.read().decode('windows-1252')

# replace bad characters
raw = raw.replace(u'’', u"'")

print(raw.encode("ascii"))
</snippet></ROW><ROW><id>7396728</id><snippet>input</snippet></ROW><ROW><id>7396728</id><snippet>getlist</snippet></ROW><ROW><id>7396728</id><snippet>my_list = ['string1', 'string2', 'string3']
print '&lt;form name="input" action="my_script.py"&gt;'
for element in my_list:
    print '&lt;input type="hidden" name="my_list" value="%s"&gt;' % (cgi.escape(element),)
print '&lt;input type="submit" name="submit" value="Submit" /&gt;'
print "&lt;/form&gt;"
</snippet></ROW><ROW><id>7397268</id><snippet>from gi.repository import Gtk, GdkPixbuf
store = Gtk.ListStore(str, GdkPixbuf.Pixbuf, bool)
</snippet></ROW><ROW><id>7397542</id><snippet>.cpt</snippet></ROW><ROW><id>7397542</id><snippet>options/state</snippet></ROW><ROW><id>7397542</id><snippet>.metadata</snippet></ROW><ROW><id>7397588</id><snippet>test.py</snippet></ROW><ROW><id>7397588</id><snippet>x = [1,2,3]</snippet></ROW><ROW><id>7397588</id><snippet>&gt;&gt;&gt; from test import x
&gt;&gt;&gt; x[0] = 1001
&gt;&gt;&gt; x
[1001, 2, 3]
&gt;&gt;&gt; import test
&gt;&gt;&gt; test.x
[1001, 2, 3]
&gt;&gt;&gt; imp.reload(test)
&lt;module 'test' from 'test.py'&gt;
&gt;&gt;&gt; test.x   # test is rebound to a new object 
[1, 2, 3]
&gt;&gt;&gt; x        # the old local variable isn't affected, of course
[1001, 2, 3]
</snippet></ROW><ROW><id>7397689</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; bin(int(binascii.hexlify('hello'), 16))
'0b110100001100101011011000110110001101111'
</snippet></ROW><ROW><id>7397689</id><snippet>&gt;&gt;&gt; n = int('0b110100001100101011011000110110001101111', 2)
&gt;&gt;&gt; binascii.unhexlify('%x' % n)
'hello'
</snippet></ROW><ROW><id>7397928</id><snippet>self.setting</snippet></ROW><ROW><id>7397928</id><snippet>self.settings</snippet></ROW><ROW><id>7397928</id><snippet>settings['setting']</snippet></ROW><ROW><id>7397928</id><snippet>class Foobar(object):
    def __init__(self, init_dict):
        self.__dict__.update(init_dict)
</snippet></ROW><ROW><id>7397928</id><snippet>Foobar</snippet></ROW><ROW><id>7397928</id><snippet>class Settings(object):
    def __init__(self, init_dict):
        self.__dict__.update(init_dict)

class Foobar(object):
    def __init__(self, init_dict):
        self.settings = Settings(init_dict)
</snippet></ROW><ROW><id>7397928</id><snippet>self.settings.setting</snippet></ROW><ROW><id>7397928</id><snippet>self.settings['setting']</snippet></ROW><ROW><id>7397928</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>7397951</id><snippet>Tue, 13 Sep 2011 02:38:59 GMT</snippet></ROW><ROW><id>7397951</id><snippet>2011-09-13 02:38:59</snippet></ROW><ROW><id>7397951</id><snippet>strptime</snippet></ROW><ROW><id>7397951</id><snippet>datetime.strptime(u'Tue, 13 Sep 2011 02:38:59 GMT', "%a, %d %b %Y %H:%M:%S %Z")
# returns datetime.datetime(2011, 9, 13, 2, 38, 59)
</snippet></ROW><ROW><id>7397951</id><snippet>from dateutil imoprt parser as dparser
dparser.parse("Tue, 13 Sep 2011 02:38:59 GMT")
# returns datetime.datetime(2011, 9, 13, 2, 38, 59, tzinfo=tzutc())
</snippet></ROW><ROW><id>7397955</id><snippet>\p{Lu}</snippet></ROW><ROW><id>7397955</id><snippet>\p{Ll}</snippet></ROW><ROW><id>7397955</id><snippet>[A-Za-z]</snippet></ROW><ROW><id>7397955</id><snippet>re</snippet></ROW><ROW><id>7397955</id><snippet>regex</snippet></ROW><ROW><id>7397955</id><snippet>char.islower()</snippet></ROW><ROW><id>7397955</id><snippet>char.isupper()</snippet></ROW><ROW><id>7398292</id><snippet>queryStr = "//a[contains(@href,'/women-') and not(contains(@href,'/women-shoes'))]"
for link in hxs.select(queryStr):
    self.log("LINKS2 :: %s" % attribute::href())
</snippet></ROW><ROW><id>7399424</id><snippet>read</snippet></ROW><ROW><id>7399453</id><snippet>&gt;&gt;&gt; import croniter
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; cron = croniter.croniter('45 17 */2  * *', now)
&gt;&gt;&gt; cron.get_next(datetime.datetime)
datetime.datetime(2011, 9, 14, 17, 45)
&gt;&gt;&gt; cron.get_next(datetime.datetime)
datetime.datetime(2011, 9, 16, 17, 45)
&gt;&gt;&gt; cron.get_next(datetime.datetime)
datetime.datetime(2011, 9, 18, 17, 45)
</snippet></ROW><ROW><id>7399480</id><snippet>self.thing</snippet></ROW><ROW><id>7399480</id><snippet>self.n</snippet></ROW><ROW><id>7399480</id><snippet>self.n</snippet></ROW><ROW><id>7399480</id><snippet>self.thing</snippet></ROW><ROW><id>7399480</id><snippet>self.thing</snippet></ROW><ROW><id>7399480</id><snippet>thing</snippet></ROW><ROW><id>7399737</id><snippet>for field in SettingsForm().fields:
    print field.initial
</snippet></ROW><ROW><id>7399900</id><snippet>original_list = [1, 2, 3, 4, 5]
new_list = [2, 3, 4]

original_list[3:3] = new_list
</snippet></ROW><ROW><id>7400218</id><snippet>pip -v install pycurl</snippet></ROW><ROW><id>7400218</id><snippet>Downloading/unpacking pycurl
  Using version 7.19.0 (newest of versions: 7.19.0, 7.19.0, 7.18.2, 7.18.1, 7.16.4, 7.16.2.1, 7.16.2, 7.16.1, 7.15.5.1)
  Downloading pycurl-7.19.0.tar.gz (71Kb): 71Kb downloaded
  Running setup.py egg_info for package pycurl
        Using curl-config (libcurl 7.19.7)
    running egg_info
    creating pip-egg-info/pycurl.egg-info
    writing pip-egg-info/pycurl.egg-info/PKG-INFO
    writing top-level names to pip-egg-info/pycurl.egg-info/top_level.txt
    writing dependency_links to pip-egg-info/pycurl.egg-info/dependency_links.txt
    writing manifest file 'pip-egg-info/pycurl.egg-info/SOURCES.txt'
    warning: manifest_maker: standard file '-c' not found

    reading manifest file 'pip-egg-info/pycurl.egg-info/SOURCES.txt'
    reading manifest template 'MANIFEST.in'
    writing manifest file 'pip-egg-info/pycurl.egg-info/SOURCES.txt'
Installing collected packages: pycurl
  Running setup.py install for pycurl
    Using curl-config (libcurl 7.19.7)
    running install
    running build
    running build_py
    creating build
    creating build/lib.linux-x86_64-2.7
    creating build/lib.linux-x86_64-2.7/curl
    copying python/curl/__init__.py -&gt; build/lib.linux-x86_64-2.7/curl
    running build_ext
    building 'pycurl' extension
    creating build/temp.linux-x86_64-2.7
    creating build/temp.linux-x86_64-2.7/src
    gcc -pthread -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -DHAVE_CURL_SSL=1 -I/opt/python2.7/include/python2.7 -c src/pycurl.c -o build/temp.linux-x86_64-2.7/src/pycurl.o
    src/pycurl.c:85:4: warning: #warning "libcurl was compiled with SSL support, but configure could not determine which " "library was used; thus no SSL crypto locking callbacks will be set, which may " "cause random crashes on SSL requests"
    src/pycurl.c: In function ‘do_multi_info_read’:
    src/pycurl.c:2843: warning: call to ‘_curl_easy_getinfo_err_string’ declared with attribute warning: curl_easy_getinfo expects a pointer to char * for this info
    src/pycurl.c: In function ‘multi_socket_callback’:
    src/pycurl.c:2355: warning: call to ‘_curl_easy_getinfo_err_string’ declared with attribute warning: curl_easy_getinfo expects a pointer to char * for this info
    In function ‘util_curl_unsetopt’,
        inlined from ‘do_curl_unsetopt’ at src/pycurl.c:1551:
    src/pycurl.c:1476: warning: call to ‘_curl_easy_setopt_err_CURLSH’ declared with attribute warning: curl_easy_setopt expects a CURLSH* argument for this option
    gcc -pthread -shared build/temp.linux-x86_64-2.7/src/pycurl.o -L/opt/python2.7/lib -lcurl -lpython2.7 -o build/lib.linux-x86_64-2.7/pycurl.so unknown option: --static-libs Usage: curl-config [OPTION] Available values for OPTION include: --ca ca bundle install path --cc compiler --cflags pre-processor and compiler flags --checkfor [version] check for (lib)curl of the specified version --features newline separated list of enabled features --help display this help and exit --libs library linking information --prefix curl install prefix --protocols newline separated list of enabled protocols --version output version information --vernum output the version information as a number (hexadecimal)
    gcc (GCC) 4.4.4 20100726 (Red Hat 4.4.4-13)
    Copyright (C) 2010 Free Software Foundation, Inc.
    This is free software; see the source for copying conditions.  There is NO
    warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

    running install_lib
    creating /home/ec2-user/.virtualenvs/xxx/lib/python2.7/site-packages/curl
    copying build/lib.linux-x86_64-2.7/curl/__init__.py -&gt; /home/ec2-user/.virtualenvs/xxx/lib/python2.7/site-packages/curl
    byte-compiling /home/ec2-user/.virtualenvs/xxx/lib/python2.7/site-packages/curl/__init__.py to __init__.pyc
    running install_data
    copying ChangeLog -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl
    copying COPYING -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl
    copying COPYING2 -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl
    copying INSTALL -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl
    copying README -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl
    copying TODO -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl
    copying doc/curlshareobject.html -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/html
    copying doc/pycurl.html -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/html
    copying doc/curlobject.html -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/html
    copying doc/curlmultiobject.html -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/html
    copying doc/callbacks.html -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/html
    copying examples/retriever.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/examples
    copying examples/file_upload.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/examples
    copying examples/linksys.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/examples
    copying examples/xmlrpc_curl.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/examples
    copying examples/retriever-multi.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/examples
    copying examples/sfquery.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/examples
    copying examples/basicfirst.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/examples
    copying tests/test.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_ftp.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_share.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_multi5.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_multi_timer.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_post.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_gtk.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_post3.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_debug.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_multi4.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_cb.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_multi_vs_thread.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_stringio.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_xmlrpc.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_multi_socket_select.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_multi6.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_multi_socket.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_multi.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/util.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_multi3.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_internals.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_post2.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_memleak.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_multi2.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_socketopen.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    copying tests/test_getinfo.py -&gt; /home/ec2-user/.virtualenvs/xxx/share/doc/pycurl/tests
    running install_egg_info
    running egg_info
    creating pycurl.egg-info
    writing pycurl.egg-info/PKG-INFO
    writing top-level names to pycurl.egg-info/top_level.txt
    writing dependency_links to pycurl.egg-info/dependency_links.txt
    writing manifest file 'pycurl.egg-info/SOURCES.txt'
    warning: manifest_maker: standard file '-c' not found

    reading manifest file 'pycurl.egg-info/SOURCES.txt'
    reading manifest template 'MANIFEST.in'
    writing manifest file 'pycurl.egg-info/SOURCES.txt'
    Copying pycurl.egg-info to /home/ec2-user/.virtualenvs/xxx/lib/python2.7/site-packages/pycurl-7.19.0-py2.7.egg-info
    running install_scripts
    writing list of installed files to '/tmp/pip-lEWzoB-record/install-record.txt'
Successfully installed pycurl
Cleaning up...
  Removing temporary dir /home/ec2-user/.virtualenvs/xxx/build...
</snippet></ROW><ROW><id>7400218</id><snippet>gcc -pthread -shared build/temp.linux-x86_64-2.7/src/pycurl.o -L/opt/python2.7/lib -lcurl -lpython2.7 -o build/lib.linux-x86_64-2.7/pycurl.so unknown option: --static-libs Usage: curl-config [OPTION] Available values for OPTION include: --ca ca bundle install path --cc compiler --cflags pre-processor and compiler flags --checkfor [version] check for (lib)curl of the specified version --features newline separated list of enabled features --help display this help and exit --libs library linking information --prefix curl install prefix --protocols newline separated list of enabled protocols --version output version information --vernum output the version information as a number (hexadecimal)</snippet></ROW><ROW><id>7400218</id><snippet>curl-config</snippet></ROW><ROW><id>7400218</id><snippet>--static-libs</snippet></ROW><ROW><id>7400218</id><snippet>pycurl.so</snippet></ROW><ROW><id>7400218</id><snippet>--libs</snippet></ROW><ROW><id>7400218</id><snippet>--static-libs</snippet></ROW><ROW><id>7400218</id><snippet>pycurl.so</snippet></ROW><ROW><id>7400218</id><snippet>site-packages</snippet></ROW><ROW><id>7400297</id><snippet>Parallel</snippet></ROW><ROW><id>7400297</id><snippet>GridSearchCV</snippet></ROW><ROW><id>7400315</id><snippet>os.walk</snippet></ROW><ROW><id>7400315</id><snippet>import os
for dirpath,dirs,files in os.walk('A Folder/Another folder'):
  for f in files:
    fn = os.path.join(dirpath, f)
    myzipfile.write(fn)
</snippet></ROW><ROW><id>7400370</id><snippet>(node, path)</snippet></ROW><ROW><id>7400370</id><snippet>node</snippet></ROW><ROW><id>7400370</id><snippet>path</snippet></ROW><ROW><id>7400370</id><snippet>(node, depth)</snippet></ROW><ROW><id>7400370</id><snippet>depth</snippet></ROW><ROW><id>7400370</id><snippet>node</snippet></ROW><ROW><id>7400370</id><snippet>depth</snippet></ROW><ROW><id>7401164</id><snippet>'Content-Disposition: attachment; filename="&lt;file&gt;"'</snippet></ROW><ROW><id>7401791</id><snippet>regex text (optional part|)</snippet></ROW><ROW><id>7402472</id><snippet>for root, dirs, files in os.walk('A Folder'):
    for f in files:
        fname = os.path.join(root, f)
        new_path = os.path.normpath(fname.replace('A Folder', ''))
        myzip.write(fname, new_path)
</snippet></ROW><ROW><id>7402485</id><snippet>directory = os.path.join(os.path.expanduser("~"), ".my_cache")
</snippet></ROW><ROW><id>7402485</id><snippet>urlib</snippet></ROW><ROW><id>7402485</id><snippet>import urllib
u = urllib.urlopen("http://www.google.com")
u.info().get("last-modified")
</snippet></ROW><ROW><id>7402490</id><snippet>str.__repr__</snippet></ROW><ROW><id>7402490</id><snippet>repr()</snippet></ROW><ROW><id>7402490</id><snippet>\xc4</snippet></ROW><ROW><id>7402490</id><snippet>&gt;&gt;&gt; data = "test, ąśżźć, test2"
&gt;&gt;&gt; data
'test, \xc4\x85\xc5\x9b\xc5\xbc\xc5\xba\xc4\x87, test2'
&gt;&gt;&gt; print data
test, ąśżźć, test2
</snippet></ROW><ROW><id>7402490</id><snippet>list.__str__</snippet></ROW><ROW><id>7402490</id><snippet>list.__repr__</snippet></ROW><ROW><id>7402490</id><snippet>&gt;&gt;&gt; splitted_data = data.split(",")
&gt;&gt;&gt; splitted_data
['test', ' \xc4\x85\xc5\x9b\xc5\xbc\xc5\xba\xc4\x87', ' test2']
&gt;&gt;&gt; print splitted_data[1]
 ąśżźć
</snippet></ROW><ROW><id>7402627</id><snippet>tell()</snippet></ROW><ROW><id>7402627</id><snippet>file.read(end-start)</snippet></ROW><ROW><id>7402627</id><snippet>end-start</snippet></ROW><ROW><id>7402627</id><snippet>file.seek(start)</snippet></ROW><ROW><id>7403168</id><snippet>return q(myfunc2, 0, 1, args=(y))[0]</snippet></ROW><ROW><id>7403168</id><snippet>args=(y)</snippet></ROW><ROW><id>7403168</id><snippet>args=(y,)</snippet></ROW><ROW><id>7403168</id><snippet>y</snippet></ROW><ROW><id>7403168</id><snippet>args=[y]</snippet></ROW><ROW><id>7403168</id><snippet>&gt;&gt;&gt; a = (1,)
&gt;&gt;&gt; b = (1)
&gt;&gt;&gt; print a, type(a)
(1,) &lt;type 'tuple'&gt;
&gt;&gt;&gt; print b, type(b)
1 &lt;type 'int'&gt;
</snippet></ROW><ROW><id>7403276</id><snippet>int</snippet></ROW><ROW><id>7403276</id><snippet>__builtins__</snippet></ROW><ROW><id>7403276</id><snippet>getattr</snippet></ROW><ROW><id>7403276</id><snippet>__builtins__</snippet></ROW><ROW><id>7403276</id><snippet>type</snippet></ROW><ROW><id>7403276</id><snippet>&gt;&gt;&gt; getattr(__builtins__, 'int')
&lt;type 'int'&gt;
&gt;&gt;&gt; foo = getattr(__builtins__, 'int')
&gt;&gt;&gt; isinstance(foo, type)
True
</snippet></ROW><ROW><id>7403280</id><snippet>outputfile = open('output.plist', 'w')
outputfile.write(p["ProductVersion"])
outputfile.close()
</snippet></ROW><ROW><id>7403294</id><snippet>map()</snippet></ROW><ROW><id>7403294</id><snippet>operator</snippet></ROW><ROW><id>7403294</id><snippet>+</snippet></ROW><ROW><id>7403294</id><snippet>-</snippet></ROW><ROW><id>7403294</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; d1 = [random.randrange(10) for ignored in range(10)]
&gt;&gt;&gt; d2 = [random.randrange(10) for ignored in range(10)]
&gt;&gt;&gt; c1 = [random.randrange(10) for ignored in range(10)]
&gt;&gt;&gt; c2 = [random.randrange(10) for ignored in range(10)]
&gt;&gt;&gt; c1
[1, 1, 7, 5, 5, 7, 4, 0, 7, 2]
&gt;&gt;&gt; c2
[9, 2, 7, 7, 1, 1, 9, 3, 6, 8]
&gt;&gt;&gt; d1
[0, 3, 4, 8, 9, 0, 7, 1, 6, 5]
&gt;&gt;&gt; d2
[3, 9, 5, 2, 1, 9, 2, 7, 9, 5]
</snippet></ROW><ROW><id>7403294</id><snippet>map</snippet></ROW><ROW><id>7403294</id><snippet>operator.*</snippet></ROW><ROW><id>7403294</id><snippet>&gt;&gt;&gt; import operator
&gt;&gt;&gt; x = map(operator.sub, d2, c2)
&gt;&gt;&gt; y = map(operator.sub, d2, c2)
&gt;&gt;&gt; z = map(operator.mul, x, x)
&gt;&gt;&gt; w = map(operator.mul, y, y)
&gt;&gt;&gt; import math
&gt;&gt;&gt; answer = map(math.sqrt, map(operator.add, z, w))
&gt;&gt;&gt; print answer
[8.48528137423857, 9.899494936611665, 2.8284271247461903, 7.0710678118654755, 0.0, 11.313708498984761, 9.899494936611665, 5.656854249492381, 4.242640687119285, 4.242640687119285]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7403476</id><snippet>import numpy as np

a = np.array([0,0,0,0,1,0,0,0,2,0,0,10,0,0,3,4,6,0,0,1,0,0])
x, = np.nonzero(a)
a_filled = np.interp(np.arange(a.size), x, a[x])
</snippet></ROW><ROW><id>7403476</id><snippet>array([1, 1, 1, 1, 1, 1.25, 1.5, 1.75, 2, 4.67, 7.33, 10, 7.67, 5.33, 3, 4, 6, 4.33, 2.67, 1, 1, 1])
</snippet></ROW><ROW><id>7403515</id><snippet>suds</snippet></ROW><ROW><id>7403515</id><snippet>sys.path</snippet></ROW><ROW><id>7403515</id><snippet>import imp
imp.find_module('suds', sys.path)
</snippet></ROW><ROW><id>7403515</id><snippet>imp</snippet></ROW><ROW><id>7403530</id><snippet>"menu"</snippet></ROW><ROW><id>7403530</id><snippet>import Tkinter as tk

class SampleApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        self.om_variable = tk.StringVar(self)

        b1 = tk.Button(self, text="Colors", width=8, command=self.use_colors)
        b2 = tk.Button(self, text="Sizes", width=8, command=self.use_sizes)

        self.om = tk.OptionMenu(self, self.om_variable, ())
        self.om.configure(width=20)
        self.use_colors()

        b1.pack(side="left")
        b2.pack(side="left")
        self.om.pack(side="left", fill="x", expand=True)


    def _reset_option_menu(self, options, index=None):
        '''reset the values in the option menu

        if index is given, set the value of the menu to
        the option at the given index
        '''
        menu = self.om["menu"]
        menu.delete(0, "end")
        for string in options:
            menu.add_command(label=string, 
                             command=lambda value=string:
                                  self.om_variable.set(value))
        if index is not None:
            self.om_variable.set(options[index])

    def use_colors(self):
        '''Switch the option menu to display colors'''
        self._reset_option_menu(["red","orange","green","blue"], 0)

    def use_sizes(self):
        '''Switch the option menu to display sizes'''
        self._reset_option_menu(["x-small", "small", "medium", "large"], 0)

if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()
</snippet></ROW><ROW><id>7403541</id><snippet>id</snippet></ROW><ROW><id>7403541</id><snippet>type</snippet></ROW><ROW><id>7403541</id><snippet>value</snippet></ROW><ROW><id>7403541</id><snippet>type</snippet></ROW><ROW><id>7403541</id><snippet>'int'</snippet></ROW><ROW><id>7403541</id><snippet>'&lt;type 'int'&gt;'</snippet></ROW><ROW><id>7403541</id><snippet>try:
    # Check if it's a builtin type
    cls = getattr(__builtins__, type)
except AttributeError:
    module = sys.modules[__name__]
    cls = getattr(module, type)
</snippet></ROW><ROW><id>7403541</id><snippet>cls</snippet></ROW><ROW><id>7403541</id><snippet>val = cls(value)
</snippet></ROW><ROW><id>7403541</id><snippet>cls</snippet></ROW><ROW><id>7403714</id><snippet>create_all(bind=None, tables=None, checkfirst=True)

Create all tables stored in this metadata.

Conditional by default, will not attempt to recreate tables already present in the 
target database.
</snippet></ROW><ROW><id>7404249</id><snippet>seek</snippet></ROW><ROW><id>7404285</id><snippet>def A(heads, path, path_len):
    if heads &lt; -1:
        path = []
        return float('inf') #Impossible to kill
    heads -= 6
    if heads &lt; 0:
        return float('inf')
    path_len = path_len + 1
    path.append("A")
    if heads == 0:
        print path
        return path_len
    heads += 3
    return min(A(heads, path, path_len), B(heads, path, path_len))

def B(heads, path, path_len):
    if heads &lt; -1:
        path = []
        return float('inf') #Impossible to kill
    heads -= 4
    if heads &lt; 0:
        return float('inf')
    path_len = path_len + 1
    path.append("B")
    if heads == 0:
        print path
        return path_len
    heads += 2
    return min(A(heads, path, path_len), B(heads, path, path_len))

A(10, [], 0)
</snippet></ROW><ROW><id>7404298</id><snippet>%HOMEPATH%</snippet></ROW><ROW><id>7404298</id><snippet>~</snippet></ROW><ROW><id>7404298</id><snippet>Desktop</snippet></ROW><ROW><id>7404298</id><snippet>~</snippet></ROW><ROW><id>7404298</id><snippet>~\Desktop</snippet></ROW><ROW><id>7404691</id><snippet>etime</snippet></ROW><ROW><id>7404691</id><snippet>awk</snippet></ROW><ROW><id>7404691</id><snippet>ps -u xxxxxx -o rss,etime,command | ...
</snippet></ROW><ROW><id>7404691</id><snippet>[[dd-]hh:]mm:ss</snippet></ROW><ROW><id>7404691</id><snippet>awk</snippet></ROW><ROW><id>7404691</id><snippet>ps -u xxxxxx -o rss,etime,command | grep -v peruser | grep -v RSS | sed 's/^ *//g' | awk '{
 split($2,arr,":") #split time on :
 len=0
 for(i in arr) len++ 
 secs=arr[len]+60*arr[len-1] #convert to seconds
 if(len&gt;2) secs=secs+substr(arr[len-2],length(arr[len-2])-1)*60*60

 if(secs&gt;5*60) { #check if more than 5 minutes
     print $0 #print out the process
     sum+=$1 
 }
} END{print "SUM:"sum/1024}'
</snippet></ROW><ROW><id>7404912</id><snippet>suds</snippet></ROW><ROW><id>7404912</id><snippet>C:\Python27\lib\site-packages\suds</snippet></ROW><ROW><id>7404912</id><snippet>&gt;&gt;&gt; imp.find_module('suds')
(None, 'C:\\Python27\\lib\\site-packages\\suds', ('', '', 5))
</snippet></ROW><ROW><id>7404912</id><snippet>imp.find_module</snippet></ROW><ROW><id>7405000</id><snippet>for posts, comments in tuples:</snippet></ROW><ROW><id>7405000</id><snippet>tuples</snippet></ROW><ROW><id>7405000</id><snippet>matches = re.findall(...)
for posts, comments in matches:
    ....
</snippet></ROW><ROW><id>7405367</id><snippet>#!/usr/bin/python

import sys
assert len(sys.argv) &gt; 1

apppath = sys.argv[1]

import os, os.path
assert os.path.splitext(apppath)[1] == ".app"

os.mkdir(apppath)
os.mkdir(apppath + "/Contents")
os.mkdir(apppath + "/Contents/MacOS")

version = "1.0.0"
bundleName = "Test"
bundleIdentifier = "org.test.test"

f = open(apppath + "/Contents/Info.plist", "w")
f.write("""&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;CFBundleDevelopmentRegion&lt;/key&gt;
    &lt;string&gt;English&lt;/string&gt;
    &lt;key&gt;CFBundleExecutable&lt;/key&gt;
    &lt;string&gt;main.py&lt;/string&gt;
    &lt;key&gt;CFBundleGetInfoString&lt;/key&gt;
    &lt;string&gt;%s&lt;/string&gt;
    &lt;key&gt;CFBundleIconFile&lt;/key&gt;
    &lt;string&gt;app.icns&lt;/string&gt;
    &lt;key&gt;CFBundleIdentifier&lt;/key&gt;
    &lt;string&gt;%s&lt;/string&gt;
    &lt;key&gt;CFBundleInfoDictionaryVersion&lt;/key&gt;
    &lt;string&gt;6.0&lt;/string&gt;
    &lt;key&gt;CFBundleName&lt;/key&gt;
    &lt;string&gt;%s&lt;/string&gt;
    &lt;key&gt;CFBundlePackageType&lt;/key&gt;
    &lt;string&gt;APPL&lt;/string&gt;
    &lt;key&gt;CFBundleShortVersionString&lt;/key&gt;
    &lt;string&gt;%s&lt;/string&gt;
    &lt;key&gt;CFBundleSignature&lt;/key&gt;
    &lt;string&gt;????&lt;/string&gt;
    &lt;key&gt;CFBundleVersion&lt;/key&gt;
    &lt;string&gt;%s&lt;/string&gt;
    &lt;key&gt;NSAppleScriptEnabled&lt;/key&gt;
    &lt;string&gt;YES&lt;/string&gt;
    &lt;key&gt;NSMainNibFile&lt;/key&gt;
    &lt;string&gt;MainMenu&lt;/string&gt;
    &lt;key&gt;NSPrincipalClass&lt;/key&gt;
    &lt;string&gt;NSApplication&lt;/string&gt;
&lt;/dict&gt;
&lt;/plist&gt;
""" % (bundleName + " " + version, bundleIdentifier, bundleName, bundleName + " " + version, version))
f.close()

f = open(apppath + "/Contents/PkgInfo", "w")
f.write("APPL????")
f.close()

f = open(apppath + "/Contents/MacOS/main.py", "w")
f.write("""#!/usr/bin/python
print "Hi there"
""")
f.close()

import stat
oldmode = os.stat(apppath + "/Contents/MacOS/main.py").st_mode
os.chmod(apppath + "/Contents/MacOS/main.py", oldmode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)
</snippet></ROW><ROW><id>7405489</id><snippet>from libc.math cimport log
from libcpp.list cimport list as cpplist

def main(int t):

    cdef cpplist[int] temp

    for x in range(t):
        if x&gt; 0:
            temp.push_back(x)

    cdef int N = temp.size()
    cdef list OutputList = N*[0]

    for i in range(N):
        OutputList[i] = temp.front()
        temp.pop_front()

    return OutputList  
</snippet></ROW><ROW><id>7405489</id><snippet>OutputList</snippet></ROW><ROW><id>7405489</id><snippet>from libc.math cimport log
from libcpp.list cimport list as cpplist

def main(int t):

    cdef cpplist[int] temp

    push_back = temp.push_back
    for x in range(t):
        if x&gt; 0:
            push_back(x)

    cdef int N = temp.size()
    cdef list OutputList = N*[0]

    front = temp.front()
    pop_front = temp.pop_front()
    for i in range(N):
        OutputList[i] = front()
        pop_front()

    return OutputList  
</snippet></ROW><ROW><id>7405705</id><snippet>data = json.loads(returnFromWebService)

json.dumps(data, sort_keys=True, indent=4)
</snippet></ROW><ROW><id>7405705</id><snippet>loads</snippet></ROW><ROW><id>7405705</id><snippet>dumps</snippet></ROW><ROW><id>7406369</id><snippet>"".join([c for c in filename if c.isalpha() or c.isdigit() or c==' ']).rstrip()
</snippet></ROW><ROW><id>7406369</id><snippet>filename = u"ad\nbla'{-+\)(ç?"
</snippet></ROW><ROW><id>7406369</id><snippet>adblaç</snippet></ROW><ROW><id>7406369</id><snippet>    keepcharacters = (' ','.','_')
    "".join(c for c in filename if c.isalnum() or c in keepcharacters).rstrip()
</snippet></ROW><ROW><id>7406468</id><snippet>newlist = [word for word in words if len(word) == 9]
</snippet></ROW><ROW><id>7406647</id><snippet>...
def method1(self):
    return {"name": "method 1",
            "list": [1, 2, 3]}
</snippet></ROW><ROW><id>7406647</id><snippet>class Bunch:
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)

...
def method1(self):
    return Bunch(name="method1",
                 list=[1, 2, 3])
</snippet></ROW><ROW><id>7406647</id><snippet>result.name</snippet></ROW><ROW><id>7406647</id><snippet>result["name"]</snippet></ROW><ROW><id>7406654</id><snippet>cxn.commit

# Should be:
cxn.commit()
</snippet></ROW><ROW><id>7406654</id><snippet>cxn.commit</snippet></ROW><ROW><id>7406654</id><snippet>commit()</snippet></ROW><ROW><id>7406654</id><snippet># Something like
&gt;&gt;&gt; conn.commit
&lt;built-in method commit of Connection object at 0x9cfe13c&gt;
</snippet></ROW><ROW><id>7406836</id><snippet>print p["RestoreRamDisks"]</snippet></ROW><ROW><id>7406836</id><snippet>p["RestoreRamDisks"]["Update"]
# If your plist may not contain a key called "RestoreRamDisks"
# use this instead
p.get("RestoreRamDisks", dict(Update=None)).get("Update", None)
# This will get the value if available, otherwise it will
# evaluate to None
</snippet></ROW><ROW><id>7407707</id><snippet>#!/usr/bin/env python
import xml.etree.cElementTree as ET
import urllib

xml_url =   "http://www.shoppingcar.it/feed/export_vel.asp?parametro=1"
req =       urllib.urlopen(xml_url)
parser =    ET.XMLParser(encoding="windows-1252")
tree =      ET.parse(req, parser=parser).get_xml()
</snippet></ROW><ROW><id>7407707</id><snippet>data = req.read()</snippet></ROW><ROW><id>7407727</id><snippet>restart()</snippet></ROW><ROW><id>7407727</id><snippet>return self.up()</snippet></ROW><ROW><id>7407727</id><snippet>None</snippet></ROW><ROW><id>7407730</id><snippet>com.apple.xcode</snippet></ROW><ROW><id>7407730</id><snippet>stringByReplacingOccurrencesOfString: withString:</snippet></ROW><ROW><id>7407730</id><snippet>lowercaseString</snippet></ROW><ROW><id>7407744</id><snippet>&lt;(head tmp)</snippet></ROW><ROW><id>7407744</id><snippet>bash</snippet></ROW><ROW><id>7407744</id><snippet>/bin/sh</snippet></ROW><ROW><id>7407744</id><snippet>/bin/sh</snippet></ROW><ROW><id>7407744</id><snippet>/bin/bash</snippet></ROW><ROW><id>7407744</id><snippet>/bin/sh</snippet></ROW><ROW><id>7407744</id><snippet>&gt;&gt;&gt; subprocess.Popen(["/bin/bash", "-c", "cat &lt;(head tmp)"])
&lt;subprocess.Popen object at 0x1004cca50&gt;
</snippet></ROW><ROW><id>7407854</id><snippet>data = ((u'863579XK9',),)
print data[0][0] # prints "863579XK9"
</snippet></ROW><ROW><id>7407943</id><snippet>def zpad(val, n):
    bits = val.split('.')
    return "%s.%s" % (bits[0].zfill(n), bits[1])

&gt;&gt;&gt; zpad('3.3', 5)
'00003.3'
</snippet></ROW><ROW><id>7408097</id><snippet>0x4f</snippet></ROW><ROW><id>7408278</id><snippet>class House:
    def __init__(self):
        self.ID = ""
        self.window_list = []

class Window:
    def __init__(self):
        self.ID = ""
</snippet></ROW><ROW><id>7408278</id><snippet>House</snippet></ROW><ROW><id>7408278</id><snippet>window_list</snippet></ROW><ROW><id>7408451</id><snippet>PathwayList = []
for InFileName in FileList:
    sys.stderr.write("Processing file %s\n" % InFileName)
    InFile = open(InFileName, 'r')
    PathwayList.append(InFile.readlines())
    InFile.close()  

for contents in PathwayList:
    # do something with contents which is a list of strings
    print contents  
</snippet></ROW><ROW><id>7408451</id><snippet>PathwayList = {}
for InFileName in FileList:
    sys.stderr.write("Processing file %s\n" % InFileName)
    InFile = open(InFileName, 'r')
    PathwayList[InFile] = InFile.readlines()
    InFile.close()

for filename, contents in PathwayList.items():
    # do something with contents which is a list of strings
    print filename, contents  
</snippet></ROW><ROW><id>7408548</id><snippet>import urllib2
doc = urllib2.urlopen(your_url)
parsed = minidom.parse(doc)
</snippet></ROW><ROW><id>7408592</id><snippet>lxml.html</snippet></ROW><ROW><id>7408592</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>7408709</id><snippet>TIME_ZONE</snippet></ROW><ROW><id>7408709</id><snippet>"UTC"</snippet></ROW><ROW><id>7408892</id><snippet>    ' ' * n
</snippet></ROW><ROW><id>7408978</id><snippet>    def on_sync_message(bus, message):
        if message.structure is None:
            return False
        if message.structure.get_name() == "prepare-xwindow-id":
            gtk.gdk.threads_enter()
            gtk.gdk.display_get_default().sync()
            win_id = videowidget.window.xid
            imagesink = message.src
            imagesink.set_property("force-aspect-ratio", True)
            imagesink.set_xwindow_id(win_id)
            gtk.gdk.threads_leave()
</snippet></ROW><ROW><id>7409034</id><snippet>myDict</snippet></ROW><ROW><id>7409034</id><snippet>myDict</snippet></ROW><ROW><id>7409034</id><snippet>dict</snippet></ROW><ROW><id>7409034</id><snippet>list</snippet></ROW><ROW><id>7409034</id><snippet>str</snippet></ROW><ROW><id>7409034</id><snippet>int</snippet></ROW><ROW><id>7409034</id><snippet>tuple</snippet></ROW><ROW><id>7409034</id><snippet>class Foo(object):
    collection = list()
    number = 9
    def change_collection(self, new_member):
        self.collection.append(new_member)
    def change_number(self, new_number):
        self.number = new_number

a = Foo()
b = Foo()
a.change_collection('howdy!')
b.change_number(11)
print a.collection, b.collection     # ['howdy!]  ['howdy!']
print a.number, b.number             # 9  11
print a.collection is b.collection   # True
print a.number is b.number           # False
</snippet></ROW><ROW><id>7409169</id><snippet>np.dot(weights.T,np.dot(covar,weights))
# array([[ 0.00064654]])
</snippet></ROW><ROW><id>7409169</id><snippet>np.dot</snippet></ROW><ROW><id>7409169</id><snippet>np.dot</snippet></ROW><ROW><id>7409169</id><snippet>np.dot</snippet></ROW><ROW><id>7409169</id><snippet>*</snippet></ROW><ROW><id>7409169</id><snippet>weights.T*np.matrix(covar)*weights
#matrix([[ 0.00064654]])
</snippet></ROW><ROW><id>7409169</id><snippet>covar</snippet></ROW><ROW><id>7409169</id><snippet>np.matrix</snippet></ROW><ROW><id>7409169</id><snippet>*</snippet></ROW><ROW><id>7409219</id><snippet>import csv
import json

class Node(dict):
    def __init__(self, (nid, name, ndescr)):
        dict.__init__(self)
        self['id'] = nid
        self['name'] = name.lstrip() # you have badly formed csv....
        self['description'] = ndescr.lstrip()
        self['children'] = []

    def add_node(self, node):
        for child in self['children']:
            if child.is_parent(node):
                child.add_node(node)
                break
        else:
            self['children'].append(node)

    def is_parent(self, node):
        if len(self['id']) == 4 and self['id'][-1] == '0':
            return node['id'].startswith(self['id'][:-1])
        return node['id'].startswith(self['id'])

class RootNode(Node):
    def __init__(self):
        Node.__init__(self, ('Root', '', ''))

    def is_parent(self, node):
        return True

def pretty_print(node, i=0):
    print '%sID=%s NAME=%s %s' % ('\t' * i, node['id'], node['name'], node['description'])
    for child in node['children']:
        pretty_print(child, i + 1)

def main():
    with open('input.csv') as f:
        f.readline() # Skip first line
        root = RootNode()
        for node in map(Node, csv.reader(f)):
            root.add_node(node)

    pretty_print(root)
    print json.dumps(root)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>7409280</id><snippet>for team in league</snippet></ROW><ROW><id>7409280</id><snippet>league</snippet></ROW><ROW><id>7409280</id><snippet>league.keys()</snippet></ROW><ROW><id>7409280</id><snippet>league.iterkeys()</snippet></ROW><ROW><id>7409280</id><snippet>dict.iterkeys()</snippet></ROW><ROW><id>7409280</id><snippet>for team in league.iterkeys():
    runs_scored, runs_allowed = map(float, league[team])
</snippet></ROW><ROW><id>7409280</id><snippet>league.items()</snippet></ROW><ROW><id>7409280</id><snippet>league.iteritems()</snippet></ROW><ROW><id>7409280</id><snippet>for team, runs in league.iteritems():
    runs_scored, runs_allowed = map(float, runs)
</snippet></ROW><ROW><id>7409280</id><snippet>for team, (runs_scored, runs_allowed) in league.iteritems():
    runs_scored = float(runs_scored)
    runs_allowed = float(runs_allowed)
</snippet></ROW><ROW><id>7409491</id><snippet>select *
from urls, sites
where urls.site_id = sites.id
and sitename like ?
</snippet></ROW><ROW><id>7409526</id><snippet>default=</snippet></ROW><ROW><id>7409526</id><snippet>json.dumps(c, default=lambda o: o.__dict__)
</snippet></ROW><ROW><id>7409814</id><snippet>file</snippet></ROW><ROW><id>7409814</id><snippet>read()</snippet></ROW><ROW><id>7409814</id><snippet>with open('Path/to/file', 'r') as content_file:
    content = content_file.read()
</snippet></ROW><ROW><id>7410263</id><snippet>mysql -u &lt;username&gt; -p -h localhost king_tracking &lt; &lt;filename&gt;
</snippet></ROW><ROW><id>7410263</id><snippet>import MySQLdb

conn = MySQLdb.connect (host = "localhost",
                       user = "testuser",
                       passwd = "testpass",
                       db = "test")
cursor = conn.cursor ()
cursor.execute ("SELECT VERSION()")
row = cursor.fetchone ()
print "server version:", row[0]
cursor.close ()
conn.close ()
</snippet></ROW><ROW><id>7410263</id><snippet>"SELECT VERSION()"
</snippet></ROW><ROW><id>7410263</id><snippet>"SELECT * FROM &lt;tablename&gt; LIMIT 0,30"
</snippet></ROW><ROW><id>7410424</id><snippet>#!/bin/env python
# coding: utf-8

import math

angles = [math.radians(60*x) for x in range(6)]
sines = [math.sin(x) for x in angles]
cosin = [math.cos(x) for x in angles]

def L(angle, coords, jump):
    return (angle + 1) % 6
def R(angle, coords, jump):
    return (angle + 4) % 6
def F(angle, coords, jump):
    coords.append(
        (coords[-1][0] + jump * cosin[angle],
         coords[-1][1] + jump * sines[angle]))
    return angle

decode = dict(L=L, R=R, F=F)

def koch(steps, length=200, startPos=(0,0)):
    pathcodes="F"
    for i in xrange(steps):
        pathcodes = pathcodes.replace("F", "FLFRFLF")

    jump = float(length) / (3 ** steps)
    coords = [startPos]
    angle = 0

    for move in pathcodes:
        angle = decode[move](angle, coords, jump)

    return coords


TOTALWIDTH = 1000

points = koch(3,TOTALWIDTH,(-TOTALWIDTH/2,0))
print points


# optional part, shows an image with Y axis(good for debugging)
import cairo, Image

width = TOTALWIDTH
height = int(TOTALWIDTH*0.32)
surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)
cr = cairo.Context(surface)
cr.set_source_rgb(1,1,1)
cr.rectangle(0, 0, width, height)
cr.fill()
cr.translate(width*0.5, height*0.95)
cr.scale(1, -1)

# red Y axis:
cr.set_source_rgb(1,0,0)
cr.move_to(0,0)
cr.line_to(0,300)
cr.stroke()

cr.set_source_rgb(0,0,0)
cr.set_line_width(0.5)
cr.move_to(*points[0])
for n in range(len(points)):
    cr.line_to(*points[n])
cr.stroke()

im = Image.frombuffer("RGBA", (width, height), surface.get_data(), "raw", "BGRA", 0,1)
im.show()
</snippet></ROW><ROW><id>7410670</id><snippet>QTreeWidgetItem</snippet></ROW><ROW><id>7410670</id><snippet>import sys
from PyQt4 import QtGui, QtCore

class BorderItemDelegate(QtGui.QStyledItemDelegate):
    def __init__(self, parent, borderRole):
        super(BorderItemDelegate, self).__init__(parent)
        self.borderRole = borderRole

    def sizeHint(self, option, index):        
        size = super(BorderItemDelegate, self).sizeHint(option, index)
        pen = index.data(self.borderRole).toPyObject()
        if pen is not None:        
            # Make some room for the border
            # When width is 0, it is a cosmetic pen which
            # will be 1 pixel anyways, so set it to 1
            width = max(pen.width(), 1)            
            size = size + QtCore.QSize(2 * width, 2 * width)
        return size

    def paint(self, painter, option, index):
        pen = index.data(self.borderRole).toPyObject()
        # copy the rect for later...
        rect = QtCore.QRect(option.rect)
        if pen is not None:
            width = max(pen.width(), 1)
            # ...and remove the extra room we added in sizeHint...
            option.rect.adjust(width, width, -width, -width)      

        # ...before painting with the base class method...
        super(BorderItemDelegate, self).paint(painter, option, index)

        # ...then paint the borders
        if pen is not None:
            painter.save()  
            # The pen is drawn centered on the rectangle lines 
            # with pen.width()/2 width on each side of these lines.
            # So, rather than shifting the drawing of pen.width()/2
            # we double the pen width and clip the part that would 
            # go outside the rect.
            painter.setClipRect(rect, QtCore.Qt.ReplaceClip);          
            pen.setWidth(2 * width)
            painter.setPen(pen)
            painter.drawRect(rect)     
            painter.restore()

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    mainWindow = QtGui.QMainWindow() 
    mainWindow.resize(300,300); 

    # Define the Qt.ItemDataRole we will be using 
    MyBorderRole = QtCore.Qt.UserRole + 1

    # Create and populate the view
    treeWidget = QtGui.QTreeWidget(mainWindow)
    for i in range(3):
        item = QtGui.QTreeWidgetItem(["Item %d"%(i)])                
        treeWidget.addTopLevelItem(item)        
        treeWidget.expandItem(item);
        for j in range(10):
            subItem = QtGui.QTreeWidgetItem(["SubItem %d %d"%(i,j)])
            pen = QtGui.QPen(QtGui.QColor.fromHsv(j*25, 255, 255))
            pen.setWidth(j)
            # Store the border pen in the item as the role we defined
            subItem.setData(0, MyBorderRole, pen)
            item.addChild(subItem)

    # Pass the role where we stored the border pen to the delegate constructor
    delegate = BorderItemDelegate(treeWidget, MyBorderRole) 
    treeWidget.setItemDelegate(delegate)

    mainWindow.setCentralWidget(treeWidget)
    mainWindow.show()   

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>7410926</id><snippet>a = 'my string'
b = a.replace('y', 'e')
</snippet></ROW><ROW><id>7410926</id><snippet>b</snippet></ROW><ROW><id>7410926</id><snippet>a</snippet></ROW><ROW><id>7410926</id><snippet>append()</snippet></ROW><ROW><id>7411118</id><snippet>#!/usr/bin/env python

from datetime import datetime

with open("stuff.txt", "r") as f:
    for line in f:
        # Remove initial or ending whitespace (like line endings)
        line = line.strip()

        # Split the timestamp and value
        raw_timestamp, value = line.split(",")

        # Make the timestamp an actual datetime object
        timestamp = datetime.strptime(raw_timestamp, "%Y%m%d")

        # Print the timestamp separated by -'s. Replace - with / or whatever.
        print("%s,%s" % (timestamp.strftime("%Y-%m-%d"), value))
</snippet></ROW><ROW><id>7411164</id><snippet>import re
from BeautifulSoup import BeautifulSoup

html = '''&lt;strong&gt;Text:&lt;/strong&gt;   

        &lt;a href='http://domain.com'&gt;url&lt;/a&gt;'''

soup = BeautifulSoup(html)
label = soup.find("strong" , text='Text:')
contact = label.findNext('a')

if contact.get('href') != None:
    print contact
else:
    print "No href"
</snippet></ROW><ROW><id>7411164</id><snippet>a</snippet></ROW><ROW><id>7411164</id><snippet>href</snippet></ROW><ROW><id>7411164</id><snippet>contact = label.findNext('a', attrs={'href' : True})
</snippet></ROW><ROW><id>7411164</id><snippet>next</snippet></ROW><ROW><id>7411197</id><snippet>#!/usr/bin/env python
from itertools import chain

dict1 = {'key_1': 10, 'key_2': 14, 'key_m': 321}
dict2 = {'key_1': 15, 'key_2': 12, 'key_m':2, 'key_n':34}

dict3 = {}

# Go through all keys in both dictionaries
for key in set(chain(dict1, dict2)):

    # Find the key in either dictionary, using an empty
    # string as the default if it is not found.
    dict3[key] = [dict.get(key, "")
                  for dict in (dict1, dict2)]

print(dict3)
</snippet></ROW><ROW><id>7411197</id><snippet>dict3</snippet></ROW><ROW><id>7411197</id><snippet>[[key, value, value], [key, value, value]...]</snippet></ROW><ROW><id>7411197</id><snippet>#!/usr/bin/env python
from itertools import chain

dict1 = {'key_1': 10, 'key_2': 14, 'key_m': 321}
dict2 = {'key_1': 15, 'key_2': 12, 'key_m':2, 'key_n':34}

result = [[key] + [dict.get(key, "")
           for dict in (dict1, dict2)]
          for key in set(chain(dict1, dict2))]
result.sort()

print(result)
</snippet></ROW><ROW><id>7411401</id><snippet>#custom.middleware.py
try:
    from threading import local
except ImportError:
    from django.utils._threading_local import local

_thread_locals = local()

def get_current_request():
    return getattr(_thread_locals, 'request', None)

class RequestMiddleware():
    def process_request(self, request):
        _thread_locals.request = request
</snippet></ROW><ROW><id>7411401</id><snippet>#custom.loaders.py
from os.path import join
from django.conf import settings
from django.template import TemplateDoesNotExist
from path.to.middleware import get_current_request

def load_template_source(template_name, template_dirs=None):
    request = get_current_request()
    host = request.get_host()
    path_to_template_dir = None
    for site in settings.SITE_TEMPLATE_FOLDERS:
        if site[0] == host:
            path_to_template_dir = site[1]
            break

    if path_to_template_dir:
        try:
            filepath = join(path_to_template_dir, template_name)
            file = open(filepath)
            try:
                return (file.read(), filepath)
            finally:
                file.close()
        except IOError:
                pass

    raise TemplateDoesNotExist(template_name)
</snippet></ROW><ROW><id>7411401</id><snippet>#settings.py

.....

TEMPLATE_LOADERS = (
    'custom.loaders.load_template_source',
    'django.template.loaders.filesystem.load_template_source',
    'django.template.loaders.app_directories.load_template_source',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'domain.middleware.SessionMiddleware',
    'custom.middleware.RequestMiddleware',
)

SITE_TEMPLATE_FOLDERS = (
    ('mydomain.com', '/path/to/templates'),
    ('myotherdomain.com', '/path/to/other/templates')
)
...
</snippet></ROW><ROW><id>7413057</id><snippet>lst=[]
if some_var == True:
    lst.append('a')
lst.append('b')
lst.append('c')
if other_var == 1:
    lst.append('d')
lst.append('e')
</snippet></ROW><ROW><id>7413142</id><snippet>tablecsv = (r'/tmp/table.csv', 'r')</snippet></ROW><ROW><id>7413142</id><snippet>tablecsv = open(r'/tmp/table.csv', 'r')</snippet></ROW><ROW><id>7413142</id><snippet>tablecsv.close()</snippet></ROW><ROW><id>7413142</id><snippet>(r'/tmp/table.csv', 'r')</snippet></ROW><ROW><id>7413309</id><snippet>MyModel.objects.filter(countries__in=unicode_countries)
</snippet></ROW><ROW><id>7413428</id><snippet>range(1920, 2012)</snippet></ROW><ROW><id>7413805</id><snippet>SELECT ... FROM ...
WHERE (ABS(firstLong - secondLong) &lt; 20) AND (ABS(firstLat - secondLat) &lt; 20);
</snippet></ROW><ROW><id>7413805</id><snippet>SQRT(longDelta*longDelta + latDelta*latDelta) &lt; 20</snippet></ROW><ROW><id>7413964</id><snippet>func2(c_int(3))</snippet></ROW><ROW><id>7413964</id><snippet>windll</snippet></ROW><ROW><id>7413964</id><snippet>cdll</snippet></ROW><ROW><id>7414593</id><snippet>extern "C" __declspec(dllexport) int SayHello(int strNo);
</snippet></ROW><ROW><id>7414593</id><snippet>mydll = cdll.LoadLibrary("Location.dll")
hellofunc = getattr(mydll,'SayHello')
func2.restype = c_int
func2.argtypes = [c_int]
x = func2(34)
print(x)
</snippet></ROW><ROW><id>7414600</id><snippet>result = serve_fileobj(RETURN_FILE,disposition='attachment',
                         content_type='.txt',name=filename)
os.unlink(filename)
return result
</snippet></ROW><ROW><id>7414606</id><snippet>d = {'ID1':[('Experiment1', 40), ('Experiment2', 59), ('Experiment3', 65)],    
 'ID2':[('Experiment1', 68), ('Experiment2', 21), ('Experiment3', 39)],   
 'ID3':[('Experiment1', 57), ('Experiment2', 15), ('Experiment4', 99)]}

COLUMN_WIDTH = 20
STRING_WHEN_MISSING = '""'
PADDING_STRING = "."


#first determine what are the columns - from the first line
columns = ["id"] #there is always at least the id column
columns = columns + [colName for (colName, colValue) in d.items()[0][1]]

print "".join([ col.ljust(COLUMN_WIDTH) for col in columns])

#browse the lines, order by ID Ascending
for (rowId, rowValues) in sorted(d.items(), key= lambda x: x[0].lower()):
    #print rowId
    #print rowValues
    rowValuesDict = dict(rowValues) #make it a dict with access by key
    rowValuesDict["id"] = rowId
    #print rowValuesDict
    print "".join([ str(rowValuesDict.get(col, STRING_WHEN_MISSING)).ljust(COLUMN_WIDTH, PADDING_STRING) for col in columns])
</snippet></ROW><ROW><id>7414606</id><snippet>id                  Experiment1         Experiment2         Experiment3         
ID1.................40..................59..................65..................
ID2.................68..................21..................39..................
ID3.................57..................15..................""..................
</snippet></ROW><ROW><id>7414606</id><snippet>d = [('ID1',{'Experiment1': 40, 'Experiment2':59, 'Experiment3':65}),    
     ('ID2',{'Experiment1': 68, 'Experiment2':21, 'Experiment3':39})] 
</snippet></ROW><ROW><id>7415076</id><snippet>class First(object):
    def __init__(self, p):
        p = str(p)
        #The decision whether or not to perform default action is done
        #in the following try/except block. In reality this block 
        #is more complicated
        #and more checks are performed in order to assure proper work
        try: 
            strImport = "__import__('module%s')"%p
            print strImport
            e = eval(strImport, {}, {})
            if not hasattr(e, p):
                raise ImportError()

            self.override_obj = getattr(e, p)(p)
        except ImportError:
            e = None #default behaviour
            self.override_obj = None

        self.p = p

    def act(self):
        if self.override_obj:
            return self.override_obj.act()
        else:
            print 'Default behaviour'
</snippet></ROW><ROW><id>7415172</id><snippet>", ".join</snippet></ROW><ROW><id>7415172</id><snippet>cursor.execute('''SELECT t.name FROM translation t, name n
                            WHERE n.id IN %s
                            AND t.link_id = n.id
                            AND t.lang_id = %s
                            ORDER BY CHAR_LENGTH(t.name)
                            LIMIT 1''', [tuple(obj.pk for obj in self), get_language(language_code).pk])
</snippet></ROW><ROW><id>7415228</id><snippet>rectangles = (rect1, rect2, ...)
</snippet></ROW><ROW><id>7415228</id><snippet>pos = pygame.mouse.get_pos()
for rect in rectangles:
    if rect.collidepoint(pos):
        changecolor(rect)
</snippet></ROW><ROW><id>7415228</id><snippet>changecolor</snippet></ROW><ROW><id>7415228</id><snippet>changecolor</snippet></ROW><ROW><id>7415355</id><snippet>button = tkinter.Button(root, text="Submit", command=displayText())
</snippet></ROW><ROW><id>7415355</id><snippet>command</snippet></ROW><ROW><id>7415355</id><snippet>displayText()</snippet></ROW><ROW><id>7415355</id><snippet>()</snippet></ROW><ROW><id>7415355</id><snippet>button = tkinter.Button(root, text="Submit", command=displayText)
</snippet></ROW><ROW><id>7415537</id><snippet>import sys
def print_there(x, y, text):
     sys.stdout.write("\x1b7\x1b[%d;%df%s\x1b8" % (x, y, text))
     sys.stdout.flush()
</snippet></ROW><ROW><id>7415543</id><snippet>def print(*line, sep=' ', end='\n', file=None, default = 'full'):
    '''If file is None, defaults to sys.stdout.'''

    if file is None:
        file = sys.stdout
</snippet></ROW><ROW><id>7415543</id><snippet>print</snippet></ROW><ROW><id>7415543</id><snippet>file</snippet></ROW><ROW><id>7415543</id><snippet>print</snippet></ROW><ROW><id>7415861</id><snippet>import os
os.system('netsh interface ip set dns "Local Area Connection" static 192.168.0.200')
</snippet></ROW><ROW><id>7416178</id><snippet>super</snippet></ROW><ROW><id>7416178</id><snippet>__init__</snippet></ROW><ROW><id>7416178</id><snippet>object</snippet></ROW><ROW><id>7416193</id><snippet>import urllib2
import MultipartPostHandler

params = {'file':open( "FILENAME.JPG" , 'rb')}
opener = urllib2.build_opener(MultipartPostHandler.MultipartPostHandler)
urllib2.install_opener(opener)
req = urllib2.Request( "PROCESS.PHP" , params)
text_response = urllib2.urlopen(req).read().strip()
</snippet></ROW><ROW><id>7416234</id><snippet>str_converter = {'aa': 1, 'b':2, 'c':3, 'ao': 4, 'uw':5, 'd':6, 'ih':7}
pre_converter = {'aw': ['ao', 'uw'], 'ay': ['ao', 'ih']}

input = ['b', 'd', 'aa', 'aw', 'ay', 'c']

work_list = []

for in_string in input:
    converted_str = pre_converter.get(in_string)
    if converted_str is None:
        work_list.append(in_string)
    else:
        work_list.extend(converted_str)

for work_string in work_list:
    print str_converter.get(work_string)
</snippet></ROW><ROW><id>7416258</id><snippet>"select %(tableName)s.somefield, count(*) from %(tableName)s WHERE %(tableName)s.TimeStamp &gt; %(fromDate)s and %(tableName)s.EndTimeStamp &lt; %(to_data)s group by %(tableName)s.ProviderUsername;" %{'tableName':tableName, 'fromDate':fromDate, 'to_data':to_data}
</snippet></ROW><ROW><id>7416294</id><snippet>sys.argv</snippet></ROW><ROW><id>7416294</id><snippet>print "Looking for '%s' in '%s'" % (str, filename)
</snippet></ROW><ROW><id>7416294</id><snippet>str</snippet></ROW><ROW><id>7416357</id><snippet>import numpy as np
a = np.array([[[10, 1, 1, 2],
[2, 2, 2, 3],
[3, 3, 3, 4]],

[[1, 1, 1, 2],
[2, 2, 2, 3],
[3, 3, 3, 4]]])
</snippet></ROW><ROW><id>7416357</id><snippet>b = a[:,:,::-1]
</snippet></ROW><ROW><id>7416357</id><snippet>b = a[...,::-1]
</snippet></ROW><ROW><id>7416440</id><snippet>items = ['alumni', 'orphan', 'binge', 'peanut', 'necktie']
sorted_items = ["".join(sorted(item)) for item in items]
</snippet></ROW><ROW><id>7416440</id><snippet>items = ['alumni', 'orphan', 'binge', 'peanut', 'necktie']
sorted_items = []
for item in items:
    sorted_items.append("".join(sorted(item)))
</snippet></ROW><ROW><id>7416440</id><snippet>map()</snippet></ROW><ROW><id>7416440</id><snippet>for i in range(len(splitfoo)):
    splitedfootmp = sorted(splitfoo[i])

for item in splitfoo:
    splitedfootmp = sorted(item)
</snippet></ROW><ROW><id>7416679</id><snippet>SGMLParser</snippet></ROW><ROW><id>7416679</id><snippet>&gt;&gt;&gt; etree.fromstring('''&lt;td class="school"&gt;Texas A&amp;M&lt;/td&gt;''').text
'Texas A&amp;M'
</snippet></ROW><ROW><id>7416694</id><snippet>btn = event.GetEventObject()
btn.GetId()
btn.GetName()
</snippet></ROW><ROW><id>7416694</id><snippet>setBtn = wx.Button(self, label="Set", name="SetX")
</snippet></ROW><ROW><id>7417157</id><snippet>firstArgument.close()</snippet></ROW><ROW><id>7417515</id><snippet>import numpy as np
import itertools   
import csv

year = np.repeat((1980, 1990 , 2000, 2010), 10)
sex = np.array(['male', 'female']*20)
disease = np.repeat(('d1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8'), 5)
draws = np.random.normal(0, 1, size=(sex.shape[0], 1000))

years=np.unique(year)
diseases=np.unique(disease)

draw_sums = dict(((y,d), draws[(year==y)&amp;(disease==d)].sum(axis=0)) 
                  for y,d in itertools.product(years,diseases))
</snippet></ROW><ROW><id>7417515</id><snippet>draw_sums</snippet></ROW><ROW><id>7417515</id><snippet>with open('/tmp/test.csv','w') as f:
    writer=csv.writer(f)
    writer.writerow(['year', 'date']+['draw{i}'.format(i=i) for i in range(1,1001)])
    for yeardate,draws in sorted(draw_sums.items()):
        writer.writerow(list(yeardate)+draws.tolist())
</snippet></ROW><ROW><id>7417521</id><snippet>        while gtk.events_pending(): #   this forces the refresh of the screen
            gtk.main_iteration()
</snippet></ROW><ROW><id>7417676</id><snippet>&lt;root&gt;
  &lt;subroot id="someID"&gt;
    &lt;value id="1"&gt;a&lt;/value&gt;
    &lt;value id="2"&gt;b&lt;/value&gt;
    &lt;value id="3"&gt;c&lt;/value&gt;
    &lt;value id="4"&gt;d&lt;/value&gt;
    &lt;value id="5"&gt;2&lt;/value&gt;
    &lt;value id="6"&gt;3&lt;/value&gt;
    &lt;value id="other"&gt;xyz&lt;/value&gt;
  &lt;/subroot&gt;
  &lt;subroot id="anotherID"&gt;
    &lt;value id="1"&gt;aa&lt;/value&gt;
    &lt;value id="2"&gt;bb&lt;/value&gt;
    &lt;value id="3"&gt;cc&lt;/value&gt;
    &lt;value id="4"&gt;11&lt;/value&gt;
    &lt;value id="5"&gt;22&lt;/value&gt;
    &lt;value id="6"&gt;33&lt;/value&gt;
    &lt;value id="other"&gt;xxyyzz&lt;/value&gt;
  &lt;/subroot&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>7417676</id><snippet>from xml.etree import ElementTree

xml = ElementTree.parse("test.xml")

root = xml.getroot()

all = {}

for group in root.findall("subroot"):
    temp = {}
    for value in group.findall("value"):
        temp[value.get("id")] = value.text
    all[group.get("id")] = temp
</snippet></ROW><ROW><id>7417676</id><snippet>{'someID': {'1': 'a', '3': 'c', '2': 'b', '5': '2', '4': 'd', '6': '3', 'other': 'xyz'}, 'anotherID': {'1': 'aa', '3': 'cc', '2': 'bb', '5': '22', '4': '11', '6': '33', 'other': 'xxyyzz'}}
</snippet></ROW><ROW><id>7417676</id><snippet>all = {group.get("id"): {value.get("id"): value.text for value in group.findall("value")} for group in root.findall("subroot")}
</snippet></ROW><ROW><id>7417699</id><snippet>goalID</snippet></ROW><ROW><id>7417699</id><snippet>goals.goalID</snippet></ROW><ROW><id>7417699</id><snippet>match.</snippet></ROW><ROW><id>7417699</id><snippet>$gt</snippet></ROW><ROW><id>7417699</id><snippet>$gte</snippet></ROW><ROW><id>7417699</id><snippet>$lt</snippet></ROW><ROW><id>7417699</id><snippet>$lte</snippet></ROW><ROW><id>7417699</id><snippet>field: {$operator: value}</snippet></ROW><ROW><id>7417699</id><snippet>db.mycollection.find({"goals.goalID": {"$gt": 201}})</snippet></ROW><ROW><id>7417765</id><snippet>from types import ModuleType

with open("A/M.py") as a:
    A = ModuleType('A')
    exec a.read() in A.__dict__

with open("B/M.py") as b:
    B = ModuleType('B')
    exec b.read() in B.__dict__

with open("C/M.py") as c:
    C = ModuleType('C')
    exec c.read() in C.__dict__
</snippet></ROW><ROW><id>7417765</id><snippet>import sys
sys.modules['A'] = A
sys.modules['B'] = B
sys.modules['C'] = C
</snippet></ROW><ROW><id>7417765</id><snippet>import A</snippet></ROW><ROW><id>7418024</id><snippet>from sqlalchemy import literal_column, bindparam


# ? = ?, 1 will be bound
bindparam(1) == bindparam(1)

# " 1 = 1", literals rendered inline (no quoting is applied !!)
literal_column(str(1)) == literal_column(str(1))
</snippet></ROW><ROW><id>7418162</id><snippet>a, b = int(a), int(b)+int(a)</snippet></ROW><ROW><id>7418162</id><snippet>a</snippet></ROW><ROW><id>7418162</id><snippet>b</snippet></ROW><ROW><id>7418162</id><snippet>A=[('3', '4'), ('3', '11'), ('8', '10')] 
print A
B = []
for a, b in A:
    B.append((int(a), int(b) + int(a)))
print B
</snippet></ROW><ROW><id>7418304</id><snippet>class PluginLoader():
    def __init__(self, path):
        self.path = path

    def __iter__(self):
        for (dirpath, dirs, files) in os.walk(self.path):
            if not dirpath in sys.path:
                sys.path.insert(0, dirpath)
        for file in files:
                (name, ext) = os.path.splitext(file)
                if ext == os.extsep + "py":
                    __import__(name, None, None, [''])
        for plugin in Plugin.__subclasses__():
            yield plugin
</snippet></ROW><ROW><id>7418304</id><snippet>__import__(name, None, None, [''])</snippet></ROW><ROW><id>7418304</id><snippet>import importlib  # just once
importlib.import_module(name)
</snippet></ROW><ROW><id>7418304</id><snippet>from multiprocessing import Process, Pipe

plugins = {}

for plugin in PluginLoader("plugins"):
    ... #select plugin(s)
    if selected:
        plugins[plugin.__name__], child = Pipe()
        p = Process(target=plugin, args=(child,))
        p.start()

...

for plugin in plugins.values():
    plugin.put("EventHappened")

...

for plugin in plugins.values():
    event = plugin.get(False)
    if event:
       ... #handle event
</snippet></ROW><ROW><id>7418765</id><snippet>run</snippet></ROW><ROW><id>7418765</id><snippet>sys.modules</snippet></ROW><ROW><id>7418765</id><snippet>reload</snippet></ROW><ROW><id>7418834</id><snippet>class NewsBodyResource(ModelResource):
    class Meta:
        queryset = ArticleBody.objects.all()
        resource_name = 'article_body'

class NewsResource(ModelResource):
    newsbodies = fields.ToManyField('yourapp.api.resources.NewsBodyResource', 'articlebody_set', full=True)

    class Meta:
        queryset = Article.objects.filter(status='PU', date_published__lt=datetime.datetime.now).order_by('-date_published')
        resource_name = 'news'
</snippet></ROW><ROW><id>7418834</id><snippet>ToManyField</snippet></ROW><ROW><id>7418834</id><snippet>related_name</snippet></ROW><ROW><id>7418977</id><snippet>data = {}

for l in open('input').readlines():
    key, value = l.split("=")
    vector_name = key.split("_")[0]
    vector = data.get(vector_name,[])
    vector.append(value)
    data[vector_name] = vector

print data
</snippet></ROW><ROW><id>7419070</id><snippet>if next_phoneme is None :
    phonemeList.append((phoneme, param_values.get(phoneme)))
else : 
    phonemeList.extend([(phoneme, param_values.get(phoneme)) for phoneme in next_phoneme])
</snippet></ROW><ROW><id>7419072</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>7419945</id><snippet>subprocess</snippet></ROW><ROW><id>7419945</id><snippet>lpr</snippet></ROW><ROW><id>7419945</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import subprocess
import shlex

n=20
x=np.linspace(0,np.pi,n)
y=np.sin(x)
plt.plot(x,y)
fname='/tmp/test.pdf'
plt.savefig(fname)
proc=subprocess.Popen(shlex.split('lpr {f}'.format(f=fname)))
</snippet></ROW><ROW><id>7420040</id><snippet>copy()</snippet></ROW><ROW><id>7420040</id><snippet>rmtree()</snippet></ROW><ROW><id>7420040</id><snippet>os.walk()</snippet></ROW><ROW><id>7420040</id><snippet>os.makedirs()</snippet></ROW><ROW><id>7420040</id><snippet>shutil.copy()</snippet></ROW><ROW><id>7420097</id><snippet>i+=1</snippet></ROW><ROW><id>7420097</id><snippet>def LCM(n,d):
    while n%d != 0:
        d += 1
    return d-1
print(LCM(99,12))
</snippet></ROW><ROW><id>7420097</id><snippet>is</snippet></ROW><ROW><id>7420097</id><snippet>d = {}
e = d
assert d == {}     # Empty dictionaries equal each other
assert d is not {} # .. but are not identical
assert d is e      # d and e refer to the same object
</snippet></ROW><ROW><id>7420097</id><snippet>is</snippet></ROW><ROW><id>7420097</id><snippet>==</snippet></ROW><ROW><id>7420097</id><snippet>==</snippet></ROW><ROW><id>7420097</id><snippet>a ? b : c</snippet></ROW><ROW><id>7420097</id><snippet> b if a else c
</snippet></ROW><ROW><id>7420459</id><snippet>lxml</snippet></ROW><ROW><id>7420459</id><snippet>import lxml.etree

tree = lxml.etree.parse("http://someurl.com")
sites = tree.xpath("//site")

for site in sites:
    siteid = site.find("siteid").text
    print siteid
</snippet></ROW><ROW><id>7420604</id><snippet>my_queryset_filters = {
    'user': self.request.user,
    'date__year': self.kwargs['year'],
}

Record.objects.filter(**my_queryset_filters)
</snippet></ROW><ROW><id>7420604</id><snippet>**</snippet></ROW><ROW><id>7420604</id><snippet>*</snippet></ROW><ROW><id>7420723</id><snippet>class Parent(Base):
    __tablename__ = 'parent'
    id = Column(Integer, primary_key=True)
    child_id = Column(Integer, ForeignKey('child.id'))
    child = relationship("Child")

class Child(Base):
    __tablename__ = 'child'
    id = Column(Integer, primary_key=True)

class Parent(Base):
    __tablename__ = 'parent'
    id = Column(Integer, primary_key=True)
    child_id = Column(Integer, ForeignKey('child.id'))
    child = relationship("Child", backref="parents")
</snippet></ROW><ROW><id>7420757</id><snippet>random.randrange</snippet></ROW><ROW><id>7420757</id><snippet>random.randrange(100, 20001, 100)
</snippet></ROW><ROW><id>7420972</id><snippet>execfile</snippet></ROW><ROW><id>7420972</id><snippet>&gt;&gt;&gt; execfile('C:\\test.py')
</snippet></ROW><ROW><id>7421147</id><snippet>((?![^)]*decode).*?)</snippet></ROW><ROW><id>7421147</id><snippet>(.*?)</snippet></ROW><ROW><id>7421147</id><snippet>DECODE</snippet></ROW><ROW><id>7421147</id><snippet>THEN</snippet></ROW><ROW><id>7421253</id><snippet>#include &lt;Python.h&gt;

    PyObject* libFunc_py(PyObject* self, PyObject* args)
    {
        char* input;
        char* output;
        int inputlen;
        int outputlen;

        PyArg_ParseTuple(args, "s#" , &amp;input, &amp;inputlen);


        int ret = libFunc(&amp;output, &amp;outlen, input, inputlen);

        if (ret !=0)
        {
            Py_ErrSetString(PyExc_RunTimeError, "ErrorMessage");
            return NULL;
        }

        PyObject* retStr =  Py_BuildValue("s#", output,outputlen);

        if(output)
           free(output)

        return retStr;
    }
</snippet></ROW><ROW><id>7421643</id><snippet>def some_python_kungfu(meth, obj):
    return type(meth)(meth.__func__, obj, obj.__class__)
</snippet></ROW><ROW><id>7421643</id><snippet>__func__</snippet></ROW><ROW><id>7421643</id><snippet>im_func</snippet></ROW><ROW><id>7421643</id><snippet>__func__</snippet></ROW><ROW><id>7421643</id><snippet>__func__</snippet></ROW><ROW><id>7421643</id><snippet>im_func</snippet></ROW><ROW><id>7421643</id><snippet>a = "that's no ordinary rabbit"
b = "consult the book of armaments"
b_split = some_python_kungfu(a.split, b)
</snippet></ROW><ROW><id>7421643</id><snippet>def some_python_kungfu(meth, obj):
    return getattr(obj, meth.__name__)
</snippet></ROW><ROW><id>7421643</id><snippet>meth.__name__</snippet></ROW><ROW><id>7421643</id><snippet>'b'</snippet></ROW><ROW><id>7421643</id><snippet>getattr</snippet></ROW><ROW><id>7421643</id><snippet>AttributeError</snippet></ROW><ROW><id>7421643</id><snippet>def external(self):
   pass
class A(object):
   b = external
</snippet></ROW><ROW><id>7421643</id><snippet>A.b.__name__ == 'external'</snippet></ROW><ROW><id>7421643</id><snippet>'b'</snippet></ROW><ROW><id>7421643</id><snippet>getattr(obj, 'external')</snippet></ROW><ROW><id>7421643</id><snippet>getattr(obj, 'b')</snippet></ROW><ROW><id>7421643</id><snippet>def some_python_kungfu(meth, obj):
    try:
        return type(meth)(meth.__func__, obj, obj.__class__)
    except AttributeError:
        # meth is a built-in method, so meth.__name__ is always correct
        return getattr(obj, meth.__name__)
</snippet></ROW><ROW><id>7421643</id><snippet>self</snippet></ROW><ROW><id>7421723</id><snippet>identifier = None if obj is None else obj.id
</snippet></ROW><ROW><id>7421810</id><snippet>option</snippet></ROW><ROW><id>7421851</id><snippet>@DerivedProperty
def etag(self):
  return hashlib.md5(self.img).hexdigest()
</snippet></ROW><ROW><id>7421900</id><snippet>script</snippet></ROW><ROW><id>7421900</id><snippet>src</snippet></ROW><ROW><id>7421900</id><snippet>src="/media…"</snippet></ROW><ROW><id>7421900</id><snippet>src="{{ MEDIA_URL }}js/test.js"</snippet></ROW><ROW><id>7422164</id><snippet>&gt;&gt;&gt; hex(ord('A'))
'0x41'
</snippet></ROW><ROW><id>7422164</id><snippet>for o in range(128):
    print chr(o), hex(o)
</snippet></ROW><ROW><id>7422164</id><snippet>import string
for c in string.printable:
    print c, hex(ord(c))
</snippet></ROW><ROW><id>7422381</id><snippet>pip install MySQL-python</snippet></ROW><ROW><id>7422381</id><snippet>mysql_config</snippet></ROW><ROW><id>7422481</id><snippet>map(int, ['1','2','3']) # =&gt; [1,2,3]
</snippet></ROW><ROW><id>7422481</id><snippet>def foo(l, dtype=long):
    return map(dtype, l)
</snippet></ROW><ROW><id>7422584</id><snippet>import numpy as np
import Image

def normalize(arr):
    """
    Linear normalization
    http://en.wikipedia.org/wiki/Normalization_%28image_processing%29
    """
    arr = arr.astype('float')
    # Do not touch the alpha channel
    for i in range(3):
        minval = arr[...,i].min()
        maxval = arr[...,i].max()
        if minval != maxval:
            arr[...,i] -= minval
            arr[...,i] *= (255.0/(maxval-minval))
    return arr

def demo_normalize():
    img = Image.open(FILENAME).convert('RGBA')
    arr=np.array(np.asarray(img).astype('float'))
    new_img = Image.fromarray(normalize(arr).astype('uint8'),'RGBA')
    new_img.save('/tmp/normalized.png')
</snippet></ROW><ROW><id>7422702</id><snippet>text</snippet></ROW><ROW><id>7422702</id><snippet>tree.xpath('//text:a | //text:h',
           namespaces={'text': 'urn:oasis:names:tc:opendocument:xmlns:text:1.0'})
</snippet></ROW><ROW><id>7422702</id><snippet>|</snippet></ROW><ROW><id>7423184</id><snippet>for member in my_list:</snippet></ROW><ROW><id>7423184</id><snippet>member</snippet></ROW><ROW><id>7423184</id><snippet>my_list = [1,2,3]
for member in my_list:
    member = 42
print my_list
</snippet></ROW><ROW><id>7423184</id><snippet>my_list = [1,2,3]
for ndx, member in enumerate(my_list):
    my_list[ndx] += 42
print my_list
</snippet></ROW><ROW><id>7423184</id><snippet>for member in my_list:</snippet></ROW><ROW><id>7423184</id><snippet>class C:
    def __init__(self, n):
        self.num = n
    def __repr__(self):
        return str(self.num)

my_list = [C(i) for i in xrange(3)]
for member in my_list:
    member.num += 42
print my_list
</snippet></ROW><ROW><id>7423278</id><snippet>import sys
from gevent import server
from gevent.baseserver import _tcp_listener
from gevent import pywsgi
from gevent.monkey import patch_all; patch_all()
from multiprocessing import Process, current_process, cpu_count

def hello_world(env, start_response):
    if env['PATH_INFO'] == '/':
        start_response('200 OK', [('Content-Type', 'text/html')])
        return ["&lt;b&gt;hello world&lt;/b&gt;"]
    else:
        start_response('404 Not Found', [('Content-Type', 'text/html')])
        return ['&lt;h1&gt;Not Found&lt;/h1&gt;']

listener = _tcp_listener(('127.0.0.1', 8001))

def serve_forever(listener):
    pywsgi.WSGIServer(listener, hello_world).serve_forever()

number_of_processes = 5
print 'Starting %s processes' % number_of_processes
for i in range(number_of_processes):
    Process(target=serve_forever, args=(listener,)).start()

serve_forever(listener)
</snippet></ROW><ROW><id>7423526</id><snippet>paster create -t pyramid_starter -o .. &lt;current_directory_name&gt;</snippet></ROW><ROW><id>7423526</id><snippet>cd ~/work/my_repo
virtualenv --no-site-packages env
env/bin/pip install pyramid
env/bin/paster create -t pyramid_starter -o .. my_repo
git init
echo 'env' &gt; .gitignore
git add .
</snippet></ROW><ROW><id>7423526</id><snippet>cd ~/work
git clone /path/to/&lt;my repo&gt;.git
cd my_repo
virtualenv --no-site-packages env
env/bin/pip install -e . # equivalent to env/bin/python setup.py develop
</snippet></ROW><ROW><id>7423526</id><snippet>env</snippet></ROW><ROW><id>7423526</id><snippet>.gitignore</snippet></ROW><ROW><id>7423575</id><snippet>def autolabel(rects):
    for rect in rects:
        height = rect.get_height()
        plt.text(rect.get_x()+rect.get_width()/2., 1.05*height, '%d'%int(height),
                ha='center', va='bottom')
</snippet></ROW><ROW><id>7423575</id><snippet>def autolabel(rects):
# attach some text labels
    for ii,rect in enumerate(rects):
        height = rect.get_height()
        plt.text(rect.get_x()+rect.get_width()/2., 1.02*height, '%s'% (name[ii]),
                ha='center', va='bottom')
autolabel(rects1)
</snippet></ROW><ROW><id>7423648</id><snippet>get</snippet></ROW><ROW><id>7423648</id><snippet>setdefault</snippet></ROW><ROW><id>7423648</id><snippet>d[key]</snippet></ROW><ROW><id>7423648</id><snippet>setdefault</snippet></ROW><ROW><id>7423648</id><snippet>d[key]</snippet></ROW><ROW><id>7423648</id><snippet>from timeit import timeit

print timeit("c = d.get(0, []); c.extend([1]); d[0] = c", "d = {1: []}", number = 1000000)
print timeit("c = d.get(1, []); c.extend([1]); d[0] = c", "d = {1: []}", number = 1000000)
print timeit("d.setdefault(0, []).extend([1])", "d = {1: []}", number = 1000000)
print timeit("d.setdefault(1, []).extend([1])", "d = {1: []}", number = 1000000)
</snippet></ROW><ROW><id>7423648</id><snippet>0.794723378711
0.811882272256
0.724429205999
0.722129751973
</snippet></ROW><ROW><id>7423648</id><snippet>setdefault</snippet></ROW><ROW><id>7423648</id><snippet>get</snippet></ROW><ROW><id>7423648</id><snippet>get</snippet></ROW><ROW><id>7423648</id><snippet>setdefault</snippet></ROW><ROW><id>7423648</id><snippet>KeyError</snippet></ROW><ROW><id>7423648</id><snippet>setdefault</snippet></ROW><ROW><id>7423648</id><snippet>defaultdict</snippet></ROW><ROW><id>7423648</id><snippet>get</snippet></ROW><ROW><id>7423733</id><snippet>asyncore</snippet></ROW><ROW><id>7423733</id><snippet>asyncore.loop(count=1)
</snippet></ROW><ROW><id>7423733</id><snippet>import asyncore
import socket

class EchoHandler(asyncore.dispatcher_with_send):

    def handle_read(self):
        data = self.recv(8192)
        if data:
            self.send(data)

class EchoServer(asyncore.dispatcher):

    def __init__(self, host, port):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.set_reuse_addr()
        self.bind((host, port))
        self.listen(5)

    def handle_accept(self):
        pair = self.accept()
        if pair is None:
            pass
        else:
            sock, addr = pair
            print 'Incoming connection from %s' % repr(addr)
            handler = EchoHandler(sock)

server = EchoServer('localhost', 8080)
# Note that here loop is infinite (count is not given)
asyncore.loop()
</snippet></ROW><ROW><id>7423733</id><snippet>handle_accept</snippet></ROW><ROW><id>7423733</id><snippet>handle_read</snippet></ROW><ROW><id>7423862</id><snippet>(?P&lt;head&gt;\[\[foo[^\[]*)abc</snippet></ROW><ROW><id>7423862</id><snippet>re</snippet></ROW><ROW><id>7423862</id><snippet>import time
import re

rec1 = re.compile('(?P&lt;head&gt;\[\[foo[^\[]*)abc')
rec2 = re.compile('(?=\[\[foo[^\[]*)abc')

total1, total2 = 0.0, 0.0

def timeRE(ver):
    x = ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_1234567890_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" * 100)
    t1 = time.time()
    if ver is 1:
        rec1.sub("def", x)
    else:
        rec2.sub("def", x)
    return (time.time() - t1)

for x in xrange(50000):
    total1 += timeRE(1)

for x in xrange(50000):
    total2 += timeRE(2)

print total1
print total2
</snippet></ROW><ROW><id>7423862</id><snippet>4.27380466461
16.9591507912
</snippet></ROW><ROW><id>7423862</id><snippet>for x in xrange(50000):
    total1 += timeRE(1)
    total2 += timeRE(2)
</snippet></ROW><ROW><id>7423862</id><snippet>4.26199269295
17.2384319305
</snippet></ROW><ROW><id>7423862</id><snippet>import time
import re
rec1 = re.compile('(?P&lt;head&gt;\[\[foo[^\[]*)abc')
rec2 = re.compile('(?=\[\[foo[^\[]*)abc')
total1, total2 = 0.0, 0.0
def timeRE(ver):
    x = ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_1234567890_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" * 100)
    t1 = time.time()
    if ver is 1:
        rec1.sub("\g&lt;head&gt;def", x)
    else:
        rec2.sub("def", x)
    return (time.time() - t1)

for x in xrange(50000):
    total1 += timeRE(1)
    total2 += timeRE(2)
print total1
print total2
</snippet></ROW><ROW><id>7423862</id><snippet>Run 1:
4.62282061577
17.8212277889

Run 2:    
4.6660721302
17.1630160809

Run 3:
4.62124109268
17.21393013
</snippet></ROW><ROW><id>7423862</id><snippet>import time
import re

rec1 = re.compile('(?P&lt;head&gt;\[\[foo[^\[]*)abc')
rec2 = re.compile('(?=\[\[foo[^\[]*)abc')
total1, total2 = 0.0, 0.0

def timeRE(ver):
    x = ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_1234567890_&lt;head&gt;_&lt;tail&gt;_&lt;/head&gt;_&lt;/tail&gt;_abcdefghijklmnopqrstuvwxyz_&lt;head&gt;[[fooBAR_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abc]]]]defghiojklmnopqrstuvwyz" * 100)
    t1 = time.time()
    if ver is 1:
        rec1.sub("\g&lt;head&gt;def", x)
    else:
        rec2.sub("def", x)
    return (time.time() - t1)

for x in xrange(50000):
    total1 += timeRE(1)
    total2 += timeRE(2)

print total1
print total2
</snippet></ROW><ROW><id>7423862</id><snippet>23.4271130562
29.6934807301
</snippet></ROW><ROW><id>7423862</id><snippet>import time
import re
rec1 = re.compile('(?P&lt;head&gt;\[\[foo[^\[]*)abc')
rec2 = re.compile('(?=\[\[foo[^\[]*)abc')
total1, total2 = 0.0, 0.0
def timeRE(ver):
    x = ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_1234567890_&lt;head&gt;_&lt;tail&gt;_&lt;/head&gt;_&lt;/tail&gt;_abcdefghijklmnopqrstuvwxyz_&lt;head&gt;[[fooBAR_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abc]]]]defghiojklmnopqrstuvwyz" * 100)
    t1 = time.time()
    if ver is 1:
        rec1.sub("\g&lt;head&gt;def", x)
    else:
        rec2.sub("def", x)
    return (time.time() - t1)
for x in xrange(50000):
    total1 += timeRE(1)
    total2 += timeRE(2)
print "Method 1: Avg run took: %+0.7f - With a total of: %+0.7f" % ((total1 / 50000.0), total1)
print "Method 2: Avg run took: %+0.7f - With a total of: %+0.7f" % ((total2 / 50000.0), total2)
</snippet></ROW><ROW><id>7423862</id><snippet>Method 1: Avg run took: +0.0004924 - With a total of: +24.6196477
Method 2: Avg run took: +0.0005921 - With a total of: +29.6053855
</snippet></ROW><ROW><id>7423994</id><snippet>AutoReq: no
</snippet></ROW><ROW><id>7423994</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>7423994</id><snippet>$PATH</snippet></ROW><ROW><id>7423995</id><snippet>writer = csv.writer(open("data.csv", "wb"), delimiter=";")
</snippet></ROW><ROW><id>7423995</id><snippet>class excel_semicolon(csv.excel):
    delimiter = ';'
register_dialect("excel-semicolon", excel_semicolon)
</snippet></ROW><ROW><id>7424040</id><snippet>VERSIONER_PYTHON_PREFER_32_BIT</snippet></ROW><ROW><id>7424040</id><snippet>/Library/Frameworks</snippet></ROW><ROW><id>7424040</id><snippet>VERSIONER_PYTHON_PREFER_32_BIT</snippet></ROW><ROW><id>7424040</id><snippet>arch -i386 /usr/local/bin/python2.7 django-admin.py ...
</snippet></ROW><ROW><id>7424304</id><snippet>ctypes</snippet></ROW><ROW><id>7424352</id><snippet>join()</snippet></ROW><ROW><id>7424352</id><snippet>list_of_strings = ['one', 'two', 'three']
print "\t".join(list_of_strings) #\t is the tab character
</snippet></ROW><ROW><id>7424352</id><snippet>one    two    three
</snippet></ROW><ROW><id>7424352</id><snippet>"\t".join</snippet></ROW><ROW><id>7424352</id><snippet>",".join</snippet></ROW><ROW><id>7424390</id><snippet>from W import X, Y, Z</snippet></ROW><ROW><id>7424390</id><snippet>__all__</snippet></ROW><ROW><id>7424390</id><snippet>__all__ = ('MyClass1', 'MyClass2', 'myvar1', …)
</snippet></ROW><ROW><id>7424390</id><snippet>import *</snippet></ROW><ROW><id>7424390</id><snippet>dir()</snippet></ROW><ROW><id>7424390</id><snippet>help(yourmodule)</snippet></ROW><ROW><id>7424390</id><snippet>__all__</snippet></ROW><ROW><id>7424390</id><snippet>dir()</snippet></ROW><ROW><id>7424390</id><snippet>from … import …</snippet></ROW><ROW><id>7424390</id><snippet>dir()</snippet></ROW><ROW><id>7424592</id><snippet>selenium</snippet></ROW><ROW><id>7424592</id><snippet>phantomjs</snippet></ROW><ROW><id>7424609</id><snippet>itertools.groupby</snippet></ROW><ROW><id>7424609</id><snippet>step = 1,1,1,1,2,2,2,2
time = 1,2,5,6,1,3,5,6

from itertools import groupby, izip
from operator import itemgetter

for key, group in groupby(izip(step, time), itemgetter(0)):
    group = [item[1] for item in group]
    print 'Step:', key, 'Min:', min(group), 'Max:', max(group)
</snippet></ROW><ROW><id>7424609</id><snippet>time</snippet></ROW><ROW><id>7424609</id><snippet>step</snippet></ROW><ROW><id>7424609</id><snippet>min</snippet></ROW><ROW><id>7424609</id><snippet>max</snippet></ROW><ROW><id>7424609</id><snippet>step.reverse()
for key, group in groupby(time, lambda _: step.pop()):
    group = tuple(group)
    print 'Step:', key, 'Min:', min(group), 'Max:', max(group)
</snippet></ROW><ROW><id>7424609</id><snippet>step</snippet></ROW><ROW><id>7424609</id><snippet>zip</snippet></ROW><ROW><id>7424609</id><snippet>time</snippet></ROW><ROW><id>7424673</id><snippet>setSelected</snippet></ROW><ROW><id>7424673</id><snippet>inline void QTreeWidgetItem::setSelected(bool aselect)
{ if (view) view-&gt;setItemSelected(this, aselect); }
</snippet></ROW><ROW><id>7424673</id><snippet>treeObj</snippet></ROW><ROW><id>7424673</id><snippet>temp</snippet></ROW><ROW><id>7424673</id><snippet>QTreeWidgetItem</snippet></ROW><ROW><id>7424673</id><snippet>addChild</snippet></ROW><ROW><id>7424673</id><snippet>addTopLevelItem</snippet></ROW><ROW><id>7424673</id><snippet>setSelected</snippet></ROW><ROW><id>7424673</id><snippet>setExpanded</snippet></ROW><ROW><id>7424772</id><snippet>connect()</snippet></ROW><ROW><id>7424772</id><snippet>send()</snippet></ROW><ROW><id>7424772</id><snippet>recv()</snippet></ROW><ROW><id>7424772</id><snippet>shutdown()</snippet></ROW><ROW><id>7424848</id><snippet>socket.setdefaulttimeout
</snippet></ROW><ROW><id>7424984</id><snippet>os.walk</snippet></ROW><ROW><id>7424984</id><snippet>for curdir, dirs, files in os.walk('/home/n00b'):
     print 'searching', files
     if 'program1.py' in files:
          print 'found'
          break
</snippet></ROW><ROW><id>7424984</id><snippet>in</snippet></ROW><ROW><id>7425349</id><snippet>for i, item in enumerate(reversed(items), 1):
    if item == 'item3':
        items_of_interest = items[-i:]
        break
else:
    # 'item3' wasn't found
</snippet></ROW><ROW><id>7425349</id><snippet>'item3'</snippet></ROW><ROW><id>7425349</id><snippet>reversed</snippet></ROW><ROW><id>7425349</id><snippet>i = list(reversed(items)).index('item3')
items_of_interest = items[-i-1:]
</snippet></ROW><ROW><id>7425349</id><snippet>'item3'</snippet></ROW><ROW><id>7425349</id><snippet>list(reversed())</snippet></ROW><ROW><id>7425349</id><snippet>[:]</snippet></ROW><ROW><id>7425349</id><snippet>reverse()</snippet></ROW><ROW><id>7425349</id><snippet>items_of_interest = []
for item in reversed(items):
    items_of_interest.append(item)
    if item == 'item3':
        break
items_of_interest.reverse()
</snippet></ROW><ROW><id>7425351</id><snippet>from django import forms
from django.forms.widgets import Widget
from django.utils.safestring import mark_safe


class Html5Email(Widget):

    def render(self, name, value, attrs=None):
        return mark_safe(u'&lt;input name="custom-email" type="email" /&gt;')


class YourForm(forms.Form):
    html5_email = forms.CharField(widget=Html5Email())
</snippet></ROW><ROW><id>7425630</id><snippet>from datetime import datetime, timedelta

def daterange(start_date, end_date):
  for n in range((end_date - start_date).days):
    yield start_date + timedelta(n)

start_date = '2011-09-01'
end_date = '2011-09-15'
format = '%Y-%m-%d'

start_date_object = datetime.strptime(start_date, format)
end_date_object = datetime.strptime(end_date, format)

for day in daterange(start_date_object, end_date_object):
  if day.weekday() in [5, 6]:
    print day.strftime(format)
</snippet></ROW><ROW><id>7425888</id><snippet>def get(self):
    deck = range(1, 101)
    shuffle(deck)
    items = db.GqlQuery("SELECT * FROM joke WHERE jokeID IN :1", deck[:3])
    template_values = {'items' : items}
    path = os.path.join(os.path.dirname(__file__), 'index.html')
    self.response.out.write(template.render(path,template_values))
</snippet></ROW><ROW><id>7425905</id><snippet>&gt;&gt;&gt; postal_code = re.search(r'.*(\d{5}(\-\d{4})?)$', address)
&gt;&gt;&gt; postal_code.groups()
('84532', None)
</snippet></ROW><ROW><id>7426528</id><snippet>ar1 = np.array([1,2,3,8,20,23])
ar2 = np.array([1,2,3,5,7,21,35])
def closest(ar1, ar2, iter):
    x = np.abs(ar1[iter] - ar2)
    index = np.where(x==x.min())
    value = ar2[index]
    return value

def find(x):
    return closest(ar1, ar2, x)
c = np.array(map(find, range(ar1.shape[0])))
</snippet></ROW><ROW><id>7426528</id><snippet> def closest(ar1, ar2, iter):
    x = np.abs(ar1[iter] - ar2)
    index = np.where(x==x.min())
    value = ar2[index]
    ar2[ar2==value] = -10000000
    return value
</snippet></ROW><ROW><id>7426657</id><snippet>self.data1</snippet></ROW><ROW><id>7426657</id><snippet>self.data2</snippet></ROW><ROW><id>7426657</id><snippet>def tick(time, self):</snippet></ROW><ROW><id>7426657</id><snippet>def tick(self, time):</snippet></ROW><ROW><id>7426740</id><snippet>a, b = the_array[...,:3], the_array[...,3:]
</snippet></ROW><ROW><id>7426740</id><snippet>a, b = [i[:3] for i in the_array], [i[3:] for i in the_array]
</snippet></ROW><ROW><id>7426763</id><snippet>smtp.starttls()
smtp.login('username', 'password')
</snippet></ROW><ROW><id>7426976</id><snippet>mylist = ['blah', 7, 'etc...']
#make sure the values are strings
mylist = [str(x) for x in mylist]
msg = ', '.join(mylist)

dlg = wx.MessageDialog(self, msg, "About", wx.OK)
dlg.showmodal()
dlg.Destroy()
</snippet></ROW><ROW><id>7426976</id><snippet>msg = '\n'.join(mylist)
</snippet></ROW><ROW><id>7427376</id><snippet>argparse</snippet></ROW><ROW><id>7427376</id><snippet>parser = argparse.ArgumentParser(description='Description of your program')
parser.add_argument('-f','--foo', help='Description for foo argument', required=True)
parser.add_argument('-b','--bar', help='Description for bar argument', required=True)
args = vars(parser.parse_args())
</snippet></ROW><ROW><id>7427376</id><snippet>args</snippet></ROW><ROW><id>7427376</id><snippet>if args['foo'] == 'Hello':
    # code here

if args['bar'] == 'World':
    # code here
</snippet></ROW><ROW><id>7427424</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>7427532</id><snippet>arg</snippet></ROW><ROW><id>7427532</id><snippet>tuple</snippet></ROW><ROW><id>7427532</id><snippet>def function(*args):
    for thing in sorted(args, key=attrgetter('attribute')):
</snippet></ROW><ROW><id>7427532</id><snippet>dict</snippet></ROW><ROW><id>7427532</id><snippet>sorted</snippet></ROW><ROW><id>7427532</id><snippet>dict</snippet></ROW><ROW><id>7427532</id><snippet>def function(*args):
    # or use a dict comprehension on 2.7+ 
    items = dict((thing.name, thing) for thing in args)

    # or just items.values on 3+
    for thing in sorted(items.itervalues(), key=attrgetter('attribute')):
</snippet></ROW><ROW><id>7427532</id><snippet>dict</snippet></ROW><ROW><id>7427532</id><snippet>for name, thing in sorted(items.iteritems(), key=lambda item: item[1].attribute):
</snippet></ROW><ROW><id>7427637</id><snippet>cd D:/my_favorite_scripts
python C:/Python27/Lib/idlelib/idle.py
</snippet></ROW><ROW><id>7427651</id><snippet>import re

html = '...... your html page .... '
textlist = re.findall(r'OpenWindow\.document\.write\(([^\)]*)\)', html)

print "".join(textlist)
</snippet></ROW><ROW><id>7427697</id><snippet>values &lt;- c(0.5, 0.5)
</snippet></ROW><ROW><id>7427857</id><snippet>__getattr__</snippet></ROW><ROW><id>7427857</id><snippet>__getattribute__</snippet></ROW><ROW><id>7427857</id><snippet>dir()</snippet></ROW><ROW><id>7428072</id><snippet>Popen(["start", "/MAX", "notepad", "macros.txt"], shell=True)
</snippet></ROW><ROW><id>7428176</id><snippet>.
├── app.yaml
├── conf.py
├── main.py
├── model.py
├── static
│   ├── 1.gif
│   ├── 2.gif
│   ├── 3.gif
│   ├── 4.gif
│   ├── anim.gif
│   ├── main.css
│   ├── main.js
└── templates
    ├── base.html
    ├── error.html
    ├── info.html
    ├── upload.html
    ├── user.html
    └── welcome.html
</snippet></ROW><ROW><id>7428299</id><snippet>import HTMLParser

text='&amp;ldquo; &amp;rdquo; ·'
parser=HTMLParser.HTMLParser()
desc=parser.unescape(text)
print(desc)
# “ ” ·
</snippet></ROW><ROW><id>7428299</id><snippet>desc=HTMLParser.HTMLParser().unescape(text)
</snippet></ROW><ROW><id>7428299</id><snippet>unescape</snippet></ROW><ROW><id>7428299</id><snippet>HTMLParser.unescape</snippet></ROW><ROW><id>7428299</id><snippet>htmlentitydefs.names2codepoint</snippet></ROW><ROW><id>7428299</id><snippet>'</snippet></ROW><ROW><id>7428299</id><snippet>text='&amp;ldquo; &amp;rdquo; ·'
import xml.sax.saxutils as saxutils
print(saxutils.unescape(text,{'&amp;ldquo;':'"', '&amp;rdquo;':'"', '·':'.', }))
# " " .
</snippet></ROW><ROW><id>7428299</id><snippet>saxutils.unescape</snippet></ROW><ROW><id>7428299</id><snippet>&lt;</snippet></ROW><ROW><id>7428299</id><snippet>&gt;</snippet></ROW><ROW><id>7428299</id><snippet>&amp;</snippet></ROW><ROW><id>7428299</id><snippet>&amp;ldquo;</snippet></ROW><ROW><id>7428299</id><snippet>&amp;rdquo;</snippet></ROW><ROW><id>7428299</id><snippet>&amp;middot</snippet></ROW><ROW><id>7428306</id><snippet>EnumProcessModules</snippet></ROW><ROW><id>7428306</id><snippet>GetModuleFileName</snippet></ROW><ROW><id>7428306</id><snippet>free()</snippet></ROW><ROW><id>7428306</id><snippet>from ctypes import *

def enumProcessModules():   
    # Get handle of current process
    kernel32 = windll.kernel32
    kernel32.GetCurrentProcess.restype = c_void_p
    hProcess = kernel32.GetCurrentProcess()

    # Load EnumProcessModules either from kernel32.dll or psapi.dll    
    try:          
        EnumProcessModulesProc = windll.psapi.EnumProcessModules
    except AttributeError:
        EnumProcessModulesProc = windll.kernel32.EnumProcessModules    
    EnumProcessModulesProc.restype = c_bool
    EnumProcessModulesProc.argtypes = [c_void_p, POINTER(c_void_p), c_ulong, POINTER(c_ulong)]

    hProcess = kernel32.GetCurrentProcess()
    hMods = (c_void_p * 1024)()
    cbNeeded = c_ulong()
    if EnumProcessModulesProc(hProcess, hMods, sizeof(hMods), byref(cbNeeded)):
        return hMods
    return None

def getLoadedModule(moduleName):     
    kernel32 = windll.kernel32
    kernel32.GetModuleFileNameA.restype = c_ulong
    kernel32.GetModuleFileNameA.argtypes = [c_void_p, c_char_p, c_ulong]

    modules = enumProcessModules()
    if modules is None:
        return None    
    for module in modules:
        cPath = c_char_p(' ' * 1024)
        kernel32.GetModuleFileNameA(module, cPath, c_ulong(1024))
        path = cPath.value
        if path.lower().endswith(moduleName):
            return module
    return None
</snippet></ROW><ROW><id>7428306</id><snippet>free()</snippet></ROW><ROW><id>7428306</id><snippet>    runtimeModuleHandle = getLoadedModule("msvcr80.dll")
    runtimeModule = ctypes.CDLL('', handle = runtimeModuleHandle) # cdecl calling convention
    runtimeModule.free.restype = None
    runtimeModule.free.argtypes = [ctypes.c_void_p]        
    myFreeProc = runtimeModule.free
</snippet></ROW><ROW><id>7428881</id><snippet>self.app.post('/path-to-request', data=dict(var1='data1', var2='data2', ...))
self.app.get('/path-to-request')
</snippet></ROW><ROW><id>7429157</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>7429157</id><snippet>python2.7 setup.py install</snippet></ROW><ROW><id>7429344</id><snippet>a</snippet></ROW><ROW><id>7429344</id><snippet>import numpy as np

a = np.array([0,1,2,3,4,5,5,6,7,8,9])
print(a)
print(a.sum())
# [0 1 2 3 4 5 5 6 7 8 9]
# 50
</snippet></ROW><ROW><id>7429344</id><snippet>a = np.ma.array(a, mask=False)
a.mask[3] = True
print(a)
print(a.sum())
# [0 1 2 -- 4 5 5 6 7 8 9]
# 47
</snippet></ROW><ROW><id>7429344</id><snippet>sum</snippet></ROW><ROW><id>7429344</id><snippet>compressed</snippet></ROW><ROW><id>7429344</id><snippet>print(a.compressed())
# [0 1 2 4 5 5 6 7 8 9]
</snippet></ROW><ROW><id>7430551</id><snippet>def app(environ, start_response):
    calendar = get_processed_file()

    start_response('200 OK', [
        ('Content-Type', 'text/icalendar; charset=utf-8'),
        ('Content-Disposition', 'inline; filename=calendar.ics'),
    ])
    yield calendar
</snippet></ROW><ROW><id>7430551</id><snippet>import wsgiref
wsgiref.CGIHandler().run(app)
</snippet></ROW><ROW><id>7430668</id><snippet>TextN</snippet></ROW><ROW><id>7430668</id><snippet>&lt;b&gt;</snippet></ROW><ROW><id>7430668</id><snippet>following</snippet></ROW><ROW><id>7430668</id><snippet>dom.xpath('//b[text() = "PointN:"]/following::node()')[0]
</snippet></ROW><ROW><id>7430690</id><snippet>In [22]: import pickle

In [23]: numlist = {'Person': ['2342342', '15:05']}

In [24]: outfile = open("log.txt", "wb")

In [25]: pickle.dump(numlist, outfile)

In [26]: outfile.close()

In [27]: infile = open("log.txt", "rb")

In [28]: pickle.load(infile)
Out[28]: {'Person': ['2342342', '15:05']}
</snippet></ROW><ROW><id>7430690</id><snippet>numlist</snippet></ROW><ROW><id>7430690</id><snippet>outfile</snippet></ROW><ROW><id>7430698</id><snippet>vowels, consonants = {}, {}
for (letters, data) in param_values.iteritems():
    relevant_dict = vowels if is_vowel(letters) else consonants
    relevant_dict[letters] = data
param_values = {'vowels': vowels, 'consonants': consonants}
</snippet></ROW><ROW><id>7430698</id><snippet>vowels</snippet></ROW><ROW><id>7430698</id><snippet>consonants</snippet></ROW><ROW><id>7430924</id><snippet>reverse_lazy</snippet></ROW><ROW><id>7430924</id><snippet>__init__</snippet></ROW><ROW><id>7430924</id><snippet>class WorkForm(forms.Form):
    # ...
    subcategory = forms.ChoiceField(
        required=True,
        label=_('SubCategory'),
        help_text=_('Which subcategory suits your work best.')
    )
    def __init__(self, *args, **kwargs):
        super(WorkForm, self).__init__(*args, **kwargs)
        self.fields['subcategory'].widget=DependantChoiceWidget(
            default_value=_('Select category first'),
            data_source_url=reverse('works-json-categories'),
            depends_on='category_id'
        ),
</snippet></ROW><ROW><id>7431013</id><snippet>now = time.time()
twodays_ago = now - 60*60*24*2 # Number of seconds in two days
if fileCreation &lt; twodays_ago:
    print "File is more than two days old"
</snippet></ROW><ROW><id>7431019</id><snippet>collections.Counter</snippet></ROW><ROW><id>7431019</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; combined = Counter([1,2,2,5]) | Counter([2,5,5,5,9])
&gt;&gt;&gt; list(combined.elements())
[1, 2, 2, 5, 5, 5, 9]
</snippet></ROW><ROW><id>7431019</id><snippet>|</snippet></ROW><ROW><id>7431198</id><snippet>out = im.resize((128, 128))
</snippet></ROW><ROW><id>7431320</id><snippet>if condition:
    ... tons of code ...
else:
    ... one line of code ...
</snippet></ROW><ROW><id>7431385</id><snippet>settings.py</snippet></ROW><ROW><id>7431385</id><snippet>DATABASES</snippet></ROW><ROW><id>7431385</id><snippet>default</snippet></ROW><ROW><id>7431385</id><snippet>NAME</snippet></ROW><ROW><id>7431385</id><snippet>CURRENT_DIR= '/Users/brandizzi/Documents/software/netunong'
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': CURRENT_DIR+ '/database.db', # &lt;- The path
        'USER': '',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '',
    }
}
</snippet></ROW><ROW><id>7431385</id><snippet>python manage.py shell</snippet></ROW><ROW><id>7431385</id><snippet>&gt;&gt;&gt; import settings
&gt;&gt;&gt; settings.DATABASES['default']['NAME']
'/Users/brandizzi/Documents/software/netunong/database.db'
</snippet></ROW><ROW><id>7431385</id><snippet>os.path.abspath</snippet></ROW><ROW><id>7431385</id><snippet>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; os.path.abspath(settings.DATABASES['default']['NAME'])
'/Users/brandizzi/Documents/software/netunong/database.db'
</snippet></ROW><ROW><id>7431570</id><snippet>some.py</snippet></ROW><ROW><id>7431570</id><snippet>another.py</snippet></ROW><ROW><id>7431570</id><snippet>native</snippet></ROW><ROW><id>7431570</id><snippet>native.some</snippet></ROW><ROW><id>7431570</id><snippet>main()</snippet></ROW><ROW><id>7431570</id><snippet>go()</snippet></ROW><ROW><id>7431570</id><snippet>scripts</snippet></ROW><ROW><id>7431653</id><snippet>__sentry__</snippet></ROW><ROW><id>7431653</id><snippet>AttributeError</snippet></ROW><ROW><id>7431846</id><snippet>\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00\x1d\x08\x06\x00\x00\x00\xcb\x9en\x87\x00\x00\x01\xc9IDATH\r\xc5\x971K\x03A\x10\x85s\nB \x10\xb0\n\xa4\xb2J\x95* \x08\x82\x95\xbfA\x10\xfc\x01V\xb6\x82\x95?\xc0J\x10\x04[[\xc16U@\xb0\x8d`/(\x8a\x82\x08Z\t\x12\x89\xdf$\xd9p\x9c\xae\xfb&amp;\x9c8\xf0\xd8\xbd\xdb\xb7o^\xe6\x96\xb9K6\x1c\x0e+\xb3D\x96e\xf3\xeck\xb3\xffj\x96\xfda\xcf\\\x98\xa8#\x89\xdb\xe0\x1c\xfe\x00\xf4\x99\x0f@\x17\xec\x80\xba\xaa3\xe5Y\x05\x14\xb0\xa1\x06\x0e\xc0=\xb0\xb2\xfd\x84\x17\xee\xaf(z\x81#%72\xb1\x1bIZ4r\x03\xaf\x16\x12\xa4F\xc9\x00\x82\xf6\xbcM\xb8\x98,v\xbd\x9fJ\x1c\xd6\xd53\xd0 \xf9\x12Pc]%\xaa\x06\x9e\x11\xfcTE\xe1\xd9y\x91B2@\xb9&gt;P{\x90\x14\xc7$\xe3K!\x19\x98(Y\x15\xd4xR\x89\x1e\x03\xef\xaa(\xbc7\x95\xeb1\xd0RE\xe1-\xab\\\x8f\x01\xcf\x19\xb8\xfb\x0b\x03\x9e\x9e\x7f\xad\x1a\x90\x1a\x915\rb\x15\xdc\x82X\xf3\t\xf7\x1f\xe1tB\xa3I\x8d\xb2\x81\x89\x89=\xc1\xc0v*i~\xdds\x06\xc8]QJ\xabpLk\x1cy7\xa99;\x16@\x1f\x84r\x17\xc7K\xe3\xa4t\xf2\xeb\xde\n\xd8;\xe1\xb7\x13n\xcd\xca^\\z\xe4\xdd\xa4\xe6\xa8^\x80\xe2\xaf.^\x9f\xa4t\xf2\xeb\xd2!$i\x13\x1c\n\xc9\x83\x993\xb8\xad|\xa2\xd8&lt;j\x00\x01{\xde\x9b\xa0\x0b\x82\xb0w\xec\xb1w\x0bTe\x03\x90;\xc0~\xad}^y\x13\xc6\xf8\xafh\x1d\x81o\xfdaZ\x01\x167\x80\xf2\x8ccI\xd4\xfb=\xf2\xac\x85\x8a\x8c\x0cp\xe3\x14\xa8\x02e\xf1\x8e\xcd\x84\x85}&gt;\x95%\xea\xd5iX\x1f\xf0|\xeb\x99\xe12\xa3i\x06\xfc\x7f&amp;\xca\xb30\xaa\xc0byzn\xa5\xbaU\xe0?\rT\xbf\x00\x87\x89 \xa8s3+7\x00\x00\x00\x00IEND\xaeB`\x82
</snippet></ROW><ROW><id>7431846</id><snippet>NSData *data = [NSData dataWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@"anImage" ofType:@"jpg"]];
NSString *hexFormatString = [data describe];
hexFormatString = [[hexFormatString stringByTrimmingCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@"&lt;&gt;"]] stringByReplacingOccurrencesOfString:@" " withString:@""];
NSMutableString * newString = [NSMutableString string];    
for (int x=0; x&lt;[hexFormatString length]; x+=2) {
    NSString *component = [hexFormatString substringWithRange:NSMakeRange(x, 2)];
    int value = 0;
    sscanf([component cStringUsingEncoding:NSASCIIStringEncoding], "%x", &amp;value);
    if ((value &lt;=46 &amp;&amp; value &gt;= 45) || (value &lt;=57 &amp;&amp; value &gt;= 48) || (value &lt;=90 &amp;&amp; value &gt;= 65) || (value == 95) || (value &lt;=122 &amp;&amp; value &gt;= 97)) {  //48-57, 65-90, 97-122
        [newString appendFormat:@"%c", (char)value];
    }
    else {
        [newString appendFormat:@"%%%@", [component uppercaseString]];
    }
}
</snippet></ROW><ROW><id>7431946</id><snippet>&lt;td&gt;
    ${_('User name')}
&lt;/td&gt;
</snippet></ROW><ROW><id>7431946</id><snippet>_</snippet></ROW><ROW><id>7431946</id><snippet>_</snippet></ROW><ROW><id>7431946</id><snippet>_</snippet></ROW><ROW><id>7431946</id><snippet>def my_func(x):
    return x

print a.get_report('table_body.html', data={'_' : my_func})
</snippet></ROW><ROW><id>7432274</id><snippet>os.path.join()</snippet></ROW><ROW><id>7432274</id><snippet>print</snippet></ROW><ROW><id>7432274</id><snippet>move()</snippet></ROW><ROW><id>7432274</id><snippet>shutil.move(os.path.join(root, filename), os.path.join(destDir, filename))
</snippet></ROW><ROW><id>7432274</id><snippet>destDir</snippet></ROW><ROW><id>7432571</id><snippet>In [8]: def f(): pass
   ...: 

In [9]: g = f

In [10]: f.__name__
Out[10]: 'f'

In [11]: g.__name__
Out[11]: 'f'
</snippet></ROW><ROW><id>7432947</id><snippet>urlparse</snippet></ROW><ROW><id>7432947</id><snippet>In [1]: from urlparse import urlparse

In [2]: urlparse('http://www.stackoverflow.com/questions/answers/help/').netloc
Out[2]: 'www.stackoverflow.com'
</snippet></ROW><ROW><id>7432947</id><snippet>.netloc</snippet></ROW><ROW><id>7432947</id><snippet>www.stackoverflow.com:80</snippet></ROW><ROW><id>7432947</id><snippet>.hostname</snippet></ROW><ROW><id>7432951</id><snippet>self</snippet></ROW><ROW><id>7432951</id><snippet>store</snippet></ROW><ROW><id>7432951</id><snippet>(abc, FOAF['knows'], def)</snippet></ROW><ROW><id>7432951</id><snippet>store.add()</snippet></ROW><ROW><id>7432951</id><snippet>store.add((abc, FOAF['knows'], def), None)</snippet></ROW><ROW><id>7432957</id><snippet>numpy.histogramdd</snippet></ROW><ROW><id>7432957</id><snippet>(x_dim*y_dim*z_dim, 3)</snippet></ROW><ROW><id>7432957</id><snippet>histogramdd</snippet></ROW><ROW><id>7432957</id><snippet>
import numpy 

n = 400  # approximate largest cube size that works on my laptop
# Fill channel cubes with random 8-bit integers
r = numpy.random.randint(256, size=(n,n,n)).astype(numpy.uint8)
g = numpy.random.randint(256, size=(n,n,n)).astype(numpy.uint8)
b = numpy.random.randint(256, size=(n,n,n)).astype(numpy.uint8)

# reorder data into for suitable for histogramming
data = numpy.vstack((r.flat, g.flat, b.flat)).astype(numpy.uint8).T

# Destroy originals to save space
del(r); del(g); del(b)

m = 256                                  # size of 3d histogram cube
hist, edges = numpy.histogramdd(
    data, bins=m, range=((-0.5,255.5),(-0.5,255.5),(-0.5,255.5))
    )

# Check that it worked
assert hist.sum() == n**3, 'Failed to conserve pixels'
</snippet></ROW><ROW><id>7432957</id><snippet>histogramdd</snippet></ROW><ROW><id>7433916</id><snippet>import profile

def myfunction():
    bla bla bla

profile.run('myfunction()')
</snippet></ROW><ROW><id>7433916</id><snippet>python -m cProfile myscript.py
</snippet></ROW><ROW><id>7433916</id><snippet>def myfunction():
    for i in range(100):
        print(i)

def myotherfunction():
    for i in range(200):
        print(i)

def main():
    """ main program to run over several days """
    for _ in range(3):
        myfunction()

    myotherfunction()

if __name__ == '__main__':
    profile.run('main()') # will execute your program
                          # and show profiling results afterwards
</snippet></ROW><ROW><id>7434000</id><snippet>pickle</snippet></ROW><ROW><id>7434000</id><snippet>marshal</snippet></ROW><ROW><id>7434000</id><snippet>marshal</snippet></ROW><ROW><id>7434000</id><snippet>pickle</snippet></ROW><ROW><id>7434133</id><snippet>print dateDict[int(item)]</snippet></ROW><ROW><id>7434133</id><snippet>for idx, val in enumerate(catList):
  print dateList[idx]
</snippet></ROW><ROW><id>7434608</id><snippet>/usr/local/bin/django-admin.py</snippet></ROW><ROW><id>7434608</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>7434608</id><snippet>django-admin.py</snippet></ROW><ROW><id>7434608</id><snippet>/usr/local/bin/</snippet></ROW><ROW><id>7434608</id><snippet>/&lt;virtualenvpath&gt;/bin/</snippet></ROW><ROW><id>7434608</id><snippet>activate</snippet></ROW><ROW><id>7434745</id><snippet>g</snippet></ROW><ROW><id>7434745</id><snippet>f</snippet></ROW><ROW><id>7434745</id><snippet>g(x) = f(1/x)</snippet></ROW><ROW><id>7434745</id><snippet>x=0</snippet></ROW><ROW><id>7434745</id><snippet>f</snippet></ROW><ROW><id>7434745</id><snippet>g</snippet></ROW><ROW><id>7435155</id><snippet>import numpy as np
a = np.zeros((2,3,4))
i = np.array([0,0,1])
j = np.array([0,0,1])
k = np.array([0,0,3])

ijk = np.vstack((i,j,k)).T
H,edge = np.histogramdd(ijk,bins=a.shape)
a += H  
</snippet></ROW><ROW><id>7435173</id><snippet>@register.simple_tag 
def get_verbose_name(object): 
    return object._meta.verbose_name
</snippet></ROW><ROW><id>7435173</id><snippet>{% with objs|first as obj %}
    &lt;div class="title"&gt;{% get_verbose_name obj %}&lt;/div&gt;
{% endwith %}
</snippet></ROW><ROW><id>7435557</id><snippet>&gt;&gt;&gt; def somecode():
...    try:
...       import cStringIO as StringIO
...       print 'got cStringIO'
...    except ImportError:
...       import StringIO
...       print 'got StringIO'
&gt;&gt;&gt; somecode()
got cStringIO
</snippet></ROW><ROW><id>7435557</id><snippet>&gt;&gt;&gt; import __builtin__
&gt;&gt;&gt; original_import = __builtin__.__import__
&gt;&gt;&gt; def import_hook(name, *args, **kwargs):
...    if name == 'cStringIO': raise ImportError('test case module import failure')
...    else: return original_import(name, *args, **kwargs)
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; __builtin__.__import__ = import_hook
&gt;&gt;&gt; somecode()
got StringIO
</snippet></ROW><ROW><id>7435557</id><snippet>&gt;&gt;&gt; __builtin__.__import__ = original_import
</snippet></ROW><ROW><id>7435665</id><snippet>foo_list = Foo.objects.filter(params).select_related()
</snippet></ROW><ROW><id>7435665</id><snippet>for f in foo_list:
    f.bar
</snippet></ROW><ROW><id>7435700</id><snippet>private</snippet></ROW><ROW><id>7435700</id><snippet>__getattribute__</snippet></ROW><ROW><id>7435700</id><snippet>help()</snippet></ROW><ROW><id>7435874</id><snippet>$.ajax({
    url: "http://www.urltomydomain.com",
    dataType: "jsonp",
    success: function(json) {
        console.log('success');
        console.log(json);
    },
    error: function(x,y,z) {
        // x.responseText should have what's wrong
        console.log(x)
        console.log(y)
        console.log(z)
    }
});
</snippet></ROW><ROW><id>7435874</id><snippet>dataType: "jsonp"</snippet></ROW><ROW><id>7435874</id><snippet>?callback=?</snippet></ROW><ROW><id>7435874</id><snippet>getJSON</snippet></ROW><ROW><id>7435874</id><snippet>?callback=?</snippet></ROW><ROW><id>7435874</id><snippet>$.getJSON('http://www.urltomydomain.com?callback=?', function(json){
    console.log('success');
    console.log(json);
});
</snippet></ROW><ROW><id>7435874</id><snippet>?callback=?</snippet></ROW><ROW><id>7435874</id><snippet>?</snippet></ROW><ROW><id>7435909</id><snippet>    &lt;subscriber
        for="my.package.interfaces.IMyContent
             zope.app.container.interfaces.IObjectAddedEvent"                 
handler=".subscribers.blockPortletsUpponMyContentCreation"
                  /&gt;
</snippet></ROW><ROW><id>7435909</id><snippet>from zope.component import getMultiAdapter, getUtility
from plone.portlets.interfaces import IPortletManager
from plone.portlets.interfaces import ILocalPortletAssignmentManager
from plone.portlets.constants import USER_CATEGORY
from plone.portlets.constants import GROUP_CATEGORY
from plone.portlets.constants import CONTENT_TYPE_CATEGORY
from plone.portlets.constants import CONTEXT_CATEGORY

def blockPortletsUpponMyContentCreation(mycontent, event):
    for manager_name in ('plone.leftcolumn','plone.rightcolumn'):
        manager = getUtility(IPortletManager, name=manager_name)
        assignable = getMultiAdapter((mycontent, manager,), ILocalPortletAssignmentManager)
        for category in (GROUP_CATEGORY, CONTENT_TYPE_CATEGORY,CONTEXT_CATEGORY,USER_CATEGORY):
            assignable.setBlacklistStatus(category, 1)
</snippet></ROW><ROW><id>7435946</id><snippet>America/New_York</snippet></ROW><ROW><id>7435946</id><snippet>Etc/UTC</snippet></ROW><ROW><id>7435946</id><snippet>pytz</snippet></ROW><ROW><id>7435946</id><snippet>datetime</snippet></ROW><ROW><id>7435946</id><snippet>datetime</snippet></ROW><ROW><id>7435946</id><snippet>def localize_epoch_time(epoch_time, timezone=pytz.UTC):
  u"Given an epoch time return an accurate, timezone-aware datetime object"
  t = localtime(epoch_time)
  epochdt = datetime(*(t[:6] + (int((epoch_time - long(epoch_time)) * 1000000), timezone)
  if hasattr(timezone, 'normalize'):  # pytz tzinfo objects have this
    return timezone.normalize(epochdt)
  else: # tzinfo object not from pytz module
    return epochdt
</snippet></ROW><ROW><id>7436314</id><snippet>for key, value in my_dict.iteritems()
</snippet></ROW><ROW><id>7436314</id><snippet>key</snippet></ROW><ROW><id>7436314</id><snippet>value</snippet></ROW><ROW><id>7436464</id><snippet>./configure</snippet></ROW><ROW><id>7436464</id><snippet>.</snippet></ROW><ROW><id>7436464</id><snippet>configure</snippet></ROW><ROW><id>7436464</id><snippet>/usr/bin</snippet></ROW><ROW><id>7436464</id><snippet>make</snippet></ROW><ROW><id>7436464</id><snippet>PATH</snippet></ROW><ROW><id>7436464</id><snippet>make</snippet></ROW><ROW><id>7436464</id><snippet>./make</snippet></ROW><ROW><id>7436464</id><snippet>make</snippet></ROW><ROW><id>7436464</id><snippet>PATH</snippet></ROW><ROW><id>7436464</id><snippet>/</snippet></ROW><ROW><id>7436464</id><snippet>.</snippet></ROW><ROW><id>7436464</id><snippet>/usr/bin/././././</snippet></ROW><ROW><id>7436464</id><snippet>/usr/bin</snippet></ROW><ROW><id>7436464</id><snippet>..</snippet></ROW><ROW><id>7436464</id><snippet>/usr/bin/../bin/../bin/../lib</snippet></ROW><ROW><id>7436464</id><snippet>/usr/lib</snippet></ROW><ROW><id>7436464</id><snippet>configure</snippet></ROW><ROW><id>7436464</id><snippet>./</snippet></ROW><ROW><id>7436464</id><snippet>make</snippet></ROW><ROW><id>7436464</id><snippet>make</snippet></ROW><ROW><id>7436464</id><snippet>which</snippet></ROW><ROW><id>7436464</id><snippet>which make</snippet></ROW><ROW><id>7436738</id><snippet>class UserAdminPage(webapp.RequestHandler):
    def get(self):
        order_by = self.request.get('order')

        query = Owner.all() 
        query.filter("owner =", user)
        if not order_by:
            query.order("owner_tag")
        elif order_by == 'date':
            query.order("-date")

        ...
        &lt;a href="your_page_url?order=date"&gt;order tags by most recent&lt;/a&gt;
</snippet></ROW><ROW><id>7436906</id><snippet>Boost::Python</snippet></ROW><ROW><id>7436906</id><snippet>Boost::Python</snippet></ROW><ROW><id>7436906</id><snippet>Boost::Python</snippet></ROW><ROW><id>7436912</id><snippet>import socket

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
result = s.connect_ex(('127.0.0.1', 3306))

if(result == 0) :
    print 'socket is open'
s.close()
</snippet></ROW><ROW><id>7437001</id><snippet>__eq__</snippet></ROW><ROW><id>7437001</id><snippet>==</snippet></ROW><ROW><id>7437001</id><snippet>&gt;&gt;&gt; class foo:
...     def __init__(self,x):
...         self.x = x
...     def __eq__(self,y):
...         return int(self.x)==int(y)
... 
&gt;&gt;&gt; f = foo(5)
&gt;&gt;&gt; f == '5'
True
&gt;&gt;&gt; 5 == '5'
False
</snippet></ROW><ROW><id>7437238</id><snippet>def foo(**kwargs):
    pass

foo(**{ 'foo' : 123, 'bar' : 456 })
</snippet></ROW><ROW><id>7437239</id><snippet># -*- coding: utf-8 -*- 

bar = "hello ｡◕‿‿◕｡"
assert(isinstance(bar, str))

first_part = bar[:9]
second_part = bar[9:]
print first_part
print second_part
</snippet></ROW><ROW><id>7437239</id><snippet>hello ｡
◕‿‿◕｡
</snippet></ROW><ROW><id>7437366</id><snippet>string</snippet></ROW><ROW><id>7437366</id><snippet>string</snippet></ROW><ROW><id>7437366</id><snippet>find</snippet></ROW><ROW><id>7437366</id><snippet>str</snippet></ROW><ROW><id>7437366</id><snippet>string</snippet></ROW><ROW><id>7437366</id><snippet>find</snippet></ROW><ROW><id>7437366</id><snippet>string.find(ch) # ', index' if you want
</snippet></ROW><ROW><id>7437366</id><snippet>string</snippet></ROW><ROW><id>7437366</id><snippet>str.find(string, ch) # ', index' if you want
</snippet></ROW><ROW><id>7437366</id><snippet>string</snippet></ROW><ROW><id>7437366</id><snippet>str</snippet></ROW><ROW><id>7437366</id><snippet>find</snippet></ROW><ROW><id>7437366</id><snippet>find</snippet></ROW><ROW><id>7437366</id><snippet>find</snippet></ROW><ROW><id>7437366</id><snippet>find</snippet></ROW><ROW><id>7437366</id><snippet>start</snippet></ROW><ROW><id>7437366</id><snippet>end</snippet></ROW><ROW><id>7437450</id><snippet>logging</snippet></ROW><ROW><id>7437670</id><snippet>#/usr/bin/env python
# this file is tester.py for testing my super-complicated algorithm
def algorithm(data):
    items = split(data)
    out = items[0]
    while item in items[1:]:
        if len(item) in (2, 3):
            out += item
        else
            out += ' ' + item
    # etc...
    return out

assert '123456789 123456712' == algorithm('123456789 1234567 12')
assert '1231234 123456712 123456789' == algorithm('123 1234 1234567 12 123456789')
# etc...
</snippet></ROW><ROW><id>7437724</id><snippet>sys.stdin = open('/dev/tty')
answer = raw_input('Commit anyway? [N/y] ')
if answer.strip().lower().startswith('y'):
    ...
</snippet></ROW><ROW><id>7437724</id><snippet>git commit</snippet></ROW><ROW><id>7437724</id><snippet>python .git/hooks/pre-commit</snippet></ROW><ROW><id>7437724</id><snippet>% ps axu
...
unutbu   21801  0.0  0.1   6348  1520 pts/1    S+   17:44   0:00 git commit -am line 5a
unutbu   21802  0.1  0.2   5708  2944 pts/1    S+   17:44   0:00 python .git/hooks/pre-commit
</snippet></ROW><ROW><id>7437724</id><snippet>/proc/21802/fd</snippet></ROW><ROW><id>7437724</id><snippet>pre-commit</snippet></ROW><ROW><id>7437724</id><snippet>  /proc/21802/fd:
  lrwx------ 1 unutbu unutbu 64 2011-09-15 17:45 0 -&gt; /dev/null
  lrwx------ 1 unutbu unutbu 64 2011-09-15 17:45 1 -&gt; /dev/pts/1
  lrwx------ 1 unutbu unutbu 64 2011-09-15 17:45 2 -&gt; /dev/pts/1
  lr-x------ 1 unutbu unutbu 64 2011-09-15 17:45 3 -&gt; /dev/tty
  lr-x------ 1 unutbu unutbu 64 2011-09-15 17:45 5 -&gt; /dev/null
</snippet></ROW><ROW><id>7437724</id><snippet>pre-commit</snippet></ROW><ROW><id>7437724</id><snippet>sys.stdin</snippet></ROW><ROW><id>7437724</id><snippet>/dev/null</snippet></ROW><ROW><id>7437724</id><snippet>sys.stdin = open('/dev/tty')</snippet></ROW><ROW><id>7437724</id><snippet>sys.stdin</snippet></ROW><ROW><id>7437724</id><snippet>raw_input</snippet></ROW><ROW><id>7437823</id><snippet>def f():

    ...
    yield
    ...
    yield
    ... 


for step, value in enumerate(f()):
    try:
        time.sleep(2)
    except KeyboardInterrupt:
        print(step) # step holds the number of the last executed function
</snippet></ROW><ROW><id>7437823</id><snippet>yield</snippet></ROW><ROW><id>7437823</id><snippet>value</snippet></ROW><ROW><id>7437823</id><snippet>def f():

    ...
    yield 'first function finished'
    ...
    yield 'almost done'
    ... 


for message in f():
    try:
        time.sleep(2)
    except KeyboardInterrupt:
        print(message)
</snippet></ROW><ROW><id>7437983</id><snippet>import sys
def str_to_obj(astr):
    '''
    str_to_obj('scipy.stats.stats') returns the associated module
    str_to_obj('scipy.stats.stats.chisquare') returns the associated function
    '''
    # print('processing %s'%astr)
    try:
        return globals()[astr]
    except KeyError:
        try:
            __import__(astr)
            mod=sys.modules[astr]
            return mod
        except ImportError:
            module,_,basename=astr.rpartition('.')
            if module:
                mod=str_to_obj(module)
                return getattr(mod,basename)
            else:
                raise
</snippet></ROW><ROW><id>7438050</id><snippet>recv</snippet></ROW><ROW><id>7438050</id><snippet>recv</snippet></ROW><ROW><id>7438050</id><snippet>Len</snippet></ROW><ROW><id>7438050</id><snippet>recv</snippet></ROW><ROW><id>7438050</id><snippet>recv</snippet></ROW><ROW><id>7438144</id><snippet>Exit</snippet></ROW><ROW><id>7438144</id><snippet>E</snippet></ROW><ROW><id>7438144</id><snippet>ipython -noconfirm_exit</snippet></ROW><ROW><id>7438457</id><snippet>posix_ipc</snippet></ROW><ROW><id>7438457</id><snippet>sysv_ipc</snippet></ROW><ROW><id>7438457</id><snippet>mmap(2)</snippet></ROW><ROW><id>7438457</id><snippet>CLONE_VM</snippet></ROW><ROW><id>7438457</id><snippet>clone(2)</snippet></ROW><ROW><id>7438457</id><snippet>CLONE_VM</snippet></ROW><ROW><id>7438457</id><snippet>shm_open(3)</snippet></ROW><ROW><id>7438457</id><snippet>int</snippet></ROW><ROW><id>7438457</id><snippet>ftruncate(2)</snippet></ROW><ROW><id>7438457</id><snippet>mmap(2)</snippet></ROW><ROW><id>7438466</id><snippet>loadFinished</snippet></ROW><ROW><id>7438466</id><snippet>web.page().currentFrame().toHtml()</snippet></ROW><ROW><id>7438466</id><snippet>from PySide.QtCore import *
from PySide.QtGui import *
from PySide.QtWebKit import *
import sys
import codecs

class Downloader(QObject):
    # To be emitted when every items are downloaded
    done = Signal()

    def __init__(self, urlList, parent = None):
        super(Downloader, self).__init__(parent)
        self.urlList = urlList
        self.counter = 0        
        # As you probably don't need to display the page
        # you can use QWebPage instead of QWebView
        self.page = QWebPage(self)      
        self.page.loadFinished.connect(self.save)
        self.startNext()

    def currentUrl(self):
        return self.urlList[self.counter][0]

    def currentFilename(self):
        return self.urlList[self.counter][1]

    def startNext(self):
        print "Downloading %s..."%self.currentUrl()
        self.page.mainFrame().load(self.currentUrl())

    def save(self, ok):
        if ok:            
            data = self.page.mainFrame().toHtml()
            with codecs.open(self.currentFilename(), encoding="utf-8", mode="w") as f:
                f.write(data)
            print "Saving %s to %s."%(self.currentUrl(), self.currentFilename())            
        else:
            print "Error while downloading %s\nSkipping."%self.currentUrl()
        self.counter += 1
        if self.counter &lt; len(self.urlList):            
            self.startNext()
        else:
            self.done.emit()

urlList = [("http://news.google.com", "google.html"), 
    ("http://www.stackoverflow.com","stack.html"), 
    ("http://www.imdb.com", "imdb.html")]

app = QApplication(sys.argv)
downloader = Downloader(urlList)
# Quit when done
downloader.done.connect(app.quit)

# To view the pages
web = QWebView()
# To prevent user action that would interrupt the current page loading
web.setDisabled(True) 
web.setPage(downloader.page)
web.show()

sys.exit(app.exec_())
</snippet></ROW><ROW><id>7438505</id><snippet>import numpy
vals = numpy.array([[1,2,3],[4,5,6],[7,8,7],[0,4,5],[2,2,1],[0,0,0],[5,4,3]])
a = (vals[:,0] == vals[:,1]) | (vals[:,1] == vals[:,2]) | (vals[:,0] == vals[:,2])
vals = numpy.delete(vals, numpy.where(a), axis=0)
</snippet></ROW><ROW><id>7438518</id><snippet>date= db.DateTimeProperty(auto_now_add=True)
</snippet></ROW><ROW><id>7438518</id><snippet>&lt;a href="/useradminpage?order=xyz"&gt;&lt;span id=small&gt;most recent&lt;/span&gt;&lt;/a&gt;
</snippet></ROW><ROW><id>7438518</id><snippet>elif order_by == "xyz":
    query.order("date")
</snippet></ROW><ROW><id>7438771</id><snippet>pip freeze &gt; requirements.txt
</snippet></ROW><ROW><id>7438771</id><snippet>Django==1.3
Fabric==1.0.1
etc...
</snippet></ROW><ROW><id>7438771</id><snippet>pip install -r requirements.txt
</snippet></ROW><ROW><id>7438826</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>7438826</id><snippet>:</snippet></ROW><ROW><id>7438826</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>7438826</id><snippet>/usr/bin/python&lt;newline&gt;</snippet></ROW><ROW><id>7438826</id><snippet>/bin/sh</snippet></ROW><ROW><id>7438826</id><snippet>dos2unix /home/someuser/public_html/xml_feed/cron_job_wod.py
</snippet></ROW><ROW><id>7438826</id><snippet>dos2unix</snippet></ROW><ROW><id>7438980</id><snippet>file = open(os.path.join(path,infile),'r')
</snippet></ROW><ROW><id>7439162</id><snippet>import sys

f = open(sys.argv[1],"r")
contents = f.read()
f.close()
print contents 
</snippet></ROW><ROW><id>7439162</id><snippet>import sys
with open(sys.argv[1], 'r') as f:
    contents = f.read()
print contents
</snippet></ROW><ROW><id>7439254</id><snippet>import sys
sys.path.insert(0, 'lib.zip')
</snippet></ROW><ROW><id>7439254</id><snippet>#!/usr/bin/python

import unittest
import sys
sys.path.insert(0, 'lib.zip')

if __name__ == "__main__":
    all_tests = unittest.TestLoader().discover('.')
    unittest.TextTestRunner().run(all_tests)
</snippet></ROW><ROW><id>7439551</id><snippet>return</snippet></ROW><ROW><id>7439551</id><snippet>yield</snippet></ROW><ROW><id>7439551</id><snippet>def numberList(items):
     number = 1
     for item in items:
         yield str((number, item))
         number = number + 1

item_lines = '\n'.join(numberList(['red', 'orange', 'yellow', 'green']))
</snippet></ROW><ROW><id>7439551</id><snippet>return</snippet></ROW><ROW><id>7439551</id><snippet>def numberList(items):
     indexeditems = []
     number = 1
     for item in items:
         indexeditems.append(str((number, item)))
         number = number + 1
     return indexeditems

item_lines = '\n'.join(numberList(['red', 'orange', 'yellow', 'green']))
</snippet></ROW><ROW><id>7439551</id><snippet>enumerate</snippet></ROW><ROW><id>7439551</id><snippet>item_lines = '\n'.join(str(x) for x in enumerate(['red', 'orange', 'yellow', 'green'], 1)))
</snippet></ROW><ROW><id>7439551</id><snippet>'\n'.join(str(x) for x in iterable)</snippet></ROW><ROW><id>7439551</id><snippet>print</snippet></ROW><ROW><id>7439551</id><snippet>print</snippet></ROW><ROW><id>7439601</id><snippet>split</snippet></ROW><ROW><id>7439601</id><snippet>collections.Counter</snippet></ROW><ROW><id>7439601</id><snippet>from collections import Counter
numstring = "1,2,3,4,5,1,6,7,1,8,9,10,11,12,1,1,2"
numcount = Counter(numstring.split(','))
</snippet></ROW><ROW><id>7439601</id><snippet>from collections import defaultdict
numstring = "1,2,3,4,5,1,6,7,1,8,9,10,11,12,1,1,2"
numcount = defaultdict(int)
for num in numstring.split(','):
    numcount[num] += 1
</snippet></ROW><ROW><id>7439601</id><snippet>count</snippet></ROW><ROW><id>7439601</id><snippet>numstring = "1,2,3,4,5,1,6,7,1,8,9,10,11,12,1,1,2"
numlist = numstring.split(',')
numcount = dict((num, numlist.count(num)) for num in set(numlist))
</snippet></ROW><ROW><id>7439886</id><snippet>print repr(open("yourfile.txt", "rb").read(20))
</snippet></ROW><ROW><id>7439886</id><snippet>&gt;&gt;&gt; ucode = u"70154:"
&gt;&gt;&gt; for sfx in ["", "LE", "BE"]:
...     enc = "UTF-16" + sfx
...     print enc, repr(ucode.encode(enc))
...
UTF-16 '\xff\xfe7\x000\x001\x005\x004\x00:\x00'
UTF-16LE '7\x000\x001\x005\x004\x00:\x00'
UTF-16BE '\x007\x000\x001\x005\x004\x00:'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>7439886</id><snippet>[pseudocode]
if f2b in `"\xff\xfe\xff"`: UTF-16
elif f2b[1] == `"\x00"`: UTF-16LE
elif f2b[0] == `"\x00"`: UTF-16BE
else: cp1252 or UTF-8 or whatever else is prevalent in your neck of the woods.
</snippet></ROW><ROW><id>7439886</id><snippet>&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.getpreferredencoding()
'cp1252'
</snippet></ROW><ROW><id>7439886</id><snippet>rawbytes = open(myFile, "rb").read()
enc = detect_encoding(rawbytes[:2])
for line in rawbytes.decode(enc).splitlines():
    # whatever
</snippet></ROW><ROW><id>7439886</id><snippet>unicode</snippet></ROW><ROW><id>7439915</id><snippet>c = pickle.load( open( "fromserver.p" ) )
</snippet></ROW><ROW><id>7439915</id><snippet>l</snippet></ROW><ROW><id>7439915</id><snippet>l</snippet></ROW><ROW><id>7439995</id><snippet>q.put(QueuedCall('twitter', q, Twitter.get_status, [5,], __op_complete))
</snippet></ROW><ROW><id>7440043</id><snippet>from uwsgidecorators import *

#this will execute the_task() every 30 seconds in the spooler
@timer(30, target='spooler')
def the_task(signum)
    do_the_long_task()
</snippet></ROW><ROW><id>7440051</id><snippet>{{ contact.first_name }} {{ contact.last_name }}
</snippet></ROW><ROW><id>7440051</id><snippet>+</snippet></ROW><ROW><id>7440145</id><snippet>quopri</snippet></ROW><ROW><id>7440159</id><snippet>def get_even_numbers(numbers):
    bo = []
    for num in numbers:
        if num % 2 == 0:
            bo.append(num)
    return bo
</snippet></ROW><ROW><id>7440159</id><snippet>def get_even_numbers(l):
    return [n for n in l if n % 2 == 0]
</snippet></ROW><ROW><id>7440357</id><snippet>.parse()</snippet></ROW><ROW><id>7440357</id><snippet>Parser().parse(…)</snippet></ROW><ROW><id>7440534</id><snippet>class TourAdmin(admin.ModelAdmin):
   def queryset(self, request):
      qs = super(TourAdmin, self).queryset(request)
      if request.user.is_superuser:
            return qs
      return qs.filter(ActionUserCode=request.user)
admin.site.register(Tour,TourAdmin)
</snippet></ROW><ROW><id>7441338</id><snippet>time</snippet></ROW><ROW><id>7441380</id><snippet>import os
os.system('/usr/bin/ssh localhost ls -la /')
</snippet></ROW><ROW><id>7442146</id><snippet>extend</snippet></ROW><ROW><id>7442146</id><snippet>&gt;&gt;&gt;l = [1,2]
&gt;&gt;&gt;l.extend([2,3])
&gt;&gt;&gt;l
[1,2,2,3]
</snippet></ROW><ROW><id>7442146</id><snippet>l</snippet></ROW><ROW><id>7442146</id><snippet>class Foo</snippet></ROW><ROW><id>7442146</id><snippet>foo = Foo()
foo.modify_object("here are modifications")
</snippet></ROW><ROW><id>7442213</id><snippet>sys.path.append(os.path.abspath(os.path.dirname(test_path)))
</snippet></ROW><ROW><id>7442346</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; desc = 'FBgn0207418 type=gene; loc=scaffold_12875:complement(14361770..14363857); ...'
&gt;&gt;&gt; fields = dict(re.findall(r'(\w+)=(.*?);', desc))
&gt;&gt;&gt; fields['type']
'gene'
&gt;&gt;&gt; fields['length']
'2088'
</snippet></ROW><ROW><id>7442406</id><snippet>self.build.allChanges()</snippet></ROW><ROW><id>7442406</id><snippet>self.setProperty()</snippet></ROW><ROW><id>7442487</id><snippet>$string = 'asdf';
print pack('A10', $string) . "|&lt;-\n";
</snippet></ROW><ROW><id>7442487</id><snippet>asdf      |&lt;-
</snippet></ROW><ROW><id>7442487</id><snippet>*</snippet></ROW><ROW><id>7442487</id><snippet>pack</snippet></ROW><ROW><id>7442487</id><snippet>import hmac, hashlib

def get_sign(key, *data):
     msg = ''.join(str(item) for item in data)
     h = hmac.new(key, msg, hashlib.sha256)
     return h.hexdigest().upper()
</snippet></ROW><ROW><id>7442487</id><snippet>$ print getSIGN(1234, 456, "foo", '123.45', 'http://example.com', 'foo@example.com', 'blah');  
7FA608240FA2DC04F15DB2CDB58C83F4ED6C28C5C5B4063C5A7605F9D69F170B
</snippet></ROW><ROW><id>7442487</id><snippet>In [12]: get_sign('blah', 1234, 456, "foo", '123.45',
                  'http://example.com',  'foo@example.com')
Out[12]: '7FA608240FA2DC04F15DB2CDB58C83F4ED6C28C5C5B4063C5A7605F9D69F170B'
</snippet></ROW><ROW><id>7442767</id><snippet>auto_now</snippet></ROW><ROW><id>7442792</id><snippet>import numpy as np
a = np.array([0,1,2,3,4,5,6,7,8,9])
num_neighbor=3    

for index in range(len(a)):
    left = a[:index][-num_neighbor:]
    right= a[index+1:num_neighbor+index+1]
    print(index,left,right)
</snippet></ROW><ROW><id>7442792</id><snippet>(0, array([], dtype=int32), array([1, 2, 3]))
(1, array([0]), array([2, 3, 4]))
(2, array([0, 1]), array([3, 4, 5]))
(3, array([0, 1, 2]), array([4, 5, 6]))
(4, array([1, 2, 3]), array([5, 6, 7]))
(5, array([2, 3, 4]), array([6, 7, 8]))
(6, array([3, 4, 5]), array([7, 8, 9]))
(7, array([4, 5, 6]), array([8, 9]))
(8, array([5, 6, 7]), array([9]))
(9, array([6, 7, 8]), array([], dtype=int32))
</snippet></ROW><ROW><id>7442792</id><snippet>a[index-num_neighbor:index]</snippet></ROW><ROW><id>7442792</id><snippet>index&lt;num_neighbor</snippet></ROW><ROW><id>7442792</id><snippet>s[i:j]</snippet></ROW><ROW><id>7442792</id><snippet>index=1</snippet></ROW><ROW><id>7442792</id><snippet>a[index-num_neighbor:index] = a[-2:1] = a[10-2:1] = a[8:1] = []</snippet></ROW><ROW><id>7442880</id><snippet>var my_array = ['a', 'b', 'c'];
alert(my_array.indexOf('b'));
alert(my_array.indexOf('dd'));
</snippet></ROW><ROW><id>7442990</id><snippet>import numpy as np
import itertools

a_dict = {'a': [1,2], 'b': [2,], 'c': [1,3]}
b_dict = {'a': [6], 'c': [4]}

print(list(itertools.chain.from_iterable(
    itertools.product(value, b_dict[key]) for key,value in a_dict.iteritems()
    if key in b_dict)))
# [(1, 6), (2, 6), (1, 4), (3, 4)]
</snippet></ROW><ROW><id>7443204</id><snippet>multprocessing</snippet></ROW><ROW><id>7443279</id><snippet># -*- coding: utf-8 -*-
a = r"Челябинск"
print "Encode from UTF-8 to UTF-8:",unicode(a,'utf-8').encode('utf-8')
print "Encode from ISO8859-1 to UTF-8:",unicode(a,'iso8859-1').encode('utf-8')
</snippet></ROW><ROW><id>7443669</id><snippet>ID = bytes(ID, 'utf8')[0]</snippet></ROW><ROW><id>7443669</id><snippet>Create(ID)</snippet></ROW><ROW><id>7443669</id><snippet>input</snippet></ROW><ROW><id>7444044</id><snippet>try:
  import setproctitle
  setproctitle.setproctitle('my-awesome-program')
except:
  pass # Ignore errors, since this is only cosmetic
</snippet></ROW><ROW><id>7444560</id><snippet>sudo chmod a+x /usr/bin/python.2.6.2
</snippet></ROW><ROW><id>7444871</id><snippet>test = call(['/opt/program/something/lookup', 'search', '"bob"'])
</snippet></ROW><ROW><id>7445207</id><snippet>numpy.sum(cum_ret, axis=1)</snippet></ROW><ROW><id>7445207</id><snippet>numpy.sum(cum_ret, axis=1) != 0</snippet></ROW><ROW><id>7445207</id><snippet>numpy.select()</snippet></ROW><ROW><id>7445207</id><snippet>print row</snippet></ROW><ROW><id>7445207</id><snippet>import numpy
cum_ret = numpy.array([[0,0,0,0],[-0.234,-0.365,-0.634,-0.453], [-0.334,-0.465,-0.534,-0.653],[-0.134,-0.265,-0.334,-0.453]])
b = cum_ret + 1
c = numpy.cumprod(b, axis=0)
</snippet></ROW><ROW><id>7445725</id><snippet>for i range(len(mylist)):
    mylist[i] = chr(ord(mylist[i])+1)
</snippet></ROW><ROW><id>7445725</id><snippet>for i, character in enumerate(mylist):
    mylist[i] = chr(ord(character)+1)
</snippet></ROW><ROW><id>7446210</id><snippet>setParent()</snippet></ROW><ROW><id>7446210</id><snippet>show()</snippet></ROW><ROW><id>7446210</id><snippet>self.show()</snippet></ROW><ROW><id>7446210</id><snippet>self.setWindowFlags(...)</snippet></ROW><ROW><id>7446253</id><snippet>len(set(natean)) + len(set(nwrongpea))</snippet></ROW><ROW><id>7446387</id><snippet>request.raw_post_data</snippet></ROW><ROW><id>7446387</id><snippet>request.POST</snippet></ROW><ROW><id>7446986</id><snippet>def clean_email(self):
  """Prevent duplicate email addresses."""
  if 'email' in self.changed_data:
      if self.Meta.model.all().filter('email =', self.cleaned_data['email']).count():
        raise forms.ValidationError('Duplicate Entry: %s.' %
                                     self.cleaned_data['email'])
  return self.cleaned_data['email']
</snippet></ROW><ROW><id>7447090</id><snippet>def foo(numpy.ndarray[double, ndim=1] arr not None):
    cdef int i
    cdef double elem
    for i in xrange(10):
      elem = arr[i]
      arr[i] = 1.0 + elem
    return # + add this
</snippet></ROW><ROW><id>7447090</id><snippet>import numpy
cimport numpy
cimport cython

@cython.boundscheck(False)
def foo(numpy.ndarray[double, ndim=1] arr not None):
    cdef int i
    cdef double elem
    for i in xrange(10):
      elem = arr[i]
      arr[i] = 1.0 + elem
    return 
</snippet></ROW><ROW><id>7447369</id><snippet>with pattern.findall(row) as f:
</snippet></ROW><ROW><id>7447369</id><snippet>__enter__</snippet></ROW><ROW><id>7447369</id><snippet>__exit__</snippet></ROW><ROW><id>7447369</id><snippet>pattern.findall</snippet></ROW><ROW><id>7447369</id><snippet>list</snippet></ROW><ROW><id>7447369</id><snippet>with</snippet></ROW><ROW><id>7447369</id><snippet>__exit__</snippet></ROW><ROW><id>7447369</id><snippet>f = pattern.findall(row)
</snippet></ROW><ROW><id>7447439</id><snippet>c = a * b
c = np.sum(c,axis=3)
c = np.sum(c,axis=2)
</snippet></ROW><ROW><id>7447439</id><snippet>c = np.sum(np.sum(a*b,axis=2),axis=2)
</snippet></ROW><ROW><id>7447596</id><snippet>import logging

# Set up loggers and handlers.
# ...

class LevelFilter(logging.Filter):
    def __init__(self, level):
        self.level = level

    def filter(self, record):
        return record.levelno == self.level

debugLogFileHandler.addFilter(LevelFilter(logging.DEBUG))
infoLogFileHandler.addFilter(LevelFilter(logging.INFO))
</snippet></ROW><ROW><id>7448270</id><snippet>Session = sqlalchemy.orm.sessionmaker(...)
def transaction(self, callback):
  session = sqlalchemy.orm.scoped_session(Session)
  try:
    result = callback(session)
  except:
    session.rollback()
    raise
  else:
    session.commit()
  finally:
    session.close()
  return result
</snippet></ROW><ROW><id>7448270</id><snippet>def updatetxn(pk, newvalue):
  def txn(session):
    obj = session.query(myclass).filter_by(id=pk).one()
    obj.field = newvalue
    session.add(obj)
  return txn

transaction(updatetxn(4, 'abc'))
</snippet></ROW><ROW><id>7448345</id><snippet>numpy.array()</snippet></ROW><ROW><id>7448345</id><snippet>aa = np.array([[1,2,3,4], [2,3,4,5], [5,6,7,8], [9,10,11,12]])
bb = np.array([[100,200,300,400], [100,200,300,400], [100,200,300,400], [100,200,300,400]])
</snippet></ROW><ROW><id>7448345</id><snippet>aa[:,1]</snippet></ROW><ROW><id>7448345</id><snippet>aa[2]</snippet></ROW><ROW><id>7448345</id><snippet>vec2</snippet></ROW><ROW><id>7448345</id><snippet>return</snippet></ROW><ROW><id>7448345</id><snippet>print</snippet></ROW><ROW><id>7448345</id><snippet>vec2</snippet></ROW><ROW><id>7448345</id><snippet>import numpy as np
aa = np.array([[1,2,3,4], [2,3,4,5], [5,6,7,8], [9,10,11,12]])
bb = np.array([[100,200,300,400], [100,200,300,400], [100,200,300,400], [100,200,300,400]])

def vec2(a, b):
    return a + b

func2 = np.vectorize(vec2)
print func2(bb[:,1], aa[:,1])
</snippet></ROW><ROW><id>7448356</id><snippet>from google.appengine.ext import blobstore

upload_files = self.get_uploads('file')
blob_info = upload_files[0]
blob_reader = blobstore.BlobReader(blob_info.key())

message.attachments = [blob_info.filename,blob_reader.read()]
</snippet></ROW><ROW><id>7448356</id><snippet>blob = blobstore.BlobInfo.get(blob_info.key())
blob.delete()
</snippet></ROW><ROW><id>7448570</id><snippet>bison</snippet></ROW><ROW><id>7448669</id><snippet> a = int('0' + someString)
</snippet></ROW><ROW><id>7448749</id><snippet>def main():
    all the various bits of script 1 except the import 
    return x

if __name__ == "__main__":
    x= main()
    print( x )
</snippet></ROW><ROW><id>7448749</id><snippet>import script1
print script1.main()
</snippet></ROW><ROW><id>7448810</id><snippet>memcache.set()</snippet></ROW><ROW><id>7448810</id><snippet>memcache</snippet></ROW><ROW><id>7448810</id><snippet>size</snippet></ROW><ROW><id>7448810</id><snippet>foosTab = []
for foo in foos:
    foosTab.append(foo)
</snippet></ROW><ROW><id>7448810</id><snippet>foosTab = [foo for foo in foos]
</snippet></ROW><ROW><id>7448810</id><snippet>count()</snippet></ROW><ROW><id>7449276</id><snippet>order by fields</snippet></ROW><ROW><id>7449276</id><snippet>sqlalchemy.orm.Query(AlphabetTable) \
    .filter(AlphabetTable.letter.in_("gack")) \
    .order_by(sqlalchemy.sql.expression.case(((AlphabetTable.letter == "g", 1),
                                              (AlphabetTable.letter == "a", 2),
                                              (AlphabetTable.letter == "c", 3),
                                              (AlphabetTable.letter == "k", 4))))
</snippet></ROW><ROW><id>7449405</id><snippet>Process p = r.exec("cmd /c c:\\path\\to\\python python\\test.py");
</snippet></ROW><ROW><id>7449785</id><snippet>IN</snippet></ROW><ROW><id>7449785</id><snippet>?</snippet></ROW><ROW><id>7449785</id><snippet>(?)</snippet></ROW><ROW><id>7449785</id><snippet>&gt;&gt;&gt; t = ('APSEC-2261',)
&gt;&gt;&gt; cursor.execute('SELECT remediation_ticket FROM remediation WHERE issue_key IN (?)', t)
&lt;sqlite3.Cursor object at 0x1723570&gt;
&gt;&gt;&gt; cursor.execute('SELECT remediation_ticket FROM remediation WHERE issue_key IN (?)', t).fetchall()
[(u'179708',)]
&gt;&gt;&gt; # Show off how to check IN against multiple values.
...
&gt;&gt;&gt; t = ('APSEC-2261','APSEC-2262')
&gt;&gt;&gt; cursor.execute('SELECT remediation_ticket FROM remediation WHERE issue_key IN (%s)' % (('?, ' * len(t))[:-2]), t)
&lt;sqlite3.Cursor object at 0x1723570&gt;
&gt;&gt;&gt; cursor.execute('SELECT remediation_ticket FROM remediation WHERE issue_key IN (%s)' % (('?, ' * len(t))[:-2]), t).fetchall()
[(u'179708',), (u'180208',), (u'180240',), (u'180245',), (u'180248',), (u'180334',), (u'180341',), (u'180365',), (u'180375',)]
</snippet></ROW><ROW><id>7449785</id><snippet>?</snippet></ROW><ROW><id>7449785</id><snippet>q_value_tuple = ()
for i in incidents:
    q_value_tuple += (i,)
tickets = db_query(q_select = 'remediation_ticket', q_table = 'remediation', q_where = 'issue_key', q_where_operator = 'IN', q_value = q_value_tuple)
</snippet></ROW><ROW><id>7449785</id><snippet>rows = cursor.execute('SELECT %s FROM %s WHERE %s %s (%s)' % (q_select, q_table, q_where, q_where_operator, ('?, ' * len(q_value))[:-2]), q_value).fetchall()
</snippet></ROW><ROW><id>7449795</id><snippet>lxml</snippet></ROW><ROW><id>7449795</id><snippet>ElementTree</snippet></ROW><ROW><id>7450102</id><snippet>template.render(local_vars={})
</snippet></ROW><ROW><id>7450102</id><snippet>from mako.template import Template
mytemplate = Template(filename='/docs/mytmpl.txt', module_directory='/tmp/mako_modules')
print mytemplate.render()
</snippet></ROW><ROW><id>7450135</id><snippet>csv</snippet></ROW><ROW><id>7450135</id><snippet>import re

for email in emails:
    print email
    lines = email.split('\n')
    name = re.search(r'name\s*', lines[0], re.I)
    price = re.search(r'off(er(ing)?)?\s*', lines[0], re.I)
    for line in lines[1:]:
        n = line[name.start():name.end()].strip()
        p = line[price.start():price.end()].strip()
        print (n, p)
    print
</snippet></ROW><ROW><id>7450135</id><snippet>emails</snippet></ROW><ROW><id>7450135</id><snippet>Cusip     NAME              Original Current Cashflow Collat Offering
362341D71 GSAA 2005-15 2A2   10,000   8,783  FCF       5/25  65.000
026932AC7 AHM 2007-1 GA1C    9,867    7,250  Spr Snr   OA    56.250 
('GSAA 2005-15 2A2', '65.000')
('AHM 2007-1 GA1C', '56.250')

Name            O/F    C/F    Cpn  FICO CAL WALB  60+    Notes             Offer
CSMC 06-9 7A1   25.00  11.97  L+45  728  26  578  35.21  FLT,AS,0.0%       50-00
LXS 07-10H 2A1  68.26  34.01  L+16  744   6  125  33.98  SS,9.57%          39-00`
('CSMC 06-9 7A1', '50-00')
('LXS 07-10H 2A1', '39-00')

CUSIP      Name               BID   x Off       SIZE   C/E    60++  WAL   ARM  CFLW
86360KAA6  SAMI 06-AR3 11A1   57-00 x 59-00     73+MM  46.9%  67.0%  65   POA  SSPT
86361HAQ7  SAMI 06-AR7 A12    19-08 x 21-08     32+MM  15.4%  61.1%  61   POA SRMEZ
('SAMI 06-AR3 11A1', '59-00')
('SAMI 06-AR7 A12', '21-08')
</snippet></ROW><ROW><id>7450478</id><snippet>params = "mv /full_path_to_folder_source/*.nib /full_path_to_folder_target/"
</snippet></ROW><ROW><id>7450478</id><snippet>'/full_path_to_folder_source/*.nib'</snippet></ROW><ROW><id>7450478</id><snippet>mv</snippet></ROW><ROW><id>7450478</id><snippet>Popen</snippet></ROW><ROW><id>7450666</id><snippet>import numpy as np

A = np.array([3,4,4,3,6])
B = np.array([2,5,2,6,3,6,2,2,5])

def ismember(a, b):
    # tf = np.in1d(a,b) # for newer versions of numpy
    tf = np.array([i in b for i in a])
    u = np.unique(a[tf])
    index = np.array([(np.where(b == i))[0][-1] if t else 0 for i,t in zip(a,tf)])
    return tf, index

tf,ix=ismember(A,B)
print(tf)
# [ True False False  True  True]
print(ix)
# [4 0 0 4 5]
print(A[tf])
# [3 3 6]
print(B[ix[tf]])
# [3 3 6]
</snippet></ROW><ROW><id>7450745</id><snippet>http://www.ows.newegg.com/Stores.egg/Menus</snippet></ROW><ROW><id>7450745</id><snippet>response</snippet></ROW><ROW><id>7450745</id><snippet>json.loads()</snippet></ROW><ROW><id>7450745</id><snippet>data</snippet></ROW><ROW><id>7450745</id><snippet>lxml</snippet></ROW><ROW><id>7450745</id><snippet>&lt;ul&gt;
  &lt;li&gt;&lt;a href="/Store?{StoreID}"&gt;{StoreTitle}&lt;/a&gt;&lt;/li&gt;
  ...
&lt;/ul&gt;
</snippet></ROW><ROW><id>7450745</id><snippet>{StoreID}</snippet></ROW><ROW><id>7450745</id><snippet>{StoreTitle}</snippet></ROW><ROW><id>7450745</id><snippet>urllib2</snippet></ROW><ROW><id>7450745</id><snippet>json</snippet></ROW><ROW><id>7450745</id><snippet>lxml</snippet></ROW><ROW><id>7450808</id><snippet>import matplotlib
matplotlib.use("wx")
from pylab import *
figure(1)
plot([1,2,3,4,5])
thismanager = get_current_fig_manager()
thismanager.window.SetPosition((500, 0))
show()
</snippet></ROW><ROW><id>7450808</id><snippet>TkAgg</snippet></ROW><ROW><id>7450808</id><snippet>thismanager.window.wm_geometry("+500+0")
</snippet></ROW><ROW><id>7450877</id><snippet>__init__</snippet></ROW><ROW><id>7450877</id><snippet>self.store = []
</snippet></ROW><ROW><id>7450877</id><snippet>addToBack</snippet></ROW><ROW><id>7450877</id><snippet>self.store[self.endIndex] = value
</snippet></ROW><ROW><id>7450877</id><snippet>2</snippet></ROW><ROW><id>7450877</id><snippet>value</snippet></ROW><ROW><id>7450877</id><snippet>[][0] = 2
</snippet></ROW><ROW><id>7450877</id><snippet>0</snippet></ROW><ROW><id>7450951</id><snippet>struct.unpack_from()</snippet></ROW><ROW><id>7450951</id><snippet>struct.unpack()</snippet></ROW><ROW><id>7450951</id><snippet>import base64
import struct

encoded = 'Dn3LQ3np ... 9BnKRA=='

# decode the string
data = base64.standard_b64decode(encoded)

# ensure that there's enough data for 32-bit floats
assert len(data) % 4 == 0

# determine how many floats there are
count = len(data) // 4

# unpack the data as floats
result = struct.unpack('&lt;{0}f'.format(count), # one big structure of `count` floats
                       data)                  # results returned as a tuple
</snippet></ROW><ROW><id>7450951</id><snippet>import zlib

decompressed = zlib.decompress(data)
</snippet></ROW><ROW><id>7451383</id><snippet>linelist</snippet></ROW><ROW><id>7451383</id><snippet>string.find("ArrayOf_xsd_string")</snippet></ROW><ROW><id>7451383</id><snippet>re.search(...)</snippet></ROW><ROW><id>7451383</id><snippet>_</snippet></ROW><ROW><id>7451383</id><snippet>\W</snippet></ROW><ROW><id>7451383</id><snippet>for line in f:
  line = re.compile('[\W_]+') # overwrites the line you just read??
  line.sub('', string.printable)
</snippet></ROW><ROW><id>7451383</id><snippet>with open('data.txt', 'r') as f:
    theDict = {}
    found = -1
    for (lineno,line) in enumerate(f):
        if found &lt; 0:
            if line.find('ArrayOf_xsd_string')&gt;=0:
                found = lineno
                entries = []
            continue
        # Grab following 6 lines...
        if 2 &lt;= (lineno-found) &lt;= 6+1:
            entry = line.strip(' ""{}[]=:,')
            entries.append(entry)
        #then create a dict with the key from line 5
        if (lineno-found) == 6+1:
            key = entries.pop(4)
            theDict[key] = entries
            print key, ','.join(entries) # comma-separated, no quotes
            #break # if you want to end on first match
            found = -1 # to process multiple matches
</snippet></ROW><ROW><id>7451383</id><snippet>123456 001,ABCD,1234,wordy type stuff,more stuff, etc
234567 002,ABCD,1234,wordy type stuff,more stuff, etc
345678 003,ABCD,1234,wordy type stuff,more stuff, etc
</snippet></ROW><ROW><id>7451436</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
fig = plt.figure(figsize=(5,5))
ax = plt.axes([0,0,1,1])
triangle1 = mpatches.Polygon(np.array([[0,1],[1,0],[1,1]]), fc="blue")
triangle2 = mpatches.Polygon(np.array([[-0.1,-1],[-2,-2],[-2,-1]]), fc="red")
ax.add_artist(triangle1)
ax.add_artist(triangle2)
ax.set_xlim(-3, 3)
ax.set_ylim(-3, 3)
plt.show()
</snippet></ROW><ROW><id>7451553</id><snippet>class mywords:
    def __init__(self, a):
        self.words = a
        self.length = map(lambda w: len(w), a)
    def append(self, string):
        self.words.append(string)
        self.length.append(len(string))


a = mywords(['A', 'list', 'of', 'words'])

a.append("this")
print a.words
print a.length
</snippet></ROW><ROW><id>7451554</id><snippet>self.enstring</snippet></ROW><ROW><id>7451554</id><snippet>destring</snippet></ROW><ROW><id>7451554</id><snippet>enstring</snippet></ROW><ROW><id>7451554</id><snippet>decrypto</snippet></ROW><ROW><id>7451554</id><snippet>self</snippet></ROW><ROW><id>7451554</id><snippet>class encryptString():
    def crypto(self, string):
        self.enstring = base64.b64encode(string)
        print self.enstring
    def decrypto(self):
        self.destring = base64.b64decode(self.enstring)
        print self.destring
</snippet></ROW><ROW><id>7451554</id><snippet>enstring</snippet></ROW><ROW><id>7451554</id><snippet>destring</snippet></ROW><ROW><id>7451554</id><snippet>crypto</snippet></ROW><ROW><id>7451554</id><snippet>decrypto</snippet></ROW><ROW><id>7451959</id><snippet>&gt;&gt;&gt; def func(*args, **kwargs):
...     print(kwargs)
&gt;&gt;&gt; func(a=1, b=2)
{'a': 1, 'b': 2}
</snippet></ROW><ROW><id>7451959</id><snippet>__</snippet></ROW><ROW><id>7451959</id><snippet>icontains</snippet></ROW><ROW><id>7452057</id><snippet>inspect.getargspec</snippet></ROW><ROW><id>7452057</id><snippet>def foo(a, b='B'): pass

import inspect
print inspect.getargspec(foo)
</snippet></ROW><ROW><id>7452057</id><snippet>inspect</snippet></ROW><ROW><id>7452057</id><snippet>func.func_code.co_varnames</snippet></ROW><ROW><id>7452057</id><snippet>func.func_defaults</snippet></ROW><ROW><id>7452057</id><snippet>func.__defaults__</snippet></ROW><ROW><id>7452396</id><snippet>__setattr__</snippet></ROW><ROW><id>7452396</id><snippet>TypeSystem</snippet></ROW><ROW><id>7452396</id><snippet>@some_prop.setter
def some_prop(self,value):
    self.some_prop = value
</snippet></ROW><ROW><id>7452396</id><snippet>some_prop = self.some_prop
</snippet></ROW><ROW><id>7452396</id><snippet>class Entity(TypeSystem):

    @property
    def some_prop(self):
        some_prop = self.data.get('some_prop')
        if some_prop is None and hasattr(self,"_some_prop"):
            some_prop = self._some_prop
        return some_prop

    @some_prop.setter
    def some_prop(self,value):
        self._some_prop = value
</snippet></ROW><ROW><id>7452578</id><snippet>gasp</snippet></ROW><ROW><id>7452578</id><snippet>ben@ubuntu:~$ python '/home/ben/Documents/Python/gasp.py' 
</snippet></ROW><ROW><id>7452578</id><snippet>from gasp import *
</snippet></ROW><ROW><id>7452578</id><snippet>import</snippet></ROW><ROW><id>7452578</id><snippet>gasp.py</snippet></ROW><ROW><id>7453147</id><snippet>subprocess</snippet></ROW><ROW><id>7453147</id><snippet>oFid.fileno()</snippet></ROW><ROW><id>7453147</id><snippet>gzip</snippet></ROW><ROW><id>7453147</id><snippet>def fileno(self):
    """Invoke the underlying file object's fileno() method."""
    return self.fileobj.fileno()
</snippet></ROW><ROW><id>7453147</id><snippet>gzip</snippet></ROW><ROW><id>7453147</id><snippet>import gzip
from subprocess import Popen, PIPE
from threading import Thread

def f(input, output):
    for line in iter(input.readline, ''):
        output.write(line)

p = Popen(["sort"], bufsize=-1, stdin=PIPE, stdout=PIPE)
Thread(target=f, args=(p.stdout, gzip.open('out.gz', 'wb'))).start()

for s in "cafebabe":
    p.stdin.write(s+"\n")
p.stdin.close()
</snippet></ROW><ROW><id>7453147</id><snippet>$ python gzip_subprocess.py  &amp;&amp; od -c out.gz &amp;&amp; zcat out.gz 
0000000 037 213  \b  \b 251   E   t   N 002 377   o   u   t  \0   K 344
0000020   J 344   J 002 302   d 256   T       L 343 002  \0   j 017   j
0000040   k 020  \0  \0  \0
0000045
a
a
b
b
c
e
e
f
</snippet></ROW><ROW><id>7453204</id><snippet>body</snippet></ROW><ROW><id>7453204</id><snippet>&lt;message&gt;
  &lt;body&gt;hi!&lt;/body&gt;
  &lt;html xmlns='http://jabber.org/protocol/xhtml-im'&gt;
    &lt;body xmlns='http://www.w3.org/1999/xhtml'&gt;
      &lt;p style='font-weight:bold'&gt;hi!&lt;/p&gt;
    &lt;/body&gt;
  &lt;/html&gt;
&lt;/message&gt;
</snippet></ROW><ROW><id>7453313</id><snippet>from rpy2.robjects.packages import importr
from rpy2.robjects.vectors import FloatVector

stats = importr('stats')

p_adjust = stats.p_adjust(FloatVector(pvalue_list), method = 'BH')
</snippet></ROW><ROW><id>7453368</id><snippet>0</snippet></ROW><ROW><id>7453368</id><snippet>UINT64_MAX-1</snippet></ROW><ROW><id>7453368</id><snippet>UINT64_MAX-1</snippet></ROW><ROW><id>7453368</id><snippet>eventfd</snippet></ROW><ROW><id>7453368</id><snippet>0</snippet></ROW><ROW><id>7453368</id><snippet>write</snippet></ROW><ROW><id>7453368</id><snippet>UINT64_MAX-1</snippet></ROW><ROW><id>7453368</id><snippet>int ev = eventfd(0, 0);
write(ev, &amp;(uint64_t const){ UINT64_MAX-1 }, sizeof(uint64_t));
</snippet></ROW><ROW><id>7453513</id><snippet>input</snippet></ROW><ROW><id>7453513</id><snippet>name</snippet></ROW><ROW><id>7453513</id><snippet>form.getvalue(key)</snippet></ROW><ROW><id>7453513</id><snippet>key</snippet></ROW><ROW><id>7453513</id><snippet>name</snippet></ROW><ROW><id>7453622</id><snippet>def destruct_directed_run(num_set, start, direction):
  while start in num_set:
    num_set.remove(start)
    start += direction
  return start

def destruct_single_run(num_set):
  arbitrary_member = iter(num_set).next()
  bottom = destruct_directed_run(num_set, arbitrary_member, -1) 
  top = destruct_directed_run(num_set, arbitrary_member + 1, 1)
  return range(bottom + 1, top)

def max_run(data_set):
  nums = set(data_set)
  best_run = []
  while nums:
    cur_run = destruct_single_run(nums)
    if len(cur_run) &gt; len(best_run):
      best_run = cur_run
  return best_run

def test_max_run(data_set, expected):
  actual = max_run(data_set)
  print data_set, actual, expected, 'Pass' if expected == actual else 'Fail'

print test_max_run([10,21,45,22,7,2,67,19,13,45,12,11,18,16,17,100,201,20,101], range(16, 23))
print test_max_run([1,2,3], range(1, 4))
print max_run([1,3,5]), 'any singleton output fine'
</snippet></ROW><ROW><id>7453869</id><snippet>pcap.pcap(name='ppp0')</snippet></ROW><ROW><id>7453869</id><snippet>dpkt.ppp.PPP(pkt)</snippet></ROW><ROW><id>7453877</id><snippet>?</snippet></ROW><ROW><id>7454302</id><snippet>class Document(object):

    def __init__(self, index, label, bowdict):
        self.index = index
        self.label = label
        self.bowdict = bowdict
</snippet></ROW><ROW><id>7454302</id><snippet>bowdict</snippet></ROW><ROW><id>7454302</id><snippet>{ 9:3, 94:1, 109:1,  ... } 
</snippet></ROW><ROW><id>7454302</id><snippet>Document</snippet></ROW><ROW><id>7454302</id><snippet>from collections import defaultdict

def aggregate(docs, label):
    bow = defaultdict(int)
    for doc in docs:
        if doc.label == label:
           for (word, counter) in doc.bowdict.items():
                bow[word] += counter  
    return bow    
</snippet></ROW><ROW><id>7454302</id><snippet>cPickle</snippet></ROW><ROW><id>7454693</id><snippet>&gt;&gt;&gt; pick_level = 1
&gt;&gt;&gt; lockpicking_level1_maxxp = 40
&gt;&gt;&gt; lockpicking_level2_maxxp = 70
&gt;&gt;&gt; lockpicking_level3_maxxp = 100
&gt;&gt;&gt; locals()["lockpicking_level%d_maxxp" % pick_level]
40
</snippet></ROW><ROW><id>7454816</id><snippet>%d</snippet></ROW><ROW><id>7454816</id><snippet>%f</snippet></ROW><ROW><id>7454908</id><snippet>class Thing(object): # New-style class
    def __init__(self, whatever):
        self._whatever = whatever

    @property
    def whatever(self):
        return self._whatever # Insert complicated calculation here
</snippet></ROW><ROW><id>7455212</id><snippet>decode()</snippet></ROW><ROW><id>7455212</id><snippet>unicode()</snippet></ROW><ROW><id>7455212</id><snippet>u</snippet></ROW><ROW><id>7455212</id><snippet>&gt;&gt;&gt; foo = u'łódź'
&gt;&gt;&gt; foo.__class__
&lt;type 'unicode'&gt;
</snippet></ROW><ROW><id>7455212</id><snippet>encode()</snippet></ROW><ROW><id>7455212</id><snippet>&gt;&gt;&gt; foo = u'łódź'
&gt;&gt;&gt; foo.__class__
&lt;type 'unicode'&gt;
&gt;&gt;&gt; bar = foo.encode('utf-8')
&gt;&gt;&gt; bar.__class__
&lt;type 'str'&gt;
</snippet></ROW><ROW><id>7455561</id><snippet>id</snippet></ROW><ROW><id>7455561</id><snippet>CREATE TEMPORARY TABLE rating_stats ENGINE=MEMORY
SELECT video_id, SUM(tag_rating) AS tag_rating_sum 
FROM user_rating ur JOIN video_tag vt ON vt.id = ur.tag_id AND ur.user_id=1
GROUP BY video_id ORDER BY NULL

SELECT v.id, tag_rating_sum*rating_global AS score FROM video v 
JOIN rating_stats rs ON rs.video_id = v.id 
WHERE v.website_id=2 AND v.rating_global &gt; 0 AND v.id NOT IN (1,2,3)
ORDER BY score DESC LIMIT 20
</snippet></ROW><ROW><id>7455578</id><snippet>str1 = r"""row Id="7" PostTypeId="2" ParentId="4"
           CreationDate="2008-07-31T22:17:57.883"
           Score="49" ViewCount="0" Body="&lt;p&gt;An explicit cast to double i"""
</snippet></ROW><ROW><id>7455578</id><snippet>str1 = r'row Id="7" PostTypeId="2" ParentId="4"'
</snippet></ROW><ROW><id>7455578</id><snippet>str1 = 'row Id="7" PostTypeId=\'2\' ParentId="4"'
</snippet></ROW><ROW><id>7455821</id><snippet>a</snippet></ROW><ROW><id>7456280</id><snippet>os.sendfile</snippet></ROW><ROW><id>7456280</id><snippet>sendfile(2)</snippet></ROW><ROW><id>7456323</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>7456366</id><snippet>inspect</snippet></ROW><ROW><id>7456366</id><snippet>{{ object | e }}
</snippet></ROW><ROW><id>7456366</id><snippet>'foo'</snippet></ROW><ROW><id>7456366</id><snippet>{% raw %}</snippet></ROW><ROW><id>7456366</id><snippet>{{ '{{' }}

{% raw %}
   {% %}
{% endraw %}
</snippet></ROW><ROW><id>7456594</id><snippet>-=</snippet></ROW><ROW><id>7456594</id><snippet>to_check</snippet></ROW><ROW><id>7456594</id><snippet>connected</snippet></ROW><ROW><id>7456594</id><snippet>failed</snippet></ROW><ROW><id>7456594</id><snippet>to_check</snippet></ROW><ROW><id>7456594</id><snippet>main</snippet></ROW><ROW><id>7456594</id><snippet>nonlocal to_check</snippet></ROW><ROW><id>7456594</id><snippet>connected</snippet></ROW><ROW><id>7456594</id><snippet>failed</snippet></ROW><ROW><id>7456594</id><snippet>import itertools

def main():

    ip = "10.1.1."
    port = 23
    to_check = 10
    counter = itertools.count().next
    from twisted.internet import reactor
    def connected(whathappened):
        print &gt;&gt;sys.stdout, "Successfully connected to %s %s" % (whathappened[0],whathappened[1])
        return counter()

    def failed(reason):
        print &gt;&gt;sys.stderr, "Connection to failed : %s" % reason
        return counter()

    def checked(count):
        print &gt;&gt;sys.stdout, "%d connections left to check" % (to_check - count,)
        if count == to_check:
            reactor.stop()

    for i in range(0,total):
        d = check_conn(ip + str(i),port)
        d.addCallbacks(connected,failed)
        d.addBoth(checked)

    reactor.run()
</snippet></ROW><ROW><id>7456865</id><snippet>class Stack(object):

    def __init__(self):
        self.__storage = [] # Too uptight

    def push(self, value):
        self.__storage.append(value)
</snippet></ROW><ROW><id>7456865</id><snippet>class Stack(object):

    def __init__(self):
        self.storage = [] # No mangling

    def push(self, value):
        self.storage.append(value)
</snippet></ROW><ROW><id>7456865</id><snippet>class Stack(object):

    def __init__(self):
        self._storage = [] # This is ok but pythonistas use to be relaxed about it

    def push(self, value):
        self._storage.append(value)
</snippet></ROW><ROW><id>7456865</id><snippet> class Person(object):
     def __init__(self, name, age):
         self.name = name
         self._age = age if age &gt;= 0 else 0

     @property
     def age(self):
         return self._age

     @age.setter
     def age(self, age):
         if age &gt;= 0:
             self._age = age
         else:
             self._age  = 0
</snippet></ROW><ROW><id>7456865</id><snippet>person.age = age;
</snippet></ROW><ROW><id>7456865</id><snippet>person.setAge(age);
</snippet></ROW><ROW><id>7456865</id><snippet>setAge()</snippet></ROW><ROW><id>7456865</id><snippet>public void setAge(int age) {
    if (age &gt;= 0) {
        this.age = age;
    } else {
        this.age = 0;
    }
}
</snippet></ROW><ROW><id>7456865</id><snippet> class Person(object):
     def __init__(self, name, age):
         self.name = name
         self.age = age
</snippet></ROW><ROW><id>7456865</id><snippet>person.age = age</snippet></ROW><ROW><id>7456865</id><snippet> class Person(object):
     def __init__(self, name, age):
         self.name = name
         self._age = age if age &gt;= 0 else 0

     @property
     def age(self):
         return self._age

     @age.setter
     def age(self, age):
         if age &gt;= 0:
             self._age = age
         else:
             self._age  = 0
</snippet></ROW><ROW><id>7456865</id><snippet>person.age = age</snippet></ROW><ROW><id>7456865</id><snippet>__</snippet></ROW><ROW><id>7456896</id><snippet>print</snippet></ROW><ROW><id>7456896</id><snippet>djj = ctypes.cdll.LoadLibrary('djj.dll')
my_print = getattr(djj, 'print')
x = my_print() #x is 4
</snippet></ROW><ROW><id>7457036</id><snippet>b/a = 1 - f
</snippet></ROW><ROW><id>7457047</id><snippet>tokenize</snippet></ROW><ROW><id>7457318</id><snippet># -*- coding: utf-8 -*-
import sys

data = open(sys.argv[1])
line = 0
for l in data:
    line += 1
    char = 0
    for s in list(unicode(l,'utf-8')):
        char += 1
        try:
            s.encode('ascii')
        except:
            print 'Non ASCII character at line:%s char:%s' % (line,char)
</snippet></ROW><ROW><id>7457682</id><snippet>db.payment_bpay_step1.selection_type.widget = \
    lambda f, v: SQLFORM.widgets.radio.widget(f, v, style='divs')
</snippet></ROW><ROW><id>7458006</id><snippet>struct</snippet></ROW><ROW><id>7458299</id><snippet>league</snippet></ROW><ROW><id>7458299</id><snippet>def Pythag(league):
    total_runs_scored = 0
    for team, scores in league.iteritems():
        # other stuff
        total_runs_scored += scores[0]
        # other stuff
        # runs scored by all teams up to this point
        print 'League Running Total of Runs Scored: %f' % (total_runs_scored,)
    # outside the loop, so total runs scored in the league.
    # will be the same as the last one in the loop
    print 'League Total Runs Scored: %f' % (total_runs_scored,)
</snippet></ROW><ROW><id>7458299</id><snippet>sum</snippet></ROW><ROW><id>7458299</id><snippet>scores[0]</snippet></ROW><ROW><id>7458397</id><snippet>os.system('x-terminal-emulator -t "Installing new packages" -e "sh -c \\"sudo tlmgr install %s; touch /tmp/install_completed\\""' % packagesString)
while not os.path.exists("/tmp/install_completed"):
    time.sleep(0.1)
os.remove("/tmp/install_completed")
</snippet></ROW><ROW><id>7458752</id><snippet>sorted(set(itertools.chain.from_iterable(sequences)))
</snippet></ROW><ROW><id>7458896</id><snippet>self.response.out.write("""
&lt;form name="search_form" action="/searchhandler" method="GET"&gt;&lt;br /&gt;
&lt;input type="text" name="search_string" size=40&gt;
&lt;input type="submit" value="search tags"&gt;
&lt;/form&gt;""")
</snippet></ROW><ROW><id>7458896</id><snippet>class SearchHandler(webapp.RequestHandler):
    def get(self):
        search_string = self.request.get("search_string", None)
        if not search_string:
            raise Exception("Missing Param")
        tags = [t.strip() for t in search_string.split(",")]
        if tags:
            query = Main.all()
            query.filter("tag_list IN", tags)
            query.order("-total_value")

        # Handle your results
</snippet></ROW><ROW><id>7459133</id><snippet>crazyfunction(['abc'])</snippet></ROW><ROW><id>7459133</id><snippet>&gt;&gt;&gt; def printfirst(lst):
...     print lst[0]
...
&gt;&gt;&gt; printfirst('hello')
h
&gt;&gt;&gt; printfirst(['hello'])
hello
</snippet></ROW><ROW><id>7459139</id><snippet>.html</snippet></ROW><ROW><id>7459139</id><snippet>def/</snippet></ROW><ROW><id>7459192</id><snippet>while True:
</snippet></ROW><ROW><id>7459192</id><snippet>inloop = True;
while inloop:
    bla
    if(something):
        inloop = false;
</snippet></ROW><ROW><id>7459260</id><snippet>[x for x in B if x not in A]
</snippet></ROW><ROW><id>7459260</id><snippet>&gt;&gt;&gt; print B
['verification', 'at', 'done', 'on', 'theresa']
&gt;&gt;&gt; x=B.index('at')
&gt;&gt;&gt; B[x:x+1] = []
&gt;&gt;&gt; print B
['verification', 'done', 'on', 'theresa']
</snippet></ROW><ROW><id>7459260</id><snippet>B[x]</snippet></ROW><ROW><id>7459396</id><snippet>from lxml import etree
xml = etree.parse(open('1.xml'))
xml.xpath("//qtn[@state="+state+"]/text()")
</snippet></ROW><ROW><id>7459734</id><snippet>team_removed_runs</snippet></ROW><ROW><id>7459734</id><snippet>team_removed_runs = {}
for team, scores in league.iteritems():
    team_removed_runs[team] = [total_runs_scored - scores[0],
                               total_runs_allowed - scores[1]]
</snippet></ROW><ROW><id>7459734</id><snippet>total_runs_scored</snippet></ROW><ROW><id>7459734</id><snippet>total_runs_allowed</snippet></ROW><ROW><id>7459734</id><snippet>team_removed_runs</snippet></ROW><ROW><id>7459734</id><snippet>team_removed_runs['Phillies']
</snippet></ROW><ROW><id>7459794</id><snippet>pyramid.request</snippet></ROW><ROW><id>7459794</id><snippet>zope.deprecation</snippet></ROW><ROW><id>7459794</id><snippet>zope.deprecation</snippet></ROW><ROW><id>7459794</id><snippet>python -c "import zope.deprecation ; print import zope.deprecation"</snippet></ROW><ROW><id>7460104</id><snippet>gobject.MainLoop()</snippet></ROW><ROW><id>7460104</id><snippet>import gobject
import gst
pipeline = gst.parse_launch('filesrc location="test.flac" ! flacdec ! lame ! filesink location="test.mp3"')
pipeline.set_state(gst.STATE_PLAYING)

gobject.threads_init()
gobject.MainLoop().run()
</snippet></ROW><ROW><id>7460104</id><snippet>element_link_many</snippet></ROW><ROW><id>7460104</id><snippet>filesrc ! filesink</snippet></ROW><ROW><id>7460104</id><snippet>import gobject
import gst

converter = gst.Pipeline('converter')

source = gst.element_factory_make('filesrc', 'file-source')
source.set_property('location', 'test.flac')

decoder = gst.element_factory_make('flacdec', 'decoder')
encoder = gst.element_factory_make('lame', 'encoder')

sink = gst.element_factory_make('filesink', 'sink')
sink.set_property('location', 'test.mp3')

converter.add(source, decoder, encoder, sink)
gst.element_link_many(source, decoder, encoder, sink)

converter.set_state(gst.STATE_PLAYING)

gobject.threads_init()
gobject.MainLoop().run()
</snippet></ROW><ROW><id>7460208</id><snippet>import xml.dom.minidom as minidom
dom = minidom.parse('test.xml')
data={}
for dct in dom.getElementsByTagName('dict'):
    keys=dct.getElementsByTagName('key')
    # key.nextSibling can be an integer or string or date element, or Text node
    # key.nextSibling.firstChild is a Text node or None
    vals=[key.nextSibling.firstChild for key in keys]
    # drill down to the text inside the keys and vals
    keys=[key.firstChild.data for key in keys]
    vals=[val.data if val else None for val in vals]
    data=dict(zip(keys,vals))
    if data['Track ID']=='1208':
        print(data['Location'])
        break
</snippet></ROW><ROW><id>7460208</id><snippet>file://localhost/D:/My%20Music/English%20songs/01-30_seconds_to_mars-kings_and_queens.mp3
</snippet></ROW><ROW><id>7460395</id><snippet>read</snippet></ROW><ROW><id>7460395</id><snippet>recv</snippet></ROW><ROW><id>7460395</id><snippet>select</snippet></ROW><ROW><id>7460395</id><snippet>poll</snippet></ROW><ROW><id>7460395</id><snippet>epoll</snippet></ROW><ROW><id>7460395</id><snippet>read</snippet></ROW><ROW><id>7460395</id><snippet>recv</snippet></ROW><ROW><id>7460470</id><snippet>import unittest
import sys

class Test(unittest.TestCase):
    def tearDown(self):
        try:
            del sys.modules['logging']
        except KeyError:
            pass
    def test_logging(self):
        import logging
        logging.foo=1
    def test_logging2(self):
        import logging
        print(logging.foo)

if __name__ == '__main__':
    unittest.sys.argv.insert(1,'--verbose')
    unittest.main(argv = unittest.sys.argv)    
</snippet></ROW><ROW><id>7460470</id><snippet>% test.py Test.test_logging</snippet></ROW><ROW><id>7460470</id><snippet>test_logging (__main__.Test) ... ok
</snippet></ROW><ROW><id>7460470</id><snippet>% test.py Test.test_logging2</snippet></ROW><ROW><id>7460470</id><snippet>test_logging2 (__main__.Test) ... ERROR
</snippet></ROW><ROW><id>7460470</id><snippet>logging</snippet></ROW><ROW><id>7460573</id><snippet>a</snippet></ROW><ROW><id>7460573</id><snippet>b</snippet></ROW><ROW><id>7460573</id><snippet>def is_pal(c):
    return int(str(c)[::-1]) == c

maxpal = 0
for a in range(999, 99, -1):
    for b in range(a, 99, -1):
        prod = a * b
        if is_pal(prod) and prod &gt; maxpal:
            maxpal = prod

print maxpal
</snippet></ROW><ROW><id>7460706</id><snippet>py2exe_data_files += add_path_tree( '', 'templates' )
</snippet></ROW><ROW><id>7460706</id><snippet>LOCALE_PATHS = (
'templates/locale',
)
</snippet></ROW><ROW><id>7460754</id><snippet>a</snippet></ROW><ROW><id>7460754</id><snippet>dtype</snippet></ROW><ROW><id>7460754</id><snippet>object</snippet></ROW><ROW><id>7460754</id><snippet>a = np.array([(GF28(10), GF28(20), GF28(30)),
              (GF28(12), GF28(21), GF28(4)),
              (GF28(9), GF28(16), GF28(13))],dtype='object')
</snippet></ROW><ROW><id>7460754</id><snippet>GF28</snippet></ROW><ROW><id>7460754</id><snippet>type(a[0,0])
# &lt;class '__main__.GF28'&gt;
</snippet></ROW><ROW><id>7460929</id><snippet>(generator, length)</snippet></ROW><ROW><id>7460929</id><snippet>class GeneratorLen(object):
    def __init__(self, gen, length):
        self.gen = gen
        self.length = length

    def __len__(self): 
        return self.length

    def __iter__(self):
        return self.gen

g = some_generator()
h = GeneratorLen(g, 1)
print len(h), list(h)
</snippet></ROW><ROW><id>7461662</id><snippet>sudo apt-get install python-mysqldb
</snippet></ROW><ROW><id>7461662</id><snippet>sudo apt-get install build-essential python-dev libmysqlclient-dev
</snippet></ROW><ROW><id>7461809</id><snippet>int.bit_length()</snippet></ROW><ROW><id>7461990</id><snippet>print sys.path</snippet></ROW><ROW><id>7462346</id><snippet>LineItem</snippet></ROW><ROW><id>7462346</id><snippet>Account</snippet></ROW><ROW><id>7462346</id><snippet>Account</snippet></ROW><ROW><id>7462346</id><snippet>Journal</snippet></ROW><ROW><id>7462346</id><snippet>Journal</snippet></ROW><ROW><id>7462346</id><snippet>LineItem</snippet></ROW><ROW><id>7462346</id><snippet>Account</snippet></ROW><ROW><id>7462346</id><snippet>LineItem</snippet></ROW><ROW><id>7462346</id><snippet>LineItem</snippet></ROW><ROW><id>7462346</id><snippet>Transaction</snippet></ROW><ROW><id>7462346</id><snippet>Transaction</snippet></ROW><ROW><id>7462346</id><snippet>Transaction</snippet></ROW><ROW><id>7462346</id><snippet>date</snippet></ROW><ROW><id>7462346</id><snippet>LineItem</snippet></ROW><ROW><id>7462346</id><snippet>lookUp</snippet></ROW><ROW><id>7462346</id><snippet>Options</snippet></ROW><ROW><id>7462634</id><snippet>import sys

param_values = {
            'aa' : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.1,1.0),   (-1,-1)],     
            'ae' : [(-1,-1),   (-1,-1),    (0.1,0.8), (-1,-1),   (0.1,1.0),   (-1,-1)], 
            'ah' : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.1,1.0),   (-1,-1)], 
            'ao' : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.2,1.0),   (-1,-1)], 
            'eh' : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.1,1.0),   (-1,-1)], 
            'er' : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.15,0.7),  (-1,-1)], 
            'ey' : [(-1,-1),   (-1,-1),    (0.3,1.0), (-1,-1),   (0.1,0.5),   (-1,-1)],
            'ih' : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.1,0.8),   (-1,-1)], 
            'iy' : [(-1,-1),   (-1,-1),    (0.2,1.0), (-1,-1),   (0.1,0.8),   (-1,-1)], 
            'uh' : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (-1,-1),     (0.1,1.0)], 
            'uw' : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (-1,-1),     (0.1,1.0)],   
            'o'  : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (-1,-1),     (0.4,1.0)] ,   
            'b'  : [(-1,-1),   (0.0,0.0),  (-1,-1),   (-1,-1),   (0.1,0.8),   (-1,-1)], 
            'ch' : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.1,0.4),   (-1,-1)], 
            'd'  : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.1,0.4),   (-1,-1)], 
            'dh' : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.1,0.35),  (-1,-1)], 
            'dx' : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.1,0.35),  (-1,-1)], 
            'f'  : [(0.3,1.0), (-1,-1),    (-1,-1),   (-1,-1),   (-1,-1),     (-1,-1)], 
            'g'  : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.1,0.8),   (-1,-1)], 
            'hh' : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.1,0.8),   (-1,-1)], 
            'jh' : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.1,0.8),   (-1,-1)], 
            'k'  : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.1,0.8),   (-1,-1)], 
            'l'  : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.1,0.4),   (-1,-1)], 
            'm'  : [(-1,-1),   (0.0,0.0),  (-1,-1),   (-1,-1),   (0.1,0.8),   (-1,-1)], 
            'n'  : [(-1,-1),   (0.1,1.0),  (-1,-1),   (0.3,1.0), (0.0,0.0),   (-1,-1)], 
            'ng' : [(-1,-1),   (0.1,1.0),  (-1,-1),   (-1,-1),   (0.0,0.0),   (-1,-1)], 
            'p'  : [(-1,-1),   (0.0,0.0),  (-1,-1),   (-1,-1),   (0.1,0.8),   (-1,-1)], 
            'r'  : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.1,0.4),   (-1,-1)], 
            's'  : [(-1,-1),   (0.1,1.0),  (-1,-1),   (0.3,1.0), (0.0,0.0),   (-1,-1)],
            'sh' : [(-1,-1),   (0.1,1.0),  (-1,-1),   (0.3,1.0), (0.0,0.0),   (-1,-1)], 
            't'  : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.1,0.4),   (-1,-1)], 
            'th' : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.1,0.4),   (-1,-1)], 
            'v'  : [(0.3,1.0), (-1,-1),    (-1,-1),   (-1,-1),   (-1,-1),     (-1,-1)], 
            'w'  : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (-1,-1),     (0.1,1.0)], 
            'y'  : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.1,0.6),   (-1,-1)],  
            'z'  : [(-1,-1),   (0.1,1.0),  (-1,-1),   (0.3,1.0), (0.0,0.0),   (-1,-1)], 
            'zh' : [(-1,-1),   (-1,-1),    (-1,-1),   (-1,-1),   (0.1,0.6),   (-1,-1)]                         
            }

diphthong = { 
         'aw' : ['ao' , 'uw'],
         'ay' : ['ao' , 'ih'],
         'ow' : ['o' , 'aa'],
         'oy' : ['o' , 'ih']
        }   


phonemeList = []
with open("syllabifiedPhonemes.txt", "r") as pFile :
    for line in pFile :
        l = line.split()
        for phoneme in l : 
            if phoneme != "'":
                next_phoneme = diphthong.get(phoneme)
                if next_phoneme is None :
                    # exploring the dict param_values extracting each nested dict
                    phonemeList.append((phoneme, param_values[phoneme]))
                else : 
                    phonemeList.extend([(phoneme, param_values[phoneme]) for phoneme in next_phoneme])

        print "New List"
        print '\n'.join(str(l) for l in phonemeList)
</snippet></ROW><ROW><id>7463100</id><snippet>currentIndex()</snippet></ROW><ROW><id>7463100</id><snippet>setCurrentIndex()</snippet></ROW><ROW><id>7463100</id><snippet>QTreeView</snippet></ROW><ROW><id>7463100</id><snippet>QItemSelectionModel</snippet></ROW><ROW><id>7463100</id><snippet>QTreeView.selectionModel()</snippet></ROW><ROW><id>7463100</id><snippet>QItemSelectionModel</snippet></ROW><ROW><id>7463181</id><snippet>from BeautifulSoup import BeautifulSoup
myform = MyForm()
rendered_form = myform.as_p()
soup = BeautifulSoup(rendered_form)
values = {}
for input in soup.findAll('input'):
    value = input.get('value')
    if value:
        values[input['name']] = value
for select in soup.findAll('select'):
    selected = select.find(selected='selected')
    if selected:
        values[select['name']] = selected['value']
</snippet></ROW><ROW><id>7463185</id><snippet>barrely = barrely + 0.1</snippet></ROW><ROW><id>7463185</id><snippet>barrely</snippet></ROW><ROW><id>7463185</id><snippet>pygame.draw.circle(screen, (0,255,0), (int(barrelx), int(barrely)), 64, 0)</snippet></ROW><ROW><id>7463269</id><snippet>if item == 'north' or item == 'south' or item == 'east':
</snippet></ROW><ROW><id>7463269</id><snippet>if item in ('north', 'south', 'east'):
</snippet></ROW><ROW><id>7463269</id><snippet>item == 'north' or 'south' or 'east'
</snippet></ROW><ROW><id>7463269</id><snippet>(item == 'north') or 'south' or 'east'
</snippet></ROW><ROW><id>7463269</id><snippet>item == 'north'</snippet></ROW><ROW><id>7463269</id><snippet>'north'</snippet></ROW><ROW><id>7463269</id><snippet>'south'</snippet></ROW><ROW><id>7463269</id><snippet>'east'</snippet></ROW><ROW><id>7463269</id><snippet>True</snippet></ROW><ROW><id>7463269</id><snippet>(item == 'north') or True or True</snippet></ROW><ROW><id>7463269</id><snippet>True</snippet></ROW><ROW><id>7463429</id><snippet>def __init__(self, *args, **kwargs):
    super(InternApplicationForm, self).__init__(*args, **kwargs)
    for field in self.fields.values():
        field.error_messages = {'required':'*'}
</snippet></ROW><ROW><id>7463429</id><snippet>invalid</snippet></ROW><ROW><id>7463429</id><snippet>KeyError</snippet></ROW><ROW><id>7463429</id><snippet>invalid</snippet></ROW><ROW><id>7463429</id><snippet>        field.error_messages = {'required': '*', 'invalid': "That's not a number, sir."}
</snippet></ROW><ROW><id>7463491</id><snippet>def fishmove():
   global fishmove
   if fishmove &lt; 640:
        fishmove = fishmove + 10
        fixed_hab.move(fish1, fishmove, 50)  
        return True

gobject.timeout_add(1, fishmove)
</snippet></ROW><ROW><id>7463720</id><snippet>[("pos1", "target1"), ("pos2, "target2"), ]
</snippet></ROW><ROW><id>7463720</id><snippet>position = "pos1"
target = "target1"
</snippet></ROW><ROW><id>7463720</id><snippet>position = "pos2"
target = "target2"
</snippet></ROW><ROW><id>7463787</id><snippet>def parity(x):
    k = 0
    d = x
    while d != 0:
        k = k + 1
        d = d &amp; (d - 1)
    return k % 2
</snippet></ROW><ROW><id>7463787</id><snippet>2**62</snippet></ROW><ROW><id>7463898</id><snippet>import sys

...
sys.stdout.flush()
</snippet></ROW><ROW><id>7463913</id><snippet>strptime()</snippet></ROW><ROW><id>7463913</id><snippet>strftime()</snippet></ROW><ROW><id>7463913</id><snippet>&gt;&gt;&gt; datetime.datetime.strptime("February", "%B").month
2
</snippet></ROW><ROW><id>7463938</id><snippet>wget http://python-distribute.org/bootstrap.py 
</snippet></ROW><ROW><id>7463938</id><snippet>[buildout]
parts = qrproject
        python
eggs = pyqrencode

[qrproject]
recipe = z3c.recipe.scripts
eggs = ${buildout:eggs}
entry-points= qrproject=qrprojectmodule:run
extra-paths = ${buildout:directory}

# This is a simple way of creating an interpreter that will have
# access to all the eggs / modules that this project uses.
[python]
recipe = z3c.recipe.scripts
interpreter = python
eggs = ${buildout:eggs}
extra-paths = ${buildout:directory}
</snippet></ROW><ROW><id>7463938</id><snippet>import qrencode

def run():
    print "Entry point for qrproject. Happily imports qrencode module"
</snippet></ROW><ROW><id>7463938</id><snippet>python bootstrap.py
</snippet></ROW><ROW><id>7463938</id><snippet>bin/buildout
</snippet></ROW><ROW><id>7463938</id><snippet>$ apt-cache search libqrencode
libqrencode-dev - QR Code encoding library -- development
libqrencode3 - QR Code encoding library
qrencode - QR Code encoder into PNG image
</snippet></ROW><ROW><id>7463938</id><snippet>sudo apt-get install libqrencode-dev
</snippet></ROW><ROW><id>7463938</id><snippet>$ bin/qrproject 
Entry point for qrproject. Happily imports qrencode module
</snippet></ROW><ROW><id>7464026</id><snippet>(x * y.T).T
</snippet></ROW><ROW><id>7464026</id><snippet>x.reshape((-1,1)) * y
</snippet></ROW><ROW><id>7464026</id><snippet>y</snippet></ROW><ROW><id>7464026</id><snippet>-1</snippet></ROW><ROW><id>7464076</id><snippet>import numpy as np

a = np.array([[ 7.,  5.], [ 9.,  3.], [ 7.,  2.], [ 7.,  8.], [ 6.,  8.], [ 3.,  2.]])

foo = 5*a[:,0] + a[:,1]**2 
</snippet></ROW><ROW><id>7464350</id><snippet>directions = ['north', 'south', 'east', 'west', 'down', 'up', 'down', 'right']
verbs = ['go', 'stop', 'kill', 'eat']
stops = ['the', 'in', 'at', 'of', 'from', 'at', 'it']
nouns = ['door', 'bear', 'princess', 'cabinet']


def scan(thewords):

    thewords = thewords.split()
    sentence = []

    for i in thewords:
        if i in directions:
            sentence.append(('direction', i))

        elif i in verbs:
            sentence.append(('verb', i))

        elif i in stops:
            sentence.append(('stop', i))

        elif i in nouns:
            sentence.append(('noun', i))

        elif i.isdigit():
            sentence.append(('number', convert_number(i)))

        else:            
            sentence.append(('error', i))

    return sentence

def convert_number(s):
    try:
        return int(s)

    except ValueError:
        return None
</snippet></ROW><ROW><id>7464655</id><snippet>{{ object.price_with_tax }}</snippet></ROW><ROW><id>7464655</id><snippet>actions.py</snippet></ROW><ROW><id>7464655</id><snippet>helpers.py</snippet></ROW><ROW><id>7464655</id><snippet>helpers.py</snippet></ROW><ROW><id>7464664</id><snippet>format</snippet></ROW><ROW><id>7464664</id><snippet>self.__len__</snippet></ROW><ROW><id>7464664</id><snippet>format(self.__len__)</snippet></ROW><ROW><id>7464664</id><snippet>repr</snippet></ROW><ROW><id>7464664</id><snippet>self</snippet></ROW><ROW><id>7464664</id><snippet>format</snippet></ROW><ROW><id>7464664</id><snippet>self.__len__()</snippet></ROW><ROW><id>7464664</id><snippet>len(self)</snippet></ROW><ROW><id>7464664</id><snippet>self.len</snippet></ROW><ROW><id>7464929</id><snippet>converted_values = [item if type(item) == datetime.data
                    else item.decode('utf-8')
                    for item in values]
</snippet></ROW><ROW><id>7464929</id><snippet>print("yes" if True else "no") # prints "yes"
print("yes" if False else "no") # prints "no"
</snippet></ROW><ROW><id>7465009</id><snippet>secrets.py</snippet></ROW><ROW><id>7465009</id><snippet>import secrets</snippet></ROW><ROW><id>7465009</id><snippet>settings.py</snippet></ROW><ROW><id>7465049</id><snippet>textarea</snippet></ROW><ROW><id>7465049</id><snippet>&lt;textarea&gt;"%s"&lt;/textarea&gt;</snippet></ROW><ROW><id>7465049</id><snippet>%s</snippet></ROW><ROW><id>7465126</id><snippet>self</snippet></ROW><ROW><id>7465126</id><snippet>.__add__()</snippet></ROW><ROW><id>7465126</id><snippet>&gt;&gt;&gt; x = MyObj(2)
&gt;&gt;&gt; MyObj.__add__(x, 3)  # we pass in a reference to x explicitly
5
&gt;&gt;&gt; x.__add__(3)  # method call implicitly passes reference to x
5
&gt;&gt;&gt; x + 3  # overloaded operator implicitly passes reference to x
5
</snippet></ROW><ROW><id>7465126</id><snippet>.__add__()</snippet></ROW><ROW><id>7465126</id><snippet>.__add__()</snippet></ROW><ROW><id>7465126</id><snippet>x + "3"</snippet></ROW><ROW><id>7465126</id><snippet>class MyObj(object): # see note 0
    a = 23
    def __init__(self, b):
        self.b = b
    def __add__(self, other):
        return self.b + int(other)  # see note 1
    def a_add(self, other):
        return MyObj.a + other
</snippet></ROW><ROW><id>7465126</id><snippet>object</snippet></ROW><ROW><id>7465126</id><snippet>object</snippet></ROW><ROW><id>7465126</id><snippet>(object)</snippet></ROW><ROW><id>7465126</id><snippet>other</snippet></ROW><ROW><id>7465126</id><snippet>int</snippet></ROW><ROW><id>7465126</id><snippet>int</snippet></ROW><ROW><id>7465126</id><snippet>MyObj.a</snippet></ROW><ROW><id>7465126</id><snippet>a</snippet></ROW><ROW><id>7465126</id><snippet>a</snippet></ROW><ROW><id>7465126</id><snippet>def a_add(self, other):
    cls = type(self)  # cls will be set to the class
    return cls.a + other
</snippet></ROW><ROW><id>7465126</id><snippet>object</snippet></ROW><ROW><id>7465230</id><snippet>bounds = [0, 100]
minimum, maximum = bounds

number = int(raw_input('Pick a number [{0}-{1}]: '.format(minimum, maximum)))

while guess != number:
  guess = int((maximum + minimum) / 2)
  raw_input('Guessing {0}'.format(guess))

  if guess &gt; number:
    maximum = guess
  elif guess &lt; number:
    maximum = bounds[1]
    minimum = guess

print 'I win!'
</snippet></ROW><ROW><id>7465230</id><snippet>number</snippet></ROW><ROW><id>7465359</id><snippet>date = date.replace(tzinfo=users_timezone)
</snippet></ROW><ROW><id>7465359</id><snippet>date = users_timezone.localize(date)
</snippet></ROW><ROW><id>7465359</id><snippet>localize</snippet></ROW><ROW><id>7465359</id><snippet>replace</snippet></ROW><ROW><id>7465405</id><snippet>urlparse</snippet></ROW><ROW><id>7465405</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; urlparse.urljoin("http://www.foo.com/Stuff/Mike/Doc.html","../Bob/Doc.html")
'http://www.foo.com/Stuff/Bob/Doc.html'
</snippet></ROW><ROW><id>7465532</id><snippet>easy_install --prefix=$HOME/local package_name
</snippet></ROW><ROW><id>7465532</id><snippet>pip install --install-option="--prefix=$HOME/local" package_name
</snippet></ROW><ROW><id>7465532</id><snippet>pip install --user package_name
</snippet></ROW><ROW><id>7465542</id><snippet>root</snippet></ROW><ROW><id>7465542</id><snippet>Element</snippet></ROW><ROW><id>7465542</id><snippet>tag</snippet></ROW><ROW><id>7465542</id><snippet>root.tag</snippet></ROW><ROW><id>7465610</id><snippet>import re
re.compile('&lt;title&gt;(.*)&lt;/title&gt;')
</snippet></ROW><ROW><id>7465724</id><snippet>re</snippet></ROW><ROW><id>7465724</id><snippet>string</snippet></ROW><ROW><id>7465724</id><snippet>import re
string = "this one this that this here "
for match in re.finditer(r"this\s+(.*?)\s+", string):
    print match.group(1)
</snippet></ROW><ROW><id>7465861</id><snippet>=</snippet></ROW><ROW><id>7465861</id><snippet>==</snippet></ROW><ROW><id>7465861</id><snippet>epsilon</snippet></ROW><ROW><id>7465861</id><snippet>if abs(win_percentage - observed) &lt; 0.000001:
    print etc
</snippet></ROW><ROW><id>7465913</id><snippet>heapify()</snippet></ROW><ROW><id>7465913</id><snippet>heapify()</snippet></ROW><ROW><id>7465913</id><snippet>None</snippet></ROW><ROW><id>7465913</id><snippet>lst = [5,4,9,1]
heapify(lst)
type(lst)
</snippet></ROW><ROW><id>7465913</id><snippet>lst</snippet></ROW><ROW><id>7466032</id><snippet>following-sibling</snippet></ROW><ROW><id>7466032</id><snippet>preceding-sibling</snippet></ROW><ROW><id>7466032</id><snippet>import lxml.etree

xml = lxml.etree.XML("""&lt;something&gt;&lt;span class="filesize"&gt;File&lt;a href="http://example.com/image.jpg" target="_blank"&gt;image.jpg&lt;/a&gt;-(1.61 MB, 1000x1542, &lt;span title="what the file is actually called.jpg"&gt;what the file is actually called.jpg&lt;/span&gt;)&lt;/span&gt;&lt;br/&gt;&lt;a href="http://example.com/image.jpg" target="_blank"&gt;&lt;/a&gt;&lt;/something&gt;""",)

print xml.xpath("a[preceding-sibling::span/text()='File']/@href")
</snippet></ROW><ROW><id>7466231</id><snippet>{% if list %}
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt; Foo &lt;/th&gt;
&lt;th&gt; Bar &lt;/th&gt;
&lt;/tr&gt;
{% for item in list %}
   &lt;td&gt;{{item.foo}}&lt;/td&gt;
   &lt;td&gt;{{item.bar}}&lt;/td&gt;
{% empty %}
   &lt;td colspan="2"&gt;No items.&lt;/td&gt;
{% endfor %}
&lt;/table&gt;
{% endif %}
</snippet></ROW><ROW><id>7466231</id><snippet>django.contrib.admin</snippet></ROW><ROW><id>7466231</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>7466231</id><snippet>admin.py</snippet></ROW><ROW><id>7466231</id><snippet>from django.contrib import admin
from myproject.myapp.models import Author

admin.site.register(Author)
</snippet></ROW><ROW><id>7466391</id><snippet>new_list[i] = (first_list[i], second_list[i])
</snippet></ROW><ROW><id>7466391</id><snippet>i</snippet></ROW><ROW><id>7466391</id><snippet>first_list</snippet></ROW><ROW><id>7466391</id><snippet>second_list</snippet></ROW><ROW><id>7466391</id><snippet>i</snippet></ROW><ROW><id>7466391</id><snippet>i-1</snippet></ROW><ROW><id>7466391</id><snippet>indices = range(len(new_list))
results = []
r = pool.map_async(your_function, indices, callback=results.append)
r.wait() # Wait on the results
</snippet></ROW><ROW><id>7466504</id><snippet>fetch()</snippet></ROW><ROW><id>7466504</id><snippet>results = Person.all().filter('name =', 'Joe').fetch(100)</snippet></ROW><ROW><id>7466598</id><snippet>super()</snippet></ROW><ROW><id>7466598</id><snippet>class Base(object):
    @classmethod
    def make(cls, *args, **kwargs):
        print("Base.make(%s, %s) start" % (args, kwargs))
        print("Base.make end")

class Foo(Base):
    @classmethod
    def make(cls, *args, **kwargs):
        print("Foo.make(%s, %s) start" % (args, kwargs))
        super(Foo, cls).make(*args, **kwargs)
        print("Foo.make end")

class Bar(Base):
    @classmethod
    def make(cls, *args, **kwargs):
        print("Bar.make(%s, %s) start" % (args, kwargs))
        super(Bar, cls).make(*args, **kwargs)
        print("Bar.make end")

class FooBar(Foo,Bar):
    @classmethod
    def make(cls, *args, **kwargs):
        print("FooBar.make(%s, %s) start" % (args, kwargs))
        super(FooBar, cls).make(*args, **kwargs)
        print("FooBar.make end")

fb = FooBar.make(1, 2, c=3)
</snippet></ROW><ROW><id>7467180</id><snippet>_escaped_fragment_</snippet></ROW><ROW><id>7467382</id><snippet>import re

for line in open('logfile.log'):
    match = re.search(r'-(.*):', line)
    if match:
        print match.group(1)
    else:
        match = re.search(r'-(.*)', line)
        if match:
            print match.group(1)
        else:
            print 'No match in line', line.strip()
</snippet></ROW><ROW><id>7468366</id><snippet>_winreg</snippet></ROW><ROW><id>7468366</id><snippet>regedit.exe</snippet></ROW><ROW><id>7468366</id><snippet>    key = _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE, "Software\\R-core\\R")
    value =  _winreg.QueryValueEx(key, "InstallPath")[0]
</snippet></ROW><ROW><id>7468654</id><snippet>chars[c] = words.count(c)
</snippet></ROW><ROW><id>7468654</id><snippet>chars[c] += 1
</snippet></ROW><ROW><id>7468725</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>7468725</id><snippet>communicate</snippet></ROW><ROW><id>7468725</id><snippet>out, err = subprocess.Popen(['ls','-l'], stdout=subprocess.PIPE).communicate() 
</snippet></ROW><ROW><id>7468725</id><snippet>stdout</snippet></ROW><ROW><id>7468725</id><snippet>splitlines()</snippet></ROW><ROW><id>7468725</id><snippet>out = out.splitlines()
</snippet></ROW><ROW><id>7468915</id><snippet>struct</snippet></ROW><ROW><id>7468915</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; type, status, varid, value = 1, 0, 16, b'Hello'
&gt;&gt;&gt; buffer = struct.pack('&gt;BBH16s', type, status, varid, value)
&gt;&gt;&gt; buffer
b'\x01\x00\x00\x10Hello\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
</snippet></ROW><ROW><id>7468915</id><snippet>ctypes.Structure</snippet></ROW><ROW><id>7468915</id><snippet>struct</snippet></ROW><ROW><id>7469257</id><snippet>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Draw a polyline given many coordinates&lt;/title&gt;

&lt;meta name="viewport" content="initial-scale=1.0, user-scalable=no" /&gt;
&lt;style type="text/css"&gt;
html { height: 100% }
body { height: 100%; margin: 0; padding: 0 }
#map_canvas { height: 100% }
&lt;/style&gt;
&lt;script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
    function initialize() {
        var homeLatlng = new google.maps.LatLng(51.476706,0);
        var myOptions = {
            zoom: 15,
            center: homeLatlng,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        var map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);

        // add start marker
        var homeMarker = new google.maps.Marker({
            position: new google.maps.LatLng(51.482238,0.001581), 
            map: map, 
            icon: 'http://maps.google.co.uk/intl/en_ALL/mapfiles/ms/micons/green-dot.png'
        });

        // add end marker
        var homeMarker = new google.maps.Marker({
            position: new google.maps.LatLng(51.481577,-0.0022), 
            map: map, 
            icon: 'http://maps.google.co.uk/intl/en_ALL/mapfiles/ms/micons/red-dot.png'
        });

        // create an array of coordinates
        var arrCoords = [
            new google.maps.LatLng(51.482238,0.001581),
            new google.maps.LatLng(51.473364,0.011966),
            new google.maps.LatLng(51.471974,-0.000651),
            new google.maps.LatLng(51.472108,-0.002196),
            new google.maps.LatLng(51.474995,-0.003827),
            new google.maps.LatLng(51.476492,-0.005629),
            new google.maps.LatLng(51.477855,-0.006058),
            new google.maps.LatLng(51.478443,-0.007045),
            new google.maps.LatLng(51.479298,-0.007861),
            new google.maps.LatLng(51.481202,-0.002136),
            new google.maps.LatLng(51.481577,-0.0022)
        ];

        // draw the route on the map            
        var route = new google.maps.Polyline({
            path: arrCoords,
            strokeColor: "#00FF00",
            strokeOpacity: 1.0,
            strokeWeight: 4,
            geodesic: false,
            map: map
        }); 
    }

    google.maps.event.addDomListener(window, 'load', initialize);
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="map_canvas"&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>7469480</id><snippet>def format_df(df):
    if isinstance(df, (int, long)):
        return "%d" % df
    elif isinstance(df, float):
        return "%.3f" % df
    else:
        return str(df) # fallback just in case

raise ValueError, "neither max_df (%s) nor min_df (%s) may be &lt;0" %
                  (format_df(max_df), format_df(min_df))
</snippet></ROW><ROW><id>7469492</id><snippet>Python 2.7.2 (default, Jun 12 2011, 15:08:59) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; path  = os.getcwd()
&gt;&gt;&gt; filenames = os.listdir(path)
&gt;&gt;&gt; for filename in filenames:
...     os.rename(os.path.join(path, filename), os.path.join(path, filename.replace(' ', '-')))
...
&gt;&gt;&gt;
</snippet></ROW><ROW><id>7469728</id><snippet>import urlparse
import sys
import posixpath

def relurl(target,base):
    base=urlparse.urlparse(base)
    target=urlparse.urlparse(target)
    if base.netloc != target.netloc:
        raise ValueError('target and base netlocs do not match')
    base_dir='.'+posixpath.dirname(base.path)
    target='.'+target.path
    return posixpath.relpath(target,start=base_dir)

tests=[
    ('http://www.example.com/images.html','http://www.example.com/faq/index.html','../images.html'),
    ('http://google.com','http://google.com','.'),
    ('http://google.com','http://google.com/','.'),
    ('http://google.com/','http://google.com','.'),
    ('http://google.com/','http://google.com/','.'), 
    ('http://google.com/index.html','http://google.com/','index.html'),
    ('http://google.com/index.html','http://google.com/index.html','index.html'), 
    ]

for target,base,answer in tests:
    try:
        result=relurl(target,base)
    except ValueError as err:
        print('{t!r},{b!r} --&gt; {e}'.format(t=target,b=base,e=err))
    else:
        if result==answer:
            print('{t!r},{b!r} --&gt; PASS'.format(t=target,b=base))
        else:
            print('{t!r},{b!r} --&gt; {r!r} != {a!r}'.format(
                t=target,b=base,r=result,a=answer))
</snippet></ROW><ROW><id>7469810</id><snippet>class DomainCreateView(CreateView):
    """
    Creates a Domain
    """
    form_class = DomainForm
    template_name = 'customer/create_domains.html'
    success_url = reverse_lazy('manage_domains')

    @method_decorator(login_required)
    @method_decorator(only_managers_allowed)
    def dispatch(self, *args, **kwargs):
        """
        The Dispatcher
        """
        return super(DomainCreateView, self).dispatch(*args, **kwargs)

    def form_valid(self, form):
        """
        Validate and save the form
        """
        company = self.request.user.get_profile().company
        self.object = form.save(company)
        return super(ModelFormMixin, self).form_valid(form)


class DomainDeleteView(DeleteView):
    """
    Deletes a Domain
    """
    model = Domain
    template_name = 'customer/delete_domains.html'
    success_url = reverse_lazy('manage_domains')

    @method_decorator(login_required)
    @method_decorator(only_managers_allowed)
    def dispatch(self, *args, **kwargs):
        """
        The Dispatcher
        """
        return super(DomainDeleteView, self).dispatch(*args, **kwargs)
</snippet></ROW><ROW><id>7470054</id><snippet>imagedata = imagedata[::-1, :]
</snippet></ROW><ROW><id>7470054</id><snippet>imagedata = imagedata[:, ::-1]
</snippet></ROW><ROW><id>7470054</id><snippet>imagedata = imagedata.T
</snippet></ROW><ROW><id>7470054</id><snippet>imagedata = imagedata[::-1, ... ]
</snippet></ROW><ROW><id>7470054</id><snippet>imagedata = imagedata[:, ::-1, ... ]
</snippet></ROW><ROW><id>7470093</id><snippet>ps -p &lt;pid&gt; -o cp
</snippet></ROW><ROW><id>7470168</id><snippet>getattr(self.ui, VariableName).Function()
</snippet></ROW><ROW><id>7470168</id><snippet>getattr</snippet></ROW><ROW><id>7470225</id><snippet>C:\&gt;where pip
</snippet></ROW><ROW><id>7470225</id><snippet>C:\strawberry\perl\bin\pip
C:\strawberry\perl\bin\pip.bat
</snippet></ROW><ROW><id>7470274</id><snippet>chars.keys()</snippet></ROW><ROW><id>7470274</id><snippet>chars.keys() in ordlista(list):
</snippet></ROW><ROW><id>7470274</id><snippet>charsum = sum(chars.values())
for word in wordlist:
    if len(word) == charsum and all([(word.count(c) == chars[c]) for c in chars]):
        print "YES for word '%s'" % word
</snippet></ROW><ROW><id>7470274</id><snippet>==</snippet></ROW><ROW><id>7470274</id><snippet>&gt;=</snippet></ROW><ROW><id>7471059</id><snippet>In [1]: x=range(1,4)

In [2]: y=range(1,4)

In [3]: [(xi,yi) for xi in x if xi is yi for yi in y ]
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)

/home/aix/&lt;ipython console&gt; in &lt;module&gt;()

NameError: name 'yi' is not defined
</snippet></ROW><ROW><id>7471059</id><snippet>yi</snippet></ROW><ROW><id>7471059</id><snippet>xi is yi</snippet></ROW><ROW><id>7471059</id><snippet>yi</snippet></ROW><ROW><id>7471059</id><snippet>yi</snippet></ROW><ROW><id>7471059</id><snippet>yi</snippet></ROW><ROW><id>7471059</id><snippet>3</snippet></ROW><ROW><id>7471348</id><snippet>l = [['g,g', 'g,g'], ['d,d', 'd,d,d', 'd,d'], ['s,s', 's,s']]
output = [ (x, y, z, v) for z, l1 in enumerate(l[::-1]) for y, l2 in enumerate(l1) for x, v in enumerate(l2.split(',')) ]
</snippet></ROW><ROW><id>7471348</id><snippet>output = []
for z,l1 in enumerate(l[::-1]):
    for y, l2 in enumerate(l1):
        for x, v in enumerate(l2.split(',')):
            output.append((x, y, z, v))
</snippet></ROW><ROW><id>7471469</id><snippet>__new__</snippet></ROW><ROW><id>7471469</id><snippet>__new__</snippet></ROW><ROW><id>7471469</id><snippet>__new__</snippet></ROW><ROW><id>7471469</id><snippet>super(...).__new__</snippet></ROW><ROW><id>7471469</id><snippet>cls</snippet></ROW><ROW><id>7471557</id><snippet>Session</snippet></ROW><ROW><id>7471557</id><snippet>commit()</snippet></ROW><ROW><id>7471557</id><snippet>commit()</snippet></ROW><ROW><id>7471557</id><snippet>flush()</snippet></ROW><ROW><id>7471557</id><snippet>autocommit=True</snippet></ROW><ROW><id>7471557</id><snippet>begin()</snippet></ROW><ROW><id>7471967</id><snippet>indices</snippet></ROW><ROW><id>7471967</id><snippet>(n, 2)</snippet></ROW><ROW><id>7471967</id><snippet>n</snippet></ROW><ROW><id>7471967</id><snippet>c = numpy.r_[0, A.cumsum()][indices]
sums = c[:,1] - c[:,0]
</snippet></ROW><ROW><id>7472003</id><snippet>cleaner.Cleaner.__call__</snippet></ROW><ROW><id>7472003</id><snippet>safe_attrs_only</snippet></ROW><ROW><id>7472003</id><snippet>True</snippet></ROW><ROW><id>7472003</id><snippet>clean.defs.safe_attrs</snippet></ROW><ROW><id>7472003</id><snippet>clean.defs.safe_attrs</snippet></ROW><ROW><id>7472003</id><snippet>import lxml.html.clean as clean

code = '&lt;tr id="ctl00_Content_AdManagementPreview_DetailView_divNova" class="Extended" style="display: none;"&gt;'

safe_attrs = clean.defs.safe_attrs
cleaner = clean.Cleaner(safe_attrs_only=True, safe_attrs=frozenset())
cleansed = cleaner.clean_html(code)

print(cleansed)
</snippet></ROW><ROW><id>7472003</id><snippet>&lt;tr&gt;&lt;/tr&gt;
</snippet></ROW><ROW><id>7472034</id><snippet>arr = np.array([(k,)+v for k,v in data_dict.iteritems()], \
         dtype=[('date', '|O4'), ('high', '&lt;f8'), ('low', '&lt;f8')])
</snippet></ROW><ROW><id>7472034</id><snippet>arr</snippet></ROW><ROW><id>7472034</id><snippet>recarray</snippet></ROW><ROW><id>7472034</id><snippet>arr = arr.view(np.recarray)
</snippet></ROW><ROW><id>7472034</id><snippet>arr.date</snippet></ROW><ROW><id>7472231</id><snippet>f = open('report.csv', 'wb')
f.write(response_content)
f.close
</snippet></ROW><ROW><id>7472283</id><snippet>dir(print)</snippet></ROW><ROW><id>7472584</id><snippet>hkey</snippet></ROW><ROW><id>7472584</id><snippet>hKey</snippet></ROW><ROW><id>7472584</id><snippet>k</snippet></ROW><ROW><id>7472584</id><snippet>K</snippet></ROW><ROW><id>7472584</id><snippet>hkey</snippet></ROW><ROW><id>7472584</id><snippet>hkey</snippet></ROW><ROW><id>7472584</id><snippet>RecurseOpenRegEx</snippet></ROW><ROW><id>7472667</id><snippet>l = [1,5,5,4,5,4,8,9,2]

set(l)

set([1, 2, 4, 5, 8, 9])
</snippet></ROW><ROW><id>7472667</id><snippet>import random
l = []
for i in range (200000):
    l.append (random.random())
print len(set(l))
</snippet></ROW><ROW><id>7472850</id><snippet>try/except</snippet></ROW><ROW><id>7472850</id><snippet>def gener():
    a = [1,2,3,4,0, 5, 6,7, 8, 0, 9]
    for i in a:
        try:
            yield 2/i
        except ZeroDivisionError:
            pass
</snippet></ROW><ROW><id>7472878</id><snippet>&gt;&gt;&gt; msg = "Bob Smith\nJane Doe\nJane,\nPlease order more widgets\nThanks,\nBob\n"
&gt;&gt;&gt; msg
'Bob Smith\nJane Doe\nJane,\nPlease order more widgets\nThanks,\nBob\n'
&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; buf = StringIO.StringIO(msg)
&gt;&gt;&gt; buf.readline()
'Bob Smith\n'
&gt;&gt;&gt; buf.readline()
'Jane Doe\n'
</snippet></ROW><ROW><id>7473380</id><snippet>client = SSHClient()
client.load_system_host_keys()
client.connect('ssh.example.com')
stdin, stdout, stderr = client.exec_command('ls -l')
</snippet></ROW><ROW><id>7473380</id><snippet>try:
    telnet()
except:
    telnet = false
if telnet == false:
    try:
        ssh()
    ...
</snippet></ROW><ROW><id>7473613</id><snippet>import jira
import os

com = jira.Commands()
logger = jira.setupLogging()
jira_env = {'home':os.environ['HOME']}
command_name = "cat"
my_args = ["JIRA-65"]
server = "http://jira.server.com:8080" + "/rpc/soap/jirasoapservice-v2?wsdl"

class Options:
    pass

options = Options()
#You might want to set options.user and options.password here...

jira.soap = jira.Client(server)
jira.start_login(options, jira_env, command_name, com, logger)
com.run(command_name, logger, jira_env, my_args)
</snippet></ROW><ROW><id>7473731</id><snippet>datetime.now()</snippet></ROW><ROW><id>7473731</id><snippet>import pytz
import datetime as dt
kuala_lumpur=pytz.timezone('Asia/Kuala_Lumpur')
localtz=pytz.timezone('Europe/London')
</snippet></ROW><ROW><id>7473731</id><snippet>now = dt.datetime.now()
</snippet></ROW><ROW><id>7473731</id><snippet>localize</snippet></ROW><ROW><id>7473731</id><snippet>now=localtz.localize(now)
print(now)
# 2011-09-19 11:58:46.342254+01:00
</snippet></ROW><ROW><id>7473731</id><snippet>astimezone</snippet></ROW><ROW><id>7473731</id><snippet>now_in_kuala_lumpur=now.astimezone(kuala_lumpur)
print(now_in_kuala_lumpur)
# 2011-09-19 18:58:46.342254+08:00
</snippet></ROW><ROW><id>7473765</id><snippet>redis</snippet></ROW><ROW><id>7473765</id><snippet>txredis</snippet></ROW><ROW><id>7473823</id><snippet>PyObject* next(PyObject* self) {
  if i &lt; n {
         \\ go on iterating
  } else {
         PyErr_SetNone(PyExc_StopIteration);
         return NULL;
  }
}
</snippet></ROW><ROW><id>7473901</id><snippet>cProfile.run('func()')</snippet></ROW><ROW><id>7473901</id><snippet>run</snippet></ROW><ROW><id>7473992</id><snippet>deco</snippet></ROW><ROW><id>7473992</id><snippet>self</snippet></ROW><ROW><id>7473992</id><snippet>self</snippet></ROW><ROW><id>7473992</id><snippet>func</snippet></ROW><ROW><id>7473992</id><snippet>self.do_something()</snippet></ROW><ROW><id>7473992</id><snippet>def deco( func ):
    print repr( func )
    def wrapper( self, *args ):
        val = func( self, *args )
        self.do_something()
        return val
    return wrapper

class A:
    def do_something( self ):
        # Do something
        print 'A: Doing something generic for decoration'

    @deco
    def do_some_A_thing ( self ):
        # Do something 
        print 'A: Doing something generic'

class B ( A ):

    @deco
    def do_some_B_thing( self ):
        # Do something
        print "B: Doing something specific"

a = A()
b = B()
a.do_some_A_thing()
b.do_some_B_thing()
</snippet></ROW><ROW><id>7474206</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>7474274</id><snippet>&gt;&gt;&gt; htmlstr = """    &lt;input type="hidden" autocomplete="off" id="post_form_id" name="post_form_id" value="d619a1eb3becdc05a3ebea530396782f" /&gt;
...     &lt;input type="hidden" name="fb_dtsg" value="AQCYsohu" autocomplete="off" /&gt;"""
&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup(htmlstr)
&gt;&gt;&gt; [(n['name'], n['value']) for n in soup.findAll('input')]
[(u'post_form_id', u'd619a1eb3becdc05a3ebea530396782f'), (u'fb_dtsg', u'AQCYsohu')]
</snippet></ROW><ROW><id>7474298</id><snippet>LSArchitecturePriority</snippet></ROW><ROW><id>7474298</id><snippet>i386</snippet></ROW><ROW><id>7474298</id><snippet>ppc</snippet></ROW><ROW><id>7474346</id><snippet>quit</snippet></ROW><ROW><id>7474346</id><snippet>sys.exit</snippet></ROW><ROW><id>7474429</id><snippet>list_filter</snippet></ROW><ROW><id>7474429</id><snippet>list_display</snippet></ROW><ROW><id>7474429</id><snippet>def is_activated(self)
    if self.bar == 'something':
        return True
    return False
</snippet></ROW><ROW><id>7474429</id><snippet>.boolean</snippet></ROW><ROW><id>7474429</id><snippet>is_activated</snippet></ROW><ROW><id>7474429</id><snippet>is_activated.boolean = True
</snippet></ROW><ROW><id>7474429</id><snippet>list_display</snippet></ROW><ROW><id>7474429</id><snippet>short_description</snippet></ROW><ROW><id>7474429</id><snippet>is_activated.short_description = "Activated"
</snippet></ROW><ROW><id>7474684</id><snippet>% python -mtimeit "str(2147483645)"
1000000 loops, best of 3: 0.321 usec per loop

% python -mtimeit "2147483645 % 5"
10000000 loops, best of 3: 0.0351 usec per loop

% python -mtimeit "'2147483645'[-1]"
10000000 loops, best of 3: 0.0349 usec per loop
</snippet></ROW><ROW><id>7474721</id><snippet>imshow</snippet></ROW><ROW><id>7474721</id><snippet>pcolor</snippet></ROW><ROW><id>7474721</id><snippet>interpolation="nearest"</snippet></ROW><ROW><id>7474813</id><snippet>&gt;&gt;&gt; map(list.__add__, L1, L2)
[[1, 2, 'a', 'b'], [3, 4, 'c', 'd'], [5, 6, 'e', 'f']]
</snippet></ROW><ROW><id>7474833</id><snippet>def file_to_tuple(file):
    title_author, searchable, ext = file.rsplit('.', 2)
    title, author = title_author.rsplit(' - ', 1)
    return (title, author, searchable, ext)
</snippet></ROW><ROW><id>7474833</id><snippet>book_list = map(file_to_tuple, os.listdir('/home/username/Books'))

book_list = [file_to_tuple(f) for f in os.listdir('/home/username/Books')]
</snippet></ROW><ROW><id>7474833</id><snippet>str.rsplit()</snippet></ROW><ROW><id>7474833</id><snippet>maxsplit</snippet></ROW><ROW><id>7474833</id><snippet>&gt;&gt;&gt; file_to_tuple('Narnia - The Silver Chair - C.S. Lewis.1.pdf')
('Narnia - The Silver Chair', 'C.S. Lewis', '1', 'pdf')
</snippet></ROW><ROW><id>7474866</id><snippet>object</snippet></ROW><ROW><id>7474866</id><snippet>__class__</snippet></ROW><ROW><id>7474866</id><snippet>def __init__(self):
    print(self.__class__.b) # Python 2.x and old-style class
</snippet></ROW><ROW><id>7474866</id><snippet>type</snippet></ROW><ROW><id>7474866</id><snippet>def __init__(self):
    print(self.__class__.b) # __class__ works for a new-style class, too
    print(type(self).b)
</snippet></ROW><ROW><id>7474866</id><snippet>type</snippet></ROW><ROW><id>7474866</id><snippet>__class__</snippet></ROW><ROW><id>7475130</id><snippet>newrn = rn</snippet></ROW><ROW><id>7475130</id><snippet>newrn</snippet></ROW><ROW><id>7475130</id><snippet>rn</snippet></ROW><ROW><id>7475130</id><snippet>newrn = rn[:]</snippet></ROW><ROW><id>7475246</id><snippet>cPickle</snippet></ROW><ROW><id>7475246</id><snippet>pickle</snippet></ROW><ROW><id>7475376</id><snippet>SELECT id FROM statustable WHERE value = '%s'</snippet></ROW><ROW><id>7475376</id><snippet>INSERT INTO statustable(value) VALUES('%s') RETURNING id</snippet></ROW><ROW><id>7475376</id><snippet>id</snippet></ROW><ROW><id>7475376</id><snippet>fetchone()</snippet></ROW><ROW><id>7475668</id><snippet>from itertools import tee, izip
from collections import defaultdict

def pairwise(iterable): # recipe from itertools docs
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)
d = defaultdict(int)
phrase_words = ['red car', 'no lake', 'newjersey turnpike']
lines = ['i have a red car which i drove on newjersey',
         'turnpike. when i took exit 39 there was no',
         'lake. i drove my car on muddy roads which turned my red',
         'car into brown. driving on newjersey turnpike can be confusing.']

for line1, line2 in pairwise(lines):
    both_lines= ' '.join((line1, line2))
    for phrase in phrase_words:
        # counts phrases in first line and those that span to the next
        d[phrase] += both_lines.count(phrase) - line2.count(phrase)
for phrase in phrase_words:
    d[phrase] += line2.count(phrase) # otherwise last line is not searched
</snippet></ROW><ROW><id>7475765</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>7475765</id><snippet>numpy.__file__</snippet></ROW><ROW><id>7475765</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>7475765</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>7475897</id><snippet>contentnav</snippet></ROW><ROW><id>7475897</id><snippet>contentdiv</snippet></ROW><ROW><id>7475897</id><snippet>insert</snippet></ROW><ROW><id>7475897</id><snippet>div</snippet></ROW><ROW><id>7475897</id><snippet>contentdiv.index(contentnav)</snippet></ROW><ROW><id>7475897</id><snippet>contentnav</snippet></ROW><ROW><id>7475897</id><snippet>contentdiv</snippet></ROW><ROW><id>7475897</id><snippet>import lxml.etree as ET

content='''\
&lt;div id="contents"&gt;
    &lt;div id="content_nav"&gt;
        something goes here
    &lt;/div&gt;
    &lt;p&gt;
        some contents
    &lt;/p&gt;   
&lt;/div&gt;
'''
tree = ET.fromstring(content, parser=ET.HTMLParser())
contentnav = tree.find(".//div[@id='content_nav']")
contentdiv = contentnav.getparent()
contentdiv.insert(contentdiv.index(contentnav)+1,
                  ET.XML("&lt;div style='clear: both'&gt;&lt;/div&gt;"))
print(ET.tostring(tree))
</snippet></ROW><ROW><id>7475897</id><snippet>&lt;html&gt;&lt;body&gt;&lt;div id="contents"&gt;
    &lt;div id="content_nav"&gt;
        something goes here
    &lt;/div&gt;
    &lt;div style="clear: both"/&gt;&lt;p&gt;
        some contents
    &lt;/p&gt;   
&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>7476037</id><snippet>stampy.py</snippet></ROW><ROW><id>7476037</id><snippet>arch</snippet></ROW><ROW><id>7476037</id><snippet>arch -x86_64 ./stampy.py -G ...
</snippet></ROW><ROW><id>7476037</id><snippet>stampy.py</snippet></ROW><ROW><id>7476037</id><snippet>python</snippet></ROW><ROW><id>7476037</id><snippet>arch</snippet></ROW><ROW><id>7476037</id><snippet>arch -x86_64 python stampy.py -G ...
</snippet></ROW><ROW><id>7476037</id><snippet>VERSIONER_PYTHON_PREFER_32_BIT</snippet></ROW><ROW><id>7476037</id><snippet>VERSIONER_PYTHON_PREFER_32_BIT=yes ./stampy.py -G ...
</snippet></ROW><ROW><id>7476037</id><snippet>export VERSIONER_PYTHON_PREFER_32_BIT=yes
./stampy.py -G ...
</snippet></ROW><ROW><id>7476268</id><snippet>.count()</snippet></ROW><ROW><id>7476268</id><snippet>__key__</snippet></ROW><ROW><id>7477069</id><snippet>def main()
    app = BouncyGUI()
    app.grid()
    app.mainloop()
</snippet></ROW><ROW><id>7477096</id><snippet>curs = conn.cursor()
curs.execute('select * from bigtable')
</snippet></ROW><ROW><id>7477096</id><snippet>curs.fetchone()</snippet></ROW><ROW><id>7477096</id><snippet>curs.fetchmany(chunksize)</snippet></ROW><ROW><id>7477274</id><snippet>self.emit(SIGNAL('string'), 'AllDone')
</snippet></ROW><ROW><id>7477286</id><snippet>leaveWhitespace()</snippet></ROW><ROW><id>7477286</id><snippet>e = ebnf.parse(ebnf_file)
e['SPACE'] = e['SPACE'].leaveWhitespace()
e['TEST'].parseString('AA BB')
</snippet></ROW><ROW><id>7477346</id><snippet>gevent</snippet></ROW><ROW><id>7477346</id><snippet>eventlet</snippet></ROW><ROW><id>7477346</id><snippet>asyncore</snippet></ROW><ROW><id>7477346</id><snippet>twisted</snippet></ROW><ROW><id>7477346</id><snippet>pyev</snippet></ROW><ROW><id>7477346</id><snippet>pycurl</snippet></ROW><ROW><id>7477346</id><snippet>tornado</snippet></ROW><ROW><id>7477371</id><snippet>m</snippet></ROW><ROW><id>7477371</id><snippet>n</snippet></ROW><ROW><id>7477371</id><snippet>import collections
import itertools

x=[['1', 'expired', 'test', '0'], ['31', 'active', 'test', '1']]
y=[['1', 'Andrew', 'Alexander'], ['31', 'John', 'Smith']]

result=collections.defaultdict(list)
for item in itertools.chain(x,y):
    result[item[0]].append(item)
result=[list(itertools.chain.from_iterable(value)) for value in result.values()]
print(result)
</snippet></ROW><ROW><id>7477371</id><snippet>[['1', 'expired', 'test', '0', '1', 'Andrew', 'Alexander'], ['31', 'active', 'test', '1', '31', 'John', 'Smith']]
</snippet></ROW><ROW><id>7477371</id><snippet>[['1', 'expired', 'test', '0', 'Andrew', 'Alexander'], ['31', 'active', 'test', '1', 'John', 'Smith']]
</snippet></ROW><ROW><id>7477371</id><snippet>import collections
import itertools

x=[['1', 'expired', 'test', '0'], ['31', 'active', 'test', '1']]
y=[['1', 'Andrew', 'Alexander'], ['31', 'John', 'Smith']]

result={}
for item in itertools.chain(x,y):
    result.setdefault(item[0],item[:1]).extend(item[1:])
result=result.values()
print(result)
</snippet></ROW><ROW><id>7477371</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>7477497</id><snippet>with open("dtest.txt", "r") as posnfile:
    previous = None
    for line in posnfile:
        current = [float(x) for x in line.split()]
        if previous:
            delta = [abs(c - p) for c, p in zip(current, previous)]
            print ' '.join(str(d) for d in delta)
        previous = current
</snippet></ROW><ROW><id>7477568</id><snippet>sys.exit()</snippet></ROW><ROW><id>7477568</id><snippet>SystemExit</snippet></ROW><ROW><id>7477568</id><snippet>Exception</snippet></ROW><ROW><id>7477568</id><snippet>BaseException</snippet></ROW><ROW><id>7477568</id><snippet>StandardError</snippet></ROW><ROW><id>7477568</id><snippet>Exception</snippet></ROW><ROW><id>7477568</id><snippet>Exception</snippet></ROW><ROW><id>7477601</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>7477601</id><snippet>/System/Library/Frameworks/Python.frameworks</snippet></ROW><ROW><id>7477601</id><snippet>/Library/Frameworks/Python.frameworks</snippet></ROW><ROW><id>7477601</id><snippet>/Library/Frameworks/Python.frameworks</snippet></ROW><ROW><id>7477601</id><snippet>BOMFatalError</snippet></ROW><ROW><id>7477601</id><snippet>Fix system Python</snippet></ROW><ROW><id>7477601</id><snippet>Time Machine</snippet></ROW><ROW><id>7477601</id><snippet>/System/Library/Python.frameworks/</snippet></ROW><ROW><id>7477601</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>7477601</id><snippet>sudo bash
cd /usr/bin
mv python python-DISABLED
ln -s /usr/local/bin/python python
exit
</snippet></ROW><ROW><id>7477631</id><snippet>self</snippet></ROW><ROW><id>7477631</id><snippet>self.product(n1,d1,n2,d2);</snippet></ROW><ROW><id>7477631</id><snippet>self</snippet></ROW><ROW><id>7477631</id><snippet>this</snippet></ROW><ROW><id>7477631</id><snippet>self</snippet></ROW><ROW><id>7477650</id><snippet>Toplevel</snippet></ROW><ROW><id>7477650</id><snippet>from Tkinter import *
# import thread # not needed

class App:
    def __init__(self, master):
        print master

        def creatnew(): # recommend making this an instance method

            admin=Toplevel() # changed Tk to Toplevel
            lab=Label(admin,text='Workes')
            lab.pack()
            admin.minsize(width=250, height=250)
            admin.maxsize(width=250, height=250)
            admin.configure(bg='light green')
            # admin.mainloop() # only call mainloop once for the entire app!
        def other(): # you don't need define this as a function
            la=Label(master,text='other')
            la.pack()
            bu=Button(master,text='clicks',command=creatnew) # removed lambda+thread
            bu.pack()
        other() # won't need this if code is not placed in function

Admin = Tk()

Admin.minsize(width=650, height=500)
Admin.maxsize(width=650, height=500)
app = App(Admin)
Admin.mainloop()
</snippet></ROW><ROW><id>7477890</id><snippet>dig_more_objects</snippet></ROW><ROW><id>7477890</id><snippet>import time
results = []
while True:
    mark = time.time()
    newobjs = dig_more_objects(obj)
    elapsed = time.time() - mark
    results.append((newobjs, elapsed))
    count = 0
    threshhold = 0
    for objs, elapsed in results[::-1]:
        count += len(objs)  # or +1 of dig_more_objects only returns one at a time
        threshhold += elapsed
        if threshhold &gt; 60.0 and count &lt; 10:
            break
</snippet></ROW><ROW><id>7477974</id><snippet>my_output = my_output + ' ' + word
</snippet></ROW><ROW><id>7477974</id><snippet>my_output</snippet></ROW><ROW><id>7477974</id><snippet>word</snippet></ROW><ROW><id>7477974</id><snippet>my_output = '
'.join(my_output)</snippet></ROW><ROW><id>7477974</id><snippet>text_to_message</snippet></ROW><ROW><id>7477974</id><snippet>import textwrap

KEYWORD_LIST  = ['STUFF:', 'THINGS:', 'JUNK:']
KEYWORD_LIST1 = ['CRAP:']

def text_to_message(text):
    result=[]
    for word in text.split():
        if word in KEYWORD_LIST or word in KEYWORD_LIST1:
            if result:
                yield ' '.join(result)
                result=[]
            yield word
        else:
            result.append(word)
    if result:
        yield ' '.join(result)

def format_messages(messages):
    title='TEXT1'
    num=1
    for message in messages:
        if message in KEYWORD_LIST:
            title='TEXT1'
        elif message in KEYWORD_LIST1:
            title='NEWTEXT'
        for line in textwrap.wrap(message,width=65):
            yield 'DATA|{n}|{t}|{l}'.format(n=num,t=title,l=line)
            num+=1

TEXT='''STUFF: some random text THINGS: some random text and some more random text and stuff JUNK: crazy randomness CRAP: such random stuff I cant believe how random'''

for line in format_messages(text_to_message(TEXT)):
    print(line)
</snippet></ROW><ROW><id>7478053</id><snippet>popen()</snippet></ROW><ROW><id>7478053</id><snippet>fcntl(fd, F_SETFD, FD_CLOEXEC)</snippet></ROW><ROW><id>7478115</id><snippet>try:
    import BeautifulSoup # Standard
except ImportError:
    import MyBeautifulSoup as BeautifulSoup # internal distribution
</snippet></ROW><ROW><id>7478352</id><snippet>src</snippet></ROW><ROW><id>7478352</id><snippet>main</snippet></ROW><ROW><id>7478352</id><snippet>src</snippet></ROW><ROW><id>7478352</id><snippet>src</snippet></ROW><ROW><id>7478352</id><snippet>sys.path</snippet></ROW><ROW><id>7478352</id><snippet>import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
</snippet></ROW><ROW><id>7478393</id><snippet>scipy.sparse</snippet></ROW><ROW><id>7478393</id><snippet>300000x4</snippet></ROW><ROW><id>7478393</id><snippet>300000x1000</snippet></ROW><ROW><id>7478393</id><snippet>0</snippet></ROW><ROW><id>7478393</id><snippet>import scipy.sparse
import numpy as np

# Make the result reproducible...
np.random.seed(1977)

def generate_random_sparse_array(nrows, ncols, numdense):
    """Generate a random sparse array with -1 or 1 in the non-zero portions"""
    i = np.random.randint(0, nrows-1, numdense)
    j = np.random.randint(0, ncols-1, numdense)
    data = np.random.random(numdense)
    data[data &lt;= 0.5] = -1
    data[data &gt; 0.5] = 1
    ij = np.vstack((i,j))
    return scipy.sparse.coo_matrix((data, ij), shape=(nrows, ncols))

A = generate_random_sparse_array(4, 300000, 1000)
B = generate_random_sparse_array(300000, 5, 1000)

C = A * B

print C.todense()
</snippet></ROW><ROW><id>7478393</id><snippet>[[ 0.  1.  0.  0.  0.]
 [ 0.  2. -1.  0.  0.]
 [ 1. -1.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.]]
</snippet></ROW><ROW><id>7478634</id><snippet>for path, dirs, files in os.walk("."):
    print path
    for file in files:
        print os.path.join(path, file)
</snippet></ROW><ROW><id>7478634</id><snippet>dirs</snippet></ROW><ROW><id>7478634</id><snippet>print path</snippet></ROW><ROW><id>7478705</id><snippet>url_for('add', variable=foo)
</snippet></ROW><ROW><id>7478838</id><snippet>data</snippet></ROW><ROW><id>7478838</id><snippet>import numpy as np
import datetime as dt
dates=[dt.date(2010,1,1)+dt.timedelta(days=i) for i in range(365)]
values=range(365)
data=np.array(zip(dates,values),dtype=[('dates','object'),('value','&lt;f8')])
</snippet></ROW><ROW><id>7478838</id><snippet>(data['dates']&gt;=dt.date(2010,9,1)) &amp; (data['dates']&lt;dt.date(2010,10,1))</snippet></ROW><ROW><id>7478838</id><snippet>data</snippet></ROW><ROW><id>7478838</id><snippet>True</snippet></ROW><ROW><id>7478838</id><snippet>print(data['value'][(data['dates']&gt;=dt.date(2010,9,1)) &amp;
           (data['dates']&lt;dt.date(2010,10,1))])
</snippet></ROW><ROW><id>7478914</id><snippet>PDFLOCATIONS = "I:\Collect and Process Data\Licensing Schemes Processing\03 Data Preparation Original\USQ\September-October 2010"
</snippet></ROW><ROW><id>7478914</id><snippet>PDFLOCATIONS = r"I:\Collect and Process Data\Licensing Schemes Processing\03 Data Preparation Original\USQ\September-October 2010"
</snippet></ROW><ROW><id>7478914</id><snippet>r</snippet></ROW><ROW><id>7478914</id><snippet>final_values_list = ', '.join(fields_value_list.values).replace(r"\\", "\\")
</snippet></ROW><ROW><id>7478914</id><snippet>insert_query = 'INSERT INTO {0} ({1}) VALUES({2});'.format(TABLE,final_header_list,final_value_list)
</snippet></ROW><ROW><id>7478914</id><snippet>insert_query = 'INSERT INTO %s (%s) VALUES(%s);' % (TABLE,final_header_list,final_value_list)
</snippet></ROW><ROW><id>7478947</id><snippet>while candidates:</snippet></ROW><ROW><id>7478947</id><snippet>product</snippet></ROW><ROW><id>7478947</id><snippet>base</snippet></ROW><ROW><id>7478947</id><snippet>while products &lt; 1000</snippet></ROW><ROW><id>7478947</id><snippet>product</snippet></ROW><ROW><id>7478947</id><snippet>base</snippet></ROW><ROW><id>7478947</id><snippet>product</snippet></ROW><ROW><id>7478947</id><snippet>base</snippet></ROW><ROW><id>7478947</id><snippet>product</snippet></ROW><ROW><id>7478947</id><snippet>...
set product to base

for each candidate
    for each multiple of base, referred to as 'product'
        remove product from candidates
    set base to new value
    reset product to new base
    ...
</snippet></ROW><ROW><id>7479122</id><snippet>Base</snippet></ROW><ROW><id>7479122</id><snippet>A</snippet></ROW><ROW><id>7479122</id><snippet>B</snippet></ROW><ROW><id>7479122</id><snippet>C</snippet></ROW><ROW><id>7479122</id><snippet>from sqlalchemy.ext.declarative import declarative_base
Base = declarative_base()
</snippet></ROW><ROW><id>7479122</id><snippet>from sqlalchemy import *
from base import Base
from sqlalchemy.orm import relationship

class A(Base):
    __tablename__ = "A"
    id  = Column(Integer, primary_key=True)
    Bs  = relationship("B", backref="A.id")
    Cs  = relationship("C", backref="A.id")
</snippet></ROW><ROW><id>7479122</id><snippet>from sqlalchemy import *
from base import Base

class B(Base):
    __tablename__ = "B"
    id    = Column(Integer, primary_key=True)
    A_id  = Column(Integer, ForeignKey("A.id"))
</snippet></ROW><ROW><id>7479122</id><snippet>from sqlalchemy import *
from base import Base

class C(Base):
    __tablename__ = "C"    
    id    = Column(Integer, primary_key=True)
    A_id  = Column(Integer, ForeignKey("A.id"))
</snippet></ROW><ROW><id>7479122</id><snippet>from sqlalchemy import create_engine
from sqlalchemy.orm import relationship, backref, sessionmaker

import base


import a
import b
import c

engine = create_engine("sqlite:///:memory:")
base.Base.metadata.create_all(engine, checkfirst=True)
Session = sessionmaker(bind=engine)
session = Session()

a1 = a.A()
b1 = b.B()
b2 = b.B()
c1 = c.C()
c2 = c.C()

a1.Bs.append(b1)
a1.Bs.append(b2)    
a1.Cs.append(c1)
a1.Cs.append(c2)    
session.add(a1)
session.commit()
</snippet></ROW><ROW><id>7479122</id><snippet>$ python main.py ; echo $?
0
</snippet></ROW><ROW><id>7479189</id><snippet>@Decorator
class Foo:
    pass
</snippet></ROW><ROW><id>7479189</id><snippet>class Foo:
    pass
Foo = Decorator(Foo)
</snippet></ROW><ROW><id>7479189</id><snippet>Foo</snippet></ROW><ROW><id>7479189</id><snippet>Decorator</snippet></ROW><ROW><id>7479189</id><snippet>Goo</snippet></ROW><ROW><id>7479189</id><snippet>Foo.__class__</snippet></ROW><ROW><id>7479189</id><snippet>Decorator</snippet></ROW><ROW><id>7479189</id><snippet>(name, bases, dict)</snippet></ROW><ROW><id>7479189</id><snippet>Decorator.__init__</snippet></ROW><ROW><id>7479327</id><snippet>t = 365/365
</snippet></ROW><ROW><id>7479327</id><snippet>364/365</snippet></ROW><ROW><id>7479327</id><snippet>0</snippet></ROW><ROW><id>7479327</id><snippet>365/365</snippet></ROW><ROW><id>7479327</id><snippet>1</snippet></ROW><ROW><id>7479327</id><snippet>1</snippet></ROW><ROW><id>7479327</id><snippet>t = 365.0/365.0
</snippet></ROW><ROW><id>7479627</id><snippet>script:</snippet></ROW><ROW><id>7479627</id><snippet>app.yaml</snippet></ROW><ROW><id>7479627</id><snippet>script:</snippet></ROW><ROW><id>7479627</id><snippet>ting.py</snippet></ROW><ROW><id>7479796</id><snippet>pip install python-ldap==2.3.13
</snippet></ROW><ROW><id>7479836</id><snippet>in</snippet></ROW><ROW><id>7479836</id><snippet>==</snippet></ROW><ROW><id>7479836</id><snippet>'1' in '11' == True</snippet></ROW><ROW><id>7479836</id><snippet>('1' in '11') and ('11' == True)
</snippet></ROW><ROW><id>7479836</id><snippet>False</snippet></ROW><ROW><id>7479836</id><snippet>if 0 &lt; a &lt; 1:
</snippet></ROW><ROW><id>7479850</id><snippet># settings.py file
SECRET_KEY = 'fake stuff'

try:
    from settings_local import *
except ImportError:
    pass
</snippet></ROW><ROW><id>7479986</id><snippet>time</snippet></ROW><ROW><id>7479986</id><snippet>datetime</snippet></ROW><ROW><id>7480011</id><snippet>json.loads(checkin_json)</snippet></ROW><ROW><id>7480011</id><snippet>json.load(request.POST)</snippet></ROW><ROW><id>7480053</id><snippet>import nltk

YOUR_STRING = "Your words"

words = [w for w in YOUR_STRING.split()]
freq_dist = nltk.FreqDist(words)

tokens = freq_dist.keys()

#50 most frequent
most_frequent = tokens[:50]

#50 least frequent
least_frequent = tokens[-50:]
</snippet></ROW><ROW><id>7480072</id><snippet>.itemText()</snippet></ROW><ROW><id>7480072</id><snippet>AllItems = [QComboBoxName.itemText(i) for i in range(QComboBoxName.count())]
</snippet></ROW><ROW><id>7480420</id><snippet>capture</snippet></ROW><ROW><id>7480420</id><snippet>${" results " + capture(somedef) + " more results "}
</snippet></ROW><ROW><id>7480420</id><snippet>&lt;%
    body = capture(self.body)
    # etc.
%&gt;
</snippet></ROW><ROW><id>7480596</id><snippet>sum(item['price'] for item in list)
</snippet></ROW><ROW><id>7481070</id><snippet>(a,b,c)</snippet></ROW><ROW><id>7481070</id><snippet>{'red':[3,1]}</snippet></ROW><ROW><id>7481312</id><snippet> (r'^(?P&lt;MediaId&gt;\d+)/$', 'scango.scanner.views.download')
</snippet></ROW><ROW><id>7481325</id><snippet>numpy.logaddexp(logA,logB)</snippet></ROW><ROW><id>7481325</id><snippet>log(0)</snippet></ROW><ROW><id>7481325</id><snippet>-numpy.inf</snippet></ROW><ROW><id>7481325</id><snippet>log(1 + math.exp(-inf-logB) ) + logB</snippet></ROW><ROW><id>7481325</id><snippet>if</snippet></ROW><ROW><id>7481325</id><snippet>fabs</snippet></ROW><ROW><id>7481325</id><snippet>maximum</snippet></ROW><ROW><id>7481325</id><snippet>def log_add(logA,logB):
    return numpy.logaddexp(0,-numpy.fabs(logB-logA)) + numpy.maximum(logA,logB)
</snippet></ROW><ROW><id>7481325</id><snippet>logaddexp</snippet></ROW><ROW><id>7481325</id><snippet>def log_add2(logA, logB):
    if logA &lt; logB:
        return log_add2(logB, logA)
    return numpy.logaddexp(0,logB-logA)+logA
</snippet></ROW><ROW><id>7481325</id><snippet>numpy.logaddexp(logA, logB)</snippet></ROW><ROW><id>7481325</id><snippet>log(exp(logA)+exp(logB))</snippet></ROW><ROW><id>7481325</id><snippet>log(A+B)</snippet></ROW><ROW><id>7481457</id><snippet>import csv
file_ptr = open('filename.csv','r');
fields = range(0, total number of columns in file header)
file_data = csv.DictReader(file_ptr, fields, delimiter=',')
for data in file_data:
   print data
   # data will be in dict format and first line would be all your headers,else are column data
   # here, database query and code processing 
</snippet></ROW><ROW><id>7481826</id><snippet>autocommit=True</snippet></ROW><ROW><id>7481826</id><snippet>session.begin()</snippet></ROW><ROW><id>7481954</id><snippet>def get_form(self, request, obj=None, **kwargs):
    form = super(orderAdmin,self).get_form(request,obj,**kwargs)
    autoselect_fields_check_can_add(form,self.model,request.user)
    return form
</snippet></ROW><ROW><id>7482031</id><snippet>URLValidator</snippet></ROW><ROW><id>7482031</id><snippet>django.core</snippet></ROW><ROW><id>7482031</id><snippet>from django.core.validators import URLValidator
from django.core.exceptions import ValidationError


my_url_validator = URLValidator(verify_exists=True) #creates a URLValidator object with verify_exists.
my_url = "https://www.djangoproject.com/" #url to be verified   

#check if url is valid :)
try:                           
   my_url_validator(my_url) 
except ValidationError:
   #not valid!! :_( 
   #fix: custom stuff to the rescue :)     
   CustomStuff()...
</snippet></ROW><ROW><id>7482086</id><snippet>import httplib
connection = httplib.HTTPConnection(your_host, port_probably_80)
connection.request("OPTIONS", "*")
response = connection.getresponse()
if response.status != httplib.OK or response.reason != "OK":
   print "Down"
else:
   print "Up :)"
</snippet></ROW><ROW><id>7482413</id><snippet>mean</snippet></ROW><ROW><id>7482413</id><snippet>std</snippet></ROW><ROW><id>7482413</id><snippet>std</snippet></ROW><ROW><id>7482413</id><snippet> 1/n * sum( (xi - mean(x)**2 )
</snippet></ROW><ROW><id>7482413</id><snippet> 1/(n-1) * sum( (xi - mean(x)**2 )
</snippet></ROW><ROW><id>7482413</id><snippet>sigma</snippet></ROW><ROW><id>7482413</id><snippet>mu</snippet></ROW><ROW><id>7482413</id><snippet>mu</snippet></ROW><ROW><id>7482413</id><snippet>sigma**2</snippet></ROW><ROW><id>7482413</id><snippet>  1/n * sum( (xi-mu)**2 )
</snippet></ROW><ROW><id>7482413</id><snippet>mu</snippet></ROW><ROW><id>7482413</id><snippet>mu = mean(xi)</snippet></ROW><ROW><id>7482413</id><snippet>sigma**2</snippet></ROW><ROW><id>7482413</id><snippet>  1/(n-1) * sum( (xi- mean(x))**2 )
</snippet></ROW><ROW><id>7482559</id><snippet>if</snippet></ROW><ROW><id>7482559</id><snippet>return</snippet></ROW><ROW><id>7482559</id><snippet>a</snippet></ROW><ROW><id>7482559</id><snippet>p</snippet></ROW><ROW><id>7482883</id><snippet>self.assertTrue(myInt &gt;= 3 and myInt &lt;= 8)
</snippet></ROW><ROW><id>7482883</id><snippet>self.assertTrue(3 &lt;= myInt &lt;= 8)
</snippet></ROW><ROW><id>7483015</id><snippet>parser.add_subpasers</snippet></ROW><ROW><id>7483015</id><snippet>parser.add_subparsers</snippet></ROW><ROW><id>7483284</id><snippet>(foreign_key, somecolumn)</snippet></ROW><ROW><id>7483284</id><snippet>EXPLAIN</snippet></ROW><ROW><id>7483284</id><snippet>EXPLAIN SELECT column FROM table WHERE foreign_key = 1 AND somecolumn='val1'
</snippet></ROW><ROW><id>7483337</id><snippet>return [FormRequest.from_response(response,
            formdata={'search': 'you\'re search string'},
            callback=self.parse)]
</snippet></ROW><ROW><id>7483486</id><snippet>import module
</snippet></ROW><ROW><id>7483486</id><snippet>module</snippet></ROW><ROW><id>7483486</id><snippet>from module import *
</snippet></ROW><ROW><id>7483486</id><snippet>module</snippet></ROW><ROW><id>7483486</id><snippet>import module_2
</snippet></ROW><ROW><id>7483538</id><snippet>type</snippet></ROW><ROW><id>7483538</id><snippet>Foo</snippet></ROW><ROW><id>7483538</id><snippet>Foo</snippet></ROW><ROW><id>7483538</id><snippet>Foo</snippet></ROW><ROW><id>7483538</id><snippet>type</snippet></ROW><ROW><id>7483538</id><snippet>type</snippet></ROW><ROW><id>7483538</id><snippet>Foo()</snippet></ROW><ROW><id>7483538</id><snippet>Foo</snippet></ROW><ROW><id>7483538</id><snippet>type</snippet></ROW><ROW><id>7483538</id><snippet>Foo()</snippet></ROW><ROW><id>7483538</id><snippet>Foo</snippet></ROW><ROW><id>7483538</id><snippet>Foo</snippet></ROW><ROW><id>7483538</id><snippet>type</snippet></ROW><ROW><id>7483538</id><snippet>Foo</snippet></ROW><ROW><id>7483862</id><snippet>import sys
import unittest
import logging

logger = logging.getLogger()
logger.level = logging.DEBUG
stream_handler = logging.StreamHandler(sys.stdout)
logger.addHandler(stream_handler)

class TestCase(unittest.TestCase):
    def testSimpleMsg(self):
        stream_handler.stream = sys.stdout
        print("AA")
        logging.getLogger().info("BB")
</snippet></ROW><ROW><id>7483862</id><snippet>import sys
import unittest
import logging

logger = logging.getLogger()
logger.level = logging.DEBUG

class TestCase(unittest.TestCase):
    def testSimpleMsg(self):
        stream_handler = logging.StreamHandler(sys.stdout)
        logger.addHandler(stream_handler)
        try:
            print("AA")
            logging.getLogger().info("BB")
        finally:
            logger.removeHandler(stream_handler)
</snippet></ROW><ROW><id>7483929</id><snippet>os.rename(src, dst)</snippet></ROW><ROW><id>7483929</id><snippet>print repr(src)</snippet></ROW><ROW><id>7483929</id><snippet>print(ascii(src))</snippet></ROW><ROW><id>7483929</id><snippet>src</snippet></ROW><ROW><id>7483929</id><snippet>some-folder</snippet></ROW><ROW><id>7483929</id><snippet>some-folder</snippet></ROW><ROW><id>7483929</id><snippet>unicode</snippet></ROW><ROW><id>7483929</id><snippet>for filename in os.listdir("C:\\foo\\bar\\baz"):
    dst = some_func(filename)
    os.rename(filename, dst)
</snippet></ROW><ROW><id>7483929</id><snippet>for filename in os.listdir(u"C:\\foo\\bar\\baz"):
    dst = some_func(filename)
    os.rename(filename, dst)
</snippet></ROW><ROW><id>7484065</id><snippet>foo = repo.cfg.get(repo.id, 'foo')
</snippet></ROW><ROW><id>7484065</id><snippet>from yum import config, YumBase

config.RepoConf.foo = config.Option()

yum = YumBase()
for repo in yum.repos.listEnabled():
    print repo.id, repo.foo
</snippet></ROW><ROW><id>7484605</id><snippet>testLogger.handlers = []</snippet></ROW><ROW><id>7484749</id><snippet>new_dict</snippet></ROW><ROW><id>7484749</id><snippet>my_list</snippet></ROW><ROW><id>7484749</id><snippet>my_list.remove(new_dict)</snippet></ROW><ROW><id>7484749</id><snippet>if new_dict in my_list</snippet></ROW><ROW><id>7485059</id><snippet>atexit</snippet></ROW><ROW><id>7485059</id><snippet>import atexit

@atexit.register
def goodbye():
    print "You are now leaving the Python sector."
</snippet></ROW><ROW><id>7485064</id><snippet>CustomTreeCtrl</snippet></ROW><ROW><id>7485064</id><snippet>ListCtrl</snippet></ROW><ROW><id>7485064</id><snippet>CheckListCtrlMixin</snippet></ROW><ROW><id>7485187</id><snippet>len(transformMatrix) == 6</snippet></ROW><ROW><id>7485187</id><snippet> return "matrix(%f %f %f %f %f %f)" % tuple(transformMatrix)
</snippet></ROW><ROW><id>7485231</id><snippet>vncbrowser</snippet></ROW><ROW><id>7485231</id><snippet>import vncbrowser as vnc_one
import mysite.vncbrowser as vnc_two

print vnc_one.__file__
print vnc_two.__file__
</snippet></ROW><ROW><id>7485231</id><snippet>from models import ...
</snippet></ROW><ROW><id>7485231</id><snippet>from XXX.models import ...
</snippet></ROW><ROW><id>7485255</id><snippet>argparse</snippet></ROW><ROW><id>7485255</id><snippet>arg1</snippet></ROW><ROW><id>7485255</id><snippet>arg2</snippet></ROW><ROW><id>7485255</id><snippet>nargs="?"</snippet></ROW><ROW><id>7485255</id><snippet>help</snippet></ROW><ROW><id>7485255</id><snippet>-h</snippet></ROW><ROW><id>7485255</id><snippet>--help</snippet></ROW><ROW><id>7485255</id><snippet>class MyAction(argparse.Action):
    def __call__(self, parser, values, namespace, option_string):
        print "Whatever"
        parser.exit()
</snippet></ROW><ROW><id>7485255</id><snippet>arg1</snippet></ROW><ROW><id>7485255</id><snippet>arg2</snippet></ROW><ROW><id>7485255</id><snippet>-l</snippet></ROW><ROW><id>7485255</id><snippet>--list</snippet></ROW><ROW><id>7485255</id><snippet>--help</snippet></ROW><ROW><id>7485277</id><snippet>self</snippet></ROW><ROW><id>7485446</id><snippet>+ax.transData</snippet></ROW><ROW><id>7485446</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib as mpl
from matplotlib.collections import PatchCollection

fig = plt.figure()
ax = fig.add_subplot(111)

myAngles=[0, -45, -90]
myColors=[30, 40, 50]
myPatches=[]

for color, angle in zip (myColors,myAngles):
    #r2 = patches.Rectangle((0,0), 20, 40, color=color,  alpha=0.50)
    r2 = patches.Rectangle((0,0), 20, 40)
    t2 = mpl.transforms.Affine2D().rotate_deg(angle) #+ ax.transData
    r2.set_transform(t2)
    #ax.add_patch(r2)
    myPatches.append(r2)

    plt.xlim(-20, 60)
    plt.ylim(-20, 60)

    plt.grid(True)


collection = PatchCollection(myPatches, cmap=mpl.cm.jet, alpha=0.5)
collection.set_array(np.array(myColors))
ax.add_collection(collection)

fig.savefig('withoutTransData.png')
plt.show()
</snippet></ROW><ROW><id>7485660</id><snippet>&gt;&gt;&gt; crs = open("file.txt", "r")
&gt;&gt;&gt; for columns in ( raw.strip().split() for raw in crs ):  
...     print columns[0]
... 
N
2
3
3
3
</snippet></ROW><ROW><id>7485660</id><snippet>zip</snippet></ROW><ROW><id>7485660</id><snippet>&gt;&gt;&gt; crs = open("file.txt", "r")
&gt;&gt;&gt; rows = (row.strip().split() for row in crs)
&gt;&gt;&gt; zip(*rows)
[('N', '2', '3', '3', '3'), 
 ('ID', '2343333', '3549287', '9383737', '8272655'), 
 ('REMAIN', 'bana', 'moredp', 'hinsila', 'hinsila'), 
 ('VERS', 'twelve', 'twelve', 'twelve', 'eight')]
</snippet></ROW><ROW><id>7485660</id><snippet>&gt;&gt;&gt; crs = open("file.txt", "r")
&gt;&gt;&gt; rows = (row.strip().split() for row in crs)
&gt;&gt;&gt; zip(*(row for row in rows if row))
[('N', '2', '3', '3', '3'), ('ID', '2343333', '3549287', '9383737', '8272655'), ('REMAIN', 'bana', 'moredp', 'hinsila', 'hinsila'), ('VERS', 'twelve', 'twelve', 'twelve', 'eight')]
</snippet></ROW><ROW><id>7485898</id><snippet>&lt;form name="login" method="POST" action="action.php"&gt;
    &lt;input name="username"&gt;&lt;br /&gt;
    &lt;input name="password"&gt;&lt;br&gt;
    &lt;input type="submit"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>7485898</id><snippet>NSURL *url = [NSURL URLWithString:@"http://test.com/action.php];
ASIFormDataRequest *request = [[[ASIFormDataRequest alloc] initWithURL:url] autorelease];
[request setPostValue:@"Admin" forKey:@"username"];
[request setPostValue:@"1234" forKey:@"password"];
[request startSynchronous];
</snippet></ROW><ROW><id>7486181</id><snippet>import tkMessageBox
tkMessageBox.showerror(message='some error')
</snippet></ROW><ROW><id>7486225</id><snippet>for SelectedItem in self.ListDialog.ContentList.selectedItems():
    self.ListDialog.ContentList.takeItem(self.ListDialog.ContentList.row(SelectedItem)
</snippet></ROW><ROW><id>7486350</id><snippet>import subprocess as sub

process = sub.Popen("ls --colors=always /", stdout=sub.PIPE, stderr=sub.PIPE)
output, errors = process.communicate()
</snippet></ROW><ROW><id>7486350</id><snippet>output</snippet></ROW><ROW><id>7486366</id><snippet>title = models.CharField(max_length=1000)
text = models.CharField(max_length=5000)
</snippet></ROW><ROW><id>7486366</id><snippet>AuthorForm</snippet></ROW><ROW><id>7486366</id><snippet>StoryForm</snippet></ROW><ROW><id>7486366</id><snippet>author_form = AuthorForm(request.POST)
if author_form.is_valid():
    author = author_form.save()
    story_form = StoryForm(request.POST)
    if story_form.is_valid():
        story = story_form.save(commit=False)
        story.author = author
        story.save()
</snippet></ROW><ROW><id>7486366</id><snippet>instance</snippet></ROW><ROW><id>7486476</id><snippet>&gt;&gt;&gt; print 'hello world'
</snippet></ROW><ROW><id>7486476</id><snippet>python C:/users/user/Desktop/practice/new.py</snippet></ROW><ROW><id>7486635</id><snippet> u"ł" in u"źdźbło"
 &gt;&gt;&gt; True
</snippet></ROW><ROW><id>7486635</id><snippet>u"ł" in u"źdźblo"
&gt;&gt;&gt; False 
</snippet></ROW><ROW><id>7486635</id><snippet># coding: utf-8
</snippet></ROW><ROW><id>7487006</id><snippet>data[i] = data[i] XOR mask[j MOD 4]
</snippet></ROW><ROW><id>7487112</id><snippet>python dbshell --database mssql</snippet></ROW><ROW><id>7487247</id><snippet>def __init__(self, application, **traits):
     Handler.__init__(self, **traits)
     self.application = application
</snippet></ROW><ROW><id>7487473</id><snippet># read line without blocking
while not p.poll():
try: 
    line = q.get_nowait() # or q.get(timeout=.1)
except Empty:
    pass # Do nothing
else: # got line
    print line
</snippet></ROW><ROW><id>7487520</id><snippet>shutil.move</snippet></ROW><ROW><id>7487520</id><snippet>shutil.move(path_paths[-1], data_data)
</snippet></ROW><ROW><id>7487520</id><snippet>path_paths[-1]</snippet></ROW><ROW><id>7487520</id><snippet>data_data</snippet></ROW><ROW><id>7487520</id><snippet>os.renames</snippet></ROW><ROW><id>7487520</id><snippet>os.rename</snippet></ROW><ROW><id>7487540</id><snippet>return_code</snippet></ROW><ROW><id>7488229</id><snippet>usergroups</snippet></ROW><ROW><id>7488229</id><snippet>class myUser_Group(models.Model):
    name = models.CharField(max_length=100)
</snippet></ROW><ROW><id>7488229</id><snippet>class MyUserGroup(models.Model):
    name = models.CharField(max_length=100)
</snippet></ROW><ROW><id>7488229</id><snippet>$ python manage.py schemamigration usergroups model_name_change --empty
</snippet></ROW><ROW><id>7488229</id><snippet>import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models

class Migration(SchemaMigration):

    def forwards(self, orm):
        # Change the table name from the old model name to the new model name
        # ADD THIS LINE (using the correct table names)
        db.rename_table('usergroups_myuser_group', 'usergroups_myusergroup')


    def backwards(self, orm):
        # Provide a way to do the migration backwards by renaming the other way
        # ADD THIS LINE (using the correct table names)
        db.rename_table('usergroups_myusergroup', 'usergroups_myuser_group')


    models = {
        'usergroups.myusergroup': {
            'Meta': {'object_name': 'MyUserGroup'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['usergroups']
</snippet></ROW><ROW><id>7488229</id><snippet>forwards</snippet></ROW><ROW><id>7488229</id><snippet>backwards</snippet></ROW><ROW><id>7488388</id><snippet>dicts</snippet></ROW><ROW><id>7488388</id><snippet>contents = []
tmp_rcd = {'classnum': 101, 'classname': "Mrs. Jones' Math Class", ...}
contents.append.tmp.rcd
...
print contents[i]['classname']
</snippet></ROW><ROW><id>7488797</id><snippet>"</snippet></ROW><ROW><id>7488797</id><snippet>'</snippet></ROW><ROW><id>7489060</id><snippet>time.time()</snippet></ROW><ROW><id>7489060</id><snippet>import time

# receive one packet
t0 = time.time()
# then receive the other packet
t1 = time.time()

print 'Time between packets (seconds):', t1 - t0
</snippet></ROW><ROW><id>7489106</id><snippet>round</snippet></ROW><ROW><id>7489106</id><snippet>n2 = round(n, 2)
</snippet></ROW><ROW><id>7489106</id><snippet>%.2f</snippet></ROW><ROW><id>7489106</id><snippet>Decimal</snippet></ROW><ROW><id>7489249</id><snippet>if Item in List</snippet></ROW><ROW><id>7489249</id><snippet>List.index(Item)</snippet></ROW><ROW><id>7489249</id><snippet>ItemNumber=List.index(Item)</snippet></ROW><ROW><id>7489249</id><snippet>List.append(Item)</snippet></ROW><ROW><id>7489249</id><snippet>ItemNumber = len(List)-1</snippet></ROW><ROW><id>7489249</id><snippet>List.index</snippet></ROW><ROW><id>7489249</id><snippet># earlier in the program, NOT inside the loop
Dup = {}

# inside your loop to add items:
if Item in Dup:
    ItemNumber = Dup[Item]
else:
    List.append(Item)
    Dup[Item] = ItemNumber = len(List)-1
</snippet></ROW><ROW><id>7489338</id><snippet>Remove require_debug_false from global_settings.py (since it does
</snippet></ROW><ROW><id>7489338</id><snippet>~ $ mkvirtualenv t16568-regression
New python executable in t16568-regression/bin/python
Installing setuptools............done.
Installing pip...............done.
virtualenvwrapper.user_scripts creating /Users/andreas/.virtualenvs/t16568-regression/bin/predeactivate
virtualenvwrapper.user_scripts creating /Users/andreas/.virtualenvs/t16568-regression/bin/postdeactivate
virtualenvwrapper.user_scripts creating /Users/andreas/.virtualenvs/t16568-regression/bin/preactivate
virtualenvwrapper.user_scripts creating /Users/andreas/.virtualenvs/t16568-regression/bin/postactivate
virtualenvwrapper.user_scripts creating /Users/andreas/.virtualenvs/t16568-regression/bin/get_env_details
[t16568-regression] ~ $ pip install django==1.3.1
Downloading/unpacking django==1.3.1
  Downloading Django-1.3.1.tar.gz (6.5Mb): 6.5Mb downloaded
  Running setup.py egg_info for package django

Installing collected packages: django
  Running setup.py install for django
    changing mode of build/scripts-2.7/django-admin.py from 644 to 755

    changing mode of /Users/andreas/.virtualenvs/t16568-regression/bin/django-admin.py to 755
Successfully installed django
Cleaning up...
[t16568-regression] ~ $ cd code/
[t16568-regression] ~ $ django-admin.py startproject foo
[t16568-regression] ~ $ cd foo/
[t16568-regression] ~/foo $ python manage.py shell

In [1]: import django; django.get_version()
Out[1]: '1.3.1'
</snippet></ROW><ROW><id>7489452</id><snippet>class mem_mon(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.keeprunning = True
        self.maxmem = 0
        self.interrupt = threading.Event()

    def run(self):
        # this loop will run until you call set() on the interrupt
        while not self.interrupt.isSet():
            self.maxmem = max(self.maxmem, ck_mem())

            # this will either sleep for 10 seconds (for the timeout)
            # or it will be interrupted by the interrupt being set
            self.interrupt.wait(10)

mem = mem_mon()
mem.run()

# later, set the interrupt to both halt the 10-second sleep and end the loop
mem.interrupt.set()
</snippet></ROW><ROW><id>7489455</id><snippet>QtCore.QTimer.singleShot(1, self, QtCore.SLOT(recall(int)), arg1)
</snippet></ROW><ROW><id>7489455</id><snippet>QtCore.QTimer.singleShot(1, self, QtCore.SLOT(recall(arg1)), arg1)
</snippet></ROW><ROW><id>7489455</id><snippet>int</snippet></ROW><ROW><id>7489455</id><snippet>recall</snippet></ROW><ROW><id>7489455</id><snippet>method1</snippet></ROW><ROW><id>7489455</id><snippet>int</snippet></ROW><ROW><id>7489613</id><snippet>def query(q,epr,f='application/json'):
    try:
        params = {'query': q}
        params = urllib.urlencode(params)
        opener = urllib2.build_opener(urllib2.HTTPHandler)
        request = urllib2.Request(epr+'?'+params)
        request.add_header('Accept', f)
        request.get_method = lambda: 'GET'
        url = opener.open(request)
        return url.read()
    except Exception, e:
        traceback.print_exc(file=sys.stdout)
        raise e 
</snippet></ROW><ROW><id>7489613</id><snippet>&gt;&gt;&gt; q1 = """
... select ?birthPlace where {
... &lt;http://dbpedia.org/resource/Claude_Monet&gt; &lt;http://dbpedia.org/property/birthPlace&gt; ?birthPlace .
...  }"""
&gt;&gt;&gt; print query(q1,"http://dbpedia.org/sparql")

{ "head": { "link": [], "vars": ["birthPlace"] },
  "results": { "distinct": false, "ordered": true, "bindings": [
    { "birthPlace": { "type": "literal", "xml:lang": "en", "value": "Paris, France" }} ] } }
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7489828</id><snippet>close()</snippet></ROW><ROW><id>7489828</id><snippet>contextlib.closing</snippet></ROW><ROW><id>7489828</id><snippet>from contextlib import closing
with closing(shelve.open(filename)) as f:
    # your 'with' block here
</snippet></ROW><ROW><id>7489828</id><snippet>close()</snippet></ROW><ROW><id>7489828</id><snippet>shelve.open(filename)</snippet></ROW><ROW><id>7489828</id><snippet>with</snippet></ROW><ROW><id>7490115</id><snippet>id</snippet></ROW><ROW><id>7490115</id><snippet>id</snippet></ROW><ROW><id>7490115</id><snippet>cProfile</snippet></ROW><ROW><id>7490115</id><snippet>id</snippet></ROW><ROW><id>7490115</id><snippet>cProfile</snippet></ROW><ROW><id>7490129</id><snippet>$ dig +short ec2-75-101-137-243.compute-1.amazonaws.com
75.101.137.243
</snippet></ROW><ROW><id>7490129</id><snippet>$ dig +short ec2-75-101-137-243.compute-1.amazonaws.com
10.254.171.132
</snippet></ROW><ROW><id>7490299</id><snippet>repr</snippet></ROW><ROW><id>7490299</id><snippet>repr</snippet></ROW><ROW><id>7490431</id><snippet>def foo(*mylist):
    bar("first", *mylist)

def bar(*vals):
    print "|".join(vals)

foo("a","b")
</snippet></ROW><ROW><id>7490431</id><snippet>first|a|b
</snippet></ROW><ROW><id>7491356</id><snippet>def</snippet></ROW><ROW><id>7491356</id><snippet>:</snippet></ROW><ROW><id>7491356</id><snippet>^\s*def (\S+)\s*\(\s*\S+\s*(?:,\s*\S+)*\):$</snippet></ROW><ROW><id>7491356</id><snippet>^</snippet></ROW><ROW><id>7491356</id><snippet>$</snippet></ROW><ROW><id>7491398</id><snippet>__get__()</snippet></ROW><ROW><id>7491398</id><snippet>class Function(object):
    . . .
    def __get__(self, obj, objtype=None):
        "Simulate func_descr_get() in Objects/funcobject.c"
        return types.MethodType(self, obj, objtype)
</snippet></ROW><ROW><id>7491398</id><snippet>__get__</snippet></ROW><ROW><id>7491398</id><snippet>types.MethodType</snippet></ROW><ROW><id>7491428</id><snippet>discovered_devices = discover_devices()
</snippet></ROW><ROW><id>7491428</id><snippet>while</snippet></ROW><ROW><id>7491428</id><snippet>for</snippet></ROW><ROW><id>7491428</id><snippet>while</snippet></ROW><ROW><id>7491428</id><snippet>for</snippet></ROW><ROW><id>7491428</id><snippet>for</snippet></ROW><ROW><id>7491428</id><snippet>else:
    continue
break
</snippet></ROW><ROW><id>7491428</id><snippet>sleep()</snippet></ROW><ROW><id>7491483</id><snippet>&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.uname()
('Darwin', 'Matthew-Rankins-MacBook-Pro.local', '10.8.0', 
'Darwin Kernel Version 10.8.0: Tue Jun  7 16:32:41 PDT 2011; 
root:xnu-1504.15.3~1/RELEASE_X86_64', 'x86_64', 'i386')
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7491483</id><snippet>platform.uname()</snippet></ROW><ROW><id>7491483</id><snippet>os.uname()</snippet></ROW><ROW><id>7491639</id><snippet>re.findall(r'\{(.+?)\}', request.params['upsell'])
</snippet></ROW><ROW><id>7491639</id><snippet>?</snippet></ROW><ROW><id>7491639</id><snippet>.+</snippet></ROW><ROW><id>7491639</id><snippet>re.findall()</snippet></ROW><ROW><id>7491639</id><snippet>re.finditer()</snippet></ROW><ROW><id>7491639</id><snippet>match.group(1)</snippet></ROW><ROW><id>7491639</id><snippet>match.group()</snippet></ROW><ROW><id>7491812</id><snippet>sudo pip install django-registration
</snippet></ROW><ROW><id>7491812</id><snippet>sudo apt-get install python-pip
</snippet></ROW><ROW><id>7491812</id><snippet>.../&lt;project&gt;/&lt;app&gt;/{*.py|models|templates|etc..}
</snippet></ROW><ROW><id>7491885</id><snippet>Tk.mainloop</snippet></ROW><ROW><id>7491885</id><snippet>Queue.Queue</snippet></ROW><ROW><id>7492124</id><snippet>@Cache(max_hits=100, timeout=50)</snippet></ROW><ROW><id>7492124</id><snippet>__init__(max_hits=100, timeout=50)</snippet></ROW><ROW><id>7492124</id><snippet>function</snippet></ROW><ROW><id>7492124</id><snippet>class _Cache(object):
    def __init__(self, function, max_hits=10, timeout=5):
        self.function = function
        self.max_hits = max_hits
        self.timeout = timeout
        self.cache = {}

    def __call__(self, *args):
        # Here the code returning the correct thing.

# wrap _Cache to allow for deferred calling
def Cache(function=None, max_hits=10, timeout=5):
    if function:
        return _Cache(function)
    else:
        def wrapper(function):
            return _Cache(function, max_hits, timeout)

        return wrapper

@Cache
def double(x):
    return x * 2

@Cache(max_hits=100, timeout=50)
def double(x):
    return x * 2
</snippet></ROW><ROW><id>7492428</id><snippet>re.match(r'[a-zA-Z]+-\d+\Z', line)
</snippet></ROW><ROW><id>7492653</id><snippet>&gt;&gt;&gt; re.split(r'(?=\s+Change \d+ on \d{4})\s+', '''    Change 421387 on 2011/09/20 by person@domain.com
...     Some random text including line breaks
...     Change 421388 on 2011/09/20 by person2@domain.com
...     Some other random text including line breaks''')
['', 'Change 421387 on 2011/09/20 by person@domain.com\n    Some random text including line breaks', 'Change 421388 on 2011/09/20 by person2@domain.com\n    Some other random text including line breaks']
</snippet></ROW><ROW><id>7492814</id><snippet>except Exception:
    pass
</snippet></ROW><ROW><id>7493083</id><snippet>python equivalent of DBD::CSV</snippet></ROW><ROW><id>7493183</id><snippet>{'foo': ['bar', 42]}
</snippet></ROW><ROW><id>7493269</id><snippet>cleaned_list = [item for item in dirty_list if item.video_id is not None]
</snippet></ROW><ROW><id>7493316</id><snippet>&gt; GET /xrds?username=cataphract.myopenid.com HTTP/1.1
&gt; Host: www.myopenid.com
&gt; Accept: application/xrds+xml
&gt;
&lt; HTTP/1.1 301 Moved Permanently
&lt; Location: http://cataphract.myopenid.com/xrds
</snippet></ROW><ROW><id>7493316</id><snippet>http://{username}.myopenid.com/xrds</snippet></ROW><ROW><id>7493481</id><snippet>one</snippet></ROW><ROW><id>7493481</id><snippet>one</snippet></ROW><ROW><id>7493481</id><snippet>rv[0]</snippet></ROW><ROW><id>7493481</id><snippet>if rv</snippet></ROW><ROW><id>7493570</id><snippet>while running:
</snippet></ROW><ROW><id>7493570</id><snippet>barrel = pygame.transform.scale(barrel, (init(barrely/4),init(barrely/4)))
screen.blit(barrel, (barrelx, barrely))
barrel = pygame.image.load("images\Barrel.gif")
</snippet></ROW><ROW><id>7494176</id><snippet>theTable = {};  --Fill this as needed
local theValue = theTable[1];  --Get the value
table.remove(theTable, 1);     --Remove the value from the table.
</snippet></ROW><ROW><id>7494246</id><snippet>pytz</snippet></ROW><ROW><id>7494246</id><snippet>normalize</snippet></ROW><ROW><id>7494246</id><snippet>import datetime as dt
import pytz

tz=pytz.timezone('Europe/London')
t1 = dt.datetime(2012,10,28,0,30,0)
t1=tz.localize(t1)
t2 = dt.timedelta(hours=3)
sumVal = t1 + t2
</snippet></ROW><ROW><id>7494246</id><snippet>sumVal</snippet></ROW><ROW><id>7494246</id><snippet>print(repr(sumVal))
# datetime.datetime(2012, 10, 28, 3, 30, tzinfo=&lt;DstTzInfo 'Europe/London' BST+1:00:00 DST&gt;)
</snippet></ROW><ROW><id>7494246</id><snippet>sumVal</snippet></ROW><ROW><id>7494246</id><snippet>sumVal = tz.normalize(sumVal)
print(repr(sumVal))
# datetime.datetime(2012, 10, 28, 2, 30, tzinfo=&lt;DstTzInfo 'Europe/London' GMT0:00:00 STD&gt;)
</snippet></ROW><ROW><id>7494246</id><snippet>2012-10-28 02:00:00</snippet></ROW><ROW><id>7494408</id><snippet>return [item[0] for item in self.items() if item[1] == value]
</snippet></ROW><ROW><id>7494408</id><snippet>return next(item[0] for item in self.items() if item[1] == value)
</snippet></ROW><ROW><id>7494408</id><snippet>list</snippet></ROW><ROW><id>7494408</id><snippet>next</snippet></ROW><ROW><id>7494408</id><snippet>StopIteration</snippet></ROW><ROW><id>7494408</id><snippet>None</snippet></ROW><ROW><id>7494408</id><snippet>return next((item[0] for item in self.items() if item[1] == value), None)
</snippet></ROW><ROW><id>7494451</id><snippet>CPPDEFINES</snippet></ROW><ROW><id>7494451</id><snippet>env.Append(CPPDEFINES = { 'BLUB': None, 'VALUE2': None, 'Foo': 1 })
</snippet></ROW><ROW><id>7494451</id><snippet>env.Append(CPPDEFINES = { 'BLUB': None, 'VALUE2': None })
...and sometime later...
env.Append(CPPDEFINES = { 'Foo': 1 })
</snippet></ROW><ROW><id>7494578</id><snippet>from django.contrib.auth import login, User
from mongoengine.queryset import DoesNotExist

def login_view(request):
    try:
        user = User.objects.get(username=request.POST['username'])
        if user.check_password(request.POST['password']):
            user.backend = 'mongoengine.django.auth.MongoEngineBackend'
            login(request, user)
            request.session.set_expiry(60 * 60 * 1) # 1 hour timeout
            return HttpResponse(user)
        else:
            return HttpResponse('login failed')
    except DoesNotExist:
        return HttpResponse('user does not exist')
    except Exception
        return HttpResponse('unknown error')
</snippet></ROW><ROW><id>7494578</id><snippet>TEMPLATE_CONTEXT_PROCESSORS = (
    ...
    'django.contrib.auth.context_processors.auth',
    ...
)
</snippet></ROW><ROW><id>7494578</id><snippet>AuthenticationMiddleware</snippet></ROW><ROW><id>7494578</id><snippet>request</snippet></ROW><ROW><id>7494578</id><snippet>MIDDLEWARE_CLASSES = (
...
    'django.contrib.auth.middleware.AuthenticationMiddleware',
...
)
</snippet></ROW><ROW><id>7494745</id><snippet>cherrypy.config.update(
    {'server.socket_host': '10.149.4.240' } ) # Pub IP
cherrypy.quickstart()
</snippet></ROW><ROW><id>7494745</id><snippet>cherrypy.config.update(
    {'server.socket_host': '0.0.0.0'} )      
cherrypy.quickstart()
</snippet></ROW><ROW><id>7494804</id><snippet>url = 'https://graph.facebook.com/me/friends/'
params = {'access_token': 'a valid access-token...', 'fields': 'id,name,birthday'}

try:
  con = urllib2.urlopen( url + '?' + urllib.urlencode(params))
  print con.read()
except Exception as excp:
  print excp
</snippet></ROW><ROW><id>7495204</id><snippet>PythonWin 3.2.1 (default, Jul 10 2011, 21:51:15) [MSC v.1500 32 bit (Intel)] on win32.
Portions Copyright 1994-2008 Mark Hammond - see 'Help/About PythonWin' for further copyright information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.maxunicode
65535
</snippet></ROW><ROW><id>7495204</id><snippet>&gt;&gt;&gt; s = "abc\u20ac\U00010302\U0010fffd"
&gt;&gt;&gt; len(s)
8
&gt;&gt;&gt; for c in s:
...     print('U+{:04X}'.format(ord(c)))
...     
U+0061
U+0062
U+0063
U+20AC
U+D800
U+DF02
U+DBFF
U+DFFD
</snippet></ROW><ROW><id>7495204</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; s=s.encode('utf-32-be')
&gt;&gt;&gt; struct.unpack('&gt;{}L'.format(len(s)//4),s)
(97, 98, 99, 8364, 66306, 1114109)
&gt;&gt;&gt; for i in struct.unpack('&gt;{}L'.format(len(s)//4),s):
...     print('U+{:04X}'.format(i))
...     
U+0061
U+0062
U+0063
U+20AC
U+10302
U+10FFFD
</snippet></ROW><ROW><id>7495204</id><snippet>&gt;&gt;&gt; s = "abc\u20ac\U00010302\U0010fffd"
&gt;&gt;&gt; len(s)
6
&gt;&gt;&gt; for c in s:
...     print('U+{:04X}'.format(ord(c)))
...     
U+0061
U+0062
U+0063
U+20AC
U+10302
U+10FFFD
</snippet></ROW><ROW><id>7495275</id><snippet>class Meta:</snippet></ROW><ROW><id>7495275</id><snippet>objects</snippet></ROW><ROW><id>7495275</id><snippet>object</snippet></ROW><ROW><id>7495275</id><snippet>ForeignKey</snippet></ROW><ROW><id>7495275</id><snippet>_set</snippet></ROW><ROW><id>7495275</id><snippet>Employees</snippet></ROW><ROW><id>7495275</id><snippet>expenses_set</snippet></ROW><ROW><id>7495275</id><snippet>create</snippet></ROW><ROW><id>7495275</id><snippet>delete</snippet></ROW><ROW><id>7495275</id><snippet>new_expense = (Employee.objects.get(name='John Doe')
    .expense_set.create(foo='bar', ...))
</snippet></ROW><ROW><id>7495275</id><snippet>Employee</snippet></ROW><ROW><id>7495275</id><snippet>employee = Employee.objects.get(name='John Doe')
new_expense = employee.expense_set.create(foo='bar', ...)
</snippet></ROW><ROW><id>7495275</id><snippet>=</snippet></ROW><ROW><id>7495275</id><snippet>ForeignKey</snippet></ROW><ROW><id>7495275</id><snippet>related_name</snippet></ROW><ROW><id>7495275</id><snippet>class Expenses(models.Model):
    ...
    employee = models.ForeignKey(Employees, related_name='expenses')

...
employee = Employee.objects.get(name='John Doe')
new_expense = employee.expenses.create(foo='bar', ...)
</snippet></ROW><ROW><id>7495275</id><snippet>employee = Employee.objects.get(name='John Doe')
employee_expenses = employee.expenses.all()
</snippet></ROW><ROW><id>7495275</id><snippet>employee_expenses = Employee.objects.get(name='John Doe').expenses.all()
</snippet></ROW><ROW><id>7495275</id><snippet>employee_expenses = Expense.objects.filter(employee__name="John Doe")
</snippet></ROW><ROW><id>7495275</id><snippet>__</snippet></ROW><ROW><id>7495275</id><snippet>Employee</snippet></ROW><ROW><id>7495719</id><snippet>r</snippet></ROW><ROW><id>7495719</id><snippet>In [1]: foo = r"\frac{}{}"

In [2]: foo
Out[2]: '\\frac{}{}'
</snippet></ROW><ROW><id>7496204</id><snippet>class A(object):
  def __init__(self):
    self.b = B(self)

class B(object):
  def __init__(self, a):
    self.a = a

a = A()
b = a.b
</snippet></ROW><ROW><id>7496204</id><snippet>class A(object):
  def __init__(self, b):
    self.b = b
    b.a = self

class B(object):
  def __init__(self):
    #Will be set by A later
    self.a = None

b = B()
a = A(b)
</snippet></ROW><ROW><id>7496371</id><snippet>def some_long_foo(data_array, protocol):
    def send_msg(msg, protocol):
        # It actually looks petter in classes without pushing protocol here and
        # there
        protocol.transport.write(msg)

    for n, chunk in enumerate(data_array):
        do_something_cool(chunk)
        if n and (n % 10 == 0):
            from twisted.internet import reactor
            # here send_msg will be safely executed in main reactor loop
            reactor.callFromThread(send_msg, '10 more chunks processed',
                                   protocol)

# Somwhere in lineReceived we start long calculation
def cb(result):
    self.transport.write('got result: {}'.format(result))
d = threads.deferToThread(some_long_foo, data_array, self)
d.addCallback(cb)
</snippet></ROW><ROW><id>7496435</id><snippet>*</snippet></ROW><ROW><id>7496435</id><snippet>*?</snippet></ROW><ROW><id>7496435</id><snippet>re.sub(re.compile('&lt;!--.*?--&gt;', re.DOTALL), '', text)
</snippet></ROW><ROW><id>7496435</id><snippet>re.sub('(?s)&lt;!--.*?--&gt;', '', text)
</snippet></ROW><ROW><id>7496503</id><snippet>hstack</snippet></ROW><ROW><id>7496503</id><snippet>In [18]: test_ex5 = np.hstack((test[:,:5],test[:,6:]))

In [19]: test.shape
Out[19]: (1, 1001)

In [20]: test_ex5.shape
Out[20]: (1, 1000)
</snippet></ROW><ROW><id>7496503</id><snippet>test[0:4 AND 6:]</snippet></ROW><ROW><id>7496526</id><snippet>HG_REV</snippet></ROW><ROW><id>7496526</id><snippet>settings</snippet></ROW><ROW><id>7496526</id><snippet>django.conf.settings</snippet></ROW><ROW><id>7497118</id><snippet>&gt;&gt;&gt; p = re.compile("^[A-Z]+-[0-9]+ \| .+$", re.DOTALL)
&gt;&gt;&gt; print p.search("test message")
None
&gt;&gt;&gt; print p.search("DEV-5 | some message")
&lt;_sre.SRE_Match object at 0x800eb78b8&gt;
</snippet></ROW><ROW><id>7497118</id><snippet>\[</snippet></ROW><ROW><id>7497118</id><snippet>\]</snippet></ROW><ROW><id>7497118</id><snippet>|</snippet></ROW><ROW><id>7497247</id><snippet>class WantFixup(object):
    def new_instance(self, name, derived_name):
        cls = type(self)
        if name is None:
            name = derived_name.replace('_', ' ')
        return cls(name)

class Container(WantFixup):
    def __init__(self, name=None):
        self.name = name
    def __repr__(self):
        return "Container('%s')" % str(self.name)

class WillFixup(object):
    def __init__(self):
        cls = type(self)
        for name in cls.__dict__:
            o = cls.__dict__[name] # look up object from name
            if not isinstance(o, WantFixup):
                continue
            print("calling %s.new_instance('%s', '%s')" % (o, o.name, name))
            self.__dict__[name] = o.new_instance(o.name, name)

class Name(WillFixup):
    first_name = Container("given name")
    last_name = Container()
</snippet></ROW><ROW><id>7497247</id><snippet>&gt;&gt;&gt; import auto_name
&gt;&gt;&gt; n = auto_name.Name()
calling Container('None').new_instance('None', 'last_name')
calling Container('given name').new_instance('given name', 'first_name')
&gt;&gt;&gt; print(n.__dict__)
{'first_name': Container('given name'), 'last_name': Container('last name')}
&gt;&gt;&gt; print(auto_name.Name.__dict__)
{'__module__': 'auto_name', 'last_name': Container('None'), 'first_name': Container('given name'), '__doc__': None}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>7497247</id><snippet>WantFixup</snippet></ROW><ROW><id>7497247</id><snippet>isinstance()</snippet></ROW><ROW><id>7497247</id><snippet>o</snippet></ROW><ROW><id>7497247</id><snippet>isinstance(o, WantFixup)</snippet></ROW><ROW><id>7497247</id><snippet>.new_instance()</snippet></ROW><ROW><id>7497247</id><snippet>Container</snippet></ROW><ROW><id>7497247</id><snippet>WantFixup</snippet></ROW><ROW><id>7497247</id><snippet>WillFixup</snippet></ROW><ROW><id>7497247</id><snippet>.__init__()</snippet></ROW><ROW><id>7497247</id><snippet>.new_instance()</snippet></ROW><ROW><id>7497247</id><snippet>Name</snippet></ROW><ROW><id>7497247</id><snippet>WillFixup</snippet></ROW><ROW><id>7497247</id><snippet>Container</snippet></ROW><ROW><id>7497247</id><snippet>WillFixup</snippet></ROW><ROW><id>7497247</id><snippet>WillFixup.__init__()</snippet></ROW><ROW><id>7497247</id><snippet>first_name</snippet></ROW><ROW><id>7497247</id><snippet>.name</snippet></ROW><ROW><id>7497247</id><snippet>'given name'</snippet></ROW><ROW><id>7497247</id><snippet>last_name</snippet></ROW><ROW><id>7497247</id><snippet>.name</snippet></ROW><ROW><id>7497247</id><snippet>'last name'</snippet></ROW><ROW><id>7497247</id><snippet>.__init__()</snippet></ROW><ROW><id>7497247</id><snippet>WantFixup</snippet></ROW><ROW><id>7497247</id><snippet>.__init__()</snippet></ROW><ROW><id>7497247</id><snippet>first_name</snippet></ROW><ROW><id>7497247</id><snippet>Container</snippet></ROW><ROW><id>7497247</id><snippet>Name</snippet></ROW><ROW><id>7497247</id><snippet>Container</snippet></ROW><ROW><id>7497247</id><snippet>.__init__()</snippet></ROW><ROW><id>7497247</id><snippet>Container</snippet></ROW><ROW><id>7497247</id><snippet>Name</snippet></ROW><ROW><id>7497247</id><snippet>Name</snippet></ROW><ROW><id>7497324</id><snippet>%2.2f</snippet></ROW><ROW><id>7497324</id><snippet>%5.2f</snippet></ROW><ROW><id>7497395</id><snippet>echo '' &gt; messages.po # xgettext needs that file, and we need it empty
find . -type f -iname "*.py" | xgettext -j -f -
msgmerge -N existing.po messages.po &gt; new.po
mv new.po existing.po
rm messages.po
</snippet></ROW><ROW><id>7497587</id><snippet>dtype</snippet></ROW><ROW><id>7497587</id><snippet>x = np.genfromtxt("example.txt", dtype=None)
print(x[0])
</snippet></ROW><ROW><id>7497587</id><snippet>('DATA', 34967565, '2011-08-04', '19:00:00:081', 0.0272448, -0.17718500000000001, 4.2143899999999999, 524.57600000000002, 17.485499999999998, 101.07599999999999, 0.45927400000000002, 0.19031300000000001, 0.100296, 0.97492599999999996, 1.94354, 100.73399999999999, 12.538600000000001, 10.3786, 44318.5, 39605.5, 39234.5, 40298.0, 68)
</snippet></ROW><ROW><id>7497587</id><snippet>dtype</snippet></ROW><ROW><id>7497587</id><snippet>None</snippet></ROW><ROW><id>7497587</id><snippet>dtype</snippet></ROW><ROW><id>7497589</id><snippet>uk_sales = Sale.objects.filter(country_type='1')
uk_amount = uk_sales.aggregate(price = Sum('amount'))['price']
</snippet></ROW><ROW><id>7498100</id><snippet>class CompanyResource(ModelResource):
    """
    CompanyIds should be unique
    """     
    CompanyName = fields.CharField(attribute='company_name')     
    CompanyId = fields.CharField(attribute='company_id', unique=True)     
    Contact = fields.CharField(attribute='contact')     
    Email = fields.CharField(attribute='email')     
    Phone = fields.CharField(attribute='phone')    

    class Meta:        queryset = Company.objects.all()        
    authentication = BasicAuthentication()        
    authorization = Authorization()        
    allowed_methods = ['get', 'post']                
    validation = CustomValidation()
</snippet></ROW><ROW><id>7498100</id><snippet>class CustomValidation(Validation):
    """
    The custom validation checks two things:
       1) that there is data
       2) that the CompanyId exists (unique check)
    """
    def is_valid(self, bundle, request=None):
        if not bundle.data:
            return {'__all__': 'Missing data, please include CompanyName, CompanyId, Contact, Email, and Phone.'}

        errors = {}                                    
        company_id=bundle.data.get('CompanyId', None)

        # manager method, returns true if the company exists, false otherwise
        if Company.objects.company_exists(company_id):
            errors['CompanyId']='Duplicate CompanyId, CompanyId %s already exists.' % company_id
        return errors
</snippet></ROW><ROW><id>7498101</id><snippet>s = simplejson.dumps([p.__dict__ for p in list.itervalues()])
</snippet></ROW><ROW><id>7498196</id><snippet>parse()</snippet></ROW><ROW><id>7498355</id><snippet>itertools.groupby</snippet></ROW><ROW><id>7498355</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; l =  [0,0,1,1,1,0,0,0,1,1,0,0,1,1,1,1]
&gt;&gt;&gt; [(len(list(g)), k) for k,g in itertools.groupby(l)]
[(2, 0), (3, 1), (3, 0), (2, 1), (2, 0), (4, 1)]
</snippet></ROW><ROW><id>7498503</id><snippet>Fatal Python error: GC object already tracked</snippet></ROW><ROW><id>7498503</id><snippet>gobject.threads_init()</snippet></ROW><ROW><id>7498538</id><snippet>x=list(m.groups()) #NOTE: groups and not group
x[2] = '*' if value else ' '
return x
</snippet></ROW><ROW><id>7498538</id><snippet>'^(\[)( |\*)(]) ([a-z][a-z][a-z]) (.*)$'
</snippet></ROW><ROW><id>7498668</id><snippet>purchases[0].vat</snippet></ROW><ROW><id>7498668</id><snippet>VAT</snippet></ROW><ROW><id>7498668</id><snippet>purchases[0].vat.vat</snippet></ROW><ROW><id>7498853</id><snippet>[...]
parent_parser = argparse.ArgumentParser(add_help=False)
parent_parser.add_argument("-p", type=int, required=True,
                           help="set db parameter")
parser_create = subparsers.add_parser("create", parents=[parent_parser],
                                      help="create the orbix environment")
parser_update = subparsers.add_parser("update", parents=[parent_parser],
                                      help="update the orbix environment")
</snippet></ROW><ROW><id>7498905</id><snippet>Books.objects.all().only('title', 'author', 'date').extra(where=['library IS NOT NULL']).distinct()
</snippet></ROW><ROW><id>7499777</id><snippet>gtk.Invisible</snippet></ROW><ROW><id>7499777</id><snippet>gtk.HBox()</snippet></ROW><ROW><id>7499777</id><snippet>self.notebook.append_page(gtk.HBox(), gtk.Label("title"))
</snippet></ROW><ROW><id>7499777</id><snippet>class Tab(gtk.HBox):
    def __init__(self, child):
        self.child = child

self.notebook.append_page(Tab(myWidget), gtk.Label("title"))

def pageSelected(self, notebook, page, pagenum):
    box = notebook.get_nth_page(pagenum)
    box.child.reparent(box)
</snippet></ROW><ROW><id>7500005</id><snippet>&gt;&gt;&gt; re.compile('[0-9]+').split("hel2l3o")
['hel', 'l', 'o']
&gt;&gt;&gt; 

&gt;&gt;&gt; re.compile('cut').split("hellocutworldcutpython")
['hello', 'world', 'python']

split about first cut 

&gt;&gt;&gt; l=re.compile('cut').split("hellocutworldcutpython")
&gt;&gt;&gt; print l[0], string.join([l[i] for i in range(1, len(l))], "")
hello worldpython
</snippet></ROW><ROW><id>7500416</id><snippet>struct::unpack()</snippet></ROW><ROW><id>7500416</id><snippet>MessageQueue::receive()</snippet></ROW><ROW><id>7500855</id><snippet>def myFunction(self, a, b):
    '''

    @param a:
    @type a:
    @param b:
    @type b:
    '''
    return 'Hello, world'
</snippet></ROW><ROW><id>7500915</id><snippet>stat</snippet></ROW><ROW><id>7500915</id><snippet>mode = os.stat(filename).st_mode
os.chmod(filename, mode | stat.S_IXUSR)
</snippet></ROW><ROW><id>7501518</id><snippet>indent/python.vim</snippet></ROW><ROW><id>7501518</id><snippet>diff --git a/python.vim b/python.vim
index 0c04e81..c60c30e 100644
--- a/python.vim
+++ b/python.vim
@@ -142,8 +142,14 @@ function GetPythonIndent(lnum)
       " If not, recommend one dedent
       return indent(plnum) - &amp;sw
     endif
-    " Otherwise, trust the user
-    return -1
+
+       " Is user trying to break out of this function?
+       if plnum &lt; a:lnum - 2
+         return 0
+       else
+         " Otherwise, trust the user
+         return -1
+       endif
   endif

   " If the current line begins with a keyword that lines up with "try"
@@ -186,6 +192,11 @@ function GetPythonIndent(lnum)
     return plindent
   endif

+  " Double linebreaks means we're starting a new function (probably)
+  if plnum &lt; a:lnum - 2
+       return 0
+  endif
+
   return -1

 endfunction
</snippet></ROW><ROW><id>7501549</id><snippet>genfromtxt</snippet></ROW><ROW><id>7501549</id><snippet>import numpy as np
import datetime as dt
def mkdate(text):
    return dt.datetime.strptime(text, '%Y-%m-%dT%H:%M:%S:%f')    
data = np.genfromtxt(
    'example.txt',
    names=('data','num','date')+tuple('col{i}'.format(i=i) for i in range(19)),
    converters={'date':mkdate},
    dtype=None)
</snippet></ROW><ROW><id>7501549</id><snippet>example.txt</snippet></ROW><ROW><id>7501549</id><snippet>import numpy as np
import datetime as dt
import csv

def mkdate(text):
    return dt.datetime.strptime(text, '%Y-%m-%d%H:%M:%S:%f')    

def using_csv(fname):
    desc=([('data', '|S4'), ('num', '&lt;i4'), ('date', '|O4')]+
          [('col{i}'.format(i=i), '&lt;f8') for i in range(19)])
    with open(fname,'r') as f:
        reader=csv.reader(f,delimiter='\t')
        data=np.array([tuple(row[:2]+[mkdate(''.join(row[2:4]))]+row[4:])
                       for row in reader],
                      dtype=desc)
    # print(mc.report_memory())        
    return data
</snippet></ROW><ROW><id>7501549</id><snippet>csv</snippet></ROW><ROW><id>7501549</id><snippet>csv</snippet></ROW><ROW><id>7501549</id><snippet>import matplotlib.cbook as mc
import numpy as np
import datetime as dt

def using_genfromtxt(fname):
    data = np.genfromtxt(fname, dtype=None)

    orig_desc=data.dtype.descr
    view_desc=orig_desc[:2]+[('date','|S22')]+orig_desc[4:]
    new_desc=orig_desc[:2]+[('date','|O4')]+orig_desc[4:]

    newdata = np.empty(data.shape, dtype=new_desc)
    fields=data.dtype.names
    fields=fields[:2]+fields[4:]
    for field in fields:
        newdata[field] = data[field]

    newdata['date']=np.vectorize(mkdate)(data.view(view_desc)['date'])
    # print(mc.report_memory())

    return newdata  

# using_csv('example4096.txt')
# using_genfromtxt('example4096.txt')
</snippet></ROW><ROW><id>7501549</id><snippet>example4096.txt</snippet></ROW><ROW><id>7501549</id><snippet>example.txt</snippet></ROW><ROW><id>7501549</id><snippet>% python -mtimeit -s'import test' 'test.using_genfromtxt("example4096.txt")'
10 loops, best of 3: 1.92 sec per loop

% python -mtimeit -s'import test' 'test.using_csv("example4096.txt")'
10 loops, best of 3: 982 msec per loop
</snippet></ROW><ROW><id>7501659</id><snippet>re.split</snippet></ROW><ROW><id>7501659</id><snippet>re.split()</snippet></ROW><ROW><id>7502264</id><snippet>class A:
    def __init__(self, n=None):
        if n is None:
            n = [0]
        self.data = n
</snippet></ROW><ROW><id>7502325</id><snippet>if (Py_REFCNT(args) &gt; 1) {
    if (!( py_ob_id = PyLong_FromVoidPtr(args)))
        goto finally;

    if (PyDict_GetItem(self-&gt;memo, py_ob_id)) {
        if (get(self, py_ob_id) &lt; 0)
            goto finally;

        res = 0;
        goto finally;
    }
}
</snippet></ROW><ROW><id>7502413</id><snippet>class MCLidarActions( object ):
    li = []

    tcp_send = 'Event'

    def object__updated_changed( self, info ):
        print info;
        pass;

    def _tcp_send_changed( self ):
        print( "Click" )
        for x in self.li:
            x._tcp_send_changed()


class MCUDPActions( MCLidarActions ):
    def __init__(self):
        self.li.append(self)
    def object__updated_changed( self, info ):
        pass;
    def _tcp_send_changed( self ):
        print( "Click UDP" )


class MC_uuuuuuuuuuuuuutp_Actions( MCLidarActions ):
    def __init__(self):
        self.li.append(self)
    def object__updated_changed( self, info ):
        pass;
    def _tcp_send_changed( self ):
        print( "Click _uuuuuuuuuuuuuutp_" )



M = MCLidarActions()
print 'M, instance of MCLidarActions, created ------------'
print '  executing  M._tcp_send_changed():'
M._tcp_send_changed()


a = MCUDPActions()
print '\na, instance of MCUDPActions, created ------------'
print '  executing  M._tcp_send_changed():'
M._tcp_send_changed()
print
print '  executing  a._tcp_send_changed():'
a._tcp_send_changed()


b = MCUDPActions()
print '\nb, instance of MCUDPActions, created ------------'
print '  executing  M._tcp_send_changed():'
M._tcp_send_changed()
print
print '  executing  a._tcp_send_changed():'
a._tcp_send_changed()
print
print '  executing  b._tcp_send_changed():'
b._tcp_send_changed()


v = MC_uuuuuuuuuuuuuutp_Actions()
print '\nv, instance of MC_uuuuuuuuuuuuuutp_Actions, created ------------'
print '  executing  M._tcp_send_changed():'
M._tcp_send_changed()
print
print '  executing  a._tcp_send_changed():'
a._tcp_send_changed()
print
print '  executing  b._tcp_send_changed():'
b._tcp_send_changed()
print
print '  executing  v._tcp_send_changed():'
v._tcp_send_changed()
</snippet></ROW><ROW><id>7502413</id><snippet>M, instance of MCLidarActions, created ------------
  executing  M._tcp_send_changed():
Click

a, instance of MCUDPActions, created ------------
  executing  M._tcp_send_changed():
Click
Click UDP

  executing  a._tcp_send_changed():
Click UDP

b, instance of MCUDPActions, created ------------
  executing  M._tcp_send_changed():
Click
Click UDP
Click UDP

  executing  a._tcp_send_changed():
Click UDP

  executing  b._tcp_send_changed():
Click UDP

v, instance of MC_uuuuuuuuuuuuuutp_Actions, created ------------
  executing  M._tcp_send_changed():
Click
Click UDP
Click UDP
Click _uuuuuuuuuuuuuutp_

  executing  a._tcp_send_changed():
Click UDP

  executing  b._tcp_send_changed():
Click UDP

  executing  v._tcp_send_changed():
Click _uuuuuuuuuuuuuutp_
</snippet></ROW><ROW><id>7502413</id><snippet>class MCLidarActions( object ):
    li = []

    tcp_send = 'Event'

    def __init__(self):
        if self.__class__ != MCLidarActions:
            self.li.append(self)

    def object__updated_changed( self, info ):
        print info;
        pass;

    def _tcp_send_changed( self ):
        print( "Click" )
        for x in self.li:
            x._tcp_send_changed()




class MCUDPActions( MCLidarActions ):
    def object__updated_changed( self, info ):
        pass;
    def _tcp_send_changed( self ):
        print( "Click UDP" )


class MC_uuuuuuuuuuuuuutp_Actions( MCLidarActions ):
    def object__updated_changed( self, info ):
        pass;
    def _tcp_send_changed( self ):
        print( "Click _uuuuuuuuuuuuuutp_" )
</snippet></ROW><ROW><id>7502767</id><snippet>from twisted.python import log
observer = log.PythonLoggingObserver()
observer.start()
log.msg('%s %s \033[0m' % (self.__colors[colortype], msg))
</snippet></ROW><ROW><id>7502814</id><snippet>cacerts.txt</snippet></ROW><ROW><id>7502814</id><snippet>cert_reqs</snippet></ROW><ROW><id>7502814</id><snippet>ssl.CERT_NONE</snippet></ROW><ROW><id>7502814</id><snippet>ssl</snippet></ROW><ROW><id>7503299</id><snippet>class Check_jira</snippet></ROW><ROW><id>7503299</id><snippet>if</snippet></ROW><ROW><id>7503299</id><snippet>CheckForJiraIssueRecord</snippet></ROW><ROW><id>7503299</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>7503299</id><snippet>if</snippet></ROW><ROW><id>7503343</id><snippet>split_long_rows ()</snippet></ROW><ROW><id>7503368</id><snippet>Employees.objects.values_list('eng_name', flat=True)
</snippet></ROW><ROW><id>7503368</id><snippet>eng_name</snippet></ROW><ROW><id>7503368</id><snippet>Employees.objects.values_list('eng_name', 'rank')
</snippet></ROW><ROW><id>7503766</id><snippet>location_map_india = sorted(location_map_india.iteritems(), key=lambda x: x[1]["name"])
</snippet></ROW><ROW><id>7503866</id><snippet>    if subprocess.mswindows:
        su=subprocess.STARTUPINFO()
        su.dwFlags |= subprocess._subprocess.STARTF_USESHOWWINDOW
    process = subprocess.Popen(['program', 'flag', 'flag2'], bufsize=-1,
              stdout=subprocess.PIPE, startupinfo=su)
</snippet></ROW><ROW><id>7504018</id><snippet>import __init__
</snippet></ROW><ROW><id>7504018</id><snippet>import mod
</snippet></ROW><ROW><id>7504123</id><snippet>&gt;&gt;&gt; D = {"Key1": (1,2,3), "Key2": (4,5,6)}
&gt;&gt;&gt; D["Key2"][2]
6
</snippet></ROW><ROW><id>7504244</id><snippet>import beatbox
sf_username = "Username"
sf_password = "password"
sf_api_token = "api token"    

def get_lead_records_by_email(email)
    sf_client = beatbox.PythonClient()
    password = str("%s%s" % (sf_password, sf_api_token))
    sf_client.login(sf_username, password)
    lead_qry = "SELECT id, Email, FirstName, LastName, OwnerId FROM Lead WHERE Email = '%s'" % (email)
    records = sf_client.query(lead_qry)
    return records
</snippet></ROW><ROW><id>7504299</id><snippet> $ python test.py /tmp
 Traceback (most recent call last):
   File "test.py", line 8, in &lt;module&gt;
     print os.path.isdir(opts.Input_Path)
   File "/usr/lib/python2.6/genericpath.py", line 41, in isdir
     st = os.stat(s)
 TypeError: coercing to Unicode: need string or buffer, NoneType found
</snippet></ROW><ROW><id>7504299</id><snippet>$ python test.py --path /tmp
True
</snippet></ROW><ROW><id>7504698</id><snippet>mainloop</snippet></ROW><ROW><id>7504698</id><snippet>after</snippet></ROW><ROW><id>7504698</id><snippet>import Tkinter as tk
import time

class SampleApp(tk.Tk):
    def __init__(self, *args, **kwargs):

        # initialize Tkinter
        tk.Tk.__init__(self, *args, **kwargs)

        # hide main window
        self.wm_withdraw()

        # show "please wait..." window
        self.wait = tk.Toplevel(self)
        label = tk.Label(self.wait, text="Please wait...")
        label.pack()

        # schedule the rest of the initialization to happen
        # after the event loop has started
        self.after(100, self.init_phase_2)

    def init_phase_2(self):

        # simulate doing something...
        time.sleep(10)

        # we're done. Close the wait window, show the main window
        self.wait.destroy()
        self.wm_deiconify()

app = SampleApp()
app.mainloop()
</snippet></ROW><ROW><id>7505055</id><snippet>32     sys.stdout = os.devnull
33     sys.stderr = os.devnull
</snippet></ROW><ROW><id>7505055</id><snippet>32     sys.stdout = open(os.devnull)
33     sys.stderr = open(os.devnull)
</snippet></ROW><ROW><id>7505620</id><snippet>instance variables</snippet></ROW><ROW><id>7505620</id><snippet>self</snippet></ROW><ROW><id>7505620</id><snippet>self</snippet></ROW><ROW><id>7505620</id><snippet>class SolutionsAppendList:
    def __init__(self):
        self.list = []

    def appendList(self, list):
    #print list
        self.list.append(list)
</snippet></ROW><ROW><id>7505620</id><snippet>list2</snippet></ROW><ROW><id>7505620</id><snippet>self.list</snippet></ROW><ROW><id>7505620</id><snippet>list</snippet></ROW><ROW><id>7505620</id><snippet>appendList()</snippet></ROW><ROW><id>7505620</id><snippet>__init__</snippet></ROW><ROW><id>7505620</id><snippet>SolutionsAppendList</snippet></ROW><ROW><id>7505620</id><snippet>self.*</snippet></ROW><ROW><id>7505874</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; data = ['TC', 'CY', 'GS', 'GA', 'CT']
&gt;&gt;&gt; [x for x in data if re.match(r'^[ACGT]+$', x)]
['TC', 'GA', 'CT']
</snippet></ROW><ROW><id>7505906</id><snippet>self.sendLine(str(SomeVarWhichIsANumber))
</snippet></ROW><ROW><id>7505957</id><snippet>Exception</snippet></ROW><ROW><id>7505957</id><snippet>ValueError</snippet></ROW><ROW><id>7505957</id><snippet>except ValueError:</snippet></ROW><ROW><id>7505957</id><snippet>ValueError</snippet></ROW><ROW><id>7505957</id><snippet>except Exception:</snippet></ROW><ROW><id>7506168</id><snippet>firstName</snippet></ROW><ROW><id>7506168</id><snippet>lastName</snippet></ROW><ROW><id>7506168</id><snippet>class Book(Base):
    __tablename__ = 'books'
    title = Column(String(20), primary_key=True)
    author_firstName = Column(String(20))
    author_lastName = Column(String(20))
    __table_args__ = (ForeignKeyConstraint([author_firstName, author_lastName],
                                           [Author.firstName, Author.lastName]),
                      {})
</snippet></ROW><ROW><id>7506168</id><snippet>ForeignKey</snippet></ROW><ROW><id>7506168</id><snippet>ForeignKeyConstraint</snippet></ROW><ROW><id>7506168</id><snippet>__table_args__</snippet></ROW><ROW><id>7506168</id><snippet>relationship</snippet></ROW><ROW><id>7506168</id><snippet>Author.books</snippet></ROW><ROW><id>7506348</id><snippet>solutions = set([])
</snippet></ROW><ROW><id>7506348</id><snippet>solutions.append(solution)
</snippet></ROW><ROW><id>7506348</id><snippet>&gt;&gt;&gt; len(set([1, 1, 1, 1, 1, 1, 1]))
1
</snippet></ROW><ROW><id>7506348</id><snippet>while len(solved) &lt; 2:
    try1('123456789')
</snippet></ROW><ROW><id>7506348</id><snippet>hotpotato = ('%s'.join(param) % (random.choice(opers),
                                 random.choice(opers),
                                 random.choice(opers),
                                 random.choice(opers),
                                 random.choice(opers),
                                 random.choice(opers),
                                 random.choice(opers),
                                 random.choice(opers),
                                 )
         )
</snippet></ROW><ROW><id>7506348</id><snippet>hotpotato = ('%s'.join(param) % (random.choice(opers) for i in range(8))))
</snippet></ROW><ROW><id>7506655</id><snippet>&gt;&gt;&gt; re.match('(ABC|EFH)(PQR|STU)', 'ABCPQR01 is not at all good').groups()
('ABC', 'PQR')
</snippet></ROW><ROW><id>7506806</id><snippet>Options</snippet></ROW><ROW><id>7506806</id><snippet>.user</snippet></ROW><ROW><id>7506806</id><snippet>.password</snippet></ROW><ROW><id>7506806</id><snippet>from collections import namedtuple
def CheckForJiraIssueRecord(object):
    options = namedtuple('Options', 'user password')('user', 'password')
    # 'user password' are the field names, and ('user', 'password') are the
    # initialization values. This code creates a type similar to what you had
    # before, naming it 'Options' internally, but doesn't bind it to a variable.

    # As you were...
</snippet></ROW><ROW><id>7507308</id><snippet>extend()</snippet></ROW><ROW><id>7507308</id><snippet>None</snippet></ROW><ROW><id>7507308</id><snippet>[4, 5, 6]</snippet></ROW><ROW><id>7507308</id><snippet>b</snippet></ROW><ROW><id>7507308</id><snippet>None</snippet></ROW><ROW><id>7507599</id><snippet>foo = _("I would like to have %d pounds of cheese") % amount
</snippet></ROW><ROW><id>7507630</id><snippet>re.search(r'#(\d+)', 'This is a generated number #123 which is an integer.').group(1)
</snippet></ROW><ROW><id>7507630</id><snippet>r'some text you know (\d+) other text you also know'
</snippet></ROW><ROW><id>7507801</id><snippet>manage.py</snippet></ROW><ROW><id>7507801</id><snippet>/path/to/dev_appserver.py --clear_datastore .</snippet></ROW><ROW><id>7507842</id><snippet>{
    'version': 1,              
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
        },
    },
    'handlers': {
        'default': {
            'level':'INFO',    
            'class':'logging.StreamHandler',
        },  
    },
    'loggers': {
        '': {                  
            'handlers': ['default'],        
            'level': 'INFO',  
            'propagate': True  
        },
        'django.request': { 
            'handlers': ['default'],
            'level': 'WARN',  
            'propagate': False 
        },
    }
}
</snippet></ROW><ROW><id>7507932</id><snippet>sort</snippet></ROW><ROW><id>7507932</id><snippet>int</snippet></ROW><ROW><id>7507932</id><snippet>import re
def extract(s):
    r = re.compile(r'\.(\d+)\.log\.((\d*)\.)?gz')
    m = r.search(s)
    file = int(m.group(1))
    if not m.group(2):
        return (file, -1)
    index = int(m.group(3))
    return (file, index)

def comparator(s1, s2): return cmp(extract(s1), extract(s2))
</snippet></ROW><ROW><id>7507932</id><snippet>cmp</snippet></ROW><ROW><id>7508162</id><snippet>last_date</snippet></ROW><ROW><id>7508162</id><snippet>last_date</snippet></ROW><ROW><id>7508162</id><snippet>if 'last_date' not in context.dicts[0] or context.dicts[0]['last_date'] != date:
    context.dicts[0]['last_date'] = date
</snippet></ROW><ROW><id>7508461</id><snippet>  return Total_Playoff_Probability(WP_1, k+1, WP_2)
</snippet></ROW><ROW><id>7508461</id><snippet>  return PlayoffProb2(WP_1, k+1, WP_2)
</snippet></ROW><ROW><id>7508461</id><snippet>   return Total_Playoff_Probability + PlayoffProb2(WP_1, k+1, WP_2)
</snippet></ROW><ROW><id>7508529</id><snippet>/Applications</snippet></ROW><ROW><id>7508529</id><snippet>install_name_tool</snippet></ROW><ROW><id>7508529</id><snippet>$ which install_name_tool
/usr/bin/install_name_tool
</snippet></ROW><ROW><id>7508589</id><snippet>xrange</snippet></ROW><ROW><id>7508589</id><snippet>range</snippet></ROW><ROW><id>7508589</id><snippet>six</snippet></ROW><ROW><id>7508703</id><snippet>&gt;&gt;&gt; A = NP.random.randint(0, 10, 40).reshape(8, 5)
&gt;&gt;&gt; A
  array([[ 0, 36,  1,  9,  8],
         [ 5, 10,  6,  9,  3],
         [ 1, 26,  4,  9,  8],
         [ 5, 46,  0,  7,  0],
         [ 6, 41,  5,  3,  5],
         [ 9, 20,  2,  3,  4],
         [ 0, 41,  9,  6,  9],
         [ 2,  5,  9,  0,  0]])

&gt;&gt;&gt; # NumPy (&amp; Python) are '0'-based so the index '1' is for the second column
&gt;&gt;&gt; # commas separate the dimensions--here rows, columns
&gt;&gt;&gt; c2 = A[:,1]
&gt;&gt;&gt; c2
  array([36, 10, 26, 46, 41, 20, 41,  5])

&gt;&gt;&gt; # if you want to do this and keep the array intact (rather than extract column 2):
&gt;&gt;&gt; A[:,1] *= 5.2
&gt;&gt;&gt; A
  array([[  0, 187,   1,   9,   8],
         [  5,  52,   6,   9,   3],
         [  1, 135,   4,   9,   8],
         [  5, 239,   0,   7,   0],
         [  6, 213,   5,   3,   5],
         [  9, 104,   2,   3,   4],
         [  0, 213,   9,   6,   9],
         [  2,  26,   9,   0,   0]])

&gt;&gt;&gt; # now calculate the cumulative sum:
&gt;&gt;&gt; NP.cumsum(c2)
  array([ 36,  46,  72, 118, 159, 179, 220, 225])

&gt;&gt;&gt; # if by 'cumulative sum' you meant the 'reduced' sum, then:
&gt;&gt;&gt; NP.sum(c2)
  225
</snippet></ROW><ROW><id>7508735</id><snippet>my_args = [my_args]
</snippet></ROW><ROW><id>7508795</id><snippet>fixedString = re.sub("&gt;\s*(\!--|\!DOCTYPE|\
                           a|abbr|acronym|address|applet|area|\
                           b|base|basefont|bdo|big|blockquote|body|br|button|\
                           caption|center|cite|code|col|colgroup|\
                           dd|del|dfn|dir|div|dl|dt|\
                           em|\
                           fieldset|font|form|frame|frameset|\
                           head|h1|h2|h3|h4|h5|h6|hr|html|\
                           i|iframe|img|input|ins|\
                           kbd|\
                           label|legend|li|link|\
                           map|menu|meta|\
                           noframes|noscript|\
                           object|ol|optgroup|option|\
                           p|param|pre|\
                           q|\
                           s|samp|script|select|small|span|strike|strong|style|sub|sup|\
                           table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|\
                           u|ul|\
                           var)&gt;", "&gt;&lt;\g&lt;1&gt;&gt;", s)
bs = BeautifulSoup(fixedString)
</snippet></ROW><ROW><id>7508795</id><snippet>&gt;&gt;&gt; print s

&lt;tr&gt;
td&gt;LABEL1&lt;/td&gt;&lt;td&gt;INPUT1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LABEL2&lt;/td&gt;&lt;td&gt;INPUT2&lt;/td&gt;
&lt;/tr&gt;

&gt;&gt;&gt; print re.sub("&gt;\s*(\!--|\!DOCTYPE|\
                       a|abbr|acronym|address|applet|area|\
                       b|base|basefont|bdo|big|blockquote|body|br|button|\
                       caption|center|cite|code|col|colgroup|\
                       dd|del|dfn|dir|div|dl|dt|\
                       em|\
                       fieldset|font|form|frame|frameset|\
                       head|h1|h2|h3|h4|h5|h6|hr|html|\
                       i|iframe|img|input|ins|\
                       kbd|\
                       label|legend|li|link|\
                       map|menu|meta|\
                       noframes|noscript|\
                       object|ol|optgroup|option|\
                       p|param|pre|\
                       q|\
                       s|samp|script|select|small|span|strike|strong|style|sub|sup|\
                       table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|\
                       u|ul|\
                       var)&gt;", "&gt;&lt;\g&lt;1&gt;&gt;", s)

&lt;tr&gt;&lt;td&gt;LABEL1&lt;/td&gt;&lt;td&gt;INPUT1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LABEL2&lt;/td&gt;&lt;td&gt;INPUT2&lt;/td&gt;
&lt;/tr&gt;
</snippet></ROW><ROW><id>7508795</id><snippet>&lt;/endtag&gt;</snippet></ROW><ROW><id>7508795</id><snippet>re.sub("&gt;\s*(/?)(\!--|\!DOCTYPE|\a|abbr|acronym|address|applet|area|\
                 b|base|basefont|bdo|big|blockquote|body|br|button|\
                 caption|center|cite|code|col|colgroup|\
                 dd|del|dfn|dir|div|dl|dt|\
                 em|\
                 fieldset|font|form|frame|frameset|\
                 head|h1|h2|h3|h4|h5|h6|hr|html|\
                 i|iframe|img|input|ins|\
                 kbd|\
                 label|legend|li|link|\
                 map|menu|meta|\
                 noframes|noscript|\
                 object|ol|optgroup|option|\
                 p|param|pre|\
                 q|\
                 s|samp|script|select|small|span|strike|strong|style|sub|sup|\
                 table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|\
                 u|ul|\
                 var)&gt;", "&gt;&lt;\g&lt;1&gt;\g&lt;2&gt;&gt;", s)
</snippet></ROW><ROW><id>7508826</id><snippet>_main</snippet></ROW><ROW><id>7508826</id><snippet>import pyximport
pyximport.install()
</snippet></ROW><ROW><id>7508826</id><snippet>pyximport</snippet></ROW><ROW><id>7508833</id><snippet>&gt;&gt;&gt; pprint.pprint([[1,2],[3,4]], width=10)
[[1, 2],
 [3, 4]]
</snippet></ROW><ROW><id>7508999</id><snippet>import pprint
stuff = ['spam', 'eggs', 'lumberjack', 'knights', 'ni']
pp = pprint.PrettyPrinter(width=80)
pp.pprint(stuff)
</snippet></ROW><ROW><id>7508999</id><snippet>['spam', 'eggs', 'lumberjack', 'knights', 'ni']
</snippet></ROW><ROW><id>7508999</id><snippet>import pprint
stuff = ['spam', 'eggs', 'lumberjack', 'knights', 'ni']
pp = pprint.PrettyPrinter(width=10)
pp.pprint(stuff)
</snippet></ROW><ROW><id>7508999</id><snippet>['spam',
 'eggs',
 'lumberjack',
 'knights',
 'ni']
</snippet></ROW><ROW><id>7509233</id><snippet>while i &lt; 5:
   do stuff
   if i == 3:
      print "i is 3"
      continue
</snippet></ROW><ROW><id>7509464</id><snippet># command
class DrawCommand:
    def __init__(self, draw, point1, point2):
        self.draw = draw
        self.point1 = point1
        self.point2 = point2
    def execute_drawing(self):
        self.draw.execute(self.point1, self.point2)
# invoker
class InvokeDrawLines:
    def __init__(self, data):
        self.commandlist = data
    def addcommand(self, command):
        self.commandlist.append(command)
    def draw(self):
        for cmd in self.commandlist:
            cmd.execute_drawing()
    def undocommand(self, command):
        self.commandlist.remove(command)

# receiver
class DrawALine:
    def execute(self, point1, point2):
        print("Draw a line from" , point1, point2)
</snippet></ROW><ROW><id>7509744</id><snippet>objectList = [['John Smith'], ['Jim Jones'], ['Bill White']]
</snippet></ROW><ROW><id>7510056</id><snippet>if var and len(var) == 5:
    ....
</snippet></ROW><ROW><id>7510056</id><snippet>and</snippet></ROW><ROW><id>7510056</id><snippet>&gt;&gt;&gt; False and 1/0
False
&gt;&gt;&gt; True and 1/0
ZeroDivisionError: division by zero
</snippet></ROW><ROW><id>7510113</id><snippet>def __get__(self, obj, objtype):
    """Support instance methods."""
    f = functools.partial(self.__call__, obj)
    f._wrapped = self.func
    return f
</snippet></ROW><ROW><id>7510113</id><snippet>def __get__(self, obj, objtype):
    """Support instance methods."""
    if obj is None:
        return self.func
    else:
        return functools.partial(self.__call__, obj) 
</snippet></ROW><ROW><id>7510113</id><snippet>func</snippet></ROW><ROW><id>7510113</id><snippet>__call__</snippet></ROW><ROW><id>7510113</id><snippet>memoized.__call__</snippet></ROW><ROW><id>7510206</id><snippet>site</snippet></ROW><ROW><id>7510206</id><snippet>syncdb</snippet></ROW><ROW><id>7510206</id><snippet>example.com</snippet></ROW><ROW><id>7510206</id><snippet>example.com</snippet></ROW><ROW><id>7510495</id><snippet>python setup.py build_ext --inplace</snippet></ROW><ROW><id>7510495</id><snippet>python setup.py develop</snippet></ROW><ROW><id>7510495</id><snippet>python setup.py install</snippet></ROW><ROW><id>7510495</id><snippet>#foo.pyxbld
def make_ext(modname, pyxfilename):
    from distutils.extension import Extension
    return Extension(name = modname,
                     sources=[pyxfilename, 'bar.c'],
                     include_dirs=['/myinclude'] )
def make_setup_args():
    return dict(script_args=["--compiler=mingw32"])
</snippet></ROW><ROW><id>7510495</id><snippet>import pyximport
pyximport.install()
import foo
</snippet></ROW><ROW><id>7510495</id><snippet>.pyxbld</snippet></ROW><ROW><id>7510741</id><snippet>Python 2.7.2 (default, Jun 12 2011, 15:08:59) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; for p,d,f in os.walk(u'.'):
...  for n in f:
...   print n
...
SSE-Künden, SSE-Händler.pdf
</snippet></ROW><ROW><id>7510741</id><snippet>os.walk</snippet></ROW><ROW><id>7510741</id><snippet>Python 3.2.1 (default, Jul 10 2011, 21:51:15) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; for p,d,f in os.walk('.'):
...  print(f)
...
['SSE-Künden, SSE-Händler.pdf']
</snippet></ROW><ROW><id>7511129</id><snippet>subprocess</snippet></ROW><ROW><id>7511129</id><snippet>import subprocess

proc = subprocess.Popen("cat", stdin = subprocess.PIPE, stdout = subprocess.PIPE)

out, err = proc.communicate(input)
</snippet></ROW><ROW><id>7511129</id><snippet>proc.stdin.write</snippet></ROW><ROW><id>7511129</id><snippet>communicate(None)</snippet></ROW><ROW><id>7511293</id><snippet>with open('/etc/hosts', 'rt') as f:
    s = f.read() + '\n' + '127.0.0.1\t\t\thome_sweet_home\n'
    with open('/tmp/etc_hosts.tmp', 'wt') as outf:
        outf.write(s)

os.system('sudo mv /tmp/etc_hosts.tmp /etc/hosts')
</snippet></ROW><ROW><id>7511344</id><snippet>gdb.execute("&lt;command&gt;", to_string=&lt;boolean&gt;)</snippet></ROW><ROW><id>7511344</id><snippet>to_string</snippet></ROW><ROW><id>7511344</id><snippet>True</snippet></ROW><ROW><id>7511344</id><snippet>maint print target-stack</snippet></ROW><ROW><id>7511344</id><snippet>core (Local core dump file)</snippet></ROW><ROW><id>7511344</id><snippet>out = gdb.execute("maint print target-stack", to_string=True)
print "Local core dump file" in out
</snippet></ROW><ROW><id>7511426</id><snippet>def extract_field(form_data, clean, fieldname, optional=('info', 'instruction')):
   if fieldname+'field' in form_data:
       infofield = { 'field': fieldname }
       for opt in optional:
           optname = '{}field_{}'.format(fieldname, opt)
           if optname in form_data:
              infofield[opt] = form_data[optname]
       clean.append(infofield)

extract_field(form_data, cleaned_data['infofields'], 'email')
extract_field(form_data, cleaned_data['infofields'], 'address')
extract_field(form_data, cleaned_data['infofields'], 'phone')
</snippet></ROW><ROW><id>7511608</id><snippet>def neighbors(code, N=3):
  num = int(code, 2)
  return [num ^ (1 &lt;&lt; (N-i-1)) for i in range(N)]
</snippet></ROW><ROW><id>7511608</id><snippet>0,3,6</snippet></ROW><ROW><id>7511608</id><snippet>6,0,3</snippet></ROW><ROW><id>7511608</id><snippet>def neighbors_sorted(code, N=3):
  num = int(code, 2)
  return sorted(num ^ (1 &lt;&lt; i) for i in range(N))
</snippet></ROW><ROW><id>7511922</id><snippet>result_dict = {}
items = str1.split(';')
for item in items:
    key, value = item.strip().split('=')
    result_dict[key] = value
</snippet></ROW><ROW><id>7512396</id><snippet>note_nodes=re.split(r'\{(.*?)\}',details['text'])
# ['', 'Code', ' - ', 'Text', '']
note_nodes=[n if i%2==0 else XSL('value-of',select=n) 
            for i,n in enumerate(note_nodes)]
</snippet></ROW><ROW><id>7512489</id><snippet>paste</snippet></ROW><ROW><id>7512489</id><snippet>from PIL import Image
img = Image.open(basefile)
layer = Image.open(layerfile) # this file is the transparent one
print layer.mode # RGBA
img.paste(layer, (xoff, yoff), mask=layer) 
# the transparancy layer will be used as the mask
img.save(outfile)
</snippet></ROW><ROW><id>7512565</id><snippet>import json

data = json.dumps(BIG_STRUCTURE_GOES_HERE)
query = """UPDATE table SET json = %s WHERE id = %s RETURNING id"""
cursor_postgres.execute(query, (data, rowId))
conn_postgres.commit()
</snippet></ROW><ROW><id>7512578</id><snippet>&gt;&gt;&gt;x = 'ACD VU LSF VMSUGH VIJ SVD HJV DVO'
&gt;&gt;&gt;result = re.split('V[A-Z](?&lt;!SVD)', x)
['ACD ', ' LSF ', 'SUGH ', 'J SVD HJV D', '']
</snippet></ROW><ROW><id>7513052</id><snippet>print</snippet></ROW><ROW><id>7513052</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; string = '{"uid":"1111111","method":"check_user"}\x00'
&gt;&gt;&gt; print string
{"uid":"1111111","method":"check_user"}
&gt;&gt;&gt; print repr(string)
'{"uid":"1111111","method":"check_user"}\x00'
&gt;&gt;&gt; json.loads(string)
Traceback (most recent call last):
  File "&lt;interactive input&gt;", line 1, in &lt;module&gt;
  File "C:\Python27\Lib\json\__init__.py", line 326, in loads
    return _default_decoder.decode(s)
  File "C:\Python27\Lib\json\decoder.py", line 369, in decode
    raise ValueError(errmsg("Extra data", s, end, len(s)))
ValueError: Extra data: line 1 column 39 - line 1 column 40 (char 39 - 40)
</snippet></ROW><ROW><id>7513052</id><snippet>repr</snippet></ROW><ROW><id>7513199</id><snippet>os.system</snippet></ROW><ROW><id>7513199</id><snippet>os.popen</snippet></ROW><ROW><id>7513199</id><snippet>subprocess</snippet></ROW><ROW><id>7513199</id><snippet>os.system(r'C:\cygwin\bin\bash --login -c "some bash commands"')
</snippet></ROW><ROW><id>7513401</id><snippet>hsv</snippet></ROW><ROW><id>7513401</id><snippet>hsv(float(i)/(len(data)-1))
</snippet></ROW><ROW><id>7513401</id><snippet>import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
import datetime as dt
import scipy.interpolate as interpolate

dates = [dt.date(year, 9, 1) for year in range(2003, 2009)]
t = map(md.date2num, dates)
jec = (100, 70, 125, 150, 300, 250)
plt.plot(dates, jec, 'k.', markersize = 20)
new_t = np.linspace(min(t), max(t), 80)
new_dates = map(md.num2date, new_t)
kinds = ('cubic', 'quadratic', 'slinear', 'nearest', 'linear', 'zero', 4, 5)
colors = plt.get_cmap('jet')(np.linspace(0, 1.0, len(kinds)))
for kind, color in zip(kinds, colors):
    new_jec = interpolate.interp1d(t, jec, kind=kind)(new_t)
    plt.plot(new_t, new_jec, '-', label=str(kind), color=color)
plt.legend(loc = 'best')
plt.show()
</snippet></ROW><ROW><id>7514390</id><snippet>c = re.compile("(?P&lt;%s&gt;%s)" % (fname,f.__doc__), re.VERBOSE | self.reflags)
</snippet></ROW><ROW><id>7514694</id><snippet>CREATE OR REPLACE FUNCTION myfunction (input int, OUT result int) AS $$

result = mymodule.object(input,plpy)
plpy.info(" ========= EXTRA-module result: ===",result)
# This was the key bit:
return result

$$ LANGUAGE plpythonu;
</snippet></ROW><ROW><id>7514983</id><snippet>print('\a')
</snippet></ROW><ROW><id>7514983</id><snippet>echo $'\a'
</snippet></ROW><ROW><id>7515065</id><snippet>en</snippet></ROW><ROW><id>7515065</id><snippet>en_us</snippet></ROW><ROW><id>7515065</id><snippet>en_US</snippet></ROW><ROW><id>7515065</id><snippet>locale = the_string[-6:]
if not locale.startswith('_en_'):
    locale = locale[3:]
locale = locale[1:]
</snippet></ROW><ROW><id>7515065</id><snippet>locale = the_string[-3:]
for code in '_en', '_en_us', '_en_US':
    if code.endswith(locale):
        break
else:
    # no locale found
</snippet></ROW><ROW><id>7515065</id><snippet>re.compile(r'_(?P&lt;base_code&gt;[a-z]{2})(_(?P&lt;ext_code&gt;[a-zA-z]{2}))?$')
</snippet></ROW><ROW><id>7515065</id><snippet>?</snippet></ROW><ROW><id>7515065</id><snippet>{0,1}</snippet></ROW><ROW><id>7515065</id><snippet>{2]</snippet></ROW><ROW><id>7515065</id><snippet>{2,5}</snippet></ROW><ROW><id>7515080</id><snippet>eu_amount = (eu_sales.aggregate(price = Sum('amount'))['price']) or 0  * vat/100
</snippet></ROW><ROW><id>7515129</id><snippet>Foo</snippet></ROW><ROW><id>7515129</id><snippet>@Decorator
class Foo:
    pass
</snippet></ROW><ROW><id>7515129</id><snippet>class Foo:
    pass
Foo = Decorator(Foo)
</snippet></ROW><ROW><id>7515129</id><snippet>Foo</snippet></ROW><ROW><id>7515129</id><snippet>Decorator</snippet></ROW><ROW><id>7515129</id><snippet>Foo</snippet></ROW><ROW><id>7515129</id><snippet>isinstance</snippet></ROW><ROW><id>7515224</id><snippet>FileField</snippet></ROW><ROW><id>7515224</id><snippet>FieldFile</snippet></ROW><ROW><id>7515224</id><snippet>self.license_file.save(new_name, new_contents)
</snippet></ROW><ROW><id>7515224</id><snippet>new_name</snippet></ROW><ROW><id>7515224</id><snippet>new_contents</snippet></ROW><ROW><id>7515224</id><snippet>new_contents</snippet></ROW><ROW><id>7515224</id><snippet>django.core.files.File</snippet></ROW><ROW><id>7515224</id><snippet>django.core.files.base.ContentFile</snippet></ROW><ROW><id>7515224</id><snippet># Using File
f = open('/path/to/file')
self.license_file.save(new_name, File(f))
# Using ContentFile
self.license_file.save(new_name, ContentFile('A string with the file content'))
</snippet></ROW><ROW><id>7515414</id><snippet>import decimal
D=decimal.Decimal

x=D('32.50')*D('0.19')
print(x)
# 6.1750
print(x.quantize(D('0.01'),rounding=decimal.ROUND_UP))
# 6.18

y=D('32.50')*D('0.19')*D('3')
print(y)
# 18.5250
print(y.quantize(D('0.01'),rounding=decimal.ROUND_UP))
# 18.53
</snippet></ROW><ROW><id>7515574</id><snippet>eval</snippet></ROW><ROW><id>7515574</id><snippet>globals</snippet></ROW><ROW><id>7515574</id><snippet>locals</snippet></ROW><ROW><id>7515574</id><snippet>namespace = dict(foo=5, bar=6)
print eval('foo*bar', namespace)
</snippet></ROW><ROW><id>7515574</id><snippet>eval</snippet></ROW><ROW><id>7515574</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>7515976</id><snippet>import</snippet></ROW><ROW><id>7515976</id><snippet>color_switcher</snippet></ROW><ROW><id>7515976</id><snippet>if event.type == pygame.MOUSEBUTTONDOWN:
     menus.Menu().color_switcher(counter, screen)
</snippet></ROW><ROW><id>7515976</id><snippet>class Menu:
    @staticmethod
    def color_switcher(counter, screen):
</snippet></ROW><ROW><id>7515976</id><snippet>menus.Menu.color_switcher(counter, screen)</snippet></ROW><ROW><id>7516007</id><snippet>tuple</snippet></ROW><ROW><id>7516007</id><snippet>&gt;&gt;&gt; np.array([('ABC', (1, 2, 3)), ('CBA', (3, 2, 1))], dtype='3a, 3i')
array([('ABC', [1, 2, 3]), ('CBA', [3, 2, 1])], 
      dtype=[('f0', '|S3'), ('f1', '&lt;i4', 3)])
</snippet></ROW><ROW><id>7516007</id><snippet>&gt;&gt;&gt; np.array([('ABC', ((1, 2, 3), (1, 2, 3))), ('CBA', ((3, 2, 1), (3, 2, 1)))],
             dtype='a3, (2, 3)i')
array([('ABC', [[1, 2, 3], [1, 2, 3]]), ('CBA', [[3, 2, 1], [3, 2, 1]])], 
      dtype=[('f0', '|S3'), ('f1', '&lt;i4', (2, 3))])
</snippet></ROW><ROW><id>7516007</id><snippet>&gt;&gt;&gt; desc = {'names':('name','Color'),'formats':('a3','3f')}
&gt;&gt;&gt; colorlist = np.array([('ABC', (1, 2, 3)), ('CBA', (3, 2, 1))], desc)
&gt;&gt;&gt; colorlist[colorlist['name']=='ABC']['Color'][0]
array([ 1.,  2.,  3.], dtype=float32)
</snippet></ROW><ROW><id>7516007</id><snippet>rec.fromarrays</snippet></ROW><ROW><id>7516007</id><snippet>&gt;&gt;&gt; desc = {'names':('name','Color'),'formats':('a3','3f')}
&gt;&gt;&gt; np.rec.fromarrays([['ABC', 'CBA'], [(1, 2, 3), (3, 2, 1)]], desc)[0][1]
array([ 1.,  2.,  3.], dtype=float32)
</snippet></ROW><ROW><id>7516007</id><snippet>color_query = cursor.execute("SELECT R, G, B FROM Colors").fetchall()
name_query = cursor.execute("SELECT name FROM Colors").fetchall()
desc = {'names':('name','Color'),'formats':('a3','3f')}
colorlist = np.rec.fromarrays([color_query, name_query], desc)
</snippet></ROW><ROW><id>7516007</id><snippet>colorlist = np.rec.fromarrays([[row[0]  for row in query], 
                               [row[1:] for row in query]], desc)
</snippet></ROW><ROW><id>7516195</id><snippet>.all()</snippet></ROW><ROW><id>7516195</id><snippet>.query()</snippet></ROW><ROW><id>7516195</id><snippet>for submission in submissions:
    print submission.id, submission.title
</snippet></ROW><ROW><id>7516195</id><snippet>submission.link</snippet></ROW><ROW><id>7516195</id><snippet>.link</snippet></ROW><ROW><id>7516195</id><snippet>for submission in submissions:
    print submission.link.link
</snippet></ROW><ROW><id>7516195</id><snippet>${thing.link.link}</snippet></ROW><ROW><id>7516454</id><snippet>doc = """&lt;xml&gt;
    &lt;mapshape title="Bar" extras=""&gt;
    &lt;kml&gt;&lt;/kml&gt;
    &lt;/mapshape&gt;

    &lt;mapshape title="Foo" extras=""&gt;
    &lt;kml&gt;&lt;/kml&gt;
    &lt;/mapshape&gt;
&lt;/xml&gt;"""

import lxml.etree as etree

xml = etree.fromstring(doc)
for mapshape in xml:
    kml = etree.tostring(mapshape.getchildren()[0])
    parseKML(kml)
</snippet></ROW><ROW><id>7516564</id><snippet>import _winreg
import wmi
c = wmi.WMI(computer="10.31.247.8", user="devuser", password="devpass1!",namespace="root/default").StdRegProv

result, imagePath = c.GetStringValue (
hDefKey=_winreg.HKEY_LOCAL_MACHINE,
sSubKeyName="SYSTEM\ControlSet001\Services\MRxDAV",
sValueName="ImagePath"
)
print imagePath
</snippet></ROW><ROW><id>7516618</id><snippet>for line in lines:
    for punc in ",!":

        # note that we're assigning to line again
        # because we're executing this once for
        # each character
        line=line.replace(punc,"")

    # write the transformed line back to the file once ALL characters are replaced
    #
    # note that line still contains the newline character at the end

    # python 3
    # print(line,end="")

    # python 2.x
    print &gt;&gt; filename, line,

    # python 2.x alternative
    # filename.write(line)
</snippet></ROW><ROW><id>7516618</id><snippet>filename</snippet></ROW><ROW><id>7517002</id><snippet>Queue</snippet></ROW><ROW><id>7517225</id><snippet>for i in p.stdout.readline():
</snippet></ROW><ROW><id>7517225</id><snippet>for i in p.stdout.readlines():
</snippet></ROW><ROW><id>7517225</id><snippet>for line in p.stdout:
</snippet></ROW><ROW><id>7517373</id><snippet>/home/shared/commons.py
/home/tim/projects/foo.py
</snippet></ROW><ROW><id>7517373</id><snippet>def say_hello():
    return "Hello World!"
</snippet></ROW><ROW><id>7517373</id><snippet>import sys
sys.path.append("/home/shared/")

import commons
print commons.say_hello()
</snippet></ROW><ROW><id>7517397</id><snippet>re.DOTALL</snippet></ROW><ROW><id>7517397</id><snippet>.</snippet></ROW><ROW><id>7517397</id><snippet>import re

data = '''
# Process_Name     ( 23387) Report at 2011-09-21 15:45:00.001    Type:  Periodic    #\n
some line 1\n
some line 2\n
some other lines\n
succ. statistics |     1438     1439  99 |   3782245    3797376  99 |\n
some lines\n
repeat the pattern several hundred times...
'''

pattern = r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}).*?succ. statistics\s+\|\s+(\d+)\s+(\d+)'
regex = re.compile(pattern, flags=re.MULTILINE|re.DOTALL)

for match in regex.finditer(data):
    results = match.groups()
    print(results)

    # ('2011-09-21', '1438', '1439')
</snippet></ROW><ROW><id>7517542</id><snippet>time.time()</snippet></ROW><ROW><id>7517542</id><snippet>startTime = int(time.time() * 100)
#...
endTime = int(time.time() * 100)
</snippet></ROW><ROW><id>7517542</id><snippet>endTime - startTime &gt;= sleepTime</snippet></ROW><ROW><id>7517559</id><snippet>inspect.getsource</snippet></ROW><ROW><id>7517559</id><snippet>module.__file__</snippet></ROW><ROW><id>7517559</id><snippet>.py</snippet></ROW><ROW><id>7517824</id><snippet>print &gt;&gt; sys.stderr, ("%s does not exist"%m_args)
</snippet></ROW><ROW><id>7517824</id><snippet>verify_commit_text()</snippet></ROW><ROW><id>7517824</id><snippet>__main__</snippet></ROW><ROW><id>7517824</id><snippet>print &gt;&gt; sys.stderr, ("%m_args[0] does not exist"%m_args[0])
</snippet></ROW><ROW><id>7517824</id><snippet>%m_args[0]</snippet></ROW><ROW><id>7517824</id><snippet>%s</snippet></ROW><ROW><id>7517824</id><snippet>m_args</snippet></ROW><ROW><id>7517824</id><snippet>print</snippet></ROW><ROW><id>7517824</id><snippet>verify_commit_text()</snippet></ROW><ROW><id>7517824</id><snippet>global m_args</snippet></ROW><ROW><id>7517824</id><snippet>verify_commit_text()</snippet></ROW><ROW><id>7517824</id><snippet>elif</snippet></ROW><ROW><id>7517824</id><snippet>else</snippet></ROW><ROW><id>7517824</id><snippet>for</snippet></ROW><ROW><id>7517824</id><snippet>verify_commit_text()</snippet></ROW><ROW><id>7517824</id><snippet>if</snippet></ROW><ROW><id>7517824</id><snippet>return</snippet></ROW><ROW><id>7517824</id><snippet>sys.stderr</snippet></ROW><ROW><id>7517824</id><snippet>os.devnull</snippet></ROW><ROW><id>7517824</id><snippet>print</snippet></ROW><ROW><id>7517824</id><snippet>True</snippet></ROW><ROW><id>7517824</id><snippet>exit(0)</snippet></ROW><ROW><id>7517824</id><snippet>True</snippet></ROW><ROW><id>7517824</id><snippet>if not commit_text_verified:</snippet></ROW><ROW><id>7517824</id><snippet>CheckForJiraIssueRecord(m_args)</snippet></ROW><ROW><id>7517824</id><snippet>return</snippet></ROW><ROW><id>7517824</id><snippet>None</snippet></ROW><ROW><id>7517824</id><snippet>if</snippet></ROW><ROW><id>7517824</id><snippet>True</snippet></ROW><ROW><id>7517824</id><snippet>else</snippet></ROW><ROW><id>7517956</id><snippet>In [9]: [s[:m.start()] for m in re.finditer(':|$', s)]
Out[9]: ['foo', 'foo:bar', 'foo:bar:baz']
</snippet></ROW><ROW><id>7518128</id><snippet>shutil.copyfile(src, dst)</snippet></ROW><ROW><id>7518128</id><snippet>copy()</snippet></ROW><ROW><id>7518194</id><snippet>strip()</snippet></ROW><ROW><id>7518194</id><snippet>In [1]: ' 56.00  '.strip()
Out[1]: '56.00'
</snippet></ROW><ROW><id>7518283</id><snippet>diff</snippet></ROW><ROW><id>7518283</id><snippet>-I</snippet></ROW><ROW><id>7518283</id><snippet>-I regexp
      Ignore changes that just insert or delete lines that match  regexp.
</snippet></ROW><ROW><id>7518283</id><snippet>[me@home]$ diff images/ images2
Only in images2: x
Only in images/: y
diff images/z images2/z
1c1
&lt; zzz
---
&gt; zzzyy2

[me@home]$ # a less verbose version
[me@home]$ diff -q images/ images2
Only in images2: x
Only in images/: y
Files images/z and images2/z differ

[me@home]$ # ignore diffs on lines that contain "zzz"
[me@home]$ diff -q -I ".*zzz.*" images/ images2/
Only in images2/: x
Only in images/: y
</snippet></ROW><ROW><id>7519217</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; s1 = u'La+Cit%C3%A9+De+la+West'
&gt;&gt;&gt; type(s1)
&lt;type 'unicode'&gt;
&gt;&gt;&gt; print urllib.unquote_plus(s1)
La CitÃ© De la West

&gt;&gt;&gt; s2 = str(s1)
&gt;&gt;&gt; type(s2)
&lt;type 'str'&gt;
&gt;&gt;&gt; print urllib.unquote_plus(s2)
La Cité De la West

&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdout.encoding
'UTF-8'
</snippet></ROW><ROW><id>7519514</id><snippet>re.match()</snippet></ROW><ROW><id>7519514</id><snippet>re.search()</snippet></ROW><ROW><id>7519514</id><snippet>.</snippet></ROW><ROW><id>7519514</id><snippet>x0</snippet></ROW><ROW><id>7519514</id><snippet>&gt;&gt;&gt; re.match(r'\.\d', 'x0')
&gt;&gt;&gt; re.match(r'.\d', 'x0')
&lt;_sre.SRE_Match object at 0x01F67138&gt;
</snippet></ROW><ROW><id>7519514</id><snippet>re.DOTALL</snippet></ROW><ROW><id>7519576</id><snippet>a.append(b)</snippet></ROW><ROW><id>7519576</id><snippet>a = a + [b]</snippet></ROW><ROW><id>7519576</id><snippet>class FooSingleton(object):
    class_var = "foo"

def func1():
    FooSingleton.class_var = "bar"

def func2():
    print(FooSingleton.class_var)
</snippet></ROW><ROW><id>7519576</id><snippet>dict</snippet></ROW><ROW><id>7519600</id><snippet>Book.objects.filter(title__regex=r'\d')
</snippet></ROW><ROW><id>7519885</id><snippet>gtk.gdk.Window</snippet></ROW><ROW><id>7519885</id><snippet>gtk.Window</snippet></ROW><ROW><id>7519885</id><snippet>window</snippet></ROW><ROW><id>7519885</id><snippet>gtk.gdk.Window</snippet></ROW><ROW><id>7519885</id><snippet>gtk.Window</snippet></ROW><ROW><id>7519885</id><snippet>win.show_all()</snippet></ROW><ROW><id>7519885</id><snippet>import gtk
import gobject

def main():
    button = gtk.Button("Hello")
    scroll_win = gtk.ScrolledWindow()
    scroll_win.add(button)
    win = gtk.Window(gtk.WINDOW_TOPLEVEL)
    win.add(scroll_win)
    win.show_all()

    # Set timeout to allow time for the screen to be drawn
    # before saving the window image
    gobject.timeout_add(1000, drawWindow, win)

def drawWindow(win):
    width, height = win.get_size()
    pixbuf = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, width, height)

    # Retrieve the pixel data from the gdk.window attribute (win.window)
    # of the gtk.window object
    screenshot = pixbuf.get_from_drawable(win.window, win.get_colormap(), 
                                          0, 0, 0, 0, width, height)

    screenshot.save('screenshot.png', 'png')

    # Return False to stop the repeating interval
    return False

if __name__ == '__main__':
    main()
    gtk.main()
</snippet></ROW><ROW><id>7519885</id><snippet>gtk.gdk.Window</snippet></ROW><ROW><id>7519885</id><snippet>gtk.main()</snippet></ROW><ROW><id>7519885</id><snippet>win.show_all()</snippet></ROW><ROW><id>7519885</id><snippet>gobject.timeout_add</snippet></ROW><ROW><id>7519885</id><snippet>drawWindow(win)</snippet></ROW><ROW><id>7519885</id><snippet>gobject.timeout_add</snippet></ROW><ROW><id>7519885</id><snippet>return False</snippet></ROW><ROW><id>7519885</id><snippet>0</snippet></ROW><ROW><id>7519885</id><snippet>None</snippet></ROW><ROW><id>7519885</id><snippet>return</snippet></ROW><ROW><id>7519885</id><snippet>True</snippet></ROW><ROW><id>7519885</id><snippet>gobject.GObject</snippet></ROW><ROW><id>7519885</id><snippet>connect()</snippet></ROW><ROW><id>7519885</id><snippet>expose-event</snippet></ROW><ROW><id>7519885</id><snippet>connect_after()</snippet></ROW><ROW><id>7519885</id><snippet>import gtk

# Don't use globals in a real application,
# better to encapsulate everything in a class
handlerId = 0

def main():
    button = gtk.Button("Hello")
    scroll_win = gtk.ScrolledWindow()
    scroll_win.add(button)
    win = gtk.Window(gtk.WINDOW_TOPLEVEL)
    win.add(scroll_win)

    # Connect to expose signal to allow time
    # for the window to be drawn
    global handlerId 
    handlerId = win.connect_after('expose-event', drawWindow)

    win.show_all()

def drawWindow(win, e):
    width, height = win.get_size()
    pixbuf = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, width, height)

    # Retrieve the pixel data from the gdk.window attribute (win.window)
    # of the gtk.window object
    screenshot = pixbuf.get_from_drawable(win.window, win.get_colormap(), 
                                          0, 0, 0, 0, width, height)
    screenshot.save('screenshot.png', 'png')

    # Disconnect this handler so that it isn't
    # repeated when the screen needs to be redrawn again
    global handlerId
    win.disconnect(handlerId)

if __name__ == '__main__':
    main()
    gtk.main()
</snippet></ROW><ROW><id>7520020</id><snippet>[5]
[4,1]
[2,2,1]
[2,1,1,1]
[1,1,1,1,1]
</snippet></ROW><ROW><id>7520020</id><snippet>def possibleSplits(value,validIncrements):
    ret = []
    for increment in validIncrements:
        if increment &gt; value:
            continue
        if increment == value:
            ret.append([increment])
            continue
        if increment &lt; value:
            remainder = value - increment
            toAdd = possibleSplits(remainder, validIncrements)
            for a in toAdd:
                ret.append([increment] + a)
    return ret
</snippet></ROW><ROW><id>7520020</id><snippet>def orderedPossibleSplits(value, validIncrements):
    ret = []
    splits = possibleSplits(value, validIncrements)
    for value in splits:
        value.sort()
        if value not in ret:
            ret.append(value)
    return ret
</snippet></ROW><ROW><id>7520020</id><snippet>increments = [10, 5, 4, 2, 1]
tenSplits = orderedPossibleSplits(10, increments)
fourSplits = orderedPossibleSplits(4, increments)
results = []
for tenSplit in tenSplits:
    for fourSplit in fourSplits:
        results.append(tenSplit + fourSplit)
</snippet></ROW><ROW><id>7520020</id><snippet>N     1 | 2 | 3 | 4 | 5 ... 20    ... 98                         | 99                         | 100 
Time  1 | 1 | 1 | 4 | 7 ... 69748 ... 30633138046209681029984497 | 56343125079040471808818753 | 103631163705253975385349220
</snippet></ROW><ROW><id>7520020</id><snippet>#sorts each element of seq and returns it
def orderedInnerLists(seq):
    return map(sorted, seq)

#returns a copy of seq with duplicates removed
def removeDuplicates(seq):
    ret = []
    for value in seq:
        if value not in ret:
            ret.append(value)
    return ret

memoizedResults = {}
def orderedPossibleSplits(value,validIncrements):
    memoizeKey = (value, tuple(validIncrements))
    if memoizeKey in memoizedResults:
        return memoizedResults[memoizeKey]
    ret = []
    for increment in validIncrements:
        if increment &gt; value:
            continue
        if increment == value:
            ret.append([increment])
            continue
        if increment &lt; value:
            remainder = value - increment
            toAdd = orderedPossibleSplits(remainder, validIncrements)
            for a in toAdd:
                ret.append([increment] + a)
    memoizeValue = removeDuplicates(orderedInnerLists(ret))
    memoizedResults[memoizeKey] = memoizeValue
    return memoizeValue
</snippet></ROW><ROW><id>7520087</id><snippet>Car</snippet></ROW><ROW><id>7520087</id><snippet>__getattr__</snippet></ROW><ROW><id>7520087</id><snippet>class Car(object):
    def __init__(self, name, tank_size=10, mpg=30):
        self.name = name
        self.tank_size = tank_size
        self.mpg = mpg

class Favorite(object):
    def __init__(self, car):
        self.car = car
    def __getattr__(self, attr):
        return getattr(self.car, attr)
    @property
    def range(self):
        return self.mpg * self.tank_size

cars = []
cars.append(Car("Toyota", 11, 29))
cars.append(Car("Ford", 15, 12))
cars.append(Car("Honda", 12, 25))

my_current_fav = Favorite(cars[1])

print my_current_fav.range
</snippet></ROW><ROW><id>7520087</id><snippet>Favorite</snippet></ROW><ROW><id>7520087</id><snippet>Favorite</snippet></ROW><ROW><id>7520087</id><snippet>car</snippet></ROW><ROW><id>7520087</id><snippet>Favorite</snippet></ROW><ROW><id>7520087</id><snippet>range</snippet></ROW><ROW><id>7520087</id><snippet>Favorite</snippet></ROW><ROW><id>7520087</id><snippet>property</snippet></ROW><ROW><id>7520087</id><snippet>Favorite</snippet></ROW><ROW><id>7520087</id><snippet>my_current_fav.car = cars[0] # or Car('whatever')
</snippet></ROW><ROW><id>7520157</id><snippet>WARNING</snippet></ROW><ROW><id>7520157</id><snippet>WARNING</snippet></ROW><ROW><id>7520157</id><snippet>WARNING</snippet></ROW><ROW><id>7520157</id><snippet>basicConfig()</snippet></ROW><ROW><id>7520157</id><snippet>StreamHandler</snippet></ROW><ROW><id>7520157</id><snippet>WARNING:myLogger:this is a warning
</snippet></ROW><ROW><id>7520157</id><snippet>INFO</snippet></ROW><ROW><id>7520157</id><snippet>basicConfig()</snippet></ROW><ROW><id>7520168</id><snippet>#!/usr/bin/env python
import argparse, csv
if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='merge csv files on field', version='%(prog)s 1.0')
    parser.add_argument('infile', nargs='+', type=str, help='list of input files')
    parser.add_argument('--out', type=str, default='temp.csv', help='name of output file')
    args = parser.parse_args()
    data = {}
    fields = []

    for fname in args.infile:
        with open(fname, 'rb') as df:
            reader = csv.DictReader(df)
            for line in reader:
                # assuming the field is called ID
                if line['ID'] not in data:
                    data[line['ID']] = line
                else:
                    for k,v in line.iteritems():
                        if k not in data[line['ID']]:
                            data[line['ID']][k] = v
                for k in line.iterkeys():
                    if k not in fields:
                        fields.append(k)
            del reader

    writer = csv.DictWriter(open(args.out, "wb"), fields, dialect='excel')
    # write the header at the top of the file
    writer.writeheader()
    writer.writerows(data)
    del writer
</snippet></ROW><ROW><id>7520168</id><snippet>#!/usr/bin/env python
import glob, csv
if __name__ == '__main__':

    infiles = glob.glob('./*.csv')
    out = 'temp.csv'
    data = {}
    fields = []

    for fname in infiles:
        df = open(fname, 'rb')
        reader = csv.DictReader(df)
        for line in reader:
            # assuming the field is called ID
            if line['ID'] not in data:
                data[line['ID']] = line
            else:
                for k,v in line.iteritems():
                    if k not in data[line['ID']]:
                        data[line['ID']][k] = v
            for k in line.iterkeys():
                if k not in fields:
                    fields.append(k)
        del reader
        df.close()

    writer = csv.DictWriter(open(out, "wb"), fields, dialect='excel')
    # write the header at the top of the file
    writer.writeheader()
    writer.writerows(data)
    del writer
</snippet></ROW><ROW><id>7520507</id><snippet>for page in pages:
    new_page= Page.objects.create(
        this= page.this, that=page.that, ...
        status= Page.DRAFT )
</snippet></ROW><ROW><id>7520514</id><snippet>database.close()</snippet></ROW><ROW><id>7520977</id><snippet>clear()</snippet></ROW><ROW><id>7521412</id><snippet>sort</snippet></ROW><ROW><id>7521463</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>7521681</id><snippet>soup.findAll('a', {'class': 'yil-biz-ttl'})[0]['href']
</snippet></ROW><ROW><id>7521681</id><snippet>for link in soup.findAll('a', {'class': 'yil-biz-ttl'}):
    try:
        print link['href']
    except KeyError:
        pass
</snippet></ROW><ROW><id>7521941</id><snippet>my_test</snippet></ROW><ROW><id>7521941</id><snippet>%</snippet></ROW><ROW><id>7521941</id><snippet>my_test</snippet></ROW><ROW><id>7521941</id><snippet>print("my_test = %r" % (my_test,))
</snippet></ROW><ROW><id>7522223</id><snippet>export</snippet></ROW><ROW><id>7522223</id><snippet>os.environ</snippet></ROW><ROW><id>7522223</id><snippet>##!/bin/bash
#$ -V
#$ -cwd
#$ -o $HOME/sge_jobs_output/$JOB_ID.out -j y
#$ -S /bin/bash
#$ -l mem_free=4G

c=$SGE_TASK_ID
cd /home/xxx/scratch/test/
export FILENAME=`head -$c testlist|tail -1`
chmod +X testpython.py
./testpython.py


#!/bin/python
import sys
import os

for arg in sys.argv:  
    print arg  

f=open('/home/xxx/scratch/test/' + os.environ['FILENAME'],'r').readlines()
print f[1]
</snippet></ROW><ROW><id>7522223</id><snippet>sys.argv</snippet></ROW><ROW><id>7522223</id><snippet>sys.argv</snippet></ROW><ROW><id>7522223</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>7522223</id><snippet>len(sys.argv)</snippet></ROW><ROW><id>7522223</id><snippet>#!/bin/python
import sys
import os

if len(sys.argv) &lt; 2:
    print 'Usage: ' + sys.argv[0] + ' &lt;filename&gt;'
    sys.exit(1)

print 'This is the name of the python script: ' + sys.argv[0]
print 'This is the 1st argument:              ' + sys.argv[1]

f=open('/home/xxx/scratch/test/' + sys.argv[1],'r').readlines()
print f[1]
</snippet></ROW><ROW><id>7522455</id><snippet>program help</snippet></ROW><ROW><id>7522455</id><snippet>program --help</snippet></ROW><ROW><id>7522455</id><snippet>import argparse

def help(args):
    args.parser.print_help()

parser = argparse.ArgumentParser(description='my program')
subparsers = parser.add_subparsers()
p_help = subparsers.add_parser('help')
p_help.set_defaults(func=help, parser=parser)

args = parser.parse_args()
args.func(args)
</snippet></ROW><ROW><id>7522743</id><snippet>#include &lt;windows.h&gt;

#define INTELHOOK_API extern "C" __declspec(dllexport)
INTELHOOK_API BOOL test(void) {
    BOOL success = FALSE;
    HWND parent = NULL;

    parent = FindWindow("notepad", NULL);
    if (parent != NULL) {
        success = TRUE;
    }
    return success;
}

// g++ test.cpp -o test.dll -shared
</snippet></ROW><ROW><id>7522743</id><snippet>import ctypes
dll = ctypes.cdll.LoadLibrary('c/test.dll')
print(dll.test())
</snippet></ROW><ROW><id>7522783</id><snippet>def word_no_forbidden():
    forbidden = raw_input('pick 5 letters')
    fin = open('words1.txt')
    no_forbidden_word = 0
    for line in fin:
        word = line.strip()
        for letter in list(word):
            if letter in forbidden:
                break
        else:
            print word
</snippet></ROW><ROW><id>7522783</id><snippet>raw_input</snippet></ROW><ROW><id>7522783</id><snippet>list(your_string)</snippet></ROW><ROW><id>7522783</id><snippet>else</snippet></ROW><ROW><id>7522783</id><snippet>for letter in list(word)</snippet></ROW><ROW><id>7522895</id><snippet>cached_db</snippet></ROW><ROW><id>7522895</id><snippet>cache</snippet></ROW><ROW><id>7522895</id><snippet>from django.contrib.sessions.backends.cache import SessionStore as CachedSessionStore
from django.core.cache import get_cache
from django.conf import settings

class SessionStore(CachedSessionStore):
    """
    A cache-based session store.
    """
    def __init__(self, session_key=None):
        self._cache = get_cache(settings.SESSION_CACHE_ALIAS)
        super(SessionStore, self).__init__(session_key)
</snippet></ROW><ROW><id>7522895</id><snippet>cached_db</snippet></ROW><ROW><id>7522895</id><snippet>cached_db</snippet></ROW><ROW><id>7522895</id><snippet>SessionStore</snippet></ROW><ROW><id>7522895</id><snippet>from django.conf import settings
from django.contrib.sessions.backends.db import SessionStore as DBStore
from django.core.cache import get_cache

class SessionStore(DBStore):
    """
    Implements cached, database backed sessions.  Now with control over the cache!
    """

    def __init__(self, session_key=None):
        super(SessionStore, self).__init__(session_key)
        self.cache = get_cache(getattr(settings, 'SESSION_CACHE_ALIAS', 'default'))

    def load(self):
        data = self.cache.get(self.session_key, None)
        if data is None:
            data = super(SessionStore, self).load()
            self.cache.set(self.session_key, data, settings.SESSION_COOKIE_AGE)
        return data

    def exists(self, session_key):
        return super(SessionStore, self).exists(session_key)

    def save(self, must_create=False):
        super(SessionStore, self).save(must_create)
        self.cache.set(self.session_key, self._session, settings.SESSION_COOKIE_AGE)

    def delete(self, session_key=None):
        super(SessionStore, self).delete(session_key)
        self.cache.delete(session_key or self.session_key)

    def flush(self):
        """
        Removes the current session data from the database and regenerates the
        key.
        """
        self.clear()
        self.delete(self.session_key)
        self.create()
</snippet></ROW><ROW><id>7522941</id><snippet>self.session = session</snippet></ROW><ROW><id>7522941</id><snippet>__init__</snippet></ROW><ROW><id>7522941</id><snippet>class</snippet></ROW><ROW><id>7522941</id><snippet>session</snippet></ROW><ROW><id>7522941</id><snippet>__init__</snippet></ROW><ROW><id>7522941</id><snippet>self</snippet></ROW><ROW><id>7522941</id><snippet>self.players = self.session.listof.players.split(',')</snippet></ROW><ROW><id>7522941</id><snippet>self</snippet></ROW><ROW><id>7523021</id><snippet>load_profile = open('users/file.txt', "r")
read_it = load_profile.read()
myLine = ""
for line in read_it.splitlines():
    if line == "This is the line I am looking for":
        myLine = line
        break
print myLine
</snippet></ROW><ROW><id>7523021</id><snippet>load_profile = open('users/file.txt', "r")
read_it = load_profile.read().splitlines()[0]
print read_it
</snippet></ROW><ROW><id>7523021</id><snippet>load_profile = open('users/file.txt', "r")
read_it = load_profile.readline()
print read_it
</snippet></ROW><ROW><id>7523021</id><snippet>load_profile = open('users/file.txt', "r")
read_it = load_profile.read()
myLines = []
for line in read_it.splitlines():
    # if line.startswith("Start of line..."):
    # if line.endswith("...line End."):
    # if line.find("SUBSTRING") &gt; -1:
    if line == "This is the line I am looking for":
        myLines.append(line)
print myLines
</snippet></ROW><ROW><id>7523051</id><snippet>mystring = unicode(mystring, errors='replace')
</snippet></ROW><ROW><id>7523051</id><snippet>import chardet
chartype = chardet.detect(mystring)

# perhaps you may want to check the confidence that it is that encoding first?
# if chartype['confidence'] &gt; 0.5 or something

mystring = mystring.decode(chartype['encoding']).encode('utf-8')
</snippet></ROW><ROW><id>7523530</id><snippet>&gt;&gt;&gt; data0 = np.array(('2011-09-20', 0), dtype=[('start date', 'S11'), ('n', int)])
&gt;&gt;&gt; data0.ndim
0
</snippet></ROW><ROW><id>7523530</id><snippet>&gt;&gt;&gt; type(data0[()])
&lt;class 'numpy.void'&gt;
&gt;&gt;&gt; data0[()][0]
b'2011-09-20'
&gt;&gt;&gt; data0[()]['start date']
b'2011-09-20'

&gt;&gt;&gt; #There is also an item() method, which however returns the element as python type
&gt;&gt;&gt; type(data0.item())
&lt;class 'tuple'&gt;
</snippet></ROW><ROW><id>7523530</id><snippet>&gt;&gt;&gt; tupleli = [('2011-09-2%s' % i, i) for i in range(5)]
&gt;&gt;&gt; tupleli
[('2011-09-20', 0), ('2011-09-21', 1), ('2011-09-22', 2), ('2011-09-23', 3), ('2011-09-24', 4)]
&gt;&gt;&gt; dt = dtype=[('start date', '|S11'), ('n', np.int64)]
&gt;&gt;&gt; dt
[('start date', '|S11'), ('n', &lt;class 'numpy.int64'&gt;)]
</snippet></ROW><ROW><id>7523530</id><snippet>&gt;&gt;&gt; data1 = np.array(tupleli[0], dtype=dt)
&gt;&gt;&gt; data1.shape
()
&gt;&gt;&gt; data1['start date']
array(b'2011-09-20', 
      dtype='|S11')
&gt;&gt;&gt; data1['n']
array(0, dtype=int64)
</snippet></ROW><ROW><id>7523530</id><snippet>&gt;&gt;&gt; data2 = np.array([tupleli[0]], dtype=dt)
&gt;&gt;&gt; data2.shape
(1,)
&gt;&gt;&gt; data2[0]
(b'2011-09-20', 0)
</snippet></ROW><ROW><id>7523530</id><snippet>&gt;&gt;&gt; data3 = np.array(tupleli, dtype=dt)
&gt;&gt;&gt; data3.shape
(5,)
&gt;&gt;&gt; data3[2]
(b'2011-09-22', 2)
&gt;&gt;&gt; data3['start date']
array([b'2011-09-20', b'2011-09-21', b'2011-09-22', b'2011-09-23',
       b'2011-09-24'], 
      dtype='|S11')
&gt;&gt;&gt; data3['n']
array([0, 1, 2, 3, 4], dtype=int64)
</snippet></ROW><ROW><id>7523530</id><snippet>&gt;&gt;&gt; data3[2][1]
2
&gt;&gt;&gt; data3[2][0]
b'2011-09-22'

&gt;&gt;&gt; data3[2]['n']
2
&gt;&gt;&gt; data3[2]['start date']
b'2011-09-22'
</snippet></ROW><ROW><id>7523530</id><snippet>&gt;&gt;&gt; type(data1)
&lt;class 'numpy.ndarray'&gt;
&gt;&gt;&gt; type(data1[()])   #get element out of 0-dim array
&lt;class 'numpy.void'&gt;

&gt;&gt;&gt; data1[0]
Traceback (most recent call last):
  File "&lt;pyshell#98&gt;", line 1, in &lt;module&gt;
    data1[0]
IndexError: 0-d arrays can't be indexed
&gt;&gt;&gt; data1[()][0]
b'2011-09-20'

&gt;&gt;&gt; data1.ndim
0
&gt;&gt;&gt; data1[()].ndim
0
</snippet></ROW><ROW><id>7523810</id><snippet>if __name__=='__main__':
    from timeit import Timer
    t = Timer(lambda: superMegaIntenseFunction(10))
    print t.timeit(number=1)
</snippet></ROW><ROW><id>7523865</id><snippet>return</snippet></ROW><ROW><id>7523865</id><snippet>one()</snippet></ROW><ROW><id>7523865</id><snippet>#!/usr/bin/env python

def main():
    print 'main function'
    args = one() # returns my_args, which i'm assigning to args
    print 'i got args from one():', args
    print args.pop()

def one():
    print 'one function'
    my_args = ["QA-65"]
    return my_args

def two():
    print 'two function'

if __name__ == "__main__":
    main()
    #getattr(my_args, pop)
    # ^^^ Moved this up to main() ^^^
</snippet></ROW><ROW><id>7523865</id><snippet>main function
one function
i got args from one(): ['QA-65']
QA-65
</snippet></ROW><ROW><id>7524275</id><snippet>[3:]</snippet></ROW><ROW><id>7524275</id><snippet>[4:]</snippet></ROW><ROW><id>7524275</id><snippet>more_latest_appearances</snippet></ROW><ROW><id>7524275</id><snippet>&gt;&gt;&gt; "abcdef"[:3]
'abc'
&gt;&gt;&gt; "abcdef"[4:]
'ef'
&gt;&gt;&gt; "abcdef"[3:]
'def'
</snippet></ROW><ROW><id>7524275</id><snippet>appearances = Issue.objects.order_by('-id').order_by('-pub_date')
latest_appearances = appearances[:3]
more_latest_appearances = appearances[3:14]
</snippet></ROW><ROW><id>7524510</id><snippet>join()</snippet></ROW><ROW><id>7524510</id><snippet>&gt;&gt;&gt; name = ['i', 'c', 'x', 'n', 'y', 'b', 'g', 'r', 'h', 'p', 'w', 'o']
&gt;&gt;&gt; ''.join(name)
'icxnybgrhpwo'
</snippet></ROW><ROW><id>7524535</id><snippet>s[0]</snippet></ROW><ROW><id>7524535</id><snippet>s[0]</snippet></ROW><ROW><id>7524639</id><snippet>def convert_to_jtree(bt):
    return JTree(bt.data, [convert_to_jtree(bt.left) if bt.left else None,
                          convert_to_jtree(bt.right) if bt.right else None])
</snippet></ROW><ROW><id>7525100</id><snippet>a</snippet></ROW><ROW><id>7525100</id><snippet>p</snippet></ROW><ROW><id>7525345</id><snippet>import numpy as np
a = np.array([[1, 1],
              [0, 1]])
n = 2
np.kron(a, np.ones((n,n)))
</snippet></ROW><ROW><id>7525345</id><snippet>array([[1, 1, 1, 1],
       [1, 1, 1, 1],
       [0, 0, 1, 1],
       [0, 0, 1, 1]])
</snippet></ROW><ROW><id>7526059</id><snippet>git checkout debian-packaging
make get-source
make deb
&lt;copy-my-package-out-of-the-way-here&gt;
make reset
</snippet></ROW><ROW><id>7526059</id><snippet>get-source</snippet></ROW><ROW><id>7526059</id><snippet>git archive</snippet></ROW><ROW><id>7526059</id><snippet># Fetch the source code from desired branch
get-source:
    git archive $(SOURCE_BRANCH) -o $(SOURCE_BRANCH).tar
    tar xf $(SOURCE_BRANCH).tar
    rm $(SOURCE_BRANCH).tar
    @echo "The source code has been fetched."
</snippet></ROW><ROW><id>7526659</id><snippet>import wx, sys

try:
    import win32gui #, win32con
    WIN32 = True
except:
    WIN32 = False

class BalloonTaskBarIcon(wx.TaskBarIcon):
    """
    Base Taskbar Icon Class
    """
    def __init__(self):
        wx.TaskBarIcon.__init__(self)
        self.icon = None
        self.tooltip = ""

    def ShowBalloon(self, title, text, msec = 0, flags = 0):
        """
        Show Balloon tooltip
         @param title - Title for balloon tooltip
         @param msg   - Balloon tooltip text
         @param msec  - Timeout for balloon tooltip, in milliseconds
         @param flags -  one of wx.ICON_INFORMATION, wx.ICON_WARNING, wx.ICON_ERROR
        """
        if WIN32 and self.IsIconInstalled():
            try:
                self.__SetBalloonTip(self.icon.GetHandle(), title, text, msec, flags)
            except Exception:
                pass # print(e) Silent error

    def __SetBalloonTip(self, hicon, title, msg, msec, flags):

        # translate flags
        infoFlags = 0

        if flags &amp; wx.ICON_INFORMATION:
            infoFlags |= win32gui.NIIF_INFO
        elif flags &amp; wx.ICON_WARNING:
            infoFlags |= win32gui.NIIF_WARNING
        elif flags &amp; wx.ICON_ERROR:
            infoFlags |= win32gui.NIIF_ERROR

        # Show balloon
        lpdata = (self.__GetIconHandle(),   # hWnd
                  99,                       # ID
                  win32gui.NIF_MESSAGE|win32gui.NIF_INFO|win32gui.NIF_ICON, # flags: Combination of NIF_* flags
                  0,                        # CallbackMessage: Message id to be pass to hWnd when processing messages
                  hicon,                    # hIcon: Handle to the icon to be displayed
                  '',                       # Tip: Tooltip text
                  msg,                      # Info: Balloon tooltip text
                  msec,                     # Timeout: Timeout for balloon tooltip, in milliseconds
                  title,                    # InfoTitle: Title for balloon tooltip
                  infoFlags                 # InfoFlags: Combination of NIIF_* flags
                  )
        win32gui.Shell_NotifyIcon(win32gui.NIM_MODIFY, lpdata)

        self.SetIcon(self.icon, self.tooltip)   # Hack: because we have no access to the real CallbackMessage value

    def __GetIconHandle(self):
        """
        Find the icon window.
        This is ugly but for now there is no way to find this window directly from wx
        """
        if not hasattr(self, "_chwnd"):
            try:
                for handle in wx.GetTopLevelWindows():
                    if handle.GetWindowStyle():
                        continue
                    handle = handle.GetHandle()
                    if len(win32gui.GetWindowText(handle)) == 0:
                        self._chwnd = handle
                        break
                if not hasattr(self, "_chwnd"):
                    raise Exception
            except:
                raise Exception, "Icon window not found"
        return self._chwnd

    def SetIcon(self, icon, tooltip = ""):
        self.icon = icon
        self.tooltip = tooltip
        wx.TaskBarIcon.SetIcon(self, icon, tooltip)

    def RemoveIcon(self):
        self.icon = None
        self.tooltip = ""
        wx.TaskBarIcon.RemoveIcon(self)

# ===================================================================
app = wx.PySimpleApp()

class TestTaskBarIcon(BalloonTaskBarIcon):

    def __init__(self):
        wx.TaskBarIcon.__init__(self)
        # create a test icon
        bmp = wx.EmptyBitmap(16, 16)
        dc = wx.MemoryDC(bmp)
        dc.SetBrush(wx.RED_BRUSH)
        dc.Clear()
        dc.SelectObject(wx.NullBitmap)

        testicon = wx.EmptyIcon()
        testicon.CopyFromBitmap(bmp)

        self.SetIcon(testicon)
        self.Bind(wx.EVT_TASKBAR_LEFT_UP, lambda e: (self.RemoveIcon(),sys.exit()))

        self.ShowBalloon("", "Hello world!")

icon = TestTaskBarIcon()
app.MainLoop()
</snippet></ROW><ROW><id>7526676</id><snippet>def __init__(self, *args, **kwargs):
    super(Discount, self).__init__(*args, **kwargs)
    if self.type:
        self.__class__ = getattr(sys.modules[__name__], self.type + 'Discount')
</snippet></ROW><ROW><id>7526676</id><snippet>__init__</snippet></ROW><ROW><id>7526676</id><snippet>self.type</snippet></ROW><ROW><id>7526676</id><snippet>type</snippet></ROW><ROW><id>7526676</id><snippet>type</snippet></ROW><ROW><id>7527449</id><snippet>-O</snippet></ROW><ROW><id>7527449</id><snippet>#if</snippet></ROW><ROW><id>7527449</id><snippet>start_my_project.sh</snippet></ROW><ROW><id>7527684</id><snippet>itertools</snippet></ROW><ROW><id>7527684</id><snippet>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; l = [
...   {'word': u'live', 'sequence': 1L, 'part': 1L},
...   {'word': u'school', 'sequence': 2L, 'part': 1L},
...   {'word': u'job', 'sequence': 1L, 'part': 2L},
...   {'word': u'house', 'sequence': 2L, 'part': 2L},
... ]

&gt;&gt;&gt; l2 = [sorted(list(g), key=lambda x:x["sequence"])
...       for k, g in itertools.groupby(l, key=lambda x:x["part"])]

&gt;&gt;&gt; pprint.pprint(l2)
[[{'part': 1L, 'sequence': 1L, 'word': u'live'},
  {'part': 1L, 'sequence': 2L, 'word': u'school'}],
 [{'part': 2L, 'sequence': 1L, 'word': u'job'},
  {'part': 2L, 'sequence': 2L, 'word': u'house'}]]
</snippet></ROW><ROW><id>7527684</id><snippet>l</snippet></ROW><ROW><id>7527684</id><snippet>part</snippet></ROW><ROW><id>7527684</id><snippet>&gt;&gt;&gt; l2 = [sorted(list(g), key=lambda x:x["sequence"])
...       for k, g in itertools.groupby(sorted(l, key=lambda x:x["part"]), 
...                                     key=lambda x:x["part"])]
</snippet></ROW><ROW><id>7527889</id><snippet>def add(a, b, c):
    print(a, b, c)

x = (1, 2, 3)
add(*x)
</snippet></ROW><ROW><id>7527889</id><snippet>x = { 'a': 3, 'b': 1, 'c': 2 }
add(**x) 
</snippet></ROW><ROW><id>7528051</id><snippet>import math

example_triangle = [[0,0], [5,5], [0,5], [0,0]]
high_tide_line = [[0, 0], [5., 1.5], [10., 3.2], [20., 1.], [30., 4.5], [80.,2.], [80,0]]
low_tide_line = [[0, 10.], [5., 11.5], [10., 13.2], [20., 11.], [30., 14.5], [80., 12.], [80, 10]]

def points_from_geom(geom):
    idx = 0
    line_lengths = []
    unit_vectors = []
    interpolated_points = []
    while idx &lt; (len(geom) - 1):
        dy, dx = ((geom[idx+1][1] - geom[idx][1]), (geom[idx+1][0] - geom[idx][0]))
        line_lengths.append(math.sqrt(dy**2 + dx**2))
        try:
            angle = math.atan(dy/dx)
            unit_vectors.append([math.cos(angle)*cmp(dx, 0),
                math.sin(angle)*cmp(dy, 0)])
        except ZeroDivisionError:
            if geom[idx+1][1] &lt; geom[idx][1]:
                direction = [0, -1]
            else:
                direction = [0, 1]
            unit_vectors.append(direction)
        idx += 1

    for i, length in enumerate(line_lengths):
        inter = 0
        while inter &lt;= length:
            interpolated_points.append([geom[i][0] + unit_vectors[i][0]*inter,\
                geom[i][1] + unit_vectors[i][1]*inter])
            inter += .3048 # a ft in proper units ;)

    return interpolated_points

ln1 = points_from_geom(example_triangle)
ln2 = points_from_geom(high_tide_line)
ln3 = points_from_geom(low_tide_line)

print ln1, ln2, ln3
</snippet></ROW><ROW><id>7528051</id><snippet>cmp</snippet></ROW><ROW><id>7528317</id><snippet>   data = [  "abc", "aBB", "abD", "Aac", "AAb", "ABc", "ABa" ]
   print sorted(data, key = lambda item: item.upper())
</snippet></ROW><ROW><id>7528317</id><snippet>key</snippet></ROW><ROW><id>7529533</id><snippet>result = [item for sublist in zip(a,b) for item in sublist]
</snippet></ROW><ROW><id>7529533</id><snippet>result = [item for sublist in map(None, a, b) for item in sublist][:-1]
</snippet></ROW><ROW><id>7529730</id><snippet>csv</snippet></ROW><ROW><id>7529730</id><snippet>l = [[1, 2], [2, 3], [4, 5]]

out = open('out.csv', 'w')
for row in l:
    for column in row:
        out.write('%d;' % column)
    out.write('\n')
out.close()
</snippet></ROW><ROW><id>7529730</id><snippet>;</snippet></ROW><ROW><id>7529884</id><snippet>l = c.items()
…
for (char, count) in l:
    treestore.append(parent, ("%d: %s" % (count, char),))
</snippet></ROW><ROW><id>7529949</id><snippet>ggplot2</snippet></ROW><ROW><id>7529949</id><snippet> install.packages("ggplot2")
</snippet></ROW><ROW><id>7529959</id><snippet>f.close()
</snippet></ROW><ROW><id>7530000</id><snippet>settings.py</snippet></ROW><ROW><id>7530000</id><snippet># if manage.py test was called, use test settings
if 'test' in sys.argv:
    try:
        from test_settings import *
    except ImportError:
        pass
</snippet></ROW><ROW><id>7530000</id><snippet>from django.db.backends.signals import connection_created
def activate_foreign_keys(sender, connection, **kwargs):
    """Enable integrity constraint with sqlite."""
    if connection.vendor == 'sqlite':
        cursor = connection.cursor()
        cursor.execute('PRAGMA foreign_keys = ON;')

connection_created.connect(activate_foreign_keys)
</snippet></ROW><ROW><id>7530094</id><snippet>import pythoncom, pyHook 

def uMad(event):
    return False

hm = pyHook.HookManager()
hm.MouseAll = uMad
hm.KeyAll = uMad
hm.HookMouse()
hm.HookKeyboard()
pythoncom.PumpMessages()
</snippet></ROW><ROW><id>7530130</id><snippet>A[1:] + A[:-1]</snippet></ROW><ROW><id>7530130</id><snippet>compute A[1:] + A[:-1] (~10ms)
</snippet></ROW><ROW><id>7530130</id><snippet>compute A[1:] + A[:-1] (~10ms)
copy the result into out (~10ms)
</snippet></ROW><ROW><id>7530280</id><snippet>&lt;root&gt;/
        setup.py
        foo.py
</snippet></ROW><ROW><id>7530280</id><snippet>__init__.py</snippet></ROW><ROW><id>7530280</id><snippet>distribute</snippet></ROW><ROW><id>7530280</id><snippet>setup.py</snippet></ROW><ROW><id>7530280</id><snippet>from setuptools import setup

setup(name='foo',
      version='0.9.0',
      py_modules=['foo'],
      install_requires=['BeautifulSoup &gt;= X.X.X'],
)
</snippet></ROW><ROW><id>7530280</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>7530280</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>7530280</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>7530280</id><snippet>&lt;root&gt;/
        setup.py
        foobar/
            __init__.py
            foo.py
            BeautifulSoup/
                __init__.py
                BeautifulSoup.py
                etc.
</snippet></ROW><ROW><id>7530280</id><snippet>from setuptools import setup, find_packages

setup(name='foobar',
      version='0.9.0',
      packages=find_packages(),
) #NOTE: no install_requires
</snippet></ROW><ROW><id>7530280</id><snippet>import pkg_resources
try:
    pkg_resources.require("BeautifulSoup&gt;=X.X.X")
except pkg_resources.ResolutionError:
    from foobar import BeautifulSoup
else:
    import BeautifulSoup
</snippet></ROW><ROW><id>7530697</id><snippet>In [1]: import urllib
In [2]: urllib.unquote(urllib.unquote("what%2527s%2bthe%2btime%252c%2bnow%253f") )
Out[3]: "what's+the+time,+now?"
</snippet></ROW><ROW><id>7531384</id><snippet>employees_output_list = []
for emp in emp_list:
  name_rank_str = "%s (%s)" % (emp.first_name, emp.rank)
  emp_dict = {
    "id": emp.pk,
    "label": name_rank_str,
    "value": name_rank_str,
  }
  employees_output_list.append(emp_dict)
return HttpResponse(json.dumps(employees_output_list))
</snippet></ROW><ROW><id>7531447</id><snippet>&gt;&gt;&gt; for m in re.finditer(r"(?:(&lt;!--)|(\*))(?P&lt;comment&gt; .*? )(?(1)--&gt;)(?(2)\*)", a):
...   print m.group('comment')
...
 blabla
 bloblo
</snippet></ROW><ROW><id>7531536</id><snippet>threadsafety</snippet></ROW><ROW><id>7531536</id><snippet>2</snippet></ROW><ROW><id>7531536</id><snippet>3</snippet></ROW><ROW><id>7531537</id><snippet>net</snippet></ROW><ROW><id>7531537</id><snippet>mask</snippet></ROW><ROW><id>7531537</id><snippet>byref</snippet></ROW><ROW><id>7531537</id><snippet>mask = ctypes.c_uint32()
net = ctypes.c_int32()
pcap_lookupnet(dev, ctypes.byref(net), ctypes.byref(mask), errbuf)
</snippet></ROW><ROW><id>7531723</id><snippet>&gt;&gt;&gt; input()
001
1
&gt;&gt;&gt; raw_input()
001
'001'
</snippet></ROW><ROW><id>7531775</id><snippet>compiled = re.compile(r'\d(?:-\d)*$')
result = compiled.match(string_to_parse)
</snippet></ROW><ROW><id>7531966</id><snippet>In [1]: for i in range(0, int(100 / 0.5)):
   ...:     print 0.5 * i
   ...:     
   ...:     
0.0
0.5
1.0
1.5
...
98.0
98.5
99.0
99.5
</snippet></ROW><ROW><id>7531966</id><snippet>numpy</snippet></ROW><ROW><id>7531966</id><snippet>numpy.arange(0, 100, 0.5)</snippet></ROW><ROW><id>7532527</id><snippet>subprocess.call</snippet></ROW><ROW><id>7532527</id><snippet>with open('stdout.txt', 'wb') as out:
  subprocess.call(['ls', '-l'], stdout=out)
</snippet></ROW><ROW><id>7532527</id><snippet>subprocess.call</snippet></ROW><ROW><id>7532527</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>7532641</id><snippet>listing.xpath('agency/name/text()')[0]</snippet></ROW><ROW><id>7532641</id><snippet>for listing in listings:
    this_value = {
        'bedrooms': listing.findtext('bedrooms'),
        'bathrooms': listing.findtext('bathrooms'),
        'agency': listing.xpath('agency/name/text()')[0]
    }
    listings_info.append(this_value)
</snippet></ROW><ROW><id>7532803</id><snippet>f = open('tabledefinition.sql')
full_sql = f.read()
sql_commands = full_sql.split(';')

for sql_command in sql_commands:
    curs.execute(sql_command)
</snippet></ROW><ROW><id>7532946</id><snippet>%*</snippet></ROW><ROW><id>7532946</id><snippet>C:\test&gt;assoc .py
.py=Python.File

C:\test&gt;assoc .pyw
.pyw=Python.NoConFile

C:\test&gt;ftype python.file
python.file="C:\Python27\python.exe" "%1" %*

C:\test&gt;ftype python.noconfile
python.noconfile="C:\Python27\pythonw.exe" "%1" %*
</snippet></ROW><ROW><id>7532946</id><snippet>%*</snippet></ROW><ROW><id>7532946</id><snippet>%1</snippet></ROW><ROW><id>7532946</id><snippet>%*</snippet></ROW><ROW><id>7532946</id><snippet>"[your-python-path]python.exe" "%1"
</snippet></ROW><ROW><id>7532946</id><snippet>%*</snippet></ROW><ROW><id>7533314</id><snippet>Parent.foo.im_func(Child)
</snippet></ROW><ROW><id>7533499</id><snippet>__init__.py</snippet></ROW><ROW><id>7533505</id><snippet>from django.db.models import Sum

def list_invoices(request):
    invoices = Item.objects.all().annotate(subtotal=Sum('invoiceline__price'))
</snippet></ROW><ROW><id>7533570</id><snippet>re.match</snippet></ROW><ROW><id>7533570</id><snippet>&gt;&gt;&gt; re.match(r'^(a+)+$','a'*24+'!')
</snippet></ROW><ROW><id>7533570</id><snippet>24</snippet></ROW><ROW><id>7533570</id><snippet>'a'*24</snippet></ROW><ROW><id>7533570</id><snippet>28</snippet></ROW><ROW><id>7533570</id><snippet>48</snippet></ROW><ROW><id>7533570</id><snippet>'a?'*33 + 'a'*33</snippet></ROW><ROW><id>7533570</id><snippet>'a'*99</snippet></ROW><ROW><id>7533570</id><snippet>import re

def ld(a,b):
    "Calculates the Levenshtein distance between a and b."
    n, m = len(a), len(b)
    if n &gt; m:
        # Make sure n &lt;= m, to use O(min(n,m)) space
        a,b = b,a
        n,m = m,n

    current = range(n+1)
    for i in range(1,m+1):
        previous, current = current, [i]+[0]*n
        for j in range(1,n+1):
            add, delete = previous[j]+1, current[j-1]+1
            change = previous[j-1]
            if a[j-1] != b[i-1]:
                change = change + 1
            current[j] = min(add, delete, change)      
    return current[n]

s='Mary had a little lamb'    
d={}
regs=[r'.*', r'Mary', r'lamb', r'little lamb', r'.*little lamb',r'\b\w+mb',
        r'Mary.*little lamb',r'.*[lL]ittle [Ll]amb',r'\blittle\b',s,r'little']

for reg in regs:
    m=re.search(reg,s)
    if m:
        print "'%s' matches '%s' with sub group '%s'" % (reg, s, m.group(0))
        ld1=ld(reg,m.group(0))
        ld2=ld(m.group(0),s)
        score=max(ld1,ld2)
        print "  %i edits regex-&gt;match(0), %i edits match(0)-&gt;s" % (ld1,ld2)
        print "  score: ", score
        d[reg]=score
        print
    else:
        print "'%s' does not match '%s'" % (reg, s)   

print "   ===== %s =====    === %s ===" % ('RegEx'.center(10),'Score'.center(10))

for key, value in sorted(d.iteritems(), key=lambda (k,v): (v,k)):
    print "   %22s        %5s" % (key, value) 
</snippet></ROW><ROW><id>7533570</id><snippet>Mary had a little lamb</snippet></ROW><ROW><id>7533570</id><snippet>   =====   RegEx    =====    ===   Score    ===
   Mary had a little lamb            0
        Mary.*little lamb            7
            .*little lamb           11
              little lamb           11
      .*[lL]ittle [Ll]amb           15
               \blittle\b           16
                   little           16
                     Mary           18
                  \b\w+mb           18
                     lamb           18
                       .*           22
</snippet></ROW><ROW><id>7533570</id><snippet>.*</snippet></ROW><ROW><id>7533570</id><snippet>.*.*</snippet></ROW><ROW><id>7533570</id><snippet>.*?.*</snippet></ROW><ROW><id>7533570</id><snippet>sre_parse</snippet></ROW><ROW><id>7533570</id><snippet>&gt;&gt;&gt; help(sre_parse)</snippet></ROW><ROW><id>7533570</id><snippet>re</snippet></ROW><ROW><id>7533570</id><snippet>import re
import sre_parse

def ld(a,b):
    "Calculates the Levenshtein distance between a and b."
    n, m = len(a), len(b)
    if n &gt; m:
        # Make sure n &lt;= m, to use O(min(n,m)) space
        a,b = b,a
        n,m = m,n

    current = range(n+1)
    for i in range(1,m+1):
        previous, current = current, [i]+[0]*n
        for j in range(1,n+1):
            add, delete = previous[j]+1, current[j-1]+1
            change = previous[j-1]
            if a[j-1] != b[i-1]:
                change = change + 1
            current[j] = min(add, delete, change)      
    return current[n]

s='Mary had a little lamb'    
d={}
regs=[r'.*', r'Mary', r'lamb', r'little lamb', r'.*little lamb',r'\b\w+mb',
        r'Mary.*little lamb',r'.*[lL]ittle [Ll]amb',r'\blittle\b',s,r'little',
        r'^.*lamb',r'.*.*.*b',r'.*?.*',r'.*\b[lL]ittle\b \b[Ll]amb',
        r'.*\blittle\b \blamb$','^'+s+'$']

for reg in regs:
    m=re.search(reg,s)
    if m:
        ld1=ld(reg,m.group(0))
        ld2=ld(m.group(0),s)
        score=max(ld1,ld2)
        for t, v in sre_parse.parse(reg):
            if t=='at':      # anchor...
                if v=='at_beginning' or 'at_end':
                    score-=1   # ^ or $, adj 1 edit

                if v=='at_boundary': # all other anchors are 2 char
                    score-=2

        d[reg]=score
    else:
        print "'%s' does not match '%s'" % (reg, s)   

print
print "   ===== %s =====    === %s ===" % ('RegEx'.center(15),'Score'.center(10))

for key, value in sorted(d.iteritems(), key=lambda (k,v): (v,k)):
    print "   %27s        %5s" % (key, value) 
</snippet></ROW><ROW><id>7533570</id><snippet>   =====      RegEx      =====    ===   Score    ===
        Mary had a little lamb            0
      ^Mary had a little lamb$            0
          .*\blittle\b \blamb$            6
             Mary.*little lamb            7
     .*\b[lL]ittle\b \b[Ll]amb           10
                    \blittle\b           10
                 .*little lamb           11
                   little lamb           11
           .*[lL]ittle [Ll]amb           15
                       \b\w+mb           15
                        little           16
                       ^.*lamb           17
                          Mary           18
                          lamb           18
                       .*.*.*b           21
                            .*           22
                         .*?.*           22
</snippet></ROW><ROW><id>7533592</id><snippet>@UndefinedVariable</snippet></ROW><ROW><id>7533592</id><snippet>MY_VARIABLE = 'default value'
...

update_default_values() # Go on and override the defaults.
</snippet></ROW><ROW><id>7533592</id><snippet>get_settings('MY_VARIABLE')</snippet></ROW><ROW><id>7533592</id><snippet>from settings import MY_VARIABLE</snippet></ROW><ROW><id>7533592</id><snippet>import settings
settings.MY_VARIABLE 
</snippet></ROW><ROW><id>7533592</id><snippet>get_setting('var')</snippet></ROW><ROW><id>7533648</id><snippet>raise NotImplementedError()</snippet></ROW><ROW><id>7533721</id><snippet>import zipfile
with zipfile.ZipFile("zipfile.zip", "r") as f:
    for name in f.namelist()
        data = f.read(name)
        print name, len(data), repr(data[:10])
</snippet></ROW><ROW><id>7533721</id><snippet>close</snippet></ROW><ROW><id>7534119</id><snippet>{
    "macros": [
        {
            "function": "foo_func", 
            "args": {
                "x": "y", 
                "bar": null
            }, 
            "name": "foo", 
            "iterations": 3
        }, 
        {
            "function": "bar_func", 
            "args": {
                "x": "y", 
                "bar": null
            }, 
            "name": "bar", 
            "iterations": 1
        }
    ]
}
</snippet></ROW><ROW><id>7534119</id><snippet>import json

# Get JSON data from elsewhere and parse it
macros = json.loads(json_data)

# Do something with the macros
for macro in macros:
    run_macro(macro) # For example
</snippet></ROW><ROW><id>7534119</id><snippet>True</snippet></ROW><ROW><id>7534119</id><snippet>False</snippet></ROW><ROW><id>7534119</id><snippet>None</snippet></ROW><ROW><id>7534119</id><snippet>true</snippet></ROW><ROW><id>7534119</id><snippet>false</snippet></ROW><ROW><id>7534119</id><snippet>null</snippet></ROW><ROW><id>7534119</id><snippet>{
    'macros': [
        {
            'args': 
            {
                'bar': None, 
                'x': 'y'
            },
             'function': 'foo_func',
             'iterations': 3,
             'name': 'foo'
        },
        {
            'args': 
            {
                'bar': None, 
                'x': 'y'
            },
             'function': 'bar_func',
             'iterations': 1,
             'name': 'bar'
        }
    ]
}
</snippet></ROW><ROW><id>7534153</id><snippet>
def decode(e):
    """Process an exception for useful feedback"""
    # TODO how to log the fact it is an error, but allow info to be unchanged?
    # TODO now fault not faultstring?
    # The faultType class has faultcode, faultstring and detail
    str = e.fault
    if str == 'com.atlassian.jira.rpc.exception.RemotePermissionException':
        return "This issue does not exist or you don't have permission to view it"
    return e.fault
</snippet></ROW><ROW><id>7534153</id><snippet>
def decode(e):
    """Process an exception for useful feedback"""
    # TODO how to log the fact it is an error, but allow info to be unchanged?
    # TODO now fault not faultstring?
    # The faultType class has faultcode, faultstring and detail
    str = e.faultstring
    if str == 'java.lang.NullPointerException':
        return "Invalid issue key?"
    return e.faultstring

</snippet></ROW><ROW><id>7534177</id><snippet>Meta</snippet></ROW><ROW><id>7534177</id><snippet>class Speech(models.Model):
    location = models.ForeignKey(Location)
    speaker = models.CharField(max_length=100)
    date = models.DateField()

    class Meta:
        unique_together = ('location', 'date')
</snippet></ROW><ROW><id>7534177</id><snippet>get_or_create</snippet></ROW><ROW><id>7534177</id><snippet>speech, new = Speech.objects.get_or_create(
    location=my_location_string,
    date=my_datetime_variable,
)

if new:
    speech.speaker = my_speaker_string
    speech.save()
</snippet></ROW><ROW><id>7534308</id><snippet>_foo.restype = c_void_p
</snippet></ROW><ROW><id>7534308</id><snippet>_bar = CFUNCTYPE(c_longlong, c_void_p).in_dll(_lib, "bar")
</snippet></ROW><ROW><id>7534380</id><snippet>__getitem__</snippet></ROW><ROW><id>7534380</id><snippet>byInt</snippet></ROW><ROW><id>7534380</id><snippet>byString</snippet></ROW><ROW><id>7534454</id><snippet>s1 = subprocess.Popen(['find','/home/bludiescript/tv-shows', '-type','f'], shell=False, stdout=subprocess.PIPE)
s2 = subprocess.Popen(['find','/media/FreeAgent\ GoFlex\ Drive/tobins-media', '-type', 'f'],  stdin=s1.stdout, shell=False, stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>7534454</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; s1 = subprocess.Popen(['find /home/bludiescript/tv-shows', '-type f'], shell=False, stdout=subprocess.PIPE)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/subprocess.py", line 672, in __init__
    errread, errwrite)
  File "/usr/lib/python2.7/subprocess.py", line 1201, in _execute_child
    raise child_exception
OSError: [Errno 2] No such file or directory
&gt;&gt;&gt; s1 = subprocess.Popen(['find','/home/bludiescript/tv-shows', '-type','f'], shell=False, stdout=subprocess.PIPE)
&gt;&gt;&gt; find: `/home/bludiescript/tv-shows': No such file or directory
</snippet></ROW><ROW><id>7534503</id><snippet>(r'^checkstring/(?P&lt;string&gt;.+)/$',views.check_str,name='check str')
</snippet></ROW><ROW><id>7534663</id><snippet>        sel.run_script("$('#upload_file_frame').contents().find('img[alt=\"Humana\"]').click();")
</snippet></ROW><ROW><id>7534680</id><snippet>template</snippet></ROW><ROW><id>7534680</id><snippet>~/.matplotlib/matplotlibrc</snippet></ROW><ROW><id>7534680</id><snippet># backend      : GtkAgg
backend      : template
</snippet></ROW><ROW><id>7534680</id><snippet>matplotlibrc</snippet></ROW><ROW><id>7534680</id><snippet>~/.matplotlib/</snippet></ROW><ROW><id>7534680</id><snippet>&gt;&gt;&gt; import matplotlib
&gt;&gt;&gt; matplotlib.matplotlib_fname()
</snippet></ROW><ROW><id>7534680</id><snippet>In [1]: import matplotlib.pyplot as p

In [2]: p.plot(range(20),range(20))
Out[2]: [&lt;matplotlib.lines.Line2D object at 0xa64932c&gt;]

In [3]: p.show()
</snippet></ROW><ROW><id>7534680</id><snippet>~/.matplotlib/matplotlibrc</snippet></ROW><ROW><id>7534680</id><snippet>GtkAgg</snippet></ROW><ROW><id>7534680</id><snippet>import matplotlib.rcsetup as rcsetup
print(rcsetup.all_backends)
</snippet></ROW><ROW><id>7534680</id><snippet>['GTK', 'GTKAgg', 'GTKCairo', 'FltkAgg', 'MacOSX', 'QtAgg', 'Qt4Agg',
'TkAgg', 'WX', 'WXAgg', 'CocoaAgg', 'agg', 'cairo', 'emf', 'gdk', 'pdf',
'ps', 'svg', 'template']
</snippet></ROW><ROW><id>7534860</id><snippet>fmin</snippet></ROW><ROW><id>7534860</id><snippet>inf</snippet></ROW><ROW><id>7534939</id><snippet>s</snippet></ROW><ROW><id>7534939</id><snippet>m</snippet></ROW><ROW><id>7534939</id><snippet>&gt;&gt;&gt; args, kwargs = eval('m(%s)' % s)
&gt;&gt;&gt; args
('arg1', 'arg2')
&gt;&gt;&gt; kwargs
{'foo': 'bar', 'baz': 'qux'}
</snippet></ROW><ROW><id>7535085</id><snippet>from distutils.core import setup
import py2exe, sys, os
from glob import glob

sys.argv.append('py2exe')
data_files = [("Microsoft.VC90.CRT", glob(r'C:\Program Files\Microsoft Visual Studio 9.0\VC\redist\x86\Microsoft.VC90.CRT\*.*'))]
setup(
    data_files=data_files,
    windows = ["cashflowSim.py"],
    options={
       "py2exe":{"includes":["dumbdbm"]}},
       zipfile = None
)
</snippet></ROW><ROW><id>7535290</id><snippet>headers = ['Name', 'Date', 'Age']
maxColumnWidth=21
headerRow = "|".join( "{k:^{m}}".format(k=k,m=maxColumnWidth) for k in headers )
print(headerRow)
</snippet></ROW><ROW><id>7535290</id><snippet>        Name        |        Date        |        Age         
</snippet></ROW><ROW><id>7535290</id><snippet>maxColumnWidth</snippet></ROW><ROW><id>7535290</id><snippet>{m}</snippet></ROW><ROW><id>7535290</id><snippet>format</snippet></ROW><ROW><id>7535290</id><snippet>join</snippet></ROW><ROW><id>7535541</id><snippet>self</snippet></ROW><ROW><id>7535541</id><snippet>_cmd</snippet></ROW><ROW><id>7535633</id><snippet>button.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)
</snippet></ROW><ROW><id>7535633</id><snippet>button.setMinimumSize(1,1)
</snippet></ROW><ROW><id>7535633</id><snippet>QGtkStyle</snippet></ROW><ROW><id>7535633</id><snippet>dialog.setStyleSheet("QPushButton { min-height: 0px; min-width: 0px }");
</snippet></ROW><ROW><id>7535795</id><snippet>&gt;&gt;&gt; bool(0)
False
</snippet></ROW><ROW><id>7535795</id><snippet>count</snippet></ROW><ROW><id>7535919</id><snippet>start += 1</snippet></ROW><ROW><id>7535919</id><snippet>start</snippet></ROW><ROW><id>7535919</id><snippet>start</snippet></ROW><ROW><id>7535919</id><snippet>start</snippet></ROW><ROW><id>7535919</id><snippet>start</snippet></ROW><ROW><id>7535919</id><snippet>nonlocal</snippet></ROW><ROW><id>7535919</id><snippet>def make_incrementer(start):
    def closure():
        nonlocal start
        while True:
            yield start
            start += 1
    return closure
</snippet></ROW><ROW><id>7535919</id><snippet>global</snippet></ROW><ROW><id>7535919</id><snippet>start</snippet></ROW><ROW><id>7535919</id><snippet>x = start</snippet></ROW><ROW><id>7535919</id><snippet>def make_incrementer(start):
    start = [start]
    def closure():
        while True:
            yield start[0]
            start[0] += 1
    return closure
</snippet></ROW><ROW><id>7535974</id><snippet>a = []
for q in sorted((set(q) for q in sort), key=len, reverse=True):
    if not any(q.issubset(Q) for Q in a):
        a.append(q)
a = [list(q) for q in a] # Back to lists, if you want
</snippet></ROW><ROW><id>7536062</id><snippet>query =  """ INSERT INTO mytable(id, html, other) VALUES(?, ?, ?) """

# ...

cur.execute(query, (1, HTML, "some other info"))
</snippet></ROW><ROW><id>7536105</id><snippet>open</snippet></ROW><ROW><id>7536105</id><snippet>file</snippet></ROW><ROW><id>7536105</id><snippet>with open('/Users/Kyle/Test.txt', 'w') as myFile:
  myFile.write('Hello!')
</snippet></ROW><ROW><id>7536105</id><snippet>with</snippet></ROW><ROW><id>7536145</id><snippet>where</snippet></ROW><ROW><id>7536145</id><snippet>astype</snippet></ROW><ROW><id>7536145</id><snippet>&gt;x = numpy.array([123, 456, "789", "NA", "0", 0])

&gt;x 
array(['123', '456', '789', 'NA', '0', '0'], dtype='|S8')

&gt;where(x != 'NA', x, 0).astype(int)
array([123, 456, 789,   0,   0,   0])
</snippet></ROW><ROW><id>7536161</id><snippet>"//select/option[@value='today']"
</snippet></ROW><ROW><id>7536297</id><snippet>python3</snippet></ROW><ROW><id>7536297</id><snippet>python</snippet></ROW><ROW><id>7536297</id><snippet>$ python -V
Python 2.7.2
$ python3 -V
Python 3.2.2
</snippet></ROW><ROW><id>7536297</id><snippet>python</snippet></ROW><ROW><id>7536297</id><snippet>python3</snippet></ROW><ROW><id>7536302</id><snippet>QGraphicsView</snippet></ROW><ROW><id>7536302</id><snippet>QGraphicsView</snippet></ROW><ROW><id>7536302</id><snippet>from PyQt4.QtCore import *
from PyQt4.QtGui import *

class MyView(QGraphicsView):
    moved = pyqtSignal(QMouseEvent)

    def __init__(self, parent = None):
        super(MyView, self).__init__(parent)

    def mouseMoveEvent(self, event):
        # call the base method to be sure the events are forwarded to the scene
        super(MyView, self).mouseMoveEvent(event)

        print "Mouse Pointer is currently hovering at: ", event.pos()
        self.moved.emit(event)
</snippet></ROW><ROW><id>7536302</id><snippet>QGraphicsView</snippet></ROW><ROW><id>7536541</id><snippet>&gt;&gt;&gt; matrix = [[0] * 3] * 3
&gt;&gt;&gt; [x for x in matrix]
[[0, 0, 0], [0, 0, 0], [0, 0, 0]]
&gt;&gt;&gt; [id(x) for x in matrix]
[32484168, 32484168, 32484168]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>7536541</id><snippet>s * n</snippet></ROW><ROW><id>7536541</id><snippet>&gt;&gt;&gt; m2= [[0] * 3 for i in xrange(5)]
&gt;&gt;&gt; [id(x) for x in m2]
[32498152, 32484808, 32498192, 32499952, 32499872]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>7536541</id><snippet>iter()</snippet></ROW><ROW><id>7536541</id><snippet>&gt;&gt;&gt; nrows = 2; ncols = 4
&gt;&gt;&gt; zeroes = [[0 for j in xrange(ncols)] for i in xrange(nrows)]
&gt;&gt;&gt; zeroes
[[0, 0, 0, 0], [0, 0, 0, 0]]
&gt;&gt;&gt; ap = [[ncols * i + j for j in xrange(ncols)] for i in xrange(nrows)]
&gt;&gt;&gt; ap
[[0, 1, 2, 3], [4, 5, 6, 7]]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>7536671</id><snippet>for p in range (5):
    print p,
</snippet></ROW><ROW><id>7536671</id><snippet>itertools</snippet></ROW><ROW><id>7536671</id><snippet>for prime in itertools.islice(p, 5):
    print prime,
</snippet></ROW><ROW><id>7536671</id><snippet>def primes():
    current = 1
    while True:
        current += 1
        while True:
            for i in xrange(2, current // 2 + 1):
                if current % i == 0:
                    current += 1
                    break
            else:
                break
        yield current
</snippet></ROW><ROW><id>7536802</id><snippet>1 = 'a'</snippet></ROW><ROW><id>7536802</id><snippet>    import random
import time

def get_random_name(gender, seed):
    if(gender == 'male'):
        file = 'male_names.txt'
    elif(gender == 'female'):
        file = 'female_names.txt'

    fid = open(file,'r')
    names = []
    total_names = 0

    for line in fid:
        if(line.lower().startswith(seed)):
            names.append(line)
            total_names = total_names + 1

    random_index = random.randint(0,total_names)
    return names[random_index]

if (__name__ == "__main__"):
    print 'Welcome to Name Database 2.2\n'
    print '1. Boy'
    print '2. Girl'
    bog = raw_input('\nGender: ')
    print 'What should the name start with?'
    print 'A, Ab, Abc, B, Ba, Br, etc...'
    print ''
    l = raw_input('Leter(s): ').lower()

    new_name = ''
    if bog == '1': # Boy
        print get_random_name('male',l)
    elif bog == '2':
        print get_random_name('female',l)
</snippet></ROW><ROW><id>7536802</id><snippet>Welcome to Name Database 2.2

1. Boy
2. Girl

Gender: 2
What should the name start with?
A, Ab, Abc, B, Ba, Br, etc...

Leter(s): br
BRITTA
</snippet></ROW><ROW><id>7537155</id><snippet>f1 = open("/path/to/file1", "r") 
f2 = open("/path/to/file2", "r") 

file1_raw = f1.read()
file2_raw = f1.read()

file1_words = file1_raw.split()
file2_words = file2_raw.split()
</snippet></ROW><ROW><id>7537155</id><snippet>result = set(file1_words).difference(set(file2_words))
</snippet></ROW><ROW><id>7537155</id><snippet>for w in file2_words:
    file1_raw = file1_raw.replace(w, "")
</snippet></ROW><ROW><id>7537466</id><snippet>set</snippet></ROW><ROW><id>7537466</id><snippet>{% set count = 1 %}
{% for i in p %}
  {{ count }}
  {% set count = count + 1 %}
{% endfor %}
</snippet></ROW><ROW><id>7537466</id><snippet>loop.index</snippet></ROW><ROW><id>7537466</id><snippet>{% for i in p %}
  {{ loop.index }}
{% endfor %}
</snippet></ROW><ROW><id>7537838</id><snippet>&lt;value/&gt;</snippet></ROW><ROW><id>7537838</id><snippet>#!/usr/bin/env python
import xml.etree.cElementTree as etree

tree = etree.parse('scheme.xml')
for value in tree.getiterator(tag='value'):
    print value.get('code'), value.text
</snippet></ROW><ROW><id>7537838</id><snippet>def getelements(filename, tag):
    context = iter(etree.iterparse(filename, events=('start', 'end')))
    _, root = next(context) # get root element
    for event, elem in context:
        if event == 'end' and elem.tag == tag:
            yield elem
            root.clear() # free memory

for elem in getelements('scheme.xml', 'value'):
    print elem.get('code'), elem.text
</snippet></ROW><ROW><id>7537838</id><snippet>1 Alternative 1
2 Alternative 2
3 Alternative 3
6 Alternative 4
</snippet></ROW><ROW><id>7537960</id><snippet>input</snippet></ROW><ROW><id>7537960</id><snippet>for line in input</snippet></ROW><ROW><id>7537960</id><snippet>'lucas'</snippet></ROW><ROW><id>7537960</id><snippet>tableInput</snippet></ROW><ROW><id>7537960</id><snippet>for line in input.split('\n'):
    ...
</snippet></ROW><ROW><id>7537960</id><snippet>td.parent</snippet></ROW><ROW><id>7537960</id><snippet>td.parent.parent</snippet></ROW><ROW><id>7537960</id><snippet>V</snippet></ROW><ROW><id>7537960</id><snippet>X</snippet></ROW><ROW><id>7537960</id><snippet>tr= soup.find(text= re.compile('lucas')).parent.parent
vorx= tr.findAll('td')[1].find('span').string
</snippet></ROW><ROW><id>7537994</id><snippet>&gt;&gt;&gt; from appscript import *
&gt;&gt;&gt; map(lambda x: x.title(), app('Google Chrome').windows[0].tabs())
[u'Stack Overflow', u'Google']
</snippet></ROW><ROW><id>7538199</id><snippet>&gt;&gt;&gt; import BeautifulSoup
&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; html = urllib2.urlopen('http://wolk.vlan77.be/~gerben')
&gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup(html)
&gt;&gt;&gt; print soup.find('td', text=lambda data: data.string and 'lucas' in data.string)
lucas.vlan77.be
</snippet></ROW><ROW><id>7538321</id><snippet>easy_install pkgname</snippet></ROW><ROW><id>7538321</id><snippet>myproject-init-hg</snippet></ROW><ROW><id>7538321</id><snippet>myproject-init-hg</snippet></ROW><ROW><id>7538391</id><snippet>def someFunction(settings=settings):
    …  # Unmodified code ('settings' refers to the local 'settings' variable)
</snippet></ROW><ROW><id>7538391</id><snippet>someFunction()</snippet></ROW><ROW><id>7538391</id><snippet>someFunction(application2_settings)  # Explicit settings sent by Application 2
</snippet></ROW><ROW><id>7538391</id><snippet>someFunction()</snippet></ROW><ROW><id>7538460</id><snippet>def raise_error():
    raise IOError('Error Message')

print('Before Call.')

try:
    raise_error()
except IOError as error:
    print(error)

print('After Call.')
</snippet></ROW><ROW><id>7538460</id><snippet>def connect_to_client():
    ...
    if time_since_client_responded &gt; 5000:
        raise ClientTimeoutError(client_name+" timed out.")

...
try:
    connect_to_client("server:22")
except ClientTimeoutError as error:
    print(error)
    sys.exit(1)
</snippet></ROW><ROW><id>7538853</id><snippet>import sys
def noInf(f):
  def wrapped(*args, **kwargs):
    res = f(*args, **kwargs)
    if res == float('inf'):
      return sys.float_info.max
    return res
  return wrapped

@noInf
def myMult(x, y):
  return x*y

print(myMult(sys.float_info.max, 2)) # prints 1.79769313486e+308
</snippet></ROW><ROW><id>7538905</id><snippet>import matplotlib.pyplot as plt
import numpy as np

h = plt.figure()
plt.plot(range(1,11), range(1,11), gid='dummy')
my_legend = plt.legend(['a line'])
plt.title('myfigure')  # not sure if this is the same as set(h, 'name', 'myfigure')
my_axis = plt.gca()
my_axis.set_xlim(0,5)
for p in set(h.findobj(lambda x: x.get_gid()=='dummy')):
    p.set_ydata(np.ones(10)*10.0)
plt.show()
</snippet></ROW><ROW><id>7538905</id><snippet>gid</snippet></ROW><ROW><id>7538905</id><snippet>plt.plot</snippet></ROW><ROW><id>7538905</id><snippet>gid</snippet></ROW><ROW><id>7538905</id><snippet>id</snippet></ROW><ROW><id>7538905</id><snippet>line2d</snippet></ROW><ROW><id>7538905</id><snippet>patch</snippet></ROW><ROW><id>7538905</id><snippet>text</snippet></ROW><ROW><id>7538929</id><snippet>(r'^friends/(?P&lt;type&gt;requests|offers)', 'app.views.pendingFriends'),
</snippet></ROW><ROW><id>7538929</id><snippet>(r'^friends/(?P&lt;type&gt;requests)', 'app.views.pendingFriends'),
(r'^friends/(?P&lt;type&gt;offers)', 'app.views.pendingFriends'),
</snippet></ROW><ROW><id>7539008</id><snippet>a</snippet></ROW><ROW><id>7539008</id><snippet>a</snippet></ROW><ROW><id>7539008</id><snippet>int32</snippet></ROW><ROW><id>7539008</id><snippet>np.bincount</snippet></ROW><ROW><id>7539008</id><snippet>import numpy as np
a = [7,3,5,7,5,7]
b = [0.2,0.1,0.3,0.1,0.1,0.2]

x=np.bincount(a,weights=b)
print(x)
# [ 0.   0.   0.   0.1  0.   0.4  0.   0.5]

print(x[[7,3,5]])
# [ 0.5  0.1  0.4]
</snippet></ROW><ROW><id>7539008</id><snippet>np.unique(a)</snippet></ROW><ROW><id>7539008</id><snippet>[3 5 7]</snippet></ROW><ROW><id>7539008</id><snippet>print(x[np.unique(a)])
# [ 0.1  0.4  0.5]
</snippet></ROW><ROW><id>7539008</id><snippet>np.bincount</snippet></ROW><ROW><id>7539008</id><snippet>a</snippet></ROW><ROW><id>7539008</id><snippet>a</snippet></ROW><ROW><id>7539008</id><snippet>bincount</snippet></ROW><ROW><id>7539008</id><snippet>8*(2**31-1)</snippet></ROW><ROW><id>7539008</id><snippet>np.bincount</snippet></ROW><ROW><id>7539008</id><snippet>a</snippet></ROW><ROW><id>7539008</id><snippet>a</snippet></ROW><ROW><id>7539008</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>7539046</id><snippet>if __name__ == "__main__":</snippet></ROW><ROW><id>7539046</id><snippet>def buildConnectionString(params):
    """Build a connection string from a dictionary of parameters.
    Returns string. """
    return ";".join(["%s=%s" % (k,v) for k,v in params.items()])

if __name__ == "__main__":
    myParams = {"server":"mpligrim",\
        "database":"master",\
        "uid":"sa",\
        "pwd":"secret" }

    print(buildConnectionString(myParams))
</snippet></ROW><ROW><id>7539046</id><snippet>F5</snippet></ROW><ROW><id>7539127</id><snippet>from collections import defaultdict
d=defaultdict(int, zip(range(1,10),range(50,61)))
</snippet></ROW><ROW><id>7539151</id><snippet>fileout = open('out.txt', 'w')
list = ['a', 'b', 'c', 'd']
fileout.write('\n'.join(list))
</snippet></ROW><ROW><id>7539263</id><snippet>&gt; dat$incrmt &lt;- dat$V1 %/% 100
&gt; dat
     V1       V2 incrmt
1  5380 30.07383     53
2  5390 30.87000     53
3  5393  0.07383     53
4  5404  6.00000     54
5  5428 30.07383     54
6  5437  1.00000     54
7  5440  9.00000     54
8  5443 30.07383     54
9  5459  6.00000     54
10 5463 30.07383     54
11 5480  7.00000     54
12 5521 30.07383     55
13 5538  0.00000     55
14 5584 20.00000     55
15 5673 30.07383     56
16 5720 30.07383     57
17 5841  3.00000     58
18 5880 30.07383     58
19 5913  4.00000     59
20 5958 30.07383     59

&gt; with(dat, tapply(V2, incrmt, mean, na.rm=TRUE))
      53       54       55       56       57       58       59 
20.33922 14.90269 16.69128 30.07383 30.07383 16.53692 17.03692 
</snippet></ROW><ROW><id>7539263</id><snippet>    &gt; with(dat, tapply(V2, V1 %/% 100, mean, na.rm=TRUE))
      53       54       55       56       57       58       59 
20.33922 14.90269 16.69128 30.07383 30.07383 16.53692 17.03692 
</snippet></ROW><ROW><id>7539263</id><snippet>by100MeanV2 &lt;- with(dat, tapply(V2, V1 %/% 100, mean, na.rm=TRUE))
</snippet></ROW><ROW><id>7539264</id><snippet>random.sample()</snippet></ROW><ROW><id>7539264</id><snippet>import random

pool = set(["foo", "bar", "baz", "123", "456", "789"]) # your 240 elements here
slen = len(pool) / 3 # we need 3 subsets
set1 = set(random.sample(pool, slen)) # 1st random subset
pool -= set1
set2 = set(random.sample(pool, slen)) # 2nd random subset
pool -= set2
set3 = pool # 3rd random subset
</snippet></ROW><ROW><id>7539449</id><snippet>virtualenvwrapper.sh</snippet></ROW><ROW><id>7539449</id><snippet>workon</snippet></ROW><ROW><id>7539449</id><snippet>venv-run.sh</snippet></ROW><ROW><id>7539449</id><snippet>/usr/bin</snippet></ROW><ROW><id>7539449</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>7539449</id><snippet>PATH</snippet></ROW><ROW><id>7539449</id><snippet>#!/bin/sh
# if virtualenvwrapper.sh is in your PATH (i.e. installed with pip)
source `which virtualenvwrapper.sh`
#source /path/to/virtualenvwrapper.sh # if it's not in your PATH
workon $1
python $2
deactivate
</snippet></ROW><ROW><id>7539449</id><snippet>venv-run.sh my_virtualenv /path/to/script.py</snippet></ROW><ROW><id>7539500</id><snippet>stepTwo = Tkinter.LabelFrame(form, text=" 2. Enter Table Details: ")
stepTwo.grid(row=2, columnspan=7, sticky='WE', \
             padx=5, pady=5, ipadx=5, ipady=5)
</snippet></ROW><ROW><id>7539589</id><snippet>sorted(a) == sorted(b)
</snippet></ROW><ROW><id>7540116</id><snippet>name=name[len(filter(name.startswith,prefixes+[''])[0]):]
</snippet></ROW><ROW><id>7540299</id><snippet>client_receiver.RCVTIMEO = 1000 # in milliseconds
</snippet></ROW><ROW><id>7540299</id><snippet>poller = zmq.Poller()
poller.register(client_receiver, zmq.POLLIN) # POLLIN for recv, POLLOUT for send
</snippet></ROW><ROW><id>7540299</id><snippet>poller.poll()</snippet></ROW><ROW><id>7540299</id><snippet>evts = poller.poll(1000) # wait *up to* one second for a message to arrive.
</snippet></ROW><ROW><id>7540299</id><snippet>evts</snippet></ROW><ROW><id>7540299</id><snippet>zmq.POLLOUT</snippet></ROW><ROW><id>7540299</id><snippet>worker.send(msg, zmq.NOBLOCK)
</snippet></ROW><ROW><id>7540622</id><snippet>import commctrl, win32con
from ctypes import *

# represent the TBBUTTON structure
# note this is 32 bit, 64 bit padds 4 more reserved bytes
class TBBUTTON(Structure):
    _pack_ = 1
    _fields_ = [
        ('iBitmap', c_int),
        ('idCommand', c_int),
        ('fsState', c_ubyte),
        ('fsStyle', c_ubyte),
        ('bReserved', c_ubyte * 2),
        ('dwData', c_ulong),
        ('iString', c_int),
    ]

# get the handle to the sytem tray
hWnd = windll.user32.FindWindowA("Shell_TrayWnd", None)
hWnd = windll.user32.FindWindowExA(hWnd, None, "TrayNotifyWnd", None)
hWnd = windll.user32.FindWindowExA(hWnd, None, "SysPager", None)
hWnd = windll.user32.FindWindowExA(hWnd, None, "ToolbarWindow32", None)

# get the count of icons in the tray
numIcons = windll.user32.SendMessageA(hWnd, commctrl.TB_BUTTONCOUNT, 0, 0)

# allocate memory within the system tray
pid = c_ulong();
windll.user32.GetWindowThreadProcessId(hWnd, byref(pid))
hProcess = windll.kernel32.OpenProcess(win32con.PROCESS_ALL_ACCESS, 0, pid)
lpPointer = windll.kernel32.VirtualAllocEx(hProcess, 0, sizeof(TBBUTTON), win32con.MEM_COMMIT, win32con.PAGE_READWRITE)

# init our tool bar button and a handle to it
tbButton = TBBUTTON()
butHandle = c_int()

for i in range(numIcons):
    # query the button into the memory we allocated
    windll.user32.SendMessageA(hWnd, commctrl.TB_GETBUTTON, i, lpPointer)
    # read the memory into our button struct
    windll.kernel32.ReadProcessMemory(hProcess, lpPointer, addressof(tbButton), 20, None)
    # read the 1st 4 bytes from the dwData into the butHandle var
    # these first 4 bytes contain the handle to the button
    windll.kernel32.ReadProcessMemory(hProcess, tbButton.dwData, addressof(butHandle), 4, None)

    # get the pid that created the button
    butPid = c_ulong()
    windll.user32.GetWindowThreadProcessId(butHandle, byref(butPid))

    # i leave it to you to get the process from the pid
    # that should be trivial...
    print butPid
</snippet></ROW><ROW><id>7540829</id><snippet>names = mylist[0::3]
ages = mylist[1::3]
nationalities = mylist[2::3]
</snippet></ROW><ROW><id>7540829</id><snippet>for name in names:
    print name
etc.
</snippet></ROW><ROW><id>7541323</id><snippet>glob.glob</snippet></ROW><ROW><id>7541323</id><snippet>fnmatch.fnmatch</snippet></ROW><ROW><id>7541323</id><snippet>os.walk</snippet></ROW><ROW><id>7541323</id><snippet>for filename in filenames:
    if fnmatch.fnmatch(filename, search):
        print os.path.join([dirname, filename])
</snippet></ROW><ROW><id>7541324</id><snippet>sys.setrecursionlimit()</snippet></ROW><ROW><id>7541324</id><snippet>sys.getrecursionlimit()</snippet></ROW><ROW><id>7541324</id><snippet>PyPy 1.6.0:

&gt;&gt;&gt;&gt; sys.getrecursionlimit()
100

&gt;&gt;&gt;&gt; def infinite(level=0):
....     print level
....     return infinite(level+1)
.... 

&gt;&gt;&gt; infinite()
&lt;snip&gt;
1010
Traceback (most recent call last):
  File "&lt;console&gt;", line 2, in infinite
RuntimeError: maximum recursion depth exceeded

&gt;&gt;&gt; sys.setrecursionlimit(sys.maxint)

&gt;&gt;&gt; infinite()
&lt;snip&gt;
9769
zsh: segmentation fault  pypy
</snippet></ROW><ROW><id>7541731</id><snippet>import multiprocessing as mp
import logging
import Queue
import time

logger=mp.log_to_stderr(logging.DEBUG)  # or, 
# logger=mp.log_to_stderr(logging.WARN) # uncomment this to silence debug and info messages

def worker(url_queue,seen):
    while True:
        url=url_queue.get()
        if url not in seen:
            logger.info('downloading {u}'.format(u=url))
            seen[url]=True
            # Replace this with code to dowload url
            # urllib2.open(...)
            time.sleep(0.5)
            content=url
            logger.debug('parsing {c}'.format(c=content))
            # replace this with code that finds interesting links and
            # puts them in url_queue
            for i in range(3):
                if content&lt;5:
                    u=2*content+i-1
                    logger.debug('adding {u} to url_queue'.format(u=u))
                    time.sleep(0.5)
                    url_queue.put(u)
        else:
            logger.debug('skipping {u}; seen before'.format(u=url))
        url_queue.task_done()

if __name__=='__main__':
    num_workers=4
    url_queue=mp.JoinableQueue()
    manager=mp.Manager()
    seen=manager.dict()

    # prime the url queue with at least one url
    url_queue.put(1)
    downloaders=[mp.Process(target=worker,args=(url_queue,seen))
                 for i in range(num_workers)]
    for p in downloaders:
        p.daemon=True
        p.start()
    url_queue.join()
</snippet></ROW><ROW><id>7541731</id><snippet>JoinableQueue</snippet></ROW><ROW><id>7541731</id><snippet>url_queue</snippet></ROW><ROW><id>7541731</id><snippet>url_queue</snippet></ROW><ROW><id>7541731</id><snippet>url_queue</snippet></ROW><ROW><id>7541731</id><snippet>url_queue.task_done()</snippet></ROW><ROW><id>7541731</id><snippet>url_queue.join()</snippet></ROW><ROW><id>7541731</id><snippet>task_done</snippet></ROW><ROW><id>7541731</id><snippet>url_queue</snippet></ROW><ROW><id>7541731</id><snippet>daemon</snippet></ROW><ROW><id>7541739</id><snippet>text_file.readline().rstrip() + "0123456789"
</snippet></ROW><ROW><id>7541891</id><snippet>lxml</snippet></ROW><ROW><id>7541891</id><snippet>from lxml.html.clean import Cleaner

def clean_word_text(text):
    # The only thing I need Cleaner for is to clear out the contents of
    # &lt;style&gt;...&lt;/style&gt; tags
    cleaner = Cleaner(style = True)
    text = cleaner.clean_html(text)
</snippet></ROW><ROW><id>7541952</id><snippet>range</snippet></ROW><ROW><id>7541952</id><snippet>for i in range(1940,2005):
   print i
</snippet></ROW><ROW><id>7542096</id><snippet>ls</snippet></ROW><ROW><id>7542096</id><snippet>&gt;&gt;&gt; fnmatch.fnmatch("qxx", "[a-z]xx")
True
&gt;&gt;&gt; fnmatch.fnmatch("abc", "a??")
True
&gt;&gt;&gt; fnmatch.fnmatch("abcdef", "a*f")
True
&gt;&gt;&gt; fnmatch.fnmatch("abcdef", "a*[f-k]")
True
</snippet></ROW><ROW><id>7542252</id><snippet>command</snippet></ROW><ROW><id>7542252</id><snippet>lambda the_year=the_year: year_seter(the_year)
</snippet></ROW><ROW><id>7542252</id><snippet>the_year</snippet></ROW><ROW><id>7542252</id><snippet>lambda : year_seter(the_year)
</snippet></ROW><ROW><id>7542252</id><snippet>the_year</snippet></ROW><ROW><id>7542252</id><snippet>for-loop</snippet></ROW><ROW><id>7542252</id><snippet>the_year</snippet></ROW><ROW><id>7542252</id><snippet>the_year</snippet></ROW><ROW><id>7542252</id><snippet>the_year</snippet></ROW><ROW><id>7542252</id><snippet>lambda</snippet></ROW><ROW><id>7542252</id><snippet>the_year</snippet></ROW><ROW><id>7542252</id><snippet>the_year</snippet></ROW><ROW><id>7542252</id><snippet>the_year</snippet></ROW><ROW><id>7542252</id><snippet>year_seter</snippet></ROW><ROW><id>7542252</id><snippet>lambda the_year=the_year: year.set(the_year)
</snippet></ROW><ROW><id>7542252</id><snippet>list_of_years = range(1995,2012)</snippet></ROW><ROW><id>7542422</id><snippet>getattr(__import__(module_name), class_name)
</snippet></ROW><ROW><id>7542422</id><snippet>Bot</snippet></ROW><ROW><id>7542422</id><snippet>module = __import__(module_name)
clazz = None
for attribute_name in dir(module):
    attribute = getattr(module, attribute_name)
    if attribute_name.endswith('Bot') and callable(attribute):
        clazz = attribute
        break
</snippet></ROW><ROW><id>7542446</id><snippet>with open('years.txt') as year:
    years = [yr.strip() for yr in year]
with open('names.txt') as names:
    for name in names:
        name = name.strip()
        for year in years:
            print("%s%s" % (name, year))
</snippet></ROW><ROW><id>7542449</id><snippet>[t for t in f.read() if t.isalpha()]</snippet></ROW><ROW><id>7542449</id><snippet>f.read()</snippet></ROW><ROW><id>7542449</id><snippet>if</snippet></ROW><ROW><id>7542449</id><snippet>for</snippet></ROW><ROW><id>7542449</id><snippet>t</snippet></ROW><ROW><id>7542449</id><snippet>t</snippet></ROW><ROW><id>7542449</id><snippet>t*2 for t ...</snippet></ROW><ROW><id>7542531</id><snippet>db.letter.opening.widget = SQLFORM.widgets.autocomplete(request, db.receiver_profile.opening, id_field=db.receiver.id)
</snippet></ROW><ROW><id>7542531</id><snippet>db.letter.opening.widget = SQLFORM.widgets.autocomplete(request, db.receiver_profile.opening, id_field=db.receiver.id,db=db(db.receiver.user_id==auth.user_id))
</snippet></ROW><ROW><id>7542881</id><snippet>forms.Form</snippet></ROW><ROW><id>7542881</id><snippet>forms.ModelForm</snippet></ROW><ROW><id>7542881</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>7542881</id><snippet>from django import forms

class FormA(forms.ModelForm):
    [...]

class FormB(forms.ModelForm):
    [...]
</snippet></ROW><ROW><id>7542881</id><snippet>&lt;form method="post" action="/path/to/view/"&gt;
    {% csrf_token %}

    {{ form_a }}
    {{ form_b }}

    &lt;input type="submit" value="Submit Form" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>7542881</id><snippet>from django.db import transaction
from django.http import HttpResponseRedirect
from django.template.response import TemplateResponse
from myapp.forms import FormA, FormB

@transaction.commit_on_success
def present_forms_to_user(request):
    if request.method == 'POST':
        form_a = FormA(request.POST)
        form_b = FormB(request.POST)

        if form_a.is_valid() and form_b.is_valid():
            # processing code

            return HttpResponseRedirect('/path/to/thank/you/page/')
    else:
        form_a = FormA()
        form_b = FormB()

    return TemplateResponse(request, 'templates/eggs.html', {
        'form_a': form_a,
        'form_b': form_b,
    })
</snippet></ROW><ROW><id>7542945</id><snippet>\\n</snippet></ROW><ROW><id>7542945</id><snippet>echo</snippet></ROW><ROW><id>7542945</id><snippet>echo</snippet></ROW><ROW><id>7542945</id><snippet>read</snippet></ROW><ROW><id>7542945</id><snippet>osascript</snippet></ROW><ROW><id>7542945</id><snippet>$EXIT</snippet></ROW><ROW><id>7542945</id><snippet>ls</snippet></ROW><ROW><id>7542945</id><snippet>throwaway</snippet></ROW><ROW><id>7542945</id><snippet>bashCommand</snippet></ROW><ROW><id>7542945</id><snippet>TypeError</snippet></ROW><ROW><id>7542945</id><snippet>communicate()</snippet></ROW><ROW><id>7542970</id><snippet>dir(readline)</snippet></ROW><ROW><id>7542970</id><snippet>get_completer_delims()</snippet></ROW><ROW><id>7542970</id><snippet>set_completer_delims()</snippet></ROW><ROW><id>7542970</id><snippet>readline</snippet></ROW><ROW><id>7542970</id><snippet>set_completer_delims(...)
    set_completer_delims(string) -&gt; None
    set the readline word delimiters for tab-completion
</snippet></ROW><ROW><id>7542982</id><snippet>multiprocessing</snippet></ROW><ROW><id>7542982</id><snippet>celery</snippet></ROW><ROW><id>7542982</id><snippet>mpi4py</snippet></ROW><ROW><id>7542982</id><snippet>numpy</snippet></ROW><ROW><id>7542982</id><snippet>ctypes</snippet></ROW><ROW><id>7543096</id><snippet>return[^$]+
</snippet></ROW><ROW><id>7543096</id><snippet>return.+$
</snippet></ROW><ROW><id>7543217</id><snippet>timedelta</snippet></ROW><ROW><id>7543518</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 2*np.pi, 10)
y = np.sin(x)

plt.figure()
plt.quiver(x[:-1], y[:-1], x[1:]-x[:-1], y[1:]-y[:-1], scale_units='xy', angles='xy', scale=1)

plt.show()
</snippet></ROW><ROW><id>7543851</id><snippet>% python3.2 -m http.server 8000
Serving HTTP on 0.0.0.0 port 8000 ...
</snippet></ROW><ROW><id>7543951</id><snippet>return unichr(random.choice((0x300, 0x2000)) + random.randint(0, 0xff))
</snippet></ROW><ROW><id>7543957</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>7543957</id><snippet>from collections import defaultdict
from itertools import chain

merged = defaultdict(int)

for key, value in chain(list1, list2):
    merged[key] += value
</snippet></ROW><ROW><id>7543957</id><snippet>list</snippet></ROW><ROW><id>7543957</id><snippet>tuple</snippet></ROW><ROW><id>7543957</id><snippet>list3 = merged.items()
</snippet></ROW><ROW><id>7543957</id><snippet>chain</snippet></ROW><ROW><id>7543957</id><snippet>from collections import defaultdict

merged = defaultdict(int)

merged.update(list1)

for key, value in list2:
    merged[key] += value
</snippet></ROW><ROW><id>7543957</id><snippet>from collections import Counter

merged = Counter(dict(list1))
merged.update(dict(list2))
</snippet></ROW><ROW><id>7543957</id><snippet>dict</snippet></ROW><ROW><id>7544289</id><snippet>?:</snippet></ROW><ROW><id>7544324</id><snippet>rain</snippet></ROW><ROW><id>7544324</id><snippet>snow</snippet></ROW><ROW><id>7544324</id><snippet>niceday</snippet></ROW><ROW><id>7544324</id><snippet>rain = 0
snow = 1
M[rain, snow]
</snippet></ROW><ROW><id>7544575</id><snippet>[' ', ' ', '  ', ' ', ' ', ' ']
</snippet></ROW><ROW><id>7544575</id><snippet>\W+</snippet></ROW><ROW><id>7544575</id><snippet>W</snippet></ROW><ROW><id>7544575</id><snippet>\W+(?!potter)</snippet></ROW><ROW><id>7544575</id><snippet>pat = r'\b\w+\b(?!\W+potter\b)'
</snippet></ROW><ROW><id>7544575</id><snippet>\b</snippet></ROW><ROW><id>7544575</id><snippet>r'...'</snippet></ROW><ROW><id>7544575</id><snippet>\b</snippet></ROW><ROW><id>7544582</id><snippet>import datetime

self.response.set_cookie('name', 'value', expires=datetime.datetime.now(), path='/', domain='example.com')
</snippet></ROW><ROW><id>7544582</id><snippet>print (datetime.datetime.now() + datetime.timedelta(weeks=4)).strftime('%a, %d %b %Y %H:%M:%S GMT') 
</snippet></ROW><ROW><id>7544636</id><snippet>&gt;&gt;&gt; a = 11111
&gt;&gt;&gt; b = 11111
&gt;&gt;&gt; id(a)
40351656
&gt;&gt;&gt; id(b)
40351704
</snippet></ROW><ROW><id>7544636</id><snippet>&gt;&gt;&gt; sys.getrefcount(1)
73
</snippet></ROW><ROW><id>7544636</id><snippet>&gt;&gt;&gt; sys.getrefcount(object())
1
</snippet></ROW><ROW><id>7544636</id><snippet>print sys.getrefcount('foo1111111111111' + 'bar1111111111111') #1
print sys.getrefcount(111111111111 + 2222222222222)            #2
print sys.getrefcount('foobar333333333333333333')              #3
</snippet></ROW><ROW><id>7544732</id><snippet>set_yticklabels</snippet></ROW><ROW><id>7544732</id><snippet>set_ticklabels</snippet></ROW><ROW><id>7544732</id><snippet>ax.w_yaxis.set_ticklabels([])
</snippet></ROW><ROW><id>7545025</id><snippet>.1</snippet></ROW><ROW><id>7545025</id><snippet>&gt;&gt;&gt; .1
</snippet></ROW><ROW><id>7545025</id><snippet>.1</snippet></ROW><ROW><id>7545025</id><snippet>.3</snippet></ROW><ROW><id>7545025</id><snippet>&gt;&gt;&gt; .2 + .1
0.30000000000000004
</snippet></ROW><ROW><id>7545025</id><snippet>.2</snippet></ROW><ROW><id>7545025</id><snippet>.1</snippet></ROW><ROW><id>7545025</id><snippet>&gt;&gt;&gt; .2 + .1 == .3
False
</snippet></ROW><ROW><id>7545214</id><snippet>#include &lt;slpublic.h&gt;
#pragma comment(lib,"Slwga.lib")

bool IsWindowsGenuine()
{
    GUID uid;
    RPC_WSTR rpc=(RPC_WSTR)_T("55c92734-d682-4d71-983e-d6ec3f16059f");
    UuidFromString(rpc,&amp;uid);
    SL_GENUINE_STATE state;
    SLIsGenuineLocal(&amp;uid,&amp;state,NULL);
    return state == SL_GENUINE_STATE::SL_GEN_STATE_IS_GENUINE;
}
</snippet></ROW><ROW><id>7545257</id><snippet>print</snippet></ROW><ROW><id>7545257</id><snippet>sys.last_value</snippet></ROW><ROW><id>7545418</id><snippet>p.start()</snippet></ROW><ROW><id>7545418</id><snippet>p</snippet></ROW><ROW><id>7545418</id><snippet>p</snippet></ROW><ROW><id>7545418</id><snippet>Worker</snippet></ROW><ROW><id>7545418</id><snippet>p.value</snippet></ROW><ROW><id>7545418</id><snippet>p.value</snippet></ROW><ROW><id>7545418</id><snippet>None</snippet></ROW><ROW><id>7545418</id><snippet>import multiprocessing as mp

class Worker(mp.Process):
    def __init__(self):
        print "Init"
        mp.Process.__init__(self)
        self.num = mp.Value('d', 0.0)

    def run(self):
        print "Running"
        self.num.value = 1

p = Worker()
p.start()
p.join()
print p.num.value
</snippet></ROW><ROW><id>7545418</id><snippet>mp.Value</snippet></ROW><ROW><id>7545418</id><snippet>0.0</snippet></ROW><ROW><id>7545418</id><snippet>None</snippet></ROW><ROW><id>7545444</id><snippet>Set2D</snippet></ROW><ROW><id>7545444</id><snippet>N</snippet></ROW><ROW><id>7545444</id><snippet>N</snippet></ROW><ROW><id>7545444</id><snippet>double</snippet></ROW><ROW><id>7545444</id><snippet>CV_32FC1</snippet></ROW><ROW><id>7545444</id><snippet>Set2D(image, (value, 0, 0, 0))</snippet></ROW><ROW><id>7545547</id><snippet>folder</snippet></ROW><ROW><id>7545547</id><snippet>os.walk()</snippet></ROW><ROW><id>7545547</id><snippet>&gt;&gt;&gt; for a,b,c in os.walk("."):
...  print b
...  break
...
['DLLs', 'Doc', 'include', 'Lib', 'libs', 'tcl', 'Tools']
&gt;&gt;&gt; for a,b,c in os.walk(u"."):
...  print b
...  break
...
[u'DLLs', u'Doc', u'include', u'Lib', u'libs', u'tcl', u'Tools']
</snippet></ROW><ROW><id>7545607</id><snippet>initial</snippet></ROW><ROW><id>7545607</id><snippet>form = YourForm(..., initial={'your_field': request.META['REMOTE_ADDR'])
</snippet></ROW><ROW><id>7545607</id><snippet>request</snippet></ROW><ROW><id>7545607</id><snippet>request=request</snippet></ROW><ROW><id>7545607</id><snippet>class YourForm(forms.Form):
    def __init__(self, *args, **kwargs):
        self.request = kwargs.pop('request')
        super(YourForm, self).__init__(*args, **kwargs)

    # ... use self.request in clean etc
</snippet></ROW><ROW><id>7545640</id><snippet>daymenu</snippet></ROW><ROW><id>7545640</id><snippet>def make_daymenu():
    daymenu.delete(0,31) 
    for the_day in list_of_days:
        daymenu.add_command(label=the_day, command=lambda : day_setter(the_day))
    window.config(menu=menubar)
</snippet></ROW><ROW><id>7545647</id><snippet>sys.stdout.write("a\b")
</snippet></ROW><ROW><id>7545799</id><snippet>reactor.connectTCP</snippet></ROW><ROW><id>7545799</id><snippet>ReverseProxyResource</snippet></ROW><ROW><id>7545941</id><snippet>http://www.cotodigital.com.ar/l.asp?cat=1097&amp;id=1097</snippet></ROW><ROW><id>7545941</id><snippet>http://www.cotodigital.com.ar/default.asp</snippet></ROW><ROW><id>7545950</id><snippet>merge(a,b)</snippet></ROW><ROW><id>7545950</id><snippet>merge</snippet></ROW><ROW><id>7545950</id><snippet>merge</snippet></ROW><ROW><id>7545950</id><snippet>a</snippet></ROW><ROW><id>7545950</id><snippet>b</snippet></ROW><ROW><id>7545950</id><snippet>list(a)</snippet></ROW><ROW><id>7545950</id><snippet>a</snippet></ROW><ROW><id>7545950</id><snippet>merge(a, b)</snippet></ROW><ROW><id>7545950</id><snippet>b</snippet></ROW><ROW><id>7546024</id><snippet>[(elem.text,elem.getparent().xpath('values/value/text()')) 
 for elem in tree.getiterator(tag='name') if elem.text.startswith('v_')]
</snippet></ROW><ROW><id>7546024</id><snippet>[('v_683', []),
 ('v_684', []),
 ('v_684',
  ['Alternative 1', 'Alternative 2', 'Alternative 3', 'Alternative 4'])]
</snippet></ROW><ROW><id>7546024</id><snippet>elem</snippet></ROW><ROW><id>7546024</id><snippet>name</snippet></ROW><ROW><id>7546024</id><snippet>variable</snippet></ROW><ROW><id>7546024</id><snippet>values</snippet></ROW><ROW><id>7546024</id><snippet>value</snippet></ROW><ROW><id>7546024</id><snippet>getparent</snippet></ROW><ROW><id>7546024</id><snippet>[(elem.text,elem.xpath('following-sibling::values/value/text()')) for elem in tree.getiterator(tag='name')  if elem.text.startswith('v_')]
</snippet></ROW><ROW><id>7546024</id><snippet>following-sibling::</snippet></ROW><ROW><id>7546024</id><snippet>xpath</snippet></ROW><ROW><id>7546024</id><snippet>name</snippet></ROW><ROW><id>7546024</id><snippet>following-sibling::values</snippet></ROW><ROW><id>7546024</id><snippet>xpath</snippet></ROW><ROW><id>7546024</id><snippet>name</snippet></ROW><ROW><id>7546024</id><snippet>values</snippet></ROW><ROW><id>7546176</id><snippet>resize</snippet></ROW><ROW><id>7546176</id><snippet>import scipy as sci
n=3
time = sci.zeros((n,1), 'double')
print(time)
# [[ 0.]
#  [ 0.]
#  [ 0.]]

time.resize((n+1,2))
print(time)
# [[ 0.  0.]
#  [ 0.  0.]
#  [ 0.  0.]
#  [ 0.  0.]]
</snippet></ROW><ROW><id>7546176</id><snippet>time</snippet></ROW><ROW><id>7546217</id><snippet>import operator
x = { 1: '2011-09-25 16:28:18',
      2: '2011-09-25 16:28:19',
      3: '2011-09-25 16:28:13',
      4: '2011-09-25 16:28:25',
      }
sorted_x = sorted(x.iteritems(), key=operator.itemgetter(1), reverse=True)

print(sorted_x)
</snippet></ROW><ROW><id>7546217</id><snippet>[(4, '2011-09-25 16:28:25'),
 (2, '2011-09-25 16:28:19'),
 (1, '2011-09-25 16:28:18'),
 (3, '2011-09-25 16:28:13')]
</snippet></ROW><ROW><id>7546307</id><snippet>lambdas_list.append(lambda obj=obj: obj.some_var)
</snippet></ROW><ROW><id>7546318</id><snippet>def get_home():
    return 'http://' + request.host + '/'
</snippet></ROW><ROW><id>7546913</id><snippet>from __future__ import print_function                                                                                                                                                                                                                                  
import re                                                                                                                                                                                                                                                              


REGEXP = re.compile(r'(\w+)/(\(.*?\))')                                                                                                                                                                                                                                


def main():                                                                                                                                                                                                                                                            
    words = {}                                                                                                                                                                                                                                                         

    with open('E:\\mach.txt', 'r') as fp:
        for line in fp:                                                                                                                                                                                                                                                    
            for item, category in REGEXP.findall(line):                                                                                                                                                                                                                    
                words.setdefault(category, {}).setdefault(item, 0)                                                                                                                                                                                                         
                words[category][item] += 1                                                                                                                                                                                                                                 

    with open('result.txt', 'w') as fp:                                                                                                                                                                                                                                       
        for category, words in sorted(words.items()):                                                                                                                                                                                                                      
            print(category, file=fp)                                                                                                                                                                                                                                       
            for word, count in words.items():                                                                                                                                                                                                                              
                print(word, count, sep=' ', file=fp)                                                                                                                                                                                                                       
            print(file=fp)                                                                                                                                                                                                                                                 
    return 0                                                                                                                                                                                                                                                           

if __name__ == '__main__':                                                                                                                                                                                                                                             
    raise SystemExit(main())
</snippet></ROW><ROW><id>7546913</id><snippet>REGEXP = re.compile(r'([^\s]+)/(\(.*?\))')
</snippet></ROW><ROW><id>7547031</id><snippet>#data = [
    #'offspr84 175177 200172 312312 310326 338342 252240 226210 113129 223264',
    #'male28 197175 172200 308312 310338 262338 256252 190226 113129 223219',
    #'female13 197177 172172 312308 318326 342350 240248 210218 129113 267247']

data = [
'offspr85 181177 192160 320312 290362 358330 238238 214178 133129 263223',
'male65 197181 176192 320268 322286 358330 238244 206214 137133 267263',
'female17 181177 160172 280312 362346 350326 230238 126178 129129 223167' ]

for i, line in enumerate(data):
    data[i] = line.split(' ')

for item in data[0]:
    if data[1].count(item) &gt; 0:
        print data[0][0], item
        print data[1][0], item

    if data[2].count(item) &gt; 0:
        print data[0][0], item
        print data[2][0], item
</snippet></ROW><ROW><id>7547031</id><snippet>datas = [[
'offspr85 181177 192160 320312 290362 358330 238238 214178 133129 263223',
'male65 197181 176192 320268 322286 358330 238244 206214 137133 267263',
'female17 181177 160172 280312 362346 350326 230238 126178 129129 223167' ],
[
'offspr84 175177 200172 312312 310326 338342 252240 226210 113129 223264',
'male28 197175 172200 308312 310338 262338 256252 190226 113129 223219',
'female13 197177 172172 312308 318326 342350 240248 210218 129113 267247']
]
for data in datas:
    for i, line in enumerate(data):
        data[i] = line.split(' ')


for data in datas:
    for item in data[0]:
        if data[1].count(item) &gt; 0:
            print data[0][0], item
            print data[1][0], item

        if data[2].count(item) &gt; 0:
            print data[0][0], item
            print data[2][0], item
</snippet></ROW><ROW><id>7547145</id><snippet>self.tagnames = (('string', self.do_anything),)
</snippet></ROW><ROW><id>7547145</id><snippet>()</snippet></ROW><ROW><id>7547246</id><snippet>dob</snippet></ROW><ROW><id>7547246</id><snippet>request.user.profile</snippet></ROW><ROW><id>7547246</id><snippet>request.user.profile</snippet></ROW><ROW><id>7547246</id><snippet>dob</snippet></ROW><ROW><id>7547246</id><snippet>profile = request.user.profile
profile.dob = data['dob']
profile.save()
</snippet></ROW><ROW><id>7547312</id><snippet>admin.StackedInline</snippet></ROW><ROW><id>7547312</id><snippet>AdminSite</snippet></ROW><ROW><id>7547312</id><snippet>AdminSite</snippet></ROW><ROW><id>7547657</id><snippet>import numpy as np
np.clip(data32, 0, 255, out=data32)
data_u8 = data32.astype('uint8')
</snippet></ROW><ROW><id>7547657</id><snippet>Import ImageEnhance
enhancer=ImageEnhance.Brightness(img)
outimg=enhancer.enhance(1.2)
outimg.save('out.png')
</snippet></ROW><ROW><id>7547752</id><snippet>wx.__file__</snippet></ROW><ROW><id>7548003</id><snippet>with open("/path/to/storage/file", "w") as f:
    for row in cursor:
        f.write(row['your_field'])
</snippet></ROW><ROW><id>7548069</id><snippet>shlex</snippet></ROW><ROW><id>7548069</id><snippet>$ pydoc shlex
Help on module shlex:

NAME
    shlex - A lexical analyzer class for simple shell-like syntaxes.
</snippet></ROW><ROW><id>7548069</id><snippet>&gt;&gt; import shlex
&gt;&gt; shlex.split('This "is a" test.')
['This', 'is a', 'test']
</snippet></ROW><ROW><id>7548107</id><snippet>session</snippet></ROW><ROW><id>7548107</id><snippet>zope.sqlalchemy</snippet></ROW><ROW><id>7548107</id><snippet>transaction.commit()</snippet></ROW><ROW><id>7548107</id><snippet>transaction.abort()</snippet></ROW><ROW><id>7548107</id><snippet># you'll also need this import after your zope.sqlalchemy import statement
import transaction

while True:
    my_model.label = generate_label()
    try:
        transaction.commit()
    except IntegrityError:
        # need to use zope.sqlalchemy to clean things up
        transaction.abort()
        # recreate the session and re-add your object
        session = DBSession()
        session.add(my_model)
    else:
        break
</snippet></ROW><ROW><id>7548107</id><snippet>save</snippet></ROW><ROW><id>7548107</id><snippet>ScopedSession</snippet></ROW><ROW><id>7548107</id><snippet>SqlAlchemy</snippet></ROW><ROW><id>7548107</id><snippet>unit of work</snippet></ROW><ROW><id>7548107</id><snippet>TokenMacGuy</snippet></ROW><ROW><id>7548107</id><snippet>uuid</snippet></ROW><ROW><id>7548245</id><snippet>[1, 2, 3, 4].index(3) # --&gt; 2
</snippet></ROW><ROW><id>7548245</id><snippet>.index()</snippet></ROW><ROW><id>7548245</id><snippet>.index()</snippet></ROW><ROW><id>7548277</id><snippet>img</snippet></ROW><ROW><id>7548277</id><snippet>/image</snippet></ROW><ROW><id>7548277</id><snippet>&lt;img src="/image?img_id=%s"&gt;&lt;/img&gt;
</snippet></ROW><ROW><id>7548277</id><snippet>from google.appengine.ext import db
from google.appengine.api import users
from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app
import logging


class HomePage(db.Model):
    thumbnail = db.BlobProperty()
    firm_name = db.StringProperty()

class ImageUpload(webapp.RequestHandler):
    def get(self):
        self.response.out.write("""
        &lt;form action="/imagesave" enctype="multipart/form-data" method="post"&gt;
        &lt;div&gt;&lt;label&gt;firm name:&lt;/label&gt; &lt;input type="text" name="firm_name" size=40&gt;&lt;/div&gt;
        &lt;div&gt;&lt;input type="file" name="img" /&gt;&lt;/div&gt;
        &lt;div&gt;&lt;input type="submit" value="Upload image"&gt;&lt;/div&gt;
        &lt;/form&gt;
        """)

class ImageSave(webapp.RequestHandler):
    def post(self):
        homepage = HomePage()
        thumbnail = self.request.get("img")
        firm_name = self.request.get("firm_name")
        homepage.thumbnail = db.Blob(thumbnail)
        homepage.firm_name = firm_name
        homepage.put()
        self.redirect("/imageupload")

class ImageResize(webapp.RequestHandler):
    def post(self):
        q = HomepageImage.all()
        q.filter("firm_name", "mta")
        qTable = q.get()
        if qTable:
            qTable.thumbnail = db.Blob(images.resize(self.request.get("img"), 32, 32))
            db.put(qTable)
        else:
            self.response.out.write("""firm not found""")
        self.redirect("/imageupload")

class DisplayImage(webapp.RequestHandler):
    def get(self):
        query = HomePage.all()
        query.filter("firm_name", "mta")
        result = query.get()
        self.response.out.write("""firm name: %s""" % result.firm_name)
        self.response.out.write("""&lt;img src="/image?img_id=%s"&gt;&lt;/img&gt;""" %
        result.key())

class Image(webapp.RequestHandler):
    def get(self):
        img_id = self.request.get("img_id")
        logging.info("""**************************img_id: %s**************************""" % img_id)
        homepage = db.get(self.request.get("img_id"))
        if homepage.thumbnail:
                self.response.headers['Content-Type'] = "image/jpg"
                self.response.out.write(homepage.thumbnail)
        else:
                self.response.out.write("no image")


application = webapp.WSGIApplication(
[
("/imageresize",ImageResize),
("/imageupload", ImageUpload),
("/displayimage", DisplayImage),
("/imagesave", ImageSave),
("/image", Image),
],                                      
debug=True
)

def main():
    run_wsgi_app(application)
if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>7548565</id><snippet>SW</snippet></ROW><ROW><id>7548565</id><snippet>Sw</snippet></ROW><ROW><id>7548565</id><snippet>SW</snippet></ROW><ROW><id>7548565</id><snippet>compass in ['S', 'W', 'Sw']] 
</snippet></ROW><ROW><id>7548565</id><snippet>compass.upper() in ['S', 'W', 'SW']] 
</snippet></ROW><ROW><id>7548659</id><snippet>f1.a</snippet></ROW><ROW><id>7548659</id><snippet>f1.a = 5
</snippet></ROW><ROW><id>7548659</id><snippet>f1.a.append(5)
</snippet></ROW><ROW><id>7548659</id><snippet>f1.a</snippet></ROW><ROW><id>7548659</id><snippet>f1.a = [5]
</snippet></ROW><ROW><id>7548659</id><snippet>&gt;&gt;&gt; f1=Foo()
&gt;&gt;&gt; f2=Foo()
&gt;&gt;&gt; Foo.a = 5
&gt;&gt;&gt; f1.a
5
&gt;&gt;&gt; f2.a
5
</snippet></ROW><ROW><id>7548659</id><snippet>f1.a = 5
</snippet></ROW><ROW><id>7548907</id><snippet>import search</snippet></ROW><ROW><id>7548907</id><snippet>search</snippet></ROW><ROW><id>7548907</id><snippet>Problem</snippet></ROW><ROW><id>7548907</id><snippet>search.Problem</snippet></ROW><ROW><id>7548907</id><snippet>import search

class Problem2(search.Problem):
    pass
</snippet></ROW><ROW><id>7548907</id><snippet>Problem</snippet></ROW><ROW><id>7548907</id><snippet>from search import Problem
</snippet></ROW><ROW><id>7548907</id><snippet>Problem</snippet></ROW><ROW><id>7548907</id><snippet>Problem</snippet></ROW><ROW><id>7548907</id><snippet>search</snippet></ROW><ROW><id>7548938</id><snippet>$ source virtualenvwrapper.sh
</snippet></ROW><ROW><id>7549426</id><snippet>import os, zipfile
if 'filenames.txt' in os.listdir('.'):
    print 'file is in current dir'
else:
    zf = zipfile.ZipFile('files.zip')
    zf.extract('filenames.txt')
</snippet></ROW><ROW><id>7549544</id><snippet>&gt;</snippet></ROW><ROW><id>7549544</id><snippet>=&gt;</snippet></ROW><ROW><id>7549544</id><snippet>sum(y &gt; 2 for y in x)</snippet></ROW><ROW><id>7549544</id><snippet>sum(1 for y in x if y &gt; 2)</snippet></ROW><ROW><id>7549693</id><snippet>__str__</snippet></ROW><ROW><id>7549693</id><snippet>print</snippet></ROW><ROW><id>7549693</id><snippet>return</snippet></ROW><ROW><id>7549693</id><snippet>__str__</snippet></ROW><ROW><id>7549693</id><snippet>None</snippet></ROW><ROW><id>7549693</id><snippet>print</snippet></ROW><ROW><id>7549693</id><snippet>return</snippet></ROW><ROW><id>7549693</id><snippet>print</snippet></ROW><ROW><id>7549693</id><snippet>def __str__(self):
    """
    Return the string representation for a set, which consists of
    the string representation of each shape, categorized by type
    (circles, then squares, then triangles)
    """
    strings = []
    for i in self.collect:
        if type(i) == Square:
             strings.append('Square with measurements ' +  str(i.side))
        if type(i) == Circle:
            strings.append('Circle with measurements ' + str(i.radius))
        if type(i) == Triangle:
            strings.append('Triangle with measurements, base/height ' + str(i.base)+ ' ' + str(i.height))
    return '\n'.join(strings)
</snippet></ROW><ROW><id>7549867</id><snippet>ast.literal_eval('{"a" : 1}')
&gt;&gt; {'a' : 1}
</snippet></ROW><ROW><id>7549867</id><snippet>{}</snippet></ROW><ROW><id>7549867</id><snippet>ast.literal_eval('"{}"') # The quotes that are here make it return the string "{}"
&gt;&gt; '{}'
</snippet></ROW><ROW><id>7549867</id><snippet>ast.literal_eval("{" + FILE.readline().strip() + "}")
</snippet></ROW><ROW><id>7549867</id><snippet>ast.literal_eval(FILE.readline().strip())
</snippet></ROW><ROW><id>7549916</id><snippet>public static void reencode(String orig, String dest) {
    PngReader png1 = FileHelper.createPngReader(new File(orig));
    ImageInfo pnginfo1 = png1.imgInfo;
    ImageInfo pnginfo2 = new ImageInfo(pnginfo1.cols, pnginfo1.rows, 4, false,false,true);  
    PngWriter png2 = FileHelper.createPngWriter(new File(dest), pnginfo2, false);
    png2.copyChunksFirst(png1, ChunksToWrite.COPY_ALL);
    ImageLine l2 = new ImageLine(pnginfo2);
    for (int row = 0; row &lt; pnginfo1.rows; row++) {
        ImageLine l1 = png1.readRow(row);
        l2.tf_pack(l1.scanline, false);
        l2.setRown(row);
        png2.writeRow(l2);
    }
    png1.end();
    png2.copyChunksLast(png1, ChunksToWrite.COPY_ALL);
    png2.end();
    System.out.println("Done");
}
</snippet></ROW><ROW><id>7549920</id><snippet>            line_prefix = [''.join((str(value), " &amp; ")) for value in penult_args]
</snippet></ROW><ROW><id>7549920</id><snippet>            value = ''.join(('$', str(value), '$'))
</snippet></ROW><ROW><id>7549920</id><snippet>$</snippet></ROW><ROW><id>7549920</id><snippet>5</snippet></ROW><ROW><id>7549920</id><snippet>$</snippet></ROW><ROW><id>7549920</id><snippet>            line_suffix = [''.join((str(value), " \\\\", "\n"))]
</snippet></ROW><ROW><id>7549920</id><snippet>def t_row(self, *args):
    if len(args) == self.columns:
        result = []
        for value in args:
            if isinstance(value, int):
                result.append('$%d$' % value)
            else:
                result.append(value)
        return ' $ '.join(result) + r' \\'
</snippet></ROW><ROW><id>7549920</id><snippet>t_row = lambda self, *args: (' $ '.join('$%d$' % 
          value if isinstance(value, int) else value for value in args) + r' \\' 
              if len(args) == self.columns else None)
</snippet></ROW><ROW><id>7550078</id><snippet>&lt;SearchResult&gt;
&lt;QueryDetails&gt;
&lt;Category&gt;womens-clothes&lt;/Category&gt;
&lt;CategoryName&gt;Clothing&lt;/CategoryName&gt;
&lt;ShowSizeFilter&gt;false&lt;/ShowSizeFilter&gt;
&lt;ShowColorFilter&gt;true&lt;/ShowColorFilter&gt;
...
</snippet></ROW><ROW><id>7550898</id><snippet>strftime</snippet></ROW><ROW><id>7550898</id><snippet>%w</snippet></ROW><ROW><id>7550898</id><snippet>0</snippet></ROW><ROW><id>7550898</id><snippet>date.weekday()</snippet></ROW><ROW><id>7550898</id><snippet>6</snippet></ROW><ROW><id>7550898</id><snippet>time</snippet></ROW><ROW><id>7550898</id><snippet>struct_time</snippet></ROW><ROW><id>7550898</id><snippet>struct_time.tm_day</snippet></ROW><ROW><id>7550898</id><snippet>6</snippet></ROW><ROW><id>7550898</id><snippet>time.struct_time</snippet></ROW><ROW><id>7550898</id><snippet>6</snippet></ROW><ROW><id>7550898</id><snippet>tm</snippet></ROW><ROW><id>7550898</id><snippet>0</snippet></ROW><ROW><id>7550898</id><snippet>gmtime</snippet></ROW><ROW><id>7550898</id><snippet>localtime</snippet></ROW><ROW><id>7550941</id><snippet>fb_url = "%s://%s%s" % (request.is_secure() and 'https' or 'http',
    #request.get_host(), urlresolvers.reverse('filebrowser-index'))
    request.get_host(), urlresolvers.reverse('fb_browse'))
</snippet></ROW><ROW><id>7551083</id><snippet>ctypes</snippet></ROW><ROW><id>7551282</id><snippet>==</snippet></ROW><ROW><id>7551282</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = [1, 2, 3]
&gt;&gt;&gt; a == b
True
</snippet></ROW><ROW><id>7551442</id><snippet>request.session['role_id'] = request.POST['role']
</snippet></ROW><ROW><id>7551442</id><snippet>current_role = Role.objects.get(role_id=request.session['role_id'])
</snippet></ROW><ROW><id>7551696</id><snippet>src</snippet></ROW><ROW><id>7551696</id><snippet>unicode</snippet></ROW><ROW><id>7551696</id><snippet>print</snippet></ROW><ROW><id>7551696</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>7551886</id><snippet>urllib2</snippet></ROW><ROW><id>7551886</id><snippet>#Option 1
import urllib2
opener = urllib2.build_opener()
opener.addheaders = [('User-agent', 'MyUserAgent')]
res= opener.open('http://whatsmyuseragent.com/')
page = res.read()

#Option 2
import urllib2
req = urllib2.Request('http://whatsmyuseragent.com/')
req.add_header('User-agent', 'MyUserAgent')
urllib2.urlopen(req)

#Option 3
req = urllib2.Request("http://whatsmyuseragent.com/", 
                       headers={"User-agent": "MyUserAgent"})
urllib2.urlopen(req)
</snippet></ROW><ROW><id>7552255</id><snippet>/sbin/udevadm info --export-db</snippet></ROW><ROW><id>7552404</id><snippet>import</snippet></ROW><ROW><id>7552404</id><snippet>identifier ::=  (letter|"_") (letter | digit | "_")*
</snippet></ROW><ROW><id>7552742</id><snippet>fruit</snippet></ROW><ROW><id>7552742</id><snippet>Table</snippet></ROW><ROW><id>7552742</id><snippet>q = (select([fruit.c.type, func.min(fruit.c.price).label("min_price")]).
    group_by(fruit.c.type)).alias("subq")

s = select([fruit], 
            and_(fruit.c.type == q.c.type,
                 fruit.c.price == q.c.min_price)
    )
res = session.execute(s)
</snippet></ROW><ROW><id>7552742</id><snippet>fruit</snippet></ROW><ROW><id>7552742</id><snippet>Model</snippet></ROW><ROW><id>7552742</id><snippet>q = (select([fruit.type, func.min(fruit.price).label("min_price")]).
    group_by(fruit.type)).alias("subq")
s = (session.query(fruit).
        join(q, and_(fruit.type==q.c.type, fruit.price == q.c.min_price))
    )
res = s.all()
</snippet></ROW><ROW><id>7552898</id><snippet>import glob, operator

fpout = open("result.dat","w")

for path in glob.glob("data?-?"):
    with open(path, "r") as fp:
        fields = [ line.split(" ") for line in fp ]
        maxline = " ".join(max(fields, key = lambda row: float(row[5]))
        print &gt;&gt; fpout, maxline
</snippet></ROW><ROW><id>7553137</id><snippet>imp</snippet></ROW><ROW><id>7553137</id><snippet>sys.path</snippet></ROW><ROW><id>7553137</id><snippet>sys.path</snippet></ROW><ROW><id>7553137</id><snippet>sys.path</snippet></ROW><ROW><id>7553137</id><snippet>imp</snippet></ROW><ROW><id>7553759</id><snippet>from django.core.mail.backends.smtp import *
from django.db import transaction

from modules.common.models import *

class LoggingEmailBackend(EmailBackend):
    """
    A wrapper around the SMTP backend that logs all emails to the DB.
    """
    def send_messages(self, email_messages):
    """
    A helper method that does the actual logging
    """
    with transaction.commit_on_success():

        for email_message in email_messages:

            email_record = Email.objects.create(
                to='; '.join(email_message.recipients()),
                subject=email_message.subject, body=email_message.body,
            )

            try:
                return super(LoggingEmailBackend, self)._send(
                    email_message
                )
            except:
                email_record.ok = False
                return False
            finally:
                email_record.ok = True
                return True
</snippet></ROW><ROW><id>7553759</id><snippet>class Email(models.Model):
    """
    Model to store all the outgoing emails.
    """
    when = models.DateTimeField(
        null=False, auto_now_add=True
    )
    to = models.EmailField(
        null=False, blank=False,
    )
    subject = models.CharField(
         null=False, max_length=128,
    )
    body = models.TextField(
        null=False, max_length=1024,
    )
    ok = models.BooleanField(
        null=False, default=True,
    )
</snippet></ROW><ROW><id>7553759</id><snippet>from django.contrib import admin

from modules.common.models import *

class EmailAdmin(admin.ModelAdmin):
    """
    Admin part for managing the the Email model
    """
    list_display = ['to', 'subject', 'ok',]
    list_filter = ['ok']
    readonly_fields = ['when', 'to', 'subject', 'body', 'ok']
    search_fields = ['subject', 'body', 'to']

    def has_delete_permission(self, request, obj=None):
        return False

    def has_add_permission(self, request):
        return False


admin.site.register(Email, EmailAdmin)
</snippet></ROW><ROW><id>7554523</id><snippet>data</snippet></ROW><ROW><id>7554523</id><snippet>class TitleTarget(object):
    def __init__(self):
        self.text = []
    def start(self, tag, attrib):
        self.is_title = True #if tag == 'Title' else False
        if self.is_title:
            self.text.append(u'')
    def end(self, tag):
        pass
    def data(self, data):
        if self.is_title:
            self.text[-1] += data
    def close(self):
        return self.text
</snippet></ROW><ROW><id>7554523</id><snippet>print repr(results)</snippet></ROW><ROW><id>7554523</id><snippet>u'Jagiello\u0144ska\n    '
u'\u015br. 06 lip\n        '
</snippet></ROW><ROW><id>7554861</id><snippet>End</snippet></ROW><ROW><id>7554861</id><snippet>Worksheets("sheet1").Cells(Rows.Count, "A").End(xlUp).Row
</snippet></ROW><ROW><id>7554861</id><snippet>pywin</snippet></ROW><ROW><id>7555048</id><snippet>2**-BPF</snippet></ROW><ROW><id>7555048</id><snippet>1.0/2**BPF</snippet></ROW><ROW><id>7555048</id><snippet>2**BFP</snippet></ROW><ROW><id>7555361</id><snippet>d.decode('cp1251').encode('utf8')
</snippet></ROW><ROW><id>7555366</id><snippet>import bpy
import xml.dom.minidom

path = "/Users/x/Documents/y/game_projects/test.xml"

dom = xml.dom.minidom.getDOMImplementation()
tree = dom.createDocument(None, "document", None)

root = tree.documentElement
root.setAttribute("version", "0.1")

for object in bpy.data.objects:
    if object.type == 'MESH' and object.data.shape_keys:

        objectElement = tree.createElement("object")
        objectElement.setAttribute("name", object.name)
        root.appendChild(objectElement)

        keysElement = tree.createElement("shape_keys")
        objectElement.appendChild(keysElement)

        keyBlocks = object.data.shape_keys.key_blocks
        for block in keyBlocks:
            keyElement = tree.createElement("key")
            keyElement.setAttribute("name", block.name)
            keysElement.appendChild(keyElement)

            for data in block.data:
                vertex = data.co
                element = tree.createElement("vertex")
                element.setAttribute("x", str(vertex.x))
                element.setAttribute("y", str(vertex.y))
                element.setAttribute("z", str(vertex.z))
                keyElement.appendChild(element)


file = open(path, "w", encoding="utf8")
tree.writexml(file, encoding = "UTF-8", indent = "\n", addindent = "\t")
file.close()
</snippet></ROW><ROW><id>7555488</id><snippet>data_files=["myhome", ["Win32/file1.pyd", "Win32/file2.dll"])]
</snippet></ROW><ROW><id>7555488</id><snippet>POSSIBLE_HOME_PATH = [
    os.path.join(os.path.dirname(__file__), '../myhome'), 
    os.path.join(sys.prefix, 'myhome'),
]
for p in POSSIBLE_HOME_PATH:
    myhome = p
    if os.path.isdir(myhome) == False:
        print "Could not find home at", myhome
    else:
       break
</snippet></ROW><ROW><id>7555488</id><snippet>sys.path.append(myhome) 
</snippet></ROW><ROW><id>7555971</id><snippet>Data</snippet></ROW><ROW><id>7555971</id><snippet>(c_double*DataLength.value)</snippet></ROW><ROW><id>7555971</id><snippet>a = np.frombuffer(Data) # no copy. Changes in `a` are reflected in `Data`
</snippet></ROW><ROW><id>7555971</id><snippet>Data</snippet></ROW><ROW><id>7555971</id><snippet>POINTER(c_double)</snippet></ROW><ROW><id>7555971</id><snippet>numpy.fromiter()</snippet></ROW><ROW><id>7555971</id><snippet>a = np.fromiter(Data, dtype=np.float, count=DataLength.value) # copy
</snippet></ROW><ROW><id>7555971</id><snippet>POINTER(c_double)</snippet></ROW><ROW><id>7555971</id><snippet>.from_address()</snippet></ROW><ROW><id>7555971</id><snippet>ArrayType = ctypes.c_double*DataLength.value
addr = ctypes.addressof(Data.contents)
a = np.frombuffer(ArrayType.from_address(addr))
</snippet></ROW><ROW><id>7555971</id><snippet>array_pointer = ctypes.cast(Data, ctypes.POINTER(ArrayType))
a = np.frombuffer(array_pointer.contents)
</snippet></ROW><ROW><id>7555971</id><snippet>POINTER(c_double)</snippet></ROW><ROW><id>7555971</id><snippet>(c_double*DataLength)</snippet></ROW><ROW><id>7555971</id><snippet>numpy.frombuffer()</snippet></ROW><ROW><id>7555971</id><snippet>cimport numpy as np
np.import_array() # initialize C API to call PyArray_SimpleNewFromData

cdef public api tonumpyarray(double* data, long long size) with gil:
    if not (data and size &gt;= 0): raise ValueError
    cdef np.npy_intp dims = size
    #NOTE: it doesn't take ownership of `data`. You must free `data` yourself
    return np.PyArray_SimpleNewFromData(1, &amp;dims, np.NPY_DOUBLE, &lt;void*&gt;data)
</snippet></ROW><ROW><id>7555971</id><snippet>ctypes</snippet></ROW><ROW><id>7555971</id><snippet>from ctypes import (PYFUNCTYPE, py_object, POINTER, c_double, c_longlong,
                    pydll, CFUNCTYPE, c_bool, cdll)

import pointer2ndarray
tonumpyarray = PYFUNCTYPE(py_object, POINTER(c_double), c_longlong)(
    ("tonumpyarray", pydll.LoadLibrary(pointer2ndarray.__file__)))

@CFUNCTYPE(c_bool, POINTER(c_double), c_longlong)
def callback(data, size):
    a = tonumpyarray(data, size)
    # call scipy functions on the `a` array here
    return True

cpplib = cdll.LoadLibrary("call_callback.so") # your C++ lib goes here
cpplib.call_callback(callback)
</snippet></ROW><ROW><id>7555971</id><snippet>call_callback</snippet></ROW><ROW><id>7555971</id><snippet>void call_callback(bool (*)(double *, long long))</snippet></ROW><ROW><id>7556034</id><snippet>SET foreign_key_checks = 0
# do something
SET foreign_key_checks = 1
</snippet></ROW><ROW><id>7556042</id><snippet>import multiprocessing, time, psycopg2

class Consumer(multiprocessing.Process):

    def __init__(self, task_queue, result_queue):
        multiprocessing.Process.__init__(self)
        self.task_queue = task_queue
        self.result_queue = result_queue
        self.pyConn = psycopg2.connect("dbname='geobase_1' host = 'localhost'")
        self.pyConn.set_isolation_level(0)


    def run(self):
        proc_name = self.name
        while True:
            next_task = self.task_queue.get()
            if next_task is None:
                print 'Tasks Complete'
                self.task_queue.task_done()
                break            
            answer = next_task(connection=self.pyConn)
            self.task_queue.task_done()
            self.result_queue.put(answer)
        return


class Task(object):
    def __init__(self, a):
        self.a = a

    def __call__(self, connection=None):        
        pyConn = connection
        pyCursor1 = pyConn.cursor()

        procQuery = 'UPDATE city SET gid_fkey = gid FROM country  WHERE ST_within((SELECT the_geom FROM city WHERE city_id = %s), country.the_geom) AND city_id = %s' % (self.a, self.a)

        pyCursor1.execute(procQuery)
        print 'What is self?'
        print self.a

        return self.a

    def __str__(self):
        return 'ARC'
    def run(self):
        print 'IN'
</snippet></ROW><ROW><id>7556051</id><snippet>shutdown_write()</snippet></ROW><ROW><id>7556051</id><snippet>stdin, stdout, stderr = client.exec_command(cmd)
stdin.channel.shutdown_write()
</snippet></ROW><ROW><id>7556308</id><snippet>bytearray</snippet></ROW><ROW><id>7556308</id><snippet>&gt;&gt;&gt; frame = bytearray()
&gt;&gt;&gt; frame.append(0xA2)
&gt;&gt;&gt; frame.append(0x01)
&gt;&gt;&gt; frame.append(0x02)
&gt;&gt;&gt; frame.append(0x03)
&gt;&gt;&gt; frame.append(0x04)
&gt;&gt;&gt; frame
bytearray(b'\xa2\x01\x02\x03\x04')
</snippet></ROW><ROW><id>7556308</id><snippet>frame = b""
frame += b'\xA2' 
frame += b'\x01' 
frame += b'\x02' 
frame += b'\x03'
frame += b'\x04'
</snippet></ROW><ROW><id>7556687</id><snippet>from operator import attrgetter

recent_posts = Post.objects.order_by('-created')[:10]
recent_comments = Comment.objects.order_by('-created')[:10]
both_combined = list(recent_posts) + list(recent_comments)
both_sorted = sorted(both_combined, key=attrgetter('created'), reverse=True)
most_recent = both_sorted[:10]
</snippet></ROW><ROW><id>7556731</id><snippet>import getopt, sys

def usage():
  print "\nThis is the usage function\n"
  print 'Usage: '+sys.argv[0]+' -i &lt;file1&gt; [option]'

def main(argv):
  try:
    opts, args = getopt.getopt(argv, 'hi:o:tbpms:', ['help', 'input=', 'output='])
    if not opts:
      print 'No options supplied'
      usage()
  except getopt.GetoptError,e:
    print e
    usage()
    sys.exit(2)

  for opt, arg in opts:
    if opt in ('-h', '--help'):
      usage()
      sys.exit(2)

if __name__ =='__main__':
    main(sys.argv[1:])
</snippet></ROW><ROW><id>7556750</id><snippet>STAT</snippet></ROW><ROW><id>7556750</id><snippet>LIST</snippet></ROW><ROW><id>7556750</id><snippet>UIDL</snippet></ROW><ROW><id>7556750</id><snippet>LIST</snippet></ROW><ROW><id>7556750</id><snippet>UIDL</snippet></ROW><ROW><id>7556750</id><snippet>LIST</snippet></ROW><ROW><id>7556750</id><snippet>UIDL</snippet></ROW><ROW><id>7556750</id><snippet>LIST</snippet></ROW><ROW><id>7556750</id><snippet>UIDL</snippet></ROW><ROW><id>7557028</id><snippet>import Tkinter as tk

TITLE_FONT = ("Helvetica", 18, "bold")
class SampleApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)

        # the container is where we'll stack a bunch of frames
        # on top of each other, then the one we want visible
        # will be raised above the others
        container = tk.Frame(self)
        container.pack(side="top", fill="both", expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}
        for F in (StartPage, PageOne, PageTwo):
            frame = F(container, self)
            self.frames[F] = frame
            # put all of the pages in the same location; 
            # the one on the top of the stacking order
            # will be the one that is visible.
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame(StartPage)

    def show_frame(self, c):
        '''Show a frame for the given class'''
        frame = self.frames[c]
        frame.tkraise()

class StartPage(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent) 
        label = tk.Label(self, text="This is the start page", font=TITLE_FONT)
        label.pack(side="top", fill="x", pady=10)

        button1 = tk.Button(self, text="Go to Page One", 
                            command=lambda: controller.show_frame(PageOne))
        button2 = tk.Button(self, text="Go to Page Two",
                            command=lambda: controller.show_frame(PageTwo))
        button1.pack()
        button2.pack()


class PageOne(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent) 
        label = tk.Label(self, text="This is page 1", font=TITLE_FONT)
        label.pack(side="top", fill="x", pady=10)
        button = tk.Button(self, text="Go to the start page", 
                           command=lambda: controller.show_frame(StartPage))
        button.pack()

class PageTwo(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="This is page 2", font=TITLE_FONT)
        label.pack(side="top", fill="x", pady=10)
        button = tk.Button(self, text="Go to the start page", 
                           command=lambda: controller.show_frame(StartPage))
        button.pack()

if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()
</snippet></ROW><ROW><id>7557150</id><snippet>in_error = False
</snippet></ROW><ROW><id>7557150</id><snippet>if line.startswith('Error'):
    in_error = True
elif line.startswith('End of Error'):
    print(line)
    in_error = False
if in_error:
    print(line)
</snippet></ROW><ROW><id>7557399</id><snippet>pyrad.packet</snippet></ROW><ROW><id>7557605</id><snippet>'Converting to lowercase :lower'</snippet></ROW><ROW><id>7557605</id><snippet>python</snippet></ROW><ROW><id>7557605</id><snippet>ipython</snippet></ROW><ROW><id>7557605</id><snippet>print</snippet></ROW><ROW><id>7557605</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>7557729</id><snippet>ConfigParser</snippet></ROW><ROW><id>7557729</id><snippet>from ConfigParser import RawConfigParser
parser = RawConfigParser({"myvar": "default_value"}) # Never use ConfigParser.ConfigParser!
parser.read("my_config")
myvar = parser.get("mysection", "myvar")
</snippet></ROW><ROW><id>7557729</id><snippet># You can use comments
[mysection]
myvar = special_value
</snippet></ROW><ROW><id>7557729</id><snippet>import</snippet></ROW><ROW><id>7557729</id><snippet>execfile</snippet></ROW><ROW><id>7557729</id><snippet>config = {}
execfile("my_config", config)
myvar = config.get("myvar", "default_value")
</snippet></ROW><ROW><id>7557729</id><snippet>myvar</snippet></ROW><ROW><id>7557729</id><snippet>import random
myvar = random.choice("special_value", "another_value")
</snippet></ROW><ROW><id>7558013</id><snippet>#!/usr/local/bin/python
# Even thought standard python is in /usr/bin/python, here we want another ...
</snippet></ROW><ROW><id>7558078</id><snippet>os.environ</snippet></ROW><ROW><id>7558078</id><snippet>path = os.environ["PATH"] # a ':'-separated string
path += ":/var/custom/bin"
os.environ["PATH"] = path
</snippet></ROW><ROW><id>7558078</id><snippet>os.environ["PATH"] = ':'.join(os.environ["PATH"].split(":") + ["/var/bin"])
</snippet></ROW><ROW><id>7558264</id><snippet>file.read()</snippet></ROW><ROW><id>7558264</id><snippet>file.read()</snippet></ROW><ROW><id>7558264</id><snippet>from StringIO import *

file = open('1.bmp', 'r')
print file.read(), '\n'
file.close()

file2 = open('1.bmp', 'r')
print StringIO(file2.read()).getvalue()
file2.close()
</snippet></ROW><ROW><id>7558264</id><snippet>with</snippet></ROW><ROW><id>7558264</id><snippet>from StringIO import *

with open('1.bmp', 'r') as file:
    print file.read(), '\n'

with open('1.bmp', 'r') as file2:
    print StringIO(file2.read()).getvalue()
</snippet></ROW><ROW><id>7558264</id><snippet>open('1.bmp', 'rb')</snippet></ROW><ROW><id>7558443</id><snippet>&gt;&gt;&gt; s = "abc def, abcdef"
&gt;&gt;&gt; w = {"abc": "xxx", "def": "yyy"}
&gt;&gt;&gt; def replace(text, words):
...     regex = r"\b(?:" + "|".join(re.escape(word) for word in words) + r")\b"
...     reobj = re.compile(regex, re.I)
...     return reobj.sub(lambda x:words[x.group(0)], text)
...
&gt;&gt;&gt; replace(s, w)
'xxx yyy, abcdef'
</snippet></ROW><ROW><id>7558443</id><snippet>\b</snippet></ROW><ROW><id>7558444</id><snippet>-F</snippet></ROW><ROW><id>7558444</id><snippet>grep</snippet></ROW><ROW><id>7558444</id><snippet>grep -F "[GET]" catalina.out
</snippet></ROW><ROW><id>7558552</id><snippet>curl -O http://python-distribute.org/distribute_setup.py
python distribute_setup.py
</snippet></ROW><ROW><id>7558849</id><snippet>urllib.unquote</snippet></ROW><ROW><id>7558849</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; raw = '%C3%BE%C3%A6%C3%B0%C3%B6'
&gt;&gt;&gt; urllib.unquote(raw)
'\xc3\xbe\xc3\xa6\xc3\xb0\xc3\xb6'
&gt;&gt;&gt; unicode(urllib.unquote(raw), 'utf-8')
u'\xfe\xe6\xf0\xf6'
</snippet></ROW><ROW><id>7558849</id><snippet>repr</snippet></ROW><ROW><id>7558849</id><snippet>replace</snippet></ROW><ROW><id>7558849</id><snippet>&gt;&gt;&gt; len('\xC3')         # this is a hex escape, only one character
1
&gt;&gt;&gt; len(r'\xC3')        # this is four characters, '\', 'x', 'C', '3'
4
&gt;&gt;&gt; r'\xC3' == '\\xC3'  # raw strings escape backslashes
True
</snippet></ROW><ROW><id>7558849</id><snippet>urllib.unquote</snippet></ROW><ROW><id>7558849</id><snippet>raw_uni = re.sub('%(\w{2})', lambda m: chr(int(m.group(1), 16)), raw)
</snippet></ROW><ROW><id>7558901</id><snippet>create</snippet></ROW><ROW><id>7558901</id><snippet>UserHistory</snippet></ROW><ROW><id>7558901</id><snippet>b = UserHistory(user=i)
</snippet></ROW><ROW><id>7558901</id><snippet>b.points_earned = random.randint(10, 100)
b.date_time = datetime.datetime.now()
b.save()
</snippet></ROW><ROW><id>7558901</id><snippet>b</snippet></ROW><ROW><id>7558901</id><snippet>date_time</snippet></ROW><ROW><id>7558901</id><snippet>b = UserHistory.objects.create(
  user=i,
  points_earned=random.randint(10, 100),
  date_time=datetime.datetime.now(),
)
</snippet></ROW><ROW><id>7558990</id><snippet>&gt;&gt;&gt; source_list = ('1','a'),('2','b'),('3','c'),('4','d')
&gt;&gt;&gt; list1, list2 = zip(*source_list)
&gt;&gt;&gt; list1
('1', '2', '3', '4')
&gt;&gt;&gt; list2
('a', 'b', 'c', 'd')
</snippet></ROW><ROW><id>7558990</id><snippet>zip(*iterable)</snippet></ROW><ROW><id>7558990</id><snippet>&gt;&gt;&gt; list(source_list) == zip(*zip(*source_list))
True
</snippet></ROW><ROW><id>7558990</id><snippet>&gt;&gt;&gt; list1, list2 = zip(*source_list)
&gt;&gt;&gt; list(source_list) == zip(list1, list2)
True
</snippet></ROW><ROW><id>7559153</id><snippet>str.translate()</snippet></ROW><ROW><id>7559153</id><snippet>import string

table = string.maketrans(';|', ',,')
deletechars = ' \r\n&lt;&gt;\'"'

print "ex'a;m|ple\n".translate(table, deletechars)
# -&gt; exa,m,ple
</snippet></ROW><ROW><id>7559315</id><snippet>setattr(instance, name, value)</snippet></ROW><ROW><id>7559315</id><snippet>instance.__setattr__(name, value)</snippet></ROW><ROW><id>7559315</id><snippet>object.__setattr__(...)</snippet></ROW><ROW><id>7559315</id><snippet>object</snippet></ROW><ROW><id>7559315</id><snippet>Spam</snippet></ROW><ROW><id>7559315</id><snippet>super()</snippet></ROW><ROW><id>7559315</id><snippet>Spam.__setattr__(...)</snippet></ROW><ROW><id>7559315</id><snippet>object</snippet></ROW><ROW><id>7559542</id><snippet>with open('test.txt') as input_data:
    # Skips text before the beginning of the interesting block:
    for line in input_data:
        if line.strip() == 'Start':  # Or whatever test is needed
            break
    # Reads text until the end of the block:
    for line in input_data:  # This keeps reading the file
        if line.strip() == 'End':
            break
        print line  # Line is extracted (or block_of_lines.append(line), etc.)
</snippet></ROW><ROW><id>7559647</id><snippet>import matplotlib.pyplot as plt

if plt.fignum_exists(&lt;figure number&gt;):
    # Figure is still opened
else:
    # Figure is closed
</snippet></ROW><ROW><id>7559647</id><snippet>fig.number</snippet></ROW><ROW><id>7559706</id><snippet>myDict = {'X':'X+YF','Y':'FX-Y'}
myXVal = myDict['X']
myYVal = myDict['Y']
print myXVal, myYVal
</snippet></ROW><ROW><id>7559706</id><snippet>X+YF FX-Y
</snippet></ROW><ROW><id>7559706</id><snippet>in</snippet></ROW><ROW><id>7559706</id><snippet>if 'X' in myDict:
    #do some stuff with myDict['X'] here...
</snippet></ROW><ROW><id>7559706</id><snippet>#path is the string that you want to do replacements in.
#replacementDict is the dict containing the key-value pairs mentioned in your post.
def iterateLSystem(path, replacementDict):
    #strings aren't mutable, so we make a mutable list version of path
    listPath = list(path)
    for i in range(len(listPath)):
        currentChar = listPath[i]
        if currentChar in replacementDict:
            listPath[i] = replacementDict[currentChar]
    #glob listPath back into a single string
    return "".join(listPath)
</snippet></ROW><ROW><id>7559729</id><snippet>if( year &gt;= 2020 )
  presto
</snippet></ROW><ROW><id>7559729</id><snippet>^20[2-9]\d$</snippet></ROW><ROW><id>7559729</id><snippet>^2[1-9]\d\d$</snippet></ROW><ROW><id>7559729</id><snippet>^[3-9]\d{3}$</snippet></ROW><ROW><id>7559729</id><snippet>^(20[2-9]\d|2[1-9]\d\d|[3-9]\d{3})$</snippet></ROW><ROW><id>7559729</id><snippet>+</snippet></ROW><ROW><id>7559729</id><snippet>^(20[2-9]\d+|2[1-9]\d{2,}|[3-9]\d{3,})$
</snippet></ROW><ROW><id>7559729</id><snippet>year &gt;= 2020</snippet></ROW><ROW><id>7559729</id><snippet>^(20[2-9]\d|2[1-9]\d{2}|[3-9]\d{3}|[1-9]\d{4,})$
</snippet></ROW><ROW><id>7559729</id><snippet>03852</snippet></ROW><ROW><id>7559782</id><snippet>sorted(d.values(), key=lambda item: item["l"]["created_on"])
</snippet></ROW><ROW><id>7559950</id><snippet>import numpy as np
np.seterr(all='warn')
A = np.array([10])
a=A[-1]
a**a
</snippet></ROW><ROW><id>7559950</id><snippet>RuntimeWarning: overflow encountered in long_scalars
</snippet></ROW><ROW><id>7559950</id><snippet>a</snippet></ROW><ROW><id>7559950</id><snippet>int32</snippet></ROW><ROW><id>7559950</id><snippet>int32</snippet></ROW><ROW><id>7559950</id><snippet>10**10 &gt; 2**32-1</snippet></ROW><ROW><id>7559950</id><snippet>int32</snippet></ROW><ROW><id>7559950</id><snippet>np.seterr(all='warn')</snippet></ROW><ROW><id>7559950</id><snippet>np.multiply.reduce(np.arange(17)+1)
</snippet></ROW><ROW><id>7559950</id><snippet>-288522240
</snippet></ROW><ROW><id>7559950</id><snippet>17! = 355687428096000L</snippet></ROW><ROW><id>7559950</id><snippet>dtypes</snippet></ROW><ROW><id>7560196</id><snippet>unicode</snippet></ROW><ROW><id>7560196</id><snippet>.decode()</snippet></ROW><ROW><id>7560196</id><snippet>.encode()</snippet></ROW><ROW><id>7560296</id><snippet>import gdata.contacts.client
import gdata.contacts.data # you might also need atom.data, gdata.data

gd_client = gdata.contacts.data.ContactsClient(source='eQuiNoX_Contacts')
gd_client.ClientLogin('equinox@gmail.com', '**password**')

feed = gd_client.GetGroups()
    for entry in feed.entry:
        print 'Atom Id: %s' % group.id.text
        print 'Group Name: %s' % group.title.text
        if not entry.system_group:
            print 'Edit Link: %s' % entry.GetEditLink().href
            print 'ETag: %s' % entry.etag
        else:
            print 'System Group Id: %s' % entry.system_group.id
</snippet></ROW><ROW><id>7560366</id><snippet>reduce</snippet></ROW><ROW><id>7560366</id><snippet>reduce</snippet></ROW><ROW><id>7560366</id><snippet>factorial</snippet></ROW><ROW><id>7560366</id><snippet>reduce(lambda x,y: x * factorial(y), lst, 1)
</snippet></ROW><ROW><id>7560566</id><snippet>sys.path.append('../lib/')</snippet></ROW><ROW><id>7560566</id><snippet>import sys, os
sys.path.append(os.path.join(os.path.split(os.path.split(os.path.abspath(sys.argv[0]))[0])[0], "lib"))
import my_dependency
</snippet></ROW><ROW><id>7560566</id><snippet>lib</snippet></ROW><ROW><id>7560633</id><snippet>.quantize()</snippet></ROW><ROW><id>7560633</id><snippet>Decimal</snippet></ROW><ROW><id>7560633</id><snippet>unit_price = decimal.Decimal('8.0107')
quantity = decimal.Decimal('0.056')
price = unit_price * quantity
cents = decimal.Decimal('.01')
money = price.quantize(cents, decimal.ROUND_05UP)
</snippet></ROW><ROW><id>7560737</id><snippet>.__unicode__()</snippet></ROW><ROW><id>7560737</id><snippet>unicode</snippet></ROW><ROW><id>7560737</id><snippet>Event.__unicode__()</snippet></ROW><ROW><id>7560737</id><snippet>self.location</snippet></ROW><ROW><id>7560737</id><snippet>Location</snippet></ROW><ROW><id>7560737</id><snippet>self.location</snippet></ROW><ROW><id>7560737</id><snippet>unicode</snippet></ROW><ROW><id>7560737</id><snippet>Location</snippet></ROW><ROW><id>7560737</id><snippet>def __unicode__(self):
    return u'%s' % (self.location, )

def __unicode__(self):
    return self.location.location
</snippet></ROW><ROW><id>7560890</id><snippet>parseAll=True</snippet></ROW><ROW><id>7560890</id><snippet>/^(?P&lt;dict_words&gt;eels|fjords|hovercraft|parrot)*$/
</snippet></ROW><ROW><id>7560950</id><snippet>for CurrentIP in F.readlines():
    GetUsers( CurrentIP.strip() );

F.close()
</snippet></ROW><ROW><id>7561132</id><snippet>import re
m1 = re.compile(r'.*?\.txt$')
pattern = 'yourpattern'
m2 = re.compile(r'%s' % (pattern))

for file in filter(m1.search, os.listdir(somedir)):
    if m2.search(open(file,'r').read()):
        print file, 'contains', pattern
    else:
        print file, 'does not contain', pattern
</snippet></ROW><ROW><id>7561209</id><snippet>sum = 0</snippet></ROW><ROW><id>7561209</id><snippet>sum += PxCount</snippet></ROW><ROW><id>7561262</id><snippet>myData.dtype.names
</snippet></ROW><ROW><id>7561262</id><snippet>In [10]: myData.dtype.names
Out[10]: ('TIME', 'FX', 'FY', 'FZ')
</snippet></ROW><ROW><id>7561324</id><snippet>#!/usr/bin/env python
import re

for n in xrange(0, 51):
  ones = '1' * n
  matches = re.match(r'^1?$|^(11+?)\1+$', ones)
  if matches:
    div1 = n if matches.group(1) is None else len(matches.group(1))
    div2 = 0 if div1 is 0 else len(ones)/div1
    print "[{0:2}]:{1:2} * {2:2} = '{3}'".format(n, div1, div2, ones)
</snippet></ROW><ROW><id>7561324</id><snippet>[ 0]: 0 *  0 = ''
[ 1]: 1 *  1 = '1'
[ 4]: 2 *  2 = '1111'
[ 6]: 2 *  3 = '111111'
[ 8]: 2 *  4 = '11111111'
[ 9]: 3 *  3 = '111111111'
[10]: 2 *  5 = '1111111111'
[12]: 2 *  6 = '111111111111'
[14]: 2 *  7 = '11111111111111'
[15]: 3 *  5 = '111111111111111'
[16]: 2 *  8 = '1111111111111111'
[18]: 2 *  9 = '111111111111111111'
[20]: 2 * 10 = '11111111111111111111'
[21]: 3 *  7 = '111111111111111111111'
[22]: 2 * 11 = '1111111111111111111111'
[24]: 2 * 12 = '111111111111111111111111'
[25]: 5 *  5 = '1111111111111111111111111'
[26]: 2 * 13 = '11111111111111111111111111'
[27]: 3 *  9 = '111111111111111111111111111'
[28]: 2 * 14 = '1111111111111111111111111111'
[30]: 2 * 15 = '111111111111111111111111111111'
[32]: 2 * 16 = '11111111111111111111111111111111'
[33]: 3 * 11 = '111111111111111111111111111111111'
[34]: 2 * 17 = '1111111111111111111111111111111111'
[35]: 5 *  7 = '11111111111111111111111111111111111'
[36]: 2 * 18 = '111111111111111111111111111111111111'
[38]: 2 * 19 = '11111111111111111111111111111111111111'
[39]: 3 * 13 = '111111111111111111111111111111111111111'
[40]: 2 * 20 = '1111111111111111111111111111111111111111'
[42]: 2 * 21 = '111111111111111111111111111111111111111111'
[44]: 2 * 22 = '11111111111111111111111111111111111111111111'
[45]: 3 * 15 = '111111111111111111111111111111111111111111111'
[46]: 2 * 23 = '1111111111111111111111111111111111111111111111'
[48]: 2 * 24 = '111111111111111111111111111111111111111111111111'
[49]: 7 *  7 = '1111111111111111111111111111111111111111111111111'
[50]: 2 * 25 = '11111111111111111111111111111111111111111111111111'
</snippet></ROW><ROW><id>7561324</id><snippet>11</snippet></ROW><ROW><id>7561324</id><snippet>11</snippet></ROW><ROW><id>7561324</id><snippet>(11+?)</snippet></ROW><ROW><id>7561324</id><snippet>\1+</snippet></ROW><ROW><id>7561343</id><snippet>pickle</snippet></ROW><ROW><id>7561404</id><snippet>random</snippet></ROW><ROW><id>7561404</id><snippet>random</snippet></ROW><ROW><id>7561404</id><snippet>import random</snippet></ROW><ROW><id>7561404</id><snippet>from random import random</snippet></ROW><ROW><id>7561404</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; type(random)
module
&gt;&gt;&gt; from random import random
&gt;&gt;&gt; type(random)
builtin_function_or_method
</snippet></ROW><ROW><id>7561529</id><snippet>/</snippet></ROW><ROW><id>7561529</id><snippet>//</snippet></ROW><ROW><id>7561645</id><snippet>def __unicode__(self):
    return u"{0} ({1}, {2})".format(self.icon, self.attrib1, self.attrib2)
</snippet></ROW><ROW><id>7561678</id><snippet>test</snippet></ROW><ROW><id>7561678</id><snippet>sys.path</snippet></ROW><ROW><id>7561678</id><snippet>trial</snippet></ROW><ROW><id>7561678</id><snippet>~/Projects/MyProject/
~/Projects/MyProject/myproject/
~/Projects/MyProject/myproject/__init__.py
~/Projects/MyProject/myproject/stuff.py
~/Projects/MyProject/myproject/test/
~/Projects/MyProject/myproject/test/__init__.py
~/Projects/MyProject/myproject/test/test_stuff.py
</snippet></ROW><ROW><id>7561678</id><snippet>PYTHONPATH=$HOME/Projects/MyProject (cd /tmp; trial myproject.test)
</snippet></ROW><ROW><id>7561678</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>7561678</id><snippet>PATH</snippet></ROW><ROW><id>7561678</id><snippet>~/.bashrc</snippet></ROW><ROW><id>7561678</id><snippet>trial</snippet></ROW><ROW><id>7561758</id><snippet>for identifier, data in masterlist:
     print "%s%s" %(identifier, '|'.join(data))
</snippet></ROW><ROW><id>7561864</id><snippet>[Errno -2] Name or service not known
</snippet></ROW><ROW><id>7561864</id><snippet>from urllib2 import Request, urlopen, URLError, HTTPError

req = Request('http://www.pretend_server.com')
    urlopen(req)
</snippet></ROW><ROW><id>7561864</id><snippet>Traceback (most recent call last):
  File "urlerror.py", line 5, in &lt;module&gt;
    urlopen(req)
  File "/usr/lib/python2.6/urllib2.py", line 126, in urlopen
    return _opener.open(url, data, timeout)
  File "/usr/lib/python2.6/urllib2.py", line 397, in open
    response = meth(req, response)
  File "/usr/lib/python2.6/urllib2.py", line 510, in http_response
    'http', request, response, code, msg, hdrs)
  File "/usr/lib/python2.6/urllib2.py", line 435, in error
    return self._call_chain(*args)
  File "/usr/lib/python2.6/urllib2.py", line 369, in _call_chain
    result = func(*args)
  File "/usr/lib/python2.6/urllib2.py", line 518, in http_error_default
    raise HTTPError(req.get_full_url(), code, msg, hdrs, fp)
urllib2.HTTPError: HTTP Error 404: Not Found
</snippet></ROW><ROW><id>7562017</id><snippet>import sys
sys.path.append("/path/to/numpy")
import numpy
</snippet></ROW><ROW><id>7562200</id><snippet>{% thumbnail project.image "148x108" crop="center" format="PNG" as im %}
</snippet></ROW><ROW><id>7562357</id><snippet>a = 'b' if a == 'a' else 'c'</snippet></ROW><ROW><id>7562365</id><snippet>f = open("/home/docs/foo.txt")
</snippet></ROW><ROW><id>7562365</id><snippet>import os
os.chdir("/home/docs")
f = open("foo.txt")
</snippet></ROW><ROW><id>7562836</id><snippet>class Tag(object):
    def __init__(self, name, type):
        self.name = name
        self.type = type
        self.dispatch = {"cold":Tag.process_cold, "warm":Tag.process_warm, "hot":Tag.process_hot}

    def process(self):
        self.dispatch[type](self)

    def process_cold(self):
        # do something

    def process_warm(self):
        # do something else

    def process_hot(self):
        # do something even elser
</snippet></ROW><ROW><id>7562836</id><snippet>def dispatchTable( klass, prefix ):
    """
    Given a class and a method prefix string, collect all methods in the class
    that start with the prefix, and return a dict mapping from the part of the 
    method name after the prefix to the method itself.

    e.g. you have a class Machine with methods opcode_foo, opcode_bar.
    create_dispatch_table( Machine, "opcode_" ) 
    yields a dict
    { "foo": Machine.opcode_foo, "bar": Machine.opcode_bar }
    """

    dispatch = {}
    for name, fun in inspect.getmembers( klass, inspect.ismethod ):
        if name.startswith(prefix):
            # print "found %s.%s"%(k.__name__,name)
            dispatch[ name.split(prefix)[1] ] = fun 

    return dispatch   
</snippet></ROW><ROW><id>7562858</id><snippet>print</snippet></ROW><ROW><id>7562858</id><snippet>&gt;&gt;&gt; "\\n"
'\\n'
&gt;&gt;&gt; print "\\n"
\n
</snippet></ROW><ROW><id>7562869</id><snippet>Bar</snippet></ROW><ROW><id>7562869</id><snippet>related_name</snippet></ROW><ROW><id>7562869</id><snippet>Bar</snippet></ROW><ROW><id>7562887</id><snippet>__init__()</snippet></ROW><ROW><id>7562887</id><snippet>__init__()</snippet></ROW><ROW><id>7562887</id><snippet>setUp()</snippet></ROW><ROW><id>7562887</id><snippet>unittest</snippet></ROW><ROW><id>7562887</id><snippet>__init__()</snippet></ROW><ROW><id>7562887</id><snippet>__init__()</snippet></ROW><ROW><id>7562887</id><snippet>unittest/case.py</snippet></ROW><ROW><id>7562887</id><snippet>def __init__(self, methodName='runTest'):
</snippet></ROW><ROW><id>7562887</id><snippet>class BaseTest(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        unittest.TestCase.__init__(self, *args, **kwargs)

    def setUp(self):
        print "Base.setUp()"

    def tearDown(self):
        print "Base.tearDown()"


class TestSomething(BaseTest):
    def __init__(self, *args, **kwargs):
        BaseTest.__init__(self, *args, **kwargs)
        self.controller = object()

    def test_silly(self):
        self.assertTrue(1+1 == 2)
</snippet></ROW><ROW><id>7562988</id><snippet>word_list = words_str.split(" ")
</snippet></ROW><ROW><id>7562988</id><snippet>pal_count = {
    x: word_list.count(x)  # reduce-ish
    for x in word_list     # map-ish
    if x == x[::-1]        # filter-ish
    }
for x, y in pal_count.iteritems():
    print x, y             # print the results!
</snippet></ROW><ROW><id>7562988</id><snippet>pal_count = {</snippet></ROW><ROW><id>7562988</id><snippet>x: word_list.count(x)</snippet></ROW><ROW><id>7562988</id><snippet>for x in word_list</snippet></ROW><ROW><id>7562988</id><snippet>if x == x[::-1] # cool logic, btw</snippet></ROW><ROW><id>7562988</id><snippet>}</snippet></ROW><ROW><id>7562988</id><snippet>pal_count = dict()
for x in word_list:                     # same loop
    if x == x[::-1]                     # is this a palindrome?
        if x in pal_count:              # have we seen before?
            pal_count[x] += 1
        else:                           # this one is new!
            pal_count.setdefault(x, 1)
</snippet></ROW><ROW><id>7563052</id><snippet># In the shell
# fetch events from the db
&gt;&gt;&gt; events = Event.objects.all()
&gt;&gt;&gt; for event in events:
...     # fetch all the choices for this event
...     event_choices = event.choice_set.all() 
...     print event_choices
</snippet></ROW><ROW><id>7563052</id><snippet>{% for event in location_list %}                         
  {{ event.lat }}, {{ event.long }}
  &lt;ul&gt;
    {% for choice in event.choice_set.all %}
      &lt;li&gt;{{ choice }}&lt;/li&gt;
    {% endfor %}
  &lt;/ul&gt;
{% endfor %}
</snippet></ROW><ROW><id>7563052</id><snippet>related_name</snippet></ROW><ROW><id>7563052</id><snippet>class Choice(models.Model):
    event = models.ForeignKey(Event, related_name="choices")
</snippet></ROW><ROW><id>7563052</id><snippet>event.choices.all()</snippet></ROW><ROW><id>7563052</id><snippet>{% for choice in event.choices.all %}</snippet></ROW><ROW><id>7563229</id><snippet>from google.appengine.api import datastore
</snippet></ROW><ROW><id>7563229</id><snippet>query = datastore.Query(Project._meta.db_table)
for p in query.Run():
    p['id'] = c.key().id() #Convert from app engine key
    print Project.from_json(p)
</snippet></ROW><ROW><id>7563229</id><snippet>from djangoappengine.db.compiler import create_key
async = datastore.GetAsync(create_key(Project._meta.db_table, project_id))
p = async.get_result()
p['id'] = c.key().id() #Convert from app engine key
print Project.from_json(p)
</snippet></ROW><ROW><id>7563294</id><snippet>my_serialized_object = cPickle.dumps(my_object, cPickle.HIGHEST_PROTOCOL)
</snippet></ROW><ROW><id>7563314</id><snippet>def walk1(dir):
    res = []
    # for all entries in the folder,
    for name in os.listdir(dir):
        # compute the path relative to `dir`
        path = os.path.join(dir,name)
        # include entries recursively.
        if os.path.isfile(path):
            # the path points to a file, save it.
            res.append(path)
        else:
            # the path points to a directory, so we need
            # to fetch the list of entries in there too.
            res.extend(walk1(path))
    # produce all entries at once.
    return res
</snippet></ROW><ROW><id>7563406</id><snippet>def get_random_image(self, category):
    fileinfos = FileInfo.all().filter("category =", category)
    return fileinfos[random.randint(0, fileinfos.count()-1)] 
</snippet></ROW><ROW><id>7563406</id><snippet>FileInfo</snippet></ROW><ROW><id>7563406</id><snippet>q = FileInfo.all()
q.filter('category =', category)
q.filter('random &gt;=', random.random())
return q.get()
</snippet></ROW><ROW><id>7563551</id><snippet>SFTP get</snippet></ROW><ROW><id>7563551</id><snippet>os.open</snippet></ROW><ROW><id>7563728</id><snippet>loop</snippet></ROW><ROW><id>7563728</id><snippet>handleHotKey</snippet></ROW><ROW><id>7563728</id><snippet>regHotKey2</snippet></ROW><ROW><id>7563728</id><snippet>handleHotKey2</snippet></ROW><ROW><id>7563728</id><snippet>handleHotKey</snippet></ROW><ROW><id>7563728</id><snippet>handleHotKey2</snippet></ROW><ROW><id>7563728</id><snippet>x=self.regHotKey2(); print(x)</snippet></ROW><ROW><id>7563728</id><snippet>def __init__(self, parent, title):
    ... your original stuff ...
    self.clicker_loop = False
</snippet></ROW><ROW><id>7563728</id><snippet>def handleHotKey(self, evt):
    self.clicker_loop = True
    while self.clicker_loop:
        ... do the thing ...

def handleHotKey2(self, evt):
    self.clicker_loop = False
</snippet></ROW><ROW><id>7563728</id><snippet>def handleHotKey(self, evt):
    if self.clicker_loop:
        self.clicker_loop = False
    else:
        self.clicker_loop = True
</snippet></ROW><ROW><id>7564130</id><snippet>ron= (d/(1-b))
</snippet></ROW><ROW><id>7564130</id><snippet>b</snippet></ROW><ROW><id>7564130</id><snippet>b</snippet></ROW><ROW><id>7564130</id><snippet>ron = [ d/(1-x) for x in b ]
</snippet></ROW><ROW><id>7564130</id><snippet>ron= (d/(1-b))</snippet></ROW><ROW><id>7564130</id><snippet>b</snippet></ROW><ROW><id>7564184</id><snippet>pickle</snippet></ROW><ROW><id>7564733</id><snippet>self.dialog_notification()</snippet></ROW><ROW><id>7564733</id><snippet>gobject.idle_add(self.dialog_notification, args...)</snippet></ROW><ROW><id>7564929</id><snippet>hist2[0]</snippet></ROW><ROW><id>7564929</id><snippet>sum(hist2[0])</snippet></ROW><ROW><id>7564929</id><snippet>len(hist2[0])</snippet></ROW><ROW><id>7564929</id><snippet>red_hist = hist2[0]
weighted_sum = sum(i * red_hist[i] for i in range(len(red_hist)))
num_pixels = sum(red_hist)
weighted_average = weighted_sum / num_pixels
</snippet></ROW><ROW><id>7565003</id><snippet>import re

# returns (float,endpos)
def strtod(s, pos):
  m = re.match(r'[+-]?\d*[.]?\d*(?:[eE][+-]?\d+)?', s[pos:])
  if m.group(0) == '': raise ValueError('bad float: %s' % s[pos:])
  return float(m.group(0)), pos + m.end()

print strtod('(a+2.0)/1e-1', 3)
print strtod('(a+2.0)/1e-1', 8)
</snippet></ROW><ROW><id>7565106</id><snippet>def func2(x,**c):
    if len(c) &gt; 0:
    print len(c)
        print c
</snippet></ROW><ROW><id>7565106</id><snippet>func2(1, a=1, b=2)
</snippet></ROW><ROW><id>7565106</id><snippet>u={'a':1,'b':2}
func2(1, **u)
</snippet></ROW><ROW><id>7565699</id><snippet>print  [''.join(x) for x in product('ABC', repeat=3)]
</snippet></ROW><ROW><id>7565699</id><snippet>['AAA', 'AAB', 'AAC', 'ABA', 'ABB', 'ABC', 'ACA', 'ACB', 'ACC', 'BAA', 'BAB', 
'BAC', 'BBA', 'BBB', 'BBC', 'BCA', 'BCB', 'BCC', 'CAA', 'CAB', 'CAC', 'CBA', 
'CBB', 'CBC', 'CCA', 'CCB', 'CCC']
</snippet></ROW><ROW><id>7565739</id><snippet>__lt__</snippet></ROW><ROW><id>7565739</id><snippet>class Obj(object):
    def __init__(self, value):
        self.value = value
    def __lt__(self, other):
        return self.value &lt; other.value
    def __repr__(self):
        return 'Obj(%r)' % self.value

obj_list = [Obj(2), Obj(1), Obj(4), Obj(3)]

print max(obj_list)
print min(obj_list)
print sorted(obj_list)
</snippet></ROW><ROW><id>7565739</id><snippet>__cmp__</snippet></ROW><ROW><id>7565739</id><snippet>__lt__</snippet></ROW><ROW><id>7565739</id><snippet>from operator import attrgetter
from functools import partial

valget = attrgetter('value')

maxval = partial(max, key=valget)
minval = partial(max, key=valget)
sortedval = partial(sorted, key=valget)
sortval = partial(list.sort, key=valget)
</snippet></ROW><ROW><id>7565739</id><snippet>maxval(obj_list)</snippet></ROW><ROW><id>7565739</id><snippet>max(obj_list)</snippet></ROW><ROW><id>7565739</id><snippet>sortval(obj_list)</snippet></ROW><ROW><id>7565739</id><snippet>obj_list.sort()</snippet></ROW><ROW><id>7565905</id><snippet>[1,4]</snippet></ROW><ROW><id>7565905</id><snippet>(1,4)</snippet></ROW><ROW><id>7565905</id><snippet>range</snippet></ROW><ROW><id>7565905</id><snippet>genres = [value_from_key(wb, 'Genre (%s)'%(i), n) for i in range(1,4)]
</snippet></ROW><ROW><id>7566029</id><snippet>In [4]: d = {}
In [5]: c = [1,2]
In [7]: d[1] = c
In [8]: d[2] = c
In [9]: d
Out[9]: {1: [1, 2], 2: [1, 2]}
In [10]: c.append(3)
In [11]: d
Out[11]: {1: [1, 2, 3], 2: [1, 2, 3]}
</snippet></ROW><ROW><id>7566078</id><snippet>dbo.tbConsumerAdviceCategories.ID_ConsumerAdviceCategories</snippet></ROW><ROW><id>7566178</id><snippet>HELLO</snippet></ROW><ROW><id>7566178</id><snippet>END</snippet></ROW><ROW><id>7566178</id><snippet>&gt;&gt;&gt; re.search(r'((?:(?!HELLO|BYE).)*)(HELLO|BYE)?(.*?END)', r'qweHELLOsdfsEND').groups()
('qwe', 'HELLO', 'sdfsEND')
&gt;&gt;&gt; re.search(r'((?:(?!HELLO|BYE).)*)(HELLO|BYE)?(.*?END)', r'qweBLAHsdfsEND').groups()
('qweBLAHsdfs', None, 'END')
</snippet></ROW><ROW><id>7566178</id><snippet>(?:         # Try to match the following:
 (?!        # First assert that it's impossible to match
  HELLO|BYE # HELLO or BYE
 )          # at this point in the string.
 .          # If so, match any character.
)*          # Do this any number of times.
</snippet></ROW><ROW><id>7566644</id><snippet>returns</snippet></ROW><ROW><id>7566644</id><snippet>vars</snippet></ROW><ROW><id>7566644</id><snippet>grammar T;

options {
  language=Python;
}

@members {
  variables = {}
}

parse_with [vars] returns [value]
@init{self.variables = vars}
  :  expression EOF                            {value = $expression.value}
  ;

expression returns [value]
  :  addition                                  {value = $addition.value}
  ;

addition returns [value]
  :  e1=multiplication                         {value = $e1.value}
                       ( '+' e2=multiplication {value = value + $e2.value}
                       | '-' e2=multiplication {value = value - $e2.value}
                       )*
  ;

multiplication returns [value]
  :  e1=unary                                  {value = $e1.value}
              ( '*' e2=unary                   {value = value * $e2.value}
              | '/' e2=unary                   {value = value / $e2.value}
              )*
  ;

unary returns [value]
  :  '-' atom                                  {value = -1 * $atom.value}
  |  atom                                      {value = $atom.value}
  ;

atom returns [value]
  :  Number                                    {value = float($Number.text)}
  |  ID                                        {value = self.variables[$ID.text]}
  |  '(' expression ')'                        {value = $expression.value}
  ;

Number : '0'..'9'+ ('.' '0'..'9'+)?;
ID     : ('a'..'z' | 'A'..'Z')+;
Space  : ' ' {$channel=HIDDEN};
</snippet></ROW><ROW><id>7566644</id><snippet>#!/usr/bin/env python
import antlr3
from antlr3 import *
from TLexer import *
from TParser import *

input = 'a + (1.0 + 2) * 3'
lexer = TLexer(antlr3.ANTLRStringStream(input))
parser = TParser(antlr3.CommonTokenStream(lexer))
print '{0} = {1}'.format(input, parser.parse_with({'a':42}))
</snippet></ROW><ROW><id>7566644</id><snippet>parse
  :  foo              {print 'a={0} b={1} c={2}'.format($foo.a, $foo.b, $foo.c)}
  ;

foo returns [a, b, c]
  :  A B C            {a=$A.text; b=$B.text; b=$C.text}
  ;
</snippet></ROW><ROW><id>7566644</id><snippet>print</snippet></ROW><ROW><id>7566644</id><snippet>parse_with [vars]
@init{self.variables = vars}
  :  expression EOF                            {print 'OUT:', $expression.value}
  ;
</snippet></ROW><ROW><id>7566644</id><snippet>./run.py &gt; out.txt
</snippet></ROW><ROW><id>7566644</id><snippet>OUT: 51.0</snippet></ROW><ROW><id>7566644</id><snippet>template</snippet></ROW><ROW><id>7566644</id><snippet>options {
  output=template;
  language=Python;
}
</snippet></ROW><ROW><id>7566790</id><snippet>(?&lt;!\d)\d{1,2}\s+kg
</snippet></ROW><ROW><id>7566790</id><snippet>(?&lt;!...)</snippet></ROW><ROW><id>7566790</id><snippet>#!/usr/bin/env python
import re
string = 'something: 20 kg/ something: 120 kg'
print re.findall(r'(?&lt;!\d)\d{1,2}\s+kg', string)
</snippet></ROW><ROW><id>7566790</id><snippet>['20 kg']</snippet></ROW><ROW><id>7566790</id><snippet>\b</snippet></ROW><ROW><id>7566790</id><snippet>r'\b\d{1,2}\s+kg'</snippet></ROW><ROW><id>7566944</id><snippet>f.read</snippet></ROW><ROW><id>7566944</id><snippet>\r\n</snippet></ROW><ROW><id>7566944</id><snippet>\n</snippet></ROW><ROW><id>7566944</id><snippet>f = open(infilename, "rb")
</snippet></ROW><ROW><id>7566951</id><snippet>line.split(None, 2)</snippet></ROW><ROW><id>7566951</id><snippet>pattern = re.compile(r'([12345])\s+\(d+)\s+\(.*\S)')
f = open('XX.txt', 'r') # No calling readlines; lazy iteration is better
for line in f:
    m = pattern.match(line)
    if m:
        cu.execute('''INSERT INTO bugInfo2 (pa, k, details) VALUES(?,?,?)''',
            (m.group(2), m.group(1), m.group(3)))
</snippet></ROW><ROW><id>7566999</id><snippet>class KittenFactory(object):
    def __create_teh_secret_objectz(self):
        class Kitten(object):
            i_can_haz_invisible = True
        return Kitten()
</snippet></ROW><ROW><id>7566999</id><snippet>copy()</snippet></ROW><ROW><id>7566999</id><snippet>type()</snippet></ROW><ROW><id>7567196</id><snippet>user = request.session['user']</snippet></ROW><ROW><id>7567299</id><snippet>"0101" * N
</snippet></ROW><ROW><id>7567339</id><snippet>import sys, logging

class Logger:
    def __init__(self, name):
        formatter = logging.Formatter('%(filename)s:%(lineno)s %(levelname)s:%(message)s')
        stdout_handler = logging.StreamHandler(sys.stdout)
        stdout_handler.setFormatter(formatter)
        self.logger=logging.getLogger(name)
        self.logger.addHandler(stdout_handler)
        self.logger.setLevel(logging.DEBUG)

    def debug(self, message):
        self.logger.debug(message)
</snippet></ROW><ROW><id>7567339</id><snippet>logger = logging.getLogger(__name__)</snippet></ROW><ROW><id>7567379</id><snippet>mylist = list(xrange(10))
</snippet></ROW><ROW><id>7567379</id><snippet>random.choice</snippet></ROW><ROW><id>7567379</id><snippet>import random
...
random.choice(mylist)
</snippet></ROW><ROW><id>7567379</id><snippet>list.remove()</snippet></ROW><ROW><id>7567379</id><snippet>import random
...
value = random.choice(mylist)
mylist.remove(value)
</snippet></ROW><ROW><id>7567770</id><snippet>title = item.find('title').text
title = title.encode('iso-8859-1')
</snippet></ROW><ROW><id>7567946</id><snippet>./myproject.conf</snippet></ROW><ROW><id>7567946</id><snippet>~user/myproject.conf</snippet></ROW><ROW><id>7567946</id><snippet>/etc/myproject/myproject.conf</snippet></ROW><ROW><id>7567946</id><snippet>MYPROJECT_CONF</snippet></ROW><ROW><id>7567946</id><snippet>config= None
for loc in os.curdir, os.path.expanduser("~"), "/etc/myproject", os.environ.get("MYPROJECT_CONF"):
    try: 
        with open(os.path.join(loc,"myproject.conf")) as source:
            config.readfp( source )
    except IOError:
        pass
</snippet></ROW><ROW><id>7568080</id><snippet>reverse_lazy()</snippet></ROW><ROW><id>7568080</id><snippet>from django.core.urlresolvers import reverse_lazy
urlpatterns = patterns("myapp.views",
    (r"^$", redirect_to, {"url": reverse_lazy("myapp_title")}),
    (r"^(?P&lt;title&gt;.+)/$", "article", name="myapp_title"),
    ...
)
</snippet></ROW><ROW><id>7568080</id><snippet>reverse_lazy()</snippet></ROW><ROW><id>7568080</id><snippet>reverse_lazy()</snippet></ROW><ROW><id>7568080</id><snippet>(r"^$", redirect_to, {"url": "myapp/title/"}),
</snippet></ROW><ROW><id>7568115</id><snippet>b64decode</snippet></ROW><ROW><id>7568115</id><snippet>b64encode</snippet></ROW><ROW><id>7568115</id><snippet>encrypt</snippet></ROW><ROW><id>7568115</id><snippet>decrypt</snippet></ROW><ROW><id>7568174</id><snippet>u"Click me !**"</snippet></ROW><ROW><id>7568174</id><snippet>"Click me !**"</snippet></ROW><ROW><id>7568174</id><snippet>u</snippet></ROW><ROW><id>7568174</id><snippet>unicode</snippet></ROW><ROW><id>7568174</id><snippet>str</snippet></ROW><ROW><id>7568174</id><snippet>str</snippet></ROW><ROW><id>7568174</id><snippet>unicode</snippet></ROW><ROW><id>7568174</id><snippet>u</snippet></ROW><ROW><id>7568349</id><snippet>patterns()</snippet></ROW><ROW><id>7568349</id><snippet>urlpatterns</snippet></ROW><ROW><id>7568442</id><snippet>imaplib</snippet></ROW><ROW><id>7568442</id><snippet>quopri.decodestring()</snippet></ROW><ROW><id>7568645</id><snippet>print s % tuple(x)
</snippet></ROW><ROW><id>7568645</id><snippet>print s % (x)
</snippet></ROW><ROW><id>7568750</id><snippet>Meta</snippet></ROW><ROW><id>7568750</id><snippet>class InternForm(ModelForm):

    # ...

    class Meta:
        model = Intern

class ApplyInternForm(InternForm):

    class Meta:
        model = Intern
        exclude = ('is_active',)
</snippet></ROW><ROW><id>7569029</id><snippet>u</snippet></ROW><ROW><id>7569029</id><snippet>u"..."</snippet></ROW><ROW><id>7569029</id><snippet>b"..."</snippet></ROW><ROW><id>7569146</id><snippet>#!/usr/bin/env python
import re
text = 'Proposal will boost bailout fund, inject cash into banks and cut Greek debt says reports.'
pattern = re.compile(r'boost bailout[\s\S]*?debt')
print re.findall(pattern, text)
</snippet></ROW><ROW><id>7570081</id><snippet>start = time.strptime('2012-08-26 13:00:00', '%Y-%m-%d %H:%M:%S')
start = datetime.datetime(*start[:6])
</snippet></ROW><ROW><id>7570346</id><snippet>XML.ElementFromURL(feed, encoding='gb2312')</snippet></ROW><ROW><id>7570346</id><snippet>&lt;?xml version="1.0" encoding="gb2312"?&gt;</snippet></ROW><ROW><id>7570346</id><snippet>encoding</snippet></ROW><ROW><id>7570346</id><snippet>encoding</snippet></ROW><ROW><id>7571120</id><snippet>import time, os
from  multiprocessing import Process

def worker():
    print "I'm process %s, my father is %s" % (os.getpid(), os.getppid())

print "I'm the main process %s" % os.getpid()
for i in range(0,3):
    Process(target=worker).start()
</snippet></ROW><ROW><id>7571120</id><snippet>I'm the main process 5897
I'm process 5898, my father is 5897
I'm process 5899, my father is 5897
I'm process 5900, my father is 5897
</snippet></ROW><ROW><id>7571374</id><snippet>shlex</snippet></ROW><ROW><id>7571374</id><snippet>&gt;&gt;&gt; list(shlex.shlex("/bin/ksh -c \". /Home/user/.khsrc\""))
['/', 'bin', '/', 'ksh', '-', 'c', '". /Home/user/.khsrc"']
</snippet></ROW><ROW><id>7571374</id><snippet>import subprocess

command_line = ["/bin/ksh", "-c", "/Home/user/.khsrc"]
subprocess.call(command_line)
</snippet></ROW><ROW><id>7571423</id><snippet>BlobstoreLineInputReader</snippet></ROW><ROW><id>7571472</id><snippet>"token" :"ayaljltja"</snippet></ROW><ROW><id>7571472</id><snippet>"addresses": [...]</snippet></ROW><ROW><id>7571665</id><snippet>7 in a
</snippet></ROW><ROW><id>7571665</id><snippet>set</snippet></ROW><ROW><id>7571668</id><snippet>forloop.counter</snippet></ROW><ROW><id>7571668</id><snippet>{% if forloop.counter|divisibleby:"2" %}even{% else %}odd{% endif %}
</snippet></ROW><ROW><id>7571713</id><snippet>\n</snippet></ROW><ROW><id>7571713</id><snippet>''</snippet></ROW><ROW><id>7571713</id><snippet>""</snippet></ROW><ROW><id>7571713</id><snippet>'I like to \\n ride my bike'</snippet></ROW><ROW><id>7571713</id><snippet>r'I like to \n ride my bike'</snippet></ROW><ROW><id>7571713</id><snippet>r</snippet></ROW><ROW><id>7571727</id><snippet>import oauth2

REQUEST_TOKEN_URL = 'http://www.tumblr.com/oauth/request_token'
AUTHORIZATION_URL = 'http://www.tumblr.com/oauth/authorize'
ACCESS_TOKEN_URL = 'http://www.tumblr.com/oauth/access_token'
CONSUMER_KEY = 'your_consumer_key'
CONSUMER_SECRET = 'your_consumer_secret'

consumer = oauth2.Consumer(CONSUMER_KEY, CONSUMER_SECRET)
client = oauth2.Client(consumer)
</snippet></ROW><ROW><id>7571727</id><snippet>resp, content = client.request(REQUEST_TOKEN_URL, "GET")

request_token = dict(urlparse.parse_qsl(content))
print "Request Token:"
print "    - oauth_token        = %s" % request_token['oauth_token']
print "    - oauth_token_secret = %s" % request_token['oauth_token_secret']
</snippet></ROW><ROW><id>7571727</id><snippet>print "Go to the following link in your browser:"
print "%s?oauth_token=%s" % (AUTHORIZATION_URL, request_token['oauth_token'])

# After the user has granted access to you, the consumer, the provider will
# redirect you to whatever URL you have told them to redirect to. You can 
# usually define this in the oauth_callback argument as well.
oauth_verifier = raw_input('What is the PIN? ')
</snippet></ROW><ROW><id>7571727</id><snippet>token = oauth2.Token(request_token['oauth_token'], request_token['oauth_token_secret'])
token.set_verifier(oauth_verifier)
client = oauth2.Client(consumer, token)

resp, content = client.request(ACCESS_TOKEN_URL, "POST")
access_token = dict(urlparse.parse_qsl(content))

print "Access Token:"
print "    - oauth_token        = %s" % access_token['oauth_token']
print "    - oauth_token_secret = %s" % access_token['oauth_token_secret']
print
</snippet></ROW><ROW><id>7572079</id><snippet>a_image.tif</snippet></ROW><ROW><id>7572079</id><snippet>&gt;&gt;&gt; import Image
&gt;&gt;&gt; im = Image.open('a_image.tif')
&gt;&gt;&gt; im.show()
</snippet></ROW><ROW><id>7572079</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; imarray = numpy.array(im)
</snippet></ROW><ROW><id>7572079</id><snippet>&gt;&gt;&gt; imarray.shape
(44, 330)
&gt;&gt;&gt; im.size
(330, 44)
</snippet></ROW><ROW><id>7572079</id><snippet>uint8</snippet></ROW><ROW><id>7572079</id><snippet>&gt;&gt;&gt; imarray
array([[  0,   1,   2, ..., 244, 245, 246],
       [  0,   1,   2, ..., 244, 245, 246],
       [  0,   1,   2, ..., 244, 245, 246],
       ..., 
       [  0,   1,   2, ..., 244, 245, 246],
       [  0,   1,   2, ..., 244, 245, 246],
       [  0,   1,   2, ..., 244, 245, 246]], dtype=uint8)
</snippet></ROW><ROW><id>7572079</id><snippet>&gt;&gt;&gt; Image.fromarray(imarray)
&lt;Image.Image image mode=L size=330x44 at 0x2786518&gt;
</snippet></ROW><ROW><id>7572483</id><snippet>Layout</snippet></ROW><ROW><id>7572483</id><snippet>class MainPanel(wx.Panel):
    def __init__(self, parent):
        super(MainPanel, self).__init__(parent)

        #Atributos
        bmp = wx.Bitmap('./img.png',wx.BITMAP_TYPE_PNG)
        self.boton = wx.BitmapButton(self,bitmap=bmp)

        # Layout
        self.sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer.Add(self.boton)
        self.SetSizer(self.sizer)

        self.Bind(wx.EVT_BUTTON,self.add,self.boton)

    def add(self,event):
        self.sizer.Add(wx.StaticText(self,label='Testing'))
        self.Layout()
</snippet></ROW><ROW><id>7572684</id><snippet>line_reader()</snippet></ROW><ROW><id>7572684</id><snippet>line_reader_iter</snippet></ROW><ROW><id>7572684</id><snippet>infile</snippet></ROW><ROW><id>7572684</id><snippet>readline()</snippet></ROW><ROW><id>7572684</id><snippet>&gt;&gt;&gt; counter = lambda: next(iter(range(10)))
&gt;&gt;&gt; counter()
0
&gt;&gt;&gt; counter()    # each time the lambda is called, a new range iter is created
0
</snippet></ROW><ROW><id>7572684</id><snippet>line_reader = line_reader_iter(infile).next
</snippet></ROW><ROW><id>7572684</id><snippet>&gt;&gt;&gt; counter = iter(range(10)).next
&gt;&gt;&gt; counter()
0
&gt;&gt;&gt; counter()    # yay, we are actually using the same iterator
1
</snippet></ROW><ROW><id>7572744</id><snippet>datetime.datetime</snippet></ROW><ROW><id>7572744</id><snippet>datetime</snippet></ROW><ROW><id>7572744</id><snippet>from datetime import datetime</snippet></ROW><ROW><id>7572744</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.date.today()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'method_descriptor' object has no attribute 'today'
</snippet></ROW><ROW><id>7572865</id><snippet>proxy-set-header</snippet></ROW><ROW><id>7572865</id><snippet>location /foo</snippet></ROW><ROW><id>7573147</id><snippet>for x in schedule:
    if 'DELETE' in x:
        schedule.remove(x)
</snippet></ROW><ROW><id>7573147</id><snippet>schedule[:] = [x in schedule where 'DELETE' not in x]
</snippet></ROW><ROW><id>7573159</id><snippet>report_tuples = [
    ('http://www.myreport.com/report1', report1_date_object_or_string),
    ('http://www.myreport.com/report2', report2_date_object_or_string),
    ('http://www.myreport.com/report3', report3_date_object_or_string),
]
sorted(report_tuples, key=lambda reports: reports[1])   # sort by date
html = '&lt;html&gt;&lt;body&gt;' #add anything else in here or even better 
                      #use a template that you read and complement
lastDate = None
for r in report_tuples:
    if not lastDate or not lastDate == r[1]:
        html += '&lt;h3&gt;%s&lt;/h3&gt;' % (str(r[1]))
    html += '&lt;a href="%s"&gt;Your Report Title&lt;/a&gt;' % (r[0])

return html #or even better, write it to the disk.
</snippet></ROW><ROW><id>7573380</id><snippet>__dict__</snippet></ROW><ROW><id>7573380</id><snippet>MyObj.__dict__.hasKey(o)</snippet></ROW><ROW><id>7573556</id><snippet>gcc</snippet></ROW><ROW><id>7573556</id><snippet>cc1: error: unrecognized command line option "-arch"  
</snippet></ROW><ROW><id>7573556</id><snippet>/Library/Frameworks/Python.framework/Versions/Current/lib/python2.5/config/Makefile</snippet></ROW><ROW><id>7573556</id><snippet>BASECFLAGS</snippet></ROW><ROW><id>7573556</id><snippet>export C_INCLUDE_PATH=/Developer/SDKs/MacOSX10.5.sdk/usr/include
export LIBRARY_PATH=/Developer/SDKs/MacOSX10.5.sdk/usr/lib  
</snippet></ROW><ROW><id>7573556</id><snippet>cc1: error: unrecognized command line option "-Wno-long-double"
</snippet></ROW><ROW><id>7573636</id><snippet>reload</snippet></ROW><ROW><id>7573636</id><snippet>Ignacio Vazquez-Abrams</snippet></ROW><ROW><id>7573814</id><snippet>readline()</snippet></ROW><ROW><id>7573869</id><snippet>&gt;&gt;&gt; ast.literal_eval(u"{u'city': u'new-york', u'name': u'Home', u'display_value': u'2 Main Street'}")
{u'city': u'new-york', u'name': u'Home', u'display_value': u'2 Main Street'}
</snippet></ROW><ROW><id>7574143</id><snippet>(255, 255, 255)</snippet></ROW><ROW><id>7574143</id><snippet>blue</snippet></ROW><ROW><id>7574171</id><snippet>&gt;&gt;&gt; import difflib
&gt;&gt;&gt; difflib.get_close_matches('FO', ['FOO', 'BAR', 'BAZ'])
['FOO']
&gt;&gt;&gt; difflib.get_close_matches('F00', ['FOO', 'BAR', 'BAZ'])
[]
&gt;&gt;&gt; difflib.get_close_matches('F0O', ['FOO', 'BAR', 'BAZ'])
['FOO']
&gt;&gt;&gt; difflib.get_close_matches('FO0', ['FOO', 'BAR', 'BAZ'])
['FOO']
</snippet></ROW><ROW><id>7574171</id><snippet>cutoff</snippet></ROW><ROW><id>7574171</id><snippet>&gt;&gt;&gt; difflib.get_close_matches('F00', ['FOO', 'BAR', 'BAZ'], cutoff=0.3)
['FOO']
</snippet></ROW><ROW><id>7574907</id><snippet>os.system("gnome-terminal -e 'bash -c \"sudo apt-get update; exec bash\"'")
</snippet></ROW><ROW><id>7575097</id><snippet>logging</snippet></ROW><ROW><id>7575097</id><snippet>logging.basicConfig(level=logging.DEBUG, format="%(asctime)s %(msg)s")
</snippet></ROW><ROW><id>7575366</id><snippet>output = subprocess.check_output(["ping", "-c","2", "-W","2", "1.1.1.1"])
</snippet></ROW><ROW><id>7575655</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>7575655</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>7575655</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>7575655</id><snippet>which python</snippet></ROW><ROW><id>7575655</id><snippet>.</snippet></ROW><ROW><id>7575655</id><snippet>PATH</snippet></ROW><ROW><id>7575655</id><snippet>./script.py</snippet></ROW><ROW><id>7575655</id><snippet>+x</snippet></ROW><ROW><id>7575655</id><snippet>ls -l</snippet></ROW><ROW><id>7575778</id><snippet>In [48]: ''.join('%5.1f ' % n for n in s)
Out[48]: ' 12.0  45.0  87.0  34.0  65.0 '
</snippet></ROW><ROW><id>7575778</id><snippet>In [49]: ('%5.1f ' * len(s)) % tuple(s)
Out[49]: ' 12.0  45.0  87.0  34.0  65.0 '
</snippet></ROW><ROW><id>7576169</id><snippet>print(input_map)  
</snippet></ROW><ROW><id>7576169</id><snippet>null</snippet></ROW><ROW><id>7576169</id><snippet>line</snippet></ROW><ROW><id>7576169</id><snippet>eval</snippet></ROW><ROW><id>7576169</id><snippet>NameError</snippet></ROW><ROW><id>7576169</id><snippet>simplejson.loads</snippet></ROW><ROW><id>7576169</id><snippet>import simplejson
line='{"id": null, "type": null, "order_for": null, "name": "Name"}'
input_map = simplejson.loads(line)  
print(input_map)  
# {u'order_for': None, u'type': None, u'id': None, u'name': u'Name'}

print(simplejson.dumps(input_map))
# {"order_for": null, "type": null, "id": null, "name": "Name"}
</snippet></ROW><ROW><id>7576420</id><snippet>fromfile</snippet></ROW><ROW><id>7576420</id><snippet>fromfile</snippet></ROW><ROW><id>7576433</id><snippet>common/project</snippet></ROW><ROW><id>7576433</id><snippet>frontend/project</snippet></ROW><ROW><id>7576433</id><snippet>backend/project</snippet></ROW><ROW><id>7576433</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>7576433</id><snippet>project</snippet></ROW><ROW><id>7576433</id><snippet>project/</snippet></ROW><ROW><id>7576433</id><snippet>__init__.py</snippet></ROW><ROW><id>7576433</id><snippet>import pkgutil
__path__ = pkgutil.extend_path(__path__, __name__)
</snippet></ROW><ROW><id>7576433</id><snippet>common</snippet></ROW><ROW><id>7576433</id><snippet>frontend</snippet></ROW><ROW><id>7576433</id><snippet>common</snippet></ROW><ROW><id>7576433</id><snippet>backend</snippet></ROW><ROW><id>7576559</id><snippet>pprint</snippet></ROW><ROW><id>7576559</id><snippet>pprint(json.loads(data))
</snippet></ROW><ROW><id>7577014</id><snippet>mod = sys.__modules__[__name__]
</snippet></ROW><ROW><id>7577014</id><snippet>__file__</snippet></ROW><ROW><id>7577014</id><snippet>mod.__file__
</snippet></ROW><ROW><id>7577014</id><snippet>dirname</snippet></ROW><ROW><id>7577094</id><snippet>if</snippet></ROW><ROW><id>7577094</id><snippet>${'&lt;a href="#"&gt;Opinions&lt;/a&gt;&lt;/li&gt;' if whichnav == 'opinions' else 'Opinions' | n}
</snippet></ROW><ROW><id>7577094</id><snippet>| n</snippet></ROW><ROW><id>7577157</id><snippet>for line in lines</snippet></ROW><ROW><id>7577157</id><snippet>record.something = line.rstrip()</snippet></ROW><ROW><id>7577200</id><snippet>smtplib</snippet></ROW><ROW><id>7577205</id><snippet>import numpy
from matplotlib import pyplot
pyplot.imshow(numpy.random.random( (100,100) ), extent = [0,50, 100, 0] )
cax = pyplot.axes([0.80, 0.1, 0.04, 0.8])
pyplot.colorbar(cax=cax)
pyplot.show()
</snippet></ROW><ROW><id>7577226</id><snippet>base64</snippet></ROW><ROW><id>7577226</id><snippet>base64.urlsafe_b64decode</snippet></ROW><ROW><id>7577271</id><snippet>db.put</snippet></ROW><ROW><id>7577271</id><snippet>ComputedProperty</snippet></ROW><ROW><id>7577271</id><snippet>class Rectangle(db.Model):
    width   = db.IntegerProperty()
    height  = db.IntegerProperty()

    @db.ComputedProperty
    def area(self):
      return self.width * self.height
</snippet></ROW><ROW><id>7577312</id><snippet>class Test:
    print "Loaded"
</snippet></ROW><ROW><id>7577312</id><snippet>__init__()</snippet></ROW><ROW><id>7577312</id><snippet>class Test:
    def __init__(self):
        print "Loaded"
</snippet></ROW><ROW><id>7577312</id><snippet>class Test(QObject):
    def __init__(self, signal):
        self.evt_spam = signal

sig = Signal()
a = Test(sig)
b = Test(sig)
</snippet></ROW><ROW><id>7577312</id><snippet>class Test(QObject):
    def signal(self, signal):
        self.evt_spam = evt_spam
        return self

evt_spam = Signal()
a = Test().signal(evt_spam)
b = Test().signal(evt_spam)
</snippet></ROW><ROW><id>7577460</id><snippet>[~/repo/py]
|32&gt;dd[dd[:,1] == 1]
[32] 
array([[ 0.469,  1.   ,  0.479],
       [ 0.48 ,  1.   ,  0.508],
       [ 0.324,  1.   ,  0.324]])

[~/repo/py]
|33&gt;dd[dd[:,1] == 2]
[33] 
array([[ 0.567,  2.   ,  0.611],
       [ 0.22 ,  2.   ,  0.269]])
</snippet></ROW><ROW><id>7577460</id><snippet>[~/repo/py]
|21&gt;np.array([row for row in dd if row[1] == 1])
[21] 
array([[ 0.469,  1.   ,  0.479],
       [ 0.48 ,  1.   ,  0.508],
       [ 0.324,  1.   ,  0.324]])

[~/repo/py]
|22&gt;np.array([row for row in dd if row[1] == 2])
[22] 
array([[ 0.567,  2.   ,  0.611],
       [ 0.22 ,  2.   ,  0.269]])
</snippet></ROW><ROW><id>7577460</id><snippet>[~/repo/py]
|36&gt;timeit dd[dd[:,1] == 1]
100000 loops, best of 3: 6 us per loop

[~/repo/py]
|37&gt;timeit np.array([row for row in dd if row[1] == 1])
100000 loops, best of 3: 11.5 us per loop
</snippet></ROW><ROW><id>7577462</id><snippet>void (Foo::*m1)(A&amp;) = &amp;Foo::m1;
boost::python::class_&lt;Foo&gt;("Foo")
    .def("m1", m1)
</snippet></ROW><ROW><id>7577611</id><snippet>&gt;&gt;&gt; time_tuple = datetime(2011,3,13,2,1,1).utctimetuple()
time.struct_time(tm_year=2011, tm_mon=3, tm_mday=13, tm_hour=2, tm_min=1, tm_sec=1, tm_wday=6, tm_yday=72, tm_isdst=0)
&gt;&gt;&gt; datetime.fromtimestamp(time.mktime(time_tuple))
datetime.datetime(2011, 3, 13, 3, 1, 1)
</snippet></ROW><ROW><id>7577611</id><snippet>time.mktime()</snippet></ROW><ROW><id>7577611</id><snippet>time.mktime()</snippet></ROW><ROW><id>7577611</id><snippet>utctimetuple()</snippet></ROW><ROW><id>7577611</id><snippet>0</snippet></ROW><ROW><id>7577611</id><snippet>time.mktime()</snippet></ROW><ROW><id>7577611</id><snippet>import pytz
def convert_to_local_time(dt_aware):
    tz = pytz.timezone('America/Los_Angeles') # Replace this with your time zone string
    dt_my_tz = dt_aware.astimezone(tz)
    dt_naive = dt_my_tz.replace(tzinfo=None)
    return dt_naive
</snippet></ROW><ROW><id>7577611</id><snippet>pytz.all_timezones</snippet></ROW><ROW><id>7577684</id><snippet>import mypackage.mypath as mypath</snippet></ROW><ROW><id>7577841</id><snippet>int res = compareTimestampBytes(o1, o2);
if (res != 0)
    return res;
return o1.compareTo(o2);
</snippet></ROW><ROW><id>7577955</id><snippet>46L</snippet></ROW><ROW><id>7577955</id><snippet>(r'^album/(?P&lt;album_id&gt;\d+)/$', 'core.views.album'),
</snippet></ROW><ROW><id>7577955</id><snippet>/album/46/</snippet></ROW><ROW><id>7577955</id><snippet>def album(request, album_id):
    #album = Album.objects.get(pk=46L)
    album = Album.objects.get(pk=album_id)
</snippet></ROW><ROW><id>7577955</id><snippet>album = Album.objects.get(pk=long(album_id))
</snippet></ROW><ROW><id>7578053</id><snippet>langs = {
  "en-US" : "chapter",
  "fr-FR" : "chapitre"
}

test = langs['en-US']
</snippet></ROW><ROW><id>7578264</id><snippet>pyglet</snippet></ROW><ROW><id>7578264</id><snippet>import pyglet
sound = pyglet.media.load('mysound.mp3', streaming=False)
sound.play()
pyglet.app.run()
</snippet></ROW><ROW><id>7578364</id><snippet># -*- coding: utf-8 -*-
</snippet></ROW><ROW><id>7578364</id><snippet>dict</snippet></ROW><ROW><id>7578380</id><snippet>#!/usr/bin/python

dc = {3:['3', '4'], 1:['2', '3'], 2:['3']}
de={}

def do_something(i,k):
    print "first time for '%s' with key '%s'" % (i,k)

def do_somethingelse(i,j,k):
    print "element '%s' seen %i times. Now with key '%s'" % (i,j,k) 

for k in sorted(dc):
    for i in dc[k]:
        if i not in de:
            de[i]=1
            do_something(i,k)
        else:
            de[i]+=1
            do_somethingelse(i,de[i],k)
</snippet></ROW><ROW><id>7578380</id><snippet>sorted(dc)</snippet></ROW><ROW><id>7578380</id><snippet>first time for '2' with key '1'
first time for '3' with key '1'
element '3' seen 2 times. Now with key '2'
element '3' seen 3 times. Now with key '3'
first time for '4' with key '3'
</snippet></ROW><ROW><id>7578380</id><snippet>r=[]
for k in sorted(dc):
    print dc[k]
    if '3' in dc[k]:
        r.append("'3' number {} with key: {}".format(len(r)+1,k))
</snippet></ROW><ROW><id>7578380</id><snippet>["'3' number 1 with key: 1", "'3' number 2 with key: 2", "'3' number 3 with key: 3"]
</snippet></ROW><ROW><id>7578380</id><snippet>r</snippet></ROW><ROW><id>7578380</id><snippet>dc</snippet></ROW><ROW><id>7578380</id><snippet>r</snippet></ROW><ROW><id>7578380</id><snippet>3</snippet></ROW><ROW><id>7578380</id><snippet>&gt;&gt;&gt; l=[i for sub in [dc[k] for k in sorted(dc)] for i in sub if i == '3']
&gt;&gt;&gt; l
['3', '3', '3']
&gt;&gt;&gt; l[0]
'3'
&gt;&gt;&gt; l[1:] #all the rest...
</snippet></ROW><ROW><id>7578767</id><snippet>    if len(list)%2 == 0:
</snippet></ROW><ROW><id>7578767</id><snippet>    #have to take avg of middle two
        i = len(list)/2
        median = avg()
</snippet></ROW><ROW><id>7578767</id><snippet>    else:
        #find the middle (remembering that lists start at 0)
        i = len(list)/2
        median = list
</snippet></ROW><ROW><id>7578767</id><snippet>median = list[i]
</snippet></ROW><ROW><id>7578859</id><snippet>unicode</snippet></ROW><ROW><id>7578859</id><snippet>chapter_mapping = {'chapter': u' チャプター'}
</snippet></ROW><ROW><id>7578921</id><snippet>plistlib</snippet></ROW><ROW><id>7578921</id><snippet>libplist</snippet></ROW><ROW><id>7579122</id><snippet>In [31]: import difflib

In [32]: difflib.SequenceMatcher(None, "never", "forever").get_matching_blocks()
Out[32]: [Match(a=1, b=3, size=4), Match(a=5, b=7, size=0)]


In [33]: difflib.SequenceMatcher(None, "address", "oddness").get_matching_blocks()
Out[33]: [Match(a=1, b=1, size=2), Match(a=4, b=4, size=3), Match(a=7, b=7, size=0)]
</snippet></ROW><ROW><id>7579689</id><snippet>class IndicoMailFormatter(logging.Formatter):
    def format(self, record):
        s = super(IndicoMailFormatter, self).format(record)
        return s + self._getRequestInfo()

    def _getRequestInfo(self):
        info = ['Additional information:']
        # ...
        return '\n\n%s' % '\n'.join(info)
</snippet></ROW><ROW><id>7579689</id><snippet>class</snippet></ROW><ROW><id>7579829</id><snippet>+=</snippet></ROW><ROW><id>7579829</id><snippet>extend</snippet></ROW><ROW><id>7579883</id><snippet>$.ajax({
  url: "/resultshandler",
  type: 'POST',
  data: data,
  success: function(data, status){
    //check status
    //do something with data
  }
});
</snippet></ROW><ROW><id>7580091</id><snippet>&gt;&gt;&gt; tup_list = [(1,22,1),(5,1,8),(8,3,4),(7,5,6)]
&gt;&gt;&gt; filter_list = [1,7]
&gt;&gt;&gt; [tup for tup in tup_list if any(i in tup for i in filter_list)]
[(1, 22, 1), (5, 1, 8), (7, 5, 6)]
</snippet></ROW><ROW><id>7580408</id><snippet>in</snippet></ROW><ROW><id>7580456</id><snippet>subsampled = df.ix[(choice(x) for x in grouped.groups.itervalues())]
</snippet></ROW><ROW><id>7580608</id><snippet>dir()</snippet></ROW><ROW><id>7580608</id><snippet>getattr()</snippet></ROW><ROW><id>7580608</id><snippet>&gt;&gt;&gt; "mymethod" in dir(dyn)
True
</snippet></ROW><ROW><id>7581185</id><snippet>class CustomApp(wx.App):
    def MainLoop(self):
        global HANDLER
        global WM
        global NOTIFIER
        global WDD
        global UPDATE_UI
        global PING_TIMER

        # Create an event loop and make it active.  If you are
        # only going to temporarily have a nested event loop then
        # you should get a reference to the old one and set it as
        # the active event loop when you are done with this one...
        evtloop = wx.EventLoop()
        old = wx.EventLoop.GetActive()
        wx.EventLoop.SetActive(evtloop)

        # This outer loop determines when to exit the application,
        # for this example we let the main frame reset this flag
        # when it closes.
        while self.keepGoing:
            # At this point in the outer loop you could do
            # whatever you implemented your own MainLoop for.  It
            # should be quick and non-blocking, otherwise your GUI
            # will freeze.  

            # call_your_code_here()
            if not HANDLER:
                HANDLER = EventHandler()

            if not WM:
                WM = pyinotify.WatchManager() # Watch Manager

            if not NOTIFIER:
                NOTIFIER = pyinotify.ThreadedNotifier(WM, HANDLER)
                NOTIFIER.start()
                print 'notifier started'

            if not WDD:
                WDD = WM.add_watch(WATCH_PATH, WM_MASK, rec=True,quiet=False)

            # This inner loop will process any GUI events
            # until there are no more waiting.
            while evtloop.Pending():
                evtloop.Dispatch()

            # Send idle events to idle handlers.  You may want to
            # throttle this back a bit somehow so there is not too
            # much CPU time spent in the idle handlers.  For this
            # example, I'll just snooze a little...
            time.sleep(0.10)
            self.ProcessIdle()


        wx.EventLoop.SetActive(old)



    def OnInit(self):
        global UPDATE_UI
        if not UPDATE_UI:
            UPDATE_UI = Updater()
            UPDATE_UI.Show()
            self.SetTopWindow(UPDATE_UI)

        self.keepGoing = True
        return True

"--------------------------------------------------------------------------------------"
Watcher()
app = CustomApp(False)
</snippet></ROW><ROW><id>7581342</id><snippet>print [t.string for t in div.findAll(match_only_non_divs)]
# [u'Navigate!', None, u'Main navigation', None, None, u'Home', None, u'About']

print [t.string for t in div.findAll(match_only_non_divs) if t.string]
# [u'Navigate!', u'Main navigation', u'Home', u'About']
</snippet></ROW><ROW><id>7581523</id><snippet>sphinx-build -b html source build/html</snippet></ROW><ROW><id>7581523</id><snippet>python test/main.py</snippet></ROW><ROW><id>7581523</id><snippet>manage.py test</snippet></ROW><ROW><id>7581523</id><snippet>start server &amp; run nosetest</snippet></ROW><ROW><id>7581523</id><snippet>svn co</snippet></ROW><ROW><id>7581523</id><snippet>python setup.py install</snippet></ROW><ROW><id>7581523</id><snippet>/www</snippet></ROW><ROW><id>7581831</id><snippet>import wmi

# Obtain network adaptors configurations
nic_configs = wmi.WMI().Win32_NetworkAdapterConfiguration(IPEnabled=True)

# First network adaptor
nic = nic_configs[0]

# IP address, subnetmask and gateway values should be unicode objects
ip = u'192.168.0.11'
subnetmask = u'255.255.255.0'
gateway = u'192.168.0.1'

# Set IP address, subnetmask and default gateway
# Note: EnableStatic() and SetGateways() methods require *lists* of values to be passed
nic.EnableStatic(IPAddress=[ip],SubnetMask=[subnetmask])
nic.SetGateways(DefaultIPGateway=[gateway])
</snippet></ROW><ROW><id>7581831</id><snippet>import wmi

# Obtain network adaptors configurations
nic_configs = wmi.WMI().Win32_NetworkAdapterConfiguration(IPEnabled=True)

# First network adaptor
nic = nic_configs[0]

# Enable DHCP
nic.EnableDHCP()
</snippet></ROW><ROW><id>7581886</id><snippet>dd</snippet></ROW><ROW><id>7581886</id><snippet>import subprocess
out_fd = open('test_file','w')
def os_system_dd():
   out_fd.write("executing the time dd command\n")
   cmd_list = ['time','dd','if=/dev/random', 'of=/home/anand/sys_entropy_random',
                           'bs=1M' ,'count=5']
   a = subprocess.Popen(cmd_list,stderr=out_fd) # notice stderr
   a.communicate()

if __name__ == '__main__':
   os_system_dd()
</snippet></ROW><ROW><id>7582065</id><snippet>f.close()</snippet></ROW><ROW><id>7582065</id><snippet>wait()</snippet></ROW><ROW><id>7582065</id><snippet>def system_execute(self, command, path, out_file):
    params_list = command.split(' ') 
    file_path = os.path.join(path, out_file)
    f = open(file_path, "w")
    sp = subprocess.Popen(params_list, stdout=f)
    sp.wait()
    f.close()
</snippet></ROW><ROW><id>7582065</id><snippet>def system_execute(self, command, path, out_file):
    params_list = command.split(' ') 
    file_path = os.path.join(path, out_file)
    f = open(file_path, "w")
    subprocess.call(params_list, stdout=f)
    f.close()
</snippet></ROW><ROW><id>7582065</id><snippet>[...]
    with open(file_path, "w") as f:
        subprocess.call(params_list, stdout=f)
</snippet></ROW><ROW><id>7582072</id><snippet>\n\r\n\r\n</snippet></ROW><ROW><id>7582072</id><snippet>\r\n\r\n</snippet></ROW><ROW><id>7582072</id><snippet>\n</snippet></ROW><ROW><id>7582072</id><snippet>\n</snippet></ROW><ROW><id>7582134</id><snippet>g</snippet></ROW><ROW><id>7582134</id><snippet>rg</snippet></ROW><ROW><id>7582134</id><snippet>k</snippet></ROW><ROW><id>7582545</id><snippet>decode()</snippet></ROW><ROW><id>7582545</id><snippet>decode()</snippet></ROW><ROW><id>7582545</id><snippet>firsttext = self.text[0].decode(MEMBER_STRING_ENCODING)
</snippet></ROW><ROW><id>7582900</id><snippet>WSGIScriptAlias /TorBulkExitList /usr/local/www/cgi-bin/TorBulkExitList.py
</snippet></ROW><ROW><id>7582995</id><snippet>__doc__</snippet></ROW><ROW><id>7582995</id><snippet>__init__</snippet></ROW><ROW><id>7582995</id><snippet>__init__.py</snippet></ROW><ROW><id>7583055</id><snippet>platform.python_compiler()</snippet></ROW><ROW><id>7583200</id><snippet>fields</snippet></ROW><ROW><id>7583240</id><snippet>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Iframe Example&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;{% my_heading %}&lt;/p&gt;
        &lt;iframe name="iframe2" id="iframe2" width="0" height="0" src="" style="border:0px; overflow-x:hidden;"&gt;&lt;/iframe&gt;
        &lt;div id="page" style="display:none" &gt;{{ my_html }}&lt;/div&gt;

        &lt;script type="text/javascript"&gt;

          function getWindow(iframe) {
              return (iframe.contentWindow) ? iframe.contentWindow : (iframe.contentDocument.document) ? iframe.contentDocument.document : iframe.contentDocument;
          }

          getWindow(document.getElementById('iframe2')).document.open();
              getWindow(document.getElementById('iframe2')).document.write(document.getElementById('page').innerHTML);
          getWindow(document.getElementById('iframe2')).document.close();

          document.getElementById('iframe2').style.height = (getWindow(document.getElementById('iframe2')).document.body.scrollHeight + 20) +"px";
          document.getElementById('iframe2').style.width = (document.getElementById('iframe2').parentNode.offsetWidth) +"px";

        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt; 
</snippet></ROW><ROW><id>7583431</id><snippet>main(global_config, **settings)</snippet></ROW><ROW><id>7583431</id><snippet>__init__.py</snippet></ROW><ROW><id>7583431</id><snippet>settings</snippet></ROW><ROW><id>7583431</id><snippet>.ini</snippet></ROW><ROW><id>7583431</id><snippet>[app:main]
blog.title = "Custom blog name"
blog.comments_enabled = true
</snippet></ROW><ROW><id>7583431</id><snippet>__init__.py</snippet></ROW><ROW><id>7583431</id><snippet>def main(global_config, **settings):
    config = Configurator(settings=settings)
    blog_title = settings['blog.title']
    # you can also access you settings via config
    comments_enabled = config.registry.settings['blog.comments_enabled']
    return config.make_wsgi_app()
</snippet></ROW><ROW><id>7583431</id><snippet>request.registry.settings</snippet></ROW><ROW><id>7583431</id><snippet>event.request.registry.settings</snippet></ROW><ROW><id>7583444</id><snippet>UDPServer.__init__(self,('localhost', GROWL_UDP_PORT), _RequestHandler)
</snippet></ROW><ROW><id>7583444</id><snippet>UDPServer.__init__(self,('', GROWL_UDP_PORT), _RequestHandler)
</snippet></ROW><ROW><id>7583738</id><snippet>__import__()</snippet></ROW><ROW><id>7583738</id><snippet>foobar = __import__("foo-bar")
</snippet></ROW><ROW><id>7583777</id><snippet># set wants to master
def wantmaster(haves, wants):
  global repo
  return { "refs/heads/master": repo.refs["HEAD"] }

client, src = dulwich.client.get_transport_and_path(origin_uri) 

client.send_pack(src, wantmaster, repo.object_store.generate_pack_contents)
</snippet></ROW><ROW><id>7583918</id><snippet>I</snippet></ROW><ROW><id>7583918</id><snippet>L</snippet></ROW><ROW><id>7583918</id><snippet>L</snippet></ROW><ROW><id>7583918</id><snippet>H</snippet></ROW><ROW><id>7583918</id><snippet>I</snippet></ROW><ROW><id>7584096</id><snippet>datetime</snippet></ROW><ROW><id>7584096</id><snippet>datetime.datetime</snippet></ROW><ROW><id>7584096</id><snippet>new_delta()</snippet></ROW><ROW><id>7584096</id><snippet>PyDateTime_DeltaType</snippet></ROW><ROW><id>7584096</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>7584096</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>7584201</id><snippet>wait()</snippet></ROW><ROW><id>7584201</id><snippet>class SubProcessWithoutThread(object):
    def __init__(self, arguments, currentWorkingDirectory):
        self.arguments = arguments
        self.currentWorkingDirectory = currentWorkingDirectory
        self.isTerminated = False

    def start(self):
        self.subProcess = subprocess.Popen(self.arguments, cwd=self.currentWorkingDirectory)

    def kill(self):
        while self.subProcess.poll() is None:
            try:
                self.subProcess.kill()
            except:
                time.sleep(0.1)

    __enter__ = start
    def __exit__(self, *x):
        self.kill()
</snippet></ROW><ROW><id>7584201</id><snippet>with</snippet></ROW><ROW><id>7584363</id><snippet>cv</snippet></ROW><ROW><id>7584363</id><snippet>CV_MEDIAN</snippet></ROW><ROW><id>7584363</id><snippet>cv.CV_MEDIAN</snippet></ROW><ROW><id>7584510</id><snippet>print("hello world")</snippet></ROW><ROW><id>7584517</id><snippet>dict([(name, cls) for name, cls in mod.__dict__.items() if isinstance(cls, type)])
</snippet></ROW><ROW><id>7584613</id><snippet>inp=csv.reader(open(...))
outp=csv.writer(open(...))
map(outp.writerow,map(operator.itemgetter(x,y,z),inp))
</snippet></ROW><ROW><id>7584613</id><snippet>writenames = "ID,average,max,min,median,mode,stddev,skewness,kurtosis".split(",")
reader = csv.DictReader(open("/home/usrs/chris/Summary.csv", "rb"))
writer = csv.DictWriter(open("/home/usrs/chris/SummaryNEW.csv", "wb"), \
    fieldnames=writenames)
reorderfunct = lambda r: dict([(col, r[col]) for col in writenames])
writer.writeheader()
for row in reader:
    writer.writerow(reorderfunct(row))
</snippet></ROW><ROW><id>7584674</id><snippet>def fetch_resources(uri, rel):
    """
    Callback to allow pisa/reportlab to retrieve Images,Stylesheets, etc.
    `uri` is the href attribute from the html link element.
    `rel` gives a relative path, but it's not used here.

    """
    path = os.path.join(settings.MEDIA_ROOT, uri.replace(settings.MEDIA_URL, ""))
    return path
</snippet></ROW><ROW><id>7584674</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>7584674</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>7584674</id><snippet>fetch resources</snippet></ROW><ROW><id>7584674</id><snippet>pdf = pisa.pisaDocument(StringIO.StringIO(
        html.encode("UTF-8")), 
        result, 
        link_callback=fetch_resources,
        encoding="utf-8")
</snippet></ROW><ROW><id>7585040</id><snippet>exclude = ('user',)</snippet></ROW><ROW><id>7585040</id><snippet>user_valid = uform.is_valid()
profile_valid = pform.is_valid()
if user_valid and profile_valid:
    user = uform.save()
    profile = pform.save(commit=False)
    profile.user = user
    profile.save()
</snippet></ROW><ROW><id>7585040</id><snippet>class UserCreationFormExtended(UserCreationForm): 
    level = forms.ChoiceField(choices=LEVEL, max_length=20)
    ... etc...

if uform.is_valid():
    user = uform.save()
    profile = Profile.objects.create(user=user, level=uform.cleaned_data['level']))
</snippet></ROW><ROW><id>7585325</id><snippet>&lt;WSGIRequest&gt;</snippet></ROW><ROW><id>7585325</id><snippet>'HTTP_ACCEPT_ENCOD\\xddNG': 'gzip, deflate'</snippet></ROW><ROW><id>7585325</id><snippet>&lt;WSGIRequest&gt;</snippet></ROW><ROW><id>7585325</id><snippet>0xdd</snippet></ROW><ROW><id>7585325</id><snippet>10</snippet></ROW><ROW><id>7585325</id><snippet>0xdd</snippet></ROW><ROW><id>7585325</id><snippet>0</snippet></ROW><ROW><id>7585325</id><snippet>&lt;WSGIRequest&gt;</snippet></ROW><ROW><id>7585325</id><snippet>'HTTP_ACCEPT_ENCODÝNG': 'gzip, deflate'</snippet></ROW><ROW><id>7585349</id><snippet>__dict__</snippet></ROW><ROW><id>7585349</id><snippet>__slots__</snippet></ROW><ROW><id>7585378</id><snippet>wordlistfile</snippet></ROW><ROW><id>7585378</id><snippet>wordlistfile = open(wordlist,"r",encoding='utf-8')
</snippet></ROW><ROW><id>7585378</id><snippet>line.encode('utf-8')
</snippet></ROW><ROW><id>7585600</id><snippet>import re

li = ('ksjdhfqsd\n'
      '5 12478 abdefgcd ocean__12      ty--\t\t ghtr789\n'
      'qfgqrgqrg',

      '6 48788 bcfgdebc atlantic__7899 %fg#\t\t ghtu12340\n',

      '2 47890 bbcedefg arctic__124    **juyf\t\t ghtr89877',

      '9 54879 bbdecddf antarctic__13  18:13pomodoro\t\t ghtr6798',


      'ksjdhfqsd\n'
      '5 12478 abdefgcd ocean__1247101247887 ty--\t\t ghtr789\n'
      'qfgqrgqrg',

      '6 48788 bcfgdebc atlantic__7899 %fg#\t\t ghtu12940\n',

      '25 47890 bbcedefg arctic__124    **juyf\t\t ghtr89877',

      '9 54879 bbdeYddf antarctic__13  18:13pomodoro\t\t ghtr6798')


tupleRE = ('^\d',
           ' ',
           '\d{5}',
           ' ',
           '[abcdefghi]+',
           ' ',
           '(?=[a-z\d_ ]{14} [^ ]+\t\t ght)',
           '[a-z]+',
           '__',
           '[\d]+',
           ' +',
           '[^\t]+',
           '\t\t',
           ' ',
           'ght',
           '(r[5-9]+|u[0-4]+)',
           '$')  



def REtest(ch, tuplRE, flags = re.MULTILINE):
    for n in xrange(len(tupleRE)):
        regx = re.compile(''.join(tupleRE[:n+1]), flags)
        testmatch = regx.search(ch)
        if not testmatch:
            print '\n  -*- tupleRE :\n'
            print '\n'.join(str(i).zfill(2)+' '+repr(u)
                            for i,u in enumerate(tupleRE[:n]))
            print '   --------------------------------'
            # tupleRE doesn't works because of element n
            print str(n).zfill(2)+' '+repr(tupleRE[n])\
                  +"   doesn't match anymore from this ligne "\
                  +str(n)+' of tupleRE'
            print '\n'.join(str(n+1+j).zfill(2)+' '+repr(u)
                            for j,u in enumerate(tupleRE[n+1:
                                                         min(n+2,len(tupleRE))]))

            for i in xrange(n):
                match = re.search(''.join(tupleRE[:n-i]),ch, flags)
                if match:
                    break

            matching_portion = match.group()
            matching_li = '\n'.join(map(repr,
                                        matching_portion.splitlines(True)[-5:]))
            fin_matching_portion = match.end()
            print ('\n\n  -*- Part of the tested string which is concerned :\n\n'
                   '######### matching_portion ########\n'+matching_li + '\n'
                   '##### end of matching_portion #####\n'
                   '-----------------------------------\n'
                   '######## unmatching_portion #######')
            print '\n'.join(map(repr,
                                ch[fin_matching_portion:
                                   fin_matching_portion+300].splitlines(True)) )
            break
    else:
        print '\n  SUCCES . The regex integrally matches.'



for x in li:
    print '  -*- Analyzed string :\n%r' % x
    REtest(x,tupleRE)
    print '\nmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm'
</snippet></ROW><ROW><id>7585600</id><snippet>  -*- Analyzed string :
'ksjdhfqsd\n5 12478 abdefgcd ocean__12      ty--\t\t ghtr789\nqfgqrgqrg'

  SUCCESS . The regex integrally matches.

mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm
  -*- Analyzed string :
'6 48788 bcfgdebc atlantic__7899 %fg#\t\t ghtu12340\n'

  SUCCESS . The regex integrally matches.

mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm
  -*- Analyzed string :
'2 47890 bbcedefg arctic__124    **juyf\t\t ghtr89877'

  SUCCESS . The regex integrally matches.

mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm
  -*- Analyzed string :
'9 54879 bbdecddf antarctic__13  18:13pomodoro\t\t ghtr6798'

  SUCCESS . The regex integrally matches.

mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm
  -*- Analyzed string :
'ksjdhfqsd\n5 12478 abdefgcd ocean__1247101247887 ty--\t\t ghtr789\nqfgqrgqrg'

  -*- tupleRE :

00 '^\\d'
01 ' '
02 '\\d{5}'
03 ' '
04 '[abcdefghi]+'
05 ' '
   --------------------------------
06 '(?=[a-z\\d_ ]{14} [^ ]+\t\t ght)'   doesn't match anymore from this ligne 6 of tupleRE
07 '[a-z]+'


  -*- Part of the tested string which is concerned :

######### matching_portion ########
'5 12478 abdefgcd '
##### end of matching_portion #####
-----------------------------------
######## unmatching_portion #######
'ocean__1247101247887 ty--\t\t ghtr789\n'
'qfgqrgqrg'

mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm
  -*- Analyzed string :
'6 48788 bcfgdebc atlantic__7899 %fg#\t\t ghtu12940\n'

  -*- tupleRE :

00 '^\\d'
01 ' '
02 '\\d{5}'
03 ' '
04 '[abcdefghi]+'
05 ' '
06 '(?=[a-z\\d_ ]{14} [^ ]+\t\t ght)'
07 '[a-z]+'
08 '__'
09 '[\\d]+'
10 ' +'
11 '[^\t]+'
12 '\t\t'
13 ' '
14 'ght'
15 '(r[5-9]+|u[0-4]+)'
   --------------------------------
16 '$'   doesn't match anymore from this ligne 16 of tupleRE



  -*- Part of the tested string which is concerned :

######### matching_portion ########
'6 48788 bcfgdebc atlantic__7899 %fg#\t\t ghtu12'
##### end of matching_portion #####
-----------------------------------
######## unmatching_portion #######
'940\n'

mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm
  -*- Analyzed string :
'25 47890 bbcedefg arctic__124    **juyf\t\t ghtr89877'

  -*- tupleRE :

00 '^\\d'
   --------------------------------
01 ' '   doesn't match anymore from this ligne 1 of tupleRE
02 '\\d{5}'


  -*- Part of the tested string which is concerned :

######### matching_portion ########
'2'
##### end of matching_portion #####
-----------------------------------
######## unmatching_portion #######
'5 47890 bbcedefg arctic__124    **juyf\t\t ghtr89877'

mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm
  -*- Analyzed string :
'9 54879 bbdeYddf antarctic__13  18:13pomodoro\t\t ghtr6798'

  -*- tupleRE :

00 '^\\d'
01 ' '
02 '\\d{5}'
03 ' '
04 '[abcdefghi]+'
   --------------------------------
05 ' '   doesn't match anymore from this ligne 5 of tupleRE
06 '(?=[a-z\\d_ ]{14} [^ ]+\t\t ght)'


  -*- Part of the tested string which is concerned :

######### matching_portion ########
'9 54879 bbde'
##### end of matching_portion #####
-----------------------------------
######## unmatching_portion #######
'Yddf antarctic__13  18:13pomodoro\t\t ghtr6798'

mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm
</snippet></ROW><ROW><id>7585619</id><snippet>bytes</snippet></ROW><ROW><id>7585619</id><snippet>bytearray</snippet></ROW><ROW><id>7585619</id><snippet>bytes</snippet></ROW><ROW><id>7585619</id><snippet>some_string.encode(encoding)</snippet></ROW><ROW><id>7585619</id><snippet>bytes(some_string, encoding)</snippet></ROW><ROW><id>7585619</id><snippet>bytes</snippet></ROW><ROW><id>7585619</id><snippet>encode</snippet></ROW><ROW><id>7585619</id><snippet>encode</snippet></ROW><ROW><id>7585619</id><snippet>unicode_string.encode(encoding)</snippet></ROW><ROW><id>7585619</id><snippet>byte_string.decode(encoding)</snippet></ROW><ROW><id>7585661</id><snippet>HTTP/1.1 200 OK\nContent-type: text/html</snippet></ROW><ROW><id>7585661</id><snippet>class SingleTCPHandler(SocketServer.BaseRequestHandler):

    def handle(self):
        data = self.request.recv(1024)
        parts = data.rsplit(" ")
        if (parts[0] != "GET"):
            self.request.close()
            return

        url = parts[1].split("?")[1]
        qv = parse_qs(url)
        ...
</snippet></ROW><ROW><id>7585661</id><snippet>    Socket socket = null;
    PrintWriter output = null;

    try {
        socket = new Socket(this.ipAddress, this.portNo);
        output = new PrintWriter(new BufferedWriter
                (new OutputStreamWriter(socket.getOutputStream())), true);
        output.println("GET " + url);
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        try {
            if (socket != null)
                socket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        if (output != null)
            output.close();
    }
</snippet></ROW><ROW><id>7585663</id><snippet>dc = GetDC(0)</snippet></ROW><ROW><id>7585663</id><snippet>SetPixel(dc, x, y, color)</snippet></ROW><ROW><id>7585965</id><snippet>import itk
meshType2D = itk.Mesh.D2Q.New()
meshType3D = itk.Mesh.D3Q.New()
</snippet></ROW><ROW><id>7585965</id><snippet>import itk
meshType2D = itk.Mesh[itk.D, 2, itk.QuadEdgeMeshTraits.D2BBFF]
meshType3D = itk.Mesh[itk.D, 3, itk.QuadEdgeMeshTraits.D3BBFF]
</snippet></ROW><ROW><id>7586247</id><snippet>if (abs(x) &lt; 1E-10) ...
</snippet></ROW><ROW><id>7586402</id><snippet>q.filter('random &gt;=', random.random())
</snippet></ROW><ROW><id>7586402</id><snippet>q.filter('randomvalue &gt;=', random.random())
</snippet></ROW><ROW><id>7586586</id><snippet>str.join</snippet></ROW><ROW><id>7586586</id><snippet>result = ', '.join(iterable)
</snippet></ROW><ROW><id>7586586</id><snippet>map</snippet></ROW><ROW><id>7586586</id><snippet>result = ', '.join(str(item) for item in iterable)
</snippet></ROW><ROW><id>7586821</id><snippet>import os
import ctypes

firefox = r'F:\Softwares\Mozilla Firefox'
os.environ['PATH'] = ';'.join([firefox, os.environ['PATH']])
</snippet></ROW><ROW><id>7586821</id><snippet>&gt;&gt;&gt; nss3 = ctypes.CDLL(os.path.join(firefox, 'nss3.dll'))

&gt;&gt;&gt; nss3.NSS_GetVersion.restype = c_char_p
&gt;&gt;&gt; nss3.NSS_GetVersion()                 
'3.13.5.0 Basic ECC'
</snippet></ROW><ROW><id>7586879</id><snippet>Literal('foobar')+Word(pyp.alphas)</snippet></ROW><ROW><id>7586879</id><snippet>'foobar'</snippet></ROW><ROW><id>7586879</id><snippet>import pyparsing as pyp
ident = pyp.Combine(pyp.Literal('foobar')+pyp.Word(pyp.alphas))('foo')
for match in ident.searchString('bar foobarfoo bar foobarbafoo'):
    print(match.foo)
</snippet></ROW><ROW><id>7586879</id><snippet>foobarfoo
foobarbafoo
</snippet></ROW><ROW><id>7587060</id><snippet>for /D %%d in (*) do script.py %%d
</snippet></ROW><ROW><id>7587060</id><snippet>script.py %%d</snippet></ROW><ROW><id>7587060</id><snippet>()</snippet></ROW><ROW><id>7587060</id><snippet>for /D %%d in (%1) do (
   echo processing %%d
   script.py %%d
)
</snippet></ROW><ROW><id>7587080</id><snippet>    lock.acquire() # both threads wait here, one gets the lock
    current_time = time.time() # we start at t=0
    interval = current_time - last_time[0] # so interval = 0
    last_time[0] = current_time # last_time = t = 0
    if interval &lt; rate: # rate = 1 so we sleep
        time.sleep(rate - interval) # to t=1
    lock.release() # now the other thread wakes up
    # it's t=1 and we do the job
</snippet></ROW><ROW><id>7587080</id><snippet>    lock.acquire() # we get the lock at t=1 
    current_time = time.time() # still t=1
    interval = current_time - last_time[0] # interval = 1
    last_time[0] = current_time
    if interval &lt; rate: # interval = rate = 1 so we don't sleep
        time.sleep(rate - interval)
    lock.release() 
    # both threads start the work around t=1
</snippet></ROW><ROW><id>7587305</id><snippet>with open('MyCsvFile.txt', 'rb') as source:
    dialect = csv.Sniffer().sniff(source.read(1024), ',')
    source.seek(0)
    csvDict = csv.DictReader(source, dialect)
</snippet></ROW><ROW><id>7587545</id><snippet>sys.path</snippet></ROW><ROW><id>7587545</id><snippet>main/</snippet></ROW><ROW><id>7587545</id><snippet>sys.path</snippet></ROW><ROW><id>7587545</id><snippet>import sys,os.path

sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
import gen_py.lib
</snippet></ROW><ROW><id>7587545</id><snippet>__init__.py</snippet></ROW><ROW><id>7587819</id><snippet>import numpy as np, cv
vis = np.zeros((384, 836), np.float32)
h,w = vis.shape
vis2 = cv.CreateMat(h, w, cv.CV_32FC3)
vis0 = cv.fromarray(vis)
cv.CvtColor(vis0, vis2, cv.CV_GRAY2BGR)
</snippet></ROW><ROW><id>7587819</id><snippet>np.uint32</snippet></ROW><ROW><id>7587819</id><snippet>uint8</snippet></ROW><ROW><id>7587819</id><snippet>int8</snippet></ROW><ROW><id>7587819</id><snippet>uint16</snippet></ROW><ROW><id>7587819</id><snippet>int16</snippet></ROW><ROW><id>7587819</id><snippet>int32</snippet></ROW><ROW><id>7587819</id><snippet>float32</snippet></ROW><ROW><id>7587819</id><snippet>float64</snippet></ROW><ROW><id>7587819</id><snippet>cv.CvtColor</snippet></ROW><ROW><id>7587819</id><snippet>cv.fromarray</snippet></ROW><ROW><id>7587819</id><snippet>cv.CvtColor</snippet></ROW><ROW><id>7587819</id><snippet>import numpy as np, cv2
vis = np.zeros((384, 836), np.float32)
vis2 = cv2.cvtColor(vis, cv2.COLOR_GRAY2BGR)
</snippet></ROW><ROW><id>7588001</id><snippet>processString(myString)</snippet></ROW><ROW><id>7588497</id><snippet>f.seek(0)</snippet></ROW><ROW><id>7588497</id><snippet>next(f)
</snippet></ROW><ROW><id>7588497</id><snippet>DictReader</snippet></ROW><ROW><id>7588609</id><snippet>print datetime.utcnow().strftime('%Y%m%d%H%M%S%f')
</snippet></ROW><ROW><id>7588643</id><snippet>try</snippet></ROW><ROW><id>7588643</id><snippet>for tag in soup_3.findAll('a', href=True):
    try:
        out.writerow(tag['href'])
    except UnicodeEncodeError:
        pass
</snippet></ROW><ROW><id>7588643</id><snippet>codecs.open()</snippet></ROW><ROW><id>7588643</id><snippet>open</snippet></ROW><ROW><id>7588667</id><snippet>itertools.chain</snippet></ROW><ROW><id>7588667</id><snippet>from itertools import chain

paths = ('/path/to/directory/one/', '/path/to/directory/two/', 'etc.', 'etc.')
for path, dirs, files in chain.from_iterable(os.walk(path) for path in paths):
</snippet></ROW><ROW><id>7588844</id><snippet>class FormHandler(webapp.RequestHandler):

  def get(self):
    self.show_form()

  def post(self):
    if form_is_valid():
      handle_success()
    else:
      self.show_form({'feedback':'Validation failed'})

  def show_form(self, vals={}):
    vals['field1'] = self.request.get('field1')
    vals['field2'] = self.request.get('field2')
    html = template.render('form.html', vals)
    self.response.out.write(html)
</snippet></ROW><ROW><id>7588844</id><snippet>show_form()</snippet></ROW><ROW><id>7589065</id><snippet>text.lower()</snippet></ROW><ROW><id>7589126</id><snippet>socket.setblocking(False)</snippet></ROW><ROW><id>7589126</id><snippet>MSG_DONTWAIT</snippet></ROW><ROW><id>7589126</id><snippet>socket.setblocking</snippet></ROW><ROW><id>7589132</id><snippet>zip()</snippet></ROW><ROW><id>7589132</id><snippet>&gt;&gt;&gt; a = [[1,2,3],[4,5,6],[7,8,9]]
&gt;&gt;&gt; zip(*a)
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
&gt;&gt;&gt; zip(*a)[0]
(1, 4, 7)
</snippet></ROW><ROW><id>7589357</id><snippet>KEYS[kind]</snippet></ROW><ROW><id>7589357</id><snippet>KEYS</snippet></ROW><ROW><id>7589357</id><snippet>Key.from_path</snippet></ROW><ROW><id>7589357</id><snippet>'Model1'</snippet></ROW><ROW><id>7589357</id><snippet>Model1</snippet></ROW><ROW><id>7589374</id><snippet>import numpy as np, cv2

img1 = cv2.imread(fn1, 0)
img2 = cv2.imread(fn2, 0)
h1, w1 = img1.shape[:2]
h2, w2 = img2.shape[:2]
vis = np.zeros((max(h1, h2), w1+w2), np.uint8)
vis[:h1, :w1] = img1
vis[:h2, w1:w1+w2] = img2
vis = cv2.cvtColor(vis, cv2.COLOR_GRAY2BGR)

cv2.imshow("test", vis)
cv2.waitKey()
</snippet></ROW><ROW><id>7589374</id><snippet>import numpy as np, cv

img1 = cv.LoadImage(fn1, 0)
img2 = cv.LoadImage(fn2, 0)

h1, w1 = img1.height,img1.width
h2, w2 = img2.height,img2.width
vis = np.zeros((max(h1, h2), w1+w2), np.uint8)
vis[:h1, :w1] = cv.GetMat(img1)
vis[:h2, w1:w1+w2] = cv.GetMat(img2)
vis2 = cv.CreateMat(vis.shape[0], vis.shape[1], cv.CV_8UC3)
cv.CvtColor(cv.fromarray(vis), vis2, cv.CV_GRAY2BGR)

cv.ShowImage("test", vis2)
cv.WaitKey()
</snippet></ROW><ROW><id>7589615</id><snippet>import csv
with open("source","rb") as source:
    rdr= csv.reader( source )
    with open("result","wb") as result:
        wtr= csv.writer( result )
        for r in rdr:
            wtr.writerow( (r[0], r[1], r[3], r[4]) )
</snippet></ROW><ROW><id>7589615</id><snippet>for</snippet></ROW><ROW><id>7589615</id><snippet>        in_iter= ( (r[0], r[1], r[3], r[4]) for r in rdr )
        wtr.writerows( in_iter )
</snippet></ROW><ROW><id>7589615</id><snippet>            del r[2]
            wtr.writerow( r )
</snippet></ROW><ROW><id>7589626</id><snippet>last_location = (None, None)
location_mutex = threading.Lock()

def gpsInfo():
    global last_location
    while True:
        session.poll()
        time.sleep(5)
        if gps.PACKET_SET:
            session.stream
            with location_mutex:
                # DON'T Print from inside thread!
                last_location = session.fix.latitude, session.fix.longitude
            time.sleep(0.1)

def WifiDetect(p):
    if p.haslayer(Dot11):
        if p.type == 0 and p.subtype in stamgmtstypes:
            if p.addr2 not in observedclients:
                with location_mutex:
                    print p.addr2, last_location
                    observedclients.append((p.addr2, last_location))  
</snippet></ROW><ROW><id>7590291</id><snippet>default</snippet></ROW><ROW><id>7590291</id><snippet>default_if_none</snippet></ROW><ROW><id>7590291</id><snippet>None</snippet></ROW><ROW><id>7590511</id><snippet>call("svn rename " + "\"test 00009.png\"" + " \"test1 00009.png\"")
</snippet></ROW><ROW><id>7590511</id><snippet>"\"%s\"" % file
</snippet></ROW><ROW><id>7590709</id><snippet>self</snippet></ROW><ROW><id>7590709</id><snippet>self</snippet></ROW><ROW><id>7590709</id><snippet>def decorator(func):
    def _decorator(self, *args, **kwargs):
        # access a from TestSample
        print 'self is %s' % self
        func(self, *args, **kwargs)
    return _decorator
</snippet></ROW><ROW><id>7590756</id><snippet>java -jar selenium-server-standalone-2.7.0.jar
</snippet></ROW><ROW><id>7590756</id><snippet>from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.keys import Keys
import time

browser = webdriver.Firefox() # Get local session of firefox
browser.get("http://www.yahoo.com") # Load page
assert "Yahoo!" in browser.title
elem = browser.find_element_by_name("p") # Find the query box
elem.send_keys("seleniumhq" + Keys.RETURN)
time.sleep(0.2) # Let the page load, will be added to the API
try:
    browser.find_element_by_xpath("//a[contains(@href,'http://seleniumhq.org')]")
except NoSuchElementException:
    assert 0, "can't find seleniumhq"
browser.close()
</snippet></ROW><ROW><id>7590756</id><snippet>subprocess</snippet></ROW><ROW><id>7590970</id><snippet>&gt;&gt;&gt; mylist = [(1,2,3),(6,1,1),(7,8,1),(3,4,5)]
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; set(itertools.chain.from_iterable(mylist))
set([1, 2, 3, 4, 5, 6, 7, 8])
</snippet></ROW></DATA>