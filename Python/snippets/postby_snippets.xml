<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>11633447</id><snippet>sum.up</snippet></ROW><ROW><id>11633447</id><snippet>sum_up</snippet></ROW><ROW><id>11633616</id><snippet>It's request.GET.getlist('board')</snippet></ROW><ROW><id>11633949</id><snippet>sys.argv</snippet></ROW><ROW><id>11633949</id><snippet>['myscript.py', 'arg1', 'arg2']</snippet></ROW><ROW><id>11633977</id><snippet>numpy.histogram()</snippet></ROW><ROW><id>11633977</id><snippet>bins</snippet></ROW><ROW><id>11633977</id><snippet>numpy.histogram(my_values, bins=numpy.r_[-numpy.inf, my_bins, numpy.inf])
</snippet></ROW><ROW><id>11633977</id><snippet>numpy.searchsorted()</snippet></ROW><ROW><id>11633977</id><snippet>numpy.bincount()</snippet></ROW><ROW><id>11634045</id><snippet>import cx_Oracle
connstr = 'scott/tiger@127.0.0.1:1521/xe'
orcl = cx_Oracle.connect(connstr)

curs = orcl.cursor()
number_var = curs.var(cx_Oracle.NUMBER)
curs.execute(r"""BEGIN :my_cnt := 10; END;""", {'my_cnt':number_var})

print number_var.getvalue()

curs.close()
orcl.close()
</snippet></ROW><ROW><id>11634196</id><snippet>UserProfile</snippet></ROW><ROW><id>11634196</id><snippet>User</snippet></ROW><ROW><id>11634196</id><snippet>admin.py</snippet></ROW><ROW><id>11634196</id><snippet>'django.contrib.auth'</snippet></ROW><ROW><id>11634196</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>11634196</id><snippet>from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from django.contrib.auth.models import User
from reserve.models import UserProfile

class UserProfileInline(admin.TabularInline):
    model = UserProfile

class UserWithProfileAdmin(UserAdmin):
    inlines = [UserProfileInline]

admin.site.unregister(User)
admin.site.register(User, UserWithProfileAdmin)
</snippet></ROW><ROW><id>11634196</id><snippet>ForeignKey</snippet></ROW><ROW><id>11634196</id><snippet>primary_key</snippet></ROW><ROW><id>11634196</id><snippet>class UserProfile(models.Model):
    user = models.ForeignKey(User, primary_key=True)
    quote = models.CharField('Favorite quote', max_length =  200)
</snippet></ROW><ROW><id>11634196</id><snippet>UserProfile.objects.get(pk=user_id)</snippet></ROW><ROW><id>11634196</id><snippet>user.get_profile()</snippet></ROW><ROW><id>11634213</id><snippet>x1 = y1 = x2 = y2 = 0
</snippet></ROW><ROW><id>11635026</id><snippet>import subprocess
import re

while True:
    # prevents lots of python error output
    try:
        s = raw_input('&gt; ')
    except:
        break

    # check if you should exit
    if s.strip().lower() == 'exit':
        break

    # try to run command
    try:
        cmd = subprocess.Popen(re.split(r'\s+', s), stdout=subprocess.PIPE)
        cmd_out = cmd.stdout.read()

        # Process output
        print cmd_out

    except OSError:
        print 'Invalid command'
</snippet></ROW><ROW><id>11635081</id><snippet>.seek(0)</snippet></ROW><ROW><id>11635081</id><snippet>set</snippet></ROW><ROW><id>11635081</id><snippet>names = set(name.strip() for name in file2)
while f &lt; 50:
    for line in file1:
        if line.strip() in names:
            f += 1
</snippet></ROW><ROW><id>11635375</id><snippet>var1</snippet></ROW><ROW><id>11635375</id><snippet>re.findall('.', str(var1))
</snippet></ROW><ROW><id>11635457</id><snippet>from_address</snippet></ROW><ROW><id>11635457</id><snippet>def customresize(array, new_size):
    base = getattr(array, 'base', array)
    resize(base, sizeof(array._type_)*new_size)
    new_array = (array._type_*new_size).from_address(addressof(base))
    new_array.base = base
</snippet></ROW><ROW><id>11635457</id><snippet>list = (c_int * 5)(*list)
</snippet></ROW><ROW><id>11635545</id><snippet>&gt;&gt;&gt; class C(object):
...     pass
...
&gt;&gt;&gt; c = C()
&gt;&gt;&gt; c.__len__ = lambda: 5
&gt;&gt;&gt; len(c)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: object of type 'C' has no len()
</snippet></ROW><ROW><id>11635980</id><snippet>logging</snippet></ROW><ROW><id>11635980</id><snippet>import logging
logging.basicConfig(level=logging.ERROR)
# instead of sys.stderr.write():
logging.warning("This is a warning!")
</snippet></ROW><ROW><id>11636021</id><snippet>pexpect</snippet></ROW><ROW><id>11636021</id><snippet>import pexpect
child = pexpect.spawn('student_program')
while child.expect('Enter (\w+)\r\n', pexpect.EOF) == 0:
    if child.match[1] == 'p':
        child.sendline('3.14159')
</snippet></ROW><ROW><id>11636021</id><snippet>child.interact()</snippet></ROW><ROW><id>11636039</id><snippet>cwd</snippet></ROW><ROW><id>11636039</id><snippet>p = Popen(path_to_program, cwd=head, shell=False)
</snippet></ROW><ROW><id>11636141</id><snippet>in</snippet></ROW><ROW><id>11636141</id><snippet>is</snippet></ROW><ROW><id>11636141</id><snippet>True</snippet></ROW><ROW><id>11636141</id><snippet>'adsf'</snippet></ROW><ROW><id>11636141</id><snippet>True</snippet></ROW><ROW><id>11636141</id><snippet>False</snippet></ROW><ROW><id>11636141</id><snippet>if</snippet></ROW><ROW><id>11636141</id><snippet>False</snippet></ROW><ROW><id>11636141</id><snippet>True</snippet></ROW><ROW><id>11636141</id><snippet>bool(obj)</snippet></ROW><ROW><id>11636215</id><snippet>if</snippet></ROW><ROW><id>11636215</id><snippet>while</snippet></ROW><ROW><id>11636215</id><snippet>while</snippet></ROW><ROW><id>11636215</id><snippet>capitals = {"Alabama": "Montgomery", "Alaska": "Juneau", "Arizona": "Phoenix", "Arkansas": "Little Rock"}
while True:
    x = str(raw_input('Please enter a state: ' ))
    if x in capitals:
        print capitals[x], "is the capital of", x
</snippet></ROW><ROW><id>11636416</id><snippet>u'12.23.21.23'.encode('utf8')
</snippet></ROW><ROW><id>11636435</id><snippet>for k, v in letters.items():
  print k,v 
</snippet></ROW><ROW><id>11636435</id><snippet># uses iterator, as opposed to returning all the keys via .keys()
for k in letters:
  print k, letters[k]
</snippet></ROW><ROW><id>11637157</id><snippet>item[i]['attribute1'][2,j]</snippet></ROW><ROW><id>11637225</id><snippet>info['data']</snippet></ROW><ROW><id>11637225</id><snippet>for post in info['data']:
    tags = post['tags']
    id = post['id']
    image_urls = [] # An empty list -- we'll fill it below
    for img_type in ['low_resolution', 'thumbnail', 'standard_resolution']:
        image_urls.append(post['images'][img_type]['url'])
    # Now image_urls has all the image urls in it
</snippet></ROW><ROW><id>11637225</id><snippet>"tags"</snippet></ROW><ROW><id>11637225</id><snippet>"tags"</snippet></ROW><ROW><id>11637225</id><snippet>tags()</snippet></ROW><ROW><id>11637399</id><snippet>print ('%02d'%(mydate.month))
</snippet></ROW><ROW><id>11637399</id><snippet>print ('{0:02d}'.format(a.month)) #python 2.7+ -- '{:02d}' will work
</snippet></ROW><ROW><id>11637399</id><snippet>print ('{0:%m}'.format(a)) -- #python 2.7+ -- '{:%m}' will work.
</snippet></ROW><ROW><id>11637399</id><snippet>print (mydate.strftime('%m'))
</snippet></ROW><ROW><id>11637399</id><snippet>print (mydate.strftime('%Y-%m-%d')) 
</snippet></ROW><ROW><id>11637494</id><snippet>.write()</snippet></ROW><ROW><id>11637494</id><snippet>config= ConfigParser.RawConfigParser()
config.read(r'C:\itb\itb\Webcams\AMCap1\amcap.ini')
config.set('Video','Path',r'C:\itb\itb')
with open(r'C:\itb\itb\Webcams\AMCap1\amcap.ini', 'wb') as configfile:
    config.write(configfile)
</snippet></ROW><ROW><id>11637616</id><snippet>A177T</snippet></ROW><ROW><id>11637616</id><snippet>COADREAD ZNF271 Missense_Mutation MAAA-AA-3947 Q14591 A177T</snippet></ROW><ROW><id>11637616</id><snippet>test_string = 'A177T'
to_search = 'COADREAD ZNF271 Missense_Mutation MAAA-AA-3947 Q14591 A177T'
if test_string in to_search:
    print "found", test_string
</snippet></ROW><ROW><id>11637616</id><snippet>test_string = 'A177T'
to_search = 'COADREAD ZNF271 Missense_Mutation MAAA-AA-3947 Q14591 A177T'
if test_string in to_search.split(' '):
    print "found", test_string
</snippet></ROW><ROW><id>11638054</id><snippet>list</snippet></ROW><ROW><id>11638054</id><snippet>fp_events = db.GqlQuery("SELECT * FROM Event WHERE firstPlayer = :1", alias).fetch(mylimit)
sp_events = db.GqlQuery("SELECT * FROM Event WHERE secondPlayer = :1", alias).fetch(mylimit)
</snippet></ROW><ROW><id>11638054</id><snippet>fp_events_list = list(fp_events)
sp_events_list = list(sp_events)
events = fp_events_list + sp_events_list
</snippet></ROW><ROW><id>11638054</id><snippet>sorted_events = sorted(events, key=lambda event: event.time)
</snippet></ROW><ROW><id>11638092</id><snippet>json.dumps()</snippet></ROW><ROW><id>11638092</id><snippet>date = {}
data = urllib2.urlopen(url)
data_obj = json.loads(data.read())
s = json.dumps(data_obj, sort_keys=True, indent=4)
print s
</snippet></ROW><ROW><id>11638119</id><snippet>level_values = {'C':0, 'H':1, 'M':2, 'L':3}
sorted_dictionary = sorted(dictionary.items(), key=lambda x: level_values[x[0]])
</snippet></ROW><ROW><id>11638119</id><snippet>{% for level, events in sorted_dictionary %}
    {% for event in events %}
        do something with level, event
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>11638119</id><snippet>sorted_dictionary = sorted(dictionary.items(), key=lambda x: level_values[x[0]])
</snippet></ROW><ROW><id>11638119</id><snippet>dictionary.items()</snippet></ROW><ROW><id>11638119</id><snippet>{'A':[1,2,3], 'B',[4,5,6]}
</snippet></ROW><ROW><id>11638119</id><snippet>[('A', [1,2,3]), ('B', [4,5,6])]
</snippet></ROW><ROW><id>11638119</id><snippet>sorted</snippet></ROW><ROW><id>11638119</id><snippet>sorted()</snippet></ROW><ROW><id>11638119</id><snippet>level_values</snippet></ROW><ROW><id>11638119</id><snippet>sorted_dictionary</snippet></ROW><ROW><id>11638119</id><snippet>for value in sorted_dictionary:
     print value[0]
     print str(value[1])
</snippet></ROW><ROW><id>11638119</id><snippet>for severity, events in sorted_dictionary:
     print severity
     print str(events)
</snippet></ROW><ROW><id>11638203</id><snippet>frames = reshape(frames, ((archnodes*3),workingframes)    #reshapes array
</snippet></ROW><ROW><id>11638203</id><snippet>(</snippet></ROW><ROW><id>11638203</id><snippet>)</snippet></ROW><ROW><id>11638203</id><snippet>for</snippet></ROW><ROW><id>11638203</id><snippet>:</snippet></ROW><ROW><id>11638804</id><snippet>already_seen = set()
for line in sys.stdin:
   if line not in already_seen:
      already_seen.add(line)
      sys.stdout.write(line)
</snippet></ROW><ROW><id>11638812</id><snippet>serialThread = SerialThread(3)
serialThread.start()

def changeSleep():
    serialThread.setSleep(6)

time.sleep(15)
changeSleep()
time.sleep(15)
</snippet></ROW><ROW><id>11638812</id><snippet>sleeping for 3
Doing some work!
sleeping for 3
Doing some work!
sleeping for 3
Doing some work!
sleeping for 3
Doing some work!
sleeping for 3
Doing some work!
sleeping for 6
Doing some work!
sleeping for 6
Doing some work!
sleeping for 6
</snippet></ROW><ROW><id>11638980</id><snippet>"Dataset","Parent","XVal","YVal"
DataSet1,None,1,1
DataSet1,None,2,4
...
DataSet2,None,1,21
DataSet2,None,2,23
</snippet></ROW><ROW><id>11638983</id><snippet>PhotoScan.alignChunks</snippet></ROW><ROW><id>11638983</id><snippet>chunks = []
</snippet></ROW><ROW><id>11638983</id><snippet>    # ...
    chunks.append(new_chunk)
</snippet></ROW><ROW><id>11638983</id><snippet>PhotoScan.alignChunks(chunks, ...)
</snippet></ROW><ROW><id>11639358</id><snippet>x.index.is_unique</snippet></ROW><ROW><id>11639358</id><snippet>In [16]: left
Out[16]: 
            a
2000-01-01  1
2000-01-01  1
2000-01-01  1
2000-01-02  2
2000-01-02  2
2000-01-02  2

In [17]: right
Out[17]: 
            b
2000-01-01  3
2000-01-01  3
2000-01-01  3
2000-01-02  4
2000-01-02  4
2000-01-02  4

In [18]: left.join(right)
Out[18]: 
            a  b
2000-01-01  1  3
2000-01-01  1  3
2000-01-01  1  3
2000-01-01  1  3
2000-01-01  1  3
2000-01-01  1  3
2000-01-01  1  3
2000-01-01  1  3
2000-01-01  1  3
2000-01-02  2  4
2000-01-02  2  4
2000-01-02  2  4
2000-01-02  2  4
2000-01-02  2  4
2000-01-02  2  4
2000-01-02  2  4
2000-01-02  2  4
2000-01-02  2  4
</snippet></ROW><ROW><id>11639369</id><snippet>.fromtimestamp()</snippet></ROW><ROW><id>11639369</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; mt = 1342993416.0
&gt;&gt;&gt; datetime.datetime.fromtimestamp(mt)
datetime.datetime(2012, 7, 22, 23, 43, 36)
</snippet></ROW><ROW><id>11639369</id><snippet>strftime</snippet></ROW><ROW><id>11639369</id><snippet>&gt;&gt;&gt; start_time_format = '%Y-%m-%d %H:%M:%S'
&gt;&gt;&gt; datetime.datetime.fromtimestamp(mt).strftime(start_time_format)
'2012-07-22 23:43:36'
</snippet></ROW><ROW><id>11639369</id><snippet>time.strftime</snippet></ROW><ROW><id>11639369</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.strftime(start_time_format, time.localtime(mt))
'2012-07-22 23:43:36'
</snippet></ROW><ROW><id>11639789</id><snippet>&gt;&gt;&gt; code = compile("1" + "+1" * 1000000, "", "eval")
Segmentation fault
</snippet></ROW><ROW><id>11639789</id><snippet>&gt;&gt;&gt; code = compile("1" + "+1" * 1000, "", "eval")
&gt;&gt;&gt; eval(code)
1001
&gt;&gt;&gt; dis.dis(code)
  1           0 LOAD_CONST            1000 (1001)
              3 RETURN_VALUE        
</snippet></ROW><ROW><id>11639789</id><snippet>Lib/test/crashers</snippet></ROW><ROW><id>11639789</id><snippet>Lib/test/crashers/compiler_recursion.py</snippet></ROW><ROW><id>11640067</id><snippet>BoardOwner</snippet></ROW><ROW><id>11640067</id><snippet>BoardOwner</snippet></ROW><ROW><id>11640067</id><snippet>Board</snippet></ROW><ROW><id>11640067</id><snippet>Board</snippet></ROW><ROW><id>11640067</id><snippet>contenttypes</snippet></ROW><ROW><id>11640129</id><snippet>run()</snippet></ROW><ROW><id>11640129</id><snippet>__init__()</snippet></ROW><ROW><id>11640129</id><snippet>run()</snippet></ROW><ROW><id>11640281</id><snippet>import class
import pymock
import unittest

class TestMyClass(pymock.PyMockTestCase):

    def setUp(self):
        self.classTest = class.MyClass() 

    def test_CheckConfiguration(self):
        self.override(self.classTest, 'getDictionary')
        pymock.expectAndReturn(self.classTest.getDictionary(), {'a':123, 'b':22})
        self.replay()
        checkValue = self.classTest.checkConfiguration()
        self.verify()
</snippet></ROW><ROW><id>11640500</id><snippet>\K</snippet></ROW><ROW><id>11640500</id><snippet>s/(?&lt;=foo.*)bar/moo/s;
</snippet></ROW><ROW><id>11640500</id><snippet>s/foo.*\Kbar/moo/s;
</snippet></ROW><ROW><id>11640500</id><snippet>s/(?&lt;!foo.*)bar/moo/s;
</snippet></ROW><ROW><id>11640500</id><snippet>s/^(?:(?!foo).)*\Kbar/moo/s;
</snippet></ROW><ROW><id>11640500</id><snippet>\K</snippet></ROW><ROW><id>11640500</id><snippet>/foo.*bar/s

/^(?:(?!foo).)*bar/s
</snippet></ROW><ROW><id>11640500</id><snippet>(?:(?!STRING).)</snippet></ROW><ROW><id>11640500</id><snippet>(?:STRING)</snippet></ROW><ROW><id>11640500</id><snippet>[^CHAR]</snippet></ROW><ROW><id>11640500</id><snippet>CHAR</snippet></ROW><ROW><id>11640679</id><snippet>python setup.py install</snippet></ROW><ROW><id>11640679</id><snippet>export</snippet></ROW><ROW><id>11640679</id><snippet>./</snippet></ROW><ROW><id>11640679</id><snippet>./Python</snippet></ROW><ROW><id>11640679</id><snippet>import sys; print('\n'.join(sys.path))</snippet></ROW><ROW><id>11640953</id><snippet>__init__</snippet></ROW><ROW><id>11640953</id><snippet>listBox1 = wx.ListBox(..etc..)
</snippet></ROW><ROW><id>11640953</id><snippet>self.listBox1 = wx.ListBox(..etc..)
</snippet></ROW><ROW><id>11640953</id><snippet>self.</snippet></ROW><ROW><id>11641228</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(None)

Traceback (most recent call last):
  File "&lt;pyshell#1&gt;", line 1, in &lt;module&gt;
    dis.dis(None)
  File "C:\Python27\lib\dis.py", line 23, in dis
    distb()
  File "C:\Python27\lib\dis.py", line 57, in distb
    raise RuntimeError, "no last traceback to disassemble"
RuntimeError: no last traceback to disassemble
</snippet></ROW><ROW><id>11641228</id><snippet>RuntimeError</snippet></ROW><ROW><id>11641228</id><snippet>&gt;&gt;&gt; dis.dis(None)
 53           0 LOAD_FAST                0 (tb)
              3 LOAD_CONST               2 (None)
              6 COMPARE_OP               8 (is)
              9 POP_JUMP_IF_FALSE       82

 54          12 SETUP_EXCEPT            13 (to 28)

 55          15 LOAD_GLOBAL              1 (sys)
             18 LOAD_ATTR                2 (last_traceback)
             21 STORE_FAST               0 (tb)
             24 POP_BLOCK           
             25 JUMP_FORWARD            26 (to 54)

 56     &gt;&gt;   28 DUP_TOP             
             29 LOAD_GLOBAL              3 (AttributeError)
             32 COMPARE_OP              10 (exception match)
             35 POP_JUMP_IF_FALSE       53
             38 POP_TOP             
             39 POP_TOP             
             40 POP_TOP             

 57          41 LOAD_GLOBAL              4 (RuntimeError)
             44 LOAD_CONST               1 ('no last traceback to disassemble')
    --&gt;      47 RAISE_VARARGS            2
             50 JUMP_FORWARD             1 (to 54)
</snippet></ROW><ROW><id>11641268</id><snippet>import subprocess
import os

def main():
    pid = subprocess.Popen(['nohup', '/path/to/main_p.py'], 
                            stdout = open(os.devnull, 'w+', 0),
                            stderr = subprocess.STDOUT
                            ).pid
    print pid

if __name__ == "__main__":

    main() 
</snippet></ROW><ROW><id>11641268</id><snippet>ssh server /path/to/wrapper.py
</snippet></ROW><ROW><id>11641366</id><snippet>sprintf()</snippet></ROW><ROW><id>11641366</id><snippet>%%</snippet></ROW><ROW><id>11641366</id><snippet>"%s"</snippet></ROW><ROW><id>11641388</id><snippet>(2...n).all?</snippet></ROW><ROW><id>11641388</id><snippet>is-prime?</snippet></ROW><ROW><id>11641388</id><snippet>is-prime?</snippet></ROW><ROW><id>11641388</id><snippet>(set! *unchecked-math* true) ;; at top of file to avoid using BigIntegers

(defn ^:static is-prime? [^long n]
  (loop [i (long 2)] 
    (if (zero? (mod n i))
      false
      (if (&gt;= (inc i) n) true (recur (inc i))))))
</snippet></ROW><ROW><id>11641388</id><snippet>print</snippet></ROW><ROW><id>11641457</id><snippet>.values_list('id', flat=True)</snippet></ROW><ROW><id>11641457</id><snippet>workout_ids = workout.objects.filter(userid=user.id).\
    filter(workoutdate__gte=dates[0]).\
    filter(workoutdate__lte=dates[1]).\
    values_list('id', flat=True)
</snippet></ROW><ROW><id>11641457</id><snippet>models.ForeignKey</snippet></ROW><ROW><id>11641457</id><snippet>class Workout:
    user = models.ForeignKey(User)
    # other fields go here...

class Exercise:
    workout = models.ForeignKey(Workout)
    # other fields go here...
</snippet></ROW><ROW><id>11641457</id><snippet>workout_list = Workout.objects.filter(user=request.user)
exercise_list = Exercise.objects.filter(workout__in=workout_list).order_by('workout__workoutdate')
</snippet></ROW><ROW><id>11641516</id><snippet>with open(filename,'wb') as fp:
    pickle.dump(dict1,fp)
    pickle.dump(dict2,fp)
    pickle.dump(dict3,fp)

with open(filename,'rb') as fp:
    d1=pickle.load(fp)
    d2=pickle.load(fp)
    d3=pickle.load(fp)
</snippet></ROW><ROW><id>11641568</id><snippet>frames[((archnodes*3)+f)]</snippet></ROW><ROW><id>11641568</id><snippet>insert()</snippet></ROW><ROW><id>11641568</id><snippet>f</snippet></ROW><ROW><id>11641568</id><snippet>archnodes</snippet></ROW><ROW><id>11641568</id><snippet>frames</snippet></ROW><ROW><id>11641568</id><snippet>insert()</snippet></ROW><ROW><id>11641568</id><snippet>'int' object has no attribute 'insert'</snippet></ROW><ROW><id>11641568</id><snippet>int</snippet></ROW><ROW><id>11641568</id><snippet>insert</snippet></ROW><ROW><id>11641568</id><snippet>list.insert(index, obj)
</snippet></ROW><ROW><id>11641568</id><snippet>frames.insert(index, .. )
</snippet></ROW><ROW><id>11641568</id><snippet>frames[index].insert(..)
</snippet></ROW><ROW><id>11641754</id><snippet>imp</snippet></ROW><ROW><id>11641754</id><snippet>import imp
fp, pathname, description = imp.find_module('cv2', ['/path/to/opencv/'])
cv2 = imp.load_module('cv2', fp, pathname, description)
</snippet></ROW><ROW><id>11641914</id><snippet>valign</snippet></ROW><ROW><id>11641914</id><snippet>top</snippet></ROW><ROW><id>11641914</id><snippet>soup = BeautifulSoup(in_file)
cells = [cell.text.strip() for cell in soup('td', valign='top')]
</snippet></ROW><ROW><id>11641914</id><snippet>entries = []
for i in range(0, len(cells), 3):
    entries.append(cells[i:i+3])
</snippet></ROW><ROW><id>11642538</id><snippet>author = request.user
Review.objects.filter(chapter__work__user=author)
</snippet></ROW><ROW><id>11642625</id><snippet>bool</snippet></ROW><ROW><id>11642625</id><snippet>def myfunc(arg1, arg2):
  arg1 = bool(arg1)
</snippet></ROW><ROW><id>11643121</id><snippet>Import StringIO

def get_resize_img(img_file):
    buffer = StringIO.StringIO()
    img = Image.open(img_file)
    img = img.resize((640,960), Image.NEAREST)
    format = "YOUR_FORMAT" // JPG,PNG,etc.
    img.save(buffer,format)
    return buffer.getvalue()
</snippet></ROW><ROW><id>11643314</id><snippet>class IVCounter(object):
    @staticmethod
    def incrIV(arry):
        return arry[:15] + chr(ord(arry[15:]) + 1)
</snippet></ROW><ROW><id>11643314</id><snippet>staticmethod</snippet></ROW><ROW><id>11643893</id><snippet>import matplotlib.pyplot as plt
from pandas import DataFrame
df = DataFrame(np.random.randn(5, 3), columns=['A', 'B', 'C'])

fig, ax = plt.subplots()
ax2, ax3 = ax.twinx(), ax.twinx()
rspine = ax3.spines['right']
rspine.set_position(('axes', 1.25))
ax3.set_frame_on(True)
ax3.patch.set_visible(False)
fig.subplots_adjust(right=0.75)

df.A.plot(ax=ax, style='b-')
df.B.plot(ax=ax2, style='r-', secondary_y=True)
df.C.plot(ax=ax3, style='g-')
</snippet></ROW><ROW><id>11643963</id><snippet>- url: /tasks
  script: tasks.youtube_upload.app
</snippet></ROW><ROW><id>11644289</id><snippet>soup = BeautifulSoup.BeautifulSoup(xml)    
for section in soup.findAll("section"):
    for post in section.findAll('a', attrs={'class':['package-link']}):
        print post
</snippet></ROW><ROW><id>11644289</id><snippet>&lt;a href="/node/21537908" class="package-link"&gt;Democracy and its enemies&lt;/a&gt;
&lt;a href="/node/21537909" class="package-link"&gt;The year of self-induced stagnation&lt;/a&gt;
&lt;a href="/node/21537914" class="package-link"&gt;How to run the euro?&lt;/a&gt;
&lt;a href="/node/21537916" class="package-link"&gt;Wanted: a fantasy American president&lt;/a&gt;
&lt;a href="/node/21537917" class="package-link"&gt;Poking goes public&lt;/a&gt;
&lt;a href="/node/21537918" class="package-link"&gt;Varied company&lt;/a&gt;
&lt;a href="/node/21537919" class="package-link"&gt;All eyes on London&lt;/a&gt;
&lt;a href="/node/21537921" class="package-link"&gt;And now for some non-events&lt;/a&gt;
</snippet></ROW><ROW><id>11644890</id><snippet>runserver</snippet></ROW><ROW><id>11644890</id><snippet>--settings=</snippet></ROW><ROW><id>11644928</id><snippet>import gevent
from gevent import queue

master_queue=queue.Queue()
master_queue.put(1)
master_queue.put(2)
master_queue.put(3)
master_queue.put(StopIteration)

total_consumers = 10
consumer_queues = [queue.Queue() for i in xrange(total_consumers)]

def dispatcher(master_queue, consumer_queues):
    for i in master_queue:
        [j.put(i) for j in consumer_queues]
    [j.put(StopIteration) for j in consumer_queues]

def consumer(qq):
    for i in qq:
        print i

jobs=[gevent.spawn(dispatcher, q, consumer_queues)] + [gevent.spawn(consumer, i) for i in consumer_queues]
gevent.joinall(jobs)
</snippet></ROW><ROW><id>11645194</id><snippet>@staticmethod</snippet></ROW><ROW><id>11645194</id><snippet>staticmethod</snippet></ROW><ROW><id>11645194</id><snippet>self.__makeDict</snippet></ROW><ROW><id>11645194</id><snippet>self.__class__.__makeDict</snippet></ROW><ROW><id>11645194</id><snippet>Class.method</snippet></ROW><ROW><id>11645194</id><snippet>super</snippet></ROW><ROW><id>11645194</id><snippet>self.__class__</snippet></ROW><ROW><id>11645194</id><snippet>staticmethod</snippet></ROW><ROW><id>11645194</id><snippet>__makeDict.__get__(None, Dictionaries)(__lst)</snippet></ROW><ROW><id>11645194</id><snippet>def __makeDict(self, Lst=None):
    if Lst is None:
       Lst = self
    ...
</snippet></ROW><ROW><id>11645194</id><snippet>def _makeDict(Lst):
    ...

class Dictionaries(object):
   def getDict(self):
      return _makeDict(self.__CSVDescription)

   CSVDescription = _makeDict(__CSVDescription)
</snippet></ROW><ROW><id>11645587</id><snippet>feedparser.parse(url)
</snippet></ROW><ROW><id>11645587</id><snippet>{'bozo': 1,
 'bozo_exception': xml.sax._exceptions.SAXParseException("EntityRef: expecting ';'\n"),
 'encoding': u'utf-8',
 'entries': [{'link': u'https://hr.example.org/psp/hrapp&amp;SeqId=1',
   'links': [{'href': u'https://hr.example.org/psp/hrapp&amp;SeqId=1',
     'rel': u'alternate',
     'type': u'text/html'}],
   'tags': [{'label': None, 'scheme': None, 'term': u'All Open Jobs'}],
   'title': u'SENIOR BUDGET ANALYST (new)',
   'title_detail': {'base': u'',
    'language': None,
    'type': u'text/plain',
    'value': u'SENIOR BUDGET ANALYST (new)'},
   'updated': u'Wed, 18 Jul 2012 04:00:00 GMT',
   'updated_parsed': time.struct_time(tm_year=2012, tm_mon=7, tm_mday=18, tm_hour=4, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=200, tm_isdst=0)},
  {'link': u'https://hr.example.org/psp/hrapp&amp;SeqId=2',
   'links': [{'href': u'https://hr.example.org/psp/hrapp&amp;SeqId=2',
     'rel': u'alternate',
     'type': u'text/html'}],
   'tags': [{'label': None, 'scheme': None, 'term': u'All category'}],
   'title': u'BUDGET ANALYST (healthcare)',
   'title_detail': {'base': u'',
    'language': None,
    'type': u'text/plain',
    'value': u'BUDGET ANALYST (healthcare)'},
   'updated': u'Wed, 18 Jul 2012 04:00:00 GMT',
   'updated_parsed': time.struct_time(tm_year=2012, tm_mon=7, tm_mday=18, tm_hour=4, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=200, tm_isdst=0)}],
 'feed': {},
 'namespaces': {},
 'version': u'rss20'}
</snippet></ROW><ROW><id>11645845</id><snippet>izip</snippet></ROW><ROW><id>11645845</id><snippet>c</snippet></ROW><ROW><id>11645845</id><snippet>zip</snippet></ROW><ROW><id>11645845</id><snippet>map</snippet></ROW><ROW><id>11645845</id><snippet>filter</snippet></ROW><ROW><id>11645845</id><snippet>izip</snippet></ROW><ROW><id>11645845</id><snippet>&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; a = [[90, 26.7328829998, 131075.449348, 473898.809493], [90, 78.2985549184, 131116.812991,473929.491012], [90, 132.4760969, 131157.881628, 473964.821961]]
&gt;&gt;&gt; b = zip(*a)
&gt;&gt;&gt; c = map(list, izip(*b))
&gt;&gt;&gt; c
[[90, 26.7328829998, 131075.449348, 473898.809493], [90, 78.2985549184, 131116.812991, 473929.491012], [90, 132.4760969, 131157.881628, 473964.821961]]
</snippet></ROW><ROW><id>11645978</id><snippet>&gt;&gt;&gt; t = time.localtime()
&gt;&gt;&gt; suffix = 'st' if t.tm_mday in [1,21,31] else 'nd' if t.tm_mday in [2, 22] else 'rd' if t.tm_mday in [3, 23] else 'th'
&gt;&gt;&gt; time.strftime('%d%%s %B %Y', t) % suffix
'25th July 2012'
</snippet></ROW><ROW><id>11646000</id><snippet>ff = webdriver.Firefox()
ff.implicitly_wait(10) # seconds
</snippet></ROW><ROW><id>11646008</id><snippet>&lt;form name="filters" action="{{ url_for('filter') }}" method="GET" id="filters"&gt;
</snippet></ROW><ROW><id>11646008</id><snippet>http://host/filter?search_string=test&amp;chosen=&lt;id&gt;&amp;&lt;some other trash&gt;
</snippet></ROW><ROW><id>11646008</id><snippet>if request.method == 'GET':
    if request.args.get('search_string'):
        ...
</snippet></ROW><ROW><id>11646046</id><snippet>first_line_update = "WRITE IN THE FIRST LINE \n"
with open(tableTempFile, 'r+') as f:
  lines = f.readlines()
  lines[0] = first_line_update
  f.writelines(lines)
</snippet></ROW><ROW><id>11646046</id><snippet>from shutil import copy
from itertools import islice, chain 
# TODO: use a NamedTemporaryFile from the tempfile module
first_line_update = "WRITE IN THE FIRST LINE \n"
with open("inputfile", 'r') as infile, open("tmpfile", 'w+') as outfile:
  # replace the first line with the string provided:
  outfile.writelines(
    (line for line in chain((first_line_update,), islice(infile,1,None)))
  # if you don't want to replace the first line but to insert another line before
  # this simplifies to:
  #outfile.writelines(line for line in chain((first_line_update,), infile))
copy("tmpfile", "infile")
# TODO: remove temporary file
</snippet></ROW><ROW><id>11646101</id><snippet>%typemap(in) (int argc, char *argv[]) {
  int i;
  if (!PyList_Check($input)) {
    PyErr_SetString(PyExc_ValueError, "Expecting a list");
    return NULL;
  }
  $1 = PyList_Size($input);
  $2 = (char **) malloc(($1+1)*sizeof(char *));
  for (i = 0; i &lt; $1; i++) {
    PyObject *s = PyList_GetItem($input,i);
    if (!PyString_Check(s)) {
        free($2);
        PyErr_SetString(PyExc_ValueError, "List items must be strings");
        return NULL;
    }
    $2[i] = PyString_AsString(s);
  }
  $2[i] = 0;
}

%typemap(freearg) (int argc, char *argv[]) {
   free($2); // If here is uneeded, free(NULL) is legal
}
</snippet></ROW><ROW><id>11646101</id><snippet>import test
test.foo(["a", "b", "c"])
</snippet></ROW><ROW><id>11646101</id><snippet>test</snippet></ROW><ROW><id>11646101</id><snippet>foo</snippet></ROW><ROW><id>11646101</id><snippet>int argc, char *argv[]</snippet></ROW><ROW><id>11646101</id><snippet>%module test

%include &lt;argcargv.i&gt;

%apply (int ARGC, char **ARGV) { (int argc, char *argv[]) }

void foo(int argc, char *argv[]);
</snippet></ROW><ROW><id>11646413</id><snippet>global my_module_variable</snippet></ROW><ROW><id>11646413</id><snippet>my_module_variable</snippet></ROW><ROW><id>11646413</id><snippet>nonlocal my_non_local_variable</snippet></ROW><ROW><id>11646413</id><snippet>+=</snippet></ROW><ROW><id>11646413</id><snippet>print(a)</snippet></ROW><ROW><id>11646413</id><snippet>1.</snippet></ROW><ROW><id>11646413</id><snippet>2.</snippet></ROW><ROW><id>11646413</id><snippet>func()</snippet></ROW><ROW><id>11646413</id><snippet>a = 10</snippet></ROW><ROW><id>11646413</id><snippet>&gt;&gt;&gt;&gt; def func()
        global a
        print(a)
        a += 1
&gt;&gt;&gt;&gt; a = 10
&gt;&gt;&gt;&gt; func()
10
&gt;&gt;&gt;&gt; func()
11
</snippet></ROW><ROW><id>11646526</id><snippet>django.contrib.admin.autodiscover</snippet></ROW><ROW><id>11646526</id><snippet>AdminSite</snippet></ROW><ROW><id>11646526</id><snippet>admin</snippet></ROW><ROW><id>11646526</id><snippet>settings.INSTALLED_APPS</snippet></ROW><ROW><id>11646526</id><snippet>project.admin.foo_site</snippet></ROW><ROW><id>11646526</id><snippet>project.admin.FooAdminSite</snippet></ROW><ROW><id>11646526</id><snippet># project/urls.py
from django.conf.urls import url
from django.contrib import admin

from project.admin import foo_site


admin.autodiscover()

urlpatterns = patterns('',
    url(r'^admin/', include(foo_site.urls)),
)

#project/app/admin.py
from project.admin import foo_site
from project.app.models import Bar


foo_site.register(Bar)
</snippet></ROW><ROW><id>11647875</id><snippet>struct</snippet></ROW><ROW><id>11647875</id><snippet>int</snippet></ROW><ROW><id>11647875</id><snippet>unsigned int</snippet></ROW><ROW><id>11647875</id><snippet>struct.unpack</snippet></ROW><ROW><id>11647875</id><snippet>with open('something.cdr', 'rb') as data:
    x, x1, x2, x3 = struct.unpack('&lt;IH2B', data.read(8))
</snippet></ROW><ROW><id>11648249</id><snippet>urllib</snippet></ROW><ROW><id>11648249</id><snippet>PyQt4.QtWebKit</snippet></ROW><ROW><id>11648249</id><snippet>import sys
import signal

from optparse import OptionParser
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtWebKit import QWebPage

url = "http://www.stackoverflow.com"

def page_to_file(page):
    with open("output", 'w') as f:
        f.write(page.mainFrame().toHtml())
        f.close()

app = QApplication()
page = QWebPage()
signal.signal( signal.SIGINT, signal.SIG_DFL )
page.connect(page, SIGNAL( 'loadFinished(bool)' ), page_to_file)
page.mainFrame().load(QUrl(url))
sys.exit( app.exec_() )
</snippet></ROW><ROW><id>11648249</id><snippet>urllib</snippet></ROW><ROW><id>11648710</id><snippet>&gt;&gt;&gt; for k, v in Reaction.__dict__.iteritems():
...     if not k.startswith('__'):
...         print v
... 
lorem
dolor
impsum
</snippet></ROW><ROW><id>11648710</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; class Reaction(object):
...     Var1 = "lorem"
...     Var2 = "impsum"
...     Var3 = "dolor"
...     def __iter__(self):
...         return (v for k, v in inspect.getmembers(self) if not k.startswith('__'))
... 
&gt;&gt;&gt; for value in Reaction():
...     print value
... 
lorem
impsum
dolor
</snippet></ROW><ROW><id>11648812</id><snippet>for section in soup.findAll('h2'):
    nextNode = section
    while True:
        nextNode = nextNode.nextSibling
        try:
            tag_name = nextNode.name
        except AttributeError:
            tag_name = ""
        if tag_name == "p":
            print nextNode.string
        else:
            print "*****"
            break
</snippet></ROW><ROW><id>11648812</id><snippet>&lt;h2&gt;section1&lt;/h2&gt;
&lt;p&gt;article1&lt;/p&gt;
&lt;p&gt;article2&lt;/p&gt;
&lt;p&gt;article3&lt;/p&gt;

&lt;h2&gt;section2&lt;/h2&gt;
&lt;p&gt;article4&lt;/p&gt;
&lt;p&gt;article5&lt;/p&gt;
&lt;p&gt;article6&lt;/p&gt;
</snippet></ROW><ROW><id>11648812</id><snippet>article1
article2
article3
*****
article4
article5
article6
*****
</snippet></ROW><ROW><id>11649145</id><snippet>Surfaces</snippet></ROW><ROW><id>11649145</id><snippet>Surface</snippet></ROW><ROW><id>11649145</id><snippet>convert_alpha</snippet></ROW><ROW><id>11649145</id><snippet>COLORKEY=(127, 127, 0)
TRANSPARENCY=(0, 0, 0, 0)
import pygame
pygame.init()
screen = pygame.display.set_mode((200, 200))
for x in xrange(0, 200, 20):
  pygame.draw.line(screen, (255, 255, 255), (x, 0),(x, 480))

# create red circle using a colorkey
red_circle = pygame.Surface((200, 200))
red_circle.fill(COLORKEY)
red_circle.set_colorkey(COLORKEY)
pygame.draw.circle(red_circle, (255, 0, 0), (100, 100), 25)

#create a green circle using alpha channel (per-pixel transparency)
green_circle = pygame.Surface((100, 100)).convert_alpha()
green_circle.fill(TRANSPARENCY)
pygame.draw.circle(green_circle, (0, 255, 0, 127), (50, 50), 25)

# convert colorkey surface to alpha channel surface before blitting
red_circle = red_circle.convert_alpha()
red_circle.blit(green_circle, (75, 75))

screen.blit(red_circle, (0, 0))

pygame.display.flip()
</snippet></ROW><ROW><id>11649366</id><snippet>recv()</snippet></ROW><ROW><id>11649366</id><snippet>recv()</snippet></ROW><ROW><id>11649366</id><snippet>import socket, errno, time

sock = socket.socket()
sock.connect(('hostname', 1234))
sock.setblocking(0)

while True:
    try:
        data = sock.recv(1024)
        if not data:
            print "connection closed"
            sock.close()
            break
        else:
            print "Received %d bytes: '%s'" % (len(data), data)
    except socket.error, e:
        if e.args[0] == errno.EWOULDBLOCK: 
            print 'EWOULDBLOCK'
            time.sleep(1)           # short delay, no tight loops
        else:
            print e
            break
</snippet></ROW><ROW><id>11649366</id><snippet>select</snippet></ROW><ROW><id>11649421</id><snippet>for email, name, entry in feed:
    photo_link = e.GetPhotoLink()
    if photo_link:
        request = http.request(
            'GET',
            photo_link.href,
            headers={
                'Authorization':'OAuth %s' % client.current_token.access_token
            }
        )

        if request.status == 200:
            photo = str(request.read())
            fname = str(uuid.uuid4()) + '.jpg'
            image_file = open(dname + '/' + fname, 'wb')
            image_file.write(photo)
            image_file.close()
            result[email] = '/media/import/%s/%s' % (tid, fname) #str(photo.href) #
</snippet></ROW><ROW><id>11649537</id><snippet>import multiprocessing

def Parallel(junk):    
    #...snip...

if __name__ == "__main__":
   p = multiprocessing.Pool(8)

   results = p.map(Parallel, range(8))
</snippet></ROW><ROW><id>11649892</id><snippet>__init__</snippet></ROW><ROW><id>11649892</id><snippet>__init__</snippet></ROW><ROW><id>11649892</id><snippet>__init__</snippet></ROW><ROW><id>11649892</id><snippet>__init__</snippet></ROW><ROW><id>11649892</id><snippet>__init__</snippet></ROW><ROW><id>11649902</id><snippet>is_local_file()</snippet></ROW><ROW><id>11649902</id><snippet>-jobs</snippet></ROW><ROW><id>11649902</id><snippet>make</snippet></ROW><ROW><id>11649920</id><snippet>func_list= ["function1", "function2", "function3"]

class doit(object):
    def __init__(self):
        for item in func_list:
            getattr(self, item)()
    def function1(self):
        print "f1"
    def function2(self):
        print "f2"
    def function3(self):
        print "f3"



&gt;&gt;&gt; doit()
f1
f2
f3
</snippet></ROW><ROW><id>11649920</id><snippet>for item in func_list:
     if item.startswith('__'):
         getattr(self, '_' + self.__class__.__name__+ item)()
     else:
         getattr(self, item)()
</snippet></ROW><ROW><id>11649920</id><snippet>getattr(object, name[, default])
</snippet></ROW><ROW><id>11649931</id><snippet>p</snippet></ROW><ROW><id>11649931</id><snippet>np.arange(n)</snippet></ROW><ROW><id>11649931</id><snippet>s</snippet></ROW><ROW><id>11649931</id><snippet>p</snippet></ROW><ROW><id>11649931</id><snippet>p[s] == np.arange(n)
</snippet></ROW><ROW><id>11649931</id><snippet>s</snippet></ROW><ROW><id>11649931</id><snippet>np.argsort</snippet></ROW><ROW><id>11649931</id><snippet>&gt;&gt;&gt; p = np.array([3, 2, 0, 1])
&gt;&gt;&gt; np.argsort(p)
array([2, 3, 1, 0])
&gt;&gt;&gt; p[np.argsort(p)]
array([0, 1, 2, 3])
</snippet></ROW><ROW><id>11649982</id><snippet>return 0</snippet></ROW><ROW><id>11649982</id><snippet>for</snippet></ROW><ROW><id>11649982</id><snippet>for</snippet></ROW><ROW><id>11650034</id><snippet>email.header</snippet></ROW><ROW><id>11650034</id><snippet>&gt;&gt;&gt; from email.header import decode_header
&gt;&gt;&gt; bytes, encoding = decode_header('=?ISO-8859-1?Q?Certificado=5FZonificaci=F3n=5F2010=2Epdf?=')[0]
&gt;&gt;&gt; bytes.decode(encoding)
u'Certificado_Zonificaci\xf3n_2010.pdf'
</snippet></ROW><ROW><id>11650220</id><snippet>TAGS = ((1,'DOG'),(2,'CAT'),(3,'HORSE')) # and so on

class MyThing(models.Model):
   name = models.CharField(max_length=200)
   tag = models.IntegerField(choices=TAGS)
</snippet></ROW><ROW><id>11650220</id><snippet>foo = MyThing.objects.order_by('?')[0] # get some random object
print 'My object is a ',foo.get_tag_display()
</snippet></ROW><ROW><id>11650401</id><snippet>def type_split(sources):
    types = sorted(set(type(i) for i in sources))
    return [[item if type(item) == itype else None for item in sources] 
            for itype in types]  
</snippet></ROW><ROW><id>11650401</id><snippet>import collections
import numbers
def type_split(sources):
    types = [basestring, collections.Mapping, numbers.Number]
    return [[item if isinstance(item, itype) else None for item in sources] 
            for itype in types] 
</snippet></ROW><ROW><id>11650621</id><snippet>random.choice</snippet></ROW><ROW><id>11650621</id><snippet>bincount</snippet></ROW><ROW><id>11650621</id><snippet>np.bincount(np.random.choice(b.size, 100, p=b.flat),
            minlength=b.size).reshape(b.shape)
</snippet></ROW><ROW><id>11650621</id><snippet>random.choice</snippet></ROW><ROW><id>11650621</id><snippet>np.searchsorted(np.cumsum(b), np.random.random(100))
</snippet></ROW><ROW><id>11650621</id><snippet>np.bincount(np.searchsorted(np.cumsum(b), np.random.random(100)),
            minlength=b.size).reshape(b.shape)
</snippet></ROW><ROW><id>11650744</id><snippet>p = p[~(p[:,2] &gt; 30)]
</snippet></ROW><ROW><id>11650744</id><snippet>p = p[p[:,2] &lt;= 30]
</snippet></ROW><ROW><id>11650744</id><snippet>array([[ 0,  1,  3],
       [ 1,  5,  6],
       [ 1, 34,  4]])
</snippet></ROW><ROW><id>11650971</id><snippet>&lt;html&gt; 
  &lt;head&gt; 
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt; 
  &lt;/head&gt; 
  &lt;body&gt; 
  &lt;h3&gt;refresh the page after you've submitted to see your new image&lt;/h3&gt;
    &lt;div style="width:300px"&gt;
    &lt;form action="http://s3.amazonaws.com/dev.sente" method="post" enctype="multipart/form-data"&gt; 
      &lt;fieldset&gt;
      &lt;input type="hidden" name="acl" value="public-read" /&gt; &lt;br /&gt; 
      &lt;i&gt;name of key:&lt;/i&gt;&lt;input type="text" name="key" readonly="true" value="image.jpg" /&gt; &lt;br /&gt; 
      &lt;input name="file" type="file" /&gt; &lt;br /&gt; 
      &lt;input name="submit" value="Upload" type="submit" /&gt; 
    &lt;/fieldset&gt;
    &lt;/form&gt; 
  &lt;/div&gt;
    &lt;br /&gt;
    &lt;a href="http://s3.amazonaws.com/dev.sente/image.jpg"&gt;http://s3.amazonaws.com/dev.sente/image.jpg&lt;/a&gt;&lt;br /&gt;
      &lt;a href="http://s3.amazonaws.com/dev.sente/image.jpg"&gt;&lt;img src="http://s3.amazonaws.com/dev.sente/image.jpg" /&gt;&lt;/a&gt;
    &lt;/a&gt;
  &lt;/body&gt; 
&lt;/html&gt; 
</snippet></ROW><ROW><id>11651060</id><snippet>TEMPLATE_DIRS = ('Users/jonathanschen/Python/projects/skeleton/yectime/templates',)
</snippet></ROW><ROW><id>11651060</id><snippet>TEMPLATE_DIRS = ('/Users/jonathanschen/Python/projects/skeleton/yectime/templates',)
</snippet></ROW><ROW><id>11651060</id><snippet>manage.py</snippet></ROW><ROW><id>11651060</id><snippet>/Users/jonathanschen/Python/projects/skeleton/</snippet></ROW><ROW><id>11651069</id><snippet>send_data</snippet></ROW><ROW><id>11651069</id><snippet>sock</snippet></ROW><ROW><id>11651069</id><snippet>close()</snippet></ROW><ROW><id>11651069</id><snippet>def create_socket():
    sock = socket.socket()
    host = 'localhost'
    port = 8000
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((host,port))
    return sock

def send_data(message, sock):
    """Get requests"""
    if message:
        sock.sendall(message)

    # Look for the response
    has_request = False
    while not has_request:
        data = sock.recv(1024)

        #First I get ACK, code not listed here...
        #Next iteration, I got my request message
        has_request = True
    return data

if __name__ == '__main__':
    server_sock = create_socket()
    server_data = send_data(event, server_sock)

    if server_data:
        parse_request(server_data, server_sock)

    #no more use of server_socket ? 
    server_sock.close()
</snippet></ROW><ROW><id>11651153</id><snippet>b = df.pivot('USERNAME', 'REQUEST_TYPE')
b.columns = ['{0}_{1}'.format(*col) for col in b.columns]
</snippet></ROW><ROW><id>11651153</id><snippet>b</snippet></ROW><ROW><id>11651153</id><snippet>         LATENCY_1 LATENCY_2 STATUS_1 STATUS_2
USERNAME                                      
bar             10        12  SUCCESS  FAILURE
foo              7        17  SUCCESS  SUCCESS
</snippet></ROW><ROW><id>11651200</id><snippet>lxml</snippet></ROW><ROW><id>11651200</id><snippet>soup = BeautifulSoup(page, "html.parser")
</snippet></ROW><ROW><id>11651409</id><snippet>import re
s = """cluster8032:  WoodR1|Wood_4286 Q8R1|EIK58010 F113|AEV64487.1 NFM421|PSEBR_a4327"""
results = re.findall('\|([^ ]*)',s) #list of ids that have been extracted from string
print('\n'.join(results)) #pretty output
</snippet></ROW><ROW><id>11651409</id><snippet>Wood_4286
EIK58010
AEV64487.1
PSEBR_a4327
</snippet></ROW><ROW><id>11651409</id><snippet>with open('out.txt', mode = 'w') as filehandle:
    filehandle.write('\n'.join(results))
</snippet></ROW><ROW><id>11651614</id><snippet>import ast
with open('list.txt') as f:
    output = ast.literal_eval(f.read())
</snippet></ROW><ROW><id>11651614</id><snippet>output</snippet></ROW><ROW><id>11651614</id><snippet>f.read()</snippet></ROW><ROW><id>11651614</id><snippet>cPickle</snippet></ROW><ROW><id>11651614</id><snippet>json</snippet></ROW><ROW><id>11651697</id><snippet>f</snippet></ROW><ROW><id>11651697</id><snippet>f.readlines()</snippet></ROW><ROW><id>11651697</id><snippet>lines</snippet></ROW><ROW><id>11651697</id><snippet>f.seek(0)</snippet></ROW><ROW><id>11651951</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>11652181</id><snippet>import json
from subprocess import Popen, PIPE

json_data = json.dumps({"key":"value"})
p = subprocess.Popen("closure-execution", stdout=PIPE, stdin=PIPE, sterr=PIPE)
# stuff some data into the pipe and wait for the process to end:
stdout, sterr = p.communicate(json_data)
</snippet></ROW><ROW><id>11652237</id><snippet>class TelefoneIpForm(forms.ModelForm):
    class Meta:
        model = TelefoneIp

    def save(self, commit=True):
        instance = super(TelefoneIpForm, self).save(commit=commit)         

        equipamento = instance.equipamento
        equipamento.cliente = instance.cliente_atual
        equipamento.save()

class TelefoneIPAdmin(admin.ModelAdmin):
    list_display = ('mac', 'modelo', 'fornecedor', )
    list_filter = ['cliente_atual__nome']
    search_fields = ['mac']
    inlines = [TelefoneIPInline]
    form = TelefoneIpForm
</snippet></ROW><ROW><id>11652355</id><snippet>shelve</snippet></ROW><ROW><id>11652355</id><snippet>anydbm</snippet></ROW><ROW><id>11652442</id><snippet>_sentinel = object()
def next(it, default=_sentinel):
    try:
        return it.next()
    except StopIteration:
        if default is _sentinel:
            raise
        return default
</snippet></ROW><ROW><id>11652614</id><snippet>for script in dir(tpp):
    if not "__" in script: #not a builtin...
        docstrings1 = getattr( tpp, script).__doc__
        if docstrings1:  #objects without docstrings return None above, which can't be split.
            docstrings2 = " ".join(docstrings1.split())#clean out any newline chars
            print script, docstrings2
</snippet></ROW><ROW><id>11652614</id><snippet>def get_all_doc(obj,indent=''):
    for item in filter(lambda x:not x.startswith('__'),dir(obj)):
        o=getattr(obj,item)
        print "{indent}{item} {doc}".format(indent=indent,
                                            item=item,
                                            doc=o.__doc__)
        get_all_doc(o,indent=indent+'   ')
</snippet></ROW><ROW><id>11652707</id><snippet>print "\r{0}".format((float(i)/n)*100),
</snippet></ROW><ROW><id>11652707</id><snippet>sys.stdout.write("\r{0}".format((float(i)/n)*100))
sys.stdout.flush()
</snippet></ROW><ROW><id>11652964</id><snippet>file = open('P:\test.csv', 'w')

fields = ('ItemID', 'Factor', 'FixedAmount')
wr = csv.DictWriter(file, fieldnames=fields, lineterminator = '\n')

wr.writeheader()
wr.writerow({'ItemID':1, 'Factor': 2, 'FixedAmount':3})
file.close()
</snippet></ROW><ROW><id>11652976</id><snippet>plt.xticks(range(200),date)
</snippet></ROW><ROW><id>11652976</id><snippet>idx=np.linspace(0,199,5).astype('int')
plt.xticks(idx,[date[i] for i in idx])
</snippet></ROW><ROW><id>11653015</id><snippet>import glob

year = raw_input('Year: ')        # Example: Year: 2009
number = raw_input('Number: ')    # Example: Number: 12
filenames = glob.glob('{year}_*{number}*'.format(year=year, number=number))
</snippet></ROW><ROW><id>11653015</id><snippet>2009_</snippet></ROW><ROW><id>11653015</id><snippet>12</snippet></ROW><ROW><id>11653015</id><snippet>12</snippet></ROW><ROW><id>11653015</id><snippet>os.path.exists</snippet></ROW><ROW><id>11653015</id><snippet>os.path.isfile</snippet></ROW><ROW><id>11653015</id><snippet>for filename in list of filenames:
    if filename is not valid:
        print "&lt;filename&gt; is not valid!"
</snippet></ROW><ROW><id>11653015</id><snippet>import os
import re

pattern = 'Put your actual pattern here'

# For a different directory, change the . to whatever the directory should be
for filename in os.listdir('.'):
    if not re.match(pattern, filename):
        print("Bad filename: ", filename)
</snippet></ROW><ROW><id>11653122</id><snippet>bottle.run(..., quiet=True)
</snippet></ROW><ROW><id>11653199</id><snippet>result</snippet></ROW><ROW><id>11653199</id><snippet>result</snippet></ROW><ROW><id>11653199</id><snippet>myfile</snippet></ROW><ROW><id>11653199</id><snippet>myfile.write</snippet></ROW><ROW><id>11653199</id><snippet>myfile = open(outfile, 'w')
for line in sourcefile: 
    result = [line[slice(*slc)] for slc in slices]
    myfile.write("%s\t" % result)
</snippet></ROW><ROW><id>11653199</id><snippet>+=</snippet></ROW><ROW><id>11653199</id><snippet>result += [line[slice(*slc)] for slc in slices] 
</snippet></ROW><ROW><id>11653499</id><snippet>mmap</snippet></ROW><ROW><id>11653629</id><snippet>/profile</snippet></ROW><ROW><id>11653629</id><snippet>/profile/username</snippet></ROW><ROW><id>11653629</id><snippet>app = webapp2.WSGIApplication([('/', MainPage),
                               ('/signup', Register),
                               ('/login', Login), 
                               ('/logout', Logout),
                               ('r/profile/(\w+)', Profile)
                              ],
                              debug=True)
</snippet></ROW><ROW><id>11653629</id><snippet>class Profile(BlogHandler):
    def get(self, username):
</snippet></ROW><ROW><id>11653629</id><snippet>/profile/username</snippet></ROW><ROW><id>11653654</id><snippet>sqlite3.connect</snippet></ROW><ROW><id>11653654</id><snippet>import sqlite3

# Get connections to the databases
db_a = sqlite3.connect('database_a.db')
db_b = sqlite3.connect('database_b.db')

# Get the contents of a table
b_cursor = db_b.cursor()
b_cursor.execute('SELECT * FROM mytable')
output = b_cursor.fetchall()   # Returns the results as a list.
#b_cursor.close()

# Insert those contents into another table.
a_cursor = db_a.cursor()
for row in output:
    a_cursor.execute('INSERT INTO myothertable VALUES (?, ?, ...etc..., ?, ?)', row)
db_a.commit()
a_cursor.close()
b_cursor.close()
</snippet></ROW><ROW><id>11653927</id><snippet>Thesaurus.content</snippet></ROW><ROW><id>11653927</id><snippet>Thesaurus.text</snippet></ROW><ROW><id>11653927</id><snippet>Thesaurus.json</snippet></ROW><ROW><id>11653927</id><snippet>requests.get()</snippet></ROW><ROW><id>11653927</id><snippet>requests.Response</snippet></ROW><ROW><id>11653970</id><snippet>POST</snippet></ROW><ROW><id>11653970</id><snippet>request.POST or None</snippet></ROW><ROW><id>11653970</id><snippet>None</snippet></ROW><ROW><id>11653970</id><snippet>else:</snippet></ROW><ROW><id>11653970</id><snippet>elif request.POST:</snippet></ROW><ROW><id>11654020</id><snippet>result = {}
for k, v in my_list + other_list:
    result[k] = result.get(k, 0) + v
</snippet></ROW><ROW><id>11654020</id><snippet>result.items()</snippet></ROW><ROW><id>11654364</id><snippet>/apps/oracle/client/11.2.0.1/home1/lib/</snippet></ROW><ROW><id>11654364</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>11654364</id><snippet>.bashrc</snippet></ROW><ROW><id>11654364</id><snippet>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/apps/oracle/client/11.2.0.1/home1/lib/
</snippet></ROW><ROW><id>11654378</id><snippet>setup.py</snippet></ROW><ROW><id>11654378</id><snippet>"from setup import name_1, name_2, name_3"
</snippet></ROW><ROW><id>11654378</id><snippet>setup</snippet></ROW><ROW><id>11654378</id><snippet>timeit.timeit()</snippet></ROW><ROW><id>11654378</id><snippet>"from __main__ import name_1, name_2, name_3"
</snippet></ROW><ROW><id>11654483</id><snippet>outputs</snippet></ROW><ROW><id>11654483</id><snippet>sum</snippet></ROW><ROW><id>11654483</id><snippet>(n,)</snippet></ROW><ROW><id>11654483</id><snippet>(1,n)</snippet></ROW><ROW><id>11654483</id><snippet>sum(exp(outputs), axis=1).reshape(1, -1)
</snippet></ROW><ROW><id>11654483</id><snippet>reshape</snippet></ROW><ROW><id>11654483</id><snippet>outputs</snippet></ROW><ROW><id>11654483</id><snippet>np.matrix</snippet></ROW><ROW><id>11654483</id><snippet>&gt;&gt;&gt; outputs = np.matrix(outputs)
&gt;&gt;&gt; (sum(exp(outputs), axis=1) * ones((1,shape(outputs)[0]))).shape
(10, 10)
</snippet></ROW><ROW><id>11655565</id><snippet>importlib.import
module</snippet></ROW><ROW><id>11655565</id><snippet>import importlib
fabfile = importlib.import_module('my-repo-name.fab.fabfile', None)
X = fabfile.X
</snippet></ROW><ROW><id>11655565</id><snippet>$ mv my-repo-name my_repo_name
$ ln -s my_repo_name my-repo-name
</snippet></ROW><ROW><id>11656097</id><snippet>from Tkinter import *
import tkFont

def on_enter(event):
    event.widget.configure(font="underlined_font")

def on_leave(event):
    event.widget.configure(font="normal_font")


root=Tk()
root.geometry('100x100+100+100')

normal= tkFont.Font(name="normal_font")
underlined = tkFont.Font(name="underlined_font", underline=True)

lbl1 = Label(root, text='Label 1', font="normal_font")
lbl1.bind('&lt;Enter&gt;', on_enter)
lbl1.bind('&lt;Leave&gt;', on_leave)
lbl1.pack()
lbl2 = Label(root, text='Label 2', font="normal_font")
lbl2.bind('&lt;Enter&gt;', on_enter)
lbl2.bind('&lt;Leave&gt;', on_leave)
lbl2.pack()
lbl3 = Label(root, text='Label 3', font="normal_font")
lbl3.bind('&lt;Enter&gt;', on_enter)
lbl3.bind('&lt;Leave&gt;', on_leave)
lbl3.pack()

mainloop()
</snippet></ROW><ROW><id>11656222</id><snippet>s = '1,1'
p = tuple( int(x) for x in s.split(',') )
</snippet></ROW><ROW><id>11656222</id><snippet>p = tuple( s.split(',') )
</snippet></ROW><ROW><id>11656222</id><snippet>s=s.replace("'")</snippet></ROW><ROW><id>11656322</id><snippet> //tr[@class="Entry"]//tr/td[contains(text(), "Section title")]/following::td[@class = "Data"]/text()
</snippet></ROW><ROW><id>11656322</id><snippet>//tr[@class="Entry"]//tr/td[contains(text(), "Section title")]/following::td[@class="Label"][1]/following::td[@class = "Data"]/text()
</snippet></ROW><ROW><id>11656322</id><snippet>  //tr[@class="Entry"]//tr/td[contains(text(), "Section title")]/following::td[@class = "Data"][position() &lt;= (count(//tr[@class="Entry"]//tr/td[contains(text(), "Section title")]/following::td[@class = "Data"]/text())  - count(//tr[@class="Entry"]//tr/td[contains(text(), "Section title")]/following::td[@class="Label"][1]/following::td[@class = "Data"]/text()) )]/text()
</snippet></ROW><ROW><id>11656322</id><snippet>except</snippet></ROW><ROW><id>11656322</id><snippet> //tr[@class="Entry"]//tr/td[contains(text(), "Section title")]/following::td[@class = "Data"]/text() except  //tr[@class="Entry"]//tr/td[contains(text(), "Section title")]/following::td[@class="Label"][1]/following::td[@class = "Data"]/text()
</snippet></ROW><ROW><id>11656446</id><snippet>G = [{} for i in range(len(points))]
for i,e in enumerate(edges):
  G[e[0]][e[1]] = weights[i]
return G
</snippet></ROW><ROW><id>11656446</id><snippet>O(P*E)</snippet></ROW><ROW><id>11656446</id><snippet>O(E)</snippet></ROW><ROW><id>11656553</id><snippet>defaultdict</snippet></ROW><ROW><id>11656553</id><snippet>set</snippet></ROW><ROW><id>11656553</id><snippet>if code:
    if code.group(1) not in numlookup[line[-2]]:
        numlookup[line[-2]].append(code.group(1))
    if code.group(0) not in wholetoken[line[-2]]:
        wholetoken[line[-2]].append(code.group(0))
</snippet></ROW><ROW><id>11656799</id><snippet>from math import log
[log(y,10) for y in x]
</snippet></ROW><ROW><id>11656899</id><snippet>dict</snippet></ROW><ROW><id>11656899</id><snippet>list = node.getElementsByTagName('Item')
items = {}
for item in list:
  output_id = item.getAttribute('id')
  items[output_id] = item # Put items into dict to use them later.
for id in items:
  print "Item[%d] -&gt; %s" % (id, items[id]) # Only single item per id left.
</snippet></ROW><ROW><id>11656899</id><snippet>list = node.getElementsByTagName('Item')
items = dict((item.getAttribute('id'), item) for item in list)
for id in items:
  print "Item[%d] -&gt; %s" % (id, items[id]) # Only single item per id left.
</snippet></ROW><ROW><id>11657046</id><snippet>C-P</snippet></ROW><ROW><id>11657046</id><snippet>C-N</snippet></ROW><ROW><id>11657046</id><snippet>C-R</snippet></ROW><ROW><id>11657046</id><snippet>C-S</snippet></ROW><ROW><id>11657095</id><snippet>string_one = 'ABCD 123 - Abcdef 0000'
string_two = 'ABCD 123/DEFG123 - Abcdef 0000'
pattern = r'[A-Z]+ [A-Z0-9/]{2,20} - [A-Z][a-z]+ [0-9]{4}'
regex = re.compile(pattern)
if regex.search(string_one):
    print "string one matches!"
if regex.search(string_two):
    print "string two matches!"

# output:
string one matches!
string two matches!
</snippet></ROW><ROW><id>11657095</id><snippet>r'this is a raw string'</snippet></ROW><ROW><id>11657364</id><snippet>to_print = []
count = 0
started = False
for line in f.readlines():
    if "REALSTEP" in line:
        if not started: 
            started = True
        to_print.append(line)
        count += 1
    else:
        if count &gt; 3: print('\n'.join(to_print))
        started = False
        count = 0
        to_print = []
</snippet></ROW><ROW><id>11657776</id><snippet>for index, value in enumerate(list1):
    list1[index] = list2[index]
</snippet></ROW><ROW><id>11657776</id><snippet>list1 = copy.copy(list2)</snippet></ROW><ROW><id>11657776</id><snippet>normalized_values = ['123', '456']
content = ['a123', '123', 'b456', '789']
for index, value in enumerate(content):
    for normalized_value in normalized_values:
        if normalized_value in value:
            content[index] = normalized_value
</snippet></ROW><ROW><id>11657776</id><snippet>content = ['123', '123', '456', '789']
</snippet></ROW><ROW><id>11657776</id><snippet>replacement_map = {'123' : ('a123', '1234'), '456' : ('00456',)}
input = ['123', '456', '234', '123', '789']
output = []
for value in input:
    try:
        output.extend(replacement_map[value])
    except KeyError:
        output.append(value)
</snippet></ROW><ROW><id>11657776</id><snippet>if value in replacement_map:
    output.extend(replacement_map[value])
else:
    output.append(value)
</snippet></ROW><ROW><id>11657776</id><snippet>replacement_map = {}
for key, value in zip(list1, list2):
    try:
        replacement_map[key].append(value)
    except KeyError:
        replacement_map[key] = [value]
</snippet></ROW><ROW><id>11657781</id><snippet>class Business(models.Model, forms.Form):
</snippet></ROW><ROW><id>11657781</id><snippet>__metaclass__ = DeclarativeFieldsMetaclass
</snippet></ROW><ROW><id>11657781</id><snippet>__metaclass__ = ModelBase
</snippet></ROW><ROW><id>11657808</id><snippet>import time
target_time = time.clock() + 0.025
while time.clock() &lt; target_time:
    pass
</snippet></ROW><ROW><id>11657813</id><snippet>D1Vals</snippet></ROW><ROW><id>11657813</id><snippet>S1Vals</snippet></ROW><ROW><id>11657813</id><snippet>x=S1Vals[-7:]</snippet></ROW><ROW><id>11657813</id><snippet>def append_supply( s ):
    S1Vals.append(s)
</snippet></ROW><ROW><id>11657813</id><snippet>def erase_supply():
    '''Clear the list of supply values'''
    global S1Vals
    S1Vals = []
</snippet></ROW><ROW><id>11657813</id><snippet>global S1Vals</snippet></ROW><ROW><id>11657813</id><snippet>S1Vals</snippet></ROW><ROW><id>11657813</id><snippet>SupplyAndDemandModel.py</snippet></ROW><ROW><id>11657813</id><snippet>import SupplyAndDemandModel
</snippet></ROW><ROW><id>11657813</id><snippet>SupplyAndDemandModel.S1Vals = []
</snippet></ROW><ROW><id>11658199</id><snippet>ModelForm</snippet></ROW><ROW><id>11658199</id><snippet>class ProjectAdminForm(forms.ModelForm):
    class Meta:
        model = Project

    userprofiles = forms.ModelMultipleChoiceField(
        queryset=UserProfile.objects.all(),
        required=False,
        widget=FilteredSelectMultiple(
            verbose_name=_('User Profiles'),
            is_stacked=False
        )
    )

    def __init__(self, *args, **kwargs):
        super(ProjectAdminForm, self).__init__(*args, **kwargs)
            if self.instance.pk:
                self.fields['userprofiles'].initial = self.instance.userprofile_set.all()

    def save(self, commit=True):
        project = super(ProjectAdminForm, self).save(commit=False)  
        if commit:
            project.save()

        if project.pk:
            project.userprofile_set = self.cleaned_data['userprofiles']
            self.save_m2m()

        return project

class ProjectAdmin(admin.ModelAdmin):
    form = ProjectAdminForm
    ...
</snippet></ROW><ROW><id>11658199</id><snippet>userprofiles</snippet></ROW><ROW><id>11658199</id><snippet>ModelMultipleChoiceField</snippet></ROW><ROW><id>11658199</id><snippet>filter_horizontal</snippet></ROW><ROW><id>11658199</id><snippet>FilteredSelectMultiple</snippet></ROW><ROW><id>11658199</id><snippet>filter_horizontal</snippet></ROW><ROW><id>11658199</id><snippet>UserProfile</snippet></ROW><ROW><id>11658199</id><snippet>instance</snippet></ROW><ROW><id>11658199</id><snippet>__init__</snippet></ROW><ROW><id>11658199</id><snippet>save</snippet></ROW><ROW><id>11658289</id><snippet>(pos_left, pos_top, pos_right, pos_bottom)
</snippet></ROW><ROW><id>11658289</id><snippet>(pos_left, pos_top, width, height)
</snippet></ROW><ROW><id>11658389</id><snippet>trace</snippet></ROW><ROW><id>11658389</id><snippet># Functions to trace
# ==================

def baz():
    pass

def baz2():
    pass

def bar():
    baz()
    baz2()

def log():
    pass

def foo():
    bar()
    log()

def finish():
    pass

def insertVideoEntry():
    foo()
    finish()

# Names to trace
# ==============

names = list(locals())

# Machinery for tracing
# =====================

import os
import sys

def trace(start, *names):
    def tracefunc(frame, event, arg):
        if event == 'call':
            code = frame.f_code
            name = code.co_name
            if name in names:
                level = -start
                while frame:
                    frame = frame.f_back
                    level += 1
                print('{}{}.{}()'.format(
                    '    ' * level,
                    os.path.splitext(os.path.basename(code.co_filename))[0],
                    name))
                return tracefunc
    sys.settrace(tracefunc)

# Demonstration of tracing
# ========================

trace(2, *names)

insertVideoEntry()
</snippet></ROW><ROW><id>11658389</id><snippet>import os
import sys

def main(discs):
    a, b, c = list(range(discs, 0, -1)), [], []
    line = '-' * len(repr(a))
    print(a, b, c, sep='\n')
    for source, destination in towers_of_hanoi(discs, a, b, c):
        destination.append(source.pop())
        print(line, a, b, c, sep='\n')

def towers_of_hanoi(count, source, via, destination):
    if count &gt; 0:
        count -= 1
        yield from towers_of_hanoi(count, source, destination, via)
        yield source, destination
        yield from towers_of_hanoi(count, via, source, destination)

def trace(start, *names):
    def tracefunc(frame, event, arg):
        if event == 'call':
            code = frame.f_code
            name = code.co_name
            if name in names:
                level = -start
                args = ', '.join(repr(frame.f_locals[name]) for name in
                                 code.co_varnames[:code.co_argcount])
                while frame:
                    frame = frame.f_back
                    level += 1
                print('{}{}.{}({})'.format(
                    ' ' * (level * 4),
                    os.path.splitext(os.path.basename(code.co_filename))[0],
                    name, args))
                return tracefunc
    sys.settrace(tracefunc)

if __name__ == '__main__':
    trace(3, 'main', 'towers_of_hanoi')
    main(3)
</snippet></ROW><ROW><id>11658449</id><snippet>pip-python</snippet></ROW><ROW><id>11658449</id><snippet>pip</snippet></ROW><ROW><id>11658449</id><snippet>pip</snippet></ROW><ROW><id>11658449</id><snippet>pip-python</snippet></ROW><ROW><id>11658449</id><snippet>~/.virtualenvs/NAME/bin/pip</snippet></ROW><ROW><id>11658449</id><snippet>~/.virtualenvs/NAME/bin/pip-python</snippet></ROW><ROW><id>11658454</id><snippet>\d{4}</snippet></ROW><ROW><id>11658454</id><snippet>\d{1,4}</snippet></ROW><ROW><id>11658702</id><snippet>f</snippet></ROW><ROW><id>11658702</id><snippet>&gt;&gt;&gt; f
&lt;function f at 0x023F6DF0&gt;
&gt;&gt;&gt; f.func_closure[0].cell_contents
&lt;function f at 0x023F6E30&gt;
</snippet></ROW><ROW><id>11658702</id><snippet>f</snippet></ROW><ROW><id>11658702</id><snippet>f</snippet></ROW><ROW><id>11658702</id><snippet>f</snippet></ROW><ROW><id>11658702</id><snippet>def f(x):
   """does some math"""
   return x + x * x
original_f = f
f = logged(f)
</snippet></ROW><ROW><id>11658702</id><snippet>f</snippet></ROW><ROW><id>11658702</id><snippet>original_f</snippet></ROW><ROW><id>11658768</id><snippet>pip</snippet></ROW><ROW><id>11658768</id><snippet>sudo</snippet></ROW><ROW><id>11658768</id><snippet>sudo</snippet></ROW><ROW><id>11658768</id><snippet>pip</snippet></ROW><ROW><id>11658768</id><snippet>pip</snippet></ROW><ROW><id>11658768</id><snippet>$ sudo pip freeze
# ... sudo output
$ pip freeze
# ... normal output
</snippet></ROW><ROW><id>11658768</id><snippet>$ python -c 'import pkg_name' &amp;&gt; /dev/null &amp;&amp; echo installed || echo not installed
</snippet></ROW><ROW><id>11658768</id><snippet>pip</snippet></ROW><ROW><id>11658986</id><snippet>import subprocess
command = 'php /path/to/script.php "{1}"'.format(soap_string)
process = subprocess.Popen(command, shell = True, stderr = subprocess.PIPE, stdout = subprocess.PIPE)
process.wait()
output = process.communicate()[0]
(error, result, order_id) = output.split(',')
</snippet></ROW><ROW><id>11658986</id><snippet>#!/usr/bin/php
&lt;?php

$soap_response = $argv[1];

$doc = simplexml_load_string($soap_response);
$doc-&gt;registerXPathNamespace('fdggwsapi', 'http://secure.linkpt.net/fdggwsapi/schemas_us/fdggwsapi');
$nodes = $doc-&gt;xpath('//fdggwsapi:FDGGWSApiOrderResponse/fdggwsapi:ErrorMessage');
$error = strval($nodes[0]);

$nodes = $doc-&gt;xpath('//fdggwsapi:FDGGWSApiOrderResponse/fdggwsapi:TransactionResult');
$result = strval($nodes[0]);

$nodes = $doc-&gt;xpath('//fdggwsapi:FDGGWSApiOrderResponse/fdggwsapi:OrderId');
$order_id = strval($nodes[0]);

$array = array($error, $result, $order_id);
$response = implode(',', $array);

echo $response;
</snippet></ROW><ROW><id>11658986</id><snippet>SOAP</snippet></ROW><ROW><id>11658986</id><snippet>SOAP</snippet></ROW><ROW><id>11659079</id><snippet>[[]]*100</snippet></ROW><ROW><id>11659079</id><snippet>string.letters</snippet></ROW><ROW><id>11659079</id><snippet>timeit.timeit('x=[letters for i in xrange(100)]', setup='from string import letters')</snippet></ROW><ROW><id>11659079</id><snippet>string.letters</snippet></ROW><ROW><id>11659125</id><snippet>url = "http://www.academicjournals.org/ijps/PDF/pdf2011/18mar/G%C3%B3mez-Berb%C3%ADs et al.pdf"
dbquery = "INSERT INTO main_crawl_document SET url=?" 
c.execute(dbquery, (url,)) 
transaction.commit_unless_managed()
</snippet></ROW><ROW><id>11659125</id><snippet>.execute</snippet></ROW><ROW><id>11659172</id><snippet>re.findall</snippet></ROW><ROW><id>11659172</id><snippet>result = re.findall('\s\d+', x)

print result[1]  # 2958
print result[3]  # 3103
</snippet></ROW><ROW><id>11659197</id><snippet>global x</snippet></ROW><ROW><id>11659197</id><snippet>x</snippet></ROW><ROW><id>11659197</id><snippet>print x</snippet></ROW><ROW><id>11659197</id><snippet>&gt;&gt;&gt; def Test2():
...     global x
...     exec 'x=2' in globals()
...     print(str(x))
&gt;&gt;&gt; Test2()
2
</snippet></ROW><ROW><id>11659197</id><snippet>&gt;&gt;&gt; def Test2():
...     global x
...     exec('global x; x=2')
...     print(str(x))
&gt;&gt;&gt; Test2()
2
</snippet></ROW><ROW><id>11659197</id><snippet>exec</snippet></ROW><ROW><id>11659281</id><snippet>Requests</snippet></ROW><ROW><id>11659281</id><snippet>&gt;&gt;&gt; r = requests.post('https://api.github.com/user', auth=('user', 'pass'))
&gt;&gt;&gt; r.status_code
200
&gt;&gt;&gt; r.headers['content-type']
'application/json; charset=utf8'
&gt;&gt;&gt; r.encoding
'utf-8'
&gt;&gt;&gt; r.text
u'{"type":"User"...'
&gt;&gt;&gt; r.json
{u'private_gists': 419, u'total_private_repos': 77, ...}
</snippet></ROW><ROW><id>11659281</id><snippet>urllib2</snippet></ROW><ROW><id>11659281</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import urllib2

gh_url = 'https://api.github.com'

req = urllib2.Request(gh_url)

password_manager = urllib2.HTTPPasswordMgrWithDefaultRealm()
password_manager.add_password(None, gh_url, 'user', 'pass')

auth_manager = urllib2.HTTPBasicAuthHandler(password_manager)
opener = urllib2.build_opener(auth_manager)

urllib2.install_opener(opener)

handler = urllib2.urlopen(req)

print handler.getcode()
print handler.headers.getheader('content-type')
</snippet></ROW><ROW><id>11659281</id><snippet>github</snippet></ROW><ROW><id>11659281</id><snippet>&gt;&gt;&gt; url = '/your/recieving/end'
&gt;&gt;&gt; files = {'report.xls': open('report.xls', 'rb')}

&gt;&gt;&gt; r = requests.post(url, files=files)
&gt;&gt;&gt; r.text # response json
</snippet></ROW><ROW><id>11659333</id><snippet>__call__(self, ...)</snippet></ROW><ROW><id>11659333</id><snippet>class IVCounter(object):
    def __init__(self, start=1L):
        self.value = long(start)
    def __call__(self):
        self.value += 1L
        return somehow_convert_this_to_a_bitstring(self.value)

ctr = IVCounter()
... make some keys and ciphertext ...
print AES.new(key, AES.MODE_CTR, counter=ctr).decrypt(ciphertext)
</snippet></ROW><ROW><id>11659333</id><snippet>import Crypto.Util.Counter
ctr = Crypto.Util.Counter.new(NUM_COUNTER_BITS)
</snippet></ROW><ROW><id>11659333</id><snippet>ctr</snippet></ROW><ROW><id>11659333</id><snippet>print AES.new(key, AES.MODE_CTR, counter=ctr).decrypt(ciphertext)
</snippet></ROW><ROW><id>11659333</id><snippet>import Crypto.Cipher.AES
import Crypto.Util.Counter

key = "0123456789ABCDEF" # replace this with a sensible value, preferably the output of a hash
iv = "0000000000009001" # replace this with a RANDOMLY GENERATED VALUE, and send this with the ciphertext!

plaintext = "Attack at dawn" # replace with your actual plaintext

ctr = Crypto.Util.Counter.new(128, initial_value=long(iv.encode("hex"), 16))

cipher = Crypto.Cipher.AES.new(key, Crypto.Cipher.AES.MODE_CTR, counter=ctr)
print cipher.encrypt(plaintext)
</snippet></ROW><ROW><id>11659346</id><snippet>&gt;&gt;&gt; c = ['(37470-880j)','(35093-791j)','(33920-981j)']
&gt;&gt;&gt; map(complex, c)
[(37470-880j), (35093-791j), (33920-981j)]
</snippet></ROW><ROW><id>11659351</id><snippet>&lt;map idx='398' unit='\u2030' /&gt;
</snippet></ROW><ROW><id>11659351</id><snippet>\u</snippet></ROW><ROW><id>11659351</id><snippet>&lt;map idx='398' unit='‰' /&gt;
</snippet></ROW><ROW><id>11659351</id><snippet>&lt;map idx='398' unit='‰' /&gt;
</snippet></ROW><ROW><id>11659416</id><snippet>calluser</snippet></ROW><ROW><id>11659416</id><snippet>Appli=QtGui.QApplication(sys.argv)
</snippet></ROW><ROW><id>11659438</id><snippet>defaultdict()</snippet></ROW><ROW><id>11659438</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; result = defaultdict(tuple)
&gt;&gt;&gt; for key, value in zip(list1, list2):
...    result[key] += (value,)
...
</snippet></ROW><ROW><id>11659600</id><snippet>import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import numpy


data = numpy.arange(12).reshape(3, 4)

cmap = mcolors.ListedColormap([(0, 0, 1), 
                               (0, 1, 0), 
                               (1, 0, 0)])
</snippet></ROW><ROW><id>11659600</id><snippet>plt.subplot(121)
plt.contourf(data, cmap=cmap, levels=[1, 4, 8, 10])

plt.subplot(122)
plt.contourf(data, cmap=cmap, levels=[1, 4, 8])

plt.show()
</snippet></ROW><ROW><id>11659600</id><snippet>n_colors-1</snippet></ROW><ROW><id>11659600</id><snippet>levs = range(12)
assert len(levs) % 2 == 0, 'N levels must be even.'

cmap = mcolors.LinearSegmentedColormap.from_list(name='red_white_blue', 
                                                 colors =[(0, 0, 1), 
                                                          (1, 1., 1), 
                                                          (1, 0, 0)],
                                                 N=len(levs)-1,
                                                 )
plt.contourf(data, cmap=cmap, levels=levs)
plt.show()
</snippet></ROW><ROW><id>11659600</id><snippet>&gt;&gt;&gt; print cmap(0.5)
(1.0, 1.0, 1.0, 1.0)
</snippet></ROW><ROW><id>11659647</id><snippet>sql="select value from table where name='aaaa'"
cursor.execute(sql)
results=cursor.fetchall() # changed to results to better reflect the list structure
count = len(results)
for i in range(0, count):
  for j in range (i+1, count):
    print results[i][0], results[j][0]
</snippet></ROW><ROW><id>11659759</id><snippet>hb = plt.hexbin(x, y)
print hb.norm.vmin, hb.norm.vmax
</snippet></ROW><ROW><id>11659759</id><snippet>norm = plt.normalize(min_v, max_v)
hb1 = plt.hexbin(x1, y1, norm=norm)
hb2 = plt.hexbin(x2, y2, norm=norm)
</snippet></ROW><ROW><id>11659832</id><snippet>['255', '255', '255', '255', '0']</snippet></ROW><ROW><id>11659832</id><snippet>int</snippet></ROW><ROW><id>11659832</id><snippet>archstartred = [int(value) for value in archstartred]
</snippet></ROW><ROW><id>11659832</id><snippet>[255, 255, 255, 255, 0]
</snippet></ROW><ROW><id>11659969</id><snippet>def read_entirely(file):
    with open(file, 'r') as handle:
        return handle.read()

result = '\n'.join(read_entirely(file) for file in toLoad)
</snippet></ROW><ROW><id>11659969</id><snippet>with open(file, 'w') as handle:
    handle.write(result)
</snippet></ROW><ROW><id>11659987</id><snippet>f.seek(0)
</snippet></ROW><ROW><id>11660103</id><snippet>collections.defaultdict(int)</snippet></ROW><ROW><id>11660103</id><snippet>d</snippet></ROW><ROW><id>11660103</id><snippet>d[x] = d.get(x, 0) + 1
</snippet></ROW><ROW><id>11660103</id><snippet>collections.Counter</snippet></ROW><ROW><id>11660316</id><snippet>self.aliens = []
for i in range(5):
    alien = Alien((i*100)+10, 0)
    self.alien_sprites.add(alien)
    self.aliens.append(alien)
</snippet></ROW><ROW><id>11660316</id><snippet>import random
random_alien = random.choice(self.aliens)
# Now do what you like
</snippet></ROW><ROW><id>11660522</id><snippet>def verts_to_bbox(verts):
    xs = [v[0] for v in verts]
    ys = [v[1] for v in verts]
    zs = [v[2] for v in verts]
    return (min(xs), max(xs), min(ys), max(ys), min(zs), max(zs))
</snippet></ROW><ROW><id>11660522</id><snippet>def bbox_size(bbox):
    # return tuple with sizes (dx, dy, dz)
    return (bbox[1] - bbox[0], bbox[3] - bbox[2], bbox[5] - bbox[4])

def fits_bbox(bigbox, smallbox):
    bdx, bdy, bdz = bbox_size(bigbox)
    sdx, sdy, sdz = bbox_size(smallbox)
    # return True if small box fits in bigbox in all three dimensions
    return (sdx&lt;bdx and sdy&lt;bdy and sdz&lt;bdz)
</snippet></ROW><ROW><id>11660559</id><snippet>sorted</snippet></ROW><ROW><id>11660641</id><snippet>dir = 'C:\Users\Shankar\Documents\Other'
if os.path.exists(dir):
    shutil.rmtree(dir)
os.makedirs(dir)
</snippet></ROW><ROW><id>11660717</id><snippet>Pamplemousse</snippet></ROW><ROW><id>11660717</id><snippet>def if_extractable(fn):
    # this expects to be wrapping a Pamplemousse object
    def wrapped(self, *args):
        print "wrapper(): Calling %s with" % fn, args
        result = None
        with PDFMinerWrapper(self.pdf_doc) as doc:
            if doc.is_extractable:
                result = fn(self, doc, *args)
        return result
    return wrapped


class Pamplemousse(object):

    def __init__(self, inputfile):
        self.pdf_doc = inputfile

    # get_toc will only get called if the wrapper check
    # passes the extractable test
    @if_extractable
    def get_toc(self, doc, *args):
        print "get_toc():", self, doc, args
</snippet></ROW><ROW><id>11660717</id><snippet>if_extractable</snippet></ROW><ROW><id>11660717</id><snippet>get_toc</snippet></ROW><ROW><id>11660717</id><snippet>doc</snippet></ROW><ROW><id>11660717</id><snippet>doc</snippet></ROW><ROW><id>11660717</id><snippet>def if_extractable(fn):
    def wrapped(self, *args):
    if not hasattr(self, 'pdf_doc'):
        raise TypeError('if_extractable() is wrapping '\
                        'a non-Pamplemousse object')
    ...
</snippet></ROW><ROW><id>11660859</id><snippet>csv.reader</snippet></ROW><ROW><id>11660859</id><snippet>csv.writer</snippet></ROW><ROW><id>11660940</id><snippet>python top/manage.py run_gunicorn
</snippet></ROW><ROW><id>11660940</id><snippet>python top/manage.py runserver
</snippet></ROW><ROW><id>11660940</id><snippet>sys.path.insert(1, os.path.dirname(os.path.realpath(__file__)))
</snippet></ROW><ROW><id>11661036</id><snippet>qs = Code.objects.extra(where=['CHAR_LENGTH(code_key) = 10'])
</snippet></ROW><ROW><id>11661141</id><snippet>input</snippet></ROW><ROW><id>11661141</id><snippet>raw_input</snippet></ROW><ROW><id>11661141</id><snippet>input</snippet></ROW><ROW><id>11661141</id><snippet>raw_input</snippet></ROW><ROW><id>11661141</id><snippet>input</snippet></ROW><ROW><id>11661347</id><snippet>{% regroup %}</snippet></ROW><ROW><id>11661347</id><snippet>model.jobview_set.all</snippet></ROW><ROW><id>11661353</id><snippet>remove_none_values</snippet></ROW><ROW><id>11661353</id><snippet>def remove_none_values(d):
    return dict((k,v) for (k,v) in d.iteritems() if not v is None)

kwargs = {
  'database': options.db,
  'hostname': options.hostname,
  ...
}
conn = psycopg2.connect(**remove_none_values(kwargs))
</snippet></ROW><ROW><id>11661353</id><snippet>def ignore_none_valued_kwargs(f):
    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        newkwargs = dict((k,v) for (k,v) in d.iteritems() if not v is None)
        return f(*args, **kwargs)
    return wrapper

my_connect = ignore_none_valued_kwargs(psycopg2)
conn = my_connect(database=options.db, hostname=options.hostname, port=options.port)
</snippet></ROW><ROW><id>11661415</id><snippet>set</snippet></ROW><ROW><id>11661415</id><snippet>Counter</snippet></ROW><ROW><id>11661415</id><snippet>a</snippet></ROW><ROW><id>11661415</id><snippet>master</snippet></ROW><ROW><id>11661415</id><snippet>count_a = Counter(a)
count_master = Counter(master)
count_both = count_a + count_master
dups = Counter({e : min((count_a[e], count_master[e])) for e in count_a if count_both[e] &gt; count_a[e]})
</snippet></ROW><ROW><id>11661415</id><snippet>a</snippet></ROW><ROW><id>11661415</id><snippet>master</snippet></ROW><ROW><id>11661415</id><snippet>a</snippet></ROW><ROW><id>11661415</id><snippet>master</snippet></ROW><ROW><id>11661415</id><snippet>tuple(dups.elements())</snippet></ROW><ROW><id>11661415</id><snippet>&gt;&gt;&gt; a
(2, 2, 2)
&gt;&gt;&gt; master
(1, 2, 2)
&gt;&gt;&gt; dups = Counter({e : min((count_a[e], count_master[e])) for e in count_a if count_both[e] &gt; count_a[e]})
&gt;&gt;&gt; tuple(dups.elements())
(2, 2)
</snippet></ROW><ROW><id>11661466</id><snippet>time.localtime()</snippet></ROW><ROW><id>11661466</id><snippet>time.struct_time</snippet></ROW><ROW><id>11661466</id><snippet>t = time.localtime()
</snippet></ROW><ROW><id>11661466</id><snippet>isDST = t.tm_isdst
</snippet></ROW><ROW><id>11661466</id><snippet>_</snippet></ROW><ROW><id>11661603</id><snippet>output = np.column_stack((arrA.flatten(),arrB.flatten(),arrC.flatten()))
np.savetxt('output.dat',output,delimiter=',')
</snippet></ROW><ROW><id>11661653</id><snippet>config.py</snippet></ROW><ROW><id>11661653</id><snippet>hip_pocket.tasks</snippet></ROW><ROW><id>11661653</id><snippet>from flask import Flask
from hip_pocket.tasks import autoload

app = Flask(__name__)
autoload(app)
</snippet></ROW><ROW><id>11661653</id><snippet>autoload</snippet></ROW><ROW><id>11661653</id><snippet>apps_package</snippet></ROW><ROW><id>11661653</id><snippet>flask.Blueprint</snippet></ROW><ROW><id>11661653</id><snippet>routes</snippet></ROW><ROW><id>11661653</id><snippet>routes</snippet></ROW><ROW><id>11661653</id><snippet>+ you_app
. . . . __init__.py
. . . . app.py
. . . . + apps
        . . . . __init__.py
        . . . . routes.py # contains the declaration `routes = Blueprint(...)`
        . . . . + news
                . . . . __init__.py
                . . . . routes.py     # Ditto
                . . . . some_module.py
        . . . . + files
                . . . . __init__.py
                . . . . routes.py     # Ditto
                . . . . # etc.
</snippet></ROW><ROW><id>11661653</id><snippet> from flask import Flask
 from werkzeug.utils import import_string

 app = Flask(__name__)
 app.config.from_object("your_app.config")

 for tool_path in app.config["BLUEPRINTS"]:
     tool = import_string(tool_path)
     app.register_blueprint(tool)
</snippet></ROW><ROW><id>11661980</id><snippet>&gt;&gt;&gt; sum(xrange(2, 1000, 3))
166500
&gt;&gt;&gt; sum(xrange(4, 996, 5))
99301
</snippet></ROW><ROW><id>11662267</id><snippet>subprocess</snippet></ROW><ROW><id>11662267</id><snippet>setuid</snippet></ROW><ROW><id>11662267</id><snippet>os.setuid</snippet></ROW><ROW><id>11662565</id><snippet>&gt;&gt;&gt; "'0' is {0[0]} {1}".format(a_dict, a_dict['0'])
</snippet></ROW><ROW><id>11662583</id><snippet>&lt;link href=bootstrap.css rel=stylesheet&gt;
&lt;style type=text/css&gt; body { padding-top: 60px; } &lt;/style&gt;
</snippet></ROW><ROW><id>11662583</id><snippet>&lt;script src=https://pubnub.s3.amazonaws.com/pubnub-3.1.min.js&gt;&lt;/script&gt;
&lt;script src=http://code.jquery.com/jquery-1.5.2.min.js&gt;&lt;/script&gt;
&lt;script src=bootstrap-modal.js&gt;&lt;/script&gt;
&lt;script&gt;(function(){

    // PubNub (For Data Push to User)
    var pubnub = PUBNUB.init({
        subscribe_key : 'demo',
        ssl           : false
    });

    // Setup New Data Push Connectoin via PubNub
    pubnub.subscribe({
        restore  : true,
        channel  : 'example-user-id-1234',
        callback : show_notification
    });

    // Setup Alert Window
    $('#new-alert').modal({ keyboard : true });

    // Show the Notification Window
    function show_notification(message) {
        $('#new-alert').modal('show');
    }

    // Simulate Notification
    $('#simulate-notification').bind( 'mousedown', function() {
        pubnub.publish({
            channel : 'example-user-id-1234',
            message : 'alert'
        });
        return false;
    } );

})();&lt;/script&gt;
</snippet></ROW><ROW><id>11662583</id><snippet>python</snippet></ROW><ROW><id>11662583</id><snippet>message post</snippet></ROW><ROW><id>11662583</id><snippet>## PubNub Setup
from Pubnub import Pubnub
pubnub = Pubnub( 'demo', 'demo', None, False )

## Push Notice to 'example-user-id-1234'
info = pubnub.publish({
    'channel' : 'example-user-id-1234',
    'message' : { 'your-data' : 'any-data-here' }
})
print(info)
</snippet></ROW><ROW><id>11663093</id><snippet>__init__.py</snippet></ROW><ROW><id>11663093</id><snippet>__name='__main__'</snippet></ROW><ROW><id>11663113</id><snippet>def __init__(self, parent=None):
    ....
    self.ui.treeView.setModel(self.model)
</snippet></ROW><ROW><id>11663113</id><snippet>self.ui.pushButton_NeuesMoebel.clicked.connect(self.add_item)
</snippet></ROW><ROW><id>11663144</id><snippet>Crypto.Hash.SHA256.SHA256Hash.update()</snippet></ROW><ROW><id>11663144</id><snippet>m.update()</snippet></ROW><ROW><id>11663144</id><snippet>.update()</snippet></ROW><ROW><id>11663144</id><snippet>.hexdigest()</snippet></ROW><ROW><id>11663144</id><snippet>.update()</snippet></ROW><ROW><id>11663144</id><snippet>file.read()</snippet></ROW><ROW><id>11663144</id><snippet>.seek()</snippet></ROW><ROW><id>11663144</id><snippet>.read()</snippet></ROW><ROW><id>11663144</id><snippet>block_size</snippet></ROW><ROW><id>11663144</id><snippet>BLOCK_SIZE</snippet></ROW><ROW><id>11663373</id><snippet>g++ -fPIC -shared -o mymodule.so mymodule.cpp `pkg-config --cflags --libs python` `pkg-config --cflags --libs opencv` -I/usr/local/include/opencv2/legacy
</snippet></ROW><ROW><id>11663654</id><snippet>stock_returns</snippet></ROW><ROW><id>11663654</id><snippet>current_return = [None]*len(current_holdings)</snippet></ROW><ROW><id>11663654</id><snippet>print current_holdings[item], ' - ', current_weight[item], current_return[item]</snippet></ROW><ROW><id>11663654</id><snippet>current_return</snippet></ROW><ROW><id>11663654</id><snippet>current_holdings</snippet></ROW><ROW><id>11663654</id><snippet>current_holdings</snippet></ROW><ROW><id>11663654</id><snippet>x.ticker</snippet></ROW><ROW><id>11663654</id><snippet>location = current_holdings.index(x.ticker)
today_total = today_total + ((current_weight[location]  * 0.01) * x.close)
current_return[location] = ((current_weight[location]  * 0.01) * x.close)
</snippet></ROW><ROW><id>11664009</id><snippet>CHAR_LENGTH(code__code_key)</snippet></ROW><ROW><id>11664009</id><snippet>code_regs = CodeRegistry.objects.filter( \
code__in = Code.objects.extra(where=['CHAR_LENGTH(code_key) = 10']) \
)
</snippet></ROW><ROW><id>11664124</id><snippet>re.findall</snippet></ROW><ROW><id>11664124</id><snippet>re.finditer</snippet></ROW><ROW><id>11664124</id><snippet>.</snippet></ROW><ROW><id>11664124</id><snippet>\.</snippet></ROW><ROW><id>11664331</id><snippet>import requests

def my_django_view(request):
    if request.method == 'POST':
        r = requests.post('https://www.somedomain.com/some/url/save', params=request.POST)
    else:
        r = requests.get('https://www.somedomain.com/some/url/save', params=request.GET)
    if r.status_code == 200:
        return HttpResponse('Yay, it worked')
    return HttpResponse('Could not save data')
</snippet></ROW><ROW><id>11664675</id><snippet>sentinel = '' # ends when this string is seen
for line in iter(raw_input, sentinel):
    pass # do things here
</snippet></ROW><ROW><id>11664675</id><snippet>'\n'.join(iter(raw_input, sentinel))
</snippet></ROW><ROW><id>11664960</id><snippet>import unittest 

@patch('some.type.in.the.module.under.test')
class MySuperTestCase(unittest.TestCase):
    pass

class MyActualTestCase(MySuperTestCase):

    def test_method(self, mock_function)
        mock_function.return_value = False
</snippet></ROW><ROW><id>11665122</id><snippet>else</snippet></ROW><ROW><id>11665122</id><snippet>while .. else</snippet></ROW><ROW><id>11665122</id><snippet>break</snippet></ROW><ROW><id>11665122</id><snippet>while</snippet></ROW><ROW><id>11665122</id><snippet>else</snippet></ROW><ROW><id>11665122</id><snippet>else</snippet></ROW><ROW><id>11665122</id><snippet>while False:
    print 'while'
else:
    print 'else'
</snippet></ROW><ROW><id>11665621</id><snippet>r'\d{2}:\d{2}:\d{2}'
</snippet></ROW><ROW><id>11665621</id><snippet>{n,m}</snippet></ROW><ROW><id>11665621</id><snippet>{n}</snippet></ROW><ROW><id>11665621</id><snippet>\d</snippet></ROW><ROW><id>11665621</id><snippet>[0-9]</snippet></ROW><ROW><id>11665685</id><snippet>@tornado.web.authenticated</snippet></ROW><ROW><id>11665685</id><snippet>class BaseHandler(RequestHandler):
   def get_login_url(self):
        return u"/a_public_area"

    @gen.engine #Not sure about this step
    def get_current_user(self):
        id = self.get_secure_cookie('id', None)
        accesskey = self.get_secure_cookie('accesskey', None)
        if not id or not accesskey:
            return False

        #Are you sure need this? 
        try:
            # convert to bson id format to access mongodb
            bson.objectid.ObjectId(id)
        except:
            # if not valid object id
            return False

        #I believe that you don't need asynchronous mongo on auth query, so if it's not working - replace it with sync call
        found_id, error = yield gen.Task(asyncmong_client_inst.collection.find_one, 
            {'_id': id, 'accesskey': accesskey}, fields={'_id': 1})

        if error['error']:
            raise HTTPError(500)

        if not found_id[0]:
            return False

        return found_id


class MyHandler(BaseHandler):
    @tornado.web.asynchronous
    @tornado.web.authenticated
    @gen.engine
    def get(self):
        # real business code follows
</snippet></ROW><ROW><id>11665685</id><snippet>gen</snippet></ROW><ROW><id>11665879</id><snippet>&lt;li {% if request.endpoint == item.endpoint %} class='active' {% endif %}&gt;
    &lt;a href="{{url_for(endpoint)}}"&gt;{{item.text}}&lt;/a&gt;
&lt;/li&gt; 
</snippet></ROW><ROW><id>11665879</id><snippet>active</snippet></ROW><ROW><id>11665879</id><snippet>{% macro render_sitem(endpoint, display, cls='', icon-cls='', active='') %}
&lt;li {% if request.endpoint == endpoint or active == endpoint %} class='active' {% endif %}&gt;
    &lt;a class='{{cls}}' href="{{url_for(endpoint)}}"&gt;&lt;i class="{{icon-cls}}"&gt;&lt;/i&gt; {{display}}&lt;/a&gt;
&lt;/li&gt;
{% endmacro %}
</snippet></ROW><ROW><id>11665879</id><snippet> &lt;ul class="nav nav-list"&gt;
     {{render_sitem('page.index',  _('Pages'), icon-cls='icon-sitemap', active=active_page)}}
     {{render_sitem('post.index', _('Posts'), icon-cls='icon-file', active=active_page)}}
     {{render_sitem('user.index', _('Users'), icon-cls='icon-group', active=active_page)}}
 &lt;/ul&gt;
</snippet></ROW><ROW><id>11665879</id><snippet>{% set active_page = 'page.index' %} 
</snippet></ROW><ROW><id>11666325</id><snippet>cat</snippet></ROW><ROW><id>11666325</id><snippet>export PYTHONIOENCODING=utf-8
</snippet></ROW><ROW><id>11666373</id><snippet>PyList_New()</snippet></ROW><ROW><id>11666677</id><snippet>--enable-threads</snippet></ROW><ROW><id>11666677</id><snippet>--threads</snippet></ROW><ROW><id>11666677</id><snippet>--lazy</snippet></ROW><ROW><id>11666894</id><snippet>''</snippet></ROW><ROW><id>11666894</id><snippet> ROOT
   +-- NodeCommsConnection
</snippet></ROW><ROW><id>11666894</id><snippet>propagate</snippet></ROW><ROW><id>11666894</id><snippet>False</snippet></ROW><ROW><id>11666894</id><snippet>NodeCommsConnection</snippet></ROW><ROW><id>11666894</id><snippet>propagate</snippet></ROW><ROW><id>11666894</id><snippet>False</snippet></ROW><ROW><id>11666894</id><snippet>logging.getLogger('NodeCommsConnection').propagate = False
</snippet></ROW><ROW><id>11667529</id><snippet>echo $PYTHONPATH</snippet></ROW><ROW><id>11667529</id><snippet>echo %PYTHONPATH%</snippet></ROW><ROW><id>11667688</id><snippet>&lt;input /&gt;</snippet></ROW><ROW><id>11667688</id><snippet>&lt;input type="hidden" /&gt;</snippet></ROW><ROW><id>11667688</id><snippet>&lt;input type="hidden" name="foobar" value="spam and eggs" /&gt;
</snippet></ROW><ROW><id>11667688</id><snippet>foobar</snippet></ROW><ROW><id>11667688</id><snippet>spam and eggs</snippet></ROW><ROW><id>11667807</id><snippet>python27</snippet></ROW><ROW><id>11668089</id><snippet>invalid command name ".35986680.35987112.35991848"</snippet></ROW><ROW><id>11668089</id><snippet>.35986680.35987112.35991848</snippet></ROW><ROW><id>11668089</id><snippet>.35986680.35987112.35991848</snippet></ROW><ROW><id>11668089</id><snippet>self.view.AddWidgets.btn</snippet></ROW><ROW><id>11668089</id><snippet>mainloop</snippet></ROW><ROW><id>11668220</id><snippet>logging.basicConfig(filename="/path/to/your/logfile.log")
</snippet></ROW><ROW><id>11668295</id><snippet>stream -map rgb -storage-type char image.jpg pixels.dat
</snippet></ROW><ROW><id>11668540</id><snippet>text = "Yes: No Maybe: So"
words = [w.rstrip(':') for w in text.split()]
new_dict = dict(zip(words[::2], words[1::2]))
</snippet></ROW><ROW><id>11668804</id><snippet>object</snippet></ROW><ROW><id>11669177</id><snippet>def bcdDigits(chars):
    for char in chars:
        char = ord(char)
        for val in (char &gt;&gt; 4, char &amp; 0xF):
            if val == 0xF:
                return
            yield val
</snippet></ROW><ROW><id>11669177</id><snippet>&gt;&gt;&gt; characters = ('3', '\x00', '\x02', '\x05', '\x15', '\x13', 'G', 'O', '\xff', '\xff', '\xff', '\xff', '\xff', '\xff', '\xff', '\xff')
&gt;&gt;&gt; list(bcdDigits(characters))
[3, 3, 0, 0, 0, 2, 0, 5, 1, 5, 1, 3, 4, 7, 4]
</snippet></ROW><ROW><id>11669177</id><snippet>c</snippet></ROW><ROW><id>11669177</id><snippet>ord</snippet></ROW><ROW><id>11669177</id><snippet>B</snippet></ROW><ROW><id>11669465</id><snippet>a.list_b</snippet></ROW><ROW><id>11669465</id><snippet>C</snippet></ROW><ROW><id>11669465</id><snippet>a.func_name()</snippet></ROW><ROW><id>11669465</id><snippet>threading.Event</snippet></ROW><ROW><id>11669465</id><snippet>A</snippet></ROW><ROW><id>11669465</id><snippet>A.__init__()</snippet></ROW><ROW><id>11669465</id><snippet>self.event = threading.Event()
</snippet></ROW><ROW><id>11669465</id><snippet>A.func_name()</snippet></ROW><ROW><id>11669465</id><snippet>self.event.set()
</snippet></ROW><ROW><id>11669465</id><snippet>C</snippet></ROW><ROW><id>11669465</id><snippet>a.list_b</snippet></ROW><ROW><id>11669465</id><snippet>a.event.wait()
</snippet></ROW><ROW><id>11669465</id><snippet>a.func_name()</snippet></ROW><ROW><id>11669465</id><snippet>B</snippet></ROW><ROW><id>11669614</id><snippet>  final_result = result[-1] + ', ' + ''.join(result[:-1])
</snippet></ROW><ROW><id>11669614</id><snippet>Mr Sravan, Hno 4-50, Plot No 301, Swathi Pooja Homes,Beside Rajadhani Theater, Vikas Nagar,Dilsukhnagar,Hyderabad
</snippet></ROW><ROW><id>11669614</id><snippet>rs = ','.join(result).split(',')
idx = [i for i,j in enumerate(rs) if j.strip().startswith('Mr')][0]
final_result = (rs[idx] +',' + ','.join(rs[1:idx] + rs[idx+1:])).strip()
print final_result
</snippet></ROW><ROW><id>11669614</id><snippet>result = ['Addres_4','Extra info','Mr T. Jamal(Name)','Related info'] 
result = ['Addres_4','Extra info','T. Jamal(Name)','Related info'] 
</snippet></ROW><ROW><id>11669614</id><snippet>rs = ','.join(result).split(',')
idx = [i for i,j in enumerate(rs) if j.strip().startswith('Mr')]

if len(idx) == 1:  # we found "Mr" in the list
    idx = idx[0]
    final_result = (rs[idx] +',' + ','.join(rs[1:idx] + rs[idx+1:])).strip()
else: # We didn't find "Mr" in the list .. adjust output to your needs
    final_result = (','.join(rs).strip())

print final_result
</snippet></ROW><ROW><id>11669614</id><snippet>Mr T. Jamal(Name),Extra info,Related info
Addres_4,Extra info,T. Jamal(Name),Related info
</snippet></ROW><ROW><id>11669985</id><snippet>ActiveAdmin</snippet></ROW><ROW><id>11670273</id><snippet>class C:
    a = 2
    b = a + 2    # b = 4
</snippet></ROW><ROW><id>11670273</id><snippet>class C:
    a = 2
    def foo(self):
        return a    # NameError: name 'a' is not defined, use return self.__class__.a
</snippet></ROW><ROW><id>11670273</id><snippet>[a for a in range(3)]
print a    # prints 2
</snippet></ROW><ROW><id>11670273</id><snippet>[a for a in range(3)]
print(a)    # NameError: name 'a' is not defined
</snippet></ROW><ROW><id>11670273</id><snippet>(a for a in range(3))</snippet></ROW><ROW><id>11670273</id><snippet>class C:
    a = 2
    b = (lambda a=a: [a + i for i in range(3)])()
</snippet></ROW><ROW><id>11670273</id><snippet>eval</snippet></ROW><ROW><id>11670273</id><snippet>eval</snippet></ROW><ROW><id>11670273</id><snippet>eval</snippet></ROW><ROW><id>11670273</id><snippet>eval</snippet></ROW><ROW><id>11670273</id><snippet>def bar(x):
    return list(eval('x') + x for i in range(3))
bar(5)  # returns [10, 10, 10]

def baz(x):
    return list(eval('x') for i in range(3))
baz(5)  # NameError: name 'x' is not defined
</snippet></ROW><ROW><id>11670273</id><snippet>eval</snippet></ROW><ROW><id>11670273</id><snippet>getattr</snippet></ROW><ROW><id>11670456</id><snippet>__repr__</snippet></ROW><ROW><id>11670456</id><snippet>__repr</snippet></ROW><ROW><id>11670456</id><snippet>__repr__</snippet></ROW><ROW><id>11670456</id><snippet>str(self)</snippet></ROW><ROW><id>11670578</id><snippet>c:\python27\python.exe setup.py py2exe
</snippet></ROW><ROW><id>11670678</id><snippet>deflateSetDictionary()</snippet></ROW><ROW><id>11670678</id><snippet>inflateSetDictionary()</snippet></ROW><ROW><id>11670678</id><snippet>inflate()</snippet></ROW><ROW><id>11670678</id><snippet>deflateCopy()</snippet></ROW><ROW><id>11670678</id><snippet>copy()</snippet></ROW><ROW><id>11670678</id><snippet>flush</snippet></ROW><ROW><id>11670678</id><snippet>Z_SYNC_FLUSH</snippet></ROW><ROW><id>11670678</id><snippet>compressobj()</snippet></ROW><ROW><id>11670678</id><snippet>compress()</snippet></ROW><ROW><id>11670678</id><snippet>flush(Z_SYNC_FLUSH)</snippet></ROW><ROW><id>11670678</id><snippet>compress()</snippet></ROW><ROW><id>11670678</id><snippet>flush()</snippet></ROW><ROW><id>11670678</id><snippet>decompressobj()</snippet></ROW><ROW><id>11670678</id><snippet>decompress()</snippet></ROW><ROW><id>11670678</id><snippet>compress()</snippet></ROW><ROW><id>11670678</id><snippet>flush()</snippet></ROW><ROW><id>11670678</id><snippet>decompress()</snippet></ROW><ROW><id>11670940</id><snippet>glGenRenderbuffersEXT</snippet></ROW><ROW><id>11671217</id><snippet>request.query.getall</snippet></ROW><ROW><id>11671301</id><snippet>askopenfilename</snippet></ROW><ROW><id>11671301</id><snippet>OK</snippet></ROW><ROW><id>11671371</id><snippet>os.path.dirname()</snippet></ROW><ROW><id>11671371</id><snippet>temp = os.path.dirname(mptfile.name) + '/mpdata.tmp'
</snippet></ROW><ROW><id>11671371</id><snippet>os.path.dirname()</snippet></ROW><ROW><id>11671389</id><snippet>self.myButton.clicked.connect(lambda : self.someVariable = None)
</snippet></ROW><ROW><id>11671389</id><snippet>self</snippet></ROW><ROW><id>11671389</id><snippet>self.myButton.clicked.connect(lambda self=self: self.someVariable = None)</snippet></ROW><ROW><id>11671389</id><snippet>self.myButton.clicked.connect(lambda checked=False, self=self: self.someVariable = None)</snippet></ROW><ROW><id>11671389</id><snippet>self.myButton.clicked.connect(lambda : setattr(self, 'someVariable', None))
</snippet></ROW><ROW><id>11671489</id><snippet>Charset charset = Charset.forName("ISO-8859-1");
Byte[] bytes: Array[Byte] = cam_data.getBytes(charset)
File f = new File("image.jpeg")
FileImageOutputStream fios = new FileImageOutputStream(f)
BufferedImage  bim = ImageIO.read(new ByteArrayInputStream(bytes))
ImageIO.write(bim,"jpeg",fios)
</snippet></ROW><ROW><id>11671550</id><snippet>upform = UserProfileForm(instance=user.get_profile())
</snippet></ROW><ROW><id>11671550</id><snippet>user_profile</snippet></ROW><ROW><id>11671550</id><snippet>user</snippet></ROW><ROW><id>11671550</id><snippet>user.get_profile()</snippet></ROW><ROW><id>11671550</id><snippet>UserProfile</snippet></ROW><ROW><id>11671550</id><snippet>instance=UserProfile.objects.get(user=user)</snippet></ROW><ROW><id>11672044</id><snippet>(args, opts) = parser.parse_args()
</snippet></ROW><ROW><id>11672044</id><snippet>(opts, args) = parser.parse_args()
</snippet></ROW><ROW><id>11672564</id><snippet>with open(file_name) as f:
    lines = list(f)
# filter lines
with open(file_name, "w") as f:      # This removes the file contents
    f.writelines(lines)
</snippet></ROW><ROW><id>11672564</id><snippet>"r+"</snippet></ROW><ROW><id>11672694</id><snippet>    url = "davs://localhost:80/webdav/davtest.txt"   
    r = ResourceStorer(url)
    result = r.downloadContent().read()
</snippet></ROW><ROW><id>11673058</id><snippet>list1=[var1,var2,var3]

list2 = [file1,file2,file3]

for v in list1:
     //do stuff that returns a string, string.splitlines()
    find_line(string)
</snippet></ROW><ROW><id>11673058</id><snippet>def find_line(string):
    for f in list2:
        for line in string  
           if key in line and f in line:
               print "line"
               return
           else:
              continue
</snippet></ROW><ROW><id>11673271</id><snippet># A sink that just prints the lines
@coroutine
def printer():
    while True:
        line = (yield)
        print line,

sources = [
    open('file1'),
    open('file2'),
    open('file3'),
    open('file4'),
    open('file5'),
    open('file6'),
    open('file7'),
]

output = printer()
while sources:
    for source in sources:
        line = source.next()
        if not line: # EOF
            sources.remove(source)
            source.close()
            continue
        output.send(line)
</snippet></ROW><ROW><id>11673368</id><snippet>json</snippet></ROW><ROW><id>11673650</id><snippet>multiprocessing</snippet></ROW><ROW><id>11673927</id><snippet>__init__(self)</snippet></ROW><ROW><id>11673927</id><snippet>__init__</snippet></ROW><ROW><id>11673927</id><snippet>self</snippet></ROW><ROW><id>11673927</id><snippet>__init__</snippet></ROW><ROW><id>11673927</id><snippet>__init__</snippet></ROW><ROW><id>11673927</id><snippet>__init__</snippet></ROW><ROW><id>11673927</id><snippet>__init__</snippet></ROW><ROW><id>11674227</id><snippet>list.sort()</snippet></ROW><ROW><id>11674227</id><snippet>NoneType</snippet></ROW><ROW><id>11674388</id><snippet>#!</snippet></ROW><ROW><id>11674388</id><snippet>python3</snippet></ROW><ROW><id>11674388</id><snippet>#!/usr/bin/env python3
</snippet></ROW><ROW><id>11674388</id><snippet>python3</snippet></ROW><ROW><id>11674388</id><snippet>PATH</snippet></ROW><ROW><id>11674388</id><snippet>PATH</snippet></ROW><ROW><id>11674578</id><snippet>(cc in chars)</snippet></ROW><ROW><id>11674578</id><snippet>in</snippet></ROW><ROW><id>11674578</id><snippet>cc</snippet></ROW><ROW><id>11674578</id><snippet>chars</snippet></ROW><ROW><id>11674654</id><snippet>kwargs</snippet></ROW><ROW><id>11674654</id><snippet>def foo(*args, **kwargs):
    if 'foo' in args:
        do_this()
    elif 'bar' in args:
        do_that()
    else:
        raise ValueError()
</snippet></ROW><ROW><id>11674654</id><snippet>def foo(param, flag):
    if flag == 'foo':
        do_this()
    elif flag == 'bar':
        do_that()
    else:
        raise ValueError()
</snippet></ROW><ROW><id>11674871</id><snippet>words.txt</snippet></ROW><ROW><id>11674871</id><snippet>each word of this sentence is capitalized
some more words
an other line
</snippet></ROW><ROW><id>11674871</id><snippet>import string


with open('words.txt') as file:
    # List to store the capitalised lines.
    lines = []
    for line in file:
        # Split words by spaces.
        words = line.split(' ')
        for i, word in enumerate(words):
            if len(word.strip(string.punctuation + string.whitespace)) &gt; 3:
                # Capitalise and replace words longer than 3 (without punctuation).
                words[i] = word.capitalize()
        # Join the capitalised words with spaces.
        lines.append(' '.join(words))
    # Join the capitalised lines.
    capitalised = ''.join(lines)

# Optionally, write the capitalised words back to the file.
with open('words.txt', 'w') as file:
    file.write(capitalised)
</snippet></ROW><ROW><id>11674976</id><snippet>split</snippet></ROW><ROW><id>11674976</id><snippet>re</snippet></ROW><ROW><id>11674976</id><snippet>import re
re.split("\D+", "123,456")
</snippet></ROW><ROW><id>11674976</id><snippet>re.split("[ ,]", "123,456")
</snippet></ROW><ROW><id>11674976</id><snippet>re.split("[" + delim + "]", "123,456")
</snippet></ROW><ROW><id>11674992</id><snippet>letter2number_map('A') = 1;  -&gt; equivalent to a dictionary:  {'A':1}    
number2letter_map(1) = 'A';  -&gt; equivalent to a dictionary:  {1:'A'}

str2num() -&gt; maybe float(), although a look at the docs makes 
             it look more like eval -- Yuck. 
             (ast.literal_eval might be closest)
strcmp()  -&gt; I assume a simple string comparison works here.  
             e.g. strcmp(a,b) -&gt; a == b
trace()   -&gt; np.trace()    #sum of the diagonal
eye()     -&gt; np.eye()      #identity matrix (all zeros, but 1's on diagonal)
getenv('STRING')  -&gt; os.environ['STRING'] (with os imported of course)
[MI_true, ~, ~] = function() -&gt; Probably:  MI_true,_,_ = function()  
                                although the underscores could be any  
                                variable name you wanted. 
                                (Thanks Amro for providing this one)
mslice    -&gt; ??? (can't even find documentation for that one)
ones()    -&gt; np.ones()     #matrix/array of all 1's
</snippet></ROW><ROW><id>11675586</id><snippet>print( list(calendar.month_name) )</snippet></ROW><ROW><id>11675586</id><snippet>month_names[1]</snippet></ROW><ROW><id>11675586</id><snippet>January</snippet></ROW><ROW><id>11675586</id><snippet>a = list( calendar.month_names )[1:]
</snippet></ROW><ROW><id>11675586</id><snippet>a = calendar.month_names[1:]
</snippet></ROW><ROW><id>11675671</id><snippet>.deb</snippet></ROW><ROW><id>11675671</id><snippet>.rpm</snippet></ROW><ROW><id>11675671</id><snippet>os.system</snippet></ROW><ROW><id>11675671</id><snippet>subprocess</snippet></ROW><ROW><id>11675671</id><snippet>envoy</snippet></ROW><ROW><id>11675671</id><snippet>pexpect</snippet></ROW><ROW><id>11675738</id><snippet>Object</snippet></ROW><ROW><id>11675738</id><snippet>Object</snippet></ROW><ROW><id>11675738</id><snippet>self.__class__.__name__</snippet></ROW><ROW><id>11675738</id><snippet>class Object(object):
    def __init__(self):
        self.name = self.__class__.__name__

class SimplePhysicObject(Object):
    pass

a = SimplePhysicObject()
print a.name
</snippet></ROW><ROW><id>11675738</id><snippet>SimplePhysicObject
</snippet></ROW><ROW><id>11675738</id><snippet>SimplePhysicObject</snippet></ROW><ROW><id>11675738</id><snippet>name</snippet></ROW><ROW><id>11675738</id><snippet>"SimplePhysicObject"</snippet></ROW><ROW><id>11676013</id><snippet>getName()</snippet></ROW><ROW><id>11676013</id><snippet>&gt;&gt;&gt; for f in tree[0]: print f.getName(), f.asList()
... 
Phrase ['hello', '12', '2']
Random ['?', '1', '2']
Phrase ['word', '4']
Random ['?', '3', '4']
Phrase ['testing', '5']
</snippet></ROW><ROW><id>11676013</id><snippet>setResultsName</snippet></ROW><ROW><id>11676013</id><snippet>listAllMatches</snippet></ROW><ROW><id>11676013</id><snippet>expr("name")</snippet></ROW><ROW><id>11676013</id><snippet>expr.setResultsName("name", listAllMatches=True)</snippet></ROW><ROW><id>11676013</id><snippet>&gt;&gt;&gt; Random = pp.Group(pp.Keyword("?") + pp.OneOrMore(Modifier))("Random*")
&gt;&gt;&gt; Phrase = pp.Group(Token + pp.OneOrMore(Modifier))("Phrase*")
&gt;&gt;&gt; Collection = pp.Group(pp.delimitedList(Phrase ^ Random, ","))("Collection")
&gt;&gt;&gt; tree = Collection.parseString("hello 12 2, ? 1 2, word 4, ? 3 4, testing 5")
&gt;&gt;&gt; print tree.dump()
[[['hello', '12', '2'], ['?', '1', '2'], ['word', '4'], ['?', '3', '4'], ['testing', '5']]]
- Collection: [['hello', '12', '2'], ['?', '1', '2'], ['word', '4'], ['?', '3', '4'], ['testing', '5']]
  - Phrase: [['hello', '12', '2'], ['word', '4'], ['testing', '5']]
  - Random: [['?', '1', '2'], ['?', '3', '4']]
</snippet></ROW><ROW><id>11676152</id><snippet>myuser@myhost $ curl --data @myblogpost.txt https://www.example.com/blog/fromcli/
</snippet></ROW><ROW><id>11676152</id><snippet>@</snippet></ROW><ROW><id>11676235</id><snippet>class Some_Class(object):

    def __init__(self):
        def init_property1(value): self.prop1 = value
        def init_property2(value): self.prop2 = value

        self.func_list = [init_property1, init_property2]

    @property
    def prop1(self):
        return 'hey im the first property'

    @prop1.setter
    def prop1(self, value):
        print value

    @property
    def prop2(self):
        return 'hey im the second property'

    @prop2.setter
    def prop2(self, value):
        print value


class Some_Other_Class(object):

    def __init__(self):

        myvalues = ['1 was set by a nested func','2 was set by a nested func']
        some_class= Some_Class()

        # now I simply set the properties without dealing with them individually
        # this assumes I know how they are ordered (in the list)
        # if necessary, I could use a map

        for idx, func in enumerate(some_class.func_list):
            func(myvalues[idx])

        some_class.prop1 = 'actually i want to change the first property later on'

if __name__ == '__main__':
    test = Some_Other_Class()
</snippet></ROW><ROW><id>11676737</id><snippet>root = etree.fromstring(xmlstr)
</snippet></ROW><ROW><id>11676809</id><snippet>bpy.ops.object.modifier_apply (modifier='EdgeSplit')
</snippet></ROW><ROW><id>11676809</id><snippet>bpy.context.scene.objects.active = my_object
</snippet></ROW><ROW><id>11676809</id><snippet>bpy.ops.object.duplicate()
</snippet></ROW><ROW><id>11676809</id><snippet>bpy.ops.object.select_all(action = 'DESELECT')
object.select = True
</snippet></ROW><ROW><id>11676895</id><snippet>&gt;&gt;&gt; "0x{:02x}".format(13)
'0x0d'

&gt;&gt;&gt; "0x{:02x}".format(131)
'0x83'
</snippet></ROW><ROW><id>11676895</id><snippet>&gt;&gt;&gt; "abcd".encode("hex")
'61626364'
</snippet></ROW><ROW><id>11676895</id><snippet>binascii.hexlify()</snippet></ROW><ROW><id>11676980</id><snippet>//TYPE[NUMBER='7721' and DATA]</snippet></ROW><ROW><id>11676980</id><snippet>from lxml import etree

xmlstr = """&lt;html&gt;
  &lt;A&gt;
    &lt;B&gt;
      &lt;C&gt;
        &lt;D&gt;
          &lt;TYPE&gt;
            &lt;NUMBER&gt;7297&lt;/NUMBER&gt;
            &lt;DATA /&gt;
          &lt;/TYPE&gt;
          &lt;TYPE&gt;
            &lt;NUMBER&gt;7721&lt;/NUMBER&gt;
            &lt;DATA&gt;A=1,B=2,C=3,&lt;/DATA&gt;
          &lt;/TYPE&gt;
        &lt;/D&gt;
      &lt;/C&gt;
    &lt;/B&gt;
  &lt;/A&gt;
&lt;/html&gt;"""

html_element = etree.fromstring(xmlstr)

# find all the TYPE nodes that have NUMBER=7721 and DATA nodes
type_nodes = html_element.xpath("//TYPE[NUMBER='7721' and DATA]")

# the for loop is probably superfluous, but who knows, there might be more than one!
for t in type_nodes:
    d = t.find('DATA')
    # example: append spamandeggs to the end of the data text
    if d.text is None:
        d.text = 'spamandeggs'
    else:
        d.text += 'spamandeggs'
print etree.tostring(html_element)
</snippet></ROW><ROW><id>11676980</id><snippet>&lt;html&gt;
  &lt;A&gt;
    &lt;B&gt;
      &lt;C&gt;
        &lt;D&gt;
          &lt;TYPE&gt;
            &lt;NUMBER&gt;7297&lt;/NUMBER&gt;
            &lt;DATA/&gt;
          &lt;/TYPE&gt;
          &lt;TYPE&gt;
            &lt;NUMBER&gt;7721&lt;/NUMBER&gt;
            &lt;DATA&gt;A=1,B=2,C=3,spamandeggs&lt;/DATA&gt;
          &lt;/TYPE&gt;
        &lt;/D&gt;
      &lt;/C&gt;
    &lt;/B&gt;
  &lt;/A&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>11677065</id><snippet>win = gtk.MyWindow()
win.connect("destroy", gtk.main_quit)  # Note no paretheses after main_quit. 
gobject.timeout_add(1000, win.check_DB)  
win.show_all()
gtk.main()
</snippet></ROW><ROW><id>11677065</id><snippet>gobject.timeout_add</snippet></ROW><ROW><id>11677065</id><snippet>win.check_DB</snippet></ROW><ROW><id>11677065</id><snippet>win.connect("destroy", gtk.main_quit)</snippet></ROW><ROW><id>11677065</id><snippet>main_quit</snippet></ROW><ROW><id>11677065</id><snippet>gtk.main_quit</snippet></ROW><ROW><id>11677065</id><snippet>win.connect</snippet></ROW><ROW><id>11677065</id><snippet>gtk.main_quit()</snippet></ROW><ROW><id>11677065</id><snippet>gtk.main_quit()</snippet></ROW><ROW><id>11677097</id><snippet>f()</snippet></ROW><ROW><id>11677475</id><snippet>from chimpy import chimpy

chimp = chimpy.Connection('MAILCHIMP_APIKEY')
chimp.list_subscribe('your_list_id', self.request.GET['email'], {'FIRST': '', 'LAST': ''}, double_optin=False)
</snippet></ROW><ROW><id>11677491</id><snippet>sess = cherrypy.session
sess['_cp_username'] = None
</snippet></ROW><ROW><id>11677491</id><snippet>cherrypy.session.regenerate()
cherrypy.session['_cp_username'] = cherrypy.request.login
</snippet></ROW><ROW><id>11677882</id><snippet>C = [a - b for a, b in zip(A, B)]
</snippet></ROW><ROW><id>11677882</id><snippet>map()</snippet></ROW><ROW><id>11677882</id><snippet>from operator import sub
C = map(sub, A, B)
</snippet></ROW><ROW><id>11678255</id><snippet>insert</snippet></ROW><ROW><id>11678255</id><snippet>delete</snippet></ROW><ROW><id>11678255</id><snippet>frames</snippet></ROW><ROW><id>11678387</id><snippet>&lt;!-- Alternative suggestions --&gt;
{{ =A(alt_sugg, _href=URL(vars={'suggest':True, 'dataquery':new_query_value}) ) }}
</snippet></ROW><ROW><id>11678387</id><snippet>{{for suggestion in suggestions:}} 
  &lt;ul&gt;&lt;li&gt;
    &lt;a href="resultsDisplay.html" onclick="session.vars={{=suggestion}}&gt;
      {{=suggestion}}
    &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
{{pass}}
</snippet></ROW><ROW><id>11678387</id><snippet>session.vars=</snippet></ROW><ROW><id>11678387</id><snippet>{{=suggestion}}</snippet></ROW><ROW><id>11678387</id><snippet>{{for suggestion in suggestions:}} 
  &lt;ul&gt;&lt;li&gt;
    &lt;a href="resultsDisplay.html?suggest=True&amp;suggestion={{=suggestion}}"&gt;
      {{=suggestion}}
    &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
{{pass}}
</snippet></ROW><ROW><id>11678387</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>11678387</id><snippet>request.vars.suggestion</snippet></ROW><ROW><id>11678387</id><snippet>{{=A(suggestion, _href=URL(vars=dict(suggest=True, suggestion=suggestion))) }}
</snippet></ROW><ROW><id>11678387</id><snippet>&lt;a href="resultsDisplay.html?suggest=True&amp;suggestion={{=suggestion}}"&gt;
      {{=suggestion}}
&lt;/a&gt;
</snippet></ROW><ROW><id>11678387</id><snippet>def resultsDisplay():
  if request.vars.suggest == True:
    session.dataQuery = request.vars.suggestion

  else:
    #This BRANCH of the function uses the value assigned to session.dataQuery to
    #generate a set of results. 
</snippet></ROW><ROW><id>11678388</id><snippet>dtype = 'bool'</snippet></ROW><ROW><id>11678388</id><snippet>arr = np.zeros((dim,dim), dtype = 'bool')
</snippet></ROW><ROW><id>11678388</id><snippet>arr</snippet></ROW><ROW><id>11678388</id><snippet>arr = np.matrix(arr)
</snippet></ROW><ROW><id>11678388</id><snippet>arr[row_num]
</snippet></ROW><ROW><id>11678388</id><snippet>arr[row_num] = new_row
</snippet></ROW><ROW><id>11678406</id><snippet>itertext()</snippet></ROW><ROW><id>11678406</id><snippet>ul</snippet></ROW><ROW><id>11678406</id><snippet>table</snippet></ROW><ROW><id>11678406</id><snippet>from lxml import html

def itertext(root, handlers=dict(ul=lambda el: (list(el.itertext()),
                                                el.tail))):
    if root.text:
        yield root.text
    for el in root:
        yield from handlers.get(el.tag, itertext)(el)
    if root.tail:
        yield root.tail

print(list(itertext(html.fromstring(
                "&lt;b&gt;text0&lt;i&gt;text1&lt;/i&gt;&lt;ul&gt;&lt;li&gt;item1&lt;/li&gt;"
                "&lt;li&gt;item2&lt;/li&gt;&lt;/ul&gt;text2&lt;b/&gt;&lt;b&gt;sib&lt;/b&gt;"))))
</snippet></ROW><ROW><id>11678406</id><snippet>['text0', 'text1', ['item1', 'item2'], 'text2', 'sib']
</snippet></ROW><ROW><id>11678406</id><snippet>yield from X</snippet></ROW><ROW><id>11678406</id><snippet>for x in X: yield x</snippet></ROW><ROW><id>11678406</id><snippet>def joinadj(iterable, join=' '.join):
    adj = []
    for item in iterable:
        if isinstance(item, str):
            adj.append(item) # save for later
        else:
            if adj: # yield items accumulated so far
                yield join(adj)
                del adj[:] # remove yielded items
            yield item # not a string, yield as is

    if adj: # yield the rest
        yield join(adj)

print(list(joinadj(itertext(html.fromstring(
                "&lt;b&gt;text0&lt;i&gt;text1&lt;/i&gt;&lt;ul&gt;&lt;li&gt;item1&lt;/li&gt;"
                "&lt;li&gt;item2&lt;/li&gt;&lt;/ul&gt;text2&lt;b/&gt;&lt;b&gt;sib&lt;/b&gt;")))))
</snippet></ROW><ROW><id>11678406</id><snippet>['text0 text1', ['item1', 'item2'], 'text2 sib']
</snippet></ROW><ROW><id>11678406</id><snippet>&lt;ul&gt;</snippet></ROW><ROW><id>11678406</id><snippet>itertext()</snippet></ROW><ROW><id>11678406</id><snippet>def ul_handler(el):
    yield list(itertext(el, with_tail=False))
    if el.tail:
        yield el.tail

def itertext(root, handlers=dict(ul=ul_handler), with_tail=True):
    if root.text:
        yield root.text
    for el in root:
        yield from handlers.get(el.tag, itertext)(el)
    if with_tail and root.tail:
        yield root.tail

print(list(joinadj(itertext(html.fromstring(
                    "&lt;b&gt;text0&lt;i&gt;text1&lt;/i&gt;&lt;ul&gt;&lt;li&gt;item1&lt;/li&gt;"
                    "&lt;li&gt;item2&lt;ul&gt;&lt;li&gt;sub1&lt;li&gt;sub2&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;"
                    "text2&lt;b/&gt;&lt;b&gt;sib&lt;/b&gt;")))))
</snippet></ROW><ROW><id>11678406</id><snippet>['text0 text1', ['item1', 'item2', ['sub1', 'sub2']], 'text2 sib']
</snippet></ROW><ROW><id>11678625</id><snippet>/href="(.*\.css[^"]*)/g
</snippet></ROW><ROW><id>11678625</id><snippet>import re
matches = re.findall('href="(.*\.css[^"]*)', html)
print(matches)
</snippet></ROW><ROW><id>11678839</id><snippet>my_movie_code_count[0].movie__count</snippet></ROW><ROW><id>11678839</id><snippet>my_movie_code_count = Code.objects.values('movie__title').annotate(num=Count('movie'))
print my_movie_code_count[0].num
1
</snippet></ROW><ROW><id>11678839</id><snippet>movie__title</snippet></ROW><ROW><id>11678839</id><snippet>movie__count</snippet></ROW><ROW><id>11678839</id><snippet>{{ movie.movie__title }}: {{ movie.movie__count }}
</snippet></ROW><ROW><id>11678959</id><snippet>i = 0
while i &lt; len(letters):
    if ....

       letters = letters.replace(letters[i], '')  # probably what you want
       i = 0
    else:
       i += 1
</snippet></ROW><ROW><id>11678959</id><snippet>i</snippet></ROW><ROW><id>11678959</id><snippet>i</snippet></ROW><ROW><id>11678959</id><snippet>i</snippet></ROW><ROW><id>11678959</id><snippet>i = 0</snippet></ROW><ROW><id>11678959</id><snippet>for i in letters</snippet></ROW><ROW><id>11678959</id><snippet>i</snippet></ROW><ROW><id>11678959</id><snippet>i</snippet></ROW><ROW><id>11678959</id><snippet>letters[i]</snippet></ROW><ROW><id>11679118</id><snippet>format_usage()</snippet></ROW><ROW><id>11679118</id><snippet>usage</snippet></ROW><ROW><id>11679118</id><snippet>usage</snippet></ROW><ROW><id>11679118</id><snippet>parser.usage</snippet></ROW><ROW><id>11679118</id><snippet>parser = argparse.ArgumentParser()
# Add arguments...
usage = parser.format_usage()
parser.usage = usage.rstrip() + ' ...\n'
</snippet></ROW><ROW><id>11679133</id><snippet>&lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
</snippet></ROW><ROW><id>11679133</id><snippet>&gt;&gt;&gt; text.decode("windows-1252")
  &lt;/strong&gt;&lt;p&gt;Let's\u2014in"
&gt;&gt;&gt; print text.decode("windows-1252")
  &lt;/strong&gt;&lt;p&gt;Let's—in
</snippet></ROW><ROW><id>11679476</id><snippet>OSError: [Errno 8] Exec format error</snippet></ROW><ROW><id>11679476</id><snippet>subprocess.call()</snippet></ROW><ROW><id>11679476</id><snippet>gmake</snippet></ROW><ROW><id>11679476</id><snippet>shell=True</snippet></ROW><ROW><id>11679476</id><snippet>shell=True</snippet></ROW><ROW><id>11679476</id><snippet>subprocess.call()</snippet></ROW><ROW><id>11679495</id><snippet>text</snippet></ROW><ROW><id>11679495</id><snippet>def must_contain_all(*strings):                                                 
    def must_contain(markup):                                                   
        return markup is not None and all(s in markup for s in strings)         
    return must_contain
</snippet></ROW><ROW><id>11679495</id><snippet>print soup.find_all(text=must_contain_all("world", "puzzle"))
# [u"\nWho in the world am I? Ah, that's the great puzzle.\n"]
</snippet></ROW><ROW><id>11679495</id><snippet>print [text.parent for text in soup.find_all(text=must_contain_all("world", "puzzle"))]
# [&lt;p&gt;Who in the world am I? Ah, that's the great puzzle.&lt;/p&gt;]
</snippet></ROW><ROW><id>11679675</id><snippet>nmap</snippet></ROW><ROW><id>11679675</id><snippet>--exclude</snippet></ROW><ROW><id>11679675</id><snippet>--excludefile</snippet></ROW><ROW><id>11679675</id><snippet>Python 3.2.3 (default, May  3 2012, 15:54:42) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import nmap
&gt;&gt;&gt; nm=nmap.PortScanner()
&gt;&gt;&gt; nm.scan('134.250.16.103','517', '-sU -sT')
{'nmap': {'scanstats': {'uphosts': '0', 'timestr': 'Sat Jul 28 12:54:27 2012', 'downhosts': '1', 'totalhosts': '1', 'elapsed': '3.06'}, 'scaninfo': {'udp': {'services': '517', 'method': 'udp'}, 'tcp': {'services': '517', 'method': 'connect'}}, 'command_line': 'nmap -oX - -p 517 -sU -sT 134.250.16.103'}, 'scan': {'134.250.16.103': {'status': {'state': 'down', 'reason': 'no-response'}, 'hostname': ''}}}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11679675</id><snippet>try:
   nm.scan(content[counter], '517', '-sU -sT')
except:
   #handle exception...
</snippet></ROW><ROW><id>11679749</id><snippet>catnums={}
for key in catnum:
    catnums[key]=0
</snippet></ROW><ROW><id>11679749</id><snippet>zerodict=defaultdict(int)
</snippet></ROW><ROW><id>11679749</id><snippet>int()</snippet></ROW><ROW><id>11679749</id><snippet>0</snippet></ROW><ROW><id>11679968</id><snippet>itertools</snippet></ROW><ROW><id>11679968</id><snippet>combinations</snippet></ROW><ROW><id>11679968</id><snippet>product</snippet></ROW><ROW><id>11679968</id><snippet>import itertools

def mismatch(word, letters, num_mismatches):
    for locs in itertools.combinations(range(len(word)), num_mismatches):
        this_word = [[char] for char in word]
        for loc in locs:
            orig_char = word[loc]
            this_word[loc] = [l for l in letters if l != orig_char]
        for poss in itertools.product(*this_word):
            yield ''.join(poss)
</snippet></ROW><ROW><id>11679968</id><snippet>&gt;&gt;&gt; mismatch("ACG", "ACGTN", 0)
&lt;generator object mismatch at 0x1004bfaa0&gt;
&gt;&gt;&gt; list(mismatch("ACG", "ACGTN", 0))
['ACG']
&gt;&gt;&gt; list(mismatch("ACG", "ACGTN", 1))
['CCG', 'GCG', 'TCG', 'NCG', 'AAG', 'AGG', 'ATG', 'ANG', 'ACA', 'ACC', 'ACT', 'ACN']
</snippet></ROW><ROW><id>11680031</id><snippet>PasswordChangeForm</snippet></ROW><ROW><id>11680031</id><snippet>from django.contrib.auth.forms import PasswordChangeForm
</snippet></ROW><ROW><id>11680031</id><snippet>django.contrib.with.views.password_change</snippet></ROW><ROW><id>11680031</id><snippet>django.contrib.auth.views.password_change_done</snippet></ROW><ROW><id>11680171</id><snippet>with open(...) as fp:
  c = csv.reader(fp)
  while True:
    try:
      title = next(c)[0]
      obj = set()
      store[title] = obj
    except StopIteration:
      break
    for row in itertools.takewhile(bool, c):
      obj.add(tuple(row))
</snippet></ROW><ROW><id>11680512</id><snippet>"-bufsize 4096"</snippet></ROW><ROW><id>11680512</id><snippet>"-bufsize", "4096"</snippet></ROW><ROW><id>11680512</id><snippet>subprocess.call</snippet></ROW><ROW><id>11680512</id><snippet>shell=False</snippet></ROW><ROW><id>11680512</id><snippet>shell=True</snippet></ROW><ROW><id>11680512</id><snippet>"%s" % url</snippet></ROW><ROW><id>11680512</id><snippet>url</snippet></ROW><ROW><id>11680512</id><snippet>str(url)</snippet></ROW><ROW><id>11680521</id><snippet>/* example.c */

float * oldmain() {
    static float output[] = {0.,1.};
    return output;
}
</snippet></ROW><ROW><id>11680521</id><snippet>/* example.i */
%module example
%{
 /* Put header files here or function declarations like below */
  extern float * oldmain();
%}

%typemap(out) float* oldmain {
  int i;
  //$1, $1_dim0, $1_dim1
  $result = PyList_New(2);
  for (i = 0; i &lt; 2; i++) {
    PyObject *o = PyFloat_FromDouble((double) $1[i]);
    PyList_SetItem($result,i,o);
  }
}

%include "example.c"
</snippet></ROW><ROW><id>11680521</id><snippet>&gt;&gt; import example
&gt;&gt; example.oldmain()
[0.0, 1.0]
</snippet></ROW><ROW><id>11680521</id><snippet>-debug-tmsearch</snippet></ROW><ROW><id>11680521</id><snippet>swig -python -debug-tmsearch example.i
</snippet></ROW><ROW><id>11680521</id><snippet>float *oldmain</snippet></ROW><ROW><id>11680521</id><snippet>varout</snippet></ROW><ROW><id>11680521</id><snippet>out</snippet></ROW><ROW><id>11680691</id><snippet>Sequence</snippet></ROW><ROW><id>11680691</id><snippet>Sequence.__map__</snippet></ROW><ROW><id>11680691</id><snippet>def __setattr(self, name, value):
    print('Setting atr', name, 'with val', value)
    try:
        self[Sequence.__map__[name]] = value
    except KeyError:
        object.__setattr__(self, name, value)
</snippet></ROW><ROW><id>11680691</id><snippet>class Foo:
    i = 3
    def __init__(self, overwrite):
        if overwrite:
            self.i = 4

f = Foo(False)
id(f.i) == id(Foo.i)     # Should be True
f = Foo(True)
id(f.i) == id(Foo.i)     # Should be False
</snippet></ROW><ROW><id>11680764</id><snippet>import matplotlib as mpl
mpl.use( "agg" )

from matplotlib import pyplot as plt
import numpy as np

print plt.get_backend()

file_number = 100
for num in np.arange(file_number):
    plt.figure('abc' + str(num),figsize=(22,12),dpi=100)
    #some plots are added to the figure
    print 1
    plt.savefig("%d.png" % num,dpi=100)
    print 2
    plt.close()
    print 3
</snippet></ROW><ROW><id>11680788</id><snippet>f = open("mustang.txt", "r")
count = f.read().count('.')
f.close()
print count
</snippet></ROW><ROW><id>11680788</id><snippet>with open("mustang.txt", "r") as f:
    count = f.read().count('.')
print count
</snippet></ROW><ROW><id>11680868</id><snippet>lc_edges._paths is lc_edges2._paths</snippet></ROW><ROW><id>11680868</id><snippet>import numpy
import matplotlib.delaunay
from matplotlib import pyplot as plt
from matplotlib.collections import LineCollection
import copy

# Unique points
points = numpy.random.randint(0,2000, (1000, 2))
points = numpy.vstack([numpy.array(u) for u in set([tuple(p) for p in points])])

# Delaunay edges
centers, edges, tris, neighb = matplotlib.delaunay.delaunay(points[:,0], points[:,1])

# LineCollection of edges
lc_edges = LineCollection(points[edges])
lc_edges2 = copy.copy(lc_edges)
# 1x2 subplots
fig,(ax) = plt.subplots(1, 2, figsize=(12,16))

ax1 = plt.subplot(211, aspect='equal', xlim=[points[:,0].min()- 100, points[:,0].max() + 100], ylim=[points[:,1].min() - 100, points[:,1].max() + 100])
plt.title("First plot")
plt.gca().add_collection(lc_edges)
plt.scatter(points[:,0], points[:,1])

ax2 = plt.subplot(212, aspect='equal', xlim=[points[:,0].min()- 100, points[:,0].max() + 100], ylim=[points[:,1].min() - 100, points[:,1].max() + 100])
plt.title("Second plot")

plt.gca().add_collection(lc_edges2)
plt.scatter(points[:,0], points[:,1])

plt.show()
</snippet></ROW><ROW><id>11681004</id><snippet>edit_history</snippet></ROW><ROW><id>11681130</id><snippet>writer.writerow([ID] + wordList)
</snippet></ROW><ROW><id>11681130</id><snippet>from itertools import chain

writer.writerow(chain([ID], wordList))
</snippet></ROW><ROW><id>11681299</id><snippet>theGoogleDriveFile = service.files().get(fileId=&lt;googleDriveFileId&gt;).execute()
result = urlfetch.fetch(theGoogleDriveFile['webContentLink'])                
resizedImage = images.resize(result.content, 32, 32)
</snippet></ROW><ROW><id>11681451</id><snippet>db.allocate_id_range(...)</snippet></ROW><ROW><id>11681559</id><snippet>time.time()</snippet></ROW><ROW><id>11681559</id><snippet>time.time()</snippet></ROW><ROW><id>11681559</id><snippet>str(i)</snippet></ROW><ROW><id>11681559</id><snippet>i</snippet></ROW><ROW><id>11681725</id><snippet>from django.contrib.auth import models.User
</snippet></ROW><ROW><id>11682022</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.date.today()
datetime.date(2012, 7, 27)
&gt;&gt;&gt; str(datetime.date.today())
'2012-07-27'
</snippet></ROW><ROW><id>11682022</id><snippet>open("%s(%s).csv"% (spider.name,datetime.now().strftime("%d-%m-%Y:%H-%M-%S"))
</snippet></ROW><ROW><id>11682041</id><snippet>text()</snippet></ROW><ROW><id>11682041</id><snippet>QLineEdit</snippet></ROW><ROW><id>11682041</id><snippet>QLineEdit.text()</snippet></ROW><ROW><id>11682041</id><snippet>QLineEdit.&lt;a href="http://doc.qt-project.org/qlineedit#textEdited" rel="nofollow"&gt;textEdited&lt;/a&gt;</snippet></ROW><ROW><id>11682041</id><snippet>QLineEdit</snippet></ROW><ROW><id>11682041</id><snippet>QLabel</snippet></ROW><ROW><id>11682041</id><snippet>import sys

from PySide.QtCore import *
from PySide.QtGui import *

class MainWindow(QWidget):
    def __init__(self):
        QWidget.__init__(self)

        layout = QVBoxLayout()
        self.setLayout(layout)

        self.line_edit = QLineEdit()
        layout.addWidget(self.line_edit)

        self.label = QLabel()
        layout.addWidget(self.label)

        self.line_edit.textChanged.connect(self.line_edit_text_changed)

        self.show()

    def line_edit_text_changed(self, text):
        self.label.setText(text)

app = QApplication(sys.argv)
mw = MainWindow()
app.exec_()
</snippet></ROW><ROW><id>11682041</id><snippet>QLabel</snippet></ROW><ROW><id>11682041</id><snippet>setText</snippet></ROW><ROW><id>11682041</id><snippet>self.line_edit.textChanged.connect(self.line_edit.setText)</snippet></ROW><ROW><id>11682054</id><snippet>import os
import webbrowser
import time
import socket
import urllib2
import subprocess
import socket

URL = "http://automation.whatismyip.com/n09230945.asp"
DIR = '/Desktop/hma'
HMA = ['./hma-start', '-r']
WAIT_TIME = 60 * 30 # 30 min
GET_IP = lambda: urllib2.urlopen(URL).read()

if __name__ == '__main__':
    external = internal = GET_IP()
    print "Internal IP Address is %s" % internal
    try:
        os.chdir(DIR)
    except OSError:
        print "%s not found" % DIR

    print "External IP Address is ", external
    while True:
        external = GET_IP()
        if external != internal:
            print "Proxied"
            time.sleep(WAIT_TIME)
        else:
            print "Not Proxied"
            proc = subprocess.Popen(HMA)
            proc.wait()
</snippet></ROW><ROW><id>11682073</id><snippet>queue= compresser.flush()#write everything that's left
</snippet></ROW><ROW><id>11682073</id><snippet>queue += compresser.flush()#write everything that's left
</snippet></ROW><ROW><id>11682143</id><snippet>pk</snippet></ROW><ROW><id>11682143</id><snippet>p = get_object_or_404(Poll, post_id=post_pk)
</snippet></ROW><ROW><id>11682674</id><snippet>escapeshellcmd()</snippet></ROW><ROW><id>11682674</id><snippet>$arg1 = escapeshellarg($input1);
$arg2 = "foo";
$arg3 = escapeshellarg($input3);
$arg4 = "bar";
$arg5 = escapeshellarg("a string containing spaces and other *special* characters");
$proc = proc_open("python_prog $arg1 $arg2 $arg3 $arg4 $arg5", ...);
</snippet></ROW><ROW><id>11683014</id><snippet>class MyHandler(tornado.web.RequestHandler):

    @asynchronous
    @gen.engine
    def get(self):
        response = yield gen.Task(self.dosomething, 'argument')
        self.write(response)
        self.finish()

    def dosomething(self, myargument, callback):
        return callback(myargument)
</snippet></ROW><ROW><id>11683394</id><snippet>\x89PNG</snippet></ROW><ROW><id>11683394</id><snippet>&gt;&gt;&gt; s = '\x89PNG'
&gt;&gt;&gt; print s
┴PNG
</snippet></ROW><ROW><id>11683394</id><snippet>&gt;&gt;&gt; hex_string = '\x70f=l\x26hl=en\x26geocode=\x26q\x3c'
&gt;&gt;&gt; ascii_string = reformat_content(hex_string)
&gt;&gt;&gt; hex_string == ascii_string
True
</snippet></ROW><ROW><id>11683394</id><snippet>&gt;&gt;&gt; s.encode('hex')
'89504e47'
&gt;&gt;&gt; '89504e47'.decode('hex')
'\x89PNG'
</snippet></ROW><ROW><id>11683394</id><snippet>'\x70f=l\x26hl=en\x26geocode=\x26q\x3c'</snippet></ROW><ROW><id>11683394</id><snippet>'\'</snippet></ROW><ROW><id>11683394</id><snippet>'x'</snippet></ROW><ROW><id>11683394</id><snippet>&gt;&gt;&gt; s = '\\x70f=l\\x26hl=en\\x26geocode=\\x26q\\x3c'
&gt;&gt;&gt; print s
\x70f=l\x26hl=en\x26geocode=\x26q\x3c
</snippet></ROW><ROW><id>11683394</id><snippet>string_escape</snippet></ROW><ROW><id>11683394</id><snippet>&gt;&gt;&gt; print s.decode('string_escape')
pf=l&amp;hl=en&amp;geocode=&amp;q&lt;
</snippet></ROW><ROW><id>11683427</id><snippet>from django.http import HttpResponsePermanentRedirect
from django.test.client import Client

class MyTestClass(unittest.TestCase):

    def test_my_method(self):

        client = Client()
        response = client.post('/some_url/')

        self.assertEqual(response.status_code, 301)
        self.assertTrue(isinstance(response, HttpResponsePermanentRedirect))
        self.assertEqual(response.META['HTTP_LOCATION'], '/url_we_expect_to_be_redirected_to/')
</snippet></ROW><ROW><id>11683427</id><snippet>print dir(response)
</snippet></ROW><ROW><id>11684016</id><snippet>depends</snippet></ROW><ROW><id>11684016</id><snippet>Extension</snippet></ROW><ROW><id>11684184</id><snippet>In [74]: data = """\
2011.12.08,22:45,1.33434,1.33465,1.33415,1.33419,265
2011.12.08,23:00,1.33419,1.33542,1.33419,1.33472,391
2011.12.08,23:15,1.33470,1.33483,1.33383,1.33411,420
2011.12.08,23:30,1.33413,1.33451,1.33389,1.33400,285
"""

In [75]: pd.read_csv(StringIO(data), 
                     names=['Date', 'Time', 'Open', 'High', 'Low', 'Close', 'Volume'], 
                     index_col='Date_Time', parse_dates=[[0, 1]])
Out[75]: 
                        Open     High      Low    Close  Volume
Date_Time                                                      
2011-12-08 22:45:00  1.33434  1.33465  1.33415  1.33419     265
2011-12-08 23:00:00  1.33419  1.33542  1.33419  1.33472     391
2011-12-08 23:15:00  1.33470  1.33483  1.33383  1.33411     420
2011-12-08 23:30:00  1.33413  1.33451  1.33389  1.33400     285
</snippet></ROW><ROW><id>11684184</id><snippet>index_col=0</snippet></ROW><ROW><id>11684482</id><snippet>return render_to_response('register.html', 'errors':errors)
</snippet></ROW><ROW><id>11684482</id><snippet>return render_to_response('register.html', {'errors': errors}, RequestContext(request))
</snippet></ROW><ROW><id>11684497</id><snippet>matplotlib.pyplot.grid</snippet></ROW><ROW><id>11684497</id><snippet>plt.gca().patch.set_facecolor('0.8')</snippet></ROW><ROW><id>11684497</id><snippet>patch.set_facecolor</snippet></ROW><ROW><id>11684497</id><snippet>import numpy
import matplotlib.pyplot as plt

x = numpy.random.rand(10)
x = numpy.random.rand(10)

plt.plot(x, y, 'o')

plt.grid(True, color='w', linestyle='-', linewidth=2)
plt.gca().patch.set_facecolor('0.8')

plt.show()
</snippet></ROW><ROW><id>11684580</id><snippet>_cache</snippet></ROW><ROW><id>11684580</id><snippet>MyBigFatObjects</snippet></ROW><ROW><id>11684580</id><snippet>del _cache[42]</snippet></ROW><ROW><id>11684664</id><snippet>.group()</snippet></ROW><ROW><id>11684664</id><snippet>MatchObject</snippet></ROW><ROW><id>11684664</id><snippet>()</snippet></ROW><ROW><id>11684664</id><snippet>.group()</snippet></ROW><ROW><id>11684664</id><snippet>MatchObject</snippet></ROW><ROW><id>11684664</id><snippet>re</snippet></ROW><ROW><id>11684664</id><snippet>.search()</snippet></ROW><ROW><id>11684664</id><snippet>.finditer()</snippet></ROW><ROW><id>11684664</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; example = '&lt;a href="somelink here something"&gt;'
&gt;&gt;&gt; regex_pattern=re.compile('href=\"(.*?)\"') 
&gt;&gt;&gt; regex_pattern.search(example)
&lt;_sre.SRE_Match object at 0x1098a2b70&gt;
&gt;&gt;&gt; regex_pattern.search(example).group(1)
'somelink here something'
</snippet></ROW><ROW><id>11684664</id><snippet>(...)</snippet></ROW><ROW><id>11684837</id><snippet>[:]</snippet></ROW><ROW><id>11684837</id><snippet>list()</snippet></ROW><ROW><id>11684837</id><snippet>for r in range(self.height): #
    self.row.append(self.column[:])
</snippet></ROW><ROW><id>11684837</id><snippet>&gt;&gt;&gt; column = [1, 2]
&gt;&gt;&gt; row = []
&gt;&gt;&gt; row.append(column)
&gt;&gt;&gt; row.append(column)
&gt;&gt;&gt; column[0] = 'foobar'
&gt;&gt;&gt; row
[['foobar', 2], ['foobar', 2]]
</snippet></ROW><ROW><id>11684837</id><snippet>&gt;&gt;&gt; row = []
&gt;&gt;&gt; row.append(list(column))
&gt;&gt;&gt; row.append(column[:])
&gt;&gt;&gt; row
[['foobar', 2], ['foobar', 2]]
&gt;&gt;&gt; column[0] = 1
&gt;&gt;&gt; row
[['foobar', 2], ['foobar', 2]]
</snippet></ROW><ROW><id>11684837</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>11684987</id><snippet>return [ int(line) for line in lines if line.strip() ]
</snippet></ROW><ROW><id>11684987</id><snippet>strip</snippet></ROW><ROW><id>11684987</id><snippet>line</snippet></ROW><ROW><id>11684987</id><snippet>int</snippet></ROW><ROW><id>11684987</id><snippet>ValueError</snippet></ROW><ROW><id>11685070</id><snippet>FROM_UNIXTIME</snippet></ROW><ROW><id>11685070</id><snippet>DATE</snippet></ROW><ROW><id>11685070</id><snippet>YYYY-MM-DD</snippet></ROW><ROW><id>11685070</id><snippet>SELECT DATE(FROM_UNIXTIME(timestamp_column)), COUNT(*)
FROM table_name
GROUP BY DATE(FROM_UNIXTIME(timestamp_column))
</snippet></ROW><ROW><id>11685070</id><snippet>2012-07-01  2
2012-07-03  4
…
</snippet></ROW><ROW><id>11685092</id><snippet>aid</snippet></ROW><ROW><id>11685200</id><snippet>def _finish_request(self):
    if self.no_keep_alive:
        disconnect = True
    else:
        connection_header = self._request.headers.get("Connection")
        if connection_header is not None:
            connection_header = connection_header.lower()
        if self._request.supports_http_1_1():
            disconnect = connection_header == "close"
        elif ("Content-Length" in self._request.headers
                or self._request.method in ("HEAD", "GET")):
            disconnect = connection_header != "keep-alive"
        else:
            disconnect = True
    self._request = None
    self._request_finished = False
    if disconnect:
        self.stream.close()
        return
    self.stream.read_until(b("\r\n\r\n"), self._header_callback)
</snippet></ROW><ROW><id>11685200</id><snippet>apr_socket_recv: Connection reset by peer (104)
</snippet></ROW><ROW><id>11685523</id><snippet>&lt;form action="signin.php" method="post" name="log_in" id="log_in" onsubmit="return login()"&gt;
                    &lt;label for="name"&gt;User Name:&lt;/label&gt;&lt;br&gt;
                    &lt;input type="text" maxlength="80" size="25" id="username" name="username" style="border:1px dotted #1a64a3; margin-bottom:10px"&gt;
                    &lt;label for="email"&gt;Password:&lt;/label&gt;&lt;br&gt;
                    &lt;input type="password" maxlength="80" size="25" id="password" name="password" style="border:1px dotted #1a64a3"&gt;
                    &lt;input type="submit" name="submit" value="Login" style="background:url(images/submit.gif) no-repeat; width:59px; height:22px; color:#FFFFFF; padding-bottom:3px"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>11685523</id><snippet>import urllib
login_data=urllib.urlencode({'username':'your username','password':'your password','submit':'Login'}) # replace username and password with filed name 
op = urllib.urlopen('www.exmaple.com/sign-in.php',login_data)
</snippet></ROW><ROW><id>11685634</id><snippet>from pickle import dumps, loads


class NotPickable(object):
    def __init__(self, x):
        self.attr = x

ffile = open('/tmp/filesarenotpickable', 'r+w')    
o = NotPickable(ffile)
dumps(o)
# =&gt;  TypeError: can't pickle file objects

class Pickable(NotPickable):
    attr = open('/tmp/a_file_on_an_other_system', 'r+w')

    def __getstate__(self):
        return self.attr.read()

    def __setstate__(self, state):
        self.attr.write(state)

o = Pickable(ffile)                                            
dumps(o)
# OUT: 'ccopy_reg\n_reconstructor\np0\n(c__main__\nPickable\np1\nc__builtin__\nobject\np2\nNtp3\nRp4\n.'                        

o2 = loads(dumps(o))                                           
o2.attr
# OUT: &lt;open file '/tmp/a_file_on_an_other_system', mode 'r+w' at 0x18ad4b0&gt;
</snippet></ROW><ROW><id>11685853</id><snippet>psycopg2</snippet></ROW><ROW><id>11685993</id><snippet>user</snippet></ROW><ROW><id>11685993</id><snippet>create_connection()</snippet></ROW><ROW><id>11685993</id><snippet>for user in users:
</snippet></ROW><ROW><id>11685993</id><snippet>user</snippet></ROW><ROW><id>11685993</id><snippet>while</snippet></ROW><ROW><id>11685993</id><snippet>for u in users:
</snippet></ROW><ROW><id>11686212</id><snippet>python -tt</snippet></ROW><ROW><id>11686295</id><snippet>import pandas as pd

inp1 = [(1316275620,   1), (1316275680,   2)]
inp2 = [(1316275620,  10), (1316275740,  20)]
inp3 = [(1316275680, 100), (1316275740, 200)]

inps = [('s1', inp1), ('s2', inp2), ('s3', inp3)]

data = {}
for name, inp in inps:
    d = data.setdefault(name, {})
    for timestamp, value in inp:
        d[timestamp] = value
df = pd.DataFrame.from_dict(data)
</snippet></ROW><ROW><id>11686295</id><snippet>df</snippet></ROW><ROW><id>11686295</id><snippet>            s1  s2   s3
1316275620   1  10  NaN
1316275680   2 NaN  100
1316275740 NaN  20  200
</snippet></ROW><ROW><id>11686494</id><snippet>for line in open("filename"):</snippet></ROW><ROW><id>11686494</id><snippet>ResourceWarning</snippet></ROW><ROW><id>11686494</id><snippet>with</snippet></ROW><ROW><id>11686524</id><snippet>PDB.Select</snippet></ROW><ROW><id>11686524</id><snippet>PDBIO()</snippet></ROW><ROW><id>11686524</id><snippet>import os
from Bio import PDB


class ChainSplitter:
    def __init__(self, out_dir=None):
        """ Create parsing and writing objects, specify output directory. """
        self.parser = PDB.PDBParser()
        self.writer = PDB.PDBIO()
        if out_dir is None:
            out_dir = os.path.join(os.getcwd(), "chain_PDBs")
        self.out_dir = out_dir

    def make_pdb(self, pdb_path, chain_letters, overwrite=False, struct=None):
        """ Create a new PDB file containing only the specified chains.

        Returns the path to the created file.

        :param pdb_path: full path to the crystal structure
        :param chain_letters: iterable of chain characters (case insensitive)
        :param overwrite: write over the output file if it exists
        """
        chain_letters = [chain.upper() for chain in chain_letters]

        # Input/output files
        (pdb_dir, pdb_fn) = os.path.split(pdb_path)
        pdb_id = pdb_fn[3:7]
        out_name = "pdb%s_%s.ent" % (pdb_id, "".join(chain_letters))
        out_path = os.path.join(self.out_dir, out_name)
        print "OUT PATH:",out_path
        plural = "s" if (len(chain_letters) &gt; 1) else ""  # for printing

        # Skip PDB generation if the file already exists
        if (not overwrite) and (os.path.isfile(out_path)):
            print("Chain%s %s of '%s' already extracted to '%s'." %
                    (plural, ", ".join(chain_letters), pdb_id, out_name))
            return out_path

        print("Extracting chain%s %s from %s..." % (plural,
                ", ".join(chain_letters), pdb_fn))

        # Get structure, write new file with only given chains
        if struct is None:
            struct = self.parser.get_structure(pdb_id, pdb_path)
        self.writer.set_structure(struct)
        self.writer.save(out_path, select=SelectChains(chain_letters))

        return out_path


class SelectChains(PDB.Select):
    """ Only accept the specified chains when saving. """
    def __init__(self, chain_letters):
        self.chain_letters = chain_letters

    def accept_chain(self, chain):
        return (chain.get_id() in self.chain_letters)


if __name__ == "__main__":
    """ Parses PDB id's desired chains, and creates new PDB structures. """
    import sys
    if not len(sys.argv) == 2:
        print "Usage: $ python %s 'pdb.txt'" % __file__
        sys.exit()

    pdb_textfn = sys.argv[1]

    pdbList = PDB.PDBList()
    splitter = ChainSplitter("/home/steve/chain_pdbs")  # Change me.

    with open(pdb_textfn) as pdb_textfile:
        for line in pdb_textfile:
            pdb_id = line[:4].lower()
            chain = line[4]
            pdb_fn = pdbList.retrieve_pdb_file(pdb_id)
            splitter.make_pdb(pdb_fn, chain)
</snippet></ROW><ROW><id>11686524</id><snippet>wget</snippet></ROW><ROW><id>11686524</id><snippet>Bio.PDBList</snippet></ROW><ROW><id>11686560</id><snippet>from collections import Counter
c = Counter()
A = [(2, 2, 0), (1, 5, 0), (6, 8, 0), (2, 2, 2) ]
for a in A:
    c[a[:2]] += a[2]
B = [list(k) + [v] for k,v in c.iteritems()]
</snippet></ROW><ROW><id>11686560</id><snippet>B</snippet></ROW><ROW><id>11686560</id><snippet>[[1, 5, 0],  [6, 8, 0], [2, 2, 2]]
</snippet></ROW><ROW><id>11686764</id><snippet>def reject_outliers(data, m=2):
    return data[abs(data - np.mean(data)) &lt; m * np.std(data)]
</snippet></ROW><ROW><id>11686930</id><snippet>re.match</snippet></ROW><ROW><id>11686930</id><snippet>re.search</snippet></ROW><ROW><id>11686930</id><snippet>re.findall</snippet></ROW><ROW><id>11686930</id><snippet>re.finditer</snippet></ROW><ROW><id>11687256</id><snippet>$ python -m timeit "int('92184') == 92184"
1000000 loops, best of 3: 0.482 usec per loop
$ python -m timeit "str(92184) == '92184'"
1000000 loops, best of 3: 0.241 usec per loop
</snippet></ROW><ROW><id>11687256</id><snippet>int</snippet></ROW><ROW><id>11687256</id><snippet>int</snippet></ROW><ROW><id>11687256</id><snippet>str</snippet></ROW><ROW><id>11687438</id><snippet>&gt;&gt;&gt; class MyClass(object):
    def __init__(self, x=None):
        if x is not None:
            self.__class__.x = x
    def do_something(self):
        print self.x  # or self.__class__.x, to avoid getting instance property

&gt;&gt;&gt; my_class1 = MyClass('aaa')
&gt;&gt;&gt; my_class2 = MyClass()
&gt;&gt;&gt; my_class2.do_something()
aaa
</snippet></ROW><ROW><id>11687851</id><snippet>Settings</snippet></ROW><ROW><id>11687851</id><snippet>File Types</snippet></ROW><ROW><id>11687851</id><snippet>.py</snippet></ROW><ROW><id>11687853</id><snippet>exec</snippet></ROW><ROW><id>11687853</id><snippet>globals()</snippet></ROW><ROW><id>11688033</id><snippet>__iter__(self)</snippet></ROW><ROW><id>11688033</id><snippet>next(self)</snippet></ROW><ROW><id>11688033</id><snippet>class DerivedO(BaseClass):
    def __init__(self):
        self.new_count = 2
        self.__class__.next = self.__class__.new_next

    def new_next(self):
        if self.new_count:
            self.new_count -= 1
            return None
        else:
            raise StopIteration
</snippet></ROW><ROW><id>11688033</id><snippet>__class__.next</snippet></ROW><ROW><id>11688033</id><snippet>new_next</snippet></ROW><ROW><id>11688234</id><snippet>data/coders_crux/coders_crux.ttf</snippet></ROW><ROW><id>11688234</id><snippet>import os
os.chdir(os.path.dirname(os.path.realpath(__file__)))
</snippet></ROW><ROW><id>11688234</id><snippet>os.path.realpath(\__file__)</snippet></ROW><ROW><id>11688234</id><snippet>os.chdir</snippet></ROW><ROW><id>11688234</id><snippet>os.path.dirname</snippet></ROW><ROW><id>11688730</id><snippet>session = shopify.Session(SHOP_URL)
session.token = PRIVATE_APPLICATION_PASSWORD
shopify.ShopifyResource.activate_session(session)
</snippet></ROW><ROW><id>11688759</id><snippet>os.path.join</snippet></ROW><ROW><id>11688759</id><snippet>web/webagent.py: Change os.path.join('templates') and os.path.join('static') to be absolute
</snippet></ROW><ROW><id>11688881</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import time

PLT_PAGE_NUM = 39 # default is 39
SUB_PLT_NUM = 20 # default is 20
TIME_LENGTH = 1000

xcor_real_arr = np.random.random((SUB_PLT_NUM*PLT_PAGE_NUM,TIME_LENGTH))
xcor_imag_arr = np.random.random((SUB_PLT_NUM*PLT_PAGE_NUM,TIME_LENGTH))
for pp in xrange(0,PLT_PAGE_NUM):

    plt.figure(figsize=(20,12))

    start_time = time.time() 
    for kk in xrange(0,SUB_PLT_NUM):
        plt.subplot(5,4,kk+1)
        plt.plot(np.arange(0,TIME_LENGTH), xcor_real_arr[SUB_PLT_NUM*pp+kk,0:],'r-',
                 range(0,TIME_LENGTH), xcor_imag_arr[SUB_PLT_NUM*pp+kk,0:],'b-')
        plt.title('XCOR of '+ str(SUB_PLT_NUM*pp+kk), color='k') 

    plt.savefig('test_imag_real'+str(pp)+'.png',format='png',dpi=100)
    print 'Fig-'+str(pp)+' has been saved'
    print "Excution time:", time.time()-start_time
</snippet></ROW><ROW><id>11688881</id><snippet>Fig-0 has been saved
Excution time: 3.01798415184
Fig-1 has been saved
Excution time: 3.08960294724
Fig-2 has been saved
Excution time: 2.9629740715
</snippet></ROW><ROW><id>11688881</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import time

PLT_PAGE_NUM = 39 # default is 39
SUB_PLT_NUM = 20 # default is 20
TIME_LENGTH = 1000

xcor_real_arr = np.random.random((SUB_PLT_NUM*PLT_PAGE_NUM,TIME_LENGTH))
xcor_imag_arr = np.random.random((SUB_PLT_NUM*PLT_PAGE_NUM,TIME_LENGTH))
plt.figure(figsize=(20,12))

ax = {}
line1 = {}
line2 = {}

for pp in xrange(0,PLT_PAGE_NUM):
    start_time = time.time() 
    for kk in xrange(0,SUB_PLT_NUM):
        if pp == 0:
            ax[kk] = plt.subplot(5,4,kk+1)
            line1[kk], line2[kk] = ax[kk].plot(np.arange(0,TIME_LENGTH),
                                   xcor_real_arr[SUB_PLT_NUM*pp+kk,0:],'r-',
                                   range(0,TIME_LENGTH),
                                   xcor_imag_arr[SUB_PLT_NUM*pp+kk,0:],'b-')
        else:
            line1[kk].set_ydata(xcor_real_arr[SUB_PLT_NUM*pp+kk,0:])
            line2[kk].set_ydata(xcor_imag_arr[SUB_PLT_NUM*pp+kk,0:])
        plt.title('XCOR of '+ str(SUB_PLT_NUM*pp+kk), color='k') 

    plt.savefig('test_imag_real'+str(pp)+'.png',format='png',dpi=100)
    print 'Fig-'+str(pp)+' has been saved'
    print "Excution time:", time.time()-start_time
</snippet></ROW><ROW><id>11688881</id><snippet>Fig-0 has been saved
Excution time: 3.0408449173
Fig-1 has been saved
Excution time: 2.05084013939
Fig-2 has been saved
Excution time: 2.01951694489
</snippet></ROW><ROW><id>11689231</id><snippet>NewRequest</snippet></ROW><ROW><id>11689231</id><snippet>BeforeRender</snippet></ROW><ROW><id>11689231</id><snippet>NewRequest</snippet></ROW><ROW><id>11689231</id><snippet>request</snippet></ROW><ROW><id>11689231</id><snippet>config.set_request_property</snippet></ROW><ROW><id>11689360</id><snippet>os.walk</snippet></ROW><ROW><id>11689360</id><snippet>os.listdir</snippet></ROW><ROW><id>11689441</id><snippet>import numpy as np
with open(filename) as f:
    for line in f:
        a=np.array(line.split(),dtype=int)
        print(a.std(),a.mean(),np.median(a))  #standard-deviation, mean, median
</snippet></ROW><ROW><id>11689457</id><snippet>mailto:</snippet></ROW><ROW><id>11689457</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;div&gt;
    &lt;a href="mailto:info@info.com?subject=hello"&gt;here&lt;/a&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>11689457</id><snippet>substring-after(/div/a/@href,'mailto:')
</snippet></ROW><ROW><id>11689457</id><snippet>info@info.com?subject=hello</snippet></ROW><ROW><id>11689457</id><snippet>substring-after(//a[starts-with(@href, 'mailto')]/@href,'mailto:')
</snippet></ROW><ROW><id>11689726</id><snippet>row * x</snippet></ROW><ROW><id>11689726</id><snippet>i</snippet></ROW><ROW><id>11689726</id><snippet>X</snippet></ROW><ROW><id>11689726</id><snippet>X.data[X.indptr[i] : X.indptr[i + 1]]
</snippet></ROW><ROW><id>11689726</id><snippet>X.data[X.indptr[i] : X.indptr[i + 1]] *= factor
</snippet></ROW><ROW><id>11689944</id><snippet>isinstance</snippet></ROW><ROW><id>11689944</id><snippet>__getitem__</snippet></ROW><ROW><id>11690070</id><snippet>&gt;&gt;&gt; text = '''The Score
Leon the Professional
Iron Man'''
&gt;&gt;&gt; text.splitlines()
['The Score', 'Leon the Professional', 'Iron Man']
</snippet></ROW><ROW><id>11690298</id><snippet>=</snippet></ROW><ROW><id>11690298</id><snippet>a = 1 #a references the integer object 1
b = a #b and a reference the same object
a = 2 #a now references a new object (2)
print b # prints 1 because you changed what a references, not b
</snippet></ROW><ROW><id>11690298</id><snippet>lists</snippet></ROW><ROW><id>11690298</id><snippet>int</snippet></ROW><ROW><id>11690298</id><snippet>float</snippet></ROW><ROW><id>11690298</id><snippet>tuple</snippet></ROW><ROW><id>11690298</id><snippet>a=[]  #a references a mutable object
b=a   #b references the same mutable object
b.append(1)  #change b a little bit
print a # [1] -- because a and b still reference the same object 
        #        which was changed via b.
</snippet></ROW><ROW><id>11690343</id><snippet>def f():
    return [1, 2, 3], ["a", "b", "c"]

list1, list2 = f()
</snippet></ROW><ROW><id>11690373</id><snippet>zip()</snippet></ROW><ROW><id>11690373</id><snippet>z = zip(x, y)
</snippet></ROW><ROW><id>11690401</id><snippet>name</snippet></ROW><ROW><id>11690401</id><snippet>add_static_view()</snippet></ROW><ROW><id>11690401</id><snippet>name</snippet></ROW><ROW><id>11690401</id><snippet>name</snippet></ROW><ROW><id>11690401</id><snippet>name</snippet></ROW><ROW><id>11690401</id><snippet>pyramid.request.Request.static_url()</snippet></ROW><ROW><id>11690401</id><snippet>add_static_view</snippet></ROW><ROW><id>11690401</id><snippet>name</snippet></ROW><ROW><id>11690401</id><snippet>pyramid.request.Request.static_url()</snippet></ROW><ROW><id>11690401</id><snippet>path</snippet></ROW><ROW><id>11690401</id><snippet>add_static_view</snippet></ROW><ROW><id>11690401</id><snippet>http://&lt;Pyramid app URL&gt;/images/logo.png</snippet></ROW><ROW><id>11690401</id><snippet>logo.png</snippet></ROW><ROW><id>11690401</id><snippet>mypackage</snippet></ROW><ROW><id>11690401</id><snippet>add_static_view</snippet></ROW><ROW><id>11690401</id><snippet>path</snippet></ROW><ROW><id>11690401</id><snippet>.static_url()</snippet></ROW><ROW><id>11690800</id><snippet>AxesSubplot</snippet></ROW><ROW><id>11690800</id><snippet>SubplotBase</snippet></ROW><ROW><id>11690800</id><snippet>axes.py</snippet></ROW><ROW><id>11690800</id><snippet>def subplot_class_factory(axes_class=None):
    # This makes a new class that inherits from SubplotBase and the
    # given axes_class (which is assumed to be a subclass of Axes).
    # This is perhaps a little bit roundabout to make a new class on
    # the fly like this, but it means that a new Subplot class does
    # not have to be created for every type of Axes.
    if axes_class is None:
        axes_class = Axes

    new_class = _subplot_classes.get(axes_class)
    if new_class is None:
        new_class = new.classobj("%sSubplot" % (axes_class.__name__),
                                 (SubplotBase, axes_class),
                                 {'_axes_class': axes_class})
        _subplot_classes[axes_class] = new_class

    return new_class
</snippet></ROW><ROW><id>11690800</id><snippet>SubplotBase</snippet></ROW><ROW><id>11690800</id><snippet>&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; fig = plt.figure()
&gt;&gt;&gt; ax = fig.add_subplot(111)
&gt;&gt;&gt; print type(ax)
&lt;class 'matplotlib.axes.AxesSubplot'&gt;
&gt;&gt;&gt; b = type(ax)
&gt;&gt;&gt; import matplotlib.axes
&gt;&gt;&gt; issubclass(b, matplotlib.axes.SubplotBase)
True
</snippet></ROW><ROW><id>11691114</id><snippet>hxs = HtmlXPathSelector(text=sel.page_source)
</snippet></ROW><ROW><id>11691584</id><snippet>&lt;form method="POST"&gt;
&lt;textarea name="code" /&gt;
&lt;input type="submit"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>11691584</id><snippet>class MyPage:
    def POST(self):
        data = web.input()
        eval(data.code)
</snippet></ROW><ROW><id>11691989</id><snippet>words</snippet></ROW><ROW><id>11691989</id><snippet>for line in data:
    words = string.split(line)
</snippet></ROW><ROW><id>11691989</id><snippet>while</snippet></ROW><ROW><id>11691989</id><snippet>words</snippet></ROW><ROW><id>11691989</id><snippet>random.choice()</snippet></ROW><ROW><id>11691989</id><snippet>import itertools
import random
with open("infile") as infile:
    pairs = set(frozenset(line.split()) for line in infile)
words = list(itertools.chain.from_iterable(pairs))
random.shuffle(words)
with open("outfille", "w") as outfile:
    for pair in itertools.izip(*[iter(words)] * 2):
        if frozenset(pair) not in pairs:
            outfile.write("%s\t%s\n" % pair)
</snippet></ROW><ROW><id>11691989</id><snippet>frozenset</snippet></ROW><ROW><id>11691989</id><snippet>set</snippet></ROW><ROW><id>11691989</id><snippet>random.choice()</snippet></ROW><ROW><id>11691989</id><snippet>itertools.izip(*[iter(words)] * 2)</snippet></ROW><ROW><id>11691989</id><snippet>words</snippet></ROW><ROW><id>11692226</id><snippet>def string_to_dict(string):
    # Split the string on commas
    list_of_entries = string.split(',')
    # Each of these entries needs to be split on '='
    # We'll use a list comprehension
    list_of_split_entries = map(lambda e: e.split('='), list_of_entries)
    # Now we have a list of (key, value) pairs.  We can pass this
    # to the dict() function to get a dictionary out of this, and 
    # that's what we want to return
    return dict(list_of_split_entries)
</snippet></ROW><ROW><id>11692226</id><snippet>csv_dict = string_to_dict(csv_data)
# csv_dict = {'AAK': '1|2|8', 'AAC': '1|1|1'}
xml_dict = string_to_dict(d.text)
# xml_dict = {'ABC': '1|3|5', 'FFK': '33', 'AAC': '7|3|8', 'DAK': '5|1|3'}
</snippet></ROW><ROW><id>11692226</id><snippet>xml_dict.update(csv_dict)
# xml_dict = {'ABC': '1|3|5', 'FFK': '33', 'AAC': '1|1|1', 'AAK': '1|2|8', 'DAK': '5|1|3'}
</snippet></ROW><ROW><id>11692226</id><snippet>xml_dict</snippet></ROW><ROW><id>11692226</id><snippet># Let's get a list of key=value strings
list_of_items = ['%s=%s' % (k, v) for k, v in xml_dict.iteritems()]
# Now join those items together
new_xml_text = ','.join(list_of_items)
d.text = new_xml_text
</snippet></ROW><ROW><id>11692226</id><snippet>d.text = ','.join('%s=%s' % (k, xml_dict[k]) for k in sorted(xml_dict.keys()))
</snippet></ROW><ROW><id>11692290</id><snippet>In [227]: sc = array([[-1., -0.5614], [-0.4352,  1.    ]])

In [228]: ml = array([[-.5897, -0.5278], [-0.2564, 0.94]])

In [229]: sc/ml
Out[229]: 
array([[ 1.69577751,  1.06366048],
       [ 1.69734789,  1.06382979]])
</snippet></ROW><ROW><id>11692553</id><snippet>urllib2</snippet></ROW><ROW><id>11692565</id><snippet>def testf2():
    try:
        db = connectToMysqlDB(None)

        sql_statement = " ".join([
            "select d.* ",
            "from dr_snapshot d ",
            "order by d.PremiseID asc, d.last_read asc; "])

        sel_cur = db.cursor()
        rc = sel_cur.execute(sql_statement)

        loop_ok = True
        while loop_ok:
            meter_row = sel_cur.fetchone()
            if meter_row:
                yield meter_row
            else:
                loop_ok = False
    except ProgrammingError:
        print "Tried to read a cursor after it was already closed"
    finally:
        sel_cur.close()
</snippet></ROW><ROW><id>11692630</id><snippet>sum(item['gold'] for item in myLIst)
</snippet></ROW><ROW><id>11693314</id><snippet>askopenfilename()</snippet></ROW><ROW><id>11693314</id><snippet>tkinter.filedialog</snippet></ROW><ROW><id>11693340</id><snippet>|</snippet></ROW><ROW><id>11693340</id><snippet>pattern_strings = ['\xc2d', '\xa0', '\xe7', '\xc3\ufffdd', '\xc2\xa0', '\xc3\xa7', '\xa0\xa0', '\xc2', '\xe9']
pattern_string = '|'.join(pattern_strings)
pattern = re.compile(pattern_string)
</snippet></ROW><ROW><id>11693539</id><snippet>r"\xa0"</snippet></ROW><ROW><id>11693539</id><snippet>"\\xa0"</snippet></ROW><ROW><id>11693539</id><snippet> ['\\xc2d', '\\xa0', '\\xe7', '\\xc3\\ufffdd', '\\xc2\\xa0', '\\xc3\\xa7', '\\xa0\\xa0', '\\xc2', '\\xe9']
</snippet></ROW><ROW><id>11693672</id><snippet>someString = '{0:&lt;16}{1}'.format(someList[someIndex], someList[someOtherIndex])
</snippet></ROW><ROW><id>11693803</id><snippet>ModelAdmin</snippet></ROW><ROW><id>11693803</id><snippet>list_display('get_related_field')
...
def get_related_field(self, obj):
    return obj.related_object.some_field
get_related_field.short_description = 'Some Field' # Column header
get_related_field.admin_order_field = 'related_object__some_field'
</snippet></ROW><ROW><id>11693803</id><snippet>list_select_related = True
</snippet></ROW><ROW><id>11693803</id><snippet> def get_clientes(self, obj):
    clientes = [m.cliente for m in obj.movimentotelefoneip_set.all()]
    return u', '.join(clientes)
 get_clientes.short_description = 'Clientes'
</snippet></ROW><ROW><id>11693889</id><snippet>line = 'Found mode 1 of 12: EV= 1.5185449E+04, f= 19.612545, T= 0.050988.'

splitByComma=line.split(',')

fValue = splitByComma[1].replace('f= ', '').strip()
print(fValue)
</snippet></ROW><ROW><id>11693889</id><snippet>19.612545</snippet></ROW><ROW><id>11693889</id><snippet>f</snippet></ROW><ROW><id>11693937</id><snippet>remove_punctuation_map = dict((ord(char), None) for char in string.punctuation)
word_list = [s.translate(remove_punctuation_map) for s in value_list]
</snippet></ROW><ROW><id>11693937</id><snippet>string.punctuation</snippet></ROW><ROW><id>11693973</id><snippet>fact(5):
   5 is not 0, so fact(5) = 5 * fact(4)
   what is fact(4)?
fact(4):
   4 is not 0, so fact(4) = 4 * fact(3)
   what is fact(3)?
fact(3):
   3 is not 0, so fact(3) = 3 * fact(2)
   what is fact(2)?
fact(2):
   2 is not 0, so fact(2) = 2 * fact(1)
   what is fact(1)?
fact(1):
   1 is not 0, so fact(1) = 1 * fact(0)
   what is fact(0)?
fact(0):
   0 IS 0, so fact(0) is 1
</snippet></ROW><ROW><id>11693973</id><snippet>fact(5) = 5* fact(4)
</snippet></ROW><ROW><id>11693973</id><snippet>fact(5) = 5 * 4 * fact(3)
</snippet></ROW><ROW><id>11693973</id><snippet>fact(5) = 5 * 4 * 3 * fact(2)
</snippet></ROW><ROW><id>11693973</id><snippet>fact(5) = 5 * 4 * 3 * 2 * fact(1)
</snippet></ROW><ROW><id>11693973</id><snippet>fact(5) = 5 * 4 * 3 * 2 * 1 * fact(0)
</snippet></ROW><ROW><id>11693973</id><snippet>fact(5) = 5 * 4 * 3 * 2 * 1 * 1 = 120
</snippet></ROW><ROW><id>11694102</id><snippet>rhc app create -a APPNAME -t python-2.6
cd APPNAME
vim setup.py
</snippet></ROW><ROW><id>11694102</id><snippet>git commit -a -m "Initialization"
git push
</snippet></ROW><ROW><id>11694102</id><snippet>cd wsgi
django-admin.py startproject PROJECTNAME
</snippet></ROW><ROW><id>11694102</id><snippet>#!/usr/bin/python
import os, sys

os.environ['DJANGO_SETTINGS_MODULE'] = 'PROJECTNAME.settings'
sys.path.append(os.path.join(os.environ['OPENSHIFT_REPO_DIR'], 'wsgi',
    'PROJECTNAME'))

virtenv = os.environ['APPDIR'] + '/virtenv/'
os.environ['PYTHON_EGG_CACHE'] = os.path.join(virtenv, 'lib/python2.6/site-packages')
virtualenv = os.path.join(virtenv, 'bin/activate_this.py')

try:
    execfile(virtualenv, dict(__file__=virtualenv))
except IOError:
    pass

#
# IMPORTANT: Put any additional includes below this line.  If placed above this
# line, it's possible required libraries won't be in your searchable path
# 
from django.core.handlers import wsgi
application = wsgi.WSGIHandler()
</snippet></ROW><ROW><id>11694102</id><snippet>cd ..
git add .
git commit -a -m "Project Creation"
git push
</snippet></ROW><ROW><id>11694120</id><snippet>with open('8.txt') as f:
    numstring = f.read().replace('\n', '')

nums = [int(x) for x in numstring]

def sub_lists(lst, length):
    for i in range(len(lst) - (length - 1)):
        yield lst[i:i+length]

def prod(lst):
    p = 1
    for x in lst:
        p *= x
    return p

best = max(prod(lst) for lst in sub_lists(nums, 5))
print(best)
</snippet></ROW><ROW><id>11694120</id><snippet>reduce</snippet></ROW><ROW><id>11694120</id><snippet>prod()</snippet></ROW><ROW><id>11694120</id><snippet># from functools import reduce   # uncomment this line for Python 3.x
from operator import mul
def prod(lst):
    return reduce(mul, lst, 1)
</snippet></ROW><ROW><id>11694120</id><snippet>with</snippet></ROW><ROW><id>11694120</id><snippet>with</snippet></ROW><ROW><id>11694120</id><snippet>nums = [int(c) for c in open('8.txt').read() if c.isdigit()]
</snippet></ROW><ROW><id>11694120</id><snippet>with open("8.txt") as f:
    nums = [int(ch) for ch in f.read() if ch.isdigit()]
</snippet></ROW><ROW><id>11694120</id><snippet>with</snippet></ROW><ROW><id>11694355</id><snippet>with open('data.txt') as inf:
    for line in inf:
        num = line.strip()
        if num:
            fn = '%s.txt' %num
            with open(fn, 'w') as outf:
                outf.write('contains one line of text "%s"\n' %num)
</snippet></ROW><ROW><id>11694355</id><snippet>with</snippet></ROW><ROW><id>11694482</id><snippet>import pylab as PL
from scipy import integrate
from scipy import optimize
from scipy.integrate import odeint

import numpy as np
cimport numpy as np
cimport cython
</snippet></ROW><ROW><id>11694482</id><snippet>cimport cython</snippet></ROW><ROW><id>11694482</id><snippet>dvi.c:237:31: error: numpy/arrayobject.h: No such file or directory
dvi.c:238:31: error: numpy/ufuncobject.h: No such file or directory
</snippet></ROW><ROW><id>11694482</id><snippet>import numpy 
...
Extension(..., include_dirs = [numpy.get_include(), ... ] )
</snippet></ROW><ROW><id>11694588</id><snippet>class LogFile(object):
    def __init__(self,filepath):
        with open(filepath, "r") as f:
            self.lst = [LogLine(line) for line in f]
</snippet></ROW><ROW><id>11694588</id><snippet>self.lst</snippet></ROW><ROW><id>11694588</id><snippet>LogLine(line)</snippet></ROW><ROW><id>11694588</id><snippet>LogLine</snippet></ROW><ROW><id>11694588</id><snippet>self.lst.sort(key=LogLine.get_line)
</snippet></ROW><ROW><id>11694588</id><snippet>.get_line()</snippet></ROW><ROW><id>11694588</id><snippet>class LogFile(object):
    def __init__(self,filepath):
        self.logfile = open(filepath, "r")

    def get_line(self):
        try:
            line = next(self.logfile)  # get next line from open file object
            return LogLine(line)
        except StopIteration:  # next() raises this when you reach the end of the file
            return None  # return 

    def close(self):
        self.logfile.close()
</snippet></ROW><ROW><id>11694588</id><snippet>open()</snippet></ROW><ROW><id>11694588</id><snippet>next()</snippet></ROW><ROW><id>11694588</id><snippet>StopIteration</snippet></ROW><ROW><id>11694588</id><snippet>StopIteration</snippet></ROW><ROW><id>11694588</id><snippet>None</snippet></ROW><ROW><id>11694588</id><snippet>for</snippet></ROW><ROW><id>11694588</id><snippet>class LogFile(object):
    def __init__(self,filepath):
        self.f = open(filepath)

    def __next__(self):  # Python 3.x needs this to be named "__next__"
        try:
            line = next(self.f)
            return LogLine(line)
        except StopIteration:
            # when we reach the end of input, close the file object
            self.f.close()
            # re-raise the exception
            raise
    next = __next__  # Python 2.x needs this to be named "next"
</snippet></ROW><ROW><id>11694588</id><snippet>for</snippet></ROW><ROW><id>11694588</id><snippet>.__next__()</snippet></ROW><ROW><id>11694588</id><snippet>.next()</snippet></ROW><ROW><id>11694588</id><snippet>StopIteration</snippet></ROW><ROW><id>11694588</id><snippet>for ll in LogFile("some_log_file"):
    ... # do something with ll, which will always be a LogLine instance
</snippet></ROW><ROW><id>11694716</id><snippet>re</snippet></ROW><ROW><id>11694716</id><snippet>join_pattern =  '[' + '|'.join(pattern_strings) + ']'</snippet></ROW><ROW><id>11694716</id><snippet>{ \ x c 2 d a 0 e 7 3 u f 9 | }</snippet></ROW><ROW><id>11694716</id><snippet>join_pattern = '|'.join(pattern_strings)
</snippet></ROW><ROW><id>11694746</id><snippet>patch</snippet></ROW><ROW><id>11694746</id><snippet>type</snippet></ROW><ROW><id>11694746</id><snippet>patch</snippet></ROW><ROW><id>11694838</id><snippet>print</snippet></ROW><ROW><id>11695059</id><snippet>self</snippet></ROW><ROW><id>11695059</id><snippet>class FoF(object):
    def __init__(self,path):
        self.filepath=[]
        self.filepath.append(self.FileOrFolder(path))
</snippet></ROW><ROW><id>11695059</id><snippet>class FoF(object):
    filepath=[]
    def __init__(self,path):
        self.filepath.append(self.FileOrFolder(path))
</snippet></ROW><ROW><id>11695129</id><snippet>\</snippet></ROW><ROW><id>11695129</id><snippet>\x</snippet></ROW><ROW><id>11695129</id><snippet>'\xc2'</snippet></ROW><ROW><id>11695247</id><snippet>url: /_ah/mail/owner@.*your_app_id\.appspotmail\.com 
  script: handle_owner.py 
  login: admin
- url: /_ah/mail/support@.*your_app_id\.appspotmail\.com 
  script: handle_support.py 
  login: admin
</snippet></ROW><ROW><id>11695247</id><snippet>/mail/</snippet></ROW><ROW><id>11695247</id><snippet>/_ah/jogo@rpg2e.appspotmail.com</snippet></ROW><ROW><id>11695247</id><snippet>/_ah/mail/jogo@rpg2e.appspotmail.com</snippet></ROW><ROW><id>11695247</id><snippet>- url: /_ah/mail/jogo@rpg2e\.appspotmail\.com
  script: jogo.py

- url: /_ah/mail/contato@rpg2e\.appspotmail\.com
  script: contato.py
</snippet></ROW><ROW><id>11695247</id><snippet>INFO   2012-07-27 20:05:31,759 dev_appserver.py:2952] "POST /_ah/mail/jogo@rpg2e.appspotmail.com HTTP/1.1" 404 
</snippet></ROW><ROW><id>11695276</id><snippet>__init__</snippet></ROW><ROW><id>11695276</id><snippet>__new__</snippet></ROW><ROW><id>11695276</id><snippet>__new__</snippet></ROW><ROW><id>11695276</id><snippet>__init__</snippet></ROW><ROW><id>11695276</id><snippet>__init__</snippet></ROW><ROW><id>11695276</id><snippet>return(self)</snippet></ROW><ROW><id>11695276</id><snippet>__init__</snippet></ROW><ROW><id>11695276</id><snippet>None</snippet></ROW><ROW><id>11695276</id><snippet>TypeError</snippet></ROW><ROW><id>11695296</id><snippet>while</snippet></ROW><ROW><id>11695296</id><snippet>/images/adapt-icon-search.png?1342791397</snippet></ROW><ROW><id>11695296</id><snippet>http://dribble.com/</snippet></ROW><ROW><id>11695296</id><snippet>/</snippet></ROW><ROW><id>11695296</id><snippet>http://dribble.com/foo/bar.html</snippet></ROW><ROW><id>11695296</id><snippet>http://dribble.com/foo/</snippet></ROW><ROW><id>11695548</id><snippet>__init__.pyc</snippet></ROW><ROW><id>11695598</id><snippet>varout</snippet></ROW><ROW><id>11695598</id><snippet>ANY</snippet></ROW><ROW><id>11695598</id><snippet>int foo[]</snippet></ROW><ROW><id>11695598</id><snippet>%typemap(varout) int foo[ANY] {
  int i;
  //$1, $1_dim0, $1_dim1
  $result = PyList_New($1_dim0);
  for (i = 0; i &lt; $1_dim0; i++) {
    PyObject *o = PyInt_FromLong((double) $1[i]);
    PyList_SetItem($result,i,o);
  }
}
</snippet></ROW><ROW><id>11695598</id><snippet>int *foo</snippet></ROW><ROW><id>11695598</id><snippet>foo</snippet></ROW><ROW><id>11695598</id><snippet>int foo[2] = {0, 1};
</snippet></ROW><ROW><id>11695598</id><snippet>varout</snippet></ROW><ROW><id>11695598</id><snippet>SWIGINTERN PyObject *Swig_var_foo_get(void) {
  PyObject *pyobj = 0;

  {
    int i;
    //foo, 2, foo_dim1
    pyobj = PyList_New(2);
    for (i = 0; i &lt; 2; i++) {
      PyObject *o = PyInt_FromLong((double) foo[i]);
      PyList_SetItem(pyobj,i,o);
    }
  }
  return pyobj;
}
</snippet></ROW><ROW><id>11695775</id><snippet>assertRaises</snippet></ROW><ROW><id>11695775</id><snippet>with</snippet></ROW><ROW><id>11695775</id><snippet>with unittest.assertRaises(IntegrityError):
    sess.add(obj)
</snippet></ROW><ROW><id>11695777</id><snippet>&gt;&gt;&gt; def pickBest(coins,due):
...     if due == 0: return []
...     for c in coins:
...        if c&lt;= due: return [c] + pickBest(coins,due-c)
...
&gt;&gt;&gt; coins = [1,5,10,25]
&gt;&gt;&gt; coins = sorted(coins,reverse=True)
&gt;&gt;&gt; coins
[25, 10, 5, 1]
&gt;&gt;&gt; print pickBest(coins,88)
[25, 25, 25, 10, 1, 1, 1]
</snippet></ROW><ROW><id>11695777</id><snippet>100 = 99 + 1
100 = 98 + 2  (2 = 1 + 1)
100 = 98 + (1 + 1)
100 = 97 + 3 (3 = 1 + 2)
100 = 97 + 2+1 (recall 2 = 1+1)
100 = 97 + 1+1 + 1
...
</snippet></ROW><ROW><id>11696080</id><snippet>&gt;&gt;&gt; myDict = {'x' : 1, 'y' : 2}
&gt;&gt;&gt; myList = [1,2,3]
&gt;&gt;&gt; post = {'uname' : 'jon', 'node' : myDict, 'access-levels' : myList}
&gt;&gt;&gt; json.dumps(post)
'{"node": {"y": 2, "x": 1}, "uname": "jon", "access-levels": [1, 2, 3]}'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11696095</id><snippet>[ "%s %s" % x for x in l ]
</snippet></ROW><ROW><id>11696096</id><snippet>//img/@src
</snippet></ROW><ROW><id>11696096</id><snippet>src</snippet></ROW><ROW><id>11696096</id><snippet>img</snippet></ROW><ROW><id>11696133</id><snippet>%c3%a9</snippet></ROW><ROW><id>11696133</id><snippet>%e9</snippet></ROW><ROW><id>11696133</id><snippet>é</snippet></ROW><ROW><id>11696133</id><snippet>0xc3a9</snippet></ROW><ROW><id>11696133</id><snippet>%C3%A9</snippet></ROW><ROW><id>11696133</id><snippet>[\w|\W]+</snippet></ROW><ROW><id>11696133</id><snippet>%C3%A9</snippet></ROW><ROW><id>11696152</id><snippet>"SELECT fileid FROM files WHERE description LIKE '%%%s%%' OR filename LIKE '%%%s%%' OR uploader LIKE '%%%s%%' ORDER BY fileid DESC" % (search, search, search)</snippet></ROW><ROW><id>11696179</id><snippet>log = logging.Logger('base')
</snippet></ROW><ROW><id>11696179</id><snippet>log = logging.getLogger('base')
</snippet></ROW><ROW><id>11696179</id><snippet>import logging

log = logging.getLogger('base')
log.addHandler(logging.StreamHandler())
log.critical('Hi')
log2 = log.getChild('ment')
log2.critical('hi')
</snippet></ROW><ROW><id>11696179</id><snippet>Hi
hi
</snippet></ROW><ROW><id>11696649</id><snippet> log.debug ("%s %s " % (hostname , processoutput[0]))
</snippet></ROW><ROW><id>11696687</id><snippet>clean_&lt;field_name</snippet></ROW><ROW><id>11696687</id><snippet>ValidationError</snippet></ROW><ROW><id>11696687</id><snippet>def clean_account_type(self):
    account_type = self.cleaned_data["account_type"]
    if account_type == "select":
        raise forms.ValidationError("Select account type.")
    return account_type
</snippet></ROW><ROW><id>11696758</id><snippet>build</snippet></ROW><ROW><id>11696758</id><snippet>cmake -G "Unix Makefiles" ..
make -j8
sudo make install
</snippet></ROW><ROW><id>11696887</id><snippet>for p in self.parameters:
    print p
    ...
    self.parameters.append(...) # No.
</snippet></ROW><ROW><id>11696887</id><snippet>for p in list(self.parameters):
    print p
    ...
    self.parameters.append(...) # Okay
</snippet></ROW><ROW><id>11697002</id><snippet>tornado.escape.json_encode</snippet></ROW><ROW><id>11697002</id><snippet>json</snippet></ROW><ROW><id>11697002</id><snippet>simplejson</snippet></ROW><ROW><id>11697002</id><snippet>from tornado.escape import json_encode
obj = { 
    'foo': 'bar',
     '1': 2,
     'false': True 
    }
self.write(json_encode(obj))
</snippet></ROW><ROW><id>11697002</id><snippet>{"1": 2, "foo": "bar", "false": true}
</snippet></ROW><ROW><id>11697055</id><snippet>thisLine.replace</snippet></ROW><ROW><id>11697055</id><snippet>"genRANDOM"</snippet></ROW><ROW><id>11697055</id><snippet>genRandom</snippet></ROW><ROW><id>11697055</id><snippet>str(genRandom)</snippet></ROW><ROW><id>11697055</id><snippet>"4"</snippet></ROW><ROW><id>11697055</id><snippet>4</snippet></ROW><ROW><id>11697055</id><snippet>genRandom</snippet></ROW><ROW><id>11697123</id><snippet>twistd</snippet></ROW><ROW><id>11697191</id><snippet>class WSHandler(tornado.websocket.WebSocketHandler):
    clients = []

    def open(self):
        self.clients.append(self)
        print 'new connection'
        self.write_message("Hello World")

    def on_message(self, message):
        print 'message received %s' % message

    def on_close(self):
        self.clients.remove(self)
        print 'closed connection'
</snippet></ROW><ROW><id>11697230</id><snippet>def sub_lists_at_xy(array, length, x, y):
    directions = [(1, 0), (0, 1), (1, 1), (-1, 1)]
    sublists = []
    for dx, dy in directions:
        try:
            seq = [array[y+dy*i][x+dx*i] for i in range(length)]
            sublists.append(seq)
        except IndexError:
            pass
    return sublists
</snippet></ROW><ROW><id>11697303</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = numpy.arange(6).reshape(1,2,3)
&gt;&gt;&gt; a
array([[[0, 1, 2],
        [3, 4, 5]]])
&gt;&gt;&gt; list(numpy.ndenumerate(a))
[((0, 0, 0), 0), ((0, 0, 1), 1), ((0, 0, 2), 2), ((0, 1, 0), 3), ((0, 1, 1), 4), ((0, 1, 2), 5)]
</snippet></ROW><ROW><id>11697697</id><snippet>{apple:red, banana:yellow}.get(value)
</snippet></ROW><ROW><id>11697720</id><snippet>list(set(listA) &amp; set(listB))
</snippet></ROW><ROW><id>11697720</id><snippet>['a', 'c']
</snippet></ROW><ROW><id>11697720</id><snippet>' '.join(list(set(john.split()) &amp; set(mary.split())))
'I and love yellow'
</snippet></ROW><ROW><id>11697720</id><snippet>join()</snippet></ROW><ROW><id>11697720</id><snippet>' '.join([j for j, m in zip(john.split(), mary.split()) if j==m])
'I love yellow and'
</snippet></ROW><ROW><id>11697720</id><snippet>aa = ['a', 'b', 'c']
bb = ['c', 'b', 'd', 'a']

[a for a, b in zip(aa, bb) if a==b]
['b']
</snippet></ROW><ROW><id>11697755</id><snippet>soup = ...</snippet></ROW><ROW><id>11697755</id><snippet>ircSend(...</snippet></ROW><ROW><id>11697755</id><snippet>try:
    soup = BeautifulSoup.BeautifulSoup(urllib.urlopen(link))
    link_title = soup.title.string
    ircSend('PRIVMSG ' + args[2] + ' ' + link_title)
except IOError:
    pass
</snippet></ROW><ROW><id>11697869</id><snippet>\n</snippet></ROW><ROW><id>11697869</id><snippet>\r\n</snippet></ROW><ROW><id>11697869</id><snippet>filename = raw_input('What would you like to name the file? ')

with open(filename, 'wb') as out:
    for frame in frames:
        out.write(' '.join(str(num) for num in frame))
        out.write('\r\n')
</snippet></ROW><ROW><id>11697869</id><snippet>frames</snippet></ROW><ROW><id>11697869</id><snippet>'\r\n'</snippet></ROW><ROW><id>11697869</id><snippet>'\n'</snippet></ROW><ROW><id>11697870</id><snippet>override_urls</snippet></ROW><ROW><id>11697870</id><snippet>prepend_urls</snippet></ROW><ROW><id>11697922</id><snippet>Cell</snippet></ROW><ROW><id>11697922</id><snippet>__wasActive</snippet></ROW><ROW><id>11697953</id><snippet>from module import name</snippet></ROW><ROW><id>11697953</id><snippet>os</snippet></ROW><ROW><id>11697953</id><snippet>sys.modules</snippet></ROW><ROW><id>11697953</id><snippet>import sys
os = sys.modules["os"]
</snippet></ROW><ROW><id>11697953</id><snippet>os</snippet></ROW><ROW><id>11697953</id><snippet>import os</snippet></ROW><ROW><id>11697953</id><snippet>import</snippet></ROW><ROW><id>11697953</id><snippet>sys.modules</snippet></ROW><ROW><id>11697953</id><snippet>import</snippet></ROW><ROW><id>11697957</id><snippet>    class Wrapper(object):
        def __init__(self, module):
            for name in module.__dict__:
                self.__dict__[name] = module.__dict__[name]

        #__getattr__ is called only if regular access failed
        def __getattr__(self, name): 
            try:
                return self.__dict__['__'+name.split('__', 1)[1]]
            except (IndexError, KeyError):
                raise AttributeError, name

        def __setattr__(self, name, value):
            try:
                self.__dict__['__'+name.split('__', 1)[1]] = value
            except IndexError:   #no double underscores to split
                self.__dict__[name] = value
</snippet></ROW><ROW><id>11697957</id><snippet>import cwrapper 
api = Wrapper(cwrapper)

class MyClass(object):
    i = api.__some_Getter() #works
</snippet></ROW><ROW><id>11698063</id><snippet>show()</snippet></ROW><ROW><id>11698063</id><snippet>plot(...)</snippet></ROW><ROW><id>11698063</id><snippet>syntax error</snippet></ROW><ROW><id>11698063</id><snippet>plt.text(0,0, 'Sum of vales ='S  '\n' 'Total number of entries = ' N '\n' 'Avg= 'avg   '\n'   'Standard Deviation = ' sigma)
</snippet></ROW><ROW><id>11698063</id><snippet>'some string' variable 'another string'</snippet></ROW><ROW><id>11698063</id><snippet>'some string'  ' another string'</snippet></ROW><ROW><id>11698063</id><snippet>'some string another string'</snippet></ROW><ROW><id>11698071</id><snippet>d = con[db][col].find_one()
</snippet></ROW><ROW><id>11698176</id><snippet>import socket 
import threading

class Client(threading.Thread):

    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.connect(('127.0.0.1', 1234))
        print('Client connected to server')

        t = threading.Thread(target = self.read)
        t.daemon = True # helpful if you want it to die automatically
        t.start()

        t2 = threading.thread(target = self.write)
        t2.daemon = True
        t2.start()

    def read(self):
        while True:
            data = self.socket.recv(1024)
            if data:
                print('Received:', data)

    def write(self):
        while True:
            message = input()
            self.socket.send(bytes(message, 'utf-8'))


client = Client()
</snippet></ROW><ROW><id>11698360</id><snippet>r = float(input())
</snippet></ROW><ROW><id>11698360</id><snippet>raw_input</snippet></ROW><ROW><id>11698360</id><snippet>input</snippet></ROW><ROW><id>11698360</id><snippet>calc</snippet></ROW><ROW><id>11698360</id><snippet>+</snippet></ROW><ROW><id>11698360</id><snippet>print('My estimate of the number of detectable civilizations is %s.' % calc)
</snippet></ROW><ROW><id>11698542</id><snippet>import</snippet></ROW><ROW><id>11698542</id><snippet>from</snippet></ROW><ROW><id>11698542</id><snippet>sys.modules</snippet></ROW><ROW><id>11698542</id><snippet>example_opener</snippet></ROW><ROW><id>11698542</id><snippet>import webbrowser

def open_example():
    webbrowser.open('http://www.example.com/')
</snippet></ROW><ROW><id>11698542</id><snippet>import webbrowser
</snippet></ROW><ROW><id>11698542</id><snippet>webbrowser</snippet></ROW><ROW><id>11698542</id><snippet>def open_example():
    webbrowser.open('http://www.example.com/')
</snippet></ROW><ROW><id>11698542</id><snippet>open_example</snippet></ROW><ROW><id>11698542</id><snippet>webbrowser</snippet></ROW><ROW><id>11698542</id><snippet>open_example</snippet></ROW><ROW><id>11698542</id><snippet>webbrowser</snippet></ROW><ROW><id>11698542</id><snippet>from example_opener import open_example

def open(url):
    print url
</snippet></ROW><ROW><id>11698542</id><snippet>example_opener</snippet></ROW><ROW><id>11698542</id><snippet>import webbrowser
</snippet></ROW><ROW><id>11698542</id><snippet>webbrowser</snippet></ROW><ROW><id>11698542</id><snippet>webbrowser</snippet></ROW><ROW><id>11698542</id><snippet>from example_opener import open_example
</snippet></ROW><ROW><id>11698542</id><snippet>example_opener</snippet></ROW><ROW><id>11698542</id><snippet>sys.modules</snippet></ROW><ROW><id>11698542</id><snippet>example_opener</snippet></ROW><ROW><id>11698542</id><snippet>open_example</snippet></ROW><ROW><id>11698542</id><snippet>webbrowser</snippet></ROW><ROW><id>11698542</id><snippet>open_example</snippet></ROW><ROW><id>11698542</id><snippet>example_opener</snippet></ROW><ROW><id>11698542</id><snippet>open_example</snippet></ROW><ROW><id>11698542</id><snippet>webbrowser</snippet></ROW><ROW><id>11698542</id><snippet>webbrowser</snippet></ROW><ROW><id>11698542</id><snippet>example_opener</snippet></ROW><ROW><id>11698542</id><snippet>def open_example():
    webbrowser.open('http://www.example.com/')
</snippet></ROW><ROW><id>11698542</id><snippet>webbrowser</snippet></ROW><ROW><id>11698542</id><snippet>open_example</snippet></ROW><ROW><id>11698542</id><snippet>example_opener</snippet></ROW><ROW><id>11698542</id><snippet>open_example</snippet></ROW><ROW><id>11698542</id><snippet>import webbrowser
</snippet></ROW><ROW><id>11698542</id><snippet>webbrowser</snippet></ROW><ROW><id>11698542</id><snippet>def open(url):
    print url
</snippet></ROW><ROW><id>11698542</id><snippet>open</snippet></ROW><ROW><id>11698542</id><snippet>from example_opener import open_example
</snippet></ROW><ROW><id>11698542</id><snippet>example_opener</snippet></ROW><ROW><id>11698542</id><snippet>sys.modules</snippet></ROW><ROW><id>11698542</id><snippet>example_opener</snippet></ROW><ROW><id>11698542</id><snippet>open_example</snippet></ROW><ROW><id>11698542</id><snippet>webbrowser</snippet></ROW><ROW><id>11698542</id><snippet>webbrowser</snippet></ROW><ROW><id>11698542</id><snippet>example_opener</snippet></ROW><ROW><id>11698542</id><snippet>example_opener</snippet></ROW><ROW><id>11698542</id><snippet>example_opener</snippet></ROW><ROW><id>11698699</id><snippet>imagedb = Imagedb(key_name = self.user.name)
</snippet></ROW><ROW><id>11699091</id><snippet>qsort(arr, 0, newPivotIndex)
</snippet></ROW><ROW><id>11699091</id><snippet>qsort(arr, left, newPivotIndex)
</snippet></ROW><ROW><id>11699249</id><snippet>- url: /app1/.*
  script: file1.py
- url: /app2/.*
  script: file2.py
</snippet></ROW><ROW><id>11699249</id><snippet>app = webapp2.WSGIApplication([(r'/app1/myview', Handler),(r'/app1/myotherview', AnotherHandler)])
</snippet></ROW><ROW><id>11699390</id><snippet>def fib(n):
    if n &lt; 2:
        return n
    else:
        return fib(n-1) + fib(n-2)
</snippet></ROW><ROW><id>11699390</id><snippet>fib(n)</snippet></ROW><ROW><id>11699390</id><snippet>fib(n-1)</snippet></ROW><ROW><id>11699390</id><snippet>fib(n-2)</snippet></ROW><ROW><id>11699390</id><snippet>fib(n-1)</snippet></ROW><ROW><id>11699390</id><snippet>fib(n-2)</snippet></ROW><ROW><id>11699390</id><snippet>fib(35)</snippet></ROW><ROW><id>11699390</id><snippet>fib(x)</snippet></ROW><ROW><id>11699390</id><snippet>x</snippet></ROW><ROW><id>11699390</id><snippet>def fib2(n):
    if n &lt; 2:
        return n
    elif n in cache:
        return cache[n]
    else:
        result = fib2(n-1) + fib2(n-2)
        cache[n] = result
        return result
</snippet></ROW><ROW><id>11699414</id><snippet>+</snippet></ROW><ROW><id>11699414</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>11699414</id><snippet>%2B</snippet></ROW><ROW><id>11699414</id><snippet>encodeURIComponent</snippet></ROW><ROW><id>11699582</id><snippet>?</snippet></ROW><ROW><id>11699582</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>11699582</id><snippet>UnicodeEncodeError: 'charmap' codec can't encode characters in position 22-23: character maps to &lt;undefined&gt;
</snippet></ROW><ROW><id>11699582</id><snippet>getStringWithDecodedUnicode</snippet></ROW><ROW><id>11699582</id><snippet>import re   
getStringWithDecodedUnicode = lambda str : re.sub( '\\\\u([\da-f]{4})', (lambda x : chr( int( x.group(1), 16 ) )), str )
</snippet></ROW><ROW><id>11699582</id><snippet>getStringWithDecodedUnicode</snippet></ROW><ROW><id>11699582</id><snippet>def getStringWithDecodedUnicode( value ):
    findUnicodeRE = re.compile( '\\\\u([\da-f]{4})' )
    def getParsedUnicode(x):
        return chr( int( x.group(1), 16 ) )

    return  findUnicodeRE.sub(getParsedUnicode, str( value ) )
</snippet></ROW><ROW><id>11699582</id><snippet>import re
import json
getStringWithDecodedUnicode = lambda str : re.sub( '\\\\u([\da-f]{4})', (lambda x : chr( int( x.group(1), 16 ) )), str )

data = {"Japan":"日本"}
jsonString = json.dumps( data )
print( "json.dumps({0}) = {1}".format( data, jsonString ) )
jsonString = getStringWithDecodedUnicode( jsonString )
print( "Decoded Unicode: %s" % jsonString )
</snippet></ROW><ROW><id>11699582</id><snippet>json.dumps({'Japan': '日本'}) = {"Japan": "\u65e5\u672c"}
Decoded Unicode: {"Japan": "日本"}
</snippet></ROW><ROW><id>11699582</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>11699582</id><snippet>import json
data = {'navn': 'Åge', 'stilling': 'Lærling'}
result = json.dumps(d, ensure_ascii=False)
print( result ) # prints '{"stilling": "Lærling", "navn": "Åge"}'
</snippet></ROW><ROW><id>11699736</id><snippet>@celery.task
def fetch(url):
    # fetch url
    return html

@celery.task
def parse(html):
    pass
</snippet></ROW><ROW><id>11699736</id><snippet>$ celery worker -Q fetch_queue

$ celery worker -Q parse_queue
</snippet></ROW><ROW><id>11699736</id><snippet>fetch.apply_async((url), link=parse.subtask())
</snippet></ROW><ROW><id>11699845</id><snippet>try:
    if any(url in s for s in seen):
       return 0
</snippet></ROW><ROW><id>11699845</id><snippet>seen.append(str)
print "--------------"
crawl(str, seen)
</snippet></ROW><ROW><id>11699845</id><snippet>str</snippet></ROW><ROW><id>11699845</id><snippet>seen</snippet></ROW><ROW><id>11699845</id><snippet>crawl</snippet></ROW><ROW><id>11699845</id><snippet>str</snippet></ROW><ROW><id>11699845</id><snippet>seen</snippet></ROW><ROW><id>11699845</id><snippet>from urllib import urlopen
from bs4 import BeautifulSoup

def crawl(url, seen, to_crawl):
    html = urlopen(url).read()
    soup = BeautifulSoup(html)
    seen.append(url)
    for tag in soup.findAll('a', href=True):
        str = tag['href']
        if 'http' in str:
            if url not in seen and url not in to_crawl:
                to_crawl.append(str)
                print tag['href']
                print "--------------"
    crawl(to_crawl.pop(), seen, to_crawl)

def main ():
    print "$ = " , crawl("http://news.google.ca", [], [])


if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>11700137</id><snippet>pandas</snippet></ROW><ROW><id>11700137</id><snippet>groupby</snippet></ROW><ROW><id>11700137</id><snippet>import pandas as pd

def with_pandas_groupby(func, x, b):
    grouped = pd.Series(x).groupby(b)
    return grouped.agg(func)
</snippet></ROW><ROW><id>11700137</id><snippet>&gt;&gt;&gt; x = [1,2,3,4,5,6]
&gt;&gt;&gt; b = ["a","b","a","a","c","c"]
&gt;&gt;&gt; with_pandas_groupby(np.prod, x, b)
a    12
b     2
c    30
</snippet></ROW><ROW><id>11700137</id><snippet>with_pandas_groupby</snippet></ROW><ROW><id>11700137</id><snippet> 3 levels,      100 values: 175 us per loop
 3 levels,     1000 values: 1.16 ms per loop
 3 levels,  1000000 values: 1.21 s per loop

10 levels,      100 values: 304 us per loop
10 levels,     1000 values: 1.32 ms per loop
10 levels,  1000000 values: 1.23 s per loop

26 levels,      100 values: 554 us per loop
26 levels,     1000 values: 1.59 ms per loop
26 levels,  1000000 values: 1.27 s per loop
</snippet></ROW><ROW><id>11700137</id><snippet> 3 levels,      100 values: 136 us per loop
 3 levels,     1000 values: 259 us per loop
 3 levels,  1000000 values: 205 ms per loop

10 levels,      100 values: 297 us per loop
10 levels,     1000 values: 447 us per loop
10 levels,  1000000 values: 262 ms per loop

26 levels,      100 values: 617 us per loop
26 levels,     1000 values: 795 us per loop
26 levels,  1000000 values: 299 ms per loop
</snippet></ROW><ROW><id>11700137</id><snippet> 3 levels,      100 values: 365 us per loop
 3 levels,     1000 values: 443 us per loop
 3 levels,  1000000 values: 89.4 ms per loop

10 levels,      100 values: 369 us per loop
10 levels,     1000 values: 453 us per loop
10 levels,  1000000 values: 88.8 ms per loop

26 levels,      100 values: 382 us per loop
26 levels,     1000 values: 466 us per loop
26 levels,  1000000 values: 89.9 ms per loop
</snippet></ROW><ROW><id>11700137</id><snippet>pandas</snippet></ROW><ROW><id>11700137</id><snippet>pandas.Series</snippet></ROW><ROW><id>11700137</id><snippet>def gen_data(levels, size):
    choices = 'abcdefghijklmnopqrstuvwxyz'
    levels = np.asarray([l for l in choices[:nlevels]])
    index = np.random.random_integers(0, levels.size - 1, size)
    b = levels[index]
    x = np.arange(1, size + 1)
    return x, b
</snippet></ROW><ROW><id>11700137</id><snippet>ipython</snippet></ROW><ROW><id>11700137</id><snippet>In [174]: for nlevels in (3, 10, 26):
   .....:     for size in (100, 1000, 10e5):
   .....:         x, b = gen_data(nlevels, size)
   .....:         print '%2d levels, ' % nlevels, '%7d values:' % size,
   .....:         %timeit function_to_time(np.prod, x, b)
   .....:     print
</snippet></ROW><ROW><id>11700649</id><snippet>import os

path = chap_name

if not os.path.exists(path):
    os.makedirs(path)

filename = img_alt + '.jpg'
with open(os.path.join(path, filename), 'wb') as temp_file:
    temp_file.write(buff)
</snippet></ROW><ROW><id>11700649</id><snippet>os.makedirs</snippet></ROW><ROW><id>11700649</id><snippet>os.mkdir</snippet></ROW><ROW><id>11700649</id><snippet>img_alt = os.path.basename(img_alt)
</snippet></ROW><ROW><id>11700768</id><snippet>import dateutil.parser as dateparser
dateparser.parse('2012-07-23T08:52:04+0000')
</snippet></ROW><ROW><id>11700768</id><snippet>dateutil</snippet></ROW><ROW><id>11700768</id><snippet>timezone</snippet></ROW><ROW><id>11700817</id><snippet>def print_dict(d):
    new = {}
    for k, v in d.iteritems():
        if isinstance(v, dict):
            v = print_dict(v)
        new[k.replace('.', '-')] = v
    return new
</snippet></ROW><ROW><id>11700845</id><snippet>escape</snippet></ROW><ROW><id>11700845</id><snippet>tempBallVelocity</snippet></ROW><ROW><id>11700845</id><snippet>tempBallVelocity</snippet></ROW><ROW><id>11700845</id><snippet>tempBallVelocity</snippet></ROW><ROW><id>11700845</id><snippet>tempBallVelocity</snippet></ROW><ROW><id>11700845</id><snippet>elif</snippet></ROW><ROW><id>11700845</id><snippet>if</snippet></ROW><ROW><id>11700851</id><snippet>bill_to = transactions['Transaction Details']['Bill To']
</snippet></ROW><ROW><id>11700851</id><snippet>transactions['Transaction Details']</snippet></ROW><ROW><id>11700851</id><snippet>dict</snippet></ROW><ROW><id>11700851</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>11700851</id><snippet>KeyError</snippet></ROW><ROW><id>11700851</id><snippet>try:
    bill_to = transactions['Transaction Details']['Bill To']
except KeyError:
    # which of the two lookups failed?
    # we don't know unless we inspect the exception;
    # but it's easier to do the lookup and error handling in two steps
</snippet></ROW><ROW><id>11700875</id><snippet>app.add_url_rule('/example', view_func = example.Index.as_view('example_index'))
app.add_url_rule('/example/&lt;string:example_key&gt;', view_func = example.Show.as_view('example_show'), methods=['GET'])
</snippet></ROW><ROW><id>11701671</id><snippet>def fun_name():
    i = 0
    numbers = []
    while i &lt; 6:
        print "At the top of i is %d" % i
        numbers.append(i)
        i = i + 1
    print "Numbers now: ", numbers
    print "At the bottom i is %d" % i

    print "The numbers: "

    for num in numbers:
        print num
</snippet></ROW><ROW><id>11701914</id><snippet>def naturalNumbers(n): 
  return range(1,n+1)
</snippet></ROW><ROW><id>11701914</id><snippet>def naturalNumbers(n): 
  return list(range(1,n+1))
</snippet></ROW><ROW><id>11701943</id><snippet>glBindTexture(GL_TEXTURE_2D, self.texture[i])
glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER, GL_NEAREST)
glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER, GL_NEAREST)
</snippet></ROW><ROW><id>11701943</id><snippet>glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8,  width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, None);
</snippet></ROW><ROW><id>11701943</id><snippet>glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, GL_COLOR_ATTACHMENT0_EXT,  GL_TEXTURE_2D, self.texture[i], 0);
</snippet></ROW><ROW><id>11701943</id><snippet>renderScene()
</snippet></ROW><ROW><id>11701943</id><snippet>def glhelperUnbindTexture(target, name):
    max_units = max(glGetInteger(GL_MAX_TEXTURE_UNITS),
                    glGetInteger(GL_MAX_TEXTURE_IMAGE_UNITS),
                    glGetInteger(GL_MAX_TEXTURE_COORDS))
    current_unit = glGetInteger(GL_ACTIVE_TEXTURE)

    for i in range(max_units):
        glActiveTexture(GL_TEXTURE0 + i)
        binding = glGetInteger( {GL_TEXTURE_1D: GL_TEXTURE_BINDING_1D,
                                 GL_TEXTURE_2D: GL_TEXTURE_BINDING_2D,
                                 GL_TEXTURE_3D: GL_TEXTURE_BINDING_3D,
                                 GL_TEXTURE_CUBE_MAP: GL_TEXTURE_BINDING_CUBE_MAP}[target])
        if binding == name:
             glBindTexture(target, 0) # this unbinds the texture from the texturing unit

    glActiveTexture(current_unit)
</snippet></ROW><ROW><id>11702194</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup(open(path_to_html_file))

name_span = soup.find(id="sobi2Details_field_name")

# First way: split text over ':'
# This only works because there's always a ':' before the target field
name = name_span.text.split(':')[1]

# Second way: iterate over the span strings
# The element you look for is always the last one
name = list(name_span.strings)[-1]

# Third way: iterate over 'next' elements
name = name_span.next.next.next # you can create a function to do that, it looks ugly :)
</snippet></ROW><ROW><id>11702289</id><snippet>pip freeze &gt; requirements.txt
</snippet></ROW><ROW><id>11702289</id><snippet>pip install -r requirements.txt
</snippet></ROW><ROW><id>11702449</id><snippet>&gt;&gt;&gt; a = ['blah', 3,'haha', 2, 'pointer', 1, 'poop', 'fire']
&gt;&gt;&gt; a[0:][::2] # even
['blah', 'haha', 'pointer', 'poop']
&gt;&gt;&gt; a[1:][::2] # odd
[3, 2, 1, 'fire']
</snippet></ROW><ROW><id>11702530</id><snippet>urllib2</snippet></ROW><ROW><id>11702530</id><snippet>urllib.request</snippet></ROW><ROW><id>11702530</id><snippet>requests</snippet></ROW><ROW><id>11702965</id><snippet>FLAG_PHRASE | FLAG_LOVEHATE | FLAG_BOOLEAN</snippet></ROW><ROW><id>11703083</id><snippet>zip</snippet></ROW><ROW><id>11703083</id><snippet>list3 = [a + b for a, b in zip(list1, list2)]
</snippet></ROW><ROW><id>11703083</id><snippet>zip</snippet></ROW><ROW><id>11703083</id><snippet>list1</snippet></ROW><ROW><id>11703083</id><snippet>list2</snippet></ROW><ROW><id>11703614</id><snippet>re.findall</snippet></ROW><ROW><id>11703614</id><snippet>re.finditer</snippet></ROW><ROW><id>11703818</id><snippet>JQuery</snippet></ROW><ROW><id>11703818</id><snippet>Ajax</snippet></ROW><ROW><id>11703818</id><snippet>$.post('link-to-my-python-script',{data},
          function(answer){
                      // process your request here ..
                  });
</snippet></ROW><ROW><id>11703875</id><snippet>import</snippet></ROW><ROW><id>11703875</id><snippet>settings_local.py</snippet></ROW><ROW><id>11703875</id><snippet>settings.py</snippet></ROW><ROW><id>11703875</id><snippet>import *</snippet></ROW><ROW><id>11703875</id><snippet>settings_local.py</snippet></ROW><ROW><id>11703875</id><snippet>settings_local.py</snippet></ROW><ROW><id>11703875</id><snippet>settings.py</snippet></ROW><ROW><id>11703875</id><snippet>os.path.dirname(__file__)</snippet></ROW><ROW><id>11703875</id><snippet>import</snippet></ROW><ROW><id>11703875</id><snippet>execfile</snippet></ROW><ROW><id>11703958</id><snippet>cache_page</snippet></ROW><ROW><id>11703958</id><snippet>key_prefix</snippet></ROW><ROW><id>11703958</id><snippet>prefix_key</snippet></ROW><ROW><id>11703958</id><snippet>is_authenticated</snippet></ROW><ROW><id>11703958</id><snippet>from django.views.decorators.cache import cache_page

def cache_on_auth(timeout):
    def decorator(view_func):
        @wraps(view_func, assigned=available_attrs(view_func))
        def _wrapped_view(request, *args, **kwargs):
            return cache_page(timeout, key_prefix="_auth_%s_" % request.user.is_authenticated())(view_func)(request, *args, **kwargs)
        return _wrapped_view
    return decorator
</snippet></ROW><ROW><id>11703958</id><snippet>@cache_on_auth(60*60)
def myview(request)
</snippet></ROW><ROW><id>11703958</id><snippet>cache key:   
views.decorators.cache.cache_page._auth_False_.GET.123456.123456
</snippet></ROW><ROW><id>11703958</id><snippet>cache key:   
views.decorators.cache.cache_page._auth_True_.GET.789012.789012
</snippet></ROW><ROW><id>11703998</id><snippet>C:\OpenCV\3rdparty\ffmpeg\</snippet></ROW><ROW><id>11703998</id><snippet>opencv_ffmpeg.dll</snippet></ROW><ROW><id>11703998</id><snippet>C:\Python27\</snippet></ROW><ROW><id>11704155</id><snippet>Login(nbiLogin NBILogin, )</snippet></ROW><ROW><id>11704155</id><snippet>Login</snippet></ROW><ROW><id>11704155</id><snippet>NBILogin</snippet></ROW><ROW><id>11704155</id><snippet> login = client.factory.create("ns0:NBILogin")
 login.UserName = username 
 login.Password = password 
 result = client.service.Login(login)
</snippet></ROW><ROW><id>11704155</id><snippet>(authenticateResult){
   Success = True
   Session =
      (nbiSession){
         Id = "0eda1622-473c-4dd6-b68e-4ff3c1ee27f6"
      }
 }
</snippet></ROW><ROW><id>11704155</id><snippet>result.Success == True and result.Session.Id == "0eda1622-473c-4dd6-b68e-4ff3c1ee27f6"</snippet></ROW><ROW><id>11704155</id><snippet>GetEvent(nbiSession NBISession, eventReqData EventReqData, )</snippet></ROW><ROW><id>11704155</id><snippet>NBISession</snippet></ROW><ROW><id>11704155</id><snippet>EventReqData</snippet></ROW><ROW><id>11704155</id><snippet>result</snippet></ROW><ROW><id>11704155</id><snippet>EventReqData</snippet></ROW><ROW><id>11704155</id><snippet>(eventReqData){
   EventType =
      (eventType){
         value = None
      }
   SerialNumbers =
      (SerialNumbers){
         SerialNumber[] = &lt;empty&gt;
      }
 }
</snippet></ROW><ROW><id>11704155</id><snippet>EventType</snippet></ROW><ROW><id>11704155</id><snippet>SerialNumbers</snippet></ROW><ROW><id>11704155</id><snippet>event_req_data = client.factory.create("ns0:EventReqData")
event_req_data.EventType = "put some appropriate event type here"
event_req_data.SerialNumbers = [10, 51, 1] # some serial numbers 
</snippet></ROW><ROW><id>11704155</id><snippet>SerialNumber</snippet></ROW><ROW><id>11704155</id><snippet>client.factory.create()</snippet></ROW><ROW><id>11704155</id><snippet>sns = event_req_data.SerialNumbers = client.factory.create('ns0:SerialNumbers')
for item in [10, 51, 1]:
    ns = client.factory.create('ns0:SerialNumber')
    ns.value = item
    sns.SerialNumber.append(ns)
</snippet></ROW><ROW><id>11704155</id><snippet>SerialNumbers</snippet></ROW><ROW><id>11704155</id><snippet>SerialNumber</snippet></ROW><ROW><id>11704155</id><snippet>EventType</snippet></ROW><ROW><id>11704155</id><snippet>EventType</snippet></ROW><ROW><id>11704155</id><snippet>client.factory.create()</snippet></ROW><ROW><id>11704155</id><snippet>event_type = client.factory.create("ns0:EventType")
event_type.value = "put some appropriate event type here"
event_req_data.EventType = event_type
</snippet></ROW><ROW><id>11704155</id><snippet>event = client.service.GetEvent(login.Session, event_req_data)
</snippet></ROW><ROW><id>11704160</id><snippet>def __repr__(self):
    return [x for x in self].__repr__()
</snippet></ROW><ROW><id>11704160</id><snippet>def __repr__(self):
    strs = []
    for x in self:
        strs.append(str(x))
    return '[%s]' % ', '.join(strs)
</snippet></ROW><ROW><id>11704179</id><snippet>&gt;&gt;&gt; from math import radians, cos, sin, asin, sqrt
&gt;&gt;&gt; 
&gt;&gt;&gt; def haversine(lon1, lat1, lon2, lat2):
...     """
...     Calculate the great circle distance between two points 
...     on the earth (specified in decimal degrees)
...     """
...     # convert decimal degrees to radians 
...     lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])
...     # haversine formula 
...     dlon = lon2 - lon1 
...     dlat = lat2 - lat1 
...     a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
...     c = 2 * asin(sqrt(a)) 
...     km = 6367 * c
...     return km 
... 
&gt;&gt;&gt; haversine(-1.7297, 53.3205, -1.6997, 53.3186)
2.0025842109026413
</snippet></ROW><ROW><id>11704184</id><snippet>[0.0, 1.0)</snippet></ROW><ROW><id>11704184</id><snippet>random.py</snippet></ROW><ROW><id>11704184</id><snippet>/dev/urandom</snippet></ROW><ROW><id>11704184</id><snippet>CryptGenRandom</snippet></ROW><ROW><id>11704184</id><snippet>random.SystemRandom</snippet></ROW><ROW><id>11704210</id><snippet> python -c "freq=220;sec=2;from math import sin,pi;rate=8000;w=[chr(127+int(127*sin(i*2*pi*freq/rate))) for i in xrange(rate)]*sec;s=''.join(w);print s"  &gt; tmp_sound
 pacat tmp_sound    &gt;padsp
</snippet></ROW><ROW><id>11704363</id><snippet>Map</snippet></ROW><ROW><id>11704363</id><snippet>[ ]-[u] [ ] [ ]
 |
[ ]-[ ]-[ ] [ ]
     |
[ ]-[ ]-[ ] [ ]
 |
[ ]-[ ]-[ ]-[ ]
</snippet></ROW><ROW><id>11704363</id><snippet>      0   1   2   3
   0 [ ]-[u] [ ] [ ]
      |
   1 [ ]-[ ]-[ ] [ ]
          |
   2 [ ]-[ ]-[ ] [ ]
      |
   3 [ ]-[ ]-[ ]-[ ]
</snippet></ROW><ROW><id>11704363</id><snippet>[u]</snippet></ROW><ROW><id>11704363</id><snippet>Map</snippet></ROW><ROW><id>11704363</id><snippet>[((0, 0), (1, 0)), ((0, 0), (1, 0)), ((1, 0), (1, 1)), ((1, 1), (2, 1)),
 ((1, 0), (1, 2)), ((0, 2), (1, 2)), ((1, 2), (2, 2)), ((0, 2), (0, 3)),
 ((0, 3), (1, 3)), ((1, 3), (2, 3)), ((2, 3), (3, 3))]
</snippet></ROW><ROW><id>11704363</id><snippet>Map</snippet></ROW><ROW><id>11704363</id><snippet>print_map</snippet></ROW><ROW><id>11704363</id><snippet>move</snippet></ROW><ROW><id>11704363</id><snippet>class Map:
    def __init__(self, height, width, player_x, player_y, paths):
        self.height = height
        self.width = width
        self.x = player_x
        self.y = player_y
        self.paths = paths
</snippet></ROW><ROW><id>11704363</id><snippet>move</snippet></ROW><ROW><id>11704363</id><snippet>    def move(self, direction):
        if direction == "n":
            if ((self.x, self.y - 1), (self.x, self.y)) not in self.paths:
                print "Cannot go north"
            else:
                self.y -= 1
</snippet></ROW><ROW><id>11704363</id><snippet>move</snippet></ROW><ROW><id>11704363</id><snippet>self.height</snippet></ROW><ROW><id>11704363</id><snippet>self.width</snippet></ROW><ROW><id>11704363</id><snippet>print</snippet></ROW><ROW><id>11704363</id><snippet>def print_map(self):
    for y in range(0, self.height):
        # print the yth row of rooms
        for x in range(0, self.width):
            if self.x == x and self.y == y:
                sys.stdout.write("[u]")  # this is the player's room
            else:
                sys.stdout.write("[ ]")  # empty room
            # now see whether there's a path to the next room
            if ((x, y), (x + 1, y)) in self.paths:
                sys.stdout.write("-")
            else:
                sys.stdout.write(" ")
        # now that we've written the rooms, draw paths to next row
        print  # newline
        for x in range(0, self.width):
            sys.stdout.write(" ")  # spaces for above room
            if ((x, y), (x, y + 1)) in self.paths:
                sys.stdout.write("|  ")
            else:
                sys.stdout.write("   ")
        print
</snippet></ROW><ROW><id>11704363</id><snippet>import sys

class Map:
    def __init__(self, height, width, player_x, player_y, paths):
        self.height = height
        self.width = width
        self.x = player_x
        self.y = player_y
        self.paths = paths

    def move(self, direction):
        if direction == "n":
            if ((self.x, self.y - 1), (self.x, self.y)) not in self.paths:
                print "Cannot go north"
            else:
                self.y -= 1
        if direction == "s":
            if ((self.x, self.y), (self.x, self.y + 1)) not in self.paths:
                print "Cannot go south"
            else:
                self.y += 1
        if direction == "e":
            if ((self.x, self.y), (self.x + 1, self.y)) not in self.paths:
                print "Cannot go east"
            else:
                self.x += 1
        if direction == "w":
            if ((self.x - 1, self.y), (self.x, self.y)) not in self.paths:
                print "Cannot go west"
            else:
                self.x -= 1

    def print_map(self):
        for y in range(0, self.height):
            # print the yth row of rooms
            for x in range(0, self.width):
                if self.x == x and self.y == y:
                    sys.stdout.write("[u]")  # this is the player's room
                else:
                    sys.stdout.write("[ ]")  # empty room
                # now see whether there's a path to the next room
                if ((x, y), (x + 1, y)) in self.paths:
                    sys.stdout.write("-")
                else:
                    sys.stdout.write(" ")
            # now that we've written the rooms, draw paths to next row
            print  # newline
            for x in range(0, self.width):
                sys.stdout.write(" ")  # spaces for above room
                if ((x, y), (x, y + 1)) in self.paths:
                    sys.stdout.write("|  ")
                else:
                    sys.stdout.write("   ")
            print


paths = [((0, 0), (1, 0)), ((0, 0), (1, 0)), ((1, 0), (1, 1)), ((1, 1),
         (2, 1)), ((1, 1), (1, 2)), ((0, 2), (1, 2)), ((1, 2), (2, 2)),
         ((0, 2), (0, 3)), ((0, 3), (1, 3)), ((1, 3), (2, 3)), ((2, 3),
         (3, 3))]
m = Map(4, 4, 0, 0, paths)

while True:
    m.print_map()
    direction = raw_input("What direction do you want to move? [n/e/s/w] ")
    m.move(direction)
</snippet></ROW><ROW><id>11704363</id><snippet>Davids-MacBook-Air:test dgrtwo$ python Map.py 
[u]-[ ] [ ] [ ] 
     |          
[ ] [ ]-[ ] [ ] 
     |          
[ ]-[ ]-[ ] [ ] 
 |              
[ ]-[ ]-[ ]-[ ] 

What direction do you want to move? [n/e/s/w] e
[ ]-[u] [ ] [ ] 
     |          
[ ] [ ]-[ ] [ ] 
     |          
[ ]-[ ]-[ ] [ ] 
 |              
[ ]-[ ]-[ ]-[ ] 

What direction do you want to move? [n/e/s/w] s
[ ]-[ ] [ ] [ ] 
     |          
[ ] [u]-[ ] [ ] 
     |          
[ ]-[ ]-[ ] [ ] 
 |              
[ ]-[ ]-[ ]-[ ] 

What direction do you want to move? [n/e/s/w] w
Cannot go west
[ ]-[ ] [ ] [ ] 
     |          
[ ] [u]-[ ] [ ] 
     |          
[ ]-[ ]-[ ] [ ] 
 |              
[ ]-[ ]-[ ]-[ ] 

What direction do you want to move? [n/e/s/w] e
[ ]-[ ] [ ] [ ] 
     |          
[ ] [ ]-[u] [ ] 
     |          
[ ]-[ ]-[ ] [ ] 
 |              
[ ]-[ ]-[ ]-[ ] 
</snippet></ROW><ROW><id>11704363</id><snippet>move</snippet></ROW><ROW><id>11704363</id><snippet>print_map</snippet></ROW><ROW><id>11704363</id><snippet>def print_map(self):
    for y in range(0, self.height):
        print "".join(["[%s]%s" %
                    ("u" if self.x == x and self.y == y else " ",
                     "-" if ((x, y), (x + 1, y)) in self.paths else " ")
                        for x in range(0, self.width)])
        print " " + "   ".join(["|" if ((x, y), (x, y + 1)) in self.paths
                              else " " for x in range(0, self.width)])
</snippet></ROW><ROW><id>11704390</id><snippet>dateutil.relativedelta</snippet></ROW><ROW><id>11704390</id><snippet>__cmp__</snippet></ROW><ROW><id>11704390</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>11704396</id><snippet>-r</snippet></ROW><ROW><id>11704396</id><snippet>pip install -r req-1-and-2.txt</snippet></ROW><ROW><id>11704396</id><snippet>-r req-1.txt
-r req-2.txt
</snippet></ROW><ROW><id>11704400</id><snippet>db.tables</snippet></ROW><ROW><id>11704400</id><snippet>db[table_name].drop()</snippet></ROW><ROW><id>11704400</id><snippet>db.tables</snippet></ROW><ROW><id>11704400</id><snippet>db.tables</snippet></ROW><ROW><id>11704400</id><snippet>db.tables</snippet></ROW><ROW><id>11704400</id><snippet>db.tables</snippet></ROW><ROW><id>11704400</id><snippet>db.tables()</snippet></ROW><ROW><id>11704400</id><snippet>db.tables</snippet></ROW><ROW><id>11704400</id><snippet>for table_name in db.tables():
    db[table_name].drop()
</snippet></ROW><ROW><id>11704400</id><snippet>db.tables</snippet></ROW><ROW><id>11704400</id><snippet>db.tables()</snippet></ROW><ROW><id>11704409</id><snippet>easy_install</snippet></ROW><ROW><id>11704409</id><snippet>pip</snippet></ROW><ROW><id>11704409</id><snippet>sudo easy_install -U pip</snippet></ROW><ROW><id>11704409</id><snippet>XCode</snippet></ROW><ROW><id>11704409</id><snippet>Command Line Tools</snippet></ROW><ROW><id>11704437</id><snippet>re.sub('^ab', '', 'abab abadfadsf')</snippet></ROW><ROW><id>11704437</id><snippet>^</snippet></ROW><ROW><id>11704608</id><snippet>(\d*)(\d{15})</snippet></ROW><ROW><id>11704608</id><snippet>(?&lt;!\d)(\d*)(\d{15})(?!\d)</snippet></ROW><ROW><id>11704679</id><snippet>xrange</snippet></ROW><ROW><id>11704679</id><snippet>i</snippet></ROW><ROW><id>11704679</id><snippet>i</snippet></ROW><ROW><id>11704679</id><snippet>'%s' % num</snippet></ROW><ROW><id>11704679</id><snippet>num</snippet></ROW><ROW><id>11704679</id><snippet>i</snippet></ROW><ROW><id>11704679</id><snippet>for i in xrange(10, 0, -1):
    with open('C:/TestReq_100 Records.txt', 'r') as ipf:
        with open('processed.txt', 'w') as opf:
            for line in ipf:
                num = line.strip()
                opf.write(num)
</snippet></ROW><ROW><id>11704679</id><snippet># Read the input data once.
with open('C:/TestReq_100 Records.txt', 'r') as ipf:
    ipdata = ipf.read()
# Add a newline to the end of the file if there isn't already one present.
# Without this, the last and first lines of the input might become single lines.
if ipdata[-1] != '\n':
    ipdata += '\n'
# Write to the output file multiple times.
with open('processed.txt', 'w') as opf:
    for i in xrange(10):
        opf.write(ipdata)
</snippet></ROW><ROW><id>11704789</id><snippet>£</snippet></ROW><ROW><id>11704789</id><snippet>&gt;&gt;&gt; print u'\xa3'
£
</snippet></ROW><ROW><id>11704789</id><snippet>unescape()</snippet></ROW><ROW><id>11704789</id><snippet>u'\xa3'</snippet></ROW><ROW><id>11704789</id><snippet>encode</snippet></ROW><ROW><id>11704789</id><snippet>&gt;&gt;&gt; u'\xa3'.encode('utf-8')
'\xc2\xa3'
</snippet></ROW><ROW><id>11704840</id><snippet>request_finished</snippet></ROW><ROW><id>11704901</id><snippet>raw_input([prompt]) -&gt; string

Read a string from standard input.  The trailing newline is stripped.
If the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.
On Unix, GNU readline is used if enabled.  The prompt string, if given,
is printed without a trailing newline before reading.
</snippet></ROW><ROW><id>11704965</id><snippet>os.unlink()</snippet></ROW><ROW><id>11705103</id><snippet>__name__</snippet></ROW><ROW><id>11705103</id><snippet>__main__</snippet></ROW><ROW><id>11705501</id><snippet>set([(a,b,c) if a&lt;b else (b,a,c) for a,b,c in tups])
</snippet></ROW><ROW><id>11705568</id><snippet>for i in list_of_stats:
    getattr(pageprocs, i, lambda: None)()
</snippet></ROW><ROW><id>11705568</id><snippet>lambda: None</snippet></ROW><ROW><id>11705568</id><snippet>AttributeError</snippet></ROW><ROW><id>11705586</id><snippet>ascii_string = unicodedata.normalize('NFKD', unicode_string).encode('ascii','ignore') 
</snippet></ROW><ROW><id>11705608</id><snippet>charset=utf8</snippet></ROW><ROW><id>11705608</id><snippet>use_unicode = True</snippet></ROW><ROW><id>11705608</id><snippet>utf8_unicode_ci</snippet></ROW><ROW><id>11705608</id><snippet>file_pointer.write(my_string.encode('ascii', 'ignore'))
</snippet></ROW><ROW><id>11705655</id><snippet>django.forms.MultipleChoiceField()</snippet></ROW><ROW><id>11705655</id><snippet>known_tags = (
    (1, 'Choice 1'), (2, 'Choice 2'), (3, 'Choice 3'),
    (4, 'Choice 4'), (5, 'Choice 5'))

class MyForm(django.forms.Form):
    tags = django.forms.MultipleChoiceField(choices=known_tags, required=True)
</snippet></ROW><ROW><id>11705655</id><snippet>class MyForm(django.forms.Form):
    tags = django.forms.CharField(required=True)

    def clean_tags(self):
        """Split the tags string on whitespace and return a list"""
        return self.cleaned_data['tags'].strip().split()
</snippet></ROW><ROW><id>11705718</id><snippet>boundMethod.im_class.__name__</snippet></ROW><ROW><id>11705718</id><snippet>inspect</snippet></ROW><ROW><id>11705718</id><snippet>getargvalues</snippet></ROW><ROW><id>11705718</id><snippet>locals</snippet></ROW><ROW><id>11705718</id><snippet>try</snippet></ROW><ROW><id>11705718</id><snippet>s = inspect.stack()
module_name = inspect.getmodule(s[1][0]).__name__
func_name = s[1][3]
arginfo = inspect.getargvalues(s[1][0])
if len(arginfo.args) &gt; 0 and arginfo.args[0] == "self":
    func_name = "%s.%s" (arginfo.locals["self"].__class__.__name__, func_name)
prefix = '### %s-&gt;%s' % (module_name, func_name)
</snippet></ROW><ROW><id>11706223</id><snippet>__init__()</snippet></ROW><ROW><id>11706223</id><snippet>self.cell.column.region</snippet></ROW><ROW><id>11706223</id><snippet>__init__()</snippet></ROW><ROW><id>11706223</id><snippet>region</snippet></ROW><ROW><id>11706378</id><snippet>import dns.resolver

for txtrecord in dns.resolver.query('google.com', 'TXT').answer.response:
   print txtrecord.to_text()
</snippet></ROW><ROW><id>11706378</id><snippet>'google.com. 1700 IN TXT "v=spf1 include:_netblocks.google.com ip4:216.73.93.70/31 ip4:216.73.93.72/31 ~all"'
</snippet></ROW><ROW><id>11706378</id><snippet>dig</snippet></ROW><ROW><id>11706378</id><snippet>import subprocess

print subprocess.Popen(['dig', '-t', 'TXT', 'google.com', '+short'], stdout=subprocess.PIPE).communicate()[0] 
</snippet></ROW><ROW><id>11706579</id><snippet>numpy.random.shuffle(a[1:])
</snippet></ROW><ROW><id>11706586</id><snippet>fight</snippet></ROW><ROW><id>11706586</id><snippet>class Pokemon(object):
    def __init__(self,name,hp,damage):
        self.name = name     #pokemon name
        self.hp = hp         #hit-points of this particular pokemon
        self.damage = damage #amount of damage this pokemon does every attack

    def fight(self,other):
        if(self.hp &gt; 0):
            print("%s did %d damage to %s"%(self.name,self.damage,other.name))
            print("%s has %d hp left"%(other.name,other.hp))

            other.hp -= self.damage
            return other.fight(self)  #Now the other pokemon fights back!
        else:
            print("%s wins! (%d hp left)"%(other.name,other.hp))
            return other,self  #return a tuple (winner,loser)

pikachu=Pokemon('pikachu', 100, 10)
pidgy=Pokemon('pidgy', 200, 12)
winner,loser = pidgy.fight(pikachu)
</snippet></ROW><ROW><id>11706586</id><snippet>class Foo(object):
    attr1=1
    attr2=2
    def __init__(self,attr1,attr2):
        self.attr1 = attr1
        self.attr2 = attr2
</snippet></ROW><ROW><id>11706586</id><snippet>__init__</snippet></ROW><ROW><id>11706586</id><snippet>class Foo(object):
    def __init__(self,attr1,attr2):
        self.attr1 = attr1
        self.attr2 = attr2v
</snippet></ROW><ROW><id>11707009</id><snippet> with open("file.dat") as f:
     lines = f.readlines()
     for ix, line in enumerate(lines):
         if # line has age field
            # get record from lines[ix-1]
</snippet></ROW><ROW><id>11707009</id><snippet> BEGIN { prevline = "" }
       { # process the line
         prevline = $0
       }
</snippet></ROW><ROW><id>11707060</id><snippet>%(var)</snippet></ROW><ROW><id>11707060</id><snippet>&gt;&gt;&gt; "%(foo)s is replaced" % {'foo': 'THIS'}
'THIS is replaced'
</snippet></ROW><ROW><id>11707163</id><snippet>&gt;&gt;&gt; my_list = [[7, 'd'], [3, 's']]
&gt;&gt;&gt; ' '.join('{0}{1}'.format(x, y) for x, y in my_list)
7d 3s
</snippet></ROW><ROW><id>11707163</id><snippet>&gt;&gt;&gt; ' '.join(''.join(map(str, sublist)) for sublist in my_list)
7d 3s
</snippet></ROW><ROW><id>11707174</id><snippet>re</snippet></ROW><ROW><id>11707174</id><snippet>import re
first = str(input())
second = str(input())
regex = first[:-1] + '(?=' + first[-1] + ')'
print(len(re.findall(regex, second)))
</snippet></ROW><ROW><id>11707189</id><snippet>5 elements in 7 comparisons</snippet></ROW><ROW><id>11707189</id><snippet>import random

n=5
ran=[int(n*random.random()) for i in xrange(n)]
print ran

def selection_sort(li):  
    l=li[:]                  
    sl=[]        
    i=1         
    while len(l):              
        lowest=l[0]            
        for x in l:            
            if x&lt;lowest:      
                lowest=x  
        sl.append(lowest)  
        l.remove(lowest)     
        print i  
        i+=1
    return sl

print selection_sort(ran)  
</snippet></ROW><ROW><id>11707189</id><snippet>def ss(li):  
    l=li[:]                  
    sl=[]                 
    while len(l):              
        sl.append(l.pop(l.index(min(l))))       
    return sl    
</snippet></ROW><ROW><id>11707189</id><snippet>[0, 2, 1, 1, 4]
1
2
3
4
5
[0, 1, 1, 2, 4]
</snippet></ROW><ROW><id>11707189</id><snippet>def InsertionSort(l):
    """ sorts l in place using an insertion sort """
    for j in range(1, len(l)):
        key = l[j]
        i = j - 1
        while (i &gt;=0) and (l[i] &gt; key):
            l[i+1] = l[i]
            i = i - 1

        l[i+1] = key
</snippet></ROW><ROW><id>11707308</id><snippet>ClassFactory</snippet></ROW><ROW><id>11707308</id><snippet>klass = type(name, (ModelResource, ), {...})
</snippet></ROW><ROW><id>11707362</id><snippet>run backup every 2 days
</snippet></ROW><ROW><id>11707362</id><snippet>&lt;command_type&gt; := run
&lt;command_to_run&gt; := backup
&lt;time_frame_times&gt; := every
&lt;digit&gt; := 2
&lt;time_frame_modifier&gt; := days
</snippet></ROW><ROW><id>11707362</id><snippet>if token == command_type:
    switch( token.val )
        case "run":
            state = run
            program = tokens.pop().val
if token == time_frame_times:
    switch( token.val )
        case "every":
            time_frame_state = repeat_indefinitely
if token == time_frame_modifier:
    switch( token.val )
        case "days":
            time_frame_modifier = every_N_days
if token == digit:
    switch( time_Frame_modifier )
        case every_N_days:
            time_frame_modifier_value = token.val
</snippet></ROW><ROW><id>11707362</id><snippet>cron</snippet></ROW><ROW><id>11707585</id><snippet>pip install https://github.com/toastdriven/django-tastypie/tarball/master --upgrade</snippet></ROW><ROW><id>11707591</id><snippet>&lt;</snippet></ROW><ROW><id>11707591</id><snippet>&gt;</snippet></ROW><ROW><id>11707591</id><snippet>remove_tags</snippet></ROW><ROW><id>11708536</id><snippet>QFrame</snippet></ROW><ROW><id>11708536</id><snippet>QWidget</snippet></ROW><ROW><id>11708592</id><snippet>import signal
def handler(signum, frame):
    print('Caught signal %d' % signum)
    # Now do something (clean-up?) ...
signal.signal(signal.SIGINT, handler)
signal.signal(signal.SIGTERM, handler)

input() # Example to keep the program running
</snippet></ROW><ROW><id>11708620</id><snippet>class StringError(Exception):
    NO_E = 0
    HAS_Z = 1

def string_checker(string):
    if 'e' not in string:
        raise StringError('e not found in string', StringError.NO_E)
    if 'z' in string:
        raise StringError('z not allowed in string', StringError.HAS_Z)
    return string.upper()

s = 'testing'
try:
    ret = string_checker(s)
    print 'String was okay:', ret
except StringError as e:
    print 'String not okay with an error code of', e.args[1]
</snippet></ROW><ROW><id>11708683</id><snippet>menuBar = wx.MenuBar()
print menuBar.__class__
</snippet></ROW><ROW><id>11708698</id><snippet>var b = new Buffer(1);
b[0] = 213;

console.log(b.toString()); //�


var b = new Buffer(3);
b[0] = 0xE2;
b[1] = 0x98;
b[2] = 0x85;

console.log(b.toString()); //★
</snippet></ROW><ROW><id>11708698</id><snippet>print chr(213) # prints � on the console</snippet></ROW><ROW><id>11708698</id><snippet>0xD5</snippet></ROW><ROW><id>11708698</id><snippet>UInt8Array</snippet></ROW><ROW><id>11708698</id><snippet>var a = new Uint8Array(1);
a[0] = 213;
</snippet></ROW><ROW><id>11708698</id><snippet>console.log( utf8decode(a)); // "�"

//Not recommended for production use ;D
//Doesn't handle &gt; BMP to keep the answer shorter
function utf8decode(uint8array) {
    var codePoints = [],
        i = 0,
        byte, codePoint, len = uint8array.length;
    for (i = 0; i &lt; len; ++i) {
        byte = uint8array[i];

        if ((byte &amp; 0xF8) === 0xF0 &amp;&amp; len &gt; i + 3) {

            codePoint = ((byte &amp; 0x7) &lt;&lt; 18) | ((uint8array[++i] &amp; 0x3F) &lt;&lt; 12) | ((uint8array[++i] &amp; 0x3F) &lt;&lt; 6) | (uint8array[++i] &amp; 0x3F);
            if (!(0xFFFF &lt; codePoint &amp;&amp; codePoint &lt;= 0x10FFFF)) {
                codePoints.push(0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD);
            } else {
                codePoints.push(codePoint);
            }
        } else if ((byte &amp; 0xF0) === 0xE0 &amp;&amp; len &gt; i + 2) {

            codePoint = ((byte &amp; 0xF) &lt;&lt; 12) | ((uint8array[++i] &amp; 0x3F) &lt;&lt; 6) | (uint8array[++i] &amp; 0x3F);
            if (!(0x7FF &lt; codePoint &amp;&amp; codePoint &lt;= 0xFFFF)) {
                codePoints.push(0xFFFD, 0xFFFD, 0xFFFD);
            } else {
                codePoints.push(codePoint);
            }
        } else if ((byte &amp; 0xE0) === 0xC0  &amp;&amp; len &gt; i + 1) {

            codePoint = ((byte &amp; 0x1F) &lt;&lt; 6) | ((uint8array[++i] &amp; 0x3F));
            if (!(0x7F &lt; codePoint &amp;&amp; codePoint &lt;= 0x7FF)) {
                codePoints.push(0xFFFD, 0xFFFD);
            } else {
                codePoints.push(codePoint);
            }
        } else if ((byte &amp; 0x80) === 0x00) {
            codePoints.push(byte &amp; 0x7F);
        } else {
            codePoints.push(0xFFFD);
        }
    }
    return String.fromCharCode.apply(String, codePoints);
}
</snippet></ROW><ROW><id>11708698</id><snippet>//UTF-8 For the black star U+2605 ★:
var a = new Uint8Array(3);
a[0] = 0xE2;
a[1] = 0x98;
a[2] = 0x85;
utf8decode(a) === String.fromCharCode(0x2605) //True
utf8decode(a) // ★
</snippet></ROW><ROW><id>11708698</id><snippet>print chr(0xE2) + chr(0x98) + chr(0x85)
#prints ★
</snippet></ROW><ROW><id>11708877</id><snippet>/home/username/.pip/pip.log</snippet></ROW><ROW><id>11708877</id><snippet>pip</snippet></ROW><ROW><id>11708877</id><snippet>sudo chown username:username /home/username/.pip/pip.log</snippet></ROW><ROW><id>11708877</id><snippet>sudo rm /home/username/.pip/pip.log</snippet></ROW><ROW><id>11708879</id><snippet>{{some_dict.0.iter1}}&lt;br&gt;{% endfor %}
</snippet></ROW><ROW><id>11708879</id><snippet>{{some_dict.iter1.0}}&lt;br&gt;{% endfor %}
            ^^^^^^^
</snippet></ROW><ROW><id>11708879</id><snippet>{% for k, v in some_dict.items|sort %}
    Position {{ k }} has a first value of {{ v.0 }} and has:&lt;br&gt;
    {{ v|join:"&lt;br/&gt;" }}
    {% for item in v %}
        {{ item }}
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>11708909</id><snippet>class MyClass:
    def __init__(self, **kwargs):
        for key in kwargs:
            setattr(self, key, kwargs[key])

x = MyClass(a='test', b='test2')
# x.a == 'test'
# x.b == 'test2'
y = MyClass(c=123, d='something else')
# y.c = 123
# y.d = 'something else'
</snippet></ROW><ROW><id>11709091</id><snippet>def get_hops(url):
    redirect_re = re.compile('&lt;meta[^&gt;]*?url=(.*?)["\']', re.IGNORECASE)
    hops = []
    while url:
            if url not in hops:
                hops.insert(0, url)
            response = urllib2.urlopen(url)
            if response.geturl() != url:
                hops.insert(0, response.geturl())
                # check for redirect meta tag
            match = redirect_re.search(response.read())
            if match:
                url = urlparse.urljoin(url, match.groups()[0].strip())
            else:
                url = None
    return hops
</snippet></ROW><ROW><id>11709117</id><snippet>self</snippet></ROW><ROW><id>11709117</id><snippet>self</snippet></ROW><ROW><id>11709117</id><snippet>self.mymaster</snippet></ROW><ROW><id>11709117</id><snippet>self</snippet></ROW><ROW><id>11709117</id><snippet>top = self.top = Tkinter.Toplevel(self.mymaster)
</snippet></ROW><ROW><id>11709155</id><snippet>from BeautifulSoup import BeautifulSoup
html = #the HTML code you've written above
parsed_html = BeautifulSoup(html)
print parsed_html.body.find('div', attrs={'class':'container'}).text
</snippet></ROW><ROW><id>11709245</id><snippet>selenium.py</snippet></ROW><ROW><id>11709245</id><snippet>webdriver</snippet></ROW><ROW><id>11709245</id><snippet>selenium</snippet></ROW><ROW><id>11709737</id><snippet>class PageForm(forms.ModelForm):
    class Meta:
        model = Page

    def normal_fields(self):
        return [field for field in self if not field.is_hidden
               and field.name in ('field1', 'field2')]

    def collapsible_fields(self):
        return [field for field in self if not field.is_hidden
               and field.name in ('field4', 'field5', 'field3')]
</snippet></ROW><ROW><id>11709737</id><snippet>{# Include the visible fields #}
{% for field in form.normal_fields %}

        {{ field.label_tag }} {{ field }}
        &lt;span class="help-block"&gt;{{ field.help_text }}&lt;/span&gt;

{% endfor %}
{% for field in form.collapsible_fields %}
&lt;div class='collapsible'&gt;
        {{ field.label_tag }} {{ field }}
        &lt;span class="help-block"&gt;{{ field.help_text }}&lt;/span&gt;                             
&lt;/div&gt;
{%endfor%}
</snippet></ROW><ROW><id>11710044</id><snippet>RetryMiddleware</snippet></ROW><ROW><id>11710044</id><snippet>scrapy.contrib.downloadermiddleware.retry.RetryMiddleware
</snippet></ROW><ROW><id>11710044</id><snippet>DOWNLOADER_MIDDLEWARES = {
    'scrapy.contrib.downloadermiddleware.retry.RetryMiddleware': None,
    'middlewares.MyRetryMiddleware': 500,
}
</snippet></ROW><ROW><id>11710367</id><snippet>sorted(rows, key=lambda x: x[0])
</snippet></ROW><ROW><id>11710367</id><snippet>import operator
sorted(rows, key=operator.itemgetter(0))
</snippet></ROW><ROW><id>11710505</id><snippet>render_template</snippet></ROW><ROW><id>11710505</id><snippet>env.get_template</snippet></ROW><ROW><id>11710505</id><snippet>template = env.get_template(template_name)
return template.render(**(template_vals or {}))
</snippet></ROW><ROW><id>11710759</id><snippet>def test_index_with_sample_case_for_depth_2(self):
    idx = HierarchicalIndex(2)

    # A
    idx.insert(1, 'A', 'X')
    idx.insert(2, 'A', 'X')
    idx.insert(3, 'A', 'X')

    idx.insert(4, 'A', 'Y')
    idx.insert(5, 'A', 'Y')

    idx.insert(10, 'A', 'Z')
    idx.insert(11, 'A', 'Z')

    #B
    idx.insert(6, 'B', 'X')
    idx.insert(7, 'B', 'X')

    idx.insert(8, 'B', 'Y')

    assert_that(idx.get('A'), equal_to([1, 2, 3, 4, 5, 10, 11]))
    assert_that(idx.get('A', 'Y'), equal_to([4, 5]))
    assert_that(idx.get('B'), equal_to([6, 7, 8]))
    assert_that(idx.get('B', 'X'), equal_to([6, 7]))


def test_index_with_sample_case_for_depth_3(self):
    idx = HierarchicalIndex(3)

    # A
    idx.insert(1, 'A', 'X', 'i')
    idx.insert(2, 'A', 'X', 'ii')
    idx.insert(3, 'A', 'X', 'ii')

    idx.insert(4, 'A', 'Y', 'i')
    idx.insert(5, 'A', 'Y', 'ii')

    idx.insert(10, 'A', 'Z', 'ii')
    idx.insert(11, 'A', 'Z', 'iii')

    #B
    idx.insert(6, 'B', 'X', 'ii')
    idx.insert(7, 'B', 'X', 'iii')

    idx.insert(8, 'B', 'Y', 'i')

    #same queries with case for depth 2
    assert_that(idx.get('A'), equal_to([1, 2, 3, 4, 5, 10, 11]))
    assert_that(idx.get('A', 'Y'), equal_to([4, 5]))
    assert_that(idx.get('B'), equal_to([6, 7, 8]))
    assert_that(idx.get('B', 'X'), equal_to([6, 7]))

    #new queries
    assert_that(idx.get('B', 'X', 'ii'), equal_to([6]))
    assert_that(idx.get('A', 'X', 'ii'), equal_to([2, 3]))
</snippet></ROW><ROW><id>11710759</id><snippet>def test_index_should_validate_depth_in_operations(self):
    # ....
    # depth=3
    idx = HierarchicalIndex(3)

    assert_that(idx.get('A'), has_length(0))
    assert_that(idx.get('A', 'X'), has_length(0))
    assert_that(idx.get('A', 'X', 'i'), has_length(0))
    self.assertRaises(AssertionError, lambda: idx.get('A', 'X', 'i', '1'))

    self.assertRaises(AssertionError, lambda: idx.insert(1))
    self.assertRaises(AssertionError, lambda: idx.insert(1, 'A'))
    self.assertRaises(AssertionError, lambda: idx.insert(1, 'A', 'X'))
    idx.insert(1, 'A', 'X', 'i')        # should not raise anything
    self.assertRaises(AssertionError, lambda: idx.insert(1, 'A', 'X', 'i', 'a'))

    assert_that(idx.get('A', 'X', 'i'), equal_to([1]))
</snippet></ROW><ROW><id>11710771</id><snippet>import requests

url = r'http://test.com/login_check.php'
parameters = {'x' : '0' ,
              'y' : '0', 
              'url':'login.php',
              'password':'1234',
              'id':'userid'}

login_response = requests.get(url, params=parameters)
htmlContent = login_response.text
</snippet></ROW><ROW><id>11710803</id><snippet>pytz</snippet></ROW><ROW><id>11710803</id><snippet>import datetime

class EST5EDT(datetime.tzinfo):

    def utcoffset(self, dt):
        return datetime.timedelta(hours=-5) + self.dst(dt)

    def dst(self, dt):
        d = datetime.datetime(dt.year, 3, 8)        #2nd Sunday in March
        self.dston = d + datetime.timedelta(days=6-d.weekday())
        d = datetime.datetime(dt.year, 11, 1)       #1st Sunday in Nov
        self.dstoff = d + datetime.timedelta(days=6-d.weekday())
        if self.dston &lt;= dt.replace(tzinfo=None) &lt; self.dstoff:
            return datetime.timedelta(hours=1)
        else:
            return datetime.timedelta(0)

    def tzname(self, dt):
        return 'EST5EDT'

dt = datetime.datetime.now(tz=EST5EDT())
</snippet></ROW><ROW><id>11710803</id><snippet>datetime.tzinfo</snippet></ROW><ROW><id>11710803</id><snippet>EST5EDT</snippet></ROW><ROW><id>11710803</id><snippet>datetime</snippet></ROW><ROW><id>11710803</id><snippet>dt</snippet></ROW><ROW><id>11710803</id><snippet>    In [15]: print(dt)
2012-07-29 12:28:59.125975-04:00

    In [16]: print(dt.strftime('%Y-%m-%d %H:%M:%S'))
2012-07-29 12:28:59

    In [17]: print(dt.strftime('%H:%M:%S'))
12:28:59

    In [18]: print(dt.strftime('%s.%f'))  
1343579339.125975
</snippet></ROW><ROW><id>11711181</id><snippet>target = 'hello'
line = 'hello world hello earth'
rep_target = '|{}|'.format(target)

line = line.replace(target, rep_target)
</snippet></ROW><ROW><id>11711181</id><snippet>|hello| world |hello| earth
</snippet></ROW><ROW><id>11711262</id><snippet>mylist[1:]</snippet></ROW><ROW><id>11711382</id><snippet>items[0] in items[1:]
</snippet></ROW><ROW><id>11711637</id><snippet>print df.describe().to_string()</snippet></ROW><ROW><id>11711637</id><snippet>pandas.util.terminal.get_terminal_size()</snippet></ROW><ROW><id>11711637</id><snippet>(width, height)</snippet></ROW><ROW><id>11711637</id><snippet>pandas.set_printoptions(max_rows=200, max_columns=10)</snippet></ROW><ROW><id>11711709</id><snippet>id_to_location = lambda i: '/%d/%d/%d/' % (int(i)/1e8, int(i)%1e8/1e4, int(i)%1e4)
</snippet></ROW><ROW><id>11711709</id><snippet>print id_to_location('001200230004')
'/12/23/4/'
</snippet></ROW><ROW><id>11711878</id><snippet>easy_install binary_installer_built_with_distutils.exe</snippet></ROW><ROW><id>11712013</id><snippet>(r'^time/plus/(\d{1,2})/$', hours_ahead),
</snippet></ROW><ROW><id>11712013</id><snippet>(r'^time/plus/(?P&lt;offset&gt;\d{1,2})/$', hours_ahead),
</snippet></ROW><ROW><id>11712275</id><snippet>import Tkinter
c = Tkinter.Canvas()
lineId = c.create_line(1,1,2,2)
</snippet></ROW><ROW><id>11712275</id><snippet>import Tkinter
import Canvas
c = Tkinter.Canvas()
line = Canvas.Line(c, 1,1,2,2)
</snippet></ROW><ROW><id>11712393</id><snippet>variable</snippet></ROW><ROW><id>11712393</id><snippet>variable = ('aaa',) # Notice the comma
</snippet></ROW><ROW><id>11712393</id><snippet>tuple()</snippet></ROW><ROW><id>11712393</id><snippet>&gt;&gt;&gt; tuple('aaa')
('a', 'a', 'a')
&gt;&gt;&gt; ('aaa',)
('aaa',)
</snippet></ROW><ROW><id>11712447</id><snippet>"employees_companyA"</snippet></ROW><ROW><id>11712447</id><snippet>"employees_companyB"</snippet></ROW><ROW><id>11712447</id><snippet>for value in json_obj.itervalues():
     temp_arr.append(value[0]["firstName"])
</snippet></ROW><ROW><id>11712447</id><snippet>temp_arr = [value[0]['firstName'] for value in json_obj.itervalues()]
</snippet></ROW><ROW><id>11712447</id><snippet>.itervalues()</snippet></ROW><ROW><id>11712447</id><snippet>json_obj</snippet></ROW><ROW><id>11712729</id><snippet>form</snippet></ROW><ROW><id>11712729</id><snippet>form['field_name'].value()
</snippet></ROW><ROW><id>11712858</id><snippet>mpfr</snippet></ROW><ROW><id>11712858</id><snippet>import gmpy2

def matching_bits(x, y):
    '''Returns the number of bits that match between x and y. The
    sign of x and y are ignored. x and y must be of type mpfr.'''

    # Force both values to be positive, and x &gt;= y.
    x = abs(x)
    y = abs(y)
    if x &lt; y:
        x, y = y, x

    if not isinstance(x, type(gmpy2.mpfr(0))) or not isinstance(y, type(gmpy2.mpfr(0))):
        raise TypeError("Arguments must be of type 'mpfr'.")

    x_bits, x_exp, x_prec = x.digits(2)
    y_bits, y_exp, y_prec = y.digits(2)

    # (x_exp - y_exp) is the number of zeros that must be prepended
    # to x to align the mantissas. If that is greater than the precision
    # y, then no bits in common.
    if (x_exp - y_exp) &gt; x_prec:
        return 0

    x_bits = "0" * (x_exp - y_exp) + x_bits

    count = 0
    while count &lt; min(x_prec, y_prec) and x_bits[count] == y_bits[count]:
        count += 1
    return count
</snippet></ROW><ROW><id>11712913</id><snippet>import sys

with open(sys.argv[1]) as inf:
    total = 0
    for line in inf:
        total += sum(int(i) for i in line.split())

print(total)
</snippet></ROW><ROW><id>11712913</id><snippet>float()</snippet></ROW><ROW><id>11712913</id><snippet>int()</snippet></ROW><ROW><id>11712913</id><snippet>with</snippet></ROW><ROW><id>11712913</id><snippet>with open(sys.argv[1]) as inf:
    print(sum(int(number) for line in inf for number in line.split()))
</snippet></ROW><ROW><id>11712933</id><snippet>WSGIApplicationGroup %{GLOBAL}
</snippet></ROW><ROW><id>11713029</id><snippet>for i in range(1, 4):
    type_dict['type_%d' % i] = myTree.cssselect('element_type_%d' % i)
</snippet></ROW><ROW><id>11713079</id><snippet>\!</snippet></ROW><ROW><id>11713079</id><snippet>r"Pixel Radiance ($W/m^2\!/\mu m$)"
</snippet></ROW><ROW><id>11713079</id><snippet>\tau</snippet></ROW><ROW><id>11713079</id><snippet>au</snippet></ROW><ROW><id>11713237</id><snippet>activate</snippet></ROW><ROW><id>11713237</id><snippet>source</snippet></ROW><ROW><id>11713237</id><snippet>sudo</snippet></ROW><ROW><id>11713267</id><snippet>Python 2.7</snippet></ROW><ROW><id>11713267</id><snippet>2.7</snippet></ROW><ROW><id>11713310</id><snippet>return u"%s %s" % (self.typePlace, self.name)
</snippet></ROW><ROW><id>11713328</id><snippet>super</snippet></ROW><ROW><id>11713328</id><snippet>__init__</snippet></ROW><ROW><id>11713328</id><snippet>with</snippet></ROW><ROW><id>11713328</id><snippet>auth1 = tweepy.auth.OAuthHandler('CONSUMER KEY','CONSUMER SECRET')
auth1.set_access_token('ACCESS TOKEN','ACCESS TOKEN SECRET')
api = tweepy.API(auth1)

class StreamListener(tweepy.StreamListener):
    def __init__(self, f):
        super(StreamListener, self).__init__()
        self._f = f
    def on_status(self, status):
        printf(status)
        self._f.write(status.text)

with open('twitterMessages.txt', 'w') as outf:
    l = StreamListener(outf)
    streamer = tweepy.Stream(auth=auth1, listener=l, timeout=3000000000 )
    setTerms = ['lol', 'Lol', 'LOL']
    streamer.filter(None,setTerms)
</snippet></ROW><ROW><id>11713342</id><snippet>instancemethod</snippet></ROW><ROW><id>11713555</id><snippet># helper function to parse a data block
def parse_SIF(lines):
    SIF = []
    while lines:
        line = lines.pop(0).lstrip()
        if line == '' or line.startswith('#'):
            continue
        if line.startswith('**#'):
            lines.insert(0, line)
            break
        data = line.split(',')
        # pick only columns 0, 4, 5 and
        # convert to appropiate numeric format
        # and append to list for current SIF and step
        SIF.append([int(data[0]), float(data[4]), float(data[5])])
    return SIF

# your global data structure - nested lists
raw = []
mls = []

# read whole file into one list - ok if your data is not large
with open('data') as fptr:
    lines = fptr.readlines()

# global parse routine - call helper function to parse data blocks
while lines:
    line = lines.pop(0)
    if line.startswith('**#'):
        if line.find('Raw SIFs at Crack Propagation Step:') &gt; -1:
            raw.append(parse_SIF(lines))
        if line.find('MLS SIFs at Crack Propagation Step:') &gt; -1:
            mls.append(parse_SIF(lines))

# show results for your example data
from pprint import pprint
for raw_step, mls_step in zip(raw, mls):
    print 'raw:'
    pprint(raw_step)
    print 'mls:'
    pprint(mls_step)
</snippet></ROW><ROW><id>11713555</id><snippet>raw:
[[0, 0.0, 0.0], [1, 8.727065, -0.0008696262], [2, 8.90781, -0.0002548819]]
mls:
[[0, 8.44688, -0.001360875],
 [1, 8.554168, -0.001156931],
 [2, 8.648241, -0.0009755573]]
raw:
[[0, 0.0, 0.0], [1, 9.571022, 0.004770358], [2, 9.693934, -0.009634989]]
mls:
[[0, 9.402031, 0.02097959],
 [1, 9.467541, 0.01443546],
 [2, 9.525021, 0.008554051]]
</snippet></ROW><ROW><id>11713704</id><snippet>project/commons/static/images/logo.png</snippet></ROW><ROW><id>11713704</id><snippet>project/myapp/static/css/myapp.css</snippet></ROW><ROW><id>11713704</id><snippet>../images/logo.png</snippet></ROW><ROW><id>11713846</id><snippet>strip</snippet></ROW><ROW><id>11713846</id><snippet>"abcdefg".strip("facedb")</snippet></ROW><ROW><id>11713846</id><snippet>"g"</snippet></ROW><ROW><id>11713846</id><snippet>t[len(r'c:\website'):] if t.startswith(r'c:\website') else t
</snippet></ROW><ROW><id>11713876</id><snippet>address_parts</snippet></ROW><ROW><id>11713876</id><snippet>## Gather the address components in groups, removing any that are None
address_parts = filter(None, [
    model_obj.address_1,
    model_obj.address_2,
    u', '.join(filter(None, [model_obj.address_city, model_obj.state])),
    model_obj.zip,
])


## In the template, join the address groups
{{ address_parts|join:"&lt;br&gt;" }}
</snippet></ROW><ROW><id>11714135</id><snippet>requests</snippet></ROW><ROW><id>11714135</id><snippet>import requests
from BeautifulSoup import BeautifulSoup as bs
#grab HTML
r = requests.get(r'http://www.amazon.com/s/ref=sr_pg_1?rh=n:172282,k%3adigital%20camera&amp;keywords=digital%20camera&amp;ie=UTF8&amp;qid=1343600585')
html = r.text
#parse the HTML
soup = bs(html)

results= soup.findAll('div', attrs={'class': 'data'})

print results
</snippet></ROW><ROW><id>11714513</id><snippet>[threed(*x) for x in itertools.product(range(1, 3), range(1,3), range(1,3))]
</snippet></ROW><ROW><id>11714513</id><snippet>for</snippet></ROW><ROW><id>11714513</id><snippet>[threed(x, y, z) for x in range(1, 3) for y in range(1,3) for z in range(1,3)]
</snippet></ROW><ROW><id>11714513</id><snippet>__repr__</snippet></ROW><ROW><id>11714513</id><snippet>def __repr__(self):
    return 'threed' + repr(self.lwh)
</snippet></ROW><ROW><id>11714513</id><snippet>[threed(1, 1, 1), threed(1, 1, 2), threed(1, 2, 1), threed(1, 2, 2), 
 threed(2, 1, 1), threed(2, 1, 2), threed(2, 2, 1), threed(2, 2, 2)]
</snippet></ROW><ROW><id>11714513</id><snippet>threed</snippet></ROW><ROW><id>11714513</id><snippet>__eq__</snippet></ROW><ROW><id>11714513</id><snippet>def __eq__(self, other):
    return self.lwh == other.lwh
</snippet></ROW><ROW><id>11714549</id><snippet>lists</snippet></ROW><ROW><id>11714549</id><snippet>*args</snippet></ROW><ROW><id>11714549</id><snippet>get_average</snippet></ROW><ROW><id>11714549</id><snippet>sorted</snippet></ROW><ROW><id>11714549</id><snippet>get_average(lists, average=pkg1.average, get_lengths=pkg2.get_lengths):
    return average(*get_lengths(*lists))

print get_average(([1,2], [10, 4, 5, 6]))
print get_average(([1,2], [10, 4, 5, 6]), get_lengths=adjusted_length)
</snippet></ROW><ROW><id>11714549</id><snippet>class GetAverageContext(object):
    def __init__(self, average=pkg1.average, get_lengths=pkg2.get_lengths):
        self.average = average
        self.get_lengths = get_lengths

DefaultGetAverageContext = GetAverageContext()

def get_average(lists, context=DefaultGetAverageContext):
    return context.average(*context.get_lengths(*lists))
</snippet></ROW><ROW><id>11714635</id><snippet>filter</snippet></ROW><ROW><id>11714635</id><snippet>QuerySet</snippet></ROW><ROW><id>11714635</id><snippet>num_results = User.objects.filter(email = cleaned_info['username']).count()
</snippet></ROW><ROW><id>11714635</id><snippet>num_results = len(user_object)
</snippet></ROW><ROW><id>11714715</id><snippet>ops</snippet></ROW><ROW><id>11714715</id><snippet>set()</snippet></ROW><ROW><id>11714715</id><snippet>prec</snippet></ROW><ROW><id>11714715</id><snippet>dict()</snippet></ROW><ROW><id>11714715</id><snippet>{ "+": 0, "-": 0, "*": 1, "/": 1}</snippet></ROW><ROW><id>11714715</id><snippet>ops</snippet></ROW><ROW><id>11714715</id><snippet>prec</snippet></ROW><ROW><id>11714715</id><snippet>def infix_postfix(tokens):
    output = []
    stack = []
    for item in tokens:
        #pop elements while elements have lower precedence
        if item in ops:
            while stack and prec[stack[-1]] &gt;= prec[item]:
                output.append(stack.pop())
            stack.append(item)
        #delay precedence. append to stack
        elif item == "(":
            stack.append("(")
        #flush output until "(" is reached
        elif item == ")":
            while stack and stack[-1] != "(":
                output.append(stack.pop())
            #should be "("
            print stack.pop()
        #operand. append to output stream
        else:
            output.append(item)
    #flush stack to output
    while stack:
        output.append(stack.pop())
    return output
</snippet></ROW><ROW><id>11714931</id><snippet>from socket import *
import sys

if len(sys.argv) &lt;= 1:
    print 'Usage: "python ProxyServer.py server_ip"\n[server_ip : It is the IP Address of the Proxy Server'
    sys.exit(2)

# Create a server socket, bind it to a port and start listening
tcpSerPort = 8888
tcpSerSock = socket(AF_INET, SOCK_STREAM)

# Prepare a server socket
tcpSerSock.bind(('', tcpSerPort))
tcpSerSock.listen(5)

while True:
    # Start receiving data from the client
    print 'Ready to serve...'
    tcpCliSock, addr = tcpSerSock.accept()
    print 'Received a connection from: ', addr
    message = tcpCliSock.recv(1024)

    # Extract the filename from the given message
    print message.split()[1]
    filename = message.split()[1].partition("/")[2]
    fileExist = "false"
    filetouse = "/" + filename
    try:
        # Check whether the file exists in the cache
        f = open(filetouse[1:], "r")
        outputdata = f.readlines()
        fileExist = "true"
        print 'File Exists!'

        # ProxyServer finds a cache hit and generates a response message
        tcpCliSock.send("HTTP/1.0 200 OK\r\n")
        tcpCliSock.send("Content-Type:text/html\r\n")

        # Send the content of the requested file to the client
        for i in range(0, len(outputdata)):
            tcpCliSock.send(outputdata[i])
        print 'Read from cache'

        # Error handling for file not found in cache
    except IOError:
        print 'File Exist: ', fileExist
        if fileExist == "false":
            # Create a socket on the proxyserver
            print 'Creating socket on proxyserver'
            c = socket(AF_INET, SOCK_STREAM)

            hostn = filename.replace("www.", "", 1)
            print 'Host Name: ', hostn
            try:
                # Connect to the socket to port 80
                c.connect((hostn, 80))
                print 'Socket connected to port 80 of the host'

                # Create a temporary file on this socket and ask port 80
                # for the file requested by the client 
                fileobj = c.makefile('r', 0)
                fileobj.write("GET " + "http://" + filename + " HTTP/1.0\n\n")

                # Read the response into buffer
                buff = fileobj.readlines() 

                # Create a new file in the cache for the requested file.
                # Also send the response in the buffer to client socket
                # and the corresponding file in the cache
                tmpFile = open("./" + filename, "wb")
                for i in range(0, len(buff)):
                    tmpFile.write(buff[i])
                    tcpCliSock.send(buff[i])

            except:
                print 'Illegal request'

        else:
            # HTTP response message for file not found
            # Do stuff here
            print 'File Not Found...Stupid Andy'
            a = 2
    # Close the socket and the server sockets
    tcpCliSock.close()

# Do stuff here
</snippet></ROW><ROW><id>11714936</id><snippet>string</snippet></ROW><ROW><id>11714936</id><snippet>list</snippet></ROW><ROW><id>11714936</id><snippet>a_string = 'This is a string'
</snippet></ROW><ROW><id>11714936</id><snippet>first_four_letters = a_string[:4]
&gt;&gt;&gt; 'This'
</snippet></ROW><ROW><id>11714936</id><snippet>last_five_letters = a_string[-5:]
&gt;&gt;&gt; 'string'
</snippet></ROW><ROW><id>11714936</id><snippet>the_string = '416d76b8811b0ddae2fdad8f4721ddbe|d4f656ee006e248f2f3a8a93a8aec5868788b927|12a5f648928f8e0b5376d2cc07de8e4cbf9f7ccbadb97d898373f85f0a75c47f '
first_32_chars = the_string[:32]
&gt;&gt;&gt; 416d76b8811b0ddae2fdad8f4721ddbe
</snippet></ROW><ROW><id>11715249</id><snippet>__int__</snippet></ROW><ROW><id>11715249</id><snippet>__init__</snippet></ROW><ROW><id>11715314</id><snippet>&gt;&gt;&gt; shared_arr = multiprocessing.RawArray("d",10)
&gt;&gt;&gt; t = np.frombuffer(shared_arr, dtype=float)
&gt;&gt;&gt; t[0] = 2
&gt;&gt;&gt; shared_arr[0]
2.0
</snippet></ROW><ROW><id>11715582</id><snippet>def my_plural(str, end_ptr = None, rep_ptr = ""):
    if end_ptr and str.endswith(end_ptr):
        return str[:-1*len(end_ptr)]+rep_ptr
    else:
        return str+'s'
</snippet></ROW><ROW><id>11715582</id><snippet>environment.filters['myplural'] = my_plural
</snippet></ROW><ROW><id>11715624</id><snippet>_task_names</snippet></ROW><ROW><id>11715624</id><snippet>fab -l</snippet></ROW><ROW><id>11716297</id><snippet>super(Foo, self).__hash__()
</snippet></ROW><ROW><id>11716297</id><snippet>return
  object.__hash__(self)</snippet></ROW><ROW><id>11716592</id><snippet>&gt;&gt;&gt; data = ('ab', [1, 2, 3], 101)
&gt;&gt;&gt; map(type, data)
[&lt;type 'str'&gt;, &lt;type 'list'&gt;, &lt;type 'int'&gt;]
</snippet></ROW><ROW><id>11716592</id><snippet>None</snippet></ROW><ROW><id>11716592</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; [(type(el), len(el) if isinstance(el, collections.Sequence) else None)
     for el in data]
[(&lt;type 'str'&gt;, 2), (&lt;type 'list'&gt;, 3), (&lt;type 'int'&gt;, None)]
</snippet></ROW><ROW><id>11716705</id><snippet>yum install python-setuptools
</snippet></ROW><ROW><id>11716705</id><snippet>easy_install -U bigquery</snippet></ROW><ROW><id>11716736</id><snippet>Multilingual URL Middleware</snippet></ROW><ROW><id>11716792</id><snippet>str.split()</snippet></ROW><ROW><id>11716792</id><snippet>PyArg_ParseTuple()</snippet></ROW><ROW><id>11717385</id><snippet>uwosh.pfg.d2c.content.dataentry</snippet></ROW><ROW><id>11717385</id><snippet>uid_catalog</snippet></ROW><ROW><id>11717385</id><snippet>uwosh.pfg.d2c</snippet></ROW><ROW><id>11717385</id><snippet>bin/instance</snippet></ROW><ROW><id>11717385</id><snippet>uwosh/pfg/d2c/content/dataentry.py</snippet></ROW><ROW><id>11717385</id><snippet>import</snippet></ROW><ROW><id>11717385</id><snippet>from zope.app.component.hooks import getSite
</snippet></ROW><ROW><id>11717385</id><snippet>catalog = getToolByName(self, 'uid_catalog')
</snippet></ROW><ROW><id>11717385</id><snippet>self</snippet></ROW><ROW><id>11717385</id><snippet>getSite()</snippet></ROW><ROW><id>11717385</id><snippet>catalog = getToolByName(getSite(), 'uid_catalog')
</snippet></ROW><ROW><id>11717977</id><snippet>if elif</snippet></ROW><ROW><id>11717977</id><snippet>or</snippet></ROW><ROW><id>11717977</id><snippet>elif</snippet></ROW><ROW><id>11717977</id><snippet>if</snippet></ROW><ROW><id>11717977</id><snippet>False</snippet></ROW><ROW><id>11717977</id><snippet>if stocked.amount &gt;= 15000:
    if supply &gt;= capac:
        supply = capac
        yield put, self, stocked, supply
        S1Vals.append(capac)
     else:
        supply = 0
        yield put, self, stocked, supply
        S1Vals.append(0)
else:
    supply = random.triangular(.70 * xMeet , xMeet , xMeet * 1.05)
    ...
</snippet></ROW><ROW><id>11717977</id><snippet>supply</snippet></ROW><ROW><id>11718113</id><snippet>collective.transmogrifier</snippet></ROW><ROW><id>11718113</id><snippet>zope.component</snippet></ROW><ROW><id>11718113</id><snippet>ConfigParser</snippet></ROW><ROW><id>11718161</id><snippet>%email</snippet></ROW><ROW><id>11718161</id><snippet>%e</snippet></ROW><ROW><id>11718161</id><snippet>%email</snippet></ROW><ROW><id>11718161</id><snippet>In [4]: a = "1.2"

In [5]: print "%s" %a
1.2

In [6]: print "%e" %a
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
C:\Python27\&lt;ipython-input-6-1d66dedeb226&gt; in &lt;module&gt;()
----&gt; 1 print "%e" %a

TypeError: float argument required, not str
</snippet></ROW><ROW><id>11718161</id><snippet>cmd = 'mysql -u %s -p%s -e "UPDATE users SET email = ' %(env.user, dbpasswd) + '%email' + ' WHERE id = 1" %s' %account

run(cmd)
</snippet></ROW><ROW><id>11718161</id><snippet>data = "%email"
run('mysql -u %s -p%s -e "UPDATE users SET email = %s WHERE id = 1" %s' % (env.user, dbpasswd, data, account))
</snippet></ROW><ROW><id>11718179</id><snippet>numpy</snippet></ROW><ROW><id>11718179</id><snippet>matplotlib</snippet></ROW><ROW><id>11718179</id><snippet>import nunmpy as np
import matplotlib.pyplot as plt

data=np.loadtxt("YourFileName.txt", dtype="YourDataType", delimiter=",")
plt.plot(data)
plt.show()    #if you want to see the plot
plt.savefig("PngFile.png")
</snippet></ROW><ROW><id>11718334</id><snippet>class PrivacyForm(forms.Form):
    geburtsdatum=forms.BooleanField()
    strasse=forms.BooleanField()
    plz=forms.BooleanField()
    ort=forms.BooleanField()
    land=forms.BooleanField()
    fon=forms.BooleanField()
</snippet></ROW><ROW><id>11718334</id><snippet> form=PrivacyForm(initial={'geburtsdatum': True,
                           'strasse': True,...})
</snippet></ROW><ROW><id>11718637</id><snippet>    from flask.ext.assets import Environment, Bundle
    assets = Environment(app)
    css_all = Bundle('reset.css','main.css','fonts.css')
    assets.register('css_all',css_all)
</snippet></ROW><ROW><id>11718637</id><snippet>    {% assets %}
    &lt;link rel="stylesheet" href="{{ ASSET_URL }}"&gt;
    {% endassets %}
</snippet></ROW><ROW><id>11718778</id><snippet>import matplotlib as mpl
mpl.use( "agg" )
</snippet></ROW><ROW><id>11718778</id><snippet>Psi = data['Psi']
</snippet></ROW><ROW><id>11718778</id><snippet>PsiPlot.set_data(data['X'], data['Psi'])
</snippet></ROW><ROW><id>11718778</id><snippet>Psi = nparray([])
</snippet></ROW><ROW><id>11718778</id><snippet>Psi = np.concatenate((Psi, data['Psi']))
</snippet></ROW><ROW><id>11718778</id><snippet>global X, Psi, Ec, Ev, n, p
</snippet></ROW><ROW><id>11718778</id><snippet>mencoder</snippet></ROW><ROW><id>11718778</id><snippet>ffmpeg</snippet></ROW><ROW><id>11718778</id><snippet>matplotlib.animation.save()</snippet></ROW><ROW><id>11718778</id><snippet>ffmpeg</snippet></ROW><ROW><id>11718969</id><snippet>&gt;&gt;&gt; import iso8601
&gt;&gt;&gt; iso8601.parse_date("2007-01-25T12:00:00Z")
datetime.datetime(2007, 1, 25, 12, 0, tzinfo=&lt;iso8601.iso8601.Utc ...&gt;)

&gt;&gt;&gt; iso8601.parse_date("2011-08-18T10:29:47+03:00")
datetime.datetime(2011, 8, 18, 10, 29, 47, tzinfo=&lt;FixedOffset '+03:00'&gt;)
</snippet></ROW><ROW><id>11719517</id><snippet>sum</snippet></ROW><ROW><id>11719517</id><snippet>sum((value for key, value in x.iteritems() if key != 'a'), csr_matrix((3, 3)))
</snippet></ROW><ROW><id>11719517</id><snippet>sum</snippet></ROW><ROW><id>11719517</id><snippet>np.sum</snippet></ROW><ROW><id>11719517</id><snippet>np.sum</snippet></ROW><ROW><id>11719517</id><snippet>out</snippet></ROW><ROW><id>11719517</id><snippet>np.sum((value for key, value in x.iteritems() if key != 'a'),
       out=csr_matrix((3, 3)))    # doesn't work
</snippet></ROW><ROW><id>11720206</id><snippet>print u"\u20b9"</snippet></ROW><ROW><id>11720206</id><snippet>u"\u20b9"</snippet></ROW><ROW><id>11720260</id><snippet>lmargin1</snippet></ROW><ROW><id>11720260</id><snippet>lmargin2</snippet></ROW><ROW><id>11720507</id><snippet>GZipFile</snippet></ROW><ROW><id>11720507</id><snippet>buf</snippet></ROW><ROW><id>11720538</id><snippet>subprocess</snippet></ROW><ROW><id>11720538</id><snippet>import subprocess
import shlex
subprocess.call(shlex.split("/bin/bash -c 'grep -w 1 pattern &lt;(tail -f mylogfile.log)'"))
</snippet></ROW><ROW><id>11720538</id><snippet>/bin/bash -c</snippet></ROW><ROW><id>11720538</id><snippet>os.system()</snippet></ROW><ROW><id>11720538</id><snippet>/bin/bash -c</snippet></ROW><ROW><id>11720538</id><snippet>os.system("/bin/bash -c 'grep -w 1 pattern &lt;(tail -f mylogfile.log)'")
</snippet></ROW><ROW><id>11720782</id><snippet>&gt;&gt;&gt; tgt='createNode transform -n "bar1_1" -p "bar11";'
&gt;&gt;&gt; re.search(r'bar1',tgt)
&lt;_sre.SRE_Match object at 0x10045af38&gt;
&gt;&gt;&gt; # matches first 'bar1'...
&gt;&gt;&gt; re.search(r'bar11',tgt)
&lt;_sre.SRE_Match object at 0x10047d030&gt;
&gt;&gt;&gt; # matches 'bar11'...

&gt;&gt;&gt; re.search(r'bar1\b',tgt)            
&gt;&gt;&gt; # no match
</snippet></ROW><ROW><id>11721271</id><snippet>p1 = subprocess.Popen(shlex.split('ls -ltr'), stdout=subprocess.PIPE,
                                              stderr=subprocess.PIPE)
p2 = subprocess.Popen(shlex.split('less'), stdin=p1.stdout)
</snippet></ROW><ROW><id>11721271</id><snippet>less</snippet></ROW><ROW><id>11721369</id><snippet>timeuntil</snippet></ROW><ROW><id>11721369</id><snippet>timesince</snippet></ROW><ROW><id>11721535</id><snippet>class UserProfile(models.Model):
    user = models.OneToOneField(User)
    time_zone = models.whateverField()
    ... add anything else you would like to extend your profile ...
</snippet></ROW><ROW><id>11721535</id><snippet>{{ request.user.userprofile.time_zone }}
</snippet></ROW><ROW><id>11721642</id><snippet>j = Joe()</snippet></ROW><ROW><id>11721642</id><snippet>Joe</snippet></ROW><ROW><id>11721642</id><snippet>type</snippet></ROW><ROW><id>11721642</id><snippet>tp_call</snippet></ROW><ROW><id>11721642</id><snippet>type</snippet></ROW><ROW><id>11721642</id><snippet>type_call</snippet></ROW><ROW><id>11721642</id><snippet>type_call</snippet></ROW><ROW><id>11721642</id><snippet>tp_new</snippet></ROW><ROW><id>11721642</id><snippet>object</snippet></ROW><ROW><id>11721642</id><snippet>object_new</snippet></ROW><ROW><id>11721642</id><snippet>tp_alloc</snippet></ROW><ROW><id>11721642</id><snippet>object_new</snippet></ROW><ROW><id>11721642</id><snippet>PyType_GenericAlloc</snippet></ROW><ROW><id>11721642</id><snippet>PyType_GenericAlloc</snippet></ROW><ROW><id>11721642</id><snippet>type_call</snippet></ROW><ROW><id>11721642</id><snippet>Joe.__init__</snippet></ROW><ROW><id>11721642</id><snippet>Joe</snippet></ROW><ROW><id>11721642</id><snippet>__init__</snippet></ROW><ROW><id>11721642</id><snippet>__init__</snippet></ROW><ROW><id>11721642</id><snippet>object_init</snippet></ROW><ROW><id>11721642</id><snippet>object_init</snippet></ROW><ROW><id>11721642</id><snippet>type_call</snippet></ROW><ROW><id>11721642</id><snippet>j</snippet></ROW><ROW><id>11721780</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; my_list = [4, 'foo', 'close', 9, 0]
&gt;&gt;&gt; with open('test.csv', 'w') as fout:
        w = csv.writer(fout, delimiter=',')
        w.writerow([x if x != 'foo' else ' ' for x in my_list])

&gt;&gt;&gt; print open('test.csv').read()
4, ,close,9,0
</snippet></ROW><ROW><id>11721883</id><snippet>app = Flask(my_app_name)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///C:\\MyBase\\Base.sqlite'
db = SQLAlchemy(app)
</snippet></ROW><ROW><id>11721883</id><snippet>shared</snippet></ROW><ROW><id>11721883</id><snippet>from DataBase.Tables.shared import db

if __name__ == "__main__":
    import DataBase.Tables.Person   # will load Person model into the db
    import DataBase.Tables.Address  # will load Address model into the db
    db.create_all() # will create all models
</snippet></ROW><ROW><id>11722361</id><snippet>pip</snippet></ROW><ROW><id>11722361</id><snippet>easy_install</snippet></ROW><ROW><id>11722361</id><snippet>$ pip freeze &gt; packages.txt</snippet></ROW><ROW><id>11722361</id><snippet>#!/bin/bash

for plugin in $(cat packages.txt); do
    PLUGIN=$(echo "$plugin" | awk -F == '{print }')
    echo "Uninstalling $PLUGIN..."
    expect -c "spawn pip uninstall $PLUGIN
    expect {
        \"Proceed (y/n)?\" {
            send \"y\r\n\"
            expect {
                exit
            }
        }
    }"    
done
</snippet></ROW><ROW><id>11722367</id><snippet>*</snippet></ROW><ROW><id>11722367</id><snippet>*</snippet></ROW><ROW><id>11722367</id><snippet>rm</snippet></ROW><ROW><id>11722367</id><snippet>*</snippet></ROW><ROW><id>11722367</id><snippet>r = envoy.run('sh -c "rm /tmp/my_silly_directory/*"')
</snippet></ROW><ROW><id>11722367</id><snippet>*</snippet></ROW><ROW><id>11722367</id><snippet>rm</snippet></ROW><ROW><id>11722787</id><snippet>def rowCount(self, parent=None):
    return len(self._string_list)
</snippet></ROW><ROW><id>11722890</id><snippet>value[newstr:7]</snippet></ROW><ROW><id>11722890</id><snippet>newstr</snippet></ROW><ROW><id>11722890</id><snippet>7</snippet></ROW><ROW><id>11722890</id><snippet>value[newstr:newstr + 7]</snippet></ROW><ROW><id>11722905</id><snippet>finally</snippet></ROW><ROW><id>11722905</id><snippet>try</snippet></ROW><ROW><id>11722905</id><snippet>try:
    file = open('frobnaz.txt', 'w')
    raise ValueError
finally:
    file.close()
    os.path.remove('frobnaz.txt')
</snippet></ROW><ROW><id>11722905</id><snippet>except</snippet></ROW><ROW><id>11722905</id><snippet>return</snippet></ROW><ROW><id>11722905</id><snippet>def foobar():
    try:
        return
    finally:
        print "finally is executed before we return!"
</snippet></ROW><ROW><id>11722905</id><snippet>try</snippet></ROW><ROW><id>11722905</id><snippet>finally</snippet></ROW><ROW><id>11722905</id><snippet>continue</snippet></ROW><ROW><id>11722905</id><snippet>break</snippet></ROW><ROW><id>11722905</id><snippet>finally</snippet></ROW><ROW><id>11723044</id><snippet>if (1+1==2
  and 2 &lt; 5 &lt; 7
  and 2 != 3):
    print 'yay'
</snippet></ROW><ROW><id>11723260</id><snippet>line.split()</snippet></ROW><ROW><id>11723260</id><snippet>line.split()[::-1]</snippet></ROW><ROW><id>11723260</id><snippet>random.choice</snippet></ROW><ROW><id>11723260</id><snippet>pairs</snippet></ROW><ROW><id>11723328</id><snippet>lambda</snippet></ROW><ROW><id>11723328</id><snippet>x</snippet></ROW><ROW><id>11723328</id><snippet>x</snippet></ROW><ROW><id>11723328</id><snippet>lambda</snippet></ROW><ROW><id>11723328</id><snippet>def main():
    d = {}
    for x in [1,2]:
        d[x] = lambda x=x: print(x)

    d[1]()
    d[2]()


if __name__ == '__main__':
    main()

&gt;&gt;&gt; 
1
2
</snippet></ROW><ROW><id>11723370</id><snippet>def new_user():
    print "in new_user"

def f():
    new_user()
    if True:
        new_user = 23
        print "new_user"

f()
</snippet></ROW><ROW><id>11723370</id><snippet>new_user(request.POST)
</snippet></ROW><ROW><id>11723370</id><snippet>new_user = User(activated = 0, email = cleaned_info['username'], pen_name = cleaned_info['pen_name'], password = cleaned_info['password'])
</snippet></ROW><ROW><id>11723370</id><snippet>new_user_inst = User(activated = 0, email = cleaned_info['username'], pen_name = cleaned_info['pen_name'], password = cleaned_info['password'])
...
</snippet></ROW><ROW><id>11723784</id><snippet>//*[contains(text(), '@domain')]/text()
</snippet></ROW><ROW><id>11723784</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'[\w\.]+@domain\.[\w\.]+', 'this is our info: info@domain.co.uk')
['info@domain.co.uk']
</snippet></ROW><ROW><id>11723784</id><snippet>re</snippet></ROW><ROW><id>11723784</id><snippet>&gt;&gt;&gt; hxs.select('//a[contains(@href, "image")]/text()').re(r'Name:\s*(.*)')
[u'My image 1',
 u'My image 2',
 u'My image 3',
 u'My image 4',
 u'My image 5']
</snippet></ROW><ROW><id>11724781</id><snippet>regexp2 = re.compile(r'&lt;item&gt;.*&lt;/item&gt;', re.DOTALL)
</snippet></ROW><ROW><id>11724819</id><snippet>print "connected"</snippet></ROW><ROW><id>11724892</id><snippet>urllib2</snippet></ROW><ROW><id>11725126</id><snippet>pip</snippet></ROW><ROW><id>11725126</id><snippet>PIL</snippet></ROW><ROW><id>11725126</id><snippet>sudo</snippet></ROW><ROW><id>11725126</id><snippet>pip freeze</snippet></ROW><ROW><id>11725126</id><snippet>PIL</snippet></ROW><ROW><id>11725126</id><snippet>sudo pip install</snippet></ROW><ROW><id>11725126</id><snippet>virtualenv</snippet></ROW><ROW><id>11725126</id><snippet>sudo</snippet></ROW><ROW><id>11725126</id><snippet>pip</snippet></ROW><ROW><id>11725194</id><snippet>nose/plugins/cover.py</snippet></ROW><ROW><id>11725194</id><snippet>def report(self, stream):
    ....
    log.debug("Coverage report will cover modules: %s", modules)
    #self.coverInstance.report(modules, file=stream)
</snippet></ROW><ROW><id>11725210</id><snippet>ftp.storbinary('STOR ' + dest_dir+files, open(Origin_dir+files, "rb"), 1024)</snippet></ROW><ROW><id>11725210</id><snippet>print "uploading files to %s" % Host
with open(Origin_dir+files, "rb") as f:
    ftp.storbinary('STOR ' + dest_dir+files, f, 1024)
ftp.close()
print 'FTP connection has been closed'
</snippet></ROW><ROW><id>11725210</id><snippet>open()</snippet></ROW><ROW><id>11725210</id><snippet>f</snippet></ROW><ROW><id>11725210</id><snippet>ftp.close()</snippet></ROW><ROW><id>11725366</id><snippet>import datetime

from pprint import pprint

data=[['07/11/2012', '09:53:36', 'U', '#0F', '0006E7895B', 'T', 'U\n', '09:53:36'],
      ['07/11/2012', '09:53:37', 'U', '#0F', '0006E7895B', 'T', 'U\n', '09:53:37'],
      ['07/11/2012', '09:53:38', 'U', '#0F', '0006E7895B', 'T', 'U\n', '09:53:38'],
      ['05/13/2012', '09:54:27', 'U', '#0F', '0006E3DADA', 'T', 'U\n', '5031', '09:54:27'],
      ['05/13/2012', '09:54:28', 'U', '#0F', '0006E3DADA', 'T', 'U\n', '5031', '09:54:28'],
      ['05/13/2012', '09:54:29', 'U', '#0F', '0006E3DADA', 'T', 'U\n', '5031', '09:54:29']]

#convert times to datetime objects
for d in data:
    dt = ' '.join( d[0:2] )
    dt = datetime.datetime.strptime(dt,'%m/%d/%Y %H:%M:%S')
    d.append( dt )

newdata = [ data[0] ]
latest_time = newdata[-1][-1]
for d in data[1:]:
    delta = d[-1] - latest_time
    latest_time = d[-1]
    if delta != datetime.timedelta(0, 1):
        newdata.append( d )

pprint(newdata)
</snippet></ROW><ROW><id>11725366</id><snippet>[['07/11/2012',
  '09:53:36',
  'U',
  '#0F',
  '0006E7895B',
  'T',
  'U\n',
  '09:53:36',
  datetime.datetime(2012, 7, 11, 9, 53, 36)],
 ['05/13/2012',
  '09:54:27',
  'U',
  '#0F',
  '0006E3DADA',
  'T',
  'U\n',
  '5031',
  '09:54:27',
  datetime.datetime(2012, 5, 13, 9, 54, 27)]]
</snippet></ROW><ROW><id>11725473</id><snippet>http://example.com/&lt;pagename&gt;/edit
</snippet></ROW><ROW><id>11725473</id><snippet>^(?P&lt;page_name&gt;[\w]+)$</snippet></ROW><ROW><id>11725473</id><snippet>^_edit/(?P&lt;page_name&gt;[\w]+)$</snippet></ROW><ROW><id>11725473</id><snippet>^(?P&lt;page_name&gt;[\w]+)/edit$</snippet></ROW><ROW><id>11725473</id><snippet>url(r'^(?P&lt;page_name&gt;[\w]+)$', views.page)
url(r'^_edit/(?P&lt;page_name&gt;[\w]+)$', views.edit)
</snippet></ROW><ROW><id>11725473</id><snippet>\w</snippet></ROW><ROW><id>11725537</id><snippet>def sb(b):
    return (b * 0x0202020202 &amp; 0x010884422010) % 1023

def harness(i):
    print '{:4}: {} -&gt; {}'.format(i,bin(i)[2:].zfill(8),bin(sb(i))[2:].zfill(8))    

for i in range(256):
    harness(i)
</snippet></ROW><ROW><id>11725537</id><snippet>   0: 00000000 -&gt; 00000000
   1: 00000001 -&gt; 10000000
   2: 00000010 -&gt; 01000000
   3: 00000011 -&gt; 11000000
   4: 00000100 -&gt; 00100000
   5: 00000101 -&gt; 10100000
   6: 00000110 -&gt; 01100000
   ...
 248: 11111000 -&gt; 00011111
 249: 11111001 -&gt; 10011111
 250: 11111010 -&gt; 01011111
 251: 11111011 -&gt; 11011111
 252: 11111100 -&gt; 00111111
 253: 11111101 -&gt; 10111111
 254: 11111110 -&gt; 01111111
 255: 11111111 -&gt; 11111111
</snippet></ROW><ROW><id>11725537</id><snippet>&gt;&gt;&gt; w=32
&gt;&gt;&gt; s=bin(1234567)[2:].zfill(w)
&gt;&gt;&gt; rb=s[::-1]
&gt;&gt;&gt; s
'00000000000100101101011010000111'
&gt;&gt;&gt; rb
'11100001011010110100100000000000'
</snippet></ROW><ROW><id>11725537</id><snippet>int(rb,2)
</snippet></ROW><ROW><id>11725633</id><snippet>asyncore</snippet></ROW><ROW><id>11725777</id><snippet>is_alive()</snippet></ROW><ROW><id>11725777</id><snippet>threading.enumerate()</snippet></ROW><ROW><id>11725863</id><snippet>os.chroot</snippet></ROW><ROW><id>11725863</id><snippet>os.close</snippet></ROW><ROW><id>11725863</id><snippet>/bin</snippet></ROW><ROW><id>11725863</id><snippet>/lib</snippet></ROW><ROW><id>11725863</id><snippet>exec code in mynamespace</snippet></ROW><ROW><id>11725863</id><snippet>mynamespace</snippet></ROW><ROW><id>11725863</id><snippet>import</snippet></ROW><ROW><id>11725863</id><snippet>__import__</snippet></ROW><ROW><id>11725916</id><snippet>class E(A, E1, E2):
    ...
</snippet></ROW><ROW><id>11725916</id><snippet>E = type("E", (A, E1, E2), {})
</snippet></ROW><ROW><id>11725971</id><snippet> if not homeword in homeworlds:
    homeworlds[homeword] = list()
 homeworlds[homeword].append(person)
</snippet></ROW><ROW><id>11726404</id><snippet>body</snippet></ROW><ROW><id>11726404</id><snippet>import numpy as np
my_array = np.zeros((int(sp)-i,5),dtype=int)
for ii in range(i,int(sp)):
    body=(np.bincount(un[i].ravel().astype('int'), weights=step_periods[i].ravel())) 
    my_array[ii,:len(body)]=body 
</snippet></ROW><ROW><id>11726405</id><snippet>input_file.seek(0)</snippet></ROW><ROW><id>11726405</id><snippet>with open('filename.ext') as input_file:
    for i, line in enumerate(input_file):
        print line,
print "{0} line(s) printed".format(i+1)
</snippet></ROW><ROW><id>11726405</id><snippet>__enter__</snippet></ROW><ROW><id>11726405</id><snippet>__exit__</snippet></ROW><ROW><id>11726405</id><snippet>with</snippet></ROW><ROW><id>11726405</id><snippet>input_file = open('filename.txt')
try:
    for i, line in enumerate(input_file):
        print line,
finally:
    input_file.close()
print "{0} line(s) printed".format(i+1)
</snippet></ROW><ROW><id>11726596</id><snippet>"MyProject"</snippet></ROW><ROW><id>11726596</id><snippet>fab deploy:MyProject
</snippet></ROW><ROW><id>11726596</id><snippet>fabfile.py</snippet></ROW><ROW><id>11726596</id><snippet>def deploy(project):
    ...
</snippet></ROW><ROW><id>11726596</id><snippet>project</snippet></ROW><ROW><id>11726596</id><snippet>"MyProject"</snippet></ROW><ROW><id>11726613</id><snippet>def test_fun(self,arg):
</snippet></ROW><ROW><id>11726613</id><snippet>@staticmethod
def test_fun(arg):
</snippet></ROW><ROW><id>11726715</id><snippet>sudo pip install https://bitbucket.org/david/django-storages/get/def732408163.zip
</snippet></ROW><ROW><id>11726792</id><snippet>def foo(return_2nd=False):

    x = 2
    y = 2
    return (x+y) if not return_2nd else (x+y),(x-y)
</snippet></ROW><ROW><id>11726792</id><snippet>sum, diff = foo(True)
sum = foo() #old calls still just get sum
</snippet></ROW><ROW><id>11726910</id><snippet>[build]
compiler=mingw32
</snippet></ROW><ROW><id>11727032</id><snippet>easy_install</snippet></ROW><ROW><id>11727032</id><snippet>http_proxy</snippet></ROW><ROW><id>11727032</id><snippet>set http_proxy=http://proxy.myproxy.com
easy_install pip
</snippet></ROW><ROW><id>11727032</id><snippet>pip install --proxy="user:password@server:port" packagename
</snippet></ROW><ROW><id>11727096</id><snippet>import multiprocessing as mp
import copy_reg
import types

def _pickle_method(method):
    # Author: Steven Bethard
    # http://bytes.com/topic/python/answers/552476-why-cant-you-pickle-instancemethods
    func_name = method.im_func.__name__
    obj = method.im_self
    cls = method.im_class
    cls_name = ''
    if func_name.startswith('__') and not func_name.endswith('__'):
        cls_name = cls.__name__.lstrip('_')
    if cls_name:
        func_name = '_' + cls_name + func_name
    return _unpickle_method, (func_name, obj, cls)

def _unpickle_method(func_name, obj, cls):
    # Author: Steven Bethard
    # http://bytes.com/topic/python/answers/552476-why-cant-you-pickle-instancemethods
    for cls in cls.mro():
        try:
            func = cls.__dict__[func_name]
        except KeyError:
            pass
        else:
            break
    return func.__get__(obj, cls)

# This call to copy_reg.pickle allows you to pass methods as the first arg to
# mp.Pool methods. If you comment out this line, `pool.map(self.foo, ...)` results in
# PicklingError: Can't pickle &lt;type 'instancemethod'&gt;: attribute lookup
# __builtin__.instancemethod failed

copy_reg.pickle(types.MethodType, _pickle_method, _unpickle_method)

class MyClass(object):

    def __init__(self):
        self.my_args = [1,2,3,4]
        self.output  = {}

    def my_single_function(self, arg):
        return arg**2

    def my_parallelized_function(self):
        # Use map or map_async to map my_single_function onto the
        # list of self.my_args, and append the return values into
        # self.output, using each arg in my_args as the key.

        # The result should make self.output become
        # {1:1, 2:4, 3:9, 4:16}
        self.output = dict(zip(self.my_args,
                               pool.map(self.my_single_function, self.my_args)))
</snippet></ROW><ROW><id>11727096</id><snippet>pool = mp.Pool()   
foo = MyClass()
foo.my_parallelized_function()
</snippet></ROW><ROW><id>11727096</id><snippet>print foo.output
# {1: 1, 2: 4, 3: 9, 4: 16}
</snippet></ROW><ROW><id>11727390</id><snippet>if any(word in data for word in ('word1', 'word2', 'word3')):
    ...
</snippet></ROW><ROW><id>11727390</id><snippet>data</snippet></ROW><ROW><id>11727390</id><snippet>set</snippet></ROW><ROW><id>11727577</id><snippet>chr(1)</snippet></ROW><ROW><id>11727577</id><snippet>"\x01"</snippet></ROW><ROW><id>11727577</id><snippet>"\001"</snippet></ROW><ROW><id>11727577</id><snippet>chr(1)</snippet></ROW><ROW><id>11727577</id><snippet>str(chr(1))</snippet></ROW><ROW><id>11727577</id><snippet>"\001"</snippet></ROW><ROW><id>11727577</id><snippet>chr(1)</snippet></ROW><ROW><id>11727577</id><snippet>\001</snippet></ROW><ROW><id>11727577</id><snippet>\S*</snippet></ROW><ROW><id>11727577</id><snippet>\001</snippet></ROW><ROW><id>11727577</id><snippet>\S*</snippet></ROW><ROW><id>11727577</id><snippet>\S*?</snippet></ROW><ROW><id>11727577</id><snippet>\t</snippet></ROW><ROW><id>11727577</id><snippet>\n</snippet></ROW><ROW><id>11727577</id><snippet>\s</snippet></ROW><ROW><id>11727577</id><snippet>"\001"</snippet></ROW><ROW><id>11727577</id><snippet>timeExp</snippet></ROW><ROW><id>11727577</id><snippet>\001</snippet></ROW><ROW><id>11727698</id><snippet>f1 = open('fileInput', 'r')
f2 = open('fileInput+".tmp"', 'w')
for line in f1:
    if line[:-1].endswith("invalid"):
        f2.write("\t".join(line.split("\t")[:2] + ["reviewed", "rd"]) + "\n")
    else:
        f2.write(line)
f1.close()
f2.close()
</snippet></ROW><ROW><id>11727896</id><snippet>urllib2.Request</snippet></ROW><ROW><id>11727896</id><snippet>urllib2.Request.get_data()</snippet></ROW><ROW><id>11727896</id><snippet>req = urllib2.Request("http://example.com/", "foo:bar")
print req.get_method()    # =&gt; 'POST'
print req.get_data()      # =&gt; 'foo:bar'

res = urllib2.urlopen(req)
print res.getcode()       # =&gt; 200
print res.headers.items() # =&gt; [('transfer-encoding', 'chunked'), ...
</snippet></ROW><ROW><id>11728072</id><snippet>&gt;&gt;&gt; 1 - stats.chi2.cdf(3.84, 1)
0.050043521248705147
</snippet></ROW><ROW><id>11728243</id><snippet>len</snippet></ROW><ROW><id>11728243</id><snippet>len(mystring)</snippet></ROW><ROW><id>11728243</id><snippet> for character in line2:
     print character
</snippet></ROW><ROW><id>11728243</id><snippet> for i,character in enumerate(line2):
     print i,character
</snippet></ROW><ROW><id>11728243</id><snippet>tokenizer = line.replace('-',' ').split()[4]
idx = line.index(tokenizer)
count = line[:idx].count('-')
</snippet></ROW><ROW><id>11728457</id><snippet>&lt;!-- JavaScript --&gt;
&lt;script src="jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
function toPython(usrdata){
    $.ajax({
        url: "http://yoursite.com:8080",
        type: "POST",
        data: { information : "You have a very nice website, sir." , userdata : usrdata },
        dataType: "json",
        success: function(data) {
            &lt;!-- do something here --&gt;
            $('#somediv').html(data);
        }});
$("#someButton").bind('click', toPython(something));
&lt;/script&gt;
</snippet></ROW><ROW><id>11728457</id><snippet># Python and Gevent
from gevent.pywsgi import WSGIServer
from gevent import monkey
monkey.patch_all() # makes many blocking calls asynchronous

def application(environ, start_response):
    if environ["REQUEST_METHOD"]!="POST": # your JS uses post, so if it isn't post, it isn't you
        start_response("403 Forbidden", [("Content-Type", "text/html; charset=utf-8")])
        return "403 Forbidden"
    start_response("200 OK", [("Content-Type", "text/html; charset=utf-8")])
    r = environ["wsgi.input"].read() # get the post data
    return r

address = "youraddresshere", 8080
server = WSGIServer(address, application)
server.backlog = 256
server.serve_forever()
</snippet></ROW><ROW><id>11728457</id><snippet>global d
d = someClass()
def application(environ, start_response):
    # get the instruction
    password = somethingfromwsgi # read the tutorials on WSGI to get the post stuff
    # figure out WHAT to do
    global d
    success = d.doSomething()
    # or success = funccall()
    prog = pexpect.spawn('python someprogram.py')
    prog.expect("Password: ")
    prog.sendline(password)
    i = prog.expect(["OK","not OK", "error"])
    if i==0:
        start_response("200 OK", [("Content-Type", "text/html; charset=utf-8")])
        return "Success"
    elif i==1:
        start_response("500 Internal Server Error", [("Content-Type", "text/html; charset=utf-8")])
        return "Failure"
    elif i==2:
        start_response("500 Internal Server Error", [("Content-Type", "text/html; charset=utf-8")])
        return "Error"
</snippet></ROW><ROW><id>11728497</id><snippet>cartesian</snippet></ROW><ROW><id>11728497</id><snippet>np.indices</snippet></ROW><ROW><id>11728497</id><snippet>X</snippet></ROW><ROW><id>11728497</id><snippet>import numpy as np
def polynomial_features(x, order):
    x = np.asarray(x).T[np.newaxis]
    n = x.shape[1]
    power_matrix = np.tile(np.arange(order + 1), (n, 1)).T[..., np.newaxis]
    X = np.power(x, power_matrix)
    I = np.indices((order + 1, ) * n).reshape((n, (order + 1) ** n)).T
    F = np.product(np.diagonal(X[I], 0, 1, 2), axis=2)
    return F.T
</snippet></ROW><ROW><id>11728666</id><snippet>select</snippet></ROW><ROW><id>11728666</id><snippet>r, w, x = select.select([output], [], [], timeout)
</snippet></ROW><ROW><id>11728666</id><snippet>output.read()</snippet></ROW><ROW><id>11728666</id><snippet>os.read</snippet></ROW><ROW><id>11728734</id><snippet>&gt;&gt;&gt; all(a != b for a, b in itertools.combinations(['a', 'b', 'c', 'd', 'a'], 2))
False
&gt;&gt;&gt; all(a != b for a, b in itertools.combinations(['a', 'b', 'c', 'd'], 2))
True
</snippet></ROW><ROW><id>11728972</id><snippet>import sys
sys.stdout.flush()
</snippet></ROW><ROW><id>11728999</id><snippet>wrapped</snippet></ROW><ROW><id>11728999</id><snippet>wrapper</snippet></ROW><ROW><id>11728999</id><snippet>nonlocal</snippet></ROW><ROW><id>11728999</id><snippet>delay</snippet></ROW><ROW><id>11728999</id><snippet>wrapped</snippet></ROW><ROW><id>11728999</id><snippet>retry</snippet></ROW><ROW><id>11728999</id><snippet>delay_lst = [delay]</snippet></ROW><ROW><id>11728999</id><snippet>delay_lst[0]</snippet></ROW><ROW><id>11728999</id><snippet>wrapped</snippet></ROW><ROW><id>11728999</id><snippet>delay</snippet></ROW><ROW><id>11729128</id><snippet>subprocess</snippet></ROW><ROW><id>11729128</id><snippet>os.rename(fileInput + '.tmp', fileInput)
</snippet></ROW><ROW><id>11729128</id><snippet>rm</snippet></ROW><ROW><id>11729128</id><snippet>rm</snippet></ROW><ROW><id>11729128</id><snippet>mv</snippet></ROW><ROW><id>11729128</id><snippet>mv</snippet></ROW><ROW><id>11729128</id><snippet>os.rename()</snippet></ROW><ROW><id>11729128</id><snippet>import shutil

shutil.move(src, dst)
</snippet></ROW><ROW><id>11729198</id><snippet>def getBlocks(filepath):
    with open(filepath) as f:
        blocks = []
        go = False
        for line in f:
            if line.strip() == startDelimiter:
                block = ''
                go = True
            if go:
                block += line
            if line.strip() == endDelimiter:
                blocks.append(block)
                block = ''
                go = False
        if block:
            blocks.append(block)
    return blocks
</snippet></ROW><ROW><id>11729410</id><snippet>def get_absolute_url(self):
    return "/event/%d" % self.id
</snippet></ROW><ROW><id>11729668</id><snippet>cmd.exe /c YourCmdFile &lt; nul</snippet></ROW><ROW><id>11729668</id><snippet>YourCmdFile</snippet></ROW><ROW><id>11729709</id><snippet>myspline.ev(xI, yI)</snippet></ROW><ROW><id>11729727</id><snippet>def get_new_index(string, char_index):
    chars = 0
    for i, char in enumerate(string):
        if char != '-':
            chars += 1
        if char_index == chars:
            return i+1
</snippet></ROW><ROW><id>11729727</id><snippet>import re

def get(st, char_index):
    chars = -1
    for i, char in enumerate(st):
        if char != '-':
            chars += 1
        if char_index == chars:
            return i

def test():
    st = '---------------LL---NE--HVKTHTEEK---PF-ICTVCR-KS----------'
    initial = re.sub('-', '', st)
    for i, char in enumerate(initial):
        print i, char, st[get_1_indexed(st, i)]

def get_1_indexed(st, char_index):
    return 1 + get(st, char_index - 1)

def test_1_indexed():
    st = '---------------LL---NE--HVKTHTEEK---PF-ICTVCR-KS----------'
    initial = re.sub('-', '', st)
    for i, char in enumerate(initial):
        print i+1, char, st[get_1_indexed(st, i + 1) - 1]
</snippet></ROW><ROW><id>11730030</id><snippet>print'Personal information, journal and more to come'
while True:
    x = raw_input()
    if x =="personal information": 
        print' Edward , Height: 5,10 , EYES: brown , STATE: IL TOWN:  , SS:'
    elif x =="journal":
        read = open('C:\\python\\foo.txt' , 'r')
        name = read.readline()
        print (name)
    else:
        break
</snippet></ROW><ROW><id>11730059</id><snippet>import urlparse
from urllib2 import urlopen
from urllib import urlretrieve
from BeautifulSoup import BeautifulSoup as bs
import requests

def getImages(url):
    #Download the images
    r = requests.get(url)
    html = r.text
    soup = bs(html)
    output_folder = '~/amazon'
    #extracting the images that in div(s)
    for div in soup.findAll('div', attrs={'class':'image'}):
        modified_file_name = None
        try:
            #getting the data div using findNext
            nextDiv =  div.findNext('div', attrs={'class':'data'})
            #use findNext again on previous object to get to the anchor tag
            fileName = nextDiv.findNext('a').text
            modified_file_name = fileName.replace(' ','-') + '.jpg'
        except TypeError:
            print 'skip'
        imageUrl = div.find('img')['src']
        outputPath = os.path.join(output_folder, modified_file_name)
        urlretrieve(imageUrl, outputPath)

if __name__=='__main__':
    url = r'http://www.amazon.com/s/ref=sr_pg_1?rh=n%3A172282%2Ck%3Adigital+camera&amp;keywords=digital+camera&amp;ie=UTF8&amp;qid=1343600585'
    getImages(url)
</snippet></ROW><ROW><id>11730243</id><snippet>"example.com"</snippet></ROW><ROW><id>11730243</id><snippet>c40</snippet></ROW><ROW><id>11730261</id><snippet>def index_slice(arr1, arr2):
    lens = np.abs(arr1 - arr2)
    if not all((lens == max(lens)) | (lens == 0)):
        raise ValueError('The number of indices in some dimensions were inconsistent. Array lengths were %r' % lens)

    max_len = lens.max()
    result = np.empty((len(lens), max_len), dtype=np.int32)

    for dim, (a, b) in enumerate(zip(arr1, arr2)):
        if a == b:
            result[dim, :] = a
        elif a &gt; b:
            result[dim, :] = np.arange(a, b, -1)
        else:
            result[dim, :] = np.arange(a, b)

    return result   
</snippet></ROW><ROW><id>11730261</id><snippet>&gt;&gt;&gt; ind1 = np.array([2, 6])
&gt;&gt;&gt; ind2 = np.array([2, 3])
&gt;&gt;&gt; print index_slice(ind1, ind2)
[[2 2 2]
 [6 5 4]]


&gt;&gt;&gt; ind1 = np.array([2, 6, 1])
&gt;&gt;&gt; ind2 = np.array([2, 3, 4])
&gt;&gt;&gt; print index_slice(ind1, ind2)
[[2 2 2]
 [6 5 4]
 [1 2 3]]
</snippet></ROW><ROW><id>11730376</id><snippet>with open(r"filename.txt", "r") as f:
    mylist = [line for line in f]
</snippet></ROW><ROW><id>11730376</id><snippet>with open(r"filename.txt", "r") as f:
    mylist = [name for name in line.split("\t") for line in f]
</snippet></ROW><ROW><id>11730376</id><snippet>with open(r"filename.txt", "r") as f:
    mylist = f.read().split("\r")
</snippet></ROW><ROW><id>11730376</id><snippet>\r</snippet></ROW><ROW><id>11730423</id><snippet>import urllib2
import json


data = {"text": "Hello world github/linguist#1 **cool**, and #1!"}
json_data = json.dumps(data)

req = urllib2.Request("https://api.github.com/markdown")
result = urllib2.urlopen(req, json_data)

print '\n'.join(result.readlines())
</snippet></ROW><ROW><id>11730539</id><snippet>config.py</snippet></ROW><ROW><id>11730539</id><snippet>#config.py

import sys

from common_config import *

if sys.platform == 'darwin':
    from mac_config import *
elif sys.platform == 'win32':
    from win32_config import *
else:
    from linux_config import *
</snippet></ROW><ROW><id>11730539</id><snippet>import</snippet></ROW><ROW><id>11730539</id><snippet>try... except ImportError:</snippet></ROW><ROW><id>11730686</id><snippet>def get_smallest_length(x):
    return [k for k in x.keys() if len(x.get(k))==min([len(n) for n in x.values()])]

def get_largest_sum(x):
    return [k for k in x.keys() if sum(x.get(k))==max([sum(n) for n in x.values()])]

x = {'a': [4, 2], 'c': [4, 3], 'b': [3, 4], 'e': [4], 'd': [4, 3], 'g': [4], 'f': [4]}

print get_smallest_length(x)
print get_largest_sum(x)
</snippet></ROW><ROW><id>11730686</id><snippet>['e', 'g', 'f']
['c', 'b', 'd']
</snippet></ROW><ROW><id>11730887</id><snippet>if a:
    if b:
        if c:
            foo()
        else:
            # error 3
     else:
         # error 2
else:
    # error 1
</snippet></ROW><ROW><id>11730887</id><snippet>if not a:
    # raise an exception

if not b:
    # raise an exception

if not c:
    # raise an exception

# If we get here, everything is OK.
foo()
</snippet></ROW><ROW><id>11731036</id><snippet>for line in file:
    line = line.rstrip('\n')
</snippet></ROW><ROW><id>11731036</id><snippet>fOut.write(line.rstrip('\n') + ' | new position =' + str(newPosition))
</snippet></ROW><ROW><id>11731055</id><snippet>python-apt</snippet></ROW><ROW><id>11731055</id><snippet>from apt.debfile import DebPackage
from pprint import pprint
pkg = DebPackage('/tmp/wajig_2.7_all.deb')
pprint(pkg.filelist)
</snippet></ROW><ROW><id>11731055</id><snippet>$ ./script.py
['./',
 'etc/',
 'etc/bash_completion.d/',
 ...
 'usr/bin/',
 'usr/bin/wajig']
</snippet></ROW><ROW><id>11731089</id><snippet>&gt;&gt;&gt; from numpy import arange, sin
&gt;&gt;&gt; t = arange(5)
&gt;&gt;&gt; t
array([0, 1, 2, 3, 4])
&gt;&gt;&gt; y = sin(t)
&gt;&gt;&gt; y
array([ 0.        ,  0.84147098,  0.90929743,  0.14112001, -0.7568025 ])
</snippet></ROW><ROW><id>11731089</id><snippet>&gt;&gt;&gt; y &gt; 0.8
array([False,  True,  True, False, False], dtype=bool)
</snippet></ROW><ROW><id>11731089</id><snippet>t</snippet></ROW><ROW><id>11731089</id><snippet>y</snippet></ROW><ROW><id>11731089</id><snippet>&gt;&gt;&gt; t[y &gt; 0.8]
array([1, 2])
&gt;&gt;&gt; y[y &gt; 0.8]
array([ 0.84147098,  0.90929743])
</snippet></ROW><ROW><id>11731089</id><snippet>len</snippet></ROW><ROW><id>11731208</id><snippet>def check_authorization(f):
    def wrapper(*args):
        print args[0].url
        return f(*args)
    return wrapper

class Client(object):
    def __init__(self, url):
        self.url = url

    @check_authorization
    def get(self):
        print 'get'

&gt;&gt;&gt; Client('http://www.google.com').get()
http://www.google.com
get
</snippet></ROW><ROW><id>11731208</id><snippet>getattr</snippet></ROW><ROW><id>11731208</id><snippet>def check_authorization(attribute):
    def _check_authorization(f):
        def wrapper(self, *args):
            print getattr(self, attribute)
            return f(self, *args)
        return wrapper
    return _check_authorization
</snippet></ROW><ROW><id>11731296</id><snippet>Element.find</snippet></ROW><ROW><id>11731296</id><snippet>def find(self, path, namespaces=None):
    return ElementPath.find(self, path, namespaces)
</snippet></ROW><ROW><id>11731296</id><snippet>ElementPath</snippet></ROW><ROW><id>11731296</id><snippet>try:
    from . import ElementPath
except ImportError:
    ElementPath = _SimpleElementPath()
</snippet></ROW><ROW><id>11731296</id><snippet>_SimpleElementPath</snippet></ROW><ROW><id>11731296</id><snippet># emulate pre-1.2 find/findtext/findall behaviour
def find(self, element, tag, namespaces=None):
    for elem in element:
        if elem.tag == tag:
            return elem
    return None
</snippet></ROW><ROW><id>11731296</id><snippet># limited xpath support for element trees
</snippet></ROW><ROW><id>11731296</id><snippet>find</snippet></ROW><ROW><id>11731554</id><snippet>{'someFileName.jpg' : {'forecolor': [2,3,5,5,6],'edge': [2,4,5],'texture':[5,4,3]}}
</snippet></ROW><ROW><id>11731554</id><snippet>{('someFileName.jpg', 'forecolor'): [2,3,5,5,6],
 ('someFileName.jpg', 'edge'): [2,4,5],
 ('someFileName.jpg', 'texture'):[5,4,3]}
</snippet></ROW><ROW><id>11731554</id><snippet>from itertools import product

# pair info for each image with info of every image from another dictionary
for (fn1, d1), (fn2,d2) in product(dict1.iteritems(), dict2.iteritems()):
    for property_, list_value in d1.iteritems():
        compute_cosine_similarity(list_value, d2[property_])
</snippet></ROW><ROW><id>11731554</id><snippet>from itertools import product

# pair info for each image with info of every image from another dictionary
for (fn1,lst1), (fn2,lst2) in product(dict1.iteritems(), dict2.iteritems()):
    # assume all lists has the same order of elements
    for string_value1, string_value2 in zip(lst1, lst2):
        compute(string_value1, string_value2)
</snippet></ROW><ROW><id>11731554</id><snippet>cosinLamba</snippet></ROW><ROW><id>11731554</id><snippet>from collections import namedtuple
import numpy as np

Info = namedtuple('Info', 'forecolor edge texture')

dict1 = {'someFileName.jpg': Info(np.array([...], dtype=np.uint8),
                                  np.array([...], dtype=np.uint8),
                                  np.array([...], dtype=np.uint8))}
</snippet></ROW><ROW><id>11731566</id><snippet>&gt;&gt;&gt; d = {'a': [4, 2], 'b': [3, 4], 'c': [4, 3], 'd': [4, 3], 'e': [4], 'f': [4], 'g': [4]}
&gt;&gt;&gt; smallest = min(d, key=lambda k: len(d[k]))
&gt;&gt;&gt; d[smallest].append(2)
&gt;&gt;&gt; d
{'a': [4, 2], 'c': [4, 3], 'b': [3, 4], 'e': [4, 2], 'd': [4, 3], 'g': [4], 'f': [4]}
</snippet></ROW><ROW><id>11731649</id><snippet>Counter</snippet></ROW><ROW><id>11731649</id><snippet>dict</snippet></ROW><ROW><id>11731649</id><snippet>dict</snippet></ROW><ROW><id>11731649</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; tp = {1:Counter({u'x':1, u'b':1, u'H':3}),2:Counter({u'j':1, u'm':4, u'e':2})}
&gt;&gt;&gt; dict((k, dict(v)) for k, v in tp.iteritems())
{1: {u'x': 1, u'b': 1, u'H': 3}, 2: {u'e': 2, u'j': 1, u'm': 4}}
</snippet></ROW><ROW><id>11731649</id><snippet>{k: dict(v) for k, v in tp.iteritems()}
</snippet></ROW><ROW><id>11731649</id><snippet>for w, c in tp[1].iteritems():
    print w, c
</snippet></ROW><ROW><id>11731850</id><snippet>IOError: [Errno socket error] [Errno -2] Name or service not known
</snippet></ROW><ROW><id>11731850</id><snippet>urllib</snippet></ROW><ROW><id>11731850</id><snippet>urllib2</snippet></ROW><ROW><id>11731850</id><snippet>urllib</snippet></ROW><ROW><id>11731850</id><snippet>http_proxy=http://proxy:1234 python grib_get.py
</snippet></ROW><ROW><id>11731850</id><snippet>griburl='http://140.90.33.62/cgi-bin/filter_gfs_hd.pl?'
</snippet></ROW><ROW><id>11731883</id><snippet>setRowCount()</snippet></ROW><ROW><id>11731883</id><snippet>setColumnCount()</snippet></ROW><ROW><id>11731883</id><snippet>QTableWidget</snippet></ROW><ROW><id>11731883</id><snippet>...
self.table = QtGui.QTableWidget()
self.table.setRowCount(5)
self.table.setColumnCount(5)
layout.addWidget(self.led, 0, 0)
layout.addWidget(self.table, 1, 0)
self.table.setItem(1, 0, QtGui.QTableWidgetItem(self.led.text()))
...
</snippet></ROW><ROW><id>11731883</id><snippet>QTableWidget</snippet></ROW><ROW><id>11731883</id><snippet>QTableWidget</snippet></ROW><ROW><id>11732149</id><snippet>lst=[(11, "Jenny"),(8, "Adam"),(10, "Mark"),(8, "Ada")]
lst.sort(key=lambda x: (-x[0],len(x[1])) )
print (lst) # [(11, 'Jenny'), (10, 'Mark'), (8, 'Ada'), (8, 'Adam')]
</snippet></ROW><ROW><id>11732149</id><snippet>sort</snippet></ROW><ROW><id>11732149</id><snippet>sorted</snippet></ROW><ROW><id>11732149</id><snippet>key</snippet></ROW><ROW><id>11732149</id><snippet>key</snippet></ROW><ROW><id>11732149</id><snippet>lambda</snippet></ROW><ROW><id>11732149</id><snippet>first_element, lenth_of_second_element</snippet></ROW><ROW><id>11732149</id><snippet>(1,2,3,4) &gt; (1,2,3,3) #True
</snippet></ROW><ROW><id>11732149</id><snippet>lst.sort(key=lambda x:len(x[1]))  #sort by length of names
lst.sort(key=lambda x:x[0], reversed=True) #sort by score (highest first instead of regular lowest first)
</snippet></ROW><ROW><id>11732347</id><snippet>&gt;&gt;&gt; [] == False
False
&gt;&gt;&gt; bool([]) == False
True
&gt;&gt;&gt; {} == False
False
&gt;&gt;&gt; bool({}) == False
True
</snippet></ROW><ROW><id>11732347</id><snippet>if</snippet></ROW><ROW><id>11732347</id><snippet>if</snippet></ROW><ROW><id>11732347</id><snippet>if someList</snippet></ROW><ROW><id>11732347</id><snippet>if bool(someList)</snippet></ROW><ROW><id>11732347</id><snippet>not foo</snippet></ROW><ROW><id>11732347</id><snippet>not []</snippet></ROW><ROW><id>11732359</id><snippet>telnet smtp.live.com 587</snippet></ROW><ROW><id>11732359</id><snippet>$ telnet smtp.live.com 587
Trying 65.55.96.11...
Connected to smtp.hot.glbdns.microsoft.com.
Escape character is '^]'.
220 BLU0-SMTP406.phx.gbl Microsoft ESMTP MAIL Service, Version: 6.0.3790.4675 ready at  Mon, 30 Jul 2012 19:37:46 -0700 
</snippet></ROW><ROW><id>11732442</id><snippet>flist = open("filename.txt").readlines()

parsing = False
for line in flist:
    if line.startswith("\t**** Report 1"):
        parsing = True
    elif line.startswith("\t**** Report 2"):
        parsing = False
    if parsing:
        #Do stuff with data 
</snippet></ROW><ROW><id>11732442</id><snippet>if parsing</snippet></ROW><ROW><id>11732442</id><snippet>flist = open("filename.txt").readlines()

parsing = False
for line in flist:

    if line.startswith("\t**** Report 2"):
        parsing = False
    if parsing:
        #Do stuff with data 
    if line.startswith("\t**** Report 1"):
        parsing = True
</snippet></ROW><ROW><id>11732500</id><snippet>while True: #infinite loop
   ipt = raw_input(' Enter a number: ')
   try:
      ipt = int(ipt)
      break  #got an integer -- break from this infinite loop.
   except ValueError:  #uh-oh, didn't get an integer, better try again.
      print ("integers are numbers ... didn't you know? Try again ...")
</snippet></ROW><ROW><id>11732500</id><snippet>.lower()</snippet></ROW><ROW><id>11732500</id><snippet>if answer.lower() == "this is a lower case string":
   #do something
</snippet></ROW><ROW><id>11732500</id><snippet>if answer.lower().split() == "this is a lower case string".split():
</snippet></ROW><ROW><id>11732500</id><snippet>raw_input</snippet></ROW><ROW><id>11732500</id><snippet>input</snippet></ROW><ROW><id>11732508</id><snippet>import glob
import os
files = glob.glob("*.pdf")
files.sort()

for ifl, fl in enumerate(files[:-1]):
    if files[ifl+1].startswith(fl[:10]):    #Check if next file is same day
        os.unlink(fl)                       # It is - delete current file
</snippet></ROW><ROW><id>11732610</id><snippet>list</snippet></ROW><ROW><id>11732610</id><snippet>def compact_zero_runs(iterable, max_zeros):
    zeros = 0
    for i in iterable:
        if i == 0:
            zeros += 1
            if zeros &lt;= max_zeros:
                yield i
        else:
            zeros = 0
            yield i
</snippet></ROW><ROW><id>11732619</id><snippet>-c++</snippet></ROW><ROW><id>11732619</id><snippet>.c</snippet></ROW><ROW><id>11732619</id><snippet>.cxx</snippet></ROW><ROW><id>11732912</id><snippet>&gt;&gt;&gt; a
array([[0, 0, 0, 1, 1, 1, 1],
       [0, 0, 0, 1, 1, 1, 1],
       [0, 0, 0, 0, 1, 1, 1],
       [0, 0, 0, 0, 0, 0, 1],
       [0, 0, 0, 0, 0, 0, 1],
       [0, 0, 0, 0, 0, 0, 1],
       [0, 0, 0, 0, 0, 0, 0]])
&gt;&gt;&gt; np.where(a&gt;0)
(array([0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 4, 5]), array([3, 4, 5, 6, 3, 4, 5, 6, 4, 5, 6, 6, 6, 6]))
</snippet></ROW><ROW><id>11732912</id><snippet>def first_true1(a):
    """ return a dict of row: index with value in row &gt; 0 """
    di={}
    for i in range(len(a)):
        idx=np.where(a[i]&gt;0)
        try:
            di[i]=idx[0][0]
        except IndexError:
            di[i]=None    

    return di       
</snippet></ROW><ROW><id>11732912</id><snippet>{0: 3, 1: 3, 2: 4, 3: 6, 4: 6, 5: 6, 6: None}
</snippet></ROW><ROW><id>11732912</id><snippet>def first_true2():
    di={}
    for i in range(len(a)):
        idx=np.argmax(a[i])
        if idx&gt;0:
            di[i]=idx
        else:
            di[i]=None    

    return di       
    # same dict is returned...
</snippet></ROW><ROW><id>11732912</id><snippet>None</snippet></ROW><ROW><id>11732912</id><snippet>def first_true3():
    di={}
    for i, j in zip(*np.where(a&gt;0)):
        if i in di:
            continue
        else:
            di[i]=j

    return di      
</snippet></ROW><ROW><id>11732912</id><snippet>def first_true4():
    di={}
    for i, ele in enumerate(np.argmax(a,axis=1)):
        if ele==0 and a[i][0]==0:
            di[i]=None
        else:
            di[i]=ele

    return di          
</snippet></ROW><ROW><id>11732912</id><snippet>            rate/sec usec/pass first_true1 first_true2 first_true3 first_true4
first_true1   23,818    41.986          --      -34.5%      -63.1%      -70.0%
first_true2   36,377    27.490       52.7%          --      -43.6%      -54.1%
first_true3   64,528    15.497      170.9%       77.4%          --      -18.6%
first_true4   79,287    12.612      232.9%      118.0%       22.9%          --
</snippet></ROW><ROW><id>11732912</id><snippet>            rate/sec  usec/pass first_true3 first_true1 first_true2 first_true4
first_true3        3 354380.107          --       -0.3%      -74.7%      -87.8%
first_true1        3 353327.084        0.3%          --      -74.6%      -87.7%
first_true2       11  89754.200      294.8%      293.7%          --      -51.7%
first_true4       23  43306.494      718.3%      715.9%      107.3%          --
</snippet></ROW><ROW><id>11732924</id><snippet>get</snippet></ROW><ROW><id>11732924</id><snippet>filter</snippet></ROW><ROW><id>11732924</id><snippet>filter</snippet></ROW><ROW><id>11732924</id><snippet>def add_wedding_context(request):
    id_ = request.GET.get('wedding_id', None)
    wedding = None
    if id_ is not None:
        try:
            wedding = Wedding.objects.get(id=id_)
        except Wedding.DoesNotExist:
            pass
    return {'wedding':wedding}
</snippet></ROW><ROW><id>11732924</id><snippet>from django.utils.functional import SimpleLazyObject
from functools import partial

def get_wedd_or_none(id_):
    try:
        return Wedding.objects.get(id=id_)
    except Wedding.DoesNotExist:
        return None

def add_wedding_context(request):
    id_ = request.GET.get('wedding_id', None)
    if id_ is not None:
        lazy = SimpleLazyObject(partial(get_wedd_or_none, id_))
        return {'wedding': lazy}
    else:
        return {'wedding': None}
</snippet></ROW><ROW><id>11732931</id><snippet>distutils</snippet></ROW><ROW><id>11732931</id><snippet>setup.py</snippet></ROW><ROW><id>11732931</id><snippet>python setup.py build</snippet></ROW><ROW><id>11732931</id><snippet>build</snippet></ROW><ROW><id>11733150</id><snippet>def _dict_to_xml(dictionary):
    returnlist = []
    for key in dictionary:
        if isinstance(dictionary[key],dict):
            returnlist.append(r'&lt;node name="{name}"&gt;'.format(name=key))
            returnlist.append(_dict_to_xml(dictionary[key]))
            returnlist.append(r'&lt;/node&gt;')
        else:
            returnlist.append(r'&lt;order&gt;{key}&lt;/order&gt;'.format(key=key))
            returnlist.append(r'&lt;string&gt;{value}&lt;/string&gt;'.format(value = dictionary[key]))
    return '\n'.join(returnlist)


def dict_to_xml(dictionary):
    return '&lt;?xml version="1.0"?&gt;\n'+_dict_to_xml(dictionary)+'&lt;/xml&gt;'
</snippet></ROW><ROW><id>11733184</id><snippet>pyeval()</snippet></ROW><ROW><id>11733184</id><snippet>py3eval()</snippet></ROW><ROW><id>11733184</id><snippet>vim.bindeval()</snippet></ROW><ROW><id>11733604</id><snippet>self.map</snippet></ROW><ROW><id>11733912</id><snippet>for db in a, b, c, d; { sqlite3 ${db}.db .dump | sqlite3 abcd.db }
</snippet></ROW><ROW><id>11733912</id><snippet>$ ( echo '.mode insert destinationtablename'
    echo 'select * from sourcetablename;' 
  ) |  sqlite3 -batch -init - source.db \
    |  sqlite3 -batch destination.db
</snippet></ROW><ROW><id>11734085</id><snippet>player_&lt;g_id&gt;_&lt;key&gt;</snippet></ROW><ROW><id>11734085</id><snippet>def broadcast_to_players(self, g_id, event, message, update_secret=False, dont_update_self=False):
    the_game = cache.get(g_id)
    player_list = cache.get('game_%s_players' % g_id) #Getting list of players ids
    for player_key in player_list:
        player = cache.get('game_%s_%s' % (g_id, player_key))
        if update_secret == True:
            secret = self.get_secret()
            message['k'] = secret
            player.secret_key = secret
            player.save() #We are storing secret in db, right?
            cache.set('game_secret_%s_%s' % (g_id, secret), player_key) #Making player availiable in game by secret
            cache.set('player_%s_secret' % (player_key, ), secret) #Making player secret available by player id
        if dont_update_self == True:
            if not self.session_id == player.session_id:
                single_session = self.session.server._sessions.get(player.session_id)
                single_session.conn.emit(event, message)
        else:
            single_session = self.session.server._sessions.get(player.session_id)
            single_session.conn.emit(event, message)
    cache.set(g_id, the_game)

def check_player(self, g_id, key):
    return cache.get('game_secret_%s_%s' % (g_id, key))
</snippet></ROW><ROW><id>11734485</id><snippet>In [20]: mechanize.HTTPRefreshProcessor is mechanize._http.HTTPRefreshProcessor
Out[20]: True
</snippet></ROW><ROW><id>11734485</id><snippet>mechanize.Browser().handlers
</snippet></ROW><ROW><id>11734485</id><snippet>br.set_handle_redirect(mechanize.HTTPRedirectHandler)
</snippet></ROW><ROW><id>11734485</id><snippet>In [50]: br.follow_link(url_regex="secure") # No loops
</snippet></ROW><ROW><id>11734485</id><snippet>last_response = br.response() # This is returned by br.open(...) too
http_header_dict = last_response.info().dict
html_string_list = last_response.readlines()
html_data = "".join(html_string_list)
</snippet></ROW><ROW><id>11734493</id><snippet>from matplotlib.ticker import MultipleLocator
locator = MultipleLocator(1)
ax1.xaxis.set_major_locator(locator)
ax1.set_xticklabels(xlabels)
</snippet></ROW><ROW><id>11734677</id><snippet>b.sort(key=lambda complex_: complex_.real)
</snippet></ROW><ROW><id>11734677</id><snippet>b.sort(key=lambda complex_: complex_.imag)
</snippet></ROW><ROW><id>11734677</id><snippet>b.sort(key=lambda complex_: sqrt(complex_.real**2 + complex_.imag**2))
</snippet></ROW><ROW><id>11735426</id><snippet>Node</snippet></ROW><ROW><id>11735426</id><snippet>ownerDocument</snippet></ROW><ROW><id>11735426</id><snippet>Document</snippet></ROW><ROW><id>11735426</id><snippet>from xml.dom import minidom

XML = """
&lt;root&gt;
   &lt;x&gt;abc&lt;/x&gt;
   &lt;y&gt;123&lt;/y&gt;
&lt;/root&gt;"""

dom = minidom.parseString(XML)
x = dom.getElementsByTagName('x')[0]

print x
print x.ownerDocument
</snippet></ROW><ROW><id>11735426</id><snippet>&lt;DOM Element: x at 0xc57cd8&gt;
&lt;xml.dom.minidom.Document instance at 0x00C1CC60&gt;
</snippet></ROW><ROW><id>11735457</id><snippet>def isprime(n):
    '''check if integer n is a prime'''
    # make sure n is a positive integer
    n = abs(int(n))
    # 0 and 1 are not primes
    if n &lt; 2:
        return False
    # 2 is the only even prime number
    if n == 2: 
        return True    
    # all other even numbers are not primes
    if not n &amp; 1: 
        return False
    # range starts with 3 and only needs to go up the squareroot of n
    # for all odd numbers
    for x in range(3, int(n**0.5)+1, 2):
        if n % x == 0:
            return False
    return True

counter = 0
number = 0

while True:
    if isprime(number):
        counter+=1
    if counter == 10000:
        break
    number+=1

print number
</snippet></ROW><ROW><id>11735604</id><snippet>tokenize</snippet></ROW><ROW><id>11735604</id><snippet>ast</snippet></ROW><ROW><id>11735604</id><snippet>symbol</snippet></ROW><ROW><id>11735604</id><snippet>parser</snippet></ROW><ROW><id>11735604</id><snippet>&gt;&gt;&gt; s = "33.2 + 6 * 0xFF - 0744"
&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; import tokenize
&gt;&gt;&gt; t = list(tokenize.generate_tokens(StringIO(s).readline))
&gt;&gt;&gt; t
[(2, '33.2', (1, 0), (1, 4), '33.2 + 6 * 0xFF - 0744'), (51, '+', (1, 5), (1, 6), '33.2 + 6 * 0xFF - 0744'), (2, '6', (1, 7), (1, 8), '33.2 + 6 * 0xFF - 0744'), (51, '*', (1, 9), (1, 10), '33.2 + 6 * 0xFF - 0744'), (2, '0xFF', (1, 11), (1, 15), '33.2 + 6 * 0xFF - 0744'), (51, '-', (1, 16), (1, 17), '33.2 + 6 * 0xFF - 0744'), (2, '0744', (1, 18), (1, 22), '33.2 + 6 * 0xFF - 0744'), (0, '', (2, 0), (2, 0), '')]
&gt;&gt;&gt; nums = [eval(i[1]) for i in t if i[0] == tokenize.NUMBER]
&gt;&gt;&gt; nums
[33.2, 6, 255, 484]
&gt;&gt;&gt; print map(type, nums)
[&lt;type 'float'&gt;, &lt;type 'int'&gt;, &lt;type 'int'&gt;, &lt;type 'int'&gt;]
</snippet></ROW><ROW><id>11735604</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>11735897</id><snippet>import os
import socket

if os.name != "nt":
    import fcntl
    import struct

    def get_interface_ip(ifname):
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        return socket.inet_ntoa(fcntl.ioctl(s.fileno(), 0x8915, struct.pack('256s',
                                ifname[:15]))[20:24])

def get_lan_ip():
    ip = socket.gethostbyname(socket.gethostname())
    if ip.startswith("127.") and os.name != "nt":
        interfaces = [
            "eth0",
            "eth1",
            "eth2",
            "wlan0",
            "wlan1",
            "wifi0",
            "ath0",
            "ath1",
            "ppp0",
            ]
        for ifname in interfaces:
            try:
                ip = get_interface_ip(ifname)
                break
            except IOError:
                pass
    return ip
</snippet></ROW><ROW><id>11736014</id><snippet>clean_FIELD</snippet></ROW><ROW><id>11736014</id><snippet>clean_qty</snippet></ROW><ROW><id>11736014</id><snippet>return data['qty']</snippet></ROW><ROW><id>11736089</id><snippet>DO</snippet></ROW><ROW><id>11736089</id><snippet>WILL</snippet></ROW><ROW><id>11736089</id><snippet>telnet-bsd</snippet></ROW><ROW><id>11736168</id><snippet>Foo.Foo</snippet></ROW><ROW><id>11736168</id><snippet>Foo</snippet></ROW><ROW><id>11736168</id><snippet>try</snippet></ROW><ROW><id>11736168</id><snippet>except TypeError</snippet></ROW><ROW><id>11736168</id><snippet>def setUp(self):
    try:
        self.foo = Foo()
    except TypeError:
        # What module Foo is this?
        print Foo.__file__
        raise
</snippet></ROW><ROW><id>11736286</id><snippet>__add__()</snippet></ROW><ROW><id>11736286</id><snippet>def __iadd__(self, other):
    self.update(other)
    return self

def __add__(self, other):
    return self.value + other

def __str__(self):
    return str(self.value)
</snippet></ROW><ROW><id>11736286</id><snippet>def __float__(self):
    return self.value

def __radd__(self, other):
    return other + self.value
</snippet></ROW><ROW><id>11736286</id><snippet>somevalue + twoday</snippet></ROW><ROW><id>11736286</id><snippet>__mul__/__rmul__</snippet></ROW><ROW><id>11736286</id><snippet>__iadd__()</snippet></ROW><ROW><id>11736828</id><snippet>-L</snippet></ROW><ROW><id>11736828</id><snippet>$ curl -s http://www.exyr.org|grep '&lt;title&gt;' 
&lt;title&gt;301 Moved Permanently&lt;/title&gt;
$ curl -s -L http://www.exyr.org|grep '&lt;title&gt;'
  &lt;title&gt;Exyr.org&lt;/title&gt;
</snippet></ROW><ROW><id>11736828</id><snippet>man curl</snippet></ROW><ROW><id>11736828</id><snippet>   -L, --location
          (HTTP/HTTPS)  If  the server reports that the requested page has
          moved to a different location (indicated with a Location: header
          and  a  3XX  response code), this option will make curl redo the
          request on the new place. If used together with -i, --include or
          -I, --head, headers from all requested pages will be shown. When
          authentication is used, curl only sends its credentials  to  the
          initial  host.  If a redirect takes curl to a different host, it
          won't be able to intercept the user+password. See  also  --loca‐
          tion-trusted  on how to change this. You can limit the amount of
          redirects to follow by using the --max-redirs option.

          When curl follows a redirect and the request is not a plain  GET
          (for example POST or PUT), it will do the following request with
          a GET if the HTTP response was 301, 302, or 303. If the response
          code  was  any  other  3xx code, curl will re-send the following
          request using the same unmodified method.
</snippet></ROW><ROW><id>11736942</id><snippet>&gt;&gt;&gt; from operator import methodcaller
&gt;&gt;&gt; funcs = (lambda x: x + 1, lambda x: x + 2)
&gt;&gt;&gt; obj = 5
&gt;&gt;&gt; map(methodcaller('__call__', obj), funcs)
[6, 7]
</snippet></ROW><ROW><id>11736942</id><snippet>&gt;&gt;&gt; from itertools import starmap, repeat
&gt;&gt;&gt; from types import FunctionType
&gt;&gt;&gt; funcs = (lambda x: x + 1, lambda x: x + 2)
&gt;&gt;&gt; obj = 5
&gt;&gt;&gt; list(starmap(FunctionType.__call__, zip(funcs, repeat(obj))))
[6, 7]
</snippet></ROW><ROW><id>11736989</id><snippet>QtCore.Qt.ItemIsEditable | QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable</snippet></ROW><ROW><id>11737139</id><snippet>PyObject_HEAD</snippet></ROW><ROW><id>11737139</id><snippet>PyObject_HEAD*</snippet></ROW><ROW><id>11737139</id><snippet>ob_type</snippet></ROW><ROW><id>11737167</id><snippet>HeartbeatTrayIcon</snippet></ROW><ROW><id>11737167</id><snippet>import os, gtk, gobject
from time import time, sleep
from datetime import datetime

class HeartbeatTrayIcon(object):
    """
    Use GTK to create an object in the system tray
    and manipulate icon shown if there is an issue.
    """
    def __init__(self):
        self.statusIcon = gtk.StatusIcon()

    def check(self):
        rx = os.path.getmtime("test")
        if (time() - rx) &gt; (60*60*24):
            self.statusIcon.set_from_stock(gtk.STOCK_CANCEL)
        else:
            self.statusIcon.set_from_stock(gtk.STOCK_APPLY)
        self.statusIcon.set_tooltip("Last heartbeat received at %s" \
            % datetime.fromtimestamp(int(rx)).strftime('%H:%M:%S %d-%m-%Y'))
        return True

    def tray(self):
        gobject.idle_add(self.check)
        gtk.main()

if __name__ == "__main__":
    i = HeartbeatTrayIcon()
    i.tray()
</snippet></ROW><ROW><id>11737167</id><snippet>time()</snippet></ROW><ROW><id>11737167</id><snippet>rx</snippet></ROW><ROW><id>11737327</id><snippet>import logging
logging.basicConfig(level=logging.DEBUG)
</snippet></ROW><ROW><id>11737487</id><snippet>&gt;&gt;&gt; lst = ['4', '-5', '5.763', '6.423', '-5', '-6.77', '10']
&gt;&gt;&gt; map(float, lst)
[4.0, -5.0, 5.763, 6.423, -5.0, -6.77, 10.0]
</snippet></ROW><ROW><id>11737487</id><snippet>list</snippet></ROW><ROW><id>11737649</id><snippet>  def initialize(self, request, response):
        if request != None and response != None: 
            super(Dispatcher, self).initialize(request, response)
            request.disp_query_params_ = None
            response.disp_cache_resp_ = True
            response.disp_out_type_ = TEXT_CONTENT_TYPE
</snippet></ROW><ROW><id>11738039</id><snippet>import csv
import os.path
with open("C:/*my dir*/UCSC to Ensembl.csv", "rb") as f:
    reader = csv.reader(f, delimiter = ',')
    for row in reader:
        graph_filename = os.path.join("C:/folder", row[0] + "_nt_counts.txt")
        if os.path.exists(graph_filename):
            print (row[1])
</snippet></ROW><ROW><id>11738039</id><snippet>os.path.exists</snippet></ROW><ROW><id>11738039</id><snippet>os.listdir</snippet></ROW><ROW><id>11738039</id><snippet>import csv
import os

graphs = set(os.listdir("C:/graph folder"))
with open("C:/*my dir*/UCSC to Ensembl.csv", "rb") as f:
    reader = csv.reader(f, delimiter = ',')
    for row in reader:
        if row[0] + "_nt_counts.txt" in graphs:
            print (row[1])
</snippet></ROW><ROW><id>11738397</id><snippet>import os
from os.path import join
from datetime import datetime, timedelta
from operator import itemgetter


def list_user_files(username):
    for root, dirs, files in os.walk(username):
        for name in files:
            fullname = join(root, name)
            try:
                yield fullname, os.stat(fullname).st_mtime
            except (IOError, OSError) as e: # will catch WindowsError but more generic
                pass # Do something here...


ROOT = '/home'
CUTOFF = timedelta(days=30)
for userdir in os.listdir(ROOT):
    most_recent = max(list_user_files(join(ROOT, userdir)), key=itemgetter(1))
    print '{}: most recent file and timestamp is {}'.format(userdir, most_recent)
    if (datetime.now() - datetime.fromtimestamp(most_recent[1])) &gt; CUTOFF:
        print '{} has not used their folder during cutoff period'.format(userdir)
</snippet></ROW><ROW><id>11738397</id><snippet>max</snippet></ROW><ROW><id>11738397</id><snippet>ValueError</snippet></ROW><ROW><id>11738397</id><snippet>most_recent=</snippet></ROW><ROW><id>11738397</id><snippet>try:
    most_recent = max(list_user_files(join(ROOT, userdir)), key=itemgetter(1))
except ValueError as e:
    print '***DEBUG***', list(list_user_files(join(ROOT, userdir)))
</snippet></ROW><ROW><id>11738466</id><snippet>select</snippet></ROW><ROW><id>11738466</id><snippet>twisted.internet.stdio</snippet></ROW><ROW><id>11738546</id><snippet>import itertools

def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return itertools.izip_longest(*args, fillvalue=fillvalue)

map(sum, grouper(3, interger, 0))
</snippet></ROW><ROW><id>11738546</id><snippet>itertools.zip_longest</snippet></ROW><ROW><id>11738546</id><snippet>&gt;&gt;&gt; example = [0, 1, 0, 2, 0, 4]
&gt;&gt;&gt; map(sum, grouper(3, example, 0))
[1, 6]
</snippet></ROW><ROW><id>11738588</id><snippet>category = "C"
category2 = "C2"

namelist = [
  [['blah blah blah string blah blah blah blah blah blah', 'another string, blah blah blah, string string', 'string string string'],
   category
  ],
  [['string string another string, blah', 'more words, more words, etc', 'yet again, here we go'],
   category2
  ]
]

wordlist = "blah string words".split()
</snippet></ROW><ROW><id>11738588</id><snippet>from collections import defaultdict

worddictlist2 = []
for innertweet in namelist:
    worddict = defaultdict(lambda: 0)
    category = innertweet[1]
    for tweet in innertweet[0]:
        for word in wordlist:
            worddict[word] += tweet.count(word)

    # optional - transform defaultdict into standard dict to make it printable
    worddictClean = {}
    worddictClean.update(worddict)

    worddictlist2.append([worddictClean, category])

print worddictlist2
</snippet></ROW><ROW><id>11738588</id><snippet>[[{'blah': 12, 'string': 7, 'words': 0}, 'C'], [{'blah': 1, 'string': 3, 'words': 2}, 'C2']]
</snippet></ROW><ROW><id>11738811</id><snippet>def my_processor(handler): 
    tries = 3
    while True:
        try:
            return handler() 
        except DisconnectionError:
            tries -= 1
            if tries == 0:
                raise
</snippet></ROW><ROW><id>11738811</id><snippet>def load_storm(handler):
    web.ctx.store = Store(database)
    try:
        return handler()
    except web.HTTPError:
       web.ctx.store.commit()
       raise
    except:
        web.ctx.store.rollback()
        raise
    finally:
        web.ctx.store.commit()

app.add_processor(load_storm)
</snippet></ROW><ROW><id>11738813</id><snippet>big_list</snippet></ROW><ROW><id>11738813</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; big_list = [[17465, [1, 2, 3], '123-432-3'], [13254, [4, 5, 6], '1423-1762-4'], [17264, [7, 8, 9], '14234-453-1'], [12354, [10, 11, 12], '14234-453-1'], [12358, [13, 14], '14234-453-1'], [99213, [15], '123-999-3'], [27461, [16, 17, 18], '123-432-3']]
&gt;&gt;&gt; def amalgamate(seq):
        d = OrderedDict()
        for num, ints, text in big_list:
            d.setdefault(text, [num, [], text])[1].extend(ints)
        return d.values()

&gt;&gt;&gt; amalgamate(big_list)
[[17465, [1, 2, 3, 16, 17, 18], '123-432-3'], [13254, [4, 5, 6], '1423-1762-4'], [17264, [7, 8, 9, 10, 11, 12, 13, 14], '14234-453-1'], [99213, [15], '123-999-3']]
</snippet></ROW><ROW><id>11739062</id><snippet>-c</snippet></ROW><ROW><id>11739062</id><snippet>a if b else c</snippet></ROW><ROW><id>11739062</id><snippet>lvc@tiamat:~$ python -c "from __future__ import print_function; import sys; print('64' if sys.maxsize &gt; 2**32 else '32')"
64
</snippet></ROW><ROW><id>11739122</id><snippet>models.py</snippet></ROW><ROW><id>11739122</id><snippet>app_label</snippet></ROW><ROW><id>11739122</id><snippet>class Blog(models.Model):
    title = models.CharField(max_length=30)
    ...

    class Meta:
        app_label = 'myapp'
</snippet></ROW><ROW><id>11739144</id><snippet>message.html</snippet></ROW><ROW><id>11739144</id><snippet>message.body</snippet></ROW><ROW><id>11739289</id><snippet>pl.imshow(im, origin='lower')
pl.show()
</snippet></ROW><ROW><id>11739289</id><snippet>im.show()</snippet></ROW><ROW><id>11739289</id><snippet>import pylab as pl
import matplotlib.cm as cm
import numpy as np
import Image

im = Image.open('your/image/path')
im_grey = im.convert('L') # convert the image to *greyscale*
im_array = np.array(im_grey)
pl.imshow(im_array, cmap=cm.Greys_r)
pl.show() 
</snippet></ROW><ROW><id>11739350</id><snippet>from itertools import groupby

key = lambda x: x[1][0]
lens = [len(list(g)) for k, g in groupby(sorted(l1, key=key), key=key)]
dct = dict(zip(l2, lens))
</snippet></ROW><ROW><id>11739350</id><snippet>(2, 3)</snippet></ROW><ROW><id>11739350</id><snippet>sublist2</snippet></ROW><ROW><id>11739350</id><snippet>ls1</snippet></ROW><ROW><id>11739350</id><snippet>from itertools import groupby
from string import ascii_uppercase

key = lambda x: x[0]
lens = [len(list(g)) for k, g in groupby(sorted(l1, key=key), key=key)]
dct = dict(zip(ascii_uppercase, lens))
</snippet></ROW><ROW><id>11739350</id><snippet>zip</snippet></ROW><ROW><id>11739445</id><snippet>d</snippet></ROW><ROW><id>11739445</id><snippet>d.values()</snippet></ROW><ROW><id>11739445</id><snippet>d.keys()</snippet></ROW><ROW><id>11739775</id><snippet>prepend_urls()</snippet></ROW><ROW><id>11739775</id><snippet>override_urls()</snippet></ROW><ROW><id>11740359</id><snippet>vpathways[k] = copy.deepcopy(v)
</snippet></ROW><ROW><id>11740359</id><snippet>vpathways[k]</snippet></ROW><ROW><id>11740359</id><snippet>.addMutant()</snippet></ROW><ROW><id>11740716</id><snippet>self</snippet></ROW><ROW><id>11740716</id><snippet>self</snippet></ROW><ROW><id>11740716</id><snippet>call()</snippet></ROW><ROW><id>11740744</id><snippet> @cherrypy.expose
 def index(self):
    return "Not much to say"
 @cherrypy.expose
 def hello(self, name):
    return "Hello %s" % name
</snippet></ROW><ROW><id>11740794</id><snippet>str.split()</snippet></ROW><ROW><id>11740794</id><snippet>s = "el-gu-en-tr-ca-it-eu-ca@valencia-ar-eo-cs-et-th_TH-gl-id-es-bn_IN-ru-he-nl-pt-no-nb-id_ID-lv-lt-pa-te-pl-ta-bg_BG-be-fr-de-bn_BD-uk-pt_BR-ast-hr-jv-zh_TW-sr@latin-da-fa-hi-tr_TR-fi-hu-ja-fo-bs_BA-ro-fa_IR-zh_CN-sr-sq-mn-ko-sv-km-sk-km_KH-en_GB-ms-sc-ug-bal"
locales = s.split("-")
</snippet></ROW><ROW><id>11740834</id><snippet>[i for i in my_list if '91' not in i and '18' not in i]
</snippet></ROW><ROW><id>11740834</id><snippet>list</snippet></ROW><ROW><id>11741531</id><snippet>str.endswith</snippet></ROW><ROW><id>11741531</id><snippet>return any(fname.lower().endswith(extension) for extension in replace_extensions)
</snippet></ROW><ROW><id>11741531</id><snippet>os.path.splitext</snippet></ROW><ROW><id>11741531</id><snippet>return os.path.splitext(fname.lower())[1] in replace_extensions
</snippet></ROW><ROW><id>11741531</id><snippet>with</snippet></ROW><ROW><id>11741531</id><snippet>    with open(out_fname, "w") as out:
        for line in f:
            out.write(re.sub(pat, s_after, line))
</snippet></ROW><ROW><id>11741835</id><snippet>Apple iPhone 4 Verizon</snippet></ROW><ROW><id>11741835</id><snippet>nextSibling</snippet></ROW><ROW><id>11741835</id><snippet>previousSibling</snippet></ROW><ROW><id>11741835</id><snippet>next</snippet></ROW><ROW><id>11741835</id><snippet>previous</snippet></ROW><ROW><id>11741835</id><snippet>header = soup.find('h1', itemprop='itemreviewed')
text = header.next
</snippet></ROW><ROW><id>11741846</id><snippet>from __future__ import absolute_import</snippet></ROW><ROW><id>11741846</id><snippet>importlib.import_module('c')</snippet></ROW><ROW><id>11741846</id><snippet>__future__.py</snippet></ROW><ROW><id>11741853</id><snippet>def basic_gen_primes(n):
    """Return a list of all primes less then or equal to n"""
    if n &lt; 2:
        return []

    # The sieve.  Each entry i represents (2i + 1)
    size = (n + 1) // 2
    sieve = [True] * size

    # 2(0) + 1 == 1 is not prime
    sieve[0] = False

    for i, value in enumerate(sieve):
        if not value:
            continue

        p = 2*i + 1

        # p is prime.  Remove all of its multiples from the sieve
        # p^2 == (2i + 1)(2i + 1) == (4i^2 + 4i + 1) == 2(2i^2 + 2i) + 1
        multiple = 2 * i * i + 2 * i 
        if multiple &gt;= size:
            break

        while multiple &lt; size:
            sieve[multiple] = False
            multiple += p 

    return [2] + [2*i+1 for i, value in enumerate(sieve) if value]
</snippet></ROW><ROW><id>11741999</id><snippet>import ast

l = [
{'x':'1','y':'1'},{'x':'2','y':'2'},{'x':'1','y':'1'}
]

[ast.literal_eval(el1) for el1 in set([str(el2) for el2 in l])]
</snippet></ROW><ROW><id>11742115</id><snippet>JUnit</snippet></ROW><ROW><id>11742115</id><snippet>--nocapture</snippet></ROW><ROW><id>11742204</id><snippet>r</snippet></ROW><ROW><id>11742204</id><snippet>x = r'c:\temp\xx'
</snippet></ROW><ROW><id>11742204</id><snippet>r't'</snippet></ROW><ROW><id>11742204</id><snippet>'t'</snippet></ROW><ROW><id>11742204</id><snippet>\</snippet></ROW><ROW><id>11742204</id><snippet>x</snippet></ROW><ROW><id>11742204</id><snippet>x = t.encode('string_escape')
</snippet></ROW><ROW><id>11742612</id><snippet>multiprocessing</snippet></ROW><ROW><id>11742612</id><snippet>dict</snippet></ROW><ROW><id>11742612</id><snippet>list</snippet></ROW><ROW><id>11742612</id><snippet># TODO Use name and key that works for you.
my_processes['de_DE@euro'] = Popen(args1, stdout=PIPE, stderr=PIPE, env={'LANG':'de_DE@euro','TZ':'Europe/Berlin'})
</snippet></ROW><ROW><id>11742802</id><snippet> queryBingFor = "'google fibre'" # the apostrophe's required as that is the format the API Url expects. 
 quoted_query = urllib.quote(queryBingFor)

 rootURL = "https://api.datamarket.azure.com/Bing/Search/"
 searchURL = rootURL + "Image?$format=json&amp;Query=" + quoted_query

 password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
 password_mgr.add_password(None, searchURL,username,accountKey)

 handler = urllib2.HTTPBasicAuthHandler(password_mgr)
 opener = urllib2.build_opener(handler)
 urllib2.install_opener(opener)
 readURL = urllib2.urlopen(searchURL).read()
</snippet></ROW><ROW><id>11742949</id><snippet>platform</snippet></ROW><ROW><id>11742949</id><snippet>import os

def machine():
    try:
        return os.uname()[-1]
    except AttributeError:
        if "PROCESSOR_ARCHITEW6432" in os.environ:
            return os.environ.get("PROCESSOR_ARCHITEW6432", '')
        else:
            return os.environ.get('PROCESSOR_ARCHITECTURE', '')
</snippet></ROW><ROW><id>11743013</id><snippet>headers.py</snippet></ROW><ROW><id>11743013</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>11743025</id><snippet>if measured_dec &lt;= 0.523966303045:
    print "WARNING! Object may be below Horizon!"
</snippet></ROW><ROW><id>11743262</id><snippet>&gt;&gt;&gt; datetime.datetime(2012,04,01,0,0).strftime('%s')
'1333234800'
&gt;&gt;&gt; (datetime.datetime(2012,04,01,0,0) - datetime.datetime(1970,1,1)).total_seconds()
1333238400.0
</snippet></ROW><ROW><id>11743400</id><snippet>\(001,003e\)[^:]*:(.*)</snippet></ROW><ROW><id>11743429</id><snippet>command,file = raw_input("&gt;").split()
</snippet></ROW><ROW><id>11743429</id><snippet>command,file,*everything_else = raw_input("&gt;").split()#untested
</snippet></ROW><ROW><id>11743748</id><snippet>myEmployee = employee.Employee(name, number,
                       shift, payRate)
</snippet></ROW><ROW><id>11743748</id><snippet>myEmployee = employee.ProductionWorker(name, number,
                       shift, payRate)
</snippet></ROW><ROW><id>11743748</id><snippet>myEmployee.name = "David"
print myEmployee.name
</snippet></ROW><ROW><id>11744060</id><snippet>import tkFileDialog

old_file = tkFileDialog.askopenfilename(filetypes=[('.csvfiles', '.csv')],
                                        title='Old file selected first')
</snippet></ROW><ROW><id>11744646</id><snippet>import supervisor.xmlrpc
import xmlrpclib

p = xmlrpclib.ServerProxy('http://127.0.0.1',
        transport=supervisor.xmlrpc.SupervisorTransport(
            None, None,
            'unix:///home/lars/lib/supervisor/tmp/supervisor.sock'))

print p.supervisor.getState()
</snippet></ROW><ROW><id>11744646</id><snippet>{'statename': 'RUNNING', 'statecode': 1}
</snippet></ROW><ROW><id>11744646</id><snippet>supervisord</snippet></ROW><ROW><id>11745176</id><snippet>list_display</snippet></ROW><ROW><id>11745176</id><snippet>class ModelBAdmin(admin.ModelAdmin):

    def modelA_Codes(self, inst):
        return ','.join([b.code for b in inst.modela_set.all()])

    list_display = ('name', 'modelA_Codes')
</snippet></ROW><ROW><id>11745296</id><snippet>LogRecord</snippet></ROW><ROW><id>11745296</id><snippet>Formatter</snippet></ROW><ROW><id>11745460</id><snippet>template('mytemplate.tpl', name="Anne", address="4 Elm Street", 
                          dob=datetime.datetime(1977,12,2,1,2,3))
</snippet></ROW><ROW><id>11745460</id><snippet>d = { "name": "Anne", "address": "4 Elm Street", "dob": datetime.datetime(1977,12,2,1,2,3) }
template('mytemplate.tpl', **d)
</snippet></ROW><ROW><id>11745828</id><snippet>re.search(re.compile('...', re.IGNORECASE), header_text)</snippet></ROW><ROW><id>11745828</id><snippet>re.search('...', header_text, re.IGNORECASE)</snippet></ROW><ROW><id>11745828</id><snippet>re.compile</snippet></ROW><ROW><id>11745828</id><snippet>re.search</snippet></ROW><ROW><id>11745828</id><snippet>return colspecs[max(m.groups()).lower() if m else 'def']
</snippet></ROW><ROW><id>11745828</id><snippet>max(m.groups())</snippet></ROW><ROW><id>11745828</id><snippet>'(ID|Date|Comments|Flag)$'</snippet></ROW><ROW><id>11745828</id><snippet>m.group(1)</snippet></ROW><ROW><id>11745916</id><snippet>cmd.exe</snippet></ROW><ROW><id>11745916</id><snippet>cd</snippet></ROW><ROW><id>11745916</id><snippet>python web2py.py --ip 172.25.116.10 --port 8000
</snippet></ROW><ROW><id>11745916</id><snippet>172.25.116.10</snippet></ROW><ROW><id>11746051</id><snippet>xmlrpclib</snippet></ROW><ROW><id>11746051</id><snippet>http</snippet></ROW><ROW><id>11746051</id><snippet>https</snippet></ROW><ROW><id>11746051</id><snippet>import supervisor.xmlrpc
import xmlrpclib

proxy = xmlrpclib.ServerProxy('http://127.0.0.1',
                               transport=supervisor.xmlrpc.SupervisorTransport(
                                    None, None, serverurl='unix://'+socketpath))

proxy.supervisor.getState()
</snippet></ROW><ROW><id>11746051</id><snippet>class UnixStreamHTTPConnection(httplib.HTTPConnection, object):
    def __init__(self, *args, **kwargs):
        self.socketpath = kwargs.pop('socketpath')
        super(UnixStreamHTTPConnection, self).__init__(*args, **kwargs)

    def connect(self):
        self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        self.sock.connect_ex(self.socketpath)

class UnixStreamTransport(xmlrpclib.Transport, object):
    def __init__(self, *args, **kwargs):
        self.socketpath = kwargs.pop('socketpath')
        super(UnixStreamTransport, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>11746100</id><snippet>urlpatterns = patterns('',
    url(r'^wiki/Sacramentum_(oath)/', my_view),
)
</snippet></ROW><ROW><id>11746100</id><snippet>urlpatterns = patterns('',
    url(r'^wiki/Sacramentum_\(oath\)/', my_view),
)
</snippet></ROW><ROW><id>11746453</id><snippet>class MyModel(models.Model):
    ...
    def contents_substring(self):
        # do stuff
        return the_substring
</snippet></ROW><ROW><id>11746453</id><snippet>instance.contents_substring()
</snippet></ROW><ROW><id>11746453</id><snippet>{{ instance.contents_substring }}
</snippet></ROW><ROW><id>11746519</id><snippet>def get_class_name(full_module_name):
    """
    Pull out the class name from the full_module_name
    """
    #split the full_module_name by "."'s
    return full_module_name.split('.')[-1]

def process_docstring(app, what, name, obj, options, lines):
    classname = get_class_name(name)

    # loop through each line in the docstring and replace |class| with
    # the classname
    for i in xrange(len(lines)):
        lines[i] = lines[i].replace('|class|', classname)

def setup(app):
    app.connect('autodoc-process-docstring', process_docstring)
</snippet></ROW><ROW><id>11746519</id><snippet>.. |class| replace:: `|class|`
</snippet></ROW><ROW><id>11746528</id><snippet>netref = MatchFirst(concat_netref, single_netref).setName("Net Reference")
</snippet></ROW><ROW><id>11746528</id><snippet>netref = MatchFirst([concat_netref, single_netref]).setName("Net Reference")
</snippet></ROW><ROW><id>11746608</id><snippet>shlex</snippet></ROW><ROW><id>11746608</id><snippet>for line in sys.stdin:
    parts = shlex.split(line)
    print parts
</snippet></ROW><ROW><id>11746608</id><snippet>['asaasdfg', 'fdhshs', 'kgk jjjd', 'jdyesgs']
['gdgdg', 'urur', 'irit jhd *', 'djjdj']
['trteyuueu', 'ueue', 'jyuoro', 'ooyoy']
</snippet></ROW><ROW><id>11746698</id><snippet>// the value passed will be ((myKey, myValue), )
d.update((nameValuePair.split('='), ))
//       ^                        ^ ^
// creates a tuple of 1 element
</snippet></ROW><ROW><id>11746698</id><snippet>key, value = nameValuePair.split('=')
d[key] = value
</snippet></ROW><ROW><id>11746775</id><snippet>seq</snippet></ROW><ROW><id>11746997</id><snippet>process_exception</snippet></ROW><ROW><id>11746997</id><snippet>from django.http import HttpResponseForbidden
from app.exceptions import UnauthorizedException


class UnauthorizedAccessMiddleware(object):
    def process_exception(self, request, exception):
        if isinstance(exception, UnauthorizedException):
           return HttpResponseForbidden("You are not authorized to access that page.")
</snippet></ROW><ROW><id>11747315</id><snippet>itertools.product</snippet></ROW><ROW><id>11747315</id><snippet>list(itertools.product(*(('*', x) for x in seq)))
</snippet></ROW><ROW><id>11747315</id><snippet>&gt;&gt;&gt; list(itertools.product(*(('*', x) for x in "abc")))
[('*', '*', '*'), ('*', '*', 'c'), ('*', 'b', '*'), ('*', 'b', 'c'), ('a', '*', '*'), ('a', '*', 'c'), ('a', 'b', '*'), ('a', 'b', 'c')]
</snippet></ROW><ROW><id>11747381</id><snippet>your_list = 'abcdefghijklmnopqrstuvwxyz'
complete_list = []
for current in xrange(10):
    a = [i for i in your_list]
    for y in xrange(current):
        a = [x+i for i in your_list for x in a]
    complete_list = complete_list+a
</snippet></ROW><ROW><id>11747381</id><snippet>['a', 'b', 'aa', 'ba', 'ab', 'bb', 'aaa', 'baa', 'aba', 'bba', 'aab', 'bab', 'abb', 'bbb', 'aaaa', 'baaa', 'abaa', 'bbaa', 'aaba', 'baba', 'abba', 'bbba', 'aaab', 'baab', 'abab', 'bbab', 'aabb', 'babb', 'abbb', 'bbbb', 'aaaaa', 'baaaa', 'abaaa', 'bbaaa', 'aabaa', 'babaa', 'abbaa', 'bbbaa', 'aaaba','baaba', 'ababa', 'bbaba', 'aabba', 'babba', 'abbba', 'bbbba', 'aaaab', 'baaab', 'abaab', 'bbaab', 'aabab', 'babab', 'abbab', 'bbbab', 'aaabb', 'baabb', 'ababb', 'bbabb', 'aabbb', 'babbb', 'abbbb', 'bbbbb']
</snippet></ROW><ROW><id>11747550</id><snippet>maximum recursion depth exceeded</snippet></ROW><ROW><id>11747550</id><snippet>sys.setrecursionlimit</snippet></ROW><ROW><id>11747550</id><snippet>length * height</snippet></ROW><ROW><id>11747550</id><snippet>set</snippet></ROW><ROW><id>11747550</id><snippet>def floodFill(x,y, d,e,f, g,h,i, image):
    toFill = set()
    toFill.add((x,y))
    while not toFill.empty():
        (x,y) = toFill.pop()
        (a,b,c) == image.getpixel((x,y))
        if not (a,b,c) == (255, 255, 255):
            continue
        image.putpixel((x,y), (g,h,i))
        toFill.add((x-1,y))
        toFill.add((x+1,y))
        toFill.add((x,y-1))
        toFill.add((x,y+1))
    image.save("flood.png")
</snippet></ROW><ROW><id>11747550</id><snippet>toFill</snippet></ROW><ROW><id>11747640</id><snippet>functools</snippet></ROW><ROW><id>11747640</id><snippet>collections</snippet></ROW><ROW><id>11747640</id><snippet>reprlib</snippet></ROW><ROW><id>11747640</id><snippet>reprlib</snippet></ROW><ROW><id>11747640</id><snippet>functools.wraps</snippet></ROW><ROW><id>11747640</id><snippet>from module import function</snippet></ROW><ROW><id>11747841</id><snippet>__init__.py</snippet></ROW><ROW><id>11747841</id><snippet>testpackage
    __init__.py
    testmod.py
</snippet></ROW><ROW><id>11747841</id><snippet>__init__.py</snippet></ROW><ROW><id>11747841</id><snippet>print "Initializing __init__"</snippet></ROW><ROW><id>11747841</id><snippet>testmod.py</snippet></ROW><ROW><id>11747841</id><snippet>print "Initializing testmod"</snippet></ROW><ROW><id>11747841</id><snippet>testpackage</snippet></ROW><ROW><id>11747841</id><snippet>testmod</snippet></ROW><ROW><id>11747841</id><snippet>dynamic-oit-vapornet-c-499:test dgrtwo$ python -c "import testpackage"
Initializing __init__
dynamic-oit-vapornet-c-499:test dgrtwo$ python -c "from testpackage import testmod"
Initializing __init__
Initializing testmod
</snippet></ROW><ROW><id>11747841</id><snippet>testmod.py</snippet></ROW><ROW><id>11747841</id><snippet>__init__.py</snippet></ROW><ROW><id>11748078</id><snippet>a = []
b = []
a.append(b)
b.append(a)
a == b
</snippet></ROW><ROW><id>11748078</id><snippet>self</snippet></ROW><ROW><id>11748078</id><snippet>==</snippet></ROW><ROW><id>11748078</id><snippet>id(self)</snippet></ROW><ROW><id>11748078</id><snippet>get_indent</snippet></ROW><ROW><id>11748078</id><snippet>repr_running</snippet></ROW><ROW><id>11748078</id><snippet>get_ident()</snippet></ROW><ROW><id>11748165</id><snippet>multipart/form-data</snippet></ROW><ROW><id>11748165</id><snippet>&lt;html&gt;
&lt;body&gt;
    &lt;form action="/settings" method="post" enctype="multipart/form-data"&gt;
        &lt;input type="file" name="file_input" value="Choose image" /&gt;


    &lt;p&gt;&lt;input type="submit" name="photo.submitted" value="Save" /&gt;&lt;/p&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>11748230</id><snippet>pexpect</snippet></ROW><ROW><id>11748230</id><snippet> child = pexpect.spawn('scp foo myname@host.example.com:.')
 child.expect ('Password:')
 child.sendline (mypassword)
</snippet></ROW><ROW><id>11748230</id><snippet>scp</snippet></ROW><ROW><id>11748235</id><snippet>  import math as _math
File "/home/zane/Dropbox/code/py/math.py", line 3, in &lt;module&gt;
</snippet></ROW><ROW><id>11748235</id><snippet>math.py</snippet></ROW><ROW><id>11748235</id><snippet>math.py</snippet></ROW><ROW><id>11748235</id><snippet>math.pyc</snippet></ROW><ROW><id>11748275</id><snippet>args</snippet></ROW><ROW><id>11748275</id><snippet>tuple</snippet></ROW><ROW><id>11748275</id><snippet>args[0]</snippet></ROW><ROW><id>11748275</id><snippet>dict</snippet></ROW><ROW><id>11748275</id><snippet>args</snippet></ROW><ROW><id>11748275</id><snippet>kwargs</snippet></ROW><ROW><id>11748645</id><snippet>for post in data['data']:
    if post.get('caption'):
        print post['caption'].get('text', 0)
</snippet></ROW><ROW><id>11748645</id><snippet>data.get('data', [])</snippet></ROW><ROW><id>11748692</id><snippet>flags</snippet></ROW><ROW><id>11748692</id><snippet># -*- coding: utf-8 -*-
def test(word):
    print re.sub(ur'[^\w]+', u'', word, flags=re.U)
</snippet></ROW><ROW><id>11748692</id><snippet>In [9]: test(u'Ã')
Ã
</snippet></ROW><ROW><id>11748702</id><snippet>not</snippet></ROW><ROW><id>11748702</id><snippet>isinstance</snippet></ROW><ROW><id>11748702</id><snippet>bool</snippet></ROW><ROW><id>11748702</id><snippet>not</snippet></ROW><ROW><id>11748782</id><snippet>os.path.join</snippet></ROW><ROW><id>11748782</id><snippet>strftime</snippet></ROW><ROW><id>11748782</id><snippet>if</snippet></ROW><ROW><id>11748782</id><snippet>dirname = os.path.join(self.fDirectory,strftime("AutoGen%Y-%m-%d_%H.%M.%S",gmtime()))

if not os.path.isdir(dirname):
    os.mkdir(dirname)
</snippet></ROW><ROW><id>11748782</id><snippet>myTree.write(os.path.join(dirname, self.filename + "_" + str(anum) + ".xml"))
</snippet></ROW><ROW><id>11749148</id><snippet>keys =['(Lag)=(\d+\.?\d*)',
    '(Autocorrelation Index): (\d+\.?\d*)',
    '(Semivariance): (\d+\.?\d*)']

import re
string1 = ''.join(open("dummy.txt").readlines())

sections = string1.split('Spatial Statistics')

output = []
heads = []

for isec, sec in enumerate(sections):
    found = []
    output.append([])
    for key in keys:
        found.extend(re.findall(key, sec))
    for result in found:
        print '%s  =  %s' % (result[0],result[1])
        output[-1].append(result[1])
    if len(found) &gt; 0 &amp; len(heads) == 0:
        heads = [result[0] for result in found]    

fout = open('output.csv', 'w')
wrt = csv.writer(fout)
wrt.writerow(heads)
wrt.writerows(outputs)
fout.close()
</snippet></ROW><ROW><id>11749167</id><snippet>c.func</snippet></ROW><ROW><id>11749167</id><snippet>c.func = c.func</snippet></ROW><ROW><id>11749167</id><snippet>C</snippet></ROW><ROW><id>11749167</id><snippet>c.func</snippet></ROW><ROW><id>11749167</id><snippet>&gt;&gt;&gt; class C(object):
...     def __init__(self, name):
...         self.name = name
...     def func(self, a):
...         print("Called {0} with {1}".format(self.name, a))
&gt;&gt;&gt; one = C("one")
&gt;&gt;&gt; two = C("two")
&gt;&gt;&gt; one.func(1)
Called one with 1
&gt;&gt;&gt; two.func(1)
Called two with 1
&gt;&gt;&gt; one.func2 = two.func
&gt;&gt;&gt; one.func2(1)
Called two with 1
</snippet></ROW><ROW><id>11749167</id><snippet>one.func2 = two.func</snippet></ROW><ROW><id>11749167</id><snippet>one.func2</snippet></ROW><ROW><id>11749167</id><snippet>two</snippet></ROW><ROW><id>11749167</id><snippet>one</snippet></ROW><ROW><id>11749167</id><snippet>two.func</snippet></ROW><ROW><id>11749167</id><snippet>&gt;&gt;&gt; one.func3 = C.func
&gt;&gt;&gt; one.func3(1)
Traceback (most recent call last):
  File "&lt;pyshell#16&gt;", line 1, in &lt;module&gt;
    one.func3(1)
TypeError: unbound method func() must be called with C instance as first argument (got int instance instead)
</snippet></ROW><ROW><id>11749167</id><snippet>one</snippet></ROW><ROW><id>11749167</id><snippet>&gt;&gt;&gt; def newFunc(self, a):
...     print("Newfunc of {0} called with {1}".format(self.name, a))
&gt;&gt;&gt; C.newFunc = newFunc
&gt;&gt;&gt; one.newFunc(1)
Newfunc of one called with 1
</snippet></ROW><ROW><id>11749167</id><snippet>c.func</snippet></ROW><ROW><id>11749167</id><snippet>c</snippet></ROW><ROW><id>11749167</id><snippet>c</snippet></ROW><ROW><id>11749167</id><snippet>func</snippet></ROW><ROW><id>11749167</id><snippet>c</snippet></ROW><ROW><id>11749167</id><snippet>func</snippet></ROW><ROW><id>11749167</id><snippet>c</snippet></ROW><ROW><id>11749254</id><snippet>readonly</snippet></ROW><ROW><id>11749254</id><snippet>{{ form.field_name.label_tag }}
{{form.field_name.value}}
&lt;input type="hidden" name="field_name" value="{{form.field_name.value}}" /&gt;
</snippet></ROW><ROW><id>11749254</id><snippet>//Untested, but you get the gist
$(':disabled').each(
    function()
    {
        $(this).after('&lt;input type="hidden" name="' + $(this).attr('name') + '" value="' + $(this).val() + '" /&gt;');
    }
);
</snippet></ROW><ROW><id>11749333</id><snippet>from somewhere import *</snippet></ROW><ROW><id>11749333</id><snippet>import importlib

website_modules = {'Website A': 'website_a', 'Website B': 'website_b'}

# ...

website = importlib.import_module(website_modules[source_website])

# use with website.function_name
</snippet></ROW><ROW><id>11749335</id><snippet>numbers = [1,2,3,4,5,6]

with open('output.txt', 'w') as f:
  f.write('\t'.join(numbers))
</snippet></ROW><ROW><id>11749481</id><snippet>class StretchDialog(wx.Dialog):

    '''A generic image processing dialogue which handles data IO and user interface.
      This is extended for individual stretches to allow for the necessary parameters
      to be defined.'''

    def __init__(self, *args, **kwargs):
        super(StretchDialog, self).__init__(*args, **kwargs)

        self.InitUI()
        self.SetSize((600,700))

   def InitUI(self):
       #save references for later access
       self.panel =  wx.Panel(self)
       self.sizer = wx.GridBagSizer(10,5)
</snippet></ROW><ROW><id>11749481</id><snippet>class LinearStretchSubClass(StretchDialog):
'''This class subclasses Stretch Dialog and extends it by adding 
the necessary UI elements for a linear stretch'''

    def InitUI(self):
    '''Inherits all of the UI items from StretchDialog.InitUI if called as a method'''
         StretchDialog.InitUI(self) #call parent function
         testtext = wx.StaticText(self.panel, label="This is a test")
         self.sizer.Add(testtext, pos=(10,3))
</snippet></ROW><ROW><id>11749643</id><snippet>DECLARE @start_date AS DATETIME = '2012-02-02'; 
WITH L0 AS (SELECT 1 AS C UNION ALL SELECT 1),       --      2 
     L1 AS (SELECT L0.C FROM L0 CROSS JOIN L0 AS B), --      4 
     L2 AS (SELECT L1.C FROM L1 CROSS JOIN L1 AS B), --     16 
     L3 AS (SELECT L2.C FROM L2 CROSS JOIN L2 AS B), --    256 
     L4 AS (SELECT L3.C FROM L3 CROSS JOIN L3 AS B), --  65536 
      N AS (SELECT ROW_NUMBER() OVER(ORDER BY L4.C) AS n FROM L4), 
      D AS (SELECT DATEADD(SECOND, n - 1, @start_date) AS d, n FROM N) 
SELECT d from D where n &lt;= (60 * 60 * 24) 
</snippet></ROW><ROW><id>11749643</id><snippet>SELECT</snippet></ROW><ROW><id>11749643</id><snippet>WITH 
  MLIS as ( -- Description of what this piece is supposed to mean.
    SELECT DISTINCT mlis_practice_id, requestor_npi, requestor_first_name, requestor_last_name  
      FROM complete  
      WHERE Len(requestor_last_name) &gt; 0 ),
  Physician as ( -- Description of what this piece is supposed to mean.
    SELECT *
      FROM millennium_dw..d_physician  
      WHERE received_ims_information = 1 ),
  Client as ( -- Description of what this piece is supposed to mean.
    SELECT *  
      FROM millennium_dw..d_client  
      WHERE rec_active_flg = 1 ), 
  cte_biggie as ( -- Something I've totally bodged that should use the above CTEs.
    SELECT LEFT('I'+Replicate(' ', 2), 2), ... )
SELECT * from CTE_Biggie
</snippet></ROW><ROW><id>11749989</id><snippet>self.c.create_image(574, 431, anchor=NW, image=self.c.photo)
</snippet></ROW><ROW><id>11749989</id><snippet>self.c.create_image(0, 0, anchor=NW, image=self.c.photo)
</snippet></ROW><ROW><id>11749989</id><snippet>from Tkinter import * 
from PIL import Image, ImageTk, ImageDraw, ImageOps, ImageEnhance


class ImageButcher(Tk):
    def __init__(self):
        Tk.__init__(self)

        #create ui
        f = Frame(self, bd=2)

        self.colour = StringVar(self)
        self.colourMenu = OptionMenu(f, self.colour,
                                     *('red','green','blue','white'))
        self.colourMenu.config(width=5)
        self.colour.set('red')
        self.colourMenu.pack(side='left')

        self.rectangleButton = Button(f, text='Rectangle',
                                    command=self.draw_rectangle)
        self.rectangleButton.pack(side='left')

        self.brightenButton = Button(f, text='Brighten',
                                    command=self.on_brighten)
        self.brightenButton.pack(side='left')

        self.mirrorButton = Button(f, text='Mirror',
                                    command=self.on_mirror)
        self.mirrorButton.pack(side='left')
        f.pack(fill='x')

        self.c = Canvas(self, bd=0, highlightthickness=0,
                        width=100, height=100)
        self.c.pack(fill='both', expand=1)

        #load image
        im = Image.open('IMG_1584.JPG')
        im.thumbnail((512,512))

        self.tkphoto = ImageTk.PhotoImage(im)
        self.canvasItem = self.c.create_image(0,0,anchor='nw',image=self.tkphoto)
        self.c.config(width=im.size[0], height=im.size[1])

        self.img = im
        self.temp = im.copy() # 'working' image

    def display_image(self, aImage):
        self.tkphoto = pic = ImageTk.PhotoImage(aImage)
        self.c.itemconfigure(self.canvasItem, image=pic)

    def on_mirror(self):
        im = ImageOps.mirror(self.temp)
        self.display_image(im)
        self.temp = im

    def on_brighten(self):
        brightener = ImageEnhance.Brightness(self.temp)
        self.temp = brightener.enhance(1.1) # +10%
        self.display_image(self.temp)

    def draw_rectangle(self):
        bbox = 9, 9, self.temp.size[0] - 11, self.temp.size[1] - 11        
        draw = ImageDraw.Draw(self.temp)
        draw.rectangle(bbox, outline=self.colour.get())
        self.display_image(self.temp)


app = ImageButcher()
app.mainloop()
</snippet></ROW><ROW><id>11750212</id><snippet>widget</snippet></ROW><ROW><id>11750212</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>11750212</id><snippet>setup.py</snippet></ROW><ROW><id>11750212</id><snippet>distutils</snippet></ROW><ROW><id>11750212</id><snippet>__init__.py</snippet></ROW><ROW><id>11750310</id><snippet>&gt;&gt;&gt; sys.getsizeof(Test())+sys.getsizeof(Test().__dict__)
344
&gt;&gt;&gt; (sys.getsizeof(Test())+sys.getsizeof(Test().__dict__)) * 1000000 / 10**6
34.4 #megabytes
</snippet></ROW><ROW><id>11750310</id><snippet>__slots__</snippet></ROW><ROW><id>11750310</id><snippet>&gt;&gt;&gt; sys.getsizeof(Test2())+sys.getsizeof(Test2().__slots__)
200
&gt;&gt;&gt; sys.getsizeof(Test2())+sys.getsizeof(Test2().__slots__) * 1000000 / 10**6
20.0 #megabytes
</snippet></ROW><ROW><id>11750310</id><snippet>sys.getsizeof</snippet></ROW><ROW><id>11750310</id><snippet>__slots__</snippet></ROW><ROW><id>11750310</id><snippet>class Test2():
    __slots__ = ['a','b','c','d','e']

    def __init__(self):
        ...
</snippet></ROW><ROW><id>11750334</id><snippet>data</snippet></ROW><ROW><id>11750334</id><snippet>temp_c</snippet></ROW><ROW><id>11750334</id><snippet>weathersoup.temp_c['data']
</snippet></ROW><ROW><id>11750381</id><snippet>u = User.query(User.name == name).get()
</snippet></ROW><ROW><id>11750502</id><snippet>int</snippet></ROW><ROW><id>11750502</id><snippet>y = sorted(x, key=int)</snippet></ROW><ROW><id>11750673</id><snippet>im.save('lala.jpg')</snippet></ROW><ROW><id>11750673</id><snippet>Image</snippet></ROW><ROW><id>11750676</id><snippet>QObject.connect</snippet></ROW><ROW><id>11750925</id><snippet>'.'</snippet></ROW><ROW><id>11750925</id><snippet>'o'</snippet></ROW><ROW><id>11750925</id><snippet>yscale('log')</snippet></ROW><ROW><id>11750925</id><snippet>plt.plot(list1, 'r.')
plt.plot(list2, 'b.')
plt.plot(list3, 'g.')
plt.ylabel('cosine values')
plt.yscale('log')
plt.show()
</snippet></ROW><ROW><id>11750959</id><snippet>orders = got_something_from_db()
for order in orders: #make got something return empty iterable on failure
    if order["event_id"] in event_id_dict:
        product_id = order["product_id"]
        try:
            sku_id = product_sku_dict[product_id]
            #Change sku_ids to a collections.Counter (assuming order is unimportant)
            sku_ids[sku_id] += order["qty"] 
        except KeyError:
            pass
</snippet></ROW><ROW><id>11751134</id><snippet>collections.Counter</snippet></ROW><ROW><id>11751134</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; d = {'a': [4,'Adam', 2], 'b': [3,'John', 4], 'c': [4,'Adam', 3], 'd': [4,'Bill', 3], 'e': [4,'Bob'], 'f': [4, 'Joe'], 'g': [4, 'Bill']}
&gt;&gt;&gt; # create a list of only the values you want to count,
&gt;&gt;&gt; # and pass to Counter()
&gt;&gt;&gt; c = Counter([values[1] for values in d.itervalues()])
&gt;&gt;&gt; c
Counter({'Adam': 2, 'Bill': 2, 'Bob': 1, 'John': 1, 'Joe': 1})
</snippet></ROW><ROW><id>11751183</id><snippet>not (True and False)
</snippet></ROW><ROW><id>11751183</id><snippet>(x + y) * z</snippet></ROW><ROW><id>11751183</id><snippet>x + y * z</snippet></ROW><ROW><id>11751183</id><snippet>x + (y * z)</snippet></ROW><ROW><id>11751183</id><snippet>and</snippet></ROW><ROW><id>11751183</id><snippet>and(1)</snippet></ROW><ROW><id>11751183</id><snippet>(x) and (y)</snippet></ROW><ROW><id>11751398</id><snippet>regex</snippet></ROW><ROW><id>11751398</id><snippet>fileinput</snippet></ROW><ROW><id>11751398</id><snippet>import fileinput
import re

# Assume the input file is foo.csv
for line in fileinput.FileInput('foo.csv', inplace=1):
    mm = re.search(r'^(.+?,.+?,.+?,)(\d{1,2})(\d{2})\.0+,(\d{1,2})\.0+',
        line)
    g1, g2, g3, g4 = mm.group(1), int(mm.group(2)), int(mm.group(3)), int(mm.group(4))
    print "%s%02i:%02i:%02i," % (g1, g2, g3, g4)
</snippet></ROW><ROW><id>11751398</id><snippet>-959.378170,-0.000026,-94.960000,15:08:09,
-958.978170,-0.000026,-94.920000,15:08:09,
-958.578170,-0.000026,-94.880000,15:08:10,
-958.178170,-0.000026,-94.840000,15:08:10,
-957.778170,-0.000026,-94.800000,15:08:10,
</snippet></ROW><ROW><id>11751412</id><snippet>sorted</snippet></ROW><ROW><id>11751412</id><snippet>&gt;&gt;&gt; [l[1] for l in DICT['XYZ']]
[1.82, 1.5, 1.21, 1.28]
&gt;&gt;&gt; min(l[1] for l in DICT['ABC'])
1.22
&gt;&gt;&gt; sorted(DICT, key=lambda k: min(l[1] for l in DICT[k]))
['XYZ', 'ABC']
</snippet></ROW><ROW><id>11751450</id><snippet>__bases__</snippet></ROW><ROW><id>11751450</id><snippet>def figure_out_spouse_class(self):
    return [b.__name__ for b in self.__class__.__bases__ if b != Father]
</snippet></ROW><ROW><id>11751672</id><snippet>option</snippet></ROW><ROW><id>11751672</id><snippet>option = int(input("What option: "))
while option != 9:
</snippet></ROW><ROW><id>11751672</id><snippet>while</snippet></ROW><ROW><id>11751672</id><snippet>option</snippet></ROW><ROW><id>11751672</id><snippet>while</snippet></ROW><ROW><id>11751672</id><snippet>dict</snippet></ROW><ROW><id>11751759</id><snippet>@classmethod
def scan(self, stuff):
</snippet></ROW><ROW><id>11751948</id><snippet>import os, zipfile  
from os.path import join  
def zipfolder(foldername, filename, includeEmptyDIr=True):   
    empty_dirs = []  
    zip = zipfile.ZipFile(filename, 'w', zipfile.ZIP_DEFLATED)  
    for root, dirs, files in os.walk(foldername):  
        empty_dirs.extend([dir for dir in dirs if os.listdir(join(root, dir)) == []])  
        for name in files:  
            zip.write(join(root ,name))  
        if includeEmptyDIr:  
            for dir in empty_dirs:  
                zif = zipfile.ZipInfo(join(root, dir) + "/")  
                zip.writestr(zif, "")  
        empty_dirs = []  
    zip.close() 

if __name__ == "__main__":
    zipfolder('test1/noname/', 'zip.zip')
</snippet></ROW><ROW><id>11752055</id><snippet>def func(foo=3):
    print(foo)
</snippet></ROW><ROW><id>11752055</id><snippet>{'foo':3}</snippet></ROW><ROW><id>11752055</id><snippet>foo</snippet></ROW><ROW><id>11752055</id><snippet>d = {"foo":8}
func(**d)
</snippet></ROW><ROW><id>11752055</id><snippet>func</snippet></ROW><ROW><id>11752055</id><snippet>d = {"foo":8, "bar":12}
func(**d)
</snippet></ROW><ROW><id>11752055</id><snippet>foo(foo=8, bar=12)</snippet></ROW><ROW><id>11752055</id><snippet>bar</snippet></ROW><ROW><id>11752055</id><snippet>foo</snippet></ROW><ROW><id>11752055</id><snippet>def func( foo=3, **kwargs ):
    print(foo,kwargs)
</snippet></ROW><ROW><id>11752055</id><snippet>d = {"foo":8, "bar":12}
func(**d)  #prints (8, {'bar':12})
</snippet></ROW><ROW><id>11752055</id><snippet>func(foo=8, bar=12)
</snippet></ROW><ROW><id>11752055</id><snippet>def funcA(newkey=None,**kwargs): 
    funcB(**kwargs)
</snippet></ROW><ROW><id>11752185</id><snippet>id   |   name
-------------
1    |   Zane
2    |   Jeff
3    |   Troy
5    |   Steffan
6    |   Lolo
7    |   Katrina
</snippet></ROW><ROW><id>11752185</id><snippet>from_id   |   to_id
-------------------
1         |   5
1         |   6
2         |   5
2         |   1
2         |   5
3         |   1
5         |   1
5         |   2
7         |   5
</snippet></ROW><ROW><id>11752185</id><snippet>from_id</snippet></ROW><ROW><id>11752185</id><snippet>to_id</snippet></ROW><ROW><id>11752185</id><snippet>5</snippet></ROW><ROW><id>11752185</id><snippet>1</snippet></ROW><ROW><id>11752185</id><snippet>id   |   name
--------------
1    |   Zane
7    |   Katrina
</snippet></ROW><ROW><id>11752185</id><snippet>SELECT    a.id, a.name
FROM      person a
JOIN      relationship b ON a.id = b.from_id
LEFT JOIN (
          SELECT from_id
          FROM   relationship
          WHERE  to_id = 1
          ) c ON b.from_id = c.from_id
WHERE     b.to_id = 5 AND
          c.from_id IS NULL
</snippet></ROW><ROW><id>11752376</id><snippet>import Image
import ImageFilter

file = '/home/phius/test.jpg'
img = Image.open(file)
img2 = img.filter(ImageFilter.UnsharpMask) # note it returns a new image
img2.save(file)
</snippet></ROW><ROW><id>11753046</id><snippet>existing = re.search('\.(js?"', line)
if existing is not None:
    line[i] = line.replace('.js?'STRING????'"', '.js"')
</snippet></ROW><ROW><id>11753046</id><snippet>re.sub(r'\.js\?[-0-9]{10}"&gt;',r'.js?"&gt;', line)
</snippet></ROW><ROW><id>11753046</id><snippet>&gt;&gt;&gt; re.sub(r'\.js\?[-0-9]{10}"&gt;',r'.js?"&gt;', '&lt;script type="blah" src="url/to/path.js?2012-07-02"&gt;')
'&lt;script type="blah" src="url/to/path.js?"&gt;'
</snippet></ROW><ROW><id>11753046</id><snippet>[-0-9]{10}</snippet></ROW><ROW><id>11753046</id><snippet>.{10}</snippet></ROW><ROW><id>11753075</id><snippet>flask_foo</snippet></ROW><ROW><id>11753075</id><snippet>flaskext.foo</snippet></ROW><ROW><id>11753075</id><snippet>flask.ext.foo</snippet></ROW><ROW><id>11753075</id><snippet>flask_foo</snippet></ROW><ROW><id>11753075</id><snippet>flaskext.foo</snippet></ROW><ROW><id>11753075</id><snippet>flask.ext.foo</snippet></ROW><ROW><id>11753075</id><snippet>from flask.ext.login import LoginManager
</snippet></ROW><ROW><id>11753256</id><snippet>\</snippet></ROW><ROW><id>11753256</id><snippet>cmd = ('exec ' + cs_bin + ' ' +
       vmtree.rsplit('-', 1)[1].split('/')[0] + ' --xml ' + tmp_corefile + ' | ' 
       + XML2HTML)
</snippet></ROW><ROW><id>11753308</id><snippet>object.__getattribute__</snippet></ROW><ROW><id>11753308</id><snippet>PyObject_GenericGetAttr</snippet></ROW><ROW><id>11753308</id><snippet>mro</snippet></ROW><ROW><id>11753308</id><snippet>name</snippet></ROW><ROW><id>11753308</id><snippet>__get__</snippet></ROW><ROW><id>11753308</id><snippet>__get__</snippet></ROW><ROW><id>11753308</id><snippet>raise AttributeError</snippet></ROW><ROW><id>11753308</id><snippet>name</snippet></ROW><ROW><id>11753308</id><snippet>__get__</snippet></ROW><ROW><id>11753308</id><snippet>&gt;&gt;&gt; class F:
...    def __getattribute__(self, attr):
...      print('hi')
...      return object.__getattribute__(self, attr)
... 
&gt;&gt;&gt; f = F()
&gt;&gt;&gt; f.blah = property(lambda: 5)
&gt;&gt;&gt; f.blah
hi
&lt;property object at 0xbfa1b0&gt;
</snippet></ROW><ROW><id>11753308</id><snippet>.__getattribute__</snippet></ROW><ROW><id>11753308</id><snippet>f.blah</snippet></ROW><ROW><id>11753945</id><snippet>&gt;&gt;&gt; text = 'xxxx'
&gt;&gt;&gt; d = {'xxx' : '3','xx' : '2'}
&gt;&gt;&gt; for k in sorted(d, key=len, reverse=True): # Through keys sorted by length
        text = text.replace(k, d[k])


&gt;&gt;&gt; text
'3x'
</snippet></ROW><ROW><id>11754657</id><snippet>memcpy</snippet></ROW><ROW><id>11754657</id><snippet>struct</snippet></ROW><ROW><id>11754657</id><snippet>chunk = fileobj.read(3)
# decode bytes as little-endian, signed integer
chunk += '\x00'
number = struct.unpack('&lt;i', chunk)
</snippet></ROW><ROW><id>11754657</id><snippet>fileobj</snippet></ROW><ROW><id>11754657</id><snippet>open(filename, 'rb')</snippet></ROW><ROW><id>11754741</id><snippet>e = "/some/path" in h5File
</snippet></ROW><ROW><id>11754849</id><snippet>_meta</snippet></ROW><ROW><id>11754849</id><snippet>In [1]: from django.contrib.auth.models import User

In [2]: len(User._meta.fields)
Out[2]: 11

In [3]: len(User._meta.many_to_many)
Out[3]: 4
</snippet></ROW><ROW><id>11754882</id><snippet>myString = 'Johnny picked an APPLE from the tree'
slicedString = myString[:25]
# do regex matching on slicedString
</snippet></ROW><ROW><id>11755212</id><snippet>norm=True</snippet></ROW><ROW><id>11755212</id><snippet>x=np.arange(0.1,1.1,0.1)
array([ 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])

# Bin size
bins = np.arange(0.05, 1.15, 0.1)
np.histogram(x,bins=bins,normed=1)[0]
[ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.]
np.histogram(x,bins=bins,normed=0)[0]/float(len(x))
[ 0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1]

# Change the bin size
bins = np.arange(0.05, 1.15, 0.2)
np.histogram(x,bins=bins,normed=1)[0]
[ 1.,  1.,  1.,  1.,  1.]
np.histogram(x,bins=bins,normed=0)[0]/float(len(x))
[ 0.2,  0.2,  0.2,  0.2,  0.2]
</snippet></ROW><ROW><id>11755212</id><snippet>[0.05-0.15]</snippet></ROW><ROW><id>11755212</id><snippet>[0.15-0.25]</snippet></ROW><ROW><id>11755212</id><snippet>1/10</snippet></ROW><ROW><id>11755212</id><snippet>0.2</snippet></ROW><ROW><id>11755212</id><snippet>[0.05-0.25]</snippet></ROW><ROW><id>11755212</id><snippet>[0.25-0.45]</snippet></ROW><ROW><id>11755212</id><snippet>1/5</snippet></ROW><ROW><id>11755224</id><snippet>urllib2</snippet></ROW><ROW><id>11755224</id><snippet>result = False
error = None
try:
    # Open URL
    urllib2.urlopen(url, timeout=TIMEOUT)
    result = True
except urllib2.URLError as exc:
    error = 'URL Error: {0}'.format(str(exc))
except urllib2.HTTPError as exc:
    error = 'HTTP Error: {0}'.format(str(exc))
except Exception as exc:
    error = 'Unknow error: {0}'.format(str(exc))
</snippet></ROW><ROW><id>11755360</id><snippet>buffpkt = pkt[:]
</snippet></ROW><ROW><id>11755360</id><snippet>buffpkt</snippet></ROW><ROW><id>11755403</id><snippet>`''.join(somestring.split(r'\r'))`
</snippet></ROW><ROW><id>11755403</id><snippet>`somestring.replace(r'\r','')`
</snippet></ROW><ROW><id>11755590</id><snippet>cursor.execute('''SELECT * FROM MyTable''')
self.tblTable.setRowCount(0)
for row, form in enumerate(cursor):
    self.tblTable.insertRow(row)
    for column, item in enumerate(form):
        print(str(item))
        self.tblTable.setItem(row, column, QtGui.QTableWidgetItem(str(item)))       
</snippet></ROW><ROW><id>11755590</id><snippet>cursor.rowcount</snippet></ROW><ROW><id>11755590</id><snippet>.setRowCount</snippet></ROW><ROW><id>11755590</id><snippet>cursor.execute('''SELECT * FROM MyTable''')
self.tblTable.setRowCount(cursor.rowcount)
for row, form in enumerate(cursor):
    for column, item in enumerate(form):
        self.tblTable.setItem(row, column, QtGui.QTableWidgetItem(str(item)))       
</snippet></ROW><ROW><id>11755590</id><snippet>.rowcount</snippet></ROW><ROW><id>11755590</id><snippet>rowcount = cursor.execute('''SELECT COUNT(*) FROM MyTable''').fetchone()[0]
self.tblTable.setRowCount(rowcount)
cursor.execute('''SELECT * FROM MyTable''')
for row, form in enumerate(cursor):
    for column, item in enumerate(form):
        self.tblTable.setItem(row, column, QtGui.QTableWidgetItem(str(item)))       
</snippet></ROW><ROW><id>11755590</id><snippet>enumerate</snippet></ROW><ROW><id>11755590</id><snippet>.fetchall()</snippet></ROW><ROW><id>11755603</id><snippet>select</snippet></ROW><ROW><id>11755603</id><snippet>form</snippet></ROW><ROW><id>11755603</id><snippet>select</snippet></ROW><ROW><id>11755603</id><snippet>form</snippet></ROW><ROW><id>11755603</id><snippet>form</snippet></ROW><ROW><id>11756155</id><snippet>traits.api</snippet></ROW><ROW><id>11756155</id><snippet>enthought.traits.api</snippet></ROW><ROW><id>11756967</id><snippet>import BeautifulSoup

def get_queue(data):
    # Args:
    #   data: string, contains the html to be scraped
    soup = BeautifulSoup.BeautifulSoup(data)
    stable = soup.find('table')

    header = stable.findAll('th')
    headers = [ th.text for th in header ]

    cells = [ ]
    rows = stable.findAll('tr')
    for tr in rows[1:-2]:
        # Process the body of the table
        row = []
        td = tr.findAll('td')
        row.append( td[0].find('a').text )
        row.append( td[1].find('a').text )
        row.extend( [ td.text for td in td[2:] ] )
        cells.append( row )

    footer = rows[-1].find('td').text
    return headers, cells, footer
</snippet></ROW><ROW><id>11756967</id><snippet>headers</snippet></ROW><ROW><id>11756967</id><snippet>cells</snippet></ROW><ROW><id>11756967</id><snippet>footer</snippet></ROW><ROW><id>11756967</id><snippet>texttable</snippet></ROW><ROW><id>11756967</id><snippet>import texttable
def show_table(headers, cells, footer):
    retval = ''
    table = texttable.Texttable()
    table.header(headers)
    for cell in cells:
        table.add_row(cell)
    retval = table.draw()
    return retval + '\n' + footer

print show_table(headers, cells, footer)
</snippet></ROW><ROW><id>11756967</id><snippet>+----------+----------+----------+----------+----------+----------+----------+
| Artist - |  Album   |  Album   |  Series  | Duration | Type of  | Time to  |
|  Title   |          |   Type   |          |          |   Play   |   play   |
+==========+==========+==========+==========+==========+==========+==========+
| Song 1   | Album 1  | ...      |          | 5:43     | S.A.M.   | ~0:00:00 |
+----------+----------+----------+----------+----------+----------+----------+
| Song2    | Album 2  | ...      |          | 6:16     | S.A.M.   | ~0:05:43 |
+----------+----------+----------+----------+----------+----------+----------+
| Song 3   | Album 3  | ...      |          | 4:13     | S.A.M.   | ~0:11:59 |
+----------+----------+----------+----------+----------+----------+----------+
| Song 4   | Album 4  | ...      |          | 5:34     | S.A.M.   | ~0:16:12 |
+----------+----------+----------+----------+----------+----------+----------+
| Song 5   | Album 5  | ...      |          | 4:23     | S.A.M.   | ~0:21:46 |
+----------+----------+----------+----------+----------+----------+----------+
There are x songs in the queue with a total length of x:y:z.
</snippet></ROW><ROW><id>11757347</id><snippet>seen = set()
for el in lt1:
    if el in seen:
        raise ValueError, 'More than one %r in your list' % (el,)
    seen.add(el)
</snippet></ROW><ROW><id>11757347</id><snippet>seen = set()
for el in lt22:
    el = tuple(el)
    if el in seen:
        raise ValueError, 'More than one %r in your list' % (el,)
    seen.add(el)
</snippet></ROW><ROW><id>11757455</id><snippet>var = mygroup.work_list.get(file=path+'/'+request.FILES['file'].name)</snippet></ROW><ROW><id>11757504</id><snippet>python manage.py datamigration myapp name_migration
</snippet></ROW><ROW><id>11757548</id><snippet>os.path.dirname(filename)</snippet></ROW><ROW><id>11758034</id><snippet>inspect.getfile(sys._getframe(1))
</snippet></ROW><ROW><id>11758034</id><snippet>sys._getframe(1)</snippet></ROW><ROW><id>11758034</id><snippet>inspect.getfile(...)</snippet></ROW><ROW><id>11758113</id><snippet>import numpy as np    # requires NumPy 1.7 (!)

def select_random(object_dict, n):
    keys = object_dict.keys()
    rate = np.array([x.rate for x in keys])
    prob = rate / rate.sum()
    return np.random.choice(keys, size=n, replace=True, p=prob)
</snippet></ROW><ROW><id>11758113</id><snippet>object</snippet></ROW><ROW><id>11758279</id><snippet>wsgihandler.py</snippet></ROW><ROW><id>11758279</id><snippet>activate_this = '/path/to/virtualenv/bin/activate_this.py'
execfile(activate_this, dict(__file__=activate_this)
import sys
sys.path.insert(0, '/path/to/web2py_dir')
</snippet></ROW><ROW><id>11758637</id><snippet>for j in range(len(shipList) - 1, -1, -1):
</snippet></ROW><ROW><id>11758906</id><snippet>links = dict((name(link), link) for link in parsed_links)
</snippet></ROW><ROW><id>11759118</id><snippet>def isPalindrome(word) : return word == word[::-1]
</snippet></ROW><ROW><id>11759118</id><snippet>def palindrome(word):
   for i in range(len(word)//2):
         if word[i] != word[-1-i]:
                 return False
   return True
</snippet></ROW><ROW><id>11759156</id><snippet>json.dumps</snippet></ROW><ROW><id>11759156</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>11759156</id><snippet>json_string = json.dumps(json_dict, ensure_ascii=False)
</snippet></ROW><ROW><id>11759156</id><snippet>unicode</snippet></ROW><ROW><id>11759156</id><snippet>str</snippet></ROW><ROW><id>11759156</id><snippet>encode</snippet></ROW><ROW><id>11759279</id><snippet>from os import path

zf = zipfile.ZipFile( zipPath, mode='w' )
for file in files:
    with NamedTemporaryFile(mode='w+b', bufsize=-1, prefix='tmp') as tempFile:
       tempPath = tempFile.name
    with open(tempPath, 'w') as f:
       write stuff to tempPath with contents of the variable 'file'
    zf.write(tempPath,arcname=path.basename(tempPath))

zf.close()
</snippet></ROW><ROW><id>11759279</id><snippet>os.path.basename</snippet></ROW><ROW><id>11759291</id><snippet>class Person(object): #always inherit from object.  It's just a good idea...
    @staticmethod
    def call_person():
        print "hello person"

#Calling static methods works on classes as well as instances of that class
Person.call_person()  #calling on class
p = Person()
p.call_person()       #calling on instance of class
</snippet></ROW><ROW><id>11759291</id><snippet>class Person(object):
    @classmethod
    def call_person(cls):
        print "hello person",cls

p = Person().call_person() #using classmethod on instance
Person.call_person()       #using classmethod on class
</snippet></ROW><ROW><id>11759291</id><snippet>Person</snippet></ROW><ROW><id>11759291</id><snippet>Person.py</snippet></ROW><ROW><id>11759291</id><snippet>import Person  #Person class is available as Person.Person
Person.Person.call_person() #this should work
Person.Person().call_person() #this should work as well
</snippet></ROW><ROW><id>11759291</id><snippet>from Person import Person
Person.call_person()
</snippet></ROW><ROW><id>11759291</id><snippet>datetime</snippet></ROW><ROW><id>11759291</id><snippet>datetime</snippet></ROW><ROW><id>11759291</id><snippet>#Person.py
def call_person():
    print "Hello person"
</snippet></ROW><ROW><id>11759291</id><snippet>import Person
Person.call_person() #'Hello person'
</snippet></ROW><ROW><id>11759306</id><snippet>f = open(file_name)
for line in f:
  s = line.split(':')
  print s[0],s[2]
</snippet></ROW><ROW><id>11759545</id><snippet>python-oauth</snippet></ROW><ROW><id>11759545</id><snippet>python-oauth2</snippet></ROW><ROW><id>11759825</id><snippet>print soup.find('a', id='_uscAncHomesite')                                      
# &lt;a href="0" id="_uscAncHomesite" target="_blank"&gt;...&lt;/a&gt;
</snippet></ROW><ROW><id>11760170</id><snippet>&gt;&gt;&gt; np.fromstring(b'\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='&lt;f4') # or dtype=np.dtype('&lt;f4'), or np.float32 on a little-endian system (which most computers are these days)
array([ 1.,  2.,  3.,  4.], dtype=float32)
</snippet></ROW><ROW><id>11760170</id><snippet>&gt;&gt;&gt; np.fromstring(b'\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='&gt;f4') # or dtype=np.dtype('&gt;f4'), or np.float32  on a big-endian system
array([  4.60060299e-41,   8.96831017e-44,   2.30485571e-41,
         4.60074312e-41], dtype=float32)
</snippet></ROW><ROW><id>11760170</id><snippet>b</snippet></ROW><ROW><id>11760170</id><snippet>numpy.fromfile()</snippet></ROW><ROW><id>11760392</id><snippet>thread</snippet></ROW><ROW><id>11760392</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>11760392</id><snippet>import time
import threading

def do_something():
    T0 = time.clock()
    while (time.clock() - T0) &lt; 60 and not e.isSet(): #as long as 60s haven't elapsed
                                                      #and the flag is not set
        #here do a bunch of stuff
        time.sleep(5)

thread = threading.Thread(target=do_something, args=())
e = threading.Event()
thread.start()

print 'Press CTRL-C to interrupt'
while thread.isAlive():
    try: time.sleep(1) #wait 1 second, then go back and ask if thread is still alive
    except KeyboardInterrupt: #if ctrl-C is pressed within that second,
                              #catch the KeyboardInterrupt exception
        e.set() #set the flag that will kill the thread when it has finished
        print 'Exiting...'
        thread.join() #wait for the thread to finish
</snippet></ROW><ROW><id>11760392</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>11760392</id><snippet>import time
import threading
import Tkinter as Tk

def do_something():
    T0 = time.clock()
    while (time.clock() - T0) &lt; 60 and not e.isSet(): #as long as 60s haven't elapsed
                                                      #and the flag is not set
        #here do a bunch of stuff
        time.sleep(5)

def _quit():
    print 'Exiting...'
    e.set()
    thread.join() #wait for the thread to finish
    root.quit()
    root.destroy()

root = Tk.Tk()
QuitButton = Tk.Button(master=root, text='Quit', command=_quit) #the quit button
QuitButton.pack(side=Tk.BOTTOM)

thread = threading.Thread(target=do_something, args=())
e = threading.Event()
thread.start()
root.mainloop()
</snippet></ROW><ROW><id>11760480</id><snippet>def a(): pass
</snippet></ROW><ROW><id>11760480</id><snippet>()</snippet></ROW><ROW><id>11760480</id><snippet>def a(arg1, arg2): pass</snippet></ROW><ROW><id>11760526</id><snippet>optparse</snippet></ROW><ROW><id>11760526</id><snippet>optparse</snippet></ROW><ROW><id>11760526</id><snippet>argparse</snippet></ROW><ROW><id>11760526</id><snippet>nargs='?'</snippet></ROW><ROW><id>11760526</id><snippet>group.add_argument('-l', '--list', dest="list_server_or_group_name",
                   help='Get group or server state/configuration',
                   nargs='?', default=None, const='all')
</snippet></ROW><ROW><id>11760682</id><snippet>-a</snippet></ROW><ROW><id>11760682</id><snippet>-u</snippet></ROW><ROW><id>11760682</id><snippet>--web-port</snippet></ROW><ROW><id>11760682</id><snippet>add</snippet></ROW><ROW><id>11760682</id><snippet>python my_script.py add name --web_port=XXXX
python my_script.py upgrade name
</snippet></ROW><ROW><id>11760682</id><snippet>parser = argparse.ArgumentParser(description='Deployment tool')
subparsers = argparse.add_subparsers()
add_p = subparsers.add_parser('add')
add_p.add_argument("name")
add_p.add_argument("--web_port")

upg_p = subparsers.add_parser('upgrade')
upg_p.add_argument("name")
</snippet></ROW><ROW><id>11760682</id><snippet>my_script.py upgrade name --web_port=1234
</snippet></ROW><ROW><id>11760682</id><snippet>my_script.py add name upgrade
</snippet></ROW><ROW><id>11760799</id><snippet>&lt;body onload="document.acsForm.submit();"&gt;
</snippet></ROW><ROW><id>11760799</id><snippet>&lt;form name="acsForm"
action="https://www.searspartsdirect.com/partsdirect/j_acegi_cas_security_check?ssonofail=true" 
method="post"&gt;
</snippet></ROW><ROW><id>11760799</id><snippet>&lt;textarea rows=10 cols=80 name="logonPassword"&gt;&lt;/textarea&gt;
&lt;textarea rows=10 cols=80 name="loginId"&gt;&lt;/textarea&gt;
&lt;textarea rows=10 cols=80 name="screenName"&gt;&lt;/textarea&gt;
&lt;textarea rows=10 cols=80 name="errorCode"&gt;&lt;/textarea&gt;
</snippet></ROW><ROW><id>11760799</id><snippet>{'logonPassword': '', 'loginId': '', ...}</snippet></ROW><ROW><id>11760799</id><snippet>http://www.searspartsdirect.com/partsdirect/index.action</snippet></ROW><ROW><id>11761331</id><snippet>import numpy as np

names=np.array(['H', 'B', 'D', 'A', 'I', 'C', 'F'])
a=np.array([[ 0.,   2.4,  6.1,  3.2,  5.2,  3.9,  7.1],
 [2.4,  0.,   4.1,  1.2,  3.2,  1.9,  5.1],
 [6.1,  4.1,  0.,   3.1,  6.9,  2.8,  5.2],
 [3.2,  1.2,  3.1,  0.,   4.,   0.9,  4.1],
 [5.2,  3.2,  6.9,  4.,   0.,   4.7,  7.9],
 [3.9,  1.9 , 2.8,  0.9,  4.7,  0.,   3.8],
 [7.1,  5.1,  5.2,  4.1,  7.9,  3.8,  0. ]])

def pptable(x_axis,y_axis,table):
    def format_field(field, fmt='{:,.2f}'):
        if type(field) is str: return field
        if type(field) is tuple: return field[1].format(field[0])
        return fmt.format(field)     

    def get_max_col_w(table, index):
        return max([len(format_field(row[index])) for row in table])         

    for i,l in enumerate(table):
        l.insert(0,y_axis[i])

    x_axis.insert(0,' ')    
    table.insert(0,x_axis)    
    col_paddings=[get_max_col_w(table, i) for i in range(len(table[0]))]
    for i,row in enumerate(table):
        # left col
        row_tab=[str(row[0]).ljust(col_paddings[0])]
        # rest of the cols
        row_tab+=[format_field(row[j]).rjust(col_paddings[j]) 
                for j in range(1,len(row))]
        print(' '.join(row_tab))         

x_axis=['x{}'.format(c) for c in names]
y_axis=['y{}'.format(c) for c in names]

pptable(x_axis,y_axis,a.tolist()) 
</snippet></ROW><ROW><id>11761331</id><snippet>     xH   xB   xD   xA   xI   xC   xF
yH 0.00 2.40 6.10 3.20 5.20 3.90 7.10
yB 2.40 0.00 4.10 1.20 3.20 1.90 5.10
yD 6.10 4.10 0.00 3.10 6.90 2.80 5.20
yA 3.20 1.20 3.10 0.00 4.00 0.90 4.10
yI 5.20 3.20 6.90 4.00 0.00 4.70 7.90
yC 3.90 1.90 2.80 0.90 4.70 0.00 3.80
yF 7.10 5.10 5.20 4.10 7.90 3.80 0.00
</snippet></ROW><ROW><id>11761465</id><snippet>matlab</snippet></ROW><ROW><id>11761465</id><snippet>PATH</snippet></ROW><ROW><id>11761465</id><snippet>PATH=~/MATLAB/bin/:$PATH
export PATH
</snippet></ROW><ROW><id>11761465</id><snippet>python</snippet></ROW><ROW><id>11761465</id><snippet>matlab</snippet></ROW><ROW><id>11761465</id><snippet>&gt;&gt;&gt; commands.getoutput('matlab')
</snippet></ROW><ROW><id>11761465</id><snippet>commands</snippet></ROW><ROW><id>11761465</id><snippet>PATH</snippet></ROW><ROW><id>11761526</id><snippet>Process p = Runtime.getRuntime().exec(new String[]{"python.exe" ... other args)
</snippet></ROW><ROW><id>11761570</id><snippet>^pattern[0-9]+
</snippet></ROW><ROW><id>11761570</id><snippet>^(aaaaa|bbbbb|ccccc|ddddd)
</snippet></ROW><ROW><id>11761906</id><snippet>=</snippet></ROW><ROW><id>11762504</id><snippet>from lxml.etree import Element, SubElement, Comment, tostring
</snippet></ROW><ROW><id>11762504</id><snippet>&gt;&gt;&gt; tostring(root, xml_declaration=False)
'&lt;root_element&gt;&lt;!--Hello World!!!--&gt;&lt;foo&gt;bar&lt;/foo&gt;&lt;bar&gt;foo&lt;/bar&gt;&lt;/root_element&gt;'
&gt;&gt;&gt; tostring(root, xml_declaration=True)
"&lt;?xml version='1.0' encoding='ASCII'?&gt;\n&lt;root_element&gt;&lt;!--Hello World!!!--&gt;&lt;foo&gt;bar&lt;/foo&gt;&lt;bar&gt;foo&lt;/bar&gt;&lt;/root_element&gt;"
</snippet></ROW><ROW><id>11762554</id><snippet>final_fun = [sum(fun[:,i_base])/n_ci for i_base in xrange(n_base)]
</snippet></ROW><ROW><id>11762568</id><snippet>asyncmongo</snippet></ROW><ROW><id>11762568</id><snippet>gen</snippet></ROW><ROW><id>11762568</id><snippet>DB = asyncmongo.Client()

class MainHandler(tornado.web.RequestHandler):
    @tornado.web.asynchronous
    @gen.engine
    def get(self):
        result, error = yield gen.Task(DB.collection.find, {}, limit=50, sort=[('myfield', 1)])
</snippet></ROW><ROW><id>11762568</id><snippet>gen</snippet></ROW><ROW><id>11762568</id><snippet>gen.Task</snippet></ROW><ROW><id>11762568</id><snippet>def findsort(self, find, params, callback): #here we recieve self + 3 args, if we remove params - callback will contain {"user_id":user_id} 
    return callback(db.client().collection.find(find).sort({"myfield":1}))

@gen.engine
def anotherfunction(self):
    response, error = yield gen.Task(self.findsort, {"user_id":user_id}) #we see 2 args, but it passes 3 args to findsort
</snippet></ROW><ROW><id>11762709</id><snippet>manage.py shell</snippet></ROW><ROW><id>11762709</id><snippet>import djcelery; djcelery.setup_loader()</snippet></ROW><ROW><id>11762709</id><snippet>settings.py</snippet></ROW><ROW><id>11762709</id><snippet>__all__ = ['Celery']
</snippet></ROW><ROW><id>11762789</id><snippet>def urlretrieve(url, filename, cache, lock=threading.Lock()):
    'Read contents of an open url, use etags and decompress if needed'    

    request = urllib2.Request(url)
    request.add_header('Accept-Encoding', 'gzip')
    with lock:
        if ('etag ' + url) in cache:
            request.add_header('If-None-Match', cache['etag ' + url])
        if ('date ' + url) in cache:
            request.add_header('If-Modified-Since', cache['date ' + url])

    try:
        u = urllib2.urlopen(request)
    except urllib2.HTTPError as e:
        return Response(e.code, e.msg, False, False)
    content = u.read()
    u.close()

    compressed = u.info().getheader('Content-Encoding') == 'gzip'
    if compressed:
        content = gzip.GzipFile(fileobj=StringIO.StringIO(content), mode='rb').read()

    written = writefile(filename, content) 

    with lock:
        etag = u.info().getheader('Etag')
        if etag:
            cache['etag ' + url] = etag
        timestamp = u.info().getheader('Date')
        if timestamp:
            cache['date ' + url] = timestamp

    return Response(u.code, u.msg, compressed, written)
</snippet></ROW><ROW><id>11763340</id><snippet>import urllib.request as req

proxy = req.ProxyHandler({'http': r'http://username:password@url:port'})
auth = req.HTTPBasicAuthHandler()
opener = req.build_opener(proxy, auth, req.HTTPHandler)
req.install_opener(opener)
conn = req.urlopen('http://google.com')
return_str = conn.read()
</snippet></ROW><ROW><id>11763408</id><snippet>--i1</snippet></ROW><ROW><id>11763408</id><snippet>options.input1file</snippet></ROW><ROW><id>11763408</id><snippet>None</snippet></ROW><ROW><id>11763408</id><snippet>myscript.py --i1 input.txt
</snippet></ROW><ROW><id>11763408</id><snippet>--i1</snippet></ROW><ROW><id>11763408</id><snippet>args</snippet></ROW><ROW><id>11763408</id><snippet>parser = OptionParser()
(options, args) = parser.parse_args()
try:
    input1file = args[0]
except IndexError:
    sys.exit("Input file required, none given")
</snippet></ROW><ROW><id>11763408</id><snippet>argparse</snippet></ROW><ROW><id>11763490</id><snippet>converters</snippet></ROW><ROW><id>11763490</id><snippet>read_csv</snippet></ROW><ROW><id>11763490</id><snippet>/tmp/data.csv</snippet></ROW><ROW><id>11763490</id><snippet>"x","y"                                                                         
"one","1.234,56"                                                                
"two","2.000,00"   
</snippet></ROW><ROW><id>11763490</id><snippet>In [20]: pandas.read_csv('/tmp/data.csv', converters={'y': lambda x: float(x.replace('.','').replace(',','.'))})
Out[20]: 
     x        y
0  one  1234.56
1  two  2000.00
</snippet></ROW><ROW><id>11763513</id><snippet>&gt;&gt;&gt; "{:,.0f}".format(80000.0)
'80,000'
</snippet></ROW><ROW><id>11763513</id><snippet>format()</snippet></ROW><ROW><id>11763513</id><snippet>str.format()</snippet></ROW><ROW><id>11763513</id><snippet>&gt;&gt;&gt; format(80000.0, ",.0f")
'80,000'
</snippet></ROW><ROW><id>11763513</id><snippet>,</snippet></ROW><ROW><id>11763513</id><snippet>def format_with_commas(x):
    s = format(x, ".0f")
    j = len(s) % 3
    if j:
         groups = [s[:j]]
    else:
         groups = []
    groups.extend(s[i:i + 3] for i in range(j, len(s), 3))
    return ",".join(groups)
</snippet></ROW><ROW><id>11763743</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>11763743</id><snippet>lib</snippet></ROW><ROW><id>11763903</id><snippet>ctypes.create_string_buffer</snippet></ROW><ROW><id>11763903</id><snippet>25*80*2*2 = 8000</snippet></ROW><ROW><id>11763954</id><snippet>$.getJSON('/url/to/ajax/view/', {foo: 'bar'}, function(data, jqXHR){
    // do something with response
});
</snippet></ROW><ROW><id>11763954</id><snippet>$.getJSON</snippet></ROW><ROW><id>11763954</id><snippet>data</snippet></ROW><ROW><id>11763954</id><snippet>from django.utils import simplejson

def my_ajax_view(request):
    # do something
    return HttpResponse(simplejson.dumps(some_data), mimetype='application/json')
</snippet></ROW><ROW><id>11763954</id><snippet>request</snippet></ROW><ROW><id>11763954</id><snippet>from django.core import serializers
...
data = serializers.serialize('json', some_instance_or_queryset)
return HttpResponse(data, mimetype='application/json')
</snippet></ROW><ROW><id>11763954</id><snippet>urlpatterns += patterns('',
    (r'^/url/to/ajax/view/$', 'myapp.views.my_ajax_view'),
)
</snippet></ROW><ROW><id>11763954</id><snippet>(r'^/url/to/ajax/view/(?P&lt;some_data&gt;[\w-]+)/$, 'myapp.views.my_ajax_view'),
</snippet></ROW><ROW><id>11763954</id><snippet>def my_ajax_view(request, some_data):
</snippet></ROW><ROW><id>11763954</id><snippet>$.getJSON('/url/to/ajax/view/'+some_data+'/', function(data, jqXHR){
</snippet></ROW><ROW><id>11763954</id><snippet>def my_ajax_view(request):
    some_data = request.GET.get('some_data')
    if some_data is None:
        return HttpResponseBadRequest()
</snippet></ROW><ROW><id>11763954</id><snippet>data</snippet></ROW><ROW><id>11763954</id><snippet>data[0]</snippet></ROW><ROW><id>11763954</id><snippet>form (var i=0; i&lt;data.length; i++) {
    // do something with data[i]
}
</snippet></ROW><ROW><id>11763954</id><snippet>data</snippet></ROW><ROW><id>11763954</id><snippet>data[i]</snippet></ROW><ROW><id>11763954</id><snippet>data[i].some_key
</snippet></ROW><ROW><id>11763954</id><snippet>http://mydomain.com/url/to/ajax/view/?some_data=foo</snippet></ROW><ROW><id>11764007</id><snippet>S1 = "thirteen things that don't make sense"
S2 = "13 Things That Don't Make Sense"
eq_map = {'one': '1', 'two': '2', 'thirteen': '13'}

def convert(s):
    s = s.lower()
    return [eq_map.get(w, w) for w in s.split()]

assert convert(S1) == convert(S2)
</snippet></ROW><ROW><id>11764007</id><snippet>eq_map</snippet></ROW><ROW><id>11764007</id><snippet>s = re.sub(r'[^\w\s]+', '', s)</snippet></ROW><ROW><id>11764007</id><snippet>convert()</snippet></ROW><ROW><id>11764083</id><snippet>for i in range(0,len(list1),2):
    name = list1[i]
    tag = list1[i+1]
    print '&lt;tag name="%s"&gt;%s&lt;/tag&gt;' % (name, tag)
</snippet></ROW><ROW><id>11764225</id><snippet>import http.client
import json

connection = http.client.HTTPSConnection('api.github.com')

headers = {'Content-type': 'application/json'}

foo = {'text': 'Hello world github/linguist#1 **cool**, and #1!'}
json_foo = json.dumps(foo)

connection.request('POST', '/markdown', json_foo, headers)

response = connection.getresponse()
print(response.read().decode())
</snippet></ROW><ROW><id>11764225</id><snippet>&gt;&gt;&gt; connection = http.client.HTTPSConnection('api.github.com')
</snippet></ROW><ROW><id>11764225</id><snippet>http.client.HTTPSConnection()</snippet></ROW><ROW><id>11764225</id><snippet>&gt;&gt;&gt; headers = {'Content-type': 'application/json'}
</snippet></ROW><ROW><id>11764225</id><snippet>&gt;&gt;&gt; foo = {'text': 'Hello world github/linguist#1 **cool**, and #1!'}
&gt;&gt;&gt; json_foo = json.dumps(foo)
</snippet></ROW><ROW><id>11764225</id><snippet>&gt;&gt;&gt; connection.request('POST', '/markdown', json_foo, headers)
</snippet></ROW><ROW><id>11764225</id><snippet>&gt;&gt;&gt; response = connection.getresponse()
&gt;&gt;&gt; response.read()
b'&lt;p&gt;Hello world github/linguist#1 &lt;strong&gt;cool&lt;/strong&gt;, and #1!&lt;/p&gt;'
</snippet></ROW><ROW><id>11764285</id><snippet>numpy</snippet></ROW><ROW><id>11764285</id><snippet>arr[arr&gt;0].min()
</snippet></ROW><ROW><id>11764285</id><snippet>arr[arr != 0].min()
</snippet></ROW><ROW><id>11764419</id><snippet>from fabric.context_managers import settings
from fabfile import deployFiles, deployConfiguration

with settings(host_string='user@192.168.xx.xx'):
    deployFiles()
    deployConfiguration('master', 7)
</snippet></ROW><ROW><id>11764475</id><snippet>w = QtGui.QWidget()
w.resize(600,400)

layout = QtGui.QVBoxLayout(w)
layout.setMargin(10)
frame = QtGui.QFrame()
frame.setFrameShape(frame.Box)
layout.addWidget(frame)

layout2 = QtGui.QVBoxLayout(frame)
layout2.setMargin(20)
frame2 = QtGui.QFrame()
frame2.setFrameShape(frame2.Box)
layout2.addWidget(frame2)
</snippet></ROW><ROW><id>11764475</id><snippet># left: 20, top: 0, right: 20, bottom: 0
layout.setContentsMargins(20,0,20,0)
</snippet></ROW><ROW><id>11764475</id><snippet>layout.setSpacing(10) # 10 pixels between each layout item
</snippet></ROW><ROW><id>11764475</id><snippet>class Window(QtGui.QDialog):

    def __init__(self):
        super(Window, self).__init__()
        self.resize(600,400)

        self.mainLayout = QtGui.QVBoxLayout(self)
        self.mainLayout.setMargin(10)

        self.scroll = QtGui.QScrollArea()
        self.scroll.setWidgetResizable(True)
        self.scroll.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.mainLayout.addWidget(self.scroll)

        scrollContents = QtGui.QWidget()
        self.scroll.setWidget(scrollContents)

        self.textLayout = QtGui.QVBoxLayout(scrollContents)
        self.textLayout.setMargin(10)

        for _ in xrange(5):
            text = GrowingTextEdit()
            text.setMinimumHeight(50)
            self.textLayout.addWidget(text)


class GrowingTextEdit(QtGui.QTextEdit):

    def __init__(self, *args, **kwargs):
        super(GrowingTextEdit, self).__init__(*args, **kwargs)  
        self.document().contentsChanged.connect(self.sizeChange)

        self.heightMin = 0
        self.heightMax = 65000

    def sizeChange(self):
        docHeight = self.document().size().height()
        if self.heightMin &lt;= docHeight &lt;= self.heightMax:
            self.setMinimumHeight(docHeight)
</snippet></ROW><ROW><id>11764475</id><snippet>QTextEdit</snippet></ROW><ROW><id>11764475</id><snippet>GrowingTextEdit</snippet></ROW><ROW><id>11764475</id><snippet>sizeChange</snippet></ROW><ROW><id>11764475</id><snippet>docHeight</snippet></ROW><ROW><id>11764620</id><snippet>ion</snippet></ROW><ROW><id>11764620</id><snippet>matplotlib.pyplot</snippet></ROW><ROW><id>11764620</id><snippet>import matplotlib.pyplot as pp
pp.ion()
fig = pp.figure()
</snippet></ROW><ROW><id>11764620</id><snippet>ion</snippet></ROW><ROW><id>11764620</id><snippet>def moveon(event):
    pp.close()

cid = fig.canvas.mpl_connect('key_press_event', moveon)
pp.show()
</snippet></ROW><ROW><id>11764620</id><snippet>show</snippet></ROW><ROW><id>11764774</id><snippet>l</snippet></ROW><ROW><id>11764774</id><snippet>L</snippet></ROW><ROW><id>11764774</id><snippet>int</snippet></ROW><ROW><id>11764774</id><snippet>long</snippet></ROW><ROW><id>11764774</id><snippet>int</snippet></ROW><ROW><id>11764774</id><snippet>long</snippet></ROW><ROW><id>11764774</id><snippet>int</snippet></ROW><ROW><id>11764774</id><snippet>long</snippet></ROW><ROW><id>11764774</id><snippet>long</snippet></ROW><ROW><id>11764774</id><snippet>BigNumber</snippet></ROW><ROW><id>11764774</id><snippet>int</snippet></ROW><ROW><id>11764786</id><snippet>s.write()</snippet></ROW><ROW><id>11764786</id><snippet>s.write('\x02\x30\x34\x3b\x30\x3f\x3a\x3d\x3b\x03')
</snippet></ROW><ROW><id>11764917</id><snippet>su</snippet></ROW><ROW><id>11764962</id><snippet>NP.array(v1fColor.split(","), dtype=NP.uint8)</snippet></ROW><ROW><id>11764962</id><snippet>import numpy as np
import numpy.linalg as LA

def testFunction():
    value1 = '2,3,0,80,125,15,5,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0'
    value2 = '2,137,0,4,96,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0'
    cx = lambda a, b : round(np.inner(a, b)/(LA.norm(a)*LA.norm(b)), 3)
    #v1fColor = np.array(map(int,value1.split(',')))
    #v2fColor =  np.array(map(int,value2.split(',')))
    v1fColor = np.array( value1.split(','), dtype=np.uint8 )
    v2fColor = np.array( value2.split(','), dtype=np.uint8 )
    print v1fColor
    print v2fColor
    cosineValue = cx(v1fColor, v2fColor)
    print cosineValue

if __name__ == '__main__':
    testFunction()
</snippet></ROW><ROW><id>11764962</id><snippet>v1fColor = np.array(map(int,value1.split(',')))
v2fColor =  np.array(map(int,value2.split(','))) 
</snippet></ROW><ROW><id>11765010</id><snippet>&gt;&gt;&gt; the_string = "New Cars, Used Cars, Car Reviews, Car Finance Advice - Cars.com"
&gt;&gt;&gt; re.sub(r'(car)', r'&lt;b&gt;\1&lt;/b&gt;', the_string, flags=re.I)
'New &lt;b&gt;Car&lt;/b&gt;s, Used &lt;b&gt;Car&lt;/b&gt;s, &lt;b&gt;Car&lt;/b&gt; Reviews, &lt;b&gt;Car&lt;/b&gt; Finance Advice - &lt;b&gt;Car&lt;/b&gt;s.com'
</snippet></ROW><ROW><id>11765010</id><snippet>\b(cars?)\b</snippet></ROW><ROW><id>11765023</id><snippet>format</snippet></ROW><ROW><id>11765023</id><snippet>%</snippet></ROW><ROW><id>11765023</id><snippet>locals</snippet></ROW><ROW><id>11765023</id><snippet>locals</snippet></ROW><ROW><id>11765060</id><snippet>mySchema = """
{
    "name": "person",
    "type": "record",
    "fields": [
        {"name": "firstname", "type": "string"},
        {"name": "lastname", "type": "string"},
        {
            "name": "address",
            "type": {
                        "type" : "record",
                        "name" : "AddressUSRecord",
                        "fields" : [
                            {"name": "streetaddress", "type": "string"},
                            {"name": "city", "type": "string"}
                        ]
                    },
        }
    ]
}"""
</snippet></ROW><ROW><id>11765138</id><snippet>list1[i]</snippet></ROW><ROW><id>11765138</id><snippet>list2[i]</snippet></ROW><ROW><id>11765138</id><snippet>i</snippet></ROW><ROW><id>11765138</id><snippet>from random import shuffle
# Given list1 and list2
list1_shuf = []
list2_shuf = []
index_shuf = range(len(list1))
shuffle(index_shuf)
for i in index_shuf:
    list1_shuf.append(list1[i])
    list2_shuf.append(list2[i])
</snippet></ROW><ROW><id>11765259</id><snippet>aspect</snippet></ROW><ROW><id>11765259</id><snippet>pylab.imshow(z, interpolation="gaussian", extent = [.3,.9,0.,3.5], aspect='auto')
</snippet></ROW><ROW><id>11765289</id><snippet>settings.py</snippet></ROW><ROW><id>11765289</id><snippet>settings.py</snippet></ROW><ROW><id>11765289</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>11765289</id><snippet>myproject/settings.py, myproject/settings_dev.py</snippet></ROW><ROW><id>11765289</id><snippet>$ DJANGO_SETTINGS_MODULE=settings_dev python manage.py shell</snippet></ROW><ROW><id>11765289</id><snippet>myproject</snippet></ROW><ROW><id>11765319</id><snippet>raw_input</snippet></ROW><ROW><id>11765319</id><snippet>y, x = raw_input('Please enter two numbers (separated by whitespace): ').split(None,1)
</snippet></ROW><ROW><id>11765319</id><snippet>try/except</snippet></ROW><ROW><id>11765319</id><snippet>while True: #try to get 2 numbers forever.
   try:
      y, x = raw_input("2 numbers please (integer, float): ").split()
      y = int(y)
      x = float(x)
      break  #got 2 numbers, we can stop trying and do something useful with them.
   except ValueError:
      print "Oops, that wasn't an integer followed by a float.  Try again"
</snippet></ROW><ROW><id>11765414</id><snippet>MB_SYSTEMMODAL</snippet></ROW><ROW><id>11765414</id><snippet>MessageBox</snippet></ROW><ROW><id>11765414</id><snippet>MessageBox</snippet></ROW><ROW><id>11765414</id><snippet>HidCon</snippet></ROW><ROW><id>11765414</id><snippet>CMDOW /RUN /MIN C:\Python27\python.exe C:\pythonScript.py
</snippet></ROW><ROW><id>11765569</id><snippet>def fix(line):
    r"""
    returns the corrected line, with all apostrophes prefixed by an escape character

    &gt;&gt;&gt; fix("DOUG\'S")
    "DOUG\\'S"
    &gt;&gt;&gt; fix("DOUG'S") == r"DOUG\'S"
    True
    &gt;&gt;&gt; fix("DOUG'S")
    "DOUG\\'S"

    """
    return line.replace("'", r"\'")

import doctest
doctest.testmod()
</snippet></ROW><ROW><id>11765648</id><snippet>person</snippet></ROW><ROW><id>11765648</id><snippet>def __init__(self, *args, **kwargs):
    self.person = kwargs.pop("person")
    super(CompleteRegistrationForm, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>11765648</id><snippet>self.person</snippet></ROW><ROW><id>11765648</id><snippet>person</snippet></ROW><ROW><id>11765692</id><snippet>self.read_secure_cookie('content')
</snippet></ROW><ROW><id>11765692</id><snippet>self</snippet></ROW><ROW><id>11765692</id><snippet>and</snippet></ROW><ROW><id>11765692</id><snippet>return cookie_val, check_secure_val(cookie_val)
</snippet></ROW><ROW><id>11765692</id><snippet>cookie_value.split('|')[0]
</snippet></ROW><ROW><id>11765692</id><snippet>class BlogHandler:
    def read_secure_cookie(self, name):
        cookie_val = self.request.cookies.get(name)
        return cookie_val, check_secure_val(cookie_val)

class MainPage(BlogHandler):
    def post(self):
        email = self.request.get('email')
        product = self.request.get('product')
        cookie_val, cookie_secure_val = self.read_secure_cookie('content')
        username = cookie_val.split("|")[0]
</snippet></ROW><ROW><id>11765811</id><snippet>netdata.variables['x_data'][:]=newlist[:]
</snippet></ROW><ROW><id>11765848</id><snippet>JSONDecoder</snippet></ROW><ROW><id>11765848</id><snippet>raw_decode()</snippet></ROW><ROW><id>11765848</id><snippet>raw_decode()</snippet></ROW><ROW><id>11765848</id><snippet>import json

def read_json_objects(data):
    decoder = json.JSONDecoder()
    offset = 0

    while offset &lt; len(data):
        item = decoder.raw_decode(data[offset:])

        yield item[0]
        offset += item[1]

d = '{"key_1": " val_1", "key_2": "val_2"}{"key_3": " val_3", "key_4": "val_4"}'

print json.dumps(list(read_json_objects(d)))
</snippet></ROW><ROW><id>11765848</id><snippet>[{"key_1": " val_1", "key_2": "val_2"}, {"key_4": "val_4", "key_3": " val_3"}]
</snippet></ROW><ROW><id>11766018</id><snippet>WordNGramAnalyzer</snippet></ROW><ROW><id>11766018</id><snippet>n_grams = CountVectorizer(min_n=1, max_n=5)
</snippet></ROW><ROW><id>11766134</id><snippet>row[1]</snippet></ROW><ROW><id>11766134</id><snippet>row[1]</snippet></ROW><ROW><id>11766134</id><snippet>len(some_string)</snippet></ROW><ROW><id>11766134</id><snippet>pos</snippet></ROW><ROW><id>11766134</id><snippet>some_string[pos]</snippet></ROW><ROW><id>11766201</id><snippet>with open(filename) as f:
    exec(compile(f.read(), filename, "exec"))
</snippet></ROW><ROW><id>11766201</id><snippet>execfile()</snippet></ROW><ROW><id>11766201</id><snippet>__init__.py</snippet></ROW><ROW><id>11766201</id><snippet>actions</snippet></ROW><ROW><id>11766201</id><snippet>module = __import__("actions.foo")
</snippet></ROW><ROW><id>11766201</id><snippet>actions/foo.py</snippet></ROW><ROW><id>11766416</id><snippet>def prime(x):
    if (2**(x-1))%x ==1:
        return x
</snippet></ROW><ROW><id>11766416</id><snippet>341 = 11*31</snippet></ROW><ROW><id>11766416</id><snippet>2047 = 23*89</snippet></ROW><ROW><id>11766416</id><snippet>x</snippet></ROW><ROW><id>11766416</id><snippet>pow(2,x-1,x)
</snippet></ROW><ROW><id>11766416</id><snippet># The primes below 200 used as bases for the strong Fermat test,
# prime bases have more discriminatory power than composite bases,
# therefore we use prime bases first
bases = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]

# The strong Fermat test for base b, where n is odd and large,
# n - 1 = m * 2^s with odd m
# the strong test checks whether b**m % n == 1 or
# b**(2**j) % n == n-1 for a 0 &lt;= j &lt; s
# If the test returns False, n is definitely composite, otherwise probably prime
def strongFermat(b,n,m,s):
    a = pow(b,m,n)
    if a == 1:
        return True
    n1 = n-1
    for i in xrange(s):
        if a == n1:
            return True
        a = (a*a) % n
    return False

# Multiple strong Fermat tests, by default use 10 bases
# The probability that a composite passes is less than 0.25**iters
def sppTest(n, iters = 10):
    # Assumes n &gt; 1 and with no prime divisors &lt; 200
    m = n-1
    s = 0
    while (m &amp; 1) == 0:
        m &gt;&gt;= 1
        s += 1
    pbases = iters if iters &lt; 47 else 46
    for i in xrange(pbases):
        if not strongFermat(bases[i],n,m,s):
            return False
    if pbases &lt; iters:
        for i in xrange(iters-pbases):
            if not strongFermat(211 + 2*i,n,m,s):
                return False
    return True

# Trial division to weed out most composites fast
def trialDivisionPrime(n):
    if n &lt; 2:
        return 0        # Not a prime
    if n &lt; 4:
        return 2        # definitely prime
    if n % 2 == 0 or n % 3 == 0:
        return 0        # definitely composite
    for d in xrange(5, 200, 6):
        if d*d &gt; n:
            return 2    # definitely prime
        if n % d == 0 or n % (d+2) == 0:
            return 0    # composite
    return 1            # not yet decided

# The prime test, first do trial division by numbers &lt; 200,
# if that doesn't decide the matter, use some strong Fermat tests
# using 20 tests is the paranoid setting for largish numbers,
# for numbers in 64-bit range, ten or fewer suffice
def prime(n):
    td = trialDivisionPrime(n)
    return td &gt; 1 or (td == 1 and sppTest(n,20))

# just check a couple of larger numbers
for c in xrange(100000):
    if prime(c + 10**25):
        print c
</snippet></ROW><ROW><id>11766431</id><snippet>for</snippet></ROW><ROW><id>11766431</id><snippet>contrived_data = [[(1, 1, 1), ('hello', 'bar')], [(222, 3, 4), ('norweigan', 'blue')], [('anthrax', 'ripple'), (42, 'life')]]

looking_for = (1, 'life')

index = 0
while index &lt; len(contrived_data):
    for two_pull in contrived_data[index]:
        for item in looking_for:
            if item in two_pull:
                print(contrived_data.pop(index))
                index -= 1
                break # Only jumps out of the innermost loop
    index += 1
</snippet></ROW><ROW><id>11766495</id><snippet>os.path.exists</snippet></ROW><ROW><id>11766495</id><snippet>import os.path

database = '/path/to/database.db'
if not os.path.exists(database):
    raise ValueError('Invalid database path: %s' % (database,)
db = sqlalchemy.create_engine('sqlite:///' + database)
</snippet></ROW><ROW><id>11766815</id><snippet>form.save()</snippet></ROW><ROW><id>11767009</id><snippet>return</snippet></ROW><ROW><id>11767009</id><snippet>while</snippet></ROW><ROW><id>11767009</id><snippet>def writecode (q, a, b, c):
    results = []
    while b &lt; q:
        b = b + 1
        results.append("v%d_%d_%d = pairwise (caps[%d],sals[%d],poss[%d],poss[%d],poss[%d],pos_range)" % (a,b,c,a,a,a,b,c))
        results.append("votes%d_%d.append(v%d_%d_%d)" % (b,c,a,b,c,))
        results.append("v%d_%d_%d = pairwise (caps[%d],sals[%d],poss[%d],poss[%d],poss[%d],pos_range)" % (a,c,b,a,a,a,c,b))
        results.append("votes%d_%d.append(v%d_%d_%d)" % (c,b,a,c,b))
        results.append("")
    return "\n".join(results)

x = writecode (5,1,0,4)

out_file = open("code.txt", "a")
out_file.write(x)
out_file.close()
</snippet></ROW><ROW><id>11767177</id><snippet>Size</snippet></ROW><ROW><id>11767177</id><snippet>Name</snippet></ROW><ROW><id>11767177</id><snippet>Size</snippet></ROW><ROW><id>11767177</id><snippet>line[10]</snippet></ROW><ROW><id>11767177</id><snippet>Name</snippet></ROW><ROW><id>11767177</id><snippet>Size</snippet></ROW><ROW><id>11767177</id><snippet>for line in reader:
    size = float(line[10])
    if 10 &lt;= size &lt;= 30:
        name = line[1]
        counts[name] += 1

for name, count in counts.iteritems():
    print '%s: %s' % name, count
</snippet></ROW><ROW><id>11767192</id><snippet>&gt;&gt;&gt; A = np.array([0.1, 3.5, 6.5, 7.9, 11.4, 12.0, 22.3, 24.5, 26.7, 29.9])
&gt;&gt;&gt; split_at = A.searchsorted([10, 20])
&gt;&gt;&gt; B = numpy.split(A, split_at)
</snippet></ROW><ROW><id>11767192</id><snippet>&gt;&gt;&gt; A = array([[  0.1,   0. ],
               [  3.5,   1. ],
               [  6.5,   2. ],
               [  7.9,   3. ],
               [ 11.4,   4. ],
               [ 12. ,   5. ],
               [ 22.3,   6. ],
               [ 24.5,   7. ],
               [ 26.7,   8. ],
               [ 29.9,   9. ]])
&gt;&gt;&gt; split_at = A[:, 0].searchsorted([10, 20])
&gt;&gt;&gt; B = numpy.split(A, split_at)
&gt;&gt;&gt; B
[array([[ 0.1,  0. ],
       [ 3.5,  1. ],
       [ 6.5,  2. ],
       [ 7.9,  3. ]]),
 array([[ 11.4,   4. ],
       [ 12. ,   5. ]]),
 array([[ 22.3,   6. ],
       [ 24.5,   7. ],
       [ 26.7,   8. ],
       [ 29.9,   9. ]])]
</snippet></ROW><ROW><id>11767257</id><snippet>/M2Crypto/RSA.py</snippet></ROW><ROW><id>11767257</id><snippet>gen_key</snippet></ROW><ROW><id>11767257</id><snippet>callback</snippet></ROW><ROW><id>11767257</id><snippet>gen_key</snippet></ROW><ROW><id>11767257</id><snippet>stdout</snippet></ROW><ROW><id>11767257</id><snippet>&gt;&gt;&gt; rsa = M2Crypto.RSA.gen_key (2048, 65537, callback=lambda x, y, z:None) 
</snippet></ROW><ROW><id>11767257</id><snippet>def keygen_callback(p, n, out=sys.stdout): #sys.stdout is bound to `out` at definition time
    """
    Default callback for gen_key().
    """
    ch = ['.','+','*','\n']
    out.write(ch[p])
    out.flush()


def gen_key(bits, e, callback=keygen_callback): #keygen_callback is bound to `callback`
    #other code...
</snippet></ROW><ROW><id>11767322</id><snippet>subprocess</snippet></ROW><ROW><id>11767322</id><snippet># Note, your path probably differs
subprocess.call(r"C:\Program Files\Microsoft Office\Office12\EXCEL.exe")

# The script will wait until Excel is closed and then continue
</snippet></ROW><ROW><id>11767390</id><snippet>contains_replacement_characters == True</snippet></ROW><ROW><id>11767494</id><snippet>&gt;&gt;&gt; s = "items=item1|item2|item3&amp;ids=18|117|34&amp;locations=5|26|9#Characteristic_3#Describe Characteristic_1#http://example.com"
</snippet></ROW><ROW><id>11767494</id><snippet>&gt;&gt;&gt; s.split('&amp;')[0]
'items=item1|item2|item3'
</snippet></ROW><ROW><id>11767494</id><snippet>&gt;&gt;&gt; s.split('&amp;')[0].split('=')[1]
'item1|item2|item3'
</snippet></ROW><ROW><id>11767494</id><snippet>&gt;&gt;&gt; s.split('&amp;')[0].split('=')[1].split('|')
['item1', 'item2', 'item3']
</snippet></ROW><ROW><id>11767494</id><snippet>&gt;&gt;&gt; s.split('&amp;')[1].split('=')[1].split('|') # Notice the [1] in the first split
['18', '117', '34']
</snippet></ROW><ROW><id>11767528</id><snippet>%module test

%include "std_wstring.i"

%inline %{
  std::wstring foo() {
    return L"hi";
  }
%}
</snippet></ROW><ROW><id>11767528</id><snippet>Python 2.7.3rc2 (default, Apr 22 2012, 22:30:17)
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import test
&gt;&gt;&gt; path = test.foo()
&gt;&gt;&gt; print path, type(path)
hi &lt;type 'unicode'&gt;
&gt;&gt;&gt; file = path + "/Information.log"
&gt;&gt;&gt; print file
hi/Information.log
&gt;&gt;&gt;
</snippet></ROW><ROW><id>11767528</id><snippet>%include "std_wstring.i"</snippet></ROW><ROW><id>11767535</id><snippet>library dll;

function addstuff(onenumber, twonumber : Integer) : integer; stdcall;

begin
     addstuff := onenumber + twonumber;
end;

exports addstuff;    

begin
end.
</snippet></ROW><ROW><id>11767578</id><snippet>b</snippet></ROW><ROW><id>11767578</id><snippet>a</snippet></ROW><ROW><id>11767578</id><snippet>a</snippet></ROW><ROW><id>11767578</id><snippet>b</snippet></ROW><ROW><id>11767578</id><snippet>&gt;&gt;&gt; a
u'\\x11'
&gt;&gt;&gt; a.decode('string-escape')
'\x11'
</snippet></ROW><ROW><id>11767578</id><snippet>unicode-escape</snippet></ROW><ROW><id>11767578</id><snippet>string-escape</snippet></ROW><ROW><id>11767629</id><snippet>import sys
print sys.stdout.encoding
</snippet></ROW><ROW><id>11767629</id><snippet>None</snippet></ROW><ROW><id>11767629</id><snippet>ascii</snippet></ROW><ROW><id>11767629</id><snippet>utf-8</snippet></ROW><ROW><id>11767629</id><snippet>import sys
print &gt;&gt;sys.stderr,sys.stdout.encoding
print &gt;&gt;sys.stderr,sys.stderr.encoding
</snippet></ROW><ROW><id>11767629</id><snippet>stdout</snippet></ROW><ROW><id>11767629</id><snippet>C:\&gt;test
cp437
cp437

C:\&gt;test &gt;out.txt
None
cp437
</snippet></ROW><ROW><id>11767629</id><snippet>stderr</snippet></ROW><ROW><id>11767629</id><snippet>PYTHONIOENCODING</snippet></ROW><ROW><id>11767644</id><snippet>test</snippet></ROW><ROW><id>11767644</id><snippet>zip(*test)
</snippet></ROW><ROW><id>11767644</id><snippet>In [16]: t = [[1,2,3],[4,5,6]]

In [17]: t
Out[17]: [[1, 2, 3], 
          [4, 5, 6]]

In [18]: zip(*t)
Out[18]: [(1, 4), 
          (2, 5), 
          (3, 6)]
</snippet></ROW><ROW><id>11767644</id><snippet>zip(*t)</snippet></ROW><ROW><id>11767644</id><snippet>zip</snippet></ROW><ROW><id>11767644</id><snippet>In [21]: [[row[i] for row in t] for i in range(len(t[1]))]
Out[21]: [[1, 4], [2, 5], [3, 6]]
</snippet></ROW><ROW><id>11767644</id><snippet>len(t[1])</snippet></ROW><ROW><id>11767675</id><snippet>missing = []
num = {}
for i,e in enumerate(l1):
    if not e[0] in num:                # first number groups
        num[e[0]] = []                 # make a list of them (empty... for now)
        for z,q in enumerate(l1):      # for all of the numbers
            if q[0]==e[0]:             # that are in the first number group
                num[e[0]].append(q[1]) # append 
                                       # then start again with second number group

for i in num.keys():                            # for each number group
    for e in xrange(min(num[i]),max(num[i])+1): # from minimum to maximum, iterate
        if not e in num[i]:                     # if any number isn't there
            missing.append((i,e))               # make note

print missing # [(1, 3), (2, 3), (2, 4), (3, 2)]
</snippet></ROW><ROW><id>11767880</id><snippet>naivebayes</snippet></ROW><ROW><id>11767880</id><snippet>classifier</snippet></ROW><ROW><id>11767880</id><snippet>nb = naivebayes(classifier) 
</snippet></ROW><ROW><id>11767880</id><snippet>nb = naivebayes(getfeatures)
</snippet></ROW><ROW><id>11767880</id><snippet>for</snippet></ROW><ROW><id>11767880</id><snippet>train</snippet></ROW><ROW><id>11767880</id><snippet>getfeatures</snippet></ROW><ROW><id>11767880</id><snippet>classifier</snippet></ROW><ROW><id>11767888</id><snippet>&gt;&gt;&gt; 2 &lt; "2"
True
&gt;&gt;&gt; 2 &gt; "2"
False
&gt;&gt;&gt; 2 == "2"
False
</snippet></ROW><ROW><id>11767935</id><snippet>&lt;input type="file"&gt;</snippet></ROW><ROW><id>11767966</id><snippet>task runPython(type:Exec) {
   workingDir 'path_to_script'

   commandLine 'python', 'my_script.py'
} 
</snippet></ROW><ROW><id>11767990</id><snippet>import clr
clr.AddReference("MyAssembly") 
import MyGlobalClass
</snippet></ROW><ROW><id>11768102</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; print urllib2.unquote("%CE%B1%CE%BB%20")
αλ 
</snippet></ROW><ROW><id>11768129</id><snippet>print</snippet></ROW><ROW><id>11768129</id><snippet>print(x)</snippet></ROW><ROW><id>11768129</id><snippet>1 + (3)</snippet></ROW><ROW><id>11768129</id><snippet>1 + 3</snippet></ROW><ROW><id>11768129</id><snippet>print(x)</snippet></ROW><ROW><id>11768129</id><snippet>print x</snippet></ROW><ROW><id>11768129</id><snippet>def prn(x):
    print x
</snippet></ROW><ROW><id>11768129</id><snippet>map(prn, lst)
</snippet></ROW><ROW><id>11768129</id><snippet>lst = map(prn, lst)</snippet></ROW><ROW><id>11768129</id><snippet>prn()</snippet></ROW><ROW><id>11768129</id><snippet>None</snippet></ROW><ROW><id>11768129</id><snippet>None</snippet></ROW><ROW><id>11768129</id><snippet>print</snippet></ROW><ROW><id>11768129</id><snippet>from __future__ import print_function

map(print, lst)
</snippet></ROW><ROW><id>11768129</id><snippet>print</snippet></ROW><ROW><id>11768129</id><snippet>map()</snippet></ROW><ROW><id>11768129</id><snippet>from pprint import pprint

map(pprint, lst)
</snippet></ROW><ROW><id>11768129</id><snippet>pprint()</snippet></ROW><ROW><id>11768129</id><snippet>print</snippet></ROW><ROW><id>11768129</id><snippet>l</snippet></ROW><ROW><id>11768129</id><snippet>lst</snippet></ROW><ROW><id>11768200</id><snippet>/Users/jonathanschen/</snippet></ROW><ROW><id>11768200</id><snippet>import os.path
PROJECT_DIR = os.path.dirname(__file__) # this is not Django setting.
TEMPLATE_DIRS = (
    os.path.join(PROJECT_DIR, "templates"),
    # here you can add another templates directory if you wish.
)
</snippet></ROW><ROW><id>11768202</id><snippet>assert_raises()</snippet></ROW><ROW><id>11768202</id><snippet>add</snippet></ROW><ROW><id>11768202</id><snippet>TypeError</snippet></ROW><ROW><id>11768202</id><snippet>def add(x, y):
    return x + y

assert_raises(TypeError, add, 2, "0")
</snippet></ROW><ROW><id>11768202</id><snippet>x</snippet></ROW><ROW><id>11768202</id><snippet>y</snippet></ROW><ROW><id>11768254</id><snippet>config = wx.Config()
checkBoxes = ['option_1', 'option_2']
for key in checkBoxes:
    config.Write(key, str(getattr(self, 'm_checkBox_'+key).Value()))
</snippet></ROW><ROW><id>11768393</id><snippet>xlrd</snippet></ROW><ROW><id>11768393</id><snippet>xlwt</snippet></ROW><ROW><id>11768393</id><snippet>xlutils</snippet></ROW><ROW><id>11768420</id><snippet>super()</snippet></ROW><ROW><id>11768420</id><snippet>self.set_db()</snippet></ROW><ROW><id>11768420</id><snippet>__init__</snippet></ROW><ROW><id>11768420</id><snippet>AttributeError: naivebayes instance has no attribute 'con'</snippet></ROW><ROW><id>11768443</id><snippet>requests</snippet></ROW><ROW><id>11768443</id><snippet>import urllib 

urllib.urlretrieve('ftp://server/path/to/file', 'file')
</snippet></ROW><ROW><id>11768443</id><snippet>import shutil
import urllib2
from contextlib import closing

with closing(urllib2.urlopen('ftp://server/path/to/file')) as r:
    with open('file', 'wb') as f:
        shutil.copyfileobj(r, f)
</snippet></ROW><ROW><id>11768455</id><snippet>class TVShow(models.Model)  
     channel = models.CharField()  
     show_name = models.CharField()  
     season = models.CharField()  
     episode = models.CharField()
</snippet></ROW><ROW><id>11768455</id><snippet>TVShow.objects.distinct('channel')
</snippet></ROW><ROW><id>11768458</id><snippet>C:\Python27\include</snippet></ROW><ROW><id>11768458</id><snippet>C:\Python27\libs</snippet></ROW><ROW><id>11768458</id><snippet>C:\Python27\include</snippet></ROW><ROW><id>11768458</id><snippet>pyconfig.h</snippet></ROW><ROW><id>11768458</id><snippet>#    define Py_DEBUG</snippet></ROW><ROW><id>11768458</id><snippet>C:\Python27\libs</snippet></ROW><ROW><id>11768458</id><snippet>python27.lib</snippet></ROW><ROW><id>11768458</id><snippet>python27_d.lib</snippet></ROW><ROW><id>11768458</id><snippet>pyodbc</snippet></ROW><ROW><id>11768458</id><snippet>Use Multi-Byte Character Set</snippet></ROW><ROW><id>11768458</id><snippet>Use Unicode Character Set</snippet></ROW><ROW><id>11768458</id><snippet>C:\Python27\python.exe</snippet></ROW><ROW><id>11768458</id><snippet>Yes</snippet></ROW><ROW><id>11768458</id><snippet>.pyd</snippet></ROW><ROW><id>11768458</id><snippet>.dll</snippet></ROW><ROW><id>11768458</id><snippet>cd</snippet></ROW><ROW><id>11768458</id><snippet>pyd</snippet></ROW><ROW><id>11768549</id><snippet>remotecontrolledcar</snippet></ROW><ROW><id>11768549</id><snippet>pingpong</snippet></ROW><ROW><id>11768549</id><snippet>MyServer</snippet></ROW><ROW><id>11768549</id><snippet>ServerAdaptor</snippet></ROW><ROW><id>11768549</id><snippet>registerObject()</snippet></ROW><ROW><id>11768549</id><snippet>pyqtSlot()</snippet></ROW><ROW><id>11768549</id><snippet>Q_CLASSINFO()</snippet></ROW><ROW><id>11768549</id><snippet>__init__()</snippet></ROW><ROW><id>11768549</id><snippet>Q_CLASSINFO()</snippet></ROW><ROW><id>11768549</id><snippet>from PyQt4 import QtDBus
from PyQt4.QtCore import (QCoreApplication, QObject, Q_CLASSINFO, pyqtSlot,
                          pyqtProperty)
from PyQt4.QtDBus import QDBusConnection, QDBusAbstractAdaptor

class MyServer(QObject):

    def __init__(self):
        QObject.__init__(self)
        self.__dbusAdaptor = ServerAdaptor(self)
        self.__name = 'myname'

    def echo(self, value):
        return'Received: {0}'.format(value)

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, value):
        self.__name = value


class ServerAdaptor(QDBusAbstractAdaptor):
    """ This provides the DBus adaptor to the outside world"""

    Q_CLASSINFO("D-Bus Interface", "com.home.dbus")
    Q_CLASSINFO("D-Bus Introspection",
    '  &lt;interface name="com.home.dbus"&gt;\n'
    '    &lt;property name="name" type="s" access="readwrite"/&gt;\n'
    '    &lt;method name="echo"&gt;\n'
    '      &lt;arg direction="in" type="s" name="phrase"/&gt;\n'
    '      &lt;arg direction="out" type="s" name="echoed"/&gt;\n'
    '    &lt;/method&gt;\n'
    '  &lt;/interface&gt;\n')

    def __init__(self, parent):
        super().__init__(parent)

    @pyqtSlot(str, result=str)
    def echo(self, phrase):
        return self.parent().echo(phrase)

    @pyqtProperty(str)
    def name(self):
        return self.parent().name

    @name.setter
    def name(self, value):
        self.parent().name = value

def start():
    app = QCoreApplication([])
    bus = QDBusConnection.sessionBus()
    server = MyServer()
    bus.registerObject('/mydbus', server)
    bus.registerService('com.home.dbus')
    app.exec()

if __name__ == '__main__':
    start()
</snippet></ROW><ROW><id>11768768</id><snippet>class StaticMethod(object):
    "Emulate PyStaticMethod_Type() in Objects/funcobject.c"

    def __init__(self, f):
        self.f = f

    def __get__(self, obj, objtype=None):
        return self.f
</snippet></ROW><ROW><id>11768768</id><snippet>class ClassMethod(object):
    "Emulate PyClassMethod_Type() in Objects/funcobject.c"

    def __init__(self, f):
        self.f = f

    def __get__(self, obj, klass=None):
        if klass is None:
            klass = type(obj)
        def newfunc(*args):
            return self.f(klass, *args)
        return newfunc
</snippet></ROW><ROW><id>11768894</id><snippet>screen.fill( (0,0,0) )</snippet></ROW><ROW><id>11768894</id><snippet>import sys, random, pygame
from pygame.locals import *

pygame.init()

w = 640
h = 480

screen = pygame.display.set_mode((w,h))
morphingShape = pygame.Surface((20,20))
morphingShape.fill((255, 137, 0)) #random colour for testing
morphingRect = morphingShape.get_rect()

# clock object that will be used to make the animation
# have the same speed on all machines regardless
# of the actual machine speed.
clock = pygame.time.Clock()

def ShapeSizeChange(shape, screen):
    x = random.randint(-21, 20)
    w = shape.get_width()
    h = shape.get_height()
    if w + x &gt; 0 and h + x &gt; 0:
        shape = pygame.transform.smoothscale(shape, (w + x, h + x))
    else:
        shape = pygame.transform.smoothscale(shape, (w - x, h - x))
    shape.fill((255, 137, 0))
    rect = shape.get_rect()
    screen.blit(shape, rect)
    return shape


while True:
    # limit the demo to 50 frames per second
    clock.tick( 50 );

    # clear screen with black color
    # THIS IS WHAT WAS REALLY MISSING...
    screen.fill( (0,0,0) )

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
    morphingShape = ShapeSizeChange(morphingShape, screen)
    pygame.display.update()
</snippet></ROW><ROW><id>11768894</id><snippet>screen.fill( (0,0,0) )</snippet></ROW><ROW><id>11769054</id><snippet>&gt;&gt;&gt; class Foo(object):
...     pass
...
&gt;&gt;&gt; obj = Foo()
&gt;&gt;&gt; obj.__class__.__name__ = 'Bar'
&gt;&gt;&gt; obj
&lt;__main__.Bar object at 0x7fae8ba3af90&gt;
&gt;&gt;&gt; obj.__class__
&lt;class '__main__.Bar'&gt;
</snippet></ROW><ROW><id>11769054</id><snippet>Foo.__name__ = 'Bar'</snippet></ROW><ROW><id>11769054</id><snippet>obj.__class__.__name__</snippet></ROW><ROW><id>11769086</id><snippet>&gt;&gt;&gt; a = ['A123','B456','C789','D007']
&gt;&gt;&gt; b = ['B456','D007','E009']
&gt;&gt;&gt; c = list(set(a).intersection(b))
&gt;&gt;&gt; print c
['B456', 'D007']
</snippet></ROW><ROW><id>11769086</id><snippet>def compare( fileA, fileB ):
    a_file = open(fileA, 'r')
    a_data = a_file.read()
    a_file.close()

    b_file = open(fileB, 'r')
    b_data = b_file.read()
    b_file.close()

    # compare the contents
    a_set = set(a_data.split(','))
    b_set = set(b_data.split(','))

    return list(a_set.intersection(b_set))

compare('more.csv', 'less.csv')
</snippet></ROW><ROW><id>11769147</id><snippet>sqlalchemy</snippet></ROW><ROW><id>11769147</id><snippet>delete</snippet></ROW><ROW><id>11769147</id><snippet>from bottle import delete</snippet></ROW><ROW><id>11769147</id><snippet>import sqlalchemy</snippet></ROW><ROW><id>11769147</id><snippet>sqlalchemy</snippet></ROW><ROW><id>11769147</id><snippet>from sqlalchemy import function_you_need, object_you_need</snippet></ROW><ROW><id>11769285</id><snippet>classifier.__init__</snippet></ROW><ROW><id>11769285</id><snippet>self.setdb('autocreated_db_file')</snippet></ROW><ROW><id>11769285</id><snippet>class classifier:                                             
    def __init__(self,getfeatures,filename=None):
    ...
    self.setdb('autocreated_db_file')
</snippet></ROW><ROW><id>11769636</id><snippet>import rpy2.robjects.numpy2ri as rpyn
vector=rpyn.ri2numpy(vector_R)
</snippet></ROW><ROW><id>11769768</id><snippet>SqlAlchemy ORM: Total time for 100000 records 16.4133379459 secs
SqlAlchemy ORM pk given: Total time for 100000 records 9.77570986748 secs
SqlAlchemy Core: Total time for 100000 records 0.568737983704 secs
sqlite3: Total time for 100000 records 0.595796823502 sec
</snippet></ROW><ROW><id>11769768</id><snippet>import time
import sqlite3

from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String,  create_engine
from sqlalchemy.orm import scoped_session, sessionmaker

Base = declarative_base()
DBSession = scoped_session(sessionmaker())

class Customer(Base):
    __tablename__ = "customer"
    id = Column(Integer, primary_key=True)
    name = Column(String(255))

def init_sqlalchemy(dbname = 'sqlite:///sqlalchemy.db'):
    global engine
    engine = create_engine(dbname, echo=False)
    DBSession.remove()
    DBSession.configure(bind=engine, autoflush=False, expire_on_commit=False)
    Base.metadata.drop_all(engine)
    Base.metadata.create_all(engine)

def test_sqlalchemy_orm(n=100000):
    init_sqlalchemy()
    t0 = time.time()
    for i in range(n):
        customer = Customer()
        customer.name = 'NAME ' + str(i)
        DBSession.add(customer)
        if i % 1000 == 0:
            DBSession.flush()
    DBSession.commit()
    print "SqlAlchemy ORM: Total time for " + str(n) + " records " + str(time.time() - t0) + " secs"

def test_sqlalchemy_orm_pk_given(n=100000):
    init_sqlalchemy()
    t0 = time.time()
    for i in range(n):
        customer = Customer(id=i+1, name="NAME " + str(i))
        DBSession.add(customer)
        if i % 1000 == 0:
            DBSession.flush()
    DBSession.commit()
    print "SqlAlchemy ORM pk given: Total time for " + str(n) + " records " + str(time.time() - t0) + " secs"

def test_sqlalchemy_core(n=100000):
    init_sqlalchemy()
    t0 = time.time()
    engine.execute(
        Customer.__table__.insert(),
        [{"name":'NAME ' + str(i)} for i in range(n)]
    )
    print "SqlAlchemy Core: Total time for " + str(n) + " records " + str(time.time() - t0) + " secs"

def init_sqlite3(dbname):
    conn = sqlite3.connect(dbname)
    c = conn.cursor()
    c.execute("DROP TABLE IF EXISTS customer")
    c.execute("CREATE TABLE customer (id INTEGER NOT NULL, name VARCHAR(255), PRIMARY KEY(id))")
    conn.commit()
    return conn

def test_sqlite3(n=100000, dbname = 'sqlite3.db'):
    conn = init_sqlite3(dbname)
    c = conn.cursor()
    t0 = time.time()
    for i in range(n):
        row = ('NAME ' + str(i),)
        c.execute("INSERT INTO customer (name) VALUES (?)", row)
    conn.commit()
    print "sqlite3: Total time for " + str(n) + " records " + str(time.time() - t0) + " sec"

if __name__ == '__main__':
    test_sqlalchemy_orm(100000)
    test_sqlalchemy_orm_pk_given(100000)
    test_sqlalchemy_core(100000)
    test_sqlite3(100000)
</snippet></ROW><ROW><id>11769969</id><snippet>import SimpleHTTPServer, SocketServer
import urlparse

PORT = 80

class MyHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
   def do_GET(self):

       # Parse query data &amp; params to find out what was passed
       parsedParams = urlparse.urlparse(self.path)
       queryParsed = urlparse.parse_qs(parsedParams.query)

       # request is either for a file to be served up or our test
       if parsedParams.path == "/test":
          self.processMyRequest(queryParsed)
       else:
          # Default to serve up a local file 
          SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self);

   def processMyRequest(self, query):

       self.send_response(200)
       self.send_header('Content-Type', 'application/xml')
       self.end_headers()

       self.wfile.write("&lt;?xml version='1.0'?&gt;");
       self.wfile.write("&lt;sample&gt;Some XML&lt;/sample&gt;");
       self.wfile.close();

Handler = MyHandler

httpd = SocketServer.TCPServer(("", PORT), Handler)

print "serving at port", PORT
httpd.serve_forever()
</snippet></ROW><ROW><id>11770066</id><snippet>options</snippet></ROW><ROW><id>11770066</id><snippet>includes</snippet></ROW><ROW><id>11770066</id><snippet>options = { "py2exe": {
                "includes": ["LIBRARY HERE", ...]
          }}
</snippet></ROW><ROW><id>11770066</id><snippet>"includes": ["matplotlib.backends.backend_tkagg"]</snippet></ROW><ROW><id>11770210</id><snippet>str(another_tree)</snippet></ROW><ROW><id>11770210</id><snippet>__str__</snippet></ROW><ROW><id>11770210</id><snippet>str()</snippet></ROW><ROW><id>11770210</id><snippet>str()</snippet></ROW><ROW><id>11770210</id><snippet>__str__</snippet></ROW><ROW><id>11770301</id><snippet>int DLL_EXPORT TestFunction(int data);
</snippet></ROW><ROW><id>11770301</id><snippet>cdecl</snippet></ROW><ROW><id>11770301</id><snippet>windll</snippet></ROW><ROW><id>11770301</id><snippet>stdcall</snippet></ROW><ROW><id>11770301</id><snippet>stdcall</snippet></ROW><ROW><id>11770301</id><snippet>cdecl</snippet></ROW><ROW><id>11770301</id><snippet>cdll</snippet></ROW><ROW><id>11770301</id><snippet>windll</snippet></ROW><ROW><id>11770345</id><snippet>format(str(x), "." + str(n) + "f")
</snippet></ROW><ROW><id>11770345</id><snippet>format(str(x), ".%sf" % n)
</snippet></ROW><ROW><id>11770527</id><snippet>drawLine()</snippet></ROW><ROW><id>11770527</id><snippet>self</snippet></ROW><ROW><id>11770527</id><snippet>def selectPen(pen):
    print('called selectPen with pen', pen)

def penDown():
    print('called penDown')

def drawLine(direction, length):
    print('called drawLine with direction', direction, 'and length', length)

def penUp():
    print('called penUp')

def parseSource(source):
    tempSource = [op.split(' ') for op in source]
    parsedSource = []
    for op in tempSource:
        parsedOp = []
        for i, el in enumerate(op):
            if i == 0:
                parsedOp.append(el)
            else:
                try:
                    parsedOp.append(int(el))
                except ValueError:
                    parsedOp.append(el)
        parsedSource.append(tuple(parsedOp))

    return parsedSource

def dispatch(parsedSource):
    opDict = {'P':(selectPen,), 'D':(penDown,), 'N': (drawLine, 0), 'S':(drawLine, 180), 
    'E': (drawLine, 90), 'W': (drawLine, 270), 'U': (penUp,)}

    for op in parsedSource:
        methodName = op[0]
        methodToCall = opDict[methodName][0] 
        args = op[1:]
        if len(opDict[methodName])&gt;1:
            args = opDict[methodName][1:] + args

        methodToCall(*args)

if __name__ == '__main__':
    source=['P 3', 'D', 'N 4', 'E 2', 'S 4', 'W 2', 'U']
    parsedSource = parseSource(source)
    dispatch(parsedSource)
</snippet></ROW><ROW><id>11770644</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>11770644</id><snippet>csv</snippet></ROW><ROW><id>11770644</id><snippet>numpy</snippet></ROW><ROW><id>11770644</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; data = numpy.loadtxt('/tmp/200502.txt')
&gt;&gt;&gt; xs = data.T[0]/10000.
&gt;&gt;&gt; ys = data.T[1]/10000.
&gt;&gt;&gt; da = data.T[2]
</snippet></ROW><ROW><id>11770751</id><snippet>UserResource</snippet></ROW><ROW><id>11770751</id><snippet>from django.contrib.auth.models import User
from django.contrib.auth import authenticate, login, logout
from tastypie.http import HttpUnauthorized, HttpForbidden
from django.conf.urls import url
from tastypie.utils import trailing_slash

class UserResource(ModelResource):
    class Meta:
        queryset = User.objects.all()
        fields = ['first_name', 'last_name', 'email']
        allowed_methods = ['get', 'post']
        resource_name = 'user'

    def override_urls(self):
        return [
            url(r"^(?P&lt;resource_name&gt;%s)/login%s$" %
                (self._meta.resource_name, trailing_slash()),
                self.wrap_view('login'), name="api_login"),
            url(r'^(?P&lt;resource_name&gt;%s)/logout%s$' %
                (self._meta.resource_name, trailing_slash()),
                self.wrap_view('logout'), name='api_logout'),
        ]

    def login(self, request, **kwargs):
        self.method_check(request, allowed=['post'])

        data = self.deserialize(request, request.raw_post_data, format=request.META.get('CONTENT_TYPE', 'application/json'))

        username = data.get('username', '')
        password = data.get('password', '')

        user = authenticate(username=username, password=password)
        if user:
            if user.is_active:
                login(request, user)
                return self.create_response(request, {
                    'success': True
                })
            else:
                return self.create_response(request, {
                    'success': False,
                    'reason': 'disabled',
                    }, HttpForbidden )
        else:
            return self.create_response(request, {
                'success': False,
                'reason': 'incorrect',
                }, HttpUnauthorized )

    def logout(self, request, **kwargs):
        self.method_check(request, allowed=['get'])
        if request.user and request.user.is_authenticated():
            logout(request)
            return self.create_response(request, { 'success': True })
        else:
            return self.create_response(request, { 'success': False }, HttpUnauthorized)
</snippet></ROW><ROW><id>11770751</id><snippet>http://hostname/api/user/login</snippet></ROW><ROW><id>11770751</id><snippet>{ 'username' : 'me', 'password' : 'l33t' }</snippet></ROW><ROW><id>11770832</id><snippet>self.dictPool[poolKey] = senderPool.dictPool[poolKey]
</snippet></ROW><ROW><id>11770832</id><snippet>self.dictPool[poolKey] = senderPool.dictPool[poolKey][:]</snippet></ROW><ROW><id>11770832</id><snippet>[:]</snippet></ROW><ROW><id>11770898</id><snippet>datetime.strptime()</snippet></ROW><ROW><id>11770898</id><snippet>try:
    dt = datetime.strptime(line.split(" [", 1)[0], "%Y-%m-%d %H:%M:%S,%f")
except ValueError:
    dt = None
</snippet></ROW><ROW><id>11770898</id><snippet>line.split(" [", 1)[0]</snippet></ROW><ROW><id>11770898</id><snippet>' '.join(line.split(None, 2)[:2])
</snippet></ROW><ROW><id>11770994</id><snippet>sucmac:~ ajung$ cat x.py 
def toF(cel):
    return '%.2f' % (cel * 1.8 +32)

print toF(0)
print toF(50)
print toF(100)

sucmac:~ ajung$ python x.py 
32.00
122.00
212.00
</snippet></ROW><ROW><id>11771439</id><snippet>user = session.query(User).filter_by(username=request.params['username']).first()
if user is None:
   "not found" # do whatever appropriate in your case e.g., return 404

headers = {'content-type': 'application/json'}
requests.put('http://localhost:9200/master/user/{userid}'.format(user.user_id),
             data=json.dumps(dict(name=request.params['name'], reputation=0,
                                  username=request.params['username'])),
             headers=headers)
</snippet></ROW><ROW><id>11771892</id><snippet>pip install &lt;packagename&gt;</snippet></ROW><ROW><id>11772192</id><snippet>def get_form(self, form_class):
    form = HomeForm(self.request.user, data=self.request.POST)
    return form
</snippet></ROW><ROW><id>11772192</id><snippet>def get_form(self, form_class):
    return form_class(self.request.user, **self.get_form_kwargs()
</snippet></ROW><ROW><id>11772273</id><snippet>import xml.dom.minidom as minidom

a = '&lt;parent id="1"&gt;&lt;child id="white"&gt;&lt;/child&gt;&lt;child id="red"&gt;&lt;/child&gt;&lt;/parent&gt;'
dom = minidom.parseString(a)

for parent in dom.childNodes:
    print parent.getAttribute('id')
    for child in parent.childNodes:
        print '  %s' % child.getAttribute('id')
</snippet></ROW><ROW><id>11772293</id><snippet>recv</snippet></ROW><ROW><id>11772293</id><snippet>join</snippet></ROW><ROW><id>11772293</id><snippet>join</snippet></ROW><ROW><id>11772293</id><snippet>join</snippet></ROW><ROW><id>11772293</id><snippet>is_alive</snippet></ROW><ROW><id>11772293</id><snippet>join</snippet></ROW><ROW><id>11772293</id><snippet>all_processes = []
while True:
    connection_socket, client_address = server_socket.accept()       
    #create a new process with the new connection_socket
    new_process = Process(target = new_client, args = (connection_socket,))
    new_process.start()

    # Add process to our list
    all_processes.append(new_process)

    # Join all dead processes
    for proc in all_processes:
        if not proc.is_alive():
            proc.join()
    # And remove them from the list
    all_processes = [proc for proc in all_processes if proc.is_alive()]
</snippet></ROW><ROW><id>11772293</id><snippet>select</snippet></ROW><ROW><id>11772767</id><snippet>tornado-redis</snippet></ROW><ROW><id>11772767</id><snippet>Client.set</snippet></ROW><ROW><id>11772767</id><snippet>def set(self, key, value, callback=None):
    self.execute_command('SET', key, value, callback=callback)
</snippet></ROW><ROW><id>11772767</id><snippet>gen.Task</snippet></ROW><ROW><id>11772767</id><snippet>gen</snippet></ROW><ROW><id>11772767</id><snippet>c = tornadoredis.Client()
c.connect()

def on_set(result):
    log.debug("set result: %s" % result)

c.set('foo', 'Lorem ipsum #1', on_set)
c.set('bar', 'Lorem ipsum #2', on_set)
c.set('zar', 'Lorem ipsum #3', on_set)
</snippet></ROW><ROW><id>11772767</id><snippet>class MyRedisWrapper(object):
    @gen.engine
    def set(self, key, value):
        yield tornado.gen.Task(t.set, key, value)

r = MyRedisWrapper()

class MyHandler(tornado.web.RequestHandler):
    def get(self):
        r.set('key', 'value') #It will work, but not sure about efficiency.
</snippet></ROW><ROW><id>11772917</id><snippet>lambda: os.system(cmd)</snippet></ROW><ROW><id>11772917</id><snippet>def buttonClicked(self):
    os.system(cmd)
    QtCore.QCoreApplication.instance().quit()

...
    btn = QtGui.QPushButton('Yes', self)     
    btn.clicked.connect(self.buttonClicked)
...
</snippet></ROW><ROW><id>11773443</id><snippet>kind</snippet></ROW><ROW><id>11773443</id><snippet>"cubic"</snippet></ROW><ROW><id>11773443</id><snippet>&gt;&gt;&gt; x = np.arange(0, 10)
&gt;&gt;&gt; y = np.exp(-x / 3.0)
&gt;&gt;&gt; f = interpolate.interp1d(x, y, "cubic")
&gt;&gt;&gt; i = np.arange(0.5, 9.5, 1)
&gt;&gt;&gt; f(i)
array([ 0.85826566,  0.61497421,  0.44064828,  0.31573829,  0.22623637,
        0.16210544,  0.11615363,  0.08322771,  0.05963526])
</snippet></ROW><ROW><id>11773464</id><snippet>Select</snippet></ROW><ROW><id>11773464</id><snippet>SelectMultiple</snippet></ROW><ROW><id>11773464</id><snippet>class MovieForm(ModelForm):
    class Meta:
        model = Movie
        exclude = ('slug', 'image')
        widgets = {
            'director': SelectMultiple(attrs={'class': 'chzn-select'}),
            ...
        } 
</snippet></ROW><ROW><id>11773540</id><snippet>def visualizeSignals(self, imin, imax):

    times = self.time[imin:imax]
    nrows = (int)((times[(len(times)-1)] - times[0])/self.mod) + 1

    fig = plt.figure('2d profiles')
    ax = fig.gca(projection='3d')
    for i in range(nrows-1):
        x = self.mat1[i][0] + self.mod * i
        y = np.array(self.mat1T[i])
        z = np.array(self.mat2[i])
        ax.plot(y, z, zs = x, zdir='z')

    plt.show()
</snippet></ROW><ROW><id>11773540</id><snippet>def visualize(self, imin, imax, typ_ = "wireframe"):
    """
    3d plot signal between imin and imax
    . typ_: type of plot, "wireframce", "surface"
    """

    times = self.retT[imin:imax]
    nrows = (int)((times[(len(times)-1)] - times[0])/self.mod) + 1

    self.modulate(imin, imax)

    fig = plt.figure('3d view')
    ax = fig.gca(projection='3d')

    x = []
    for i in range(nrows):
        x.append(self.matRetT[i][0] + self.mod * i)

    y = []
    for i in range(len(self.matRetT[0])):
        y.append(self.matRetT[0][i])
    y = y[:-1]


    X,Y = np.meshgrid(x,y)

    z = [tuple(self.matGC2D[i]) for i in range(len(self.matGC))] # matGC a matrix

    zzip = zip(*z)

    for i in range(len(z)):
        print len(z[i])

    if(typ_ == "wireframe"):
        ax.plot_wireframe(X,Y,zzip)
        plt.show()
    elif(typ_ == "contour"):
        cset = ax.contour(X, Y, zzip, zdir='z', offset=0)
        plt.show()
    elif(typ_ == "surf_contours"):
        surf = ax.plot_surface(X, Y, zzip, rstride=1, cstride=1, alpha=0.3)
        cset = ax.contour(X, Y, zzip, zdir='z', offset=-40)
        cset = ax.contour(X, Y, zzip, zdir='x', offset=-40)
        cset = ax.contour(X, Y, zzip, zdir='y', offset=-40)
        plt.show()
</snippet></ROW><ROW><id>11773601</id><snippet>text/plain</snippet></ROW><ROW><id>11773601</id><snippet>file(1)</snippet></ROW><ROW><id>11773605</id><snippet>resp = make_response(render_template(...))
</snippet></ROW><ROW><id>11773605</id><snippet>resp = render_template('show_entries.html', AO_sInteger = session.get('AO_sInteger'))
</snippet></ROW><ROW><id>11773605</id><snippet>make_response</snippet></ROW><ROW><id>11773605</id><snippet>from flask import make_response
resp = make_response(render_template('show_entries.html', AO_sInteger = session.get('AO_sInteger')))
</snippet></ROW><ROW><id>11773667</id><snippet>input</snippet></ROW><ROW><id>11773667</id><snippet>accept</snippet></ROW><ROW><id>11773667</id><snippet>File</snippet></ROW><ROW><id>11773667</id><snippet>type</snippet></ROW><ROW><id>11773667</id><snippet>""</snippet></ROW><ROW><id>11773667</id><snippet>type</snippet></ROW><ROW><id>11773810</id><snippet>def get_rand_file(folder, match=None):
   if match == None:
       return random.choice(os.listdir(folder))
   else:
       return random.choice([s for s in os.listdir(folder) if match in s])
</snippet></ROW><ROW><id>11773838</id><snippet>zip(*A)</snippet></ROW><ROW><id>11773838</id><snippet>&gt;&gt;&gt; zip(*A)
[(0, 1, 2), (0, 1, 2)]
</snippet></ROW><ROW><id>11774271</id><snippet>&gt;&gt;&gt; ts.resample('D', how='mean', closed="left", loffset=datetime.timedelta(days=-1))
2012-01-01    0.200299
</snippet></ROW><ROW><id>11774450</id><snippet>prvi.stdin.flush()</snippet></ROW><ROW><id>11774450</id><snippet>prvi.stdin.write(...)</snippet></ROW><ROW><id>11774450</id><snippet>flush()</snippet></ROW><ROW><id>11774450</id><snippet>prvi.stdout.read()</snippet></ROW><ROW><id>11774450</id><snippet>read()</snippet></ROW><ROW><id>11774450</id><snippet>readline()</snippet></ROW><ROW><id>11774450</id><snippet>\n</snippet></ROW><ROW><id>11774450</id><snippet>flush()</snippet></ROW><ROW><id>11774685</id><snippet>key</snippet></ROW><ROW><id>11774685</id><snippet>sort</snippet></ROW><ROW><id>11774685</id><snippet>def key(branch):
    id, flows = branch
    return ordered_branches.index(id)
</snippet></ROW><ROW><id>11774685</id><snippet>def key(branch):
    id, flows = branch
    try:
        return ordered_branches.index(id)
    except ValueError:
        parts = id.split('-')
        id = '-'.join((parts[1], parts[0], parts[2]))
        return ordered_branches.index(id)
</snippet></ROW><ROW><id>11774685</id><snippet>branch_flows</snippet></ROW><ROW><id>11774685</id><snippet>sorted(branch_flows, key=key)</snippet></ROW><ROW><id>11774685</id><snippet>ordered_branches</snippet></ROW><ROW><id>11774685</id><snippet>order_dict = dict((x, i) for i, x in enumerate(ordered_branches))
</snippet></ROW><ROW><id>11774685</id><snippet>ordered_branches.index(id)</snippet></ROW><ROW><id>11774685</id><snippet>order_dict[id]</snippet></ROW><ROW><id>11774685</id><snippet>ValueError</snippet></ROW><ROW><id>11774685</id><snippet>KeyError</snippet></ROW><ROW><id>11774685</id><snippet>def reverse_id(id):
    parts = id.split('-')
    return '-'.join((parts[1], parts[0], parts[2]))
order_dict = dict((x, i) for i, x in enumerate(ordered_branches))
order_dict.update((reverse_id(x), i) for x, i in order_dict.items())
</snippet></ROW><ROW><id>11774685</id><snippet>def key(branch):
    id, flows = branch
    return order_dict[id]
</snippet></ROW><ROW><id>11774824</id><snippet>l1 = [1,1,2,3,5,6]
l2 = [1,2,8,9]
from collections import Counter

print Counter(l1) - Counter(l2)
print Counter(l2) - Counter(l1)
</snippet></ROW><ROW><id>11774824</id><snippet>Counter</snippet></ROW><ROW><id>11774824</id><snippet>from itertools import chain
r = Counter(l2) - Counter(l1)
list(chain(*[p*[k] for k,p in r.items()]))
</snippet></ROW><ROW><id>11774824</id><snippet>Counter</snippet></ROW><ROW><id>11774824</id><snippet>list(chain(* ... ))</snippet></ROW><ROW><id>11774831</id><snippet>//</snippet></ROW><ROW><id>11774831</id><snippet>floor</snippet></ROW><ROW><id>11774944</id><snippet>getVariable</snippet></ROW><ROW><id>11775242</id><snippet>str</snippet></ROW><ROW><id>11775242</id><snippet>str</snippet></ROW><ROW><id>11775242</id><snippet>nomPays[0]</snippet></ROW><ROW><id>11775242</id><snippet>unicode</snippet></ROW><ROW><id>11775242</id><snippet>firstChar = unicode(nomPays, 'UTF-8')[0].encode('UTF-8')
</snippet></ROW><ROW><id>11775242</id><snippet>startswith</snippet></ROW><ROW><id>11775242</id><snippet>if any(nomPays.startswith(voyelle) for voyelle in voyelles):
</snippet></ROW><ROW><id>11775242</id><snippet>unicode</snippet></ROW><ROW><id>11775531</id><snippet>main()</snippet></ROW><ROW><id>11775531</id><snippet>main()</snippet></ROW><ROW><id>11775556</id><snippet>s.replace('/', '')
</snippet></ROW><ROW><id>11775596</id><snippet>process_view</snippet></ROW><ROW><id>11775596</id><snippet>def process_view(self, request, view_func, view_args, view_kwargs)
    ...
</snippet></ROW><ROW><id>11775596</id><snippet>def process_view(self, request, view_func, view_args, view_kwargs):
    company = view_kwargs.get('company', None)
</snippet></ROW><ROW><id>11775708</id><snippet>zip()</snippet></ROW><ROW><id>11775708</id><snippet>result = [0, 0, 0, 0, 0]
listCodons = ['gtt', 'gaa', 'aca', 'gag', 'aca']
</snippet></ROW><ROW><id>11775708</id><snippet>&gt;&gt;&gt; list(zip(result, listCodons))
[(0, 'gtt'), (0, 'gaa'), (0, 'aca'), (0, 'gag'), (0, 'aca')]
</snippet></ROW><ROW><id>11775708</id><snippet>with open(e+'.csv','w') as outfile:
    out = csv.writer(outfile)
    out.writerows(zip(result, listCodons))
</snippet></ROW><ROW><id>11775763</id><snippet>class Myclass(object):
    def __init__(self, name):
        self.name = name

def mydef():
   return Myclass("a1")

a1 = mydef()
print a1.name
</snippet></ROW><ROW><id>11775763</id><snippet>instances = []
for x in range(1000):
    instances.append(Myclass("Instance {0}".format(x)))
print instance[42].name
</snippet></ROW><ROW><id>11775763</id><snippet>object</snippet></ROW><ROW><id>11775763</id><snippet>object</snippet></ROW><ROW><id>11775763</id><snippet>"a1"</snippet></ROW><ROW><id>11775763</id><snippet>def mydef(filename):
    ret = []
    with open(filename) as f:
        for line in f:
            # Call `strip` on line to remove newline and surrounding whitespace
            ret.append(Myclass(line.strip()))
    return ret
</snippet></ROW><ROW><id>11775763</id><snippet>instances = []
for filename in ["myfile1", "myfile2", "myfile3"]:
    instances.extend(mydef(filename))
</snippet></ROW><ROW><id>11775763</id><snippet>def mydef(filename):
    ret = []
    with open(filename, "r") as file_han:
        for line in file_han:
            string_f = line.split('"')[1]
            ret.append(Myclass(string_f))
    return ret

i = mydef("name_of_file")
</snippet></ROW><ROW><id>11775763</id><snippet>dict</snippet></ROW><ROW><id>11775763</id><snippet>def mydef(filename):
    ret = {}
    with open(filename, "r") as file_han:
        for line in file_han:
            string_f = line.split('"')[1]
            ret[string_f] = Myclass(string_f)
    return ret

i = mydef("name_of_file")
print i["ghi"].name  # should print "ghi"
</snippet></ROW><ROW><id>11775763</id><snippet>def mydef(filename):
    d = {}
    L = []
    with open(filename, "r") as file_han:
        for line in file_han:
            string_f = line.split('"')[1]
            instance = Myclass(string_f)
            d[string_f] = instance
            L.append(instance)
    return L, d

L, d = mydef("name_of_file")
print d["ghi"].name
print L[3]
print L.index(d["ghi"])
</snippet></ROW><ROW><id>11775854</id><snippet>datetime.date</snippet></ROW><ROW><id>11775854</id><snippet>.items()</snippet></ROW><ROW><id>11775854</id><snippet>data = [(datetime.datetime.strptime(k, '%d.%m.%Y').date(), v) 
        for k, v in yourdict.items()]
data.sort()
</snippet></ROW><ROW><id>11775854</id><snippet>data = sorted(yourdict.items(), 
              key=lambda i: datetime.datetime.strptime(i[0], '%d.%m.%Y'))
</snippet></ROW><ROW><id>11775854</id><snippet>sorted()</snippet></ROW><ROW><id>11775854</id><snippet>key</snippet></ROW><ROW><id>11775854</id><snippet>datetime.datetime</snippet></ROW><ROW><id>11775854</id><snippet>datetime.date</snippet></ROW><ROW><id>11775935</id><snippet>imshow</snippet></ROW><ROW><id>11775935</id><snippet>import pylab as plt
import numpy as np


Z=np.array(((1,2,3,4,5),(4,5,6,7,8),(7,8,9,10,11)))
im = plt.imshow(Z, cmap='hot')
plt.colorbar(im, orientation='horizontal')
plt.show()
</snippet></ROW><ROW><id>11775935</id><snippet>TempLake</snippet></ROW><ROW><id>11776122</id><snippet>self</snippet></ROW><ROW><id>11776122</id><snippet>context</snippet></ROW><ROW><id>11776122</id><snippet># this is needed only if you don't have a context to pass
from zope.app.component import hooks

def print_all(context=None):
    if context is None:
        context = hooks.getSite()
    catalog = getToolByName(context, "portal_catalog")
    results = catalog(portal_type = 'Person')
    final_result = ''
    for result in results:
        final_result += result.getObject().print_person()
    return final_result
</snippet></ROW><ROW><id>11776307</id><snippet>links</snippet></ROW><ROW><id>11776307</id><snippet>a = (links.pop(0) for _ in range(len(links))) //What does this do?

for link in a:
</snippet></ROW><ROW><id>11776307</id><snippet>while links:
    link = links.pop(0)
</snippet></ROW><ROW><id>11776307</id><snippet>links.reverse()
while links:
    link = links.pop()
</snippet></ROW><ROW><id>11776307</id><snippet>links</snippet></ROW><ROW><id>11776477</id><snippet>meshgrid</snippet></ROW><ROW><id>11776477</id><snippet>from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np

X = np.arange(1, 10)
Y = np.arange(1, 10)
X, Y = np.meshgrid(X, Y)
R = np.sqrt(X**2 + Y**2)
Z = np.sin(R)
fig = plt.figure()
ax = fig.gca(projection='3d')
surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='hot', linewidth=0, antialiased=False)
ax.set_zlim(-1.01, 1.01)

fig.colorbar(surf, shrink=0.5, aspect=5)
plt.show()
</snippet></ROW><ROW><id>11776477</id><snippet>imshow</snippet></ROW><ROW><id>11776477</id><snippet>im = plt.imshow(Z, cmap='hot')
plt.colorbar(im, orientation='horizontal')
plt.show()
</snippet></ROW><ROW><id>11776739</id><snippet>setCheckable(true)</snippet></ROW><ROW><id>11776739</id><snippet>QButtonGroup</snippet></ROW><ROW><id>11777030</id><snippet>pcolor</snippet></ROW><ROW><id>11777030</id><snippet>pcolormesh</snippet></ROW><ROW><id>11777030</id><snippet>imshow</snippet></ROW><ROW><id>11777030</id><snippet>imshow</snippet></ROW><ROW><id>11777030</id><snippet>import pylab as plt
import numpy as np


Z=np.array((range(1,30),range(31,60),range(61,90))).transpose()

X,Y=np.meshgrid(range(Z.shape[0]+1),range(Z.shape[1]+1))
im = plt.pcolormesh(X,Y,Z.transpose(), cmap='hot')
plt.colorbar(im, orientation='horizontal')
plt.show()
</snippet></ROW><ROW><id>11777245</id><snippet>import matplotlib.pyplot as plt    

def check_axes(plot_fn):
    def _check_axes_wrapped_plot_fn(axes=None, x=None, y=None):
        if not axes:
            fig = plt.figure()
            axes = fig.add_subplot(111)
            return plot_fn(axes, x, y)
        else:
            return plot_fn(axes, x, y)
    return _check_axes_wrapped_plot_fn

@check_axes
def line_plot(axes, x=None, y=None):
    axes.plot(x, y)

@check_axes
def bar_plot(axes, x=None, y=None):
    axes.bar(left=x, height=y)
</snippet></ROW><ROW><id>11777245</id><snippet>@check_axes</snippet></ROW><ROW><id>11777245</id><snippet>line_plot</snippet></ROW><ROW><id>11777245</id><snippet>_check_axes_wrapped_plot_fn</snippet></ROW><ROW><id>11777245</id><snippet>axes</snippet></ROW><ROW><id>11777245</id><snippet>check_axes</snippet></ROW><ROW><id>11777245</id><snippet>axes</snippet></ROW><ROW><id>11777245</id><snippet>x</snippet></ROW><ROW><id>11777245</id><snippet>y</snippet></ROW><ROW><id>11777245</id><snippet>*</snippet></ROW><ROW><id>11777245</id><snippet>def check_axes(plot_fn):
    def _check_axes_wrapped_plot_fn(axes=None, *args):
        if not axes:
            fig = plt.figure()
            axes = fig.add_subplot(111)
            return plot_fn(axes, *args)  # pass all args after axes
        else:
            return plot_fn(axes, *args)  # pass all args after axes
    return _check_axes_wrapped_plot_fn  
</snippet></ROW><ROW><id>11777245</id><snippet>=</snippet></ROW><ROW><id>11777245</id><snippet>=</snippet></ROW><ROW><id>11777245</id><snippet>not axes</snippet></ROW><ROW><id>11777245</id><snippet>axes == None</snippet></ROW><ROW><id>11777314</id><snippet>QLabel</snippet></ROW><ROW><id>11777314</id><snippet>QButton</snippet></ROW><ROW><id>11777314</id><snippet>flat</snippet></ROW><ROW><id>11777314</id><snippet>QPushButton</snippet></ROW><ROW><id>11777314</id><snippet>mousePressEvent</snippet></ROW><ROW><id>11777314</id><snippet>QAbstractButton</snippet></ROW><ROW><id>11777661</id><snippet># define expressions to match leading and trailing
# html tags, and just suppress the leading or trailing whitespace
opener = White().suppress() + Literal("&lt;html&gt;")
closer = Literal("&lt;/html&gt;") + White().suppress()

# define a single expression to match either opener
# or closer - have to add leaveWhitespace() call so that
# we catch the leading whitespace in opener
either = opener|closer
either.leaveWhitespace()

print either.transformString(insource) 


# alternative, if you know what the tag will look like:
# match 'info=&lt;some double quoted string&gt;', and use a parse
# action to extract the contents within the quoted string,
# call strip() to remove leading and trailing whitespace,
# and then restore the original '"' characters (which are
# auto-stripped by the QuotedString class by default)
infovalue = QuotedString('"', multiline=True)
infovalue.setParseAction(lambda t: '"' + t[0].strip() + '"')
infoattr = "info=" + infovalue

print infoattr.transformString(insource)
</snippet></ROW><ROW><id>11777900</id><snippet>r</snippet></ROW><ROW><id>11777900</id><snippet>nnn</snippet></ROW><ROW><id>11777900</id><snippet>rarr = np.zeros((r_len, nnn)) # r_len rows, nnn columns
for i in range(nnn):
    rarr[:,i] = r_calc()
numpy.savetxt('test.csv', rarr, delimiter=',')
</snippet></ROW><ROW><id>11777900</id><snippet>rarr</snippet></ROW><ROW><id>11778239</id><snippet> {% url news.views.article article=article.id %}
</snippet></ROW><ROW><id>11778285</id><snippet>class Test(object):
    def __init__(self, n):
        self.name = n
        print "Created Object :",self.name

d = {}
d['a1'] = Test('a1')
print d['a1'].name
b2 = 'a2'
d[b2] = Test(b2)
print d['a2'].name
</snippet></ROW><ROW><id>11778327</id><snippet>httplib</snippet></ROW><ROW><id>11778327</id><snippet>boto.dynamodb.layer1</snippet></ROW><ROW><id>11778327</id><snippet>boto.connect_dynamodb</snippet></ROW><ROW><id>11778327</id><snippet>boto.dynamodb.layer2</snippet></ROW><ROW><id>11778327</id><snippet>boto.dynamodb.table</snippet></ROW><ROW><id>11778327</id><snippet>mock</snippet></ROW><ROW><id>11778467</id><snippet>def read_file(f, param):
    if isinstance(f, basestring):
        with open(f, 'rb') as real_f:
            return read_file2(real_f, param)
    else:
        return read_file2(real_f, param)

def read_file2(f, param):
    # Now f should be a file object
    ...
</snippet></ROW><ROW><id>11778645</id><snippet>import xlwt
from tempfile import TemporaryFile
book = xlwt.Workbook()
sheet1 = book.add_sheet('sheet1')

supersecretdata = [34,123,4,1234,12,34,12,41,234,123,4,123,1,45123,5,43,61,3,56]

for i,e in enumerate(supersecretdata):
    sheet1.write(i,1,e)

name = "random.xls"
book.save(name)
book.save(TemporaryFile())
</snippet></ROW><ROW><id>11778645</id><snippet>import xlrd
from xlrd import open_workbook
book = open_workbook('random.xls')
sheet1 = book.sheet_by_index(0)
data = []

for i in xrange(sheet1.nrows):
    data.append(sheet1.cell(i,1).value)
</snippet></ROW><ROW><id>11778657</id><snippet>lqt.lqt_write_text.argtypes = [ctypes.c_void_p,ctypes.c_int,ctypes.c_char_p,ctypes.c_int64]
lqt.lqt_write_text.restype = None
lqt.lqt_write_text(qth, 1, 'test message', 123)
</snippet></ROW><ROW><id>11778657</id><snippet>quicktime_t</snippet></ROW><ROW><id>11778961</id><snippet>zip</snippet></ROW><ROW><id>11778961</id><snippet>izip_longest</snippet></ROW><ROW><id>11779169</id><snippet>    chart_toolbar = NavigationToolbar2Wx(chart_canvas)
    tw, th = chart_toolbar.GetSizeTuple()
    fw, fh = chart_canvas.GetSizeTuple()
    chart_toolbar.SetSize(wx.Size(fw, th))
    chart_toolbar.Realize()

    graphs_sizer = wx.BoxSizer(wx.VERTICAL)

    graphs_sizer.Add(chart_canvas, 20, flag=wx.EXPAND, border=5)
    graphs_sizer.Add(chart_toolbar, 1, flag=wx.ALIGN_CENTER, border=5)

    graphs_panel.SetSizer(graphs_sizer)
</snippet></ROW><ROW><id>11779170</id><snippet>%for postlist in postlist:
    &lt;li&gt; {{ !postlist }}
%end
</snippet></ROW><ROW><id>11779234</id><snippet>UseShellExecute = false</snippet></ROW><ROW><id>11779234</id><snippet>FileName</snippet></ROW><ROW><id>11779234</id><snippet>Arguments</snippet></ROW><ROW><id>11779234</id><snippet>RedirectStandardOutput</snippet></ROW><ROW><id>11779234</id><snippet>UseShellExecute = false</snippet></ROW><ROW><id>11779234</id><snippet>private void run_cmd(string cmd, string args)
{
     ProcessStartInfo start = new ProcessStartInfo();
     start.FileName = "my/full/path/to/python.exe";
     start.Arguments = string.Format("{0} {1}", cmd, args);
     start.UseShellExecute = false;
     start.RedirectStandardOutput = true;
     using(Process process = Process.Start(start))
     {
         using(StreamReader reader = process.StandardOutput)
         {
             string result = reader.ReadToEnd();
             Console.Write(result);
         }
     }
}
</snippet></ROW><ROW><id>11779351</id><snippet>"Oxide","ooh","oh",
"MoO",3.06,0.01,
"IrO",2.79,-0.23,
"ZZ",2.79,,
</snippet></ROW><ROW><id>11779351</id><snippet>In [7]: a.ooh
Out[7]: array([ 3.06,  2.79,  2.79])

In [8]: a.oh
Out[8]: array([ 0.01, -0.23,   nan])

In [9]: polyfit(a.oh, a.ooh, 1)
Out[9]: array([ nan,  nan])
</snippet></ROW><ROW><id>11779351</id><snippet>polyfit</snippet></ROW><ROW><id>11779351</id><snippet>In [15]: good_data = ~(numpy.isnan(a.oh) | numpy.isnan(a.ooh))

In [16]: good_data
Out[16]: array([ True,  True, False], dtype=bool)

In [17]: a.oh[good_data]
Out[17]: array([ 0.01, -0.23])

In [18]: a.ooh[good_data]
Out[18]: array([ 3.06,  2.79])

In [19]: polyfit(a.oh[good_data], a.ooh[good_data], 1)
Out[19]: array([ 1.125  ,  3.04875])
</snippet></ROW><ROW><id>11779370</id><snippet>ax = plt.gca()
ax.invert_yaxis()
</snippet></ROW><ROW><id>11779680</id><snippet>numpy.fromfile</snippet></ROW><ROW><id>11779680</id><snippet>struct</snippet></ROW><ROW><id>11779680</id><snippet>import struct
def write_data(f,data):
    f.write(struct.pack('i',len()))
    for lst in data:
        f.write(struct.pack('i%df'%len(lst),len(lst),*lst))

def read_data(f):
    def read_record(f):
        nelem = struct.unpack('i',f.read(4))[0]
        return list(struct.unpack('%df'%nelem,f.read(nelem*4))) #if tuples are Ok, remove the `list`.

    nrec = struct.unpack('i',f.read(4))[0]
    return [ read_record(f) for i in range(nrec) ]
</snippet></ROW><ROW><id>11779680</id><snippet>nelem*4</snippet></ROW><ROW><id>11779680</id><snippet>nelem*8</snippet></ROW><ROW><id>11779824</id><snippet>string strarray[4];
strarray[0] = "0x" + str.substr(0, 8);
strarray[1] = "0x" + str.substr(8, 8);
strarray[2] = "0x" + str.substr(16, 8);
strarray[3] = "0x" + str.substr(24, 8);
</snippet></ROW><ROW><id>11779824</id><snippet>{0x751CEC13,0x2EB34897,0x8013CE7A,0xF8375137}</snippet></ROW><ROW><id>11779824</id><snippet>ostringstream strm;
strm &lt;&lt; "{" &lt;&lt; "0x" &lt;&lt; str.substr(0, 8) &lt;&lt; ",0x" &lt;&lt; str.substr(8, 8)
            &lt;&lt; ",0x" &lt;&lt; str.substr(16, 8) &lt;&lt; ",0x" &lt;&lt; str.substr(24, 8) &lt;&lt; "}";
str = strm.str();
</snippet></ROW><ROW><id>11780064</id><snippet>json</snippet></ROW><ROW><id>11780064</id><snippet>__dict__</snippet></ROW><ROW><id>11780064</id><snippet>Provision</snippet></ROW><ROW><id>11780248</id><snippet>a*v[:,0]</snippet></ROW><ROW><id>11780248</id><snippet>&gt;&gt;&gt; a * v[:,0]
array([[ -5.34928759e-02,   6.77083679e-10,  -1.46171715e-06],
       [ -2.31417334e-10,   1.81432623e-02,   9.43440334e-06],
       [  3.80252453e-07,   7.18074626e-06,   1.39685787e-02]])
&gt;&gt;&gt; w[0] * b * v[:,0]
array([[-0.01805437+0.j, -0.01762974+0.j, -0.01781023+0.j],
       [ 0.00602559-0.j,  0.00603163+0.j,  0.00609548+0.j],
       [ 0.00463317-0.j,  0.00463941+0.j,  0.00470356+0.j]])
</snippet></ROW><ROW><id>11780248</id><snippet>&gt;&gt;&gt; a.dot(v[:,0])
array([-0.05349434,  0.0181527 ,  0.01397614])
&gt;&gt;&gt; w[0] * b.dot(v[:,0])
array([-0.05349434+0.j,  0.01815270+0.j,  0.01397614+0.j])
</snippet></ROW><ROW><id>11780248</id><snippet>&gt;&gt;&gt; matrix(a)*matrix(v[:,0]).T
matrix([[-0.05349434],
        [ 0.0181527 ],
        [ 0.01397614]])
&gt;&gt;&gt; w[0]*matrix(b)*matrix(v[:,0]).T
matrix([[-0.05349434+0.j],
        [ 0.01815270+0.j],
        [ 0.01397614+0.j]])
</snippet></ROW><ROW><id>11780377</id><snippet>wx.SplitterWindow</snippet></ROW><ROW><id>11780377</id><snippet>wx.lib.resizewidget</snippet></ROW><ROW><id>11780377</id><snippet>import wx  

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.window_1 = wx.SplitterWindow(self, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER)
        self.window_1_pane_1 = wx.Panel(self.window_1, wx.ID_ANY)
        self.window_1_pane_2 = wx.Panel(self.window_1, wx.ID_ANY)

        self.__set_properties()
        self.__do_layout()

    def __set_properties(self):
        self.SetTitle("frame_1")
        self.window_1_pane_1.SetBackgroundColour(wx.Colour(255, 255, 0))
        self.window_1_pane_2.SetBackgroundColour(wx.Colour(50, 153, 204))

    def __do_layout(self):
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        self.window_1.SplitVertically(self.window_1_pane_1, self.window_1_pane_2)
        sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()

if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, wx.ID_ANY, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>11780449</id><snippet>[]</snippet></ROW><ROW><id>11780449</id><snippet>list</snippet></ROW><ROW><id>11780449</id><snippet>list()</snippet></ROW><ROW><id>11780449</id><snippet>[]</snippet></ROW><ROW><id>11780449</id><snippet>list()</snippet></ROW><ROW><id>11780449</id><snippet>a = (1, 2, 3)
b = list(a)
</snippet></ROW><ROW><id>11780449</id><snippet>In [1]: %timeit []
10000000 loops, best of 3: 35 ns per loop

In [2]: %timeit list()
10000000 loops, best of 3: 145 ns per loop
</snippet></ROW><ROW><id>11780681</id><snippet>numpy.fromiter</snippet></ROW><ROW><id>11780681</id><snippet>In [30]: numpy.fromiter((tuple(row) for row in csv.reader(open('/tmp/data.csv'))), dtype='i4,i4,i4')
Out[30]: 
array([(1, 2, 3), (4, 5, 6)], dtype=[('f0', '&lt;i4'), ('f1', '&lt;i4'), ('f2', '&lt;i4')])
</snippet></ROW><ROW><id>11780681</id><snippet>$ cat /tmp/data.csv 
1,2,3
4,5,6
</snippet></ROW><ROW><id>11780681</id><snippet>pandas</snippet></ROW><ROW><id>11780681</id><snippet>numpy</snippet></ROW><ROW><id>11780962</id><snippet>#!/usr/bin/env python

from Crypto.Cipher import AES
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA

def step1():
    rsaKey = RSA.importKey(open("./myKey.der", 'r'))
    print "Step 1: This is my rsa-key:\n%s" % rsaKey.exportKey()

def step2_encrypt(string):
    rsaKey = RSA.importKey(open("./myKey.der", 'r'))
    pkcs1CipherTmp = PKCS1_OAEP.new(rsaKey)
    encryptedString = pkcs1CipherTmp.encrypt(string)
    print "Step 2: encrypted %s is %s" % (string, encryptedString)
    return encryptedString

def step3_decrypt(encryptedString):
    rsaKey = RSA.importKey(open("./myKey.der", 'r'))
    pkcs1CipherTmp = PKCS1_OAEP.new(rsaKey)
    decryptedString = pkcs1CipherTmp.decrypt(encryptedString)
    print "Step 3: decryptedString %s is %s" % (encryptedString, decryptedString)
    return decryptedString


if __name__ == "__main__":
    step1()
    encryptedString = step2_encrypt("hello, duuude")
    decryptedString = step3_decrypt(encryptedString)
    print "Tadaaaa: %s" % decryptedString
</snippet></ROW><ROW><id>11780985</id><snippet>abominable_html = '''
&lt;html&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;services&lt;/B&gt;&lt;/TD&gt;
    &lt;TD&gt;
        &lt;TABLE&gt; &lt;TR&gt;Interesting stuff!&lt;/TABLE&gt;
'''

from lxml.html import fromstring
doc = fromstring(abominable_html)

# These are equivalent, for demonstration purposes.
print doc.xpath('//table/tr/td/table/tr/text()')[0]
print doc.xpath('//table//table/tr')[0].text
</snippet></ROW><ROW><id>11780985</id><snippet>print doc.xpath('//table[./tr/td="services"]//table/tr')[0].text
</snippet></ROW><ROW><id>11781047</id><snippet>go == Kitchen or breakfast</snippet></ROW><ROW><id>11781047</id><snippet>go == Kitchen</snippet></ROW><ROW><id>11781047</id><snippet>breakfast</snippet></ROW><ROW><id>11781047</id><snippet>True</snippet></ROW><ROW><id>11781047</id><snippet>go</snippet></ROW><ROW><id>11781047</id><snippet>Kitchen</snippet></ROW><ROW><id>11781047</id><snippet>__eq__</snippet></ROW><ROW><id>11781047</id><snippet>breakfast</snippet></ROW><ROW><id>11781047</id><snippet>None</snippet></ROW><ROW><id>11781047</id><snippet>if go in (Kitchen, breakfast):
   # do something
</snippet></ROW><ROW><id>11781047</id><snippet>Kitchen</snippet></ROW><ROW><id>11781047</id><snippet>breakfast</snippet></ROW><ROW><id>11781091</id><snippet>subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False)
</snippet></ROW><ROW><id>11781169</id><snippet> def OnMouseEvent(self, event):
    """ This function manages mouse events """
    if not self._canvas.IsFrozen(): #prevent multiple freezes
        self._canvas.Freeze() #freeze it from updates
    if event:

        # set mouse cursor
        # get device context of canvas
        dc= wx.ClientDC(self._canvas)
        # Set logical function to XOR for rubberbanding
        dc.SetLogicalFunction(wx.XOR)

        # Set dc brush and pen
        # Here I set brush and pen to white and grey respectively
        # You can set it to your own choices

        # The brush setting is not really needed since we
        # dont do any filling of the dc. It is set just for 
        # the sake of completion.

        wbrush = wx.Brush(wx.Colour(255,255,255), wx.TRANSPARENT)
        wpen = wx.Pen(wx.Colour(200, 200, 200), 1, wx.SOLID)
        dc.SetBrush(wbrush)
        dc.SetPen(wpen)


    if event.LeftDown():

       # Left mouse button down, change cursor to
       # something else to denote event capture
       self.m_stpoint = event.GetPosition()

       # invalidate current canvas
       self._canvas.Refresh()
       # cache current position
       self.m_savepoint = self.m_stpoint
       self._selected = False
       self._leftclicked = True

    elif event.Dragging():   

        # User is dragging the mouse, check if
        # left button is down

        if self._leftclicked:

            # reset dc bounding box
            dc.ResetBoundingBox()
            dc.BeginDrawing()
            w = (self.m_savepoint.x - self.m_stpoint.x)
            h = (self.m_savepoint.y - self.m_stpoint.y)

            # To erase previous rectangle
            dc.DrawRectangle(self.m_stpoint.x, self.m_stpoint.y, w, h)

            # Draw new rectangle
            self.m_endpoint =  event.GetPosition()

            w = (self.m_endpoint.x - self.m_stpoint.x)
            h = (self.m_endpoint.y - self.m_stpoint.y)

            # Set clipping region to rectangle corners
            dc.SetClippingRegion(self.m_stpoint.x, self.m_stpoint.y, w,h)
            dc.DrawRectangle(self.m_stpoint.x, self.m_stpoint.y, w, h) 
            dc.EndDrawing()

            self.m_savepoint = self.m_endpoint # cache current endpoint

    elif event.LeftUp():

        # User released left button, change cursor back   
        self._selected = True  #selection is done
        self._leftclicked = False # end of clicking  
    if self._canvas.IsFrozen(): #prevent multiple thaws
        self._canvas.Thaw() #thaw it so it updates
</snippet></ROW><ROW><id>11781201</id><snippet>with open('favoriteColor.json') as inFile:
    try: 
         colors = json.load(inFile)
    except ValueError: 
         colors = []
</snippet></ROW><ROW><id>11781276</id><snippet>Counter</snippet></ROW><ROW><id>11781276</id><snippet>from collections import Counter
counter = Counter(s for v in d.itervalues() for s in v if isinstance(s, str))
</snippet></ROW><ROW><id>11781276</id><snippet>Counter({'Bob': 3, 'Bill': 3, 'Joe': 3, 'John': 2, 'Adam': 2})
</snippet></ROW><ROW><id>11781426</id><snippet>textwrap</snippet></ROW><ROW><id>11781629</id><snippet>struct</snippet></ROW><ROW><id>11781629</id><snippet>typedef struct matrix {
    float data[16];
} matrix;

matrix QuaternionToMatrix(Quaternion q) {
    ...
}
</snippet></ROW><ROW><id>11781629</id><snippet>void QuaternionToMatrix(Quaternion q, matrix *matrix) {
    ...
}
</snippet></ROW><ROW><id>11781721</id><snippet>int</snippet></ROW><ROW><id>11781721</id><snippet>int</snippet></ROW><ROW><id>11781721</id><snippet>def get_builtin(name):
    return getattr(__builtins__, name)
</snippet></ROW><ROW><id>11781721</id><snippet>deque</snippet></ROW><ROW><id>11781721</id><snippet>def gettype(name):
    from collections import deque
    # q is short for "queue", here
    q = deque([object])
    while q:
        t = q.popleft()
        if t.__name__ == name:
            return t
        else:
            print 'not', t

        try:
            # Keep looking!
            q.extend(t.__subclasses__())
        except TypeError:
            # type.__subclasses__ needs an argument, for whatever reason.
            if t is type:
                continue
            else:
                raise
    else:
        raise ValueError('No such type: %r' % name)
</snippet></ROW><ROW><id>11781741</id><snippet>encode()</snippet></ROW><ROW><id>11781741</id><snippet>decode</snippet></ROW><ROW><id>11781741</id><snippet>b""</snippet></ROW><ROW><id>11781849</id><snippet>doc.xpath('//*[contains(@style,"background") and contains(@style,"url(")]')</snippet></ROW><ROW><id>11781926</id><snippet>~</snippet></ROW><ROW><id>11781926</id><snippet>x</snippet></ROW><ROW><id>11781926</id><snippet>-(x+1)</snippet></ROW><ROW><id>11781957</id><snippet>set</snippet></ROW><ROW><id>11781957</id><snippet>set</snippet></ROW><ROW><id>11781957</id><snippet>{...}</snippet></ROW><ROW><id>11781957</id><snippet>return {
    0 : 'The host presentation space contents were copied to the application program. The target presentation space was active, and the keyboard was unlocked.',
    1 : 'Your program is not connected to a host session.',
    4 : 'The host presentation space contents were copied. The connected host     presentation space was waiting for host response.',
    5 : 'The host presentation space was copied. The keyboard was locked.',
    9 : 'A system error was encountered.',
    'x' : 'Undocumented error found. Run in circles.',
    }.get(foo, 'x'), data_string.value
</snippet></ROW><ROW><id>11781957</id><snippet>data_string.value</snippet></ROW><ROW><id>11782253</id><snippet>self.openfile()
</snippet></ROW><ROW><id>11782253</id><snippet>self.root.after(1, self.openfile)
</snippet></ROW><ROW><id>11782253</id><snippet>askopenfilename</snippet></ROW><ROW><id>11782479</id><snippet>import os
import glob
import sys
import os.path as path

try:
    directory,file = path.split( sys.argv[1] )
    def sort_func(fname):
        """
        Russian directories , english directories, russian files then english files
        although, honestly I don't know how russian files will actually be sorted ...
        """
        fullname = path.join(directory,fname)
        isRussian = any(ord(x) &gt; 127 for x in fullname)
        isDirectory = path.isdir(fullname)
        return ( not isDirectory, not isRussian, fullname)

    files = sorted( os.listdir(directory), key=sort_func)
    print ( files.index(file) + 1 )

except IndexError:
    print "oops, no commandline arguments"
</snippet></ROW><ROW><id>11782604</id><snippet>set_axis_off()</snippet></ROW><ROW><id>11782604</id><snippet>#!/usr/bin/python2

import matplotlib.pyplot as plt

hax = plt.subplot(1,2,1)
plt.yscale('log')
plt.xscale('log')
plt.ylim((1e-20,1e-10))
plt.xlim((1e-12,1))

hax2 = plt.subplot(1,2,2)
plt.arrow(0.1, 1, 0, 1, length_includes_head=True)

hax.set_position([0.1, 0.1, 0.8, 0.8])
hax2.set_position([0.1, 0.1, 0.8, 0.8])

hax2.set_axis_off()

plt.savefig('test.pdf')
</snippet></ROW><ROW><id>11782604</id><snippet>import numpy 

# Other import commands and data input

plt.plot(numpy.log10(x), numpy.log10(y))) 
</snippet></ROW><ROW><id>11782723</id><snippet>__import__()</snippet></ROW><ROW><id>11782723</id><snippet>somemodule = __import__(somename)
</snippet></ROW><ROW><id>11782847</id><snippet>unit_panel_sizer.Add(hbox3,0,wx.CENTER)
</snippet></ROW><ROW><id>11782847</id><snippet>unit_panel.SetSizerAndFit(unit_panel_sizer) 
</snippet></ROW><ROW><id>11783136</id><snippet>Score = {}
for id, document in TD.iteritems():
    counts = Score[id] = Counter()
    for otherid, otherdocument in TD.iteritems():
        if otherid == id:
            continue  # Skip current document
        counts.update(document.viewkeys() &amp; otherdocument.viewkeys())
</snippet></ROW><ROW><id>11783136</id><snippet>if otherid == id</snippet></ROW><ROW><id>11783136</id><snippet>num</snippet></ROW><ROW><id>11783136</id><snippet>count</snippet></ROW><ROW><id>11783319</id><snippet>import cgi

response = urllib2.urlopen(URL)
_, params = cgi.parse_header(response.headers.get('Content-Disposition', ''))
filename = params['filename']
</snippet></ROW><ROW><id>11783319</id><snippet>import posixpath
import urlparse 

path = urlparse.urlsplit(URL).path
filename = posixpath.basename(path)
</snippet></ROW><ROW><id>11783466</id><snippet>out_str = '\n'.join(','.join(map(str, reversed(row))) for row in purge_list)
</snippet></ROW><ROW><id>11783466</id><snippet>','.join(map(str, reversed(row)))</snippet></ROW><ROW><id>11783466</id><snippet>for row in purge_list</snippet></ROW><ROW><id>11783466</id><snippet>'\n'.join</snippet></ROW><ROW><id>11783466</id><snippet>+ '\n'</snippet></ROW><ROW><id>11783466</id><snippet>reversed()</snippet></ROW><ROW><id>11783567</id><snippet>$&gt; echo '%time print "hello, world"' &gt; script.ipy
$&gt; ipython script.ipy
hello, world
CPU times: user 0.00 s, sys: 0.00 s, total: 0.00 s
Wall time: 0.00 s
</snippet></ROW><ROW><id>11783774</id><snippet>def convertTime(seconds, tz):
    tzhours, tzminutes = map(int, (tz.lstrip('-')[:2], tz[-2:]))
    offset = tzhours * 3600 + tzminutes * 60
    if tz.startswith('-'):
        offset *= -1
    return time.strftime('%Y%m%d_%H%M%S', time.gmtime(seconds + offset))
</snippet></ROW><ROW><id>11783828</id><snippet>FLAVORS = ('VANILLA', 'CHOCOLATE', 'STRAWBERRY')</snippet></ROW><ROW><id>11783828</id><snippet>FLAVORS = FLAVORS(...)</snippet></ROW><ROW><id>11783841</id><snippet>c</snippet></ROW><ROW><id>11783841</id><snippet>0</snippet></ROW><ROW><id>11783841</id><snippet>1</snippet></ROW><ROW><id>11784040</id><snippet>import os
os.environ['FOO'] = 'bar'
</snippet></ROW><ROW><id>11784063</id><snippet>def delete_everything_in_between(st, start, end):
    first_index = st.index(start)
    second_index = st.index(end)
    return st[:first_index] + st[second_index:]

delete_everything(st, 'af', 'zh')
</snippet></ROW><ROW><id>11784277</id><snippet>def wait_for_user(secs):
    import msvcrt
    import time
    start = time.time()
    while True:
        if msvcrt.kbhit():
            msvcrt.getch()
            break
        if time.time() - start &gt; secs:
            break
</snippet></ROW><ROW><id>11784399</id><snippet>array.nbytes</snippet></ROW><ROW><id>11784399</id><snippet>&gt;&gt;&gt; a = [0] * 1024
&gt;&gt;&gt; b = np.array(a)
&gt;&gt;&gt; getsizeof(a)
8264
&gt;&gt;&gt; b.nbytes
8192
</snippet></ROW><ROW><id>11784411</id><snippet>QLabel</snippet></ROW><ROW><id>11784411</id><snippet>QTableWidgetItem</snippet></ROW><ROW><id>11784411</id><snippet>   def populate_page(self,page_number):
        pages =\ 
        self._db.get_paginated_topics(self._category_id,page_number,self._rowcount);

        i=0
        self.page_ids[:]=[]
        for page in pages:
            self.page_ids.append(page.id)
            nc = QTableWidgetItem(str(page.title))
            pc = QTableWidgetItem(str(page.post_count))
            vc = QTableWidgetItem(str(page.view_count))
            self._topic_list.setItem(i,0,nc)
            self._topic_list.setItem(i,1, pc)
            self._topic_list.setItem(i,2, vc)
            i = i +1
</snippet></ROW><ROW><id>11784468</id><snippet>elif line_num == 129</snippet></ROW><ROW><id>11784468</id><snippet>    if line_num == 151:
        if self.run_count == 1:
            print(values[self.run_count-1])
    elif line_num == 129:
        if self.run_count == 2:
            print(values[self.run_count-1])
        elif self.run_count == 3:
            print("here")
    else:
        print(line_num)
    f.write(line)
</snippet></ROW><ROW><id>11784511</id><snippet>class Animal(models.Model):
    ...

class Dog(Animal):
    ...
</snippet></ROW><ROW><id>11784511</id><snippet>models.ForeignKey(Animal)
</snippet></ROW><ROW><id>11784511</id><snippet>Dog</snippet></ROW><ROW><id>11784511</id><snippet>Dog</snippet></ROW><ROW><id>11784511</id><snippet>Animal</snippet></ROW><ROW><id>11784511</id><snippet>Author</snippet></ROW><ROW><id>11784511</id><snippet>Author</snippet></ROW><ROW><id>11784511</id><snippet>Author</snippet></ROW><ROW><id>11784511</id><snippet>BlueCar</snippet></ROW><ROW><id>11784511</id><snippet>Car</snippet></ROW><ROW><id>11784511</id><snippet>color</snippet></ROW><ROW><id>11784511</id><snippet>AnonymousAuthor</snippet></ROW><ROW><id>11784511</id><snippet>RegisterAuthor</snippet></ROW><ROW><id>11784511</id><snippet>Author</snippet></ROW><ROW><id>11784511</id><snippet>Author</snippet></ROW><ROW><id>11784686</id><snippet>root</snippet></ROW><ROW><id>11784778</id><snippet>$ pip install BeautifulSoup4
</snippet></ROW><ROW><id>11784778</id><snippet>bs4</snippet></ROW><ROW><id>11784778</id><snippet>easy_install</snippet></ROW><ROW><id>11784778</id><snippet>bs4</snippet></ROW><ROW><id>11784845</id><snippet>&gt;&gt;&gt; from ctypes import windll
&gt;&gt;&gt; windll.user32.RegisterHotKey(0, -1, 0x0002, 0x5a)
</snippet></ROW><ROW><id>11784865</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>11784865</id><snippet>ActiveState</snippet></ROW><ROW><id>11784865</id><snippet>sorted(mydict.items())</snippet></ROW><ROW><id>11784865</id><snippet>from collections import OrderedDict
groupL = OrderedDict()  # groupL for Loop
c = 0
for n in range(0,13):
    c += 1
    l = chr(n+97)
    groupL.setdefault(l,c)

print (groupL)
</snippet></ROW><ROW><id>11785323</id><snippet>django-imagekit</snippet></ROW><ROW><id>11785435</id><snippet>latin-1</snippet></ROW><ROW><id>11785435</id><snippet># -*- coding: latin-1 -*-
myString = u'éÀî'
</snippet></ROW><ROW><id>11785435</id><snippet>myString</snippet></ROW><ROW><id>11785435</id><snippet>u''</snippet></ROW><ROW><id>11785435</id><snippet>.encode()</snippet></ROW><ROW><id>11785435</id><snippet>with open('test.txt', 'w') as f:
    f.write(myString.encode('latin-1'))
</snippet></ROW><ROW><id>11785435</id><snippet>.decode()</snippet></ROW><ROW><id>11785435</id><snippet>with open('test.txt', 'r') as f:
    myString = f.read().decode('latin-1')
</snippet></ROW><ROW><id>11785560</id><snippet> z = [list(x) for x  in zip(*z)]
</snippet></ROW><ROW><id>11785607</id><snippet>elem</snippet></ROW><ROW><id>11785607</id><snippet>elem</snippet></ROW><ROW><id>11785607</id><snippet>lis</snippet></ROW><ROW><id>11785607</id><snippet>elem</snippet></ROW><ROW><id>11785607</id><snippet>elem</snippet></ROW><ROW><id>11785607</id><snippet>lis</snippet></ROW><ROW><id>11785607</id><snippet>.append()</snippet></ROW><ROW><id>11785607</id><snippet>.remove()</snippet></ROW><ROW><id>11785661</id><snippet>from SimpleCV import *

lakeimg = Image('http://i.stack.imgur.com/ku8F8.jpg') #load this image from web, or could be locally if you wanted.
invimg = lakeimg.invert() #we invert because blobs looks for white blobs, not black
lakes = invimg.findBlobs() # you can always change parameters to find different sized blobs
if lakes: lakes.draw() #if it finds blobs then draw around them
invimg.show() #display the image
</snippet></ROW><ROW><id>11785722</id><snippet>from datetime import timedelta
from flask import session, app

session.permanent = True
app.permanent_session_lifetime = timedelta(minutes=5)
</snippet></ROW><ROW><id>11786140</id><snippet>headers = next(csv.reader(open('headers.csv')))</snippet></ROW><ROW><id>11786282</id><snippet>len(n)</snippet></ROW><ROW><id>11786323</id><snippet>object</snippet></ROW><ROW><id>11786323</id><snippet>import datetime


class LogEntry(object):
    @staticmethod
    def from_str(line):
        """Converts a log line in a string, into a LogEntry."""
        # split the line by one or more spaces
        date, time, _, severity, filename, _, line, message = re.split('\s+', line, 7)

        # strip the trailing bracket on the line and cast to an int
        line = int(line[:-1])

        # combine the date and time strings and turn them into a datetime
        dt = datetime.datetime.strptime(date + time, "%Y-%m-%d%H:%M:%S,%f")

        return LogEntry(dt, severity, filename, line, message)

    def __init__(self, dt, severity, filename, line_num, message):
        self.datetime = dt
        self.severity = severity
        self.filename = filename
        self.line_num = line_num
        self.message = message

    def __str__(self):
        return '%s %s %s L%s: %s' % (self.datetime, self.severity, self.filename, self.line_num, self.message)


if __name__ == '__main__':

    log_contents = """2012-06-12 14:02:21,813 [main]  INFO  ConnectionManager.java (line 238) Initializing the ConnectionManager.
    2012-06-12 14:02:21,844 [main]  INFO  CimListener.java (line 142) Starting listener at http://127.0.0.1:7012
    2012-06-12 14:02:21,974 [main]  INFO  CimListener.java (line 158) Listening at http://127.0.0.1:7012
    2012-06-12 14:02:23,209 [main]  INFO  RmiServiceExporter.java (line 393) Looking for RMI registry at port '10099'
    2012-06-12 14:02:23,232 [main]  INFO  RmiServiceExporter.java (line 404) Could not detect RMI registry - creating new one"""

    # uncomment for real log reading
    #fh = file(filename, 'r')

    # emulate a log file by providing an iterable of lines (just like fh will do)
    fh = log_contents.split('\n')

    for line in fh:
        print LogEntry.from_str(line.strip())
</snippet></ROW><ROW><id>11786323</id><snippet>2012-06-12 14:02:21.813000 INFO ConnectionManager.java L238: Initializing the ConnectionManager.
2012-06-12 14:02:21.844000 INFO CimListener.java L142: Starting listener at http://127.0.0.1:7012
2012-06-12 14:02:21.974000 INFO CimListener.java L158: Listening at http://127.0.0.1:7012
2012-06-12 14:02:23.209000 INFO RmiServiceExporter.java L393: Looking for RMI registry at port '10099'
2012-06-12 14:02:23.232000 INFO RmiServiceExporter.java L404: Could not detect RMI registry - creating new one
</snippet></ROW><ROW><id>11786352</id><snippet>[expression for var in iterable]
</snippet></ROW><ROW><id>11786352</id><snippet>iterable</snippet></ROW><ROW><id>11786352</id><snippet>expression</snippet></ROW><ROW><id>11786352</id><snippet>(expression for var in iterable)
</snippet></ROW><ROW><id>11786352</id><snippet>iterable</snippet></ROW><ROW><id>11786352</id><snippet>expression</snippet></ROW><ROW><id>11786352</id><snippet>                             Python2      Python3
Can access class attributes
--------------------------------------------------
list comp. iterable                Y            Y
list comp. expression              Y            N
gen expr. iterable                 Y            Y
gen expr. expression               N            N
dict comp. iterable                Y            Y
dict comp. expression              N            N
</snippet></ROW><ROW><id>11786352</id><snippet>second_d = dict((k,first_d[k]) for k in (2,3))
</snippet></ROW><ROW><id>11786352</id><snippet>NameError</snippet></ROW><ROW><id>11786352</id><snippet>first_d</snippet></ROW><ROW><id>11786352</id><snippet>expression</snippet></ROW><ROW><id>11786352</id><snippet>second_d = dict([(k,first_d[k]) for k in (2,3)])
</snippet></ROW><ROW><id>11786352</id><snippet>second_d = {k: v for k, v in first_d.items() if k in (2, 3)}
</snippet></ROW><ROW><id>11786352</id><snippet>first_d</snippet></ROW><ROW><id>11786352</id><snippet>iterable</snippet></ROW><ROW><id>11786352</id><snippet>expression</snippet></ROW><ROW><id>11786352</id><snippet>first_d</snippet></ROW><ROW><id>11786352</id><snippet>first_d</snippet></ROW><ROW><id>11786352</id><snippet>def partial_dict(dct, keys):
    return {k:dct[k] for k in keys}

class example(object):
    first_d = {1:1,2:2,3:3,4:4}
    second_d = partial_dict(first_d, (2,3))
</snippet></ROW><ROW><id>11786352</id><snippet>expression</snippet></ROW><ROW><id>11786352</id><snippet>iterable</snippet></ROW><ROW><id>11786517</id><snippet>$_SESSION['last_ping']</snippet></ROW><ROW><id>11786517</id><snippet>$_SESSION['last_ping']</snippet></ROW><ROW><id>11786526</id><snippet>ax.plot(range(10))</snippet></ROW><ROW><id>11786526</id><snippet>ax.contourf(array)</snippet></ROW><ROW><id>11786526</id><snippet>plt.plot(range(10))</snippet></ROW><ROW><id>11786526</id><snippet>plt.subplot</snippet></ROW><ROW><id>11786563</id><snippet>[~]$ cat test.py
from sys import argv

if __name__ == '__main__':
    print argv
    print len(argv)
[~]$ python test.py one two
['test.py', 'one', 'two']
3
[~]$ python test.py one
['test.py', 'one']
2
</snippet></ROW><ROW><id>11786563</id><snippet>query = "INSERT OR REPLACE INTO user VALUES(?,?)"
cursor.execute(query,[na,ha])
conn.commit()
</snippet></ROW><ROW><id>11786741</id><snippet>os.system('svn propset svn:externals "trunk/Source/Interactive/Flash.Externals https://server/svn/proj/" . ')
</snippet></ROW><ROW><id>11786741</id><snippet>import shlex
commands = shlex.split('svn propset svn:externals "trunk/Source/Interactive/Flash.Externals https://server/svn/proj/" .')
subprocess.call(commands)
</snippet></ROW><ROW><id>11786875</id><snippet>successful+=1
</snippet></ROW><ROW><id>11786875</id><snippet>successful</snippet></ROW><ROW><id>11786875</id><snippet>lock = threading.Lock()
def foo():
    global successful
    while True:
        ...
        with lock:
            successful+=1 
</snippet></ROW><ROW><id>11786875</id><snippet>import threading
lock = threading.Lock()
x = 0
def foo():
   global x
   for i in xrange(1000000):
       # with lock:    # Uncomment this to get the right answer
            x += 1
threads = [threading.Thread(target=foo), threading.Thread(target=foo)]
for t in threads:
    t.daemon = True    
    t.start()
for t in threads:
    t.join()

print(x)
</snippet></ROW><ROW><id>11786875</id><snippet>% test.py 
1539065
% test.py 
1436487
</snippet></ROW><ROW><id>11787011</id><snippet>COALESCE</snippet></ROW><ROW><id>11787011</id><snippet>COALESCE</snippet></ROW><ROW><id>11787011</id><snippet>Notifications.objects.filter(**some_filter_args)
  .extra(select={"sortdate" : 'COALESCE("due_date", "date")'})
  .order_by("-sortdate") 
</snippet></ROW><ROW><id>11787086</id><snippet>#initializing a variable with some mock poll data
option1 = "general store"
option2 = "supermarket"
option3 = "mall"
option4 = "small store"

sample_data = [option1,option2,option1,option1,option3,option3,option4,option4,option4,option2]

#a dict that will store the poll results
results = {}

for response in sample_data:
    results[response] = results.setdefault(response, 0) + 1
</snippet></ROW><ROW><id>11787329</id><snippet>&lt;select id="opts" onchange="showForm()"&gt;
    &lt;option value="0"&gt;Select Option&lt;/option&gt;
    &lt;option value="1"&gt;Option 1&lt;/option&gt;
    &lt;option value="2"&gt;Option 2&lt;/option&gt;
&lt;/select&gt;

&lt;div id="f1" style="display:none"&gt;
    &lt;form name="form1"&gt;
        &lt;select id="opts" onchange="showForm()"&gt;
            &lt;option value="0"&gt;Select Option&lt;/option&gt;
            &lt;option value="1"&gt;Option 1A&lt;/option&gt;
            &lt;option value="2"&gt;Option 1B&lt;/option&gt;
        &lt;/select&gt;
    &lt;/form&gt;
&lt;/div&gt;

&lt;div id="f2" style="display:none"&gt;
    &lt;form name="form2"&gt;
        &lt;select id="opts" onchange="showForm()"&gt;
            &lt;option value="0"&gt;Select Option&lt;/option&gt;
            &lt;option value="1"&gt;Option 2A&lt;/option&gt;
            &lt;option value="2"&gt;Option 2B&lt;/option&gt;
        &lt;/select&gt;
    &lt;/form&gt;
&lt;/div&gt;

&lt;script type="text/javascript"&gt;
    function showForm() {
        var selopt = document.getElementById("opts").value;
        if (selopt == 1) {
            document.getElementById("f1").style.display = "block";
            document.getElementById("f2").style.display = "none";
        }
        if (selopt == 2) {
            document.getElementById("f2").style.display = "block";
            document.getElementById("f1").style.display = "none";
        }
        if (selopt == 0) {
            document.getElementById("f2").style.display = "none";
            document.getElementById("f1").style.display = "none";
        }
    }
&lt;/script&gt;
</snippet></ROW><ROW><id>11787485</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>11787528</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>11787528</id><snippet>import csv
import shutil
from itertools import groupby

n = 24
time_increment = 1./n
fractions = [("%.3f" % (i*time_increment,)).lstrip('0') for i in xrange(n)]

with open('input.csv', 'rb') as f, open('output.csv', 'wb') as fout:
     writer = csv.writer(fout)
     # assume the file is sorted by timestamp
     for timestamp, group in groupby(csv.reader(f), key=lambda row: row[0]):
         sametime = list(group) # all rows that have the same timestamp
         assert n &gt;= len(sametime)
         for i, row in enumerate(sametime, start=n-len(sametime)):
             row[0] += fractions[i] # append fractions of a second
         writer.writerows(sametime)

shutil.move('output.csv', 'input.csv') # update input file
</snippet></ROW><ROW><id>11787528</id><snippet>n</snippet></ROW><ROW><id>11787855</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval("[(1,2),(3,4)]")
[(1, 2), (3, 4)]
</snippet></ROW><ROW><id>11788166</id><snippet>attach()</snippet></ROW><ROW><id>11788166</id><snippet>    if type(tree_or_key) is str:
        key = &lt;str&gt;tree_or_key
    elif type(tree_or_key) is TreeDict:
        if tree is not None:
            raise TypeError("Only one TreeDict instance can be given to attach.")

        tree = &lt;TreeDict&gt;tree_or_key
        key = None
    else:
        raise TypeError("`tree_or_key` must be either a string or TreeDict instance.")
</snippet></ROW><ROW><id>11788166</id><snippet>elif type(tree_or_key) is TreeDict:</snippet></ROW><ROW><id>11788166</id><snippet>elif isinstance(tree_or_key, TreeDict):</snippet></ROW><ROW><id>11788310</id><snippet>these_args = [context[arg_name] for arg_name in self.arg_names]
</snippet></ROW><ROW><id>11788310</id><snippet>these_args = [template.Variable(arg_name).resolve(context) for arg_name in self.arg_names]
</snippet></ROW><ROW><id>11788310</id><snippet>arg_name</snippet></ROW><ROW><id>11788327</id><snippet>clang</snippet></ROW><ROW><id>11788327</id><snippet>Command Line Tools</snippet></ROW><ROW><id>11788327</id><snippet>Xcode</snippet></ROW><ROW><id>11788327</id><snippet>Xcode</snippet></ROW><ROW><id>11788327</id><snippet>Command</snippet></ROW><ROW><id>11788327</id><snippet>,</snippet></ROW><ROW><id>11788327</id><snippet>Components</snippet></ROW><ROW><id>11788327</id><snippet>Download</snippet></ROW><ROW><id>11788358</id><snippet>session</snippet></ROW><ROW><id>11788358</id><snippet>show_entries</snippet></ROW><ROW><id>11788358</id><snippet>AO_sInteger</snippet></ROW><ROW><id>11788358</id><snippet>session['AO_sInteger']</snippet></ROW><ROW><id>11788358</id><snippet>show_entries</snippet></ROW><ROW><id>11788358</id><snippet>AO_sInteger</snippet></ROW><ROW><id>11788358</id><snippet>session.get('AO_sInteger</snippet></ROW><ROW><id>11788514</id><snippet>str.format</snippet></ROW><ROW><id>11788514</id><snippet># Rather than this:
puts "foo is #{bar}"

# You would do this:
print "foo is {}".format(bar)

# Or this:
print "foo is {bar}".format(bar=bar)

# Or this:
print "foo is %s" % (bar, )

# Or even this:
print "foo is %(bar)s" % {"bar": bar}
</snippet></ROW><ROW><id>11788556</id><snippet>(p['Dividends'].fillna(1.) + 1.).cumprod()
</snippet></ROW><ROW><id>11788588</id><snippet>[mylist[2*n:2*n+2] for n in xrange(len(mylist)/2)]</snippet></ROW><ROW><id>11788588</id><snippet>[mylist[n:n+2] for n in xrange(0, len(mylist), 2)]</snippet></ROW><ROW><id>11788588</id><snippet>xrange</snippet></ROW><ROW><id>11788588</id><snippet>zip</snippet></ROW><ROW><id>11788588</id><snippet>&gt;&gt;&gt; (lambda i: zip(i, i))(iter(mylist))
[(1, 2), (3, 4), (5, 6)]
</snippet></ROW><ROW><id>11788659</id><snippet>export PYTHONPATH='/opt/app/current':`ls -d -1 /opt/app/current/eggs/* | tr '\n' ':'`
</snippet></ROW><ROW><id>11789061</id><snippet>uuid.uuid4()</snippet></ROW><ROW><id>11789061</id><snippet>uuid.uuid5(namespace, name)</snippet></ROW><ROW><id>11789200</id><snippet>import numpy as np

def f1(a):  # a is a numpy multidimensional array
    z = np.array(a)
    flat = z.ravel()
    flat = flat.tolist()

    return flat     
</snippet></ROW><ROW><id>11789200</id><snippet>import myFunc as mf

mf.f1([[4,67,8],[7,9,7]])
</snippet></ROW><ROW><id>11789200</id><snippet>[4, 67, 8, 7, 9, 7]
</snippet></ROW><ROW><id>11789398</id><snippet>Deferred</snippet></ROW><ROW><id>11789398</id><snippet>IService.stopService</snippet></ROW><ROW><id>11789398</id><snippet>callLater</snippet></ROW><ROW><id>11789398</id><snippet>IReactorTime.getDelayedCalls</snippet></ROW><ROW><id>11789398</id><snippet>IReactorFDSet.getReaders/getWriters</snippet></ROW><ROW><id>11789398</id><snippet>IReactorThreads.getThreadPool</snippet></ROW><ROW><id>11789398</id><snippet>IReactorWin32Events.getAllEvents</snippet></ROW><ROW><id>11789540</id><snippet>parse</snippet></ROW><ROW><id>11789540</id><snippet>CrawlSpider</snippet></ROW><ROW><id>11789540</id><snippet>parse</snippet></ROW><ROW><id>11789540</id><snippet>parse</snippet></ROW><ROW><id>11789540</id><snippet>class Spider(BaseSpider):

    name = "domain_spider"


    def start_requests(self):

        last_domain_id = 0
        chunk_size = 10
        cursor = settings.db.cursor()

        while True:
            cursor.execute("""
                    SELECT domain_id, domain_url  
                    FROM domains  
                    WHERE domain_id &gt; %s AND scraping_started IS NULL  
                    LIMIT %s
                """, (last_domain_id, chunk_size))
            self.log('Requesting %s domains after %s' % (chunk_size, last_domain_id))
            rows = cursor.fetchall()
            if not rows:
                self.log('No more domains to scrape.')
                break

            for domain_id, domain_url in rows:
                last_domain_id = domain_id
                request = self.make_requests_from_url(domain_url)
                item = items.Item()
                item['start_url'] = domain_url
                item['domain_id'] = domain_id
                item['domain'] = urlparse.urlparse(domain_url).hostname
                request.meta['item'] = item

                cursor.execute("""
                        UPDATE domains  
                        SET scraping_started = %s
                        WHERE domain_id = %s  
                    """, (datetime.now(), domain_id))

                yield request

    ...
</snippet></ROW><ROW><id>11789606</id><snippet>&gt;&gt;&gt; numpy.asarray([['abc', 117858348, 117858388, 'def']])
array([['abc', '117', '117', 'def']], 
      dtype='|S3')
</snippet></ROW><ROW><id>11789606</id><snippet>&gt;&gt;&gt; help(numpy.asarray)
asarray(a, dtype=None, order=None)
Convert the input to an array.

Parameters
----------
a : array_like
    Input data, in any form that can be converted to an array.  This
    includes lists, lists of tuples, tuples, tuples of tuples, tuples
    of lists and ndarrays.
dtype : data-type, optional
    By default, the data-type is inferred from the input data.
</snippet></ROW><ROW><id>11789606</id><snippet>inferred from the input data</snippet></ROW><ROW><id>11789606</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; print inspect.getsource(numpy.asarray)
</snippet></ROW><ROW><id>11789606</id><snippet>return array(a, dtype, copy=False, order=order)</snippet></ROW><ROW><id>11789606</id><snippet>numpy.array</snippet></ROW><ROW><id>11789606</id><snippet>&gt;&gt;&gt; numpy.asarray([['abc', 117858348, 117858388, 'defs']], dtype = 'S20')
array([['abc', '117858348', '117858388', 'defs']], 
  dtype='|S20')
</snippet></ROW><ROW><id>11789606</id><snippet>numpy</snippet></ROW><ROW><id>11789606</id><snippet>&gt;&gt;&gt; numpy.__version__
'1.6.1'

$ python --version
Python 2.6.1

$ uname -a
Darwin 10.8.0 Darwin Kernel Version 10.8.0: Tue Jun  7 16:33:36 PDT 2011; root:xnu-1504.15.3~1/RELEASE_I386 i386
</snippet></ROW><ROW><id>11790345</id><snippet>import re
inputs = [r'123,456,789.4533',r'123456789.4533',r'123,456,789,4533',r'123.456.789,4533']
for input in inputs:
    decimal = re.search(r'(?&lt;=[.,])\d+$',input).group()
    integer = re.search(r'.*(?=[.,]\d+$)',input).group()
    checkdigit = lambda x : x.isdigit()
    integer = ''.join([character for character in integer if checkdigit(character)])
    print integer.rjust(17,'0') + decimal.ljust(9,'0')
</snippet></ROW><ROW><id>11790848</id><snippet>.hexdigest()</snippet></ROW><ROW><id>11790848</id><snippet>Convert.ToBase64String</snippet></ROW><ROW><id>11790848</id><snippet>public static string ToHexString(byte[] array)
{
    StringBuilder hex = new StringBuilder(array.Length * 2);
    foreach (byte b in array)
    {
        hex.AppendFormat("{0:x2}", b);
    }
    return hex.ToString();
}
</snippet></ROW><ROW><id>11790848</id><snippet>ASCIIEncoding encoder = new ASCIIEncoding();
Byte[] code = encoder.GetBytes("ant");
HMACSHA1 hmSha1 = new HMACSHA1(code);
Byte[] hashMe = encoder.GetBytes("bat");
Byte[] hmBytes = hmSha1.ComputeHash(hashMe);
Console.WriteLine(ToHexString(hmBytes));
</snippet></ROW><ROW><id>11790848</id><snippet>739ebc1e3600d5be6e9fa875bd0a572d6aee9266
</snippet></ROW><ROW><id>11790922</id><snippet>.strip()</snippet></ROW><ROW><id>11790922</id><snippet>'m'</snippet></ROW><ROW><id>11790922</id><snippet>'d'</snippet></ROW><ROW><id>11790922</id><snippet>in (value0, value1, value2, ..., valueN)</snippet></ROW><ROW><id>11790922</id><snippet>in ('m', 'd')</snippet></ROW><ROW><id>11790922</id><snippet>in "md"</snippet></ROW><ROW><id>11790922</id><snippet>s</snippet></ROW><ROW><id>11790922</id><snippet>while True:</snippet></ROW><ROW><id>11790922</id><snippet>break</snippet></ROW><ROW><id>11790922</id><snippet>break</snippet></ROW><ROW><id>11790922</id><snippet>int()</snippet></ROW><ROW><id>11790922</id><snippet>round()</snippet></ROW><ROW><id>11790922</id><snippet># Karvonens formel
#
print(
"""
Kalkulere dine treningssoner for lett lping, anaerob terskel (AT) og VO2 Max treningskter.

Instruksjoner

1. Fyll inn din alder, hvilepuls og kjnn.
2. Skriv inn din maksimale hjertefrekvens, hvis du vet det, ellers trykk enter - deretter beregnet programmet det selv som flger:
(Menn 214 - (0,8 * alder) Kvinner:. 209 - (0,7 * alder).

3. Treningssonenes verdier beregnes ved hjelp av Karvonen formelen:
X% = (Maksimal hjertefrekvens hvilepuls) * x/100) + hvilepuls
"""
)

kjonn=' '
alder=0
hvilepuls=0
makpuls=' '

def check_positive(n):
    if n &gt; 0:
        return True
    else:
        print("@@@@@ Cannot enter a negative or 0 value! @@@@@")
        return False
def check_positive_or_zero(n):
    if n &gt;= 0:
        return True
    else:
        print("@@@@@ Cannot enter a negative value! @@@@@")
        return False

def get_input_int(s_mesg, fn_validate, default=None):
    while True:
        s = input(s_mesg).strip()
        if not s and default is not None:
            return default
        # not a default value; try it as an int
        try:
            n = int(s)
        except ValueError:
            print("@@@@@ Not even an integer! @@@@@")
            continue
        # works as an int; is it valid?
        if fn_validate(n):
            return n


while kjonn not in ('m', 'd'):
    kjonn = input("Hvilken kjnn er du? (M)ann/(D)ame\t").strip().lower()

alder = get_input_int("Hvor mange r er du?\t", check_positive)
hvilepuls = get_input_int("Hva er din hvilepuls?\t", check_positive)
makspuls = get_input_int("Hva er din makspuls?\t", check_positive_or_zero, default=0)


if not makspuls:
    if kjonn == 'm':
        makspuls = int(214 - 0.8*int(alder))
    else:
        makspuls = int(209 - 0.7*int(alder))

prosent60 = (makspuls-hvilepuls)*0.6 + hvilepuls
prosent75 = (makspuls-hvilepuls)*0.75 + hvilepuls
prosent85 = (makspuls-hvilepuls)*0.85 + hvilepuls
prosent90 = (makspuls-hvilepuls)*0.9 + hvilepuls

# Remove decimals
prosent60 = round(prosent60)
prosent75 = round(prosent75)
prosent85 = round(prosent85)
prosent90 = round(prosent90)


print("\n\n")
if kjonn == 'm':
    print("Din kjnn  er:\t\tMann")
else:
    print("Din kjnn  er:\t\tDame")

print("Din alder er:\t\t", alder)
print("Din hvilepuls er:\t", hvilepuls," slag/min")
print("Din makspuls er:\t", makspuls," slag/min")

print("\n\n")
print("Din lavsone er:\t",prosent60,"-",prosent75," slag/min")
print("Din ATsone er:\t",prosent85,"-",prosent90," slag/min")
print("Din VO2max er:\t",prosent90,"-",makspuls," slag/min")


input("\n\nTrykk enter for avslutte")
</snippet></ROW><ROW><id>11791040</id><snippet>class="details"</snippet></ROW><ROW><id>11791040</id><snippet>table</snippet></ROW><ROW><id>11791040</id><snippet>from bs4 import BeautifulSoup

html = """
  &lt;table class="details" border="0" cellpadding="5" cellspacing="2" width="95%"&gt;
    &lt;tr valign="top"&gt;
      &lt;th&gt;Tests&lt;/th&gt;
      &lt;th&gt;Failures&lt;/th&gt;
      &lt;th&gt;Success Rate&lt;/th&gt;
      &lt;th&gt;Average Time&lt;/th&gt;
      &lt;th&gt;Min Time&lt;/th&gt;
      &lt;th&gt;Max Time&lt;/th&gt;
   &lt;/tr&gt;
   &lt;tr valign="top" class="Failure"&gt;
     &lt;td&gt;103&lt;/td&gt;
     &lt;td&gt;24&lt;/td&gt;
     &lt;td&gt;76.70%&lt;/td&gt;
     &lt;td&gt;71 ms&lt;/td&gt;
     &lt;td&gt;0 ms&lt;/td&gt;
     &lt;td&gt;829 ms&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;"""

table = soup.find("table", attrs={"class":"details"})

# The first tr contains the field names.
headings = [th.get_text() for th in table.find("tr").find_all("th")]

datasets = []
for row in table.find_all("tr")[1:]:
    dataset = zip(headings, (td.get_text() for td in row.find_all("td")))
    datasets.append(dataset)

print datasets
</snippet></ROW><ROW><id>11791040</id><snippet>[[(u'Tests', u'103'),
  (u'Failures', u'24'),
  (u'Success Rate', u'76.70%'),
  (u'Average Time', u'71 ms'),
  (u'Min Time', u'0 ms'),
  (u'Max Time', u'829 ms')]]
</snippet></ROW><ROW><id>11791040</id><snippet>for dataset in datasets:
    for field in dataset:
        print "{0:&lt;16}: {1}".format(field[0], field[1])
</snippet></ROW><ROW><id>11791040</id><snippet>Tests           : 103
Failures        : 24
Success Rate    : 76.70%
Average Time    : 71 ms
Min Time        : 0 ms
Max Time        : 829 ms
</snippet></ROW><ROW><id>11791163</id><snippet>import xml.dom.minidom

content = """
&lt;urlset xmlns="http://www.google.com/schemas/sitemap/0.90"&gt;
  &lt;url&gt;
    &lt;loc&gt;http://www.domain.com/&lt;/loc&gt;
    &lt;lastmod&gt;2011-01-27T23:55:42+01:00&lt;/lastmod&gt;
    &lt;changefreq&gt;daily&lt;/changefreq&gt;
    &lt;priority&gt;0.5&lt;/priority&gt;
  &lt;/url&gt;
  &lt;url&gt;
    &lt;loc&gt;http://www.domain.com/page1.html&lt;/loc&gt;
    &lt;lastmod&gt;2011-01-26T17:24:27+01:00&lt;/lastmod&gt;
    &lt;changefreq&gt;daily&lt;/changefreq&gt;
    &lt;priority&gt;0.5&lt;/priority&gt;
  &lt;/url&gt;  
  &lt;url&gt;
    &lt;loc&gt;http://www.domain.com/page2.html&lt;/loc&gt;
    &lt;lastmod&gt;2011-01-26T15:35:07+01:00&lt;/lastmod&gt;
    &lt;changefreq&gt;daily&lt;/changefreq&gt;
    &lt;priority&gt;0.5&lt;/priority&gt;
  &lt;/url&gt;  
&lt;/urlset&gt;
"""

def get_first_node_val(obj, tag):
    return obj.getElementsByTagName(tag)[0].childNodes[0].nodeValue

xml = xml.dom.minidom.parseString(content)
urlset = xml.getElementsByTagName("urlset")[0]
urls = urlset.getElementsByTagName("url")

for url in urls:
    loc = get_first_node_val(url, "loc")
    lastmod = get_first_node_val(url, "lastmod")
    changefreq = get_first_node_val(url, "changefreq")
    priority = get_first_node_val(url, "priority")
    print "%s, %s, %s, %s" % (loc, lastmod, changefreq, priority)
</snippet></ROW><ROW><id>11791361</id><snippet>name</snippet></ROW><ROW><id>11791361</id><snippet>description</snippet></ROW><ROW><id>11791601</id><snippet>[x for x in my_list if not x.startswith('#')]
</snippet></ROW><ROW><id>11791641</id><snippet>import unittest

from mock import MagicMock
from MyClass import MyClass

class FirstTest(unittest.TestCase):

    def setUp(self):
        self.A = MyClass.A
        MyClass.A = MagicMock(name='mocked A', return_value='CPU')


    def tearDown(self):
        MyClass.A = self.A

    def test_mocked_static_method(self):
        print 'First Test'
        print MyClass.check
        print MyClass.A


class SecondTest(unittest.TestCase):

    def setUp(self):
        MyClass.check = MagicMock(name='mocked check', return_value=object)

    def test_check_mocked_check_method(self):
        print 'Second Test'
        print MyClass.check
        print MyClass.A


if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>11791641</id><snippet>First Test
&lt;unbound method MyClass.check&gt; 
&lt;MagicMock name='mocked A' id='141382732'&gt;
Second Test
&lt;MagicMock name='mocked check' id='141382860'&gt;
&lt;unbound method MyClass.A&gt;
</snippet></ROW><ROW><id>11791641</id><snippet>from mock import patch

@patch('MyClass.A')
def test_mocked_static_method(self, mocked_A)
    mocked_A.return_value = 'CPU'
    # This mock will expire when the test method is finished
</snippet></ROW><ROW><id>11791667</id><snippet>0x80</snippet></ROW><ROW><id>11791667</id><snippet>128</snippet></ROW><ROW><id>11791667</id><snippet>class GameRobotCommands(object):
    reset = 0x0
    turncenter = 0x1
    turnright = 0x2
    turnleft = 0x4
    standstill = 0x8
    moveforward = 0x10
    movebackward = 0x20
    utility1 = 0x40
    utility2 = 0x80
</snippet></ROW><ROW><id>11791667</id><snippet>struct</snippet></ROW><ROW><id>11791667</id><snippet>ord()</snippet></ROW><ROW><id>11791667</id><snippet>&gt;&gt;&gt; ord('\x80')
128
&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.unpack('B', '\x80')
(128,)
</snippet></ROW><ROW><id>11791761</id><snippet>[a for b, a in params.items()]
</snippet></ROW><ROW><id>11791761</id><snippet>result = []
for item in params.items():
    b = item[0]
    a = item[1]
    result.append(a)
</snippet></ROW><ROW><id>11791761</id><snippet>[a for a, a in params.items()]
</snippet></ROW><ROW><id>11791761</id><snippet>result = []
for item in params.items():
    a = item[0]
    a = item[1] # overwrites previous value of a, hence this yields values, 
                # not keys
    result.append(a)
</snippet></ROW><ROW><id>11791761</id><snippet>[a for a, b in params.items()]
</snippet></ROW><ROW><id>11791761</id><snippet>result = []
for item in params.items():
    a = item[0]
    b = item[1]
    result.append(a)
</snippet></ROW><ROW><id>11791761</id><snippet>[a for b, b in params.items()]
</snippet></ROW><ROW><id>11791761</id><snippet>result = []
for item in params.items():
    b = item[0]
    b = item[1]
    result.append(a) # note use of a here, which was not assigned
</snippet></ROW><ROW><id>11791761</id><snippet>a</snippet></ROW><ROW><id>11791761</id><snippet>3</snippet></ROW><ROW><id>11792312</id><snippet>&gt;&gt;&gt; from string import ascii_lowercase, ascii_uppercase
&gt;&gt;&gt; ascii_lowercase
'abcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
</snippet></ROW><ROW><id>11792312</id><snippet>range</snippet></ROW><ROW><id>11792312</id><snippet>&gt;&gt;&gt; map(str, range(10))
['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
</snippet></ROW><ROW><id>11792340</id><snippet>pip</snippet></ROW><ROW><id>11792340</id><snippet>$ pip --version
pip 1.1 from /usr/lib/python2.7/site-packages (python 2.7)
</snippet></ROW><ROW><id>11792340</id><snippet>pip-2.7</snippet></ROW><ROW><id>11792340</id><snippet>easy_install</snippet></ROW><ROW><id>11792596</id><snippet>CELERY_IMPORTS=("tasks",)</snippet></ROW><ROW><id>11792713</id><snippet>t1=threading.Thread(target=self.read)
t1.start()
print "something"
</snippet></ROW><ROW><id>11792752</id><snippet>$output=shell_exec('/usr/bin/python hello.py');
echo "&lt;pre&gt;";
print_r($output);
echo "&lt;/pre&gt;";
</snippet></ROW><ROW><id>11792956</id><snippet>dt2 = np.dtype(dict(names=('t', 'x'), formats=(np.int16, np.int8), offsets=(0, 2)))
</snippet></ROW><ROW><id>11792956</id><snippet>y = np.recarray(x.shape, buf=x, strides=x.strides, dtype=dt2)
</snippet></ROW><ROW><id>11792956</id><snippet>dt2 = np.dtype(dict(names=('t', 'x'), formats=(np.int16, np.int8), offsets=(0, 2), itemsize=4))
y = x.view(dt2)
</snippet></ROW><ROW><id>11793060</id><snippet>def sums(lst, limit):    # prevent global lookups by using a function
    res = set()          # set membership testing is much faster than lists
    res_add = res.add    # cache add method
    for i, first in enumerate(lst):   # get index and item at the same time
        for second in lst[i:]:        # one copy operation saves n index ops.
            res_add(first + second)   # prevent creation/lookup of extra local temporary
    return sorted([x for x in res if x &lt; limit])

print sums(listgen(), 20000)
</snippet></ROW><ROW><id>11793060</id><snippet>mine:        1.30 secs
WolframH:    2.65 secs
lazyr:       1.54 secs (estimate based on OPs timings -- I don't have Python 2.7 handy)
</snippet></ROW><ROW><id>11793237</id><snippet>sudo setup.py install
</snippet></ROW><ROW><id>11793237</id><snippet>sudo setup.py install --prefix=~/local 
</snippet></ROW><ROW><id>11793237</id><snippet>easy_install mypackage
</snippet></ROW><ROW><id>11794082</id><snippet>vim</snippet></ROW><ROW><id>11794082</id><snippet>vim</snippet></ROW><ROW><id>11794164</id><snippet>time.strptime</snippet></ROW><ROW><id>11794164</id><snippet>time.strptime(t, "%Y-%m-%dT%H:%M:%S-%Z")
</snippet></ROW><ROW><id>11794164</id><snippet>dateutil.parser.parse(t)
</snippet></ROW><ROW><id>11794164</id><snippet>t, offset_sign, offset = t[:-6], t[-6], t[-5:]
t = time.strptime(t, "%Y-%m-%dT%H:%M:%S")
offset = time.strptime(offset, "%H:%M")
</snippet></ROW><ROW><id>11794331</id><snippet>deferToThread</snippet></ROW><ROW><id>11794452</id><snippet>PySequence_List</snippet></ROW><ROW><id>11794733</id><snippet> Document doc = Document("your_root")
</snippet></ROW><ROW><id>11794733</id><snippet> text_node = doc.createTextNode(str(some content))
 doc.appendChild(text_node)
</snippet></ROW><ROW><id>11794733</id><snippet>&lt;some_elem key="my value"&gt;some my text&lt;/some_elem&gt;</snippet></ROW><ROW><id>11794733</id><snippet>text_node = doc.createTextNode('some my text')
elem.appendChild(text_node)
elem.setAttribute('key', 'my value')
</snippet></ROW><ROW><id>11794733</id><snippet>elem = doc.createElement('your_elem')
</snippet></ROW><ROW><id>11794733</id><snippet>elem.setAttribute("some-attribute",your_attr)
</snippet></ROW><ROW><id>11794733</id><snippet>elem.appendChild( some_other_elem )
</snippet></ROW><ROW><id>11794733</id><snippet>doc.appendChild( elem )
</snippet></ROW><ROW><id>11794733</id><snippet>doc.toxml()
</snippet></ROW><ROW><id>11794733</id><snippet>doc.toprettyxml()
</snippet></ROW><ROW><id>11794964</id><snippet>import functools

def memoize(func):
    cache = {}
    sentinel = object()

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        key = (args, tuple(kwargs.items()))
        result = cache.get(key, sentinel)
        if result is not sentinel:
            return result
        result = func(*args, **kwargs)
        cache[key] = result
        return result       
    return wrapper
</snippet></ROW><ROW><id>11794964</id><snippet>Foo</snippet></ROW><ROW><id>11794964</id><snippet>@memoize
class Foo:
...
</snippet></ROW><ROW><id>11794964</id><snippet>memoize</snippet></ROW><ROW><id>11794964</id><snippet>bar</snippet></ROW><ROW><id>11794964</id><snippet>@property
@memoize
def bar(self):
    row = db.execute('SELECT bar FROM bars where id=?', (self.id, )).fetchone()
    return row['bar'] if row else None
</snippet></ROW><ROW><id>11794964</id><snippet>functools.lru_cache</snippet></ROW><ROW><id>11795200</id><snippet>array</snippet></ROW><ROW><id>11795200</id><snippet>NSIndexSet</snippet></ROW><ROW><id>11795200</id><snippet>[NSIndexSet indexSetWithIndexesInRange:NSMakeRange(1,9)]; 
</snippet></ROW><ROW><id>11795301</id><snippet>data=[[a,b,c,1200],[a,g,x,3401],[f,a,c,3402],[f,a,c,3403]etc]
previous = 0 # adjust if necessary
for item in data:
    if item[-1] == previous + 1:
        #do something
    previous = item[-1]
</snippet></ROW><ROW><id>11795301</id><snippet>next(item[-1])</snippet></ROW><ROW><id>11795301</id><snippet>next()</snippet></ROW><ROW><id>11795301</id><snippet>item</snippet></ROW><ROW><id>11795301</id><snippet>item</snippet></ROW><ROW><id>11795301</id><snippet>next()</snippet></ROW><ROW><id>11795301</id><snippet>item</snippet></ROW><ROW><id>11795301</id><snippet>item</snippet></ROW><ROW><id>11795301</id><snippet>next()</snippet></ROW><ROW><id>11795394</id><snippet>content</snippet></ROW><ROW><id>11795394</id><snippet>import lxml.html as LH
doc = LH.fromstring(content)
tds = (td.text_content() for td in doc.xpath('//td'))    
for td, val in zip(*[tds]*2):
    if td in ("Working Dir", "Java Data Model"):
        print(td,val)
</snippet></ROW><ROW><id>11795394</id><snippet>('Working Dir', '/serves/test_servers')
('Java Data Model', '64-bit')
</snippet></ROW><ROW><id>11795394</id><snippet>tds = (td.text_content() for td in doc.xpath('//td'))
</snippet></ROW><ROW><id>11795394</id><snippet>xpath()</snippet></ROW><ROW><id>11795394</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>11795394</id><snippet>text_content()</snippet></ROW><ROW><id>11795394</id><snippet>zip(*[tds]*2)</snippet></ROW><ROW><id>11795394</id><snippet>tds</snippet></ROW><ROW><id>11795394</id><snippet>for td, val in zip(*[tds]*2):
    print(td,val)
</snippet></ROW><ROW><id>11795394</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>11795769</id><snippet>s = '{{We all}} love {{stackoverflow}}.' #string to match
pat = re.compile(r'\{\{.*?\}\}') #pattern
#now replace each matched group by its index
for index,group in enumerate(re.findall(pat,s)):
    s = re.sub(group, 'match'+str(index+1), s)
</snippet></ROW><ROW><id>11795794</id><snippet>from Products.CMFCore.utils import getToolByName

catalog = getToolByName(context, 'portal_catalog')
contents = catalog(path=dict(query='/root/Members/' + myname, depth=1))
</snippet></ROW><ROW><id>11795794</id><snippet>getFolderContents</snippet></ROW><ROW><id>11795794</id><snippet>memberFolder = context.unrestrictedTraverse('/root/Members/' + myname)
contents = memberFolder.getFolderContents()
</snippet></ROW><ROW><id>11796195</id><snippet>epydoc.py</snippet></ROW><ROW><id>11796195</id><snippet>site_scons/site_tools</snippet></ROW><ROW><id>11796195</id><snippet># -*- coding: utf-8 -*-
import SCons.Builder
import SCons.Action

def complain_epydoc(target, source, env):
    print 'INFORMATION: epydoc binary was not found (see above). Documentation has not been built.'

def generate(env):
    env['EPYDOC'] = find_epydoc(env)
    if env['EPYDOC'] != None:
        opts = '--quiet --html --inheritance listed --graph all --css white --parse-only '
        env['EPYDOCCOM'] = '$EPYDOC ' + opts + '-o $TARGET  $SOURCES'
        env['BUILDERS']['epydoc'] = SCons.Builder.Builder(action=env['EPYDOCCOM'])
    else:
        env['BUILDERS']['epydoc'] = SCons.Builder.Builder(action=env.Action(complain_epydoc))

def find_epydoc(env):
    b=env.WhereIs('epydoc')
    if b == None:
        print 'Searching for epydoc: not found. Documentation will not be built'
    else:
        print 'Searching for epydoc: ', b
    return b

def exists(env):
    if find_epydoc(env) == None:
        return 0
    return 1
</snippet></ROW><ROW><id>11796195</id><snippet>SConstruct</snippet></ROW><ROW><id>11796195</id><snippet>import epdoc
env.Tool("epydoc")
</snippet></ROW><ROW><id>11796195</id><snippet>SConstruct</snippet></ROW><ROW><id>11796195</id><snippet>SConscript</snippet></ROW><ROW><id>11796195</id><snippet>Alias('epydoc', env.epydoc(source=python_code_files, target=Dir('docs')))
</snippet></ROW><ROW><id>11796285</id><snippet>def __init__(self, start, end, foo, volume, high=foo, low=foo, last=foo):
    self.start = start
    self.end = end
    self.open = foo
    self.high = high
    self.low = low
    self.last = last
    self.volume = int(volume)
</snippet></ROW><ROW><id>11796285</id><snippet>foo</snippet></ROW><ROW><id>11796285</id><snippet>open</snippet></ROW><ROW><id>11796285</id><snippet>open</snippet></ROW><ROW><id>11796285</id><snippet>class Bar:
    def __init__(self, start, end, open, volume, high=None, low=None, last=None):
        self.start = start
        self.end = end
        self.open = open
        self.high = open if high is None else high
        self.low = open if low is None else low
        self.last = open if last is None else last
        self.volume = int(volume)
</snippet></ROW><ROW><id>11796523</id><snippet>code</snippet></ROW><ROW><id>11796523</id><snippet>code.interact()</snippet></ROW><ROW><id>11796541</id><snippet>q1 = pyes.TermQuery("title", "rainbow")
q2 = pyes.TermQuery("artist", "kermit")
query = BooleanQuery(must=[q1, q2])
search = pyes.Search(query)
results = conn.search(search, index_name, doc_type)
</snippet></ROW><ROW><id>11796850</id><snippet>python alt_pg ...</snippet></ROW><ROW><id>11796850</id><snippet>python</snippet></ROW><ROW><id>11796850</id><snippet>$PATH</snippet></ROW><ROW><id>11796850</id><snippet>alt_pg ...</snippet></ROW><ROW><id>11796850</id><snippet>alt_pg</snippet></ROW><ROW><id>11796850</id><snippet>alt_pg ...</snippet></ROW><ROW><id>11796850</id><snippet>alt_pg</snippet></ROW><ROW><id>11796850</id><snippet>$PATH</snippet></ROW><ROW><id>11796850</id><snippet>alt_pg</snippet></ROW><ROW><id>11796850</id><snippet>&amp;</snippet></ROW><ROW><id>11796850</id><snippet>alt_pg</snippet></ROW><ROW><id>11796864</id><snippet>my_str = "".join(reversed(my_str))
</snippet></ROW><ROW><id>11796929</id><snippet>os.listdir()</snippet></ROW><ROW><id>11796929</id><snippet>os.path.join()</snippet></ROW><ROW><id>11796929</id><snippet>directory = "./RecordFolder"
for filename in os.listdir(directory):
    with open(os.path.join(directory, filename)) as f:
        for line in f:
            print line
</snippet></ROW><ROW><id>11796929</id><snippet>file.readlines()</snippet></ROW><ROW><id>11796975</id><snippet>IProcessProtocol</snippet></ROW><ROW><id>11796975</id><snippet>IProcessProtocol</snippet></ROW><ROW><id>11796975</id><snippet>IProcessTransport</snippet></ROW><ROW><id>11796975</id><snippet>twisted.internet.process</snippet></ROW><ROW><id>11796975</id><snippet>twisted.internet._dumbwin32proc</snippet></ROW><ROW><id>11797380</id><snippet>smtplib</snippet></ROW><ROW><id>11797380</id><snippet>Return-Path: &lt;me@gmail.com&gt;
Received: **REDACTED**
        Fri, 03 Aug 2012 06:56:20 -0700 (PDT)
Message-ID: &lt;501bd884.850c320b@mx.google.com&gt;
Date: Fri, 03 Aug 2012 06:56:20 -0700 (PDT)
From: me@gmail.com
http: //www.example.com
</snippet></ROW><ROW><id>11797380</id><snippet>http:</snippet></ROW><ROW><id>11797380</id><snippet>mensaje = '\nhttp://www.example.com'
</snippet></ROW><ROW><id>11797380</id><snippet>smtplib</snippet></ROW><ROW><id>11797380</id><snippet>smtplib.py</snippet></ROW><ROW><id>11797380</id><snippet>sendmail()</snippet></ROW><ROW><id>11797380</id><snippet>     &gt;&gt;&gt; msg = '''\\
     ... From: Me@my.org
     ... Subject: testin'...
     ...
     ... This is a test '''
     &gt;&gt;&gt; s.sendmail("me@my.org", tolist, msg)
</snippet></ROW><ROW><id>11797380</id><snippet>From:</snippet></ROW><ROW><id>11797380</id><snippet>Subject:</snippet></ROW><ROW><id>11797598</id><snippet>docScores = {0:[{u'word':2.3},{u'the':8.7},{u'if':4.1},{u'Car':1.7}],
             1:[{u'friend':1.2},{u'a':5.2},{u'you':3.8},{u'person':0.8}],
             29:[{u'yard':1.5},{u'gardening':2.8},{u'paint':3.7},{u'brush':1.6}]
            }

sum_d={k:sum(d.values()[0] for d in v) for k,v in docScores.items()}

print sum_d
</snippet></ROW><ROW><id>11797598</id><snippet>{0: 16.8, 1: 11.0, 29: 9.6}
</snippet></ROW><ROW><id>11797598</id><snippet>&gt;&gt;&gt; NdocScores = {0:{u'word':2.3,u'the':8.7,u'if':4.1,u'Car':1.7},
...              1:{u'friend':1.2,u'a':5.2,u'you':3.8,u'person':0.8},
...              29:{u'yard':1.5,u'gardening':2.8,u'paint':3.7,u'brush':1.6}
...             }   
</snippet></ROW><ROW><id>11797598</id><snippet>&gt;&gt;&gt; NdocScores[0]
{u'Car': 1.7, u'the': 8.7, u'word': 2.3, u'if': 4.1}
&gt;&gt;&gt; NdocScores[0][u'Car']
1.7
&gt;&gt;&gt; sum(NdocScores[1].values())
11.0

&gt;&gt;&gt; NdocScores[29]
{u'gardening': 2.8, u'yard': 1.5, u'brush': 1.6, u'paint': 3.7}
</snippet></ROW><ROW><id>11797598</id><snippet>&gt;&gt;&gt; lofdicts=[v for k,v in NdocScores.items()]
&gt;&gt;&gt; lofdicts
[{u'Car': 1.7, u'the': 8.7, u'word': 2.3, u'if': 4.1}, {u'a': 5.2, u'person': 0.8, u'you': 3.8, u'friend': 1.2}, {u'gardening': 2.8, u'yard': 1.5, u'brush': 1.6, u'paint': 3.7}]
&gt;&gt;&gt; lofdicts[0]
{u'Car': 1.7, u'the': 8.7, u'word': 2.3, u'if': 4.1}
&gt;&gt;&gt; sum(lofdicts[1].values())
11.0
</snippet></ROW><ROW><id>11797662</id><snippet>get_or_create</snippet></ROW><ROW><id>11797662</id><snippet>(instance, created)</snippet></ROW><ROW><id>11797662</id><snippet>client, created = Client.objects.get_or_create(name = name, email = email, site = url)
</snippet></ROW><ROW><id>11798351</id><snippet>n</snippet></ROW><ROW><id>11798351</id><snippet>1/n</snippet></ROW><ROW><id>11798857</id><snippet>\</snippet></ROW><ROW><id>11798857</id><snippet>"c:\\users"</snippet></ROW><ROW><id>11798857</id><snippet>"c:\users"</snippet></ROW><ROW><id>11798898</id><snippet>import numpy as np
myarray = np.fromfile('BinaryData.dat',dtype=float)
</snippet></ROW><ROW><id>11798919</id><snippet>M = [0]*10000</snippet></ROW><ROW><id>11798919</id><snippet>0</snippet></ROW><ROW><id>11799183</id><snippet>HttpRpcServer</snippet></ROW><ROW><id>11799183</id><snippet>google.appengine.tools.appengine_rpc</snippet></ROW><ROW><id>11799368</id><snippet>for line in sys.stdin:
    #do something with line
</snippet></ROW><ROW><id>11799368</id><snippet>readlines()</snippet></ROW><ROW><id>11799376</id><snippet>sys._getframe()</snippet></ROW><ROW><id>11799376</id><snippet>inspect</snippet></ROW><ROW><id>11799376</id><snippet>f_locals</snippet></ROW><ROW><id>11799376</id><snippet>f_code</snippet></ROW><ROW><id>11799376</id><snippet>import sys
def special_func(x):
    callingframe = sys._getframe(1)
    print 'My caller is the %r function in a %r class' % (
        callingframe.f_code.co_name, 
        callingframe.f_locals['self'].__class__.__name__)
</snippet></ROW><ROW><id>11799428</id><snippet>def Draw(self, e):
    print "Draw" 
    img = wx.Image("./poster/Test2.png", wx.BITMAP_TYPE_ANY)
    bit = wx.EmptyBitmap(517,524)
    imgBit = wx.BitmapFromImage(img)
    dc = wx.MemoryDC(imgBit)
    dc.SetPen(wx.Pen(wx.RED, 1))
    dc.DrawLines(((83, 375), (83, 42), (120, 42), (120,375), (83,375)))
    dc.SelectObject(wx.NullBitmap)# I didn't know I had to deselect the DC
    self.imageCtrl.SetBitmap(imgBit)  
    imgBit.SaveFile("bit.bmp", wx.BITMAP_TYPE_BMP)
</snippet></ROW><ROW><id>11799448</id><snippet>pdb</snippet></ROW><ROW><id>11799550</id><snippet>create_engine('mysql+mysqldb:///mydb?charset=latin1')
</snippet></ROW><ROW><id>11799590</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>11799667</id><snippet>cv</snippet></ROW><ROW><id>11799667</id><snippet>cv2</snippet></ROW><ROW><id>11799726</id><snippet>re.sub</snippet></ROW><ROW><id>11799726</id><snippet>&gt;&gt;&gt; str1="http://awesome.good.is/transparency/web/1207/invasion-of-the-drones/flash.html"
&gt;&gt;&gt; str1.replace("flash","flat")
'http://awesome.good.is/transparency/web/1207/invasion-of-the-drones/flat.html'
</snippet></ROW><ROW><id>11799979</id><snippet>doc = LH.fromstring(html)
tds = (td.text_content() for td in doc.xpath("//td"))
for td, val in zip(*[tds]*2):
    if td == "name":
        name = val
    elif td == "enabled":
        enabled = val

print name
print enabled
</snippet></ROW><ROW><id>11800076</id><snippet>from django.db.models import Count
Post.objects.annotate(comment_count=Count('comment'))
</snippet></ROW><ROW><id>11800076</id><snippet>comment_count</snippet></ROW><ROW><id>11800289</id><snippet>sync</snippet></ROW><ROW><id>11800494</id><snippet>sum</snippet></ROW><ROW><id>11800494</id><snippet>for (Name, count) in sorted(counts.iteritems()):
    print 'Species total: %s' % count
</snippet></ROW><ROW><id>11800494</id><snippet>for (Name, count) in sorted(counts.iteritems()):
    print 'Total for species %s: %s' % (Name, count)
</snippet></ROW><ROW><id>11800494</id><snippet>sum</snippet></ROW><ROW><id>11800494</id><snippet>counts</snippet></ROW><ROW><id>11800494</id><snippet>total = sum(counts.values())
print 'Total number of animals: %d' % total
</snippet></ROW><ROW><id>11800494</id><snippet>counts</snippet></ROW><ROW><id>11800494</id><snippet>print 'Number of kinds of animals: %d' % len(counts)
</snippet></ROW><ROW><id>11800551</id><snippet>with open("original_filename") as original:
    for line in original:
        #if you just want the line as integers:
        integers = [ int(i) - 1 for i in line.split() ]
        #do something with integers here ...

        #if you want to write a new file, use the code below:
        #new_line = " ".join([ str(int(i) - 1) for i in line.split() ])
        #newfile.write(new_line + '\n')
</snippet></ROW><ROW><id>11800551</id><snippet>data = []
with open("original_filename") as original:
    for line in original:
        integers = [ int(i) - 1 for i in line.split() ]
        data.append(integers)
</snippet></ROW><ROW><id>11800551</id><snippet>with open("original_filename") as original:
    data = [ [int(i) for i in line.split()] for line in original ]
</snippet></ROW><ROW><id>11800551</id><snippet>for lst in data:
    print (lst)    # [3, 1]
                   # [5, 4, 0]
                   # [8, 3, 4]
</snippet></ROW><ROW><id>11800760</id><snippet># Other imports here
from werkzeug.utils import safe_join

# ... snip Flask setup ...

@app.route("/reports/&lt;path:report_name&gt;")
def report_viewer(report_name):
    if report_name is None:
        abort(404)

    BASE_PATH = "/your/base/path/to/reports"

    fp = safe_join(BASE_PATH, report_name)
    with open(fp, "r") as fo:
        file_contents = fo.read()

    return file_contents
</snippet></ROW><ROW><id>11801115</id><snippet>keyring</snippet></ROW><ROW><id>11801115</id><snippet>secring.gpg</snippet></ROW><ROW><id>11801115</id><snippet>gnupghome</snippet></ROW><ROW><id>11801126</id><snippet>s.call("gpio -g read 17")
</snippet></ROW><ROW><id>11801126</id><snippet>s.call(["gpio", "-g", "read", "17"])
</snippet></ROW><ROW><id>11801126</id><snippet>shell=True</snippet></ROW><ROW><id>11801126</id><snippet>os.system("gpio -g read 17")</snippet></ROW><ROW><id>11801126</id><snippet>subprocess</snippet></ROW><ROW><id>11801148</id><snippet>import re

def replace_FOO(m):
    if m.group(1) is None:
        return m.group()

    return m.group().replace("FOO", "XXX")

string = "' FOO ' abc 123 ' def FOO ghi 345 ' FOO '' FOO ' lmno 678 FOO '"

output = re.sub(r"'[^']*'|([^']*)", replace_FOO, string)

print(string)
print(output)
</snippet></ROW><ROW><id>11801148</id><snippet>re.sub</snippet></ROW><ROW><id>11801148</id><snippet>'</snippet></ROW><ROW><id>11801148</id><snippet>'</snippet></ROW><ROW><id>11801148</id><snippet>'</snippet></ROW><ROW><id>11801148</id><snippet>def replace_FOO(m):
    if m.group().startswith("'"):
        return m.group().replace("FOO", "XXX")

    return m.group()

string = "' FOO ' abc 123 ' def FOO ghi 345 ' FOO '' FOO ' lmno 678 FOO '"

output = re.sub(r"'[^']*'|[^']+", replace_FOO, string)
</snippet></ROW><ROW><id>11801232</id><snippet>alist = [lambda : x for x in range(10) ]
print (alist[2]()) #9
print (alist[4]()) #9
</snippet></ROW><ROW><id>11801232</id><snippet>x</snippet></ROW><ROW><id>11801232</id><snippet>x</snippet></ROW><ROW><id>11801232</id><snippet>alist = [lambda y=x: y for x in range(10) ]
print (alist[2]()) #2
print (alist[4]()) #4
</snippet></ROW><ROW><id>11801232</id><snippet>functools.partial</snippet></ROW><ROW><id>11801529</id><snippet>sudo pip install couchdb
</snippet></ROW><ROW><id>11801548</id><snippet>t = YourThreadClass()
t.daemon = True
t.start()
</snippet></ROW><ROW><id>11801548</id><snippet>with PyV8.JSLocker():
    t.start()
</snippet></ROW><ROW><id>11801548</id><snippet>with PyV8.JSLocker():
    self.context.enter()
    print self.context.eval('1+1')
    self.context.leave()
</snippet></ROW><ROW><id>11801794</id><snippet>for_user = models.ForeignKey()</snippet></ROW><ROW><id>11801794</id><snippet>for_user = models.ForeignKey(User)</snippet></ROW><ROW><id>11801794</id><snippet>for_user = models.ForeignKey(UserInfo)</snippet></ROW><ROW><id>11801794</id><snippet>ForeignKey</snippet></ROW><ROW><id>11801794</id><snippet>__init__()</snippet></ROW><ROW><id>11801794</id><snippet>def __init__(self, other_model):
</snippet></ROW><ROW><id>11801794</id><snippet>self</snippet></ROW><ROW><id>11801843</id><snippet>L</snippet></ROW><ROW><id>11801843</id><snippet>xrange()</snippet></ROW><ROW><id>11801843</id><snippet>x</snippet></ROW><ROW><id>11801844</id><snippet>total += value 
</snippet></ROW><ROW><id>11801844</id><snippet>class mylist(list):
    tot = 0
    def append(self, value):
        super(mylist, self).append(value)
        self.tot += value
</snippet></ROW><ROW><id>11801844</id><snippet>#!/usr/bin/python

class mylist(list):
  tot = 0
  def append(self, value):
    super(mylist, self).append(value)
    self.tot += value


a = mylist()
a.append(1)
a.append(20)
print a.tot
print a
</snippet></ROW><ROW><id>11801844</id><snippet>21
[1,20]
</snippet></ROW><ROW><id>11801981</id><snippet>requests</snippet></ROW><ROW><id>11801981</id><snippet>urllib2</snippet></ROW><ROW><id>11801981</id><snippet>import urllib2

from elementtree import ElementTree

def post(url, data, contenttype):
    request = urllib2.Request(url, data)
    request.add_header('Content-Type', contenttype)
    response = urllib2.urlopen(request)
    return response.read()

def postxml(url, elem):
    data = ElementTree.tostring(elem, encoding='UTF-8')
    return post(url, data, 'text/xml')
</snippet></ROW><ROW><id>11801981</id><snippet>tostring</snippet></ROW><ROW><id>11801981</id><snippet>ElementTree</snippet></ROW><ROW><id>11801981</id><snippet>Element</snippet></ROW><ROW><id>11801981</id><snippet>root</snippet></ROW><ROW><id>11802038</id><snippet>execute</snippet></ROW><ROW><id>11802038</id><snippet>update_dict</snippet></ROW><ROW><id>11802295</id><snippet>__getstate__</snippet></ROW><ROW><id>11802295</id><snippet>__setstate__</snippet></ROW><ROW><id>11802295</id><snippet>EnumValue</snippet></ROW><ROW><id>11802295</id><snippet>EnumValue</snippet></ROW><ROW><id>11802295</id><snippet>EnumValue</snippet></ROW><ROW><id>11802295</id><snippet>index</snippet></ROW><ROW><id>11802295</id><snippet>EnumValue</snippet></ROW><ROW><id>11802295</id><snippet> class CellSizeRelation(Option):
     # skipping your enum definition and __init__ here

     def __getstate__(self):
         # capture what is normally pickled
         state = self.__dict__.copy()
         # replace the `value` key (now an EnumValue instance), with it's index:
         state['value'] = state['value'].index
         # what we return here will be stored in the pickle
         return state

     def __setstate__(self, newstate):
         # re-create the EnumState instance based on the stored index
         newstate['value'] = self.Values[newstate['value']]
         # re-instate our __dict__ state from the pickled state
         self.__dict__.update(newstate)
</snippet></ROW><ROW><id>11802295</id><snippet>__getstate__</snippet></ROW><ROW><id>11802295</id><snippet>__dict__</snippet></ROW><ROW><id>11802295</id><snippet>__dict__</snippet></ROW><ROW><id>11802295</id><snippet>EnumValue</snippet></ROW><ROW><id>11802295</id><snippet>__dict__</snippet></ROW><ROW><id>11802295</id><snippet>__dict__</snippet></ROW><ROW><id>11802295</id><snippet>__setstate__</snippet></ROW><ROW><id>11802295</id><snippet>EnumValue</snippet></ROW><ROW><id>11802386</id><snippet>def add_some_context(context={}):
    context['foo'] = 'bar'
    return context

def view1(self, request):
    context = {
        'something1': 'blah',
    }
    return render_to_response('template1.html', add_some_context(context), context_instance=RequestContext(request))

def view2(self, request):
    context = {
        'something2': 'blah',
    }
    return render_to_response('template2.html', add_some_context(context), context_instance=RequestContext(request))
</snippet></ROW><ROW><id>11802386</id><snippet>foo</snippet></ROW><ROW><id>11802386</id><snippet>class MyViewMixin(object):
    def get_context_data(self, **kwargs):
        context = super(MyViewMixin, self).get_context_data(**kwargs)
        context['foo'] = 'bar'
        return context

class MyView1(MyViewMixin, DetailView):
    ...

class MyView2(MyViewMixin, ListView):
    ...
</snippet></ROW><ROW><id>11802386</id><snippet>foo</snippet></ROW><ROW><id>11802475</id><snippet>&gt;&gt;&gt; places = ['New York', 'Texas', 'California']
&gt;&gt;&gt; zips = ['01010', '70707', '90909']
&gt;&gt;&gt; place_zip_map = dict(zip(places, zips))
&gt;&gt;&gt; place_zip_map['New York']
'01010'
</snippet></ROW><ROW><id>11802475</id><snippet>zip</snippet></ROW><ROW><id>11802475</id><snippet>dict</snippet></ROW><ROW><id>11802475</id><snippet>zip</snippet></ROW><ROW><id>11802541</id><snippet>&gt;&gt;&gt; a = (1, 2)
&gt;&gt;&gt; b = (3, 2)
&gt;&gt;&gt; sum(x == y for x, y in zip(a, b)) / float(len(a))
0.5
</snippet></ROW><ROW><id>11802541</id><snippet>float()</snippet></ROW><ROW><id>11802541</id><snippet>from __future__ import division</snippet></ROW><ROW><id>11802870</id><snippet>##</snippet></ROW><ROW><id>11802870</id><snippet>length = 0
max_length = 0 ##

for n in range(1,101):
    print "Sequence #:", n
    seq = [] ##
    while n != 1:
        print n,
        seq.append(n)  ##
        if n % 2 == 0:
           n = n / 2
           length = length + 1
        else:
            n = (n * 3) + 1
            length = length + 1
        if n == 1:
            print n
            seq.append(n) ##
            length = length + 1
    print "The sequence above contains", length, "numbers"

    if length &gt; max_length:  ##
        max_length = length  ##
        max_seq = seq[:]     ##

    length = 0

print 'max length: ', max_length ## same as len(max_seq)
print 'max seq: ', max_seq       ##
</snippet></ROW><ROW><id>11803223</id><snippet>select</snippet></ROW><ROW><id>11803223</id><snippet>name</snippet></ROW><ROW><id>11803223</id><snippet>&lt;select id="g1" name="selection"&gt;
</snippet></ROW><ROW><id>11803281</id><snippet>argtypes</snippet></ROW><ROW><id>11803281</id><snippet>restype</snippet></ROW><ROW><id>11803281</id><snippet>test.eval.argtypes = [ctypes.POINTER(ctypes.c_double),
                      ctypes.c_int,
                      ctypes.POINTER(ctypes.c_double),
                      ctypes.c_int,
                      ctypes.c_int]
test.eval.restype = ctypes.c_double
</snippet></ROW><ROW><id>11803281</id><snippet>(ctypes.c_double * length)</snippet></ROW><ROW><id>11803281</id><snippet>result</snippet></ROW><ROW><id>11803281</id><snippet>double</snippet></ROW><ROW><id>11803507</id><snippet>&lt;script type="text/javascript"&gt;
    var books = {{ my_json_data }}
&lt;/script&gt;
</snippet></ROW><ROW><id>11803507</id><snippet>books</snippet></ROW><ROW><id>11803621</id><snippet>.connect()</snippet></ROW><ROW><id>11803622</id><snippet>user_stuff[uname]</snippet></ROW><ROW><id>11803622</id><snippet>user_stuff.get(uname)</snippet></ROW><ROW><id>11803622</id><snippet>uname</snippet></ROW><ROW><id>11803622</id><snippet>None</snippet></ROW><ROW><id>11803622</id><snippet>user_stuff.get(uname, [])</snippet></ROW><ROW><id>11803746</id><snippet>User</snippet></ROW><ROW><id>11803746</id><snippet>AUTH_PROFILE_MODULE = 'yourapp.UserInfo'</snippet></ROW><ROW><id>11803746</id><snippet>user_instance.get_profile()</snippet></ROW><ROW><id>11803746</id><snippet>profile = user.get_profile()
profile.some_field = 'some value'
profile.save()
</snippet></ROW><ROW><id>11803778</id><snippet>Gtk.Builder</snippet></ROW><ROW><id>11803778</id><snippet>handler_id</snippet></ROW><ROW><id>11803778</id><snippet>GObject.handler_block_by_func</snippet></ROW><ROW><id>11803778</id><snippet>g_signal_handler_find</snippet></ROW><ROW><id>11803786</id><snippet>@</snippet></ROW><ROW><id>11803786</id><snippet>@yourdecorator
def a_function():
    pass

def b_function():
    pass
b_function = yourdecorator(b_function)
</snippet></ROW><ROW><id>11803786</id><snippet>requests.post = my_function(requests.post)
</snippet></ROW><ROW><id>11803786</id><snippet>class requests(object):
    @my_function
    def post(self, *args):
        pass
</snippet></ROW><ROW><id>11803786</id><snippet>requests</snippet></ROW><ROW><id>11804020</id><snippet>pyx</snippet></ROW><ROW><id>11804020</id><snippet>pyx</snippet></ROW><ROW><id>11804020</id><snippet>setup.py</snippet></ROW><ROW><id>11804020</id><snippet>ext_modules = [
    Extension(
        "openni", 
        ["src/openni.pyx"], 
        language="c++",
        include_dirs=['src/', '/usr/include/ni'],
        libraries=['OpenNI'],
    )
],
</snippet></ROW><ROW><id>11804020</id><snippet>openni.pyx</snippet></ROW><ROW><id>11804020</id><snippet>include "constants.pyx"
include "exceptions.pyx"
include "context.pyx"
...
</snippet></ROW><ROW><id>11804020</id><snippet>libopenni.pxd</snippet></ROW><ROW><id>11804020</id><snippet>cppclass</snippet></ROW><ROW><id>11804020</id><snippet>pxd</snippet></ROW><ROW><id>11804020</id><snippet>pyx</snippet></ROW><ROW><id>11804020</id><snippet>cdef extern from "XnCppWrapper.h" namespace "xn":
    cdef cppclass Context:
           ...
</snippet></ROW><ROW><id>11804020</id><snippet>from libopenni cimport *
from xncontext cimport Context as c_Context 

cdef class Context:
    cdef c_Context *handle   
        ...
</snippet></ROW><ROW><id>11804313</id><snippet>def renderer(func):
        def wrapper(request, *args, **kw):
            output = func(request, *args, **kw)
            if isinstance(output, (list, tuple)):
                return render_to_response(output[1], output[0], RequestContext(request))
            elif isinstance(output, dict):
                return render_to_response(template, output, RequestContext(request))
            return output
        return wrapper
    return renderer
</snippet></ROW><ROW><id>11804541</id><snippet>t</snippet></ROW><ROW><id>11804541</id><snippet>wget</snippet></ROW><ROW><id>11804664</id><snippet>sys.path</snippet></ROW><ROW><id>11804664</id><snippet>import sys
import os
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), 'submodFolder'))

import submod
</snippet></ROW><ROW><id>11804664</id><snippet># get absolute path to proj/__init__.py
script_path = os.path.realpath(__file__)

# strip off the file name to get the absolute path to proj
proj_path = os.path.dirname(script_path)

# join on os.sep to get absolute path to proj/submodFolder
submod_path = os.path.join(proj_path, 'submodFolder')

# add the complete path to proj/submodFolder to sys.path
sys.path.append(submod_path)
</snippet></ROW><ROW><id>11804715</id><snippet>import re
if re.search(r'\btest\b', theString):
    pass
</snippet></ROW><ROW><id>11804715</id><snippet>test</snippet></ROW><ROW><id>11804715</id><snippet>\b</snippet></ROW><ROW><id>11804757</id><snippet>class GetAttrMeta(type):
    def __getattr__(self, name):
        return name

class A(object):
    __metaclass__ = GetAttrMeta

print A.foo  # 'foo'
</snippet></ROW><ROW><id>11804757</id><snippet>class GetAttrMeta(type):
    def __getattr__(self, name):
        return name

class A(object, metaclass=GetAttrMeta):
    pass

print(A.foo)  # 'foo'
</snippet></ROW><ROW><id>11804816</id><snippet>setdefault()</snippet></ROW><ROW><id>11804816</id><snippet>full_deck = {}
for s in suite:
    full_deck[s] = rank
</snippet></ROW><ROW><id>11804816</id><snippet>list(rank)</snippet></ROW><ROW><id>11804816</id><snippet>full_deck = {s: rank for s in suite}
</snippet></ROW><ROW><id>11804816</id><snippet>full_deck = dict((s, rank) for s in suite)
</snippet></ROW><ROW><id>11805088</id><snippet>User Profile</snippet></ROW><ROW><id>11805088</id><snippet>blank=True, null=True</snippet></ROW><ROW><id>11805183</id><snippet>^</snippet></ROW><ROW><id>11805183</id><snippet>$</snippet></ROW><ROW><id>11805183</id><snippet>^\d\s\d$
</snippet></ROW><ROW><id>11805183</id><snippet>\d\s\d
</snippet></ROW><ROW><id>11805239</id><snippet>AdminIndex</snippet></ROW><ROW><id>11805239</id><snippet>BaseIndex</snippet></ROW><ROW><id>11805239</id><snippet>contrib</snippet></ROW><ROW><id>11805239</id><snippet>is_accessible</snippet></ROW><ROW><id>11805311</id><snippet>@app.route("/result")
def calculate_result():
    s, t = request.args.get("s"), request.args.get("t")
    # Calculate result with s and t
    return redirect(url_for(".display_results", result=result))

@app.route("/final/&lt;result&gt;")
def display_results(result):
    return render_template("results.html", result=result)
</snippet></ROW><ROW><id>11805311</id><snippet>session</snippet></ROW><ROW><id>11805311</id><snippet>@app.route("/result")
def calculate_result():
    s, t = request.args.get("s"), request.args.get("t")
    # Calculate result with s and t
    session["result"] = result
    return redirect(url_for(".display_results", result=result))

@app.route("/final/abcd")
def display_results():
    result = session.get("result")
    return render_template("results.html", result=result)
</snippet></ROW><ROW><id>11805565</id><snippet>csv</snippet></ROW><ROW><id>11805565</id><snippet>from cStringIO import StringIO
from csv import reader

file_like_object = StringIO("1,,2,'3,4'")
csv_reader = reader(file_like_object, quotechar="'")
for row in csv_reader:
    print row
</snippet></ROW><ROW><id>11805565</id><snippet>['1', '', '2', '3,4']
</snippet></ROW><ROW><id>11805574</id><snippet>class StreamListener(tweepy.StreamListener):

    status_wrapper = TextWrapper(width=60, initial_indent='    ', 
                                    subsequent_indent='    ')
    conn = mdb.connect('localhost', 'dbUser','dbPass','dbBase')

    def on_status(self, status):
        try:
            cursor = self.conn.cursor()
            cursor.execute('INSERT INTO tweets (text, date) VALUES (%s, NOW())' ,(status.text))
            print self.status_wrapper.fill(status.text)
            print '\n %s  %s  via %s\n' % (status.author.screen_name, status.created_at, status.source)
        except Exception, e:
            # Catch any unicode errors while printing to console
            # and just ignore them to avoid breaking application.
            pass
</snippet></ROW><ROW><id>11805574</id><snippet>on_status</snippet></ROW><ROW><id>11805574</id><snippet>cur.execute("INSERT INTO TWEETS(?, ?, ?, ?)", (status.text, 
                                               status.author.screen_name, 
                                               status.created_at, 
                                               status.source))
</snippet></ROW><ROW><id>11805638</id><snippet>$PATH</snippet></ROW><ROW><id>11805638</id><snippet>/usr/texbin</snippet></ROW><ROW><id>11805828</id><snippet> logging.debug()
</snippet></ROW><ROW><id>11805828</id><snippet>rootLog.info()</snippet></ROW><ROW><id>11805828</id><snippet>loggging.basicConfig()</snippet></ROW><ROW><id>11806047</id><snippet>from mayavi import mlab
</snippet></ROW><ROW><id>11806095</id><snippet>&gt;&gt;&gt; stuff = decky11.shuffle(stuff)
</snippet></ROW><ROW><id>11806126</id><snippet>int QApplication.exec_ ()</snippet></ROW><ROW><id>11806126</id><snippet>exit()</snippet></ROW><ROW><id>11806126</id><snippet>exit()</snippet></ROW><ROW><id>11806126</id><snippet>exit()</snippet></ROW><ROW><id>11806126</id><snippet>quit()</snippet></ROW><ROW><id>11806126</id><snippet>sys.exit(app.exec_())</snippet></ROW><ROW><id>11806126</id><snippet>exit()</snippet></ROW><ROW><id>11806126</id><snippet>sys.exit()</snippet></ROW><ROW><id>11806126</id><snippet>exec_()</snippet></ROW><ROW><id>11806126</id><snippet>exec</snippet></ROW><ROW><id>11806126</id><snippet>exec_()</snippet></ROW><ROW><id>11806449</id><snippet>import httplib
conn = httplib.HTTPConnection(proxyHost, proxyPort)
conn.request("POST", "http://www.google.com", params)
</snippet></ROW><ROW><id>11806564</id><snippet>&gt;&gt;&gt; 'lipsum'[3:]
'sum'
</snippet></ROW><ROW><id>11806766</id><snippet>/path/to/script.py &gt;&gt; debug.txt</snippet></ROW><ROW><id>11806766</id><snippet>#!/usr/bin/python

import logging
import os
import socket
import sys

def network_notify(name):
    hosts = ['192.168.0.4', '192.168.0.6']  #server IP
    port = 50000 
    size = 1024
    title = 'Torrent Downloaded'

    for host in hosts:
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            # Set the socket to timeout after 10 seconds
            s.settimeout(10.0) 
            s.connect((host, port))
        except socket.error, socket.timeout:
            logging.error('Something is wrong with host: %s' % host)
            continue

        # Send the data
        s.sendall('"%s" "%s"' % (title, name))
        data = s.recv(size)

        # Shutdown and close the socket 
        s.shutdown(socket.SHUT_RDWR)
        s.close()

    if len(sys.argv) &gt; 1:
        name = ' '.join(sys.argv[1:])
        network_notify(name)
    sys.exit()
</snippet></ROW><ROW><id>11806811</id><snippet>X.add_nodes_from(pos.keys())
</snippet></ROW><ROW><id>11806811</id><snippet>for n, p in pos.iteritems():
    X.node[n]['pos'] = p
</snippet></ROW><ROW><id>11806811</id><snippet>nx.draw(X, pos)
plt.show()
</snippet></ROW><ROW><id>11806811</id><snippet>from matplotlib import pyplot as plt</snippet></ROW><ROW><id>11806997</id><snippet>--boxed</snippet></ROW><ROW><id>11806997</id><snippet># content of test_module.py

import pytest
import os
import time

# run test function 50 times with different argument
@pytest.mark.parametrize("arg", range(50))
def test_func(arg):
    time.sleep(0.05) # each tests takes a while
    if arg % 19 == 0: 
        os.kill(os.getpid(), 15)
</snippet></ROW><ROW><id>11806997</id><snippet>$ py.test --boxed
=========================== test session starts ============================
platform linux2 -- Python 2.7.3 -- pytest-2.3.0.dev8
plugins: xdist, bugzilla, cache, oejskit, cli, pep8, cov
collecting ... collected 50 items

test_module.py f..................f..................f...........

================================= FAILURES =================================
_______________________________ test_func[0] _______________________________
/home/hpk/tmp/doc-exec-420/test_module.py:6: running the test CRASHED with signal 15
______________________________ test_func[19] _______________________________
/home/hpk/tmp/doc-exec-420/test_module.py:6: running the test CRASHED with signal 15
______________________________ test_func[38] _______________________________
/home/hpk/tmp/doc-exec-420/test_module.py:6: running the test CRASHED with signal 15
=================== 3 failed, 47 passed in 3.41 seconds ====================
</snippet></ROW><ROW><id>11806997</id><snippet>f</snippet></ROW><ROW><id>11806997</id><snippet>$ py.test --boxed -n3
=========================== test session starts ============================
platform linux2 -- Python 2.7.3 -- pytest-2.3.0.dev8
plugins: xdist, bugzilla, cache, oejskit, cli, pep8, cov
gw0 I / gw1 I / gw2 I
gw0 [50] / gw1 [50] / gw2 [50]

scheduling tests via LoadScheduling
..f...............f..................f............
================================= FAILURES =================================
_______________________________ test_func[0] _______________________________
[gw0] linux2 -- Python 2.7.3 /home/hpk/venv/1/bin/python
/home/hpk/tmp/doc-exec-420/test_module.py:6: running the test CRASHED with signal 15
______________________________ test_func[19] _______________________________
[gw2] linux2 -- Python 2.7.3 /home/hpk/venv/1/bin/python
/home/hpk/tmp/doc-exec-420/test_module.py:6: running the test CRASHED with signal 15
______________________________ test_func[38] _______________________________
[gw2] linux2 -- Python 2.7.3 /home/hpk/venv/1/bin/python
/home/hpk/tmp/doc-exec-420/test_module.py:6: running the test CRASHED with signal 15
=================== 3 failed, 47 passed in 2.03 seconds ====================
</snippet></ROW><ROW><id>11806997</id><snippet>-n</snippet></ROW><ROW><id>11807138</id><snippet>request.params</snippet></ROW><ROW><id>11807138</id><snippet>selectedcategories = request.params.getall("selectedcategories")
</snippet></ROW><ROW><id>11807213</id><snippet>type('hello') == str
type(5) == int
type(int) == type
type(type) == type
</snippet></ROW><ROW><id>11807213</id><snippet>True</snippet></ROW><ROW><id>11807213</id><snippet>type</snippet></ROW><ROW><id>11807213</id><snippet>dir()</snippet></ROW><ROW><id>11807213</id><snippet>int</snippet></ROW><ROW><id>11807213</id><snippet>dir(__builtins__)</snippet></ROW><ROW><id>11807213</id><snippet>locals()</snippet></ROW><ROW><id>11807213</id><snippet>globals()</snippet></ROW><ROW><id>11807213</id><snippet>vars(__builtins__)</snippet></ROW><ROW><id>11807213</id><snippet>objs = dict(vars(__builtins__), **dict(globals(), **locals())).values()
</snippet></ROW><ROW><id>11807213</id><snippet>types_in_scope = [o for o in objs if isinstance(o, type)]
</snippet></ROW><ROW><id>11807213</id><snippet>def foo():
    class Foo:
        pass
    return Foo()
x = foo()
</snippet></ROW><ROW><id>11807368</id><snippet>    Block1: test is t
    Block2: test is u
    Block3: test is V
</snippet></ROW><ROW><id>11807368</id><snippet>import re
file = open( "Textfile.txt", "r" ).readlines()
var=raw_input("enter the value")
for line in file:
    if line.find('Block1:') != -1:
        if re.search(var,line,re.IGNORECASE):
            print "value=",line
</snippet></ROW><ROW><id>11807469</id><snippet>print itext</snippet></ROW><ROW><id>11807469</id><snippet>print collections.Counter(itext)
</snippet></ROW><ROW><id>11807469</id><snippet>word_counter = {}
for word in itext:
    if word in word_counter:
        word_counter[word] += 1
    else:
        word_counter[word] = 1
</snippet></ROW><ROW><id>11807675</id><snippet>hierarchyDataOfAContour[2]</snippet></ROW><ROW><id>11807675</id><snippet>hierarchyDataOfAContour[3]</snippet></ROW><ROW><id>11807675</id><snippet>import cv2
import numpy

# Load the image
img = cv2.imread("/ContourTest.PNG")

# Split out each channel
blue, green, red = cv2.split(img)

def medianCanny(img, thresh1, thresh2):
    median = numpy.median(img)
    img = cv2.Canny(img, int(thresh1 * median), int(thresh2 * median))
    return img

# Run canny edge detection on each channel
blue_edges = medianCanny(blue, 0.2, 0.3)
green_edges = medianCanny(green, 0.2, 0.3)
red_edges = medianCanny(red, 0.2, 0.3)

# Join edges back into image
edges = blue_edges | green_edges | red_edges

# Find the contours
contours,hierarchy = cv2.findContours(edges, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)

hierarchy = hierarchy[0] # get the actual inner list of hierarchy descriptions

# For each contour, find the bounding rectangle and draw it
for component in zip(contours, hierarchy):
    currentContour = component[0]
    currentHierarchy = component[1]
    x,y,w,h = cv2.boundingRect(currentContour)
    if currentHierarchy[2] &lt; 0:
        # these are the innermost child components
        cv2.rectangle(img,(x,y),(x+w,y+h),(0,0,255),3)
    elif currentHierarchy[3] &lt; 0:
        # these are the outermost parent components
        cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,0),3)

# Finally show the image
cv2.imshow('img',img)
cv2.waitKey(0)
cv2.destroyAllWindows()
</snippet></ROW><ROW><id>11807721</id><snippet>import random, sqlite3

conn = sqlite3.connect("people.db")
cursor = conn.cursor()

sql = 'create table if not exists people (id integer, name VARCHAR(255))'
cursor.execute(sql)

for x in xrange(5):
    cursor.execute('insert into people VALUES (?, "test")', (random.randint(1, 10000),))
conn.commit()

cursor.execute("select count(*) from people")
print "In database:", cursor.fetchone()[0]
</snippet></ROW><ROW><id>11807758</id><snippet>reduce(f, iterable[, initializer])</snippet></ROW><ROW><id>11807758</id><snippet>&gt;&gt;&gt; from operator import mul
&gt;&gt;&gt; reduce(mul, [1, 2, 3], 1)
6
</snippet></ROW><ROW><id>11807758</id><snippet>reduce()</snippet></ROW><ROW><id>11807758</id><snippet>a ⊗ b ⊗ c ⊗ d ⊗ e ...</snippet></ROW><ROW><id>11807758</id><snippet>⊗</snippet></ROW><ROW><id>11807992</id><snippet>import subprocess
subprocess.call(["wget", "www.example.com", "-P", "/dir/to/save"])
</snippet></ROW><ROW><id>11807992</id><snippet>import urllib2
response = urllib2.urlopen('http://example.com/')
html = response.read()
</snippet></ROW><ROW><id>11808404</id><snippet>def find(file, paragrapgh_number, search_string):
    paragraph = 'paragraph {}'.format(paragrapgh_number)
    for line in file:
        if line.find(paragraph) &gt;= 0:
            break
    for line in file:
        if line.find(search_string) &gt;=0:
            print('Found:', line)
        elif line.find('paragraph') &gt;= 0:
            print('Not found')
            return

with open( "./test.txt", "r" ) as file:
    find(file, 2, 'intranet 2')

&gt;&gt;&gt;Found: 04 intranet 2
</snippet></ROW><ROW><id>11808404</id><snippet>&gt;&gt;&gt;Not Found
</snippet></ROW><ROW><id>11808503</id><snippet>for el in tree.iter():
    ws = olWS()
    ws.country = el.text if el.tag == 'custom_var4' else ''
    ws.comment = el.text if el.tag == 'comments' else ''
    ws.save()
</snippet></ROW><ROW><id>11808571</id><snippet>QObject.sender</snippet></ROW><ROW><id>11808723</id><snippet>(?&lt;=[\W_])work(?=[\W_])</snippet></ROW><ROW><id>11808723</id><snippet>work</snippet></ROW><ROW><id>11808723</id><snippet>\W</snippet></ROW><ROW><id>11808723</id><snippet>\W</snippet></ROW><ROW><id>11808723</id><snippet>\b</snippet></ROW><ROW><id>11808723</id><snippet>_</snippet></ROW><ROW><id>11808723</id><snippet>\w</snippet></ROW><ROW><id>11808723</id><snippet>(?&lt;=[\W_])(work|job)(?=[\W_])</snippet></ROW><ROW><id>11808723</id><snippet>(?&lt;=[\W_])(?:work|job)(?=[\W_])</snippet></ROW><ROW><id>11808723</id><snippet>(?&lt;=[\W_])(?:work|job)(?=[\W_]|$)</snippet></ROW><ROW><id>11808723</id><snippet>\w</snippet></ROW><ROW><id>11808723</id><snippet>[a-zA-Z0-9_]</snippet></ROW><ROW><id>11808723</id><snippet>\W</snippet></ROW><ROW><id>11808723</id><snippet>\w</snippet></ROW><ROW><id>11808723</id><snippet>\b</snippet></ROW><ROW><id>11808723</id><snippet>\w</snippet></ROW><ROW><id>11808723</id><snippet>\W</snippet></ROW><ROW><id>11808723</id><snippet>foo(?=bar)</snippet></ROW><ROW><id>11808723</id><snippet>foo</snippet></ROW><ROW><id>11808723</id><snippet>bar</snippet></ROW><ROW><id>11808723</id><snippet>bar</snippet></ROW><ROW><id>11808723</id><snippet>(?&lt;=foo)bar</snippet></ROW><ROW><id>11808723</id><snippet>bar</snippet></ROW><ROW><id>11808723</id><snippet>foo</snippet></ROW><ROW><id>11808723</id><snippet>foo</snippet></ROW><ROW><id>11808878</id><snippet>"source" : "&lt;a href="http://example.com" rel="nofollow"&gt;Some Twitter App&lt;/a&gt;",
</snippet></ROW><ROW><id>11808878</id><snippet>"source" : "&lt;a href="http://twitter.com/devices" rel="nofollow"&gt;txt&lt;/a&gt;",
</snippet></ROW><ROW><id>11809154</id><snippet>or</snippet></ROW><ROW><id>11809154</id><snippet>and</snippet></ROW><ROW><id>11809154</id><snippet>if "e":
    print("something")
</snippet></ROW><ROW><id>11809154</id><snippet>something</snippet></ROW><ROW><id>11809154</id><snippet>letter</snippet></ROW><ROW><id>11809154</id><snippet>"e"</snippet></ROW><ROW><id>11809154</id><snippet>if letter == "a" or letter == "e"  # (...)
</snippet></ROW><ROW><id>11809154</id><snippet>if letter in "aeiouy":
</snippet></ROW><ROW><id>11809215</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>11809215</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>11809215</id><snippet>from bs4 import BeautifulSoup
#by taking the `html` variable from the question.
html = BeautifulSoup(html)
firstBigTag = html.find_all('big')[0]
nextATag = firstBigTag.find_next('a')
def loopUntilA(text, firstElement):
    text += firstElement.string
    if (firstElement.next.next == nextATag):             
        return text
    else:
        #Using double next to skip the string nodes themselves
        return loopUntilA(text, firstElement.next.next)
targetString = loopUntilA('', firstBigTag)
print targetString
</snippet></ROW><ROW><id>11809385</id><snippet>&gt;&gt;&gt; chr(ord('x') - 83)
'%'
</snippet></ROW><ROW><id>11809385</id><snippet>'x'</snippet></ROW><ROW><id>11809385</id><snippet>&gt;&gt;&gt; bytes([ord(b'x') - 83])
b'%'
</snippet></ROW><ROW><id>11809385</id><snippet>ord(b'x')</snippet></ROW><ROW><id>11809385</id><snippet>b'x'[0]</snippet></ROW><ROW><id>11809385</id><snippet>\x00</snippet></ROW><ROW><id>11809385</id><snippet>&gt;&gt;&gt; chr(ord('\x53') - 83)
'\x00'
</snippet></ROW><ROW><id>11809611</id><snippet>'project/head.png'</snippet></ROW><ROW><id>11809703</id><snippet>&gt;&gt;&gt; from numpy import array, shape, zeros
&gt;&gt;&gt; cabbage = array([[0,3,2],[3,2,1],[3,1,0]])
&gt;&gt;&gt; cucumber=array([(0,100,0),(0,150,0),(0,200,0),(0,255,0)])
&gt;&gt;&gt; cucumber[cabbage]
array([[[  0, 100,   0],
        [  0, 255,   0],
        [  0, 200,   0]],

       [[  0, 255,   0],
        [  0, 200,   0],
        [  0, 150,   0]],

       [[  0, 255,   0],
        [  0, 150,   0],
        [  0, 100,   0]]])
</snippet></ROW><ROW><id>11809850</id><snippet>response.code</snippet></ROW><ROW><id>11809850</id><snippet>from mechanize import Browser
browser = Browser()
response = browser.open('http://www.google.com')
print response.code
</snippet></ROW><ROW><id>11810139</id><snippet>TimeField</snippet></ROW><ROW><id>11810139</id><snippet>datetime.time</snippet></ROW><ROW><id>11810139</id><snippet>.hour</snippet></ROW><ROW><id>11810139</id><snippet>def part_of_day_statistics(x):
    if x.hour &gt;= 6 and x.hour &lt; 12:
        return 'Morning'
    if x.hour &gt;= 12 and x.hour &lt; 18:
        return 'Afternoon'
</snippet></ROW><ROW><id>11810203</id><snippet>00000000000000000000000000001010
</snippet></ROW><ROW><id>11810203</id><snippet>11111111111111111111111111110101
</snippet></ROW><ROW><id>11810204</id><snippet>DLS(node, goal, depth) {
  if ( depth &gt;= 0 ) {
    if ( node == goal )
      return node

    for each child in expand(node)
      DLS(child, goal, depth-1)
  }
}
</snippet></ROW><ROW><id>11810204</id><snippet>DLS(node, depth) {
    for each child in expand(node) {
      record paths as [node, child]
      DLS(child, depth-1)
    }
}
</snippet></ROW><ROW><id>11810239</id><snippet>from gi.repository import Gtk, GObject, Vte
#GObject is not required. I just import it everywhere just in case.
#Gtk, Vte, and GLib are required.
from gi.repository import GLib
import os
#os.environ['HOME'] helps to keep from hard coding the home string.
#os is not required unless you want that functionality.

class TheWindow(Gtk.Window):

    def __init__(self):
        Gtk.Window.__init__(self, title="inherited cell renderer")
        self.set_default_size(600, 300)
        self.terminal     = Vte.Terminal()
        self.terminal.fork_command_full(
                Vte.PtyFlags.DEFAULT, #default is fine
                os.environ['HOME'], #where to start the command?
                ["/bin/sh"], #where is the emulator?
                [], #it's ok to leave this list empty
                GLib.SpawnFlags.DO_NOT_REAP_CHILD,
                None, #at least None is required
                None,
                )
        #Set up a button to click and run a demo command
        self.button = Gtk.Button("Do The Command")
        #To get the command to automatically run
        #a newline(\n) character is used at the end of the
        #command string.
        self.command = "echo \"Sending this command to a virtual terminal.\"\n"
        command = Gtk.Label("The command: "+self.command)
        self.button.connect("clicked", self.InputToTerm)
        #end demo command code

        #set up the interface
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        box.pack_start(self.button, False, True, 0)
        box.pack_start(command, False, True, 1)
        #a scroll window is required for the terminal
        scroller = Gtk.ScrolledWindow()
        scroller.set_hexpand(True)
        scroller.set_vexpand(True)
        scroller.add(self.terminal)
        box.pack_start(scroller, False, True, 2)
        self.add(box)

    def InputToTerm(self, clicker):
        #get the command when the button is clicked
        length = len(self.command)
        #A length is not required but is the easiest mechanism.
        #Otherwise the command must be null terminated.
        #Feed the command to the terminal.
        self.terminal.feed_child(self.command, length)


win = TheWindow()
win.connect("delete-event", Gtk.main_quit)
win.show_all()
Gtk.main()
</snippet></ROW><ROW><id>11810287</id><snippet>education = result[0]['education'][0]['school']['name']
</snippet></ROW><ROW><id>11810492</id><snippet>picture=me[u'picture']</snippet></ROW><ROW><id>11810492</id><snippet>url</snippet></ROW><ROW><id>11810492</id><snippet>picture</snippet></ROW><ROW><id>11811186</id><snippet>class Memory:
    def __init__(self, s):
        if not 'RAM' in s and not 'memory' in s:
            raise ValueError("Not a string that describes RAM.")

        self.capacity = int(re.match(r'(\d+) ?GB', s)[1])
</snippet></ROW><ROW><id>11811425</id><snippet>list(dt.T.itertuples())</snippet></ROW><ROW><id>11811425</id><snippet>dt</snippet></ROW><ROW><id>11811463</id><snippet>import numpy as np

length = 20000
limit = int(0.75*length)
keep = np.random.permutation(length)[:limit]

newArray = oldArray[keep]
</snippet></ROW><ROW><id>11811540</id><snippet>int((x*10) % 10)</snippet></ROW><ROW><id>11811540</id><snippet>&gt;&gt;&gt; x = 1.4
&gt;&gt;&gt; int((x*10) % 10)
4
</snippet></ROW><ROW><id>11811560</id><snippet>&lt;</snippet></ROW><ROW><id>11811560</id><snippet>&gt;</snippet></ROW><ROW><id>11811560</id><snippet>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;response&gt;
&lt;heartbeat&gt;&lt;!--#exec cmd_argument='printf( "0x%02X%02X", InReadUByte( 0 ), InReadUByte( 1 ))'--&gt;    &lt;/heartbeat&gt;

&lt;dmt node="1"&gt;
    &lt;address&gt;&lt;!--#exec cmd_argument='printf( "0x%02X", InReadUByte( 20 ))'--&gt;&lt;/address&gt;
    &lt;status&gt;&lt;!--#exec cmd_argument='printf( "0x%02X", InReadUByte( 21 ))'--&gt;&lt;/status&gt;
    &lt;realflow&gt;&lt;!--#exec cmd_argument='printf( "%f", InReadFloat( 22 ))'--&gt;&lt;/realflow&gt;
    &lt;pressure&gt;&lt;!--#exec cmd_argument='printf( "0x%02X%02X", InReadUByte( 26 ), InReadUByte( 27 ))'--&gt;&lt;/pressure&gt;
    &lt;temp&gt;&lt;!--#exec cmd_argument='printf( "0x%02X%02X", InReadUByte( 28 ), InReadUByte( 29 ))'--&gt;&lt;/temp&gt;
&lt;/dmt&gt;
&lt;/response&gt;
</snippet></ROW><ROW><id>11811560</id><snippet>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;response&gt;
&lt;heartbeat&gt;&lt;?--#exec cmd_argument='printf( "0x%02X%02X", InReadUByte( 0 ), InReadUByte( 1 ))'--&gt;    &lt;/heartbeat&gt;

&lt;dmt node="1"&gt;
    &lt;address&gt;&lt;?--#exec cmd_argument='printf( "0x%02X", InReadUByte( 20 ))'--&gt;&lt;/address&gt;
    &lt;status&gt;&lt;?--#exec cmd_argument='printf( "0x%02X", InReadUByte( 21 ))'--&gt;&lt;/status&gt;
    &lt;realflow&gt;&lt;?--#exec cmd_argument='printf( "%f", InReadFloat( 22 ))'--&gt;&lt;/realflow&gt;
    &lt;pressure&gt;&lt;?--#exec cmd_argument='printf( "0x%02X%02X", InReadUByte( 26 ), InReadUByte( 27 ))'--&gt;&lt;/pressure&gt;
    &lt;temp&gt;&lt;?--#exec cmd_argument='printf( "0x%02X%02X", InReadUByte( 28 ), InReadUByte( 29 ))'--&gt;&lt;/temp&gt;
&lt;/dmt&gt;
&lt;/response&gt;
</snippet></ROW><ROW><id>11811591</id><snippet>$ python3.2 test.py
Which online Course you have signed up, dude?



dlkjdf



Good Luck to you, dude!
$
</snippet></ROW><ROW><id>11811591</id><snippet>&gt;&gt;&gt; def newlines():
...     print()
...     print()
...     print()    
... 
&gt;&gt;&gt; question = "Which online Course you have signed up, dude?"
&gt;&gt;&gt; response = "Good Luck to you, dude!"
&gt;&gt;&gt; 
&gt;&gt;&gt; print(question), newlines(), input(), newlines(), print(response)
Which online Course you have signed up, dude?



dljdldk



Good Luck to you, dude!
(None, None, 'dljdldk', None, None)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11811591</id><snippet>&gt;&gt;&gt; 3
3
&gt;&gt;&gt; 4
4
&gt;&gt;&gt; 3, 4, None, "hey"
(3, 4, None, 'hey')
</snippet></ROW><ROW><id>11811728</id><snippet>import package</snippet></ROW><ROW><id>11811728</id><snippet>from package import module</snippet></ROW><ROW><id>11811728</id><snippet>module.SomeClass</snippet></ROW><ROW><id>11811728</id><snippet>package.SomeClass</snippet></ROW><ROW><id>11811772</id><snippet>&gt;&gt;&gt; vars = {i:0 for i in range(10)}
&gt;&gt;&gt; vars
{0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0}
</snippet></ROW><ROW><id>11811772</id><snippet>var[6]</snippet></ROW><ROW><id>11811772</id><snippet>var["yay!"] = "Great!"</snippet></ROW><ROW><id>11811772</id><snippet>&gt;&gt;&gt; vars = [0 for i in range(10)]
&gt;&gt;&gt; vars
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
</snippet></ROW><ROW><id>11811806</id><snippet>wsgiref.simple_server</snippet></ROW><ROW><id>11811806</id><snippet>Serving &lt;function application at 0xb65848&gt; http://0.0.0.0:8000
Traceback (most recent call last):
  File "/usr/lib64/python3.2/wsgiref/handlers.py", line 138, in run
    self.finish_response()
  File "/usr/lib64/python3.2/wsgiref/handlers.py", line 179, in finish_response
    self.write(data)
  File "/usr/lib64/python3.2/wsgiref/handlers.py", line 264, in write
    "write() argument must be a bytes instance"
AssertionError: write() argument must be a bytes instance
localhost.localdomain - - [04/Aug/2012 16:27:08] "GET / HTTP/1.1" 500 59
</snippet></ROW><ROW><id>11811806</id><snippet>bytes</snippet></ROW><ROW><id>11811806</id><snippet>open(path, 'r')</snippet></ROW><ROW><id>11811806</id><snippet>str</snippet></ROW><ROW><id>11811806</id><snippet>fh = open(path, 'r')
</snippet></ROW><ROW><id>11811806</id><snippet>fh = open(path, 'rb')
#                 ^
</snippet></ROW><ROW><id>11811934</id><snippet>idx = np.all([times&gt;=start,times&lt;=end],0)
</snippet></ROW><ROW><id>11811934</id><snippet># This replaces the last loop in your example:
for i in range(N):        
    spike_times = spiketimes[i]
    datarow = data[i]
    if len(spike_times) &gt; 0:
        for spike_time in spike_times:
            start=max(spike_time-dtbin,0)
            end=min(spike_time+dtbin,t)
            #idx = np.all([times&gt;=start,times&lt;=end],0)
            #datarow[idx] = np.NaN
            datarow[int(start/dt):int(end/dt)] = np.NaN
    ## replaced this with equivalent for testing
    means[i] = datarow[~np.isnan(datarow)].mean()  
</snippet></ROW><ROW><id>11811934</id><snippet>kernel = np.ones(20, dtype=bool)
for i in range(N):        
    spike_times = spiketimes[i]
    datarow = data[i]
    mask = np.zeros(len(datarow), dtype=bool)
    indexes = (spike_times / dt).astype(int)
    mask[indexes] = True  
    mask = np.convolve(mask, kernel)[10:-9]

    means[i] = datarow[~mask].mean()
</snippet></ROW><ROW><id>11812022</id><snippet>super(MyClass, self).__init__(text)</snippet></ROW><ROW><id>11812022</id><snippet>MyClass</snippet></ROW><ROW><id>11812022</id><snippet>super</snippet></ROW><ROW><id>11812022</id><snippet>MyClass</snippet></ROW><ROW><id>11812022</id><snippet>__init__</snippet></ROW><ROW><id>11812022</id><snippet>MyClass</snippet></ROW><ROW><id>11812022</id><snippet>OrigMyClass</snippet></ROW><ROW><id>11812022</id><snippet>DecMyClass</snippet></ROW><ROW><id>11812022</id><snippet>MyClass</snippet></ROW><ROW><id>11812022</id><snippet>__init__</snippet></ROW><ROW><id>11812022</id><snippet>OrigMyClass</snippet></ROW><ROW><id>11812022</id><snippet>__init__</snippet></ROW><ROW><id>11812022</id><snippet>super(MyClass, self)</snippet></ROW><ROW><id>11812022</id><snippet>super(OrigMyClass, self)</snippet></ROW><ROW><id>11812022</id><snippet>MyClass</snippet></ROW><ROW><id>11812022</id><snippet>MyClass</snippet></ROW><ROW><id>11812022</id><snippet>super</snippet></ROW><ROW><id>11812022</id><snippet>__init__</snippet></ROW><ROW><id>11812022</id><snippet>DecMyClass</snippet></ROW><ROW><id>11812022</id><snippet>OrigMyClass</snippet></ROW><ROW><id>11812022</id><snippet>DecMyClass</snippet></ROW><ROW><id>11812022</id><snippet>__init__</snippet></ROW><ROW><id>11812022</id><snippet>super(DecMyClass, self)</snippet></ROW><ROW><id>11812022</id><snippet>MyClass</snippet></ROW><ROW><id>11812022</id><snippet>DecMyClass</snippet></ROW><ROW><id>11812022</id><snippet>super(MyClass, self)</snippet></ROW><ROW><id>11812022</id><snippet>super(DecMyClass, self)</snippet></ROW><ROW><id>11812022</id><snippet>MyClass(111)</snippet></ROW><ROW><id>11812022</id><snippet>DecMyClass</snippet></ROW><ROW><id>11812022</id><snippet>DecMyClass.__init__</snippet></ROW><ROW><id>11812022</id><snippet>super(DecMyClass, self).__init__</snippet></ROW><ROW><id>11812022</id><snippet>OrigMyClass.__init__</snippet></ROW><ROW><id>11812022</id><snippet>OrigMyClass.__init__</snippet></ROW><ROW><id>11812022</id><snippet>super(MyClass, self).__init__</snippet></ROW><ROW><id>11812022</id><snippet>MyClass</snippet></ROW><ROW><id>11812022</id><snippet>DecMyClass</snippet></ROW><ROW><id>11812022</id><snippet>super(DecMyClass, self).__init__</snippet></ROW><ROW><id>11812022</id><snippet>DecMyClass</snippet></ROW><ROW><id>11812022</id><snippet>OrigMyClass</snippet></ROW><ROW><id>11812022</id><snippet>MyClass</snippet></ROW><ROW><id>11812022</id><snippet>DecMyClass</snippet></ROW><ROW><id>11812022</id><snippet>OrigMyClass</snippet></ROW><ROW><id>11812022</id><snippet>super(DecMyClass, self).__init__</snippet></ROW><ROW><id>11812022</id><snippet>OrigMyClass.__init__</snippet></ROW><ROW><id>11812022</id><snippet>&gt;&gt;&gt; class Super(object):
...     def __init__(self):
...         print "In super init"
...         super(Sub, self).__init__()
&gt;&gt;&gt; class Sub(Super):
...     def __init__(self):
...         print "In sub init"
...         super(Sub, self).__init__()
</snippet></ROW><ROW><id>11812022</id><snippet>Super</snippet></ROW><ROW><id>11812022</id><snippet>super(Sub, self)</snippet></ROW><ROW><id>11812022</id><snippet>Sub</snippet></ROW><ROW><id>11812022</id><snippet>Sub</snippet></ROW><ROW><id>11812022</id><snippet>Super</snippet></ROW><ROW><id>11812022</id><snippet>Super</snippet></ROW><ROW><id>11812022</id><snippet>&gt;&gt;&gt; class Super(object):
...     def __init__(self):
...         print "In super init"
...         super(someClass, self).__init__()
&gt;&gt;&gt; class Sub(Super):
...     def __init__(self):
...         print "In sub init"
...         super(Sub, self).__init__()
&gt;&gt;&gt; someClass = Sub
</snippet></ROW><ROW><id>11812022</id><snippet>super</snippet></ROW><ROW><id>11812022</id><snippet>someClass</snippet></ROW><ROW><id>11812022</id><snippet>super</snippet></ROW><ROW><id>11812270</id><snippet>def my_example(request):    
    request.session['key'] = True
    response = render_to_response("example.html", context_instance = RequestContext( request ), mimetype = "text/html" )
    return response
</snippet></ROW><ROW><id>11812420</id><snippet>def get_clients(request):
    if request.method == 'GET':
        ccId = request.GET['ccId']
    elif request.method == 'POST':
        ccId = request.POST['ccId']

    lstClients = Patients.objects.filter(cr=ccId)    
    data = serializers.serialize("json", lstClients, fields=('tel',))
    return http.HttpResponse(json.dumps(data), mimetype='application/javascript')
</snippet></ROW><ROW><id>11812420</id><snippet>ccId = int(request.GET['ccId']</snippet></ROW><ROW><id>11812525</id><snippet>d = { 'foo' : very_long_value }

urlpatterns = patterns('',
    url('^aaaa/$', 'aaa', d),
    url('^bbbb/$', 'bbb', d),
    url('^cccc/$', 'ccc', d),
)
</snippet></ROW><ROW><id>11812525</id><snippet>def add_dict(d, **kw):
    x = d.copy()
    x.update(kw)
    return x

d = { 'foo' : very_long_argument }

urlpatterns = patterns('',
    url('^aaaa/$', 'aaa', d),
    url('^bbbb/$', 'bbb', d),
    url('^cccc/$', 'ccc', add_dict(d, bar = 'xxx')),
)
</snippet></ROW><ROW><id>11812525</id><snippet>url</snippet></ROW><ROW><id>11812525</id><snippet>def my_url(regex, view, kwargs=None, name=None, prefix=''):
    if kwargs is None:
        kwargs = {}
    kwargs.update(foo = very_long_argument)
    return url(regex, view, kwargs, name, prefix)

urlpatterns = patterns('',
    my_url('^aaaa/$', 'aaa'),
    my_url('^bbbb/$', 'bbb'),
    my_url('^cccc/$', 'ccc' { 'bar' : 'xxx'),
)
</snippet></ROW><ROW><id>11812575</id><snippet>padx</snippet></ROW><ROW><id>11812575</id><snippet>pady</snippet></ROW><ROW><id>11812575</id><snippet>grid</snippet></ROW><ROW><id>11812575</id><snippet>pack</snippet></ROW><ROW><id>11812867</id><snippet>autosuper</snippet></ROW><ROW><id>11812867</id><snippet>def autosuper(fn):
    def f(self, *args, **kw):
        cl = super(type(self), self)
        getattr(cl, fn.__name__)(*args, **kw)
        return fn(self, *args, **kw)
    return f
</snippet></ROW><ROW><id>11812867</id><snippet>super</snippet></ROW><ROW><id>11812867</id><snippet>super</snippet></ROW><ROW><id>11812867</id><snippet>__class__</snippet></ROW><ROW><id>11812867</id><snippet>__class__</snippet></ROW><ROW><id>11812867</id><snippet>co_freevars</snippet></ROW><ROW><id>11812867</id><snippet>f_code</snippet></ROW><ROW><id>11812867</id><snippet>super</snippet></ROW><ROW><id>11812867</id><snippet>__class__</snippet></ROW><ROW><id>11812867</id><snippet>co_freevars</snippet></ROW><ROW><id>11812867</id><snippet>__class__</snippet></ROW><ROW><id>11812867</id><snippet>LOAD_DEFER</snippet></ROW><ROW><id>11812867</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>11812867</id><snippet>hyper = super</snippet></ROW><ROW><id>11812867</id><snippet>hyper</snippet></ROW><ROW><id>11812867</id><snippet>super</snippet></ROW><ROW><id>11812867</id><snippet>autosuper</snippet></ROW><ROW><id>11812867</id><snippet>__class__</snippet></ROW><ROW><id>11812867</id><snippet>unbound method</snippet></ROW><ROW><id>11812867</id><snippet>im_class</snippet></ROW><ROW><id>11812867</id><snippet>__class__</snippet></ROW><ROW><id>11813040</id><snippet>numpy.take</snippet></ROW><ROW><id>11813040</id><snippet>In [1]: a = np.random.randn(12,6).astype(np.float32)

In [2]: c = np.random.randint(0,6,size=(1e5,12)).astype(np.uint8)

In [3]: r = np.arange(12)

In [4]: %timeit a[r,c].sum(-1)
10 loops, best of 3: 46.7 ms per loop

In [5]: rr, cc = np.broadcast_arrays(r,c)

In [6]: flat_index = rr*a.shape[1] + cc

In [7]: %timeit a.take(flat_index).sum(-1)
100 loops, best of 3: 5.5 ms per loop

In [8]: (a.take(flat_index).sum(-1) == a[r,c].sum(-1)).all()
Out[8]: True
</snippet></ROW><ROW><id>11813291</id><snippet>global</snippet></ROW><ROW><id>11813291</id><snippet>def func():
    global var
    var = "stuff"
</snippet></ROW><ROW><id>11813496</id><snippet>ajax</snippet></ROW><ROW><id>11813496</id><snippet>$.ajax({
    url: url + "status/" + id,
    dataType: 'json',
    data: {},
    success: function(data) {
        if (data.report == null)
        {
            console.log(data.status_response);
            setTimeout(function(){pollResponse(url, id);}, 3000);
        }
        else
            console.alert('DONE!');
    },
    error: function(jqXHR, textStatus, errorThrown) {
        console.error(textStatus);
        console.error(errorThrown);
        console.log(jqXHR.responseText);
    }
);
</snippet></ROW><ROW><id>11813558</id><snippet>print hand(*deal(shuffle(load_deck())))</snippet></ROW><ROW><id>11813558</id><snippet>*</snippet></ROW><ROW><id>11813598</id><snippet>0</snippet></ROW><ROW><id>11813598</id><snippet>-1</snippet></ROW><ROW><id>11813598</id><snippet>None</snippet></ROW><ROW><id>11813598</id><snippet>0</snippet></ROW><ROW><id>11813598</id><snippet>size-1</snippet></ROW><ROW><id>11813598</id><snippet>1</snippet></ROW><ROW><id>11813598</id><snippet>size</snippet></ROW><ROW><id>11813598</id><snippet>size+2</snippet></ROW><ROW><id>11813829</id><snippet>^/$</snippet></ROW><ROW><id>11813834</id><snippet>pymongo.binary.Binary</snippet></ROW><ROW><id>11813932</id><snippet>export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
</snippet></ROW><ROW><id>11813932</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>11813932</id><snippet>/etc/ld.so.conf</snippet></ROW><ROW><id>11813932</id><snippet>/sbin/ldconfig</snippet></ROW><ROW><id>11813987</id><snippet>IntegerField</snippet></ROW><ROW><id>11814271</id><snippet>python manage.py shell</snippet></ROW><ROW><id>11814271</id><snippet>from django.contrib.sites.models import Site
new_site = Site.objects.create(domain='foo.com', name='foo.com')
print new_site.id
</snippet></ROW><ROW><id>11814281</id><snippet>import tornado.ioloop
import tornado.web

class MainHandler(tornado.web.RequestHandler):
    def get(self):
        # put your calculation logic in here (instead of "Hello World"
        self.write("Hello, world")

application = tornado.web.Application([
    (r"/", MainHandler),
])

if __name__ == "__main__":
    application.listen(8888)
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>11814296</id><snippet>rl_already_prompted</snippet></ROW><ROW><id>11814329</id><snippet>import pyglet

window = pyglet.window.Window()
image = pyglet.image.Texture.create(256,128)
img1 = pyglet.image.load('img1.png')
img2 = pyglet.image.load('img2.png')
image.blit_into(img1,0,0,0)
image.blit_into(img2,128,0,0)
@window.event
def on_draw():
    window.clear()
    image.blit(0,0)

pyglet.app.run()
</snippet></ROW><ROW><id>11814545</id><snippet>tangibles = [''.join(node(text=True)).strip() for node in soup('strong')[24:26]]
</snippet></ROW><ROW><id>11814545</id><snippet>node</snippet></ROW><ROW><id>11814545</id><snippet>for node in soup.findAll('strong')[24:26]</snippet></ROW><ROW><id>11814545</id><snippet>node</snippet></ROW><ROW><id>11814545</id><snippet>node.findAll(text=True)</snippet></ROW><ROW><id>11814545</id><snippet>node</snippet></ROW><ROW><id>11814545</id><snippet>''.join()</snippet></ROW><ROW><id>11814545</id><snippet>['Net Stuff', '152,113,000']</snippet></ROW><ROW><id>11814545</id><snippet>[['Net Stuff'], ['152,113,000']]</snippet></ROW><ROW><id>11814545</id><snippet>.strip()</snippet></ROW><ROW><id>11814693</id><snippet>video_id</snippet></ROW><ROW><id>11814693</id><snippet>    self.ytdata = ytservice.GetYouTubeVideoEntry(video_id=self.video_id)
</snippet></ROW><ROW><id>11814693</id><snippet>gdata</snippet></ROW><ROW><id>11814696</id><snippet>&gt;&gt;&gt; def returnDicts(args=None):
...     dicts = {
...         'a': {'a1':1, 'a2':2},
...         'b': {'b1':1, 'b2':2},
...         'c': {'c1':1, 'c2':2},
...         'd': {'d1':1, 'd2':2}
...     }
...     if args is None:
...         args = ['a', 'b', 'c', 'd']
...     return [dicts[d] for d in args]
&gt;&gt;&gt; returnDicts()
[{'a1': 1, 'a2': 2},
 {'b1': 1, 'b2': 2},
 {'c1': 1, 'c2': 2},
 {'d1': 1, 'd2': 2}]
&gt;&gt;&gt; returnDicts(['a'])
[{'a1': 1, 'a2': 2}]
&gt;&gt;&gt; returnDicts(['a', 'b'])
[{'a1': 1, 'a2': 2}, {'b1': 1, 'b2': 2}]
</snippet></ROW><ROW><id>11814749</id><snippet>add_url_rule()</snippet></ROW><ROW><id>11814749</id><snippet>view_functions = [news_view, foo_view, bar_view]

for view in ['news', 'foo', 'bar']:
  for translation in translations[view]:
     app.add_url_rule('/{}/'.format(translation), view, view_functions[view])
</snippet></ROW><ROW><id>11814925</id><snippet>func_globals</snippet></ROW><ROW><id>11814925</id><snippet>def func_globals(f):
    return f.__globals__ if PY3k else f.func_globals

def filter(self, selector):
    if not hasattr(selector, '__call__'):
        return self._filter_only(selector, self)
    else:
        elements = []
        try:
            for i, this in enumerate(self):

                # The magic happens here
                func_globals(selector)['this'] = this

                if callback(selector, i):
                    elements.append(this)

        finally:
            f_globals = func_globals(selector)
            if 'this' in f_globals:
                del f_globals['this']
        return self.__class__(elements, **dict(parent=self))
</snippet></ROW><ROW><id>11815181</id><snippet>{{ user.first_name }}</snippet></ROW><ROW><id>11815181</id><snippet>{{ user }}</snippet></ROW><ROW><id>11815181</id><snippet>__str__</snippet></ROW><ROW><id>11815547</id><snippet>import os
filepath = os.getcwd()
def MakeFile(file_name):
    temp_path = filepath + file_name
    with open(file_name, 'w') as f:
        f.write('''\
def print_success():
    print "sucesss"        
''')
    print 'Execution completed.'
</snippet></ROW><ROW><id>11815547</id><snippet>textwrap.dedent</snippet></ROW><ROW><id>11815547</id><snippet>import os
import textwrap

filepath = os.getcwd()
def MakeFile(file_name):
    temp_path = filepath + file_name
    with open(file_name, 'w') as f:
        f.write(textwrap.dedent('''\
            def print_success():
                print "sucesss"        
                '''))
    print 'Execution completed.'
</snippet></ROW><ROW><id>11815658</id><snippet>import kivy
from kivy.uix.gridlayout import GridLayout
from kivy.app import App
from kivy.uix.button import Button

class CalcApp(App):
    def build(self):
        layout = GridLayout(cols=3, row_force_default=True, row_default_height=50,
            pos_hint={'center_x':.5} , size_hint=(None, None))
            # ^ position grid in mid horizontally, ^ make grid use custom
            # size.
        # Bind the size of the gridlayout of to it's minimum_size(calculated
        # by children size)
        layout.bind(minimum_size = layout.setter('size'))
        # bind the top of the grid to it's height'
        layout.bind(height = layout.setter('top'))
        for x in (1, 2, 3, 4, 5, 2, 6, 7, 8, 9, 0):
            layout.add_widget(Button(text=str(x), size_hint_x=None, width=100))
        layout.add_widget(Button(text='Enter', size_hint_x=None, width=100))
        return layout

CalcApp().run()
</snippet></ROW><ROW><id>11815658</id><snippet>import kivy

from kivy.uix.gridlayout import GridLayout
from kivy.app import App
from kivy.lang import Builder

Builder.load_string('''
# a template Butt of type Button
[Butt@Button]
    # ctx.'attribute_name' is used to access the 
    # attributes defined in the instance of Butt.
    text: ctx.text
    # below vars are constant for every instance of Butt
    size_hint_x: None
    width: 100

&lt;CalcApp&gt;:
    cols: 3
    row_force_default: True
    row_default_height: 50
    pos_hint: {'center_x':.5}
    size_hint: (None, None)
    # size is updated whenever minimum_size is.
    size: self.minimum_size
    # top is updated whenever height is.
    top: self.height
    Butt:
        text: '1'
    Butt:
        text: '2'
    Butt:
        text: '3'
    Butt:
        text: '4'
    Butt:
        text: '5'
    Butt:
        text: '2'
    Butt:
        text: '6'
    Butt:
        text: '7'
    Butt:
        text: '8'
    Butt:
        text: '9'
    Butt:
        text: '0'
    Butt:
        text: 'Enter'
''')

class CalcApp(App, GridLayout):

    def build(self):
        return self

CalcApp().run()
</snippet></ROW><ROW><id>11815673</id><snippet>--system-site-packages</snippet></ROW><ROW><id>11815829</id><snippet>p</snippet></ROW><ROW><id>11815829</id><snippet>p = [p1,p2]
</snippet></ROW><ROW><id>11815829</id><snippet>    playersCheck = [0,1]
    for p in playersCheck:
</snippet></ROW><ROW><id>11815829</id><snippet>p[i][0][1].showGrid()</snippet></ROW><ROW><id>11815829</id><snippet>p</snippet></ROW><ROW><id>11815934</id><snippet>&gt;&gt;&gt; h1 = Image.open("C:\\a.jpg").histogram()
</snippet></ROW><ROW><id>11816005</id><snippet>accept()</snippet></ROW><ROW><id>11816005</id><snippet>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind((TCP_IP, TCP_PORT))
s.listen(1)

while True:    
    conn, addr = s.accept()

    print 'Connection address:', addr

    while True:
        data = conn.recv(BUFFER_SIZE)
        if not data: break
        print "received data:", data
        conn.send(data)

    conn.close()
</snippet></ROW><ROW><id>11816038</id><snippet>f = FirstThread()
f.daemon = True
f.start()
s = SecondThread()
s.daemon = True
s.start()
</snippet></ROW><ROW><id>11816038</id><snippet>import time
while True:
    time.sleep(1)
</snippet></ROW><ROW><id>11816038</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>11816057</id><snippet>int</snippet></ROW><ROW><id>11816057</id><snippet>cmd = int(data);
</snippet></ROW><ROW><id>11816057</id><snippet>cmd = hex(int(data))


int(x[, base]) -&gt; integer                                                                           

Convert a string or number to an integer, if possible.  A floating point
argument will be truncated towards zero (this does not include a string
representation of a floating point number!)  When converting a string, use
the optional base.  It is an error to supply a base when converting a
non-string.  If base is zero, the proper base is guessed based on the
string content.  If the argument is outside the integer range a
long object will be returned instead.


hex(number) -&gt; string                                                                               

Return the hexadecimal representation of an integer or long integer.
</snippet></ROW><ROW><id>11816126</id><snippet>None</snippet></ROW><ROW><id>11816126</id><snippet>partial</snippet></ROW><ROW><id>11816126</id><snippet>from functools import partial

options = { 0: func0,
            1: func1,
            2: partial(func2, foo1),
            3: partial(func3, foo2),
          }

options[choice]()
</snippet></ROW><ROW><id>11816221</id><snippet>Code</snippet></ROW><ROW><id>11816253</id><snippet>from pylab import *

# make a square figure and axes
figure(1, figsize=(10, 3))
ax = axes([0.1, 0.1, 0.8, 0.8])

labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
fracs = [15,30,45, 10]

explode=(0, 0.05, 0, 0)
pie(fracs, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True)
title('Raining Hogs and Dogs', bbox={'facecolor':'0.8', 'pad':5})

gca().set_aspect('1')
show()
</snippet></ROW><ROW><id>11816333</id><snippet>topdown</snippet></ROW><ROW><id>11816333</id><snippet>temp = os.walk(sys.argv[1], topdown=False)
for root, dirs, files in temp:
    for i in dirs:
        dir = os.path.join(root,i)
        os.rename(dir, dir+"!")
</snippet></ROW><ROW><id>11816333</id><snippet>True</snippet></ROW><ROW><id>11816333</id><snippet>False</snippet></ROW><ROW><id>11816381</id><snippet>def dirs(currentDir):
    allDirs = os.listdir(currentDir)
    print "Directories in %s:" % currentDir
    for files in allDirs:
        print files
    direc = raw_input("Directory name?:")

    if direc != "--q":
        theDir =  os.path.join(currentDir, direc)
        return dirs(theDir)
    else:
        return currentDir
</snippet></ROW><ROW><id>11816381</id><snippet>def dirs(currentDir):
    allDirs = os.listdir(currentDir)
    print "Directories in %s:" % currentDir
    for files in allDirs:
        print files
    direc = raw_input("Directory name?:")

    if direc != "--q":
        theDir =  os.path.join(currentDir, direc)
        dirs(theDir)
    print "should return"
</snippet></ROW><ROW><id>11816381</id><snippet>--q</snippet></ROW><ROW><id>11816381</id><snippet>exe</snippet></ROW><ROW><id>11816381</id><snippet>if</snippet></ROW><ROW><id>11816381</id><snippet>if/elif/.../else</snippet></ROW><ROW><id>11816381</id><snippet>exe = True</snippet></ROW><ROW><id>11816381</id><snippet>exe</snippet></ROW><ROW><id>11816381</id><snippet>exe</snippet></ROW><ROW><id>11816381</id><snippet>elif</snippet></ROW><ROW><id>11816381</id><snippet>should return</snippet></ROW><ROW><id>11816381</id><snippet>should return</snippet></ROW><ROW><id>11816381</id><snippet>--q</snippet></ROW><ROW><id>11816381</id><snippet>should return</snippet></ROW><ROW><id>11816381</id><snippet>--q</snippet></ROW><ROW><id>11816381</id><snippet>os.path.join()</snippet></ROW><ROW><id>11816381</id><snippet>&gt;&gt;&gt; dirs(r"C:\Python27")
Directories in C:\Python27:
DLLs
Doc
include
Lib
libs
LICENSE.txt
NEWS.txt
python.exe
pythonw.exe
README.txt
Removesetuptools.exe
Scripts
setuptools-wininst.log
tcl
Tools
w9xpopen.exe
Directory name?:Doc
Directories in C:\Python27\Doc:
python273.chm
Directory name?:--q
should return
should return
</snippet></ROW><ROW><id>11816381</id><snippet>def string_foo(text):
    first, rest = text[0], text[1:]
    print first
    if rest:
        string_foo(rest)




def string_bar(text):
    first, rest = text[0], text[1:]
    if rest:
        string_foo(rest)
    print first
</snippet></ROW><ROW><id>11816381</id><snippet>&gt;&gt;&gt; string_foo("Hello")
H
e
l
l
o

&gt;&gt;&gt; string_bar("Hello")
o
l
l
e
H
</snippet></ROW><ROW><id>11816382</id><snippet>fname</snippet></ROW><ROW><id>11816382</id><snippet>        filename = QtGui.QFileDialog.getOpenFileName(self, 'Open File', '/home', ".xls(*.xls)")
        wb = xlrd.open_workbook(filename)
</snippet></ROW><ROW><id>11816655</id><snippet>  q = db.GqlQuery("SELECT CommentCode FROM Comments " + 
                    "WHERE RefObjType = 'paper' AND RefObjID = :1" +
                    "ORDER BY CommentCode DESC ", RefObjID, 1)
</snippet></ROW><ROW><id>11816655</id><snippet>length(CommentCode)==2</snippet></ROW><ROW><id>11816663</id><snippet>&gt;&gt;&gt; my_dict = {'fruits':['orange', 'pear']}
&gt;&gt;&gt; type(my_dict['fruits'])
&lt;type 'list'&gt;
</snippet></ROW><ROW><id>11816663</id><snippet>&gt;&gt;&gt; dir(list)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
</snippet></ROW><ROW><id>11816663</id><snippet>insert</snippet></ROW><ROW><id>11816663</id><snippet>extend</snippet></ROW><ROW><id>11816663</id><snippet>append</snippet></ROW><ROW><id>11816663</id><snippet>&gt;&gt;&gt; help(list.extend)
Help on method_descriptor:

extend(...)
    L.extend(iterable) -- extend list by appending elements from the iterable
</snippet></ROW><ROW><id>11816663</id><snippet>&gt;&gt;&gt; help(list.insert)
Help on method_descriptor:

insert(...)
    L.insert(index, object) -- insert object before index
</snippet></ROW><ROW><id>11816663</id><snippet>&gt;&gt;&gt; help(list.append)
Help on method_descriptor:

append(...)
    L.append(object) -- append object to end
</snippet></ROW><ROW><id>11816663</id><snippet>help(my_dict['fruits'])</snippet></ROW><ROW><id>11816778</id><snippet>string_list.join('')</snippet></ROW><ROW><id>11816778</id><snippet>.join()</snippet></ROW><ROW><id>11816778</id><snippet>join()</snippet></ROW><ROW><id>11816778</id><snippet>.join()</snippet></ROW><ROW><id>11816778</id><snippet>str</snippet></ROW><ROW><id>11816778</id><snippet>join()</snippet></ROW><ROW><id>11816778</id><snippet>Flask</snippet></ROW><ROW><id>11816778</id><snippet>len()</snippet></ROW><ROW><id>11816864</id><snippet>images['cover']</snippet></ROW><ROW><id>11816864</id><snippet>images['cover'] = pic.path_thumb_l
</snippet></ROW><ROW><id>11816864</id><snippet>pic.path_thumb_l</snippet></ROW><ROW><id>11816864</id><snippet>None</snippet></ROW><ROW><id>11816864</id><snippet>images['cover'].append(pic.path_thumb_l)
</snippet></ROW><ROW><id>11817003</id><snippet>import unittest
class TestCaseA(unittest.TestCase):
    def setUp(self):
        self.thing = A()

    def test_does_x():
        self.assertTrue(self.thing.does_x())
</snippet></ROW><ROW><id>11817003</id><snippet>class A2(A):
    ...
</snippet></ROW><ROW><id>11817003</id><snippet>setUp</snippet></ROW><ROW><id>11817003</id><snippet>setup</snippet></ROW><ROW><id>11817003</id><snippet>A2</snippet></ROW><ROW><id>11817003</id><snippet>A</snippet></ROW><ROW><id>11817003</id><snippet>class TestA2(TestCaseA):
    def setUp(self):
        self.thing = A2()
</snippet></ROW><ROW><id>11817022</id><snippet>save()</snippet></ROW><ROW><id>11817022</id><snippet>save</snippet></ROW><ROW><id>11817022</id><snippet>class Player(models.Model):
  points = models.IntegerField()
  name = models.CharField(max_length=255)
</snippet></ROW><ROW><id>11817022</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>11817022</id><snippet>python manage.py sql &lt;appname&gt;</snippet></ROW><ROW><id>11817022</id><snippet>new_player = Player(points=100, name='me')
new_player.save()
</snippet></ROW><ROW><id>11817022</id><snippet>save()</snippet></ROW><ROW><id>11817078</id><snippet>models.Model</snippet></ROW><ROW><id>11817078</id><snippet>save</snippet></ROW><ROW><id>11817078</id><snippet>stummjr</snippet></ROW><ROW><id>11817078</id><snippet>class MyClass(models.Model):
    # some fields here

    def save(self, *args, **kwargs):
       # strip spaces here
       super(MyClass, self).save(*args, **kwargs)
       # make sure to call parent save method ^
</snippet></ROW><ROW><id>11817165</id><snippet>data = int( conn.recv(32) );
</snippet></ROW><ROW><id>11817165</id><snippet>int(string)</snippet></ROW><ROW><id>11817165</id><snippet>int('42') == 42</snippet></ROW><ROW><id>11817165</id><snippet>int('-56') == -56</snippet></ROW><ROW><id>11817165</id><snippet># see python's struct documentation, this defines the format of data you want
data = struct.Struct('&gt;i') 
# this produces an object from the socket that acts more like a file
socket_file = conn.makefile()
# read the data and unpack it
# NOTE: this will fail if the connection is lost midway through the bytes
# dealing with that is left as an exercise to the reader
value, = data.unpack(socket_file.read(data.size))
</snippet></ROW><ROW><id>11817241</id><snippet>Request</snippet></ROW><ROW><id>11817241</id><snippet>Request.meta</snippet></ROW><ROW><id>11817318</id><snippet>@app.route("/upload", methods=["POST"])
def upload():
    uploaded_files = flask.request.files.getlist("file[]")
    print uploaded_files
    return ""
</snippet></ROW><ROW><id>11817423</id><snippet>0 * * * * python /run/twitterparse/twitter.py &gt; /run/twitterparse
</snippet></ROW><ROW><id>11817423</id><snippet>chmod +x twitter.py
</snippet></ROW><ROW><id>11817515</id><snippet>int()</snippet></ROW><ROW><id>11817515</id><snippet>int()</snippet></ROW><ROW><id>11817515</id><snippet>ValueError</snippet></ROW><ROW><id>11817515</id><snippet>data = conn.recv(BUFFER_SIZE).strip()
if data:
    data = int(data)
    foo = data + 1
    if not data: break
</snippet></ROW><ROW><id>11817515</id><snippet>try:
    data = int(conn.recv(BUFFER_SIZE).strip());
except ValueError:
    continue
</snippet></ROW><ROW><id>11817726</id><snippet>if(A, B, C)</snippet></ROW><ROW><id>11817726</id><snippet>If(A, B, C)</snippet></ROW><ROW><id>11817726</id><snippet>F, H, A, B, C = Bools('F H A B C')
s = Solver()
s.add(F, H, If(A, B, C))
print s
</snippet></ROW><ROW><id>11817726</id><snippet>F, H, A, B, C = Bools('F H A B C')
s = Solver()
s.add(F, H, Implies(A, B))
print s
</snippet></ROW><ROW><id>11817842</id><snippet>$var o = obj
</snippet></ROW><ROW><id>11817976</id><snippet>x=3

for combination in itertools.combinations(files, x):
  counter = counter + 1
  output = " and ".join(combination)
  print output, counter
</snippet></ROW><ROW><id>11817976</id><snippet>sys.argv</snippet></ROW><ROW><id>11818016</id><snippet>L</snippet></ROW><ROW><id>11818016</id><snippet>bar</snippet></ROW><ROW><id>11818016</id><snippet>bar</snippet></ROW><ROW><id>11818016</id><snippet>bar</snippet></ROW><ROW><id>11818024</id><snippet>cur.execute("INSERT INTO Events VALUES(?, ?, ?)",("HELLO", 5, "friend")
</snippet></ROW><ROW><id>11818110</id><snippet>&gt;&gt;&gt; re.findall(r"(^.*?%s.*?$)" %expression, text, re.MULTILINE)
</snippet></ROW><ROW><id>11818115</id><snippet>ok_("1" in u, u)
</snippet></ROW><ROW><id>11818115</id><snippet>ok_("2" not in u, u)
ok_("3" not in u, u)
</snippet></ROW><ROW><id>11818115</id><snippet>ok_("4" in u, u)
</snippet></ROW><ROW><id>11818115</id><snippet>ok_("4" in u, u)
</snippet></ROW><ROW><id>11818358</id><snippet># Example: File: imagediff.py

import ImageChops
import math, operator

def rmsdiff(im1, im2):
    "Calculate the root-mean-square difference between two images"

    h = ImageChops.difference(im1, im2).histogram()

    # calculate rms
    return math.sqrt(reduce(operator.add,
        map(lambda h, i: h*(i**2), h, range(256))
    ) / (float(im1.size[0]) * im1.size[1]))
</snippet></ROW><ROW><id>11818358</id><snippet>import ImageChops

def equal(im1, im2):
    return ImageChops.difference(im1, im2).getbbox() is None
</snippet></ROW><ROW><id>11818433</id><snippet>import numpy as np
import random

# Input counts matrix
mat = np.array([
    [5, 5, 2],
    [1, 1, 3],
    [6, 0, 4]
], dtype=np.int64)

# Build a list of (row,col) pairs, and a list of counts
keys, counts = zip(*[
    ((i,j), mat[i,j])
        for i in range(mat.shape[0])
        for j in range(mat.shape[1])
        if mat[i,j] &gt; 0
])
</snippet></ROW><ROW><id>11818433</id><snippet># Make the cumulative counts array
counts = np.array(counts, dtype=np.int64)
sum_counts = np.cumsum(counts)

# Decide how many counts to include in the sample
frac_select = 0.30
count_select = int(sum_counts[-1] * frac_select)

# Choose unique counts
ind_select = sorted(random.sample(xrange(sum_counts[-1]), count_select))

# A vector to hold the new counts
out_counts = np.zeros(counts.shape, dtype=np.int64)

# Perform basically the merge step of merge-sort, finding where
# the counts land in the cumulative array
i = 0
j = 0
while i&lt;len(sum_counts) and j&lt;len(ind_select):
    if ind_select[j] &lt; sum_counts[i]:
        j += 1
        out_counts[i] += 1
    else:
        i += 1

# Rebuild the matrix using the `keys` list from before
out_mat = np.zeros(mat.shape, dtype=np.int64)
for i in range(len(out_counts)):
    out_mat[keys[i]] = out_counts[i]
</snippet></ROW><ROW><id>11818433</id><snippet>out_mat</snippet></ROW><ROW><id>11818437</id><snippet>mpl_toolkits/basemap/data</snippet></ROW><ROW><id>11818437</id><snippet>gshhs*</snippet></ROW><ROW><id>11818437</id><snippet>gshhs</snippet></ROW><ROW><id>11818437</id><snippet>gshhs</snippet></ROW><ROW><id>11818437</id><snippet>drawcoastlines</snippet></ROW><ROW><id>11818515</id><snippet>#!/usr/bin/env python3
from urllib.parse   import quote
from urllib.request import urlopen

url = 'http://zh.wikipedia.org/wiki/' + quote("毛泽东")
content = urlopen(url).read()
</snippet></ROW><ROW><id>11818546</id><snippet>intern()</snippet></ROW><ROW><id>11818546</id><snippet>a = [intern("foo".replace("o","1")) for a in range(0,1000000)]
</snippet></ROW><ROW><id>11818566</id><snippet>bit_length</snippet></ROW><ROW><id>11818566</id><snippet>&gt;&gt;&gt; (1).bit_length()
1
&gt;&gt;&gt; (4).bit_length()
3
&gt;&gt;&gt; (32).bit_length()
6
</snippet></ROW><ROW><id>11818566</id><snippet>dict</snippet></ROW><ROW><id>11818593</id><snippet>./foo.awk your_input_file</snippet></ROW><ROW><id>11818593</id><snippet>#!/usr/bin/awk -f

/^&gt;chr/ {
    OUT=substr($0,2) ".fa"
}

OUT {
    print &gt;OUT
}
</snippet></ROW><ROW><id>11818593</id><snippet>awk '/^&gt;chr/ {OUT=substr($0,2) ".fa"}; OUT {print &gt;OUT}' your_input
</snippet></ROW><ROW><id>11818693</id><snippet>from subprocess import Popen
from os import mkdir

argfile = open('commandline.txt')
for number, line in enumerate(argfile):    
    newpath = 'scatter.%03i' % number 
    mkdir(newpath)
    cmd = '../abc.py ' + line.strip()
    print 'Running %r in %r' % (cmd, newpath)
    Popen(cmd, shell=True, cwd=newpath)
</snippet></ROW><ROW><id>11818693</id><snippet>    p = Popen(cmd, shell=True, cwd=newpath)
    p.wait()
</snippet></ROW><ROW><id>11818723</id><snippet>BOOST_PYTHON_STATIC_LIB</snippet></ROW><ROW><id>11818723</id><snippet>b2 clean</snippet></ROW><ROW><id>11819003</id><snippet>orders.append(order)
</snippet></ROW><ROW><id>11819003</id><snippet>order</snippet></ROW><ROW><id>11819003</id><snippet>orders.append(list(order))
</snippet></ROW><ROW><id>11819111</id><snippet>(?&lt;!\\)(?:\\\\)*,</snippet></ROW><ROW><id>11819111</id><snippet>(?&lt;!\\)    Matches if the preceding character is not a backslash
(?:\\\\)*  Matches any number of occurrences of two backslashes
,          Matches a comma
</snippet></ROW><ROW><id>11819281</id><snippet>fac</snippet></ROW><ROW><id>11819281</id><snippet>import math
import random

def rand_multiple(fac, a, b):
    """Returns a random multiple of fac between a and b."""
    min_multi = math.ceil(float(a) / fac)
    max_multi = math.floor(float(b) / fac)
    return fac * random.randint(min_multi, max_multi)
</snippet></ROW><ROW><id>11819672</id><snippet>In [22]: df
Out[22]:
   A  B  C  D
0  8  3  5  8
1  9  4  0  4
2  5  4  3  8
3  4  8  5  1

In [23]: bi = df.C==0

In [24]: df.ix[bi, 'C'] = df[bi][['A', 'D']].apply(max, axis=1)

In [25]: df
Out[25]:
   A  B  C  D
0  8  3  5  8
1  9  4  9  4
2  5  4  3  8
3  4  8  5  1
</snippet></ROW><ROW><id>11819741</id><snippet>logging.&lt;severity&gt;("message")
</snippet></ROW><ROW><id>11819741</id><snippet>logging</snippet></ROW><ROW><id>11819741</id><snippet>logging</snippet></ROW><ROW><id>11819741</id><snippet>from logging import StreamHandler, Formatter

FORMAT = '%(asctime)-15s %(levelname)-6s %(message)s'
DATE_FORMAT = '%b %d %H:%M:%S'
formatter = Formatter(fmt=FORMAT, datefmt=DATE_FORMAT)
handler = StreamHandler()
handler.setFormatter(formatter)
logger = logging.getLogger(__name__)
logger.addHandler(handler)
</snippet></ROW><ROW><id>11819857</id><snippet>self.lastUpdateTime = int(time.time())
</snippet></ROW><ROW><id>11819857</id><snippet>def getTimeout(self):
    timePassed = int(time.time() - self.lastUpdateTime
    return self.updateTime - timePassed
</snippet></ROW><ROW><id>11819905</id><snippet>raw_input("Enter (y/n): ")</snippet></ROW><ROW><id>11819905</id><snippet>input()</snippet></ROW><ROW><id>11819990</id><snippet>gobject.timeout_add(500, self.update)
</snippet></ROW><ROW><id>11819990</id><snippet>self.update()</snippet></ROW><ROW><id>11819990</id><snippet>update</snippet></ROW><ROW><id>11819990</id><snippet>self.entry.set_text(str(time.time() - s))   
</snippet></ROW><ROW><id>11819990</id><snippet>gobject.timeout_add</snippet></ROW><ROW><id>11819990</id><snippet>import pygtk
pygtk.require('2.0')
import gtk
import gobject
import time

class ProgressBar(object):
    def __init__(self):
        self.val = 0
        self.scale = gtk.HScale()
        self.scale.set_range(0, 100)
        self.scale.set_update_policy(gtk.UPDATE_CONTINUOUS)
        self.scale.set_value(self.val)
        gobject.timeout_add(100, self.timeout)
    def timeout(self):
        self.val += 1
        # time.sleep(1)
        self.scale.set_value(self.val)
        return True

def demo_timeout_add():
    # http://faq.pygtk.org/index.py?req=show&amp;file=faq23.020.htp
    # http://stackoverflow.com/a/497313/190597
    win = gtk.Window()
    win.set_default_size(300, 50)
    win.connect("destroy", gtk.main_quit)
    bar = ProgressBar()
    win.add(bar.scale)
    win.show_all()
    gtk.main()

demo_timeout_add()
</snippet></ROW><ROW><id>11820104</id><snippet>$iv</snippet></ROW><ROW><id>11820104</id><snippet>0x30</snippet></ROW><ROW><id>11820104</id><snippet>iv</snippet></ROW><ROW><id>11820104</id><snippet>0x00</snippet></ROW><ROW><id>11820104</id><snippet>b64encode</snippet></ROW><ROW><id>11820104</id><snippet>b64decode</snippet></ROW><ROW><id>11820371</id><snippet>blues = plt.get_cmap('Blues')  # this returns a colormap
color = blues(1 - float(i)/(len(raw)-1)) # blues(x) returns a color for each x between 0.0 and 1.0
</snippet></ROW><ROW><id>11820371</id><snippet>fig.add_subplots(row, columns, n)</snippet></ROW><ROW><id>11820371</id><snippet>fig = plt.figure()
ax[1] = fig.add_subplot(3, 2, 1) # 3x2 grid, 1st plot
...
ax[6] = fig.add_subplot(3, 2, 6) # 3x2 grid, 6th plot
</snippet></ROW><ROW><id>11820371</id><snippet>import matplotlib.pyplot as plt
import numpy as np

raw = range(20)
mls = range(20)
ax = {}
blues = plt.get_cmap('Blues')
reds = plt.get_cmap('Reds')
greens = plt.get_cmap('Greens')

fig = plt.figure()

ax[1] = fig.add_subplot(3, 2, 1)
ax[1].set_title('Raw SIFs')
ax[1].grid(True)
ax[1].set_ylabel('K_I')

ax[3] = fig.add_subplot(3, 2, 3)
ax[3].grid(True)
ax[3].set_ylabel('K_II')

ax[5] = fig.add_subplot(3, 2, 5)
ax[5].grid(True)
ax[5].set_xlabel('Vertex')
ax[5].set_ylabel('K_III')

ax[2] = fig.add_subplot(3, 2, 2)
ax[2].set_title('MLS SIFs')
ax[2].grid(True)
ax[2].set_ylabel('K_I')

ax[4] = fig.add_subplot(3, 2, 4)
ax[4].grid(True)
ax[4].set_ylabel('K_II')

ax[6] = fig.add_subplot(3, 2, 6)
ax[6].grid(True)
ax[6].set_xlabel('Vertex')
ax[6].set_ylabel('K_III')

for i, raw_step in enumerate(raw):
    Raw_Vertex = np.arange(10)
    Raw_KI = Raw_Vertex*(i+1)
    Raw_KII = Raw_Vertex*(i+1)
    Raw_KIII = Raw_Vertex*(i+1)
    ax[1].plot(Raw_Vertex, Raw_KI, 'o-', color = blues(1 - float(i)/(len(raw)-1)))
    ax[3].plot(Raw_Vertex, Raw_KII, 'o-', color = greens(1 - float(i)/(len(raw)-1)))
    ax[5].plot(Raw_Vertex, Raw_KIII, 'o-', color = reds(1 - float(i)/(len(raw)-1)))

for i, mls_step in enumerate(mls):
    MLS_Vertex = np.arange(10)
    MLS_KI = MLS_Vertex**2*(i+1)
    MLS_KII = MLS_Vertex**2*(i+1)
    MLS_KIII = Raw_Vertex**2*(i+1)

    ax[2].plot(MLS_Vertex, MLS_KI, 'o-', color = blues(1 - float(i)/(len(mls)-1)))
    ax[4].plot(MLS_Vertex, MLS_KII, 'o-', color = greens(1 - float(i)/(len(mls)-1)))
    ax[6].plot(MLS_Vertex, MLS_KIII, 'o-', color = reds(1 - float(i)/(len(mls)-1)))

plt.show()
</snippet></ROW><ROW><id>11820655</id><snippet>result = cache.get(cache_key)
if not result:
    result = filter_result()
    cache.set(cache_key, result, cache_time)

counter, college_user, name_college_list = result
</snippet></ROW><ROW><id>11820698</id><snippet>sudo pip uninstall pil
sudo pip install pil
</snippet></ROW><ROW><id>11820852</id><snippet>str2</snippet></ROW><ROW><id>11820852</id><snippet>str2 = ''
while c&lt;b:
    str2 += str1[c]
    c+=1

print str2
</snippet></ROW><ROW><id>11820852</id><snippet>str2</snippet></ROW><ROW><id>11820852</id><snippet>def myfunc(str2=''):
    while c&lt;b:
        str2 += str1[c]
        c+=1

    return str2
</snippet></ROW><ROW><id>11820852</id><snippet>str2</snippet></ROW><ROW><id>11820852</id><snippet>''</snippet></ROW><ROW><id>11820866</id><snippet>writer.writerow([some_float1, some_float2] + alist)
</snippet></ROW><ROW><id>11820887</id><snippet>&gt;&gt;&gt; A = (0, 1, 2)
&gt;&gt;&gt; B = (0, 3, 1, 4, 2)
&gt;&gt;&gt; b_iter = iter(B)
&gt;&gt;&gt; all(a in b_iter for a in A)
True
</snippet></ROW><ROW><id>11820911</id><snippet>instReading</snippet></ROW><ROW><id>11820911</id><snippet>....execute(..., instReading)
</snippet></ROW><ROW><id>11820915</id><snippet>writeToLog</snippet></ROW><ROW><id>11820915</id><snippet>after</snippet></ROW><ROW><id>11820947</id><snippet>done</snippet></ROW><ROW><id>11820947</id><snippet>done = 0
</snippet></ROW><ROW><id>11820947</id><snippet>while not done:
</snippet></ROW><ROW><id>11820947</id><snippet>break</snippet></ROW><ROW><id>11820947</id><snippet>if name == "done":
</snippet></ROW><ROW><id>11820947</id><snippet>done</snippet></ROW><ROW><id>11820947</id><snippet>done</snippet></ROW><ROW><id>11821212</id><snippet>curs.execute("SELECT * FROM tracks WHERE ISRC = ?", (line[8],))
</snippet></ROW><ROW><id>11821301</id><snippet>&gt;&gt;&gt; re.match('TV-[0-9]+','TV-12VX').group(0)
'TV-12'
</snippet></ROW><ROW><id>11821301</id><snippet>match</snippet></ROW><ROW><id>11821343</id><snippet>import json

with open('my_dict.json', 'w') as f:
    json.dump(my_dict, f)

# elsewhere...

with open('my_dict.json') as f:
    my_dict = json.load(f)
</snippet></ROW><ROW><id>11821343</id><snippet>pickle</snippet></ROW><ROW><id>11821510</id><snippet>$ cat testlog.py
import logging
logging.basicConfig(filename='foo', level=logging.DEBUG)
root_logger = logging.getLogger()
root_logger.debug('bar')

my_logger = logging.getLogger('my_logger')
FORMAT = "%(process)s %(thread)s: %(message)s"
formatter = logging.Formatter(fmt=FORMAT)
handler = logging.StreamHandler()
handler.setFormatter(formatter)

my_logger.addHandler(handler)
my_logger.setLevel(logging.DEBUG)
my_logger.info('baz')

my_logger.propagate = False
my_logger.info('foobar')

my_logger.propagate = True
my_logger.info('foobaz')
root_logger.handlers = []
my_logger.info('barbaz')

$ python testlog.py
5927 140735224465760: baz
5927 140735224465760: foobar
5927 140735224465760: foobaz
5927 140735224465760: barbaz

$ cat foo
DEBUG:root:bar
INFO:my_logger:baz
INFO:my_logger:foobaz
</snippet></ROW><ROW><id>11821871</id><snippet>add_balancetransfer()</snippet></ROW><ROW><id>11821871</id><snippet>import pdb; pdb.set_trace()</snippet></ROW><ROW><id>11821871</id><snippet>add_balancetransfer()</snippet></ROW><ROW><id>11821871</id><snippet>save()</snippet></ROW><ROW><id>11821871</id><snippet>post_save</snippet></ROW><ROW><id>11821871</id><snippet>from django.db.models.signals import post_save
from django.dispatch import receiver

from yourapp.models import CreditCardIssuer

@receiver(post_save, sender=CreditCardIssuer)
def add_missing_relationship(sender, **kwargs):
    # Add the other side of what should be a symmetrical relationship
    ...
</snippet></ROW><ROW><id>11821872</id><snippet>cdef float* cVerts = []
    for i in xrange(len(verts)):
        cVerts[i] = verts[i]
setOverlays(cVerts)
</snippet></ROW><ROW><id>11821936</id><snippet>admin.py</snippet></ROW><ROW><id>11821936</id><snippet>from admin.site.register(Post)
</snippet></ROW><ROW><id>11821936</id><snippet>admin.site.register(Post)
</snippet></ROW><ROW><id>11821936</id><snippet>from</snippet></ROW><ROW><id>11821936</id><snippet>from django.contrib import admin
</snippet></ROW><ROW><id>11821936</id><snippet>admin</snippet></ROW><ROW><id>11821945</id><snippet>&lt;type 'str'&gt;</snippet></ROW><ROW><id>11821945</id><snippet>print '&lt;p&gt;[%s]'%type('apple') # ★ I add this line
</snippet></ROW><ROW><id>11821945</id><snippet>hstr = "%s"%type('apple')
hstr = hstr.replace('&lt;','&lt;').replace('&gt;','&gt;')
print '&lt;p&gt;[%s]'%hstr
</snippet></ROW><ROW><id>11822089</id><snippet>__init__</snippet></ROW><ROW><id>11822089</id><snippet>__str__</snippet></ROW><ROW><id>11822089</id><snippet>my_tank = Tank("Bob")
</snippet></ROW><ROW><id>11822100</id><snippet>myobject.__dict__[somekey] = [1, 2, 3]</snippet></ROW><ROW><id>11822100</id><snippet>__dict__</snippet></ROW><ROW><id>11822443</id><snippet>true_expr if cond else false_expr</snippet></ROW><ROW><id>11822593</id><snippet>db.autocommit(True)</snippet></ROW><ROW><id>11822850</id><snippet>OpenerDirector</snippet></ROW><ROW><id>11822850</id><snippet>socket.shutdown()</snippet></ROW><ROW><id>11822850</id><snippet>OpenerDirector</snippet></ROW><ROW><id>11822850</id><snippet>socket.shutdown()</snippet></ROW><ROW><id>11823039</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub('\s+', '', sample_html_string)
'&lt;html&gt;&lt;title&gt;Hello&lt;/title&gt;&lt;/html&gt;"'
</snippet></ROW><ROW><id>11823039</id><snippet>\n</snippet></ROW><ROW><id>11823039</id><snippet>replace</snippet></ROW><ROW><id>11823039</id><snippet>&gt;&gt;&gt; sample_html_string.replace('\n', '')
</snippet></ROW><ROW><id>11823047</id><snippet>- project
| - module_name
  | - submodule.py
| - tests
  | requirements.txt
  | test_submodule.py
| - requirements.txt
</snippet></ROW><ROW><id>11823047</id><snippet> $ virtualenv env  # create virtualenv
 $ env/bin/activate  # activate virtualenv
 $ pip install -r requirements.txt  # install project requirements
 $ pip install -r tests/requirements.txt  # install testing requirements
 $ py.test  # if you use pytest
</snippet></ROW><ROW><id>11823368</id><snippet>&gt;&gt;&gt; data = [ [1, "data1"], [1, "data2"], [2, "moredata"], [2, "stuff"],
...   [2, "things"], [2, "foo"], [3, "bar"], [4, "baz"] ]
&gt;&gt;&gt;
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt;
&gt;&gt;&gt; def process_data(key, keydata):
...     print key, ':', keydata
...
&gt;&gt;&gt; for key,keydata in groupby(data, key=itemgetter(0)):
...   process_data(key, [d[1] for d in keydata])
...
1 : ['data1', 'data2']
2 : ['moredata', 'stuff', 'things', 'foo']
3 : ['bar']
4 : ['baz']
</snippet></ROW><ROW><id>11823368</id><snippet>(key,itemgenerator)</snippet></ROW><ROW><id>11823415</id><snippet>Counter</snippet></ROW><ROW><id>11823415</id><snippet>itertools.chain</snippet></ROW><ROW><id>11823415</id><snippet>cnt = Counter(chain.from_iterable(substrings(line, 4) for line in lines))
cnt.most_common(2000)
</snippet></ROW><ROW><id>11823415</id><snippet>def substrings(s, min_length=1):
   for length in range(min_length, len(s)+1):
     for start in range(len(s) - min_length + 1):
        yield s[start:start+length]
</snippet></ROW><ROW><id>11823515</id><snippet>serial.Serial</snippet></ROW><ROW><id>11823515</id><snippet>ser = serial.Serial(
    port='com3',
    baudrate=19200,
    parity=serial.PARITY_NONE,
    stopbits=serial.STOPBITS_ONE,
    bytesize=serial.EIGHTBITS,
    timeout=3, # &lt;------ read timeout in seconds (can be floating)
    writeTimeout=3, # &lt;-------------- write timeout in seconds (can be floating
}
</snippet></ROW><ROW><id>11823651</id><snippet>filename = 'actions.email'
mod = __import__(filename)
VAR = getattr(mod, 'email')
VAR.OpenEmail()
</snippet></ROW><ROW><id>11824189</id><snippet>libmysqlclient.18.dylib</snippet></ROW><ROW><id>11824189</id><snippet>/usr/sbin/envvars</snippet></ROW><ROW><id>11824189</id><snippet>DYLD_LIBRARY_PATH="/usr/lib:/usr/local/mysql/lib:$DYLD_LIBRARY_PATH"
</snippet></ROW><ROW><id>11824189</id><snippet>DYLD_RUN_PATH</snippet></ROW><ROW><id>11824189</id><snippet>DYLD_LIBRARY_PATH</snippet></ROW><ROW><id>11824403</id><snippet>return</snippet></ROW><ROW><id>11824403</id><snippet>def _tot_get_deposit(self, cr, uid, ids, name, arg, context=None):
    res = {}
    results = []
    for deposit in self.browse(cr, uid, ids, context=context):
        sum = 0.0
        sum = A - B
        results.append( sum )
    return (res,results)
</snippet></ROW><ROW><id>11824651</id><snippet>import Image, cv
pi = Image.open('building.jpg')       # PIL image
cv_im = cv.CreateImageHeader(pi.size, cv.IPL_DEPTH_8U, 3)
cv.SetData(cv_im, pi.tostring())
</snippet></ROW><ROW><id>11824891</id><snippet>styleN = styles["Normal"]

data = []
table_row = ['ID', 'Some Information']
data.append(table_row)

table_row = []
table_row.append(Paragraph(object.ID, styleN))
paragraphs = []
info1 = Paragraph(object.some_information1, styleN)
info2 = Paragraph(object.some_information2, styleN)
paragraphs.append(info1)
paragraphs.append(info2)

table_row.append(info_paragraphs)

data.append(table_row)
t = Table(data, (6*cm,6*cm,2*cm,2*cm,2*cm), None, style=ts)
</snippet></ROW><ROW><id>11825200</id><snippet>printer</snippet></ROW><ROW><id>11825200</id><snippet>coru.send("hello")
</snippet></ROW><ROW><id>11825200</id><snippet>tmp = (yield)
</snippet></ROW><ROW><id>11825200</id><snippet>tmp</snippet></ROW><ROW><id>11825200</id><snippet>print tmp
</snippet></ROW><ROW><id>11825200</id><snippet>StopIteration</snippet></ROW><ROW><id>11825200</id><snippet>printer</snippet></ROW><ROW><id>11825200</id><snippet>while 1</snippet></ROW><ROW><id>11825200</id><snippet>StopIteration</snippet></ROW><ROW><id>11825200</id><snippet>printer</snippet></ROW><ROW><id>11825200</id><snippet>yield</snippet></ROW><ROW><id>11825200</id><snippet>tmp = (yield)
</snippet></ROW><ROW><id>11825200</id><snippet>send</snippet></ROW><ROW><id>11825200</id><snippet>yield</snippet></ROW><ROW><id>11825200</id><snippet>None</snippet></ROW><ROW><id>11825200</id><snippet>sender</snippet></ROW><ROW><id>11825200</id><snippet>print "I'm sender"
</snippet></ROW><ROW><id>11825200</id><snippet>yield from</snippet></ROW><ROW><id>11825200</id><snippet>send</snippet></ROW><ROW><id>11825200</id><snippet>throw</snippet></ROW><ROW><id>11825478</id><snippet>P</snippet></ROW><ROW><id>11825478</id><snippet>def P():
    load_variables(x=2)
    return x

dis.dis(P)
  2           0 LOAD_GLOBAL              0 (load_variables)
              3 LOAD_CONST               1 ('x')
              6 LOAD_CONST               2 (2)
              9 CALL_FUNCTION          256
             12 POP_TOP             

  3          13 LOAD_GLOBAL              1 (x)
             16 RETURN_VALUE        
</snippet></ROW><ROW><id>11825478</id><snippet>x</snippet></ROW><ROW><id>11825478</id><snippet>P</snippet></ROW><ROW><id>11825478</id><snippet>load_variables</snippet></ROW><ROW><id>11825478</id><snippet>x, y, z = load_variables(...)
</snippet></ROW><ROW><id>11825557</id><snippet>/usr/lib/python2.6/site-packages</snippet></ROW><ROW><id>11825557</id><snippet>dist-packages</snippet></ROW><ROW><id>11825632</id><snippet>def do_something():
    """
    @rtype: list of SomeClass
    """
    pass
</snippet></ROW><ROW><id>11825632</id><snippet>SomeClass</snippet></ROW><ROW><id>11825632</id><snippet>list</snippet></ROW><ROW><id>11825972</id><snippet>os.listdir</snippet></ROW><ROW><id>11825972</id><snippet>os.path.join</snippet></ROW><ROW><id>11825972</id><snippet>for filename in files:
    file_ext = os.path.splitext(filename)[1]
    if old_ext == file_ext:
        newfile = filename.replace(old_ext, new_ext)
        os.rename(
            os.path.join(work_dir, filename), 
            os.path.join(work_dir, newfile))
</snippet></ROW><ROW><id>11826089</id><snippet>struct.unpack("h", x)
</snippet></ROW><ROW><id>11826089</id><snippet>int</snippet></ROW><ROW><id>11826089</id><snippet>EF1D</snippet></ROW><ROW><id>11826089</id><snippet>x=ser.read(2)</snippet></ROW><ROW><id>11826089</id><snippet>struct</snippet></ROW><ROW><id>11826089</id><snippet>short</snippet></ROW><ROW><id>11826089</id><snippet>unsigned short</snippet></ROW><ROW><id>11826089</id><snippet>struct.unpack</snippet></ROW><ROW><id>11826089</id><snippet>w=int(x, 16)</snippet></ROW><ROW><id>11826089</id><snippet>w = struct.unpack("h", x)[0]</snippet></ROW><ROW><id>11826089</id><snippet>w = struct.unpack("H", x)[0]</snippet></ROW><ROW><id>11826187</id><snippet>tag == True
tag == False
</snippet></ROW><ROW><id>11826187</id><snippet>tag = True
</snippet></ROW><ROW><id>11826315</id><snippet>bookmark_list</snippet></ROW><ROW><id>11826315</id><snippet>doc = lh.parse("http://pastebin.com/raw.php?i=1WpFAfCt")
text = doc.xpath("//*[@id='bookmark_list']/*/div[3]/a/text()")
len(text) # =&gt; 40
</snippet></ROW><ROW><id>11826408</id><snippet>None</snippet></ROW><ROW><id>11826437</id><snippet>builder = EnvironBuilder(method='POST', data={'foo': 'this is some text',
...      'file': (StringIO('my file contents'), 'test.txt')})
</snippet></ROW><ROW><id>11826600</id><snippet>from PySide.QtCore import *
from PySide.QtGui import *

class MainWindow(QWidget):
    def __init__(self):
        QWidget.__init__(self)

        self.layout=QVBoxLayout()
        self.setLayout(self.layout)


        self.checkbox=QCheckBox("Layouts")
        self.layout.addWidget(self.checkbox)


        self.widget1=QWidget()
        self.layout.addWidget(self.widget1)

        self.layout1=QVBoxLayout()
        self.widget1.setLayout(self.layout1)

        self.layout1.addWidget(QLabel("First layout"))

        self.layout1.addWidget(QTextEdit())


        self.widget2=QWidget()
        self.layout.addWidget(self.widget2)

        self.layout2=QHBoxLayout()
        self.widget2.setLayout(self.layout2)

        self.layout2.addWidget(QTextEdit("Second layout"))

        self.layout2.addWidget(QTextEdit())


        self.checkbox.toggled.connect(self.checkbox_toggled)
        self.checkbox.toggle()

        self.show()

    def checkbox_toggled(self, state):
        self.widget1.setVisible(state)
        self.widget2.setVisible(not state)

app=QApplication([])
mw=MainWindow()
app.exec_()
</snippet></ROW><ROW><id>11826678</id><snippet>import time
import inspect
import functools

def sleep(f):
    @functools.wraps(f)    
    def wrapper(*args, **kwargs):
        result = f(*args, **kwargs)
        time.sleep(0.1)
        return result
    return wrapper

def sleeper(cls):
    for name, method in inspect.getmembers(cls, inspect.ismethod):
        setattr(cls, name, sleep(method))
    return cls

@sleeper
class Foo(object):
   def __init__(self, a, b):
       self.a = a
       self.b = b
   def printer(self, arg):
       print arg


f = Foo(1,2)
f.printer('hi')
</snippet></ROW><ROW><id>11827020</id><snippet>print</snippet></ROW><ROW><id>11827020</id><snippet>result = function_call(params)
print(result) if result else None
</snippet></ROW><ROW><id>11827020</id><snippet>[print(result) for result in generator_call(params) if result]
</snippet></ROW><ROW><id>11827020</id><snippet>[print(result) for result in (function_call(params), ) if result]
</snippet></ROW><ROW><id>11827020</id><snippet>lambda</snippet></ROW><ROW><id>11827020</id><snippet>(lambda result: print(result) if result else None)(function_call(params))
</snippet></ROW><ROW><id>11827052</id><snippet>a</snippet></ROW><ROW><id>11827052</id><snippet>np.fmax(a, 1e-15, a)
</snippet></ROW><ROW><id>11827052</id><snippet>a</snippet></ROW><ROW><id>11827052</id><snippet>1e-15</snippet></ROW><ROW><id>11827052</id><snippet>a</snippet></ROW><ROW><id>11827875</id><snippet>rstrip</snippet></ROW><ROW><id>11827875</id><snippet>thelist.append(line.rstrip())
</snippet></ROW><ROW><id>11827875</id><snippet>with open('text.txt', 'rU') as inputfile:
    thelist = [x.rstrip() for x in inputfile]
</snippet></ROW><ROW><id>11828000</id><snippet>ipaddr</snippet></ROW><ROW><id>11828000</id><snippet>import ipaddr
import sys

try:
   ip = ipaddr.IPAddress(sys.argv[1])
   print '%s is a correct IP%s address.' % (ip, ip.version)
except ValueError:
   print 'address/netmask is invalid: %s' % sys.argv[1]
except:
   print 'Usage : %s  ip' % sys.argv[0]
</snippet></ROW><ROW><id>11828000</id><snippet>socket</snippet></ROW><ROW><id>11828000</id><snippet>import socket

try:
    socket.inet_aton(addr)
    print "ipv4 address"
except socket.error:
    print "not ipv4 address"
</snippet></ROW><ROW><id>11828000</id><snippet>socket.inet_pton(socket.AF_INET6, address)</snippet></ROW><ROW><id>11828000</id><snippet>inet_aton</snippet></ROW><ROW><id>11828000</id><snippet>10</snippet></ROW><ROW><id>11828000</id><snippet>127</snippet></ROW><ROW><id>11828266</id><snippet>a</snippet></ROW><ROW><id>11828266</id><snippet>0</snippet></ROW><ROW><id>11828266</id><snippet>b</snippet></ROW><ROW><id>11828266</id><snippet>1</snippet></ROW><ROW><id>11828266</id><snippet>a_t = np.vstack((a, np.zeros_like(a)))
b_t = np.vstack((b, np.ones_like(b)))
</snippet></ROW><ROW><id>11828266</id><snippet>c = np.hstack((a_t, b_t))[:, np.argsort(np.hstack((a, b)))]
array([[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 13, 14, 15, 17, 19, 21, 23],
       [ 0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  1,  1,  1,  0,  1,  1,  1]])
</snippet></ROW><ROW><id>11828266</id><snippet>a</snippet></ROW><ROW><id>11828266</id><snippet>b</snippet></ROW><ROW><id>11828266</id><snippet>0</snippet></ROW><ROW><id>11828266</id><snippet>a</snippet></ROW><ROW><id>11828266</id><snippet>1</snippet></ROW><ROW><id>11828266</id><snippet>b</snippet></ROW><ROW><id>11828266</id><snippet>c[:, np.concatenate(([True], c[1, 1:] != c[1, :-1]))][0]
array([ 1,  5,  7, 13, 17, 19])
</snippet></ROW><ROW><id>11828266</id><snippet>ab = np.hstack((a, b))
s = np.argsort(ab)
t = np.hstack((np.zeros_like(a), np.ones_like(b)))[s]
ab[s][np.concatenate(([True], t[1:] != t[:-1]))]
array([ 1,  5,  7, 13, 17, 19])
</snippet></ROW><ROW><id>11828413</id><snippet>class MyRequestHandler(tornado.web.RequestHandler):
    def initialize(self):
        self.supported_path = ['path_a', 'path_b', 'path_c']

    def prepare(self):
        action = self.request.path.split('/')[-1]
        if action not in self.supported_path:
            self.send_error(400)


    def get(self, action):
        #real code goes here

    def post(self, action):
        #real code goes here
</snippet></ROW><ROW><id>11828413</id><snippet>request</snippet></ROW><ROW><id>11828417</id><snippet>*.*</snippet></ROW><ROW><id>11828417</id><snippet>*</snippet></ROW><ROW><id>11828489</id><snippet>partial</snippet></ROW><ROW><id>11828489</id><snippet>g1(x, y, z)
</snippet></ROW><ROW><id>11828489</id><snippet>f(*secondary_args, x, y, z, **secondary_kwargs)
</snippet></ROW><ROW><id>11828489</id><snippet>partial</snippet></ROW><ROW><id>11828489</id><snippet>lambda</snippet></ROW><ROW><id>11828663</id><snippet>@decorator(dec_args)
def foo(args):
    pass
</snippet></ROW><ROW><id>11828663</id><snippet>def foo(args):
    pass
foo = decorator(dec_args)(foo)
</snippet></ROW><ROW><id>11828663</id><snippet>def multi_property(prop, *names):
    def inner(cls):
        for name in names:
            setattr(cls, name, property(lambda self, name=name: prop(self, name)))
    return inner

@multi_property(prop, 'a', 'b')
class Test:
    pass
</snippet></ROW><ROW><id>11828663</id><snippet>a = forward_property('ref', 'a')
b = forward_property('ref', 'b')
</snippet></ROW><ROW><id>11828663</id><snippet>forward_property</snippet></ROW><ROW><id>11829457</id><snippet>Counter(x for sublist in my_list for x in sublist)
</snippet></ROW><ROW><id>11829457</id><snippet>Counter(sublist[0] for sublist in my_list)
</snippet></ROW><ROW><id>11829457</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; my_list=[['a','b','c','d'],['a','b','z','d'],['a','c','f','e'],['d','w','f','a']]
&gt;&gt;&gt; Counter(x for sublist in my_list for x in sublist)
Counter({'a': 4, 'd': 3, 'c': 2, 'b': 2, 'f': 2, 'e': 1, 'w': 1, 'z': 1})
&gt;&gt;&gt; Counter(sublist[0] for sublist in my_list)
Counter({'a': 3, 'd': 1})
</snippet></ROW><ROW><id>11829560</id><snippet>request.environ</snippet></ROW><ROW><id>11829560</id><snippet>print request.environ['wsgi.url_scheme']
</snippet></ROW><ROW><id>11829596</id><snippet>class dictholder():
    def __init__(self):
        self.dict = {}

    def add(self, name, time):
        if name in self.dict:
            if (abs(time) - abs(self.dict[name][0]) &lt; 2):
                self.dict[name][1] += 1
                self.dict[name][0] = time
                if self.dict[name][1] == 3:
                    del self.dict[name]
        else:
            self.dict[name] = [time, 1]
        for item in self.dict:
            if (abs(time) - abs(self.dict[item][0]) &gt; 2):
                self.dict[item][1] = 1

    def get(self):
        return self.dict
</snippet></ROW><ROW><id>11829596</id><snippet>d = dictholder()
d.add("Santa", 1.2)
d.add("Jim", 2.5)
d.add("Santa", 2.7)
d.add("Santa", 2.9)

print d.get()

&gt;&gt;&gt; 
{'Jim': [2.5, 1]}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11829718</id><snippet>def process_block( redis_client, block, value ):
    with redis_client.pipeline() as pipe:
        while True:
            try:
                pipe.watch( block )
                to_set = [ for x in block if pipe.exists(x) ]
                if to_set:
                    pipe.multi()
                    for x in to_set:
                        pipe.set( x, value )
                    pipe.execute()
                break
            except redis.WatchError:
                continue
            finally:
                pipe.reset()
</snippet></ROW><ROW><id>11829950</id><snippet>sqlite3</snippet></ROW><ROW><id>11829950</id><snippet>sqlite3</snippet></ROW><ROW><id>11830085</id><snippet>dict.has_key()</snippet></ROW><ROW><id>11830085</id><snippet>in</snippet></ROW><ROW><id>11830085</id><snippet>if (x, y) in my_dict:
    # whatever
</snippet></ROW><ROW><id>11830085</id><snippet>tuple</snippet></ROW><ROW><id>11830365</id><snippet>print hjemmesidelink['href']
</snippet></ROW><ROW><id>11830365</id><snippet>if hjemmesidelink:
    print hjemmesidelink['href']
</snippet></ROW><ROW><id>11830365</id><snippet>if hjemmesidelink:</snippet></ROW><ROW><id>11830365</id><snippet>hjemmesidelink</snippet></ROW><ROW><id>11830365</id><snippet>&gt;&gt;&gt; 
http://www.albertslund.dk
http://www.alleroed.dk
http://www.assens.dk
http://www.ballerup.dk
http://www.billund.dk
http://www.brk.dk
http://www.brondby.dk
http://www.broenderslev.dk
http://www.dragoer.dk
</snippet></ROW><ROW><id>11830535</id><snippet>d = numpy.array([a, b, c]).T.flatten()
</snippet></ROW><ROW><id>11830535</id><snippet>numpy.vstack()</snippet></ROW><ROW><id>11830535</id><snippet>d = numpy.vstack((a, b, c)).T.flatten()
</snippet></ROW><ROW><id>11830535</id><snippet>d = numpy.empty((len(a), 3), dtype=a.dtype)
d[:, 0], d[:, 1], d[:, 2] = a, b, c
d = d.ravel()
</snippet></ROW><ROW><id>11830535</id><snippet>ravel()</snippet></ROW><ROW><id>11830535</id><snippet>In [1]: a = numpy.arange(0, 30000, 3)
In [2]: b = numpy.arange(1, 30000, 3)
In [3]: c = numpy.arange(2, 30000, 3)
In [4]: def f(a, b, c):
   ...:     d = numpy.empty((len(a), 3), dtype=a.dtype)
   ...:     d[:, 0], d[:, 1], d[:, 2] = a, b, c
   ...:     return d.ravel()
   ...: 
In [5]: def g(a, b, c):
   ...:     return numpy.vstack((a, b, c)).T.ravel()
   ...: 
In [6]: %timeit f(a, b, c)
10000 loops, best of 3: 34.4 us per loop
In [7]: %timeit g(a, b, c)
10000 loops, best of 3: 177 us per loop
</snippet></ROW><ROW><id>11830554</id><snippet>()</snippet></ROW><ROW><id>11830554</id><snippet>print_all</snippet></ROW><ROW><id>11830554</id><snippet>print f.read    # this prints out the object reference
</snippet></ROW><ROW><id>11830554</id><snippet>print f.read()  # this calls the function
</snippet></ROW><ROW><id>11830610</id><snippet>#Incorrect file
from app import app
app.run()

#This is the corrected working file
    from app import app
    if __name__ == "__main__": #Need this line for Openshift
        app.run()
</snippet></ROW><ROW><id>11830678</id><snippet>test2()</snippet></ROW><ROW><id>11830678</id><snippet>def test2():
    tmp2=yield
    print 56
    try:
        gv2.send(1) # this is the offending line
    except StopIteration:
        pass
    tmp1=yield
    print 78
</snippet></ROW><ROW><id>11830678</id><snippet>send()</snippet></ROW><ROW><id>11830678</id><snippet>test2()</snippet></ROW><ROW><id>11830678</id><snippet>gv1.send(1)</snippet></ROW><ROW><id>11830678</id><snippet>gv1.send(1)</snippet></ROW><ROW><id>11830678</id><snippet>gv1.send(1)</snippet></ROW><ROW><id>11830678</id><snippet>gv1</snippet></ROW><ROW><id>11830678</id><snippet>gv1</snippet></ROW><ROW><id>11830678</id><snippet>gv2.send(1)</snippet></ROW><ROW><id>11830678</id><snippet>gv2</snippet></ROW><ROW><id>11830678</id><snippet>gv2</snippet></ROW><ROW><id>11830678</id><snippet>gv1.send(1)</snippet></ROW><ROW><id>11830678</id><snippet>gv1</snippet></ROW><ROW><id>11830678</id><snippet>gv1</snippet></ROW><ROW><id>11830678</id><snippet>yield</snippet></ROW><ROW><id>11830678</id><snippet>.switch()</snippet></ROW><ROW><id>11830678</id><snippet>yield</snippet></ROW><ROW><id>11830678</id><snippet>next()</snippet></ROW><ROW><id>11830678</id><snippet>send()</snippet></ROW><ROW><id>11830678</id><snippet>gv2</snippet></ROW><ROW><id>11830678</id><snippet>test2</snippet></ROW><ROW><id>11830678</id><snippet>test2()</snippet></ROW><ROW><id>11830699</id><snippet>_cachedf()</snippet></ROW><ROW><id>11830699</id><snippet>cache</snippet></ROW><ROW><id>11830699</id><snippet>cache</snippet></ROW><ROW><id>11830699</id><snippet>def f():
    a = []
    def g():
        a.append(1)
        return len(a)
    return g
</snippet></ROW><ROW><id>11830699</id><snippet>&gt;&gt;&gt; h = f()
&gt;&gt;&gt; h()
1
&gt;&gt;&gt; h()
2
&gt;&gt;&gt; h()
3
</snippet></ROW><ROW><id>11830699</id><snippet>f()</snippet></ROW><ROW><id>11830699</id><snippet>g()</snippet></ROW><ROW><id>11830699</id><snippet>a</snippet></ROW><ROW><id>11830699</id><snippet>f()</snippet></ROW><ROW><id>11830699</id><snippet>a</snippet></ROW><ROW><id>11830699</id><snippet>f.__code__.co_cellvars</snippet></ROW><ROW><id>11830699</id><snippet>f()</snippet></ROW><ROW><id>11830699</id><snippet>a</snippet></ROW><ROW><id>11830699</id><snippet>g</snippet></ROW><ROW><id>11830699</id><snippet>g()</snippet></ROW><ROW><id>11830699</id><snippet>f()</snippet></ROW><ROW><id>11830699</id><snippet>a</snippet></ROW><ROW><id>11830699</id><snippet>f()</snippet></ROW><ROW><id>11830699</id><snippet>a</snippet></ROW><ROW><id>11830699</id><snippet>g()</snippet></ROW><ROW><id>11830699</id><snippet>f()</snippet></ROW><ROW><id>11830961</id><snippet>if s.check()==unsat:
    break
</snippet></ROW><ROW><id>11830961</id><snippet>10*x_next &lt;= 200 - t2 - 0
</snippet></ROW><ROW><id>11830961</id><snippet>10*x_next &gt;= t2 - Q(40,3) + 10*Q(56,3),
t2 - Q(40,3) &gt; 0
</snippet></ROW><ROW><id>11830961</id><snippet>Q(a, b)</snippet></ROW><ROW><id>11830961</id><snippet>a/b</snippet></ROW><ROW><id>11830961</id><snippet>t1</snippet></ROW><ROW><id>11830961</id><snippet>40/3</snippet></ROW><ROW><id>11830961</id><snippet>x</snippet></ROW><ROW><id>11830961</id><snippet>56/3</snippet></ROW><ROW><id>11830961</id><snippet>t2 &lt;= 40/3</snippet></ROW><ROW><id>11830961</id><snippet>t2 &gt; 40/3</snippet></ROW><ROW><id>11830961</id><snippet>if  [location=='off' and x_next&lt;19] :
</snippet></ROW><ROW><id>11830961</id><snippet>x_next&lt;19</snippet></ROW><ROW><id>11830961</id><snippet>True</snippet></ROW><ROW><id>11830961</id><snippet>False</snippet></ROW><ROW><id>11830961</id><snippet>x_next &lt; 19</snippet></ROW><ROW><id>11830961</id><snippet>m</snippet></ROW><ROW><id>11830961</id><snippet>if  location=='off' and is_true(m.evaluate(x_next&lt;19)) :
</snippet></ROW><ROW><id>11830961</id><snippet>m.evaluate(t)</snippet></ROW><ROW><id>11830961</id><snippet>t</snippet></ROW><ROW><id>11830961</id><snippet>m</snippet></ROW><ROW><id>11830961</id><snippet>is_true(t)</snippet></ROW><ROW><id>11830961</id><snippet>True</snippet></ROW><ROW><id>11830961</id><snippet>t</snippet></ROW><ROW><id>11831002</id><snippet>$(document).ready(function(){
    $('#alternative-group thead th:nth-child(2)').hide();
    $('#alternative-group tbody td:nth-child(1) p').hide();
    $('#alternative-group tbody td:nth-child(3)').hide();
    $('#id_alternative-0-category').hide();

    var product_category = $('#id_category option:selected').val();
    $('#id_alternative-0-category').val(product_category);

    $("#id_category").change(function() {
        product_category = $('#id_category option:selected').val();
        $('#id_alternative-0-category').val(product_category);
    });
});
</snippet></ROW><ROW><id>11831034</id><snippet>from distutils.core import setup

setup(
    name='TowelStuff',
    version='0.1dev',
    packages=['towelstuff',],
    license='Creative Commons Attribution-Noncommercial-Share Alike license',
    long_description=open('README.txt').read(),
)
</snippet></ROW><ROW><id>11831111</id><snippet>import sys
from pylab import *
from subprocess import *
from shlex import split

# some arbitrary x,y points
points = [(11,31),(13,33),(15,37),(16,35),(17,38),(18,39.55)]

commandline = 'my_unix_prog option1 option2 ....'
command = split(commandline)

process = Popen(command, stdin=PIPE, stdout=open('outfile', 'w'), stderr=PIPE)
for p in points:
    process.stdin.write(str(p[0]) + ' ' + str(p[1]) + '\n')

print process.communicate()
</snippet></ROW><ROW><id>11831599</id><snippet>import requests
import progressbar

ISO = "http://www.ubuntu.com/start-download?distro=desktop&amp;bits=32&amp;release=lts"
CHUNK_SIZE = 1024 * 1024 # 1MB

r = requests.get(ISO)
total_size = int(r.headers['content-length'])
pbar = progressbar.ProgressBar(maxval=total_size).start()

file_contents = ""
for chunk in r.iter_content(chunk_size=CHUNK_SIZE):
    file_contents += chunk
    pbar.update(len(file_contents))
</snippet></ROW><ROW><id>11831599</id><snippet>$ python requests_progress.py
 90% |############################   |
</snippet></ROW><ROW><id>11831602</id><snippet>callback = 'myproject.callbacks.foo_callback'</snippet></ROW><ROW><id>11831602</id><snippet>__getstate__</snippet></ROW><ROW><id>11831602</id><snippet>_callback</snippet></ROW><ROW><id>11831602</id><snippet>self._callback.__name__</snippet></ROW><ROW><id>11831602</id><snippet>__setstate__</snippet></ROW><ROW><id>11831602</id><snippet>_callback</snippet></ROW><ROW><id>11831602</id><snippet>__import__</snippet></ROW><ROW><id>11831602</id><snippet>def a():
    pass

callbacks_to_name = {a: 'a'
                     # ...
                     }

callbacks_by_name = {'a': a,
             # ...
             }

class C:
    def __init__(self, cb):
        self._callback = cb

    def __getstate__(self):
        self._callback = callbacks_to_name[self._callback]
        return self.__dict__

    def __setstate__(self, state):
        state[_callback] = callbacks_by_name[self._callback]
</snippet></ROW><ROW><id>11831602</id><snippet>__getstate__</snippet></ROW><ROW><id>11831602</id><snippet>__setstate__</snippet></ROW><ROW><id>11831662</id><snippet>_functoolsmodule.c</snippet></ROW><ROW><id>11831662</id><snippet>partial</snippet></ROW><ROW><id>11831662</id><snippet>repr</snippet></ROW><ROW><id>11831662</id><snippet>func</snippet></ROW><ROW><id>11831662</id><snippet>args</snippet></ROW><ROW><id>11831662</id><snippet>keywords</snippet></ROW><ROW><id>11831662</id><snippet>functools.partial</snippet></ROW><ROW><id>11831662</id><snippet>functools.partial</snippet></ROW><ROW><id>11831662</id><snippet>class rpartial(partial):
    def __call__(self, *args, **kwargs):
        kw = self.kw.copy()
        kw.update(kwargs)
        return self.func(*(args + self.args), **kwargs)
</snippet></ROW><ROW><id>11831814</id><snippet>dd</snippet></ROW><ROW><id>11831814</id><snippet>dd if=/dev/sda of=/dev/sdb bs=1024k
</snippet></ROW><ROW><id>11831814</id><snippet>1024k</snippet></ROW><ROW><id>11831858</id><snippet>DATABASES</snippet></ROW><ROW><id>11831858</id><snippet>inspectdb</snippet></ROW><ROW><id>11832147</id><snippet>doc.append(PageBreak())
</snippet></ROW><ROW><id>11832292</id><snippet>from osgeo import gdal
gdal.UseExceptions()
gdal.Open('myfile.tif")
</snippet></ROW><ROW><id>11832379</id><snippet>for x,y in d['received'].iteritems():
</snippet></ROW><ROW><id>11832379</id><snippet>itervalues</snippet></ROW><ROW><id>11832379</id><snippet>iteritems</snippet></ROW><ROW><id>11832380</id><snippet>from sqlalchemy.sql import func
qry = session.query(func.max(Score.score).label("max_score"), 
                    func.sum(Score.score).label("total_score"),
                    )
#qry = qry.group_by(Score.some_group_column)
for _res in qry.all():
    print _res
</snippet></ROW><ROW><id>11832474</id><snippet>!</snippet></ROW><ROW><id>11832474</id><snippet>$</snippet></ROW><ROW><id>11832474</id><snippet>&gt;</snippet></ROW><ROW><id>11832596</id><snippet>firstName</snippet></ROW><ROW><id>11832596</id><snippet>memberInfo = MemberInfo(firstName = self.request.get('firstName'))
</snippet></ROW><ROW><id>11832596</id><snippet>firstName</snippet></ROW><ROW><id>11832661</id><snippet>#/usr/bin/evn python

import re
zipCode = re.compile(r"\s*(\w\d\s*){3}\s*")

if __name__ == "__main__":
    samples = [
        "           44F 4 F", #Invalid
        "  L0L0L0    ", #Valid
        "  L0  L0  L0    ", #Valid
    ]

    for sample in samples:
        if zipCode.match(sample):
            print "The string %s is a valid zipCode (nice and clean: %s)" % (sample, sample.replace(" ", "").upper())
        else:
            print "The string %s is NOT a valid zipCode" % sample
</snippet></ROW><ROW><id>11832661</id><snippet>def postalValidate(S):
    S = S.upper().replace(" ", "")
    if len(S) == 6:
        for i in range(len(S)):
            if i % 2 == 0:
                #Even index (0, 2, 4, 6...) , has to be 'letter'
                if not(S[i].isalpha()):
                    return False 
            else:
                #Odd index (1, 3, 5, 7...), must be 'number'
                if not(S[i].isdigit()):
                    return False

    else:
        #You can save some cpu ticks here... at this point, the string has to be of length 6 or you know it's not a zip
        return False
    return S
</snippet></ROW><ROW><id>11832689</id><snippet>n</snippet></ROW><ROW><id>11832689</id><snippet>n*4/3</snippet></ROW><ROW><id>11832689</id><snippet>4/3</snippet></ROW><ROW><id>11832689</id><snippet>unicode</snippet></ROW><ROW><id>11832689</id><snippet>bytes</snippet></ROW><ROW><id>11832689</id><snippet>md5(salt+password)</snippet></ROW><ROW><id>11832689</id><snippet>n</snippet></ROW><ROW><id>11832689</id><snippet>n/8</snippet></ROW><ROW><id>11832689</id><snippet>n/6</snippet></ROW><ROW><id>11832800</id><snippet>Refresh</snippet></ROW><ROW><id>11832800</id><snippet>QueryTable.BackgroundQuery</snippet></ROW><ROW><id>11832800</id><snippet>False</snippet></ROW><ROW><id>11832874</id><snippet>a = [1, 3, 5, 7]
b = [2, 4, 9] 
j = 0
for i in range(len(a)):
    print a[i], b[j]
    while j&lt;len(b)-1 and b[j+1] &lt;= a[i]:
        j += 1
        print a[i], b[j]
</snippet></ROW><ROW><id>11832874</id><snippet>i</snippet></ROW><ROW><id>11832874</id><snippet>j</snippet></ROW><ROW><id>11832874</id><snippet>len(a)</snippet></ROW><ROW><id>11832874</id><snippet>a</snippet></ROW><ROW><id>11832874</id><snippet>i</snippet></ROW><ROW><id>11832874</id><snippet>range(len(a))</snippet></ROW><ROW><id>11832874</id><snippet>0</snippet></ROW><ROW><id>11832874</id><snippet>len(a)-1</snippet></ROW><ROW><id>11832874</id><snippet>a</snippet></ROW><ROW><id>11832874</id><snippet>++</snippet></ROW><ROW><id>11832874</id><snippet>j +=1</snippet></ROW><ROW><id>11832874</id><snippet>b</snippet></ROW><ROW><id>11832874</id><snippet>j</snippet></ROW><ROW><id>11832874</id><snippet>a = [1, 3, 5, 7]
b = [2, 4, 9] 
j = 0
for element in a:
   print element, b[j]
   while j&lt;len(b)-1 and b[j+1] &lt;= element:
      j += 1
      print element, b[j]
</snippet></ROW><ROW><id>11832874</id><snippet>def sync_lists(a, b)
    if b:
        j = 0
        for element in a:
            yield (element, b[j])
            while j&lt;len(b)-1 and b[j+1] &lt;= element:
                j += 1
                yield (element, b[j])
</snippet></ROW><ROW><id>11832874</id><snippet>a = [1, 3, 5, 7]
b = [2, 4, 9]
for (e1, e2) in sync_lists(a, b):
    print e1, e2
</snippet></ROW><ROW><id>11832911</id><snippet>&gt;&gt;&gt; print u'\uC815\uC815'
정정
&gt;&gt;&gt; print len(u'\uC815\uC815')
2
&gt;&gt;&gt; print len(u'\uC815\uC815'.encode('UTF-8'))
6
&gt;&gt;&gt; print len(u'\uC815\uC815'.encode('UTF-16-LE'))
4
&gt;&gt;&gt; print len(u'\uC815\uC815'.encode('UTF-16'))
6
&gt;&gt;&gt; print len(u'\uC815\uC815'.encode('UTF-32-LE'))
8
&gt;&gt;&gt; print len(u'\uC815\uC815'.encode('UTF-32'))
12
</snippet></ROW><ROW><id>11833013</id><snippet> filepath = 'yourfilename.txt'
 with open(filepath) as fh:
     mydata = fh.read()
     response = requests.put('https://api.elasticemail.com/attachments/upload',
                data=mydata,                         
                auth=('omer', 'b01ad0ce'),
                headers={'content-type':'text/plain'},
                params={'file': filepath}
                 )
</snippet></ROW><ROW><id>11833030</id><snippet>def remove_cruft(s):
    return s[4:-4]

sites=['www.hattrick.com', 'www.google.com', 'www.wampum.net', 'www.newcom.com']
[remove_cruft(s) for s in sites]
</snippet></ROW><ROW><id>11833030</id><snippet>['hattrick', 'google', 'wampum', 'newcom']
</snippet></ROW><ROW><id>11833030</id><snippet>replace</snippet></ROW><ROW><id>11833030</id><snippet>def remove_bad_substrings(s):
    badSubstrings = ["www.", ".com", ".net", ".museum"]
    for badSubstring in badSubstrings:
        s = s.replace(badSubstring, "")
    return s

sites=['www.hattrick.com', 'www.google.com', 
'www.wampum.net', 'www.newcom.com', 'smithsonian.museum']
[remove_bad_substrings(s) for s in sites]
</snippet></ROW><ROW><id>11833030</id><snippet>['hattrick', 'google', 'wampum', 'newcom', 'smithsonian']
</snippet></ROW><ROW><id>11833169</id><snippet>import pymongo

class mongoDB():  # you don't need ()'s here - only if you are inheriting classes
                  # you could inherit from object here, which is a good practice
                  # by doing class mongoDb(object):, otherwise you can just take
                  # them out

    conn = object # here, you're defining a class member - global for all instances
                  # generally, you don't instantiate an object pointer like this,
                  # you would set it to None instead.  It won't fail doing this,
                  # but it's not "right"

    def __init__(self):
        # the __init__ method is the constructor method - this will 
        # allow you to initialize a particular instance of your class, represented
        # by the self argument.  This method is called when you call the class, i.e.
        # inst = mongoDb()

        # in this case, the conn variable is not a global.  Globals are defined
        # at the root module level - so in this example, only pymongo is a global
        # conn is a class member, and would be accessed by doing mongoDB.conn
        global conn

        # with that being said, you're initializing a local variable here called conn
        # that is not being stored anywhere - when this method finishes, this variable
        # will be cleaned up from memory, what you are thinking you're doing here
        # should be written as mongoDB.conn = pymongo.Connection("localhost", 27017)
        conn = pymongo.Connection("localhost",27017)

    def CreateCollection(name =""):
        # there is one of two things you are trying to do here - 1, access a class 
        # level member called conn, or 2, access an instance member called conn

        # depending on what you are going for, there are a couple of different ways 
        # to address it.

        # all methods for a class, by default, are instance methods - and all of them
        # need to take self as the first argument.  An instance method of a class
        # will always be called with the instance first.  Your error is caused because
        # you should declare the method as:

        # def CreateCollection(self, name = ""):

        # The alternative, is to define this method as a static method of the class -
        # which does not take an instance but applies to all instances of the class
        # to do that, you would add a @staticmethod decorator before the method.

        # either way, you're attempting to access the global variable "conn" here,
        # which again does not exist

        # the second problem with this, is that you are trying to take your variable
        # argument (name) and use it as a property.  What python is doing here, is
        # looking for a member variable called name from the conn object.  What you
        # are really trying to do is create a collection on the connection with the
        # inputed name

        # the pymongo class provides access to your collections via this method as a
        # convenience around the method, create_collection.  In the case where you
        # are using a variable to create the collection, you would call this by doing

        # conn.create_collection(name)

        # but again, that assumes conn is what you think it is, which it isn't
        dbCollection  = conn.name
        return dbCollection

if __name__ == '__main__':
    # here you are just creating a pointer to your class, not instantiating it
    # you are looking for:

    # database = mongoDB()
    database = mongoDB

    # this is your error, because of the afore mentioned lack of 'self' argument
    collection = database.CreateCollection("Hello")
</snippet></ROW><ROW><id>11833169</id><snippet>import pymongo

class MongoDB: # Classes generally are camel-case, starting with uppercase
    def __init__(self, dbname):
        # the __init__ method is the class constructor, where you define
        # instance members.  We'll make conn an instance member rather
        # than a class level member
        self._conn = pymongo.Connection("localhost", 27017)
        self._db   = self._conn[dbname]

    # methods usually start with lowercase, and are either camel case (less desirable
    # by Python standards) or underscored (more desirable)
    # All instance methods require the 1st argument to be self (pointer to the
    # instance being affected)
    def createCollection(self, name=""):
        return self._db[name]

if __name__ == '__main__':
    # you want to initialize the class
    database   = MongoDB("Hello")
    collection = database.createCollection("MyTable")
</snippet></ROW><ROW><id>11833169</id><snippet>import pymongo
conn       = pymongo.Connection('localhost', 27017)
database   = conn["Hello"]
collection = database["MyTable"]
</snippet></ROW><ROW><id>11833241</id><snippet>GetAllAvailablePoses</snippet></ROW><ROW><id>11833241</id><snippet>char*</snippet></ROW><ROW><id>11833241</id><snippet># foo.pxd

XnStatus GetAllAvailablePoses(XnChar **, XnUInt32, XnUInt32&amp;)

# foo.pyx

def get_available_poses(self):
    cdef: 
        int i 
        bytes name 
        XnStatus stat
        XnUInt32 nameLength = 256
        XnUInt32 size = self.handle.GetNumberOfPoses()

    cdef XnChar **buf = &lt;XnChar**&gt;malloc(size * sizeof(XnChar*))

    if not buf:
        raise MemoryError()

    for i in range(size):
        buf[i] = &lt;XnChar*&gt;malloc(nameLength)

    out = [None]*size

    try:
        stat = self.handle.GetAllAvailablePoses(buf, nameLength, size)

        for i in range(size):
            name = &lt;char*&gt;buf[i]
            out[i] = name

    finally:
        free(buf)

    return out

# Out: ['Psi', 'CrossHandsPose', 'Wave', 'Click', 'RaiseHand', 'MovingHand']
</snippet></ROW><ROW><id>11833250</id><snippet>average_atr()</snippet></ROW><ROW><id>11833250</id><snippet>initial_list = ystockquote.get_historical_prices('symbol', 'start_date', 'end_date')
</snippet></ROW><ROW><id>11833250</id><snippet>initial_list = ystockquote.get_historical_prices(symbol, start_date, end_date)
</snippet></ROW><ROW><id>11833250</id><snippet>ystockquote.get_historical_prices()</snippet></ROW><ROW><id>11833250</id><snippet>str(int(end_date[4:6]) - 1)</snippet></ROW><ROW><id>11833250</id><snippet>end_date</snippet></ROW><ROW><id>11833250</id><snippet>'end_date'</snippet></ROW><ROW><id>11833250</id><snippet>'end_date'[4:6]</snippet></ROW><ROW><id>11833250</id><snippet>'da'</snippet></ROW><ROW><id>11833277</id><snippet>my_string.split('\n', 1)[0]
</snippet></ROW><ROW><id>11833277</id><snippet>.split()</snippet></ROW><ROW><id>11833277</id><snippet>.splitlines()</snippet></ROW><ROW><id>11833277</id><snippet>my_string.splitlines()[0]
</snippet></ROW><ROW><id>11833443</id><snippet>StringIO</snippet></ROW><ROW><id>11833443</id><snippet>cStringIO</snippet></ROW><ROW><id>11833443</id><snippet>io.StringIO</snippet></ROW><ROW><id>11833485</id><snippet>myunicode = u'\u0430\u0431\u0432'
print myunicode
print myunicode.encode('utf-8')
</snippet></ROW><ROW><id>11833485</id><snippet>абв</snippet></ROW><ROW><id>11833523</id><snippet>shift_hue()</snippet></ROW><ROW><id>11833523</id><snippet>def shift_hue(arr, hout):
    r, g, b, a = np.rollaxis(arr, axis=-1)
    h, s, v = rgb_to_hsv(r, g, b)
    h = hout
    r, g, b = hsv_to_rgb(h, s, v)
    arr = np.dstack((r, g, b, a))
    return arr
</snippet></ROW><ROW><id>11833523</id><snippet>def shift_hsv(arr, delta_h, delta_, delta_v):
    r, g, b, a = np.rollaxis(arr, axis=-1)
    h, s, v = rgb_to_hsv(r, g, b)
    h =+ delta_h
    s += delta_s
    v += delta_v
    r, g, b = hsv_to_rgb(h, s, v)
    arr = np.dstack((r, g, b, a))
    return arr
</snippet></ROW><ROW><id>11833523</id><snippet>base_h, base_s, base_v = rgb_to_hsv(base_r, base_g, base_b)
target_h, target_s, target_v = rgb_to_hsv(target_r, target_g, target_b)
delta_h, delta_s, delta_v  = target_h-base_h, target_s-base_s, target_v- base_v
</snippet></ROW><ROW><id>11833638</id><snippet>upload</snippet></ROW><ROW><id>11833638</id><snippet>upload</snippet></ROW><ROW><id>11833638</id><snippet>with open('yourfilepath.ext') as upload:
    model_instance.image_field.save(uniquename, ContentFile(upload.read()))
</snippet></ROW><ROW><id>11833638</id><snippet>upload</snippet></ROW><ROW><id>11833638</id><snippet>contextlib.closing</snippet></ROW><ROW><id>11833638</id><snippet>import contextlib
with contextlib.closing(upload):
     model_instance.image_field.save(uniquename, ContentFile(upload.read()))
</snippet></ROW><ROW><id>11833801</id><snippet>Inline::Python</snippet></ROW><ROW><id>11833801</id><snippet>Inline::C</snippet></ROW><ROW><id>11833801</id><snippet>bind</snippet></ROW><ROW><id>11833801</id><snippet>my $python_code = "
def add(x,y):
   return x + y
";
print $python_code;
Inline-&gt;bind( Python =&gt; $python_code );
print "9 + 16 = ", add(9, 16), "\n";
</snippet></ROW><ROW><id>11833811</id><snippet>&gt;&gt;&gt; try:
...     exec('x===6')
... except SyntaxError:
...     print('Hello!')
...
Hello!
</snippet></ROW><ROW><id>11834034</id><snippet>for fname in corpusReader.fileids():
    tagged = nltk.batch_pos_tag(corpusReader.sents(fname))
    out = open("tagged/"+fname, "w")
    &lt;write tagged text to &lt;out&gt;&gt;
</snippet></ROW><ROW><id>11834156</id><snippet>PlainTextCorpusReader</snippet></ROW><ROW><id>11834156</id><snippet>XMLCorpusReader</snippet></ROW><ROW><id>11834156</id><snippet>sents()</snippet></ROW><ROW><id>11834156</id><snippet>words()</snippet></ROW><ROW><id>11834365</id><snippet>SUBCASE\s+([0-9]+)
</snippet></ROW><ROW><id>11834365</id><snippet>SUBCASE\s+(\d+)
</snippet></ROW><ROW><id>11834365</id><snippet>\s+</snippet></ROW><ROW><id>11834365</id><snippet>[...]</snippet></ROW><ROW><id>11834408</id><snippet>t0 = nltk.DefaultTagger('N')
t1 = nltk.UnigramTagger(traindata, backoff=t0)
t2 = nltk.BigramTagger(traindata, backoff=t1)
</snippet></ROW><ROW><id>11834408</id><snippet>traindata</snippet></ROW><ROW><id>11834408</id><snippet>(word, tag)</snippet></ROW><ROW><id>11834408</id><snippet>traindata = [ [ ('His', 'PRO'), ('petition', 'N'), ('charged', 'VD'), 
                ('mental', 'ADJ'), ('cruelty', 'N'), ('.', '.') ],
              [ ('Two', 'NUM'), ('tax', 'N'), ('revision', 'N'), ('bills', 'N'),
                ('were', 'V'), ('passed', 'VN'), ('.', '.') ] ]
</snippet></ROW><ROW><id>11834408</id><snippet>t2</snippet></ROW><ROW><id>11834408</id><snippet>t1</snippet></ROW><ROW><id>11834408</id><snippet>t0</snippet></ROW><ROW><id>11834409</id><snippet>abstract class</snippet></ROW><ROW><id>11834409</id><snippet>API</snippet></ROW><ROW><id>11834409</id><snippet>abstract</snippet></ROW><ROW><id>11834409</id><snippet>fetch</snippet></ROW><ROW><id>11834409</id><snippet>pull</snippet></ROW><ROW><id>11834409</id><snippet>inherit</snippet></ROW><ROW><id>11834409</id><snippet>API1</snippet></ROW><ROW><id>11834409</id><snippet>API2</snippet></ROW><ROW><id>11834409</id><snippet>fetch</snippet></ROW><ROW><id>11834409</id><snippet>HTML</snippet></ROW><ROW><id>11834409</id><snippet>fetch</snippet></ROW><ROW><id>11834409</id><snippet>feedparser</snippet></ROW><ROW><id>11834409</id><snippet>XML</snippet></ROW><ROW><id>11834409</id><snippet>API</snippet></ROW><ROW><id>11834409</id><snippet>dynamic instance</snippet></ROW><ROW><id>11834409</id><snippet>function</snippet></ROW><ROW><id>11834409</id><snippet>instance</snippet></ROW><ROW><id>11834409</id><snippet>API3</snippet></ROW><ROW><id>11834409</id><snippet>content</snippet></ROW><ROW><id>11834817</id><snippet>buffer</snippet></ROW><ROW><id>11834817</id><snippet>&gt;&gt;&gt; s.execute("insert into recs (uuid) values(?)", (buffer(id), ))
&lt;sqlite3.Cursor object at 0x011CD2E0&gt;
&gt;&gt;&gt; r = s.execute("select * from recs").fetchone()
&gt;&gt;&gt; r
(&lt;read-write buffer ptr 0x011F9280, size 16 at 0x011F9260&gt;,)
&gt;&gt;&gt; r[0]
&lt;read-write buffer ptr 0x011F9280, size 16 at 0x011F9260&gt;
&gt;&gt;&gt; str(r[0])
'\xe0O\xf7\x1d\x9de\xc5O\x8b1\x0e\xddWt\x91E'
&gt;&gt;&gt; str(r[0]) == id
True
</snippet></ROW><ROW><id>11834868</id><snippet>import os

d = dict(os.environ)   # Make a copy of the current environment
d['PYRO_HMAC_KEY'] = '123'
subprocess.Popen(['python', '-m', 'Pyro4.naming'], env=d)
</snippet></ROW><ROW><id>11835159</id><snippet>input_config = unicode(input_config, "utf8")
</snippet></ROW><ROW><id>11835159</id><snippet>print configobj.ConfigObj(infile=test_config_fileio, encoding="UTF8")
</snippet></ROW><ROW><id>11835159</id><snippet>configobj</snippet></ROW><ROW><id>11835167</id><snippet>class Thing(object):
    """Generic game object with interpolation"""
    def __init__(self, x=0, y=0):
        self._x = self.x = x
        self._y = self.y = y

    def imprint(self):
        """call before changing x and y"""
        self._x = self.x
        self._y = self.y

    def __iter__(self):
        """handy to unpack like a tuple"""
        yield self.x
        yield self.y

Ship = Thing
Bullet = Thing


class Star(Thing):
    """docstring for Star"""
    def __init__(self, x, y, r):
        super(Star, self).__init__(x, y)
        self.r = r

    def __iter__(self):
        yield self.x
        yield self.y
        yield self.r


def lerp_things(things, alpha, threshold=100):
    """Expects iterables of Things"""
    for t in things:
        if sqrt((t._x - t.x) ** 2 + (t._y - t.y) ** 2) &gt; threshold:
            yield (t.x, t.y)
        else:
            yield (lerp(t._x, t.x, alpha), lerp(t._y, t.y, alpha))
</snippet></ROW><ROW><id>11835252</id><snippet>def clean_file_name(self):
    name = self.cleaned_data['file_name']
    error = ''
    if len(name) &lt; 2:
        error += 'File name is too short'
    if FileDescription.objects.filter(file_name = name).exists():
        if error:
            error += ' ' 
        error += 'File with this name already exists'
    if error:
        raise forms.ValidationError(error)
    return name
</snippet></ROW><ROW><id>11835368</id><snippet>[1]
[2]
[3]
[4]
[5]
[1,1]
[1,2]
[1,3]
[1,4]
[1,5]
[2,5]
</snippet></ROW><ROW><id>11835866</id><snippet>arr2[ arr1 != 0 ] = numpy.NaN
</snippet></ROW><ROW><id>11835866</id><snippet>arr1 = arr1.astype(float)
arr1[arr1 != 0.0] = numpy.NaN
arr1[arr1 == 0.0] = 1.0
</snippet></ROW><ROW><id>11835950</id><snippet>chmod</snippet></ROW><ROW><id>11835950</id><snippet>  File "/usr/lib/python2.7/shutil.py", line 91, in copymode
    os.chmod(dst, mode)
OSError: [Errno 1] Operation not permitted: 'bin/styles/blacktie/images/ajax-loader-000000-e3e3e3.gif'
</snippet></ROW><ROW><id>11835950</id><snippet>shutil.copy</snippet></ROW><ROW><id>11835950</id><snippet>shutil.copyfile(src, dst)</snippet></ROW><ROW><id>11835950</id><snippet>shutil.copyfile(src, os.path.join(dst, os.path.basename(src)))</snippet></ROW><ROW><id>11835950</id><snippet>dst</snippet></ROW><ROW><id>11835950</id><snippet>dst</snippet></ROW><ROW><id>11835950</id><snippet>def copy(src, dst):
    if os.path.isdir(dst):
        dst = os.path.join(dst, os.path.basename(src))
    shutil.copyfile(src, dst)
</snippet></ROW><ROW><id>11836128</id><snippet>F()</snippet></ROW><ROW><id>11836128</id><snippet>class Proposal(models.Model):
    scheduled_time = models.DateTimeField()
    duration = IntegerField()
    end = models.DateTimeField(default=self.scheduled_time + timedelta(minutes=self.duration))
</snippet></ROW><ROW><id>11836348</id><snippet>c:\python27</snippet></ROW><ROW><id>11836348</id><snippet>c:\python27\bin\python.exe</snippet></ROW><ROW><id>11836385</id><snippet>In [14]: olsresult.params
Out[14]: 
GNPDEFL           15.061872
GNP               -0.035819
UNEMP             -2.020230
ARMED             -1.033227
POP               -0.051104
YEAR            1829.151465
intercept   -3482258.634597

In [15]: dict(olsresult.params)
Out[15]: 
{'ARMED': -1.0332268671737328,
 'GNP': -0.035819179292614578,
 'GNPDEFL': 15.061872271452557,
 'POP': -0.051104105653539733,
 'UNEMP': -2.0202298038172479,
 'YEAR': 1829.151464613984,
 'intercept': -3482258.6345966831}
</snippet></ROW><ROW><id>11836385</id><snippet>.to_dict()</snippet></ROW><ROW><id>11836385</id><snippet>Series</snippet></ROW><ROW><id>11836502</id><snippet>def split(number, length):
    div, mod = divmod(number, length)
    return [div+1]*mod + [div]*(length-mod)

&gt;&gt;&gt; split(19, 5)
[4, 4, 4, 4, 3]
&gt;&gt;&gt; split(23, 4)
[6, 6, 6, 5]
</snippet></ROW><ROW><id>11836502</id><snippet>def split(number, length):
    result = [number//length]*length
    for i in range(number%length):
        result[i] += 1
    return result
</snippet></ROW><ROW><id>11836633</id><snippet>curses</snippet></ROW><ROW><id>11836633</id><snippet>termios</snippet></ROW><ROW><id>11836633</id><snippet>termios</snippet></ROW><ROW><id>11836633</id><snippet>man termios</snippet></ROW><ROW><id>11836865</id><snippet>__iadd__()</snippet></ROW><ROW><id>11836865</id><snippet>import os.path

class Path(str):
    def __iadd__(self, other):
        return Path(os.path.join(str(self), str(other)))

path = Path("C:\\")
path += "windows"

print path
</snippet></ROW><ROW><id>11837015</id><snippet>while</snippet></ROW><ROW><id>11837015</id><snippet>for</snippet></ROW><ROW><id>11837015</id><snippet>from __future__ import division
import math

function = int(raw_input("Type function no.: "))

while function &gt; 0:
    if function == 1:
        a = float(raw_input ("Enter average speed: "))
        b = float(raw_input ("Enter length of path: "))
        answer = b/a
        print "Answer=", float(answer),
    elif function == 2:
        mass_kg = int(input("What is your mass in kilograms?" ))
        mass_stone = mass_kg * 2.2 / 14
        print "You weigh", mass_stone, "stone."

    print 'Enter a value &lt;= 0 for function number to quit.'
    function = int(raw_input("Type function no.: "))
</snippet></ROW><ROW><id>11837015</id><snippet>0</snippet></ROW><ROW><id>11837015</id><snippet>    function = int(raw_input("Type function no.: "))

    while True:
       if function == 1:
          ...
       elif function == 2:
          ...
       elif function == 0:
          break      # terminate the loop.

      print 'Enter 0 for function number to quit.'
      function = int(raw_input("Type function no.: "))
</snippet></ROW><ROW><id>11837015</id><snippet>for</snippet></ROW><ROW><id>11837015</id><snippet>while</snippet></ROW><ROW><id>11837035</id><snippet>set_contents_from_filename(f)</snippet></ROW><ROW><id>11837035</id><snippet>k.set_contents_from_string(f.read())</snippet></ROW><ROW><id>11837080</id><snippet>for i in FOO.objects.map_reduce(map_f, reduce_f, {"merge":"COLLECTION_NAME"}):
    pass
</snippet></ROW><ROW><id>11837151</id><snippet>item['Header_Type']= site.select('div[1]/table[@class="layouttab"]/tr/td[contains(text(),"Type")]/following-sibling::td[1]/text()').extract()
</snippet></ROW><ROW><id>11837243</id><snippet>int</snippet></ROW><ROW><id>11837243</id><snippet>__setindex__()</snippet></ROW><ROW><id>11837243</id><snippet>__int__()</snippet></ROW><ROW><id>11837243</id><snippet>__long__()</snippet></ROW><ROW><id>11837258</id><snippet>conn = httplib.HTTPConnection("x.x.x.x", port)  
conn.request("GET", "", params, headers)
</snippet></ROW><ROW><id>11837473</id><snippet>__init__</snippet></ROW><ROW><id>11837473</id><snippet>__new__</snippet></ROW><ROW><id>11837473</id><snippet>&gt;&gt;&gt; class Foo(object):
    def bar(*args, **kwargs):
        print args, kwargs

&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo.bar
&lt;bound method Foo.bar of &lt;__main__.Foo object at 0x01C9FEB0&gt;&gt;
&gt;&gt;&gt; Foo.bar
&lt;unbound method Foo.bar&gt;
&gt;&gt;&gt; foo.bar()
(&lt;__main__.Foo object at 0x01C9FEB0&gt;,) {}
&gt;&gt;&gt; Foo.bar()

Traceback (most recent call last):
  File "&lt;pyshell#29&gt;", line 1, in &lt;module&gt;
    Foo.bar()
TypeError: unbound method bar() must be called with Foo instance as first argument (got nothing instead)
&gt;&gt;&gt; Foo.bar(foo)
(&lt;__main__.Foo object at 0x01C9FEB0&gt;,) {}
</snippet></ROW><ROW><id>11837704</id><snippet>count()</snippet></ROW><ROW><id>11837704</id><snippet>Subjects.objects.all().count()
</snippet></ROW><ROW><id>11837826</id><snippet>redirect</snippet></ROW><ROW><id>11837826</id><snippet>abort</snippet></ROW><ROW><id>11837826</id><snippet>True</snippet></ROW><ROW><id>11837826</id><snippet>return redirect('/some-path') 
</snippet></ROW><ROW><id>11837826</id><snippet>user</snippet></ROW><ROW><id>11837826</id><snippet>None</snippet></ROW><ROW><id>11838029</id><snippet>statusObj</snippet></ROW><ROW><id>11838029</id><snippet># try to get the string into unicode
screen_name = unicode(statusObj.user.screen_name) 
post = unicode(statusObj.text) # probably an error here?
output_str = u"Posting @{name}: {post}".format(name=screen_name, post=post)
print output_str.encode("utf8", "replace") # encode the unicode string on 
</snippet></ROW><ROW><id>11838117</id><snippet>x = hello()</snippet></ROW><ROW><id>11838117</id><snippet>room()</snippet></ROW><ROW><id>11838117</id><snippet>next_room_name</snippet></ROW></DATA>