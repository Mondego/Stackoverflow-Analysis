<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>14277689</id><snippet>*</snippet></ROW><ROW><id>14277689</id><snippet>aifc</snippet></ROW><ROW><id>14277689</id><snippet>open()</snippet></ROW><ROW><id>14277689</id><snippet>open()</snippet></ROW><ROW><id>14277689</id><snippet>*</snippet></ROW><ROW><id>14277689</id><snippet>aifc.open()</snippet></ROW><ROW><id>14278092</id><snippet>Vertex.__repr__</snippet></ROW><ROW><id>14278092</id><snippet>__repr__</snippet></ROW><ROW><id>14278092</id><snippet>__str__</snippet></ROW><ROW><id>14278442</id><snippet>fingerprint</snippet></ROW><ROW><id>14278442</id><snippet>gnupg.Verify</snippet></ROW><ROW><id>14278442</id><snippet>verify</snippet></ROW><ROW><id>14278442</id><snippet>&gt;&gt;&gt; gpg = gnupg.GPG()
&gt;&gt;&gt; v = gpg.verify(data)
&gt;&gt;&gt; v.fingerprint
u'3D2822FCA7D73D07F65B1514C9A99684DEDF97D5'
</snippet></ROW><ROW><id>14278442</id><snippet>list_keys</snippet></ROW><ROW><id>14278442</id><snippet>&gt;&gt;&gt; [k for k in gpg.list_keys(v.fingerprint)
     if k['fingerprint'] == v.fingerprint]
</snippet></ROW><ROW><id>14278532</id><snippet>def days(t):
    oxford_comma = False
    a = [" day", " hour", " minute"]
    s = []
    if len(t) != 4:
        return "incorrect format"
    else:
        for i in range(3):
            if t[i] != 0:
                plural = "s" if t[i] &gt; 1 else ""
                s.append(str(t[i]) + a[i] + plural + ", ")


        if len(s) &gt; 1:
            if not oxford_comma:
                s[-2] = s[-2].replace(",","")
            s.insert(len(s)-1,"and ")
        return "".join(s)[:-2]


    print days((1,2,3,11))      #1 day, 2 hours, and 3 minutes
    print days((0,2,3,1))       #2 hours, and 3 minutes
    print days((0,0,3,11))      #3 minutes
    print days((1,1,1,11))      #1 day, 1 hour, and 1 minute
</snippet></ROW><ROW><id>14278532</id><snippet>oxford_comma</snippet></ROW><ROW><id>14278533</id><snippet>repr()</snippet></ROW><ROW><id>14278691</id><snippet>class YourProtocol(protocol.Protocol):

    def connectionMade(self):
        self._peer = self.transport.getPeer()

    def connectionLost(self):
        print 'Lost connection from', self._peer
</snippet></ROW><ROW><id>14278710</id><snippet>+</snippet></ROW><ROW><id>14278710</id><snippet>total = []
for i in [['a','b','c'],['d','e','f']]:
    total += i

print total
</snippet></ROW><ROW><id>14279510</id><snippet>bar()</snippet></ROW><ROW><id>14279510</id><snippet>hatch</snippet></ROW><ROW><id>14279510</id><snippet>bar()</snippet></ROW><ROW><id>14279510</id><snippet>pie()</snippet></ROW><ROW><id>14279510</id><snippet>hatch</snippet></ROW><ROW><id>14279510</id><snippet>patches = pie(…)[0]  # The first element of the returned tuple are the pie slices
</snippet></ROW><ROW><id>14279510</id><snippet>patches[0].set_hatch('/')  # Pie slice #0 hatched.
</snippet></ROW><ROW><id>14279510</id><snippet>pyplot.draw()
</snippet></ROW><ROW><id>14279625</id><snippet>def retOBJECT(tup):
    for l_name, l in [('a',a),('b',b)]:
        for v in l:
            if tup in l[v]:
                return l_name, v,l[v][1]
</snippet></ROW><ROW><id>14279666</id><snippet>keyPressEvent</snippet></ROW><ROW><id>14279666</id><snippet>QWidget</snippet></ROW><ROW><id>14279666</id><snippet>QWidget</snippet></ROW><ROW><id>14279666</id><snippet>class MyWindow(QtGui.QMainWindow):
    def keyPressEvent(...
        ...

if __name__=='__main__':
    ...
    window=MyWindow()
    ...
    sys.exit(app.exec_())  # and don't forget to run the mainloop
</snippet></ROW><ROW><id>14279864</id><snippet>1+exp(x)</snippet></ROW><ROW><id>14279864</id><snippet>exp(x) == 1e16</snippet></ROW><ROW><id>14279864</id><snippet>&gt;&gt;&gt; (1e16 + 1) == (1e16)
True
&gt;&gt;&gt; (1e15 + 1) == (1e15)
False
</snippet></ROW><ROW><id>14279864</id><snippet>math.log(1e16)</snippet></ROW><ROW><id>14279864</id><snippet>&gt;&gt;&gt; (1e-16 + 1.) == (1.)
True
&gt;&gt;&gt; (1e-15 + 1.) == (1.)
False
</snippet></ROW><ROW><id>14279864</id><snippet>func_product</snippet></ROW><ROW><id>14279864</id><snippet>exp(-x)/exp(x) == exp(-2*x)
</snippet></ROW><ROW><id>14279864</id><snippet>exp(-x) - 1./exp(x) 
</snippet></ROW><ROW><id>14279864</id><snippet>exp(-x) - exp(-x)
</snippet></ROW><ROW><id>14279965</id><snippet>libc</snippet></ROW><ROW><id>14279965</id><snippet>fflush</snippet></ROW><ROW><id>14279965</id><snippet>fseek</snippet></ROW><ROW><id>14279965</id><snippet>fd.seek(0, os.SEEK_CUR)</snippet></ROW><ROW><id>14279965</id><snippet>with open("test1.txt", "r+b") as fd:
    print fd.read(4)
    fd.seek(0, os.SEEK_CUR)
    fd.write("----")
</snippet></ROW><ROW><id>14279965</id><snippet>#include &lt;cstdio&gt;
int main()
{   
    char  buffer[5] = {0};
    FILE *fp = fopen("D:\\Temp\\test1.txt","rb+");
    fread(buffer, sizeof(char), 4, fp);
    printf("%s\n", buffer);
    /*without fseek, file would not be updated*/
    fseek(fp, 0, SEEK_CUR); 
    fwrite("----",sizeof(char), 4, fp);
    fclose(fp);
    return 0;
}
</snippet></ROW><ROW><id>14280173</id><snippet>from collections import defaultdict

d = defaultdict(list)

for k, v in zip(key, data):
    d[k].append(v)

print [(k, ' '.join(v)) for k, v in d.items()]
</snippet></ROW><ROW><id>14280173</id><snippet>[('1', 'a'), ('3', 'd'), ('2', 'b c')]
</snippet></ROW><ROW><id>14280173</id><snippet>newkey, newvalue = d.keys(), [' '.join(v) for v in d.values()]
</snippet></ROW><ROW><id>14280173</id><snippet>newkey, newvalue = zip(*[(k, ' '.join(d.pop(k))) for k in key if k in d])
</snippet></ROW><ROW><id>14280362</id><snippet>O(N^2)</snippet></ROW><ROW><id>14280362</id><snippet>O(N log N)</snippet></ROW><ROW><id>14280362</id><snippet>O(N)</snippet></ROW><ROW><id>14280362</id><snippet>lon = numpy.array()
lat = numpy.array()

lon1 = lon[:-1]
lon2 = lon[1:]
lat1 = lat[:-1]
lat2 = lat[1:]

'''distance'''
x = (lon2 - lon1)
y = (lat2 - lat1)
d = x * x + y * y

while True:
    min = numpy.min(d)
    if min &lt; 0.015 * 0.015:
        j = numpy.where(d == min)[0][0]
    else:
        break

    lon[j] = (lon[j] + lon[j + 1]) / 2
    lat[j] = (lat[j] + lat[j + 1]) / 2

    lon = numpy.delete(lon, j + 1)  # &lt;-- you spend most of the time here
    lat = numpy.delete(lat, j + 1)  # &lt;-- and here

    d = numpy.delete(d, j)      # &lt;-- and here

    x = lon[j]-lon[j-1]
    y = lat[j]-lat[j-1]
    d[j-1] = x * x + y * y
    x = lon[j+1]-lon[j]
    y = lat[j+1]-lat[j]
    d[j] = x * x + y * y
</snippet></ROW><ROW><id>14280362</id><snippet>O(N^2)</snippet></ROW><ROW><id>14280362</id><snippet>O(1)</snippet></ROW><ROW><id>14280362</id><snippet>O(N)</snippet></ROW><ROW><id>14280362</id><snippet>d</snippet></ROW><ROW><id>14280362</id><snippet>d</snippet></ROW><ROW><id>14280362</id><snippet>O(N log N)</snippet></ROW><ROW><id>14280362</id><snippet>O(N log N)</snippet></ROW><ROW><id>14280362</id><snippet>sorted_d</snippet></ROW><ROW><id>14280362</id><snippet>sorted_d</snippet></ROW><ROW><id>14280362</id><snippet>sorted_d</snippet></ROW><ROW><id>14280362</id><snippet>O(log N)</snippet></ROW><ROW><id>14280362</id><snippet>O(N)</snippet></ROW><ROW><id>14280362</id><snippet>O(log N)</snippet></ROW><ROW><id>14280362</id><snippet>sorted_d</snippet></ROW><ROW><id>14280373</id><snippet>logilab-astng</snippet></ROW><ROW><id>14280373</id><snippet>pylint-brain</snippet></ROW><ROW><id>14280373</id><snippet>logilab-astng</snippet></ROW><ROW><id>14280373</id><snippet>pylint-brain</snippet></ROW><ROW><id>14280373</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>14280970</id><snippet>O_CREAT | O_EXCL</snippet></ROW><ROW><id>14280970</id><snippet>'x'</snippet></ROW><ROW><id>14280970</id><snippet>open()</snippet></ROW><ROW><id>14280975</id><snippet>outputFile.write(content.upper())</snippet></ROW><ROW><id>14280975</id><snippet>import os

def test():
    os.chdir("C:/Users/David/Files")
    files = os.listdir(".")
    for x in files:
        inputFile = open(x, "r")
        content = inputFile.read()
        with open(x, "wb") as outputFile:
                outputFile.write(content.upper())
</snippet></ROW><ROW><id>14280975</id><snippet>w</snippet></ROW><ROW><id>14280975</id><snippet>str.upper(content)</snippet></ROW><ROW><id>14280975</id><snippet>content</snippet></ROW><ROW><id>14280975</id><snippet>.upper()</snippet></ROW><ROW><id>14280975</id><snippet>outputFile</snippet></ROW><ROW><id>14280975</id><snippet>content</snippet></ROW><ROW><id>14280975</id><snippet>write()</snippet></ROW><ROW><id>14280975</id><snippet>with</snippet></ROW><ROW><id>14280975</id><snippet>import os

def test():
    os.chdir("C:/Users/David/Files")
    files = os.listdir(".")
    for x in files:
        with open(x, "r") as inputFile:
            content = inputFile.read()
        with open(x, "wb") as outputFile:
            outputFile.write(content.upper())
</snippet></ROW><ROW><id>14280975</id><snippet>r+b</snippet></ROW><ROW><id>14280975</id><snippet>seek</snippet></ROW><ROW><id>14280975</id><snippet>truncate()</snippet></ROW><ROW><id>14280975</id><snippet>import os

def test():
    x = 'testfile'
    with open(x, "r+b") as inputFile:
        content = inputFile.read()
        inputFile.seek(0)
        inputFile.write(content.upper())
</snippet></ROW><ROW><id>14281094</id><snippet>def percentage_split(seq, percentages):
   assert sum(percentages) == 1.0
   prv = 0
   size = len(seq)
   cum_percentage = 0
   for p in percentages:
       cum_percentage += p
       nxt = int(cum_percentage * size)
       yield seq[prv:nxt]
       prv = nxt
</snippet></ROW><ROW><id>14281094</id><snippet>list(percentage_split(x, [0.25]*4))
</snippet></ROW><ROW><id>14281094</id><snippet>from numpy import cumsum

def percentage_split(seq, percentages):
    cdf = cumsum(percentages)
    assert cdf[-1] == 1.0
    stops = map(int, cdf * len(seq))
    return [seq[a:b] for a, b in zip([0]+stops, stops)]
</snippet></ROW><ROW><id>14281094</id><snippet>numpy.split(seq, 4)
</snippet></ROW><ROW><id>14281138</id><snippet>lognorm.pdf(exp(x), sd, mu)</snippet></ROW><ROW><id>14281138</id><snippet>pdf(x, s, loc=0, scale=1)</snippet></ROW><ROW><id>14281338</id><snippet>from myproject.module1.b import Something</snippet></ROW><ROW><id>14281807</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>14281807</id><snippet>python microformats_xfn‌​_scrape.py &lt;some_argument&gt;
</snippet></ROW><ROW><id>14281807</id><snippet>&lt;url&gt;</snippet></ROW><ROW><id>14281807</id><snippet>python microformats_xfn‌​_scrape.py http://www.ajaxian.com/
</snippet></ROW><ROW><id>14281807</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>14281807</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>14282427</id><snippet>["fastq_quality_trimmer", "-Q", "33" "-v", "-t", "50", "-l", "20", "-i", leftInitial, "-o", leftTrimmed]
</snippet></ROW><ROW><id>14282427</id><snippet>"33"</snippet></ROW><ROW><id>14282427</id><snippet>"-v"</snippet></ROW><ROW><id>14282427</id><snippet>-Q 33-v</snippet></ROW><ROW><id>14282427</id><snippet>-Q 33 -v</snippet></ROW><ROW><id>14282427</id><snippet>&gt;&gt;&gt; "33", "-v"
('33', '-v')
&gt;&gt;&gt; "33" "-v"
'33-v'
</snippet></ROW><ROW><id>14282427</id><snippet>-v</snippet></ROW><ROW><id>14282427</id><snippet>fastq_quality_trimmer</snippet></ROW><ROW><id>14282427</id><snippet>args</snippet></ROW><ROW><id>14282427</id><snippet>['echo']</snippet></ROW><ROW><id>14282427</id><snippet>proc = subprocess.Popen(['echo'] + args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
output, err = proc.communicate()
print(output)
</snippet></ROW><ROW><id>14282612</id><snippet>print 'Failed to fetch ' + URL</snippet></ROW><ROW><id>14282612</id><snippet>item</snippet></ROW><ROW><id>14282612</id><snippet>try:
    page = urllib2.urlopen(URL)
except urllib2.URLError:
    print 'Failed to fetch ' + URL
</snippet></ROW><ROW><id>14282612</id><snippet>item</snippet></ROW><ROW><id>14282612</id><snippet>URL</snippet></ROW><ROW><id>14282612</id><snippet>try:
    soup = BeautifulSoup(page)
except HTMLParser.HTMLParseError:
    print 'Failed to parse ' + URL
</snippet></ROW><ROW><id>14282837</id><snippet>test runner</snippet></ROW><ROW><id>14282837</id><snippet>from unittest.case import TestCase
import unittest
from StringIO import StringIO
class MyTestCase(TestCase):
    def testTrue(self):
        '''
        Always true
        '''
        assert True

    def testFail(self):
        '''
        Always fails
        '''
        assert False

from pprint import pprint
stream = StringIO()
runner = unittest.TextTestRunner(stream=stream)
result = runner.run(unittest.makeSuite(MyTestCase))
print 'Tests run ', result.testsRun
print 'Errors ', result.errors
pprint(result.failures)
stream.seek(0)
print 'Test output\n', stream.read()
</snippet></ROW><ROW><id>14282837</id><snippet>&gt;&gt;&gt; Output:  
&gt;&gt;&gt; Tests run  2
&gt;&gt;&gt; Errors  []
&gt;&gt;&gt; [(&lt;__main__.MyTestCase testMethod=testFail&gt;,
&gt;&gt;&gt; 'Traceback (most recent call last):\n  File "leanwx/test.py", line 15, in testFail\n                assert False\nAssertionError\n')]
&gt;&gt;&gt; Test output
&gt;&gt;&gt; F.
&gt;&gt;&gt; ======================================================================
&gt;&gt;&gt; FAIL: testFail (__main__.MyTestCase)
&gt;&gt;&gt; ----------------------------------------------------------------------
&gt;&gt;&gt; Traceback (most recent call last):
&gt;&gt;&gt;   File "leanwx/test.py", line 15, in testFail
&gt;&gt;&gt;     assert False
&gt;&gt;&gt; AssertionError
&gt;&gt;&gt;
&gt;&gt;&gt;----------------------------------------------------------------------
&gt;&gt;&gt;Ran 2 tests in 0.001s
&gt;&gt;&gt;
&gt;&gt;&gt;FAILED (failures=1)
</snippet></ROW><ROW><id>14283071</id><snippet>print ("Please give me a number: ")
number = input()

plusTen = int(number) + 10
print ("If we add 10 to your number, we get " + str(plusTen))
</snippet></ROW><ROW><id>14283212</id><snippet>pip install selenium==2.27.0</snippet></ROW><ROW><id>14283489</id><snippet>self.h += int(node.h)
</snippet></ROW><ROW><id>14283637</id><snippet>players</snippet></ROW><ROW><id>14283637</id><snippet>players.append( name )
</snippet></ROW><ROW><id>14283637</id><snippet>players.append( self )
</snippet></ROW><ROW><id>14283637</id><snippet>players</snippet></ROW><ROW><id>14283637</id><snippet>Player</snippet></ROW><ROW><id>14283637</id><snippet>hand</snippet></ROW><ROW><id>14283637</id><snippet>players</snippet></ROW><ROW><id>14283637</id><snippet>players</snippet></ROW><ROW><id>14283637</id><snippet>dealXToOne</snippet></ROW><ROW><id>14283637</id><snippet>dealOneToEach</snippet></ROW><ROW><id>14283637</id><snippet>Deck</snippet></ROW><ROW><id>14283637</id><snippet>players = [p1, p2]
d.dealXToOne(3, p1)
d.dealXToEach(e, players)
</snippet></ROW><ROW><id>14283710</id><snippet>def calc():

if Question == "Add":
    t = math.add

elif Question == "Subtract":
    t = math.subtract

elif Question == "Multiply":
    t = math.multiplication

elif Question == "Division":
    t = math.division

print t()
</snippet></ROW><ROW><id>14283710</id><snippet>class UserInputCalculator(object):

    operations = ["Add", "Subtract", "Multiply", "Divide"]

    def __init__(self):
        self.x = None
        self.y = None
        self.operation = None

    def run(self):
        self.prompt_for_operation()
        self.prompt_for_x()
        self.prompt_for_y()
        if self.operation == 'Add':
            return self.add()
        elif self.operation == 'Subtract':
            return self.subtract()
        elif self.operation == 'Multiply':
            return self.multiply()
        elif self.operation = 'Divide':
            return self.divide()
        else:
            raise ValueError('Unknown operation %s.' % operation)

    def prompt_for_operation(self):
        self.operation = input("Enter an operation: (%s)" % ', '.join(UserInputCalculator.operations))
        if self.operation not in UserInputCalculator.operations:
            raise ValueError('%s not a valid operation.' % self.operation)
        return self.operation

    def prompt_for_x(self):
        try:
            self.x = int(input("Enter first number: "))
        except:
            raise ValueError('Invalid value.')
        return self.x

    def prompt_for_y(self):
        try:
            self.y = int(input("Enter second number: "))
        except:
            raise ValueError('Invalid value.')
        return self.y

    def add(self):
        return self.x + self.y

    def subtract(self):
        return self.x - self.y

    def multiply(self):
        return self.x * self.y

    def divide(self):
        return self.x / self.y

calculator = UserInputCalculator()
print calculator.run()
input("Press any key to exit:" )
</snippet></ROW><ROW><id>14283713</id><snippet>a = 'a(?:pp)?le'
</snippet></ROW><ROW><id>14283713</id><snippet>(...)</snippet></ROW><ROW><id>14283713</id><snippet>?</snippet></ROW><ROW><id>14283713</id><snippet>(?:...)</snippet></ROW><ROW><id>14283713</id><snippet>re.findall</snippet></ROW><ROW><id>14284018</id><snippet>d = dict(zip(chars,cipher))
</snippet></ROW><ROW><id>14284018</id><snippet>print d[whatever_char]  #prints the cipher associated with that character
</snippet></ROW><ROW><id>14284404</id><snippet>&gt;&gt;&gt; '\xdf'.encode('cp866')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/opt/local/Library/Frameworks/Python.framework/Versions/3.3/lib/python3.3/encodings/cp866.py", line 12, in encode
    return codecs.charmap_encode(input,errors,encoding_map)
UnicodeEncodeError: 'charmap' codec can't encode character '\xdf' in position 0: character maps to &lt;undefined&gt;
</snippet></ROW><ROW><id>14284404</id><snippet>chcp 65001</snippet></ROW><ROW><id>14284404</id><snippet>chcp</snippet></ROW><ROW><id>14284404</id><snippet>&gt;&gt;&gt; print('\xdf')
ß
</snippet></ROW><ROW><id>14284594</id><snippet>insertbackground</snippet></ROW><ROW><id>14284658</id><snippet>[a–zA–Z0–9./]</snippet></ROW><ROW><id>14284658</id><snippet>user.password</snippet></ROW><ROW><id>14284658</id><snippet>email</snippet></ROW><ROW><id>14284658</id><snippet>crypt</snippet></ROW><ROW><id>14284970</id><snippet>-cp /home/django/code/classes:/path/to/slick.jar</snippet></ROW><ROW><id>14284970</id><snippet>/path/to/dependencies/*.jar</snippet></ROW><ROW><id>14285006</id><snippet>urllib</snippet></ROW><ROW><id>14285006</id><snippet>urllib2</snippet></ROW><ROW><id>14285006</id><snippet>urllib</snippet></ROW><ROW><id>14285006</id><snippet>urllib.request</snippet></ROW><ROW><id>14285006</id><snippet>urllib.error</snippet></ROW><ROW><id>14285027</id><snippet>def testMsed(self):
  for i in range(self.tot_iter):
    print i
    fun = rice_output.msed(self.dsed_in[i],self.a_in[i],self.pb_in[i])
    value = self.msed_out[i]
    testFailureMessage = "Test of function name: %s iteration: %i expected: %i != calculated: %i" % ("msed",i,value,fun)
    self.assertEqual(round(fun,3),round(self.msed_out[i],3),testFailureMessage)
</snippet></ROW><ROW><id>14285036</id><snippet>daemon_threads</snippet></ROW><ROW><id>14285036</id><snippet>ThreadingMixIn</snippet></ROW><ROW><id>14285036</id><snippet>threading</snippet></ROW><ROW><id>14285036</id><snippet>ctypes</snippet></ROW><ROW><id>14285036</id><snippet>win32api</snippet></ROW><ROW><id>14285036</id><snippet>threading.Condition</snippet></ROW><ROW><id>14285036</id><snippet>handle</snippet></ROW><ROW><id>14285036</id><snippet>handle</snippet></ROW><ROW><id>14285036</id><snippet>ThreadingMixIn</snippet></ROW><ROW><id>14285036</id><snippet>select</snippet></ROW><ROW><id>14285036</id><snippet>asyncore</snippet></ROW><ROW><id>14285036</id><snippet>Twisted</snippet></ROW><ROW><id>14285036</id><snippet>Tornado</snippet></ROW><ROW><id>14285036</id><snippet>gevent</snippet></ROW><ROW><id>14285036</id><snippet>tulip</snippet></ROW><ROW><id>14285338</id><snippet>if foo is None:
</snippet></ROW><ROW><id>14285338</id><snippet>if (foo == null) {
</snippet></ROW><ROW><id>14285500</id><snippet>findall</snippet></ROW><ROW><id>14285500</id><snippet>File</snippet></ROW><ROW><id>14285500</id><snippet>Job</snippet></ROW><ROW><id>14285500</id><snippet>File</snippet></ROW><ROW><id>14285500</id><snippet>Job</snippet></ROW><ROW><id>14285500</id><snippet>name='Manny'</snippet></ROW><ROW><id>14285500</id><snippet>Job[@name='Manny']</snippet></ROW><ROW><id>14285500</id><snippet>Job</snippet></ROW><ROW><id>14285500</id><snippet>doc.findall("./Job[@name='{}']/File".format(task))
</snippet></ROW><ROW><id>14285500</id><snippet>ElementTree.py</snippet></ROW><ROW><id>14285500</id><snippet>ElementPath.py</snippet></ROW><ROW><id>14285500</id><snippet>lxml</snippet></ROW><ROW><id>14285660</id><snippet>import shutil

path = input("Enter path to delete")

shutil.rmtree(path);
</snippet></ROW><ROW><id>14285765</id><snippet>from numpy import take,argsort

take(opt,argsort(argsort(perc)[::-1]))
</snippet></ROW><ROW><id>14285765</id><snippet>zip(*sorted(zip(sorted(range(len(perc)), key=perc.__getitem__)[::-1],opt)))[1]
</snippet></ROW><ROW><id>14285765</id><snippet>#Test

l=[([0.23, 0.27, 0.4, 0.1],[3, 2, 2, 1]),
   ([0.25, 0.25, 0.4, 0.1],[3, 2, 2, 1]),
   ([0.2,  0.2,  0.4, 0.2],[3, 2, 2, 1])]

def f1(perc,opt):
    return take(opt,argsort(argsort(perc)[::-1]))

def f2(perc,opt):
    return zip(*sorted(zip(sorted(range(len(perc)),
             key=perc.__getitem__)[::-1],opt)))[1]       

for i in l:
    perc, opt = i
    print f1(perc,opt), f2(perc,opt)

# output:
# [2 2 3 1] (2, 2, 3, 1)
# [2 2 3 1] (2, 2, 3, 1)
# [1 2 3 2] (1, 2, 3, 2)
</snippet></ROW><ROW><id>14285956</id><snippet>TypeError</snippet></ROW><ROW><id>14285956</id><snippet>x</snippet></ROW><ROW><id>14285956</id><snippet>func2</snippet></ROW><ROW><id>14285956</id><snippet>import numpy as np
import scipy.optimize as optimize
def func2(x,a,b):
    return a*np.exp(b*(x**2))

x = np.linspace(0,1,6).reshape(2,-1)
y = func2(x,1,1)
x = x.tolist()
y = y.tolist()
print(x)
# [[0.0, 0.2, 0.4], [0.6000000000000001, 0.8, 1.0]]
print(y)
# [[1.0, 1.0408107741923882, 1.1735108709918103], [1.4333294145603404, 1.8964808793049517, 2.718281828459045]]

popt, pcov = optimize.curve_fit(func2, x, y)
# TypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'
</snippet></ROW><ROW><id>14285956</id><snippet>func2</snippet></ROW><ROW><id>14285956</id><snippet>x</snippet></ROW><ROW><id>14285956</id><snippet>y</snippet></ROW><ROW><id>14285956</id><snippet>optimize.curve_fit</snippet></ROW><ROW><id>14285956</id><snippet>func2</snippet></ROW><ROW><id>14285956</id><snippet>func2</snippet></ROW><ROW><id>14285956</id><snippet>x</snippet></ROW><ROW><id>14285956</id><snippet>x</snippet></ROW><ROW><id>14285956</id><snippet>x</snippet></ROW><ROW><id>14285956</id><snippet>func2</snippet></ROW><ROW><id>14285956</id><snippet>x = np.asarray(x).ravel()
y = np.asarray(y).ravel()
popt, pcov = optimize.curve_fit(func2, x, y)
print(popt)
# [ 1.  1.]
</snippet></ROW><ROW><id>14286002</id><snippet>bcrypt</snippet></ROW><ROW><id>14286002</id><snippet>site</snippet></ROW><ROW><id>14286369</id><snippet>gevent</snippet></ROW><ROW><id>14286369</id><snippet>urlopen</snippet></ROW><ROW><id>14286369</id><snippet>gevent</snippet></ROW><ROW><id>14286369</id><snippet>pycurl</snippet></ROW><ROW><id>14286369</id><snippet>gevent</snippet></ROW><ROW><id>14286369</id><snippet>gevent</snippet></ROW><ROW><id>14286369</id><snippet>gevent</snippet></ROW><ROW><id>14286369</id><snippet>gevent</snippet></ROW><ROW><id>14286369</id><snippet>requests</snippet></ROW><ROW><id>14286369</id><snippet>requests</snippet></ROW><ROW><id>14286369</id><snippet>grequests</snippet></ROW><ROW><id>14286369</id><snippet>requests</snippet></ROW><ROW><id>14286369</id><snippet>gevent</snippet></ROW><ROW><id>14286369</id><snippet>requests</snippet></ROW><ROW><id>14286369</id><snippet>urllib2</snippet></ROW><ROW><id>14286369</id><snippet>gevent</snippet></ROW><ROW><id>14286369</id><snippet>grequests</snippet></ROW><ROW><id>14286836</id><snippet>LineReceiver</snippet></ROW><ROW><id>14286836</id><snippet>Protocol</snippet></ROW><ROW><id>14286836</id><snippet>lineReceived</snippet></ROW><ROW><id>14286836</id><snippet>dataReceived</snippet></ROW><ROW><id>14286868</id><snippet>entrydate</snippet></ROW><ROW><id>14286868</id><snippet>5:55 AM 1/1/2013</snippet></ROW><ROW><id>14287014</id><snippet>text</snippet></ROW><ROW><id>14287014</id><snippet>QLineEdit</snippet></ROW><ROW><id>14287014</id><snippet>INPUT = textfield.text()
INPUT2 = float(INPUT)
</snippet></ROW><ROW><id>14287078</id><snippet>tempfile.TemporaryFile()</snippet></ROW><ROW><id>14287078</id><snippet>tempfile.NamedTemporaryFile(delete=False)</snippet></ROW><ROW><id>14287078</id><snippet>communicate()</snippet></ROW><ROW><id>14287078</id><snippet>descr = "this is a test description"
changespec = "change: New\ndescription: " + descr

p = subprocess.Popen(["p4","change","-i"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

(out, err) = p.communicate(changespec)
print out
</snippet></ROW><ROW><id>14287214</id><snippet>executemany()</snippet></ROW><ROW><id>14287214</id><snippet>import sqlite3
conn = sqlite3.connect(':memory:')
conn.execute('create table t (c);')
conn.executemany("insert into t values (?);", ('a','b','c',))
conn.execute('select c from t;').fetchall()
# -&gt; [(u'a',), (u'b',), (u'c',)]
conn.executemany('delete from t where c = ?;', ('a','b',))
conn.execute('select c from t;').fetchall()
# -&gt; [(u'c',)]
conn.close()
</snippet></ROW><ROW><id>14287630</id><snippet>print final</snippet></ROW><ROW><id>14287668</id><snippet>sum()</snippet></ROW><ROW><id>14287668</id><snippet>nums = []

for url in short_urls:
    query_params = {
         'access_token': ACCESS_TOKEN,
         'link': url.values()}

    endpoint = "https://api-ssl.bitly.com/v3/link/clicks"
    response = requests.get(endpoint, params = query_params)

    data = json.loads(response.content)

    print "link_clicks:" + " " + str(data['data']['link_clicks'])
    nums.append(data['data']['link_clicks'])

print 'total link_clicks:', sum(nums)
</snippet></ROW><ROW><id>14287668</id><snippet>total_links_clicks = 0

for url in short_urls:
    query_params = {
         'access_token': ACCESS_TOKEN,
         'link': url.values()}

    endpoint = "https://api-ssl.bitly.com/v3/link/clicks"
    response = requests.get(endpoint, params = query_params)

    data = json.loads(response.content)

    print "link_clicks:" + " " + str(data['data']['link_clicks'])
    total_links_clicks += data['data']['link_clicks']

print 'total link_clicks:', total_links_clicks
</snippet></ROW><ROW><id>14287810</id><snippet>print re.sub('&lt;crew_member([^\&gt;]*)&gt;.*&lt;/crew_member&gt;\n', '', xml, flags=re.DOTALL)</snippet></ROW><ROW><id>14287995</id><snippet>def make_generic_getter(name, maxlen):
    def getter(self):
        value = getattr(self, name)
        r_str = ""
        if len(value) &gt; maxlen:
            r_str = value[:maxlen]
        else:
            r_str = value.strip()
        return r_str.strip()
    return getter
</snippet></ROW><ROW><id>14287995</id><snippet>class Foo(object):
    def __init__(self):
        self._Bar = 'abc'
        self._Baz = 'def'
    GetBar = make_generic_getter('_Bar', 5)
    GetBaz = make_generic_getter('_Baz', 2)
</snippet></ROW><ROW><id>14287995</id><snippet>&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.GetBar()
'abc'
&gt;&gt;&gt; f.GetBaz()
'de'
</snippet></ROW><ROW><id>14287995</id><snippet>self</snippet></ROW><ROW><id>14287995</id><snippet>self</snippet></ROW><ROW><id>14287995</id><snippet>self</snippet></ROW><ROW><id>14287995</id><snippet>self</snippet></ROW><ROW><id>14287995</id><snippet>self</snippet></ROW><ROW><id>14287995</id><snippet>@property</snippet></ROW><ROW><id>14287995</id><snippet>&gt;&gt;&gt; def func(self): pass
&gt;&gt;&gt; class C(object):
...     def meth(self): pass
...     fake1 = func
&gt;&gt;&gt; C.fake2 = func
&gt;&gt;&gt; func, C.meth, C.fake1, C.fake2
(&lt;function __main__.func&gt;, &lt;unbound method C.meth&gt;, &lt;unbound method C.func&gt;, &lt;unbound method C.func&gt;)
</snippet></ROW><ROW><id>14287995</id><snippet>im_class</snippet></ROW><ROW><id>14287995</id><snippet>im_func</snippet></ROW><ROW><id>14287995</id><snippet>im_self</snippet></ROW><ROW><id>14287995</id><snippet>None</snippet></ROW><ROW><id>14287995</id><snippet>fake1 = func</snippet></ROW><ROW><id>14287995</id><snippet>C.fake2 = func</snippet></ROW><ROW><id>14287995</id><snippet>func</snippet></ROW><ROW><id>14287995</id><snippet>fake1</snippet></ROW><ROW><id>14287995</id><snippet>fake2</snippet></ROW><ROW><id>14287995</id><snippet>func</snippet></ROW><ROW><id>14287995</id><snippet>im_class</snippet></ROW><ROW><id>14287995</id><snippet>C</snippet></ROW><ROW><id>14287995</id><snippet>&gt;&gt;&gt; c = C()
&gt;&gt;&gt; c.meth, c.fake1
(&lt;bound method C.meth of &lt;__main__.C object at 0x111ebb0d0&gt;&gt;, &lt;bound method C.meth of &lt;__main__.C object at 0x111ebb0d0&gt;&gt;)
</snippet></ROW><ROW><id>14287995</id><snippet>im_self</snippet></ROW><ROW><id>14287995</id><snippet>c</snippet></ROW><ROW><id>14287995</id><snippet>None</snippet></ROW><ROW><id>14287995</id><snippet>c.fake1()</snippet></ROW><ROW><id>14287995</id><snippet>c.fake1</snippet></ROW><ROW><id>14287995</id><snippet>c.fake1.im_func(c.fake1.im_self)</snippet></ROW><ROW><id>14287995</id><snippet>fake</snippet></ROW><ROW><id>14288149</id><snippet>submit</snippet></ROW><ROW><id>14288149</id><snippet>form</snippet></ROW><ROW><id>14288149</id><snippet>action="submit"</snippet></ROW><ROW><id>14288149</id><snippet>/</snippet></ROW><ROW><id>14288149</id><snippet>&lt;form method="post" action="foo" class='uploader' style="width:45%"&gt;
   {% csrf_token %}
        &lt;div&gt;
            &lt;input name="keywords" id="import-keywords" type="file" /&gt;
            &lt;input type="submit" value="Submit" class="k-button" /&gt;
        &lt;/div&gt;
&lt;/form&gt;
...
...
&lt;form method="post" action="bar"&gt;{% csrf_token %}
&lt;div&gt;
    &lt;input name="apps" id="import-apps" type="file" /&gt;
    &lt;input type="submit" value="Submit" class="k-button" /&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>14288149</id><snippet>currentpageurl/foo</snippet></ROW><ROW><id>14288149</id><snippet>import-keywords</snippet></ROW><ROW><id>14288149</id><snippet>currentpageurl/bar</snippet></ROW><ROW><id>14288149</id><snippet>import-apps</snippet></ROW><ROW><id>14288173</id><snippet>while True:</snippet></ROW><ROW><id>14288173</id><snippet>sleep(10)</snippet></ROW><ROW><id>14288173</id><snippet>thread2.join()</snippet></ROW><ROW><id>14288173</id><snippet>f1</snippet></ROW><ROW><id>14288173</id><snippet>thread1.join()</snippet></ROW><ROW><id>14288173</id><snippet>f2</snippet></ROW><ROW><id>14288173</id><snippet>f1</snippet></ROW><ROW><id>14288173</id><snippet>f2</snippet></ROW><ROW><id>14288173</id><snippet>f2</snippet></ROW><ROW><id>14288173</id><snippet>f1</snippet></ROW><ROW><id>14288173</id><snippet>threading.Lock</snippet></ROW><ROW><id>14288173</id><snippet>thread1.start()
thread1.join()
thread2.start()
thread2.join()
thread3.start()
thread3.join()
</snippet></ROW><ROW><id>14288173</id><snippet>threading</snippet></ROW><ROW><id>14288173</id><snippet>ctypes</snippet></ROW><ROW><id>14288173</id><snippet>win32api</snippet></ROW><ROW><id>14288198</id><snippet>curr_angle = 0
angle_step = (math.pi*2)/shots
</snippet></ROW><ROW><id>14288198</id><snippet>curr_angle += angle_step
</snippet></ROW><ROW><id>14288198</id><snippet>angle = (math.pi*2)/shots
for i in xrange(shots):
    angle += angle 
</snippet></ROW><ROW><id>14288361</id><snippet>pywin32</snippet></ROW><ROW><id>14288361</id><snippet>ScriptingBridge</snippet></ROW><ROW><id>14288361</id><snippet>appscript</snippet></ROW><ROW><id>14288361</id><snippet>popen</snippet></ROW><ROW><id>14288361</id><snippet>ctypes</snippet></ROW><ROW><id>14288361</id><snippet>pywin32</snippet></ROW><ROW><id>14288361</id><snippet>pywinauto</snippet></ROW><ROW><id>14288361</id><snippet>selenium</snippet></ROW><ROW><id>14288361</id><snippet>pywin32</snippet></ROW><ROW><id>14288361</id><snippet>word = win32com.client.dispatch('Word.Application')
word.Visible = True
doc = word.Documents.Add()
doc.Selection.TypeText(my_string)
doc.SaveAs(r'C:\TestFiles\TestDoc.doc')
</snippet></ROW><ROW><id>14288361</id><snippet>pywinauto</snippet></ROW><ROW><id>14288361</id><snippet>swapy</snippet></ROW><ROW><id>14288361</id><snippet>AutoIt</snippet></ROW><ROW><id>14288361</id><snippet>Actions</snippet></ROW><ROW><id>14288361</id><snippet>swapy</snippet></ROW><ROW><id>14288361</id><snippet>pywinauto</snippet></ROW><ROW><id>14288361</id><snippet>word.Activate()
word.MenuSelect('File-&gt;New')
word.KeyStrokes(my_string)
word.MenuSelect('File-&gt;Save As')
word.Dialogs[-1].FindTextField('Filename').Select()
word.KeyStrokes(r'C:\TestFiles\TestDoc.doc')
word.Dialogs[-1].FindButton('OK').Click()
</snippet></ROW><ROW><id>14288361</id><snippet>selenium</snippet></ROW><ROW><id>14288361</id><snippet>pywinauto</snippet></ROW><ROW><id>14288465</id><snippet>doc.xpath('.//ul[@class = "myclass"]/li/text()')
# out: ["blah","blah2"]
</snippet></ROW><ROW><id>14288465</id><snippet>what if there was a &lt;a&gt; in the &lt;li&gt;? for example, how would I get "link" and text" from &lt;li&gt;&lt;a href="link"&gt;text&lt;/a&gt;&lt;/li&gt;?</snippet></ROW><ROW><id>14288465</id><snippet>link = doc.xpath('.//ul[@class = "myclass"]/li/a/@href')
txt= doc.xpath('.//ul[@class = "myclass"]/li/a/text()') 
</snippet></ROW><ROW><id>14288465</id><snippet>'//'</snippet></ROW><ROW><id>14288465</id><snippet>string()</snippet></ROW><ROW><id>14288465</id><snippet>doc.xpath('.//ul[@class="myclass"]/li[a]//text() | .//ul[@class="myclass"]/li/a/@href')
# out: ['I contain a ', 'http://example.com', 'link', '.']
</snippet></ROW><ROW><id>14288465</id><snippet>text_content()</snippet></ROW><ROW><id>14288465</id><snippet>html=\
"""
&lt;html&gt;
&lt;ul class="myclass"&gt;
    &lt;li&gt;I contain a &lt;a href="http://example.com"&gt;link&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;blah&lt;/li&gt;
    &lt;li&gt;blah2&lt;/li&gt;
&lt;/ul&gt;
&lt;/html&gt;
"""
import lxml.html as lh
doc=lh.fromstring(html)
for elem in doc.xpath('.//ul[@class="myclass"]/li'):
    print elem.text_content()
</snippet></ROW><ROW><id>14288465</id><snippet>#I contain a link.
#blah
#blah2
</snippet></ROW><ROW><id>14288620</id><snippet>date1 = datetime.date(2004, 9, 25)
date2 = datetime.date(2004, 10, 8)
day = datetime.timedelta(days=1)

while date1 &lt;= date2:
    print date1.strftime('%Y.%m.%d')
    date1 = date1 + day
</snippet></ROW><ROW><id>14288620</id><snippet>date1</snippet></ROW><ROW><id>14288620</id><snippet>for d in daterange(date1, date2):
    print d.strftime('%Y.%m.%d')
</snippet></ROW><ROW><id>14288620</id><snippet>for i in range((date2 - date1).days + 1):
    print (date1 + datetime.timedelta(days=i)).strftime('%Y.%m.%d')
</snippet></ROW><ROW><id>14288620</id><snippet>daterange = lambda d1, d2: (d1 + datetime.timedelta(days=i) for i in range((d2 - d1).days + 1))
for d in daterange(date1, date2):
   print d.strftime('%Y.%m.%d')
</snippet></ROW><ROW><id>14288828</id><snippet>exon</snippet></ROW><ROW><id>14288828</id><snippet>open</snippet></ROW><ROW><id>14288828</id><snippet>use strict;
use warnings;

open my $fh, '&lt;', 'genes.gff3' or die $!;

while (&lt;$fh&gt;) {
  chomp;
  my @fields = split /\t/;
  next unless @fields &gt;= 5 and $fields[2] eq 'exon';
  print join("\t", @fields[0,3,4]), "\n";
}
</snippet></ROW><ROW><id>14288828</id><snippet>PITG_00002  2 397
PITG_00004  1 1275
PITG_00004  1397  1969
</snippet></ROW><ROW><id>14288838</id><snippet>caveChoice = int(input ('Enter either 1 or 2. '))
</snippet></ROW><ROW><id>14288845</id><snippet>LOGON32_LOGON_NETWORK</snippet></ROW><ROW><id>14288845</id><snippet>LOGON32_LOGON_INTERACTIVE</snippet></ROW><ROW><id>14288845</id><snippet>def testLogin(self):
  try:
    LogonUser(self.wrappers['User'].GetValue(),
              self.wrappers['Domain'].GetValue(),
              self.wrappers['Password'].GetRawValue(),
              LOGON32_LOGON_INTERACTIVE,
              LOGON32_PROVIDER_DEFAULT)
    RevertToSelf()
  except Exception, e:
    wx.MessageBox(unicode(e), _("Error"))
    return False
  return True
</snippet></ROW><ROW><id>14288845</id><snippet>None</snippet></ROW><ROW><id>14288877</id><snippet>set</snippet></ROW><ROW><id>14288877</id><snippet>file1_data = set()
with open("file1.txt", "r") as fd:
    for line in fd:
        file1_data.update(i.strip() for i in line.split("///") if i.strip())
</snippet></ROW><ROW><id>14288877</id><snippet>with open("file2.txt", "r") as in_fd:
    with open("output.txt", "w") as out_fd:
        for line in in_fd:
            items = line.split("\t")
            if len(items) &lt; 5:
                # This is so we don't crash if we find a line that's too short
                continue
            synonyms = set(i.strip() for i in items[4].split("|"))
            overlap = synonyms &amp; file1_data
            if overlap:
                # Build string of columns from file2, stripping out 5th column.
                output_str = "\t".join(items[:4] + items[5:])
                for item in overlap:
                    out_fd.write("\t".join((item, output_str)))
</snippet></ROW><ROW><id>14288877</id><snippet>|</snippet></ROW><ROW><id>14288877</id><snippet>set</snippet></ROW><ROW><id>14288877</id><snippet>synonyms</snippet></ROW><ROW><id>14288877</id><snippet>set</snippet></ROW><ROW><id>14288877</id><snippet>overlap</snippet></ROW><ROW><id>14288877</id><snippet>"\t".join(...)</snippet></ROW><ROW><id>14288877</id><snippet>file2_data = {}
with open("file2.txt", "r") as fd:
    for line in fd:
        items = line.split("\t")
        file2_data[frozenset(i.strip() for i in items[0].split("|"))] = items[1:]
</snippet></ROW><ROW><id>14288877</id><snippet>file2_data</snippet></ROW><ROW><id>14288877</id><snippet>with open("file1.txt", "r") as fd:
    with open("output.txt", "w") as fd_out:
        for line in fd:
            words = set(i.strip() for i in line.split("///"))
            for file2_words, file2_cols in file2_data.iteritems():
                overlap = file2_words &amp; words
                if overlap:
                    fd_out.write("///".join(overlap) + "\t" + "\t".join(file2_cols))
</snippet></ROW><ROW><id>14288877</id><snippet>output.txt</snippet></ROW><ROW><id>14288877</id><snippet>///</snippet></ROW><ROW><id>14289226</id><snippet>grade[i]</snippet></ROW><ROW><id>14289226</id><snippet>i</snippet></ROW><ROW><id>14289226</id><snippet>sum</snippet></ROW><ROW><id>14289226</id><snippet>print(sum(grades))
</snippet></ROW><ROW><id>14289444</id><snippet>mmap</snippet></ROW><ROW><id>14289444</id><snippet>mmap</snippet></ROW><ROW><id>14289444</id><snippet>length</snippet></ROW><ROW><id>14289444</id><snippet>offset</snippet></ROW><ROW><id>14289444</id><snippet>mmap</snippet></ROW><ROW><id>14289444</id><snippet>m = mmap.mmap(f.fileno(), length=1024*1024*1024, offset=1536*1024*1024)
</snippet></ROW><ROW><id>14289444</id><snippet>mmap</snippet></ROW><ROW><id>14289444</id><snippet>re.match</snippet></ROW><ROW><id>14289444</id><snippet>mmap</snippet></ROW><ROW><id>14289444</id><snippet>read</snippet></ROW><ROW><id>14289444</id><snippet>mmap</snippet></ROW><ROW><id>14289444</id><snippet>read</snippet></ROW><ROW><id>14289444</id><snippet>mmap</snippet></ROW><ROW><id>14289444</id><snippet>mmap</snippet></ROW><ROW><id>14289444</id><snippet>read</snippet></ROW><ROW><id>14289444</id><snippet>read</snippet></ROW><ROW><id>14289444</id><snippet>lseek</snippet></ROW><ROW><id>14289444</id><snippet>madvise</snippet></ROW><ROW><id>14289444</id><snippet>mmap</snippet></ROW><ROW><id>14289444</id><snippet>read</snippet></ROW><ROW><id>14289444</id><snippet>mmap</snippet></ROW><ROW><id>14289444</id><snippet>read</snippet></ROW><ROW><id>14289444</id><snippet>mmap</snippet></ROW><ROW><id>14289444</id><snippet>read</snippet></ROW><ROW><id>14289549</id><snippet>check.on_clicked</snippet></ROW><ROW><id>14289549</id><snippet>label</snippet></ROW><ROW><id>14289549</id><snippet>check.on_clicked(my_obj.clickButtons)
</snippet></ROW><ROW><id>14289549</id><snippet>__call__</snippet></ROW><ROW><id>14289549</id><snippet>my_obj.clickButtons</snippet></ROW><ROW><id>14289549</id><snippet>check.on_clicked(self.clickButtons())</snippet></ROW><ROW><id>14289549</id><snippet>on_clicked</snippet></ROW><ROW><id>14289549</id><snippet>check</snippet></ROW><ROW><id>14289549</id><snippet>self.clickButtons()</snippet></ROW><ROW><id>14289549</id><snippet>clickButtons</snippet></ROW><ROW><id>14289549</id><snippet>self</snippet></ROW><ROW><id>14289549</id><snippet>label</snippet></ROW><ROW><id>14289549</id><snippet>self</snippet></ROW><ROW><id>14289549</id><snippet>A</snippet></ROW><ROW><id>14289549</id><snippet>f(self,b)</snippet></ROW><ROW><id>14289549</id><snippet>a</snippet></ROW><ROW><id>14289549</id><snippet>A</snippet></ROW><ROW><id>14289549</id><snippet>a.f(1)      # call member function f on a
A.f(a,1)    # call member function f on a
</snippet></ROW><ROW><id>14289691</id><snippet>&lt;Python.h&gt;</snippet></ROW><ROW><id>14289691</id><snippet>boost::python</snippet></ROW><ROW><id>14289691</id><snippet>Cython</snippet></ROW><ROW><id>14289691</id><snippet>ctypes</snippet></ROW><ROW><id>14289691</id><snippet>ctypes</snippet></ROW><ROW><id>14289730</id><snippet>'in'</snippet></ROW><ROW><id>14289730</id><snippet>set_index</snippet></ROW><ROW><id>14289730</id><snippet>In [1]: df = pd.read_csv('ni.csv', sep='\s+', index_col=0)

In [2]: df
Out[2]: 
    year  ni  d  m   x   y  q
in                           
1   2012   1  2  0 NaN NaN  3
6   2012   2  1  1   9   9  1
5   2012   3  1  1  17  17  1
3   2012   4  0  3  37  37  0
5   2012   5  1  0 NaN NaN  3
2   2012   6  3  1  15  15  3

In [3]: df.set_index('ni', drop=False)
Out[3]: 
    year  ni  d  m   x   y  q
ni                           
1   2012   1  2  0 NaN NaN  3
2   2012   2  1  1   9   9  1
3   2012   3  1  1  17  17  1
4   2012   4  0  3  37  37  0
5   2012   5  1  0 NaN NaN  3
6   2012   6  3  1  15  15  3
</snippet></ROW><ROW><id>14289730</id><snippet>inplace</snippet></ROW><ROW><id>14289730</id><snippet>df</snippet></ROW><ROW><id>14289730</id><snippet>In [4]: df.set_index('ni', drop=False, inplace=True)
</snippet></ROW><ROW><id>14289730</id><snippet>inplace</snippet></ROW><ROW><id>14289828</id><snippet>load_file</snippet></ROW><ROW><id>14289828</id><snippet>dest</snippet></ROW><ROW><id>14289828</id><snippet>dest</snippet></ROW><ROW><id>14289828</id><snippet>f</snippet></ROW><ROW><id>14289828</id><snippet>load_file</snippet></ROW><ROW><id>14289828</id><snippet>return</snippet></ROW><ROW><id>14289828</id><snippet>f</snippet></ROW><ROW><id>14289828</id><snippet>search_file</snippet></ROW><ROW><id>14289938</id><snippet>QuerySet</snippet></ROW><ROW><id>14289938</id><snippet>none()</snippet></ROW><ROW><id>14289938</id><snippet>Account</snippet></ROW><ROW><id>14289938</id><snippet>account.is_activated</snippet></ROW><ROW><id>14289938</id><snippet>False</snippet></ROW><ROW><id>14289938</id><snippet>Permission.objects.none()</snippet></ROW><ROW><id>14289967</id><snippet>'    def checkChange():'
'    \tfor user in userLinks:'
'    \t\turl = userLinks[user]'
'    \t\tresponse = urllib2.urlopen(url)  '
'            html = response.read()'
</snippet></ROW><ROW><id>14289967</id><snippet>html = response.read()</snippet></ROW><ROW><id>14289967</id><snippet>userLinks</snippet></ROW><ROW><id>14289967</id><snippet>Traceback (most recent call last):
  File "inde.py", line 10, in &lt;module&gt;
    checkChange()
  File "inde.py", line 5, in checkChange
    html = response.read()
UnboundLocalError: local variable 'response' referenced before assignment
</snippet></ROW><ROW><id>14289967</id><snippet>python -tt yourprogramname.py</snippet></ROW><ROW><id>14290068</id><snippet>print doc.xpath('//aws:weather/aws:ob/aws:temp', 
                namespaces={'aws': 'http://www.aws.com/aws'})[0].text
</snippet></ROW><ROW><id>14290542</id><snippet>var the_json = '{{my_json|escapejs}}';
</snippet></ROW><ROW><id>14290542</id><snippet>JSON.parse</snippet></ROW><ROW><id>14290542</id><snippet>@register.filter
def to_js(value):
    """
    To use a python variable in JS, we call json.dumps to serialize as JSON server-side and reconstruct using
    JSON.parse. The serialized string must be escaped appropriately before dumping into the client-side code.
    """
    # separators is passed to remove whitespace in output
    return mark_safe('JSON.parse("%s")' % escapejs(json.dumps(value, separators=(',', ':'))))
</snippet></ROW><ROW><id>14290542</id><snippet>var Settings = {{ js_settings|to_js }};
</snippet></ROW><ROW><id>14290581</id><snippet>xrange</snippet></ROW><ROW><id>14290581</id><snippet>range</snippet></ROW><ROW><id>14290581</id><snippet>subtotal = sum(dictionary.itervalues())</snippet></ROW><ROW><id>14290581</id><snippet>float</snippet></ROW><ROW><id>14290581</id><snippet>'%.2f' % value</snippet></ROW><ROW><id>14290581</id><snippet>'{:.2f}' .format(value)</snippet></ROW><ROW><id>14290664</id><snippet>0</snippet></ROW><ROW><id>14290711</id><snippet>i</snippet></ROW><ROW><id>14290711</id><snippet>a</snippet></ROW><ROW><id>14290711</id><snippet>i-diff</snippet></ROW><ROW><id>14290711</id><snippet>a</snippet></ROW><ROW><id>14290711</id><snippet>&gt;&gt;&gt; a = [1,2,3,4,5]
&gt;&gt;&gt; diff = 2
&gt;&gt;&gt; a_set = set(a)
&gt;&gt;&gt; sum(i-diff in a_set for i in a_set)
3
</snippet></ROW><ROW><id>14290711</id><snippet>i-diff in a_set</snippet></ROW><ROW><id>14290711</id><snippet>bool</snippet></ROW><ROW><id>14290711</id><snippet>1</snippet></ROW><ROW><id>14290711</id><snippet>int</snippet></ROW><ROW><id>14290711</id><snippet>sum(1 for i in a_set if i-diff in a_set)</snippet></ROW><ROW><id>14290711</id><snippet>collections.Counter</snippet></ROW><ROW><id>14291092</id><snippet>if 'STRING TO LOOK FOR' in source:</snippet></ROW><ROW><id>14291092</id><snippet>if 'STRING TO LOOK FOR' in '\n'.join(source.split('\n', 20)[:20]):
</snippet></ROW><ROW><id>14291295</id><snippet>import string
alphabets=string.uppercase
for i in range(0, 28):
   print alphabets[i % 26] * (i / 26 + 1)
</snippet></ROW><ROW><id>14291538</id><snippet>class</snippet></ROW><ROW><id>14291538</id><snippet>__init__</snippet></ROW><ROW><id>14291538</id><snippet>BaseA</snippet></ROW><ROW><id>14291538</id><snippet>authors</snippet></ROW><ROW><id>14291538</id><snippet>author_list</snippet></ROW><ROW><id>14291538</id><snippet>ChildA</snippet></ROW><ROW><id>14291538</id><snippet>BaseA</snippet></ROW><ROW><id>14291538</id><snippet>author_list = authors</snippet></ROW><ROW><id>14291538</id><snippet>author_list</snippet></ROW><ROW><id>14291538</id><snippet>BaseA</snippet></ROW><ROW><id>14291538</id><snippet>BaseB</snippet></ROW><ROW><id>14291538</id><snippet>authors</snippet></ROW><ROW><id>14291538</id><snippet>__init__</snippet></ROW><ROW><id>14291538</id><snippet>__init__</snippet></ROW><ROW><id>14291538</id><snippet>BaseB</snippet></ROW><ROW><id>14291538</id><snippet>child_a</snippet></ROW><ROW><id>14291538</id><snippet>child_b</snippet></ROW><ROW><id>14291538</id><snippet>ChildA.author_list</snippet></ROW><ROW><id>14291538</id><snippet>ChildB.author_list</snippet></ROW><ROW><id>14291538</id><snippet>['a', 'b']</snippet></ROW><ROW><id>14291538</id><snippet>__init__</snippet></ROW><ROW><id>14291544</id><snippet>annotate</snippet></ROW><ROW><id>14291544</id><snippet>GROUP BY</snippet></ROW><ROW><id>14291544</id><snippet>.values()</snippet></ROW><ROW><id>14291544</id><snippet>.group_by()</snippet></ROW><ROW><id>14291544</id><snippet>cat_to_prod_count = dict(Product.objects
                                .values('category_id')
                                .order_by()
                                .annotate(product_count=Count('id'))
                                .values_list('category_id', 'product_count'))
</snippet></ROW><ROW><id>14291544</id><snippet>dict</snippet></ROW><ROW><id>14291544</id><snippet>dehydrate</snippet></ROW><ROW><id>14291544</id><snippet> bundle.data['product_count'] = cat_to_prod_count[bundle.obj.id]
</snippet></ROW><ROW><id>14291642</id><snippet>run main.py</snippet></ROW><ROW><id>14291642</id><snippet>python main.py</snippet></ROW><ROW><id>14291642</id><snippet># Extract PCA components for each set
pca1 = pcar[:len(set1d)]
pca2 = pcar[len(set1d):len(set1d)+len(set2d)]
pca3 = pcar[-len(set3d):]

# Iterate over each pair of components
for i in range(3):
    for j in range(i+1, 3):
        f = plt.figure()
        ax = f.add_subplot(111)

        ax.plot(pca1[:, i], pca1[:, j], 'b.')
        ax.plot(pca2[:, i], pca2[:, j], 'r.')
        ax.plot(pca3[:, i], pca3[:, j], 'g.')

        ax.set_xlabel('PC%d' % i)
        ax.set_ylabel('PC%d' % j)

        plt.savefig('PC%d_vs_PC%d.png' % (i, j))
        plt.close(f)
</snippet></ROW><ROW><id>14291731</id><snippet>re.finditer()</snippet></ROW><ROW><id>14291731</id><snippet>import re

a = 'foo 123 blah 234 xxx 655'
for m in re.finditer(r'(\d+)', a):
  print m.group(1)
</snippet></ROW><ROW><id>14292356</id><snippet>binascii.hexlify()</snippet></ROW><ROW><id>14292356</id><snippet>In [25]: strs=b'\x0f\x00\x00\x00NR09G05164\x00'

In [26]: import binascii

In [27]: binascii.hexlify(strs)
Out[27]: b'0f0000004e52303947303531363400'
</snippet></ROW><ROW><id>14292512</id><snippet>mp.Process</snippet></ROW><ROW><id>14292512</id><snippet>name</snippet></ROW><ROW><id>14292512</id><snippet>myWait</snippet></ROW><ROW><id>14292512</id><snippet>mp.current_process().name</snippet></ROW><ROW><id>14292512</id><snippet>processNb</snippet></ROW><ROW><id>14292512</id><snippet>(name, wait, startedAt, endedAt)</snippet></ROW><ROW><id>14292512</id><snippet>import time
import multiprocessing as mp

def myWait(wait, resultQueue):
    startedAt = time.strftime("%H:%M:%S", time.localtime())
    time.sleep(wait)
    endedAt = time.strftime("%H:%M:%S", time.localtime())
    name = mp.current_process().name
    resultQueue.put(
        (name, wait, startedAt, endedAt))


# queue initialisation
resultQueue = mp.Queue()

# process creation arg: (process number, sleep time, queue)
proc =  [
    mp.Process(target=myWait, name = '0', args=(2, resultQueue,)),
    mp.Process(target=myWait, name = '1', args=(1, resultQueue,))
    ]

# starting processes
for p in proc:
    p.start()

for p in proc:
    p.join()

# print results
for p in proc:
    name, wait, startedAt, endedAt = resultQueue.get()
    print('Process %s started at %s wait %s ended at %s' %
          (name, startedAt, wait, endedAt))
</snippet></ROW><ROW><id>14292558</id><snippet>&gt;&gt;&gt; re.findall(r'{[^}]*}|\b\w+\b', u'{Łatwe|Proste} szukanie mieszkania {Sprawdź|Wypróbuj juz dziś}, znalezienie {wcale|w ogóle}', re.U)
[u'{\u0141atwe|Proste}', u'szukanie', u'mieszkania', u'{Sprawd\u017a|Wypr\xf3buj juz dzi\u015b}', u'znalezienie', u'{wcale|w og\xf3le}']
</snippet></ROW><ROW><id>14292558</id><snippet>re.U</snippet></ROW><ROW><id>14292558</id><snippet>\b</snippet></ROW><ROW><id>14292558</id><snippet>\w</snippet></ROW><ROW><id>14292558</id><snippet>\d</snippet></ROW><ROW><id>14292558</id><snippet>\s</snippet></ROW><ROW><id>14292558</id><snippet>re.findall(r'{[^}]*}|\b\w+\b', '{Łatwe|Proste} szukanie mieszkania {Sprawdź|Wypróbuj juz dziś}, znalezienie {wcale|w ogóle}')
</snippet></ROW><ROW><id>14292558</id><snippet>\b</snippet></ROW><ROW><id>14292558</id><snippet>\w</snippet></ROW><ROW><id>14292558</id><snippet>\d</snippet></ROW><ROW><id>14292558</id><snippet>\s</snippet></ROW><ROW><id>14292558</id><snippet>re.U</snippet></ROW><ROW><id>14292809</id><snippet>tk.Label</snippet></ROW><ROW><id>14292809</id><snippet>setImage</snippet></ROW><ROW><id>14292809</id><snippet>setImage</snippet></ROW><ROW><id>14292809</id><snippet>initUI</snippet></ROW><ROW><id>14292809</id><snippet>self.label.configure</snippet></ROW><ROW><id>14292809</id><snippet>import Tkinter as tk
import Image
import ImageTk
import numpy as np
import tkFileDialog

class DIP(tk.Frame):
    def __init__(self, parent):
        tk.Frame.__init__(self, parent) 
        self.parent = parent        
        self.initUI()

    def initUI(self):
        self.parent.title("DIP Algorithms- Simple Photo Editor")
        self.pack(fill = tk.BOTH, expand = 1)

        menubar = tk.Menu(self.parent)
        self.parent.config(menu = menubar)

        self.label1 = tk.Label(self, border = 25)
        self.label2 = tk.Label(self, border = 25)
        self.label1.grid(row = 1, column = 1)
        self.label2.grid(row = 1, column = 2)

        #Open Image Menu
        fileMenu = tk.Menu(menubar)
        fileMenu.add_command(label = "Open", command = self.onOpen)
        menubar.add_cascade(label = "File", menu = fileMenu)

        #menu for image ngative
        basicMenu = tk.Menu(menubar)
        basicMenu.add_command(label = "Negative", command = self.onNeg)
        menubar.add_cascade(label = "Basic", menu = basicMenu)

    def onNeg(self):
        #Image Negative Menu callback
        I2 = 255-self.I;
        im = Image.fromarray(np.uint8(I2))
        photo2 = ImageTk.PhotoImage(im)
        self.label2.image = photo2 # keep a reference!

    def setImage(self):
        self.img = Image.open(self.fn)
        self.I = np.asarray(self.img)
        l, h = self.img.size
        text = str(2*l+100)+"x"+str(h+50)+"+0+0"
        self.parent.geometry(text)
        photo = ImageTk.PhotoImage(self.img)
        self.label1.configure(image = photo)
        self.label1.image = photo # keep a reference!

    def onOpen(self):
        #Open Callback
        ftypes = [('Image Files', '*.tif *.jpg *.png')]
        dlg = tkFileDialog.Open(self, filetypes = ftypes)
        filename = dlg.show()
        self.fn = filename
        #print self.fn #prints filename with path here
        self.setImage()

    #def onError(self):
        #box.showerror("Error", "Could not open file")    

def main():

    root = tk.Tk()
    DIP(root)
    root.geometry("320x240")
    root.mainloop()  


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>14292897</id><snippet>class Peeker(object):
    def __init__(self, fileobj):
        self.fileobj = fileobj
        self.buf = cStringIO.StringIO()

    def _append_to_buf(self, contents):
        oldpos = self.buf.tell()
        self.buf.seek(0, os.SEEK_END)
        self.buf.write(contents)
        self.buf.seek(oldpos)

    def peek(self, size):
        contents = self.fileobj.read(size)
        self._append_to_buf(contents)
        return contents

    def read(self, size=None):
        if size is None:
            return self.buf.read() + self.fileobj.read()
        contents = self.buf.read(size)
        if len(contents) &lt; size:
            contents += self.fileobj.read(size - len(contents))
        return contents

    def readline(self):
        line = self.buf.readline()
        if not line.endswith('\n'):
            line += self.fileobj.readline()
        return line

sys.stdin = Peeker(sys.stdin)
</snippet></ROW><ROW><id>14292897</id><snippet>sys.stdin</snippet></ROW><ROW><id>14292897</id><snippet>stdin.buffer</snippet></ROW><ROW><id>14292897</id><snippet>TextIOWrapper</snippet></ROW><ROW><id>14292897</id><snippet>TextIOWrapper</snippet></ROW><ROW><id>14292897</id><snippet>sys.stdin</snippet></ROW><ROW><id>14292897</id><snippet>sys.stdin.buffer</snippet></ROW><ROW><id>14292897</id><snippet>cStringIO.StringIO</snippet></ROW><ROW><id>14292897</id><snippet>io.BytesIO</snippet></ROW><ROW><id>14292897</id><snippet>'\n'</snippet></ROW><ROW><id>14292897</id><snippet>b'\n'</snippet></ROW><ROW><id>14292913</id><snippet>groups = data_list.xpath("""//td[text()='groups']
                                 /following-sibling::td/table/tr/td/text()""")
</snippet></ROW><ROW><id>14292913</id><snippet>groups = data_list.xpath("""//td[text()='groups']
                                 /following-sibling::*//td/text()""")
</snippet></ROW><ROW><id>14292913</id><snippet>groups</snippet></ROW><ROW><id>14292913</id><snippet>groups = data_list.xpath("""//td[text()='groups']
                                 /following-sibling::*""")[0]
</snippet></ROW><ROW><id>14292913</id><snippet>text_content</snippet></ROW><ROW><id>14292913</id><snippet>groups = groups.text_content().split()
</snippet></ROW><ROW><id>14292913</id><snippet>group_a</snippet></ROW><ROW><id>14292913</id><snippet>group_b</snippet></ROW><ROW><id>14292913</id><snippet>group_c</snippet></ROW><ROW><id>14292928</id><snippet>python -tt</snippet></ROW><ROW><id>14293432</id><snippet>class MyObj(object):
    def __init__(self):
        self.thread = threading.Thread(target=self.run)
    def run(self):
        ...
</snippet></ROW><ROW><id>14293535</id><snippet>__init__</snippet></ROW><ROW><id>14293535</id><snippet>setUp</snippet></ROW><ROW><id>14293535</id><snippet>setUp</snippet></ROW><ROW><id>14293535</id><snippet>tearDown</snippet></ROW><ROW><id>14293535</id><snippet>__init__</snippet></ROW><ROW><id>14293535</id><snippet>__init__</snippet></ROW><ROW><id>14293646</id><snippet>stop_words</snippet></ROW><ROW><id>14293646</id><snippet>lower()</snippet></ROW><ROW><id>14293646</id><snippet>text</snippet></ROW><ROW><id>14293646</id><snippet>lower()</snippet></ROW><ROW><id>14293646</id><snippet>stop_words = set(stop_words)
def tokenizer(text):
   return [stemmer.stem(tok) for tok in nltk.word_tokenize(text.lower())
           if tok.isalpha() and tok not in stop_words]
</snippet></ROW><ROW><id>14293646</id><snippet>nltk.word_tokenize</snippet></ROW><ROW><id>14293646</id><snippet>stemmer.stem</snippet></ROW><ROW><id>14293646</id><snippet>stop_words = set(stop_words)
def tokenizer(text, stem = stemmer.stem, tokenize = nltk.word_tokenize):
   return [stem(tok) for tok in tokenize(text.lower())
           if tok.isalpha() and tok not in stop_words]
</snippet></ROW><ROW><id>14293646</id><snippet>stem</snippet></ROW><ROW><id>14293646</id><snippet>tokenize</snippet></ROW><ROW><id>14293646</id><snippet>tokenizer</snippet></ROW><ROW><id>14293646</id><snippet>tokenizer</snippet></ROW><ROW><id>14293646</id><snippet>stem</snippet></ROW><ROW><id>14293646</id><snippet>tokenize</snippet></ROW><ROW><id>14293646</id><snippet>tokenizer</snippet></ROW><ROW><id>14293880</id><snippet>request.vars</snippet></ROW><ROW><id>14293880</id><snippet>request</snippet></ROW><ROW><id>14293880</id><snippet>def search():
    rows = None
    if request.vars:
        query = reduce(lambda a, b: (a &amp; b),
            (db.mytable[var] == request.vars[var] for var in request.vars))
        rows = db(query).select()
    return dict(rows=rows)
</snippet></ROW><ROW><id>14293880</id><snippet>reduce()</snippet></ROW><ROW><id>14293880</id><snippet>(db.mytable.field1 == request.vars.field1) &amp; \
(db.mytable.field2 == request.vars.field2) &amp; \
...
(db.mytable.fieldN == request.vars.fieldN)
</snippet></ROW><ROW><id>14293953</id><snippet>a</snippet></ROW><ROW><id>14293953</id><snippet>b</snippet></ROW><ROW><id>14293953</id><snippet>for x, y in zip(a, b):
    print(x + y)
</snippet></ROW><ROW><id>14293953</id><snippet>a</snippet></ROW><ROW><id>14293953</id><snippet>b</snippet></ROW><ROW><id>14293953</id><snippet>import itertools as IT
for x, y in IT.izip(a, b):
    print(x + y)
</snippet></ROW><ROW><id>14293953</id><snippet>zip</snippet></ROW><ROW><id>14293953</id><snippet>a</snippet></ROW><ROW><id>14293953</id><snippet>b</snippet></ROW><ROW><id>14293953</id><snippet>itertools.izip</snippet></ROW><ROW><id>14293953</id><snippet>zip(a,b)</snippet></ROW><ROW><id>14293953</id><snippet>itertools.izip(a,b)</snippet></ROW><ROW><id>14293953</id><snippet>zip</snippet></ROW><ROW><id>14293953</id><snippet>itertools.izip</snippet></ROW><ROW><id>14293953</id><snippet>zip</snippet></ROW><ROW><id>14293953</id><snippet>a</snippet></ROW><ROW><id>14293953</id><snippet>b</snippet></ROW><ROW><id>14293989</id><snippet>PIL</snippet></ROW><ROW><id>14293989</id><snippet>from PIL import Image

im = Image.open("image.jpg")

pix = im.load()
print pix[x,y]
</snippet></ROW><ROW><id>14293989</id><snippet>PIL</snippet></ROW><ROW><id>14293989</id><snippet>ImageGrab</snippet></ROW><ROW><id>14293989</id><snippet>import PIL.ImageGrab

# pixel color at x, y
print PIL.ImageGrab.grab().load()[x, y]
</snippet></ROW><ROW><id>14293989</id><snippet>ImageGrab</snippet></ROW><ROW><id>14294059</id><snippet>email</snippet></ROW><ROW><id>14294059</id><snippet>import email, getpass, imaplib, os, re
import matplotlib.pyplot as plt
</snippet></ROW><ROW><id>14294059</id><snippet> detach_dir = "F:\OTHERS\CS\PYTHONPROJECTS"  
</snippet></ROW><ROW><id>14294059</id><snippet>user = raw_input("Enter your GMail username --&gt; ")
pwd = getpass.getpass("Enter your password --&gt; ")
</snippet></ROW><ROW><id>14294059</id><snippet>m = imaplib.IMAP4_SSL("imap.gmail.com")
m.login(user, pwd)
</snippet></ROW><ROW><id>14294059</id><snippet>m.select("BUSINESS/PETROLEUM")    
</snippet></ROW><ROW><id>14294059</id><snippet>m.list()</snippet></ROW><ROW><id>14294059</id><snippet>resp, items = m.search(None, '(FROM "EIA_eLists@eia.gov")')
items = items[0].split()  

my_msg = [] # store relevant msgs here in please
msg_cnt = 0
break_ = False
</snippet></ROW><ROW><id>14294059</id><snippet>items[::-1]</snippet></ROW><ROW><id>14294059</id><snippet>for emailid in items[::-1]:

    resp, data = m.fetch(emailid, "(RFC822)")

    if ( break_ ):
        break

    for response_part in data:

      if isinstance(response_part, tuple):
          msg = email.message_from_string(response_part[1])
          varSubject = msg['subject']
          varDate = msg['date']
</snippet></ROW><ROW><id>14294059</id><snippet>$</snippet></ROW><ROW><id>14294059</id><snippet>          if varSubject[0] == '$':
              r, d = m.fetch(emailid, "(UID BODY[TEXT])")

              ymd = email.utils.parsedate(varDate)[0:3]
              my_msg.append([ email.message_from_string(d[0][1]) , ymd ])

              msg_cnt += 1
</snippet></ROW><ROW><id>14294059</id><snippet>              if ( msg_cnt == 100 ):
                  break_ = True

l = len(my_msg)
US, EastCst, NewEng, CenAtl, LwrAtl, Midwst, GulfCst, RkyMt, WCst, CA = 
[0]*l, [0]*l, [0]*l, [0]*l, [0]*l, [0]*l, [0]*l, [0]*l, [0]*l, [0]*l 
absc = [k for k in range(len(my_msg))]
dates = [str(msg[1][2])+'-'+str(msg[1][3])+'-'+str(msg[1][0]) for msg in my_msg]
cnt = -1

for msg in my_msg:

    data = str(msg[0]).split("\n")
    cnt+=1
    for c in [k.split("\r")[0] for k in data[2:-2]]: 
</snippet></ROW><ROW><id>14294059</id><snippet>        m = re.match( r"(.+)(=3D\$)(.+)" , c )  
        if( m == None ):
            continue 

        country, na, price = m.groups()

        if ( country == "US" or country == "USA" ) :
            US[cnt] = float(price)
        elif( country == "NewEng" ) :
            EastCst[cnt] = float(price)    
        elif( country == "EastCst" ) :
            NewEng[cnt] = float(price)  
        elif( country == "EastCst" ) :
            CenAtl[cnt] = float(price) 
        elif( country == "EastCst" ) :
            LwrAtl[cnt] = float(price)
        elif( country == "EastCst" ) :
            Midwst[cnt] = float(price)
        elif( country == "EastCst" ) :
            GulfCst[cnt] = float(price)
        elif( country == "EastCst" ) :
            RkyMt[cnt] = float(price)
        elif( country == "EastCst" ) :
            WCst[cnt] = float(price)
        elif( country == "EastCst" ) :
            CA[cnt] = float(price)
</snippet></ROW><ROW><id>14294059</id><snippet>plt.plot( absc, US )

plt.plot( absc, EastCst )    
plt.plot( absc, NewEng, '#251BE0' )    
plt.plot( absc, EastCst, '#1BE0BF' )
plt.plot( absc, CenAtl, '#E0771B' )
plt.plot( absc, LwrAtl, '#CC1BE0' )
plt.plot( absc, Midwst, '#E01B8B' ) 
plt.plot( absc, GulfCst, '#E01B3F' )
plt.plot( absc, RkyMt )
plt.plot( absc, WCst )
plt.plot( absc, CA )

plt.legend( ('US', 'EastCst', 'NewEng' , 'EastCst', 'CenAtl', 'LwrAtl', 'Midwst', 'GulfCst', 'RkyMt', 'WCst', 'CA')  )
plt.title('Diesel price')
locs,labels = plt.xticks(absc, dates)
plt.show()
</snippet></ROW><ROW><id>14294453</id><snippet>&gt;&gt; obj.__class__
</snippet></ROW><ROW><id>14294453</id><snippet>&gt;&gt; obj.__class__.__bases__
</snippet></ROW><ROW><id>14294658</id><snippet>sorted(pairs, key=lambda x: (x[0], -x[1]))
</snippet></ROW><ROW><id>14294658</id><snippet>sorted(pairs, lambda x, y: cmp(x[0], y[0]) or cmp(y[1], x[1]))
</snippet></ROW><ROW><id>14294682</id><snippet>\r\n</snippet></ROW><ROW><id>14294682</id><snippet>\n</snippet></ROW><ROW><id>14294682</id><snippet>dumps()</snippet></ROW><ROW><id>14294682</id><snippet>loads()</snippet></ROW><ROW><id>14294682</id><snippet>xmlrpclib</snippet></ROW><ROW><id>14294682</id><snippet>&gt;&gt;&gt; from xmlrpclib import dumps, loads
&gt;&gt;&gt; s = '\x3a\x0d\x0a'
&gt;&gt;&gt; e = dumps((s,)) # Just a tuple
&gt;&gt;&gt; e
'&lt;params&gt;\n&lt;param&gt;\n&lt;value&gt;&lt;string&gt;:\r\n&lt;/string&gt;&lt;/value&gt;\n&lt;/param&gt;\n&lt;/params&gt;\n'
&gt;&gt;&gt; loads(e)
((':\n',), None)
</snippet></ROW><ROW><id>14294682</id><snippet>loads()</snippet></ROW><ROW><id>14294682</id><snippet>\r\n</snippet></ROW><ROW><id>14294682</id><snippet>\n</snippet></ROW><ROW><id>14294682</id><snippet>\r</snippet></ROW><ROW><id>14294682</id><snippet>s.encode('hex')</snippet></ROW><ROW><id>14294682</id><snippet>s.decode('hex')</snippet></ROW><ROW><id>14294742</id><snippet>print()</snippet></ROW><ROW><id>14294742</id><snippet>print(HANGMANPICS[len(missedLetters)]  # Note the missing `)` here
</snippet></ROW><ROW><id>14294742</id><snippet>print()</snippet></ROW><ROW><id>14295036</id><snippet>$ python2.6 -c "from xml.etree import ElementTree as ET; print ET.tostring(ET.Comment('&lt;'))"
&lt;!-- &lt; --&gt;
</snippet></ROW><ROW><id>14295036</id><snippet>$python2.7 -c "from xml.etree import ElementTree as ET; print ET.tostring(ET.Comment('&lt;'))"
&lt;!--&lt;--&gt;
</snippet></ROW><ROW><id>14295036</id><snippet>from xml.dom import minidom

doc = minidom.parse(r"C:\sample.xml")

comment = doc.createComment("&lt;name&gt;cranberry&lt;/name&gt;")
doc.documentElement.appendChild(comment)

doc.writexml(r"C:\sample1.xml")
</snippet></ROW><ROW><id>14295489</id><snippet>ttk.Button(mainframe, text="Calculate", command = lambda: calculate(feet)).grid(column=3, row=3, sticky=W)
</snippet></ROW><ROW><id>14295489</id><snippet>calculate</snippet></ROW><ROW><id>14295489</id><snippet>feet</snippet></ROW><ROW><id>14295489</id><snippet>def calculate(feet):
</snippet></ROW><ROW><id>14295618</id><snippet>class MyClassName(SomeOtherClassName):</snippet></ROW><ROW><id>14295618</id><snippet>MyClassName</snippet></ROW><ROW><id>14295618</id><snippet>SomeOtherClassName</snippet></ROW><ROW><id>14295618</id><snippet>DemoWindow</snippet></ROW><ROW><id>14295618</id><snippet>Gtk.Window</snippet></ROW><ROW><id>14295618</id><snippet>MyClassName(args)</snippet></ROW><ROW><id>14295618</id><snippet>MyClassName</snippet></ROW><ROW><id>14295618</id><snippet>__init__</snippet></ROW><ROW><id>14295618</id><snippet>args</snippet></ROW><ROW><id>14295618</id><snippet>MyClassName.my_function()</snippet></ROW><ROW><id>14295618</id><snippet>my_function</snippet></ROW><ROW><id>14295618</id><snippet>self</snippet></ROW><ROW><id>14295618</id><snippet>my_function</snippet></ROW><ROW><id>14295618</id><snippet>__init__</snippet></ROW><ROW><id>14295618</id><snippet>self</snippet></ROW><ROW><id>14295618</id><snippet>self</snippet></ROW><ROW><id>14295682</id><snippet>clean_str = unicode(str_var_with_strange_coding, errors='ignore')
</snippet></ROW><ROW><id>14295709</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>14295709</id><snippet>.time()</snippet></ROW><ROW><id>14295709</id><snippet>&gt;&gt;&gt; datetime.datetime.strptime('03:55', '%H:%M').time()
datetime.time(3, 55)
</snippet></ROW><ROW><id>14295709</id><snippet>.strptime()</snippet></ROW><ROW><id>14295815</id><snippet>__doc__</snippet></ROW><ROW><id>14295815</id><snippet>autodoc</snippet></ROW><ROW><id>14295815</id><snippet>reST</snippet></ROW><ROW><id>14295815</id><snippet>Markdown</snippet></ROW><ROW><id>14295815</id><snippet>@app.route('/download/&lt;int:id&gt;')
def download_id(id):
    '''This downloads a certain image specified by *id*'''
    return ...
</snippet></ROW><ROW><id>14296214</id><snippet>&gt;&gt;&gt; class FullTime(object):
...     def __init__(self, name):
...         self.name = name
...     def __repr__(self):
...         return "FullTime(%r)" % self.name
...
&gt;&gt;&gt; staffList = ["Alice", "Bob", "Eve"]
&gt;&gt;&gt; staffClassDict = {employee: FullTime(employee) for employee in staffList}
&gt;&gt;&gt; staffClassDict 
{'Bob': FullTime('Bob'), 'Alice': FullTime('Alice'), 'Eve': FullTime('Eve')}
</snippet></ROW><ROW><id>14296302</id><snippet>// Compute C = A * B
__global__ void matrixMultiply(float * A, float * B, float * C,
                   int numARows, int numAColumns,
                   int numBRows, int numBColumns,
                   int numCRows, int numCColumns) {
    float cValue = 0;
    int Row = blockIdx.y * blockDim.y + threadIdx.y;
    int Col = blockIdx.x * blockDim.x + threadIdx.x;

    if ((Row &lt; numCRows) &amp;&amp; (Col &lt; numCColumns)) {
        for (int k = 0; k &lt; numAColumns; k++) {
            cValue += A[Row*numAColumns + k] * B[k*numBColumns + Col];
        }
        C[Row*numCColumns + Col] = cValue;
    }
}
</snippet></ROW><ROW><id>14296302</id><snippet>// Compute C = A * B
__global__ void matrixMultiplyShared(float * A, float * B, float * C,
                     int numARows, int numAColumns,
                     int numBRows, int numBColumns,
                     int numCRows, int numCColumns) {
    __shared__ float ds_A[TILE_WIDTH_I][TILE_WIDTH_I];
    __shared__ float ds_B[TILE_WIDTH_I][TILE_WIDTH_I];

    int bx = blockIdx.x;
    int by = blockIdx.y;
    int tx = threadIdx.x;
    int ty = threadIdx.y;

    int Row = by * TILE_WIDTH + ty;
    int Col = bx * TILE_WIDTH + tx;
    float cValue = 0;

    for (int m = 0; m &lt; (numAColumns/TILE_WIDTH); m++) {
        if (Row &lt; numARows &amp;&amp; m*TILE_WIDTH_I + tx &lt; numAColumns) {
          ds_A[ty][tx] = A[Row*numAColumns + m*TILE_WIDTH_I + tx];
        } else {
         ds_A[ty][tx] = 0;
       }

        if (m*TILE_WIDTH_I + ty &lt; numBRows &amp;&amp; Col &lt; numBColumns) {
          ds_B[ty][tx] = B[(m*TILE_WIDTH_I + ty)*numBColumns + Col];
       } else {
         ds_B[ty][tx] = 0;
       }

        __syncthreads();

        if ((Row &lt; numCRows) &amp;&amp; (Col &lt; numCColumns)) {
            for (int k = 0; k &lt; TILE_WIDTH; k++) {
                cValue += ds_A[ty][k] * ds_B[k][tx];
            }
        }

        __syncthreads();
    }

    if ((Row &lt; numCRows) &amp;&amp; (Col &lt; numCColumns)) {
        C[Row*numCColumns + Col] = cValue;
    }
}
</snippet></ROW><ROW><id>14296310</id><snippet>', '.join('Name %(name)s Score %(score)d' % player for player in basicPlayers)
</snippet></ROW><ROW><id>14296310</id><snippet>join</snippet></ROW><ROW><id>14296310</id><snippet>basicPlayers = [{'name' : 'Bob','score' : 42}, {'name' : 'Joe','score' : 24}]

print ', '.join('Name %(name)s Score %(score)d' % 
                                           player for player in basicPlayers)
</snippet></ROW><ROW><id>14296436</id><snippet>getattr()</snippet></ROW><ROW><id>14296436</id><snippet>import types

instance = getattr(types, typename)(arguments)
</snippet></ROW><ROW><id>14296436</id><snippet>__name__</snippet></ROW><ROW><id>14296436</id><snippet>types = {}

class XBee24ZBCoordinator():
    # class definition

types[XBee24ZBCoordinator.__name__] = XBee24ZBCoordinator
</snippet></ROW><ROW><id>14296436</id><snippet>globals()</snippet></ROW><ROW><id>14296436</id><snippet>globals()['XBee24ZBCoordinator']</snippet></ROW><ROW><id>14296506</id><snippet>reduce()</snippet></ROW><ROW><id>14296506</id><snippet>sum()</snippet></ROW><ROW><id>14296506</id><snippet>i</snippet></ROW><ROW><id>14296506</id><snippet>enumerate()</snippet></ROW><ROW><id>14296506</id><snippet>zip</snippet></ROW><ROW><id>14296506</id><snippet>def weighted_average(items, weights):
    total = sum(sum(item)*weight for item, weight in zip(items, weights))
    return total/sum(weights)
</snippet></ROW><ROW><id>14296506</id><snippet>items</snippet></ROW><ROW><id>14296506</id><snippet>def weighted_average(items, weights=None):
    if not weights:
        weights = [1]*len(items)
    total = sum(sum(item)*weight for item, weight in zip_longest(items, weights))
    return total/sum(weights)
</snippet></ROW><ROW><id>14296567</id><snippet>with open('input.txt') as matrixfile:
    matrix = [list(line.strip()) for line in matrixfile]
</snippet></ROW><ROW><id>14296567</id><snippet>list()</snippet></ROW><ROW><id>14296567</id><snippet>.strip()</snippet></ROW><ROW><id>14296567</id><snippet>matrixfile</snippet></ROW><ROW><id>14296567</id><snippet>&gt;&gt;&gt; matrix
[['b', '-', '-', '-', 'd'], ['-', 'd', '-', '-', 'd'], ['-', '-', 'd', 'd', '-'], ['-', '-', 'd', '-', '-'], ['-', '-', '-', '-', 'd']]
&gt;&gt;&gt; matrix[0][2]
'-'
</snippet></ROW><ROW><id>14296611</id><snippet>new_word = word[1:] + word[0] + pyg
</snippet></ROW><ROW><id>14296688</id><snippet>with open("domainlist.txt", "r") as datafile:
    modified = ['.'.join(x.split('.')[-2:]) for x in datafile]
</snippet></ROW><ROW><id>14296688</id><snippet>file.read()</snippet></ROW><ROW><id>14296741</id><snippet>&lt;form action="/upload" method="post" enctype="multipart/form-data"&gt;
  &lt;input type="text" name="name" /&gt;
  &lt;input type="file" name="data" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>14296741</id><snippet>from bottle import route, request
@route('/upload', method='POST')
def do_upload():
    name = request.forms.name
    data = request.files.data
    if name and data and data.file:
        raw = data.file.read() # This is dangerous for big files
        filename = data.filename
        return "Hello %s! You uploaded %s (%d bytes)." % (name, filename, len(raw))
    return "You missed a field."
</snippet></ROW><ROW><id>14296741</id><snippet>name</snippet></ROW><ROW><id>14296741</id><snippet>data</snippet></ROW><ROW><id>14296741</id><snippet>name</snippet></ROW><ROW><id>14296741</id><snippet>data</snippet></ROW><ROW><id>14296741</id><snippet>raw</snippet></ROW><ROW><id>14296741</id><snippet>data.file.read()</snippet></ROW><ROW><id>14296741</id><snippet>raw</snippet></ROW><ROW><id>14296741</id><snippet>with open(filename,'w') as open_file:
    open_file.write(data.file.read())
</snippet></ROW><ROW><id>14296741</id><snippet>subprocess</snippet></ROW><ROW><id>14296741</id><snippet>Popen</snippet></ROW><ROW><id>14297031</id><snippet>     &lt;!doctype html&gt;
     &lt;html&gt;
     &lt;head&gt;
      {% block head %}
        &lt;link rel="stylesheet" href="{{ url_for('static', filename='base.css') }}"&gt;
      {% endblock %}
      &lt;/head&gt;
      &lt;body&gt;
      &lt;div id="content"&gt;{% block content %}{% endblock %}&lt;/div&gt;

     &lt;/body&gt;
     &lt;/html&gt;
</snippet></ROW><ROW><id>14297031</id><snippet>    {% extends "base.html" %}
    {% block head %}
      &lt;link rel="stylesheet" href="{{ url_for('static', filename='base.css') }}"&gt;
      &lt;link rel="stylesheet" href="{{ url_for('static', filename='admin.css') }}"&gt;
    {% endblock %}
    {% block content %}
     content goes here
    {% endblock %}
</snippet></ROW><ROW><id>14297031</id><snippet>    {% extends "base.html" %}
    {% block head %}
      &lt;link rel="stylesheet" href="{{ url_for('static', filename='base.css') }}"&gt;
      &lt;link rel="stylesheet" href="{{ url_for('static', filename='user.css') }}"&gt;
    {% endblock %}
    {% block content %}
     content goes here
    {% endblock %}
</snippet></ROW><ROW><id>14297031</id><snippet>      &lt;link rel="stylesheet" href="{{ url_for('static', filename='css/base.css') }}"&gt;
</snippet></ROW><ROW><id>14297127</id><snippet>tag = get_connection_tag(connections_tag, connection_type)
if not tag:
    pass
</snippet></ROW><ROW><id>14297220</id><snippet>&gt;&gt;&gt; year = 2013
&gt;&gt;&gt; days = [datetime.datetime(year, 1, 1) + datetime.timedelta(days=i) for i in range(366)]
&gt;&gt;&gt; days = [day for day in days if day.year == year and day.weekday() in (0, 5)]
&gt;&gt;&gt; formatted = [day.strftime("%Y-%m-%d") for day in days]
&gt;&gt;&gt; len(formatted)
104
&gt;&gt;&gt; formatted[:10]
['2013-01-05', '2013-01-07', '2013-01-12', '2013-01-14', '2013-01-19', '2013-01-21', '2013-01-26', '2013-01-28', '2013-02-02', '2013-02-04']
</snippet></ROW><ROW><id>14297408</id><snippet>pdb.runcall</snippet></ROW><ROW><id>14297408</id><snippet>(Pdb) pdb.runcall(func, *args, **kwds)   # e.g. pdb.runcall(myfunc, arg1, arg2)
</snippet></ROW><ROW><id>14297408</id><snippet>(Pdb) b my_module.py:123    # b ([file:]lineno | function) [, condition]
</snippet></ROW><ROW><id>14297408</id><snippet>pdb.runeval("[myfunc(x) for x in range(3)]", globals(), locals())
# or with ... some_module.globals())
</snippet></ROW><ROW><id>14297408</id><snippet>globals(), locals()</snippet></ROW><ROW><id>14297408</id><snippet>__main__</snippet></ROW><ROW><id>14297408</id><snippet>!expression</snippet></ROW><ROW><id>14297516</id><snippet>&gt;&gt;&gt; from sqlalchemy.orm.evaluator import EvaluatorCompiler
&gt;&gt;&gt; print EvaluatorCompiler().process(bool_clause)(a_foo)
False
&gt;&gt;&gt; print EvaluatorCompiler().process(int_clause)(a_foo)
15
</snippet></ROW><ROW><id>14297516</id><snippet>in_()</snippet></ROW><ROW><id>14297516</id><snippet>&lt;anything&gt;.someattr &lt;some operator&gt; &lt;somethingelse&gt;</snippet></ROW><ROW><id>14297516</id><snippet>self</snippet></ROW><ROW><id>14297516</id><snippet>cls</snippet></ROW><ROW><id>14297516</id><snippet>&lt;anything&gt;</snippet></ROW><ROW><id>14297516</id><snippet>class Foo(Base):
    __tablename__ = 'foo'
    id = Column(Integer, primary_key=True)
    bar = Column(Integer)

    @hybrid_method
    def bool_clause(self, other):
        return self.bar &gt; other

    @hybrid_method
    def int_clause(self, other):
        return self.bar + other

&gt;&gt;&gt; a_foo = Foo(bar=5)
&gt;&gt;&gt; print a_foo.bool_clause(10)
False
&gt;&gt;&gt; print a_foo.int_clause(10)
15
</snippet></ROW><ROW><id>14297516</id><snippet>or_()</snippet></ROW><ROW><id>14297516</id><snippet>and_()</snippet></ROW><ROW><id>14297925</id><snippet>list_soft = Listbox(software_list)
s = Scrollbar(software_list)
... and so on...
</snippet></ROW><ROW><id>14298046</id><snippet>requests.session</snippet></ROW><ROW><id>14298046</id><snippet>import requests
session = requests.session
payload = {'uname': 'name', 'password': 'pswd123'}
r = session.post('http://localhost/python', data=payload)
r = session.get('http://localhost/authenticated/resource')
#   ^^^^^^^
</snippet></ROW><ROW><id>14298372</id><snippet>responsemap = {
    (True,  True,  False): "a and b",
    (True,  False, True):  "a and c",
    (True,  True,  True):  "a and b and c"
}

def Hello(a=None, b=None, c=None):
    return responsemap.get((bool(a), bool(b), bool(c)), None)
</snippet></ROW><ROW><id>14298372</id><snippet>def Hello(a=None, b=None, c=None):
    return ' and '.join([n for n in ('a', 'b', 'c') if locals()[n]])
</snippet></ROW><ROW><id>14298519</id><snippet>for b in level1blocks[:]:
</snippet></ROW><ROW><id>14298519</id><snippet>level1blocks</snippet></ROW><ROW><id>14298519</id><snippet>for b in range(len(level1blocks)):
</snippet></ROW><ROW><id>14298555</id><snippet>__getitem__</snippet></ROW><ROW><id>14298555</id><snippet>class Vector(object):
    # rest of the class

    def __getitem__(self, index):
        return (self.x, self.y)[index]
</snippet></ROW><ROW><id>14298555</id><snippet>&gt;&gt;&gt; v = Vector(10, 20)
&gt;&gt;&gt; v
&lt;__main__.Vector object at 0x10866ad90&gt;
&gt;&gt;&gt; str(v)
'(10, 20)'
&gt;&gt;&gt; v.x
10
&gt;&gt;&gt; v[0]
10
</snippet></ROW><ROW><id>14298555</id><snippet>__str__</snippet></ROW><ROW><id>14298647</id><snippet>def estimated_autocorrelation(x):
    """
    http://stackoverflow.com/q/14297012/190597
    http://en.wikipedia.org/wiki/Autocorrelation#Estimation
    """
    n = len(x)
    variance = x.var()
    x = x-x.mean()
    r = np.correlate(x, x, mode = 'full')[-n:]
    assert np.allclose(r, np.array([(x[:n-k]*x[-(n-k):]).sum() for k in range(n)]))
    result = r/(variance*(np.arange(n, 0, -1)))
    return result
</snippet></ROW><ROW><id>14298647</id><snippet>assert</snippet></ROW><ROW><id>14298647</id><snippet>python -O</snippet></ROW><ROW><id>14298647</id><snippet>-O</snippet></ROW><ROW><id>14298661</id><snippet>labels</snippet></ROW><ROW><id>14298661</id><snippet>Categorical</snippet></ROW><ROW><id>14298661</id><snippet>qcut</snippet></ROW><ROW><id>14298661</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.random.seed(1001)
&gt;&gt;&gt; df = pd.DataFrame(np.random.randn(10, 2), columns=['A', 'B'])
&gt;&gt;&gt; df
          A         B
0 -1.086446 -0.896065
1 -0.306299 -1.339934
2 -1.206586 -0.641727
3  1.307946  1.845460
4  0.829115 -0.023299
5 -0.208564 -0.916620
6 -1.074743 -0.086143
7  1.175839 -1.635092
8  1.228194  1.076386
9  0.394773 -0.387701
&gt;&gt;&gt; q = pd.qcut(df["A"], 5)
&gt;&gt;&gt; q
Categorical: A
array([[-1.207, -1.0771], (-1.0771, -0.248], [-1.207, -1.0771],
       (1.186, 1.308], (0.569, 1.186], (-0.248, 0.569], (-1.0771, -0.248],
       (0.569, 1.186], (1.186, 1.308], (-0.248, 0.569]], dtype=object)
Levels (5): Index([[-1.207, -1.0771], (-1.0771, -0.248],
                   (-0.248, 0.569], (0.569, 1.186], (1.186, 1.308]], dtype=object)
&gt;&gt;&gt; q.labels
array([0, 1, 0, 4, 3, 2, 1, 3, 4, 2])
</snippet></ROW><ROW><id>14298661</id><snippet>&gt;&gt;&gt; len(q.levels) - q.labels
array([5, 4, 5, 1, 2, 3, 4, 2, 1, 3])
&gt;&gt;&gt; quintile(df, "A")
&gt;&gt;&gt; np.array(df["A"])
array([5, 4, 5, 1, 2, 3, 4, 2, 1, 3])
</snippet></ROW><ROW><id>14298829</id><snippet>df = pd.read_csv(io.BytesIO(text), parse_dates = [[0,1]], header = None, index_col = 0)
print(df)
#                      2
# 0_1                   
# 2012-01-05 08:00:00  1
# 2012-01-05 08:00:30  2
# 2012-01-05 08:01:00  3
# 2012-01-05 08:01:30  4
# 2012-01-05 08:02:00  5
</snippet></ROW><ROW><id>14298829</id><snippet>df2 = pd.read_csv(io.BytesIO(text), parse_dates = True, header = None, index_col = [0,1])
print(df2)
#                   2
# 0          1       
# 2012-01-05 80000  1
#            80030  2
#            80100  3
#            80130  4
#            80200  5
</snippet></ROW><ROW><id>14298829</id><snippet>import io
import pandas as pd

text = '''\
20120105, 080000,   1
20120105, 080030,   2
20120105, 080100,   3
20120105, 080130,   4
20120105, 080200,   5'''
</snippet></ROW><ROW><id>14298829</id><snippet>pd.read_csv(filename, ...)
</snippet></ROW><ROW><id>14298829</id><snippet>pd.read_csv(io.BytesIO(text), ...)
</snippet></ROW><ROW><id>14298889</id><snippet>MyClass.f</snippet></ROW><ROW><id>14298889</id><snippet>x.f</snippet></ROW><ROW><id>14298889</id><snippet>self</snippet></ROW><ROW><id>14298889</id><snippet>&gt;&gt;&gt; x.foo
&lt;bound method MyClass.foo of &lt;__main__.MyClass instance at 0x1004989e0&gt;&gt;
</snippet></ROW><ROW><id>14298889</id><snippet>self</snippet></ROW><ROW><id>14298889</id><snippet>&gt;&gt;&gt; MyClass.foo
&lt;unbound method MyClass.foo&gt;
</snippet></ROW><ROW><id>14298889</id><snippet>self</snippet></ROW><ROW><id>14298889</id><snippet>self</snippet></ROW><ROW><id>14298889</id><snippet>Python 3.3.0 (default, Dec  4 2012, 00:30:24) 
&gt;&gt;&gt; x.foo
&lt;bound method MyClass.foo of &lt;__main__.MyClass object at 0x100858ed0&gt;&gt;
&gt;&gt;&gt; MyClass.foo
&lt;function MyClass.foo at 0x10084f9e0&gt;
</snippet></ROW><ROW><id>14299040</id><snippet>print i</snippet></ROW><ROW><id>14299040</id><snippet>i</snippet></ROW><ROW><id>14299040</id><snippet>self.i</snippet></ROW><ROW><id>14299040</id><snippet>self</snippet></ROW><ROW><id>14299117</id><snippet>mr.developer</snippet></ROW><ROW><id>14299117</id><snippet>[buildout]
extensions = mr.developer
auto-checkout = yourpackage

[sources]
yourpackage = svn http://url.to/repository
</snippet></ROW><ROW><id>14299117</id><snippet>mr.developer</snippet></ROW><ROW><id>14299117</id><snippet>yourpackage</snippet></ROW><ROW><id>14299117</id><snippet>src/</snippet></ROW><ROW><id>14299117</id><snippet>setup.py</snippet></ROW><ROW><id>14299117</id><snippet>yourpackage</snippet></ROW><ROW><id>14299117</id><snippet>egg=false</snippet></ROW><ROW><id>14299117</id><snippet>sources</snippet></ROW><ROW><id>14299117</id><snippet>mr.developer</snippet></ROW><ROW><id>14299117</id><snippet>setup.py</snippet></ROW><ROW><id>14299117</id><snippet>iw.recipe.cmd</snippet></ROW><ROW><id>14299117</id><snippet>svn</snippet></ROW><ROW><id>14299117</id><snippet>[yourpackage]
recipe = iw.recipe.cmd
cmds = 
   svn export http://url.to/repository
</snippet></ROW><ROW><id>14299161</id><snippet>del</snippet></ROW><ROW><id>14299161</id><snippet>target_list</snippet></ROW><ROW><id>14299161</id><snippet>del [a, b, c]
</snippet></ROW><ROW><id>14299161</id><snippet>del (a, b, c)
</snippet></ROW><ROW><id>14299161</id><snippet>del a, b, c
</snippet></ROW><ROW><id>14299161</id><snippet>del ()
</snippet></ROW><ROW><id>14299161</id><snippet>()</snippet></ROW><ROW><id>14299166</id><snippet>/td//text()</snippet></ROW><ROW><id>14299166</id><snippet>td</snippet></ROW><ROW><id>14299793</id><snippet>bytes</snippet></ROW><ROW><id>14299793</id><snippet>with open('input', 'rb') as f:
    data = f.read()
data = list(data)
data = [byte + 1 for byte in data]
data = bytes(data)
# If this is all you're going to do, you could just do this:
# data = bytes((byte + 1) % 256 for byte in data)
with open('output', 'wb') as f:
    f.write(data)
</snippet></ROW><ROW><id>14299881</id><snippet>for fruit, quantity in orderList:
    print 'I have', quantity, fruit + 'es'
</snippet></ROW><ROW><id>14299881</id><snippet>for</snippet></ROW><ROW><id>14299881</id><snippet>for fruit_info in orderList:
    fruit, quantity = fruit_info

    print 'I have', quantity, fruit + 'es'
</snippet></ROW><ROW><id>14300008</id><snippet>text()=</snippet></ROW><ROW><id>14300008</id><snippet>@text</snippet></ROW><ROW><id>14300008</id><snippet>e = root.xpath('.//a[text()="TEXT A"]')
</snippet></ROW><ROW><id>14300008</id><snippet>e = root.xpath('.//a[contains(text(),"TEXT A")]')
</snippet></ROW><ROW><id>14300008</id><snippet>e = root.xpath('.//a[starts-with(text(),"TEXT A")]')
</snippet></ROW><ROW><id>14300008</id><snippet>import lxml.html as LH

text = '''\
&lt;html&gt;
    &lt;body&gt;
        &lt;a href="/1234.html"&gt;TEXT A&lt;/a&gt;
        &lt;a href="/3243.html"&gt;TEXT B&lt;/a&gt;
        &lt;a href="/7445.html"&gt;TEXT C&lt;/a&gt;
    &lt;body&gt;
&lt;/html&gt;'''

root = LH.fromstring(text)
e = root.xpath('.//a[text()="TEXT A"]')
print(e)
</snippet></ROW><ROW><id>14300008</id><snippet>[&lt;Element a at 0xb746d2cc&gt;]
</snippet></ROW><ROW><id>14300064</id><snippet>pickle</snippet></ROW><ROW><id>14300064</id><snippet>status</snippet></ROW><ROW><id>14300399</id><snippet>cd</snippet></ROW><ROW><id>14300399</id><snippet>%cd</snippet></ROW><ROW><id>14300399</id><snippet>load('/path/to/car.jpg')
</snippet></ROW><ROW><id>14300399</id><snippet>import os
load(os.path.expanduser('~/path/to/car.jpg')) # relative to user's home directory
</snippet></ROW><ROW><id>14300399</id><snippet> IMAGEDIR = '/path/to/images'
 load(os.path.join(IMAGEDIR, 'car.jpg'))
</snippet></ROW><ROW><id>14300399</id><snippet>cd</snippet></ROW><ROW><id>14300399</id><snippet>car.jpg</snippet></ROW><ROW><id>14300551</id><snippet>d.values()</snippet></ROW><ROW><id>14300551</id><snippet>d = {"Happy":"Clam", "Sad":"Panda"}
for v in d.values():
   print(v)
</snippet></ROW><ROW><id>14300551</id><snippet>Clam
Panda
</snippet></ROW><ROW><id>14300551</id><snippet>items()</snippet></ROW><ROW><id>14300551</id><snippet>d = {"Happy":"Clam", "Sad":"Panda"}
for k, v in d.items():
   print(k, v)
</snippet></ROW><ROW><id>14300551</id><snippet>Happy Clam
Sad Panda
</snippet></ROW><ROW><id>14300609</id><snippet>/app/~</snippet></ROW><ROW><id>14300609</id><snippet>C:\etc\etc\~</snippet></ROW><ROW><id>14300609</id><snippet>/home/user/~</snippet></ROW><ROW><id>14300609</id><snippet>RootFolder
    - .git folder
    - .heroku folder (if any)
    - requirements
    - Procfile
    - ProjectFolder
        - AppFolder
        - AppFolder
</snippet></ROW><ROW><id>14300609</id><snippet>from ProjectFolder.AppFolder import myclass</snippet></ROW><ROW><id>14300609</id><snippet>git</snippet></ROW><ROW><id>14300827</id><snippet>def string_16(data)
  [data.size].pack('s&gt;') + data.split('').map(&amp;:ord).pack('S&gt;*')
end

packet_bytes = "\x02\x33" + string_16(name) + string_16(host) + "\x00\x00\x63\xdd"
</snippet></ROW><ROW><id>14300942</id><snippet>IOLoop.instance().add_callback</snippet></ROW><ROW><id>14301097</id><snippet>a_list.extend(b_list)</snippet></ROW><ROW><id>14301097</id><snippet>a_list</snippet></ROW><ROW><id>14301097</id><snippet>a_list = a_list + b_list</snippet></ROW><ROW><id>14301097</id><snippet>a_list</snippet></ROW><ROW><id>14301097</id><snippet>a_list += b_list</snippet></ROW><ROW><id>14301097</id><snippet>extend</snippet></ROW><ROW><id>14301097</id><snippet>extend</snippet></ROW><ROW><id>14301097</id><snippet>+=</snippet></ROW><ROW><id>14301097</id><snippet>a_list</snippet></ROW><ROW><id>14301232</id><snippet>try-except</snippet></ROW><ROW><id>14301232</id><snippet>os.uname</snippet></ROW><ROW><id>14301232</id><snippet>man 2 uname</snippet></ROW><ROW><id>14301488</id><snippet>/bin/sh</snippet></ROW><ROW><id>14301488</id><snippet>PATH</snippet></ROW><ROW><id>14301488</id><snippet>python</snippet></ROW><ROW><id>14301488</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>14301488</id><snippet>mutt</snippet></ROW><ROW><id>14301488</id><snippet>MAILTO</snippet></ROW><ROW><id>14301488</id><snippet>source</snippet></ROW><ROW><id>14301488</id><snippet>crontab -e</snippet></ROW><ROW><id>14301488</id><snippet>*    *    *    *    *  command to be executed
┬    ┬    ┬    ┬    ┬
│    │    │    │    │
│    │    │    │    │
│    │    │    │    └───── day of week (0 - 7) (0 or 7 are Sunday, or use names)
│    │    │    └────────── month (1 - 12)
│    │    └─────────────── day of month (1 - 31)
│    └──────────────────── hour (0 - 23)
└───────────────────────── min (0 - 59)
</snippet></ROW><ROW><id>14301488</id><snippet>*</snippet></ROW><ROW><id>14301488</id><snippet>0/15**** /usr/bin/python /home/myuser/project/manage.py foo
</snippet></ROW><ROW><id>14301635</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>14301635</id><snippet>{{ contents|safe }}
</snippet></ROW><ROW><id>14301723</id><snippet>radom.sample</snippet></ROW><ROW><id>14301723</id><snippet>random.sample(population, k)
    Return a k length list of unique elements chosen from the population sequence. Used for random sampling without replacement.
</snippet></ROW><ROW><id>14301723</id><snippet>In [30]: np.prod(np.arange(36,46)/np.arange(91.0,101))
Out[30]: 0.00018429406441449519
</snippet></ROW><ROW><id>14302007</id><snippet>*</snippet></ROW><ROW><id>14302007</id><snippet>*</snippet></ROW><ROW><id>14302095</id><snippet>calculator(a,b)
print(calculator(a,b))
</snippet></ROW><ROW><id>14302095</id><snippet>calculator</snippet></ROW><ROW><id>14302095</id><snippet>calculator(a, b)</snippet></ROW><ROW><id>14302095</id><snippet>result = calculator(a, b)
print(result)
</snippet></ROW><ROW><id>14302249</id><snippet>[m, n]</snippet></ROW><ROW><id>14302249</id><snippet>m</snippet></ROW><ROW><id>14302249</id><snippet>n</snippet></ROW><ROW><id>14302249</id><snippet>a = np.array([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
              [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0],
              [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1]])
&gt;&gt;&gt; np.dot(a.T, a)
array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0],
       [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2]])
</snippet></ROW><ROW><id>14302249</id><snippet>(3, 12)</snippet></ROW><ROW><id>14302249</id><snippet>(12, 12)</snippet></ROW><ROW><id>14302249</id><snippet>C</snippet></ROW><ROW><id>14302249</id><snippet>C**2</snippet></ROW><ROW><id>14302249</id><snippet>C</snippet></ROW><ROW><id>14302249</id><snippet>(C**2 + C) / 2</snippet></ROW><ROW><id>14302249</id><snippet>csr</snippet></ROW><ROW><id>14302249</id><snippet>indices</snippet></ROW><ROW><id>14302249</id><snippet>scipy</snippet></ROW><ROW><id>14302249</id><snippet>&gt;&gt;&gt; a_csr = scipy.sparse.csr_matrix(a)
&gt;&gt;&gt; a_csr.indices
array([ 2, 11,  1,  7, 10,  4, 11])
&gt;&gt;&gt; np.unique(a_csr.indices).shape[0]
6
</snippet></ROW><ROW><id>14302249</id><snippet>R</snippet></ROW><ROW><id>14302249</id><snippet>R**2</snippet></ROW><ROW><id>14302249</id><snippet>indices</snippet></ROW><ROW><id>14302249</id><snippet>&gt;&gt;&gt; a_csc = scipy.sparse.csc_matrix(a)
&gt;&gt;&gt; a_csc.indices
array([1, 0, 2, 1, 1, 0, 2])
&gt;&gt;&gt; rows, where = np.unique(a_csc.indices, return_inverse=True)
&gt;&gt;&gt; where = np.bincount(where)
&gt;&gt;&gt; rows
array([0, 1, 2])
&gt;&gt;&gt; where
array([2, 3, 2])
&gt;&gt;&gt; np.sum(where**2)
17
</snippet></ROW><ROW><id>14302249</id><snippet>&gt;&gt;&gt; np.sum(np.dot(a.T,a),axis=None)
17
</snippet></ROW><ROW><id>14302249</id><snippet>def estimate(a) :
    a_csc = scipy.sparse.csc_matrix(a)
    _, where = np.unique(a_csc.indices, return_inverse=True)
    where = np.bincount(where)
    return np.sum(where**2)

def test(shape=(10,1000), count=100) :
    a = np.zeros(np.prod(shape), dtype=int)
    a[np.random.randint(np.prod(shape), size=count)] = 1
    print 'a non-zero = {0}'.format(np.sum(a))
    a = a.reshape(shape)
    print 'a.T * a non-zero = {0}'.format(np.flatnonzero(np.dot(a.T,
                                                                a)).shape[0])
    print 'csc estimate = {0}'.format(estimate(a))

&gt;&gt;&gt; test(count=100)
a non-zero = 100
a.T * a non-zero = 1065
csc estimate = 1072
&gt;&gt;&gt; test(count=200)
a non-zero = 199
a.T * a non-zero = 4056
csc estimate = 4079
&gt;&gt;&gt; test(count=50)
a non-zero = 50
a.T * a non-zero = 293
csc estimate = 294
</snippet></ROW><ROW><id>14302252</id><snippet>#!/usr/bin/env python

from file2 import file2_func, file2_variable

file2_func()
print file2_variable
</snippet></ROW><ROW><id>14302252</id><snippet>#!/usr/bin/env python

file2_variable = "I'm a variable!"

def file2_func():
    print "Hello World!"
</snippet></ROW><ROW><id>14302623</id><snippet>__slots__</snippet></ROW><ROW><id>14302623</id><snippet>class Data:
    __slots__ = ["key1", "key2"]

    def __init__(self, k1, k2):
        self.key1, self.key2 = k1, k2

    def __getitem__(self, key):
        if key not in self.__slots__:
            raise KeyError("%r not found" % key)
        return getattr(self, key)
</snippet></ROW><ROW><id>14302623</id><snippet>&gt;&gt;&gt; Data(1, 2)["key1"]
1
</snippet></ROW><ROW><id>14302623</id><snippet>key not in self.__slots__</snippet></ROW><ROW><id>14302623</id><snippet>getattr</snippet></ROW><ROW><id>14302623</id><snippet>__init__</snippet></ROW><ROW><id>14302858</id><snippet>format_spec ::=  [[fill]align][sign][#][0][width][,][.precision][type]</snippet></ROW><ROW><id>14302858</id><snippet>{user:&lt;10.10}</snippet></ROW><ROW><id>14302858</id><snippet>&gt;&gt;&gt; '{0:&lt;10.10}'.format('1234567')
'1234567   '

&gt;&gt;&gt; '{0:&lt;10.10}'.format('123456789034')
'1234567890'
</snippet></ROW><ROW><id>14302881</id><snippet>PyString_AsStringAndSize</snippet></ROW><ROW><id>14303505</id><snippet>from maya import cmds
import math
def drawHelix(radius, length, coils): 
    numPoints = int(8)
    degrees = float((360 / numPoints))
    centerX = float(0)
    centerZ = float(0)
    xLoc = float(0)
    zLoc  = float(0)
    yLoc  = float(0)
    yOffset = float(((length / float(coils)) / float(numPoints)))
    vectorIndex = int(0)
    pointStr = []
    knotStr = []
    yLoc = 0
    for i in range(1, (360 * coils), 20):
        t = i + degrees
        xLoc = centerX + (math.cos(t) * radius)
        zLoc = centerZ - (math.sin(t) * radius)
        pointStr.append((xLoc, yLoc,zLoc))
        knotStr.append(vectorIndex)
        vectorIndex = i + 1
        yLoc = yLoc + yOffset
    print pointStr        
    spiral = cmds.curve(p= pointStr, k=knotStr,d=float(1.0))
    cmds.rebuildCurve (spiral, ch=1, rpo=1, 
                       rt=0, end=1, kr=1, kcp=0, kep=0, 
                       kt=0, s=0, d=3, tol=0.001)
    return spiral
</snippet></ROW><ROW><id>14303505</id><snippet>from maya import cmds

def getHistoryShape(name):
    history = cmds.listHistory(name)
    filteredShape = cmds.ls(history, shapes=1)[0]
    return filteredShape 

def drawHelix(radius, length, coils): 
    cyl = cmds.cylinder( ch=True, radius=radius, ax=(0,1,0),
                         hr=float(length)/float(radius) )

    # build a curve on the cylinders surface
    crv = cmds.curveOnSurface(cyl[0], d=1, 
                              uv=[(0,0),(length, coils*4)],
                              k=[0,1]) 
    # make a duplicate that is visible 
    crv = cmds.duplicateCurve(ch=1, rn=0, local=1)

    # tell maya to ignore the cylinder as a piece of geometry
    shape = getHistoryShape(cyl[0])
    cmds.setAttr(shape+'.intermediateObject', 1)

    cmds.rename(cyl[0],'helix1')
    return crv  
</snippet></ROW><ROW><id>14303829</id><snippet>  def prop_name_converter(obj):
    if not obj:
      return ''
    str_list = []
    for o in obj:
      str_list.append(`o`)
    return ''.join(str_list)
</snippet></ROW><ROW><id>14303947</id><snippet>csv</snippet></ROW><ROW><id>14303947</id><snippet>import csv

with open("test.csv") as file:
    data = csv.reader(file)
    next(data)
    print([[float(x) for x in line[1:]] for line in data])
</snippet></ROW><ROW><id>14303947</id><snippet>[[-1.24344945, 4.84291601], [-2.40876842, 4.38153362], [-3.42273545, 3.6448431], [-4.22163963, 2.67913389], [-4.7552824, 1.54508495], [-4.99013376, -0.313952595], [-4.7552824, -1.54508495], [-4.22163963, -2.67913389], [-3.42273545, -3.6448431]]
</snippet></ROW><ROW><id>14303947</id><snippet>csv.reader()</snippet></ROW><ROW><id>14303947</id><snippet>([float(x) for x in line[1:]] for line in data)
</snippet></ROW><ROW><id>14303947</id><snippet>with</snippet></ROW><ROW><id>14304058</id><snippet>x=ClassA(...).func(...)</snippet></ROW><ROW><id>14304058</id><snippet>func</snippet></ROW><ROW><id>14304058</id><snippet>self.ABlob = ttk.Button(...).grid(...)</snippet></ROW><ROW><id>14304058</id><snippet>self.ABlob</snippet></ROW><ROW><id>14304058</id><snippet>None</snippet></ROW><ROW><id>14304058</id><snippet>self.ABlob = ttk.Button(...)
self.ABlob.grid(...)
</snippet></ROW><ROW><id>14304058</id><snippet>self.ABlob.grid(row=3, column=2)
self.BBlob.grid(row=3, column=3)
self.CBlob.grid(row=3, column=4)
</snippet></ROW><ROW><id>14304274</id><snippet>StringIO</snippet></ROW><ROW><id>14304274</id><snippet>from cStringIO import StringIO

imagefile = StringIO()  # writable object

# save to open filehandle, so specifying the expected format is required
animage.save(imageFile, format='PNG')
imagedata = imagefile.getvalue()
</snippet></ROW><ROW><id>14304430</id><snippet>forms.py</snippet></ROW><ROW><id>14304430</id><snippet>from flask.ext.wtf import Optional

def make_optional(field):
    field.validators.insert(0, Optional())

#Rest of code here...
</snippet></ROW><ROW><id>14304430</id><snippet>user_form = UserForm()
forms.make_optional(user_form.password)
if user_form.validate_on_submit():
    #Go on your merry way!
</snippet></ROW><ROW><id>14304955</id><snippet>W</snippet></ROW><ROW><id>14304955</id><snippet>TimedRotatingFileHandler(filename, when='W0', backupCount=0)
</snippet></ROW><ROW><id>14305021</id><snippet>sage: y = 5*x + 7^x + 3*x^2
sage: y
7^x + 3*x^2 + 5*x
sage: type(y)
&lt;type 'sage.symbolic.expression.Expression'&gt;
</snippet></ROW><ROW><id>14305021</id><snippet>operands()</snippet></ROW><ROW><id>14305021</id><snippet>operator()</snippet></ROW><ROW><id>14305021</id><snippet>def var_counter(someexpr, v):
    tor = someexpr.operator()
    if tor is None:
        return int(v in someexpr.variables())
    else:
        return sum(var_counter(operand, v) for operand in someexpr.operands())
</snippet></ROW><ROW><id>14305021</id><snippet>sage: x, x2, x3 = var("x x2 x3")
sage: y = 5*x + 7^x + 3*x^2 + x2**(x3+3*sin(x))
sage: var_counter(y, x)
4
sage: var_counter(y, x2)
1
sage: var_counter(y, x3)
1
</snippet></ROW><ROW><id>14305021</id><snippet>str</snippet></ROW><ROW><id>14305021</id><snippet>sage: str(y)
'7^x + 3*x^2 + 5*x + x2^(x3 + 3*sin(x))'
sage: str(y)[2]
'x'
sage: str(y)[6]
'3'
</snippet></ROW><ROW><id>14305145</id><snippet>rb = pygame.image.load('redblock.png')

rbrect = rb.get_rect()
rbrect.topleft = (0, 0)
rb1rect = rb.get_rect()
rb1rect.topleft = (40, 0)
rb2rect = rb.get_rect()
rb2rect.topleft = (80, 0)
</snippet></ROW><ROW><id>14305241</id><snippet>min(positions, key=posfunc)
</snippet></ROW><ROW><id>14305241</id><snippet>&gt;&gt;&gt; help(min)
min(...)
    min(iterable[, key=func]) -&gt; value
    min(a, b, c, ...[, key=func]) -&gt; value

    With a single iterable argument, return its smallest item.
    With two or more arguments, return the smallest argument.
</snippet></ROW><ROW><id>14305241</id><snippet>min(positions, key=lambda x: x[0]**2 - x[1])
</snippet></ROW><ROW><id>14305241</id><snippet>posfunc</snippet></ROW><ROW><id>14305553</id><snippet>project_path</snippet></ROW><ROW><id>14305553</id><snippet>sys.path</snippet></ROW><ROW><id>14305553</id><snippet>import os
import sys
sys.path.append('/path/towhere/myproject/') 

os.environ['DJANGO_SETTINGS_MODULE'] = 'project_path.settings'

from app_path.models import *

#write your cron job.
</snippet></ROW><ROW><id>14305775</id><snippet>gspread</snippet></ROW><ROW><id>14305926</id><snippet>^(?!.*c(?![hk]))[^\W_]+$
</snippet></ROW><ROW><id>14305926</id><snippet>^       # Start of string
(?!     # Assert that it's not possible to match...
 .*     #  Any string, followed by
 c      #  the letter c
 (?!    #  unless that is followed by
  [hk]  #   h or k
 )      #  (End of inner negative lookahead)
)       # (End of outer negative lookahead).
[^\W_]+ # Match one or more letters or digits.
$       # End of string
</snippet></ROW><ROW><id>14305926</id><snippet>[^\W_]</snippet></ROW><ROW><id>14305926</id><snippet>\w</snippet></ROW><ROW><id>14305926</id><snippet>_</snippet></ROW><ROW><id>14305926</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; strings = ["test", "check", "tick", "pic", "cow"]
&gt;&gt;&gt; for item in strings:
...     print("{0} is {1}".format(item,
...           "valid" if re.match(r"^(?!.*c(?![hk]))[^\W_]+$", item)
...           else "invalid"))
...
test is valid
check is valid
tick is valid
pic is invalid
cow is invalid
</snippet></ROW><ROW><id>14306233</id><snippet>mergesort</snippet></ROW><ROW><id>14306233</id><snippet>def mergesort(lst):
    '''Recursively divides list in halves to be sorted'''
    if len(lst) == 1:
        return lst, 0
    middle = len(lst)/2
    left = mergesort(lst[:middle])[0]  # Ignore intermediate splits
    right = mergesort(lst[middle:])[0]  # Ignore intermediate splits
    sortedlist, splits = merge(left, right)
    return sortedlist, splits
</snippet></ROW><ROW><id>14306366</id><snippet>date_time</snippet></ROW><ROW><id>14306366</id><snippet>date_time</snippet></ROW><ROW><id>14306366</id><snippet>dfts = df.set_index('date_time')
</snippet></ROW><ROW><id>14306366</id><snippet>dfts.groupby(lambda x : x.month).mean()
</snippet></ROW><ROW><id>14306366</id><snippet>dfts.groupby(lambda x : x.year).std()
</snippet></ROW><ROW><id>14306366</id><snippet>xs</snippet></ROW><ROW><id>14306366</id><snippet>DataFrame</snippet></ROW><ROW><id>14306366</id><snippet>years = range(2012, 2015)
yearly_month_stats = [dfts.xs(str(year)).groupby(lambda x : x.month).mean() for year in years]
df2 = pd.concat(yearly_month_stats, axis=1, keys = years)
</snippet></ROW><ROW><id>14306366</id><snippet>        2012       2013       2014
       value      value      value
1        NaN   5.324165  15.747767
2        NaN -23.193429   9.193217
3        NaN -14.144287  23.896030
4        NaN -21.877975  16.310195
5        NaN  -3.079910  -6.093905
6        NaN  -2.106847 -23.253183
7        NaN  10.644636   6.542562
8        NaN  -9.763087  14.335956
9        NaN  -3.529646   2.607973
10       NaN -18.633832   0.083575
11       NaN  10.297902  14.059286
12  33.95442  13.692435  22.293245
</snippet></ROW><ROW><id>14306869</id><snippet>(300, -1)</snippet></ROW><ROW><id>14306869</id><snippet>wx.TextCtrl(self, -1, size=(300, -1))
</snippet></ROW><ROW><id>14306876</id><snippet>--extra-index-url http://pypi.python.org/simple</snippet></ROW><ROW><id>14306902</id><snippet>DataFrame</snippet></ROW><ROW><id>14306902</id><snippet>df = pd.DataFrame(np.random.randn(10,2), columns=['col1','col2'])
df['col3'] = np.arange(len(df))**2 * 100 + 100

In [5]: df
Out[5]: 
       col1      col2  col3
0 -1.000075 -0.759910   100
1  0.510382  0.972615   200
2  1.872067 -0.731010   500
3  0.131612  1.075142  1000
4  1.497820  0.237024  1700
</snippet></ROW><ROW><id>14306902</id><snippet>plt.scatter(df.col1, df.col2, s=df.col3)
</snippet></ROW><ROW><id>14306902</id><snippet>colors = np.where(df.col3 &gt; 300, 'r', 'k')
plt.scatter(df.col1, df.col2, s=120, c=colors)
</snippet></ROW><ROW><id>14306902</id><snippet>plt.scatter</snippet></ROW><ROW><id>14306902</id><snippet>cond = df.col3 &gt; 300
subset_a = df[cond].dropna()
subset_b = df[~cond].dropna()
plt.scatter(subset_a.col1, subset_a.col2, s=120, c='b', label='col3 &gt; 300')
plt.scatter(subset_b.col1, subset_b.col2, s=60, c='r', label='col3 &lt;= 300') 
plt.legend()
</snippet></ROW><ROW><id>14306902</id><snippet>isnull</snippet></ROW><ROW><id>14306902</id><snippet>df[df.col3.isnull()]</snippet></ROW><ROW><id>14306902</id><snippet>select</snippet></ROW><ROW><id>14306902</id><snippet>df['subset'] = np.select([df.col3 &lt; 150, df.col3 &lt; 400, df.col3 &lt; 600],
                         [0, 1, 2], -1)
for color, label in zip('bgrm', [0, 1, 2, -1]):
    subset = df[df.subset == label]
    plt.scatter(subset.col1, subset.col2, s=120, c=color, label=str(label))
plt.legend()
</snippet></ROW><ROW><id>14306921</id><snippet>In [2]: df.set_index(['Name', 'Destination'])
Out[2]: 
                   Length
Name  Destination        
Bob   Athens            3
      Rome              5
      Athens            2
Alice Rome              1
      Athens            3
      Rome              5
</snippet></ROW><ROW><id>14307460</id><snippet>In [1]: df
Out[1]:
   RollBasis  ToRoll
0          1       1
1          1       4
2          1      -5
3          2       2
4          3      -4
5          5      -2
6          8       0
7         10     -13
8         12      -2
9         13      -5

In [2]: def f(x):
   ...:     ser = df.ToRoll[(df.RollBasis &gt;= x) &amp; (df.RollBasis &lt; x+5)]
   ...:     return ser.sum()
</snippet></ROW><ROW><id>14307460</id><snippet>In [3]: df['Rolled'] = df.RollBasis.apply(f)

In [4]: df
Out[4]:
   RollBasis  ToRoll  Rolled
0          1       1      -4
1          1       4      -4
2          1      -5      -4
3          2       2      -4
4          3      -4      -6
5          5      -2      -2
6          8       0     -15
7         10     -13     -20
8         12      -2      -7
9         13      -5      -5
</snippet></ROW><ROW><id>14307460</id><snippet>In [1]: from pandas import *

In [2]: import io

In [3]: text = """\
   ...:    RollBasis  ToRoll
   ...: 0          1       1
   ...: 1          1       4
   ...: 2          1      -5
   ...: 3          2       2
   ...: 4          3      -4
   ...: 5          5      -2
   ...: 6          8       0
   ...: 7         10     -13
   ...: 8         12      -2
   ...: 9         13      -5
   ...: """

In [4]: df = read_csv(io.BytesIO(text), header=0, index_col=0, sep='\s+')
</snippet></ROW><ROW><id>14307528</id><snippet>=s0</snippet></ROW><ROW><id>14307528</id><snippet>=sxxxx</snippet></ROW><ROW><id>14307557</id><snippet>try</snippet></ROW><ROW><id>14307557</id><snippet>except</snippet></ROW><ROW><id>14307557</id><snippet>try:
   furniture.remove('chair')
except ValueError:
   furniture.remove('Chair')
</snippet></ROW><ROW><id>14307628</id><snippet>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi sollicitudin tortor et velit venenatis molestie. Morbi non nibh magna, quis tempor metus. 
Vivamus vehicula velit sit amet neque posuere id hendrerit sem venenatis. Nam vitae felis sem. Mauris ultricies congue mi, eu ornare massa convallis nec. 
Donec volutpat molestie velit, scelerisque porttitor dui suscipit vel. Etiam feugiat feugiat nisl, vitae commodo ligula tristique nec. Fusce bibendum fermentum rutrum.

&gt;&gt;&gt;a = open("file.txt").read()

&gt;&gt;&gt;print a.index("vitae")
232
&gt;&gt;&gt; print a.find("vitae")
232
</snippet></ROW><ROW><id>14307628</id><snippet>def all_occurences(file, str):
    initial = 0
    while True:
        initial = file.find(str, initial)
        if initial == -1: return
        yield initial
        initial += len(str)


&gt;&gt;&gt;print list(all_occurences(open("file.txt").read(),"vitae"))
[232, 408]
</snippet></ROW><ROW><id>14307679</id><snippet>value</snippet></ROW><ROW><id>14307679</id><snippet>for rowi, row in enumerate(reader):
    for coli, value in enumerate(row):
        if rowi &gt;= 2:
            value = int(value)
        sheet.write(rowi, coli, value)
</snippet></ROW><ROW><id>14307679</id><snippet>for rowi, row in enumerate(reader):
    for coli, value in enumerate(row):
        try:
            value = int(value)
        except ValueError as e:
            pass
        sheet.write(rowi, coli, value)
</snippet></ROW><ROW><id>14307712</id><snippet>0/1</snippet></ROW><ROW><id>14307712</id><snippet>0/1</snippet></ROW><ROW><id>14307712</id><snippet>*</snippet></ROW><ROW><id>14307712</id><snippet>0/1</snippet></ROW><ROW><id>14307712</id><snippet>*</snippet></ROW><ROW><id>14307712</id><snippet>0/1 * * * * echo 0/1  &gt;&gt; cron0.log
*   * * * * echo star &gt;&gt; cron1.log
</snippet></ROW><ROW><id>14307712</id><snippet>cron1.log</snippet></ROW><ROW><id>14307712</id><snippet>cron0.log</snippet></ROW><ROW><id>14307712</id><snippet>0/1</snippet></ROW><ROW><id>14307712</id><snippet>*</snippet></ROW><ROW><id>14307712</id><snippet>foo/bar</snippet></ROW><ROW><id>14307712</id><snippet>*</snippet></ROW><ROW><id>14307712</id><snippet>*/5</snippet></ROW><ROW><id>14307712</id><snippet>crontab(5)</snippet></ROW><ROW><id>14307712</id><snippet>/&lt;number&gt;</snippet></ROW><ROW><id>14307712</id><snippet>0-23/2</snippet></ROW><ROW><id>14307712</id><snippet>0,2,4,6,8,10,12,14,16,18,20,22</snippet></ROW><ROW><id>14307712</id><snippet>*/2</snippet></ROW><ROW><id>14307712</id><snippet>0/1</snippet></ROW><ROW><id>14307712</id><snippet>*</snippet></ROW><ROW><id>14307712</id><snippet>*</snippet></ROW><ROW><id>14307712</id><snippet>*/2</snippet></ROW><ROW><id>14307712</id><snippet>*/3</snippet></ROW><ROW><id>14307712</id><snippet>0/1</snippet></ROW><ROW><id>14307712</id><snippet>0/2</snippet></ROW><ROW><id>14307712</id><snippet>0/3</snippet></ROW><ROW><id>14307712</id><snippet>0</snippet></ROW><ROW><id>14307712</id><snippet>0/1</snippet></ROW><ROW><id>14307722</id><snippet>import matplotlib
matplotlib.use('TkAgg')
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt
import Tkinter as Tk
import networkx as nx
from tkMessageBox import showinfo

root = Tk.Tk()
root.wm_title("Animated Graph embedded in TK")
root.wm_protocol('WM_DELETE_WINDOW', root.quit())

f = plt.figure(figsize=(5,4))
a = f.add_subplot(111)
plt.axis('off')

# the networkx part
G=nx.complete_graph(5)
pos=nx.circular_layout(G)
nx.draw_networkx(G,pos=pos,ax=a)
xlim=a.get_xlim()
ylim=a.get_ylim()



# a tk.DrawingArea
canvas = FigureCanvasTkAgg(f, master=root)
canvas.show()
canvas.get_tk_widget().pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)

def next_graph():
    if G.order():
        a.cla()
        G.remove_node(G.nodes()[-1])
        nx.draw_networkx(G, pos, ax=a)
        a.set_xlim(xlim)
        a.set_ylim(ylim)
        plt.axis('off')
        canvas.draw()

b = Tk.Button(root, text="next",command=next_graph)
b.pack()

Tk.mainloop()
</snippet></ROW><ROW><id>14307794</id><snippet>import math
import itertools
with open("test.stl") as file:
    i1, i2 = itertools.tee(file)
    vertices = [map(float, line.split()[1:4])
                for line in i1
                if line.lstrip().startswith('vertex')]

    normals = [map(float, line.split()[2:5])
                for line in i2
                if line.lstrip().startswith('facet')]
</snippet></ROW><ROW><id>14307794</id><snippet>import math
import itertools
with open("test.stl") as file:
    i1, i2 = itertools.tee(file)
    vertexIter = (map(float, line.split()[1:4])
                  for line in i1
                  if line.lstrip().startswith('vertex'))

    normalIter = (map(float, line.split()[2:5])
                  for line in i2
                  if line.lstrip().startswith('facet'))
</snippet></ROW><ROW><id>14307794</id><snippet>for i in range(0,N):
    p1=vertices[3*i]
    p2=vertices[3*i+1]
    p3=verticies[3*i+2]
    normal = normals[i]

    # processing
</snippet></ROW><ROW><id>14307794</id><snippet>for normal, p1, p2, p3 in myMagicIterator:
    # processing
</snippet></ROW><ROW><id>14307794</id><snippet>myMagicIterator = itertools.izip(
    normalIter,
    itertools.islice(vertexIter, 0, 3),
    itertools.islice(vertexIter, 1, 3),
    itertools.islice(vertexIter, 2, 3)
)
</snippet></ROW><ROW><id>14307794</id><snippet>myNormalList = zip(normals, vertices[0::3], vertices[1::3], vertices[2::3])
</snippet></ROW><ROW><id>14307872</id><snippet>def get_input():
    if msvcrt.kbhit():
        return msvcrt.getch()
    else:
        return ''

def get_input():
    global player_dir
    player_dir = [0, 0]
    inp = get_input() # INFINITE RECURSION, CALLS ITSELF
</snippet></ROW><ROW><id>14307872</id><snippet>get_input</snippet></ROW><ROW><id>14307872</id><snippet>get_character</snippet></ROW><ROW><id>14307897</id><snippet>class Person(object):
    def __init__(self, name):
        self.name = name
        self.friends = []
</snippet></ROW><ROW><id>14307897</id><snippet>person = Person("Walter")
person.friends.append(Person("Suzie"))       # add a friend
person.friends.pop(0)                        # remove and get first friend, friends is now empty
person.friends.index(Person("Barbara"))      # -1, Barbara is not one of Walter's friends
</snippet></ROW><ROW><id>14307910</id><snippet>from sys import stderr
from Tkinter import *

def func(b):
    number = 2*b
    stderr.write('number=%d\n'%number)
    return

root=Tk()

# By clicking this button I want to set b = 1 and call func

b1 = Button(root,command=lambda : func(1))
b1.pack()

# By clicking this button I want to set b = 2 and call func

b2 = Button(root,command=lambda : func(2))
b2.pack()

root.mainloop()
</snippet></ROW><ROW><id>14308009</id><snippet>".\n".join(i.strip() for i in a.split("."))
</snippet></ROW><ROW><id>14308114</id><snippet># Code is untested and may contain typos. :-)

# A list of the (x, y) coordinates of all of the dirty squares.
dirty_squares = [(0, 4), (1, 1), etc.]
n = len(dirty_squares)    

# Everywhere after here, refer to dirty squares by their index
# into dirty_squares.

def compute_distance(i, j):
  return (abs(dirty_squares[i][0] - dirty_squares[j][0])
          + abs(dirty_squares[i][1] - dirty_squares[j][1]))

# distances[i][j] is the cost to move from dirty square i to
# dirty square j.
distances = []
for i in range(n):
  distances.append([compute_distance(i, j) for j in range(n)])

# The x, y coordinates of where the robot starts.
start_node = (0, 0)

# first_move_distances[i] is the cost to move from the robot's
# start location to dirty square i.
first_move_distances = [
  abs(start_node[0] - dirty_squares[i][0])
      + abs(start_node[1] - dirty_squares[i][1]))
  for i in range(n)]

# order is a list of the dirty squares.
def cost(order):
  if not order:
    return 0  # Cleaning 0 dirty squares is free.
  return (first_move_distances[order[0]]
          + sum(distances[order[i]][order[i+1]]
                for i in range(len(order)-1)))
</snippet></ROW><ROW><id>14308114</id><snippet>  # Each list represents a sequence of dirty nodes.
  []
  [1]
  [1, 2]
  [1, 2, 3]
  [1, 3]
  [1, 3, 2]
  [2]
  [2, 1]
  [2, 1, 3]
</snippet></ROW><ROW><id>14308288</id><snippet>?</snippet></ROW><ROW><id>14308674</id><snippet>json</snippet></ROW><ROW><id>14308674</id><snippet>import json

articleContent = ClientCookie.urlopen(url)
data = json.load(articleContent)
</snippet></ROW><ROW><id>14308674</id><snippet>\u</snippet></ROW><ROW><id>14308674</id><snippet>data</snippet></ROW><ROW><id>14308674</id><snippet>articleContent = data['query']['pages'].values()[0]['revisions'][0]['*']
</snippet></ROW><ROW><id>14308674</id><snippet>unicode()</snippet></ROW><ROW><id>14308674</id><snippet>&gt;&gt;&gt; print u'\n'.join(data['query']['pages'].values()[0]['revisions'][0]['*'].splitlines()[:20])
{{For|the game|100 Bullets (video game)}}
{{GOCEeffort}}
{{italic title}}
{{Supercbbox  &lt;!--Wikipedia:WikiProject Comics--&gt;
| title =100 Bullets
| image =100Bullets vol1.jpg
| caption = Cover to ''100 Bullets'' vol. 1 "First Shot, Last Call". Cover art by Dave Johnson.
| schedule = Monthly
| format =
|complete=y
|Crime       = y
| publisher = [[Vertigo (DC Comics)|Vertigo]]
| date = August [[1999 in comics|1999]] – April [[2009 in comics|2009]]
| issues = 100
| main_char_team = [[Agent Graves]] &lt;br/&gt; [[Mr. Shepherd]] &lt;br/&gt; The Minutemen &lt;br/&gt; [[List of characters in 100 Bullets#Dizzy Cordova (also known as "The Girl")|Dizzy Cordova]] &lt;br/&gt; [[List of characters in 100 Bullets#Loop Hughes (also known as "The Boy")|Loop Hughes]]
| writers = [[Brian Azzarello]]
| artists = [[Eduardo Risso]]&lt;br&gt;Dave Johnson
| pencillers =
| inkers =
| colorists = Grant Goleash&lt;br&gt;[[Patricia Mulvihill]]
</snippet></ROW><ROW><id>14308712</id><snippet>pandas</snippet></ROW><ROW><id>14308712</id><snippet>ax = plt.gca()
ax.get_xaxis().get_major_formatter().scaled[365] = '%y'
plt.draw()
</snippet></ROW><ROW><id>14308729</id><snippet>int</snippet></ROW><ROW><id>14308729</id><snippet>float</snippet></ROW><ROW><id>14308729</id><snippet>-</snippet></ROW><ROW><id>14308729</id><snippet>*</snippet></ROW><ROW><id>14308729</id><snippet>int</snippet></ROW><ROW><id>14308729</id><snippet>float</snippet></ROW><ROW><id>14308729</id><snippet>latitude = int(request.form['Latitude'])
</snippet></ROW><ROW><id>14308729</id><snippet>latitude = float(request.form['Latitude'])
</snippet></ROW><ROW><id>14308801</id><snippet>dict.get(key[, default])</snippet></ROW><ROW><id>14308801</id><snippet>for base in letters:
    dna += seqcom.get(base, 'x')
</snippet></ROW><ROW><id>14308807</id><snippet>import glob

files = [open(f) for f in glob.glob("*.txt")]

# Given file, Read the 6th column in each line
def readcol5(f):
    return [line.split(' ')[5] for line in f]

filecols = [ readcol5(f) for f in files ]
maxrows = len(max(filecols, key=len))

# Given array, make sure it has maxrows number of elements.
def extendmin(arr):
    diff = maxrows - len(arr)
    arr.extend([''] * diff)
    return arr

filecols = map(extendmin, filecols)

lines = zip(*filecols)
lines = map(lambda x: ','.join(x), lines)
lines = '\n'.join(lines)

fout = open('output.csv', 'wb')
fout.write(lines)
fout.close()
</snippet></ROW><ROW><id>14308829</id><snippet>def function11(arg1, arg2):
    try:
        # try something with arg1, arg2 &lt;---- throws error
        . . .
        # return something
    except:
        return arg1, arg2

def function12(arg3):
    # try something else
    . . .
    return something
</snippet></ROW><ROW><id>14308829</id><snippet>from file1 import *

def function21():
    try:
        # the following function should normally throw an error, but you have to be sure 
        # the result arg1, arg2 from function11 (in file1) still throws
        # an error and does not look like the expected result
        f = function11(arg1, arg2) 
        . . .
        return something
    except:     # &lt;---- if function imported from file1.py throws error, you want to print variables instead.
        print arg1, arg2
</snippet></ROW><ROW><id>14308868</id><snippet>import re

input = ['MAPLEWOOD AVE', 'LYNNDALE ', 'SUGAR DR']
ref = ['LYNNDALE (?:RD)?', 'HOMAN (?:AVE)?', 'MAPLEWOOD (?:AVE)?', 'LYNNDALE (?:LN)?']
output = dict([ (i, [ r for r in ref if re.match(r, i) ]) for i in input ])
</snippet></ROW><ROW><id>14308868</id><snippet>output = { i : [ r for r in ref if re.match(r, i) ] for i in input }
</snippet></ROW><ROW><id>14308868</id><snippet>ref_re = [ re.compile(r) for r in ref ]
output = { i : [ r.pattern for r in ref_re if r.match(i) ] for i in input }
</snippet></ROW><ROW><id>14308868</id><snippet>output = { i : [ r.match(i).group(0) for r in ref_re if r.match(i) ] for i in input }
</snippet></ROW><ROW><id>14308928</id><snippet>user = User.objects.get(username='user123')
friendships = Friendship.objects.filter(Q(receiver=user) | Q(sender=user))

usernames = []

for friendship in friendships:
    if friendship.receiver == user:
        usernames.append(friendship.receiver.username)
    else:
        usernames.append(friendship.sender.username)
</snippet></ROW><ROW><id>14308973</id><snippet>list</snippet></ROW><ROW><id>14308973</id><snippet>__init__</snippet></ROW><ROW><id>14308973</id><snippet>super(StrictList, self).__init__(content)
</snippet></ROW><ROW><id>14308973</id><snippet>self.content</snippet></ROW><ROW><id>14308973</id><snippet>&gt;&gt;&gt; class StrictList(list):
...     def __init__(self,content=None):
...         super(StrictList, self).__init__(content)
... 
&gt;&gt;&gt; s = StrictList([1, 2, 3])
&gt;&gt;&gt; len(s)
3
&gt;&gt;&gt; s[0]
1
</snippet></ROW><ROW><id>14309050</id><snippet>pandas.merge()</snippet></ROW><ROW><id>14309050</id><snippet>merged = df.merge(df2, on='key')

valid = (merged.date &gt;= merged.valid_from) &amp; \
        (merged.date &lt;= merged.valid_to)

df['joined_value'] = merged[valid].value_y
</snippet></ROW><ROW><id>14309050</id><snippet>value</snippet></ROW><ROW><id>14309050</id><snippet>df2</snippet></ROW><ROW><id>14309050</id><snippet>value_y</snippet></ROW><ROW><id>14309050</id><snippet>df</snippet></ROW><ROW><id>14309050</id><snippet>_x, _y</snippet></ROW><ROW><id>14309050</id><snippet>n = 8
dates = pd.date_range('1/1/2013', freq='D', periods=n)
df = DataFrame({'key': np.arange(n),
                'date': dates,
                'value': np.arange(n) * 10})
df2 = DataFrame({'key': np.arange(n),
                 'valid_from': dates[[1,1,1,1,5,5,5,5]],
                 'valid_to': dates[[4,4,4,4,6,6,6,6]],
                 'value': np.arange(n) * 100})
</snippet></ROW><ROW><id>14309050</id><snippet>df2</snippet></ROW><ROW><id>14309050</id><snippet>   key          valid_from            valid_to  value
0    0 2013-01-02 00:00:00 2013-01-05 00:00:00      0
1    1 2013-01-02 00:00:00 2013-01-05 00:00:00    100
2    2 2013-01-02 00:00:00 2013-01-05 00:00:00    200
3    3 2013-01-02 00:00:00 2013-01-05 00:00:00    300
4    4 2013-01-06 00:00:00 2013-01-07 00:00:00    400
5    5 2013-01-06 00:00:00 2013-01-07 00:00:00    500
6    6 2013-01-06 00:00:00 2013-01-07 00:00:00    600
7    7 2013-01-06 00:00:00 2013-01-07 00:00:00    700
</snippet></ROW><ROW><id>14309050</id><snippet>merged</snippet></ROW><ROW><id>14309050</id><snippet>                 date  key  value_x          valid_from            valid_to  value_y
0 2013-01-01 00:00:00    0        0 2013-01-02 00:00:00 2013-01-05 00:00:00        0
1 2013-01-02 00:00:00    1       10 2013-01-02 00:00:00 2013-01-05 00:00:00      100
2 2013-01-03 00:00:00    2       20 2013-01-02 00:00:00 2013-01-05 00:00:00      200
3 2013-01-04 00:00:00    3       30 2013-01-02 00:00:00 2013-01-05 00:00:00      300
4 2013-01-05 00:00:00    4       40 2013-01-06 00:00:00 2013-01-07 00:00:00      400
5 2013-01-06 00:00:00    5       50 2013-01-06 00:00:00 2013-01-07 00:00:00      500
6 2013-01-07 00:00:00    6       60 2013-01-06 00:00:00 2013-01-07 00:00:00      600
7 2013-01-08 00:00:00    7       70 2013-01-06 00:00:00 2013-01-07 00:00:00      700
</snippet></ROW><ROW><id>14309050</id><snippet>df</snippet></ROW><ROW><id>14309050</id><snippet>joined_value</snippet></ROW><ROW><id>14309050</id><snippet>                 date  key  value  joined_value
0 2013-01-01 00:00:00    0      0           NaN
1 2013-01-02 00:00:00    1     10           100
2 2013-01-03 00:00:00    2     20           200
3 2013-01-04 00:00:00    3     30           300
4 2013-01-05 00:00:00    4     40           NaN
5 2013-01-06 00:00:00    5     50           500
6 2013-01-07 00:00:00    6     60           600
7 2013-01-08 00:00:00    7     70           NaN
</snippet></ROW><ROW><id>14309060</id><snippet>return</snippet></ROW><ROW><id>14309060</id><snippet>rndnum</snippet></ROW><ROW><id>14309060</id><snippet>None</snippet></ROW><ROW><id>14309060</id><snippet>def rndnum(used_num):
    a = random.randint(min_num,max_num)
    b = random.randint(min_num,max_num)
    num_string = str(a) + "," + str(b)
    if num_string not in used_num:
        return a,b,num_string
    else:
        return rndnum(used_num)
</snippet></ROW><ROW><id>14309291</id><snippet>  if (!req.http.host ~ "^(www\.)?wpsite\.com$") {
     return (hit_for_pass);
  }
</snippet></ROW><ROW><id>14309346</id><snippet>import cPickle
import copy_reg
from types import FunctionType

# data to pickle: note that o['x'] is a lambda and they
# aren't natively picklable (at this time)
o = {'x': lambda x: x, 'y': 1}

# shows that o is not natively picklable (because of
# o['x'])
try:
    cPickle.dumps(o)
except TypeError:
    print "not natively picklable"
else:
    print "was pickled natively"

# create a mechanisms to turn unpickable functions int
# stub objects (the string "STUB" in this case)
def stub_pickler(obj):
    return stub_unpickler, ()
def stub_unpickler():
    return "STUB"
copy_reg.pickle(
    FunctionType,
    stub_pickler, stub_unpickler)

# shows that o is now picklable but o['x'] is restored
# to the stub object instead of its original lambda
print cPickle.loads(cPickle.dumps(o))
</snippet></ROW><ROW><id>14309346</id><snippet>not natively picklable
{'y': 1, 'x': 'STUB'}
</snippet></ROW><ROW><id>14309657</id><snippet>In [119]: i = '12345678901'

In [120]: int(i[-2])%2
Out[120]: 0

In [121]: int(i[-1])%2
Out[121]: 1
</snippet></ROW><ROW><id>14309657</id><snippet>i</snippet></ROW><ROW><id>14309657</id><snippet>In [122]: i = 12345678901

In [123]: (i/10)%10
Out[123]: 0

In [124]: ((i/10)%10)%2
Out[124]: 0
</snippet></ROW><ROW><id>14309724</id><snippet>  File "path/to/program.py", line 13
    a = random.randrange(1, 6)
    ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>14309724</id><snippet>a</snippet></ROW><ROW><id>14309724</id><snippet>a</snippet></ROW><ROW><id>14309724</id><snippet>answerset3 = ['undefined', '2', u"\u221A"'2', '2'u"\u221A"'3/3', '-1','-2', '-'u"\u221A"'2', '-2'u"\u221A"'3/3']

  File "path/to/program.py", line 14
    if a = 1:
    ^
IndentationError: unexpected indent
</snippet></ROW><ROW><id>14309724</id><snippet>    a = random.randrange(1, 6)
        if a = 1:
            a == 'sin'
        elif a = 2:
            a == 'cos'
        elif a = 3:
            a == 'tan'
        elif a = 4:
            a == 'csc'
        elif a = 5:
            a == 'sec'
        else:
            a == 'cot'
</snippet></ROW><ROW><id>14309724</id><snippet>if a = 1:</snippet></ROW><ROW><id>14309724</id><snippet>a == 'cot'</snippet></ROW><ROW><id>14309724</id><snippet>  File "path/to/program.py", line 14
    if a = 1:
         ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>14309724</id><snippet>=</snippet></ROW><ROW><id>14309724</id><snippet>==</snippet></ROW><ROW><id>14309724</id><snippet>=</snippet></ROW><ROW><id>14309724</id><snippet>==</snippet></ROW><ROW><id>14309724</id><snippet>if</snippet></ROW><ROW><id>14309724</id><snippet>elif</snippet></ROW><ROW><id>14309724</id><snippet>else</snippet></ROW><ROW><id>14309724</id><snippet>==</snippet></ROW><ROW><id>14309724</id><snippet>=</snippet></ROW><ROW><id>14309724</id><snippet>  File "path/to/program.py", line 102
    if d == 1
            ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>14309724</id><snippet>  File "C:\Users\Nathan\Desktop\test.py", line 108
    msg = a + d"=?"
                  ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>14309724</id><snippet>a + d + "=?"</snippet></ROW><ROW><id>14309724</id><snippet>  File "C:\Users\Nathan\Desktop\test.py", line 113, in &lt;module&gt;
    if __name == '__main__':
NameError: name '__name' is not defined
</snippet></ROW><ROW><id>14309724</id><snippet>__name__</snippet></ROW><ROW><id>14309724</id><snippet>b = random.randint(1, 17)
degrees = {1: '0', 2: '30', 3: '45', 4: '60', 5: '90'}  # finish me
b = b + ' degrees'  # You should not be replacing b, make a nicely named variable!
</snippet></ROW><ROW><id>14309724</id><snippet>b</snippet></ROW><ROW><id>14309724</id><snippet>4</snippet></ROW><ROW><id>14309724</id><snippet>60 degrees</snippet></ROW><ROW><id>14309855</id><snippet>i</snippet></ROW><ROW><id>14309855</id><snippet>5-i</snippet></ROW><ROW><id>14309855</id><snippet># Produces all possible RPN layouts with n values and n-1 binary operators,
# representing values as '#' and operators as '+'
def RPN(n):
  if n == 1:
    yield '#'
  for i in range(1,n):
    for left in RPN(i):
      for right in RPN(n - i):
        yield left + right + '+' 
</snippet></ROW><ROW><id>14309875</id><snippet>class myDialog(QtGui.QDialog, Ui_DialogCalibration):
    def __init__(self, parent=None, listInfo):
        super(myDialog, self).__init__(parent)
        self.listInfo = listInfo
        self.setupUi(self)
</snippet></ROW><ROW><id>14309875</id><snippet>myDialog</snippet></ROW><ROW><id>14309875</id><snippet>myDialog</snippet></ROW><ROW><id>14309875</id><snippet>self.listInfo</snippet></ROW><ROW><id>14309875</id><snippet>def __init__(self, parent=None, listInfo=None)</snippet></ROW><ROW><id>14309875</id><snippet>Dialog = myDialog(parent=self, listInfo=listInfo)</snippet></ROW><ROW><id>14309875</id><snippet>def __init__(self, parent, listInfo)</snippet></ROW><ROW><id>14309875</id><snippet>Dialog = myDialog(self, listInfo)</snippet></ROW><ROW><id>14310158</id><snippet>find = open("find.txt")

noes = [line.strip() for line in find if line.find("e")== -1]

print(noes)
print(len(noes))
</snippet></ROW><ROW><id>14310196</id><snippet>n</snippet></ROW><ROW><id>14310196</id><snippet>n</snippet></ROW><ROW><id>14310196</id><snippet>progress = 0
lastLine = ''
n = 5 # seconds
while progress &lt; 100:
    with open('path/to/logfile') as logfile:
        for newLine in logfile:
            pass
        if newLine.strip() != lastLine:
            lastLine = newLine.strip()
            writeToDatabase(lastLine)
    time.sleep(n)
</snippet></ROW><ROW><id>14310327</id><snippet>pprint</snippet></ROW><ROW><id>14310327</id><snippet>pprint</snippet></ROW><ROW><id>14310327</id><snippet>import pprint
pprint.pprint(...)
</snippet></ROW><ROW><id>14310327</id><snippet>from pprint import pprint
pprint(...)
</snippet></ROW><ROW><id>14311669</id><snippet>message</snippet></ROW><ROW><id>14311669</id><snippet>memcache</snippet></ROW><ROW><id>14311669</id><snippet>from protorpc import remote
from protorpc import messages
from protorpc import protojson
from protorpc.wsgi import service
from google.appengine.api import memcache


class HelloRequest(messages.Message):
  my_name = messages.StringField(1, required=True)

class ElementOfArrayResponse(messages.Message):
  value=messages.IntegerField(1)

class HelloResponse(messages.Message):
  hello = messages.StringField(1, required=True)
  list = messages.MessageField(ElementOfArrayResponse, 2, repeated=True)

class HelloService(remote.Service):
  @remote.method(HelloRequest, HelloResponse)
  def hello(self, request):
    response = memcache.get(request.my_name)
    if response:
      # decode the value to a message..
      response = protojson.decode_message(HelloResponse, response)
    else:
      list = []
      for i in range(7):
        list.append(SomeElementResponse(value=i))
      response = HelloResponse(hello='Hello there, %s!' % request.my_name, list=list)
      # encode the message to a serializable format..
      value = protojson.encode_message(message)
      memcache.set(request.my_name, value)
    return response

app = service.service_mappings([('/hello.*', HelloService)])
</snippet></ROW><ROW><id>14311690</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14311690</id><snippet>export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python2.7/site-packages
</snippet></ROW><ROW><id>14312851</id><snippet>minor=False</snippet></ROW><ROW><id>14312851</id><snippet>if primary:
    axis.xaxis.set_major_formatter(DateFormatter(fmt='%b %y'))
    axis.xaxis.set_minor_formatter(DateFormatter(fmt='%b'))
    plt.setp(axis.get_xticklabels(minor=True), visible=True)
else:
    plt.setp(axis.get_xticklabels(), visible=False)
</snippet></ROW><ROW><id>14312857</id><snippet>import sys
sys.path.insert(0, '/home/www/mysite.wsgi')
</snippet></ROW><ROW><id>14312895</id><snippet>re.search("(^[ 0-9]{9})", deed)
</snippet></ROW><ROW><id>14312895</id><snippet>"(^[ 0-9]{9})"</snippet></ROW><ROW><id>14312905</id><snippet>continue</snippet></ROW><ROW><id>14312905</id><snippet>for</snippet></ROW><ROW><id>14312905</id><snippet>while</snippet></ROW><ROW><id>14312905</id><snippet>def writeHandlesToFile():
    while True:
        with open("dataFile.txt","w") as f:
            try:
                lst = tweepy.Cursor(tweepy.api.followers,screen_name='someHandle',).items(100000)
                print "cursor executed"
                for item in lst:
                    f.write(item.screen_name+"\n")
                break
            except tweepy.error.TweepError as e:
                print "In the except method"
                print e
                time.sleep(3600)
</snippet></ROW><ROW><id>14313202</id><snippet>import time
import curses

ENTER_KEY = (curses.KEY_ENTER, ord('\n'), ord('\r'))

def run(win, timeout=3): # timeout in seconds
    curses.echo()
    win.timeout(0) # Non-block read.

    line = 0
    while True:
        win.addstr(line, 0, "Enter something: ")
        s = []
        start = time.time()
        run = True
        while run:
            c = win.getch()
            time_taken = time.time() - start

            if c &lt; 0:
                pass
            elif c in ENTER_KEY:
                break
            else:
                s.append(chr(c))

            if time_taken &gt;= timeout:
                # Out of time.
                s.append(-1)
                run = False

        if len(s) == 0:
            break
        if s[-1] == -1:
            s.pop()
        answer = ''.join(s)
        win.addstr(line + 1, 0, "Your input was: %s" % answer)
        line += 2

curses.wrapper(run)
</snippet></ROW><ROW><id>14313394</id><snippet>dict</snippet></ROW><ROW><id>14313394</id><snippet>list</snippet></ROW><ROW><id>14313394</id><snippet>tuple</snippet></ROW><ROW><id>14313394</id><snippet>cash_id.create(cr, uid, lines,context=None)</snippet></ROW><ROW><id>14313394</id><snippet>lines</snippet></ROW><ROW><id>14313394</id><snippet>(0, 0, {
                'name': l.name,
                'date': l.date,
                'amount': l.amount,
                'type': l.type,
                'statement_id': exp.statement_id.id,
                'account_id': l.account_id.id,
                'account_analytic_id': l.analytic_account_id.id,
                'ref': l.ref,
                'note': l.note,
                'company_id': l.company_id.id
            })
</snippet></ROW><ROW><id>14313394</id><snippet>&gt;&gt;&gt; l=[(0,0,{'h':88})]
&gt;&gt;&gt; a={}
&gt;&gt;&gt; a.update(l)

Traceback (most recent call last):
  File "&lt;pyshell#11&gt;", line 1, in &lt;module&gt;
    a.update(l)
ValueError: dictionary update sequence element #0 has length 3; 2 is required
&gt;&gt;&gt; l=[(0,{'h':88})]
&gt;&gt;&gt; a.update(l)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14313487</id><snippet>__init__</snippet></ROW><ROW><id>14313487</id><snippet>__init__</snippet></ROW><ROW><id>14313487</id><snippet>__init__</snippet></ROW><ROW><id>14313671</id><snippet>import scipy.ndimage as im
x= im.median_filter(x, (self.m,self.m))    
</snippet></ROW><ROW><id>14313847</id><snippet>QtGui.QAbstractButton</snippet></ROW><ROW><id>14313847</id><snippet>void clicked(bool checked = false);
</snippet></ROW><ROW><id>14313847</id><snippet>void clicked(); 
void clicked(bool checked);
</snippet></ROW><ROW><id>14313847</id><snippet>pyqtSlot()</snippet></ROW><ROW><id>14313847</id><snippet>clicked</snippet></ROW><ROW><id>14313847</id><snippet>QPushButton</snippet></ROW><ROW><id>14313847</id><snippet>connectSlotsByName</snippet></ROW><ROW><id>14313847</id><snippet>pyqtSlot</snippet></ROW><ROW><id>14313847</id><snippet>@QtCore.pyqtSlot() # signal with no arguments
def on_pushButtonDesnoX_clicked(self):
    value=int(self.lineEdit.text())
    self.X=self.X+value
    print self.X
</snippet></ROW><ROW><id>14313879</id><snippet>Queue.Queue.qsize</snippet></ROW><ROW><id>14313879</id><snippet>put</snippet></ROW><ROW><id>14313879</id><snippet>get</snippet></ROW><ROW><id>14313879</id><snippet>collections.deque</snippet></ROW><ROW><id>14313879</id><snippet>Queue.Queue</snippet></ROW><ROW><id>14314294</id><snippet>QWebView</snippet></ROW><ROW><id>14314294</id><snippet>loadWebsites</snippet></ROW><ROW><id>14314294</id><snippet>StopIteration</snippet></ROW><ROW><id>14314294</id><snippet>procDone</snippet></ROW><ROW><id>14314294</id><snippet>on_procDone</snippet></ROW><ROW><id>14314294</id><snippet>3</snippet></ROW><ROW><id>14314294</id><snippet>["http://www.example.com"]*3</snippet></ROW><ROW><id>14314294</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtCore, QtGui, QtWebKit, QtNetwork

class myWindow(QtWebKit.QWebView):
    procDone = QtCore.pyqtSignal(int)

    def __init__(self, parent=None):
        super(myWindow, self).__init__(parent)

        self.websites      = iter(["http://www.example.com"]*3)
        self.websitesTotal = 0

        self.loadFinished.connect(self.on_loadFinished)
        self.procDone.connect(self.on_procDone)

        self.loadWebsites()

    def loadWebsites(self):
        try:
            website = self.websites.next()

        except StopIteration:
            self.procDone.emit(self.websitesTotal)

        else:
            self.load(QtCore.QUrl(website))

    @QtCore.pyqtSlot(bool)
    def on_loadFinished(self, ok):
        self.websitesTotal += 1
        print "Loaded: {0}".format(self.url().toString())
        self.loadWebsites()

    @QtCore.pyqtSlot(int)
    def on_procDone(self, total):
        print "Total of websites: {0}".format(total)
        self.websitesTotal = 0

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('myWindow')

    main = myWindow()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14314365</id><snippet>import calendar    
print calendar.month(2013,1)

Mo Tu We Th Fr Sa Su
    1  2  3  4  5  6
 7  8  9 10 11 12 13
14 15 16 17 18 19 20
21 22 23 24 25 26 27
28 29 30 31
</snippet></ROW><ROW><id>14314365</id><snippet>datetime.isocalendar()</snippet></ROW><ROW><id>14314365</id><snippet>from datetime import datetime
datetime.date(datetime.now()).isocalendar()[1]
</snippet></ROW><ROW><id>14314571</id><snippet>numpy.vstack()</snippet></ROW><ROW><id>14314571</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = numpy.zeros(3)
&gt;&gt;&gt; b = numpy.ones(3)
&gt;&gt;&gt; numpy.vstack((a,b)).T
array([[ 0.,  1.],
       [ 0.,  1.],
       [ 0.,  1.]])
</snippet></ROW><ROW><id>14314664</id><snippet> urlpatterns = patterns('',
        (r'^about/', login_required(TemplateView.as_view(template_name="secret.html"))),
        (r'^vote/', permission_required('polls.can_vote')(VoteView.as_view())),
    )
</snippet></ROW><ROW><id>14314664</id><snippet>    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ProtectedView, self).dispatch(*args, **kwargs)
</snippet></ROW><ROW><id>14314776</id><snippet>    self.colourDict = \
    {"AVal":"#FFFFFF",
     "BVal":"#FFFFFF",
     "CVal":"#FFFFFF",
     "DVal":"#FFFFFF",
      etc. 
</snippet></ROW><ROW><id>14314776</id><snippet>    self.boxA = Text(self.mainframe, state='normal', width=3, height=1, background=self.colourDict['AVal'])
    self.boxB = Text(self.mainframe, state='normal', width=3, height=1, background=self.colourDict['BVal'])
    self.boxC = Text(self.mainframe, state='normal', width=3, height=1, background=self.colourDict['CVal'])
    etc.
</snippet></ROW><ROW><id>14314776</id><snippet>    self.boxA.grid(column=2, row=2, padx=4)
    self.boxB.grid(column=3, row=2, padx=4)
    self.boxC.grid(column=4, row=2, padx=4)
    etc.
</snippet></ROW><ROW><id>14314776</id><snippet>    self.bloba = ttk.Button(self.mainframe, text="A",style= 'mainSmall.TButton', command= lambda: self.getColour(self.boxA,"AVal")).grid(column=2, row=3)
    self.blobb = ttk.Button(self.mainframe, text="B",style= 'mainSmall.TButton', command= lambda: self.getColour(self.boxB,"BVal")).grid(column=3, row=3)
    self.blobc = ttk.Button(self.mainframe, text="C",style= 'mainSmall.TButton', command= lambda: self.getColour(self.boxC,"CVal")).grid(column=4, row=3)
    etc.
</snippet></ROW><ROW><id>14314776</id><snippet>def getColour(self,glyphRef, value):
    (triple, hexstr) = askcolor()
    if hexstr:
        glyphRef.config(bg=hexstr)
        self.colourDict[value] = hexstr
</snippet></ROW><ROW><id>14314879</id><snippet>import glob
import os

id1 = '*'
logZip = glob.glob(os.path.join("c:/logs", id1, id2, '{}_log_{}_{}-00_{}.zip'.format(id1, dateID, hourID, id2)))
</snippet></ROW><ROW><id>14314879</id><snippet>id1</snippet></ROW><ROW><id>14314879</id><snippet>*</snippet></ROW><ROW><id>14314879</id><snippet>os.path.join</snippet></ROW><ROW><id>14314879</id><snippet>logZip</snippet></ROW><ROW><id>14314879</id><snippet>glob.iglob</snippet></ROW><ROW><id>14314879</id><snippet>id1 = '*'
mask = os.path.join("c:/logs", id1, id2, '{}_log_{}_{}-00_{}.zip'.format(id1, dateID, hourID, id2))
for logZip in glob.iglob(mask):
    # logZip is a single file
</snippet></ROW><ROW><id>14315197</id><snippet>concurrent_requests = 1</snippet></ROW><ROW><id>14315409</id><snippet>def clone_entity(e, to_klass, **extra_args):
  """Clones an entity, adding or overriding constructor attributes.

  The cloned entity will have exactly the same property values as the original
  entity, except where overridden. By default it will have no parent entity or
  key name, unless supplied.

  Args:
    e: The entity to clone
    extra_args: Keyword arguments to override from the cloned entity and pass
      to the constructor.
  Returns:
    A cloned, possibly modified, copy of entity e.
  """
  klass = e.__class__
  props = dict((k, v.__get__(e, klass)) for k, v in klass.properties().iteritems())
  props.update(extra_args)
  return to_klass(**props)

# Use the clone method
query = db.GqlQuery("SELECT * FROM OrigKind")
results = query.fetch(10);

for user in results:
    new_entry = clone_entity(user, NewKind)
    new_entry.put()
</snippet></ROW><ROW><id>14315416</id><snippet>import fileinput

fin = fileinput.input('/home/jon/text.txt', inplace=1)
for line in fin:
    print line,
    if line.strip() == 'banana':
        next(fin, None) # as suggested by @thg435 doesn't hurt to use default to avoid StopIteration (as next iteration will just be a no-op anyway)
</snippet></ROW><ROW><id>14315416</id><snippet>fin</snippet></ROW><ROW><id>14315515</id><snippet>filedir</snippet></ROW><ROW><id>14315515</id><snippet>filedir</snippet></ROW><ROW><id>14315515</id><snippet>createEmptyIndex</snippet></ROW><ROW><id>14315515</id><snippet>deleteFromIndex</snippet></ROW><ROW><id>14315515</id><snippet>retrieveUniqID</snippet></ROW><ROW><id>14315515</id><snippet>searcher</snippet></ROW><ROW><id>14315515</id><snippet>if cont == content:</snippet></ROW><ROW><id>14315515</id><snippet>return None</snippet></ROW><ROW><id>14315515</id><snippet>IndexSearcher</snippet></ROW><ROW><id>14315515</id><snippet>Directory</snippet></ROW><ROW><id>14315515</id><snippet>incrementalIndexing</snippet></ROW><ROW><id>14315515</id><snippet>IndexSearcher</snippet></ROW><ROW><id>14315515</id><snippet>IndexReader</snippet></ROW><ROW><id>14315515</id><snippet>IndexWriter</snippet></ROW><ROW><id>14315515</id><snippet>Directory</snippet></ROW><ROW><id>14315515</id><snippet>IndexReader</snippet></ROW><ROW><id>14315515</id><snippet>IndexWriter.GetReader()</snippet></ROW><ROW><id>14315515</id><snippet>reader = reader.Refresh()</snippet></ROW><ROW><id>14316313</id><snippet>open()</snippet></ROW><ROW><id>14316313</id><snippet>listdir()</snippet></ROW><ROW><id>14316313</id><snippet>\f</snippet></ROW><ROW><id>14316313</id><snippet>\x0c</snippet></ROW><ROW><id>14316313</id><snippet>r'C:\FOLDER'</snippet></ROW><ROW><id>14316313</id><snippet>'C:\\FOLDER'</snippet></ROW><ROW><id>14316313</id><snippet>'C:/FOLDER'</snippet></ROW><ROW><id>14316313</id><snippet>'/'</snippet></ROW><ROW><id>14316313</id><snippet>s.find(t) == -1</snippet></ROW><ROW><id>14316313</id><snippet>folder = "C:/FOLDER"
for fname in os.listdir(folder):
    if fname.endswith(".csv"):
        inputFile = open(os.path.join(folder, fname),'r')
</snippet></ROW><ROW><id>14316836</id><snippet>import distribute_setup
distribute_setup.use_setuptools()

import os
from setuptools import setup, find_packages

# Utility function to read the README file.
# Used for the long_description.  It's nice, because now 1) we have a top level
# README file and 2) it's easier to type in the README file than to put a raw
# string in below ...

def read(fname):
    return open(os.path.join(os.path.dirname(__file__), fname)).read()

setup(
    name='buildboticon',
    version='0.3.2',
    author='Marcus Lindblom',
    author_email='macke@yar.nu',
    description=('A buildbot monitoring utility'),
    license='GPL 3.0',
    keywords='buildbot systemtray pyqt',

    url='http://bitbucket.org/marcusl/buildboticon',
    download_url='http://packages.python.org/buildboticon',

    package_dir={'':'src'},
    packages=find_packages('src', exclude=['*.tests']),
    long_description=read('README'),

    entry_points={
        'setuptools.installation': [
            'eggsecutable = bbicon:main',
        ],
        'gui_scripts': [
            'buildboticon = bbicon:main',
        ]
    },

    setup_requires=[
        'setuptools_hg',
    ],

    tests_require=[
        'unittest2 &gt;= 0.5',
        'mock &gt;= 0.7.0b4',
    ],

    install_requires=[
        'pyyaml &gt;= 0.3',
#        'pyqt &gt;= 4.7'   # PyQt doesn't have anything useful on PyPi :(
    ],

    extras_require={
        'speech':  ['pyspeech &gt;= 1.0'],
#        'phidgets': ['PhidgetsPython &gt;= 2.1.7'],
    },
</snippet></ROW><ROW><id>14316933</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>14316933</id><snippet>before_request</snippet></ROW><ROW><id>14316933</id><snippet>teardown_request</snippet></ROW><ROW><id>14316933</id><snippet>from flask import g

@app.before_request
def db_connect():
    g.db_conn = MySQLdb.connect(host=settings.DB_HOST,
                                user=settings.DB_USER,
                                passwd=settings.DB_PASSWD,
                                db=settings.DB_NAME)

@app.teardown_request
def db_disconnect(exception=None):
    g.db_conn.close()
</snippet></ROW><ROW><id>14317304</id><snippet>divmod</snippet></ROW><ROW><id>14317304</id><snippet>def uniques2(numbers):
    for number in numbers:
        seen = set()
        quotient = number
        while quotient &gt; 10:
            quotient, remainder = divmod(quotient, 10)
            if remainder in seen:
                break
            else:
                seen.add(remainder)
        else:
            yield number
</snippet></ROW><ROW><id>14318085</id><snippet>data</snippet></ROW><ROW><id>14318085</id><snippet>lstrip</snippet></ROW><ROW><id>14318085</id><snippet>{{ object|slice:"1:" }}
</snippet></ROW><ROW><id>14318668</id><snippet>item['price'] = prei.select("td[@class='ticket_price td-cell ucase black strong align-right']/text()").extract()
if len(item['price']) == 0:
   item['price'] = prei.select("td[@class='ticket_price td-cell ucase black strong align-right row-border']/text()").extract()
</snippet></ROW><ROW><id>14318730</id><snippet>utf8</snippet></ROW><ROW><id>14318730</id><snippet>INSERT IGNORE</snippet></ROW><ROW><id>14318730</id><snippet>information_schema</snippet></ROW><ROW><id>14319024</id><snippet>psutil</snippet></ROW><ROW><id>14319024</id><snippet>pip install psutil
</snippet></ROW><ROW><id>14319024</id><snippet>import psutil 

psutil.get_users()
</snippet></ROW><ROW><id>14319024</id><snippet>[user(name='root', terminal='pts/0', host='your-local-host-from-isp.net',
started=1358152704.0)]
</snippet></ROW><ROW><id>14319112</id><snippet>import pylab as plt
import numpy as np

data = np.loadtxt("14318737.txt", skiprows=1, converters={0:lambda x: 0})
plot_data = np.ma.masked_equal(data[:,1:], 0)

plt.imshow(plot_data, cmap=plt.cm.get_cmap("Reds"), interpolation="nearest")
plt.colorbar()

plt.show()
</snippet></ROW><ROW><id>14319112</id><snippet>imshow</snippet></ROW><ROW><id>14319112</id><snippet>import pylab as plt
import numpy as np

fn = "14318737.txt"
with open(fn, "r") as f:
    labels = f.readline().rstrip("\n").split()[1:]
data = np.loadtxt(fn, skiprows=1, converters={0:lambda x: 0})
plot_data = np.ma.masked_equal(data[:,1:], 0)

plt.subplots_adjust(left=0.1, bottom=0.15, right=0.99, top=0.95)
plt.imshow(plot_data, cmap=plt.cm.get_cmap("Reds"), interpolation="nearest", aspect = "auto")
plt.xticks(range(len(labels)), labels, rotation=90, va="top", ha="center")
plt.colorbar()

plt.show()
</snippet></ROW><ROW><id>14319112</id><snippet>aspect</snippet></ROW><ROW><id>14319112</id><snippet>imshow</snippet></ROW><ROW><id>14319112</id><snippet>subplots_adjust</snippet></ROW><ROW><id>14319112</id><snippet>plt.yticks</snippet></ROW><ROW><id>14319112</id><snippet>xticks</snippet></ROW><ROW><id>14319596</id><snippet>key_name = 'my test file'
path = 'images/holiday'
full_key_name = os.path.join(path, key_name)
k = bucket.new_key(full_key_name)
k.set_contents_from_filename(...)
</snippet></ROW><ROW><id>14319653</id><snippet>from sqlalchemy.dialects import postgresql

class Comment(Base):
    __tablename__ = 'comments'
    id = Column(Integer, primary_key=True)
    path = Column(ARRAY(Integer))

q = Comment.query.filter(Comment.path[1] == 11)
# This is just to demonstrate how compiled query would look like.
print q.statement.compile(dialect=postgresql.dialect())
</snippet></ROW><ROW><id>14319653</id><snippet>SELECT comments.id, comments.path 
FROM comments 
WHERE comments.path[%(path_1)s] = %(param_1)s
</snippet></ROW><ROW><id>14319653</id><snippet>= ANY</snippet></ROW><ROW><id>14319653</id><snippet>= ANY</snippet></ROW><ROW><id>14319653</id><snippet>from sqlalchemy.sql import literal, tuple_

# There's already built-in any() function in Python, we don't want to
# shadow that.
def any_(value, col):
    return literal(value).op('= ANY')(tuple_(col))

q = Comment.query.filter(any_(11, Comment.path))
</snippet></ROW><ROW><id>14319754</id><snippet>LIMIT</snippet></ROW><ROW><id>14319754</id><snippet>OFFSET</snippet></ROW><ROW><id>14319754</id><snippet>objectQuerySet = Recipient.objects.filter(incentiveid=incentive).order_by('fullname')[51:100]
</snippet></ROW><ROW><id>14319915</id><snippet>urllib2</snippet></ROW><ROW><id>14320227</id><snippet>imshow</snippet></ROW><ROW><id>14320227</id><snippet>origin</snippet></ROW><ROW><id>14320227</id><snippet>origin="lower"</snippet></ROW><ROW><id>14320683</id><snippet>len</snippet></ROW><ROW><id>14320683</id><snippet>set</snippet></ROW><ROW><id>14320683</id><snippet>class Person(object):
    def __init__(self, nation, name):
        self.nation = nation
        self.name = name

People = [Person("Canada", "Dave"), Person("Scotland", "Alex"), Person("Canada", "Fred"), Person("Japan", "Kenta")]
</snippet></ROW><ROW><id>14320683</id><snippet>&gt;&gt;&gt; set(p.nation for p in People)
set(['Canada', 'Japan', 'Scotland'])
&gt;&gt;&gt; {p.nation for p in People} # python 2.7
set(['Canada', 'Japan', 'Scotland'])
&gt;&gt;&gt; len({p.nation for p in People})
3
</snippet></ROW><ROW><id>14320683</id><snippet>(x for x in y)</snippet></ROW><ROW><id>14320683</id><snippet>{x for x in y}</snippet></ROW><ROW><id>14320683</id><snippet>Counter</snippet></ROW><ROW><id>14320683</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter(p.nation for p in People)
&gt;&gt;&gt; c
Counter({'Canada': 2, 'Japan': 1, 'Scotland': 1})
&gt;&gt;&gt; len(c)
3
&gt;&gt;&gt; sum(c.values())
4
</snippet></ROW><ROW><id>14321039</id><snippet>mousePressEvent</snippet></ROW><ROW><id>14321039</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtCore, QtGui

class myWindow(QtGui.QWidget):
    def __init__(self, parent=None):
        super(myWindow, self).__init__(parent)

        self.label = QtGui.QLabel(self)
        self.label.setText("Click Me")

        self.layout = QtGui.QHBoxLayout(self)
        self.layout.addWidget(self.label)


    def mousePressEvent(self, event):
        if event.buttons() == QtCore.Qt.LeftButton:
            self.label.setText("Left Mouse Click!")

        elif event.buttons() == QtCore.Qt.RightButton:
            self.label.setText("Right Mouse Click!")

        return super(myWindow, self).mousePressEvent(event)

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('myWindow')

    main = myWindow()
    main.resize(150, 150)
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14321389</id><snippet>wx.CallAfter()</snippet></ROW><ROW><id>14321389</id><snippet>import wx
import thread
import time

class Example(wx.Frame):
    def __init__(self, parent): 
        wx.Frame.__init__(self,parent)
        self.InitUI()

    def InitUI(self):
        self.SetSize((250, 200))
        self.Show(True)

        self.text = wx.StaticText(self, label='',pos=(20,30))

        thread.start_new_thread(self.watch,(self,None))

    def watch(self,dummy,e):
        while True:
            time.sleep(0.1)
            wx.CallAfter(self.text.SetLabel, 'Closed')

def main():
    ex = wx.App()
    Example(None)
    ex.MainLoop()    

if __name__ == '__main__':
    main() 
</snippet></ROW><ROW><id>14321532</id><snippet>datetime</snippet></ROW><ROW><id>14321532</id><snippet>randn</snippet></ROW><ROW><id>14321532</id><snippet>In [1]: date_index = [datetime(2012,01,01)] * 10 + [datetime(2013,01,01)] * 10

In [2]: df = DataFrame({'A':randn(20),'B':randn(20)}, index=date_index)

In [3]: df
Out[3]:
                   A         B
2012-01-01 -1.155124  1.018059
2012-01-01 -0.312090 -1.083568
2012-01-01  0.688247 -1.296995
2012-01-01 -0.205218  0.837194
2012-01-01  0.700611 -0.001015
2012-01-01  1.996796 -0.914564
2012-01-01 -2.268237  0.517232
2012-01-01 -0.170778 -0.143245
2012-01-01 -0.826039  0.581035
2012-01-01 -0.351097 -0.013259
2013-01-01 -0.767911 -0.009232
2013-01-01 -0.322831 -1.384785
2013-01-01  0.300160  0.334018
2013-01-01 -1.406878 -2.275123
2013-01-01  1.722454  0.873262
2013-01-01  0.635711 -1.763352
2013-01-01 -0.816891 -0.451424
2013-01-01 -0.808629 -0.092290
2013-01-01  0.386046 -1.297096
2013-01-01  0.261837  0.562373
</snippet></ROW><ROW><id>14321532</id><snippet>transform</snippet></ROW><ROW><id>14321532</id><snippet>pandas.qcut</snippet></ROW><ROW><id>14321532</id><snippet>series</snippet></ROW><ROW><id>14321532</id><snippet>labels</snippet></ROW><ROW><id>14321532</id><snippet>In [4]: df.reset_index().groupby('index').transform(lambda x: qcut(x,10).labels)
Out[4]:
    A  B
0   1  9
1   4  1
2   7  0
3   5  8
4   8  5
5   9  2
6   0  6
7   6  3
8   2  7
9   3  4
10  3  6
11  4  2
12  6  7
13  0  0
14  9  9
15  8  1
16  1  4
17  2  5
18  7  3
19  5  8
</snippet></ROW><ROW><id>14321608</id><snippet>{% for record in result %}
    {{record.c}}, {{record.e}}, 
    {% for animal in record.animal_set|slice:":1" %}
        {{animal.p}}
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>14321656</id><snippet>newFrob.setBefore(atMe.getBefore)
</snippet></ROW><ROW><id>14321656</id><snippet>atMe.getBefore</snippet></ROW><ROW><id>14321656</id><snippet>newFrob.setBefore</snippet></ROW><ROW><id>14321656</id><snippet>&gt;&gt;&gt; a = Frob("a")
&gt;&gt;&gt; b = Frob("b")
&gt;&gt;&gt; c = Frob("c")
&gt;&gt;&gt; d = Frob("d")
&gt;&gt;&gt; insert(a, b) # list is a&lt;-&gt;b
&gt;&gt;&gt; insert(a, d) # list is a&lt;-&gt;b&lt;-&gt;d
&gt;&gt;&gt; insert(a, c) # list is a&lt;-&gt;b&lt;-&gt;c-&gt;?
&gt;&gt;&gt; c.getAfter()
&lt;bound method Frob.getAfter of &lt;__main__.Frob object at 0x000000000318EBA8&gt;&gt;
</snippet></ROW><ROW><id>14321656</id><snippet>b</snippet></ROW><ROW><id>14321721</id><snippet>count()</snippet></ROW><ROW><id>14321721</id><snippet>s == len(s) * s[0]
</snippet></ROW><ROW><id>14321721</id><snippet>set()</snippet></ROW><ROW><id>14321721</id><snippet>s == len(s) * s[0]</snippet></ROW><ROW><id>14321721</id><snippet>s and s == len(s) * s[0]</snippet></ROW><ROW><id>14321721</id><snippet>bool(s) and s == len(s) * s[0]</snippet></ROW><ROW><id>14321721</id><snippet>not s or s == len(s) * s[0]</snippet></ROW><ROW><id>14322075</id><snippet>data = pack('&gt;i', len(arr)) + arr.tostring()
</snippet></ROW><ROW><id>14322149</id><snippet>map()</snippet></ROW><ROW><id>14322149</id><snippet>itertools.imap()</snippet></ROW><ROW><id>14322149</id><snippet>gethtmlcolors</snippet></ROW><ROW><id>14322149</id><snippet>gethtmlcolors = lambda: map(genhtml, getrgbs())
</snippet></ROW><ROW><id>14322149</id><snippet>map()</snippet></ROW><ROW><id>14322149</id><snippet>imap()</snippet></ROW><ROW><id>14322149</id><snippet>gethtmlcolors = lambda: itertools.imap(genhtml, getrgbs())
</snippet></ROW><ROW><id>14322233</id><snippet>__init__</snippet></ROW><ROW><id>14322233</id><snippet>vUserProfile</snippet></ROW><ROW><id>14322233</id><snippet>formPessoa = ClienteForm(request.POST, instance=cliente, vUserProfile=profile)
</snippet></ROW><ROW><id>14322233</id><snippet>request.POST</snippet></ROW><ROW><id>14322233</id><snippet>vUserProfile</snippet></ROW><ROW><id>14322233</id><snippet>vUserProfile</snippet></ROW><ROW><id>14322233</id><snippet>kwargs</snippet></ROW><ROW><id>14322233</id><snippet>def __init__(self, *args, **kwargs):
    vUserProfile = kwargs.pop('vUserProfile', None)
</snippet></ROW><ROW><id>14322557</id><snippet>stderr = subprocess.PIPE</snippet></ROW><ROW><id>14322557</id><snippet>p = subprocess.Popen(...,stderr = subprocess.PIPE)
stdout,stderr = p.communicate()
#p.stderr.read() could work too.
</snippet></ROW><ROW><id>14322557</id><snippet>Popen</snippet></ROW><ROW><id>14322557</id><snippet>subprocess.call</snippet></ROW><ROW><id>14322557</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>14322689</id><snippet>setcolor</snippet></ROW><ROW><id>14322689</id><snippet>def setcolor(self,bname):
    if bname == "RED": #or 1, can't tell how you've written it
        self.text_in.config(foreground = RED) #I think that's how colors work in tkinter
    elif bname == "BLUE":
        self.text_in.config(foreground = BLUE)
    #etc etc
</snippet></ROW><ROW><id>14322689</id><snippet>self</snippet></ROW><ROW><id>14322689</id><snippet>Entry</snippet></ROW><ROW><id>14322725</id><snippet>-1.#IND</snippet></ROW><ROW><id>14322725</id><snippet>NaN</snippet></ROW><ROW><id>14322725</id><snippet>-1.#IND</snippet></ROW><ROW><id>14322725</id><snippet>&gt;&gt;&gt; 1e300 * 1e300 * 0
-nan
</snippet></ROW><ROW><id>14322725</id><snippet>float()</snippet></ROW><ROW><id>14322725</id><snippet>float('nan')</snippet></ROW><ROW><id>14322725</id><snippet>1.#INF</snippet></ROW><ROW><id>14322725</id><snippet>-1.#IND</snippet></ROW><ROW><id>14322725</id><snippet>float()</snippet></ROW><ROW><id>14322725</id><snippet>&gt;&gt;&gt; repr(inf)
'1.#INF'
&gt;&gt;&gt; float(_)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for float(): 1.#INF
&gt;&gt;&gt; repr(nan)
'-1.#IND'
&gt;&gt;&gt; float(_)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for float(): -1.#IND
</snippet></ROW><ROW><id>14322725</id><snippet>&gt;&gt;&gt; 1e300 * 1e300 * 0
nan
&gt;&gt;&gt; 1e300 * 1e300
inf
&gt;&gt;&gt; 1e300 * 1e300 * -1
-inf
</snippet></ROW><ROW><id>14322806</id><snippet>__init__</snippet></ROW><ROW><id>14322806</id><snippet>db.Model</snippet></ROW><ROW><id>14322806</id><snippet>Tu</snippet></ROW><ROW><id>14322806</id><snippet>def __init__(self,
               parent=None,
               key_name=None,
               _app=None,
               _from_entity=False,
               **kwds):
    """Creates a new instance of this model.

    To create a new entity, you instantiate a model and then call put(),
    which saves the entity to the datastore:

       person = Person()
       person.name = 'Bret'
       person.put()

    You can initialize properties in the model in the constructor with keyword
    arguments:

       person = Person(name='Bret')

    # continues
</snippet></ROW><ROW><id>14322806</id><snippet>a = Tu('teste', 'bla bla bla bla')</snippet></ROW><ROW><id>14322806</id><snippet>teste</snippet></ROW><ROW><id>14322806</id><snippet>parent</snippet></ROW><ROW><id>14322806</id><snippet>__init__</snippet></ROW><ROW><id>14322806</id><snippet>bla bla bla bla</snippet></ROW><ROW><id>14322806</id><snippet>key_name</snippet></ROW><ROW><id>14322806</id><snippet>Model</snippet></ROW><ROW><id>14322806</id><snippet>title</snippet></ROW><ROW><id>14322806</id><snippet>presentation</snippet></ROW><ROW><id>14322806</id><snippet>a = Tu(title='teste', presentation='bla bla bla bla')
</snippet></ROW><ROW><id>14322894</id><snippet>findAll</snippet></ROW><ROW><id>14322894</id><snippet>soup</snippet></ROW><ROW><id>14322894</id><snippet>plan.findAll</snippet></ROW><ROW><id>14322894</id><snippet>import urllib2
import sys
from bs4 import BeautifulSoup


page = urllib2.urlopen('http://www.att.com/shop/wireless/plans-new.html#fbid=U-XD_DHOGEp').read()
soup = BeautifulSoup(page)

#find the container for all the plans
tabcontent = soup.find('div', {"id": "smartphonePlans", "class": "tabcontent"})
containers = tabcontent.findAll('div', {"class": "innerContainer"})

for plan in containers:
     planTitle = plan.find("div", {"class": "planTitle"})
     if planTitle:
          title = planTitle.find("a").text     
          print title          

     voiceBoxes = plan.find("div", {"class": "whiteBox"})     
     if voiceBoxes:
               box3 = voiceBoxes.findAll("div", {"class": lambda x: x and x.startswith("boxes_")})
               if box3:
                    for box in box3:
                         top = box.findAll("p")
                         minutes = u" ".join([tag.text for tag in top])
                         print "\t", minutes
</snippet></ROW><ROW><id>14322894</id><snippet>AT&amp;T Individual Plans
    450 Minutes $39.99/mo.
    900 Minutes $59.99/mo.
    Unlimited Minutes $69.99/mo.
AT&amp;T Family Plans
    550 Minutes $59.99/mo.
    700 Minutes $69.99/mo.
    1,400 Minutes $89.99/mo.
    2,100 Minutes $109.99/mo.
    Unlimited Minutes $119.99/mo.
AT&amp;T Mobile Share Plans
    1GB $40/mo. + $45/smartphone
    4GB $70/mo. + $40/smartphone
    6GB $90/mo. + $35/smartphone
    10GB $120/mo.
    15GB $160/mo. + $30/smartphone
    20GB $200/mo.
</snippet></ROW><ROW><id>14322976</id><snippet>parent1 = self.select_parent_from_tournament()</snippet></ROW><ROW><id>14322976</id><snippet>child1 = parent1[:crossover_point] + parent2[crossover_point:]</snippet></ROW><ROW><id>14322976</id><snippet>mutation()</snippet></ROW><ROW><id>14322976</id><snippet>mutation()</snippet></ROW><ROW><id>14323097</id><snippet>logFile = open("C:/folder/logfile.txt", "w")
unittest.TextTestRunner(stream=logFile, verbosity=2).run(customFunction())
logFile.close()
</snippet></ROW><ROW><id>14323105</id><snippet>'\n'</snippet></ROW><ROW><id>14323105</id><snippet>encoded_file.write(de_line+'\n')
</snippet></ROW><ROW><id>14323136</id><snippet>a.get('foo',my_default) or my_default
</snippet></ROW><ROW><id>14323136</id><snippet>if-else</snippet></ROW><ROW><id>14323136</id><snippet>&gt;&gt;&gt; a = {'foo':''}
&gt;&gt;&gt; a.get('foo','bar') or 'bar'
'bar'
&gt;&gt;&gt; a['foo'] = 'baz'
&gt;&gt;&gt; a.get('foo','bar') or 'bar'
'baz'
&gt;&gt;&gt; a.get('qux','bar') or 'bar'
'bar'
</snippet></ROW><ROW><id>14323136</id><snippet>or</snippet></ROW><ROW><id>14323136</id><snippet>True</snippet></ROW><ROW><id>14323136</id><snippet>or</snippet></ROW><ROW><id>14323136</id><snippet>d.get('foo',func()) or func()</snippet></ROW><ROW><id>14323136</id><snippet>func</snippet></ROW><ROW><id>14323227</id><snippet>from sqlalchemy import Column, DateTime, Integer, String, Table, MetaData
from sqlalchemy.orm import mapper
from sqlalchemy import create_engine, orm

metadata = MetaData()

product = Table('product', metadata,
    Column('id', Integer, primary_key=True),
    Column('name', String(1024), nullable=False, unique=True),

)

class Product(object):
    def __init__(self, id, name):
        self.id = id
        self.name = name
    def __repr__(self):
        return "%s(%r,%r)" % (self.__class__.name,self.id,self.name)

mapper(Product, product)


db = create_engine('sqlite:////temp/test123.db')
metadata.create_all(db)

sm = orm.sessionmaker(bind=db, autoflush=True, autocommit=True, expire_on_commit=True)
session = orm.scoped_session(sm)

#create new Product record:
if session.query(Product).filter(Product.id==1).count()==0:

    new_prod = Product("1","Product1")
    print "Creating new product: %r" % new_prod
    session.add(new_prod)
    session.flush()
else:
    print "product with id 1 already exists: %r" % session.query(Product).filter(Product.id==1).one()

print "loading Product with id=1"
prod = session.query(Product).filter(Product.id==1).one()
print "current name: %s" % prod.name
prod.name = "new name"

print prod


prod.name = 'test'

session.add(prod)
session.flush()

print prod

#session.delete(prod)
#session.flush()
</snippet></ROW><ROW><id>14323295</id><snippet>while True</snippet></ROW><ROW><id>14323295</id><snippet>print</snippet></ROW><ROW><id>14323295</id><snippet>if message:</snippet></ROW><ROW><id>14323295</id><snippet>sleep</snippet></ROW><ROW><id>14323295</id><snippet>SocketServer</snippet></ROW><ROW><id>14323295</id><snippet>try</snippet></ROW><ROW><id>14323382</id><snippet>Element</snippet></ROW><ROW><id>14323382</id><snippet>.attrib</snippet></ROW><ROW><id>14323382</id><snippet>for name, value in root.attrib.items():
    print '{0}="{1}"'.format(name, value)
</snippet></ROW><ROW><id>14323382</id><snippet>for name in root.attrib:
    print '{0}="{1}"'.format(name, root.attrib[name])
</snippet></ROW><ROW><id>14323382</id><snippet>.values()</snippet></ROW><ROW><id>14323382</id><snippet>dict</snippet></ROW><ROW><id>14323382</id><snippet>print root.attrib['a']
</snippet></ROW><ROW><id>14323422</id><snippet>isin</snippet></ROW><ROW><id>14323422</id><snippet>In [1]: df = pd.read_csv(cusp.csv, sep='\s+')

In [2]: df.cusip.isin(['XXXX', 'ZZZZ'])
Out[2]: 
0     True
1    False
2     True
3     True
4    False
5     True
Name: cusip

In [3]: df[df.cusip.isin(['XXXX', 'ZZZZ'])]
Out[3]: 
         date cusip  value
0  2012-12-20  XXXX   4.23
2  2012-12-20  ZZZZ   8.12
3  2012-12-21  XXXX   5.78
5  2012-12-21  ZZZZ   9.09
</snippet></ROW><ROW><id>14323604</id><snippet>def sliced_sum_op(a, b, c) :
    d = np.empty(a.shape[0])
    for i in xrange(a.shape[0]):
        d[i] = np.sum(a[i, b[i]:c[i]]) 
    return d
</snippet></ROW><ROW><id>14323604</id><snippet>np.cumsum</snippet></ROW><ROW><id>14323604</id><snippet>def sliced_sum(a, b, c) :
    cum = np.cumsum(a, axis=1)
    cum = np.hstack((np.zeros((a.shape[0], 1), dtype=a.dtype), cum))
    rows = np.arange(a.shape[0])
    return cum[rows, c] - cum[rows, b]
</snippet></ROW><ROW><id>14323604</id><snippet>(n, n)</snippet></ROW><ROW><id>14323604</id><snippet>import timeit
import matplotlib.pyplot as plt

n = np.arange(10, 1000, 10)
op = np.zeros(n.shape[0])
me = np.zeros(n.shape[0])
th = np.zeros(n.shape[0])
jp = np.zeros(n.shape[0])
for j, size in enumerate(n) :
    a = np.random.rand(size, size)
    b, c = indices = np.sort(np.random.randint(size + 1,
                                               size=(2, size)), axis=0)
    np.testing.assert_almost_equal(sliced_sum_op(a, b, c),
                                   sliced_sum(a, b, c))
    np.testing.assert_almost_equal(sliced_sum_op(a, b, c),
                                   sum_between2(a, b, c))
    np.testing.assert_almost_equal(sliced_sum_op(a, b, c),
                                   sum_between_mmult(a, b, c))

    op[j] = timeit.timeit('sliced_sum_op(a, b, c)',
                          'from __main__ import sliced_sum_op, a, b, c',
                          number=10)
    me[j] = timeit.timeit('sliced_sum(a, b, c)',
                          'from __main__ import sliced_sum, a, b, c',
                          number=10)
    th[j] = timeit.timeit('sum_between2(a, b, c)',
                          'from __main__ import sum_between2, a, b, c',
                          number=10)
    jp[j] = timeit.timeit('sum_between_mmult(a, b, c)',
                          'from __main__ import sum_between_mmult, a, b, c',
                          number=10)
plt.subplot(211)
plt.plot(n, op, label='op')
plt.plot(n, me, label='jaime')
plt.plot(n, th, label='thorsten')
plt.plot(n, jp, label='japreiss')
plt.xlabel('n')
plt.legend(loc='best')
plt.show()
</snippet></ROW><ROW><id>14323725</id><snippet>def export(modeladmin, request, queryset):
    """
    not sure if this will work
    """
    request.session['export_querset'] = queryset

    """
    if above does not work then just set this and check for it in view and u can make the queryset again if this is set 
    """
    request.session['export_querset'] = 1
    return HttpResponseRedirect("/export/")
</snippet></ROW><ROW><id>14323849</id><snippet>__del__()</snippet></ROW><ROW><id>14323849</id><snippet>Wrapper</snippet></ROW><ROW><id>14323849</id><snippet>Wrapper</snippet></ROW><ROW><id>14323849</id><snippet>Wrapper</snippet></ROW><ROW><id>14323849</id><snippet>Inner</snippet></ROW><ROW><id>14323849</id><snippet>__del__</snippet></ROW><ROW><id>14323849</id><snippet>class Wrapper():
    class Inner(object):
        def __del__(self):
            print 'Inner destructor'

    innerInstance = Inner()

    def __del__(self):
        print 'Wrapper destructor'

if __name__ == '__main__':
    print "foo"
    x = Wrapper()
    print "bar"
    del x
    del Wrapper
</snippet></ROW><ROW><id>14323851</id><snippet>from django.db.models import F

match = UserProfile.objects.filter(user__date_joined__gte = F('group__date'))
</snippet></ROW><ROW><id>14323886</id><snippet>return self.transmit('GET', 'compression?mediatypeid={0}'.format(media_type)
                             if media_type is not None else 'compression')
</snippet></ROW><ROW><id>14323886</id><snippet>if media_type not none</snippet></ROW><ROW><id>14323886</id><snippet>if media_type is not None</snippet></ROW><ROW><id>14323887</id><snippet>from collections import defaultdict
import re
params = {
    'a': 'b',
    'c': 'd',
    'foo[bar]': 'element1',
    'foo[baz]': 'element2',
    'foo[qis]': 'element3',
    'foo[borfarglan][bofgl]': 'element4',
    'foo[borfarglan][bafgl]': 'element5',
}

def split(string, brackets_on_first_result = False):
    matches = re.split("[\[\]]+", string)
    matches.remove('')
    return matches

def mr_parse(params):
    results = {}
    for key in params:
        if '[' in key:
            key_list = split(key)
            d = results
            for partial_key in key_list[:-1]:
                if partial_key not in d:
                    d[partial_key] = dict()
                d = d[partial_key]
            d[key_list[-1]] = params[key]
        else:
            results[key] = params[key]
    return results
print mr_parse(params)
</snippet></ROW><ROW><id>14323961</id><snippet>stringvar = "bar"
</snippet></ROW><ROW><id>14323961</id><snippet>stringvar</snippet></ROW><ROW><id>14323961</id><snippet>global</snippet></ROW><ROW><id>14323961</id><snippet>dictvar['key1'] += 1
</snippet></ROW><ROW><id>14323961</id><snippet>dictvar</snippet></ROW><ROW><id>14323961</id><snippet>dictvar</snippet></ROW><ROW><id>14323961</id><snippet>listvar = ["hello", "world"]

def listfoo():
    list[0] = "goodbye"
</snippet></ROW><ROW><id>14323961</id><snippet>class MyClass:
    foo = 1
myclassvar = MyClass()

def myclassfoo():
    myclassvar.foo = 2
</snippet></ROW><ROW><id>14324014</id><snippet>fd = open(dFile)
lineas = fd.readlines()
fd.close()

for i in xrange(0, len(lineas), 6):
    print "CA:"+lineas[i]+"Q:"+lineas[i+1]+"A1:"+lineas[i+2]+"A2:"+lineas[i+3]+"A3:"+lineas[i+4]+"A4:"+lineas[i+5];
</snippet></ROW><ROW><id>14324175</id><snippet>__init__()</snippet></ROW><ROW><id>14324175</id><snippet>class Vec2D(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __str__(self):
        my_name = '&lt;unknown&gt;'
        namespace = globals().copy()
        for name,obj in namespace.items():
            if obj is self:
                my_name = name
                break
        return "\n".join(["{!r}:",
                          "  X coordinate is {}",
                          "  Y coordinate is {}"]).format(my_name, self.x, self.y)

if __name__ == '__main__':
    mypoint1 = Vec2D(0,1)
    mypoint2 = Vec2D(1,2)

    print mypoint1
    print mypoint2
</snippet></ROW><ROW><id>14324175</id><snippet>'mypoint1':
  X coordinate is 0
  Y coordinate is 1
'mypoint2':
  X coordinate is 1
  Y coordinate is 2
</snippet></ROW><ROW><id>14324175</id><snippet>for</snippet></ROW><ROW><id>14324358</id><snippet>setup.py</snippet></ROW><ROW><id>14324358</id><snippet>#Add extensions that requires NumPy to build
if is_Numpy_installed():
   import numpy
   numpy_include_dir = numpy.get_include()
   EXTENSIONS.append(
      Extension('Bio.Cluster.cluster',
              ['Bio/Cluster/clustermodule.c',
               'Bio/Cluster/cluster.c'],
              include_dirs=[numpy_include_dir],
              ))
   EXTENSIONS.append(
      Extension('Bio.KDTree._CKDTree',
              ["Bio/KDTree/KDTree.c",
               "Bio/KDTree/KDTreemodule.c"],
              include_dirs=[numpy_include_dir],
              ))
   EXTENSIONS.append(
      Extension('Bio.Motif._pwm',
              ["Bio/Motif/_pwm.c"],
              include_dirs=[numpy_include_dir],
              ))
</snippet></ROW><ROW><id>14324358</id><snippet>#Add extensions that requires NumPy to build
if is_Numpy_installed():
   import numpy
   numpy_include_dir = numpy.get_include()
   EXTENSIONS.append(
      Extension('Bio.Cluster.cluster',
              ['Bio/Cluster/clustermodule.c',
               'Bio/Cluster/cluster.c'],
              include_dirs=[numpy_include_dir, '/usr/local/lib64/python2.7/site-packages/numpy/core/include/'],
              ))
   EXTENSIONS.append(
      Extension('Bio.KDTree._CKDTree',
              ["Bio/KDTree/KDTree.c",
               "Bio/KDTree/KDTreemodule.c"],
              include_dirs=[numpy_include_dir, '/usr/local/lib64/python2.7/site-packages/numpy/core/include/'],
              ))
   EXTENSIONS.append(
      Extension('Bio.Motif._pwm',
              ["Bio/Motif/_pwm.c"],
              include_dirs=[numpy_include_dir, '/usr/local/lib64/python2.7/site-packages/numpy/core/include/'],
              ))
</snippet></ROW><ROW><id>14324358</id><snippet>setup.py</snippet></ROW><ROW><id>14324358</id><snippet>pip install recompressed.tar.gz
</snippet></ROW><ROW><id>14324456</id><snippet>class Foo(object):
    def __init__(self, value):
        self._spam = value

    @property
    def spam(self):
        return self._spam
</snippet></ROW><ROW><id>14324456</id><snippet>Foo().spam</snippet></ROW><ROW><id>14324456</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __init__(self, value):
...         self._spam = value
...     @property
...     def spam(self):
...         return self._spam
... 
&gt;&gt;&gt; f = Foo('eggs')
&gt;&gt;&gt; f.spam
'eggs'
&gt;&gt;&gt; f.spam = 'ham'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: can't set attribute
</snippet></ROW><ROW><id>14324456</id><snippet>_spam</snippet></ROW><ROW><id>14324456</id><snippet>&gt;&gt;&gt; f._spam
'eggs'
&gt;&gt;&gt; f._spam = 'ham'
&gt;&gt;&gt; f.spam
'ham'
</snippet></ROW><ROW><id>14324456</id><snippet>__</snippet></ROW><ROW><id>14324456</id><snippet>class Foo(object):
    def __init__(self, value):
        self.__spam = value

    @property
    def spam(self):
        return self.__spam
</snippet></ROW><ROW><id>14324456</id><snippet>&gt;&gt;&gt; f = Foo('eggs')
&gt;&gt;&gt; f.spam
'eggs'
&gt;&gt;&gt; f.__spam
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'Foo' object has no attribute '__spam'
&gt;&gt;&gt; f._Foo__spam
'eggs'
&gt;&gt;&gt; f._Foo__spam = 'ham'
&gt;&gt;&gt; f.spam
'ham'
</snippet></ROW><ROW><id>14324497</id><snippet>def reset(percent=50):
    return random.randrange(100) &gt; percent
</snippet></ROW><ROW><id>14324497</id><snippet>&gt;</snippet></ROW><ROW><id>14324826</id><snippet>\boldsymbol</snippet></ROW><ROW><id>14324826</id><snippet>r'$\boldsymbol{\phi}$'
</snippet></ROW><ROW><id>14324826</id><snippet>amsmath</snippet></ROW><ROW><id>14324826</id><snippet>matplotlib.rc('text', usetex=True)
matplotlib.rcParams['text.latex.preamble']=[r"\usepackage{amsmath}"]
</snippet></ROW><ROW><id>14324858</id><snippet>sqlString=company['name']+","+simplejson.dumps(info)
cur.execute("INSERT INTO companyInfo VALUES (?)", (sqlString, ))
</snippet></ROW><ROW><id>14324997</id><snippet>re.split</snippet></ROW><ROW><id>14324997</id><snippet>&gt;&gt;&gt; [s for s in re.split(r'[ ,;]', '"Jan","Feb";"Mar" "Apr", "May";') if s]
['"Jan"', '"Feb"', '"Mar"', '"Apr"', '"May"']
</snippet></ROW><ROW><id>14324997</id><snippet>if s</snippet></ROW><ROW><id>14325166</id><snippet>BaseProxy</snippet></ROW><ROW><id>14325166</id><snippet>class KeyHandlerProxy(BaseProxy):
    _exposed_ = ('next', 'get')

    def __iter__(self):
        return self

    def next(self):
        o = self._callmethod('get')
        if object() == o:
            raise StopIteration
        return o
</snippet></ROW><ROW><id>14325166</id><snippet>register</snippet></ROW><ROW><id>14325166</id><snippet>QueueManager.register('keyhandler', proxytype=KeyHandlerProxy)
</snippet></ROW><ROW><id>14325471</id><snippet>elemntree</snippet></ROW><ROW><id>14325471</id><snippet>lxml.html</snippet></ROW><ROW><id>14325471</id><snippet>xpath</snippet></ROW><ROW><id>14325471</id><snippet>import lxml.html as lh
doc=lh.fromstring(xml)
doc.xpath('//sellersku/text()|//product/descendant::amount[1]/text()')
</snippet></ROW><ROW><id>14325471</id><snippet>['**VALUE_TO_GET**',
 '**VALUE_TO_GET**',
 '**VALUE_TO_GET**',
 '**VALUE_TO_GET**']
</snippet></ROW><ROW><id>14325609</id><snippet>d1 = {'goods.H.p': 0.5, 'goods.H.theta': 100, 'goods.H.sigma': 20}
d2 = {'goods.H.theta': 100, 'goods.H.sigma': 20, 'goods.H.p': 0.5}

collectn.find(d1).count()
collectn.find(d2).count()
</snippet></ROW><ROW><id>14325609</id><snippet>collectn.find({'goods.H.' + k:v for k,v in d1.items()})
collectn.find({'goods.H.' + k:v for k,v in d2.items()})
</snippet></ROW><ROW><id>14325814</id><snippet>leveloneAdd == ('english', 'subject')</snippet></ROW><ROW><id>14325814</id><snippet>each</snippet></ROW><ROW><id>14325814</id><snippet>leveloneAdd == [('english', 'subject')]</snippet></ROW><ROW><id>14325814</id><snippet>get_all</snippet></ROW><ROW><id>14325814</id><snippet>if isinstance(leveloneAdd, basestring):
    leveloneAdd = [leveloneAdd]
</snippet></ROW><ROW><id>14325821</id><snippet>def lucas_kanade_np(im1, im2, win=2):
    assert im1.shape == im2.shape
    I_x = np.zeros(im1.shape)
    I_y = np.zeros(im1.shape)
    I_t = np.zeros(im1.shape)
    I_x[1:-1, 1:-1] = (im1[1:-1, 2:] - im1[1:-1, :-2]) / 2
    I_y[1:-1, 1:-1] = (im1[2:, 1:-1] - im1[:-2, 1:-1]) / 2
    I_t[1:-1, 1:-1] = im1[1:-1, 1:-1] - im2[1:-1, 1:-1]
    params = np.zeros(im1.shape + (5,)) #Ix2, Iy2, Ixy, Ixt, Iyt
    params[..., 0] = I_x * I_x # I_x2
    params[..., 1] = I_y * I_y # I_y2
    params[..., 2] = I_x * I_y # I_xy
    params[..., 3] = I_x * I_t # I_xt
    params[..., 4] = I_y * I_t # I_yt
    del I_x, I_y, I_t
    cum_params = np.cumsum(np.cumsum(params, axis=0), axis=1)
    del params
    win_params = (cum_params[2 * win + 1:, 2 * win + 1:] -
                  cum_params[2 * win + 1:, :-1 - 2 * win] -
                  cum_params[:-1 - 2 * win, 2 * win + 1:] +
                  cum_params[:-1 - 2 * win, :-1 - 2 * win])
    del cum_params
    op_flow = np.zeros(im1.shape + (2,))
    det = win_params[...,0] * win_params[..., 1] - win_params[..., 2] **2
    op_flow_x = np.where(det != 0,
                         (win_params[..., 1] * win_params[..., 3] -
                          win_params[..., 2] * win_params[..., 4]) / det,
                         0)
    op_flow_y = np.where(det != 0,
                         (win_params[..., 0] * win_params[..., 4] -
                          win_params[..., 2] * win_params[..., 3]) / det,
                         0)
    op_flow[win + 1: -1 - win, win + 1: -1 - win, 0] = op_flow_x[:-1, :-1]
    op_flow[win + 1: -1 - win, win + 1: -1 - win, 1] = op_flow_y[:-1, :-1]
    return op_flow
</snippet></ROW><ROW><id>14325821</id><snippet>np.cumsum</snippet></ROW><ROW><id>14325821</id><snippet>lucas_kanade</snippet></ROW><ROW><id>14325821</id><snippet>lucas_kanade_op</snippet></ROW><ROW><id>14325821</id><snippet>def lucas_kanade_op(im1, im2, win=2) :
    ...
    return np.array(opfl)
</snippet></ROW><ROW><id>14325821</id><snippet>rows, cols = 100, 100
im1 = np.random.rand(rows, cols)
im2 = np.random.rand(rows, cols)
ans1 = lucas_kanade_op(im1, im2)
ans2 = lucas_kanade_np(im1, im2)
np.testing.assert_almost_equal(ans1,ans2)

import timeit
print 'op\'s time:', timeit.timeit('lucas_kanade_op(im1, im2)',
                                   'from __main__ import lucas_kanade_op, im1, im2',
                                   number=1)
print 'np\'s time:', timeit.timeit('lucas_kanade_np(im1, im2)',
                                   'from __main__ import lucas_kanade_np, im1, im2',
                                   number=1)
</snippet></ROW><ROW><id>14325821</id><snippet>op's time: 5.7419579567
np's time: 0.00256002154425
</snippet></ROW><ROW><id>14326043</id><snippet>import pandas as pd
ts = pd.Series(times, index=dates)
ts.plot(rot=30, style='x-')
</snippet></ROW><ROW><id>14326043</id><snippet>datetimes = []
for date, time in zip(dates, times):
    datetimes.append(datetime.datetime.combine(date, time))
</snippet></ROW><ROW><id>14326043</id><snippet>ts = pd.Series(1, index=datetimes)
</snippet></ROW><ROW><id>14326043</id><snippet>ts.groupby(lambda x : x.date()).sum().plot(rot=30, style='x-', kind='bar')
</snippet></ROW><ROW><id>14326056</id><snippet>app = cherrypy.tree.mount(HelloWorld(), '/', 'tiny.cfg')</snippet></ROW><ROW><id>14326182</id><snippet>class Chapter(db.Model):
    title = db.StringProperty(required=True)
    note = db.TextProperty()
    father = db.SelfReferenceProperty(collection_name='sons')
    order = db.IntegerProperty(default=0)
</snippet></ROW><ROW><id>14326289</id><snippet>dct</snippet></ROW><ROW><id>14326289</id><snippet>fftpack.dct</snippet></ROW><ROW><id>14326289</id><snippet>idct</snippet></ROW><ROW><id>14326289</id><snippet>In [13]: dct = lambda x: fftpack.dct(x, norm='ortho')

In [14]: idct = lambda x: fftpack.idct(x, norm='ortho')
</snippet></ROW><ROW><id>14326289</id><snippet>In [19]: import numpy

In [20]: a = numpy.random.rand(3,3,3)

In [21]: d = dct(dct(dct(a).transpose(0,2,1)).transpose(2,1,0)).transpose(2,1,0).transpose(0,2,1)

In [22]: e = idct(idct(idct(d).transpose(0,2,1)).transpose(2,1,0)).transpose(2,1,0).transpose(0,2,1)

In [23]: a
Out[23]: 
array([[[ 0.51699637,  0.42946223,  0.89843545],
        [ 0.27853391,  0.8931508 ,  0.34319118],
        [ 0.51984431,  0.09217771,  0.78764716]],

       [[ 0.25019845,  0.92622331,  0.06111409],
        [ 0.81363641,  0.06093368,  0.13123373],
        [ 0.47268657,  0.39635091,  0.77978269]],

       [[ 0.86098829,  0.07901332,  0.82169182],
        [ 0.12560088,  0.78210188,  0.69805434],
        [ 0.33544628,  0.81540172,  0.9393219 ]]])

In [24]: e
Out[24]: 
array([[[ 0.51699637,  0.42946223,  0.89843545],
        [ 0.27853391,  0.8931508 ,  0.34319118],
        [ 0.51984431,  0.09217771,  0.78764716]],

       [[ 0.25019845,  0.92622331,  0.06111409],
        [ 0.81363641,  0.06093368,  0.13123373],
        [ 0.47268657,  0.39635091,  0.77978269]],

       [[ 0.86098829,  0.07901332,  0.82169182],
        [ 0.12560088,  0.78210188,  0.69805434],
        [ 0.33544628,  0.81540172,  0.9393219 ]]])
</snippet></ROW><ROW><id>14326289</id><snippet>ortho</snippet></ROW><ROW><id>14326289</id><snippet>dct</snippet></ROW><ROW><id>14326289</id><snippet>idct</snippet></ROW><ROW><id>14326289</id><snippet>1/sqrt(2 * N)</snippet></ROW><ROW><id>14326289</id><snippet>1/sqrt(4 * N)</snippet></ROW><ROW><id>14326289</id><snippet>dct</snippet></ROW><ROW><id>14326289</id><snippet>idct</snippet></ROW><ROW><id>14326414</id><snippet>adjBright</snippet></ROW><ROW><id>14326414</id><snippet>self</snippet></ROW><ROW><id>14326414</id><snippet>adjBright</snippet></ROW><ROW><id>14326414</id><snippet>def adjBright(self, new_value):
    print "the slider value is", new_value
</snippet></ROW><ROW><id>14326544</id><snippet>(u"'english'", u" 'subject'")
</snippet></ROW><ROW><id>14326544</id><snippet>'english'</snippet></ROW><ROW><id>14326544</id><snippet>english</snippet></ROW><ROW><id>14326544</id><snippet>In [61]: t = (u"'english'", u"'subject'")

In [62]: a, b = t

In [63]: print a, b
'english' 'subject'

In [64]: t = (u"english", u"subject")

In [65]: a, b = t

In [66]: print a, b
english subject
</snippet></ROW><ROW><id>14326544</id><snippet>subject</snippet></ROW><ROW><id>14326544</id><snippet>In [68]: a, b = [i.strip("'") for i in t]

In [69]: a, b
Out[69]: (u'english', u'subject')

In [70]: print a, b
english subject
</snippet></ROW><ROW><id>14326580</id><snippet>def len_recursive(lst):
    def loop(lst, acc):
        if not lst:
            return acc
        return loop(lst[1:], acc + 1)
    return loop(lst, 0)
</snippet></ROW><ROW><id>14326580</id><snippet>len()</snippet></ROW><ROW><id>14326902</id><snippet>from selenium import webdriver    
from time import sleep
driver = webdriver.Remote(desired_capabilities=webdriver.DesiredCapabilities.HTMLUNITWITHJS)
driver.get('http://www.omegle.com/')
interval = 10  #or whatever interval you want
while True:
    element = driver.find_element_by_id("onlinecount")
    print element.text.split()[0]
    sleep(interval)
</snippet></ROW><ROW><id>14326938</id><snippet>figure.canvas.start_event_loop()</snippet></ROW><ROW><id>14326938</id><snippet>figure.canvas.stop_event_loop()</snippet></ROW><ROW><id>14326938</id><snippet>from matplotlib import pyplot as pp

class FigEventLoopDemo(object):

    def __init__(self):

        self.fig,self.ax = pp.subplots(1,1,num='Event loop demo')
        self.clickme = self.ax.text(0.5,0.5,'click me',ha='center',va='center',color='r',fontsize=20,picker=10)

        canvas = self.fig.canvas

        # add a callback that triggers when the text is clicked
        self.cid = canvas.mpl_connect('pick_event',self.on_pick)

        print "entering a blocking loop"

        # start a blocking event loop
        self.fig.canvas.start_event_loop(timeout=-1)

    def on_pick(self,event):

        if event.artist is self.clickme:

            # exit the blocking event loop
            self.fig.canvas.stop_event_loop()

            print "now we're unblocked"
</snippet></ROW><ROW><id>14326993</id><snippet>if 'x' or 'X' == player</snippet></ROW><ROW><id>14326993</id><snippet>player</snippet></ROW><ROW><id>14326993</id><snippet>x</snippet></ROW><ROW><id>14326993</id><snippet>X</snippet></ROW><ROW><id>14326993</id><snippet>if ('x') or ('X' == player)</snippet></ROW><ROW><id>14326993</id><snippet>'x'</snippet></ROW><ROW><id>14326993</id><snippet>'X' == player</snippet></ROW><ROW><id>14326993</id><snippet>True</snippet></ROW><ROW><id>14326993</id><snippet>True</snippet></ROW><ROW><id>14326993</id><snippet>True</snippet></ROW><ROW><id>14326993</id><snippet>&gt;&gt;&gt; bool('x' or 'X' == 'fiddlesticksandflapdoodles')
True
&gt;&gt;&gt; bool('x')
True
&gt;&gt;&gt; bool('X' == 'fiddlesticksandflapdoodles')
False
</snippet></ROW><ROW><id>14326993</id><snippet>if 'x' == player or 'X' == player:
</snippet></ROW><ROW><id>14326993</id><snippet>if player in ('x', 'X'):
</snippet></ROW><ROW><id>14326993</id><snippet>if player.lower() == 'x':
</snippet></ROW><ROW><id>14326993</id><snippet>if</snippet></ROW><ROW><id>14326993</id><snippet>'n' or 'N'</snippet></ROW><ROW><id>14326993</id><snippet>'o' or 'O'</snippet></ROW><ROW><id>14326993</id><snippet>if choice</snippet></ROW><ROW><id>14326993</id><snippet>choices = {letter: number for number, letter in enumerate('abcdefghi')}
</snippet></ROW><ROW><id>14326993</id><snippet>choices</snippet></ROW><ROW><id>14326993</id><snippet>index = choices.get(choice.lower())
if index is not None:
    move[index] = player_choice
    movestorage(move_storage, move)
</snippet></ROW><ROW><id>14327086</id><snippet>count</snippet></ROW><ROW><id>14327086</id><snippet>len</snippet></ROW><ROW><id>14327086</id><snippet>len()</snippet></ROW><ROW><id>14327086</id><snippet>SELECT COUNT(*)</snippet></ROW><ROW><id>14327086</id><snippet>count()</snippet></ROW><ROW><id>14327086</id><snippet>iterator</snippet></ROW><ROW><id>14327086</id><snippet>len</snippet></ROW><ROW><id>14327086</id><snippet>iterator</snippet></ROW><ROW><id>14327154</id><snippet>name</snippet></ROW><ROW><id>14327154</id><snippet>threading.Thread.__init__(self)</snippet></ROW><ROW><id>14327179</id><snippet>Test.test
</snippet></ROW><ROW><id>14327179</id><snippet>from Test import *
</snippet></ROW><ROW><id>14327179</id><snippet>from Test import test
</snippet></ROW><ROW><id>14327244</id><snippet>next(d['value']
    for d in myDict['SomeMetric']['day']
    if d['date'] == "2013-01-02")
</snippet></ROW><ROW><id>14327244</id><snippet>day</snippet></ROW><ROW><id>14327244</id><snippet>date</snippet></ROW><ROW><id>14327280</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>14327280</id><snippet>temp = defaultdict(set)

for delvt, pin in zip(delvt_list, pin_list):
    temp[delvt].add(pin)
</snippet></ROW><ROW><id>14327280</id><snippet>defaultdict</snippet></ROW><ROW><id>14327280</id><snippet>list</snippet></ROW><ROW><id>14327280</id><snippet>temp = defaultdict(list)

for delvt, pin in zip(delvt_list, pin_list):
    temp[delvt].append(pin)
</snippet></ROW><ROW><id>14327280</id><snippet>something in aset</snippet></ROW><ROW><id>14327331</id><snippet>pass</snippet></ROW><ROW><id>14327331</id><snippet>if 3 &gt; 0:
    print('3 greater then 0')
else:
    pass
</snippet></ROW><ROW><id>14327331</id><snippet>def doNothing():
    pass
</snippet></ROW><ROW><id>14327480</id><snippet>ax5.grid(False)
</snippet></ROW><ROW><id>14327689</id><snippet>setTimeout</snippet></ROW><ROW><id>14327689</id><snippet>setInterval</snippet></ROW><ROW><id>14327689</id><snippet>var timerid = setInterval(function() {
    // do something
    // instead of "break", you'd use "clearTimeout(timerid)"
}, 2000);
</snippet></ROW><ROW><id>14327689</id><snippet>function getUpdate() {
    myAjax(…, function onAjaxSuccess(result) { // an async event as well
        // show(result)
        if (!result.end)
            setTimeout(getUpdate, 2000);
    });
}
getUpdate();
</snippet></ROW><ROW><id>14327731</id><snippet>if</snippet></ROW><ROW><id>14327731</id><snippet>for wd in dir_list:
    if os.path.isdir(wd):
        print(wd + " is a directory.")
</snippet></ROW><ROW><id>14327731</id><snippet>is True</snippet></ROW><ROW><id>14327731</id><snippet>if</snippet></ROW><ROW><id>14327777</id><snippet>x = []

for d in xrange(0,66):
    x.append(data[:,d])
</snippet></ROW><ROW><id>14327777</id><snippet>for d in xrange(1,68):
    exec 'x%s = data[:,%s]' %(d,d-1)
</snippet></ROW><ROW><id>14327866</id><snippet>self</snippet></ROW><ROW><id>14327866</id><snippet>staticmethod</snippet></ROW><ROW><id>14327866</id><snippet>class C(object):
    def my_regular_method(self, foo, bar):
        pass
    @staticmethod
    def my_static_method(foo, bar):
        pass

c = C()
c.my_regular_method(1, 2)
c.my_static_method(1, 2)
</snippet></ROW><ROW><id>14327866</id><snippet>classmethod</snippet></ROW><ROW><id>14327866</id><snippet>class C(object):
    @classmethod
    def my_class_method(cls, foo, bar):
        pass

c.my_class_method(1, 2)    
</snippet></ROW><ROW><id>14327941</id><snippet>px.ffill()</snippet></ROW><ROW><id>14327941</id><snippet>DataFrame</snippet></ROW><ROW><id>14327941</id><snippet>px</snippet></ROW><ROW><id>14327941</id><snippet>inplace = True</snippet></ROW><ROW><id>14327941</id><snippet>px.ffill(inplace = True)
sma200 = pd.rolling_mean(px, 200)
print(sma200)
</snippet></ROW><ROW><id>14327941</id><snippet>Data columns:
BELG.BR    2085  non-null values
MSFT       2635  non-null values
dtypes: float64(2)
</snippet></ROW><ROW><id>14328108</id><snippet>a.request_set</snippet></ROW><ROW><id>14328108</id><snippet>related_name</snippet></ROW><ROW><id>14328108</id><snippet>ForeignKey</snippet></ROW><ROW><id>14328216</id><snippet>news_detail</snippet></ROW><ROW><id>14328216</id><snippet>   url(r'^(?P&lt;year&gt;\d{4})/(?P&lt;month&gt;\w{3})/(?P&lt;day&gt;\d{2})/(?P&lt;slug&gt;[-\w]+)/$',       
      DateDetailView.as_view(
        date_field = 'pub_date',
        model=News,
        context_object_name="news_detail",),
        ),
       name='news_detail'),  #&lt;--- you're missing this
</snippet></ROW><ROW><id>14328499</id><snippet>pip install autopep8
</snippet></ROW><ROW><id>14328499</id><snippet>autopep8 py_file --in-place
</snippet></ROW><ROW><id>14328499</id><snippet>autopep8 project_dir --recursive --in-place --pep8-passes 2000 --verbose
</snippet></ROW><ROW><id>14328499</id><snippet>pep8 project_dir --ignore=E501
</snippet></ROW><ROW><id>14328499</id><snippet>--aggressive</snippet></ROW><ROW><id>14328499</id><snippet>True == np.bool_(True)</snippet></ROW><ROW><id>14328499</id><snippet>True is np.bool_(True)</snippet></ROW><ROW><id>14328499</id><snippet>pep8 --quiet --statistics .
</snippet></ROW><ROW><id>14328530</id><snippet>delvt</snippet></ROW><ROW><id>14328563</id><snippet>if ... in ...</snippet></ROW><ROW><id>14328801</id><snippet>&gt; cat test.cfg 
[test] 
test=one%(nl)stwo%(nl)sthree

&gt; cat test.py 
import ConfigParser
c = ConfigParser.SafeConfigParser()
c.read('test.cfg')
print c.get('test','test', vars={"nl":"\n\n"})

&gt; python test.py 
one

two

three
</snippet></ROW><ROW><id>14328911</id><snippet>reload</snippet></ROW><ROW><id>14328911</id><snippet>builtins</snippet></ROW><ROW><id>14328911</id><snippet>imp</snippet></ROW><ROW><id>14328911</id><snippet>imp.reload(test)
</snippet></ROW><ROW><id>14328911</id><snippet>reload()</snippet></ROW><ROW><id>14328911</id><snippet>imp.reload()</snippet></ROW><ROW><id>14328911</id><snippet>bar</snippet></ROW><ROW><id>14328911</id><snippet>foo.Bar</snippet></ROW><ROW><id>14328911</id><snippet>foo</snippet></ROW><ROW><id>14328911</id><snippet>from foo import *</snippet></ROW><ROW><id>14328911</id><snippet>import</snippet></ROW><ROW><id>14329020</id><snippet>pip</snippet></ROW><ROW><id>14329020</id><snippet>easy_install</snippet></ROW><ROW><id>14329020</id><snippet>easy_install</snippet></ROW><ROW><id>14329020</id><snippet>pip</snippet></ROW><ROW><id>14329020</id><snippet>pip</snippet></ROW><ROW><id>14329020</id><snippet>pip freeze &gt; modules.dump
</snippet></ROW><ROW><id>14329020</id><snippet>line.split('==')[0] for line in f</snippet></ROW><ROW><id>14329020</id><snippet>pip install</snippet></ROW><ROW><id>14329020</id><snippet>site-packages</snippet></ROW><ROW><id>14329020</id><snippet>foo_bar-1.2.3.4-blah-blah.egg</snippet></ROW><ROW><id>14329020</id><snippet>foo-bar</snippet></ROW><ROW><id>14329020</id><snippet>foo_bar</snippet></ROW><ROW><id>14329020</id><snippet>easy_install</snippet></ROW><ROW><id>14329020</id><snippet>pip</snippet></ROW><ROW><id>14329020</id><snippet>easy_install</snippet></ROW><ROW><id>14329020</id><snippet>easy_install</snippet></ROW><ROW><id>14329020</id><snippet>python2.6 $(which easy_install)</snippet></ROW><ROW><id>14329020</id><snippet>easy_install</snippet></ROW><ROW><id>14329020</id><snippet>easy_install-2.6</snippet></ROW><ROW><id>14329020</id><snippet>easy_install-2.7</snippet></ROW><ROW><id>14329020</id><snippet>easy_install</snippet></ROW><ROW><id>14329236</id><snippet>protect</snippet></ROW><ROW><id>14329236</id><snippet>protect</snippet></ROW><ROW><id>14329236</id><snippet>from functools import wraps

from django.utils.decorators import available_attrs

def protect(func):
    @wraps(func, assigned=available_attrs(func))
    def inner(request, *args, **kwargs):
        if some_condition:
            return render_to_response('protected_template')
        return func(request, *args, **kwargs)
    return inner
</snippet></ROW><ROW><id>14329236</id><snippet>@protect
def show(request):
   ...
   return render_to_response(...)
</snippet></ROW><ROW><id>14329269</id><snippet>print(i, ":", i**3)</snippet></ROW><ROW><id>14329269</id><snippet>i, ":", i**3</snippet></ROW><ROW><id>14329269</id><snippet>i</snippet></ROW><ROW><id>14329269</id><snippet>i</snippet></ROW><ROW><id>14329269</id><snippet>print(i)</snippet></ROW><ROW><id>14329269</id><snippet>i</snippet></ROW><ROW><id>14329269</id><snippet>print(9)</snippet></ROW><ROW><id>14329269</id><snippet>for i in [1,3,5,7,9]:
    print(i, ":", i**3)
</snippet></ROW><ROW><id>14329427</id><snippet>enterText()</snippet></ROW><ROW><id>14329427</id><snippet>start()</snippet></ROW><ROW><id>14329427</id><snippet>&gt;&gt;&gt; def enterText():
    return input("enter text: ")

&gt;&gt;&gt; def start():
    text = enterText()
    print ("you entered: " + str(text))
</snippet></ROW><ROW><id>14329427</id><snippet>enterText(text)</snippet></ROW><ROW><id>14329427</id><snippet>value</snippet></ROW><ROW><id>14329427</id><snippet>start()</snippet></ROW><ROW><id>14329427</id><snippet>value</snippet></ROW><ROW><id>14329427</id><snippet>text</snippet></ROW><ROW><id>14329427</id><snippet>text</snippet></ROW><ROW><id>14329561</id><snippet>import threading

def task1():
  urllib2.urlopen(blabla)

class bla:
  def disconnectButton(self, w):
    print "Window Resize"
    self.buttononTop()
    #urllib2.urlopen(disconnect_url).read()
    t1 = threading.Thread(target=task1)
    subprocess.call("/var/tmp/restartMe.sh", shell=True)
</snippet></ROW><ROW><id>14329652</id><snippet>class A(object):
    def __init__(self, foo, bar=3):
        self.foo = foo
        self.bar = bar

class B(A):
    def __init__(self, quux=6, **kwargs):
        super(B, self).__init__(**kwargs)

        self.quux = quux

B(foo=1, quux=4)
</snippet></ROW><ROW><id>14329652</id><snippet>super</snippet></ROW><ROW><id>14329652</id><snippet>A</snippet></ROW><ROW><id>14329652</id><snippet>B</snippet></ROW><ROW><id>14329869</id><snippet>&gt;&gt;&gt; from math import log
&gt;&gt;&gt; def bytes_needed(n):
...     if n == 0:
...         return 1
...     return int(log(n, 256)) + 1
...
&gt;&gt;&gt; bytes_needed(0x01)
1
&gt;&gt;&gt; bytes_needed(0x100)
2
&gt;&gt;&gt; bytes_needed(0x10000)
3
</snippet></ROW><ROW><id>14330047</id><snippet>def one():
    print ("lol")
    print ("dood")

def two():
    one()
    one()

two()
</snippet></ROW><ROW><id>14330164</id><snippet>reqests</snippet></ROW><ROW><id>14330164</id><snippet>import requests

r = requests.get('http://www.epicurious.com/recipes/food/reviews/Breaded-Chicken-Cutlets-aka-Grandma-Jodys-Chicken-51114400')

print r.text
</snippet></ROW><ROW><id>14330165</id><snippet>from itertools import combinations

# in is the number of dimensions of the cube (3 for a 3d cube)
def generate_vertices(n):
    for number_of_ones in xrange(0, n + 1):
        for location_of_ones in combinations(xrange(0, n), number_of_ones):
            result = [0] * n
            for location in location_of_ones:
                result[location] = 1
            yield result

for vertex in generate_vertices(3):
    print vertex


# result:
# [0, 0, 0]
# [1, 0, 0]
# [0, 1, 0]
# [0, 0, 1]
# [1, 1, 0]
# [1, 0, 1]
# [0, 1, 1]
# [1, 1, 1]
</snippet></ROW><ROW><id>14330182</id><snippet>[x.S for x in bla[:]]
</snippet></ROW><ROW><id>14330182</id><snippet>bla[1:-1:2]</snippet></ROW><ROW><id>14330392</id><snippet>DataCol = np.hsplit(g, g.shape[1])
DataCharge = DataCol[3] #Charge mean load
DataCycle = DataCol[0]

[...]

seg1 = DataCycle[0]
</snippet></ROW><ROW><id>14330392</id><snippet>seg1 += 3
</snippet></ROW><ROW><id>14330392</id><snippet>g</snippet></ROW><ROW><id>14330392</id><snippet>&gt;&gt;&gt; a = np.array([[1,2,3], [4,5,6]])
&gt;&gt;&gt; b = a[0]
&gt;&gt;&gt; b
array([1, 2, 3])
&gt;&gt;&gt; b += 100
&gt;&gt;&gt; b
array([101, 102, 103])
&gt;&gt;&gt; a
array([[101, 102, 103],
       [  4,   5,   6]])
</snippet></ROW><ROW><id>14330392</id><snippet>.copy()</snippet></ROW><ROW><id>14330392</id><snippet>&gt;&gt;&gt; a = np.array([[1,2,3], [4,5,6]])
&gt;&gt;&gt; b = a[0].copy()
&gt;&gt;&gt; b
array([1, 2, 3])
&gt;&gt;&gt; b += 1000
&gt;&gt;&gt; b
array([1001, 1002, 1003])
&gt;&gt;&gt; a
array([[1, 2, 3],
       [4, 5, 6]])
</snippet></ROW><ROW><id>14330498</id><snippet>In [17]: a=[(1,2),(4,5),(1,0)]

In [18]: a.remove(max(a, key=sum))

In [19]: a
Out[19]: [(1, 2), (1, 0)]

In [20]: b = [(3,2),(9,4),(2,2)]

In [21]: b.remove(max(b,key=sum))

In [22]: b
Out[22]: [(3, 2), (2, 2)]
</snippet></ROW><ROW><id>14330498</id><snippet>In [34]: a=[(1,2),(4,5),(1,0)]

In [35]: b = [(3,2),(9,4),(2,2)]

In [36]: b.append(a.pop(a.index(max(a,key=sum))))

In [37]: b
Out[37]: [(3, 2), (9, 4), (2, 2), (4, 5)]

In [38]: a
Out[38]: [(1, 2), (1, 0)]
</snippet></ROW><ROW><id>14330498</id><snippet>In [44]: maxx=[]

In [45]: a=[(1,2),(4,5),(1,0)]

In [46]: b = [(3,2),(9,4),(2,2)]

In [47]: maxx.append(a.pop(a.index(max(a,key=sum))))

In [48]: maxx.append(b.pop(b.index(max(b,key=sum))))

In [49]: a
Out[49]: [(1, 2), (1, 0)]

In [50]: b
Out[50]: [(3, 2), (2, 2)]

In [51]: maxx
Out[51]: [(4, 5), (9, 4)]
</snippet></ROW><ROW><id>14330575</id><snippet>now</snippet></ROW><ROW><id>14330575</id><snippet>now = int(now)
</snippet></ROW><ROW><id>14330575</id><snippet>int()</snippet></ROW><ROW><id>14330575</id><snippet>now</snippet></ROW><ROW><id>14330592</id><snippet>{k: list_stats[i*7+1:(i+1)*7] for i, k in enumerate(list_stats[::7])}
</snippet></ROW><ROW><id>14330592</id><snippet>{u'site1.com': [u'3,346',
                u'23',
                u'0.68%',
                u'\u20ac0.04',
                u'\u20ac0.25',
                u'\u20ac0.85'],
 u'site2.com': [u'45,784',
                u'243',
                u'0.56%',
                u'\u20ac0.34',
                u'\u20ac0.32',
                u'\u20ac0.43'],
 u'site3.com': [u'9,396',
                u'432',
                u'4.54%',
                u'\u20ac890.24',
                u'\u20ac9.87',
                u'\u20ac8.93']}
</snippet></ROW><ROW><id>14331100</id><snippet>f = open('x.png')
Image.open(f)
Image.open(f)
</snippet></ROW><ROW><id>14331100</id><snippet>Image.open</snippet></ROW><ROW><id>14331100</id><snippet>f.tell()</snippet></ROW><ROW><id>14331100</id><snippet>f.seek(0)</snippet></ROW><ROW><id>14331100</id><snippet>Image.open</snippet></ROW><ROW><id>14331120</id><snippet>def copyPic():
  file=pickAFile()
  oldPic=makePicture(file)
  newPic=makeEmptyPicture(getWidth(oldPic),getHeight(oldPic))
  xstart=getWidth(oldPic)/2
  ystart=getHeight(oldPic)/2

  # The next line gets the max value x can be (width of pic)
  xmax = getWidth(oldPic)

    for y in range(ystart,getHeight(oldPic)):

       # Now loop from the middle (xstart) to the end (xmax)
       for x in range(xstart, xmax):

         oldPixel=getPixel(oldPic,x,y)
         colour=getColor(oldPixel)
         newPixel=getPixel(newPic,x,y)
         setColor(newPixel,colour)

       # Now the x-loop has finished for this line (this value of y)
       # so reduce xmax by 10 (or whatever value) ready for the next line
       xmax = xmax - 10

       # Then you should do some checking in your code to ensure
       # xmax is not &lt; xstart... here is something crude that should work
       if xmax &lt; xstart:
           xmax = xstart

  explore(newPic)
</snippet></ROW><ROW><id>14331120</id><snippet>+------------+
|   1     2  |
|            |
|   3     4  |
|            |
+------------+
</snippet></ROW><ROW><id>14331120</id><snippet>+-----+
|  4  |
|     |
+-----+
</snippet></ROW><ROW><id>14331120</id><snippet>+-----+
|  4 /
|  /
+-
</snippet></ROW><ROW><id>14331408</id><snippet>for</snippet></ROW><ROW><id>14331408</id><snippet>for key, vals in temp_dict.items():
    if re.search('|'.join(vals)):
        #do stuff here
</snippet></ROW><ROW><id>14331408</id><snippet>'|'.join()</snippet></ROW><ROW><id>14332213</id><snippet>True</snippet></ROW><ROW><id>14332213</id><snippet>True</snippet></ROW><ROW><id>14332752</id><snippet>['Yes', 'No'] in A</snippet></ROW><ROW><id>14332752</id><snippet>In [1]: A = [['Yes', 'No'], ['Yes', 'Idontknow'], ['No', 'Yes'], ['No', 'Idontknow']]

In [2]: ['Yes', 'No'] in A
Out[2]: True
</snippet></ROW><ROW><id>14332752</id><snippet>In [3]: A = [['Yes', 'lala', 'No'], ['Yes', 'lala', 'Idontknow'], ['No', 'lala', 'Yes'], ['No', 'lala', 'Idontknow']]

In [4]: any(i[0]=='Yes' and i[2] == 'No' for i in A)
Out[4]: True
</snippet></ROW><ROW><id>14332752</id><snippet>In [5]: def want_to_know(l,item):
   ...:     for i in l:
   ...:         if i[0] == item[0] and i[2] == item[2]:
   ...:             return True
   ...:     return False

In [6]: want_to_know(A,['Yes', 'xxx', 'No'])
Out[6]: True
</snippet></ROW><ROW><id>14332752</id><snippet>any(i[0]=='Yes' and i[2] == 'No' for i in A*10000)</snippet></ROW><ROW><id>14332752</id><snippet>In [8]: %timeit any({(x[0],x[-1]) == ('Yes','No') for x in A*10000})
100 loops, best of 3: 14 ms per loop

In [9]: % timeit {tuple([x[0],x[-1]]) for x in A*10000}
10 loops, best of 3: 33.4 ms per loop

In [10]: %timeit any(i[0]=='Yes' and i[2] == 'No' for i in A*10000)
1000 loops, best of 3: 334 us per loop
</snippet></ROW><ROW><id>14333268</id><snippet>network</snippet></ROW><ROW><id>14333268</id><snippet>&gt;&gt;&gt; localnet = Network('127.128.99.3/8')
&gt;&gt;&gt; print localnet.network()
127.0.0.0
</snippet></ROW><ROW><id>14333268</id><snippet>Network</snippet></ROW><ROW><id>14333537</id><snippet>QListWidget</snippet></ROW><ROW><id>14333537</id><snippet>QListWidget</snippet></ROW><ROW><id>14333537</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtCore, QtGui

class myWindow(QtGui.QWidget):

    def __init__(self, parent=None):
        super(myWindow, self).__init__(parent)

        self.setStyleSheet( """ QListWidget:item:selected:active {
                                     background: blue;
                                }
                                QListWidget:item:selected:!active {
                                     background: gray;
                                }
                                QListWidget:item:selected:disabled {
                                     background: gray;
                                }
                                QListWidget:item:selected:!disabled {
                                     background: blue;
                                }
                                """
                                )

        self.listWidget = QtGui.QListWidget(self)
        self.listWidget.setSelectionMode(QtGui.QAbstractItemView.MultiSelection)

        self.button = QtGui.QPushButton(self)
        self.button.setText("Disable the list!")
        self.button.clicked.connect(self.on_button_clicked)

        self.layout = QtGui.QVBoxLayout(self)
        self.layout.addWidget(self.button)
        self.layout.addWidget(self.listWidget)

        for itemNumber in range(5):
            item = QtGui.QListWidgetItem(self.listWidget)
            item.setText("Item {0}".format(itemNumber))
            self.listWidget.addItem(item)


    @QtCore.pyqtSlot()
    def on_button_clicked(self):
        enable = False if self.listWidget.isEnabled() else True

        self.listWidget.setEnabled(enable)

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('myWindow')

    main = myWindow()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14333594</id><snippet>self.valAStatus.get()</snippet></ROW><ROW><id>14333594</id><snippet>self.valAStatus</snippet></ROW><ROW><id>14333677</id><snippet>setuju()</snippet></ROW><ROW><id>14333677</id><snippet>def setuju()</snippet></ROW><ROW><id>14333697</id><snippet>regex</snippet></ROW><ROW><id>14333697</id><snippet>match = re.search("@|at", subject)
if match:
    result = match.group()
</snippet></ROW><ROW><id>14333795</id><snippet>__getattr__(self, name)</snippet></ROW><ROW><id>14334573</id><snippet>import zipfile, StringIO
o=StringIO.StringIO()
file = zipfile.ZipFile(file=o,compression=zipfile.ZIP_DEFLATED,mode="w")
.. . ## add your csv files here
file.close()
o.seek(0)
self.response.headers['Content-Type'] ='application/zip'
self.response.headers['Content-Disposition'] = 'attachment; filename="your_csvs.zip"'
self.response.out.write(o.getvalue())
</snippet></ROW><ROW><id>14334606</id><snippet>len()</snippet></ROW><ROW><id>14334606</id><snippet>len(list)</snippet></ROW><ROW><id>14334606</id><snippet>last_index+1</snippet></ROW><ROW><id>14334606</id><snippet>In [18]: a = ['a','c','d']

In [19]: len(a)-1 &gt; 4  #or len(a)&gt;4
Out[19]: False

In [20]: len(a)-1 &gt; 2
Out[20]: True
</snippet></ROW><ROW><id>14334989</id><snippet>dda$ ./nb.py 
log&gt; tagada
2013-01-15 tagada
log&gt; 香港
2013-01-15 香港
log&gt; 
</snippet></ROW><ROW><id>14334989</id><snippet>notes.md</snippet></ROW><ROW><id>14334989</id><snippet>cmd</snippet></ROW><ROW><id>14334989</id><snippet>export LESSCHARSET=utf-8
</snippet></ROW><ROW><id>14334989</id><snippet>.profile</snippet></ROW><ROW><id>14335026</id><snippet>@app.route('/fun')
def fun():
    return 'Having Fun!'
</snippet></ROW><ROW><id>14335195</id><snippet>In [6]: import datetime

# Today
In [7]: datetime.datetime.now()
Out[7]: datetime.datetime(2013, 1, 15, 15, 31, 10, 760000)

# Tomorrow's date
In [8]: print datetime.datetime.now() + datetime.timedelta(days=1)
2013-01-16 15:31:15.336000

# Day after tomorrow's day
In [9]: print datetime.datetime.now() + datetime.timedelta(days=2)
2013-01-17 15:31:52.601000

# Yesterday's date
In [10]: print datetime.datetime.now() - datetime.timedelta(days=1)
2013-01-14 15:32:00.081000
</snippet></ROW><ROW><id>14335195</id><snippet>In [15]: datetime.datetime.today()
Out[15]: datetime.datetime(2013, 1, 15, 15, 34, 37, 55000)

In [16]: datetime.datetime.today() + datetime.timedelta(days=1)
Out[16]: datetime.datetime(2013, 1, 16, 15, 34, 47, 560000)
</snippet></ROW><ROW><id>14335652</id><snippet>'\20'</snippet></ROW><ROW><id>14335652</id><snippet>chr(2 * 8 + 0) == chr(16)</snippet></ROW><ROW><id>14335652</id><snippet>repr</snippet></ROW><ROW><id>14335652</id><snippet>'\x10'</snippet></ROW><ROW><id>14335652</id><snippet>\20%</snippet></ROW><ROW><id>14335652</id><snippet>'\\20%'</snippet></ROW><ROW><id>14335652</id><snippet>r'\20%'</snippet></ROW><ROW><id>14335652</id><snippet>&gt;&gt;&gt; r'\20%'
'\\20%'
</snippet></ROW><ROW><id>14335797</id><snippet>&gt;&gt;&gt; import logging
&gt;&gt;&gt; logging.getLogger().setLevel(logging.INFO)
&gt;&gt;&gt; logging.info("Hello, World!")
INFO:root:Hello, World!
</snippet></ROW><ROW><id>14336193</id><snippet>s.connect((gethostname(), 4444))
</snippet></ROW><ROW><id>14336193</id><snippet>gethostname()</snippet></ROW><ROW><id>14336193</id><snippet>connect</snippet></ROW><ROW><id>14336193</id><snippet>s</snippet></ROW><ROW><id>14336193</id><snippet>Invalid argument</snippet></ROW><ROW><id>14336193</id><snippet>s.connect()</snippet></ROW><ROW><id>14336193</id><snippet>connect()</snippet></ROW><ROW><id>14336193</id><snippet>s</snippet></ROW><ROW><id>14336193</id><snippet>def connect(self, ...)</snippet></ROW><ROW><id>14336340</id><snippet>class Foo(object):
    pass

Foo = singleton(Foo)
# which is
Foo = Foo()
</snippet></ROW><ROW><id>14336340</id><snippet>Foo.__class__</snippet></ROW><ROW><id>14336394</id><snippet>@app.route('/&lt;func&gt;')
def fun(func):
    return 'have func :' + func + "!"
</snippet></ROW><ROW><id>14336752</id><snippet>url(r'^(?P&lt;location&gt;[\w]+)/(?P&lt;month&gt;[\w]*)/?(?P&lt;something&gt;[\w]*)/?', ...),
</snippet></ROW><ROW><id>14336752</id><snippet>def course_list(request, location, month = None, something = None):

    if month:
        # do stuff
</snippet></ROW><ROW><id>14336752</id><snippet>url(r^(?P&lt;location&gt;[\w]*) ... ),
</snippet></ROW><ROW><id>14336772</id><snippet>.replace('\\', '\\\\')</snippet></ROW><ROW><id>14336772</id><snippet>unicode_escape</snippet></ROW><ROW><id>14336772</id><snippet>replacepattern = r'\g&lt;1&gt;' + os.getcwd().encode('unicode_escape').decode('ascii')
</snippet></ROW><ROW><id>14336772</id><snippet>&gt;&gt;&gt; print(re.sub(r'(#define RootDir\s+)(.+)', r'\g&lt;1&gt;' + r'C:\Path\to\File.iss'.encode('unicode_escape').decode('ascii'), '#define Root
#define RootDir C:\Path\to\File.iss
</snippet></ROW><ROW><id>14336772</id><snippet>re.sub()</snippet></ROW><ROW><id>14336772</id><snippet>\u</snippet></ROW><ROW><id>14336772</id><snippet>\x</snippet></ROW><ROW><id>14336772</id><snippet>re.escape()</snippet></ROW><ROW><id>14336772</id><snippet>&gt;&gt;&gt; print(re.sub(r'(#define RootDir\s+)(.+)', r'\g&lt;1&gt;' + re.escape(r'C:\Path\To\File.iss'), '#define RootDir foo/bar/baz'))
#define RootDir C\:\Path\To\File\.iss
</snippet></ROW><ROW><id>14336772</id><snippet>\:</snippet></ROW><ROW><id>14336772</id><snippet>.replace()</snippet></ROW><ROW><id>14336772</id><snippet>&gt;&gt;&gt; print(re.sub(r'(#define RootDir\s+)(.+)', r'\g&lt;1&gt;' + 'C:\\Path\\To\\File-with-non-
ASCII-\xef.iss'.replace('\\', '\\\\'), '#define Root
#define RootDir C:\Path\To\File-with-non-ASCII-ï.iss
</snippet></ROW><ROW><id>14336873</id><snippet>through</snippet></ROW><ROW><id>14336873</id><snippet>ManyToMany</snippet></ROW><ROW><id>14336873</id><snippet>class Ingredient(models.Model):
    name = models.TextField()

class Recipe(models.Model):
    name = models.TextField()
    ingredients = models.ManyToManyField(Ingredient, through='RecipePart')

class RecipePart(models.Model)
    recipe = models.ForeignKey(Recipe)
    ingredient = models.ForeignKey(Ingredient)
    amount = models.IntegerField()

# ...
RecipePart(recipe=pizza, ingredient=cheese, amount=9001).save()
</snippet></ROW><ROW><id>14337150</id><snippet>build_post_form_args</snippet></ROW><ROW><id>14337869</id><snippet>key</snippet></ROW><ROW><id>14337869</id><snippet>list.sort()</snippet></ROW><ROW><id>14337869</id><snippet>sorted()</snippet></ROW><ROW><id>14337869</id><snippet>values.sort(key=somefunction)
</snippet></ROW><ROW><id>14337869</id><snippet>somefunction</snippet></ROW><ROW><id>14337869</id><snippet>key</snippet></ROW><ROW><id>14337869</id><snippet>def daytime(val):
    hour, min = map(int, val.split(':'))
    if hour &lt; 8:
        hour += 12
    return hour, min
</snippet></ROW><ROW><id>14337869</id><snippet>8:01</snippet></ROW><ROW><id>14337869</id><snippet>(8, 1)</snippet></ROW><ROW><id>14337869</id><snippet>6:25</snippet></ROW><ROW><id>14337869</id><snippet>(18, 25)</snippet></ROW><ROW><id>14337869</id><snippet>.sort()</snippet></ROW><ROW><id>14337869</id><snippet>sorted()</snippet></ROW><ROW><id>14337869</id><snippet>8:01</snippet></ROW><ROW><id>14337869</id><snippet>6:25</snippet></ROW><ROW><id>14337869</id><snippet>&gt;&gt;&gt; sorted(['1:14', '8:01', '12:46', '6:25'], key=daytime)
['8:01', '12:46', '1:14', '6:25']
</snippet></ROW><ROW><id>14337869</id><snippet>wiki.python.org</snippet></ROW><ROW><id>14337880</id><snippet>plt.gcf().canvas.mpl_connect('key_press_event',ontype)</snippet></ROW><ROW><id>14337880</id><snippet>plt.show()</snippet></ROW><ROW><id>14337880</id><snippet>plt.show()</snippet></ROW><ROW><id>14337880</id><snippet>import pylab as plt

# event definition
def ontype(event):
    if event.key == '1':
        print "1"
    elif event.key == '2':
        print "2"
    elif event.key == '3':
        print "3"

# main program
plt.plot([1,6,3,8,7])
plt.gcf().canvas.mpl_connect('key_press_event',ontype)
plt.show()
</snippet></ROW><ROW><id>14337880</id><snippet>plt.show()</snippet></ROW><ROW><id>14337880</id><snippet>plt.ion()</snippet></ROW><ROW><id>14337880</id><snippet>import random
import matplotlib
matplotlib.use('TkAgg')
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
from matplotlib.figure import Figure

try:
    import Tkinter as Tk
except ImportError:
    import tkinter as Tk
import tkMessageBox

class PlotClassifier(Tk.Tk):
    def __init__(self, plot_generator, arguments, classes, classification_callback, *args, **kwargs):
        Tk.Tk.__init__(self, *args, **kwargs)
        self.title("Plot classifier, working on %i plots" % len(arguments))
        #self.label = Tk.Label(text="Plot classifier, working on %i plots" % len(arguments))
        #self.label.pack(padx=10, pady=10)
        self._plot_generator = plot_generator
        self._arguments = arguments
        self._classes = [str(x) for x in classes]
        self._classification_callback = classification_callback
        self._setup_gui()

    def _setup_gui(self):
        #self.columnconfigure(0, minsize=100, weight=2)
        #self.columnconfigure(1, minsize=500, weight=8)
        f = Figure()
        self._ax = f.add_subplot(111)
        buttons_frame = Tk.Frame(self)
        buttons_frame.pack(side=Tk.TOP, fill=Tk.BOTH, expand=True)
        buttons_class = []
        for i, cls in enumerate(self._classes):
            buttons_class.append(Tk.Button(master=buttons_frame, text=cls, 
                                           command=lambda x=i: self.button_classification_callback(self._current_args, x)))
            buttons_class[-1].pack(side=Tk.LEFT)
        button_quit = Tk.Button(master=buttons_frame, text='Quit', command=self.destroy)
        button_quit.pack(side=Tk.RIGHT) #.grid(row=0,column=0)

        self._canvas = FigureCanvasTkAgg(f, master=self)
        self._canvas.get_tk_widget().pack(side=Tk.TOP, fill=Tk.BOTH, expand=1) #.grid(row=0, column=1, rowspan=3) #
        self._canvas.show()

        toolbar = NavigationToolbar2TkAgg( self._canvas, self )
        toolbar.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1) #.grid(row=3, column=1) #
        toolbar.update()

    def button_classification_callback(self, args, class_idx):
        self._classification_callback(args, self._classes[class_idx])
        self.classify_next_plot()

    def classify_next_plot(self):
        try:
            self._current_args = self._arguments.pop(0)
            self._ax.cla()
            self._plot_generator(self._ax, *self._current_args)
            self._canvas.draw()
        except IndexError:
            tkMessageBox.showinfo("Complete!", "All plots were classified")
            self.destroy()        

def create_plot(ax, factor):
    ax.plot([(i*factor) % 11 for i in range(100)])

def announce_classification(arguments, class_):
    print arguments, class_

if __name__ == "__main__":
    classes = ["Class %i"%i for i in range(1, 6)]
    arguments_for_plot = [[random.randint(1,10)] for x in range(10)]
    root = PlotClassifier(create_plot, arguments_for_plot, classes, classification_callback=announce_classification)
    root.after(50, root.classify_next_plot)
    root.mainloop()
</snippet></ROW><ROW><id>14337880</id><snippet>import random
import matplotlib
matplotlib.use('TkAgg')
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
from matplotlib.figure import Figure

try:
    import Tkinter as Tk
except ImportError:
    import tkinter as Tk
import tkMessageBox

class PlotClassifier(Tk.Tk):
    def __init__(self, plot_generator, arguments, classes, *args, **kwargs):
        Tk.Tk.__init__(self, *args, **kwargs)
        self.title("Plot classifier")
        self._plot_generator = plot_generator
        self._arguments = arguments
        self._classes = [str(x) for x in classes]
        self.class_ = None
        self._setup_gui()

    def _setup_gui(self):
        #self.columnconfigure(0, minsize=100, weight=2)
        #self.columnconfigure(1, minsize=500, weight=8)
        f = Figure()
        self._ax = f.add_subplot(111)
        buttons_frame = Tk.Frame(self)
        buttons_frame.pack(side=Tk.TOP, fill=Tk.X, expand=True)
        buttons_class = []
        for i, cls in enumerate(self._classes):
            buttons_class.append(Tk.Button(master=buttons_frame, text=cls, 
                                           command=lambda x=i: self.button_classification_callback(x)))
            buttons_class[-1].pack(side=Tk.LEFT)
        button_quit = Tk.Button(master=buttons_frame, text='Quit', command=self.destroy)
        button_quit.pack(side=Tk.RIGHT) #.grid(row=0,column=0)

        self._canvas = FigureCanvasTkAgg(f, master=self)
        self._canvas.get_tk_widget().pack(side=Tk.TOP, fill=Tk.BOTH, expand=1) #.grid(row=0, column=1, rowspan=3) #
        self._canvas.show()

        toolbar = NavigationToolbar2TkAgg( self._canvas, self )
        toolbar.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1) #.grid(row=3, column=1) #
        toolbar.update()

    def button_classification_callback(self, class_idx):
        self.class_ = self._classes[class_idx]
        self.destroy()

    def classify_plot(self):
        self._ax.cla()
        self._plot_generator(self._ax, *self._arguments)
        self._canvas.draw()
        self.mainloop()
        return self.class_

def create_plot(ax, factor):
    ax.plot([(i*factor) % 11 for i in range(100)])


if __name__ == "__main__":
    classes = ["Class %i"%i for i in range(1, 6)]
    arguments_for_plot = [[random.randint(1,10)] for x in range(10)]
    for args in arguments_for_plot:
        classifier = PlotClassifier(create_plot, args, classes)
        class_ = classifier.classify_plot()
        print args, class_
        if class_ is None:
            break
</snippet></ROW><ROW><id>14338176</id><snippet>wordnet.synset</snippet></ROW><ROW><id>14338176</id><snippet>word.pos.nn</snippet></ROW><ROW><id>14338176</id><snippet>pos.nn</snippet></ROW><ROW><id>14338176</id><snippet>list1</snippet></ROW><ROW><id>14338176</id><snippet>list2</snippet></ROW><ROW><id>14338176</id><snippet>'.n.01'</snippet></ROW><ROW><id>14338176</id><snippet>list1</snippet></ROW><ROW><id>14338176</id><snippet>list2</snippet></ROW><ROW><id>14338176</id><snippet>for word1, word2 in IT.product(list1, list2):
    wordFromList1 = wordnet.synset(word1+'.n.01')
    wordFromList2 = wordnet.synset(word2+'.n.02')
</snippet></ROW><ROW><id>14338176</id><snippet>wordnet.synset('drinks.n.01')</snippet></ROW><ROW><id>14338176</id><snippet>WordNetError</snippet></ROW><ROW><id>14338176</id><snippet>synsets</snippet></ROW><ROW><id>14338176</id><snippet>wordnet.synsets('drinks')</snippet></ROW><ROW><id>14338176</id><snippet>[Synset('drink.n.01'),
 Synset('drink.n.02'),
 Synset('beverage.n.01'),
 Synset('drink.n.04'),
 Synset('swallow.n.02'),
 Synset('drink.v.01'),
 Synset('drink.v.02'),
 Synset('toast.v.02'),
 Synset('drink_in.v.01'),
 Synset('drink.v.05')]
</snippet></ROW><ROW><id>14338176</id><snippet>drinks</snippet></ROW><ROW><id>14338176</id><snippet>for word1, word2 in IT.product(list1, list2):
    wordFromList1 = wordnet.synsets(word1)[0]
    wordFromList2 = wordnet.synsets(word2)[0]
</snippet></ROW><ROW><id>14338176</id><snippet>import nltk.corpus as corpus
import itertools as IT

wordnet = corpus.wordnet
list1 = ["apple", "honey", "drinks", "flowers", "paper"]
list2 = ["pear", "shell", "movie", "fire", "tree", "candle"]

for word1, word2 in IT.product(list1, list2):
    # print(word1, word2)
    wordFromList1 = wordnet.synsets(word1)[0]
    wordFromList2 = wordnet.synsets(word2)[0]
    print('{w1}, {w2}: {s}'.format(
        w1 = wordFromList1.name,
        w2 = wordFromList2.name,
        s = wordFromList1.lch_similarity(wordFromList2)))
</snippet></ROW><ROW><id>14338176</id><snippet>apple.n.01, pear.n.01: 2.53897387106
apple.n.01, shell.n.01: 1.07263680226
apple.n.01, movie.n.01: 1.15267950994
apple.n.01, fire.n.01: 1.07263680226
...
</snippet></ROW><ROW><id>14338693</id><snippet>dd = d[:, :3]
dd[:,2] = dd[:,2] * d[:,3]
</snippet></ROW><ROW><id>14338693</id><snippet>M = dd.max(0)
m = dd.min(0)

x = np.arange(m[0], M[0] + 1)
y = np.arange(m[1], M[1] + 1)
[X, Y] = np.meshgrid(x, y)

Z = np.zeros_like(X)

for num in range(0,size(dd, 0)):
    Z[dd[num, 0], dd[num, 1]] = dd[num, 2]
</snippet></ROW><ROW><id>14338693</id><snippet>Z</snippet></ROW><ROW><id>14338693</id><snippet>[X, Y]</snippet></ROW><ROW><id>14338836</id><snippet>from matplotlib import pyplot as plt
from matplotlib import cm
import numpy as np

x, y = np.mgrid[-100:100,-100:100]
x /= 10.
y /= 10.
r = np.sqrt(x*x+y*y)
z = 10*np.sin(r)/(r+0.01)
levels = [-4, -3, -2, -1, 1, 2, 3, 4]
plt.contourf(x, y, z, levels=levels, extend='both', cmap=cm.jet)
levels = [-1, 1]
plt.contourf(x, y, z, levels=levels, colors='w')
plt.savefig('contours.png')
</snippet></ROW><ROW><id>14338836</id><snippet>colors</snippet></ROW><ROW><id>14338836</id><snippet>contourf</snippet></ROW><ROW><id>14338836</id><snippet># same as before
levels = [-4, -3, -2, -1, 1, 2, 3, 4]
plt.contourf(x, y, z, levels=levels, extend='both', colors=('#ff0000', '#ff9900', '#999900', 'w', '#009999', '#0099ff', '#0000ff'))
plt.savefig('contours.png')
</snippet></ROW><ROW><id>14338836</id><snippet>colors</snippet></ROW><ROW><id>14339230</id><snippet>import webapp2
import jinja2
import os
from useragents import search_strings

jinja_environment = jinja2.Environment(
    loader=jinja2.FileSystemLoader(os.path.dirname(__file__)))

class MainPage(webapp2.RequestHandler):
    def get(self):
    #i don't know if you want to overwrite self.request but here it is
    self.request = Middleware.process_request(self.request)
    template = jinja_environment.get_template('templates/index.html')
    self.response.out.write(template.render())

app = webapp2.WSGIApplication([('/', MainPage)],
                          debug=True)


class Middleware(object):
@staticmethod
def process_request(request):
    """Adds a "mobile" attribute to the request which is True or False
       depending on whether the request should be considered to come from a
       small-screen device such as a phone or a PDA


    //rest of class is [here][1]
    """
</snippet></ROW><ROW><id>14339440</id><snippet>default=...</snippet></ROW><ROW><id>14339440</id><snippet>add_argument</snippet></ROW><ROW><id>14339440</id><snippet>argparse_temp</snippet></ROW><ROW><id>14339440</id><snippet>argparse.py</snippet></ROW><ROW><id>14339440</id><snippet>import argparse_temp as argparse

lst = [1,2,3]
parser = argparse.ArgumentParser()
parser.add_argument('-l',default=lst,action='append')
print parser.parse_args()
print lst
</snippet></ROW><ROW><id>14339440</id><snippet>python test1.py -l 4</snippet></ROW><ROW><id>14339440</id><snippet>Namespace(l=[1, 2, 3, '4'])
[1, 2, 3]
</snippet></ROW><ROW><id>14339440</id><snippet>argparse</snippet></ROW><ROW><id>14339440</id><snippet>Namespace(l=[1, 2, 3, '4'])
[1, 2, 3, '4']
</snippet></ROW><ROW><id>14339440</id><snippet>add_argument</snippet></ROW><ROW><id>14339440</id><snippet>_AppendAction(option_strings=['-l'], dest='l', nargs=None, const=None, default=[1, 2, 3, '4'], type=None, choices=None, help=None, metavar=None)
</snippet></ROW><ROW><id>14339440</id><snippet>default</snippet></ROW><ROW><id>14340266</id><snippet>import sys
InFileName = sys.argv[1]
</snippet></ROW><ROW><id>14340266</id><snippet>optparse</snippet></ROW><ROW><id>14340266</id><snippet>argparse</snippet></ROW><ROW><id>14340352</id><snippet>with open('input') as fin, open('output','w') as fout:
    for line in fin:
        fout.write(line)
        if line == 'xxxxx\n':
           next_line = next(fin)
           if next_line == 'yyyyy\n':
              fout.write('my_line\n')
           fout.write(next_line)
</snippet></ROW><ROW><id>14340352</id><snippet>xxxxx\n</snippet></ROW><ROW><id>14340352</id><snippet>yyyyy\n</snippet></ROW><ROW><id>14340352</id><snippet>xxxxx\nyyyyy\n</snippet></ROW><ROW><id>14340352</id><snippet> def getlines(fobj,line1,line2):
     for line in iter(fobj.readline,''):  #This is necessary to get `fobj.tell` to work
         yield line
         if line == line1:
             pos = fobj.tell()
             next_line = next(fobj):
             fobj.seek(pos)
             if next_line == line2:
                 return
</snippet></ROW><ROW><id>14340352</id><snippet>writelines</snippet></ROW><ROW><id>14340352</id><snippet>with open('input') as fin, open('output','w') as fout:
    fout.writelines(getlines(fin,'xxxxx\n','yyyyy\n'))
    fout.write('my_line\n')
    fout.writelines(fin)
</snippet></ROW><ROW><id>14340353</id><snippet>Inkscape</snippet></ROW><ROW><id>14340353</id><snippet>GIMP</snippet></ROW><ROW><id>14340353</id><snippet>Blender</snippet></ROW><ROW><id>14340695</id><snippet>settings.py</snippet></ROW><ROW><id>14340695</id><snippet>PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))</snippet></ROW><ROW><id>14340695</id><snippet>from yourscrapyprojecthere import settings

settings.PROJECT_ROOT
</snippet></ROW><ROW><id>14340695</id><snippet>scrapy.cfg</snippet></ROW><ROW><id>14340708</id><snippet>foo</snippet></ROW><ROW><id>14340708</id><snippet>foo</snippet></ROW><ROW><id>14340708</id><snippet>class MyClass:
    @classmethod
    def foo(cls):
        print "hi"

    @classmethod
    def bar(cls):
        cls.foo()
</snippet></ROW><ROW><id>14340801</id><snippet>window.location = http://redirecturlhere</snippet></ROW><ROW><id>14340828</id><snippet>from django.core.management import call_command

call_command('migrate', 'myapp')
</snippet></ROW><ROW><id>14340879</id><snippet>script.sh                       # no args
script.sh how now               # some number
script.sh "how now" "brown cow" # args that need to stay quoted
</snippet></ROW><ROW><id>14340879</id><snippet>#!/bin/sh

python script.py "$@"
</snippet></ROW><ROW><id>14341429</id><snippet>import sys

if len(sys.argv)==2: # first entry in sys.argv is script itself...
    print "No second argument"
elif len(sys.argv)==3:
    print "Second argument"
</snippet></ROW><ROW><id>14341522</id><snippet>.pyc</snippet></ROW><ROW><id>14341522</id><snippet>.py</snippet></ROW><ROW><id>14341522</id><snippet>.pyc</snippet></ROW><ROW><id>14341522</id><snippet>.py</snippet></ROW><ROW><id>14341983</id><snippet>Table('sometable', metadata, ... columns ..., implicit_returning=False)
</snippet></ROW><ROW><id>14341986</id><snippet>farg</snippet></ROW><ROW><id>14341986</id><snippet>self.test_var_kwargs(self, 1, myarg2="two", myarg3=3)
</snippet></ROW><ROW><id>14341986</id><snippet>class Method(object):
    def __init__(self, function, instance, cls):
        self.func = function
        self.instance = instance
        self.cls = cls

    def __call__(self, *args, **kw):
        return self.func(self.instance, *args, **kw)
</snippet></ROW><ROW><id>14341986</id><snippet>farg</snippet></ROW><ROW><id>14341986</id><snippet>**kw</snippet></ROW><ROW><id>14341986</id><snippet>*args</snippet></ROW><ROW><id>14341986</id><snippet>test_var_kwargs</snippet></ROW><ROW><id>14341986</id><snippet>self</snippet></ROW><ROW><id>14342052</id><snippet>def __init__(self, name, data):
....
</snippet></ROW><ROW><id>14342052</id><snippet>def __init__(self, name, data):
    super(CiteElement, self).__init__()
</snippet></ROW><ROW><id>14342334</id><snippet>str.split</snippet></ROW><ROW><id>14342334</id><snippet>csv</snippet></ROW><ROW><id>14342334</id><snippet>fobj = open('data.csv')
data = [ x.split() for x in fobj ]
fobj.close()  #don't forget to close :)
</snippet></ROW><ROW><id>14342334</id><snippet>delim = '\t'*9
data = [ x.split(delim) for x in fobj ]
</snippet></ROW><ROW><id>14342334</id><snippet>from operator import itemgetter
data.sort(key=itemgetter(2))
</snippet></ROW><ROW><id>14342334</id><snippet>key</snippet></ROW><ROW><id>14342334</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>14342334</id><snippet>itemgetter(2)</snippet></ROW><ROW><id>14342334</id><snippet>lambda x:x[2]</snippet></ROW><ROW><id>14342334</id><snippet>def get2(x):
    return x[2]
</snippet></ROW><ROW><id>14342334</id><snippet>cmp</snippet></ROW><ROW><id>14342334</id><snippet>cmp</snippet></ROW><ROW><id>14342334</id><snippet>def compare(x1,x2):
    if x1[2] &gt; x2[2]:
       return 1
    elif x1[2] &lt; x2[2]:
       return -1
    else:
       return 0
</snippet></ROW><ROW><id>14342334</id><snippet>data.sort(cmp=compare)
</snippet></ROW><ROW><id>14342459</id><snippet>/dev/stdin</snippet></ROW><ROW><id>14342459</id><snippet>visgrep</snippet></ROW><ROW><id>14342459</id><snippet>png:</snippet></ROW><ROW><id>14342459</id><snippet>png:-</snippet></ROW><ROW><id>14342919</id><snippet>'cuspin'</snippet></ROW><ROW><id>14342919</id><snippet>'idc_id'</snippet></ROW><ROW><id>14342919</id><snippet>join</snippet></ROW><ROW><id>14342919</id><snippet>In [10]: dfL
Out[10]: 
           cuspin  factorL
date                      
2012-01-03   XXXX      4.5
2012-01-03   YYYY      6.2

In [11]: dfL1 = dfLeft.set_index('cuspin', append=True)

In [12]: dfR1 = dfRight.set_index('idc_id', append=True)

In [13]: dfL1
Out[13]: 
                   factorL
date       cuspin         
2012-01-03 XXXX        4.5
           YYYY        6.2

In [14]: dfL1.join(dfR1)
Out[14]: 
                   factorL  factorR
date       cuspin                  
2012-01-03 XXXX        4.5        5
           YYYY        6.2        6
</snippet></ROW><ROW><id>14343056</id><snippet>self.redirect('/newchap?tutorial_id=%s' % tut.key)
</snippet></ROW><ROW><id>14343056</id><snippet>tutID = self.request.get("tutorial_id")
tutorial = db.Key.from_path('Tutorial', tutID)
</snippet></ROW><ROW><id>14343130</id><snippet>colors = [x for facet in facets for x in facet['color']]
</snippet></ROW><ROW><id>14343130</id><snippet>colors = [x for facet in facets for x in facet['color']*3]
</snippet></ROW><ROW><id>14343130</id><snippet>def compile_object(facets):
  displist = glGenLists(1)
  glNewList(displist, GL_COMPILE)
  # You can call glColor inside of glBegin/glEnd, so I moved them
  # outside the loop, which might improve performance somewhat
  glBegin(GL_TRIANGLES)
  for facet in facets:
    glColor( facet['color'] )
    for v in facet['vertices']:
      glVertex(v)
  glEnd()
  glEndList()
  return displist
</snippet></ROW><ROW><id>14343154</id><snippet>**kw</snippet></ROW><ROW><id>14343154</id><snippet>f = Foo(**settings)
</snippet></ROW><ROW><id>14343154</id><snippet>def foo(spam='eggs', bar=None):
    return spam, bar

arguments = {'spam': 'ham', 'bar': 'baz'}
print foo(**arguments)
</snippet></ROW><ROW><id>14343154</id><snippet>f = Foo(foo="bar")
foo(spam='ham', bar='baz')
</snippet></ROW><ROW><id>14343154</id><snippet>foo</snippet></ROW><ROW><id>14343154</id><snippet>settings = {'foo': 'bar'}
</snippet></ROW><ROW><id>14343372</id><snippet>2to3</snippet></ROW><ROW><id>14343372</id><snippet>-w</snippet></ROW><ROW><id>14343372</id><snippet>2to3 -w example.py
</snippet></ROW><ROW><id>14343681</id><snippet>buffer</snippet></ROW><ROW><id>14343681</id><snippet>callback(err, byteWritten)</snippet></ROW><ROW><id>14343681</id><snippet>var buffer = new Buffer([ 8, 6, 7, 5, 3, 0, 9]);</snippet></ROW><ROW><id>14343681</id><snippet>var buffer = new Buffer([160, 157]);
</snippet></ROW><ROW><id>14343681</id><snippet>data</snippet></ROW><ROW><id>14343830</id><snippet>key = request.json['key']
filters = requests.json.get('filters', [])
</snippet></ROW><ROW><id>14343830</id><snippet>{'key': 'somekey', 'filters': [['14', '15'], ['10']]}
</snippet></ROW><ROW><id>14343858</id><snippet>for n in range(1,21):
    lst = range(1,21)
    squares = [x**2 for x in lst]
    sum_of_squares = False
    for i in range(1, 21):
        for x in range(1, 21):
            if i in squares:
                if x in squares:
                    n2 = i+x
                    if n2 == n:
                        sum_of_square = True
    if sum_of_square:
        print n, " - Sum of Squares"
    else:
        print n, " - Not a Sum of Squares"
</snippet></ROW><ROW><id>14343957</id><snippet>import os
from flask import Flask,redirect

app = Flask(__name__)

@app.route('/')
def hello():
    return redirect("http://www.example.com")

if __name__ == '__main__':
    # Bind to PORT if defined, otherwise default to 5000.
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
</snippet></ROW><ROW><id>14344000</id><snippet>self.data = self.data[1:]  
</snippet></ROW><ROW><id>14344000</id><snippet>__dict__</snippet></ROW><ROW><id>14344000</id><snippet>__dict__</snippet></ROW><ROW><id>14344000</id><snippet>__dict__</snippet></ROW><ROW><id>14344000</id><snippet>__dict__</snippet></ROW><ROW><id>14344000</id><snippet>self.data</snippet></ROW><ROW><id>14344000</id><snippet>data</snippet></ROW><ROW><id>14344000</id><snippet>__dict__</snippet></ROW><ROW><id>14344000</id><snippet>data</snippet></ROW><ROW><id>14344000</id><snippet>__dict__</snippet></ROW><ROW><id>14344000</id><snippet>self.dict</snippet></ROW><ROW><id>14344000</id><snippet>__dict__</snippet></ROW><ROW><id>14344000</id><snippet>Database.data = self.data[1:]
</snippet></ROW><ROW><id>14344000</id><snippet>self.data</snippet></ROW><ROW><id>14344000</id><snippet>self.data[:] = self.data[1:]
</snippet></ROW><ROW><id>14344000</id><snippet>self.data.pop(0)
</snippet></ROW><ROW><id>14344000</id><snippet>connect</snippet></ROW><ROW><id>14344000</id><snippet>classmethod</snippet></ROW><ROW><id>14344000</id><snippet>@classmethod
def connect(cls, location=None):
    path = '.\\resources\\database\\'
    with open(path + 'info.csv', 'rU') as f:
        csv_data = csv.reader(f, delimiter=',')
        for row in csv_data:
            cls.data.append(Entry(*row))
        cls.data = cls.data[1:]
</snippet></ROW><ROW><id>14344000</id><snippet>self</snippet></ROW><ROW><id>14344000</id><snippet>cls</snippet></ROW><ROW><id>14344000</id><snippet>klass</snippet></ROW><ROW><id>14344000</id><snippet>database_instance = Database()
database_instance.connect()

Database.connect()
</snippet></ROW><ROW><id>14344000</id><snippet>module</snippet></ROW><ROW><id>14344000</id><snippet>"""
Module `Database` (found in Database.py)
"""
data = []

def connect(self, location=None):
    global data
    path = '.\\resources\\database\\'
    with open(path + 'info.csv', 'rU') as f:
        csv_data = csv.reader(f, delimiter=',')
        for row in csv_data:
            data.append(Entry(*row))
        data = data[1:]
</snippet></ROW><ROW><id>14344000</id><snippet>import Database
Database.connect()
print Database.data
</snippet></ROW><ROW><id>14344015</id><snippet>date1 &lt;= to_date and date2 &gt;= from_date
</snippet></ROW><ROW><id>14344015</id><snippet>SampleModel.objects.filter(to_date__gte=date1, from_date__lte=date2)
</snippet></ROW><ROW><id>14344040</id><snippet>listInsertAtDepth(lst, value, indices):
    parent = lst
    for index in indices[:-1]:
        parent = parent[index]
    parent.insert(indices[-1], value)
</snippet></ROW><ROW><id>14344040</id><snippet>try</snippet></ROW><ROW><id>14344040</id><snippet>except</snippet></ROW><ROW><id>14344040</id><snippet>listInsertAtDepth(lst, value, indices):
    parent = lst
    try:
        for index in indices[:-1]:
            parent = parent[index]
        parent.insert(indices[-1], value)
     except IndexError:
        return None
</snippet></ROW><ROW><id>14344040</id><snippet>lst</snippet></ROW><ROW><id>14344040</id><snippet>.append()</snippet></ROW><ROW><id>14344040</id><snippet>.extend()</snippet></ROW><ROW><id>14344146</id><snippet>fig1.suptitle('Test')
ax1 = fig1.add_subplot(221)
ax1.plot(x,y1,color='b',label='aVal')
ax2 = ax1.twinx()
ax2.plot(x,y2,color='g',label='bVal')
ax2.grid( ls='--', color='black')
h1, l1 = ax1.get_legend_handles_labels()
h2, l2 = ax2.get_legend_handles_labels()
ax1.legend(h1+h2, l1+l2, loc=2)
</snippet></ROW><ROW><id>14344633</id><snippet>skipinitialspace</snippet></ROW><ROW><id>14344633</id><snippet>with open(filename,'r') as csvfile:
    reader = csv.reader(csvfile,delimiter=' ',skipinitialspace=True)
    for row in reader:
        print row
</snippet></ROW><ROW><id>14344720</id><snippet>import</snippet></ROW><ROW><id>14344720</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14344720</id><snippet>sys.path</snippet></ROW><ROW><id>14344720</id><snippet>cwd</snippet></ROW><ROW><id>14344720</id><snippet>cwd</snippet></ROW><ROW><id>14344720</id><snippet>cwd</snippet></ROW><ROW><id>14344720</id><snippet>open()</snippet></ROW><ROW><id>14344720</id><snippet>c:\temp</snippet></ROW><ROW><id>14344720</id><snippet>fd = open('myfile.txt')
</snippet></ROW><ROW><id>14344720</id><snippet>c:\temp\myfile.txt</snippet></ROW><ROW><id>14344720</id><snippet>open</snippet></ROW><ROW><id>14344720</id><snippet>fd = open('c:\\anotherdir\\myfile.txt')
</snippet></ROW><ROW><id>14344720</id><snippet>os.chdir()</snippet></ROW><ROW><id>14344720</id><snippet>os.chdir('c:\\anotherdir')
fd = open('myfile.txt')
</snippet></ROW><ROW><id>14344792</id><snippet>for i in range(2,15):

    screen.fill(black)
    radius=i
    pygame.draw.circle(screen,color,point,radius,1)

    pygame.display.update()
    clock.tick(15)
</snippet></ROW><ROW><id>14344801</id><snippet>def strip_tags(value):
    """Returns the given HTML with all tags stripped."""
    return re.sub(r'&lt;[^&gt;]*?&gt;', '', force_unicode(value))
</snippet></ROW><ROW><id>14344861</id><snippet>class FooBar:
    def __init__(self):
        self.whatever = None
</snippet></ROW><ROW><id>14344894</id><snippet>subprocess.call</snippet></ROW><ROW><id>14344894</id><snippet>os.system</snippet></ROW><ROW><id>14344894</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>14344894</id><snippet>subprocess.call</snippet></ROW><ROW><id>14345230</id><snippet>return None</snippet></ROW><ROW><id>14345230</id><snippet>FOO</snippet></ROW><ROW><id>14345230</id><snippet>def foo():
    if True:
        raise ValueError('Bad value')
        return 'FOO'
    return 'BAR'

try:
    print(foo())
except ValueError as err:
    print(err)
    # Bad value
</snippet></ROW><ROW><id>14345230</id><snippet>FOO</snippet></ROW><ROW><id>14345230</id><snippet>print(foo())</snippet></ROW><ROW><id>14345230</id><snippet>Bad value</snippet></ROW><ROW><id>14345235</id><snippet>DATE</snippet></ROW><ROW><id>14345235</id><snippet>Date</snippet></ROW><ROW><id>14345235</id><snippet>[]</snippet></ROW><ROW><id>14345235</id><snippet>...
query = "create table MyTable(name varchar(30), age integer , [Date] date)"
...
</snippet></ROW><ROW><id>14345393</id><snippet>to_excel</snippet></ROW><ROW><id>14345393</id><snippet>to_csv</snippet></ROW><ROW><id>14345393</id><snippet>to_excel</snippet></ROW><ROW><id>14345393</id><snippet>filter</snippet></ROW><ROW><id>14345393</id><snippet>'-ba'</snippet></ROW><ROW><id>14345393</id><snippet>In [21]: filter(lambda x: '-ba' in x, tab2.columns)
Out[21]: ['east-ba', 'north-ba', 'south-ba']

In [22]: tab2[filter(lambda x: '-ba' in x, tab2.columns)]
Out[22]: 
        east-ba  north-ba  south-ba
Gender                             
     f        1         0         1
     m        1         1         0
</snippet></ROW><ROW><id>14345412</id><snippet>perl -pae 'print $/ if (defined $x &amp;&amp; $x ne $F[0]); $x = $F[0];' input.txt
</snippet></ROW><ROW><id>14345412</id><snippet>$F[0]</snippet></ROW><ROW><id>14345412</id><snippet>$x</snippet></ROW><ROW><id>14345412</id><snippet>-p</snippet></ROW><ROW><id>14345412</id><snippet>-a</snippet></ROW><ROW><id>14345412</id><snippet>@F</snippet></ROW><ROW><id>14345412</id><snippet>$/</snippet></ROW><ROW><id>14345425</id><snippet>itertools.combinations</snippet></ROW><ROW><id>14345425</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; d = dict.fromkeys(range(5),0)
&gt;&gt;&gt; list(itertools.combinations(d,2))
[(0, 1), (0, 2), (0, 3), (0, 4), (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]
</snippet></ROW><ROW><id>14345425</id><snippet>for key1,key2 in itertools.combinations(d,2):
    compare(d[key1],d[key2])
</snippet></ROW><ROW><id>14345425</id><snippet>&gt;&gt;&gt; d = dict.fromkeys(["Jon","Jane","Bob","Jim","Janice"],"blue")
&gt;&gt;&gt; d["Jim"] = "Brown"
&gt;&gt;&gt; d["Jane"] = "Brown"
&gt;&gt;&gt; d["Bob"] = "Brown"
&gt;&gt;&gt; [ (x,y) for (x,y) in itertools.combinations(d,2) if d[x]=="Brown" and d[y]=="Brown" ]
[('Jane', 'Bob'), ('Jane', 'Jim'), ('Bob', 'Jim')]
</snippet></ROW><ROW><id>14345589</id><snippet>geopy==0.94.1
</snippet></ROW><ROW><id>14345875</id><snippet>strip</snippet></ROW><ROW><id>14345875</id><snippet>\n</snippet></ROW><ROW><id>14345875</id><snippet>replace</snippet></ROW><ROW><id>14345875</id><snippet>misc['product_desc'] = misc['product_desc'].str.replace('\n', '')
</snippet></ROW><ROW><id>14345882</id><snippet>read(2)</snippet></ROW><ROW><id>14345882</id><snippet>   EAGAIN or EWOULDBLOCK
          The  file  descriptor  fd refers to a socket and has been marked
          nonblocking   (O_NONBLOCK),   and   the   read   would    block.
          POSIX.1-2001  allows  either error to be returned for this case,
          and does not require these constants to have the same value,  so
          a portable application should check for both possibilities.
</snippet></ROW><ROW><id>14345882</id><snippet>try:
    buffer = os.read(io, BUFFER_SIZE)
except OSError as err:
    if err.errno == errno.EAGAIN or err.errno == errno.EWOULDBLOCK:
        buffer = None
    else:
        raise  # something else has happened -- better reraise

if buffer is None: 
    # nothing was received -- do something else
else:
    # buffer contains some received data -- do something with it
</snippet></ROW><ROW><id>14345882</id><snippet>import errno</snippet></ROW><ROW><id>14345900</id><snippet>&gt;&gt;&gt; lis=['joe:  5', 'ed:  9', 'joe:  7', 'ed:  8']

&gt;&gt;&gt; sorted(lis,key=lambda x:int(x.split()[-1]),reverse=True)
&gt;&gt;&gt; ['ed:  9', 'ed:  8', 'joe:  7', 'joe:  5']
</snippet></ROW><ROW><id>14345900</id><snippet>str.split</snippet></ROW><ROW><id>14345900</id><snippet>&gt;&gt;&gt; int(lis[0].split(":")[1])
&gt;&gt;&gt; 5

#or  

&gt;&gt;&gt; int(lis[0].split()[1]) 
&gt;&gt;&gt; 5
</snippet></ROW><ROW><id>14346121</id><snippet>order by reading_date ASC</snippet></ROW><ROW><id>14346212</id><snippet>set_contents_from_url</snippet></ROW><ROW><id>14346262</id><snippet>import shutil

createImage(locA, filename)
shutil.move(os.path.join(locA, filename), locB)
</snippet></ROW><ROW><id>14346262</id><snippet>locB</snippet></ROW><ROW><id>14346450</id><snippet>import codecs
f = codecs.open('file.txt','rU',encoding='utf8')
</snippet></ROW><ROW><id>14346450</id><snippet>f = open('file.txt','rU',encoding='utf8')
</snippet></ROW><ROW><id>14346640</id><snippet>LIKE</snippet></ROW><ROW><id>14346640</id><snippet>create index i_call_id on completedcalls(call_id varchar_pattern_ops);
</snippet></ROW><ROW><id>14347168</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>14347168</id><snippet>&gt;&gt;&gt; ast.literal_eval('["a", "b", "c"]')
['a', 'b', 'c']
&gt;&gt;&gt; ast.literal_eval("['a', 'b', 'c']")
['a', 'b', 'c']
&gt;&gt;&gt; ast.literal_eval('["mixed", \'quoting\', """styles"""]')
['mixed', 'quoting', 'styles']
</snippet></ROW><ROW><id>14347255</id><snippet>for</snippet></ROW><ROW><id>14347255</id><snippet>in</snippet></ROW><ROW><id>14347255</id><snippet>iterable</snippet></ROW><ROW><id>14347255</id><snippet>range()</snippet></ROW><ROW><id>14347255</id><snippet>i</snippet></ROW><ROW><id>14347255</id><snippet>for i in ('foo', 'bar', 'baz'):
    print i
    i = 'spam'
</snippet></ROW><ROW><id>14347255</id><snippet>i = 'spam'</snippet></ROW><ROW><id>14347255</id><snippet>print_at = 0
for i in range(userloop):
    if i &gt;= print_at:
        print "At the top i is %d" % i
        numbers.append(i)
        userincrease = int(raw_input("Increase &gt; "))
        print_at = i + userincrease

        print "Numbers now: ", numbers
        print "At the bottom i is %d" % i
</snippet></ROW><ROW><id>14347255</id><snippet>print_at</snippet></ROW><ROW><id>14347255</id><snippet>i</snippet></ROW><ROW><id>14347255</id><snippet>i</snippet></ROW><ROW><id>14347255</id><snippet>print_at</snippet></ROW><ROW><id>14347285</id><snippet>def line_to_tuple(line):
    data = line.split()
    return (data[0],int(data[1]),int(data[2]))
</snippet></ROW><ROW><id>14347285</id><snippet>with open(inputfile) as fin, open(outputfile,'w') as fout:
    non_blank_lines = (line for line in fin if line.strip())
    sorted_lines = sorted(non_blank_lines,key=line_to_tuple)
    fout.writelines(sorted_lines)
</snippet></ROW><ROW><id>14347285</id><snippet>import itertools
def field1(line):
    data = line.split()
    try:
        return data[0]
    except IndexError:
        return None

def fields(line):
    data = line.split()
    return data[0],int(data[1]),int(data[2])

with open('test.dat') as fin, open('output.dat','w') as fout:
    for k,v in itertools.groupby(fin,key=field1):
        if k is None:
            fout.write('\n')
        else:
            fout.writelines(sorted(v,key=fields))
</snippet></ROW><ROW><id>14347285</id><snippet>temp $ cat output.dat 
PITG_00129  606 1436

PITG_00130  1   987

PITG_00132  2   1321

PITG_00133 1 2946
PITG_00133 4081 4515
PITG_00133 4464 11708
</snippet></ROW><ROW><id>14347367</id><snippet>scipy.integrate.simps</snippet></ROW><ROW><id>14347367</id><snippet>x</snippet></ROW><ROW><id>14347367</id><snippet>f</snippet></ROW><ROW><id>14347367</id><snippet>scipy.integrate.newton_cotes</snippet></ROW><ROW><id>14347367</id><snippet>def idl_tabulate(x, f, p=5) :
    def newton_cotes(x, f) :
        if x.shape[0] &lt; 2 :
            return 0
        rn = (x.shape[0] - 1) * (x - x[0]) / (x[-1] - x[0])
        weights = scipy.integrate.newton_cotes(rn)[0]
        return (x[-1] - x[0]) / (x.shape[0] - 1) * np.dot(weights, f)
    ret = 0
    for idx in xrange(0, x.shape[0], p - 1) :
        ret += newton_cotes(x[idx:idx + p], f[idx:idx + p])
    return ret
</snippet></ROW><ROW><id>14347367</id><snippet>IDL_TABULATE</snippet></ROW><ROW><id>14347367</id><snippet>scipy\integrate\quadrature.py</snippet></ROW><ROW><id>14347367</id><snippet>INT_TABULATED</snippet></ROW><ROW><id>14347367</id><snippet>INT_TABULATED</snippet></ROW><ROW><id>14347367</id><snippet>1.6271</snippet></ROW><ROW><id>14347367</id><snippet>1.6405</snippet></ROW><ROW><id>14347367</id><snippet>&gt;&gt;&gt; x = np.array([0.0, 0.12, 0.22, 0.32, 0.36, 0.40, 0.44, 0.54, 0.64,
...               0.70, 0.80])
&gt;&gt;&gt; f = np.array([0.200000, 1.30973, 1.30524, 1.74339, 2.07490, 2.45600,
...               2.84299, 3.50730, 3.18194, 2.36302, 0.231964])
&gt;&gt;&gt; idl_tabulate(x, f)
1.641998154242472
</snippet></ROW><ROW><id>14347861</id><snippet>print '{0} times {1} is equal to {2}'.format(a, b, iterMul(a,b))
</snippet></ROW><ROW><id>14347861</id><snippet>print value, ' some text ', othervalue, ' more text and ', thirdvalue</snippet></ROW><ROW><id>14347932</id><snippet>IntegrityError</snippet></ROW><ROW><id>14347932</id><snippet>IntegrityError</snippet></ROW><ROW><id>14347932</id><snippet>IntegrityError</snippet></ROW><ROW><id>14347932</id><snippet>get_or_create</snippet></ROW><ROW><id>14347969</id><snippet>In [1]: import re 

In [2]: re.match(r'(?P&lt;currency&gt;\D+)(?P&lt;amount&gt;\d+(\.\d+)?)(?P&lt;multiplier&gt;[mMkK])', '$15k').groupdict()
Out[2]: {'amount': '15', 'currency': '$', 'multiplier': 'k'}
</snippet></ROW><ROW><id>14347969</id><snippet>currency, amount, _, multiplier =  re.match(r'(\D+)(\d+(\.\d+)?)([mMkK])', '$1.5k').groups()
</snippet></ROW><ROW><id>14347969</id><snippet>currency, amount, multiplier = re.match(r'(\D+)(\d+(?:\.\d+)?)([mMkK])', '$1.5k').groups()
</snippet></ROW><ROW><id>14348312</id><snippet>from PyQt4 import QtGui, QtWebKit
from PyQt4.QtCore import Qt, QSize

class RoundWindow(QtWebKit.QWebView):
    def __init__(self):
        super(RoundWindow, self).__init__()
        self.initUI()

    def initUI(self):
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)

    def sizeHint(self):
        return QSize(300,300)

    def paintEvent(self, event):
        qp = QtGui.QPainter()
        qp.begin(self)
        qp.setRenderHint(QtGui.QPainter.Antialiasing);
        qp.setPen(Qt.NoPen);
        qp.setBrush(QtGui.QColor(255, 0, 0, 127));
        qp.drawEllipse(0, 0, 300, 300);
        qp.end()

a = QtGui.QApplication([])
rw = RoundWindow()
rw.show()
a.exec_()
</snippet></ROW><ROW><id>14348322</id><snippet>10/3  -&gt; floor(3.33)  -&gt;  3
-10/3 -&gt; floor(-3.33) -&gt; -4
</snippet></ROW><ROW><id>14348454</id><snippet>result = example_dict
search_key = ['level_one', 'level_two_a']
for term in search_key:
    result = result[term]
</snippet></ROW><ROW><id>14348454</id><snippet>result</snippet></ROW><ROW><id>14348454</id><snippet>result</snippet></ROW><ROW><id>14348454</id><snippet>example_dict</snippet></ROW><ROW><id>14348454</id><snippet>result</snippet></ROW><ROW><id>14348592</id><snippet>&lt;img src="foo"&gt;</snippet></ROW><ROW><id>14348691</id><snippet>Psych</snippet></ROW><ROW><id>14348691</id><snippet>safe_load</snippet></ROW><ROW><id>14348691</id><snippet>Syck</snippet></ROW><ROW><id>14348691</id><snippet>Psych</snippet></ROW><ROW><id>14348691</id><snippet>safe_load</snippet></ROW><ROW><id>14348734</id><snippet>import subprocess
bat_text = "dir" # (text to write in bat file)
bat_file = open("program.bat","w") # (open file in write mode)
bat_file.write(bat_text) # (write bat_text on bat_file)
bat_file.close() # (close file)
command = "C:\program.bat" # (the location of bat file)
execute = subprocess.Popen(command, stdout=subprocess.PIPE)  # (exec the command)
output = execute.stdout.read() # (read output)
print output  # (print output)
</snippet></ROW><ROW><id>14348885</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.now().strftime("%b%y")
'Jan13'
</snippet></ROW><ROW><id>14348903</id><snippet>Loans</snippet></ROW><ROW><id>14348903</id><snippet>from google.appengine.ext.db import metadata

my_kinds = metadata.get_kinds() # Returns a list of entity kind names.

if u'Loans' in my_kinds:
    ...
</snippet></ROW><ROW><id>14348903</id><snippet>my_kinds</snippet></ROW><ROW><id>14348903</id><snippet>Loans</snippet></ROW><ROW><id>14348955</id><snippet>deliveries</snippet></ROW><ROW><id>14348955</id><snippet>related_name</snippet></ROW><ROW><id>14348955</id><snippet>OrderItem.objects.filter(deliveries__stage='Beginning')
</snippet></ROW><ROW><id>14348968</id><snippet>scipy</snippet></ROW><ROW><id>14348968</id><snippet>scipy</snippet></ROW><ROW><id>14348968</id><snippet>bext</snippet></ROW><ROW><id>14349065</id><snippet>pickle</snippet></ROW><ROW><id>14349065</id><snippet>load()</snippet></ROW><ROW><id>14349065</id><snippet>dump()</snippet></ROW><ROW><id>14349065</id><snippet>foo.bar</snippet></ROW><ROW><id>14349065</id><snippet>Spam</snippet></ROW><ROW><id>14349065</id><snippet>from foo.bar import Spam</snippet></ROW><ROW><id>14349065</id><snippet>pickle</snippet></ROW><ROW><id>14349144</id><snippet>Votes</snippet></ROW><ROW><id>14349144</id><snippet>INSERT</snippet></ROW><ROW><id>14349144</id><snippet>Question, User</snippet></ROW><ROW><id>14349144</id><snippet>UPDATE</snippet></ROW><ROW><id>14349144</id><snippet>DELETE</snippet></ROW><ROW><id>14349144</id><snippet>SELECT COUNT(*) FROM Votes WHERE Question=? GROUP BY Answer</snippet></ROW><ROW><id>14349494</id><snippet>myfunc</snippet></ROW><ROW><id>14349494</id><snippet>myfunc</snippet></ROW><ROW><id>14349494</id><snippet>deco(myfunc)</snippet></ROW><ROW><id>14349494</id><snippet>&gt;&gt;&gt; def deco(func):
...    def kdeco():
...       print("before myfunc() called.")
...       func()
...       print("  after myfunc() called.")
...    return kdeco
... 
&gt;&gt;&gt; @deco
... def myfunc():
...    print(" myfunc() called.")
... 
&gt;&gt;&gt; myfunc
&lt;function kdeco at 0x10068cb18&gt;
</snippet></ROW><ROW><id>14349494</id><snippet>@decorator</snippet></ROW><ROW><id>14349494</id><snippet>def myfunc():
    # body of function
myfunc = deco(myfunc)
</snippet></ROW><ROW><id>14349494</id><snippet>myfunc</snippet></ROW><ROW><id>14349494</id><snippet>before ..</snippet></ROW><ROW><id>14349494</id><snippet>.. called</snippet></ROW><ROW><id>14349494</id><snippet>after ..</snippet></ROW><ROW><id>14349494</id><snippet>before ..</snippet></ROW><ROW><id>14349494</id><snippet>myfunc</snippet></ROW><ROW><id>14349494</id><snippet>before ..</snippet></ROW><ROW><id>14349494</id><snippet>.. called</snippet></ROW><ROW><id>14349494</id><snippet>after ..</snippet></ROW><ROW><id>14349494</id><snippet>after ..</snippet></ROW><ROW><id>14349494</id><snippet>call wrapped myfunc():
    kdeco: "before .."
    call original myfunc()
        original myfunc: ".. called"
    kdeco: "after .."

call deco(myfunc)():
    kdeco: "before .."
    call wrapped myfunc():
        kdeco: "before .."
        call original myfunc()
            original myfunc: ".. called"
        kdeco: "after .."
    kdeco: "after .."
</snippet></ROW><ROW><id>14349578</id><snippet>gallery</snippet></ROW><ROW><id>14349578</id><snippet>Galleries</snippet></ROW><ROW><id>14349578</id><snippet>images_set</snippet></ROW><ROW><id>14349578</id><snippet>{% for images in galleries.images_set.all %}

{% endfor %}
</snippet></ROW><ROW><id>14349580</id><snippet>safeYield</snippet></ROW><ROW><id>14349580</id><snippet>someProcess</snippet></ROW><ROW><id>14349580</id><snippet>t = threading.Thread(target=someProcess)
t.start()
</snippet></ROW><ROW><id>14349580</id><snippet>ConsoleWindowLogHandler.emit</snippet></ROW><ROW><id>14349580</id><snippet>textBox</snippet></ROW><ROW><id>14349580</id><snippet>RenderThread</snippet></ROW><ROW><id>14349580</id><snippet>renderedImage</snippet></ROW><ROW><id>14349580</id><snippet>MandelbrotWidget</snippet></ROW><ROW><id>14349580</id><snippet>updatePixmap</snippet></ROW><ROW><id>14349580</id><snippet>renderedImage</snippet></ROW><ROW><id>14349580</id><snippet>gotLogMessage</snippet></ROW><ROW><id>14349580</id><snippet>LogTextWidget</snippet></ROW><ROW><id>14349580</id><snippet>updateLog</snippet></ROW><ROW><id>14349580</id><snippet>t</snippet></ROW><ROW><id>14349580</id><snippet>join</snippet></ROW><ROW><id>14349580</id><snippet>t.daemon = True</snippet></ROW><ROW><id>14349580</id><snippet>someProcess</snippet></ROW><ROW><id>14349580</id><snippet>someProcess</snippet></ROW><ROW><id>14349580</id><snippet>someProcess</snippet></ROW><ROW><id>14349580</id><snippet>someProcess</snippet></ROW><ROW><id>14349704</id><snippet>import Tkinter as tk

board = [ [None]*10 for _ in range(10) ]

counter = 0

root = tk.Tk()

def on_click(i,j,event):
    global counter
    color = "red" if counter%2 else "black"
    event.widget.config(bg=color)
    board[i][j] = color
    counter += 1


for i,row in enumerate(board):
    for j,column in enumerate(row):
        L = tk.Label(root,text='    ',bg='grey')
        L.grid(row=i,column=j)
        L.bind('&lt;Button-1&gt;',lambda e,i=i,j=j: on_click(i,j,e))

root.mainloop()
</snippet></ROW><ROW><id>14349707</id><snippet>testing</snippet></ROW><ROW><id>14349707</id><snippet>test</snippet></ROW><ROW><id>14349707</id><snippet>test</snippet></ROW><ROW><id>14349707</id><snippet>testing</snippet></ROW><ROW><id>14349707</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = '''
... test
... '''
&gt;&gt;&gt; print(re.search(pattern, 'testing', re.VERBOSE))
&lt;_sre.SRE_Match object at 0x1062f4c60&gt;
</snippet></ROW><ROW><id>14349757</id><snippet>pylint</snippet></ROW><ROW><id>14349757</id><snippet>locals()</snippet></ROW><ROW><id>14349826</id><snippet>chars_per_line = 50
for i in range(0, len(s), chars_per_line):
    print s[i:i+chars_per_line]
</snippet></ROW><ROW><id>14349852</id><snippet>app.add_url_rule</snippet></ROW><ROW><id>14349852</id><snippet>url_for</snippet></ROW><ROW><id>14349852</id><snippet>endpoint</snippet></ROW><ROW><id>14349852</id><snippet>from functools import partial

def actual_handler(page):
    return u'hello'

for page in session.query(Page):
    route = u'/{0}/{1}/{2}'.format(page.id1, page.id2, page.id3)
    app.add_url_rule(
        route,
        page.name,  # this is the name used for url_for
        partial(actual_handler, page=page),
    )
</snippet></ROW><ROW><id>14349852</id><snippet>session.remove()</snippet></ROW><ROW><id>14349852</id><snippet>send_from_directory</snippet></ROW><ROW><id>14350215</id><snippet>from django.utils import simplejson as json

class Get_data(webapp2.RequestHandler):
    def get(self):
        response = urllib2.urlopen('https://api.twitter.com/1/favorites.json?count=5&amp;screen_name=episod')
        data = response.read()
        json_data = json.loads(data)

        template_values = {
            'param1': json_data["..."],
            'param2': json_data["..."],
        }

        template = jinja_environment.get_template(TEMPLATE)
        self.response.out.write(template.render(template_values))
</snippet></ROW><ROW><id>14350402</id><snippet>infoconf = raw_input("Is this information correct? Y/N: ")

#you wrote:  infoconf == "N" or "No" but should be:
if infoconf == "N" or infoconf == "No": 
  print "Please try again."
#you wrote: infoconf == "Y" or "Yes" but should be
elif infoconf == "Y" or infoconf == "Yes": 
  start()
else:
  print "That is not a yes or no answer, please try again."
</snippet></ROW><ROW><id>14350402</id><snippet>when value of x = 'N'
x == 'N' or 'No' will return True
when value of x = 'Y'
x == 'N' or 'No' will return 'No' i believe this is not what you want
</snippet></ROW><ROW><id>14350402</id><snippet>when value of x = 'N'
x == 'N' or x == 'No' will return True
when value of x = 'Y'
x == 'N' or x == 'No' will return False i believe this is what you want
</snippet></ROW><ROW><id>14350426</id><snippet>argparse</snippet></ROW><ROW><id>14350426</id><snippet>argparse</snippet></ROW><ROW><id>14350426</id><snippet>parser.add_argument('-n','--name',...,default=None)
parser.add_argument('-p','--password',...,default=None)
ns = parser.parse_args()

if len([x for x in (ns.name,ns.password) if x is not None]) == 1:
   parser.error('--name and --password must be given together')

name = ns.name if ns.name is not None else "default_name"
password = ns.password if ns.password is not None else "default_password"
</snippet></ROW><ROW><id>14350475</id><snippet>output    = open("tempEncrypted.xml",'w')
</snippet></ROW><ROW><id>14350475</id><snippet>'wb'</snippet></ROW><ROW><id>14350475</id><snippet>'w'</snippet></ROW><ROW><id>14350475</id><snippet>output    = open("tempEncrypted.xml",'wb')
</snippet></ROW><ROW><id>14350500</id><snippet>list</snippet></ROW><ROW><id>14350500</id><snippet>mylist = [100 if i in (0, 1, 3) else e for i, e in enumerate(mylist)]
</snippet></ROW><ROW><id>14350500</id><snippet>list</snippet></ROW><ROW><id>14350500</id><snippet>list</snippet></ROW><ROW><id>14350500</id><snippet>list</snippet></ROW><ROW><id>14350500</id><snippet>list</snippet></ROW><ROW><id>14350500</id><snippet>def elements_replaced(lst, new_element, indices):
    return [new_element if i in indices else e for i, e in enumerate(lst)]
</snippet></ROW><ROW><id>14350500</id><snippet>myiter = (100 if i in (0, 1, 3) else e for i, e in enumerate(mylist))
</snippet></ROW><ROW><id>14350500</id><snippet>def elements_replaced(lst, new_element, indices):
    for i, e in enumerate(lst):
        if i in indices:
            yield new_element
        else:
            yield e
</snippet></ROW><ROW><id>14350793</id><snippet>StringIO</snippet></ROW><ROW><id>14350793</id><snippet>canvas</snippet></ROW><ROW><id>14350793</id><snippet>canvas</snippet></ROW><ROW><id>14350793</id><snippet>#Create the file-like objects from canvases
file_like_1 = StringIO.StringIO()
file_like_2 = StringIO.StringIO()
#... etc...
canvas_1.print_pdf(file_like_1)
canvas_2.print_pdf(file_like_2)
#...etc....

#NOW create the zipfile
response = HttpResponse(mimetype='application/zip')
response['Content-Disposition'] = 'filename=all_plots.zip'

buff = StringIO.StringIO()
archive = zipfile.ZipFile(buff,'w',zipfile.ZIP_DEFLATED)
archive.writestr('plot_1.pdf',file_like_1.getvalue())
archive.writestr('plot_2.pdf',file_like_2.getvalue())
#..etc...
archive.close()
buff.flush()
ret_zip = buff.getvalue()
buff.close()
response.write(ret_zip)
return response
</snippet></ROW><ROW><id>14351051</id><snippet>cmd</snippet></ROW><ROW><id>14351051</id><snippet>cmd</snippet></ROW><ROW><id>14351051</id><snippet>Lucida Console</snippet></ROW><ROW><id>14351051</id><snippet>cmd</snippet></ROW><ROW><id>14351051</id><snippet>&gt; chcp
Active code page: 850
&gt; chcp 65001
</snippet></ROW><ROW><id>14351051</id><snippet>cmd</snippet></ROW><ROW><id>14351051</id><snippet>&gt; chcp 850
</snippet></ROW><ROW><id>14351051</id><snippet>.bat</snippet></ROW><ROW><id>14351051</id><snippet>import codecs

def cp65001(name):
    """This might be buggy, but better than just a LookupError
    """
    if name.lower() == "cp65001":
        return codecs.lookup("utf-8")

codecs.register(cp65001)
</snippet></ROW><ROW><id>14351078</id><snippet>Werkzeug routing</snippet></ROW><ROW><id>14351078</id><snippet>from flask import Flask
from werkzeug.routing import BaseConverter

app = Flask(__name__)

class RegexConverter(BaseConverter):
        def __init__(self, url_map, *items):
                super(RegexConverter, self).__init__(url_map)
                self.regex = items[0]

app.url_map.converters['regex'] = RegexConverter

# To get all URLs ending with "/number"
@app.route("/&lt;regex('.*\/([0-9]+)'):param&gt;/")
def go_to_one(param):
    return param.split("/")[-1]

# To get all URLs ending with a number
@app.route("/&lt;regex('.*([0-9]+)'):param&gt;/")
def go_to_one(param):
    return param.split("/")[-1]

# To get all URLs without a number
@app.route("/&lt;regex('[^0-9]+'):param&gt;/")
def go_to_two(param):
    return param

@app.route('/')
def hello_world():
    return 'Hello World!'

if __name__ == '__main__':
    app.run()
</snippet></ROW><ROW><id>14351097</id><snippet>&gt;&gt;&gt; temp2 = {
  '0.1995': ['X3:GATE', 'IN1', 'IN1', 'X7:GATE', 'X4:GATE', 'IN2', 'IN2', 'X8:GATE'],
  '0.399': ['X4:GATE', 'Y', 'Y', 'X3:GATE', 'Y', 'X8:SRC', 'X1:GATE', 'IN0', 'IN0', 'X5:GATE']
}
&gt;&gt;&gt; _set = set(temp2['0.1995'])
&gt;&gt;&gt; temp2['0.399'] = [e for e in temp2['0.399'] if e not in _set]
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pp = PrettyPrinter(indent = 4)
&gt;&gt;&gt; pp.pprint(temp2)
{   '0.1995': [   'X3:GATE',
                  'IN1',
                  'IN1',
                  'X7:GATE',
                  'X4:GATE',
                  'IN2',
                  'IN2',
                  'X8:GATE'],
    '0.399': ['Y', 'Y', 'Y', 'X8:SRC', 'X1:GATE', 'IN0', 'IN0', 'X5:GATE']}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14351195</id><snippet>property</snippet></ROW><ROW><id>14351195</id><snippet>def get_stat(self):
    if not hasattr(self, '__get_stat'):
         self.__get_stat =  {
            'xy': self.x + self.y,
            'ab': self.a + self.b
         }
    return self.__get_stat
</snippet></ROW><ROW><id>14351314</id><snippet>def createLecture(user, course):
# create new lecture
now = datetime.now()
dt = now.strftime("%Y-%m-%d-%H-%M")
newLecture = Lecture(dt, course)
db.session.add(newLecture)

# add lecture to course, add new queue to lecture, add user to queue, add new user to lecture
newQueue = Queue(newLecture)
db.session.add(newQueue)
newLecture.users.append(user)
newQueue.users.append(user)
newLecture.groupID = pad.createGroupIfNotExistsFor(newLecture.course.name+dt)['groupID']

db.session.commit()
return newLecture
</snippet></ROW><ROW><id>14351623</id><snippet>format_coord</snippet></ROW><ROW><id>14351623</id><snippet>Axes</snippet></ROW><ROW><id>14351623</id><snippet>format_coord</snippet></ROW><ROW><id>14351623</id><snippet>ax.format_coord = lambda x, y: ''
</snippet></ROW><ROW><id>14351623</id><snippet>scale_val = 1
ax.format_coord = lambda x, y: 'r=%d,c=%d' % (scale_val * int(x + .5), 
                                             scale_val * int(y + .5))
</snippet></ROW><ROW><id>14351623</id><snippet>def imshow(img, scale_val=1, ax=None, *args, **kwargs):
    if ax is None:
         ax = plt.gca()
    im = ax.imshow(img, *args, **kwargs)
    ax.format_coord = lambda x, y: 'r=%d,c=%d' % (scale_val * int(x + .5), 
                                             scale_val * int(y + .5))
    ax.figure.canvas.draw()
    return im
</snippet></ROW><ROW><id>14351623</id><snippet>plt.imshow</snippet></ROW><ROW><id>14351790</id><snippet>print</snippet></ROW><ROW><id>14351790</id><snippet>new_dragon = True
while new_dragon:
    print(' ')
    print ('While adventuring you have met a scary looking dragon')
    print('Without hesitation you jump to fight it off!')
    print('=============================================')
    print(' ')
    drgn = drgnGen() #generate a dragon
    fighting = True
    while fighting:
        message = []
        roll = random.randint(0,1)
        if roll == 0:
           message.append("the dragon hits you for %s points" %drgn[1])
           char[0] = char[0] - drgn[1]
           if isNotDead(char) :
               message.append("you have %s health left!" %char[0])
           else:
               message.append("you're dead!Game Over")
               fighting = False
               new_dragon = False
        else:
            message.append("you hit the dragon for %s points"%char[1])
            drgn[0] = drgn[0] - char[1]

            if drgn[0] &gt;0:
                message.append("the dragon have %s health left!" %drgn[0])
            else:
                char[2]+= XP
                message.append("Horaay!you have killed the dragon!and your experience points are now %s"%char[2])
                levelUp(char,(xpIncrement(char[2],xpLevels,char)))                    
                continue_flag = False
        for m in message:
            print (m)
        print ('')
        if fighting:
            r = input("Press enter to continue or enter q to quit")
            if r is 'q':
                fighting = False
</snippet></ROW><ROW><id>14351790</id><snippet>import random

class Character:
    def __init__(self, max_hp, max_power):
        self.hp = random.randint(1, max_hp)
        self.power = random.randint(1, max_power)
    def is_dead(self):
        return self.hp &lt;= 0
    def hit_by(self, enemy):
        self.hp -= enemy.power

class Player(Character):
    def __init__(self):
        Character.__init__(self, max_hp=10, max_power=3)
        self.xp = 0
        self.level = 0
        self.xp_thresholds = [(i + 2) ** 2 for i in range(15)]
    def battle_win(self):
        self.xp += battle_win_xp
        if self.level &lt; len(self.xp_thresholds) and self.xp &gt; self.xp_thresholds[self.level + 1]:
            self.level_up()
    def level_up(self):
        self.hp += 1
        self.level += 1
        print('you are now at level %s!, your health now is %s points' % (self.level + 1, self.hp))

def begin():
    game.player = Player()
    print('______________________________________')
    print('Welcome to the Battle of the dragons!')
    print("you are a fierce Warrior with %s health points and A power of %s points" %(game.player.hp, game.player.power))
    print('------------------------------------------------------------------------')
def new_dragon():
    print('While adventuring you have met a scary looking dragon')
    print('Without hesitation you jump to fight it off!')
    print('=============================================')
    game.dragon = Character(5, 5)
def fight():
    player, dragon = game.player, game.dragon
    if random.randint(0, 1):
        player.hit_by(dragon)
        print("the dragon hits you for %s points" % dragon.power)
        if player.is_dead():
            print("you're dead! Game over")
            return
        else:
            print("you have %s health left!" % player.hp)
    else:
        dragon.hit_by(player)
        print("you hit the dragon for %s points" % player.power)
        if dragon.is_dead():
            print("Horaay!you have killed the dragon!and your experience points are now %s"%player.xp)
            player.battle_win()
            game.dragon = None
            return
        else:
            print ("the dragon have %s health left!" %dragon.hp)
    print "Press enter to continue (q to quit)"
    if input() is 'q':
        game.finished = True
def play_again():
    print 'do you want to play again?(y)es or no'
    if input().lower().startswith('y'):
        game.__init__()
    else:
        game.finished = True
battle_win_xp = 5 #the default XP gain after battle win
class Game:
    def __init__(self):
        self.dragon = None
        self.player = None
        self.finished = False
game = Game()
while not game.finished:
    if not game.player:
        begin()
    elif game.player.is_dead():
        play_again()
    elif not game.dragon:
        new_dragon()
    else:
        fight()
</snippet></ROW><ROW><id>14351890</id><snippet>resize</snippet></ROW><ROW><id>14351890</id><snippet>filter=Image.ANTIALIAS</snippet></ROW><ROW><id>14352035</id><snippet>for</snippet></ROW><ROW><id>14352035</id><snippet>def ugly_math():
    print 'you will hit this once'
    for j in range(10):
        print 'loop ', j
        # insert math here
        yield  np.random.random(10) * j
</snippet></ROW><ROW><id>14352035</id><snippet>for</snippet></ROW><ROW><id>14352035</id><snippet>ugly_math</snippet></ROW><ROW><id>14352035</id><snippet>yield</snippet></ROW><ROW><id>14352035</id><snippet>yield</snippet></ROW><ROW><id>14352035</id><snippet>fun = ugly_math()
</snippet></ROW><ROW><id>14352035</id><snippet>fun.next()</snippet></ROW><ROW><id>14352035</id><snippet>ugly_math</snippet></ROW><ROW><id>14352035</id><snippet>yield</snippet></ROW><ROW><id>14352035</id><snippet>np.random.random</snippet></ROW><ROW><id>14352035</id><snippet>fun.next()</snippet></ROW><ROW><id>14352035</id><snippet>yield</snippet></ROW><ROW><id>14352035</id><snippet>fun = ugly_math()
cid_dict = {}
# Define the event
def ontype(event):
    if event.key == '1':
        print 'It is working'
        try:
            vector = fun.next()
            plt.plot(vector)
            fig.canvas.draw()
        except StopIteration:
            plt.gcf().canvas.mpl_disconnect(cid_dict['cid'])
            del cid_dict['cid']

# Create figure an connect the event to it
fig=plt.figure(figsize=(16,8))
cid_dict['cid'] = plt.gcf().canvas.mpl_connect('key_press_event',ontype)

vector = np.random.random(10)  
plt.plot(vector)
plt.show()
</snippet></ROW><ROW><id>14352035</id><snippet>cid_dict</snippet></ROW><ROW><id>14352035</id><snippet>class push_to_advance(object):
    def __init__(self):
        self.fig = plt.figure()
        self.ax = self.fig.gca()
        self.bound_keys = []
        self.bound_cid = {}

    def add_step_through(self, gen, key):
        key = key[0] # make a single char
        if key in self.bound_keys:
            raise RuntimeError("key %s already bound"%key)
        first_data = gen.next()
        self.ax.plot(first_data)
        self.fig.canvas.draw()
        self.bound_keys.append(key)
        def ontype(event):
            if event.key == key:
                try:
                    self.ax.plot(gen.next())
                    self.fig.canvas.draw()
                except StopIteration:
                    self.fig.canvas.mpl_disconnect(self.bound_cid[key])
                    del self.bound_cid[key]
                    self.bound_keys.remove(key)

        self.bound_cid[key] = self.fig.canvas.mpl_connect('key_press_event', ontype)
</snippet></ROW><ROW><id>14352035</id><snippet> pta = push_to_advance()
 gen = ugly_math()
 pta.add_step_through(gen,'a')
</snippet></ROW><ROW><id>14352035</id><snippet> test_array = np.arange(100).reshape(10,10)
 pta.add_step_through(test_array.__iter__(), 'b')
</snippet></ROW><ROW><id>14352038</id><snippet>logging</snippet></ROW><ROW><id>14352051</id><snippet>import sys
def scf():
    frame = sys._getframe(1) #caller's frame (probably)
    frame.f_globals['F'] = 'F' #add/overwrite globals
    frame.f_globals['C'] = 'C'

def ci():
    print F, C

scf()
ci() # prints 'F C'
</snippet></ROW><ROW><id>14352051</id><snippet>scf()</snippet></ROW><ROW><id>14352051</id><snippet>ci()</snippet></ROW><ROW><id>14352051</id><snippet>exec</snippet></ROW><ROW><id>14352051</id><snippet>s1 = """
foo = 'bar'
"""

s2 = """
def myImpureFunction():
    global foo
    foo = 1
myImpureFunction()
"""

lvars, gvars = {}, {}

exec s1 in lvars, gvars
print gvars
exec s2 in lvars, gvars
print gvars
</snippet></ROW><ROW><id>14352051</id><snippet>s1 = """
stash.foo = 'bar'
"""

s2 = """
def myImpureFunction():
    stash.foo = 'foo'
myImpureFunction()
"""

from types import ModuleType

lvars = {'stash': ModuleType('stash')}

exec s1 in lvars
print lvars['stash'].foo
exec s2 in lvars
print lvars['stash'].foo
</snippet></ROW><ROW><id>14352532</id><snippet>urls.txt</snippet></ROW><ROW><id>14352532</id><snippet>from multiprocessing import Process
import urllib2

def main():

  try:

    # Read URLs/Destinations from a file
    jobs = []
    with open("urls.txt","r") as ifile:
      for line in ifile:
        jobs.append(line.split(" "))

    # Create a process list to keep track of running processes
    process_list = []
    # Iterate through our jobs list
    for url, save_to in jobs:
      # Create a new process that runs function 'download'
      p = Process(target=download, args=(url, save_to))
      # Save it to a list
      process_list.append(p)
      # Start the process
      p.start()
  except KeyboardInterrupt:
    print("Received keyboard interrupt (ctrl+c). Exiting...")
  finally:
    # Wait for all processes to finish before exiting
    for process in process_list:
       # Wait for this process to finish
       process.join()
    print("All processes finished successfully!")


def download(url, destination):
  # Open a request
  request = urllib2.urlopen(url)
  # Read and save the webpage data to a file
  with open(destination, "w+") as save_file:
    print("Downloading {0}".format(url))
    save_file.write(request.read())

if __name__=="__main__":
  main()
</snippet></ROW><ROW><id>14352532</id><snippet>http://google.com google.html
http://yahoo.com yahoo.html
http://news.google.com news.google.html
http://reddit.com reddit.html
http://news.ycombinator.com news.ycombinator.html
</snippet></ROW><ROW><id>14352532</id><snippet>python xdownloader.py</snippet></ROW><ROW><id>14352532</id><snippet>mike@localhost ~ $ python xdownloader.py 
Downloading http://news.ycombinator.com
Downloading http://reddit.com
Downloading http://news.google.com
Downloading http://google.com
Done downloading http://google.com
Done downloading http://news.ycombinator.com
Done downloading http://reddit.com
Downloading http://yahoo.com
Done downloading http://news.google.com
Done downloading http://yahoo.com
</snippet></ROW><ROW><id>14352602</id><snippet>__eq__</snippet></ROW><ROW><id>14352602</id><snippet>__hash__</snippet></ROW><ROW><id>14352602</id><snippet>__hash__</snippet></ROW><ROW><id>14352602</id><snippet>__eq__</snippet></ROW><ROW><id>14352602</id><snippet>__eq__</snippet></ROW><ROW><id>14352602</id><snippet>__eq__</snippet></ROW><ROW><id>14352602</id><snippet>__hash__</snippet></ROW><ROW><id>14352602</id><snippet>__eq__</snippet></ROW><ROW><id>14352657</id><snippet>a</snippet></ROW><ROW><id>14352657</id><snippet>b</snippet></ROW><ROW><id>14352657</id><snippet>set(a).intersection(b)
</snippet></ROW><ROW><id>14352657</id><snippet>In [44]: nk=set(a).intersection(b)

In [45]: for x in a:
    ...:     if x in nk:
    ...:         print x, 'present in b'
    ...:     else:
    ...:         print x, 'absent in b'
    ...:         
a absent in b
b absent in b
g present in b
r absent in b
</snippet></ROW><ROW><id>14352657</id><snippet>In [47]: timeit(set(a) &amp; set(b))
1000000 loops, best of 3: 940 ns per loop

In [48]: timeit(set(a).intersection(b))
1000000 loops, best of 3: 854 ns per loop

In [49]: timeit([x for x in a if x in b])
1000000 loops, best of 3: 1 us per loop
</snippet></ROW><ROW><id>14352657</id><snippet>set(a).intersection(b)</snippet></ROW><ROW><id>14352659</id><snippet>del plot.ylimits</snippet></ROW><ROW><id>14352659</id><snippet>plot.ylimits=(0,100)</snippet></ROW><ROW><id>14352659</id><snippet>del plot.ylimits</snippet></ROW><ROW><id>14352659</id><snippet>plot.ylimits</snippet></ROW><ROW><id>14352696</id><snippet>pip</snippet></ROW><ROW><id>14352696</id><snippet>pip install -U requests
</snippet></ROW><ROW><id>14352696</id><snippet>pip install -U git+https://github.com/kennethreitz/requests
</snippet></ROW><ROW><id>14352696</id><snippet>pip</snippet></ROW><ROW><id>14352696</id><snippet>git clone</snippet></ROW><ROW><id>14352696</id><snippet>easy_install .</snippet></ROW><ROW><id>14352696</id><snippet>python setup.py</snippet></ROW><ROW><id>14353058</id><snippet>str.endswith</snippet></ROW><ROW><id>14353058</id><snippet>any(host[0].endswith(bot_host) for bot_host in bot_hosts)</snippet></ROW><ROW><id>14353058</id><snippet>host[0].endswith(bot_hosts) #if bot_hosts is a tuple
                            #if bot_hosts in not a tuple add tuple(bot_hosts)
</snippet></ROW><ROW><id>14353058</id><snippet>In [1]: suffs = ('a','b','d')

In [2]: 'asd'.endswith(suffs)
Out[2]: True

In [3]: 'asap'.endswith(suffs)
Out[3]: False
</snippet></ROW><ROW><id>14353067</id><snippet>from celery import task
from django.core.cache import cache

def page_two_calculation(arg1, arg2):
    return arg1 + arg2

@task
def page_two_task(arg1, arg2):
    result = page_two_calculation(arg1, arg2)
    cache_key = "page-two-%s-%s" (arg1, arg2)
    cache.set(cache_key, result)

def page_one(request, arg1, arg2):

    # Start the page two task
    page_two_task.delay(arg1, arg2)

    # Return the page one response
    return HttpResponse('page one')

def page_two(request, arg1, arg2)
    cache_key = "page-two-%s-%s" (arg1, arg2)
    result = cache.get(cache_key)
    if result is None:
         # the result will only be None if the page 2 calculation
         # doesn't exist in the cache, in which case we'll have to
         # return the value synchronously.
         result = page_two_calculation(arg1, arg2)
    return result
</snippet></ROW><ROW><id>14353101</id><snippet>psycopg2</snippet></ROW><ROW><id>14353101</id><snippet>psycopg2</snippet></ROW><ROW><id>14353101</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>14353101</id><snippet>psycopg2</snippet></ROW><ROW><id>14353101</id><snippet>LD_RUN_PATH=/usr/local/pgsql/lib</snippet></ROW><ROW><id>14353101</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>14353101</id><snippet>/usr/local/pgsql/lib</snippet></ROW><ROW><id>14353101</id><snippet>/etc/ld.so.conf</snippet></ROW><ROW><id>14353101</id><snippet>ld.so(8)</snippet></ROW><ROW><id>14353140</id><snippet>class DocumentDB(object):
    def __init__(self,connector):
        self.connector = connector

    def __call__(self, user):
        _c = self.connector

        print self, user, _c # &lt;__main__.DocumentDB object at 0x012DAD30&gt; &lt;class '__main__.User'&gt; &lt;__main__.Connector object at 0x012DAD70&gt;

        class TransparentAttribute(user):
            def __getattr__(self, attrname):
                try:
                    return _c.readvar(attrname)
                except:
                    return getattr(user, attrname)

        return TransparentAttribute
</snippet></ROW><ROW><id>14353140</id><snippet>u = User()
print type(u) # &lt;class '__main__.TransparentAttribute'&gt;
u.myfunc() # afadsadsf adsf asdf asdf
</snippet></ROW><ROW><id>14353140</id><snippet>u = User()</snippet></ROW><ROW><id>14353140</id><snippet>u</snippet></ROW><ROW><id>14353140</id><snippet>TransparentAttribute</snippet></ROW><ROW><id>14353140</id><snippet>User</snippet></ROW><ROW><id>14353140</id><snippet>TransparentAttribute</snippet></ROW><ROW><id>14353352</id><snippet>a</snippet></ROW><ROW><id>14353352</id><snippet># b.py
from a import a

def b():
    a()
</snippet></ROW><ROW><id>14353762</id><snippet>from SimpleXMLRPCServer import SimpleXMLRPCServer
from SimpleXMLRPCServer import SimpleXMLRPCRequestHandler

# Restrict to a particular path.
class RequestHandler(SimpleXMLRPCRequestHandler):
    rpc_paths = ('/RPC2',)

# Create server
server = SimpleXMLRPCServer(("localhost", 8000),
                            requestHandler=RequestHandler)
server.register_introspection_functions()

# Register pow() function; this will use the value of
# pow.__name__ as the name, which is just 'pow'.
server.register_function(pow)

# Register a function under a different name
def adder_function(x,y):
    return x + y
server.register_function(adder_function, 'add')

# Register an instance; all the methods of the instance are
# published as XML-RPC methods (in this case, just 'div').
class MyFuncs:
    def div(self, x, y):
        return x // y

server.register_instance(MyFuncs())

# Run the server's main loop
server.serve_forever()
</snippet></ROW><ROW><id>14353762</id><snippet>MyFuncs</snippet></ROW><ROW><id>14354247</id><snippet>__file__</snippet></ROW><ROW><id>14354247</id><snippet>import os.path
scriptpath = os.path.abspath(os.path.dirname(__file__))

configfile = os.path.join(scriptpath, configfilename)
</snippet></ROW><ROW><id>14354307</id><snippet>kwargs.popitem()</snippet></ROW><ROW><id>14354307</id><snippet>kwargs</snippet></ROW><ROW><id>14354307</id><snippet>(key, value)</snippet></ROW><ROW><id>14354307</id><snippet>name</snippet></ROW><ROW><id>14354307</id><snippet>value</snippet></ROW><ROW><id>14354307</id><snippet>k</snippet></ROW><ROW><id>14354307</id><snippet>f</snippet></ROW><ROW><id>14354307</id><snippet>c</snippet></ROW><ROW><id>14354307</id><snippet>r</snippet></ROW><ROW><id>14354307</id><snippet>TypeError</snippet></ROW><ROW><id>14354307</id><snippet>__getattr__</snippet></ROW><ROW><id>14354307</id><snippet>__setattr__</snippet></ROW><ROW><id>14354307</id><snippet>t.c</snippet></ROW><ROW><id>14354307</id><snippet>t.__getattr__('c')</snippet></ROW><ROW><id>14354307</id><snippet>t.c = 23</snippet></ROW><ROW><id>14354307</id><snippet>t.__setattr__('c', 23)</snippet></ROW><ROW><id>14354307</id><snippet>t.c</snippet></ROW><ROW><id>14354307</id><snippet>t.f</snippet></ROW><ROW><id>14354307</id><snippet>t.r</snippet></ROW><ROW><id>14354307</id><snippet>__setattr__</snippet></ROW><ROW><id>14354307</id><snippet>self.coefficients</snippet></ROW><ROW><id>14354307</id><snippet>self.k</snippet></ROW><ROW><id>14354307</id><snippet>t.c</snippet></ROW><ROW><id>14354307</id><snippet>t.f</snippet></ROW><ROW><id>14354307</id><snippet>t.r</snippet></ROW><ROW><id>14354307</id><snippet>__getattr__</snippet></ROW><ROW><id>14354307</id><snippet>self.coefficients</snippet></ROW><ROW><id>14354307</id><snippet>self.k</snippet></ROW><ROW><id>14354584</id><snippet>site_id</snippet></ROW><ROW><id>14354670</id><snippet>nx.dijkstra_path</snippet></ROW><ROW><id>14354670</id><snippet>&gt;&gt;&gt; import networkx as nx
&gt;&gt;&gt; g = nx.Graph()
&gt;&gt;&gt; g.add_edge('a', 'b', distance=0.3)
&gt;&gt;&gt; g.add_edge('a', 'c', distance=0.7)
&gt;&gt;&gt; nx.dijkstra_path_length(g, 'b', 'c', 'distance')
1.0
&gt;&gt;&gt; nx.dijkstra_path(g, 'b', 'c', 'distance')
['b', 'a', 'c']
&gt;&gt;&gt; nx.dijkstra_path_length(g, 'b', 'b', 'distance')
0
&gt;&gt;&gt; nx.dijkstra_path(g, 'b', 'b', 'distance')
Traceback (most recent call last):
  File "&lt;pyshell#7&gt;", line 1, in &lt;module&gt;
    nx.dijkstra_path(g, 'b', 'b', 'distance')
  File "C:\Users\barberm\AppData\Roaming\Python\Python27\site-packages\networkx\algorithms\shortest_paths\weighted.py", line 74, in dijkstra_path
    return path[target]
TypeError: list indices must be integers, not str
</snippet></ROW><ROW><id>14354670</id><snippet>destination</snippet></ROW><ROW><id>14354670</id><snippet>origin</snippet></ROW><ROW><id>14354741</id><snippet>%</snippet></ROW><ROW><id>14354741</id><snippet>'Foo(%r)' % (1, 2)
</snippet></ROW><ROW><id>14354741</id><snippet>self.vals</snippet></ROW><ROW><id>14354741</id><snippet>'Foo(%r)' % (self.vals,)
</snippet></ROW><ROW><id>14354741</id><snippet>REPRFORMAT % (self.vals,)
</snippet></ROW><ROW><id>14354741</id><snippet>self.vals</snippet></ROW><ROW><id>14354741</id><snippet>%r</snippet></ROW><ROW><id>14354741</id><snippet>%s</snippet></ROW><ROW><id>14354741</id><snippet>.format()</snippet></ROW><ROW><id>14354741</id><snippet>return 'Foo({0!r})'.format(self.vals)
</snippet></ROW><ROW><id>14354741</id><snippet>vals</snippet></ROW><ROW><id>14354741</id><snippet>return 'Foo(({0[0]:04d}, {0[1]:02d}))'.format(self.vals)
</snippet></ROW><ROW><id>14354741</id><snippet>Foo((0001, 04))</snippet></ROW><ROW><id>14354823</id><snippet>type()</snippet></ROW><ROW><id>14354823</id><snippet>print type(error.reason)</snippet></ROW><ROW><id>14354823</id><snippet>reason</snippet></ROW><ROW><id>14354845</id><snippet>from itertools import groupby
from operator import itemgetter
c=[((u'http://www.example.com', u'second_value'), u'one'), 
   ((u'http://www.example.com', u'second_value'), u'two'), 
   ((u'http://www.hello.com', u'second_value'), u'one'), 
   ((u'http://www.example.com', u'second_value'), u'three'), 
   ((u'http://www.hello.com', u'second_value'), u'two')]
b= groupby(sorted(c,key=itemgetter(0)), key=itemgetter(0))
for unique_keys, group in b:
    print unique_keys
</snippet></ROW><ROW><id>14354845</id><snippet>(u'http://www.example.com', u'second_value')
(u'http://www.hello.com', u'second_value')
</snippet></ROW><ROW><id>14355191</id><snippet>scipy</snippet></ROW><ROW><id>14355561</id><snippet>"t1, t2, t3,t4".replace(" ", "").split(",")
</snippet></ROW><ROW><id>14355694</id><snippet>&gt;&gt;&gt; dict_a = {
       'north' : 'N',
       'south' : 'S',
       'east' : 'E',
       'west' : 'W',
       'north east' : 'NE',
       'north west' : 'NW'
   }
&gt;&gt;&gt; import difflib
&gt;&gt;&gt; string_a = 'North East Asia'
&gt;&gt;&gt; dict_a[difflib.get_close_matches(string_a, dict_a.keys())[0]]
'NE'
</snippet></ROW><ROW><id>14356142</id><snippet>import numpy as np
import ctypes

count = 5
size = 1000

#create some arrays
arrays = [np.arange(size,dtype="float32") for ii in range(count)] 

#get ctypes handles
ctypes_arrays = [np.ctypeslib.as_ctypes(array) for array in arrays]

#Pack into pointer array
pointer_ar = (ctypes.POINTER(C.c_float) * count)(*ctypes_arrays)

ctypes.CDLL("./libfoo.so").foo(ctypes.c_int(count), pointer_ar, ctypes.c_int(size))
</snippet></ROW><ROW><id>14356142</id><snippet># function to multiply all arrays by 2
void foo(int count, float** array, int size)
{
   int ii,jj;
   for (ii=0;ii&lt;count;ii++){
      for (jj=0;jj&lt;size;jj++)
         array[ii][jj] *= 2;    
   }

}
</snippet></ROW><ROW><id>14356231</id><snippet>"U"</snippet></ROW><ROW><id>14356231</id><snippet>&gt;&gt;&gt; f = open("file.txt", "w")
&gt;&gt;&gt; f.write("a\rb\nc\r\nd\n\re\n")
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; open("file.txt").readlines()
['a\rb\n', 'c\r\n', 'd\n', '\re\n']
&gt;&gt;&gt; open("file.txt", 'rU').readlines()
['a\n', 'b\n', 'c\n', '\n', 'd\n', '\n', 'e\n']
</snippet></ROW><ROW><id>14356231</id><snippet>linecache</snippet></ROW><ROW><id>14356231</id><snippet>&gt;&gt;&gt; for n in range(1, 8):
...   linecache.getline('file.txt', n)
...
'a\n'
'b\n'
'c\n'
'\n'
'd\n'
'\n'
'e\n'
</snippet></ROW><ROW><id>14356610</id><snippet>def</snippet></ROW><ROW><id>14356610</id><snippet>and       del       from      not       while as        elif     
global    or        with assert    else      if        pass      yield
break     except    import    print class     exec      in       
raise continue  finally   is        return def       for       lambda 
try
</snippet></ROW><ROW><id>14356796</id><snippet>.clear()</snippet></ROW><ROW><id>14356796</id><snippet>mydiv.clear()
</snippet></ROW><ROW><id>14357133</id><snippet>import sys
print('\n'.join(sorted(sys.path)))
</snippet></ROW><ROW><id>14357133</id><snippet>__main__</snippet></ROW><ROW><id>14357169</id><snippet>camera</snippet></ROW><ROW><id>14357169</id><snippet>draw</snippet></ROW><ROW><id>14357169</id><snippet>rect</snippet></ROW><ROW><id>14357169</id><snippet>Camera</snippet></ROW><ROW><id>14357169</id><snippet>class Camera(object):
    def __init__(self, camera_func, width, height):
        self.camera_func = camera_func
        self.state = Rect(0, 0, width, height)

    def apply(self, target):
        return target.rect.move(self.state.topleft)

    def update(self, target):
        self.state = self.camera_func(self.state, target.rect)
</snippet></ROW><ROW><id>14357169</id><snippet>Rect</snippet></ROW><ROW><id>14357169</id><snippet>Rect</snippet></ROW><ROW><id>14357169</id><snippet>apply</snippet></ROW><ROW><id>14357169</id><snippet>update</snippet></ROW><ROW><id>14357169</id><snippet>camera_func</snippet></ROW><ROW><id>14357169</id><snippet>for row in level:
    ...

total_level_width  = len(level[0])*32 # calculate size of level in pixels
total_level_height = len(level)*32    # maybe make 32 an constant
camera = Camera(*to_be_implemented*, total_level_width, total_level_height)

entities.add(player)
... 
</snippet></ROW><ROW><id>14357169</id><snippet># draw background
for y in range(32):
    ...

camera.update(player) # camera follows player. Note that we could also follow any other sprite

# update player, draw everything else
player.update(up, down, left, right, running, platforms)
for e in entities:
    # apply the offset to each entity.
    # call this for everything that should scroll,
    # which is basically everything other than GUI/HUD/UI
    screen.blit(e.image, camera.apply(e)) 

pygame.display.update()
</snippet></ROW><ROW><id>14357169</id><snippet>camera_func</snippet></ROW><ROW><id>14357169</id><snippet>camera_func</snippet></ROW><ROW><id>14357169</id><snippet>def simple_camera(camera, target_rect):
    l, t, _, _ = target_rect # l = left,  t = top
    _, _, w, h = camera      # w = width, h = height
    return Rect(-l+HALF_WIDTH, -t+HALF_HEIGHT, w, h)
</snippet></ROW><ROW><id>14357169</id><snippet>target</snippet></ROW><ROW><id>14357169</id><snippet>camera = Camera(simple_camera, total_level_width, total_level_height)
</snippet></ROW><ROW><id>14357169</id><snippet>def complex_camera(camera, target_rect):
    l, t, _, _ = target_rect
    _, _, w, h = camera
    l, t, _, _ = -l+HALF_WIDTH, -t+HALF_HEIGHT, w, h # center player

    l = min(0, l)                           # stop scrolling at the left edge
    l = max(-(camera.width-WIN_WIDTH), l)   # stop scrolling at the right edge
    t = max(-(camera.height-WIN_HEIGHT), t) # stop scrolling at the bottom
    t = min(0, t)                           # stop scrolling at the top

    return Rect(l, t, w, h)
</snippet></ROW><ROW><id>14357169</id><snippet>min</snippet></ROW><ROW><id>14357169</id><snippet>max</snippet></ROW><ROW><id>14357169</id><snippet>camera = Camera(complex_camera, total_level_width, total_level_height)
</snippet></ROW><ROW><id>14357169</id><snippet>#! /usr/bin/python

import pygame
from pygame import *

WIN_WIDTH = 800
WIN_HEIGHT = 640
HALF_WIDTH = int(WIN_WIDTH / 2)
HALF_HEIGHT = int(WIN_HEIGHT / 2)

DISPLAY = (WIN_WIDTH, WIN_HEIGHT)
DEPTH = 32
FLAGS = 0
CAMERA_SLACK = 30

def main():
    global cameraX, cameraY
    pygame.init()
    screen = pygame.display.set_mode(DISPLAY, FLAGS, DEPTH)
    pygame.display.set_caption("Use arrows to move!")
    timer = pygame.time.Clock()

    up = down = left = right = running = False
    bg = Surface((32,32))
    bg.convert()
    bg.fill(Color("#000000"))
    entities = pygame.sprite.Group()
    player = Player(32, 32)
    platforms = []

    x = y = 0
    level = [
        "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP",
        "P                                          P",
        "P                                          P",
        "P                                          P",
        "P                    PPPPPPPPPPP           P",
        "P                                          P",
        "P                                          P",
        "P                                          P",
        "P    PPPPPPPP                              P",
        "P                                          P",
        "P                          PPPPPPP         P",
        "P                 PPPPPP                   P",
        "P                                          P",
        "P         PPPPPPP                          P",
        "P                                          P",
        "P                     PPPPPP               P",
        "P                                          P",
        "P   PPPPPPPPPPP                            P",
        "P                                          P",
        "P                 PPPPPPPPPPP              P",
        "P                                          P",
        "P                                          P",
        "P                                          P",
        "P                                          P",
        "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP",]
    # build the level
    for row in level:
        for col in row:
            if col == "P":
                p = Platform(x, y)
                platforms.append(p)
                entities.add(p)
            if col == "E":
                e = ExitBlock(x, y)
                platforms.append(e)
                entities.add(e)
            x += 32
        y += 32
        x = 0

    total_level_width  = len(level[0])*32
    total_level_height = len(level)*32
    camera = Camera(complex_camera, total_level_width, total_level_height)
    entities.add(player)

    while 1:
        timer.tick(60)

        for e in pygame.event.get():
            if e.type == QUIT: raise SystemExit, "QUIT"
            if e.type == KEYDOWN and e.key == K_ESCAPE:
                raise SystemExit, "ESCAPE"
            if e.type == KEYDOWN and e.key == K_UP:
                up = True
            if e.type == KEYDOWN and e.key == K_DOWN:
                down = True
            if e.type == KEYDOWN and e.key == K_LEFT:
                left = True
            if e.type == KEYDOWN and e.key == K_RIGHT:
                right = True
            if e.type == KEYDOWN and e.key == K_SPACE:
                running = True

            if e.type == KEYUP and e.key == K_UP:
                up = False
            if e.type == KEYUP and e.key == K_DOWN:
                down = False
            if e.type == KEYUP and e.key == K_RIGHT:
                right = False
            if e.type == KEYUP and e.key == K_LEFT:
                left = False

        # draw background
        for y in range(32):
            for x in range(32):
                screen.blit(bg, (x * 32, y * 32))

        camera.update(player)

        # update player, draw everything else
        player.update(up, down, left, right, running, platforms)
        for e in entities:
            screen.blit(e.image, camera.apply(e))

        pygame.display.update()

class Camera(object):
    def __init__(self, camera_func, width, height):
        self.camera_func = camera_func
        self.state = Rect(0, 0, width, height)

    def apply(self, target):
        return target.rect.move(self.state.topleft)

    def update(self, target):
        self.state = self.camera_func(self.state, target.rect)

def simple_camera(camera, target_rect):
    l, t, _, _ = target_rect
    _, _, w, h = camera
    return Rect(-l+HALF_WIDTH, -t+HALF_HEIGHT, w, h)

def complex_camera(camera, target_rect):
    l, t, _, _ = target_rect
    _, _, w, h = camera
    l, t, _, _ = -l+HALF_WIDTH, -t+HALF_HEIGHT, w, h

    l = min(0, l)                           # stop scrolling at the left edge
    l = max(-(camera.width-WIN_WIDTH), l)   # stop scrolling at the right edge
    t = max(-(camera.height-WIN_HEIGHT), t) # stop scrolling at the bottom
    t = min(0, t)                           # stop scrolling at the top
    return Rect(l, t, w, h)

class Entity(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)

class Player(Entity):
    def __init__(self, x, y):
        Entity.__init__(self)
        self.xvel = 0
        self.yvel = 0
        self.onGround = False
        self.image = Surface((32,32))
        self.image.fill(Color("#0000FF"))
        self.image.convert()
        self.rect = Rect(x, y, 32, 32)

    def update(self, up, down, left, right, running, platforms):
        if up:
            # only jump if on the ground
            if self.onGround: self.yvel -= 10
        if down:
            pass
        if running:
            self.xvel = 12
        if left:
            self.xvel = -8
        if right:
            self.xvel = 8
        if not self.onGround:
            # only accelerate with gravity if in the air
            self.yvel += 0.3
            # max falling speed
            if self.yvel &gt; 100: self.yvel = 100
        if not(left or right):
            self.xvel = 0
        # increment in x direction
        self.rect.left += self.xvel
        # do x-axis collisions
        self.collide(self.xvel, 0, platforms)
        # increment in y direction
        self.rect.top += self.yvel
        # assuming we're in the air
        self.onGround = False;
        # do y-axis collisions
        self.collide(0, self.yvel, platforms)

    def collide(self, xvel, yvel, platforms):
        for p in platforms:
            if pygame.sprite.collide_rect(self, p):
                if isinstance(p, ExitBlock):
                    pygame.event.post(pygame.event.Event(QUIT))
                if xvel &gt; 0:
                    self.rect.right = p.rect.left
                    print "collide right"
                if xvel &lt; 0:
                    self.rect.left = p.rect.right
                    print "collide left"
                if yvel &gt; 0:
                    self.rect.bottom = p.rect.top
                    self.onGround = True
                    self.yvel = 0
                if yvel &lt; 0:
                    self.rect.top = p.rect.bottom


class Platform(Entity):
    def __init__(self, x, y):
        Entity.__init__(self)
        self.image = Surface((32, 32))
        self.image.convert()
        self.image.fill(Color("#DDDDDD"))
        self.rect = Rect(x, y, 32, 32)

    def update(self):
        pass

class ExitBlock(Platform):
    def __init__(self, x, y):
        Platform.__init__(self, x, y)
        self.image.fill(Color("#0033FF"))

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>14357402</id><snippet>proxied_association.py</snippet></ROW><ROW><id>14357644</id><snippet>ir.model.data</snippet></ROW><ROW><id>14357644</id><snippet>module_name.record_identifier</snippet></ROW><ROW><id>14357644</id><snippet>(model,res_id)</snippet></ROW><ROW><id>14357644</id><snippet>module</snippet></ROW><ROW><id>14357644</id><snippet>base.EUR</snippet></ROW><ROW><id>14357644</id><snippet>base</snippet></ROW><ROW><id>14357644</id><snippet>id</snippet></ROW><ROW><id>14357644</id><snippet>id</snippet></ROW><ROW><id>14357644</id><snippet>id</snippet></ROW><ROW><id>14357644</id><snippet>ir.model.data</snippet></ROW><ROW><id>14357644</id><snippet>id</snippet></ROW><ROW><id>14357644</id><snippet>.</snippet></ROW><ROW><id>14357644</id><snippet>__export__</snippet></ROW><ROW><id>14358087</id><snippet>lazy</snippet></ROW><ROW><id>14358087</id><snippet>'joined'</snippet></ROW><ROW><id>14358087</id><snippet>'subquery'</snippet></ROW><ROW><id>14358087</id><snippet>class Post(db.Model):
    # ...
    tags = db.relationship('Tag', secondary=tagmap, backref='posts',
                           lazy='joined')    # Or lazy='subquery'
</snippet></ROW><ROW><id>14358087</id><snippet>q = Post.query.options(db.joinedload(Post.tags)).all()
# Or db.subqueryload(Post.tags)
</snippet></ROW><ROW><id>14358292</id><snippet>dict()</snippet></ROW><ROW><id>14358292</id><snippet>dispatch = dict((key, globals()['%s_%s' % key]) for key in IT.product(targets, actions))
</snippet></ROW><ROW><id>14358292</id><snippet>(key, value)</snippet></ROW><ROW><id>14358321</id><snippet>Redis.rpush('key', *seq)
</snippet></ROW><ROW><id>14358362</id><snippet>random.shuffle()</snippet></ROW><ROW><id>14358362</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; l = range(10)
&gt;&gt;&gt; l
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; random.shuffle(l)
&gt;&gt;&gt; l
    [0, 2, 8, 7, 9, 1, 3, 4, 6, 5]
</snippet></ROW><ROW><id>14358909</id><snippet>import pylab as plt
import numpy as np

xs = np.linspace(0., 100., 1000.)
data = (xs*0.03 + np.sin(xs) * 0.1) % 1

plt.subplot(2,1,1)
plt.plot(xs, data, "r-")

#Make a masked array with jump points masked
abs_d_data = np.abs(np.diff(data))
mask = np.hstack([ abs_d_data &gt; abs_d_data.mean()+3*abs_d_data.std(), [False]])
masked_data = np.ma.MaskedArray(data, mask)
plt.subplot(2,1,2)
plt.plot(xs, masked_data, "b-")

plt.show()
</snippet></ROW><ROW><id>14359032</id><snippet>=</snippet></ROW><ROW><id>14359032</id><snippet>==</snippet></ROW><ROW><id>14359032</id><snippet>x = 0
y = 2
counter = x
integer = y
while (counter&gt;999):
    if (y%2 == 0 or y%3 == 0):
        y = y + 1
    else:
        counter += 1
        integer += 1
print (y)    
</snippet></ROW><ROW><id>14359239</id><snippet>git clone git://github.com/matplotlib/matplotlib.git</snippet></ROW><ROW><id>14359254</id><snippet>sklearn</snippet></ROW><ROW><id>14359254</id><snippet>__init__.py</snippet></ROW><ROW><id>14359254</id><snippet>sklearn</snippet></ROW><ROW><id>14359254</id><snippet>datasets</snippet></ROW><ROW><id>14359254</id><snippet>sklearn</snippet></ROW><ROW><id>14359254</id><snippet>__init__.py</snippet></ROW><ROW><id>14359254</id><snippet>import sklearn.datasets
</snippet></ROW><ROW><id>14359423</id><snippet>append_const</snippet></ROW><ROW><id>14359423</id><snippet>args.funcs</snippet></ROW><ROW><id>14359423</id><snippet>if not args.funcs:
    args.funcs = [func1, func2, func3]
</snippet></ROW><ROW><id>14359423</id><snippet>import argparse

def func1(): pass
def func2(): pass
def func3(): pass

parser = argparse.ArgumentParser()
parser.add_argument(
    "-l", "--list",
    dest='funcs', action="append_const", const=func1,
    help="Create CSV of images", )
parser.add_argument(
    "-i", "--interactive",
    dest='funcs', action="append_const", const=func2,
    help="Run script in interactive mode",)
parser.add_argument(
    "-d", "--dimensions",
    dest='funcs', action='append_const', const=func3,
    help="Copy images with incorrect dimensions to new directory")
args = parser.parse_args()
if not args.funcs:
    args.funcs = [func1, func2, func3]

for func in args.funcs:
    print(func.func_name)
    func()
</snippet></ROW><ROW><id>14359423</id><snippet>% test.py
func1
func2
func3

% test.py -d
func3

% test.py -d -i
func3
func2
</snippet></ROW><ROW><id>14359423</id><snippet>% test.py -i -d
func2
func3
</snippet></ROW><ROW><id>14359423</id><snippet>if</snippet></ROW><ROW><id>14359423</id><snippet>if not lists:
    sys.exit('No jpegs found')
# put main program here, unnested
</snippet></ROW><ROW><id>14359423</id><snippet>No jpegs found</snippet></ROW><ROW><id>14359423</id><snippet>stderr</snippet></ROW><ROW><id>14359423</id><snippet>functools.partial</snippet></ROW><ROW><id>14359423</id><snippet>for func in args.funcs:
    func()
</snippet></ROW><ROW><id>14359423</id><snippet>for func, args in args.funcs:
    func(args)
</snippet></ROW><ROW><id>14359423</id><snippet>(func, args)</snippet></ROW><ROW><id>14359423</id><snippet>args.func</snippet></ROW><ROW><id>14359423</id><snippet>import argparse
import sys

def parse_args(lists):
    funcs = {
        'createCsv': (createCsv, lists['file_list']),
        'resizeImage': (resizeImage, lists['resized']),
        'optimiseImage': (optimiseImage, lists['size_issues']),
        'dimensionIssues': (dimensionIssues, lists['dim_issues']),
        'controlInput': (controlInput, lists)
    }
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-l", "--list",
        dest='funcs', action="append_const", const=funcs['createCsv'],
        help="Create CSV of images",)
    parser.add_argument(
        "-c", "--convert",
        dest='funcs', action="append_const", const=funcs['resizeImage'],
        help="Convert images from 1500 x 2000px to 900 x 1200px ",)
    parser.add_argument(
        "-o", "--optimise",
        dest='funcs', action="append_const", const=funcs['optimiseImage'],
        help="Optimise filesize for 900 x 1200px images",)
    parser.add_argument(
        "-d", "--dimensions",
        dest='funcs', action="append_const", const=funcs['dimensionIssues'],
        help="Copy images with incorrect dimensions to new directory",)
    parser.add_argument(
        "-i", "--interactive",
        dest='funcs', action="append_const", const=funcs['controlInput'],
        help="Run script in interactive mode",)
    args = parser.parse_args()
    if not args.funcs:
        args.funcs = [funcs[task] for task in
                      ('createCsv', 'resizeImage', 'optimiseImage', 'dimensionIssues')]
    return args

if __name__ == '__main__':
    lists = analyseImages()

    if not lists:
        sys.exit('No jpegs found')

    args = parse_args(lists)   
    statusTable(lists)    
    for func, args in args.funcs:
        func(args)
</snippet></ROW><ROW><id>14359653</id><snippet>re.Scanner</snippet></ROW><ROW><id>14359653</id><snippet>(r".", unknown)
</snippet></ROW><ROW><id>14359653</id><snippet>import re

def alpha(scanner,token):
    return token, 'a'

def numeric(scanner,token):
    return token,'rn'

def punctuation(scanner,token):
    return token, 'p'

def superscript(scanner,token):
    return token, 'sn'

def unknown(scanner,token):
    return token, 'uk'

scanner = re.Scanner([
    (r"[a-zA-Z]+", alpha),
    (r"[.,:;!?]", punctuation),
    (r"[0-9]+", numeric),
    (r"[\xb9\u2070\xb3\xb2\u2075\u2074\u2077\u2076\u2079\u2078]", superscript),
    (r"[\s\n]+", None), # whitespace, newline
    (r".", unknown)
    ])

tokens, _ = scanner.scan("This is a little test? With 7,9 and 6. \xa0-\xaf")
print tokens
</snippet></ROW><ROW><id>14359653</id><snippet>[('This', 'a'), ('is', 'a'), ('a', 'a'), ('little', 'a'), 
('test', 'a'), ('?', 'p'), ('With', 'a'), ('7', 'rn'), (',', 'p'), 
('9', 'rn'), ('and', 'a'), ('6', 'rn'), ('.', 'p'), ('\xa0', 'uk'), 
('-', 'uk'), ('\xaf', 'uk')]
</snippet></ROW><ROW><id>14359653</id><snippet>unicode</snippet></ROW><ROW><id>14359653</id><snippet>str</snippet></ROW><ROW><id>14359653</id><snippet>unicode</snippet></ROW><ROW><id>14359653</id><snippet>str</snippet></ROW><ROW><id>14359653</id><snippet>superscript</snippet></ROW><ROW><id>14359736</id><snippet>plt.ion()</snippet></ROW><ROW><id>14359736</id><snippet>plt.clf()</snippet></ROW><ROW><id>14359736</id><snippet>import numpy as np
import matplotlib.pyplot as plt
plt.ion()

import random
t=0
r=3.0
n=0
A=[]
for x in range(10):
    for y in range(10):
        A.append([random.uniform(0,1),random.uniform(0,1)])

for m in range(len(A)):
    plt.plot(A[m][0],A[m][1], "x", color="blue")
    plt.draw()
plt.pause(1)

while n&lt;=100:
    for m in range(len(A)):
        A[m][0]=r*A[m][0]*(1-A[m][0])
        A[m][1]=r*A[m][1]*(1-A[m][1])
    for m in range(len(A)):
        plt.plot(A[m][0],A[m][1], "x", color="blue")
    plt.draw()
    plt.pause(1)
    plt.clf()
</snippet></ROW><ROW><id>14359736</id><snippet>plt.draw()</snippet></ROW><ROW><id>14359736</id><snippet>plt.pause(t)</snippet></ROW><ROW><id>14359736</id><snippet>plot(x,y,"bx")</snippet></ROW><ROW><id>14359745</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; t = """
type="thing" blahblahblah
something id="123456"
...
type="disabled thing" blahblahblah
somethingelse id="123457"
...
"""
&gt;&gt;&gt; q = re.compile(r'type="thing".*\n.*\n')
&gt;&gt;&gt; q.findall(t)
['type="thing" blahblahblah\nsomething id="123456"\n']
&gt;&gt;&gt; for s in q.findall(t):
    print s  

type="thing" blahblahblah
something id="123456"
</snippet></ROW><ROW><id>14359745</id><snippet>.+</snippet></ROW><ROW><id>14359745</id><snippet>re.S</snippet></ROW><ROW><id>14359745</id><snippet>.+?</snippet></ROW><ROW><id>14360369</id><snippet>index = pd.date_range(start='1952', periods=10**6, freq='s')
big = pd.Series(np.ones(len(index))*97, index)
small = pd.Series(np.ones(len(index))*2, index)

alternating = big[big.index.second % 10 &gt;= 5].combine_first(small)
</snippet></ROW><ROW><id>14360369</id><snippet>alternating</snippet></ROW><ROW><id>14360423</id><snippet>df.reset_index().groupby('A')['index'].apply(lambda x: np.array(x))
</snippet></ROW><ROW><id>14360423</id><snippet>In [1]: import numpy as np

In [2]: from pandas import *

In [3]: df = DataFrame([3]*4+[4]*4+[1]*4, columns=['A'])
In [4]: df
Out[4]:
    A
0   3
1   3
2   3
3   3
4   4
5   4
6   4
7   4
8   1
9   1
10  1
11  1

In [5]: df.reset_index().groupby('A')['index'].apply(lambda x: np.array(x))
Out[5]:
A
1    [8, 9, 10, 11]
3      [0, 1, 2, 3]
4      [4, 5, 6, 7]
</snippet></ROW><ROW><id>14360423</id><snippet>In [1]: grp = df.groupby('A')

In [2]: grp.indices
Out[2]:
{1L: array([ 8,  9, 10, 11], dtype=int64),
 3L: array([0, 1, 2, 3], dtype=int64),
 4L: array([4, 5, 6, 7], dtype=int64)}

In [3]: grp.indices[3]
Out[3]: array([0, 1, 2, 3], dtype=int64)
</snippet></ROW><ROW><id>14360423</id><snippet>In [1]: df['block'] = (df.A.shift(1) != df.A).astype(int).cumsum()

In [2]: df
Out[2]:
    A  block
0   3      1
1   3      1
2   3      1
3   3      1
4   4      2
5   4      2
6   4      2
7   4      2
8   1      3
9   1      3
10  1      3
11  1      3
12  3      4
13  3      4
14  3      4
15  3      4
</snippet></ROW><ROW><id>14360423</id><snippet>In [77]: df.reset_index().groupby(['A','block'])['index'].apply(lambda x: np.array(x))
Out[77]:
A  block
1  3          [8, 9, 10, 11]
3  1            [0, 1, 2, 3]
   4        [12, 13, 14, 15]
4  2            [4, 5, 6, 7]
</snippet></ROW><ROW><id>14360482</id><snippet>import pynotify</snippet></ROW><ROW><id>14360482</id><snippet>gi.repository</snippet></ROW><ROW><id>14360592</id><snippet>from HTMLParser import HTMLParser

# create a subclass and override the handler methods
class MyHTMLParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        print "Encountered a start tag:", tag
    def handle_endtag(self, tag):
        print "Encountered an end tag :", tag
    def handle_data(self, data):
        print "Encountered some data  :", data

# instantiate the parser and fed it some HTML
parser = MyHTMLParser()
parser.feed('&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;'
            '&lt;body&gt;&lt;h1&gt;Parse me!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;')
</snippet></ROW><ROW><id>14360592</id><snippet>handle_data</snippet></ROW><ROW><id>14360712</id><snippet>lecture.queues.first().users.append(user)
</snippet></ROW><ROW><id>14360712</id><snippet>Queue.name = "some name"</snippet></ROW><ROW><id>14360712</id><snippet>Queue</snippet></ROW><ROW><id>14360712</id><snippet>Queue.users.append(someuser)</snippet></ROW><ROW><id>14360712</id><snippet>Queue</snippet></ROW><ROW><id>14360712</id><snippet>queue = lecture.queues.first()
queue.users.append(user)
</snippet></ROW><ROW><id>14360792</id><snippet>optparse</snippet></ROW><ROW><id>14360792</id><snippet>argparse</snippet></ROW><ROW><id>14360792</id><snippet>import argparse
parser = argparse.ArgumentParser()
parser.add_argument('-f','--filename',action='store',help='file!')
namespace = parser.parse_args()
print namespace.filename
</snippet></ROW><ROW><id>14360792</id><snippet>from optparse import OptionParser
parser = OptionParser()
parser.add_option("-f", "--filename", dest="filename",help="file!")
options,args = parser.parse_args()
print options.filename
</snippet></ROW><ROW><id>14360869</id><snippet>0 10 * * * env -i bash -c 'export WORKON_HOME=~/.virtualenvs &amp;&amp; source /usr/local/bin/virtualenvwrapper.sh &amp;&amp; workon my_project &amp;&amp; python task.py'
</snippet></ROW><ROW><id>14360869</id><snippet>gnome-terminal --tab -e 'bash -c "export WORKON_HOME=~/.virtualenvs &amp;&amp; source /usr/local/bin/virtualenvwrapper.sh &amp;&amp; workon my_project &amp;&amp; python task.py " '
</snippet></ROW><ROW><id>14360869</id><snippet>#/bin/sh
set -e
export WORKON_HOME=~/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh
workon my_project
exec python task.py
</snippet></ROW><ROW><id>14361041</id><snippet>.date()</snippet></ROW><ROW><id>14361041</id><snippet>datetime.now().date()
</snippet></ROW><ROW><id>14361041</id><snippet>date.today()</snippet></ROW><ROW><id>14361041</id><snippet>from datetime import date
date.today()
</snippet></ROW><ROW><id>14361055</id><snippet>os</snippet></ROW><ROW><id>14361055</id><snippet>shutil</snippet></ROW><ROW><id>14361055</id><snippet>import shutil, os

target = raw_input("Target directory: ")

# Make sure the target dir exists!
assert(os.path.exists(target))

for f in os.listdir('.'):
    b = raw_input("Press y to move file %s to %s: " %(f,target))
    if b.lower() == 'y':
        shutil.move(f, target)
</snippet></ROW><ROW><id>14361083</id><snippet>count</snippet></ROW><ROW><id>14361083</id><snippet>def factorization(n):
    """
    Generate the prime factorization of n in the form of pairs (p, k)
    where the prime p appears k times in the factorization.

    &gt;&gt;&gt; list(factorization(1))
    []
    &gt;&gt;&gt; list(factorization(24))
    [(2, 3), (3, 1)]
    &gt;&gt;&gt; list(factorization(1001))
    [(7, 1), (11, 1), (13, 1)]
    """
    p = 1
    while p * p &lt; n:
        p += 1
        k = 0
        while n % p == 0:
            k += 1
            n //= p
        if k:
            yield p, k
    if n != 1:
        yield n, 1
</snippet></ROW><ROW><id>14361083</id><snippet>append</snippet></ROW><ROW><id>14361083</id><snippet>from operator import mul

def sum_of_divisors(n):
    """
    Return the sum of divisors of n.

    &gt;&gt;&gt; sum_of_divisors(1)
    1
    &gt;&gt;&gt; sum_of_divisors(33550336) // 2
    33550336
    """
    return reduce(mul, ((p**(k+1)-1) // (p-1) for p, k in factorization(n)), 1)
</snippet></ROW><ROW><id>14361362</id><snippet>dir()</snippet></ROW><ROW><id>14361362</id><snippet>__dict__</snippet></ROW><ROW><id>14361362</id><snippet>dir()</snippet></ROW><ROW><id>14361362</id><snippet>__dict__</snippet></ROW><ROW><id>14361362</id><snippet>__dict__</snippet></ROW><ROW><id>14361362</id><snippet>__slots__</snippet></ROW><ROW><id>14361362</id><snippet>__dict__</snippet></ROW><ROW><id>14361362</id><snippet>dir()</snippet></ROW><ROW><id>14361362</id><snippet>&gt;&gt;&gt; class Foo(object):
...     __slots__ = ('bar',)
...     bar = 'spam'
... 
&gt;&gt;&gt; Foo().__dict__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'Foo' object has no attribute '__dict__'
&gt;&gt;&gt; dir(Foo())
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', 'bar']
</snippet></ROW><ROW><id>14361362</id><snippet>list</snippet></ROW><ROW><id>14361362</id><snippet>__dict__</snippet></ROW><ROW><id>14361362</id><snippet>dir()</snippet></ROW><ROW><id>14361362</id><snippet>&gt;&gt;&gt; [].__dict__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'list' object has no attribute '__dict__'
&gt;&gt;&gt; dir([])
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
</snippet></ROW><ROW><id>14361362</id><snippet>dir()</snippet></ROW><ROW><id>14361362</id><snippet>__dict__</snippet></ROW><ROW><id>14361362</id><snippet>&gt;&gt;&gt; class Foo(object):
...     bar = 'spam'
... 
&gt;&gt;&gt; Foo().__dict__
{}
&gt;&gt;&gt; Foo.__dict__.items()
[('__dict__', &lt;attribute '__dict__' of 'Foo' objects&gt;), ('__weakref__', &lt;attribute '__weakref__' of 'Foo' objects&gt;), ('__module__', '__main__'), ('bar', 'spam'), ('__doc__', None)]
</snippet></ROW><ROW><id>14361362</id><snippet>dir()</snippet></ROW><ROW><id>14361362</id><snippet>__dict__</snippet></ROW><ROW><id>14361362</id><snippet>object</snippet></ROW><ROW><id>14361362</id><snippet>&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.ham
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'Foo' object has no attribute 'ham'
&gt;&gt;&gt; Foo.ham = 'eggs'
&gt;&gt;&gt; f.ham
'eggs'
</snippet></ROW><ROW><id>14361362</id><snippet>__dict__</snippet></ROW><ROW><id>14361362</id><snippet>&gt;&gt;&gt; Foo.__dict__['ham']
'eggs'
&gt;&gt;&gt; f.__dict__
{}
</snippet></ROW><ROW><id>14361362</id><snippet>__dict__</snippet></ROW><ROW><id>14361362</id><snippet>__dict__</snippet></ROW><ROW><id>14361362</id><snippet>__dict__</snippet></ROW><ROW><id>14361362</id><snippet>&gt;&gt;&gt; f.stack = 'overflow'
&gt;&gt;&gt; f.__dict__
{'stack': 'overflow'}
&gt;&gt;&gt; 'stack' in Foo.__dict__
False
</snippet></ROW><ROW><id>14361362</id><snippet>dir()</snippet></ROW><ROW><id>14361362</id><snippet>__dict__</snippet></ROW><ROW><id>14361362</id><snippet>__dict__</snippet></ROW><ROW><id>14361382</id><snippet>def getcolumn(n,data): 
    return (i[n] for i in data) # if this dosent work replace () with []

for i in getcolumn(1,data):
    print i
</snippet></ROW><ROW><id>14361872</id><snippet>__file__</snippet></ROW><ROW><id>14362003</id><snippet>-D_XOPEN_SOURCE_EXTENDED=1</snippet></ROW><ROW><id>14362003</id><snippet>#includes &lt;iostream&gt;</snippet></ROW><ROW><id>14362003</id><snippet>/usr/include/python2.6/pyconfig.h</snippet></ROW><ROW><id>14362003</id><snippet>/* Define to activate Unix95-and-earlier features */
#define _XOPEN_SOURCE_EXTENDED 1
</snippet></ROW><ROW><id>14362142</id><snippet>datetime.timedelta()</snippet></ROW><ROW><id>14362142</id><snippet>tomorrow = datetime.date.today() + datetime.timedelta(days=1)
</snippet></ROW><ROW><id>14362142</id><snippet>date()</snippet></ROW><ROW><id>14362142</id><snippet>timedelta()</snippet></ROW><ROW><id>14362142</id><snippet>.days</snippet></ROW><ROW><id>14362296</id><snippet>inx = [2,1,1,1,4,3,1,1,3,1,2,1,1,1,4,3,1,1,3,1,2,1,1,1,2,3,1,1,3,1]
</snippet></ROW><ROW><id>14362296</id><snippet>inx.count(2)
</snippet></ROW><ROW><id>14362296</id><snippet>list_a = [1]*inx.count(1)
list_b = [1]*inx.count(2)
list_c = [1]*inx.count(3)
</snippet></ROW><ROW><id>14362296</id><snippet>from collections import defaultdict
d = defaultdict(list)
for item in inx:
    d[item].append(1)
</snippet></ROW><ROW><id>14362296</id><snippet>list_a</snippet></ROW><ROW><id>14362296</id><snippet>d[1]</snippet></ROW><ROW><id>14362296</id><snippet>list_b</snippet></ROW><ROW><id>14362296</id><snippet>d[2]</snippet></ROW><ROW><id>14362296</id><snippet>collections.Counter</snippet></ROW><ROW><id>14362296</id><snippet>from collections import Counter #python2.7+
counts = Counter(inx)
list_a = [1]*counts[1]
list_b = [1]*counts[2]
...
</snippet></ROW><ROW><id>14362380</id><snippet>self.rightBT3.curselection()</snippet></ROW><ROW><id>14362380</id><snippet>get()</snippet></ROW><ROW><id>14362468</id><snippet>import numpy as np
import sklearn.tree
clf = sklearn.tree.DecisionTreeClassifier()
clf.fit(X,y)
clf.tree_.apply(np.asfortranarray(X.astype(sklearn.tree._tree.DTYPE)))
</snippet></ROW><ROW><id>14362575</id><snippet>Y</snippet></ROW><ROW><id>14362575</id><snippet>temp2</snippet></ROW><ROW><id>14362575</id><snippet>y_key = None
for d, p in zip(temp_list, temp_search_list):
    temp2[d].add(p)
    if p == 'Y':
        y_key = d
</snippet></ROW><ROW><id>14362575</id><snippet>set.difference_update()</snippet></ROW><ROW><id>14362575</id><snippet>y_values = temp2[y_key]
for test_d, test_p in temp2.iteritems():
    if test_d == y_key:
        continue
    y_values.difference_update(test_p)
</snippet></ROW><ROW><id>14362575</id><snippet>temp2</snippet></ROW><ROW><id>14362575</id><snippet>y_key</snippet></ROW><ROW><id>14362575</id><snippet>temp2</snippet></ROW><ROW><id>14362575</id><snippet>&gt;&gt;&gt; temp2 = {'0.1995': set(['X7:GATE', 'X3:GATE', 'IN1']), '0.199533': set(['X4:GATE', 'X8:GATE', 'IN2']), '0.399': set(['X3:GATE', 'X5:GATE', 'X1:GATE', 'IN0', 'X4:GATE', 'Y', 'X8:GATE'])}
&gt;&gt;&gt; y_key = '0.399'
&gt;&gt;&gt; y_values = temp2[y_key]
&gt;&gt;&gt; for test_d, test_p in temp2.iteritems():
...     if test_d == y_key:
...         continue
...     y_values.difference_update(test_p)
... 
&gt;&gt;&gt; temp2
{'0.1995': set(['X7:GATE', 'X3:GATE', 'IN1']), '0.199533': set(['X4:GATE', 'X8:GATE', 'IN2']), '0.399': set(['X5:GATE', 'X1:GATE', 'IN0', 'Y'])}
</snippet></ROW><ROW><id>14362575</id><snippet>X3:GATE</snippet></ROW><ROW><id>14362575</id><snippet>X4:GATE</snippet></ROW><ROW><id>14362575</id><snippet>X8:GATE</snippet></ROW><ROW><id>14362575</id><snippet>0.399</snippet></ROW><ROW><id>14362723</id><snippet>add_ref</snippet></ROW><ROW><id>14362723</id><snippet>remove_ref</snippet></ROW><ROW><id>14362723</id><snippet>remove_ref</snippet></ROW><ROW><id>14362723</id><snippet>selfptr = NULL</snippet></ROW><ROW><id>14362723</id><snippet>Py_XDECREF</snippet></ROW><ROW><id>14362723</id><snippet>Py_CLEAR</snippet></ROW><ROW><id>14363036</id><snippet>PIDHandlers</snippet></ROW><ROW><id>14363036</id><snippet>dict</snippet></ROW><ROW><id>14363036</id><snippet>get</snippet></ROW><ROW><id>14363036</id><snippet>PIDHandlers[headers.PID]</snippet></ROW><ROW><id>14363036</id><snippet>headers.PID</snippet></ROW><ROW><id>14363036</id><snippet>PIDHandlers.keys()</snippet></ROW><ROW><id>14363036</id><snippet>None</snippet></ROW><ROW><id>14363036</id><snippet>get</snippet></ROW><ROW><id>14363036</id><snippet>dict</snippet></ROW><ROW><id>14363036</id><snippet>KeyError</snippet></ROW><ROW><id>14363098</id><snippet>globals</snippet></ROW><ROW><id>14363098</id><snippet>a = 1
globals()['a'] = 2
print a  #2
globals()['a_in'] = 2
print a_in  #2
</snippet></ROW><ROW><id>14363098</id><snippet>def do_something_with_globals(**kwargs):
    for k,v in kwargs.items():
        globals()[k+'_in'] = v
</snippet></ROW><ROW><id>14363098</id><snippet>a = 1
b = 2
do_something_with_globals(a=a,b=b)
print a_in
print b_in
</snippet></ROW><ROW><id>14363666</id><snippet>date: 1-15-2013, error: mildly_annoying, line: 121
date: 1-16-2013, error: err_something_bad, line: 123
</snippet></ROW><ROW><id>14363666</id><snippet>line.split('#')</snippet></ROW><ROW><id>14363666</id><snippet>line.split(':')</snippet></ROW><ROW><id>14363666</id><snippet>import re
numbers = []
for line in log:
    digit_match = re.search("(\d+)$", line)
    if digit_match is not None:
        numbers.append(int(digit_match.group(1)))
</snippet></ROW><ROW><id>14363666</id><snippet>"(\d+)$"</snippet></ROW><ROW><id>14363666</id><snippet>group(1)</snippet></ROW><ROW><id>14363666</id><snippet>"Line:\s*(\d+)"</snippet></ROW><ROW><id>14363835</id><snippet>value.func.attr</snippet></ROW><ROW><id>14363835</id><snippet>&gt;&gt;&gt; root = compile(open('codefile.py').read(), 'codefile.py', 'exec', _ast.PyCF_ONLY_AST)
&gt;&gt;&gt; root.body[1].body[0].value.func
&lt;_ast.Attribute object at 0x9703acc&gt;
&gt;&gt;&gt; f = root.body[1].body[0].value.func
&gt;&gt;&gt; vars(f)
{'col_offset': 4, 'ctx': &lt;_ast.Load object at 0xb6e2c6cc&gt;, 'attr': 'bar', 'value': &lt;_ast.Name object at 0x9703a8c&gt;, 'lineno': 3}
&gt;&gt;&gt; f.attr
'bar'
&gt;&gt;&gt; f.value.id
'somemod'
</snippet></ROW><ROW><id>14363882</id><snippet>  def ints(filename):
        """A function that takes the filename of a file as an input arguement, computs and returns a list of
        integers of all the numbers in the file."""
        a = []
        f = open(filename, "r")
        lines = f.readlines()
        f.close()
        for line in lines:
            for character in line:
                try:
                    a.append(int(character))
                except ValueError:
                    pass
        return a
</snippet></ROW><ROW><id>14363883</id><snippet>'24 139 277'</snippet></ROW><ROW><id>14363883</id><snippet>&lt;=</snippet></ROW><ROW><id>14363883</id><snippet>set(['24', '139', '277'])</snippet></ROW><ROW><id>14363883</id><snippet>In [20]: strings = [frozenset(s.split()) for s in strings]    
In [21]: strings
Out[21]: 
[frozenset(['24']),
 frozenset(['277']),
 ...
 frozenset(['136', '139']),
 frozenset(['246'])]
</snippet></ROW><ROW><id>14363883</id><snippet>In [22]: frozenset(['136']) &lt;= frozenset(['136', '139', '24'])
Out[22]: True

In [23]: frozenset(['136']) &lt;= frozenset(['24', '277'])
Out[23]: False
</snippet></ROW><ROW><id>14363883</id><snippet>superstrings = set()</snippet></ROW><ROW><id>14363883</id><snippet>for s in strings</snippet></ROW><ROW><id>14363883</id><snippet>s</snippet></ROW><ROW><id>14363883</id><snippet>strings</snippet></ROW><ROW><id>14363883</id><snippet>superstrings</snippet></ROW><ROW><id>14363883</id><snippet>superstrings</snippet></ROW><ROW><id>14363883</id><snippet>s</snippet></ROW><ROW><id>14363883</id><snippet>superstrings</snippet></ROW><ROW><id>14363883</id><snippet>for sup in superstrings</snippet></ROW><ROW><id>14363883</id><snippet>s &lt;= sup</snippet></ROW><ROW><id>14363883</id><snippet>s</snippet></ROW><ROW><id>14363883</id><snippet>sup</snippet></ROW><ROW><id>14363883</id><snippet>s</snippet></ROW><ROW><id>14363883</id><snippet>sup &lt;= s</snippet></ROW><ROW><id>14363883</id><snippet>s</snippet></ROW><ROW><id>14363883</id><snippet>superstrings</snippet></ROW><ROW><id>14363883</id><snippet>superstrings</snippet></ROW><ROW><id>14363883</id><snippet>s</snippet></ROW><ROW><id>14363883</id><snippet>superstrings</snippet></ROW><ROW><id>14363883</id><snippet>superstrings</snippet></ROW><ROW><id>14363883</id><snippet>for sup in superstrings.copy():
</snippet></ROW><ROW><id>14363883</id><snippet>superstrings</snippet></ROW><ROW><id>14363883</id><snippet>strings</snippet></ROW><ROW><id>14363883</id><snippet>frozensets</snippet></ROW><ROW><id>14363883</id><snippet>strings = [
    '24', '277', '277 24', '139 24', '139 277 24', '139 277', '139', '136 24',
    '136 277 24', '136 277', '136', '136 139 24', '136 139 277 24', '136 139 277',
    '136 139', '246']

def find_supersets(strings):
    superstrings = set()
    set_to_string = dict(zip([frozenset(s.split()) for s in strings], strings))
    for s in set_to_string.keys():
        for sup in superstrings.copy():
            if s &lt;= sup:
                # print('{s!r} &lt;= {sup!r}'.format(s = s, sup = sup))
                break
            elif sup &lt; s:
                # print('{sup!r} &lt;= {s!r}'.format(s = s, sup = sup))
                superstrings.remove(sup)
        else:
            superstrings.add(s)
    return [set_to_string[sup] for sup in superstrings]

print(find_supersets(strings))
</snippet></ROW><ROW><id>14363883</id><snippet>['136 139 277 24', '246']
</snippet></ROW><ROW><id>14363883</id><snippet>def using_sorted(strings):
    stsets = sorted(
        (frozenset(s.split()) for s in strings), key=len, reverse=True)
    superstrings = set()
    for stset in stsets:
        if not any(stset.issubset(s) for s in superstrings):
            superstrings.add(stset)
    return superstrings

In [29]: timeit find_supersets(strings)
100000 loops, best of 3: 18.3 us per loop
In [25]: timeit using_sorted(strings)
10000 loops, best of 3: 24.9 us per loop
</snippet></ROW><ROW><id>14363901</id><snippet>k</snippet></ROW><ROW><id>14363901</id><snippet>k</snippet></ROW><ROW><id>14363901</id><snippet>k+1</snippet></ROW><ROW><id>14363901</id><snippet>k+2</snippet></ROW><ROW><id>14364105</id><snippet>Logger.propagate
</snippet></ROW><ROW><id>14364105</id><snippet>NullHandler()</snippet></ROW><ROW><id>14364105</id><snippet>import your_module # in the main application

your_module.get_logger().log_to_file(filename) # without this line your module
                                               # shouldn't create debug files
...
your_module.some_function()
</snippet></ROW><ROW><id>14364105</id><snippet>''</snippet></ROW><ROW><id>14364105</id><snippet>'a.b'</snippet></ROW><ROW><id>14364105</id><snippet>'a'</snippet></ROW><ROW><id>14364620</id><snippet>-O</snippet></ROW><ROW><id>14364620</id><snippet>wget -O file http://foo</snippet></ROW><ROW><id>14364620</id><snippet>wget -O - http://foo &gt; file</snippet></ROW><ROW><id>14364672</id><snippet>&lt;proj:project xmlns:proj="http://maven.apache.org/POM/4.0.0" 
xmlns:other="http://maven.apache.org/POM/5.0.0"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
</snippet></ROW><ROW><id>14364672</id><snippet>proj</snippet></ROW><ROW><id>14364672</id><snippet>version = root.find('./*[local-name() = "version"]')
</snippet></ROW><ROW><id>14364672</id><snippet>namespaces = root.findall('//namespace::*')
</snippet></ROW><ROW><id>14364956</id><snippet>mysql.connector.connect(...)</snippet></ROW><ROW><id>14364956</id><snippet>mysql.connector(...)</snippet></ROW><ROW><id>14365086</id><snippet>ndarray</snippet></ROW><ROW><id>14365086</id><snippet>&gt;&gt;&gt; gray = img[:,:,0]
</snippet></ROW><ROW><id>14365294</id><snippet>mysql.connector</snippet></ROW><ROW><id>14365475</id><snippet>Index</snippet></ROW><ROW><id>14365475</id><snippet>ols</snippet></ROW><ROW><id>14365475</id><snippet>Series</snippet></ROW><ROW><id>14365475</id><snippet>In [153]: ts
Out[153]: 
2011-01-01 00:00:00    19.828763
2011-01-01 01:00:00    20.112191
2011-01-01 02:00:00    19.509116
Freq: H, Name: 1

In [158]: type(ts.index)
Out[158]: pandas.tseries.index.DatetimeIndex


In [154]: df = ts.reset_index()

In [155]: df
Out[155]: 
                index          1
0 2011-01-01 00:00:00  19.828763
1 2011-01-01 01:00:00  20.112191
2 2011-01-01 02:00:00  19.509116

In [160]: type(df['index'])
Out[160]: pandas.core.series.Series


In [156]: model = pd.ols(y=df[1], x=df['index'], intercept=True)

In [163]: model
Out[163]: 

-------------------------Summary of Regression Analysis-------------------------

Formula: Y ~ &lt;x&gt; + &lt;intercept&gt;

Number of Observations:         3
Number of Degrees of Freedom:   1

R-squared:        -0.0002
Adj R-squared:    -0.0002

Rmse:              0.3017

F-stat (1, 2):       -inf, p-value:     1.0000

Degrees of Freedom: model 0, resid 2

-----------------------Summary of Estimated Coefficients------------------------
      Variable       Coef    Std Err     t-stat    p-value    CI 2.5%   CI 97.5%
--------------------------------------------------------------------------------
             x     0.0000     0.0000       0.00     0.9998    -0.0000     0.0000
     intercept     0.0000 76683.4934       0.00     1.0000 -150299.6471 150299.6471
---------------------------------End of Summary---------------------------------
</snippet></ROW><ROW><id>14365647</id><snippet>import pandas as pd
print pd.read_csv('value.txt')

        Date    price  factor_1  factor_2
0  2012-06-11  1600.20     1.255     1.548
1  2012-06-12  1610.02     1.258     1.554
2  2012-06-13  1618.07     1.249     1.552
3  2012-06-14  1624.40     1.253     1.556
4  2012-06-15  1626.15     1.258     1.552
5  2012-06-16  1626.15     1.263     1.558
6  2012-06-17  1626.15     1.264     1.572
</snippet></ROW><ROW><id>14365647</id><snippet>R's</snippet></ROW><ROW><id>14365737</id><snippet>None</snippet></ROW><ROW><id>14365737</id><snippet>glDrawElements</snippet></ROW><ROW><id>14365737</id><snippet>0</snippet></ROW><ROW><id>14365737</id><snippet>from OpenGL.GL import shaders
from OpenGL.arrays import vbo
from OpenGL.GL import *
from OpenGL.raw.GL.ARB.vertex_array_object import glGenVertexArrays, \
                                                  glBindVertexArray

import pygame

import numpy as np

def run():
    pygame.init()
    screen = pygame.display.set_mode((800,600), pygame.OPENGL|pygame.DOUBLEBUF)

    #Create the VBO
    vertices = np.array([[0,1,0],[-1,-1,0],[1,-1,0]], dtype='f')
    vertexPositions = vbo.VBO(vertices)

    #Create the index buffer object
    indices = np.array([[0,1,2]], dtype=np.int32)
    indexPositions = vbo.VBO(indices, target=GL_ELEMENT_ARRAY_BUFFER)

    #Now create the shaders
    VERTEX_SHADER = shaders.compileShader("""
    #version 330
    layout(location = 0) in vec4 position;
    void main()
    {
        gl_Position = position;
    }
    """, GL_VERTEX_SHADER)

    FRAGMENT_SHADER = shaders.compileShader("""
    #version 330
    out vec4 outputColor;
    void main()
    {
        outputColor = vec4(0.0f, 1.0f, 0.0f, 1.0f);
    }
    """, GL_FRAGMENT_SHADER)

    shader = shaders.compileProgram(VERTEX_SHADER, FRAGMENT_SHADER)

    #The draw loop
    while True:
        glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)
        glUseProgram(shader)

        indexPositions.bind()

        vertexPositions.bind()
        glEnableVertexAttribArray(0);
        glVertexAttribPointer(0, 3, GL_FLOAT, False, 0, None)

        #glDrawArrays(GL_TRIANGLES, 0, 3) #This line still works
        glDrawElements(GL_TRIANGLES, 3, GL_UNSIGNED_INT, None) #This line does work too!

        # Show the screen
        pygame.display.flip()

run()
</snippet></ROW><ROW><id>14365798</id><snippet>{{ form.instance.resized_img }}</snippet></ROW><ROW><id>14365871</id><snippet>np.where</snippet></ROW><ROW><id>14365871</id><snippet>data = np.where(data &lt; 1e-35,1e-35,data)
</snippet></ROW><ROW><id>14365871</id><snippet>data[ data &lt; 1e-35 ] = 1e-35
</snippet></ROW><ROW><id>14366018</id><snippet>import os
import os.path

def get_files(folder_path):
    return [f for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f))]
</snippet></ROW><ROW><id>14366018</id><snippet>The C11 is 180.1265465616</snippet></ROW><ROW><id>14366018</id><snippet>get_line</snippet></ROW><ROW><id>14366018</id><snippet>def get_numbers():
    numbers = []
    for file in get_files('folder'):
        line = get_line(file)
        components = line.split(' ')
        number = float(components[-1])
        numbers.append(number)
    return numbers
</snippet></ROW><ROW><id>14366146</id><snippet>[ d for d in dict_list if d["START"] == "Virginia" and d["END"] == "Boston" ]
</snippet></ROW><ROW><id>14366146</id><snippet>next</snippet></ROW><ROW><id>14366146</id><snippet>trip = next( d for d in dict_list 
               if d["START"] == "Virginia" and d["END"] == "Boston" )
</snippet></ROW><ROW><id>14366146</id><snippet>trip["Num"] = trip["Num"] + 1
</snippet></ROW><ROW><id>14366146</id><snippet>print(dict_list[2]["Num"])    # 2
</snippet></ROW><ROW><id>14366146</id><snippet>if</snippet></ROW><ROW><id>14366146</id><snippet>search = { "START": "Virginia", "END": "Boston" }
trip = next(d for d in dict_list if all(i in d.items() for i in search.items()))
</snippet></ROW><ROW><id>14366363</id><snippet>str.strip()</snippet></ROW><ROW><id>14366363</id><snippet>str.strip()</snippet></ROW><ROW><id>14366363</id><snippet>&gt;&gt;&gt; productDictionary={'': '34.8\r\n', 
  'Mozzarella di Giovanni\r\n': '34.8\r\n', 
   'Queso Cabrales\r\n': '14\r\n', 
   'Singaporean Hokkien Fried Mee\r\n': '9.8\r\n'
}

&gt;&gt;&gt; productDictionary=dict(map(str.strip,x) for x in productDictionary.items()) 
&gt;&gt;&gt; print productDictionary
&gt;&gt;&gt;
{'': '34.8',
 'Mozzarella di Giovanni': '34.8',
 'Queso Cabrales': '14',
 'Singaporean Hokkien Fried Mee': '9.8'}
</snippet></ROW><ROW><id>14366363</id><snippet>help()</snippet></ROW><ROW><id>14366363</id><snippet>str.strip()</snippet></ROW><ROW><id>14366522</id><snippet>next(x for x in lst if matchCondition(x)) 
</snippet></ROW><ROW><id>14366522</id><snippet>StopIteration</snippet></ROW><ROW><id>14366522</id><snippet>next</snippet></ROW><ROW><id>14366522</id><snippet>next((x for x in lst if matchCondition(x)), None)
</snippet></ROW><ROW><id>14366522</id><snippet>None</snippet></ROW><ROW><id>14366522</id><snippet>&gt;&gt;&gt; next(x for x in range(10) if x == 7)  #This is a silly way to write 7 ...
7
&gt;&gt;&gt; next(x for x in range(10) if x == 11)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
&gt;&gt;&gt; next((x for x in range(10) if x == 7), None)
7
&gt;&gt;&gt; print next((x for x in range(10) if x == 11), None)
None
</snippet></ROW><ROW><id>14366522</id><snippet>filter</snippet></ROW><ROW><id>14366522</id><snippet>all_matching = filter(matchCondition,lst)
</snippet></ROW><ROW><id>14366532</id><snippet>import re

text = r'''"This is a string with an \"escaped quote\" inside it". While ""===r?+r:wt.test(r)?st.parseJSON(r)    :r}catch(o){}st.data(e,n,r)}else r=t}return r}function s(e){var t;for(t in e)if(("data" '''

for match in (re.findall(r'''(?x)   # verbose mode
    (?&lt;!\\)    # not preceded by a backslash
    "          # a literal double-quote
    .*?        # 1-or-more characters
    (?&lt;!\\)    # not preceded by a backslash
    "          # a literal double-quote
    ''', text)):
    print(match)
</snippet></ROW><ROW><id>14366532</id><snippet>"This is a string with an \"escaped quote\" inside it"
""
"data"
</snippet></ROW><ROW><id>14366532</id><snippet>.+?</snippet></ROW><ROW><id>14366574</id><snippet>def wrapper(*args):
    process = Popen(list(args), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    return stdout, stderr
</snippet></ROW><ROW><id>14366574</id><snippet>stdout</snippet></ROW><ROW><id>14366574</id><snippet>stderr</snippet></ROW><ROW><id>14366574</id><snippet>process</snippet></ROW><ROW><id>14366756</id><snippet>r = chain(hello.s(), hey.s())()

r.parent.get(timeout=1)
r.parent.parent.get(timeout=1)

first = r
while first.parent:
    first = first.parent
</snippet></ROW><ROW><id>14366769</id><snippet>re</snippet></ROW><ROW><id>14366769</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'N1B N 1.2620(4) 0.3320(4) 0.0049(7)'
&gt;&gt;&gt; re.sub('\(.*?\)', '', s)
'N1B N 1.2620 0.3320 0.0049'
</snippet></ROW><ROW><id>14366769</id><snippet>?</snippet></ROW><ROW><id>14366769</id><snippet>&gt;&gt;&gt; re.sub('\(.*\)', '', s)
'N1B N 1.2620'
</snippet></ROW><ROW><id>14366769</id><snippet>\d</snippet></ROW><ROW><id>14366769</id><snippet>.</snippet></ROW><ROW><id>14366769</id><snippet>&gt;&gt;&gt; s = 'N1B N 1.2620(spam) 0.3320(4) 0.0049(7)'
&gt;&gt;&gt; re.sub('\(\d*?\)', '', s)
'N1B N 1.2620(spam) 0.3320 0.0049'
</snippet></ROW><ROW><id>14366842</id><snippet>wx.SizerItem</snippet></ROW><ROW><id>14366842</id><snippet>GetWindow</snippet></ROW><ROW><id>14366842</id><snippet>IsWindow</snippet></ROW><ROW><id>14366842</id><snippet>wx.Window</snippet></ROW><ROW><id>14366842</id><snippet>obj</snippet></ROW><ROW><id>14366842</id><snippet>wx.Frame</snippet></ROW><ROW><id>14366842</id><snippet>&gt;&gt;&gt; obj
&lt;main.views.Main; proxy of &lt;Swig Object of type 'wxFrame *' at 0x7fbaa1c70820&gt; &gt;
&gt;&gt;&gt; obj.Sizer
&lt;wx._core.BoxSizer; proxy of &lt;Swig Object of type 'wxBoxSizer *' at 0x7fba9c9d48d0&gt; &gt;
&gt;&gt;&gt; obj.Sizer.Children
wxSizerItemList: [&lt;wx._core.SizerItem; proxy of &lt;Swig Object of type 'wxSizerItem *' at 0x7fbaa1c21630&gt; &gt;, &lt;wx._core.SizerItem; proxy of &lt;Swig Object of type 'wxSizerItem *' at 0x7fbaa1c7faf0&gt; &gt;]
&gt;&gt;&gt; obj.Sizer.Children[0]
&lt;wx._core.SizerItem; proxy of &lt;Swig Object of type 'wxSizerItem *' at 0x7fbaa1c21630&gt; &gt;
&gt;&gt;&gt; obj.Sizer.Children[0].Window
&lt;wx._windows.Panel; proxy of &lt;Swig Object of type 'wxPanel *' at 0x7fba9c9d4d10&gt; &gt;
</snippet></ROW><ROW><id>14366925</id><snippet>name = "John"
idd = 11
person = Person(name, idd)
new_key = person.put()
auto_assigned_id = new_key.id()
</snippet></ROW><ROW><id>14366925</id><snippet>sandy_key = sandy.put()</snippet></ROW><ROW><id>14367009</id><snippet>list.sort();
list.unique();
</snippet></ROW><ROW><id>14367009</id><snippet>for (auto it = list.begin(), eit = list.end(); it != eit; ) {
    if (std::count(it, eit, *it) &gt; 1)
        it = list.erase(it);
    else
        ++it;
}
</snippet></ROW><ROW><id>14367079</id><snippet>from couchdb.client...</snippet></ROW><ROW><id>14367079</id><snippet>offers.</snippet></ROW><ROW><id>14367079</id><snippet>couchdb</snippet></ROW><ROW><id>14367079</id><snippet>offers/couchdb.py</snippet></ROW><ROW><id>14367079</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>14367079</id><snippet>couchdb</snippet></ROW><ROW><id>14367079</id><snippet>offers/</snippet></ROW><ROW><id>14367079</id><snippet>-m</snippet></ROW><ROW><id>14367079</id><snippet>python -m offers.couchdb
</snippet></ROW><ROW><id>14367079</id><snippet>couchdb.py</snippet></ROW><ROW><id>14367260</id><snippet>def initialize():
    return MyTestCase
</snippet></ROW><ROW><id>14367455</id><snippet>json</snippet></ROW><ROW><id>14367455</id><snippet>unicode</snippet></ROW><ROW><id>14367455</id><snippet>import json

json.loads(input).encode('utf8')
</snippet></ROW><ROW><id>14367455</id><snippet>unicode-escape</snippet></ROW><ROW><id>14367455</id><snippet>&gt;&gt;&gt; json.loads(r'"\u201cquotes\u201d"').encode('utf8')
'\xe2\x80\x9cquotes\xe2\x80\x9d'
&gt;&gt;&gt; json.loads(r'"foo\r\nbar"').encode('utf8')
'foo\r\nbar'
</snippet></ROW><ROW><id>14367455</id><snippet>\r</snippet></ROW><ROW><id>14367455</id><snippet>\n</snippet></ROW><ROW><id>14367455</id><snippet>\uabcd</snippet></ROW><ROW><id>14367455</id><snippet>import re

codepoint = re.compile(r'(\\u[0-9a-fA-F]{4})')
def replace(match):
    return unichr(int(match.group(1)[2:], 16))

codepoint.sub(replace, text).encode('utf8')
</snippet></ROW><ROW><id>14367455</id><snippet>&gt;&gt;&gt; codepoint.sub(replace, r'\u201cquotes\u201d').encode('utf8')
'\xe2\x80\x9cquotes\xe2\x80\x9d'
&gt;&gt;&gt; codepoint.sub(replace, r'"foo\r\nbar"').encode('utf8')
'"foo\\r\\nbar"'
</snippet></ROW><ROW><id>14367565</id><snippet>def round_up(value, multiple):
    return multiple * math.ceil(float(value) / multiple)

def digits(value):
    return int(math.log(value, 10)) + 1

def round_price(value):
    if value &lt; 10000:
        return int(round_up(value, 1000))
    d = digits(value)
    new_value = int(round_up(value, 10 ** (d - 2)))
    new_value -= 10 ** (d - 3)
    return new_value
</snippet></ROW><ROW><id>14367794</id><snippet>raise info 'license_row_id := %', rec.license_row_id;
</snippet></ROW><ROW><id>14367863</id><snippet>pip</snippet></ROW><ROW><id>14367863</id><snippet>pip install -U scikit-learn</snippet></ROW><ROW><id>14368137</id><snippet>.__name__</snippet></ROW><ROW><id>14368137</id><snippet>&gt;&gt;&gt; def foo(): pass
...
&gt;&gt;&gt; foo.__name__
'foo'
&gt;&gt;&gt; bar = foo
&gt;&gt;&gt; bar.__name__
'foo'
</snippet></ROW><ROW><id>14368137</id><snippet>inspect</snippet></ROW><ROW><id>14368137</id><snippet>functools.wraps</snippet></ROW><ROW><id>14368174</id><snippet>KEY()</snippet></ROW><ROW><id>14368174</id><snippet>db.Key</snippet></ROW><ROW><id>14368174</id><snippet>Expected an integer id or string name as argument 2; 
received datastore_types.Key.from_path(u'Tutorial', ...)
</snippet></ROW><ROW><id>14368174</id><snippet>tutorial</snippet></ROW><ROW><id>14368174</id><snippet>Chapter</snippet></ROW><ROW><id>14368174</id><snippet>__key__</snippet></ROW><ROW><id>14368174</id><snippet>db.Key</snippet></ROW><ROW><id>14368174</id><snippet>chaps = db.GqlQuery("SELECT * FROM Chapter " +
                        "WHERE tutorial = :1", tut)
</snippet></ROW><ROW><id>14368174</id><snippet>chaps = db.GqlQuery("SELECT * FROM Chapter " +
                        "WHERE tutorial = KEY('Tutorial', :1)", tut.id() or tut.name())
</snippet></ROW><ROW><id>14368418</id><snippet>DateTimeField</snippet></ROW><ROW><id>14368418</id><snippet>Timestamp</snippet></ROW><ROW><id>14368418</id><snippet>./manage.py sqlall &lt;appname&gt;</snippet></ROW><ROW><id>14368418</id><snippet>timestamp</snippet></ROW><ROW><id>14368418</id><snippet>The TIMESTAMP data type is used for values that contain both date and time parts. TIMESTAMP has a range of '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTC.
</snippet></ROW><ROW><id>14368418</id><snippet>Noted in 5.6.4 changelog.

MySQL now supports fractional seconds for TIME, DATETIME, and
TIMESTAMP values, with up to microsecond precision.
</snippet></ROW><ROW><id>14368421</id><snippet>from sys import path as syspath
syspath.append(path.join(path.dirname(__file__), 'lib'))
</snippet></ROW><ROW><id>14368421</id><snippet>setup.py build</snippet></ROW><ROW><id>14368424</id><snippet>self</snippet></ROW><ROW><id>14368424</id><snippet>self</snippet></ROW><ROW><id>14368424</id><snippet>class A:
    def __init__(self):
        self.a = 1
        self.b = 2
        self.c = 3
    def seta(self):
        def afunction():  # no self here
            self.a = 4
        afunction()       # have to call the function
    def geta(self):
        return self.a
</snippet></ROW><ROW><id>14368513</id><snippet>requirements.txt</snippet></ROW><ROW><id>14368513</id><snippet>pip</snippet></ROW><ROW><id>14368513</id><snippet>git+git://github.com/bradwhittington/django-templated-email.git/62a291004cb21e50409b276bcbd79ae9808aace9
</snippet></ROW><ROW><id>14368542</id><snippet>str(row[0])</snippet></ROW><ROW><id>14368542</id><snippet>unicode(row[0])</snippet></ROW><ROW><id>14368542</id><snippet>unicode</snippet></ROW><ROW><id>14368542</id><snippet>str</snippet></ROW><ROW><id>14368542</id><snippet>row[0], row[1], row[2]</snippet></ROW><ROW><id>14368542</id><snippet>row[0].encode('utf8')</snippet></ROW><ROW><id>14368550</id><snippet>request.path</snippet></ROW><ROW><id>14368550</id><snippet>request.endpoint</snippet></ROW><ROW><id>14368550</id><snippet>@app.before_request
def before_request():
    if 'logged_in' not in session and request.endpoint != 'login':
        ...
</snippet></ROW><ROW><id>14368662</id><snippet>Bad Request</snippet></ROW><ROW><id>14368662</id><snippet>request.form['organization_id']</snippet></ROW><ROW><id>14368662</id><snippet>organization_id</snippet></ROW><ROW><id>14368662</id><snippet>None</snippet></ROW><ROW><id>14368662</id><snippet>organization_id</snippet></ROW><ROW><id>14368662</id><snippet>survey()</snippet></ROW><ROW><id>14368662</id><snippet>session</snippet></ROW><ROW><id>14368912</id><snippet>from django.template.defaultfilters import slugify
slugify("My Product 2.0")   # 'my-product-20'
</snippet></ROW><ROW><id>14368912</id><snippet>django.utils.text</snippet></ROW><ROW><id>14369192</id><snippet>myThread</snippet></ROW><ROW><id>14369192</id><snippet>timerThread</snippet></ROW><ROW><id>14369192</id><snippet>run</snippet></ROW><ROW><id>14369192</id><snippet>timeElapsed</snippet></ROW><ROW><id>14369192</id><snippet>timerThread</snippet></ROW><ROW><id>14369192</id><snippet>timeElapsed</snippet></ROW><ROW><id>14369192</id><snippet>timerThread</snippet></ROW><ROW><id>14369192</id><snippet>while</snippet></ROW><ROW><id>14369192</id><snippet>parent</snippet></ROW><ROW><id>14369192</id><snippet>isRunning</snippet></ROW><ROW><id>14369192</id><snippet>timeElapsed</snippet></ROW><ROW><id>14369192</id><snippet>True</snippet></ROW><ROW><id>14369192</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

import time

from PyQt4 import QtCore, QtGui

class timerThread(QtCore.QThread):
    timeElapsed = QtCore.pyqtSignal(int)

    def __init__(self, parent=None):
        super(timerThread, self).__init__(parent)
        self.timeStart = None

    def start(self, timeStart):
        self.timeStart = timeStart

        return super(timerThread, self).start()

    def run(self):
        while self.parent().isRunning():
            self.timeElapsed.emit(time.time() - self.timeStart)
            time.sleep(1)


class myThread(QtCore.QThread):
    timeElapsed = QtCore.pyqtSignal(int)
    def __init__(self, parent=None):
        super(myThread, self).__init__(parent)

        self.timerThread = timerThread(self)
        self.timerThread.timeElapsed.connect(self.timeElapsed.emit)

    def run(self):
        self.timerThread.start(time.time())

        iterations = 3
        while iterations:
            print "Running {0}".format(self.__class__.__name__)
            iterations -= 1
            time.sleep(2)        


class myWindow(QtGui.QWidget):    
    def __init__(self):
        super(myWindow, self).__init__() 

        self.button = QtGui.QPushButton(self)
        self.button.setText("Start Threading!")
        self.button.clicked.connect(self.on_button_clicked)

        self.label = QtGui.QLabel(self)

        self.layout = QtGui.QVBoxLayout(self)
        self.layout.addWidget(self.button)
        self.layout.addWidget(self.label)

        self.myThread = myThread(self)
        self.myThread.timeElapsed.connect(self.on_myThread_timeElapsed)
        self.myThread.finished.connect(self.on_myThread_finished)

    @QtCore.pyqtSlot()
    def on_button_clicked(self):
        self.myThread.start()

    @QtCore.pyqtSlot(int)
    def on_myThread_timeElapsed(self, seconds):
        self.label.setText("Time Elapsed: {0}".format(seconds))

    @QtCore.pyqtSlot()
    def on_myThread_finished(self):
        print "Done"

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('myWindow')

    main = myWindow()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14369273</id><snippet>N_max,...,N_0,M_max,...,M_1</snippet></ROW><ROW><id>14369273</id><snippet>A dot x == const 1-vector</snippet></ROW><ROW><id>14369273</id><snippet>x</snippet></ROW><ROW><id>14369273</id><snippet>x</snippet></ROW><ROW><id>14369273</id><snippet>N_max,...,N_0,M_max,...,M_1</snippet></ROW><ROW><id>14369273</id><snippet>A</snippet></ROW><ROW><id>14369273</id><snippet>n=50</snippet></ROW><ROW><id>14369273</id><snippet>A</snippet></ROW><ROW><id>14369273</id><snippet>x</snippet></ROW><ROW><id>14369273</id><snippet>n</snippet></ROW><ROW><id>14369273</id><snippet>import numpy as np
import numpy.linalg as linalg


def solve(n):
    # upper left block
    n_to_M = -2. * np.eye(n-1) 

    # lower left block
    n_to_N = (n * np.eye(n-1)) - np.diag(np.arange(n-2, 0, -1), 1)

    # upper right block
    m_to_M = n_to_N.copy()
    m_to_M[1:, 0] = -np.arange(1, n-1)

    # lower right block
    m_to_N = np.zeros((n-1, n-1))
    m_to_N[:,0] = -np.arange(1,n)

    # build A, combine all blocks
    coeff_mat = np.hstack(
                          (np.vstack((n_to_M, n_to_N)),
                           np.vstack((m_to_M, m_to_N))))

    # const vector, right side of eq.
    const = n * np.ones((2 * (n-1),1))

    return linalg.solve(coeff_mat, const)
</snippet></ROW><ROW><id>14369273</id><snippet>from scipy.sparse import spdiags, lil_matrix, vstack, hstack
from scipy.sparse.linalg import spsolve
import numpy as np


def solve(n):
    nrange = np.arange(n)
    diag = np.ones(n-1)

    # upper left block
    n_to_M = spdiags(-2. * diag, 0, n-1, n-1)

    # lower left block
    n_to_N = spdiags([n * diag, -nrange[-1:0:-1]], [0, 1], n-1, n-1)

    # upper right block
    m_to_M = lil_matrix(n_to_N)
    m_to_M[1:, 0] = -nrange[1:-1].reshape((n-2, 1))

    # lower right block
    m_to_N = lil_matrix((n-1, n-1))
    m_to_N[:, 0] = -nrange[1:].reshape((n-1, 1))

    # build A, combine all blocks
    coeff_mat = hstack(
                       (vstack((n_to_M, n_to_N)),
                        vstack((m_to_M, m_to_N))))

    # const vector, right side of eq.
    const = n * np.ones((2 * (n-1),1))

    return spsolve(coeff_mat.tocsr(), const).reshape((-1,1))
</snippet></ROW><ROW><id>14369273</id><snippet>n=4</snippet></ROW><ROW><id>14369273</id><snippet>[[ 7.25      ]
 [ 7.76315789]
 [ 8.10526316]
 [ 9.47368421]   # &lt;&lt;&lt; your result
 [ 9.69736842]
 [ 9.78947368]]
</snippet></ROW><ROW><id>14369273</id><snippet>n=10</snippet></ROW><ROW><id>14369273</id><snippet>[[ 24.778976  ]
 [ 25.85117842]
 [ 26.65015984]
 [ 27.26010007]
 [ 27.73593401]
 [ 28.11441922]
 [ 28.42073207]
 [ 28.67249606]
 [ 28.88229939]
 [ 30.98033266]  # &lt;&lt;&lt; your result
 [ 31.28067182]
 [ 31.44628982]
 [ 31.53365219]
 [ 31.57506477]
 [ 31.58936225]
 [ 31.58770694]
 [ 31.57680467]
 [ 31.560726  ]]
</snippet></ROW><ROW><id>14369282</id><snippet>find /path/to/logfiles/*.gz | parallel python logparser.py
</snippet></ROW><ROW><id>14369282</id><snippet>parallel python logparser.py ::: /path/to/logfiles/*.gz
</snippet></ROW><ROW><id>14369282</id><snippet>-j</snippet></ROW><ROW><id>14369282</id><snippet>-j4</snippet></ROW><ROW><id>14369282</id><snippet>parallel python logparser.py ::: /path/to/logfiles/*.gz ::: 1 2 3
</snippet></ROW><ROW><id>14369282</id><snippet>python logparser.py /path/to/logfiles/A.gz 1
python logparser.py /path/to/logfiles/A.gz 2
python logparser.py /path/to/logfiles/A.gz 3
python logparser.py /path/to/logfiles/B.gz 1
python logparser.py /path/to/logfiles/B.gz 2
python logparser.py /path/to/logfiles/B.gz 3
...
</snippet></ROW><ROW><id>14369289</id><snippet>for n in nodes:
    distance[n] = {}
</snippet></ROW><ROW><id>14369289</id><snippet>for-loop</snippet></ROW><ROW><id>14369289</id><snippet>n</snippet></ROW><ROW><id>14369289</id><snippet>nodes</snippet></ROW><ROW><id>14369289</id><snippet>k</snippet></ROW><ROW><id>14369289</id><snippet>nodes</snippet></ROW><ROW><id>14369289</id><snippet>graph[n][k]</snippet></ROW><ROW><id>14369289</id><snippet>for k in nodes:
    distance[n][k] = graph[n][k]
</snippet></ROW><ROW><id>14369289</id><snippet>nodes</snippet></ROW><ROW><id>14369289</id><snippet>k</snippet></ROW><ROW><id>14369289</id><snippet>graph[n][k]</snippet></ROW><ROW><id>14369289</id><snippet>k</snippet></ROW><ROW><id>14369289</id><snippet>n</snippet></ROW><ROW><id>14369289</id><snippet>k</snippet></ROW><ROW><id>14369289</id><snippet>distance</snippet></ROW><ROW><id>14369289</id><snippet>graph</snippet></ROW><ROW><id>14369289</id><snippet>import copy
distance = copy.deepcopy(graph)
</snippet></ROW><ROW><id>14369380</id><snippet>try-except</snippet></ROW><ROW><id>14369380</id><snippet>try:
    lenRecur(foo)
    lenRecur2(foo)
except NameError:
    pass
</snippet></ROW><ROW><id>14369436</id><snippet>&lt;a href="/tutview?tut_key={{ tut.key().id() }}"&gt;
</snippet></ROW><ROW><id>14369600</id><snippet>newlink = link['href']
# .. make replacements
link['href'] = newlink # store it back
</snippet></ROW><ROW><id>14369600</id><snippet>print(soup.prettify())</snippet></ROW><ROW><id>14369600</id><snippet>htmlDoc.close()

html = soup.prettify("utf-8")
with open("output.html", "wb") as file:
    file.write(html)
</snippet></ROW><ROW><id>14369600</id><snippet>soup.original_encoding</snippet></ROW><ROW><id>14369747</id><snippet>exists</snippet></ROW><ROW><id>14369747</id><snippet>__nonzero__</snippet></ROW><ROW><id>14369747</id><snippet>foos = Foo.objects.filter(bar='baz')

if foos:   # nonzero() calls exists() which causes extra query
           # even though the QS is already going to be evaluated
           # which in my projects is a common pattern. 
   print "Yay for foos!"
   for foo in foos:
       print foo
</snippet></ROW><ROW><id>14369747</id><snippet>__nonzero__</snippet></ROW><ROW><id>14369747</id><snippet>exists</snippet></ROW><ROW><id>14369747</id><snippet>__nonzero__</snippet></ROW><ROW><id>14369747</id><snippet>exists</snippet></ROW><ROW><id>14369747</id><snippet>exists</snippet></ROW><ROW><id>14369747</id><snippet>__nonzero__</snippet></ROW><ROW><id>14369747</id><snippet>exists</snippet></ROW><ROW><id>14369747</id><snippet>exists</snippet></ROW><ROW><id>14369747</id><snippet>__nonzero__</snippet></ROW><ROW><id>14369747</id><snippet>bool( Foo.objects.filter(user=user) )  
# calls __nonzero__, evaluates, converts all fields to python objects 
# and stores in queryset._result_cache


Foo.objects.filter(user=user).exists()
# stores nothing, and query only returns one row.
# less data from DB and less python overhead generating django model instances.
</snippet></ROW><ROW><id>14369844</id><snippet>X.py</snippet></ROW><ROW><id>14369844</id><snippet>import Y
data = Y.load()
.... your code ....
</snippet></ROW><ROW><id>14369844</id><snippet>X.py</snippet></ROW><ROW><id>14369844</id><snippet>X.py</snippet></ROW><ROW><id>14369844</id><snippet>import X</snippet></ROW><ROW><id>14369890</id><snippet>order.events.corporate</snippet></ROW><ROW><id>14369890</id><snippet>AttributeError: Neither 'InstrumentedAttribute' object nor 'Comparator' object associated with Order.events has an attribute 'corporate'
</snippet></ROW><ROW><id>14369890</id><snippet>session.query(Order).filter(and_(EventsAssoc.type=="corporate",Event.name=="Big Corporation"))
</snippet></ROW><ROW><id>14369890</id><snippet>from sqlalchemy import *
from sqlalchemy import create_engine, orm
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship



metadata = MetaData()
Base = declarative_base()
Base.metadata = metadata



class Event(Base):
    __tablename__ = 'event'
    id                  = Column(Integer, Sequence("event_seq"), primary_key=True)
    name                = Column(String(32))
    def __repr__(self):
        return "%s(name=\"%s\",id=\"%s\")" % (self.__class__.__name__,self.name,self.id)


class EventsAssoc(Base):
    __tablename__ = 'events'
    id                  = Column(Integer, Sequence("events_seq"), primary_key=True)
    left_id = Column(Integer, ForeignKey('order.id'))
    right_id = Column(Integer, ForeignKey('event.id'))

#    order_id            = Column(Integer, ForeignKey('order.id'), primary_key=True)
#    event_id            = Column(Integer, ForeignKey('event.id'), primary_key=True)
    type                 = Column(Enum('corporate', 'personal', name='enum_ev_type'))

    event = relationship(Event, backref="order_assocs")

    def __repr__(self):
        return "%s(events=%r,id=\"%s\")" % (self.__class__.__name__,self.event,self.id)


class Order(Base):
    __tablename__ = 'order'
    id                  = Column(Integer, Sequence("order_seq"), primary_key=True)
    name = Column(String(127))
    events = relationship(EventsAssoc)
    def __repr__(self):
        return "%s(name=\"%s\",id=\"%s\")" % (self.__class__.__name__,self.name,self.id)


db = create_engine('sqlite:////temp/test_assoc.db',echo=True)



#making sure we are working with a fresh database
metadata.drop_all(db)
metadata.create_all(db)


sm = orm.sessionmaker(bind=db, autoflush=True, autocommit=True, expire_on_commit=True)
session = orm.scoped_session(sm)

o = Order(name="order1")
ea_corp = EventsAssoc(type="corporate")
ea_corp.event = Event(name="Big Corporation")

ea_pers = EventsAssoc(type="personal")
ea_pers.event = Event(name="Person")


o.events.append(ea_corp)
o.events.append(ea_pers)
session.add(o)
session.flush()

query = session.query(Order).filter(and_(EventsAssoc.type=="corporate",Event.name=="Big Corporation"))

for order in query.all():
    print order
    print order.events
</snippet></ROW><ROW><id>14369890</id><snippet>SELECT "order".id AS order_id, "order".name AS order_name 
FROM "order", events, event 
WHERE events.type = ? AND event.name = ?
('corporate', 'Big Corporation')
</snippet></ROW><ROW><id>14369893</id><snippet>with open('a') as A, open('b') as B:
    while True:
        try:
            lineA1, lineA2, lineB1, lineB2 = next(A), next(A), next(B), next(B)
            # compare lines
            # ...
        except StopIteration:
            break
</snippet></ROW><ROW><id>14369951</id><snippet>f = open(filename, 'wb')</snippet></ROW><ROW><id>14369968</id><snippet>sysconfig.get_platform()</snippet></ROW><ROW><id>14369968</id><snippet>sys.version_info</snippet></ROW><ROW><id>14369968</id><snippet>&gt;&gt;&gt; import sysconfig
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sysconfig.get_platform()
linux-x86_64
&gt;&gt;&gt; sys.version_info[:3]
(2, 7, 2)
</snippet></ROW><ROW><id>14369968</id><snippet>def distutils_dir_name(dname):
    """Returns the name of a distutils build directory"""
    f = "{dirname}.{platform}-{version[0]}.{version[1]}"
    return f.format(dirname=dname,
                    platform=sysconfig.get_platform(),
                    version=sys.version_info)
</snippet></ROW><ROW><id>14369968</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.join('build', distutils_dir_name('lib'))
build/lib.linux-x86_64-2.7
</snippet></ROW><ROW><id>14370038</id><snippet>matplotlib</snippet></ROW><ROW><id>14370038</id><snippet># polar plot
ri, ti = np.mgrid[0:2:100j, 0:2*np.pi:100j]
zi = rbf(ri*np.cos(ti), ri*np.sin(ti))

fig = plt.figure()
ax = plt.subplot(121, polar=True)
cax = ax.contour(ti, ri, zi, 10, linewidths=0.5, colors='k')
cax = ax.contourf(ti, ri, zi, 10, cmap=plt.cm.Spectral)
ax.set_rmax(2)

# rect plot
xi, yi = np.mgrid[-2:2:100j, -2:2:100j]
zi = rbf(xi, yi)

ax = plt.subplot(122, aspect='equal')
cax = ax.contour(xi, yi, zi, 10, linewidths=0.5, colors='k')
cax = ax.contourf(xi, yi, zi, 10, cmap=plt.cm.Spectral)
plt.show()
</snippet></ROW><ROW><id>14370038</id><snippet>Rbf</snippet></ROW><ROW><id>14370150</id><snippet>DictReader</snippet></ROW><ROW><id>14370150</id><snippet>with open('file.csv') as f:
    reader = csv.DictReader(f)
    lines = [row for row in reader
             if not all(k == v for k, v in row.iteritems())]
</snippet></ROW><ROW><id>14370150</id><snippet>DictReader</snippet></ROW><ROW><id>14370150</id><snippet>"A", "B", "C", "D", "E", "F"</snippet></ROW><ROW><id>14370150</id><snippet>reader</snippet></ROW><ROW><id>14370150</id><snippet>{"A": "1", "B": "2", ...}</snippet></ROW><ROW><id>14370150</id><snippet>lines</snippet></ROW><ROW><id>14370150</id><snippet>{"A": "1", ...}</snippet></ROW><ROW><id>14370150</id><snippet>all(k == v for k, v in row.iteritems())</snippet></ROW><ROW><id>14370150</id><snippet>k = "A"</snippet></ROW><ROW><id>14370150</id><snippet>v = "1"</snippet></ROW><ROW><id>14370150</id><snippet>k != v</snippet></ROW><ROW><id>14370150</id><snippet>all()</snippet></ROW><ROW><id>14370150</id><snippet>False</snippet></ROW><ROW><id>14370150</id><snippet>lines</snippet></ROW><ROW><id>14370150</id><snippet>{"A": "A", "B": "B", ...}</snippet></ROW><ROW><id>14370150</id><snippet>all()</snippet></ROW><ROW><id>14370150</id><snippet>True</snippet></ROW><ROW><id>14370150</id><snippet>False</snippet></ROW><ROW><id>14370150</id><snippet>.strip()</snippet></ROW><ROW><id>14370150</id><snippet>all()</snippet></ROW><ROW><id>14370150</id><snippet>lines</snippet></ROW><ROW><id>14370150</id><snippet>[{"A": 1, "B": 2, ...}] * 9</snippet></ROW><ROW><id>14370150</id><snippet>lines</snippet></ROW><ROW><id>14370150</id><snippet>[row for row ...]</snippet></ROW><ROW><id>14370150</id><snippet>(row for row ...)</snippet></ROW><ROW><id>14370150</id><snippet>lines</snippet></ROW><ROW><id>14370150</id><snippet>for row in reader</snippet></ROW><ROW><id>14370541</id><snippet>monitors = db.session.query(Monitor).\
       filter(or_(Monitor.last_checked &lt; (datetime.utcnow() - Monitor.poll_interval),
                  Monitor.last_checked == None)).\
       all()
</snippet></ROW><ROW><id>14370620</id><snippet>with open("hello.txt") as f:
    for line in f:
        print line,
</snippet></ROW><ROW><id>14370620</id><snippet>str.strip()</snippet></ROW><ROW><id>14370620</id><snippet>#!/usr/bin/env python

import mechanize

br = mechanize.Browser()
br.set_handle_redirect(False)
with open('urls.txt') as urls:
    for url in urls:
        stripped = url.strip()
        print '[{}]: '.format(stripped),
        try:
            br.open_novisit(stripped)
            print 'Funfando!'
        except Exception, e:
            print e
</snippet></ROW><ROW><id>14370620</id><snippet>http</snippet></ROW><ROW><id>14370688</id><snippet>__init__.py</snippet></ROW><ROW><id>14370902</id><snippet>thing.getImage</snippet></ROW><ROW><id>14370902</id><snippet>Class1.getImage</snippet></ROW><ROW><id>14370902</id><snippet>Class2.getImage(thing)
</snippet></ROW><ROW><id>14370902</id><snippet>__mro__</snippet></ROW><ROW><id>14370902</id><snippet>&gt;&gt;&gt; class foo(object): pass
... 
&gt;&gt;&gt; class bar(object): pass
... 
&gt;&gt;&gt; class baz(foo,bar): pass
... 
&gt;&gt;&gt; print baz.__mro__
(&lt;class '__main__.baz'&gt;, &lt;class '__main__.foo'&gt;, &lt;class '__main__.bar'&gt;, &lt;type 'object'&gt;)
</snippet></ROW><ROW><id>14370902</id><snippet>baz</snippet></ROW><ROW><id>14370902</id><snippet>foo</snippet></ROW><ROW><id>14370902</id><snippet>bar</snippet></ROW><ROW><id>14370902</id><snippet>object</snippet></ROW><ROW><id>14370928</id><snippet>self</snippet></ROW><ROW><id>14370928</id><snippet>memcache_key = 'request-count-' + self.request.remote_addr

count = memcache.get(memcache_key)

if count is not None and count &gt; MAX_REQUESTS:
    logging.warning("Remote user has %d requests; rejecting." % (count))
    self.error(503)
    return

count = memcache.incr(memcache_key)
if count is None:
    # key didn't exist yet
    memcache.add(memcache_key, 1, time=WINDOW_IN_SECONDS)
</snippet></ROW><ROW><id>14370969</id><snippet>del</snippet></ROW><ROW><id>14371222</id><snippet>elif</snippet></ROW><ROW><id>14371222</id><snippet>aStr = "abcdef"
char = "e"
if aStr == '':
    return False
elif len(aStr) != 1:
    if char == aStr:
        return True
    else:
        print "Python is stupid"
        return False
</snippet></ROW><ROW><id>14371222</id><snippet>if</snippet></ROW><ROW><id>14371222</id><snippet>elif</snippet></ROW><ROW><id>14371222</id><snippet>not</snippet></ROW><ROW><id>14371222</id><snippet>if not aStr:</snippet></ROW><ROW><id>14371338</id><snippet>in</snippet></ROW><ROW><id>14371338</id><snippet>q1answer = {"Metallica", "metallica", "Slayer", "slayer", "Anthrax", "anthrax", "Megadeth", "megadeth"}
...
if answerinput in q1answer:
</snippet></ROW><ROW><id>14371338</id><snippet>or</snippet></ROW><ROW><id>14371338</id><snippet>"Metallica"</snippet></ROW><ROW><id>14371338</id><snippet>lower</snippet></ROW><ROW><id>14371338</id><snippet>if answerinput.lower() in q1answer:
</snippet></ROW><ROW><id>14371464</id><snippet>numpy</snippet></ROW><ROW><id>14371464</id><snippet>&gt;&gt;&gt; a = np.array([1,2,3])
&gt;&gt;&gt; a
array([1, 2, 3])
&gt;&gt;&gt; a.dtype
dtype('int64')
</snippet></ROW><ROW><id>14371464</id><snippet>dtype</snippet></ROW><ROW><id>14371464</id><snippet>&gt;&gt;&gt; a[0] = 5
&gt;&gt;&gt; a
array([5, 2, 3])
</snippet></ROW><ROW><id>14371464</id><snippet>&gt;&gt;&gt; a[0] = 4.3
&gt;&gt;&gt; a
array([4, 2, 3])
</snippet></ROW><ROW><id>14371464</id><snippet>numpy</snippet></ROW><ROW><id>14371464</id><snippet>&gt;&gt;&gt; a = np.array([1,2,3])
&gt;&gt;&gt; a + 4.3
array([ 5.3,  6.3,  7.3])
&gt;&gt;&gt; (a + 4.3).dtype
dtype('float64')
</snippet></ROW><ROW><id>14371464</id><snippet>numpy</snippet></ROW><ROW><id>14371464</id><snippet>object</snippet></ROW><ROW><id>14371464</id><snippet>&gt;&gt;&gt; e = np.array([[  1,   2,   1,   3],
...               [  0,  -7,  -6, -10],
...               [  0,  -1,  -1,  -2]], dtype=object)
&gt;&gt;&gt; 
&gt;&gt;&gt; ref(e)
array([[1, 2, 1, 3],
       [0, -7, -6, -10],
       [0, 0, -1/7, -4/7]], dtype=object)
</snippet></ROW><ROW><id>14371569</id><snippet>%</snippet></ROW><ROW><id>14371569</id><snippet>*</snippet></ROW><ROW><id>14371569</id><snippet>/</snippet></ROW><ROW><id>14371569</id><snippet>"You are at %r percent health." % (hp * 100 / maxhp)
</snippet></ROW><ROW><id>14371569</id><snippet>("You are at %r percent health." % hp) * 100 / maxhp
</snippet></ROW><ROW><id>14371868</id><snippet>__setitem__</snippet></ROW><ROW><id>14371868</id><snippet>w.__setitem__(0, 9.9)</snippet></ROW><ROW><id>14371868</id><snippet>__setitem__</snippet></ROW><ROW><id>14371868</id><snippet>w[0] = 9.9</snippet></ROW><ROW><id>14371868</id><snippet>__setitem__</snippet></ROW><ROW><id>14371923</id><snippet>&lt;script src="include/load.js" type="text/javascript"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>14371923</id><snippet>&lt;script **src="/include/load.js"** type="text/javascript"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>14371932</id><snippet>function(*args, **kwds)</snippet></ROW><ROW><id>14371932</id><snippet>PyObject_Call</snippet></ROW><ROW><id>14371932</id><snippet>/* error checking omitted for brevity */
PyObject *some_list = PyObject_BuildValue("(sss)", "one", "two", "three");
PyObject *some_kwords = PyObject_BuildValue("{s:s,s:s,s:s}",
                          "name1", "alice", "name2", "bob", "name3", "carol");
PyObject *ret = PyObject_Call(foo, some_list, some_kwords);
Py_DECREF(some_list);
Py_DECREF(some_kwords);
</snippet></ROW><ROW><id>14371982</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>14371982</id><snippet>from</snippet></ROW><ROW><id>14371982</id><snippet>from Scientific.IO.NetCDF import NetCDFFile as Dataset</snippet></ROW><ROW><id>14371982</id><snippet>from</snippet></ROW><ROW><id>14372035</id><snippet>sys.getsizeof</snippet></ROW><ROW><id>14372035</id><snippet>&gt;&gt;&gt; from sys import getsizeof
&gt;&gt;&gt; a = 42
&gt;&gt;&gt; getsizeof(a)
12
&gt;&gt;&gt; a = 2**1000
&gt;&gt;&gt; getsizeof(a)
146
&gt;&gt;&gt;
</snippet></ROW><ROW><id>14372039</id><snippet>defaultdict</snippet></ROW><ROW><id>14372039</id><snippet>#! python3
import csv
from io import StringIO
from collections import defaultdict
from pprint import pprint

data = StringIO('''\
queryInclude,yahoo,value1
queryInclude,yahoo,value2
queryInclude,yahoo,value3
queryExclude,yahoo,value4
queryExclude,yahoo,value5
queryInclude,google,value6
queryExclude,google,value7
''')

D = defaultdict(lambda: defaultdict(list))
for d,k,v in csv.reader(data):
    D[d][k].append(v)
pprint(D)
</snippet></ROW><ROW><id>14372039</id><snippet>{'queryExclude': {'google': ['value7'],
                  'yahoo': ['value4', 'value5']},
 'queryInclude': {'google': ['value6'],
                  'yahoo': ['value1', 'value2', 'value3']}}
</snippet></ROW><ROW><id>14372220</id><snippet>nonzero()</snippet></ROW><ROW><id>14372220</id><snippet>def nonzero(self):
    """nonzero indices

    Returns a tuple of arrays (row,col) containing the indices
    of the non-zero elements of the matrix.

    Examples
    --------
    &gt;&gt;&gt; from scipy.sparse import csr_matrix
    &gt;&gt;&gt; A = csr_matrix([[1,2,0],[0,0,3],[4,0,5]])
    &gt;&gt;&gt; A.nonzero()
    (array([0, 0, 1, 2, 2]), array([0, 1, 2, 0, 2]))

    """
</snippet></ROW><ROW><id>14372257</id><snippet>sre_constants.error: bad character range</snippet></ROW><ROW><id>14372257</id><snippet>[\w- ]</snippet></ROW><ROW><id>14372257</id><snippet>[\w -]</snippet></ROW><ROW><id>14372257</id><snippet>-</snippet></ROW><ROW><id>14372257</id><snippet>[\w\- ]</snippet></ROW><ROW><id>14372257</id><snippet>(regex)?</snippet></ROW><ROW><id>14372257</id><snippet>(?:regex)?</snippet></ROW><ROW><id>14372257</id><snippet>(?:regex)</snippet></ROW><ROW><id>14372257</id><snippet>r'(?:\(([A-Z]{3})\))?\s*([\w\- ]+)?\s*(?:\(([0-9]{3})\))?'
</snippet></ROW><ROW><id>14372521</id><snippet>^C</snippet></ROW><ROW><id>14372521</id><snippet>Enter</snippet></ROW><ROW><id>14372521</id><snippet>raw_input</snippet></ROW><ROW><id>14372605</id><snippet>g = {1:{2:.5, 3:.2}, 2:{4:.7}, 4:{5:.6, 3:.3}}
hubs = g.items() # list of nodes and outgoing vertices
size=max(map(lambda hub: max(hub[0], max(hub[1].keys())), hubs))+1 # matrix dimension is highest known node index + 1
matrix=[[None]*size for row in range(size)] # set up a matrix of the appropriate size

for node, vertices in hubs: # loop through every node in dictionary
    for vertice, weight in vertices.items(): # loop through vertices
        matrix[vertice][node] = weight # define adjacency of both nodes by assigning the vertice's weight
</snippet></ROW><ROW><id>14372605</id><snippet>     0    1    2    3    4    5
   ------------------------------
0 |                              
1 |                              
2 |      0.5                     
3 |      0.2            0.3      
4 |           0.7                
5 |                     0.6      
</snippet></ROW><ROW><id>14372605</id><snippet>{1:{2:.2, 3:.3}, 2:{1:.2}, 3:{1:.3}}</snippet></ROW><ROW><id>14372605</id><snippet>hubs = sorted(g.items())
for node, vertices in hubs:
    for vertice, weight in reversed(sorted(vertices.items())):
        if vertice &gt;= node: 
            matrix[vertice][node] = weight
            matrix[node][vertice] = weight
        else: # do only care about vertices that haven't been saved before,
            break # continue with next node when the current one won't introduce any more vertices
</snippet></ROW><ROW><id>14372605</id><snippet># unlike the one before, this sample doesn't rely on the dictionary containing every vertice twice
matrix=[[None]*size for row in range(size)]  
for node, vertices in hubs:
    for vertice, weight in vertices.items():
        matrix[vertice][size-node-1] = weight
</snippet></ROW><ROW><id>14372605</id><snippet>(u,v)</snippet></ROW><ROW><id>14372605</id><snippet>u,v = sorted((u,v))
weight = matrix[v][u]
</snippet></ROW><ROW><id>14372725</id><snippet>groupcollide</snippet></ROW><ROW><id>14372725</id><snippet>groupcollide</snippet></ROW><ROW><id>14372725</id><snippet>update</snippet></ROW><ROW><id>14372725</id><snippet>class GameStart:
    def __init__(self):
        self.life = 405
        self.bg = pygame.image.load(picPath + 'bg.jpg')
        self.lf = pygame.image.load(picPath + 'life.jpg')
        self.player1 = pygame.sprite.Group()
        self.player2 = pygame.sprite.Group()
        self.cB = Ball()
        self.cS = Stone()
        self.player1.add(self.cB)
        self.player2.add(self.cS)
    def update(self):    
        if pygame.sprite.groupcollide(self.player1, self.player2, 1, 0):
            print 'Yoshi!' 
        screen.blit(self.bg, (0, 0))
        self.cB.update((x, y))
        self.cS.update()
        screen.blit(self.lf, (150, self.life))
</snippet></ROW><ROW><id>14372725</id><snippet>pygame.display.update</snippet></ROW><ROW><id>14372725</id><snippet>game.update()

kname = pygame.key.get_pressed()
if kname[pygame.K_LEFT]:
    if x &gt; 0: x = x - 5
elif kname[pygame.K_RIGHT]:
    if x &lt; 700: x = x + 5
elif kname[pygame.K_UP]:
    if y &gt; 0: y = y - 5
elif kname[pygame.K_DOWN]:
    if y &lt; 460: y = y + 5

pygame.display.update()
</snippet></ROW><ROW><id>14372746</id><snippet>generator expressions</snippet></ROW><ROW><id>14372746</id><snippet>numpy.fromiter</snippet></ROW><ROW><id>14372746</id><snippet>numpy.fromiter((&lt;some_func&gt;(x) for x in &lt;something&gt;),&lt;dtype&gt;,&lt;size of something&gt;)
</snippet></ROW><ROW><id>14372746</id><snippet>[&lt;something&gt; for &lt;something_else&gt; in &lt;something_different&gt;]</snippet></ROW><ROW><id>14373024</id><snippet>cv2.waitKey()</snippet></ROW><ROW><id>14373024</id><snippet>cv2.imshow('gray_image',imgray)</snippet></ROW><ROW><id>14373036</id><snippet>form = User_ImageForm(request.POST, request.FILES)
if form.is_valid():
    im = form.save()
    HttpResponseRedirect("/accounts/profile")
</snippet></ROW><ROW><id>14373449</id><snippet>timeout = Timeout(seconds, exception)
timeout.start()
try:
    ...  # exception will be raised here, after *seconds* passed since start() call
finally:
    timeout.cancel()
</snippet></ROW><ROW><id>14373449</id><snippet>try</snippet></ROW><ROW><id>14373449</id><snippet>while</snippet></ROW><ROW><id>14373449</id><snippet>time.sleep</snippet></ROW><ROW><id>14373449</id><snippet>Timeout</snippet></ROW><ROW><id>14373893</id><snippet>{{ project.projectpicture_set.all.0 }}</snippet></ROW><ROW><id>14374044</id><snippet>filename = chooser.get_filename()</snippet></ROW><ROW><id>14374044</id><snippet>None</snippet></ROW><ROW><id>14374044</id><snippet>filename = None

def SaveFile(filename):
    global filename
    if filename == None:
        chooser = gtk.FileChooserDialog("Save File...", None,
                                    gtk.FILE_CHOOSER_ACTION_SAVE,
                                    (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL, 
                                     gtk.STOCK_SAVE, gtk.RESPONSE_OK))
        response = chooser.run()
        if response == gtk.RESPONSE_OK:
            filename = chooser.get_filename()
            chooser.destroy()
            wbuffer = textview.get_buffer()
            text = wbuffer.get_text(wbuffer.get_start_iter(), wbuffer.get_end_iter())
            openfile = open(filename,"w")
            openfile.write(text)
            openfile.close()
            print filename, "this is the first part"
            return filename
        else:
            chooser.destroy()
    elif filename != None:
        wbuffer = textview.get_buffer()
        text = wbuffer.get_text(wbuffer.get_start_iter(), wbuffer.get_end_iter())
        openfile = open(filename,"w")
        openfile.write(text)
        openfile.close()
        print filename, "made it this far"
        return filename
    else:
        chooser.destroy()
        return filename
</snippet></ROW><ROW><id>14374044</id><snippet>filename</snippet></ROW><ROW><id>14374044</id><snippet>self._filename</snippet></ROW><ROW><id>14374044</id><snippet>if</snippet></ROW><ROW><id>14374044</id><snippet>elif</snippet></ROW><ROW><id>14374044</id><snippet>        wbuffer = textview.get_buffer()
        text = wbuffer.get_text(wbuffer.get_start_iter(), wbuffer.get_end_iter())
        openfile = open(filename,"w")
        openfile.write(text)
        openfile.close()
</snippet></ROW><ROW><id>14374131</id><snippet>In [67]: create_bar_plot(5)

In [68]: plt.gca().get_xbound()
Out[68]: (-1.0, 5.0)

In [69]: create_bar_plot(1)

In [70]: plt.gca().get_xbound()
Out[70]: (-0.30000000000000004, 0.30000000000000004)

In [71]: ax = plt.gca()

In [72]: ax.set_xbound(-1.0 ,5.0)

In [73]: plt.show()
</snippet></ROW><ROW><id>14374176</id><snippet>class students():
    def __init__(self, fname='', lname='', grades=None):
        self.firstName = fname
        self.lastName = lname
        self.gradeBook = [] if grades is None else grades
</snippet></ROW><ROW><id>14374176</id><snippet>[]</snippet></ROW><ROW><id>14374179</id><snippet>#!/usr/env/bin python2.7

import unittest
from fib import fib


class FibTests(unittest.TestCase):
    pass

def test_gen(expected, actual):
    def test_method(self):
        return self.assertEqual(expected, actual)
    return test_method

if __name__ == '__main__':
    cases = ((fib(1), 1), (fib(2), 1), (fib(5), 5))
    for index, case in enumerate(cases):
        test_name = 'test_{0}'.format(index)
        test = test_gen(case[1], case[0])
        setattr(FibTests, test_name, test)
    suite = unittest.TestLoader().loadTestsFromTestCase(FibTests)
    result = unittest.TextTestRunner(verbosity=2).run(suite)
</snippet></ROW><ROW><id>14374229</id><snippet>for</snippet></ROW><ROW><id>14374229</id><snippet>while</snippet></ROW><ROW><id>14374229</id><snippet>i = 0
while i &lt; 5:
    print(i)
    if condition:
        i=i-1
    i += 1
</snippet></ROW><ROW><id>14374229</id><snippet>i = 0
while i &lt; 5:
    print(i)
    if condition:
        do_something()
        # don't increment here, so we stay on the same value for i
    else:
        # only increment in the case where we're not "moving backwards"
        i += 1
</snippet></ROW><ROW><id>14374378</id><snippet>for site in settings_{a,b,c,d}; do
    python manage.py runserver --settings $site &amp;
done
</snippet></ROW><ROW><id>14374378</id><snippet>subprocess</snippet></ROW><ROW><id>14374378</id><snippet>management.call_command</snippet></ROW><ROW><id>14374378</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>14374619</id><snippet>if words in word_dict.keys():
</snippet></ROW><ROW><id>14374619</id><snippet>.keys()</snippet></ROW><ROW><id>14374619</id><snippet>if words in word_dict:
</snippet></ROW><ROW><id>14374619</id><snippet>Counter</snippet></ROW><ROW><id>14374933</id><snippet>open_marks[1-5]</snippet></ROW><ROW><id>14374933</id><snippet>def open_marks_for_student(n):
    students = open_marks()
    return students[n-1::5]
</snippet></ROW><ROW><id>14374933</id><snippet>open_marks_for_student(3)
</snippet></ROW><ROW><id>14374933</id><snippet>count_ranges</snippet></ROW><ROW><id>14374933</id><snippet>def count_ranges(marks):
    range_counts = [0] * 12
    for num in marks[:]: #change number to select number of draws
        which_range=int(num//5)
        range_counts[which_range] = range_counts1[which_range] + 1
    return range_counts
</snippet></ROW><ROW><id>14374933</id><snippet>def get_range_counts():
    range_counts = []
    student_nums = [1,2,3,4,5] #or range(1,6)
    for n in student_nums:
        marks = open_marks_for_student(n)
        range_counts.append(count_ranges(marks)) #create histogram, append to list
    return range_counts
</snippet></ROW><ROW><id>14374933</id><snippet>marks</snippet></ROW><ROW><id>14374933</id><snippet>count_ranges</snippet></ROW><ROW><id>14375054</id><snippet>0,  
1, 0,  
0, 0, 10  
</snippet></ROW><ROW><id>14375054</id><snippet>2^(n-1)</snippet></ROW><ROW><id>14375054</id><snippet>n</snippet></ROW><ROW><id>14375054</id><snippet>maximum total</snippet></ROW><ROW><id>14375054</id><snippet>ALL</snippet></ROW><ROW><id>14375054</id><snippet>TWO</snippet></ROW><ROW><id>14375054</id><snippet>n=15</snippet></ROW><ROW><id>14375054</id><snippet>2^(n-1)=16384</snippet></ROW><ROW><id>14375054</id><snippet>n</snippet></ROW><ROW><id>14375054</id><snippet>2^(n-1)=633825300114114700748351602688</snippet></ROW><ROW><id>14375377</id><snippet>mvn test -Dmaven.surefire.debug="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 -Xnoagent -Djava.compiler=NONE"
</snippet></ROW><ROW><id>14375377</id><snippet>"</snippet></ROW><ROW><id>14375377</id><snippet>mvn
test
-Dmaven.surefire.debug=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 -Xnoagent -Djava.compiler=NONE
</snippet></ROW><ROW><id>14375377</id><snippet>from subprocess import call
commands = []
commands.append("mvn")
commands.append("test")
commands.append("-Dmaven.surefire.debug=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 -Xnoagent -Djava.compiler=NONE")
call(commands)
</snippet></ROW><ROW><id>14375426</id><snippet>^\$\d+.*|.*\$\d+$
</snippet></ROW><ROW><id>14375436</id><snippet>import random
num = sorted([random.randint(0,27000000/4)*4 for i in range(50000000/4)])

lines_to_write = 0
with open("all.fastq", "r") as fastq:
    with open("sub.fastq", "w") as subset:
        for i,line in enumerate(fastq):
            if len(num)==0:
                break
            if i == num[0]:
                num.pop(0)
                lines_to_write = 4
            if lines_to_write&gt;0:
                lines_to_write -= 1
                subset.write(line)
</snippet></ROW><ROW><id>14375459</id><snippet>from distutils.sysconfig import get_python_inc
get_python_inc() #this gives the include dir
</snippet></ROW><ROW><id>14375841</id><snippet>import pandas as pd
print pd.read_csv('test.csv',sep='|')
</snippet></ROW><ROW><id>14375841</id><snippet>   A   B  C   D  x  F   G  x.1  H
0  1 NaN  2 NaN  3  4 NaN    5  6
1  1 NaN  2 NaN  3  4 NaN    5  6
2  1 NaN  2 NaN  3  4 NaN    5  6
3  1 NaN  2 NaN  3  4 NaN    5  6
</snippet></ROW><ROW><id>14375841</id><snippet>to_dict()</snippet></ROW><ROW><id>14375841</id><snippet>{'A': {0: 1, 1: 1, 2: 1, 3: 1},
 'B': {0: nan, 1: nan, 2: nan, 3: nan},
 'C': {0: 2, 1: 2, 2: 2, 3: 2},
 'D': {0: nan, 1: nan, 2: nan, 3: nan},
 'F': {0: 4, 1: 4, 2: 4, 3: 4},
 'G': {0: nan, 1: nan, 2: nan, 3: nan},
 'H': {0: 6, 1: 6, 2: 6, 3: 6},
 'x': {0: 3, 1: 3, 2: 3, 3: 3},
 'x.1': {0: 5, 1: 5, 2: 5, 3: 5}}
</snippet></ROW><ROW><id>14375841</id><snippet>import pandas as pd
df = pd.read_csv('test.csv',sep='|')
df.columns = [df.columns[index-1]+'x' if 'x' in name 
              else name for index,name in enumerate(df.columns)]
print df

   A   B  C   D  Dx  F   G  Gx  H
0  1 NaN  2 NaN   3  4 NaN   5  6
1  1 NaN  2 NaN   3  4 NaN   5  6
2  1 NaN  2 NaN   3  4 NaN   5  6
3  1 NaN  2 NaN   3  4 NaN   5  6
</snippet></ROW><ROW><id>14375841</id><snippet>print df.dropna(axis=1,how='all')

   A  C  Dx  F  Gx  H
0  1  2   3  4   5  6
1  1  2   3  4   5  6
2  1  2   3  4   5  6
3  1  2   3  4   5  6
</snippet></ROW><ROW><id>14376190</id><snippet>re.findall('\[\[(.+?)\]\]',s)  // Replaced `.+` with `.+?`
</snippet></ROW><ROW><id>14376190</id><snippet>(.+)</snippet></ROW><ROW><id>14376190</id><snippet>]]</snippet></ROW><ROW><id>14376190</id><snippet>(.+?)</snippet></ROW><ROW><id>14376190</id><snippet>]]</snippet></ROW><ROW><id>14376190</id><snippet>&gt;&gt;&gt; match_internal=re.findall('\[\[(.+?)\]\]',s)
&gt;&gt;&gt; for i in match_internal:
        print i

Pierre-Joseph Proudhon|Proudhon
Peter Kropotkin|Kropotkin
Mikhail Bakunin|Bakunin
</snippet></ROW><ROW><id>14376739</id><snippet>def removespace(a):
    if type(a) is str:
        return a.replace(" ", "")
    elif type(a) is list:
        return [removespace(x) for x in a]
    elif type(a) is set:
        return {removespace(x) for x in a}
    else:
        return a
</snippet></ROW><ROW><id>14376739</id><snippet>&gt;&gt;&gt; removespace([["a ",["   "]],{"b ","c d"},"e f g"])
[['a', ['']], {'b', 'cd'}, 'efg']
</snippet></ROW><ROW><id>14377245</id><snippet>if args.settings_dir not in sys.path:
  sys.path.append(args.settings_dir)

os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

#try to query db for existing objects, e.g. user groups
#in order to detect if we are upgrading an existing installation
from django.db.utils import DatabaseError
try:
  from django.contrib.auth.models import Group
  tmp = len(Group.objects.all()) #evaluate to force db query
  updating = True
except DatabaseError as e:
  updating = False

#try to query db for South migrations in order to detect if South was already applied
#in this installation (if not then accessing MigrationHistory will throw an excepion)
try:
  from south.models import MigrationHistory
  has_south = bool(len(MigrationHistory.objects.all()))
except ImportError as e:
  print 'ERROR: Error importing South migration history: ' + str(e)
  print 'Exiting'
  exit(1)
except DatabaseError as e:
  has_south = False

#syncdb to create south_migrationhistory table, portal models will not be synced
from django.core.management import execute_from_command_line
argv = ['manage.py', 'syncdb', '--settings=settings', '--pythonpath=' + args.settings_dir]
execute_from_command_line(argv)

#if we are updating existing installation and South wasn't already applied
#then initial migration has to be 'faked' in order to sync with existing tables
if updating and not has_south:
  print 'INFO: Faking initial database migration...'
  argv = ['manage.py', 'migrate', '--all', '0001', '--fake',
          '--settings=settings', '--pythonpath=' + args.settings_dir]
  execute_from_command_line(argv)

#run normal migrations
print 'INFO: Applying database migrations...'
argv = ['manage.py', 'migrate', '--all',
        '--settings=settings', '--pythonpath=' + args.settings_dir]
execute_from_command_line(argv)
</snippet></ROW><ROW><id>14377261</id><snippet>Parties (servers) speaking the PubSubHubbub protocol can get near-instant notifications (via webhook callbacks) when a topic (feed URL) they're interested in is updated.
</snippet></ROW><ROW><id>14377271</id><snippet>from Tkinter import (
    Button,
    Canvas,
    DISABLED,
    END
    Entry,
    Frame,
    LEFT,
    NORMAL,
    RIDGE,
    Text,
    Tk
)
</snippet></ROW><ROW><id>14377879</id><snippet>Content-Disposition</snippet></ROW><ROW><id>14377879</id><snippet>web.header('Content-Disposition', 'attachment; filename="fname.ext"')
</snippet></ROW><ROW><id>14378371</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>14378371</id><snippet>def my_gen(generators):
    while True:
        rez = () 
        for gen in generators:
            try:
                rez = rez + (gen.next(),)
            except StopIteration:
                pass
        if rez:
            yield rez
        else:
            break

print [x for x in my_gen((iter(xrange(2)), iter(xrange(3)), iter(xrange(1))))]

[(0, 0, 0), (1, 1), (2,)] #output
</snippet></ROW><ROW><id>14378424</id><snippet>print form.replace('%s', '')
</snippet></ROW><ROW><id>14378761</id><snippet>ignore</snippet></ROW><ROW><id>14378761</id><snippet>if all(Path.find(v) &lt;= -1 for v in ignore):
</snippet></ROW><ROW><id>14379013</id><snippet>readline()</snippet></ROW><ROW><id>14379013</id><snippet>\n</snippet></ROW><ROW><id>14379013</id><snippet>open("out.txt", "r").read().splitlines()[0]
</snippet></ROW><ROW><id>14379157</id><snippet>for md in range(1,5):
   for pico in range(21,25):
      print "file-{0}-loop-{1}".format(md, pico)
</snippet></ROW><ROW><id>14379157</id><snippet>from itertools import product
for md, pico in product(range(1,5), range(21,25)):
    print "file-{0}-loop-{1}".format(md, pico)
</snippet></ROW><ROW><id>14379483</id><snippet>StringIO</snippet></ROW><ROW><id>14379483</id><snippet>pickle</snippet></ROW><ROW><id>14379483</id><snippet>atexit</snippet></ROW><ROW><id>14379999</id><snippet>with open("File1.csv", "rb") as in_file1:
    d = dict(csv.reader(in_file1, delimiter=' '))

with open("File2.csv", "rb") as in_file2, open("File3.csv", "wb") as out_file:
    writer = csv.writer(out_file, delimiter=' ')
    for rec in csv.reader(in_file2, delimiter=' '):
        writer.writerow((rec[0], d[rec[0]]))
</snippet></ROW><ROW><id>14379999</id><snippet>d</snippet></ROW><ROW><id>14379999</id><snippet>{'A': '100', 'B': '200', 'C': '300', 'D': '400', 'E': '500'}
</snippet></ROW><ROW><id>14380509</id><snippet>&gt;&gt;&gt; statement = "%s you are so %s at %s" % tuple(words)
'John you are so nice at skateboarding'
</snippet></ROW><ROW><id>14380621</id><snippet>cardn = self.card_check(deal)
</snippet></ROW><ROW><id>14380917</id><snippet>from os.path import basename
print basename("/home/si/text.vx.txt").split('.')[0]
&gt;&gt;&gt; text
</snippet></ROW><ROW><id>14380963</id><snippet>set()</snippet></ROW><ROW><id>14380963</id><snippet>lookupl = set(l)
</snippet></ROW><ROW><id>14380980</id><snippet>lines = tuple(open('/var/log/fail2ban.log', 'r'))
seen = set()    
for item in lines:
  item = item.strip('\n')
  if "fail2ban.actions:" in item and "[postfix]" in item and "Ban" in item:
    item = item.split(' ')
    if item[6] not in seen:
      seen.add(item[6])
      print item
</snippet></ROW><ROW><id>14381066</id><snippet>get_shortest_paths</snippet></ROW><ROW><id>14381066</id><snippet>get_all_shortest_paths</snippet></ROW><ROW><id>14381661</id><snippet>category_posts = category.posts_set.all()</snippet></ROW><ROW><id>14381661</id><snippet>category_posts = Posts.objects.filter(category=category)</snippet></ROW><ROW><id>14381671</id><snippet>import threading
import Queue
import random
import math
import time
import Tkinter

random.seed(0)

class App:
    def __init__(self, queue, width=400, height=300):
        self.width, self.height = width, height
        self.canvas = Tkinter.Canvas(width=width, height=height, bg='black')
        self.canvas.pack(fill='none', expand=False)
        self._oid = []
        self.canvas.after(10, self.move)

        self.queue = queue
        self.canvas.after(50, self.check_queue)

    def check_queue(self):
        try:
            x, y, rad, outline = self.queue.get(block=False)
        except Queue.Empty:
            pass
        else:
            self.create_moving_ball(x, y, rad, outline)
        self.canvas.after(50, self.check_queue)

    def move(self):
        width, height = self.width, self.height
        for i, (oid, r, angle, speed, (x, y)) in enumerate(self._oid):
            sx, sy = speed
            dx = sx * math.cos(angle)
            dy = sy * math.sin(angle)
            if y + dy + r&gt; height or y + dy - r &lt; 0:
                sy = -sy
                self._oid[i][3] = (sx, sy)
            if x + dx + r &gt; width or x + dx - r &lt; 0:
                sx = -sx
                self._oid[i][3] = (sx, sy)
            nx, ny = x + dx, y + dy
            self._oid[i][-1] = (nx, ny)
            self.canvas.move(oid, dx, dy)
        self.canvas.update_idletasks()
        self.canvas.after(10, self.move)

    def create_moving_ball(self, x=100, y=100, rad=20, outline='white'):
        oid = self.canvas.create_oval(x - rad, y - rad, x + rad, y + rad,
                outline=outline)
        oid_angle = math.radians(random.randint(1, 360))
        oid_speed = random.randint(2, 5)
        self._oid.append([oid, rad, oid_angle, (oid_speed, oid_speed), (x, y)])

def queue_create(queue, running):
    while running:
        if random.random() &lt; 1e-6:
            print "Create a new moving ball please"
            x, y = random.randint(100, 150), random.randint(100, 150)
            color = random.choice(['green', 'white', 'yellow', 'blue'])
            queue.put((x, y, random.randint(10, 30), color))
        time.sleep(0) # Effectively yield this thread.

root = Tkinter.Tk()
running = [True]

queue = Queue.Queue()

app = App(queue)
app.create_moving_ball()
app.canvas.bind('&lt;Destroy&gt;', lambda x: (running.pop(), x.widget.destroy()))

thread = threading.Thread(target=queue_create, args=(queue, running))
thread.start()

root.mainloop()
</snippet></ROW><ROW><id>14381721</id><snippet>using_converter</snippet></ROW><ROW><id>14381721</id><snippet>import itertools as IT

header_map = {'Foo':str,
              'Bar':str,
              'FooBar':float}

N = 20000
csv_data = [('Foo', 'Bar', 'FooBar')] + [('Foo', 'Bar', 1123.451)]*N

def original(csv_data):
    index_map = {}
    #enumerate the rows and create a dictionary of index:function
    for i, header in enumerate(csv_data[0]):
        index_map[i] = header_map[header]

    #retrieve the appropriate function for each index and call it on the value
    new_csv = [[index_map[i](value) for i, value in enumerate(row)]
               for row in csv_data[1:]]
    return new_csv

def using_converter(csv_data):
    converters = IT.cycle([header_map[header] for header in csv_data[0]])
    conv = converters.next
    new_csv = [[conv()(item) for item in row] for row in csv_data[1:]]
    return new_csv

def using_header_map(csv_data):
    heads = csv_data[0]
    new_csv = [
        tuple(header_map[head](item) for head, item in zip(heads, row))
        for row in csv_data[1:]]
    return new_csv

# print(original(csv_data))
# print(using_converter(csv_data))
# print(using_header_map(csv_data))
</snippet></ROW><ROW><id>14381721</id><snippet>timeit</snippet></ROW><ROW><id>14381721</id><snippet>% python -mtimeit -s'import test' 'test.original(test.csv_data)'
100 loops, best of 3: 17.3 msec per loop
</snippet></ROW><ROW><id>14381721</id><snippet>% python -mtimeit -s'import test' 'test.using_converter(test.csv_data)'
100 loops, best of 3: 15.5 msec per loop
</snippet></ROW><ROW><id>14381721</id><snippet>% python -mtimeit -s'import test' 'test.using_header_map(test.csv_data)'
10 loops, best of 3: 36.2 msec per loop
</snippet></ROW><ROW><id>14382160</id><snippet>&gt;&gt;&gt; def test():
...   return ['item0', 'item1']
...
&gt;&gt;&gt; test()
['item0', 'item1']
&gt;&gt;&gt; test()[0]
'item0'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>14382171</id><snippet>import re

string = ('Houston, TX ' +
         '(San Francisco, CA) ' +
         'South &amp; West (Houston, TX) ' +
         '(South &amp; West (Houston, TX))')

matches = re.findall("([\w\s]+),\s(\w+)", string)
for match in matches:
    print 'City: ' + match[0] + ', State: ' + match[1]
</snippet></ROW><ROW><id>14382171</id><snippet>City: Houston, State: TX
City: San Francisco, State: CA
City: Houston, State: TX
City: Houston, State: TX
</snippet></ROW><ROW><id>14382171</id><snippet>([\w\s]+)</snippet></ROW><ROW><id>14382171</id><snippet>,\s</snippet></ROW><ROW><id>14382171</id><snippet>(\w+)</snippet></ROW><ROW><id>14382541</id><snippet>Tools &gt; Preferences &gt; Console &gt; Advanced Settings &gt; Python executable</snippet></ROW><ROW><id>14382541</id><snippet>/Library/Frameworks/EPD64.framework/Versions/7.3/bin</snippet></ROW><ROW><id>14382970</id><snippet>&gt;&gt;&gt; ' '.join(re.findall("([A-Z][^A-Z]*)","MyClass")).strip()
'My Class'
</snippet></ROW><ROW><id>14382970</id><snippet>caps</snippet></ROW><ROW><id>14382970</id><snippet>&gt;&gt;&gt; test_case = ["MyClass","My","myclass","my_class","My_Class","myClass"]
&gt;&gt;&gt; [' '.join(re.findall("([A-Z]?[^A-Z]*)",e)) for e in test_case]
['My Class ', 'My ', 'myclass ', 'my_class ', 'My_ Class ', 'my Class ']
</snippet></ROW><ROW><id>14382997</id><snippet>itertools</snippet></ROW><ROW><id>14382997</id><snippet>from itertools import count, product, islice
from string import ascii_uppercase

def multiletters(seq):
    for n in count(1):
        for s in product(seq, repeat=n):
            yield ''.join(s)
</snippet></ROW><ROW><id>14382997</id><snippet>&gt;&gt;&gt; list(islice(multiletters('ABC'), 20))
['A', 'B', 'C', 'AA', 'AB', 'AC', 'BA', 'BB', 'BC', 'CA', 'CB', 'CC', 'AAA', 'AAB', 'AAC', 'ABA', 'ABB', 'ABC', 'ACA', 'ACB']
&gt;&gt;&gt; list(islice(multiletters(ascii_uppercase), 30))
['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'AB', 'AC', 'AD']
</snippet></ROW><ROW><id>14382997</id><snippet>&gt;&gt;&gt; m = multiletters(ascii_uppercase)
&gt;&gt;&gt; next(m)
'A'
&gt;&gt;&gt; next(m)
'B'
&gt;&gt;&gt; next(m)
'C'
</snippet></ROW><ROW><id>14383097</id><snippet>c</snippet></ROW><ROW><id>14383097</id><snippet>x</snippet></ROW><ROW><id>14383097</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>14383097</id><snippet>if __name__ == "__main__":
    if len(sys.argv) &lt; 2:
        raise Exception, "missing first parameter - row"
    c = int(sys.argv[1])
    dothis(c)
</snippet></ROW><ROW><id>14383344</id><snippet>defaultdict</snippet></ROW><ROW><id>14383344</id><snippet>from collections import defaultdict

nesteddict = defaultdict(dict)

nesteddict['abc']['spam'] = 'ham'
</snippet></ROW><ROW><id>14383344</id><snippet>defaultdict</snippet></ROW><ROW><id>14383446</id><snippet>mapred.task.timeout</snippet></ROW><ROW><id>14383446</id><snippet>--jobconf mapred.task.timeout=1800000
</snippet></ROW><ROW><id>14383446</id><snippet>--bootstrap-action="s3://elasticmapreduce/bootstrap-actions/configure-hadoop -m mapred.task.timeout=1800000"
</snippet></ROW><ROW><id>14383446</id><snippet>MRJob</snippet></ROW><ROW><id>14383446</id><snippet>jobconf</snippet></ROW><ROW><id>14383446</id><snippet>--jobconf</snippet></ROW><ROW><id>14383446</id><snippet>python job.py --num-ec2-instances 42 --python-archive t.tar.gz -r emr --jobconf mapred.task.timeout=1800000 /path/to/input.txt
</snippet></ROW><ROW><id>14383654</id><snippet>to_latex</snippet></ROW><ROW><id>14383654</id><snippet>In [42]: df = pd.DataFrame(np.random.random((5, 5)))

In [43]: df
Out[43]: 
          0         1         2         3         4
0  0.886864  0.518538  0.359964  0.167291  0.940414
1  0.834130  0.022920  0.265131  0.059002  0.530584
2  0.648019  0.953043  0.263551  0.595798  0.153969
3  0.207003  0.015721  0.931170  0.045044  0.432870
4  0.039886  0.898780  0.728195  0.112069  0.468485

In [44]: print df.to_latex()
\begin{tabular}{|l|c|c|c|c|c|c|}
\hline
{} &amp;         0 &amp;         1 &amp;         2 &amp;         3 &amp;         4 \\
\hline
0 &amp;  0.886864 &amp;  0.518538 &amp;  0.359964 &amp;  0.167291 &amp;  0.940414 \\
1 &amp;  0.834130 &amp;  0.022920 &amp;  0.265131 &amp;  0.059002 &amp;  0.530584 \\
2 &amp;  0.648019 &amp;  0.953043 &amp;  0.263551 &amp;  0.595798 &amp;  0.153969 \\
3 &amp;  0.207003 &amp;  0.015721 &amp;  0.931170 &amp;  0.045044 &amp;  0.432870 \\
4 &amp;  0.039886 &amp;  0.898780 &amp;  0.728195 &amp;  0.112069 &amp;  0.468485 \\
\hline
\end{tabular}
</snippet></ROW><ROW><id>14383654</id><snippet>to_latex</snippet></ROW><ROW><id>14384020</id><snippet>the_str.replace('/', '_')</snippet></ROW><ROW><id>14384020</id><snippet>'/'</snippet></ROW><ROW><id>14384020</id><snippet>'_'</snippet></ROW><ROW><id>14384301</id><snippet>import re
# match characters from ¿ to the end of the JSON-encodable range
exclude = re.compile(ur'[\u00bf-\uffff]')

def isprintable(s):
    return not bool(exclude.search(s))
</snippet></ROW><ROW><id>14384301</id><snippet>False</snippet></ROW><ROW><id>14384301</id><snippet>\u00BE</snippet></ROW><ROW><id>14384301</id><snippet>&gt;&gt;&gt; isprintable(u'Hello World!')
True
&gt;&gt;&gt; isprintable(u'Jeg \u00f8ve mit Norsk.')
False
</snippet></ROW><ROW><id>14384404</id><snippet>In [1]: qtyList = ['[40', '68]', '[18', '10]']
</snippet></ROW><ROW><id>14384404</id><snippet>In [2]: [int(s.replace('[', '').replace(']', '')) for s in qtyList]
Out[2]: [40, 68, 18, 10]
</snippet></ROW><ROW><id>14384404</id><snippet>In [3]: import re

In [4]: [int(re.sub('[\[\]]', '', s)) for s in qtyList]
Out[4]: [40, 68, 18, 10]
</snippet></ROW><ROW><id>14384404</id><snippet>In [5]: from itertools import cycle

In [6]: slices = cycle((slice(1, None), slice(None, -1)))

In [7]: [int(s[c]) for s, c in zip(qtyList, slices)]
Out[7]: [40, 68, 18, 10]
</snippet></ROW><ROW><id>14384610</id><snippet>def bytes_to_long(bytes):
    result = 0l
    for c in bytes:
        result *= 256
        result += ord(c)
    return result
</snippet></ROW><ROW><id>14384610</id><snippet>long</snippet></ROW><ROW><id>14384610</id><snippet>struct.unpack()</snippet></ROW><ROW><id>14384610</id><snippet>ord()</snippet></ROW><ROW><id>14384610</id><snippet>bytes</snippet></ROW><ROW><id>14384676</id><snippet>d={}
for product in doc.xpath('.//product'):
    sku = product.xpath('.//sellersku/text()')[0]
    price = product.xpath('./descendant::amount[1]/text()')
    if price: # if theres a possibility of sku missing replace with:
              # "if price and sku"
              #
              # if you have duplicate sku's and you don't want them overwritten 
              # add "and sku not in d" check
        d[sku]= price[0]
</snippet></ROW><ROW><id>14385088</id><snippet>try_files</snippet></ROW><ROW><id>14385192</id><snippet>import dicom, dicom.UID
from dicom.dataset import Dataset, FileDataset
import numpy as np
import datetime, time

def write_dicom(pixel_array,filename):
    """
    INPUTS:
    pixel_array: 2D numpy ndarray.  If pixel_array is larger than 2D, errors.
    filename: string name for the output file.
    """

    ## This code block was taken from the output of a MATLAB secondary
    ## capture.  I do not know what the long dotted UIDs mean, but
    ## this code works.
    file_meta = Dataset()
    file_meta.MediaStorageSOPClassUID = 'Secondary Capture Image Storage'
    file_meta.MediaStorageSOPInstanceUID = '1.3.6.1.4.1.9590.100.1.1.111165684411017669021768385720736873780'
    file_meta.ImplementationClassUID = '1.3.6.1.4.1.9590.100.1.0.100.4.0'
    ds = FileDataset(filename, {},file_meta = file_meta,preamble="\0"*128)
    ds.Modality = 'WSD'
    ds.ContentDate = str(datetime.date.today()).replace('-','')
    ds.ContentTime = str(time.time()) #milliseconds since the epoch
    ds.StudyInstanceUID =  '1.3.6.1.4.1.9590.100.1.1.124313977412360175234271287472804872093'
    ds.SeriesInstanceUID = '1.3.6.1.4.1.9590.100.1.1.369231118011061003403421859172643143649'
    ds.SOPInstanceUID =    '1.3.6.1.4.1.9590.100.1.1.111165684411017669021768385720736873780'
    ds.SOPClassUID = 'Secondary Capture Image Storage'
    ds.SecondaryCaptureDeviceManufctur = 'Python 2.7.3'

    ## These are the necessary imaging components of the FileDataset object.
    ds.SamplesPerPixel = 1
    ds.PhotometricInterpretation = "MONOCHROME2"
    ds.PixelRepresentation = 0
    ds.HighBit = 15
    ds.BitsStored = 16
    ds.BitsAllocated = 16
    ds.SmallestImagePixelValue = '\\x00\\x00'
    ds.LargestImagePixelValue = '\\xff\\xff'
    ds.Columns = pixel_array.shape[0]
    ds.Rows = pixel_array.shape[1]
    if pixel_array.dtype != np.uint16:
        pixel_array = pixel_array.astype(np.uint16)
    ds.PixelData = pixel_array.tostring()

    ds.save_as(filename)
    return



if __name__ == "__main__":
#    pixel_array = np.arange(256*256).reshape(256,256)
#    pixel_array = np.tile(np.arange(256).reshape(16,16),(16,16))
    x = np.arange(16).reshape(16,1)
    pixel_array = (x + x.T) * 32
    pixel_array = np.tile(pixel_array,(16,16))
    write_dicom(pixel_array,'pretty.dcm')
</snippet></ROW><ROW><id>14385252</id><snippet>import scipy.sparse

def sps_solve(n) :
    # Solution vector is [N[0], N[1], ..., N[n - 2], M[1], M[2], ..., M[n - 1]]
    n_pos = lambda p : p
    m_pos = lambda p : p + n - 2
    data = []
    row = []
    col = []
    # p = 0
    # n * N[0] + (1 - n) * M[n-1] = n
    row += [n_pos(0), n_pos(0)]
    col += [n_pos(0), m_pos(n - 1)]
    data += [n, 1 - n]
    for p in xrange(1, n - 1) :
        # n * M[p] + (1 + p - n) * M[n - 1] - 2 * N[p - 1] +
        #  (1 - p) * M[p - 1] = n
        row += [m_pos(p)] * (4 if p &gt; 1 else 3)
        col += ([m_pos(p), m_pos(n - 1), n_pos(p - 1)] +
                ([m_pos(p - 1)] if p &gt; 1 else []))
        data += [n, 1 + p - n , -2] + ([1 - p] if p &gt; 1 else [])
        # n * N[p] + (1 + p -n) * M[n - 1] - p * N[p - 1] = n
        row += [n_pos(p)] * 3
        col += [n_pos(p), m_pos(n - 1), n_pos(p - 1)]
        data += [n, 1 + p - n, -p]
    if n &gt; 2 :
        # p = n - 1
        # n * M[n - 1] - 2 * N[n - 2] + (2 - n) * M[n - 2] = n
        row += [m_pos(n-1)] * 3
        col += [m_pos(n - 1), n_pos(n - 2), m_pos(n - 2)]
        data += [n, -2, 2 - n]
    else :
        # p = 1 
        # n * M[1] - 2 * N[0] = n
        row += [m_pos(n - 1)] * 2
        col += [m_pos(n - 1), n_pos(n - 2)]
        data += [n, -2]
    coeff_mat = scipy.sparse.coo_matrix((data, (row, col))).tocsc()
    return scipy.sparse.linalg.spsolve(coeff_mat,
                                       np.ones(2 * (n - 1)) * n)
</snippet></ROW><ROW><id>14385252</id><snippet>n</snippet></ROW><ROW><id>14385252</id><snippet>n = 75</snippet></ROW><ROW><id>14385252</id><snippet>scipy.sparse</snippet></ROW><ROW><id>14385667</id><snippet>\r</snippet></ROW><ROW><id>14385667</id><snippet>\n</snippet></ROW><ROW><id>14385667</id><snippet>\r\n</snippet></ROW><ROW><id>14385667</id><snippet>\n</snippet></ROW><ROW><id>14385667</id><snippet>\r</snippet></ROW><ROW><id>14385667</id><snippet>with file("file.txt", "r") as f:
    with file("newfile.txt", "w") as o:
        o.write("".join(s.replace("\r", "").replace("\n","") 
                for s in f.readlines()))
</snippet></ROW><ROW><id>14386145</id><snippet>closing</snippet></ROW><ROW><id>14386253</id><snippet>justify</snippet></ROW><ROW><id>14386253</id><snippet>'center'</snippet></ROW><ROW><id>14386253</id><snippet>e = ttk.Entry(master, ..., justify='center')
</snippet></ROW><ROW><id>14386296</id><snippet>def entered_long(df):
  return buy_pattern(df) &amp; (df.High &gt; df.High.shift(1))
</snippet></ROW><ROW><id>14386296</id><snippet>entered_long</snippet></ROW><ROW><id>14386296</id><snippet>In [48]: x = np.array([ True,  True,  True], dtype=bool)

In [49]: bool(x)

ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
</snippet></ROW><ROW><id>14386296</id><snippet>any</snippet></ROW><ROW><id>14386296</id><snippet>all</snippet></ROW><ROW><id>14386296</id><snippet>def calc_position(df):
  # sum of current positions + any new positions

  if entered_long(df).any():  # or .all()
</snippet></ROW><ROW><id>14386296</id><snippet>any()</snippet></ROW><ROW><id>14386296</id><snippet>entered_long(df)</snippet></ROW><ROW><id>14386296</id><snippet>all()</snippet></ROW><ROW><id>14386296</id><snippet>entered_long(df)</snippet></ROW><ROW><id>14386413</id><snippet>resp.set_cookie('sessionID', '', expires=0)
</snippet></ROW><ROW><id>14386413</id><snippet>0</snippet></ROW><ROW><id>14386680</id><snippet>q = SomeModel.objects.select_related().all()
print q.query

q = SomeModel.objects.all().select_related()
print q.query
</snippet></ROW><ROW><id>14386815</id><snippet>shell=True</snippet></ROW><ROW><id>14386815</id><snippet>subprocess.call('sort -k1,1 -k4,4n -k5,5n '+outpath+fnametempout,shell=True)
</snippet></ROW><ROW><id>14386815</id><snippet>with open(outpath+fnameout,'w') as fout: #context manager is OK since `call` blocks :)
    subprocess.call(cmd,stdout=fout)
</snippet></ROW><ROW><id>14386815</id><snippet>cmd</snippet></ROW><ROW><id>14386815</id><snippet>cmd = 'sort -k1,1 -k4,4n -k5,5n '+outpath+fnametempout
cmd = cmd.split()
</snippet></ROW><ROW><id>14386815</id><snippet>sort</snippet></ROW><ROW><id>14386815</id><snippet>str.split</snippet></ROW><ROW><id>14386815</id><snippet>shlex.split</snippet></ROW><ROW><id>14386815</id><snippet>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; cmd = "foo -b -c 'arg in quotes'"
&gt;&gt;&gt; print cmd.split()
['foo', '-b', '-c', "'arg", 'in', "quotes'"]
&gt;&gt;&gt; print shlex.split(cmd)
['foo', '-b', '-c', 'arg in quotes']
</snippet></ROW><ROW><id>14386866</id><snippet>dothis</snippet></ROW><ROW><id>14386866</id><snippet>vld</snippet></ROW><ROW><id>14386866</id><snippet>linux</snippet></ROW><ROW><id>14386866</id><snippet>csv.reader</snippet></ROW><ROW><id>14386866</id><snippet>inf = csv.reader(open('data.txt','r'))
sortedlist = sorted(inf, key=operator.itemgetter(2), reverse=True)

for row in sortedlist:
    src = row[0]
    dst = row[1]
    print src, dst
</snippet></ROW><ROW><id>14386947</id><snippet>partial</snippet></ROW><ROW><id>14386947</id><snippet>timed_method</snippet></ROW><ROW><id>14386947</id><snippet>self</snippet></ROW><ROW><id>14386947</id><snippet>method</snippet></ROW><ROW><id>14386947</id><snippet>import datetime
import traceback
from functools import partial

def db_log(*args, **kwargs): print args, kwargs # Mock


class BaseWrapper(object):
    def __init__(self, instance):
        self._instance = instance

    def __getattr__(self, attr):
        return getattr(self._instance, attr)


class DBLogWrapper(BaseWrapper):

    @staticmethod
    def _time_method(method):
        name = "{0}.{1}.{2}".format(
            method.im_class.__module__,
            method.im_class.__name__,
            method.__name__
        )

        def timed_method(*args, **kwargs):
            begin = datetime.datetime.now()
            return_val = method(*args, **kwargs)
            end = datetime.datetime.now()

            trace = traceback.format_stack()

            db_log(
                name,
                begin,
                end,
                info={
                    'args': args,
                    'kwargs': kwargs,
                    'trace': trace
                }
            )
            return return_val

        return timed_method

    def __init__(self, instance, methods):
        super(DBLogWrapper, self).__init__(instance)
        for method in methods:
            class_method = getattr(instance, method)
            wrapped_method = DBLogWrapper._time_method(class_method)
            setattr(self, method, wrapped_method)
</snippet></ROW><ROW><id>14386947</id><snippet>&gt;&gt;&gt; a = MyClass()
&gt;&gt;&gt; a = prova.DBLogWrapper(a, ['hello'])
&gt;&gt;&gt; a.hello()
A
('__main__.MyClass.hello', datetime.datetime(2013, 1, 17, 20, 48, 26, 478023), datetime.datetime(2013, 1, 17, 20, 48, 26, 478071)) {'info': {'args': (), 'trace': ['  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\n', '  File "prova.py", line 31, in timed_method\n    trace = traceback.format_stack()\n'], 'kwargs': {}}}
&gt;&gt;&gt; a.goodbye()
B
</snippet></ROW><ROW><id>14386947</id><snippet>__getattr__</snippet></ROW><ROW><id>14386947</id><snippet>class DBLogWrapper2(BaseWrapper):

    def __init__(self, instance, methods):
        super(DBLogWrapper, self).__init__(instance)

        self._methods = methods

    def __getattr__(self, attr):
        if attr not in methods:
            return getattr(self._instance, attr)

        def f(*args, **kwargs):
            return self.timed_method(getattr(self._item, attr),
                                     *args, **kwargs)
        return f

    def timed_method(method, *args, **kwargs):
        begin = datetime.datetime.now()
        return_val = method(*args, **kwargs)
        end = datetime.datetime.now()

        trace = traceback.format_stack()

        db_log(name,
            begin,
            end,
            info={
                'args': args,
                'kwargs': kwargs,
                'trace': trace
            }
        )
        return return_val
</snippet></ROW><ROW><id>14386954</id><snippet>self</snippet></ROW><ROW><id>14386954</id><snippet>i = 5
def f(arg = i): print arg
i = 6
f()
</snippet></ROW><ROW><id>14386954</id><snippet>None</snippet></ROW><ROW><id>14386954</id><snippet>def test(self, loc = None):
    if loc is None:
       loc = self.loc
    print loc
</snippet></ROW><ROW><id>14387017</id><snippet>def initialise_cache(vertices, s):
    cache = empty(vertices)
    cache[:] = float("inf")
    cache[s] = 0
    return cache    

adjacency_matrix = zeros((vertices, vertices))
adjacency_matrix[:] = float("inf")
for line in file.readlines():
    tail, head, weight = line.split(" ")
    adjacency_matrix[int(head)-1][int(tail)-1] = int(weight)    

n = vertices
shortest_paths = []
s=2

cache = initialise_cache(vertices, s)
for i in range(1, vertices):
    previous_cache = cache
    combined = (previous_cache.T + adjacency_matrix).min(axis=1)
    cache = minimum(previous_cache, combined)

shortest_paths.append([s, cache])
</snippet></ROW><ROW><id>14387374</id><snippet>from __future__ import division
import numpy as np

def slice_1(a, rs, cs) :
    return a[rs][:, cs]

def slice_2(a, rs, cs) :
    return a[rs[:, None], cs]

&gt;&gt;&gt; rows, cols = 3218, 6
&gt;&gt;&gt; rs = np.unique(np.random.randint(0, rows, size=(rows//2,)))
&gt;&gt;&gt; cs = np.unique(np.random.randint(0, cols, size=(cols//2,)))
&gt;&gt;&gt; a = np.random.rand(rows, cols)
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; print timeit.timeit('slice_1(a, rs, cs)',
                        'from __main__ import slice_1, a, rs, cs',
                        number=1000)
0.24083110865
&gt;&gt;&gt; print timeit.timeit('slice_2(a, rs, cs)',
                        'from __main__ import slice_2, a, rs, cs',
                        number=1000)
0.206566124519
</snippet></ROW><ROW><id>14387414</id><snippet>fixed-width</snippet></ROW><ROW><id>14387527</id><snippet>ManyToManyField</snippet></ROW><ROW><id>14387527</id><snippet>Area</snippet></ROW><ROW><id>14387527</id><snippet>return str(sum(f.Area() for f in self.flatbars.all()))
</snippet></ROW><ROW><id>14387783</id><snippet>join</snippet></ROW><ROW><id>14387783</id><snippet>a + ' ' + b + ' ' + c + ' ' + d</snippet></ROW><ROW><id>14387783</id><snippet>join</snippet></ROW><ROW><id>14387783</id><snippet>' '.join((a, b, c, d))
</snippet></ROW><ROW><id>14387783</id><snippet>2 4 5 7
4 5   9
  1   2
</snippet></ROW><ROW><id>14387783</id><snippet>(a, b, c, d)</snippet></ROW><ROW><id>14387783</id><snippet>' '.join(x for x in (a, b, c, d) if x)
</snippet></ROW><ROW><id>14387783</id><snippet>2 4 5 7
4 5 9
1 2
</snippet></ROW><ROW><id>14387783</id><snippet>None</snippet></ROW><ROW><id>14387783</id><snippet>' '</snippet></ROW><ROW><id>14387783</id><snippet>' '.join(x for x in (a, b, c, d) if x.strip())
</snippet></ROW><ROW><id>14387783</id><snippet>total = ' '.join(x for x in (a, b, c, d) if x)

total = ' '.join([x for x in (a, b, c, d) if x])

total = ' '.join(filter(bool, (a, b, c, d))

non_zero_values = []
for x in (a, b, c, d):
    if x:
        non_zero_values.append(x)
total = ' '.join(non_zero_values)
</snippet></ROW><ROW><id>14387783</id><snippet>((a + ' ') if a else '' +
 (b + ' ') if b else '' +
 (c + ' ') if c else '' +
  d if d else '')
</snippet></ROW><ROW><id>14387783</id><snippet>2 4 5 7
4 5 9
1 2
</snippet></ROW><ROW><id>14388003</id><snippet>RGB</snippet></ROW><ROW><id>14388003</id><snippet>BGR</snippet></ROW><ROW><id>14388003</id><snippet>cube</snippet></ROW><ROW><id>14388003</id><snippet>cube[:,:,0]</snippet></ROW><ROW><id>14388003</id><snippet>cube[:,:,2]</snippet></ROW><ROW><id>14388003</id><snippet>numpy</snippet></ROW><ROW><id>14388003</id><snippet>rgb = numpy.fliplr(cube.reshape(-1,3)).reshape(cube.shape)
</snippet></ROW><ROW><id>14388008</id><snippet>.join()</snippet></ROW><ROW><id>14388008</id><snippet>d = c['date']
'-'.join([d[:4], d[4:6], d[6:]])
</snippet></ROW><ROW><id>14388290</id><snippet>exit</snippet></ROW><ROW><id>14388290</id><snippet>return</snippet></ROW><ROW><id>14388290</id><snippet>Write-Host "$env:Path"
return 0
</snippet></ROW><ROW><id>14388332</id><snippet>&gt;&gt;&gt; hash((1,2))
1299869600
&gt;&gt;&gt; hash((2,1))
1499606158
</snippet></ROW><ROW><id>14388332</id><snippet>__eq__</snippet></ROW><ROW><id>14388332</id><snippet>&gt;&gt;&gt; t1 = 'a',hash('a') 
&gt;&gt;&gt; [hash(x) for x in t1]  #both elements in the tuple have same hash value since `int` hash to themselves in cpython
[-468864544, -468864544]
&gt;&gt;&gt; t2 = hash('a'),'a'
&gt;&gt;&gt; hash(t1)
1486610051
&gt;&gt;&gt; hash(t2)
1486610051
&gt;&gt;&gt; d = {t1:1,t2:2}  #This is OK.  dict's don't fail when there is a hash collision
&gt;&gt;&gt; d
{('a', -468864544): 1, (-468864544, 'a'): 2}
&gt;&gt;&gt; d[t1]+=7
&gt;&gt;&gt; d[t1]
8
&gt;&gt;&gt; d[t1]+=7
&gt;&gt;&gt; d[t1]
15
&gt;&gt;&gt; d[t2]   #didn't touch d[t2] as expected.
2
</snippet></ROW><ROW><id>14388356</id><snippet>.fetchall()</snippet></ROW><ROW><id>14388356</id><snippet>.fetchall()</snippet></ROW><ROW><id>14388549</id><snippet>//4
trans(2,2) += image.rows;
</snippet></ROW><ROW><id>14389000</id><snippet>string</snippet></ROW><ROW><id>14389000</id><snippet>do_twice</snippet></ROW><ROW><id>14389000</id><snippet>do_twice</snippet></ROW><ROW><id>14389000</id><snippet>print_spam</snippet></ROW><ROW><id>14389000</id><snippet>string</snippet></ROW><ROW><id>14389000</id><snippet>def do_twice(f, g):
    f(g)
    f(g)

def print_spam(s):
    print (s)

do_twice(print_spam,'lol')
</snippet></ROW><ROW><id>14389000</id><snippet>lol
lol
</snippet></ROW><ROW><id>14389059</id><snippet>handler = logging.FileHandler(filename)
formatter = logging.Formatter(newformat)
handler.setFormatter(formatter)

log = logging.getLogger(yourloggername)
log.setHandler(handler)
log.propagate = False   # don't send messages to the root, handle it all here
</snippet></ROW><ROW><id>14389181</id><snippet>sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/lib/libmysqlclient.18.dylib

sudo ln -s /usr/local/mysql/lib /usr/local/mysql/lib/mysql
</snippet></ROW><ROW><id>14389347</id><snippet>zlib.{de,}compressobj()</snippet></ROW><ROW><id>14389347</id><snippet>bz2</snippet></ROW><ROW><id>14389502</id><snippet>wave.py</snippet></ROW><ROW><id>14389502</id><snippet>import wave

print wave.__file__
</snippet></ROW><ROW><id>14389780</id><snippet>email</snippet></ROW><ROW><id>14389780</id><snippet>email.parser.FeedParser</snippet></ROW><ROW><id>14389780</id><snippet>email.message.Message</snippet></ROW><ROW><id>14389780</id><snippet>Subject</snippet></ROW><ROW><id>14389780</id><snippet>is_multipart()</snippet></ROW><ROW><id>14389780</id><snippet>walk()</snippet></ROW><ROW><id>14389780</id><snippet>Content-Disposition</snippet></ROW><ROW><id>14389780</id><snippet>attachment</snippet></ROW><ROW><id>14389780</id><snippet>get_payload()</snippet></ROW><ROW><id>14390053</id><snippet>from git import *
from time import (time, altzone)
import datetime
from cStringIO import StringIO
from gitdb import IStream

repo = Repo('path/to/repo')

message = 'Commit message'

tree = repo.index.write_tree()
parents = [ repo.head.commit ]

# Committer and Author
cr = repo.config_reader()
committer = Actor.committer(cr)
author = Actor.author(cr)

# Custom Date
time = int(datetime.date(2013, 1, 1).strftime('%s'))
offset = altzone
author_time, author_offset = time, offset
committer_time, committer_offset = time, offset

# UTF-8 Default
conf_encoding = 'UTF-8'

comm = Commit(repo, Commit.NULL_BIN_SHA, tree, 
      author, author_time, author_offset, 
      committer, committer_time, committer_offset,
      message, parents, conf_encoding)
</snippet></ROW><ROW><id>14390053</id><snippet>stream = StringIO()
new_commit._serialize(stream)
streamlen = stream.tell()
stream.seek(0)

istream = repo.odb.store(IStream(Commit.type, streamlen, stream))
new_commit.binsha = istream.binsha
</snippet></ROW><ROW><id>14390053</id><snippet>repo.head.set_commit(new_commit, logmsg="commit: %s" % message)
</snippet></ROW><ROW><id>14390079</id><snippet>super</snippet></ROW><ROW><id>14390079</id><snippet>__init__</snippet></ROW><ROW><id>14390079</id><snippet>super</snippet></ROW><ROW><id>14390079</id><snippet>class CCanvas(tk.Canvas, object):</snippet></ROW><ROW><id>14390079</id><snippet>super</snippet></ROW><ROW><id>14390079</id><snippet>self</snippet></ROW><ROW><id>14390079</id><snippet>def __init__(self,master,*args,**kwargs):
    TkInter.Canvas.__init__(self, master=master, *args, **kwargs)
</snippet></ROW><ROW><id>14390079</id><snippet>super</snippet></ROW><ROW><id>14390220</id><snippet>next()</snippet></ROW><ROW><id>14390220</id><snippet>reader</snippet></ROW><ROW><id>14390220</id><snippet>DictReader</snippet></ROW><ROW><id>14390220</id><snippet>with open('myfile.csv', 'rU') as myfile:
    for row in csv.reader(myfile):
</snippet></ROW><ROW><id>14390220</id><snippet>with open('myfile.csv', 'rU') as myfile:
    filtered = (line.replace('\r', '') for line in myfile)
    for row in csv.reader(filtered):
</snippet></ROW><ROW><id>14390220</id><snippet>'\r'</snippet></ROW><ROW><id>14390220</id><snippet>^M</snippet></ROW><ROW><id>14390220</id><snippet>^M</snippet></ROW><ROW><id>14390220</id><snippet>sed</snippet></ROW><ROW><id>14390220</id><snippet>tr</snippet></ROW><ROW><id>14390220</id><snippet>gsed -i'' 's/\r//g' myfile.csv
</snippet></ROW><ROW><id>14390220</id><snippet>os.rename('myfile.csv', 'myfile.csv.bak')
with open('myfile.csv.bak', 'rU') as infile, open('myfile.csv', 'wU') as outfile:
    for line in infile:
        outfile.write(line.replace('\r'))
os.remove('myfile.csv.bak')
</snippet></ROW><ROW><id>14390220</id><snippet>temp = tempfile.NamedTemporaryFile(delete=False)
with open('myfile.csv', 'rU') as myfile, closing(temp):
    for line in myfile:
        temp.write(line.replace('\r'))
os.rename(tempfile.name, 'myfile.csv')
</snippet></ROW><ROW><id>14390238</id><snippet>block_size</snippet></ROW><ROW><id>14390238</id><snippet>block_size</snippet></ROW><ROW><id>14390238</id><snippet>from Crypto.Cipher import AES
from Crypto import Random

key = b'Sixteen byte key'
iv = Random.new().read(AES.block_size)
cipher = AES.new(key, AES.MODE_CFB, iv)
msg = iv + cipher.encrypt(b'Attack at dawn')
</snippet></ROW><ROW><id>14390379</id><snippet>index.delete_schema()</snippet></ROW><ROW><id>14390379</id><snippet>index.deleteSchema()</snippet></ROW><ROW><id>14390380</id><snippet>se</snippet></ROW><ROW><id>14390380</id><snippet>0</snippet></ROW><ROW><id>14390380</id><snippet>&gt; 0</snippet></ROW><ROW><id>14390380</id><snippet>0</snippet></ROW><ROW><id>14390380</id><snippet>se = {0 if element &gt; 0 else element for element in se}
</snippet></ROW><ROW><id>14390380</id><snippet>se = {min(element, 0) for element in se}
</snippet></ROW><ROW><id>14390380</id><snippet>se[i]</snippet></ROW><ROW><id>14390380</id><snippet>se([i])</snippet></ROW><ROW><id>14390380</id><snippet>set</snippet></ROW><ROW><id>14390380</id><snippet>for element in se.copy():
    if element &gt; 0:
        se.remove(element)
        se.add(0)
</snippet></ROW><ROW><id>14390380</id><snippet>se.copy()</snippet></ROW><ROW><id>14390380</id><snippet>0</snippet></ROW><ROW><id>14390380</id><snippet>&gt;&gt;&gt; se = { -3, -2, -1, 0, 1, 2, 3 }
&gt;&gt;&gt; print se
set([0, 1, 2, 3, -1, -3, -2])
&gt;&gt;&gt; se = {min(element, 0) for element in se}
&gt;&gt;&gt; print se
set([0, -2, -3, -1])
</snippet></ROW><ROW><id>14390380</id><snippet>print</snippet></ROW><ROW><id>14390380</id><snippet>&gt;&gt;&gt; se =set()
&gt;&gt;&gt; se.update([8])
&gt;&gt;&gt; print (se)
set([8])
&gt;&gt;&gt; for i in range (10):
...     se.update([i])
&gt;&gt;&gt; print se
set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
&gt;&gt;&gt; se = {min(element, 0) for element in se}
&gt;&gt;&gt; print se
set([0])
</snippet></ROW><ROW><id>14390409</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>14390409</id><snippet>test_gen</snippet></ROW><ROW><id>14390409</id><snippet>unittest</snippet></ROW><ROW><id>14390409</id><snippet>nose</snippet></ROW><ROW><id>14390409</id><snippet>from fib import fib
from nose.tools import timed

fib = timed(.001)(fib)

def execute(username, fib_arg, expected_output):
    result = fib(fib_arg)
    assert result == expected_output, ('%s fib(%d) got %d, expected %d'
                                       % (username, fib_arg, result, expected_output))

def test_fib():
    for name, datasets in (('user', ((40, 102334155), (2, 1), (5, 5))),):
        for arg, expected in datasets:
            yield execute, name, arg, expected
</snippet></ROW><ROW><id>14390487</id><snippet>reshape</snippet></ROW><ROW><id>14390487</id><snippet>In [4]: a.values.reshape(2,2)
Out[4]: 
array([[1, 2],
       [3, 4]], dtype=int64)
</snippet></ROW><ROW><id>14390487</id><snippet>reshape</snippet></ROW><ROW><id>14390487</id><snippet>a.reshape?</snippet></ROW><ROW><id>14390487</id><snippet>Docstring:  See numpy.ndarray.reshape</snippet></ROW><ROW><id>14390523</id><snippet>xpath1 = "tbody/tr"
r = requests.post(url,data)
html = lxml.html.fromstring(r.text)
rows = html.xpath(xpath1)
data = list()
for row in rows:
    data.append([c.text for c in row.getchildren()])
</snippet></ROW><ROW><id>14390523</id><snippet>[['Smth1'], ['Smth2'], ['Smth3'], ['Smth4']]
</snippet></ROW><ROW><id>14390523</id><snippet>xpath1 = "tbody/tr/*/text()"
r = requests.post(url,data)
html = lxml.html.fromstring(r.text)
data = html.xpath(xpath1)
</snippet></ROW><ROW><id>14390531</id><snippet>ax = fig.add_axes()
ax.contourf(..)
keep_lst = ax.get_children()[:] # state of the figure before adding anything extra

for plot_pram in conditions:
    # your plotting code

    fig.savefig()

    cur_children = ax.get_children()[:]
    # all the extra stuff you just plotted on it
    for a in cur_children:
        if a not in keep_lst:
            # if the artist isn't part of the initial set up, remove it
            a.remove()
</snippet></ROW><ROW><id>14390537</id><snippet>scipy.sparse.spdiags(v, 0, len(v), len(v)) * A
</snippet></ROW><ROW><id>14390537</id><snippet>A_csc.data = A_csc.data * v[A_csc.indices]
</snippet></ROW><ROW><id>14390537</id><snippet>from __future__ import division
import numpy as np
import scipy.sparse as sps
import timeit

A_csr = None
A_csc = None
v = None

def time_row_scaling(n, dens) :
    global A_csr, A_csc, v
    v = np.random.rand(n)
    A_csr = sps.rand(n, n, density=dens, format='csr')
    A_csc = A_csr.tocsc()
    def row_scale(A_csc, v) :
        A_csc.data = A_csc.data * v[A_csc.indices]
    row_scaled_1 = sps.spdiags(v, 0, n , n) * A_csr
    row_scaled_2 = sps.spdiags(v, 0, n , n) * A_csc
    row_scale(A_csc, v)
    if n &lt; 1000 :
        np.testing.assert_almost_equal(row_scaled_1.toarray(),
                                       row_scaled_2.toarray())
        np.testing.assert_almost_equal(row_scaled_1.toarray(),
                                       A_csc.toarray())
    A_csc = A_csr.tocsc()
    t1 = timeit.timeit('sps.spdiags(v, 0, len(v) , len(v)) * A_csr',
                       'from __main__ import sps, v, A_csr',
                       number=1)
    t2 = timeit.timeit('sps.spdiags(v, 0, len(v), len(v)) * A_csc',
                       'from __main__ import sps, v, A_csc',
                       number=1)
    t3 = timeit.timeit('A_csc.data = A_csc.data * v[A_csc.indices]',
                       'from __main__ import A_csc, v',
                       number=1)
    print t1, t2, t3

&gt;&gt;&gt; time_row_scaling(1000, 0.01)
0.00100659830939 0.00102425072673 0.000231944553347
&gt;&gt;&gt; time_row_scaling(1000, 0.1)
0.0017328105481 0.00311339379218 0.00239826562947
&gt;&gt;&gt; time_row_scaling(10000, 0.01)
0.0162369397769 0.0359325217874 0.0216837368279
&gt;&gt;&gt; time_row_scaling(10000, 0.1)
0.167978350747 0.492032396702 0.209231639536
</snippet></ROW><ROW><id>14390687</id><snippet>onvalidation</snippet></ROW><ROW><id>14390737</id><snippet>def __hash__(self):
    return hash((self.attr1, self.attr2, self.attr3))
</snippet></ROW><ROW><id>14390875</id><snippet>import threading

def poll_position(fobj, seconds=0.5):
    """Call once to repeatedly get statistics every N seconds."""
    position = getMotorPosition()

    # Do something with the position.
    # Could store it in a (global) variable or log it to file.
    print position
    fobj.write(position + '\n')

    # Set a timer to run this function again.
    t = threading.Timer(seconds, poll_position, args=[fobj, seconds])
    t.daemon = True
    t.start()

def control_loop(positions, velocity):
    """Repeatedly moves the motor through a list of positions at a given velocity."""
    while True:
        for position in positions:
            moveMotorToPosition(position, velocity)

if __name__ == '__main__':
    # Start the position gathering thread.
    poll_position()
    # Define `position` and `velocity` as it relates to `moveMotorToPosition()`.
    control_loop([first_position, second_position], velocity)
</snippet></ROW><ROW><id>14390957</id><snippet>run*</snippet></ROW><ROW><id>14390957</id><snippet>import pdb
pdb.runcall(my_wonky_function, "arg1", "arg2", *myargs)
</snippet></ROW><ROW><id>14390969</id><snippet>libpython2.7.a</snippet></ROW><ROW><id>14390969</id><snippet>--enable-shared</snippet></ROW><ROW><id>14390969</id><snippet>-lpython2.7 -L/path/where/you/installed/python/lib</snippet></ROW><ROW><id>14391045</id><snippet>ast</snippet></ROW><ROW><id>14391045</id><snippet>print</snippet></ROW><ROW><id>14391045</id><snippet>print()</snippet></ROW><ROW><id>14391045</id><snippet>print_function</snippet></ROW><ROW><id>14391045</id><snippet>import ast

class PrintFinder(ast.NodeVisitor):
    def __init__(self):
        self.prints_found = []

    def visit_Print(self, node):
        self.prints_found.append(node)
        super(PrintFinder, self).generic_visit(node)

    def visit_Call(self, node):
        if getattr(node.func, 'id', None) == 'print':
            self.prints_found.append(node)
        super(PrintFinder, self).generic_visit(node)


def find_print_statements(filename):
    with open(filename, 'r') as f:
        tree = ast.parse(f.read())
    parser = PrintFinder()
    parser.visit(tree)
    return parser.prints_found

print 'hi'
for node in find_print_statements(__file__):
    print 'print statement on line %d' % node.lineno
</snippet></ROW><ROW><id>14391266</id><snippet>not n &amp; 1</snippet></ROW><ROW><id>14391266</id><snippet>True</snippet></ROW><ROW><id>14391266</id><snippet>  11 = 00001011 (Not divisible by 2)      28 = 00011100 (Divisible by 2)
&amp;  1 = 00000001                         &amp;  1 = 00000001
---------------                         ---------------
       00000001                                00000000
</snippet></ROW><ROW><id>14391278</id><snippet>words_list += word
</snippet></ROW><ROW><id>14391278</id><snippet>+=</snippet></ROW><ROW><id>14391278</id><snippet>words_list.append(word)
</snippet></ROW><ROW><id>14391328</id><snippet>mapinfo</snippet></ROW><ROW><id>14391328</id><snippet>make_graph()</snippet></ROW><ROW><id>14391328</id><snippet>mapinfo = {"width": 8, "height": 8}
graph, nodes = make_graph(mapinfo)
</snippet></ROW><ROW><id>14391328</id><snippet>make_graph()</snippet></ROW><ROW><id>14391328</id><snippet>width</snippet></ROW><ROW><id>14391328</id><snippet>height</snippet></ROW><ROW><id>14391328</id><snippet>mapinfo</snippet></ROW><ROW><id>14391328</id><snippet>mapinfo.height</snippet></ROW><ROW><id>14391328</id><snippet>AttributeError: 'dict' object has no attribute 'height'</snippet></ROW><ROW><id>14391328</id><snippet>make_graph()</snippet></ROW><ROW><id>14391328</id><snippet>mapinfo.height</snippet></ROW><ROW><id>14391328</id><snippet>mapinfo['height']</snippet></ROW><ROW><id>14391328</id><snippet>make_graph()</snippet></ROW><ROW><id>14391328</id><snippet>class MapInfo(object):
    def __init__(self, width, height):
        self.width = width
        self.height = height

# ...

mapinfo = MapInfo(width=8, height=8)
graph, nodes = make_graph(mapinfo)
</snippet></ROW><ROW><id>14391328</id><snippet>MapInfo</snippet></ROW><ROW><id>14391328</id><snippet>def __init__(self, width, height, impassable=[]):
    """Create a MapInfo object representing the search area and obstacles.

        Args:
            width: Integer representing the width of the area
            height: Integer representing the height of the area
            impassable: List of (x, y) tuples representing impassable obstacles.
    """
    self.width = width
    self.height = height
    self.impassable = impassable
</snippet></ROW><ROW><id>14391328</id><snippet>make_graph()</snippet></ROW><ROW><id>14391328</id><snippet>for i, j in product([-1, 0, 1], [-1, 0, 1]):
    # Check that we are inside the grid area.
    if not (0 &lt;= x + i &lt; mapinfo.width): continue
    if not (0 &lt;= y + j &lt; mapinfo.height): continue
    # Check if the target area is impassable.
    if (x + i, y + j) in mapinfo.impassable: continue
    # All looks good. Add target space as reachable from current (x, y) space.
    graph[nodes[x][y]].append(nodes[x+i][y+j])
</snippet></ROW><ROW><id>14391328</id><snippet>mapinfo</snippet></ROW><ROW><id>14391328</id><snippet>impassable = [(3, 3), (3, 4), (3, 5)]  # modify to your needs
mapinfo = MapInfo(width=8, height=8, impassable=impassable)
</snippet></ROW><ROW><id>14391345</id><snippet>disconnect()</snippet></ROW><ROW><id>14392097</id><snippet>pygame.surfarray</snippet></ROW><ROW><id>14392097</id><snippet>pygame.surfarray.pixels3d</snippet></ROW><ROW><id>14392097</id><snippet>(rows, cols, 3)</snippet></ROW><ROW><id>14392097</id><snippet>import numpy
surf_array = pygame.surfarray.pixels3d(surface)
window_array = numpy.zeros(surf_array.shape[:2], dtype=numpy.int8)
...
surf_array[numpy.nonzero(window_array == 1)] = np.array([0, 0, 0])
surf_array[numpy.nonzero(window_array == 2)] = np.array([50, 50, 50])
</snippet></ROW><ROW><id>14392097</id><snippet>pygame.display.update</snippet></ROW><ROW><id>14392206</id><snippet>from functools import wraps
from multiprocessing import Process

class TimeoutError(Exception):
    pass

def timeout(seconds=5, error_message="Timeout"):
    def decorator(func):
        def wrapper(*args, **kwargs):
            process = Process(None, func, None, args, kwargs)
            process.start()
            process.join(seconds)
            if process.is_alive():
                process.terminate()
                raise TimeoutError(error_message)

        return wraps(func)(wrapper)
    return decorator
</snippet></ROW><ROW><id>14392206</id><snippet>import time

@timeout()
def test_timeout(a, b, c):
    time.sleep(1)

@timeout(1)
def test_timeout2():
    time.sleep(2)

if __name__ == '__main__':
    test_timeout(1, 2, 3)

    test_value = False
    try:
        test_timeout2()
    except TimeoutError as e:
        test_value = True

    assert test_value
</snippet></ROW><ROW><id>14392321</id><snippet>/etc/apt/sources.list</snippet></ROW><ROW><id>14392321</id><snippet>deb-src</snippet></ROW><ROW><id>14392321</id><snippet>deb</snippet></ROW><ROW><id>14392321</id><snippet>deb</snippet></ROW><ROW><id>14392321</id><snippet>deb-src</snippet></ROW><ROW><id>14392321</id><snippet>sudo apt-get update
sudo apt-get build-dep psycopg2
</snippet></ROW><ROW><id>14392453</id><snippet> numpy.all(a, axis=None, out=None)

    Test whether all array elements along a given axis evaluate to True.
    Parameters :    

    a : array_like

        Input array or object that can be converted to an array.
</snippet></ROW><ROW><id>14392453</id><snippet>def all(a,axis=None, out=None):
    try:
        all = a.all
    except AttributeError:
        return _wrapit(a, 'all', axis, out)
    return all(axis, out)

def _wrapit(obj, method, *args, **kwds):
    try:
        wrap = obj.__array_wrap__
    except AttributeError:
        wrap = None
    result = getattr(asarray(obj),method)(*args, **kwds)
    if wrap:
        if not isinstance(result, mu.ndarray):
            result = asarray(result)
        result = wrap(result)
    return result
</snippet></ROW><ROW><id>14392453</id><snippet>all</snippet></ROW><ROW><id>14392453</id><snippet>_wrapit</snippet></ROW><ROW><id>14392453</id><snippet>_wrapit</snippet></ROW><ROW><id>14392453</id><snippet>__array_wrap__</snippet></ROW><ROW><id>14392453</id><snippet>generates AttributeError</snippet></ROW><ROW><id>14392453</id><snippet>asarray</snippet></ROW><ROW><id>14392453</id><snippet>numpy.asarray</snippet></ROW><ROW><id>14392453</id><snippet> numpy.asarray(a, dtype=None, order=None)

    Convert the input to an array.
    Parameters :    

    a : array_like

        Input data, in any form that can be converted to an array. This includes lists, lists of tuples, tuples, tuples of tuples, tuples of lists and ndarrays.
</snippet></ROW><ROW><id>14392453</id><snippet>&gt;&gt;&gt; np.asarray(0 for i in range(10))
array(&lt;generator object &lt;genexpr&gt; at 0x42740828&gt;, dtype=object)
</snippet></ROW><ROW><id>14392455</id><snippet>class MyModel(models.Model):
    my_id = models.IntegerField(unique=True)
</snippet></ROW><ROW><id>14392455</id><snippet>my_id</snippet></ROW><ROW><id>14392455</id><snippet>my_id</snippet></ROW><ROW><id>14392483</id><snippet>django.core.context_processors.request</snippet></ROW><ROW><id>14392483</id><snippet>RequestContext</snippet></ROW><ROW><id>14392483</id><snippet>return render_to_response('my_template.html', 
                        my_data_dictionary,  
                        context_instance=RequestContext(request))
</snippet></ROW><ROW><id>14392483</id><snippet>request</snippet></ROW><ROW><id>14392483</id><snippet>{{ request.get_full_path() }}</snippet></ROW><ROW><id>14392678</id><snippet>import matplotlib.pyplot as plt
plt.plot([7,8,9,10], [1,4,9,16], 'yo')
plt.plot([1,9,11,12], [1,4,9,16], 'ro')
plt.xlim(xmin=7)
plt.show()
</snippet></ROW><ROW><id>14392678</id><snippet>import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.plot([7,8,9,10], [1,4,9,16], 'yo')
ax.plot([1,9,11,12], [1,4,9,16], 'ro')
ax.set_xlim(xmin=7)
plt.show()
</snippet></ROW><ROW><id>14392678</id><snippet>ax.&lt;Tab&gt;</snippet></ROW><ROW><id>14392989</id><snippet>np.lexsort</snippet></ROW><ROW><id>14392989</id><snippet>import numpy as np
a = np.array([ 1.+2.j, 5.+0.j, 1.+0.j, 1.+1.j, 1.+1.j, 1.-1.j, 6.+0.j,
               1.-1.j, 1.-2.j])
sorted_idx = np.lexsort((np.sign(a.imag), np.abs(a.imag), a.real))
&gt;&gt;&gt; a[sorted_idx]
array([ 1.+0.j,  1.-1.j,  1.-1.j,  1.+1.j,  1.+1.j,  1.-2.j,  1.+2.j,
        5.+0.j,  6.+0.j])
</snippet></ROW><ROW><id>14393067</id><snippet>self.files.getlist('images')</snippet></ROW><ROW><id>14393067</id><snippet>clean</snippet></ROW><ROW><id>14393067</id><snippet>def clean_images(self):
    files = self.files.getlist('images')
    for file in files:
        if file:
            if file._size &gt; 15*1024*1024:
                raise forms.ValidationError("Image file is too large ( &gt; 15mb ).")
        else:
            raise forms.ValidationError("Could not read the uploaded file.")
    return files
</snippet></ROW><ROW><id>14393095</id><snippet>  t1 = threading.Thread(target=task1)
  t1.start()
  t1.join() # this tells to wait until job is done (url crawl)

  #thread.start_new_thread(task1)
</snippet></ROW><ROW><id>14393608</id><snippet>from pylab import *
import time

ion()

tstart = time.time()               # for profiling
x = arange(0,2*pi,0.01)            # x-array
line, = plot(x,sin(x))
for i in arange(1,200):
    line.set_ydata(sin(x+i/10.0))  # update the data
    draw()                         # redraw the canvas

print 'FPS:' , 200/(time.time()-tstart)
</snippet></ROW><ROW><id>14393708</id><snippet>defaultdict</snippet></ROW><ROW><id>14393708</id><snippet>from collections import defaultdict
counts = defaultdict(int)
with open("file.txt") as f:
    for line in f:
        id, content = line.split("\\t")
        if "$" in content:
            counts[id] += 1
</snippet></ROW><ROW><id>14393708</id><snippet>id</snippet></ROW><ROW><id>14393708</id><snippet>$</snippet></ROW><ROW><id>14393760</id><snippet>import requests # pip install requests

url = 'https://api.twilio.com/2010-04-01/Accounts/abc/SMS/Messages.json'
r = requests.post(url, dict(
        From='+17035551212',
        To='+17035551212',
        Body='This is a test'), auth=('foo', 'bar'))

print(r.headers)
print(r.text) # or r.json()
</snippet></ROW><ROW><id>14393760</id><snippet>from base64 import b64encode
from urllib.parse import urlencode
from urllib.request import Request, urlopen

user, password = 'foo', 'bar'
url = 'https://api.twilio.com/2010-04-01/Accounts/abc/SMS/Messages.json'
data = urlencode(dict(From='+17035551212', To='+17035551212', 
                      Body='This is a test')).encode('ascii')
headers = {'Authorization': b'Basic ' +
        b64encode((user + ':' + password).encode('utf-8'))}
cafile = 'cacert.pem' # http://curl.haxx.se/ca/cacert.pem
response = urlopen(Request(url, data, headers), cafile=cafile)

print(response.info())
print(response.read().decode()) # assume utf-8 (likely for application/json)
</snippet></ROW><ROW><id>14394021</id><snippet>open("test.py", O_RDONLY)               = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=36, ...}) = 0
mmap(NULL, 65536, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x2ad626cdd000
</snippet></ROW><ROW><id>14394299</id><snippet>join</snippet></ROW><ROW><id>14394299</id><snippet>join</snippet></ROW><ROW><id>14394431</id><snippet>python setup.py py2app --packages nibabel
</snippet></ROW><ROW><id>14394431</id><snippet>python setup.py py2app --packages nibabel
</snippet></ROW><ROW><id>14394510</id><snippet>from robot.libraries.BuiltIn import BuiltIn
results_path = BuiltIn().get_variable_value("${RESULTS_PATH}")
</snippet></ROW><ROW><id>14394539</id><snippet>&gt;&gt;&gt; def samesign(a, b):
        return a * b &gt; 0

&gt;&gt;&gt; def bisect(func, low, high):
    'Find root of continuous function where f(low) and f(high) have opposite signs'

    assert not samesign(func(low), func(high))

    for i in range(54):
        midpoint = (low + high) / 2.0
        if samesign(func(low), func(midpoint)):
            low = midpoint
        else:
            high = midpoint

    return midpoint

&gt;&gt;&gt; def f(x):
        return -26 + 85*x - 91*x**2 +44*x**3 -8*x**4 + x**5

&gt;&gt;&gt; x = bisect(f, 0, 1)
&gt;&gt;&gt; print x, f(x)
0.557025516287 3.74700270811e-16
</snippet></ROW><ROW><id>14394658</id><snippet>def leave_class</snippet></ROW><ROW><id>14394658</id><snippet>     for method in node.methods():
        if not method.name.startswith('_'):
            nb_public_methods += 1
</snippet></ROW><ROW><id>14394658</id><snippet>     for method in node.methods():
        if not method.name.startswith('_') and method.parent == node:
            nb_public_methods += 1
</snippet></ROW><ROW><id>14394658</id><snippet>method.parent</snippet></ROW><ROW><id>14394658</id><snippet>leave_class</snippet></ROW><ROW><id>14394658</id><snippet>node</snippet></ROW><ROW><id>14394658</id><snippet>MAX_NUMBER_PUBLIC_METHODS = 3
class PublicMethodsChecker(BaseChecker):
    __implements__ = (IASTNGChecker,)

    name = 'custom-public-methods-checker'

    msgs = {
        "C1002": ('Too many public methods (%s/%s)',
              'Used when class has too many public methods, try to reduce \
               this to get a more simple (and so easier to use) class.'),
    }

    def leave_class(self, node):
        """check number of public methods"""
        nb_public_methods = 0
        print type(node)
        for method in node.methods():
            if not method.name.startswith('_') and method.parent == node:
                nb_public_methods += 1
        if nb_public_methods &gt; MAX_NUMBER_PUBLIC_METHODS:
             self.add_message('C1002',
                         node=node,
                         args=(nb_public_methods, MAX_NUMBER_PUBLIC_METHODS))
</snippet></ROW><ROW><id>14394723</id><snippet>Round</snippet></ROW><ROW><id>14394723</id><snippet>favorite</snippet></ROW><ROW><id>14394723</id><snippet>Round</snippet></ROW><ROW><id>14394723</id><snippet>favorite</snippet></ROW><ROW><id>14394723</id><snippet>Submission</snippet></ROW><ROW><id>14394723</id><snippet>Submission.DoesNotExist</snippet></ROW><ROW><id>14394732</id><snippet>a</snippet></ROW><ROW><id>14394732</id><snippet>d</snippet></ROW><ROW><id>14394732</id><snippet>In [1]: a = ('chicken',1,'lemon','watermelon','camel')

In [2]: d = {0:'apple',1:'banana',2:'lemon',3:'watermelon'}

In [3]: b = tuple(d.get(x, x) for x in a)

In [4]: b
Out[4]: ('chicken', 'banana', 'lemon', 'watermelon', 'camel')

In [5]: type(b)
Out[5]: &lt;type 'tuple'&gt;
</snippet></ROW><ROW><id>14395336</id><snippet>write</snippet></ROW><ROW><id>14395336</id><snippet>flush</snippet></ROW><ROW><id>14395336</id><snippet>threading.current_thread().ident</snippet></ROW><ROW><id>14395336</id><snippet>sys.stdout.flush</snippet></ROW><ROW><id>14395336</id><snippet>import sys
from contextlib import contextmanager


stdout_lock = threading.Lock()

@contextmanager
def set_stdout_parent(parent):
    """a context manager for setting a particular parent for sys.stdout

    the parent determines the destination cell of output
    """
    save_parent = sys.stdout.parent_header

    # we need a lock, so that other threads don't snatch control
    # while we have set a temporary parent
    with stdout_lock:
        sys.stdout.parent_header = parent
        try:
            yield
        finally:
            # the flush is important, because that's when the parent_header actually has its effect
            sys.stdout.flush()
            sys.stdout.parent_header = save_parent
</snippet></ROW><ROW><id>14395336</id><snippet>import threading

class counterThread(threading.Thread):
    def run(self):
        # record the parent when the thread starts
        thread_parent = sys.stdout.parent_header
        for i in range(3):
            time.sleep(2)
            # then ensure that the parent is the same as when the thread started
            # every time we print
            with set_stdout_parent(thread_parent):
                print i
</snippet></ROW><ROW><id>14395372</id><snippet>cvtColor(img_rgb,img_hsv,CV_RGB2HSV);
</snippet></ROW><ROW><id>14395372</id><snippet>for(int row=0;row&lt;height;row++)
{
    for(int col=0;col&lt;width;col++)
    {
        Vec3b data = image_rgb.at&lt;Vec3b&gt;(row,col);

        Vec3b data_hsv;
        data_hsv[0] = // process red channel of pixel with data[0]
        data_hsv[1] = // process green channel of pixel with data[1]
        data_hsv[2] = // process blue channel of pixel with data[2]


        image_hsv.at&lt;Vec3b&gt;(row,col)[0] = data_hsv[0];
        image_hsv.at&lt;Vec3b&gt;(row,col)[1] = data_hsv[1];
        image_hsv.at&lt;Vec3b&gt;(row,col)[2] = data_hsv[2];
    }
}
</snippet></ROW><ROW><id>14396030</id><snippet>0</snippet></ROW><ROW><id>14396030</id><snippet>0</snippet></ROW><ROW><id>14396030</id><snippet>0</snippet></ROW><ROW><id>14396030</id><snippet>1</snippet></ROW><ROW><id>14396030</id><snippet>0</snippet></ROW><ROW><id>14396030</id><snippet>1</snippet></ROW><ROW><id>14396030</id><snippet>Yes/No</snippet></ROW><ROW><id>14396030</id><snippet>Success/Failure</snippet></ROW><ROW><id>14396030</id><snippet>True/False</snippet></ROW><ROW><id>14396030</id><snippet>True</snippet></ROW><ROW><id>14396030</id><snippet>False</snippet></ROW><ROW><id>14396158</id><snippet>return</snippet></ROW><ROW><id>14396158</id><snippet>if len(temp_blocks) == 1:
    return _searchblocks(temp_blocks[0].children, left_edge, right_edge)
    ^^^^^^
</snippet></ROW><ROW><id>14396158</id><snippet>None</snippet></ROW><ROW><id>14396265</id><snippet>dis</snippet></ROW><ROW><id>14396265</id><snippet>In [24]: def func():
   ....:     a=set([1,2,3])
   ....:     b=set([3,4,5])
   ....:     c=[i for i in xrange(10) if i in a.union(b)]
   ....:     

In [25]: dis.dis(func)

  4          42 BUILD_LIST               0
             45 LOAD_GLOBAL              1 (xrange)
             48 LOAD_CONST               6 (10)
             51 CALL_FUNCTION            1
             54 GET_ITER                          #iterator returned from xrange

        &gt;&gt;   55 FOR_ITER                33 (to 91) #until the iterator is not exhausted
             58 STORE_FAST               2 (i)
             61 LOAD_FAST                2 (i)
             64 LOAD_FAST                0 (a)
             67 LOAD_ATTR                2 (union)
             70 LOAD_FAST                1 (b)
             73 CALL_FUNCTION            1      #union() is being called in each iteration
             76 COMPARE_OP               6 (in)
             79 POP_JUMP_IF_FALSE       55
             82 LOAD_FAST                2 (i)
             85 LIST_APPEND              2
             88 JUMP_ABSOLUTE           55
                                                         #end of loop    
        &gt;&gt;   91 STORE_FAST               3 (c)
             94 LOAD_CONST               0 (None)
             97 RETURN_VALUE 
</snippet></ROW><ROW><id>14396265</id><snippet>len(mylist)</snippet></ROW><ROW><id>14396274</id><snippet>&gt;&gt;&gt; binarystring = "asddfsdf"
&gt;&gt;&gt; tmp = long(binarystring.encode('hex'),16)
&gt;&gt;&gt; ( "%x" % tmp ).decode('hex')
'asddfsdf'
</snippet></ROW><ROW><id>14396438</id><snippet>Gdk.threads_add_idle(GLib.PRIORITY_DEFAULT_IDLE, self._idle_call, data)
</snippet></ROW><ROW><id>14396438</id><snippet>PRIORITY_DEFAULT_IDLE</snippet></ROW><ROW><id>14396438</id><snippet>NOTABUG</snippet></ROW><ROW><id>14396884</id><snippet>result.getDecisionFunction()</snippet></ROW><ROW><id>14396884</id><snippet>[-1.0000000000000213, -1.0000000000000053, -0.9999999999999893]</snippet></ROW><ROW><id>14396969</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

import sip
sip.setapi('QString', 2)
sip.setapi('QVariant', 2)

from PyQt4 import QtCore, QtGui

class MyWindow(QtGui.QWidget):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

        self.pathRoot = QtCore.QDir.rootPath()

        self.model = QtGui.QFileSystemModel(self)
        self.model.setRootPath(self.pathRoot)

        self.indexRoot = self.model.index(self.model.rootPath())

        self.treeView = QtGui.QTreeView(self)
        self.treeView.setModel(self.model)
        self.treeView.setRootIndex(self.indexRoot)
        self.treeView.clicked.connect(self.on_treeView_clicked)

        self.labelFileName = QtGui.QLabel(self)
        self.labelFileName.setText("File Name:")

        self.lineEditFileName = QtGui.QLineEdit(self)

        self.labelFilePath = QtGui.QLabel(self)
        self.labelFilePath.setText("File Path:")

        self.lineEditFilePath = QtGui.QLineEdit(self)

        self.gridLayout = QtGui.QGridLayout()
        self.gridLayout.addWidget(self.labelFileName, 0, 0)
        self.gridLayout.addWidget(self.lineEditFileName, 0, 1)
        self.gridLayout.addWidget(self.labelFilePath, 1, 0)
        self.gridLayout.addWidget(self.lineEditFilePath, 1, 1)

        self.layout = QtGui.QVBoxLayout(self)
        self.layout.addLayout(self.gridLayout)
        self.layout.addWidget(self.treeView)

    @QtCore.pyqtSlot(QtCore.QModelIndex)
    def on_treeView_clicked(self, index):
        indexItem = self.model.index(index.row(), 0, index.parent())

        fileName = self.model.fileName(indexItem)
        filePath = self.model.filePath(indexItem)

        self.lineEditFileName.setText(fileName)
        self.lineEditFilePath.setText(filePath)

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow()
    main.resize(666, 333)
    main.move(app.desktop().screen().rect().center() - main.rect().center())
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14397662</id><snippet>&amp;</snippet></ROW><ROW><id>14397662</id><snippet>;</snippet></ROW><ROW><id>14397662</id><snippet>=alpha,ascThe system cannot find the file specified.</snippet></ROW><ROW><id>14397662</id><snippet>wget.exe "http://www.imdb.com/search/title?genres=action&amp;sort=alpha,asc&amp;start=51&amp;title_type=feature"
</snippet></ROW><ROW><id>14397812</id><snippet>def FASTA(filename):
  try:
    f = file(filename)
  except IOError:                     
    print "The file, %s, does not exist" % filename
    return

  order = []
  sequences = {}
  counts = {}

  for line in f:
    if line.startswith('&gt;'):
      name = line[1:].rstrip('\n')
      name = name.replace('_', ' ')
      order.append(name)
      sequences[name] = ''
    else:
      sequences[name] += line.rstrip('\n').rstrip('*')
      for aa in sequences[name]:
        if aa in counts:
            counts[aa] = counts[aa] + 1
        else:
            counts[aa] = 1  


  print "%d sequences found" % len(order)
  print counts
  return order, sequences

x, y = FASTA("drosoph_b.fasta")
</snippet></ROW><ROW><id>14397812</id><snippet>1 sequences found
{'G': 1, 'I': 2, 'M': 2, 'L': 3, 'P': 1, 'R': 4}
</snippet></ROW><ROW><id>14398020</id><snippet>self.num_rows</snippet></ROW><ROW><id>14398020</id><snippet>import Tkinter as tk


class App(object):
    def new_row(self):
        # Create widgets
        new_entry = tk.Entry(root, width=7)

        # Put widgets in grid
        self.num_rows += 1
        new_entry.grid(column=0, row=self.num_rows, sticky='WE')

    def __init__(self):
        self.num_rows = 1
        createRow_button = tk.Button(
            root, text='New Row', command=self.new_row)
        createRow_button.grid()

root = tk.Tk()
app = App()
root.mainloop()
</snippet></ROW><ROW><id>14398056</id><snippet>math.pow(math.e, x)
</snippet></ROW><ROW><id>14398056</id><snippet>math.exp</snippet></ROW><ROW><id>14398056</id><snippet>math.exp(x)
</snippet></ROW><ROW><id>14398056</id><snippet>from math import exp
exp(x)
</snippet></ROW><ROW><id>14398112</id><snippet>import numpy as np
from itertools import groupby,izip_longest

def f1(fname):
    with open(fname) as f:
        return np.matrix(list(izip_longest(
               *(map(lambda x: float(x[1]),v)
               for k,v in groupby(map(str.split,f),
               key=lambda x: len(x) == 2) if k),
               fillvalue=np.nan)))
d1('testfile')
</snippet></ROW><ROW><id>14398112</id><snippet>matrix([[ 0.5,  0.2,  0.7],
        [ 0.9,  0.2,  0.6],
        [ 0.4,  0.4,  0.9],
        [ 0.1,  0.9,  0.2],
        [ nan,  nan,  0.7]])
</snippet></ROW><ROW><id>14398112</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>14398769</id><snippet>mysql_store_result()</snippet></ROW><ROW><id>14398769</id><snippet>Cursor</snippet></ROW><ROW><id>14398769</id><snippet>DictCursor</snippet></ROW><ROW><id>14398769</id><snippet>mysql_use_result()</snippet></ROW><ROW><id>14398769</id><snippet>SSCursor</snippet></ROW><ROW><id>14398769</id><snippet>SSDictCursor</snippet></ROW><ROW><id>14398769</id><snippet>mysql</snippet></ROW><ROW><id>14398769</id><snippet>-q</snippet></ROW><ROW><id>14399044</id><snippet>key_con = one.keys() + second.keys()
</snippet></ROW><ROW><id>14399044</id><snippet>extend</snippet></ROW><ROW><id>14399129</id><snippet>b</snippet></ROW><ROW><id>14399129</id><snippet>In [76]: a=['a','b','c','d','e','f','g','h','i','j']

In [77]: b=['b','f','g','j']

In [78]: dic={x:i for i,x in enumerate(b)}

In [79]: dic
Out[79]: {'b': 0, 'f': 1, 'g': 2, 'j': 3}

In [81]: [dic.get(x,'-999') for x in a]
Out[81]: ['-999', 0, '-999', '-999', '-999', 1, 2, '-999', '-999', 3]
</snippet></ROW><ROW><id>14399129</id><snippet>defaultdict(list)</snippet></ROW><ROW><id>14399129</id><snippet>In [102]: a=['a','b','c','d','e','f','g','b','h','i','f','j']

In [103]: b=['b','f','g','j','b','f']

In [104]: dic=defaultdict(list)

In [105]: for i,x in enumerate(b):
    dic[x].append(i)
   .....:     

#now convert every value(i.e list) present in dic to an iterator.

In [106]: dic={x:iter(y) for x,y in dic.items()}  

In [107]: [next(dic[x]) if x in dic else '-999' for x in a]  #call next() if the key 
                                                             #is present else use '-999'
Out[107]: ['-999', 0, '-999', '-999', '-999', 1, 2, 4, '-999', '-999', 5, 3]
</snippet></ROW><ROW><id>14399173</id><snippet>django-piston</snippet></ROW><ROW><id>14399173</id><snippet>runtime.txt</snippet></ROW><ROW><id>14399830</id><snippet>import numpy as np
import matplotlib.pyplot as plt

xs = np.arange(8)
series1 = np.array([1, 3, 3, None, None, 5, 8, 9]).astype(np.double)
s1mask = np.isfinite(series1)
series2 = np.array([2, None, 5, None, 4, None, 3, 2]).astype(np.double)
s2mask = np.isfinite(series2)

plt.plot(xs[s1mask], series1[s1mask], linestyle='-', marker='o')
plt.plot(xs[s2mask], series2[s2mask], linestyle='-', marker='o')

plt.show()
</snippet></ROW><ROW><id>14400155</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; from datetime import date, timedelta
&gt;&gt;&gt; yesterday = date.today() - timedelta(1)
&gt;&gt;&gt; yesterday = yesterday.strftime('%Y/%m/%d')
&gt;&gt;&gt; yesterday = "/%s/%s" % ( time.tzname[0], yesterday )
&gt;&gt;&gt; print yesterday
'/CET/2013/01/17'
</snippet></ROW><ROW><id>14400167</id><snippet>render</snippet></ROW><ROW><id>14400167</id><snippet>template.render

template.render()
</snippet></ROW><ROW><id>14400659</id><snippet>In [1]: s = Series(range(10), index=[1,2,2,2,5,6,7,7,7,8])

In [2]: s
Out[2]:
1    0
2    1
2    2
2    3
5    4
6    5
7    6
7    7
7    8
8    9

In [3]: s.groupby(s.index).first()
Out[3]:
1    0
2    1
5    4
6    5
7    6
8    9
</snippet></ROW><ROW><id>14400659</id><snippet>In [1]: s
Out[1]:
STK_ID  RPT_Date
600809  20061231    demo
        20070331    demo
        20070630    demo
        20070331    demo

In [2]: s.reset_index().groupby(s.index.names).first()
Out[2]:
                    0
STK_ID RPT_Date
600809 20061231  demo
       20070331  demo
       20070630  demo
</snippet></ROW><ROW><id>14400675</id><snippet>from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt

fig = plt.figure(figsize=(8, 4.5))
plt.subplots_adjust(left=0.02, right=0.98, top=0.98, bottom=0.00)
m = Basemap(resolution='c',projection='robin',lon_0=0)
m.fillcontinents(color='white',lake_color='white',zorder=2)
coasts = m.drawcoastlines(zorder=1,color='white',linewidth=0)
coasts_paths = coasts.get_paths()

ipolygons = range(83) + [84] # want Baikal, but not Tanganyika
# 80 = Superior+Michigan+Huron, 81 = Victoria, 82 = Aral, 83 = Tanganyika,
# 84 = Baikal, 85 = Great Bear, 86 = Great Slave, 87 = Nyasa, 88 = Erie
# 89 = Winnipeg, 90 = Ontario
for ipoly in ipolygons:
    r = coasts_paths[ipoly]
    # Convert into lon/lat vertices
    polygon_vertices = [(vertex[0],vertex[1]) for (vertex,code) in
                        r.iter_segments(simplify=False)]
    px = [polygon_vertices[i][0] for i in xrange(len(polygon_vertices))]
    py = [polygon_vertices[i][2] for i in xrange(len(polygon_vertices))]
    m.plot(px,py,linewidth=0.5,zorder=3,color='black')

plt.savefig('world2.png',dpi=100)
</snippet></ROW><ROW><id>14400675</id><snippet>color</snippet></ROW><ROW><id>14400675</id><snippet>'gray'</snippet></ROW><ROW><id>14400675</id><snippet>area_thresh</snippet></ROW><ROW><id>14400675</id><snippet>m.fillcontinents(color='gray',lake_color='white',zorder=2)
</snippet></ROW><ROW><id>14400915</id><snippet>reshape(-1, nbcols)</snippet></ROW><ROW><id>14400915</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>14400915</id><snippet>a[:, ind:ind + nbcols] = np.genfromtxt('file_1000x10.csv',
                                       usecols = range(nbcols)).reshape(-1, nbcols)
</snippet></ROW><ROW><id>14400915</id><snippet>ind</snippet></ROW><ROW><id>14400915</id><snippet>import numpy as np
from StringIO import StringIO

def make_data(rows, cols) :
    data = ((str(k + cols * j) for k in xrange(cols)) for j in xrange(rows))
    data = '\n'.join(map(lambda x: ' '.join(x), data))
    return StringIO(data)

def read_data(f, rows, cols, nbcols) :
    a = np.zeros((rows, (cols + nbcols - 1) // nbcols, nbcols))
    a[...] = np.genfromtxt(f, usecols=range(nbcols)).reshape(-1, 1, nbcols)
    return a.reshape(rows, -1)[:, :cols]

&gt;&gt;&gt; read_data(make_data(3, 6), 3, 6, 2)
array([[  0.,   1.,   0.,   1.,   0.,   1.],
       [  6.,   7.,   6.,   7.,   6.,   7.],
       [ 12.,  13.,  12.,  13.,  12.,  13.]])
&gt;&gt;&gt; read_data(make_data(3, 6), 3, 6, 1)
array([[  0.,   0.,   0.,   0.,   0.,   0.],
       [  6.,   6.,   6.,   6.,   6.,   6.],
       [ 12.,  12.,  12.,  12.,  12.,  12.]])
&gt;&gt;&gt; read_data(make_data(3, 6), 3, 6, 4)
array([[  0.,   1.,   2.,   3.,   0.,   1.],
       [  6.,   7.,   8.,   9.,   6.,   7.],
       [ 12.,  13.,  14.,  15.,  12.,  13.]])
</snippet></ROW><ROW><id>14400915</id><snippet>your_array</snippet></ROW><ROW><id>14400915</id><snippet>your_array.reshape(your_array.shape + (1,))
</snippet></ROW><ROW><id>14400915</id><snippet>your_array.reshape(-1, 1)
</snippet></ROW><ROW><id>14400915</id><snippet>your_array[..., np.newaxis]
</snippet></ROW><ROW><id>14400915</id><snippet>your_array[..., None]
</snippet></ROW><ROW><id>14401117</id><snippet>def replace_iter(iterable, search, replace):
    for value in iterable:
        value.replace(search, replace)
        yield value

with open("file.yml", "r") as file:
    iterable = replace_iter(file, "%", "_PLACEHOLDER")
    dictionary = yaml.safe_load(iterable)
</snippet></ROW><ROW><id>14401117</id><snippet>with</snippet></ROW><ROW><id>14401117</id><snippet>dict</snippet></ROW><ROW><id>14401117</id><snippet>dict()</snippet></ROW><ROW><id>14401117</id><snippet>stringFromStream()</snippet></ROW><ROW><id>14401117</id><snippet>file.read()</snippet></ROW><ROW><id>14401117</id><snippet>steamFromString()</snippet></ROW><ROW><id>14401117</id><snippet>data.splitlines()</snippet></ROW><ROW><id>14401317</id><snippet>&gt;&gt;&gt; s = 'Reading from EEPROM: addr = 30 value = h11c13����'
&gt;&gt;&gt; s
'Reading from EEPROM: addr = 30 value = h11c13\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd'
&gt;&gt;&gt; filter(lambda x: ord(x)&lt;128,s)
'Reading from EEPROM: addr = 30 value = h11c13'
</snippet></ROW><ROW><id>14401317</id><snippet>join</snippet></ROW><ROW><id>14401317</id><snippet>''.join(filter(lambda x: ord(x)&lt;128,s)
</snippet></ROW><ROW><id>14401317</id><snippet>''.join(x for x in s if ord(x) &lt; 128)
</snippet></ROW><ROW><id>14401317</id><snippet>itertools.takewhile</snippet></ROW><ROW><id>14401317</id><snippet>import string #doesn't exist on python3.x, use the builtin `str` type instead.
from itertools import takewhile

printable = set(string.printable)  
''.join(takewhile(lambda x: x in printable, s))
</snippet></ROW><ROW><id>14401462</id><snippet>str.join()</snippet></ROW><ROW><id>14401462</id><snippet>["|".join(values) for values in zipped]
</snippet></ROW><ROW><id>14401462</id><snippet>[("|".join(values), ) for values in zipped]
</snippet></ROW><ROW><id>14401462</id><snippet>zipped</snippet></ROW><ROW><id>14401462</id><snippet>&gt;&gt;&gt; zipped = itertools.chain.from_iterable(zip(*[part.split("|") for part in group]) for group in hapts)
&gt;&gt;&gt; ["|".join(values) for values in zipped]
['1|1', '2|2', '3|3', '4|4']
</snippet></ROW><ROW><id>14401462</id><snippet>&gt;&gt;&gt; hapts = [('1|2|3', '1|2|3', '1|2|3'), ('3|4|5', '3|4|5', '3|4|5')]
&gt;&gt;&gt; zipped = itertools.chain.from_iterable(zip(*[part.split("|") for part in group]) for group in hapts)
&gt;&gt;&gt; ["|".join(values) for values in zipped]
['1|1|1', '2|2|2', '3|3|3', '3|3|3', '4|4|4', '5|5|5']
</snippet></ROW><ROW><id>14401507</id><snippet>hog.detectMultiScale</snippet></ROW><ROW><id>14401507</id><snippet>help(cv2.HOGDescriptor().detectMultiScale)</snippet></ROW><ROW><id>14401507</id><snippet>detectMultiScale(img[, hitThreshold[, winStride[, padding[, 
           scale[, finalThreshold[, useMeanshiftGrouping]]]]]])
</snippet></ROW><ROW><id>14401507</id><snippet>winStride</snippet></ROW><ROW><id>14401507</id><snippet>import sys
import cv2

hog = cv2.HOGDescriptor()
hog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())
hogParams = {'winStride': (8, 8), 'padding': (32, 32), 'scale': 1.05}

video = cv2.VideoCapture(sys.argv[1])
while True:
    ret, frame = video.read()
    if not ret:
        break

    result = hog.detectMultiScale(frame, **hogParams)
    print result
</snippet></ROW><ROW><id>14401525</id><snippet>sel = selenium.selenium("localhost",4444,"*firefox", "http://www.google.com")  
</snippet></ROW><ROW><id>14401525</id><snippet>java -jar selenium-server-standalone-2.28.0.jar
</snippet></ROW><ROW><id>14401664</id><snippet>findAll</snippet></ROW><ROW><id>14401664</id><snippet>title2 = planTitle.findAll("h3")[1]
</snippet></ROW><ROW><id>14401694</id><snippet>appcfg.py download_data</snippet></ROW><ROW><id>14401694</id><snippet>appcfg.py upload_data</snippet></ROW><ROW><id>14401694</id><snippet>BadValueError</snippet></ROW><ROW><id>14401763</id><snippet>def scrub(table_name):
    return ''.join( chr for chr in table_name if chr.isalnum() )

scrub('); drop tables --')  # returns 'droptables'
</snippet></ROW><ROW><id>14401763</id><snippet>table = "vpro1"
cursor.execute("SELECT * FROM {0} ORDER BY :orderby DESC LIMIT 1".format(scrub(table)), {"orderby": self.unit_timestamp})
</snippet></ROW><ROW><id>14401782</id><snippet>normalize</snippet></ROW><ROW><id>14401782</id><snippet>unicodedata.normalize(form, unistr)</snippet></ROW><ROW><id>14401782</id><snippet>unicodedata.normalize('NFD', uni)
</snippet></ROW><ROW><id>14401815</id><snippet>&gt;&gt;&gt; data = "foobar"
&gt;&gt;&gt; map(''.join, zip(data, data[1:]))
['fo', 'oo', 'ob', 'ba', 'ar']
</snippet></ROW><ROW><id>14401815</id><snippet>&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; map(''.join, izip(data, data[1:]))
['fo', 'oo', 'ob', 'ba', 'ar']
</snippet></ROW><ROW><id>14401815</id><snippet>&gt;&gt;&gt; [''.join(e) for e in  izip(data, data[1:])]
['fo', 'oo', 'ob', 'ba', 'ar']
</snippet></ROW><ROW><id>14401815</id><snippet>&gt;&gt;&gt; [''.join(e) for e in list(izip_longest(*[iter(data)] * 2,fillvalue=''))]
['fo', 'ob', 'ar']
</snippet></ROW><ROW><id>14401815</id><snippet>&gt;&gt;&gt; ' '.join(''.join(e) for e in  izip(data, data[1:]))
'fo oo ob ba ar'
</snippet></ROW><ROW><id>14402189</id><snippet>__copy__()</snippet></ROW><ROW><id>14402189</id><snippet>copy.copy()</snippet></ROW><ROW><id>14402189</id><snippet>__copy__()</snippet></ROW><ROW><id>14402189</id><snippet>SomeClass</snippet></ROW><ROW><id>14402189</id><snippet>def __copy__(self):
    return SomeClass(self.somefield, self.otherfield, self.somethingelse)
</snippet></ROW><ROW><id>14402284</id><snippet>develop</snippet></ROW><ROW><id>14402284</id><snippet>script</snippet></ROW><ROW><id>14402284</id><snippet>script:  "python setup.py develop &amp;&amp; nosetests -w tests/"
</snippet></ROW><ROW><id>14402394</id><snippet>subprocess.call</snippet></ROW><ROW><id>14402394</id><snippet>A</snippet></ROW><ROW><id>14402394</id><snippet>'B'</snippet></ROW><ROW><id>14402394</id><snippet>parameters</snippet></ROW><ROW><id>14402394</id><snippet>['B']</snippet></ROW><ROW><id>14402394</id><snippet>subprocess.call</snippet></ROW><ROW><id>14402597</id><snippet>Password store</snippet></ROW><ROW><id>14403012</id><snippet>import argparse

class PositionalAction(argparse.Action):
    def __call__(self,parser,namespace,values,option_string=None):
        lst = getattr(namespace,self.dest)
        lst.append(values)
        parser.last_positional_values = lst
        all_positional = getattr(namespace,'all_positional',[])
        all_positional.append(lst)
        namespace.all_positional = all_positional

class AssociateAction(argparse.Action):
    def __call__(self,parser,namespace,values,option_string=None):
        try:
            parser.last_positional_values.append(values)
        except AttributeError:
            pass

parser = argparse.ArgumentParser()
parser.add_argument('-o',action=AssociateAction,dest=argparse.SUPPRESS)
junk,unknown = parser.parse_known_args()

for i,_ in enumerate(unknown):
    parser.add_argument('arg%d'%i,action=PositionalAction,default=[])

print parser.parse_args()
</snippet></ROW><ROW><id>14403012</id><snippet>temp $ python test1.py foo -o 1 bar -o 2 baz qux -o 4
Namespace(all_positional=[['foo', '1'], ['bar', '2'], ['baz'], ['qux', '4']], arg0=['foo', '1'], arg1=['bar', '2'], arg2=['baz'], arg3=['qux', '4'])
</snippet></ROW><ROW><id>14403012</id><snippet>-o</snippet></ROW><ROW><id>14403012</id><snippet>parse_known_args</snippet></ROW><ROW><id>14403012</id><snippet>(namespace_of_parsed_stuff, uknown_args)</snippet></ROW><ROW><id>14403012</id><snippet>-o</snippet></ROW><ROW><id>14403012</id><snippet>namespace.all_positional[-1]</snippet></ROW><ROW><id>14403012</id><snippet>parser.last_positional_values</snippet></ROW><ROW><id>14403228</id><snippet>from sqlalchemy import *
from sqlalchemy import create_engine, orm
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship



metadata = MetaData()
Base = declarative_base()
Base.metadata = metadata

db = create_engine('&lt;db connection URL&gt;',echo=False)
metadata.reflect(bind=db)

cause_code_table = metadata.tables['cause_code']
ndticket_table = metadata.tables['ndticket']

sm = orm.sessionmaker(bind=db, autoflush=True, autocommit=True, expire_on_commit=True)
session = orm.scoped_session(sm)

q = session.query(ndticket_table,cause_code_table).join(cause_code_table)
for r in q.limit(10):
    print r
</snippet></ROW><ROW><id>14403228</id><snippet>class CauseCode(Base):
    __tablename__ = "cause_code"

class NDTicket(Base):
    __tablename__ = "ndticket"
    cause_code = relationship("CauseCode", backref = "ndticket")


q = session.query(NDTicket)
for r in q.limit(10):
    print r.ticket_id, r.cause_code.cause_code
</snippet></ROW><ROW><id>14403228</id><snippet>insp = reflection.Inspector.from_engine(db)
print insp.get_table_names()
print insp.get_foreign_keys(NDTicket.__tablename__)
&gt;&gt;&gt;[{'referred_table': u'cause_code', 'referred_columns': [u'cause_code'], 'referred_schema': None, 'name': u'SYS_C00135367', 'constrained_columns': [u'cause_code_id']}]
</snippet></ROW><ROW><id>14403363</id><snippet>a = ['chr1', 'chr10', 'chr5', 'chrX']
sorted(a, key=lambda x: Set_Chr_Nr_(x))
print a
</snippet></ROW><ROW><id>14403363</id><snippet>a.sort(lambda x,y: x-y, key=lambda x: Set_Chr_Nr_(x))
</snippet></ROW><ROW><id>14403363</id><snippet>a = [['inversion', 'chr14', 87902496, 87902539, 'chr14', 87902497, 87902540], ['inversion', 'chr10', 13105010, 13105143, 'chr10', 13104876, 13105378]]
sorted(a, key=lambda x: Set_Chr_Nr_(x[1]))
print a
</snippet></ROW><ROW><id>14403583</id><snippet>#!/usr/bin/python

parent=''
child=''

for line in open('input.txt'):
        if line.find('#Parent') &gt; -1 or line.find('# Parent') &gt; -1:
                parent = field_extract(line) # fun where you extract parent value
                parent_id = ... # write it down or generate
                # INSERT into PARENT
        elif line:
                child = field_extract(line)
                # INSERT into CHILDREN with parent_id and child values
</snippet></ROW><ROW><id>14403878</id><snippet>Product.parts.property.backref = None</snippet></ROW><ROW><id>14403878</id><snippet>print Product.parts.property.backref
&gt;&gt;&gt;None
print Product.parts.property.back_populates
&gt;&gt;&gt;product
</snippet></ROW><ROW><id>14403878</id><snippet>class Part(...):
    product = relationship('products', back_populaes='parts')

class Product(...):
    parts = relationship('products', back_populaes='product')
    pass
</snippet></ROW><ROW><id>14403925</id><snippet>re.findall(r"\[[0-9]+\:(.+?)\:[0-9]+\]", string)
</snippet></ROW><ROW><id>14403925</id><snippet>?</snippet></ROW><ROW><id>14403925</id><snippet>+</snippet></ROW><ROW><id>14403925</id><snippet>+</snippet></ROW><ROW><id>14403925</id><snippet>?</snippet></ROW><ROW><id>14403925</id><snippet>+</snippet></ROW><ROW><id>14403925</id><snippet>re.findall(r"\[[0-9]+ \: (.+?) \: [0-9]+\]", string)
</snippet></ROW><ROW><id>14404069</id><snippet>True</snippet></ROW><ROW><id>14404069</id><snippet>True</snippet></ROW><ROW><id>14404069</id><snippet>def crawl():
    while len(exist) &lt;= min_links:
        ...
</snippet></ROW><ROW><id>14404103</id><snippet>---</snippet></ROW><ROW><id>14404103</id><snippet>yaml.load_all</snippet></ROW><ROW><id>14404103</id><snippet>yaml.load</snippet></ROW><ROW><id>14404103</id><snippet>import yaml

stream = open("test", "r")
docs = yaml.load_all(stream)
for doc in docs:
    for k,v in doc.items():
        print k, "-&gt;", v
    print "\n",
</snippet></ROW><ROW><id>14404103</id><snippet>request -&gt; 341570
level_1 -&gt; test
level_2 -&gt; NetApp, SOFS, ZFS Creation

request -&gt; 341569
level_1 -&gt; test
level_2 -&gt; NetApp, SOFS, ZFS Creation

request -&gt; 341568
level_1 -&gt; test
level_2 -&gt; NetApp, SOFS, ZFS Creation
</snippet></ROW><ROW><id>14404462</id><snippet>x = next(x.strip() for x in lines if x.startswith('NSS-Checkin-Default'))
ver = x.split('-')[-1].strip()
</snippet></ROW><ROW><id>14404462</id><snippet>(a for b in c if d)</snippet></ROW><ROW><id>14404462</id><snippet>[a for b in c if d]</snippet></ROW><ROW><id>14404462</id><snippet>lines</snippet></ROW><ROW><id>14404462</id><snippet>next</snippet></ROW><ROW><id>14404462</id><snippet>StopIteration</snippet></ROW><ROW><id>14404462</id><snippet>(x,) = (x.strip() for x in lines if x.startswith('NSS-Checkin-Default')
</snippet></ROW><ROW><id>14404462</id><snippet>ValueError</snippet></ROW><ROW><id>14404475</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; m = np.random.randint(-10,10,size=(4,6))
&gt;&gt;&gt; m
array([[  7,   4,   7,   7,   5,   9],
       [  5,  -7,  -2,   4,   2,  -4],
       [ -9,   4,   6,   8,   5, -10],
       [ -6,  -8,   8,  -5,   2,  -3]])
&gt;&gt;&gt; m2 = np.zeros_like(m) # or m2 = m*0
&gt;&gt;&gt; m2[::2, ::2] = m[::2, ::2]
&gt;&gt;&gt; m2
array([[ 7,  0,  7,  0,  5,  0],
       [ 0,  0,  0,  0,  0,  0],
       [-9,  0,  6,  0,  5,  0],
       [ 0,  0,  0,  0,  0,  0]])
</snippet></ROW><ROW><id>14404515</id><snippet>logging</snippet></ROW><ROW><id>14404515</id><snippet>yield_per</snippet></ROW><ROW><id>14404515</id><snippet>for comment in session.query(Comment).filter(Comment.type == Comment.TYPE_LOOK).yield_per(100):
    try:
        with session.begin_nested():
            feedback = Feedback()
            feedback.user_id = User.get_or_create(comment.model_id).id
            feedback.look_id = comment.commentable_id
            session.add(feedback)
            session.flush()
    except IntegrityError, e:
        print "IntegrityError", e

session.commit()
</snippet></ROW><ROW><id>14404515</id><snippet>with</snippet></ROW><ROW><id>14404515</id><snippet>flush</snippet></ROW><ROW><id>14404515</id><snippet>LEFT JOIN</snippet></ROW><ROW><id>14404515</id><snippet>(user_id, look_id)</snippet></ROW><ROW><id>14404515</id><snippet>session.merge(feedback)</snippet></ROW><ROW><id>14404515</id><snippet>SELECT</snippet></ROW><ROW><id>14404664</id><snippet>one_third=first+(last-first/3)</snippet></ROW><ROW><id>14404664</id><snippet>first == 1</snippet></ROW><ROW><id>14404664</id><snippet>first/3 == 0</snippet></ROW><ROW><id>14404664</id><snippet>first+last</snippet></ROW><ROW><id>14404664</id><snippet>first+(last-first)/3</snippet></ROW><ROW><id>14404749</id><snippet>visibility timeout</snippet></ROW><ROW><id>14404749</id><snippet>change_visibility</snippet></ROW><ROW><id>14404749</id><snippet>Message</snippet></ROW><ROW><id>14404831</id><snippet>def open_file(path_to_file, attempts=0, timeout=5, sleep_int=5):
    if attempts &lt; timeout and os.path.exists(path_to_file) and os.path.isfile(path_to_file): 
        try:
            file = open(path_to_file)
            return file
        except:
            # perform an action
            sleep(sleep_int)
            open_file(path_to_file, attempts + 1)
</snippet></ROW><ROW><id>14405228</id><snippet>arr[a][b][c]</snippet></ROW><ROW><id>14405228</id><snippet>arr[a]</snippet></ROW><ROW><id>14405228</id><snippet>arr[a][b]</snippet></ROW><ROW><id>14405228</id><snippet>arr[a][b][c]</snippet></ROW><ROW><id>14405228</id><snippet>arr[a, b, c]</snippet></ROW><ROW><id>14405228</id><snippet>for j in xrange(len(a)) :
    a[j] = b[j]
</snippet></ROW><ROW><id>14405228</id><snippet>a[:] = b[:]
</snippet></ROW><ROW><id>14405228</id><snippet>imgLlab.shape</snippet></ROW><ROW><id>14405228</id><snippet>imgRlab.shape</snippet></ROW><ROW><id>14405228</id><snippet>disp.shape</snippet></ROW><ROW><id>14405228</id><snippet>(h, w, 3)</snippet></ROW><ROW><id>14405228</id><snippet>rows = np.arange(h).reshape(h, 1, 1)
cols = np.arange(w).reshape(1, w, 1)
planes = np.arange(3).reshape(1, 1, 3)
data = imgLlab[rows, cols, planes] - \ 
       imgRlab[planes, rows - disp[rows, cols, planes], planes]
# data is of shape (h, w, 3)
data = data**2
# data is of shape (h, w, 3)
data = np.sum(data, axis=-1)
# data is of shape (h, w)
data = np.sqrt(data)
# data is of shape (h, w)
</snippet></ROW><ROW><id>14405228</id><snippet>delta</snippet></ROW><ROW><id>14405228</id><snippet>delta[...] = data.reshape(h, w, 1) # equivalent to data.reshape(-1, 1)
</snippet></ROW><ROW><id>14405340</id><snippet>list</snippet></ROW><ROW><id>14405340</id><snippet>len</snippet></ROW><ROW><id>14405340</id><snippet>filtered_by()</snippet></ROW><ROW><id>14405340</id><snippet>filtered_by()</snippet></ROW><ROW><id>14405340</id><snippet>class FilterableList(list):

    def __init__(self, column_names, initial_data=None):
        if initial_data is not None:
            list.__init__(self, initial_data)
        else:
            list.__init__(self)
        self.column_names = column_names

    def __setitem__(self, index, value):
        if len(value) != len(self.column_names):
            raise ValueError('Rows must have the correct number of columns.')
        list.__setitem__(self, index, value)

    def append(self, value):
        if len(value) != len(self.column_names):
            raise ValueError('Rows must have the correct number of columns.')
        list.append(self, value)

    def extend(self, values):
        for value in values:
            self.append(value)

    def filtered_by(self, **filters):
        try:
            filters = [(self.column_names.index(filter[0]), filter[1]) for filter in filters.iteritems()]
        except ValueError:
            raise ValueError('Tried to apply filter with invalid column name.')
        for row in self:
            for index, value in filters:
                if row[index] != value:
                    continue
                yield row

data = FilterableList(('a', 'b', 'c', 'd'))
data.extend(((1,2,3,4), (2,2,5,6), (3,4,7,8)))
for row in data.filtered_by(b=2, c=5):
    print row
</snippet></ROW><ROW><id>14405453</id><snippet>_load_from_file(self)
</snippet></ROW><ROW><id>14405453</id><snippet>self._load_from_file()
</snippet></ROW><ROW><id>14405528</id><snippet>city.save()</snippet></ROW><ROW><id>14405528</id><snippet>city.count</snippet></ROW><ROW><id>14405528</id><snippet>try</snippet></ROW><ROW><id>14405528</id><snippet>except</snippet></ROW><ROW><id>14405579</id><snippet>def fun1(a,b):
    return a + b

def fun2(a,b,c):
    return a * b / c

def set_globals(**kwargs):
    for argname in kwargs:
        globals()['%s_in' % argname] = kwargs[argname]

def fun_wrap(func, **kwargs):
    set_globals(**kwargs)       # made the call to set_globals before calling your function
    return func(**kwargs)       # return the value returned by the functions called
</snippet></ROW><ROW><id>14405646</id><snippet>@C:\python32\python.exe %*
</snippet></ROW><ROW><id>14405646</id><snippet>@C:\python64\python.exe %*
</snippet></ROW><ROW><id>14405848</id><snippet>import base64
import pymongo
from pymongo import binary
# if pymongo version &gt;= 1.9, use the following instead
# from bson import binary

con = pymongo.Connection()
b64 = base64.b64encode("ajskldfjaklsdjfklasdjf")
bi = binary.Binary(b64)
con.test.test.insert({'foo': bi})
con.test.test.find_one({'foo': bi})
</snippet></ROW><ROW><id>14405848</id><snippet>{
    u'_id': ObjectId('50f99b4a9f956a1924000000'),
    u'foo': Binary('YWpza2xkZmpha2xzZGpma2xhc2RqZg==', 0)
}
</snippet></ROW><ROW><id>14405971</id><snippet>dateutil.parser</snippet></ROW><ROW><id>14405971</id><snippet>iso8601</snippet></ROW><ROW><id>14406096</id><snippet>set.symmetric_difference</snippet></ROW><ROW><id>14406096</id><snippet>In [1]: df1 = DataFrame(list('ABCDE'), columns=['x'])

In [2]: df1
Out[2]:
   x
0  A
1  B
2  C
3  D
4  E

In [3]: df2 = DataFrame(list('CDEF'), columns=['y'])

In [4]: df2
Out[4]:
   y
0  C
1  D
2  E
3  F

In [5]: set(df1.x).symmetric_difference(df2.y)
Out[5]: set(['A', 'B', 'F'])
</snippet></ROW><ROW><id>14406232</id><snippet>while</snippet></ROW><ROW><id>14406232</id><snippet> if len(validOptions) == 0:
     gotStuck = gotStuck + 1
     coordList = [[1,1]]
     i,j = (1,1)
     break
</snippet></ROW><ROW><id>14406232</id><snippet>if newCoord == [n, n]:
    foundRoute = foundRoute + 1
    coordList = [[1,1]]
    i,j = (1,1)
    break
</snippet></ROW><ROW><id>14406232</id><snippet>while</snippet></ROW><ROW><id>14406232</id><snippet>k = 0 # counter for number of simulations
n = 3 # Grid size  
foundRoute = 0 # counter for number of cases where the final point is reached
gotStuck = 0 # counter for number of cases where no valid options found
while k &lt; 100:
    i,j = (1,1) 
    coordList = [[i,j]]
    while True:
        #Everything else
</snippet></ROW><ROW><id>14406273</id><snippet>for x in xs:
  del x
</snippet></ROW><ROW><id>14406372</id><snippet>&gt;&gt;&gt; import tldextract
&gt;&gt;&gt; tldextract.extract('http://forums.news.cnn.com/')
ExtractResult(subdomain='forums.news', domain='cnn', tld='com')
</snippet></ROW><ROW><id>14406372</id><snippet>&gt;&gt;&gt; extracted = tldextract.extract('http://www.google.com')
&gt;&gt;&gt; "{}.{}".format(extracted.domain, extracted.tld)
"google.com"
</snippet></ROW><ROW><id>14406382</id><snippet>logging</snippet></ROW><ROW><id>14406382</id><snippet>logging</snippet></ROW><ROW><id>14406382</id><snippet>logging.basicConfig(filename=log_file_name)</snippet></ROW><ROW><id>14406382</id><snippet>log_file_name</snippet></ROW><ROW><id>14406382</id><snippet>logging</snippet></ROW><ROW><id>14406382</id><snippet>info</snippet></ROW><ROW><id>14406382</id><snippet>level=logging.INFO</snippet></ROW><ROW><id>14406382</id><snippet>basicConfig</snippet></ROW><ROW><id>14406382</id><snippet>logging.getLogger(some_string)</snippet></ROW><ROW><id>14406382</id><snippet>Logger</snippet></ROW><ROW><id>14406382</id><snippet>some_string</snippet></ROW><ROW><id>14406382</id><snippet>__name__</snippet></ROW><ROW><id>14406382</id><snippet>logging.getLogger(__name__)</snippet></ROW><ROW><id>14406382</id><snippet>Logger</snippet></ROW><ROW><id>14406382</id><snippet>logging</snippet></ROW><ROW><id>14406447</id><snippet>ax.xaxis.tick_top()
</snippet></ROW><ROW><id>14406447</id><snippet>ax.set_xlabel('X LABEL')    
ax.xaxis.set_label_position('top') 
</snippet></ROW><ROW><id>14406447</id><snippet>import matplotlib.pyplot as plt
import numpy as np
column_labels = list('ABCD')
row_labels = list('WXYZ')
data = np.random.rand(4, 4)
fig, ax = plt.subplots()
heatmap = ax.pcolor(data, cmap=plt.cm.Blues)

# put the major ticks at the middle of each cell
ax.set_xticks(np.arange(data.shape[1]) + 0.5, minor=False)
ax.set_yticks(np.arange(data.shape[0]) + 0.5, minor=False)

# want a more natural, table-like display
ax.invert_yaxis()
ax.xaxis.tick_top()

ax.set_xticklabels(column_labels, minor=False)
ax.set_yticklabels(row_labels, minor=False)
plt.show()
</snippet></ROW><ROW><id>14406583</id><snippet>enumerate</snippet></ROW><ROW><id>14406583</id><snippet>def update_condition(self, type, params):
    for i,condition in enumerate(self.conditions):
        condition_loaded = json.loads(condition)
        if condition_loaded['type'] == type:
            condition_loaded['params'] = params
            self.conditions[i] = json.dumps(condition_loaded)
</snippet></ROW><ROW><id>14406583</id><snippet>def helper(condition,type,params)
    loaded = json.loads(condition)
    if loaded['type'] == type:
       loaded['params'] = params
       return json.dumps(loaded)
    return condition

...

def update_condition(self, type, params):
    self.conditions = [helper(c,type,params) for c in self.conditions]
</snippet></ROW><ROW><id>14406583</id><snippet>def update_condition(self, type, params):
    self.conditions[:] = [helper(c,type,params) for c in self.conditions]
</snippet></ROW><ROW><id>14406647</id><snippet>tornado.wsgi.WSGIApplication</snippet></ROW><ROW><id>14406852</id><snippet>file_handle</snippet></ROW><ROW><id>14406852</id><snippet>#!/usr/bin/env python
#http://stackoverflow.com/questions/14406562/prevent-running-concurrent-instances-of-a-python-script

import sys
import time
import fcntl

file_handle = None

def file_is_locked(file_path):
    global file_handle 
    file_handle= open(file_path, 'w')
    try:
        fcntl.lockf(file_handle, fcntl.LOCK_EX | fcntl.LOCK_NB)
        return False
    except IOError:
        return True

file_path = '/var/lock/test.py'

if file_is_locked(file_path):
    print 'another instance is running exiting now'
    sys.exit(0)
else:
    print 'no other instance is running'
    for i in range(5):
        time.sleep(1)
        print i + 1
</snippet></ROW><ROW><id>14406852</id><snippet>file_handle</snippet></ROW><ROW><id>14406892</id><snippet>env</snippet></ROW><ROW><id>14406892</id><snippet>"env": {
        "PYTHONPATH":"/my/custom/modules"
       }
</snippet></ROW><ROW><id>14407118</id><snippet>butt2 = Button(frame2,text="convert",command=lambda :convert(NbF.get())).grid(row=0,column=2)
</snippet></ROW><ROW><id>14407118</id><snippet>NbF.get()</snippet></ROW><ROW><id>14407118</id><snippet>NbF.get()</snippet></ROW><ROW><id>14407118</id><snippet>butt2</snippet></ROW><ROW><id>14407118</id><snippet>None</snippet></ROW><ROW><id>14407118</id><snippet>Widget.grid</snippet></ROW><ROW><id>14407118</id><snippet>None</snippet></ROW><ROW><id>14407118</id><snippet>butt2 = Button(frame2,text="convert",command=lambda :convert(NbF.get()))
butt2.grid(row=0,column=2)
</snippet></ROW><ROW><id>14407213</id><snippet>def foo(x):
    print("foo: " + x)

def bar(x):
    print("bar: " + x)

f = foo
f("one")
f = bar
f("ten")
</snippet></ROW><ROW><id>14407213</id><snippet>foo: one
bar: ten
</snippet></ROW><ROW><id>14407213</id><snippet>class Dog:
    def noise(self, x):
        print("bark! " + x)
    def sleep(self):
        print("sleeping on floor")

class Cat:
    def noise(self, x):
        print("meow! " + x)
    def sleep(self):
        print("sleeping on keyboard")

a = Dog()
a.noise("hungry")
a.sleep()

a = Cat()
a.noise("hungry")
a.sleep()
</snippet></ROW><ROW><id>14407213</id><snippet>bark! hungry
sleeping on floor
meow! hungry
sleeping on keyboard
</snippet></ROW><ROW><id>14407440</id><snippet>entry = po.find('Email address')
if entry:
    entry.msgstr = 'E-Mail-Adresse'
    if 'fuzzy' in entry.flags:
        entry.flags.remove('fuzzy')
</snippet></ROW><ROW><id>14407440</id><snippet>entry = po.find('%s hour ago')
if entry and entry.msgid_plural:
    entry.msgstr_plural['0'] = 'Vor %s Stunde'
    entry.msgstr_plural['1'] = 'Vor %s Stunden'
</snippet></ROW><ROW><id>14407739</id><snippet>pywin32</snippet></ROW><ROW><id>14407739</id><snippet>pywin32</snippet></ROW><ROW><id>14407739</id><snippet>win32com</snippet></ROW><ROW><id>14407739</id><snippet>import win32com.client
excel = win32com.client.Dispatch('Excel.Application')
spreadsheet = excel.Workbooks.Open('C:/path/to/spreadsheet.xml')
spreadsheet.SaveAs('C:/path/to/spreadsheet.xls', fileformat=excel.xlExcel8)
</snippet></ROW><ROW><id>14407739</id><snippet>Application</snippet></ROW><ROW><id>14407739</id><snippet>Workbooks</snippet></ROW><ROW><id>14407739</id><snippet>Workbooks</snippet></ROW><ROW><id>14407739</id><snippet>Open</snippet></ROW><ROW><id>14407739</id><snippet>Add</snippet></ROW><ROW><id>14407739</id><snippet>Workbook</snippet></ROW><ROW><id>14407739</id><snippet>SaveAs</snippet></ROW><ROW><id>14407739</id><snippet>FileFormat</snippet></ROW><ROW><id>14407739</id><snippet>XlFileFormat</snippet></ROW><ROW><id>14407739</id><snippet>xlExcel8</snippet></ROW><ROW><id>14407739</id><snippet>56</snippet></ROW><ROW><id>14407739</id><snippet>xlExcel8</snippet></ROW><ROW><id>14407739</id><snippet>win32com</snippet></ROW><ROW><id>14407739</id><snippet>win32com</snippet></ROW><ROW><id>14407739</id><snippet>pywinauto</snippet></ROW><ROW><id>14407739</id><snippet>swapy</snippet></ROW><ROW><id>14407739</id><snippet>pywinauto</snippet></ROW><ROW><id>14407739</id><snippet>AutoIt</snippet></ROW><ROW><id>14407739</id><snippet>xlutils</snippet></ROW><ROW><id>14407830</id><snippet>i</snippet></ROW><ROW><id>14407830</id><snippet>j</snippet></ROW><ROW><id>14407830</id><snippet>PIL</snippet></ROW><ROW><id>14407830</id><snippet>img1.resize(img2.size, Image.ANTIALIAS)</snippet></ROW><ROW><id>14407830</id><snippet>True</snippet></ROW><ROW><id>14407830</id><snippet>False</snippet></ROW><ROW><id>14408030</id><snippet>soup.find_all("div", class_="lobbyHours")</snippet></ROW><ROW><id>14408030</id><snippet>div</snippet></ROW><ROW><id>14408030</id><snippet>301 Moved Permanently</snippet></ROW><ROW><id>14408030</id><snippet>Location</snippet></ROW><ROW><id>14408030</id><snippet>'http://locators.bankofamerica.com/locator/locator/LocatorAction.do?shouldTest=true'
</snippet></ROW><ROW><id>14408121</id><snippet>commands = ['ssh', '-t', 'user@host', "service --status-all"]
x = Popen(commands, stdout=PIPE, stderr=PIPE)
</snippet></ROW><ROW><id>14408121</id><snippet>shell=True</snippet></ROW><ROW><id>14408121</id><snippet>Popen</snippet></ROW><ROW><id>14408121</id><snippet>Popen('ls -l',shell=True)
</snippet></ROW><ROW><id>14408121</id><snippet>Popen(['ls','-l'])
</snippet></ROW><ROW><id>14408121</id><snippet>Popen(['ls','-l'],shell=True)
</snippet></ROW><ROW><id>14408121</id><snippet>import shlex
shlex.split("program -w ith -a 'quoted argument'")
</snippet></ROW><ROW><id>14408121</id><snippet>['program', '-w', 'ith', '-a', 'quoted argument']
</snippet></ROW><ROW><id>14408210</id><snippet>/usr/lib/x86_64-linux-gnu/</snippet></ROW><ROW><id>14408210</id><snippet>sudo apt-get install python-numpy python-scipy
</snippet></ROW><ROW><id>14408264</id><snippet>@hybrid_property</snippet></ROW><ROW><id>14408264</id><snippet>Unicode</snippet></ROW><ROW><id>14408264</id><snippet>String</snippet></ROW><ROW><id>14408264</id><snippet>unicode</snippet></ROW><ROW><id>14408264</id><snippet>id</snippet></ROW><ROW><id>14408264</id><snippet>class Player(Base):
    __tablename__ = 'player'

    id = Column(SmallInteger, primary_key=True)
    nickName = Column(Unicode)
</snippet></ROW><ROW><id>14408264</id><snippet>__init__</snippet></ROW><ROW><id>14408360</id><snippet>parse('a:b -&gt; c : d e')
</snippet></ROW><ROW><id>14408360</id><snippet>[[['a', ':', 'b'], '-&gt;', ['c', ':', ['d', 'e']]]]
</snippet></ROW><ROW><id>14408360</id><snippet>'c :'</snippet></ROW><ROW><id>14408360</id><snippet>'a'</snippet></ROW><ROW><id>14408360</id><snippet>['a']</snippet></ROW><ROW><id>14408360</id><snippet>&gt;&gt;&gt; operands = OneOrMore(Word(alphanums))
&gt;&gt;&gt; precedence = [
...     (":", 2, opAssoc.LEFT),
...     ("-&gt;", 2, opAssoc.LEFT),
...     ]
&gt;&gt;&gt; parser = operatorPrecedence(operands, precedence)
&gt;&gt;&gt; def parse(s): return parser.parseString(s, parseAll=True)
&gt;&gt;&gt; print(parse('a:b -&gt; c : d e'))
[[['a', ':', 'b'], '-&gt;', ['c', ':', 'd', 'e']]]
&gt;&gt;&gt; print(parse('caffeine : A1 antagonist -&gt; caffeine : peripheral stimulant'))
[[['caffeine', ':', 'A1', 'antagonist'], '-&gt;', ['caffeine', ':', 'peripheral', 'stimulant']]]
</snippet></ROW><ROW><id>14408384</id><snippet>theta = degrees(acos(p / n))
if uy &gt; 0:
    theta = -theta
self.theta = theta % 360
</snippet></ROW><ROW><id>14408384</id><snippet>uy &gt; 0</snippet></ROW><ROW><id>14408384</id><snippet>uy &lt; 0</snippet></ROW><ROW><id>14408384</id><snippet>(1, 0)</snippet></ROW><ROW><id>14408384</id><snippet>(ux, uy)</snippet></ROW><ROW><id>14408384</id><snippet>uy &lt; 0</snippet></ROW><ROW><id>14408384</id><snippet>theta = degrees(acos(p / n))
if uy &lt; 0:
    theta = -theta
self.theta = theta % 360
</snippet></ROW><ROW><id>14408384</id><snippet>if self.arc == self.sweep:
    angle = radians(self.theta - (self.delta * pos))
else:
    angle = radians(self.delta + (self.delta * pos))
</snippet></ROW><ROW><id>14408384</id><snippet>sweep</snippet></ROW><ROW><id>14408384</id><snippet>arc</snippet></ROW><ROW><id>14408384</id><snippet>theta</snippet></ROW><ROW><id>14408384</id><snippet>delta</snippet></ROW><ROW><id>14408384</id><snippet>angle = radians(self.theta + (self.delta * pos))
</snippet></ROW><ROW><id>14408384</id><snippet>x = sin(angle) * self.radius.real + self.center.real
y = cos(angle) * self.radius.imag + self.center.imag
</snippet></ROW><ROW><id>14408384</id><snippet>sin</snippet></ROW><ROW><id>14408384</id><snippet>cos</snippet></ROW><ROW><id>14408384</id><snippet>x = cos(angle) * self.radius.real + self.center.real
y = sin(angle) * self.radius.imag + self.center.imag
</snippet></ROW><ROW><id>14408384</id><snippet>point</snippet></ROW><ROW><id>14408384</id><snippet>rotation</snippet></ROW><ROW><id>14408384</id><snippet>def point(self, pos):
    angle = radians(self.theta + (self.delta * pos))
    cosr = cos(radians(self.rotation))
    sinr = sin(radians(self.rotation))

    x = cosr * cos(angle) * self.radius.real - sinr * sin(angle) * self.radius.imag + self.center.real
    y = sinr * cos(angle) * self.radius.real + cosr * sin(angle) * self.radius.imag + self.center.imag
    return complex(x, y)
</snippet></ROW><ROW><id>14408712</id><snippet>pandas</snippet></ROW><ROW><id>14408712</id><snippet>scipy</snippet></ROW><ROW><id>14408712</id><snippet>import scipy.optimize as optimize
def f(x):
    return x**2 - 2

In [28]: %timeit optimize.brentq(f, 0, 10)
100000 loops, best of 3: 4.86 us per loop
</snippet></ROW><ROW><id>14408712</id><snippet>optimize.brentq</snippet></ROW><ROW><id>14408712</id><snippet>newton</snippet></ROW><ROW><id>14408712</id><snippet>def f(x):
    return x**2 - 2
def fprime(x):
    return 2*x

In [40]: %timeit optimize.newton(f, 10, fprime)
100000 loops, best of 3: 8.22 us per loop
</snippet></ROW><ROW><id>14408749</id><snippet>long</snippet></ROW><ROW><id>14408749</id><snippet>object</snippet></ROW><ROW><id>14408749</id><snippet>&gt;&gt;&gt; np.array(27**40)
array(1797010299914431210413179829509605039731475627537851106401L, dtype=object)
&gt;&gt;&gt; np.array(27**40) * np.tan(1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for *: 'numpy.ndarray' and 'numpy.float64'
</snippet></ROW><ROW><id>14408749</id><snippet>&gt;&gt;&gt; np.tan(1) * np.array(27**40)
2.7986777223711575e+57
</snippet></ROW><ROW><id>14408749</id><snippet>float</snippet></ROW><ROW><id>14408749</id><snippet>long</snippet></ROW><ROW><id>14408749</id><snippet>float</snippet></ROW><ROW><id>14408749</id><snippet>&gt;&gt;&gt; np.array(27.0**40)
array(1.797010299914431e+57)
&gt;&gt;&gt; np.array(27.0**40) * np.tan(1)
2.7986777223711575e+57
&gt;&gt;&gt; np.multiply(np.square(np.add(np.divide(np.zeros(10),42),(-27.0)**40)),np.tan(1))
array([  5.02925269e+114,   5.02925269e+114,   5.02925269e+114,
         5.02925269e+114,   5.02925269e+114,   5.02925269e+114,
         5.02925269e+114,   5.02925269e+114,   5.02925269e+114,
         5.02925269e+114])
</snippet></ROW><ROW><id>14408749</id><snippet>dtype</snippet></ROW><ROW><id>14408871</id><snippet>y.py</snippet></ROW><ROW><id>14408871</id><snippet>import sys
sys.path.insert(0, '..')
</snippet></ROW><ROW><id>14408871</id><snippet>from dir1.x import *
</snippet></ROW><ROW><id>14408948</id><snippet>raw_input()</snippet></ROW><ROW><id>14408948</id><snippet>str()</snippet></ROW><ROW><id>14408948</id><snippet>raw_input()</snippet></ROW><ROW><id>14408948</id><snippet>else</snippet></ROW><ROW><id>14408948</id><snippet>yes</snippet></ROW><ROW><id>14408948</id><snippet>no</snippet></ROW><ROW><id>14408948</id><snippet>if b == "yes":
        print 'You entered "yes". Script will now restart... '
elif b == "no":
        print 'You entered "no". Script will now stop.' 
        break
else:
    print 'Please try again. Enter "yes" to do it again, or "no" to stop.'
    continue
</snippet></ROW><ROW><id>14408948</id><snippet>except</snippet></ROW><ROW><id>14408948</id><snippet>NameError</snippet></ROW><ROW><id>14408948</id><snippet>EOFError</snippet></ROW><ROW><id>14408948</id><snippet>SyntaxError</snippet></ROW><ROW><id>14408948</id><snippet>try:
    a = input("How old are you? ")
except (NameError, SyntaxError, EOFError):
    print "Your answer must be a number!"
    continue
</snippet></ROW><ROW><id>14408948</id><snippet>input()</snippet></ROW><ROW><id>14408948</id><snippet>input()</snippet></ROW><ROW><id>14408948</id><snippet>"Hello program"</snippet></ROW><ROW><id>14408948</id><snippet>int(raw_input())</snippet></ROW><ROW><id>14408948</id><snippet>ValueError</snippet></ROW><ROW><id>14408948</id><snippet>EOFError</snippet></ROW><ROW><id>14408948</id><snippet>raw_input</snippet></ROW><ROW><id>14408948</id><snippet>try:
    a = int(raw_input("How old are you? "))
except (ValueError, EOFError):
    print "Your answer must be a number!"
    continue
</snippet></ROW><ROW><id>14408948</id><snippet>True</snippet></ROW><ROW><id>14408948</id><snippet>False</snippet></ROW><ROW><id>14408948</id><snippet>def yes_or_no():
    while True:
        try:
            cont = raw_input('Do you want to do it again? If yes enter "yes", otherwise type "no" to stop the script.'))
        except EOFError:
            cont = ''  # not yes and not no, so it'll loop again.
        cont = cont.strip().lower()  # remove whitespace and make it lowercase
        if cont == 'yes':
            print 'You entered "yes". Script will now restart... '
            return True
        if cont == 'no':
            print 'You entered "no". Script will now stop.' 
            return False
        print 'Please try again. Enter "yes" to do it again, or "no" to stop.'
</snippet></ROW><ROW><id>14408948</id><snippet>while True:
    # ask for a number, etc.

    if not yes_or_no():
        break  # False was returned from yes_or_no
    # True was returned, we continue the loop
</snippet></ROW><ROW><id>14409045</id><snippet>In [86]: def func(lis,a,b):
    strs= "|".join("({0}{1}{2})".format(r'\b',x,r'\b[;",.]?') for x in a)
    for x in lis:
        yield re.sub(strs,b,x)
   ....:         

In [87]: lis
Out[87]: ['bad a list', 'og bad', 'in bady there bad2', 'another one', 'and bad. two']

In [88]: rep=['bad','bad2']

In [89]: st="EX"

In [90]: list(func(lis,rep,st))
Out[90]: ['EX a list', 'og EX', 'in bady there EX', 'another one', 'and EX two']

In [91]: rep=['in','two','a']

In [92]: list(func(lis,rep,st))
Out[92]: ['bad EX list', 'og bad', 'EX bady there bad2', 'another one', 'and bad. EX']
</snippet></ROW><ROW><id>14409090</id><snippet>from django.forms.formsets import formset_factory
...
        form = GetMachine(request.POST) 
        if form.is_valid(): # All validation rules pass
            number_of_lines = form.cleaned_data['Number_of_lines']

            GetLineFormSet = formset_factory(GetLine, extra=number_of_lines)
            formset = GetLineFormset()
            form = GetLine()
...
</snippet></ROW><ROW><id>14409090</id><snippet>GetLineFormSet = formset_factory(GetLine, extra=number_of_lines, max_num=10)
</snippet></ROW><ROW><id>14409400</id><snippet>x = foo(x);  # compute the value of the next prime number
             # that is larger than x  (foo is a really bad 
             # choice for this function's name) 
</snippet></ROW><ROW><id>14409400</id><snippet># compute the value of the next prime number that is larger than
# x (foo is a really bad choice for this function's name)
x = foo(x);
</snippet></ROW><ROW><id>14409400</id><snippet># Compute the value of the next prime number that is larger than x.
x = next_larger_prime(x)
</snippet></ROW><ROW><id>14409426</id><snippet>        ternary_list.append(int(value, 3)
</snippet></ROW><ROW><id>14409426</id><snippet>))</snippet></ROW><ROW><id>14409473</id><snippet>sys.modules</snippet></ROW><ROW><id>14409473</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; import os
&gt;&gt;&gt; 'sys' in sys.modules
True
&gt;&gt;&gt; 'os' in sys.modules
True
&gt;&gt;&gt; sys.modules['sys'].__dict__.keys()
['setrecursionlimit', 'dont_write_bytecode', 'getrefcount', 'path_importer_cache', 'stdout', 'getprofile', '__stdin__', 'version_info', 'exc_clear', 'prefix', 'getfilesystemencoding', 'byteorder', '_clear_type_cache', 'excepthook', 'ps1', 'exc_type', '__excepthook__', 'executable', 'float_info', 'copyright', 'setdlopenflags', 'exec_prefix', 'getdlopenflags', 'getrecursionlimit', 'py3kwarning', 'path_hooks', '__package__', '_current_frames', 'platform', 'maxsize', 'version', 'exit', 'call_tracing', 'callstats', 'flags', 'setcheckinterval', '__doc__', 'api_version', '__plen', 'getdefaultencoding', 'getcheckinterval', 'maxunicode', 'settrace', 'setprofile', 'argv', '__stdout__', 'meta_path', '__name__', 'subversion', 'builtin_module_names', 'stdin', '__stderr__', '__egginsert', 'displayhook', 'ps2', 'gettrace', 'modules', 'warnoptions', 'last_type', 'getsizeof', 'last_traceback', 'maxint', '__displayhook__', '_getframe', 'stderr', 'exc_info', 'path', 'last_value', 'hexversion']
</snippet></ROW><ROW><id>14409531</id><snippet>python</snippet></ROW><ROW><id>14409531</id><snippet>wc</snippet></ROW><ROW><id>14409531</id><snippet>python myscript.py | wc -l
</snippet></ROW><ROW><id>14409531</id><snippet>wc</snippet></ROW><ROW><id>14409531</id><snippet>man tee</snippet></ROW><ROW><id>14409531</id><snippet>wc -l</snippet></ROW><ROW><id>14409531</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>14409531</id><snippet>wc -l</snippet></ROW><ROW><id>14409531</id><snippet>wc = subprocess.Popen(['wc', '-l'], stdin=subprocess.PIPE)
</snippet></ROW><ROW><id>14409531</id><snippet># write file line by line
with open("myfile") as f:
  for line in f:
    stripped = line.strip()
    wc.stdin.write(stripped + '\n')
</snippet></ROW><ROW><id>14409531</id><snippet>wc</snippet></ROW><ROW><id>14409531</id><snippet>stdout</snippet></ROW><ROW><id>14409531</id><snippet>communicate</snippet></ROW><ROW><id>14409686</id><snippet>part = hit_loc.values()
for w in part:
    # loop over each part, so print a damage message for all 12 bodyparts
</snippet></ROW><ROW><id>14409686</id><snippet>part = hit_loc[loc]  # assign *one* body part to `part`
if loc &lt;= 9:
    print part, "has been severed!"
elif loc == 10:
    print "You sink your blade into his", part, "and pierce the heart!"
elif loc == 11:
    print "You slash him across the", part, "and eviscerate him!"
elif loc == 12:
    print "You shred the enemy's", part, "to ribbons!"
</snippet></ROW><ROW><id>14409686</id><snippet>hit_loc = [
    'Head', 'Left Arm', 'Right Arm', 'Left Leg', 
    'Right Leg', 'Left Hand', 'Right Hand', 'Left Foot', 'Right Foot',
    'Chest', 'Stomach', 'Body'
]
</snippet></ROW><ROW><id>14409686</id><snippet>loc - 1</snippet></ROW><ROW><id>14409686</id><snippet>part = hit_loc[loc - 1]
</snippet></ROW><ROW><id>14409939</id><snippet>subprocess</snippet></ROW><ROW><id>14409939</id><snippet>import sys
import subprocess

fname = sys.argv[1]
proc = subprocess.Popen(['sort', fname], stdout=subprocess.PIPE)
stdout, _ = proc.communicate()
with open(fname, 'w') as f:
    f.write(stdout)
</snippet></ROW><ROW><id>14410014</id><snippet>python</snippet></ROW><ROW><id>14410014</id><snippet>port select</snippet></ROW><ROW><id>14410178</id><snippet>class Test(Handler):
    ''' Test Handler '''
    def get(self, variables):
        variables = filter(None, (variables.split('/')))
        if variables:
            print variables
        else:
            print 'None'
</snippet></ROW><ROW><id>14410178</id><snippet>('/test[/]?(.*)', Test),
</snippet></ROW><ROW><id>14410650</id><snippet>#!/usr/bin/env python
import socket
import subprocess
import sys
from pipes import quote

def main():
    print(socket.gethostname())
    print(sys.argv)

if __name__=="__main__":
   if '--remote-run' in sys.argv:
      sys.argv.remove('--remote-run')
      command = ' '.join(map(quote, ['python'] + sys.argv))
      sys.exit(subprocess.call(['ssh', '%s@%s' % (user, server), command]))
   else:
      main()
</snippet></ROW><ROW><id>14410686</id><snippet>def application(environ, start_response):
    status = '200 OK'
    output = 'Hello World!'

    response_headers = [('Content-type', 'text/plain'),
                        ('Content-Length', str(len(output)))]
    start_response(status, response_headers)

    return [output]
</snippet></ROW><ROW><id>14410686</id><snippet>application</snippet></ROW><ROW><id>14410888</id><snippet>QDrag.start</snippet></ROW><ROW><id>14410888</id><snippet>QDrag.exec_</snippet></ROW><ROW><id>14410888</id><snippet>exec</snippet></ROW><ROW><id>14410888</id><snippet>setDropAction</snippet></ROW><ROW><id>14410888</id><snippet>dropEvent</snippet></ROW><ROW><id>14410888</id><snippet>self.button.move()</snippet></ROW><ROW><id>14410888</id><snippet>setDropAction</snippet></ROW><ROW><id>14410888</id><snippet>setHotSpot</snippet></ROW><ROW><id>14410888</id><snippet>hotSpot</snippet></ROW><ROW><id>14410888</id><snippet>setPixmap</snippet></ROW><ROW><id>14410888</id><snippet>QDrag</snippet></ROW><ROW><id>14410888</id><snippet>QPixmap</snippet></ROW><ROW><id>14410888</id><snippet>hotSpot</snippet></ROW><ROW><id>14410888</id><snippet>hotSpot</snippet></ROW><ROW><id>14410888</id><snippet>Right-Click</snippet></ROW><ROW><id>14410888</id><snippet>Shift + Right-Click</snippet></ROW><ROW><id>14410888</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
from PyQt4 import QtGui, QtCore


class Button(QtGui.QPushButton):
    def mouseMoveEvent(self, e):
        if e.buttons() != QtCore.Qt.RightButton:
            return

        # write the relative cursor position to mime data
        mimeData = QtCore.QMimeData()
        # simple string with 'x,y'
        mimeData.setText('%d,%d' % (e.x(), e.y()))

        # let's make it fancy. we'll show a "ghost" of the button as we drag
        # grab the button to a pixmap
        pixmap = QtGui.QPixmap.grabWidget(self)

        # below makes the pixmap half transparent
        painter = QtGui.QPainter(pixmap)
        painter.setCompositionMode(painter.CompositionMode_DestinationIn)
        painter.fillRect(pixmap.rect(), QtGui.QColor(0, 0, 0, 127))
        painter.end()

        # make a QDrag
        drag = QtGui.QDrag(self)
        # put our MimeData
        drag.setMimeData(mimeData)
        # set its Pixmap
        drag.setPixmap(pixmap)
        # shift the Pixmap so that it coincides with the cursor position
        drag.setHotSpot(e.pos())

        # start the drag operation
        # exec_ will return the accepted action from dropEvent
        if drag.exec_(QtCore.Qt.CopyAction | QtCore.Qt.MoveAction) == QtCore.Qt.MoveAction:
            print 'moved'
        else:
            print 'copied'


    def mousePressEvent(self, e):
        QtGui.QPushButton.mousePressEvent(self, e)
        if e.button() == QtCore.Qt.LeftButton:
            print 'press'



class Example(QtGui.QWidget):
    def __init__(self):
        super(Example, self).__init__()
        self.initUI()


    def initUI(self):
        self.setAcceptDrops(True)

        button = Button('Button', self)
        button.move(100, 65)

        self.buttons = [button]

        self.setWindowTitle('Copy or Move')
        self.setGeometry(300, 300, 280, 150)


    def dragEnterEvent(self, e):
        e.accept()


    def dropEvent(self, e):
        # get the relative position from the mime data
        mime = e.mimeData().text()
        x, y = map(int, mime.split(','))

        if e.keyboardModifiers() &amp; QtCore.Qt.ShiftModifier:
            # copy
            # so create a new button
            button = Button('Button', self)
            # move it to the position adjusted with the cursor position at drag
            button.move(e.pos()-QtCore.QPoint(x, y))
            # show it
            button.show()
            # store it
            self.buttons.append(button)
            # set the drop action as Copy
            e.setDropAction(QtCore.Qt.CopyAction)
        else:
            # move
            # so move the dragged button (i.e. event.source())
            e.source().move(e.pos()-QtCore.QPoint(x, y))
            # set the drop action as Move
            e.setDropAction(QtCore.Qt.MoveAction)
        # tell the QDrag we accepted it
        e.accept()



if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    ex = Example()
    ex.show()
    app.exec_()  
</snippet></ROW><ROW><id>14410942</id><snippet>import inspect
print(inspect.isabstract(object))                  # False
print(inspect.isabstract(MessageDisplay))          # True
print(inspect.isabstract(FriendlyMessageDisplay))  # True
print(inspect.isabstract(FriendlyMessagePrinter))  # False
</snippet></ROW><ROW><id>14410942</id><snippet>TPFLAGS_IS_ABSTRACT</snippet></ROW><ROW><id>14410942</id><snippet>class Fake:
    __abstractmethods__ = 'bluh'

print(is_abstract(Fake), inspect.isabatract(Fake)) # True, False
</snippet></ROW><ROW><id>14411036</id><snippet>dir(iTunes)</snippet></ROW><ROW><id>14411036</id><snippet>vars</snippet></ROW><ROW><id>14411049</id><snippet>exec("print 2+2")
</snippet></ROW><ROW><id>14411126</id><snippet>$name</snippet></ROW><ROW><id>14411126</id><snippet>%run</snippet></ROW><ROW><id>14411126</id><snippet>In [1]: filename = "myscript.py"

In [2]: %run $filename
['myscript.py']
</snippet></ROW><ROW><id>14411126</id><snippet>import sys
print(sys.argv)
</snippet></ROW><ROW><id>14411126</id><snippet>{}</snippet></ROW><ROW><id>14411126</id><snippet>In [3]: args = ["arg1", "arg2"]

In [4]: %run $filename {args[0]} {args[1][-2:]}
['myscript.py', 'arg1', 'g2']
</snippet></ROW><ROW><id>14411304</id><snippet>print(fact(23))</snippet></ROW><ROW><id>14411384</id><snippet>import random
x = ''.join(i if random.randint(0, 1) else 'b' for i in x)
</snippet></ROW><ROW><id>14411384</id><snippet>x</snippet></ROW><ROW><id>14411384</id><snippet>random.randint</snippet></ROW><ROW><id>14411384</id><snippet>0</snippet></ROW><ROW><id>14411384</id><snippet>'b'</snippet></ROW><ROW><id>14411384</id><snippet>'aacakedaaasa'</snippet></ROW><ROW><id>14411384</id><snippet>'a'</snippet></ROW><ROW><id>14411384</id><snippet>x = ''.join(i if i != 'a' or random.randint(0, 1) else 'b' for i in x)
</snippet></ROW><ROW><id>14411384</id><snippet>'a'</snippet></ROW><ROW><id>14411384</id><snippet>'b'</snippet></ROW><ROW><id>14411384</id><snippet>random.randint</snippet></ROW><ROW><id>14411384</id><snippet>0</snippet></ROW><ROW><id>14411548</id><snippet>import settings</snippet></ROW><ROW><id>14411548</id><snippet>settings.VAR1</snippet></ROW><ROW><id>14411548</id><snippet>settings.VAR2</snippet></ROW><ROW><id>14411674</id><snippet>&gt;&gt;&gt; lestring = "Text123"
&gt;&gt;&gt; lelist = ["Text", "foo", "bar"]
&gt;&gt;&gt; [e for e in lelist if e in lestring]
['Text']
</snippet></ROW><ROW><id>14411674</id><snippet>count</snippet></ROW><ROW><id>14411674</id><snippet>lambda</snippet></ROW><ROW><id>14411674</id><snippet>count</snippet></ROW><ROW><id>14411674</id><snippet>&gt;&gt;&gt; def joe(lelist, lestring):
    return ''.join(random.sample(x + 'b'*len(x), len(x)))

&gt;&gt;&gt; def uz(lelist, lestring):
    for x in lelist:
        if lestring.count(x):
            return 'Yep. "%s" contains characters from "%s" item.' % (lestring, x)


&gt;&gt;&gt; def ab(lelist, lestring):
    return [e for e in lelist if e in lestring]

&gt;&gt;&gt; t_ab = timeit.Timer("ab(lelist, lestring)", setup="from __main__ import lelist, lestring, ab")
&gt;&gt;&gt; t_uz = timeit.Timer("uz(lelist, lestring)", setup="from __main__ import lelist, lestring, uz")
&gt;&gt;&gt; t_joe = timeit.Timer("joe(lelist, lestring)", setup="from __main__ import lelist, lestring, joe")
&gt;&gt;&gt; t_ab.timeit(100000)
0.09391469893125759
&gt;&gt;&gt; t_uz.timeit(100000)
0.1528471407273173
&gt;&gt;&gt; t_joe.timeit(100000)
1.4272649857800843
</snippet></ROW><ROW><id>14411674</id><snippet>&gt;&gt;&gt; def jamie(lelist, lestring):
    return next(itertools.chain((e for e in lelist if e in lestring), (None,))) is not None

&gt;&gt;&gt; t_jamie = timeit.Timer("jamie(lelist, lestring)", setup="from __main__ import lelist, lestring, jamie")
&gt;&gt;&gt; t_jamie.timeit(100000)
0.22237164127909637
</snippet></ROW><ROW><id>14411674</id><snippet>[e in lestring for e in lelist if e in lestring]
</snippet></ROW><ROW><id>14411674</id><snippet>&gt;&gt;&gt; next(e in lestring for e in lelist if e in lestring)
True
</snippet></ROW><ROW><id>14411674</id><snippet>&gt;&gt;&gt; any(e in lestring for e in lelist)
</snippet></ROW><ROW><id>14412246</id><snippet>df.price1</snippet></ROW><ROW><id>14412246</id><snippet>Series</snippet></ROW><ROW><id>14412246</id><snippet>Series</snippet></ROW><ROW><id>14412246</id><snippet>to_csv</snippet></ROW><ROW><id>14412246</id><snippet>DataFrame's</snippet></ROW><ROW><id>14412246</id><snippet>Definition: Series.to_csv(self, path, index=True, sep=',', na_rep='',
float_format=None, header=False, index_label=None, mode='w', nanRep=None,
encoding=None)
</snippet></ROW><ROW><id>14412246</id><snippet>df.price1.to_csv('outfile.csv')
</snippet></ROW><ROW><id>14412341</id><snippet>from modname import ClassName
</snippet></ROW><ROW><id>14412341</id><snippet>import ntu       # instead of import ntu.modname for each module !
</snippet></ROW><ROW><id>14412363</id><snippet>HttpRequest</snippet></ROW><ROW><id>14412363</id><snippet>if 'user' in request.GET:
    user = request.GET['user']
</snippet></ROW><ROW><id>14412363</id><snippet>def my_view(request):
    if 'user' in request.GET:
        user = request.GET['user']
    if 'comment' in request.GET:
        comment = request.GET['comment']
</snippet></ROW><ROW><id>14412363</id><snippet>class Meta</snippet></ROW><ROW><id>14412363</id><snippet>class MyResource(ModelResource):
    class Meta:
        filtering = {
            "user": ('exact',),
            "friend": ('exact',),
            "comment": ('exact',)
        }
</snippet></ROW><ROW><id>14412363</id><snippet>bundle.request.GET</snippet></ROW><ROW><id>14412961</id><snippet>(Pdb) hypref.encode('utf-8')
'NDTV'
(Pdb) hypref.__class__
&lt;class 'bs4.element.NavigableString'&gt;
(Pdb) hypref.__class__.__bases__
(&lt;type 'unicode'&gt;, &lt;class 'bs4.element.PageElement'&gt;)
</snippet></ROW><ROW><id>14412961</id><snippet>hypref.encode('utf-8')
</snippet></ROW><ROW><id>14412999</id><snippet>print</snippet></ROW><ROW><id>14412999</id><snippet>or</snippet></ROW><ROW><id>14412999</id><snippet>and</snippet></ROW><ROW><id>14412999</id><snippet>return print('Hello') or print('Hello again')</snippet></ROW><ROW><id>14412999</id><snippet>Hello</snippet></ROW><ROW><id>14412999</id><snippet>None</snippet></ROW><ROW><id>14412999</id><snippet>return None or print('Hello again')</snippet></ROW><ROW><id>14412999</id><snippet>or</snippet></ROW><ROW><id>14412999</id><snippet>Hello again</snippet></ROW><ROW><id>14412999</id><snippet>return None or None</snippet></ROW><ROW><id>14412999</id><snippet>return print('Hello') and print('Hello again')</snippet></ROW><ROW><id>14412999</id><snippet>Hello</snippet></ROW><ROW><id>14412999</id><snippet>None</snippet></ROW><ROW><id>14412999</id><snippet>return None and print('Hello again')</snippet></ROW><ROW><id>14412999</id><snippet>and</snippet></ROW><ROW><id>14412999</id><snippet>return False</snippet></ROW><ROW><id>14413108</id><snippet>import traceback

class MyClass(object):
   def __init__(self):
       self.traceback = traceback.extract_stack()[-2]

obj = MyClass()

print 'Instantiated in {0}:{1}'.format(*obj.traceback)
</snippet></ROW><ROW><id>14413520</id><snippet>addReportResult</snippet></ROW><ROW><id>14413520</id><snippet>def create_report(fix, description): # I've changed the name to snake_casing
    fix.description = description
    return fix

def unit_history(request,unitid, syear, smonth, sday, shour, fyear, fmonth, fday, fhour, type=None):
    reports = []
    waypoints = Fixes.objects.filter(name=(unitid))
    waypoints = waypoints.filter(gpstime__range=(awareStartTime, awareEndTime)).order_by('gpstime')[:1000]
    if waypoints:
        for index in range(len(waypoints)): 
            report = create_report(waypointsindex, description)
            reports.append(report)
    return render_to_response('unitHistory.html', {'fixes': reportResults})
</snippet></ROW><ROW><id>14413588</id><snippet>for link_tag in li:
  contents = link_tag.find('a').contents
  if len(contents) &gt; 0:
    hypref = contents[0]
    strhyp = hypref.encode('utf-8')
    fptr.write(strhyp)
    fptr.write("\n")
</snippet></ROW><ROW><id>14413608</id><snippet>mod_wsgi</snippet></ROW><ROW><id>14413608</id><snippet>brew tap homebrew/apache
brew install mod_wsgi
</snippet></ROW><ROW><id>14413717</id><snippet>In [8]: lis = ['a','b','c','d','x','e','f','g','h','i','x','j','k','l']

#create a new list containing all the index positions of 'x'

In [9]: ind=[i for i,x in enumerate(lis) if x=='x']

In [10]: out=[]

# loop over ind list, and for every index i:
# here lis[i-2:i] are the elements left to the 'x' and similarly lis[i:i+3]
# are the ones to its right.
# which is  simply  lis[i-2:i+3] as suggested by @volatility

In [11]: for i in ind:
    out.extend(lis[i-2:i+3])

   ....:     


In [12]: out
Out[12]: ['c', 'd', 'x', 'e', 'f', 'h', 'i', 'x', 'j', 'k']
</snippet></ROW><ROW><id>14413717</id><snippet>itertools.chain()</snippet></ROW><ROW><id>14413717</id><snippet>In [19]: from itertools import *

In [20]: list(chain(*[lis[i-2:i+3] for i in ind]))
Out[20]: ['c', 'd', 'x', 'e', 'f', 'h', 'i', 'x', 'j', 'k']
</snippet></ROW><ROW><id>14413794</id><snippet>from flask import Flask, render_template
from flask.ext.assets import Environment, Bundle

app = Flask(__name__)

assets = Environment(app)
assets.url = app.static_url_path
scss = Bundle('foo.scss', 'bar.scss', filters='pyscss', output='all.css')
assets.register('scss_all', scss)
</snippet></ROW><ROW><id>14413794</id><snippet>{% assets "scss_all" %}
&lt;link rel=stylesheet type=text/css href="{{ ASSET_URL }}"&gt;
{% endassets %}
</snippet></ROW><ROW><id>14413794</id><snippet>sass</snippet></ROW><ROW><id>14413794</id><snippet>scss</snippet></ROW><ROW><id>14413794</id><snippet>compass</snippet></ROW><ROW><id>14413913</id><snippet>from matplotlib import pyplot as plt
import numpy as np
from numpy.random import randint
import matplotlib

x = np.arange(0.0, 100.0, 2.0)
y = x ** 1.3 + np.random.rand(*x.shape) * 30.0
s = np.random.rand(*x.shape) * 800 + 500

markers = ['\\alpha', '\\beta', '\gamma', '\sigma','\infty', \
            '\spadesuit', '\heartsuit', '\diamondsuit', '\clubsuit', \
            '\\bigodot', '\\bigotimes', '\\bigoplus', '\imath', '\\bowtie', \
            '\\bigtriangleup', '\\bigtriangledown', '\oslash' \
           '\ast', '\\times', '\circ', '\\bullet', '\star', '+', \
            '\Theta', '\Xi', '\Phi', \
            '\$', '\#', '\%', '\S']

def getRandomMarker():
    return "$"+markers[randint(0,len(markers),1)]+"$"

def getMarker(i):
    # Use modulus in order not to have the index exceeding the lenght of the list (markers)
    return "$"+markers[i % len(markers)]+"$"

for i, mi in enumerate(markers):
    plt.plot(x[i], y[i], "b", alpha=0.5, marker=getRandomMarker(), markersize=randint(16,26,1))
    plt.plot(x[i], y[i]+50, "m", alpha=0.5, marker=getMarker(i), markersize=randint(16,26,1))
    # Let's see if their "center" is located where we expect them to be...
    plt.plot(x[i], y[i]+100, "y", alpha=0.5, marker=getMarker(i), markersize=24)
    plt.plot(x[i], y[i]+100, "k+", markersize=12, markeredgewidth=2)

plt.xlabel("x-axis")
plt.ylabel("y-axis")
plt.xlim( -5, plt.xlim()[1]+5 )
plt.ylim( 0, plt.ylim()[1]*1.1 )
gcf().set_size_inches(12,6)
plt.show()
</snippet></ROW><ROW><id>14413978</id><snippet>for</snippet></ROW><ROW><id>14413978</id><snippet>StopIteration</snippet></ROW><ROW><id>14413978</id><snippet>for</snippet></ROW><ROW><id>14413978</id><snippet>for</snippet></ROW><ROW><id>14413978</id><snippet>StopIteration</snippet></ROW><ROW><id>14413978</id><snippet>return None</snippet></ROW><ROW><id>14413978</id><snippet>StopIteration</snippet></ROW><ROW><id>14413978</id><snippet>StopIteration</snippet></ROW><ROW><id>14413978</id><snippet>StopIteration</snippet></ROW><ROW><id>14413978</id><snippet>next()</snippet></ROW><ROW><id>14413978</id><snippet>.next()</snippet></ROW><ROW><id>14413978</id><snippet>.__next__()</snippet></ROW><ROW><id>14413978</id><snippet>StopIterator</snippet></ROW><ROW><id>14413978</id><snippet>GeneratorExit</snippet></ROW><ROW><id>14413978</id><snippet>yield</snippet></ROW><ROW><id>14413978</id><snippet>GeneratorExit</snippet></ROW><ROW><id>14413978</id><snippet>countdown</snippet></ROW><ROW><id>14413978</id><snippet>GeneratorExit</snippet></ROW><ROW><id>14413978</id><snippet>generator.close()</snippet></ROW><ROW><id>14414053</id><snippet>countries</snippet></ROW><ROW><id>14414053</id><snippet>countries = ['A', 'B', 'C', 'D', 'E', 'F', 'G']
cindex = dict(zip(countries, range(len(countries))))
# {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}
</snippet></ROW><ROW><id>14414053</id><snippet>country</snippet></ROW><ROW><id>14414053</id><snippet>cindex[country]</snippet></ROW><ROW><id>14414053</id><snippet>countries[index]</snippet></ROW><ROW><id>14414053</id><snippet>from collections import defaultdict

colors = ['Red', 'Yellow', 'Green', 'Blue']
mapColors = defaultdict(str)


def okToColor(Map, country, color):
    for c in Map[country]:
        if mapColors[c] == color:
            return False
    return True


def explore(Map, country, color):
    if cindex[country] &gt;= len(Map):
        return True
    if okToColor(Map, country, color):
        mapColors[country] = color
        for color in colors:
            try:
                next_country = countries[cindex[country] + 1]
            except IndexError:
                return True
            if explore(Map, next_country, color):
                return True
    return False


def printMap():
    for c in mapColors:
        print c, mapColors[c]

countries = ['A', 'B', 'C', 'D', 'E', 'F', 'G']
cindex = dict(zip(countries, range(len(countries))))
Map = [[1, 4, 2, 5], [0, 4, 6, 5], [0, 4, 3, 6, 5], [2, 4, 6],
      [0, 1, 6, 3, 2], [2, 6, 1, 0], [2, 3, 4, 1, 5]]
Map = {countries[idx]: [countries[n] for n in item] for idx,
       item in enumerate(Map)}
result = explore(Map, 'A', 'Red')
print(result)
printMap()
</snippet></ROW><ROW><id>14414053</id><snippet>True
A Red
C Yellow
B Yellow
E Green
D Red
G Blue
F Green
</snippet></ROW><ROW><id>14414130</id><snippet>scipy</snippet></ROW><ROW><id>14414130</id><snippet>linalg.lapack_lite.dpotrf</snippet></ROW><ROW><id>14414130</id><snippet>import numpy as np

# prepare test data
A = np.random.normal(size=(10,10))
A = np.dot(A,A.T)
L = np.tril(A)

# actual in-place cholesky
assert L.dtype is np.dtype(np.float64)
assert L.flags['C_CONTIGUOUS']
n, m = L.shape
assert n == m
result = np.linalg.lapack_lite.dpotrf('U', n, L, n, 0)
assert result['info'] is 0

# check if L is the desired L cholesky factor
assert np.allclose(np.dot(L,L.T), A)
assert np.allclose(L, np.linalg.cholesky(A))
</snippet></ROW><ROW><id>14414130</id><snippet>result['info'] == 0</snippet></ROW><ROW><id>14414130</id><snippet>linalg.cholesky</snippet></ROW><ROW><id>14414231</id><snippet>__subclasscheck__</snippet></ROW><ROW><id>14414231</id><snippet>issubclass</snippet></ROW><ROW><id>14414231</id><snippet>issubclass(X,Y)</snippet></ROW><ROW><id>14414231</id><snippet>Y.__subclasscheck__</snippet></ROW><ROW><id>14414231</id><snippet>Y.__subclasscheck__(X)</snippet></ROW><ROW><id>14414231</id><snippet>__instancecheck__</snippet></ROW><ROW><id>14414231</id><snippet>isinstance</snippet></ROW><ROW><id>14414231</id><snippet>isinstance(X, Y)</snippet></ROW><ROW><id>14414231</id><snippet>Y.__instancecheck__</snippet></ROW><ROW><id>14414231</id><snippet>Y.__instancecheck__(X)</snippet></ROW><ROW><id>14414231</id><snippet>In [121]: class FooProxy3(object):
     ...:     pass

In [122]: issubclass(FooProxy3,IFoo)
Out[122]: False

In [123]: for c in IFoo.implementors:
     ...:     print c
     ...:     
&lt;class '__main__.Foo'&gt;
&lt;class '__main__.FooProxy'&gt;

In [124]: for c in FooProxy3.mro():
     ...:     print c
     ...:     
&lt;class '__main__.FooProxy3'&gt;
&lt;type 'object'&gt;

In [125]: IFoo.register(FooProxy3)

In [126]: for c in IFoo.implementors:
     ...:     print c
     ...:     
&lt;class '__main__.Foo'&gt;
&lt;class '__main__.FooProxy'&gt;
&lt;class '__main__.FooProxy3'&gt;

In [127]: issubclass(FooProxy3,IFoo)
Out[127]: True
</snippet></ROW><ROW><id>14414231</id><snippet>FooProxy3</snippet></ROW><ROW><id>14414231</id><snippet>issubclass</snippet></ROW><ROW><id>14414231</id><snippet>False</snippet></ROW><ROW><id>14414231</id><snippet>Out[122]</snippet></ROW><ROW><id>14414231</id><snippet>IFoo.implementors</snippet></ROW><ROW><id>14414231</id><snippet>In[123]</snippet></ROW><ROW><id>14414231</id><snippet>register</snippet></ROW><ROW><id>14414231</id><snippet>FooProxy</snippet></ROW><ROW><id>14414231</id><snippet>IFoo.implementors</snippet></ROW><ROW><id>14414231</id><snippet>Foxproxy3</snippet></ROW><ROW><id>14414231</id><snippet>IFoo.implementors</snippet></ROW><ROW><id>14414231</id><snippet>In[126]</snippet></ROW><ROW><id>14414231</id><snippet>issubclass</snippet></ROW><ROW><id>14414231</id><snippet>True</snippet></ROW><ROW><id>14414338</id><snippet>int()</snippet></ROW><ROW><id>14414338</id><snippet>In [5]: sorted(d, key=lambda x:int(x[0]))
Out[5]: [['4', 'c'], ['12', 'a'], ['123', 'b']]
</snippet></ROW><ROW><id>14414338</id><snippet>In [10]: sorted(d, key=lambda x:int(x[0]))
Out[10]: [['04', 'c'], ['012', 'a'], ['0123', 'b']]
</snippet></ROW><ROW><id>14414352</id><snippet>solrpy</snippet></ROW><ROW><id>14414352</id><snippet>/</snippet></ROW><ROW><id>14414352</id><snippet>solrUrl = 'http://localhost:8983/solr'</snippet></ROW><ROW><id>14414488</id><snippet>0 ** 0</snippet></ROW><ROW><id>14414488</id><snippet>0 ** 0 = 1</snippet></ROW><ROW><id>14414488</id><snippet>0 ** 0</snippet></ROW><ROW><id>14414488</id><snippet>0⁄0</snippet></ROW><ROW><id>14414488</id><snippet>0 ** 0 = 1</snippet></ROW><ROW><id>14414488</id><snippet>pow(0, 0)</snippet></ROW><ROW><id>14414488</id><snippet>pown(0, 0)</snippet></ROW><ROW><id>14414488</id><snippet>1</snippet></ROW><ROW><id>14414488</id><snippet>powr(0, 0)</snippet></ROW><ROW><id>14414488</id><snippet>NaN</snippet></ROW><ROW><id>14414488</id><snippet>0 ** 0 == 1</snippet></ROW><ROW><id>14414520</id><snippet>math.py</snippet></ROW><ROW><id>14414638</id><snippet>co_freevars</snippet></ROW><ROW><id>14414638</id><snippet>co_cellvars</snippet></ROW><ROW><id>14414638</id><snippet>__code__</snippet></ROW><ROW><id>14414638</id><snippet>co_freevars</snippet></ROW><ROW><id>14414638</id><snippet>def foo():
    def bar():
        print(spam)

    spam = 'ham'
    bar()
    spam = 'eggs'
    bar()
    return bar

b = foo()
b()
</snippet></ROW><ROW><id>14414638</id><snippet>bar</snippet></ROW><ROW><id>14414638</id><snippet>spam</snippet></ROW><ROW><id>14414638</id><snippet>foo</snippet></ROW><ROW><id>14414638</id><snippet>spam</snippet></ROW><ROW><id>14414638</id><snippet>foo()</snippet></ROW><ROW><id>14414638</id><snippet>bar</snippet></ROW><ROW><id>14414638</id><snippet>eggs</snippet></ROW><ROW><id>14414638</id><snippet>spam</snippet></ROW><ROW><id>14414638</id><snippet>foo</snippet></ROW><ROW><id>14414638</id><snippet>&gt;&gt;&gt; b=foo()
ham
eggs
&gt;&gt;&gt; b()
eggs
</snippet></ROW><ROW><id>14414638</id><snippet>b.__closure__[0].cell_contents</snippet></ROW><ROW><id>14414638</id><snippet>'eggs'</snippet></ROW><ROW><id>14414718</id><snippet>def wrapper(*args, **kwargs):
</snippet></ROW><ROW><id>14414718</id><snippet>(*args, **kwargs)</snippet></ROW><ROW><id>14414718</id><snippet>&gt;&gt;&gt; def square(x):
...     return x*x
...
&gt;&gt;&gt; args = (10,)
&gt;&gt;&gt; kwargs = {}
&gt;&gt;&gt; square(*args, **kwargs)
100
</snippet></ROW><ROW><id>14414788</id><snippet>content = inputFile.read().lower
</snippet></ROW><ROW><id>14414788</id><snippet>content = inputFile.read().lower()
</snippet></ROW><ROW><id>14414788</id><snippet>str.lower</snippet></ROW><ROW><id>14414887</id><snippet>words = set()
with open("input.txt", "r") as fd:
    for line in fd:
        words.update(line.split())
</snippet></ROW><ROW><id>14414887</id><snippet>set</snippet></ROW><ROW><id>14414887</id><snippet>import re
import string

non_word_re = re.compile(r"[^-\w']+")
words = set()
with open("input.txt", "r") as fd:
    for line in fd:
        words.update(i for i in non_word_re.split(line) if i[0] in string.letters)
</snippet></ROW><ROW><id>14414887</id><snippet>set</snippet></ROW><ROW><id>14414887</id><snippet>[a-zA-Z0-9_-']</snippet></ROW><ROW><id>14414887</id><snippet>all_distances = {}
for word in words:
    all_distances[word] = dict((i, calculate_distance(word, i)) for i in words)
</snippet></ROW><ROW><id>14414887</id><snippet>with open("output.txt", "w") as fd:
    fd.write("\t" + "\t".join(sorted(all_distances.keys())) + "\n")
    for word1, distances in sorted(all_distances.iteritems()):
        fd.write(word1 + "\t" + "\t".join(i[1] for i in sorted(distances.iteritems())))
</snippet></ROW><ROW><id>14414965</id><snippet>\</snippet></ROW><ROW><id>14414965</id><snippet>def handle_csrf():
    """The general recommendation by people in the know [OWASP]_, is
       'to implement the Synchronizer Token Pattern (STP_)'.

       .. [OWASP] The Open Web Application Security Project
          (https://www.owasp.org/index.php/Cross-\
Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet)
       .. _STP: http://www.corej2eepatterns.com/Design/PresoDesign.htm

    """
</snippet></ROW><ROW><id>14414965</id><snippet>&gt;&gt;&gt; print handle_csrf.__doc__
The general recommendation by people in the know [OWASP]_, is
       'to implement the Synchronizer Token Pattern (STP_)'.

       .. [OWASP] The Open Web Application Security Project
          (https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet)
       .. _STP: http://www.corej2eepatterns.com/Design/PresoDesign.htm
</snippet></ROW><ROW><id>14415274</id><snippet>#!/usr/bin/python

import urllib
import csv

url = "http://www.football-data.co.uk/mmz4281/1213/I1.csv"
csv_file = urllib.urlopen(url)

for row in csv.reader(csv_file):
  print row
</snippet></ROW><ROW><id>14415391</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14415391</id><snippet>sitecustomize</snippet></ROW><ROW><id>14415391</id><snippet>sitecustomize.py</snippet></ROW><ROW><id>14415391</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14415391</id><snippet>sitecustomize</snippet></ROW><ROW><id>14415391</id><snippet>ImportError</snippet></ROW><ROW><id>14415411</id><snippet>set DISTUTILS_DEBUG=1
python setup.py ....
</snippet></ROW><ROW><id>14415411</id><snippet>python setup.py build_ext -c mingw32
</snippet></ROW><ROW><id>14415791</id><snippet>Decimal</snippet></ROW><ROW><id>14415791</id><snippet>float</snippet></ROW><ROW><id>14415801</id><snippet>asarray</snippet></ROW><ROW><id>14415801</id><snippet>def asarray(a, dtype=None, order=None):
    return array(a, dtype, copy=False, order=order)
</snippet></ROW><ROW><id>14415801</id><snippet>array</snippet></ROW><ROW><id>14415801</id><snippet>copy = False</snippet></ROW><ROW><id>14415801</id><snippet>array</snippet></ROW><ROW><id>14415801</id><snippet>copy = True</snippet></ROW><ROW><id>14415801</id><snippet>array</snippet></ROW><ROW><id>14415801</id><snippet>asarray</snippet></ROW><ROW><id>14416022</id><snippet>fh = codecs.open(fname,'r','utf8')
</snippet></ROW><ROW><id>14416022</id><snippet>fh.read()</snippet></ROW><ROW><id>14416022</id><snippet>con.set_character_set('utf8')
</snippet></ROW><ROW><id>14416022</id><snippet>fh = open(fname, 'r')
</snippet></ROW><ROW><id>14416022</id><snippet>fh.read()</snippet></ROW><ROW><id>14416022</id><snippet>fname</snippet></ROW><ROW><id>14416022</id><snippet>def open(filename, mode='rb', encoding=None, errors='strict', buffering=1):

    if encoding is not None:
        if 'U' in mode:
            # No automatic conversion of '\n' is done on reading and writing
            mode = mode.strip().replace('U', '')
            if mode[:1] not in set('rwa'):
                mode = 'r' + mode
        if 'b' not in mode:
            # Force opening of the file in binary mode
            mode = mode + 'b'
    file = __builtin__.open(filename, mode, buffering)
    if encoding is None:
        return file
    info = lookup(encoding)
    srw = StreamReaderWriter(file, info.streamreader, info.streamwriter, errors)
    # Add attributes to simplify introspection
    srw.encoding = encoding
    return srw
</snippet></ROW><ROW><id>14416022</id><snippet>encoding</snippet></ROW><ROW><id>14416022</id><snippet>file = __builtin__.open(filename, mode, buffering)
if encoding is None:
     return file
</snippet></ROW><ROW><id>14416022</id><snippet>codecs.open</snippet></ROW><ROW><id>14416022</id><snippet>open</snippet></ROW><ROW><id>14416022</id><snippet>open</snippet></ROW><ROW><id>14416022</id><snippet>read</snippet></ROW><ROW><id>14416022</id><snippet>codecs.open</snippet></ROW><ROW><id>14416022</id><snippet>StreamReaderWriter</snippet></ROW><ROW><id>14416022</id><snippet>srw.encoding</snippet></ROW><ROW><id>14416022</id><snippet>encoding</snippet></ROW><ROW><id>14416022</id><snippet>StreamReaderWriter</snippet></ROW><ROW><id>14416022</id><snippet>read</snippet></ROW><ROW><id>14416022</id><snippet>str</snippet></ROW><ROW><id>14416022</id><snippet>In [19]: content
Out[19]: '\xe2\x80\x9cThank you.\xe2\x80\x9d'
</snippet></ROW><ROW><id>14416022</id><snippet>'ascii'</snippet></ROW><ROW><id>14416022</id><snippet>StreamReaderWriter</snippet></ROW><ROW><id>14416022</id><snippet>content</snippet></ROW><ROW><id>14416022</id><snippet>'ascii'</snippet></ROW><ROW><id>14416022</id><snippet>In [20]: content.decode('ascii')

UnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>14416022</id><snippet>ascii</snippet></ROW><ROW><id>14416022</id><snippet>'\xe2'</snippet></ROW><ROW><id>14416022</id><snippet>content</snippet></ROW><ROW><id>14416022</id><snippet>In [13]: with codecs.open(filename, 'r') as f:
   ....:     content = f.read() 

In [14]: content
Out[14]: '\xe2\x80\x9cThank you.\xe2\x80\x9d'
</snippet></ROW><ROW><id>14416022</id><snippet>content</snippet></ROW><ROW><id>14416022</id><snippet>str</snippet></ROW><ROW><id>14416022</id><snippet>In [22]: with codecs.open(filename, 'r', encoding = 'utf-8') as f:
   ....:     content = f.read()


In [23]: content
Out[23]: u'\u201cThank you.\u201d'
</snippet></ROW><ROW><id>14416022</id><snippet>content</snippet></ROW><ROW><id>14416022</id><snippet>unicode</snippet></ROW><ROW><id>14416022</id><snippet>In [25]: with codecs.open(filename, 'r', 'ascii') as f:
   ....:     content = f.read()
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>14416022</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>14416114</id><snippet>class Player(object): 
    def __init__(self, name):
        self.name = name

p1 = Player("bernard")
p2 = Player("hoagie")

t = (p1, p2, ...)
d = {p: p.name + " something something" for p in t}
</snippet></ROW><ROW><id>14416120</id><snippet>pybabel compile -f -d ./locale</snippet></ROW><ROW><id>14416120</id><snippet>locale/en_US/LC_MESSAGES/messages.mo</snippet></ROW><ROW><id>14416150</id><snippet>ndb.Key()</snippet></ROW><ROW><id>14416150</id><snippet>kind</snippet></ROW><ROW><id>14416150</id><snippet>id</snippet></ROW><ROW><id>14416150</id><snippet>ndb.Key(model1, id1, model2, id2, ..)
</snippet></ROW><ROW><id>14416150</id><snippet>urlsafe</snippet></ROW><ROW><id>14416374</id><snippet>minAreaRect</snippet></ROW><ROW><id>14416374</id><snippet>box = cv2.minAreaRect(numpy.array([whitep], dtype=numpy.int32))
</snippet></ROW><ROW><id>14416484</id><snippet>&gt;&gt;&gt; def f(x):
...     return x[0]*14.80461 + x[1]*(-4.9233) + x[2]*(10*0.4803) 
&gt;&gt;&gt; def vf(x):
...    return [f(x), 0, 0]
&gt;&gt; xx = fsolve(vf, x0=[0,0,1])
&gt;&gt;&gt; 
&gt;&gt;&gt; f(xx)
8.8817841970012523e-16
</snippet></ROW><ROW><id>14416484</id><snippet>fsolve</snippet></ROW><ROW><id>14416484</id><snippet>f(x)</snippet></ROW><ROW><id>14416484</id><snippet>x</snippet></ROW><ROW><id>14416484</id><snippet>fsolve</snippet></ROW><ROW><id>14416484</id><snippet>x[1]</snippet></ROW><ROW><id>14416484</id><snippet>x[2]</snippet></ROW><ROW><id>14416484</id><snippet>x[0]</snippet></ROW><ROW><id>14416484</id><snippet>x0</snippet></ROW><ROW><id>14416484</id><snippet>f(x)=0</snippet></ROW><ROW><id>14416542</id><snippet>len(data)</snippet></ROW><ROW><id>14416542</id><snippet>data</snippet></ROW><ROW><id>14416542</id><snippet>.splitlines()</snippet></ROW><ROW><id>14416542</id><snippet>chars = words = lines = 0
with open(file_name, 'r') as in_file:
    for line in in_file:
        lines += 1
        words += len(line.split())
        chars += len(line)
</snippet></ROW><ROW><id>14416542</id><snippet>for line in in_file:</snippet></ROW><ROW><id>14416650</id><snippet>body_as_unicode</snippet></ROW><ROW><id>14416650</id><snippet>In [1]: fetch('http://scrapy.org')
...
In [2]: type(response)
Out[2]: scrapy.http.response.html.HtmlResponse
...
In [3]: fetch('http://www.scrapy.org/site-media/images/logo.png')
...
In [4]: type(response)
Out[4]: scrapy.http.response.Response
</snippet></ROW><ROW><id>14416773</id><snippet>import operator
primers_unsorted.sort(key=operator.itemgetter(' Construct Number', ' Part Number'))

for row in primers_unsorted:
    print(row)
</snippet></ROW><ROW><id>14417036</id><snippet>apply</snippet></ROW><ROW><id>14417036</id><snippet>def no_comma_or_dollar(num):
    if isinstance(num, unicode):
        return float(num.lstrip('$').replace(',',''))
    else:
        return num

table[col_name] = table[col_name].apply(no_comma_or_dollar)
</snippet></ROW><ROW><id>14417036</id><snippet>df = pd.DataFrame([[u'$1,000'], [200.]])

In [3]: df[0].apply(no_comma_or_dollar)
Out[3]: 
0    1000
1     200
Name: 0
</snippet></ROW><ROW><id>14417036</id><snippet>thread</snippet></ROW><ROW><id>14417036</id><snippet>no_comma_or_dollar</snippet></ROW><ROW><id>14417036</id><snippet>applymap</snippet></ROW><ROW><id>14417036</id><snippet>def no_comma_or_dollar2(num):
    try:
        return float(num.lstrip('$').replace(',',''))
    except: # if you can't strip/replace/convert just leave it
        return num

In [5]: thread.applymap(no_comma_or_dollar2)
Out[5]: 
        Consolidated Balance Sheet (USD $)  Dec. 31, 2011  Sep. 30, 2012
0  In Millions, unless otherwise specified            NaN            NaN
1                           Current assets            NaN            NaN
2                Cash and cash equivalents           2219           3029
3          Marketable securities - current           1461           1989
4                Accounts receivable - net           3867           4409
</snippet></ROW><ROW><id>14417115</id><snippet>configuration.ini</snippet></ROW><ROW><id>14417115</id><snippet>global_config['__file__']</snippet></ROW><ROW><id>14417115</id><snippet>env/bin/setup-blog -o production.ini
</snippet></ROW><ROW><id>14417309</id><snippet>.</snippet></ROW><ROW><id>14417309</id><snippet>DOTALL</snippet></ROW><ROW><id>14417309</id><snippet>regex = re.compile('&lt;li&gt;.*end', re.DOTALL)
</snippet></ROW><ROW><id>14417309</id><snippet>regex = re.compile('&lt;li&gt;.*end(?S)')
</snippet></ROW><ROW><id>14417309</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>14417309</id><snippet>$</snippet></ROW><ROW><id>14417309</id><snippet>^</snippet></ROW><ROW><id>14417435</id><snippet>b = copy.deepcopy(a)</snippet></ROW><ROW><id>14417435</id><snippet>b = a</snippet></ROW><ROW><id>14417435</id><snippet>copy</snippet></ROW><ROW><id>14417435</id><snippet>deepcopy</snippet></ROW><ROW><id>14417435</id><snippet>=</snippet></ROW><ROW><id>14417495</id><snippet>regex</snippet></ROW><ROW><id>14417495</id><snippet>Total Cost:\s?</snippet></ROW><ROW><id>14417495</id><snippet>Total Cost:</snippet></ROW><ROW><id>14417495</id><snippet>\s?</snippet></ROW><ROW><id>14417495</id><snippet>1 to 0 times Whitespace [\t \r\n\f]</snippet></ROW><ROW><id>14417495</id><snippet>([-+]?\d+)</snippet></ROW><ROW><id>14417495</id><snippet>[-+]?</snippet></ROW><ROW><id>14417495</id><snippet>1 to 0 times matches one of the following chars: -+</snippet></ROW><ROW><id>14417495</id><snippet>\d+</snippet></ROW><ROW><id>14417495</id><snippet>infinite to 1 times Digit [0-9]</snippet></ROW><ROW><id>14417495</id><snippet>In [121]: strs="some text Total Cost: 37 some more more Total Cost: -100"

In [122]: re.findall(r"Total Cost:\s?([-+]?\d+)",strs)
Out[122]: ['37', '-100']
</snippet></ROW><ROW><id>14417506</id><snippet>except</snippet></ROW><ROW><id>14417506</id><snippet>try</snippet></ROW><ROW><id>14417506</id><snippet>def __init__(self, file):
    try:
        self.vcfFile = gzip.open(file, 'rb')
    except IOError:
        print "Not a gzipped file"
        sys.exit()

    self.samples = self.readHeader() # &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; exception is raised here
</snippet></ROW><ROW><id>14417573</id><snippet>stderr</snippet></ROW><ROW><id>14417573</id><snippet>import sys
print &gt;&gt; sys.stderr, "Starting..."
print "Done!"
</snippet></ROW><ROW><id>14417573</id><snippet>&gt;</snippet></ROW><ROW><id>14417573</id><snippet>python test.py &gt; test.txt</snippet></ROW><ROW><id>14417573</id><snippet>stderr</snippet></ROW><ROW><id>14417573</id><snippet>test.txt</snippet></ROW><ROW><id>14417573</id><snippet>Done!</snippet></ROW><ROW><id>14417604</id><snippet>if (number &gt; 5 and
        number &lt; 15):
    print "1"
</snippet></ROW><ROW><id>14417604</id><snippet>if number &gt; 5 and \
number &lt; 15:
    print "1"
</snippet></ROW><ROW><id>14417604</id><snippet>if number &gt; 5 and \
        number &lt; 15:
    print "1"
</snippet></ROW><ROW><id>14417912</id><snippet>*.py</snippet></ROW><ROW><id>14417912</id><snippet>*.pyc</snippet></ROW><ROW><id>14417912</id><snippet>*.pyo</snippet></ROW><ROW><id>14417912</id><snippet>.py</snippet></ROW><ROW><id>14418049</id><snippet>&gt;&gt;&gt; def func2(numbers):
    two = numbers[0]


&gt;&gt;&gt; def func1():
    numbers = [1, 2, 3, 4]
    if numbers.count(1) &gt; 0:
        numbers.remove(1)
        func2(numbers)
</snippet></ROW><ROW><id>14418049</id><snippet>&gt;&gt;&gt; class Foo(object):
    def __init__(self, numbers):
        self.numbers = numbers
        pass
    def func1(self):
        if self.numbers.count(1) &gt; 0:
            self.numbers.remove(1)
            self.func2()
    def func2(self):
        two = self.numbers[0]


&gt;&gt;&gt; Foo([1, 2, 3, 4]).func1()
</snippet></ROW><ROW><id>14418049</id><snippet>&gt;&gt;&gt; def func1(func):
    def wraps(*argv):
        numbers = argv[0]
        if numbers.count(1) &gt; 0:
        numbers.remove(1)
        func(*argv)
    return wraps

&gt;&gt;&gt; @func1
def func2(numbers):
    two = numbers[0]


&gt;&gt;&gt; func2([1,2,3,4])
</snippet></ROW><ROW><id>14418049</id><snippet>&gt;&gt;&gt; def func1():
    def func2():
    two = numbers[0]
    numbers = [1, 2, 3, 4]
    if numbers.count(1) &gt; 0:
        numbers.remove(1)
        func2()


&gt;&gt;&gt; func1()
</snippet></ROW><ROW><id>14418289</id><snippet>pyplot.xticks([1, 3, 10, 20])</snippet></ROW><ROW><id>14418345</id><snippet>pip install --download-cache=DIR
</snippet></ROW><ROW><id>14418345</id><snippet>PIP_DOWNLOAD_CACHE</snippet></ROW><ROW><id>14418358</id><snippet>winhttp.SetOption(6, False)
</snippet></ROW><ROW><id>14418383</id><snippet>try..except</snippet></ROW><ROW><id>14418383</id><snippet>try..except</snippet></ROW><ROW><id>14418383</id><snippet>try..except</snippet></ROW><ROW><id>14418383</id><snippet>except</snippet></ROW><ROW><id>14418567</id><snippet>import cherrypy

from webapp1 import WebApp1
from webapp2 import WebApp2

cherrypy.tree.mount(WebApp1, '/WebApp1')
cherrypy.tree.mount(WebApp2, '/WebApp2')
cherrypy.engine.start()
cherrypy.engine.block()
</snippet></ROW><ROW><id>14418567</id><snippet> import cherrypy

 class AppOne(object):
     def index(self):
         return 'Hi from app one!'
     index.exposed = True

 class AppTwo(object):
     def index(self):
         return 'Hi from app two!'
     index.exposed = True

 if __name__ == '__main__':
     cherrypy.tree.mount(AppOne(), '/app1')
     cherrypy.tree.mount(AppTwo(), '/app2')
     cherrypy.engine.start()
     cherrypy.engine.block()
</snippet></ROW><ROW><id>14418567</id><snippet> import cherrypy

 class AppOne(object):
     def index(self):
         return 'Hi from app one!'
     index.exposed = True

 class AppTwo(object):
     def index(self):
         return 'Hi from app two!'
     index.exposed = True

 class Root(object):
     app1 = AppOne()
     app2 = AppTwo()

 if __name__ == '__main__':
     cherrypy.tree.mount(Root())
     cherrypy.engine.start()
     cherrypy.engine.block()
     # cherrypy.quickstart(Root()) # is the same
</snippet></ROW><ROW><id>14418596</id><snippet>pBaudrate.contents.value</snippet></ROW><ROW><id>14418596</id><snippet>c_uint()</snippet></ROW><ROW><id>14418596</id><snippet>import ctypes
from ctypes import wintypes

lib = ctypes.WinDLL(dllnamehere)
lib.VCS_GetProtocolStackSettings.argtypes = [wintypes.HANDLE,wintypes.PDWORD,wintypes.PDWORD,wintypes.PDWORD]
lib.VCS_GetProtocolStackSettings.restype = wintypes.BOOL

def VCS_GetProtocolStackSettings(KeyHandle):
    baudrate = wintypes.DWORD()
    timeout = wintypes.DWORD()
    errorcode = wintypes.DWORD()
    result = lib.VCS_GetProtocolStackSettings(KeyHandle,ctypes.byref(baudrate),ctypes.byref(timeout),ctypes.byref(errorcode))
    if not result:
        raise RuntimeError('error code = {}'.format(errorcode.value))
    return baudrate.value,timeout.value
</snippet></ROW><ROW><id>14418596</id><snippet>WinDLL</snippet></ROW><ROW><id>14418596</id><snippet>__stdcall</snippet></ROW><ROW><id>14418596</id><snippet>__cdecl</snippet></ROW><ROW><id>14418596</id><snippet>CDLL</snippet></ROW><ROW><id>14418605</id><snippet>drinker.py</snippet></ROW><ROW><id>14418720</id><snippet>with open("file.txt") as inf:
    # divide into tab delimited lines
    split_lines = [l[:-1].split() for l in inf]
    # create 3 lists using zip
    lst1, lst2, lst3 = map(list, zip(*split_lines))
</snippet></ROW><ROW><id>14419048</id><snippet>csv</snippet></ROW><ROW><id>14419218</id><snippet>[:]</snippet></ROW><ROW><id>14419218</id><snippet>-1</snippet></ROW><ROW><id>14419218</id><snippet>&gt;&gt;&gt; a = [1,2,3,4,5,6]
&gt;&gt;&gt; a[:-1]
[1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>14419218</id><snippet>a[start:end]</snippet></ROW><ROW><id>14419218</id><snippet>&gt;&gt;&gt; a[1:2]
[2]
</snippet></ROW><ROW><id>14419218</id><snippet>a[start:]</snippet></ROW><ROW><id>14419218</id><snippet>&gt;&gt;&gt; a[1:]
[2, 3, 4, 5, 6]
</snippet></ROW><ROW><id>14419218</id><snippet>a[:end]</snippet></ROW><ROW><id>14419218</id><snippet>&gt;&gt;&gt; a = [1,2,3,4,5,6]
&gt;&gt;&gt; a[:-1]
[1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>14419218</id><snippet>a[:]</snippet></ROW><ROW><id>14419218</id><snippet>&gt;&gt;&gt; a[:]
[1, 2, 3, 4, 5, 6]
</snippet></ROW><ROW><id>14419318</id><snippet>&gt;&gt;&gt; a = np.array([0 +  0.5j, 0.25 + 1.2352444e-24j, 0.25+ 0j, 2.46519033e-32 + 0j])
&gt;&gt;&gt; a
array([  0.00000000e+00 +5.00000000e-01j,
         2.50000000e-01 +1.23524440e-24j,
         2.50000000e-01 +0.00000000e+00j,   2.46519033e-32 +0.00000000e+00j])
&gt;&gt;&gt; tol = 1e-16
&gt;&gt;&gt; a.real[abs(a.real) &lt; tol] = 0.0
&gt;&gt;&gt; a.imag[abs(a.imag) &lt; tol] = 0.0
&gt;&gt;&gt; a
array([ 0.00+0.5j,  0.25+0.j ,  0.25+0.j ,  0.00+0.j ])
</snippet></ROW><ROW><id>14419318</id><snippet>&gt;&gt;&gt; np.finfo(np.float).eps
2.2204460492503131e-16
</snippet></ROW><ROW><id>14419328</id><snippet>'r+'</snippet></ROW><ROW><id>14419328</id><snippet>'a+'</snippet></ROW><ROW><id>14419328</id><snippet>file</snippet></ROW><ROW><id>14419341</id><snippet>ET.fromstring</snippet></ROW><ROW><id>14419341</id><snippet>unicode</snippet></ROW><ROW><id>14419341</id><snippet>&gt;&gt;&gt; import lxml.etree as ET
&gt;&gt;&gt; 
&gt;&gt;&gt; content = '''\
... &lt;root xmlns="SVGNS"&gt;
... &lt;glyph unicode="©" horiz-adv-x="1792" d="M834 ... -40t-121 -18z " /&gt;
... &lt;glyph unicode="C" horiz-adv-x="1509" d="M1766 338q-49 ... 83.5v-215z" /&gt;
... &lt;/root&gt;'''
&gt;&gt;&gt; font = ET.fromstring(content)
&gt;&gt;&gt; font
&lt;Element {SVGNS}root at 0x7fd7ab978410&gt;
&gt;&gt;&gt; font.xpath('//n:glyph', namespaces={'n':'SVGNS'})[0].attrib
{'horiz-adv-x': '1792', 'unicode': u'\xa9', 'd': 'M834 ... -40t-121 -18z '}
</snippet></ROW><ROW><id>14419341</id><snippet>©</snippet></ROW><ROW><id>14419341</id><snippet>font</snippet></ROW><ROW><id>14419468</id><snippet>@staticmethod</snippet></ROW><ROW><id>14419468</id><snippet>def methodname(value)</snippet></ROW><ROW><id>14419468</id><snippet>def methodname (self, value) :</snippet></ROW><ROW><id>14419468</id><snippet>methodname</snippet></ROW><ROW><id>14419468</id><snippet>variable = (classname().methodname (userinput))</snippet></ROW><ROW><id>14419505</id><snippet>from gi.repository.Gtk import Clipboard
</snippet></ROW><ROW><id>14419674</id><snippet>#include &lt;stdio.h&gt;

typedef void (* function_t)(void);

unsigned char shellcode[] =
    "\xFC\x33\xD2\xB2\x30\x64\xFF\x32\x5A\x8B"
    "\x52\x0C\x8B\x52\x14\x8B\x72\x28\x33\xC9"
    "\xB1\x18\x33\xFF\x33\xC0\xAC\x3C\x61\x7C"
    "\x02\x2C\x20\xC1\xCF\x0D\x03\xF8\xE2\xF0"
    "\x81\xFF\x5B\xBC\x4A\x6A\x8B\x5A\x10\x8B"
    "\x12\x75\xDA\x8B\x53\x3C\x03\xD3\xFF\x72"
    "\x34\x8B\x52\x78\x03\xD3\x8B\x72\x20\x03"
    "\xF3\x33\xC9\x41\xAD\x03\xC3\x81\x38\x47"
    "\x65\x74\x50\x75\xF4\x81\x78\x04\x72\x6F"
    "\x63\x41\x75\xEB\x81\x78\x08\x64\x64\x72"
    "\x65\x75\xE2\x49\x8B\x72\x24\x03\xF3\x66"
    "\x8B\x0C\x4E\x8B\x72\x1C\x03\xF3\x8B\x14"
    "\x8E\x03\xD3\x52\x33\xFF\x57\x68\x61\x72"
    "\x79\x41\x68\x4C\x69\x62\x72\x68\x4C\x6F"
    "\x61\x64\x54\x53\xFF\xD2\x68\x33\x32\x01"
    "\x01\x66\x89\x7C\x24\x02\x68\x75\x73\x65"
    "\x72\x54\xFF\xD0\x68\x6F\x78\x41\x01\x8B"
    "\xDF\x88\x5C\x24\x03\x68\x61\x67\x65\x42"
    "\x68\x4D\x65\x73\x73\x54\x50\xFF\x54\x24"
    "\x2C\x57\x68\x4F\x5F\x6F\x21\x8B\xDC\x57"
    "\x53\x53\x57\xFF\xD0\x68\x65\x73\x73\x01"
    "\x8B\xDF\x88\x5C\x24\x03\x68\x50\x72\x6F"
    "\x63\x68\x45\x78\x69\x74\x54\xFF\x74\x24"
    "\x40\xFF\x54\x24\x40\x57\xFF\xD0";

void real_function(void) {
    puts("I'm here");
}

int main(int argc, char **argv)
{
    function_t function = (function_t) &amp;shellcode[0];

    real_function();
    function();
    return 0;
}
</snippet></ROW><ROW><id>14419674</id><snippet>&gt; gcc shellcode.c -o shellcode
&gt; gdb -q shellcode.exe
Reading symbols from shellcode.exe...done.
(gdb)
&gt;
</snippet></ROW><ROW><id>14419674</id><snippet>real_function</snippet></ROW><ROW><id>14419674</id><snippet>function</snippet></ROW><ROW><id>14419674</id><snippet>(gdb) disassemble main
Dump of assembler code for function main:
   0x004013a0 &lt;+0&gt;:     push   %ebp
   0x004013a1 &lt;+1&gt;:     mov    %esp,%ebp
   0x004013a3 &lt;+3&gt;:     and    $0xfffffff0,%esp
   0x004013a6 &lt;+6&gt;:     sub    $0x10,%esp
   0x004013a9 &lt;+9&gt;:     call   0x4018e4 &lt;__main&gt;
   0x004013ae &lt;+14&gt;:    movl   $0x402000,0xc(%esp)
   0x004013b6 &lt;+22&gt;:    call   0x40138c &lt;real_function&gt; ; &lt;- here we call our `real_function`
   0x004013bb &lt;+27&gt;:    mov    0xc(%esp),%eax
   0x004013bf &lt;+31&gt;:    call   *%eax                    ; &lt;- here we call the address that is loaded in eax (the address of the beginning of our shellcode)
   0x004013c1 &lt;+33&gt;:    mov    $0x0,%eax
   0x004013c6 &lt;+38&gt;:    leave
   0x004013c7 &lt;+39&gt;:    ret
End of assembler dump.
(gdb)
</snippet></ROW><ROW><id>14419674</id><snippet>call</snippet></ROW><ROW><id>14419674</id><snippet>&lt;main+31&gt;</snippet></ROW><ROW><id>14419674</id><snippet>(gdb) break *(main+31)
Breakpoint 1 at 0x4013bf
(gdb) run
Starting program: shellcode.exe
[New Thread 2856.0xb24]
I'm here

Breakpoint 1, 0x004013bf in main ()
(gdb) disassemble
Dump of assembler code for function main:
   0x004013a0 &lt;+0&gt;:     push   %ebp
   0x004013a1 &lt;+1&gt;:     mov    %esp,%ebp
   0x004013a3 &lt;+3&gt;:     and    $0xfffffff0,%esp
   0x004013a6 &lt;+6&gt;:     sub    $0x10,%esp
   0x004013a9 &lt;+9&gt;:     call   0x4018e4 &lt;__main&gt;
   0x004013ae &lt;+14&gt;:    movl   $0x402000,0xc(%esp)
   0x004013b6 &lt;+22&gt;:    call   0x40138c &lt;real_function&gt;
   0x004013bb &lt;+27&gt;:    mov    0xc(%esp),%eax
=&gt; 0x004013bf &lt;+31&gt;:    call   *%eax                    ; now we are here
   0x004013c1 &lt;+33&gt;:    mov    $0x0,%eax
   0x004013c6 &lt;+38&gt;:    leave
   0x004013c7 &lt;+39&gt;:    ret
End of assembler dump.
(gdb)
</snippet></ROW><ROW><id>14419674</id><snippet>(gdb) x/3x $eax
0x402000 &lt;shellcode&gt;:   0xfc    0x33    0xd2
(gdb)                    ^-------^--------^---- the first 3 bytes of the shellcode
</snippet></ROW><ROW><id>14419674</id><snippet>call 0x402000</snippet></ROW><ROW><id>14419674</id><snippet>0x402000</snippet></ROW><ROW><id>14419674</id><snippet>0x402000</snippet></ROW><ROW><id>14419674</id><snippet>(gdb) disassemble 0x402000
Dump of assembler code for function shellcode:
   0x00402000 &lt;+0&gt;:     cld
   0x00402001 &lt;+1&gt;:     xor    %edx,%edx
   0x00402003 &lt;+3&gt;:     mov    $0x30,%dl
   0x00402005 &lt;+5&gt;:     pushl  %fs:(%edx)
   0x00402008 &lt;+8&gt;:     pop    %edx
   0x00402009 &lt;+9&gt;:     mov    0xc(%edx),%edx
   0x0040200c &lt;+12&gt;:    mov    0x14(%edx),%edx
   0x0040200f &lt;+15&gt;:    mov    0x28(%edx),%esi
   0x00402012 &lt;+18&gt;:    xor    %ecx,%ecx
   0x00402014 &lt;+20&gt;:    mov    $0x18,%cl
   0x00402016 &lt;+22&gt;:    xor    %edi,%edi
   0x00402018 &lt;+24&gt;:    xor    %eax,%eax
   0x0040201a &lt;+26&gt;:    lods   %ds:(%esi),%al
   0x0040201b &lt;+27&gt;:    cmp    $0x61,%al
   0x0040201d &lt;+29&gt;:    jl     0x402021 &lt;shellcode+33&gt;
   ....
</snippet></ROW><ROW><id>14419674</id><snippet>#!python

from ctypes import *

shellcode_data = "\
\xFC\x33\xD2\xB2\x30\x64\xFF\x32\x5A\x8B\
\x52\x0C\x8B\x52\x14\x8B\x72\x28\x33\xC9\
\xB1\x18\x33\xFF\x33\xC0\xAC\x3C\x61\x7C\
\x02\x2C\x20\xC1\xCF\x0D\x03\xF8\xE2\xF0\
\x81\xFF\x5B\xBC\x4A\x6A\x8B\x5A\x10\x8B\
\x12\x75\xDA\x8B\x53\x3C\x03\xD3\xFF\x72\
\x34\x8B\x52\x78\x03\xD3\x8B\x72\x20\x03\
\xF3\x33\xC9\x41\xAD\x03\xC3\x81\x38\x47\
\x65\x74\x50\x75\xF4\x81\x78\x04\x72\x6F\
\x63\x41\x75\xEB\x81\x78\x08\x64\x64\x72\
\x65\x75\xE2\x49\x8B\x72\x24\x03\xF3\x66\
\x8B\x0C\x4E\x8B\x72\x1C\x03\xF3\x8B\x14\
\x8E\x03\xD3\x52\x33\xFF\x57\x68\x61\x72\
\x79\x41\x68\x4C\x69\x62\x72\x68\x4C\x6F\
\x61\x64\x54\x53\xFF\xD2\x68\x33\x32\x01\
\x01\x66\x89\x7C\x24\x02\x68\x75\x73\x65\
\x72\x54\xFF\xD0\x68\x6F\x78\x41\x01\x8B\
\xDF\x88\x5C\x24\x03\x68\x61\x67\x65\x42\
\x68\x4D\x65\x73\x73\x54\x50\xFF\x54\x24\
\x2C\x57\x68\x4F\x5F\x6F\x21\x8B\xDC\x57\
\x53\x53\x57\xFF\xD0\x68\x65\x73\x73\x01\
\x8B\xDF\x88\x5C\x24\x03\x68\x50\x72\x6F\
\x63\x68\x45\x78\x69\x74\x54\xFF\x74\x24\
\x40\xFF\x54\x24\x40\x57\xFF\xD0"

shellcode = c_char_p(shellcode_data)

function = cast(shellcode, CFUNCTYPE(None))
function()
</snippet></ROW><ROW><id>14419795</id><snippet>ttk.Treeview</snippet></ROW><ROW><id>14419795</id><snippet>dirbrowser.py</snippet></ROW><ROW><id>14419795</id><snippet>import os
import sys
import Tkinter
import ttk

def fill_tree(treeview, node):
    if treeview.set(node, "type") != 'directory':
        return

    path = treeview.set(node, "fullpath")
    # Delete the possibly 'dummy' node present.
    treeview.delete(*treeview.get_children(node))

    parent = treeview.parent(node)
    for p in os.listdir(path):
        p = os.path.join(path, p)
        ptype = None
        if os.path.isdir(p):
            ptype = 'directory'

        fname = os.path.split(p)[1]
        oid = treeview.insert(node, 'end', text=fname, values=[p, ptype])
        if ptype == 'directory':
            treeview.insert(oid, 0, text='dummy')

def update_tree(event):
    treeview = event.widget
    fill_tree(treeview, treeview.focus())

def create_root(treeview, startpath):
    dfpath = os.path.abspath(startpath)
    node = treeview.insert('', 'end', text=dfpath,
            values=[dfpath, "directory"], open=True)
    fill_tree(treeview, node)


root = Tkinter.Tk()

treeview = ttk.Treeview(columns=("fullpath", "type"), displaycolumns='')
treeview.pack(fill='both', expand=True)
create_root(treeview, sys.argv[1])
treeview.bind('&lt;&lt;TreeviewOpen&gt;&gt;', update_tree)

root.mainloop()
</snippet></ROW><ROW><id>14419795</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>14419795</id><snippet>os.walk</snippet></ROW><ROW><id>14419795</id><snippet>Treeview</snippet></ROW><ROW><id>14419795</id><snippet>&lt;&lt;TreeviewOpen&gt;&gt;</snippet></ROW><ROW><id>14419795</id><snippet>Treeview</snippet></ROW><ROW><id>14419795</id><snippet>Treeview</snippet></ROW><ROW><id>14419930</id><snippet>self.can.move(self.ball1, self.nx, self.ny)

new_pos = self.can.coords(self.ball1)
self.can.create_line(self.posx_ball, self.posy_ball, new_pos[0], new_pos[1], fill='red')

self.can.after(10, self.move)
</snippet></ROW><ROW><id>14419937</id><snippet>lambda</snippet></ROW><ROW><id>14419937</id><snippet>dict = {'Applied_poison_rating_bonus' : (lambda target, magnitude: target.equipmentPoisonRatingBonus + magnitude)}
</snippet></ROW><ROW><id>14419937</id><snippet>lambda</snippet></ROW><ROW><id>14419937</id><snippet>target.equimentPoisonRatingBonus</snippet></ROW><ROW><id>14420048</id><snippet>content = inFile.read()</snippet></ROW><ROW><id>14420048</id><snippet>\n</snippet></ROW><ROW><id>14420048</id><snippet>oneLine = content.replace('\n', '')</snippet></ROW><ROW><id>14420048</id><snippet>\n</snippet></ROW><ROW><id>14420309</id><snippet>l = [(48, 228), (96, 204), (120, 192), ... ]
# 'width' is the width of your bidimensional table (grid)
bidimensional = [l[a*width:(a+1)*width] for a in xrange(len(l)/width)]
</snippet></ROW><ROW><id>14420309</id><snippet>[  # make a list of:
  l[a*width:(a+1)*width]
    # get the 'a'-th slice of length 'width' of the initial list
  for a in xrange(len(l)/width)  # for 'len(l)/width' slices
]
</snippet></ROW><ROW><id>14420309</id><snippet>&gt;&gt;&gt; l = [(1, 11), (2, 22), (3, 33), (4, 44), (5, 55), (6, 66),(7, 77), (8, 88)]
&gt;&gt;&gt; width = 2
&gt;&gt;&gt; bidimensional = [l[a*width:(a+1)*width] for a in xrange(len(l)/width)]

&gt;&gt;&gt; bidimensional
[[(1, 11), (2, 22)], [(3, 33), (4, 44)], [(5, 55), (6, 66)], [(7, 77), (8, 88)]]

&gt;&gt;&gt; bidimensional[2][1]
(6, 66)
</snippet></ROW><ROW><id>14420388</id><snippet>Forward</snippet></ROW><ROW><id>14420388</id><snippet>package_name = identifier | (package_name "." identifier )
</snippet></ROW><ROW><id>14420388</id><snippet>identifier</snippet></ROW><ROW><id>14420388</id><snippet>package_name = (package_name "." identifier) | identifier
</snippet></ROW><ROW><id>14420388</id><snippet>package_name</snippet></ROW><ROW><id>14420388</id><snippet>package_name</snippet></ROW><ROW><id>14420388</id><snippet>Forward</snippet></ROW><ROW><id>14420388</id><snippet>identifier  = pyp.Word(pyp.alphas+"$_", pyp.alphanums+"$_")
package_name = pyp.Forward()
package_name &lt;&lt; ((identifier + '.' + package_name) | identifier)

&gt;&gt;&gt; package_name.parseString("java.lang.String")
[u'java', u'.', u'lang', u'.', u'String'], {})
</snippet></ROW><ROW><id>14420467</id><snippet>'Solution' object has no attribute 'email'</snippet></ROW><ROW><id>14420467</id><snippet>form.email</snippet></ROW><ROW><id>14420467</id><snippet>form.cleaned_data</snippet></ROW><ROW><id>14420467</id><snippet>user.save()</snippet></ROW><ROW><id>14420467</id><snippet>create_user</snippet></ROW><ROW><id>14420467</id><snippet>password</snippet></ROW><ROW><id>14420467</id><snippet>None</snippet></ROW><ROW><id>14420467</id><snippet>create_user</snippet></ROW><ROW><id>14420467</id><snippet>user</snippet></ROW><ROW><id>14420467</id><snippet>ProjectCreateForm</snippet></ROW><ROW><id>14420467</id><snippet>fields = ('name', ...,)</snippet></ROW><ROW><id>14420467</id><snippet>def form_valid(self, form):
    try:
        user = User.objects.get(email=form.cleaned_data['email'])
    except User.DoesNotExist:
        user = User.objects.create_user(form.cleaned_data['email'], form.cleaned_data['email']) 
    form.instance.user = user
    return super(ProjectCreateDetails, self).form_valid(form)
</snippet></ROW><ROW><id>14420509</id><snippet>Regex</snippet></ROW><ROW><id>14420509</id><snippet>str.replace()</snippet></ROW><ROW><id>14420509</id><snippet>In [16]: strs="Name.1001.ext"

In [17]: strs.replace(".","_",1) # now only 1 occurrence of the 
                                 # substring is going to be replaced 
Out[17]: 'Name_1001.ext'
</snippet></ROW><ROW><id>14420643</id><snippet>BaseSpider</snippet></ROW><ROW><id>14420643</id><snippet>CrawlSpider</snippet></ROW><ROW><id>14420643</id><snippet>parse</snippet></ROW><ROW><id>14420643</id><snippet>parse_item</snippet></ROW><ROW><id>14420643</id><snippet>rating</snippet></ROW><ROW><id>14420643</id><snippet>from scrapy.spider import BaseSpider
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
from scrapy.selector import HtmlXPathSelector
from scrapy.http import Request
from tutorial.items import MangaItem
from urlparse import urlparse

class MangaHere(BaseSpider):
    name = "mangah2"
    start_urls = ["http://www.mangahere.com/seinen/"]
    allowed_domains = ["mangahere.com"]

    def parse(self, response):
        # get index depth ie the total number of pages for the category
        hxs = HtmlXPathSelector(response)
        next_link = hxs.select('//a[@class="next"]')
        index_depth = int(next_link.select('preceding-sibling::a[1]/text()').extract()[0])

        # create a request for the first page
        url = urlparse("http://www.mangahere.com/seinen/")
        yield Request(url.geturl(), callback=self.parse_item)

        # create a request for each subsequent page in the form "./seinen/x.htm"
        for x in xrange(2, index_depth):
            pageURL = "http://www.mangahere.com/seinen/%s.htm" % x
            url = urlparse(pageURL)
            yield Request(url.geturl(), callback=self.parse_item)

    def parse_item(self,response):
        hxs = HtmlXPathSelector(response)
        sites = hxs.select('//ul/li/div')
        items = []
        for site in sites:
            rating = site.select("p/span/text()").extract()
            for r in rating:
                if float(r) &gt; 4.5:
                    item = MangaItem()
                    item["title"] = site.select("div/a/text()").extract()
                    item["desc"] = site.select("p[2]/text()").extract()
                    item["link"] = site.select("div/a/@href").extract()
                    item["rate"] = site.select("p/span/text()").extract()
                    items.append(item)
        return items
</snippet></ROW><ROW><id>14420729</id><snippet>pip install</snippet></ROW><ROW><id>14420729</id><snippet>pypm</snippet></ROW><ROW><id>14420729</id><snippet>pypm</snippet></ROW><ROW><id>14420729</id><snippet>requirements.txt</snippet></ROW><ROW><id>14420842</id><snippet>receiveSock.recv</snippet></ROW><ROW><id>14420842</id><snippet>msgBacked</snippet></ROW><ROW><id>14420842</id><snippet>None</snippet></ROW><ROW><id>14420842</id><snippet>try .. except</snippet></ROW><ROW><id>14420859</id><snippet>from org.python.core.util import StringUtil
from java.nio import ByteBuffer


tmp, filename = tempfile.mkstemp(suffix = "." + extension, text=True)
bytes = StringUtil().toBytes(attachment)
bb = ByteBuffer.wrap(bytes)
tmp.write(bb)
tmp.close()
</snippet></ROW><ROW><id>14420884</id><snippet>global</snippet></ROW><ROW><id>14420884</id><snippet>haveamessage</snippet></ROW><ROW><id>14420884</id><snippet>on_message</snippet></ROW><ROW><id>14420884</id><snippet>global</snippet></ROW><ROW><id>14420884</id><snippet>global</snippet></ROW><ROW><id>14420884</id><snippet>global</snippet></ROW><ROW><id>14421266</id><snippet>os.urandom</snippet></ROW><ROW><id>14421297</id><snippet>while not finished_event.wait(.1): # timeout in seconds
    pass
</snippet></ROW><ROW><id>14421297</id><snippet>while thread.is_alive():
    thread.join(.1)
</snippet></ROW><ROW><id>14421431</id><snippet>'\n'
'\n'
'    def weird(s):\n'
'        print s\n'
'        \n'
'        for ii in range(len(s)):\n'
'            for jj in range(ii, len(s)+1):\n'
'                print ii, jj\n'
'                \n'
'        return\n'
'\n'
'    if __name__=="__main__":\n'
'\t   ss="acaacb"\n'
'\t   weird(ss)\n'
</snippet></ROW><ROW><id>14421431</id><snippet>python -tt your_program_name.py
</snippet></ROW><ROW><id>14421624</id><snippet>,</snippet></ROW><ROW><id>14421624</id><snippet>print</snippet></ROW><ROW><id>14421624</id><snippet>for i in orgSent:
    print translate(i),
</snippet></ROW><ROW><id>14421624</id><snippet>for i in orgSent:
    print(translate(i),end=" ")
</snippet></ROW><ROW><id>14421624</id><snippet>end</snippet></ROW><ROW><id>14421624</id><snippet>\n</snippet></ROW><ROW><id>14421665</id><snippet>itertools.product</snippet></ROW><ROW><id>14421665</id><snippet># A simple example
import itertools
lst = [0, 1]
print(list(itertools.product(lst, repeat=2)))
# [(0, 0), (0, 1), (1, 0), (1, 1)]
</snippet></ROW><ROW><id>14421665</id><snippet>itertools.product</snippet></ROW><ROW><id>14421665</id><snippet>itertools.product</snippet></ROW><ROW><id>14421665</id><snippet># In your case
import itertools
lst = [0, 1, 3, a, b, c]
output = list(itertools.product(lst, repeat=20))
</snippet></ROW><ROW><id>14421773</id><snippet>global</snippet></ROW><ROW><id>14421773</id><snippet>def funky():
    global myvar
    print(myvar)
    myvar = 20
    print(myvar)

myvar = 10
funky()
</snippet></ROW><ROW><id>14421773</id><snippet>global</snippet></ROW><ROW><id>14422309</id><snippet>savePath</snippet></ROW><ROW><id>14422309</id><snippet>saveName</snippet></ROW><ROW><id>14422309</id><snippet>save()</snippet></ROW><ROW><id>14422309</id><snippet>global saveName, savePath
</snippet></ROW><ROW><id>14422309</id><snippet>save()</snippet></ROW><ROW><id>14422309</id><snippet>savePath</snippet></ROW><ROW><id>14422309</id><snippet>saveName</snippet></ROW><ROW><id>14422309</id><snippet>(savePath, saveName) = save()
</snippet></ROW><ROW><id>14422313</id><snippet>from django.contrib.auth.models import User
</snippet></ROW><ROW><id>14422406</id><snippet>Selection.TypeText Text:="One"
Selection.TypeParagraph
</snippet></ROW><ROW><id>14422406</id><snippet>One

Two

Three
</snippet></ROW><ROW><id>14422406</id><snippet>documents.xml</snippet></ROW><ROW><id>14422406</id><snippet>&lt;w:body&gt;
    &lt;w:p w:rsidR="00BE37B0" w:rsidRDefault="00CF2350"&gt;
        &lt;w:r&gt;
            &lt;w:t&gt;One&lt;/w:t&gt;
        &lt;/w:r&gt;
    &lt;/w:p&gt;
    &lt;w:p w:rsidR="00CF2350" w:rsidRDefault="00CF2350"&gt;
        &lt;w:r&gt;
            &lt;w:t&gt;Two&lt;/w:t&gt;
        &lt;/w:r&gt;
    &lt;/w:p&gt;
    &lt;w:p w:rsidR="00CF2350" w:rsidRDefault="00CF2350"&gt;
        &lt;w:r&gt;
            &lt;w:t&gt;Three&lt;/w:t&gt;
        &lt;/w:r&gt;
    &lt;/w:p&gt;
    &lt;w:sectPr w:rsidR="00CF2350" w:rsidSect="001077CC"&gt;
        &lt;w:pgSz w:w="11906" w:h="16838"/&gt;
        &lt;w:pgMar w:top="1440" w:right="1440" w:bottom="1440" w:left="1440" w:header="708" w:footer="708" w:gutter="0"/&gt;
        &lt;w:cols w:space="708"/&gt;
        &lt;w:docGrid w:linePitch="360"/&gt;
    &lt;/w:sectPr&gt;
&lt;/w:body&gt;
</snippet></ROW><ROW><id>14422406</id><snippet>&lt;w:p&gt;</snippet></ROW><ROW><id>14422406</id><snippet>body.append(paragraph("Hi."))
body.append(paragraph("My name is Alice."))
body.append(paragraph("Let's code"))
</snippet></ROW><ROW><id>14422406</id><snippet>for paragraph_text in "Hi. \nMy name is Alice.\n Let's code".split("\n"):
    body.append(paragraph(paragraph_text.strip()))
</snippet></ROW><ROW><id>14422406</id><snippet>Chr(11)</snippet></ROW><ROW><id>14422406</id><snippet>docx.py</snippet></ROW><ROW><id>14422406</id><snippet>for text in "Hi. \nMy name is Alice.\n Let's code".split("\n"):
    run = makeelement('r')
    run.append(makeelement('t', tagtext=text))
    run.append(makeelement('br'))
    body.append(run)
</snippet></ROW><ROW><id>14422446</id><snippet>tuples</snippet></ROW><ROW><id>14422446</id><snippet>lists</snippet></ROW><ROW><id>14422446</id><snippet>frozensets</snippet></ROW><ROW><id>14422446</id><snippet>sets</snippet></ROW><ROW><id>14422446</id><snippet>tuples</snippet></ROW><ROW><id>14422446</id><snippet>frozensets</snippet></ROW><ROW><id>14422446</id><snippet>sets</snippet></ROW><ROW><id>14422481</id><snippet>sprox_form</snippet></ROW><ROW><id>14422481</id><snippet>sprox_form</snippet></ROW><ROW><id>14422481</id><snippet>${f(kw)}</snippet></ROW><ROW><id>14422481</id><snippet>f</snippet></ROW><ROW><id>14422481</id><snippet>widget</snippet></ROW><ROW><id>14422481</id><snippet>form</snippet></ROW><ROW><id>14422481</id><snippet>kw</snippet></ROW><ROW><id>14422481</id><snippet>value</snippet></ROW><ROW><id>14422481</id><snippet>form_input</snippet></ROW><ROW><id>14422564</id><snippet>poster</snippet></ROW><ROW><id>14422564</id><snippet>import urllib2

import caslib
import poster.encode
import poster.streaminghttp

opener = poster.streaminghttp.register_openers()
r, opener = caslib.login_to_cas_service(login_url, username, password,
                                        opener=opener)    
params = {'file': open("test.txt", "rb"), 'name': 'upload test'}
datagen, headers = poster.encode.multipart_encode(params)
response = opener.open(urllib2.Request(upload_url, datagen, headers))
print response.read()
</snippet></ROW><ROW><id>14422664</id><snippet>handle</snippet></ROW><ROW><id>14422664</id><snippet>while</snippet></ROW><ROW><id>14422664</id><snippet>class EchoHandler(socketserver.StreamRequestHandler):

    def setup(self):
        print('{}:{} connected'.format(*self.client_address))

    def handle(self):
        while True:
            data = self.request.recv(1024)
            if not data: break
            self.request.sendall(data)

    def finish(self):
        print('{}:{} disconnected'.format(*self.client_address))
</snippet></ROW><ROW><id>14422684</id><snippet>get_context_data</snippet></ROW><ROW><id>14422684</id><snippet>def get_context_data(self, **kwargs):
# Call the base implementation first to get a context
        c = super(ReqListView, self).get_context_data(**kwargs)
        user = self.request.user
        return c
</snippet></ROW><ROW><id>14422719</id><snippet>self.connect(self.listView, QtCore.SIGNAL("dropped"),(lambda X: self.itemDropped(X, self.listView)))
</snippet></ROW><ROW><id>14422719</id><snippet>links</snippet></ROW><ROW><id>14422719</id><snippet>self.itemDropped</snippet></ROW><ROW><id>14422719</id><snippet>self.itemDropped (links)</snippet></ROW><ROW><id>14422719</id><snippet>lambda X:</snippet></ROW><ROW><id>14422719</id><snippet>X</snippet></ROW><ROW><id>14422719</id><snippet>X</snippet></ROW><ROW><id>14422719</id><snippet>links</snippet></ROW><ROW><id>14422719</id><snippet>self.listView</snippet></ROW><ROW><id>14422719</id><snippet>self.listView</snippet></ROW><ROW><id>14422725</id><snippet>GenericForeignKey</snippet></ROW><ROW><id>14422725</id><snippet>from django.db import models
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic

class RankItem(models.Model):
    rank = models.IntegerField()
    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    content_object = generic.GenericForeignKey('content_type', 'object_id')

    def __unicode__(self):
        return self.rank
</snippet></ROW><ROW><id>14422860</id><snippet>SOUTH_TESTS_MIGRATE = False</snippet></ROW><ROW><id>14422875</id><snippet>#!python2.7
import io
import sys
f=io.BytesIO()

def foo():
    print 'hello, world!'

save,sys.stdout = sys.stdout,f
foo()
sys.stdout = save
f.seek(0)
print f.read()
</snippet></ROW><ROW><id>14422875</id><snippet>hello, world!
</snippet></ROW><ROW><id>14422979</id><snippet>__mro__</snippet></ROW><ROW><id>14422979</id><snippet>&gt;&gt;&gt; class Foo(object): pass
&gt;&gt;&gt; class Bar(Foo): pass
&gt;&gt;&gt; import gc
&gt;&gt;&gt; del Bar
&gt;&gt;&gt; gc.collect()
3
&gt;&gt;&gt; Foo.__subclasses__()
[]
</snippet></ROW><ROW><id>14422979</id><snippet>_</snippet></ROW><ROW><id>14422979</id><snippet>_</snippet></ROW><ROW><id>14423080</id><snippet>matrix</snippet></ROW><ROW><id>14423080</id><snippet>np.zeros</snippet></ROW><ROW><id>14423080</id><snippet>dtype=float</snippet></ROW><ROW><id>14423080</id><snippet>int</snippet></ROW><ROW><id>14423080</id><snippet>matrix</snippet></ROW><ROW><id>14423080</id><snippet>float</snippet></ROW><ROW><id>14423080</id><snippet>cv.imshow</snippet></ROW><ROW><id>14423080</id><snippet>matrix</snippet></ROW><ROW><id>14423080</id><snippet>matrix</snippet></ROW><ROW><id>14423080</id><snippet>dtype='uint8'</snippet></ROW><ROW><id>14423080</id><snippet>rgb2k = np.array([0.114, 0.587, 0.299])
matrix_int = np.round(np.sum(img * rgb2k, axis=-1)).astype('uint8')
matrix_float = np.sum(img * rgb2k, axis=-1) / 255
</snippet></ROW><ROW><id>14423349</id><snippet>class</snippet></ROW><ROW><id>14423349</id><snippet>instance</snippet></ROW><ROW><id>14423349</id><snippet>Class instances</snippet></ROW><ROW><id>14423349</id><snippet>Test.__dict__</snippet></ROW><ROW><id>14423349</id><snippet>t.__dict__</snippet></ROW><ROW><id>14423349</id><snippet>&gt;&gt;&gt; t = Test()  
&gt;&gt;&gt; t.myVersion = "2.0"  
&gt;&gt;&gt; Test.__dict__
{'__module__': '__main__', 'myversion': '1.0', '__doc__': None}
&gt;&gt;&gt; t.__dict__
{'myVersion': '2.0'}
</snippet></ROW><ROW><id>14423349</id><snippet>myVersion</snippet></ROW><ROW><id>14423349</id><snippet>Test</snippet></ROW><ROW><id>14423349</id><snippet>t</snippet></ROW><ROW><id>14423349</id><snippet>AttributeError</snippet></ROW><ROW><id>14423368</id><snippet>list.index</snippet></ROW><ROW><id>14423368</id><snippet>print xy.index(min(xy))
# 6
</snippet></ROW><ROW><id>14423399</id><snippet>data = """
1 A 3 B 2 C 0 
        D 0
    E 1 F 0
    G 2 H 0
      I 0"""

def construct_nodes(data):
    return dict((next(data), construct_nodes(data))
                for _ in xrange(int(next(data))))

print construct_nodes(iter(data.split()))
</snippet></ROW><ROW><id>14423457</id><snippet>friend.location = location_name, 
</snippet></ROW><ROW><id>14423457</id><snippet>(location_name, )</snippet></ROW><ROW><id>14423457</id><snippet>friend.location</snippet></ROW><ROW><id>14423592</id><snippet>dict</snippet></ROW><ROW><id>14423592</id><snippet>&gt;&gt;&gt; d = collections.Counter()
&gt;&gt;&gt; d['x1'] += 1
&gt;&gt;&gt; d
Counter({'x1': 1})
&gt;&gt;&gt; d['x1'] += 1
&gt;&gt;&gt; d
Counter({'x1': 2})
&gt;&gt;&gt; d['x2'] += 1
&gt;&gt;&gt; d
Counter({'x1': 2, 'x2': 1})
</snippet></ROW><ROW><id>14423592</id><snippet>&gt;&gt;&gt; collections.Counter(['x1', 'x1', 'x2'])
Counter({'x1': 2, 'x2': 1})
</snippet></ROW><ROW><id>14423598</id><snippet>return HttpResponse(json.dumps(response_data), mimetype="application/json")
</snippet></ROW><ROW><id>14423713</id><snippet>try:
   # your socket operations
finally:
   # close your socket
</snippet></ROW><ROW><id>14423713</id><snippet>with open_the_socket() as the_socket:
   # do stuff with the_socket
</snippet></ROW><ROW><id>14423713</id><snippet>with statement</snippet></ROW><ROW><id>14423765</id><snippet>lata = ...</snippet></ROW><ROW><id>14423765</id><snippet>Lat.  0.0:  Error range: -0.000000 to 0.000000 seconds
Lat.  5.0:  Error range: -0.370571 to 0.424092 seconds
Lat. 10.0:  Error range: -0.486193 to 0.557997 seconds
Lat. 15.0:  Error range: -0.414288 to 0.477041 seconds
Lat. 20.0:  Error range: -0.213614 to 0.247057 seconds
Lat. 25.0:  Error range: -0.065826 to 0.056358 seconds
Lat. 30.0:  Error range: -0.382425 to 0.323623 seconds
Lat. 35.0:  Error range: -0.585914 to 0.488351 seconds
Lat. 40.0:  Error range: -0.490303 to 0.400563 seconds
Lat. 45.0:  Error range: -0.164706 to 0.207415 seconds
Lat. 47.0:  Error range: -0.590103 to 0.756647 seconds
Lat. 48.0:  Error range: -0.852844 to 1.102608 seconds
Lat. 50.0:  Error range: -1.478688 to 1.940351 seconds
Lat. 55.0:  Error range: -3.342506 to 4.696076 seconds
Lat. 60.0:  Error range: -0.000002 to 0.000003 seconds
Lat. 61.0:  Error range: -7.012057 to 4.273954 seconds
Lat. 62.0:  Error range: -21.374033 to 12.347188 seconds
Lat. 63.0:  Error range: -51.872753 to 27.853411 seconds
Lat. 64.0:  Error range: -124.000365 to 59.661029 seconds
Lat. 65.0:  Error range: -351.425224 to 139.656187 seconds
</snippet></ROW><ROW><id>14423765</id><snippet>import sunrise as sr
for lat in range(0, 65, 5):
    sr.lsr(lat, -110, 2013, 4)
</snippet></ROW><ROW><id>14423765</id><snippet>lsr</snippet></ROW><ROW><id>14423765</id><snippet>daySkip</snippet></ROW><ROW><id>14423765</id><snippet>lsr</snippet></ROW><ROW><id>14423765</id><snippet>sr.lsr(lat, -110, 2013, 1)</snippet></ROW><ROW><id>14423765</id><snippet>sr.plotData(15,1./(24*3600))
</snippet></ROW><ROW><id>14423765</id><snippet>next_setting(ephem.Sun())</snippet></ROW><ROW><id>14423765</id><snippet>previous_rising(ephem.Sun())</snippet></ROW><ROW><id>14423765</id><snippet>#!/usr/bin/python
import ephem, numpy, scipy, scipy.optimize

# Make a set of observers (observation points)
def observers(lata, lona):
    def makeIter(x):
        if hasattr(x, '__iter__'):
            return x
        return [x]
    lata, lona = makeIter(lata), makeIter(lona)
    arr = []
    for lat in lata:
        for lon in lona:
            o = ephem.Observer()
            o.lat, o.lon, o.elevation, o.temp = str(lat), str(lon), 1400, 0
            arr.append(o)
    return tuple(arr)

# Make a year of data for an observer, equinox-relative
def riseData(observr, year, skip):
    yy = ephem.Date('{} 00:00'.format(year))
    rr = numpy.arange(0.0, 366.0, skip)
    springEquinox = 78
    observr.date = ephem.Date(yy + springEquinox)
    seDelta = observr.previous_rising(ephem.Sun()) - yy - springEquinox + 1
    for i, day in enumerate(range(0, 366, skip)):
        observr.date = ephem.Date(yy + day)
        t = observr.previous_rising(ephem.Sun()) - yy - day + 1 - seDelta
        rr[i] = t
    return numpy.array(rr)

# Make a set of time curves
def makeRarSet(lata, lona, year, daySkip):
    rar=[]
    for o in observers(lata, lona):
        r = riseData(o, year, daySkip)
        rar.append(r)
    x = numpy.arange(0., 366., daySkip)
    return (x, rar)

# data() is an object that stores curves + results
def data(s):
    return data.ss[s]

# Initialize data.ss
def setData(lata, lona, year, daySkip):
    x, rar = makeRarSet(lata, lona, year, daySkip)
    data.ss = rar

# Compute y values from model, given vector x and given params in p
def yModel(x, p):
    t = numpy.zeros(len(x))
    for i in range(len(p)):
        t += p[i] * data(i)
    return t

# Compute residuals, given params in p and data in x, y vectors.
# x = independent var,  y = dependent = observations
def residuals(p, y, x):
    err = y - yModel(x, p)
    return err

# Compute least squares result
def lsr(lat, lon, year, daySkip):
    latStep = 13.
    lata = numpy.arange(0., 66.4, latStep)
    lata = [ 88 * (1 - 1.2**-i) for i in range(8)]
    l, lata, lstep, ldown = 0, [], 20, 3
    l, lata, lstep, ldown = 0, [], 24, 4
    while l &lt; 65:
        lata.append(l); l += lstep; lstep -= ldown
    #print 'lata =', lata
    setData(lata, lon, year, daySkip)
    x, ya = makeRarSet(lat, lon, year, daySkip)
    x, za = makeRarSet(lat, 10+lon, year, daySkip)
    data.ss.append(za[0])
    y = ya[0]
    pini = [(0 if abs(lat-l)&gt;latStep else 0.5) for l in lata]
    pars = scipy.optimize.leastsq(residuals, pini, args=(y, x))
    data.x, data.y, data.pv = x, y, yModel(x, pars[0])
    data.par, data.err = pars, residuals(pars[0], y, x)
    #print 'pars[0] = ', pars[0]
    variance = numpy.inner(data.err, data.err)/len(y)
    #print 'variance:', variance
    sec = 1.0/(24*60*60)
    emin, emax = min(data.err), max(data.err)
    print ('Lat. {:4.1f}:  Error range: {:.6f} to {:.6f} seconds'.format(lat, emin/sec, emax/sec))

def plotData(iopt, emul):
    import matplotlib.pyplot as plt
    plt.clf()
    x = data.x
    if iopt == 0:
        iopt = 15
        emul = 1
    if iopt &amp; 1:
        plt.plot(x, data.y)
        plt.plot(x, data.y + 0.001)
        plt.plot(x, data.y - 0.001)
    if iopt &amp; 2:
        plt.plot(x, data.pv)
    if iopt &amp; 4:
        plt.plot(x, emul*data.err)
    if iopt &amp; 8:
        for ya in data.ss:
            plt.plot(x, ya)
    plt.show()
</snippet></ROW><ROW><id>14423816</id><snippet>def scanl(f, base, l):
    for x in l:
        base = f(base, x)
        yield base
</snippet></ROW><ROW><id>14423816</id><snippet>import operator
list(scanl(operator.add, 0, range(1,11)))
</snippet></ROW><ROW><id>14423816</id><snippet>itertools.accumulate(iterable, func= operator.add)</snippet></ROW><ROW><id>14423816</id><snippet>def accumulate(iterable, func=operator.add):
    'Return running totals'
    # accumulate([1,2,3,4,5]) --&gt; 1 3 6 10 15
    # accumulate([1,2,3,4,5], operator.mul) --&gt; 1 2 6 24 120
    it = iter(iterable)
    total = next(it)
    yield total
    for element in it:
        total = func(total, element)
        yield total
</snippet></ROW><ROW><id>14423951</id><snippet>run</snippet></ROW><ROW><id>14423951</id><snippet>Process</snippet></ROW><ROW><id>14423951</id><snippet>target</snippet></ROW><ROW><id>14423951</id><snippet>&gt;&gt;&gt; from multiprocessing import Process
&gt;&gt;&gt; def target():
...     print("Something")
... 
&gt;&gt;&gt; Process(target=target).start()
&gt;&gt;&gt; Something

&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14423951</id><snippet>Process.exitcode</snippet></ROW><ROW><id>14423951</id><snippet>Process</snippet></ROW><ROW><id>14423951</id><snippet>&gt;&gt;&gt; from multiprocessing import Process
&gt;&gt;&gt; import time
&gt;&gt;&gt; def target():
...     while True:
...             time.sleep(0.5)
... 
&gt;&gt;&gt; L = [Process(target=target) for i in range(10)]
&gt;&gt;&gt; for p in L: p.start()
... 
</snippet></ROW><ROW><id>14423951</id><snippet>init</snippet></ROW><ROW><id>14423993</id><snippet>bytesread = 0
while True:
  line = fh.readline()
  if line == '':
    break
  bytesread += len(line)
</snippet></ROW><ROW><id>14423993</id><snippet>bytesread = 0
for line in fh:
  bytesread += len(line)
</snippet></ROW><ROW><id>14423993</id><snippet>os.path.getsize()</snippet></ROW><ROW><id>14423993</id><snippet>os.stat</snippet></ROW><ROW><id>14424004</id><snippet>dir(obj)</snippet></ROW><ROW><id>14424004</id><snippet>getattr(obj, attr_name)</snippet></ROW><ROW><id>14424004</id><snippet>for attr in dir(obj):
    print(attr, getattr(obj, attr))
</snippet></ROW><ROW><id>14424004</id><snippet>__str__</snippet></ROW><ROW><id>14424004</id><snippet>obj.__dict__</snippet></ROW><ROW><id>14424004</id><snippet>for k in obj.__dict__:
    print(k, obj.__dict__[k])
</snippet></ROW><ROW><id>14424108</id><snippet>id</snippet></ROW><ROW><id>14424108</id><snippet>name</snippet></ROW><ROW><id>14424108</id><snippet>struct</snippet></ROW><ROW><id>14424108</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>14424108</id><snippet>id</snippet></ROW><ROW><id>14424140</id><snippet>import inspect

class Inspector:
    def __init__(self, passedFunc):
        self.passedFunc = passedFunc

    def __call__(self, *args, **kwargs):

        spec = inspect.getargspec(self.passedFunc)
        params = dict(zip(spec.args, args))
        defaults = dict(zip(spec.args[-len(spec.defaults):], spec.defaults))

        for k, v in kwargs.items():
            if k not in spec.args:
                raise TypeError('unexpected argument', k)
            if k in params:
                raise TypeError('mulitple values for argument', k)
            params[k] = v

        for k in spec.args:
            if k not in params:
                if k in defaults:
                    params[k] = defaults[k]
                else:
                    raise TypeError('missing argument', k)

        args_in_order = [params[x] for x in spec.args]

        print args_in_order
</snippet></ROW><ROW><id>14424140</id><snippet>@Inspector
def exampleFunc(value=0, otherValue=3):
    pass

exampleFunc()  # 0,3
exampleFunc('foo')  # foo,3
exampleFunc(otherValue='foo', value=555) # 555,foo
</snippet></ROW><ROW><id>14424206</id><snippet>from collections import Counter
from itertools import combinations

# Assuming Models
class Question(models.Model):
    ...

class Tag(models.Model):
    tag = models.CharField(..)
    question = models.ForeignKey(Question, related_name='tags')

c = Counter()
questions = Question.objects.all().prefetch_related('tags') # prefetch M2M
for q in questions:
    # sort them so 'point' + 'curve' == 'curve' + 'point'
    tags = sorted([tag.name for tag in q.tags.all()])
    c.update(combinations(tags,2)) # get all 2-pair combinations and update counter
c.most_common(5) # show the top 5
</snippet></ROW><ROW><id>14424206</id><snippet>Question</snippet></ROW><ROW><id>14424206</id><snippet>tag_set</snippet></ROW><ROW><id>14424206</id><snippet>tags</snippet></ROW><ROW><id>14424206</id><snippet>related_name='tags'</snippet></ROW><ROW><id>14424206</id><snippet>tags</snippet></ROW><ROW><id>14424206</id><snippet>tag_set</snippet></ROW><ROW><id>14424531</id><snippet>import os

if __name__=='__main__':
    PRJ_FLDR=os.path.dirname(os.path.abspath(__file__))
    print 'PRJ_FLDR=',PRJ_FLDR
    apptemplates = os.path.abspath(os.path.join(PRJ_FLDR, '../app/templates'))
    print 'apptemplates=',apptemplates
</snippet></ROW><ROW><id>14424676</id><snippet>&gt;&gt;&gt; conn.index({"name":"Joe Tester", "parsedtext":"Joe Testere nice guy", "uuid":"11111", "position":1}, "test-index", "test-type", 1)
</snippet></ROW><ROW><id>14424678</id><snippet>strs='abcdefghijklmnopqrstuvwxyz'      #use a string like this, instead of ord() 
def shifttext(shift):
    inp=raw_input('Input text here: ')
    data=[]
    for i in inp:                     #iterate over the text not some list
        if i.strip() and i in strs:                 # if the char is not a space ""  
            data.append(strs[(strs.index(i) + shift) % 26])    
        else:
            data.append(i)           #if space the simply append it to data
    output = ''.join(data)
    return output
</snippet></ROW><ROW><id>14424678</id><snippet>In [2]: shifttext(3)
Input text here: how are you?
Out[2]: 'krz duh brx?'

In [3]: shifttext(3)
Input text here: Fine.
Out[3]: 'Flqh.'
</snippet></ROW><ROW><id>14424678</id><snippet>strs[(strs.index(i) + shift) % 26]</snippet></ROW><ROW><id>14424678</id><snippet>i</snippet></ROW><ROW><id>14424678</id><snippet>strs</snippet></ROW><ROW><id>14424678</id><snippet>strs[new_index]</snippet></ROW><ROW><id>14425153</id><snippet>key = (2013, 1)
</snippet></ROW><ROW><id>14425454</id><snippet>socket.error</snippet></ROW><ROW><id>14425454</id><snippet>errno</snippet></ROW><ROW><id>14425454</id><snippet>errno.ECONNREFUSED</snippet></ROW><ROW><id>14425454</id><snippet>import errno
from socket import error as socket_error

try:
    senderSocket.send('Hello')
except socket_error as serr:
    if serr.errno != errno.ECONNREFUSED:
        # Not the error we are looking for, re-raise
        raise serr
    # connection refused
    # handle here
</snippet></ROW><ROW><id>14425688</id><snippet>&lt;tmpr&gt;\s*([\-\d.]+)&lt;/tmpr&gt;.*&lt;sensor&gt;(\d+)&lt;/sensor&gt;.*&lt;ch1&gt;&lt;watts&gt;0*(\d+)&lt;/watts&gt;&lt;/ch1&gt;\n
</snippet></ROW><ROW><id>14425741</id><snippet>FORTRAN</snippet></ROW><ROW><id>14425741</id><snippet>LMDIF</snippet></ROW><ROW><id>14425741</id><snippet>*fvec</snippet></ROW><ROW><id>14425741</id><snippet>LMDIF</snippet></ROW><ROW><id>14425741</id><snippet>Python</snippet></ROW><ROW><id>14425741</id><snippet>*fvec</snippet></ROW><ROW><id>14425741</id><snippet>raw_multipack_lm_function()</snippet></ROW><ROW><id>14425741</id><snippet>Python</snippet></ROW><ROW><id>14425741</id><snippet>*fvec</snippet></ROW><ROW><id>14425741</id><snippet>LMDIF</snippet></ROW><ROW><id>14425741</id><snippet>LMDIF</snippet></ROW><ROW><id>14425741</id><snippet>*fvec</snippet></ROW><ROW><id>14425741</id><snippet>LMDIF</snippet></ROW><ROW><id>14425741</id><snippet>*fvec</snippet></ROW><ROW><id>14425741</id><snippet>dy()</snippet></ROW><ROW><id>14425741</id><snippet>LMDIF</snippet></ROW><ROW><id>14425741</id><snippet>LMDIF</snippet></ROW><ROW><id>14425741</id><snippet>minpack_lmdif()</snippet></ROW><ROW><id>14425741</id><snippet>scipy/optimize/__minpack.h</snippet></ROW><ROW><id>14425741</id><snippet>dy()</snippet></ROW><ROW><id>14425741</id><snippet>git diff</snippet></ROW><ROW><id>14425741</id><snippet>diff --git a/scipy/optimize/__minpack.h b/scipy/optimize/__minpack.h
index 2c0ea33..465724b 100644
--- a/scipy/optimize/__minpack.h
+++ b/scipy/optimize/__minpack.h
@@ -483,7 +483,7 @@ static PyObject *minpack_lmdif(PyObject *dummy, PyObject *args) {
   qtf = (double *) ap_qtf-&gt;data;
   fjac = (double *) ap_fjac-&gt;data;
   ldfjac = dims[1];
-  wa = (double *)malloc((3*n + m)* sizeof(double));
+  wa = (double *)malloc((3*n + 2*m)* sizeof(double));
   if (wa == NULL) {
     PyErr_NoMemory();
     goto fail;
@@ -492,12 +492,15 @@ static PyObject *minpack_lmdif(PyObject *dummy, PyObject *args) {

   /* Call the underlying FORTRAN routines. */
   n_int = n; /* to provide int*-pointed storage for int argument of LMDIF */
-  LMDIF(raw_multipack_lm_function, &amp;m, &amp;n_int, x, fvec, &amp;ftol, &amp;xtol, &amp;gtol, &amp;maxfev, &amp;epsfcn, diag,
-    
+  LMDIF(raw_multipack_lm_function, &amp;m, &amp;n_int, x, wa+3*n+m, &amp;ftol, &amp;xtol, &amp;gtol, &amp;maxfev, &amp;epsfcn, d
+
   RESTORE_FUNC();

   if (info &lt; 0) goto fail;           /* Python error */

+  /* Copy final residuals back to initial array */
+  memcpy(fvec, wa+3*n+m, m*sizeof(double));
+
   free(wa);
   Py_DECREF(extra_args); 
   Py_DECREF(ap_diag);
</snippet></ROW><ROW><id>14425741</id><snippet>m</snippet></ROW><ROW><id>14425741</id><snippet>LMDIF</snippet></ROW><ROW><id>14425741</id><snippet>*fvec</snippet></ROW><ROW><id>14425741</id><snippet>memcpy()</snippet></ROW><ROW><id>14425741</id><snippet>LMDIF</snippet></ROW><ROW><id>14425741</id><snippet>scipy.optimize.leastsq</snippet></ROW><ROW><id>14425741</id><snippet>In [1]: def dy0(p, x, y): return p[0]*np.exp(-p[1]*x) - y

In [2]: %timeit p = opt.leastsq(dy2, p0, args=(x, buf, y))
1000 loops, best of 3: 399 us per loop

In [3]: %timeit p = opt.leastsq(dy, p0, args=(x, buf, y))
1000 loops, best of 3: 363 us per loop

In [4]: %timeit p = opt.leastsq(dy0, p0, args=(x, y))
1000 loops, best of 3: 341 us per loop
</snippet></ROW><ROW><id>14425741</id><snippet>dy0()</snippet></ROW><ROW><id>14425741</id><snippet>LMDIF</snippet></ROW><ROW><id>14425741</id><snippet>In [5]: %timeit p = mp.leastsq(dy, (p0.copy(), x, buf, y))
1000 loops, best of 3: 279 us per loop
</snippet></ROW><ROW><id>14425741</id><snippet>mp.leastsq</snippet></ROW><ROW><id>14425741</id><snippet>Python</snippet></ROW><ROW><id>14425741</id><snippet>dy()</snippet></ROW><ROW><id>14425741</id><snippet>C</snippet></ROW><ROW><id>14425741</id><snippet>In [6]: %timeit p = opt.leastsq(fitfun.e2_diff, p0, args=(x, buf, y))
10000 loops, best of 3: 48.2 us per loop
</snippet></ROW><ROW><id>14425741</id><snippet>numpy</snippet></ROW><ROW><id>14425741</id><snippet>In [7]: %timeit p = mp.leastsq(fitfun.e2_diff, (p0.copy(), x, buf, y))
100000 loops, best of 3: 6.94 us per loop
</snippet></ROW><ROW><id>14425741</id><snippet>opt.leastsq</snippet></ROW><ROW><id>14425741</id><snippet>mp.leastsq</snippet></ROW><ROW><id>14425741</id><snippet>memcpy</snippet></ROW><ROW><id>14425741</id><snippet>LMDIF</snippet></ROW><ROW><id>14425741</id><snippet>Python</snippet></ROW><ROW><id>14425741</id><snippet>In [8]: %timeit p = fitfun.e2_fit(p0.copy(), x, buf, y)
100000 loops, best of 3: 6.13 us per loop
</snippet></ROW><ROW><id>14425741</id><snippet>numpy</snippet></ROW><ROW><id>14425741</id><snippet>wa</snippet></ROW><ROW><id>14425741</id><snippet>LMDIF</snippet></ROW><ROW><id>14425898</id><snippet>eval</snippet></ROW><ROW><id>14425898</id><snippet>env</snippet></ROW><ROW><id>14425898</id><snippet>def CheckConstraints(self, Selections):
    'Validate the stored constraints'
    Good = True
    env = {}
    ## Undefined options default to False
    for i in self.Options:
        env[i] = False
    ## Set defined Options to True
    for i in Selections:
        env[i] = True
    for i in self.Constraints:
        if not eval(i, env):
            Good = False
            print "Constraint Check Failure:", i, Selections
        else:
            print "Constraint Check OK:", i, Selections
    return Good
</snippet></ROW><ROW><id>14425946</id><snippet>n</snippet></ROW><ROW><id>14425946</id><snippet>s = sum all numbers</snippet></ROW><ROW><id>14425946</id><snippet>total_hrs</snippet></ROW><ROW><id>14425946</id><snippet>total_min</snippet></ROW><ROW><id>14425946</id><snippet>chunks = [c/s * total_min for c in numbers]</snippet></ROW><ROW><id>14425946</id><snippet>end - start</snippet></ROW><ROW><id>14425946</id><snippet>total_hrs</snippet></ROW><ROW><id>14425946</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>14425946</id><snippet>start</snippet></ROW><ROW><id>14425946</id><snippet>end</snippet></ROW><ROW><id>14425946</id><snippet>datetime.date</snippet></ROW><ROW><id>14426063</id><snippet>file_get_contents()</snippet></ROW><ROW><id>14426063</id><snippet>file_get_contents</snippet></ROW><ROW><id>14426107</id><snippet>def lines(fname, numbers):
    numbers = sorted(numbers, reverse=True)
    with open(fname) as f:
        for n, line in enumerate(f, 1):
            if n == numbers[-1]:
                yield line
                numbers.pop()
                if not numbers:
                     break
</snippet></ROW><ROW><id>14426107</id><snippet>itertools.count</snippet></ROW><ROW><id>14426107</id><snippet>zip</snippet></ROW><ROW><id>14426107</id><snippet>readlines()</snippet></ROW><ROW><id>14426107</id><snippet>def lines(fname, numbers):
    with open(fname) as f:
        lines = f.readlines()
        return [lines[i] for i in numbers]
</snippet></ROW><ROW><id>14426107</id><snippet>lines[i]</snippet></ROW><ROW><id>14426107</id><snippet>lines[i+1]</snippet></ROW><ROW><id>14426107</id><snippet>open</snippet></ROW><ROW><id>14426107</id><snippet>writelines</snippet></ROW><ROW><id>14426118</id><snippet>ConfigParser</snippet></ROW><ROW><id>14426118</id><snippet>class loadfile(object):

    def __init__(self, filename):
        self.filename = filename

    def load(self):
        x = open(self.filename).read()     # open as file and read
        d,k = x.split('; Key configuration;')   # split at Key configration
        d = d.splitlines()
        k = k.splitlines()
        ddict = {}
        for i in d:
                i = i.split(':')
                i = [z.strip() for z in i] # strip whitespace(s)
                if len(i) == 2: # a valid assignment line
                        ddict[i[0]] = i[1] # assignment of value
        #same for keys
        kdict = {}
        for i in k:
                i = i.split(':')
                i = [z.strip() for z in i]
                if len(i) == 2:
                        kdict[i[0]] = i[1]
        print '---Display---'
        for key in kdict:
            print '%10s:%19s' % (key,kdict[key]) # print display part
        print '---Keys---'
        for key in ddict:
            print '%10s:%19s' % (key,ddict[key]) # print key part
        self.kdict = kdict
        self.ddict = ddict
    def save(self):
        pass

x = loadfile("config.ini")
x.load()
</snippet></ROW><ROW><id>14426118</id><snippet>---Display---
  Attack_1:         pygame.K_a
  Dialogue:    pygame.K_RETURN
     Right:     pygame.K_RIGHT
      Jump:        pygame.K_UP
  Attack_3:         pygame.K_d
  Attack_2:         pygame.K_s
      Duck:      pygame.K_DOWN
    Sprint:    pygame.K_RSHIFT
  gameMenu:    pygame.K_ESCAPE
      Left:      pygame/K_LEFT
---Keys---
   Caption:                 45
    Height:                600
     Width:                800
     Depth:                 32
     Flags:   pygame.RESIZABLE
       FPS:                 30
     Mouse:               True
      Icon:               None
</snippet></ROW><ROW><id>14426118</id><snippet>[Display]
Width=800
Height=600
Depth=32
Caption=45
Flags=pygame.RESIZABLE
Icon=None
Mouse=True
FPS=30
-----
[Keys]
Left=pygame/K_LEFT
Right=pygame.K_RIGHT
Jump=pygame.K_UP
Duck=pygame.K_DOWN
Sprint=pygame.K_RSHIFT
Attack_1=pygame.K_a
Attack_2=pygame.K_s
Attack_3=pygame.K_d
gameMenu=pygame.K_ESCAPE
Dialogue=pygame.K_RETURN
-----
</snippet></ROW><ROW><id>14426244</id><snippet>text</snippet></ROW><ROW><id>14426244</id><snippet>import Tkinter as tk

class Example(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        canvas = tk.Canvas(self, width=800, height=500)
        canvas.pack(side="top", fill="both", expand=True)
        canvas_id = canvas.create_text(10, 10, anchor="nw")

        canvas.itemconfig(canvas_id, text="this is the text")
        canvas.insert(canvas_id, 12, "new ")

if __name__ == "__main__":
    root = tk.Tk()
    Example(root).pack(side="top", fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>14426411</id><snippet>user = bundle.request.user
</snippet></ROW><ROW><id>14426553</id><snippet>setup.py</snippet></ROW><ROW><id>14426553</id><snippet>setuptools</snippet></ROW><ROW><id>14426553</id><snippet>distutils</snippet></ROW><ROW><id>14426553</id><snippet>setuptools</snippet></ROW><ROW><id>14426553</id><snippet>distribute</snippet></ROW><ROW><id>14426553</id><snippet>setuptools</snippet></ROW><ROW><id>14426553</id><snippet>setuptools</snippet></ROW><ROW><id>14426553</id><snippet>sudo apt-get install python-setuptools
</snippet></ROW><ROW><id>14426713</id><snippet>import numpy as np
</snippet></ROW><ROW><id>14426713</id><snippet>np.&lt;whatever&gt;</snippet></ROW><ROW><id>14426759</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14427068</id><snippet>open</snippet></ROW><ROW><id>14427068</id><snippet>f1</snippet></ROW><ROW><id>14427068</id><snippet>f1</snippet></ROW><ROW><id>14427068</id><snippet>f1 = open('c:\Python33\dummy.txt')
lines = []
for line in f1:
    lines.append(line)
f1.close()
print(lines)
</snippet></ROW><ROW><id>14427068</id><snippet>lines = [line for line in f1]
</snippet></ROW><ROW><id>14427068</id><snippet>lines = f1.readlines()
</snippet></ROW><ROW><id>14427633</id><snippet>#!/usr/bin/python
import cherrypy
import os.path
import struct
from auth import AuthController, require, member_of, name_is
import subprocess
import commands

class Server(object):
    led_logout=0 
    led_restart=0
    condition=0
    _cp_config = {
    'tools.sessions.on': True,
    'tools.auth.on': True

    auth = AuthController()
    @cherrypy.expose
    @require()
    def index(self):

    html = """
     &lt;html&gt;
      &lt;head&gt;
      &lt;/head&gt;
          &lt;body&gt;
       &lt;script language="javascript" type="text/javascript"&gt;
       function getMyText()
       {
           // code for IE7+, Firefox, Chrome, Opera, Safari
           if(window.XMLHttpRequest)
               xmlhttp=new XMLHttpRequest();
           else// code for IE6, IE5
               xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");

           xmlhttp.onreadystatechange=function()
           {
               if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)
               {
                   document.getElementById('message').innerHTML= = xmlhttp.responseText;
               }
           }

           xmlhttp.open("GET","/getMyText?logout=True", true);
           xmlhttp.send();
       }
       &lt;/script&gt;
        &lt;p id="message"&gt;&lt;p&gt;
        &lt;a href="?logout=1" onclick="return var r = confirm('Are you sure you want to logout?');if (r==true){getMyText(condition);"&gt;&lt;img src="images/Logout.png"&gt;&lt;/a&gt;
        &lt;/ul&gt;
          &lt;/body&gt;
     &lt;/html&gt;    
           """
    def getMyText(logout=False)
        myText = "Hello"
        if logout:
            self.led_logout = int(logout)
        if self.led_logout:
            print "Logout !!!!!"
            AuthController().logout('/?logout=0')
        return myText
    index.exposed = True

#configuration
conf = {
    'global' : { 
        'server.socket_host': '0.0.0.0', #0.0.0.0 or specific IP
        'server.socket_port': 8085 #server port
    },

    '/images': { #images served as static files
        'tools.staticdir.on': True,
        'tools.staticdir.dir': os.path.abspath('/home/ubuntu/webserver/images')
    }
    }
cherrypy.quickstart(Server(), config=conf)
</snippet></ROW><ROW><id>14428047</id><snippet>&gt;&gt;&gt; def divide(lst, min_size, split_size):
    it = iter(lst)
    from itertools import islice
    size = len(lst)
    for i in range(split_size - 1,0,-1):
        s = random.randint(min_size, size -  min_size * i)
        yield list(islice(it,0,s))
        size -= s
    yield list(it)


&gt;&gt;&gt; list(divide(range(37), 4, 5))
[[0, 1, 2, 3], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], [23, 24, 25, 26, 27], [28, 29, 30, 31], [32, 33, 34, 35, 36]]
&gt;&gt;&gt; list(divide(range(37), 4, 5))
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [17, 18, 19, 20, 21, 22], [23, 24, 25, 26], [27, 28, 29, 30, 31], [32, 33, 34, 35, 36]]
&gt;&gt;&gt; list(divide(range(37), 4, 5))
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], [24, 25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36]]
&gt;&gt;&gt; list(divide(range(37), 4, 5))
[[0, 1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [17, 18, 19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31], [32, 33, 34, 35, 36]]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14428102</id><snippet>Uudet L\xc3\xb6yt\xc3\xb6retket</snippet></ROW><ROW><id>14428102</id><snippet>utf-8</snippet></ROW><ROW><id>14428102</id><snippet>Uudet Löytöretket</snippet></ROW><ROW><id>14428102</id><snippet>&gt;&gt;&gt; print 'Uudet L\xc3\xb6yt\xc3\xb6retket'
Uudet LÃ¶ytÃ¶retket
&gt;&gt;&gt; print 'Uudet L\xc3\xb6yt\xc3\xb6retket'.decode('utf-8')
Uudet Löytöretket
</snippet></ROW><ROW><id>14428134</id><snippet>import numpy as np

data = np.array((-0.0123445552, -29394.2393339, 0.299393333, 0.00002345556))

stored_int = data.astype('float16').view('int64')[0]
print(stored_int)
# 110959187158999634

recovered = np.array([stored_int], dtype='int64').view('float16')
print(recovered)
# [ -1.23443604e-02  -2.93920000e+04   2.99316406e-01   2.34842300e-05]
</snippet></ROW><ROW><id>14428207</id><snippet>numpy.minimum()</snippet></ROW><ROW><id>14428207</id><snippet>a</snippet></ROW><ROW><id>14428207</id><snippet>In [9]: a = np.array([[1, 2, 3], [2, 2, 2], [3, 2, 1]])

In [10]: b = np.array([[3, 2, 1], [1, 2, 1], [1, 2, 1]])

In [11]: np.minimum(a, b, a)
Out[11]: 
array([[1, 2, 1],
       [1, 2, 1],
       [1, 2, 1]])

In [12]: a
Out[12]: 
array([[1, 2, 1],
       [1, 2, 1],
       [1, 2, 1]])
</snippet></ROW><ROW><id>14428303</id><snippet>import xml.etree.ElementTree as et

xmltext = """
&lt;METAR&gt;
  &lt;raw_text&gt;
  FALE 201800Z VRB01KT 9999 FEW016 BKN028 23/22 Q1010 NOSIG
  &lt;/raw_text&gt;
  &lt;station_id&gt;FALE&lt;/station_id&gt;
  &lt;observation_time&gt;2013-01-20T18:00:00Z&lt;/observation_time&gt;
  &lt;temp_c&gt;23.0&lt;/temp_c&gt;
  &lt;dewpoint_c&gt;22.0&lt;/dewpoint_c&gt;
  &lt;wind_dir_degrees&gt;0&lt;/wind_dir_degrees&gt;
  &lt;wind_speed_kt&gt;1&lt;/wind_speed_kt&gt;
  &lt;altim_in_hg&gt;29.822834&lt;/altim_in_hg&gt;
  &lt;quality_control_flags&gt;
  &lt;no_signal&gt;TRUE&lt;/no_signal&gt;
  &lt;/quality_control_flags&gt;
  &lt;sky_condition sky_cover="FEW" cloud_base_ft_agl="1600"/&gt;
  &lt;sky_condition sky_cover="BKN" cloud_base_ft_agl="2800"/&gt;
  &lt;flight_category&gt;MVFR&lt;/flight_category&gt;
  &lt;metar_type&gt;METAR&lt;/metar_type&gt;
&lt;/METAR&gt;
"""
tree = et.fromstring(xmltext)

for sky_con in tree.iterfind('sky_condition'):
    print sky_con.attrib["cloud_base_ft_agl"]
    print sky_con.attrib.keys()
</snippet></ROW><ROW><id>14428303</id><snippet>keys()</snippet></ROW><ROW><id>14428303</id><snippet>xml.dom.minidom</snippet></ROW><ROW><id>14428303</id><snippet>for sky_con in station.getElementsByTagName("sky_condition"):
    print sky_con._attrs["cloud_base_ft_agl"].value
    print sky_con._attrs["sky_cover"].value
</snippet></ROW><ROW><id>14428549</id><snippet>downloadUrl</snippet></ROW><ROW><id>14428549</id><snippet>exportLinks</snippet></ROW><ROW><id>14428820</id><snippet>example_module</snippet></ROW><ROW><id>14428820</id><snippet>import foo</snippet></ROW><ROW><id>14428820</id><snippet>foo_module</snippet></ROW><ROW><id>14428820</id><snippet>from package import *

print(example('derp'))
</snippet></ROW><ROW><id>14428820</id><snippet>def _import_all_modules():
    """dynamically imports all modules in the package"""
    import traceback
    import os
    global __all__
    __all__ = []
    globals_, locals_ = globals(), locals()

    # dynamically import all the package modules
    for filename in os.listdir(__name__):
        # process all python files in directory that don't start with underscore
        # (which also keeps this module from importing itself)
        if filename[0] != '_' and filename.split('.')[-1] in ('py', 'pyw'):
            modulename = filename.split('.')[0]  # filename without extension
            package_module = '.'.join([__name__, modulename])
            try:
                module = __import__(package_module, globals_, locals_, [modulename])
            except:
                traceback.print_exc()
                raise
            for name in module.__dict__:
                if not name.startswith('_'):
                    globals_[name] = module.__dict__[name]
                    __all__.append(name)

_import_all_modules()
</snippet></ROW><ROW><id>14428820</id><snippet>def foo(bar):
    return bar
</snippet></ROW><ROW><id>14428820</id><snippet>from package.foo_module import foo  # added

def example(arg):
    return foo(arg)
</snippet></ROW><ROW><id>14428914</id><snippet>&lt;category term="None" rte:type="ranking"/&gt;&lt;category term="1024" rte:type="genrelist"/&gt;
</snippet></ROW><ROW><id>14428914</id><snippet>\n</snippet></ROW><ROW><id>14428914</id><snippet>\s*</snippet></ROW><ROW><id>14428940</id><snippet>User</snippet></ROW><ROW><id>14428940</id><snippet>UserProfile</snippet></ROW><ROW><id>14428940</id><snippet>profile = user.get_profile()
profile.verified = False
profile.ip_address = get_client_ip()
profile.save()
</snippet></ROW><ROW><id>14428940</id><snippet>UserProfile</snippet></ROW><ROW><id>14428940</id><snippet>models.py</snippet></ROW><ROW><id>14428940</id><snippet>## Create a forms.py file inside your app and define an UserProfileForm similar to this

from django.forms import ModelForm

## using relative import because it's good practice, and I don't know what's name of your app
from .models import UserProfile

class UserProfileForm(ModelForm)
    class Meta:
        model = UserProfile
        exclude = ("user",)


## In views.py

if request.method == 'POST':
    form = RegistrationForm(request.POST)
    profile_form = UserProfileForm(request.POST)
    if form.is_valid() and profile_form.is_valid():
        now = timezone.now()
        user = User.objects.create(
            username     = form.cleaned_data['username'],
            first_name   = form.cleaned_data['username'],
            last_name    = form.cleaned_data['username'],
            email        = form.cleaned_data['email'],
            is_staff     = False,
            is_active    = False,
            is_superuser = False,
            last_login   = now,
            date_joined  = now
        )

    user.set_password(form.cleaned_data['password'])
    user.save()
    profile = profile_form.save(commit=False)
    profile.user = user
    profile.save()
</snippet></ROW><ROW><id>14428940</id><snippet>RegistrationForm</snippet></ROW><ROW><id>14428972</id><snippet>import  thread, wmi, os
import pythoncom
print 'CMD: Kill command called'
def kill():
    pythoncom.CoInitialize()
    . . .
</snippet></ROW><ROW><id>14428972</id><snippet>pythoncom.CoInitialize()</snippet></ROW><ROW><id>14429416</id><snippet>int(kwargs['num']) * 3
</snippet></ROW><ROW><id>14429416</id><snippet>&gt;&gt;&gt; 'Hello ' * 3
'Hello Hello Hello '
</snippet></ROW><ROW><id>14429444</id><snippet>myqueue.put(('Thread Started', ))
</snippet></ROW><ROW><id>14429651</id><snippet>app = tw.api.make_middleware(
    app,
    {
        'toscawidgets.framework' : 'wsgi',
        'toscawidgets.middleware.inject_resources' : True,
    },
    stack_registry=True,
)
</snippet></ROW><ROW><id>14429833</id><snippet>import logging
import os

class PathTruncatingFormatter(logging.Formatter):
    def format(self, record):
        if isinstance(record.args, dict) and 'pathname' in record.args:
            # truncate the pathname
            filename = os.path.basename(record.args['pathname'])
            if len(filename) &gt; 20:
                filename = '{}~{}'.format(filename[:3], filename[-16:])
            record.args['pathname'] = filename
        return super(PathTruncatingFormatter, self).format(record)
</snippet></ROW><ROW><id>14429833</id><snippet>logging.Formatter</snippet></ROW><ROW><id>14429833</id><snippet>formatter = logging.PathTruncatingFormatter(
    '%(asctime)s - %(pathname)86s - %(lineno)4s - %(message)s', '%d %H:%M'
    )
</snippet></ROW><ROW><id>14430044</id><snippet>import math
import time
from multiprocessing import Queue
import multiprocessing

def factorize_naive(n):
    factors = []
    for div in range(2, int(n**.5)+1):
        while not n % div:
            factors.append(div)
            n //= div
    if n != 1:
        factors.append(n)
    return factors

nums = range(100000)
nprocs = 4

def worker(nums, out_q):
    """ The worker function, invoked in a process. 'nums' is a
        list of numbers to factor. The results are placed in
        a dictionary that's pushed to a queue.
    """
    outdict = {}
    for n in nums:
        outdict[n] = factorize_naive(n)
    out_q.put(outdict)

# Each process will get 'chunksize' nums and a queue to put his out
# dict into
out_q = Queue()
chunksize = int(math.ceil(len(nums) / float(nprocs)))
procs = []

for i in range(nprocs):
    p = multiprocessing.Process(
            target=worker,
            args=(nums[chunksize * i:chunksize * (i + 1)],
                  out_q))
    procs.append(p)
    p.start()

# Collect all results into a single result dict. We know how many dicts
# with results to expect.
resultdict = {}
for i in range(nprocs):
    resultdict.update(out_q.get())

time.sleep(5)

# Wait for all worker processes to finish
for p in procs:
    p.join()

print resultdict

time.sleep(15)
</snippet></ROW><ROW><id>14430047</id><snippet>names</snippet></ROW><ROW><id>14430047</id><snippet>r= mlab.csv2rec('HeightWeight.csv', delimiter= ',', 
                 names=['apple', 'pear'], 
                 skiprows=1)
</snippet></ROW><ROW><id>14430047</id><snippet>names</snippet></ROW><ROW><id>14430047</id><snippet>None</snippet></ROW><ROW><id>14430047</id><snippet>csv2rec</snippet></ROW><ROW><id>14430047</id><snippet>skiprows=1</snippet></ROW><ROW><id>14430094</id><snippet>r'titles/(?P&lt;order_item_id&gt;\d+)/metadata/localized/$',
</snippet></ROW><ROW><id>14430338</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup('''&lt;div&gt;
... &lt;p class="column"&gt;This is a column&lt;/p&gt;
... &lt;p class="column"&gt;More columns heh&lt;/p&gt;
... &lt;/div&gt;''')
&gt;&gt;&gt; soup.find_all(class_='column')
[&lt;p class="column"&gt;This is a column&lt;/p&gt;, &lt;p class="column"&gt;More columns heh&lt;/p&gt;]
&gt;&gt;&gt; import bs4
&gt;&gt;&gt; bs4.__version__
'4.1.3'
</snippet></ROW><ROW><id>14430418</id><snippet>myClass.__init__</snippet></ROW><ROW><id>14430418</id><snippet>myClassAv.__init__</snippet></ROW><ROW><id>14430418</id><snippet>def __init__(self, frameType='All'):
    myClass.__init__(self, frameType)
    def addingCol(cObject): 
        ...
    addingCol(self.cObject)
</snippet></ROW><ROW><id>14430418</id><snippet>import pandas as pd
import pylab as pl
import numpy as np


class myClass(object):
    def __init__(self, frameType='All'):
        def method1():
            myFrame = pd.DataFrame(
                {'c1': [1, 2, 3], 'c2': [4, 5, 6], 'c3': [7, 8, 9]})
            return myFrame

        def method2():
            myFrame = pd.DataFrame(
                {'c1': [.1, .2, .3], 'c2': [.4, .5, .6], 'c3': [.7, .8, .9]})
            return myFrame

        def makingChoice(self):
            if self.frameType == 'All':
                variable = method1() + method2()
            elif self.frameType == 'a':
                variable = method1()
            elif self.frameType == 'b':
                variable = method2()
            else:
                variable = pd.DataFrame(
                    {'c1': [0, 0, 0], 'c2': [0, 0, 0], 'c3': [0, 0, 0]})
            # print 'FROM __init__ : %s' % variable
            return variable
        self.frameType = frameType
        self.cObject = makingChoice(self)  # object created by the class

    def __str__(self):
        return str(self.cObject)

    def plotData(self):
        self.fig1 = pl.plot(self.cObject['c1'], self.cObject['c2'])
        self.fig2 = pl.plot(self.cObject['c1'], self.cObject['c3'])
        pl.show()


class myClassAv(myClass):
    def __init__(self, frameType='All'):
        myClass.__init__(self, frameType)

        def addingCol(cObject):
            print 'CURRENT cObject \n%s' % cObject  # the object is visible
            cObject['average'] = cObject.mean(axis=1)
            # creating new column works
            print 'THIS WORKS IN GENERAL\n%s' % str(cObject['average'])
            return cObject

        addingCol(self.cObject)

    def plotData(self):
        # Function to add new plot to already existing plots
        self.fig3 = pl.plot(self.cObject['c1'], self.cObject['average'])

if __name__ == '__main__':
    myObject1 = myClass()
    print 'myObject1 =\n%s' % myObject1
    myObject1.plotData()
    myObject2 = myClass('a')
    print 'myObject2 =\n%s' % myObject2
    myObject3 = myClass('b')
    print 'myObject3 =\n%s' % myObject3
    myObject4 = myClass('c')
    print 'myObject4 =\n%s' % myObject4

    myObject5 = myClassAv('a')
    print 'myObject5 =\n%s' % myObject5
    myObject5.plotData()
</snippet></ROW><ROW><id>14430418</id><snippet>self.cObject['avarage'] = (self.cObject['c1']+self.cObject['c2']+self.cObject['c3'])/3
</snippet></ROW><ROW><id>14430418</id><snippet>mean(axis = 1)</snippet></ROW><ROW><id>14430418</id><snippet>self.cObject['average'] = self.cObject.mean(axis=1)
</snippet></ROW><ROW><id>14430473</id><snippet>In [164]: A = [1,2,3,4,5,6,7,8]

In [165]: B = [2,3,4]

In [166]: [x in B for x in A]
Out[166]: [False, True, True, True, False, False, False, False]
</snippet></ROW><ROW><id>14430473</id><snippet>B</snippet></ROW><ROW><id>14430473</id><snippet>set</snippet></ROW><ROW><id>14430473</id><snippet>O(1)</snippet></ROW><ROW><id>14430473</id><snippet>O(n)</snippet></ROW><ROW><id>14430473</id><snippet>In [167]: b=set(B)

In [168]: [x in b for x in A]
Out[168]: [False, True, True, True, False, False, False, False]
</snippet></ROW><ROW><id>14430515</id><snippet>enumerate()</snippet></ROW><ROW><id>14430515</id><snippet>enumerate()</snippet></ROW><ROW><id>14430515</id><snippet>In [169]: vec1 = [3,2,1,4,5,6,7]

In [170]: vec2 = [1,2,3,3,5,6,9]

In [171]: [i for i,(a, b) in enumerate(zip(vec1, vec2)) if a == b]
Out[171]: [1, 4, 5]
</snippet></ROW><ROW><id>14430566</id><snippet>pygame.event.get()</snippet></ROW><ROW><id>14430578</id><snippet>TimedValue</snippet></ROW><ROW><id>14430578</id><snippet>now = time.time()
hunger = lambda: time.time() &gt; now + 60
</snippet></ROW><ROW><id>14430578</id><snippet>hunger()</snippet></ROW><ROW><id>14430578</id><snippet>hungry</snippet></ROW><ROW><id>14430578</id><snippet>hunger()</snippet></ROW><ROW><id>14430578</id><snippet>import time
now = time.time()
hunger = lambda: time.time() &gt; now + 60
for i in range(10):
    print 'doing stuff here on loop', i
    time.sleep(10)
    print 'hunger is', hunger()
</snippet></ROW><ROW><id>14430578</id><snippet>doing stuff here on loop 0
hunger is False
doing stuff here on loop 1
hunger is False
doing stuff here on loop 2
hunger is False
doing stuff here on loop 3
hunger is False
doing stuff here on loop 4
hunger is False
doing stuff here on loop 5
hunger is True
doing stuff here on loop 6
hunger is True
doing stuff here on loop 7
hunger is True
doing stuff here on loop 8
hunger is True
doing stuff here on loop 9
hunger is True
</snippet></ROW><ROW><id>14430748</id><snippet>src_lang</snippet></ROW><ROW><id>14430748</id><snippet>pk=20</snippet></ROW><ROW><id>14430748</id><snippet>Language</snippet></ROW><ROW><id>14430748</id><snippet>save</snippet></ROW><ROW><id>14430748</id><snippet>Language</snippet></ROW><ROW><id>14430748</id><snippet>obj_create</snippet></ROW><ROW><id>14430748</id><snippet>class ReadOnlyLanguageResource(ModelResource):
    # All the meta stuff here.
    def obj_create(self):
        # This should probably raise some kind of http error exception relating
        # to permission denied rather than Exception.
        raise Exception("Permission denied, cannot create new language resource")
</snippet></ROW><ROW><id>14430748</id><snippet>Order</snippet></ROW><ROW><id>14430748</id><snippet>src_lang</snippet></ROW><ROW><id>14430748</id><snippet>class OrderResource(ModelResource):
    user = fields.ForeignKey(UserResource, 'user', null=True, full=True)
    src_lang = fields.ForeignKey(ReadOnlyLanguageResource, 'src_lang')
    dst_lang = fields.ForeignKey(ReadOnlyLanguageResource, 'dst_lang')
</snippet></ROW><ROW><id>14430748</id><snippet>pk=20</snippet></ROW><ROW><id>14430748</id><snippet>Language</snippet></ROW><ROW><id>14430758</id><snippet>def anamorph3(img, angle = math.radians(270), imgWidth = 512):
    rInner = 1.
    dim = ImageDimensions(img)
    rOuter = rInner * (1 + angle * dim[2]/dim[1])
    data = list()
    for i in range(3):
        channelData = [[x[i] for x in v] for v in ImageData(img)]
        data.append(ListInterpolate(channelData, [[rOuter, rInner],[-angle/2,angle/2]]))
    def f(i, j):
        if abs(j) &lt;= angle/2 &amp;&amp; rInner &lt;= i &lt;= rOuter:
            l = list()
            for fun in data:
                l.append(fun(i, j))
            return l
        else:
            return [1, 1, 1]
    newImageData = list()
    for i in range(-rOuter, rOuter, 2*rOuter/(imgWidth-1)):
        l = list()
        for j in range(-rOuter, rOuter, 2*rOuter/(imgWidth-1)):
            l.append(f(math.sqrt(i**2 + j**2), math.atan(i, -j)))
        newImageData.append(l)
    return Image(newImageData) 
</snippet></ROW><ROW><id>14430758</id><snippet>ImageDimensions</snippet></ROW><ROW><id>14430758</id><snippet>ImageData</snippet></ROW><ROW><id>14430758</id><snippet>ListInterpolate</snippet></ROW><ROW><id>14430758</id><snippet>Image</snippet></ROW><ROW><id>14430814</id><snippet>def function(list_of_objects=None):
    if list_of_objects is None:
        list_of_objects = []
</snippet></ROW><ROW><id>14430814</id><snippet>None</snippet></ROW><ROW><id>14430814</id><snippet>is</snippet></ROW><ROW><id>14430814</id><snippet>list_of_objects</snippet></ROW><ROW><id>14430814</id><snippet>if</snippet></ROW><ROW><id>14430814</id><snippet>or</snippet></ROW><ROW><id>14430814</id><snippet>0</snippet></ROW><ROW><id>14430814</id><snippet>0.0</snippet></ROW><ROW><id>14430814</id><snippet>0j</snippet></ROW><ROW><id>14430814</id><snippet>''</snippet></ROW><ROW><id>14430814</id><snippet>()</snippet></ROW><ROW><id>14430814</id><snippet>[]</snippet></ROW><ROW><id>14430814</id><snippet>{}</snippet></ROW><ROW><id>14430814</id><snippet>__bool__()</snippet></ROW><ROW><id>14430814</id><snippet>__len__()</snippet></ROW><ROW><id>14431006</id><snippet>import Tkinter
import subprocess

if __name__ == "__main__":
    try:
        open('bluh_check')
    except IOError:
        open('bluh_check', 'w').close()
        x = subprocess.Popen(['python', __file__])
        print vars(x)
        title = 'there'
    else:
        title = 'hi'

    root = Tkinter.Tk()
    root.title(title)
    root.withdraw()
    root.deiconify()
    root.mainloop()
</snippet></ROW><ROW><id>14431150</id><snippet>lock</snippet></ROW><ROW><id>14431150</id><snippet>with lock:
    numpyArray[:,0] = 1
    a += 2
</snippet></ROW><ROW><id>14431150</id><snippet>cArray.get_lock()</snippet></ROW><ROW><id>14431150</id><snippet>lock</snippet></ROW><ROW><id>14431185</id><snippet>mock.Mock</snippet></ROW><ROW><id>14431185</id><snippet>Mock</snippet></ROW><ROW><id>14431185</id><snippet>class MyMock(Mock):
    def session(self):
        # Save session data here?
</snippet></ROW><ROW><id>14431185</id><snippet>session</snippet></ROW><ROW><id>14431185</id><snippet>session</snippet></ROW><ROW><id>14431225</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; def floatToBits(f):
...     s = struct.pack('&gt;f', f)
...     return struct.unpack('&gt;l', s)[0]
...     
... 
&gt;&gt;&gt; floatToBits(173.3125)
1127043072
&gt;&gt;&gt; hex(_)
'0x432d5000'
</snippet></ROW><ROW><id>14431225</id><snippet>&gt;&gt;&gt; def bitsToFloat(b):
...     s = struct.pack('&gt;l', b)
...     return struct.unpack('&gt;f', s)[0]

&gt;&gt;&gt; bitsToFloat(0x432d5000)
173.3125
</snippet></ROW><ROW><id>14431290</id><snippet>finder.ngram_fd.viewitems()</snippet></ROW><ROW><id>14431417</id><snippet>In [1]: weights = {'east':1,'west':2,'south':3}
</snippet></ROW><ROW><id>14431417</id><snippet>x</snippet></ROW><ROW><id>14431417</id><snippet>w</snippet></ROW><ROW><id>14431417</id><snippet>In [2]: def f(x):
   ...:     w = x.map(weights)
   ...:     return w / w.sum().astype(float)
</snippet></ROW><ROW><id>14431417</id><snippet>['item','price']</snippet></ROW><ROW><id>14431417</id><snippet>In [3]: df.groupby(['item','price']).region.apply(f)
Out[3]:
0    0.333333
1    0.666667
2    1.000000
3    1.000000
4    0.333333
5    0.666667
6    1.000000
7    1.000000
</snippet></ROW><ROW><id>14431417</id><snippet>df.quantity</snippet></ROW><ROW><id>14431417</id><snippet>In [4]: df['wt_quant'] = df.groupby(['item','price']).region.apply(f) * df.quantity

In [5]: df
Out[5]:
    item  price  quantity region  wt_quant
0    one     50         3   east  1.000000
1    one     50         3   west  2.000000
2    two     12         4  south  4.000000
3  three     35         5   west  5.000000
4    two     10        12   east  4.000000
5    two     10        14   west  9.333333
6    one     12         3   east  3.000000
7  three     12         8   west  8.000000
</snippet></ROW><ROW><id>14431585</id><snippet>contains_eager(Subclass.related1, Related1.related2)
</snippet></ROW><ROW><id>14431607</id><snippet>pyqtSlot</snippet></ROW><ROW><id>14431607</id><snippet>pyqtSlot</snippet></ROW><ROW><id>14431607</id><snippet>name</snippet></ROW><ROW><id>14431828</id><snippet>sass --watch source.sass:target.css</snippet></ROW><ROW><id>14431828</id><snippet>__init_.py</snippet></ROW><ROW><id>14431828</id><snippet>bashCommand = "sass --watch ./css/main.sass:./css/main.css"
import subprocess
process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>14431828</id><snippet>sass</snippet></ROW><ROW><id>14431828</id><snippet>css</snippet></ROW><ROW><id>14431828</id><snippet>sass</snippet></ROW><ROW><id>14431838</id><snippet>itertools.product</snippet></ROW><ROW><id>14431838</id><snippet>In [78]: seq="MED"

In [79]: ["".join(x) for x in product(*(d[y] for y in seq))]
Out[79]: ['ATGGAAGAC', 'ATGGAAGAT', 'ATGGAGGAC', 'ATGGAGGAT']
</snippet></ROW><ROW><id>14431912</id><snippet>str2='hello: acb cross'
reg = re.compile('hello: (a.*?) cross')
</snippet></ROW><ROW><id>14431954</id><snippet>&gt;&gt;&gt; string1 = "foo"
&gt;&gt;&gt; string2 = "bar"
&gt;&gt;&gt; string1.join(string2)
'bfooafoor'
</snippet></ROW><ROW><id>14431954</id><snippet>string1</snippet></ROW><ROW><id>14431954</id><snippet>string2</snippet></ROW><ROW><id>14431954</id><snippet>&gt;&gt;&gt; string2.replace('', string1)
'foobfooafoorfoo'
</snippet></ROW><ROW><id>14431954</id><snippet>str.join()</snippet></ROW><ROW><id>14431954</id><snippet>&gt;&gt;&gt; string2.replace('', string1)[len(string1):-len(string1)]
'bfooafoor'
</snippet></ROW><ROW><id>14431954</id><snippet>str.join()</snippet></ROW><ROW><id>14431954</id><snippet>str.join()</snippet></ROW><ROW><id>14431954</id><snippet>str.replace()</snippet></ROW><ROW><id>14431954</id><snippet>x.replace("", y)</snippet></ROW><ROW><id>14431954</id><snippet>2347 /* Algorithms for different cases of string replacement */
2348
2349 /* len(self)&gt;=1, from="", len(to)&gt;=1, maxcount&gt;=1 */
2350 Py_LOCAL(PyStringObject *)
2351 replace_interleave(PyStringObject *self,
2352 const char *to_s, Py_ssize_t to_len,
2353 Py_ssize_t maxcount)
2354 {
...
</snippet></ROW><ROW><id>14432396</id><snippet>from PIL import Image

def sprite_mask(img, bg_point=(0, 0)):
    width, height = img.size
    im = img.load()

    bg = im[bg_point]
    mask_img = Image.new('L', img.size)
    mask = mask_img.load()
    for x in xrange(width):
        for y in xrange(height):
            if im[x, y] != bg:
                mask[x, y] = 255
    return mask_img, bg
</snippet></ROW><ROW><id>14432396</id><snippet>mask</snippet></ROW><ROW><id>14432396</id><snippet>scipy</snippet></ROW><ROW><id>14432396</id><snippet>import sys
import numpy
from scipy.ndimage import label, morphology

def split_sprite(img, mask, bg, join_interior=True, basename='sprite_%d.png'):
    im = img.load()

    m = numpy.array(mask, dtype=numpy.uint8)
    if join_interior:
        m = morphology.binary_fill_holes(m)
    lbl, ncc = label(m, numpy.ones((3, 3)))

    for i in xrange(1, ncc + 1):
        px, py = numpy.nonzero(lbl == i)
        xmin, xmax, ymin, ymax = px.min(), px.max(), py.min(), py.max()

        sprite = Image.new(img.mode, (ymax - ymin + 1, xmax - xmin + 1), bg)
        sp = sprite.load()
        for x, y in zip(px, py):
            x, y = int(x), int(y)
            sp[y - int(ymin), x - int(xmin)] = im[y, x]

        name = basename % i
        sprite.save(name)
        print "Wrote %s" % name

sprite = Image.open(sys.argv[1])
mask, bg = sprite_mask(sprite)
split_sprite(sprite, mask, bg)
</snippet></ROW><ROW><id>14432581</id><snippet>__iter__</snippet></ROW><ROW><id>14432581</id><snippet>class A(object):
    def __init__(self, a, b):
        self.a = a
        self.b = b
    def __iter__(self):
        return vars(self).iteritems()
</snippet></ROW><ROW><id>14432581</id><snippet>&gt;&gt;&gt; A(2,3)
&lt;__main__.A object at 0x101ea70d0&gt;
&gt;&gt;&gt; dict(A(2,3))
{'a': 2, 'b': 3}
</snippet></ROW><ROW><id>14432581</id><snippet>.to_dict()</snippet></ROW><ROW><id>14432581</id><snippet>__iter__</snippet></ROW><ROW><id>14432814</id><snippet>__enter__</snippet></ROW><ROW><id>14432814</id><snippet>return self</snippet></ROW><ROW><id>14432814</id><snippet>__enter__</snippet></ROW><ROW><id>14432914</id><snippet>reset_index</snippet></ROW><ROW><id>14432914</id><snippet>'Date'</snippet></ROW><ROW><id>14432914</id><snippet>price2 = price.reset_index()

In [11]: price2
Out[11]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 1006 entries, 0 to 1005
Data columns:
Date    1006  non-null values
AAPL    1006  non-null values
GE      1006  non-null values
dtypes: datetime64[ns](1), float64(2)
</snippet></ROW><ROW><id>14432914</id><snippet>import sqlite3
from pandas.io import sql
# Create your connection.
cnx = sqlite3.connect(':memory:')
</snippet></ROW><ROW><id>14432914</id><snippet>prices2</snippet></ROW><ROW><id>14432914</id><snippet>cnx</snippet></ROW><ROW><id>14432914</id><snippet>sql.write_frame(price2, name='price2', con=cnx)
</snippet></ROW><ROW><id>14432914</id><snippet>read_frame</snippet></ROW><ROW><id>14432914</id><snippet>p2 = sql.read_frame('select * from price2', cnx)
</snippet></ROW><ROW><id>14432914</id><snippet>unicode</snippet></ROW><ROW><id>14432914</id><snippet>Timestamp</snippet></ROW><ROW><id>14432914</id><snippet>apply</snippet></ROW><ROW><id>14432914</id><snippet>Timestamp</snippet></ROW><ROW><id>14432914</id><snippet>set_index</snippet></ROW><ROW><id>14432914</id><snippet>from pandas.lib import Timestamp
p2.Date = p2.Date.apply(Timestamp)
p = p2.set_index('Date')
</snippet></ROW><ROW><id>14432914</id><snippet>prices</snippet></ROW><ROW><id>14432914</id><snippet>In [20]: p
Out[20]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 1006 entries, 2009-01-02 00:00:00 to 2012-12-31 00:00:00
Data columns:
AAPL    1006  non-null values
GE      1006  non-null values
dtypes: float64(2)
</snippet></ROW><ROW><id>14432958</id><snippet>class Foo(object):
</snippet></ROW><ROW><id>14432958</id><snippet>CamelCase</snippet></ROW><ROW><id>14432958</id><snippet>keys</snippet></ROW><ROW><id>14432958</id><snippet>values</snippet></ROW><ROW><id>14432958</id><snippet>findreplace.keys</snippet></ROW><ROW><id>14432958</id><snippet>findreplace</snippet></ROW><ROW><id>14432958</id><snippet>find</snippet></ROW><ROW><id>14432958</id><snippet>replace</snippet></ROW><ROW><id>14432958</id><snippet>__init__</snippet></ROW><ROW><id>14432958</id><snippet>TypeError</snippet></ROW><ROW><id>14433263</id><snippet>x = y if z else x = w
</snippet></ROW><ROW><id>14433263</id><snippet>x = y if z else w
</snippet></ROW><ROW><id>14433263</id><snippet>if z: x = y
</snippet></ROW><ROW><id>14433366</id><snippet>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
</snippet></ROW><ROW><id>14433366</id><snippet>SetDesktopBackground.py</snippet></ROW><ROW><id>14433366</id><snippet>#!python

from ctypes import *
from os import path

SPI_SETDESKWALLPAPER = 0x14
SPIF_UPDATEINIFILE   = 0x1

lpszImage = path.join(path.dirname(path.realpath(__file__)), 'your_image.jpg')

SystemParametersInfo = windll.user32.SystemParametersInfoA

SystemParametersInfo(SPI_SETDESKWALLPAPER, 0, lpszImage, SPIF_UPDATEINIFILE)
</snippet></ROW><ROW><id>14433366</id><snippet>your_image.jpg</snippet></ROW><ROW><id>14433366</id><snippet>Start &gt; Search &gt; type regedit.exe
</snippet></ROW><ROW><id>14433366</id><snippet>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
</snippet></ROW><ROW><id>14433366</id><snippet>New &gt; String Value</snippet></ROW><ROW><id>14433366</id><snippet>Modify</snippet></ROW><ROW><id>14433366</id><snippet>Data Value</snippet></ROW><ROW><id>14433366</id><snippet>"C:\Python26\pythonw.exe" "C:\Path\To\SetDesktopBackground.py"
</snippet></ROW><ROW><id>14433366</id><snippet>#!python

from _winreg import *
from sys import executable
from os import path

subkey  = 'Software\\Microsoft\\Windows\\CurrentVersion\\Run'
script  = 'C:\\Path\\To\\SetDesktopBackground.py'
pythonw = path.join(path.dirname(executable), 'pythonw.exe')

hKey = OpenKey(HKEY_CURRENT_USER, subkey, 0, KEY_SET_VALUE)

SetValueEx(hKey, 'MyApp', 0, REG_SZ, '"{0}" "{1}"'.format(pythonw, script))

CloseKey(hKey)
</snippet></ROW><ROW><id>14433377</id><snippet>elif op == 'quit' or 'exit':
</snippet></ROW><ROW><id>14433377</id><snippet>elif op == 'quit' or op == 'exit':
</snippet></ROW><ROW><id>14433488</id><snippet>classmethod</snippet></ROW><ROW><id>14433488</id><snippet>&gt;&gt;&gt; class Test(object):
    def instance_method(sth, x):
        return sth, x
    @classmethod
    def class_method(sth, x):
        return sth, x
    @staticmethod
    def static_method(x):
        return x


&gt;&gt;&gt; a = Test()
&gt;&gt;&gt; a.instance_method('abc')
(&lt;__main__.Test object at 0x0000000002C26D30&gt;, 'abc')
&gt;&gt;&gt; a.class_method('abc')
(&lt;class '__main__.Test'&gt;, 'abc')
&gt;&gt;&gt; a.static_method('abc')
'abc'
</snippet></ROW><ROW><id>14433488</id><snippet>self</snippet></ROW><ROW><id>14433488</id><snippet>cls</snippet></ROW><ROW><id>14433556</id><snippet>PATH</snippet></ROW><ROW><id>14433556</id><snippet>C:\Python27</snippet></ROW><ROW><id>14433556</id><snippet>python.exe</snippet></ROW><ROW><id>14433596</id><snippet>[[</snippet></ROW><ROW><id>14433596</id><snippet>]]</snippet></ROW><ROW><id>14433596</id><snippet>def</snippet></ROW><ROW><id>14433614</id><snippet>text_file.write('formatxyz\n' % z))  (###)
</snippet></ROW><ROW><id>14433614</id><snippet>text_file.write(formatxyz % z + '\n')  (###)
</snippet></ROW><ROW><id>14433636</id><snippet>==</snippet></ROW><ROW><id>14433636</id><snippet>__cmp__</snippet></ROW><ROW><id>14433636</id><snippet>__cmp__</snippet></ROW><ROW><id>14433636</id><snippet>__eq__</snippet></ROW><ROW><id>14433636</id><snippet>operator==</snippet></ROW><ROW><id>14433752</id><snippet>.communicate()</snippet></ROW><ROW><id>14433752</id><snippet>.wait()</snippet></ROW><ROW><id>14433752</id><snippet>.read()</snippet></ROW><ROW><id>14433752</id><snippet>wait()</snippet></ROW><ROW><id>14433752</id><snippet>subprocess</snippet></ROW><ROW><id>14433752</id><snippet>stdout=PIPE</snippet></ROW><ROW><id>14433752</id><snippet>stderr=PIPE</snippet></ROW><ROW><id>14433752</id><snippet>communicate()</snippet></ROW><ROW><id>14433812</id><snippet>=</snippet></ROW><ROW><id>14433812</id><snippet>[:]</snippet></ROW><ROW><id>14433812</id><snippet>&gt;&gt;&gt; s = 'hello'
&gt;&gt;&gt; t1 = s
&gt;&gt;&gt; t2 = s[:]
&gt;&gt;&gt; print s, t1, t2
hello hello hello
&gt;&gt;&gt; s = 'good bye'
&gt;&gt;&gt; print s, t1, t2
good bye hello hello
</snippet></ROW><ROW><id>14433812</id><snippet>&gt;&gt;&gt; li1 = [1,2]
&gt;&gt;&gt; li = [1,2]
&gt;&gt;&gt; li1 = li
&gt;&gt;&gt; li2 = li[:]
&gt;&gt;&gt; print li, li1, li2
[1, 2] [1, 2] [1, 2]
&gt;&gt;&gt; li[0] = 0
&gt;&gt;&gt; print li, li1, li2
[0, 2] [0, 2] [1, 2]
</snippet></ROW><ROW><id>14433812</id><snippet>class MutableString(object):
    def __init__(self, s):
        self._characters = [c for c in s]

    def __str__(self):
        return "".join(self._characters)

    def __repr__(self):
        return "MutableString(\"%s\")" % str(self)

    def __getattr__(self, name):
        return str(self).__getattribute__(name)

    def __len__(self):
        return len(self._characters)

    def __getitem__(self, index):
        return self._characters[index]

    def __setitem__(self, index, value):
        self._characters[index] = value

    def __getslice__(self, start, end=-1, stride=1):
        return str(self)[start:end:stride]


if __name__ == "__main__":
    m = MutableString("Hello")
    print m
    print len(m)
    print m.find("o")
    print m.find("x")
    print m.replace("e", "a") #translate to german ;-)
    print m
    print m[3]
    m[1] = "a"
    print m
    print m[:]

    copy1 = m
    copy2 = m[:]
    print m, copy1, copy2
    m[1] = "X"
    print m, copy1, copy2
</snippet></ROW><ROW><id>14433812</id><snippet>[:]</snippet></ROW><ROW><id>14433901</id><snippet>command  = "drwxr-xr-x 4,096 2013/01/20 22:37:39 files".split()
filesize = command[1] 
date = command[2] 
</snippet></ROW><ROW><id>14434095</id><snippet>import json

posts = (Post.objects.filter(owner=authenticated_user)
                     .values('id', 'title', 'summary'))
json_posts = json.dumps(posts)
</snippet></ROW><ROW><id>14434100</id><snippet>apply_over_axis</snippet></ROW><ROW><id>14434100</id><snippet>vectorize</snippet></ROW><ROW><id>14434100</id><snippet>xrange(100)</snippet></ROW><ROW><id>14434100</id><snippet>np.arange(100)</snippet></ROW><ROW><id>14434100</id><snippet>xrange</snippet></ROW><ROW><id>14434100</id><snippet>&gt;&gt;&gt; timeit.timeit("np.arange(100)", "import numpy as np")
0.95243776
&gt;&gt;&gt; timeit.timeit("xrange(100)", "import numpy as np")
0.2129926399999995
</snippet></ROW><ROW><id>14434100</id><snippet>def doNothing(crud):
    return crud

&gt;&gt;&gt; timeit.timeit("np.vectorize(doNothing)(thing)", "import numpy as np; from __main__ import doNothing; thing = np.arange(100)")
49.13036320000003
&gt;&gt;&gt; timeit.timeit("[doNothing(x) for x in thing]", "import numpy as np; from __main__ import doNothing; thing = np.arange(100)")
25.873566400000072
</snippet></ROW><ROW><id>14434100</id><snippet>&gt;&gt;&gt; timeit.timeit("np.log(thing)", "import numpy as np; import math; from __main__ import doNothing; thing = np.arange(100)+1")
3.2039433600000393
&gt;&gt;&gt; timeit.timeit("[math.log(x) for x in thing]", "import numpy as np; import math; from __main__ import doNothing; thing = np.arange(100)+1")
37.74219519999997
</snippet></ROW><ROW><id>14434308</id><snippet>import pygame

def main(filepath):
    pygame.mixer.init()

    # If you want more channels, change 8 to a desired number. 8 is the default number of channel

    pygame.mixer.set_num_channels(8)

    # This is the sound channel
    voice = pygame.mixer.Channel(5)

    sound = pygame.mixer.Sound(filepath)

    voice.play(sound)

    if voice.get_busy():
        #Do Something
</snippet></ROW><ROW><id>14434380</id><snippet>gc</snippet></ROW><ROW><id>14434514</id><snippet>itemgetter(0)</snippet></ROW><ROW><id>14434514</id><snippet>O(1)</snippet></ROW><ROW><id>14434514</id><snippet>data</snippet></ROW><ROW><id>14434514</id><snippet>O(n log n)</snippet></ROW><ROW><id>14434595</id><snippet>x y
</snippet></ROW><ROW><id>14434595</id><snippet>x</snippet></ROW><ROW><id>14434595</id><snippet>y</snippet></ROW><ROW><id>14434595</id><snippet>eval()</snippet></ROW><ROW><id>14434595</id><snippet>pyparsing</snippet></ROW><ROW><id>14434595</id><snippet>from pyparsing import *

def give_desired_output(s):
    return "desired"

TAKE_THIS = Suppress("take_this") + Suppress(Word(printables))
AND_PROC = Suppress("and_process_it")
AND_GIVE = Keyword("and_give_me_the_output")
AND_GIVE.setParseAction(give_desired_output)

LANGUAGE_LINE = TAKE_THIS | AND_PROC | AND_GIVE

LANGUAGE = ZeroOrMore(LANGUAGE_LINE)


def parse_language(text):
    lst = LANGUAGE.parseString(text)
    assert len(lst) == 1  # trivial language returns a single value
    return lst[0]

if __name__ == "__main__":
    from_a_dsl_file = \
"""
   take_this 'abc'
   and_process_it
   and_give_me_the_output
"""

    print(parse_language(from_a_dsl_file))  # prints the word: desired
</snippet></ROW><ROW><id>14434636</id><snippet>&gt;&gt;&gt; bananasplit = [int(b) / int(m) for b,m in zip(banana, monkey)]
&gt;&gt;&gt; print(bananasplit)
[9, 4, 12]
</snippet></ROW><ROW><id>14434636</id><snippet>[int(i) for i in monkey]
[int(i) for i in banana]
</snippet></ROW><ROW><id>14434636</id><snippet>monkey = [int(i) for i in monkey]
banana = [int(i) for i in banana]
</snippet></ROW><ROW><id>14434636</id><snippet>/</snippet></ROW><ROW><id>14434840</id><snippet>{{ form.name_of_field.errors }}</snippet></ROW><ROW><id>14434840</id><snippet>{{ form.non_field_errors }}</snippet></ROW><ROW><id>14434840</id><snippet>    ...
    else:
        # Return an 'invalid login' error message.
        message = 'Your message'

return render(request, 'accounts/login.html', {
    'form': form, 'message': message
    })
</snippet></ROW><ROW><id>14434840</id><snippet>if request.method == 'POST':</snippet></ROW><ROW><id>14434840</id><snippet>form = LoginForm(request.POST or None)</snippet></ROW><ROW><id>14434913</id><snippet>if</snippet></ROW><ROW><id>14434913</id><snippet>if</snippet></ROW><ROW><id>14434913</id><snippet>#! /usr/bin/python2.7
import sys

for s in (s.strip () for s in open ('test', 'r') ):
    p = int (s.replace ('sys.maxint', str (sys.maxint) ) )
    print (p)
</snippet></ROW><ROW><id>14434913</id><snippet>if</snippet></ROW><ROW><id>14434913</id><snippet>for s in (s.strip () for s in open ('test', 'r') ):
    p = sys.maxint if s == 'sys.maxint' else int (s)
    print (p)
</snippet></ROW><ROW><id>14434955</id><snippet>set</snippet></ROW><ROW><id>14434955</id><snippet>with open('File1') as f1, open('File2') as f2:
    columns_a = set(tuple(sorted(l.split())) for l in f1)
    columns_b = set(tuple(sorted(l.split())) for l in f2)

with open('matching', 'w') as out:
    for elem in columns_a  &amp; columns_b:
        out.write('{a} \n'.format(a = '\t'.join(elem)))
</snippet></ROW><ROW><id>14435364</id><snippet>comments</snippet></ROW><ROW><id>14435364</id><snippet>genfromtxt()</snippet></ROW><ROW><id>14435364</id><snippet>'#'</snippet></ROW><ROW><id>14435364</id><snippet>#</snippet></ROW><ROW><id>14435364</id><snippet>2901869281,3279442095,2012-12-15T23:00:00.003Z,Sacramento,CA,R#3817874,United States,...
                                                              ^ start of comment
</snippet></ROW><ROW><id>14435473</id><snippet>&gt;&gt;&gt; soup=BeautifulSoup.BeautifulSoup(content).findAll('name')
&gt;&gt;&gt; for field in soup:
...     print field
... 
&lt;name&gt;Yesügey&lt;/name&gt;
</snippet></ROW><ROW><id>14435473</id><snippet>print soup.find('name').string
</snippet></ROW><ROW><id>14435849</id><snippet>extent</snippet></ROW><ROW><id>14435849</id><snippet>pylab.contourf(-pac[:,100,:], extent=[-4, 4, 0, 1000])  #pac is a 3D data distribution
pylab.colorbar()
savefig("PAC Concentration.png")
pylab.close()
</snippet></ROW><ROW><id>14437391</id><snippet> "main" {
         Write-Host "w main $cmd" 
          $arg0 = "C:\_WORK_\SAS\hello_main.py"
          $arg1 = "-c"
          $arg2 = "hello"

          $allArgs = @($arg0, $arg1, $arg2)

         &amp; java -cp C:\bea\tpc\WEBLOG~1\server\lib\weblogic.jar weblogic.WLST $allArgs
</snippet></ROW><ROW><id>14437483</id><snippet>regex = re.compile(r"(?&lt;=\()\d+(?=\))")
value = int(re.search(regex, fname).group(0))
</snippet></ROW><ROW><id>14437483</id><snippet>(?&lt;=\() # Assert that the previous character is a (
\d+     # Match one or more digits
(?=\))  # Assert that the next character is a )
</snippet></ROW><ROW><id>14437595</id><snippet>&lt;button type="submit" title="Save this form"&gt;&lt;span&gt;Save&lt;/span&gt;&lt;/button&gt;
</snippet></ROW><ROW><id>14437595</id><snippet>{% for name, label in buttons %}
    &lt;button type="submit" title="{{name}}"&gt;&lt;span&gt;{{name}}&lt;/span&gt;&lt;/button&gt;
{% endfor %}
</snippet></ROW><ROW><id>14437595</id><snippet>class InlineButtonWidget(object):
    html = """
    &lt;button type="submit" title="%s"&gt;&lt;span&gt;%s&lt;/span&gt;&lt;/button&gt;
    """

    def __init__(self, input_type='submit'):
        self.input_type = input_type

    def __call__(self, field, **kwargs):
        kwargs.setdefault('id', field.id)
        kwargs.setdefault('type', self.input_type)
        if 'value' not in kwargs:
            kwargs['value'] = field._value()
        return HTMLString(self.html % (field.name, field.lable ))
</snippet></ROW><ROW><id>14437632</id><snippet>void QComboBox::setCompleter(QCompleter *completer)</snippet></ROW><ROW><id>14437854</id><snippet>im.save()</snippet></ROW><ROW><id>14437927</id><snippet>&gt;&gt;&gt; print h.unescape(content.decode('utf8'))
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;BASE href="http://kermit.columbia.edu"&gt;
&lt;META http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
&lt;title&gt;UTF-8 Sampler&lt;/title&gt;
&lt;/head&gt;
&lt;body bgcolor="#ffffff" text="#000000"&gt;
&lt;h1&gt;&lt;tt&gt;UTF-8 SAMPLER&lt;/tt&gt;&lt;/h1&gt;

&lt;big&gt;&lt;big&gt;  ¥ · £ · € · $ · ¢ · ₡ · ₢ · ₣ · ₤ · ₥ · ₦ · ₧ · ₨ · ₩ · ₪ · ₫ · ₭ · ₮ · ₯ · &amp;#8377&lt;/big&gt;&lt;/big&gt;



&lt;p&gt;
&lt;blockquote&gt;
Frank da Cruz&lt;br&gt;
&lt;a hre
</snippet></ROW><ROW><id>14437927</id><snippet>&amp;#8377</snippet></ROW><ROW><id>14437927</id><snippet>;</snippet></ROW><ROW><id>14437927</id><snippet>;</snippet></ROW><ROW><id>14437927</id><snippet>&gt;&gt;&gt; print h.unescape('₹')
₹
</snippet></ROW><ROW><id>14437927</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; brokenrefs = re.compile(r'(&amp;#x?[a-e0-9]+)\b', re.I)
&gt;&gt;&gt; print h.unescape(brokenrefs.sub(r'\1;', content.decode('utf8')))
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;BASE href="http://kermit.columbia.edu"&gt;
&lt;META http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
&lt;title&gt;UTF-8 Sampler&lt;/title&gt;
&lt;/head&gt;
&lt;body bgcolor="#ffffff" text="#000000"&gt;
&lt;h1&gt;&lt;tt&gt;UTF-8 SAMPLER&lt;/tt&gt;&lt;/h1&gt;

&lt;big&gt;&lt;big&gt;  ¥ · £ · € · $ · ¢ · ₡ · ₢ · ₣ · ₤ · ₥ · ₦ · ₧ · ₨ · ₩ · ₪ · ₫ · ₭ · ₮ · ₯ · ₹&lt;/big&gt;&lt;/big&gt;



&lt;p&gt;
&lt;blockquote&gt;
Frank da Cruz&lt;br&gt;
&lt;a hre
</snippet></ROW><ROW><id>14438022</id><snippet>stdout</snippet></ROW><ROW><id>14438022</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>14438022</id><snippet>import subprocess
def get_eth_iface():
    awk_sort = subprocess.Popen( ["dir" ], stdin= subprocess.PIPE, stdout= subprocess.PIPE)
    awk_sort.wait()
    output = awk_sort.communicate()[0]
    print output.rstrip()
get_eth_iface()
</snippet></ROW><ROW><id>14438373</id><snippet>def month_check(month):
    if month &lt; 1:
        print("The month must be a number between 01 and 12. Please re-enter")
        month_q()
    elif month &gt; 12:
        print("The month must be a number between 01 and 12. Please re-enter")
        month_q()
    else:
        print("Month_check returning month:", month)
        return month
</snippet></ROW><ROW><id>14438373</id><snippet>None</snippet></ROW><ROW><id>14438373</id><snippet>updatemonth = month_check(month)</snippet></ROW><ROW><id>14438373</id><snippet>None</snippet></ROW><ROW><id>14438373</id><snippet>updatemonth</snippet></ROW><ROW><id>14438373</id><snippet>print("Month q returning:", updatemonth)</snippet></ROW><ROW><id>14438373</id><snippet>Month q returning: None</snippet></ROW><ROW><id>14438373</id><snippet>month_q</snippet></ROW><ROW><id>14438373</id><snippet>month_check()</snippet></ROW><ROW><id>14438373</id><snippet>None</snippet></ROW><ROW><id>14438373</id><snippet>month_q</snippet></ROW><ROW><id>14438373</id><snippet>month_check</snippet></ROW><ROW><id>14438373</id><snippet>month_q</snippet></ROW><ROW><id>14438373</id><snippet>month_q():
    What was the month [MM] which the installers were updated/created by xxx?:15
    month_check(15):
        The month must be a number between 01 and 12. Please re-enter
        month_q():
            What was the month [MM] which the installers were updated/created by xxx?:14
            month_check(15):
                The month must be a number between 01 and 12. Please re-enter
                month_q():
                    What was the month [MM] which the installers were updated/created by xxx?:13
                    month_check(13):
                        The month must be a number between 01 and 12. Please re-enter
                        month_q():
                            What was the month [MM] which the installers were updated/created by xxx?:12
                            month_check(12):
                                Month_check returning month: 12
                                &lt;- 12
                            Month q returning: 12
                            &lt;- 12
                        &lt;- None
                    Month q returning: None
                    &lt;- None
                &lt;- None
            Month q returning: None
            &lt;- None
        &lt;- None
    Month q returning: None
    &lt;- None
Update month: None
</snippet></ROW><ROW><id>14438373</id><snippet>month_q</snippet></ROW><ROW><id>14438373</id><snippet>while</snippet></ROW><ROW><id>14438373</id><snippet>def month_q():
    while True:
        try:
            month = int(input('What was the month [MM] which the installers were  updated/created by xxx?:'))
            if not month_check(month):
                raise ValueError()
        except ValueError:
            print("Please re-enter a 2 digit month")
            continue
        print("Month q returning:", month)
        return month


# check the update month is a valid month
def month_check(month):
    if month &lt; 1 or month &gt; 12:
        print("The month must be a number between 01 and 12")
        return False
    return True
</snippet></ROW><ROW><id>14438373</id><snippet>def month_q():
    while True:
        try:
            month = int(input('What was the month [MM] which the installers were  updated/created by xxx?:'))
            if month &lt; 1 or month &gt; 12:
                raise ValueError()
        except ValueError:
            print("Please re-enter a 2 digit month between 01 and 12.")
            continue
        print("Month q returning:", month)
        return month
</snippet></ROW><ROW><id>14438373</id><snippet>except:</snippet></ROW><ROW><id>14438373</id><snippet>ValueError</snippet></ROW><ROW><id>14438373</id><snippet>int()</snippet></ROW><ROW><id>14438887</id><snippet>def run_command(command):
    p = subprocess.Popen(command, shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT)
    return p.communicate()
</snippet></ROW><ROW><id>14439051</id><snippet>$data</snippet></ROW><ROW><id>14439051</id><snippet>array()</snippet></ROW><ROW><id>14439051</id><snippet>self.ip</snippet></ROW><ROW><id>14439051</id><snippet>self.ip = dict()
self.ip = {}
</snippet></ROW><ROW><id>14439051</id><snippet>TypeError: 'str' object does not support item assignment
</snippet></ROW><ROW><id>14439051</id><snippet>self.ip</snippet></ROW><ROW><id>14439168</id><snippet>python.exe</snippet></ROW><ROW><id>14439168</id><snippet>pythonw.exe</snippet></ROW><ROW><id>14439195</id><snippet>filename</snippet></ROW><ROW><id>14439195</id><snippet>SyntaxError</snippet></ROW><ROW><id>14439195</id><snippet>readfile = "abc.001.xyz.010.trj"
f = open(readfile, "r")
</snippet></ROW><ROW><id>14439195</id><snippet>outfile = "out."  + readfile
f = open(outfile, "w")
</snippet></ROW><ROW><id>14439195</id><snippet>open</snippet></ROW><ROW><id>14439195</id><snippet>close</snippet></ROW><ROW><id>14439300</id><snippet>arcname</snippet></ROW><ROW><id>14439300</id><snippet>ZipFile.write()</snippet></ROW><ROW><id>14439300</id><snippet>makeArchive()</snippet></ROW><ROW><id>14439300</id><snippet>def makeArchive(fileList, archive, root):
    """
    'fileList' is a list of file names - full path each name
    'archive' is the file name for the archive with a full path
    """
    a = zipfile.ZipFile(archive, 'w', zipfile.ZIP_DEFLATED)

    for f in fileList:
        print "archiving file %s" % (f)
        a.write(f, os.path.relpath(f, root))
    a.close()
</snippet></ROW><ROW><id>14439300</id><snippet>makeArchive(dirEntries(folder, True), zipname, folder)
</snippet></ROW><ROW><id>14439300</id><snippet>try:</snippet></ROW><ROW><id>14439300</id><snippet>except:</snippet></ROW><ROW><id>14439300</id><snippet>os.path.relpath()</snippet></ROW><ROW><id>14439300</id><snippet>root</snippet></ROW><ROW><id>14439300</id><snippet>relpath</snippet></ROW><ROW><id>14439300</id><snippet>def relpath(filename, root):
    return filename[len(root):].lstrip(os.path.sep).lstrip(os.path.altsep)
</snippet></ROW><ROW><id>14439300</id><snippet>a.write(f, relpath(f, root))
</snippet></ROW><ROW><id>14439300</id><snippet>relpath()</snippet></ROW><ROW><id>14439300</id><snippet>filepath</snippet></ROW><ROW><id>14439300</id><snippet>root</snippet></ROW><ROW><id>14439300</id><snippet>relpath()</snippet></ROW><ROW><id>14439455</id><snippet>StringIO</snippet></ROW><ROW><id>14439455</id><snippet>PIL</snippet></ROW><ROW><id>14439455</id><snippet>PIL</snippet></ROW><ROW><id>14439455</id><snippet>numpy</snippet></ROW><ROW><id>14439455</id><snippet>import sys
import numpy
import cv
import cv2
from cStringIO import StringIO
from PIL import Image

out_video = cv2.VideoWriter()
fourcc = cv.CV_FOURCC('D', 'I', 'V', 'X')
fps = 30
color = True

size = None
for fname in sys.argv[2:]:
    data = open(fname).read() # Your String

    s = StringIO(data)
    img = Image.open(s)
    if size and img.size != size:
        img = img.resize(size)
    else:
        size = img.size
        out_video.open(sys.argv[1], fourcc, fps, size, color)
    out_video.write(cv2.cvtColor(numpy.array(img), cv2.COLOR_RGB2BGR))
</snippet></ROW><ROW><id>14439635</id><snippet>None</snippet></ROW><ROW><id>14439635</id><snippet>if root == None:
    pass
</snippet></ROW><ROW><id>14439635</id><snippet> def PreOrder(self):
     print self.data 
     if self.left:
          print self.left.PreOrder()
     if self.right:
          print self.right.PreOrder()
</snippet></ROW><ROW><id>14439635</id><snippet>root = None
a = a.insert(root,4)
a.insert...
</snippet></ROW><ROW><id>14440001</id><snippet>b</snippet></ROW><ROW><id>14440001</id><snippet>a</snippet></ROW><ROW><id>14440001</id><snippet>b[y * sizex + x] = (a[y * sizex + x] == 255) ? 0 : a[y * sizex + x];
</snippet></ROW><ROW><id>14440388</id><snippet>imgRequest = urllib2.Request(imgUrl, headers=headers)
imgData = urllib2.urlopen(imgRequest).read()
</snippet></ROW><ROW><id>14440577</id><snippet>debug = print</snippet></ROW><ROW><id>14440577</id><snippet>print</snippet></ROW><ROW><id>14440577</id><snippet>debug</snippet></ROW><ROW><id>14440577</id><snippet>print</snippet></ROW><ROW><id>14440577</id><snippet>print 1,</snippet></ROW><ROW><id>14440577</id><snippet>print 1 &gt;&gt; sys.stderr</snippet></ROW><ROW><id>14440577</id><snippet>def debug(s):
    print s
</snippet></ROW><ROW><id>14440577</id><snippet>print</snippet></ROW><ROW><id>14440577</id><snippet>from __future__ import print_function
debug = print
</snippet></ROW><ROW><id>14440577</id><snippet>print x</snippet></ROW><ROW><id>14440967</id><snippet>os.system("example.py arg")
</snippet></ROW><ROW><id>14441319</id><snippet>widget</snippet></ROW><ROW><id>14441442</id><snippet>key1="value1"
key2="value2"
key3="value3"
</snippet></ROW><ROW><id>14441442</id><snippet>=</snippet></ROW><ROW><id>14441682</id><snippet>ABCMeta</snippet></ROW><ROW><id>14441682</id><snippet>abstractproperty</snippet></ROW><ROW><id>14441682</id><snippet>abstractmethod</snippet></ROW><ROW><id>14441682</id><snippet>.__isabstractmethod__</snippet></ROW><ROW><id>14441682</id><snippet>ABCMeta</snippet></ROW><ROW><id>14441682</id><snippet>.__abstractmethods__</snippet></ROW><ROW><id>14441682</id><snippet>frozenset</snippet></ROW><ROW><id>14441682</id><snippet>object</snippet></ROW><ROW><id>14441682</id><snippet>.__abstractmethods__</snippet></ROW><ROW><id>14441682</id><snippet>&gt;&gt;&gt; from abc import *
&gt;&gt;&gt; class C:
...     __metaclass__ = ABCMeta
...     @abstractmethod
...     def abstract_method(self): pass
...     @abstractproperty
...     def abstract_property(self): return 'foo'
... 
&gt;&gt;&gt; C.__abstractmethods__
frozenset(['abstract_method', 'abstract_property'])
</snippet></ROW><ROW><id>14441682</id><snippet>ABCMeta</snippet></ROW><ROW><id>14441682</id><snippet>. __isabstractmethod__</snippet></ROW><ROW><id>14441682</id><snippet>__abstractmethods__</snippet></ROW><ROW><id>14441682</id><snippet>ABCMeta.__new__</snippet></ROW><ROW><id>14441682</id><snippet>cls = super(ABCMeta, mcls).__new__(mcls, name, bases, namespace)
# Compute set of abstract method names
abstracts = set(name
             for name, value in namespace.items()
             if getattr(value, "__isabstractmethod__", False))
for base in bases:
    for name in getattr(base, "__abstractmethods__", set()):
        value = getattr(cls, name, None)
        if getattr(value, "__isabstractmethod__", False):
            abstracts.add(name)
cls.__abstractmethods__ = frozenset(abstracts)
</snippet></ROW><ROW><id>14441682</id><snippet>ABCMeta</snippet></ROW><ROW><id>14441682</id><snippet>__new__</snippet></ROW><ROW><id>14441682</id><snippet>cls</snippet></ROW><ROW><id>14441683</id><snippet>def multiply(x, y):
    product = 0
    for i in xrange(x):
        product = add(product, y)
    return product
</snippet></ROW><ROW><id>14441771</id><snippet>ctxt.dict[0]
</snippet></ROW><ROW><id>14441878</id><snippet>import pylab

# datetimes = [datetime(...), ...]

pylab.plot([dt.date() for dt in datetimes],
           [dt.hour + dt.minute/60. for dt in datetimes],
           ',')
</snippet></ROW><ROW><id>14441913</id><snippet>get_comments()</snippet></ROW><ROW><id>14441913</id><snippet>render_template()</snippet></ROW><ROW><id>14441913</id><snippet>.s()</snippet></ROW><ROW><id>14441913</id><snippet>( get_comments.s(url) | render_template.s()).apply_async()
</snippet></ROW><ROW><id>14441913</id><snippet>@task
def render_template(comments_and_submission):
   comments, submission = comments_and_submission
</snippet></ROW><ROW><id>14441961</id><snippet>if libitem.startswith('__MACOSX/'):
  continue
</snippet></ROW><ROW><id>14442100</id><snippet>word.lower()</snippet></ROW><ROW><id>14442100</id><snippet>.split()</snippet></ROW><ROW><id>14442100</id><snippet>import re

with open('/Users/file.csv', 'rb') as file:
    for line in file:
        line = re.sub(" , [0-2][0-9]:[0-5][0-9]", "", line)
        line = re.sub("[,|!|.|?|\"]", "", line)
        words = [w.lower() for w in line.split()]
        for word in words:
            ...
</snippet></ROW><ROW><id>14442100</id><snippet>for</snippet></ROW><ROW><id>14442191</id><snippet>now_utc.astimezone(timezone('Asia/Tokyo'))
</snippet></ROW><ROW><id>14442208</id><snippet>while 1:
    try:
        url = queue.get_nowait()
    except Empty:
        # Check that all threads are done.
        if pool.free_count() == pool.size:
            break
    ...
</snippet></ROW><ROW><id>14442208</id><snippet>while 1:
    try:
        url = queue.get_nowait()
        # StopIteration mark that no url will be added to the queue anymore.
        if url is StopIteration:
             break
    except Empty:
        continue
    ...
pool.join()
</snippet></ROW><ROW><id>14442237</id><snippet>gca()</snippet></ROW><ROW><id>14442237</id><snippet>ax = gca()
ax.xaxis.set_major_formatter(FuncFormatter(myfunc)) 
</snippet></ROW><ROW><id>14442358</id><snippet>try:
    page = urllib2.urlopen(urls).read()
except httplib.IncompleteRead, e:
    page = e.partial
</snippet></ROW><ROW><id>14442536</id><snippet>email.header</snippet></ROW><ROW><id>14442536</id><snippet>&gt;&gt;&gt; from email.header import decode_header
&gt;&gt;&gt; bytes, encoding = decode_header('=?iso-8859-1?Q?CC_GM=5FEst=E1vel.xlsx?=')[0]
&gt;&gt;&gt; bytes.decode(encoding)
u'CC GM_Est\xe1vel.xlsx'
</snippet></ROW><ROW><id>14443156</id><snippet>super(..)</snippet></ROW><ROW><id>14443156</id><snippet>from django.core import validators

class StepTwoForm(forms.Form):
    number = forms.CharField()

    def __init__(self, *args, **kwargs):
        config = kwargs.pop('config', {})
        super(StepTwoForm, self).__init__(*args, **kwargs)
        if 'MAX_LENGTH' in config:
            validator = validators.MaxLengthValidator(config['MAX_LENGTH'])
            self.fields['number'].validators.append(validator)
</snippet></ROW><ROW><id>14443156</id><snippet>max_length</snippet></ROW><ROW><id>14443156</id><snippet>min_length</snippet></ROW><ROW><id>14443156</id><snippet>max_length</snippet></ROW><ROW><id>14443383</id><snippet>message_key = Message(name = self.request.get('name'), email : self.request.get('email')).put()
</snippet></ROW><ROW><id>14443493</id><snippet>def is_checked(self, driver, item):
  checked = driver.execute_script(("return document.getElementById('%s').checked") % item)
  return checked
</snippet></ROW><ROW><id>14443609</id><snippet>single pass LC</snippet></ROW><ROW><id>14443609</id><snippet>ordinal match</snippet></ROW><ROW><id>14443609</id><snippet>filter</snippet></ROW><ROW><id>14443609</id><snippet>regex</snippet></ROW><ROW><id>14443609</id><snippet>&gt;&gt;&gt; data = " lorem ipsum \xe2\x80\x9csianhill7 lorem ipsum"
&gt;&gt;&gt; ' '.join(e for e in data.split() if 31 &lt; ord(e[0]) &lt; 127)
'lorem ipsum lorem ipsum'
</snippet></ROW><ROW><id>14443621</id><snippet>SimpleXMLRPCServer</snippet></ROW><ROW><id>14443621</id><snippet>_marshaled_dispatch</snippet></ROW><ROW><id>14443621</id><snippet>Fault()</snippet></ROW><ROW><id>14443621</id><snippet>def _marshaled_dispatch(self, data, dispatch_method = None, path = None):
    try:
        params, method = xmlrpclib.loads(data)

        # generate response
        if dispatch_method is not None:
            response = dispatch_method(method, params)
        else:
            response = self._dispatch(method, params)
        # wrap response in a singleton tuple
        response = (response,)
        response = xmlrpclib.dumps(response, methodresponse=1,
                                   allow_none=self.allow_none, encoding=self.encoding)
    except:
        # report low level exception back to server
        # (each dispatcher should have handled their own
        # exceptions)
        exc_type, exc_value = sys.exc_info()[:2]
        response = xmlrpclib.dumps(
            xmlrpclib.Fault(1, "%s:%s" % (exc_type, exc_value)),
            encoding=self.encoding, allow_none=self.allow_none)
    return response
</snippet></ROW><ROW><id>14443621</id><snippet>SimpleXMLRPCServer.SimpleXMLRPCServer</snippet></ROW><ROW><id>14443621</id><snippet>import SimpleXMLRPCServer
import sys
import xmlrbclib

class VerboseFaultXMLRPCServer(SimpleXMLRPCServer.SimpleXMLRPCServer):
    def _marshaled_dispatch(self, data, dispatch_method = None, path = None):
        try:
            params, method = xmlrpclib.loads(data)

            # generate response
            if dispatch_method is not None:
                response = dispatch_method(method, params)
            else:
                response = self._dispatch(method, params)
            # wrap response in a singleton tuple
            response = (response,)
            response = xmlrpclib.dumps(response, methodresponse=1,
                                       allow_none=self.allow_none, encoding=self.encoding)
        except:
            # report low level exception back to server
            # (each dispatcher should have handled their own
            # exceptions)
            exc_type, exc_value, tb = sys.exc_info()
            while tb.tb_next is not None:
                tb = tb.tb_next  # find last frame of the traceback
            lineno = tb.tb_lineno
            code = tb.tb_frame.f_code
            filename = code.co_filename
            name = code.co_name
            response = xmlrpclib.dumps(
                xmlrpclib.Fault(1, "%s:%s FILENAME: %s LINE: %s NAME: %s" % (
                    exc_type, exc_value, filename, lineno, name)),
                encoding=self.encoding, allow_none=self.allow_none)
        return response
</snippet></ROW><ROW><id>14443621</id><snippet>VerboseFaultXMLRPCServer</snippet></ROW><ROW><id>14443621</id><snippet>SimpleXMLRPCServer.SimpleXMLRPCServer</snippet></ROW><ROW><id>14443797</id><snippet>.decode()</snippet></ROW><ROW><id>14443797</id><snippet>&gt;&gt;&gt; '\xe9'.decode('latin1')
u'\xe9'
</snippet></ROW><ROW><id>14443797</id><snippet>\xab</snippet></ROW><ROW><id>14443797</id><snippet>\u00ff</snippet></ROW><ROW><id>14443797</id><snippet>&gt;&gt;&gt; '\xe9'.decode('latin1') == u'\u00e9'
True
</snippet></ROW><ROW><id>14443797</id><snippet>&gt;&gt;&gt; '\xe9'.decode('latin1').encode('utf8')
'\xc3\xa9'
</snippet></ROW><ROW><id>14443846</id><snippet>from class1 import class1
</snippet></ROW><ROW><id>14443892</id><snippet>struct pcap_stat *ps</snippet></ROW><ROW><id>14443892</id><snippet>ctypes.POINTER(pcap_stat)</snippet></ROW><ROW><id>14443892</id><snippet>s = pcap_stat(); pcap_stats(handle, ctypes.byref(s))</snippet></ROW><ROW><id>14443979</id><snippet>import matlplotlib is plt

plt.plot([1000, 1001, 1002], [1, 2, 3])
plt.gca().get_xaxis().get_major_formatter().set_useOffset(False)
plt.draw()
</snippet></ROW><ROW><id>14443979</id><snippet>axes</snippet></ROW><ROW><id>14443979</id><snippet>axis</snippet></ROW><ROW><id>14443979</id><snippet>useOffset</snippet></ROW><ROW><id>14444066</id><snippet>all</snippet></ROW><ROW><id>14444066</id><snippet>s_list2 = set(list2)
all_present = all(l in s_list2 for l in list1)
</snippet></ROW><ROW><id>14444066</id><snippet>In [4]: l1 = range(100)
In [5]: l2 = range(1000)
In [6]: random.shuffle(l1)
In [9]: random.shuffle(l2)
In [20]: %timeit s2 = set(l2); all(l in s2 for l in l1)
10000 loops, best of 3: 26.4 us per loop
In [21]: %timeit s1 = set(l1); s2 = set(l2); s1.issubset(s2)
10000 loops, best of 3: 25.3 us per loop
</snippet></ROW><ROW><id>14444066</id><snippet>In [2]: l1 = range(1000)
In [3]: l2 = range(100)
In [4]: random.shuffle(l1)
In [5]: random.shuffle(l2)
In [6]: sl2 = set(l2)
In [8]: %timeit ss = set(l2); set(l1) &amp; ss == ss
10000 loops, best of 3: 27.8 us per loop
In [10]: %timeit s1 = set(l1); s2 = set(l2); s2.issubset(s1)
10000 loops, best of 3: 24.7 us per loop
In [11]: %timeit sl2 = set(l2); all(l in sl2 for l in l1)
100000 loops, best of 3: 3.58 us per loop
</snippet></ROW><ROW><id>14444066</id><snippet>issubset</snippet></ROW><ROW><id>14444066</id><snippet>In [7]: l1 = range(10)
In [8]: l2 = range(10000)
In [9]: %timeit sl2 = set(l2); all(l in sl2 for l in l1)
1000 loops, best of 3: 230 us per loop
In [10]: %timeit sl1 = set(l1); all(l in sl1 for l in l2)
1000000 loops, best of 3: 1.45 us per loop
In [11]: %timeit s1 = set(l1); s2 = set(l2); s1.issubset(s2)
1000 loops, best of 3: 228 us per loop
In [12]: %timeit s1 = set(l1); s2 = set(l2); s2.issubset(s1)
1000 loops, best of 3: 228 us per loop
</snippet></ROW><ROW><id>14444231</id><snippet>csv</snippet></ROW><ROW><id>14444231</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; with open('fake_csv.csv', 'r') as f:
...     reader = csv.DictReader(f)
...     my_rows = [row for row in reader]
...     
&gt;&gt;&gt; my_rows
[{'title1': 'something', 'title2': 'another'}, {'title1': 'cool', 'title2': 'stuff'}]
</snippet></ROW><ROW><id>14444231</id><snippet>DictReader</snippet></ROW><ROW><id>14444231</id><snippet>with</snippet></ROW><ROW><id>14444231</id><snippet>my_rows = [row for row in reader]
</snippet></ROW><ROW><id>14444231</id><snippet>reader</snippet></ROW><ROW><id>14444231</id><snippet>title1,title2
something,another
cool,stuff
</snippet></ROW><ROW><id>14444321</id><snippet>instance.__dict__['title_fr']</snippet></ROW><ROW><id>14444321</id><snippet>fallback_values</snippet></ROW><ROW><id>14444464</id><snippet>In [1]: import sys

In [2]: import urllib2

In [3]: import networkx as nx

In [4]: data = urllib2.urlopen('http://gexf.net/data/viz.gexf')

In [5]: G = nx.read_gexf(data)

In [6]: print G.node['a']
{'viz': {'color': {'a': 0.6, 'r': 239, 'b': 66, 'g': 173}, 'position': {'y': 40.109245, 'x': 15.783598, 'z': 0.0}, 'size': 2.0375757}, 'label': 'glossy'}

In [7]: G.node['a']['viz']['position']['x']=10

In [8]: G.node['a']['viz']['position']['y']=20

In [9]: print G.node['a']
{'viz': {'color': {'a': 0.6, 'r': 239, 'b': 66, 'g': 173}, 'position': {'y': 20, 'x': 10, 'z': 0.0}, 'size': 2.0375757}, 'label': 'glossy'}

In [10]: nx.write_gexf(G,sys.stdout)
&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;gexf xmlns:ns0="http://www.gexf.net/1.1draft/viz" version="1.1" xmlns="http://www.gexf.net/1.1draft" xmlns:viz="http://www.gexf.net/1.1draft/viz" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;graph defaultedgetype="undirected" mode="static"&gt;
    &lt;nodes&gt;
      &lt;node id="a" label="glossy"&gt;
        &lt;ns0:color b="66" g="173" r="239" /&gt;
        &lt;ns0:size value="2.0375757" /&gt;
        &lt;ns0:position x="10" y="20" z="0.0" /&gt;
      &lt;/node&gt;
    &lt;/nodes&gt;
    &lt;edges /&gt;
  &lt;/graph&gt;
&lt;/gexf&gt;
</snippet></ROW><ROW><id>14444545</id><snippet>//</snippet></ROW><ROW><id>14444545</id><snippet>/</snippet></ROW><ROW><id>14444545</id><snippet>/</snippet></ROW><ROW><id>14444545</id><snippet>//</snippet></ROW><ROW><id>14444545</id><snippet>from __future__ import division</snippet></ROW><ROW><id>14444572</id><snippet>tac logfile.log | while read line; do echo ${line};
    [[ "${line}" =~ [0-9]{4}(-[0-9]{2}){2}\ [0-9]{2}(:[0-9]{2}){2} ]] &amp;&amp; break;
done | tac
</snippet></ROW><ROW><id>14444572</id><snippet>tac</snippet></ROW><ROW><id>14444743</id><snippet>fill</snippet></ROW><ROW><id>14444743</id><snippet>fill</snippet></ROW><ROW><id>14444743</id><snippet>fill</snippet></ROW><ROW><id>14444743</id><snippet>canvas.paste(img, (0,0), img)</snippet></ROW><ROW><id>14444743</id><snippet>temp_canvas.paste(text_canvas, (0,0), text_canvas)</snippet></ROW><ROW><id>14444743</id><snippet>temp_canvas.paste("#000000", (0,0), text_canvas)</snippet></ROW><ROW><id>14444756</id><snippet>enpkg</snippet></ROW><ROW><id>14444756</id><snippet>enpkg -s &lt;packagename&gt;</snippet></ROW><ROW><id>14444756</id><snippet>enpkg enstaller</snippet></ROW><ROW><id>14444756</id><snippet>enpkg --userpass</snippet></ROW><ROW><id>14444756</id><snippet>enpkg &lt;packagename&gt;</snippet></ROW><ROW><id>14444756</id><snippet>enpkg pip</snippet></ROW><ROW><id>14444756</id><snippet>python setup.py install</snippet></ROW><ROW><id>14444756</id><snippet>enpkg --remove &lt;packagename&gt;</snippet></ROW><ROW><id>14444811</id><snippet>h2</snippet></ROW><ROW><id>14444811</id><snippet>.next_sibling</snippet></ROW><ROW><id>14444811</id><snippet>h2</snippet></ROW><ROW><id>14444811</id><snippet>soup = BeautifulSoup(open("test.html"))
pages = []
h2tags = soup.find_all('h2')

def next_element(elem):
    while elem is not None:
        # Find next element, skip NavigableString objects
        elem = elem.next_sibling
        if hasattr(elem, 'name'):
            return elem

for h2tag in h2tags:
    page = [str(h2tag)]
    elem = next_element(h2tag)
    while elem and elem.name != 'h2':
        page.append(str(elem))
        elem = next_element(elem)
    pages.append('\n'.join(page))
</snippet></ROW><ROW><id>14444811</id><snippet>&gt;&gt;&gt; pages
['&lt;h2&gt;first header&lt;/h2&gt;\n&lt;p&gt;\n&lt;!-- ..some text images --&gt;\n&lt;/p&gt;\n&lt;h3&gt;some header&lt;/h3&gt;\n&lt;p&gt;\n&lt;!-- ..some image --&gt;\n&lt;/p&gt;\n&lt;p&gt;\n&lt;!-- ..some text --&gt;\n&lt;/p&gt;', '&lt;h2&gt;second header&lt;/h2&gt;\n&lt;p&gt;\n&lt;!-- ..again some text and images --&gt;\n&lt;/p&gt;']
&gt;&gt;&gt; print pages[0]
&lt;h2&gt;first header&lt;/h2&gt;
&lt;p&gt;
&lt;!-- ..some text images --&gt;
&lt;/p&gt;
&lt;h3&gt;some header&lt;/h3&gt;
&lt;p&gt;
&lt;!-- ..some image --&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;!-- ..some text --&gt;
&lt;/p&gt;
</snippet></ROW><ROW><id>14444950</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>14444950</id><snippet>from xml.etree import ElementTree as ET

# `ET.fromstring()` expects a string containing XML to parse.
# tree = ET.fromstring(solrdata)  
# Use `ET.parse()` for a filename or open file object, such as returned by urllib2:
ET.parse(urllib2.urlopen(url))

for doc in tree.findall('.//doc'):
    for elem in doc:
        print elem.attrib['name'], elem.text
</snippet></ROW><ROW><id>14445064</id><snippet>import web

class MyApplication(web.application):
    def run(self, port=8080, *middleware):
        func = self.wsgifunc(*middleware)
        return web.httpserver.runsimple(func, ('0.0.0.0', port))

if __name__ == "__main__":
    app = MyApplication(urls, globals())
    app.run(port=8888)
</snippet></ROW><ROW><id>14445112</id><snippet>HOME_URL = "localhost:8080"
def initialize():
      #global HOME_URL #You don't need this
      home_url = HOME_URL
      with open("urls.txt", 'rb') as f:
           #Constants are not supposed to mutate
           home_url = json.load(f.read())['urls']
</snippet></ROW><ROW><id>14445246</id><snippet>class FrozenSetDict(dict):
    def __setitem__(self,idx,value):
        try:
            dict.__setitem__(self,frozenset(idx),value)
        except TypeError:
            dict.__setitem__(self,frozenset((idx,)),value)

d = FrozenSetDict()
d[1,2,3] = 4
d[1] = 5
print d
</snippet></ROW><ROW><id>14445246</id><snippet>{frozenset([1, 2, 3]): 4, frozenset([1]): 5}
</snippet></ROW><ROW><id>14445246</id><snippet>__getitem__</snippet></ROW><ROW><id>14445246</id><snippet>__setitem__</snippet></ROW><ROW><id>14445246</id><snippet>__getitem__</snippet></ROW><ROW><id>14445246</id><snippet>frozenset</snippet></ROW><ROW><id>14445246</id><snippet>#I don't like the name of this class -- I'm open to suggestions :)
class FrozenSetProxy(object):
    def __init__(self,obj):
        self.obj = obj

    def __setitem__(self,idx,value):
        try:
            self.obj[frozenset(idx)] = value
        except TypeError:
            self.obj[frozenset((idx,))] = value

    def __getitem__(self,idx):
        try:
            return self.obj[frozenset(idx)]
        except TypeError:
            return self.obj[frozenset((idx,))]

d = dict()
F = FrozenSetProxy(d)
F[1,2,3] = 4
F[1] = 5
print d
print F[1]
</snippet></ROW><ROW><id>14445292</id><snippet>matplotlib.cbook.unicode_safe()</snippet></ROW><ROW><id>14445292</id><snippet>DateFormatter</snippet></ROW><ROW><id>14445292</id><snippet>strftime</snippet></ROW><ROW><id>14445292</id><snippet>locale.setlocale(locale.LC_ALL,'en_US')
</snippet></ROW><ROW><id>14445292</id><snippet>DateFormatter</snippet></ROW><ROW><id>14445292</id><snippet>cbook.unicode_safe()</snippet></ROW><ROW><id>14445292</id><snippet>return cbook.unicode_safe(dt.strftime(fmt))
</snippet></ROW><ROW><id>14445292</id><snippet>return dt.strftime(fmt)
</snippet></ROW><ROW><id>14445299</id><snippet>apt-cache depends python-pygame</snippet></ROW><ROW><id>14445401</id><snippet>from shutil import move

move(output_file, input_file)
</snippet></ROW><ROW><id>14445401</id><snippet>import os, os.path, re
from shutil import move

path = "D:\python-test"
myfiles = os.listdir(path)

REGEXES = [(re.compile(r'dog'), 'cat'),
           (re.compile(r'123'), '789')]
for f in myfiles:

file_name, file_extension = os.path.splitext(f)
generated_output_file = file_name + "_regex" + file_extension

if file_extension in ('.txt', '.doc', '.odt', '.htm', '.html', '.java'):

    input_file = os.path.join(path, f)
    output_file = os.path.join(path, generated_output_file)

    with open(input_file, "r") as fi, open(output_file, "w") as fo:
        for line in fi:
            for search, replace in REGEXES:
                line = search.sub(replace, line)
            fo.write(line)

move(output_file, input_file)
</snippet></ROW><ROW><id>14445692</id><snippet>sorted(domains)</snippet></ROW><ROW><id>14445692</id><snippet>for key in sorted(domains):
    print key
</snippet></ROW><ROW><id>14445692</id><snippet>de
hu
no
sk
us
</snippet></ROW><ROW><id>14445692</id><snippet>sorted(domains.items(), key = lambda(k, v): (v, k))</snippet></ROW><ROW><id>14445862</id><snippet>wave = np.zeros((2, 2, 2), np.float)

([[[0., 0.],
   [0., 0.]],
  [[0., 0.],
   [0., 0.]]])
</snippet></ROW><ROW><id>14445862</id><snippet>([[ 1., 2.],
  [ 3., 4.]])
</snippet></ROW><ROW><id>14445862</id><snippet>([[[1., 2.],
   [3., 4.]],
  [[0., 0.],
   [0., 0.]]])
</snippet></ROW><ROW><id>14445862</id><snippet>for</snippet></ROW><ROW><id>14445862</id><snippet>for z in range(nsteps):
    waves_sequence[z] = make_wave_snapshot(size,wavelength,(2*math.pi*z/nsteps))
</snippet></ROW><ROW><id>14446101</id><snippet>csv.reader</snippet></ROW><ROW><id>14446101</id><snippet>import csv
import sys

out = open(sys.argv[2], 'w')
mil = float(sys.argv[3])

out.write('chr\tstart\tend\tfeature\t'+sys.argv[2]+'\n')
with open(sys.argv[1], 'rb') as f:
    reader = csv.reader(f, delimiter=',')
    headers = reader.next()    # Consider headers separately
    for line in reader:
        line[1] = str(int(line[1])/mil)
        out.write('gi|255767013|ref|NC_000964.3|\t'+line[0]+'\t'+line[0]+'\t\t'+line[1]+'\n')
out.close()
</snippet></ROW><ROW><id>14446101</id><snippet>python test.py test.csv test.igv 5 &amp;&amp; cat test.igv</snippet></ROW><ROW><id>14446111</id><snippet>for track in recording['tracks']:
</snippet></ROW><ROW><id>14446111</id><snippet>def find_it(json, duration):
  for result in json['results']:
      for recording in result['recordings']:
          for track in recording['tracks']:
              track_artist = ''
              for artist in track['artists']:
                  try:
                      track_artist += repr(artist['name']) + ' '
                  except:
                      track_artist = ''
              #print str(track['duration']) + '-' + track['medium']['release']['title'] + '-' + track['title'] + '-' + track_artist
              if str(track['duration']) == str(duration):
                return track, track_artist
  return None, None

track, track_artist = find_it(json, duration)
print 'Matched:' + str(track['duration']) + '-' + track['medium']['release']['title'] + '-' + track['title'] + '-' + track_artist
</snippet></ROW><ROW><id>14446207</id><snippet>import timeit

def append2x(foo):
    foo.append(1)
    foo.append(1)

def extend_lst(foo):
    foo.extend([1,1])

def extend_tup(foo):
    foo.extend((1,1))


l1 = []
l2 = []
l3 = []

print timeit.timeit('append2x(l1)',setup = 'from __main__ import append2x,l1')
print timeit.timeit('extend_lst(l2)',setup = 'from __main__ import extend_lst,l2')
print timeit.timeit('extend_tup(l3)',setup = 'from __main__ import extend_tup,l3')
</snippet></ROW><ROW><id>14446207</id><snippet>0.520906925201  #append
0.602569103241  #extend-list
0.357008934021  #extend-tuple
</snippet></ROW><ROW><id>14446207</id><snippet>0.307395935059  #append
0.319436073303  #extend-list
0.238317012787  #extend-tuple
</snippet></ROW><ROW><id>14446207</id><snippet>extend</snippet></ROW><ROW><id>14446207</id><snippet>append</snippet></ROW><ROW><id>14446207</id><snippet>list</snippet></ROW><ROW><id>14446207</id><snippet>tuple</snippet></ROW><ROW><id>14446207</id><snippet>def extend_lst(foo):  
    v = 1
    foo.extend([v,v]) 

def extend_tup(foo):
    v = 1
    foo.extend((v,v))
</snippet></ROW><ROW><id>14446207</id><snippet>0.297003984451  #append
0.344678163528  #extend-list
0.292304992676  #extend-tuple
</snippet></ROW><ROW><id>14446207</id><snippet>tuple</snippet></ROW><ROW><id>14446207</id><snippet>append</snippet></ROW><ROW><id>14446207</id><snippet>tuple</snippet></ROW><ROW><id>14446207</id><snippet>list</snippet></ROW><ROW><id>14446207</id><snippet>list</snippet></ROW><ROW><id>14446207</id><snippet>tuple</snippet></ROW><ROW><id>14446504</id><snippet>       (re.compile(r'(if)(.*)(\r?\n)(\s*)(logger.info)(.*)'), r'\1\2')]
                                                              ^ here
</snippet></ROW><ROW><id>14446504</id><snippet>\1</snippet></ROW><ROW><id>14446504</id><snippet>\2</snippet></ROW><ROW><id>14446504</id><snippet>import re

line = """if( List != null ) {
   logger.info( "List is not null" );
   fieldSetContainerList.clear();
}
"""

REGEXES = [(re.compile(r'cat'), 'cat2'),
           (re.compile(r'(if)(.*)(\r?\n)(\s*)(logger.info)(.*)'), r'\1\2')]

for search, replace in REGEXES:
    line = search.sub(replace, line)
print line
</snippet></ROW><ROW><id>14446504</id><snippet>if( List != null ) {
   fieldSetContainerList.clear();
}
</snippet></ROW><ROW><id>14446649</id><snippet>a.xpath('.//span[contains(concat(" ", @class, " "), " cut ")]')
</snippet></ROW><ROW><id>14446687</id><snippet>[Python 2.6.6]
&gt;&gt;&gt; foo = object()
&gt;&gt;&gt; hasattr(foo, 'o')
False
&gt;&gt;&gt; hasattr(foo, u'o')
False
&gt;&gt;&gt; hasattr(foo, u'\xf6')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\xf6' in position 0:
ordinal not in range(128)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>14446735</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; html = urllib2.urlopen("http://craftstud.io/builds").read()
&gt;&gt;&gt; re.search(r"Server \d+\.\d+\.\d+\.\d+", html).group()
'Server 0.1.24.1'
</snippet></ROW><ROW><id>14446735</id><snippet>pip install BeautifulSoup4</snippet></ROW><ROW><id>14446735</id><snippet>pip install BeautifulSoup</snippet></ROW><ROW><id>14447119</id><snippet>join</snippet></ROW><ROW><id>14447119</id><snippet>join</snippet></ROW><ROW><id>14447119</id><snippet>def gen():
    yield 'A'
    yield 'B'
    yield 'C'

&gt;&gt;&gt; g = gen()
&gt;&gt;&gt; print g
&lt;generator object gen at 0x0000000004BB9090&gt;
&gt;&gt;&gt; print ''.join(g)
ABC
</snippet></ROW><ROW><id>14447119</id><snippet>for</snippet></ROW><ROW><id>14447119</id><snippet>next</snippet></ROW><ROW><id>14447119</id><snippet>str.join</snippet></ROW><ROW><id>14447140</id><snippet>setup.py</snippet></ROW><ROW><id>14447140</id><snippet>  packages=['social_auth',
            'social_auth.management',
            'social_auth.management.commands',
            'social_auth.backends',
            'social_auth.backends.contrib',
            'social_auth.backends.pipeline',
            'social_auth.migrations',
            'social_auth.db'],
</snippet></ROW><ROW><id>14447270</id><snippet>@app.route('/&lt;path:path&gt;')
def catch_all(path):
    if path.endswith('/'):
        return handle_folder(path)
    else:
        return handle_file(path)
</snippet></ROW><ROW><id>14447375</id><snippet>In [39]: lis=["012345", "MYNAME" "Mon", "A", 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]

In [40]: k=[lis[:] for _ in xrange(80000)]

In [41]: k.__sizeof__()
Out[41]: 325664

In [42]: sys.getsizeof(k)  #after gc_head
Out[42]: 325676
</snippet></ROW><ROW><id>14447375</id><snippet>sysmodule.c</snippet></ROW><ROW><id>14447375</id><snippet>__sizeof__</snippet></ROW><ROW><id>14447375</id><snippet>   837   method = _PyObject_LookupSpecial(o, &amp;PyId___sizeof__);   
   838     if (method == NULL) {
   839         if (!PyErr_Occurred())
   840             PyErr_Format(PyExc_TypeError,
   841                          "Type %.100s doesn't define __sizeof__",
   842                          Py_TYPE(o)-&gt;tp_name);
   843     }
   844     else {
   845         res = PyObject_CallFunctionObjArgs(method, NULL);
   846         Py_DECREF(method);
   847     }
</snippet></ROW><ROW><id>14447375</id><snippet>gc</snippet></ROW><ROW><id>14447375</id><snippet>   860     /* add gc_head size */
   861     if (PyObject_IS_GC(o)) {
   862         PyObject *tmp = res;
   863         res = PyNumber_Add(tmp, gc_head_size);
   864         Py_DECREF(tmp);
   865     }
   866     return res;
   867 }
</snippet></ROW><ROW><id>14447375</id><snippet>recursive sizeof recipe</snippet></ROW><ROW><id>14447375</id><snippet>In [17]: total_size(k)  #from recursive sizeof recipe
Out[17]: 13125767

In [18]: sum(y.__sizeof__() for x in k for y in x)
Out[18]: 34160000
</snippet></ROW><ROW><id>14447581</id><snippet>def find_overlap(a, b):
    i = 0
    j = 0
    len_a = len(a)
    len_b = len(b)
    in_overlap = False
    best_count = 0
    best_start = (-1, -1)
    best_end = (-1, -1)

    while i &lt; len_a and j &lt; len_b:

        if a[i] == b[j]:
            if in_overlap:
                # Keep track of the length of the overlapping region
                count += 1
            else:
                # This is a new overlapping region, set count to 1 record start
                in_overlap = True
                count = 1
                start = (i, j)
            # Step indicies
            i += 1
            j += 1
            end = (i, j)
            if count &gt; best_count:
                # Is this the longest overlapping region so far?
                best_count = count
                best_start = start
                best_end = end
        # If not in a an overlapping region, only step one index
        elif a[i] &lt; b[j]:
            in_overlap = False
            i += 1
        elif b[j] &lt; a[i]:
            in_overlap = False
            j += 1
        else:
            # This should never happen
            raise
    # End of loop

    return best_start, best_end
</snippet></ROW><ROW><id>14447581</id><snippet>a=[0, 1, 2]</snippet></ROW><ROW><id>14447581</id><snippet>b=[0, 1, 4]</snippet></ROW><ROW><id>14447581</id><snippet>start=(0, 0)</snippet></ROW><ROW><id>14447581</id><snippet>end=(2, 2)</snippet></ROW><ROW><id>14447669</id><snippet>func()</snippet></ROW><ROW><id>14447669</id><snippet>walk_for_side_effects</snippet></ROW><ROW><id>14447669</id><snippet>map()</snippet></ROW><ROW><id>14447669</id><snippet>func()</snippet></ROW><ROW><id>14447808</id><snippet>csv</snippet></ROW><ROW><id>14447851</id><snippet>re.sub</snippet></ROW><ROW><id>14447851</id><snippet>re.sub(pattern, repl, string, count=0, flags=0)
</snippet></ROW><ROW><id>14447851</id><snippet>repl</snippet></ROW><ROW><id>14447851</id><snippet>In [1]: import re

In [2]: def repl(m):
   ...:     return '#' * len(m.group())
   ...: 

In [3]: re.sub(r'&lt;[^&lt;&gt;]*?&gt;', repl,
   ...:     '&lt;o:LastSaved&gt;2013-01-21T21:15:00Z&lt;/o:LastSaved&gt;')
Out[3]: '#############2013-01-21T21:15:00Z##############'
</snippet></ROW><ROW><id>14447947</id><snippet>with open("input.csv", "r") as inp, open("output","w") as out:
    inpList = inp.read().split()
    out.write('\n'.join(el for el in inpList if ';cr;' in el))
</snippet></ROW><ROW><id>14447947</id><snippet>from urllib2 import urlopen
inp = urlopen("&lt;URL&gt;")
with open("output","w") as out:
    inpList = inp.read().split()
    out.write('\n'.join(el for el in inpList if ';cr;' in el))
</snippet></ROW><ROW><id>14447947</id><snippet>read()</snippet></ROW><ROW><id>14447947</id><snippet>split()</snippet></ROW><ROW><id>14447947</id><snippet>'\n'.join([elem1,...])</snippet></ROW><ROW><id>14447947</id><snippet>write(str)</snippet></ROW><ROW><id>14448063</id><snippet>sys.exit</snippet></ROW><ROW><id>14448063</id><snippet>bash</snippet></ROW><ROW><id>14448063</id><snippet>$?</snippet></ROW><ROW><id>14448063</id><snippet>if python script.py; then
    echo "Exit code of 0, success"
else
    echo "Exit code of $?, failure"
fi
</snippet></ROW><ROW><id>14448063</id><snippet>if</snippet></ROW><ROW><id>14448063</id><snippet>python script.py
if [[ $? = 0 ]]; then
    echo "success"
else
    echo "failure: $?"
fi
</snippet></ROW><ROW><id>14448171</id><snippet>BODYRESPONSE</snippet></ROW><ROW><id>14448171</id><snippet>['IMAGE', 'JPEG', ['NAME', 'image001.jpg'], '&lt;image001.jpg@01CDE914.6E62F850&gt;', None, 'BASE64', 5318, None, None, None]
</snippet></ROW><ROW><id>14448171</id><snippet>image/jpeg</snippet></ROW><ROW><id>14448171</id><snippet>&gt;&gt;&gt; imagedata = datastring.decode('base64')
&gt;&gt;&gt; imagedata[:10]
'\xff\xd8\xff\xe0\x00\x10JFIF'
</snippet></ROW><ROW><id>14448247</id><snippet>PATH</snippet></ROW><ROW><id>14448247</id><snippet>C:\Python27</snippet></ROW><ROW><id>14448247</id><snippet>cd Django-1.4.3
C:\Python27\python.exe setup.py install
</snippet></ROW><ROW><id>14448344</id><snippet>&gt;&gt;&gt; s = """bla bla bla infor-
... mation bla bla bla"""
&gt;&gt;&gt; s.replace('-\n','')
'bla bla bla information bla bla bla'
</snippet></ROW><ROW><id>14448388</id><snippet>digest</snippet></ROW><ROW><id>14448388</id><snippet>hexdigest</snippet></ROW><ROW><id>14448388</id><snippet>hexdigest</snippet></ROW><ROW><id>14448432</id><snippet>A = numpy.minimum(B, B[:,k] + B[k,:])
</snippet></ROW><ROW><id>14448432</id><snippet>for k in range(num_v):
   B[:] = A[:]
   C=[B[i][k]+B[k][i] for i in range(num_v)]
   for i in range(num_v):
      for j in range(num_v):
         A[i][j] = min(B[i][j], C[j])
</snippet></ROW><ROW><id>14448432</id><snippet>A = numpy.matrix(A)
for k in range(num_v):
    A = numpy.minimum(A, A[:,k] + A[k,:])
</snippet></ROW><ROW><id>14448762</id><snippet>\n</snippet></ROW><ROW><id>14448762</id><snippet>\n</snippet></ROW><ROW><id>14448762</id><snippet>"echo 'hello'"</snippet></ROW><ROW><id>14448762</id><snippet>csh</snippet></ROW><ROW><id>14448762</id><snippet>bash</snippet></ROW><ROW><id>14448762</id><snippet>csh</snippet></ROW><ROW><id>14448762</id><snippet>diff</snippet></ROW><ROW><id>14448762</id><snippet>$ cat blah-grabme-12.csh 
#!/bin/csh -f
echo 'hello'$ cp blah-grabme-12.csh blah-grabme-12.csh.orig
$ vim blah-grabme-12.csh
┌────────────────────────────────────────────────────────────────────────────────┐
│#!/bin/csh -f                                                                   │
│echo 'hello'                                                                    │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│~                                                                               │
│:wq❚                                                                            │
└────────────────────────────────────────────────────────────────────────────────┘
$ diff -u blah-grabme-12.csh.orig blah-grabme-12.csh.orig
--- blah-grabme-12.csh.orig
+++ blah-grabme-12.csh
@@ -1,2 +1,2 @@
 #!/bin/csh -f
-echo 'hello'
\ No newline at end of file
+echo 'hello'
</snippet></ROW><ROW><id>14448762</id><snippet>~/.vimrc</snippet></ROW><ROW><id>14448762</id><snippet>:help 'eol'</snippet></ROW><ROW><id>14448762</id><snippet>system(filename)</snippet></ROW><ROW><id>14448762</id><snippet>filename</snippet></ROW><ROW><id>14448762</id><snippet>/</snippet></ROW><ROW><id>14448762</id><snippet>.</snippet></ROW><ROW><id>14448762</id><snippet>$PATH</snippet></ROW><ROW><id>14448762</id><snippet>os.open()</snippet></ROW><ROW><id>14448762</id><snippet>open()</snippet></ROW><ROW><id>14448762</id><snippet>import os
import os.path

grabmeName = 'blah-grabme-12.csh'

with os.fdopen(os.open(grabmeName, os.O_WRONLY | os.O_CREAT, 0700), 'w') as f:
    f.write("#!/bin/csh -f\n")
    f.write("echo 'hello'\n")
os.system(os.path.abspath(grabmeName))
</snippet></ROW><ROW><id>14448864</id><snippet>var = 0
def main(number):
    print number
    inc = raw_input("Want to increase your variable?") # Or input() if python 3.x
    if inc == "yes":
        number += 1
        return main(number)
    if inc == "no":
        return number

var = main(var)
print var
</snippet></ROW><ROW><id>14448864</id><snippet>python file.py
0
Want to increase your variable?yes
1
Want to increase your variable?yes
2
Want to increase your variable?no
2 #result of printing var at the end
</snippet></ROW><ROW><id>14448953</id><snippet>Processing by AttachmentsController#upload as XML</snippet></ROW><ROW><id>14448953</id><snippet>http://redmine/uploads</snippet></ROW><ROW><id>14448953</id><snippet>http://redmine/uploads.xml</snippet></ROW><ROW><id>14448953</id><snippet>import requests

data = open('./x.png', 'rb').read()
res = requests.post(url='http://httpbin.org/post',
                    data=data,
                    headers={'Content-Type': 'application/octet-stream'})

# let's check if what we sent is what we intended to send...
import json
import base64

assert base64.b64decode(res.json()['data'][len('data:application/octet-stream;base64,'):]) == data
</snippet></ROW><ROW><id>14448953</id><snippet>import requests

data = 'test data'
res = requests.post(url='http://localhost:8888',
                    data=data,
                    headers={'Content-Type': 'application/octet-stream'})
</snippet></ROW><ROW><id>14448953</id><snippet>POST http://localhost:8888/ HTTP/1.1
Host: localhost:8888
Content-Length: 9
Content-Type: application/octet-stream
Accept-Encoding: gzip, deflate, compress
Accept: */*
User-Agent: python-requests/1.0.4 CPython/2.7.3 Windows/Vista

test data
</snippet></ROW><ROW><id>14448953</id><snippet>import urllib2

data = 'test data'    
req = urllib2.Request('http://localhost:8888', data)
req.add_header('Content-Length', '%d' % len(data))
req.add_header('Content-Type', 'application/octet-stream')
res = urllib2.urlopen(req)
</snippet></ROW><ROW><id>14448953</id><snippet>POST http://localhost:8888/ HTTP/1.1
Accept-Encoding: identity
Content-Length: 9
Host: localhost:8888
Content-Type: application/octet-stream
Connection: close
User-Agent: Python-urllib/2.7

test data
</snippet></ROW><ROW><id>14448953</id><snippet>User-Agent</snippet></ROW><ROW><id>14449036</id><snippet>https://api.github.com/users/repos</snippet></ROW><ROW><id>14449041</id><snippet>deal_with_input</snippet></ROW><ROW><id>14449041</id><snippet>editingFinished</snippet></ROW><ROW><id>14449041</id><snippet>class main_window(QTextDisplay):
    def __init__(self,input_widget,parent=self,*arg,**kwargs):
        QTextDisplay.__init__(self,parent=parent) # and what ever other args you use
        self.input_widget = input_widget

        self.input_widget.editingFinished.connect(self.proc_input)

        ## what ever other set up you do

    @QtCore.Slot()
    def proc_input(self):
        input_str = self.input_widget.text()
        if input_str = '':
            return
        self.input_widget.clear()

        # do what ever it is you do with the input text, update the display
</snippet></ROW><ROW><id>14449041</id><snippet>QLineEdit</snippet></ROW><ROW><id>14449041</id><snippet>editingFinished</snippet></ROW><ROW><id>14449041</id><snippet>Slot</snippet></ROW><ROW><id>14449151</id><snippet>In [1]: from bs4 import BeautifulSoup

In [2]: html = """
&lt;option value="1b4f4aed-cf1f-4b39-ae27"&gt;Foo&lt;/option&gt;
&lt;option value="1a05f93f-dd51-449d-b039"&gt;Bar&lt;/option&gt;
&lt;option value="f62d2d29-29fc-4f7c-9331"&gt;Bacon&lt;/option&gt;
"""

In [3]: soup = BeautifulSoup(html)

In [4]: for option in soup.find_all('option'):
   ...:     print option.text
   ...:     
Foo
Bar
Bacon
</snippet></ROW><ROW><id>14449151</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>14449151</id><snippet>soup</snippet></ROW><ROW><id>14449151</id><snippet>find_all</snippet></ROW><ROW><id>14449151</id><snippet>option</snippet></ROW><ROW><id>14449151</id><snippet>Tag</snippet></ROW><ROW><id>14449151</id><snippet>.text</snippet></ROW><ROW><id>14449151</id><snippet>Tag</snippet></ROW><ROW><id>14449350</id><snippet>len</snippet></ROW><ROW><id>14449350</id><snippet>from rq import Queue

queue = Queue()
len(queue.jobs)
</snippet></ROW><ROW><id>14449538</id><snippet>options</snippet></ROW><ROW><id>14449538</id><snippet>max_rows</snippet></ROW><ROW><id>14449538</id><snippet>max_columns</snippet></ROW><ROW><id>14449538</id><snippet>set_options</snippet></ROW><ROW><id>14449538</id><snippet>In [11]: pd.options.display.max_columns
Out[11]: 20
</snippet></ROW><ROW><id>14449538</id><snippet>set_option</snippet></ROW><ROW><id>14449538</id><snippet>In [12]: pd.set_option('display.max_columns', 10)
</snippet></ROW><ROW><id>14449538</id><snippet>In [17]: df = pd.DataFrame(pd.np.arange(10).reshape(5,2))

In [18]: pd.set_option('display.max_rows', 4)

In [19]: df
Out[19]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 5 entries, 0 to 4
Data columns:
0    5  non-null values
1    5  non-null values
dtypes: int64(2
</snippet></ROW><ROW><id>14450056</id><snippet>#example figure1
ax1.plot(range(2),range(2),linewidth=2)
ax1.minorticks_on()
ax1.tick_params('both', length=20, width=2, which='major')
ax1.tick_params('both', length=10, width=1, which='minor')
</snippet></ROW><ROW><id>14450056</id><snippet>ax2</snippet></ROW><ROW><id>14450336</id><snippet>DenFrame.Hper</snippet></ROW><ROW><id>14450336</id><snippet>DenFrame.Vper</snippet></ROW><ROW><id>14450336</id><snippet>dtype</snippet></ROW><ROW><id>14450336</id><snippet>In [11]: df.Hper.dtype
Out[11]: dtype('object')
</snippet></ROW><ROW><id>14450336</id><snippet>In [12]: DenFrame.Hper.map(type).unique()
Out[12]: [&lt;type 'float'&gt; &lt;type 'str'&gt;]
</snippet></ROW><ROW><id>14450336</id><snippet>DenFrame[DenFrame.Hper.map(type) == str]
</snippet></ROW><ROW><id>14450336</id><snippet>DenFrame_floats = DenFrame[(DenFrame.Hper.map(type) == float) &amp; 
                           (DenFrame.Vper.map(type) == float)]
</snippet></ROW><ROW><id>14450336</id><snippet>DenFrame.Hper = DenFrame.Hper.apply(float)
</snippet></ROW><ROW><id>14450344</id><snippet> results = db.session.query(User).filter(User.name == Bob").order_by(User.age.desc()).limit(10)
</snippet></ROW><ROW><id>14450396</id><snippet>Question</snippet></ROW><ROW><id>14450396</id><snippet>class Question:
    def __init__(self, question, hints, answer):
        self.question = question
        self.hints = hints
        self.answer = answer

    def ask_question(self):
        print "Here is your question:"
        print self.question

    def give_hint(self):
        if len(self.hints) == 0:
            print "That's all the hints I have!"
        else:
            print self.hints.pop(0)

     def guess(self, guess):
        if guess == self.answer:
            print "You guessed correctly!"
        else:
            print "No, try again!"
</snippet></ROW><ROW><id>14450396</id><snippet>Question</snippet></ROW><ROW><id>14450396</id><snippet>question</snippet></ROW><ROW><id>14450396</id><snippet>hints</snippet></ROW><ROW><id>14450396</id><snippet>answers</snippet></ROW><ROW><id>14450396</id><snippet>q1 = Question("How many roads must a man walk down?", ["Think Douglas Adams.", "It's more than 40 and less than 50"], "42")
</snippet></ROW><ROW><id>14450396</id><snippet>How many roads must a man walk down?    Think Douglas Adams./It's more than 40 and less than 50    42
</snippet></ROW><ROW><id>14450396</id><snippet>questions = []
with open("questions.txt") as inf:
    for l in inf:
        question, hints, answer = l[:-1].split("\t")
        questions.append(Question(question, hints.split("/"), answer))
</snippet></ROW><ROW><id>14450396</id><snippet>Question</snippet></ROW><ROW><id>14450396</id><snippet>Question</snippet></ROW><ROW><id>14450751</id><snippet>def section(request):
    code....
</snippet></ROW><ROW><id>14450751</id><snippet>section</snippet></ROW><ROW><id>14450751</id><snippet>people</snippet></ROW><ROW><id>14450751</id><snippet>def people(request, section_id):
     code....
</snippet></ROW><ROW><id>14450751</id><snippet>people</snippet></ROW><ROW><id>14450751</id><snippet>section_id</snippet></ROW><ROW><id>14450751</id><snippet>section</snippet></ROW><ROW><id>14450751</id><snippet>section_id</snippet></ROW><ROW><id>14450751</id><snippet>&lt;a href="{% url views.people section_id %}"&gt;Link to People View - Passing Section_ID &lt;/a&gt;
</snippet></ROW><ROW><id>14450751</id><snippet>people</snippet></ROW><ROW><id>14450751</id><snippet>section</snippet></ROW><ROW><id>14450751</id><snippet>&lt;a href="{% url views.section %}"&gt;Link to Section View - No parameters needed &lt;/a&gt;
</snippet></ROW><ROW><id>14450751</id><snippet>{% url 'views.section' %}</snippet></ROW><ROW><id>14451020</id><snippet>a=['string1','string2','string3','string4','string5']
for item in a[:3]:
      print item
</snippet></ROW><ROW><id>14451020</id><snippet>print '\n'.join(a[:3])
</snippet></ROW><ROW><id>14451050</id><snippet>In [3]: import re

In [4]: strs= "This is my test the string to match the stuff"

In [5]: p = re.compile(" the ")

In [6]: re.findall(p,strs)
Out[6]: [' the ', ' the ']

In [7]: var1,var2=re.findall(p,strs)

In [8]: var1,var2
Out[8]: (' the ', ' the ')
</snippet></ROW><ROW><id>14451050</id><snippet>var1,var2=[' the ', ' the ',' the '][:2]
</snippet></ROW><ROW><id>14451050</id><snippet>*</snippet></ROW><ROW><id>14451050</id><snippet>In [2]: var1,var2,*extras=[' the ', ' the ','foo','bar']

In [3]: var1
Out[3]: ' the '

In [4]: var2
Out[4]: ' the '

In [5]: extras             #rest of the elements are stored in extras
Out[5]: ['foo', 'bar']
</snippet></ROW><ROW><id>14451200</id><snippet>def _waitReady(self):
while self.oIE.Busy:
    time.sleep(0.1)
    waitCount += 0.1

    if waitCount &gt; 5:
        print("killing alert boxes")
        _killAllAlertBoxes()
       waitCount = 0

def _killAllAlertBoxes():
# iterates through all active windows
win32gui.EnumChildWindows(0, _closeWindow, None)

def _closeWindow(hwnd, lparam):
# if window is an alert box (class = '#32770')
if win32gui.GetClassName(hwnd) == '#32770':
    print("Closing Alert Box")
    win32api.PostMessage(hwnd, win32con.WM_CLOSE, 0, 0) # closes window
</snippet></ROW><ROW><id>14451206</id><snippet>-1</snippet></ROW><ROW><id>14451206</id><snippet>age = int(raw_input ("Enter an age "))
while age != -1:    
    Totalage = Totalage + age
    age = int(input("Enter an age "))
</snippet></ROW><ROW><id>14451206</id><snippet>raw_input</snippet></ROW><ROW><id>14451206</id><snippet>itertools.takewhile</snippet></ROW><ROW><id>14451206</id><snippet>&gt;&gt;&gt; from itertools import count, takewhile
&gt;&gt;&gt; sum(takewhile(lambda x: x != -1,
          (int(raw_input("Enter an age ")) for e in count())))
Enter an age 20
Enter an age 30
Enter an age 40
Enter an age 50
Enter an age -1
140
</snippet></ROW><ROW><id>14451264</id><snippet>import pandas as pd
import numpy as np

df = pd.DataFrame(range(50), columns  = ['filtercol'])
w = 0
x = 5
y = 17
z = 33
filter_values = [w, x, y, z]
out = pd.cut(df.filtercol, bins = filter_values)
counts = pd.value_counts(out)
# counts is a Series
print(counts)
</snippet></ROW><ROW><id>14451264</id><snippet>(17, 33]    16
(5, 17]     12
(0, 5]       5
</snippet></ROW><ROW><id>14451264</id><snippet>print(counts.order())
</snippet></ROW><ROW><id>14451264</id><snippet>(0, 5]       5
(5, 17]     12
(17, 33]    16
</snippet></ROW><ROW><id>14451645</id><snippet>ni = request.args.get('ni')
Knights.select().where(Knights.who_say ** ni.join(('%', '%')))
</snippet></ROW><ROW><id>14452045</id><snippet>def try_get(dic, default, *keys):
    for key in keys:
        try:
            dic = dic[key]
        except KeyError:
            return default
    return dic

e['a'] = try_get(d, 0, 'a')
e['d'] = try_get(d, 0, 'b', 'c', 'd')
</snippet></ROW><ROW><id>14452129</id><snippet>setUp</snippet></ROW><ROW><id>14452129</id><snippet>test_*</snippet></ROW><ROW><id>14452129</id><snippet>setUp</snippet></ROW><ROW><id>14452129</id><snippet>test_*</snippet></ROW><ROW><id>14452129</id><snippet>setUp</snippet></ROW><ROW><id>14452129</id><snippet>tearDown</snippet></ROW><ROW><id>14452132</id><snippet>lvl</snippet></ROW><ROW><id>14452132</id><snippet>[-1]*lvl + ['end']</snippet></ROW><ROW><id>14452132</id><snippet>['end']</snippet></ROW><ROW><id>14452132</id><snippet>indices[:-1]</snippet></ROW><ROW><id>14452132</id><snippet>['end'][:-1]</snippet></ROW><ROW><id>14452132</id><snippet>['end'][:-1]</snippet></ROW><ROW><id>14452132</id><snippet>['end'][:1-1]</snippet></ROW><ROW><id>14452132</id><snippet>['end'][:0]</snippet></ROW><ROW><id>14452178</id><snippet>time.clock</snippet></ROW><ROW><id>14452178</id><snippet>import time
start = time.clock()
#your code here    
print time.clock() - start
</snippet></ROW><ROW><id>14452178</id><snippet>timeit</snippet></ROW><ROW><id>14452178</id><snippet>profile</snippet></ROW><ROW><id>14452322</id><snippet>mwe_nmgrams.intersection(sentence_ngrams)</snippet></ROW><ROW><id>14452322</id><snippet>chunker2</snippet></ROW><ROW><id>14452322</id><snippet>def chunker3(sentence):
    tokens = sentence.split(' ')
    len_tokens = len(tokens)
    nodes = set()

    for i in xrange(0, len_tokens):
        for j in xrange(i, len_tokens):
            chunks = tokens[i:j]

            if len(chunks) &gt; 1:
                nodes.add(' '.join(chunks))

    intersect = mwe_list.intersection(n)

    for i in intersect:
        print i
        sentence = sentence.replace(i, i.replace(' ', '-'))

    return sentence
</snippet></ROW><ROW><id>14452556</id><snippet>scipy.sparse.linalg</snippet></ROW><ROW><id>14452556</id><snippet>eigs</snippet></ROW><ROW><id>14452556</id><snippet>eigsh</snippet></ROW><ROW><id>14452556</id><snippet>a</snippet></ROW><ROW><id>14452556</id><snippet>val, vec = scipy.sparse.linalg.eigs(a, k=1, which='LM')
</snippet></ROW><ROW><id>14452642</id><snippet>updateTemperature</snippet></ROW><ROW><id>14452642</id><snippet>if length &lt; 25:
    x = np.arange(length)
    y = np.array(self.TemperatureData)
else:
    x = np.arange(length-25, length)
    y = np.array(self.TemperatureData)[-25:]
</snippet></ROW><ROW><id>14452642</id><snippet>xMin = 0 if length &lt; 25 else length-25
xMax = 25 if length &lt; 25 else length
self.axes.set_xbound( (xMin,xMax) )
</snippet></ROW><ROW><id>14452642</id><snippet>FigureCanvas</snippet></ROW><ROW><id>14452642</id><snippet>FigureCanvas</snippet></ROW><ROW><id>14452642</id><snippet>updateTemperature</snippet></ROW><ROW><id>14452642</id><snippet>    self.canvas.draw()
</snippet></ROW><ROW><id>14453028</id><snippet>.egg-info</snippet></ROW><ROW><id>14453400</id><snippet>True</snippet></ROW><ROW><id>14453400</id><snippet>"False"</snippet></ROW><ROW><id>14453518</id><snippet>smoketest</snippet></ROW><ROW><id>14453518</id><snippet>datetime.datetime</snippet></ROW><ROW><id>14453518</id><snippet>print</snippet></ROW><ROW><id>14453518</id><snippet>datetime.datetime</snippet></ROW><ROW><id>14453518</id><snippet>smoketest</snippet></ROW><ROW><id>14453518</id><snippet>strftime</snippet></ROW><ROW><id>14453518</id><snippet>for smoketest in rrule.rrule(rrule.HOURLY, dtstart=startD, until=endD):
    dateID = smoketest.strftime('%Y-%m-%d')
    hourID = smoketest.strftime('%H:%M:%S')
</snippet></ROW><ROW><id>14453593</id><snippet>strs = "initialword_content"
strs = strs[12:].replace("_", " ")
print strs
</snippet></ROW><ROW><id>14453669</id><snippet>=getElementsByTagName('aws:Rank')[0]</snippet></ROW><ROW><id>14453669</id><snippet>itemlist.firstChild.data
</snippet></ROW><ROW><id>14453669</id><snippet>itemlist.firstChild.nodeValue
</snippet></ROW><ROW><id>14453669</id><snippet>xmldoc = minidom.parse(response)
xmlElement = xmldoc.getElementsByTagName('aws:Rank')[0]
xmlData = xmlElement.firstChild.nodeValue
print xmlData
</snippet></ROW><ROW><id>14453751</id><snippet>message.tags</snippet></ROW><ROW><id>14453751</id><snippet>message.tag</snippet></ROW><ROW><id>14453751</id><snippet>message.tags</snippet></ROW><ROW><id>14453751</id><snippet>extra_tags</snippet></ROW><ROW><id>14453751</id><snippet>message.tags</snippet></ROW><ROW><id>14453751</id><snippet>'account_activated success'</snippet></ROW><ROW><id>14453934</id><snippet>settings.py</snippet></ROW><ROW><id>14453934</id><snippet>local_settings.py</snippet></ROW><ROW><id>14453934</id><snippet>try:
    from local_settings import *
except ImportError, e:
    pass
</snippet></ROW><ROW><id>14453934</id><snippet>DEBUG = True

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'tag',
        'USER': 'tag',
        'PASSWORD': 'tag',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}
</snippet></ROW><ROW><id>14453934</id><snippet>local_settings</snippet></ROW><ROW><id>14453934</id><snippet>try:
    from production_settings import *
except ImportError, e:
    pass
</snippet></ROW><ROW><id>14453934</id><snippet>production_settings.py</snippet></ROW><ROW><id>14453934</id><snippet>production_settings.py</snippet></ROW><ROW><id>14454088</id><snippet>map()</snippet></ROW><ROW><id>14454088</id><snippet>import string

secret = """FMMP
NZ OBNF JT KPTIVB
KPIO TVDLT BTT
GVOEBNFOUBMT PG DPNQVUJOH"""

characters = list(string.uppercase)
cipher = dict(zip(characters[1:]+[characters[0]], characters))

decrypted = "".join(map(lambda x: cipher.get(x,x), secret))

print decrypted
</snippet></ROW><ROW><id>14454088</id><snippet>string</snippet></ROW><ROW><id>14455808</id><snippet>(?&lt;!\d)\s+\d+\s+(?!\d)
</snippet></ROW><ROW><id>14455831</id><snippet>b = np.sort(a)
</snippet></ROW><ROW><id>14455831</id><snippet>b = pd.Series(np.sort(a), index=a.index)
</snippet></ROW><ROW><id>14455831</id><snippet>np.sort(a).values[3]
</snippet></ROW><ROW><id>14455834</id><snippet>class Event(object):
    def myMethod(param1, param2):
        return "foo"

    class Java:
        implements = ['yourpackage.IEvent']
</snippet></ROW><ROW><id>14455834</id><snippet>gateway = JavaGateway(start_callback_server=True)
stack = gateway.entry_point.getStack()
event = Event()
stack.push(event)
</snippet></ROW><ROW><id>14455985</id><snippet>    logger = logging.getLogger('simple_example')
    logger.setLevel(logging.DEBUG)

    ch = logging.handlers.WatchedFileHandler('a_log')
    ch.setLevel(logging.DEBUG)

    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    ch.setFormatter(formatter)
    logger.addHandler(ch)
</snippet></ROW><ROW><id>14456263</id><snippet>In [46]: from itertools import imap

In [47]: a = [[1,2,3], [2,3,4], [3,4,5]]

In [48]: reduce(set.intersection,imap(set,a))
Out[48]: set([3])
</snippet></ROW><ROW><id>14456263</id><snippet>1 2 3
2 3 4
3 4 5
</snippet></ROW><ROW><id>14456263</id><snippet>itertools.combinations()</snippet></ROW><ROW><id>14456263</id><snippet>with open("abc.txt") as f:
    lines=(map(int,x.split()) for x in f)
    for x in combinations(lines,2):
        print x,'--&gt;',reduce(set.intersection,imap(set,x))
   ....:         
([1, 2, 3], [2, 3, 4]) --&gt; set([2, 3])
([1, 2, 3], [3, 4, 5]) --&gt; set([3])
([2, 3, 4], [3, 4, 5]) --&gt; set([3, 4])
</snippet></ROW><ROW><id>14456282</id><snippet>def test():
    print 'hello world'
func = test
func() # this will call test()
</snippet></ROW><ROW><id>14456282</id><snippet>eval()</snippet></ROW><ROW><id>14456282</id><snippet>y = eval('x + 1')
</snippet></ROW><ROW><id>14456323</id><snippet>if</snippet></ROW><ROW><id>14456323</id><snippet>import re
bool(re.match('[F|f]',&lt;your string&gt;)) #if it matched, then it's true.  Else, false.
</snippet></ROW><ROW><id>14456323</id><snippet>import re
bool(re.search('[F|f]ile system full',&lt;your string&gt;))
</snippet></ROW><ROW><id>14456323</id><snippet>&lt;your string&gt;[0] in ('f','F')

&lt;your string&gt;.startswith('f') or &lt;your string&gt;.startswith('F')
</snippet></ROW><ROW><id>14456323</id><snippet>lower</snippet></ROW><ROW><id>14456323</id><snippet>&lt;your string&gt;.lower() == 'f'
</snippet></ROW><ROW><id>14456445</id><snippet>app = webapp2.WSGIApplication([('/admin', Admin), ('/', Main),('/img', Image)], debug=True)
</snippet></ROW><ROW><id>14456733</id><snippet>statssnapshot.put_async(use_cache=False)
</snippet></ROW><ROW><id>14456767</id><snippet>from scaly.all import *

Packets = rdpcap("pcapfile")
srcList = [pkt[1].src for pkt in Packets]
</snippet></ROW><ROW><id>14456767</id><snippet>In [1]: lst = range(100)

In [2]: def f1(lst):
   ...:     out = []
   ...:     for item in lst:
   ...:         out.append(lst[lst.index(item)])
   ...:     return out

In [3]: def f2(lst):
   ...:     return [item for item in lst]

In [4]: %timeit f1(lst)
1000 loops, best of 3: 221 us per loop

In [5]: %timeit f2(lst)
100000 loops, best of 3: 9.61 us per loop
</snippet></ROW><ROW><id>14456952</id><snippet>unicode</snippet></ROW><ROW><id>14457355</id><snippet>git clone https://github.com/scrapy/scrapy.git
cd scrapy
python setup.py
</snippet></ROW><ROW><id>14457383</id><snippet>+def s_repr(obj):
+    """ :param obj: object """
+    return (repr(obj) if not isinstance(obj, SikuliClass)
+            else "self._get_jython_object(%r)" % obj._str_get)
+
+
 def run_on_remote(func):
     ...
-    func.s_repr = lambda obj: (repr(obj)
-                               if not isinstance(obj, SikuliClass) else
-                               "self._get_jython_object(%r)" % obj._str_get)
-
-    def _inner(self, *args):
-        return self.remote._eval("self._get_jython_object(%r).%s(%s)" % (
-            self._id,
-            func.__name__,
-            ', '.join([func.s_repr(x) for x in args])))
-
-    func.func = _inner
+    gjo = "self._get_jython_object"
+    func._augment = {
+        'inner': lambda self, *args: (self.remote._eval("%s(%r).%s(%s)"
+                                      % (gjo, self._id, func.__name__,
+                                         ', '.join([s_repr(x)for x in args]))))
+    }

     @wraps(func)
     def _outer(self, *args, **kwargs):
         func(self, *args, **kwargs)
-        if hasattr(func, "arg"):
-            args, kwargs = func.arg(*args, **kwargs), {}
-        result = func.func(*args, **kwargs)
-        if hasattr(func, "post"):
+        if "arg" in func._augment:
+            args, kwargs = func._augment["arg"](self, *args, **kwargs), {}
+        result = func._augment['inner'](self, *args, **kwargs)
+        if "post" in func._augment:
             return func.post(result)
         else:
             return result

     def _arg(arg_func):
-        func.arg = arg_func
-        return _outer
+        func._augment['arg'] = arg_func
+        return func

     def _post(post_func):
-        func.post = post_func
-        return _outer
+        func._augment['post'] = post_func
+        return func

     def _func(func_func):
-        func.func = func_func
-        return _outer
-    _outer.arg = _arg
-    _outer.post = _post
-    _outer.func = _func
-    return _outer
+        func._augment['inner'] = func_func
+        return func
+
+    func.arg  = _outer.arg = _arg
+    func.post = _outer.post = _post
+    func.func = _outer.func = _func
+    func.run  = _outer.run = _outer
+    return func
</snippet></ROW><ROW><id>14457383</id><snippet> class ClientSikuliClass(ServerSikuliClass):
     """ Base class for types based on the Sikuli native types """
     ...
     def __init__(self, remote, server_id, *args, **kwargs):
         """
         :type server_id: int
         :type remote: SikuliClient
         """
         super(ClientSikuliClass, self).__init__(None)
+        for key in dir(self):
+            try:
+                func = getattr(self, key)
+            except AttributeError:
+                pass
+            else:
+                try:
+                    from functools import partial, wraps
+                    run = wraps(func.run)(partial(func.run, self))
+                    setattr(self, key, run)
+                except AttributeError:
+                    pass
         self.remote = remote
         self.server_id = server_id
</snippet></ROW><ROW><id>14457383</id><snippet>ClientSikuliClass</snippet></ROW><ROW><id>14457383</id><snippet>_outer</snippet></ROW><ROW><id>14457383</id><snippet>run</snippet></ROW><ROW><id>14457383</id><snippet> class ClientSikuliClass(ServerSikuliClass):
     """ Base class for types based on the Sikuli native types """
     ...
     def __init__(self, remote, server_id, *args, **kwargs):
         """
         :type server_id: int
         :type remote: SikuliClient
         """
         super(ClientSikuliClass, self).__init__(None)
-        for key in dir(self):
+
+        def _apply_key(key):
             try:
                 func = getattr(self, key)
+                aug = func._augment
+                runner = func.run
             except AttributeError:
-                pass
-            else:
-                try:
-                    from functools import partial, wraps
-                    run = wraps(func.run)(partial(func.run, self))
-                    setattr(self, key, run)
-                except AttributeError:
-                    pass
+                return
+
+            @wraps(func)
+            def _outer(*args, **kwargs):
+                return runner(self, *args, **kwargs)
+
+            setattr(self, key, _outer)
+
+        for key in dir(self):
+            _apply_key(key)
+
         self.remote = remote
         self.server_id = server_id
</snippet></ROW><ROW><id>14457681</id><snippet>re.findall()</snippet></ROW><ROW><id>14457681</id><snippet>.findall()</snippet></ROW><ROW><id>14457681</id><snippet>(...)</snippet></ROW><ROW><id>14457681</id><snippet>'href="www.google.com"'</snippet></ROW><ROW><id>14457681</id><snippet>'www.google.com'</snippet></ROW><ROW><id>14457681</id><snippet>(?:...)</snippet></ROW><ROW><id>14457681</id><snippet>href=</snippet></ROW><ROW><id>14457681</id><snippet>&gt;&gt;&gt; re.findall('(href=)"(.*?)"', teststring)
[('href=', 'www.google.com')]
</snippet></ROW><ROW><id>14457810</id><snippet>os.kill</snippet></ROW><ROW><id>14457810</id><snippet>import os, signal

os.kill(pid, signal.SIGHUP) # Unix version only...
</snippet></ROW><ROW><id>14458956</id><snippet>subprocess</snippet></ROW><ROW><id>14458956</id><snippet>stdin</snippet></ROW><ROW><id>14458956</id><snippet>stdout</snippet></ROW><ROW><id>14458956</id><snippet>stderr</snippet></ROW><ROW><id>14458956</id><snippet>from subprocess import Popen, PIPE, STDOUT

p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)

grep_stdout = p.communicate(input='one\ntwo\nthree\nfour\nfive\nsix\n')[0]
print grep_stdout
</snippet></ROW><ROW><id>14458956</id><snippet>prog.py</snippet></ROW><ROW><id>14458956</id><snippet>import sys
print 'what is your name?'
sys.stdout.flush()
name = raw_input()
print 'your name is ' + name
sys.stdout.flush()
</snippet></ROW><ROW><id>14458956</id><snippet>&gt;&gt;&gt; from subprocess import Popen, PIPE, STDOUT
&gt;&gt;&gt; p = Popen(['python', 'prog.py'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)
&gt;&gt;&gt; p.stdout.readline().rstrip()
'what is your name'
&gt;&gt;&gt; p.communicate('mike')[0].rstrip()
'your name is mike'
</snippet></ROW><ROW><id>14458970</id><snippet>self.request.get('archers1')</snippet></ROW><ROW><id>14458970</id><snippet>try:
    archers1c=int(self.request.get('archers1'))
except ValueError:
    # inform user of form validation error
</snippet></ROW><ROW><id>14459252</id><snippet>def conversor(anosluz):
    # just convert the given anosluz into km
    km = anosluz * (9.459 * 10**12) 
    return km


if __name__=='__main__':
    while True:
        # repeat until *break*
        anosluz = raw_input('Insira a distancia em anos luz: ')
        try:
            resultado = conversor(float(anosluz))
        except ValueError, e:
            # oh, conversor raised an exception
            print 'Ooops! O valor que inseriste nao e o correcto, tenta de novo.', e
        else:
            # no exception, print result and exit
            print resultado
            break
</snippet></ROW><ROW><id>14459880</id><snippet>text = "500 Minutes + Unlimited Text + Your Choice of Data"
a, b, c = [part.strip() for part in text.split('+')]
print a
print b
print c
</snippet></ROW><ROW><id>14459880</id><snippet>500 Minutes
Unlimited Text
Your Choice of Data
</snippet></ROW><ROW><id>14460011</id><snippet>Executor</snippet></ROW><ROW><id>14460011</id><snippet>with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
    future_to_key = {}
    for key, value in sources.items():
        future_to_idday[executor.submit(do_stuff, value)] = key
    for future in concurrent.futures.as_completed(future_to_key):
        key = future_to_key[future]
        result = future.result()
        # process result
</snippet></ROW><ROW><id>14460216</id><snippet>bugtrack_url</snippet></ROW><ROW><id>14460216</id><snippet>setup.py</snippet></ROW><ROW><id>14460216</id><snippet>setuptools</snippet></ROW><ROW><id>14460216</id><snippet>distribute</snippet></ROW><ROW><id>14460216</id><snippet>distribute2</snippet></ROW><ROW><id>14460216</id><snippet>bugtrack_url</snippet></ROW><ROW><id>14460216</id><snippet>setup.py</snippet></ROW><ROW><id>14460251</id><snippet>except</snippet></ROW><ROW><id>14460251</id><snippet>raise</snippet></ROW><ROW><id>14460251</id><snippet>try</snippet></ROW><ROW><id>14460251</id><snippet>docopy</snippet></ROW><ROW><id>14460251</id><snippet>try</snippet></ROW><ROW><id>14460251</id><snippet>def hmm(haha):
    try:
        result = docopy(haha)
        it = iter(result)
    except ftplib.error_perm:
        print "Error Getting File" 
</snippet></ROW><ROW><id>14460261</id><snippet>run('screen -d -m yes; sleep 1')</snippet></ROW><ROW><id>14460308</id><snippet>True</snippet></ROW><ROW><id>14460308</id><snippet>key-press-event</snippet></ROW><ROW><id>14460308</id><snippet>key-press-event</snippet></ROW><ROW><id>14460308</id><snippet>__key_event_handler</snippet></ROW><ROW><id>14460456</id><snippet>#estimate mean and standard deviation
meam = sum(x * y)
sigma = sum(y * (x - m)**2)
#do the fit!
popt, pcov = curve_fit(gauss_function, x, y, p0 = [1, mean, sigma])
#plot the fit results
plot(x,gauss_function(x, *popt))
#confront with the given data
plot(x,y,'ok')
</snippet></ROW><ROW><id>14461061</id><snippet>&gt;&gt;&gt; assignedzip_numberpolygon_str = '-71.064483,42.347181 -71.062819,42.346781 -71.061012,42.346099 -71.060932,42.345734 -71.060514,42.345511 -71.060566,42.344569 -71.05971,42.344816 -71.057818,42.346189 -71.05595,42.346601 -71.05683,42.347199 -71.05572,42.34714 -71.052975,42.351364 -71.055483,42.352548 -71.056277,42.35286 -71.056276,42.352891 -71.056476,42.353006 -71.05678,42.353126 -71.056999,42.353208 -71.057292,42.353273 -71.05914,42.35459 -71.06048,42.3555 -71.061772,42.356065 -71.062008,42.355811 -71.062073,42.355276 -71.06287,42.35567 -71.06331,42.35521 -71.064136,42.353623 -71.06423,42.35339 -71.06456,42.35238 -71.063717,42.352295 -71.06258,42.3524 -71.06276,42.35148 -71.063056,42.350902 -71.064275,42.348432 -71.064483,42.347181'
&gt;&gt;&gt; assignedzip_numberpolygon = [map(float, coord.split(",")) for coord in assignedzip_numberpolygon_str.split()]
&gt;&gt;&gt; assignedzip_numberpolygon
[[-71.064483, 42.347181], [-71.062819, 42.346781], [-71.061012, 42.346099], [-71.060932, 42.345734], [-71.060514, 42.345511], [-71.060566, 42.344569], [-71.05971, 42.344816], [-71.057818, 42.346189], [-71.05595, 42.346601], [-71.05683, 42.347199], [-71.05572, 42.34714], [-71.052975, 42.351364], [-71.055483, 42.352548], [-71.056277, 42.35286], [-71.056276, 42.352891], [-71.056476, 42.353006], [-71.05678, 42.353126], [-71.056999, 42.353208], [-71.057292, 42.353273], [-71.05914, 42.35459], [-71.06048, 42.3555], [-71.061772, 42.356065], [-71.062008, 42.355811], [-71.062073, 42.355276], [-71.06287, 42.35567], [-71.06331, 42.35521], [-71.064136, 42.353623], [-71.06423, 42.35339], [-71.06456, 42.35238], [-71.063717, 42.352295], [-71.06258, 42.3524], [-71.06276, 42.35148], [-71.063056, 42.350902], [-71.064275, 42.348432], [-71.064483, 42.347181]]
</snippet></ROW><ROW><id>14461061</id><snippet>def parse_assignedzip_numberpolygon(s):
    return [map(float, coord.split(",")) for coord in s.split()]

def proc_data_dict(d):
    new_d = d.copy()
    new_d['assignedzip_numberpolygon'] = parse_assignedzip_numberpolygon(d['assignedzip_numberpolygon'])
    return new_d
</snippet></ROW><ROW><id>14461061</id><snippet>dataset = [{'assignedzip_longitude': -71.064699000000005,
  'assignedzip_numberpolygon': u'-71.064483,42.347181 -71.062819,42.346781 -71.061012,42.346099 -71.060932,42.345734 -71.060514,42.345511 -71.060566,42.344569 -71.05971,42.344816 -71.057818,42.346189 -71.05595,42.346601 -71.05683,42.347199 -71.05572,42.34714 -71.052975,42.351364 -71.055483,42.352548 -71.056277,42.35286 -71.056276,42.352891 -71.056476,42.353006 -71.05678,42.353126 -71.056999,42.353208 -71.057292,42.353273 -71.05914,42.35459 -71.06048,42.3555 -71.061772,42.356065 -71.062008,42.355811 -71.062073,42.355276 -71.06287,42.35567 -71.06331,42.35521 -71.064136,42.353623 -71.06423,42.35339 -71.06456,42.35238 -71.063717,42.352295 -71.06258,42.3524 -71.06276,42.35148 -71.063056,42.350902 -71.064275,42.348432 -71.064483,42.347181',
  'assignedzip_pk': u'02111',
  'name': u'Any Name',
  'store_latitude': 42.353197999999999,
  'store_longitude': -71.057495000000003},
 {'assignedzip_latitude': 42.360587000000002,
  'assignedzip_longitude': -71.065447000000006,
  'assignedzip_numberpolygon': u'-71.077051,42.358732 -71.075592,42.355871 -71.075243,42.355601 -71.075054,42.355336 -71.073294,42.355803 -71.073326,42.356427 -71.072439,42.358829 -71.0711,42.358812 -71.071075,42.358278 -71.070669,42.357699 -71.06981,42.35788 -71.070192,42.358828 -71.0677,42.35887 -71.06507,42.35886 -71.065089,42.358327 -71.064355,42.358356 -71.063953,42.358406 -71.062857,42.35865 -71.062873,42.359362 -71.062888,42.361159 -71.061415,42.360908 -71.061495,42.358804 -71.060177,42.359171 -71.060143,42.359052 -71.059765,42.359093 -71.059424,42.359539 -71.05974,42.359735 -71.060275,42.360502 -71.060931,42.360849 -71.060833,42.361341 -71.059718,42.361851 -71.058526,42.362498 -71.057623,42.362647 -71.057993,42.362995 -71.058227,42.364403 -71.058577,42.366966 -71.059112,42.367823 -71.060008,42.369051 -71.063087,42.368704 -71.062968,42.368323 -71.064329,42.369163 -71.064398,42.368983 -71.065072,42.36883 -71.065397,42.368993 -71.067653,42.368983 -71.069793,42.369082 -71.070245,42.368701 -71.070569,42.368283 -71.070816,42.367967 -71.071583,42.368362 -71.071628,42.36829 -71.071625,42.368228 -71.07091,42.367872 -71.075705,42.361646 -71.077051,42.358732',
  'assignedzip_pk': u'02114',
  'name': u'Test Name',
  'store_latitude': 42.357497000000002,
  'store_longitude': -71.058494999999994}]

for d in dataset:
    new_d = proc_data_dict(d)
    print new_d
</snippet></ROW><ROW><id>14461061</id><snippet>{'store_latitude': 42.353198, 'name': u'Any Name', 'assignedzip_numberpolygon': [[-71.064483, 42.347181], [-71.062819, 42.346781], [-71.061012, 42.346099], [-71.060932, 42.345734], [-71.060514, 42.345511], [-71.060566, 42.344569], [-71.05971, 42.344816], [-71.057818, 42.346189], [-71.05595, 42.346601], [-71.05683, 42.347199], [-71.05572, 42.34714], [-71.052975, 42.351364], [-71.055483, 42.352548], [-71.056277, 42.35286], [-71.056276, 42.352891], [-71.056476, 42.353006], [-71.05678, 42.353126], [-71.056999, 42.353208], [-71.057292, 42.353273], [-71.05914, 42.35459], [-71.06048, 42.3555], [-71.061772, 42.356065], [-71.062008, 42.355811], [-71.062073, 42.355276], [-71.06287, 42.35567], [-71.06331, 42.35521], [-71.064136, 42.353623], [-71.06423, 42.35339], [-71.06456, 42.35238], [-71.063717, 42.352295], [-71.06258, 42.3524], [-71.06276, 42.35148], [-71.063056, 42.350902], [-71.064275, 42.348432], [-71.064483, 42.347181]], 'assignedzip_longitude': -71.064699, 'store_longitude': -71.057495, 'assignedzip_pk': u'02111'}
{'store_latitude': 42.357497, 'name': u'Test Name', 'assignedzip_numberpolygon': [[-71.077051, 42.358732], [-71.075592, 42.355871], [-71.075243, 42.355601], [-71.075054, 42.355336], [-71.073294, 42.355803], [-71.073326, 42.356427], [-71.072439, 42.358829], [-71.0711, 42.358812], [-71.071075, 42.358278], [-71.070669, 42.357699], [-71.06981, 42.35788], [-71.070192, 42.358828], [-71.0677, 42.35887], [-71.06507, 42.35886], [-71.065089, 42.358327], [-71.064355, 42.358356], [-71.063953, 42.358406], [-71.062857, 42.35865], [-71.062873, 42.359362], [-71.062888, 42.361159], [-71.061415, 42.360908], [-71.061495, 42.358804], [-71.060177, 42.359171], [-71.060143, 42.359052], [-71.059765, 42.359093], [-71.059424, 42.359539], [-71.05974, 42.359735], [-71.060275, 42.360502], [-71.060931, 42.360849], [-71.060833, 42.361341], [-71.059718, 42.361851], [-71.058526, 42.362498], [-71.057623, 42.362647], [-71.057993, 42.362995], [-71.058227, 42.364403], [-71.058577, 42.366966], [-71.059112, 42.367823], [-71.060008, 42.369051], [-71.063087, 42.368704], [-71.062968, 42.368323], [-71.064329, 42.369163], [-71.064398, 42.368983], [-71.065072, 42.36883], [-71.065397, 42.368993], [-71.067653, 42.368983], [-71.069793, 42.369082], [-71.070245, 42.368701], [-71.070569, 42.368283], [-71.070816, 42.367967], [-71.071583, 42.368362], [-71.071628, 42.36829], [-71.071625, 42.368228], [-71.07091, 42.367872], [-71.075705, 42.361646], [-71.077051, 42.358732]], 'assignedzip_longitude': -71.065447, 'store_longitude': -71.058495, 'assignedzip_latitude': 42.360587, 'assignedzip_pk': u'02114'}
</snippet></ROW><ROW><id>14461269</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>14461269</id><snippet>env</snippet></ROW><ROW><id>14461269</id><snippet>PATH</snippet></ROW><ROW><id>14461269</id><snippet>bin/</snippet></ROW><ROW><id>14461269</id><snippet>env</snippet></ROW><ROW><id>14461424</id><snippet>tables.CArray</snippet></ROW><ROW><id>14461424</id><snippet>coord_slice</snippet></ROW><ROW><id>14461424</id><snippet>tuple</snippet></ROW><ROW><id>14461424</id><snippet>list</snippet></ROW><ROW><id>14461424</id><snippet>import tables
import numpy

fileName = 'carray1.h5'
shape = (200, 300)
atom = tables.UInt8Atom()
filters = tables.Filters(complevel=5, complib='zlib')

h5f = tables.openFile(fileName, 'w')
ca = h5f.createCArray(h5f.root, 'carray', atom, shape, filters=filters)

coord_slice = [slice(10,60,None),slice(20,70,None)]

# attempt to do multi-dimensional indexing with coord_slice as a list
try:
    ca[coord_slice] = numpy.ones((50, 50))
except TypeError:
    print 'TypeError was thrown with list'

# convert coord_slice to a tuple and try again.  This should work.
coord_slice = tuple(coord_slice)
try:
    ca[coord_slice] = numpy.ones((50, 50))
except TypeError:
    print 'TypeError was thrown with tuple'


print ca[coord_slice]
h5f.close()
</snippet></ROW><ROW><id>14462673</id><snippet>from xml.etree import ElementTree as ET

tree = ET.parse(r'D:\Squish\squish results\Results-On-2013-01-18_0241 PM.xml')

with open("Result_Summary.txt", "w") as output:
    output.write(' {} \n\n'.format('-' * 101))
    output.write('\tTest Name \t\t No Of PASS\t\t No Of FAIL\t\t\t Description\t\t \n')
    output.write(' {} \n\n'.format('-' * 101))

    # Find all &lt;test&gt; elements with a &lt;verification&gt; child:
    for test in tree.findall('.//test[verification]'):
        # Collect passed and failed counts
        passed = len(test.findall(".//result[@type='PASS']"))
        failed = len(test.findall(".//result[@type='FAIL']"))
        # Collect all the *last* &lt;description&gt; elements of type DETAILED
        descriptions = test.findall(".//result/description[@type='DETAILED'][last()]")
        # write a line of information to the file, including first desc
        output.write('{0}\t\t\t{1}\t\t\t{2}\t\t\t{3}\n'.format(
            test.attrib['name'], passed, failed, descriptions[0].text))
        # write remaining descriptions
        for desc in descriptions[1:]:
            output.write('\t\t\t\t\t\t\t\t\t{0}\n'.format(desc.text))
</snippet></ROW><ROW><id>14462709</id><snippet>In [78]: X = np.arange(500)                 
In [79]: Y = np.arange(700)

In [83]: xx, yy = np.meshgrid(X, Y)

In [84]: xx.shape
Out[84]: (700, 500)

In [85]: yy.shape
Out[85]: (700, 500)
</snippet></ROW><ROW><id>14462709</id><snippet>plot_surface(xx, yy, Z.T)</snippet></ROW><ROW><id>14462771</id><snippet>import sys 

four = sys.argv[4]
print four[2]
</snippet></ROW><ROW><id>14462771</id><snippet>$ python myscript.py one two three [\'first\',\'second\']
f
</snippet></ROW><ROW><id>14462771</id><snippet>'f'</snippet></ROW><ROW><id>14462771</id><snippet>"['first','second']"</snippet></ROW><ROW><id>14462771</id><snippet>eval</snippet></ROW><ROW><id>14462771</id><snippet>eval</snippet></ROW><ROW><id>14462771</id><snippet>import sys 

four = eval(sys.argv[4])
print four[1]
</snippet></ROW><ROW><id>14462771</id><snippet>$ python myscript.py one two three [\'first\',\'second\']
second
</snippet></ROW><ROW><id>14462771</id><snippet>import sys

# make sure the --args flag was passed
if '--args' not in sys.argv:
    print &gt;&gt; sys.stderr, 'Please pass the "--args" flag followed by a list of'\
            ' arguments'
    sys.exit(1) #terminate execution if it wasn't

four = sys.argv[sys.argv.index('--args')+1:] # everything passed after --args
print four
</snippet></ROW><ROW><id>14462771</id><snippet>$ python myscript.py one two three --args 'first' 'second'
['first', 'second']
</snippet></ROW><ROW><id>14462771</id><snippet>import sys

one, two, three = sys.argv[1:4] # grab indicies 1, 2, and 3
four = sys.argv[4:]
print one
print two
print three
print four
</snippet></ROW><ROW><id>14462771</id><snippet>$ python myscript.py one two three 'first' 'second'
one
two
three
['first', 'second']
</snippet></ROW><ROW><id>14462784</id><snippet>gobject.idle_add()</snippet></ROW><ROW><id>14462784</id><snippet>gobject.threads_init()</snippet></ROW><ROW><id>14462784</id><snippet>gobject.io_add_watch()</snippet></ROW><ROW><id>14462886</id><snippet>cs = [True, False, True]
xs = [1, 2, 3]
ys = [10, 20, 30]

def generator(cs, xs, ys):
    for c, x, y in zip(cs, xs, ys):
        yield x if c else y

print(list(x if c else y for c, x, y in zip(cs, xs, ys)))
print(list(generator(cs, xs, ys)))
</snippet></ROW><ROW><id>14462886</id><snippet>[1, 20, 3]
[1, 20, 3]
</snippet></ROW><ROW><id>14462901</id><snippet>import os
os.chdir( path )
</snippet></ROW><ROW><id>14462901</id><snippet>path</snippet></ROW><ROW><id>14462901</id><snippet>".."</snippet></ROW><ROW><id>14462901</id><snippet>getcwd()</snippet></ROW><ROW><id>14462901</id><snippet>mycwd = os.getcwd()
os.chdir("..")
#do stuff in parent directory
os.chdir(mycwd)     # go back where you came from
</snippet></ROW><ROW><id>14463011</id><snippet>type</snippet></ROW><ROW><id>14463011</id><snippet>string</snippet></ROW><ROW><id>14463011</id><snippet>str</snippet></ROW><ROW><id>14463011</id><snippet>bs4.find().string</snippet></ROW><ROW><id>14463011</id><snippet>NavigableString</snippet></ROW><ROW><id>14463011</id><snippet>type</snippet></ROW><ROW><id>14463011</id><snippet>NavigableString</snippet></ROW><ROW><id>14463227</id><snippet>import webapp2
import StringIO
import numpy as np
import matplotlib.pyplot as plt


class MainPage(webapp2.RequestHandler):
    def get(self):
        plt.plot(np.random.random((20)))
        sio = StringIO.StringIO()
        plt.savefig(sio, format="png")
        img_b64 = sio.getvalue().encode("base64").strip()
        plt.clf()
        sio.close()
        self.response.write("""&lt;html&gt;&lt;body&gt;""")
        self.response.write("&lt;img src='data:image/png;base64,%s'/&gt;" % img_b64)
        self.response.write("""&lt;/body&gt; &lt;/html&gt;""")

app = webapp2.WSGIApplication([('/', MainPage)], debug=True)
</snippet></ROW><ROW><id>14463227</id><snippet>sio.getvalue()</snippet></ROW><ROW><id>14463227</id><snippet>get_serving_url()</snippet></ROW><ROW><id>14463321</id><snippet>python -W ignore foo.py</snippet></ROW><ROW><id>14463439</id><snippet>if len(words2) &gt;=7:
    long_tokens.append(words2)
</snippet></ROW><ROW><id>14463439</id><snippet>long_tokens += [w for w in words2 if len(w) &gt;= 7]
</snippet></ROW><ROW><id>14463439</id><snippet>corpus.words(fileids)</snippet></ROW><ROW><id>14463439</id><snippet>long_tokens</snippet></ROW><ROW><id>14463439</id><snippet>CategorizedPlaintextCorpusReader</snippet></ROW><ROW><id>14463439</id><snippet>loc="C:\Users\Dell\Desktop\CORPUS"
Corpus= CategorizedPlaintextCorpusReader(loc,'(?!\.svn).*\.txt, cat_pattern=r'(Shakespeare|Milton)/.*)

def long_words(corpus = Corpus):
    long_tokens=[]
    for cat in corpus.categories():
        fileids = corpus.fileids(categories=cat)
        words = corpus.words(fileids)
        long_tokens += [w for w in set(words) if len(w) &gt;= 7]
    return set(long_tokens)

print "\n".join(long_words())
</snippet></ROW><ROW><id>14463439</id><snippet>for loc in ['cat1','cat2']:
  print len(long_words(corpus=CategorizedPlaintextCorpusReader(loc,'(?!\.svn).*\.txt, cat_pattern=r'(Shakespeare|Milton)/.*)), 'words over 7 in', loc
</snippet></ROW><ROW><id>14463536</id><snippet>@idxs</snippet></ROW><ROW><id>14463536</id><snippet>#!/usr/bin/perl
use warnings;
use strict;
use feature qw(switch);

my %hash;
&lt;&gt;;                   # Skip header.
while (&lt;&gt;) {
    my ($id, $type, $pos1, $pos2, $strand, undef) = split;
    given ($type) {
        when ('start_codon') {
            $hash{$id}{start}  = [$pos1, $pos2];
            $hash{$id}{strand} = $strand;
        }
        when ('stop_codon') {
            $hash{$id}{stop}  = [$pos1, $pos2];
        }
        when ('exon') {
            push @{ $hash{$id}{exons} }, [$pos1, $pos2];
        }
    }
}

for my $id (sort keys %hash) {
    my @idxs = '+' eq $hash{$id}{strand} ? (0, 1) : (1, 0);
    for my $exon (@{ $hash{$id}{exons} }) {
        my $posa = 1 + abs $hash{$id}{start}[$idxs[0]] - $exon-&gt;[$idxs[0]];
        my $posb = 3 + abs $hash{$id}{start}[$idxs[1]] - $exon-&gt;[$idxs[1]];
        print "$id exon $posa $posb\n";
    }
}
</snippet></ROW><ROW><id>14463552</id><snippet>&gt;&gt;&gt; dictionaryNumbers = {'a':10,'b':10,'c':1,'d':1,'e':5,'f':1}
&gt;&gt;&gt; dictionaryNumbers['a'] += 5
&gt;&gt;&gt; dictionaryNumbers['a']
15
</snippet></ROW><ROW><id>14463552</id><snippet>if key not in dictionaryNumbers</snippet></ROW><ROW><id>14463552</id><snippet>.get()</snippet></ROW><ROW><id>14463552</id><snippet>&gt;&gt;&gt; dictionaryNumbers['z'] = dictionaryNumbers.get('z', 0) + 3
</snippet></ROW><ROW><id>14463552</id><snippet>collections.Counter()</snippet></ROW><ROW><id>14463552</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; counter = Counter()
&gt;&gt;&gt; counter.update({'a':10,'b':10,'c':1,'d':1,'e':5,'f':1})
&gt;&gt;&gt; counter
Counter({'a': 10, 'b': 10, 'e': 5, 'c': 1, 'd': 1, 'f': 1})
&gt;&gt;&gt; counter['a'] += 5
&gt;&gt;&gt; counter['a'] 
15
&gt;&gt;&gt; counter.most_common(3)
[('a', 15), ('b', 10), ('e', 5)]
</snippet></ROW><ROW><id>14463552</id><snippet>Counter(items_to_count)</snippet></ROW><ROW><id>14463552</id><snippet>counter1 + counter2</snippet></ROW><ROW><id>14463552</id><snippet>Counter</snippet></ROW><ROW><id>14463909</id><snippet>A.__init__</snippet></ROW><ROW><id>14463909</id><snippet>&gt;&gt;&gt; class A(object):
...     def __init__(self):
...             print('Old init - self' + str(self))
&gt;&gt;&gt; def new_init(self):
...     print('New init - self:' + str(self))
... 
&gt;&gt;&gt; A.__init__ = new_init
&gt;&gt;&gt; A.__init__()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unbound method new_init() must be called with A instance as first argument (got nothing instead)
&gt;&gt;&gt; A()
New init - self:&lt;__main__.A object at 0x2446d90&gt;
&lt;__main__.A object at 0x2446d90&gt;
</snippet></ROW><ROW><id>14463909</id><snippet>minimock</snippet></ROW><ROW><id>14463909</id><snippet>__init__</snippet></ROW><ROW><id>14463909</id><snippet>A</snippet></ROW><ROW><id>14463909</id><snippet>__init__</snippet></ROW><ROW><id>14464573</id><snippet>&lt;(command)</snippet></ROW><ROW><id>14464573</id><snippet>$ echo wc -w &lt;(date)
wc -l /dev/fd/63
</snippet></ROW><ROW><id>14464573</id><snippet>date</snippet></ROW><ROW><id>14464573</id><snippet>/dev/fd/63</snippet></ROW><ROW><id>14464573</id><snippet>from subprocess import *

date = Popen(['date'], stdout=PIPE)
Popen(["wc", "-w", "/dev/fd/%d" % date.stdout.fileno()])
</snippet></ROW><ROW><id>14464573</id><snippet>6 /dev/fd/3
</snippet></ROW><ROW><id>14464573</id><snippet>with</snippet></ROW><ROW><id>14464573</id><snippet>from subprocess import *

class CommandSubstituter(object):
    def __init__(self):
        self._procs = []

    def __enter__(self):
        return self

    def __exit__(self, *exc_info):
        pass

    def subst(self, *args, **kwargs):
        proc = Popen(*args, stdout=PIPE, **kwargs)
        self._procs.append(proc)
        return "/dev/fd/%d" % proc.stdout.fileno()

with CommandSubstituter() as c:
    Popen(['wc', '-l',
           c.subst(['comm', '-12',
                    c.subst(['sort', 'file1.txt']),
                    c.subst(['sort', 'file2.txt'])])])
</snippet></ROW><ROW><id>14464977</id><snippet>zones</snippet></ROW><ROW><id>14464977</id><snippet>class Player():
    def __init__(self):
        self.zones = {}
        self.zones['hand'] = []
    def InitHand(self):
        for a in range(5):
            self.zones['hand'].append(a)
</snippet></ROW><ROW><id>14465020</id><snippet>multiprocess</snippet></ROW><ROW><id>14465020</id><snippet>pickle</snippet></ROW><ROW><id>14465020</id><snippet>f</snippet></ROW><ROW><id>14465020</id><snippet>.05</snippet></ROW><ROW><id>14465020</id><snippet>x.some_func1</snippet></ROW><ROW><id>14465020</id><snippet>multiprocess</snippet></ROW><ROW><id>14465146</id><snippet>__init__</snippet></ROW><ROW><id>14465236</id><snippet>islice()</snippet></ROW><ROW><id>14465236</id><snippet>import operator

def mergeiter(*iterables, **kwargs):
    """Given a set of sorted iterables, yield the next value in merged order

    Takes an optional `key` callable to compare values by.
    """
    iterables = [iter(it) for it in iterables]
    iterables = {i: [next(it), i, it] for i, it in enumerate(iterables)}
    if 'key' not in kwargs:
        key = operator.itemgetter(0)
    else:
        key = lambda item, key=kwargs['key']: key(item[0])

    while True:
        value, i, it = min(iterables.values(), key=key)
        yield value
        try:
            iterables[i][0] = next(it)
        except StopIteration:
            del iterables[i]
            if not iterables:
                raise
</snippet></ROW><ROW><id>14465359</id><snippet>a</snippet></ROW><ROW><id>14465359</id><snippet>c[0]</snippet></ROW><ROW><id>14465359</id><snippet>c</snippet></ROW><ROW><id>14465359</id><snippet>for i in c:</snippet></ROW><ROW><id>14465359</id><snippet>i</snippet></ROW><ROW><id>14465359</id><snippet>del</snippet></ROW><ROW><id>14465359</id><snippet>for i in c:
   del i
</snippet></ROW><ROW><id>14465359</id><snippet>c</snippet></ROW><ROW><id>14465359</id><snippet>c</snippet></ROW><ROW><id>14465359</id><snippet>def kill(self):
    del self
</snippet></ROW><ROW><id>14465359</id><snippet>mylist = list(range(10000))
mylist[:] = []
print (mylist)
</snippet></ROW><ROW><id>14465359</id><snippet>del mylist[:]  #This will implicitly call the `__delslice__` or `__delitem__` method.
</snippet></ROW><ROW><id>14465359</id><snippet>mylist</snippet></ROW><ROW><id>14465359</id><snippet>mylist</snippet></ROW><ROW><id>14465359</id><snippet>mylist = list(range(10000))
b = mylist
del mylist
#here we didn't get all the references to the objects we created ...
print b #[0, 1, 2, 3, 4, ...]
</snippet></ROW><ROW><id>14465524</id><snippet>"""
Show how to modify the coordinate formatter to report the image "z"
value of the nearest pixel given x and y
"""
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm

X = 10*np.random.rand(5,3)

fig = plt.figure()
ax = fig.add_subplot(111)
ax.imshow(X, cmap=cm.jet, interpolation='nearest')

numrows, numcols = X.shape
def format_coord(x, y):
    col = int(x+0.5)
    row = int(y+0.5)
    if col&gt;=0 and col&lt;numcols and row&gt;=0 and row&lt;numrows:
        z = X[row,col]
        return 'x=%1.4f, y=%1.4f, z=%1.4f'%(x, y, z)
    else:
        return 'x=%1.4f, y=%1.4f'%(x, y)

ax.format_coord = format_coord
plt.show()
</snippet></ROW><ROW><id>14465537</id><snippet>class Computer(object):
    def __init__(self, name, status, date, kind):
        self.name   = name
        self.status = status
        self.date   = date
        self.kind   = kind

    @classmethod    # convenience method for not repeating the name
    def new_to_dict(cls, name, status, date, kind, dictionary):
        dictionary[name] = cls(name, status, date, kind)
</snippet></ROW><ROW><id>14465537</id><snippet>computer_list = []
computer_list.append(Computer("rainier", "online", "1/1/2012", "desktop"))

computer_dict = {}
Computer.new_to_dict("baker", "online", "1/1/2012", "laptop", computer_dict)
</snippet></ROW><ROW><id>14465537</id><snippet>for comp in computer_list:
    print comp.name, comp.status, comp.date, comp.kind
</snippet></ROW><ROW><id>14465537</id><snippet>__str__()</snippet></ROW><ROW><id>14465613</id><snippet>.pop()</snippet></ROW><ROW><id>14465613</id><snippet>for b in list(a):
</snippet></ROW><ROW><id>14465613</id><snippet>for b in a[:]:
</snippet></ROW><ROW><id>14465613</id><snippet>[:]</snippet></ROW><ROW><id>14465613</id><snippet>while</snippet></ROW><ROW><id>14465613</id><snippet>while a:
    print a.pop(0)
</snippet></ROW><ROW><id>14465613</id><snippet>False</snippet></ROW><ROW><id>14465613</id><snippet>for</snippet></ROW><ROW><id>14465613</id><snippet>for</snippet></ROW><ROW><id>14465613</id><snippet>list()</snippet></ROW><ROW><id>14465613</id><snippet>&gt;&gt;&gt; a = [0,1,2,3,4,5]
&gt;&gt;&gt; itera = iter(a)
&gt;&gt;&gt; itera.next()  # index 0 -&gt; a[0] is 0
0
&gt;&gt;&gt; a.pop(0)
0
&gt;&gt;&gt; a
[1,2,3,4,5]
&gt;&gt;&gt; itera.next()  # index 1 -&gt; a[1] is 2
2
</snippet></ROW><ROW><id>14465613</id><snippet>next()</snippet></ROW><ROW><id>14466243</id><snippet>L1.append(elemento)</snippet></ROW><ROW><id>14466243</id><snippet>L1</snippet></ROW><ROW><id>14466243</id><snippet>L1</snippet></ROW><ROW><id>14466243</id><snippet>L2</snippet></ROW><ROW><id>14466243</id><snippet>def altera(L1, L2):
    for elemento in L2:
        # create a new list and assign name L1
        L1 = L1 + [elemento]
    # create a new list and assign name L2
    L2 = L2 + [4]
    return L2

Lista1 = [1,2,3]
Lista2 = [1,2,3]

Lista3 = altera(Lista1, Lista2)

print Lista1
print Lista2
print Lista3
</snippet></ROW><ROW><id>14466243</id><snippet>def altera(L1, L2):
    for elemento in L2:
        # Call method on L1 that changes it
        L1.append(elemento)
    # Call method on L2 that changes it
    L2.append(4)
    # Change object pointed to by name L1 -- Lista1
    L1[-1] = 10
    # Change object pointed to by name L2 -- Lista2
    del L2[0]
    return L2[:]

Lista1 = [1,2,3]
Lista2 = [1,2,3]

Lista3 = altera(Lista1, Lista2)

print Lista1
print Lista2
print Lista3
</snippet></ROW><ROW><id>14466243</id><snippet>L += [2]</snippet></ROW><ROW><id>14466243</id><snippet>L = L + 2</snippet></ROW><ROW><id>14466383</id><snippet>&lt;SCRIPT type="text/x-python" src="path-to-your-pyfile.py"&gt;</snippet></ROW><ROW><id>14466383</id><snippet>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;SCRIPT type="text/javascript" &gt;
var BASE_64_ALPHABET =//for encoding base64
[
 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
 '0','1','2','3','4','5','6','7','8','9','+','/'
];
var BASE_64_PAD = '=';
function valueAt(source,index)
{
    var result = null;

    if(source.charAt)
        result = source.charAt(index);
    else 
        result = source[index];

    if(result.charCodeAt)
        result = result.charCodeAt(0);

    if(result === null | result === undefined)
        return 0;

    return result;
}
function toBase64(data, offset, length)
{
    var padSize = (3-(length % 3));

    if(padSize == 3 &amp;&amp; length != 0)
        padSize = 0;

    var bufferSize = ((4*(length-(length%3)))/3); + padSize;
    var buffer = new Array(bufferSize);

    var iterationLimit = length + (length % 3) - 1;

    var octetMask = 0xFF;
    var sextetMask = 0x3F;

    for(var sourceIndex=0,destinationIndex=0;sourceIndex&lt;iterationLimit;sourceIndex+=3,destinationIndex+=4)
    {
        var readBlock =
        (
            ((valueAt(data, offset+sourceIndex) &amp; octetMask) &lt;&lt; 16) |
            ((valueAt(data, offset+sourceIndex+1) &amp; octetMask) &lt;&lt; 8) |
            (valueAt(data, offset+sourceIndex+2) &amp; octetMask)
        );

        buffer[destinationIndex] = BASE_64_ALPHABET[(readBlock &gt;&gt;&gt; 18) &amp; sextetMask];
        buffer[destinationIndex+1] = BASE_64_ALPHABET[(readBlock &gt;&gt;&gt; 12) &amp; sextetMask];
        buffer[destinationIndex+2] = BASE_64_ALPHABET[(readBlock &gt;&gt;&gt; 6) &amp; sextetMask];
        buffer[destinationIndex+3] = BASE_64_ALPHABET[readBlock &amp; sextetMask];
    }
    for(var i = 0; i &lt; padSize; i++)
        buffer[buffer.length - 1 - i] = BASE_64_PAD;

    return buffer.join("");
}

function makeDataURI()
{
    var data = document.getElementById("datasource").value;
    var mime = document.getElementById("mimesource").value;
    alert("data:"+mime+";base64,"+toBase64(data,0,data.length));
}

&lt;/SCRIPT&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;INPUT id="datasource" type="text" value="enter your file data here"&gt;&lt;/INPUT&gt;
&lt;INPUT id="mimesource" type="text" value="enter your mime type here"&gt;&lt;/INPUT&gt;
&lt;INPUT type="button" onclick="makeDataURI();" value="Generate URI"&gt;&lt;/INPUT&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>14466599</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14466599</id><snippet>/path/to/custom-packages</snippet></ROW><ROW><id>14466716</id><snippet>mousePressEvent</snippet></ROW><ROW><id>14466716</id><snippet>QGraphicsView</snippet></ROW><ROW><id>14466716</id><snippet>mousePressEvent</snippet></ROW><ROW><id>14466716</id><snippet>def mousePressEvent(self , e):
    self.endx = e.x()
    self.endy = e.y()
    if self.sender == 1:
        self.LineChange(self.endx , self.endy)
    # let the base implementation do its thing
    super(Palette, self).mousePressEvent(e)
</snippet></ROW><ROW><id>14466768</id><snippet>obj.__dict__</snippet></ROW><ROW><id>14466768</id><snippet>vars(obj)</snippet></ROW><ROW><id>14466768</id><snippet>argparse</snippet></ROW><ROW><id>14466768</id><snippet>namespace</snippet></ROW><ROW><id>14466768</id><snippet>yes</snippet></ROW><ROW><id>14466843</id><snippet>temp</snippet></ROW><ROW><id>14466843</id><snippet>1/2</snippet></ROW><ROW><id>14466843</id><snippet>1./2</snippet></ROW><ROW><id>14466843</id><snippet>0.5</snippet></ROW><ROW><id>14466843</id><snippet>temp=1./2*(1-muy1)**2-1./2*(1-muy2)**2
</snippet></ROW><ROW><id>14467016</id><snippet>uint16</snippet></ROW><ROW><id>14467016</id><snippet>import numpy as np
import timeit

rows, cols = 768, 1024
image = numpy.random.randint(100, 14000,
                             size=(1, rows, cols)).astype(numpy.uint16)
display_min = 1000
display_max = 10000

def display(image, display_min, display_max): # copied from Bi Rico
    # Here I set copy=True in order to ensure the original image is not
    # modified. If you don't mind modifying the original image, you can
    # set copy=False or skip this step.
    image = np.array(image, copy=True)
    image.clip(display_min, display_max, out=image)
    image -= display_min
    image //= (display_max - display_min + 1) / 256.
    return image.astype(np.uint8)

def lut_display(image, display_min, display_max) :
    lut = np.arange(2**16, dtype='uint16')
    lut = display(lut, display_min, display_max)
    return np.take(lut, image)

&gt;&gt;&gt; print np.all(display(image, display_min,
                         display_max) == lut_display(image, display_min,
                                                     display_max))
True
&gt;&gt;&gt; timeit.timeit('display(image, display_min, display_max)',
                  'from __main__ import display, image, display_min, display_max',
                   number=10)
0.304813282062
&gt;&gt;&gt; timeit.timeit('lut_display(image, display_min, display_max)',
                  'from __main__ import lut_display, image, display_min, display_max',
                  number=10)
0.0591987428298
</snippet></ROW><ROW><id>14467039</id><snippet>descriptors</snippet></ROW><ROW><id>14467039</id><snippet>Derived</snippet></ROW><ROW><id>14467039</id><snippet>foo</snippet></ROW><ROW><id>14467039</id><snippet>Base.__init__</snippet></ROW><ROW><id>14467039</id><snippet>Derived</snippet></ROW><ROW><id>14467039</id><snippet>__init__</snippet></ROW><ROW><id>14467039</id><snippet>foo</snippet></ROW><ROW><id>14467039</id><snippet>class Base: #old style class
</snippet></ROW><ROW><id>14467039</id><snippet>class Base(object):  #new style class
</snippet></ROW><ROW><id>14467039</id><snippet>setter</snippet></ROW><ROW><id>14467039</id><snippet>self.foo = 1</snippet></ROW><ROW><id>14467039</id><snippet>Base.__init__</snippet></ROW><ROW><id>14467039</id><snippet>AttributeError</snippet></ROW><ROW><id>14467210</id><snippet>#include &lt;math.h&gt;
#include &lt;stdlib.h&gt;

float *sin_array(const float *input, size_t elements)
{
    int i = 0;
    float *output = malloc(sizeof(float) * elements);
    for (i = 0; i &lt; elements; ++i) {
        output[i] = sin(input[i]);
    }
    return output;
}
</snippet></ROW><ROW><id>14467210</id><snippet>#include &lt;math.h&gt;
#include &lt;stdlib.h&gt;

extern float *sin_array(const float *input, size_t elements)

int main(void)
{
    int i;
    int nbr_values = 8192;
    int n_iter = 100000;
    float *x = malloc(sizeof(float) * nbr_values);  
    for (i = 0; i &lt; nbr_values; ++i) {
        x[i] = 1;
    }
    for (i=0; i&lt;n_iter; i++) {
        float *newary = sin_array(x, nbr_values);
        free(x);
        x = newary;
    }
    return 0;
}
</snippet></ROW><ROW><id>14467210</id><snippet>$ time python foo.py 

real    0m5.986s
user    0m5.783s
sys 0m0.050s
$ gcc -O3 -ffast-math sinary.c sinary2.c -lm
$ time ./a.out 

real    0m5.204s
user    0m4.995s
sys 0m0.208s
</snippet></ROW><ROW><id>14467210</id><snippet>sin_array</snippet></ROW><ROW><id>14467210</id><snippet>main</snippet></ROW><ROW><id>14467210</id><snippet>float</snippet></ROW><ROW><id>14467210</id><snippet>double</snippet></ROW><ROW><id>14467210</id><snippet>sin</snippet></ROW><ROW><id>14467447</id><snippet>xls = xlrd.open_workbook(xlsname)
worksheet = xls.sheet_by_name('Accounts') # Use whatever name is on the worksheet tab in excel
max_col = worksheet.ncols - 1 # Cells addressed from 0
max_row = worksheet.nrows - 1 # Cells addressed from 0
account_col = 0 # Assuming it's the first column

for row in xrange(0, max_row):
    value = xlrd.cell_value(row, account_col)
    if value in favorites:
        print "Do something"
        print "I can address other cells in this row if I want"
        for col in xrange(0, max_col):
            new_value = xlrd.cell_value(row, col)
</snippet></ROW><ROW><id>14467474</id><snippet>/home/brian/dev/py/datetime.py</snippet></ROW><ROW><id>14467474</id><snippet>datetime.py</snippet></ROW><ROW><id>14467704</id><snippet>listbox</snippet></ROW><ROW><id>14467704</id><snippet>y</snippet></ROW><ROW><id>14467704</id><snippet>x</snippet></ROW><ROW><id>14467704</id><snippet> self.nearest(event.x)     # wrong
 self.nearest(event.y)     # right
</snippet></ROW><ROW><id>14467704</id><snippet>    listbox = Listbox(frame)
</snippet></ROW><ROW><id>14467704</id><snippet>nearest</snippet></ROW><ROW><id>14467704</id><snippet>event.widget</snippet></ROW><ROW><id>14467704</id><snippet>self.curIndex = event.widget.nearest(event.y)
</snippet></ROW><ROW><id>14467744</id><snippet>time</snippet></ROW><ROW><id>14467744</id><snippet>time.struct_time</snippet></ROW><ROW><id>14467744</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.mktime((2005,4,13,14,30,0,0,0,-1))
1113395400.0
</snippet></ROW><ROW><id>14467744</id><snippet>Your time zone: 4/13/2005 2:30:00 PM GMT+2
</snippet></ROW><ROW><id>14468057</id><snippet>deck.append([num, suite])
</snippet></ROW><ROW><id>14468057</id><snippet>deck.append(Card(num, suite))
</snippet></ROW><ROW><id>14468057</id><snippet>deck</snippet></ROW><ROW><id>14468057</id><snippet>Card</snippet></ROW><ROW><id>14468057</id><snippet>Card</snippet></ROW><ROW><id>14468057</id><snippet>[num, suite]</snippet></ROW><ROW><id>14468057</id><snippet>print hand
</snippet></ROW><ROW><id>14468057</id><snippet>[["Jack", "Clubs"], ["9", "Spades"]]
</snippet></ROW><ROW><id>14468057</id><snippet>[Jack of Clubs, 9 of Spades]
</snippet></ROW><ROW><id>14468057</id><snippet>print "\n".join(map(str, hand)))</snippet></ROW><ROW><id>14468057</id><snippet>sum(c.BJValue() for c in hand)
</snippet></ROW><ROW><id>14468095</id><snippet>DateField</snippet></ROW><ROW><id>14468095</id><snippet>DateTimeField</snippet></ROW><ROW><id>14468339</id><snippet>def halftone_reshape(image, mask):
    # you can make up a nicer reshape code maybe, it is a bit ugly. The
    # rolling window code can do this too (but much more general then reshape).
    new_shape = np.array(zip(image.shape, mask.shape))
    new_shape[:,0] /= new_shape[:,1]
    reshaped_image = image.reshape(new_shape.ravel())

    reshaped_mask = mask[None,:,None,:,None,:]

    # and now they just broadcast:
    result_funny_shaped = reshaped_image &gt;= reshaped_mask

    # And you can just reshape it back:
    return result_funny_shaped.reshape(image.shape)
</snippet></ROW><ROW><id>14468339</id><snippet>In [172]: %timeit halftone_reshape(image, mask)
1 loops, best of 3: 280 ms per loop

In [173]: %timeit halftone_1(image, mask)
1 loops, best of 3: 354 ms per loop

In [174]: %timeit halftone_2(image, mask)
1 loops, best of 3: 3.1 s per loop
</snippet></ROW><ROW><id>14468423</id><snippet>type__label</snippet></ROW><ROW><id>14468423</id><snippet>label</snippet></ROW><ROW><id>14468423</id><snippet>Type</snippet></ROW><ROW><id>14468423</id><snippet>Type.objects.values_list('label', flat=True)
</snippet></ROW><ROW><id>14468433</id><snippet>n = input("Enter n:")

def harmonic(n): #original harmonic series
     a=1
     b=1
     for d in range(2, n+1):
         a = a*d+b
         b = b*d
     return(a,b)


def harmonic_lt(n): #_lt: harmonic series with lowest terms
                    #not pythonic, but simple
    a=1
    b=1
    for d in range(2, n+1):
        a = a*d+b
        b = b*d

    y=a
    x=b
    while x &gt; 0:
        re = y % x
        y = x
        x = re

    a=a/y
    b=b/y
    return(a,b)

print harmonic(n)
print harmonic_lt(n)
</snippet></ROW><ROW><id>14468486</id><snippet>url</snippet></ROW><ROW><id>14468486</id><snippet>import requests
with open('urls.txt') as urls:
    for url in urls:
        url = url.strip()
        r = requests.get(url)
        print url, r.status_code
</snippet></ROW><ROW><id>14468486</id><snippet>.strip()</snippet></ROW><ROW><id>14468486</id><snippet>print</snippet></ROW><ROW><id>14468501</id><snippet>'n,m'</snippet></ROW><ROW><id>14468501</id><snippet>r_</snippet></ROW><ROW><id>14468501</id><snippet>axis=n</snippet></ROW><ROW><id>14468501</id><snippet>m</snippet></ROW><ROW><id>14468501</id><snippet>In [28]: np.r_['0,2', [1,2,3], [4,5,6]]
Out[28]: 
array([[1, 2, 3],
       [4, 5, 6]])
</snippet></ROW><ROW><id>14468501</id><snippet>(6,)</snippet></ROW><ROW><id>14468501</id><snippet>m=2</snippet></ROW><ROW><id>14468501</id><snippet>r_</snippet></ROW><ROW><id>14468501</id><snippet>(2,3)</snippet></ROW><ROW><id>14468501</id><snippet>In [32]: np.r_['0,2', [1,2,3,], [4,5,6]].shape
Out[32]: (2, 3)
</snippet></ROW><ROW><id>14468501</id><snippet>m</snippet></ROW><ROW><id>14468501</id><snippet>In [36]: np.r_['0,3', [1,2,3,], [4,5,6]].shape
Out[36]: (2, 1, 3)    # &lt;- 3 dimensions

In [37]: np.r_['0,4', [1,2,3,], [4,5,6]].shape
Out[37]: (2, 1, 1, 3) # &lt;- 4 dimensions
</snippet></ROW><ROW><id>14468501</id><snippet>n</snippet></ROW><ROW><id>14468501</id><snippet>m</snippet></ROW><ROW><id>14468501</id><snippet>n</snippet></ROW><ROW><id>14468501</id><snippet>m</snippet></ROW><ROW><id>14468501</id><snippet>r_</snippet></ROW><ROW><id>14468501</id><snippet>np.concatenate</snippet></ROW><ROW><id>14468501</id><snippet>np.row_stack</snippet></ROW><ROW><id>14468501</id><snippet>np.column_stack</snippet></ROW><ROW><id>14468501</id><snippet>np.hstack</snippet></ROW><ROW><id>14468501</id><snippet>np.vstack</snippet></ROW><ROW><id>14468501</id><snippet>np.dstack</snippet></ROW><ROW><id>14468501</id><snippet>In [38]: %timeit np.r_['0,4', [1,2,3,], [4,5,6]]
10000 loops, best of 3: 38 us per loop
In [43]: %timeit np.concatenate(([1,2,3,], [4,5,6])).reshape(2,1,1,3)
100000 loops, best of 3: 10.2 us per loop
</snippet></ROW><ROW><id>14468635</id><snippet>pattern = 'r"""' + pattern + '"""'
</snippet></ROW><ROW><id>14468635</id><snippet>pattern</snippet></ROW><ROW><id>14468635</id><snippet>&lt;p (class="test"&gt;.+?)&lt;/p&gt;</snippet></ROW><ROW><id>14468635</id><snippet>replaced = re.sub(r"""\w+""", '-')
</snippet></ROW><ROW><id>14468635</id><snippet>r"""</snippet></ROW><ROW><id>14468635</id><snippet>\w</snippet></ROW><ROW><id>14468635</id><snippet>'\\w+'</snippet></ROW><ROW><id>14468635</id><snippet>replaced = re.sub(r'\w+', '-')
</snippet></ROW><ROW><id>14468635</id><snippet>for search in file:
    search = search.rstrip() #Remove the trailing \n from the input
    pattern, replacement = search.split(separator)
</snippet></ROW><ROW><id>14469087</id><snippet>Host</snippet></ROW><ROW><id>14469087</id><snippet>GET</snippet></ROW><ROW><id>14469087</id><snippet>os.environ[]</snippet></ROW><ROW><id>14469217</id><snippet>active</snippet></ROW><ROW><id>14469217</id><snippet>&lt;state state_id="active" title=""&gt;
 &lt;!-- other information elided here --&gt; 
 &lt;permission-map name="View" acquired="False"&gt;
   &lt;permission-role&gt;Manager&lt;/permission-role&gt;
   &lt;permission-role&gt;Owner&lt;/permission-role&gt;
   &lt;permission-role&gt;Reviewer&lt;/permission-role&gt;
   &lt;permission-role&gt;SalesRep&lt;/permission-role&gt;
   &lt;permission-role&gt;Site Administrator&lt;/permission-role&gt;
  &lt;/permission-map&gt;
</snippet></ROW><ROW><id>14469217</id><snippet>active</snippet></ROW><ROW><id>14469217</id><snippet>.unrestrictedSearchResults()</snippet></ROW><ROW><id>14469217</id><snippet>lookup1 = self.catalog.unrestrictedSearchResults(
    portal_type='SalesProduct', Title='Product 1', review_state='active')
</snippet></ROW><ROW><id>14469217</id><snippet>getObject()</snippet></ROW><ROW><id>14469217</id><snippet>._unrestrictedGetObject()</snippet></ROW><ROW><id>14469217</id><snippet>obj = brain._unrestrictedGetObject()
</snippet></ROW><ROW><id>14469242</id><snippet>iter()</snippet></ROW><ROW><id>14469242</id><snippet>for myVar in iter(myFunc, sentinel):
    print myVar
</snippet></ROW><ROW><id>14469242</id><snippet>while True:
    myVar = myFunc()
    if myVar == sentinel:
        break
    print myVar
</snippet></ROW><ROW><id>14469242</id><snippet>iter()</snippet></ROW><ROW><id>14469242</id><snippet>next()</snippet></ROW><ROW><id>14469242</id><snippet>StopIteration</snippet></ROW><ROW><id>14469273</id><snippet>ranges = [(48,50),(50,52),...(98,100)]
</snippet></ROW><ROW><id>14469273</id><snippet>ages= ['70.37668898', '72.15779044', '73.25278702', '72.18979793', '80.73137673','55.43124818' '54.16265064', '54.16540964', ...]

result = [ [ 1 if (r[0] &lt;= age &lt;= r[1]) else 0 for r in ranges] for age in ages]
</snippet></ROW><ROW><id>14469273</id><snippet>result = [ [ 1 if (r[0] &lt;= age &lt;= r[1]) else 0 for r in ( (i-2,i) for i in range(50,100,2)) ] for age in ages]
</snippet></ROW><ROW><id>14469340</id><snippet>string.startswith()</snippet></ROW><ROW><id>14469340</id><snippet>&gt;&gt;&gt; g = "COPB2A"
&gt;&gt;&gt; f = "COPB2"
&gt;&gt;&gt; g.startswith(f)
True
</snippet></ROW><ROW><id>14469340</id><snippet>file1_list = []
with open(in_file1, "r") as names:
    for line in names:
        line_items = line.split()
        for item in line_items:
            file1_list.append(item)

matches = []
with open(in_file2, "r") as symbols:
    for line in symbols:
        file2_items = line.split()
        for file2_item in file2_items:
            for file1_item in file1_list:
                if file2_item.startswith(file1_item):
                    matches.append(file2_item)
                    print file2_item
print matches
</snippet></ROW><ROW><id>14469387</id><snippet>prices = {'banana':'4', 'apple':'2', 'pear':'3'}
stock = {'banana':6, 'orange':32, 'pear':15}
for item in (prices.keys() &amp; stock.keys()):
    print (item,"price:",prices.get(item,'-'),"stock:",stock.get(item,0))
</snippet></ROW><ROW><id>14469387</id><snippet>orange price: - stock: 32
pear price: 3 stock: 15
banana price: 4 stock: 6
apple price: 2 stock: 0
</snippet></ROW><ROW><id>14469387</id><snippet>.get()</snippet></ROW><ROW><id>14469387</id><snippet>prices.keys() &amp; stock.keys()  #{'orange', 'pear', 'banana', 'apple'}
</snippet></ROW><ROW><id>14469387</id><snippet>set(prices.keys().extend(stock.keys())
</snippet></ROW><ROW><id>14469387</id><snippet>&amp;</snippet></ROW><ROW><id>14469551</id><snippet>python main.py</snippet></ROW><ROW><id>14469834</id><snippet>In [173]: from django.template.defaultfilters import  date 

In [174]: date??
Type:       function
String Form:&lt;function date at 0xa2935f0&gt;
File:       /usr/local/python/thor/lib/python2.7/site-packages/django/template/defaultfilters.py
Definition: date(value, arg=None)
Source:
@register.filter(expects_localtime=True, is_safe=False)
def date(value, arg=None):
    """Formats a date according to the given format."""
    if not value:
        return u''
    if arg is None:
        arg = settings.DATE_FORMAT
    try:
        return formats.date_format(value, arg)
    except AttributeError:
        try:
            return format(value, arg)
        except AttributeError:
            return ''
</snippet></ROW><ROW><id>14469834</id><snippet>register.filter</snippet></ROW><ROW><id>14469834</id><snippet>{% load &lt;template library&gt; %}</snippet></ROW><ROW><id>14469834</id><snippet>&lt;module&gt;.templatetags</snippet></ROW><ROW><id>14469834</id><snippet>django.template.defaulttags</snippet></ROW><ROW><id>14469834</id><snippet>django.template.defaultfilters</snippet></ROW><ROW><id>14469834</id><snippet>escapejs</snippet></ROW><ROW><id>14469834</id><snippet>django.utils.html</snippet></ROW><ROW><id>14469834</id><snippet>_base_js_escapes = (
    ('\\', r'\u005C'),
    ('\'', r'\u0027'),
    ('"', r'\u0022'),
    ('&gt;', r'\u003E'),
    ('&lt;', r'\u003C'),
    ('&amp;', r'\u0026'),
    ('=', r'\u003D'),
    ('-', r'\u002D'),
    (';', r'\u003B'),
    (u'\u2028', r'\u2028'),
    (u'\u2029', r'\u2029')
)

# Escape every ASCII character with a value less than 32.
_js_escapes = (_base_js_escapes +
               tuple([('%c' % z, '\\u%04X' % z) for z in range(32)]))

def escapejs(value):
    """Hex encodes characters for use in JavaScript strings."""
    for bad, good in _js_escapes:
        value = mark_safe(force_unicode(value).replace(bad, good))
    return value
</snippet></ROW><ROW><id>14469885</id><snippet>save</snippet></ROW><ROW><id>14469885</id><snippet>force_insert</snippet></ROW><ROW><id>14469885</id><snippet>def test_unique_id(self):
        with self.assertRaises(IntegrityError):
            badSite = Site(id=0, name='Bad Site')
            badSite.save(force_insert=True)
            badSite.delete()
</snippet></ROW><ROW><id>14470015</id><snippet>RMSE</snippet></ROW><ROW><id>14470015</id><snippet>import sys
import numpy
from scipy.ndimage import morphology, label, find_objects
from PIL import Image

COLORS = range(4)
RED, GREEN, BLUE, BLACK = COLORS

def card_color(img):
    im = img.load()
    width, height = img.size
    black, blue, green, red = 0, 0, 0, 0
    for x in xrange(width):
        for y in xrange(height):
            r, g, b = im[x, y]
            if r &gt; 200 and g &gt; 200 and b &gt; 200:
                # "white", ignore
                continue

            if r &gt; 200 and g &lt; 100 and b &lt; 100:
                red += 1
            elif r &lt; 100 and g &lt; 100 and b &gt; 200:
                blue += 1
            elif r &lt; 50 and g &lt; 50 and b &lt; 50:
                black += 1
            elif r &lt; 100 and g &gt; 120 and b &lt; 50: # dark green
                green += 1
    return max(zip((black, blue, green, red), COLORS))

def euler_number(img, conn=4):
    im = img.load()
    width, height = img.size

    c1, c2, c3 = 0, 0, 0
    for x in xrange(width - 1):
        for y in xrange(height - 1):
            s = (im[x,y] + im[x+1,y] + im[x,y+1] + im[x+1,y+1]) / 255
            if s == 1:
                c1 += 1
            elif s == 2:
                if (im[x+1,y] and im[x,y+1]) or (im[x,y] and im[x+1,y+1]):
                    c3 += 1
            elif s == 3:
                c2 += 1
    if conn == 4:
        return (c1 - c2 + 2 * c3) / 4
    else: # 8
        return (c1 - c2 - 2 * c3) / 4

def carefully_binarize(img, color):
    if color == BLACK:
        img = img.convert('L')
    else:
        img = img.split()[color]
    width, height = img.size
    im = numpy.empty((height + 2, width + 2), dtype=numpy.uint8) # Padding
    im.fill(255)
    im[1:-1, 1:-1] = numpy.array(img)
    threshold = im.mean() - im.std()
    im[im &lt;= threshold] = 1
    im[im &gt; threshold] = 0
    # Discard small components.
    lbl, ncc = label(im)
    for i in xrange(1, ncc + 1):
        py, px = numpy.nonzero(lbl == i)
        if len(py) &lt; 30:
            im[lbl == i] = 0
    return Image.fromarray(im * 255)

def discard_bottom(img, k=0.5):
    width, height = img.size
    im = numpy.array(img)
    limit = height * k
    lbl, ncc = label(im)
    for i, oslice in enumerate(find_objects(lbl)):
        srow, scol = oslice
        if srow.stop &gt; limit:
            ncc -= 1
            im[srow.start:srow.stop, scol.start:scol.stop] = 0
    return Image.fromarray(im), ncc

def signature(img):
    # Assumption: a single connected component is present now.
    im = numpy.array(img)
    im = morphology.binary_fill_holes(im)
    im = morphology.binary_dilation(im) - im

    py, px = numpy.nonzero(im)
    return Image.fromarray(im.astype(numpy.uint8)*255), zip(py, px)

def hausdorff(a, b):
    dist = 0
    for ai in a:
        mindist = float('inf')
        for bi in b:
            chess = max(abs(ai[0]-bi[0]), abs(ai[1]-bi[1]))
            if chess &lt; mindist:
                mindist = chess
        if mindist &gt; dist:
            dist = mindist
    return dist

img1 = Image.open(sys.argv[1]).convert('RGB')
dirpath = sys.argv[2]

img1_color = card_color(img1)[1]
img1 = carefully_binarize(img1, img1_color)
img1_top, img1_top_ncc = discard_bottom(img1)
img1_top_en = euler_number(img1_top)

feature = [img1_color, img1_top_ncc, img1_top_en]

match = []
for fname in os.listdir(dirpath):
    try:
        img2 = Image.open(os.path.join(dirpath, fname)).convert('RGB')
    except IOError:
        print "Ignoring", fname
        continue

    if card_color(img2)[1] != feature[0]:
        continue

    img2 = carefully_binarize(img2, feature[0])
    img2_top, ncc = discard_bottom(img2)
    if ncc != feature[1]:
        continue
    en = euler_number(img2_top)
    if en != feature[2]:
        continue

    match.append((img2_top, os.path.join(dirpath, fname)))

if len(match) == 1:
    print "Here is your best match:", match[0][1]
else:
    img1_sig, sig1 = signature(img1_top)
    best_match = float('inf'), None
    for img2, fname in match:
        img2_sig, sig2 = signature(img2)
        dist = hausdorff(sig1, sig2)
        if dist &lt; best_match[0]:
            best_match = dist, fname

    print "Best match:", best_match[1]
</snippet></ROW><ROW><id>14470260</id><snippet>&lt; {file}</snippet></ROW><ROW><id>14470260</id><snippet>from subprocess import *

# have shell interpret redirection
check_call('wc -l &lt; /etc/hosts', shell=True)

# set up redirection in Python
with open('/etc/hosts', 'r') as f:
    check_call(['wc', '-l'], stdin=f.fileno())
</snippet></ROW><ROW><id>14470294</id><snippet>import pymongo
from pymongo import MongoClient
connection = MongoClient()
db = connection.mydatabase
</snippet></ROW><ROW><id>14470294</id><snippet>import pymongo
from pymongo import MongoClient
connection = MongoClient()
connection.database_names()
</snippet></ROW><ROW><id>14470346</id><snippet>#!/usr/bin/perl
use strict;
use warnings;

my @nums;
# Reading:
for my $file (0 .. 40_000) {
    open my $IN, '&lt;', "file-$file" or die $!;
    while (&lt;$IN&gt;) {
        chomp;
        $nums[$file][$.-1] = $_;
    }
}

# Writing:
for my $line (0 .. 1444) {
    open my $OUT, '&gt;', "abc$line.dat" or die $!;
    for my $file (0 .. 40_000) {
        print $OUT $nums[$file][$line], "\n";
    }
}
</snippet></ROW><ROW><id>14470821</id><snippet>for</snippet></ROW><ROW><id>14470821</id><snippet>StopIteration</snippet></ROW><ROW><id>14470821</id><snippet>try:
    state = 0
    for line in cmLines:
        if state == 0:
            if "INFERNAL1/a" in line or "HMMER3/f" in line:
                title = line
                state = 1
        elif state == 1:
            if word2(line) in NamesList:
                output.write(title)
                output.write(line)
                state = 2
            else:
                state = 0
        elif state == 2:
            output.write(line)
            if '//' in line:
                state = 0
except Exception as e:
    print "Loop exited becuase:"
    print type(e)
    print "at " + line
finally:
    output.close()
</snippet></ROW><ROW><id>14470821</id><snippet>yield from foo()</snippet></ROW><ROW><id>14470821</id><snippet>for x in foo(): yield x</snippet></ROW><ROW><id>14470821</id><snippet>while</snippet></ROW><ROW><id>14470821</id><snippet>next</snippet></ROW><ROW><id>14470821</id><snippet>for</snippet></ROW><ROW><id>14470821</id><snippet>try</snippet></ROW><ROW><id>14470821</id><snippet>finally</snippet></ROW><ROW><id>14470821</id><snippet>with</snippet></ROW><ROW><id>14470821</id><snippet>output = open('foo', 'w')
try:
    blah blah
finally:
    output.close()
</snippet></ROW><ROW><id>14470821</id><snippet>with open('foo', 'w') as output:
    blah blah
</snippet></ROW><ROW><id>14470821</id><snippet>output</snippet></ROW><ROW><id>14470821</id><snippet>with contextlib.closing(output):
    blah blah
</snippet></ROW><ROW><id>14470858</id><snippet>and</snippet></ROW><ROW><id>14470858</id><snippet>or</snippet></ROW><ROW><id>14471166</id><snippet>UserKeyword</snippet></ROW><ROW><id>14471166</id><snippet>Keyword</snippet></ROW><ROW><id>14471166</id><snippet>User</snippet></ROW><ROW><id>14471166</id><snippet>User</snippet></ROW><ROW><id>14471166</id><snippet>Keyword</snippet></ROW><ROW><id>14471166</id><snippet>User.user_keywords</snippet></ROW><ROW><id>14471166</id><snippet>Keyword</snippet></ROW><ROW><id>14471166</id><snippet>&gt;&gt;&gt; rory.keywords.remove(chicken)

# empty as we expect
&gt;&gt;&gt; rory.user_keywords
[]   

# but the other side, still populated.  UserKeyword 
# has no User, but still has Keyword
&gt;&gt;&gt; chicken.user_keywords
[&lt;__main__.UserKeyword object at 0x101748d10&gt;]

# but the User on that UserKeyword is None
&gt;&gt;&gt; chicken.user_keywords[0].user is None
True

# hence accessing the "association" gives us None
# as well
&gt;&gt;&gt; chicken.users
[None]
</snippet></ROW><ROW><id>14471166</id><snippet>UserKeyword</snippet></ROW><ROW><id>14471166</id><snippet>User</snippet></ROW><ROW><id>14471166</id><snippet>Keyword.user_keywords</snippet></ROW><ROW><id>14471166</id><snippet>User.user_keywords</snippet></ROW><ROW><id>14471166</id><snippet>del chicken.user_keywords[0]</snippet></ROW><ROW><id>14471166</id><snippet>UserKeyword</snippet></ROW><ROW><id>14471166</id><snippet>UserKeyword</snippet></ROW><ROW><id>14471166</id><snippet>UserKeyword</snippet></ROW><ROW><id>14471166</id><snippet>Keyword</snippet></ROW><ROW><id>14471166</id><snippet>rory.keywords.append(chicken)

session.flush()

rory.keywords.remove(chicken)

session.flush()
</snippet></ROW><ROW><id>14471166</id><snippet>INSERT INTO "user" (name) VALUES (%(name)s) RETURNING "user".id
{'name': 'rory'}

INSERT INTO keyword (keyword) VALUES (%(keyword)s) RETURNING keyword.id
{'keyword': 'chicken'}

INSERT INTO user_keyword (user_id, keyword_id, special_key) VALUES (%(user_id)s, %(keyword_id)s, %(special_key)s)
{'keyword_id': 1, 'special_key': None, 'user_id': 1}

DELETE FROM user_keyword WHERE user_keyword.user_id = %(user_id)s AND user_keyword.keyword_id = %(keyword_id)s
{'keyword_id': 1, 'user_id': 1}
</snippet></ROW><ROW><id>14471236</id><snippet>import re
m = re.search(r'\d+$', string)
# if the string ends in digits m will be a Match object, or None otherwise.
if m is not None:
    print m.group()
</snippet></ROW><ROW><id>14471383</id><snippet>for i in range(len(t.columns.levels)):
    if t.columns.levels[i].dtype == np.int64:
        t.columns.levels[i] = t.columns.levels[i].astype(np.float64)
</snippet></ROW><ROW><id>14471421</id><snippet>text[i+actnum]</snippet></ROW><ROW><id>14471421</id><snippet>def flip(keyword,t,unflip=False):
    text = list(t)
    key = map(lambda x: ord(x)-ord('a'), keyword.lower())

    trange = reversed(range(len(text))) if unflip else range(len(text))

    for i in trange:
        keynum = i%len(keyword)
        actnum = key[keynum]%len(text)
        text[i],text[actnum] = text[actnum],text[i]
        print '%2d &lt;-&gt; %2d  '%(i,actnum),''.join(text)

    return ''.join(text)


x = flip("WONDERLAND","But I didn't think.")
print
flip("WONDERLAND",x,unflip=True)
</snippet></ROW><ROW><id>14471421</id><snippet> 0 &lt;-&gt;  3    utBI didn't think.
 1 &lt;-&gt; 14    htBI didn't tuink.
 2 &lt;-&gt; 13    htBI didn't tuink.
 3 &lt;-&gt;  3    htBI didn't tuink.
 4 &lt;-&gt;  4    htBI didn't tuink.
 5 &lt;-&gt; 17    htBIkdidn't tuin .
 6 &lt;-&gt; 11    htBIktidn'd tuin .
 7 &lt;-&gt;  0   ihtBIkt dn'd tuin .
 8 &lt;-&gt; 13   ihtBIkt tn'd duin .
 9 &lt;-&gt;  3   ihtnIkt tB'd duin .
10 &lt;-&gt;  3   iht'Ikt tBnd duin .
11 &lt;-&gt; 14   iht'Ikt tBnu ddin .
12 &lt;-&gt; 13   iht'Ikt tBnud din .
13 &lt;-&gt;  3   iht Ikt tBnud'din .
14 &lt;-&gt;  4   iht dkt tBnud'Iin .
15 &lt;-&gt; 17   iht dkt tBnud'I ni.
16 &lt;-&gt; 11   iht dkt tBnnd'I ui.
17 &lt;-&gt;  0   iht dkt tBnnd'I ui.
18 &lt;-&gt; 13   iht dkt tBnnd.I ui'

18 &lt;-&gt; 13   iht dkt tBnnd'I ui.
17 &lt;-&gt;  0   iht dkt tBnnd'I ui.
16 &lt;-&gt; 11   iht dkt tBnud'I ni.
15 &lt;-&gt; 17   iht dkt tBnud'Iin .
14 &lt;-&gt;  4   iht Ikt tBnud'din .
13 &lt;-&gt;  3   iht'Ikt tBnud din .
12 &lt;-&gt; 13   iht'Ikt tBnu ddin .
11 &lt;-&gt; 14   iht'Ikt tBnd duin .
10 &lt;-&gt;  3   ihtnIkt tB'd duin .
 9 &lt;-&gt;  3   ihtBIkt tn'd duin .
 8 &lt;-&gt; 13   ihtBIkt dn'd tuin .
 7 &lt;-&gt;  0    htBIktidn'd tuin .
 6 &lt;-&gt; 11    htBIkdidn't tuin .
 5 &lt;-&gt; 17    htBI didn't tuink.
 4 &lt;-&gt;  4    htBI didn't tuink.
 3 &lt;-&gt;  3    htBI didn't tuink.
 2 &lt;-&gt; 13    htBI didn't tuink.
 1 &lt;-&gt; 14    utBI didn't think.
 0 &lt;-&gt;  3   But I didn't think.
</snippet></ROW><ROW><id>14471546</id><snippet>reload</snippet></ROW><ROW><id>14471546</id><snippet>reload</snippet></ROW><ROW><id>14471546</id><snippet>odbchelper</snippet></ROW><ROW><id>14471546</id><snippet>odbcstuff</snippet></ROW><ROW><id>14471546</id><snippet>reload(odbchelper)</snippet></ROW><ROW><id>14471546</id><snippet>odbcstuff</snippet></ROW><ROW><id>14471546</id><snippet>reload</snippet></ROW><ROW><id>14471546</id><snippet>reload</snippet></ROW><ROW><id>14471546</id><snippet>import odbcstuff
reload(odbcstuff)
</snippet></ROW><ROW><id>14471546</id><snippet>odbcstuff</snippet></ROW><ROW><id>14471546</id><snippet>odbchelper</snippet></ROW><ROW><id>14471546</id><snippet>odbchelper.odbcstuff = odbcstuff     # update odbchelper with the reloaded odbcstuff
</snippet></ROW><ROW><id>14471546</id><snippet>reload</snippet></ROW><ROW><id>14471843</id><snippet>socket.ssl()</snippet></ROW><ROW><id>14471843</id><snippet>socket.wrap_socket()</snippet></ROW><ROW><id>14471843</id><snippet>import ssl</snippet></ROW><ROW><id>14471843</id><snippet>def ssl(sock, keyfile=None, certfile=None):
    # we do an internal import here because the ssl
    # module imports the socket module
    import ssl as _realssl
    warnings.warn("socket.ssl() is deprecated.  Use ssl.wrap_socket() instead.",
                  DeprecationWarning, stacklevel=2)
    return _realssl.sslwrap_simple(sock, keyfile, certfile)
</snippet></ROW><ROW><id>14472089</id><snippet>bmp</snippet></ROW><ROW><id>14472089</id><snippet>PIL</snippet></ROW><ROW><id>14472089</id><snippet>fftshift</snippet></ROW><ROW><id>14472089</id><snippet>numpy.array</snippet></ROW><ROW><id>14472089</id><snippet>numpy.asarray</snippet></ROW><ROW><id>14472089</id><snippet>import sys
import numpy
from PIL import Image

img = Image.open(sys.argv[1]).convert('L')

im = numpy.array(img)
fft_mag = numpy.abs(numpy.fft.fftshift(numpy.fft.fft2(im)))

visual = numpy.log(fft_mag)
visual = (visual - visual.min()) / (visual.max() - visual.min())

result = Image.fromarray((visual * 255).astype(numpy.uint8))
result.save('out.bmp')
</snippet></ROW><ROW><id>14472319</id><snippet>$</snippet></ROW><ROW><id>14472319</id><snippet>str.startswith()</snippet></ROW><ROW><id>14472319</id><snippet>In [81]: symbols = ['aol', 'goog','$foo','bar']

In [82]: for x in symbols[:]:
    if not x.startswith('$'):
        symbols.append('$'+x)
   ....:         

In [83]: symbols
Out[83]: ['aol', 'goog', '$foo', 'bar', '$aol', '$goog', '$bar']
</snippet></ROW><ROW><id>14472468</id><snippet>combinations_with_replacement</snippet></ROW><ROW><id>14472468</id><snippet>for</snippet></ROW><ROW><id>14472468</id><snippet>def sums(large_array):
    return large_array.reshape((-1, 1)) + large_array.reshape((1, -1))
</snippet></ROW><ROW><id>14472468</id><snippet>&gt;&gt;&gt; ary = np.arange(5).astype(float)
&gt;&gt;&gt; np.triu(combinatorics(ary))
array([[ 0.,  1.,  2.,  3.,  4.],
       [ 0.,  2.,  3.,  4.,  5.],
       [ 0.,  0.,  4.,  5.,  6.],
       [ 0.,  0.,  0.,  6.,  7.],
       [ 0.,  0.,  0.,  0.,  8.]])
&gt;&gt;&gt; np.triu(sums(ary))
array([[ 0.,  1.,  2.,  3.,  4.],
       [ 0.,  2.,  3.,  4.,  5.],
       [ 0.,  0.,  4.,  5.,  6.],
       [ 0.,  0.,  0.,  6.,  7.],
       [ 0.,  0.,  0.,  0.,  8.]])
</snippet></ROW><ROW><id>14472468</id><snippet>combinatorics</snippet></ROW><ROW><id>14472468</id><snippet>sums</snippet></ROW><ROW><id>14472468</id><snippet>&gt;&gt;&gt; big_ary = np.random.random(1000)
&gt;&gt;&gt; %timeit combinatorics(big_ary)
1 loops, best of 3: 482 ms per loop
&gt;&gt;&gt; %timeit sums(big_ary)
1000 loops, best of 3: 1.7 ms per loop
</snippet></ROW><ROW><id>14472549</id><snippet>stemmers</snippet></ROW><ROW><id>14472549</id><snippet>In [3]: import nltk

In [4]: verbs = ["want", "wants", "wanting", "wanted"]

In [5]: for verb in verbs:
   ...:     print nltk.stem.porter.PorterStemmer().stem_word(verb)
   ...:     
want
want
want
want
</snippet></ROW><ROW><id>14472549</id><snippet>defaultdict</snippet></ROW><ROW><id>14472549</id><snippet>Counter</snippet></ROW><ROW><id>14472549</id><snippet>In [2]: from collections import defaultdict

In [3]: from nltk.stem.porter import PorterStemmer

In [4]: verbs = ["want", "wants", "wanting", "wanted", "running", "runs", "run"]

In [5]: freq = defaultdict(int)

In [6]: for verb in verbs:
   ...:     freq[PorterStemmer().stem_word(verb)] += 1
   ...:     

In [7]: freq
Out[7]: defaultdict(&lt;type 'int'&gt;, {'run': 3, 'want': 4})
</snippet></ROW><ROW><id>14472549</id><snippet>ran</snippet></ROW><ROW><id>14472549</id><snippet>defaultdict(&lt;type 'int'&gt;, {'ran': 1, 'run': 3, 'want': 4})
</snippet></ROW><ROW><id>14472551</id><snippet>import sublime, sublime_plugin
from subprocess import call


class TestCommand(sublime_plugin.ApplicationCommand):
    def __init__(self):
        super(TestCommand, self).__init__()
        #do your stuf here
        # call(["node", "app.js", "../User/"], Shell=true)
        call(["ping", "192.168.1.1"])

    def run(self, edit):
        pass
</snippet></ROW><ROW><id>14472686</id><snippet>newP = path.append(a)
frontier.append(newP)
</snippet></ROW><ROW><id>14472686</id><snippet>None</snippet></ROW><ROW><id>14472686</id><snippet>.pop()</snippet></ROW><ROW><id>14472686</id><snippet>state = path[1]</snippet></ROW><ROW><id>14472686</id><snippet>pop()</snippet></ROW><ROW><id>14472686</id><snippet>None</snippet></ROW><ROW><id>14472824</id><snippet>None</snippet></ROW><ROW><id>14472824</id><snippet>list.sort()</snippet></ROW><ROW><id>14472824</id><snippet>a.sort()</snippet></ROW><ROW><id>14472824</id><snippet>a</snippet></ROW><ROW><id>14472824</id><snippet>sorted()</snippet></ROW><ROW><id>14472824</id><snippet>a = sorted(a)</snippet></ROW><ROW><id>14473132</id><snippet>ws = websocket.WebSocketApp("ws://localhost:9999/track",
                                on_open    = on_open,
                                on_message = on_message,
                                on_error   = on_error,
                                on_close   = on_close, 
                                header     = {'head1:value1','head2:value2'} 
                                )
</snippet></ROW><ROW><id>14473132</id><snippet>   ## Line 877
   class WebSocketApp(object):
        """
        Higher level of APIs are provided.
        The interface is like JavaScript WebSocket object.
        """
        def __init__(self, url,
                     on_open = None, on_message = None, on_error = None,
                     on_close = None, keep_running = True, get_mask_key = None, header = None):

self.url = url
        self.on_open = on_open
        self.on_message = on_message
        self.on_error = on_error
        self.on_close = on_close
        self.keep_running = keep_running
        self.get_mask_key = get_mask_key
        self.sock = None
        self.header = header 
</snippet></ROW><ROW><id>14473132</id><snippet>## Line 732
self.sock.connect(self.url, header = self.header) 
</snippet></ROW><ROW><id>14473188</id><snippet>Manager</snippet></ROW><ROW><id>14473188</id><snippet>filter()</snippet></ROW><ROW><id>14473188</id><snippet>QuerySet</snippet></ROW><ROW><id>14473188</id><snippet>qs = models.Manager.get_query_set(self).filter(time &gt;= today)
</snippet></ROW><ROW><id>14473188</id><snippet>qs = models.Manager.get_query_set(self).filter(time_gte=today)
</snippet></ROW><ROW><id>14473188</id><snippet>time &lt; tomorrow</snippet></ROW><ROW><id>14473206</id><snippet>self.ui.tableDayWorklog.setSortingEnabled(False)
</snippet></ROW><ROW><id>14473206</id><snippet>self.ui.tableDayWorklog.setSortingEnabled(True)
</snippet></ROW><ROW><id>14473212</id><snippet>TABS</snippet></ROW><ROW><id>14473212</id><snippet>File</snippet></ROW><ROW><id>14473417</id><snippet>nans</snippet></ROW><ROW><id>14473417</id><snippet>infs</snippet></ROW><ROW><id>14473417</id><snippet>nans</snippet></ROW><ROW><id>14473417</id><snippet>infs</snippet></ROW><ROW><id>14473417</id><snippet>func(x,alpha,beta,b)</snippet></ROW><ROW><id>14473417</id><snippet>nans</snippet></ROW><ROW><id>14473417</id><snippet>infs</snippet></ROW><ROW><id>14473417</id><snippet>nans</snippet></ROW><ROW><id>14473417</id><snippet>params</snippet></ROW><ROW><id>14473417</id><snippet>func</snippet></ROW><ROW><id>14473417</id><snippet>func(params)</snippet></ROW><ROW><id>14473417</id><snippet>AVG(Y)*10e5</snippet></ROW><ROW><id>14473464</id><snippet>In [6]: ex_set = ({'fruit':'apple',
   ...:            'value':'fruit'},
   ...:           {'fruit':'fruit'},
   ...:           {'apple':'apple'})

In [7]: for d in ex_set:
   ...:     if 'fruit' in d.values():
   ...:         print(d)
   ...:         
{'fruit': 'apple', 'value': 'fruit'}
{'fruit': 'fruit'}
</snippet></ROW><ROW><id>14473464</id><snippet>set</snippet></ROW><ROW><id>14473464</id><snippet>sets's</snippet></ROW><ROW><id>14473464</id><snippet>dictionaries</snippet></ROW><ROW><id>14473464</id><snippet>In [8]: set([{}])
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-8-7facc835553f&gt; in &lt;module&gt;()
----&gt; 1 set([{}])

TypeError: unhashable type: 'dict'
</snippet></ROW><ROW><id>14473517</id><snippet>print</snippet></ROW><ROW><id>14473517</id><snippet>__repr__</snippet></ROW><ROW><id>14473517</id><snippet>__str__</snippet></ROW><ROW><id>14473524</id><snippet>def make_ngrams(lst, n):
    return zip(*(lst[i:] for i in xrange(n)))
</snippet></ROW><ROW><id>14473524</id><snippet>*</snippet></ROW><ROW><id>14473677</id><snippet>itertools.izip_longest()</snippet></ROW><ROW><id>14473677</id><snippet>In [155]: a = ['a', 'b', 'c']

In [156]: b = [1]

In [158]: for x,y in izip_longest(a,b,fillvalue=b[-1]):
   .....:     print x,y
   .....:     
a 1
b 1
c 1
</snippet></ROW><ROW><id>14473677</id><snippet>zip()</snippet></ROW><ROW><id>14473677</id><snippet>b</snippet></ROW><ROW><id>14473677</id><snippet>min(len(a),len(b))</snippet></ROW><ROW><id>14473677</id><snippet>izip_longest</snippet></ROW><ROW><id>14473677</id><snippet>max(len(a),len(b))</snippet></ROW><ROW><id>14473677</id><snippet>fillvalue</snippet></ROW><ROW><id>14473767</id><snippet>frontpage.view</snippet></ROW><ROW><id>14473767</id><snippet>import pdb;pdb.set_trace()</snippet></ROW><ROW><id>14473767</id><snippet>s</snippet></ROW><ROW><id>14473767</id><snippet>frontpage</snippet></ROW><ROW><id>14473767</id><snippet>__file__</snippet></ROW><ROW><id>14473767</id><snippet>__init__.pyc</snippet></ROW><ROW><id>14473804</id><snippet>super()</snippet></ROW><ROW><id>14473804</id><snippet>super(YourModel, self).save(using='orcl')</snippet></ROW><ROW><id>14473804</id><snippet>def save(self, *args, **kwargs):
    super(YourModelName, self).save(*args, **kwargs)
    kwargs.update({'using' : 'orcl'})
    super(YourModelName, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>14473804</id><snippet>def save(self, *args, **kwargs):
    super(YourModelName, self).save(*args, **kwargs)
    remote = OtherModel(
        id = self.id,
        some_field = self.some_field,
        another_field = self.another_field,
    )
    remote.save(using='orcl')
</snippet></ROW><ROW><id>14473804</id><snippet>manage.py inspectdb</snippet></ROW><ROW><id>14474271</id><snippet>In [36]: rng = date_range('1/1/2011', periods=5, freq='H')

In [37]: df = DataFrame({'price':[1,2,3,4,5]},index = rng)

In [38]: df
Out[38]: 
                     price
2011-01-01 00:00:00      1
2011-01-01 01:00:00      2
2011-01-01 02:00:00      3
2011-01-01 03:00:00      4
2011-01-01 04:00:00      5

In [39]: df.index
Out[39]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2011-01-01 00:00:00, ..., 2011-01-01 04:00:00]
Length: 5, Freq: H, Timezone: None

In [40]: df.index.values
Out[40]: 
array([1970-01-15 104:00:00, 1970-01-15 105:00:00, 1970-01-15 106:00:00,
       1970-01-15 107:00:00, 1970-01-15 108:00:00], dtype=datetime64[ns])
</snippet></ROW><ROW><id>14474299</id><snippet>eval</snippet></ROW><ROW><id>14474299</id><snippet>exec</snippet></ROW><ROW><id>14474299</id><snippet>if (i=15) {...}
</snippet></ROW><ROW><id>14474299</id><snippet>if (i==15) {...}
</snippet></ROW><ROW><id>14474299</id><snippet>i</snippet></ROW><ROW><id>14474299</id><snippet>i</snippet></ROW><ROW><id>14474299</id><snippet>if</snippet></ROW><ROW><id>14474299</id><snippet>if (i--) {...}
</snippet></ROW><ROW><id>14474299</id><snippet>if (--i) {...}
</snippet></ROW><ROW><id>14474299</id><snippet>i</snippet></ROW><ROW><id>14474299</id><snippet>i</snippet></ROW><ROW><id>14474299</id><snippet>1</snippet></ROW><ROW><id>14474422</id><snippet>123</snippet></ROW><ROW><id>14474422</id><snippet>sha(password + salt)</snippet></ROW><ROW><id>14474422</id><snippet>sha(sha(sha(sha(password + salt) + salt) + salt)...)</snippet></ROW><ROW><id>14474572</id><snippet>from pdfminer.layout import LAParams
from pdfminer.converter import PDFPageAggregator

# Set parameters for analysis.
laparams = LAParams()
# Create a PDF page aggregator object.
device = PDFPageAggregator(rsrcmgr, laparams=laparams)
interpreter = PDFPageInterpreter(rsrcmgr, device)
for page in doc.get_pages():
    interpreter.process_page(page)
    # receive the LTPage object for the page.
    layout = device.get_result()
</snippet></ROW><ROW><id>14474572</id><snippet>layout</snippet></ROW><ROW><id>14474572</id><snippet>LTPage</snippet></ROW><ROW><id>14474572</id><snippet>LTImage</snippet></ROW><ROW><id>14474867</id><snippet>DEFAULT_STORAGE_BACKEND</snippet></ROW><ROW><id>14474867</id><snippet>s3</snippet></ROW><ROW><id>14474867</id><snippet>django-storages</snippet></ROW><ROW><id>14474867</id><snippet>FPFileWidget</snippet></ROW><ROW><id>14475160</id><snippet>/movie_data?movie_key={{movie.key()}}
</snippet></ROW></DATA>