<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>2690573</id><snippet>count()</snippet></ROW><ROW><id>2690573</id><snippet>sc=scorm.objects.filter(Header__id=qp.id)

if sc.count() &gt; 0:
   ...
</snippet></ROW><ROW><id>2690573</id><snippet>len()</snippet></ROW><ROW><id>2690573</id><snippet>count()</snippet></ROW><ROW><id>2690573</id><snippet>SELECT COUNT(*)</snippet></ROW><ROW><id>2690573</id><snippet>count()</snippet></ROW><ROW><id>2690573</id><snippet>len()</snippet></ROW><ROW><id>2690573</id><snippet>get()</snippet></ROW><ROW><id>2690573</id><snippet>scorm.objects.get(pk=someid)</snippet></ROW><ROW><id>2690573</id><snippet>DoesNotExist</snippet></ROW><ROW><id>2690573</id><snippet>from django.core.exceptions import ObjectDoesNotExist
try:
    sc = scorm.objects.get(pk=someid)
except ObjectDoesNotExist:
    print ...
</snippet></ROW><ROW><id>2690947</id><snippet>from urllib2 import urlopen
from simplejson import loads
content = loads(urlopen('http://graph.facebook.com/2439131959').read())
</snippet></ROW><ROW><id>2690947</id><snippet>{'category': u'Just for fun',
 'description': "Graffiti lets you draw on your friends' profiles.",
 'id': '2439131959',
 'name': 'Graffiti'}
</snippet></ROW><ROW><id>2691249</id><snippet>smtpd.SMTPServer</snippet></ROW><ROW><id>2691647</id><snippet>def scaleSize(self,scale): 
    self.x = self.x * scale 
self.y = self.y * scale 
</snippet></ROW><ROW><id>2691647</id><snippet>def scaleSize(self,scale): 
    self.x = self.x * scale 
    self.y = self.y * scale 
</snippet></ROW><ROW><id>2691679</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.executable
'C:\\Python26\\python.exe'

&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.dirname(sys.executable)
'C:\\Python26'
</snippet></ROW><ROW><id>2692615</id><snippet>config/</snippet></ROW><ROW><id>2692615</id><snippet>scripts/</snippet></ROW><ROW><id>2692615</id><snippet>src/</snippet></ROW><ROW><id>2692615</id><snippet>$HOME/lib</snippet></ROW><ROW><id>2692615</id><snippet>fab -f $HOME/lib/rpaste.py</snippet></ROW><ROW><id>2692751</id><snippet>glob</snippet></ROW><ROW><id>2692751</id><snippet>[]</snippet></ROW><ROW><id>2692751</id><snippet>C:\temp\py&gt;mkdir 12345678901234

C:\temp\py&gt;C:\Python26\python.exe
Python 2.6.2 Stackless 3.1b3 060516 (release26-maint, Apr 14 2009, 21:19:36) [M
C v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('./' + ('[0-9]' * 14))
['.\\12345678901234']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2692751</id><snippet>&gt;&gt;&gt; [path for path in glob.iglob('./' + ('[0-9]' * 14))]
['.\\11223344556677', '.\\12345678901234']
&gt;&gt;&gt; [path for path in glob.iglob('./' + ('[0-9]' * 14)) if os.path.isdir(path)]
['.\\12345678901234']
</snippet></ROW><ROW><id>2692980</id><snippet>pipes.quote()</snippet></ROW><ROW><id>2692980</id><snippet>&gt;&gt;&gt; from pipes import quote
&gt;&gt;&gt; quote("""some'horrible"string\with lots of junk!$$!""")
'"some\'horrible\\"string\\\\with lots of junk!\\$\\$!"'
</snippet></ROW><ROW><id>2692980</id><snippet>&gt;&gt;&gt; quote("")
''
</snippet></ROW><ROW><id>2692980</id><snippet>'""'</snippet></ROW><ROW><id>2693202</id><snippet>class MainHandler(tornado.web.RequestHandler):
    @tornado.web.asynchronous
    def get(self):
        http = tornado.httpclient.AsyncHTTPClient()
        http.fetch("http://friendfeed-api.com/v2/feed/bret",
                   callback=self.async_callback(self.on_response))

    def on_response(self, response):
        if response.error: raise tornado.web.HTTPError(500)
        json = tornado.escape.json_decode(response.body)
        self.write("Fetched " + str(len(json["entries"])) + " entries "
                   "from the FriendFeed API")
        self.finish()
</snippet></ROW><ROW><id>2693299</id><snippet>c.execute("alter table linksauthor add column '%s' 'float'" % author)
</snippet></ROW><ROW><id>2693578</id><snippet>if (!vertices ||
        (PyArray_NDIM(vertices) == 2 &amp;&amp; PyArray_DIM(vertices, 1) != 2) ||
        (PyArray_NDIM(vertices) == 1 &amp;&amp; PyArray_DIM(vertices, 0) != 2))
         throw Py::ValueError("Invalid vertices array.");
</snippet></ROW><ROW><id>2694244</id><snippet>bind</snippet></ROW><ROW><id>2694244</id><snippet>bind</snippet></ROW><ROW><id>2694244</id><snippet>connect</snippet></ROW><ROW><id>2694244</id><snippet>s.bind(('0.0.0.0', 1444))
</snippet></ROW><ROW><id>2694358</id><snippet>for tool in find_tools():
    def __tool(*arg):
        validate_args(tool, args)
        return execute_tool(tool, args)
    __tool.__name__ = tool.name
    __tool.__doc__ = compile_docstring(tool)
    setattr(module, tool.name, __tool)
</snippet></ROW><ROW><id>2694358</id><snippet>__doc__</snippet></ROW><ROW><id>2694358</id><snippet>__call__</snippet></ROW><ROW><id>2694358</id><snippet>class ToolWrapper(object):
    def __init__(self, tool):
        self.tool = tool 
        self.__name__ = tool.name
    def _get_doc(self):
        return compile_docstring(self.tool)
    __doc__ = property(_get_doc)
    def __call__(self, *args):
        validate_args(args)
        return execute_tool(tool, args)
</snippet></ROW><ROW><id>2694358</id><snippet>for tool in find_tools():
    # Build a custom meta-class to provide __doc__.
    class _ToolMetaclass(type):
        def _get_doc(self):
            return create_docstring(tool)
        __doc__ = property(_get_doc)

    # Build a callable class to wrap the tool.
    class _ToolWrapper(object):
        __metaclass__ = _ToolMetaclass
        def _get_doc(self):
            return create_docstring(tool)
        __doc__ = property(_get_doc)
        def __call__(self, *args):
            validate_args(tool, args)
            execute_tool(tool, args)

    # Add the tool to the module.
    setattr(module, tool.name, _ToolWrapper())
</snippet></ROW><ROW><id>2694358</id><snippet>help(my_tool_name)
</snippet></ROW><ROW><id>2694358</id><snippet>my_tool_name.__doc__
</snippet></ROW><ROW><id>2694358</id><snippet>__doc__</snippet></ROW><ROW><id>2694358</id><snippet>_ToolWrapper</snippet></ROW><ROW><id>2694991</id><snippet>class Foo:
   def __init__(self, num):
      self.num = num
      def _fn(other):
         return self.num + other.num
      self.__add__ = _fn
</snippet></ROW><ROW><id>2694991</id><snippet>&gt;&gt;&gt; f = Foo(2)
&gt;&gt;&gt; g = Foo(1)
&gt;&gt;&gt; f + g
3
</snippet></ROW><ROW><id>2694991</id><snippet>dict</snippet></ROW><ROW><id>2694991</id><snippet>class Foo (object):
   def __init__(self, num):
      self.num = num
      def _fn(other):
         return self.num + other.num
      self.__add__ = _fn
&gt;&gt;&gt; f = Foo(2)
&gt;&gt;&gt; g = Foo(1)
&gt;&gt;&gt; f + g
Traceback ...
TypeError: unsupported operand type(s) for +: 'Foo' and 'Foo'
</snippet></ROW><ROW><id>2694991</id><snippet>dict</snippet></ROW><ROW><id>2694991</id><snippet>class _MetaFoo(type):
    def __init__(cls, name, bases, args):
        def _fn(self, other):
            return self.num + other.num
        cls.__add__ = _fn

class Foo(object):
    __metaclass__ = _MetaFoo
    def __init__(self, num):
        self.num = num

&gt;&gt;&gt; f = Foo(2)
&gt;&gt;&gt; g = Foo(1)
&gt;&gt;&gt; f+g
3
</snippet></ROW><ROW><id>2694991</id><snippet>self</snippet></ROW><ROW><id>2694991</id><snippet>class Foo(object):
    def __init__(self, num):
        self.num = num
setattr(Foo, '__add__', (lambda self, other: self.num + other.num))
&gt;&gt;&gt; f = Foo(2)
&gt;&gt;&gt; g = Foo(1)
&gt;&gt;&gt; f+g
3
</snippet></ROW><ROW><id>2695485</id><snippet>k, v = [x.strip() for x in line.lower().split(':')]
</snippet></ROW><ROW><id>2695575</id><snippet>import zlib

...
# f=urllib2.urlopen(url) 
decompressed_data=zlib.decompress(f.read(), 16+zlib.MAX_WBITS)
</snippet></ROW><ROW><id>2695771</id><snippet>python import vim, re
python def senclose(str): return "'"+re.sub(re.compile("'"), "''", str)+"'"
python vim.command("let @r="+senclose("string with single 'quotes'"))
</snippet></ROW><ROW><id>2695771</id><snippet>let abc='string
with newline'
</snippet></ROW><ROW><id>2695771</id><snippet>execute "let abc='string\nwith newline'"
</snippet></ROW><ROW><id>2695771</id><snippet>:execute</snippet></ROW><ROW><id>2695771</id><snippet>eval()</snippet></ROW><ROW><id>2695771</id><snippet>string("string\nwith newline")</snippet></ROW><ROW><id>2695771</id><snippet>senclose</snippet></ROW><ROW><id>2695771</id><snippet>vim.eval</snippet></ROW><ROW><id>2695771</id><snippet>python senclose = lambda str: "'"+str.replace("'", "''")+"'"
python vim.eval("setreg('@r', {0})".format(senclose("string with single 'quotes'")))
</snippet></ROW><ROW><id>2695815</id><snippet>import matplotlib.pyplot as plt

fig = plt.figure(figsize=(8, 8)) # You were missing the =
ax = fig.add_subplot(1, 1, 1)
ax.set_yscale('log')
ax.set_xscale('log')
plt.scatter([1.341, 0.1034, 0.6076, 1.4278, 0.0374],
        [0.37, 0.12, 0.22, 0.4, 0.08])
plt.xlim(0.01, 10) # Fix the x limits to fit all the points
plt.show()
</snippet></ROW><ROW><id>2696164</id><snippet>Python 3.1.2 (r312:79149, Mar 21 2010, 00:41:52) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import _json
&gt;&gt;&gt; _json.__file__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute '__file__'
</snippet></ROW><ROW><id>2696164</id><snippet>_json.pyd</snippet></ROW><ROW><id>2696164</id><snippet>_json.dll</snippet></ROW><ROW><id>2696308</id><snippet>import sqlite3
con = sqlite3.connect('simple.db')
c = con.cursor()

dic = {
    'x1':{'y1':1.0,'y2':0.0},
    'x2':{'y1':0.0,'y2':2.0,'y3':1.5},
    'x3':{'y2':2.0,'y3':1.5}
    }

# 1. Find the unique column names.
columns = set()
for cols in dic.values():
    for key in cols:
       columns.add(key)

# 2. Create the schema.
col_defs = [
    # Start with the column for our key name
    '"row_name" VARCHAR(2) NOT NULL PRIMARY KEY'
    ]
for column in columns:
    col_defs.append('"%s" REAL NULL' % column)
schema = "CREATE TABLE simple (%s);" % ",".join(col_defs)
c.execute(schema)

# 3. Loop through each row
for row_name, cols in dic.items():

    # Compile the data we have for this row.
    col_names = cols.keys()
    col_values = [str(val) for val in cols.values()]

    # Insert it.
    sql = 'INSERT INTO simple ("row_name", "%s") VALUES ("%s", "%s");' % (
        '","'.join(col_names),
        row_name,
        '","'.join(col_values)
        )
    c.execute(sql)
</snippet></ROW><ROW><id>2696308</id><snippet>## update value at a specific row x and column y?
def set_cell(connection, x_name, y_name, value):
    sql = 'UPDATE simple SET %s="%s" WHERE row_name="%s"' % (
        y_name, value, x_name
        )
    connection.execute(sql)

## select a value at a specific row x and column y?
def get_cell(connection, x_name, y_name):
    sql = 'SELECT %s FROM simple WHERE row_name="%s"' % (
        y_name, x_name
        )
    # Return the first row of results (there should be only one)
    # and the first column from that row
    return list(connection.execute(sql))[0][0]
</snippet></ROW><ROW><id>2696471</id><snippet>def tup_cmp(mytup, mytups):
    return any(x for x in mytups if mytup == x[:len(mytup)])

&gt;&gt;&gt; c = ((0, 1, 2, 3), (2, 3, 4, 5))
&gt;&gt;&gt; tup_cmp((0,2),c)
False
&gt;&gt;&gt; tup_cmp((0,1),c)
True
&gt;&gt;&gt; tup_cmp((0,1,2,3),c)
True
&gt;&gt;&gt; tup_cmp((0,1,2),c)
True
&gt;&gt;&gt; tup_cmp((2,3,),c)
True
&gt;&gt;&gt; tup_cmp((2,4,),c)
False
</snippet></ROW><ROW><id>2696471</id><snippet>c = ((0,1),(2,3))

[i for i in c if i[0] == 0]
# result: [(0, 1)]

[i for i in c if i[0] == 3]
# result: []
</snippet></ROW><ROW><id>2696697</id><snippet>Posts.get_{next,previous}_by_FOO()</snippet></ROW><ROW><id>2696887</id><snippet>re.search</snippet></ROW><ROW><id>2696887</id><snippet>re.match</snippet></ROW><ROW><id>2696887</id><snippet>123.35</snippet></ROW><ROW><id>2696887</id><snippet>x in s</snippet></ROW><ROW><id>2697371</id><snippet>&gt;&gt;&gt; class Foo(object):
...   def f(x): return x * x
... 
&gt;&gt;&gt; dis.dis(Foo)
Disassembly of f:
  2           0 LOAD_FAST                0 (x)
              3 LOAD_FAST                0 (x)
              6 BINARY_MULTIPLY     
              7 RETURN_VALUE        
</snippet></ROW><ROW><id>2697635</id><snippet>a_front = len(a) / 2 + len(a) % 2
</snippet></ROW><ROW><id>2697679</id><snippet>fork()</snippet></ROW><ROW><id>2697679</id><snippet>multiprocessing</snippet></ROW><ROW><id>2697679</id><snippet>worker</snippet></ROW><ROW><id>2697679</id><snippet>if</snippet></ROW><ROW><id>2697918</id><snippet>import re

s = """blablabla checked=12 unchecked=1
blablabla unchecked=13
blablabla checked=14"""

regex = re.compile(r"blablabla (?:(?:checked=)(\d+))? ?(?:(?:unchecked=)(\d+))?")

for line in s.splitlines():
    print regex.match(line).groups()
</snippet></ROW><ROW><id>2697918</id><snippet>None</snippet></ROW><ROW><id>2698366</id><snippet>subprocess.call</snippet></ROW><ROW><id>2698366</id><snippet>&gt;&gt;&gt; from subprocess import call
&gt;&gt;&gt; call(r"C:\Program Files\Mozilla Firefox\Firefox.exe")
</snippet></ROW><ROW><id>2698366</id><snippet>&gt;&gt;&gt; import webbrowser
&gt;&gt;&gt; webbrowser.open('http://stackoverflow.com/')
True
</snippet></ROW><ROW><id>2698410</id><snippet>python2.5</snippet></ROW><ROW><id>2698410</id><snippet>python2.5 setup.py install
</snippet></ROW><ROW><id>2699169</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a[~np.isnan(a).any(1)]
array([[  1.,  10.],
       [  5.,   6.]])
</snippet></ROW><ROW><id>2699169</id><snippet>&gt;&gt;&gt; a[~(a == 5).any(1)]
array([[  1.,  10.],
       [ NaN,   6.],
       [  6.,  NaN]])
</snippet></ROW><ROW><id>2699169</id><snippet>&gt;&gt;&gt; a[(a != 5).all(1)]
array([[  1.,  10.],
       [ NaN,   6.],
       [  6.,  NaN]])
</snippet></ROW><ROW><id>2699169</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[1, 5, np.nan, 6],
...               [10, 6, 6, np.nan]]).transpose()
&gt;&gt;&gt; a
array([[  1.,  10.],
       [  5.,   6.],
       [ NaN,   6.],
       [  6.,  NaN]])
</snippet></ROW><ROW><id>2699169</id><snippet>&gt;&gt;&gt; np.isnan(a)
array([[False, False],
       [False, False],
       [ True, False],
       [False,  True]], dtype=bool)
</snippet></ROW><ROW><id>2699169</id><snippet>&gt;&gt;&gt; np.isnan(a).any(1)
array([False, False,  True,  True], dtype=bool)
</snippet></ROW><ROW><id>2699169</id><snippet>&gt;&gt;&gt; ~np.isnan(a).any(1)
array([ True,  True, False, False], dtype=bool)
</snippet></ROW><ROW><id>2699169</id><snippet>&gt;&gt;&gt; a[~np.isnan(a).any(1)]
array([[  1.,  10.],
       [  5.,   6.]])
</snippet></ROW><ROW><id>2699402</id><snippet>\w</snippet></ROW><ROW><id>2699402</id><snippet>&amp;</snippet></ROW><ROW><id>2699402</id><snippet>\S</snippet></ROW><ROW><id>2699402</id><snippet>\w</snippet></ROW><ROW><id>2699402</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; r = re.compile(r'(?P&lt;words&gt;\w+(?:\s+\S+)*?)\s*(?P&lt;num&gt;\d+)?\r\n')
&gt;&gt;&gt; for s in ('Foo &amp; Bar 555\r\n', 'Hello World\r\n', 'Spam     99\r\n',
...           'Number 1 666\r\n'):
...   print s, r.match(s).groupdict()
... 
Foo &amp; Bar 555
{'num': '555', 'words': 'Foo &amp; Bar'}
Hello World
{'num': None, 'words': 'Hello World'}
Spam     99
{'num': '99', 'words': 'Spam'}
Number 1 666
{'num': '666', 'words': 'Number 1'}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2699478</id><snippet>:out</snippet></ROW><ROW><id>2699478</id><snippet>%(out)s</snippet></ROW><ROW><id>2699478</id><snippet>cursor = connection.cursor()
lOutput = cursor.var(cx_Oracle.STRING)
cursor.execute("""
            BEGIN
                :out := 'N';
            END;""",
            {'out' : lOutput})
print lOutput
</snippet></ROW><ROW><id>2699478</id><snippet>&lt;cx_Oracle.STRING with value 'N'&gt;
</snippet></ROW><ROW><id>2699551</id><snippet>x = data[:][0]
y1 = data[:][2]
y3 = data[:][3]
</snippet></ROW><ROW><id>2699551</id><snippet>x = [row[0] for row in x]
</snippet></ROW><ROW><id>2699996</id><snippet>os.setgroups([])</snippet></ROW><ROW><id>2699996</id><snippet>OSError</snippet></ROW><ROW><id>2699996</id><snippet>import os, pwd, grp

def drop_privileges(uid_name='nobody', gid_name='nogroup'):
    if os.getuid() != 0:
        # We're not root so, like, whatever dude
        return

    # Get the uid/gid from the name
    running_uid = pwd.getpwnam(uid_name).pw_uid
    running_gid = grp.getgrnam(gid_name).gr_gid

    # Remove group privileges
    os.setgroups([])

    # Try setting the new uid/gid
    os.setgid(running_gid)
    os.setuid(running_uid)

    # Ensure a very conservative umask
    old_umask = os.umask(077)
</snippet></ROW><ROW><id>2700143</id><snippet>def test(long long value):
    cdef long long i
    cdef long long z
    for i in xrange(value):
        z = i**2
        if(i==1000000):
            print i
        if z &lt; i:
            print "yes"
</snippet></ROW><ROW><id>2700143</id><snippet>Pure Python code: 20.4553578737 seconds

Cython code: 0.199339860234 seconds
</snippet></ROW><ROW><id>2700180</id><snippet>('/post/(\d+)', views.PostHandler)
</snippet></ROW><ROW><id>2700180</id><snippet>class PostHandler(BaseHandler):
    ''' Handler for viewing blog posts. '''
    def get(self, id):
        blog_post = models.BlogPost.get_by_id(int(id))
</snippet></ROW><ROW><id>2700264</id><snippet>if (temp == 182)
</snippet></ROW><ROW><id>2700632</id><snippet>Node.find_problems()</snippet></ROW><ROW><id>2700632</id><snippet>Node.fix_tree()</snippet></ROW><ROW><id>2700924</id><snippet>zope</snippet></ROW><ROW><id>2700924</id><snippet>/usr/lib/python2.6/site-packages/zope/interface/</snippet></ROW><ROW><id>2700924</id><snippet>/home/me/src/myproject/lib/python2.6/site-packages/zope/schema</snippet></ROW><ROW><id>2700924</id><snippet>pkgutil.extend_path(__path__, __name__)</snippet></ROW><ROW><id>2700924</id><snippet>/usr/lib/python2.6/site-packages/zope/__init__.py</snippet></ROW><ROW><id>2700924</id><snippet>__path__</snippet></ROW><ROW><id>2700924</id><snippet>['/usr/lib/python2.6/site-packages/zope', '/home/me/src/myproject/lib/python2.6/site-packages/zope']</snippet></ROW><ROW><id>2700924</id><snippet>pkg_resources.declare_namespace</snippet></ROW><ROW><id>2700924</id><snippet>pkgutil.extend_path</snippet></ROW><ROW><id>2700924</id><snippet>__path__</snippet></ROW><ROW><id>2700924</id><snippet>__path__</snippet></ROW><ROW><id>2700924</id><snippet>distutils/__init__.py</snippet></ROW><ROW><id>2700924</id><snippet>sys.path</snippet></ROW><ROW><id>2700924</id><snippet>import os
stdlib_dir = os.path.dirname(os.__file__)
real_distutils_path = os.path.join(stdlib_dir, 'distutils')
__path__.append(real_distutils_path)
execfile(os.path.join(real_distutils_path, '__init__.py'))
# and then apply some monkeypatching here...
</snippet></ROW><ROW><id>2701189</id><snippet>list</snippet></ROW><ROW><id>2701189</id><snippet>set</snippet></ROW><ROW><id>2701189</id><snippet>bisect</snippet></ROW><ROW><id>2701189</id><snippet>from bisect import bisect_left
def bi_contains(lst, item):
    """ efficient `item in lst` for sorted lists """
    # if item is larger than the last its not in the list, but the bisect would 
    # find `len(lst)` as the index to insert, so check that first. Else, if the 
    # item is in the list then it has to be at index bisect_left(lst, item)
    return (item &lt;= lst[-1]) and (lst[bisect_left(lst, item)] == item)
</snippet></ROW><ROW><id>2701292</id><snippet>re.finditer</snippet></ROW><ROW><id>2701292</id><snippet>map</snippet></ROW><ROW><id>2701292</id><snippet>import re

def scale(fact):
    """This function returns a lambda which will scale a number by a                           
    factor 'fact'"""
    return lambda val: fact * val

def find_and_scale(file, fact):
    """This function will find all the numbers (integers) in a file and                        
    return a list of all such numbers scaled by a factor 'fact'"""
    num = re.compile('(\d+)')
    scaling = scale(fact)
    f = open(file, 'r').read()
    numbers = [int(m.group(1)) for m in num.finditer(f)]
    return map(scaling, numbers)

if __name__ == "__main__":
    import sys
    if len(sys.argv) != 3:
        print "usage: %s file factor" % sys.argv[0]
        sys.exit(-1)
    numbers = find_and_scale(sys.argv[1], int(sys.argv[2]))
    for number in numbers:
        print "%d " % number
</snippet></ROW><ROW><id>2701292</id><snippet>file</snippet></ROW><ROW><id>2701292</id><snippet>fact</snippet></ROW><ROW><id>2701292</id><snippet>python script.py file fact</snippet></ROW><ROW><id>2701292</id><snippet>STDOUT</snippet></ROW><ROW><id>2701386</id><snippet>fileinput</snippet></ROW><ROW><id>2701386</id><snippet>translate</snippet></ROW><ROW><id>2701386</id><snippet>translit.py</snippet></ROW><ROW><id>2701386</id><snippet>#!/usr/bin/env python2.6
# -*- coding: utf-8 -*-

import fileinput

table = {
          0xe4: u'ae',
          ord(u'ö'): u'oe',
          ord(u'ü'): u'ue',
          ord(u'ß'): None,
        }

for line in fileinput.input():
    s = line.decode('utf8')
    print s.translate(table), 
</snippet></ROW><ROW><id>2701386</id><snippet>$ cat utf8.txt 
sömé täßt
sömé täßt
sömé täßt

$ ./translit.py utf8.txt 
soemé taet
soemé taet
soemé taet
</snippet></ROW><ROW><id>2701769</id><snippet>char</snippet></ROW><ROW><id>2701769</id><snippet>unsigned char</snippet></ROW><ROW><id>2701769</id><snippet>cin</snippet></ROW><ROW><id>2701769</id><snippet>stdin</snippet></ROW><ROW><id>2701769</id><snippet>int</snippet></ROW><ROW><id>2701769</id><snippet>unsigned int n;
std::cin &gt;&gt; n;
data[i] = static_cast&lt;u8&gt;(n);
</snippet></ROW><ROW><id>2701769</id><snippet>chr</snippet></ROW><ROW><id>2701853</id><snippet>0</snippet></ROW><ROW><id>2701853</id><snippet>1</snippet></ROW><ROW><id>2701853</id><snippet>re.TEMPLATE</snippet></ROW><ROW><id>2701853</id><snippet>flags = 0 if case_sensitive else re.I
re.findall(r'pattern', s, flags)
</snippet></ROW><ROW><id>2701853</id><snippet>re.I</snippet></ROW><ROW><id>2701853</id><snippet>re.M</snippet></ROW><ROW><id>2702225</id><snippet>for item in itertools.islice(iterable, n):</snippet></ROW><ROW><id>2702225</id><snippet>for count, item in enumerate(iterable): if count &gt; n: break ...</snippet></ROW><ROW><id>2702225</id><snippet>for i in xrange(n): item = next(iterator) ...</snippet></ROW><ROW><id>2702225</id><snippet>islice</snippet></ROW><ROW><id>2702225</id><snippet>iterools</snippet></ROW><ROW><id>2702352</id><snippet>numerator</snippet></ROW><ROW><id>2702352</id><snippet>def numerator(...)</snippet></ROW><ROW><id>2702352</id><snippet>self.numerator = n</snippet></ROW><ROW><id>2702352</id><snippet>set_numerator</snippet></ROW><ROW><id>2702352</id><snippet>set_denominator</snippet></ROW><ROW><id>2702654</id><snippet>win32api.keybd_event(win32con.VK_CONTROL, 0, win32con.KEYEVENTF_EXTENDEDKEY, 0)
</snippet></ROW><ROW><id>2702654</id><snippet>win32api.keybd_event(win32con.VK_CONTROL, 0, win32con.KEYEVENTF_KEYUP, 0)
</snippet></ROW><ROW><id>2702654</id><snippet>import win32api, win32con
def CopyBox(x, y):
    time.sleep(.2)
    win32api.keybd_event(win32con.VK_CONTROL, 0, win32con.KEYEVENTF_EXTENDEDKEY, 0)
    win32api.SetCursorPos((x,y))
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN, x, y, 0, 0)
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP, x, y, 0, 0)
    win32api.keybd_event(win32con.VK_CONTROL, 0, win32con.KEYEVENTF_KEYUP, 0)
</snippet></ROW><ROW><id>2702761</id><snippet>hexdigest()</snippet></ROW><ROW><id>2702761</id><snippet>&gt;&gt;&gt; h = hashlib.md5('data')
&gt;&gt;&gt; int(h.hexdigest(), 16)
188041611063492600696317361555123480284L
</snippet></ROW><ROW><id>2702761</id><snippet>digest()</snippet></ROW><ROW><id>2702761</id><snippet>&gt;&gt;&gt; hexDig = ''.join('%02x' % ord(x) for x in h.digest())
&gt;&gt;&gt; int(hexDig, 16)
188041611063492600696317361555123480284L
</snippet></ROW><ROW><id>2702761</id><snippet>.encode('hex')</snippet></ROW><ROW><id>2702761</id><snippet>binascii.hexlify</snippet></ROW><ROW><id>2702761</id><snippet>&gt;&gt;&gt; int(h.digest().encode('hex'), 16)
188041611063492600696317361555123480284L
&gt;&gt;&gt; int(binascii.hexlify(h.digest()), 16)
188041611063492600696317361555123480284L
</snippet></ROW><ROW><id>2702824</id><snippet>try:
   u = urllib2.urlopen(req)
except HTTPError as e:
   #inform them of the specific error here (based off the error code)
except URLError as e:
   #inform them of the specific error here
except Exception as e:
   #inform them that a general error has occurred 
</snippet></ROW><ROW><id>2702904</id><snippet>threading.Timer</snippet></ROW><ROW><id>2702904</id><snippet>import time

def hello():
    while True:
        print "Hello, Word!"
        time.sleep(30.0)
</snippet></ROW><ROW><id>2702904</id><snippet>Timer</snippet></ROW><ROW><id>2702904</id><snippet>import time

def makerepeater(delay, fun, *a, **k):
    def wrapper(*a, **k):
        while True:
            fun(*a, **k)
            time.sleep(delay)
    return wrapper
</snippet></ROW><ROW><id>2702904</id><snippet>makerepeater(30, hello)</snippet></ROW><ROW><id>2702904</id><snippet>hello</snippet></ROW><ROW><id>2703039</id><snippet>group()</snippet></ROW><ROW><id>2703039</id><snippet>group(0)</snippet></ROW><ROW><id>2703039</id><snippet>&gt;&gt;&gt; print (re.match(r"(?:aaa)(_bbb)", string1).group(0))
aaa_bbb
&gt;&gt;&gt; print (re.match(r"(?:aaa)(_bbb)", string1).group(1))
_bbb
&gt;&gt;&gt; print (re.match(r"(?:aaa)(_bbb)", string1).group(2))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
IndexError: no such group
</snippet></ROW><ROW><id>2703198</id><snippet>def funkyDecorator(cls):
    cls.funky = 1

@funkyDecorator
class MyClass(object):
    pass
</snippet></ROW><ROW><id>2703198</id><snippet>MyClass = funkyDecorator(MyClass)
</snippet></ROW><ROW><id>2703198</id><snippet>def logDecorator(func):

    def wrapper(*args, **kwargs):
        print "Before", func.__name__
        ret = func(*args, **kwargs)
        print "After", func.__name__
        return ret

    return wrapper

class MyClass(object):

    @logDecorator
    def mymethod(self):
        print "xxx"


MyClass().mymethod()
</snippet></ROW><ROW><id>2703198</id><snippet>Before mymethod
xxx
After mymethod
</snippet></ROW><ROW><id>2703198</id><snippet>@orm.reconstructor</snippet></ROW><ROW><id>2703428</id><snippet>xrange(</snippet></ROW><ROW><id>2703428</id><snippet>range()</snippet></ROW><ROW><id>2703428</id><snippet>:-)</snippet></ROW><ROW><id>2703428</id><snippet>map()</snippet></ROW><ROW><id>2703428</id><snippet>$ python -m timeit "def foo(x):pass; [foo(i) for i in range(100)]"</snippet></ROW><ROW><id>2703428</id><snippet>1000000 loops, best of 3: 0.216 usec per loop</snippet></ROW><ROW><id>2703428</id><snippet>$ python -m timeit "def foo(x):pass; [foo(i) for i in range(100)]"</snippet></ROW><ROW><id>2703428</id><snippet>1000000 loops, best of 3: 0.21 usec per loop</snippet></ROW><ROW><id>2703428</id><snippet>$ python -m timeit "def foo(x):pass; [foo(i) for i in range(100)]"</snippet></ROW><ROW><id>2703428</id><snippet>1000000 loops, best of 3: 0.212 usec per loop</snippet></ROW><ROW><id>2703428</id><snippet>map()</snippet></ROW><ROW><id>2703428</id><snippet>$ python -m timeit "def foo(x):pass; map(foo, range(100))"</snippet></ROW><ROW><id>2703428</id><snippet>1000000 loops, best of 3: 0.216 usec per loop</snippet></ROW><ROW><id>2703428</id><snippet>$ python -m timeit "def foo(x):pass; map(foo, range(100))"</snippet></ROW><ROW><id>2703428</id><snippet>1000000 loops, best of 3: 0.214 usec per loop</snippet></ROW><ROW><id>2703428</id><snippet>$ python -m timeit "def foo(x):pass; map(foo, range(100))"</snippet></ROW><ROW><id>2703428</id><snippet>1000000 loops, best of 3: 0.215 usec per loop</snippet></ROW><ROW><id>2703428</id><snippet>a = (foo(i) for i in range(100))
</snippet></ROW><ROW><id>2703428</id><snippet>range()</snippet></ROW><ROW><id>2703428</id><snippet>xrange()</snippet></ROW><ROW><id>2703428</id><snippet>range()</snippet></ROW><ROW><id>2703428</id><snippet>xrange()</snippet></ROW><ROW><id>2703428</id><snippet>range()</snippet></ROW><ROW><id>2703428</id><snippet>:-)</snippet></ROW><ROW><id>2703650</id><snippet>urllib.quote_plus(string[, safe])
</snippet></ROW><ROW><id>2704528</id><snippet>class Foo(object):
    def __getattribute__(self,name):
        attr = object.__getattribute__(self, name)
        if hasattr(attr, '__call__'):
            def newfunc(*args, **kwargs):
                print('before calling %s' %attr.__name__)
                result = attr(*args, **kwargs)
                print('done calling %s' %attr.__name__)
                return result
            return newfunc
        else:
            return attr
</snippet></ROW><ROW><id>2704528</id><snippet>class Bar(Foo):
    def myFunc(self, data):
        print("myFunc: %s"% data)

bar = Bar()
bar.myFunc(5)
</snippet></ROW><ROW><id>2704528</id><snippet>before calling myFunc
myFunc:  5
done calling myFunc
</snippet></ROW><ROW><id>2704866</id><snippet>frozenset</snippet></ROW><ROW><id>2704866</id><snippet>tuple(sorted(kwargs.iteritems()))</snippet></ROW><ROW><id>2704866</id><snippet>import collections

class FrozenDict(collections.Mapping):
    """Don't forget the docstrings!!"""

    def __init__(self, *args, **kwargs):
        self._d = dict(*args, **kwargs)
        self._hash = None

    def __iter__(self):
        return iter(self._d)

    def __len__(self):
        return len(self._d)

    def __getitem__(self, key):
        return self._d[key]

    def __hash__(self):
        # It would have been simpler and maybe more obvious to 
        # use hash(tuple(sorted(self._d.iteritems()))) from this discussion
        # so far, but this solution is O(n). I don't know what kind of 
        # n we are going to run into, but sometimes it's hard to resist the 
        # urge to optimize when it will gain improved algorithmic performance.
        if self._hash is None:
            self._hash = 0
            for pair in self.iteritems():
                self._hash ^= hash(pair)
        return self._hash
</snippet></ROW><ROW><id>2704866</id><snippet>&gt;&gt;&gt; x = FrozenDict(a=1, b=2)
&gt;&gt;&gt; y = FrozenDict(a=1, b=2)
&gt;&gt;&gt; x is y
False
&gt;&gt;&gt; x == y
True
&gt;&gt;&gt; x == {'a': 1, 'b': 2}
True
&gt;&gt;&gt; d = {x: 'foo'}
&gt;&gt;&gt; d[y]
'foo'
</snippet></ROW><ROW><id>2705127</id><snippet>key=</snippet></ROW><ROW><id>2705127</id><snippet>operator.attrgetter</snippet></ROW><ROW><id>2705127</id><snippet>lambda</snippet></ROW><ROW><id>2705622</id><snippet>#!/usr/bin/env python

import pygtk
pygtk.require('2.0')
import gtk

class ComboBoxExample:
    def __init__(self):
        window = gtk.Window()
        window.connect('destroy', lambda w: gtk.main_quit())
        combobox = gtk.combo_box_new_text()
        window.add(combobox)
        combobox.append_text('Select a pie:')
        combobox.append_text('Apple')
        combobox.append_text('Cherry')
        combobox.append_text('Blueberry')
        combobox.append_text('Grape')
        combobox.append_text('Peach')
        combobox.append_text('Raisin')
        combobox.connect('changed', self.changed_cb)
        combobox.set_active(0)
        window.show_all()
        return

    def changed_cb(self, combobox):
        model = combobox.get_model()
        index = combobox.get_active()
        if index:
            print 'I like', model[index][0], 'pie'
        return

def main():
    gtk.main()
    return

if __name__ == "__main__":
    bcb = ComboBoxExample()
    main()
</snippet></ROW><ROW><id>2706023</id><snippet>import twitter

class Api(twitter.Api):
    pass 
    # override/add any functions here.
</snippet></ROW><ROW><id>2706023</id><snippet> class Ball():
    def __init__(self,a):
        self.a=a
    def __repr__(self):
        return "Ball(%s)" % self.a

def makeBall(a):
    return Ball(a)

def override():
    print "OVERRIDE ONE"

def dontoverride():
    print "THIS WILL BE PRESERVED"
</snippet></ROW><ROW><id>2706023</id><snippet>from basemodule import *
import basemodule

def makeBalls(a,b):
    foo = makeBall(a)
    bar = makeBall(b)
    print foo,bar

def override():
    print "OVERRIDE TWO"

def dontoverride():
    basemodule.dontoverride()
    print "THIS WAS PRESERVED"
</snippet></ROW><ROW><id>2706023</id><snippet>import extmodule

#code is in extended module
print extmodule.makeBalls(1,2)
#returns Ball(1) Ball(2)

#code is in base module
print extmodule.makeBall(1)
#returns Ball(1)

#function from extended module overwrites base module
extmodule.override()
#returns OVERRIDE TWO

#function from extended module calls base module first
extmodule.dontoverride()
#returns THIS WILL BE PRESERVED\nTHIS WAS PRESERVED
</snippet></ROW><ROW><id>2706267</id><snippet>multiprocessing</snippet></ROW><ROW><id>2706267</id><snippet>map</snippet></ROW><ROW><id>2706267</id><snippet>multiprocessing</snippet></ROW><ROW><id>2706267</id><snippet>pickle</snippet></ROW><ROW><id>2706267</id><snippet>fork()</snippet></ROW><ROW><id>2706267</id><snippet>map</snippet></ROW><ROW><id>2706267</id><snippet>multiprocessing</snippet></ROW><ROW><id>2706279</id><snippet>multiprocessing</snippet></ROW><ROW><id>2706431</id><snippet>class</snippet></ROW><ROW><id>2706431</id><snippet>type</snippet></ROW><ROW><id>2706431</id><snippet>some_dict</snippet></ROW><ROW><id>2706431</id><snippet>class Test:
    some_dict = {}
Test.some_dict[Test] = True
</snippet></ROW><ROW><id>2706431</id><snippet>def set_some_dict(cls):
    cls.some_dict[cls] = True

@set_some_dict
class Test:
    some_dict = {}
</snippet></ROW><ROW><id>2706431</id><snippet>class SomeDictSetterType(type):
    def __init__(self, name, bases, attrs):
        self.some_dict[self] = True
        super(SomeDictSetterType, self).__init__(name, bases, attrs)

class Test(object):
    __metaclass__ = SomeDictSetterType
    some_dict = {}
</snippet></ROW><ROW><id>2706465</id><snippet>set1 = set(array1)
array2 = [e for e in array2 if e not in set1]
</snippet></ROW><ROW><id>2706465</id><snippet>array2[:] =  [e for e in array2 if e not in set1]
</snippet></ROW><ROW><id>2706703</id><snippet>super(B, self).test()</snippet></ROW><ROW><id>2706703</id><snippet>bubble()</snippet></ROW><ROW><id>2706703</id><snippet>inspect.getmro(type(back_self))</snippet></ROW><ROW><id>2706703</id><snippet>back_self</snippet></ROW><ROW><id>2706703</id><snippet>self</snippet></ROW><ROW><id>2706703</id><snippet>cls</snippet></ROW><ROW><id>2706703</id><snippet>method_name in cls.__dict__</snippet></ROW><ROW><id>2706703</id><snippet>find_class_by_code_object(self)</snippet></ROW><ROW><id>2706703</id><snippet>bubble()</snippet></ROW><ROW><id>2706703</id><snippet>*args, **kwargs</snippet></ROW><ROW><id>2706703</id><snippet>import inspect
def bubble(*args, **kwargs):
    def find_class_by_code_object(back_self, method_name, code):
        for cls in inspect.getmro(type(back_self)):
            if method_name in cls.__dict__:
                method_fun = getattr(cls, method_name)
                if method_fun.im_func.func_code is code:
                    return cls

    frame = inspect.currentframe().f_back
    back_self = frame.f_locals['self']
    method_name = frame.f_code.co_name

    for _ in xrange(5):
        code = frame.f_code
        cls = find_class_by_code_object(back_self, method_name, code)
        if cls:
            super_ = super(cls, back_self)
            return getattr(super_, method_name)(*args, **kwargs)
        try:
            frame = frame.f_back
        except:
            return



class A(object):
    def test(self):
        print "A.test()"

class B(A):
    def test(self):
        # instead of "super(B, self).test()" we can do
        bubble()

class C(B):
    pass

c = C()
c.test() # works!

b = B()
b.test() # works!
</snippet></ROW><ROW><id>2706703</id><snippet>C.test = B.test</snippet></ROW><ROW><id>2706703</id><snippet>=</snippet></ROW><ROW><id>2706703</id><snippet>for _ in xrange(5)</snippet></ROW><ROW><id>2706703</id><snippet>frame = frame.f_back</snippet></ROW><ROW><id>2706703</id><snippet>super()</snippet></ROW><ROW><id>2706751</id><snippet>import numpy as np    
a = np.array([(3, 2), (6, 2), (3, 6), (3, 4), (5, 3)])

ind=np.lexsort((a[:,1],a[:,0]))    

a[ind]
# array([[3, 2],
#       [3, 4],
#       [3, 6],
#       [5, 3],
#       [6, 2]])
</snippet></ROW><ROW><id>2706751</id><snippet>ravel</snippet></ROW><ROW><id>2706751</id><snippet>flatten</snippet></ROW><ROW><id>2706751</id><snippet>a</snippet></ROW><ROW><id>2706751</id><snippet>a = np.array([(3, 2), (6, 2), (3, 6), (3, 4), (5, 3)])
dt=[('col1',np.uint32),('col2',np.uint32)]
# A `ravel` is a view, not a copy of `a`
b=a.ravel().view(dt)
b.sort(order=['col1','col2'])
</snippet></ROW><ROW><id>2706751</id><snippet>b</snippet></ROW><ROW><id>2706751</id><snippet>a</snippet></ROW><ROW><id>2706751</id><snippet>b</snippet></ROW><ROW><id>2706751</id><snippet>a</snippet></ROW><ROW><id>2706751</id><snippet>print(a)
# [[3 2]
#  [3 4]
#  [3 6]
#  [5 3]
#  [6 2]]
</snippet></ROW><ROW><id>2707125</id><snippet>urllib.urlretrieve(URL, directory + "\\" + filename + "." + extension)
</snippet></ROW><ROW><id>2707435</id><snippet>result = [(i.home, i.away) for i in fixtures[:5]]
</snippet></ROW><ROW><id>2707435</id><snippet>homes = [i.home for i in fixtures[:5]]
aways = [i.away for i in fixtures[:5]]
</snippet></ROW><ROW><id>2707435</id><snippet>homes, aways = [i.home for i in fixtures[:5]], [i.away for i in fixtures[:5]]
</snippet></ROW><ROW><id>2707481</id><snippet>menu</snippet></ROW><ROW><id>2707481</id><snippet>__init__</snippet></ROW><ROW><id>2707481</id><snippet>class Abcd:
    def __init__(self):
        self.a = ''
        self.menu = ['a', 'b', 'c']
</snippet></ROW><ROW><id>2707702</id><snippet>def L_before_O(s):
    return (s.index('L') - s.index('O') == 1)

def N_after_L(s):
    return (s.index('L') &lt; s.index('N'))

def G_and_P(s):
    return (abs(s.index('G') - s.index('P')) == 2)

def all_perms(s):    #this is from the link
    if len(s) &lt;=1:
        yield s
    else:
        for perm in all_perms(s[1:]):
            for i in range(len(perm)+1):
                yield perm[:i] + s[0:1] + perm[i:]

def get_the_answer():
    permutations = [i for i in all_perms('GHLOPSN')] #N is the news tape
    a = [i for i in permutations if L_before_O(i)]
    b = [i for i in a if N_after_L(i)]
    c = [i for i in b if G_and_P(i)]
    return c
</snippet></ROW><ROW><id>2708239</id><snippet>class Test:
    &lt;snip&gt;

if __name__ == "__main__":
    import doctest
    doctest.testmod()
</snippet></ROW><ROW><id>2708398</id><snippet>import Tkinter

# create the tcl interpreter
tcl = Tkinter.Tcl()

# define a python function
def pycommand(*args):
    print "pycommand args:", ", ".join(args)

# register it as a tcl command:
tcl_command_name = "pycommand"
python_function = pycommand
cmd = tcl.createcommand(tcl_command_name, python_function)

# call it, and print the results:
result = tcl.eval("pycommand one two three")
print "tcl result:", result
</snippet></ROW><ROW><id>2708398</id><snippet>$ python2.5 /tmp/example.py
pycommand args: one, two, three
tcl result: None
</snippet></ROW><ROW><id>2708435</id><snippet>$ cat server.py
#!/usr/bin/env python 

import socket 
import sys

host = '' 
port = 843 
backlog = 5 
size = 1024 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
print &gt;&gt; sys.stderr, 'socket'
s.bind((host,port)) 
print &gt;&gt; sys.stderr, 'bind'
s.listen(backlog) 
print &gt;&gt; sys.stderr, 'listen'
while 1: 
    try:
       client, address = s.accept() 
       print &gt;&gt; sys.stderr, 'accept'
       data = client.recv(size) 
       print &gt;&gt; sys.stderr, 'recv'
       # ignore data because I can't type a '\0'
       client.send('&lt;?xml version="1.0"?&gt;&lt;cross-domain-policy&gt;&lt;allow-access-from domain="*" to-ports="*"/&gt;&lt;/cross-domain-policy&gt;') 
       client.close()
       print &gt;&gt; sys.stderr, 'close'
    except Exception as e:
        print e;
        s.close();
        print &gt;&gt; sys.stderr, 'close'
        sys.exit(1);
$ sudo nohup python server.py &amp;
[1] 11218
nohup: ignoring input and appending output to `nohup.out'
$ jobs
[1]+  Running                 sudo nohup python server.py &amp;
# a couple of telnets to 843
$ jobs
[1]+  Running                 sudo nohup python server.py &amp;
$ sudo kill 11218
$ sudo cat nohup.out
socket
bind
listen
accept
recv
close
accept
recv
close
</snippet></ROW><ROW><id>2708699</id><snippet>ws0</snippet></ROW><ROW><id>2708699</id><snippet>Worksheet</snippet></ROW><ROW><id>2708699</id><snippet>ws0.write(row_index, column_index, unicode_text)</snippet></ROW><ROW><id>2708699</id><snippet>cell</snippet></ROW><ROW><id>2708699</id><snippet>&gt;&gt;&gt; import xlwt
&gt;&gt;&gt; b = xlwt.Workbook()
&gt;&gt;&gt; s = b.add_sheet('zh')
&gt;&gt;&gt; big5_text = '\xa7A\xa6n\xa1I'
&gt;&gt;&gt; u_text = big5_text.decode('big5')
&gt;&gt;&gt; s.write(0, 0, u_text)
&gt;&gt;&gt; b.save('nihao.xls')
</snippet></ROW><ROW><id>2708699</id><snippet>unicode_text.encode('some_encoding', 'replace')</snippet></ROW><ROW><id>2708699</id><snippet>unicode_text.encode()</snippet></ROW><ROW><id>2708699</id><snippet>print repr(cell)</snippet></ROW><ROW><id>2708699</id><snippet>fc /b ...</snippet></ROW><ROW><id>2708720</id><snippet>cron</snippet></ROW><ROW><id>2708846</id><snippet>$&gt; python manage.py shell
</snippet></ROW><ROW><id>2708846</id><snippet>$&gt; from django.contrib.auth.models import User
</snippet></ROW><ROW><id>2708846</id><snippet>$&gt; opts = User._meta
</snippet></ROW><ROW><id>2708846</id><snippet>$&gt; opts.get_field('username')
</snippet></ROW><ROW><id>2708846</id><snippet>&lt;django.db.models.fields.CharField object at 0x1024750&gt;
</snippet></ROW><ROW><id>2709450</id><snippet>i = i + 1</snippet></ROW><ROW><id>2709450</id><snippet>t</snippet></ROW><ROW><id>2709450</id><snippet>%</snippet></ROW><ROW><id>2709450</id><snippet># Log every 1000 lines.
LOG_EVERY_N = 1000

for i in range(1000):
  ... # calculations with i

  if (i % LOG_EVERY_N) == 0:
    print "logging: ..."
</snippet></ROW><ROW><id>2709775</id><snippet>sudo ln -s /usr/local/lib/libgmp.dylib /usr/lib/libgmp.dylib
</snippet></ROW><ROW><id>2709832</id><snippet>self.</snippet></ROW><ROW><id>2709832</id><snippet>@</snippet></ROW><ROW><id>2709832</id><snippet>self</snippet></ROW><ROW><id>2709832</id><snippet>self</snippet></ROW><ROW><id>2709832</id><snippet>self.</snippet></ROW><ROW><id>2709889</id><snippet>setuptools</snippet></ROW><ROW><id>2709889</id><snippet>distutils</snippet></ROW><ROW><id>2709889</id><snippet>try:
    from setuptools import setup, Extension, Feature
except ImportError:
    from distutils.core import setup, Extension
    Feature = None
</snippet></ROW><ROW><id>2709889</id><snippet>if Feature:</snippet></ROW><ROW><id>2709889</id><snippet>extra</snippet></ROW><ROW><id>2709889</id><snippet>setup()</snippet></ROW><ROW><id>2709889</id><snippet>BaseRowProxy</snippet></ROW><ROW><id>2709889</id><snippet>try:
    from sqlalchemy.cresultproxy import BaseRowProxy
except ImportError:
    class BaseRowProxy(object):
        #....
</snippet></ROW><ROW><id>2709889</id><snippet>--with-cextensions</snippet></ROW><ROW><id>2709955</id><snippet>'compressed': 1,
 'optimize':2,
 'bundle_files': 1
</snippet></ROW><ROW><id>2709987</id><snippet>os.popen()</snippet></ROW><ROW><id>2709987</id><snippet>stdout</snippet></ROW><ROW><id>2709987</id><snippet>stdout</snippet></ROW><ROW><id>2709987</id><snippet>stdout</snippet></ROW><ROW><id>2709987</id><snippet>os.popen()</snippet></ROW><ROW><id>2709987</id><snippet>os.popen()</snippet></ROW><ROW><id>2709987</id><snippet>stderr</snippet></ROW><ROW><id>2709987</id><snippet>os.popen()</snippet></ROW><ROW><id>2709987</id><snippet>directory</snippet></ROW><ROW><id>2709987</id><snippet>os.popen()</snippet></ROW><ROW><id>2709987</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>2709987</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>2709987</id><snippet>devnull = open(os.devnull, 'w')
for directory in directories:
    subprocess.Popen(['runtool_exec', directory], stdout=devnull)
</snippet></ROW><ROW><id>2710189</id><snippet>In [53]: def rand_row_doubles(row_limits, num):
   ....:     ncols = len(row_limits)
   ....:     x = np.random.random((num, ncols))
   ....:     x *= row_limits                  
   ....:     return x                          
   ....:                                       
In [59]: %timeit rand_row_doubles(np.arange(7) + 1, 1000000)
10 loops, best of 3: 187 ms per loop
</snippet></ROW><ROW><id>2710189</id><snippet>In [66]: %timeit ManyRandDoubles(np.arange(7) + 1, 1000000)
1 loops, best of 3: 222 ms per loop
</snippet></ROW><ROW><id>2710189</id><snippet>In [68]: x.max(0)
Out[68]:
array([ 0.99999991,  1.99999971,  2.99999737,  3.99999569,  4.99999836,
        5.99999114,  6.99999738])

In [69]: x.min(0)
Out[69]:
array([  4.02099599e-07,   4.41729377e-07,   4.33480302e-08,
         7.43497138e-06,   1.28446819e-05,   4.27614385e-07,
         1.34106753e-05])
</snippet></ROW><ROW><id>2710189</id><snippet>In [70]: def rand_rows_sum_to_one(nrows, ncols):
   ....:     x = np.random.random((ncols, nrows))
   ....:     y = x.sum(axis=0)
   ....:     x /= y
   ....:     return x.T
   ....:

In [71]: %timeit rand_rows_sum_to_one(1000000, 13)
1 loops, best of 3: 455 ms per loop

In [72]: x = rand_rows_sum_to_one(1000000, 13)

In [73]: x.sum(axis=1)
Out[73]: array([ 1.,  1.,  1., ...,  1.,  1.,  1.])
</snippet></ROW><ROW><id>2710492</id><snippet>"say (?P&lt;value&gt;.+) endsay"
</snippet></ROW><ROW><id>2710492</id><snippet>.+</snippet></ROW><ROW><id>2710492</id><snippet>endsay</snippet></ROW><ROW><id>2710599</id><snippet>darwinports</snippet></ROW><ROW><id>2710704</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>2710704</id><snippet>key=</snippet></ROW><ROW><id>2710704</id><snippet>cmp=</snippet></ROW><ROW><id>2710704</id><snippet>cmp=</snippet></ROW><ROW><id>2710704</id><snippet>d={5:6,7:8,100:101,1:2,3:4}
print(d.items())
# [(1, 2), (3, 4), (100, 101), (5, 6), (7, 8)]
</snippet></ROW><ROW><id>2710704</id><snippet>mycmp</snippet></ROW><ROW><id>2710704</id><snippet>x1</snippet></ROW><ROW><id>2710704</id><snippet>length=4
print(sorted(d.items(),key=lambda item: abs(item[1]-length) ))
# [(3, 4), (1, 2), (5, 6), (7, 8), (100, 101)]
</snippet></ROW><ROW><id>2710704</id><snippet>key=...</snippet></ROW><ROW><id>2710704</id><snippet>lambda item: abs(item[1]-length)</snippet></ROW><ROW><id>2710704</id><snippet>item</snippet></ROW><ROW><id>2710704</id><snippet>d.items()</snippet></ROW><ROW><id>2710704</id><snippet>abs(item[1]-length)</snippet></ROW><ROW><id>2710704</id><snippet>len</snippet></ROW><ROW><id>2710704</id><snippet>len</snippet></ROW><ROW><id>2710704</id><snippet>length</snippet></ROW><ROW><id>2710892</id><snippet>short_url.py</snippet></ROW><ROW><id>2710892</id><snippet>views.py</snippet></ROW><ROW><id>2710892</id><snippet>import short_url
</snippet></ROW><ROW><id>2710892</id><snippet>lib</snippet></ROW><ROW><id>2710892</id><snippet>from lib import short_url
</snippet></ROW><ROW><id>2710892</id><snippet>import os
import sys

def fix_path():
    # credit:  Nick Johnson of Google
    sys.path.append(os.path.join(os.path.dirname(__file__), 'lib'))

def main():
    url_map = [ ('/', views.IndexHandler),] # etc.
    app = webapp.WSGIApplication(url_map, debug=False)
    wsgiref.handlers.CGIHandler().run(app)

if __name__ == "__main__":
    fix_path()
    main()
</snippet></ROW><ROW><id>2710892</id><snippet>import fix_path
</snippet></ROW><ROW><id>2710892</id><snippet>main.py</snippet></ROW><ROW><id>2711073</id><snippet>Python 2.6.2 (r262:71600, Apr 15 2009, 07:20:39)
&gt;&gt;&gt; import dis
&gt;&gt;&gt; def f(x):
...    return x is not None
...
&gt;&gt;&gt; dis.dis(f)
  2           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               0 (None)
              6 COMPARE_OP               9 (is not)
              9 RETURN_VALUE
&gt;&gt;&gt; def g(x):
...   return not x is None
...
&gt;&gt;&gt; dis.dis(g)
  2           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               0 (None)
              6 COMPARE_OP               9 (is not)
              9 RETURN_VALUE
</snippet></ROW><ROW><id>2711073</id><snippet>not x is y</snippet></ROW><ROW><id>2711073</id><snippet>not (x is y)</snippet></ROW><ROW><id>2711073</id><snippet>(not x) is y</snippet></ROW><ROW><id>2711073</id><snippet>x is not y</snippet></ROW><ROW><id>2711121</id><snippet>getattr</snippet></ROW><ROW><id>2711121</id><snippet>class WebmethodBaseClass():
    def post(self, methodName):
        getattr(self, methodName)("kapow")
</snippet></ROW><ROW><id>2711121</id><snippet>post</snippet></ROW><ROW><id>2711121</id><snippet>def webmethod(f):
    f.is_webmethod = True
    return f
</snippet></ROW><ROW><id>2711121</id><snippet>post</snippet></ROW><ROW><id>2711121</id><snippet>is_webmethod</snippet></ROW><ROW><id>2711167</id><snippet>String formFile = "/path/to/myform.pdf"
String newFile = "/path/to/output.pdf"
PdfReader reader = new PdfReader(formFile);
FileOutputStream outStream = new FileOutputStream(newFile);
PdfStamper stamper = new PdfStamper(reader, outStream);
AcroFields fields = stamper.getAcroFields();

// fill the form
fields.setField("name", "Shane");
fields.setField("url", "http://stackoverflow.com");

// PDF infos
HashMap&lt;String, String&gt; infoDoc = new HashMap&lt;String, String&gt;();
infoDoc.put("Title", "your title here");
infoDoc.put("Author", "JRE ;)");
stamper.setMoreInfo(infoDoc);

// Flatten the PDF &amp; cleanup
stamper.setFormFlattening(true);
stamper.close();
reader.close();
outStream.close();
</snippet></ROW><ROW><id>2711177</id><snippet>setrecursionlimit</snippet></ROW><ROW><id>2711177</id><snippet>ulimit -s</snippet></ROW><ROW><id>2711177</id><snippet>help ulimit</snippet></ROW><ROW><id>2711331</id><snippet>from itertools import ifilter, islice

def ello_bruce(limit=None):
    for i in islice(ifilter(predicate, xrange(10**5)), limit):
        # do whatever you want with i here
</snippet></ROW><ROW><id>2711589</id><snippet>Section = 'Sec_' + Section
</snippet></ROW><ROW><id>2711723</id><snippet>arr = [[int(i) for i in line.split()] for line in open('input.txt')]
</snippet></ROW><ROW><id>2712178</id><snippet>from django.utils import simplejson as json
obj = json.loads(json_string)
</snippet></ROW><ROW><id>2712178</id><snippet>import simplejson
</snippet></ROW><ROW><id>2712180</id><snippet>- url: /(form|items\.html)
  script: validate.py
</snippet></ROW><ROW><id>2712201</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>2712201</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>2712290</id><snippet>Makefile.in</snippet></ROW><ROW><id>2712290</id><snippet>src</snippet></ROW><ROW><id>2712290</id><snippet>.defs</snippet></ROW><ROW><id>2712290</id><snippet>PYGTK_CODEGEN</snippet></ROW><ROW><id>2712290</id><snippet>PYGTK_CODEGEN</snippet></ROW><ROW><id>2712290</id><snippet>configure.in</snippet></ROW><ROW><id>2712290</id><snippet>AC_MSG_CHECKING(for pygtk codegen)
PYGTK_CODEGEN="$PYTHON `$PKG_CONFIG --variable=codegendir pygtk-2.0`/codegen.py"
AC_SUBST(PYGTK_CODEGEN)
AC_MSG_RESULT($PYGTK_CODEGEN)
</snippet></ROW><ROW><id>2712290</id><snippet>PyGTK</snippet></ROW><ROW><id>2712290</id><snippet>PyGTK codegen</snippet></ROW><ROW><id>2712290</id><snippet>codegen</snippet></ROW><ROW><id>2712290</id><snippet>PyGTK</snippet></ROW><ROW><id>2712290</id><snippet>codegen.py</snippet></ROW><ROW><id>2712306</id><snippet>-3</snippet></ROW><ROW><id>2712306</id><snippet>-3</snippet></ROW><ROW><id>2712349</id><snippet>x.properties()['p'].verbose_name</snippet></ROW><ROW><id>2712509</id><snippet>msg = EmailMessage(subject, html_content, from_email, [to])
msg.content_subtype = "html"  # Main content is now text/html
msg.send()
</snippet></ROW><ROW><id>2712509</id><snippet>"text/%s" % msg.content_subtype</snippet></ROW><ROW><id>2712536</id><snippet>soup2 = BeautifulSoup(str(arr[i]))
arr2 = soup2.findAll('td')
</snippet></ROW><ROW><id>2712536</id><snippet>arr2 = arr[i].findAll('td')</snippet></ROW><ROW><id>2712536</id><snippet>if str(j).find("&lt;a href=") &gt; 0:
    data.sourceURL = self.getAttributeValue(str(j),'&lt;a href="')
</snippet></ROW><ROW><id>2712536</id><snippet>href</snippet></ROW><ROW><id>2712536</id><snippet>a = j.find('a', href=True)       #find first &lt;a&gt; with href attribute
if a:
    data.sourceURL = a['href']
else:
    #....
</snippet></ROW><ROW><id>2712536</id><snippet>find</snippet></ROW><ROW><id>2712536</id><snippet>findAll</snippet></ROW><ROW><id>2712536</id><snippet>find</snippet></ROW><ROW><id>2712536</id><snippet>findAll</snippet></ROW><ROW><id>2712686</id><snippet>except:</snippet></ROW><ROW><id>2712686</id><snippet>SystemExit</snippet></ROW><ROW><id>2712686</id><snippet>KeyboardInterupt</snippet></ROW><ROW><id>2712686</id><snippet>urllib2.URLError</snippet></ROW><ROW><id>2712686</id><snippet>try:
    urllib2.urlopen("http://example.com", timeout = 1)
except urllib2.URLError, e:
    raise MyException("There was an error: %r" % e)
</snippet></ROW><ROW><id>2712686</id><snippet>import urllib2
import socket

class MyException(Exception):
    pass

try:
    urllib2.urlopen("http://example.com", timeout = 1)
except urllib2.URLError, e:
    # For Python 2.6
    if isinstance(e.reason, socket.timeout):
        raise MyException("There was an error: %r" % e)
    else:
        # reraise the original error
        raise
except socket.timeout, e:
    # For Python 2.7
    raise MyException("There was an error: %r" % e)
</snippet></ROW><ROW><id>2712882</id><snippet>def scan(s1, s2):
    # Find the longest match where s1 starts with s2
    # Returns None if no matches
    l = len(s1)
    while 1:
        if not l:
            return None
        elif s1[:l] == s2[:l]:
            return s1[:l]
        else:
            l -= 1

def contains(s1, s2):
    D = {} # Remove duplicates using a dict
    L1 = s1.split(' ')
    L2 = s2.split(' ')

    # Don't add results which have already 
    # been processed to satisfy example #1!
    DProcessed = {}

    for x in L1:
        yy = 0
        for y in L2:
            if yy in DProcessed:
                yy += 1
                continue

            # Scan from the start to the end of the words
            a = scan(x, y)
            if a: 
                DProcessed[yy] = None
                D[a] = None
                break

            # Scan from the end to the start of the words
            a = scan(x[::-1], y[::-1])
            if a: 
                DProcessed[yy] = None
                D[a[::-1]] = None
                break
            yy += 1

    return list(D.keys())

print contains("12 November 2010 - 1 visitor",
               "6 July 2010 - 100 visitors")
print contains("Welcome, John!",
               "Welcome, Peter!")
print contains("Welcome, Sam!",
               "Welcome, Tom!")
</snippet></ROW><ROW><id>2712882</id><snippet>['1', 'visitor', '-', '2010']
['Welcome,', '!']
['Welcome,', 'm!']
</snippet></ROW><ROW><id>2713010</id><snippet>if __name__ == '__main__':
   log_file = 'log_file.txt'
   f = open(log_file, "w")
   runner = unittest.TextTestRunner(f)
   unittest.main(testRunner=runner)
   f.close()
</snippet></ROW><ROW><id>2713210</id><snippet>&gt;&gt;&gt; s = "Split along words, preserve punctuation!"
&gt;&gt;&gt; re.sub(r"\s+|\b", '\f', s).split('\f')
['', 'Split', 'along', 'words', ',', 'preserve', 'punctuation', '!']
</snippet></ROW><ROW><id>2713210</id><snippet>'\f'</snippet></ROW><ROW><id>2713342</id><snippet>twisted.enterprise.adbapi</snippet></ROW><ROW><id>2713342</id><snippet>twisted.enterprise.adbapi</snippet></ROW><ROW><id>2713761</id><snippet>DISPLAY</snippet></ROW><ROW><id>2713820</id><snippet>enumerate</snippet></ROW><ROW><id>2713820</id><snippet>list</snippet></ROW><ROW><id>2713820</id><snippet>stuff = range(5,0,-1)
it = enumerate(stuff)
print dict(it), dict(it) # first consumes all items, so there are none left for the 2nd call

seq = list(enumerate(stuff)) # creates a list of all the items
print dict(seq), dict(seq) # you can use it as often as you want
</snippet></ROW><ROW><id>2713994</id><snippet>import com.company.actualpackage as shortername
</snippet></ROW><ROW><id>2714028</id><snippet>layout.setContentsMargin(0, 0, 0, 0)
</snippet></ROW><ROW><id>2714332</id><snippet>def rule(f):
    f.rule = True
    return f

def getRules(cls):
    cls.rules = {}
    for attr, value in cls.__dict__.iteritems():
        if getattr(value, 'rule', False):
            cls.rules[attr] = value
    return cls

@getRules
class RuleClass:
    @rule
    def foo(self):
        pass
</snippet></ROW><ROW><id>2714332</id><snippet>def rule(f):
    f.rule = True
    return f

class RuleType(type):
    def __init__(self, name, bases, attrs):
        self.rules = {}
        for attr, value in attrs.iteritems():
            if getattr(value, 'rule', False):
                self.rules[attr] = value
        super(RuleType, self).__init__(name, bases, attrs)

class RuleBase(object):
    __metaclass__ = RuleType

class RuleClass(RuleBase):
    @rule
    def foo(self):
        pass
</snippet></ROW><ROW><id>2714332</id><snippet>__init__</snippet></ROW><ROW><id>2714332</id><snippet>rules</snippet></ROW><ROW><id>2714332</id><snippet>rules</snippet></ROW><ROW><id>2715208</id><snippet>MyClass(object)</snippet></ROW><ROW><id>2715718</id><snippet>login_url = ''
for link in showlinks():
    if link.text == "login":
        login_url = link.url

go(login_url)
</snippet></ROW><ROW><id>2715718</id><snippet>http://news.ycombinator.com/x?fnid=SvdNlGQoqo</snippet></ROW><ROW><id>2715781</id><snippet>func(10,20, 1,2,3,**{'k':'a'})
</snippet></ROW><ROW><id>2716032</id><snippet>import subprocess
proc = subprocess.Popen('ls',
                       shell=True,
                       stdout=subprocess.PIPE,
                       )
while proc.poll() is None:
    output = proc.stdout.readline()
    print output,
</snippet></ROW><ROW><id>2716032</id><snippet>ls</snippet></ROW><ROW><id>2716032</id><snippet>output = proc.communicate()[0]
print output,
</snippet></ROW><ROW><id>2716168</id><snippet>LOAD DATA INFILE 'persondata.txt' INTO TABLE persondata (col1,col2,...);</snippet></ROW><ROW><id>2716193</id><snippet>import struct
fh = open('my_file.dat', 'rb')
s = fh.read(40256)
vals = struct.unpack('iidddddd5025d', s)
dpoints, dloops, dtime, bT, sT, hI, LI, tm = vals[:8]
data = vals[8:]</snippet></ROW><ROW><id>2716345</id><snippet>fact</snippet></ROW><ROW><id>2716345</id><snippet>n * fact(n-1)</snippet></ROW><ROW><id>2716345</id><snippet>n * fact(n-1)</snippet></ROW><ROW><id>2716345</id><snippet>if</snippet></ROW><ROW><id>2716345</id><snippet>fact</snippet></ROW><ROW><id>2716345</id><snippet>lambda</snippet></ROW><ROW><id>2716345</id><snippet>if</snippet></ROW><ROW><id>2716345</id><snippet>test</snippet></ROW><ROW><id>2716351</id><snippet>a = np.asarray(A.todense())
np.bitwise_and(a[1,:], a[2,:])
</snippet></ROW><ROW><id>2716881</id><snippet>import socket

SERVER_ADDR = ("example.com", 80)

sock = socket.create_connection(SERVER_ADDR)
f = sock.makefile("r+", bufsize=0)

f.write("GET / HTTP/1.0\r\n"
      + "Host: example.com\r\n"    # you can put other headers here too
      + "\r\n")

# skip headers
while f.readline() != "\r\n":
    pass

# keep reading forever
while True:
    line = f.readline()     # blocks until more data is available
    if not line:
        break               # we ran out of data!

    print line

sock.close()
</snippet></ROW><ROW><id>2717144</id><snippet>echo | socat</snippet></ROW><ROW><id>2717144</id><snippet>echo</snippet></ROW><ROW><id>2717310</id><snippet>import inspect
import functools
import json

def memoize_zeroadic_function_to_disk(memo_filename):
    def decorator(f):
        try:
            with open(memo_filename, 'r') as fp:
                cache = json.load(fp)
        except IOError:
            # file doesn't exist yet
            cache = {}

        source = inspect.getsource(f)

        @functools.wraps(f)
        def wrapper():
            if source not in cache:
                cache[source] = f()
                with open(memo_filename, 'w') as fp:
                    json.dump(cache, fp)

            return cache[source]
        return wrapper
    return decorator

@memoize_zeroadic_function_to_disk(...SOME PATH HERE...)
def time_consuming_function():
    # lots_of_computing_time to come up with the_result
    return the_result
</snippet></ROW><ROW><id>2717449</id><snippet>from google.appengine.api import urlfetch
url = "http://www.google.com/"
result = urlfetch.fetch(url)
print 'Content-Type: text/html'
print ''
print result.content
</snippet></ROW><ROW><id>2717697</id><snippet>__init__.py</snippet></ROW><ROW><id>2717876</id><snippet>&lt;ParentRedirec tSequenceID&gt;</snippet></ROW><ROW><id>2717876</id><snippet>\r\n</snippet></ROW><ROW><id>2717876</id><snippet>"&lt;ParentRedirec\r\ntSequenceID&gt;"
</snippet></ROW><ROW><id>2717876</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; guff = """&lt;atag&gt;\r\n&lt;bt\r\nag c="2"&gt;"""
&gt;&gt;&gt; re.sub(r"(&lt;[^&gt;]*)\r\n([^&gt;]*&gt;)", r"\1\2", guff)
'&lt;atag&gt;\r\n&lt;btag c="2"&gt;'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2717876</id><snippet>&lt;foo\r\nbar\r\nzot&gt;</snippet></ROW><ROW><id>2718043</id><snippet>repeat</snippet></ROW><ROW><id>2718043</id><snippet>perms = product(range(1, 7), repeat=3)
</snippet></ROW><ROW><id>2718162</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'mydatabase'
    }
}
</snippet></ROW><ROW><id>2718268</id><snippet>RE = re.compile(u'[⺀-⺙⺛-⻳⼀-⿕々〇〡-〩〸-〺〻㐀-䶵一-鿃豈-鶴侮-頻並-龎]', re.UNICODE)
nochinese = RE.sub('', mystring)
</snippet></ROW><ROW><id>2718268</id><snippet># -*- coding: utf-8 -*-
import re

LHan = [[0x2E80, 0x2E99],    # Han # So  [26] CJK RADICAL REPEAT, CJK RADICAL RAP
        [0x2E9B, 0x2EF3],    # Han # So  [89] CJK RADICAL CHOKE, CJK RADICAL C-SIMPLIFIED TURTLE
        [0x2F00, 0x2FD5],    # Han # So [214] KANGXI RADICAL ONE, KANGXI RADICAL FLUTE
        0x3005,              # Han # Lm       IDEOGRAPHIC ITERATION MARK
        0x3007,              # Han # Nl       IDEOGRAPHIC NUMBER ZERO
        [0x3021, 0x3029],    # Han # Nl   [9] HANGZHOU NUMERAL ONE, HANGZHOU NUMERAL NINE
        [0x3038, 0x303A],    # Han # Nl   [3] HANGZHOU NUMERAL TEN, HANGZHOU NUMERAL THIRTY
        0x303B,              # Han # Lm       VERTICAL IDEOGRAPHIC ITERATION MARK
        [0x3400, 0x4DB5],    # Han # Lo [6582] CJK UNIFIED IDEOGRAPH-3400, CJK UNIFIED IDEOGRAPH-4DB5
        [0x4E00, 0x9FC3],    # Han # Lo [20932] CJK UNIFIED IDEOGRAPH-4E00, CJK UNIFIED IDEOGRAPH-9FC3
        [0xF900, 0xFA2D],    # Han # Lo [302] CJK COMPATIBILITY IDEOGRAPH-F900, CJK COMPATIBILITY IDEOGRAPH-FA2D
        [0xFA30, 0xFA6A],    # Han # Lo  [59] CJK COMPATIBILITY IDEOGRAPH-FA30, CJK COMPATIBILITY IDEOGRAPH-FA6A
        [0xFA70, 0xFAD9],    # Han # Lo [106] CJK COMPATIBILITY IDEOGRAPH-FA70, CJK COMPATIBILITY IDEOGRAPH-FAD9
        [0x20000, 0x2A6D6],  # Han # Lo [42711] CJK UNIFIED IDEOGRAPH-20000, CJK UNIFIED IDEOGRAPH-2A6D6
        [0x2F800, 0x2FA1D]]  # Han # Lo [542] CJK COMPATIBILITY IDEOGRAPH-2F800, CJK COMPATIBILITY IDEOGRAPH-2FA1D

def build_re():
    L = []
    for i in LHan:
        if isinstance(i, list):
            f, t = i
            try: 
                f = unichr(f)
                t = unichr(t)
                L.append('%s-%s' % (f, t))
            except: 
                pass # A narrow python build, so can't use chars &gt; 65535 without surrogate pairs!

        else:
            try:
                L.append(unichr(i))
            except:
                pass

    RE = '[%s]' % ''.join(L)
    print 'RE:', RE.encode('utf-8')
    return re.compile(RE, re.UNICODE)

RE = build_re()
print RE.sub('', u'美国').encode('utf-8')
print RE.sub('', u'blah').encode('utf-8')
</snippet></ROW><ROW><id>2718273</id><snippet>// custom item delegate to draw grid lines around cells
class CustomDelegate : public QStyledItemDelegate
{
public:
    CustomDelegate(QTableView* tableView);
protected:
    void paint(QPainter* painter, const QStyleOptionViewItem&amp; option, const QModelIndex&amp; index) const;
private:
    QPen _gridPen;
};

CustomDelegate::CustomDelegate(QTableView* tableView)
{
    // create grid pen
    int gridHint = tableView-&gt;style()-&gt;styleHint(QStyle::SH_Table_GridLineColor, new QStyleOptionViewItemV4());
    QColor gridColor = static_cast&lt;QRgb&gt;(gridHint);
    _gridPen = QPen(gridColor, 0, tableView-&gt;gridStyle());
}

void CustomDelegate::paint(QPainter* painter, const QStyleOptionViewItem&amp; option, const QModelIndex&amp; index) const
{
    QStyledItemDelegate::paint(painter, option, index);

    QPen oldPen = painter-&gt;pen();
    painter-&gt;setPen(_gridPen);

    // paint vertical lines
    painter-&gt;drawLine(option.rect.topRight(), option.rect.bottomRight());
    // paint horizontal lines 
    if (index.column()!=1) //&lt;-- check if column need horizontal grid lines
        painter-&gt;drawLine(option.rect.bottomLeft(), option.rect.bottomRight());

    painter-&gt;setPen(oldPen);
}

// set up for your tree view:
ui-&gt;tableView-&gt;setShowGrid(false);
ui-&gt;tableView-&gt;setItemDelegate(new CustomDelegate(ui-&gt;tableView));
</snippet></ROW><ROW><id>2718544</id><snippet>unicode('\xc2\xb7')</snippet></ROW><ROW><id>2718544</id><snippet>&gt;&gt;&gt; print(u'\xc2\xb7')
Â·
</snippet></ROW><ROW><id>2718544</id><snippet>&gt;&gt;&gt; print(u'\uc2b7')
슷
</snippet></ROW><ROW><id>2718544</id><snippet>&gt;&gt;&gt; print('\xc2\xb7'.decode('utf8'))
·
</snippet></ROW><ROW><id>2718544</id><snippet>&gt;&gt;&gt; print('슷')
슷
</snippet></ROW><ROW><id>2719228</id><snippet>def nw_align(a, b, replace_func, insert, delete):

    ZERO, LEFT, UP, DIAGONAL = 0, 1, 2, 3

    len_a = len(a)
    len_b = len(b)

    matrix = [[(0, ZERO) for x in range(len_b + 1)] for y in range(len_a + 1)]

    for i in range(len_a + 1):
        matrix[i][0] = (insert * i, UP)

    for j in range(len_b + 1):
        matrix[0][j] = (delete * j, LEFT)

    for i in range(1, len_a + 1):
        for j in range(1, len_b + 1):
            replace = replace_func(a[i - 1], b[j - 1])
            matrix[i][j] = max([
                (matrix[i - 1][j - 1][0] + replace, DIAGONAL),
                (matrix[i][j - 1][0] + insert, LEFT),
                (matrix[i - 1][j][0] + delete, UP)
            ])

    i, j = len_a, len_b
    align_a = ""
    align_b = ""

    while (i, j) != (0, 0):
        if matrix[i][j][1] == DIAGONAL:
            align_a += a[i - 1]
            align_b += b[j - 1]
            i -= 1
            j -= 1
        elif matrix[i][j][1] == LEFT:
            align_a += "-"
            align_b += b[j - 1]
            j -= 1
        else: # UP
            align_a += a[i - 1]
            align_b += "-"
            i -= 1

    return align_a[::-1], align_b[::-1]
</snippet></ROW><ROW><id>2719651</id><snippet>HttpResponse</snippet></ROW><ROW><id>2719651</id><snippet>lib.py</snippet></ROW><ROW><id>2719860</id><snippet>queue_declare</snippet></ROW><ROW><id>2720064</id><snippet>'\n'</snippet></ROW><ROW><id>2720064</id><snippet>'- '</snippet></ROW><ROW><id>2720064</id><snippet>startswith</snippet></ROW><ROW><id>2720064</id><snippet># if you have a single string, split it into lines.
L = s.splitlines()
# if you (now) have a list of lines, grab an iterator so we can continue
# iteration where it left off.
it = iter(L)
# Alternatively, if you have a file, just use that directly.
it = open(....)

# Find the first empty line:
for line in it:
    # Treat lines of just whitespace as empty lines too. If you don't want
    # that, do 'if line == ""'.
    if not line.strip():
        break
# Now starts data.
for line in it:
    if not line.rstrip():
        # End of data.
        break
    if line.startswith('- '):
        data.append(line[:2].rstrip())
    else:
        # misformed data?
        raise ValueError, "misformed line %r" % (line,)
</snippet></ROW><ROW><id>2720064</id><snippet>def getblocks(L):
    # The list of good blocks (as lists of lines.) You can also make this
    # a flat list if you prefer.
    data = []
    # The list of good lines encountered in the current block
    # (but the block may still become bad.)
    block = []
    # Whether the current block is bad.
    bad = 1
    for line in L:
        # Not in a 'good' block, and encountering the block separator.
        if bad and not line.rstrip():
            bad = 0
            block = []
            continue
        # In a 'good' block and encountering the block separator.
        if not bad and not line.rstrip():
            # Save 'good' data. Or, if you want a flat list of lines,
            # use 'extend' instead of 'append' (also below.)
            data.append(block)
            block = []
            continue
        if not bad and line.startswith('- '):
            # A good line in a 'good' (not 'bad' yet) block; save the line,
            # minus
            # '- ' prefix and trailing whitespace.
            block.append(line[2:].rstrip())
            continue
        else:
            # A 'bad' line, invalidating the current block.
            bad = 1
    # Don't forget to handle the last block, if it's good
    # (and if you want to handle the last block.)
    if not bad and block:
        data.append(block)
    return data
</snippet></ROW><ROW><id>2720064</id><snippet>&gt;&gt;&gt; L = """hello
...
... - x1
... - x2
... - x3
...
... - x4
...
... - x6
... morning
... - x7
...
... world""".splitlines()
&gt;&gt;&gt; print getblocks(L)
[['x1', 'x2', 'x3'], ['x4']]
</snippet></ROW><ROW><id>2720418</id><snippet>.attrib</snippet></ROW><ROW><id>2720418</id><snippet>.pop("key")</snippet></ROW><ROW><id>2720418</id><snippet>del</snippet></ROW><ROW><id>2720442</id><snippet>In [3]: s = datetime.datetime.now()
In [4]: x = s
In [5]: print s
------&gt; print(s)
2010-04-27 06:37:02.303067
In [6]: print x
------&gt; print(x)
2010-04-27 06:37:02.303067
</snippet></ROW><ROW><id>2720864</id><snippet>getPage</snippet></ROW><ROW><id>2720864</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>2720864</id><snippet>len()</snippet></ROW><ROW><id>2720864</id><snippet>Deferreds</snippet></ROW><ROW><id>2720864</id><snippet>getPage</snippet></ROW><ROW><id>2720864</id><snippet>Deferred</snippet></ROW><ROW><id>2720864</id><snippet>Deferred</snippet></ROW><ROW><id>2720864</id><snippet>Deferred</snippet></ROW><ROW><id>2720864</id><snippet>def web_request(request)
    def callback(data):
        HttpResponse(len(data))
    d = getPage("http://www.example.org")
    d.addCallback(callback)
    return d
</snippet></ROW><ROW><id>2720864</id><snippet>web_request</snippet></ROW><ROW><id>2720864</id><snippet>getPage</snippet></ROW><ROW><id>2720864</id><snippet>web_request</snippet></ROW><ROW><id>2720864</id><snippet>web_request</snippet></ROW><ROW><id>2720864</id><snippet>Deferred</snippet></ROW><ROW><id>2720864</id><snippet>getPage</snippet></ROW><ROW><id>2720864</id><snippet>Deferreds</snippet></ROW><ROW><id>2720864</id><snippet>twisted.internet.defer.inlineCallbacks</snippet></ROW><ROW><id>2720864</id><snippet>@defer.inlineCallbacks
def web_request(request)
    data = yield getPage("http://www.example.org")
    HttpResponse(len(data))
</snippet></ROW><ROW><id>2720864</id><snippet>d</snippet></ROW><ROW><id>2720864</id><snippet>web_request</snippet></ROW><ROW><id>2720864</id><snippet>defer.inlineCallbacks</snippet></ROW><ROW><id>2720864</id><snippet>Deferred</snippet></ROW><ROW><id>2720966</id><snippet>histogram(a, bins=10, range=None, normed=False, weights=None, new=None)
</snippet></ROW><ROW><id>2720966</id><snippet>(hist_data, bin_edges) = histogram(my_array[:,0], weights=my_array[:,1])
</snippet></ROW><ROW><id>2720966</id><snippet>weights</snippet></ROW><ROW><id>2720966</id><snippet>a[i]</snippet></ROW><ROW><id>2720966</id><snippet>weights[i]</snippet></ROW><ROW><id>2720966</id><snippet>a = [0, 1]
weights = [10, 2]
</snippet></ROW><ROW><id>2720966</id><snippet>bins</snippet></ROW><ROW><id>2720966</id><snippet>bar(bin_edges[:-1], hist_data)
</snippet></ROW><ROW><id>2720966</id><snippet>hist(my_array[:,0], weights=my_array[:,1])
</snippet></ROW><ROW><id>2721807</id><snippet>datetime</snippet></ROW><ROW><id>2721807</id><snippet>&gt;&gt;&gt; s='2005-08-11T16:34:33Z'
&gt;&gt;&gt; t=datetime.datetime(2009,04,01)
&gt;&gt;&gt; t.isoformat()
'2009-04-01T00:00:00'
&gt;&gt;&gt; s &lt; t
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can't compare datetime.datetime to str
&gt;&gt;&gt; s &lt; t.isoformat()
True
&gt;&gt;&gt; z='2009-10-01T18:20:12'
&gt;&gt;&gt; z &lt; t.isoformat()
False
</snippet></ROW><ROW><id>2721807</id><snippet>.isoformat()</snippet></ROW><ROW><id>2721807</id><snippet>&gt;&gt;&gt; datetime.datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ')
datetime.datetime(2005, 8, 11, 16, 34, 33)
</snippet></ROW><ROW><id>2722808</id><snippet>subprocess.Popen = some_mock_Popen
result = subprocess.call(...)
assert some_mock_popen.result == result
</snippet></ROW><ROW><id>2722808</id><snippet>subprocess.call()</snippet></ROW><ROW><id>2722808</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>2722808</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>2722808</id><snippet>my_subprocess.py</snippet></ROW><ROW><id>2722808</id><snippet>from subprocess import Popen

def my_call(...):
    return Popen(...).communicate()
</snippet></ROW><ROW><id>2722808</id><snippet>Popen</snippet></ROW><ROW><id>2722808</id><snippet>my_call()</snippet></ROW><ROW><id>2722808</id><snippet>my_subprocess.Popen</snippet></ROW><ROW><id>2722808</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>2722808</id><snippet>my_subprocess.Popen</snippet></ROW><ROW><id>2722808</id><snippet>class MyClass(object):
    Popen = staticmethod(subprocess.Popen)
    def call(self):
        return self.Popen(...).communicate(...)
</snippet></ROW><ROW><id>2722808</id><snippet>staticmethod</snippet></ROW><ROW><id>2722808</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>2722808</id><snippet>class MyClass(object):
    def __init__(self, authenticate=None, authorize=None):
        if authenticate is None:
            authenticate = default_authenticate
        if authorize is None:
            authorize = default_authorize
        self.authenticate = authenticate
        self.authorize = authorize
    def request(self, user, password, action):
        self.authenticate(user, password)
        self.authorize(user, action)
        self._do_request(action)

...
helper = AuthService(...)
# Pass bound methods to helper.authenticate and helper.authorize to MyClass.
inst = MyClass(authenticate=helper.authenticate, authorize=helper.authorize)
inst.request(...)
</snippet></ROW><ROW><id>2722965</id><snippet>import collections
import heapq
import time

def distance(start, end):
    steps = 0
    for pos in range(len(start)):
        if start[pos] != end[pos]:
            steps += 1
    return steps


class SearchHeap(object):
    def __init__(self):
        self.on_heap = set()
        self.heap = []

    def push(self, distance, word, path):
        if word in self.on_heap:
            return
        self.on_heap.add(word)
        heapq.heappush(self.heap, ((distance, len(path)), word, path))

    def __len__(self):
        return len(self.heap)

    def pop(self):
        return heapq.heappop(self.heap)


class OneLetterGame(object):
    _word_data = None

    def __init__(self, dict_path):
        self.dict_path = dict_path

    def run(self, start_word, end_word):
        start_time = time.time()
        self._word_data = collections.defaultdict(list)
        if len(start_word) != len(end_word):
            print 'words of different length; no path'
            return

        found_start, found_end = self._load_words(start_word, end_word)
        if not found_start:
            print 'start word %r not found in dictionary' % start_word
            return
        if not found_end:
            print 'end word %r not found in dictionary' % end_word
            return

        search_start_time = time.time()
        path = self._shortest_path(start_word, end_word)
        search_time = time.time() - search_start_time
        print 'search time was %.4f seconds' % search_time

        if path:
            print path
        else:
            print 'no path found from %r to %r' % (start_word, end_word)

        run_time = time.time() - start_time
        print 'total run time was %.4f seconds' % run_time

    def _load_words(self, start_word, end_word):
        found_start, found_end = False, False
        length = len(start_word)
        with open(self.dict_path) as words:
            for word in words:
                word = word.strip()
                if len(word) == length:
                    if start_word == word: found_start = True
                    if end_word == word: found_end = True
                    for bucket in self._buckets_for(word):
                        self._word_data[bucket].append(word)
        return found_start, found_end

    def _shortest_path(self, start_word, end_word):
        heap = SearchHeap()
        heap.push(distance(start_word, end_word), start_word, (start_word,))
        while len(heap):
            dist, word, path = heap.pop()
            if word == end_word:
                return path
            for neighbor in self._neighbors_of(word):
                heap.push(
                    distance(neighbor, end_word), 
                    neighbor, 
                    path + (neighbor,))
        return ()

    def _buckets_for(self, word):
        buckets = []
        for pos in range(len(word)):
            front, back = word[:pos], word[pos+1:]
            buckets.append(front+'*'+back)
        return buckets

    def _neighbors_of(self, word):
        for bucket in self._buckets_for(word):
            for word in self._word_data[bucket]:
                yield word

if __name__ == '__main__':
    import sys
    if len(sys.argv) not in [3, 4]:
        print 'Usage: python one_letter_game.py start_word end_word'
    else:
        matt = OneLetterGame(dict_path = '/usr/share/dict/words')
        matt.run(*sys.argv[1:])
</snippet></ROW><ROW><id>2722965</id><snippet>% python /tmp/one_letter_alex.py canoe happy
The shortest path (found in 51.98 sec.) is:
=&gt; canoe -- canon -- caxon -- taxon -- taxor -- taxer -- taper -- paper -- papey -- pappy -- happy

% python /tmp/one_letter_matt.py canoe happy
search time was 0.0020 seconds
('canoe', 'canon', 'caxon', 'taxon', 'taxor', 'taxer', 'taper', 'paper', 'papey', 'pappy', 'happy')
total run time was 0.2416 seconds
</snippet></ROW><ROW><id>2723105</id><snippet>&gt;&gt;&gt; x='command ". / * or any other char like this" some_param="string param" some_param2=50'
&gt;&gt;&gt;
&gt;&gt;&gt; re.findall('\w+\=\d+|\w+\="[^"]+"|"[^"]+"|\w+',x)
['command', '". / * or any other char like this"', 'some_param="string param"', 'some_param2=50']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2723422</id><snippet>L1 = L + [i1]
L2 = L + [i2]
</snippet></ROW><ROW><id>2723422</id><snippet>L1 = L[:]       #make a copy of L
L1.append(i1)
</snippet></ROW><ROW><id>2723448</id><snippet>data = [row[0] for row in cursor.fetchall()]
</snippet></ROW><ROW><id>2723968</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; q = etree.fromstring('&lt;xml&gt;&lt;hello&gt;a&lt;/hello&gt;&lt;x&gt;&lt;hello&gt;b&lt;/hello&gt;&lt;/x&gt;&lt;/xml&gt;')
&gt;&gt;&gt; q.findall('hello')     # Tag name, first level only.
[&lt;Element hello at 414a7c8&gt;]
&gt;&gt;&gt; q.findall('.//hello')  # XPath, recursive.
[&lt;Element hello at 414a7c8&gt;, &lt;Element hello at 414a818&gt;]
</snippet></ROW><ROW><id>2724071</id><snippet>lseek(2)</snippet></ROW><ROW><id>2724071</id><snippet>iterator</snippet></ROW><ROW><id>2724566</id><snippet>index()</snippet></ROW><ROW><id>2724566</id><snippet>def authenticate(func):
    def call(*args, **kwargs):
        if user['authenticated'] is True:
            return func(*args,**kwargs)
        else:
            return redirect_to(controller='login', action='index')
    return call
</snippet></ROW><ROW><id>2724566</id><snippet>authenticate()</snippet></ROW><ROW><id>2724566</id><snippet>@authenticate
def index(self):
    return render('/index.mako' )
</snippet></ROW><ROW><id>2724566</id><snippet>index()</snippet></ROW><ROW><id>2724566</id><snippet>call()</snippet></ROW><ROW><id>2724566</id><snippet>func</snippet></ROW><ROW><id>2725195</id><snippet>os.path</snippet></ROW><ROW><id>2725195</id><snippet>os</snippet></ROW><ROW><id>2725195</id><snippet>path</snippet></ROW><ROW><id>2725195</id><snippet>os</snippet></ROW><ROW><id>2725195</id><snippet>sys.modules</snippet></ROW><ROW><id>2725195</id><snippet>os.path</snippet></ROW><ROW><id>2725195</id><snippet>sys.modules</snippet></ROW><ROW><id>2725195</id><snippet>sys.modules</snippet></ROW><ROW><id>2725195</id><snippet>sys.modules</snippet></ROW><ROW><id>2725195</id><snippet>os</snippet></ROW><ROW><id>2725195</id><snippet>path</snippet></ROW><ROW><id>2725195</id><snippet>sys.modules['os.path'] = path</snippet></ROW><ROW><id>2725195</id><snippet>import os.path</snippet></ROW><ROW><id>2725195</id><snippet>os.path</snippet></ROW><ROW><id>2725195</id><snippet>os</snippet></ROW><ROW><id>2725195</id><snippet>os</snippet></ROW><ROW><id>2725195</id><snippet>import os.path</snippet></ROW><ROW><id>2725195</id><snippet>os.path</snippet></ROW><ROW><id>2725195</id><snippet>os</snippet></ROW><ROW><id>2725195</id><snippet>import os</snippet></ROW><ROW><id>2725195</id><snippet>os.path</snippet></ROW><ROW><id>2725195</id><snippet>import twisted</snippet></ROW><ROW><id>2725195</id><snippet>twisted.spread</snippet></ROW><ROW><id>2725195</id><snippet>os.name</snippet></ROW><ROW><id>2725195</id><snippet>os.path</snippet></ROW><ROW><id>2725195</id><snippet>__init__.py</snippet></ROW><ROW><id>2725392</id><snippet>wx.EVT_COMMAND_TEXT_ENTER</snippet></ROW><ROW><id>2725392</id><snippet>wx.EVT_TEXT_ENTER</snippet></ROW><ROW><id>2725578</id><snippet>def comma_separated(lst):
    """
    &gt;&gt;&gt; comma_separated(['a'])
    'a'
    &gt;&gt;&gt; comma_separated(['a', 'b'])
    'a and b'
    &gt;&gt;&gt; comma_separated(['a', 'b', 'c'])
    'a, b and c'
    """
    if len(lst) == 1:
        return lst[0]
    comma_part = ", ".join(lst[:-1])
    return "%s and %s" % (comma_part, lst[-1])

if __name__ == "__main__":
    import doctest
    doctest.testmod()
</snippet></ROW><ROW><id>2725668</id><snippet>__import__()</snippet></ROW><ROW><id>2725668</id><snippet>import</snippet></ROW><ROW><id>2725668</id><snippet>__import__()</snippet></ROW><ROW><id>2725668</id><snippet>__import__()</snippet></ROW><ROW><id>2725668</id><snippet>import</snippet></ROW><ROW><id>2725668</id><snippet>import pkg
import pkg.mod
from pkg import mod, mod2
from pkg.mod import func, func2
from pkg.mod import submod
</snippet></ROW><ROW><id>2725668</id><snippet>import</snippet></ROW><ROW><id>2725668</id><snippet>pkg</snippet></ROW><ROW><id>2725668</id><snippet>import pkg.mod</snippet></ROW><ROW><id>2725668</id><snippet>pkg.mod.func()</snippet></ROW><ROW><id>2725668</id><snippet>import</snippet></ROW><ROW><id>2725668</id><snippet>pkg</snippet></ROW><ROW><id>2725668</id><snippet>mod</snippet></ROW><ROW><id>2725668</id><snippet>__import__()</snippet></ROW><ROW><id>2725668</id><snippet>pkg</snippet></ROW><ROW><id>2725668</id><snippet>pkg = __import__('pkg')
pkg = __import__('pkg.mod')
</snippet></ROW><ROW><id>2725668</id><snippet>import</snippet></ROW><ROW><id>2725668</id><snippet>__import__()</snippet></ROW><ROW><id>2725668</id><snippet>tmp = __import__('pkg')
mod = tmp.mod
mod2 = tmp.mod2
</snippet></ROW><ROW><id>2725668</id><snippet>pkg</snippet></ROW><ROW><id>2725668</id><snippet>mod</snippet></ROW><ROW><id>2725668</id><snippet>mod2</snippet></ROW><ROW><id>2725668</id><snippet>__import__()</snippet></ROW><ROW><id>2725668</id><snippet>mod</snippet></ROW><ROW><id>2725668</id><snippet>mod2</snippet></ROW><ROW><id>2725668</id><snippet>import</snippet></ROW><ROW><id>2725668</id><snippet>tmp = __import__('pkg', fromlist=['mod', 'mod2'])
mod = tmp.mod
mod2 = tmp.mod2
</snippet></ROW><ROW><id>2725668</id><snippet>__import__()</snippet></ROW><ROW><id>2725668</id><snippet>pkg.mod</snippet></ROW><ROW><id>2725668</id><snippet>pkg.mod2</snippet></ROW><ROW><id>2725668</id><snippet>pkg</snippet></ROW><ROW><id>2725668</id><snippet>mod</snippet></ROW><ROW><id>2725668</id><snippet>mod2</snippet></ROW><ROW><id>2725668</id><snippet>__import__()</snippet></ROW><ROW><id>2725668</id><snippet>import</snippet></ROW><ROW><id>2725668</id><snippet>tmp = __import__('pkg.mod', fromlist=['submod'])
submod = tmp.submod
</snippet></ROW><ROW><id>2725668</id><snippet>tmp</snippet></ROW><ROW><id>2725668</id><snippet>pkg</snippet></ROW><ROW><id>2725668</id><snippet>pkg.mod</snippet></ROW><ROW><id>2725668</id><snippet>submod</snippet></ROW><ROW><id>2725668</id><snippet>import</snippet></ROW><ROW><id>2725668</id><snippet>.</snippet></ROW><ROW><id>2725668</id><snippet>__import__()</snippet></ROW><ROW><id>2725668</id><snippet>__import__()</snippet></ROW><ROW><id>2725668</id><snippet>import pkg as p</snippet></ROW><ROW><id>2725668</id><snippet>from pkg import mod as m</snippet></ROW><ROW><id>2725668</id><snippet>__import__()</snippet></ROW><ROW><id>2725668</id><snippet>as</snippet></ROW><ROW><id>2725668</id><snippet>import</snippet></ROW><ROW><id>2725747</id><snippet>def foo(x):
   for i in xrange(10):
      yield x * i
...
for x in foo(5):
   print(x)
</snippet></ROW><ROW><id>2725747</id><snippet>import java.util.Iterator;
import java.util.Iterable;

class Foo implements Iterable&lt;Integer&gt; {
   public final int x;

   public Foo(int x) {
      this.x = x;
   }

   public Iterator&lt;Integer&gt; iterate() {
      return new Iterator&lt;Integer&gt; {
         int i = 0;

         public boolean hasNext() {
            return i &lt; 10;
         }

         public Integer next() {
            return x * (i ++);
         }
      };
   }
}
...
for (int x : new Foo(5)) {
   System.out.println(x);
}
</snippet></ROW><ROW><id>2725747</id><snippet>java.util.HashSet</snippet></ROW><ROW><id>2725836</id><snippet>tostring</snippet></ROW><ROW><id>2725836</id><snippet>struct</snippet></ROW><ROW><id>2725836</id><snippet>float64 *</snippet></ROW><ROW><id>2725849</id><snippet>'0,0,0'</snippet></ROW><ROW><id>2725849</id><snippet>split(',')</snippet></ROW><ROW><id>2725849</id><snippet>color = '255, 255, 255'
red, green, blue = color.split(',')
red = int(red)
green = int(green)
blue = int(blue)
</snippet></ROW><ROW><id>2725849</id><snippet>color = '128, 128, 128'
red, green, blue = [int(c) for c in color.split(',')]
</snippet></ROW><ROW><id>2725908</id><snippet>schtasks /Create /SC HOURLY /TN PythonTask /TR "PATH_TO_PYTHON_EXE PATH_TO_PYTHON_SCRIPT"
</snippet></ROW><ROW><id>2725908</id><snippet>schtasks /?
</snippet></ROW><ROW><id>2726194</id><snippet>mylist.append(5)</snippet></ROW><ROW><id>2726194</id><snippet>mydict[key]=value</snippet></ROW><ROW><id>2726194</id><snippet>key</snippet></ROW><ROW><id>2726194</id><snippet>value</snippet></ROW><ROW><id>2726194</id><snippet>in</snippet></ROW><ROW><id>2726316</id><snippet>ImageDraw</snippet></ROW><ROW><id>2726351</id><snippet>import sys
from collections import defaultdict
from time import time
import pygame
from pygame.key import name as keyname
from pygame.locals import *

# Mapping of a key to a list of holdtimes (from which you can average, etc)
holdtimes = defaultdict(list)
# Mapping of a key pair to a list of digraph times
digraphs = defaultdict(list)
# Keys which have been pressed down, but not up yet.
pending = {}
# Last key to be de-pressed, corresponding time).
last_key = None
# Text that the user has typed so far (one sublist for every Enter pressed)
typed_text = [[]]

def show_times():
    all_text = [k for line in typed_text for k in line]
    print "Holdtimes:"
    for key in all_text:
        print "%s: %.5f" % (key, holdtimes[key].pop(0))

    print "Digraphs:"
    for key1, key2 in zip(all_text, all_text[1:]):
        print "(%s, %s): %.5f" % (key1, key2,
                                  digraphs[(key1, key2)].pop(0))

def time_keypresses(events):
    global last_key
    for event in events:
        if event.type == KEYDOWN:
            # ESC exits the program
            if event.key == K_ESCAPE:
                show_times()
                sys.exit(0)

            t = pending[event.key] = time()
            if last_key is not None:
                if event.key != K_RETURN:
                    digraphs[(last_key[0], keyname(event.key))].append(t - last_key[1])
                last_key = None
        elif event.type == KEYUP:
            if event.key == K_RETURN:
                update_screen()
                typed_text.append([])
                pending.pop(event.key)
                last_key = None
            else:
                t = time()
                holdtimes[keyname(event.key)].append(t - pending.pop(event.key))
                last_key = [keyname(event.key), t]
                typed_text[-1].append(keyname(event.key))
        # Any other event handling you might have would go here...

def update_screen():
    global screen
    screen.fill((255, 255, 255))

    header_font = pygame.font.Font(None, 42)
    header = header_font.render("Type away! Press 'Enter' to show.", True, (0, 0, 0))
    header_rect = header.get_rect()
    header_rect.centerx = screen.get_rect().centerx
    header_rect.centery = screen.get_rect().centery - 100

    text_font = pygame.font.Font(None, 32)
    user_text = text_font.render("".join(typed_text[-1]) if typed_text[-1] else "...",
                                 True, (0, 0, 255))
    text_rect = user_text.get_rect()
    text_rect.centerx = screen.get_rect().centerx
    text_rect.centery = screen.get_rect().centery    

    screen.blit(header, header_rect)
    screen.blit(user_text, text_rect)

    pygame.display.update()


if __name__ == '__main__':
    pygame.init()
    window = pygame.display.set_mode((800, 600))
    screen = pygame.display.get_surface()
    update_screen()
    while True:
        time_keypresses(pygame.event.get())
</snippet></ROW><ROW><id>2726428</id><snippet>X*n</snippet></ROW><ROW><id>2726428</id><snippet>'a'*10</snippet></ROW><ROW><id>2726428</id><snippet>list = [set() for x in xrange(n)]
</snippet></ROW><ROW><id>2726553</id><snippet>import MySQLdb
conn = MySQLdb.connect(host='localhost', user='u', passwd='p', db='mydb')
curs = conn.cursor()
uids = [1234,4321,1111]
qry = ("""SELECT cheese 
            FROM cheeseshop 
           WHERE id IN (%s)""" % ','.join(['%s']*len(uids)))
# 'SELECT cheese FROM cheeseshop WHERE id IN (%s,%s,%s)'
curs.execute(qry, uids)
curs.fetchone()
# ...
</snippet></ROW><ROW><id>2726553</id><snippet>import sqlite3
conn = sqlite3.connect(':memory:')
curs = conn.cursor()
uids = [1234,4321,1111]
qry = ("""SELECT cheese 
            FROM cheeseshop 
           WHERE id IN (%s)""" % ','.join('?'*len(uids)))
# 'SELECT cheese FROM cheeseshop WHERE id IN (?,?,?)'
curs.execute(qry, uids)
curs.fetchone()
# ...
</snippet></ROW><ROW><id>2726583</id><snippet>exec</snippet></ROW><ROW><id>2726583</id><snippet>exec</snippet></ROW><ROW><id>2726583</id><snippet>$exec('python blibble.py',$output,$ret_code);
</snippet></ROW><ROW><id>2726647</id><snippet>defaultdict</snippet></ROW><ROW><id>2726647</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; h = defaultdict(list)
&gt;&gt;&gt; h['a'].append('b')
&gt;&gt;&gt; h
defaultdict(&lt;type 'list'&gt;, {'a': ['b']})
</snippet></ROW><ROW><id>2726647</id><snippet>defaultdict</snippet></ROW><ROW><id>2726647</id><snippet>setdefault</snippet></ROW><ROW><id>2726716</id><snippet>add2 = ''.join(chr(ord(c) + 2) if c not in "\n\r " else c for c in text)
</snippet></ROW><ROW><id>2726906</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>2726906</id><snippet>.py</snippet></ROW><ROW><id>2726906</id><snippet>os</snippet></ROW><ROW><id>2726906</id><snippet>import os.path
import sys

print os.path.abspath(sys.argv[0])
</snippet></ROW><ROW><id>2727085</id><snippet>changed</snippet></ROW><ROW><id>2727085</id><snippet>class NumberEntry(gtk.Entry):
    def __init__(self):
        gtk.Entry.__init__(self)
        self.connect('changed', self.on_changed)

    def on_changed(self, *args):
        text = self.get_text().strip()
        self.set_text(''.join([i for i in text if i in '0123456789']))
</snippet></ROW><ROW><id>2727085</id><snippet>    def numbify(widget):
        def filter_numbers(entry, *args):
            text = entry.get_text().strip()
            entry.set_text(''.join([i for i in text if i in '0123456789']))

        widget.connect('changed', filter_numbers)

    # Use gtk.Builder rather than glade, you'll need to change the format of your .glade file in Glade accordingly
    builder = gtk.Builder()
    builder.add_from_file('yourprogram.glade')
    entry = builder.get_object('yourentry')

    numbify(entry)
</snippet></ROW><ROW><id>2727468</id><snippet>&gt;&gt;&gt; jsondata = {'a': '', 'b': {'z': True} }
&gt;&gt;&gt; for key in jsondata:
...     if type(jsondata[key]) is dict and 'z' in jsondata[key].keys() and jsondata[key]['z'] is True:
...         print 'yes'
...
yes
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2727468</id><snippet>&gt;&gt;&gt; jsondata = {'a': '', 'b': {'z': True}, 'c' :{'zz':True}}
&gt;&gt;&gt; for key in jsondata:
...     if type(jsondata[key]) is dict and jsondata[key].get('z',False):
...         print 'yes'
...
yes
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2727815</id><snippet>def a():
    pass

a.w = 'www'
print a.w
</snippet></ROW><ROW><id>2727815</id><snippet>class a:
    w = 'www'

print a.w
</snippet></ROW><ROW><id>2727815</id><snippet>class b:
    def __init__(self):
        self.w = 'www'

c = b()
print c.w
</snippet></ROW><ROW><id>2727917</id><snippet>make install</snippet></ROW><ROW><id>2727917</id><snippet>setup.py</snippet></ROW><ROW><id>2727917</id><snippet>setup.py</snippet></ROW><ROW><id>2728272</id><snippet>__init__</snippet></ROW><ROW><id>2728272</id><snippet>GET</snippet></ROW><ROW><id>2728272</id><snippet>&gt;&gt;&gt; s.__dict__
{'GET': &lt;bound method Sub.get of &lt;__main__.Sub object at 0xb70896cc&gt;&gt;}
</snippet></ROW><ROW><id>2728272</id><snippet>GET</snippet></ROW><ROW><id>2728272</id><snippet>get</snippet></ROW><ROW><id>2728272</id><snippet>GET</snippet></ROW><ROW><id>2728272</id><snippet>get</snippet></ROW><ROW><id>2728272</id><snippet>Sub.GET(instance)</snippet></ROW><ROW><id>2728272</id><snippet>Sub</snippet></ROW><ROW><id>2728272</id><snippet>GET</snippet></ROW><ROW><id>2728272</id><snippet>Sub.get(instance)</snippet></ROW><ROW><id>2728272</id><snippet>GET</snippet></ROW><ROW><id>2728272</id><snippet>get</snippet></ROW><ROW><id>2728272</id><snippet>GET</snippet></ROW><ROW><id>2728272</id><snippet>get</snippet></ROW><ROW><id>2728272</id><snippet>gc</snippet></ROW><ROW><id>2728272</id><snippet>__del__</snippet></ROW><ROW><id>2728272</id><snippet>pickle</snippet></ROW><ROW><id>2728272</id><snippet>class MethodAliasingType(type):
    def __init__(self, name, bases, attrs):
        # attrs is the dict of attributes that was used to create the
        # class 'self', modifying it has no effect on the class.
        # So use setattr() to set the attribute.
        for k, v in attrs.iteritems():
            if not hasattr(self, k.upper()):
                setattr(self, k.upper(), v)
        super(MethodAliasingType, self).__init__(name, bases, attrs)

class Base(object):
    __metaclass__ = MethodAliasingType

class Sub(Base):
    def get(self):
        pass
</snippet></ROW><ROW><id>2728272</id><snippet>Sub.get</snippet></ROW><ROW><id>2728272</id><snippet>Sub.GET</snippet></ROW><ROW><id>2728272</id><snippet>&gt;&gt;&gt; Sub.get
&lt;unbound method Sub.get&gt;
&gt;&gt;&gt; Sub.GET
&lt;unbound method Sub.get&gt;
&gt;&gt;&gt; Sub().get
&lt;bound method Sub.get of &lt;__main__.Sub object at 0xb708978c&gt;&gt;
&gt;&gt;&gt; Sub().GET
&lt;bound method Sub.get of &lt;__main__.Sub object at 0xb7089a6c&gt;&gt;
&gt;&gt;&gt; Sub().__dict__
{}
</snippet></ROW><ROW><id>2729185</id><snippet>    username # filled with user input or first/lastname etc.

    #check for other profile with equal names (and those with a postfix)
    others = [int(username.replace(name, "0")) 
              for p in User.objects.filter(username__startswith=username).exclude(user=self.user)
              if username.replace(name, "0").isdigit()]

    #do we need a postfix
    if len(others) &gt; 0 and 0 in others:
        username = "%s%d" % (username, max(others) + 1)
</snippet></ROW><ROW><id>2729252</id><snippet>import collections
import itertools

def build_catalog(L):
    counter = itertools.count().next
    names = collections.defaultdict(counter)
    result = []
    for t in L:
        new_t = [ names[item] for item in t ]
        result.append(new_t)
    catalog = dict((name, idx) for idx, name in names.iteritems())
    return result, catalog
</snippet></ROW><ROW><id>2729252</id><snippet>&gt;&gt;&gt; input = [('dog', 'dog', 'cat', 'mouse'), ('cat', 'ruby', 'python', 'mouse')]
&gt;&gt;&gt; outputlist, outputmapping = build_catalog(input)
&gt;&gt;&gt; outputlist
[[0, 0, 1, 2], [1, 3, 4, 2]]
&gt;&gt;&gt; outputmapping
{0: 'dog', 1: 'cat', 2: 'mouse', 3: 'ruby', 4: 'python'}
</snippet></ROW><ROW><id>2729303</id><snippet>% head -1 tmp.py
# -*- coding: asdfasdfasdf -*-
% python tmp.py
  File "tmp.py", line 1
SyntaxError: encoding problem: with BOM
</snippet></ROW><ROW><id>2729369</id><snippet>CMPFUNC = CFUNCTYPE(c_int, POINTER(c_int), POINTER(c_int))
</snippet></ROW><ROW><id>2729369</id><snippet> def py_cmp_func(a, b):
     print "py_cmp_func", a, b
     return 0
</snippet></ROW><ROW><id>2729369</id><snippet>cmp_func = CMPFUNC(py_cmp_func)
</snippet></ROW><ROW><id>2729456</id><snippet>SCRIPT_NAME</snippet></ROW><ROW><id>2729456</id><snippet>django.root</snippet></ROW><ROW><id>2729456</id><snippet>SCRIPT_NAME</snippet></ROW><ROW><id>2729456</id><snippet>.wsgi</snippet></ROW><ROW><id>2729456</id><snippet>_application = django.core.handlers.wsgi.WSGIHandler()

def application(environ, start_response):
    os.environ['SCRIPT_NAME'] = '/myproj/'
    return _application(environ, start_response)
</snippet></ROW><ROW><id>2729560</id><snippet>optparse.OptionParser</snippet></ROW><ROW><id>2729560</id><snippet>class Conflict(object):
    __slots__ = ("combination", "message", "parser")

    def __init__(self, combination, message, parser):
        self.combination = combination
        self.message = str(message)
        self.parser = parser

    def accepts(self, options):
        count = sum(1 for option in self.combination if hasattr(options, option))
        return count &lt;= 1

class ConflictError(Exception):
    def __init__(self, conflict):
        self.conflict = conflict

    def __str__(self):
        return self.conflict.message

class MyOptionParser(optparse.OptionParser):
    def __init__(self, *args, **kwds):
        optparse.OptionParser.__init__(self, *args, **kwds)
        self.conflicts = []

    def set_not_allowed(self, combination, message):
        self.conflicts.append(Conflict(combination, message, self))

    def parse_args(self, *args, **kwds):
        # Force-ignore the default values and parse the arguments first
        kwds2 = dict(kwds)
        kwds2["values"] = optparse.Values()
        options, _ = optparse.OptionParser.parse_args(self, *args, **kwds2)

        # Check for conflicts
        for conflict in self.conflicts:
            if not conflict.accepts(options):
                raise ConflictError(conflict)

        # Parse the arguments once again, now with defaults
        return optparse.OptionParser.parse_args(self, *args, **kwds)
</snippet></ROW><ROW><id>2729560</id><snippet>ConflictError</snippet></ROW><ROW><id>2729560</id><snippet>parse_args</snippet></ROW><ROW><id>2729560</id><snippet>try:
    options, args = parser.parse_args()
except ConflictError as err:
    parser.error(err.message)
</snippet></ROW><ROW><id>2729804</id><snippet>class Choices(models.Model):
  description = models.CharField(max_length=300)

class Profile(models.Model):
  user = models.ForeignKey(User, blank=True, unique=True, verbose_name_('user'))
  choices = models.ManyToManyField(Choices)
</snippet></ROW><ROW><id>2729804</id><snippet>class ProfileForm(forms.ModelForm):
  Meta:
    model = Profile
    exclude ['user']
</snippet></ROW><ROW><id>2729804</id><snippet>if request.method=='POST':
  form = ProfileForm(request.POST)
  if form.is_valid():
    profile = form.save(commit=False)
    profile.user = request.user
    profile.save()
else:
  form = ProfileForm()

return render_to_response(template_name, {"profile_form": form}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>2730158</id><snippet>d.update(p)</snippet></ROW><ROW><id>2730158</id><snippet>class Test:
    def test(self, p, d = None):
        if d is None:
            d = {}
        d.update(p)
        return d
</snippet></ROW><ROW><id>2730220</id><snippet>\b[a-zA-Z]\w*
</snippet></ROW><ROW><id>2730266</id><snippet>def check(somelist, player):
  return somelist.count(player) == 3
</snippet></ROW><ROW><id>2730266</id><snippet>def check(somelist, player):
  return somelist.count(player) == len(somelist)
</snippet></ROW><ROW><id>2730266</id><snippet>3</snippet></ROW><ROW><id>2730266</id><snippet>def check(somelist, player):
  return all(x==player for x in somelist)
</snippet></ROW><ROW><id>2730266</id><snippet>player</snippet></ROW><ROW><id>2730266</id><snippet>if</snippet></ROW><ROW><id>2730266</id><snippet>list</snippet></ROW><ROW><id>2730266</id><snippet>x = list(thetuple)</snippet></ROW><ROW><id>2730266</id><snippet>list</snippet></ROW><ROW><id>2730266</id><snippet>board</snippet></ROW><ROW><id>2730266</id><snippet>for i in range(3):
  if check([row[i] for row in board], player):
    return player
if check([row[i] for i, row in enumerate(board)], player):
    return player
if check([row[2-i] for i, row in enumerate(board)], player):
    return player
</snippet></ROW><ROW><id>2730266</id><snippet>enumerate</snippet></ROW><ROW><id>2730353</id><snippet>class MyModel(models.Model):
    field = models.ForeignKey(MyOtherModel)

mymodel_instance = MyModel.objects.get(pk=1)
# queries database for related object and the result is a MyOtherModel instance
print mymodel_instance.field
# result is simply the integer id value, does not do any query
print mymodel_instance.field_id
</snippet></ROW><ROW><id>2730453</id><snippet>DocTestRunner</snippet></ROW><ROW><id>2730453</id><snippet>run</snippet></ROW><ROW><id>2730453</id><snippet>#imports left out, code not tested - just to point you in the right direction
class MyDocTestRunner(DocTestRunner):
    def run(self, test, compileflags=None, out=None, clear_globs=True):
        if out is None:
            handler = None
        else:
            handler = StreamHandler(out)
        logger = logging.getLogger() # root logger (say)
        if handler:
            logger.addHandler(handler)
        try:
            DocTestRunner.run(self, test, compileflags, out, clear_globs)
        finally:
            if handler:
                logger.removeHandler(handler)
                handler.close()
</snippet></ROW><ROW><id>2730453</id><snippet>DocTestRunner</snippet></ROW><ROW><id>2730773</id><snippet>html.parser</snippet></ROW><ROW><id>2730773</id><snippet>html.entity</snippet></ROW><ROW><id>2731094</id><snippet>.pyc</snippet></ROW><ROW><id>2731158</id><snippet>client</snippet></ROW><ROW><id>2731158</id><snippet>lambda</snippet></ROW><ROW><id>2731158</id><snippet>passIf = lambda client=client: client.returncode(CMD2) == 0
</snippet></ROW><ROW><id>2731158</id><snippet>def createLambda(client):
    return lambda: client.returncode(CMD2) == 0
#...
passIf = createLambda(client)
</snippet></ROW><ROW><id>2731158</id><snippet>client</snippet></ROW><ROW><id>2731158</id><snippet>createLambda</snippet></ROW><ROW><id>2731474</id><snippet>person/
   __init__.py
   person.py
</snippet></ROW><ROW><id>2731474</id><snippet>person</snippet></ROW><ROW><id>2731474</id><snippet>person.person</snippet></ROW><ROW><id>2731474</id><snippet>import person.person
p= person.person.Person('Tim', 42)
</snippet></ROW><ROW><id>2731474</id><snippet>person</snippet></ROW><ROW><id>2731474</id><snippet>__init__.py</snippet></ROW><ROW><id>2731998</id><snippet>// Javascript
var divs = document.getElementsByTagName("div")

// jQuery
$("div")
</snippet></ROW><ROW><id>2731998</id><snippet>function addEvent(obj, evType, fn, useCapture){
    if (obj.addEventListener) { // standards-based browsers
        obj.addEventListener(evType, fn, useCapture);
        return true;
    } else if (obj.attachEvent) { // IE
        var r = obj.attachEvent("on"+evType, fn);
        return r;
    } else { // some unknown browser
        alert("Handler could not be attached");
    }
}
</snippet></ROW><ROW><id>2731998</id><snippet>// Javascript
var button = document.getElementById("buttonID");
addEvent(button, "click", function() { alert("clicked"); }, false);

// jQuery (contains code similar to above function to handle browser differences)
$("#buttonID").click(function() { alert("clicked"); });
</snippet></ROW><ROW><id>2732354</id><snippet>__new__</snippet></ROW><ROW><id>2732354</id><snippet>__init__</snippet></ROW><ROW><id>2732354</id><snippet>class NamedInteger(int):

    def __new__(cls, value, name='pony'):
        inst = super(NamedInteger, cls).__new__(cls, value)
        inst.name = name
        return inst

    def __str__(self):
        return self.name

x = NamedInteger(5)
print x + 3                 # =&gt; 8   
print str(x)                # =&gt; pony
x = NamedInteger(3, "foo")  
print x + 3                 # =&gt; 6
print str(x)                # =&gt; foo
</snippet></ROW><ROW><id>2733000</id><snippet>&gt;&gt;&gt; xs = [3,2,1]
&gt;&gt;&gt; ys = [1,2,3]
&gt;&gt;&gt; points = zip(xs,ys)
&gt;&gt;&gt; points
[(3, 1), (2, 2), (1, 3)]
&gt;&gt;&gt; sorted(points)
[(1, 3), (2, 2), (3, 1)]
</snippet></ROW><ROW><id>2733000</id><snippet>&gt;&gt;&gt; sorted_points = sorted(points)
&gt;&gt;&gt; new_xs = [point[0] for point in sorted_points]
&gt;&gt;&gt; new_ys = [point[1] for point in sorted_points]
&gt;&gt;&gt; new_xs
[1, 2, 3]
&gt;&gt;&gt; new_ys
[3, 2, 1]
</snippet></ROW><ROW><id>2733647</id><snippet>zip_safe=False</snippet></ROW><ROW><id>2733647</id><snippet>setup()</snippet></ROW><ROW><id>2733647</id><snippet>setup.py</snippet></ROW><ROW><id>2733647</id><snippet>zip_safe=False</snippet></ROW><ROW><id>2733647</id><snippet>pdb</snippet></ROW><ROW><id>2733844</id><snippet>json_raw= raw.readlines()
json_object = json.loads(json_raw[0])
</snippet></ROW><ROW><id>2733844</id><snippet>json_object = json.load(raw)
</snippet></ROW><ROW><id>2733844</id><snippet>json_object[0]</snippet></ROW><ROW><id>2733844</id><snippet>for song in json_object[0]:</snippet></ROW><ROW><id>2733844</id><snippet>json_object[0][song]</snippet></ROW><ROW><id>2733874</id><snippet>root.after(10*1000, root.quit)
</snippet></ROW><ROW><id>2733917</id><snippet>def clean(self, data, initial=None):
    try:
        if data.size &gt; somesize:
            raise ValidationError('File is too big')

        (junk, ext) = os.path.splitext(data.name)
        if not ext in ('.jpg', '.gif', '.png'):
            raise ValidationError('Invalid file type')

    except AttributeError:
        raise ValidationError(self.error_messages['invalid'])

    return FileField.clean(self, data, initial)
</snippet></ROW><ROW><id>2734013</id><snippet>|</snippet></ROW><ROW><id>2734013</id><snippet>re.compile("abc|xyz")
</snippet></ROW><ROW><id>2734328</id><snippet>if __name__ == "__main__":
    firstFunctionEver()
</snippet></ROW><ROW><id>2734494</id><snippet>d={}</snippet></ROW><ROW><id>2734494</id><snippet>d.clear()</snippet></ROW><ROW><id>2734494</id><snippet>d={}</snippet></ROW><ROW><id>2734494</id><snippet>d</snippet></ROW><ROW><id>2734494</id><snippet>d</snippet></ROW><ROW><id>2734494</id><snippet>d.clear()</snippet></ROW><ROW><id>2734494</id><snippet>d</snippet></ROW><ROW><id>2734494</id><snippet>d.clear()</snippet></ROW><ROW><id>2734494</id><snippet>d</snippet></ROW><ROW><id>2734494</id><snippet>turds</snippet></ROW><ROW><id>2734494</id><snippet>d.clear()</snippet></ROW><ROW><id>2734746</id><snippet>if x0 &gt; x1:
    x0, x1 = x1, x0
    y0, y1 = y1, y0
</snippet></ROW><ROW><id>2734746</id><snippet>switched = False
if x0 &gt; x1:
    switched = True
    x0, x1 = x1, x0
    y0, y1 = y1, y0
</snippet></ROW><ROW><id>2734746</id><snippet>if switched:
    line.reverse()
</snippet></ROW><ROW><id>2735647</id><snippet>is_set()</snippet></ROW><ROW><id>2735647</id><snippet>False</snippet></ROW><ROW><id>2735647</id><snippet>False</snippet></ROW><ROW><id>2735647</id><snippet>intervalTime</snippet></ROW><ROW><id>2735647</id><snippet>count</snippet></ROW><ROW><id>2735647</id><snippet>self.iterations</snippet></ROW><ROW><id>2735647</id><snippet>0</snippet></ROW><ROW><id>2735647</id><snippet>    while not self.finished.is_set() and (self.iterations &lt;= 0 or count &lt; self.iterations):
</snippet></ROW><ROW><id>2736049</id><snippet>json.decoder.JSONDecoder</snippet></ROW><ROW><id>2736049</id><snippet>simplejson</snippet></ROW><ROW><id>2736049</id><snippet>json.loads</snippet></ROW><ROW><id>2736049</id><snippet>json.decoder</snippet></ROW><ROW><id>2736049</id><snippet>def JSONObject</snippet></ROW><ROW><id>2736049</id><snippet>&gt;&gt;&gt; import demjson
&gt;&gt;&gt; demjson.decode('{suggestion:[{query:"London",interpretation: ...')
{u'suggestion': [{u'query': u'London', u'operation': 2, u'interpretation': ...
</snippet></ROW><ROW><id>2736154</id><snippet>result = re.findall(r"\b(?:(?:https?|ftp|file)://|www\.|ftp\.)[-A-Z0-9+&amp;@#/%=~_|$?!:,.]*[A-Z0-9+&amp;@#/%=~_|$]", subject)
</snippet></ROW><ROW><id>2736172</id><snippet>os.path.normpath(mypath) + os.sep
</snippet></ROW><ROW><id>2736175</id><snippet>from django.db.models.loading import get_models, get_app
app = get_app('myappname')
models = get_models(app)
</snippet></ROW><ROW><id>2736307</id><snippet>set_attributes</snippet></ROW><ROW><id>2736307</id><snippet>column = gtk.TreeViewColumn('Pixbuf and text')
cell1 = gtk.CellRenderText()
cell2 = gtk.CellRenderPixbuf()
column.pack_start(cell1, True)
column.pack_start(cell2, False)
column.set_attribute(cell1, 'text', 0) # the first column contains the text
column.set_attribute(cell2, 'pixbuf', 1) # the second column contains the pixbuf
</snippet></ROW><ROW><id>2736307</id><snippet>class MyObject:
    def __init__(self, text, pixbuf):
        self.text = text
        self.pixbuf = pixbuf

def cell1_cb(col, cell, model, iter):
    obj = model.get_value(iter)
    cell.set_property('text', obj.text)

def cell2_cb(col, cell, model, iter):
    obj = model.get_value(iter)
    cell.set_property('pixbuf', obj.pixbuf)

column = gtk.TreeViewColumn('Pixbuf and text')
cell1 = gtk.CellRenderText()
cell2 = gtk.CellRenderPixbuf()
column.pack_start(cell1, True)
column.pack_start(cell2, False)
column.set_cell_data_func(cell1, cell1_cb)
column.set_cell_data_func(cell2, cell2_cb)
</snippet></ROW><ROW><id>2736417</id><snippet>class Base(object):
    @property
    def path(self):
        raise NotImplementedError


class SubClass(Base):
    path = 'blah'
</snippet></ROW><ROW><id>2736494</id><snippet>self.recipientIMSI</snippet></ROW><ROW><id>2736494</id><snippet>self.recipientMSISDN</snippet></ROW><ROW><id>2736494</id><snippet>int</snippet></ROW><ROW><id>2736494</id><snippet>print type(self.recipientIMSI), type(self.recipientMSISDN)
</snippet></ROW><ROW><id>2736494</id><snippet>eval</snippet></ROW><ROW><id>2736494</id><snippet>eval</snippet></ROW><ROW><id>2736494</id><snippet>eval</snippet></ROW><ROW><id>2736494</id><snippet>exec</snippet></ROW><ROW><id>2736677</id><snippet>ssh</snippet></ROW><ROW><id>2736722</id><snippet>pycurl.HEADERFUNCTION</snippet></ROW><ROW><id>2736722</id><snippet>import pycurl
import cStringIO
import re

curl = pycurl.Curl()

buff = cStringIO.StringIO()
hdr = cStringIO.StringIO()

curl.setopt(pycurl.URL, 'http://example.org')
curl.setopt(pycurl.WRITEFUNCTION, buff.write)
curl.setopt(pycurl.HEADERFUNCTION, hdr.write)
curl.perform()

print "status code: %s" % curl.getinfo(pycurl.HTTP_CODE)
# -&gt; 200

status_line = hdr.getvalue().splitlines()[0]
m = re.match(r'HTTP\/\S*\s*\d+\s*(.*?)\s*$', status_line)
if m:
    status_message = m.groups(1)
else:
    status_message = ''

print "status message: %s" % status_message
# -&gt; "OK"
</snippet></ROW><ROW><id>2736725</id><snippet>list()</snippet></ROW><ROW><id>2736725</id><snippet>[]</snippet></ROW><ROW><id>2736725</id><snippet>&gt;&gt;&gt; import __builtin__
&gt;&gt;&gt; __builtin__.list = set
&gt;&gt;&gt; list()
set([])
&gt;&gt;&gt; []
[]
</snippet></ROW><ROW><id>2736725</id><snippet>[]</snippet></ROW><ROW><id>2736725</id><snippet>list()</snippet></ROW><ROW><id>2736725</id><snippet>__init__</snippet></ROW><ROW><id>2736725</id><snippet>__new__</snippet></ROW><ROW><id>2737294</id><snippet>open(file, 'wb')</snippet></ROW><ROW><id>2737294</id><snippet>data.replace('\r','')</snippet></ROW><ROW><id>2737294</id><snippet>exec</snippet></ROW><ROW><id>2737294</id><snippet>execfile</snippet></ROW><ROW><id>2737863</id><snippet>ip = '192.168.1.1'
print '.'.join([bin(int(x)+256)[3:] for x in ip.split('.')])
</snippet></ROW><ROW><id>2738217</id><snippet>Node</snippet></ROW><ROW><id>2738222</id><snippet>render_comment_form</snippet></ROW><ROW><id>2738222</id><snippet>csrf_token</snippet></ROW><ROW><id>2738222</id><snippet>{% csrf_token %}</snippet></ROW><ROW><id>2738299</id><snippet>import os, sys; sys.path.append(os.path.dirname(__file__))
</snippet></ROW><ROW><id>2738378</id><snippet>And(?!rea$).*
</snippet></ROW><ROW><id>2738378</id><snippet>if re.match(r"And(?!rea$).*", subject):
    # Successful match 
    # Note that re.match always anchor the match
    # to the start of the string.
else:
    # Match attempt failed
</snippet></ROW><ROW><id>2738378</id><snippet>(?!Andrea$)And.*
</snippet></ROW><ROW><id>2738378</id><snippet>(?!excludeRegex$)includeRegex
</snippet></ROW><ROW><id>2738468</id><snippet>with</snippet></ROW><ROW><id>2738468</id><snippet>f = open("hello.txt", "wb")
try:
    f.write("Hello Python!\n")
finally:
    f.close()
</snippet></ROW><ROW><id>2738468</id><snippet>try.. except...</snippet></ROW><ROW><id>2738468</id><snippet>with</snippet></ROW><ROW><id>2738478</id><snippet>mmap.py</snippet></ROW><ROW><id>2738746</id><snippet>islice</snippet></ROW><ROW><id>2738746</id><snippet>def islice(iterable, *args):
    # islice('ABCDEFG', 2) --&gt; A B
    # islice('ABCDEFG', 2, 4) --&gt; C D
    # islice('ABCDEFG', 2, None) --&gt; C D E F G
    # islice('ABCDEFG', 0, None, 2) --&gt; A C E G
    s = slice(*args)
    it = iter(xrange(s.start or 0, s.stop or sys.maxint, s.step or 1))
    nexti = next(it)
    for i, element in enumerate(iterable):
        if i == nexti:
            yield element
            nexti = next(it)
</snippet></ROW><ROW><id>2738746</id><snippet>grouper</snippet></ROW><ROW><id>2738746</id><snippet>from __future__ import division

from itertools import izip_longest
def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)

reducedVec = []
for chunk in grouper(ratio, vec):
    if sum(1 for x in chunk if x == 'F') &gt; ratio / 3:
        reducedVec.append('F')
    else:
        reducedVec.append('T')
</snippet></ROW><ROW><id>2738746</id><snippet>grouper</snippet></ROW><ROW><id>2738763</id><snippet>for /f "delims=" %A in ('&lt;insert command here&gt;') do @set &lt;variable name&gt;=%A
</snippet></ROW><ROW><id>2738763</id><snippet>for /f "delims=" %A in ('time /t') do @set my_env_var=%A
</snippet></ROW><ROW><id>2738793</id><snippet>any</snippet></ROW><ROW><id>2738793</id><snippet>[s for s in strings if any(re.match(f, s) for f in filters)]
</snippet></ROW><ROW><id>2738970</id><snippet>-OO</snippet></ROW><ROW><id>2739463</id><snippet>from threading import Semaphore
sem = Semaphore(10)
with sem:
    make_multiprocessing_call()
</snippet></ROW><ROW><id>2739463</id><snippet>make_multiprocessing_call()</snippet></ROW><ROW><id>2739564</id><snippet>data = [[None]*5]*5
</snippet></ROW><ROW><id>2739564</id><snippet>&gt;&gt;&gt; data = [[None]*5 for _ in range(5)]
</snippet></ROW><ROW><id>2739564</id><snippet>&gt;&gt;&gt; data[0][0] = 'Cell A1'
&gt;&gt;&gt; print data
[['Cell A1', None, None, None, None],
 [None, None, None, None, None],
 [None, None, None, None, None],
 [None, None, None, None, None],
 [None, None, None, None, None]]
</snippet></ROW><ROW><id>2739585</id><snippet>PATH</snippet></ROW><ROW><id>2739585</id><snippet>$env:path += 'C:\Python26\Lib\site-packages\PyQt4\bin'
</snippet></ROW><ROW><id>2739767</id><snippet>None</snippet></ROW><ROW><id>2739767</id><snippet>DoesntCompute</snippet></ROW><ROW><id>2739767</id><snippet>InvalidType</snippet></ROW><ROW><id>2739767</id><snippet>InvalidArgument</snippet></ROW><ROW><id>2739767</id><snippet>DoesntCompute</snippet></ROW><ROW><id>2739860</id><snippet>attrs = [o.attr for o in objs]</snippet></ROW><ROW><id>2739860</id><snippet>list</snippet></ROW><ROW><id>2739972</id><snippet>d</snippet></ROW><ROW><id>2739972</id><snippet>specs = {}
for path, spec in paths:
    parts = path.split('.')
    d = specs
    for p in parts[:-1]:
        d = d.setdefault(p, {})
    d[parts[-1]] = spec
</snippet></ROW><ROW><id>2739972</id><snippet>ObjN</snippet></ROW><ROW><id>2739972</id><snippet>partN</snippet></ROW><ROW><id>2739972</id><snippet>specs = {}
for path, spec in paths:
    [obj, part] = path.split('.')
    specs.setdefault(obj, {})[part] = spec
</snippet></ROW><ROW><id>2740045</id><snippet>&gt;&gt;&gt; import test-1
  File "&lt;stdin&gt;", line 1
    import test-1
               ^
SyntaxError: invalid syntax
&gt;&gt;&gt; import test_1
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2740050</id><snippet>17 != '17'</snippet></ROW><ROW><id>2740494</id><snippet>append</snippet></ROW><ROW><id>2740494</id><snippet>i += 1</snippet></ROW><ROW><id>2740494</id><snippet>i</snippet></ROW><ROW><id>2740494</id><snippet>i</snippet></ROW><ROW><id>2740494</id><snippet>it.__iadd__(1)</snippet></ROW><ROW><id>2740643</id><snippet>msg.attach(msg1)
</snippet></ROW><ROW><id>2741709</id><snippet>address="E10"</snippet></ROW><ROW><id>2741709</id><snippet>column="E"</snippet></ROW><ROW><id>2741709</id><snippet>&lt;table:table-cell table:number-columns-repeated="5" /&gt;</snippet></ROW><ROW><id>2741709</id><snippet>number-colums-repeated</snippet></ROW><ROW><id>2741709</id><snippet>covered-table-cell</snippet></ROW><ROW><id>2741709</id><snippet>table-cell</snippet></ROW><ROW><id>2741709</id><snippet>number-columns-spanned</snippet></ROW><ROW><id>2741709</id><snippet>number-rows-spanned</snippet></ROW><ROW><id>2741709</id><snippet>table:table-row</snippet></ROW><ROW><id>2741709</id><snippet>number-rows-repeated</snippet></ROW><ROW><id>2741709</id><snippet>xlrd</snippet></ROW><ROW><id>2741758</id><snippet>from xml.etree import ElementTree
import odict

class OrderedXMLTreeBuilder(ElementTree.XMLTreeBuilder):
    def _start_list(self, tag, attrib_in):
        fixname = self._fixname
        tag = fixname(tag)
        attrib= odict.odict()
        if attrib_in:
            for i in range(0, len(attrib_in), 2):
                attrib[fixname(attrib_in[i])] = self._fixtext(attrib_in[i+1])
        return self._target.start(tag, attrib)

&gt;&gt;&gt; xmlf= StringIO.StringIO('&lt;a b="c" d="e" f="g" j="k" h="i"/&gt;')

&gt;&gt;&gt; tree= ElementTree.ElementTree()
&gt;&gt;&gt; root= tree.parse(xmlf, OrderedXMLTreeBuilder())
&gt;&gt;&gt; root.attrib
odict.odict([('b', 'c'), ('d', 'e'), ('f', 'g'), ('j', 'k'), ('h', 'i')])
</snippet></ROW><ROW><id>2741758</id><snippet>&gt;&gt;&gt; s= StringIO.StringIO()
&gt;&gt;&gt; tree.write(s)
&gt;&gt;&gt; s.getvalue()
'&lt;a b="c" d="e" f="g" h="i" j="k" /&gt;'
</snippet></ROW><ROW><id>2741758</id><snippet>ElementTree._write</snippet></ROW><ROW><id>2741758</id><snippet>            items.sort() # lexical order
</snippet></ROW><ROW><id>2741758</id><snippet>odict</snippet></ROW><ROW><id>2741758</id><snippet>items</snippet></ROW><ROW><id>2741758</id><snippet>list</snippet></ROW><ROW><id>2741758</id><snippet>sort()</snippet></ROW><ROW><id>2741828</id><snippet>main</snippet></ROW><ROW><id>2741892</id><snippet>os.system</snippet></ROW><ROW><id>2741943</id><snippet>def cfor(first,test,update):
    while test(first):
        yield first
        first = update(first)

def example(blah):
    print "do some stuff"
    for i in cfor(0,lambda i:i&lt;blah,lambda i:i+1):
        print i
    print "done"
</snippet></ROW><ROW><id>2741943</id><snippet>complicated_iterator</snippet></ROW><ROW><id>2742016</id><snippet>${request.url}</snippet></ROW><ROW><id>2742324</id><snippet>&gt;&gt;&gt;
&gt;&gt;&gt; stringA = "xxxxxxFoundAaaaaaaaaaaaaaaFoundBxxxxxxx"
&gt;&gt;&gt; stringB = "FoundA"
&gt;&gt;&gt; stringC = "FoundB"
&gt;&gt;&gt;
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search(re.escape(stringB)+"(.*?)"+re.escape(stringC),stringA).group(1)
'aaaaaaaaaaaaaa'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2742717</id><snippet>start = max(0,i-halflen)
</snippet></ROW><ROW><id>2742717</id><snippet>start = i - halflen if i &gt; halflen else 0
</snippet></ROW><ROW><id>2742717</id><snippet>end = min(i+halflen+1,len2)
</snippet></ROW><ROW><id>2742717</id><snippet>end = i+halflen+1 if i+halflen+1 &lt; len2 else len2
</snippet></ROW><ROW><id>2742717</id><snippet>minlen = min(len1,len2)
for same in xrange(minlen+1):
    if (str1[:same] != str2[:same]):
        break
same -= 1
</snippet></ROW><ROW><id>2742717</id><snippet>for same in xrange(minlen):
    if str1[same] != str2[same]:
        break
</snippet></ROW><ROW><id>2742717</id><snippet>'' != ''</snippet></ROW><ROW><id>2742717</id><snippet>same</snippet></ROW><ROW><id>2742717</id><snippet>import psyco
psyco.full()
</snippet></ROW><ROW><id>2742717</id><snippet>index = workstr2.find(str1[i],start,end)
</snippet></ROW><ROW><id>2742717</id><snippet>index = -1
for j in xrange(start,end):
    if workstr2[j] == str1[i]:
        index = j
        break
</snippet></ROW><ROW><id>2742788</id><snippet>int(round(123,-2))
</snippet></ROW><ROW><id>2742993</id><snippet>SharableUserAsset</snippet></ROW><ROW><id>2742993</id><snippet>user = users.get_current_user()
assets = SharableUserAsset.gql("WHERE users = :1", user)
</snippet></ROW><ROW><id>2742993</id><snippet>ListProperty</snippet></ROW><ROW><id>2742993</id><snippet>User</snippet></ROW><ROW><id>2742993</id><snippet>.email()</snippet></ROW><ROW><id>2743571</id><snippet>urlfetch.fetch(url, headers = {'User-Agent': "MyApplication_User-Agent"}) 
</snippet></ROW><ROW><id>2743805</id><snippet>GetDriveType</snippet></ROW><ROW><id>2743805</id><snippet>win32file</snippet></ROW><ROW><id>2743805</id><snippet>import win32file
isNetworkDrive = win32file.GetDriveType("Z:\\") == win32file.DRIVE_REMOTE
</snippet></ROW><ROW><id>2743805</id><snippet>GetLogicalDriveStrings()</snippet></ROW><ROW><id>2743805</id><snippet>win32api</snippet></ROW><ROW><id>2743810</id><snippet>chosenCar</snippet></ROW><ROW><id>2743810</id><snippet>&gt;&gt;&gt; P.utility={'chosenCar':25000,'anotherCar':24000,'yetAnotherCar':24500}
&gt;&gt;&gt; operator.itemgetter('chosenCar')(operator.attrgetter('utility')(P))
25000
</snippet></ROW><ROW><id>2743810</id><snippet>key</snippet></ROW><ROW><id>2743810</id><snippet>&gt;&gt;&gt; def keyfunc(P):
    util = operator.attrgetter('utility')(P)
    return operator.itemgetter('chosenCar')(util)

&gt;&gt;&gt; USpeople.sort(key=keyfunc,reverse=True)
</snippet></ROW><ROW><id>2743810</id><snippet>timeit</snippet></ROW><ROW><id>2744056</id><snippet>updateWidgets()</snippet></ROW><ROW><id>2744056</id><snippet>self.widgets</snippet></ROW><ROW><id>2744056</id><snippet>for</snippet></ROW><ROW><id>2744056</id><snippet>workOnWidgets()</snippet></ROW><ROW><id>2744056</id><snippet>&gt;&gt;&gt; l=[1,2,3]
&gt;&gt;&gt; for i in l:
...    l=[]
...    print(i)
...
1
2
3
</snippet></ROW><ROW><id>2744056</id><snippet>&gt;&gt;&gt; l=[1,2,3]
&gt;&gt;&gt; for i in l:
...    l[2]=0
...    print(i)
...
1
2
0
</snippet></ROW><ROW><id>2744164</id><snippet>{OSQA_ROOT}</snippet></ROW><ROW><id>2744164</id><snippet>c:\osqa</snippet></ROW><ROW><id>2744164</id><snippet>{OSQA_ROOT}\settings_local.py.dist</snippet></ROW><ROW><id>2744164</id><snippet>{OSQA_ROOT}\settings_local.py</snippet></ROW><ROW><id>2744164</id><snippet>{OSQA_ROOT}\settings_local.py</snippet></ROW><ROW><id>2744164</id><snippet>DATABASE_NAME = 'osqa'             # Or path to database file if using sqlite3.
DATABASE_USER = 'root'               # Not used with sqlite3.
DATABASE_PASSWORD = 'PASSWD'               # Not used with sqlite3.  put bitnami here
DATABASE_ENGINE = 'mysql'  #mysql, etc
</snippet></ROW><ROW><id>2744164</id><snippet>{DJANGOSTACK}\apps\django\conf\django.conf</snippet></ROW><ROW><id>2744164</id><snippet>/</snippet></ROW><ROW><id>2744164</id><snippet>http://localhost</snippet></ROW><ROW><id>2744164</id><snippet>&lt;location '/'&gt;
    SetHandler python-program
    PythonHandler django.core.handlers.modpython
    PythonPath "['{OSQA_ROOT}'] + sys.path"
    SetEnv DJANGO_SETTINGS_MODULE osqa.settings
    PythonDebug On
&lt;/location&gt;
</snippet></ROW><ROW><id>2744164</id><snippet>{DJANGOSTACK}\python\Scripts\</snippet></ROW><ROW><id>2744164</id><snippet>easy_install markdown2
easy_install html5lib
</snippet></ROW><ROW><id>2744164</id><snippet>osqa</snippet></ROW><ROW><id>2744164</id><snippet>{DJANGOSTACK}\mysql\bin</snippet></ROW><ROW><id>2744164</id><snippet>mysqladmin create osqa
</snippet></ROW><ROW><id>2744164</id><snippet>{DJANGOSTACK}\python\python.exe manage.py syncdb
</snippet></ROW><ROW><id>2744164</id><snippet>{OSQA_ROOT}</snippet></ROW><ROW><id>2744164</id><snippet>{DJANGOSTACK}</snippet></ROW><ROW><id>2744389</id><snippet>elements.append(Flowable1)
elements.append(Flowable2)

c = Canvas(path)
f = Frame(fx, fy,fw,fh,showBoundary=0)

# compute the available height for the spacer
sheight = f._aH - (Flowable1.wrap(f._aW,f._aH)[1] + Flowable2.wrap(f._aW,f._aH)[1])

# create spacer
s = Spacer(width=0, height=sheight)

# insert the spacer between the two flowables
elements.insert(1,s)

# create a frame from the list of elements
f.addFromList(elements,c)

c.save()
</snippet></ROW><ROW><id>2744476</id><snippet>／</snippet></ROW><ROW><id>2744476</id><snippet>response['X-Accel-Redirect'] = url
</snippet></ROW><ROW><id>2744476</id><snippet>url</snippet></ROW><ROW><id>2744476</id><snippet>response['X-Accel-Redirect'] = url.encode('utf-8')
</snippet></ROW><ROW><id>2744476</id><snippet>Content-Disposition</snippet></ROW><ROW><id>2744665</id><snippet>from matplotlib import interactive
interactive(True)
</snippet></ROW><ROW><id>2745292</id><snippet>dict()</snippet></ROW><ROW><id>2745292</id><snippet>{}</snippet></ROW><ROW><id>2745292</id><snippet>list(L)</snippet></ROW><ROW><id>2745292</id><snippet>L[:]</snippet></ROW><ROW><id>2745292</id><snippet>list()</snippet></ROW><ROW><id>2745292</id><snippet>[]</snippet></ROW><ROW><id>2745292</id><snippet>tuple()</snippet></ROW><ROW><id>2745292</id><snippet>()</snippet></ROW><ROW><id>2745312</id><snippet>root.configure(background='black')
</snippet></ROW><ROW><id>2745312</id><snippet>&lt;widget&gt;.configure(background='black')
</snippet></ROW><ROW><id>2745496</id><snippet>interp</snippet></ROW><ROW><id>2745496</id><snippet>&gt;&gt;&gt; from scipy import interp, arange, exp
&gt;&gt;&gt; x = arange(0,10)
&gt;&gt;&gt; y = exp(-x/3.0)
&gt;&gt;&gt; interp([9,10], x, y)
array([ 0.04978707,  0.04978707])
</snippet></ROW><ROW><id>2745496</id><snippet>from scipy.interpolate import interp1d
from scipy import arange, array, exp

def extrap1d(interpolator):
    xs = interpolator.x
    ys = interpolator.y

    def pointwise(x):
        if x &lt; xs[0]:
            return ys[0]+(x-xs[0])*(ys[1]-ys[0])/(xs[1]-xs[0])
        elif x &gt; xs[-1]:
            return ys[-1]+(x-xs[-1])*(ys[-1]-ys[-2])/(xs[-1]-xs[-2])
        else:
            return interpolator(x)

    def ufunclike(xs):
        return array(map(pointwise, array(xs)))

    return ufunclike
</snippet></ROW><ROW><id>2745496</id><snippet>extrap1d</snippet></ROW><ROW><id>2745496</id><snippet>x = arange(0,10)
y = exp(-x/3.0)
f_i = interp1d(x, y)
f_x = extrap1d(f_i)

print f_x([9,10])
</snippet></ROW><ROW><id>2745496</id><snippet>[ 0.04978707  0.03009069]
</snippet></ROW><ROW><id>2745537</id><snippet>_</snippet></ROW><ROW><id>2745537</id><snippet>_</snippet></ROW><ROW><id>2745537</id><snippet>_ = gettext.gettext
# ...
print _('This is a translatable string.')
</snippet></ROW><ROW><id>2745537</id><snippet>_('...')</snippet></ROW><ROW><id>2745537</id><snippet>_</snippet></ROW><ROW><id>2745537</id><snippet>unused</snippet></ROW><ROW><id>2745537</id><snippet>_</snippet></ROW><ROW><id>2745537</id><snippet>unused_</snippet></ROW><ROW><id>2745537</id><snippet>name, unused_surname, salutation = person_data
print "Hello, %s %s!" % (salutation, name)
</snippet></ROW><ROW><id>2745537</id><snippet>person_data</snippet></ROW><ROW><id>2745537</id><snippet>pylint</snippet></ROW><ROW><id>2745537</id><snippet>_</snippet></ROW><ROW><id>2745537</id><snippet>unused_...</snippet></ROW><ROW><id>2745537</id><snippet>unused_something</snippet></ROW><ROW><id>2745602</id><snippet>prioritylist = ('r','u','d','l')
for direction in prioritylist:
  if move(direction, location): break
</snippet></ROW><ROW><id>2745602</id><snippet>def move(direction,location):
    try:
        -snip-
        return True, newlocation
    except Movementerror:
        return False, location
</snippet></ROW><ROW><id>2745602</id><snippet>prioritylist = ('r','u','d','l')
for direction in prioritylist:
  success, newlocation = move(direction, location)
  if success: break
</snippet></ROW><ROW><id>2745602</id><snippet>else</snippet></ROW><ROW><id>2745602</id><snippet>for</snippet></ROW><ROW><id>2745602</id><snippet>break</snippet></ROW><ROW><id>2745602</id><snippet>for</snippet></ROW><ROW><id>2745739</id><snippet>func2</snippet></ROW><ROW><id>2745739</id><snippet>func3</snippet></ROW><ROW><id>2745739</id><snippet>def func1(**qwargs):
    d = dict(arg=default)
    d.update(qwqargs)
    func2(**d)
    func3(**qwargs)
</snippet></ROW><ROW><id>2745739</id><snippet>arg</snippet></ROW><ROW><id>2745739</id><snippet>qwargs</snippet></ROW><ROW><id>2745739</id><snippet>default</snippet></ROW><ROW><id>2745739</id><snippet>default</snippet></ROW><ROW><id>2745739</id><snippet>arg</snippet></ROW><ROW><id>2745739</id><snippet>qwargs</snippet></ROW><ROW><id>2745739</id><snippet>def func1(**qwargs):
    d = dict(qwargs, arg=default)
    func2(**d)
    func3(**qwargs)
</snippet></ROW><ROW><id>2745739</id><snippet>dict</snippet></ROW><ROW><id>2745996</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>2745996</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>2745996</id><snippet>URLError</snippet></ROW><ROW><id>2745996</id><snippet>try:
    h = urllib2.urlopen("http://google.com/")
except urllib2.URLError as e:
    # do something with the exception e.g.
    print 'Error:', e.reason
</snippet></ROW><ROW><id>2745996</id><snippet>try:
    h = urllib2.urlopen("http://google.com/")
except urllib2.URLError:
    print 'An error occurred.'
</snippet></ROW><ROW><id>2745996</id><snippet>URLError</snippet></ROW><ROW><id>2745996</id><snippet>IOError</snippet></ROW><ROW><id>2745996</id><snippet>socket.error</snippet></ROW><ROW><id>2745996</id><snippet>OSError</snippet></ROW><ROW><id>2746312</id><snippet>http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=['72758']
                                                             ^^     ^^
</snippet></ROW><ROW><id>2746312</id><snippet>findall()</snippet></ROW><ROW><id>2746371</id><snippet>DATABASE_NAME</snippet></ROW><ROW><id>2746452</id><snippet>&gt;&gt;&gt; data = 'S\x00e\x00r\x00i\x00e\x00s\x00'
&gt;&gt;&gt; data.decode('utf-16')
u'Series'
</snippet></ROW><ROW><id>2746601</id><snippet>render</snippet></ROW><ROW><id>2746601</id><snippet>def render(self, context):
    qs = self.queryset.resolve(context)
    return render_to_string(self.template, { 'queryset': qs } )
</snippet></ROW><ROW><id>2746601</id><snippet>{% for m in queryset.month %}
    &lt;td&gt;queryset.revenue&lt;/td&gt;
 {% endfor %}
</snippet></ROW><ROW><id>2746601</id><snippet>{{ queryset.revenue }}</snippet></ROW><ROW><id>2746601</id><snippet>m</snippet></ROW><ROW><id>2746601</id><snippet>for</snippet></ROW><ROW><id>2746601</id><snippet>django.contrib.comments</snippet></ROW><ROW><id>2746735</id><snippet>#...
if all_valid(formsets) and form_validated:
#...
</snippet></ROW><ROW><id>2746735</id><snippet>#...
formsets_validated = all_valid(formsets)
cross_validated = self.is_cross_valid(form, formsets)
if formsets_validated and form_validated and cross_validated:
#...
</snippet></ROW><ROW><id>2746735</id><snippet>def is_cross_valid(self, form, formsets):
  return True
</snippet></ROW><ROW><id>2746735</id><snippet>###admin.py###
class ModelAdminWithInline(admin.ModelAdmin):
  def is_cross_valid(self, form, formsets):
    return True

  def add_view(self, request, form_url='', extra_context=None):
    #modified code

  def change_view(self, request, object_id, extra_context=None):
    #modified code

class ModelChildInline(admin.TabularInline):
  model = ModelChild

class ModelParentAdmin(ModelAdminWithInline):
  inlines = [ModelChildInline]

  def is_cross_valid(self, form, formsets):
    #Do some cross validation on forms
    #For example, here is my particular validation:
    valid = True

    if hasattr(form, 'cleaned_data'):   

      subjects_parent = form.cleaned_data.get("subjects_parent")

      #You can access forms from formsets like this:
      for formset in formsets:
        for formset_form in formset.forms:
          if hasattr(formset_form, 'cleaned_data'):

            subjects_child = formset_form.cleaned_data.get("subjects_child")
            delete_form = formset_form.cleaned_data.get("DELETE")

            if subjects_child and (delete_form == False):
              for subject in subjects_child:
                if subject in subjects_parent:
                  valid = False
                  #From here you can still report errors like in regular forms:
                  if "subjects_child" in formset_form.cleaned_data.keys():
                    formset_form._errors["subjects_child"] = ErrorList([u"Subject %s is already selected in parent ModelParent" % subject])
                    del formset_form.cleaned_data["subjects_child"]
                  else:
                    formset_form._errors["subjects_child"] += ErrorList(u"Subject %s is already selected in parent ModelParent" % subject])

      #return True on success or False otherwise.
      return valid

admin.site.register(ModelParent, ModelParentAdmin)
</snippet></ROW><ROW><id>2746892</id><snippet>from pyPdf import PdfFileWriter, PdfFileReader

inputStream = file('input.pdf', 'rb')
blankStream = file('C:\\BLANK.pdf', 'rb')
output = PdfFileWriter()
input = PdfFileReader(inputStream)
blank = PdfFileReader(blankStream)

...

del input # PdfFileReader won't mess with the stream anymore
inputStream.close()
del blank
blankStream.close()

# Write the output to pdf.
outputStream = file('input.pdf', 'wb')
output.write(outputStream)
outputStream.close()
</snippet></ROW><ROW><id>2747155</id><snippet>// data.json</snippet></ROW><ROW><id>2747570</id><snippet>from django.http import HttpResponse
return HttpResponse(str(var))
</snippet></ROW><ROW><id>2747932</id><snippet>os.popen()</snippet></ROW><ROW><id>2747932</id><snippet>import os

subprogs = [None] * 4
for i in range(4):
    subprogs[i] = os.popen("app -appnum " + i, "r")
</snippet></ROW><ROW><id>2747932</id><snippet>subprog[i]</snippet></ROW><ROW><id>2747932</id><snippet>app</snippet></ROW><ROW><id>2747932</id><snippet>subprocess</snippet></ROW><ROW><id>2747932</id><snippet>os.popen()</snippet></ROW><ROW><id>2748032</id><snippet>int</snippet></ROW><ROW><id>2748032</id><snippet>PyInt_AsLong()</snippet></ROW><ROW><id>2748032</id><snippet>PyInt_FromLong()</snippet></ROW><ROW><id>2748032</id><snippet>PyObject_IsTrue()</snippet></ROW><ROW><id>2748032</id><snippet>&lt; 0</snippet></ROW><ROW><id>2748032</id><snippet>Py_XINCREF()</snippet></ROW><ROW><id>2748032</id><snippet>create_texture</snippet></ROW><ROW><id>2748032</id><snippet>args</snippet></ROW><ROW><id>2748032</id><snippet>create_texture</snippet></ROW><ROW><id>2748032</id><snippet>create_texture</snippet></ROW><ROW><id>2748032</id><snippet>Py_XINCREF()</snippet></ROW><ROW><id>2748032</id><snippet>PyEval_CallObject()</snippet></ROW><ROW><id>2748032</id><snippet>PyObject_CallFunctionObjectArgs(create_texture, arglist, NULL)</snippet></ROW><ROW><id>2748032</id><snippet>PyObject_CallFunction(create_texture, "O", arglist)</snippet></ROW><ROW><id>2748032</id><snippet>Py_BuildValue("s", "frame_buffer")</snippet></ROW><ROW><id>2748032</id><snippet>"frame_buffer"</snippet></ROW><ROW><id>2748032</id><snippet>PyString_FromString()</snippet></ROW><ROW><id>2748032</id><snippet>PyObject_GetAttr()</snippet></ROW><ROW><id>2748032</id><snippet>PyObject_GetAttrString()</snippet></ROW><ROW><id>2748032</id><snippet>const char*</snippet></ROW><ROW><id>2748032</id><snippet>PyTrue_IsTrue()</snippet></ROW><ROW><id>2748032</id><snippet>Py_BuildValue()</snippet></ROW><ROW><id>2748032</id><snippet>PyObject_GetAttr()</snippet></ROW><ROW><id>2748069</id><snippet>&lt;%def&gt;</snippet></ROW><ROW><id>2748069</id><snippet>${test()}</snippet></ROW><ROW><id>2748107</id><snippet>config = pyglet.gl.Config(sample_buffers=1, samples=4)
window = pyglet.window.Window(config=config, resizable=True) 
</snippet></ROW><ROW><id>2748218</id><snippet>skip_archive=True</snippet></ROW><ROW><id>2748218</id><snippet>library.zip</snippet></ROW><ROW><id>2748218</id><snippet>data_files</snippet></ROW><ROW><id>2748301</id><snippet>class MyFunc(object):
    funcs = []
    def __init__(self, func):
        self.funcs.append(func)

@MyFunc
def foo():
    return 5

@MyFunc
def bar():
    return 10

def quux():
    # Not decorated, so will not be in MyFunc
    return 20

for func in MyFunc.funcs:
    print func()
</snippet></ROW><ROW><id>2748301</id><snippet>5
10
</snippet></ROW><ROW><id>2748405</id><snippet>def format_value(v, indent):
    if isinstance(v, list):
         return ''.join([format_value(item, indent) for item in v])
    elif isinstance(v, dict):
         return format_dict(v, indent)
    elif isinstance(v, str):
         return ("   " * indent) + v + "\n"

def format_dict(d, indent=0):
    res = ""
    for key in d:
        res += ("   " * indent) + key + ":\n"
        res += format_value(d[key], indent + 1)
    return res
</snippet></ROW><ROW><id>2748732</id><snippet>PlaySound</snippet></ROW><ROW><id>2748732</id><snippet>winsound.PlaySound('siren.wav', winsound.SND_FILENAME)
</snippet></ROW><ROW><id>2748732</id><snippet>siren = base64.b64decode('''
    &lt;base64-encoded data&gt;
    ''')
winsound.PlaySound(siren, winsound.SND_MEMORY)
</snippet></ROW><ROW><id>2748732</id><snippet>siren</snippet></ROW><ROW><id>2748732</id><snippet>siren</snippet></ROW><ROW><id>2748753</id><snippet>next</snippet></ROW><ROW><id>2748753</id><snippet>-1</snippet></ROW><ROW><id>2748753</id><snippet>!= x</snippet></ROW><ROW><id>2748753</id><snippet>return next((i for i, v in enumerate(L) if v != x), -1)
</snippet></ROW><ROW><id>2748753</id><snippet>.next()</snippet></ROW><ROW><id>2748753</id><snippet>-1</snippet></ROW><ROW><id>2748753</id><snippet>StopIteration</snippet></ROW><ROW><id>2748753</id><snippet>try</snippet></ROW><ROW><id>2748753</id><snippet>except</snippet></ROW><ROW><id>2748779</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; treetop = etree.fromstring(anxmlstring)
</snippet></ROW><ROW><id>2748779</id><snippet>&gt;&gt;&gt; othertree = etree.parse(somexmlurl)
</snippet></ROW><ROW><id>2748779</id><snippet>somexmlurl</snippet></ROW><ROW><id>2748779</id><snippet>etree</snippet></ROW><ROW><id>2748799</id><snippet>import unittest

# stores 5 user-entered numbers (strings, for now) in a list
def getFiveNums():
    numbers = []
    print "Howdy. Please enter five numbers, hit &lt;enter&gt; after each one"
    for i in range(5):
        newNum = input("Please type in a number:")
        numbers.append(newNum)
    return numbers

def mock_input(dummy_prompt):
    return 1

class TestGetFiveNums(unittest.TestCase):
    def setUp(self):
        self.saved_input = __builtins__.input
        __builtins__.input = mock_input

    def tearDown(self):
        __builtins__.input = self.saved_input

    def testGetFiveNums(self):
        printed_lines = getFiveNums()
        self.assertEquals(printed_lines, [1, 1, 1, 1, 1])

if __name__ == "__main__":
    unittest.main()
</snippet></ROW><ROW><id>2748807</id><snippet>import sys; print sys.path</snippet></ROW><ROW><id>2748807</id><snippet>sys.path.append('/whatever/dir')</snippet></ROW><ROW><id>2748807</id><snippet>/whatever/dir</snippet></ROW><ROW><id>2748843</id><snippet>class Ic(object):
  attributes = ['id', 'first_name', 'last_name', 'name', 'name_url',
              'email', 'password', 'password_salt', 'picture_id']

  def __init__(self): ...

  # and other methods that set all the attributes on self

  def updated(self):
    sqlbase = 'UPDATE members SET %s WHERE whateveryouwanthere'
    setpieces = []
    values = []
    for atr in self.attributes:
      setpieces.append('%s = ?' % atr)
      values.append(getattr(self, atr, None))
    return sqlbase % ', '.join(setpieces), values
</snippet></ROW><ROW><id>2748843</id><snippet>theobj</snippet></ROW><ROW><id>2748843</id><snippet>sql, values = theobj.updater()
</snippet></ROW><ROW><id>2748843</id><snippet>mycursor.execute(sql, values)</snippet></ROW><ROW><id>2748843</id><snippet>whatreveryouwanthere</snippet></ROW><ROW><id>2749117</id><snippet>Mock</snippet></ROW><ROW><id>2749117</id><snippet>class User(object):
    def __init__(self):
        self.roles = []


class UserService(object):
    def get_current_user(self):
        return None # get from environment, database, etc.

    current_user = property(get_current_user)


class AppService(object):
    def __init__(self, userService):
        self.userService = userService

    def can_write(self):
        return 'admin' in self.userService.current_user.roles
</snippet></ROW><ROW><id>2749117</id><snippet>can_write</snippet></ROW><ROW><id>2749117</id><snippet>AppService</snippet></ROW><ROW><id>2749117</id><snippet>class AppServiceTests(unittest.TestCase):
    def test_can_write(self):
        user = User()

        @patch_object(UserService, 'current_user', user)
        def can_write():
            appService = AppService(UserService())
            return appService.can_write()

        user.roles = ['admin']
        self.assertTrue(can_write())

        user.roles = ['user']
        self.assertFalse(can_write())
</snippet></ROW><ROW><id>2749117</id><snippet>current_user</snippet></ROW><ROW><id>2749117</id><snippet>UserService</snippet></ROW><ROW><id>2749806</id><snippet>exec</snippet></ROW><ROW><id>2749806</id><snippet>eval</snippet></ROW><ROW><id>2749806</id><snippet>eval('lambda: a', ...)
</snippet></ROW><ROW><id>2749806</id><snippet>eval(compile('lambda: a', '&lt;stdin&gt;', 'eval'), ...)
</snippet></ROW><ROW><id>2749806</id><snippet>compile</snippet></ROW><ROW><id>2749806</id><snippet>a</snippet></ROW><ROW><id>2749806</id><snippet>&gt;&gt;&gt; c= compile('lambda: a', '&lt;stdin&gt;', 'eval')
&gt;&gt;&gt; c.co_consts[0]
&lt;code object &lt;lambda&gt; at 0x7f36577330a8, file "&lt;stdin&gt;", line 1&gt;
&gt;&gt;&gt; dis.dis(c.co_consts[0])
  1           0 LOAD_GLOBAL              0 (a)
              3 RETURN_VALUE        
</snippet></ROW><ROW><id>2749806</id><snippet>a</snippet></ROW><ROW><id>2749806</id><snippet>exec</snippet></ROW><ROW><id>2749806</id><snippet>eval</snippet></ROW><ROW><id>2750185</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; jsoninput = json.loads(jsonoutput)
&gt;&gt;&gt; print jsoninput
{u'1': u'une personne \xe9m\xe9rite'}
&gt;&gt;&gt; print jsoninput['1']
une personne émérite
</snippet></ROW><ROW><id>2750377</id><snippet>import networkx as nx
g = nx.Graph()
g.add_edge(1,2)
g.add_edge(2,3)
g.edges()
</snippet></ROW><ROW><id>2750377</id><snippet>[(1, 2), (2, 3)]
</snippet></ROW><ROW><id>2750377</id><snippet>#!/usr/bin/python

import networkx as nx
import random

g = nx.Graph()
g.add_edges_from([(1,2),(2,3),(1,4),(2,5)])

random_edge = random.choice(g.edges())

print 'Randomly selected edge is:', random_edge
print 'Nodes are', random_edge[0], 'and', random_edge[1]
</snippet></ROW><ROW><id>2750530</id><snippet>#!/usr/bin/env python2.5</snippet></ROW><ROW><id>2750925</id><snippet>class StaticContentHandler(webapp.RequestHandler):
  def output_content(self, content, serve=True):
    self.response.headers['Content-Type'] = content.content_type
    last_modified = content.last_modified.strftime(HTTP_DATE_FMT)
    self.response.headers['Last-Modified'] = last_modified
    self.response.headers['ETag'] = '"%s"' % (content.etag,)
    if serve:
      self.response.out.write(content.body)
    else:
      self.response.set_status(304)

  def get(self, path):
    content = get(path)
    if not content:
      self.error(404)
      return

    serve = True
    if 'If-Modified-Since' in self.request.headers:
      last_seen = datetime.datetime.strptime(
          self.request.headers['If-Modified-Since'],
          HTTP_DATE_FMT)
      if last_seen &gt;= content.last_modified.replace(microsecond=0):
        serve = False
    if 'If-None-Match' in self.request.headers:
      etags = [x.strip('" ')
               for x in self.request.headers['If-None-Match'].split(',')]
      if content.etag in etags:
        serve = False
    self.output_content(content, serve)
</snippet></ROW><ROW><id>2750940</id><snippet>testbed</snippet></ROW><ROW><id>2751361</id><snippet>profile = db.GqlQuery("SELECT * FROM Profile WHERE account = :1",
                        users.get_current_user()).get()
</snippet></ROW><ROW><id>2751364</id><snippet>http://example.org/customer/10.xml
http://example.org/customer/10.json
http://example.org/customer/10?format=xml
http://example.org/customer/10?format=json
</snippet></ROW><ROW><id>2751364</id><snippet>http://example.org/customers
http://example.org/customers?closed=true
http://example.org/customers?page=2&amp;pagelength=20
</snippet></ROW><ROW><id>2751364</id><snippet>GET /post/52/edit 
</snippet></ROW><ROW><id>2751492</id><snippet>names = {}

while(parsing):
    nick = nick_on_current_line
    host = host_on_current_line   

    names[host] = nick
</snippet></ROW><ROW><id>2751715</id><snippet>class NewQuery(QtGui.QWidget):
    def __init__(self, parent):
        QtGui.QWidget.__init__(self, parent)
</snippet></ROW><ROW><id>2751715</id><snippet>super</snippet></ROW><ROW><id>2751715</id><snippet>class NewQuery(QtGui.QWidget):
    def __init__(self, parent):
        super(NewQuery, self).__init__(parent)
</snippet></ROW><ROW><id>2751715</id><snippet>QtGui.QDialog</snippet></ROW><ROW><id>2752090</id><snippet>the</snippet></ROW><ROW><id>2752090</id><snippet>and</snippet></ROW><ROW><id>2752111</id><snippet>sqlite</snippet></ROW><ROW><id>2752194</id><snippet>Test2.__name__</snippet></ROW><ROW><id>2752194</id><snippet>def maketype(cls):
    cls.type = TextField(default=cls.__name__)
    return cls 
</snippet></ROW><ROW><id>2752194</id><snippet>@maketype</snippet></ROW><ROW><id>2752194</id><snippet>maketype(Base)</snippet></ROW><ROW><id>2752194</id><snippet>class</snippet></ROW><ROW><id>2752194</id><snippet>__init__</snippet></ROW><ROW><id>2752194</id><snippet>__new__</snippet></ROW><ROW><id>2752397</id><snippet>(defun shell-compile ()
  (interactive)
  (save-buffer)
  (shell-command (concat "python " (buffer-file-name)))
  (if (&lt;= (* 2 (window-height)) (frame-height))
      (enlarge-window 20)
    nil))
</snippet></ROW><ROW><id>2752435</id><snippet>import gzip 
import os 
import codecs 

data = gzip.open("file.gz", "wb") 
data.write('foo\x1d\x1cbar\nbaz') 
data.close() 

print list(codecs.getreader('utf-8')(gzip.open('file.gz'))) 
print list(os.popen('zcat file.gz')) 
print list(gzip.open('file.gz')) 
</snippet></ROW><ROW><id>2752435</id><snippet>[u'foo\x1d', u'\x1c', u'bar\n', u'baz']
['foo\x1d\x1cbar\n', 'baz']
['foo\x1d\x1cbar\n', 'baz']
</snippet></ROW><ROW><id>2752676</id><snippet>QCoreApplication.processEvents()
</snippet></ROW><ROW><id>2752676</id><snippet>scrapeLinksA</snippet></ROW><ROW><id>2752676</id><snippet>scrapeLinksB</snippet></ROW><ROW><id>2752676</id><snippet>updateInfo</snippet></ROW><ROW><id>2752851</id><snippet>[supervisor-cron]
recipe = z3c.recipe.usercrontab
times = @reboot
command = ${buildout:bin-directory}/supervisord -c ${buildout:directory}/etc/supervisord.conf
</snippet></ROW><ROW><id>2752939</id><snippet>array</snippet></ROW><ROW><id>2752939</id><snippet>'L'</snippet></ROW><ROW><id>2752939</id><snippet>&gt;&gt;&gt; array('L','\xff\xff\xff\xff\xff\xff\xff\xff')
array('L', [18446744073709551615L])
</snippet></ROW><ROW><id>2752939</id><snippet>'L'</snippet></ROW><ROW><id>2753100</id><snippet>{{ sqs.spelling_suggestion }}
</snippet></ROW><ROW><id>2753100</id><snippet>python manage.py update_index
</snippet></ROW><ROW><id>2753120</id><snippet>'-.'</snippet></ROW><ROW><id>2753120</id><snippet>'-'</snippet></ROW><ROW><id>2753120</id><snippet>markerline, stemlines, baseline = stem(x, cos(x), '-')
</snippet></ROW><ROW><id>2753135</id><snippet>try:
        # decode using utf-8 (use ascii if you want)
        unicode_data = str_data.decode("utf-8")
except UnicodeDecodeError, e:
        print "The error is there !"
</snippet></ROW><ROW><id>2753304</id><snippet>open</snippet></ROW><ROW><id>2753304</id><snippet>import os.path
f = open(os.path.dirname(__file__) + '/../data.yml')
</snippet></ROW><ROW><id>2753361</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>2753597</id><snippet>/home/cdecker/dev/acn/acn_a4/src/operator.py</snippet></ROW><ROW><id>2753597</id><snippet>operator</snippet></ROW><ROW><id>2753597</id><snippet>operator.py</snippet></ROW><ROW><id>2753597</id><snippet>File "/usr/lib/python2.5/site-packages/Twisted-10.0.0-py2.5-linux-i686.egg/twisted/python/compat.py", line 146, in &lt;module&gt;
import operator
File "/home/cdecker/dev/acn/acn_a4/src/operator.py", line 7, in &lt;module&gt;
</snippet></ROW><ROW><id>2753597</id><snippet>import operator</snippet></ROW><ROW><id>2753597</id><snippet>myproject.mymodule</snippet></ROW><ROW><id>2753760</id><snippet>from django.conf import settings
try:
    settings.configure()
except:
    pass
settings.LANGUAGE_CODE = 'zh-tw'
settings.USE_I18N = True
appdir = os.path.abspath( os.path.dirname( __file__ ) )
settings.LOCALE_PATHS = ( 
    os.path.join( appdir, 'locale' ),
 )
from django.utils.translation import *
</snippet></ROW><ROW><id>2753760</id><snippet>class Page(webapp.RequestHandler):
    def getLanguage(self):
        try:
            language = self.request.cookies['django_language']
            self.locate = language
            logging.info( "Get Language as %s" % self.locate )
        except:
            from django.conf import settings
            self.locate = settings.LANGUAGE_CODE
            logging.info( "Set Language as %s" % self.locate )            
        translation.activate( self.locate )
    def get(self):
        self.getLanguage()
        #...
</snippet></ROW><ROW><id>2753905</id><snippet>from spidermonkey import Runtime
rt = Runtime()
cx = rt.new_context()
result = cx.eval_script(whatyoupostedabove)
</snippet></ROW><ROW><id>2753931</id><snippet>__import__</snippet></ROW><ROW><id>2754022</id><snippet>int</snippet></ROW><ROW><id>2754022</id><snippet>char*</snippet></ROW><ROW><id>2754022</id><snippet>Dictionary&lt;String, RubyMethod&gt;</snippet></ROW><ROW><id>2754022</id><snippet>Map</snippet></ROW><ROW><id>2754763</id><snippet>User</snippet></ROW><ROW><id>2754763</id><snippet>ReadOnlyUser</snippet></ROW><ROW><id>2754763</id><snippet>User.get_by_id(1).readonly()</snippet></ROW><ROW><id>2754763</id><snippet>readonly</snippet></ROW><ROW><id>2754763</id><snippet>class User(db.Model):
    def readonly(self):
        return ReadOnlyUser(self.name, self.id);
</snippet></ROW><ROW><id>2754763</id><snippet>User</snippet></ROW><ROW><id>2754983</id><snippet>class Merge(object):
    def __init__(self, **extra_kws):
        self.extra_kws = extra_kws
    def __call__(self, function):
        def _wrapper(*args, **kws):
            kws.update(self.extra_kws)
            return function(*args, **kws)
        return _wrapper
</snippet></ROW><ROW><id>2754983</id><snippet>@Merge(foo='bar')
def test(*args, **kws):
    print *args
    print **kws
</snippet></ROW><ROW><id>2754983</id><snippet>test.extra_kws['sun'] = 'dock'
</snippet></ROW><ROW><id>2754983</id><snippet>test</snippet></ROW><ROW><id>2754983</id><snippet>def merge(**extra_kws):
    class _Merge(object):
        def __init__(self, function):
            self.extra_kws = extra_kws
            self.function = function
        def __call__(self, *args, **kws):
            kws.update(self.extra_kws)
            return self.function(*args, **kws)
    return _Merge

@merge(foo='bar')
def test(*args, **kws):
    print 'args:', args
    print 'kws:', kws

test(sun='dock')
test.extra_kws['trog'] = 'cube'
test(sun='dock')
</snippet></ROW><ROW><id>2754983</id><snippet>def merge(**extra_kws):
    def _decorator(function):
        def _wrapper(*args, **kws):
            kws.update(_wrapper.extra_kws)
            return function(*args, **kws)
        _wrapper.extra_kws = extra_kws
        return _wrapper
    return _decorator

@merge(foo='bar')
def test(*args, **kws):
    print 'kws:', kws

test(sun='dock')
test.extra_kws['trog'] = 'cube'
test(sun='dock')
</snippet></ROW><ROW><id>2755009</id><snippet>import os
import logging

class MyFileHandler(object):

    def __init__(self, dir, logger, handlerFactory, **kw):
        kw['filename'] = os.path.join(dir, logger.name)
        self._handler = handlerFactory(**kw)

    def __getattr__(self, n):
        if hasattr(self._handler, n):
            return getattr(self._handler, n)
        raise AttributeError, n

logger = logging.getLogger('test')
logger.setLevel(logging.INFO)
handler = MyFileHandler(os.curdir, logger, logging.FileHandler)
logger.addHandler(handler)
logger.info('hello mylogger')
</snippet></ROW><ROW><id>2755062</id><snippet>import urllib

def save(self):
    location = "%s, %s, %s, %s" % (self.address, self.city, self.state, self.zip)

    if not self.latitude or not self.longitude:
        latlng = self.geocode(location)
        latlng = latlng.split(',')
        self.latitude = latlng[0]
        self.longitude = latlng[1]

    super(Marker, self).save()

def geocode(self, location):
    output = "csv"
    location = urllib.quote_plus(location)
    request = "http://maps.google.com/maps/geo?q=%s&amp;output=%s&amp;key=%s" % (location, output, settings.GOOGLE_API_KEY)
    data = urllib.urlopen(request).read()
    dlist = data.split(',')
    if dlist[0] == '200':
        return "%s,%s" % (dlist[2], dlist[3])
    else:
        return ','
</snippet></ROW><ROW><id>2755179</id><snippet>__init__</snippet></ROW><ROW><id>2755179</id><snippet>class MyAdmin(admin.ModelAdmin):
    def __init__(self, model, admin_site):
        general_fields = ['notes', 'created_at', 'updated_at']
        fields = [f.name for f in self.model._meta.fields if f.name not in general_fields]
        self.fields = fields + general_fields
        super(admin.ModelAdmin, self).__init__(model, admin_site)
</snippet></ROW><ROW><id>2755179</id><snippet>_field_name_cache</snippet></ROW><ROW><id>2755273</id><snippet>addr_list_formatted.append("""
    "{0}"
    {{
    "gamedir"  "str"
    "address"  "{1}"
    }}
""".format(addr_list_idx, addr))
</snippet></ROW><ROW><id>2755456</id><snippet>succ(x)=x+1
pre(x)=x-1
</snippet></ROW><ROW><id>2755456</id><snippet>add(x,y) = {
    If(y==0) Return x;
    Return add(succ(x),pre(y))
}
</snippet></ROW><ROW><id>2755542</id><snippet>import re
xed_re = re.compile(r'&amp;#(\d+);')
def usub(m): return unichr(int(m.group(1)))

s = 'ã, ن, ش'
u = xed_re.sub(usub, s)
</snippet></ROW><ROW><id>2755542</id><snippet>print u</snippet></ROW><ROW><id>2755542</id><snippet>ã, ن, ش
</snippet></ROW><ROW><id>2755542</id><snippet>htmlentitydefs</snippet></ROW><ROW><id>2755763</id><snippet>EVP_PKEY</snippet></ROW><ROW><id>2755763</id><snippet>EVP_PKEY_new()</snippet></ROW><ROW><id>2755763</id><snippet>EVP_SealInit()</snippet></ROW><ROW><id>2755763</id><snippet>EVP_OpenInit</snippet></ROW><ROW><id>2755763</id><snippet>EVP_PKEY</snippet></ROW><ROW><id>2755891</id><snippet>with</snippet></ROW><ROW><id>2755891</id><snippet>with</snippet></ROW><ROW><id>2755891</id><snippet>fileh = open(file, 'w')
try:
    # Do things with fileh here
finally:
    fileh.close()
</snippet></ROW><ROW><id>2756136</id><snippet>commands[com](*args)
</snippet></ROW><ROW><id>2756777</id><snippet>open("/etc/lsb-release", O_RDONLY|O_LARGEFILE) = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=102, ...}) = 0
fstat64(3, {st_mode=S_IFREG|0644, st_size=102, ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb76b1000
read(3, "DISTRIB_ID=Ubuntu\nDISTRIB_RELEAS"..., 8192) = 102
read(3, "", 4096)                       = 0
read(3, "", 8192)                       = 0
close(3)                                = 0
</snippet></ROW><ROW><id>2756881</id><snippet>json.loads</snippet></ROW><ROW><id>2756881</id><snippet>str</snippet></ROW><ROW><id>2756881</id><snippet>loads</snippet></ROW><ROW><id>2756881</id><snippet>str</snippet></ROW><ROW><id>2756881</id><snippet>unicode</snippet></ROW><ROW><id>2756881</id><snippet>loads</snippet></ROW><ROW><id>2756883</id><snippet>glpk.so</snippet></ROW><ROW><id>2756883</id><snippet>make</snippet></ROW><ROW><id>2756883</id><snippet>gcc4.2</snippet></ROW><ROW><id>2756883</id><snippet>distutils</snippet></ROW><ROW><id>2756883</id><snippet>gcc-4.0</snippet></ROW><ROW><id>2756883</id><snippet>distutils</snippet></ROW><ROW><id>2756883</id><snippet>distutils</snippet></ROW><ROW><id>2756883</id><snippet>./configure</snippet></ROW><ROW><id>2756883</id><snippet>x86_64</snippet></ROW><ROW><id>2756889</id><snippet>.group(1)</snippet></ROW><ROW><id>2756889</id><snippet>.group(0)</snippet></ROW><ROW><id>2756994</id><snippet>xpath()</snippet></ROW><ROW><id>2756994</id><snippet>doc.xpath("//a[re:match(text(), 'some text')]", 
        namespaces={"re": "http://exslt.org/regular-expressions"})
</snippet></ROW><ROW><id>2757096</id><snippet>vals = array([[1, 10], [1, 11], [2, 20], [2, 21], [2, 22]])  # Example

(x, y) = vals.T  # Shortcut
bin_limits = range(min(x)+1, max(x)+2)  # Other limits could be chosen
points_by_bin = [ [] for _ in bin_limits ]  # Final result
for (bin_num, y_value) in zip(digitize(x, bin_limits), y):  # digitize() finds the correct bin number
    points_by_bin[bin_num].append(y_value)

print points_by_bin  # [[10, 11], [20, 21, 22]]
</snippet></ROW><ROW><id>2757096</id><snippet>digitize</snippet></ROW><ROW><id>2757096</id><snippet>where()</snippet></ROW><ROW><id>2757167</id><snippet>__init__</snippet></ROW><ROW><id>2757167</id><snippet>self.aList</snippet></ROW><ROW><id>2757255</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>2757417</id><snippet>DATABASE_OPTIONS = {
    'use_unicode': True,
    'charset': 'utf8'
}
</snippet></ROW><ROW><id>2757480</id><snippet>Cache-Control: public</snippet></ROW><ROW><id>2757480</id><snippet>Cache-Control: max-age=nn</snippet></ROW><ROW><id>2757941</id><snippet>ab+</snippet></ROW><ROW><id>2757941</id><snippet>r</snippet></ROW><ROW><id>2757941</id><snippet>file</snippet></ROW><ROW><id>2757941</id><snippet>FILE</snippet></ROW><ROW><id>2757941</id><snippet>&gt;&gt;&gt; f = open('junk', 'ab+')
&gt;&gt;&gt; f
&lt;open file 'junk', mode 'ab+' at 0xb77e6288&gt;
&gt;&gt;&gt; f.write('hello\n')
&gt;&gt;&gt; f.seek(0, os.SEEK_SET)
&gt;&gt;&gt; f.readline()
'hello\n'
&gt;&gt;&gt; f.write('there\n')
&gt;&gt;&gt; f.seek(0, os.SEEK_SET)
&gt;&gt;&gt; f.readline()
'hello\n'
&gt;&gt;&gt; f.readline()
'there\n'
</snippet></ROW><ROW><id>2758070</id><snippet>def foo(a):
    pass

def bar(b):
    foo(b, 2)

def some_func():
    bar(3)

if __name__=='__main__':
    import pdb
    pdb.set_trace()
</snippet></ROW><ROW><id>2758070</id><snippet>C:\temp&gt;test.py
--Return--
&gt; c:\temp\test.py(12)&lt;module&gt;()-&gt;None
-&gt; pdb.set_trace()
(Pdb) import traceback
(Pdb) exec "try: some_func()\nexcept: traceback.print_exc()"
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "C:\temp\test.py", line 8, in some_func
    bar(3)
  File "C:\temp\test.py", line 5, in bar
    foo(b, 2)
TypeError: foo() takes exactly 1 argument (2 given)
(Pdb)
</snippet></ROW><ROW><id>2758138</id><snippet>othermodule.py</snippet></ROW><ROW><id>2758138</id><snippet>import sys
def decorator(cls):
    mod = __import__(cls.__module__)
    mod.root = cls
</snippet></ROW><ROW><id>2758440</id><snippet>for hook in settings.HOOKS :
    try :
        __import__(hook)
    except ImportError as e :
        print "Got import err !", e
</snippet></ROW><ROW><id>2758440</id><snippet>for log_hook in settings.LOG_HOOKS :
    try :
        __import__(log_hook)
    except ImportError as e :
        raise e
</snippet></ROW><ROW><id>2758440</id><snippet>try... except</snippet></ROW><ROW><id>2758610</id><snippet>MixinClass1</snippet></ROW><ROW><id>2758610</id><snippet>__old_method1</snippet></ROW><ROW><id>2758610</id><snippet>__method1</snippet></ROW><ROW><id>2758610</id><snippet>MixInClass1</snippet></ROW><ROW><id>2758610</id><snippet>MixinClass1</snippet></ROW><ROW><id>2758610</id><snippet>class MixInClass1(object):
    def __init__(self):
        self.__old_method1,self.method1=self.method1,self.__method1
        super(MixInClass1, self).__init__()        
    def __method1(self):
        print "pre1()"
        self.__old_method1()
        print "post1()"

class MixInClass2(object):
    def __init__(self):
        super(MixInClass2, self).__init__()        
    def method1_hook(self):
        print('MixIn method1')

class Foo(MixInClass2,MixInClass1):
    def method1(self):
        print "do_something()"
        getattr(self,'method1_hook',lambda *args,**kw: None)()
        print "do_more()"

foo=Foo()
foo.method1()
</snippet></ROW><ROW><id>2758987</id><snippet>str.decode</snippet></ROW><ROW><id>2758987</id><snippet>&gt;&gt;&gt; 'Tannh‰user'.decode('ascii', 'replace').replace(u'\ufffd', '_')
u'Tannh___user'
</snippet></ROW><ROW><id>2758987</id><snippet>unicode</snippet></ROW><ROW><id>2758987</id><snippet>str</snippet></ROW><ROW><id>2758987</id><snippet>unicode</snippet></ROW><ROW><id>2758987</id><snippet>str</snippet></ROW><ROW><id>2758987</id><snippet>unicode.encode</snippet></ROW><ROW><id>2758987</id><snippet>replace</snippet></ROW><ROW><id>2758987</id><snippet>'?'</snippet></ROW><ROW><id>2758987</id><snippet>ord()</snippet></ROW><ROW><id>2758987</id><snippet>unicode</snippet></ROW><ROW><id>2758987</id><snippet>str</snippet></ROW><ROW><id>2758987</id><snippet>&gt;&gt;&gt; s = u'Tannh‰user'
&gt;&gt;&gt; "".join((c if ord(c) &lt; 128 else '_' for c in s))
u'Tannh_user'
</snippet></ROW><ROW><id>2759130</id><snippet>$ ls
cheese_cheese_type.bar  cheese_cheese_type.foo
$ python
&gt;&gt;&gt; import os
&gt;&gt;&gt; for filename in os.listdir("."):
...  if filename.startswith("cheese_"):
...    os.rename(filename, filename[7:])
... 
&gt;&gt;&gt; 
$ ls
cheese_type.bar  cheese_type.foo
</snippet></ROW><ROW><id>2759331</id><snippet>import os
os.listdir("path") # returns list
</snippet></ROW><ROW><id>2759524</id><snippet>def do_it(*args):
    if not args: args = (2, 5, 21)
</snippet></ROW><ROW><id>2759524</id><snippet>def do_it(a=2, b=5, c=21, *args):
    args = (a,b,c)+args
</snippet></ROW><ROW><id>2759587</id><snippet>class TakingCourse(models.Model):
    course = models.ForeignKey(Course)
    term = models.ForeignKey(Term)

    class Meta:
        unique_together = ('course', 'term')
</snippet></ROW><ROW><id>2759587</id><snippet>class MyUser(models.Model):
    user = models.OneToOneField(User)
    takingReqSets = models.ManyToManyField(RequirementSet, blank=True)
    takingCourses = models.ManyToManyField(Course, through='TakingCourse', blank=True, null=True)
    school = models.ForeignKey(School)

class TakingCourse(models.Model):
    my_user = models.ForeignKey(MyUser)
    course = models.ForeignKey(Course)
    term = models.ForeignKey(Term)

    class Meta:
         unique_together = ('my_user', 'course')
</snippet></ROW><ROW><id>2759813</id><snippet>/Library/Frameworks/Python.framework</snippet></ROW><ROW><id>2759964</id><snippet>app_label</snippet></ROW><ROW><id>2760005</id><snippet>dictionary</snippet></ROW><ROW><id>2760005</id><snippet>categories</snippet></ROW><ROW><id>2760005</id><snippet>users</snippet></ROW><ROW><id>2760005</id><snippet>tweets</snippet></ROW><ROW><id>2760005</id><snippet>Indexer</snippet></ROW><ROW><id>2760005</id><snippet>Indexer</snippet></ROW><ROW><id>2760005</id><snippet>'&lt;a href = "/index.php?query=' + user_name + '&amp;type=u"&gt;' + display_user_name + '&lt;/a&gt;'</snippet></ROW><ROW><id>2760005</id><snippet>'&lt;a href = "/index.php?query=%s&amp;type=u"&gt;%s&lt;/a&gt;' % (user_name, display_user_name)</snippet></ROW><ROW><id>2760005</id><snippet>foo[1:len(foo) - 1]</snippet></ROW><ROW><id>2760005</id><snippet>foo[1:-1]</snippet></ROW><ROW><id>2760005</id><snippet>dictionary</snippet></ROW><ROW><id>2760005</id><snippet>tweet_array</snippet></ROW><ROW><id>2760005</id><snippet>array</snippet></ROW><ROW><id>2760005</id><snippet>hash</snippet></ROW><ROW><id>2760005</id><snippet>close</snippet></ROW><ROW><id>2760005</id><snippet>with open(filename, mode) as f:</snippet></ROW><ROW><id>2760005</id><snippet>try</snippet></ROW><ROW><id>2760005</id><snippet>finally</snippet></ROW><ROW><id>2760005</id><snippet>os.path</snippet></ROW><ROW><id>2760005</id><snippet>sorted(existing_tweets[token])</snippet></ROW><ROW><id>2760005</id><snippet>sort</snippet></ROW><ROW><id>2760005</id><snippet>foo.sort()</snippet></ROW><ROW><id>2760005</id><snippet>sorted</snippet></ROW><ROW><id>2760005</id><snippet>existing_tweets[token] = sorted(existing_tweets[token])</snippet></ROW><ROW><id>2760005</id><snippet>os.path.exists</snippet></ROW><ROW><id>2760005</id><snippet>== True</snippet></ROW><ROW><id>2760005</id><snippet>== False</snippet></ROW><ROW><id>2760005</id><snippet>if foo:</snippet></ROW><ROW><id>2760005</id><snippet>if not foo</snippet></ROW><ROW><id>2760227</id><snippet>itertools.groupby</snippet></ROW><ROW><id>2760227</id><snippet>for k, g in itertools.groupby(names, lambda s: s.lower()):
    # Example: in the first iteration:
    #  k = "john"
    #  g = an iterator over ["john", "John"]
    # Process them as you like
</snippet></ROW><ROW><id>2760388</id><snippet>LIMIT 500</snippet></ROW><ROW><id>2760412</id><snippet>MIS Notes:.*(//p//)?.*</snippet></ROW><ROW><id>2760412</id><snippet>"MIS Notes: //p//"</snippet></ROW><ROW><id>2760412</id><snippet>MIS Notes:</snippet></ROW><ROW><id>2760412</id><snippet>"MIS Notes:"</snippet></ROW><ROW><id>2760412</id><snippet>.*</snippet></ROW><ROW><id>2760412</id><snippet>"MIS Notes: //p//"</snippet></ROW><ROW><id>2760412</id><snippet>(//p//)?</snippet></ROW><ROW><id>2760412</id><snippet>.*</snippet></ROW><ROW><id>2760412</id><snippet>MIS Notes:.*(//p//).*</snippet></ROW><ROW><id>2760412</id><snippet>MIS Notes:</snippet></ROW><ROW><id>2760412</id><snippet>"MIS Notes:"</snippet></ROW><ROW><id>2760412</id><snippet>.*</snippet></ROW><ROW><id>2760412</id><snippet>"MIS Notes: //p//"</snippet></ROW><ROW><id>2760412</id><snippet>(//p//)</snippet></ROW><ROW><id>2760412</id><snippet>"MIS Notes: "</snippet></ROW><ROW><id>2760412</id><snippet>(//p//)</snippet></ROW><ROW><id>2760412</id><snippet>"//p//"</snippet></ROW><ROW><id>2760412</id><snippet>.*</snippet></ROW><ROW><id>2760412</id><snippet>MIS Notes:.*?//(p)//</snippet></ROW><ROW><id>2760412</id><snippet>MIS Notes:</snippet></ROW><ROW><id>2760412</id><snippet>"MIS Notes:"</snippet></ROW><ROW><id>2760412</id><snippet>.*?</snippet></ROW><ROW><id>2760412</id><snippet>"MIS Notes: "</snippet></ROW><ROW><id>2760412</id><snippet>//(p)//</snippet></ROW><ROW><id>2760412</id><snippet>"p"</snippet></ROW><ROW><id>2760412</id><snippet>/</snippet></ROW><ROW><id>2760412</id><snippet>//p//</snippet></ROW><ROW><id>2760412</id><snippet>MIS Notes:[^/]*//(p)//</snippet></ROW><ROW><id>2760412</id><snippet>MIS Notes:</snippet></ROW><ROW><id>2760412</id><snippet>"MIS Notes:"</snippet></ROW><ROW><id>2760412</id><snippet>[^/]*</snippet></ROW><ROW><id>2760412</id><snippet>.*?</snippet></ROW><ROW><id>2760412</id><snippet>//(p)//</snippet></ROW><ROW><id>2760412</id><snippet>"p"</snippet></ROW><ROW><id>2760581</id><snippet>for line in lines:
  str = line.strip()
  if (str != ""):
    for i in range(0, 4):
      t.getNode(i).addNoiseTraceReading(val)
</snippet></ROW><ROW><id>2760825</id><snippet>initial</snippet></ROW><ROW><id>2760825</id><snippet>data</snippet></ROW><ROW><id>2760825</id><snippet>form = NewForm(initial=dict_of_field_values)
</snippet></ROW><ROW><id>2761081</id><snippet>a[start:stop,i]</snippet></ROW><ROW><id>2761081</id><snippet>a.__getitem__(slice(start,stop,None),i)</snippet></ROW><ROW><id>2761081</id><snippet>a</snippet></ROW><ROW><id>2761081</id><snippet>a</snippet></ROW><ROW><id>2761081</id><snippet>import numpy as np
arr=np.arange(12).reshape(4,3)
print(arr)
# [[ 0  1  2]
#  [ 3  4  5]
#  [ 6  7  8]
#  [ 9 10 11]]
</snippet></ROW><ROW><id>2761081</id><snippet>1:3</snippet></ROW><ROW><id>2761081</id><snippet>2</snippet></ROW><ROW><id>2761081</id><snippet>print(arr[1:3,2])
# [5 8]
</snippet></ROW><ROW><id>2761081</id><snippet>__getitem__</snippet></ROW><ROW><id>2761081</id><snippet>class Foo(list):
    def __getitem__(self,key):
        return repr(key)

foo=Foo(range(10))
print(foo[1:5,1,2])
# (slice(1, 5, None), 1, 2)
</snippet></ROW><ROW><id>2761211</id><snippet>self.defaultstyle = wx.richtext.RichTextAttr()
self.GetStyle(self.GetInsertionPoint(), self.defaultstyle)
self.defaultsize = self.defaultstyle.GetFont().GetPointSize()
</snippet></ROW><ROW><id>2761347</id><snippet>readlines</snippet></ROW><ROW><id>2761347</id><snippet>lines = open("inputfilex.txt", "r").readlines()
</snippet></ROW><ROW><id>2761347</id><snippet>len(lines)
</snippet></ROW><ROW><id>2761347</id><snippet>lines[3]</snippet></ROW><ROW><id>2761347</id><snippet>lines[-1]</snippet></ROW><ROW><id>2761363</id><snippet>wx.TE_RICH</snippet></ROW><ROW><id>2761363</id><snippet>wx.TE_RICH2</snippet></ROW><ROW><id>2761578</id><snippet>app_plan.cap</snippet></ROW><ROW><id>2761578</id><snippet>SELECT "app_phone"."id", "app_phone"."plan_id", "app_plan"."cap",
SUM("app_call"."cost") AS "total_cost"
FROM "app_phone"
INNER JOIN "app_plan" ON ("app_phone"."plan_id" = "app_plan"."id")
LEFT OUTER JOIN "app_call" ON ("app_phone"."id" = "app_call"."phone_id")
GROUP BY "app_phone"."id", "app_phone"."plan_id", "app_plan"."cap"
HAVING SUM("app_call"."cost") &gt;=  0.5 * "app_plan"."cap"
</snippet></ROW><ROW><id>2761578</id><snippet>Phone.objects.extra({
    "plan_cap": "app_plan.cap"
}).annotate(
    total_cost=Sum('calls__cost')
).filter(total_cost__gte=0.5*F('plan__cap'))
</snippet></ROW><ROW><id>2761578</id><snippet>app_plan.cap</snippet></ROW><ROW><id>2761578</id><snippet>SELECT "app_phone"."id", "app_phone"."plan_id",
SUM("app_call"."cost") AS "total_cost",
AVG("app_plan"."cap") AS "avg_cap",
FROM "app_phone"
INNER JOIN "app_plan" ON ("app_phone"."plan_id" = "app_plan"."id")
LEFT OUTER JOIN "app_call" ON ("app_phone"."id" = "app_call"."phone_id")
GROUP BY "app_phone"."id", "app_phone"."plan_id"
HAVING SUM("app_call"."cost") &gt;=  0.5 * AVG("app_plan"."cap")
</snippet></ROW><ROW><id>2761578</id><snippet>Phone.objects.annotate(
    total_cost=Sum('calls__cost'), 
    avg_cap=Avg('plan__cap')
).filter(total_cost__gte=0.5 * F("avg_cap"))
</snippet></ROW><ROW><id>2761690</id><snippet>import types
import sys

src = """
def hello(who):
    print 'hello', who
"""

def module_from_text(modulename, src):
    if modulename in sys.modules:
        module = sys.modules[modulename]
    else:
        module = sys.modules[modulename] = types.ModuleType(modulename)
    exec compile(src, '&lt;no-file&gt;', 'exec') in module.__dict__
    return module

module_from_text('flup', src)
import flup
flup.hello('world')
</snippet></ROW><ROW><id>2761690</id><snippet>hello world
</snippet></ROW><ROW><id>2761699</id><snippet>def exec_sql(conn_or_cursor, sql, *args, **kw):
    if hasattr(conn_or_cursor):
        cursor = conn_or_cursor.cursor()
    else:
        cursor = conn_or_cursor
    cursor.execute(_convert_utf8(sql), *(_convert_utf8(a) for a in args),
                   **dict((n, _convert_utf8(v)) for n, v in kw.iteritems()))
    return cursor

def _convert_utf8(value):
    if isinstance(value, unicode):
        return value.encode('utf8')
    else:
        return value
</snippet></ROW><ROW><id>2761927</id><snippet>python-command</snippet></ROW><ROW><id>2761927</id><snippet>(setq python-command "C:/Program Files/IronPython 2.6/ipy.exe")
</snippet></ROW><ROW><id>2762027</id><snippet>decimal</snippet></ROW><ROW><id>2762027</id><snippet>import decimal</snippet></ROW><ROW><id>2762027</id><snippet>&gt;&gt;&gt; v1 = 0.982769777778
&gt;&gt;&gt; v2 = 0.985980444444
&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; d1 = Decimal(str(v1)).quantize(Decimal('0.01'))
&gt;&gt;&gt; d2 = Decimal(str(v2)).quantize(Decimal('0.01'))
&gt;&gt;&gt; diff = d2 - d1
&gt;&gt;&gt; print d1, d2, diff
0.98 0.99 0.01
</snippet></ROW><ROW><id>2762063</id><snippet>for member in theList:
    print "%.2f" % member
</snippet></ROW><ROW><id>2762063</id><snippet>formattedList = ["%.2f" % member for member in theList]
</snippet></ROW><ROW><id>2762063</id><snippet>print formattedList
</snippet></ROW><ROW><id>2762063</id><snippet>%</snippet></ROW><ROW><id>2762063</id><snippet>format</snippet></ROW><ROW><id>2762296</id><snippet>if type(arg) is not datetime.date:
    raise TypeError('arg must be a datetime.date, not a %s' % type(arg))
</snippet></ROW><ROW><id>2762296</id><snippet>assert</snippet></ROW><ROW><id>2762296</id><snippet>python -o</snippet></ROW><ROW><id>2762296</id><snippet>AssertionError</snippet></ROW><ROW><id>2762296</id><snippet>TypeError</snippet></ROW><ROW><id>2762296</id><snippet>isinstance</snippet></ROW><ROW><id>2762296</id><snippet>datetime.date</snippet></ROW><ROW><id>2762296</id><snippet>datetime.datetime</snippet></ROW><ROW><id>2762298</id><snippet>re.findall(r"[a-zA-Z0-9]+",txt)
</snippet></ROW><ROW><id>2762298</id><snippet>re.split(r"[\s\.,\-_\?]+",txt)
</snippet></ROW><ROW><id>2762405</id><snippet>import random
def main():
    wordsf = open('words.txt', 'r')
    words = [line.rstrip('\n') for line in wordsf]
    wordsf.close()

    random_number = random.randint(0, len(words)-1)
    random_word = words[random_number]
    print random_word
</snippet></ROW><ROW><id>2762530</id><snippet>feedparser.py</snippet></ROW><ROW><id>2762530</id><snippet>app.yaml</snippet></ROW><ROW><id>2762530</id><snippet>index.yaml</snippet></ROW><ROW><id>2762530</id><snippet>main.py</snippet></ROW><ROW><id>2762530</id><snippet>.py</snippet></ROW><ROW><id>2762589</id><snippet>re.split(r"[^\w']+",text)
</snippet></ROW><ROW><id>2762589</id><snippet>w</snippet></ROW><ROW><id>2762589</id><snippet>[^\w']</snippet></ROW><ROW><id>2762589</id><snippet>^</snippet></ROW><ROW><id>2762589</id><snippet>\w</snippet></ROW><ROW><id>2762631</id><snippet>for w in words:
    if w != '':
        # ...
</snippet></ROW><ROW><id>2763021</id><snippet>&gt;&gt;&gt; max(a, key=sum)
[4, 5, 6]
</snippet></ROW><ROW><id>2763281</id><snippet>HTTP/1.0 200 OK
Date: Fri, 31 Dec 1999 23:59:59 GMT
Content-Type: text/html
Content-Length: 1354

&lt;html&gt;
&lt;body&gt;
&lt;h1&gt;Happy New Millennium!&lt;/h1&gt;
(more file contents)
  .
  .
  .
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>2763361</id><snippet>os.chmod</snippet></ROW><ROW><id>2763370</id><snippet>strace</snippet></ROW><ROW><id>2763370</id><snippet>execve("/usr/bin/python", ["python", "a.py"], [/* 43 vars */]) = 0
open("print.txt", O_WRONLY|O_CREAT|O_TRUNC|O_LARGEFILE, 0666) = 3
write(3, "test_print\n", 11)            = 11
close(3)                                = 0
</snippet></ROW><ROW><id>2763370</id><snippet>execve("/usr/bin/python", ["python", "b.py"], [/* 43 vars */]) = 0
open("write.txt", O_WRONLY|O_CREAT|O_TRUNC|O_LARGEFILE, 0666) = 3
write(3, "test_write\n", 11)            = 11
close(3)                                = 0
</snippet></ROW><ROW><id>2763374</id><snippet>super(B, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>2763445</id><snippet>&gt;&gt;&gt; print "%+d" % (-1)
-1
&gt;&gt;&gt;
&gt;&gt;&gt; print "%+d" % (1)
+1
&gt;&gt;&gt; print "%+d" % (0)
+0
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2763445</id><snippet>%</snippet></ROW><ROW><id>2763445</id><snippet>&gt;&gt;&gt; total = -10; print "Total:" + ["", "+"][total &gt; 0] + str(total)
Total:-10
&gt;&gt;&gt; total = 0; print "Total:" + ["", "+"][total &gt; 0] + str(total)
Total:0
&gt;&gt;&gt; total = 10; print "Total:" + ["", "+"][total &gt; 0] + str(total)
Total:+10
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2763530</id><snippet>from Tkinter import * 

root = Tk()

f = Frame(root, bg = "orange", width = 500, height = 500)
f.pack(side=LEFT, expand = 1)

f3 = Frame(f, bg = "red", width = 500)
f3.pack(side=LEFT, expand = 1, pady = 50, padx = 50)

f2 = Frame(root, bg = "black", height=100, width = 100)
f2.pack(side=LEFT, fill = Y)

b = Button(f2, text = "test")
b.pack()

b = Button(f3, text = "1", bg = "red")
b.grid(row=1, column=3)
b2 = Button(f3, text = "2")
b2.grid(row=1, column=4)
b3 = Button(f3, text = "2")
b3.grid(row=2, column=0)

root.mainloop()
</snippet></ROW><ROW><id>2763772</id><snippet> re.sub(r'(?:_a)?\.([^.]*)$', r'_suff.\1', "long.file.name.jpg")
</snippet></ROW><ROW><id>2763815</id><snippet>for i in MAC1_Val:
    print "%.6e" % i

1.000000e+00
-1.000000e+01
-2.063066e+02
2.226357e+02
1.000000e+00
1.000000e+01
1.000000e+01
</snippet></ROW><ROW><id>2764099</id><snippet>True</snippet></ROW><ROW><id>2764099</id><snippet>False</snippet></ROW><ROW><id>2764099</id><snippet>True</snippet></ROW><ROW><id>2764099</id><snippet>False</snippet></ROW><ROW><id>2764099</id><snippet>1</snippet></ROW><ROW><id>2764099</id><snippet>0</snippet></ROW><ROW><id>2764099</id><snippet>False</snippet></ROW><ROW><id>2764099</id><snippet>bool</snippet></ROW><ROW><id>2764099</id><snippet>int</snippet></ROW><ROW><id>2764099</id><snippet>object
   |
 int
   |
 bool
</snippet></ROW><ROW><id>2764099</id><snippet>['zero', 'one'][False]</snippet></ROW><ROW><id>2764099</id><snippet>__index__</snippet></ROW><ROW><id>2764264</id><snippet>pickle.load(file)</snippet></ROW><ROW><id>2764264</id><snippet>pickle.loads(string)</snippet></ROW><ROW><id>2764422</id><snippet>&gt;&gt;&gt; lista = ['a', 'b', 'foo', 'c', 'd', 'e', 'bar']
&gt;&gt;&gt; next(i for i in lista if len(i) &gt; 2)
'foo'
</snippet></ROW><ROW><id>2764481</id><snippet>self.crumb = self._breadcrumb(father) 
</snippet></ROW><ROW><id>2764481</id><snippet>self.crumb = self._breadcrumb(self)
</snippet></ROW><ROW><id>2764481</id><snippet>class GeoObject(models.Model):
    name = models.CharField('Name',max_length=30)
    father = models.ForeignKey('self', related_name = 'geo_objects')
    crumb = PickledObjectField()
    # more attributes...

    def _breadcrumb(self):
        ...
        return breadcrumb

    def save(self,*args, **kwargs):
        self.crumb = self._breadcrumb()
        super(GeoObject, self).save(*args,**kwargs)
</snippet></ROW><ROW><id>2764599</id><snippet>list</snippet></ROW><ROW><id>2764599</id><snippet>tuple</snippet></ROW><ROW><id>2764599</id><snippet>dict</snippet></ROW><ROW><id>2764631</id><snippet>list(reversed(list(open('foo.txt'))))
</snippet></ROW><ROW><id>2764631</id><snippet>open('foo.txt', 'w').writelines(reversed(data))
</snippet></ROW><ROW><id>2764631</id><snippet>data</snippet></ROW><ROW><id>2764631</id><snippet>list(data)</snippet></ROW><ROW><id>2764633</id><snippet>self.turnnow</snippet></ROW><ROW><id>2764633</id><snippet>&gt;&gt;&gt; var = ()
&gt;&gt;&gt; print "%s" % (var)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
TypeError: not enough arguments for format string
&gt;&gt;&gt; print "%s" % (var,)
()
</snippet></ROW><ROW><id>2764633</id><snippet>(expr)</snippet></ROW><ROW><id>2764633</id><snippet>expr</snippet></ROW><ROW><id>2764633</id><snippet>(expr, )</snippet></ROW><ROW><id>2764633</id><snippet>expr</snippet></ROW><ROW><id>2764633</id><snippet>self.turnnow</snippet></ROW><ROW><id>2764633</id><snippet>print</snippet></ROW><ROW><id>2764822</id><snippet>self.request.url
</snippet></ROW><ROW><id>2764822</id><snippet>self.request.query_string
</snippet></ROW><ROW><id>2764822</id><snippet>self.request.get("name-of-querystring-variable")
</snippet></ROW><ROW><id>2765227</id><snippet>bind</snippet></ROW><ROW><id>2765227</id><snippet>s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
</snippet></ROW><ROW><id>2765366</id><snippet>period = '-P14D'
regex  = re.compile('(?P&lt;sign&gt;-?)P(?:(?P&lt;years&gt;\d+)Y)?(?:(?P&lt;months&gt;\d+)M)?(?:(?P&lt;days&gt;\d+)D)?(?:T(?:(?P&lt;hours&gt;\d+)H)?(?:(?P&lt;minutes&gt;\d+)M)?(?:(?P&lt;seconds&gt;\d+)S)?)?')

# Fetch the match groups with default value of 0 (not None)
duration = regex.match(period).groupdict(0)

# Create the timedelta object from extracted groups
delta = timedelta(days=int(duration['days']) + (int(duration['months']) * 30) + (int(duration['years']) * 365),
                  hours=int(duration['hours']),
                  minutes=int(duration['minutes']),
                  seconds=int(duration['seconds']))

if duration['sign'] == "-":
    delta *= -1
</snippet></ROW><ROW><id>2765650</id><snippet>f.flush()
</snippet></ROW><ROW><id>2765650</id><snippet>f</snippet></ROW><ROW><id>2765650</id><snippet>f.close()
</snippet></ROW><ROW><id>2765713</id><snippet>getattr</snippet></ROW><ROW><id>2765713</id><snippet>&gt;&gt;&gt; argv = ['function.py', 'run', 'Hello']
&gt;&gt;&gt; class A:
    def run(self, *args):
        print(*args)


&gt;&gt;&gt; getattr(A(), argv[1])(*argv[2:])
Hello
</snippet></ROW><ROW><id>2765987</id><snippet>mi</snippet></ROW><ROW><id>2765987</id><snippet>an</snippet></ROW><ROW><id>2765987</id><snippet>getattr(mi, an)</snippet></ROW><ROW><id>2765987</id><snippet>an</snippet></ROW><ROW><id>2765987</id><snippet>mi</snippet></ROW><ROW><id>2765987</id><snippet>AttributeError</snippet></ROW><ROW><id>2765987</id><snippet>mi</snippet></ROW><ROW><id>2765987</id><snippet>getattr(mi, an, None)</snippet></ROW><ROW><id>2765987</id><snippet>la</snippet></ROW><ROW><id>2765987</id><snippet>[getattr(mi, x, None) for x in la]
</snippet></ROW><ROW><id>2765987</id><snippet>la</snippet></ROW><ROW><id>2765987</id><snippet>mi</snippet></ROW><ROW><id>2765987</id><snippet>li</snippet></ROW><ROW><id>2765987</id><snippet>[[getattr(mi, x, None) for x in la] for mi in li]
</snippet></ROW><ROW><id>2766259</id><snippet>class test():
    def __init__(self, var):
        self.var = var

    def value(self):
        print self.var

test_inst = test(var)
test_inst.value()
</snippet></ROW><ROW><id>2766887</id><snippet>substitute</snippet></ROW><ROW><id>2766887</id><snippet>print s.substitute(x='lee')
</snippet></ROW><ROW><id>2766887</id><snippet>s</snippet></ROW><ROW><id>2766943</id><snippet>property</snippet></ROW><ROW><id>2766943</id><snippet>_x</snippet></ROW><ROW><id>2766943</id><snippet>property</snippet></ROW><ROW><id>2766943</id><snippet>property</snippet></ROW><ROW><id>2766943</id><snippet>property</snippet></ROW><ROW><id>2766943</id><snippet>property</snippet></ROW><ROW><id>2766943</id><snippet>property</snippet></ROW><ROW><id>2766943</id><snippet>property</snippet></ROW><ROW><id>2766943</id><snippet>self</snippet></ROW><ROW><id>2767160</id><snippet>print k</snippet></ROW><ROW><id>2767160</id><snippet>print repr(k)</snippet></ROW><ROW><id>2767160</id><snippet>k = m.hexdigest()</snippet></ROW><ROW><id>2767160</id><snippet>k = repr(m.digest())</snippet></ROW><ROW><id>2767160</id><snippet>&gt;&gt;&gt; print k
�1���Y�6���M
&gt;&gt;&gt; print repr(k)
'\xec\x9d1\x89e\x08\xa1\xc2Y\xf6\xbf6\xfe\xe4\xe2M'
&gt;&gt;&gt; print k.encode("hex")
ec9d31896508a1c259f6bf36fee4e24d
</snippet></ROW><ROW><id>2767545</id><snippet>In [35]: %timeit np.array(im_bw.convert('L')).astype(np.uint8)
10000 loops, best of 3: 28 us per loop

In [36]: %timeit np.reshape(im_bw.getdata(), im_bw.size)
10000 loops, best of 3: 57.3 us per loop
</snippet></ROW><ROW><id>2767545</id><snippet>import numpy as np
import Image

x = np.arange(256, dtype=np.uint8).reshape((16,16))
print 'Created array'
print x

im = Image.fromarray(x)
print 'Vales in grayscale PIL image using numpy.asarray &lt;-- Works as expected'
print np.asarray(im)

print 'Converted to BW PIL image...'
im_bw = im.convert('1')

print 'Values in BW PIL image, using Image.getdata() &lt;-- Works as expected'
print '  (Not a simple threshold due to dithering...)'
# Dividing by 255 to make the comparison easier
print np.reshape(im_bw.getdata(), (16, 16)) / 255 

print 'Values in BW PIL image using numpy.asarray() &lt;-- Unexpected!'
print '   (Same occurs when using numpy.array() to copy and convert.)'
print np.asarray(im_bw).astype(np.uint8) 

print 'Workaround, convert back to type "L" before array conversion'
print np.array(im_bw.convert('L')).astype(np.uint8) / 255
</snippet></ROW><ROW><id>2767545</id><snippet>Created array
[[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15]
 [ 16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31]
 [ 32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47]
 [ 48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63]
 [ 64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79]
 [ 80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95]
 [ 96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111]
 [112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127]
 [128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143]
 [144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159]
 [160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175]
 [176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191]
 [192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207]
 [208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223]
 [224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239]
 [240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255]]

Vales in grayscale PIL image using numpy.asarray &lt;-- Works as expected
[[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15]
 [ 16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31]
 [ 32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47]
 [ 48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63]
 [ 64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79]
 [ 80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95]
 [ 96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111]
 [112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127]
 [128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143]
 [144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159]
 [160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175]
 [176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191]
 [192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207]
 [208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223]
 [224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239]
 [240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255]]

Converted to BW PIL image...

Values in BW PIL image, using Image.getdata() &lt;-- Works as expected
  (Not a simple threshold due to dithering...)
[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0]
 [0 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0]
 [0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 1]
 [0 0 0 1 0 1 0 1 0 1 0 1 0 0 0 0]
 [1 0 1 0 1 0 1 0 1 0 0 0 1 1 0 1]
 [0 1 0 1 0 0 1 0 0 1 1 0 1 0 1 0]
 [1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 1]
 [0 1 0 1 0 1 0 1 0 1 1 0 1 1 0 1]
 [1 1 0 1 1 1 1 0 1 1 0 1 1 0 1 1]
 [1 0 1 1 0 1 0 1 1 0 1 1 0 1 1 0]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
 [1 0 1 0 1 1 0 1 1 0 1 1 1 0 1 1]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]]

Values in BW PIL image using numpy.asarray() &lt;-- Unexpected!
   (Same occurs when using numpy.array() to copy and convert.)
[[0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
 [0 1 1 1 1 1 1 0 0 0 0 0 1 1 1 1]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]]

Workaround, convert back to type "L" before array conversion
[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0]
 [0 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0]
 [0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 1]
 [0 0 0 1 0 1 0 1 0 1 0 1 0 0 0 0]
 [1 0 1 0 1 0 1 0 1 0 0 0 1 1 0 1]
 [0 1 0 1 0 0 1 0 0 1 1 0 1 0 1 0]
 [1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 1]
 [0 1 0 1 0 1 0 1 0 1 1 0 1 1 0 1]
 [1 1 0 1 1 1 1 0 1 1 0 1 1 0 1 1]
 [1 0 1 1 0 1 0 1 1 0 1 1 0 1 1 0]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
 [1 0 1 0 1 1 0 1 1 0 1 1 1 0 1 1]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
 [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]]
</snippet></ROW><ROW><id>2767946</id><snippet>csv</snippet></ROW><ROW><id>2767946</id><snippet>Content-Type</snippet></ROW><ROW><id>2767946</id><snippet>class Test(webapp.RequestHandler):
    def get(self, upload_type):
        self.response.headers['Content-Type'] = 'text/csv'
        self.response.out.write(','.join(['a', 'cool', 'test']))
</snippet></ROW><ROW><id>2768203</id><snippet>dict.iteritems()</snippet></ROW><ROW><id>2768203</id><snippet>for k,v in d.iteritems():               # will become d.items() in py3k
  print "%s - %s" % (str(k), str(v))
</snippet></ROW><ROW><id>2768570</id><snippet>def get_upper(my_string):
  return my_string.upper()
</snippet></ROW><ROW><id>2768870</id><snippet>myFakeFile = StringIO.StringIO()
wtr = csv.DictWriter( myFakeFile, headings )
...
myFakeFile.getvalue()
</snippet></ROW><ROW><id>2768880</id><snippet>MyObject</snippet></ROW><ROW><id>2768880</id><snippet>type</snippet></ROW><ROW><id>2768880</id><snippet>type(name, bases, dict)

    Return a new type object. This is essentially a dynamic form of the 
    class statement... 
</snippet></ROW><ROW><id>2768880</id><snippet>mydict={'__tablename__':stored['tablename'],
        '__table_args__':{'autoload':True},}

MyObj=type(stored['objectname'],(Base,),mydict)
print(MyObj)
# &lt;class '__main__.MyObject'&gt;
print(MyObj.__base__)
# &lt;class '__main__.Base'&gt;
print(MyObj.__tablename__)
# my_internal_table_name
print(MyObj.__table_args__)
# {'autoload': True}
</snippet></ROW><ROW><id>2769063</id><snippet>relationship()</snippet></ROW><ROW><id>2769063</id><snippet>order_by</snippet></ROW><ROW><id>2769063</id><snippet>relationship</snippet></ROW><ROW><id>2769063</id><snippet>primaryjoin</snippet></ROW><ROW><id>2769090</id><snippet>open('file.txt', 'w').close()
</snippet></ROW><ROW><id>2769090</id><snippet>f = open('file.txt', 'r+')
f.truncate()
</snippet></ROW><ROW><id>2769248</id><snippet>from __future__ import with_statement
import time
import re
from cStringIO import StringIO

def word_iter_std(filename):
    start = time.time()
    with open(filename) as f:
        for line in f:
            for word in line.split():
                yield word
    print 'iter_std took %0.6f seconds' % (time.time() - start)

def word_iter_re(filename):
    start = time.time()
    with open(filename) as f:
        txt = f.read()
    for word in re.finditer('\w+', txt):
        yield word
    print 'iter_re took %0.6f seconds' % (time.time() - start)

def word_iter_stringio(filename):
    start = time.time()
    with open(filename) as f:
        io = StringIO(f.read())
    for line in io:
        for word in line.split():
            yield word
    print 'iter_io took %0.6f seconds' % (time.time() - start)

woo = '/tmp/woo.txt'

for word in word_iter_std(woo): pass
for word in word_iter_re(woo): pass
for word in word_iter_stringio(woo): pass
</snippet></ROW><ROW><id>2769248</id><snippet>% python /tmp/junk.py
iter_std took 0.016321 seconds
iter_re took 0.028345 seconds
iter_io took 0.016230 seconds
</snippet></ROW><ROW><id>2769476</id><snippet>get_grouped_opcodes</snippet></ROW><ROW><id>2769476</id><snippet>SequenceMatcher(None, a, b).get_grouped_opcodes()</snippet></ROW><ROW><id>2769476</id><snippet>('replace', 24, 29, 24, 29)
('insert', 33, 33, 33, 35)
</snippet></ROW><ROW><id>2769476</id><snippet>'delete'</snippet></ROW><ROW><id>2769476</id><snippet>'equal'</snippet></ROW><ROW><id>2769476</id><snippet>difflib.unified_diff()</snippet></ROW><ROW><id>2769663</id><snippet># This is the algorithm you described, but also returns the number of chunks.
new_file_hash, nchunks = hash_for_tile(new_file)
store_file(new_file, nchunks, hash)

def store_file(file, nchunks, hash):
  "" Tells you whether there is another file with the same contents already, by 
     making a table lookup ""
  # This can be a DB lookup or some way to obtain your hash map
  big_table = ObtainTable()

  # Two level lookup table might help performance
  # Will vary on the number of entries and nature of big_table
  if nchunks in big_table:
     if hash in big_table[hash]:
       raise DuplicateFileException,\
         'File is dup with %s' big_table[nchunks][lookup_hash]
  else:
    big_table[nchunks] = {}

  big_table[nchunks].update({
    hash: file.filename
  })

  file.save() # or something
</snippet></ROW><ROW><id>2769680</id><snippet>import csv

groups = dict(a=headers_for_list_a, b=headers_for_list_b)
lists = dict((name, []) for name in groups)

for row in csv.DictReader(csvfile, fieldnames=headers):
    for name, grp_headers in groups.items():
        lists[name].append(dict((header, row[header]) for header in grp_headers))
</snippet></ROW><ROW><id>2769939</id><snippet>positions = ((n, n + hits_per_page - 1) for n in xrange(1, total_hits, hits_per_page))
for start, end in positions:
</snippet></ROW><ROW><id>2769939</id><snippet>end</snippet></ROW><ROW><id>2769939</id><snippet>hits_per_page</snippet></ROW><ROW><id>2769939</id><snippet>httplib2</snippet></ROW><ROW><id>2769939</id><snippet>urllib</snippet></ROW><ROW><id>2769939</id><snippet>urllib2</snippet></ROW><ROW><id>2769969</id><snippet>import os, uuid
return uuid.UUID(bytes=os.urandom(16), version=4)
</snippet></ROW><ROW><id>2770062</id><snippet>re.findall(r'\d\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s\d{4}', text)
</snippet></ROW><ROW><id>2770066</id><snippet>foo = range(100000)
new_foo = []
for item in foo:
    if item % 3 != 0: # Things divisble by 3 don't get through
        new_foo.append(item)
</snippet></ROW><ROW><id>2770066</id><snippet> new_foo = [item for item in foo if item % 3 != 0]
</snippet></ROW><ROW><id>2770066</id><snippet>foo</snippet></ROW><ROW><id>2770066</id><snippet>new_foo</snippet></ROW><ROW><id>2770066</id><snippet>del</snippet></ROW><ROW><id>2770066</id><snippet>foo = xrange(100000) # Like generators, xrange is lazy
def filter_divisible_by_three(iterable):
    for item in foo:
        if item % 3 != 0:
            yield item


new_foo = filter_divisible_by_three(foo)
</snippet></ROW><ROW><id>2770066</id><snippet>new_foo = (item for item in foo if item % 3 != 0)
</snippet></ROW><ROW><id>2770066</id><snippet>numpy</snippet></ROW><ROW><id>2770331</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>2770331</id><snippet>import socket
timeout = 10
socket.setdefaulttimeout(timeout)
</snippet></ROW><ROW><id>2770502</id><snippet>&amp;</snippet></ROW><ROW><id>2770646</id><snippet>setattr</snippet></ROW><ROW><id>2770646</id><snippet>&gt;&gt;&gt; class A(object):
...     pass
... 
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; f = 'field'
&gt;&gt;&gt; setattr(a, f, 42)
&gt;&gt;&gt; a.field
42
</snippet></ROW><ROW><id>2770691</id><snippet>match = re.search(r"\bOne\b(.*?)\bThree\b", text, re.DOTALL)
if match:
    betweenwords = match.group(1)
    dates = re.findall(r'\d\d (?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4}', betweenwords) 
</snippet></ROW><ROW><id>2770780</id><snippet>
@rem Test environment using this table:
@rem
@rem Environment Variable       32bit Native    64bit Native    WOW64
@rem PROCESSOR_ARCHITECTURE     x86             AMD64           x86
@rem PROCESSOR_ARCHITEW6432     undefined       undefined       AMD64
@rem
&lt;/pre&gt;</snippet></ROW><ROW><id>2771151</id><snippet>__init__</snippet></ROW><ROW><id>2771151</id><snippet>class Empty: pass
e = Empty()
e.f = 5
print e.f # shows 5
</snippet></ROW><ROW><id>2771151</id><snippet>A</snippet></ROW><ROW><id>2771151</id><snippet>name</snippet></ROW><ROW><id>2771151</id><snippet>A</snippet></ROW><ROW><id>2771151</id><snippet>A</snippet></ROW><ROW><id>2771151</id><snippet>a</snippet></ROW><ROW><id>2771151</id><snippet>a</snippet></ROW><ROW><id>2771151</id><snippet>A</snippet></ROW><ROW><id>2771151</id><snippet>B</snippet></ROW><ROW><id>2771151</id><snippet>a.name</snippet></ROW><ROW><id>2771151</id><snippet>a</snippet></ROW><ROW><id>2771151</id><snippet>A.name</snippet></ROW><ROW><id>2771298</id><snippet>^activity/(?P&lt;info&gt;\d+)/$</snippet></ROW><ROW><id>2771298</id><snippet>info</snippet></ROW><ROW><id>2771410</id><snippet>&lt;test&gt;&lt;/test&gt;</snippet></ROW><ROW><id>2771410</id><snippet>&lt;test/&gt;</snippet></ROW><ROW><id>2771410</id><snippet>&lt;test/&gt;</snippet></ROW><ROW><id>2771410</id><snippet>&lt;test&gt;&lt;/test&gt;</snippet></ROW><ROW><id>2771701</id><snippet>datetime.now()</snippet></ROW><ROW><id>2771701</id><snippet>date = models.DateTimeField(auto_now_add=True, blank=True)
</snippet></ROW><ROW><id>2771701</id><snippet>date = models.DateTimeField(default=datetime.now, blank=True)
</snippet></ROW><ROW><id>2771701</id><snippet>datetime.now</snippet></ROW><ROW><id>2771701</id><snippet>datetime.now()</snippet></ROW><ROW><id>2771806</id><snippet>datetime.datetime</snippet></ROW><ROW><id>2771806</id><snippet>import datetime

#
# This creates new instace of `datetime.datetime` from a string according to
# the pattern given as the second argument.
#
start = datetime.datetime.strptime(s_date, '%Y%m%d')
end = datetime.datetime.strptime(e_date, '%Y%m%d')

# And now the query you want. Mind that you cannot use 'and' keyword
# inside .filter() function. Fortunately .filter() automatically ANDs
# all criteria you provide.
Activity.objects.filter(timestamp__gte=start, timestamp__lte=end)
</snippet></ROW><ROW><id>2771995</id><snippet>        App1---
               __init__.py
               models.py
               test.py
               urls.py
               views.py
               templatetags---
                       __init__.py
                       inclusion_test.py
                          ...
</snippet></ROW><ROW><id>2771995</id><snippet>register = template.Library()   
@register.inclusion_tag('platform/templatetags/pagination_links.html')
def pagination_links(page, per_page, link):
</snippet></ROW><ROW><id>2772194</id><snippet>
from webob import Request, Response
from my_wsgi_application import App
class MyMiddleware(object):
    def &lt;strong&gt;init&lt;/strong&gt;(self, app):
        self.app = app
    def &lt;strong&gt;call&lt;/strong&gt;(self, environ, start_response):
        req = Request(environ)&lt;br&gt;
        ...
        rsp = req.get_response(app)
        rsp.headers['Content-type'] = 'application/json'
        return rsp(environ, start_response)
&lt;/pre&gt;</snippet></ROW><ROW><id>2772323</id><snippet>y</snippet></ROW><ROW><id>2772323</id><snippet>NameError: name 'y' is not defined</snippet></ROW><ROW><id>2772323</id><snippet>for x in range(4), y in range(4):</snippet></ROW><ROW><id>2772323</id><snippet>for x in (range(4), y in range(4)):
</snippet></ROW><ROW><id>2772323</id><snippet>for x in ([0,1,2,3], 2 in range(4)):
</snippet></ROW><ROW><id>2772323</id><snippet>for x in ([0,1,2,3], True):
</snippet></ROW><ROW><id>2772323</id><snippet>for</snippet></ROW><ROW><id>2772323</id><snippet>x = [0,1,2,3]</snippet></ROW><ROW><id>2772323</id><snippet>x = True</snippet></ROW><ROW><id>2772323</id><snippet>y</snippet></ROW><ROW><id>2772414</id><snippet>import datetime
start = datetime.datetime(2009, 1, 31)
end = datetime.datetime(2009, 2, 1)
diff = end-start
print (diff.days * 1440) + (diff.seconds / 60)
&gt;&gt; 1440.0
</snippet></ROW><ROW><id>2772414</id><snippet>diff.microseconds</snippet></ROW><ROW><id>2772561</id><snippet>&gt;&gt;&gt; [[i for i, j in enumerate(c) if j is not None] for c in zip(*list1)]
[[0, 1, 2, 3], [0, 1, 2, 3], [0, 2]]
</snippet></ROW><ROW><id>2772561</id><snippet>itertools.izip</snippet></ROW><ROW><id>2772561</id><snippet>zip</snippet></ROW><ROW><id>2772789</id><snippet>result = numpy.empty(data.shape[0])
for i in range(len(data)):
    result[i] = foo(data[i])
</snippet></ROW><ROW><id>2772789</id><snippet>foo</snippet></ROW><ROW><id>2773169</id><snippet>ifequal</snippet></ROW><ROW><id>2773169</id><snippet>import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from google.appengine.dist import use_library
use_library('django', '1.1')
</snippet></ROW><ROW><id>2773169</id><snippet>ifequal</snippet></ROW><ROW><id>2773169</id><snippet>class MyHandler(webapp.RequestHandler):
    def get(self):
        foo_list = db.GqlQuery(...)
        ...
        template_values['foos'] = foo_list
        template_values['foo_count'] = len(foo_list)
        template_values['one_foo'] = len(foo_list) == 1
        handler.response.out.write(template.render(...))
</snippet></ROW><ROW><id>2773169</id><snippet>{% if one_foo %}
    You have one foo.
{% endif %}
</snippet></ROW><ROW><id>2773169</id><snippet>{% if foo_list %}
    You have {{ foo_count }} foo{{foo_count|pluralize}}.
{% else %}
    You have no foos
{% endif %}
</snippet></ROW><ROW><id>2773195</id><snippet>management.call_command('syncdb', interactive=False)
</snippet></ROW><ROW><id>2773316</id><snippet>&gt;&gt;&gt; [(i, j) for i, _, k in myList for j in k]
[('Foo', 1), ('Foo', 2), ('Foo', 3), ('Bar', 'i'), ('Bar', 'j')]
</snippet></ROW><ROW><id>2773520</id><snippet>graphData = {}
</snippet></ROW><ROW><id>2773520</id><snippet>array.append(x)
</snippet></ROW><ROW><id>2773520</id><snippet>graphData.append(line).  
</snippet></ROW><ROW><id>2773571</id><snippet>src</snippet></ROW><ROW><id>2773571</id><snippet>dst</snippet></ROW><ROW><id>2773571</id><snippet>cmd</snippet></ROW><ROW><id>2773571</id><snippet>from collections import namedtuple

DataClass = namedtuple("DataClass", "src dst cmd")
d1 = DataClass(src='192.168.0.2', dst='192.168.0.1', cmd='cmd1')
</snippet></ROW><ROW><id>2773571</id><snippet>DataClass</snippet></ROW><ROW><id>2773571</id><snippet>d1 = DataClass(**d1_as_dict)
</snippet></ROW><ROW><id>2773571</id><snippet>from collections import defaultdict, namedtuple

r = defaultdict(int)
for obj in [d1, d2, d3, d4]:
    r[obj] += 1
</snippet></ROW><ROW><id>2773571</id><snippet>namedtuple</snippet></ROW><ROW><id>2773586</id><snippet>class A(object):
    def m(self):
        print('m')

class B(A): pass
</snippet></ROW><ROW><id>2773586</id><snippet>super</snippet></ROW><ROW><id>2773586</id><snippet>&gt;&gt;&gt; super(B).m
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'super' object has no attribute 'm'
&gt;&gt;&gt; super(B).__get__(B(), B)
&lt;super: &lt;class 'B'&gt;, &lt;B object&gt;&gt;
</snippet></ROW><ROW><id>2773586</id><snippet>super</snippet></ROW><ROW><id>2773586</id><snippet>&gt;&gt;&gt; super(B, B()).m
&lt;bound method B.m of &lt;__main__.B object at 0xb765dacc&gt;&gt;
&gt;&gt;&gt; super(B, B()).m()
m
</snippet></ROW><ROW><id>2773586</id><snippet>super</snippet></ROW><ROW><id>2773586</id><snippet>&gt;&gt;&gt; super(B, B).m
&lt;function m at 0xb761482c&gt;
&gt;&gt;&gt; super(B, B).m()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: m() takes exactly 1 positional argument (0 given)
&gt;&gt;&gt; super(B, B).m(B())
m
</snippet></ROW><ROW><id>2774087</id><snippet>theList</snippet></ROW><ROW><id>2774125</id><snippet>def get_file_size(filename):
    "Get the file size by seeking at end"
    fd= os.open(filename, os.O_RDONLY)
    try:
        return os.lseek(fd, 0, os.SEEK_END)
    finally:
        os.close(fd)
</snippet></ROW><ROW><id>2774180</id><snippet>numpy.split()</snippet></ROW><ROW><id>2774180</id><snippet>numpy.array_split()</snippet></ROW><ROW><id>2774180</id><snippet>numpy.array_split(numpy.zeros((1300,1341)), 9)
</snippet></ROW><ROW><id>2774280</id><snippet>port
</snippet></ROW><ROW><id>2774284</id><snippet>from numpy import *

def points_in_circle(circle, arr):
    "A generator to return all points whose indices are within given circle."
    i0,j0,r = circle
    def intceil(x):
        return int(ceil(x))
    for i in xrange(intceil(i0-r),intceil(i0+r)):
        ri = sqrt(r**2-(i-i0)**2)
        for j in xrange(intceil(j0-ri),intceil(j0+ri)):
            yield arr[i][j]
</snippet></ROW><ROW><id>2774284</id><snippet>points_in_circle</snippet></ROW><ROW><id>2774284</id><snippet>yield</snippet></ROW><ROW><id>2774284</id><snippet>return</snippet></ROW><ROW><id>2774284</id><snippet>yield</snippet></ROW><ROW><id>2774284</id><snippet>points_in_circle</snippet></ROW><ROW><id>2774284</id><snippet># raster dimensions, 10 million points
N, M = 3200, 3200
# circle center and its radius in index space
i0, j0, r = 70, 20, 12.3

raster = fromfunction(lambda i,j: 100+10*i+j, (N, M), dtype=int)
print "raster is ready"
print raster

pts_iterator = points_in_circle((i0,j0,r), raster) # very quick, do not extract points yet
pts = array(list(pts_iterator)) # actually extract all points
print pts.size, "points extracted, sum = ", sum(pts)
</snippet></ROW><ROW><id>2774811</id><snippet>awk = subprocess.Popen([r"awk", "{print $11}"], stdin=subprocess.PIPE)
awk_stdout = awk.communicate(uptime_stdout)[0]
</snippet></ROW><ROW><id>2774811</id><snippet>awk_stdout</snippet></ROW><ROW><id>2774811</id><snippet>None</snippet></ROW><ROW><id>2774811</id><snippet>awk_stdout.rstrip('\n')</snippet></ROW><ROW><id>2774811</id><snippet>AttributeError</snippet></ROW><ROW><id>2774811</id><snippet>None</snippet></ROW><ROW><id>2774811</id><snippet>rstrip</snippet></ROW><ROW><id>2774811</id><snippet>awk = subprocess.Popen([r"awk", "{print $11}"], stdin=subprocess.PIPE,
                       stdout=subprocess.PIPE)
awk_stdout = awk.communicate(uptime_stdout)[0]
</snippet></ROW><ROW><id>2774811</id><snippet>awk_stdout</snippet></ROW><ROW><id>2774811</id><snippet>awk</snippet></ROW><ROW><id>2775008</id><snippet>import numpy as np
import numpy.lib.recfunctions

# Define the starting arrays as structured arrays with two fields ('key' and 'field')
dtype = [('key', np.int), ('field', np.float)]
x = np.array([(1, 2),
             (2, 4),
             (3, 6),
             (4, np.NaN),
             (5, 10)],
             dtype=dtype)

y = np.array([(0, -5),
             (1, 0),
             (2, 5),
             (5, 20),
             (6, 25)],
             dtype=dtype)

# You want an outer join, rather than the default inner join
# (all values are returned, not just ones with a common key)
join = np.lib.recfunctions.join_by('key', x, y, jointype='outer')

# Now we have a structured array with three fields: 'key', 'field1', and 'field2'
# (since 'field' was in both arrays, it renamed x['field'] to 'field1', and
#  y['field'] to 'field2')

# This returns a masked array, if you want it filled with
# NaN's, do the following...
join.fill_value = np.NaN
join = join.filled()

# Just displaying it... Keep in mind that as a structured array,
#  it has one dimension, where each row contains the 3 fields
for row in join: 
    print row
</snippet></ROW><ROW><id>2775008</id><snippet>(0, nan, -5.0)
(1, 2.0, 0.0)
(2, 4.0, 5.0)
(3, 6.0, nan)
(4, nan, nan)
(5, 10.0, 20.0)
(6, nan, 25.0)
</snippet></ROW><ROW><id>2775245</id><snippet>sudo mv /usr/bin/python /usr/bin/python2.4
sudo ln -s /usr/bin/python25 /usr/bin/python
</snippet></ROW><ROW><id>2775245</id><snippet>ln</snippet></ROW><ROW><id>2775245</id><snippet>man ln</snippet></ROW><ROW><id>2775581</id><snippet>def select_distinct(dictionaries, keys):
  seen = set()
  for d in dictionaries:
    v = tuple(d[k] for k in keys)
    if v in seen: continue
    yield v
    seen.add(v)
</snippet></ROW><ROW><id>2775581</id><snippet>.append</snippet></ROW><ROW><id>2775581</id><snippet>yield</snippet></ROW><ROW><id>2775581</id><snippet>for values_tuple in select_distinct(thedicts, ('NAME', 'CLASS')):
    ...
</snippet></ROW><ROW><id>2776392</id><snippet>import time
def expires():
    '''return a UNIX style timestamp representing 5 minutes from now'''
    return int(time.time()+300)
</snippet></ROW><ROW><id>2776906</id><snippet>datetime</snippet></ROW><ROW><id>2776906</id><snippet>from datetime import *
from dateutil.rrule import rrule, YEARLY

# GLOBAL CONFIG
td_8am = timedelta(seconds=3600*8)
td_jobfrequency = timedelta(seconds=3600) # hourly job


# USER DATA::
# birthday: assumed to be retrieved from some data source
bday = date(1960, 5, 12)
# reminder delta: number of days before the b-day
td_delta = timedelta(days=6)
# difference between the user TZ and the server TZ
tz_diff = timedelta(seconds=3600*5) # example: +5h


# from current time minus the job periodicity and the delta
sday = date.today()
# occr will return the first birthday from today on
occr = rrule(YEARLY, bymonth=bday.month, bymonthday=bday.day, dtstart=sday, count=1)[0]

# adjust: subtract the reminder delta, fixed 8h (8am) and tz difference
occr -= (td_delta + td_8am + tz_diff)

# send the reminder when the adjusted occurance is within this job time period
if datetime.now() - td_jobfrequency &lt; occr &lt; datetime.now():
    print occr, '@todo: send the reminder'
else:
    print occr, 'no reminder'
</snippet></ROW><ROW><id>2776906</id><snippet>delta</snippet></ROW><ROW><id>2776906</id><snippet>timezone</snippet></ROW><ROW><id>2776906</id><snippet>birthday</snippet></ROW><ROW><id>2777197</id><snippet># -*- encoding: utf-8 -*-

import json

data = {'name': u'André'}
print('data: {0}'.format(repr(data)))

code = json.dumps(data)
print('code: {0}'.format(repr(code)))

conv = json.loads(code)
print('conv: {0}'.format(repr(conv)))

name = conv['name']
print(u'Name is {0}'.format(name))
</snippet></ROW><ROW><id>2777197</id><snippet>data: {'name': u'Andr\xe9'}
code: '{"name": "Andr\\u00e9"}'
conv: {u'name': u'Andr\xe9'}
Name is André
</snippet></ROW><ROW><id>2777223</id><snippet>def str(self, item):
    print item

    prev, current = None, self.__iter.next()
    while isinstance(current, int):
        print current
        prev, current = current, self.__iter.next()
</snippet></ROW><ROW><id>2777223</id><snippet>prev</snippet></ROW><ROW><id>2777223</id><snippet>class bidirectional_iterator(object):
    def __init__(self, collection):
        self.collection = collection
        self.index = 0

    def next(self):
        try:
            result = self.collection[self.index]
            self.index += 1
        except IndexError:
            raise StopIteration
        return result

    def prev(self):
        self.index -= 1
        if self.index &lt; 0:
            raise StopIteration
        return self.collection[self.index]

    def __iter__(self):
        return self
</snippet></ROW><ROW><id>2777406</id><snippet>\t</snippet></ROW><ROW><id>2777426</id><snippet>stack.push(1 if stack.pop() &gt; stack.pop() else 0)
</snippet></ROW><ROW><id>2777426</id><snippet>&gt;</snippet></ROW><ROW><id>2777426</id><snippet>1</snippet></ROW><ROW><id>2777426</id><snippet>0</snippet></ROW><ROW><id>2777426</id><snippet>stack.pop()</snippet></ROW><ROW><id>2777426</id><snippet>x = stack.pop()
y = stack.pop()
stack.push(1 if x &gt; y else 0)
</snippet></ROW><ROW><id>2777544</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection("www.python.org")
&gt;&gt;&gt; try:
&gt;&gt;&gt;     conn.request("GET", "/index.html")
&gt;&gt;&gt; except Exception as e:
&gt;&gt;&gt;     #take action according to the error.
&gt;&gt;&gt;     print(type(e))
&gt;&gt;&gt; r1 = conn.getresponse()
&gt;&gt;&gt; print r1.status, r1.reason
</snippet></ROW><ROW><id>2777938</id><snippet>shutdown</snippet></ROW><ROW><id>2777938</id><snippet>forward.py</snippet></ROW><ROW><id>2777938</id><snippet>forward_tunnel</snippet></ROW><ROW><id>2777938</id><snippet>ForwardServer(('', local_port), SubHander).serve_forever()
</snippet></ROW><ROW><id>2777938</id><snippet>global theserver
theserver = ForwardServer(('', local_port), SubHander)
theserver.serve_forever()
</snippet></ROW><ROW><id>2777938</id><snippet>forward_tunnel</snippet></ROW><ROW><id>2777938</id><snippet>main</snippet></ROW><ROW><id>2777938</id><snippet>serve_forever</snippet></ROW><ROW><id>2777938</id><snippet>theserver.shutdown()</snippet></ROW><ROW><id>2777984</id><snippet>if not hasattr(os, 'symlink'): os.symlink = None
</snippet></ROW><ROW><id>2778068</id><snippet>y = np.roll(x,1,axis=1)
y[:,0] = 0
</snippet></ROW><ROW><id>2778068</id><snippet>site-packages\core\numeric.py</snippet></ROW><ROW><id>2778211</id><snippet>urllib</snippet></ROW><ROW><id>2778211</id><snippet>urllib2</snippet></ROW><ROW><id>2778211</id><snippet>import os, pprint
for k in os.environ:
    if 'proxy' in k.lower(): # look for proxy environment variables
        print k, os.environ[k]
</snippet></ROW><ROW><id>2778211</id><snippet>ProxyHandler</snippet></ROW><ROW><id>2778211</id><snippet>urllib2.ProxyHandler()</snippet></ROW><ROW><id>2778471</id><snippet>mydict = dict((s[0], s[1:]) for s in myseq)

myseq = tuple(sorted((k,) + v for k, v in mydict.iteritems()))
</snippet></ROW><ROW><id>2778709</id><snippet>class ExtendedQLabel(QLabel):

    def __init(self, parent):
        QLabel.__init__(self, parent)

    def mouseReleaseEvent(self, ev):
        self.emit(SIGNAL('clicked()'))
</snippet></ROW><ROW><id>2779304</id><snippet>ctypes.windll.shell32.IsUserAnAdmin()</snippet></ROW><ROW><id>2779304</id><snippet>ShellExecuteEx</snippet></ROW><ROW><id>2779314</id><snippet>field_start+field_length</snippet></ROW><ROW><id>2779314</id><snippet>field_length</snippet></ROW><ROW><id>2779314</id><snippet>if field_data != ''</snippet></ROW><ROW><id>2779314</id><snippet>if field_data</snippet></ROW><ROW><id>2779341</id><snippet>import datetime

today = datetime.date.today()
weekday = today.weekday()
start_delta = datetime.timedelta(days=weekday)
start_of_week = today - start_delta
week_dates = [start_of_week + datetime.timedelta(days=i) for i in range(7)]
print week_dates
</snippet></ROW><ROW><id>2779341</id><snippet>[datetime.date(2010, 5, 3), datetime.date(2010, 5, 4), datetime.date(2010, 5, 5), datetime.date(2010, 5, 6), datetime.date(2010, 5, 7), datetime.date(2010, 5, 8), datetime.date(2010, 5, 9)]
</snippet></ROW><ROW><id>2779490</id><snippet>import subprocess, time
p = subprocess.Popen(['program1.exe'])
time.sleep(1) # Parameter is in seconds
p.terminate()
p.wait()
</snippet></ROW><ROW><id>2779583</id><snippet>import Skype4Py
import time
from pytify import Spotify

# Create Skype object
skype = Skype4Py.Skype()
skype.Attach()

# Create Spotify object
spotify = Spotify()
spotifyPlaying = spotify.isPlaying()

# Create handler for when Skype call status changes
def on_call_status(call, status):
  if status == Skype4Py.clsInProgress:
    # Save current spotify state
    global spotifyPlaying
    spotifyPlaying = spotify.isPlaying()

    if spotify.isPlaying():
      print "Call started, pausing spotify"
      # Call started, pause Spotify
      spotify.stop()

  elif status == Skype4Py.clsFinished:
    # Call finished, resume Spotify if it was playing
    if spotifyPlaying and not spotify.isPlaying():
      print "Call finished, resuming spotify"
      spotify.playpause()  

skype.OnCallStatus = on_call_status

while True:
  time.sleep(10)
</snippet></ROW><ROW><id>2780096</id><snippet>vim</snippet></ROW><ROW><id>2780096</id><snippet>^L</snippet></ROW><ROW><id>2780266</id><snippet>cal.SetBusType()</snippet></ROW><ROW><id>2780521</id><snippet>phes</snippet></ROW><ROW><id>2780521</id><snippet>find_pixel_pairs.py</snippet></ROW><ROW><id>2780521</id><snippet>phes</snippet></ROW><ROW><id>2780772</id><snippet>pg_dump</snippet></ROW><ROW><id>2780772</id><snippet>psql</snippet></ROW><ROW><id>2780772</id><snippet>pg_dump -t &lt;table&gt;</snippet></ROW><ROW><id>2780776</id><snippet>for tag in tags:
    tag_element = doc.createCDATASection(tag.thetag)
    tags_element.appendChild(tag_element)
</snippet></ROW><ROW><id>2780925</id><snippet>&gt;&gt;&gt; s = "Adam'sApple"
&gt;&gt;&gt; x = s.replace("'", "")
&gt;&gt;&gt; print x
'AdamsApple'
</snippet></ROW><ROW><id>2780968</id><snippet>timeList = [ '0:00:00', '0:00:15', '9:30:56' ]
totalSecs = 0
for tm in timeList:
    timeParts = [int(s) for s in tm.split(':')]
    totalSecs += (timeParts[0] * 60 + timeParts[1]) * 60 + timeParts[2]
totalSecs, sec = divmod(totalSecs, 60)
hr, min = divmod(totalSecs, 60)
print "%d:%02d:%02d" % (hr, min, sec)
</snippet></ROW><ROW><id>2780968</id><snippet>9:31:11
</snippet></ROW><ROW><id>2781402</id><snippet>2to3</snippet></ROW><ROW><id>2781402</id><snippet>2to3</snippet></ROW><ROW><id>2781402</id><snippet>2to3</snippet></ROW><ROW><id>2781488</id><snippet>__init__</snippet></ROW><ROW><id>2781488</id><snippet>django.core.exceptions.MiddlewareNotUsed</snippet></ROW><ROW><id>2781488</id><snippet>__init__</snippet></ROW><ROW><id>2781488</id><snippet>__init__</snippet></ROW><ROW><id>2781506</id><snippet>(AutoOneToOneField),
</snippet></ROW><ROW><id>2781506</id><snippet>(AutoOneToOneField,),
</snippet></ROW><ROW><id>2781645</id><snippet>index</snippet></ROW><ROW><id>2781645</id><snippet>.cgi</snippet></ROW><ROW><id>2781645</id><snippet>.py</snippet></ROW><ROW><id>2781645</id><snippet>index</snippet></ROW><ROW><id>2781645</id><snippet>mod_python.util.FieldStorage</snippet></ROW><ROW><id>2781645</id><snippet>cgi.FieldStorage</snippet></ROW><ROW><id>2781722</id><snippet>bad</snippet></ROW><ROW><id>2781722</id><snippet>foo</snippet></ROW><ROW><id>2781722</id><snippet>good</snippet></ROW><ROW><id>2781722</id><snippet>foo.set(0, 9)</snippet></ROW><ROW><id>2781900</id><snippet>__class__.__name__</snippet></ROW><ROW><id>2781900</id><snippet>__class__</snippet></ROW><ROW><id>2781900</id><snippet>__class__</snippet></ROW><ROW><id>2781900</id><snippet>self</snippet></ROW><ROW><id>2781900</id><snippet>self.__nonexistant_attribute</snippet></ROW><ROW><id>2781900</id><snippet>class C:
    ...
    def report_name(self):
        print C.__name__
</snippet></ROW><ROW><id>2781932</id><snippet>&gt;&gt;&gt; x = [[100,50,39,69,22,23,19,80,94,72],range(10)]
&gt;&gt;&gt; print x
[[100, 50, 39, 69, 22, 23, 19, 80, 94, 72], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
</snippet></ROW><ROW><id>2781932</id><snippet>&gt;&gt;&gt; x[1].sort(key = x[0].__getitem__)
&gt;&gt;&gt; print x
[[100, 50, 39, 69, 22, 23, 19, 80, 94, 72], [6, 4, 5, 2, 1, 3, 9, 7, 8, 0]]
</snippet></ROW><ROW><id>2782125</id><snippet>'\xc3\xa9'</snippet></ROW><ROW><id>2782125</id><snippet>u'\u00e9'</snippet></ROW><ROW><id>2782125</id><snippet>u'\xe9'</snippet></ROW><ROW><id>2782125</id><snippet>u'Andr\u00e9'</snippet></ROW><ROW><id>2782125</id><snippet>u'Andr\xe9'</snippet></ROW><ROW><id>2782125</id><snippet>&gt;&gt;&gt; 'Andr\xc3\xa9'.decode('utf-8')
u'Andr\xe9'
&gt;&gt;&gt; u'Andr\xe9'.encode('utf-8')
'Andr\xc3\xa9'
</snippet></ROW><ROW><id>2782125</id><snippet>print 'Andr\xc3\xa9'</snippet></ROW><ROW><id>2782125</id><snippet>&gt;&gt;&gt; print 'Andr\xc3\xa9'
Andr├⌐
</snippet></ROW><ROW><id>2782342</id><snippet>def cutit(s,n):    
   return s[n:]
</snippet></ROW><ROW><id>2782342</id><snippet>name = "MyFullName"

print cutit(name, 2)   # prints "FullName"
</snippet></ROW><ROW><id>2782385</id><snippet>class Post(Document):
    title = StringField(max_length=120, required=True)
    author = ReferenceField(User)

class TextPost(Post):
    content = StringField()

class ImagePost(Post):
    image_path = StringField()

class LinkPost(Post):
    link_url = StringField()
</snippet></ROW><ROW><id>2782459</id><snippet>userquery</snippet></ROW><ROW><id>2782459</id><snippet>User</snippet></ROW><ROW><id>2782459</id><snippet>userquery = db.GqlQuery("SELECT * FROM User WHERE googleaccount = :1", users.get_current_user())
user = userquery.get() # Gets the first User instance from the query, or None
form = forms.AccountForm(data=request.POST or None, instance=user)
</snippet></ROW><ROW><id>2782748</id><snippet>class A(object):
    def my_method(self):
        # Some complicated processing is done here
        return 'Hi'

print(A.__dict__['my_method'](7))
# Hi
</snippet></ROW><ROW><id>2783017</id><snippet>f()</snippet></ROW><ROW><id>2783017</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-

from multiprocessing import Pool

def f(x):
    return x*x

p = Pool(1)
p.map(f, [1, 2, 3])
</snippet></ROW><ROW><id>2783179</id><snippet>u'Andr\xe9'</snippet></ROW><ROW><id>2783179</id><snippet>'André'</snippet></ROW><ROW><id>2783179</id><snippet>&gt;&gt;&gt; ''.join(chr(ord(c)) for c in u'Andr\xc3\xa9')
'Andr\xc3\xa9'
</snippet></ROW><ROW><id>2783179</id><snippet>&gt;&gt;&gt; ''.join(chr(ord(c)) for c in u'Andr\xc3\xa9').decode('utf8')
u'Andr\xe9'    
</snippet></ROW><ROW><id>2783188</id><snippet>[diff "python"]
        xfuncname = "&lt;regex goes here&gt;"
</snippet></ROW><ROW><id>2783188</id><snippet>PATTERNS("python", "^[ \t]*((class|def)[ \t].*)$",
         /* -- */
         "[a-zA-Z_][a-zA-Z0-9_]*"
         "|[-+0-9.e]+[jJlL]?|0[xX]?[0-9a-fA-F]+[lL]?"
         "|[-+*/&lt;&gt;%&amp;^|=!]=|//=?|&lt;&lt;=?|&gt;&gt;=?|\\*\\*=?"
         "|[^[:space:]|[\x80-\xff]+"),
         /* -- */
</snippet></ROW><ROW><id>2784086</id><snippet>class Foo(object):
    def beep(self):
        print('Hi')

class Bar(object):
    x=1  

bar=Bar()
# bar.beep()
# AttributeError: 'Bar' object has no attribute 'beep'

Bar=type('Bar',(Foo,object),Bar.__dict__.copy())
bar.__class__=Bar
bar.beep()
# Hi
</snippet></ROW><ROW><id>2784205</id><snippet>d</snippet></ROW><ROW><id>2784205</id><snippet>paid[j]</snippet></ROW><ROW><id>2784205</id><snippet>if any(x in paid[j] for x in d): ...
</snippet></ROW><ROW><id>2784205</id><snippet>d</snippet></ROW><ROW><id>2784205</id><snippet>paid[j]</snippet></ROW><ROW><id>2784205</id><snippet>contained = [x for x in d if x in paid[j]]
</snippet></ROW><ROW><id>2784205</id><snippet>contained</snippet></ROW><ROW><id>2784205</id><snippet>d</snippet></ROW><ROW><id>2784205</id><snippet>paid[j]</snippet></ROW><ROW><id>2784205</id><snippet>d</snippet></ROW><ROW><id>2784205</id><snippet>paid[j]</snippet></ROW><ROW><id>2784205</id><snippet>None</snippet></ROW><ROW><id>2784205</id><snippet>firstone = next((x for x in d if x in paid[j]), None)
</snippet></ROW><ROW><id>2784205</id><snippet>in</snippet></ROW><ROW><id>2784205</id><snippet>x in paid[j]</snippet></ROW><ROW><id>2784205</id><snippet>somere.search(paid[j])</snippet></ROW><ROW><id>2784205</id><snippet>somere</snippet></ROW><ROW><id>2784205</id><snippet>d</snippet></ROW><ROW><id>2784671</id><snippet>ctypes</snippet></ROW><ROW><id>2784671</id><snippet>from ctypes import *
containerTYPE = POINTER( c_uint ) * 10 #Array of pointers to UINTs of size 10
containerA = containerTYPE()
containerB = containerTYPE()

for i in range( 10 ):
    val = c_uint( i )
    containerA[ i ] = pointer( val ) 
    containerB[ -1 - i ] = pointer( val ) 

print "A\tB"
for i in range( 10 ):
    print containerA[ i ].contents.value, "\t", containerB[ i ].contents.value

for i in range( 10 ): #affects both arrays
    derefed = containerA[ i ].contents
    derefed.value = i * 2

print
print "A\tB"
for i in range( 10 ):
    print containerA[ i ].contents.value, "\t", containerB[ i ].contents.value
</snippet></ROW><ROW><id>2784671</id><snippet>A       B
0       9
1       8
2       7
3       6
4       5
5       4
6       3
7       2
8       1
9       0

A       B
0       18
2       16
4       14
6       12
8       10
10      8
12      6
14      4
16      2
18      0
</snippet></ROW><ROW><id>2784798</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; 
&gt;&gt;&gt; def handler(type, value, traceback):
&gt;&gt;&gt;     print "Blocked:", value
&gt;&gt;&gt; sys.excepthook = handler
&gt;&gt;&gt; 
&gt;&gt;&gt; def foo(value):
&gt;&gt;&gt;     print value
&gt;&gt;&gt; 
&gt;&gt;&gt; foo(x)
Blocked: name 'x' is not defined
</snippet></ROW><ROW><id>2784798</id><snippet>sys.excepthook</snippet></ROW><ROW><id>2784798</id><snippet>foo()</snippet></ROW><ROW><id>2785001</id><snippet>**kwargs</snippet></ROW><ROW><id>2785001</id><snippet>kwargs = {Sing: SongVal}
foo(**kwargs)
</snippet></ROW><ROW><id>2785036</id><snippet>bt</snippet></ROW><ROW><id>2785036</id><snippet>import pdb; pdb.set_trace()
</snippet></ROW><ROW><id>2785373</id><snippet>range(1,math.floor(math.sqrt(x))+1)</snippet></ROW><ROW><id>2785373</id><snippet>range(math.floor(math.sqrt(x)))</snippet></ROW><ROW><id>2785373</id><snippet>int</snippet></ROW><ROW><id>2785373</id><snippet>math.floor</snippet></ROW><ROW><id>2785383</id><snippet>table = User.__table__
field = table.c["fullname"]
print "Type", field.type
print "Length", field.type.length
print "Nullable", field.nullable
</snippet></ROW><ROW><id>2785571</id><snippet>class MyForm(forms.Form):
    timestamp     = forms.IntegerField(widget=forms.HiddenInput, initial=0)
    #look at the initial = 0

    security_hash = forms.CharField(min_length=40, max_length=40, widget=forms.HiddenInput)


    def clean_timestamp(self):
        """Make sure the delay is over (5 seconds)."""
        ts = self.cleaned_data["timestamp"]
        if timestamp != 0 and not time.time() - ts &gt; 5:
            raise forms.ValidationError("Timestamp check failed")
        return ts

    def clean(self):
        cleaned_data = self.cleaned_data
        if len(self._errors) == 0: #it validates
            cleaned_data["timestamp"] = time.time()
        return cleaned_data
</snippet></ROW><ROW><id>2785733</id><snippet>list</snippet></ROW><ROW><id>2785733</id><snippet>url = 'domain.com/'
for domain in list:
    if url.startswith(domain):
        ... do something ...
</snippet></ROW><ROW><id>2785733</id><snippet>url = 'domain.com/'
for domain in list:
    domain_minus_www = domain
    if domain_minus_www.startswith('www.'):
        domain_minus_www = domain_minus_www[4:]
    if url.startswith(domain) or url.startswith(domain_minus_www):
        ... do something ...
</snippet></ROW><ROW><id>2785797</id><snippet>minidom</snippet></ROW><ROW><id>2785797</id><snippet>xml.dom</snippet></ROW><ROW><id>2785797</id><snippet>xml.dom</snippet></ROW><ROW><id>2785797</id><snippet>xml.dom</snippet></ROW><ROW><id>2785797</id><snippet>nodeValue</snippet></ROW><ROW><id>2785797</id><snippet>&gt;&gt;&gt; import xml.dom.minidom as xdm
&gt;&gt;&gt; dom = xdm.parseString('&lt;foo bar="baz"/&gt;')
&gt;&gt;&gt; root = dom.documentElement
&gt;&gt;&gt; atr = root.getAttributeNode('bar')
&gt;&gt;&gt; atr.nodeValue
u'baz'
</snippet></ROW><ROW><id>2785797</id><snippet>nodeValue</snippet></ROW><ROW><id>2785797</id><snippet>value</snippet></ROW><ROW><id>2785797</id><snippet>nodeValue</snippet></ROW><ROW><id>2785797</id><snippet>minidom</snippet></ROW><ROW><id>2785797</id><snippet>xml.etree.cElementTree</snippet></ROW><ROW><id>2785797</id><snippet>minidom</snippet></ROW><ROW><id>2785908</id><snippet>import time

def waituntil(somepredicate, timeout, period=0.25):
  mustend = time.time() + timeout
  while time.time() &lt; mustend:
    if somepredicate(): return True
    time.sleep(period)
  return False
</snippet></ROW><ROW><id>2785908</id><snippet>somepredicate</snippet></ROW><ROW><id>2785908</id><snippet>and</snippet></ROW><ROW><id>2785908</id><snippet>threading.Event</snippet></ROW><ROW><id>2785959</id><snippet>itertools.repeat()</snippet></ROW><ROW><id>2785959</id><snippet>L = list(itertools.repeat("a", 20)) # 20 copies of "a"

L = list(itertools.repeat(10, 20))  # 20 copies of 10

L = list(itertools.repeat(['x','y'], 20)) # 20 copies of ['x','y']
</snippet></ROW><ROW><id>2785959</id><snippet>L = [['x','y'] for i in range(20)]
</snippet></ROW><ROW><id>2785959</id><snippet>xrange()</snippet></ROW><ROW><id>2785959</id><snippet>range()</snippet></ROW><ROW><id>2786321</id><snippet>.key().id()</snippet></ROW><ROW><id>2786321</id><snippet>None</snippet></ROW><ROW><id>2786321</id><snippet>Key</snippet></ROW><ROW><id>2786529</id><snippet>python</snippet></ROW><ROW><id>2786529</id><snippet>Python</snippet></ROW><ROW><id>2786529</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>2786529</id><snippet>title = win32gui.GetWindowText(win32gui.GetForegroundWindow())
if re.search(title, "python", re.IGNORECASE):
    print "Found it!"
</snippet></ROW><ROW><id>2786529</id><snippet>if title.lower().find("python") &gt;= 0:
</snippet></ROW><ROW><id>2787064</id><snippet>import re
data = """part 1;"this is ; part 2;";'this is ; part 3';part 4;this "is ; part" 5"""
PATTERN = re.compile(r'''((?:[^;"']|"[^"]*"|'[^']*')+)''')
print PATTERN.split(data)[1::2]
</snippet></ROW><ROW><id>2787064</id><snippet>['part 1', '"this is ; part 2;"', "'this is ; part 3'", 'part 4', 'this "is ; part" 5']
</snippet></ROW><ROW><id>2787842</id><snippet>thread = Thread.get(db.Key.from_path('Thread', int(id)))
if thread:
  is_member = thread.user_is_member(user)
else:
  is_member = False
</snippet></ROW><ROW><id>2787842</id><snippet>thread = Thread.get(db.Key.from_path('Thread', int(id)))
is_member = thread.user_is_member(user) if thread else False
</snippet></ROW><ROW><id>2788014</id><snippet>Session.merge()</snippet></ROW><ROW><id>2788014</id><snippet>Session.add()</snippet></ROW><ROW><id>2789043</id><snippet>checkbutton.get_active()</snippet></ROW><ROW><id>2789434</id><snippet>strace</snippet></ROW><ROW><id>2789434</id><snippet>strace -f python my_script.py &gt; strace.out 2&gt;&amp;1
</snippet></ROW><ROW><id>2789542</id><snippet>@</snippet></ROW><ROW><id>2789542</id><snippet>&gt;&gt;&gt; class A(object):
...     def test(self):
...         print "orig"
...
&gt;&gt;&gt; first_a = A()
&gt;&gt;&gt; first_a.test()
orig
&gt;&gt;&gt; def decorated_test(fn):
...     def new_test(*args, **kwargs):
...         fn(*args, **kwargs)
...         print "new"
...     return new_test
...
&gt;&gt;&gt; A.test = decorated_test(A.test)
&gt;&gt;&gt; new_a = A()
&gt;&gt;&gt; new_a.test()
orig
new
&gt;&gt;&gt; first_a.test()
orig
new
</snippet></ROW><ROW><id>2789542</id><snippet>args</snippet></ROW><ROW><id>2789542</id><snippet>kwargs</snippet></ROW><ROW><id>2790000</id><snippet>from selenium import selenium

sel = selenium("localhost", 4444, "*firefox", "http://www.google.com/webhp")
sel.start()

sel.open("http://www.google.com/webhp")
sel.type("q", "hello world")
sel.click("btnG")
sel.wait_for_page_to_load(5000)
assert "hello world - Google Search" == sel.get_title()
sel.stop()
</snippet></ROW><ROW><id>2790051</id><snippet>cls</snippet></ROW><ROW><id>2790051</id><snippet>__init__</snippet></ROW><ROW><id>2790051</id><snippet>cls = type(cls.__name__, (cls, EmbeddedDocument), {'a': FloatField(required=True), 'b': FloatField(required=True)})
</snippet></ROW><ROW><id>2790051</id><snippet>type()</snippet></ROW><ROW><id>2790057</id><snippet>unittest</snippet></ROW><ROW><id>2790122</id><snippet>tag_bind(item, event=None, callback, add=None)</snippet></ROW><ROW><id>2790122</id><snippet>from Tkinter import * 

def onObjectClick(event):                  
  print 'Got object click', event.x, event.y,
  print event.widget.find_closest(event.x, event.y)  

root = Tk()
canv = Canvas(root, width=100, height=100)
obj1Id = canv.create_line(0, 30, 100, 30, width=5, tags="obj1Tag")
obj2Id = canv.create_text(50, 70, text='Click', tags='obj2Tag')

canv.tag_bind(obj1Id, '&lt;ButtonPress-1&gt;', onObjectClick)       
canv.tag_bind('obj2Tag', '&lt;ButtonPress-1&gt;', onObjectClick)   
print 'obj1Id: ', obj1Id
print 'obj2Id: ', obj2Id
canv.pack()
root.mainloop()
</snippet></ROW><ROW><id>2790177</id><snippet>from datetime import datetime

fmt = '%Y-%m-%d %H:%M:%S'
d1 = datetime.strptime('2010-01-01 17:31:22', fmt)
d2 = datetime.strptime('2010-01-03 17:31:22', fmt)

print (d2-d1).days * 24 * 60
</snippet></ROW><ROW><id>2790604</id><snippet>import cherrypy

class HelloWorld(object):
    def index(self):
        return "Hello World!"
    index.exposed = True

cherrypy.quickstart(HelloWorld())
</snippet></ROW><ROW><id>2790604</id><snippet>ftplib</snippet></ROW><ROW><id>2790623</id><snippet>input()</snippet></ROW><ROW><id>2790623</id><snippet>input()</snippet></ROW><ROW><id>2790623</id><snippet>raw_input()</snippet></ROW><ROW><id>2790884</id><snippet>import cPickle

class Foo(object):
    def __init__(self):
        self.mod=cPickle

foo=Foo()
with file('/tmp/test.out', 'w') as f:
    cPickle.dump(foo, f) 

# TypeError: can't pickle module objects
</snippet></ROW><ROW><id>2791112</id><snippet>Hypertext Transfer Protocol
    GET / HTTP/1.1\r\n
        [Expert Info (Chat/Sequence): GET / HTTP/1.1\r\n]
            [Message: GET / HTTP/1.1\r\n]
            [Severity level: Chat]
            [Group: Sequence]
        Request Method: GET
        Request URI: /
        Request Version: HTTP/1.1
    Accept-Encoding: identity\r\n
    Host: api.apptrackr.org\r\n
    Connection: close\r\n
    User-Agent: Python-urllib/2.6\r\n
    \r\n
</snippet></ROW><ROW><id>2791112</id><snippet>Hypertext Transfer Protocol
    POST / HTTP/1.1\r\n
        [Expert Info (Chat/Sequence): POST / HTTP/1.1\r\n]
            [Message: POST / HTTP/1.1\r\n]
            [Severity level: Chat]
            [Group: Sequence]
        Request Method: POST
        Request URI: /
        Request Version: HTTP/1.1
    User-Agent: PycURL/7.19.5\r\n
    Host: api.website.com\r\n
    Accept: */*\r\n
    Content-Length: 365\r\n
        [Content length: 365]
    Content-Type: application/x-www-form-urlencoded\r\n
    \r\n
Line-based text data: application/x-www-form-urlencoded
    [truncated]         request=%7B%22enc_key%22%3A%22o37vOsNetKgprRE0VsBYefYViP4%2ByB3pjxfkfCYtpgiQ%2ByxONgkhhsxtqAwaXwCrrgx%2BPDuDtMRZNI1ez//4Zw%3D%3D%22%2C%22format%22%3A%22RSA_RC4_Sealed%22%2C%22profile%22%3A%22Ldn%22%2C%22request%22%3A%22bQ%2BHm/
</snippet></ROW><ROW><id>2791211</id><snippet>Python 2.5.2 (r252:60911, Apr 15 2008, 11:28:25)
[GCC 3.4.6 20060404 (Red Hat 3.4.6-9)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; startdate = '2002-04-20'
&gt;&gt;&gt; splitdate = startdate.split('-')
&gt;&gt;&gt; type(splitdate[0])
&lt;type 'str'&gt;
&gt;&gt;&gt; splitdate[2]+splitdate[1]+splitdate[0]
'20042002'
</snippet></ROW><ROW><id>2791336</id><snippet>def func2(self, aFunc = None):
    if aFunc is None:
        aFunc = self.func1
    ...
</snippet></ROW><ROW><id>2791681</id><snippet>import win32gui, win32con

hwnd = win32gui.GetForegroundWindow()
win32gui.ShowWindow(hwnd, win32con.SW_MAXIMIZE)
</snippet></ROW><ROW><id>2791812</id><snippet>import win32gui

toplist = []
winlist = []
def enum_callback(hwnd, results):
    winlist.append((hwnd, win32gui.GetWindowText(hwnd)))

win32gui.EnumWindows(enum_callback, toplist)
firefox = [(hwnd, title) for hwnd, title in winlist if 'firefox' in title.lower()]
# just grab the first window that matches
firefox = firefox[0]
# use the window handle to set focus
win32gui.SetForegroundWindow(firefox[0])
</snippet></ROW><ROW><id>2791812</id><snippet>import win32con
win32gui.ShowWindow(firefox[0], win32con.SW_MINIMIZE)
</snippet></ROW><ROW><id>2791876</id><snippet>class MyFunctionClass
{
  public:
    MyFunctionClass(int Param)
    ...
};

class MyAlgorithmClass
{
  public:
    MyAlgorithmClass(myfunctionclass&amp; Func)
    ...
};
</snippet></ROW><ROW><id>2791876</id><snippet>    void* CreateFunction(int Param)
    {
      return new MyFunctionClass(Param);
    }

    void DeleteFunction(void* pFunc)
    {
        if (pFunc)
            delete (MyFunctionClass*)pFunc;
    }

    void* CreateAlgorithm(void* pFunc)
    {
      return new MyAlgorithmClass(*(MyFunctionClass*)pFunc)
    }

    void DelteAlgorithm(void* pAlg)
    {
       if (pAlg)
           delete (MyAlgorithmClass*)pAlg;
    }
</snippet></ROW><ROW><id>2791979</id><snippet>import win32com.client

shell = win32com.client.Dispatch("WScript.Shell")
shell.SendKeys("^a") # CTRL+A may "select all" depending on which window's focused
shell.SendKeys("{DELETE}") # Delete selected text?  Depends on context. :P
shell.SendKeys("{TAB}") #Press tab... to change focus or whatever
</snippet></ROW><ROW><id>2792030</id><snippet>httplib</snippet></ROW><ROW><id>2792030</id><snippet>args</snippet></ROW><ROW><id>2792030</id><snippet>httplib.HTTPException</snippet></ROW><ROW><id>2792030</id><snippet>args</snippet></ROW><ROW><id>2792030</id><snippet>httplib.HTTPConnection</snippet></ROW><ROW><id>2792030</id><snippet>getresponse</snippet></ROW><ROW><id>2792030</id><snippet>HTTPResponse</snippet></ROW><ROW><id>2792030</id><snippet>status</snippet></ROW><ROW><id>2792030</id><snippet>reason</snippet></ROW><ROW><id>2792030</id><snippet>404</snippet></ROW><ROW><id>2792030</id><snippet>500</snippet></ROW><ROW><id>2792030</id><snippet>httplib.HTTPConnection.response_class</snippet></ROW><ROW><id>2792041</id><snippet>+</snippet></ROW><ROW><id>2792041</id><snippet>a + small + number + of + strings + "is pretty fast"
</snippet></ROW><ROW><id>2792041</id><snippet>s = ''
for line in anything:
   s += line 
</snippet></ROW><ROW><id>2792041</id><snippet>s = ''.join([line for line in anything])
</snippet></ROW><ROW><id>2792041</id><snippet>+</snippet></ROW><ROW><id>2792041</id><snippet>'%s%line'</snippet></ROW><ROW><id>2792041</id><snippet>+</snippet></ROW><ROW><id>2792041</id><snippet>s = 'Error - unexpected string' + 42
</snippet></ROW><ROW><id>2792501</id><snippet>except</snippet></ROW><ROW><id>2792501</id><snippet>else</snippet></ROW><ROW><id>2792501</id><snippet>try</snippet></ROW><ROW><id>2792501</id><snippet>except</snippet></ROW><ROW><id>2792501</id><snippet>else</snippet></ROW><ROW><id>2792501</id><snippet>try:
    # execute some code
except:
    # if that code raises an error, go here
    # (this part is just regular code)
else:
    # if the "try" code did not raise an error, go here
    # (this part is also just regular code)
</snippet></ROW><ROW><id>2792501</id><snippet>else</snippet></ROW><ROW><id>2792501</id><snippet>try</snippet></ROW><ROW><id>2792501</id><snippet>try:
    ...
except:
    ...
else:
    try:
        ...
    except:
        ...
</snippet></ROW><ROW><id>2792501</id><snippet>except</snippet></ROW><ROW><id>2792501</id><snippet>try</snippet></ROW><ROW><id>2792501</id><snippet>try:
    ...
except:
    try:
        ...
    except:
        ...
else:
    ...
</snippet></ROW><ROW><id>2792575</id><snippet>for i in [0, 1]:
    try:
        print '10 / %i: ' % i, 10 / i
    except:
        print 'Uh-Oh'
    else:
        print 'Yay!'
</snippet></ROW><ROW><id>2792624</id><snippet>json</snippet></ROW><ROW><id>2792624</id><snippet>urllib.request</snippet></ROW><ROW><id>2792699</id><snippet>dev_appserver.py</snippet></ROW><ROW><id>2792699</id><snippet>appcfg.py</snippet></ROW><ROW><id>2792896</id><snippet>def __str__(self):
    return "Car Type \n"+"mpg: %.1f \n" % self.mpg + \
           "hp: %.2f \n" %(self.hp) + "pc: %i \n" %self.pc + \
           "unit cost: $%.2f \n" %(self.cost) + "price: $%.2f "%(self.price)
</snippet></ROW><ROW><id>2792896</id><snippet>def foo():
  return \
   1
</snippet></ROW><ROW><id>2792896</id><snippet>foo()</snippet></ROW><ROW><id>2792949</id><snippet>import imaplib
import email

def extract_body(payload):
    if isinstance(payload,str):
        return payload
    else:
        return '\n'.join([extract_body(part.get_payload()) for part in payload])

conn = imaplib.IMAP4_SSL("imap.gmail.com", 993)
conn.login("user", "password")
conn.select()
typ, data = conn.search(None, 'UNSEEN')
try:
    for num in data[0].split():
        typ, msg_data = conn.fetch(num, '(RFC822)')
        for response_part in msg_data:
            if isinstance(response_part, tuple):
                msg = email.message_from_string(response_part[1])
                subject=msg['subject']                   
                print(subject)
                payload=msg.get_payload()
                body=extract_body(payload)
                print(body)
        typ, response = conn.store(num, '+FLAGS', r'(\Seen)')
finally:
    try:
        conn.close()
    except:
        pass
    conn.logout()
</snippet></ROW><ROW><id>2792964</id><snippet>for line in f:
    mo = re.match(r'^(\S+)\s+"(.*?)"\s*$')
    if not mo: continue
    key, value = mo.groups()
    setattr(objInstance, key, value)
</snippet></ROW><ROW><id>2792964</id><snippet>key</snippet></ROW><ROW><id>2792964</id><snippet>key</snippet></ROW><ROW><id>2792964</id><snippet>translate.get(key, 'other')</snippet></ROW><ROW><id>2792964</id><snippet>translate</snippet></ROW><ROW><id>2793087</id><snippet>Res</snippet></ROW><ROW><id>2793087</id><snippet>__init__</snippet></ROW><ROW><id>2793087</id><snippet>defaults</snippet></ROW><ROW><id>2793087</id><snippet>defaults</snippet></ROW><ROW><id>2793087</id><snippet>Res</snippet></ROW><ROW><id>2793341</id><snippet>list.remove</snippet></ROW><ROW><id>2793341</id><snippet>&gt;&gt;&gt; a = [1, 2, 3, 4]
&gt;&gt;&gt; a.remove(2) # 2 is not the position!
&gt;&gt;&gt; print a
[1, 3, 4]
</snippet></ROW><ROW><id>2793341</id><snippet>&gt;&gt;&gt; a = [1, 2, 3, 4, 2, 3, 4, 2, 7, 2]
&gt;&gt;&gt; a = [x for x in a if x != 2]
&gt;&gt;&gt; print a
[1, 3, 4, 3, 4, 7]
</snippet></ROW><ROW><id>2793801</id><snippet>RES = [abs(L[i]-L[i+1]) for i in range(len(L)-1)]
</snippet></ROW><ROW><id>2793972</id><snippet>except Exception</snippet></ROW><ROW><id>2793972</id><snippet>BaseException</snippet></ROW><ROW><id>2793972</id><snippet>raise</snippet></ROW><ROW><id>2793972</id><snippet>TypeError</snippet></ROW><ROW><id>2793972</id><snippet>BaseException</snippet></ROW><ROW><id>2794471</id><snippet>import urllib2

r = urllib2.urlopen('https://graph.facebook.com')
print r.info()
html = r.read()
</snippet></ROW><ROW><id>2794617</id><snippet>bool</snippet></ROW><ROW><id>2794617</id><snippet>str</snippet></ROW><ROW><id>2794617</id><snippet>str</snippet></ROW><ROW><id>2794617</id><snippet>self.columnButton = \
    gtk.TreeViewColumn ('Enabled', self.buttonRenderer, 
                        active = 0)  # 0 is the tree store column index
</snippet></ROW><ROW><id>2794617</id><snippet>editable</snippet></ROW><ROW><id>2794617</id><snippet>True</snippet></ROW><ROW><id>2794617</id><snippet>changed</snippet></ROW><ROW><id>2794617</id><snippet>editing-done</snippet></ROW><ROW><id>2794847</id><snippet>EXPR : NUMBER
        | STRING
        | LPAREN funcname EXPR_REPEAT RPAREN
EXPR_REPEAT: /*nothing*/
        | EXPR EXPR_REPEAT
</snippet></ROW><ROW><id>2794927</id><snippet>iteritems()</snippet></ROW><ROW><id>2794927</id><snippet>itervalues()</snippet></ROW><ROW><id>2794927</id><snippet>{% for partName, partType in product.parts.iteritems %}
    &lt;p&gt;{{ partName }}&lt;/p&gt;
    {% for part in partType %}
        &lt;p&gt;{{ part }}&lt;/p&gt;
    {% endfor %}
  ....
</snippet></ROW><ROW><id>2795169</id><snippet>def sanitize(mystring):
  for word in mystring.split(" "):
    if valid_url(word):
      mystring = mystring.replace(word, get_title(word))
  return mystring
</snippet></ROW><ROW><id>2795250</id><snippet>platform.python_implementation</snippet></ROW><ROW><id>2795396</id><snippet>urlparse.urlsplit</snippet></ROW><ROW><id>2795396</id><snippet>path</snippet></ROW><ROW><id>2795396</id><snippet>/</snippet></ROW><ROW><id>2795396</id><snippet>import urllib, urlparse

split = urlparse.urlsplit(url)
filename = "/tmp/" + split.path.split("/")[-1]
urllib.urlretrieve(url, filename)
</snippet></ROW><ROW><id>2795489</id><snippet>tag= node.tagName
d[tag]= node
</snippet></ROW><ROW><id>2795489</id><snippet>tagName</snippet></ROW><ROW><id>2795841</id><snippet>import ctypes  

class BarHeader(ctypes.Structure):
   _fields_ = [("version", ctypes.c_uint)]


header = BarHeader.from_buffer_copy("\x01\x00\x00\x00")
print header.version #prints 1 on little endian
</snippet></ROW><ROW><id>2795841</id><snippet>import ctypes
import array

class BarHeader(ctypes.Structure):
   _fields_ = [
      ("id", ctypes.c_char * 4),
      ("version", ctypes.c_uint32)]

bar_file = open("data.bar", "rb")

bytearray = array.array('b')
bytearray.fromfile(bar_file, ctypes.sizeof(BarHeader))

header = BarHeader.from_buffer_copy(bytearray)

print header.id
print header.version
</snippet></ROW><ROW><id>2796005</id><snippet>x = decimal.Decimal('8.00000000000000000000001')
with decimal.localcontext() as ctx:
    ctx.prec=100000000000000000
    ctx.rounding=decimal.ROUND_CEILING
    y = x.to_integral_exact()
</snippet></ROW><ROW><id>2796012</id><snippet>pyc</snippet></ROW><ROW><id>2796012</id><snippet>skip_archive</snippet></ROW><ROW><id>2796012</id><snippet>compressed</snippet></ROW><ROW><id>2796012</id><snippet>pyc</snippet></ROW><ROW><id>2796012</id><snippet>py</snippet></ROW><ROW><id>2796012</id><snippet>py2exe</snippet></ROW><ROW><id>2796012</id><snippet>byte_compile</snippet></ROW><ROW><id>2796012</id><snippet>build_exe.py</snippet></ROW><ROW><id>2796012</id><snippet>compile</snippet></ROW><ROW><id>2796012</id><snippet>copy_file</snippet></ROW><ROW><id>2796012</id><snippet>dfile</snippet></ROW><ROW><id>2796012</id><snippet>.py</snippet></ROW><ROW><id>2796012</id><snippet>.pyc</snippet></ROW><ROW><id>2796012</id><snippet>.pyo</snippet></ROW><ROW><id>2796012</id><snippet>py2exe</snippet></ROW><ROW><id>2796012</id><snippet>optimize</snippet></ROW><ROW><id>2796043</id><snippet>$</snippet></ROW><ROW><id>2796043</id><snippet>^</snippet></ROW><ROW><id>2796043</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>2796043</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>2796043</id><snippet>\w+\._methods_\s=\s\[$(?:\n^.+$)*\n^\]$
</snippet></ROW><ROW><id>2796043</id><snippet>&gt;&gt;&gt; s = '''...\nIXMLSerializerAlt._methods_ = [\n    COMMETHOD([helpstring(u'Loads an object from an XML string.')], HRESULT, 'LoadFromString',\n              ( ['in'], BSTR, 'XML' ),\n              ( ['in'], BSTR, 'TypeName' ),\n              ( ['in'], BSTR, 'TypeNamespaceURI' ),\n              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'obj' )),\n]\n...'''
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'^\w+\._methods_\s=\s\[$.*?^\]$', s, re.DOTALL | re.MULTILINE)
["IXMLSerializerAlt._methods_ = [\n    COMMETHOD([helpstring(u'Loads an object from an XML string.')], HRESULT, 'LoadFromString',\n              ( ['in'], BSTR, 'XML' ),\n              ( ['in'], BSTR, 'TypeName' ),\n              ( ['in'], BSTR, 'TypeNamespaceURI' ),\n              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'obj' )),\n]"]
</snippet></ROW><ROW><id>2796123</id><snippet>def __unicode__(self):
        return full_name
</snippet></ROW><ROW><id>2796123</id><snippet>def __unicode__(self):
        return self.full_name
</snippet></ROW><ROW><id>2796571</id><snippet>fetchall</snippet></ROW><ROW><id>2796571</id><snippet>for a,b,c in cursor.fetchone():
    # process it
</snippet></ROW><ROW><id>2796636</id><snippet>pickle</snippet></ROW><ROW><id>2796636</id><snippet>/tmp/locks/&lt;username&gt;</snippet></ROW><ROW><id>2796916</id><snippet>def decorate(f):
    def wrapped_function():
        print("Function is being called")
        f()
        print("Function call is finished")
    return wrapped_function

@decorate
def my_function():
    print("Hello world")

my_function()
</snippet></ROW><ROW><id>2796916</id><snippet>wrapped_function</snippet></ROW><ROW><id>2796916</id><snippet>def make_counter():
    next_value = 0
    def return_next_value():
        nonlocal next_value
        val = next_value
        next_value += 1
        return val
    return return_next_value

my_first_counter = make_counter()
my_second_counter = make_counter()
print(my_first_counter())
print(my_second_counter())
print(my_first_counter())
print(my_second_counter())
print(my_first_counter())
print(my_second_counter())
</snippet></ROW><ROW><id>2796916</id><snippet>import sys
w = sys.stdout.write
w("Hello\n")
</snippet></ROW><ROW><id>2796916</id><snippet>w</snippet></ROW><ROW><id>2796916</id><snippet>sys.stdout</snippet></ROW><ROW><id>2796933</id><snippet>foo="$(scriptthatprintssomething)"
</snippet></ROW><ROW><id>2796933</id><snippet>print</snippet></ROW><ROW><id>2796933</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>2796933</id><snippet>foo="$(python scriptthatprintssomething.py)"
</snippet></ROW><ROW><id>2796995</id><snippet>TopDocs topDocs = searcher.search(query, filter, 1);
</snippet></ROW><ROW><id>2796995</id><snippet>topDocs.totalHits</snippet></ROW><ROW><id>2797120</id><snippet>x = x + 1</snippet></ROW><ROW><id>2797120</id><snippet>x</snippet></ROW><ROW><id>2797120</id><snippet>x[0] = 4</snippet></ROW><ROW><id>2797120</id><snippet>x.__setitem__(0, 4)</snippet></ROW><ROW><id>2797151</id><snippet>class A(object):
    def a1(self):
        """ This is an instance method. """
        print "Hello from an instance of A"

    @classmethod
    def a2(cls):
        """ This a classmethod. """
        print "Hello from class A"

class B(object):
    def b1(self):
        print A().a1() # =&gt; prints 'Hello from an instance of A'
        print A.a2() # =&gt; 'Hello from class A'
</snippet></ROW><ROW><id>2797151</id><snippet>class A(object):
    def a1(self):
        print "Hello from Superclass"

class B(A):
    pass

B().a1() # =&gt; prints 'Hello from Superclass'
</snippet></ROW><ROW><id>2797175</id><snippet>dec</snippet></ROW><ROW><id>2797175</id><snippet>disp</snippet></ROW><ROW><id>2797175</id><snippet>dec</snippet></ROW><ROW><id>2797175</id><snippet>a.disp</snippet></ROW><ROW><id>2797175</id><snippet>Test</snippet></ROW><ROW><id>2797175</id><snippet>__call__</snippet></ROW><ROW><id>2797175</id><snippet>f</snippet></ROW><ROW><id>2797175</id><snippet>"Message"</snippet></ROW><ROW><id>2797175</id><snippet>a = Test()
print a.disp
# disp &lt;bound method Test.wrap of &lt;__main__.Test instance at 0xb739df0c&gt;&gt;
</snippet></ROW><ROW><id>2797175</id><snippet>a = Test()
print a.disp
# disp &lt;__main__.dec instance at 0xb739deec&gt;
</snippet></ROW><ROW><id>2797320</id><snippet>AdForm</snippet></ROW><ROW><id>2797320</id><snippet>fields</snippet></ROW><ROW><id>2797320</id><snippet>Meta</snippet></ROW><ROW><id>2797320</id><snippet>class AdFormLite(AdForm):
    class Meta:
        fields = ['category', 'sub_category']
</snippet></ROW><ROW><id>2797320</id><snippet>ModelForm</snippet></ROW><ROW><id>2797320</id><snippet>fields</snippet></ROW><ROW><id>2797378</id><snippet>def test():
    while True:
        a=5
        if a&lt;6:
            break
    print("hello")
</snippet></ROW><ROW><id>2797378</id><snippet>while</snippet></ROW><ROW><id>2797378</id><snippet>print</snippet></ROW><ROW><id>2797466</id><snippet>def RandomHtml():
    yield '&lt;html&gt;&lt;body&gt;'
    yield '&lt;body&gt;'
    yield RandomBody()
    yield '&lt;/body&gt;&lt;/html&gt;'

def RandomBody():
    yield RandomSection()
    if random.randrange(2) == 0:
        yield RandomBody()

def RandomSection():
    yield '&lt;h1&gt;'
    yield RandomSentence()
    yield '&lt;/h1&gt;'
    sentences = random.randrange(5, 20)
    for _ in xrange(sentences):
         yield RandomSentence()

def RandomSentence():
    words = random.randrange(5, 15)
    yield (' '.join(RandomWord() for _ in xrange(words)) + '.').capitalize()

def RandomWord():
    chars = random.randrange(2, 10)
    return ''.join(random.choice(string.ascii_lowercase) for _ in xrange(chars))

def Output(generator):
    if isinstance(generator, str):
        print generator
    else:
        for g in generator: Output(g)

Output(RandomHtml())
</snippet></ROW><ROW><id>2797698</id><snippet>import pkgutil
# this is the package we are inspecting -- for example 'email' from stdlib
import email
package = email
for importer, modname, ispkg in pkgutil.iter_modules(package.__path__):
    print "Found submodule %s (is a package: %s)" % (modname, ispkg)
</snippet></ROW><ROW><id>2797698</id><snippet>import pkgutil
for importer, modname, ispkg in pkgutil.walk_packages(path=None, onerror=lambda x: None):
    print(modname)
</snippet></ROW><ROW><id>2797799</id><snippet>FontProperties(fname='/path/to/font.ttf')</snippet></ROW><ROW><id>2797829</id><snippet>import re
data = "date=2010-05-09,time=16:41:27,device_id=FE-2KA3F09000049,log_id=0400147717,log_part=00,type=statistics,subtype=n/a,pri=information,session_id=o49CedRc021772,from=\"prvs=4745cd07e1=example@example.org\",mailer=\"mta\",client_name=\"example.org,[194.177.17.24]\",resolved=OK,to=\"example@example.org\",direction=\"in\",message_length=6832079,virus=\"\",disposition=\"Accept\",classifier=\"Not,Spam\",subject=\"=?windows-1255?B?Rlc6IEZ3OiDg5fDp5fog+fno5fog7Pf46eHp7S3u4+Tp7SE=?=\""
pattern = r"""(\w+)=((?:"(?:\\.|[^\\"])*"|'(?:\\.|[^\\'])*'|[^\\,"'])+)"""
print(re.findall(pattern, data))
</snippet></ROW><ROW><id>2797829</id><snippet>[('date', '2010-05-09'), ('time', '16:41:27'), ('device_id', 'FE-2KA3F09000049'),
 ('log_id', '0400147717'), ('log_part', '00'), ('type', 'statistics'),
 ('subtype', 'n/a'), ('pri', 'information'), ('session_id', 'o49CedRc021772'),
 ('from', '"prvs=4745cd07e1=example@example.org"'), ('mailer', '"mta"'),
 ('client_name', '"example.org,[194.177.17.24]"'), ('resolved', 'OK'),
 ('to', '"example@example.org"'), ('direction', '"in"'),
 ('message_length', '6832079'), ('virus', '""'), ('disposition', '"Accept"'),
 ('classifier', '"Not,Spam"'), 
 ('subject', '"=?windows-1255?B?Rlc6IEZ3OiDg5fDp5fog+fno5fog7Pf46eHp7S3u4+Tp7SE=?="')
]
</snippet></ROW><ROW><id>2797829</id><snippet>mystring.strip("'\"")</snippet></ROW><ROW><id>2797829</id><snippet>a="She said \"Hi!\""</snippet></ROW><ROW><id>2797829</id><snippet>(\w+)=((?:"(?:\\.|[^\\"])*"|'(?:\\.|[^\\'])*'|[^\\,"'])+)
</snippet></ROW><ROW><id>2797829</id><snippet>(\w+)</snippet></ROW><ROW><id>2797829</id><snippet>=</snippet></ROW><ROW><id>2797829</id><snippet>=</snippet></ROW><ROW><id>2797829</id><snippet>(</snippet></ROW><ROW><id>2797829</id><snippet>(?:</snippet></ROW><ROW><id>2797829</id><snippet>"(?:\\.|[^\\"])*"</snippet></ROW><ROW><id>2797829</id><snippet>|</snippet></ROW><ROW><id>2797829</id><snippet>'(?:\\.|[^\\'])*'</snippet></ROW><ROW><id>2797829</id><snippet>|</snippet></ROW><ROW><id>2797829</id><snippet>[^\\,"']</snippet></ROW><ROW><id>2797829</id><snippet>)+</snippet></ROW><ROW><id>2797829</id><snippet>)</snippet></ROW><ROW><id>2797969</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>2798392</id><snippet>urllib2.urlopen(url[, data][, timeout])
</snippet></ROW><ROW><id>2798497</id><snippet>zip-safe</snippet></ROW><ROW><id>2798497</id><snippet>.egg</snippet></ROW><ROW><id>2798497</id><snippet>not-zip-safe</snippet></ROW><ROW><id>2798497</id><snippet>.egg</snippet></ROW><ROW><id>2798497</id><snippet>.egg</snippet></ROW><ROW><id>2798497</id><snippet>zip_safe</snippet></ROW><ROW><id>2798497</id><snippet>setup()</snippet></ROW><ROW><id>2798646</id><snippet>\r\n</snippet></ROW><ROW><id>2799009</id><snippet>class TestPreReqs(unittest.TestCase):
    ...

def create_test (pair):
    def do_test_expected(self):
        self.assertEqual(under_test(pair[0]), pair[1])
    return do_test_expected

for k, pair in enumerate ([(23, 55), (4, 32)]):
    test_method = create_test (pair)
    test_method.__name__ = 'test_expected_%d' % k
    setattr (TestPreReqs, test_method.__name__, test_method)
</snippet></ROW><ROW><id>2799009</id><snippet>TestPreReqs</snippet></ROW><ROW><id>2799009</id><snippet>setUp</snippet></ROW><ROW><id>2799009</id><snippet>TestPreReqs</snippet></ROW><ROW><id>2799075</id><snippet>.update()</snippet></ROW><ROW><id>2799075</id><snippet>d2</snippet></ROW><ROW><id>2799075</id><snippet>None</snippet></ROW><ROW><id>2799075</id><snippet>&gt;&gt;&gt; d1 = {'a': 1, 'b': 2} 
&gt;&gt;&gt; d2 = {'b': 1, 'c': 3}
&gt;&gt;&gt; d2.update(d1)
&gt;&gt;&gt; d2
{'a': 1, 'c': 3, 'b': 2}
</snippet></ROW><ROW><id>2799075</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>2799480</id><snippet>import site</snippet></ROW><ROW><id>2799480</id><snippet>help</snippet></ROW><ROW><id>2799544</id><snippet>webbrowser</snippet></ROW><ROW><id>2799548</id><snippet>re.search()</snippet></ROW><ROW><id>2799548</id><snippet>re.match()</snippet></ROW><ROW><id>2799548</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = """Summer. 2 credits. Prerequisite: pre-freshman standing or permission of instructor. Credit may not be applied toward engineering degree. S-U grades only."""
&gt;&gt;&gt; note_re = re.compile(r'(Prerequisite|Recommended): ([\w -]*)', re.IGNORECASE)
&gt;&gt;&gt; note_re.search(s).groups()
('Prerequisite', 'pre-freshman standing or permission of instructor')
</snippet></ROW><ROW><id>2799548</id><snippet>&gt;&gt;&gt; re.search(r'(Prerequisite|Recommended): ([\w -\.]*)', s, re.IGNORECASE).groups()
('Prerequisite', 'pre-freshman standing or permission of instructor. Credit may not be applied toward engineering degree. S-U grades only.')
</snippet></ROW><ROW><id>2799548</id><snippet>&gt;&gt;&gt; re.search(r'(Prerequisite|Recommended): (.*)', s, re.IGNORECASE).groups()
('Prerequisite', 'pre-freshman standing or permission of instructor. Credit may not be applied toward engineering degree. S-U grades only.')
</snippet></ROW><ROW><id>2799548</id><snippet>.*</snippet></ROW><ROW><id>2799561</id><snippet>class Conference(models.Model):
    conference_name = models.CharField(max_length=50)
    url = models.URLField()

    def __unicode__(self):
        return self.conference_name

    class Meta:
        ordering = ['conference_name']
</snippet></ROW><ROW><id>2799561</id><snippet>Conference</snippet></ROW><ROW><id>2799709</id><snippet>posix_ipc</snippet></ROW><ROW><id>2799709</id><snippet>posix_ipc</snippet></ROW><ROW><id>2799721</id><snippet>json</snippet></ROW><ROW><id>2799721</id><snippet>simplejson</snippet></ROW><ROW><id>2799721</id><snippet>json</snippet></ROW><ROW><id>2799721</id><snippet>urllib2</snippet></ROW><ROW><id>2799721</id><snippet>simplejson</snippet></ROW><ROW><id>2799721</id><snippet>http://ajax.googleapis.com/ajax/services/search/local?v=1.0&amp;q=...
</snippet></ROW><ROW><id>2799721</id><snippet>local</snippet></ROW><ROW><id>2799721</id><snippet>web</snippet></ROW><ROW><id>2800100</id><snippet>def get(id, user_id=None):

    query = """SELECT *
               FROM USERS
               WHERE text LIKE %s AND
                     id = %s
            """
    values = [search_text, id]

    if user_id is not None:
        query += ' AND user_id = %s'
        values.append(user_id)

    results = DB.get(query, values)
</snippet></ROW><ROW><id>2800100</id><snippet>if</snippet></ROW><ROW><id>2800100</id><snippet>values</snippet></ROW><ROW><id>2800100</id><snippet>append</snippet></ROW><ROW><id>2800100</id><snippet>         values += (user_id,)
</snippet></ROW><ROW><id>2800100</id><snippet>values</snippet></ROW><ROW><id>2800100</id><snippet>LIMIT</snippet></ROW><ROW><id>2800100</id><snippet>   query_pieces = ["""SELECT *
                     FROM USERS
                     WHERE text LIKE %s AND
                         id = %s
                   """, "LIMIT 5"]
    values = [search_text, id]

    if user_id is not None:
        query_pieces.insert(1, ' AND user_id = %s')
        values.append(user_id)

    query = ' '.join(query_pieces)
    results = DB.get(query, values)
</snippet></ROW><ROW><id>2800100</id><snippet>insert</snippet></ROW><ROW><id>2800115</id><snippet>c</snippet></ROW><ROW><id>2800115</id><snippet>c.collections</snippet></ROW><ROW><id>2800115</id><snippet>get_paths</snippet></ROW><ROW><id>2800115</id><snippet>matplotlib.contour.BlockingContourLabeler</snippet></ROW><ROW><id>2800115</id><snippet>matplotlib.contour.locate_label</snippet></ROW><ROW><id>2800115</id><snippet>locate_label</snippet></ROW><ROW><id>2800115</id><snippet>def your_locate_label(self, linecontour, labelwidth):
    # some magic
    pass

ar = np.array([[1,0], [0,1]]
c = matplotlib.contour(ar)
c.locate_label = your_locate_label

c.clabel()
</snippet></ROW><ROW><id>2800115</id><snippet>ipython</snippet></ROW><ROW><id>2800115</id><snippet>%psource c.clabel
</snippet></ROW><ROW><id>2800115</id><snippet>$EDITOR</snippet></ROW><ROW><id>2800115</id><snippet>%edit c.clabel
</snippet></ROW><ROW><id>2800305</id><snippet>setUp()</snippet></ROW><ROW><id>2800305</id><snippet>tearDown()</snippet></ROW><ROW><id>2800305</id><snippet>setUp()</snippet></ROW><ROW><id>2800305</id><snippet>tearDown()</snippet></ROW><ROW><id>2800305</id><snippet>class Note(TestCase):
    def setUp(self):
        self.client = Client()
        self.new_user = User.objects.create_user('blah', 'blah@blah.com', 'blah')
        self.new_user.save()
        self.client.login(username='blah', password='blah')

    def tearDown(self):
        self.client.logout()
        self.new_user.delete()

    def test_noteshow(self):
        response = self.client.get('/note/')
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, '/note/noteshow.html')
</snippet></ROW><ROW><id>2800385</id><snippet>.keys()</snippet></ROW><ROW><id>2801172</id><snippet>request.is_xhr</snippet></ROW><ROW><id>2801172</id><snippet>X-Requested-With: XMLHttpRequest</snippet></ROW><ROW><id>2801458</id><snippet>QGraphicsItem::pos()</snippet></ROW><ROW><id>2801458</id><snippet>QGraphicsItem::scenePos()</snippet></ROW><ROW><id>2801458</id><snippet>QGraphicsWidget</snippet></ROW><ROW><id>2802090</id><snippet>&gt;&gt;&gt; class A(object):
...     x=4
...     def __init__(self):
...         self.y=2
&gt;&gt;&gt; a=A() #a is now an instance of A
&gt;&gt;&gt; A.x #Works as x is an attribute of the class
2: 4
&gt;&gt;&gt; a.x #Works as instances can access class variables
3: 4
&gt;&gt;&gt; a.y #Works as y is an attribute of the instance
4: 2
&gt;&gt;&gt; A.y #Fails as the class A has no attribute y
Traceback (most recent call last):
  File "&lt;pyshell#9&gt;", line 1, in &lt;module&gt;
    A.y #Fails as the class A has no attribute y
AttributeError: type object 'A' has no attribute 'y'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2802090</id><snippet>&gt;&gt;&gt; class B(object):
...     x=2
...     def __init__(self):
...         self.x=7
...     def pr1(self):
...         print self.x
...     @classmethod
...     def pr2(cls):
...         print cls.x
&gt;&gt;&gt; b=B()
&gt;&gt;&gt; B.x
5: 2
&gt;&gt;&gt; b.x
6: 7
&gt;&gt;&gt; b.pr1()
7
&gt;&gt;&gt; b.pr2()
2
&gt;&gt;&gt; B.pr2()
2
</snippet></ROW><ROW><id>2802104</id><snippet>lsvfs</snippet></ROW><ROW><id>2802195</id><snippet>$</snippet></ROW><ROW><id>2802195</id><snippet>&gt;&gt;&gt; s = """foo bar AAAA
foo2 AAAA bar2"""
&gt;&gt;&gt; re.findall(r"\w+ AAAA \w+$", s)
['foo2 AAAA bar2']
</snippet></ROW><ROW><id>2802195</id><snippet>list</snippet></ROW><ROW><id>2802195</id><snippet>[-1]</snippet></ROW><ROW><id>2802195</id><snippet>&gt;&gt;&gt; lst = [2, 3, 4]
&gt;&gt;&gt; lst[-1]
4
</snippet></ROW><ROW><id>2802422</id><snippet>def somestring(**kwargs):
  return ', '.join('%s=%r' % x for x in kwargs.iteritems())
</snippet></ROW><ROW><id>2802748</id><snippet>value_when_true if condition else value_when_false
</snippet></ROW><ROW><id>2802748</id><snippet>'Yes' if fruit == 'Apple' else 'No'</snippet></ROW><ROW><id>2802863</id><snippet>port -f uninstall &lt;port&gt;</snippet></ROW><ROW><id>2802863</id><snippet>port -f uninstall installed
</snippet></ROW><ROW><id>2802863</id><snippet>sudo</snippet></ROW><ROW><id>2802863</id><snippet>su root</snippet></ROW><ROW><id>2802863</id><snippet>sudo port -f uninstall &lt;port&gt;
</snippet></ROW><ROW><id>2802863</id><snippet>&lt;port&gt;</snippet></ROW><ROW><id>2802863</id><snippet>py-django
py25-django
py26-django
</snippet></ROW><ROW><id>2802863</id><snippet>port list installed | grep django
</snippet></ROW><ROW><id>2802912</id><snippet>a2()</snippet></ROW><ROW><id>2803126</id><snippet>amqplib</snippet></ROW><ROW><id>2803126</id><snippet>carrot</snippet></ROW><ROW><id>2803126</id><snippet>amqplib.client0_8.Connection</snippet></ROW><ROW><id>2803126</id><snippet>wait_multi</snippet></ROW><ROW><id>2803126</id><snippet>channel.wait</snippet></ROW><ROW><id>2803148</id><snippet>if message in ("0", "3", "5", "7"):
    ...
elif message in ...
</snippet></ROW><ROW><id>2803148</id><snippet>message</snippet></ROW><ROW><id>2803148</id><snippet>if message in "0357":
    ....
</snippet></ROW><ROW><id>2803148</id><snippet>message == "35"</snippet></ROW><ROW><id>2803877</id><snippet>strptime</snippet></ROW><ROW><id>2803877</id><snippet>datetime</snippet></ROW><ROW><id>2803877</id><snippet>&gt;&gt;&gt; datetime.datetime.strptime('24052010', "%d%m%Y").date()
datetime.date(2010, 5, 24)
</snippet></ROW><ROW><id>2803966</id><snippet>import re
string = "blabla Oxygen:      10.10 blabla"
regex_oxygen = re.compile('''Oxygen:\W+([0-9.]*)''')
result = re.findall(regex_oxygen,string)
print result
</snippet></ROW><ROW><id>2804233</id><snippet>import subprocess
proc = subprocess.Popen(['java', '-version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
out, err = proc.communicate()
</snippet></ROW><ROW><id>2804749</id><snippet>reactor.stop()</snippet></ROW><ROW><id>2804749</id><snippet>d.callback</snippet></ROW><ROW><id>2804749</id><snippet>reactor.stop()</snippet></ROW><ROW><id>2804749</id><snippet>reactor.stop()</snippet></ROW><ROW><id>2804749</id><snippet>connectionMade()</snippet></ROW><ROW><id>2804749</id><snippet>dataReceived()</snippet></ROW><ROW><id>2805004</id><snippet>import elixir
elixir.options_defaults['mapper_options'] = { 'save_on_init': False }
</snippet></ROW><ROW><id>2805004</id><snippet>Entity</snippet></ROW><ROW><id>2805004</id><snippet>using_mapper_options(save_on_init=False)</snippet></ROW><ROW><id>2805413</id><snippet>import socket
print socket.gethostbyname('localhost') # result from hosts file
print socket.gethostbyname('google.com') # your os sends out a dns query
</snippet></ROW><ROW><id>2805713</id><snippet>links = Link.objects.select_related().annotate(votes=Count('vote'))
for link in links:
    delta_in_hours = (int(datetime.now().strftime("%s")) - int(link.created.strftime("%s"))) / 3600
    link.popularity = ((link.votes - 1) / (delta_in_hours + 2)**1.5)

links = sorted(links, key=lambda x: x.popularity, reverse=True)
</snippet></ROW><ROW><id>2805851</id><snippet>datetime</snippet></ROW><ROW><id>2805851</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; now.microsecond 
38672
</snippet></ROW><ROW><id>2805851</id><snippet>datetime</snippet></ROW><ROW><id>2805851</id><snippet>timedelta</snippet></ROW><ROW><id>2805851</id><snippet>datetime</snippet></ROW><ROW><id>2805851</id><snippet>&gt;&gt;&gt; yest = now - datetime.timedelta(days=1)
&gt;&gt;&gt; yest
datetime.datetime(2010, 5, 9, 12, 37, 19, 38672)
&gt;&gt;&gt; now
datetime.datetime(2010, 5, 10, 12, 37, 19, 38672)
</snippet></ROW><ROW><id>2805851</id><snippet>datetime</snippet></ROW><ROW><id>2805851</id><snippet>timedelta</snippet></ROW><ROW><id>2805851</id><snippet>&gt;&gt;&gt; now - yest
datetime.timedelta(1)
</snippet></ROW><ROW><id>2805859</id><snippet>getattr(table.c, pkey_col_name) == S
</snippet></ROW><ROW><id>2805859</id><snippet>marital.c.marital_status_description == S</snippet></ROW><ROW><id>2805859</id><snippet>def get_row(table, col_name, val, default=None):
    col = getattr(table.c, col_name)
    row = table.select(col == S).execute().fetchone()
    if row == None:
        print "Warning: No row found for %s in %s; using %s" % (val, table, default)
        row = table.select(col == default).execute().fetchone()       
    return row[0]
</snippet></ROW><ROW><id>2805859</id><snippet>record = session.query(Marital).get(key)
</snippet></ROW><ROW><id>2805859</id><snippet>Marital</snippet></ROW><ROW><id>2805859</id><snippet>marital</snippet></ROW><ROW><id>2805859</id><snippet>session</snippet></ROW><ROW><id>2805859</id><snippet>key</snippet></ROW><ROW><id>2805859</id><snippet>record</snippet></ROW><ROW><id>2805859</id><snippet>None</snippet></ROW><ROW><id>2805882</id><snippet>def scan(f, state, it):
  for x in it:
    state = f(state, x)
    yield state
# test
&gt;&gt;&gt; snoc = lambda xs,x: xs+[x]
&gt;&gt;&gt; list(scan(snoc, [], 'abcd'))
[['a'], ['a', 'b'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd']]
&gt;&gt;&gt; list(scan(operator.add, 0, [1,2,3]))
[1,3,6]
</snippet></ROW><ROW><id>2805882</id><snippet>Seq.scan</snippet></ROW><ROW><id>2805882</id><snippet>('State -&gt; 'T -&gt; 'State) -&gt; 'State -&gt; seq&lt;'T&gt; -&gt; seq&lt;'State&gt;
</snippet></ROW><ROW><id>2805882</id><snippet>scan</snippet></ROW><ROW><id>2805882</id><snippet>('State -&gt; 'State -&gt; 'State) -&gt; seq&lt;'State&gt; -&gt; seq&lt;'State&gt;
</snippet></ROW><ROW><id>2805882</id><snippet>reduce</snippet></ROW><ROW><id>2805891</id><snippet>PyObject_IsInstance()</snippet></ROW><ROW><id>2806460</id><snippet>|</snippet></ROW><ROW><id>2806460</id><snippet>(0[0-9]{1})|(1[0-2]{1})-(3[0-1]{1}|[0-2]{1}[0-9]{1})-[2-9]{1}[0-9]{3}
</snippet></ROW><ROW><id>2806460</id><snippet>(0[0-9]{1})
    -or-
(1[0-2]{1})-(3[0-1]{1}|[0-2]{1}[0-9]{1})-[2-9]{1}[0-9]{3}
</snippet></ROW><ROW><id>2806460</id><snippet>((0[0-9]{1})|(1[0-2]{1}))-((3[0-1]{1}|[0-2]{1}[0-9]{1}))-[2-9]{1}[0-9]{3} (([0-1]{1}[0-9]{1}|2[0-3]{1})):[0-5]{1}[0-9]{1}:[0-5]{1}[0-9]{1}.[0-9]{3}
</snippet></ROW><ROW><id>2806610</id><snippet>client.UpgradeToSessionToken(gdata.auth.extract_auth_sub_token_from_url(self.request.url))
</snippet></ROW><ROW><id>2806610</id><snippet>GetFormUploadToken
</snippet></ROW><ROW><id>2806610</id><snippet>Traceback (most recent call last):
  File "/base/python_runtime/python_lib/versions/1/google/appengine/ext/webapp/__init__.py", line 513, in __call__
    handler.post(*groups)
  File "/base/data/home/apps/5th-anniversary/1.341859541699944556/upload.py", line 106, in post
    form = u.getUploadForm(self,title,description,keywords)
  File "/base/data/home/apps/5th-anniversary/1.341859541699944556/upload.py", line 65, in getUploadForm
    response = client.GetFormUploadToken(video_entry,'http://gdata.youtube.com/action/GetUploadToken')
  File "/base/data/home/apps/5th-anniversary/1.341859541699944556/gdata/youtube/service.py", line 716, in GetFormUploadToken
    raise YouTubeError(e.args[0])
YouTubeError: {'status': 401L, 'body': '&lt;HTML&gt;\n&lt;HEAD&gt;\n&lt;TITLE&gt;User authentication required.&lt;/TITLE&gt;\n&lt;/HEAD&gt;\n&lt;BODY BGCOLOR="#FFFFFF" TEXT="#000000"&gt;\n&lt;H1&gt;User authentication required.&lt;/H1&gt;\n&lt;H2&gt;Error 401&lt;/H2&gt;\n&lt;/BODY&gt;\n&lt;/HTML&gt;\n', 'reason': ''}
</snippet></ROW><ROW><id>2806640</id><snippet>all(dict.itervalues())
</snippet></ROW><ROW><id>2806640</id><snippet>all(dict.values())
</snippet></ROW><ROW><id>2806640</id><snippet>dict</snippet></ROW><ROW><id>2806640</id><snippet>values()</snippet></ROW><ROW><id>2806910</id><snippet>return ProductParts.gql('WHERE __key__ IN :key', key = self.defaultParts).fetch(1000)
</snippet></ROW><ROW><id>2806910</id><snippet>IN</snippet></ROW><ROW><id>2806910</id><snippet>&lt;strong&gt;key&lt;/strong&gt; IN self.defaultParts</snippet></ROW><ROW><id>2806910</id><snippet>len(self.defaultParts)</snippet></ROW><ROW><id>2806910</id><snippet>parts = ProductParts.all().filter("products =", product).fetch(1000)</snippet></ROW><ROW><id>2806910</id><snippet>GQL_PROD_PART_BY_KEYS = ProductParts.gql('WHERE __key__ IN :1')
@property
def defaultPartsData(self):
    return GQL_PROD_PART_BY_KEYS.bind(self.defaultParts)
</snippet></ROW><ROW><id>2806910</id><snippet>GQL_PARTS_BY_PRODUCT = ProductParts.gql('WHERE products = :1')
for product in productData:
    productDict = {}
    typeDict = {}
    productDict['productName'] = product.name

    cache_key = 'productparts_%s' % (slugify(product.key()))
    partData = memcache.get(cache_key)

    if not partData:
        for type in typeData:
            typeDict[type.typeId] = { 'default' : '', 'optional' : [] }

        # here's a new approach that does just ONE datastore query (for each product)
        GQL_PARTS_BY_PRODUCT.bind(product)
        parts = GQL_PARTS_BY_PRODUCT.fetch(1000)
        for part in parts:
            if part.key() in self.defaultParts:
                part_type = 'default'
            else:
                part_type = 'optional'

            for label in labelsForLangCode:
                if label.key() in defaultPart.partLabelList:
                    typeDict[defaultPart.type.typeId][part_type] = label.partLangLabel
        # (end new code)
        memcache.add(cache_key, typeDict, 500)
        partData = memcache.get(cache_key)

    productDict['parts'] = partData    
    productList.append(productDict)
</snippet></ROW><ROW><id>2806932</id><snippet>try:
    os.rename('/etc/foo', '/etc/bar')
except IOError as e:
    if (e[0] == errno.EPERM):
       print &gt;&gt; sys.stderr, "You need root permissions to do this, laterz!"
       sys.exit(1)
</snippet></ROW><ROW><id>2806932</id><snippet>os.geteuid()</snippet></ROW><ROW><id>2806932</id><snippet>/etc</snippet></ROW><ROW><id>2807310</id><snippet>$ python &lt;untarred_directory&gt;/virtualenv.py venv
</snippet></ROW><ROW><id>2807310</id><snippet>.</snippet></ROW><ROW><id>2807310</id><snippet>source</snippet></ROW><ROW><id>2807310</id><snippet>$ . venv/bin/activate
</snippet></ROW><ROW><id>2807310</id><snippet>$ easy_install pip
</snippet></ROW><ROW><id>2807310</id><snippet>$ pip install -e pkg1
</snippet></ROW><ROW><id>2807310</id><snippet>pkg1</snippet></ROW><ROW><id>2807310</id><snippet>site-packages</snippet></ROW><ROW><id>2807310</id><snippet>$ cd pkg1
$ python setup.py develop
</snippet></ROW><ROW><id>2807310</id><snippet>pip install -e B</snippet></ROW><ROW><id>2807310</id><snippet>$ cd pkg1
$ python setup.py --help
$ python setup.py --help-commands
</snippet></ROW><ROW><id>2807310</id><snippet>--index-url</snippet></ROW><ROW><id>2807310</id><snippet>-e vcs+...</snippet></ROW><ROW><id>2808281</id><snippet>logging.config.fileConfig</snippet></ROW><ROW><id>2808511</id><snippet>from threading import Lock
</snippet></ROW><ROW><id>2808845</id><snippet>sys.stdout.write('foo')
sys.stdout.flush()
wastetime()
sys.stdout.write('bar')
sys.stdout.flush()
</snippet></ROW><ROW><id>2808922</id><snippet>all</snippet></ROW><ROW><id>2808922</id><snippet>return [x.category for x in self.postcategory_set]
</snippet></ROW><ROW><id>2808922</id><snippet>postcategory_set</snippet></ROW><ROW><id>2808922</id><snippet>return self.postcategory_set
</snippet></ROW><ROW><id>2808922</id><snippet>Post.postcategory_set</snippet></ROW><ROW><id>2808922</id><snippet>set</snippet></ROW><ROW><id>2808922</id><snippet>google.app.engine.ext.db.Query</snippet></ROW><ROW><id>2808922</id><snippet>class Post(db.Model):
    title = db.StringProperty(required=True)
    category = db.ReferenceProperty(Category)
    def categories(self):
        return list(self.postcategory_set)
</snippet></ROW><ROW><id>2808922</id><snippet>PostCategory</snippet></ROW><ROW><id>2809344</id><snippet>easy_install -i &lt;a href="http://myindex.site/index" rel="nofollow"&gt;http://myindex.site/index&lt;/a&gt;</snippet></ROW><ROW><id>2809344</id><snippet>libxml2</snippet></ROW><ROW><id>2809344</id><snippet>libxslt</snippet></ROW><ROW><id>2809451</id><snippet>b =['52.5%', '62.4%', '91.8%', '21.5%']
b.sort(key = lambda a: float(a[:-1]))
</snippet></ROW><ROW><id>2809518</id><snippet>open()</snippet></ROW><ROW><id>2809518</id><snippet>numpy.savetxt()</snippet></ROW><ROW><id>2809518</id><snippet>numpy.savetxt()</snippet></ROW><ROW><id>2809518</id><snippet>s = ','.join(itertools.chain(dataset)) + '\n'
newfile = 'export.csv'
f = open(newfile,'w')
f.write(s)
numpy.savetxt(f, (numpy.transpose(datastack)), delimiter=', ')
f.close()
</snippet></ROW><ROW><id>2809827</id><snippet>results1_dict = dict((row[0], list(row[1:])) for row in results1)
results2_dict = dict((row[0], list(row[1:])) for row in results2)

for key, value in results2_dict:
    if key in results1_dict:
        results1_dict[key].extend(value)
    else:
        results1_dict[key] = value
</snippet></ROW><ROW><id>2809853</id><snippet>Return Encoding.Default.GetString(Crypt(Encoding.Default.GetBytes(Data)))
</snippet></ROW><ROW><id>2809873</id><snippet>AuthenticationMiddleware</snippet></ROW><ROW><id>2809873</id><snippet>LazyUser</snippet></ROW><ROW><id>2809873</id><snippet>contrib.auth.get_user</snippet></ROW><ROW><id>2809873</id><snippet>get_user</snippet></ROW><ROW><id>2809873</id><snippet>AnonymousUser</snippet></ROW><ROW><id>2810169</id><snippet>import time
import select
import logging
import sys

def stdinWait(interval):
    start = time.time()
    while True:
        time_left = interval - (time.time() - start)
        if time_left &lt;= 0:
            break
        r, w, x = select.select([sys.stdin], [], [], time_left)
        if r:
            line = r[0].readline()
            try:
                print(eval(line));
            except Exception, e:
                logging.exception(e)

def runJobs(comps, jobQueue, numRunning, limit, lock):
  while len(jobQueue) &gt;= 0:
      print(len(jobQueue));
      if len(jobQueue) &gt; 0:
          comp, tasks = find_computer(comps, 0);
          #do something
          stdinWait(5) # wait 5 seconds while watching stdin
</snippet></ROW><ROW><id>2811012</id><snippet>from django.forms import ModelForm, PasswordInput

class TwitterUserForm(ModelForm):
    class Meta:
        model = TwitterUser
        widgets = {
            'password': PasswordInput(),
        }
</snippet></ROW><ROW><id>2811012</id><snippet>from django.forms import ModelForm, PasswordInput

class TwitterUserForm(ModelForm):
    password = forms.CharField(widget=PasswordInput())
    class Meta:
        model = TwitterUser
</snippet></ROW><ROW><id>2811012</id><snippet>help_text</snippet></ROW><ROW><id>2811012</id><snippet>verbose_name</snippet></ROW><ROW><id>2811012</id><snippet>admin.py</snippet></ROW><ROW><id>2811012</id><snippet>from django.contrib import admin

class TwitterUserAdmin(admin.ModelAdmin):
    form = TwitterUserForm

admin.site.register(TwitterUser, TwitterUserAdmin)
</snippet></ROW><ROW><id>2811103</id><snippet>__unicode__</snippet></ROW><ROW><id>2811103</id><snippet>Choice</snippet></ROW><ROW><id>2811103</id><snippet>def __unicode__(self):
    return self.poll.question
</snippet></ROW><ROW><id>2811103</id><snippet>question</snippet></ROW><ROW><id>2811103</id><snippet>Choice</snippet></ROW><ROW><id>2811103</id><snippet>poll</snippet></ROW><ROW><id>2811103</id><snippet>return self.choice</snippet></ROW><ROW><id>2811103</id><snippet>Choice</snippet></ROW><ROW><id>2811103</id><snippet>__unicode__</snippet></ROW><ROW><id>2811103</id><snippet>def __unicode__(self):
    return self.choice
</snippet></ROW><ROW><id>2811254</id><snippet>iframe</snippet></ROW><ROW><id>2811254</id><snippet>templates</snippet></ROW><ROW><id>2811254</id><snippet>site.html</snippet></ROW><ROW><id>2811254</id><snippet> &lt;html xmlns="http://www.w3.org/1999/xhtml"
  xmlns:py="http://genshi.edgewall.org/" py:strip=""&gt;
  &lt;!--! Custom match templates go here --&gt;
  &lt;head py:match="head" py:attrs="select('@*')"&gt;
      ${select('*|comment()|text()[local-name()!="script"]')}
      &lt;link rel="stylesheet" type="text/css" href="http://mysite.com/nav.css" /&gt;
  &lt;/head&gt;

&lt;body py:match="body" py:attrs="select('@*')"&gt;
     &lt;iframe src ="http://mysite.com/nav.html"
                 width="100%"
                 id="navbar-iframe"
                 height="30px"
                 frameborder="0"
                 marginheight="0"
                 scrolling="no"
                 marginwidth="0"&gt;
             &lt;/iframe&gt;
    &lt;div id="tdtracbody"&gt;
        ${select('*|text()')}
    &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>2812274</id><snippet>query.filter(CustomerList.customers.contains(customer))</snippet></ROW><ROW><id>2812274</id><snippet>query.filter_by(**kwargs)</snippet></ROW><ROW><id>2812274</id><snippet>query.filter_by(foo="bar", baz=42)</snippet></ROW><ROW><id>2812274</id><snippet>query.filter(and_(MyClass.foo == "bar", MyClass.baz == 42))</snippet></ROW><ROW><id>2812895</id><snippet>__repr__</snippet></ROW><ROW><id>2812895</id><snippet>eval</snippet></ROW><ROW><id>2812895</id><snippet>__str__</snippet></ROW><ROW><id>2812895</id><snippet>__repr__</snippet></ROW><ROW><id>2812895</id><snippet>Classname(binary_string)</snippet></ROW><ROW><id>2812895</id><snippet>__str__</snippet></ROW><ROW><id>2812895</id><snippet>bin()</snippet></ROW><ROW><id>2812895</id><snippet>bin</snippet></ROW><ROW><id>2813384</id><snippet>inspect.currentframe</snippet></ROW><ROW><id>2813384</id><snippet>inspect.getouterframes</snippet></ROW><ROW><id>2813384</id><snippet>import inspect    
def pv(name):
    record=inspect.getouterframes(inspect.currentframe())[1]
    frame=record[0]
    val=eval(name,frame.f_globals,frame.f_locals)
    print('{0}: {1}'.format(name, val))
</snippet></ROW><ROW><id>2813384</id><snippet>from utils_debug import pv
</snippet></ROW><ROW><id>2813384</id><snippet>print("a_variable_name: %s' % a_variable_name)
</snippet></ROW><ROW><id>2813384</id><snippet>pv('a_variable_name')
</snippet></ROW><ROW><id>2813384</id><snippet>pv</snippet></ROW><ROW><id>2813384</id><snippet>C-x (   # start keyboard macro
C-s pv('
C-a
C-k     # change this to M-; if you just want to comment out the pv call
C-x )   # end keyboard macro
</snippet></ROW><ROW><id>2813384</id><snippet>C-x e</snippet></ROW><ROW><id>2813384</id><snippet>C-u 1000 C-x e</snippet></ROW><ROW><id>2813384</id><snippet>pv('</snippet></ROW><ROW><id>2813530</id><snippet>for line in proc.stdout</snippet></ROW><ROW><id>2813530</id><snippet>readline()</snippet></ROW><ROW><id>2813530</id><snippet>#filters output
import subprocess
proc = subprocess.Popen(['python','fake_utility.py'],stdout=subprocess.PIPE)
while True:
  line = proc.stdout.readline()
  if line != '':
    #the real code does filtering here
    print "test:", line.rstrip()
  else:
    break
</snippet></ROW><ROW><id>2813530</id><snippet>readline()</snippet></ROW><ROW><id>2813656</id><snippet>print '''Let's begin and end with sets of unlikely 2 chars and bingo'''
</snippet></ROW><ROW><id>2813836</id><snippet>set(['stackoverflow', 'serverfault']).issubset(sites) # ==&gt; True

set(['stackoverflow', 'google']).issubset(sites) # ==&gt; False
</snippet></ROW><ROW><id>2813846</id><snippet>import re

astr='My---sun--is------very-big---.'

print(re.sub('-+','-',astr))
# My-sun-is-very-big-.
</snippet></ROW><ROW><id>2814150</id><snippet>sys.argv</snippet></ROW><ROW><id>2814150</id><snippet>user_name</snippet></ROW><ROW><id>2814150</id><snippet>script</snippet></ROW><ROW><id>2814750</id><snippet>a, b, c = s.split('\n\n')
</snippet></ROW><ROW><id>2814929</id><snippet>urllib</snippet></ROW><ROW><id>2814929</id><snippet>urllib2</snippet></ROW><ROW><id>2814979</id><snippet>&gt;&gt;&gt; s
'one aaa two bbbb three cccc'
&gt;&gt;&gt; re.split(r"\s*(?:one|two|three)\s*", s)
['', 'aaa', 'bbbb', 'cccc']
</snippet></ROW><ROW><id>2814979</id><snippet>?:</snippet></ROW><ROW><id>2815250</id><snippet>zip</snippet></ROW><ROW><id>2815250</id><snippet>function zip() {
    $args = func_get_args();
    $zipped = array();
    $n = count($args);
    for ($i=0; $i&lt;$n; ++$i) {
        reset($args[$i]);
    }
    while ($n) {
        $tmp = array();
        for ($i=0; $i&lt;$n; ++$i) {
            if (key($args[$i]) === null) {
                break 2;
            }
            $tmp[] = current($args[$i]);
            next($args[$i]);
        }
        $zipped[] = $tmp;
    }
    return $zipped;
}
</snippet></ROW><ROW><id>2815311</id><snippet>as</snippet></ROW><ROW><id>2815668</id><snippet>sys.stderr</snippet></ROW><ROW><id>2815668</id><snippet>print("=", end=" ", file=sys.stderr)
</snippet></ROW><ROW><id>2815720</id><snippet>import re
import sys

samp='''S
=NP
==(DT +def) the
== (N +ani) man
=VP
==V walks'''.splitlines()

relinelev = re.compile(r'(=*)(.*)')
reclean = re.compile(r'\s*\((\S+)[^)]*\)')

def clean(line):
  return reclean.sub(r'\1', line)

def reparse(tree=samp):
  stack = [-1]
  for line in tree:
    equals, rest = relinelev.match(line).groups()
    linelev = len(equals)
    while linelev &lt; stack[-1]:
      sys.stdout.softspace = False
      print ')',
      curlev = stack.pop()
    if linelev == stack[-1]:
      sys.stdout.softspace = False
      print ')',
    else:
      stack.append(linelev)
    print '(%s' % clean(rest),
  while stack[-1] &gt;= 0:
    sys.stdout.softspace = False
    print ')',
    stack.pop()
  print

reparse()
</snippet></ROW><ROW><id>2815720</id><snippet>(S (NP (DT the) (N man)) (VP (V walks)))
</snippet></ROW><ROW><id>2815720</id><snippet>clean</snippet></ROW><ROW><id>2815720</id><snippet>reparse</snippet></ROW><ROW><id>2815720</id><snippet>def reparse(tree=samp):
  stack = [-1]
  result = []
  for line in tree:
    equals, rest = relinelev.match(line).groups()
    linelev = len(equals)
    while linelev &lt; stack[-1]:
      result[-1] += ')'
      curlev = stack.pop()
    if linelev == stack[-1]:
      result[-1] += ')'
    else:
      stack.append(linelev)
    result.append('(%s' % clean(rest))
  while stack[-1] &gt;= 0:
    result[-1] += ')'
    stack.pop()
  return ' '.join(result)
</snippet></ROW><ROW><id>2815796</id><snippet>$ mkdir myModule
$ touch myModule/__init__.py
$ cat &gt;myModule/subModule.py
class MyClass(object): kind='first'
</snippet></ROW><ROW><id>2815796</id><snippet>&gt;&gt;&gt; from myModule.subModule import MyClass
&gt;&gt;&gt; MyClass.kind
'first'
</snippet></ROW><ROW><id>2815796</id><snippet>$ cat &gt;myModule/subModule.py
class MyClass(object): kind='second'
</snippet></ROW><ROW><id>2815796</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; reload(sys.modules['myModule.subModule'])
&lt;module 'myModule.subModule' from 'myModule/subModule.py'&gt;
&gt;&gt;&gt; from myModule.subModule import MyClass
&gt;&gt;&gt; MyClass.kind
'second'
</snippet></ROW><ROW><id>2815796</id><snippet>sys.modules</snippet></ROW><ROW><id>2815796</id><snippet>from</snippet></ROW><ROW><id>2815796</id><snippet>&gt;&gt;&gt; from myModule import subModule as sm
&gt;&gt;&gt; sm.MyClass.kind
'first'
&gt;&gt;&gt; reload(sm)
&lt;module 'myModule.subModule' from 'myModule/subModule.py'&gt;
&gt;&gt;&gt; sm.MyClass.kind
'second'
</snippet></ROW><ROW><id>2815796</id><snippet>sm.MyClass</snippet></ROW><ROW><id>2815796</id><snippet>MyClass</snippet></ROW><ROW><id>2815800</id><snippet>urllib</snippet></ROW><ROW><id>2815800</id><snippet>urllib2</snippet></ROW><ROW><id>2815800</id><snippet>cURL</snippet></ROW><ROW><id>2815800</id><snippet>urllib2</snippet></ROW><ROW><id>2815825</id><snippet>sys.path</snippet></ROW><ROW><id>2815825</id><snippet>PIL.pth</snippet></ROW><ROW><id>2815825</id><snippet>/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/site-packages</snippet></ROW><ROW><id>2815825</id><snippet>/Library/Python/2.5/site-packages/</snippet></ROW><ROW><id>2815835</id><snippet>schtasks</snippet></ROW><ROW><id>2816189</id><snippet>Window-&gt;Preferences-&gt;PyDev-&gt;Editor-&gt;Code Completion</snippet></ROW><ROW><id>2816189</id><snippet>Window-&gt;Preferences-&gt;PyDev-&gt;Interpreter - Python</snippet></ROW><ROW><id>2816953</id><snippet>ctypes</snippet></ROW><ROW><id>2816953</id><snippet>GetProductInfo()</snippet></ROW><ROW><id>2816953</id><snippet>windll.kernel32.GetProductInfo</snippet></ROW><ROW><id>2817302</id><snippet>dirname(dirname(file))</snippet></ROW><ROW><id>2817302</id><snippet>os.path.abspath</snippet></ROW><ROW><id>2817302</id><snippet>dirname(dirname(abspath(file)))</snippet></ROW><ROW><id>2817500</id><snippet>popen</snippet></ROW><ROW><id>2817500</id><snippet>p1 = Popen(["cat", "log.txt"], stdout=PIPE)
p2 = Popen(["grep", "ERROR"], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]
</snippet></ROW><ROW><id>2817530</id><snippet>json</snippet></ROW><ROW><id>2817530</id><snippet>urllib2</snippet></ROW><ROW><id>2817530</id><snippet>import json
import urllib2

data = json.load(urllib2.urlopen('http://someurl/path/to/json'))
</snippet></ROW><ROW><id>2817774</id><snippet>import gc

...

def close(self):
    del self.xlApp
    if hasattr(self, 'xlBook'):
        del self.xlBook
    gc.collect()
</snippet></ROW><ROW><id>2818524</id><snippet>getattr</snippet></ROW><ROW><id>2818524</id><snippet>&gt;&gt; class A:
    def filter_bunnies(self, pets):
        print('bunnies')

&gt;&gt;&gt; getattr(A(), 'filter_bunnies')(1)
bunnies
</snippet></ROW><ROW><id>2819021</id><snippet>vote</snippet></ROW><ROW><id>2819021</id><snippet>views</snippet></ROW><ROW><id>2819091</id><snippet>nosetests test* --nologcapture --nocapture
</snippet></ROW><ROW><id>2819104</id><snippet>&gt;&gt;&gt; print u'\u0e4f\u0361\u032f\u0e4f'
๏̯͡๏
</snippet></ROW><ROW><id>2819954</id><snippet>import matplotlib.pyplot as plt

# initial plot
fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot([1,2,3,4,5])

yTickPos,_ = plt.yticks()
yTickPos = yTickPos[:-1] #slice off the last as it is the top of the plot
# create bars at yTickPos that are the length of our greatest xtick and have a height equal to our tick spacing
ax.barh(yTickPos, [max(plt.xticks()[0])] * len(yTickPos), height=(yTickPos[1]-yTickPos[0]), color=['g','w'])

plt.show()
</snippet></ROW><ROW><id>2819978</id><snippet>while not stopEvent.isSet():
    try:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                stopEvent.set()
    except KeyboardInterrupt:
        stopEvent.set()
</snippet></ROW><ROW><id>2820066</id><snippet>import urllib2
import time
import random

MAX_WAIT = 5
ids = ...
agents = ...
proxies = ...

for id in ids:
    url = 'http://abc.com/view_page.aspx?ID=%d' % id
    opener = urllib2.build_opener(urllib2.ProxyHandler({'http' : proxies[0]}))
    html = opener.open(urllib2.Request(url, None, {'User-agent': agents[0]})).read()
    open('%d.html' % id, 'w').write(html)
    agents.append(agents.pop()) # cycle
    proxies.append(proxies.pop())
    time.sleep(MAX_WAIT*random.random())
</snippet></ROW><ROW><id>2820605</id><snippet>DateStamp</snippet></ROW><ROW><id>2820605</id><snippet>datetime.datetime</snippet></ROW><ROW><id>2820605</id><snippet>lambda x: str((x if isinstance(x, datetime.datetime) else datetime.datetime.strptime(x, '%d/%m/%Y')).date())
</snippet></ROW><ROW><id>2820605</id><snippet>datetime.datetime</snippet></ROW><ROW><id>2820605</id><snippet>lambda</snippet></ROW><ROW><id>2820928</id><snippet>import wx
import wx.lib.newevent

import logging

# create event type
wxLogEvent, EVT_WX_LOG_EVENT = wx.lib.newevent.NewEvent()


class wxLogHandler(logging.Handler):
    """
    A handler class which sends log strings to a wx object
    """
    def __init__(self, wxDest=None):
        """
        Initialize the handler
        @param wxDest: the destination object to post the event to 
        @type wxDest: wx.Window
        """
        logging.Handler.__init__(self)
        self.wxDest = wxDest
        self.level = logging.DEBUG

    def flush(self):
        """
        does nothing for this handler
        """


    def emit(self, record):
        """
        Emit a record.

        """
        try:
            msg = self.format(record)
            evt = wxLogEvent(message=msg,levelname=record.levelname)            
            wx.PostEvent(self.wxDest,evt)
        except (KeyboardInterrupt, SystemExit):
            raise
        except:
            self.handleError(record)
</snippet></ROW><ROW><id>2820928</id><snippet>self.Bind(EVT_WX_LOG_EVENT, self.onLogEvent)

def onLogEvent(self,event):
    '''
    Add event.message to text window
    '''
    msg = event.message.strip("\r")+"\n"
    self.logwindow.AppendText(msg) # or whatevery
    event.Skip()
</snippet></ROW><ROW><id>2820963</id><snippet>entryVariable</snippet></ROW><ROW><id>2820963</id><snippet>get()</snippet></ROW><ROW><id>2820963</id><snippet>Calc()</snippet></ROW><ROW><id>2820963</id><snippet>def on_equal_btn_click(self):
    print self.entryVariable.get()
    self.entryVariable.set(self.entryVariable.get() + "=")
    print self.entryVariable.get()
    calculator = Calc(self.entryVariable.get())
    self.entryVariable.set(calculator.calculate())
</snippet></ROW><ROW><id>2820963</id><snippet>print</snippet></ROW><ROW><id>2820963</id><snippet>repr()</snippet></ROW><ROW><id>2820963</id><snippet>print('foo %r' % object)</snippet></ROW><ROW><id>2821092</id><snippet>nanargmin</snippet></ROW><ROW><id>2821092</id><snippet>import numpy as np
a = np.array([ np.nan,   2.5,   3.,  np.nan,   4.,   5.])
print(np.nanargmin(a))
# 1
</snippet></ROW><ROW><id>2821092</id><snippet>nansum</snippet></ROW><ROW><id>2821092</id><snippet>nanmax</snippet></ROW><ROW><id>2821092</id><snippet>nanargmax</snippet></ROW><ROW><id>2821092</id><snippet>nanmin</snippet></ROW><ROW><id>2821092</id><snippet>scipy.stats</snippet></ROW><ROW><id>2821092</id><snippet>nanmean</snippet></ROW><ROW><id>2821092</id><snippet>nanmedian</snippet></ROW><ROW><id>2821092</id><snippet>nan</snippet></ROW><ROW><id>2821622</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>2821622</id><snippet>print</snippet></ROW><ROW><id>2821871</id><snippet>shutil.copytree</snippet></ROW><ROW><id>2821871</id><snippet>ignore</snippet></ROW><ROW><id>2821871</id><snippet>ignore</snippet></ROW><ROW><id>2821871</id><snippet>import shutil
def ignored_files(adir,filenames):
    return [filename for filename in filenames if not filename.endswith('foo')]

shutil.copytree(source, destination, ignore=ignored_files)
</snippet></ROW><ROW><id>2821965</id><snippet>button-press-event</snippet></ROW><ROW><id>2821965</id><snippet>gtk.TreeView</snippet></ROW><ROW><id>2821965</id><snippet>event.type</snippet></ROW><ROW><id>2821965</id><snippet>gtk.gdk._2BUTTON_PRESS</snippet></ROW><ROW><id>2821965</id><snippet>x</snippet></ROW><ROW><id>2821965</id><snippet>y</snippet></ROW><ROW><id>2821965</id><snippet>gtk.TreeView.get_path_at_pos()</snippet></ROW><ROW><id>2821965</id><snippet>gtk.TreeViewColumn</snippet></ROW><ROW><id>2822507</id><snippet>package_data</snippet></ROW><ROW><id>2822507</id><snippet>setup()</snippet></ROW><ROW><id>2822507</id><snippet>data_files</snippet></ROW><ROW><id>2822507</id><snippet>site-packages</snippet></ROW><ROW><id>2822507</id><snippet>import distutils.sysconfig

setup(
    # [...]
    data_files = [(distutils.sysconfig.get_python_lib(), ["/path/to/the/DLL"])],
)
</snippet></ROW><ROW><id>2823161</id><snippet>multiprocessing</snippet></ROW><ROW><id>2823221</id><snippet>name = 'b' + str(num)
</snippet></ROW><ROW><id>2823221</id><snippet>name = 'b%s' % num
</snippet></ROW><ROW><id>2823294</id><snippet>&gt;&gt;&gt; float("6,52353753563E-7")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for float(): 6,52353753563E-7
&gt;&gt;&gt; float("6.52353753563E-7")
6.5235375356299998e-07
</snippet></ROW><ROW><id>2823304</id><snippet>Widget</snippet></ROW><ROW><id>2823304</id><snippet>class EditWidget</snippet></ROW><ROW><id>2823304</id><snippet>class ManagedBase</snippet></ROW><ROW><id>2823304</id><snippet>events</snippet></ROW><ROW><id>2823304</id><snippet>Widget</snippet></ROW><ROW><id>2823304</id><snippet>class EditBitmapButton(ManagedBase):

    events = ['EVT_BUTTON']
</snippet></ROW><ROW><id>2823304</id><snippet>events</snippet></ROW><ROW><id>2823331</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; string.letters
'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
&gt;&gt;&gt; import random
&gt;&gt;&gt; random.choice(string.letters)
'j'
</snippet></ROW><ROW><id>2823331</id><snippet>string.letters</snippet></ROW><ROW><id>2823331</id><snippet>string.ascii_letters</snippet></ROW><ROW><id>2823331</id><snippet>random.choice</snippet></ROW><ROW><id>2823367</id><snippet>from collections import defaultdict
reversed_dict = defaultdict(list)
for key,value in mydict.iteritems():
    reversed_dict[value].append(key)
</snippet></ROW><ROW><id>2823480</id><snippet>sys.exit(0)
</snippet></ROW><ROW><id>2823480</id><snippet>import sys</snippet></ROW><ROW><id>2823480</id><snippet>break</snippet></ROW><ROW><id>2823480</id><snippet>while True:
    choice = get_input()
    if choice == "a":
        # do something
    elif choice == "q":
        break
</snippet></ROW><ROW><id>2823480</id><snippet>return</snippet></ROW><ROW><id>2823480</id><snippet>def run():
    while True:
        choice = get_input()
        if choice == "a":
            # do something
        elif choice == "q":
            return

if __name__ == "__main__":
    run()
</snippet></ROW><ROW><id>2823480</id><snippet>run()</snippet></ROW><ROW><id>2823480</id><snippet>return</snippet></ROW><ROW><id>2823480</id><snippet>return</snippet></ROW><ROW><id>2823603</id><snippet>
print [abstract['value'] for abstract in json_data["http://dbpedia.org/resource/Ceramic_art"]["http://dbpedia.org/ontology/abstract"] if abstract['lang'] == 'en'][0]
</snippet></ROW><ROW><id>2824231</id><snippet>def encode_base64(msg):
    """Encode the message's payload in Base64.

    Also, add an appropriate Content-Transfer-Encoding header.
    """
    orig = msg.get_payload()
    encdata = _bencode(orig)

    # new line inserted to ensure all bytes characters are converted to ASCII
    encdata = str(encdata, "ASCII")

    msg.set_payload(encdata)
    msg['Content-Transfer-Encoding'] = 'base64'
</snippet></ROW><ROW><id>2824487</id><snippet>resumetext = str(s['resumetext'])
</snippet></ROW><ROW><id>2824487</id><snippet>s['resumetext']</snippet></ROW><ROW><id>2824487</id><snippet>.split</snippet></ROW><ROW><id>2824487</id><snippet>if id2find in s['resumetext']: ...
</snippet></ROW><ROW><id>2824487</id><snippet>else</snippet></ROW><ROW><id>2824487</id><snippet>for</snippet></ROW><ROW><id>2824487</id><snippet>else</snippet></ROW><ROW><id>2824487</id><snippet>for each_line in resumes_f:
    s = dict(zip('id name resumetext'.split(), each_line.split(";"))
    if id2find in s['resumetext']:
        return(s)
print "No data matches your search query. Please try again"
</snippet></ROW><ROW><id>2824487</id><snippet>s</snippet></ROW><ROW><id>2824654</id><snippet>property</snippet></ROW><ROW><id>2824654</id><snippet>property</snippet></ROW><ROW><id>2825480</id><snippet>class DownloadItem(models.Model):

   name = models.CharField( etc etc)
   ... other attributes here ...


class DownloadItemFile(models.Model):
   parent = models.ForeignKey('DownloadItem', related_name="versions")
   version = models.CharField( etc etc)
   file = models.FileField(upload='path/to/uploaddir/')
</snippet></ROW><ROW><id>2825480</id><snippet>mydownloaditem.versions.all()
</snippet></ROW><ROW><id>2825480</id><snippet>class DownloadItemFileInline(admin.TabularInline):
    model           = DownloadItemFile

class DownloadItemAdminOptions(admin.ModelAdmin):
    inlines         = [ DownloadItemFileInline, ]
    ...other admin options here...    

admin.site.register(DownloadItem, DownloadItem AdminOptions) 
</snippet></ROW><ROW><id>2825580</id><snippet>class Spam(object):
    def __init__(self, description, value):
        self.description = description
        self.value = value

    @property
    def description(self):
        return self._description

    @description.setter
    def description(self, d):
        if not d: raise Exception("description cannot be empty")
        self._description = d

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, v):
        if not (v &gt; 0): raise Exception("value must be greater than zero")
        self._value = v
</snippet></ROW><ROW><id>2825580</id><snippet>__init__</snippet></ROW><ROW><id>2825794</id><snippet>request = urllib2.Request('http://localhost:8080/manager/deploy?path=/war_file', data=war_file_contents)
</snippet></ROW><ROW><id>2825920</id><snippet>unicode(value)</snippet></ROW><ROW><id>2825920</id><snippet>'first record'</snippet></ROW><ROW><id>2825920</id><snippet>u'first record'</snippet></ROW><ROW><id>2825920</id><snippet>.encode('charset')</snippet></ROW><ROW><id>2825955</id><snippet>os.path.isfile("gui/%s.py" % lang)</snippet></ROW><ROW><id>2825955</id><snippet>exec</snippet></ROW><ROW><id>2825955</id><snippet>__import__</snippet></ROW><ROW><id>2826051</id><snippet>db.allocate_ids()</snippet></ROW><ROW><id>2826051</id><snippet>from google.appengine.ext import db

# get unique ID number - I just get 1 here, but you could get many ...
new_ids = db.allocate_ids(handmade_key, 1)

# db.allocate_ids() may return longs but db.Key.from_path requires an int (issue 2970)
new_id_num = int(new_id[0])

# assign the new ID to an entity
new_key = db.Key.from_path('MyModel', new_id_num)
new_instance = MyModel(key=new_key)
...
new_instance.put()
</snippet></ROW><ROW><id>2826135</id><snippet>def get_data(request, xml_data):
    data = parse_xml_data(xml_data)
    return_data = create_xml_blob(data)
    return HttpResponse(return_data, mimetype='application/xml')
</snippet></ROW><ROW><id>2826135</id><snippet>xml_data = """&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;root&gt;my data here&lt;/root&gt;
"""

#construct and send the header

webservice = httplib.HTTP("example.com")
webservice.putrequest("POST", "/rcx-ws/rcx")
webservice.putheader("Host", "example.com")
webservice.putheader("User-Agent", "Python post")
webservice.putheader("Content-type", "text/xml; charset=\"UTF-8\"")
webservice.putheader("Content-length", "%d" % len(xml_data))
webservice.endheaders()
webservice.send(xml_data)
</snippet></ROW><ROW><id>2826135</id><snippet>request.raw_post_data</snippet></ROW><ROW><id>2826673</id><snippet>&lt;script&gt;
   $(document).ready(function()
   {
      $('#yourForm').submit();
   });
&lt;/script&gt;

&lt;form id="yourForm" action="/mypjt/my_timer" method="post"&gt;
...
your fields with data, even they are hidden
...
&lt;/form&gt;
</snippet></ROW><ROW><id>2826673</id><snippet> def my_timer(request):
     dict={}
     try:
         a=  timer.objects.get(pk=1)

         dict({'flag':1})
         return render_to_response('mypjt/display.html',context_instance=RequestContext(request,{'dict': dict}))
     except:
         dict({'flag':0})
         return render_to_response('mypjt/error_not_found.html',context_instance=RequestContext(request,{'dict': dict}))
</snippet></ROW><ROW><id>2826696</id><snippet>result = urlfetch.fetch(url, headers = {'Cache-Control' : 'max-age=240'})
</snippet></ROW><ROW><id>2826746</id><snippet>class Final(type):
    def __new__(cls, name, bases, classdict):
        for b in bases:
            if isinstance(b, Final):
                raise TypeError("type '{0}' is not an acceptable base type".format(b.__name__))
        return type.__new__(cls, name, bases, dict(classdict))

class C(metaclass=Final): pass

class D(C): pass
</snippet></ROW><ROW><id>2826746</id><snippet>Traceback (most recent call last):
  File "C:\Temp\final.py", line 10, in &lt;module&gt;
    class D(C): pass
  File "C:\Temp\final.py", line 5, in __new__
    raise TypeError("type '{0}' is not an acceptable base type".format(b.__name__))
TypeError: type 'C' is not an acceptable base type
</snippet></ROW><ROW><id>2827475</id><snippet>import math

def dotproduct(v1, v2):
  return sum((a*b) for a, b in zip(v1, v2))

def length(v):
  return math.sqrt(dotproduct(v, v))

def angle(v1, v2):
  return math.acos(dotproduct(v1, v2) / (length(v1) * length(v2)))
</snippet></ROW><ROW><id>2827734</id><snippet>obj = someobject
obj.a = lambda: None
setattr(obj.a, 'somefield', 'somevalue')
</snippet></ROW><ROW><id>2827734</id><snippet>Bunch</snippet></ROW><ROW><id>2827995</id><snippet>if __name__ == "__main__":
  from  optparse import OptionParser

  parser = OptionParser() 
  parser.add_option("-g","--gui_mode",
                    dest="guimode",
                    help="start program in gui mode",
                   action="store_true")

  (options,args) = parser.parse_args()

  if (options.guimode):
      print "start wx app"
  else:
      print "start cmd line app"
</snippet></ROW><ROW><id>2827995</id><snippet>.py</snippet></ROW><ROW><id>2827995</id><snippet>.pyw</snippet></ROW><ROW><id>2828170</id><snippet>#!/usr/bin/env python

import sys

def generate_log_report(logfile):
        for line in logfile:
                line_split = line.split()
                list = [line_split[0], line_split[1], line_split[2], line_split[4]]
                if "exim" in list[3]:
                        l = [line_split[0], line_split[1], line_split[2], line_split[4]]
                else:
                        li = [line_split[0], line_split[1], line_split[2], line_split[4]]
        return l


if __name__ == "__main__":
        if not len(sys.argv) &gt; 1:
                print __doc__
                sys.exit(1)
        infile_name = sys.argv[1]
        try:
                infile = open(infile_name, "r")
        except IOError:
                print "you must specify a valid file"
                print __doc__
                sys.exit(1)
        log_report = generate_log_report(infile)
        print log_report
        infile.close()
</snippet></ROW><ROW><id>2828310</id><snippet>&gt;&gt;&gt; u'\\u0e4f\\u032f\\u0361\\u0e4f'.decode('unicode-escape')
u'\u0e4f\u032f\u0361\u0e4f'
&gt;&gt;&gt; print u'\\u0e4f\\u032f\\u0361\\u0e4f'.decode('unicode-escape')
๏̯͡๏
</snippet></ROW><ROW><id>2828371</id><snippet>In [1]: import numpy as np

In [2]: a = np.array([[1,2,3],[4,5,6],[0,0,1]])

In [3]: np.sort(a.view('i8,i8,i8'), order=['f1'], axis=0).view(np.int)
Out[3]: 
array([[0, 0, 1],
       [1, 2, 3],
       [4, 5, 6]])
</snippet></ROW><ROW><id>2828371</id><snippet>In [6]: a.view('i8,i8,i8').sort(order=['f1'], axis=0) #&lt;-- returns None

In [7]: a
Out[7]: 
array([[0, 0, 1],
       [1, 2, 3],
       [4, 5, 6]])
</snippet></ROW><ROW><id>2828453</id><snippet>annotate</snippet></ROW><ROW><id>2828453</id><snippet>from django.db.models import Sum

annotated_projects = Project.objects.all().annotate(cost_sum=Sum('cost__cost'))
for project in annotated_projects:
    print project.title, project.cost_sum
</snippet></ROW><ROW><id>2828455</id><snippet>Service</snippet></ROW><ROW><id>2828455</id><snippet>__foo</snippet></ROW><ROW><id>2828455</id><snippet>_Service__foo</snippet></ROW><ROW><id>2828455</id><snippet>Service</snippet></ROW><ROW><id>2828455</id><snippet>__foo</snippet></ROW><ROW><id>2828455</id><snippet>BaseService</snippet></ROW><ROW><id>2828455</id><snippet>Base</snippet></ROW><ROW><id>2828459</id><snippet>dict(zip(['id','username','email'],result))</snippet></ROW><ROW><id>2828459</id><snippet>session.execute</snippet></ROW><ROW><id>2828459</id><snippet>session.query</snippet></ROW><ROW><id>2828459</id><snippet>.one()</snippet></ROW><ROW><id>2828459</id><snippet>.limit(1)</snippet></ROW><ROW><id>2828620</id><snippet># -*- coding: utf-8 -*-
import sqlite3

# create db in memory
conn = sqlite3.connect(":memory:")
cur = conn.cursor()
cur.execute("CREATE TABLE personal ("
            "id INTEGER PRIMARY KEY,"
            "name VARCHAR(42) NOT NULL)")

# insert random name
import random
fabricate_hebrew_name = lambda: random.choice([
    u'ירדן',u'יפה',u'תמי',u'ענת', u'רבקה',u'טלי',u'גינה',u'דנה',u'ימית',
    u'אלונה',u'אילן',u'אדם',u'חווה'])

cur.execute("INSERT INTO personal VALUES("
            "NULL, :name)", dict(name=fabricate_hebrew_name()))
conn.commit()

id, name = cur.execute("SELECT * FROM personal").fetchone()
print id, name
# -&gt; 1 אלונה
</snippet></ROW><ROW><id>2829036</id><snippet>stdout</snippet></ROW><ROW><id>2829036</id><snippet>foo</snippet></ROW><ROW><id>2829036</id><snippet>print</snippet></ROW><ROW><id>2829036</id><snippet>copy</snippet></ROW><ROW><id>2829036</id><snippet>import sys
save_stdout = sys.stdout
sys.stdout = open('trash', 'w')
foo()
sys.stdout = save_stdout
</snippet></ROW><ROW><id>2829036</id><snippet>import sys
import cStringIO
save_stdout = sys.stdout
sys.stdout = cStringIO.StringIO()
foo()
sys.stdout = save_stdout
</snippet></ROW><ROW><id>2829036</id><snippet>import contextlib
import sys
import cStringIO

@contextlib.contextmanager
def nostdout():
    save_stdout = sys.stdout
    sys.stdout = cStringIO.StringIO()
    yield
    sys.stdout = save_stdout
</snippet></ROW><ROW><id>2829036</id><snippet>with nostdout():
    foo()
</snippet></ROW><ROW><id>2829036</id><snippet>write</snippet></ROW><ROW><id>2829036</id><snippet>import contextlib
import sys

class DummyFile(object):
    def write(self, x): pass

@contextlib.contextmanager
def nostdout():
    save_stdout = sys.stdout
    sys.stdout = DummyFile()
    yield
    sys.stdout = save_stdout
</snippet></ROW><ROW><id>2829036</id><snippet>nostdout</snippet></ROW><ROW><id>2829252</id><snippet>width_chars</snippet></ROW><ROW><id>2829252</id><snippet>gtk.Label</snippet></ROW><ROW><id>2829252</id><snippet>import gtk

window = gtk.Window ()
align  = gtk.Alignment (0.5, 0.5)
button = gtk.Button ('a very long, possibly multiline text')

label = button.child
label.props.wrap = True
label.props.width_chars = 20

window.set_default_size (500, 500)
window.connect ('destroy', lambda *ignored: gtk.main_quit ())

window.add (align)
align.add (button)
window.show_all ()

gtk.main ()
</snippet></ROW><ROW><id>2829317</id><snippet>./manage.py validate</snippet></ROW><ROW><id>2829320</id><snippet>#shifts by 4 bits and converts to 8-bit image
img = img.point(lambda i: i * 16, "L") 
</snippet></ROW><ROW><id>2829642</id><snippet>if</snippet></ROW><ROW><id>2829642</id><snippet>while</snippet></ROW><ROW><id>2829642</id><snippet>var</snippet></ROW><ROW><id>2829931</id><snippet>a = ['item1', 'item2', 'item3', 'item4', 'item5', 'item6', 'item7', 'item8', 'item9', 'item10']

print zip(a, a[1:])
</snippet></ROW><ROW><id>2829931</id><snippet>[('item1', 'item2'), ('item2', 'item3'), ('item3', 'item4'), ('item4', 'item5'), ('item5', 'item6'), ('item6', 'item7'), ('item7', 'item8'), ('item8', 'item9'), ('item9', 'item10')]
</snippet></ROW><ROW><id>2830065</id><snippet>extra</snippet></ROW><ROW><id>2830065</id><snippet># annotate whether you've already voted on this item
table = Vote._meta.db_table
select = 'SELECT COUNT(id) FROM %s' %table
where1 = 'WHERE ' + table + '.user_id = %s'
where2 = 'AND ' + table + '.item_id = appname_item.id'
items = items.extra(
        select={'votes':" ".join((select, where1, where2,))},
        select_params=(request.user.id,)
    )
</snippet></ROW><ROW><id>2830065</id><snippet>unique_together = ('link', 'user')</snippet></ROW><ROW><id>2830127</id><snippet>thread_obj.start()</snippet></ROW><ROW><id>2830127</id><snippet>import sys
import threading
import Queue


class ExcThread(threading.Thread):

    def __init__(self, bucket):
        threading.Thread.__init__(self)
        self.bucket = bucket

    def run(self):
        try:
            raise Exception('An error occured here.')
        except Exception:
            self.bucket.put(sys.exc_info())


def main():
    bucket = Queue.Queue()
    thread_obj = ExcThread(bucket)
    thread_obj.start()

    while True:
        try:
            exc = bucket.get(block=False)
        except Queue.Empty:
            pass
        else:
            exc_type, exc_obj, exc_trace = exc
            # deal with the exception
            print exc_type, exc_obj
            print exc_trace

        thread_obj.join(0.1)
        if thread_obj.isAlive():
            continue
        else:
            break


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>2830209</id><snippet>OptionGroup</snippet></ROW><ROW><id>2830209</id><snippet>optparse</snippet></ROW><ROW><id>2830209</id><snippet>from optparse import OptionParser</snippet></ROW><ROW><id>2830209</id><snippet>OptionParser</snippet></ROW><ROW><id>2830209</id><snippet>OptionGroup</snippet></ROW><ROW><id>2830209</id><snippet>optparse</snippet></ROW><ROW><id>2830209</id><snippet>import optparse
parser = optparse.OptionParser()
outputGroup = optparse.OptionGroup(parser, 'Output handling')
</snippet></ROW><ROW><id>2830411</id><snippet>assert</snippet></ROW><ROW><id>2830411</id><snippet>if __debug__: ...</snippet></ROW><ROW><id>2830411</id><snippet>-O</snippet></ROW><ROW><id>2830411</id><snippet>-OO</snippet></ROW><ROW><id>2830550</id><snippet>&gt;&gt;&gt; print soupHandler.findAll('div', id=lambda x: x and x.startswith('post-'))
[&lt;div id="post-45"&gt;...&lt;/div&gt;, &lt;div id="post-334"&gt;...&lt;/div&gt;]
</snippet></ROW><ROW><id>2830550</id><snippet>&gt;&gt;&gt; print soupHandler.findAll('div', id=re.compile('^post-'))
[&lt;div id="post-45"&gt;...&lt;/div&gt;, &lt;div id="post-334"&gt;...&lt;/div&gt;]
</snippet></ROW><ROW><id>2830782</id><snippet>foo1(); foo2(); foo1()
foo3()
</snippet></ROW><ROW><id>2830782</id><snippet>curpos(1,0); foo1(); curpos(1,8); foo2(); curpos(1,16); foo1()
curpos(2,0); foo3()
</snippet></ROW><ROW><id>2830782</id><snippet>curpos(line,char)</snippet></ROW><ROW><id>2831033</id><snippet>class Dataset:
    individuals = []
</snippet></ROW><ROW><id>2831033</id><snippet>Dataset</snippet></ROW><ROW><id>2831033</id><snippet>self.individuals= something</snippet></ROW><ROW><id>2831033</id><snippet>__init__</snippet></ROW><ROW><id>2831033</id><snippet>individuals</snippet></ROW><ROW><id>2831033</id><snippet>    def __init__(self, individuals=[]):
</snippet></ROW><ROW><id>2831033</id><snippet>individuals</snippet></ROW><ROW><id>2831033</id><snippet>self.individuals</snippet></ROW><ROW><id>2831033</id><snippet>individuals</snippet></ROW><ROW><id>2831033</id><snippet>Dataset</snippet></ROW><ROW><id>2831033</id><snippet>Dataset</snippet></ROW><ROW><id>2831033</id><snippet>individuals</snippet></ROW><ROW><id>2831033</id><snippet>class Node:
    def __init__(self, level, dataset=Dataset()):
</snippet></ROW><ROW><id>2831033</id><snippet>Node</snippet></ROW><ROW><id>2831033</id><snippet>dataset</snippet></ROW><ROW><id>2831033</id><snippet>Dataset</snippet></ROW><ROW><id>2831215</id><snippet>def addit(x, L=[]):
    L.append(x)
    return L
</snippet></ROW><ROW><id>2831215</id><snippet>def addit(x,L=None):
     if L is None:
         L=[]
     L.append(x)
     return L
</snippet></ROW><ROW><id>2831215</id><snippet>addit(1)</snippet></ROW><ROW><id>2831215</id><snippet>addit(2)</snippet></ROW><ROW><id>2831215</id><snippet>[1,2]</snippet></ROW><ROW><id>2831215</id><snippet>[1]</snippet></ROW><ROW><id>2831215</id><snippet>[2]</snippet></ROW><ROW><id>2831215</id><snippet>None</snippet></ROW><ROW><id>2831242</id><snippet>x in s</snippet></ROW><ROW><id>2831362</id><snippet>&gt;&gt;&gt; dict([('a', 'b'), ('a', 'c')])
{'a': 'c'}
</snippet></ROW><ROW><id>2831362</id><snippet>employee_id</snippet></ROW><ROW><id>2831362</id><snippet>employees = {}
for row in gd_extract:
    if row['employee_id'] in employees:
        ... handle duplicates in employees dictionary ...
    else:
        employees[row['employee_id']] = row
</snippet></ROW><ROW><id>2831362</id><snippet>import re
retelephone = re.compile(r'[-\(\)\s]') # remove dashes, open/close parens, and spaces
for empid, row in employees.iteritems():
    retelephone.sub('',row['telephone'])
</snippet></ROW><ROW><id>2831551</id><snippet>a = a[~np.isnan(a)]
</snippet></ROW><ROW><id>2831677</id><snippet>d = dict([(y,x) for x,y in enumerate(t)])
</snippet></ROW><ROW><id>2831677</id><snippet>d = dict((y,x) for x,y in enumerate(t))
</snippet></ROW><ROW><id>2831837</id><snippet>from time import sleep
from threading import Thread

def some_task():
    while True:
        pass

t = Thread(target=some_task)  # run the some_task function in another
                              # thread
t.daemon = True               # Python will exit when the main thread
                              # exits, even if this thread is still
                              # running
t.start()

snooziness = int(raw_input('Enter the amount of seconds you want to run this: '))
sleep(snooziness)

# Since this is the end of the script, Python will now exit.  If we
# still had any other non-daemon threads running, we wouldn't exit.
# However, since our task is a daemon thread, Python will exit even if
# it's still going.
</snippet></ROW><ROW><id>2831837</id><snippet>sleep</snippet></ROW><ROW><id>2831905</id><snippet>className</snippet></ROW><ROW><id>2831905</id><snippet>valid_identifier_chars</snippet></ROW><ROW><id>2831905</id><snippet>valid_identifier_chars</snippet></ROW><ROW><id>2832414</id><snippet>p = argparse.ArgumentParser()
p.add_argument('-o', action='append')
for i in range(1, 4): p.add_argument('arg%d' % i)
args = p.parse_args('-o option1 arg1 -o option2 arg2 arg3'.split())
print args
# -&gt; Namespace(arg1='arg1', arg2='arg2', arg3='arg3', o=['option1', 'option2'])
</snippet></ROW><ROW><id>2832557</id><snippet>from google.appengine.runtime import apiproxy_errors

...

try:
    #the code you are getting the error at
except apiproxy_errors.RequestTooLargeError, message:
    print message # or something else
</snippet></ROW><ROW><id>2832941</id><snippet>imp.load_module</snippet></ROW><ROW><id>2833273</id><snippet>str = etree.tostring(root, pretty_print=True)
</snippet></ROW><ROW><id>2833273</id><snippet>et = etree.ElementTree(root)
et.write(sys.stdout)
</snippet></ROW><ROW><id>2833559</id><snippet>csv</snippet></ROW><ROW><id>2833559</id><snippet>struct</snippet></ROW><ROW><id>2833559</id><snippet>mysqldb</snippet></ROW><ROW><id>2833559</id><snippet>sqlobject</snippet></ROW><ROW><id>2833559</id><snippet>sqlalchemy</snippet></ROW><ROW><id>2834134</id><snippet>from socket import socket


class PolySocket(object):
    def __init__(self, *p):
        print "PolySocket init"
        self._sock = socket(*p)

    def __getattr__(self, name):
        return getattr(self._sock, name)

    def sendall(self, *p):
        print "PolySocket sendall"
        return self._sock.sendall(*p)

    def send(self, *p):
        print "PolySocket send"
        return self._sock.send(*p)

    def connect(self, *p):
        print "connecting..."
        self._sock.connect(*p)
        print "connected"

HOST = "stackoverflow.com"
PORT = 80
readbuffer = ""

s = PolySocket()
s.connect((HOST, PORT))
s.send("a")
s.sendall("a")
</snippet></ROW><ROW><id>2834134</id><snippet>% python foo.py
PolySocket init
connecting...
connected
PolySocket send
PolySocket sendall
</snippet></ROW><ROW><id>2834705</id><snippet>import urllib
from xml.dom import minidom
from google.appengine.api import urlfetch

params = urllib.urlencode({'p': loc_param, 'u': units,})
full_uri = '?'.join([url, params,])

result = urlfetch.fetch(full_uri)
if result.status_code == 200:
    return minidom.parseString(result.content)
</snippet></ROW><ROW><id>2834797</id><snippet>unicode(requestHandler.read())</snippet></ROW><ROW><id>2834797</id><snippet>read</snippet></ROW><ROW><id>2834797</id><snippet>unicode</snippet></ROW><ROW><id>2834797</id><snippet>ascii</snippet></ROW><ROW><id>2834797</id><snippet>.decode</snippet></ROW><ROW><id>2834797</id><snippet>unicode(requestHandler.read(), 'utf-8')</snippet></ROW><ROW><id>2834797</id><snippet>requestHandler.read().decode('utf-8')</snippet></ROW><ROW><id>2834797</id><snippet>utf-8</snippet></ROW><ROW><id>2834797</id><snippet>D0</snippet></ROW><ROW><id>2834797</id><snippet>print</snippet></ROW><ROW><id>2834797</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>2834797</id><snippet>&gt;&gt;&gt; sys.stdout.encoding
'UTF-8'
</snippet></ROW><ROW><id>2834797</id><snippet>&gt;&gt;&gt; print u'\xabutf8\xbb'
«utf8»
</snippet></ROW><ROW><id>2834797</id><snippet>&gt;&gt;&gt; print u'\xabutf8\xbb'.encode('utf8')
«utf8»
</snippet></ROW><ROW><id>2835019</id><snippet>__lt__</snippet></ROW><ROW><id>2835019</id><snippet>&gt;</snippet></ROW><ROW><id>2835019</id><snippet>float</snippet></ROW><ROW><id>2835019</id><snippet>bool</snippet></ROW><ROW><id>2835019</id><snippet>id</snippet></ROW><ROW><id>2835125</id><snippet>eacute</snippet></ROW><ROW><id>2835125</id><snippet>é</snippet></ROW><ROW><id>2835125</id><snippet>&lt;!DOCTYPE&gt;</snippet></ROW><ROW><id>2835125</id><snippet>é</snippet></ROW><ROW><id>2835125</id><snippet>&lt;!DOCTYPE&gt;</snippet></ROW><ROW><id>2835125</id><snippet>é</snippet></ROW><ROW><id>2835125</id><snippet>é</snippet></ROW><ROW><id>2835125</id><snippet>é</snippet></ROW><ROW><id>2835394</id><snippet># -*- coding: utf-8 -*-

import urllib
import urlparse

URL1 = u'http://сайт.рф/путь?запрос'
URL2 = 'http://%D1%81%D0%B0%D0%B9%D1%82.%D1%80%D1%84/'

def to_idn(url):
    parts = list(urlparse.urlparse(url))
    parts[1] = parts[1].encode('idna')
    parts[2:] = [urllib.quote(s.encode('utf-8')) for s in parts[2:]]
    return urlparse.urlunparse(parts)

def from_idn(url):
    return urllib.unquote(url)

print to_idn(URL1)
print from_idn(URL2)
print to_idn(from_idn(URL2).decode('utf-8'))
</snippet></ROW><ROW><id>2835394</id><snippet>http://xn--80aswg.xn--p1ai/%D0%BF%D1%83%D1%82%D1%8C?%D0%B7%D0%B0%D0%BF%D1%80%D0%BE%D1%81
http://сайт.рф/
http://xn--80aswg.xn--p1ai/
</snippet></ROW><ROW><id>2835394</id><snippet>iri_to_uri</snippet></ROW><ROW><id>2835394</id><snippet>uri_to_iri</snippet></ROW><ROW><id>2835394</id><snippet>encodeURI</snippet></ROW><ROW><id>2835394</id><snippet>decodeURI</snippet></ROW><ROW><id>2835658</id><snippet>testObject = myClass</snippet></ROW><ROW><id>2835658</id><snippet>class myClass: 
    pass 

testObject = myClass() 
print testObject.__class__ 
</snippet></ROW><ROW><id>2835672</id><snippet>[]</snippet></ROW><ROW><id>2835672</id><snippet>{}</snippet></ROW><ROW><id>2835672</id><snippet>[]</snippet></ROW><ROW><id>2835672</id><snippet>{}</snippet></ROW><ROW><id>2835672</id><snippet>{"maps":[{"id":"blabla","iscategorical":"0"},{"id":"blabla","iscategorical":"0"}],
"masks":{"id":"valore"},
"om_points":"value",
"parameters":{"id":"valore"}
}
</snippet></ROW><ROW><id>2835672</id><snippet>import json
from pprint import pprint
json_data=open('json_data')

data = json.load(json_data)
pprint(data)
json_data.close()
</snippet></ROW><ROW><id>2835672</id><snippet>data["maps"][0]["id"]
data["masks"]["id"]
data["om_points"]
</snippet></ROW><ROW><id>2835712</id><snippet>self</snippet></ROW><ROW><id>2835712</id><snippet>self</snippet></ROW><ROW><id>2835712</id><snippet>self.growl(register)
</snippet></ROW><ROW><id>2835815</id><snippet>is</snippet></ROW><ROW><id>2835815</id><snippet>is</snippet></ROW><ROW><id>2835815</id><snippet>isinstance</snippet></ROW><ROW><id>2835815</id><snippet>&gt;&gt;&gt; class animal(object): pass

&gt;&gt;&gt; class dog(animal): pass

&gt;&gt;&gt; myDog = dog()
&gt;&gt;&gt; isinstance(myDog, dog)
True
&gt;&gt;&gt; isinstance(myDog, animal)
True
</snippet></ROW><ROW><id>2835815</id><snippet>isinstance</snippet></ROW><ROW><id>2836066</id><snippet>intlist = range(1,10)
randomeven = random.choice([i for i in intlist if i % 2 == 0])
</snippet></ROW><ROW><id>2836269</id><snippet>urllib</snippet></ROW><ROW><id>2836269</id><snippet>%D0%BF...</snippet></ROW><ROW><id>2836530</id><snippet>    double fontSize = 20.0;
    bool bFontFits = false;

    while (bFontFits == false)
    {
        m_pCanvas-&gt;Font-&gt;Size = (int)fontSize;
        TSize te = m_pCanvas-&gt;TextExtent(m_name.c_str());
        if (te.cx &lt; (width*0.90))  // Allow a little room on each side
        {
            // Calculate the position
            m_labelOrigin.x = rectX + (width/2.0) - (te.cx/2);
            m_labelOrigin.y = rectY + (height/2.0) - te.cy/2);
            m_fontSize = fontSize;
            bFontFits = true;
            break;
        }
        fontSize -= 1.0;
}
</snippet></ROW><ROW><id>2836600</id><snippet>xmldoc=minidom.parse(directory)</snippet></ROW><ROW><id>2836600</id><snippet>parse()</snippet></ROW><ROW><id>2836600</id><snippet>xmldoc=minidom.parse("directory/model_template.xml")
child = xmldoc.createElement("map")
    for node in xmldoc.getElementsByTagName("Environment"):
        node.appendChild(child)
</snippet></ROW><ROW><id>2836600</id><snippet>print xmldoc.toxml()</snippet></ROW><ROW><id>2836600</id><snippet>map</snippet></ROW><ROW><id>2836600</id><snippet>Environment</snippet></ROW><ROW><id>2836600</id><snippet>&lt;Environment&gt;&lt;map/&gt;&lt;/Environment&gt;</snippet></ROW><ROW><id>2837314</id><snippet>function doUpdate() {
  $.ajax({type: "GET", url : tailServiceUrl,
          success: function (data) {
             if (data.length &gt; 4)
             {
                // Data are assumed to be in HTML format
                // Return something like &lt;p/&gt; in case of no updates
                $("#logOutputDiv").append(data);
             }
             setTimeout("doUpdate()", 2000);
           }});
}

setTimeout("doUpdate()", 2000);
</snippet></ROW><ROW><id>2837319</id><snippet>subprocess.call</snippet></ROW><ROW><id>2837319</id><snippet>#start and block until done
subprocess.call([data["om_points"], "&gt;", diz['d']+"/points.xml"])
</snippet></ROW><ROW><id>2837319</id><snippet>stdin</snippet></ROW><ROW><id>2837319</id><snippet>communicate</snippet></ROW><ROW><id>2837319</id><snippet>popen</snippet></ROW><ROW><id>2837319</id><snippet>#start and process things, then wait
p = subprocess.Popen(([data["om_points"], "&gt;", diz['d']+"/points.xml"])
print "Happens while running"
p.communicate() #now wait
</snippet></ROW><ROW><id>2837319</id><snippet>wait</snippet></ROW><ROW><id>2837877</id><snippet>try</snippet></ROW><ROW><id>2837877</id><snippet>finally</snippet></ROW><ROW><id>2837877</id><snippet>def do_something_that_needs_database ():
    dbConnection = MySQLdb.connect(host=args['database_host'], user=args['database_user'], passwd=args['database_pass'], db=args['database_tabl'], cursorclass=MySQLdb.cursors.DictCursor)
    try:
       # as much work as you want, including return, raising exceptions, _whatever_
    finally:
       closeDb(dbConnection)
</snippet></ROW><ROW><id>2837877</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>2837877</id><snippet>try</snippet></ROW><ROW><id>2837877</id><snippet>finally</snippet></ROW><ROW><id>2837877</id><snippet>with</snippet></ROW><ROW><id>2837877</id><snippet>with somecontext as whatever:
   # the work goes here
</snippet></ROW><ROW><id>2837877</id><snippet>__enter__</snippet></ROW><ROW><id>2837877</id><snippet>whatever</snippet></ROW><ROW><id>2837877</id><snippet>__exit__</snippet></ROW><ROW><id>2837877</id><snippet>contextlib</snippet></ROW><ROW><id>2837877</id><snippet>contextlib</snippet></ROW><ROW><id>2837877</id><snippet>import contextlib

@contextlib.contextmanager
def dbconnect(**kwds):
  dbConnection = MySQLdb.connect(**kwds)
  try:
    yield dbConnection
  finally:
    closeDb(dbConnection)
</snippet></ROW><ROW><id>2837877</id><snippet>def do_something_that_needs_database ():
    with dbconnect(host=args['database_host'], user=args['database_user'], 
                   passwd=args['database_pass'], db=args['database_tabl'], 
                   cursorclass=MySQLdb.cursors.DictCursor) as dbConnection:
       # as much work as you want, including return, raising exceptions, _whatever_
</snippet></ROW><ROW><id>2838080</id><snippet>for l in tun.stdout:
</snippet></ROW><ROW><id>2838080</id><snippet>while True:
    l = tun.stdout.readline()
</snippet></ROW><ROW><id>2838110</id><snippet>filename</snippet></ROW><ROW><id>2838110</id><snippet>filename.decode('utf-8')</snippet></ROW><ROW><id>2838110</id><snippet>unicode(...)</snippet></ROW><ROW><id>2838110</id><snippet>ascii</snippet></ROW><ROW><id>2838181</id><snippet>def cost(request, offset):
    if request.method == 'POST':
        project = Project.objects.get(title=offset)
        date = request.POST.get('date', '')
        cost = request.POST.get('cost', '')
        cost_obj = Cost(project=project, date=date, cost=cost)
        cost_obj.save()
        return HttpResponseRedirect('/')
</snippet></ROW><ROW><id>2838309</id><snippet>def get_open_port():
        import socket
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.bind(("",0))
        s.listen(1)
        port = s.getsockname()[1]
        s.close()
        return port
</snippet></ROW><ROW><id>2838313</id><snippet>def iterate_strings(n):
    if n &lt;= 0:
        yield ''
        return
    for c in string.ascii_lowercase:
        for s in iterate_strings(n - 1):
            yield c + s
</snippet></ROW><ROW><id>2838313</id><snippet>for s in iterate_strings(5)
</snippet></ROW><ROW><id>2838313</id><snippet>list(iterate_strings(5))
</snippet></ROW><ROW><id>2838313</id><snippet>def iterate_strings(n):
    yield ''
    if n &lt;= 0:
        return
    for c in string.ascii_lowercase:
        for s in iterate_strings(n - 1):
            yield c + s
</snippet></ROW><ROW><id>2838577</id><snippet>C:\py\twisted</snippet></ROW><ROW><id>2838577</id><snippet>sys.path</snippet></ROW><ROW><id>2838577</id><snippet>.py</snippet></ROW><ROW><id>2838577</id><snippet>sys.path</snippet></ROW><ROW><id>2838577</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>2838577</id><snippet>sys.path</snippet></ROW><ROW><id>2838577</id><snippet>C:\foo\bar\' is added to the front of</snippet></ROW><ROW><id>2838577</id><snippet>.  But when you run "twistd ...", nothing useful is added to</snippet></ROW><ROW><id>2838577</id><snippet>C:\py\twisted</snippet></ROW><ROW><id>2838577</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>2838738</id><snippet>[r[:-1] for r in s[1:]]
</snippet></ROW><ROW><id>2838795</id><snippet>table.id</snippet></ROW><ROW><id>2838795</id><snippet>create index table_id_index on table(id)
</snippet></ROW><ROW><id>2838897</id><snippet>Project -&gt; Build Automatically</snippet></ROW><ROW><id>2838929</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt;
&gt;&gt;&gt; def fringe8((px, py), (x1, y1, x2, y2)):
...     f = [(px+dx, py+dy) for (dx, dy) in product((-1,0,1),(-1,0,1)) if (dx, dy) != (0, 0)]
...     f_inrange = [(fx, fy) for (fx, fy) in f if x1 &lt;= fx &lt; x2 and y1 &lt;= fy &lt; y2]
...     return f_inrange
...   
&gt;&gt;&gt; fringe8((2, 2), (1, 1, 3, 3))
[(1, 1), (1, 2), (2, 1)]
</snippet></ROW><ROW><id>2839007</id><snippet>def</snippet></ROW><ROW><id>2839007</id><snippet>def fringe8((px, py), (x1, y1, x2, y2)):
</snippet></ROW><ROW><id>2839007</id><snippet>itertools</snippet></ROW><ROW><id>2839010</id><snippet>argv=[sys.argv[0]]</snippet></ROW><ROW><id>2839010</id><snippet>unittest.main()</snippet></ROW><ROW><id>2839151</id><snippet>blist</snippet></ROW><ROW><id>2839437</id><snippet>class MyDecorator(object):
    def __init__(self, debug):
        self.debug = debug
    def myfunc(self, a):
        def decorator(fn):
            def new_fn():
                if self.debug:
                    print a
                fn()
            return new_fn
        return decorator
    def myotherfunc(self, x):
        def decorator(fn):
            def new_fn():
                if self.debug:
                    print x
                fn()
            return new_fn
        return decorator
</snippet></ROW><ROW><id>2840002</id><snippet>echo</snippet></ROW><ROW><id>2840002</id><snippet>print</snippet></ROW><ROW><id>2840002</id><snippet>for r in range(runs):</snippet></ROW><ROW><id>2840002</id><snippet>date</snippet></ROW><ROW><id>2840002</id><snippet>db2</snippet></ROW><ROW><id>2840002</id><snippet>import reads.py</snippet></ROW><ROW><id>2840084</id><snippet>$ echo "lots of $$"
lots of 15570
$ echo 'lots of $$'
lots of $$
</snippet></ROW><ROW><id>2840245</id><snippet>"#,###.00"</snippet></ROW><ROW><id>2840245</id><snippet>float("1234567.89")</snippet></ROW><ROW><id>2840245</id><snippet>import xlwt
b = xlwt.Workbook()
s = b.add_sheet('x')
style = xlwt.easyxf("", "#,###.00")
s.write(0, 0, 1234567.89, style)
b.save("locale_fmt_demo.xls")
</snippet></ROW><ROW><id>2840245</id><snippet>English (Australia): 1,234,567.89  
Portuguese (Brazil): 1.234.567,89
French (France):     1 234 567,89
</snippet></ROW><ROW><id>2840474</id><snippet>setUp</snippet></ROW><ROW><id>2840474</id><snippet>tearDown</snippet></ROW><ROW><id>2840474</id><snippet>tearDown</snippet></ROW><ROW><id>2840474</id><snippet>class MyTesting(unittest.TestCase):
    def setUp(self):
        self.u1 = User.objects.create(username='user1')
        self.up1 = UserProfile.objects.create(user=self.u1)

    def testA(self):
        ...

    def tearDown(self):
        self.up1.delete()
        self.u1.delete()
</snippet></ROW><ROW><id>2840474</id><snippet>post_save</snippet></ROW><ROW><id>2840508</id><snippet>handlers:
- url: /letmein/.*
  script: letmein.py

- url: .*
  script: main.py
</snippet></ROW><ROW><id>2840934</id><snippet>form.defaults={'myStruct': {'a': None, 'b': 'default_value'}}
</snippet></ROW><ROW><id>2841456</id><snippet>return get, set</snippet></ROW><ROW><id>2841456</id><snippet>Prop</snippet></ROW><ROW><id>2841456</id><snippet>def Prop(fcn):
    g, s = fcn()
    return property(g, s)
</snippet></ROW><ROW><id>2841456</id><snippet>return</snippet></ROW><ROW><id>2841456</id><snippet>def</snippet></ROW><ROW><id>2841456</id><snippet>def</snippet></ROW><ROW><id>2841456</id><snippet>return</snippet></ROW><ROW><id>2841456</id><snippet>def</snippet></ROW><ROW><id>2841456</id><snippet>class</snippet></ROW><ROW><id>2841456</id><snippet>def Prop(cls):
    f = cls.__dict__
    return property(f['get'], f['set'])


#### test ####

class Example(object):

    @Prop
    class myattr():

        def get(self):
            print 'getting', self._value
            return self._value

        def set(self, value):
            print 'setting', value
            self._value = value


e = Example()
e.myattr = 'somevalue' 
print e.myattr
</snippet></ROW><ROW><id>2841456</id><snippet>__dict__</snippet></ROW><ROW><id>2841456</id><snippet>s/def/class/</snippet></ROW><ROW><id>2841456</id><snippet>return</snippet></ROW><ROW><id>2841479</id><snippet>SELECT hour, location, COUNT(*) FROM events GROUP BY hour, location ORDER BY hour, location</snippet></ROW><ROW><id>2841479</id><snippet>timed_events = {}
# Count them up
for event in events_from_database:
    timed_events[event] = timed_events.setdefault(event, 0) + 1

# Form a new list with the original data plus the count
aggregate_list = [(evt[0], evt[1], count) for evt,count in events.items()]
</snippet></ROW><ROW><id>2841485</id><snippet>/path/to/your/python setup.py install
</snippet></ROW><ROW><id>2841498</id><snippet>b</snippet></ROW><ROW><id>2841498</id><snippet>b</snippet></ROW><ROW><id>2841498</id><snippet>for</snippet></ROW><ROW><id>2841498</id><snippet>while</snippet></ROW><ROW><id>2841711</id><snippet>arr[i][j] = abs(hypot(i-s1x,j-s1y) - hypot(i-s2x,j-s2y))
</snippet></ROW><ROW><id>2841711</id><snippet>i</snippet></ROW><ROW><id>2841711</id><snippet>j</snippet></ROW><ROW><id>2841711</id><snippet>hypot</snippet></ROW><ROW><id>2841711</id><snippet>i</snippet></ROW><ROW><id>2841711</id><snippet>j</snippet></ROW><ROW><id>2841711</id><snippet>numpy.mgrid</snippet></ROW><ROW><id>2841711</id><snippet>array_i,array_j = np.mgrid[0:width,0:height]
</snippet></ROW><ROW><id>2841711</id><snippet>(width, height)</snippet></ROW><ROW><id>2841711</id><snippet>(width,height,3)</snippet></ROW><ROW><id>2841711</id><snippet>arr = (arr * np.ones((3,1,1))).transpose(1,2,0)
</snippet></ROW><ROW><id>2841711</id><snippet>import math, array
import numpy as np
from PIL import Image

size = (800,800)
width, height = size

s1x = width * 1./8
s1y = height * 1./8
s2x = width * 7./8
s2y = height * 7./8

r,g,b = (255,255,255)

array_i,array_j = np.mgrid[0:width,0:height]

arr = np.abs(np.hypot(array_i-s1x, array_j-s1y) -
             np.hypot(array_i-s2x, array_j-s2y))

arr = (arr * np.ones((3,1,1))).transpose(1,2,0)

arr2 = np.zeros((width,height,3),dtype="uint8")
for ld in [200,116,100,84,68,52,36,20,8,4,2]:
    print 'now computing image for ld = '+str(ld)
    # Rest as before
</snippet></ROW><ROW><id>2841853</id><snippet>@"str"</snippet></ROW><ROW><id>2841853</id><snippet>"str"</snippet></ROW><ROW><id>2841853</id><snippet>"</snippet></ROW><ROW><id>2841853</id><snippet>var str = @"allows
  multiline, but still need to encode "" as two chars";
var str = "need to use backslahs \" here";
</snippet></ROW><ROW><id>2841853</id><snippet>XElement</snippet></ROW><ROW><id>2841853</id><snippet>"""</snippet></ROW><ROW><id>2841908</id><snippet>&lt;a href="#" ${'class="friend"' if c.is_friend else ''}&gt;link&lt;/a&gt;
</snippet></ROW><ROW><id>2842132</id><snippet>&gt;&gt;&gt; def getitem(context, key):
    try:
        return context[key]
    except KeyError:
        pass
    cur, _, rest = key.partition('.')
    rest = int(rest) if rest.isdigit() else rest
    return getitem(context[cur], rest)


&gt;&gt;&gt; getitem(context, 'admins.0')
'number2@virtucon.com'
&gt;&gt;&gt; getitem(context, 'database.users.0')
'number2'
&gt;&gt;&gt; getitem(context, 'database.users.1')
'dr_evil'
</snippet></ROW><ROW><id>2842132</id><snippet>getattr</snippet></ROW><ROW><id>2842132</id><snippet>operator.getitem</snippet></ROW><ROW><id>2842245</id><snippet>json</snippet></ROW><ROW><id>2842245</id><snippet>simplejson</snippet></ROW><ROW><id>2842245</id><snippet>import rdfxml
import json

class Sink(object): 
   def __init__(self): self.result = []
   def triple(self, s, p, o): self.result.append((s, p, o))

def rdfToPython(s, base=None): 
   sink = Sink()
   return rdfxml.parseRDF(s, base=None, sink=sink).result

s_rdf = someRDFstringhere()
pyth = rdfToPython(s_rdf)
s_jsn = json.dumps(pyth)
</snippet></ROW><ROW><id>2842373</id><snippet>request_handler.py</snippet></ROW><ROW><id>2842373</id><snippet>#!/opt/local/bin/python2.5</snippet></ROW><ROW><id>2842727</id><snippet>__dict__</snippet></ROW><ROW><id>2842727</id><snippet>def Load(self):
    f = open(self.filename,'rb')
    tmp_dict = cPickle.load(f)
    f.close()          

    self.__dict__.update(tmp_dict) 


def Save(self):
    f = open(self.filename,'wb')
    cPickle.dump(self.__dict__,f,2)
    f.close()
</snippet></ROW><ROW><id>2843286</id><snippet>rootdir</snippet></ROW><ROW><id>2843286</id><snippet>import logging
logging.info("Something here") 
</snippet></ROW><ROW><id>2843286</id><snippet>log.info</snippet></ROW><ROW><id>2843556</id><snippet>C:\Python26\python.exe %1
IF %ERRORLEVEL% NEQ 0 PAUSE
</snippet></ROW><ROW><id>2843645</id><snippet>Book.objects.filter(readingdate__date__year=2010)
</snippet></ROW><ROW><id>2843649</id><snippet>shutil.move</snippet></ROW><ROW><id>2843649</id><snippet>main</snippet></ROW><ROW><id>2844368</id><snippet>from xml.etree.ElementTree import Element, SubElement, Comment, tostring

# Configure one attribute with set()
root = Element('opml')
root.set('version', '1.0')

root.append(Comment('Generated by ElementTree_csv_to_xml.py for PyMOTW'))
</snippet></ROW><ROW><id>2844430</id><snippet>inspect</snippet></ROW><ROW><id>2844430</id><snippet>bool</snippet></ROW><ROW><id>2844430</id><snippet>True</snippet></ROW><ROW><id>2844430</id><snippet>import sys
this_module = sys.modules[__name__]
</snippet></ROW><ROW><id>2844430</id><snippet>site_</snippet></ROW><ROW><id>2844430</id><snippet>import inspect
def function_that_has_site(f):
    return inspect.isfunction(f) and f.__name__.startswith('site_')
</snippet></ROW><ROW><id>2844430</id><snippet>for n, coolfunc in inspect.getmembers(this_module, function_that_has_site):
   result = coolfunc(blabla, yada)
   if result: return result
</snippet></ROW><ROW><id>2844520</id><snippet>B</snippet></ROW><ROW><id>2844520</id><snippet>A</snippet></ROW><ROW><id>2844520</id><snippet>A</snippet></ROW><ROW><id>2844520</id><snippet>B</snippet></ROW><ROW><id>2844520</id><snippet>'__init__'</snippet></ROW><ROW><id>2844520</id><snippet>class A(object):
   def __init__(self):
     self._x = 23
     self._y = 45
   def f(self):
      print 'in f,', self._x
   def h(self):
      print 'in h,', self._y
</snippet></ROW><ROW><id>2844520</id><snippet>_x</snippet></ROW><ROW><id>2844520</id><snippet>_y</snippet></ROW><ROW><id>2844520</id><snippet>class B(A):
     def __init__(self, a):
        self._x = a._x
        self._y = a._y

     def f(self):
         print 'in B-&gt;f,', self._x
</snippet></ROW><ROW><id>2844520</id><snippet>A</snippet></ROW><ROW><id>2844520</id><snippet>A</snippet></ROW><ROW><id>2844520</id><snippet>'__init__'</snippet></ROW><ROW><id>2844520</id><snippet>class B1(A):
    def __init__(self, a):
        try: s = a.__getstate__()
        except AttributeError: s = a.__dict__
        try: self.__setstate__(s)
        except AttributeError: self.__dict__.update(s)
</snippet></ROW><ROW><id>2844520</id><snippet>__dict__</snippet></ROW><ROW><id>2844520</id><snippet>.update</snippet></ROW><ROW><id>2844520</id><snippet>self</snippet></ROW><ROW><id>2844520</id><snippet>__setstate__</snippet></ROW><ROW><id>2844520</id><snippet>A</snippet></ROW><ROW><id>2844520</id><snippet>B</snippet></ROW><ROW><id>2844520</id><snippet>A</snippet></ROW><ROW><id>2844520</id><snippet>A</snippet></ROW><ROW><id>2844544</id><snippet>dict((k, v) for k, v in points.items() if all(x &lt; 5 for x in v))
</snippet></ROW><ROW><id>2844544</id><snippet>.iteritems()</snippet></ROW><ROW><id>2844544</id><snippet>.items()</snippet></ROW><ROW><id>2844544</id><snippet>points</snippet></ROW><ROW><id>2844544</id><snippet>all(x &lt; 5 for x in v)</snippet></ROW><ROW><id>2844544</id><snippet>and</snippet></ROW><ROW><id>2844937</id><snippet>iteritems</snippet></ROW><ROW><id>2844937</id><snippet>items</snippet></ROW><ROW><id>2844937</id><snippet>iteritems</snippet></ROW><ROW><id>2844937</id><snippet>Auxiliar.DataCollection.getInfo(1)</snippet></ROW><ROW><id>2844937</id><snippet>deepcopy</snippet></ROW><ROW><id>2844937</id><snippet>self.data1 = copy.deepcopy(dict(Auxiliar.DataCollection.getInfo(1)))
</snippet></ROW><ROW><id>2844937</id><snippet>Auxiliar.DataCollection.getInfo(1)</snippet></ROW><ROW><id>2844937</id><snippet>Auxiliar.DataCollection.getInfo(1)</snippet></ROW><ROW><id>2844954</id><snippet>valueWI, valueHI, valueWF, valueHF</snippet></ROW><ROW><id>2844954</id><snippet>DrawLine</snippet></ROW><ROW><id>2844954</id><snippet>ALOT = 1e6
vals = [max(min(x, ALOT), -ALOT) for x in (valueWI, valueHI, valueWF, valueHF)]
dc.DrawLine(*vals)
</snippet></ROW><ROW><id>2845038</id><snippet>/usr/local/google_appengine/google/appengine/tools/dev_appserver.py</snippet></ROW><ROW><id>2845038</id><snippet>cStringIO.StringIO</snippet></ROW><ROW><id>2845038</id><snippet>dev_appserver</snippet></ROW><ROW><id>2845038</id><snippet>dev_appserver.ApplicationLoggingHandler</snippet></ROW><ROW><id>2845038</id><snippet>from google.appengine.tools import dev_appserver

class MyHandler(dev_appserver.ApplicationLoggingHandler):

    def __init__(self, *a, **k):
        dev_appserver.ApplicationLoggingHandler.__init__(self, *a, **k)
        self.thefile = open('/tmp/mylog.txt', 'w')

    def emit(self, record):
        dev_appserver.ApplicationLoggingHandler(self, record)
        self.thefile.write(str(record) + '\n')
        self.thefile.flush()
</snippet></ROW><ROW><id>2845038</id><snippet>dev_appserver_main.py</snippet></ROW><ROW><id>2845038</id><snippet>dev_appserver.py</snippet></ROW><ROW><id>2845038</id><snippet>.py</snippet></ROW><ROW><id>2845038</id><snippet>_main.py</snippet></ROW><ROW><id>2845078</id><snippet>import re

there = re.compile(r'''(?x)      # verbose flag: allows comments &amp; whitespace
                       ^         # anchor to the start
                       ([^:]+)   # group with 1+ non-colons, the key
                       :\s*      # colon, then arbitrary whitespace
                       (.*)      # group everything that follows
                       $         # anchor to the end
                    ''')
</snippet></ROW><ROW><id>2845078</id><snippet> configdict = {}
 for aline in open('thefile.txt'):
   mo = there.match(aline)
   if not mo:
     print("Skipping invalid line %r" % aline)
     continue
   k, v = mo.groups()
   configdict[k] = v
</snippet></ROW><ROW><id>2845078</id><snippet>(?x)</snippet></ROW><ROW><id>2845078</id><snippet>re.VERBOSE</snippet></ROW><ROW><id>2845078</id><snippet>re.compile</snippet></ROW><ROW><id>2845114</id><snippet>./manage.py syncdb</snippet></ROW><ROW><id>2845114</id><snippet>django.contrib.contenttypes</snippet></ROW><ROW><id>2845114</id><snippet>settings.py</snippet></ROW><ROW><id>2845114</id><snippet>./manage.py migrate</snippet></ROW><ROW><id>2845155</id><snippet>import</snippet></ROW><ROW><id>2845155</id><snippet>import django; django.__file__</snippet></ROW><ROW><id>2845155</id><snippet>os.system("myscript.py")</snippet></ROW><ROW><id>2845155</id><snippet>myscript.py</snippet></ROW><ROW><id>2845155</id><snippet>import django</snippet></ROW><ROW><id>2845155</id><snippet>import myscript</snippet></ROW><ROW><id>2846039</id><snippet>q</snippet></ROW><ROW><id>2846039</id><snippet>q.get()</snippet></ROW><ROW><id>2846039</id><snippet>.put(whatever)</snippet></ROW><ROW><id>2846039</id><snippet>.get()</snippet></ROW><ROW><id>2846061</id><snippet>'charmap'</snippet></ROW><ROW><id>2846061</id><snippet>'foobar'</snippet></ROW><ROW><id>2846061</id><snippet>print(someunicode)
</snippet></ROW><ROW><id>2846061</id><snippet>print(someunicode.encode('foobar'))
</snippet></ROW><ROW><id>2846094</id><snippet>upc_code</snippet></ROW><ROW><id>2846094</id><snippet>local_links</snippet></ROW><ROW><id>2846094</id><snippet>upc_text</snippet></ROW><ROW><id>2846094</id><snippet>upc</snippet></ROW><ROW><id>2846094</id><snippet>ul</snippet></ROW><ROW><id>2846094</id><snippet>Tag</snippet></ROW><ROW><id>2846094</id><snippet>upc.contents</snippet></ROW><ROW><id>2846094</id><snippet>li</snippet></ROW><ROW><id>2846094</id><snippet>upc.contents.contents</snippet></ROW><ROW><id>2846094</id><snippet>for upc in upc_code:
    listitems = upc.findAll('li')
    for anitem in listitems:
        print anitem.contents[1]
</snippet></ROW><ROW><id>2846094</id><snippet>strong</snippet></ROW><ROW><id>2846094</id><snippet>print anitem.find('strong').nextSibling
</snippet></ROW><ROW><id>2846141</id><snippet>data_files=</snippet></ROW><ROW><id>2846496</id><snippet>&gt;&gt;&gt; x = set(range(1000000,2000000))
&gt;&gt;&gt; y = set(range(1900000,2900000))

the following happened in ~0.020s  
&gt;&gt;&gt; z = set.intersection(x,y)
&gt;&gt;&gt; len(z)
100000
</snippet></ROW><ROW><id>2846496</id><snippet>json_encode(list(z))
</snippet></ROW><ROW><id>2846599</id><snippet>coordinate_list = [x for location in locations
                   for x in [Coordinates(location.latitude,
                                         location.longitude)
                            ] * location.number_of_times]
</snippet></ROW><ROW><id>2846599</id><snippet>coordinate_list = [ ]
for location in locations:
    coord = Coordinates(location.latitude, location.longitude)
    coordinate_list.extend([coord] * location.number_of_times)
</snippet></ROW><ROW><id>2846599</id><snippet>extend</snippet></ROW><ROW><id>2846599</id><snippet>Coordinate</snippet></ROW><ROW><id>2847126</id><snippet>render</snippet></ROW><ROW><id>2847126</id><snippet>class UserToAccount(forms.widgets.TextInput):
    def render(self, name, value, attrs=None):
        if isinstance(value, User) :
            value = Account.objects.get(user=value).name
        return super (UserToAccount, self).render(name, value, attrs=None)        
</snippet></ROW><ROW><id>2847126</id><snippet>widget</snippet></ROW><ROW><id>2847126</id><snippet>select</snippet></ROW><ROW><id>2847311</id><snippet>.format()</snippet></ROW><ROW><id>2847311</id><snippet>"Day old bread, 50% sale {0}".format("today")
</snippet></ROW><ROW><id>2847311</id><snippet>%</snippet></ROW><ROW><id>2847724</id><snippet>extern "C" {</snippet></ROW><ROW><id>2847724</id><snippet>}</snippet></ROW><ROW><id>2847724</id><snippet>#include &lt;Python.h&gt;

#include "Flp.h"

static PyObject * ErrorObject;

typedef struct {
    PyObject_HEAD
    PyObject * x_attr; // attributes dictionary
} FlpObject;

extern "C" {
    static void Flp_dealloc(FlpObject * self);
    static PyObject * Flp_getattr(FlpObject * self, char * name);
    static int Flp_setattr(FlpObject * self, char * name, PyObject * v);
    DL_EXPORT(void) initflp();
}

static PyTypeObject Flp_Type = {
    /* The ob_type field must be initialized in the module init function
     * to be portable to Windows without using C++. */
    PyObject_HEAD_INIT(NULL)
    0,          /*ob_size*/
    "Flp",          /*tp_name*/
    sizeof(FlpObject),  /*tp_basicsize*/
    0,          /*tp_itemsize*/
    /* methods */
    (destructor)Flp_dealloc, /*tp_dealloc*/
    0,          /*tp_print*/
    (getattrfunc)Flp_getattr, /*tp_getattr*/
    (setattrfunc)Flp_setattr, /*tp_setattr*/
    0,          /*tp_compare*/
    0,          /*tp_repr*/
    0,          /*tp_as_number*/
    0,          /*tp_as_sequence*/
    0,          /*tp_as_mapping*/
    0,          /*tp_hash*/
};

#define FlpObject_Check(v) ((v)-&gt;ob_type == &amp;Flp_Type)

static FlpObject * newFlpObject(PyObject * arg)
{
    FlpObject * self;
    self = PyObject_NEW(FlpObject, &amp;Flp_Type);
    if (self == NULL)
        return NULL;
    self-&gt;x_attr = NULL;
    return self;
}

// Flp methods

static void Flp_dealloc(FlpObject * self)
{
    Py_XDECREF(self-&gt;x_attr);
    PyMem_DEL(self);
}

static PyObject * Flp_demo(FlpObject * self, PyObject * args)
{
    if (! PyArg_ParseTuple(args, ""))
        return NULL;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyMethodDef Flp_methods[] = {
    {"demo",    (PyCFunction)Flp_demo,  1},
    {NULL,      NULL} // sentinel
};

static PyObject * Flp_getattr(FlpObject * self, char * name)
{
    if (self-&gt;x_attr != NULL) {
        PyObject * v = PyDict_GetItemString(self-&gt;x_attr, name);
        if (v != NULL) {
            Py_INCREF(v);
            return v;
        }
    }
    return Py_FindMethod(Flp_methods, (PyObject *)self, name);
}

static int Flp_setattr(FlpObject * self, char * name, PyObject * v)
{
    if (self-&gt;x_attr == NULL) {
        self-&gt;x_attr = PyDict_New();
        if (self-&gt;x_attr == NULL)
            return -1;
    }
    if (v == NULL) {
        int rv = PyDict_DelItemString(self-&gt;x_attr, name);
        if (rv &lt; 0)
            PyErr_SetString(PyExc_AttributeError,
                    "delete non-existing Flp attribute");
        return rv;
    }
    else
        return PyDict_SetItemString(self-&gt;x_attr, name, v);
}
/* --------------------------------------------------------------------- */

/* Function of two integers returning integer */

static PyObject * flp_foo(PyObject * self, PyObject * args)
{
    long i, j;
    long res;
    if (!PyArg_ParseTuple(args, "ll", &amp;i, &amp;j))
        return NULL;
    res = i+j; /* flpX Do something here */
    return PyInt_FromLong(res);
}


/* Function of no arguments returning new Flp object */

static PyObject * flp_new(PyObject * self, PyObject * args)
{
    FlpObject *rv;

    if (!PyArg_ParseTuple(args, ""))
        return NULL;
    rv = newFlpObject(args);
    if ( rv == NULL )
        return NULL;
    return (PyObject *)rv;
}

/* Example with subtle bug from extensions manual ("Thin Ice"). */

static PyObject * flp_bug(PyObject * self, PyObject * args)
{
    PyObject *list, *item;

    if (!PyArg_ParseTuple(args, "O", &amp;list))
        return NULL;

    item = PyList_GetItem(list, 0);
    /* Py_INCREF(item); */
    PyList_SetItem(list, 1, PyInt_FromLong(0L));
    PyObject_Print(item, stdout, 0);
    printf("\n");
    /* Py_DECREF(item); */

    Py_INCREF(Py_None);
    return Py_None;
}

/* Test bad format character */

static PyObject * flp_roj(PyObject * self, PyObject * args)
{
    PyObject *a;
    long b;
    if (!PyArg_ParseTuple(args, "O#", &amp;a, &amp;b))
        return NULL;
    Py_INCREF(Py_None);
    return Py_None;
}


/* List of functions defined in the module */

static PyMethodDef flp_methods[] = {
    {"roj",     flp_roj,     1},
    {"foo",     flp_foo,     1},
    {"new",     flp_new,     1},
    {"bug",     flp_bug,     1},
    {NULL,      NULL}       /* sentinel */
};


/* Initialization function for the module (*must* be called initflp) */

DL_EXPORT(void) initflp()
{
    PyObject *m, *d;

    /* Initialize the type of the new type object here; doing it here
     * is required for portability to Windows without requiring C++. */
    Flp_Type.ob_type = &amp;PyType_Type;

    /* Create the module and add the functions */
    m = Py_InitModule("flp", flp_methods);

    /* Add some symbolic constants to the module */
    d = PyModule_GetDict(m);
    ErrorObject = PyErr_NewException("flp.error", NULL, NULL);
    PyDict_SetItemString(d, "error", ErrorObject);
}
</snippet></ROW><ROW><id>2847983</id><snippet>from contextlib import nested

with nested(open(spam), open(eggs)) as (f_spam, f_eggs):
    # do something
</snippet></ROW><ROW><id>2847983</id><snippet>nested</snippet></ROW><ROW><id>2847983</id><snippet>with</snippet></ROW><ROW><id>2847983</id><snippet>with open(spam) as f_spam, open(eggs) as f_eggs:
    # do something
</snippet></ROW><ROW><id>2848047</id><snippet>commit</snippet></ROW><ROW><id>2848047</id><snippet>rollback</snippet></ROW><ROW><id>2848047</id><snippet>SELECT</snippet></ROW><ROW><id>2848071</id><snippet>OppsError</snippet></ROW><ROW><id>2848071</id><snippet>xxx</snippet></ROW><ROW><id>2848071</id><snippet>OppsError</snippet></ROW><ROW><id>2848071</id><snippet>OppsError</snippet></ROW><ROW><id>2848113</id><snippet>str(my_number)</snippet></ROW><ROW><id>2848113</id><snippet>my_number</snippet></ROW><ROW><id>2848113</id><snippet>repr()</snippet></ROW><ROW><id>2848113</id><snippet>str()</snippet></ROW><ROW><id>2848113</id><snippet>int</snippet></ROW><ROW><id>2848113</id><snippet>repr()</snippet></ROW><ROW><id>2848113</id><snippet>str()</snippet></ROW><ROW><id>2848113</id><snippet>&gt;&gt;&gt; x = 1234567890
&gt;&gt;&gt; y = x ** 3
&gt;&gt;&gt; `y`
'1881676371789154860897069000L'
&gt;&gt;&gt; str(y)
'1881676371789154860897069000'
</snippet></ROW><ROW><id>2848238</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; mat = numpy.matrix("1 2 3; 4 5 6; 7 8 9")
&gt;&gt;&gt; mat.dump("my_matrix.dat")
&gt;&gt;&gt; mat2 = numpy.load("my_matrix.dat")
</snippet></ROW><ROW><id>2848266</id><snippet>def check_file_ready(self, path):
    '''Check if file is not opened by another process.'''
    handle = None
    try:
        handle = win32file.CreateFile(
            path,
            win32file.GENERIC_WRITE,
            0,
            None,
            win32file.OPEN_EXISTING,
            win32file.FILE_ATTRIBUTE_NORMAL,
            None)
        return True
    except pywintypes.error, e:
        if e[0] == winerror.ERROR_SHARING_VIOLATION:
            # Note: other possible error codes include
            #  winerror.ERROR_FILE_NOT_FOUND
            #  winerror.ERROR_PATH_NOT_FOUND
            #  winerror.ERROR_ACCESS_DENIED.
            return False
        raise
    finally:
        if handle:
            win32file.CloseHandle(handle)
</snippet></ROW><ROW><id>2849187</id><snippet>for key, value in smaller_dict.iteritems():
    try:
        big_dict[key].update(value)
    except KeyError:
        big_dict[key] = dict(value)
</snippet></ROW><ROW><id>2849187</id><snippet>json.JSONEncoder</snippet></ROW><ROW><id>2849187</id><snippet>class SetEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, set):
            return dict.fromkeys(obj)
        return json.JSONEncoder.default(self, obj)
</snippet></ROW><ROW><id>2849187</id><snippet>json.JSONDecoder</snippet></ROW><ROW><id>2849521</id><snippet>if isinstance(field, ManyToManyField):
    pass // stuff
</snippet></ROW><ROW><id>2849763</id><snippet>configparser.SafeConfigParser</snippet></ROW><ROW><id>2850655</id><snippet>thread.join()</snippet></ROW><ROW><id>2850655</id><snippet>while threading.active_count() &gt; 0:
    # ... look for new requests to handle ...
    time.sleep(0.1)  

    # or try joining your threads with a timeout
    #for thread in my_threads:
    #    thread.join(0.1)        
</snippet></ROW><ROW><id>2850655</id><snippet>thread.start_new(func, args)</snippet></ROW><ROW><id>2850655</id><snippet>thread.start_new_thread(function, args[, kwargs])</snippet></ROW><ROW><id>2850655</id><snippet>active_count()</snippet></ROW><ROW><id>2850655</id><snippet>import threading
my_thread = threading.Thread(target=func, args=(), kwargs={})
my_thread.daemon = True
my_thread.start()
</snippet></ROW><ROW><id>2850659</id><snippet>&lt;xsl:template match="/" &gt; &lt;!-- "/" matches the document root --&gt;
  &lt;html&gt;  &lt;!-- whatever is not in xsl: namespace is template output --&gt;
  &lt;head&gt;&lt;title&gt;...&lt;/title&gt;&lt;/head&gt;
  &lt;body&gt;
  &lt;xsl:apply-templates /&gt;  &lt;!-- this searches for and calls additional template matches --&gt; 
  &lt;/body&gt;
  &lt;/html&gt;
&lt;/xsl:template&gt;  
</snippet></ROW><ROW><id>2850800</id><snippet>vectors / norms
</snippet></ROW><ROW><id>2850800</id><snippet>vectors  # shape 2, 10
norms  # shape 10
</snippet></ROW><ROW><id>2850800</id><snippet>norms  # shape 1,10
</snippet></ROW><ROW><id>2850800</id><snippet>vectors / norms.reshape(1,-1)  # same as vectors/norms
</snippet></ROW><ROW><id>2850800</id><snippet>vectors.T/norms</snippet></ROW><ROW><id>2850800</id><snippet>vectors.T / norms.reshape(-1,1)  # this works
</snippet></ROW><ROW><id>2850877</id><snippet>attrib={"{xsi}schemaLocation" : schemaLocation},
</snippet></ROW><ROW><id>2850877</id><snippet>attrib={"{" + xsi + "}schemaLocation" : schemaLocation}
</snippet></ROW><ROW><id>2850877</id><snippet>&lt;?xml version='1.0' encoding='UTF-8' standalone='yes'?&gt;
&lt;gpx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
     xmlns="http://www.topografix.com/GPX/1/1" 
     xsi:schemaLocation="http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd" 
     version="1.1" 
     creator="My Product"/&gt;
</snippet></ROW><ROW><id>2850981</id><snippet>&gt;&gt;&gt; getattr(__builtins__, 'range')
&lt;built-in function range&gt;
</snippet></ROW><ROW><id>2851036</id><snippet>setup()</snippet></ROW><ROW><id>2851036</id><snippet>if 'script_name' not in attrs:
    attrs['script_name'] = os.path.basename(sys.argv[0])
if 'script_args' not in attrs:
    attrs['script_args'] = sys.argv[1:]
</snippet></ROW><ROW><id>2851036</id><snippet>setup(
    ...
    script_name = 'setup.py',
    script_args = ['bdist_rpm', '--spec-only']
)
</snippet></ROW><ROW><id>2851264</id><snippet>python -c</snippet></ROW><ROW><id>2851264</id><snippet>bash$  python -c "import os; print dir(os)"
</snippet></ROW><ROW><id>2851264</id><snippet>bash$  python -c "import os; print [x for x in dir(os) if x.startswith('r')]"
['read', 'readlink', 'remove', 'removedirs', 'rename', 'renames', 'rmdir']
</snippet></ROW><ROW><id>2851573</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; reload(sys)
&lt;module 'sys' (built-in)&gt;
&gt;&gt;&gt; sys.setdefaultencoding('undefined')
&gt;&gt;&gt; u"abc" + u"xyz"
u'abcxyz'
&gt;&gt;&gt; u"abc" + "xyz"
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/encodings/undefined.py", line 22, in decode
    raise UnicodeError("undefined encoding")
UnicodeError: undefined encoding
</snippet></ROW><ROW><id>2851573</id><snippet>reload(sys)</snippet></ROW><ROW><id>2851573</id><snippet>sys.setdefaultencoding</snippet></ROW><ROW><id>2851573</id><snippet>sitecustomize.py</snippet></ROW><ROW><id>2851573</id><snippet>site-packages</snippet></ROW><ROW><id>2851966</id><snippet>-u</snippet></ROW><ROW><id>2851966</id><snippet>C:&gt; type mydoc.txt | python.exe -u myscript.py
</snippet></ROW><ROW><id>2852123</id><snippet>import time

while True:
  do_task()
  time.sleep(4 * 60 * 60) # 4 hours * 60 minutes * 60 seconds
</snippet></ROW><ROW><id>2852277</id><snippet>mod_rewrite</snippet></ROW><ROW><id>2852277</id><snippet>mod_wsgi</snippet></ROW><ROW><id>2852305</id><snippet>_</snippet></ROW><ROW><id>2852305</id><snippet>.</snippet></ROW><ROW><id>2852305</id><snippet>from scons.config import whatever
</snippet></ROW><ROW><id>2852305</id><snippet>sconsconfig</snippet></ROW><ROW><id>2852389</id><snippet>join([timeout])</snippet></ROW><ROW><id>2852389</id><snippet>join()</snippet></ROW><ROW><id>2852389</id><snippet>print</snippet></ROW><ROW><id>2852389</id><snippet>threading.Event()</snippet></ROW><ROW><id>2852389</id><snippet># in the init code...
self.runThread = threading.Event()

# when starting thread...
self.runThread.set()
self.monThread.start()

# in the thread...
while self.runThread.isSet():
    pass # do stuff

# killing the thread...
self.runThread.clear()
self.monThread.join()
</snippet></ROW><ROW><id>2852418</id><snippet>/etc/init.d</snippet></ROW><ROW><id>2852418</id><snippet>OK</snippet></ROW><ROW><id>2852646</id><snippet>def bar(foo = 0)</snippet></ROW><ROW><id>2852646</id><snippet>def bar(foo = None)</snippet></ROW><ROW><id>2852646</id><snippet>def bar(foo = [])</snippet></ROW><ROW><id>2852651</id><snippet>response.content</snippet></ROW><ROW><id>2852651</id><snippet>response</snippet></ROW><ROW><id>2852651</id><snippet>deserialize</snippet></ROW><ROW><id>2852651</id><snippet>content</snippet></ROW><ROW><id>2852693</id><snippet>vcredist.exe</snippet></ROW><ROW><id>2853181</id><snippet>import numpy as np
class LemmaMatrix(np.ndarray):
    def __new__(subtype,data,dtype=None):
        subarr=np.empty(data,dtype=dtype)
        return subarr

lm=LemmaMatrix([3,3])
print(lm)
# [[  3.15913337e-260   4.94951870e+173   4.88364603e-309]
#  [  1.63321355e-301   4.80218258e-309   2.05227026e-287]
#  [  2.10277051e-309   2.07088188e+289   7.29366696e-304]]
</snippet></ROW><ROW><id>2853181</id><snippet>ndarray</snippet></ROW><ROW><id>2853239</id><snippet>n</snippet></ROW><ROW><id>2853239</id><snippet>itertools.product</snippet></ROW><ROW><id>2853239</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; s=[ [ 'a', 'b', 'c'], ['d'], ['e', 'f'] ]
&gt;&gt;&gt; list(itertools.product(*s))
[('a', 'd', 'e'), ('a', 'd', 'f'), ('b', 'd', 'e'), ('b', 'd', 'f'), ('c', 'd', 'e'), ('c', 'd', 'f')]
</snippet></ROW><ROW><id>2853396</id><snippet>subprocess</snippet></ROW><ROW><id>2853396</id><snippet>fileno()</snippet></ROW><ROW><id>2853396</id><snippet>GzipFile</snippet></ROW><ROW><id>2853609</id><snippet>HTTPServerError</snippet></ROW><ROW><id>2853609</id><snippet>HttpServerError</snippet></ROW><ROW><id>2853609</id><snippet>NASAJPL()</snippet></ROW><ROW><id>2853609</id><snippet>NasaJpl()</snippet></ROW><ROW><id>2853637</id><snippet>def getWPT(url,tag):
try:
    row = MemoryInitializer.wtp[url][tag]
except KeyError:
    row = 0
#print row
return row
</snippet></ROW><ROW><id>2853739</id><snippet>a= { 'import': 'trade', 1: 7.8 }
</snippet></ROW><ROW><id>2853930</id><snippet>logging.handlers.SocketHandler</snippet></ROW><ROW><id>2853930</id><snippet>os.kill(pid, 0)</snippet></ROW><ROW><id>2853934</id><snippet>dirs</snippet></ROW><ROW><id>2853934</id><snippet>files</snippet></ROW><ROW><id>2853934</id><snippet>root</snippet></ROW><ROW><id>2853934</id><snippet>basename()</snippet></ROW><ROW><id>2853934</id><snippet>/</snippet></ROW><ROW><id>2853934</id><snippet>\</snippet></ROW><ROW><id>2853934</id><snippet>root</snippet></ROW><ROW><id>2853934</id><snippet>shutil</snippet></ROW><ROW><id>2854039</id><snippet>from Tkinter import *
from random import random

root = Tk()
frame = Frame(root, height=200, width=200)

for i in range(10):
    Button(frame, text=str(i)).place(x=random() * 150, y=random() * 180)

frame.pack()
root.mainloop()
</snippet></ROW><ROW><id>2854134</id><snippet>People.objects.filter(Name='Fred').count()</snippet></ROW><ROW><id>2854184</id><snippet>fetchall</snippet></ROW><ROW><id>2854253</id><snippet># -*- encoding: utf-8 -*-
import unicodedata

def shoehorn_unicode_into_ascii(s):
    return unicodedata.normalize('NFKD', s).encode('ascii','ignore')

if __name__=='__main__':
    s = u"éèêàùçÇ"
    print(shoehorn_unicode_into_ascii(s))
    # eeeaucC
</snippet></ROW><ROW><id>2854253</id><snippet>translate</snippet></ROW><ROW><id>2854253</id><snippet>translate</snippet></ROW><ROW><id>2854253</id><snippet>replace</snippet></ROW><ROW><id>2854253</id><snippet>unidecode</snippet></ROW><ROW><id>2854253</id><snippet>unidecode.unidecode</snippet></ROW><ROW><id>2854253</id><snippet>translate</snippet></ROW><ROW><id>2854253</id><snippet>unidecode</snippet></ROW><ROW><id>2854253</id><snippet>translate</snippet></ROW><ROW><id>2854253</id><snippet>ascii_map</snippet></ROW><ROW><id>2854253</id><snippet>unidecode.unidecode</snippet></ROW><ROW><id>2854253</id><snippet># -*- coding: utf-8 -*-
import unidecode
def ascii_map():
    data={}
    for num in range(256):
        h=num
        filename='x{num:02x}'.format(num=num)
        try:
            mod = __import__('unidecode.'+filename,
                             fromlist=True)
        except ImportError:
            pass
        else:
            for l,val in enumerate(mod.data):
                i=h&lt;&lt;8
                i+=l
                if i &gt;= 0x80:
                    data[i]=unicode(val)
    return data

if __name__=='__main__':
    s = u"éèêàùçÇ"
    print(s.translate(ascii_map()))
    # eeeaucC
</snippet></ROW><ROW><id>2854253</id><snippet># -*- encoding: utf-8 -*-</snippet></ROW><ROW><id>2854253</id><snippet># -*- encoding: cp1252 -*-</snippet></ROW><ROW><id>2854601</id><snippet>import matplotlib.pyplot as plt
from random import uniform as r

x = range(10)
e = plt.errorbar(x, [r(2,10) for i in x], [r(.1,1) for i in x], capsize=8, color='r')

for b in e[1]:
    b.set_clip_on(False)

plt.show()
</snippet></ROW><ROW><id>2854601</id><snippet>clip_on</snippet></ROW><ROW><id>2854601</id><snippet>plt.errorbar</snippet></ROW><ROW><id>2855573</id><snippet>print()</snippet></ROW><ROW><id>2855573</id><snippet>print(a,b,c)</snippet></ROW><ROW><id>2855573</id><snippet>range()</snippet></ROW><ROW><id>2855573</id><snippet>itertools.product()</snippet></ROW><ROW><id>2855573</id><snippet>def libfunc1(arglist):
    arg1 = arglist[1]
    arg2 = arglist[2]
    ...
</snippet></ROW><ROW><id>2855573</id><snippet>*args</snippet></ROW><ROW><id>2855573</id><snippet>libfunc1([arg1val,arg2val,...])
</snippet></ROW><ROW><id>2855573</id><snippet>libfunc1(arg1val,arg2val,...)
</snippet></ROW><ROW><id>2855573</id><snippet>*args</snippet></ROW><ROW><id>2855710</id><snippet>pkill python
</snippet></ROW><ROW><id>2855710</id><snippet>ps -aux
</snippet></ROW><ROW><id>2855895</id><snippet>(add-to-list 'load-path "~/.emacs.d/")
(add-to-list 'load-path "~/.emacs.d/auto-complete-1.2")
(autoload 'python-mode "python-mode" "Python Mode." t)
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
(add-to-list 'interpreter-mode-alist '("python" . python-mode))
(require 'python-mode)
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)
(pymacs-load "ropemacs" "rope-")
(setq ropemacs-enable-autoimport t)

(require 'auto-complete)
(global-auto-complete-mode t)
</snippet></ROW><ROW><id>2855895</id><snippet>C-c d
</snippet></ROW><ROW><id>2855895</id><snippet>C-c g
</snippet></ROW><ROW><id>2855895</id><snippet>C-c f
</snippet></ROW><ROW><id>2855895</id><snippet>M-/
</snippet></ROW><ROW><id>2855895</id><snippet>prefs.add('python_path', '~/path/to/virtualenv/lib/python2.6/site-packages')
</snippet></ROW><ROW><id>2855895</id><snippet>.ropeproject/config.py</snippet></ROW><ROW><id>2855953</id><snippet>wip-all</snippet></ROW><ROW><id>2855953</id><snippet>python setup.py build_libevent build install</snippet></ROW><ROW><id>2855953</id><snippet># git clone http://github.com/schmir/gevent.git
# cd gevent
# git branch -a
* upstream
  origin/HEAD
  origin/close-socket-cancel-event
  origin/pywsgi-without-basehttpserver
  origin/upstream
  origin/wip-all
  origin/wip-setup-config
# git checkout origin/wip-all
# python setup.py build_libevent build install
</snippet></ROW><ROW><id>2856461</id><snippet>app-directory</snippet></ROW><ROW><id>2856461</id><snippet>app.yaml</snippet></ROW><ROW><id>2856461</id><snippet>- url: /app-directory
  script: $PYTHON_LIB/google/appengine/ext/remote_api/handler.py
  login: admin
</snippet></ROW><ROW><id>2856461</id><snippet>loaders = ...</snippet></ROW><ROW><id>2856461</id><snippet>exporters = [GreetingExporter]</snippet></ROW><ROW><id>2856536</id><snippet>gauge.Pulse()
</snippet></ROW><ROW><id>2856628</id><snippet>RSA/ECB/PKCS1Padding</snippet></ROW><ROW><id>2856628</id><snippet>ECB</snippet></ROW><ROW><id>2857167</id><snippet>import sys

if __name__ == '__main__':   

    for arg in sys.argv: 
        print arg
</snippet></ROW><ROW><id>2857167</id><snippet>./launch.py my_argument another_argument and_so_on
</snippet></ROW><ROW><id>2857167</id><snippet>import sys

class Name:

    def __init__(self):
        self.name = 'John'
        self.address = 'Place'
        self.age = '100'

    def printName(self):
        print self.name

    def printAddress(self):
        print self.address

    def printAge(self):
        print self.age


if __name__ == '__main__': 

    Person = Name()

    launchOptions = sys.argv[1:]

    if not launchOptions or 'name' in launchOptions:
        Person.printName()

    if not launchOptions or 'address' in launchOptions:
        Person.printAddress()

    if not launchOptions or 'age' in launchOptions:
        Person.printAge()
</snippet></ROW><ROW><id>2857167</id><snippet>./launch
John
Place
100

./launch age
100

./launch address
Place

./launch name
John
</snippet></ROW><ROW><id>2857216</id><snippet>sphinx</snippet></ROW><ROW><id>2857216</id><snippet>rst2html</snippet></ROW><ROW><id>2857216</id><snippet>sphinx</snippet></ROW><ROW><id>2857216</id><snippet>.rst</snippet></ROW><ROW><id>2857216</id><snippet>.html</snippet></ROW><ROW><id>2857439</id><snippet>COMMAND = "c:\cygwin\bin\python &lt;path_to_your.py&gt;"

Set wshell = CreateObject("WScript.Shell")
Set proc   = wshell.Environment("Process")

proc("PATH") = "c:\cygwin\bin;" &amp; proc("PATH")

wshell.Run COMMAND, 0
</snippet></ROW><ROW><id>2857480</id><snippet>x=y</snippet></ROW><ROW><id>2857480</id><snippet>x</snippet></ROW><ROW><id>2857480</id><snippet>y</snippet></ROW><ROW><id>2857480</id><snippet>y</snippet></ROW><ROW><id>2857480</id><snippet>y</snippet></ROW><ROW><id>2857480</id><snippet>x</snippet></ROW><ROW><id>2857480</id><snippet>x</snippet></ROW><ROW><id>2857480</id><snippet>x</snippet></ROW><ROW><id>2857480</id><snippet>class BunchOConstants(object):
    def __init__(self, **kwds):
        self.__dict__.update(kwds)
    @property
    def x(self):
        return self.y
    @x.setter
    def x(self,val):
        self.y=val
const=BunchOConstants(y=10,z='foo')
</snippet></ROW><ROW><id>2857480</id><snippet>import Constants

const=Constants.const
print(const.y)
# 10
print(const.x)
# 10
</snippet></ROW><ROW><id>2857480</id><snippet>const.y='bar'
</snippet></ROW><ROW><id>2857480</id><snippet>print(const.x)
# bar
</snippet></ROW><ROW><id>2857480</id><snippet>x</snippet></ROW><ROW><id>2857480</id><snippet>const.x='foo'
</snippet></ROW><ROW><id>2857480</id><snippet>y</snippet></ROW><ROW><id>2857480</id><snippet>print(const.y)
# foo
</snippet></ROW><ROW><id>2857700</id><snippet>foo_core.py</snippet></ROW><ROW><id>2857700</id><snippet>foo_core</snippet></ROW><ROW><id>2857700</id><snippet>foo_cli.py</snippet></ROW><ROW><id>2857700</id><snippet>foo_core</snippet></ROW><ROW><id>2857700</id><snippet>foo_gui.pyw</snippet></ROW><ROW><id>2857700</id><snippet>foo_cli</snippet></ROW><ROW><id>2857700</id><snippet>import foo_core
import optparse

def main():
    # parse the command-line options
    # the real work is done by foo_core

if __name__ == "__main__":
   main()
</snippet></ROW><ROW><id>2857700</id><snippet>foo_gui</snippet></ROW><ROW><id>2857700</id><snippet> import foo_core
 import gtk # or whatever

 def main()
     # build the GUI
     # real work is done by foo_core under control of the GUI

 if __name__ == "__main__":
     main()
</snippet></ROW><ROW><id>2857700</id><snippet>foo.py</snippet></ROW><ROW><id>2857700</id><snippet>try:
    import foo_gui
    foo_gui.main()
except ImportError:
    import foo_cli
    foo_cli.main()
</snippet></ROW><ROW><id>2858061</id><snippet>0xe2</snippet></ROW><ROW><id>2858061</id><snippet>â</snippet></ROW><ROW><id>2858061</id><snippet>Content-Type:</snippet></ROW><ROW><id>2858061</id><snippet>feedparser</snippet></ROW><ROW><id>2858061</id><snippet>ascii</snippet></ROW><ROW><id>2858061</id><snippet>urllib2</snippet></ROW><ROW><id>2858061</id><snippet>feedparser.parse</snippet></ROW><ROW><id>2858093</id><snippet>machineSpecificEnvironment = Environment(**keys)
</snippet></ROW><ROW><id>2858096</id><snippet>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; import cStringIO
&gt;&gt;&gt; s = cStringIO.StringIO()
&gt;&gt;&gt; pickle.dump(23, s)
&gt;&gt;&gt; pickle.dump(45, s)
&gt;&gt;&gt; s.seek(0)
&gt;&gt;&gt; pickle.load(s)
23
&gt;&gt;&gt; pickle.load(s)
45
&gt;&gt;&gt; pickle.load(s)
Traceback (most recent call last):
   ...
EOFError
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2858096</id><snippet>EOFError</snippet></ROW><ROW><id>2858152</id><snippet>python -m pdb mymod.py arg1 arg2
</snippet></ROW><ROW><id>2858152</id><snippet>if somecondition:
    import pdb; pdb.set_trace()
</snippet></ROW><ROW><id>2858306</id><snippet>foo</snippet></ROW><ROW><id>2858306</id><snippet>self.ctx</snippet></ROW><ROW><id>2858306</id><snippet>foo</snippet></ROW><ROW><id>2858306</id><snippet>foo</snippet></ROW><ROW><id>2858306</id><snippet>__init__</snippet></ROW><ROW><id>2858306</id><snippet>foo</snippet></ROW><ROW><id>2858306</id><snippet>foo.ctx</snippet></ROW><ROW><id>2858306</id><snippet>ctx</snippet></ROW><ROW><id>2858669</id><snippet>is</snippet></ROW><ROW><id>2858669</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def f():
...   x = 'google.com'
...   return x is 'google.com'
... 
&gt;&gt;&gt; dis.dis(f)
  2           0 LOAD_CONST               1 ('google.com')
              3 STORE_FAST               0 (x)

  3           6 LOAD_FAST                0 (x)
              9 LOAD_CONST               1 ('google.com')
             12 COMPARE_OP               8 (is)
             15 RETURN_VALUE    
</snippet></ROW><ROW><id>2858669</id><snippet>&gt;&gt;&gt; f()
True
</snippet></ROW><ROW><id>2858669</id><snippet>&gt;&gt;&gt; x = 'google.com'
&gt;&gt;&gt; y = 'google.com'
&gt;&gt;&gt; id(x), id(y)
(4213000, 4290864)
</snippet></ROW><ROW><id>2858669</id><snippet>id</snippet></ROW><ROW><id>2858669</id><snippet>$ cat aaa.py
x = 'google.com'
y = 'google.com'
print id(x), id(y)
</snippet></ROW><ROW><id>2858669</id><snippet>&gt;&gt;&gt; import aaa
4291104 4291104
</snippet></ROW><ROW><id>2858669</id><snippet>&gt;&gt;&gt; x = 'google'
&gt;&gt;&gt; y = 'google'
&gt;&gt;&gt; id(x), id(y)
(2484672, 2484672)
</snippet></ROW><ROW><id>2858669</id><snippet>&gt;&gt;&gt; z = intern(x)
&gt;&gt;&gt; id(z)
2484672
</snippet></ROW><ROW><id>2858669</id><snippet>x</snippet></ROW><ROW><id>2858669</id><snippet>intern</snippet></ROW><ROW><id>2858669</id><snippet>intern</snippet></ROW><ROW><id>2858669</id><snippet>x</snippet></ROW><ROW><id>2858669</id><snippet>y</snippet></ROW><ROW><id>2858669</id><snippet>id()</snippet></ROW><ROW><id>2858669</id><snippet>intern</snippet></ROW><ROW><id>2858669</id><snippet>intern</snippet></ROW><ROW><id>2858669</id><snippet>&gt;&gt;&gt; x = intern('google.com')
&gt;&gt;&gt; y = intern('google.com')
&gt;&gt;&gt; id(x), id(y)
(4213000, 4213000)
</snippet></ROW><ROW><id>2858669</id><snippet>id()</snippet></ROW><ROW><id>2858669</id><snippet>is</snippet></ROW><ROW><id>2858669</id><snippet>==</snippet></ROW><ROW><id>2858669</id><snippet>$ python -mtimeit -s"a='google';b='google'" 'a==b'
10000000 loops, best of 3: 0.132 usec per loop
$ python -mtimeit -s"a='google';b='google'" 'a is b'
10000000 loops, best of 3: 0.107 usec per loop
$ python -mtimeit -s"a='goo.gle';b='goo.gle'" 'a==b'
10000000 loops, best of 3: 0.132 usec per loop
$ python -mtimeit -s"a='google';b='google'" 'a is b'
10000000 loops, best of 3: 0.106 usec per loop
$ python -mtimeit -s"a=intern('goo.gle');b=intern('goo.gle')" 'a is b'
10000000 loops, best of 3: 0.0966 usec per loop
$ python -mtimeit -s"a=intern('goo.gle');b=intern('goo.gle')" 'a == b'
10000000 loops, best of 3: 0.126 usec per loop
</snippet></ROW><ROW><id>2858752</id><snippet>or</snippet></ROW><ROW><id>2858752</id><snippet>False</snippet></ROW><ROW><id>2858752</id><snippet>&gt;&gt;&gt; "" or 1
1
&gt;&gt;&gt; " " or 1
' '
&gt;&gt;&gt; 0 or 1
1
&gt;&gt;&gt; 10 or 1
10
&gt;&gt;&gt; ['a', 'b', 'c'] or 1
['a', 'b', 'c']
&gt;&gt;&gt; [] or 1
1
&gt;&gt;&gt; None or 1
1
</snippet></ROW><ROW><id>2858918</id><snippet>frozenset</snippet></ROW><ROW><id>2858918</id><snippet>set</snippet></ROW><ROW><id>2858918</id><snippet>s = frozenset('PMMM')
# now s == frozenset({'P', 'M'})
</snippet></ROW><ROW><id>2858918</id><snippet>'P' in s
</snippet></ROW><ROW><id>2858918</id><snippet>P</snippet></ROW><ROW><id>2859175</id><snippet>repr</snippet></ROW><ROW><id>2859175</id><snippet>def __init__(self, *list):
    self._list= list
def __repr__(self):
    return 'mything('+repr(self._list)[1:-1]+')')
</snippet></ROW><ROW><id>2859175</id><snippet>Py_ReprEnter</snippet></ROW><ROW><id>2859175</id><snippet>repr</snippet></ROW><ROW><id>2859175</id><snippet>class MyThing(object):
    _local= threading.local()
    _local.reprs= set()

    def __repr__(self):
        reprs= MyThing._local.reprs
        sid= id(self)
        if sid in reprs:
            return 'MyThing(...)'
        try:
            reprs.add(sid)
            return 'MyThing(%r)' % self.something
        finally:
            reprs.remove(sid)
</snippet></ROW><ROW><id>2859302</id><snippet>query_str = "SELECT COUNT(*) FROM accounts"

conn = ibm_db.pconnect("dsn=write","usrname","secret")
query_stmt   = ibm_db.prepare(conn, query_str)
ibm_db.execute(query_stmt)
</snippet></ROW><ROW><id>2859457</id><snippet>import csv
reader = csv.reader(open("myfile.csv", "rb"), 
                    delimiter='\t', quoting=csv.QUOTE_NONE)

header = []
records = []
fields = 16

if thereIsAHeader: header = reader.next()

for row, record in enumerate(reader):
    if len(record) != fields:
        print "Skipping malformed record %i, contains %i fields (%i expected)" %
            (record, len(record), fields)
    else:
        records.append(record)

# do numpy stuff.
</snippet></ROW><ROW><id>2859540</id><snippet>object.__new__()</snippet></ROW><ROW><id>2859540</id><snippet>types.InstanceType()</snippet></ROW><ROW><id>2859540</id><snippet>import types

class C(object):
  def __init__(self):
    print 'init'

class OldC:
  def __init__(self):
    print 'initOld'

c = object.__new__(C)
print c

oc = types.InstanceType(OldC)
print oc
</snippet></ROW><ROW><id>2859689</id><snippet>import ast

L = ["hello", "3", "3.64", "-1"]

def tryeval(val):
  try:
    val = ast.literal_eval(val)
  except ValueError:
    pass
  return val

print [tryeval(x) for x in L]
</snippet></ROW><ROW><id>2859787</id><snippet>from sqlalchemy import (Table, Column, Integer, String, create_engine,
    MetaData, ForeignKey)
from sqlalchemy.orm import mapper, create_session
from sqlalchemy.ext.declarative import declarative_base

e = create_engine('sqlite:////tmp/foo.db', echo=True)
Base = declarative_base(bind=e)

class Employee(Base):
    __tablename__ = 'employees'

    employee_id = Column(Integer, primary_key=True)
    name = Column(String(50))
    type = Column(String(30), nullable=False)

    __mapper_args__ = {'polymorphic_on': type}

    def __init__(self, name):
        self.name = name

class Manager(Employee):
    __tablename__ = 'managers'
    __mapper_args__ = {'polymorphic_identity': 'manager'}

    employee_id = Column(Integer, ForeignKey('employees.employee_id'),
        primary_key=True)
    manager_data = Column(String(50))

    def __init__(self, name, manager_data):
        super(Manager, self).__init__(name)
        self.manager_data = manager_data

class Owner(Manager):
    __tablename__ = 'owners'
    __mapper_args__ = {'polymorphic_identity': 'owner'}

    employee_id = Column(Integer, ForeignKey('managers.employee_id'),
        primary_key=True)
    owner_secret = Column(String(50))

    def __init__(self, name, manager_data, owner_secret):
        super(Owner, self).__init__(name, manager_data)
        self.owner_secret = owner_secret

Base.metadata.drop_all()
Base.metadata.create_all()

s = create_session(bind=e, autoflush=True, autocommit=False)    
o = Owner('nosklo', 'mgr001', 'ownerpwd')
s.add(o)
s.commit()
</snippet></ROW><ROW><id>2860193</id><snippet>import os.path
print os.path.abspath(os.path.join(yourpath, os.pardir))
</snippet></ROW><ROW><id>2860193</id><snippet>yourpath</snippet></ROW><ROW><id>2860631</id><snippet>import contrib</snippet></ROW><ROW><id>2860631</id><snippet>connection.py</snippet></ROW><ROW><id>2860631</id><snippet>contrib</snippet></ROW><ROW><id>2860631</id><snippet>sys.modules</snippet></ROW><ROW><id>2860958</id><snippet>from google.appengine.api import mail

message = mail.EmailMessage(sender="Example.com Support &lt;support@example.com&gt;",
                            subject="Your account has been approved")

message.to = "Albert Johnson &lt;Albert.Johnson@example.com&gt;"

message.body = """
Dear Albert:

Your example.com account has been approved.  You can now visit
http://www.example.com/ and sign in using your Google Account to
access new features.

Please let us know if you have any questions.

The example.com Team
"""

message.html = """
&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;
Dear Albert:

Your example.com account has been approved.  You can now visit
http://www.example.com/ and sign in using your Google Account to
access new features.

Please let us know if you have any questions.

The example.com Team
&lt;/body&gt;&lt;/html&gt;
"""

message.send()
</snippet></ROW><ROW><id>2861268</id><snippet>1.5.2</snippet></ROW><ROW><id>2861268</id><snippet>1.5.3</snippet></ROW><ROW><id>2861320</id><snippet>os.isatty(1)</snippet></ROW><ROW><id>2861320</id><snippet>def say_hi(self):
    print("hi there, everyone!")
    sys.stdout.flush()
</snippet></ROW><ROW><id>2861367</id><snippet>import gudev

client = gudev.Client(['block'])
for device in client.query_by_subsystem("block"):
    print device
    for device_key in device.get_property_keys():
        print "   property %s: %s" % (device_key, device.get_property(device_key))
    print
</snippet></ROW><ROW><id>2861540</id><snippet>function strip_punctuation(s) {
    return s.replace(/[,.":;!%$]/g, "");
}
</snippet></ROW><ROW><id>2861589</id><snippet>returncode</snippet></ROW><ROW><id>2861589</id><snippet>None</snippet></ROW><ROW><id>2861589</id><snippet>p.poll()</snippet></ROW><ROW><id>2861589</id><snippet>poll()</snippet></ROW><ROW><id>2861589</id><snippet>if a.poll() != 0:
    print ":("
</snippet></ROW><ROW><id>2861654</id><snippet>unicode()</snippet></ROW><ROW><id>2861654</id><snippet>u</snippet></ROW><ROW><id>2861654</id><snippet>repr()</snippet></ROW><ROW><id>2861654</id><snippet>print</snippet></ROW><ROW><id>2861654</id><snippet>&gt;&gt;&gt; d = u's\xe1bado'
&gt;&gt;&gt; d
u's\xe1bado'
&gt;&gt;&gt; print d
sábado
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2861860</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>2861860</id><snippet>dt = weight_now.weight_date - weight_then.weight_date
</snippet></ROW><ROW><id>2861860</id><snippet>timedelta</snippet></ROW><ROW><id>2861860</id><snippet>hours = dt.seconds / 60 / 60    # Returns number of hours between dates
weeks = dt.days / 7             # number of weeks between dates
</snippet></ROW><ROW><id>2861881</id><snippet>rawpath = "%r" % path
</snippet></ROW><ROW><id>2861881</id><snippet>"'C:\\\\Documents and Settings\\tchan\\\\Desktop\\\\InputFile.xls'"
</snippet></ROW><ROW><id>2861881</id><snippet>import os.path
os.path.normpath(rawpath)
</snippet></ROW><ROW><id>2861998</id><snippet>n * ( n + 1 ) / 2</snippet></ROW><ROW><id>2862054</id><snippet>result = [[compute_stat(data[row], data[col]) for col in labels]
          for row in labels]
</snippet></ROW><ROW><id>2862091</id><snippet>&gt;&gt;&gt; import appscript
&gt;&gt;&gt; iTunes = appscript.app("iTunes")
&gt;&gt;&gt; lib = iTunes.playlists['Library']
&gt;&gt;&gt; for trk in lib.tracks():
...     if re.search("test", trk.name()):
...         print trk.name()
</snippet></ROW><ROW><id>2862091</id><snippet>&gt;&gt;&gt; trks = lib.tracks[appscript.its.name.contains('test')]
&gt;&gt;&gt; print trks.name()
</snippet></ROW><ROW><id>2862419</id><snippet>Super</snippet></ROW><ROW><id>2862419</id><snippet>Super()</snippet></ROW><ROW><id>2862419</id><snippet>&gt;&gt;&gt; Super.__init__
&lt;slot wrapper '__init__' of 'object' objects&gt;
</snippet></ROW><ROW><id>2862419</id><snippet>Super</snippet></ROW><ROW><id>2862419</id><snippet>list</snippet></ROW><ROW><id>2862419</id><snippet>Superlist</snippet></ROW><ROW><id>2862419</id><snippet>&gt;&gt;&gt; Superlist.__init__
&lt;slot wrapper '__init__' of 'list' objects&gt;
</snippet></ROW><ROW><id>2862419</id><snippet>&gt;&gt;&gt; class Listsuper(Super, list): pass
... 
&gt;&gt;&gt; Listsuper.__init__
&lt;slot wrapper '__init__' of 'list' objects&gt;
</snippet></ROW><ROW><id>2862419</id><snippet>Listsuper()</snippet></ROW><ROW><id>2862419</id><snippet>Superlist()</snippet></ROW><ROW><id>2862419</id><snippet>list.__init__</snippet></ROW><ROW><id>2862419</id><snippet>object.__init__</snippet></ROW><ROW><id>2862419</id><snippet>list</snippet></ROW><ROW><id>2862419</id><snippet>collections.MutableSequence</snippet></ROW><ROW><id>2862419</id><snippet>__init__</snippet></ROW><ROW><id>2862419</id><snippet>._list</snippet></ROW><ROW><id>2862419</id><snippet>MutableSequence</snippet></ROW><ROW><id>2862419</id><snippet>self._list</snippet></ROW><ROW><id>2862440</id><snippet>twisted.internet.defer.DeferredSemaphore</snippet></ROW><ROW><id>2862440</id><snippet>DeferredSemaphore</snippet></ROW><ROW><id>2862440</id><snippet>from twisted.internet.defer import DeferredSemaphore, gatherResults
from twisted.internet.task import deferLater
from twisted.internet import reactor


def async(n):
    print 'Starting job', n
    d = deferLater(reactor, n, lambda: None)
    def cbFinished(ignored):
        print 'Finishing job', n
    d.addCallback(cbFinished)
    return d


def main():
    sem = DeferredSemaphore(3)

    jobs = []
    for i in range(10):
        jobs.append(sem.run(async, i))

    d = gatherResults(jobs)
    d.addCallback(lambda ignored: reactor.stop())
    reactor.run()


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>2862440</id><snippet>DeferredSemaphore</snippet></ROW><ROW><id>2862440</id><snippet>acquire</snippet></ROW><ROW><id>2862440</id><snippet>release</snippet></ROW><ROW><id>2862440</id><snippet>run</snippet></ROW><ROW><id>2862440</id><snippet>acquire</snippet></ROW><ROW><id>2862440</id><snippet>Deferred</snippet></ROW><ROW><id>2862440</id><snippet>Deferred</snippet></ROW><ROW><id>2862440</id><snippet>Deferred</snippet></ROW><ROW><id>2862440</id><snippet>Deferred</snippet></ROW><ROW><id>2862440</id><snippet>release</snippet></ROW><ROW><id>2862440</id><snippet>release</snippet></ROW><ROW><id>2862440</id><snippet>release</snippet></ROW><ROW><id>2862440</id><snippet>DeferredSemaphore</snippet></ROW><ROW><id>2862440</id><snippet>run</snippet></ROW><ROW><id>2862440</id><snippet>Deferred</snippet></ROW><ROW><id>2862440</id><snippet>Deferred</snippet></ROW><ROW><id>2862440</id><snippet>run</snippet></ROW><ROW><id>2862440</id><snippet>DeferredQueue</snippet></ROW><ROW><id>2862440</id><snippet>cooperate</snippet></ROW><ROW><id>2862440</id><snippet>DeferredQueue</snippet></ROW><ROW><id>2862440</id><snippet>get</snippet></ROW><ROW><id>2862440</id><snippet>Deferred</snippet></ROW><ROW><id>2862440</id><snippet>Deferred</snippet></ROW><ROW><id>2862440</id><snippet>from random import randrange

from twisted.internet.defer import DeferredQueue
from twisted.internet.task import deferLater, cooperate
from twisted.internet import reactor


def async(n):
    print 'Starting job', n
    d = deferLater(reactor, n, lambda: None)
    def cbFinished(ignored):
        print 'Finishing job', n
    d.addCallback(cbFinished)
    return d


def assign(jobs):
    # Create new jobs to be processed
    jobs.put(randrange(10))
    reactor.callLater(randrange(10), assign, jobs)


def worker(jobs):
    while True:
        yield jobs.get().addCallback(async)


def main():
    jobs = DeferredQueue()

    for i in range(10):
        jobs.put(i)

    assign(jobs)

    for i in range(3):
        cooperate(worker(jobs))

    reactor.run()


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>2862440</id><snippet>async</snippet></ROW><ROW><id>2862440</id><snippet>worker</snippet></ROW><ROW><id>2862440</id><snippet>DeferredQueue</snippet></ROW><ROW><id>2862440</id><snippet>async</snippet></ROW><ROW><id>2862440</id><snippet>async</snippet></ROW><ROW><id>2862440</id><snippet>Deferred</snippet></ROW><ROW><id>2862440</id><snippet>get</snippet></ROW><ROW><id>2862440</id><snippet>worker</snippet></ROW><ROW><id>2862440</id><snippet>cooperate</snippet></ROW><ROW><id>2862440</id><snippet>Deferred</snippet></ROW><ROW><id>2862440</id><snippet>DeferredSemaphore</snippet></ROW><ROW><id>2862440</id><snippet>cooperate</snippet></ROW><ROW><id>2862440</id><snippet>CooperativeTask</snippet></ROW><ROW><id>2862440</id><snippet>pause</snippet></ROW><ROW><id>2862440</id><snippet>resume</snippet></ROW><ROW><id>2862440</id><snippet>DeferredQueue</snippet></ROW><ROW><id>2862440</id><snippet>put</snippet></ROW><ROW><id>2862440</id><snippet>DeferredSemaphore</snippet></ROW><ROW><id>2862512</id><snippet>('date', str, None),
</snippet></ROW><ROW><id>2862512</id><snippet>datetime</snippet></ROW><ROW><id>2862512</id><snippet>strptime</snippet></ROW><ROW><id>2862512</id><snippet>('date', lambda dt: str(dt.date()), None),
</snippet></ROW><ROW><id>2862512</id><snippet>strptime</snippet></ROW><ROW><id>2862512</id><snippet>strftime</snippet></ROW><ROW><id>2862512</id><snippet>f</snippet></ROW><ROW><id>2862512</id><snippet>strftime</snippet></ROW><ROW><id>2862512</id><snippet>p</snippet></ROW><ROW><id>2862512</id><snippet>strptime</snippet></ROW><ROW><id>2862760</id><snippet>for row in reader:
    for x in row[:]:
                if len(x)&lt; 1:
                         x = 0
                print x
</snippet></ROW><ROW><id>2862760</id><snippet>for row in reader:
    for i, x in enumerate(row):
                if len(x)&lt; 1:
                         x = row[i] = 0
                print x
</snippet></ROW><ROW><id>2862760</id><snippet>print</snippet></ROW><ROW><id>2862760</id><snippet>row</snippet></ROW><ROW><id>2862760</id><snippet>enumerate</snippet></ROW><ROW><id>2862760</id><snippet>0</snippet></ROW><ROW><id>2862760</id><snippet>int</snippet></ROW><ROW><id>2862777</id><snippet>TestCase</snippet></ROW><ROW><id>2862777</id><snippet>__init__</snippet></ROW><ROW><id>2862777</id><snippet>module.testVars = [1, 2, 3, "foo"]
</snippet></ROW><ROW><id>2863398</id><snippet>Comment.__mapper_args__</snippet></ROW><ROW><id>2863398</id><snippet>__mapper_args__ = {
    'polymorphic_identity': 'comment',
    'inherit_condition': (id == Entity.id),
}
</snippet></ROW><ROW><id>2863398</id><snippet>_idref</snippet></ROW><ROW><id>2863398</id><snippet>Entity</snippet></ROW><ROW><id>2863398</id><snippet>Comment</snippet></ROW><ROW><id>2863427</id><snippet>urlopen()</snippet></ROW><ROW><id>2863427</id><snippet>import urllib
import urllib2

url = 'http://www.example.com'
values = {'var' : 500}

data = urllib.urlencode(values)
response = urllib2.urlopen(url, data)
page = response.read()
</snippet></ROW><ROW><id>2863427</id><snippet>urlopen()</snippet></ROW><ROW><id>2863427</id><snippet>import urllib
import urllib2

url = 'http://www.example.com'
values = {'var' : 500}

data = urllib.urlencode(values)
fullurl = url + '?' + data
response = urllib2.urlopen(fullurl)
page = response.read()
</snippet></ROW><ROW><id>2863427</id><snippet>curl</snippet></ROW><ROW><id>2863427</id><snippet>os.system()</snippet></ROW><ROW><id>2863588</id><snippet>&gt;&gt;&gt; if (n/2) * 2 == n:
...     print 'Even'
... else: print 'Odd'
</snippet></ROW><ROW><id>2863588</id><snippet>&gt;&gt;&gt; if (n/2) * 2 == n:
...     print 'Even'
... else:
...     print 'Odd'
</snippet></ROW><ROW><id>2863588</id><snippet>&gt;&gt;&gt; print 'Even' if (n/2) * 2 == n else 'Odd'
</snippet></ROW><ROW><id>2863649</id><snippet>READFUNCTION</snippet></ROW><ROW><id>2863649</id><snippet>READFUNCTION</snippet></ROW><ROW><id>2863649</id><snippet>fp.read</snippet></ROW><ROW><id>2863812</id><snippet>and_</snippet></ROW><ROW><id>2863812</id><snippet>and</snippet></ROW><ROW><id>2863812</id><snippet>and_((Matter.id == WorkItem.matter_id), (WorkItem.line_item_id == None))
</snippet></ROW><ROW><id>2863932</id><snippet>&lt;lambda$48&gt;</snippet></ROW><ROW><id>2863932</id><snippet>&lt;lambda&gt;</snippet></ROW><ROW><id>2863932</id><snippet>if self.fset.__name__ == '&lt;lambda&gt;' or not self.fset.__name__:</snippet></ROW><ROW><id>2863932</id><snippet>if self.fset.__name__.startswith('&lt;lambda') or not self.fset.__name__:
</snippet></ROW><ROW><id>2864198</id><snippet>yt = gdata.youtube.service.YouTubeService()
yt.ssl = False
</snippet></ROW><ROW><id>2864282</id><snippet>https = suds.transport.https.HttpTransport()
opener = urllib2.build_opener(HTTPSudsPreprocessor)
https.urlopener = opener
suds.client.Client(URL, transport = https)
</snippet></ROW><ROW><id>2864282</id><snippet>class HTTPSudsPreprocessor(urllib2.BaseHandler):

    def http_request(self, req):
        req.add_header('Content-Type', 'text/xml; charset=utf-8')
        return req

    https_request = http_request
</snippet></ROW><ROW><id>2864387</id><snippet>&gt;&gt;&gt; from mymodule import MyClass
&gt;&gt;&gt; obj = MyClass()
</snippet></ROW><ROW><id>2864387</id><snippet>&gt;&gt;&gt; import mymodule
&gt;&gt;&gt; obj = mymodule.MyClass()
</snippet></ROW><ROW><id>2864387</id><snippet>&gt;&gt;&gt; from mypackage.mymodule import MyClass
&gt;&gt;&gt; obj = MyClass()
</snippet></ROW><ROW><id>2864906</id><snippet>del myList[beginIndex:endIndex+1]
</snippet></ROW><ROW><id>2865328</id><snippet>os.walk</snippet></ROW><ROW><id>2865328</id><snippet>import os
def recursive_file_gen(mydir):
    for root, dirs, files in os.walk(mydir):
        for file in files:
            yield os.path.join(root, file)
</snippet></ROW><ROW><id>2865328</id><snippet>os.walk</snippet></ROW><ROW><id>2865328</id><snippet>recursive_file_gen</snippet></ROW><ROW><id>2865328</id><snippet>yield</snippet></ROW><ROW><id>2865328</id><snippet>list(recursive_file_gen(mydir))
</snippet></ROW><ROW><id>2865440</id><snippet>bzrlib</snippet></ROW><ROW><id>2865440</id><snippet>import bzrlib</snippet></ROW><ROW><id>2865593</id><snippet>self.dict1</snippet></ROW><ROW><id>2865593</id><snippet>self.list1</snippet></ROW><ROW><id>2865593</id><snippet>self.int1</snippet></ROW><ROW><id>2865824</id><snippet>&gt;&gt;&gt; from google.appengine.api import users
&gt;&gt;&gt; import urllib
&gt;&gt;&gt; url = users.create_login_url()
&gt;&gt;&gt; url_dict = dict((p.split('=') for p in url.split('&amp;')))
&gt;&gt;&gt; urllib.unquote_plus(url_dict['ahname'])
'App Engine Console'
</snippet></ROW><ROW><id>2865958</id><snippet>import java.io.*;
import java.util.Scanner;

    public class ScanXan {
        public static void main(String[] args) throws IOException {
            Scanner s = null;
            try {
                s = new Scanner(new BufferedReader(new FileReader("myFile.txt")));

                while (s.hasNextLine()) {
                    System.out.println(s.nextLine());
                }
            } finally {
                if (s != null) {
                    s.close();
                }
            }
        }
    }
</snippet></ROW><ROW><id>2866112</id><snippet>tp_richcompare</snippet></ROW><ROW><id>2866112</id><snippet>tp_compare</snippet></ROW><ROW><id>2866112</id><snippet>tp_richcompare</snippet></ROW><ROW><id>2866112</id><snippet>memcmp(a, b, sizeof(*a)) == 0</snippet></ROW><ROW><id>2866112</id><snippet>memcmp(a, b, sizeof(*a)) &lt; 0</snippet></ROW><ROW><id>2866112</id><snippet>a</snippet></ROW><ROW><id>2866112</id><snippet>b</snippet></ROW><ROW><id>2866112</id><snippet>tp_compare</snippet></ROW><ROW><id>2866112</id><snippet>-1</snippet></ROW><ROW><id>2866112</id><snippet>0</snippet></ROW><ROW><id>2866112</id><snippet>1</snippet></ROW><ROW><id>2866112</id><snippet>tp_richcompare</snippet></ROW><ROW><id>2866112</id><snippet>tp_richcompare</snippet></ROW><ROW><id>2866112</id><snippet>u &lt; v</snippet></ROW><ROW><id>2866112</id><snippet>u</snippet></ROW><ROW><id>2866112</id><snippet>v</snippet></ROW><ROW><id>2866160</id><snippet>import array
idlist = array.array('l')
with open(filename, "rb") as f:
    while True:
        try: idlist.fromfile(f, 2000)
        except EOFError: break
idtuple = tuple(idlist)
</snippet></ROW><ROW><id>2866160</id><snippet>tuple</snippet></ROW><ROW><id>2866160</id><snippet>file</snippet></ROW><ROW><id>2866160</id><snippet>struct</snippet></ROW><ROW><id>2866160</id><snippet>array</snippet></ROW><ROW><id>2866160</id><snippet>idlist = [ ]
with open(filename, "rb") as f:
    while True:
        bytes_read = f.read(struct.calcsize("=l"))
        if not bytes_read: break
        oneid = struct.unpack("=l", bytes_read)[0]
        idlist.append(oneid)
</snippet></ROW><ROW><id>2866160</id><snippet>with</snippet></ROW><ROW><id>2866353</id><snippet>Template.generate()</snippet></ROW><ROW><id>2866353</id><snippet>Template.render_context()</snippet></ROW><ROW><id>2866353</id><snippet>Stream.serialize()</snippet></ROW><ROW><id>2866809</id><snippet>&gt;&gt;&gt; regex = re.compile(r'^([0-9a-z.]+)\.(S[0-9]{2}E[0-9]{2}|[0-9]{3,4}|[0-9]{2}x[0-9]{2})$', re.I)
&gt;&gt;&gt; regex.match('Name.Of.Show.01x01').groups()
('Name.Of.Show', '01x01')
&gt;&gt;&gt; regex.match('Name.Of.Show.101').groups()
('Name.Of.Show', '101')
</snippet></ROW><ROW><id>2866809</id><snippet>&gt;&gt;&gt; 'Name.Of.Show.101'.rpartition('.')
('Name.Of.Show', '.', '101')
</snippet></ROW><ROW><id>2866877</id><snippet>stdio</snippet></ROW><ROW><id>2866877</id><snippet>?</snippet></ROW><ROW><id>2866877</id><snippet>os.listdir()</snippet></ROW><ROW><id>2866877</id><snippet>listall</snippet></ROW><ROW><id>2866877</id><snippet>listall(ur'C:\Documents and Settings\khedarnatha\Local Settings\Temporary Internet Files')
</snippet></ROW><ROW><id>2867206</id><snippet>setHorizontalHeaderLabels()</snippet></ROW><ROW><id>2867206</id><snippet>setVerticalHeaderLabels()</snippet></ROW><ROW><id>2867206</id><snippet>from PyQt4 import QtGui

class MyWindow(QtGui.QMainWindow):

    def __init__(self, parent):
        QtGui.QMainWindow.__init__(self, parent)

        table = QtGui.QTableWidget(3, 3, self)  # create 3x3 table
        table.setHorizontalHeaderLabels(('Col 1', 'Col 2', 'Col 3'))
        table.setVerticalHeaderLabels(('Row 1', 'Row 2', 'Row 3'))
        for column in range(3):
            for row in range(3):
                table.setItem(row, column, QtGui.QWidget(self))  # your contents

        self.setCentralWidget(table)
        self.show()
</snippet></ROW><ROW><id>2867273</id><snippet>&gt;&gt;&gt; from dateutil import tz
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; utc_time = datetime(2010, 5, 19, 9, 16, 43, tzinfo=tz.tzutc())
&gt;&gt;&gt; jst_time = utc_time.astimezone(tz.gettz('Japan'))
&gt;&gt;&gt; print utc_time
2010-05-19 09:16:43+00:00
&gt;&gt;&gt; print jst_time
2010-05-19 18:16:43+09:00
</snippet></ROW><ROW><id>2867273</id><snippet>datetime</snippet></ROW><ROW><id>2867273</id><snippet>dateutil</snippet></ROW><ROW><id>2867273</id><snippet>dateutil.tz.tzlocal()</snippet></ROW><ROW><id>2867491</id><snippet>def compatible_pred(obj_types, fun_signature):
  if len(obj_types) != len(fun_signature): return False
  return all(issubclass(of, ft) for of, ft in zip(obj_types, fun_signature))

def is_compatible(obj_types, fun_signatures=(t1, t2)):
  return [t for t in fun_signatures if compatible_pred(obj_types, t)]
</snippet></ROW><ROW><id>2867491</id><snippet>is_compatible</snippet></ROW><ROW><id>2867491</id><snippet>getcompatibles</snippet></ROW><ROW><id>2867491</id><snippet>iscompatible</snippet></ROW><ROW><id>2867491</id><snippet>compatible_pred</snippet></ROW><ROW><id>2867813</id><snippet>format</snippet></ROW><ROW><id>2867813</id><snippet>%s</snippet></ROW><ROW><id>2867813</id><snippet>foo = u'Émilie and Juañ are turncoats.'
bar = "foo is %s" % foo
</snippet></ROW><ROW><id>2867813</id><snippet>foo</snippet></ROW><ROW><id>2867813</id><snippet>unicode</snippet></ROW><ROW><id>2867813</id><snippet>bar = "foo2 is %s" % foo2
</snippet></ROW><ROW><id>2867813</id><snippet>foo2</snippet></ROW><ROW><id>2867813</id><snippet>Exception</snippet></ROW><ROW><id>2867813</id><snippet>unicode</snippet></ROW><ROW><id>2867813</id><snippet>str</snippet></ROW><ROW><id>2867813</id><snippet>ascii</snippet></ROW><ROW><id>2867813</id><snippet>bar = u"foo2 is %s" % foo2
</snippet></ROW><ROW><id>2867813</id><snippet>unicode</snippet></ROW><ROW><id>2867813</id><snippet>foo2</snippet></ROW><ROW><id>2867813</id><snippet>unicode</snippet></ROW><ROW><id>2867813</id><snippet>%s</snippet></ROW><ROW><id>2867813</id><snippet>str()</snippet></ROW><ROW><id>2867813</id><snippet>unicode</snippet></ROW><ROW><id>2867813</id><snippet>unicode</snippet></ROW><ROW><id>2867813</id><snippet>unicode</snippet></ROW><ROW><id>2867813</id><snippet>__str__</snippet></ROW><ROW><id>2867813</id><snippet>__unicode__</snippet></ROW><ROW><id>2867833</id><snippet># Any reference properties not loaded yet
customer = Customer.get_by_id(1)
print customer.name
print customer.address

# Assuming customer.order is a ReferenceProperty, now is when it
# would be loaded from the datastore.
print customer.order.created_at
</snippet></ROW><ROW><id>2868123</id><snippet>import sys

dispatch = { 'map': ('modulo.map.views', 'map'),
             'schedule': ('modulo.schedule.views', 'schedule_day'),
             ...etc etc.. }
if app in dispatch:
  modname, funname = dispatch[app]
  try: __import__(modname)
  except ImportError: pass
  else:
    f = getattr(sys.modules[modname], funname, None)
    if f is not None:
      return f(request, *args, **kwargs)
</snippet></ROW><ROW><id>2868192</id><snippet>name</snippet></ROW><ROW><id>2868192</id><snippet>strcpy</snippet></ROW><ROW><id>2868192</id><snippet>f.value</snippet></ROW><ROW><id>2868455</id><snippet>data = open("googlel.csv", "rb")
orig = csv.reader(data, delimiter = ';')
goodrows = []
for feed in gotfeeds:    
   for link,comments in feed.items():
       data.seek(0)
       for row in orig:
           print link
           if link in row[1]:
               row.append(comments)
               goodrows.append(row)
</snippet></ROW><ROW><id>2868648</id><snippet>--dump</snippet></ROW><ROW><id>2868648</id><snippet>appcfg.py download_data --config_file=your_loader.py --filename=b.csv --kind=DbModelName &lt;app-directory&gt;
</snippet></ROW><ROW><id>2869206</id><snippet>sizes</snippet></ROW><ROW><id>2869206</id><snippet>verbes</snippet></ROW><ROW><id>2869206</id><snippet>nounes</snippet></ROW><ROW><id>2869206</id><snippet>import itertools, string

t = string.Template("$size widget that $verb $noun")
for size, verb, noun in itertools.product(sizes, verbes, nounes):
    print t.safe_substitute(size=size, verb=verb, noun=noun)
</snippet></ROW><ROW><id>2869312</id><snippet>urllib.urlencode(args)
</snippet></ROW><ROW><id>2869312</id><snippet>urllib.urlencode(dict([(k, args[k].encode('utf-8')) for k in args]))
</snippet></ROW><ROW><id>2869374</id><snippet>def blend (color1, color2, weight = 0.5):
    return gtk.gdk.Color (
        color1.red_float   * weight + color2.red_float   * (1 - weight),
        color1.green_float * weight + color2.green_float * (1 - weight),
        color1.blue_float  * weight + color2.blue_float  * (1 - weight))

for state in gtk.StateType.__enum_values__:
    label.modify_fg (state, blend (label.style.fg[state], label.style.bg[state]))
</snippet></ROW><ROW><id>2869389</id><snippet>example_dto = ExampleDTO()</snippet></ROW><ROW><id>2869441</id><snippet>from datetime import datetime, timedelta

def hours_ago(hours):
    return datetime.today() - timedelta(hours=hours)

def days_ago(days):
    return datetime.today() - timedelta(days=days)
</snippet></ROW><ROW><id>2870073</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>2870073</id><snippet>import xml.etree.ElementTree as xee
data='''\
&lt;node1&gt;
  &lt;node2 a1="x1"&gt; ... &lt;/node2&gt;
  &lt;node2 a1="x2"&gt; ... &lt;/node2&gt;
  &lt;node2 a1="x1"&gt; ... &lt;/node2&gt;
&lt;/node1&gt;
'''
doc=xee.fromstring(data)

for tag in doc.findall('node2'):
    if tag.attrib['a1']=='x2':
        doc.remove(tag)
print(xee.tostring(doc))
# &lt;node1&gt;
#   &lt;node2 a1="x1"&gt; ... &lt;/node2&gt;
#   &lt;node2 a1="x1"&gt; ... &lt;/node2&gt;
# &lt;/node1&gt;
</snippet></ROW><ROW><id>2870073</id><snippet>lxml</snippet></ROW><ROW><id>2870073</id><snippet>import lxml.etree
data='''\
&lt;node1&gt;
  &lt;node2 a1="x1"&gt; ... &lt;/node2&gt;
  &lt;node2 a1="x2"&gt; ... &lt;/node2&gt;
  &lt;node2 a1="x1"&gt; ... &lt;/node2&gt;
&lt;/node1&gt;
'''
doc = lxml.etree.XML(data)
e=doc.find('node2/[@a1="x2"]')
doc.remove(e)
print(lxml.etree.tostring(doc))

# &lt;node1&gt;
#   &lt;node2 a1="x1"&gt; ... &lt;/node2&gt;
#   &lt;node2 a1="x1"&gt; ... &lt;/node2&gt;
# &lt;/node1&gt;
</snippet></ROW><ROW><id>2870073</id><snippet>node2</snippet></ROW><ROW><id>2870073</id><snippet>node2</snippet></ROW><ROW><id>2870073</id><snippet>doc=xee.fromstring(data)
for parent in doc.getiterator():
    for child in parent.findall('node2'):
        if child.attrib['a1']=='x2':
            parent.remove(child)
</snippet></ROW><ROW><id>2870073</id><snippet>doc = lxml.etree.XML(data)
for parent in doc.iter('*'):
    child=parent.find('node2/[@a1="x2"]')
    if child is not None:
        parent.remove(child)
</snippet></ROW><ROW><id>2870475</id><snippet>http://www\.example\.com/online/store/TitleDetail\?detail&amp;sku=\d+
</snippet></ROW><ROW><id>2870517</id><snippet>reduce</snippet></ROW><ROW><id>2870517</id><snippet>from functools import reduce</snippet></ROW><ROW><id>2870517</id><snippet>from collections import Counter
cnt = Counter("abracadabra")
</snippet></ROW><ROW><id>2870517</id><snippet>d = defaultdict(int)
for x in xs: d[x] += 1
</snippet></ROW><ROW><id>2870517</id><snippet>reduce</snippet></ROW><ROW><id>2870688</id><snippet>3.0.8</snippet></ROW><ROW><id>2870688</id><snippet>import BeautifulSoup

def get_tables(htmldoc):
    soup = BeautifulSoup.BeautifulSoup(htmldoc)
    return soup.findAll('table')
</snippet></ROW><ROW><id>2870688</id><snippet>array</snippet></ROW><ROW><id>2870688</id><snippet>list</snippet></ROW><ROW><id>2870688</id><snippet>tr</snippet></ROW><ROW><id>2870688</id><snippet>td</snippet></ROW><ROW><id>2870688</id><snippet>def makelist(table):
  result = []
  allrows = table.findAll('tr')
  for row in allrows:
    result.append([])
    allcols = row.findAll('td')
    for col in allcols:
      thestrings = [unicode(s) for s in col.findAll(text=True)]
      thetext = ''.join(thestrings)
      result[-1].append(thetext)
  return result
</snippet></ROW><ROW><id>2870732</id><snippet>import urllib2
import lxml.etree

url = "http://weather.yahooapis.com/forecastrss?w=24260013&amp;u=c"
doc = lxml.etree.parse( urllib2.urlopen(url) ).getroot()
conditions = doc.xpath('*/*/yweather:condition',
                       namespaces={'yweather': 'http://xml.weather.yahoo.com/ns/rss/1.0'})
try:
    condition=conditions[0]
except IndexError:
    print('yweather:condition not found')
print(condition.items())
# [('text', 'Fair'), ('code', '33'), ('temp', '16'), ('date', 'Wed, 19 May 2010 9:55 pm EDT')]
</snippet></ROW><ROW><id>2870738</id><snippet>&gt;&gt;&gt; r'ab\c' '\\' == 'ab\\c\\'
True
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2870832</id><snippet>sqlite</snippet></ROW><ROW><id>2870980</id><snippet>twisted.conch.telnet</snippet></ROW><ROW><id>2870980</id><snippet>twisted.protocols.telnet</snippet></ROW><ROW><id>2870980</id><snippet>twisted.conch.telnet</snippet></ROW><ROW><id>2870980</id><snippet>self.transport</snippet></ROW><ROW><id>2870980</id><snippet>dataReceived</snippet></ROW><ROW><id>2870980</id><snippet>self.transport.write</snippet></ROW><ROW><id>2870987</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; data = open("file.csv", "wb")
&gt;&gt;&gt; w = csv.writer(data)
&gt;&gt;&gt; w.writerow(['word1', 'word2'])
&gt;&gt;&gt; w.writerow(['word 1', 'word2'])
&gt;&gt;&gt; data.close()
&gt;&gt;&gt; 
[1]+  Stopped                 python2.6
$ cat file.csv
word1,word2
word 1,word2
$
</snippet></ROW><ROW><id>2871104</id><snippet>$ python -c'from BeautifulSoup import BeautifulSoup
&gt; print BeautifulSoup("""&lt;html&gt;Preheat oven to 350° F
&gt; Welcome to Lorem Ipsum Inc®""",
&gt; convertEntities=BeautifulSoup.HTML_ENTITIES).contents[0].string'
Preheat oven to 350° F
Welcome to Lorem Ipsum Inc®
</snippet></ROW><ROW><id>2871589</id><snippet>__main__</snippet></ROW><ROW><id>2871589</id><snippet>#parse config file</snippet></ROW><ROW><id>2871589</id><snippet>def handle(environ, start_response):
    # same as before

def create_app(config_file):
    #parse config file for session options
    return SessionMiddleWare(handle, some_session_opts_here)

if __name__ == '__main__':
    app = create_app(config_file)
    from flup.server.fcgi import WSGIServer
    WSGIServer(app).run()
</snippet></ROW><ROW><id>2871647</id><snippet>email</snippet></ROW><ROW><id>2871647</id><snippet># Create the body of the message (a plain-text and an HTML version).
text = "Hi!\nHow are you?\nHere is the link you wanted:\nhttp://www.python.org"
html = """\
&lt;html&gt;
  &lt;head&gt;&lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;Hi!&lt;br&gt;
       How are you?&lt;br&gt;
       Here is the &lt;a href="http://www.python.org"&gt;link&lt;/a&gt; you wanted.
    &lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
"""

# Record the MIME types of both parts - text/plain and text/html.
part1 = MIMEText(text, 'plain')
part2 = MIMEText(html, 'html')

# Attach parts into message container.
# According to RFC 2046, the last part of a multipart message, in this case
# the HTML message, is best and preferred.
msg.attach(part1)
msg.attach(part2)
#...
</snippet></ROW><ROW><id>2871950</id><snippet>'\n'.join(s[pos:pos+76] for pos in xrange(0, len(s), 76))
</snippet></ROW><ROW><id>2872045</id><snippet>ConfigParser</snippet></ROW><ROW><id>2872045</id><snippet>#! /usr/bin/env python2.6

from StringIO import StringIO
import ConfigParser

def read_configfile_without_sectiondeclaration(filename):
    buffer = StringIO()
    buffer.write("[main]\n")
    buffer.write(open(filename).read())
    buffer.seek(0)
    config = ConfigParser.ConfigParser()
    config.readfp(buffer)
    return config

if __name__ == "__main__":
    import sys
    config = read_configfile_without_sectiondeclaration(sys.argv[1])
    print config.items("main")
</snippet></ROW><ROW><id>2872056</id><snippet>#!/bin/sh</snippet></ROW><ROW><id>2872378</id><snippet>input_str = '1:Apples, 4:Bananas, 6:Grapes, 23:Oranges'
removal_str = '4:Bananas'
sep = ", "

print sep.join(input_str.split(sep).remove(removal_str))
</snippet></ROW><ROW><id>2872378</id><snippet>input_str = '1:Apples, 4:Bananas, 6:Grapes, 23:Oranges'
removal_str = '4:Bananas'
sep = ", "

print sep.join([ i for i in input_str.split(sep) if i != removal_str ])
</snippet></ROW><ROW><id>2872378</id><snippet>def str_to_dictlist(inp_str):
    import re
    regexp = r"(?P&lt;id&gt;[0-9]+):(?P&lt;name&gt;[a-zA-Z0-9_]+)"
    return [ x.groups() for x in re.finditer(regexp, inp_str) ]

input_str = '1:Apples, 4:Bananas, 6:Grapes, 23:Oranges'
subtraction_str = "4:Bananas"
sep = ", "

input_items = str_to_dictlist(input_str)
removal_items = str_to_dictlist(subtraction_str)
final_items = [ "%s:%s" % (x,y) for x,y in input_items if (x,y) not in removal_items ]

print sep.join(final_items)
</snippet></ROW><ROW><id>2872378</id><snippet>if items_found &lt; (num_commas + 1):
    print warning_str
</snippet></ROW><ROW><id>2872519</id><snippet>info = (data[:75] + '..') if len(data) &gt; 75 else data
</snippet></ROW><ROW><id>2874340</id><snippet>.get</snippet></ROW><ROW><id>2874340</id><snippet>dict</snippet></ROW><ROW><id>2874340</id><snippet>&gt;&gt;&gt; d = {1: 2}
&gt;&gt;&gt; d.get(1, 3)
2
&gt;&gt;&gt; d.get(5, 3)
3
</snippet></ROW><ROW><id>2874340</id><snippet>getItemValue</snippet></ROW><ROW><id>2874340</id><snippet>true_val if true_false_check else false_val
&gt;&gt;&gt; 'a' if False else 'b'
'b'
</snippet></ROW><ROW><id>2874340</id><snippet>with</snippet></ROW><ROW><id>2874340</id><snippet>try-finally</snippet></ROW><ROW><id>2874340</id><snippet>with open(infile) as f:
    reader = csv.reader(f)
    ... etc
</snippet></ROW><ROW><id>2874340</id><snippet>row</snippet></ROW><ROW><id>2874340</id><snippet>csv.DictReader</snippet></ROW><ROW><id>2874340</id><snippet>csv. reader</snippet></ROW><ROW><id>2874340</id><snippet>row</snippet></ROW><ROW><id>2874340</id><snippet>city_id</snippet></ROW><ROW><id>2874340</id><snippet>name</snippet></ROW><ROW><id>2874340</id><snippet>city_id</snippet></ROW><ROW><id>2874340</id><snippet>row</snippet></ROW><ROW><id>2874340</id><snippet>.setdefault</snippet></ROW><ROW><id>2874340</id><snippet>&gt;&gt;&gt; d
{1: 2}
&gt;&gt;&gt; d.setdefault(1, 3)
2
&gt;&gt;&gt; d
{1: 2}
&gt;&gt;&gt; d.setdefault(3, 3)
3
&gt;&gt;&gt; d
{1: 2, 3: 3}
</snippet></ROW><ROW><id>2874340</id><snippet>id</snippet></ROW><ROW><id>2874340</id><snippet>row[id] = curr_dict[code]['id']</snippet></ROW><ROW><id>2874340</id><snippet>0</snippet></ROW><ROW><id>2874340</id><snippet>&gt;&gt;&gt; 'abc.txt'[:-4]
'abc'
</snippet></ROW><ROW><id>2874340</id><snippet>fetchone</snippet></ROW><ROW><id>2874340</id><snippet>fetchmany</snippet></ROW><ROW><id>2874340</id><snippet>fetchall</snippet></ROW><ROW><id>2874340</id><snippet>Row</snippet></ROW><ROW><id>2874547</id><snippet>__import__</snippet></ROW><ROW><id>2874552</id><snippet>int ternarySearch(MyFunctor f, int left, int right, float absolutePrecision) {
  #left and right are the current bounds; the maximum is between them
  if (right - left) &lt; absolutePrecision:
    return (left + right)/2

  leftThird = (2*left + right)/3
  rightThird = (left + 2*right)/3

  if (f.myFunction(leftThird) &lt; f.myFunction(rightThird)) {
    return ternarySearch(f, leftThird, right, absolutePrecision)
  }
  return ternarySearch(f, left, rightThird, absolutePrecision)
}
</snippet></ROW><ROW><id>2874552</id><snippet>interface MyFunctor {
  int myFunction(int arg);
}
</snippet></ROW><ROW><id>2874552</id><snippet>class MyFunctorImpl implements MyFunctor {
  int myFunction(int arg) {
     // implementation
  }
}
</snippet></ROW><ROW><id>2874552</id><snippet>ternarySearch</snippet></ROW><ROW><id>2874552</id><snippet>MyFunctorImpl</snippet></ROW><ROW><id>2874608</id><snippet>reverse</snippet></ROW><ROW><id>2874647</id><snippet>"text/uri-list"</snippet></ROW><ROW><id>2874647</id><snippet>event.mimeData().urls()</snippet></ROW><ROW><id>2874647</id><snippet>PyQt4.QtCore.QUrl</snippet></ROW><ROW><id>2874647</id><snippet>hasColor()
hasFormat()
hasHtml()
hasImage()
hasText()
hasUrls()
</snippet></ROW><ROW><id>2874748</id><snippet>ord</snippet></ROW><ROW><id>2874748</id><snippet>&gt;&gt;&gt; byte = 'a'
&gt;&gt;&gt; '{0:08b}'.format(ord(byte))
'01100001'
</snippet></ROW><ROW><id>2875688</id><snippet>def test_GetStreamUri(self):
    self.assertRaises(WebFault, self.client.service.GetStreamUri)
    result = self.client.service.GetStreamUri(self.stream, self.token)
</snippet></ROW><ROW><id>2875688</id><snippet>unittest</snippet></ROW><ROW><id>2876101</id><snippet># in your init method
self.Bind(wx.EVT_LISTBOX_DCLICK, self.EvtListBoxDClick, self.mainlist)


# the callback
def EvtListBoxDClick(self, event):
     self.otherlist.Append(self.mainlist.GetSelection())
     self.mainlist.Delete(self.lb1.GetSelection())
</snippet></ROW><ROW><id>2876651</id><snippet>for root, dirs, files in os.walk(folder):
    for f in files:
      try:
        tar.add(os.path.join(root, f))
      except IOError:
        pass
    for d in dirs:
      try:
        tar.add(os.path.join(root, d), recursive=False)
      except IOError:
        pass
</snippet></ROW><ROW><id>2876651</id><snippet>recursive=False</snippet></ROW><ROW><id>2877133</id><snippet>python</snippet></ROW><ROW><id>2877133</id><snippet>import django</snippet></ROW><ROW><id>2877133</id><snippet>pip install django</snippet></ROW><ROW><id>2877133</id><snippet>easy_install pip</snippet></ROW><ROW><id>2877133</id><snippet>easy_install</snippet></ROW><ROW><id>2877280</id><snippet>import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'
from google.appengine.dist import use_library
use_library('django', '1.1')
</snippet></ROW><ROW><id>2877302</id><snippet>attrs</snippet></ROW><ROW><id>2877302</id><snippet>areaId = soupHandler.find('input', attrs={'name':'form_build_id', 'type':'hidden'})
</snippet></ROW><ROW><id>2877433</id><snippet>class Foo(object):
    pass
</snippet></ROW><ROW><id>2877433</id><snippet>class Foo():
    pass
</snippet></ROW><ROW><id>2877433</id><snippet>&gt;&gt;&gt; class Foo(object):
...     pass
...
&gt;&gt;&gt; dir(Foo.__class__)
['__abstractmethods__', '__base__', '__bases__', '__basicsize__', '__call__', '__class__', '__delattr__', '__dict__', '__dictoffset__', '__doc__', '__
eq__', '__flags__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__instancecheck__', '__itemsize__', '__le__', '__lt
__', '__module__', '__mro__', '__name__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__s
ubclasscheck__', '__subclasses__', '__subclasshook__', '__weakrefoffset__', 'mro']
&gt;&gt;&gt; class Bar():
...     pass
...
&gt;&gt;&gt; dir(Bar.__class__)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: class Bar has no attribute '__class__'
&gt;&gt;&gt; dir(Bar)
['__doc__', '__module__']
&gt;&gt;&gt; dir(Foo)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '
__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']
</snippet></ROW><ROW><id>2877624</id><snippet>    ac = [(wx.ACCEL_CTRL, wx.WXK_RETURN, wx.NewId())]
    tbl = wx.AcceleratorTable(ac)
    list.SetAcceleratorTable(tbl)  # should overwrite its bindings?
</snippet></ROW><ROW><id>2877659</id><snippet>    textctrl.SetInsertionPointEnd()
    textctrl.WriteText(licence)
    textctrl.SetInsertionPointEnd()
</snippet></ROW><ROW><id>2877888</id><snippet>list = [1,2,3]
list. # auto-complete will recognize list is a list
</snippet></ROW><ROW><id>2877914</id><snippet>ca_client_inventory.service.SynchInventoryItemList(accountID, array_of_inventory_item_submit)
</snippet></ROW><ROW><id>2877943</id><snippet>import psutil
excelPids = []
for proc in psutil.process_iter():
  if proc.name == "EXCEL.EXE": excelPids.append(proc.pid)
</snippet></ROW><ROW><id>2877943</id><snippet>windowPidsAndTitle = []
win32gui.EnumWindows(lambda hwnd, resultList: resultList.append((win32gui.GetWindowThreadProcessId(hwnd),win32gui.GetWindowText(hwnd))), windowPidsAndTitle)
</snippet></ROW><ROW><id>2877943</id><snippet>  for pid,title in windowPidsAndTitle:
    if pid in excelPids:
      return title 
</snippet></ROW><ROW><id>2877943</id><snippet>xl = win32com.client.Dispatch("Excel.Application")
xl.ActiveWorkbook.FullName
</snippet></ROW><ROW><id>2877943</id><snippet>xl = win32com.client.GetObjec(None, "Excel.Application") #instance one
xl = win32com.client.GetObject("Name_Of_Workbook") #instance two
</snippet></ROW><ROW><id>2877943</id><snippet>import win32gui
win32gui.GetWindowText(win32gui.GetForegroundWindow()) 
#parse this and use GetObject to get your excel instance
</snippet></ROW><ROW><id>2877943</id><snippet>windows = []
win32gui.EnumWindows(lambda hwnd, resultList: resultList.append(win32gui.GetWindowText(hwnd)),windows)
#enumerates all the windows open from the top down
[i for i in windows if "Microsoft Excel" in i].pop(0)
#this one is closest to the top
</snippet></ROW><ROW><id>2878051</id><snippet>import cgi, urllib, urlparse

class Url(object):
    def __init__(self, url):
        """Construct from a string."""
        self.scheme, self.netloc, self.path, self.params, self.query, self.fragment = urlparse.urlparse(url)
        self.args = dict(cgi.parse_qsl(self.query))

    def __str__(self):
        """Turn back into a URL."""
        self.query = urllib.urlencode(self.args)
        return urlparse.urlunparse((self.scheme, self.netloc, self.path, self.params, self.query, self.fragment))
</snippet></ROW><ROW><id>2878051</id><snippet>u = Url(url)
del u.args['page']
url = str(u)
</snippet></ROW><ROW><id>2878540</id><snippet>data</snippet></ROW><ROW><id>2878540</id><snippet>self.data = []</snippet></ROW><ROW><id>2878540</id><snippet>__init__</snippet></ROW><ROW><id>2878588</id><snippet>\t</snippet></ROW><ROW><id>2878588</id><snippet>t</snippet></ROW><ROW><id>2878588</id><snippet>"http://awebsite.me/main?%s" % (urllib.urlencode({'param': cipherText}))
</snippet></ROW><ROW><id>2878743</id><snippet>fractions</snippet></ROW><ROW><id>2878743</id><snippet>fractions.Fraction()</snippet></ROW><ROW><id>2878743</id><snippet>float()</snippet></ROW><ROW><id>2878744</id><snippet>import os
os.startfile('C:/') # opens explorer at C:\ drive
</snippet></ROW><ROW><id>2878744</id><snippet>import os
import subprocess

def startfile(filename):
  try:
    os.startfile(filename)
  except:
    subprocess.Popen(['xdg-open', filename])
</snippet></ROW><ROW><id>2878744</id><snippet>startfile(os.getcwd())
</snippet></ROW><ROW><id>2879073</id><snippet>set()</snippet></ROW><ROW><id>2879073</id><snippet>dict()</snippet></ROW><ROW><id>2879073</id><snippet>index = {}
for word, s_word in words:
    index[s_word] = index.get(s_word, []) + [word]

for similar_words in index.values():
    print ' '.join(similar_words)        
</snippet></ROW><ROW><id>2879073</id><snippet>checked = [False] * len(words)
for i, (word, word_s) in enumerate(words):
    if checked[i]:
       continue
    for j, (other, other_s) in enumerate(words[i:]):
        if word_s == other_s:
            print other,
            checked[i+j] = True
    print
</snippet></ROW><ROW><id>2879179</id><snippet>from mysite.views import hello, my_homepage_view
</snippet></ROW><ROW><id>2879179</id><snippet>from mysite.views import current_datetime, hello, my_homepage_view
</snippet></ROW><ROW><id>2879264</id><snippet>fromAddr</snippet></ROW><ROW><id>2879512</id><snippet>__init__()</snippet></ROW><ROW><id>2879512</id><snippet>[]</snippet></ROW><ROW><id>2879512</id><snippet>self.l = l</snippet></ROW><ROW><id>2879512</id><snippet>def __init__(self, arg=None):
    if arg is None:
        arg = []
    self.arg = arg
</snippet></ROW><ROW><id>2879512</id><snippet>l</snippet></ROW><ROW><id>2879512</id><snippet>1</snippet></ROW><ROW><id>2879512</id><snippet>|</snippet></ROW><ROW><id>2879558</id><snippet>os.remove(your_image_field.name)
</snippet></ROW><ROW><id>2879768</id><snippet>globals()</snippet></ROW><ROW><id>2879768</id><snippet>AnimalSound</snippet></ROW><ROW><id>2879768</id><snippet>class AnimalSound(object):
   def __init__(self, makenoise=lambda: 'meow'):
       self.makenoise = makenoise

   def __str__(self):
       return self.makenoise()
</snippet></ROW><ROW><id>2879768</id><snippet>sound = AnimalSound(makenoise)
</snippet></ROW><ROW><id>2879768</id><snippet>globals()</snippet></ROW><ROW><id>2879768</id><snippet>AnimalSound</snippet></ROW><ROW><id>2879958</id><snippet>import codecs

def getisocodes_dict(data_path):
    # Provide a map from ISO code (both bibliographic and terminologic)
    # in ISO 639-2 to a dict with the two letter ISO 639-2 codes (alpha2)
    # English and french names
    #
    # "bibliographic" iso codes are derived from English word for the language
    # "terminologic" iso codes are derived from the pronunciation in the target 
    # language (if different to the bibliographic code)

    D = {}
    f = codecs.open(data_path, 'rb', 'utf-8')
    for line in f:
        iD = {}
        iD['bibliographic'], iD['terminologic'], iD['alpha2'], \
            iD['english'], iD['french'] = line.strip().split('|')
        D[iD['bibliographic']] = iD

        if iD['terminologic']:
            D[iD['terminologic']] = iD

        if iD['alpha2']:
            D[iD['alpha2']] = iD

        for k in iD:
            # Assign `None` when columns not available from the data
            iD[k] = iD[k] or None
    f.close()
    return D

if __name__ == '__main__':
    D = getisocodes_dict('ISO-639-2_utf-8.txt')
    print D['eng']
    print D['fr']

    # Print my current locale
    import locale
    print D[locale.getdefaultlocale()[0].split('_')[0].lower()]
</snippet></ROW><ROW><id>2880576</id><snippet>decimal</snippet></ROW><ROW><id>2880735</id><snippet>combined = delta.seconds + delta.microseconds/1E6</snippet></ROW><ROW><id>2880892</id><snippet>populate_from</snippet></ROW><ROW><id>2880892</id><snippet>AutoSlugField</snippet></ROW><ROW><id>2880892</id><snippet>unique=True</snippet></ROW><ROW><id>2880892</id><snippet>class Post(models.Model):
"""Blog post model."""
title = models.CharField('title', max_length=120)
slug = AutoSlugField('slug', unique=True, max_length=120, primary_key=True)
    ... snip...
</snippet></ROW><ROW><id>2880892</id><snippet>slug = AutoSlugField(populate_from = 'title', max_length=120, primary_key=True)
</snippet></ROW><ROW><id>2880892</id><snippet>AutoSlugField</snippet></ROW><ROW><id>2880892</id><snippet>primary_key=True</snippet></ROW><ROW><id>2880892</id><snippet>id</snippet></ROW><ROW><id>2880892</id><snippet>urls.py</snippet></ROW><ROW><id>2880892</id><snippet>url(r'post/(?P&lt;slug&gt;.+)/$', single_post)
</snippet></ROW><ROW><id>2880892</id><snippet>def single_post(request, slug):
   post = get_object_or_404(Post, slug = slug)
   ...
</snippet></ROW><ROW><id>2880973</id><snippet>import gtk
import vte

term = vte.Terminal()

term.feed("a\r\nb")

def get_text(term):
    print repr(term.get_text(lambda *a: True).rstrip())    
    gtk.main_quit()

term.connect('contents-changed', get_text)
gtk.main()
</snippet></ROW><ROW><id>2881048</id><snippet>time.localtime</snippet></ROW><ROW><id>2881048</id><snippet>tm_isdst</snippet></ROW><ROW><id>2881048</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.localtime()
(2010, 5, 21, 21, 48, 51, 4, 141, 0)
&gt;&gt;&gt; _.tm_isdst
0
</snippet></ROW><ROW><id>2881048</id><snippet>time.localtime()</snippet></ROW><ROW><id>2881049</id><snippet>direct_to_template(request, template, extra_context=None, mimetype=None, **kwargs)
</snippet></ROW><ROW><id>2881049</id><snippet>RequestContext</snippet></ROW><ROW><id>2881232</id><snippet>forms</snippet></ROW><ROW><id>2881232</id><snippet>response</snippet></ROW><ROW><id>2881232</id><snippet># The kind argument can also take values "multilist", "singlelist", "text",
# "clickable" and "file":
#  find first control that will accept text, and scribble in it
form.set_value("rhubarb rhubarb", kind="text", nr=0)
</snippet></ROW><ROW><id>2881232</id><snippet>kind</snippet></ROW><ROW><id>2881232</id><snippet>form.find_control()</snippet></ROW><ROW><id>2881232</id><snippet>form.set_value()</snippet></ROW><ROW><id>2881232</id><snippet>"text"</snippet></ROW><ROW><id>2881232</id><snippet>_form.py</snippet></ROW><ROW><id>2881232</id><snippet>TextControl</snippet></ROW><ROW><id>2881232</id><snippet>TEXTAREA</snippet></ROW><ROW><id>2881232</id><snippet>#---------------------------------------------------
class TextControl(ScalarControl):
    """Textual input control.

    Covers:

    INPUT/TEXT
    INPUT/PASSWORD
    INPUT/HIDDEN
    TEXTAREA

    """
    def __init__(self, type, name, attrs, index=None):
        ScalarControl.__init__(self, type, name, attrs, index)
        if self.type == "hidden": self.readonly = True
        if self._value is None:
            self._value = ""

    def is_of_kind(self, kind): return kind == "text"
</snippet></ROW><ROW><id>2881240</id><snippet>connect</snippet></ROW><ROW><id>2881240</id><snippet>bind</snippet></ROW><ROW><id>2881300</id><snippet>message_from_file()</snippet></ROW><ROW><id>2881300</id><snippet>PEP 3107</snippet></ROW><ROW><id>2881351</id><snippet>import wave
win= wave.open('sample.wav', 'rb')
wout= wave.open('segment.wav', 'wb')

t0, t1= 1.0, 2.0 # cut audio between one and two seconds
s0, s1= int(t0*win.getframerate()), int(t1*win.getframerate())
win.readframes(s0) # discard
frames= win.readframes(s1-s0)

wout.setparams(win.getparams())
wout.writeframes(frames)

win.close()
wout.close()
</snippet></ROW><ROW><id>2881384</id><snippet>class TypeAdaptingProperty(object):
    def __init__(self, key, type_, factory=None):
        self.key = key
        self.type_ = type_
        if factory is None:
            self.factory = type_

    def __get__(self, instance, owner):
        if instance is None:
            return self
        return getattr(instance, self.key)

    def __set__(self, instance, value):
        if not isinstance(value, self.type_):
            value = self.factory(value)
        setattr(instance, self.key, value)

    def __delete__(self, instance):
        delattr(instance, self.key)

class Book(object):
    isbn = TypeAdaptingProperty('isbn_', ISBNNumber)

b = Book()
b.isbn = 123 # Does the equivalent of b.isbn = ISBNNumber(123)
</snippet></ROW><ROW><id>2881384</id><snippet>class Adaptor(object):
    """Any callable can be an adaptor. This base class just proxies calls
    to an appropriately named method."""
    def __call__(self, input):
        return self.adapt(input)

class ObjectAdaptor(Adaptor):
    """Adaptor to create objects adapting the input value to the
    factory function/constructor arguments, and optionally setting
    fields after construction."""
    def __init__(self, factory, args=(), kwargs={}, fields={}):
        self.factory = factory
        self.arg_adaptors = args
        self.kwarg_adaptors = kwargs
        self.field_adaptors = fields

    def adapt(self, input):
        args = (adaptor(input) for adaptor in self.arg_adaptors)
        kwargs = dict((key, adaptor(input)) for key,adaptor in self.kwarg_adaptors.items())
        obj = self.factory(*args, **kwargs)
        for key, adaptor in self.field_adaptors.items():
            setattr(obj, key, adaptor(input))
        return obj

def TypeWrapper(type_):
    """Converts the input to the specified type."""
    return ObjectAdaptor(type_, args=[lambda input:input])

class ListAdaptor(Adaptor):
    """Converts a list of objects to a single type."""
    def __init__(self, item_adaptor):
        self.item_adaptor = item_adaptor
    def adapt(self, input):
        return map(self.item_adaptor, input)

class Pick(Adaptor):
    """Picks a key from an input dictionary."""
    def __init__(self, key, inner_adaptor):
        self.key = key
        self.inner_adaptor = inner_adaptor
    def adapt(self, input):
        return self.inner_adaptor(input[self.key])
</snippet></ROW><ROW><id>2881384</id><snippet>book_message_adaptor = ObjectAdaptor(Book, kwargs={
    'isbn': Pick('isbn_number', TypeWrapper(ISBNNumber)),
    'authors': Pick('authorlist', ListAdaptor(TypeWrapper(Author)))
})
</snippet></ROW><ROW><id>2881384</id><snippet>message = {'isbn_number': 123, 'authorlist': ['foo', 'bar', 'baz']}
book = book_message_adaptor(message)
# Does the equivalent of:
# Book(isbn=ISBNNumber(message['isbn_number']),
#      authors=map(Author, message['author_list']))
</snippet></ROW><ROW><id>2881633</id><snippet>gobject.threads_init()
</snippet></ROW><ROW><id>2882079</id><snippet>--console</snippet></ROW><ROW><id>2882079</id><snippet>\Python\Lib\site-packages\cx_Freeze\samples\PyQt4\setup.py</snippet></ROW><ROW><id>2882079</id><snippet># A simple setup script to create an executable using PyQt4. This also
# demonstrates the method for creating a Windows executable that does not have
# an associated console.
#
# PyQt4app.py is a very simple type of PyQt4 application
#
# Run the build process by running the command 'python setup.py build'
#
# If everything works well you should find a subdirectory in the build
# subdirectory that contains the files needed to run the application

import sys

from cx_Freeze import setup, Executable

base = None
if sys.platform == "win32":
    base = "Win32GUI"

setup(
        name = "simple_PyQt4",
        version = "0.1",
        description = "Sample cx_Freeze PyQt4 script",
        executables = [Executable("PyQt4app.py", base = base)])
</snippet></ROW><ROW><id>2882216</id><snippet>ExternalEntityRefHandler</snippet></ROW><ROW><id>2882216</id><snippet>xml.sax.expatreader</snippet></ROW><ROW><id>2882216</id><snippet>external_entity_ref</snippet></ROW><ROW><id>2882216</id><snippet>expatreader</snippet></ROW><ROW><id>2882234</id><snippet>if __name__ == "__main__":
  dosomething()
</snippet></ROW><ROW><id>2882234</id><snippet>foobar/__init__.py</snippet></ROW><ROW><id>2882234</id><snippet>foobar/common.py</snippet></ROW><ROW><id>2882234</id><snippet>foobar/common/common.py</snippet></ROW><ROW><id>2882234</id><snippet>foobar/
  __init__.py
  alice.py
  bob.py
  charles.py
  common.py
  david.py
</snippet></ROW><ROW><id>2882234</id><snippet>foobar</snippet></ROW><ROW><id>2882234</id><snippet>alice</snippet></ROW><ROW><id>2882234</id><snippet>alice</snippet></ROW><ROW><id>2882234</id><snippet>__init__.py</snippet></ROW><ROW><id>2882234</id><snippet>from foobar
  import common</snippet></ROW><ROW><id>2882234</id><snippet>import common</snippet></ROW><ROW><id>2882234</id><snippet>common</snippet></ROW><ROW><id>2882475</id><snippet>select.select()</snippet></ROW><ROW><id>2882475</id><snippet>sys.stdin</snippet></ROW><ROW><id>2883114</id><snippet>Content-Type</snippet></ROW><ROW><id>2883114</id><snippet>document.documentElement.namespaceURI</snippet></ROW><ROW><id>2883114</id><snippet>http://www.w3.org/1999/xhtml</snippet></ROW><ROW><id>2883114</id><snippet>http://www.w3.org/1999/02/22-rdf-syntax-ns#</snippet></ROW><ROW><id>2883114</id><snippet>document.documentElement.tagName</snippet></ROW><ROW><id>2883114</id><snippet>rss</snippet></ROW><ROW><id>2883114</id><snippet>&lt;html</snippet></ROW><ROW><id>2883114</id><snippet>&lt;rss</snippet></ROW><ROW><id>2883114</id><snippet>&lt;rdf:RSS</snippet></ROW><ROW><id>2883169</id><snippet>def amethod(self):
    return cmethod(self)
</snippet></ROW><ROW><id>2883169</id><snippet>amethod = cmethod
</snippet></ROW><ROW><id>2883169</id><snippet>class ListSubs(webapp.RequestHandler):

    def _run(self):
        self.response.out.write("This works even better!")

    get = post = _run
</snippet></ROW><ROW><id>2883169</id><snippet>get</snippet></ROW><ROW><id>2883169</id><snippet>_run</snippet></ROW><ROW><id>2883169</id><snippet>post</snippet></ROW><ROW><id>2883169</id><snippet>get</snippet></ROW><ROW><id>2883179</id><snippet>import random
import time
import sys

random.seed(time.time())

print 'starting random numbers'
#sys.stdout.flush()
print 'big block of text' * 2000
#sys.stdout.flush()

count = 3

while count &gt; 0:
    sleeper = random.randint(1, 5)
    r = random.randint(1000, 9000)
    print r, 'sleeping for', sleeper, 'seconds'
    #sys.stdout.flush()
    time.sleep(sleeper)
    count -= 1

print 'random numbers finished, closing'
#sys.stdout.flush()
</snippet></ROW><ROW><id>2883334</id><snippet>(setenv "PYTHONUNBUFFERED" "x")
</snippet></ROW><ROW><id>2883509</id><snippet>import numpy as np
bnb_items = bnb.values()
for num in xrange(len(bnb_items)-1):
    sims = cosSim(bnb_items[num], bnb_items[num+1:]

def cosSim(User, OUsers):
""" Determinnes the cosine-similarity between 1 user and all others.
Returns an array the size of OUsers with the similarity measures

User is a single array of the items purchased by a user.
OUsers is a LIST of arrays purchased by other users.

"""

    multidot = np.vectorize(np.vdot)
    multidenom = np.vectorize(lambda x: np.sum(x)*np.sum(User))

    #apply the dot-product between this user and all others
    num = multidot(OUsers, User)

    #apply the magnitude multiplication across this user and all others
    denom = multidenom(OUsers)

    return num/denom
</snippet></ROW><ROW><id>2883627</id><snippet>alice.py</snippet></ROW><ROW><id>2883627</id><snippet>def do_stuff(data):
    print 'alice does stuff with %s' % data
</snippet></ROW><ROW><id>2883627</id><snippet>bob.py</snippet></ROW><ROW><id>2883627</id><snippet>def do_stuff(data):
    print 'bob does stuff with %s' % data
</snippet></ROW><ROW><id>2883627</id><snippet>main.py</snippet></ROW><ROW><id>2883627</id><snippet>import threading
import alice, bob

def get_work_data():
    return 'data'

def main():
    tasks = [alice.do_stuff, bob.do_stuff]
    data = get_work_data()
    for task in tasks:
        t = threading.Thread(target=task, args=(data,))
        t.start()
</snippet></ROW><ROW><id>2883944</id><snippet>i + +5</snippet></ROW><ROW><id>2883944</id><snippet>i=3
print i + +(+i) #outputs 6
print i + +(+(+(+i))) #outputs 6
print i + -(+i) #outputs 0
print i + -(-(+i)) #outputs 6 
</snippet></ROW><ROW><id>2883944</id><snippet>factor: ('+'|'-'|'~') factor | power
</snippet></ROW><ROW><id>2883944</id><snippet>+</snippet></ROW><ROW><id>2883944</id><snippet>-</snippet></ROW><ROW><id>2883944</id><snippet>~</snippet></ROW><ROW><id>2883944</id><snippet>5</snippet></ROW><ROW><id>2883944</id><snippet>-5</snippet></ROW><ROW><id>2883944</id><snippet>--5</snippet></ROW><ROW><id>2883944</id><snippet>--------5</snippet></ROW><ROW><id>2883954</id><snippet>cluster_to_tag = defaultdict(list)
#May want to assert that length of tags and T is same
for tag,cluster in zip(tags, T):
    cluster_to_tag[cluster].append(tag)

#cluster_to_tag now maps cluster ti list of tags
</snippet></ROW><ROW><id>2884273</id><snippet>import sys, pdb
class TestPdb(pdb.Pdb):
    def __init__(self, *args, **kwargs):
        self.__stdout_old = sys.stdout
        sys.stdout = sys.__stdout__
        pdb.Pdb.__init__(self, *args, **kwargs)

    def cmdloop(self, *args, **kwargs):
        sys.stdout = sys.__stdout__
        retval = pdb.Pdb.cmdloop(self, *args, **kwargs)
        sys.stdout = self.__stdout_old

def pdb_trace():
    debugger = TestPdb()
    debugger.set_trace(sys._getframe().f_back)
</snippet></ROW><ROW><id>2884273</id><snippet>import testlib</snippet></ROW><ROW><id>2884273</id><snippet>testlib.pdb_trace()</snippet></ROW><ROW><id>2884632</id><snippet>app=TkinterApp()

def refreshApp():
    app.update()
    return True

gobject.idle_add(refreshApp)
loop = gobject.MainLoop()
loop.run()
</snippet></ROW><ROW><id>2884717</id><snippet># condition ? trueValue : falseValue
trueValue if condition else falseValue
</snippet></ROW><ROW><id>2884803</id><snippet>Image.objects.all().order_by("-id")[0]
</snippet></ROW><ROW><id>2885122</id><snippet>&gt;&gt;&gt; import win32com.client
&gt;&gt;&gt; h = win32com.client.Dispatch('matlab.application')
&gt;&gt;&gt; h.Execute ("plot([0 18], [7 23])")
&gt;&gt;&gt; h.Execute ("1+1")
u'\nans =\n\n     2\n\n'
</snippet></ROW><ROW><id>2885228</id><snippet>google.appengine.api.images</snippet></ROW><ROW><id>2885439</id><snippet>#include &lt;windows.h&gt;
#include &lt;mmsystem.h&gt;

MMRESULT rc;              // Return code.
HMIXER hMixer;            // Mixer handle used in mixer API calls.
MIXERCONTROL mxc;         // Holds the mixer control data.
MIXERLINE mxl;            // Holds the mixer line data.
MIXERLINECONTROLS mxlc;   // Obtains the mixer control.

// Open the mixer. This opens the mixer with a deviceID of 0. If you
// have a single sound card/mixer, then this will open it. If you have
// multiple sound cards/mixers, the deviceIDs will be 0, 1, 2, and
// so on.
rc = mixerOpen(&amp;hMixer, 0,0,0,0);
if (MMSYSERR_NOERROR != rc) {
    // Couldn't open the mixer.
}

// Initialize MIXERLINE structure.
ZeroMemory(&amp;mxl,sizeof(mxl));
mxl.cbStruct = sizeof(mxl);

// Specify the line you want to get. You are getting the input line
// here. If you want to get the output line, you need to use
// MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT.
mxl.dwComponentType = MIXERLINE_COMPONENTTYPE_DST_WAVEIN;

rc = mixerGetLineInfo((HMIXEROBJ)hMixer, &amp;mxl,
                       MIXER_GETLINEINFOF_COMPONENTTYPE);
if (MMSYSERR_NOERROR == rc) {
    // Couldn't get the mixer line.
}

// Get the control.
ZeroMemory(&amp;mxlc, sizeof(mxlc));
mxlc.cbStruct = sizeof(mxlc);
mxlc.dwLineID = mxl.dwLineID;
mxlc.dwControlType = MIXERCONTROL_CONTROLTYPE_PEAKMETER;
mxlc.cControls = 1;
mxlc.cbmxctrl = sizeof(mxc);
mxlc.pamxctrl = &amp;mxc;
ZeroMemory(&amp;mxc, sizeof(mxc));
mxc.cbStruct = sizeof(mxc);
rc = mixerGetLineControls((HMIXEROBJ)hMixer,&amp;mxlc,
                           MIXER_GETLINECONTROLSF_ONEBYTYPE);
if (MMSYSERR_NOERROR != rc) {
    // Couldn't get the control.
}

// After successfully getting the peakmeter control, the volume range
// will be specified by mxc.Bounds.lMinimum to mxc.Bounds.lMaximum.

MIXERCONTROLDETAILS mxcd;             // Gets the control values.
MIXERCONTROLDETAILS_SIGNED volStruct; // Gets the control values.
long volume;                          // Holds the final volume value.

// Initialize the MIXERCONTROLDETAILS structure
ZeroMemory(&amp;mxcd, sizeof(mxcd));
mxcd.cbStruct = sizeof(mxcd);
mxcd.cbDetails = sizeof(volStruct);
mxcd.dwControlID = mxc.dwControlID;
mxcd.paDetails = &amp;volStruct;
mxcd.cChannels = 1;

// Get the current value of the peakmeter control. Typically, you
// would set a timer in your program to query the volume every 10th
// of a second or so.
rc = mixerGetControlDetails((HMIXEROBJ)hMixer, &amp;mxcd,
                             MIXER_GETCONTROLDETAILSF_VALUE);
if (MMSYSERR_NOERROR == rc) {
    // Couldn't get the current volume.
}
volume = volStruct.lValue;

// Get the absolute value of the volume.
if (volume &lt; 0)
    volume = -volume;
</snippet></ROW><ROW><id>2885461</id><snippet>(username =&gt; siteID)</snippet></ROW><ROW><id>2885461</id><snippet>set</snippet></ROW><ROW><id>2885461</id><snippet>(siteID =&gt; username)</snippet></ROW><ROW><id>2885666</id><snippet>row1[0]</snippet></ROW><ROW><id>2885666</id><snippet>row1</snippet></ROW><ROW><id>2885666</id><snippet>row1</snippet></ROW><ROW><id>2885666</id><snippet>row1</snippet></ROW><ROW><id>2885753</id><snippet>ConfigParser</snippet></ROW><ROW><id>2885753</id><snippet>.properties</snippet></ROW><ROW><id>2885753</id><snippet>ConfigParser</snippet></ROW><ROW><id>2886737</id><snippet>v=</snippet></ROW><ROW><id>2886737</id><snippet>t=</snippet></ROW><ROW><id>2886737</id><snippet>t</snippet></ROW><ROW><id>2886737</id><snippet>http://www.youtube.com/get_video?video_id=*******&amp;t=*******
</snippet></ROW><ROW><id>2886737</id><snippet>t</snippet></ROW><ROW><id>2886784</id><snippet>python yourproject/spiders/domain.py</snippet></ROW><ROW><id>2886956</id><snippet>some_nest_func</snippet></ROW><ROW><id>2886956</id><snippet>some_var</snippet></ROW><ROW><id>2886956</id><snippet>some_var</snippet></ROW><ROW><id>2886956</id><snippet>some_var</snippet></ROW><ROW><id>2886956</id><snippet>some_nest_func</snippet></ROW><ROW><id>2886956</id><snippet>some_var</snippet></ROW><ROW><id>2886962</id><snippet>def CrudControllerFactory(model, field_validation, template_dir):
    class BaseCrudController:
        @expose(template_dir)
        def new(self, *args, **kwargs)
            ....

        @validate(field_validation, error_handler=new)
        @expose()
        def  post(self, *args, **kwargs):
            ....

    return BaseCrudController
</snippet></ROW><ROW><id>2886990</id><snippet>Cookie:</snippet></ROW><ROW><id>2887254</id><snippet>my_b_package.1.2.3.zip</snippet></ROW><ROW><id>2887254</id><snippet>b</snippet></ROW><ROW><id>2887254</id><snippet>__init__.py</snippet></ROW><ROW><id>2887254</id><snippet>c.py</snippet></ROW><ROW><id>2887254</id><snippet>b.zip
|
| -- b &lt;dir&gt;
     | -- __init__.py
     | -- c.py
</snippet></ROW><ROW><id>2887575</id><snippet>form-TOTAL_FORMS</snippet></ROW><ROW><id>2887575</id><snippet>form-INITIAL_FORMS</snippet></ROW><ROW><id>2887575</id><snippet>form-MAX_NUM_FORMS</snippet></ROW><ROW><id>2887704</id><snippet>print d.entries[i].title, # &lt;- comma here
print d.entries[i].date
</snippet></ROW><ROW><id>2887704</id><snippet>to_db = []
for i in range(10):
    to_db.append((d.entries[i].title, d.entries[i].date))

import MySQLdb
conn = MySQLdb.connect(host="localhost",user="me",passwd="pw",db="mydb")
c = conn.cursor()
c.executemany("INSERT INTO mytable (title, date) VALUES (%s, %s)", to_db)
</snippet></ROW><ROW><id>2887735</id><snippet>class Thing():
    def __init__(self, summary=False):
        if summary:
            self.summary = "summary"
            self._whole = None
        else:
            self._whole = "wholething"

    @property
    def whole(self):
        if self._whole: return self._whole
        else:
            self.__init__()
            return self._whole
</snippet></ROW><ROW><id>2887779</id><snippet>text/html; charset=ISO-8859-1
</snippet></ROW><ROW><id>2887779</id><snippet>result.content.decode('ISO-8859-1')
</snippet></ROW><ROW><id>2887779</id><snippet>result.headers["Content-Type"]</snippet></ROW><ROW><id>2887801</id><snippet>re.compile('&lt;h1 class="title metadata_title content_perceived_text(.*?)`&lt;/h1&gt;',
           re.DOTALL | re.IGNORECASE).findall(soup)
</snippet></ROW><ROW><id>2887801</id><snippet>regex = re.compile('^title metadata_title content_perceived_text', re.IGNORECASE)
for tag in soup.findAll('h1', attrs = { 'class' : regex }):
    print tag.contents
</snippet></ROW><ROW><id>2887876</id><snippet>import local_django.conf
import django.conf
django.conf.settings = local_django.conf.settings
</snippet></ROW><ROW><id>2888042</id><snippet>import csv, sqlite3

con = sqlite3.connect(":memory:")
cur = con.cursor()
cur.execute("CREATE TABLE t (col1, col2);")

with open('data.csv','rb') as fin: # `with` statement available in 2.5+
    # csv.DictReader uses first line in file for column headings by default
    dr = csv.DictReader(fin) # comma is default delimiter
    to_db = [(i['col1'], i['col2']) for i in dr]

cur.executemany("INSERT INTO t (col1, col2) VALUES (?, ?);", to_db)
con.commit()
</snippet></ROW><ROW><id>2888060</id><snippet>def fort_knox():
    # A very private variable
    gold = [0]

    class impl(object):
        def add_gold(self, amt):
            gold[0] += amt

        def remove_gold(self, amt):
            raise Exception('No withdrawals!')

        def count_gold(self):
            return gold[0]

    return impl()
</snippet></ROW><ROW><id>2888149</id><snippet>raw_input()</snippet></ROW><ROW><id>2888149</id><snippet>#!/usr/bin/python
# I use /usr/bin/env python; but making SO's syntax highlighter happy.

class generic_form:
    def __init__(self, element_list):
        self.form_elements = element_list
        self.contents= dict()

    def fill_it_in(self):
        for prompt in self.form_elements:
            self.contents[prompt] = raw_input(prompt)

    def get(self, item):
        return self.contents[item]

    def print_it(self):
        for each in self.form_elements:
            print each, self.contents[each]

if __name__ == '__main__':
    sample_fields = ("Given Name: ",
                     "Surname: ",
                     "Date of Birth: ",
                     "Notes: ")

    example = generic_form(sample_fields)

    print "Fill in my form:"
    example.fill_it_in()

    print
    print "Please review your input:"
    example.print_it()

    # store(:%s, %s: %s" % (example.get('Surname: '), \
    #    example.get('Given Name: '), example.get('Notes: '))
</snippet></ROW><ROW><id>2888149</id><snippet>get()</snippet></ROW><ROW><id>2888149</id><snippet>generic_form</snippet></ROW><ROW><id>2888149</id><snippet>get()</snippet></ROW><ROW><id>2888149</id><snippet>raw_input()</snippet></ROW><ROW><id>2888149</id><snippet>readline</snippet></ROW><ROW><id>2888149</id><snippet>raw_input()</snippet></ROW><ROW><id>2888149</id><snippet>print</snippet></ROW><ROW><id>2888149</id><snippet>setter</snippet></ROW><ROW><id>2888149</id><snippet>setter</snippet></ROW><ROW><id>2888149</id><snippet>   #!/usr/bin/env python

    class generic_form:
        def __init__(self, element_list):
            self.hints = list()
            for each in element_list:
                self.hints.append((each, each, self.store))
            self.contents= dict()
        def store(self, key, data):
            '''Called by client instances
            '''
            self.contents[key] = data
            return True

        def get_hints(self):
            return self.hints

        def get(self, item):
            return self.contents[item]


    def form_input(form):
        for each, key, fn in form.get_hints():
            while True:
                if fn(key,raw_input(each)):
                    break
                else:
                    keep_trying = raw_input("Try again:")
                    if keep_trying.lower() in ['n', 'no', 'naw']:
                        break

    if __name__ == '__main__':
        sample_fields = ("Given Name: ",
                         "Surname: ",
                         "Date of Birth: ",
                         "etc: ")

        example = generic_form(sample_fields)

        print "Fill in my form:"
        form_input(example)

        print
        print "Please review your input:"
        for i, x, x in example.get_hints():
            print example.get(i),
</snippet></ROW><ROW><id>2888149</id><snippet>get_hints()</snippet></ROW><ROW><id>2888149</id><snippet>store()</snippet></ROW><ROW><id>2888149</id><snippet>store()</snippet></ROW><ROW><id>2888149</id><snippet>time.strftime()</snippet></ROW><ROW><id>2888149</id><snippet>store()</snippet></ROW><ROW><id>2888149</id><snippet>get_hints()</snippet></ROW><ROW><id>2888149</id><snippet>get_hints()</snippet></ROW><ROW><id>2888185</id><snippet>os.environ['AppData']
</snippet></ROW><ROW><id>2888185</id><snippet>.</snippet></ROW><ROW><id>2888209</id><snippet>django.rooti</snippet></ROW><ROW><id>2888209</id><snippet>django.root</snippet></ROW><ROW><id>2888209</id><snippet>PythonPath "['/var/www/microbloggingsearchengine','/var/www/microbloggingsearchengine/twingle'] + sys.path"
</snippet></ROW><ROW><id>2888228</id><snippet>**word** becomes &lt;b&gt;word&lt;/b&gt;</snippet></ROW><ROW><id>2888296</id><snippet>for i, j in zip(long_str[::2], long_str[1::2]):
  print (i+j)
</snippet></ROW><ROW><id>2888296</id><snippet>import operator
for s in map(operator.add, long_str[::2], long_str[1::2]):
   print (s)
</snippet></ROW><ROW><id>2888296</id><snippet>def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>2888549</id><snippet>/</snippet></ROW><ROW><id>2888549</id><snippet>\\</snippet></ROW><ROW><id>2888641</id><snippet>os.exec...</snippet></ROW><ROW><id>2888641</id><snippet>subprocess</snippet></ROW><ROW><id>2888641</id><snippet>os.execl</snippet></ROW><ROW><id>2888641</id><snippet>subprocess</snippet></ROW><ROW><id>2888641</id><snippet>.py</snippet></ROW><ROW><id>2888641</id><snippet>os.fork</snippet></ROW><ROW><id>2888641</id><snippet>subprocess</snippet></ROW><ROW><id>2888641</id><snippet>os</snippet></ROW><ROW><id>2888648</id><snippet>{% cycle "A" "A" "A" "B" "B" "B" %}
</snippet></ROW><ROW><id>2888762</id><snippet>self.process = QProcess()
self.connect(self.process, SIGNAL("readyReadStdout()"), self.readOutput)
self.connect(self.process, SIGNAL("readyReadStderr()"), self.readErrors)
tarsourcepath="sudo tar xvpf "+ self.path1
self.process.setArguments(QStringList.split(" ",tarsourcepath))
self.process.start()



def readOutput(self):

    self.textBrowser2.append(QString(self.process.readStdout()))
    if self.process.isRunning()==False:
        self.textBrowser2.append("\n Completed Successfully")




def readErrors(self):
    self.textBrowser2.append("error: " + QString(self.process.readLineStderr()))
</snippet></ROW><ROW><id>2888793</id><snippet>def displayNextForm(self):          
    self.close()
    self.extr=FormMakeImage(self,"FormMakeImage",1,Qt.WStyle_DialogBorder)
    self.extr.exec_loop()
def displayPrevForm(self):
    from DialogSelectFile import *
    self.close()
    self.ext=DialogSelectKernelFile(self,"SelectKernel",1,Qt.WStyle_DialogBorder)
    self.ext.exec_loop()
</snippet></ROW><ROW><id>2888936</id><snippet>#!/bin/bash

BUILD_ROOT=/tmp/pyside-build
INSTALL_PREFIX=/tmp/sandbox

function build_module {
    cd $BUILD_ROOT
    echo Cloning project $1 from url $2
    git clone --depth 1 $2 $BUILD_ROOT/$1

    BUILD_DIR=$BUILD_ROOT/$1/build
    mkdir -p $BUILD_DIR
    cd $BUILD_DIR

    echo Configuring $1 build.
    cmake -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX ..

    echo Configured $1. Starting build.
    make LD_LIBRARY_PATH=$INSTALL_PREFIX/lib

    echo Built $1. Installing.
    make install
    echo Successfully built and installed $1
}

rm -rf $BUILD_ROOT
mkdir -p $BUILD_ROOT
build_module apiextractor git://gitorious.org/pyside/apiextractor.git
build_module generatorrunner git://gitorious.org/pyside/generatorrunner.git
build_module shiboken git://gitorious.org/pyside/shiboken.git
build_module pyside-shiboken git://gitorious.org/pyside/pyside-shiboken.git
</snippet></ROW><ROW><id>2888995</id><snippet>def render(nodes, parent = 0):
    if parent not in nodes:
        return
    print('&lt;ul&gt;')
    for n in nodes[parent]:
        print('&lt;li&gt;Node %d&lt;/li&gt;' % n)
        render(nodes, n)
    print('&lt;/ul&gt;')
</snippet></ROW><ROW><id>2888995</id><snippet>&gt;&gt;&gt; nodes = {}
&gt;&gt;&gt; for n in menu:
    if n[1] not in nodes:
        nodes[n[1]] = []
    nodes[n[1]].append(n[0])
&gt;&gt;&gt; render(nodes)
&lt;ul&gt;
&lt;li&gt;Node 1&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Node 2&lt;/li&gt;
&lt;li&gt;Node 3&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Node 4&lt;/li&gt;
&lt;li&gt;Node 5&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Node 6&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;li&gt;Node 7&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
</snippet></ROW><ROW><id>2889758</id><snippet>Child</snippet></ROW><ROW><id>2889758</id><snippet>Parent</snippet></ROW><ROW><id>2889758</id><snippet>class Parent: pass
class Child (Parent): pass

Parent.Child = Child
del Child
</snippet></ROW><ROW><id>2889794</id><snippet>sed -n '/\*\//q; /^\/\*/d; s/^ \* \?//p' &lt;file.h &gt;comment.txt
</snippet></ROW><ROW><id>2889794</id><snippet>/\*\//</snippet></ROW><ROW><id>2889794</id><snippet>*/</snippet></ROW><ROW><id>2889794</id><snippet>q</snippet></ROW><ROW><id>2889794</id><snippet>-n</snippet></ROW><ROW><id>2889794</id><snippet>/^\/\*/</snippet></ROW><ROW><id>2889794</id><snippet>/*</snippet></ROW><ROW><id>2889794</id><snippet>d</snippet></ROW><ROW><id>2889794</id><snippet>s/PATTERN/REPLACEMENT/</snippet></ROW><ROW><id>2889794</id><snippet>^ \* \?</snippet></ROW><ROW><id>2889794</id><snippet>p</snippet></ROW><ROW><id>2889794</id><snippet>-n</snippet></ROW><ROW><id>2890303</id><snippet>Poodle</snippet></ROW><ROW><id>2890303</id><snippet>FurCoat</snippet></ROW><ROW><id>2890303</id><snippet>FurCoat</snippet></ROW><ROW><id>2890303</id><snippet>Poodle</snippet></ROW><ROW><id>2890303</id><snippet>class Poodle; end
module FurCoat; def wear; end; end

my_poodle = Poodle.new
my_poodle.is_a?(Poodle) #=&gt; true
my_poodle.is_a?(FurCoat) #=&gt; false
my_poodle.wear #=&gt; NoMethodError

# now we mix in the FurCoat module
my_poodle.extend(FurCoat)

# my_poodle is now also a FurCoat
my_poodle.is_a?(Poodle) #=&gt; true (still)
my_poodle.is_a?(FurCoat) #=&gt; true
my_poodle.wear #=&gt; the wear method now works
</snippet></ROW><ROW><id>2890303</id><snippet>Class</snippet></ROW><ROW><id>2890303</id><snippet>kind_of?</snippet></ROW><ROW><id>2890303</id><snippet>is_a?</snippet></ROW><ROW><id>2890303</id><snippet>instance_of?</snippet></ROW><ROW><id>2890303</id><snippet>Kernel</snippet></ROW><ROW><id>2890303</id><snippet>class Module
    def obj_implements_interface?(obj)
        false
    end
end

module Kernel
    alias_method :orig_is_a?, :is_a?

    def is_a?(klass)
        orig_is_a?(klass) || klass.obj_implements_interface?(self)
    end
end
</snippet></ROW><ROW><id>2890303</id><snippet>class Dog
    def self.obj_implements_interface?(obj)
        obj.respond_to?(:bark) &amp;&amp; obj.respond_to?(:num_legs) &amp;&amp; obj.num_legs == 4
    end
end

module FurCoat
    def self.obj_implements_interface?(obj)
        obj.respond_to?(:wear)
    end
end
</snippet></ROW><ROW><id>2890303</id><snippet>my_poodle = Poodle.new
my_poodle.is_a?(FurCoat) #=&gt; false

# now define a wear method on my_poodle
def my_poodle.wear; end
my_poodle.is_a?(FurCoat) #=&gt; true
</snippet></ROW><ROW><id>2890437</id><snippet>function Request(function_name, opt_argv)</snippet></ROW><ROW><id>2890437</id><snippet>RPCHandler</snippet></ROW><ROW><id>2890437</id><snippet>function initialize() {

  ... // Init map

  var marker = new GMarker(center, {draggable: true});
  GEvent.addListener(marker, "dragend", function(position) {
    Request('update_marker_position', [ unique_identifier, position.lat(), position.lng() ] );
  });

}
</snippet></ROW><ROW><id>2890437</id><snippet># Create database model for LatLng position
class LatLng(db.Model):
    lat = db.IntegerProperty()
    lng = db.IntegerProperty()

...

class RPCMethods:
    """ Defines the methods that can be RPCed.
    NOTE: Do not allow remote callers access to private/protected "_*" methods.
    """

    def update_marker_position(self, *args):
        # args[0] - unique identifier, say GAE db key
        # args[1] - lat
        # args[2] - lng
        # Note: need to do some checking that lat and lng are valid

        # Retrieve key and update position
        position = LatLng.get(db.Key(args[0])
        if position:
            position.lat = args[1]
            position.lng = args[2]
        else:
            position = LatLng(
                lat= args[1], 
                lng= args[2]
            )
        position.put()

        payload = {
            'lat': args[1],
            'lng': args[2],
        }
        return payload
</snippet></ROW><ROW><id>2890569</id><snippet>rows = list(myreader)
totalrows = len(rows)
for i, row in enumerate(rows):
    print("Row %d/%d" % (i+1, totalrows))
</snippet></ROW><ROW><id>2890571</id><snippet>import itertools, operator
</snippet></ROW><ROW><id>2890571</id><snippet>a</snippet></ROW><ROW><id>2890571</id><snippet>c</snippet></ROW><ROW><id>2890571</id><snippet>m</snippet></ROW><ROW><id>2890571</id><snippet>def prng(x, a, c, m):
    while True:
        x = (a * x + c) % m
        yield x
</snippet></ROW><ROW><id>2890571</id><snippet>def pass_to_key(passphrase):
</snippet></ROW><ROW><id>2890571</id><snippet>    bits = [0,0,0,0]
</snippet></ROW><ROW><id>2890571</id><snippet>i</snippet></ROW><ROW><id>2890571</id><snippet>i % 4</snippet></ROW><ROW><id>2890571</id><snippet>    for i, c in enumerate(passphrase):
        bits[i &amp; 3] ^= ord(c)
</snippet></ROW><ROW><id>2890571</id><snippet>    val = reduce(operator.__or__, (b &lt;&lt; 8*i for (i,b) in enumerate(bits)))
</snippet></ROW><ROW><id>2890571</id><snippet>    keys = []
</snippet></ROW><ROW><id>2890571</id><snippet>    for i, b in enumerate(itertools.islice(prng(val, 0x343fd, 0x269ec3, 1&lt;&lt;32), 20)):
</snippet></ROW><ROW><id>2890571</id><snippet>        keys.append((b &gt;&gt; 16) &amp; 0xff)
</snippet></ROW><ROW><id>2890571</id><snippet>    print ('%02x:%02x:%02x:%02x:%02x\n'*4) % tuple(keys)
</snippet></ROW><ROW><id>2890730</id><snippet>audiolab</snippet></ROW><ROW><id>2890730</id><snippet>import audiolab, scipy
a, fs, enc = audiolab.wavread('file1.wav')
b, fs, enc = audiolab.wavread('file2.wav')
c = scipy.vstack((a,b))
audiolab.wavwrite(c, 'file3.wav', fs, enc)
</snippet></ROW><ROW><id>2890905</id><snippet>ip = re.findall( r'[0-9]+(?:\.[0-9]+){3}', s )
</snippet></ROW><ROW><id>2890905</id><snippet>['165.91.15.131']
</snippet></ROW><ROW><id>2890905</id><snippet>0.00.999.9999</snippet></ROW><ROW><id>2890905</id><snippet>+</snippet></ROW><ROW><id>2890905</id><snippet>{1,3}</snippet></ROW><ROW><id>2891398</id><snippet>import cgi
with open('save.aln') as f:
    for line in f:
        print cgi.escape(line) # escape &lt;, &gt;, &amp;
        print '&lt;br/&gt;'
</snippet></ROW><ROW><id>2891697</id><snippet>.toxml('utf-8')</snippet></ROW><ROW><id>2891697</id><snippet>documentElement</snippet></ROW><ROW><id>2891697</id><snippet>&lt;</snippet></ROW><ROW><id>2891697</id><snippet>var xml= node.toxml('utf-8')

...

if (xml.startswith('&lt;')):
    node= minidom.parseString(xml).documentElement
else:
    node= minidom.parseString('&lt;x&gt;%s&lt;/x&gt;'%xml).documentElement.firstChild
</snippet></ROW><ROW><id>2891697</id><snippet>&lt;!--</snippet></ROW><ROW><id>2891697</id><snippet>nodeType</snippet></ROW><ROW><id>2891697</id><snippet>toxml()</snippet></ROW><ROW><id>2891805</id><snippet>set_printoptions</snippet></ROW><ROW><id>2891805</id><snippet>import numpy as np
x=np.random.random(10)
print(x)
# [ 0.07837821  0.48002108  0.41274116  0.82993414  0.77610352  0.1023732
#   0.51303098  0.4617183   0.33487207  0.71162095]

np.set_printoptions(precision=3)
print(x)
# [ 0.078  0.48   0.413  0.83   0.776  0.102  0.513  0.462  0.335  0.712]
</snippet></ROW><ROW><id>2891805</id><snippet>suppress</snippet></ROW><ROW><id>2891805</id><snippet>y=np.array([1.5e-10,1.5,1500])
print(y)
# [  1.500e-10   1.500e+00   1.500e+03]
np.set_printoptions(suppress=True)
print(y)
# [    0.      1.5  1500. ]
</snippet></ROW><ROW><id>2891805</id><snippet>import numpy as np
import contextlib

@contextlib.contextmanager
def printoptions(*args, **kwargs):
    original = np.get_printoptions()
    np.set_printoptions(*args, **kwargs)
    yield 
    np.set_printoptions(**original)
</snippet></ROW><ROW><id>2891805</id><snippet>with-suite</snippet></ROW><ROW><id>2891805</id><snippet>precision=3</snippet></ROW><ROW><id>2891805</id><snippet>suppress=True</snippet></ROW><ROW><id>2891805</id><snippet>x = np.random.random(10)
with printoptions(precision=3, suppress=True):
    print(x)
    # [ 0.073  0.461  0.689  0.754  0.624  0.901  0.049  0.582  0.557  0.348]
</snippet></ROW><ROW><id>2891805</id><snippet>with-suite</snippet></ROW><ROW><id>2891805</id><snippet>print(x)    
# [ 0.07334334  0.46132615  0.68935231  0.75379645  0.62424021  0.90115836
#   0.04879837  0.58207504  0.55694118  0.34768638]
</snippet></ROW><ROW><id>2891805</id><snippet>set_printoptions</snippet></ROW><ROW><id>2891805</id><snippet>import numpy as np
import numpy.core.arrayprint as arrayprint
import contextlib

@contextlib.contextmanager
def printoptions(strip_zeros=True, **kwargs):
    origcall = arrayprint.FloatFormat.__call__
    def __call__(self, x, strip_zeros=strip_zeros):
        return origcall.__call__(self, x, strip_zeros)
    arrayprint.FloatFormat.__call__ = __call__
    original = np.get_printoptions()
    np.set_printoptions(**kwargs)
    yield 
    np.set_printoptions(**original)
    arrayprint.FloatFormat.__call__ = origcall


x = np.array([0.078, 0.480, 0.413, 0.830, 0.776, 0.102, 0.513, 0.462, 0.335, 0.712])
with printoptions(precision=3, suppress=True, strip_zeros=False):
    print(x)
</snippet></ROW><ROW><id>2891805</id><snippet>[ 0.078  0.480  0.413  0.830  0.776  0.102  0.513  0.462  0.335  0.712]
</snippet></ROW><ROW><id>2891805</id><snippet>[ 0.078  0.48   0.413  0.83   0.776  0.102  0.513  0.462  0.335  0.712]
</snippet></ROW><ROW><id>2892081</id><snippet>def main():
  import cgi
  import cgitb; cgitb.enable()
  f1 = cgi.FieldStorage()
  if "dfile" in f1:
    fileitem = f1["dfile"]
    pathtoTmpFile = os.path.join("path/to/temp/directory", fileitem.filename)
    fout = file(pathtoTmpFile, 'wb')
    while 1:
        chunk = fileitem.file.read(100000)
        if not chunk: break
        fout.write (chunk)
    fout.close()
    execute(pathtoTmpFile)
    os.remove(pathtoTmpFile)
  else:
    header()
    form()
</snippet></ROW><ROW><id>2892081</id><snippet>cline = ClustalwCommandline("clustalw", infile=pathToFile)
</snippet></ROW><ROW><id>2892145</id><snippet>.py</snippet></ROW><ROW><id>2892145</id><snippet>import library.py
</snippet></ROW><ROW><id>2892145</id><snippet>py</snippet></ROW><ROW><id>2892145</id><snippet>library</snippet></ROW><ROW><id>2892145</id><snippet>library</snippet></ROW><ROW><id>2892145</id><snippet>__init__.py</snippet></ROW><ROW><id>2892145</id><snippet>py.py</snippet></ROW><ROW><id>2892145</id><snippet>.pyc</snippet></ROW><ROW><id>2892145</id><snippet>import library</snippet></ROW><ROW><id>2892145</id><snippet>.py</snippet></ROW><ROW><id>2892145</id><snippet>.py</snippet></ROW><ROW><id>2892145</id><snippet>.pyc</snippet></ROW><ROW><id>2892145</id><snippet>.pyo</snippet></ROW><ROW><id>2892145</id><snippet>.pyd</snippet></ROW><ROW><id>2892145</id><snippet>.so</snippet></ROW><ROW><id>2892145</id><snippet>.dylib</snippet></ROW><ROW><id>2892145</id><snippet>foo</snippet></ROW><ROW><id>2892145</id><snippet>foo</snippet></ROW><ROW><id>2892145</id><snippet>a.foo</snippet></ROW><ROW><id>2892145</id><snippet>b.foo</snippet></ROW><ROW><id>2892625</id><snippet>ForeignKey</snippet></ROW><ROW><id>2892625</id><snippet>limit_choices_to</snippet></ROW><ROW><id>2892669</id><snippet>def createSubElement(text, tagText = ""):
    elem = etree.SubElement(root, text)
    elem.text = tagText

createSubElement('firstChild', 'first one')
createSubElement('SecondChild', 'second one')

print etree.tostring(root)
</snippet></ROW><ROW><id>2892669</id><snippet>SubElement</snippet></ROW><ROW><id>2892669</id><snippet>text</snippet></ROW><ROW><id>2893021</id><snippet>created_weekday.short_description = 'Foo'
</snippet></ROW><ROW><id>2893047</id><snippet>dns.__file__</snippet></ROW><ROW><id>2893047</id><snippet>cd</snippet></ROW><ROW><id>2893047</id><snippet>sys.path</snippet></ROW><ROW><id>2893047</id><snippet>resolver</snippet></ROW><ROW><id>2893133</id><snippet>sqrt</snippet></ROW><ROW><id>2893243</id><snippet>actor_sets = data['video'].video_actor_set.all()
data['actors'] = {}

for actor_set in actor_sets:
    if not data['actors'].has_key( actor_set.actor ):
        data['actors'][actor_set.actor] = []
        data['actors'][actor_set.actor].append( actor_set.time )
</snippet></ROW><ROW><id>2893317</id><snippet>item_type</snippet></ROW><ROW><id>2893317</id><snippet>str</snippet></ROW><ROW><id>2893317</id><snippet>unicode</snippet></ROW><ROW><id>2893354</id><snippet>public class Program
{
    class TreeNode
    {
        public int Value;
        public TreeNode Left;
        public TreeNode Right;
    }

    TreeNode constructBalancedTree(List&lt;int&gt; values, int min, int max)
    {
        if (min == max)
            return null;

        int median = min + (max - min) / 2;
        return new TreeNode
        {
            Value = values[median],
            Left = constructBalancedTree(values, min, median),
            Right = constructBalancedTree(values, median + 1, max)
        };
    }

    TreeNode constructBalancedTree(IEnumerable&lt;int&gt; values)
    {
        return constructBalancedTree(
            values.OrderBy(x =&gt; x).ToList(), 0, values.Count());
    }

    void Run()
    {
        TreeNode balancedTree = constructBalancedTree(Enumerable.Range(1, 9));
        // displayTree(balancedTree); // TODO: implement this!
    }

    static void Main(string[] args)
    {
        new Program().Run();
    }
}
</snippet></ROW><ROW><id>2893532</id><snippet>&gt;&gt;&gt; import pynotify
&gt;&gt;&gt; p = pynotify.Notification("Notice", "", "/usr/share/pixmaps/firefox.png")
&gt;&gt;&gt; p.show()
</snippet></ROW><ROW><id>2893542</id><snippet>&gt;&gt;&gt; s = set()
&gt;&gt;&gt; s.add(4)
&gt;&gt;&gt; s.add(5)
&gt;&gt;&gt; s
set([4, 5])
&gt;&gt;&gt; t = set([2, 4, 9])
&gt;&gt;&gt; s.intersection(t)
set([4])
</snippet></ROW><ROW><id>2893542</id><snippet>&gt;&gt;&gt; data = [range(100)[::4], range(100)[::3], range(100)[::2], range(100)[::1]]
&gt;&gt;&gt; sets = map(set, data)
&gt;&gt;&gt; print set.intersection(*sets)
set([0, 96, 36, 72, 12, 48, 84, 24, 60])
</snippet></ROW><ROW><id>2893600</id><snippet>gdisplay</snippet></ROW><ROW><id>2893639</id><snippet>except ImportError:
</snippet></ROW><ROW><id>2893639</id><snippet>except (ImportError, AttributeError):
</snippet></ROW><ROW><id>2893647</id><snippet>GROUP BY</snippet></ROW><ROW><id>2893647</id><snippet>managed = False</snippet></ROW><ROW><id>2893647</id><snippet>OneToOneField</snippet></ROW><ROW><id>2893647</id><snippet>Author</snippet></ROW><ROW><id>2893739</id><snippet>pyc</snippet></ROW><ROW><id>2893739</id><snippet>py</snippet></ROW><ROW><id>2893739</id><snippet>py</snippet></ROW><ROW><id>2893739</id><snippet>pyc</snippet></ROW><ROW><id>2893739</id><snippet>pyc</snippet></ROW><ROW><id>2893739</id><snippet>py</snippet></ROW><ROW><id>2893739</id><snippet>java</snippet></ROW><ROW><id>2893739</id><snippet>javac</snippet></ROW><ROW><id>2893767</id><snippet>sys.stdout.isatty</snippet></ROW><ROW><id>2893767</id><snippet>from sys import stdout

def error(string, is_tty=stdout.isatty()):
    return ('\033[31;1m' + string + '\033[0m') if is_tty else string

def standout(string, is_tty=stdout.isatty()):
    return ('\033[34;1m' + string + '\033[0m') if is_tty else string
</snippet></ROW><ROW><id>2893767</id><snippet>None</snippet></ROW><ROW><id>2893767</id><snippet>logging</snippet></ROW><ROW><id>2893805</id><snippet>--install-dir</snippet></ROW><ROW><id>2893805</id><snippet>$HOME/.local/</snippet></ROW><ROW><id>2893805</id><snippet>$HOME/.local/lib/python2.6/site-packages/</snippet></ROW><ROW><id>2893805</id><snippet>--prefix</snippet></ROW><ROW><id>2894073</id><snippet>def long_substr(data):
    substr = ''
    if len(data) &gt; 1 and len(data[0]) &gt; 0:
        for i in range(len(data[0])):
            for j in range(len(data[0])-i+1):
                if j &gt; len(substr) and is_substr(data[0][i:i+j], data):
                    substr = data[0][i:i+j]
    return substr

def is_substr(find, data):
    if len(data) &lt; 1 and len(find) &lt; 1:
        return False
    for i in range(len(data)):
        if find not in data[i]:
            return False
    return True


print long_substr(['Oh, hello, my friend.',
                   'I prefer Jelly Belly beans.',
                   'When hell freezes over!'])
</snippet></ROW><ROW><id>2894073</id><snippet>def long_substr(data):
    substr = ''
    if len(data) &gt; 1 and len(data[0]) &gt; 0:
        for i in range(len(data[0])):
            for j in range(len(data[0])-i+1):
                if j &gt; len(substr) and all(data[0][i:i+j] in x for x in data):
                    substr = data[0][i:i+j]
    return substr
</snippet></ROW><ROW><id>2894081</id><snippet>msg</snippet></ROW><ROW><id>2894081</id><snippet>\r\n</snippet></ROW><ROW><id>2894216</id><snippet>codecs.open(_file, "rb", "hex")</snippet></ROW><ROW><id>2894216</id><snippet>class HexFile(object):
    def __init__(self, fp, wordsize=4):
        self.fp = fp
        self.ws = wordsize
    def __iter__(self):
        while True:
            data = self.fp.read(self.ws)
            if not data: break
            yield data.encode('hex')
</snippet></ROW><ROW><id>2894270</id><snippet>reload</snippet></ROW><ROW><id>2894270</id><snippet>from module import afunction</snippet></ROW><ROW><id>2894270</id><snippet>reload</snippet></ROW><ROW><id>2894270</id><snippet>reload</snippet></ROW><ROW><id>2894270</id><snippet>reload</snippet></ROW><ROW><id>2894326</id><snippet>for i,x in enumerate(y):
    ....
</snippet></ROW><ROW><id>2894741</id><snippet> # Construct the dictionary
 d = {}

 # Insert items into the dictionary
 d[key1] = value1
 d[key2] = value2
 # ...

 # Checking if an item exists
 if key in d:
      # Do something requiring d[key]
      # such as updating an attribute:
      d[key].attr = val
</snippet></ROW><ROW><id>2894918</id><snippet>r'[a-zA-Z\d-]{,63}(\.[a-zA-Z\d-]{,63})*'
</snippet></ROW><ROW><id>2895230</id><snippet>IN_CLOSE</snippet></ROW><ROW><id>2895230</id><snippet>IN_CLOSE</snippet></ROW><ROW><id>2895230</id><snippet>IN_CLOSE_WRITE</snippet></ROW><ROW><id>2895230</id><snippet>IN_CLOSE_NOWRITE</snippet></ROW><ROW><id>2895230</id><snippet>WRITE/NOWRITE</snippet></ROW><ROW><id>2895677</id><snippet>&gt;&gt;&gt; a = 5
&gt;&gt;&gt; del(a)
&gt;&gt;&gt; a
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'a' is not defined
&gt;&gt;&gt; def mydel(x): del(x)
... 
&gt;&gt;&gt; a = 5
&gt;&gt;&gt; mydel(a)
&gt;&gt;&gt; a
5
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2895677</id><snippet>a</snippet></ROW><ROW><id>2895677</id><snippet>a</snippet></ROW><ROW><id>2895677</id><snippet>x</snippet></ROW><ROW><id>2895677</id><snippet>x</snippet></ROW><ROW><id>2895677</id><snippet>SyntaxError</snippet></ROW><ROW><id>2895677</id><snippet>lambda</snippet></ROW><ROW><id>2895677</id><snippet>del</snippet></ROW><ROW><id>2895677</id><snippet>del_stmt</snippet></ROW><ROW><id>2895677</id><snippet>print</snippet></ROW><ROW><id>2895677</id><snippet>&gt;&gt;&gt; lambda x: print x
  File "&lt;stdin&gt;", line 1
    lambda x: print x
                  ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>2895677</id><snippet>x=del(a)</snippet></ROW><ROW><id>2895701</id><snippet>List&lt;List&lt;T&gt;&gt; splitList(List&lt;T&gt; alist, int wantedParts) {
    ArrayList&lt;List&lt;T&gt;&gt; result = new ArrayList&lt;List&lt;T&gt;&gt;();
    int length = alist.length;

    for (int i = 0; i &lt; wantedParts; i++) {
        result.append(alist.subList(i*length/wantedParts,
                                    (i+1)*length/wantedParts));
    }

    return result;
}
</snippet></ROW><ROW><id>2895701</id><snippet>alist</snippet></ROW><ROW><id>2895701</id><snippet>subList</snippet></ROW><ROW><id>2895770</id><snippet>event_audit=gdata.calendar.AttendeeStatus("http://schemas.google.com/g/2005#event.invited")
event.who.append(gdata.calendar.Who(email="xyz@pqr.com",rel="http://schemas.google.com/g/2005#event.invited"))
</snippet></ROW><ROW><id>2895823</id><snippet>GtkTreePath *path;
GtkTreeIter iter;

/* With NULL as iter, we get the number of toplevel nodes. */
gint rows = gtk_tree_model_iter_n_children(GTK_TREE_MODEL(model), NULL);

/* Now get a path from the index. */
path = gtk_tree_path_new_from_indices(rows - 1, -1);

/* Ask the model for an iter to the node identified by the path. */
gtk_tree_model_get_iter(GTK_TREE_MODEL(model), &amp;iter, path);

/* Drop the path, we're done with it, iter is final output. */
gtk_tree_path_free(path);
</snippet></ROW><ROW><id>2896705</id><snippet>top</snippet></ROW><ROW><id>2896705</id><snippet>self</snippet></ROW><ROW><id>2896705</id><snippet>X-FRAME-OPTIONS</snippet></ROW><ROW><id>2896856</id><snippet>subprocess</snippet></ROW><ROW><id>2897058</id><snippet>i += i++ + ++i</snippet></ROW><ROW><id>2897058</id><snippet>del letters[:]</snippet></ROW><ROW><id>2897058</id><snippet>letters[:] = []</snippet></ROW><ROW><id>2897058</id><snippet>letters = []</snippet></ROW><ROW><id>2897058</id><snippet>[:]</snippet></ROW><ROW><id>2897058</id><snippet>#remove unsafe commands
commands = ["ls", "cd", "rm -rf /"]
for cmd in commands[:]:
  if "rm " in cmd:
    commands.remove(cmd)
</snippet></ROW><ROW><id>2897370</id><snippet>C:\Documents and Settings\Nick&gt;python
ActivePython 2.6.4.10 (ActiveState Software Inc.) based on
Python 2.6.4 (r264:75706, Jan 22 2010, 16:41:54) [MSC v.1500 32 bit (Intel)]...
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; txt = """here
... is all
... my text n stuff."""
&gt;&gt;&gt; f = open('u16.txt','wb')
&gt;&gt;&gt; f.write(txt.encode('utf-16'))
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; exit()

C:\Documents and Settings\Nick&gt;notepad u16.txt
</snippet></ROW><ROW><id>2897370</id><snippet>here is allmy text n stuff.
</snippet></ROW><ROW><id>2897370</id><snippet>C:\Documents and Settings\Nick&gt;
    "C:\Program Files\Windows NT\Accessories\wordpad.exe" u16.txt
</snippet></ROW><ROW><id>2897370</id><snippet>here 
is all
my text n stuff.
</snippet></ROW><ROW><id>2898780</id><snippet>s</snippet></ROW><ROW><id>2898780</id><snippet>d</snippet></ROW><ROW><id>2898780</id><snippet>import hashlib
hashlib.sha512( s + d ).hexdigest()
</snippet></ROW><ROW><id>2899190</id><snippet>import bisect

places = [
    (501, 'ASIA'),
    (1262, 'EUROPE'),
    (3389, 'LATAM'),
    (5409, 'US'),
]
places.sort() # list must be sorted

for to_find in (389, 1300, 5400):
    pos = bisect.bisect_right(places, (to_find,))
    print '%s -&gt; %s' % (to_find, places[pos])
</snippet></ROW><ROW><id>2899190</id><snippet>389 -&gt; (501, 'ASIA')
1300 -&gt; (3389, 'LATAM')
5400 -&gt; (5409, 'US')
</snippet></ROW><ROW><id>2899480</id><snippet>
wand2 = MagickCoalesceImages(wand)
MagickWriteImages(wand2, 'save_path', 1)
</snippet></ROW><ROW><id>2899637</id><snippet>'&lt;?xml version="1.0"?&gt;\n' + etree.tostring(root, pretty_print = True, encoding = 'ASCII')
</snippet></ROW><ROW><id>2899670</id><snippet>def __init__(self, value, c=[]):</snippet></ROW><ROW><id>2899670</id><snippet>[]</snippet></ROW><ROW><id>2899670</id><snippet>None</snippet></ROW><ROW><id>2899670</id><snippet>def __init__(self, value, c=None):
</snippet></ROW><ROW><id>2899670</id><snippet>if c == None:
  c = []
</snippet></ROW><ROW><id>2899923</id><snippet>\100</snippet></ROW><ROW><id>2899923</id><snippet>REPLACE_TERM</snippet></ROW><ROW><id>2900068</id><snippet>os.path.splitext()</snippet></ROW><ROW><id>2900068</id><snippet>os.rename()</snippet></ROW><ROW><id>2900079</id><snippet>QuerySet.query</snippet></ROW><ROW><id>2900079</id><snippet>BaseQuery</snippet></ROW><ROW><id>2900079</id><snippet>Query</snippet></ROW><ROW><id>2900079</id><snippet>__str__</snippet></ROW><ROW><id>2900111</id><snippet>sum(x &gt; 0 for x in frequencies)
</snippet></ROW><ROW><id>2900111</id><snippet>bool</snippet></ROW><ROW><id>2900111</id><snippet>int</snippet></ROW><ROW><id>2900111</id><snippet>&gt;&gt;&gt; isinstance(True,int)
True
</snippet></ROW><ROW><id>2900111</id><snippet>True</snippet></ROW><ROW><id>2900111</id><snippet>&gt;&gt;&gt; True==1
True
</snippet></ROW><ROW><id>2900111</id><snippet>&gt;&gt;&gt; frequencies = [random.randint(0,2) for i in range(10**5)]

&gt;&gt;&gt; %timeit len([x for x in frequencies if x &gt; 0])   # sth
100 loops, best of 3: 3.93 ms per loop

&gt;&gt;&gt; %timeit sum([1 for x in frequencies if x &gt; 0])
100 loops, best of 3: 4.45 ms per loop

&gt;&gt;&gt; %timeit sum(1 for x in frequencies if x &gt; 0)
100 loops, best of 3: 6.17 ms per loop

&gt;&gt;&gt; %timeit sum(x &gt; 0 for x in frequencies)
100 loops, best of 3: 8.57 ms per loop
</snippet></ROW><ROW><id>2900111</id><snippet>&gt;&gt;&gt; frequencies = np.random.randint(3, size=10**5)
&gt;&gt;&gt; %timeit (frequencies &gt; 0).sum()
1000 loops, best of 3: 669 us per loop
</snippet></ROW><ROW><id>2900462</id><snippet>mlab.addpath()</snippet></ROW><ROW><id>2900469</id><snippet>from BeautifulSoup import BeautifulSoup
from BeautifulSoup import Tag

count = 1
links_dict = {}
soup = BeautifulSoup(text)
for link_tag in soup.findAll('a'):
  if link_tag['href'] and len(link_tag['href']) &gt; 0:
    links_dict[count]  = link_tag['href']  
    newTag = Tag(soup, "a", link_tag.attrs)
    newTag.insert(0, ''.join([''.join(link_tag.contents), "[%s]" % str(count)]))
    link_tag.replaceWith(newTag)
    count += 1
</snippet></ROW><ROW><id>2900469</id><snippet>&gt;&gt;&gt; soup
&lt;p&gt;
  &lt;a href="http://www.foo.com"&gt;this if foo[1]&lt;/a&gt;
  &lt;a href="http://www.bar.com"&gt;this if bar[2]&lt;/a&gt;
&lt;/p&gt;

&gt;&gt;&gt; links_dict
{1: u'http://www.foo.com', 2: u'http://www.bar.com'}
</snippet></ROW><ROW><id>2900469</id><snippet>''.join(link_tag.contents)</snippet></ROW><ROW><id>2900537</id><snippet>extern "C"</snippet></ROW><ROW><id>2900646</id><snippet>import SocketServer
import BaseHTTPServer


class RequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):

    def do_GET(self):
        # The URL the client requested
        print self.path

        # analyze self.path, map the local file location...

        # open the file, load the data
        with open('test.py') as f: data = f.read()

        # send the headers
        self.send_response(200)
        self.send_header('Content-type', 'application/octet-stream') # you may change the content type
        self.end_headers()
        # If the file is not found, send error code 404 instead of 200 and display a message accordingly, as you wish.

        # wfile is a file-like object. writing data to it will send it to the client
        self.wfile.write(data)

        # XXX: Obviously, you might want to send the file in segments instead of loading it as a whole


if __name__ == '__main__':

    PORT = 8080 # XXX

    try:
        server = SocketServer.ThreadingTCPServer(('', 8080), RequestHandler)
        server.serve_forever()
    except KeyboardInterrupt:
        server.socket.close()
</snippet></ROW><ROW><id>2900783</id><snippet>virtualenv</snippet></ROW><ROW><id>2900859</id><snippet>tire</snippet></ROW><ROW><id>2900859</id><snippet>tire</snippet></ROW><ROW><id>2900859</id><snippet>Mary</snippet></ROW><ROW><id>2900859</id><snippet>Fred</snippet></ROW><ROW><id>2900859</id><snippet>classinst</snippet></ROW><ROW><id>2900859</id><snippet>Python 2.6.5 (r265:79063, Apr 16 2010, 13:09:56) 
&gt;&gt;&gt; class Fred(object): pass
... 
&gt;&gt;&gt; class Mary(object):
...     def __init__(self):
...         self.classref = Fred
...         self.classinst = Fred()
... 
&gt;&gt;&gt; x = Mary()
&gt;&gt;&gt; dir(x)
[... 'classinst', 'classref']
&gt;&gt;&gt; x.classref
&lt;class '__main__.Fred'&gt;
&gt;&gt;&gt; x.classinst
&lt;__main__.Fred object at 0xb76eed0c&gt;
</snippet></ROW><ROW><id>2901005</id><snippet>LinkRating2</snippet></ROW><ROW><id>2901005</id><snippet>class Link(db.Model):
    pass  # the only data in this model will be stored in its key

# Whenever a link is added, you can try to add it to the datastore.  If it already
# exists, then this is functionally a no-op - it will just overwrite the old copy of
# the same link.  Using link as the key_name ensures there will be no duplicates.
Link(key_name=link).put()

# Get all the unique links by simply retrieving all of its entities and extracting
# the link field.  You'll need to use cursors if you have &gt;1,000 entities.
unique_links = [x.key().name() for Link.all().fetch(1000)]
</snippet></ROW><ROW><id>2901005</id><snippet>fetch()</snippet></ROW><ROW><id>2901005</id><snippet>fetch()</snippet></ROW><ROW><id>2901005</id><snippet>fetch()</snippet></ROW><ROW><id>2901103</id><snippet>from django.utils import translation

def myview(...):
    ...
    lang = translation.get_language()
    ...
</snippet></ROW><ROW><id>2901111</id><snippet>super</snippet></ROW><ROW><id>2901111</id><snippet>class C(B):
    def method(self, arg):
        super(C, self).method(arg)
</snippet></ROW><ROW><id>2901111</id><snippet>class MyException(Exception):
    def __init__(self, message):
        super(MyException, self).__init__(message)
        self.message = message
</snippet></ROW><ROW><id>2901169</id><snippet>\w</snippet></ROW><ROW><id>2901169</id><snippet>\s</snippet></ROW><ROW><id>2901169</id><snippet>&lt;5</snippet></ROW><ROW><id>2901169</id><snippet>&gt;3</snippet></ROW><ROW><id>2901169</id><snippet>*</snippet></ROW><ROW><id>2901169</id><snippet>+</snippet></ROW><ROW><id>2901181</id><snippet>format</snippet></ROW><ROW><id>2901181</id><snippet>%</snippet></ROW><ROW><id>2901181</id><snippet>format</snippet></ROW><ROW><id>2901452</id><snippet>list(gd_extract)</snippet></ROW><ROW><id>2901452</id><snippet>[{'telephoneNumber': '+65(2)34523534545', 'ipsum': '8403', 'sn': 'bay', 'dolor': '2535', 'mail': 'ian.bay@blah.com', 'givenName': 'ian', 'lorem': '3424'}, {'telephoneNumber': '+65(2)34523534545', 'ipsum': '8403', 'sn': 'gibson', 'dolor': '2535', 'mail': 'mike.gibson@blah.com', 'givenName': 'mike', 'lorem': '3424'}, {'telephoneNumber': '+65(2)34523534545', 'ipsum': '', 'sn': 'martin', 'dolor': '', 'mail': 'ross.martin@blah.com', 'givenName': 'ross', 'lorem': ''}, {'telephoneNumber': '+65(2)34523534545', 'ipsum': '', 'sn': 'connor', 'dolor': '', 'mail': 'david.connor@blah.com', 'givenName': 'david', 'lorem': ''}, {'telephoneNumber': '+65(2)34523534545', 'ipsum': '8403', 'sn': 'call', 'dolor': '2535', 'mail': 'chris.call@blah.com', 'givenName': 'chris', 'lorem': '3424'}]
</snippet></ROW><ROW><id>2901452</id><snippet>ipsum</snippet></ROW><ROW><id>2901452</id><snippet>something</snippet></ROW><ROW><id>2901456</id><snippet>SET SAVE=%PYTHONPATH%
SET PYTHONPATH=.
python scripts/doit.py
SET PYTHONPATH=%SAVE%
</snippet></ROW><ROW><id>2901456</id><snippet>import os
import sys
import subprocess

for i, a in enumerate(sys.argv[1:]):
    if '=' not in a: break
    name, _, value = a.partition('=')
    os.environ[name] = value

sys.exit(subprocess.call(sys.argv[i:]))
</snippet></ROW><ROW><id>2901456</id><snippet>python withenv.py PYTHONPATH=. python scripts/doit.py
</snippet></ROW><ROW><id>2901456</id><snippet>sys.argv[i-1]</snippet></ROW><ROW><id>2901456</id><snippet>sys.argv[i-1:]</snippet></ROW><ROW><id>2901703</id><snippet>threading</snippet></ROW><ROW><id>2901740</id><snippet>res = ax.imshow(array(norm_conf), cmap=cm.jet, interpolation='nearest')
for i, cas in enumerate(conf_arr):
    for j, c in enumerate(cas):
        if c&gt;0:
            plt.text(j-.2, i+.2, c, fontsize=14)
cb = fig.colorbar(res)
</snippet></ROW><ROW><id>2901825</id><snippet>data</snippet></ROW><ROW><id>2901825</id><snippet>ajax</snippet></ROW><ROW><id>2901825</id><snippet>GET</snippet></ROW><ROW><id>2901825</id><snippet>POST</snippet></ROW><ROW><id>2901825</id><snippet>GET</snippet></ROW><ROW><id>2901856</id><snippet>if flags[i] is False:</snippet></ROW><ROW><id>2901856</id><snippet>if flags[i]:</snippet></ROW><ROW><id>2901856</id><snippet>range</snippet></ROW><ROW><id>2901856</id><snippet>i*i</snippet></ROW><ROW><id>2901856</id><snippet>i*3</snippet></ROW><ROW><id>2901856</id><snippet>def prime_numbers(limit=1000000):
    '''Prime number generator. Yields the series
    2, 3, 5, 7, 11, 13, 17, 19, 23, 29 ...
    using Sieve of Eratosthenes.
    '''
    yield 2
    sub_limit = int(limit**0.5)
    flags = [True, True] + [False] * (limit - 2)
    # Step through all the odd numbers
    for i in range(3, limit, 2):
        if flags[i]:
            continue
        yield i
        # Exclude further multiples of the current prime number
        if i &lt;= sub_limit:
            for j in range(i*i, limit, i&lt;&lt;1):
                flags[j] = True
</snippet></ROW><ROW><id>2901856</id><snippet>import gmpy2

def prime_numbers(limit=1000000):
    '''Prime number generator. Yields the series
    2, 3, 5, 7, 11, 13, 17, 19, 23, 29 ...
    using Sieve of Eratosthenes.
    '''
    yield 2
    sub_limit = int(limit**0.5)
    # Actual number is 2*bit_position + 1.
    oddnums = gmpy2.xmpz(1)
    current = 0
    while True:
        current += 1
        current = oddnums.bit_scan0(current)
        prime = 2 * current + 1
        if prime &gt; limit:
            break
        yield prime
        # Exclude further multiples of the current prime number
        if prime &lt;= sub_limit:
            for j in range(2*current*(current+1), limit&gt;&gt;1, prime):
                oddnums.bit_set(j)
</snippet></ROW><ROW><id>2901856</id><snippet>import gmpy2

def prime_numbers(limit=1000000):
    '''Prime number generator. Yields the series
    2, 3, 5, 7, 11, 13, 17, 19, 23, 29 ...
    using Sieve of Eratosthenes.
    '''
    yield 2
    sub_limit = int(limit**0.5)
    # Actual number is 2*bit_position + 1.
    oddnums = gmpy2.xmpz(1)
    f_set = oddnums.bit_set
    f_scan0 = oddnums.bit_scan0
    current = 0
    while True:
        current += 1
        current = f_scan0(current)
        prime = 2 * current + 1
        if prime &gt; limit:
            break
        yield prime
        # Exclude further multiples of the current prime number
        if prime &lt;= sub_limit:
            list(map(f_set,range(2*current*(current+1), limit&gt;&gt;1, prime)))
</snippet></ROW><ROW><id>2901856</id><snippet>xmpz.bit_set(iterator)</snippet></ROW><ROW><id>2901856</id><snippet>xrange</snippet></ROW><ROW><id>2901856</id><snippet>range</snippet></ROW><ROW><id>2901856</id><snippet>import gmpy2

try:
    range = xrange
except NameError:
    pass

def prime_numbers(limit=1000000):
    '''Prime number generator. Yields the series
    2, 3, 5, 7, 11, 13, 17, 19, 23, 29 ...
    using Sieve of Eratosthenes.
    '''
    yield 2
    sub_limit = int(limit**0.5)
    oddnums = gmpy2.xmpz(1)
    f_scan0 = oddnums.bit_scan0
    current = 0
    while True:
        current += 1
        current = f_scan0(current)
        prime = 2 * current + 1
        if prime &gt; limit:
            break
        yield prime
        if prime &lt;= sub_limit:
            oddnums.bit_set(iter(range(2*current*(current+1), limit&gt;&gt;1, prime)))
</snippet></ROW><ROW><id>2901856</id><snippet>xmpz.bit_set(slice)</snippet></ROW><ROW><id>2901856</id><snippet>from __future__ import print_function
import time
import gmpy2

def prime_numbers(limit=1000000):
    '''Prime number generator. Yields the series
    2, 3, 5, 7, 11, 13, 17, 19, 23, 29 ...
    using Sieve of Eratosthenes.
    '''
    yield 2
    sub_limit = int(limit**0.5)
    flags = gmpy2.xmpz(1)
    # pre-allocate the total length
    flags.bit_set((limit&gt;&gt;1)+1)
    f_scan0 = flags.bit_scan0
    current = 0
    while True:
        current += 1
        current = f_scan0(current)
        prime = 2 * current + 1
        if prime &gt; limit:
            break
        yield prime
        if prime &lt;= sub_limit:
            flags.bit_set(slice(2*current*(current+1), limit&gt;&gt;1, prime))

start = time.time()
result = list(prime_numbers(1000000000))
print(time.time() - start)
</snippet></ROW><ROW><id>2901856</id><snippet>from __future__ import print_function
import time
import gmpy2

def prime_numbers(limit=1000000):
    '''Prime number generator. Yields the series
    2, 3, 5, 7, 11, 13, 17, 19, 23, 29 ...
    using Sieve of Eratosthenes.
    '''
    sub_limit = int(limit**0.5)
    flags = gmpy2.xmpz(1)
    flags[(limit&gt;&gt;1)+1] = True
    f_scan0 = flags.bit_scan0
    current = 0
    prime = 2
    while prime &lt;= sub_limit:
        yield prime
        current += 1
        current = f_scan0(current)
        prime = 2 * current + 1
        flags[2*current*(current+1):limit&gt;&gt;1:prime] = True
    while prime &lt;= limit:
        yield prime
        current += 1
        current = f_scan0(current)
        prime = 2 * current + 1

start = time.time()
result = list(prime_numbers(1000000000))
print(time.time() - start)
</snippet></ROW><ROW><id>2901856</id><snippet>from __future__ import print_function
import time
import gmpy2

def prime_numbers(limit=1000000):
    '''Prime number generator. Yields the series
    2, 3, 5, 7, 11, 13, 17, 19, 23, 29 ...
    using Sieve of Eratosthenes.
    '''
    sub_limit = int(limit**0.5)
    flags = gmpy2.xmpz(1)
    flags[(limit&gt;&gt;1)+1] = 1
    f_scan0 = flags.bit_scan0
    current = 0
    prime = 2
    while prime &lt;= sub_limit:
        yield prime
        current += 1
        current = f_scan0(current)
        prime = 2 * current + 1
        flags[2*current*(current+1):limit&gt;&gt;1:prime] = -1
    while prime &lt;= limit:
        yield prime
        current += 1
        current = f_scan0(current)
        prime = 2 * current + 1

start = time.time()
result = list(prime_numbers(1000000000))
print(time.time() - start)
</snippet></ROW><ROW><id>2901856</id><snippet>from __future__ import print_function
import time
import gmpy2

def sieve(limit=1000000):
    '''Returns a generator that yields the prime numbers up to limit.'''

    # Increment by 1 to account for the fact that slices do not include
    # the last index value but we do want to include the last value for
    # calculating a list of primes.
    sieve_limit = gmpy2.isqrt(limit) + 1
    limit += 1

    # Mark bit positions 0 and 1 as not prime.
    bitmap = gmpy2.xmpz(3)

    # Process 2 separately. This allows us to use p+p for the step size
    # when sieving the remaining primes.
    bitmap[4 : limit : 2] = -1

    # Sieve the remaining primes.
    for p in bitmap.iter_clear(3, sieve_limit):
        bitmap[p*p : limit : p+p] = -1

    return bitmap.iter_clear(2, limit)

if __name__ == "__main__":
    start = time.time()
    result = list(sieve(1000000000))
    print(time.time() - start)
    print(len(result))
</snippet></ROW><ROW><id>2902836</id><snippet>syncdb</snippet></ROW><ROW><id>2902836</id><snippet>ALTER TABLE</snippet></ROW><ROW><id>2902836</id><snippet>ALTER TABLE</snippet></ROW><ROW><id>2902836</id><snippet>DROP TABLE</snippet></ROW><ROW><id>2902836</id><snippet>DateField.auto_now</snippet></ROW><ROW><id>2902836</id><snippet>NOW()</snippet></ROW><ROW><id>2902836</id><snippet>modified_date</snippet></ROW><ROW><id>2902836</id><snippet>object.save()</snippet></ROW><ROW><id>2903095</id><snippet>count()</snippet></ROW><ROW><id>2903095</id><snippet>count()</snippet></ROW><ROW><id>2903095</id><snippet>SELECT COUNT(*)</snippet></ROW><ROW><id>2903095</id><snippet>QuerySet</snippet></ROW><ROW><id>2903095</id><snippet>QuerySet</snippet></ROW><ROW><id>2903275</id><snippet>property</snippet></ROW><ROW><id>2903275</id><snippet>object</snippet></ROW><ROW><id>2903275</id><snippet>class A(object):

    def __init__(self):
        self.__var = 5

    def get_var(self):
        return self.__var

    def set_var(self, value):
        self.__var = value

    var = property(get_var, set_var)
</snippet></ROW><ROW><id>2903275</id><snippet>a.var = 10</snippet></ROW><ROW><id>2903275</id><snippet>10</snippet></ROW><ROW><id>2903275</id><snippet>a.var</snippet></ROW><ROW><id>2903348</id><snippet>re.findall(r'Hello, (?P&lt;login&gt;[^.]+)\..+?hash: (?P&lt;hash&gt;[^.]+)', test_str, re.S)
</snippet></ROW><ROW><id>2903363</id><snippet>Employees</snippet></ROW><ROW><id>2903363</id><snippet>Employee</snippet></ROW><ROW><id>2903363</id><snippet>Employees</snippet></ROW><ROW><id>2903363</id><snippet>EmployeeCSVLoader</snippet></ROW><ROW><id>2903363</id><snippet>Employees</snippet></ROW><ROW><id>2903484</id><snippet>request.session</snippet></ROW><ROW><id>2903484</id><snippet>partner</snippet></ROW><ROW><id>2903484</id><snippet>uid</snippet></ROW><ROW><id>2903484</id><snippet>SESSION_SAVE_EVERY_REQUEST</snippet></ROW><ROW><id>2903484</id><snippet>SESSION_SAVE_EVERY_REQUEST</snippet></ROW><ROW><id>2903638</id><snippet>def testcaseOutput():
    while True:
       print '1. Add. 2. Subtract. 3. Divide. 4. Multiply'

       try:
           answer = int(raw_input('Enter a value (1 - 4) &gt;. ')) 
       except ValueError:
           print 'Invalid input. Enter a value between 1 -4 .'
           continue

      if not answer in range(1, 5):
          print 'Invalid input. Enter a value between 1 - 4.'
          continue

      return answer
</snippet></ROW><ROW><id>2903728</id><snippet>pybabel extract</snippet></ROW><ROW><id>2903728</id><snippet>_</snippet></ROW><ROW><id>2903728</id><snippet>gettext</snippet></ROW><ROW><id>2903728</id><snippet>ngettext</snippet></ROW><ROW><id>2903728</id><snippet>ugettext</snippet></ROW><ROW><id>2903728</id><snippet>ungettext</snippet></ROW><ROW><id>2903728</id><snippet>dgettext</snippet></ROW><ROW><id>2903728</id><snippet>dngettext</snippet></ROW><ROW><id>2903728</id><snippet>N_</snippet></ROW><ROW><id>2903728</id><snippet>-k</snippet></ROW><ROW><id>2903728</id><snippet>N_</snippet></ROW><ROW><id>2903728</id><snippet>-k</snippet></ROW><ROW><id>2903728</id><snippet>n_ = ngettext</snippet></ROW><ROW><id>2903728</id><snippet>pybabel extract -k n_:1,2 ...</snippet></ROW><ROW><id>2903734</id><snippet>Model</snippet></ROW><ROW><id>2903734</id><snippet>setattr(self, field.attname, val)
</snippet></ROW><ROW><id>2903734</id><snippet>ModelBase</snippet></ROW><ROW><id>2903734</id><snippet>Model</snippet></ROW><ROW><id>2904021</id><snippet>from SimpleXMLRPCServer import SimpleXMLRPCServer
from SimpleXMLRPCServer import SimpleXMLRPCRequestHandler

# Restrict to a particular path.
class RequestHandler(SimpleXMLRPCRequestHandler):
    rpc_paths = ('/RPC2',)

# Create server
server = SimpleXMLRPCServer(("localhost", 8000),
                            requestHandler=RequestHandler)
server.register_introspection_functions()

# Register pow() function; this will use the value of
# pow.__name__ as the name, which is just 'pow'.
server.register_function(pow)

# Register a function under a different name
def adder_function(x,y):
    return x + y
server.register_function(adder_function, 'add')

# Register an instance; all the methods of the instance are
# published as XML-RPC methods (in this case, just 'div').
class MyFuncs:
    def div(self, x, y):
        return x // y

server.register_instance(MyFuncs())

# Run the server's main loop
server.serve_forever()
</snippet></ROW><ROW><id>2904021</id><snippet>import xmlrpclib

s = xmlrpclib.ServerProxy('http://localhost:8000')
print s.pow(2,3)  # Returns 2**3 = 8
print s.add(2,3)  # Returns 5
print s.div(5,2)  # Returns 5//2 = 2

# Print list of available methods
print s.system.listMethods()
</snippet></ROW><ROW><id>2904263</id><snippet>exec</snippet></ROW><ROW><id>2904263</id><snippet>argv[0], and what comes up in the</snippet></ROW><ROW><id>2904263</id><snippet>execl ("/usr/bin/sleep", "notsleep", "60", NULL);
</snippet></ROW><ROW><id>2904263</id><snippet>/usr/bin/sleep</snippet></ROW><ROW><id>2904263</id><snippet>notsleep</snippet></ROW><ROW><id>2904263</id><snippet>argv[0]</snippet></ROW><ROW><id>2904263</id><snippet>notsleep</snippet></ROW><ROW><id>2904263</id><snippet>argv[1]</snippet></ROW><ROW><id>2904872</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.gmtime(1267488000000 / 1000)
time.struct_time(tm_year=2010, tm_mon=3, tm_mday=2, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=1, tm_yday=61, tm_isdst=0)
</snippet></ROW><ROW><id>2904872</id><snippet>datetime</snippet></ROW><ROW><id>2904872</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.fromtimestamp(1267488000000 / 1000)
datetime.datetime(2010, 3, 1, 19, 0)
</snippet></ROW><ROW><id>2904872</id><snippet>datetime</snippet></ROW><ROW><id>2904872</id><snippet>time.struct_time</snippet></ROW><ROW><id>2904921</id><snippet>inputFile = codecs.open(dataFileName, "r", "windows-1252")
</snippet></ROW><ROW><id>2905437</id><snippet>for link_tag in soup.findAll('a'):
    link_tag.string = link_tag.string + '_PARSED'
html_out = soup.renderContents()
</snippet></ROW><ROW><id>2905437</id><snippet>&gt;&gt;&gt; print html_out
&lt;p&gt;
&lt;a href="http://www.foo.com" rel="nofollow"&gt;this is foo_PARSED&lt;/a&gt;
&lt;a href="http://www.bar.com" rel="nofollow"&gt;this is bar_PARSED&lt;/a&gt;
&lt;/p&gt;
</snippet></ROW><ROW><id>2905495</id><snippet>link_args = ['-framework Carbon'] if platform == 'Darwin' else []
</snippet></ROW><ROW><id>2905495</id><snippet>link_args = ['-framework', 'Carbon'] if platform == 'Darwin' else []
</snippet></ROW><ROW><id>2905671</id><snippet>import unittest
import xmlrunner

class TheTest(unittest.TestCase):

    def testOne(self):
        self.assertEquals(1, 1)
    def testTwo(self):
        self.assertEquals(2, 2)
    def testThree(self):
        self.assertEquals(3, 4)

if __name__ == '__main__':
    suite = unittest.TestLoader().loadTestsFromTestCase(TheTest)
    xmlrunner.XMLTestRunner().run(suite)
</snippet></ROW><ROW><id>2905671</id><snippet>python test.py</snippet></ROW><ROW><id>2905671</id><snippet>'TEST-*.xml' doesn't match anything</snippet></ROW><ROW><id>2905763</id><snippet>send_mail(subject, message, settings.DEFAULT_FROM_EMAIL, [self.user.email])
</snippet></ROW><ROW><id>2905763</id><snippet>EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 465
EMAIL_USE_TLS = True

EMAIL_HOST_USER = 'my@gmail.com'
EMAIL_HOST_PASSWORD = 'my_emails_password'
</snippet></ROW><ROW><id>2905954</id><snippet>unicode()</snippet></ROW><ROW><id>2905954</id><snippet>u'''&lt;tr&gt;&lt;td&gt;'''</snippet></ROW><ROW><id>2905954</id><snippet>u'&lt;tr&gt;&lt;td&gt;'</snippet></ROW><ROW><id>2905954</id><snippet>html</snippet></ROW><ROW><id>2905954</id><snippet>&gt;&gt;&gt; '\x9f&lt;tr&gt;&lt;td&gt;' + unicode('\xc3\x60', 'big5')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0x9f in position 0: ordinal not in range(128)
&gt;&gt;&gt; u'\x9f&lt;tr&gt;&lt;td&gt;' + unicode('\xc3\x60', 'big5')
u'\x9f&lt;tr&gt;&lt;td&gt;\u56a5'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2906014</id><snippet>Thread</snippet></ROW><ROW><id>2906014</id><snippet>from threading import Thread
from time import sleep

def threaded_function(arg):
    for i in range(arg):
        print "running"
        sleep(1)


if __name__ == "__main__":
    thread = Thread(target = threaded_function, args = (10, ))
    thread.start()
    thread.join()
    print "thread finished...exiting"
</snippet></ROW><ROW><id>2906165</id><snippet>re.sub</snippet></ROW><ROW><id>2906165</id><snippet>&lt;h2&gt;</snippet></ROW><ROW><id>2906165</id><snippet>regex = '(?P&lt;name&gt;&lt;h2&gt;(.*?)&lt;/h2&gt;)' # Note the extra group inside the &lt;h2&gt;

def slugify(s):
    return s.replace(' ', '-') # bare-bones slugify

def anchorize(matchobj):
    return '&lt;a name="%s"/&gt;%s' % (slugify(matchob.group(2)), matchobj.group(1))

text = re.sub(regex, anchorize, text)
</snippet></ROW><ROW><id>2906165</id><snippet>slugify</snippet></ROW><ROW><id>2906165</id><snippet>anchorize</snippet></ROW><ROW><id>2906165</id><snippet>__call__</snippet></ROW><ROW><id>2906198</id><snippet>&gt;&gt;&gt; exec(compile("import sys\nprint sys._getframe().f_code.co_name", "blah", "exec"), {}, {})
&lt;module&gt;
&gt;&gt;&gt; exec("a = 1\nclass A(object):\n\tprint a\n", {}, {})
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 2, in &lt;module&gt;
  File "&lt;string&gt;", line 3, in A
NameError: name 'a' is not defined
&gt;&gt;&gt; d = {}
&gt;&gt;&gt; exec("a = 1\nclass A(object):\n\tprint a\n", d,d)
1
</snippet></ROW><ROW><id>2906198</id><snippet>&gt;&gt;&gt; def f():
...     global a
...     a = 1
...
&gt;&gt;&gt; f()
&gt;&gt;&gt; 'a' in locals()
True
</snippet></ROW><ROW><id>2906209</id><snippet>&gt;&gt;&gt; b.test is a.test
False
&gt;&gt;&gt; a.test is a.test
False
</snippet></ROW><ROW><id>2906209</id><snippet>__get__</snippet></ROW><ROW><id>2906209</id><snippet>&gt;&gt;&gt; id(a.test) == id(b.test)
True
&gt;&gt;&gt; a.test is b.test
False
</snippet></ROW><ROW><id>2906209</id><snippet>True</snippet></ROW><ROW><id>2906209</id><snippet>a.test</snippet></ROW><ROW><id>2906209</id><snippet>id(a.test)</snippet></ROW><ROW><id>2906209</id><snippet>b.test</snippet></ROW><ROW><id>2906209</id><snippet>is</snippet></ROW><ROW><id>2906209</id><snippet>id</snippet></ROW><ROW><id>2906209</id><snippet>id(foo) == id(bar)</snippet></ROW><ROW><id>2906209</id><snippet>&gt;&gt;&gt; new_improved_test_method = lambda: None
&gt;&gt;&gt; a.test = new_improved_test_method
&gt;&gt;&gt; a.test is a.test
True
</snippet></ROW><ROW><id>2906371</id><snippet>python.el</snippet></ROW><ROW><id>2906371</id><snippet>python-send-buffer</snippet></ROW><ROW><id>2906371</id><snippet>sys.argv</snippet></ROW><ROW><id>2906371</id><snippet>(defun python-send-buffer-with-my-args (args)
  (interactive "sPython arguments: ")
  (let ((source-buffer (current-buffer)))
    (with-temp-buffer
      (insert "import sys; sys.argv = '''" args "'''.split()\n")
      (insert-buffer-substring source-buffer)
      (python-send-buffer))))
</snippet></ROW><ROW><id>2906371</id><snippet>*scratch*</snippet></ROW><ROW><id>2906371</id><snippet>.emacs</snippet></ROW><ROW><id>2906371</id><snippet>C-c C-a</snippet></ROW><ROW><id>2906371</id><snippet>python-mode</snippet></ROW><ROW><id>2906371</id><snippet>(global-set-key "\C-c\C-a" 'python-send-buffer-with-my-args)
</snippet></ROW><ROW><id>2906371</id><snippet>sys.argv</snippet></ROW><ROW><id>2906371</id><snippet>python-send-buffer</snippet></ROW><ROW><id>2906474</id><snippet>xmltemplate.writexml(file("PATH_TO_OUTPUT_FILE.xml","w"))
</snippet></ROW><ROW><id>2906698</id><snippet>__init__.py</snippet></ROW><ROW><id>2906698</id><snippet>forum/tests/__init__.py
</snippet></ROW><ROW><id>2906698</id><snippet>from test_views import SomeTestCase
from test_models import SomeOtherTestCase
</snippet></ROW><ROW><id>2906752</id><snippet>try:
   import SDL_image
   print "Loaded SDL_image"
except:
   print "Failed to import SDL_image"

try:
   import libpng
   print "Loaded libpng"
except:
   print "Failed to import libpng"
</snippet></ROW><ROW><id>2907082</id><snippet>'\r'</snippet></ROW><ROW><id>2907082</id><snippet>print foo,</snippet></ROW><ROW><id>2907082</id><snippet>print</snippet></ROW><ROW><id>2907082</id><snippet>while doingStuff:
    msg = "\rMerged %s out of %s" % (idx, totalCount)
    print msg,
</snippet></ROW><ROW><id>2907082</id><snippet>curses</snippet></ROW><ROW><id>2907455</id><snippet>f = open(path, 'rb')
</snippet></ROW><ROW><id>2907514</id><snippet>fail()</snippet></ROW><ROW><id>2907514</id><snippet>fin</snippet></ROW><ROW><id>2907514</id><snippet>fin.get(c)</snippet></ROW><ROW><id>2907514</id><snippet>c</snippet></ROW><ROW><id>2907514</id><snippet>size</snippet></ROW><ROW><id>2907514</id><snippet>fin.open(filename.c_str(), ios::in | ios::binary);
</snippet></ROW><ROW><id>2907514</id><snippet>send()</snippet></ROW><ROW><id>2907514</id><snippet>recv()</snippet></ROW><ROW><id>2907514</id><snippet>// Just use one call to send instead of looping over bytes and sending one
// byte at a time.  Simpler and faster!
send(sock, buffer, strlen(buffer), 0);
</snippet></ROW><ROW><id>2907655</id><snippet>#!/usr/bin/env python

import sys

def main(args):
    print args

if __name__ == '__main__':
    main(sys.argv)
</snippet></ROW><ROW><id>2907655</id><snippet>void</snippet></ROW><ROW><id>2907679</id><snippet>site</snippet></ROW><ROW><id>2908165</id><snippet>correlation</snippet></ROW><ROW><id>2908165</id><snippet>Y=pdist(X, 'correlation')
</snippet></ROW><ROW><id>2908165</id><snippet>Z=linkage(X, 'single', 'correlation')
dendrogram(Z, color_threshold=0)
</snippet></ROW><ROW><id>2908222</id><snippet>// Add a button to remove this stock from the table.
Button removeStockButton = new Button("x");
removeStockButton.addClickHandler(new ClickHandler() {
       public void onClick(ClickEvent event) {
           int removedIndex = stocks.indexOf(symbol);
           stocks.remove(removedIndex);
           stocksFlexTable.removeRow(removedIndex + 1);
       }
});
stocksFlexTable.setWidget(row, 3, removeStockButton);
</snippet></ROW><ROW><id>2908222</id><snippet>def greet(sender):
    Window.alert("Hello, AJAX!")
</snippet></ROW><ROW><id>2908222</id><snippet>square: (x) -&gt; x * x
cube:   (x) -&gt; square(x) * x
</snippet></ROW><ROW><id>2908222</id><snippet>// Example One
function triangle(a,b):
    function sqroot(x): return Math.pow(x,.5)
    return sqroot( a*a + b*b )
</snippet></ROW><ROW><id>2908323</id><snippet>RequestContext</snippet></ROW><ROW><id>2908323</id><snippet>return render_to_response('form_template.html',
        context_instance = RequestContext(request))
</snippet></ROW><ROW><id>2908496</id><snippet>repeat forever:
    read all pending events
    if current time &gt; last frame + frame time:
        last frame = last frame + frame time
        update game
    redraw screen
</snippet></ROW><ROW><id>2908496</id><snippet>repeat forever:
    read the next pending event
    if current time &gt; last frame + frame time:
        last frame = last frame + frame time
        update game
    redraw screen
</snippet></ROW><ROW><id>2908541</id><snippet>from GTG import _</snippet></ROW><ROW><id>2908541</id><snippet>_</snippet></ROW><ROW><id>2908541</id><snippet>GTG</snippet></ROW><ROW><id>2908541</id><snippet>_</snippet></ROW><ROW><id>2908541</id><snippet>gettext.gettext()</snippet></ROW><ROW><id>2908541</id><snippet>import gettext
gettext.bindtextdomain('myapplication', '/path/to/my/language/directory')
gettext.textdomain('myapplication')
_ = gettext.gettext
# ...
print _('This is a translatable string.')
</snippet></ROW><ROW><id>2908622</id><snippet>sqlite&gt; create table atoms (id INT, atom TEXT, amino TEXT);
sqlite&gt; insert into atoms VALUES (1, 'O', 'HOH');
sqlite&gt; insert into atoms VALUES (2, 'A', 'ARG');
sqlite&gt; insert into atoms VALUES (3, 'B', 'CYS');
sqlite&gt; insert into atoms VALUES (4, 'C', 'SER');
sqlite&gt; insert into atoms VALUES (5, 'D', 'ARG');
sqlite&gt; insert into atoms VALUES (6, 'O1', 'HOH');
sqlite&gt; insert into atoms VALUES (7, 'A1', 'ARG');
sqlite&gt; insert into atoms VALUES (8, 'B1', 'CYS');
sqlite&gt; insert into atoms VALUES (9, 'C1', 'SER');
sqlite&gt; insert into atoms VALUES (10, 'D1', 'ARG');
sqlite&gt; select * from atoms;
1|O|HOH
2|A|ARG
3|B|CYS
4|C|SER
5|D|ARG
6|O1|HOH
7|A1|ARG
8|B1|CYS
9|C1|SER
10|D1|ARG
</snippet></ROW><ROW><id>2908622</id><snippet>sqlite&gt; .headers ON
sqlite&gt; .mode columns
sqlite&gt; select * from atoms;
id          atom        amino
----------  ----------  ----------
1           O           HOH
2           A           ARG
3           B           CYS
4           C           SER
5           D           ARG
6           O1          HOH
7           A1          ARG
8           B1          CYS
9           C1          SER
10          D1          ARG
sqlite&gt; select * from contacts;
donor_id    acceptor_id  directness
----------  -----------  ----------
1           4            D
1           5            D
2           1            D
3           1            D
6           9            D
6           10           D
7           6            D
8           6            D
</snippet></ROW><ROW><id>2908622</id><snippet>select
    c1.donor_id, c2.acceptor_id, 'W' as directness
from
    contacts c1, contacts c2, atoms a
where
    c1.acceptor_id = c2.donor_id
    and c1.acceptor_id=a.id
    and a.amino='HOH'
UNION ALL
select
    c1.donor_id, c2.donor_id, 'X' as directness
from
    contacts c1, contacts c2, atoms a
where
    c1.acceptor_id = c2.acceptor_id
    and c1.acceptor_id=a.id
    and a.amino='HOH'
    and c1.donor_id &lt; c2.donor_id
UNION ALL
select
    c1.acceptor_id, c2.acceptor_id, 'X' as directness
from
    contacts c1, contacts c2, atoms a
where
    c1.donor_id = c2.donor_id
    and c1.donor_id=a.id
    and a.amino='HOH'
    and c1.acceptor_id &lt; c2.acceptor_id;
</snippet></ROW><ROW><id>2908622</id><snippet>donor_id    acceptor_id  directness
----------  -----------  ----------
2           4            W
2           5            W
3           4            W
3           5            W
7           9            W
7           10           W
8           9            W
8           10           W
2           3            X
7           8            X
4           5            X
9           10           X
</snippet></ROW><ROW><id>2909119</id><snippet>__hash__()</snippet></ROW><ROW><id>2909119</id><snippet>class A(object):
    def __key(self):
        return (self.attr_a, self.attr_b, self.attr_c)

    def __eq__(x, y):
        return x.__key() == y.__key()

    def __hash__(self):
        return hash(self.__key())
</snippet></ROW><ROW><id>2909124</id><snippet>[u'204']</snippet></ROW><ROW><id>2909124</id><snippet>my_answer = item1['Title'][0].strip()
</snippet></ROW><ROW><id>2909124</id><snippet>for ans_i in item1['Title']:
    do_something_with( ans_i.strip() )
</snippet></ROW><ROW><id>2909135</id><snippet>replaceWith</snippet></ROW><ROW><id>2909135</id><snippet>from BeautifulSoup import BeautifulSoup
soup = BeautifulSoup(html)
for link_tag in soup.findAll('a'):
    link_tag.replaceWith( link_tag.prettify() + '&lt;b&gt;OK&lt;/b&gt;' )
print soup
</snippet></ROW><ROW><id>2909135</id><snippet>&lt;p&gt;
 &lt;a href="http://www.foo.com"&gt;
this if foo
&lt;/a&gt;
&lt;b&gt;OK&lt;/b&gt;
 &lt;a href="http://www.bar.com"&gt;
this if bar
&lt;/a&gt;
&lt;b&gt;OK&lt;/b&gt;
&lt;/p&gt;
</snippet></ROW><ROW><id>2909412</id><snippet>import codecs

# ...
# title is a unicode string
# ...

f = codecs.open("go.txt", "w", "utf-8")
f.write(title)

# ...

fileObj = codecs.open("go.txt", "r", "utf-8")
u = fileObj.read() # Returns a Unicode string from the UTF-8 bytes in the file
</snippet></ROW><ROW><id>2909421</id><snippet>print sum(float(x.replace(',', '.')) for x in str.split(' '))
</snippet></ROW><ROW><id>2909421</id><snippet>45.64
</snippet></ROW><ROW><id>2909661</id><snippet>IEnumerable&lt;Tuple&lt;int, int&gt;&gt;</snippet></ROW><ROW><id>2909661</id><snippet>Tuple&lt;..&gt;</snippet></ROW><ROW><id>2909661</id><snippet>var result = myList.OrderBy(k =&gt; k.Item2);
</snippet></ROW><ROW><id>2909661</id><snippet>k.Item2</snippet></ROW><ROW><id>2909661</id><snippet>var result = from k in myList orderby k.Item2 select k;
</snippet></ROW><ROW><id>2909734</id><snippet>dis</snippet></ROW><ROW><id>2909734</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(lambda x: x.foo)
  1           0 LOAD_FAST                0 (x)
              3 LOAD_ATTR                0 (foo)
              6 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(lambda x: getattr(x, 'foo'))
  1           0 LOAD_GLOBAL              0 (getattr)
              3 LOAD_FAST                0 (x)
              6 LOAD_CONST               0 ('foo')
              9 CALL_FUNCTION            2
             12 RETURN_VALUE  
</snippet></ROW><ROW><id>2909734</id><snippet>cmd</snippet></ROW><ROW><id>2909734</id><snippet>cmd</snippet></ROW><ROW><id>2909734</id><snippet>cmd.Cmd</snippet></ROW><ROW><id>2909734</id><snippet>import cmd

class EchoCmd(cmd.Cmd):
    """Simple command processor example."""

    def do_echo(self, line):
        print line

    def do_EOF(self, line):
        return True

if __name__ == '__main__':
    EchoCmd().cmdloop()
</snippet></ROW><ROW><id>2909781</id><snippet>invoke_shell</snippet></ROW><ROW><id>2909781</id><snippet>SSHClient</snippet></ROW><ROW><id>2909781</id><snippet>Channel</snippet></ROW><ROW><id>2909781</id><snippet>exec_command</snippet></ROW><ROW><id>2909962</id><snippet>speed_x = -speed_x
</snippet></ROW><ROW><id>2909962</id><snippet>speed_x</snippet></ROW><ROW><id>2909962</id><snippet>self.move = -self.move 
</snippet></ROW><ROW><id>2909962</id><snippet>self</snippet></ROW><ROW><id>2909962</id><snippet>self</snippet></ROW><ROW><id>2909962</id><snippet>speed_x</snippet></ROW><ROW><id>2909962</id><snippet>self.move</snippet></ROW><ROW><id>2909998</id><snippet>os.path.join</snippet></ROW><ROW><id>2909998</id><snippet>for path, subdirs, files in os.walk(root):
    for name in files:
        print os.path.join(path, name)
</snippet></ROW><ROW><id>2909998</id><snippet>path</snippet></ROW><ROW><id>2909998</id><snippet>root</snippet></ROW><ROW><id>2909998</id><snippet>root</snippet></ROW><ROW><id>2909998</id><snippet>os.path.join</snippet></ROW><ROW><id>2909998</id><snippet>pathlib.PurePath(path, name)
</snippet></ROW><ROW><id>2909998</id><snippet>pathlib</snippet></ROW><ROW><id>2909998</id><snippet>Path</snippet></ROW><ROW><id>2910126</id><snippet>f</snippet></ROW><ROW><id>2910126</id><snippet>s</snippet></ROW><ROW><id>2910126</id><snippet>with open(f) as fp:
    if s in fp.read():
        print '%s has the string' % f
    else:
        print '%s doesn't have the string' % f
</snippet></ROW><ROW><id>2910126</id><snippet>os.walk</snippet></ROW><ROW><id>2910126</id><snippet>f = os.path.join(path, name)
</snippet></ROW><ROW><id>2910272</id><snippet>resetData()</snippet></ROW><ROW><id>2910272</id><snippet>randomiseStudents()</snippet></ROW><ROW><id>2910272</id><snippet>resetData()</snippet></ROW><ROW><id>2910272</id><snippet>for supervisor in supervisors.itervalues():
    supervisor.quota = 7 # for example
</snippet></ROW><ROW><id>2910272</id><snippet>supervisor.start_quota</snippet></ROW><ROW><id>2910272</id><snippet>for supervisor in supervisors.itervalues():
    supervisor.quota = supervisor.start_quota
</snippet></ROW><ROW><id>2910282</id><snippet>def get_login(self, realm, username, may_save):

    # ...other code omitted...

    gtk.gdk.threads_enter()
    dialog = rabbitvcs.ui.dialog.Authentication(
        realm,
        may_save
    )
    result = dialog.run()
    gtk.gdk.threads_leave()

    return result
</snippet></ROW><ROW><id>2910282</id><snippet>def run(self):
    returner = None
    self.dialog = self.get_widget("Authentication")
    result = self.dialog.run()

    login = self.get_widget("auth_login").get_text()
    password = self.get_widget("auth_password").get_text()
    save = self.get_widget("auth_save").get_active()
    self.dialog.destroy()

    if result == gtk.RESPONSE_OK:
        return (True, login, password, save)
    else:
        return (False, "", "", False)
</snippet></ROW><ROW><id>2910309</id><snippet>from twill.commands import *
go('http://mysite.org')

fv("1", "email-email", "blabla.com")
fv("1", "password-clear", "testpass")

submit('0')
</snippet></ROW><ROW><id>2910309</id><snippet>showforms()</snippet></ROW><ROW><id>2910309</id><snippet>go(...)</snippet></ROW><ROW><id>2910418</id><snippet>lmutil lmstat -a -c &lt;port-number@license-server&gt;
</snippet></ROW><ROW><id>2910665</id><snippet>os.path.splitext</snippet></ROW><ROW><id>2910665</id><snippet>for path, subdirs, files in os.walk(path):
    for name in files:
        if os.path.splitext(name)[1] in filefilter:
            f = str(os.path.join(path, name))
            with open(f) as fp:
                if s in fp.read():
                    print "%s has the string" % f
                else:
                    print "%s doesn't have the string" % f
</snippet></ROW><ROW><id>2910796</id><snippet>$</snippet></ROW><ROW><id>2910796</id><snippet>urls.py</snippet></ROW><ROW><id>2910796</id><snippet>urlpatterns = patterns('',
    (r'^gallery/', include('mysite.gallery.urls')),
)
</snippet></ROW><ROW><id>2910796</id><snippet>gallery</snippet></ROW><ROW><id>2910796</id><snippet>urlpatterns = patterns('',  
    (r'^browse/$', 'mysite.gallery.views.browse'),
    (r'^photo/$', 'mysite.gallery.views.photo'),
)
</snippet></ROW><ROW><id>2910796</id><snippet>$</snippet></ROW><ROW><id>2910796</id><snippet>include()</snippet></ROW><ROW><id>2910910</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; import re
&gt;&gt;&gt; data = urllib.urlopen('http://uk.finance.yahoo.com/q?s=BT&amp;m=L&amp;d=').read()
&gt;&gt;&gt; re.search('&lt;span id="yfs_l10_bt-a\.l".*?&gt;([0-9.]+)', data).group(1)
'122.00'
</snippet></ROW><ROW><id>2911315</id><snippet>domain = 'subdomain.domain.ext'
name, ext = domain.split('.')[-2:]
</snippet></ROW><ROW><id>2911926</id><snippet>-j</snippet></ROW><ROW><id>2911926</id><snippet>-a</snippet></ROW><ROW><id>2911937</id><snippet>'rb'</snippet></ROW><ROW><id>2911937</id><snippet>&gt;&gt;&gt; ftp.storbinary('STOR myfile.txt', open('myfile.txt', 'rb'))
'226 File receive OK.'
</snippet></ROW><ROW><id>2912531</id><snippet>21    python-minimal  1584305 182870 1381149 20211    75 (Matthias Klose)   
577   mono-gac        1403534  25795 1323328 54159   252 (Debian Mono Group)    
</snippet></ROW><ROW><id>2912620</id><snippet>struct.unpack('&gt;L', socket.inet_aton('192.168.1.1'))[0]
</snippet></ROW><ROW><id>2912813</id><snippet>datafiles = matplotlib.get_py2exe_datafiles()
</snippet></ROW><ROW><id>2912813</id><snippet>__doc__ += "something more"
</snippet></ROW><ROW><id>2912813</id><snippet>__doc__</snippet></ROW><ROW><id>2912825</id><snippet>&gt;&gt;&gt; (-random() &gt; random())*random()
0.0
</snippet></ROW><ROW><id>2912884</id><snippet>locals()</snippet></ROW><ROW><id>2912884</id><snippet>&gt;&gt;&gt; def fun(a, b, c):
...     d = locals()
...     e = d
...     print e
...     print locals()
... 
&gt;&gt;&gt; fun(1, 2, 3)
{'a': 1, 'c': 3, 'b': 2}
{'a': 1, 'c': 3, 'b': 2, 'e': {...}, 'd': {...}}
</snippet></ROW><ROW><id>2912884</id><snippet>&gt;&gt;&gt; def nones(a, b, c, d):
...     arguments = locals()
...     print 'The following arguments are not None: ', ', '.join(k for k, v in arguments.items() if v is not None)
... 
&gt;&gt;&gt; nones("Something", None, 'N', False)
The following arguments are not None:  a, c, d
</snippet></ROW><ROW><id>2912884</id><snippet>&gt;&gt;&gt; def foo(a, b, c):
...     return ''.join(v for v in locals().values() if v is not None)
... 
&gt;&gt;&gt; foo('Cleese', 'Palin', None)
'CleesePalin'
</snippet></ROW><ROW><id>2912884</id><snippet>dict</snippet></ROW><ROW><id>2912884</id><snippet>locals()</snippet></ROW><ROW><id>2912884</id><snippet>vars()</snippet></ROW><ROW><id>2912884</id><snippet>&gt;&gt;&gt; def foo(a, b, c):
...     arguments = locals()
...     return ''.join(str(arguments[k]) for k in sorted(arguments.keys()) if arguments[k] is not None)
... 
&gt;&gt;&gt; foo(None, 'Antioch', 3)
'Antioch3'
</snippet></ROW><ROW><id>2913450</id><snippet>python-pybabel</snippet></ROW><ROW><id>2913450</id><snippet>import gettext
import babel

messagefiles = gettext.find('OurAppName', 
    languages=babel.Locale('en').languages.keys(),
    all=True)
messagefiles.sort()

languages = [path.split('/')[-3] for path in messagefiles]
langlist = zip(languages, 
    [babel.Locale.parse(lang).display_name for lang in languages])

print langlist
</snippet></ROW><ROW><id>2913450</id><snippet>gettext.find</snippet></ROW><ROW><id>2913525</id><snippet>import inspect

def setargs(func):
    f = inspect.currentframe(1)
    argspec = inspect.getargspec(func)
    for arg in argspec.args:
        setattr(f.f_locals["self"], arg, f.f_locals[arg])
</snippet></ROW><ROW><id>2913525</id><snippet>class Foo(object):

    def __init__(self, bar, baz=4711):
        setargs(self.__init__)

        print self.bar # Now defined
        print self.baz # Now defined
</snippet></ROW><ROW><id>2913637</id><snippet>{
  "user":"username",
  "password":"passwd"
}
</snippet></ROW><ROW><id>2913818</id><snippet>self.errorHandle()  
</snippet></ROW><ROW><id>2913818</id><snippet>errorHandle</snippet></ROW><ROW><id>2913818</id><snippet>return</snippet></ROW><ROW><id>2913818</id><snippet>someArg</snippet></ROW><ROW><id>2913818</id><snippet>def function(self)</snippet></ROW><ROW><id>2913818</id><snippet>result function...</snippet></ROW><ROW><id>2913818</id><snippet>errorHandle</snippet></ROW><ROW><id>2913895</id><snippet>NameError</snippet></ROW><ROW><id>2913895</id><snippet>TypeError</snippet></ROW><ROW><id>2913895</id><snippet>KeyError</snippet></ROW><ROW><id>2913895</id><snippet>ValueError</snippet></ROW><ROW><id>2913895</id><snippet>SyntaxError</snippet></ROW><ROW><id>2913895</id><snippet>AttributeError</snippet></ROW><ROW><id>2913895</id><snippet>try:
    return mylist[theindex]
except IndexError:
    return None
</snippet></ROW><ROW><id>2913895</id><snippet>theindex</snippet></ROW><ROW><id>2913895</id><snippet>mylist</snippet></ROW><ROW><id>2913895</id><snippet>mylist</snippet></ROW><ROW><id>2913895</id><snippet>None</snippet></ROW><ROW><id>2913895</id><snippet>KeyError</snippet></ROW><ROW><id>2913895</id><snippet>AttributeError</snippet></ROW><ROW><id>2913895</id><snippet>getattr</snippet></ROW><ROW><id>2913895</id><snippet>get</snippet></ROW><ROW><id>2913895</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>2913895</id><snippet>IndexError</snippet></ROW><ROW><id>2914602</id><snippet>os.pipe</snippet></ROW><ROW><id>2914602</id><snippet>os.read</snippet></ROW><ROW><id>2914602</id><snippet>os.write</snippet></ROW><ROW><id>2914602</id><snippet>os.fdopen</snippet></ROW><ROW><id>2914602</id><snippet>select.select</snippet></ROW><ROW><id>2914933</id><snippet>v</snippet></ROW><ROW><id>2914933</id><snippet>v</snippet></ROW><ROW><id>2914933</id><snippet>v</snippet></ROW><ROW><id>2914933</id><snippet>def create_not_function(v):
    return lambda s, *args, **kw:  not v(s, *args, **kw)

for (k, v) in _dict.items():
    if hasattr(v, '__call__'):
        extended_dict["not_" + k] = create_not_function(v)
</snippet></ROW><ROW><id>2914949</id><snippet>&gt;&gt;&gt; class Widget(object):
    def __init__(self, name, val):
        self.name = name
        self.val = val
    def update(self, val):
        self.val = val
        print self.name, "changed to", self.val


&gt;&gt;&gt; def update(updateables, val):
    for u in updateables:
        u(val)


&gt;&gt;&gt; w1, w2 = Widget("Alpha", 5), Widget("Beta", 6)
&gt;&gt;&gt; updateables = [w1.update, w2.update]
&gt;&gt;&gt; update(updateables, 17)
Alpha changed to 17
Beta changed to 17
</snippet></ROW><ROW><id>2915153</id><snippet>import random
import collections

def maxvote(nlabels):
  cnt = collections.defaultdict(int)
  for i in nlabels:
    cnt[i] += 1
  maxv = max(cnt.itervalues())
  return random.choice([k for k,v in cnt.iteritems() if v == maxv])

print maxvote([1,3,4,5,5,5,3,3,11])
</snippet></ROW><ROW><id>2915617</id><snippet>open(image_name_we_want, "rb")</snippet></ROW><ROW><id>2915617</id><snippet>open(image_name_we_want, "wb")</snippet></ROW><ROW><id>2915617</id><snippet>import urllib2
fh = urllib2.urlopen('ftp://server/path/file.png')
file('file.png', 'wb').write(fh.read())
</snippet></ROW><ROW><id>2915617</id><snippet>write</snippet></ROW><ROW><id>2915617</id><snippet>open()</snippet></ROW><ROW><id>2915665</id><snippet>test_</snippet></ROW><ROW><id>2915665</id><snippet>test.py</snippet></ROW><ROW><id>2915665</id><snippet>test_.py</snippet></ROW><ROW><id>2915826</id><snippet># Assume this retrieves the dataset from a GeoTIFF file.
dataset = getDataSet(tiffFileLocation)      

saveOptions = []
saveOptions.append("QUALITY=75")

# Obtains a JPEG GDAL driver
jpegDriver = gdal.GetDriverByName("JPEG")   

# Create the .JPG file
jpegDriver.CreateCopy("imageFile.jpg", dataset, 0, saveOptions)  
</snippet></ROW><ROW><id>2915826</id><snippet>theDataset.GetGeoTransform()</snippet></ROW><ROW><id>2915826</id><snippet>theDataset.GetProjection()</snippet></ROW><ROW><id>2915964</id><snippet>sys.argv</snippet></ROW><ROW><id>2916165</id><snippet>argparse</snippet></ROW><ROW><id>2916165</id><snippet>sys.argv</snippet></ROW><ROW><id>2916311</id><snippet>(current_state, input) -&gt; (next_state)</snippet></ROW><ROW><id>2916311</id><snippet>0xAA 0xAA</snippet></ROW><ROW><id>2916311</id><snippet>with open(sys.argv[1], 'rb') as f:
    contents = f.read()
    for chunk in contents.split('\xaa\xaa')[1:]:
        length = ord(chunk[0])
        data = chunk[10:10+length]
        print data
</snippet></ROW><ROW><id>2916311</id><snippet>string.find('\xaa\xaa', start)</snippet></ROW><ROW><id>2916311</id><snippet>start</snippet></ROW><ROW><id>2916320</id><snippet>pip install --install-option="--prefix=$PREFIX_PATH" package_name
</snippet></ROW><ROW><id>2916320</id><snippet>--ignore-installed</snippet></ROW><ROW><id>2916320</id><snippet>--install-option</snippet></ROW><ROW><id>2916320</id><snippet>python setup.py install</snippet></ROW><ROW><id>2916320</id><snippet>--prefix</snippet></ROW><ROW><id>2916386</id><snippet># They happen to all be simple callable factories, if they weren't you could put
# a function in here:
make_heaps = [BinaryHeap, BinomialHeap]

def test_heaps():
    for make_heap in make_heaps:
        for checker in checkers: # we'll set checkers later
            yield checker, make_heap

def check_insert(make_heap):
    heap = make_heap()
    for x in range(99, -1, -1):
        heap.insert(x)

# def check_delete_min etc.

checkers = [
    value
    for name, value in sorted(globals().items())
    if name.startswith('check_')]
</snippet></ROW><ROW><id>2916424</id><snippet>'*'</snippet></ROW><ROW><id>2916424</id><snippet>fromlist</snippet></ROW><ROW><id>2916424</id><snippet>moduleName = "foo"
__import__(moduleName, globals(), locals(), ['*'])
</snippet></ROW><ROW><id>2916435</id><snippet>from smtplib import SMTPException, SMTPAuthenticationError
import string
import base64
import sspi

# NTLM Guide -- http://curl.haxx.se/rfc/ntlm.html

SMTP_EHLO_OKAY = 250
SMTP_AUTH_CHALLENGE = 334
SMTP_AUTH_OKAY = 235

def asbase64(msg):
    return string.replace(base64.encodestring(msg), '\n', '')

def connect_to_exchange_as_current_user(smtp):
    """Example:
    &gt;&gt;&gt; import smtplib
    &gt;&gt;&gt; smtp = smtplib.SMTP("my.smtp.server")
    &gt;&gt;&gt; connect_to_exchange_as_current_user(smtp)
    """

    # Send the SMTP EHLO command
    code, response = smtp.ehlo()
    if code != SMTP_EHLO_OKAY:
        raise SMTPException("Server did not respond as expected to EHLO command")

    sspiclient = sspi.ClientAuth('NTLM')

    # Generate the NTLM Type 1 message
    sec_buffer=None
    err, sec_buffer = sspiclient.authorize(sec_buffer)
    ntlm_message = asbase64(sec_buffer[0].Buffer)

    # Send the NTLM Type 1 message -- Authentication Request
    code, response = smtp.docmd("AUTH", "NTLM " + ntlm_message)

    # Verify the NTLM Type 2 response -- Challenge Message
    if code != SMTP_AUTH_CHALLENGE:
        raise SMTPException("Server did not respond as expected to NTLM negotiate message")

    # Generate the NTLM Type 3 message
    err, sec_buffer = sspiclient.authorize(base64.decodestring(response))
    ntlm_message = asbase64(sec_buffer[0].Buffer)

    # Send the NTLM Type 3 message -- Response Message
    code, response = smtp.docmd("", ntlm_message)
    if code != SMTP_AUTH_OKAY:
        raise SMTPAuthenticationError(code, response)
</snippet></ROW><ROW><id>2916530</id><snippet>&gt;&gt;&gt; compare(5, 4)
</snippet></ROW><ROW><id>2916530</id><snippet>compare</snippet></ROW><ROW><id>2916579</id><snippet>catlist.sort(key=lambda x: x.name.lower())
</snippet></ROW><ROW><id>2917035</id><snippet>In [1]: a = arange(50)

In [2]: b = ones(50) * 2

In [3]: a
Out[3]: 
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])

In [4]: b
Out[4]: 
array([ 2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,
        2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,
        2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,
        2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.])

In [5]: a * b
Out[5]: 
array([  0.,   2.,   4.,   6.,   8.,  10.,  12.,  14.,  16.,  18.,  20.,
        22.,  24.,  26.,  28.,  30.,  32.,  34.,  36.,  38.,  40.,  42.,
        44.,  46.,  48.,  50.,  52.,  54.,  56.,  58.,  60.,  62.,  64.,
        66.,  68.,  70.,  72.,  74.,  76.,  78.,  80.,  82.,  84.,  86.,
        88.,  90.,  92.,  94.,  96.,  98.])

In [6]: (a * b).sum()
Out[6]: 2450.0
</snippet></ROW><ROW><id>2917035</id><snippet>dot()</snippet></ROW><ROW><id>2917035</id><snippet>In [7]: A = arange(25).reshape((5,5))

In [8]: X = arange(5)

In [9]: A
Out[9]: 
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])

In [12]: dot(A, X) # Sum_j A[i,j] * X[j] for all i
Out[12]: array([ 30,  80, 130, 180, 230])
</snippet></ROW><ROW><id>2917352</id><snippet>def _get_memcache_timeout(self, timeout):
    """
    Memcached deals with long (&gt; 30 days) timeouts in a special
    way. Call this function to obtain a safe value for your timeout.
    """
    timeout = timeout or self.default_timeout
    if timeout &gt; 2592000: # 60*60*24*30, 30 days
        # See http://code.google.com/p/memcached/wiki/FAQ
        # "You can set expire times up to 30 days in the future. After that
        # memcached interprets it as a date, and will expire the item after
        # said date. This is a simple (but obscure) mechanic."
        #
        # This means that we have to switch to absolute timestamps.
        timeout += int(time.time())
    return timeout
</snippet></ROW><ROW><id>2917365</id><snippet>RewriteEngine On
RewriteRule ^/test/$ /test.py 
</snippet></ROW><ROW><id>2917388</id><snippet>[i for i, v in enumerate(L) if v[0] == 53]
</snippet></ROW><ROW><id>2917516</id><snippet>self.getButton(0, 0).buttonMethod()
</snippet></ROW><ROW><id>2917516</id><snippet>getButton</snippet></ROW><ROW><id>2917516</id><snippet>0, 0</snippet></ROW><ROW><id>2917516</id><snippet>buttonMethod</snippet></ROW><ROW><id>2917516</id><snippet>buttonMethod</snippet></ROW><ROW><id>2917516</id><snippet>buttonMethod</snippet></ROW><ROW><id>2917516</id><snippet>self.getButton(0, 0).buttonMethod # note no parenthesis at end
</snippet></ROW><ROW><id>2917516</id><snippet>class MW(QMainWindow):
    def __init__(self, *args)
        QMainWindow.__init__(self, *args)
        layout = QHBoxLayout(self)
        self.b1 = QPushButton("Button1")
        self.b2 = QPushButton("Button2")
        layout.addWidget(self.b1)
        layout.addWidget(self.b2)
        self.connect(self.b1, SIGNAL("clicked()"), self.buttonWasPressed)
        self.connect(self.b2, SIGNAL("clicked()"), self.buttonWasPressed)

    def buttonWasPressed(self):
        print "button %s was pressed" % self.sender()
</snippet></ROW><ROW><id>2917778</id><snippet>import os
os.system("run-client.bat param1 param2")
</snippet></ROW><ROW><id>2917778</id><snippet>from subprocess import *
p = Popen(['run-client.bat', param1, param2], stdout=PIPE, stderr=PIPE)
output, errors = p.communicate()
p.wait() # wait for process to terminate
</snippet></ROW><ROW><id>2918004</id><snippet>def in_box(X, B):
    """
    Takes an Nx2 NumPy array of points and a 4x2 NumPy array of corners that 
    form an axis aligned box.
    """
    xmin = B[:,0].min(); xmax = B[:,0].max()
    ymin = X[:,1].min(); ymax = X[:,1].max()
    return X[X[:,0] &gt; xmin &amp; X[:,0] &lt; xmax &amp; X[:,1] &gt; ymin &amp; X[:,1] &lt; ymax]
</snippet></ROW><ROW><id>2918004</id><snippet>matplotlib</snippet></ROW><ROW><id>2918004</id><snippet>matplotlib.nxutils.points_inside_poly</snippet></ROW><ROW><id>2918156</id><snippet>scipy.org</snippet></ROW><ROW><id>2918156</id><snippet>class</snippet></ROW><ROW><id>2918265</id><snippet>import email.header as eh

unicode_data= u''.join(
    str_data.decode(codec or 'ascii')
    for str_data, codec
    in eh.decode_header('=?ISO-8859-7?B?0OXm7/Dv8d/hIPP07+0gyuno4enx/u3h?='))
# unicode_data now is u'Πεζοπορία στον Κιθαιρώνα'
</snippet></ROW><ROW><id>2918265</id><snippet>utf8data= unicode_data.encode('utf-8')
</snippet></ROW><ROW><id>2918265</id><snippet>.decode</snippet></ROW><ROW><id>2918265</id><snippet>codec</snippet></ROW><ROW><id>2918265</id><snippet>None</snippet></ROW><ROW><id>2918265</id><snippet>eh.decode_header('plain text')</snippet></ROW><ROW><id>2918268</id><snippet>IndexError</snippet></ROW><ROW><id>2918268</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; a[2]
3
&gt;&gt;&gt; a[3]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
IndexError: list index out of range
</snippet></ROW><ROW><id>2918268</id><snippet>l</snippet></ROW><ROW><id>2918268</id><snippet>m</snippet></ROW><ROW><id>2918268</id><snippet>2</snippet></ROW><ROW><id>2918268</id><snippet>m[l]</snippet></ROW><ROW><id>2918370</id><snippet>file.write("My String\n");
</snippet></ROW><ROW><id>2918384</id><snippet>user_id = Column(Integer, ForeignKey('users.id'))</snippet></ROW><ROW><id>2918384</id><snippet>user_id = Column(Integer, ForeignKey('users.id'), nullable=False)</snippet></ROW><ROW><id>2918384</id><snippet>user = relationship(Users)</snippet></ROW><ROW><id>2918384</id><snippet>OpenID</snippet></ROW><ROW><id>2918384</id><snippet>users = relationship('OpenID')</snippet></ROW><ROW><id>2918384</id><snippet>Users</snippet></ROW><ROW><id>2918384</id><snippet>backref</snippet></ROW><ROW><id>2918384</id><snippet>backref</snippet></ROW><ROW><id>2918384</id><snippet>backref</snippet></ROW><ROW><id>2918565</id><snippet>pexpect</snippet></ROW><ROW><id>2918565</id><snippet>pyautoexpect</snippet></ROW><ROW><id>2918573</id><snippet>Qt Designer</snippet></ROW><ROW><id>2918600</id><snippet>for line in f:
    words = line.split()
</snippet></ROW><ROW><id>2918839</id><snippet>class Order(object):
    def __init__(self, item_id, item_name, customer=None):
        self.item_id = item_id
        self.item_name = item_name
        self.customer = customer # self.customer = None
    #...
</snippet></ROW><ROW><id>2918839</id><snippet>orders_table = Table('orders', metadata,
    Column('item_id', Integer, primary_key=True),
    Column('item_name', String),
    Column('customer_id', Integer, ForeignKey('customers.uid')) # changed
)

# for bi-directional relationship use:
mapper(Customer, customers_table, properties={
    'orders': relationship(Orders, backref='customer')
})
mapper(Orders, orders_table)
# for uni-directional relationship use:
mapper(Customer, customers_table)
mapper(Orders, orders_table, properties={
    'customer': relationship(Customer)
})
#...
</snippet></ROW><ROW><id>2918839</id><snippet>print mycustomer.orders # in case of bi-directional
print order.customer
</snippet></ROW><ROW><id>2919257</id><snippet>fstr = cStringIO.StringIO(simage)
pygame.image.load(fstr, namehint="somethinguseful")
</snippet></ROW><ROW><id>2919822</id><snippet>import os
import subprocess

cwd = os.getcwd()

for i in os.listdir(cwd):
    if i.endswith('.ttp'):
        o = i + "-out"
        p = subprocess.call(["program_name", "-input", i, "-output", o])
</snippet></ROW><ROW><id>2919829</id><snippet>j=0  
x=[]  
for j in range(9):  
   x = x + [str(j)]  
</snippet></ROW><ROW><id>2919911</id><snippet>eval</snippet></ROW><ROW><id>2919911</id><snippet>123,321,12,123,321,'asd',ewr,'afdg','et al',213
</snippet></ROW><ROW><id>2920174</id><snippet>/etc/resolv.conf</snippet></ROW><ROW><id>2920174</id><snippet>append domain-name-servers &lt;DNS-ip&gt;;
</snippet></ROW><ROW><id>2920174</id><snippet>prepend domain-name-servers &lt;DNS-ip&gt;;
</snippet></ROW><ROW><id>2920496</id><snippet>item.vendors.all.0</snippet></ROW><ROW><id>2920496</id><snippet>"Test"</snippet></ROW><ROW><id>2920496</id><snippet>"Test"</snippet></ROW><ROW><id>2920496</id><snippet>"Test"</snippet></ROW><ROW><id>2920496</id><snippet>{% ifnotequal item.vendors.all.0|stringformat:"s" "Test" %}
</snippet></ROW><ROW><id>2920639</id><snippet>a = 'abcdefg'
j=2;h=4
my_slice = slice(j,h) # you can pass this object around if you wish

a[my_slice] # -&gt; cd
</snippet></ROW><ROW><id>2920697</id><snippet>list</snippet></ROW><ROW><id>2920697</id><snippet>append</snippet></ROW><ROW><id>2920697</id><snippet>push</snippet></ROW><ROW><id>2920697</id><snippet>remove</snippet></ROW><ROW><id>2920697</id><snippet>pop</snippet></ROW><ROW><id>2920697</id><snippet>del</snippet></ROW><ROW><id>2920697</id><snippet>[1,'e', [3]]</snippet></ROW><ROW><id>2920697</id><snippet>slice</snippet></ROW><ROW><id>2920697</id><snippet>a[start:stop:step]</snippet></ROW><ROW><id>2920697</id><snippet>help(slice)</snippet></ROW><ROW><id>2920697</id><snippet>list</snippet></ROW><ROW><id>2920915</id><snippet>strptime</snippet></ROW><ROW><id>2920915</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.strptime('december', '%B').month
12
&gt;&gt;&gt; datetime.datetime.strptime('january', '%B').month
1
</snippet></ROW><ROW><id>2921445</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>2921445</id><snippet>django.contrib.auth.context_processors.auth</snippet></ROW><ROW><id>2921445</id><snippet>user</snippet></ROW><ROW><id>2921655</id><snippet>&lt;lots of tightly coupled computation&gt;</snippet></ROW><ROW><id>2921655</id><snippet>&lt;lots more computation&gt;</snippet></ROW><ROW><id>2921655</id><snippet>for</snippet></ROW><ROW><id>2921713</id><snippet>&gt;&gt;&gt; X=[[1,2,3], [4,5,6]]
&gt;&gt;&gt; Y=zip(*X)
&gt;&gt;&gt; Y
[(1, 4), (2, 5), (3, 6)]
</snippet></ROW><ROW><id>2921713</id><snippet>&gt;&gt;&gt; range(3, 6)             # normal call with separate arguments
[3, 4, 5]
&gt;&gt;&gt; args = [3, 6]
&gt;&gt;&gt; range(*args)            # call with arguments unpacked from a list
[3, 4, 5]
</snippet></ROW><ROW><id>2921713</id><snippet>X</snippet></ROW><ROW><id>2921713</id><snippet>[[1,2,3], [4,5,6]]</snippet></ROW><ROW><id>2921713</id><snippet>zip(*X)</snippet></ROW><ROW><id>2921713</id><snippet>zip([1,2,3], [4,5,6])</snippet></ROW><ROW><id>2921893</id><snippet>*</snippet></ROW><ROW><id>2921893</id><snippet>def sum(a, b):
    return a + b

values = (1, 2)

s = sum(*values)
</snippet></ROW><ROW><id>2921893</id><snippet>s = sum(1, 2)
</snippet></ROW><ROW><id>2921893</id><snippet>**</snippet></ROW><ROW><id>2921893</id><snippet>values = { 'a': 1, 'b': 2 }
s = sum(**values)
</snippet></ROW><ROW><id>2921893</id><snippet>def sum(a, b, c, d):
    return a + b + c + d

values1 = (1, 2)
values2 = { 'c': 10, 'd': 15 }
s = sum(*values1, **values2)
</snippet></ROW><ROW><id>2921893</id><snippet>s = sum(1, 2, 10, 15)
</snippet></ROW><ROW><id>2921893</id><snippet>*x</snippet></ROW><ROW><id>2921893</id><snippet>**y</snippet></ROW><ROW><id>2921893</id><snippet>def sum(*values):
    s = 0
    for v in values:
        s = s + v
    return s

s = sum(1, 2, 3, 4, 5)
</snippet></ROW><ROW><id>2921893</id><snippet>**</snippet></ROW><ROW><id>2921893</id><snippet>def get_a(**values):
    return values['a']

s = get_a(a=1, b=2)      # returns 1
</snippet></ROW><ROW><id>2921893</id><snippet>def sum(*values, **options):
    s = 0
    for i in values:
        s = s + i
    if "neg" in options:
        if options["neg"]:
            s = -s
    return s

s = sum(1, 2, 3, 4, 5)            # returns 15
s = sum(1, 2, 3, 4, 5, neg=True)  # returns -15
s = sum(1, 2, 3, 4, 5, neg=False) # returns 15
</snippet></ROW><ROW><id>2922122</id><snippet>in</snippet></ROW><ROW><id>2922122</id><snippet>set</snippet></ROW><ROW><id>2922122</id><snippet>if any(string in s for s in iterable_of_string_lists)</snippet></ROW><ROW><id>2922122</id><snippet>if string in string_list_1 or string in string_list_2</snippet></ROW><ROW><id>2922122</id><snippet>except:</snippet></ROW><ROW><id>2922122</id><snippet>except ValueError</snippet></ROW><ROW><id>2922122</id><snippet>except:</snippet></ROW><ROW><id>2922122</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>2922122</id><snippet>NameError</snippet></ROW><ROW><id>2922219</id><snippet>A_ik = A[(A[:,0] == origin) &amp; (A[:,1] == destination), 2]
</snippet></ROW><ROW><id>2922350</id><snippet>{% include_component 'news' %}
</snippet></ROW><ROW><id>2922480</id><snippet>__init__</snippet></ROW><ROW><id>2922480</id><snippet>def __init__(self, *args, **kwargs):
    self.myvalue = kwargs.pop('myvalue')
    super(MyForm, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>2922480</id><snippet>self.myvalue</snippet></ROW><ROW><id>2922849</id><snippet>import subprocess
from threading import Thread
import time
import sys
import logging
import tempfile
import os

import game_playing_module

class Pusher(Thread):
    def __init__(self, source, dest, proc, name):
            Thread.__init__(self)
            self.source = source
            self.dest = dest
            self.name = name
            self.proc = proc

    def run(self):
            while (self.proc.poll()==None) and\
                  (not self.source.closed) and (not self.source.closed):
                    line = self.source.readline()
                    logging.info('%s: %s' % (self.name, line[:-1]))
                    self.dest.write(line)
                    self.dest.flush()

def get_reader_writer():
    fd_read, fd_write = os.pipe()
    return os.fdopen(fd_read, 'r'), os.fdopen(fd_write, 'w')

def connect(exe):
    logging.basicConfig(level=logging.DEBUG,\
                        format='%(message)s',\
                        filename=LOG_FILE_NAME,
                        filemode='w')

    program_to_grader_reader, program_to_grader_writer =\
                              get_reader_writer()

    grader_to_program_reader, grader_to_program_writer =\
                              get_reader_writer()

    p1 = subprocess.Popen(exe, shell=False, stdin=subprocess.PIPE, stdout=subprocess.PIPE)        

    old_stdin = sys.stdin
    old_stdout = sys.stdout

    sys.stdin = program_to_grader_reader
    sys.stdout = grader_to_program_writer

    push1 = Pusher(p1.stdout, program_to_grader_writer, p1, '1')
    push2 = Pusher(grader_to_program_reader, p1.stdin, p1, '2')

    push1.start()
    push2.start()

    game_playing_module.play()

    sys.stdin = old_stdin
    sys.stdout = old_stdout

    fil = file(LOG_FILE, 'r')
    data = fil.read()
    fil.close()
    return data

if __name__=='__main__':
    if len(sys.argv) != 2:
        print 'Usage: connect.py exe'
        print sys.argv
        exit()
    print sys.argv
    print connect(sys.argv[1])
</snippet></ROW><ROW><id>2922878</id><snippet>list_of_files = {}
for (dirpath, dirnames, filenames) in os.walk(path):
    for filename in filenames:
        if filename[-5:] == '.html': 
            list_of_files[filename] = os.sep.join([dirpath, filename])
</snippet></ROW><ROW><id>2923091</id><snippet>curl</snippet></ROW><ROW><id>2923091</id><snippet>from django.views.decorators.http import condition

@condition(etag_func=None)
def stream_response(request):
    resp = HttpResponse( stream_response_generator(), mimetype='text/html')
    return resp

def stream_response_generator():
    yield "&lt;html&gt;&lt;body&gt;\n"
    for x in range(1,11):
        yield "&lt;div&gt;%s&lt;/div&gt;\n" % x
        yield " " * 1024  # Encourage browser to render incrementally
        time.sleep(1)
    yield "&lt;/body&gt;&lt;/html&gt;\n"
</snippet></ROW><ROW><id>2923410</id><snippet>import fileinput,sys,os
files=[os.path.join('HTML',filename) for filename in os.listdir("HTML/")]
for line in fileinput.input(files, inplace=True):    
    line = filter(lambda x: x in string.printable, line)
    sys.stdout.write(line)
</snippet></ROW><ROW><id>2923517</id><snippet>&gt;&gt;&gt; a = 'The quick brown fox.'
&gt;&gt;&gt; b = 'The quick brown fox jumped over the lazy dog.'
&gt;&gt;&gt; import difflib
&gt;&gt;&gt; s = difflib.SequenceMatcher(None, a, b)
&gt;&gt;&gt; s.find_longest_match(0,len(a),0,len(b))
Match(a=0, b=0, size=19) # returns NamedTuple (new in v2.6)
</snippet></ROW><ROW><id>2923517</id><snippet>&gt;&gt;&gt; difflib.SequenceMatcher(None, a, b).ratio()
0.61538461538461542
</snippet></ROW><ROW><id>2923674</id><snippet>class base :
    derived_val = 1
</snippet></ROW><ROW><id>2923674</id><snippet>derived_val</snippet></ROW><ROW><id>2923674</id><snippet>base.__dict__</snippet></ROW><ROW><id>2923674</id><snippet>t2=base()
print(base.__dict__)
# {'derived_val': 1, '__module__': '__main__', '__doc__': None}
print(t2.__dict__)
# {}
</snippet></ROW><ROW><id>2923674</id><snippet>t2.derived_val</snippet></ROW><ROW><id>2923674</id><snippet>t2.__dict__</snippet></ROW><ROW><id>2923674</id><snippet>'derived_val'</snippet></ROW><ROW><id>2923674</id><snippet>t2</snippet></ROW><ROW><id>2923674</id><snippet>print(t2.derived_val)
print(t2.__dict__)
# 1
# {}
</snippet></ROW><ROW><id>2923674</id><snippet>t2.derived_val</snippet></ROW><ROW><id>2923674</id><snippet>t2</snippet></ROW><ROW><id>2923674</id><snippet>derived_val</snippet></ROW><ROW><id>2923674</id><snippet>t2.__dict__</snippet></ROW><ROW><id>2923674</id><snippet>t2.derived_val = t2.derived_val+1
print(t2.derived_val)
print(t2.__dict__)
# 2
# {'derived_val': 2}
</snippet></ROW><ROW><id>2923674</id><snippet>derived_val</snippet></ROW><ROW><id>2923674</id><snippet>base.derived_val</snippet></ROW><ROW><id>2923674</id><snippet>base.__dict__</snippet></ROW><ROW><id>2923676</id><snippet>&gt;&gt;&gt; import lxml.html
&gt;&gt;&gt; html = lxml.html.fromstring('&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;')
&gt;&gt;&gt; lxml.html.tostring(html)
'&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;'
</snippet></ROW><ROW><id>2923676</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; import lxml.html
&gt;&gt;&gt; xml = etree.XML('&lt;a&gt;&lt;b/&gt;&lt;/a&gt;')
&gt;&gt;&gt; lxml.html.tostring(xml)
'&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;'
</snippet></ROW><ROW><id>2923691</id><snippet>SMTP_SSL</snippet></ROW><ROW><id>2923691</id><snippet>starttls</snippet></ROW><ROW><id>2923691</id><snippet>SMTP</snippet></ROW><ROW><id>2923719</id><snippet>key = {'key':'value'}
data = {'key2':'value2', 'key3':'value3'};
coll.update(key, data, {upsert:true});
</snippet></ROW><ROW><id>2923719</id><snippet>{"key":"value", "key2":"Ohai."}
</snippet></ROW><ROW><id>2923719</id><snippet>{"key":"value", "key2":"value2", "key3":"value3"}
</snippet></ROW><ROW><id>2923719</id><snippet>data = {"$set":{"key2":"value2"}}
</snippet></ROW><ROW><id>2924295</id><snippet>PS1</snippet></ROW><ROW><id>2924295</id><snippet>~/virtualenv/bin/python</snippet></ROW><ROW><id>2924295</id><snippet>#!/home/user/virtualenv/bin/python
</snippet></ROW><ROW><id>2924295</id><snippet>~/bin/cronjob</snippet></ROW><ROW><id>2924295</id><snippet>~/virtualenv/python</snippet></ROW><ROW><id>2924295</id><snippet>* * * * * /home/user/virtualenv/python /home/user/bin/crontab
</snippet></ROW><ROW><id>2924323</id><snippet>canvas</snippet></ROW><ROW><id>2924457</id><snippet>from subprocess import check_output as qx
</snippet></ROW><ROW><id>2924457</id><snippet>import subprocess
def check_output(*popenargs, **kwargs):
    if 'stdout' in kwargs:
        raise ValueError('stdout argument not allowed, it will be overridden.')
    process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
    output, unused_err = process.communicate()
    retcode = process.poll()
    if retcode:
        cmd = kwargs.get("args")
        if cmd is None:
            cmd = popenargs[0]
        raise subprocess.CalledProcessError(retcode, cmd, output=output)
    return output

class CalledProcessError(Exception):
    def __init__(self, returncode, cmd, output=None):
        self.returncode = returncode
        self.cmd = cmd
        self.output = output
    def __str__(self):
        return "Command '%s' returned non-zero exit status %d" % (
            self.cmd, self.returncode)
# overwrite CalledProcessError due to `output` keyword might be not available
subprocess.CalledProcessError = CalledProcessError
</snippet></ROW><ROW><id>2924457</id><snippet>check_output()</snippet></ROW><ROW><id>2924818</id><snippet>write</snippet></ROW><ROW><id>2924818</id><snippet>import codecs
with codecs.open("/tmp/test.txt",'w',encoding='utf-8') as f:   
    f.write(all.decode('utf-8'))
</snippet></ROW><ROW><id>2924818</id><snippet>all.decode('utf-8')</snippet></ROW><ROW><id>2924818</id><snippet>f.write</snippet></ROW><ROW><id>2924818</id><snippet>all.decode('utf-8')</snippet></ROW><ROW><id>2924818</id><snippet>names</snippet></ROW><ROW><id>2924818</id><snippet>delimiter</snippet></ROW><ROW><id>2924818</id><snippet>delimiter = u';'</snippet></ROW><ROW><id>2924818</id><snippet>all</snippet></ROW><ROW><id>2924818</id><snippet>with codecs.open("/tmp/test.txt",'w',encoding='utf-8') as f:   
    f.write(all)
</snippet></ROW><ROW><id>2925280</id><snippet>datetime</snippet></ROW><ROW><id>2925280</id><snippet>datetime.time(1).strftime('%I:%M%p').lstrip('0')
</snippet></ROW><ROW><id>2925280</id><snippet>strftime</snippet></ROW><ROW><id>2925280</id><snippet>strftime</snippet></ROW><ROW><id>2925280</id><snippet>strftime</snippet></ROW><ROW><id>2925280</id><snippet>tval = datetime.time(1)
tval_str = (tval.strftime('%A, %B ') + tval.strftime('%d').lstrip('0') 
    + tval.strftime(' %Y, ') + tval.strftime('%I:%M').lstrip('0') 
    + tval.strftime('%p').lower())
</snippet></ROW><ROW><id>2925280</id><snippet>re</snippet></ROW><ROW><id>2925280</id><snippet>tval = datetime.time(1)
tval_str = re.sub(r"^0|(?&lt;=\s)0", "", 
    re.sub(r"(?&lt;=[0-9])[AP]M", lambda m: m.group().lower(), 
    tval.strftime('%A, %B %d %Y, %I:%M%p')))
</snippet></ROW><ROW><id>2925280</id><snippet>"%p"</snippet></ROW><ROW><id>2925280</id><snippet>en_US</snippet></ROW><ROW><id>2925280</id><snippet>AM</snippet></ROW><ROW><id>2925280</id><snippet>PM</snippet></ROW><ROW><id>2925280</id><snippet>%p</snippet></ROW><ROW><id>2925280</id><snippet>de_DE</snippet></ROW><ROW><id>2925280</id><snippet>am</snippet></ROW><ROW><id>2925280</id><snippet>pm</snippet></ROW><ROW><id>2925280</id><snippet>js_JP</snippet></ROW><ROW><id>2925280</id><snippet>eucJP</snippet></ROW><ROW><id>2925280</id><snippet>SJIS</snippet></ROW><ROW><id>2925280</id><snippet>utf-8</snippet></ROW><ROW><id>2925280</id><snippet>locale.getlocale()</snippet></ROW><ROW><id>2925413</id><snippet>s1 = "/xubuntu/daily/current/lucid-alternate-i386.iso"
s2 = "/xubuntu/daily/current/lucid-alternate-amd64.iso"

pattern = re.compile(r'^.+-(.+)\..+$')

m = pattern.match(s1)
m.group(1)
'i386'

m = pattern.match(s2)
m.group(1)
'amd64'
</snippet></ROW><ROW><id>2925651</id><snippet>first.py</snippet></ROW><ROW><id>2925651</id><snippet>import os

def replaceProgramFilesPath(filenameBr):
  new_path = os.environ.get("PROGRAMFILES") + chr(92)
  return filenameBr.replace("&lt;ProgramFilesPath&gt;", new_path)
</snippet></ROW><ROW><id>2925651</id><snippet>second.py</snippet></ROW><ROW><id>2925651</id><snippet>from first import replaceProgramFilesPath
# now replaceProgramFilesPath can be used in this script.
</snippet></ROW><ROW><id>2925651</id><snippet>first.py</snippet></ROW><ROW><id>2925651</id><snippet>second.py</snippet></ROW><ROW><id>2925651</id><snippet>second.py</snippet></ROW><ROW><id>2926033</id><snippet>def get_users_by_identifiers(**kwargs):
    q = reduce(operator.or_, Q(identifier__key=k, identifier__value=v)
        for (k, v) in kwargs.iteritems())
    return User.objects.filter(q)
</snippet></ROW><ROW><id>2926097</id><snippet>from osgeo import gdal
ds = gdal.Open('path/to/file')
width = ds.RasterXSize
height = ds.RasterYSize
gt = ds.GetGeoTransform()
minx = gt[0]
miny = gt[3] + width*gt[4] + height*gt[5] 
maxx = gt[0] + width*gt[1] + height*gt[2]
maxy = gt[3] 
</snippet></ROW><ROW><id>2926097</id><snippet>gdalinfo</snippet></ROW><ROW><id>2926097</id><snippet>gdalinfo ~/somedir/somefile.tif 
</snippet></ROW><ROW><id>2926097</id><snippet>Driver: GTiff/GeoTIFF
Size is 512, 512
Coordinate System is:
PROJCS["NAD27 / UTM zone 11N",
    GEOGCS["NAD27",
        DATUM["North_American_Datum_1927",
            SPHEROID["Clarke 1866",6378206.4,294.978698213901]],
        PRIMEM["Greenwich",0],
        UNIT["degree",0.0174532925199433]],
    PROJECTION["Transverse_Mercator"],
    PARAMETER["latitude_of_origin",0],
    PARAMETER["central_meridian",-117],
    PARAMETER["scale_factor",0.9996],
    PARAMETER["false_easting",500000],
    PARAMETER["false_northing",0],
    UNIT["metre",1]]
Origin = (440720.000000,3751320.000000)
Pixel Size = (60.000000,-60.000000)
Corner Coordinates:
Upper Left  (  440720.000, 3751320.000) (117d38'28.21"W, 33d54'8.47"N)
Lower Left  (  440720.000, 3720600.000) (117d38'20.79"W, 33d37'31.04"N)
Upper Right (  471440.000, 3751320.000) (117d18'32.07"W, 33d54'13.08"N)
Lower Right (  471440.000, 3720600.000) (117d18'28.50"W, 33d37'35.61"N)
Center      (  456080.000, 3735960.000) (117d28'27.39"W, 33d45'52.46"N)
Band 1 Block=512x16 Type=Byte, ColorInterp=Gray
</snippet></ROW><ROW><id>2926097</id><snippet>PROJCS</snippet></ROW><ROW><id>2926097</id><snippet>from osgeo import osr, gdal

# get the existing coordinate system
ds = gdal.Open('path/to/file')
old_cs= osr.SpatialReference()
old_cs.ImportFromWkt(ds.GetProjectionRef())

# create the new coordinate system
wgs84_wkt = """
GEOGCS["WGS 84",
    DATUM["WGS_1984",
        SPHEROID["WGS 84",6378137,298.257223563,
            AUTHORITY["EPSG","7030"]],
        AUTHORITY["EPSG","6326"]],
    PRIMEM["Greenwich",0,
        AUTHORITY["EPSG","8901"]],
    UNIT["degree",0.01745329251994328,
        AUTHORITY["EPSG","9122"]],
    AUTHORITY["EPSG","4326"]]"""
new_cs = osr.SpatialReference()
new_cs .ImportFromWkt(wgs84_wkt)

# create a transform object to convert between coordinate systems
transform = osr.CoordinateTransformation(old_cs,new_cs) 

#get the point to transform, pixel (0,0) in this case
width = ds.RasterXSize
height = ds.RasterYSize
gt = ds.GetGeoTransform()
minx = gt[0]
miny = gt[3] + width*gt[4] + height*gt[5] 

#get the coordinates in lat long
latlong = transform.TransformPoint(x,y) 
</snippet></ROW><ROW><id>2926283</id><snippet>easy_install</snippet></ROW><ROW><id>2926283</id><snippet>easy_install</snippet></ROW><ROW><id>2926283</id><snippet>/opt/local/...</snippet></ROW><ROW><id>2926283</id><snippet>bin</snippet></ROW><ROW><id>2926283</id><snippet>$PATH</snippet></ROW><ROW><id>2926344</id><snippet>Foo</snippet></ROW><ROW><id>2926344</id><snippet>self.CONSTANT</snippet></ROW><ROW><id>2926344</id><snippet>Foo</snippet></ROW><ROW><id>2926344</id><snippet>self.CONSTANT=23</snippet></ROW><ROW><id>2926393</id><snippet>&gt;&gt;&gt; find_vowels(test)
</snippet></ROW><ROW><id>2926393</id><snippet>&gt;&gt;&gt; find_vowels('test')
</snippet></ROW><ROW><id>2926430</id><snippet>from win32com.client import Dispatch

from ctypes import Structure, pointer, windll
from ctypes import c_int, c_long, c_uint
import win32con
import pywintypes

class POINT(Structure):
    _fields_ = [('x', c_long),
                ('y', c_long)]
    def __init__( self, x=0, y=0 ):
        self.x = x
        self.y = y

class MSG(Structure):
    _fields_ = [('hwnd', c_int),
                ('message', c_uint),
                ('wParam', c_int),
                ('lParam', c_int),
                ('time', c_int),
                ('pt', POINT)]

def wait_until_ready(ie):
    pMsg = pointer(MSG())
    NULL = c_int(win32con.NULL)

    while True:

        while windll.user32.PeekMessageW(pMsg, NULL, 0, 0, win32con.PM_REMOVE) != 0:
            windll.user32.TranslateMessage(pMsg)
            windll.user32.DispatchMessageW(pMsg)

        if ie.ReadyState == 4:
            break


ie = Dispatch("InternetExplorer.Application")

ie.Visible = True

ie.Navigate("http://google.com/")

wait_until_ready(ie)

print "title:", ie.Document.Title
print "location:", ie.Document.location
</snippet></ROW><ROW><id>2926550</id><snippet>Content-Disposition: form-data; name="img";filename="PhotoHunt.jpg"
</snippet></ROW><ROW><id>2926550</id><snippet>Content-Disposition: form-data; name="img"; filename="PhotoHunt.jpg"
</snippet></ROW><ROW><id>2926603</id><snippet>.keys()</snippet></ROW><ROW><id>2926603</id><snippet>setattr()</snippet></ROW><ROW><id>2926671</id><snippet>def numberofancestors(klass):
    return len(klass.mro())
</snippet></ROW><ROW><id>2926671</id><snippet>import inspect

def numberofancestors(klass):
    return len(inspect.getmro(klass))
</snippet></ROW><ROW><id>2926671</id><snippet>sorted(HANDLERS, key=numberofancestors, reversed=True)
</snippet></ROW><ROW><id>2926671</id><snippet>.keys()</snippet></ROW><ROW><id>2926671</id><snippet>numberofancestors</snippet></ROW><ROW><id>2926671</id><snippet>key=</snippet></ROW><ROW><id>2926671</id><snippet>[h for h in [HANDLERS.get(c) for c in type(obj).mro()] if h is not None][0]
</snippet></ROW><ROW><id>2926671</id><snippet>next(Handlers[c] for c in type(obj).mro() if c in Handlers)
</snippet></ROW><ROW><id>2926671</id><snippet>adict.get(k) and check for not None</snippet></ROW><ROW><id>2926671</id><snippet>if k in adict: adict[k]</snippet></ROW><ROW><id>2926671</id><snippet>get</snippet></ROW><ROW><id>2926671</id><snippet>[0]</snippet></ROW><ROW><id>2926671</id><snippet>next</snippet></ROW><ROW><id>2926671</id><snippet>first</snippet></ROW><ROW><id>2926671</id><snippet>next</snippet></ROW><ROW><id>2926671</id><snippet>(thegenexp).next()</snippet></ROW><ROW><id>2926764</id><snippet>for ... in ...</snippet></ROW><ROW><id>2926764</id><snippet>for c in cows:</snippet></ROW><ROW><id>2926764</id><snippet>c = cows[3]</snippet></ROW><ROW><id>2926798</id><snippet>t</snippet></ROW><ROW><id>2926798</id><snippet>int</snippet></ROW><ROW><id>2926798</id><snippet>u=m[int(t)]
</snippet></ROW><ROW><id>2926910</id><snippet>m = [['qw','wew','23','C:/xyz/s.wav'],['qw','wew','23','C:/xyz/s2.wav'],['qw','wew','23','C:/xyz/s1.wav']]
fname = m[0][3]
print 'fname is', repr(fname)
win = wave.open(fname, 'rb')
</snippet></ROW><ROW><id>2926910</id><snippet>print 'fname is', repr(fname)</snippet></ROW><ROW><id>2927041</id><snippet>request.path</snippet></ROW><ROW><id>2927363</id><snippet>get_current_user</snippet></ROW><ROW><id>2927363</id><snippet>get</snippet></ROW><ROW><id>2927363</id><snippet>post</snippet></ROW><ROW><id>2927363</id><snippet>#!/bin/python
import tornado.web
import tornado.http
import tornado.escape
import functools
import logging
import urllib

import Author

def upgrade_lp_login_cookie(method):
    @functools.wraps(method)
    def wrapper(self, *args, **kwargs):
        if not self.current_user and self.get_cookie('lp_login'):
            self.upgrade_lp_login(self.async_callback(method, self, *args, **kwargs))
        else:
            return method(self, *args, **kwargs)
    return wrapper


class BaseHandler(tornado.web.RequestHandler):
    def get_current_user(self):
        user_id = self.get_secure_cookie("user")
        if user_id:
            return Author.objects.get(id=int(user_id))

    def upgrade_lp_login(self, callback):
        lp_login = self.get_cookie("lp_login")
        try:
            username, hashed_password = urllib.unquote(lp_login).rsplit(',',1)
        except ValueError:
            # check against malicious clients
            logging.info('invalid lp_login cookie %s' % lp_login)
            return callback()

        url = "http://%(host)s/api/user/username/%s/%s" % (self.request.host, 
                                                        urllib.quote(username), 
                                                        urllib.quote(hashed_password))
        http = tornado.httpclient.AsyncHTTPClient()
        http.fetch(url, self.async_callback(self.finish_upgrade_lp_login, callback))

    def finish_upgrade_lp_login(self, callback, response):
        answer = tornado.escape.json_decode(response.body)
        # username = answer['username']
        if answer['has_valid_credentials']:
            # set for self.current_user, overriding previous output of self.get_current_user()
            self._current_user = Author.objects.get(email=answer["email"])
            # set the cookie for next request
            self.set_secure_cookie("user", str(self.current_user.id))

        # now chain to the real get/post method
        callback()

    @upgrade_lp_login_cookie
    def get(self):
        self.render('template.tmpl')
</snippet></ROW><ROW><id>2928020</id><snippet>help('modules')
</snippet></ROW><ROW><id>2928020</id><snippet>/lib/site-packages</snippet></ROW><ROW><id>2928020</id><snippet>sys.path</snippet></ROW><ROW><id>2928216</id><snippet># file1.py
from file2 import Generate

class one:
   def __init__(self):
       self.HOOK = Generate
       ### call the hook method ####
       self.HOOK()
</snippet></ROW><ROW><id>2928216</id><snippet># file2.py
def Generate():
    # do 1
    # do 2
    hello()

def hello()
    print "hello"
</snippet></ROW><ROW><id>2928380</id><snippet>for c in client.options.transport.cookiejar:
    print client.options.transport.cookiejar
</snippet></ROW><ROW><id>2928385</id><snippet>&gt;&gt;&gt; def find_repeats(L, num_repeats):
...     idx = 0
...     while idx &lt; len(L):
...         if [L[idx]]*num_repeats == L[idx:idx+num_repeats]:
...             L[idx:idx+num_repeats] = [True]*num_repeats
...             idx += num_repeats
...         else:
...             idx += 1
...     return L
... 
&gt;&gt;&gt; L=[1,1,1,4,6]
&gt;&gt;&gt; print find_repeats(L, 2)
[True, True, 1, 4, 6]
&gt;&gt;&gt; L=[1,1,1,4,6]
&gt;&gt;&gt; print find_repeats(L, 3)
[True, True, True, 4, 6]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2928385</id><snippet>&gt;&gt;&gt; def find_repeats(L, required_number, num_repeats, stop_after_match=False):
...     idx = 0
...     while idx &lt; len(L):
...         if [required_number]*num_repeats == L[idx:idx+num_repeats]:
...             L[idx:idx+num_repeats] = [True]*num_repeats
...             idx += num_repeats
...             if stop_after_match:
...                 break
...         else:
...             idx += 1
...     return L
... 
&gt;&gt;&gt; L=[1,1,1,4,6]
&gt;&gt;&gt; print find_repeats(L, 1, 2)
[True, True, 1, 4, 6]
&gt;&gt;&gt; L=[1,1,1,4,6]
&gt;&gt;&gt; print find_repeats(L, 1, 3)
[True, True, True, 4, 6]
&gt;&gt;&gt; L=[1,1,1,4,4,4,6]
&gt;&gt;&gt; print find_repeats(L, 1, 3)
[True, True, True, 4, 4, 4, 6]
&gt;&gt;&gt; L=[1,1,1,4,4,4,6]
&gt;&gt;&gt; print find_repeats(L, 4, 3)
[1, 1, 1, True, True, True, 6]
</snippet></ROW><ROW><id>2928707</id><snippet>d = [('b', 'beta'), ('g', 'gamma'), ('a', 'alpha')]
</snippet></ROW><ROW><id>2928744</id><snippet>import glob
list_of_files = glob.glob('C:/begpython/wavnk/*.lab')
</snippet></ROW><ROW><id>2928943</id><snippet>with open('myfile', 'r') as f:
    data = [line.split() for line in f]
</snippet></ROW><ROW><id>2929198</id><snippet>&gt;&gt;&gt; x = 9
&gt;&gt;&gt; bin(x)
'0b1001'
&gt;&gt;&gt; y = int(bin(x)[2:], 4)*3
&gt;&gt;&gt; bin(y)
'0b11000011'
</snippet></ROW><ROW><id>2929399</id><snippet>160     def __str__(self):
161         """
162         Returns the query as a string of SQL with the parameter values
163         substituted in.
164 
165         Parameter values won't necessarily be quoted correctly, since that is
166         done by the database interface at execution time.
167         """
168         sql, params = self.get_compiler(DEFAULT_DB_ALIAS).as_sql()
169         return sql % params
</snippet></ROW><ROW><id>2929691</id><snippet>glGetError()</snippet></ROW><ROW><id>2929691</id><snippet>glGetError()</snippet></ROW><ROW><id>2929691</id><snippet>glGetError()</snippet></ROW><ROW><id>2929829</id><snippet>DATE_INPUT_FORMATS = (   
    '%d/%m/%Y', '%d/%m/%y',     # '25/10/2006', '25/10/06'
    '%Y-%m-%d', '%y-%m-%d',     # '2006-10-25', '06-10-25'
)

DATETIME_INPUT_FORMATS = (
    '%d/%m/%Y %H:%M:%S',    # '25/10/2006 14:30:59'
    '%d/%m/%Y %H:%M',       # '25/10/2006 14:30'
    '%d/%m/%y %H:%M:%S',    # '25/10/06 14:30:59'
    '%d/%m/%y %H:%M',       # '25/10/06 14:30'
    '%Y-%m-%d %H:%M:%S',    # '2006-10-25 14:30:59'
    '%Y-%m-%d %H:%M',       # '2006-10-25 14:30'
    '%Y-%m-%d',             # '2006-10-25'
)
</snippet></ROW><ROW><id>2929829</id><snippet>localize=True</snippet></ROW><ROW><id>2929946</id><snippet>import os
f = open(os.devnull,"w")
zookeeper.set_log_stream(f)
</snippet></ROW><ROW><id>2930028</id><snippet>makefile()</snippet></ROW><ROW><id>2930028</id><snippet>import socket, base64

host= 'www.example.com'
path= '/'
username= 'fred'
password= 'bloggs'
token= base64.encodestring('%s:%s' % (username, password)).strip()

lines= [
    'GET %s HTTP/1.1' % path,
    'Host: %s' % host,
    'Authorization: Basic %s' % token,
    'Connection: close',
]

s= socket.socket()
s.connect((host, 80))
f= s.makefile('rwb', bufsize=0)
f.write('\r\n'.join(lines)+'\r\n\r\n')
response= f.read()
f.close()
s.close()
</snippet></ROW><ROW><id>2930051</id><snippet>func</snippet></ROW><ROW><id>2930051</id><snippet>from XYZ import func
func(sys.argv[1])
</snippet></ROW><ROW><id>2930051</id><snippet>import XYZ
XYZ.func(sys.argv[1])
</snippet></ROW><ROW><id>2930168</id><snippet>&gt;&gt;&gt; from comtypes import client, COMError
&gt;&gt;&gt; myclassinst = client.CreateObject('MyCOMClass.MyCOMClass')
&gt;&gt;&gt; try:
...     myclassinst.DoInvalidOperation()
... except COMError as e:
...     print e.args
...     print e.hresult
...     print e.text
...
(-2147205118, None, (u'MyCOMClass: An Error Message', u'MyCOMClass.MyCOMClass.1', None, 0, None))
-2147205118
None
</snippet></ROW><ROW><id>2930194</id><snippet>ctypes</snippet></ROW><ROW><id>2930208</id><snippet>self.func_list</snippet></ROW><ROW><id>2930208</id><snippet>self.func_list= [('func1','print_func1'),('func2','print_func2')]
</snippet></ROW><ROW><id>2930208</id><snippet>'Func Name'</snippet></ROW><ROW><id>2930208</id><snippet>func[0]</snippet></ROW><ROW><id>2930208</id><snippet>&gt;&gt;&gt; class myStringMethod():
    def __init__(self):
        self.func_list= [('func1','print_func1'),('func2','print_func2')]

    def print_func1(self, name):
        print(name)

    def print_func2(self, name):
        print(name)

    def call_func_by_name(self):
        for func in self.func_list:
            getattr(self, func[1])('Func Name')

&gt;&gt;&gt; myStringMethod().call_func_by_name()
Func Name
Func Name
</snippet></ROW><ROW><id>2930478</id><snippet>Model.kind()</snippet></ROW><ROW><id>2930478</id><snippet>class LargeTextList(db.Model):
    large_text_list = db.ListProperty(item_type=db.Text)
</snippet></ROW><ROW><id>2930478</id><snippet>my_model_instance.kind()</snippet></ROW><ROW><id>2930478</id><snippet>LargeTextList</snippet></ROW><ROW><id>2930478</id><snippet>&lt;p&gt;{{ my_model_instance.properties|escape }}&lt;/p&gt;
</snippet></ROW><ROW><id>2930478</id><snippet>{'large_text_list': &lt;google.appengine.ext.db.ListProperty object at 0x24b1790&gt;}
</snippet></ROW><ROW><id>2930478</id><snippet>properties()</snippet></ROW><ROW><id>2930478</id><snippet>my_model = LargeTextList
</snippet></ROW><ROW><id>2930478</id><snippet>escape</snippet></ROW><ROW><id>2930478</id><snippet>&lt;p&gt;{{ model.properties|escape }}&lt;/p&gt;
</snippet></ROW><ROW><id>2931016</id><snippet>def after(u, v):
    # return sign of cross product
    return u[0]*v[1]&lt;u[1]*v[0]
</snippet></ROW><ROW><id>2931322</id><snippet>&lt;&lt;ListboxSelect&gt;&gt;</snippet></ROW><ROW><id>2931322</id><snippet>&lt;&lt;ListboxSelect&gt;&gt;</snippet></ROW><ROW><id>2931437</id><snippet>request.COOKIES</snippet></ROW><ROW><id>2931437</id><snippet>if request.COOKIES['language'] == 'EN':
    return """&lt;b&gt;%s&lt;/b&gt;""" % "Home" 
</snippet></ROW><ROW><id>2931463</id><snippet># __init__.py
...
application = cherrypy.tree.mount(root, '/', app_conf)
...

# notarequest.py
import myapp
host = myapp.application.config['database']['host']
</snippet></ROW><ROW><id>2931472</id><snippet>import matplotlib.pyplot as plt

xyc = range(20)

plt.subplot(121)
plt.scatter(xyc[:13], xyc[:13], c=xyc[:13], s=35, vmin=0, vmax=20)
plt.colorbar()
plt.xlim(0, 20)
plt.ylim(0, 20)

plt.subplot(122)
plt.scatter(xyc[8:20], xyc[8:20], c=xyc[8:20], s=35, vmin=0, vmax=20)   
plt.colorbar()
plt.xlim(0, 20)
plt.ylim(0, 20)

plt.show()
</snippet></ROW><ROW><id>2931683</id><snippet>my_list = sorted(set(my_list))
</snippet></ROW><ROW><id>2932149</id><snippet>:download:</snippet></ROW><ROW><id>2932320</id><snippet>&gt;&gt;&gt; l = ["Hello", None, "green"]
&gt;&gt;&gt; [(x if x is not None else '') for x in l]
['Hello', '', 'green']
</snippet></ROW><ROW><id>2932320</id><snippet>&gt;&gt;&gt; [x or '' for x in l]
</snippet></ROW><ROW><id>2932454</id><snippet>import cairo
import rsvg

def convert(data, ofile, maxwidth=0, maxheight=0):

    svg = rsvg.Handle(data=data)

    x = width = svg.props.width
    y = height = svg.props.height
    print "actual dims are " + str((width, height))
    print "converting to " + str((maxwidth, maxheight))

    yscale = xscale = 1

    if (maxheight != 0 and width &gt; maxwidth) or (maxheight != 0 and height &gt; maxheight):
        x = maxwidth
        y = float(maxwidth)/float(width) * height
        print "first resize: " + str((x, y))
        if y &gt; maxheight:
            y = maxheight
            x = float(maxheight)/float(height) * width
            print "second resize: " + str((x, y))
        xscale = float(x)/svg.props.width
        yscale = float(y)/svg.props.height

    surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, x, y)
    context = cairo.Context(surface)
    context.scale(xscale, yscale)
    svg.render_cairo(context)
    surface.write_to_png(ofile)
</snippet></ROW><ROW><id>2932477</id><snippet>inspect.getargspec</snippet></ROW><ROW><id>2932477</id><snippet>exec</snippet></ROW><ROW><id>2932539</id><snippet>&gt;&gt;&gt; 'banana'.count('a')
3
</snippet></ROW><ROW><id>2932539</id><snippet>def count_letters(word, char):
  count = 0
  for c in word:
    if char == c:
      count += 1
  return count
</snippet></ROW><ROW><id>2932539</id><snippet>for</snippet></ROW><ROW><id>2932539</id><snippet>def count_letters(word, char):
  count = 0
  for c in word:
    count += (char == c)
  return count
</snippet></ROW><ROW><id>2932539</id><snippet>char</snippet></ROW><ROW><id>2932539</id><snippet>def count_letters(word, char):
  return sum(char == c for c in word)
</snippet></ROW><ROW><id>2932539</id><snippet>char</snippet></ROW><ROW><id>2932539</id><snippet>def count_letters(word, char):
  return len([c for c in word if c == char])
</snippet></ROW><ROW><id>2932658</id><snippet>d = Image.objects.filter(**{'image__endswith': "jpg"})
</snippet></ROW><ROW><id>2932702</id><snippet>win32process.GetThreadTimes</snippet></ROW><ROW><id>2933007</id><snippet>stuff = (f(x) for x in items)</snippet></ROW><ROW><id>2933007</id><snippet>[ .. ]</snippet></ROW><ROW><id>2933007</id><snippet>s = sum((f(x) for x in items))</snippet></ROW><ROW><id>2933007</id><snippet>sum(f(x) for x in items)</snippet></ROW><ROW><id>2933326</id><snippet>minidom</snippet></ROW><ROW><id>2933326</id><snippet>toxml()</snippet></ROW><ROW><id>2933326</id><snippet>document</snippet></ROW><ROW><id>2933326</id><snippet>xml= document.documentElement.toxml('utf-8')
</snippet></ROW><ROW><id>2933326</id><snippet>xml= '\n'.join(node.toxml('utf-8') for node in document.childNodes)
</snippet></ROW><ROW><id>2933326</id><snippet>xml-declaration</snippet></ROW><ROW><id>2933326</id><snippet>pxdom</snippet></ROW><ROW><id>2933423</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>2933423</id><snippet>import thread
import threading

def raw_input_with_timeout(prompt, timeout=30.0):
    print prompt,    
    timer = threading.Timer(timeout, thread.interrupt_main)
    astring = None
    try:
        timer.start()
        astring = raw_input(prompt)
    except KeyboardInterrupt:
        pass
    timer.cancel()
    return astring
</snippet></ROW><ROW><id>2933423</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>2933423</id><snippet>timer.start()</snippet></ROW><ROW><id>2933423</id><snippet>select.select</snippet></ROW><ROW><id>2933423</id><snippet>msvcrt.getche</snippet></ROW><ROW><id>2933423</id><snippet>import msvcrt
import time

def raw_input_with_timeout(prompt, timeout=30.0):
    print prompt,    
    finishat = time.time() + timeout
    result = []
    while True:
        if msvcrt.kbhit():
            result.append(msvcrt.getche())
            if result[-1] == '\r':   # or \n, whatever Win returns;-)
                return ''.join(result)
            time.sleep(0.1)          # just to yield to other processes/threads
        else:
            if time.time() &gt; finishat:
                return None
</snippet></ROW><ROW><id>2933423</id><snippet>return None</snippet></ROW><ROW><id>2933423</id><snippet>return None</snippet></ROW><ROW><id>2933453</id><snippet>PyPy</snippet></ROW><ROW><id>2933481</id><snippet>import sys

thismodule = sys.modules[__name__]

setattr(thismodule, name, value)
</snippet></ROW><ROW><id>2933481</id><snippet>setattr</snippet></ROW><ROW><id>2933481</id><snippet>globals()[name] = value
</snippet></ROW><ROW><id>2933481</id><snippet>vars()[name] = value
</snippet></ROW><ROW><id>2933481</id><snippet>vars()</snippet></ROW><ROW><id>2933610</id><snippet>cat</snippet></ROW><ROW><id>2934172</id><snippet>member = client.factory.create('member')
entry = client.factory.create('attributes')
entry.key="FIRSTNAME"
entry.value="test"
member.attributes.entry.append(entry)
</snippet></ROW><ROW><id>2934172</id><snippet>attributes</snippet></ROW><ROW><id>2934577</id><snippet>class a(object):
    d=4
    def __init__(self):
        print self.c
    def b(self):
        return self.d+1
    c = property(b)

a()
a.c # returns a.b()
</snippet></ROW><ROW><id>2934842</id><snippet>1</snippet></ROW><ROW><id>2934842</id><snippet>0</snippet></ROW><ROW><id>2934842</id><snippet>&gt;&gt;&gt; numbers = [1,2,3,4,5,6,7,8,9,10]
&gt;&gt;&gt; numbers[:1:-2]
[10, 8, 6, 4]
&gt;&gt;&gt; numbers[:0:-2]
[10, 8, 6, 4, 2]
</snippet></ROW><ROW><id>2935000</id><snippet>plt.axis('equal')
</snippet></ROW><ROW><id>2935069</id><snippet>filepath</snippet></ROW><ROW><id>2935069</id><snippet>import os
os.startfile(filepath)
</snippet></ROW><ROW><id>2935069</id><snippet>import wx.lib.iewin as iewin
</snippet></ROW><ROW><id>2935069</id><snippet>__init__()</snippet></ROW><ROW><id>2935069</id><snippet>self.ie = iewin.IEHtmlWindow(self, -1, style =wx.NO_FULL_REPAINT_ON_RESIZE)
</snippet></ROW><ROW><id>2935069</id><snippet>def on_copy(self, event):
   self.selection = self.ie.GetStringSelection(asHTML=False)
</snippet></ROW><ROW><id>2935247</id><snippet>O(n^2)</snippet></ROW><ROW><id>2935247</id><snippet>n</snippet></ROW><ROW><id>2935247</id><snippet>O(n)</snippet></ROW><ROW><id>2935310</id><snippet>[[("id",20,"integer")],
 [("companyname",50,"text")],
 getproducts(),
 ...]
</snippet></ROW><ROW><id>2935310</id><snippet>return sum(column_title_list, [])
</snippet></ROW><ROW><id>2935310</id><snippet>return [("id",20,"integer"),("companyname",50,"text")] + getproducts() + ...
</snippet></ROW><ROW><id>2935578</id><snippet>backend</snippet></ROW><ROW><id>2935578</id><snippet>registration/
    backends/
        default/
        custom/ # &lt;- your new backend
</snippet></ROW><ROW><id>2935578</id><snippet>urls.py</snippet></ROW><ROW><id>2935578</id><snippet>...
{ 'backend': 'registration.backends.custom.DefaultBackend' },
...
</snippet></ROW><ROW><id>2935578</id><snippet>forms.py</snippet></ROW><ROW><id>2935578</id><snippet>custom</snippet></ROW><ROW><id>2935578</id><snippet>registration/urls.py</snippet></ROW><ROW><id>2935578</id><snippet> # from registration.backends.default.urls import *
 from registration.backends.custom.urls import *
</snippet></ROW><ROW><id>2935578</id><snippet>custom/__init__.py</snippet></ROW><ROW><id>2935578</id><snippet>DefaultBackend</snippet></ROW><ROW><id>2935578</id><snippet>get_form_class</snippet></ROW><ROW><id>2935578</id><snippet>def get_form_class(self, request):
    """
    Return the default form class used for user registration.
    """
    return RegistrationForm
</snippet></ROW><ROW><id>2935578</id><snippet>RegistrationForm</snippet></ROW><ROW><id>2935578</id><snippet>from registration.backends.custom.forms import RegistrationForm
</snippet></ROW><ROW><id>2935678</id><snippet>pixarray = (ctypes.c_int * (w_px * h_px))()
</snippet></ROW><ROW><id>2935678</id><snippet># dylib in MacOSX, cdll.wincrt in Win, libc.so.? in Unix, ...
clib = ctypes.CDLL('libc.dylib')

_ = clib.memcpy(pixarray, im.tostring(), w_px * h_px * 4)
</snippet></ROW><ROW><id>2935678</id><snippet>clib</snippet></ROW><ROW><id>2935678</id><snippet>_ = ctypes.memmove(pixarray, im.tostring(), w_px * h_px * 4)
</snippet></ROW><ROW><id>2935713</id><snippet>html = urllib2.urlopen(url).read()
bs = BeautifulSoup(html)
table = bs.find(lambda tag: tag.name=='table' and tag.has_key('id') and tag['id']=="Table1") 
rows = table.findAll(lambda tag: tag.name=='tr')
</snippet></ROW><ROW><id>2935727</id><snippet>creationflags</snippet></ROW><ROW><id>2935727</id><snippet>CREATE_NO_WINDOW
0x08000000
</snippet></ROW><ROW><id>2935727</id><snippet>creationflags=0x08000000</snippet></ROW><ROW><id>2935727</id><snippet>Popen</snippet></ROW><ROW><id>2936066</id><snippet>execfile("file.py")
</snippet></ROW><ROW><id>2936108</id><snippet>#!/usr/bin/env python

from multiprocessing.connection import Listener, Client
import socket
from array import array
from sys import argv

def myloop(address):
    try:
        listener = Listener(*address)
        conn = listener.accept()
        serve(conn)
    except socket.error, e:
        conn = Client(*address)
        conn.send('this is a client')
        conn.send('close')

def serve(conn):
    while True:
        msg = conn.recv()
        if msg.upper() == 'CLOSE':
            break
        print msg
    conn.close()

if __name__ == '__main__':
    address = ('/tmp/testipc', 'AF_UNIX')
    myloop(address)
</snippet></ROW><ROW><id>2936189</id><snippet>re.split</snippet></ROW><ROW><id>2936189</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split('\W+', 'Words, words, words.')
['Words', 'words', 'words', '']
</snippet></ROW><ROW><id>2936189</id><snippet>&gt;&gt;&gt; # \xe2\x80\x93 represents a long dash (or long minus)
&gt;&gt;&gt; s = 'hello – world'
&gt;&gt;&gt; s
'hello \xe2\x80\x93 world'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split("\xe2\x80\x93", s)
['hello ', ' world']
</snippet></ROW><ROW><id>2936189</id><snippet>&gt;&gt;&gt; # \u2013 represents a long dash, long minus or so called en-dash
&gt;&gt;&gt; s = u'hello – world'
&gt;&gt;&gt; s
u'hello \u2013 world'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split(u"\u2013", s)
[u'hello ', u' world']
</snippet></ROW><ROW><id>2936207</id><snippet>    output = StringIO.StringIO()

    try:
        client.convertURI("example.com", output)
        Report.pdf = db.Blob(output.getvalue())
        Report.put()  
    except pdfcrowd.Error, why:
        logging.error('PDF creation failed %s' % why)
</snippet></ROW><ROW><id>2936843</id><snippet>from multiprocessing import Process, Manager

def f(d):
    for i in range(10000):
        d['blah'] += 1

if __name__ == '__main__':
    manager = Manager()

    d = manager.dict()
    d['blah'] = 0
    procs = [ Process(target=f, args=(d,)) for _ in range(10) ]
    for p in procs:
        p.start()
    for p in procs:
        p.join()

    print d
</snippet></ROW><ROW><id>2936843</id><snippet>d</snippet></ROW><ROW><id>2936843</id><snippet>100000</snippet></ROW><ROW><id>2936843</id><snippet>manager.dict()</snippet></ROW><ROW><id>2936859</id><snippet>itertools.groupby</snippet></ROW><ROW><id>2936859</id><snippet>&gt;&gt;&gt; x = [-3,2,7,-4,1,-1,1,6,-1,0,-2,1] 

&gt;&gt;&gt; import itertools
&gt;&gt;&gt; len(list(itertools.groupby(x, lambda x: x &gt; 0)))
</snippet></ROW><ROW><id>2936859</id><snippet>8
</snippet></ROW><ROW><id>2936859</id><snippet>&gt;&gt;&gt; len(list(itertools.groupby(x, lambda x: x &gt; 0))) - (x[0] &gt; 0)
</snippet></ROW><ROW><id>2936859</id><snippet>&gt;&gt;&gt; len(list(itertools.groupby(itertools.chain([1], x), lambda x: x &gt; 0))) - 1
</snippet></ROW><ROW><id>2936876</id><snippet>__getitem__()</snippet></ROW><ROW><id>2936876</id><snippet>slice</snippet></ROW><ROW><id>2936876</id><snippet>start</snippet></ROW><ROW><id>2936876</id><snippet>stop</snippet></ROW><ROW><id>2936876</id><snippet>step</snippet></ROW><ROW><id>2936876</id><snippet>slice</snippet></ROW><ROW><id>2936876</id><snippet>&gt;&gt;&gt; class C(object):
...   def __getitem__(self, val):
...     print val
... 
&gt;&gt;&gt; c = C()
&gt;&gt;&gt; c[3]
3
&gt;&gt;&gt; c[3:4]
slice(3, 4, None)
&gt;&gt;&gt; c[3:4:-2]
slice(3, 4, -2)
&gt;&gt;&gt; c[():1j:'a']
slice((), 1j, 'a')
</snippet></ROW><ROW><id>2936921</id><snippet>sys.path</snippet></ROW><ROW><id>2936921</id><snippet>os.environ['DJANGO_SETTINGS_MODULE']</snippet></ROW><ROW><id>2936921</id><snippet>import sys
import os
sys.path.append("/path/to/parent") # under which myproject is hosted
os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'
import myproject.myapp.models # or whatever
</snippet></ROW><ROW><id>2936955</id><snippet>os.walk</snippet></ROW><ROW><id>2936955</id><snippet>#!/usr/bin/env python

import os
for root, dirs, files in os.walk('notes'):
    print root, dirs, files
</snippet></ROW><ROW><id>2936955</id><snippet>import os
from os.path import isdir, join

def cats_and_subs(root='notes'):
    """
    Collect categories and subcategories.
    """
    categories = filter(lambda d: isdir(join(root, d)), os.listdir(root))
    sub_categories = []
    for c in categories:
        sub_categories += filter(lambda d: isdir(join(root, c, d)), 
            os.listdir(join(root, c)))

    # categories and sub_categories are arrays,
    # categories would hold stuff like 'science', 'maths'
    # sub_categories would contain 'Quantum Mechanics', 'Linear Algebra', ...
    return (categories, sub_categories)

if __name__ == '__main__':
    print cats_and_subs(root='/path/to/your/notes')
</snippet></ROW><ROW><id>2937170</id><snippet>from django.conf import settings
def my_view(request):
    # view logic
    context = {
            'STATIC_URL': settings.STATIC_URL,
            # other template variables here
    }
    # render the template and produce a response
</snippet></ROW><ROW><id>2937233</id><snippet>desert_rustle.wav</snippet></ROW><ROW><id>2937233</id><snippet>.wav</snippet></ROW><ROW><id>2937233</id><snippet>open</snippet></ROW><ROW><id>2937233</id><snippet>start</snippet></ROW><ROW><id>2937233</id><snippet>.wav</snippet></ROW><ROW><id>2937417</id><snippet>class DerivedData(object):
    def __init__(self):
        self.qty1 = 0.0
        self.qty2 = 0.0
        self.combo = 0.0
        self.max = 0.0
        self.peak = Peak(time_point=0.0, qty1=0.0, qty2=0.0)

    def accumulate(self, data):
        self.qty1 += data.qty1
        self.qty2 += data.qty2
        self.combo = self.qty1 + self.qty2
        if self.combo &gt; self.max:
            self.max = self.combo
            self.peak = Peak(time_point=data.time_point,
                             qty1=self.qty1,
                             qty2=self.qty2)

sys = DerivedData()
clusters = defaultdict(DerivedData)
nodes = defaultdict(DerivedData)

dataset.sort(key=operator.attrgetter('time_point'))

for t in dataset:
    sys.accumulate(t)
    clusters[t.cluster].accumulate(t)
    nodes[t.node].accumulate(t)
</snippet></ROW><ROW><id>2937614</id><snippet>csv.writerow()</snippet></ROW><ROW><id>2937614</id><snippet>import csv
cot=csv.writer(open('file.csv','wb'))

tmp=[['','Project 1','Project 2','Project 3'],
     ['Student1','','2','1'],
     ['Student2','1','2','3'],
     ['Student3','1','3','2']]
for t in tmp:
    cot.writerow(t)
</snippet></ROW><ROW><id>2937630</id><snippet>numpy</snippet></ROW><ROW><id>2937630</id><snippet>multiprocessing</snippet></ROW><ROW><id>2937665</id><snippet>setattr</snippet></ROW><ROW><id>2937665</id><snippet>f = Foobar.objects.get(id=1)
foo = 'somefield'
bar = 'somevalue'
setattr(f, foo, bar) # f.foo=bar
f.save()
</snippet></ROW><ROW><id>2937665</id><snippet>setattr</snippet></ROW><ROW><id>2937665</id><snippet>getattr()</snippet></ROW><ROW><id>2937878</id><snippet>&lt;another-language&gt;</snippet></ROW><ROW><id>2937878</id><snippet>list</snippet></ROW><ROW><id>2937878</id><snippet>collections.deque</snippet></ROW><ROW><id>2937878</id><snippet>set</snippet></ROW><ROW><id>2937878</id><snippet>frozenset</snippet></ROW><ROW><id>2937878</id><snippet>collections.Counter</snippet></ROW><ROW><id>2937878</id><snippet>dict</snippet></ROW><ROW><id>2937878</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>2937878</id><snippet>bytes</snippet></ROW><ROW><id>2937878</id><snippet>bytearray</snippet></ROW><ROW><id>2937878</id><snippet>array.array</snippet></ROW><ROW><id>2937878</id><snippet>dict</snippet></ROW><ROW><id>2937878</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>2938938</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; j = '{"#foo": 6}'
&gt;&gt;&gt; print json.loads(j)
{u'#foo': 6}
&gt;&gt;&gt; print json.loads(j)[u'#foo']
6
&gt;&gt;&gt; print json.loads(j)['#foo']
6
</snippet></ROW><ROW><id>2939300</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>2939300</id><snippet>&gt;&gt;&gt; 5 / 3
1
&gt;&gt;&gt; isinstance(5 / 3, int)
True
</snippet></ROW><ROW><id>2939300</id><snippet>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; int(5/3)
1
</snippet></ROW></DATA>