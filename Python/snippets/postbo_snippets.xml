<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>9545177</id><snippet>&gt;&gt;&gt; arr =[[0, 2, 3],
          [2, 0, 4],
          [3, 4, 0]]
&gt;&gt;&gt; dict(((j,i), arr[i][j]) for i in range(len(arr)) for j in range(len(arr[0])) if i&lt;j)
{(2, 0): 3, (1, 0): 2, (2, 1): 4}
</snippet></ROW><ROW><id>9545874</id><snippet>u</snippet></ROW><ROW><id>9545874</id><snippet>&gt;&gt;&gt; m = u'Šiven'
&gt;&gt;&gt; print(m)
Šiven
&gt;&gt;&gt; m.encode('utf-8') # Get the corresponding UTF-8 bytestring
'\xc5\xa0iven'
</snippet></ROW><ROW><id>9545874</id><snippet>&gt;&gt;&gt; m = u'\u0160iven'
&gt;&gt;&gt; print(m)
Šiven
&gt;&gt;&gt; m.encode('utf-8')
'\xc5\xa0iven'
</snippet></ROW><ROW><id>9545874</id><snippet># -*- coding: utf-8 -*-
</snippet></ROW><ROW><id>9546906</id><snippet>#django.db.fields.__init__.py

class EmailField(CharField):
    default_validators = [validators.validate_email]
    description = _("E-mail address")

    def __init__(self, *args, **kwargs):
        kwargs['max_length'] = kwargs.get('max_length', 75)
        CharField.__init__(self, *args, **kwargs)

    def formfield(self, **kwargs):
        # As with CharField, this will cause email validation to be performed
        # twice.
        defaults = {
            'form_class': forms.EmailField,
        }
        defaults.update(kwargs)
        return super(EmailField, self).formfield(**defaults)
</snippet></ROW><ROW><id>9546906</id><snippet>#django.forms.fields.py
class EmailField(CharField):
    default_error_messages = {
        'invalid': _(u'Enter a valid e-mail address.'),
    }
    default_validators = [validators.validate_email]

    def clean(self, value):
        value = self.to_python(value).strip()
        return super(EmailField, self).clean(value)
</snippet></ROW><ROW><id>9547036</id><snippet>bar</snippet></ROW><ROW><id>9547036</id><snippet>timeit</snippet></ROW><ROW><id>9547066</id><snippet>__call__</snippet></ROW><ROW><id>9547066</id><snippet>__getattr__</snippet></ROW><ROW><id>9547066</id><snippet>class Dummy(object):
  def __init__(self, klass, path):
    self.klass = klass
    self.path = path

  def __getattr__(self, attr):
    return Dummy(self.klass, self.path + [attr])

  def __call__(self, *args, **kw):
    self.klass._dummy_func(self.path, *args, **kw)

class Klass(object):
  def __getattr__(self, attr):
    return Dummy(self, [attr])

  def _dummy_func(self, path, *args, **kw):
    print "Dummy function %s called with %d arguments!" \
                      % ('.'.join(path), len(args))

Klass().foo.bar.func(1, 2)  
# =&gt; "Dummy function foo.bar.func called with 2 arguments!"
</snippet></ROW><ROW><id>9547066</id><snippet>_dummy_func</snippet></ROW><ROW><id>9547301</id><snippet>json.dumps()</snippet></ROW><ROW><id>9547301</id><snippet>var data = "{{ data|safe }}"</snippet></ROW><ROW><id>9547549</id><snippet>element = browser.find_elements_by_xpath("//div[@style='visibility: visible; display: block;']/iframe[@style='height: 600px;']")
</snippet></ROW><ROW><id>9547549</id><snippet>iframe=element[0]
</snippet></ROW><ROW><id>9547549</id><snippet>iframe_content = iframe.text
</snippet></ROW><ROW><id>9547549</id><snippet>element = browser.find_element_by_xpath("//div[@style='visibility: visible; display: block;']/iframe[1]")
</snippet></ROW><ROW><id>9547667</id><snippet>MyUser.friends.append(Friend(MyUser.id, MyFriend.id))
</snippet></ROW><ROW><id>9547667</id><snippet>association_table = db.Table('association',
    db.Column('user_id', db.Integer, db.ForeignKey('user.id')),
    db.Column('friend_id', db.Integer, db.ForeignKey('user.id'))
)
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), unique=True)
    password = db.Column(db.String(30))
    email = db.Column(db.String(45), unique=True)
    friends = db.relationship("User",
                secondary=association_table,
                backref='added_by',
                primaryjoin=id == association_table.c.user_id,
                secondaryjoin=id == association_table.c.friend_id)
</snippet></ROW><ROW><id>9547667</id><snippet>&gt;&gt;&gt; user1 = User.query.filter_by(id=1).first()
&gt;&gt;&gt; user1.friends
[]
&gt;&gt;&gt; user2 = User.query.filter_by(id=2).first()
&gt;&gt;&gt; user1.friends.append(user2)
&gt;&gt;&gt; user1.friends
[&lt;User('user1','user1@admin.com','2')&gt;]
&gt;&gt;&gt; user1.friends[0].added_by
[&lt;User('admin','admin@admin.com','1')&gt;]
</snippet></ROW><ROW><id>9547674</id><snippet>import os
from subprocess import check_call

cmd = 'echo *' # some shell command that may have `*`
for dirname in filter(os.path.isdir, os.listdir(os.curdir)):
    check_call(cmd, shell=True, cwd=dirname)
</snippet></ROW><ROW><id>9547674</id><snippet>filter(os.path.isdir, os.listdir(os.curdir))</snippet></ROW><ROW><id>9547674</id><snippet>.</snippet></ROW><ROW><id>9547674</id><snippet>shell=True</snippet></ROW><ROW><id>9547674</id><snippet>cmd</snippet></ROW><ROW><id>9547674</id><snippet>*</snippet></ROW><ROW><id>9547674</id><snippet>cwd=dirname</snippet></ROW><ROW><id>9547674</id><snippet>dirname</snippet></ROW><ROW><id>9547831</id><snippet>addTest</snippet></ROW><ROW><id>9547831</id><snippet>TestCase</snippet></ROW><ROW><id>9547831</id><snippet>TestSuite</snippet></ROW><ROW><id>9547831</id><snippet>baseFunctions.py</snippet></ROW><ROW><id>9547831</id><snippet>TestCase</snippet></ROW><ROW><id>9547831</id><snippet>import unittest
from baseFunctions import MyTestCase

suite = unittest.TestSuite()
suite.addTest(MyTestCase)
unittest.TextTestRunner().run(suite)
</snippet></ROW><ROW><id>9547874</id><snippet>__dict__, __doc__, __module__, ...</snippet></ROW><ROW><id>9547874</id><snippet>dir</snippet></ROW><ROW><id>9547874</id><snippet>__dict__</snippet></ROW><ROW><id>9547874</id><snippet>class A:
    def __init__(self):
        self.prop = 1

a = A()
for attr, value in a.__dict__.items():
    print(attr, value)
</snippet></ROW><ROW><id>9547874</id><snippet>prop</snippet></ROW><ROW><id>9547874</id><snippet>self.prop = 1</snippet></ROW><ROW><id>9547874</id><snippet>for attr, value in A.__dict__.items():
</snippet></ROW><ROW><id>9547874</id><snippet>prop</snippet></ROW><ROW><id>9547928</id><snippet>bb = np.empty((b.size, 21), dtype=int)
for i,v in enumerate(b):
    bb[i] = v+np.arange(-10,11)

np.delete(a, bb.flat)  # looks like .flat is optional
</snippet></ROW><ROW><id>9547962</id><snippet>multiprocessing</snippet></ROW><ROW><id>9547962</id><snippet>send_message</snippet></ROW><ROW><id>9547962</id><snippet>get()</snippet></ROW><ROW><id>9547962</id><snippet>put()</snippet></ROW><ROW><id>9548039</id><snippet>®</snippet></ROW><ROW><id>9548039</id><snippet>A9</snippet></ROW><ROW><id>9548039</id><snippet>'\xa9'</snippet></ROW><ROW><id>9548281</id><snippet>r''</snippet></ROW><ROW><id>9548281</id><snippet>\</snippet></ROW><ROW><id>9548281</id><snippet>re.sub(r'(?Pe\^{\\left()(?P.*)(?P\\right)})','e\^{\\g}',string)
</snippet></ROW><ROW><id>9548281</id><snippet>r''</snippet></ROW><ROW><id>9548281</id><snippet>    re.sub('(?Pe\\^{\\\\left()(?P.*)(?P\\\\right)})','e\\^{\\\\g}',string)
</snippet></ROW><ROW><id>9548281</id><snippet>^</snippet></ROW><ROW><id>9548586</id><snippet>now</snippet></ROW><ROW><id>9548586</id><snippet>c.execute("SELECT date('now');")</snippet></ROW><ROW><id>9548733</id><snippet>import re

start_tag =    '(\[{tagname}:[^\]]+\])'
end_tag = start_tag.replace('\[', '\[\/', 1)
content = '((?:.|\n)*?)' # The ?: indicates a non-capturing group.                                                                                             
tag = start_tag + content + end_tag

ddf_tag=tag.format(tagname='ddf2k12')

for match in re.findall(ddf_tag, post):
    print match
</snippet></ROW><ROW><id>9549018</id><snippet>#capture the nearby zips in a new dict
near_zips={}
for x in matched: 
    longRad1= getLongRad(matched[x]['longitude']) 
    latRad1= getLatRad(matched[x]['latitude']) 
    dlon = longRad2 - longRad1  
    dlat = latRad2 - latRad1 
    a = math.sin(dlat/2)**2 + math.cos(latRad1) * math.cos(latRad2) * math.sin(dlon/2)**2 
    c = 2 * math.asin(math.sqrt(a))  
    m = 3960 * c 
    if m &lt;thresh: # cant figure out how to return zipcodes instead of m value 
        #add the nearby zipcodes to the dict
        print '%f &lt; %f' % (m,thresh)
        print 'adding %s to near_zips' % (x,)
        near_zips[x] = matched[x]

#return the nearby zips
return near_zips        
</snippet></ROW><ROW><id>9549021</id><snippet>type(a)</snippet></ROW><ROW><id>9549021</id><snippet>a.__class__</snippet></ROW><ROW><id>9549021</id><snippet>type(a)</snippet></ROW><ROW><id>9549021</id><snippet>types.InstanceType</snippet></ROW><ROW><id>9549021</id><snippet>object</snippet></ROW><ROW><id>9549204</id><snippet>for i in range(len(job_IDs)):
    print "Job {item:15} {value[0]:&gt;6}.{value[1]:&lt;6} {units:3}".format(item=job_IDs[i]+':', value=memory_used[i].split('.') if '.' in memory_used[i] else (memory_used[i], '0'), units=memory_units[i])
</snippet></ROW><ROW><id>9549204</id><snippet>value=memory_used[i].split('.') if '.' in memory_used[i] else (memory_used[i], '0')</snippet></ROW><ROW><id>9549204</id><snippet>{value[0]:&gt;6}.{value[1]:&lt;6}</snippet></ROW><ROW><id>9549204</id><snippet>Job 13453:              30.0      MB
Job 123:               150.54     GB
Job 563456:             20.6      MB
</snippet></ROW><ROW><id>9549421</id><snippet>loc1 = [[0.0] * ncols] * nrows
</snippet></ROW><ROW><id>9549421</id><snippet>[0.0] * ncols</snippet></ROW><ROW><id>9549421</id><snippet>loc1 = [[0.0 for y in range(ncols)] for x in range(nrows)]
</snippet></ROW><ROW><id>9549516</id><snippet>with open(inputfile, 'r') as f:
    names = set([line.strip() for line in f])
</snippet></ROW><ROW><id>9549516</id><snippet>outputlist = []

with open(datafile, 'r') as f:
    for line in f:
        name = line.split(',')[0]
        # The string slicing is to remove the "" that surrounds the name.
        if name[1:-1] in names:
            outputlist.append(line)
</snippet></ROW><ROW><id>9549589</id><snippet>attachment</snippet></ROW><ROW><id>9549589</id><snippet>file</snippet></ROW><ROW><id>9549589</id><snippet>name</snippet></ROW><ROW><id>9549589</id><snippet>name</snippet></ROW><ROW><id>9549589</id><snippet>def test_stuff(self): 
    myfile = open('....\file.csv','r') 
    response = self.client.post('/', {'file':myfile})
</snippet></ROW><ROW><id>9549685</id><snippet>dateutil</snippet></ROW><ROW><id>9549685</id><snippet>import dateutil.relativedelta as rd
import datetime

last_monday = datetime.date.today() + rd.relativedelta(weekday=rd.MO(-1))
</snippet></ROW><ROW><id>9550337</id><snippet>bottle</snippet></ROW><ROW><id>9550337</id><snippet>web.py</snippet></ROW><ROW><id>9550337</id><snippet>&lt;script type="text/javascript"&gt;

jQuery(document).ready(function() {

    jQuery("input ").click(function() {

        // this captures passes back the value of the button that was clicked.
        var input_string = jQuery(this).val();
        alert ( "input: " + input_string );

        jQuery.ajax({
            type: "POST",
            url: "/myapp/",
            data: {button_choice: input_string},
        });
    });
});

&lt;/script&gt;
</snippet></ROW><ROW><id>9550337</id><snippet>urls = ( '/', 'broker',)
render = web.template.render('/opt/local/apache2/wsgi-scripts/templates/')

application = web.application(urls, globals()).wsgifunc()

class broker:
    def GET(self):
        # here is where you will setup search engine queries, fetch the results 
        # and display them

        queries_to_execute = ...
        return str(queries_to_execute)
    def POST(self):
        # the POST will handle values passed back by jQuery AJAX

        input_data = web.input()

        try:
            print "input_data['button_choice'] : ", input_data['button_choice']
            button_chosen = input_data['button_choice']
        except KeyError:
            print 'bad Key'


        # update the database with the user input in the variable button_chosen

        driver = "{MySQL ODBC 5.1 Driver}"
        server = "localhost"
        database = "your_database" 
        table = "your_table"

        conn_str = 'DRIVER=%s;SERVER=%s;DATABASE=%s;UID=%s;PWD=%s' % ( driver, server, database, uid, pwd ) 

        cnxn = pyodbc.connect(conn_str)

        cursor = cnxn.cursor()

        # you need to put some thought into properly update your table to avoid race conditions
        update_string = "UPDATE your_table SET count='%s' WHERE search_engine='%s' "

        cursor.execute(update_string % (new_value ,which_search_engine)
        cnxn.commit()
</snippet></ROW><ROW><id>9550596</id><snippet>def __setattr__(self, name, value):
    super(MyStore, self).__setattr__(name, value)
    self._data[name] = value
</snippet></ROW><ROW><id>9550596</id><snippet>dict</snippet></ROW><ROW><id>9550596</id><snippet>class MyStore(dict):

    def __init__(self, data):
        for d in data:
            self[d] = d.upper()

    def __getattr__(self, name):
        return self[name]

    def __setattr__(self, name, value):
        self[name] = value

store = MyStore(['foo', 'bar', 'spam', 'eggs'])
print "Store items:", [item for item in store]
print "Number of items:", len(store)
print "Get item:", store['foo']
print "Get attribute:", store.foo
print "'foo' is in store:", 'foo' in store
store.qux = 'QUX'
print "Get qux item:", store['qux']
print "Get qux attribute:", store.qux
print "'qux' is in store:", 'qux' in store
</snippet></ROW><ROW><id>9550596</id><snippet>Store items: ['eggs', 'foo', 'bar', 'spam']
Number of items: 4
Get item: FOO
Get attribute: FOO
'foo' is in store: True
Get qux item: QUX
Get qux attribute: QUX
'qux' is in store: True
</snippet></ROW><ROW><id>9550719</id><snippet>import glob
paths = glob.glob(r'/v/mybooks.com/*/mbo[1-9]')
</snippet></ROW><ROW><id>9550982</id><snippet>None</snippet></ROW><ROW><id>9550982</id><snippet>class Review(models.Model):
    name = models.CharField(max_length=1024)
    text = models.TextField()
    author = models.ForeignKey(UserProfile)
    place = models.ForeignKey(place)

    price_rating = models.IntegerField(null=True)
    location_rating = models.IntegerField(null=True)
    # ...
</snippet></ROW><ROW><id>9550982</id><snippet>_rating</snippet></ROW><ROW><id>9550982</id><snippet>class ReviewAttribute(models.Model):
    review = models.ForeignKey(Review, related_name='attributes')
    name = models.CharField(max_length=100)
    value = models.IntegerField()
</snippet></ROW><ROW><id>9551000</id><snippet>from datetime import datetime

date = datetime.strptime("March 2 2012", '%B %d %Y').date()
</snippet></ROW><ROW><id>9551068</id><snippet>rows=['Y']</snippet></ROW><ROW><id>9551068</id><snippet>rows=['X2']</snippet></ROW><ROW><id>9551068</id><snippet>&gt;&gt;&gt; print pivot_table(df,rows=['X2'], cols=['X'],aggfunc=np.sum)
      Y                                        
X     1    2    3    4    5    6    7    8    9
X2                                             
1   101  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN
2   NaN  102  NaN  NaN  NaN  NaN  NaN  NaN  NaN
3   NaN  NaN  103  NaN  NaN  NaN  NaN  NaN  NaN
4   NaN  NaN  NaN  104  NaN  NaN  NaN  NaN  NaN
5   NaN  NaN  NaN  NaN  105  NaN  NaN  NaN  NaN
6   NaN  NaN  NaN  NaN  NaN  106  NaN  NaN  NaN
7   NaN  NaN  NaN  NaN  NaN  NaN  107  NaN  NaN
8   NaN  NaN  NaN  NaN  NaN  NaN  NaN  108  NaN
9   NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  109
</snippet></ROW><ROW><id>9551123</id><snippet>fget = lambda x, f=func: f(x.z)
</snippet></ROW><ROW><id>9551325</id><snippet>LC_ALL=sv_SE.UTF-8 sort</snippet></ROW><ROW><id>9551325</id><snippet>locale-gen sv_SE.UTF-8</snippet></ROW><ROW><id>9551492</id><snippet>def get_subarray(c, samples, veclens):
    n = len(veclens)
    d = c.reshape(veclens+[n])
    i = numpy.ix_(*[range(0, l, s) for l,s in zip(veclens,samples)]
    return d[i].reshape((-1,n)
</snippet></ROW><ROW><id>9551570</id><snippet>time.struct_time</snippet></ROW><ROW><id>9551570</id><snippet>In [58]: time.struct_time((2000,11,30,0,0,0,3,335,-1))
Out[58]: time.struct_time(tm_year=2000, tm_mon=11, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=335, tm_isdst=-1)
</snippet></ROW><ROW><id>9551570</id><snippet>tm_yday = 100</snippet></ROW><ROW><id>9551570</id><snippet>In [72]: time.struct_time((2000,1,1,0,0,0,3,100,-1))
Out[72]: time.struct_time(tm_year=2000, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=100, tm_isdst=-1)
</snippet></ROW><ROW><id>9551570</id><snippet>In [70]: import datetime as dt

In [71]: dt.datetime(2000,11,30,0,0,0).timetuple()
Out[71]: time.struct_time(tm_year=2000, tm_mon=11, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=335, tm_isdst=-1)
</snippet></ROW><ROW><id>9551847</id><snippet>job_IDs = ['13453', '123', '563456'];
memory_used = ['30', '150.54', '20.6'];
memory_units = ['MB', 'GB', 'MB'];

w1=15
w2=6
w3=6
w4=3
for i in range(len(job_IDs)):
    v=memory_used[i].split('.') if '.' in memory_used[i] else  (memory_used[i], '0')

    print "Job {item:{w1}} {value[0]:&gt;{w2}}.{value[1]:&lt;{w3}} {units:{w4}}".format(
       item=job_IDs[i]+':', w1=w1, w2=w2,w3=w3,w4=w4, value=v, units=memory_units[i])
</snippet></ROW><ROW><id>9551847</id><snippet>job_IDs = ['13453', '123', '563456'];
memory_used = ['30', '150.54', '20.6'];
memory_units = ['MB', 'GB', 'MB'];

w1=1
w2=1
w3=1
w4=1
for i in range(len(job_IDs)):
    v=memory_used[i].split('.') if '.' in memory_used[i] else  (memory_used[i], '0')
    item=job_IDs[i]+':'
    units=memory_units[i]
    if len(item)&gt;w1: w1=len(item)
    if len(v[0])&gt;w2: w2=len(v[0])
    if len(v[1])&gt;w3: w3=len(v[1])
    if len(units)&gt;w4: w3=len(units)

for i in range(len(job_IDs)):
    v=memory_used[i].split('.') if '.' in memory_used[i] else  (memory_used[i], '0')
    item=job_IDs[i]+':'
    units=memory_units[i]    
    print "Job {item:{w1}} {value[0]:&gt;{w2}}.{value[1]:&lt;{w3}} {units:{w4}}".format(
      item=item,w1=w1, w2=w2,w3=w3,w4=w4, value=v, units=units)
</snippet></ROW><ROW><id>9551847</id><snippet>Job 13453:   30.0  MB
Job 123:    150.54 GB
Job 563456:  20.6  MB
</snippet></ROW><ROW><id>9552028</id><snippet>a = [['A',True], ['B',True], ['C',True], ['D',True], ['E',True]]

def show(index):
    a[index][1] = True

def hide(index):
    a[index][1] = False

def display():
    print([x[0] for x in a if x[1]])
</snippet></ROW><ROW><id>9552244</id><snippet>1+(1j.imag)</snippet></ROW><ROW><id>9552609</id><snippet>blob1.dx.start &gt; blob2.dx.start and blob1.dy.start &gt; blob2.dy.start and blob1.dx.stop &lt; blob2.dx.stop and blob1.dy.stop &lt; blob2.dy.stop</snippet></ROW><ROW><id>9552653</id><snippet>\g&lt;1&gt;</snippet></ROW><ROW><id>9552653</id><snippet>\2</snippet></ROW><ROW><id>9552653</id><snippet>9</snippet></ROW><ROW><id>9552653</id><snippet>(?:\2)9</snippet></ROW><ROW><id>9552653</id><snippet>\2{1}9</snippet></ROW><ROW><id>9552653</id><snippet>\2[9]</snippet></ROW><ROW><id>9552702</id><snippet>__dict__</snippet></ROW><ROW><id>9552702</id><snippet>__dict__</snippet></ROW><ROW><id>9552702</id><snippet>__class__</snippet></ROW><ROW><id>9552702</id><snippet>__getattr__</snippet></ROW><ROW><id>9552702</id><snippet>__dict__</snippet></ROW><ROW><id>9552702</id><snippet>__getattr__</snippet></ROW><ROW><id>9552702</id><snippet>__getitem__</snippet></ROW><ROW><id>9552702</id><snippet>__getattr__</snippet></ROW><ROW><id>9553420</id><snippet>def is_triangle(a, b, c):
    if (a &gt; b + c) or (b &gt; a + c) or (c &gt; a + b):
        print "No"
    else:
        print "Yes"
</snippet></ROW><ROW><id>9553465</id><snippet>%edit</snippet></ROW><ROW><id>9553465</id><snippet>$EDITOR</snippet></ROW><ROW><id>9553600</id><snippet>&gt;&gt;&gt; while Gtk.events_pending(): Gtk.main_iteration()
</snippet></ROW><ROW><id>9553600</id><snippet>pdb.set_trace</snippet></ROW><ROW><id>9553668</id><snippet>[(i, colour.index(c))
 for i, colour in enumerate(colours)
 if c in colour]
</snippet></ROW><ROW><id>9553668</id><snippet>c</snippet></ROW><ROW><id>9553668</id><snippet>"#660000"</snippet></ROW><ROW><id>9553668</id><snippet>[(0, 0)]
</snippet></ROW><ROW><id>9553668</id><snippet>next(((i, colour.index(c))
      for i, colour in enumerate(colours)
      if c in colour),
     None)
</snippet></ROW><ROW><id>9553668</id><snippet>None</snippet></ROW><ROW><id>9553668</id><snippet>None</snippet></ROW><ROW><id>9553668</id><snippet>StopIteration</snippet></ROW><ROW><id>9553668</id><snippet>colour</snippet></ROW><ROW><id>9553668</id><snippet>c</snippet></ROW><ROW><id>9553668</id><snippet>def find(c):
    for i, colour in enumerate(colours):
        try:
            j = colour.index(c)
        except ValueError:
            continue
        yield i, j

matches = [match for match in find('#660000')]
</snippet></ROW><ROW><id>9553668</id><snippet>find</snippet></ROW><ROW><id>9553668</id><snippet>next</snippet></ROW><ROW><id>9553883</id><snippet>from xml.etree.ElementTree import ElementTree
doc = ElementTree(file='myfile.xml')

for e in doc.findall('/Hit_accession'):
    print e.get('Hsp_qseq').text
</snippet></ROW><ROW><id>9554023</id><snippet>os.path.join(os.path.dirname(sys.executable), relativename))
</snippet></ROW><ROW><id>9554023</id><snippet>os.path.join(os.environ["_MEIPASS2"], relativename))
</snippet></ROW><ROW><id>9554023</id><snippet>fd = open('myfilename.tga', 'rb')
</snippet></ROW><ROW><id>9554023</id><snippet>--onefile</snippet></ROW><ROW><id>9554023</id><snippet>import os
filename = 'myfilename.tga' 
if '_MEIPASS2' in os.environ:
    filename = os.path.join(os.environ['_MEIPASS2'], filenamen))
fd = open(filename, 'rb')
</snippet></ROW><ROW><id>9554023</id><snippet>--onedir</snippet></ROW><ROW><id>9554023</id><snippet>import os, sys
filename = os.path.join(os.path.dirname(sys.executable), 'myfilename.tga'))
fd = open(filename, 'rb')
</snippet></ROW><ROW><id>9554584</id><snippet>[]</snippet></ROW><ROW><id>9554584</id><snippet>'x'</snippet></ROW><ROW><id>9554584</id><snippet>x = [[] for _ in range(4)]
</snippet></ROW><ROW><id>9554621</id><snippet>wx.ListCtrl.GetColumnCount()</snippet></ROW><ROW><id>9554621</id><snippet>wx.ListCtrl.GetItemCount()</snippet></ROW><ROW><id>9554635</id><snippet>eventdate</snippet></ROW><ROW><id>9554635</id><snippet>from datetime import datetime
from django.contrib import admin

class eventInline(admin.TabularInline):
    def queryset(self, request):
        qs = super(eventInline, self).queryset(request)
        return qs.filter(eventdate__gte=datetime.now)
    model = event
    extra = 1

class VenueAdmin(admin.ModelAdmin):
   inlines = [eventInline,]
</snippet></ROW><ROW><id>9554660</id><snippet>#define your database structure
from google.appengine.ext import db

class PdfStorage(db.Model): 
   timeAdded = db.DateTimeProperty(auto_now_add=True)
   pdfContent = db.BlobProperty()
</snippet></ROW><ROW><id>9554660</id><snippet>doc = SimpleDocTemplate(handler.response.out, pagesize=letter)
doc.build(story) 
</snippet></ROW><ROW><id>9554660</id><snippet>pdf = StringIO()


doc = SimpleDocTemplate(pdf, pagesize=letter)
doc.build(story) 

#get content of generated pdf
content = pdf.getvalue()

#save to db
pdfStorage = PdfStorage(pdfContent = content);
pdfStorage.put()

#output to browser 
handler.response.write(content)
</snippet></ROW><ROW><id>9554868</id><snippet>&lt;a</snippet></ROW><ROW><id>9554868</id><snippet>href</snippet></ROW><ROW><id>9554868</id><snippet>&lt;a href="|"</snippet></ROW><ROW><id>9554868</id><snippet>Settings</snippet></ROW><ROW><id>9554868</id><snippet>Preferences</snippet></ROW><ROW><id>9554868</id><snippet>Editor</snippet></ROW><ROW><id>9554868</id><snippet>Smart Keys</snippet></ROW><ROW><id>9554973</id><snippet>&lt;head&gt;</snippet></ROW><ROW><id>9554973</id><snippet>&lt;head&gt;</snippet></ROW><ROW><id>9555046</id><snippet>Pool</snippet></ROW><ROW><id>9555046</id><snippet>multiprocessing</snippet></ROW><ROW><id>9555046</id><snippet>Pool.map()</snippet></ROW><ROW><id>9555046</id><snippet>#! /usr/bin/env python
# -*- coding: utf-8 -*-
# Adds my copyright notice to photos.
#
# Author: R.F. Smith &lt;rsmith@xs4all.nl&gt;
# $Date: 2012-10-28 17:00:24 +0100 $
#
# To the extent possible under law, Roland Smith has waived all copyright and
# related or neighboring rights to markphotos.py. This work is published from
# the Netherlands. See http://creativecommons.org/publicdomain/zero/1.0/

import sys
import subprocess
from multiprocessing import Pool, Lock
from os import utime, devnull
import os.path
from time import mktime

globallock = Lock() 

def processfile(name):
    """Adds copyright notice to the file.

    Arguments:
    name -- file to modify
    """
    args = ['exiftool', '-CreateDate', name]
    createdate = subprocess.check_output(args)
    fields = createdate.split(":") #pylint: disable=E1103
    year = int(fields[1])
    cr = "R.F. Smith &lt;rsmith@xs4all.nl&gt; http://rsmith.home.xs4all.nl/"
    cmt = "Copyright © {} {}".format(year, cr)
    args = ['exiftool', '-Copyright="Copyright (C) {} {}"'.format(year, cr),
            '-Comment="{}"'.format(cmt), '-overwrite_original', '-q', name]
    rv = subprocess.call(args)
    modtime = int(mktime((year, int(fields[2]), int(fields[3][:2]),
                          int(fields[3][3:]), int(fields[4]), int(fields[5]),
                          0,0,-1)))
    utime(name, (modtime, modtime))
    globallock.acquire()
    if rv == 0:
        print "File '{}' processed.".format(name)
    else:
        print "Error when processing file '{}'".format(name)
    globallock.release()

def checkfor(args):
    """Make sure that a program necessary for using this script is
    available.

    Arguments:
    args -- list of commands to pass to subprocess.call.
    """
    if isinstance(args, str):
        args = args.split()
    try:
        with open(devnull, 'w') as f:
            subprocess.call(args, stderr=subprocess.STDOUT, stdout=f)
    except:
        print "Required program '{}' not found! exiting.".format(args[0])
        sys.exit(1)

def main(argv):
    """Main program.

    Arguments:
    argv -- command line arguments
    """
    if len(argv) == 1:
        binary = os.path.basename(argv[0])
        print "Usage: {} [file ...]".format(binary)
        sys.exit(0)
    checkfor(['exiftool',  '-ver'])
    p = Pool()
    p.map(processfile, argv[1:])
    p.close()

if __name__ == '__main__':
    main(sys.argv)
</snippet></ROW><ROW><id>9555145</id><snippet>import traceback
traceback.print_exc()
</snippet></ROW><ROW><id>9555145</id><snippet>except ...:</snippet></ROW><ROW><id>9555300</id><snippet>packetbytes = struct.pack('&gt;bihshiibBB', 1, 23, len(data['user']), enc_user, 0, 0, 0, 0, 0, 0)
</snippet></ROW><ROW><id>9555300</id><snippet>h</snippet></ROW><ROW><id>9555300</id><snippet>short</snippet></ROW><ROW><id>9555300</id><snippet>s</snippet></ROW><ROW><id>9555300</id><snippet>packfmt = '&gt;bih{}shiibBB'.format(len(enc_user))
packetbytes = struct.pack(packfmt, 1, 23, len(data['user']), enc_user, 0, 0, 0, 0, 0, 0)
</snippet></ROW><ROW><id>9555306</id><snippet>create_all()</snippet></ROW><ROW><id>9555306</id><snippet>create_all()</snippet></ROW><ROW><id>9555306</id><snippet>def createEngine(metadata, dsn, **args):
    engine  = create_engine(dsn, **args)
    metadata.create_all(engine)
    return engine

def doStuff(engine):
    res = engine.execute('select * from mytable')
    # etc etc

def main():
    engine = createEngine(metadata, 'sqlite:///:memory:')
    doStuff(engine)

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>9555414</id><snippet>type</snippet></ROW><ROW><id>9555414</id><snippet>object</snippet></ROW><ROW><id>9555538</id><snippet>import pexpect

child = pexpect.spawn('yourprogram')
while True:
  found = child.expect ([r':$', r'\?$', pexpect.EOF])
  if found == 0:
    child.send('\n')
  elif found == 1:
    child.send('y\n')
  else:  # EOF
     return
</snippet></ROW><ROW><id>9556837</id><snippet>wx.EVT_ERASE_BACKGROUND</snippet></ROW><ROW><id>9556869</id><snippet>&gt;&gt;&gt; round(float('1e-302'), 308)
1e-302
&gt;&gt;&gt; round(float('1e-310'), 308)
0.0
</snippet></ROW><ROW><id>9557115</id><snippet>raw_input</snippet></ROW><ROW><id>9557115</id><snippet>n = int(raw_input("Enter a number: "))
</snippet></ROW><ROW><id>9557213</id><snippet>Query</snippet></ROW><ROW><id>9557213</id><snippet>GqlQuery</snippet></ROW><ROW><id>9557213</id><snippet>=</snippet></ROW><ROW><id>9557213</id><snippet>==</snippet></ROW><ROW><id>9557213</id><snippet>_q = db.GqlQuery("SELECT * FROM Area WHERE suburb_town_lower = :1", i.lower())
</snippet></ROW><ROW><id>9557224</id><snippet>In [29]: df.pivot('Symbol', 'TimeStamp').stack()
Out[29]: 
                   M1    M2   Price   Volume
Symbol TimeStamp                            
FUEL   9:58:40 AM   6  1.05  3.8544   100116
       9:58:47 AM   7  1.07  3.8599   102116
       9:59:09 AM   8  1.11  3.9099   105265
       9:59:11 AM   9  1.15  3.9490   109674
GBR    9:57:52 AM   2  0.34  3.7500    47521
       9:58:20 AM   3  0.45  3.8000    63211
       9:58:24 AM   4  0.46  3.8300    64251
MPET   9:57:52 AM   3  0.26  1.4200    44600
ORBC   9:59:02 AM   2  0.22  3.4000    10509
SUNH   9:59:09 AM   6  0.09  4.3700    24394
TBET   9:59:05 AM   2  8.03  2.1800  1121629
       9:59:14 AM   3  8.05  2.1900  1124179
XRA    9:58:08 AM   3  0.12  3.6167    42310
</snippet></ROW><ROW><id>9557224</id><snippet>In [32]: df.set_index(['Symbol', 'TimeStamp'])
Out[32]: 
                    Price  M1    M2   Volume
Symbol TimeStamp                            
TBET   9:59:14 AM  2.1900   3  8.05  1124179
FUEL   9:59:11 AM  3.9490   9  1.15   109674
SUNH   9:59:09 AM  4.3700   6  0.09    24394
FUEL   9:59:09 AM  3.9099   8  1.11   105265
TBET   9:59:05 AM  2.1800   2  8.03  1121629
ORBC   9:59:02 AM  3.4000   2  0.22    10509
FUEL   9:58:47 AM  3.8599   7  1.07   102116
       9:58:40 AM  3.8544   6  1.05   100116
GBR    9:58:24 AM  3.8300   4  0.46    64251
       9:58:20 AM  3.8000   3  0.45    63211
XRA    9:58:08 AM  3.6167   3  0.12    42310
GBR    9:57:52 AM  3.7500   2  0.34    47521
MPET   9:57:52 AM  1.4200   3  0.26    44600

In [33]: df.set_index(['Symbol', 'TimeStamp']).sortlevel(0)
Out[33]: 
                    Price  M1    M2   Volume
Symbol TimeStamp                            
FUEL   9:58:40 AM  3.8544   6  1.05   100116
       9:58:47 AM  3.8599   7  1.07   102116
       9:59:09 AM  3.9099   8  1.11   105265
       9:59:11 AM  3.9490   9  1.15   109674
GBR    9:57:52 AM  3.7500   2  0.34    47521
       9:58:20 AM  3.8000   3  0.45    63211
       9:58:24 AM  3.8300   4  0.46    64251
MPET   9:57:52 AM  1.4200   3  0.26    44600
ORBC   9:59:02 AM  3.4000   2  0.22    10509
SUNH   9:59:09 AM  4.3700   6  0.09    24394
TBET   9:59:05 AM  2.1800   2  8.03  1121629
       9:59:14 AM  2.1900   3  8.05  1124179
XRA    9:58:08 AM  3.6167   3  0.12    42310
</snippet></ROW><ROW><id>9557224</id><snippet>In [35]: df.set_index(['TimeStamp', 'Symbol']).sortlevel(0).to_panel()
Out[35]: 
&lt;class 'pandas.core.panel.Panel'&gt;
Dimensions: 4 (items) x 11 (major) x 7 (minor)
Items: Price to Volume
Major axis: 9:57:52 AM to 9:59:14 AM
Minor axis: FUEL to XRA

In [36]: panel = df.set_index(['TimeStamp', 'Symbol']).sortlevel(0).to_panel()

In [37]: panel['Price']
Out[37]: 
Symbol        FUEL   GBR  MPET  ORBC  SUNH  TBET     XRA
TimeStamp                                               
9:57:52 AM     NaN  3.75  1.42   NaN   NaN   NaN     NaN
9:58:08 AM     NaN   NaN   NaN   NaN   NaN   NaN  3.6167
9:58:20 AM     NaN  3.80   NaN   NaN   NaN   NaN     NaN
9:58:24 AM     NaN  3.83   NaN   NaN   NaN   NaN     NaN
9:58:40 AM  3.8544   NaN   NaN   NaN   NaN   NaN     NaN
9:58:47 AM  3.8599   NaN   NaN   NaN   NaN   NaN     NaN
9:59:02 AM     NaN   NaN   NaN   3.4   NaN   NaN     NaN
9:59:05 AM     NaN   NaN   NaN   NaN   NaN  2.18     NaN
9:59:09 AM  3.9099   NaN   NaN   NaN  4.37   NaN     NaN
9:59:11 AM  3.9490   NaN   NaN   NaN   NaN   NaN     NaN
9:59:14 AM     NaN   NaN   NaN   NaN   NaN  2.19     NaN
</snippet></ROW><ROW><id>9557342</id><snippet>[{}]*10</snippet></ROW><ROW><id>9557342</id><snippet>[{} for _ in range(10)]</snippet></ROW><ROW><id>9557549</id><snippet>import decimal

a = decimal.Decimal('54.12')
b = decimal.Decimal('54.00')

for n in (a, b):
    print("You have just bought an item that cost ${0:.{1}f}."
          .format(n, 0 if n == n.to_integral() else 2))
</snippet></ROW><ROW><id>9557549</id><snippet>{0:.{1}f}</snippet></ROW><ROW><id>9557549</id><snippet>0</snippet></ROW><ROW><id>9557549</id><snippet>2</snippet></ROW><ROW><id>9557792</id><snippet>def Name_Organizer(FASTA,output):

    import os
    import re

    in_file=open(FASTA,'r')
    dir,file=os.path.split(FASTA)
    temp = os.path.join(dir,output)
    out_file=open(temp,'w')

    data=''
    name_list=[]
    seq_list=[]

    for line in in_file:

        line=line.strip()
        for i in line:
            if i=='&gt;':
                name_list.append(line)
                if data:
                    seq_list.append(data)
                    data=''
                break
            else:
                line=line.upper()
        if all([k==k.upper() for k in line]):
            data=data+line

    print seq_list
</snippet></ROW><ROW><id>9557792</id><snippet>data = []

# ...

data.append(line) # repeatedly

# ...

seq_list.append(''.join(data)) # each time you get to a new marker line
data = []
</snippet></ROW><ROW><id>9557895</id><snippet>player</snippet></ROW><ROW><id>9558120</id><snippet>mv index.html Django-1.3.1.tar.gz
</snippet></ROW><ROW><id>9558120</id><snippet>tar xzvf Django-1.3.1.tar.gz
</snippet></ROW><ROW><id>9558271</id><snippet>yapsy</snippet></ROW><ROW><id>9558271</id><snippet>class Settings(object):
    def __getattr__(self, attr):
        return load_plugin(attr)

settings = Settings()
</snippet></ROW><ROW><id>9558271</id><snippet>from settings import settings

knob = settings.Knob()
</snippet></ROW><ROW><id>9558271</id><snippet>load_plugin()</snippet></ROW><ROW><id>9558271</id><snippet>from importlib import import_module

def load_plugin(name):
    m = import_module('Settings.'+name)
    return getattr(m, name)
</snippet></ROW><ROW><id>9558334</id><snippet>&gt;&gt;&gt; "variable_name_1".partition("_@")
('variable_name_1', '', '')
&gt;&gt;&gt; "variable_name_2_@5".partition("_@")
('variable_name_2', '_@', '5')
</snippet></ROW><ROW><id>9558363</id><snippet>len(lst)</snippet></ROW><ROW><id>9558363</id><snippet>lst.insert</snippet></ROW><ROW><id>9558363</id><snippet>def determine_points(lst, new):
  # lst is a list of tuples with movies, ranked by how good the movie is
  # new is a tuple with new movie
  # the new movies position is to be determined

  new_title, new_genre = new
  at_most = len(lst)
  at_least = 0
  while at_least &lt; at_most:
    center = (at_least + at_most) // 2
    title, genre = lst[center]
    os.system("clear")
    competition_strings = [new_title, new_genre, "\n" * 10, title, genre]
    print("\n".join(x.center(150) for x in competition_strings))
    c = getch()
    if c == "j": # new movie is worse than this
      at_most = center
    else: # new movie is better than this
      at_least = center + 1
  return at_least
</snippet></ROW><ROW><id>9558363</id><snippet>lst = []
news = [(str(i), str(i)) for i in range(10)]
import random
random.shuffle(news)
for new in news:
    print(lst)
    lst.insert(determine_points(lst, new), new)
print(lst)
</snippet></ROW><ROW><id>9558416</id><snippet>if line.strip() == "END":
</snippet></ROW><ROW><id>9558416</id><snippet>if line[0] == "END":
</snippet></ROW><ROW><id>9558450</id><snippet># remove depracated warning in python2.6
try:
    from hashlib import sha1 as _sha, md5 as _md5
except ImportError:
    import sha
    import md5
    _sha = sha.new
    _md5 = md5.new
</snippet></ROW><ROW><id>9558490</id><snippet>'/blog/&lt;:\d{4}&gt;/&lt;:\d{2}&gt;'</snippet></ROW><ROW><id>9558490</id><snippet>webapp2.Route(r'/solutions/&lt;:(add|edit)&gt;',
              handler='solution.SolutionPage:add_edit_solution')
</snippet></ROW><ROW><id>9558810</id><snippet> csv

quoteChar = "'"

myReader = csv.reader(open('largefile.csv', 'rb'), delimiter=',', quoteChar = quoteChar)

for row in myReader:
    print row # this prints a list. Row is a list of values per line in your
    # 'largefile.csv' file. Each row is splitted on the delimiter char.
    # (comma in this case) and strings that are quoted by quoteChar (in your case
    # a ' are treated differently.) This will work for your input that you've given
    # in your question.

# this is what you used to do:
for line in open('largefile.csv', 'rb'):
     row = line.split(quoteChar)
</snippet></ROW><ROW><id>9558846</id><snippet>index()</snippet></ROW><ROW><id>9559078</id><snippet>sangle=(math.fabs((float((now.second*360)/60))-90)
       1         23     45              1   23   4
</snippet></ROW><ROW><id>9559081</id><snippet>self</snippet></ROW><ROW><id>9559081</id><snippet>@method_decorator(run_eight_times)
def undecorated_function(self):
    super(Myrepetitiveclass, self).undecorated_function() 
</snippet></ROW><ROW><id>9559081</id><snippet>__init__</snippet></ROW><ROW><id>9559081</id><snippet>super</snippet></ROW><ROW><id>9559174</id><snippet>digits = {'1':'one', '2':'two', ...}
x = raw_input("enter number: ")
y = ' '.join(digits[number] for number in x)
</snippet></ROW><ROW><id>9559478</id><snippet>import bigfloat
bigfloat.exp(5000,bigfloat.precision(100))
# -&gt; BigFloat.exact('2.9676283840236670689662968052896e+2171', precision=100)
</snippet></ROW><ROW><id>9559593</id><snippet>toolbutton.set_icon_widget(spinner)</snippet></ROW><ROW><id>9559593</id><snippet>window.show_all()</snippet></ROW><ROW><id>9559593</id><snippet>spinner.show()</snippet></ROW><ROW><id>9559593</id><snippet>set_icon_widget()</snippet></ROW><ROW><id>9559846</id><snippet>&gt;&gt;&gt; L = ['1,2,3', '22', '33']
&gt;&gt;&gt; [x for l in L for x in l.split(",")]
['1', '2', '3', '22', '33']
</snippet></ROW><ROW><id>9560045</id><snippet>self.args</snippet></ROW><ROW><id>9560045</id><snippet>self.kwargs</snippet></ROW><ROW><id>9560045</id><snippet>self.kwargs</snippet></ROW><ROW><id>9560045</id><snippet>my_value = self.kwargs.get('key', 'default_value')
</snippet></ROW><ROW><id>9560228</id><snippet>a</snippet></ROW><ROW><id>9560228</id><snippet>25 &lt; x &lt; 100</snippet></ROW><ROW><id>9560228</id><snippet>((25 &lt; a) &amp; (a &lt; 100)).sum()
</snippet></ROW><ROW><id>9560228</id><snippet>(25 &lt; a) &amp; (a &lt; 100)</snippet></ROW><ROW><id>9560228</id><snippet>a</snippet></ROW><ROW><id>9560228</id><snippet>True</snippet></ROW><ROW><id>9560228</id><snippet>True</snippet></ROW><ROW><id>9560228</id><snippet>1</snippet></ROW><ROW><id>9560228</id><snippet>False</snippet></ROW><ROW><id>9560228</id><snippet>0</snippet></ROW><ROW><id>9560468</id><snippet>&gt;&gt;&gt; s = 'Person One (Something inside here) Second Thing (another thing) OK (something else)'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub('(.*?) \((.*?)\)( ?)', r'\2 (\1)\3', s)
'Something inside here (Person One) another thing (Second Thing) something else (OK)'
</snippet></ROW><ROW><id>9560707</id><snippet>&gt;&gt;&gt; a = Symbol('a') # create an object with name 'a' for variable a to point to
&gt;&gt;&gt; b = a + 1; b    # create another object that refers to what 'a' refers to
a + 1
&gt;&gt;&gt; a = 4; a        # a now points to the literal integer 4, not Symbol('a')
4
&gt;&gt;&gt; b               # but b is still pointing at Symbol('a')
a + 1
</snippet></ROW><ROW><id>9560707</id><snippet>a</snippet></ROW><ROW><id>9560707</id><snippet>b</snippet></ROW><ROW><id>9560707</id><snippet>&gt;&gt;&gt; r, t, d = symbols('rate time short_life')
&gt;&gt;&gt; d = r*t; d
rate*time
&gt;&gt;&gt; r=80; t=2; d    # we haven't changed d, only r and t
rate*time
&gt;&gt;&gt; d=r*t; d        # now d is using the current values of r and t
160
</snippet></ROW><ROW><id>9560716</id><snippet>&gt;&gt;&gt; def kernel_thing(N):
...   import numpy as np
...   n = N // 2 + 1
...   a = np.zeros((N, N), dtype=int)
...   for i in xrange(n):
...     a[i:N-i, i:N-i] += 1
...   return a
... 
&gt;&gt;&gt; def kernel_to_string(a):
...   return '{} {}\n'.format(a.shape[0], a.shape[1]) + '\n'.join(' '.join(str(element) for element in row) for row in a)
... 
&gt;&gt;&gt; print kernel_to_string(kernel_thing(5))
5 5
1 1 1 1 1
1 2 2 2 1
1 2 3 2 1
1 2 2 2 1
1 1 1 1 1
&gt;&gt;&gt; print kernel_to_string(kernel_thing(6))
6 6
1 1 1 1 1 1
1 2 2 2 2 1
1 2 3 3 2 1
1 2 3 3 2 1
1 2 2 2 2 1
1 1 1 1 1 1
&gt;&gt;&gt; print kernel_to_string(kernel_thing(17))
17 17
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1
1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 2 1
1 2 3 4 4 4 4 4 4 4 4 4 4 4 3 2 1
1 2 3 4 5 5 5 5 5 5 5 5 5 4 3 2 1
1 2 3 4 5 6 6 6 6 6 6 6 5 4 3 2 1
1 2 3 4 5 6 7 7 7 7 7 6 5 4 3 2 1
1 2 3 4 5 6 7 8 8 8 7 6 5 4 3 2 1
1 2 3 4 5 6 7 8 9 8 7 6 5 4 3 2 1
1 2 3 4 5 6 7 8 8 8 7 6 5 4 3 2 1
1 2 3 4 5 6 7 7 7 7 7 6 5 4 3 2 1
1 2 3 4 5 6 6 6 6 6 6 6 5 4 3 2 1
1 2 3 4 5 5 5 5 5 5 5 5 5 4 3 2 1
1 2 3 4 4 4 4 4 4 4 4 4 4 4 3 2 1
1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 2 1
1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
</snippet></ROW><ROW><id>9560810</id><snippet>next_edges = filter(lambda x: path[-1][1] == x[0], edges)</snippet></ROW><ROW><id>9560810</id><snippet>edges</snippet></ROW><ROW><id>9560810</id><snippet>next_edges = []
for x in edges:
    if path[len(path) - 1][1] == x[0]
        next_edges.append[x]
</snippet></ROW><ROW><id>9560810</id><snippet>edges</snippet></ROW><ROW><id>9560810</id><snippet>edge</snippet></ROW><ROW><id>9560810</id><snippet>edges</snippet></ROW><ROW><id>9560810</id><snippet>edges_recursive = list(edges)
edges_recursive.remove(edge)
</snippet></ROW><ROW><id>9560810</id><snippet>paths_rec(list(path) + [edge], edges_recursive)</snippet></ROW><ROW><id>9560810</id><snippet>edge</snippet></ROW><ROW><id>9560810</id><snippet>edge</snippet></ROW><ROW><id>9560878</id><snippet>@@ -54,65 +54,66 @@
 aaa%0A
-bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb%0A
+Zbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb%0A
 cccc
</snippet></ROW><ROW><id>9561086</id><snippet>dir</snippet></ROW><ROW><id>9561086</id><snippet>dir(sely)</snippet></ROW><ROW><id>9561086</id><snippet>__iter__</snippet></ROW><ROW><id>9561086</id><snippet>list(sely)</snippet></ROW><ROW><id>9561086</id><snippet>__getitem__</snippet></ROW><ROW><id>9561086</id><snippet>sely</snippet></ROW><ROW><id>9561086</id><snippet>web.utils.IterBetter</snippet></ROW><ROW><id>9561192</id><snippet>self.name</snippet></ROW><ROW><id>9561192</id><snippet>"get_thing"</snippet></ROW><ROW><id>9561192</id><snippet>get_thing</snippet></ROW><ROW><id>9561192</id><snippet>self.name</snippet></ROW><ROW><id>9561192</id><snippet>setattr(self, 'name', self.get_thing)
</snippet></ROW><ROW><id>9561192</id><snippet>value_returned = self.get_thing()
</snippet></ROW><ROW><id>9561221</id><snippet>3&gt;&gt; bytes(int(x, 16) for x in '0xDE 0xAD 0xBE 0xEF'.split())
b'\xde\xad\xbe\xef'
</snippet></ROW><ROW><id>9561457</id><snippet>input_file = open('/path/to/input_file')
output_file = open('/path/to/output_file', 'w')
for line in input_file:
    answer = myFunction(line)
    output_file.write("Case #x: "+str(answer))
input_file.close()
output_file.close()
</snippet></ROW><ROW><id>9561498</id><snippet>1/(1+exp(sum))</snippet></ROW><ROW><id>9561634</id><snippet>import operator,functools
a = map(functools.partial(map, functools.partial(operator.or_, b)), a)
</snippet></ROW><ROW><id>9561650</id><snippet>yOffset = self.scrollArea.verticalScrollBar().value()
</snippet></ROW><ROW><id>9561650</id><snippet>QWidget.mapFrom</snippet></ROW><ROW><id>9561650</id><snippet>mapTo</snippet></ROW><ROW><id>9561650</id><snippet>mapFromGlobal</snippet></ROW><ROW><id>9561650</id><snippet>mapToGlobal</snippet></ROW><ROW><id>9561650</id><snippet>def dropEvent(self, event):
    pos = self.frame.mapFrom(self, event.pos())
</snippet></ROW><ROW><id>9562039</id><snippet>collections.Counter</snippet></ROW><ROW><id>9562039</id><snippet>import collections,json,os.path
winners = collections.Counter()
for logFile in logFiles:
    with open(os.path.join("logs", logFile), 'r') as jsonf:
        jsonData = json.load(jsonf)
    winner = str(jsonData[6]['winner'])
    winners[winner] += 1
winnerList = list(winners.keys())
bestPlayers = winners.most_common()
</snippet></ROW><ROW><id>9562458</id><snippet>ClientPaymentOption.objects.create( ...., client=client )</snippet></ROW><ROW><id>9562458</id><snippet>class MyModelAdmin(admin.ModelAdmin):

    # A template for a very customized change view:
    change_form_template = 'admin/myapp/extras/openstreetmap_change_form.html'

    def get_osm_info(self):
        # ...
        pass

    def change_view(self, request, object_id, extra_context=None):
        extra_context = extra_context or {}
        extra_context['osm_data'] = self.get_osm_info()
        return super(MyModelAdmin, self).change_view(request, object_id,
            extra_context=extra_context)
</snippet></ROW><ROW><id>9562494</id><snippet>Entry.objects.filter(name='name', title='title').exists()
</snippet></ROW><ROW><id>9562494</id><snippet>Entry.objects.filter(name=request.POST['name'], title=request.POST['title']).exists()
</snippet></ROW><ROW><id>9562638</id><snippet>import wx
import wx.grid as gridlib

########################################################################
class PanelOne(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent=parent)
        self.s=parent
        self.txt = wx.TextCtrl(self)
        button =wx.Button(self, label="Save", pos=(200, 0))
        button.Bind(wx.EVT_BUTTON, self.Check)

    def Check(self,event):
        passw=self.txt.GetValue()
        if  passw=="1":
            print "true"
            self.s.onSwitchPanels(self)


########################################################################
class PanelTwo(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent=parent)

        grid = gridlib.Grid(self)
        grid.CreateGrid(25,12)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(grid, 0, wx.EXPAND)
        self.SetSizer(sizer)
        button =wx.Button(self, label="Save", pos=(0, 500))
        button.Bind(wx.EVT_BUTTON, parent.onSwitchPanels)
class PanelThree(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent=parent)
        txt = wx.TextCtrl(self)
        button =wx.Button(self, label="Save", pos=(200, 325))
        button.Bind(wx.EVT_BUTTON, parent.onSwitchPanels)

########################################################################
class MyForm(wx.Frame):

    #----------------------------------------------------------------------
    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY,
                          "Panel Switcher Tutorial",
                          size=(800,600))

        self.panel_one = PanelOne(self)
        self.panel_two = PanelTwo(self)
        self.panel_three = PanelThree(self)
        self.panel_two.Hide()
        self.panel_three.Hide()

        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.panel_one, 1, wx.EXPAND)
        self.sizer.Add(self.panel_two, 1, wx.EXPAND)
        self.SetSizer(self.sizer)

        menubar = wx.MenuBar()
        fileMenu = wx.Menu()
        switch_panels_menu_item = fileMenu.Append(wx.ID_ANY,
                                                  "Switch Panels",
                                                  "Some text")
        self.Bind(wx.EVT_MENU, self.onSwitchPanels,
                  switch_panels_menu_item)
        menubar.Append(fileMenu, '&amp;File')
        self.SetMenuBar(menubar)

    #----------------------------------------------------------------------
    def onSwitchPanels(self, event):

        if self.panel_one.IsShown():
           self.SetTitle("Panel Two Showing")
           self.panel_one.Hide()
           self.panel_two.Show()
           self.panel_three.Hide()
        elif self.panel_two.IsShown() or self.panel_three.IsShown():

           self.SetTitle("Panel One Showing")
           self.panel_one.Show()
           self.panel_two.Hide()
           self.panel_three.Hide()
        else:
             self.SetTitle("Panel Three Showing")
             self.panel_one.Hide()
             self.panel_two.Hide()
             self.panel_three.Show()


        self.Layout()

# Run the program
if __name__ == "__main__":
    app = wx.App(False)
    frame = MyForm()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>9562708</id><snippet>from collections import defaultdict
from operator import itemgetter

access = defaultdict(int)

with open("/path/to/file.log", "wb") as f:
  for line in f:
    parts = line.split() # split at whitespace
    access[parts[11] + parts[13]] += 1 # adapt indices here

# print all URLs in descending order
for url, count in sorted(access.iteritems(), key=lambda (_, c): -c):
  print "%d %s" % (count url)

# if you only want to see the top k entries:
import heapq
k = 10
for url, count in heapq.nlargest(k, access.iteritems(), key=itemgetter(1)):
  print "%d %s" % (count, url)
</snippet></ROW><ROW><id>9562708</id><snippet>Counter</snippet></ROW><ROW><id>9562708</id><snippet>from collections import Counter
with open("/path/to/file.log", "wb") as f:
  counter = Counter(''.join(line.split()[11:14:2]) for line in f)

# print top 10 (leave argument out to list all)
for url, count in counter.most_common(10):
  print "%d %s" % (count, url)
</snippet></ROW><ROW><id>9562723</id><snippet>range</snippet></ROW><ROW><id>9562723</id><snippet>&gt;&gt;&gt; topCandidate = 20
&gt;&gt;&gt; candidate = 3
&gt;&gt;&gt; for i in range(candidate*2, topCandidate+1, candidate):
...   print i
... 
6
9
12
15
18
</snippet></ROW><ROW><id>9562889</id><snippet>from sqlalchemy import create_engine

engine = create_engine('mysql://test:test@localhost/test', echo=True)
from sqlalchemy.orm import sessionmaker

from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Date, Column, Integer


Base = declarative_base()



class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True, autoincrement=True)
    day = Column(Date, unique=True)


if __name__ == '__main__':

    Base.metadata.create_all(engine)
    c = engine.connect()
    c.execute("""INSERT INTO users(day) VALUES ('2012-03-05') ON DUPLICATE KEY UPDATE day='2012-03-04'""")
</snippet></ROW><ROW><id>9562889</id><snippet>2012-03-05 12:39:42,202 INFO sqlalchemy.engine.base.Engine SELECT DATABASE()
2012-03-05 12:39:42,202 INFO sqlalchemy.engine.base.Engine ()
2012-03-05 12:39:42,204 INFO sqlalchemy.engine.base.Engine SHOW VARIABLES LIKE 'character_set%%'
2012-03-05 12:39:42,204 INFO sqlalchemy.engine.base.Engine ()
2012-03-05 12:39:42,205 INFO sqlalchemy.engine.base.Engine SHOW VARIABLES LIKE 'lower_case_table_names'
2012-03-05 12:39:42,205 INFO sqlalchemy.engine.base.Engine ()
2012-03-05 12:39:42,206 INFO sqlalchemy.engine.base.Engine SHOW COLLATION
2012-03-05 12:39:42,206 INFO sqlalchemy.engine.base.Engine ()
2012-03-05 12:39:42,209 INFO sqlalchemy.engine.base.Engine SHOW VARIABLES LIKE 'sql_mode'
2012-03-05 12:39:42,209 INFO sqlalchemy.engine.base.Engine ()
2012-03-05 12:39:42,210 INFO sqlalchemy.engine.base.Engine DESCRIBE `users`
2012-03-05 12:39:42,210 INFO sqlalchemy.engine.base.Engine ()
2012-03-05 12:39:42,211 INFO sqlalchemy.engine.base.Engine INSERT INTO users(day) VALUES ('2012-03-05') ON DUPLICATE KEY UPDATE day='2012-03-04'
2012-03-05 12:39:42,211 INFO sqlalchemy.engine.base.Engine ()
2012-03-05 12:39:42,212 INFO sqlalchemy.engine.base.Engine COMMIT
</snippet></ROW><ROW><id>9562889</id><snippet>mysql&gt; select * from users;
+----+------------+
| id | day        |
+----+------------+
|  8 | 2012-03-05 |
+----+------------+
1 row in set (0.00 sec)
</snippet></ROW><ROW><id>9562889</id><snippet>mysql&gt; select * from users;
+----+------------+
| id | day        |
+----+------------+
|  8 | 2012-03-04 |
+----+------------+
1 row in set (0.00 sec)
</snippet></ROW><ROW><id>9562970</id><snippet>&gt;&gt;&gt; l = [0] * 3
&gt;&gt;&gt; l
[0, 0, 0]
&gt;&gt;&gt; map(id, l)
[42383312, 42383312, 42383312]
&gt;&gt;&gt; l[0] += 1
&gt;&gt;&gt; l
[1, 0, 0]
&gt;&gt;&gt; map(id, l)
[42383288, 42383312, 42383312]
</snippet></ROW><ROW><id>9562970</id><snippet>id</snippet></ROW><ROW><id>9562970</id><snippet>&gt;&gt;&gt; l = [[0]] * 3
&gt;&gt;&gt; l
[[0], [0], [0]]
&gt;&gt;&gt; map(id, l)
[48544944, 48544944, 48544944]
&gt;&gt;&gt; l[0].append(0)
&gt;&gt;&gt; l
[[0, 0], [0, 0], [0, 0]]
&gt;&gt;&gt; map(id, l)
[48544944, 48544944, 48544944]
</snippet></ROW><ROW><id>9562970</id><snippet>append</snippet></ROW><ROW><id>9562970</id><snippet>id</snippet></ROW><ROW><id>9563183</id><snippet>~/lib</snippet></ROW><ROW><id>9563183</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>9563183</id><snippet>export PYTHONPATH=~/lib
</snippet></ROW><ROW><id>9563183</id><snippet>import</snippet></ROW><ROW><id>9563183</id><snippet>import os
import sys
sys.path.insert(0, os.path.expanduser('~/lib'))
</snippet></ROW><ROW><id>9563528</id><snippet>ModelNumber1</snippet></ROW><ROW><id>9563528</id><snippet>ModelNumber2</snippet></ROW><ROW><id>9563528</id><snippet>platform</snippet></ROW><ROW><id>9563528</id><snippet>class ModelNumber1(BaseModel):
  delay = 10
  platform = Param.Type1(NULL, "platform", size=5)

class ModelNumber2(BaseModel):
  delay = 15
  platform = Param.Type1(NULL, "platform", size=8)
</snippet></ROW><ROW><id>9563528</id><snippet>BasePlatform</snippet></ROW><ROW><id>9563528</id><snippet>class BasePlatform(SimObj):
  type = 'BasePlatform'
  size = Param.Int(100, "Number of entries")

  def __init__(self, size=None):
    if size:
      self.size = size
      # or, if size is an integer:
      # self.size = Param.Int(size, "Number of entries")
</snippet></ROW><ROW><id>9563528</id><snippet>BasePlatform</snippet></ROW><ROW><id>9563528</id><snippet>MyOwnBasePlatform</snippet></ROW><ROW><id>9563528</id><snippet>__init__</snippet></ROW><ROW><id>9563737</id><snippet>from django.utils.translation import ugettext as _

class Foo(models.Model):
    help_text = _(u'Documentation of Foo model to localize')
</snippet></ROW><ROW><id>9563874</id><snippet>__init__</snippet></ROW><ROW><id>9563874</id><snippet>__init__.py,</snippet></ROW><ROW><id>9563874</id><snippet>__init__.py,</snippet></ROW><ROW><id>9564699</id><snippet>settings.USE_SSL = True
</snippet></ROW><ROW><id>9564758</id><snippet>from social_auth.backends import get_backend
</snippet></ROW><ROW><id>9564758</id><snippet>virtualenv /path/to/venv</snippet></ROW><ROW><id>9564758</id><snippet>source /path/to/venv/bin/activate</snippet></ROW><ROW><id>9564758</id><snippet>pip install -e git+git://github.com/omab/django-social-auth.git#egg=social_auth</snippet></ROW><ROW><id>9564849</id><snippet>DTime</snippet></ROW><ROW><id>9564849</id><snippet>import csv

file1reader = csv.reader(open("file1.csv"), delimiter=",")
file2reader = csv.reader(open("file2.csv"), delimiter=",")

header1 = file1reader.next() #header
header2 = file2reader.next() #header

for Code, DTime in file1reader:
    for id_, D, Sym, DateTime, Bid, Ask in file2reader:
        if DateTime.startswith(DTime): # found it
            print DateTime, Bid, Ask   # output data
            break                      # break and continue where we left next time
</snippet></ROW><ROW><id>9564849</id><snippet>import csv
from datetime import datetime

file1reader = csv.reader(open("file1.csv"), delimiter=",")
file2reader = csv.reader(open("file2.csv"), delimiter=",")

header1 = file1reader.next() #header
header2 = file2reader.next() #header

for Code, DTime in file1reader:
    DTime = datetime.strptime(DTime, "%Y-%m-%d %H:%M")
    for id_, D, Sym, DateTime, Bid, Ask in file2reader:
        DateTime = datetime.strptime(DateTime, "%Y-%m-%d %H:%M:%S")
        if DateTime&gt;=DTime: # found it
            print DateTime, Bid, Ask   # output data
            break                      # break and continue where we left next time
</snippet></ROW><ROW><id>9564866</id><snippet>os.open</snippet></ROW><ROW><id>9564866</id><snippet>os.O_WRONLY</snippet></ROW><ROW><id>9564866</id><snippet>os.dup2(&lt;new fd&gt;, 1)</snippet></ROW><ROW><id>9565025</id><snippet>a = request.GET.get('a')
b = request.GET.get('b')
</snippet></ROW><ROW><id>9565025</id><snippet>self.request</snippet></ROW><ROW><id>9565025</id><snippet>def my_view(request, *args, **kwargs ):
    # access request here
</snippet></ROW><ROW><id>9565025</id><snippet>a</snippet></ROW><ROW><id>9565025</id><snippet>b</snippet></ROW><ROW><id>9565025</id><snippet>None</snippet></ROW><ROW><id>9565373</id><snippet>Page.objects(tags__nin=['coding'])
</snippet></ROW><ROW><id>9565398</id><snippet> &lt;w:r&gt;
    &lt;w:rPr&gt;
      &lt;w:highlight w:val="yellow"/&gt;
    &lt;/w:rPr&gt;
    &lt;w:t&gt;text that is highlighted&lt;/w:t&gt;
  &lt;/w:r&gt;
</snippet></ROW><ROW><id>9565398</id><snippet>from docx import *
document = opendocx(r'test.docx')
words = document.xpath('//w:r', namespaces=document.nsmap)

WPML_URI = "{http://schemas.openxmlformats.org/wordprocessingml/2006/main}"
tag_rPr = WPML_URI + 'rPr'
tag_highlight = WPML_URI + 'highlight'
tag_val = WPML_URI + 'val'

for word in words:
    for rPr in word.findall(tag_rPr):
        if rPr.find(tag_highlight).attrib[tag_val] == 'yellow':
            print word.find(tag_t).text
</snippet></ROW><ROW><id>9565595</id><snippet>numpy &gt;= 1.5</snippet></ROW><ROW><id>9565595</id><snippet>numpy.savetxt(filename, a, newline=" ")
</snippet></ROW><ROW><id>9565595</id><snippet>a = numpy.array([1,2,3])
b = numpy.array([4,5,6])
numpy.savetext(filename, (a,b), fmt="%d")

# gives:
# 1 2 3
# 4 5 6
</snippet></ROW><ROW><id>9565595</id><snippet>a = numpy.array([1,2,3])
b = numpy.array([4,5])

with open(filename,"w") as f:
    f.write("\n".join(" ".join(map(str, x)) for x in (a,b)))

# gives:
# 1 2 3
# 4 5
</snippet></ROW><ROW><id>9565946</id><snippet>def select_decorator(select_method):

  def select_wrapper( self , *args, **kwargs):
     intersect = kwargs.has_key('intersect') and kwargs['intersect']
     if intersect:
        # Special init code for intersect == True
        select_method( self , *args , **kwargs)
     else:
        # Normal call path for intersect == False 
        select_method( self , *args , **kwargs)
  return select_wrapper  
</snippet></ROW><ROW><id>9566539</id><snippet>str_with_ainsi_esc = '\x1b[10;10HSalut'
print re.sub('\x1b\[\d+;\d+H','',str_with_ainsi_esc)
</snippet></ROW><ROW><id>9566681</id><snippet>xs</snippet></ROW><ROW><id>9566681</id><snippet>ys</snippet></ROW><ROW><id>9566681</id><snippet>xs</snippet></ROW><ROW><id>9566681</id><snippet>numpy.searchsorted()</snippet></ROW><ROW><id>9566681</id><snippet>xs.sort()
ndx = numpy.searchsorted(xs, ys)
</snippet></ROW><ROW><id>9566681</id><snippet>xs</snippet></ROW><ROW><id>9566681</id><snippet>orig_indices = xs.argsort()
ndx = orig_indices[numpy.searchsorted(xs[orig_indices], ys)]
</snippet></ROW><ROW><id>9566916</id><snippet>version, type, length = struct.unpack("cch", packed[:4])
content, = struct.unpack("%ds" % length, packed[4:])
</snippet></ROW><ROW><id>9567152</id><snippet>wait</snippet></ROW><ROW><id>9567152</id><snippet>&gt;&gt;&gt; p.wait()
1
&gt;&gt;&gt; p.returncode
1
</snippet></ROW><ROW><id>9567152</id><snippet>communicate</snippet></ROW><ROW><id>9567152</id><snippet>&gt;&gt;&gt; stdout, stderr = p.communicate()
&gt;&gt;&gt; stdout
&gt;&gt;&gt; stderr
'ook'
&gt;&gt;&gt; p.returncode
1
</snippet></ROW><ROW><id>9567173</id><snippet>collections.Counter</snippet></ROW><ROW><id>9567173</id><snippet>from collections import Counter

answers = [
    {'Question 1': {'Job': 'job1', 'Country': 'USA', 'Car': 'Porche'}},
    {'Question 1': {'Job': 'job2', 'Country': 'UK',  'Car': 'Nissan'}},
    {'Question 3': {'Job': 'job8', 'Country': 'GR',  'Car': 'Toyota'}},
    {'Question 4': {'Job': 'job1', 'Country': 'USA', 'Car': 'Toyota'}},
    {'Question 4': {'Job': 'job5', 'Country': 'USA', 'Car': 'Toyota'}},
    {'Question 4': {'Job': 'job5', 'Country': 'USA', 'Car': 'Porche'}},
]

counted = Counter([item for q in answers for answer in q.values() for item in answer.items()])
</snippet></ROW><ROW><id>9567173</id><snippet>list</snippet></ROW><ROW><id>9567173</id><snippet>answers</snippet></ROW><ROW><id>9567173</id><snippet>list()</snippet></ROW><ROW><id>9567173</id><snippet>Counter</snippet></ROW><ROW><id>9567173</id><snippet>Counter({
    ('Country', 'USA'): 4, 
    ('Car', 'Toyota'): 3, 
    ('Job', 'job5'): 2, 
    ('Job', 'job1'): 2, 
    ('Car', 'Porche'): 2, 
    ('Job', 'job8'): 1, 
    ('Job', 'job2'): 1, 
    ('Country', 'UK'): 1, 
    ('Car', 'Nissan'): 1, 
    ('Country', 'GR'): 1
})
</snippet></ROW><ROW><id>9567173</id><snippet>countries =  [(key, value) for (key, value) in counted.items() if key[0] == "Country"]
</snippet></ROW><ROW><id>9567173</id><snippet>[
    (('Country', 'UK'), 1),
    (('Country', 'GR'), 1), 
    (('Country', 'USA'), 4)
]
</snippet></ROW><ROW><id>9567173</id><snippet>countedQuestions = Counter([question for q in answers for question in q])
</snippet></ROW><ROW><id>9567173</id><snippet>Counter({
    'Question 4': 3, 
    'Question 1': 2, 
    'Question 3': 1
})
</snippet></ROW><ROW><id>9567173</id><snippet>Counter</snippet></ROW><ROW><id>9567173</id><snippet>dict</snippet></ROW><ROW><id>9567173</id><snippet>dict</snippet></ROW><ROW><id>9567173</id><snippet>print("Number of users that answer Question 4:", countedQuestions['Question 4'])
Number of users that answer Question 4: 3
</snippet></ROW><ROW><id>9567221</id><snippet>get_range</snippet></ROW><ROW><id>9567221</id><snippet>start</snippet></ROW><ROW><id>9567221</id><snippet>row_count</snippet></ROW><ROW><id>9567221</id><snippet>finish</snippet></ROW><ROW><id>9567221</id><snippet>start</snippet></ROW><ROW><id>9567221</id><snippet>row_count</snippet></ROW><ROW><id>9567414</id><snippet>from subprocess import Popen

resolve = Popen(["p4", "resolve"])
stdout, stderr = resolve.communicate("m")
</snippet></ROW><ROW><id>9567535</id><snippet>from multiprocessing import Manager
manag = Manager()
serviceLock = manag.Lock()
serviceStatusDict = manag.dict()
</snippet></ROW><ROW><id>9567791</id><snippet>frequences</snippet></ROW><ROW><id>9567791</id><snippet>key</snippet></ROW><ROW><id>9567791</id><snippet>&gt;&gt;&gt; max(frequencies, key=counts.get())
</snippet></ROW><ROW><id>9567791</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; l = [random.randrange(0, 5) for _ in range(50)]
&gt;&gt;&gt; frequencies = {}
&gt;&gt;&gt; for i in l:
...     frequencies[i] = frequencies.get(i, 0) + 1
... 
&gt;&gt;&gt; frequencies
{0: 11, 1: 13, 2: 8, 3: 8, 4: 10}
&gt;&gt;&gt; mode = max((v, k) for k, v in frequencies.iteritems())[1]
&gt;&gt;&gt; mode
1
&gt;&gt;&gt; max_freq = max(frequencies.itervalues())
&gt;&gt;&gt; modes = [k for k, v in frequencies.iteritems() if v == max_freq]
&gt;&gt;&gt; modes
[1]
</snippet></ROW><ROW><id>9567791</id><snippet>cmp</snippet></ROW><ROW><id>9567974</id><snippet>&gt;&gt;&gt; configParser('conffig.ini') # should not exist
Traceback (most recent call last):
    ...
IOError: No such file: ...
</snippet></ROW><ROW><id>9567974</id><snippet>&gt;&gt;&gt; try:
...   configParser('conffig.ini') # should not exist
... except IOError as e:
...   print('ok' if str(e).endswith(os.path.abspath('conffig.ini')) else 'fail')
ok
</snippet></ROW><ROW><id>9568103</id><snippet>%</snippet></ROW><ROW><id>9568776</id><snippet>shlex.split()</snippet></ROW><ROW><id>9568776</id><snippet>&gt;&gt;&gt; shlex.split("name1=abc name2='def' name3=\"ghi klm\"")
['name1=abc', 'name2=def', 'name3=ghi klm']
</snippet></ROW><ROW><id>9569194</id><snippet>urllib2</snippet></ROW><ROW><id>9569194</id><snippet>json.load</snippet></ROW><ROW><id>9569233</id><snippet>./configure --prefix=/tmp/work/mdorier1/local
</snippet></ROW><ROW><id>9569236</id><snippet>scatter</snippet></ROW><ROW><id>9569236</id><snippet>size</snippet></ROW><ROW><id>9569236</id><snippet>s</snippet></ROW><ROW><id>9569236</id><snippet>color</snippet></ROW><ROW><id>9569236</id><snippet>c</snippet></ROW><ROW><id>9569236</id><snippet>import matplotlib.pyplot as plt
import numpy as np

NPOINTS = 1000

np.random.seed(101)
lat = np.random.random(NPOINTS)*8+44
lon = np.random.random(NPOINTS)*100-50
counts = np.random.randint(0,1000,NPOINTS)

plt.subplot(211)
plt.scatter(lat, lon, c=counts)
plt.colorbar()
plt.subplot(212)
plt.scatter(lat, lon, s=counts)

plt.savefig('scatter_example.png')
plt.show()
</snippet></ROW><ROW><id>9569236</id><snippet>size</snippet></ROW><ROW><id>9569236</id><snippet>plt.figure()
COUNT_TO_SIZE = 1./10
plt.scatter(lat, lon, s=counts*COUNT_TO_SIZE)
plt.savefig('scatter_example2.png')
</snippet></ROW><ROW><id>9569408</id><snippet>PyLibMCTagsCache = type("PyLibMCTagsCache", 
                        (BaseTagsMemcachedCache,),
                        vars(PyLibMCCache))
</snippet></ROW><ROW><id>9569895</id><snippet>clean</snippet></ROW><ROW><id>9569895</id><snippet>from django.core.exceptions import ValidationError

class MyModel(models.Model):
     ...
     def clean(self):
         if self.call_me and not self.telephone.strip():
             raise ValidationError('Telephone is required')
</snippet></ROW><ROW><id>9569895</id><snippet>clean</snippet></ROW><ROW><id>9569895</id><snippet>clean</snippet></ROW><ROW><id>9569895</id><snippet>ModelForm</snippet></ROW><ROW><id>9569895</id><snippet>category</snippet></ROW><ROW><id>9569895</id><snippet>category</snippet></ROW><ROW><id>9569895</id><snippet>CharField</snippet></ROW><ROW><id>9569895</id><snippet>choices</snippet></ROW><ROW><id>9569895</id><snippet>clean</snippet></ROW><ROW><id>9569951</id><snippet>if nMultipleMostCloseToMin == minNum:
    nowIndex = 0
elif sqrtOfMaxNum &lt;= minNum:
    nowIndex = nMultipleMostCloseToMin + n - minNum
elif sqrtOfMaxNum &gt; minNum:
    nowIndex = nMultipleMostCloseToMin + n - minNum + n
</snippet></ROW><ROW><id>9569951</id><snippet>elif</snippet></ROW><ROW><id>9569951</id><snippet>n</snippet></ROW><ROW><id>9569951</id><snippet>minNum</snippet></ROW><ROW><id>9569951</id><snippet>n</snippet></ROW><ROW><id>9569951</id><snippet>minNum</snippet></ROW><ROW><id>9569951</id><snippet>nMultipleMostCloseToMin + n</snippet></ROW><ROW><id>9569951</id><snippet>sqrtOfMaxNum</snippet></ROW><ROW><id>9569951</id><snippet>minNum</snippet></ROW><ROW><id>9569951</id><snippet>n &lt;= minNum</snippet></ROW><ROW><id>9570119</id><snippet>&gt;&gt;&gt;&gt; import urlparse
&gt;&gt;&gt;&gt; base="http://somesite.com/level1/"
&gt;&gt;&gt;&gt; path="../page.html"
&gt;&gt;&gt;&gt; urlparse.urljoin(base,path)
&gt; 'http://somesite.com/page.html'

&gt;&gt;&gt;&gt; base="http://somesite.com/"
&gt;&gt;&gt;&gt; urlparse.urljoin(base,path)
&gt; 'http://somesite.com/../page.html'
</snippet></ROW><ROW><id>9570320</id><snippet>from scrapy.selector import HtmlXPathSelector
from scrapy.spider import BaseSpider
from scrapy.http import Request

DOMAIN = 'example.com'
URL = 'http://%s' % DOMAIN

class MySpider(BaseSpider):
    name = DOMAIN
    allowed_domains = [DOMAIN]
    start_urls = [
        URL
    ]

    def parse(self, response):
        hxs = HtmlXPathSelector(response)
        for url in hxs.select('//a/@href').extract():
            if not url.startswith('http://'):
                url= URL + url 
            print url
            yield Request(url, callback=self.parse)
</snippet></ROW><ROW><id>9570320</id><snippet>spider.py</snippet></ROW><ROW><id>9570320</id><snippet>bash$ scrapy runspider spider.py &gt; urls.out
bash$ cat urls.out| grep 'example.com' |sort |uniq |grep -v '#' |grep -v 'mailto' &gt; example.urls
</snippet></ROW><ROW><id>9570395</id><snippet>def userInput(ItemA, ItemB, *args):
    THIS = ItemA
    THAT = ItemB
    MORE = args

    print THIS,THAT,MORE


userInput('this','that','more1','more2','more3')
</snippet></ROW><ROW><id>9570395</id><snippet>*</snippet></ROW><ROW><id>9570395</id><snippet>args</snippet></ROW><ROW><id>9570395</id><snippet>MORE</snippet></ROW><ROW><id>9570395</id><snippet>args</snippet></ROW><ROW><id>9570395</id><snippet>userInput</snippet></ROW><ROW><id>9570395</id><snippet>this that ('more1', 'more2', 'more3')
</snippet></ROW><ROW><id>9570395</id><snippet>args</snippet></ROW><ROW><id>9570395</id><snippet>def userInput(ItemA, ItemB, *args):    
    lst=[]
    lst.append(ItemA)
    lst.append(ItemB)
    for arg in args:
        lst.append(arg)

    print ' '.join(lst)

userInput('this','that','more1','more2','more3') 
</snippet></ROW><ROW><id>9570395</id><snippet>this that more1 more2 more3
</snippet></ROW><ROW><id>9570581</id><snippet>Makefile</snippet></ROW><ROW><id>9570581</id><snippet>BUILDDIR      = build

...

clean:
    -rm -rf $(BUILDDIR)/*
</snippet></ROW><ROW><id>9570581</id><snippet>make clean</snippet></ROW><ROW><id>9570581</id><snippet>build</snippet></ROW><ROW><id>9570581</id><snippet>build</snippet></ROW><ROW><id>9570659</id><snippet>['90','','','','','91']</snippet></ROW><ROW><id>9570659</id><snippet>['90','90','90','90','90','91']</snippet></ROW><ROW><id>9570659</id><snippet> import csv
 spamReader = csv.reader(open('eggs.csv', 'rb'))
 for row in spamReader:
      a = map(lambda i : reduce(lambda y, z: z != "" and z or y, row[:i]), range(1,len(row)+1))
      print ",".join(a)
</snippet></ROW><ROW><id>9570742</id><snippet>print info.xpath("/path/to/nodes/info/text()")
</snippet></ROW><ROW><id>9570758</id><snippet>pat = re.compile(r'^(\d+\. |- |\*\* )?(?P&lt;word&gt;.*)')
</snippet></ROW><ROW><id>9570761</id><snippet>portal</snippet></ROW><ROW><id>9570761</id><snippet>for i in portal:
    ...
</snippet></ROW><ROW><id>9570761</id><snippet>i</snippet></ROW><ROW><id>9570761</id><snippet>[[100,100],[200,200]]</snippet></ROW><ROW><id>9570761</id><snippet>portal[i]</snippet></ROW><ROW><id>9570761</id><snippet>portal[[[100,100],[200,200]]]</snippet></ROW><ROW><id>9570761</id><snippet>i</snippet></ROW><ROW><id>9570761</id><snippet>portal[i]</snippet></ROW><ROW><id>9570761</id><snippet>i</snippet></ROW><ROW><id>9570782</id><snippet>os.chdir()</snippet></ROW><ROW><id>9570853</id><snippet>mylist[:4] = szResult.split()
</snippet></ROW><ROW><id>9570859</id><snippet>date</snippet></ROW><ROW><id>9570859</id><snippet>date = ' '.join(list_of_line[0:3])
</snippet></ROW><ROW><id>9571028</id><snippet>oscClient = OSCClient() # yey
</snippet></ROW><ROW><id>9571258</id><snippet>text = 'According to James, "we do not know" the source of the problem, "we are clueless".'
re.sub('".+?"', '', text)
</snippet></ROW><ROW><id>9571360</id><snippet>x = ['Some strings.', 1, 2, 3, 'More strings!']
y = [i.decode('UTF-8') if isinstance(i, basestring) else i for i in x]
</snippet></ROW><ROW><id>9571360</id><snippet>[u'Some strings.', 1, 2, 3, u'More strings!']
</snippet></ROW><ROW><id>9571453</id><snippet>COMPREPLY=( $( \
    COMP_LINE=$COMP_LINE  COMP_POINT=$COMP_POINT \
    COMP_WORDS="${COMP_WORDS[*]}"  COMP_CWORD=$COMP_CWORD \
    OPTPARSE_AUTO_COMPLETE=1 $1 ) )
</snippet></ROW><ROW><id>9571453</id><snippet>$1</snippet></ROW><ROW><id>9571453</id><snippet>optcomplete.autocomplete</snippet></ROW><ROW><id>9571453</id><snippet>#!/usr/bin/env python2
import os, sys
import optparse, optcomplete
from cStringIO import StringIO

if __name__ == '__main__':    
    parser = optparse.OptionParser()

    parser.add_option('-s', '--simple', action='store_true',
                      help="Simple really simple option without argument.")

    parser.add_option('-o', '--output', action='store',
                      help="Option that requires an argument.")

    opt = parser.add_option('-p', '--script', action='store',
                            help="Option that takes python scripts args only.")
    opt.completer = optcomplete.RegexCompleter('.*\.py')

    # debug env variables
    sys.stderr.write("\ncalled with args: %s\n" % repr(sys.argv))
    for k, v in sorted(os.environ.iteritems()):
        sys.stderr.write("  %s: %s\n" % (k, v))

    # setup capturing the actions of `optcomplete.autocomplete`
    def fake_exit(i):
      sys.stderr.write("autocomplete tried to exit with status %d\n" % i)
    sys.stdout = StringIO()
    sys.exit = fake_exit

    # Support completion for the command-line of this script.
    optcomplete.autocomplete(parser, ['.*\.tar.*'])

    sys.stderr.write("autocomplete tried to write to STDOUT:\n")
    sys.stderr.write(sys.stdout.getvalue())
    sys.stderr.write("\n")

    opts, args = parser.parse_args()
</snippet></ROW><ROW><id>9571453</id><snippet>$ ./test.py [tab]
called with args: ['./test.py']
  ...
  COMP_CWORD: 1
  COMP_LINE: ./test.py 
  COMP_POINT: 10
  COMP_WORDS: ./test.py 
  ...
  OPTPARSE_AUTO_COMPLETE: 1
  ...
autocomplete tried to exit with status 1
autocomplete tried to write to STDOUT:
-o -h -s -p --script --simple --help --output
</snippet></ROW><ROW><id>9571453</id><snippet>optcomplete.autocomplete</snippet></ROW><ROW><id>9571453</id><snippet>-o -h -s -p --script --simple --help --output</snippet></ROW><ROW><id>9571453</id><snippet>COMPREPLY=( ... )</snippet></ROW><ROW><id>9571640</id><snippet>'%d.ext' % (i,)
</snippet></ROW><ROW><id>9572101</id><snippet>*</snippet></ROW><ROW><id>9572101</id><snippet>**</snippet></ROW><ROW><id>9572101</id><snippet>&gt;&gt;&gt; my_list = [1, 2]
&gt;&gt;&gt; operator.add(*my_list)
3
</snippet></ROW><ROW><id>9572101</id><snippet>*</snippet></ROW><ROW><id>9572101</id><snippet>**</snippet></ROW><ROW><id>9572321</id><snippet>from sqlalchemy import create_engine
from sqlalchemy import Column, Integer, Text
from sqlalchemy.orm import composite, sessionmaker
from sqlalchemy.ext.declarative import declarative_base

engine = create_engine('sqlite:///')
session = sessionmaker(bind=engine)()
Base = declarative_base()

class MarkdownText(object):

    def __init__(self, text):
        self._text = text
        self._html = "&lt;html&gt;%s&lt;/html&gt;" % text

    @classmethod
    def _from_db(cls, text, html):
        mt = MarkdownText(text)
        mt._html = html
        return mt

    def __composite_values__(self):
        return (self._text, self._html)

    def __str__(self):
        return self._text

    @property
    def __html__(self):
        return self._html

class Foo(Base):
    __tablename__ = 'foo'

    id = Column(Integer, primary_key=True)
    a = composite(MarkdownText._from_db,
                     Column('_text', Text),
                     Column('_html', Text))

    def __init__(self, a):
        self.a = MarkdownText(a)

    def __repr__(self):
        return '(%s)' % (self.a)

Base.metadata.create_all(engine)

session.add_all([Foo('test'), Foo('nips')])
session.commit()
x = session.query(Foo).all()
print x
print x[0].a.__html__
print x[0].a
</snippet></ROW><ROW><id>9572321</id><snippet>[(test), (nips)]
&lt;html&gt;test&lt;/html&gt;
test
</snippet></ROW><ROW><id>9572341</id><snippet>lettermap = {
  'o': 1,
  'b': 2,
   ...
}

print sum(lettermap[c] for c in 'coffee')
</snippet></ROW><ROW><id>9572456</id><snippet>io</snippet></ROW><ROW><id>9572471</id><snippet>chmod +x filename.py</snippet></ROW><ROW><id>9572516</id><snippet>.rfind()</snippet></ROW><ROW><id>9572516</id><snippet>&gt;&gt;&gt; s = 'hello'
&gt;&gt;&gt; s.rfind('l')
3
</snippet></ROW><ROW><id>9572516</id><snippet>str</snippet></ROW><ROW><id>9572516</id><snippet>str()</snippet></ROW><ROW><id>9572668</id><snippet>def notify(s):
    print(s)

d = {"notify": notify}

d["notify"]("Hello, world!")
</snippet></ROW><ROW><id>9573137</id><snippet>def q(question, a, b, c, c_answer):
    total, tally = 0, 0
    print "", question
    print "   a. %s" % a
    print "   b. %s" % b
    print "   c. %s" % c
    u_answer = raw_input("your answer? ").strip()
    if c_answer == u_answer:
        print "Correct, the answer is %s!" % u_answer
        tally += 1
    else:
        print "I am sorry, but the correct answer is %s" % c_answer
    print "\n"
    total += 1
</snippet></ROW><ROW><id>9573137</id><snippet>q</snippet></ROW><ROW><id>9573137</id><snippet>def q(question, a, b, c, c_answer, total, tally):
    print "", question
    print "   a. %s" % a
    print "   b. %s" % b
    print "   c. %s" % c
    u_answer = raw_input("your answer? ").strip()
    if c_answer == u_answer:
        print "Correct, the answer is %s!" % u_answer
        tally += 1
    else:
        print "I am sorry, but the correct answer is %s" % c_answer
    print "\n"
    total += 1
    return total, tally
</snippet></ROW><ROW><id>9573137</id><snippet>question_pool = (
    ('What is 2 + 2?', 2, 3, 4, 'c'),
    ('What is blue mixed with yellow?', 'green', 'orange', 'pink', 'a'),
    ('How far does light travel in one nanosecond?', '10 mm', '20 cm', '30 m', 'b'),
    )

total, tally = 0, 0
for packet in question_pool:
    question, a, b, c, answer = packet
    total, tally = q(question, a, b, c, answer, total, tally)

print "you answered %d correctly, for a score of %2.0f%%" % (tally, 100.0 * tally / total)
</snippet></ROW><ROW><id>9573137</id><snippet>q</snippet></ROW><ROW><id>9573137</id><snippet>total</snippet></ROW><ROW><id>9573137</id><snippet>tally</snippet></ROW><ROW><id>9573137</id><snippet>total</snippet></ROW><ROW><id>9573137</id><snippet>tally</snippet></ROW><ROW><id>9573137</id><snippet>q</snippet></ROW><ROW><id>9573137</id><snippet>0</snippet></ROW><ROW><id>9573137</id><snippet>1</snippet></ROW><ROW><id>9573137</id><snippet>def q(question, a, b, c, c_answer):
    print "", question
    print "   a. %s" % a
    print "   b. %s" % b
    print "   c. %s" % c
    u_answer = raw_input("your answer? ").strip()
    if c_answer == u_answer:
        print "Correct, the answer is %s!\n" % u_answer
        return 1
    print "I am sorry, but the correct answer is %s" % c_answer
    return 0
</snippet></ROW><ROW><id>9573137</id><snippet>question_pool = (
    ('What is 2 + 2?', 2, 3, 4, 'c'),
    ('What is blue mixed with yellow?', 'green', 'orange', 'pink', 'a'),
    ('How far does light travel in one nanosecond?', '10 mm', '20 cm', '30 m', 'b'),
    )

total, tally = 0, 0
for packet in question_pool:
    question, a, b, c, answer = packet
    tally += q(question, a, b, c, answer)
    total += 1

print "you answered %d correctly, for a score of %.0f%%" % (tally, 100.0 * tally / total)
</snippet></ROW><ROW><id>9573259</id><snippet>if not myString:
</snippet></ROW><ROW><id>9573259</id><snippet>myString == ""</snippet></ROW><ROW><id>9573612</id><snippet>__iter__</snippet></ROW><ROW><id>9573612</id><snippet>def __iter__(self):
    return iter(self._iterable)
</snippet></ROW><ROW><id>9573612</id><snippet>def __iter__(self):
    for item in self._iterable:
        yield item
</snippet></ROW><ROW><id>9573612</id><snippet>yield item * 2</snippet></ROW><ROW><id>9573612</id><snippet>def __init__(self):
    # ... setup ...
    self.__iter__ = self._iterable.__iter__
</snippet></ROW><ROW><id>9573612</id><snippet>__iter__</snippet></ROW><ROW><id>9573612</id><snippet>__init__</snippet></ROW><ROW><id>9573612</id><snippet>def __init__(self):
    yield from self._iterable
</snippet></ROW><ROW><id>9573998</id><snippet>...
listener = socket(AF_INET, SOCK_STREAM)
listener.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
listener.bind((HOST, PORT))
listener.listen(32)
...
</snippet></ROW><ROW><id>9574007</id><snippet>import sqlite3

class DB(object):
    def __init__(self):
        self.conn_uri = './data.sqlite'
        [...]

    def doSomething(self,Param):
        conn = sqlite.connect(self.conn_uri)
        c = conn.cursor()
        c.execute("SELECT * FROM xyz WHERE ID = ?", Param)
</snippet></ROW><ROW><id>9574007</id><snippet>DB</snippet></ROW><ROW><id>9574007</id><snippet>__init__</snippet></ROW><ROW><id>9574007</id><snippet>threading.Lock</snippet></ROW><ROW><id>9574007</id><snippet>DB()</snippet></ROW><ROW><id>9574481</id><snippet>class FileReader:
    def __init__(self, fp):
        self.fp = fp
    def read_callback(self, size):
        return self.fp.read(size)
</snippet></ROW><ROW><id>9574481</id><snippet>c = pycurl.Curl()
c.setopt(c.URL, str(GEOSERVER_URL + '/rest/styles?name=' + path.basename(sldFile)))
c.setopt(pycurl.POST, 1)
filesize = path.getsize(sldFile)
f = open(sldFile,'rb')
c.setopt(pycurl.POSTFIELDSIZE, filesize)
c.setopt(pycurl.READFUNCTION, FileReader(f).read_callback)
c.setopt(pycurl.HTTPHEADER, ["Content-type: application/vnd.ogc.sld+xml"])
c.setopt(pycurl.USERPWD, GEOSERVER_USER + ':' + GEOSERVER_PASSWORD)

c.perform()
f.close()
</snippet></ROW><ROW><id>9574515</id><snippet>re.compile</snippet></ROW><ROW><id>9574520</id><snippet>e</snippet></ROW><ROW><id>9574520</id><snippet>except:</snippet></ROW><ROW><id>9574520</id><snippet>try: 
    print(e)
except NameError as e: 
    print(e)
</snippet></ROW><ROW><id>9574520</id><snippet>import sys
try:
    print(e)
except: # catch *all* exceptions
    e = sys.exc_info()[1]
    print(e)
</snippet></ROW><ROW><id>9574520</id><snippet>name 'e' is not defined
</snippet></ROW><ROW><id>9574520</id><snippet>def rF(f):
  with open(f,'r') as fin, open('outfile','w') as fou:
    next(fin)
    for l in fin:
      if "&gt;" in l:
        next(fin)
      else:
        fou.write(l.replace('\n','').replace('\t','').replace('\r',''))
</snippet></ROW><ROW><id>9574520</id><snippet>print()</snippet></ROW><ROW><id>9574529</id><snippet>mufprims</snippet></ROW><ROW><id>9574529</id><snippet>primslist=[getattr(mufprims, x) for x in dir(mufprims) if not primsfilter.match(x) ]
</snippet></ROW><ROW><id>9574880</id><snippet>def donuts(count):
  somedonuts = 'Number of donuts %s'
  if count &gt;= 10:
    somedonuts %= 'many'
  else:
    somedonuts %= str(count)
  return somedonuts
</snippet></ROW><ROW><id>9574880</id><snippet>str</snippet></ROW><ROW><id>9574880</id><snippet>dir(__builtins__)</snippet></ROW><ROW><id>9574880</id><snippet>%=</snippet></ROW><ROW><id>9574948</id><snippet>def excel_date(date1):
    temp = dt.datetime(1899, 12, 31)
    delta = date1 - temp
    return float(delta.days) + (float(delta.seconds) / 86400)
</snippet></ROW><ROW><id>9575013</id><snippet>django.contrib.auth.models</snippet></ROW><ROW><id>9575013</id><snippet>auth_user</snippet></ROW><ROW><id>9575013</id><snippet>django.contrib.auth.models.User</snippet></ROW><ROW><id>9575152</id><snippet>if len(results) &gt; 0:
    path = os.path.join(os.path.dirname(__file__), 'templates/sites.htm')
    self.response.out.write(template.render(path, {}))
</snippet></ROW><ROW><id>9575152</id><snippet>sites.htm</snippet></ROW><ROW><id>9575352</id><snippet>from lxml import etree

fname = 'output/so-help.html'

# parse
hparser = etree.HTMLParser(encoding='utf-8')
htree   = etree.parse(fname, hparser)

# garbled
htree.write('so-dumpu.html')

# targets
demo_name = htree.xpath("//span[@id='demo']")

# garbled
print 'name: "' + demo_name[0].text
</snippet></ROW><ROW><id>9575394</id><snippet>QuerySet</snippet></ROW><ROW><id>9575394</id><snippet>get</snippet></ROW><ROW><id>9575394</id><snippet>publisher = Publisher.objects.get(name='Apress')
print publisher.address
</snippet></ROW><ROW><id>9575394</id><snippet>MultipleObjectsReturned</snippet></ROW><ROW><id>9575394</id><snippet>ObjectDoesNotExist</snippet></ROW><ROW><id>9575394</id><snippet>get</snippet></ROW><ROW><id>9575394</id><snippet>try...except</snippet></ROW><ROW><id>9575394</id><snippet>QuerySet</snippet></ROW><ROW><id>9575394</id><snippet>for publisher in Publisher.objects.all():
    print publisher.address
</snippet></ROW><ROW><id>9575394</id><snippet>first_publisher = Publisher.objects.all()[0]
print first_publisher.address
</snippet></ROW><ROW><id>9575398</id><snippet>&lt;Unmap&gt;</snippet></ROW><ROW><id>9575398</id><snippet>root.bind("&lt;Unmap&gt;", lambda e: root.deiconify())
</snippet></ROW><ROW><id>9575398</id><snippet>root.resizable(FALSE,FALSE)
</snippet></ROW><ROW><id>9575414</id><snippet>()</snippet></ROW><ROW><id>9575414</id><snippet>all</snippet></ROW><ROW><id>9575414</id><snippet>myStuff.things.all()</snippet></ROW><ROW><id>9575493</id><snippet>def zipMap(func, iterable):
    for x in iterable:
        yield x,func(x)
</snippet></ROW><ROW><id>9575493</id><snippet>for x,y in zipMap(get_handler, the_list):
    ...
</snippet></ROW><ROW><id>9575493</id><snippet>def withHandler(iterable):
    for x in iterable:
        yield x,get_handler(x)
</snippet></ROW><ROW><id>9575493</id><snippet>for x,y in withHandler(the_list):
    ...
</snippet></ROW><ROW><id>9575563</id><snippet>ForeignKey</snippet></ROW><ROW><id>9575563</id><snippet>ManyToManyField</snippet></ROW><ROW><id>9575613</id><snippet>from collections import Counter
from itertools import chain

mylist = [
    [1,2,3,4],
    [2,5,6,7,7],
    [4,2,8,9]
]

counts = Counter(chain(*map(set,mylist)))

[[i for i in sublist if counts[i]==1] for sublist in mylist]
#[[1, 3], [5, 6, 7, 7], [8, 9]]
</snippet></ROW><ROW><id>9575729</id><snippet>Entry</snippet></ROW><ROW><id>9575729</id><snippet>str(your_entry)</snippet></ROW><ROW><id>9575729</id><snippet>your_entry.get()</snippet></ROW><ROW><id>9575729</id><snippet>from Tkinter import *
root = Tk()
e = Entry(root)
e.insert(0, "a default value")
e.pack()
print "str(e)  =&gt;", str(e)  # str() just gives us Tk's internal identifier
print "e.get() =&gt;", e.get() # use get() for contents of Entry
root.mainloop()
</snippet></ROW><ROW><id>9575729</id><snippet>str(e)  =&gt; .33906776
e.get() =&gt; a default value
</snippet></ROW><ROW><id>9575745</id><snippet>#!/bin/sh
echo this is a shell script

python &lt;&lt;@@
print 'hello from Python!'
@@
</snippet></ROW><ROW><id>9576006</id><snippet>&gt;&gt;&gt; (4, 5, 6) &gt; (1, 1, 1, 9)
True
</snippet></ROW><ROW><id>9576459</id><snippet>&lt;form action="/signup/" method="POST"&gt;</snippet></ROW><ROW><id>9576459</id><snippet>Username: &lt;input type="text" name="username" /&gt;</snippet></ROW><ROW><id>9576459</id><snippet>Password: &lt;input type="text" name="password" /&gt;</snippet></ROW><ROW><id>9576459</id><snippet>&lt;/form&gt;</snippet></ROW><ROW><id>9576459</id><snippet>def signup(request):
  username = request.POST['username']
  password = request.POST['password']
  User.objects.create_user(username=username, email='', password=password)
</snippet></ROW><ROW><id>9576459</id><snippet>login_required</snippet></ROW><ROW><id>9576459</id><snippet>LOGIN_URL</snippet></ROW><ROW><id>9576669</id><snippet>re.search("&lt;([^&gt;]*)", the_string).group(1)
</snippet></ROW><ROW><id>9576758</id><snippet>raw_input</snippet></ROW><ROW><id>9576758</id><snippet>paname</snippet></ROW><ROW><id>9576758</id><snippet>pbname</snippet></ROW><ROW><id>9576758</id><snippet>import random</snippet></ROW><ROW><id>9576758</id><snippet>int(raw_input("How many..."))</snippet></ROW><ROW><id>9576758</id><snippet>bulletcounter</snippet></ROW><ROW><id>9576758</id><snippet>input</snippet></ROW><ROW><id>9576758</id><snippet>env</snippet></ROW><ROW><id>9576758</id><snippet>/usr/bin/env python -V
</snippet></ROW><ROW><id>9576765</id><snippet>for t in results:
   (jName, kName) = t

   union(jName, kName)
</snippet></ROW><ROW><id>9576778</id><snippet>import django_tables2 as tables
from django_tables2.utils import Accessor

class TestTable(tables.Table)
    songid = tables.Column()
    links = tables.LinkColumn("playsongid", kwargs={"songid": Accessor("songid")})
</snippet></ROW><ROW><id>9576778</id><snippet>    playlist = conn.playlistinfo()
    table_data = []
    for info in playlist:
        tmp_dict = {"songid": info.id}
        tmp_dict["links"] = "%s - %s" % (get_attr(info, "artist"), get_attr(info, "title"))
        table_data.append(tmp_dict)
        del tmp_dict
    variables["table"] = PlaylistTable(table_data)  
</snippet></ROW><ROW><id>9576873</id><snippet>my_canvas.bbox("all")</snippet></ROW><ROW><id>9576892</id><snippet>django-compressor</snippet></ROW><ROW><id>9576892</id><snippet>STATIC_URL</snippet></ROW><ROW><id>9576892</id><snippet>{% static %}</snippet></ROW><ROW><id>9576892</id><snippet>TemplateFilter</snippet></ROW><ROW><id>9576892</id><snippet>COMPRESS_JS_FILTERS = [
    'compressor.filters.template.TemplateFilter',
]
</snippet></ROW><ROW><id>9576892</id><snippet>{% compress js %}</snippet></ROW><ROW><id>9576892</id><snippet>{% compress js %}
    &lt;script src="/my_script.js" type="text/javascript"&gt;&lt;/script&gt;
{% endcompress %}

// my_script.js
alert('{{ STATIC_URL|escapejs }}');
</snippet></ROW><ROW><id>9576962</id><snippet>[[...] * n]</snippet></ROW><ROW><id>9576962</id><snippet>[[...] for x in range(n)]</snippet></ROW><ROW><id>9576996</id><snippet>int()</snippet></ROW><ROW><id>9576996</id><snippet>float()</snippet></ROW><ROW><id>9577217</id><snippet>print map(str, nameList)
print "_____________________________"
print [str(f.fileName()) for f in fileList]
</snippet></ROW><ROW><id>9577217</id><snippet>print [str(name) for name in nameList]
</snippet></ROW><ROW><id>9577217</id><snippet>__repr__()</snippet></ROW><ROW><id>9577217</id><snippet>print repr(myObject)</snippet></ROW><ROW><id>9577217</id><snippet>PyQt4.QtCore.QString(u</snippet></ROW><ROW><id>9577303</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>9577303</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; import ast
&gt;&gt;&gt; with open('test.txt.') as f:
...  for line in f:
...   m = re.match('(.*) \w+ @ \w+ \w+', line)
...   print ast.literal_eval(m.group(1))
...
"Hello there, my friends," the tour guide says.
I'm a dingus who wants to put a backslash at the end of my statements. \
</snippet></ROW><ROW><id>9577303</id><snippet>.group(1)</snippet></ROW><ROW><id>9577303</id><snippet>import re
import ast

def match_line(line):
    while line:
        print "Trying to match:", line
        try:
            return ast.literal_eval(line)
        except SyntaxError, e:
            line = line[:e.offset - 1]
        except ValueError: # No way it would ever match
            break
    return None

with open('test.txt.') as f:
    for line in f:
        match = match_line(line.strip())
        print "Matched:", match
        print
</snippet></ROW><ROW><id>9577467</id><snippet>or</snippet></ROW><ROW><id>9577467</id><snippet>and</snippet></ROW><ROW><id>9577467</id><snippet>&gt;&gt;&gt; True or False and False
True
&gt;&gt;&gt; (True or False) and False
False
&gt;&gt;&gt; True or (False and False)
True
</snippet></ROW><ROW><id>9577467</id><snippet>if bulletcount in (bulletaloc, bulletbloc):
  if bulletcount % 2:
    print("Whoops! {} just got killed...".format(pbname))
  else:
    print("Ow! {}'s guts were spilled all over the floor".format(paname))
</snippet></ROW><ROW><id>9577690</id><snippet>&gt;&gt;&gt; (2004, 1, 1, 19, 48, 21, 3, 1, 0) &gt; (2004, 1, 1, 19, 48, 10, 3, 1, 0)
True
&gt;&gt;&gt; (2004, 1, 1, 19, 48, 21, 3, 1, 0) &gt; (2005, 1, 1, 19, 48, 21, 3, 1, 0)
False
</snippet></ROW><ROW><id>9577890</id><snippet>.</snippet></ROW><ROW><id>9577890</id><snippet>re.DOTALL</snippet></ROW><ROW><id>9577890</id><snippet>mystr = "&lt;a href='http://'&gt;\ntest\n'&lt;/a&gt;"
re.search(r"&lt;a[^&gt;]+&gt;.", mystr, re.MULTILINE|re.DOTALL)
</snippet></ROW><ROW><id>9577961</id><snippet>one two three   four    five    six seven   eight   nine
</snippet></ROW><ROW><id>9577961</id><snippet>f = open('test.txt','r')

string = f.read()

words = string.split('\t')
ind = words.index('seven')
desired = words[ind+1]
</snippet></ROW><ROW><id>9577961</id><snippet>f = open('test.txt','r')

string = f.read()
words = string.split('\t')

desired = [words[ind+1] for ind, word in enumerate(words) if word == "seven"]
</snippet></ROW><ROW><id>9577961</id><snippet>import re
f = open('testtest.txt','r')

string = f.read()

words = re.split('\t|\n',string)

desired = [words[ind+1] for ind, word in enumerate(words) if word == "seven"]
</snippet></ROW><ROW><id>9578595</id><snippet>def set_ping(ioloop, timeout):
    ioloop.add_timeout(timeout, lambda: set_ping(ioloop, timeout))
</snippet></ROW><ROW><id>9578595</id><snippet>ioloop = tornado.ioloop.IOLoop.instance()
set_ping(ioloop, timedelta(seconds=2))
ioloop.start()
</snippet></ROW><ROW><id>9578595</id><snippet>select</snippet></ROW><ROW><id>9578595</id><snippet>select</snippet></ROW><ROW><id>9578638</id><snippet>with open('yourfile.txt') as f:
  lines_after_17 = f.readlines()[17:]
</snippet></ROW><ROW><id>9578638</id><snippet>with open('yourfile.txt') as f:
  for _ in xrange(17):
    next(f)
  for line in f:
    # do stuff
</snippet></ROW><ROW><id>9578682</id><snippet>and the essential element in the array is Int</snippet></ROW><ROW><id>9578962</id><snippet>os.path.splitext()</snippet></ROW><ROW><id>9578962</id><snippet>import os, pprint
filenames = [f for f in os.listdir('D:\\Freeware')]
name_and_ext_list = [os.path.splitext(f) for f in filenames]
pprint.pprint(filenames)
pprint.pprint(name_and_ext_list)
</snippet></ROW><ROW><id>9578962</id><snippet>['a43.zip',
 'Amphetype-0.16-win32.exe',
 'aMSN-0.98.4-tcl85-windows-installer.exe',
 'andlinux-beta2-minimal.exe',
 'ATF-Cleaner.exe',
 'aurora-setup.exe',

[('a43', '.zip'),
 ('Amphetype-0.16-win32', '.exe'),
 ('aMSN-0.98.4-tcl85-windows-installer', '.exe'),
 ('andlinux-beta2-minimal', '.exe'),
 ('ATF-Cleaner', '.exe'),
 ('aurora-setup', '.exe'),
</snippet></ROW><ROW><id>9578962</id><snippet>os.path.splitext()</snippet></ROW><ROW><id>9578962</id><snippet>&gt;&gt;&gt; os.path.splitext('Zipped Party Food Invoice 22.09.2011.xlsx.zip')
('Zipped Party Food Invoice 22.09.2011.xlsx', '.zip')
</snippet></ROW><ROW><id>9578962</id><snippet>BCDEF</snippet></ROW><ROW><id>9578962</id><snippet>A</snippet></ROW><ROW><id>9578962</id><snippet>B, C, D, E, F</snippet></ROW><ROW><id>9578962</id><snippet>def replace_words ( input_string ):
    replacement_lists = { \
        "Electronics" : ["Computer", "CD Player", "Camera", "Coffee Grinder"],
        "Baked Goods" : ["Cheesecake", "Muffin","Cookie"] }

    output_string = input_string
    for type_of_thing, list_of_things in replacement_lists.iteritems():
        for thing in list_of_things:
            output_string = output_string.replace(thing, type_of_thing)

    return output_string

input_names = [ \
"Coffee Cup.jpg",
"Computer Disks.docx",
"Muffins.jar",
"CD Player Maintenance.lzma",
"Cookie Monster's 101 Types of Cookie.pdf" ]

output_names = [replace_words(x) for x in input_names]
</snippet></ROW><ROW><id>9578962</id><snippet>&gt;&gt;&gt; pprint.pprint(input_names)
['Coffee Cup.jpg',
 'Computer Disks.docx',
 'Muffins.jar',
 'CD Player Maintenance.lzma',
 "Cookie Monster's 101 Types of Cookie.pdf"]
&gt;&gt;&gt; pprint.pprint(output_names)
['Coffee Cup.jpg',
 'Electronics Disks.docx',
 'Baked Goodss.jar',
 'Electronics Maintenance.lzma',
 "Baked Goods Monster's 101 Types of Baked Goods.pdf"]
</snippet></ROW><ROW><id>9578962</id><snippet>&gt;&gt;&gt; teststring = "Coca-Cola - A History.pdf"
&gt;&gt;&gt; re.sub(r'(\W)-(\W)',r'\1\2',teststring)
'Coca-Cola  A History.pdf'
</snippet></ROW><ROW><id>9578962</id><snippet>\w</snippet></ROW><ROW><id>9578962</id><snippet>\W</snippet></ROW><ROW><id>9578962</id><snippet>\w</snippet></ROW><ROW><id>9578962</id><snippet>\w</snippet></ROW><ROW><id>9578962</id><snippet>\1</snippet></ROW><ROW><id>9578962</id><snippet>\2</snippet></ROW><ROW><id>9578962</id><snippet>r"..."</snippet></ROW><ROW><id>9578962</id><snippet>"..."</snippet></ROW><ROW><id>9578962</id><snippet>import os, shutil, re
def rename_file (original_filename):
    name, extension = os.path.splitext(original_filename)
    #remove one or more dashes, surrounded by non-word characters.
    modified_name = re.sub(r"(\W)-+(\W)",r"\1\2",name) 
    new_filename = modified_name + extension
    try:
        # moves files or directories (recursively)
        shutil.move(original_filename, new_filename)
    except shutil.Error:
        print ("Couldn't rename file %(original_filename)s!" % locals())

target_dir = r"/home/trinity/nmap"
targets = os.listdir(target_dir)
[rename_file(f) for f in targets]
</snippet></ROW><ROW><id>9579000</id><snippet>import datetime as dt
mytime = dt.datetime.strptime('0130','%H%M').time()
mydatetime = dt.datetime.combine(dt.date.today(), mytime)
</snippet></ROW><ROW><id>9579137</id><snippet>views.py</snippet></ROW><ROW><id>9579137</id><snippet>def myviews(request):
  .....
  form = MyForm({'like':'Yes'})
  ...
</snippet></ROW><ROW><id>9579140</id><snippet>digits = [12, 5, 39, 1, 40, 8, 17]
total = 0
for digit in digits:
    total = total * 40 + (digit-1)
</snippet></ROW><ROW><id>9579140</id><snippet>total = ...
digits = []
while total &gt; 0:
    digits = [(total % 40 + 1)] + digits
    total = total / 40
</snippet></ROW><ROW><id>9579790</id><snippet>import wx
import wx.animate

class MyPanel(wx.Panel):

    def __init__(self, parent, id):

        wx.Panel.__init__(self, parent, id)
        self.SetBackgroundColour("black")
        gif_fname = "skYmk.gif"
        gif = wx.animate.GIFAnimationCtrl(self, id, gif_fname, pos=(10, 10))
        gif.GetPlayer().UseBackgroundColour(True)

        self.gif = gif

    def CallMeLater(self, play=True):

        if play:
            self.gif.Play()
        else:
            self.gif.Stop()

app = wx.PySimpleApp()
frame = wx.Frame(None, -1, "wx.animate.GIFAnimationCtrl()", size = (200, 220))
MyPanel(frame, -1)
frame.Show(True)
app.MainLoop()
</snippet></ROW><ROW><id>9580141</id><snippet>django.contrib.sessions.backends.file</snippet></ROW><ROW><id>9580141</id><snippet>from django.contrib.sessions.backends.db import SessionStore as DbSessionStore

class SessionStore(DbSessionStore):
    def __init__(self, *args, **kwargs):
        print 'hello from SessionStore'
        super(SessionStore, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>9580141</id><snippet>SESSION_ENGINE='tcore.my_sessions'
</snippet></ROW><ROW><id>9580648</id><snippet>...
if cursor and table_name_converter(model._meta.db_table) in table_names: 
    # Drop the table now 
    output.append('%s %s %s;' % (style.SQL_KEYWORD('DROP TABLE IF EXISTS'), #&lt;-!
                                 style.SQL_TABLE(qn(model._meta.db_table)),
                                 style.SQL_KEYWORD('CASCADE')))    #&lt;-!
...
</snippet></ROW><ROW><id>9580675</id><snippet>&lt;dogs&gt;</snippet></ROW><ROW><id>9580675</id><snippet>&lt;</snippet></ROW><ROW><id>9580675</id><snippet>&lt;ns0:</snippet></ROW><ROW><id>9580675</id><snippet>&lt;</snippet></ROW><ROW><id>9580675</id><snippet>&lt;group xmlns:ns0="</snippet></ROW><ROW><id>9580675</id><snippet>&lt;group xmlns="</snippet></ROW><ROW><id>9580675</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>9580837</id><snippet>update</snippet></ROW><ROW><id>9580837</id><snippet>test</snippet></ROW><ROW><id>9580837</id><snippet>test</snippet></ROW><ROW><id>9580837</id><snippet>&gt;&gt;&gt; class Test(object):
...     test = {}
... 
&gt;&gt;&gt; class Test2(Test):
...     pass
... 
&gt;&gt;&gt; id(Test.test)
32424144
&gt;&gt;&gt; id(Test2.test)
32424144
&gt;&gt;&gt; Test.test.update({1:2})
&gt;&gt;&gt; Test2.test
{1: 2}
&gt;&gt;&gt; Test2.test = {}
&gt;&gt;&gt; id(Test2.test)
32424480
&gt;&gt;&gt; Test.test
{1: 2}
&gt;&gt;&gt; Test2.test
{}
&gt;&gt;&gt; del Test2.test
&gt;&gt;&gt; Test2.test
{1: 2}
</snippet></ROW><ROW><id>9581231</id><snippet>x</snippet></ROW><ROW><id>9581231</id><snippet>[400.0, 410.0, 420.0]</snippet></ROW><ROW><id>9581231</id><snippet>ValueError</snippet></ROW><ROW><id>9581231</id><snippet>float</snippet></ROW><ROW><id>9581231</id><snippet>int</snippet></ROW><ROW><id>9581231</id><snippet>keyList = []
dataList = []
with open('sample_data','r') as f:
    for line in f.readline():
        if line.startswith("#"):
            key, comment = line.split(',')
            keyList.append(key[1:])
        else: # it must be data
            dataList.append(line)

for data in dataList:
    data_list = data.split(',')
    try:
        x = map(float, data_list)
    except ValueError:
        pass
</snippet></ROW><ROW><id>9581536</id><snippet>ui.config</snippet></ROW><ROW><id>9581536</id><snippet>address = ui.config('changegroup.mail_someone', 'to_address')
</snippet></ROW><ROW><id>9581536</id><snippet>ui.configbool</snippet></ROW><ROW><id>9581536</id><snippet>ui.configlist</snippet></ROW><ROW><id>9581536</id><snippet>hg showconfig</snippet></ROW><ROW><id>9581536</id><snippet>$ hg showconfig changegroup.mail_someone.to_address
</snippet></ROW><ROW><id>9581536</id><snippet>some.email.address@somewhere.com</snippet></ROW><ROW><id>9581536</id><snippet>$ hg showconfig changegroup.mail_someone
</snippet></ROW><ROW><id>9581679</id><snippet>context_instance</snippet></ROW><ROW><id>9581679</id><snippet>return render_to_response('my_template.html',
                      my_data_dictionary,
                      context_instance=RequestContext(request))
</snippet></ROW><ROW><id>9581679</id><snippet>context_instance=RequestContext(request)</snippet></ROW><ROW><id>9581840</id><snippet>__file__</snippet></ROW><ROW><id>9581840</id><snippet>#config.py
pass
</snippet></ROW><ROW><id>9581840</id><snippet>#main.py
import os
import config

print config.__file__
print os.path.basename(config.__file__)
print os.path.dirname(config.__file__)
</snippet></ROW><ROW><id>9581840</id><snippet>&gt;&gt;&gt; import main
C:/Users/peterwood/Desktop\config.py
config.py
C:/Users/peterwood/Desktop
</snippet></ROW><ROW><id>9582057</id><snippet>abc.com</snippet></ROW><ROW><id>9582057</id><snippet>anything.abc.com</snippet></ROW><ROW><id>9582057</id><snippet>https://your_app_id.appspot.com</snippet></ROW><ROW><id>9582082</id><snippet>self.canvas.tag_bind('CLICK_AREA','&lt;Button&gt;',self.onClickArea)
</snippet></ROW><ROW><id>9582082</id><snippet>self.canvas.bind('&lt;Button&gt;',self.onClickArea)
</snippet></ROW><ROW><id>9582474</id><snippet># level, time and conc are previously read from a file

X,Y=[level,time]   
Z=conc.transpose() # Create the data to be plotted

cax = matshow(Z, origin='lower', vmin=0, vmax=500)
    # I am telling all the Z values above 500 will have the same color
    # in the plot (if vmin or vmax are not given, they are taken from
    # the input’s minimum and maximum value respectively)
grid(True)
cbar = colorbar(cax)
</snippet></ROW><ROW><id>9582510</id><snippet>from &lt;module&gt; import *</snippet></ROW><ROW><id>9582510</id><snippet>*</snippet></ROW><ROW><id>9582510</id><snippet>NameError</snippet></ROW><ROW><id>9582849</id><snippet>Element.gp</snippet></ROW><ROW><id>9582849</id><snippet>class Element:
    def __init__(self):
        self.gp = []
</snippet></ROW><ROW><id>9582849</id><snippet>gp</snippet></ROW><ROW><id>9582849</id><snippet>GaussPoint.argument</snippet></ROW><ROW><id>9582849</id><snippet>class GaussPoint:
    def __init__(self):
        self.argument = 0
</snippet></ROW><ROW><id>9582914</id><snippet>NAMES = 'value ref pre'.split()
for key, values in x.iteritems():
    valstrs = ['%s:%s' % (name, value)
               for name, value in zip(NAMES, values)
               if value]
    print ' '.join(valstrs)
</snippet></ROW><ROW><id>9583756</id><snippet>djangoserver() {
    cd $1
    source env/bin/activate &amp;&amp; python manage.py run_gunicorn 0.0.0.0:8000
}
</snippet></ROW><ROW><id>9583939</id><snippet>import re
search = re.search(r'&lt;/answ\s', i).start()
</snippet></ROW><ROW><id>9583950</id><snippet>import logging
logging.getLogger('suds.client').setLevel(logging.CRITICAL)
</snippet></ROW><ROW><id>9584088</id><snippet>import os
import random
import string
from datetime import datetime

....

def generate_random_string(digit_length=6, char_length=6):
    digits = "".join( [random.choice(string.digits) for i in xrange(6)] )
    chars = "".join( [random.choice(string.letters) for i in xrange(6)] )
    return digits + chars

def item_upload_to(instance, filename):
    file_root, file_ext = os.path.splitext(filename)
    date = datetime.now().strftime("%Y/%m/%d")
    random_name = generate_random_string() + file_ext
    return '/'.join(['user-media',date, random_name])

....


class GenericImage(models.Model):
    user = models.ForeignKey(User, default=NEWAVENUE_USER_ID)
    original_image = models.ImageField(upload_to=item_upload_to)
</snippet></ROW><ROW><id>9584480</id><snippet>self.instance</snippet></ROW><ROW><id>9584480</id><snippet>class PersonEditForm(forms.ModelForm):
    def clean_username(self):
        # self.instance is your current user

    ...
</snippet></ROW><ROW><id>9584480</id><snippet>if request.user.is_authenticated():
    if request.method == 'POST':
        form = PersonEditForm(request.POST, instance=request.user)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect(reverse('/success/'))

    else:
        form = PersonEditForm(instance=request.user, initial={'username': request.user.username})

    return render_to_response(template_name, {"form": form },
                          context_instance = RequestContext(request))
</snippet></ROW><ROW><id>9584605</id><snippet>recipe</snippet></ROW><ROW><id>9584605</id><snippet>&gt;&gt;&gt; {'a': 1, 'a': 2}
{'a': 2}
</snippet></ROW><ROW><id>9584656</id><snippet>&gt;&gt;&gt; datetime.datetime.utcfromtimestamp(1329429600)
datetime.datetime(2012, 2, 16, 22, 0)
</snippet></ROW><ROW><id>9585247</id><snippet>.png</snippet></ROW><ROW><id>9585247</id><snippet>*.png</snippet></ROW><ROW><id>9585247</id><snippet>*.png</snippet></ROW><ROW><id>9585247</id><snippet>*.txt</snippet></ROW><ROW><id>9585247</id><snippet>*.html</snippet></ROW><ROW><id>9585247</id><snippet>*.pdf</snippet></ROW><ROW><id>9585424</id><snippet>import boto
c = boto.connect_ec2(ec2_key, ec2_secret)
image = c.get_image(ec2_ami)

reservation = image.run(key_name=ec2_keypair,
                        security_groups=ec2_secgroups,
                        instance_type=ec2_instancetype)

instance = reservation.instances[0]
c.create_tags([instance.id], {"Name": instance_name})
</snippet></ROW><ROW><id>9586209</id><snippet>site.py</snippet></ROW><ROW><id>9586215</id><snippet>client.create_vertex({'name':'James'}) # single
client.create_vertex([{'name':'James'}, {'name':'Julie'}]) # batch
</snippet></ROW><ROW><id>9586215</id><snippet>batch = []
batch.append({'name':'James'})
batch.append({'name':'Julie'})
client.create_vertex(batch)
</snippet></ROW><ROW><id>9586241</id><snippet>list.index()</snippet></ROW><ROW><id>9586241</id><snippet>ValueError</snippet></ROW><ROW><id>9586241</id><snippet>if T3.index(num):
</snippet></ROW><ROW><id>9586241</id><snippet>if num in T3:
</snippet></ROW><ROW><id>9586273</id><snippet>#!/usr/bin/env perl
#
use warnings;
use strict;

my $rootdir = 'your/root/dir';
opendir( my $rootdh, $rootdir ) || die;
foreach my $dir ( readdir $rootdh ) {
    # skip over the special directories . and ..
    if ($dir =~ m/^\./) {
        next;
    }
    # only want directories
    next unless ( -d "$rootdir/$dir" );
    opendir( my $dh, "$rootdir/$dir" ) || die;
    foreach my $file ( readdir $dh ) {
        if ($file =~ m/^\./) {
            next;
        }
        # only want files this time
        next unless ( -f "$rootdir/$dir/$file" );
        my $extension = $file;
        $extension =~ s/.*\.//g;
        print "$rootdir/$dir/$file", " will be renamed to: ", "$rootdir/$dir/$dir.$extension", "\n";
        # uncomment this when you're ready!
        #rename "$rootdir/$dir/$file" "$rootdir/$dir/$dir.$extension";
    }
}
</snippet></ROW><ROW><id>9586336</id><snippet>*args</snippet></ROW><ROW><id>9586336</id><snippet>&gt;&gt;&gt; def f(**kwargs):
...  return kwargs
... 
&gt;&gt;&gt; f(T=1.0, N=20, L=10)
{'T': 1.0, 'L': 10, 'N': 20}
</snippet></ROW><ROW><id>9586336</id><snippet>*args</snippet></ROW><ROW><id>9586336</id><snippet>args</snippet></ROW><ROW><id>9586336</id><snippet>locals</snippet></ROW><ROW><id>9586336</id><snippet>&gt;&gt;&gt; def g(T, N, L):
...  return locals()
... 
&gt;&gt;&gt; g(T=1.0, N=20, L=10)
{'L': 10, 'T': 1.0, 'N': 20}
</snippet></ROW><ROW><id>9586336</id><snippet>return {'T': T, 'N': N, 'L': L}</snippet></ROW><ROW><id>9586343</id><snippet>stdout.close()</snippet></ROW><ROW><id>9586343</id><snippet>stdin.close()</snippet></ROW><ROW><id>9586343</id><snippet>.terminate()</snippet></ROW><ROW><id>9586343</id><snippet>.kill()</snippet></ROW><ROW><id>9586343</id><snippet>kill</snippet></ROW><ROW><id>9586343</id><snippet>SIGKILL</snippet></ROW><ROW><id>9586343</id><snippet>.wait()</snippet></ROW><ROW><id>9586343</id><snippet>subprocess.communicate</snippet></ROW><ROW><id>9586343</id><snippet>&gt;&gt;&gt; p = Popen(["sort"], stdin=PIPE, stdout=PIPE)
&gt;&gt;&gt; p.communicate("4\n3\n1")
('1\n3\n4\n', None)
&gt;&gt;&gt; p.returncode
0
</snippet></ROW><ROW><id>9586343</id><snippet>&gt;&gt;&gt; p = Popen(["ls", "/home/niklas/test"], stdin=PIPE, stdout=PIPE)
&gt;&gt;&gt; p.communicate()
('file1\nfile2\n', None)
&gt;&gt;&gt; p.returncode
0
</snippet></ROW><ROW><id>9586343</id><snippet>subprocess</snippet></ROW><ROW><id>9586604</id><snippet>requirements.txt</snippet></ROW><ROW><id>9586604</id><snippet>pip freeze &gt; requirements.txt
</snippet></ROW><ROW><id>9586604</id><snippet>pip install -r requirements.txt
</snippet></ROW><ROW><id>9586624</id><snippet>new_mac_tags = []
for tag in mac_tags:
    new_mac_tags += [tag, tag]
</snippet></ROW><ROW><id>9586624</id><snippet>from itertools import chain, izip
new_mac_tags = list(chain.from_iterable(izip(mac_tags, mac_tags)))
</snippet></ROW><ROW><id>9587272</id><snippet>'pwd_secret'</snippet></ROW><ROW><id>9587596</id><snippet>i</snippet></ROW><ROW><id>9587596</id><snippet>e</snippet></ROW><ROW><id>9587596</id><snippet>print i, '*', e, '=', (i * e)</snippet></ROW><ROW><id>9587596</id><snippet>str.__add__</snippet></ROW><ROW><id>9587596</id><snippet>print</snippet></ROW><ROW><id>9587596</id><snippet>__str__</snippet></ROW><ROW><id>9587596</id><snippet>i</snippet></ROW><ROW><id>9587596</id><snippet>e</snippet></ROW><ROW><id>9587596</id><snippet>print</snippet></ROW><ROW><id>9588284</id><snippet>django-admin-tools</snippet></ROW><ROW><id>9588284</id><snippet>django-admin-tools</snippet></ROW><ROW><id>9588284</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>9588284</id><snippet>STATIS_ROOT</snippet></ROW><ROW><id>9588284</id><snippet>ADMIN_MEDIA_PREFIX</snippet></ROW><ROW><id>9588479</id><snippet>$ pip install tweepy
</snippet></ROW><ROW><id>9588479</id><snippet>#!/usr/bin/env python

# After registering your app you should be able to
# find these values on your application page.
# https://dev.twitter.com/apps/{your_app_id}/show
# Make sure your app's access level is "Read and Write",
# or you won't be able to post.
consumer_key=""
consumer_secret=""
access_token=""
access_token_secret=""

auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)
api = tweepy.API(auth)

api.update_status('Maybe you should try Googling next time!')
</snippet></ROW><ROW><id>9588534</id><snippet>hcitool rssi</snippet></ROW><ROW><id>9588666</id><snippet>if _mail: break
</snippet></ROW><ROW><id>9588674</id><snippet>url = '/%s/%s/' % (forumslug, slugify(title)</snippet></ROW><ROW><id>9588674</id><snippet>else</snippet></ROW><ROW><id>9588902</id><snippet>import sys; new=sys.path[sys.__plen:]; del sys.path[sys.__plen:]; p=getattr(sys,'__egginsert',0); sys.path[p:p]=new; sys.__egginsert = p+len(new)
</snippet></ROW><ROW><id>9589105</id><snippet>imsave</snippet></ROW><ROW><id>9589105</id><snippet>scipy.misc.imsave</snippet></ROW><ROW><id>9589105</id><snippet>scipy.misc.imsave</snippet></ROW><ROW><id>9589105</id><snippet>Image</snippet></ROW><ROW><id>9589105</id><snippet>import numpy as np
import Image

# It's easier to work with a MxNx3 array instead of a 3xMxN array in PIL
a = np.zeros((500, 400, 3))
a[:100, :200, 1] = 255

im = Image.fromarray(a.astype(np.uint8))
im.save('test.png')
</snippet></ROW><ROW><id>9589105</id><snippet>from whatever import *</snippet></ROW><ROW><id>9589105</id><snippet>numpy</snippet></ROW><ROW><id>9589105</id><snippet>scipy</snippet></ROW><ROW><id>9589105</id><snippet>numpy</snippet></ROW><ROW><id>9589105</id><snippet>from scipy.misc import imsave</snippet></ROW><ROW><id>9589320</id><snippet>line == '\n'</snippet></ROW><ROW><id>9589320</id><snippet>for line in sys.stdin:
  stripped = line.strip()
  if not stripped: break
  lines.append(stripped)
</snippet></ROW><ROW><id>9589367</id><snippet>print '''
dog
cat
'''[1:-1]
</snippet></ROW><ROW><id>9589367</id><snippet>print '''
dog
cat
'''.strip()
</snippet></ROW><ROW><id>9589367</id><snippet>from textwrap import dedent

...

print dedent('''
    dog
    cat
    rabbit
    fox
''').strip()
</snippet></ROW><ROW><id>9589526</id><snippet>&gt;&gt;&gt; d = {'fn' : 'Joseph', 'ln' : 'Randall', 'phone' : '100' }
&gt;&gt;&gt; lst = ['200', '300', '400', '500']
&gt;&gt;&gt; [dict(d, phone=x) for x in lst]
[{'ln': 'Randall', 'phone': '200', 'fn': 'Joseph'}, {'ln': 'Randall', 'phone': '300', 'fn': 'Joseph'}, {'ln': 'Randall', 'phone': '400', 'fn': 'Joseph'}, {'ln': 'Randall', 'phone': '500', 'fn': 'Joseph'}]
</snippet></ROW><ROW><id>9589526</id><snippet>map</snippet></ROW><ROW><id>9589526</id><snippet>&gt;&gt;&gt; map(lambda x: dict(d, phone=x), lst)
[{'ln': 'Randall', 'phone': '200', 'fn': 'Joseph'}, {'ln': 'Randall', 'phone': '300', 'fn': 'Joseph'}, {'ln': 'Randall', 'phone': '400', 'fn': 'Joseph'}, {'ln': 'Randall', 'phone': '500', 'fn': 'Joseph'}]
</snippet></ROW><ROW><id>9589526</id><snippet>.update()</snippet></ROW><ROW><id>9589526</id><snippet>None</snippet></ROW><ROW><id>9589526</id><snippet>[None, None, None, None]</snippet></ROW><ROW><id>9589809</id><snippet>Bind</snippet></ROW><ROW><id>9589809</id><snippet>menubar.Bind(wx.EVT_MENU, onDocClick, documentation)
menubar.Bind(wx.EVT_MENU, onAboutClick, about)
</snippet></ROW><ROW><id>9589809</id><snippet>wx.Frame</snippet></ROW><ROW><id>9589809</id><snippet>import wx

def onDocClick(evt):
   message = wx.MessageBox("did it work?","Question",wx.YES_NO)

def onAboutClick(evt):
   print "clicked"

app = wx.App()
frame = wx.Frame(parent=None,title="RVR GUI",size=(315,490))
frame.Show()
panel = wx.Panel(frame,-1,size=(315,490))

menubar = wx.MenuBar()
fileMenu = wx.Menu()
documentation = fileMenu.Append(wx.ID_NEW,"Documentation")
about = fileMenu.Append(wx.ID_ABOUT,"About")
menubar.Append(fileMenu,'File')

frame.SetMenuBar(menubar)
frame.Bind(wx.EVT_MENU,onDocClick,documentation)
frame.Bind(wx.EVT_MENU,onAboutClick,about)
app.MainLoop()
</snippet></ROW><ROW><id>9589929</id><snippet>consecutive</snippet></ROW><ROW><id>9589929</id><snippet>.toordinal()</snippet></ROW><ROW><id>9589929</id><snippet>from datetime import datetime

date_strs = ['07-06-2010', '06-24-2010', '07-05-2010', '06-25-2010']
# date_strs = ['02-29-2012', '02-28-2012', '03-01-2012']
# date_strs = ['01-01-2000']
dates = [datetime.strptime(d, "%m-%d-%Y") for d in date_strs]

date_ints = set([d.toordinal() for d in dates])

if len(date_ints) == 1:
    print "unique"
elif max(date_ints) - min(date_ints) == len(date_ints) - 1:
    print "consecutive"
else:
    print "not consecutive"
</snippet></ROW><ROW><id>9589935</id><snippet>w.config(width=200 height=200)
</snippet></ROW><ROW><id>9589935</id><snippet>w=Canvas</snippet></ROW><ROW><id>9590027</id><snippet>a.text</snippet></ROW><ROW><id>9590027</id><snippet>guid</snippet></ROW><ROW><id>9590027</id><snippet>etree.tostring(a, method='text')</snippet></ROW><ROW><id>9590027</id><snippet>lxml</snippet></ROW><ROW><id>9590027</id><snippet>Element</snippet></ROW><ROW><id>9590029</id><snippet>inputready, outputready, exceptready = select.select(
    [proc.stdout, proc.stderr], # read list
    [proc.stdout, proc.stderr], # write list
    [proc.stdout, proc.stderr], # error list.
    0)                          # time out.
</snippet></ROW><ROW><id>9590029</id><snippet>select()</snippet></ROW><ROW><id>9590029</id><snippet>#!/usr/bin/python
import subprocess, os, select, time

path = "/usr/bin/python"
proc = subprocess.Popen([path, "foo.py"], shell=False,
                        stdin=subprocess.PIPE,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE)
for i in xrange(0,5):
    time.sleep(1)
    inputready, outputready, exceptready = select.select(
        [proc.stdout, proc.stderr], [proc.stdin,],
        [proc.stdout, proc.stderr, proc.stdin], 0)
    if not inputready:
        print "No Data",
    print inputready, outputready, exceptready
    for s in inputready:
        print s.fileno(),s.readline()

proc.terminate()
print "After Terminating"

for i in xrange(0,5):
    inputready, outputready, exceptready = select.select(
        [proc.stdout, proc.stderr], [proc.stdin,],
        [proc.stdout, proc.stderr, proc.stdin], 0)
    if not inputready:
        print "No Data",
    print inputready, outputready, exceptready
    for s in inputready:
        print s.fileno(),s.readline()
</snippet></ROW><ROW><id>9590029</id><snippet>foo.py</snippet></ROW><ROW><id>9590029</id><snippet>#!/usr/bin/python
print "Hello, world!"
</snippet></ROW><ROW><id>9590029</id><snippet>#!/usr/bin/python
import subprocess, os, select, time

path = "/usr/bin/python"
proc = subprocess.Popen([path, "foo.py"], shell=False,
                        stdin=subprocess.PIPE,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE)
for i in xrange(0,5):
    time.sleep(1)
    inputready, outputready, exceptready = select.select(
        [proc.stdout, proc.stderr], [proc.stdin,],
        [proc.stdout, proc.stderr, proc.stdin], 0)
    for s in inputready:
        line = s.readline()
        if line:
            print s.fileno(), line

proc.terminate()
print "After Terminating"

for i in xrange(0,5):
    time.sleep(1)
    inputready, outputready, exceptready = select.select(
        [proc.stdout, proc.stderr], [proc.stdin,],
        [proc.stdout, proc.stderr, proc.stdin], 0)
    for s in inputready:
        line = s.readline()
        if line:
            print s.fileno(), line
</snippet></ROW><ROW><id>9590029</id><snippet>timeout</snippet></ROW><ROW><id>9590029</id><snippet>select.select()</snippet></ROW><ROW><id>9590029</id><snippet>time.sleep()</snippet></ROW><ROW><id>9590029</id><snippet>/usr/bin/python 2&gt;&amp;1|tee test.out
</snippet></ROW><ROW><id>9590029</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>9590029</id><snippet>/dev/null</snippet></ROW><ROW><id>9590029</id><snippet>/usr/bin/python &lt;/dev/null 2&gt;&amp;1|tee test.out
</snippet></ROW><ROW><id>9590169</id><snippet>csv</snippet></ROW><ROW><id>9590169</id><snippet>csv.Reader</snippet></ROW><ROW><id>9590169</id><snippet>csv.DictReader</snippet></ROW><ROW><id>9590169</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>9590169</id><snippet>urllib.parse.quote</snippet></ROW><ROW><id>9590169</id><snippet>urllib.request</snippet></ROW><ROW><id>9590169</id><snippet>json.load</snippet></ROW><ROW><id>9590169</id><snippet>urllib.Request</snippet></ROW><ROW><id>9590169</id><snippet>csv.writer</snippet></ROW><ROW><id>9590169</id><snippet>with open(...) as inputs, open(..., "w") as outputs:
    inputs = csv.reader(inputs)
    outputs = csv.writer(outputs)

    for line in inputs:
        query = urllib.urlencode(...)
        result = json.load(urllib.request(...))
        outputs.write(result["spam"], result["ham"])
</snippet></ROW><ROW><id>9590374</id><snippet>awk -F "," 'NF&gt;1 &amp;&amp; NR&gt;1 {print $0 &gt;&gt; ("data_" $1 ".csv"); close("data_" $1 ".csv")}' data.csv
</snippet></ROW><ROW><id>9590374</id><snippet>data_ABW</snippet></ROW><ROW><id>9590374</id><snippet>NR&gt;1</snippet></ROW><ROW><id>9590374</id><snippet>$0</snippet></ROW><ROW><id>9590374</id><snippet>Data_$1</snippet></ROW><ROW><id>9590374</id><snippet>$1</snippet></ROW><ROW><id>9590374</id><snippet>close</snippet></ROW><ROW><id>9590374</id><snippet>awk -F "," 'NR==1 {header=$0}; NF&gt;1 &amp;&amp; NR&gt;1 {if(! files[$1]) {print header &gt;&gt; ("data_" $1 ".csv"); files[$1]=1}; print $0 &gt;&gt; ("data_" $1 ".csv"); close("data_" $1 ".csv")}' data.csv
</snippet></ROW><ROW><id>9590374</id><snippet>NR==1 {header=$0};</snippet></ROW><ROW><id>9590374</id><snippet>header</snippet></ROW><ROW><id>9590374</id><snippet>if(! files[$1]) ... files[$1]=1};</snippet></ROW><ROW><id>9590374</id><snippet>files</snippet></ROW><ROW><id>9590374</id><snippet>data_Aruba</snippet></ROW><ROW><id>9590374</id><snippet>$1</snippet></ROW><ROW><id>9590374</id><snippet>$2</snippet></ROW><ROW><id>9590385</id><snippet>decode()</snippet></ROW><ROW><id>9590385</id><snippet>errors</snippet></ROW><ROW><id>9590385</id><snippet>strict</snippet></ROW><ROW><id>9590385</id><snippet>replace</snippet></ROW><ROW><id>9590385</id><snippet>\ufffd</snippet></ROW><ROW><id>9590385</id><snippet>ignore</snippet></ROW><ROW><id>9590385</id><snippet>return xmlReader.read().decode(codec, errors='ignore')
</snippet></ROW><ROW><id>9590400</id><snippet>class someClass(object):
   def setup(self):
       self.i = 0
   def doSomething(self):       
       while self.i &lt;= 20:
          execute
          i += 1
          if i == 10:
             self.dumpState()
   ...
  @classmethod
   def loadState(cls, file_name):
      with open(file_name, 'rb') as handle:
          self = pickle.load(handle)
      if self.i &lt;= 20: # or other check for "running context"
          return self.doSomething()
</snippet></ROW><ROW><id>9590626</id><snippet>from boto.dynamodb.condition import *
conn = boto.connect_dynamodb()
table = conn.get_table("mytable")
...
result = table.query(
  hash_key = "66", 
  range_key_condition = BETWEEN(0, 9999))
</snippet></ROW><ROW><id>9590743</id><snippet>def ascii_encode_dict(data):
    ascii_encode = lambda x: x.encode('ascii')
    return dict(map(ascii_encode, pair) for pair in data.items())

json.loads(json_data, object_hook=ascii_encode_dict)
</snippet></ROW><ROW><id>9590743</id><snippet>&gt;&gt;&gt; json_data = '{"foo": "bar", "bar": "baz"}'
&gt;&gt;&gt; json.loads(json_data)                                # old call gives unicode
{u'foo': u'bar', u'bar': u'baz'}
&gt;&gt;&gt; json.loads(json_data, object_hook=ascii_encode_dict) # new call gives str
{'foo': 'bar', 'bar': 'baz'}
</snippet></ROW><ROW><id>9590743</id><snippet>object_hook</snippet></ROW><ROW><id>9590743</id><snippet>json.loads()</snippet></ROW><ROW><id>9590807</id><snippet>d = zip(a, b, c)
</snippet></ROW><ROW><id>9590886</id><snippet>\"</snippet></ROW><ROW><id>9590886</id><snippet>\;</snippet></ROW><ROW><id>9590886</id><snippet>$ python testme.py "With these words she greeted Prince Vasili Kuragin, a man of high rank and importance, who was the first to arrive at her reception. Anna Pavlovna had had a cough for some days. She was, as she said, suffering\" from la grippe; grippe being then a new word in St. Petersburg\""

With these words she greeted Prince Vasili Kuragin, a man of high rank and importance, who was the first to arrive at her reception. Anna Pavlovna had had a cough for some days. She was, as she said, suffering" from la grippe; grippe being then a new word in St. Petersburg"
</snippet></ROW><ROW><id>9590994</id><snippet>output.write('{:&gt;10}'.format(line[39:49].strip()))
#                                       ^^^^^^^^
</snippet></ROW><ROW><id>9591005</id><snippet>import socket, struct

def ip2long(ip):
    """
    Convert an IP string to long
    """
    packedIP = socket.inet_aton(ip)
    return struct.unpack("!L", packedIP)[0]
</snippet></ROW><ROW><id>9591005</id><snippet>&gt;&gt;&gt; socket.inet_ntoa(struct.pack('!L', 2130706433))
'127.0.0.1'
</snippet></ROW><ROW><id>9591110</id><snippet>Operating system: $s ($s [%s])
</snippet></ROW><ROW><id>9591110</id><snippet>Operating system: %s (%s [%s])
</snippet></ROW><ROW><id>9591269</id><snippet>match</snippet></ROW><ROW><id>9591269</id><snippet>&gt;&gt;&gt; re.sub(ur"§|a|á|Á", u"_", u"Halo §Ásdf")
u'H_lo __sdf'
</snippet></ROW><ROW><id>9591397</id><snippet>os._exit():
</snippet></ROW><ROW><id>9591397</id><snippet>sys.exit(n)</snippet></ROW><ROW><id>9591397</id><snippet>_exit()</snippet></ROW><ROW><id>9591397</id><snippet>fork()</snippet></ROW><ROW><id>9591448</id><snippet>&gt;&gt;&gt; testline = "{""key1"": ""value1"", ""key2"": {""value2-subkey1"": ""value2-subvalue2""}}"
&gt;&gt;&gt; testline
'{key1: value1, key2: {value2-subkey1: value2-subvalue2}}'
</snippet></ROW><ROW><id>9591448</id><snippet>"abc""def" == "abcdef"</snippet></ROW><ROW><id>9591448</id><snippet>testdata</snippet></ROW><ROW><id>9591448</id><snippet>&gt;&gt;&gt; testline = '{""key1"": ""value1"", ""key2"": {""value2-subkey1"": ""value2-subvalue2""}}'
&gt;&gt;&gt; literal_eval(testline.replace('""', '"'))
{'key2': {'value2-subkey1': 'value2-subvalue2'}, 'key1': 'value1'}
</snippet></ROW><ROW><id>9591448</id><snippet>&gt;&gt;&gt; testline = '"{""key1"": ""value1"", ""key2"": {""value2-subkey1"": ""value2-subvalue2""}}"'
&gt;&gt;&gt; literal_eval(testline[1:-1].replace('""', '"'))
{'key2': {'value2-subkey1': 'value2-subvalue2'}, 'key1': 'value1'}
</snippet></ROW><ROW><id>9591472</id><snippet>else:</snippet></ROW><ROW><id>9591472</id><snippet>if ...:</snippet></ROW><ROW><id>9591472</id><snippet>        if a&gt;c:
            return c
                else:
                    return a
</snippet></ROW><ROW><id>9591472</id><snippet>        if a&gt;c:
            return c
        else:
            return a
</snippet></ROW><ROW><id>9591472</id><snippet>def median(a, b, c):
    return sorted((a, b, c))[1]
</snippet></ROW><ROW><id>9591535</id><snippet>__dict__</snippet></ROW><ROW><id>9591535</id><snippet>self.__dict__.update(other.__dict__)</snippet></ROW><ROW><id>9591535</id><snippet>for k in filter(lambda k: not k.startswith('_'), dir(other)): # avoid copying private items
    setattr(self, k, getattr(other, k))
</snippet></ROW><ROW><id>9591648</id><snippet>class dbref:
    dbnumber=0
</snippet></ROW><ROW><id>9591648</id><snippet>dbnumber</snippet></ROW><ROW><id>9591648</id><snippet>class dbref(object):

    def __init__(self, number):
        self.dbnumber = number

    def getdbref(self):
        return self.dbnumber
</snippet></ROW><ROW><id>9591648</id><snippet>self</snippet></ROW><ROW><id>9591694</id><snippet>import urllib
import urllib2

def latex2svg(latexcode):
    """
    Turn LaTeX string to an SVG formatted string using the online SVGKit
    found at: http://svgkit.sourceforge.net/tests/latex_tests.html
    """
    txdata = urllib.urlencode({"latex": latexcode})
    url = "http://svgkit.sourceforge.net/cgi-bin/latex2svg.py"
    req = urllib2.Request(url, txdata)
    return urllib2.urlopen(req).read()

print latex2svg("2+2=4")
print latex2svg("\\frac{1}{2\\pi}")
</snippet></ROW><ROW><id>9592495</id><snippet>print</snippet></ROW><ROW><id>9592495</id><snippet>print()</snippet></ROW><ROW><id>9592495</id><snippet>print('Hello World')
</snippet></ROW><ROW><id>9592495</id><snippet>print</snippet></ROW><ROW><id>9592495</id><snippet>.py</snippet></ROW><ROW><id>9592495</id><snippet>python path/to/file.py</snippet></ROW><ROW><id>9592557</id><snippet>global</snippet></ROW><ROW><id>9592993</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>9593119</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>9593119</id><snippet>.communicate()</snippet></ROW><ROW><id>9593397</id><snippet>sysobjects</snippet></ROW><ROW><id>9593397</id><snippet>syscolumn</snippet></ROW><ROW><id>9593397</id><snippet>sysreferences</snippet></ROW><ROW><id>9593414</id><snippet>$ hg init repo
$ hg clone repo clone
</snippet></ROW><ROW><id>9593414</id><snippet>changegroup</snippet></ROW><ROW><id>9593414</id><snippet>repo</snippet></ROW><ROW><id>9593414</id><snippet>clone</snippet></ROW><ROW><id>9593414</id><snippet>$ echo a &gt; a
$ hg add a
$ hg commit -m 'a file'
</snippet></ROW><ROW><id>9593414</id><snippet>clone</snippet></ROW><ROW><id>9593414</id><snippet>$ hg push; hg  -R ../repo rollback
</snippet></ROW><ROW><id>9593414</id><snippet>clone</snippet></ROW><ROW><id>9593414</id><snippet>hg rollback</snippet></ROW><ROW><id>9593414</id><snippet>hg push</snippet></ROW><ROW><id>9593414</id><snippet>hg commit -u someone</snippet></ROW><ROW><id>9593414</id><snippet>hgweb</snippet></ROW><ROW><id>9593414</id><snippet>$ hg serve --config 'web.push_ssl=no' --config 'web.allow_push=*'
</snippet></ROW><ROW><id>9593414</id><snippet>repo</snippet></ROW><ROW><id>9593636</id><snippet>time</snippet></ROW><ROW><id>9593636</id><snippet>csv</snippet></ROW><ROW><id>9593636</id><snippet>import time
import csv

with open('your_file.csv', 'w') as f:
  csv_writer = csv.writer(f)
  s = ''
  while True:
    s = raw_input("Enter 'D' to write a log event ('q' to quit): ")
    if s == 'D':
      t = time.ctime()
      csv_writer.writerow(['D press event', t])
      print 'logged a D press event at {}'.format(t)
    elif s == 'q':
      break
    elif s:
      print "You entered {}, that wasn't a D.. ;)".format(s)
</snippet></ROW><ROW><id>9593817</id><snippet>def text_processing( file_location ):
    import re
    file_variable = open( file_location )
    lines = file_variable.readlines()

    double_letter = re.compile(r'.*(.)\1.*', re.IGNORECASE)
    double_letter_list = []

    for line in lines:
        for word in line.split(" "):
            match = double_letter.match(word)
            if match:
                double_letter_list.append(match.group())

    print double_letter_list
</snippet></ROW><ROW><id>9593862</id><snippet>x</snippet></ROW><ROW><id>9593862</id><snippet>[x]</snippet></ROW><ROW><id>9593862</id><snippet>x</snippet></ROW><ROW><id>9593862</id><snippet>x</snippet></ROW><ROW><id>9593862</id><snippet>dict_card[x["CARD_NUMBER"]] = x</snippet></ROW><ROW><id>9593862</id><snippet>dict_card[x["CARD_NUMBER"]] = [x]</snippet></ROW><ROW><id>9593862</id><snippet>for x in list_of_dicts:
    dict_card.setdefault(x['CARD_NUMBER'], []).append(x)
</snippet></ROW><ROW><id>9594091</id><snippet>collections.Counter</snippet></ROW><ROW><id>9594091</id><snippet>from collections import Counter

def getRecipe(name, quantity=1):
  if not name in recipes: return Counter({name: quantity})

  subitems = recipes[name]["ingredients"]["input"]
  return sum((getRecipe(item, quantity) for item in subitems), 
             Counter())

print repr(dict(getRecipe("solar_panel")))
# =&gt; {'copper': 39, 'refined_iron': 10, 'glass': 3, 
#     'rubber': 78, 'cobblestone': 8, 'tin': 4, 
#     'coal_dust': 3, 'nothing': 10, 'redstone': 6}
</snippet></ROW><ROW><id>9594185</id><snippet>tree = etree.parse(body)
</snippet></ROW><ROW><id>9594185</id><snippet>source</snippet></ROW><ROW><id>9594185</id><snippet>IOError</snippet></ROW><ROW><id>9594185</id><snippet>etree.XML()</snippet></ROW><ROW><id>9594185</id><snippet>tree = etree.parse(res)</snippet></ROW><ROW><id>9594185</id><snippet>opener.open()</snippet></ROW><ROW><id>9594185</id><snippet>etree.parse()</snippet></ROW><ROW><id>9594285</id><snippet>new_list.append(list[0] + list[1])</snippet></ROW><ROW><id>9594285</id><snippet>list[x - 1] + list[x] + list[x + 1]</snippet></ROW><ROW><id>9594285</id><snippet>len(list) - 1</snippet></ROW><ROW><id>9594285</id><snippet>list[x - 1] + list[x]</snippet></ROW><ROW><id>9594285</id><snippet>def sum_neighbors(list):
    new_list = []
    new_list.append(list[0] + list[1])
    x = 1
    while x &lt; len(list) - 1:
        new_list.append(list[x - 1] + list[x] + list[x + 1])
        x += 1
    new_list.append(list[x - 1] + list[x])

    return new_list
</snippet></ROW><ROW><id>9594366</id><snippet>import random

with open("somefile.txt", "rb") as f:
    for line in f:
        print ' '.join(random.sample(line.strip().split(), random.randint(1, 10)))
</snippet></ROW><ROW><id>9594366</id><snippet>random.sample()</snippet></ROW><ROW><id>9594366</id><snippet>population</snippet></ROW><ROW><id>9594366</id><snippet>k</snippet></ROW><ROW><id>9594399</id><snippet># Create default dict of lists
import collections
users = collections.defaultdict(list)

# Add coordinates 10,20 to Bob
users['Bob'].append((10, 20))

print users['Bob']
&gt;&gt;&gt; [(10,20)]

# Add coordinates 5,5 to Bob
users['Bob'].append((5, 5))


print users['Bob']
&gt;&gt;&gt; [(10,20), (5,5)]
</snippet></ROW><ROW><id>9594454</id><snippet>Listing</snippet></ROW><ROW><id>9594454</id><snippet>Listing</snippet></ROW><ROW><id>9594454</id><snippet>from django.db.models.signals import pre_save
from django.dispatch import receiver
from myapp.models import Listing
...
@receiver(pre_save, sender=Listing)
def check_image_requirement(sender, instance, **kwargs):
    if instance.images.count() == 0:
        raise your_own_exception("Listing is required to have at least one image")
</snippet></ROW><ROW><id>9594454</id><snippet>Listing.clean()</snippet></ROW><ROW><id>9594454</id><snippet>Model.clean()</snippet></ROW><ROW><id>9594454</id><snippet>clean()</snippet></ROW><ROW><id>9594454</id><snippet>full_clean()</snippet></ROW><ROW><id>9594454</id><snippet>is_valid()</snippet></ROW><ROW><id>9594454</id><snippet>save()</snippet></ROW><ROW><id>9594454</id><snippet>pre_save</snippet></ROW><ROW><id>9594454</id><snippet>Listing</snippet></ROW><ROW><id>9594454</id><snippet>save()</snippet></ROW><ROW><id>9594492</id><snippet>Document.objects.filter(tagdb__tag_text__in=doc.tags_as_csv.split(' , ')).distinct()
</snippet></ROW><ROW><id>9594705</id><snippet>[app:...]</snippet></ROW><ROW><id>9594705</id><snippet>settings</snippet></ROW><ROW><id>9594705</id><snippet>registry</snippet></ROW><ROW><id>9594705</id><snippet>config.registry.settings</snippet></ROW><ROW><id>9594705</id><snippet>request.registry.settings</snippet></ROW><ROW><id>9594705</id><snippet>settings</snippet></ROW><ROW><id>9594705</id><snippet>dict</snippet></ROW><ROW><id>9594705</id><snippet>Configurator(settings=settings, ...)</snippet></ROW><ROW><id>9594705</id><snippet>main</snippet></ROW><ROW><id>9594925</id><snippet>from collections import Counter

# create the counter, from most common to least common. reverse it, and get the first item.
item, num = Counter(b['Item'] for b in bookings).most_common()[::-1][0]
</snippet></ROW><ROW><id>9594925</id><snippet>from collections import Counter

c = Counter(b['Item'] for b in bookings)
item = min(c, key=c.get)
</snippet></ROW><ROW><id>9595108</id><snippet>import hashlib, uuid
salt = uuid.uuid4().hex
hashed_password = hashlib.sha512(password + salt).hexdigest()
</snippet></ROW><ROW><id>9595108</id><snippet>hex</snippet></ROW><ROW><id>9595108</id><snippet>bytes</snippet></ROW><ROW><id>9595108</id><snippet>hexdigest</snippet></ROW><ROW><id>9595108</id><snippet>digest</snippet></ROW><ROW><id>9595150</id><snippet>sqrt=x**(1/2)</snippet></ROW><ROW><id>9595150</id><snippet>1/2 == 0</snippet></ROW><ROW><id>9595308</id><snippet>"</snippet></ROW><ROW><id>9595308</id><snippet>'</snippet></ROW><ROW><id>9595308</id><snippet>['a']</snippet></ROW><ROW><id>9595308</id><snippet>["a"]</snippet></ROW><ROW><id>9595308</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; s1 = "['a']"
&gt;&gt;&gt; s2 = '["a"]'
&gt;&gt;&gt; json.loads(s1)
... some traceback removed ...
ValueError: No JSON object could be decoded
&gt;&gt;&gt; json.loads(s2)
[u'a']
</snippet></ROW><ROW><id>9595308</id><snippet>json.loads('["a2"]')</snippet></ROW><ROW><id>9595308</id><snippet>json.loads("['a2']")</snippet></ROW><ROW><id>9595321</id><snippet>lines = in_file.readlines()
segment_tab = [line.split('\t') for line in lines]
</snippet></ROW><ROW><id>9595321</id><snippet>segment_tab = [line.split('\t') for line in in_file]
</snippet></ROW><ROW><id>9595321</id><snippet>lines = in_file.read()
segment_tab = re.split(r'\t|\n+', lines)
</snippet></ROW><ROW><id>9595321</id><snippet>import re</snippet></ROW><ROW><id>9595423</id><snippet># looping over the items in a list
value = 1
for item in aList:
    if item == value:
        print "value is 1!"

# basic function with arguments and a return value
def aFunc(start):
    end = start + 1
    return end
print aFunc(1)
# result: 2

# some useful comparison operators
print 1 &gt; 2  # False
print 2 &gt; 1  # True
</snippet></ROW><ROW><id>9595741</id><snippet>response = HttpResponseRedirect(next)
# Do whatever else you need to do here with the response object
return response
</snippet></ROW><ROW><id>9595866</id><snippet>str.split</snippet></ROW><ROW><id>9595866</id><snippet>re.findall</snippet></ROW><ROW><id>9595866</id><snippet>&gt;&gt;&gt; s = '35.3 , 52.23; -623, 623.62 : -52,65'
&gt;&gt;&gt; re.findall(r'[-+]?\d+(?:\.\d*)?', s)
['35.3', '52.23', '-623', '623.62', '-52', '65']
</snippet></ROW><ROW><id>9595866</id><snippet>&gt;&gt;&gt; s = '(23432.434 , 32423, -4343; 343) 5555 (3244, 45445; -4545 )'
&gt;&gt;&gt; for s_ in re.findall(r'\(.*?\)', s):
...   re.findall(r'[-+]?\d+(?:\.\d*)?', s_)
... 
['23432.434', '32423', '-4343', '343']
['3244', '45445', '-4545']
</snippet></ROW><ROW><id>9595866</id><snippet>&gt;&gt;&gt; s = '(23432.434 , 32423, -4343; 343) 5555 (3244, 45445; -4545 )'
&gt;&gt;&gt; pat1 = re.compile(r'\(.*?\)')
&gt;&gt;&gt; pat2 = re.compile(r'[-+]?\d+(?:\.\d*)?')
&gt;&gt;&gt; [x for s_ in re.findall(pat1, s) for x in re.findall(pat2, s_)]
['23432.434', '32423', '-4343', '343', '3244', '45445', '-4545']
</snippet></ROW><ROW><id>9595916</id><snippet>import MyModule.MySubModule.myclass
</snippet></ROW><ROW><id>9595916</id><snippet>from pixie.libs.setup import Setup
</snippet></ROW><ROW><id>9595916</id><snippet>/
|-pixie
   |- __init__.py
   |- libs
     |- __init__.py
     |- setup.py
   |- models
</snippet></ROW><ROW><id>9595991</id><snippet>for i in range(0, N):
  prefix = set(now[:i])
  if now[i] in prefix: continue

  for j in range(1, K + 1):
    if j in prefix: continue

    # do something
</snippet></ROW><ROW><id>9595991</id><snippet>for i, j in itertools.product(range(0, N), range(1, K + 1)):
  prefix = now[:i]
  if now[i] not in prefix and j not in prefix:
    # do something with i and j
</snippet></ROW><ROW><id>9595991</id><snippet>[...] == []</snippet></ROW><ROW><id>9596398</id><snippet>def evens(n):
    return [2*n for n in range(1, n+1)]
</snippet></ROW><ROW><id>9596398</id><snippet>def evens(n):
    return range(2, 2*n+1, 2)
</snippet></ROW><ROW><id>9597146</id><snippet>subprocess.popen()</snippet></ROW><ROW><id>9597146</id><snippet>output, error = subprocess.popen(your_command, shell=True, 
                stdout=subprocess.PIPE, stderr=subprocess.PIPE);
</snippet></ROW><ROW><id>9597146</id><snippet>popen2()</snippet></ROW><ROW><id>9597146</id><snippet>No such file or directory</snippet></ROW><ROW><id>9597404</id><snippet>cloneTable</snippet></ROW><ROW><id>9597404</id><snippet>from sqlalchemy import Table
from sqlalchemy.ext.compiler import compiles
from sqlalchemy.sql.expression import UpdateBase

class InsertFromSelect(UpdateBase):
    def __init__(self, table, select):
        self.table = table
        self.select = select

@compiles(InsertFromSelect)
def visit_insert_from_select(element, compiler, **kw):
    return "INSERT INTO %s %s" % (
        compiler.process(element.table, asfrom=True),
        compiler.process(element.select)
    )

def cloneTable(name, t, metadata):
    cols = [c.copy() for c in t.columns]
    constraints = [c.copy() for c in t.constraints]
    return Table(name, metadata, *(cols + constraints))

# test data
from sqlalchemy import MetaData, Column, Integer
from sqlalchemy.engine import create_engine
engine = create_engine('sqlite://')
metadata = MetaData(engine)
t = Table('t',
          metadata,
          Column('id', Integer, primary_key=True),
          Column('number', Integer))
t.create()
engine.execute(t.insert().values(id=1, number=3))
engine.execute(t.insert().values(id=9, number=-3))

# create temp table
temp = cloneTable('temp', t, metadata)
temp.create()

# copy data
ins = InsertFromSelect(temp, t.select().where(t.c.id&gt;5))
engine.execute(ins)

# print result
for r in engine.execute(temp.select()):
    print r
</snippet></ROW><ROW><id>9597407</id><snippet>__init__.py</snippet></ROW><ROW><id>9597407</id><snippet>skeleton/
         bin/
             ..
         NAME/
              __init__.py
              .. 
         tests/
               __init__.py
               .. 
         docs/
               ..
</snippet></ROW><ROW><id>9597407</id><snippet>cp -r skeleton foobar
</snippet></ROW><ROW><id>9597407</id><snippet>foobar/
       bin/
           ..
       NAME/
            __init__.py
            .. 
       tests/
             __init__.py
             .. 
       docs/
            ..
</snippet></ROW><ROW><id>9597407</id><snippet>NAME</snippet></ROW><ROW><id>9597407</id><snippet>__init__.py</snippet></ROW><ROW><id>9597407</id><snippet>foobar/
       bin/
           ..
       someothername/
            __init__.py
            .. 
       tests/
             __init__.py
             .. 
       docs/
            ..
</snippet></ROW><ROW><id>9597407</id><snippet>import</snippet></ROW><ROW><id>9597407</id><snippet>NAME</snippet></ROW><ROW><id>9597407</id><snippet>NAME</snippet></ROW><ROW><id>9597407</id><snippet>__init__.py</snippet></ROW><ROW><id>9597407</id><snippet>NAME</snippet></ROW><ROW><id>9597407</id><snippet>somethingelse</snippet></ROW><ROW><id>9597407</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>9597407</id><snippet>import imp
print imp.find_module("NAME")
</snippet></ROW><ROW><id>9597818</id><snippet>urlparse.urljoin()</snippet></ROW><ROW><id>9597824</id><snippet>&gt;&gt;&gt; a, b, c = [1, 2, 3]
&gt;&gt;&gt; print a, b, c
1 2 3
</snippet></ROW><ROW><id>9597824</id><snippet>&gt;&gt;&gt; myIndexArray = [1, 2, 3]
&gt;&gt;&gt; first, second, third = myIndexArray
&gt;&gt;&gt; print "First: %d, Second: %d" % (first, second)
First: 1, Second: 2
</snippet></ROW><ROW><id>9597824</id><snippet>__iter__</snippet></ROW><ROW><id>9597824</id><snippet>&gt;&gt;&gt; class MyClass(object):
...   def __iter__(self):
...     return iter([1, 2, 3])
... 
&gt;&gt;&gt; a, b, c = MyClass()
&gt;&gt;&gt; print a, b, c
1 2 3
</snippet></ROW><ROW><id>9598311</id><snippet>x()</snippet></ROW><ROW><id>9598311</id><snippet>Foo</snippet></ROW><ROW><id>9598311</id><snippet>y()</snippet></ROW><ROW><id>9598311</id><snippet>Bar</snippet></ROW><ROW><id>9598311</id><snippet>Baz</snippet></ROW><ROW><id>9598649</id><snippet>from PyQt4.QtGui import QWidget, QApplication, QTreeView, QListView, QTextEdit, \
                        QSplitter, QHBoxLayout

import sys

class MainWindow(QWidget):
    def __init__(self):
        QWidget.__init__(self)

        treeView = QTreeView()
        listView = QListView()
        textEdit = QTextEdit()
        splitter = QSplitter(self)

        splitter.addWidget(treeView)
        splitter.addWidget(listView)
        splitter.addWidget(textEdit)

        layout = QHBoxLayout()
        layout.addWidget(splitter)
        self.setLayout(layout)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    mainWindow = MainWindow()
    mainWindow.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>9599475</id><snippet>csv</snippet></ROW><ROW><id>9599475</id><snippet>import csv, itertools
with open('file.csv', 'wb') as f:
    writer = csv.writer(f, delimiter="\t")
    writer.writerows(list(itertools.chain(*t)) for t in results)
</snippet></ROW><ROW><id>9599614</id><snippet>Foo-Bar:</snippet></ROW><ROW><id>9599614</id><snippet>@</snippet></ROW><ROW><id>9599614</id><snippet>marker field-name : data</snippet></ROW><ROW><id>9599614</id><snippet>text = """
col-1,col-2,Path: 9876 (IGP) Local-Pref: 310000   MED: 0 Communities: 1234:6 1234:95 1234:101 1234:202 1234:500 1234:903 1234:3369 1234:8000 1234:8002 1234:16925 9876:19827 Next Hop: x.x.127.151   Originator ID: x.x.155.144 Cluster List: 0.0.29.99 0.0.29.97 0.0.26.245 0.0.2.179 ,col-4,col-5
"""

import re

text = re.sub(r'([A-Z][A-Za-z -]+:)', r'@\1', text)
data = {}
for m in re.finditer(r'@(.+?):([^,@]+)', text):
    data[m.group(1)] = m.group(2).strip()

import pprint
pprint.pprint(data)
</snippet></ROW><ROW><id>9599614</id><snippet> {'Cluster List': '0.0.29.99 0.0.29.97 0.0.26.245 0.0.2.179',
  'Communities': '1234:6 1234:95 1234:101 1234:202 1234:500 1234:903 1234:3369 1234:8000 1234:8002 1234:16925 9876:19827',
  'Local-Pref': '310000',
  'MED': '0',
  'Next Hop': 'x.x.127.151',
  'Originator ID': 'x.x.155.144',
  'Path': '9876 (IGP)'}
</snippet></ROW><ROW><id>9599863</id><snippet>assertRaises</snippet></ROW><ROW><id>9599863</id><snippet>class testExample(unittest.TestCase):

    def test_generatorExample(self):
        with self.assertRaises(RuntimeError):
            list(Example().generatorExample())
</snippet></ROW><ROW><id>9599863</id><snippet>lambda</snippet></ROW><ROW><id>9599863</id><snippet>self.assertRaises(RuntimeError, lambda: list(Example().generatorExample()))
</snippet></ROW><ROW><id>9600579</id><snippet>json.tool</snippet></ROW><ROW><id>9600579</id><snippet>$ echo '{"json":"obj"}' | python -mjson.tool
{
    "json": "obj"
}
</snippet></ROW><ROW><id>9601227</id><snippet>src/
├── hello.py
├── hello.pyc
├── hostname.py
├── hostname.pyc
</snippet></ROW><ROW><id>9601227</id><snippet>hostname.py</snippet></ROW><ROW><id>9601227</id><snippet>hello</snippet></ROW><ROW><id>9601780</id><snippet>exact</snippet></ROW><ROW><id>9601780</id><snippet>True</snippet></ROW><ROW><id>9601780</id><snippet>exact</snippet></ROW><ROW><id>9601780</id><snippet>False</snippet></ROW><ROW><id>9601780</id><snippet>def lists_with_sum(length, limit, exact=True):
    if length:
        for l in lists_with_sum(length-1, limit, False):
            gap = limit-sum(l)
            for i in range(gap if exact else 0, gap+1):
                yield l + [i]
    else:
        yield []
</snippet></ROW><ROW><id>9601824</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>9601824</id><snippet>pdb</snippet></ROW><ROW><id>9601824</id><snippet>run.py</snippet></ROW><ROW><id>9601824</id><snippet>print args
</snippet></ROW><ROW><id>9601824</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>9601973</id><snippet>db2.commit()</snippet></ROW><ROW><id>9602241</id><snippet>str.split()</snippet></ROW><ROW><id>9602241</id><snippet>maxsplit</snippet></ROW><ROW><id>9602241</id><snippet>&gt;&gt;&gt; s = "John Frank Smith"
&gt;&gt;&gt; s.split(None, 1)
['John', 'Frank Smith']
</snippet></ROW><ROW><id>9602241</id><snippet>John    Frank Smith
</snippet></ROW><ROW><id>9602241</id><snippet>s.split(' ', 1)</snippet></ROW><ROW><id>9602319</id><snippet>r</snippet></ROW><ROW><id>9602319</id><snippet>textfile</snippet></ROW><ROW><id>9602319</id><snippet>textfile = r'c:\program\test.txt'
</snippet></ROW><ROW><id>9602319</id><snippet>\t</snippet></ROW><ROW><id>9602782</id><snippet>ASyncResult</snippet></ROW><ROW><id>9602957</id><snippet>draw.rectangle( [(0,128),(256,256)], fill=(255, 0,0) )</snippet></ROW><ROW><id>9603668</id><snippet>?</snippet></ROW><ROW><id>9603668</id><snippet>^a.*?ABC
</snippet></ROW><ROW><id>9603904</id><snippet>for rows in TweetList:
    data = urllib.urlencode(TweetList[rows])
</snippet></ROW><ROW><id>9603904</id><snippet>list = [1, 2, 3, 4]
for num in list:
    print num
</snippet></ROW><ROW><id>9603904</id><snippet>list = [1, 2, 3, 4]
for num in list:
    print list[num]
</snippet></ROW><ROW><id>9603904</id><snippet>tweets = []
tweetReader = csv.reader(open("C:\StoredTweets.csv", "r"))

for row in tweetReader:
    tweets.append({ 'tweet': row[0], 'date': row[1] })

for row in tweets:
    data = urllib.urlencode(row)
    .....
</snippet></ROW><ROW><id>9604022</id><snippet>packfmt = '&gt;issiibBB'
output=struct.unpack(packfmt,response)
</snippet></ROW><ROW><id>9604208</id><snippet>planet</snippet></ROW><ROW><id>9604208</id><snippet>m</snippet></ROW><ROW><id>9604208</id><snippet>p</snippet></ROW><ROW><id>9604208</id><snippet>planetv</snippet></ROW><ROW><id>9604208</id><snippet>planetp</snippet></ROW><ROW><id>9604208</id><snippet># Create a class to represent the planets.  Each planet will be an
# instance of this class, with attributes 'm' and 'p'.
class Planet(object):
    def __init__(self, m, p):
        self.m = m
        self.p = p

# Iterate over the three lists "in parallel" using zip().
for name, m, p in zip(planet, planetv, planetp):
    # Create a Planet and store it as a module-global variable,
    # using the name from the 'planet' list.
    globals()[name] = Planet(m, p)
</snippet></ROW><ROW><id>9604208</id><snippet>&gt;&gt;&gt; merc
&lt;__main__.Planet instance at 0x...&gt;
&gt;&gt;&gt; merc.m
2
&gt;&gt;&gt; merc.p
10
</snippet></ROW><ROW><id>9604407</id><snippet>split()</snippet></ROW><ROW><id>9604407</id><snippet>list.remove()</snippet></ROW><ROW><id>9604407</id><snippet>split()</snippet></ROW><ROW><id>9604407</id><snippet>split()</snippet></ROW><ROW><id>9604407</id><snippet>import timeit
import re

def splitit(input):
    res0 = input.split("|")
    res = []
    for element in res0:
        t = element.split("&lt;&gt;")
        if t != [element]:
            res0.remove(element)
            res.append(t)
    return (res0, res)

def split2(input):
    res0 = input.split("|")
    res1, res2 = [], []
    for r in res0:
        if "&lt;&gt;" in r:
            res2.append(r.split("&lt;&gt;"))
        else:
            res1.append(r)
    return res1, res2

def regexit(input):
    return re.split( "\||&lt;&gt;", input )


print "split:", timeit.Timer("splitit('a|b|c|de|f&lt;&gt;ge&lt;&gt;ah')","from __main__ import splitit").timeit()
print "split2:", timeit.Timer("split2('a|b|c|de|f&lt;&gt;ge&lt;&gt;ah')","from __main__ import split2").timeit()
print "regex:", timeit.Timer("regexit('a|b|c|de|f&lt;&gt;ge&lt;&gt;ah')","from __main__ import regexit").timeit()
print "split:", timeit.Timer("splitit('a|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;ah')","from __main__ import splitit").timeit()
print "split2:", timeit.Timer("split2('a|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;ah')","from __main__ import split2").timeit()
print "regex:", timeit.Timer("regexit('a|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;aha|b|c|de|f&lt;&gt;ge&lt;&gt;ah')","from __main__ import regexit").timeit()
</snippet></ROW><ROW><id>9604407</id><snippet>split: 6.14933066757
split2: 4.09465555192
regex: 5.10777759588
split: 47.0092413098
split2: 26.9300592585
regex: 25.9168630604
</snippet></ROW><ROW><id>9604407</id><snippet>split2()</snippet></ROW><ROW><id>9604442</id><snippet>fig.tight_layout()</snippet></ROW><ROW><id>9604442</id><snippet>pyplot</snippet></ROW><ROW><id>9604442</id><snippet>QtAgg</snippet></ROW><ROW><id>9604442</id><snippet>import matplotlib.pyplot as plt

#-- In your case, you'd do something more like:
# from matplotlib.figure import Figure
# fig = Figure()
#-- ...but we want to use it interactive for a quick example, so 
#--    we'll do it this way
fig, axes = plt.subplots(nrows=4, ncols=4)

for i, ax in enumerate(axes.flat, start=1):
    ax.set_title('Test Axes {}'.format(i))
    ax.set_xlabel('X axis')
    ax.set_ylabel('Y axis')

plt.show()
</snippet></ROW><ROW><id>9604442</id><snippet>import matplotlib.pyplot as plt

fig, axes = plt.subplots(nrows=4, ncols=4)

for i, ax in enumerate(axes.flat, start=1):
    ax.set_title('Test Axes {}'.format(i))
    ax.set_xlabel('X axis')
    ax.set_ylabel('Y axis')

fig.tight_layout()

plt.show()
</snippet></ROW><ROW><id>9604487</id><snippet>message.dest</snippet></ROW><ROW><id>9604487</id><snippet>'UI'</snippet></ROW><ROW><id>9604487</id><snippet>message.dest</snippet></ROW><ROW><id>9604772</id><snippet>widget.connect("button_press_event", on_button_press)

def on_button_press(widget, event):
    popup = get_popup_menu() # acquire your popup menu somehow
    popup.popup(None, None, None, event.button, event.time)
</snippet></ROW><ROW><id>9604899</id><snippet>from itertools import count
counter = lambda c=count(): next(c)
</snippet></ROW><ROW><id>9605030</id><snippet>Settings</snippet></ROW><ROW><id>9605030</id><snippet>Preferences</snippet></ROW><ROW><id>9605030</id><snippet>Project Structure</snippet></ROW><ROW><id>9605077</id><snippet>class Department(models.Model):
    slug = models.SlugField(
        verbose_name    = _(u'Slug'),
        help_text           = _(u'Uri identifier for this department.'),
        max_length=255
    )
    name = models.CharField(
        verbose_name    = _(u'Department Name'),
        help_text           = _(u'The department\'s name.'),
        max_length      = 255
    )
    description = models.TextField(
        verbose_name    = _(u'Description'),
        help_text           = _(u'Department\'s description')
    )
    people = models.ManyToManyField(
        Person,
        through             = 'DepartmentPeople',
        related_name    = 'people',
        verbose_name    = _(u'People'),
        help_text           = _(u'People in this Department')
    )
    order_by = models.IntegerField(
        verbose_name    = _(u'Ordering Weight'), 
        help_text           = _(u'This item\'s weight within a list.'),
        max_length      = 255
    )

    class Meta:
        verbose_name = _(u"Department")
        verbose_name_plural = _(u"Departments")
        ordering = ['order_by',]

    def people_list(self):
        return [dp.person for dp in DepartmentPeople.objects.filter(department=self).order_by('order')]

    def __unicode__(self):
        return self.name        
</snippet></ROW><ROW><id>9605077</id><snippet>class DepartmentPeople(models.Model):
    person = models.ForeignKey(
        Person,
        verbose_name    = _(u'Person'),
        help_text           = _(u'Person is a member of this deparment.'),
    )
    department = models.ForeignKey(
        Department,
        verbose_name    = _(u'Department'),
        help_text           = _(u'Pseron is a member of this department.'),
    )       
    order = models.IntegerField(
        verbose_name    = _(u'Order'),
        help_text           = _(u'What order to display this person within the department.'),
        max_length      = 255
    )

    class Meta:
        verbose_name = _(u"Department Person")
        verbose_name_plural = _(u"Department People")
        ordering = ['order',]

    def __unicode__(self):
        return self.person.first_name + " " + self.person.last_name + " is a member of " + self.department.name + (" in position %d" % self.order)
</snippet></ROW><ROW><id>9605077</id><snippet>class DepartmentPeopleInline(admin.TabularInline):
    model = DepartmentPeople
    extra = 1

class DepartmentAdmin(admin.ModelAdmin):
    inlines = (DepartmentPeopleInline,)

admin.site.register(Person, PersonAdmin)
admin.site.register(Department, DepartmentAdmin)
</snippet></ROW><ROW><id>9605077</id><snippet>class PersonAdmin(admin.ModelAdmin) :
    pass
</snippet></ROW><ROW><id>9605077</id><snippet>class PersonForm(forms.ModelForm):
    abstract = forms.CharField(
        widget=TinyMCE(attrs={'cols': 80, 'rows': 30})
    )

    class Meta:
        model = Person

class PersonAdmin(reversion.VersionAdmin):
    form = PersonForm
    # The Form Fieldsets
    fieldsets = [
        (
            None,
            {
                'fields'    : [('first_name', 'last_name', 'post_nominal', ), 'slug', 'title', 'headshot', 'large_photo', ('email', 'phone', ), 'abstract']
            },
        )
    ]

    # Prepopulated fields
    prepopulated_fields = {'slug': ('first_name', 'last_name', 'post_nominal', )}

    # Fields that are readonly
    #readonly_fields = ('slug', )

    def formfield_for_dbfield(self, db_field, **kwargs):
        if db_field.name == 'headshot':
            request = kwargs.pop("request", None)
            kwargs['widget'] = AdminImageWidget
            return db_field.formfield(**kwargs)
        return super(PersonAdmin, self).formfield_for_dbfield(db_field, **kwargs)
</snippet></ROW><ROW><id>9605159</id><snippet>points =  [10,10, 20,20]
pdb.gimp_paintbrush_default(layer, len(points), points)
</snippet></ROW><ROW><id>9605845</id><snippet>l[2:6] = ["".join(l[2:6])]
</snippet></ROW><ROW><id>9606203</id><snippet>from subprocess import PIPE
</snippet></ROW><ROW><id>9606203</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>9606203</id><snippet>PIPE</snippet></ROW><ROW><id>9606203</id><snippet>PIPE = subprocess.PIPE
</snippet></ROW><ROW><id>9606203</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>9606716</id><snippet>class Menu(Container):
    links = models.ManyToManyField(MenuItem)

class MenuItem(model.Models)
    title = models.CharField(max_length=200)
</snippet></ROW><ROW><id>9606716</id><snippet>menu_item_instance.menu_set.all()
</snippet></ROW><ROW><id>9606929</id><snippet>models.ForeignKey('DiscussionPost', null=True)
</snippet></ROW><ROW><id>9606962</id><snippet>DB = access.CurrentDb()
</snippet></ROW><ROW><id>9606962</id><snippet>CurrentDb()</snippet></ROW><ROW><id>9606962</id><snippet>os.remove("db1.mdb")
</snippet></ROW><ROW><id>9606962</id><snippet>del DB</snippet></ROW><ROW><id>9606962</id><snippet>os.remove()</snippet></ROW><ROW><id>9607129</id><snippet>w.move('key', 500, -250)
</snippet></ROW><ROW><id>9607276</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; lst = [['a', 'b'], ['c', 'd']]
&gt;&gt;&gt; ''.join(itertools.chain(*lst))
'abcd'
</snippet></ROW><ROW><id>9607471</id><snippet>{% if is_attending %} 
     &lt;button class="btn"&gt; # this code will executes when is_attending is True
         &lt;i class="icon-ok-sign"&gt;&lt;/i&gt; Attending
     &lt;/button&gt;
{% else %}
     &lt;form class="left" method="POST" action="/profile/event/{{ event.id }}/"&gt; # Always user reverse urls instead of Hard coded
     {% csrf_token %}
          &lt;input type="hidden" name="profile_id" value="{{profile.id}}" /&gt;
          &lt;button class="btn"&gt;
               Attending
          &lt;/button&gt;
     &lt;/form&gt;
{% endif %}
</snippet></ROW><ROW><id>9607471</id><snippet>@login_required
def event_profile(request, event_id)
    event = get_object_or_404(Event, id=event_id)
    if request.method == 'POST':
        try:
            id = request.POST.get('profile_id')
            attendee = Profile.objects.get(id=id)
            relationship = Event.objects.create(attendees__user=attendee, .... ) # set other variable you want
            is_attending = True
    else:
        # check in your event either your profile user is already attending or not? and set is_attending variable according to it
    data = { 
            'is_attending': is_attending,
             ....
            }
   return render_to_response('my_template.html',
                          data,
                          context_instance=RequestContext(request))
</snippet></ROW><ROW><id>9607671</id><snippet>myvariable</snippet></ROW><ROW><id>9607671</id><snippet>myfunction</snippet></ROW><ROW><id>9607671</id><snippet>def myfunction():
    myvariable = "Some Text"
    return myvariable
</snippet></ROW><ROW><id>9607671</id><snippet>for something in somethinglist:
    if something == iteminsomethinglist:
        mynewvariable1 = myfunction()
</snippet></ROW><ROW><id>9607671</id><snippet>datetypedetector</snippet></ROW><ROW><id>9607671</id><snippet>fc</snippet></ROW><ROW><id>9607671</id><snippet>DTYPE</snippet></ROW><ROW><id>9607671</id><snippet>def datetypedetector(fc):
                     ^^
</snippet></ROW><ROW><id>9607671</id><snippet>datetypedetector</snippet></ROW><ROW><id>9607671</id><snippet>    return DTYPE
</snippet></ROW><ROW><id>9607671</id><snippet>fc</snippet></ROW><ROW><id>9607671</id><snippet>DTYPE</snippet></ROW><ROW><id>9607671</id><snippet>datetypedetector</snippet></ROW><ROW><id>9607671</id><snippet>for fc in fcList:
    if fc == "SO_SOIL_P" or fc == "AS_ECOSITE_P":
        DTYPE = datetypedetector(fc)
        ...
</snippet></ROW><ROW><id>9607911</id><snippet>cmd2 = ['awk', '{if ($9 != "%MEM") {print $9}}']
</snippet></ROW><ROW><id>9607911</id><snippet>'''In this string, I don't need to escape a single ' character,
   or even a new-line, because the string only ends
   when it gets three ' characters in a row like this:'''

"""The same is true of double-quotes like this.
Of course, whitespace and both the ' and " quote characters
are safe in here."""
</snippet></ROW><ROW><id>9608097</id><snippet>def foo() : print( foo.bar )
exec "foo.bar = bar\n" + "foo()" in dict( globals(), bar = 1 )
</snippet></ROW><ROW><id>9608424</id><snippet>re.match(re.escape("bla"), "bla")</snippet></ROW><ROW><id>9608424</id><snippet>re.escape</snippet></ROW><ROW><id>9608424</id><snippet>r"..."</snippet></ROW><ROW><id>9608424</id><snippet>"..."</snippet></ROW><ROW><id>9608424</id><snippet>\\b</snippet></ROW><ROW><id>9608424</id><snippet>\b</snippet></ROW><ROW><id>9608424</id><snippet>r"..."</snippet></ROW><ROW><id>9608424</id><snippet>\b</snippet></ROW><ROW><id>9608467</id><snippet>email_content.decode('string_escape')</snippet></ROW><ROW><id>9608467</id><snippet>&gt;&gt;&gt; s = r'a\tb\nc'
&gt;&gt;&gt; print s.decode('string_escape')
a   b
c
</snippet></ROW><ROW><id>9608552</id><snippet>import urllib
self.redirect("sites.htm?%s" % urllib.urlencode(dict(a="this and that", b="back and forth)))
</snippet></ROW><ROW><id>9608719</id><snippet>for root, dirs, files in path:
</snippet></ROW><ROW><id>9608719</id><snippet>for root, dirs, files in os.walk(path):
</snippet></ROW><ROW><id>9608719</id><snippet>files</snippet></ROW><ROW><id>9608719</id><snippet>import os, os.path
import Image
from BeautifulSoup import BeautifulSoup as bs

path = 'C:\Users\gokalraina\Desktop\derm images'

for root, dirs, files in os.walk(path):
    for f in files:
        soup = bs(open(os.path.join(root, f)).read())
        for image in soup.findAll("img"):
            print "Image: %(src)s" % image
            im = Image.open(image)
            im.save(path+image["src"], "JPEG")
</snippet></ROW><ROW><id>9608729</id><snippet>config = Configurator(settings=**settings, root_factory=RootFactory)
config.add_route('product_edit', '/product/*traverse', factory=ProductFactory)

config.add_view(route_name='product_edit', name='edit', renderer='edit.mako', context=model.Product)
</snippet></ROW><ROW><id>9609176</id><snippet>log = logging.getLogger(__name__)</snippet></ROW><ROW><id>9609176</id><snippet>fileConfig</snippet></ROW><ROW><id>9609176</id><snippet>fileConfig</snippet></ROW><ROW><id>9609176</id><snippet>disable_existing_loggers=False</snippet></ROW><ROW><id>9609176</id><snippet>fileConfig</snippet></ROW><ROW><id>9609176</id><snippet>True</snippet></ROW><ROW><id>9609252</id><snippet>upload_url = blobstore.create_upload_url('media/imageUploadBig')</snippet></ROW><ROW><id>9609252</id><snippet>upload_url</snippet></ROW><ROW><id>9609252</id><snippet>&lt;form id="hiddenUpForm" style="display:none;" action="{{ upload_url|safe }}" enctype="multipart/form-data" target="upTarget" method="POST"&gt;
</snippet></ROW><ROW><id>9609402</id><snippet>-c</snippet></ROW><ROW><id>9609402</id><snippet>Popen(['/bin/sh', '-c', args[0], args[1], ...])</snippet></ROW><ROW><id>9609402</id><snippet>subprocess.check_call('vasp | tee tee_output', shell=True)
</snippet></ROW><ROW><id>9609465</id><snippet>axhline</snippet></ROW><ROW><id>9609465</id><snippet>axvline</snippet></ROW><ROW><id>9609465</id><snippet>import numpy as np
import matplotlib.pyplot as plt

xvec = np.linspace(-5.,5.,100)                               
x,y = np.meshgrid(xvec, xvec)
z = -np.hypot(x, y)                                

plt.contourf(x, y, z, 100)                             
plt.colorbar() 

plt.axhline(0, color='white')
plt.axvline(0, color='white')

plt.show()
</snippet></ROW><ROW><id>9609716</id><snippet>outfile = open(name + '.txt', 'a')</snippet></ROW><ROW><id>9609716</id><snippet>open(name, 'txt', 'a')</snippet></ROW><ROW><id>9609716</id><snippet>open</snippet></ROW><ROW><id>9609716</id><snippet>input</snippet></ROW><ROW><id>9609716</id><snippet>raw_input</snippet></ROW><ROW><id>9609716</id><snippet>input</snippet></ROW><ROW><id>9609722</id><snippet>auto_add_now=True</snippet></ROW><ROW><id>9609722</id><snippet>auto_now_add=True</snippet></ROW><ROW><id>9609722</id><snippet>from datetime import datetime

class Comment(MPTTModel):
    comment = models.CharField(max_length=1023)
    resource = models.ForeignKey('Resource')
    created_at = models.DateTimeField()
    parent = TreeForeignKey('self', null=True, blank=True, related_name='children')
    author = models.ForeignKey(User)

    class MPTTMeta:
        order_insertion_by = ['created_at']

    def save(self, *args, **kwargs):
        if not self.created_at:
            self.created_at = datetime.now()
        super(Comment, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>9610353</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; strings = 'abc534loif tvd645kgjf tv96fjbd_gfgf'.split()
&gt;&gt;&gt; for s in strings:
...   for match in re.finditer(r'\b([a-z]+)(\d+)(.+?)\b', s):
...     print match.groups()
... 
('abc', '534', 'loif')
('tvd', '645', 'kgjf')
('tv', '96', 'fjbd_gfgf')
</snippet></ROW><ROW><id>9610501</id><snippet>&gt;&gt;&gt; import jinja2
&gt;&gt;&gt; t = jinja2.Template("{% for i in items[:3] %}{{ i }}\n{% endfor %}")
&gt;&gt;&gt; items = range(10)
&gt;&gt;&gt; print(t.render(items=items))
0
1
2
</snippet></ROW><ROW><id>9610538</id><snippet>subprocess</snippet></ROW><ROW><id>9610538</id><snippet>from subprocess import Popen, PIPE                                        
p_dgst = Popen("openssl dgst -sha1 -sign /foo/1 /bar/1".split(),
               stdout=PIPE)
p_enc =  Popen("openssl enc -base64 -A".split(),
               stdin=p_dgst.stdout, stdout.PIPE)
my_value = p_enc.communicate()[0]
</snippet></ROW><ROW><id>9610616</id><snippet>function player_combos(array players, int minimum_total) {
  array result = []
  players = sort(players, metric=most points first)
  int total = 0
  for p1 in 0 .. length(players) {
    if players[p1].points*10 &lt; minimum_total - total:
      break
    total += players[p1].points
    for p2 in p1+1 .. length(players) {
      if players[p2].points*9 &lt; minimum_total - total:
        break
      total += players[p2].points
      for p3 in p2+1 .. length(players) {
        if players[p3].points*8 &lt; minimum_total - total:
          break
        total += players[p3].points
        # continue these nested loops up to p10
        ...
                    for p10 in p9+1 .. length(players):
                      if players[p10].points &lt; mininum_total - total:
                        break
                      # this is a valid combination
                      result.append((p1, p2, p3, p4, p5, p6, p7, p8, p9, p10))
        ...
        # remember to decrement total when we finish a loop iteration
        total -= players[p3].points
      }
      total -= players[p2].points
    }
    total -= players[p1].points
  }
  return result
}
</snippet></ROW><ROW><id>9610676</id><snippet>OrderedDict</snippet></ROW><ROW><id>9610676</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; od = OrderedDict(sorted(d.items(),
                     key=lambda t: t[1]['votes'],
                     reverse=True))
&gt;&gt;&gt; od
OrderedDict([(3, {'votes': 98, 'id': 14}),
             (2, {'votes': 10, 'id': 12}),
             (1, {'votes': 2, 'id': 10})])
</snippet></ROW><ROW><id>9610676</id><snippet>d</snippet></ROW><ROW><id>9610873</id><snippet>&gt;&gt;&gt; print ''.join([chr(x) for x in range(256)])
 ☺☻♥♦
♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]
^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡
«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²
■
</snippet></ROW><ROW><id>9610873</id><snippet>chcp 65001</snippet></ROW><ROW><id>9611083</id><snippet>&gt;&gt;&gt; class X: pass
... 
&gt;&gt;&gt; type(X)
&lt;type 'classobj'&gt;
&gt;&gt;&gt; X.__class__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: class X has no attribute '__class__'
&gt;&gt;&gt; x = X()
&gt;&gt;&gt; x.__class__
&lt;class __main__.X at 0x171b5d50&gt;
&gt;&gt;&gt; type(x)
&lt;type 'instance'&gt;
</snippet></ROW><ROW><id>9611083</id><snippet>__class__</snippet></ROW><ROW><id>9611083</id><snippet>type()</snippet></ROW><ROW><id>9611083</id><snippet>__class__</snippet></ROW><ROW><id>9611083</id><snippet>__class__</snippet></ROW><ROW><id>9611083</id><snippet>type()</snippet></ROW><ROW><id>9611083</id><snippet>&gt;&gt;&gt; class Z(object):
...     def __getattribute__(self, name):
...             return "ham"
... 
&gt;&gt;&gt; z = Z()
&gt;&gt;&gt; z.__class__
'ham'
&gt;&gt;&gt; type(z)
&lt;class '__main__.Z'&gt;
</snippet></ROW><ROW><id>9611083</id><snippet>type()</snippet></ROW><ROW><id>9611083</id><snippet>bool(x)</snippet></ROW><ROW><id>9611083</id><snippet>x.__nonzero()__</snippet></ROW><ROW><id>9611196</id><snippet>    for item in soup.fetch('a'):
        try:
            if (item['href'].startswith('/') or "tuftsalumni" in item['href']):
            (...)
        except KeyError:
            pass # or some other fallback action
</snippet></ROW><ROW><id>9611196</id><snippet>item.get('key','default')</snippet></ROW><ROW><id>9611196</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import urllib
from BeautifulSoup import BeautifulSoup

links = ["http://www.tuftsalumni.org"]

def print_hrefs(link):
    htmlSource = urllib.urlopen(link).read()
    soup = BeautifulSoup(htmlSource)
    for item in soup.fetch('a'):
        print item['href']

for link in links:
    print_hrefs(link)
</snippet></ROW><ROW><id>9611196</id><snippet>check_list(item, l)</snippet></ROW><ROW><id>9611196</id><snippet>item in l</snippet></ROW><ROW><id>9611227</id><snippet>parameters</snippet></ROW><ROW><id>9611227</id><snippet>QueryDict</snippet></ROW><ROW><id>9611227</id><snippet>parameters = request.POST.copy()
parameters['cmd']='_notify-validate'
return self.call_paypal(parameters.urlencode()) == 'VERIFIED'
</snippet></ROW><ROW><id>9611227</id><snippet>QueryDict</snippet></ROW><ROW><id>9611227</id><snippet>request</snippet></ROW><ROW><id>9611227</id><snippet>copy()</snippet></ROW><ROW><id>9611322</id><snippet>oninterval = False
dd = {}
keys = d.keys()
keys.sort()
start_key, first_val = keys[0], d[keys[0]]

for k in keys:
    v = float(d[k])
    if oninterval:
        cur_list.append(v)
        if not int(v) &lt;= 70: # interval ends
            oninterval = False
            dd[(start_key,k)] = cur_list
    else:
        if int(v) &lt;= 70:
            cur_list = [first_val, v]
            oninterval = True
        else:
            start_key, first_val = k, v

if oninterval: dd[(start_key, keys[-1])] = cur_list
</snippet></ROW><ROW><id>9611542</id><snippet>l = 'there are no builtins for that'.split()
print [" ".join(l[n:n+3]) for n in xrange(len(l)-2)]
['there are no', 'are no builtins', 'no builtins for', 'builtins for that']
</snippet></ROW><ROW><id>9611542</id><snippet>r</snippet></ROW><ROW><id>9611542</id><snippet>import collections
c = collections.Counter()
for item in r:
    c[item] += 1
print c
Counter({'there are no': 1, 'are no builtins': 1, 'no builtins for': 1, 'builtins for that': 1})
</snippet></ROW><ROW><id>9611586</id><snippet>exclude = ['lulz', 'lmfao', '.png']
filter_func = lambda s: 'http://' in s and not any(x in s for x in exclude)

matching_lines = filter(filter_func, string_list)
</snippet></ROW><ROW><id>9611586</id><snippet>matching_lines = [line for line in string_list if filter_func(line)]
</snippet></ROW><ROW><id>9611681</id><snippet>columns</snippet></ROW><ROW><id>9611681</id><snippet>columns[3]</snippet></ROW><ROW><id>9611681</id><snippet>IndexError</snippet></ROW><ROW><id>9611681</id><snippet>line</snippet></ROW><ROW><id>9611681</id><snippet>try:
    output1.write('{:8}{:8}\n'.format(columns[0], columns[3])
except IndexError, e:
    print repr(line)
    # Alternatively
    #output1.write("Error: " + repr(line))
    raise
</snippet></ROW><ROW><id>9611972</id><snippet># create a list
store = [] 

try:
    # if something in this block would throw an exception,
    # code could continue in a controlled way in an except block

    # force a KeyError by looking up a non-existent key in an empty dictionary
    {}["foo"] 

except KeyError as e: 
    # store the exception object in the list
    store.append(e)

# same scheme here; construct something that fails (1/0), 
# then instead of quitting the interpreter, continue operations
try: 
    1/0
except ZeroDivisionError as e: 
    store.append(e)

# pythons exceptions hierarchy is diverse and exceptions carry meaningful
# names expressing their context
try:
    # here we attept to lookup an attribute (that's happening technically
    # before the call), which does not exists (because strings don't know
    # how to bar... 
    "".bar()

except AttributeError as e:
    # ... and the the appropriate exception here is AttributeError
    store.append(e)
</snippet></ROW><ROW><id>9611972</id><snippet># loop over list
for exceptionobject in store:

    # get the class of the object via special method __class__
    # __class__ returns an object whose class is type actually;
    # but don't be too confused by this 
    ec = exceptionobject.__class__

    # print the name of the exception class, now this is just a plain string
    print(ec.__name__)

    indent = " +-"

    # use another special method __bases__ to get all superclasses
    # of the exception class; all exceptions inherit from BaseException
    # loop over the base classes
    while ec.__bases__:

        # get the first base class
        ec = ec.__bases__[0]

        # print its name an indent more
        print(indent + ec.__name__)
        indent = " " + indent
</snippet></ROW><ROW><id>9611972</id><snippet>KeyError
 +-LookupError
  +-StandardError
   +-Exception
    +-BaseException
     +-object
ZeroDivisionError
 +-ArithmeticError
  +-StandardError
   +-Exception
    +-BaseException
     +-object
AttributeError
 +-StandardError
  +-Exception
   +-BaseException
    +-object
</snippet></ROW><ROW><id>9612103</id><snippet>&gt;&gt;&gt; datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")
'2012-03-08T00:07:31Z'
</snippet></ROW><ROW><id>9612103</id><snippet>&gt;&gt;&gt; datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S +00:00")
'2012-03-08 00:07:31 +00:00'
</snippet></ROW><ROW><id>9612179</id><snippet>from skimage import io, data
io.use_plugin('qt')
io.imshow(data.camera(), fancy=True)
</snippet></ROW><ROW><id>9612415</id><snippet>import numpy as np
hello = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
hello = [np.array([n, 0, 0]) for n in hello]
</snippet></ROW><ROW><id>9612415</id><snippet>&gt;&gt;&gt; hello[2]
array([3, 0, 0])

&gt;&gt;&gt; hello[2] * 3
array([9, 0, 0])
</snippet></ROW><ROW><id>9612430</id><snippet>conf.py</snippet></ROW><ROW><id>9612430</id><snippet>sys.path.append('/home/imps/workspace/myproj/myproj')
import settings
from django.core.management import setup_environ
setup_environ(settings)
</snippet></ROW><ROW><id>9612430</id><snippet>make html</snippet></ROW><ROW><id>9612665</id><snippet>&gt;&gt;&gt; print '\n'.join(' '.join(str(n) for n in row) for row in triangle)

1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
1 5 10 10 5 1
</snippet></ROW><ROW><id>9612665</id><snippet>str.center</snippet></ROW><ROW><id>9612665</id><snippet>&gt;&gt;&gt; print '\n'.join(' '.join(str(n) for n in row).center(80) for row in triangle)

                                       1                                        
                                      1 1                                       
                                     1 2 1                                      
                                    1 3 3 1                                     
                                   1 4 6 4 1                                    
                                 1 5 10 10 5 1                                  
</snippet></ROW><ROW><id>9612665</id><snippet>str.format</snippet></ROW><ROW><id>9612665</id><snippet>&gt;&gt;&gt; print '\n'.join(' '.join('{:3d}'.format(n) for n in row).center(80) for row in triangle)

                                        1                                       
                                      1   1                                     
                                    1   2   1                                   
                                  1   3   3   1                                 
                                1   4   6   4   1                               
                              1   5  10  10   5   1                             
                            1   6  15  20  15   6   1                           
                          1   7  21  35  35  21   7   1                         
                        1   8  28  56  70  56  28   8   1                       
                      1   9  36  84 126 126  84  36   9   1                     
</snippet></ROW><ROW><id>9612871</id><snippet>pyplot</snippet></ROW><ROW><id>9612871</id><snippet>pyplot.plot()</snippet></ROW><ROW><id>9612871</id><snippet>plt.plot(ind, kdepdf, 'g', axis=self.axis, linewidth=0.8, label='kde')
</snippet></ROW><ROW><id>9612871</id><snippet>self.axis</snippet></ROW><ROW><id>9612871</id><snippet>self.axis = plt.axis()</snippet></ROW><ROW><id>9612910</id><snippet>get_all(name[, failobj])</snippet></ROW><ROW><id>9612985</id><snippet>$ cat &gt; a
h
1
2
3
4
5
6
7
^D
$ split -l 3
$ split -l 3 a 1
$ ls
1aa 1ab 1ac a
$ mv 1aa 21aa
$ for i in 1*; do head -n1 21aa|cat - $i &gt; 2$i; done
$ for i in 21*; do echo ---- $i; cat $i; done
---- 21aa
h
1
2
---- 21ab
h
3
4
5
---- 21ac
h
6
7
</snippet></ROW><ROW><id>9612985</id><snippet>head -n1</snippet></ROW><ROW><id>9612985</id><snippet>head -nX</snippet></ROW><ROW><id>9612985</id><snippet>X</snippet></ROW><ROW><id>9612992</id><snippet># Python 3, but the idea is the same in 2

class A:
    def __init__(self, a, b):
        # ...

class B(A):
    def __init__(self, c, d, *args, **kwargs):
        super().__init__(*args, **kwargs)

class C(A):
    def __init__(self, e, f, g, *args, **kwargs):
        super().__init__(*args, **kwargs)
</snippet></ROW><ROW><id>9613177</id><snippet>Py_eval_input</snippet></ROW><ROW><id>9613177</id><snippet>Py_CompileString</snippet></ROW><ROW><id>9613177</id><snippet>Py_eval_input</snippet></ROW><ROW><id>9613177</id><snippet>eval</snippet></ROW><ROW><id>9613177</id><snippet>Py_file_input</snippet></ROW><ROW><id>9613177</id><snippet>exec</snippet></ROW><ROW><id>9613177</id><snippet>Py_single_input</snippet></ROW><ROW><id>9613468</id><snippet>threading.Thread(target = shutdown(5)).start()
</snippet></ROW><ROW><id>9613468</id><snippet>x = shutdown(5)
threading.Thread(target = x).start()
</snippet></ROW><ROW><id>9613468</id><snippet>threading.Thread(target = shutdown, args = (5,)).start()
</snippet></ROW><ROW><id>9613622</id><snippet>return</snippet></ROW><ROW><id>9613622</id><snippet>windspeed()</snippet></ROW><ROW><id>9613622</id><snippet>def windspeed (t,v):
    return 35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16)
</snippet></ROW><ROW><id>9613622</id><snippet>table = list()
for t in temperatures:
     row = list()
     row.append(t)
     for v in windspeeds:
          row.append(windspeed(t, v))
     table.append(row)

print (4*" "+" ".join("%3d" % _ for _ in windspeeds))
print("\n".join(" ".join("%3d" % col for col in row) for row in table))
</snippet></ROW><ROW><id>9613733</id><snippet>BeautifulSoup.Tag</snippet></ROW><ROW><id>9613733</id><snippet>Image.open</snippet></ROW><ROW><id>9613733</id><snippet>Image.open</snippet></ROW><ROW><id>9613733</id><snippet>image["src"]</snippet></ROW><ROW><id>9613733</id><snippet>im = Image.open(image["src"])
</snippet></ROW><ROW><id>9613733</id><snippet>root</snippet></ROW><ROW><id>9613733</id><snippet>image["src"]</snippet></ROW><ROW><id>9613733</id><snippet>im = Image.open(os.path.join(root, image["src"]))
</snippet></ROW><ROW><id>9613836</id><snippet>foo["bar"]</snippet></ROW><ROW><id>9613836</id><snippet>foo.bar</snippet></ROW><ROW><id>9613836</id><snippet>foo[bar]</snippet></ROW><ROW><id>9613836</id><snippet>&gt;&gt;&gt; from django.template import Context, Template
&gt;&gt;&gt; t = Template("My name is {{ person.first_name }}.")
&gt;&gt;&gt; d = {"person": {"first_name": "Joe", "last_name": "Johnson"}}
&gt;&gt;&gt; t.render(Context(d))
"My name is Joe."

&gt;&gt;&gt; class PersonClass: pass
&gt;&gt;&gt; p = PersonClass()
&gt;&gt;&gt; p.first_name = "Ron"
&gt;&gt;&gt; p.last_name = "Nasty"
&gt;&gt;&gt; t.render(Context({"person": p}))
"My name is Ron."

&gt;&gt;&gt; t = Template("The first stooge in the list is {{ stooges.0 }}.")
&gt;&gt;&gt; c = Context({"stooges": ["Larry", "Curly", "Moe"]})
&gt;&gt;&gt; t.render(c)
"The first stooge in the list is Larry."
</snippet></ROW><ROW><id>9613917</id><snippet>listOfElements</snippet></ROW><ROW><id>9613917</id><snippet>[:]</snippet></ROW><ROW><id>9613917</id><snippet>temp.append(listOfElements[:])
</snippet></ROW><ROW><id>9614134</id><snippet>Tool</snippet></ROW><ROW><id>9614134</id><snippet>Tool</snippet></ROW><ROW><id>9614134</id><snippet>antlr.Tool</snippet></ROW><ROW><id>9614134</id><snippet>org.antlr.Tool</snippet></ROW><ROW><id>9614134</id><snippet>java -classpath antlr-3.1.3.jar org.antlr.Tool SimpleCalc.g
</snippet></ROW><ROW><id>9614134</id><snippet>grammar SimpleCalc;

options {
  language=Python;
}

@header {
import sys
import traceback

from SimpleCalcLexer import SimpleCalcLexer
}

@main {
def main(argv, otherArg=None):
  char_stream = ANTLRStringStream(sys.argv[1])
  lexer = SimpleCalcLexer(char_stream)
  tokens = CommonTokenStream(lexer)
  parser = SimpleCalcParser(tokens);

  try:
    print parser.eval()
  except RecognitionException:
    traceback.print_stack()
}

eval returns [value]
 : add EOF {$value = $add.value}
 ;

add returns [value]
 : m1=mult {$value = $m1.value} ( '+' m2=mult {$value += $m2.value}
                                | '-' m2=mult {$value -= $m2.value}
                                )* 
 ;

mult returns [value]
 : a1=atom {$value = $a1.value} ( '*' a2=atom {$value *= $a2.value}
                                | '/' a2=atom {$value /= $a2.value}
                                )* 
 ;

atom returns [value]
 : NUMBER      {$value = float($NUMBER.text)}
 | '(' add ')' {$value = $add.value}
 ;

NUMBER         : DIGIT+ ('.' DIGIT*)?;
WHITESPACE     : ('\t' | ' ' | '\r' | '\n')+ {$channel = HIDDEN;};
fragment DIGIT : '0'..'9' ;
</snippet></ROW><ROW><id>9614134</id><snippet>java -cp antlr-3.1.3.jar org.antlr.Tool SimpleCalc.g
python SimpleCalcParser.py "5 * (8 + 2)"
</snippet></ROW><ROW><id>9614134</id><snippet>50.0
</snippet></ROW><ROW><id>9614161</id><snippet>@register.tag
def search(parser, token):
    return SearchNode()

class SearchNode(template.Node):
    def render(self, context):
        return render_to_string('search/search_snippet.html', 
                                 { 'form' : forms.FindForm() }, context)
</snippet></ROW><ROW><id>9614183</id><snippet>from rpy2.robjects.packages import importr
from rpy2.robjects.vectors import StrVector
stats = importr("stats")
stats.t_test(methodresults1, methodresults2,
             **{'var.equal': False,
                'paired': False,
                'alternative': StrVector(("less", ))})
</snippet></ROW><ROW><id>9614295</id><snippet>for i in range(self.fieldsList_2.count):
</snippet></ROW><ROW><id>9614295</id><snippet>for i in range(self.fieldsList_2.count()-1):
</snippet></ROW><ROW><id>9614295</id><snippet>duplicates = self.fieldlist_2.findItems(surv, QtCore.Qt.MatchExactly)
if duplicates.size() == 0:
    self.fieldsList_2.addItem(unicode(row[1]))
//skip the loop part since it's not necessary using this alternative
</snippet></ROW><ROW><id>9614330</id><snippet>def noun(words):
    nouns = []
    for word in words.split():
        items = word.split('/')
        if len(items) == 2:
            tag, word = items
        else:
            # do something else to parse

    ....
</snippet></ROW><ROW><id>9614330</id><snippet>&gt;&gt;&gt; word = "a/b/c"
&gt;&gt;&gt;
&gt;&gt;&gt; word.split("/", 1)
['a', 'b/c']
</snippet></ROW><ROW><id>9614414</id><snippet>def __init__(self):
    dispatcher.connect(self.spider_opened, signals.spider_opened)
</snippet></ROW><ROW><id>9614627</id><snippet>&gt;&gt;&gt; import numpy as NP
&gt;&gt;&gt; a = NP.empty( shape=(0, 0) )
&gt;&gt;&gt; a
    array([], shape=(0, 0), dtype=float64)

&gt;&gt;&gt; a.shape
    (0, 0)
&gt;&gt;&gt; a.size
    0
</snippet></ROW><ROW><id>9614783</id><snippet>_entry_list = ', '.join(_entry_list)
</snippet></ROW><ROW><id>9614783</id><snippet>cur.execute("INSERT INTO " + self.new_tablename + "(" + ",".join(self.new_fieldname) +") VALUES(" + ",".join(("?" for i in xrange(len(_entry_list)))) + ")", _entry_list)
</snippet></ROW><ROW><id>9614783</id><snippet>self.new_tablename</snippet></ROW><ROW><id>9614783</id><snippet>self.new_fieldname</snippet></ROW><ROW><id>9614965</id><snippet>for Line in file("Text.txt", "r"):
  if Line.find("sum") &gt;= 0:
    print Line.split()[0]
</snippet></ROW><ROW><id>9614965</id><snippet>Line.split()</snippet></ROW><ROW><id>9614965</id><snippet>Line.split()[1]</snippet></ROW><ROW><id>9615422</id><snippet>subprocess.Pipe(pipeline, shell=True)</snippet></ROW><ROW><id>9615422</id><snippet>"ls"</snippet></ROW><ROW><id>9615422</id><snippet>"ls / | wc"</snippet></ROW><ROW><id>9615422</id><snippet>com = [["ls","/"],["wc"]]
p = None
for c in com:
    p = Popen(c, stdin=(p.stdout if p else None), stdout=PIPE, stderr=PIPE)
</snippet></ROW><ROW><id>9615578</id><snippet>import functools
import nose

def expected_failure(test):
    @functools.wraps(test)
    def inner(*args, **kwargs):
        try:
            test(*args, **kwargs)
        except Exception:
            raise nose.SkipTest
        else:
            raise AssertionError('Failure expected')
    return inner
</snippet></ROW><ROW><id>9615578</id><snippet>@expected_failure
def test_not_implemented():
    assert False

@expected_failure
def test_unexpected_success():
    assert True
</snippet></ROW><ROW><id>9615578</id><snippet>tests.test.test_not_implemented ... SKIP
tests.test.test_unexpected_success ... FAIL

======================================================================
FAIL: tests.test.test_unexpected_success
----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\Python32\lib\site-packages\nose-1.1.2-py3.2.egg\nose\case.py", line 198, in runTest
    self.test(*self.arg)
  File "G:\Projects\Programming\dt-tools\new-sanbi\tests\test.py", line 16, in inner
    raise AssertionError('Failure expected')
AssertionError: Failure expected

----------------------------------------------------------------------
Ran 2 tests in 0.016s

FAILED (failures=1)
</snippet></ROW><ROW><id>9615759</id><snippet>class IconName(object):
    def get_icon_name(self):
        return self._icon_name
    def set_icon_name(self, value):
        self._icon_name = value
    icon_name = property(get_icon_name, set_icon_name)
</snippet></ROW><ROW><id>9615759</id><snippet>class CustomCharField(CharField, IconName):
    pass
</snippet></ROW><ROW><id>9615759</id><snippet>icon_name</snippet></ROW><ROW><id>9615759</id><snippet>__init__()</snippet></ROW><ROW><id>9615759</id><snippet>def __init__(self, *args, **kwargs):
    super(forms.Form, self).__init__(*args, **kwargs)
    self.fields['integer'].icon_name = 'icon-home'
    ...
</snippet></ROW><ROW><id>9615759</id><snippet>{% for item in form.visible_fields %}
&lt;div class="control-group"&gt;
  &lt;label class="control-label" for="{{ item.name }}"&gt;{{ item.label }}&lt;/label&gt;
  &lt;div class="controls"&gt;
    {% if item.field.icon_name %}
      &lt;div class="input-prepend"&gt;
      &lt;span class="add-on"&gt;&lt;i class="{{ item.field.icon_name }}"&gt;&lt;/i&gt;&lt;/span&gt;
    {% endif %}
      {{ item }}
      &lt;p class="help-block"&gt;{{ item.help_text }}&lt;/p&gt;
    {% if item.field.icon_name %}
    &lt;/div&gt;
    {% endif %}
  &lt;/div&gt;
&lt;/div&gt;
{% endfor %}
</snippet></ROW><ROW><id>9616360</id><snippet>262     def get_imported_module(self, modnode, importnode, modname):
+263         import sys
+264         ignoreModules = ['_winreg', 'your', 'bogus','module','name']
265         try:        
+266             if sys.platform =='linux2' and modname not in ignoreModules:
267                 return importnode.do_import_module(modname)
268         except astng.InferenceError, ex:
269             if str(ex) != modname:
270                 args = '%r (%s)' % (modname, ex)
</snippet></ROW><ROW><id>9616360</id><snippet>.pylintrc</snippet></ROW><ROW><id>9616431</id><snippet>web: python my_app/manage.py run_gunicorn -b "0.0.0.0:$PORT"
</snippet></ROW><ROW><id>9616602</id><snippet>from django.contrib.auth.models import User
user = User.objects.get(id=user_id)

staffprofile.user = user
</snippet></ROW><ROW><id>9616960</id><snippet>htmlentitydefs.codepoint2name</snippet></ROW><ROW><id>9617335</id><snippet>a</snippet></ROW><ROW><id>9617335</id><snippet>&gt;&gt;&gt; a = '4'
&gt;&gt;&gt; b=8.0
&gt;&gt;&gt; if a and a &gt;0:
...     a=a*int(b)
...     print "Value:",a
... 
Value: 44444444
</snippet></ROW><ROW><id>9617335</id><snippet>a = raw_input('Please enter a number: ')</snippet></ROW><ROW><id>9617335</id><snippet>a</snippet></ROW><ROW><id>9617404</id><snippet>main()</snippet></ROW><ROW><id>9617592</id><snippet>n=sc.shape(data)[2]
</snippet></ROW><ROW><id>9617718</id><snippet>import multiprocessing

def run_as_process(func, *args):
    p = multiprocessing.Process(target=func, args=args)
    try:
        p.start()
        p.join()
    finally:
        p.terminate()
</snippet></ROW><ROW><id>9617931</id><snippet>list.append()</snippet></ROW><ROW><id>9617931</id><snippet>None</snippet></ROW><ROW><id>9617931</id><snippet>arf[2].append(3)</snippet></ROW><ROW><id>9617931</id><snippet>3</snippet></ROW><ROW><id>9617931</id><snippet>arf</snippet></ROW><ROW><id>9617931</id><snippet>None</snippet></ROW><ROW><id>9617931</id><snippet>arf[2]</snippet></ROW><ROW><id>9617931</id><snippet>arf</snippet></ROW><ROW><id>9617931</id><snippet>arf = (arf[0], arf[1], arf[2]+[3])
</snippet></ROW><ROW><id>9618169</id><snippet>import sys, time
from PyQt4 import QtGui as qt
from PyQt4 import QtCore as qtcore

app = qt.QApplication(sys.argv)
class widget(qt.QWidget):
    def __init__(self, parent=None):
        qt.QWidget.__init__(self)

    def appinit(self):
        thread = worker()
        self.connect(thread, thread.signal, self.testfunc)
        thread.start()

    def testfunc(self, sigstr):
        print sigstr

class worker(qtcore.QThread):
    def __init__(self):
        qtcore.QThread.__init__(self, parent=app)
        self.signal = qtcore.SIGNAL("signal")
    def run(self):
        time.sleep(5)
        print "in thread"
        self.emit(self.signal, "hi from thread")

def main():
    w = widget()
    w.show()
    qtcore.QTimer.singleShot(0, w.appinit)
    sys.exit(app.exec_())

main()
</snippet></ROW><ROW><id>9618441</id><snippet>from lxml import etree
    a = os.path.join(localPath,file)
    element = etree.parse(a)
    cars = element.xpath('//Root/Foo/Bar/Car')
    for car in cars:
        colors = car.xpath('./Color')
        makes = car.xpath('./Make')
        models = car.xpath('./Model')
</snippet></ROW><ROW><id>9619101</id><snippet>lst = ['/a/b', '/a/b/c', '/a/b/c/d', '/a/b/c/e', '/a/b/c/f/g', '/a/b/c/f/h', '/a/b/c/f/i']
dct = {}

for item in lst:
    p = dct
    for x in item.split('/'):
        p = p.setdefault(x, {})

print dct
</snippet></ROW><ROW><id>9619101</id><snippet> {'': {'a': {'b': {'c': {'e': {}, 'd': {}, 'f': {'i': {}, 'h': {}, 'g': {}}}}}}}
</snippet></ROW><ROW><id>9619120</id><snippet># -*- coding: utf-8 -*-
notAllowed = {u"â":u"a", u"à":u"a", u"é":u"e", u"è":u"e", u"ê":u"e",
          u"î":u"i", u"ô":u"o", u"ç":u"c", u"û":u"u"}

word = u"dôzerté"
print word

for char in word:
if char in notAllowed.keys():
    print "hooray"
    word = word.replace(char, notAllowed[char])


print word
print "finished"
</snippet></ROW><ROW><id>9619120</id><snippet>u"..." 
#instead of just
"..."
</snippet></ROW><ROW><id>9619377</id><snippet>argparse</snippet></ROW><ROW><id>9619377</id><snippet>add_subparsers()</snippet></ROW><ROW><id>9619377</id><snippet>parser = argparse.ArgumentParser()
subs = parser.add_subparsers()
dpd = subs.add_parser('download-and-parse-data', aliases=['dpd'])
dpd.add_argument(...)
...
</snippet></ROW><ROW><id>9619377</id><snippet>add_argument()</snippet></ROW><ROW><id>9619377</id><snippet>parser.add_argument('-f', '--foo')
</snippet></ROW><ROW><id>9619393</id><snippet>declarative_base()</snippet></ROW><ROW><id>9619393</id><snippet>Base</snippet></ROW><ROW><id>9619393</id><snippet>CommonBase</snippet></ROW><ROW><id>9619393</id><snippet>cls=</snippet></ROW><ROW><id>9619393</id><snippet>class CommonBase(object):
    @classmethod
    def somecommonaction(cls):
        # body here

Base = declarative_base(cls=CommonBase)

class Table1(Base):
    # __tablename__ &amp; Table1 specific fields here

class Table2(Base):
     # __tablename__ &amp; Table2 specific fields here
</snippet></ROW><ROW><id>9619677</id><snippet>intern</snippet></ROW><ROW><id>9619677</id><snippet>is</snippet></ROW><ROW><id>9619677</id><snippet>==</snippet></ROW><ROW><id>9619677</id><snippet>&gt;&gt;&gt; 'foo' * 100 is 'foo' * 100
False
&gt;&gt;&gt; intern('foo' * 100) is intern('foo' * 100)
True
</snippet></ROW><ROW><id>9619677</id><snippet>intern</snippet></ROW><ROW><id>9619677</id><snippet>id(intern(A)) == id(intern(B))</snippet></ROW><ROW><id>9619677</id><snippet>A == B</snippet></ROW><ROW><id>9619677</id><snippet>intern</snippet></ROW><ROW><id>9619677</id><snippet>intern</snippet></ROW><ROW><id>9619677</id><snippet>sys.intern</snippet></ROW><ROW><id>9619677</id><snippet>dict</snippet></ROW><ROW><id>9619677</id><snippet>str_to_id = {}
for s in strings:
    str_to_id.setdefault(s, len(str_to_id))
</snippet></ROW><ROW><id>9619784</id><snippet>readlines()</snippet></ROW><ROW><id>9619784</id><snippet>i = 0
while i &lt; 500000:
    line = FILE.readline()
    if line == "": # Cuts off if end of file reached
        break
    m = re.search('key=([^&amp;]*)', line)
    count_words[m.group(1)]+=1
    i += 1
</snippet></ROW><ROW><id>9620085</id><snippet>IDLE 1.1.4      
&gt;&gt;&gt; a = u'può essere / sarà / 日本'

Unsupported characters in input
&gt;&gt;&gt; a = u'pu\xf2 essere / sar\xe0 / \u65e5\u672c'
&gt;&gt;&gt; b = a.encode('utf-8')
&gt;&gt;&gt; a
u'pu\xf2 essere / sar\xe0 / \u65e5\u672c'
&gt;&gt;&gt; b
'pu\xc3\xb2 essere / sar\xc3\xa0 / \xe6\x97\xa5\xe6\x9c\xac'
&gt;&gt;&gt; print a
può essere / sarà / 日本
&gt;&gt;&gt; print b
puÃ² essere / sarÃ  / æ—¥æœ¬
</snippet></ROW><ROW><id>9620085</id><snippet>b</snippet></ROW><ROW><id>9620085</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdout.encoding
'cp1252'
</snippet></ROW><ROW><id>9620085</id><snippet>a</snippet></ROW><ROW><id>9620085</id><snippet>b</snippet></ROW><ROW><id>9620085</id><snippet>a</snippet></ROW><ROW><id>9620085</id><snippet>&gt;&gt;&gt; c = a.encode('cp1252') 

Traceback (most recent call last):
  File "&lt;pyshell#19&gt;", line 1, in -toplevel-
    c = a.encode('cp1252') #uses default encoding
  File "C:\Python24\lib\encodings\cp1252.py", line 18, in encode
    return codecs.charmap_encode(input,errors,encoding_map)
UnicodeEncodeError: 'charmap' codec can't encode characters in position 20-21: character maps to &lt;undefined&gt;
</snippet></ROW><ROW><id>9620095</id><snippet>rest_content = """
I should be an h1
=================

I should be an h2
-----------------
foo


I should also be an h2
----------------------
foo
"""

from docutils.core import publish_parts
parts = publish_parts(rest_content, writer_name="html",
        settings_overrides={'doctitle_xform':False})
html_snippet = parts['html_body']

print(html_snippet)
</snippet></ROW><ROW><id>9620095</id><snippet>&lt;div class="document"&gt;
&lt;div class="section" id="i-should-be-an-h1"&gt;
&lt;h1&gt;I should be an h1&lt;/h1&gt;
&lt;div class="section" id="i-should-be-an-h2"&gt;
&lt;h2&gt;I should be an h2&lt;/h2&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-should-also-be-an-h2"&gt;
&lt;h2&gt;I should also be an h2&lt;/h2&gt;
&lt;p&gt;foo&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>9620133</id><snippet>from csv import DictReader
the_reader = DictReader(open('filename.csv', 'rb'))

for line_dict in the_reader:
  print line_dict
  #{'Name': 'Ted', 'Age': '21', 'Goals': '1', 'Passes': '20', 'Fouls': '1'}
</snippet></ROW><ROW><id>9620232</id><snippet>[text()]</snippet></ROW><ROW><id>9620232</id><snippet>&gt;&gt;&gt; s='''
... &lt;root&gt;
...   &lt;Car&gt;
...     &lt;Color&gt;Blue&lt;/Color&gt;
...     &lt;Make&gt;Chevy&lt;/Make&gt;
...     &lt;Model/&gt;
...   &lt;/Car&gt;
... &lt;/root&gt;'''
&gt;&gt;&gt; e = lxml.etree.fromstring(s)
&gt;&gt;&gt; carData = e.xpath('Car/node()')
&gt;&gt;&gt; carData
[&lt;Element Color at 0x23a5460&gt;, &lt;Element Make at 0x23a54b0&gt;, &lt;Element Model at 0x23a5500&gt;]
&gt;&gt;&gt; dict(((e.tag, e.text) for e in carData))
{'Color': 'Blue', 'Make': 'Chevy', 'Model': None}
</snippet></ROW><ROW><id>9620232</id><snippet>lxml.etree.iterparse()</snippet></ROW><ROW><id>9620232</id><snippet>iterparse</snippet></ROW><ROW><id>9620232</id><snippet>def get_cars(infile):
    in_car = False
    current_car = {}
    for (event, element) in lxml.etree.iterparse(infile, events=('start', 'end')):
        if event == 'start':
            if element.tag == 'Car':
                in_car = True
                current_car = {}
            continue
        if not in_car: continue
        if element.tag == 'Car':
            yield current_car
            continue
        current_car[element.tag] = element.text

for car in get_cars(infile = cStringIO.StringIO('''&lt;root&gt;&lt;Car&gt;&lt;Color&gt;Blue&lt;/Color&gt;&lt;Make&gt;Chevy&lt;/Make&gt;&lt;Model/&gt;&lt;/Car&gt;&lt;/root&gt;''')):
  print car
</snippet></ROW><ROW><id>9620326</id><snippet>import functools

def protected(fun):
    @functools.wraps(fun)
    def wrapper(self, *args, **kwargs):
        if not self.checkLogin():
            raise UserLoginError()
        return fun(self, *args, **kwargs)

    return wrapper # this is what replaces the original method

@protected
def doIfLoggedIn(self):
    ...
</snippet></ROW><ROW><id>9620405</id><snippet>C:\Python26;C:\sansviewproject\trunk\build\lib.win32-2.6
</snippet></ROW><ROW><id>9620405</id><snippet>C:\Python26;C:\sansviewproject\trunk\build
</snippet></ROW><ROW><id>9620852</id><snippet>&gt;&gt;&gt; l = [1, 2, 3, 4, 10]
&gt;&gt;&gt; [y-x for x, y in zip(l, l[1:])]
[1, 1, 1, 6]
</snippet></ROW><ROW><id>9621251</id><snippet>create_engine</snippet></ROW><ROW><id>9621251</id><snippet>scoped_session</snippet></ROW><ROW><id>9621251</id><snippet>scoped_session</snippet></ROW><ROW><id>9621251</id><snippet>DBSession</snippet></ROW><ROW><id>9621251</id><snippet>pool_size</snippet></ROW><ROW><id>9621251</id><snippet>DATABASE_CONNECTION_INFO = 'mysql://username:password@localhost:3306/dbname'
db_engine = create_engine(DATABASE_CONNECTION_INFO, echo=False)
DBSession = scoped_session(
    sessionmaker(
        autoflush=True,
        autocommit=False,
        bind=db_engine
    )
)


class MTWorker(object):

    def __init__(self, worker_count=5):
        self.task_queue = Queue()
        self.worker_count = worker_count
# snip
</snippet></ROW><ROW><id>9621418</id><snippet>&gt;&gt;&gt; today.strftime('%B')
'March'
</snippet></ROW><ROW><id>9621418</id><snippet>datetime</snippet></ROW><ROW><id>9621577</id><snippet>int</snippet></ROW><ROW><id>9621577</id><snippet>valin = int(input("How much would you like to bet?: "))
</snippet></ROW><ROW><id>9621644</id><snippet>users = Tracking.objects.values( 'tracking_id' ).annotate(dcount=Count('tracking_id'))
</snippet></ROW><ROW><id>9621644</id><snippet>for user in users:
    stats.append((user[ 'tracking_id' ], user[ 'dcount' ]))    
</snippet></ROW><ROW><id>9621864</id><snippet>networkX</snippet></ROW><ROW><id>9621864</id><snippet>numpy</snippet></ROW><ROW><id>9621864</id><snippet>nth</snippet></ROW><ROW><id>9621864</id><snippet>(i,j)</snippet></ROW><ROW><id>9621864</id><snippet>n</snippet></ROW><ROW><id>9621864</id><snippet>(start, end)</snippet></ROW><ROW><id>9621864</id><snippet>n</snippet></ROW><ROW><id>9621864</id><snippet>(i,j)</snippet></ROW><ROW><id>9621864</id><snippet>from numpy import *

hit_idx = (0,4)

# Define a graph by edge list
edges = [[0,1],[1,2],[2,3],[2,4]]

# Create adj. matrix
A = zeros((5,5))
A[zip(*edges)] = 1
# Undirected condition
A += A.T

# Make the final state an absorbing condition
A[hit_idx[1],:] = 0
A[hit_idx[1],hit_idx[1]] = 1

# Make a proper Markov matrix by row normalizing
A = (A.T/A.sum(axis=1)).T

B = A.copy()
Z = []
for n in xrange(100):
    Z.append( B[hit_idx] )
    B = dot(B,A)

from pylab import *
plot(Z)
xlabel("steps")
ylabel("hit probability")
show()    
</snippet></ROW><ROW><id>9621867</id><snippet>&gt;&gt;&gt; M = sp.lil_matrix((14, 3562))
&gt;&gt;&gt; sp.vstack([M, sp.lil_matrix((1, 3562))])
&lt;15x3562 sparse matrix of type '&lt;type 'numpy.float64'&gt;'
        with 0 stored elements in COOrdinate format&gt;
</snippet></ROW><ROW><id>9621934</id><snippet>def func_input_word():
    input_word = ""
    while len(input_word) &lt; 6:
        input_word = input("Input a 6 letter word: ")
        if len(input_word) &lt; 6:
            print("Too small, try again!")
        else:
            return input_word
def option(my_choose):  #function named: make choose ( choice )
    if my_choose == 1:
        input_word = func_input_word()
    else:
        ....
</snippet></ROW><ROW><id>9622120</id><snippet>employee.license_set.all()
</snippet></ROW><ROW><id>9622308</id><snippet>side = [5]
</snippet></ROW><ROW><id>9622308</id><snippet>[5]</snippet></ROW><ROW><id>9622308</id><snippet>side</snippet></ROW><ROW><id>9622308</id><snippet>eva = side
</snippet></ROW><ROW><id>9622308</id><snippet>side</snippet></ROW><ROW><id>9622308</id><snippet>[5]</snippet></ROW><ROW><id>9622308</id><snippet>copy.copy(thing)</snippet></ROW><ROW><id>9622308</id><snippet>thing[:]</snippet></ROW><ROW><id>9622535</id><snippet>f = File(open(path_destino,'r'))
self.mini.save(path_destino, f, True)
</snippet></ROW><ROW><id>9622631</id><snippet>__del__</snippet></ROW><ROW><id>9622631</id><snippet>http://docs.python.org/reference/datamodel.html#object.__del__</snippet></ROW><ROW><id>9622631</id><snippet># session.py
import page
class Session(object):
    def __init__(self):
        self.page_list = []
    def addPage(self, url):
        self.page_list.append(page.Page(self, url))

# page.py
class Page(object):
    def __init__(self, session, url):
        self.session = session
        self.url = url
</snippet></ROW><ROW><id>9622631</id><snippet># page.py
class Page(object):
    # ...
    def something(self):
        import session
        self.other_session = session.Session()
</snippet></ROW><ROW><id>9622783</id><snippet>sessionmaker</snippet></ROW><ROW><id>9622783</id><snippet>sessionmaker</snippet></ROW><ROW><id>9622783</id><snippet>Session</snippet></ROW><ROW><id>9622783</id><snippet>Session = sessionmaker(bind=db)
session = Session()
...
session.add(newT)
</snippet></ROW><ROW><id>9622833</id><snippet>&gt;&gt;&gt; soup = BeautifulSoup("", 'xml')
&gt;&gt;&gt; soup.prettify()
'&lt;?xml version="1.0" encoding="utf-8"&gt;\n'
</snippet></ROW><ROW><id>9622833</id><snippet>&gt;&gt;&gt; soup = BeautifulSoup("no &lt;root/&gt; element", 'xml')
&gt;&gt;&gt; soup.prettify()
'&lt;?xml version="1.0" encoding="utf-8"&gt;\n'
</snippet></ROW><ROW><id>9622881</id><snippet>_STEP_NAMES</snippet></ROW><ROW><id>9622881</id><snippet>STEPS</snippet></ROW><ROW><id>9622881</id><snippet>STEPS</snippet></ROW><ROW><id>9622881</id><snippet>def all_steps(self):
    user = self.user_created.first_name
    return [(getattr(self, attr), step.replace('&lt;user_created&gt;', user))
            for attr, step in zip(_STEP_NAMES, self.STEPS)]

def next_step(self):
    user = self.user_created.first_name
    step = next((i for i, attr in enumerate(_STEP_NAMES)
                        if getattr(self, attr) is None),
                None) # assumes Python 2.6+
    if step == None:
         return "Done!"
    else:
         return str(step) + ": " + self.STEPS[step].replace('&lt;user_created&gt;', user)
</snippet></ROW><ROW><id>9622881</id><snippet>next</snippet></ROW><ROW><id>9622881</id><snippet>try:
    step = (i for i, attr in enumerate(_STEP_NAMES) if getattr(self, attr) is None).next()
except StopIteration:
    return "Done!"
return str(step) + ": " + self.STEPS[step].replace('&lt;user_created&gt;', user)
</snippet></ROW><ROW><id>9623147</id><snippet>set</snippet></ROW><ROW><id>9623147</id><snippet>set(x) == set(y)
</snippet></ROW><ROW><id>9623147</id><snippet>set</snippet></ROW><ROW><id>9623147</id><snippet>set</snippet></ROW><ROW><id>9623147</id><snippet>collections.Counter</snippet></ROW><ROW><id>9623147</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; compare = lambda x, y: collections.Counter(x) == collections.Counter(y)
&gt;&gt;&gt; 
&gt;&gt;&gt; compare([1,2,3], [1,2,3,3])
False
&gt;&gt;&gt; compare([1,2,3], [1,2,3])
True
&gt;&gt;&gt; compare([1,2,3,3], [1,2,2,3])
False
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9623246</id><snippet>template = """                                                                  
function routes(app, model){{
  app.get('/preNew{className}', function(req, res){{
    res.render('{className}'.ejs, {{}});                                           
  }};                                                      
}});""".format(className=className)
</snippet></ROW><ROW><id>9623274</id><snippet>&gt;&gt;&gt; from unidecode import unidecode
&gt;&gt;&gt; s = u'This is sóme randóm "text" that í wánt to process'
&gt;&gt;&gt; unidecode(s)
'This is some random "text" that i want to process'
&gt;&gt;&gt; import urllib
&gt;&gt;&gt; urllib.urlencode(dict(x=unidecode(s)))[2:]
'This+is+some+random+%22text%22+that+i+want+to+process'
</snippet></ROW><ROW><id>9623274</id><snippet>&gt;&gt;&gt; safe_chars = 'abcdefghijklmnopqrstuvwxyz01234567890-_'
&gt;&gt;&gt; filter(lambda x: x in safe_chars, "i think i'm already doing that")
'ithinkimalreadydoingthat'
</snippet></ROW><ROW><id>9623274</id><snippet>&gt;&gt;&gt; urllib.urlencode(dict(url='google.com/'))
'url=google.com%2F'

&gt;&gt;&gt; help(urllib.urlencode)
Help on function urlencode in module urllib:

urlencode(query, doseq=0)
    Encode a sequence of two-element tuples or dictionary into a URL query string.

    If any values in the query arg are sequences and doseq is true, each
    sequence element is converted to a separate parameter.

    If the query arg is a sequence of two-element tuples, the order of the
    parameters in the output will match the order of parameters in the
    input.
(END)
</snippet></ROW><ROW><id>9623274</id><snippet>&gt;&gt;&gt; s = u'This is sóme randóm "text" that í wánt to process'
&gt;&gt;&gt; allowed_chars = 'abcdefghijklmnopqrstuwvxyz01234567890'
&gt;&gt;&gt; ''.join([ x if x in allowed_chars else '-' for x in unidecode(s.lower()) ])
u'this-is-some-random--text--that-i-want-to-process'
&gt;&gt;&gt; s = u"Niños y Bebés"
&gt;&gt;&gt; ''.join([ x if x in allowed_chars else '-' for x in unidecode(s.lower()) ])
u'ninos-y-bebes'
&gt;&gt;&gt; s = u"1ª Categoria, ½ docena"
&gt;&gt;&gt; ''.join([ x if x in allowed_chars else '-' for x in unidecode(s.lower()) ])
u'1a-categoria--1-2-docena'
</snippet></ROW><ROW><id>9623276</id><snippet>lines = file_variable.read()
print re.subn('&lt;.*?&gt;', ' ', line)
</snippet></ROW><ROW><id>9623335</id><snippet>users = Tracking.objects.values( 'tracking_id' ).filter(date__range=(start_date, end_date) ...
</snippet></ROW><ROW><id>9623335</id><snippet>users = Tracking.objects.values( 'tracking_id' ).filter(date__range=(start_date, end_date)) ... 
</snippet></ROW><ROW><id>9623592</id><snippet>(*) Group specific keyring: @g or -6

   This is a place holder for a group specific keyring, but is not actually implemented yet in the kernel.
</snippet></ROW><ROW><id>9623597</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>9623738</id><snippet>numpy</snippet></ROW><ROW><id>9623738</id><snippet>&gt;&gt;&gt; def integrate(fs):
...     print fs[0](1)
... 
&gt;&gt;&gt; f1 = lambda x: x**2
&gt;&gt;&gt; f2 = lambda x: x**3
&gt;&gt;&gt; 
&gt;&gt;&gt; fs = (f1, f2)
&gt;&gt;&gt; 
&gt;&gt;&gt; integrate(fs)
1
</snippet></ROW><ROW><id>9623891</id><snippet>collections.Counter</snippet></ROW><ROW><id>9623891</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; d = Counter({'0':3, '1':3, '2':4, '3':4, '4':4})
&gt;&gt;&gt; d
Counter({'3': 4, '2': 4, '4': 4, '1': 3, '0': 3})
&gt;&gt;&gt; d.update(d.keys())
&gt;&gt;&gt; d
Counter({'3': 5, '2': 5, '4': 5, '1': 4, '0': 4})
</snippet></ROW><ROW><id>9623891</id><snippet>d.update()</snippet></ROW><ROW><id>9623891</id><snippet>&gt;&gt;&gt; d = Counter({'3': 4, '2': 4, '4': 4, '1': 3, '0': 3})
&gt;&gt;&gt; d.update((k for k, v in d.items() if v == 4))
&gt;&gt;&gt; d
Counter({'3': 5, '2': 5, '4': 5, '1': 3, '0': 3})
</snippet></ROW><ROW><id>9624017</id><snippet>try:
    ..code that might raise an exception...
except ExceptionType, e:
    ...do something...
</snippet></ROW><ROW><id>9624017</id><snippet>try:
    login(mail,pass)
except imaplib.IMAP4.error, e:
    print "Ouch -- an error from imaplib!"
</snippet></ROW><ROW><id>9624017</id><snippet>try:
    login(mail,pass)
except Exception, e:
    print type(e)
</snippet></ROW><ROW><id>9624119</id><snippet>Infinity-1.0.gir</snippet></ROW><ROW><id>9624119</id><snippet>from gi.repository import Infinity
</snippet></ROW><ROW><id>9624150</id><snippet>pandas.stats.moments</snippet></ROW><ROW><id>9624266</id><snippet>input 1</snippet></ROW><ROW><id>9624266</id><snippet>bar_code_reader</snippet></ROW><ROW><id>9624266</id><snippet>input 1</snippet></ROW><ROW><id>9624266</id><snippet>input_status &amp; 1</snippet></ROW><ROW><id>9624266</id><snippet>True</snippet></ROW><ROW><id>9624266</id><snippet>False</snippet></ROW><ROW><id>9624266</id><snippet>bit 0</snippet></ROW><ROW><id>9624266</id><snippet>bar_code_reader()</snippet></ROW><ROW><id>9624266</id><snippet>bar_code_reader</snippet></ROW><ROW><id>9624266</id><snippet>bar_code_reader</snippet></ROW><ROW><id>9624266</id><snippet>bit 0</snippet></ROW><ROW><id>9624266</id><snippet>None</snippet></ROW><ROW><id>9624266</id><snippet>None</snippet></ROW><ROW><id>9624266</id><snippet>BIT0 = 2 ** 0
BIT1 = 2 ** 1
BIT2 = 2 ** 2
BIT3 = 2 ** 3
BIT4 = 2 ** 4
BIT5 = 2 ** 5
BIT6 = 2 ** 6
BIT7 = 2 ** 7
</snippet></ROW><ROW><id>9624586</id><snippet>with open("input.txt") as f:
    lastmarkedline = None
    for line in f:
        if line.startswith('&gt;'):
            lastmarkedline = line
        elif lastmarkedline is not None:
            field1 = lastmarkedline.split()[1]
            field2 = line.split()[1]
            print "{0}\t{1}".format(field1, field2)
</snippet></ROW><ROW><id>9624606</id><snippet>atan2</snippet></ROW><ROW><id>9624606</id><snippet>def rect_to_polar_input(x, y):
    hypotenuse = math.hypot(x, y)
    angle = round(math.degrees(math.atan2(y, x)))
    if angle&lt;0:
        angle += 360
    return hypotenuse, angle
</snippet></ROW><ROW><id>9624606</id><snippet>if</snippet></ROW><ROW><id>9624606</id><snippet>atan2</snippet></ROW><ROW><id>9624606</id><snippet>atan</snippet></ROW><ROW><id>9624606</id><snippet>atan2</snippet></ROW><ROW><id>9624606</id><snippet>hypot</snippet></ROW><ROW><id>9624661</id><snippet>&gt;&gt;&gt; from pyparsing import *
&gt;&gt;&gt; 
&gt;&gt;&gt; def p(s,l,t):
...     print 'Location of %s: %s' % (s, l,)
... 
&gt;&gt;&gt; Z = Literal('0')
&gt;&gt;&gt; POINT = Literal('.')
&gt;&gt;&gt; BIN_DIGITS = Word('01')
&gt;&gt;&gt; OCT_DIGITS = Word('01234567')
&gt;&gt;&gt; DEC_DIGITS = Word('0123456789')
&gt;&gt;&gt; HEX_DIGITS = Word('0123456789abcdefABCDEF')
&gt;&gt;&gt; DEC_INT = DEC_DIGITS.copy().setParseAction(lambda t: int(t[0]))
&gt;&gt;&gt; BIN_INT = Combine(Z + ((Literal('b') | 'B')) + BIN_DIGITS).\
...         setParseAction(lambda t: int(t[0], 2))
&gt;&gt;&gt; OCT_INT = Combine(Z + ((Literal('o') | 'O')) + OCT_DIGITS).\
...         setParseAction(lambda t: int(t[0], 8))
&gt;&gt;&gt; HEX_INT = Combine(Z + ((Literal('x') | 'X')) + HEX_DIGITS).\
...         setParseAction(lambda t: int(t[0], 16))
&gt;&gt;&gt; INTEGER = HEX_INT | OCT_INT | BIN_INT | DEC_INT
&gt;&gt;&gt; EXP = Combine(CaselessLiteral('E') + Optional(Literal('+') | Literal('-')) + DEC_DIGITS)
&gt;&gt;&gt; POINT_FLOAT = Combine(Optional(DEC_DIGITS) + POINT + DEC_DIGITS) | \
...         Combine(DEC_DIGITS + POINT)
&gt;&gt;&gt; EXP_FLOAT = Combine(DEC_DIGITS + EXP) | Combine(POINT_FLOAT + EXP)
&gt;&gt;&gt; FLOAT = (EXP_FLOAT | POINT_FLOAT).setParseAction(lambda t: float(t[0]))
&gt;&gt;&gt; NUMBER = (FLOAT | INTEGER).setParseAction(p)
&gt;&gt;&gt; NUMBER2 = Combine(ZeroOrMore(White(exact=1)).suppress() + NUMBER)
&gt;&gt;&gt; 
&gt;&gt;&gt; NUMBER2.parseString('    12345')
Location of     12345: 4
(['12345'], {})
</snippet></ROW><ROW><id>9624678</id><snippet>assert</snippet></ROW><ROW><id>9624678</id><snippet>assert(callable(func))
</snippet></ROW><ROW><id>9624678</id><snippet>func</snippet></ROW><ROW><id>9624678</id><snippet>self.symbols_map</snippet></ROW><ROW><id>9624678</id><snippet>self.symbols_map</snippet></ROW><ROW><id>9624678</id><snippet>symbol</snippet></ROW><ROW><id>9624678</id><snippet>self.symbols_map[symbol]</snippet></ROW><ROW><id>9624678</id><snippet>KeyError</snippet></ROW><ROW><id>9624678</id><snippet>type(keypress)</snippet></ROW><ROW><id>9624678</id><snippet>None</snippet></ROW><ROW><id>9624678</id><snippet>isinstance()</snippet></ROW><ROW><id>9624678</id><snippet>type(x) is int</snippet></ROW><ROW><id>9624678</id><snippet>type(x) == int</snippet></ROW><ROW><id>9624678</id><snippet>None</snippet></ROW><ROW><id>9624678</id><snippet>x is None</snippet></ROW><ROW><id>9624678</id><snippet>type(x) is NoneType</snippet></ROW><ROW><id>9624911</id><snippet>Tag</snippet></ROW><ROW><id>9624911</id><snippet>Tag.objects</snippet></ROW><ROW><id>9624911</id><snippet>from tagging.models import TagManager, Tag
import tagging

class MyTagManager(TagManager):
    def update_tags(self, obj, tag_names):
        # My actions
        return super(MyTagManager, self).update_tags(obj, tag_names)
    def add_tag(self, obj, tag_name):
        # My actions
        return super(MyTagManager, self).add_tag(obj, tag_name)

class MyTag(Tag):
    objects = MyTagManager()
    class Meta:
        proxy = True

tagging.models.Tag = MyTag
tagging.fields.Tag = MyTag
</snippet></ROW><ROW><id>9625260</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; d1 = datetime.date.today()
&gt;&gt;&gt; from dateutil.relativedelta import relativedelta
&gt;&gt;&gt; d1 + relativedelta(months=1)
datetime.date(2012, 4, 8)

&gt;&gt;&gt; d2 = datetime.date(year=2012,month=1,day=31)
&gt;&gt;&gt; d2 + relativedelta(months=1)
datetime.date(2012, 2, 29)
</snippet></ROW><ROW><id>9625454</id><snippet>d</snippet></ROW><ROW><id>9625454</id><snippet>sum(len(x) for x in d['childs'].itervalues())
</snippet></ROW><ROW><id>9625454</id><snippet>for</snippet></ROW><ROW><id>9625454</id><snippet>sum(map(len, d['childs'].itervalues()))
</snippet></ROW><ROW><id>9625454</id><snippet>reduce(lambda x, y: x + len(y), d['childs'].itervalues(), 0)
</snippet></ROW><ROW><id>9625562</id><snippet>for row in reader:
    id1 = ids.setdefault(row[0], len(ids))
</snippet></ROW><ROW><id>9625562</id><snippet>has_key</snippet></ROW><ROW><id>9625562</id><snippet>x in d</snippet></ROW><ROW><id>9625562</id><snippet>d.has_key(x)</snippet></ROW><ROW><id>9625780</id><snippet>install.packages("zipcode")</snippet></ROW><ROW><id>9625780</id><snippet>data(zipcode)</snippet></ROW><ROW><id>9625780</id><snippet>map</snippet></ROW><ROW><id>9625780</id><snippet>sp</snippet></ROW><ROW><id>9625780</id><snippet>## Preliminary
library(maps)
library(zipcode)
library(sp)
data(zipcode)

## Plot state map of USA
map("state")

## Select locations for 100 random zip codes
plotZip &lt;- zipcode[sample(nrow(zipcode))[1:100], c("longitude", "latitude")]

## Plot them
plot(SpatialPoints(plotZip), pch=20, cex=0.75, add=TRUE, col="red")]
</snippet></ROW><ROW><id>9625780</id><snippet>zipcode</snippet></ROW><ROW><id>9625780</id><snippet>plotZip</snippet></ROW><ROW><id>9625780</id><snippet>plotZip &lt;- subset(zipcode, 
   subset=(zip %in% c(90210, 90211)), 
   select=c("longitude", "latitude"))
</snippet></ROW><ROW><id>9625890</id><snippet>QScrollArea</snippet></ROW><ROW><id>9625890</id><snippet>QScrollBar</snippet></ROW><ROW><id>9625890</id><snippet>import sys
from PyQt4 import QtGui, QtCore

class MyDialog(QtGui.QDialog):
    def __init__(self, parent=None):
        super(MyDialog, self).__init__(parent)

        scrolllayout = QtGui.QVBoxLayout()

        scrollwidget = QtGui.QWidget()
        scrollwidget.setLayout(scrolllayout)

        scroll = QtGui.QScrollArea()
        scroll.setWidgetResizable(True)  # Set to make the inner widget resize with scroll area
        scroll.setWidget(scrollwidget)

        self.groupboxes = []  # Keep a reference to groupboxes for later use
        for i in range(8):    # 8 groupboxes with textedit in them
            groupbox = QtGui.QGroupBox('%d' % i)
            grouplayout = QtGui.QHBoxLayout()
            grouptext = QtGui.QTextEdit()
            grouplayout.addWidget(grouptext)
            groupbox.setLayout(grouplayout)
            scrolllayout.addWidget(groupbox)
            self.groupboxes.append(groupbox)

        self.buttonbox = QtGui.QDialogButtonBox()
        self.buttonbox.setOrientation(QtCore.Qt.Vertical)
        self.buttonbox.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Ok)

        layout = QtGui.QHBoxLayout()
        layout.addWidget(scroll)
        layout.addWidget(self.buttonbox)
        self.setLayout(layout)

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    dialog = MyDialog()
    dialog.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>9626086</id><snippet>class MyList(list):
  def passes_rules(self, idx, value):
    """ Checks to see if this value can be set to this index """

  def __setitem__(self, idx, value):
    if self.passes_rules(idx, value):
      super(MyList, self).__setitem__(idx, value)
</snippet></ROW><ROW><id>9626468</id><snippet>property</snippet></ROW><ROW><id>9626468</id><snippet>property</snippet></ROW><ROW><id>9626468</id><snippet>locals()</snippet></ROW><ROW><id>9626468</id><snippet>fget</snippet></ROW><ROW><id>9626468</id><snippet>fset</snippet></ROW><ROW><id>9626468</id><snippet>fdel</snippet></ROW><ROW><id>9626468</id><snippet>doc</snippet></ROW><ROW><id>9626468</id><snippet>Property</snippet></ROW><ROW><id>9626468</id><snippet>__init__</snippet></ROW><ROW><id>9626468</id><snippet>property</snippet></ROW><ROW><id>9626468</id><snippet>@x.setter</snippet></ROW><ROW><id>9626468</id><snippet>@x.deleter</snippet></ROW><ROW><id>9626468</id><snippet>    class property(object):
        "2.6 properties for 2.5-"    
        def __init__(self, fget=None, fset=None, fdel=None, doc=None):
            self.fget = fget
            self.fset = fset
            self.fdel = fdel
            self.__doc__ = doc or fget.__doc__
        def __call__(self, func):
            self.fget = func
            if not self.__doc__:
                self.__doc__ = fget.__doc__
        def __get__(self, obj, objtype=None):
            if obj is None:
                return self         
            if self.fget is None:
                raise AttributeError("unreadable attribute")
            return self.fget(obj)
        def __set__(self, obj, value):
            if self.fset is None:
                raise AttributeError("can't set attribute")
            self.fset(obj, value)
        def __delete__(self, obj):
            if self.fdel is None:
                raise AttributeError("can't delete attribute")
            self.fdel(obj)
        def setter(self, func):
            self.fset = func
            return self
        def deleter(self, func):
            self.fdel = func
            return self
</snippet></ROW><ROW><id>9626501</id><snippet>sudo apt-get install python-pip
sudo pip install matplotlib
</snippet></ROW><ROW><id>9626572</id><snippet>import matplotlib
from pylab import *

val = 3-6*rand(5)    # the bar lengths        # changed your data slightly
pos = arange(5)+.5    # the bar centers on the y axis
print pos
figure(1)
barh(pos,val, align='center',height=0.1)    # notice the 'height' argument
yticks(pos, ('Tom', 'Dick', 'Harry', 'Slim', 'Jim'))

gca().axvline(0,color='k',lw=3)   # poor man's zero level

xlabel('Performance')
title('horizontal bar chart using matplotlib')
grid(True)
show()
</snippet></ROW><ROW><id>9626572</id><snippet>from pyplot import *</snippet></ROW><ROW><id>9626572</id><snippet>import matplotlib.pyplot as plt
from numpy.random import rand
from numpy import arange

val = 3-6*rand(5)    # the bar lengths
pos = arange(5)+.5    # the bar centers on the y axis
print pos

fig = plt.figure()
ax = fig.add_subplot(111)
ax.barh(pos,val, align='center',height=0.1)
ax.set_yticks(pos, ('Tom', 'Dick', 'Harry', 'Slim', 'Jim'))

ax.axvline(0,color='k',lw=3)   # poor man's zero level

ax.set_xlabel('Performance')
ax.set_title('horizontal bar chart using matplotlib')
ax.grid(True)
plt.show()
</snippet></ROW><ROW><id>9626572</id><snippet>matplotlib</snippet></ROW><ROW><id>9626596</id><snippet>parsed_uri = urlparse( 'http://stackoverflow.com/questions/1234567/blah-blah-blah-blah' )
domain = '{uri.scheme}://{uri.netloc}/'.format(uri=parsed_uri)
print domain

# gives
'http://stackoverflow.com/'
</snippet></ROW><ROW><id>9626596</id><snippet>domain</snippet></ROW><ROW><id>9626669</id><snippet>Property</snippet></ROW><ROW><id>9626669</id><snippet>Property</snippet></ROW><ROW><id>9626669</id><snippet>Item.__unicode__</snippet></ROW><ROW><id>9626669</id><snippet>self.name</snippet></ROW><ROW><id>9626669</id><snippet>self.location</snippet></ROW><ROW><id>9626669</id><snippet>self.name</snippet></ROW><ROW><id>9626669</id><snippet>__unicode__</snippet></ROW><ROW><id>9626669</id><snippet>self.location</snippet></ROW><ROW><id>9626669</id><snippet>Location.__unicode__</snippet></ROW><ROW><id>9626669</id><snippet>self.room</snippet></ROW><ROW><id>9626669</id><snippet>self.floor</snippet></ROW><ROW><id>9626669</id><snippet>self.building</snippet></ROW><ROW><id>9626669</id><snippet>__unicode__</snippet></ROW><ROW><id>9626669</id><snippet>filter</snippet></ROW><ROW><id>9626669</id><snippet>locations</snippet></ROW><ROW><id>9626669</id><snippet>[]</snippet></ROW><ROW><id>9626669</id><snippet>self.prop</snippet></ROW><ROW><id>9626669</id><snippet>Property</snippet></ROW><ROW><id>9626669</id><snippet>locations</snippet></ROW><ROW><id>9626669</id><snippet>", ".join( locations )</snippet></ROW><ROW><id>9626669</id><snippet>TypeError</snippet></ROW><ROW><id>9626669</id><snippet>Property</snippet></ROW><ROW><id>9626669</id><snippet>str.format</snippet></ROW><ROW><id>9626669</id><snippet>Item.__unicode__</snippet></ROW><ROW><id>9626669</id><snippet>locations.append( self.prop )
</snippet></ROW><ROW><id>9626669</id><snippet>locations.append( unicode(self.prop) )
</snippet></ROW><ROW><id>9626669</id><snippet>str.format</snippet></ROW><ROW><id>9626669</id><snippet>str()</snippet></ROW><ROW><id>9626669</id><snippet>str.join</snippet></ROW><ROW><id>9626923</id><snippet>cut</snippet></ROW><ROW><id>9626923</id><snippet>&gt;&gt;&gt; logline = 'Feb 26 14:20:04 laptop kernel: [19.392640] ip_tables: (C) 2000-2006 Netfilter Core Team'
&gt;&gt;&gt; logline.split(' ')[0:4]
['Feb', '26', '14:20:04', 'laptop']
</snippet></ROW><ROW><id>9626957</id><snippet>with open('file') as file:
  lines = file.readlines()

headers = lines[0:1]
rest = lines[1:]
chunk_size = 4

def chunks(lst, chunk_size):
  for i in xrange(0, len(lst), chunk_size):
    yield lst[i:i + chunk_size]

def write_rows(rows, file):
  for row in rows:
    file.write('%s' % row)

part = 1
for chunk in chunks(rest, chunk_size):
  with open('part%d' % part, 'w') as file:
    write_rows(headers, file)
    write_rows(chunk, file)
  part += 1
</snippet></ROW><ROW><id>9626957</id><snippet>$ cat file &amp;&amp; python mkt.py &amp;&amp; for p in part*; do echo ---- $p; cat $p; done
header
1
2
3
4
5
6
7
8
9
10
11
12
13
14
---- part1
header
1
2
3
4
---- part2
header
5
6
7
8
---- part3
header
9
10
11
12
---- part4
header
13
14
</snippet></ROW><ROW><id>9626957</id><snippet>chunk_size</snippet></ROW><ROW><id>9626957</id><snippet>headers</snippet></ROW><ROW><id>9626957</id><snippet>from itertools import islice

headers_count = 5
chunk_size = 250000

with open('file') as fin:
  headers = list(islice(fin, headers_count))

  part = 1
  while True:
    line_iter = islice(fin, chunk_size)
    try:
      first_line = line_iter.next()
    except StopIteration:
      break
    with open('part%d' % part, 'w') as fout:
      for line in headers:
        fout.write(line)
      fout.write(first_line)
      for line in line_iter:
        fout.write(line)
    part += 1
</snippet></ROW><ROW><id>9626957</id><snippet>mkt2.py</snippet></ROW><ROW><id>9626957</id><snippet>with open('file', 'w') as fout:
  for i in range(5):
    fout.write(10 * ('header %d ' % i) + '\n')
  for i in range(1234567):
    fout.write(10 * ('line %d ' % i) + '\n')
</snippet></ROW><ROW><id>9626957</id><snippet>rt.sh</snippet></ROW><ROW><id>9626957</id><snippet>rm part*
echo ---- file
head -n7 file
tail -n2 file

python mkt2.py

for i in part*; do
  echo ---- $i
  head -n7 $i
  tail -n2 $i
done
</snippet></ROW><ROW><id>9626957</id><snippet>$ sh rt.sh 
---- file
header 0 header 0 header 0 header 0 header 0 header 0 header 0 header 0 header 0 header 0 
header 1 header 1 header 1 header 1 header 1 header 1 header 1 header 1 header 1 header 1 
header 2 header 2 header 2 header 2 header 2 header 2 header 2 header 2 header 2 header 2 
header 3 header 3 header 3 header 3 header 3 header 3 header 3 header 3 header 3 header 3 
header 4 header 4 header 4 header 4 header 4 header 4 header 4 header 4 header 4 header 4 
line 0 line 0 line 0 line 0 line 0 line 0 line 0 line 0 line 0 line 0 
line 1 line 1 line 1 line 1 line 1 line 1 line 1 line 1 line 1 line 1 
line 1234565 line 1234565 line 1234565 line 1234565 line 1234565 line 1234565 line 1234565 line 1234565 line 1234565 line 1234565 
line 1234566 line 1234566 line 1234566 line 1234566 line 1234566 line 1234566 line 1234566 line 1234566 line 1234566 line 1234566 
---- part1
header 0 header 0 header 0 header 0 header 0 header 0 header 0 header 0 header 0 header 0 
header 1 header 1 header 1 header 1 header 1 header 1 header 1 header 1 header 1 header 1 
header 2 header 2 header 2 header 2 header 2 header 2 header 2 header 2 header 2 header 2 
header 3 header 3 header 3 header 3 header 3 header 3 header 3 header 3 header 3 header 3 
header 4 header 4 header 4 header 4 header 4 header 4 header 4 header 4 header 4 header 4 
line 0 line 0 line 0 line 0 line 0 line 0 line 0 line 0 line 0 line 0 
line 1 line 1 line 1 line 1 line 1 line 1 line 1 line 1 line 1 line 1 
line 249998 line 249998 line 249998 line 249998 line 249998 line 249998 line 249998 line 249998 line 249998 line 249998 
line 249999 line 249999 line 249999 line 249999 line 249999 line 249999 line 249999 line 249999 line 249999 line 249999 
---- part2
header 0 header 0 header 0 header 0 header 0 header 0 header 0 header 0 header 0 header 0 
header 1 header 1 header 1 header 1 header 1 header 1 header 1 header 1 header 1 header 1 
header 2 header 2 header 2 header 2 header 2 header 2 header 2 header 2 header 2 header 2 
header 3 header 3 header 3 header 3 header 3 header 3 header 3 header 3 header 3 header 3 
header 4 header 4 header 4 header 4 header 4 header 4 header 4 header 4 header 4 header 4 
line 250000 line 250000 line 250000 line 250000 line 250000 line 250000 line 250000 line 250000 line 250000 line 250000 
line 250001 line 250001 line 250001 line 250001 line 250001 line 250001 line 250001 line 250001 line 250001 line 250001 
line 499998 line 499998 line 499998 line 499998 line 499998 line 499998 line 499998 line 499998 line 499998 line 499998 
line 499999 line 499999 line 499999 line 499999 line 499999 line 499999 line 499999 line 499999 line 499999 line 499999 
---- part3
header 0 header 0 header 0 header 0 header 0 header 0 header 0 header 0 header 0 header 0 
header 1 header 1 header 1 header 1 header 1 header 1 header 1 header 1 header 1 header 1 
header 2 header 2 header 2 header 2 header 2 header 2 header 2 header 2 header 2 header 2 
header 3 header 3 header 3 header 3 header 3 header 3 header 3 header 3 header 3 header 3 
header 4 header 4 header 4 header 4 header 4 header 4 header 4 header 4 header 4 header 4 
line 500000 line 500000 line 500000 line 500000 line 500000 line 500000 line 500000 line 500000 line 500000 line 500000 
line 500001 line 500001 line 500001 line 500001 line 500001 line 500001 line 500001 line 500001 line 500001 line 500001 
line 749998 line 749998 line 749998 line 749998 line 749998 line 749998 line 749998 line 749998 line 749998 line 749998 
line 749999 line 749999 line 749999 line 749999 line 749999 line 749999 line 749999 line 749999 line 749999 line 749999 
---- part4
header 0 header 0 header 0 header 0 header 0 header 0 header 0 header 0 header 0 header 0 
header 1 header 1 header 1 header 1 header 1 header 1 header 1 header 1 header 1 header 1 
header 2 header 2 header 2 header 2 header 2 header 2 header 2 header 2 header 2 header 2 
header 3 header 3 header 3 header 3 header 3 header 3 header 3 header 3 header 3 header 3 
header 4 header 4 header 4 header 4 header 4 header 4 header 4 header 4 header 4 header 4 
line 750000 line 750000 line 750000 line 750000 line 750000 line 750000 line 750000 line 750000 line 750000 line 750000 
line 750001 line 750001 line 750001 line 750001 line 750001 line 750001 line 750001 line 750001 line 750001 line 750001 
line 999998 line 999998 line 999998 line 999998 line 999998 line 999998 line 999998 line 999998 line 999998 line 999998 
line 999999 line 999999 line 999999 line 999999 line 999999 line 999999 line 999999 line 999999 line 999999 line 999999 
---- part5
header 0 header 0 header 0 header 0 header 0 header 0 header 0 header 0 header 0 header 0 
header 1 header 1 header 1 header 1 header 1 header 1 header 1 header 1 header 1 header 1 
header 2 header 2 header 2 header 2 header 2 header 2 header 2 header 2 header 2 header 2 
header 3 header 3 header 3 header 3 header 3 header 3 header 3 header 3 header 3 header 3 
header 4 header 4 header 4 header 4 header 4 header 4 header 4 header 4 header 4 header 4 
line 1000000 line 1000000 line 1000000 line 1000000 line 1000000 line 1000000 line 1000000 line 1000000 line 1000000 line 1000000 
line 1000001 line 1000001 line 1000001 line 1000001 line 1000001 line 1000001 line 1000001 line 1000001 line 1000001 line 1000001 
line 1234565 line 1234565 line 1234565 line 1234565 line 1234565 line 1234565 line 1234565 line 1234565 line 1234565 line 1234565 
line 1234566 line 1234566 line 1234566 line 1234566 line 1234566 line 1234566 line 1234566 line 1234566 line 1234566 line 1234566 
</snippet></ROW><ROW><id>9626957</id><snippet>real    0m0.935s
user    0m0.708s
sys     0m0.200s
</snippet></ROW><ROW><id>9627145</id><snippet>schemamigration --auto south</snippet></ROW><ROW><id>9627145</id><snippet>python setup.py install</snippet></ROW><ROW><id>9627145</id><snippet>python manage.py syncdb --all
</snippet></ROW><ROW><id>9627145</id><snippet>python manage.py migrate --fake 
</snippet></ROW><ROW><id>9627361</id><snippet>''.join(t[0] for t in tuples)
</snippet></ROW><ROW><id>9627361</id><snippet>tuple</snippet></ROW><ROW><id>9627717</id><snippet>__name__</snippet></ROW><ROW><id>9627717</id><snippet>__name__</snippet></ROW><ROW><id>9627717</id><snippet>"__main__"</snippet></ROW><ROW><id>9627717</id><snippet># main.py
import pygame
from pygame.locals import *

import content

def init():
    pygame.display.init()

def stuff():
    content.morestuff()

if __name__ == '__main__':
    init()
    stuff()
</snippet></ROW><ROW><id>9627717</id><snippet># content.py
import pygame
from pygame.locals import *

def init():
    pygame.display.init()

def morestuff():
    "do some more stuff"

if __name__ == '__main__':
    init()
    morestuff()
</snippet></ROW><ROW><id>9627717</id><snippet>init()</snippet></ROW><ROW><id>9627717</id><snippet>pygame.display.init()</snippet></ROW><ROW><id>9627717</id><snippet>init()</snippet></ROW><ROW><id>9627942</id><snippet>help(dates.num2date)</snippet></ROW><ROW><id>9627942</id><snippet>x</snippet></ROW><ROW><id>9627942</id><snippet>19910102</snippet></ROW><ROW><id>9627942</id><snippet>datestr2num</snippet></ROW><ROW><id>9627942</id><snippet>help(dates.datestr2num)</snippet></ROW><ROW><id>9627942</id><snippet>new_x = dates.datestr2num(date) # where date is '01/02/1991'
</snippet></ROW><ROW><id>9628103</id><snippet>beginning = '/foo/1231'
mid = os.path.listdir(beginning)[0]
fullpath = os.path.join(beginning, mid, 'bar')
</snippet></ROW><ROW><id>9628103</id><snippet>glob</snippet></ROW><ROW><id>9628103</id><snippet>fullpath = glob.glob('/foo/1231/*/bar')[0]
</snippet></ROW><ROW><id>9628230</id><snippet>fib</snippet></ROW><ROW><id>9628230</id><snippet>fib</snippet></ROW><ROW><id>9628230</id><snippet>fib1</snippet></ROW><ROW><id>9628389</id><snippet>ctypes.cast</snippet></ROW><ROW><id>9628389</id><snippet>POINTER(data_t)</snippet></ROW><ROW><id>9628389</id><snippet>typedef struct data {
    int foo;
    wchar_t* bar;
    char* baz;
} data_t;

typedef void (*CALLBACK)(data_t* p);

CALLBACK g_callback = 0;

extern "C" __declspec(dllexport) void set_callback(CALLBACK f)
{
    g_callback = f;
}

extern "C" __declspec(dllexport) void call_callback()
{
    data_t data;
    data.foo = 123;
    data.bar = L"马克";
    data.baz = "Mark";
    g_callback(&amp;data);
}
</snippet></ROW><ROW><id>9628389</id><snippet>from ctypes import *

class data_t(Structure):
    _fields_ = [
        ("foo", c_int),
        ("bar", c_wchar_p),
        ("baz", c_char_p)]

dll = CDLL('test')

@CFUNCTYPE(None,c_int)
def callback(n):
    p = cast(n,POINTER(data_t)).contents
    print(p.foo,p.bar,p.baz)

@CFUNCTYPE(None,POINTER(data_t))
def callback2(n):
    p = n.contents
    print(p.foo,p.bar,p.baz)

dll.set_callback(callback)
dll.call_callback()

dll.set_callback(callback2)
dll.call_callback()
</snippet></ROW><ROW><id>9628389</id><snippet>123 马克 b'Mark'
123 马克 b'Mark'
</snippet></ROW><ROW><id>9628519</id><snippet>result = FibonacciStorage._fib(number-1) + FibonacciStorage._fib(number-2)
//                   here ^                        and here ^
</snippet></ROW><ROW><id>9628519</id><snippet>_storage</snippet></ROW><ROW><id>9628519</id><snippet>                                 fib(4)
                               /        \
                          fib(3)   +     fib(2)
                         /    \          /     \
                    fib(2) + fib(1)   fib(1) + fib(0)
                    /    \
               fib(1) + fib(0)
</snippet></ROW><ROW><id>9628519</id><snippet>fib(4)</snippet></ROW><ROW><id>9628519</id><snippet>fib(3)</snippet></ROW><ROW><id>9628519</id><snippet>fib(4)</snippet></ROW><ROW><id>9628519</id><snippet>fib(5)</snippet></ROW><ROW><id>9628853</id><snippet>pixFindRectangleComps(*args)
            ('PIX', '*pixs')       
    ('l_int32', 'dist')       
    ('l_int32', 'minw')       
    ('l_int32', 'minh')       
      pixFindRectangleComps()

          Input:  pixs (1 bpp)
                  dist (max distance allowed between bounding box and nearest
                        foreground pixel within it)
                  minw, minh (minimum size in each direction as a requirement
                              for a conforming rectangle)
          Return: boxa (of components that conform), or null on error

      Notes:
          (1) This applies the function pixConformsToRectangle() to
              each 8-c.c. in pixs, and returns a boxa containing the
              regions of all components that are conforming.
          (2) Conforming components must satisfy both the size constraint
              given by @minsize and the slop in conforming to a rectangle
              determined by @dist.
(END) 
</snippet></ROW><ROW><id>9628978</id><snippet>print "l: " + repr(l)</snippet></ROW><ROW><id>9628978</id><snippet>print "l: ", l</snippet></ROW><ROW><id>9629033</id><snippet>proc_open()</snippet></ROW><ROW><id>9629033</id><snippet>shmop_open()</snippet></ROW><ROW><id>9629033</id><snippet>socket_bind()</snippet></ROW><ROW><id>9629210</id><snippet>temp_list = source_list</snippet></ROW><ROW><id>9629210</id><snippet>temp_list</snippet></ROW><ROW><id>9629210</id><snippet>temp_list = source_list[:]
</snippet></ROW><ROW><id>9629210</id><snippet>source_list</snippet></ROW><ROW><id>9629351</id><snippet>__enter__()</snippet></ROW><ROW><id>9629387</id><snippet>def unique_ips():
    f = open('log_file.txt','r')
    ips = set()
    for line in f:
        ip = line.split()[0]
        ips.add(ip)
    return ips

if __name__=='__main__':
    print unique_ips()
</snippet></ROW><ROW><id>9629387</id><snippet>python 2.6</snippet></ROW><ROW><id>9629402</id><snippet>cleaned = stringwithslashes.decode('string_escape')
</snippet></ROW><ROW><id>9629557</id><snippet>from openpyxl import workbook # not Workbook
</snippet></ROW><ROW><id>9629581</id><snippet>a[ [0,2], ]
</snippet></ROW><ROW><id>9629581</id><snippet>i:j</snippet></ROW><ROW><id>9629581</id><snippet>k:p</snippet></ROW><ROW><id>9629581</id><snippet>a[ range(i,j) + range(k,p)   , ]
</snippet></ROW><ROW><id>9629581</id><snippet>range(i,j) + range(k,p)</snippet></ROW><ROW><id>9629581</id><snippet>[ i, i+1, ..., j-1, k, k+1, ..., p-1 ]</snippet></ROW><ROW><id>9629581</id><snippet>a</snippet></ROW><ROW><id>9630077</id><snippet>x4={'c;1': 'c4;;c6', 'b;1': 'a2;b2;c2;d2', 'b;0': 'A1;B1;C1;D1', 'a;1': 'a1;b1;c1;d1', 'a;0': 'A;B;C;D', 'c;0': 'c1;c2;c3'}

for k,v in x4.iteritems():
    a = k.split(";")
    b = v.split(";")
    if a[1] is not '0':
        val = x4[a[0]+';0']
        values = val.split(";")
        for i in range(len(values)):
            if values[i] is '':
                b[i]=''
            else:
                if  b[i]:
                    print '&lt;%s&gt;%s&lt;%s&gt;' % (values[i],b[i],values[i])
</snippet></ROW><ROW><id>9630077</id><snippet>&lt;A1&gt;a2&lt;A1&gt;
&lt;B1&gt;b2&lt;B1&gt;
&lt;C1&gt;c2&lt;C1&gt;
&lt;D1&gt;d2&lt;D1&gt;
&lt;c1&gt;c4&lt;c1&gt;
&lt;c3&gt;c6&lt;c3&gt;
&lt;A&gt;a1&lt;A&gt;
&lt;B&gt;b1&lt;B&gt;
&lt;C&gt;c1&lt;C&gt;
&lt;D&gt;d1&lt;D&gt;
</snippet></ROW><ROW><id>9630138</id><snippet>import numpy as np
import time
data = np.random.random((4000, 4000))

start = time.clock()
np.std(data, axis=0)
print time.clock() - start

start = time.clock()
np.std(data, axis=1)
print time.clock() - start
</snippet></ROW><ROW><id>9630138</id><snippet>0.511926329834
0.273098421142
</snippet></ROW><ROW><id>9630158</id><snippet>arcname</snippet></ROW><ROW><id>9630158</id><snippet>ZipFile.write()</snippet></ROW><ROW><id>9630535</id><snippet>d1.get(x,0)[3]</snippet></ROW><ROW><id>9630535</id><snippet>x</snippet></ROW><ROW><id>9630535</id><snippet>d1</snippet></ROW><ROW><id>9630535</id><snippet>d1.get(x,0)</snippet></ROW><ROW><id>9630535</id><snippet>0</snippet></ROW><ROW><id>9630535</id><snippet>0[3]</snippet></ROW><ROW><id>9630535</id><snippet>values = [d1[x][3] if x in d1 else 0 for x in a]
x2 = dict(zip(a, values))
</snippet></ROW><ROW><id>9630698</id><snippet>decode('utf-8')</snippet></ROW><ROW><id>9630698</id><snippet>E.doc('♀'.decode('utf-8'))</snippet></ROW><ROW><id>9630698</id><snippet>with open('myData.txt', 'w') as myFile:
      myFile.write(lastName + '\n')
</snippet></ROW><ROW><id>9630698</id><snippet>with open('myData.txt', 'w') as myFile:
      myFile.write(lastName.decode('utf-8') + '\n')
</snippet></ROW><ROW><id>9630698</id><snippet>unicode</snippet></ROW><ROW><id>9630698</id><snippet>UTF-8</snippet></ROW><ROW><id>9630698</id><snippet>lastName.encode('utf-8')</snippet></ROW><ROW><id>9630698</id><snippet>with open('myData.txt', 'w') as myFile:
    myFile.write(lastName.encode('utf-8') + '\n')
</snippet></ROW><ROW><id>9630921</id><snippet>10.1.10.190 http://example.com/t1 404
10.1.10.171 http://example.com/t1 404

10.1.10.180 http://example.com/t2 200
10.1.10.190 http://example.com/t1 404
10.1.11.180 http://example.com/t3 302
</snippet></ROW><ROW><id>9630921</id><snippet>#!/usr/bin/env python
# 
# Counts the IP addresses of a log file.
# 
# Assumption: the IP address is logged in the first column.
# Example line: 10.1.10.190 http://example.com/t1 404
#

import sys

def extract_ip(line):
    '''Extracts the IP address from the line.
       Currently it is assumed, that the IP address is logged in
       the first column and the columns are space separated.'''
    return line.split()[0]

def increase_count(ip_dict, ip_addr):
    '''Increases the count of the IP address.
       If an IP address is not in the given dictionary,
       it is initially created and the count is set to 1.'''
    if ip_addr in ip_dict:
        ip_dict[ip_addr] += 1
    else:
        ip_dict[ip_addr] = 1

def read_ips(infilename):
    '''Read the IP addresses from the file and store (count)
       them in a dictionary - returns the dictionary.'''
    res_dict = {}
    log_file = file(infilename)
    for line in log_file:
        if line.isspace():
            continue
        ip_addr = extract_ip(line)
        increase_count(res_dict, ip_addr)
    return res_dict

def write_ips(outfilename, ip_dict):
    '''Write out the count and the IP addresses.'''
    out_file = file(outfilename, "w")
    for ip_addr, count in ip_dict.iteritems():
        out_file.write("%5d\t%s\n" % (count, ip_addr))
    out_file.close()

def parse_cmd_line_args():
    '''Return the in and out file name.
       If there are more or less than two parameters,
       an error is logged in the program is exited.'''
    if len(sys.argv)!=3:
        print("Usage: %s [infilename] [outfilename]" % sys.argv[0])
        sys.exit(1)
    return sys.argv[1], sys.argv[2]

def main():
    infilename, outfilename = parse_cmd_line_args()
    ip_dict = read_ips(infilename)
    write_ips(outfilename, ip_dict)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>9631008</id><snippet>transmission-gtk</snippet></ROW><ROW><id>9631008</id><snippet>os</snippet></ROW><ROW><id>9631008</id><snippet>import os
os.system("transmission-gtk urlhere")
</snippet></ROW><ROW><id>9631008</id><snippet>subprocess</snippet></ROW><ROW><id>9631008</id><snippet>xdg-open</snippet></ROW><ROW><id>9631008</id><snippet>xdg-open</snippet></ROW><ROW><id>9631107</id><snippet>if not settings.DEBUG:
    urlpatterns += patterns('',
        (r'^static/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {'document_root': settings.STATIC_ROOT}),
    )
</snippet></ROW><ROW><id>9631107</id><snippet>web: python myapp/manage.py collectstatic --noinput; bin/gunicorn_django --workers=4 --bind=0.0.0.0:$PORT myapp/settings.py
</snippet></ROW><ROW><id>9631129</id><snippet>def nearest_50(n):
    return round(n*2, -2)/2
</snippet></ROW><ROW><id>9631129</id><snippet>def my_round(n):
    if n &lt;= 700:
        return round(n, -1)
    elif n &lt;= 1000:
        return nearest_50(n)
    elif n &lt;= 10000:
        return round(n, -2)
    else:
        return round(n, -3)
</snippet></ROW><ROW><id>9631129</id><snippet>mylist = [... some numbers ...]
rounded = [my_round(n) for n in mylist] 
</snippet></ROW><ROW><id>9631157</id><snippet>self.input_size</snippet></ROW><ROW><id>9631157</id><snippet>Value</snippet></ROW><ROW><id>9631157</id><snippet>Array</snippet></ROW><ROW><id>9631405</id><snippet>for key in ('key1', 'key2', 'key3'):
    dict1 = dict2[key]
</snippet></ROW><ROW><id>9631500</id><snippet>'&lt;table r'</snippet></ROW><ROW><id>9631500</id><snippet>.xls</snippet></ROW><ROW><id>9631500</id><snippet>.xls</snippet></ROW><ROW><id>9631548</id><snippet>calendar.timegm</snippet></ROW><ROW><id>9631548</id><snippet>utctimetuple()</snippet></ROW><ROW><id>9631548</id><snippet>from datetime import datetime
import pytz
import calendar

dt = datetime.now(pytz.utc)
secs = calendar.timegm(dt.utctimetuple())
print dt, secs
</snippet></ROW><ROW><id>9631548</id><snippet>2012-03-09 09:17:14.698500+00:00 1331284634
</snippet></ROW><ROW><id>9631548</id><snippet>print calendar.timegm(datetime(1970, 1, 1, 0, 0, 0, tzinfo=pytz.utc).utctimetuple())
</snippet></ROW><ROW><id>9631548</id><snippet>0</snippet></ROW><ROW><id>9631635</id><snippet>\n</snippet></ROW><ROW><id>9631635</id><snippet>def blocks(file, size=65536):
    while True:
        b = files.read(size)
        if not b: break
        yield b

with open("file", "r") as f:
    print sum(bl.count("\n") for bl in blocks(f))
</snippet></ROW><ROW><id>9631635</id><snippet>\r\n</snippet></ROW><ROW><id>9631635</id><snippet>\n</snippet></ROW><ROW><id>9631830</id><snippet>"Quit the server with CONTROL-C"</snippet></ROW><ROW><id>9631830</id><snippet>#!/usr/bin/python

import sys

print "Print always."
if sys.stdout.isatty():
  print "Print only on tty!"
</snippet></ROW><ROW><id>9631830</id><snippet>$ ./test.py 
Print always.
Print only on tty!
$ ./test.py &gt; log
$ cat log
Print always.
$
</snippet></ROW><ROW><id>9631961</id><snippet>locals()['_[1]']</snippet></ROW><ROW><id>9631961</id><snippet>&gt;&gt; [list(locals()['_[1]']) for x in range(3)]
[[], [[]], [[], [[]]]]
</snippet></ROW><ROW><id>9632148</id><snippet>targets = ('ABC', 'JKL')

def fuzzy_match(target, some_text):
    return target in some_text # or something fancier

found_header = False    
for i in xrange(1, sheet.nrows):
    row_text = [
        v.upper()
        for v, t in zip(sheet.row_values(i), sheet.row_types(i))
        if t == xlrd.XL_CELL_TEXT # avoid non-text cells; see note below
        ]
    found_header = all(
        any(fuzzy_match(target, item) for item in row_text)
        for target in targets
        )
    if found_header:
        header_row = i
        break
</snippet></ROW><ROW><id>9632148</id><snippet>for v in sheet.row_values(i)
if isinstance(v, basestring)
</snippet></ROW><ROW><id>9632606</id><snippet>workbook.active_sheet</snippet></ROW><ROW><id>9632606</id><snippet>wb.active_sheet = 1</snippet></ROW><ROW><id>9632657</id><snippet>args[0]</snippet></ROW><ROW><id>9632657</id><snippet>string_at</snippet></ROW><ROW><id>9632657</id><snippet>wstring_at</snippet></ROW><ROW><id>9633347</id><snippet>class CustomUserAdmin(UserAdmin):
    add_form = NewUserCreationForm
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('username', 'password1', 'password2', 'email')}
        ), 
    )  
</snippet></ROW><ROW><id>9633502</id><snippet>&gt;&gt;&gt; print repr('some\ttext')
'some\ttext'
</snippet></ROW><ROW><id>9633679</id><snippet>size = 8
[bool(235 &amp; (1 &lt;&lt; size - i - 1)) for i in xrange(size)]
</snippet></ROW><ROW><id>9633718</id><snippet>$ python3
&gt;&gt;&gt; s = {'a': '98', 'b': '10', 'c': 'nike', 'd': 'paarudas', 'e': '3'}
&gt;&gt;&gt; {k:int(v) if v.isdigit() else v for k,v in s.items()}
{'a': 98, 'c': 'nike', 'b': 10, 'e': 3, 'd': 'paarudas'}
</snippet></ROW><ROW><id>9633793</id><snippet>class T( object ):
    def __init__( self ):
        cDict = {}
        cDict['__doc__'] = 'Inner class doc string'
        setattr( self, 'C', type('C', (), cDict ) )
</snippet></ROW><ROW><id>9633793</id><snippet>C</snippet></ROW><ROW><id>9633793</id><snippet>T</snippet></ROW><ROW><id>9633793</id><snippet>&gt;&gt;&gt; T.C
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: type object 'T' has no attribute 'C'
&gt;&gt;&gt; t = T()
&gt;&gt;&gt; t.C
&lt;class '__main__.C'&gt;
</snippet></ROW><ROW><id>9633793</id><snippet>__init__</snippet></ROW><ROW><id>9633793</id><snippet>class T2( object ): 
    class C2( object ):
        __doc__ = 'Inner class doc string'
</snippet></ROW><ROW><id>9633793</id><snippet>T2</snippet></ROW><ROW><id>9633793</id><snippet>&gt;&gt;&gt; T2.C2
&lt;class '__main__.C2'&gt;
</snippet></ROW><ROW><id>9633839</id><snippet>d = ws.cell(row = 4, column = 2)
print d.value
</snippet></ROW><ROW><id>9634051</id><snippet>poz[0]</snippet></ROW><ROW><id>9634051</id><snippet>'some value '+str(0)</snippet></ROW><ROW><id>9634051</id><snippet>=</snippet></ROW><ROW><id>9634051</id><snippet>poz[0]</snippet></ROW><ROW><id>9634051</id><snippet>dict</snippet></ROW><ROW><id>9635037</id><snippet>[]</snippet></ROW><ROW><id>9635037</id><snippet>list</snippet></ROW><ROW><id>9635037</id><snippet>class Comment():
    def __init__(self, preComments = None, postComment = None):
        if preComments is not None:
            self.__preComments = preComments
        else:
            self.__preComments = []
        if postComments is not None:
            self.__postComment = postComment
        else:
            self.__postComment = []
</snippet></ROW><ROW><id>9635100</id><snippet>strptime</snippet></ROW><ROW><id>9635100</id><snippet>strptime</snippet></ROW><ROW><id>9635260</id><snippet>isPrime(49)</snippet></ROW><ROW><id>9635260</id><snippet>&gt;</snippet></ROW><ROW><id>9635260</id><snippet>&gt;=</snippet></ROW><ROW><id>9635260</id><snippet>if (tag &gt; rootOfNumber)</snippet></ROW><ROW><id>9635260</id><snippet>if i in (2, 3, 5, 7): return 1
elif number % 2 == 0: return 0
else:
    ......
</snippet></ROW><ROW><id>9635295</id><snippet>import re
myFile = open('syslog','r') 
ip = re.findall( r'[0-9]+(?:\.[0-9]+){3}', myFile.read() )
print ip
</snippet></ROW><ROW><id>9635592</id><snippet>    import os
    for file_n in os.listdir(DIRECTORY_NAME):
         if not file_n.startswith('.') and not file_n.endswith('.rar'):
              os.system('rar a -m0 -R -v1g %s.rar "%s"' %(os.path.splitext(file_n)[0], file_n))
</snippet></ROW><ROW><id>9635649</id><snippet>main</snippet></ROW><ROW><id>9635649</id><snippet>logging.debug("message")</snippet></ROW><ROW><id>9635649</id><snippet>logger = logging.getLogger('main')
logger.debug("message")
</snippet></ROW><ROW><id>9635916</id><snippet>.pdbrc</snippet></ROW><ROW><id>9635916</id><snippet>b 3
b 5
b 70
b 89
</snippet></ROW><ROW><id>9635916</id><snippet>python -m pdb myscript.py
</snippet></ROW><ROW><id>9635916</id><snippet>(Pdb) b 3;;b 5;;b 70;;b 89
</snippet></ROW><ROW><id>9636070</id><snippet>s</snippet></ROW><ROW><id>9636070</id><snippet>encoding</snippet></ROW><ROW><id>9636070</id><snippet>UTF-8</snippet></ROW><ROW><id>9636070</id><snippet>s.decode(encoding).encode("utf-8")
</snippet></ROW><ROW><id>9636103</id><snippet>filename = raw_input("Please enter filename: ") #This is already a string
if len(filename.split('.')[-1])==3:
   print "Valid extension"
else:
   print "Invalid extension!"
</snippet></ROW><ROW><id>9636167</id><snippet>&gt;&gt;&gt; mystring = "abcdefghijk"
&gt;&gt;&gt; if len( mystring ) &gt; 9:
...     mySlice = mystring[:8]
</snippet></ROW><ROW><id>9636184</id><snippet>from django.db.models import Count

Tag.objects.annotate(action_count=Count('action'))
</snippet></ROW><ROW><id>9636184</id><snippet>Action</snippet></ROW><ROW><id>9636420</id><snippet>import numpy
import lomb
x = numpy.arange(10)
y = numpy.sin(x)
fx,fy, nout, jmax, prob = lomb.fasper(x,y, 6., 6.)
</snippet></ROW><ROW><id>9636459</id><snippet>.jar</snippet></ROW><ROW><id>9636459</id><snippet>JFileChooser chooser = new JFileChooser();
FileNameExtensionFilter filter = new FileNameExtensionFilter(
    "JPG &amp; GIF Images", "jpg", "gif");
chooser.setFileFilter(filter);
int returnVal = chooser.showOpenDialog(parent);
if(returnVal == JFileChooser.APPROVE_OPTION) {
   System.out.println("You chose to open this file: " +
        chooser.getSelectedFile().getName());
}
</snippet></ROW><ROW><id>9636852</id><snippet>runpy.run_module()</snippet></ROW><ROW><id>9636852</id><snippet>%run</snippet></ROW><ROW><id>9637041</id><snippet>__mul__(self, int op)</snippet></ROW><ROW><id>9637041</id><snippet>Foo</snippet></ROW><ROW><id>9637041</id><snippet>Foo() * 4</snippet></ROW><ROW><id>9637041</id><snippet>4 * Foo()</snippet></ROW><ROW><id>9637041</id><snippet>__rmul__</snippet></ROW><ROW><id>9637041</id><snippet>TypeError</snippet></ROW><ROW><id>9637041</id><snippet>int</snippet></ROW><ROW><id>9637041</id><snippet>self</snippet></ROW><ROW><id>9637208</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>9637208</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>9637208</id><snippet>STATIC_ROOT = 'd:/a4m/static/'
</snippet></ROW><ROW><id>9637208</id><snippet>AVATAR_STORAGE_DIR</snippet></ROW><ROW><id>9637208</id><snippet>AVATAR_STORAGE_DIR = MEDIA_ROOT + 'avatars/'
</snippet></ROW><ROW><id>9637208</id><snippet>AVATAR_STORAGE_DIR</snippet></ROW><ROW><id>9637209</id><snippet>SomeClass.py</snippet></ROW><ROW><id>9637209</id><snippet>import SomeClass</snippet></ROW><ROW><id>9637209</id><snippet>SomeClass.py</snippet></ROW><ROW><id>9637209</id><snippet>SomeClass.SomeClass</snippet></ROW><ROW><id>9637209</id><snippet>the_instance = SomeClass.SomeClass()
</snippet></ROW><ROW><id>9637209</id><snippet>SomeClass</snippet></ROW><ROW><id>9637209</id><snippet>MyPackage.SomeClass</snippet></ROW><ROW><id>9637209</id><snippet>from MyPackage.Someclass import SomeClass
</snippet></ROW><ROW><id>9637327</id><snippet>blank=True</snippet></ROW><ROW><id>9637327</id><snippet>clean</snippet></ROW><ROW><id>9637327</id><snippet>class MyModel(models.Model):
    ...
    def clean(self):
        if not self.image and not self.color.strip():
            raise ValidationError('You must specify either an image or color')
</snippet></ROW><ROW><id>9637385</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; t = "03.08.2012 07.11.15 PM"
&gt;&gt;&gt; u = datetime.datetime.strptime(t, "%d.%m.%Y %I.%M.%S %p")
&gt;&gt;&gt; u
datetime.datetime(2012, 8, 3, 19, 11, 15)
&gt;&gt;&gt; u.strftime("%I:%M:%S %p")
'07:11:15 PM'
</snippet></ROW><ROW><id>9637908</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; s = "01/12/2011"
&gt;&gt;&gt; time.mktime(datetime.datetime.strptime(s, "%d/%m/%Y").timetuple())
1322697600.0
</snippet></ROW><ROW><id>9638334</id><snippet>-f, --failfast
</snippet></ROW><ROW><id>9638391</id><snippet>is None</snippet></ROW><ROW><id>9638391</id><snippet>parsedCars = [{field.tag: field.text if field.text is not None else '' for field in Cars} for action in Cars]
</snippet></ROW><ROW><id>9638391</id><snippet>basestr</snippet></ROW><ROW><id>9638391</id><snippet>str</snippet></ROW><ROW><id>9638391</id><snippet>unicode</snippet></ROW><ROW><id>9638391</id><snippet>''</snippet></ROW><ROW><id>9638532</id><snippet>pip install git+https://github.com/pwaller/pyfiglet
</snippet></ROW><ROW><id>9638532</id><snippet>pip install termcolor
</snippet></ROW><ROW><id>9638532</id><snippet>pip install colorama
</snippet></ROW><ROW><id>9638532</id><snippet>import sys

from colorama import init
init(strip=not sys.stdout.isatty()) # strip colors if stdout is redirected
from termcolor import cprint 
from pyfiglet import figlet_format

cprint(figlet_format('missile!', font='starwars'),
       'yellow', 'on_red', attrs=['bold'])
</snippet></ROW><ROW><id>9638532</id><snippet>$ python print-warning.py 
</snippet></ROW><ROW><id>9638557</id><snippet>print(pipeOpen.universal_newlines and hasattr(file, 'newlines'))</snippet></ROW><ROW><id>9638557</id><snippet>True</snippet></ROW><ROW><id>9638653</id><snippet>__init__.py</snippet></ROW><ROW><id>9638653</id><snippet>bigclass</snippet></ROW><ROW><id>9638653</id><snippet>.py</snippet></ROW><ROW><id>9638653</id><snippet>__init__.py</snippet></ROW><ROW><id>9638653</id><snippet>class Bigclass(object):

    from classdef1 import foo, bar, baz, quux
    from classdef2 import thing1, thing2
    from classdef3 import magic, moremagic
    # unfortunately, "from classdefn import *" is an error or warning

    num = 42   # add more members here if you like
</snippet></ROW><ROW><id>9638653</id><snippet>object</snippet></ROW><ROW><id>9638653</id><snippet>Bigclass</snippet></ROW><ROW><id>9638653</id><snippet>__init__.py</snippet></ROW><ROW><id>9638653</id><snippet>import classdef1, classdef2, classdef3

class Bigclass(classdef1.Bigclass, classdef2.Bigclass, classdef3.Bigclass):
    num = 42   # add more members if desired
</snippet></ROW><ROW><id>9638653</id><snippet>classdef2.py</snippet></ROW><ROW><id>9638653</id><snippet>import classdef1
class Bigclass(classdef1.Bigclass):
     # more member defs here
</snippet></ROW><ROW><id>9638653</id><snippet>classdef3</snippet></ROW><ROW><id>9638653</id><snippet>Bigclass</snippet></ROW><ROW><id>9638653</id><snippet>classdef2</snippet></ROW><ROW><id>9638653</id><snippet>__init__.py</snippet></ROW><ROW><id>9638653</id><snippet>from classdef42 import Bigclass
</snippet></ROW><ROW><id>9638653</id><snippet>from bigclass import Bigclass</snippet></ROW><ROW><id>9638660</id><snippet>img1 = Image.open("img1.jpg")
img2 = img1.crop( (0,-34,600,566) )  
draw = ImageDraw.Draw(img2)
draw.rectangle( (0,0,600,34), fill="white" )
draw.rectangle( (0,566,600,600), fill="white" )
del draw
img2.save("img2.jpg", "JPEG", quality=75)
</snippet></ROW><ROW><id>9638822</id><snippet>yield</snippet></ROW><ROW><id>9638822</id><snippet>from __future__ import generators
</snippet></ROW><ROW><id>9638822</id><snippet>def ngrams(word):
    result = []
    for i in range(1, len(word) + 1):
        result.append(word[:i])
    return result
</snippet></ROW><ROW><id>9638926</id><snippet>cmap</snippet></ROW><ROW><id>9638926</id><snippet>'Greys'</snippet></ROW><ROW><id>9638926</id><snippet>import matplotlib.pyplot as plt
import numpy as np

np.random.seed(101)
g = np.floor(np.random.random((100, 100)) + .5)

plt.subplot(211)
plt.imshow(g)
plt.subplot(212)
plt.imshow(g, cmap='Greys',  interpolation='nearest')
plt.savefig('blkwht.png')

plt.show()
</snippet></ROW><ROW><id>9638938</id><snippet>kw</snippet></ROW><ROW><id>9638938</id><snippet>dict</snippet></ROW><ROW><id>9638938</id><snippet>def return_kwargs(**kw):
    return kw
</snippet></ROW><ROW><id>9638938</id><snippet>return_kwargs(foo=1, bar="2", baz="hamspamspam")</snippet></ROW><ROW><id>9639255</id><snippet>href="javascript:void(0)"</snippet></ROW><ROW><id>9639397</id><snippet>CGIApplication</snippet></ROW><ROW><id>9639397</id><snippet>CGIApplication</snippet></ROW><ROW><id>9639397</id><snippet>import os
import os.path as _osp
import re
import subprocess
import io
import email.parser

env_forward = re.compile('^[A-Z][A-Z0-9_]*$')
header_match = re.compile(b'^(.*?\\n[ \\t\\r]*\\n)(.*)$', re.M | re.S)
env_whitelist = frozenset(('AUTH_TYPE', 'CONTENT_LENGTH', 'CONTENT_TYPE',
                           'DOCUMENT_ROOT', 'QUERY_STRING', 'PATH_INFO',
                           'PATH_TRANSLATED', 'REMOTE_ADDR', 'REMOTE_PORT',
                           'REMOTE_IDENT', 'REMOTE_USER', 'REQUEST_METHOD',
                           'REQUEST_URI', 'SCRIPT_NAME',
                           'SERVER_ADDR', 'SERVER_ADMIN', 'SERVER_NAME',
                           'SERVER_PORT', 'SERVER_PROTOCOL',
                           'SERVER_SIGNATURE', 'SERVER_SOFTWARE'))

class CGIApplication(object):
    def __init__(self, appfname):
        self._appfname = _osp.abspath(appfname)

    def __call__(self, environ, start_respose):
        appenv = {item[0]: item[1] \
                      for item in environ.items() \
                      if ((item[0] in env_whitelist) or
                          item[0].startswith('HTTP_'))}
        appenv['GATEWAY_INTERFACE'] = 'CGI/1.1'
        appenv['PATH'] = '/usr/local/bin:/usr/bin:/bin'
        appenv['SCRIPT_FILENAME'] = self._appfname
        nbytes_for_cgi = appenv.get('CONTENT_LENGTH', '')
        nbytes_for_cgi = (int(nbytes_for_cgi) if nbytes_for_cgi != '' else 0)

        args = [self._appfname]
        query = environ.get('QUERY_STRING', None)
        query = query.replace('+', ' ')
        if '=' not in query:
            args.append(query)
        proc = subprocess.Popen(args,
                                stdin=subprocess.PIPE,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE,
                                env = appenv,
                                cwd = _osp.dirname(self._appfname))
        bytes_read = 0
        data_for_cgi = io.BytesIO()
        while bytes_read &lt; nbytes_for_cgi:
            data = environ['wsgi.input'].read(nbytes_for_cgi - bytes_read)
            bytes_read += len(data)
            data_for_cgi.write(data)
            data = None
        data_for_cgi = data_for_cgi.getvalue()
        output, errdata = proc.communicate(data_for_cgi)
        data_for_cgi = None
        proc.stdin.close()
        proc.stdout.close()
        proc.stderr.close()
        try:
            errdata = errdata.decode('utf-8')
        except UnicodeDecodeError:
            errdata = errdata.decode('iso8859-1')
        environ['wsgi.errors'].write(errdata)
        errdata = None
        if proc.returncode != 0:
            start_respose('500 Internal Server Error',
                          [('Content-Type', 'text/plain')])
            return (b"CGI application died with non-zero return code.\n",)
        else:
            output_hdr = header_match.match(output)
            output_hdr, output = output_hdr.groups()
            parser = email.parser.HeaderParser()
            headers = parser.parsestr(output_hdr.decode('iso8859-1'))
            status = headers.get_all('Status', ['200 OK'])[-1]
            del headers['Status']
            start_respose(status, list(headers.items()))
            return (output,)
</snippet></ROW><ROW><id>9639869</id><snippet>split()</snippet></ROW><ROW><id>9639869</id><snippet>a = "abc"
a, result = a[:-1], a[-1]
</snippet></ROW><ROW><id>9639869</id><snippet>for result in reversed(a):
    ...
</snippet></ROW><ROW><id>9639869</id><snippet>split</snippet></ROW><ROW><id>9639869</id><snippet>ans = "foo,blah,etc."
for a in ans.split(","):
    ...
</snippet></ROW><ROW><id>9639872</id><snippet>name</snippet></ROW><ROW><id>9639872</id><snippet>p = tree.find(".//{http://www.opengis.net/kml/2.2}name")
</snippet></ROW><ROW><id>9639872</id><snippet>&gt;&gt;&gt; tree = lxml.etree.fromstring('''&lt;kml xmlns="http://www.opengis.net/kml/2.2"&gt;
...   &lt;Document&gt;
...     &lt;name&gt;Location history from 03/03/2012 to 03/10/2012&lt;/name&gt;
...   &lt;/Document&gt;
... &lt;/kml&gt;''')
&gt;&gt;&gt; tree.xpath('//kml:name', namespaces={'kml': "http://www.opengis.net/kml/2.2"})
[&lt;Element {http://www.opengis.net/kml/2.2}name at 0x23afe60&gt;]
</snippet></ROW><ROW><id>9640144</id><snippet>sys.stdout</snippet></ROW><ROW><id>9640144</id><snippet>import sys

def stdout(message):
    sys.stdout.write(message)
    sys.stdout.write('\b' * len(message))   # \b: non-deleting backspace

def demo():
    stdout('Right'.rjust(50))
    stdout('Left')
    sys.stdout.flush()
    print()

demo()
</snippet></ROW><ROW><id>9640144</id><snippet>50</snippet></ROW><ROW><id>9640208</id><snippet>C</snippet></ROW><ROW><id>9640208</id><snippet>object</snippet></ROW><ROW><id>9640208</id><snippet>__subclasshook__</snippet></ROW><ROW><id>9640208</id><snippet>Alpha</snippet></ROW><ROW><id>9640208</id><snippet>--&gt; import abc
--&gt; class Test(object):
...   __metaclass__ = abc.ABCMeta
...   @classmethod
...   def __subclasshook__(cls, C):
...     return True
...
--&gt; isinstance(dict(), Test)
True
--&gt; isinstance(42, Test)
True
--&gt; isinstance(0.59, Test)
True
--&gt; class old_style:
...     pass
...
--&gt; isinstance(old_style(), Test)
True
</snippet></ROW><ROW><id>9640300</id><snippet>curses.KEY_UP/DOWN</snippet></ROW><ROW><id>9640300</id><snippet>import curses

with curses_screen() as stdscr:
    pad = curses.newpad(100, 100)
    pad.addstr(0,0, curses.longname())
    for i in range(1, 10):
        pad.addstr(i,0, str(i))

    coord = 5, 5, 20, 75
    pad.refresh(0, 0, *coord)

    KEY_UP, KEY_DOWN = 'AB'
    y = 0
    for c in iter(pad.getkey, 'q'):
        if c in '\x1b\x5b': continue # skip escape seq
        y -= (c == KEY_UP)
        y += (c == KEY_DOWN)
        y = min(max(y, 0), 9)
        pad.refresh(y, 0, *coord)
</snippet></ROW><ROW><id>9640300</id><snippet>curses_screen()</snippet></ROW><ROW><id>9640557</id><snippet>def move_item(a, b):
    a[a.index('  ')] = b.pop()

&gt;&gt;&gt; a = ['a','c','e','j','h','  ','  ','  ','  ']
&gt;&gt;&gt; b = ['b','d','f','i','g']
&gt;&gt;&gt; move_item(a, b)
&gt;&gt;&gt; print('list a: ', a, '\nlist b: ', b)
list a:  ['a', 'c', 'e', 'j', 'h', 'g', '  ', '  ', '  ']
list b:  ['b', 'd', 'f', 'i']
&gt;&gt;&gt; move_item(a, b)
&gt;&gt;&gt; print('list a: ', a, '\nlist b: ', b)
list a:  ['a', 'c', 'e', 'j', 'h', 'g', 'i', '  ', '  ']
list b:  ['b', 'd', 'f']
</snippet></ROW><ROW><id>9640588</id><snippet>Tk</snippet></ROW><ROW><id>9640588</id><snippet>__init__</snippet></ROW><ROW><id>9640588</id><snippet>Tk</snippet></ROW><ROW><id>9640588</id><snippet>Frame</snippet></ROW><ROW><id>9640588</id><snippet>Frame</snippet></ROW><ROW><id>9640588</id><snippet>from Tkinter import tk
class Application(tk.Tk):
    ...

app = Application(...)
app.mainloop()
</snippet></ROW><ROW><id>9640588</id><snippet>Tk</snippet></ROW><ROW><id>9640588</id><snippet>from Tkinter import tk
class Application(tkFrame):
    ...
root = tk.Tk()
myframe = Application(root)
root.mainloop()
</snippet></ROW><ROW><id>9640588</id><snippet>Toplevel</snippet></ROW><ROW><id>9640727</id><snippet>y = list[x]
</snippet></ROW><ROW><id>9640727</id><snippet>y = list(x)
</snippet></ROW><ROW><id>9640734</id><snippet>print str(user.key())
</snippet></ROW><ROW><id>9640734</id><snippet>print user.key.urlsafe()
</snippet></ROW><ROW><id>9640860</id><snippet>re.split()</snippet></ROW><ROW><id>9640860</id><snippet>split()</snippet></ROW><ROW><id>9640860</id><snippet>str</snippet></ROW><ROW><id>9640860</id><snippet>f_in = open('my_file')
f_out = open('new_file', 'w')
for line in f:
    new_str = ''.join(line.split(',')[1:])
    f_out.write(new_str)
</snippet></ROW><ROW><id>9640922</id><snippet>cv.WaitKey()</snippet></ROW><ROW><id>9640922</id><snippet>import cv    
capture = cv.CaptureFromFile("a.avi")
if not capture :
    print "Error loading video file"
    # Should exit the application

while True:
    frame = cv.QueryFrame(capture)
    if not frame:
        print "Could not retrieve frame"

    cv.ShowImage("a", frame)
    k = cv.WaitKey(10)
    if k == 27:         
        break    # ESC key was pressed
</snippet></ROW><ROW><id>9641160</id><snippet>fromstring(S, sep=' ')</snippet></ROW><ROW><id>9641160</id><snippet>S[1:-1]</snippet></ROW><ROW><id>9641160</id><snippet>cPickle</snippet></ROW><ROW><id>9641437</id><snippet>&gt;&gt;&gt; import base64
&gt;&gt;&gt; import time
&gt;&gt;&gt; encoded = base64.urlsafe_b64encode("%d" % int(time.time()))
&gt;&gt;&gt; print encoded
'MTMzMTMyOTE5NA=='
&gt;&gt;&gt; decoded = int(base64.urlsafe_b64decode(encoded))
&gt;&gt;&gt; print decoded
1331329194
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.fromtimestamp(decoded)   
datetime.datetime(2012, 3, 9, 16, 39, 54)
</snippet></ROW><ROW><id>9641513</id><snippet>~/emacs.d/</snippet></ROW><ROW><id>9641513</id><snippet>~/.emacs.d/</snippet></ROW><ROW><id>9641622</id><snippet>&gt;&gt;&gt; "7061756c".decode("hex")
'paul'
</snippet></ROW><ROW><id>9641820</id><snippet>lastline == '\n' or '\r\n'
</snippet></ROW><ROW><id>9641820</id><snippet>(lastline == '\n') or ('\r\n')
(lastline == '\n') or bool('\r\n')
(lastline == '\n') or True 
True
</snippet></ROW><ROW><id>9641820</id><snippet>if lastline in ('\n', '\r\n'):
</snippet></ROW><ROW><id>9641820</id><snippet>if lastline == '\n' or lastline == '\r\n':
</snippet></ROW><ROW><id>9642047</id><snippet>__file__</snippet></ROW><ROW><id>9642047</id><snippet>In [1]: import matplotlib

In [2]: matplotlib.__file__
Out[2]: '/usr/lib/pymodules/python2.7/matplotlib/__init__.pyc'
</snippet></ROW><ROW><id>9642137</id><snippet>keyword</snippet></ROW><ROW><id>9642137</id><snippet>&gt;&gt;&gt; import keyword
&gt;&gt;&gt; keyword.kwlist
['and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif',
 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import',
 'in', 'is', 'lambda', 'not', 'or', 'pass', 'print', 'raise', 'return', 'try',
 'while', 'with', 'yield']
</snippet></ROW><ROW><id>9642137</id><snippet>keyword.kwlist</snippet></ROW><ROW><id>9642137</id><snippet>__future__</snippet></ROW><ROW><id>9642488</id><snippet>import file_B

def something():
    file_B.do_B_stuff
</snippet></ROW><ROW><id>9642488</id><snippet>import file_A

def something():
    file_A.do_A_stuff
</snippet></ROW><ROW><id>9642728</id><snippet>other_class</snippet></ROW><ROW><id>9642728</id><snippet>class other_class(object):

    def __init__(self, parent):
        self.parent = parent
</snippet></ROW><ROW><id>9642728</id><snippet>class myNotebook(wx.Notebook):
    def __init__(self, *args, **kwds):
        wx.Notebook.__init__(self, *args, **kwds)
        # note here we pass a reference to the myNotebook instance
        self.other_class_1 = other_class(self)
        self.other_class_1.do_sth()
</snippet></ROW><ROW><id>9642728</id><snippet>class other_class(object):

def __init__(self, parent):
    self.parent = parent

def do_sth(self, value):
    self.parent.GetParent().gauge_1.SetValue(value) 
</snippet></ROW><ROW><id>9642728</id><snippet>other_class</snippet></ROW><ROW><id>9642728</id><snippet>other_class</snippet></ROW><ROW><id>9642728</id><snippet>do_sth()</snippet></ROW><ROW><id>9642745</id><snippet>python manage.py tests --with-coverage</snippet></ROW><ROW><id>9642947</id><snippet>datetime.strptime("2012-03-10", "%Y-%m-%d").strftime("%a, %d %b %Y %H:%M:%S EDT")
</snippet></ROW><ROW><id>9643173</id><snippet>usage</snippet></ROW><ROW><id>9643173</id><snippet>metavar</snippet></ROW><ROW><id>9643173</id><snippet>import argparse

p = argparse.ArgumentParser("a foo bar dustup", usage='%(prog)s [-h] [-i INI]')
p.add_argument('-i', '--ini', help="use alternate ini file", metavar='')
p.print_help()
</snippet></ROW><ROW><id>9643208</id><snippet>(time, task)</snippet></ROW><ROW><id>9643208</id><snippet>task</snippet></ROW><ROW><id>9643208</id><snippet>time</snippet></ROW><ROW><id>9643241</id><snippet>from celery.result import AsyncResult

@task
def verify_task(task_id):
    result = AsyncResult(task_id)
    if result.ready():
         do_something_with(result.get())
    else:
        verify_task.retry(countdown=1)
</snippet></ROW><ROW><id>9644072</id><snippet>     conn.close()
</snippet></ROW><ROW><id>9644147</id><snippet>lim = int(input("What number do you want it to count down from?"))
</snippet></ROW><ROW><id>9644206</id><snippet>"你好".encode('utf-8')
</snippet></ROW><ROW><id>9644206</id><snippet>encode</snippet></ROW><ROW><id>9644206</id><snippet>string</snippet></ROW><ROW><id>9644206</id><snippet>string</snippet></ROW><ROW><id>9644206</id><snippet>string</snippet></ROW><ROW><id>9644206</id><snippet>unicode</snippet></ROW><ROW><id>9644206</id><snippet>"你好".decode().encode('utf-8')
</snippet></ROW><ROW><id>9644285</id><snippet>'r'</snippet></ROW><ROW><id>9644285</id><snippet>read()</snippet></ROW><ROW><id>9644285</id><snippet>str</snippet></ROW><ROW><id>9644285</id><snippet>'rb'</snippet></ROW><ROW><id>9644285</id><snippet>read()</snippet></ROW><ROW><id>9644285</id><snippet>bytes</snippet></ROW><ROW><id>9644285</id><snippet>'\n'</snippet></ROW><ROW><id>9644411</id><snippet>__repr__</snippet></ROW><ROW><id>9644411</id><snippet>__str__</snippet></ROW><ROW><id>9644411</id><snippet>&gt;&gt;&gt; s = u"Importação de petróleo"
&gt;&gt;&gt; s
u'Importa\xe7\xe3o de petr\xf3leo'
&gt;&gt;&gt; print s
Importação de petróleo
</snippet></ROW><ROW><id>9644411</id><snippet>\xe7</snippet></ROW><ROW><id>9644609</id><snippet>def newton( ffp, x, nits):
    c = 0                   # initialize iteration counter
    for i in range(nits):
        c += 1              # increment counter for each iteration 
        f, fp = ffp(x)
        x = x - f/fp
    return x, c             # return the counter when the function is called
</snippet></ROW><ROW><id>9644609</id><snippet>res, tot_iter = newton(myffp, x, nits)
</snippet></ROW><ROW><id>9644609</id><snippet>def newtons_method(x_init, fn, max_iter=100):
    """
    returns: approx. val of root of the function passed in, fn;
    pass in: x_init, initial value for the root; 
    max_iter, total iteration count not exceeded;
    fn, a function of the form: 
    def f(x): return x**3 - 2*x
    """
    x = x_init
    eps = .0001
    # set initial value different from x_init so at lesat 1 loop
    x_old = x + 10 * eps        
    step = .1
    c = 0
    # (x - x_old) is convergence criterion
    while (abs(x - x_old) &gt; eps) and (c &lt; max_iter):
        c += 1
        fval = fn(x)
        dfdx = (fn(x + step)) - fn(x) / step
        x_old = x
        x = x_old - fval / dfdx
    return x, c
</snippet></ROW><ROW><id>9644814</id><snippet>\s+(?=[^()]*(?:\(|$))</snippet></ROW><ROW><id>9644814</id><snippet>result = re.split(r"\s+(?=[^()]*(?:\(|$))", subject)
</snippet></ROW><ROW><id>9644814</id><snippet>r"""
\s             # Match a single character that is a “whitespace character” (spaces, tabs, and line breaks)
   +              # Between one and unlimited times, as many times as possible, giving back as needed (greedy)
(?=            # Assert that the regex below can be matched, starting at this position (positive lookahead)
   [^()]          # Match a single character NOT present in the list “()”
      *              # Between zero and unlimited times, as many times as possible, giving back as needed (greedy)
   (?:              # Match the regular expression below
                     # Match either the regular expression below (attempting the next alternative only if this one fails)
         \(             # Match the character “(” literally
      |              # Or match regular expression number 2 below (the entire group fails if this one fails to match)
         $              # Assert position at the end of a line (at the end of the string or before a line break character)
   )
)
"""
</snippet></ROW><ROW><id>9644831</id><snippet>zipfile.ZipFile().writestr(archived_name, content_to_be_archived)
</snippet></ROW><ROW><id>9644831</id><snippet>zipfile.ZipFile().write(filename_to_load_content_from, archived_name=None) 
</snippet></ROW><ROW><id>9644831</id><snippet>archive.write(content,name) =&gt; archive.writestr(name, content)
</snippet></ROW><ROW><id>9644832</id><snippet>__init__.py</snippet></ROW><ROW><id>9645121</id><snippet>import re

def explode(s):
    pattern = r'(\w[\w\d_]*)\((.*)\)$'
    match = re.match(pattern, s)
    if match:
        return list(match.groups())
    else:
        return []
</snippet></ROW><ROW><id>9645491</id><snippet>class base(object):
    name = ""

    def __init__(self, name):
        self.user =user

    def context(self, value):
        return [value]


class override(base):
    name = "override"

    def context(self, value):
        base_context = super(override, self).context(value)
        a = ["hello", "a"] + base_context

    def description(self):
        return "override description"
</snippet></ROW><ROW><id>9645491</id><snippet>&gt;&gt;&gt; a = override()
&gt;&gt;&gt; override.context("value")
["hello", "a", "value"]
&gt;&gt;&gt; override.description()
"override description"
</snippet></ROW><ROW><id>9645491</id><snippet>base</snippet></ROW><ROW><id>9645491</id><snippet>&gt;&gt;&gt; a = base()
&gt;&gt;&gt; a.context("value")
["value"]
&gt;&gt;&gt; base.description()
Traceback (most recent call last):
    ...
AttributeError: 'base' has no attribute 'description'
</snippet></ROW><ROW><id>9645491</id><snippet>base.context</snippet></ROW><ROW><id>9645491</id><snippet>override.context</snippet></ROW><ROW><id>9645491</id><snippet>override.description</snippet></ROW><ROW><id>9645491</id><snippet>base.context</snippet></ROW><ROW><id>9645491</id><snippet>override.context</snippet></ROW><ROW><id>9645491</id><snippet>base.__subclasses__()</snippet></ROW><ROW><id>9645491</id><snippet>base</snippet></ROW><ROW><id>9645606</id><snippet>robots.txt</snippet></ROW><ROW><id>9645606</id><snippet>mechanize.Browser</snippet></ROW><ROW><id>9645606</id><snippet>robots.txt</snippet></ROW><ROW><id>9645606</id><snippet>br = mechanize.Browser()
br.set_handle_robots(False)
</snippet></ROW><ROW><id>9645606</id><snippet>br.addheaders = [('User-agent', 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008071615 Fedora/3.0.1-1.fc9 Firefox/3.0.1')]
</snippet></ROW><ROW><id>9645688</id><snippet>{model:{"date":"2012-03-10T01:12:43.876Z","name":"New event","priority":0,"id":1,"calendar":"null"}}
</snippet></ROW><ROW><id>9645688</id><snippet>sync()</snippet></ROW><ROW><id>9645688</id><snippet>model</snippet></ROW><ROW><id>9645688</id><snippet>class ModelHandler(BaseHandler):
   fields = (('model', ('id', 'name', 'date', 'priority', 'calendar'),))
</snippet></ROW><ROW><id>9645756</id><snippet>PATH</snippet></ROW><ROW><id>9645756</id><snippet>php -v</snippet></ROW><ROW><id>9645756</id><snippet>WHERE</snippet></ROW><ROW><id>9645756</id><snippet>C:\&gt;where php.exe
C:\Program Files (x86)\WAMP\bin\php\php5.3.5\php.exe
</snippet></ROW><ROW><id>9645756</id><snippet>find</snippet></ROW><ROW><id>9645756</id><snippet>C: &amp;&amp; cd \ &amp;&amp; dir /s /b php.exe
</snippet></ROW><ROW><id>9645827</id><snippet>self</snippet></ROW><ROW><id>9645827</id><snippet>send_queue</snippet></ROW><ROW><id>9645827</id><snippet>self.</snippet></ROW><ROW><id>9645827</id><snippet>__init__</snippet></ROW><ROW><id>9645827</id><snippet>class main(threading.Thread):
  def __init__(self):
    self.queueLock = threading.Lock() 
    .. some code ... 
    send_queue("EppQueue","sss")
    send_queue("CrQueue","ssds")
</snippet></ROW><ROW><id>9645964</id><snippet>__init__.py</snippet></ROW><ROW><id>9645964</id><snippet>from GUI.frame import mygui
</snippet></ROW><ROW><id>9646051</id><snippet>__slots__</snippet></ROW><ROW><id>9646051</id><snippet>__slots__</snippet></ROW><ROW><id>9646051</id><snippet>__slots__</snippet></ROW><ROW><id>9646051</id><snippet>__dict__</snippet></ROW><ROW><id>9646051</id><snippet>__dict__</snippet></ROW><ROW><id>9646051</id><snippet>__slots__</snippet></ROW><ROW><id>9646051</id><snippet>AttributeError</snippet></ROW><ROW><id>9646051</id><snippet>'__dict__'</snippet></ROW><ROW><id>9646051</id><snippet>__slots__</snippet></ROW><ROW><id>9646051</id><snippet>class Point(object):
    __slots__ = ("x", "y")

point = Point()
point.x = 5 # OK
point.y = 1 # OK
point.X = 4 # AttributeError is raised
</snippet></ROW><ROW><id>9646051</id><snippet>dir</snippet></ROW><ROW><id>9646051</id><snippet>hasattr(object, name)</snippet></ROW><ROW><id>9646242</id><snippet>class Foo(object):
    def foo(self):
        print self.a

class Bar(object):
    foo = Foo.__dict__['foo']

b = Bar()
b.a = 1
b.foo()
</snippet></ROW><ROW><id>9646475</id><snippet>start=re.sub(r'(\+.*)|(\-.*)$', '', startTime)
</snippet></ROW><ROW><id>9647336</id><snippet>"first"</snippet></ROW><ROW><id>9647336</id><snippet>1</snippet></ROW><ROW><id>9647336</id><snippet>"1st"</snippet></ROW><ROW><id>9647336</id><snippet>suffixes = ["th", "st", "nd", "rd", ] + ["th"] * 16
suffixed_num = str(num) + suffixes[num % 100]
</snippet></ROW><ROW><id>9647437</id><snippet># x = range(6)
x = ["this", "is", "an", "example", "list"]

for prv, nxt in zip(x, x[1:]):
    print prv, nxt
</snippet></ROW><ROW><id>9647466</id><snippet>pygame.time.get_ticks()</snippet></ROW><ROW><id>9647466</id><snippet>pygame.init()</snippet></ROW><ROW><id>9647491</id><snippet>int()</snippet></ROW><ROW><id>9647491</id><snippet>def MyInt(text):
    return int(text)
</snippet></ROW><ROW><id>9647491</id><snippet>text</snippet></ROW><ROW><id>9647491</id><snippet>0</snippet></ROW><ROW><id>9647491</id><snippet>None</snippet></ROW><ROW><id>9647491</id><snippet>class ConvertExceptions(object):
    func = None
    def __init__(self, exceptions, replacement=None):
        self.exceptions = exceptions
        self.replacement = replacement
    def __call__(self, *args, **kwargs):
        if self.func is None:
            self.func = args[0]
            return self
        try:
            return self.func(*args, **kwargs)
        except self.exceptions:
            return self.replacement
</snippet></ROW><ROW><id>9647491</id><snippet>@ConvertExceptions(ValueError, 0)
def my_int(value):
    return int(value)

print my_int('34')      # prints 34
print my_int('one')     # prints 0
</snippet></ROW><ROW><id>9647651</id><snippet>save_model</snippet></ROW><ROW><id>9647651</id><snippet>Form.save</snippet></ROW><ROW><id>9647651</id><snippet>commit=False</snippet></ROW><ROW><id>9647651</id><snippet>commit=False</snippet></ROW><ROW><id>9647651</id><snippet>commit=False</snippet></ROW><ROW><id>9647651</id><snippet>save_m2m()</snippet></ROW><ROW><id>9647651</id><snippet>ModelForm</snippet></ROW><ROW><id>9647651</id><snippet>save_m2m()</snippet></ROW><ROW><id>9647651</id><snippet>form.save_m2m()</snippet></ROW><ROW><id>9647651</id><snippet>save_model</snippet></ROW><ROW><id>9647651</id><snippet>save_tags</snippet></ROW><ROW><id>9647651</id><snippet>class BlogAdminForm(forms.ModelForm):
    tagging = forms.CharField(required=False, label="Tags", max_length=200,
                              widget=forms.TextInput(attrs={'class':'vTextField'}))

    class Meta:
        model = Post

    def __init__(self, *args, **kwargs):
        super(BlogAdminForm, self).__init__(*args, **kwargs)
        if 'instance' in kwargs:
            tags = (t.name for t in kwargs['instance'].tags.all())
            self.initial['tagging'] = ', '.join(tags)

    def save_tags(self, obj):
        obj.tags = (Tag.objects.get_or_create(name = tag.strip())[0]
                    for tag in self.cleaned_data['tagging'].split(','))

class BlogPostAdmin(admin.ModelAdmin):
    form = BlogAdminForm

    def save_model(self, request, obj, form, change):
        obj.author = request.user
        obj.save()
        form.save_tags(obj)
</snippet></ROW><ROW><id>9647651</id><snippet>'instance' in kwargs</snippet></ROW><ROW><id>9647651</id><snippet>kwargs.has_key('instance')</snippet></ROW><ROW><id>9647651</id><snippet>(t.name for t in kwargs['instance'].tags.all())</snippet></ROW><ROW><id>9647651</id><snippet>for</snippet></ROW><ROW><id>9647651</id><snippet>get_or_create</snippet></ROW><ROW><id>9647651</id><snippet>try: ... except ObjectDoesNotExist: ...</snippet></ROW><ROW><id>9647651</id><snippet>ManyToMany</snippet></ROW><ROW><id>9647651</id><snippet>clear</snippet></ROW><ROW><id>9647651</id><snippet>add</snippet></ROW><ROW><id>9647727</id><snippet>print "text : ", repr(singleTweetJson[index])
</snippet></ROW><ROW><id>9647780</id><snippet>object</snippet></ROW><ROW><id>9647780</id><snippet>arg2</snippet></ROW><ROW><id>9647780</id><snippet>object</snippet></ROW><ROW><id>9647780</id><snippet>arg2</snippet></ROW><ROW><id>9647780</id><snippet>return</snippet></ROW><ROW><id>9647780</id><snippet>color(tes,red)</snippet></ROW><ROW><id>9647780</id><snippet>color(tes,tes_2)</snippet></ROW><ROW><id>9647780</id><snippet>def color(color1,color2):
    blue = '\033[1;34m'+color1+'\033[1;m'
    red = '\033[1;31m'+color2+'\033[1;m'
    return blue, red

tes = 'this must be blue'
tes_2 = 'i wanna this string into red!!' 
for c in color(tes,tes_2):
    print c
</snippet></ROW><ROW><id>9647780</id><snippet>def to_blue(color):
    return '\033[1;34m'+color+'\033[1;m'

def to_red(color):
    return '\033[1;31m'+color+'\033[1;m'

print to_blue('this is blue')
print to_red('now this is red')
</snippet></ROW><ROW><id>9647780</id><snippet>def to_color(string, color):
    if color == "blue":
        return '\033[1;34m'+color+'\033[1;m'
    elif color == "red":
        return '\033[1;31m'+color+'\033[1;m'
    else:
        return "Are you kidding?"
        #should be 'raise some error etc etc.'

print to_color("this blue", "blue")
print to_color("this red", "red")
print to_color("his yellow", "yellow")
</snippet></ROW><ROW><id>9647837</id><snippet>QLineEdit</snippet></ROW><ROW><id>9647837</id><snippet>returnPressed</snippet></ROW><ROW><id>9647837</id><snippet>search_lineEdit</snippet></ROW><ROW><id>9647837</id><snippet> self.search_lineEdit.returnPressed.connect(self.search_slot)
</snippet></ROW><ROW><id>9647883</id><snippet>-e git://git.myproject.org/MyProject.git@master#egg=MyProject
</snippet></ROW><ROW><id>9648249</id><snippet>start()</snippet></ROW><ROW><id>9648344</id><snippet>like</snippet></ROW><ROW><id>9648344</id><snippet>XU175</snippet></ROW><ROW><id>9648344</id><snippet>OP_FILTER</snippet></ROW><ROW><id>9648447</id><snippet>"id"</snippet></ROW><ROW><id>9648447</id><snippet>id</snippet></ROW><ROW><id>9648447</id><snippet>cursor.execute(sql, (id,))
</snippet></ROW><ROW><id>9648644</id><snippet>#!/usr/bin/python
import datetime
import os
import sys
import shutil

SOURCE_PATH = "/home/customers/"
TARGET_PATH = "/home/oldcustomers/"
TIME_THRESHOLD = datetime.timedelta(365)    #days

def get_old_dirs(source_path, time_threshold):
    old_dirs = []
    for root, dirs, files in os.walk(source_path):
        for d in dirs:
            full_path = os.path.join(root, d)
            now = datetime.datetime.now()
            last_modified = datetime.datetime.fromtimestamp(os.stat(full_path).st_mtime)
            delta = now - last_modified
            if (delta) &gt;= time_threshold:
                old_dirs.append((full_path, delta))
        break
    return old_dirs

def move_old_dirs(target_path, source_path, time_threshold, confirm=True):
    dirs = get_old_dirs(source_path, time_threshold)
    print '"old" dirs: %d' % len(dirs)
    if dirs:
        if confirm:
            print "pending moves:"
            for (d, delta) in dirs:
                print "[%s days] %s" % (str(delta.days).rjust(4), d)
            if not raw_input("Move %d directories to %s ? [y/n]: " % (len(dirs), target_path)).lower() in ['y', 'yes']:
                return
        if not os.path.exists(target_path):
            os.makedirs(target_path)
        for (d, delta) in dirs:
            shutil.move(d, target_path)
            print "%s -&gt; %s" % (d, target_path)
        print "moved %d directories" % len(dirs)


def cmdline(args):
    from optparse import OptionParser
    usage = "move_old_dirs [options] &lt;source_dir&gt; &lt;target_dir&gt;"
    default_desc = "%s -&gt; %s [%s]" % (SOURCE_PATH, TARGET_PATH, TIME_THRESHOLD)
    parser = OptionParser(usage)
    parser.add_option("-d", "--days",
                      action="store", type="int", dest="days", default=365,
                      help="How many days old the directory must be to move")
    parser.add_option("--default", default=False,
                    action="store_true", dest="default", 
                    help="Run the default values set in the script: (%s)" % default_desc)   
    parser.add_option("-f", "--force", default=False,
                    action="store_true", dest="force", 
                    help="Dont ask for confirmation")   
    (options, args) = parser.parse_args(args)
    if len(args) == 1 and options.default:
        print "running default: %s" % default_desc
        return move_old_dirs(TARGET_PATH, SOURCE_PATH, TIME_THRESHOLD, confirm=(not options.force))
    elif len(args) == 3:
        return move_old_dirs(args[2], args[1], datetime.timedelta(options.days), confirm=(not options.force))
    print usage
    print "incorrect number of arguments, try -h or --help"
    return 1

if __name__ == "__main__":
    cmdline(sys.argv)
</snippet></ROW><ROW><id>9648644</id><snippet>move_old_dirs</snippet></ROW><ROW><id>9648931</id><snippet>/Applications/Utilities/Terminal.app</snippet></ROW><ROW><id>9648931</id><snippet>open</snippet></ROW><ROW><id>9648931</id><snippet>import subprocess
termapp=['open','-a','/Applications/Utilities/Terminal.app']
sp=subprocess.Popen(termapp+['/path/to/server'])
</snippet></ROW><ROW><id>9648931</id><snippet>open -a</snippet></ROW><ROW><id>9648931</id><snippet>import subprocess
termapp=['/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal']
sp=subprocess.Popen(termapp+['/path/to/server'])
</snippet></ROW><ROW><id>9649092</id><snippet>sys.stdout</snippet></ROW><ROW><id>9649092</id><snippet>subprocess.check_output()</snippet></ROW><ROW><id>9649092</id><snippet>paths = subprocess.check_output(["find", ".", "-name", "foobar.ext"])
</snippet></ROW><ROW><id>9649092</id><snippet>os.walk()</snippet></ROW><ROW><id>9649092</id><snippet>os.walk()</snippet></ROW><ROW><id>9649092</id><snippet>def find(path, pattern):
    for root, dirs, files in os.walk(path):
        for match in fnmatch.filter(files, pattern):
            yield os.path.join(root, match)

paths = list(find(".", "foobar.ext"))
</snippet></ROW><ROW><id>9649139</id><snippet>__getitem__</snippet></ROW><ROW><id>9649381</id><snippet>pop</snippet></ROW><ROW><id>9649381</id><snippet>&gt;&gt;&gt; lst = ['a', 'b', 'c', ' ', 'd']
&gt;&gt;&gt; lst.pop(lst.index(' ') - 1)
'c'
&gt;&gt;&gt; lst
['a', 'b', ' ', 'd']
</snippet></ROW><ROW><id>9649381</id><snippet>' '</snippet></ROW><ROW><id>9649381</id><snippet>del lst[index]</snippet></ROW><ROW><id>9649484</id><snippet>config = Configurator(registry=request.registry)
config.add_route(...)
config.commit()
</snippet></ROW><ROW><id>9649484</id><snippet>.*</snippet></ROW><ROW><id>9649484</id><snippet>def is_enabled(info, request):
    return True if route_should_be_enabled else False

config.add_route('my_plugin_head', '/foo/{bar}', custom_predicates=[is_enabled])
</snippet></ROW><ROW><id>9649536</id><snippet>Python 2.7.2+ (default, Feb 16 2012, 18:47:58) 
&gt;&gt;&gt; import decimal
&gt;&gt;&gt; s = '45.2091000080109'
&gt;&gt;&gt; decimal.getcontext().prec = 5
&gt;&gt;&gt; decimal.Decimal(s).quantize(decimal.Decimal('.00001'), rounding=decimal.ROUND_UP)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/decimal.py", line 2464, in quantize
    'quantize result has too many digits for current context')
  File "/usr/lib/python2.7/decimal.py", line 3866, in _raise_error
    raise error(explanation)
decimal.InvalidOperation: quantize result has too many digits for current context
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9649661</id><snippet>def find_windows(d, min_elements=3,upper_length=20,max_value=70):
    G = sorted(d.items())
    for start_index in range(len(G)):
        for width in range(min_elements, len(G)-start_index+1):
            window = G[start_index:start_index+width]
            if not all(v &lt;= max_value for k,v in window):
                break
            if not window[-1][0] - window[0][0] &lt; upper_length:
                break
            yield window
</snippet></ROW><ROW><id>9649661</id><snippet>yield</snippet></ROW><ROW><id>9649661</id><snippet>return</snippet></ROW><ROW><id>9649661</id><snippet>&gt;&gt;&gt; Ds = {
...     1: {0: 222, 2:44, 18: 44, 20: 22, 21:72, 105:22, 107:9, 115: 66},
...     2: {0: 61.0, 993: 65.0, 1133: 84.0, 1069: 48.0, 105:22, 107:9, 115: 24, 214:22, 206:9, 225: 241,412: 83.0, 364: 68.0, 682: 64.0, 172: 58.0} 
...     }
&gt;&gt;&gt; 
&gt;&gt;&gt; for idnum, d in sorted(Ds.items()):
...     print idnum, list(find_windows(d))
... 
1 [[(2, 44), (18, 44), (20, 22)], [(105, 22), (107, 9), (115, 66)]]
2 [[(105, 22), (107, 9), (115, 24)]]
&gt;&gt;&gt; mydict = dict([(0,55),(1,55),(2,55),(3,55)])
&gt;&gt;&gt; 
&gt;&gt;&gt; for window in find_windows(mydict):
...     print window
... 
[(0, 55), (1, 55), (2, 55)]
[(0, 55), (1, 55), (2, 55), (3, 55)]
[(1, 55), (2, 55), (3, 55)]
&gt;&gt;&gt; list(find_windows(mydict))
[[(0, 55), (1, 55), (2, 55)], [(0, 55), (1, 55), (2, 55), (3, 55)], [(1, 55), (2, 55), (3, 55)]]
</snippet></ROW><ROW><id>9649750</id><snippet>''</snippet></ROW><ROW><id>9649750</id><snippet>url</snippet></ROW><ROW><id>9649750</id><snippet>future</snippet></ROW><ROW><id>9649750</id><snippet>{% url %}</snippet></ROW><ROW><id>9649754</id><snippet>None</snippet></ROW><ROW><id>9649754</id><snippet>class MyCycle(object):
    def __init__(self, lst):
        self.list = lst

    def __iter__(self):
        while True:
            items_left = False
            for x in self.list:
                if x is not None:
                    items_left = True
                    yield x
            if not items_left:
                return

    def remove(self, e):
        self.list[self.list.index(e)] = None
</snippet></ROW><ROW><id>9649982</id><snippet>StratifiedKFold</snippet></ROW><ROW><id>9649982</id><snippet>refit</snippet></ROW><ROW><id>9649982</id><snippet>GridSearchCV</snippet></ROW><ROW><id>9650594</id><snippet>Popen</snippet></ROW><ROW><id>9650594</id><snippet>selenium_jar = '/full/path/to/selenium-server-standalone-2.0b3.jar'
path_to_fifo_profile = '...'

# start external process
p = subprocess.Popen(['java', '-jar', selenium_jar, 
                              '-firefoxProfileTemplate', path_to_fifo_profile,
                     ])
# wait for it to finish before exiting
p.wait()
</snippet></ROW><ROW><id>9650594</id><snippet>os.system</snippet></ROW><ROW><id>9650594</id><snippet>os.system('java '
          '-jar /path/to/selenium-server-standalone-2.0b3.jar '
          '-firefoxProfileTemplate /path/to/profile')
</snippet></ROW><ROW><id>9650738</id><snippet>p = subprocess.Popen(r'C:\MyProjects\exes\FeedSender_exe\FeedSender.exe C:\MyProjects\exes\FeedSender_exe\FeedSender.ini',
        cwd=r'C:\MyProjects\exes\FeedSender_exe')
</snippet></ROW><ROW><id>9650738</id><snippet>C:\MyProjects\exes\FeedSender_exe</snippet></ROW><ROW><id>9650977</id><snippet>ECONNABORTED</snippet></ROW><ROW><id>9650977</id><snippet>errno</snippet></ROW><ROW><id>9650977</id><snippet>#define ECONNABORTED    103     /* Software caused connection abort */</snippet></ROW><ROW><id>9650977</id><snippet>accept4</snippet></ROW><ROW><id>9650977</id><snippet>1533         if (upeer_sockaddr) {
1534                 if (newsock-&gt;ops-&gt;getname(newsock, (struct sockaddr *)&amp;address,
1535                                           &amp;len, 2) &lt; 0) {
1536                         err = -ECONNABORTED;
1537                         goto out_fd;
1538                 }
1539                 err = move_addr_to_user((struct sockaddr *)&amp;address,
1540                                         len, upeer_sockaddr, upeer_addrlen);
1541                 if (err &lt; 0)
1542                         goto out_fd;
1543         }
</snippet></ROW><ROW><id>9650977</id><snippet>ECONNABORTED</snippet></ROW><ROW><id>9650977</id><snippet>out_fd</snippet></ROW><ROW><id>9650977</id><snippet>inet_stream_connect</snippet></ROW><ROW><id>9650977</id><snippet>645         /* Connection was closed by RST, timeout, ICMP error
646          * or another process disconnected us.
647          */
648         if (sk-&gt;sk_state == TCP_CLOSE)
649                 goto sock_error; 

662 sock_error:
663         err = sock_error(sk) ? : -ECONNABORTED;
664         sock-&gt;state = SS_UNCONNECTED;
665         if (sk-&gt;sk_prot-&gt;disconnect(sk, flags))
666                 sock-&gt;state = SS_DISCONNECTING;
667         goto out;
</snippet></ROW><ROW><id>9650977</id><snippet>sock_error</snippet></ROW><ROW><id>9650977</id><snippet>inet_stream_connect</snippet></ROW><ROW><id>9650977</id><snippet>sock_error</snippet></ROW><ROW><id>9650977</id><snippet>ECONNABORTED</snippet></ROW><ROW><id>9651161</id><snippet>def fetch_one(n):
    lst = [[1,2,3], [4,5,6], [7,8,9]][n]
    for x in lst:
        if x == 6:
            yield 'StopAll'
            return
        yield x

def work():
    n = 0
    in_progress = True
    while in_progress:
        numbers_iterator = fetch_one(n)
        for x in numbers_iterator:
            if x == 'StopAll':
                in_progress = False
                break
            print('x =', x)
        n += 1

work()
</snippet></ROW><ROW><id>9651161</id><snippet>x = 1
x = 2
x = 3
x = 4
x = 5
</snippet></ROW><ROW><id>9651161</id><snippet>self.finished</snippet></ROW><ROW><id>9651161</id><snippet>fetch_one</snippet></ROW><ROW><id>9651161</id><snippet>finised</snippet></ROW><ROW><id>9651161</id><snippet>class stopper(object):
    def __init__(self, func):
        self.func = func
        self.finished = False

    def __call__(self, *args, **kwargs):
        for x in self.func(*args, **kwargs):
            if x == 6:
                self.finished = True
                raise StopIteration
            yield x
        else:
            self.finished = True
</snippet></ROW><ROW><id>9651161</id><snippet>fetch_one</snippet></ROW><ROW><id>9651161</id><snippet>@stopper
def fetch_one(n):
    lst = [[1,2,3], [4,5,6], [7,8,9]][n]
    #lst = [[1,2,3], [], [4,5,6], [7,8,9]][n]   # uncomment to test for/else
    for x in lst:
        yield x

def work():
    n = 0
    while not fetch_one.finished:
        for x in fetch_one(n):
            print('x =', x)
        n += 1
</snippet></ROW><ROW><id>9651237</id><snippet>counter()</snippet></ROW><ROW><id>9651237</id><snippet>read_file()</snippet></ROW><ROW><id>9651237</id><snippet>read_file(F)</snippet></ROW><ROW><id>9651237</id><snippet>read_file()</snippet></ROW><ROW><id>9651237</id><snippet>counter(readfile(F))
</snippet></ROW><ROW><id>9651237</id><snippet>result(print(...))</snippet></ROW><ROW><id>9651237</id><snippet>counter()</snippet></ROW><ROW><id>9651237</id><snippet>return</snippet></ROW><ROW><id>9651291</id><snippet>EVT_SHOW</snippet></ROW><ROW><id>9651291</id><snippet>wx.CallAfter(self.update_gauge)</snippet></ROW><ROW><id>9651291</id><snippet>__init__</snippet></ROW><ROW><id>9651362</id><snippet>re</snippet></ROW><ROW><id>9651362</id><snippet>re_ips = r'Failed password for (?:root|invalid user\s?.*) from ((?:\d{1,3}\.){3}\d{1,3}) '
</snippet></ROW><ROW><id>9651362</id><snippet>bad_ips.log</snippet></ROW><ROW><id>9651362</id><snippet>from collections import defaultdict
import re

ip_freq = defaultdict(int)
with open("auth", "r") as fh:
    for match in re.finditer(r'Failed password for (?:root|invalid user\s?.*) from ((?:\d{1,3}\.){3}\d{1,3}) ', fh.read()):
        ip_freq[match.group(1)] += 1

with open("bad_ips.log", "w") as fh:
    for ip, n in ip_freq.iteritems():
        if n&gt;=13:
            print &gt;&gt;fh, ip
</snippet></ROW><ROW><id>9651362</id><snippet>invalid user xxxx</snippet></ROW><ROW><id>9651440</id><snippet>name = re.sub(r"\.", r" ", name)
name = re.sub(r"C126", "Perception", name)
name = re.sub(r"Geo1", "Geography", name)
</snippet></ROW><ROW><id>9651440</id><snippet>timeit</snippet></ROW><ROW><id>9651440</id><snippet>replace()</snippet></ROW><ROW><id>9651440</id><snippet>In [16]: timeit.timeit("test.replace('asdf','0000')",setup="test='asdfASDF1234'*10")
Out[16]: 1.0641241073608398

In [17]: timeit.timeit("re.sub(r'asdf','0000',test)",setup="import re; test='asdfASDF1234'*10")
Out[17]: 6.126996994018555
</snippet></ROW><ROW><id>9651696</id><snippet>&gt;&gt;&gt; sr = 1.41069562657e-25
&gt;&gt;&gt; print("{:.3g}".format(sr).replace("e", "*10^"))
1.41*10^-25
</snippet></ROW><ROW><id>9651696</id><snippet>e</snippet></ROW><ROW><id>9651889</id><snippet>.tmTheme</snippet></ROW><ROW><id>9651897</id><snippet>import matplotlib.pyplot as plt
import numpy as np

# some data
x = np.arange(0, 10, 0.1)
y1 = np.sin(x)
y2 = np.cos(x)

# plot of the data
fig = plt.figure()
ax = fig.add_axes([0.1, 0.1, 0.6, 0.75])
ax.plot(x, y1,'-k', lw=2, label='black sin(x)')
ax.plot(x, y2,'-r', lw=2, label='red cos(x)')
ax.set_xlabel('x', size=22)
ax.set_ylabel('y', size=22)
ax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)

plt.show()
</snippet></ROW><ROW><id>9651977</id><snippet>for line in outstring:
    f.write(" ".join(str(x) for x in line) + "\n")
</snippet></ROW><ROW><id>9651977</id><snippet>.join()</snippet></ROW><ROW><id>9651977</id><snippet>.</snippet></ROW><ROW><id>9651977</id><snippet>str()</snippet></ROW><ROW><id>9651977</id><snippet>join()</snippet></ROW><ROW><id>9652135</id><snippet>hmac</snippet></ROW><ROW><id>9652135</id><snippet>hmac.new("sharedpassword", "12345", hashlib.sha256).hexdigest()
</snippet></ROW><ROW><id>9652386</id><snippet>&gt;&gt;&gt; import locale
&gt;&gt;&gt; import string
&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
'en_US.UTF-8'
&gt;&gt;&gt; string.letters
'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, 'de_DE')
'de_DE'
&gt;&gt;&gt; string.letters
'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\xaa\xb5\xba\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9652559</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>9652559</id><snippet>&lt;textarea&gt;</snippet></ROW><ROW><id>9652559</id><snippet>&lt;textarea&gt;</snippet></ROW><ROW><id>9652559</id><snippet>&lt;textarea&gt;</snippet></ROW><ROW><id>9652559</id><snippet>&lt;textarea&gt;</snippet></ROW><ROW><id>9652559</id><snippet>import urllib
from BeautifulSoup import BeautifulSoup as BS

soup = BS(urllib.urlopen("http://item.taobao.com/item.htm?id=13015989524"))

a = []
for textarea in soup.findAll("textarea"):
    textsoup = BS(textarea.text)  # parse the contents as html
    a.extend(textsoup.findAll("a", attrs={"href":"http://item.taobao.com/item.htm?id=13015989524"}))

for tag in a:
    print tag

# outputs
# &lt;a href="http://item.taobao.com/item.htm?id=13015989524" target="_blank"&gt;&lt;img ...
# &lt;a href="http://item.taobao.com/item.htm?id=13015989524" title="901 ...
</snippet></ROW><ROW><id>9652736</id><snippet>#give user permissions to db 
GRANT ALL ON django.* TO 'django_user'@'localhost'
</snippet></ROW><ROW><id>9652749</id><snippet>sudo</snippet></ROW><ROW><id>9652749</id><snippet>runas</snippet></ROW><ROW><id>9652858</id><snippet>DataFrame.from_csv('c:/~/trainSetRel3.txt', sep='\t')
</snippet></ROW><ROW><id>9652858</id><snippet>header=1</snippet></ROW><ROW><id>9652875</id><snippet>QSpinBox</snippet></ROW><ROW><id>9652875</id><snippet>validate</snippet></ROW><ROW><id>9652875</id><snippet>Q*Validator</snippet></ROW><ROW><id>9652875</id><snippet>QRegExpValidator</snippet></ROW><ROW><id>9652875</id><snippet>valueChanged</snippet></ROW><ROW><id>9652875</id><snippet>valueChanged</snippet></ROW><ROW><id>9652875</id><snippet>change_value</snippet></ROW><ROW><id>9652875</id><snippet>def change_value1(self, val): # new value is passed as an argument
    # so no need for this
    # val = self.spinbox1.value()

    new_val = round(val*5)/5 # one way to fix
    if val != new_val:       # if value is changed, put it in the spinbox
        self.spinbox1.setValue(new_val)

    self.lcd1.display(new_val)
</snippet></ROW><ROW><id>9652875</id><snippet>self.spinbox1.setDecimals(1)
</snippet></ROW><ROW><id>9652875</id><snippet>__init__</snippet></ROW><ROW><id>9652875</id><snippet>self.connect(self.spinbox1, SIGNAL('valueChanged(double)'), self.change_value1)
</snippet></ROW><ROW><id>9652875</id><snippet>self.spinbox1.valueChanged[float].connect(self.change_value1)
</snippet></ROW><ROW><id>9652875</id><snippet>class MySpinBox(QDoubleSpinBox):
    def __init__(self, parent=None):
        super(MySpinBox, self).__init__(parent)
        # any RegExp that matches the allowed input
        self.validator = QRegExpValidator(QRegExp("\\d+[\\.]{0,1}[02468]{0,1}"), self)

    def validate(self, text, pos):
        # this decides if the entered value should be accepted
        return self.validator.validate(text, pos)
</snippet></ROW><ROW><id>9652875</id><snippet>QDoubleSpinBox</snippet></ROW><ROW><id>9652875</id><snippet>MySpinBox</snippet></ROW><ROW><id>9652922</id><snippet>__contains__()</snippet></ROW><ROW><id>9652961</id><snippet>f = open("path-to-file","rb")
</snippet></ROW><ROW><id>9652961</id><snippet>f = open("D:\\bowtie-0.12.7-win32\\bowtie-0.12.7\\output_635\\results_NC_000117.fna.1.ebwt.map","rb")
f = open(r"D:\bowtie-0.12.7-win32\bowtie-0.12.7\output_635\results_NC_000117.fna.1.ebwt.map","rb")
</snippet></ROW><ROW><id>9652996</id><snippet>6.9.  Signals

A signal can be delivered to the remote process/service using the
following message.  Some systems may not implement signals, in which
case they SHOULD ignore this message.

  byte      SSH_MSG_CHANNEL_REQUEST
  uint32    recipient channel
  string    "signal"
  boolean   FALSE
  string    signal name (without the "SIG" prefix)

'signal name' values will be encoded as discussed in the passage
describing SSH_MSG_CHANNEL_REQUEST messages using "exit-signal" in
this section.
</snippet></ROW><ROW><id>9652996</id><snippet>#!/bin/sh
stty intr ^U
&lt;whatever to invoke fabric&gt;
stty intr ^C
</snippet></ROW><ROW><id>9653024</id><snippet>django.core.management.commands.runserver</snippet></ROW><ROW><id>9653024</id><snippet>django.utils.autoreload.python_reloader</snippet></ROW><ROW><id>9653024</id><snippet>python_reloader</snippet></ROW><ROW><id>9653024</id><snippet>restart_with_reloader</snippet></ROW><ROW><id>9653024</id><snippet>exit_code = os.spawnve(os.P_WAIT, sys.executable, args, new_environ)
</snippet></ROW><ROW><id>9653024</id><snippet>runserver</snippet></ROW><ROW><id>9653024</id><snippet>START PID: 3091
PARENT PID: 3091
CHILD PID: 3092
IN THE CHILD PID: 3092

$ ps ax | grep runserver | grep -v grep
3092 pts/1    S      0:00  runserver 0.0.0.0:2869
3093 pts/1    Sl     0:05 /home/kirill/testenv/bin/python manage.py runserver 0.0.0.0:2869
</snippet></ROW><ROW><id>9653068</id><snippet>im1 = im.astype('u2')
im2 = im.astype('u2')
tmp = im1 + im2
result = tmp.clip(0,255).astype('u1')
</snippet></ROW><ROW><id>9653068</id><snippet>tmp = im1 + im2
mask = (tmp &lt; im1) | (tmp &lt; im2)
tmp[mask] = 255
</snippet></ROW><ROW><id>9653217</id><snippet>getattr</snippet></ROW><ROW><id>9653217</id><snippet>getattr(self, 'handle_' + instruction)(data)
</snippet></ROW><ROW><id>9653368</id><snippet>self.ui.txtName.setProperty("rules", QtCore.QVariant())
#or 
self.ui.txtName.setProperty("rules", None)
</snippet></ROW><ROW><id>9653764</id><snippet>lower_bounds</snippet></ROW><ROW><id>9653764</id><snippet>upper_bounds</snippet></ROW><ROW><id>9653764</id><snippet>lower_bound</snippet></ROW><ROW><id>9653764</id><snippet>file.seek()</snippet></ROW><ROW><id>9653764</id><snippet>def match(line):
    lfmt = '%Y-%m-%d %H:%M:%S'
    if line[0] == '[':
        return datetime.datetime.strptime(line[1:20], lfmt)

def retrieve_test_line(position):
    file.seek(position,0)
    file.readline()  # avoids reading partial line, which will mess up match attempt
    new_position = file.tell() # gets start of line position
    return file.readline(), new_position

def check_lower_bound(position):
    file.seek(position,0)
    new_position = file.tell() # gets start of line position
    return file.readline(), new_position

def find_line(target, lower_bound, upper_bound):
    trial = int((lower_bound + upper_bound) /2)
    inspection_text, position = retrieve_test_line(trial)
    if position == upper_bound:
        text, position = check_lower_bound(lower_bound)
        if match(text) == target:
            return position
        return # no match for target within range
    matched_position = match(inspection_text)
    if matched_position == target:
        return position
    elif matched_position &lt; target:
        return find_line(target, position, upper_bound)
    elif matched_position &gt; target:
        return find_line(target, lower_bound, position)
    else:
        return # no match for target within range

lfmt = '%Y-%m-%d %H:%M:%S'
# start_target =  # first line you are trying to find:
start_target =  datetime.datetime.strptime("2012-02-01 13:10:00", lfmt)
# end_target =  # last line you are trying to find:
end_target =  datetime.datetime.strptime("2012-02-01 13:39:00", lfmt)
file = open("log_file.txt","r")
lower_bound = 0
file.seek(0,2) # find upper bound
upper_bound = file.tell()

sequence_start = find_line(start_target, lower_bound, upper_bound)

if sequence_start or sequence_start == 0: #allow for starting at zero - corner case
    sequence_end = find_line(end_target, sequence_start, upper_bound)
    if not sequence_end:
        print "start_target match: ", sequence_start
        print "end match is not present in the current file"
else:
    print "start match is not present in the current file"

if (sequence_start or sequence_start == 0) and sequence_end:
    print "start_target match: ", sequence_start
    print "end_target match: ", sequence_end
    print
    print start_target, 'target'
    file.seek(sequence_start,0)
    print file.readline()
    print end_target, 'target'
    file.seek(sequence_end,0)
    print file.readline()
</snippet></ROW><ROW><id>9653957</id><snippet>def reimport_class(self, cls):
    """
    Reload and reimport class "cls".  Return the new definition of the class.
    """

    # Get the fully qualified name of the class.
    from twisted.python import reflect
    full_path = reflect.qual(cls)

    # Naively parse the module name and class name.
    # Can be done much better...
    match = re.match(r'(.*)\.([^\.]+)', full_path)
    module_name = match.group(1)
    class_name = match.group(2)

    # This is where the good stuff happens.
    mod = __import__(module_name, fromlist=[class_name])
    reload(mod)

    # The (reloaded definition of the) class itself is returned.
    return getattr(mod, class_name)
</snippet></ROW><ROW><id>9654073</id><snippet>s * n, n * s    ==&gt;   n shallow copies of s concatenated 
</snippet></ROW><ROW><id>9654073</id><snippet>&gt;&gt;&gt; lists = [[]] * 3
&gt;&gt;&gt; lists
[[], [], []]
&gt;&gt;&gt; lists[0].append(3)
&gt;&gt;&gt; lists
[[3], [3], [3]]
</snippet></ROW><ROW><id>9654073</id><snippet>l = [[0 for i in range(2)] for j in range(m)]
</snippet></ROW><ROW><id>9654228</id><snippet>class Meta(type): 
    def __new__(cls, name, bases, dctn):
         dctn['__slots__'] = ( 'x', )
         return type.__new__(cls, name, bases, dctn)

 class Foo(object):
    __metaclass__ = Meta

    def __init__(self):
        pass 
</snippet></ROW><ROW><id>9654228</id><snippet>foo = Foo() 
foo.y = 1
</snippet></ROW><ROW><id>9654228</id><snippet> AttributeError: 'Foo' object has no attribute 'y'
</snippet></ROW><ROW><id>9654446</id><snippet>import subprocess
subprocess.call([ "gnome-open", nameList[row] ] )
</snippet></ROW><ROW><id>9654653</id><snippet>'1' != 1</snippet></ROW><ROW><id>9654653</id><snippet>['1','2'] != [1,2]</snippet></ROW><ROW><id>9654653</id><snippet>a=[['1','2'],['1','3']]
for i in range(3):
    for j in range(3):
        if [str(i), str(j)] in a: # Note str
            print a
</snippet></ROW><ROW><id>9654653</id><snippet>in</snippet></ROW><ROW><id>9654847</id><snippet>import os
import psutil

mypid = os.getpid()
for proc in psutil.process_iter():
    if proc.name == 'python' and proc.pid != mypid:
        proc.kill()
</snippet></ROW><ROW><id>9654938</id><snippet>package_data={}</snippet></ROW><ROW><id>9654938</id><snippet>setup()</snippet></ROW><ROW><id>9654938</id><snippet>package_data = {
    'exceptional_middleware': [ 'templates/http_responses/*.html' ],
}
</snippet></ROW><ROW><id>9654938</id><snippet>pkg/tests</snippet></ROW><ROW><id>9654938</id><snippet>packages</snippet></ROW><ROW><id>9655322</id><snippet>u</snippet></ROW><ROW><id>9655401</id><snippet>from tkinter import *
import tkinter


class Application(Frame):

    def createWidgets(self):

        root.title("TITLE")

        textFrame = Frame(root)
        entryLabel = Label(textFrame)
        entryLabel["text"] = "Enter the text:"
        entryLabel.pack(side=LEFT)

        self.entryWidget = Entry(textFrame)
        self.entryWidget["width"] = 50
        self.entryWidget.pack(side=LEFT)
        textFrame.pack()
        button = Button(root, text="Submit", command=self.displayText)
        button.pack()

        self.QUIT = Button(self)
        self.QUIT["text"] = "QUIT"
        self.QUIT["fg"] = "red"
        self.QUIT["command"] = self.quit
        self.QUIT.pack()

    def displayText(self):
        tkinter.messagebox.showinfo("Tkinter Entry Widget", "Text value =" + self.entryWidget.get())

    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.pack()
        self.createWidgets()

root = Tk()
app = Application(master=root)
app.mainloop()
root.destroy()
</snippet></ROW><ROW><id>9655461</id><snippet>sys.args</snippet></ROW><ROW><id>9655781</id><snippet>()</snippet></ROW><ROW><id>9655781</id><snippet>def pants():
    print "Put on some pants!"

def shorts():
    print "And don't forget your underwear!"

zap = pants
thing = shorts
</snippet></ROW><ROW><id>9655781</id><snippet>zap()
thing()
</snippet></ROW><ROW><id>9655918</id><snippet>In [4]: A = np.mat('1 ; 1 ')
In [5]: B = np.mat('2 2; 2 2')
In [6]: C = np.mat('3 ; 5')
In [7]: D = np.mat('7 8; 9 0')
In [8]: np.bmat([[A,B],[C,D]])
Out[8]: 
matrix([[1, 2, 2],
        [1, 2, 2],
        [3, 7, 8],
        [5, 9, 0]])
</snippet></ROW><ROW><id>9655939</id><snippet>p1 = subprocess.Popen(['convert', fileIn, 'bmp:-'], stdout=subprocess.PIPE)
p2 = subprocess.Popen(['mkbitmap', '-f', '2', '-s', '2', '-t', '0.48'], 
     stdin=p1.stdout, stdout=subprocess.PIPE)
p1.stdout.close()
p3 = subprocess.Popen(['potrace', '-t' , '5', '-s' , '-o', fileOut],        
     stdin=p2.stdout,stdout=subprocess.PIPE)
p2.stdout.close()

output = p3.communicate()[0]
</snippet></ROW><ROW><id>9656058</id><snippet>sqlite3</snippet></ROW><ROW><id>9656058</id><snippet>import sqlite3

conn = sqlite3.connect(':memory:')
conn.execute("""CREATE TABLE Widget (id INTEGER PRIMARY KEY,
                                     serial_number INTEGER,
                                     description TEXT);""")

my_data = [ [143, 800, 'Ask'],
            [213, 457, 'Comment'],
            [424, 800, 'Hi'] ]

for row in my_data:
    conn.execute("INSERT INTO Widget (id, serial_number, description) VALUES (?,?,?);" , row )

conn.commit() # save changes

res = conn.execute("SELECT * FROM Widget WHERE id=143")
row = res.next()
print row #prints (143, 800, u'Ask')
</snippet></ROW><ROW><id>9656058</id><snippet>:memory:</snippet></ROW><ROW><id>9656252</id><snippet>&gt;&gt;&gt; d = { 100 : [{'name':1, 'group':100, 'key':'group1'}, 
...              {'name':2, 'group':100, 'key':'group2'}],
...       200 : [{'name':3, 'group':200, 'key':'group3'}] }
</snippet></ROW><ROW><id>9656252</id><snippet>&gt;&gt;&gt; orig = { x['key']:x for v in d.values() for x in v }
&gt;&gt;&gt; orig
{'group1': {'group': 100, 'name': 1, 'key': 'group1'}, 
 'group3': {'group': 200, 'name': 3, 'key': 'group3'}, 
 'group2': {'group': 100, 'name': 2, 'key': 'group2'}}
</snippet></ROW><ROW><id>9656252</id><snippet>key</snippet></ROW><ROW><id>9656252</id><snippet>&gt;&gt;&gt; for v in orig.values(): del v['key']
...
&gt;&gt;&gt; orig
{'group1': {'group': 100, 'name': 1}, 
 'group3': {'group': 200, 'name': 3}, 
 'group2': {'group': 100, 'name': 2}}
</snippet></ROW><ROW><id>9656592</id><snippet>return</snippet></ROW><ROW><id>9656592</id><snippet>def deleteUser(self):
  self.__user = getInput('Enter the username you want to delete records for: ', 1)
  if self.__user == 'QUIT0x0':
    return
  else:
    # ...
</snippet></ROW><ROW><id>9656592</id><snippet>if/else</snippet></ROW><ROW><id>9656592</id><snippet>else</snippet></ROW><ROW><id>9656592</id><snippet>pass</snippet></ROW><ROW><id>9656592</id><snippet>def deleteUser(self):
  self.__user = getInput('Enter the username you want to delete records for: ', 1)
  if self.__user == 'QUIT0x0':
    pass
  else:
    # ...
</snippet></ROW><ROW><id>9656592</id><snippet>def deleteUser(self):
  self.__user = getInput('Enter the username you want to delete records for: ', 1)
  if self.__user != 'QUIT0x0':
    # ...
</snippet></ROW><ROW><id>9656592</id><snippet>def deleteUser(self):
  self.__user = getInput('Enter the username you want to delete records for: ', 1)
  if self.__user == 'QUIT0x0':
    return
  # ...
</snippet></ROW><ROW><id>9657254</id><snippet>class TranslatedCharField(models.Model):
    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    content_object = generic.GenericForeignKey()
    relation_field = models.CharField(max_length=255)

    class Meta:
        unique_together = ('object_id', 'lang', 'relation_field')

    lang = models.CharField(verbose_name="lingua", max_length=255, choices=LANGUAGES)
    text = models.CharField(verbose_name="testo", max_length=255)


def translatedFieldInlineAdminFormFactory(relation_field, translatemodel):
    class TranslatedFieldInlineAdminForm(forms.ModelForm):

        class Meta:
            model = translatemodel

        def clean(self):
            self.cleaned_data["relation_field"] = relation_field
            return self.cleaned_data

class TranslatedTabularInline(generic.GenericTabularInline):
    def __init__(self, *args, **kwargs):
        super(TranslatedTabularInline, self).__init__(*args, **kwargs)
        self.form = translatedFieldInlineAdminFormFactory(self._relation_field_filter, self.model)

    extra = 1
    max_num = len(LANGUAGES)
    exclude = ('relation_field',)
    model = None
    _relation_field_filter = None
    return TranslatedFieldInlineAdminForm
</snippet></ROW><ROW><id>9657254</id><snippet>class TranslatedSlugInline(TranslatedTabularInline):
    model = TranslatedCharField
    _relation_field_filter = "slug_event_portal"
    verbose_name = "Slug"
    verbose_name_plural = "Slug"

class TranslatedSlugInline(TranslatedTabularInline):
    model = TranslatedCharField
    _relation_field_filter = "slug2_event_portal"
    verbose_name = "Slug2"
    verbose_name_plural = "Slug2"
</snippet></ROW><ROW><id>9657316</id><snippet>square</snippet></ROW><ROW><id>9657316</id><snippet>len(square)</snippet></ROW><ROW><id>9657316</id><snippet>0</snippet></ROW><ROW><id>9657316</id><snippet>m &lt; len(square)</snippet></ROW><ROW><id>9657316</id><snippet>False</snippet></ROW><ROW><id>9657652</id><snippet>env = Environment(loader=FileSystemLoader('./templates/'))
</snippet></ROW><ROW><id>9657652</id><snippet>templatespath = os.path.join(os.path.dirname(__file__), "templates")
env = Environment(loader=FileSystemLoader(templatespath))
</snippet></ROW><ROW><id>9657838</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>9657838</id><snippet>soup = BeautifulSoup(html['result'])
soup.table
</snippet></ROW><ROW><id>9657854</id><snippet>[^/]*\.torrent/
</snippet></ROW><ROW><id>9657854</id><snippet>.</snippet></ROW><ROW><id>9657878</id><snippet>from itertools import *                                                         
import operator                                                                 

seeds = [1,2]                                                                   

def deffered_output():                                                          
    for i in output:                                                            
        yield i

result,a1,a2 = tee(deffered_output(),3)
paired = imap(operator.add,a1,islice(a2,1,None))   # change 2 (imap)
output = chain(seeds,paired)

cropped = takewhile(lambda x: x &lt;= 4000000,result) # change 1 (lambda)
evened = filter(lambda x: x%2==0,cropped)

print(sum(evened))
</snippet></ROW><ROW><id>9657878</id><snippet>__gt__</snippet></ROW><ROW><id>9657878</id><snippet>map()</snippet></ROW><ROW><id>9657878</id><snippet>map()</snippet></ROW><ROW><id>9657878</id><snippet>deffered_output()</snippet></ROW><ROW><id>9657878</id><snippet>output</snippet></ROW><ROW><id>9657878</id><snippet>output</snippet></ROW><ROW><id>9657878</id><snippet>imap()</snippet></ROW><ROW><id>9657878</id><snippet>sum()</snippet></ROW><ROW><id>9657878</id><snippet>output</snippet></ROW><ROW><id>9657878</id><snippet>deffered_output</snippet></ROW><ROW><id>9658401</id><snippet>nosetests.__file__</snippet></ROW><ROW><id>9658401</id><snippet>inspect</snippet></ROW><ROW><id>9658401</id><snippet>__file__</snippet></ROW><ROW><id>9658401</id><snippet>import inspect, nosetests
print inspect.getsourcefile(nosetests)
</snippet></ROW><ROW><id>9658522</id><snippet>grid = [[0]*5 for i in range(5)]
</snippet></ROW><ROW><id>9658524</id><snippet>import pydoc

import math # test
print(pydoc.render_doc(math))
</snippet></ROW><ROW><id>9658672</id><snippet>&gt;&gt;&gt; c=Counter(['a','b','a'])
&gt;&gt;&gt; [n for n in c if c[n]==1]
['b']
&gt;&gt;&gt; c=Counter([1,2,3,2,3,4,5,6,5,6])
&gt;&gt;&gt; [n for n in c if c[n]==1]
[1, 4]
</snippet></ROW><ROW><id>9658672</id><snippet>&gt;&gt;&gt; set([1,2,3,2,3,4,5,6,5,6])
set([1, 2, 3, 4, 5, 6])
</snippet></ROW><ROW><id>9658762</id><snippet>command=self.action</snippet></ROW><ROW><id>9658762</id><snippet>self.quitAll()</snippet></ROW><ROW><id>9658762</id><snippet>''' 
Created on 5-mrt.-2012
@author: Max
'''
from Tkinter import *


class main(Tk):
    def __init__(self,parent):
        self.mainWindow()
    def mainWindow(self):
        '''Make the main window '''
        #self.quitAll()
        self.app = Tk()
        self.app.title('NMBS application')
        self.makeAppButtons()
        self.finish(self.app)
    def makeAppButtons(self):
        '''Make all the buttons for the main menu'''
        button_lijn = Button(self.app, text="Voeg lijnritten toe", command = self.lijnritten)
        button_lijn.pack()
    def finish(self,window):
        ''' Make the main window'''
        window.mainloop()
    def endButton(self,window):
        '''Make a quit button'''
        button_back = Button(window,text="Sluiten",command = self.mainWindow)
        button_back.pack()
    def quitAll(self):
        '''Close all the current windows'''
        self.lijn_window.quit()
        self.app.quit()
    def lijnritten(self):
        ''' Make the lijnritten window'''
        self.app.quit()
        self.lijn_window = Tk()
        self.lijn_window.title("lijnritten")
        self.endButton(self.lijn_window)
        self.finish(self.lijn_window)
main(None)
</snippet></ROW><ROW><id>9658769</id><snippet>jsonify</snippet></ROW><ROW><id>9658769</id><snippet>json.dumps</snippet></ROW><ROW><id>9658769</id><snippet>return jsonify({'id': 'foo', 'title' :'Foo'})</snippet></ROW><ROW><id>9658769</id><snippet>return jsonify(id='foo', title='Foo')</snippet></ROW><ROW><id>9658769</id><snippet>return jsonify([{'id': 'foo', 'title': 'Foo'}, {'id': 'bar', 'title': 'Bar'}])</snippet></ROW><ROW><id>9659117</id><snippet>subsquares = [[sudokuSquare[j][i] for j in range(x, x + w) for i in range(y, y + h)] for x in range(0, 9, 3) for y in range(0, 9, 3)]
</snippet></ROW><ROW><id>9659117</id><snippet>h</snippet></ROW><ROW><id>9659117</id><snippet>w</snippet></ROW><ROW><id>9659117</id><snippet>h</snippet></ROW><ROW><id>9659117</id><snippet>w</snippet></ROW><ROW><id>9659182</id><snippet>import sys
import selenium
from selenium import webdriver
from selenium.webdriver.common.keys import Keys   

driver = webdriver.Firefox()
driver.get("http://website.aspx")    

elem = driver.find_element_by_id("ctl00_ctl00")
elem.send_keys( '15' )
elem.send_keys( Keys.RETURN )
</snippet></ROW><ROW><id>9659377</id><snippet>dir()</snippet></ROW><ROW><id>9659411</id><snippet>python manage.py reset myapp
</snippet></ROW><ROW><id>9659574</id><snippet>    graphshp.record( *input.field )
</snippet></ROW><ROW><id>9659603</id><snippet>import pprint</snippet></ROW><ROW><id>9659682</id><snippet>numpy</snippet></ROW><ROW><id>9659682</id><snippet>from itertools import product
from collections import Counter

def enumerate_rolls(die_n=2, max_num=6):
    for roll in product(range(1, max_num + 1), repeat=die_n):
        if len(set(roll)) != 1:
            yield roll
        else:
            for second_roll in product(range(1, max_num + 1), repeat=die_n):
                yield roll + second_roll
</snippet></ROW><ROW><id>9659682</id><snippet>print(len(list(enumerate_rolls()))) # 36 + 6 * 36 - 6 = 246
A = list(enumerate_rolls(5, 4))
print(len(A)) # 4 ** 5 + 4 * 4 ** 5 - 4 = 5116
print(A[1020:1030]) # some double rolls (of five dice each!) and some single rolls
</snippet></ROW><ROW><id>9659682</id><snippet>246
5116
[(1, 1, 1, 1, 1, 4, 4, 4, 4, 1), (1, 1, 1, 1, 1, 4, 4, 4, 4, 2), (1, 1, 1, 1, 1, 4, 4, 4, 4, 3), (1, 1, 1, 1, 1, 4, 4, 4, 4, 4), (1, 1, 1, 1, 2), (1, 1, 1, 1, 3), (1, 1, 1, 1, 4), (1, 1, 1, 2, 1), (1, 1, 1, 2, 2), (1, 1, 1, 2, 3)]
</snippet></ROW><ROW><id>9659682</id><snippet>Counter</snippet></ROW><ROW><id>9659682</id><snippet>def total_counts(die_n=2, max_num=6):
    return Counter(map(sum, enumerate_rolls(die_n, max_num)))

print(total_counts())
print(total_counts(5, 4))
</snippet></ROW><ROW><id>9659682</id><snippet>Counter({11: 18, 13: 18, 14: 18, 15: 18, 12: 17, 16: 17, 9: 16, 10: 16, 17: 16, 18: 14, 8: 13, 7: 12, 19: 12, 20: 9, 6: 8, 5: 6, 21: 6, 22: 4, 4: 3, 3: 2, 23: 2, 24: 1})
Counter({16: 205, 17: 205, 18: 205, 19: 205, 21: 205, 22: 205, 23: 205, 24: 205, 26: 205, 27: 205, 28: 205, 29: 205, 25: 204, 20: 203, 30: 203, 15: 202, 14: 200, 31: 200, 13: 190, 32: 190, 12: 170, 33: 170, 11: 140, 34: 140, 35: 102, 10: 101, 9: 65, 36: 65, 8: 35, 37: 35, 7: 15, 38: 15, 6: 5, 39: 5, 40: 1})
</snippet></ROW><ROW><id>9659821</id><snippet>b = word in (wordList[:1] + wordList[2:])
</snippet></ROW><ROW><id>9659821</id><snippet>b = word in (w for i, w in enumerate(wordList) if i != 1)
</snippet></ROW><ROW><id>9659821</id><snippet>ignore = frozenset([5, 17])
b = word in (w for i, w in enumerate(wordList) if i not in ignore)
</snippet></ROW><ROW><id>9659821</id><snippet>### Constructing a tuple ad-hoc. Easy to read/understand, but doesn't scale.
# Note lack of index 1.
b = word in (wordList[0], wordList[2], wordList[3], wordList[4])

### Playing around with iterators. Scales, but rather hard to understand.
from itertools import chain, islice
b = word in chain(islice(wordList, None, 1), islice(wordList, 2, None))

### More efficient, if condition is to be evaluated many times in a loop.
from itertools import chain
words = frozenset(chain(wordList[:1], wordList[2:]))
b = word in words
</snippet></ROW><ROW><id>9660191</id><snippet>&gt;&gt;&gt; class Quz(object):
...     def __init__(self):
...         self.a = "A"
...
&gt;&gt;&gt; def qux(self):
...     print self.a
...
&gt;&gt;&gt; Quz.qux = qux
&gt;&gt;&gt; q = Quz()
&gt;&gt;&gt; q.qux()
A
</snippet></ROW><ROW><id>9660191</id><snippet>types.MethodType()</snippet></ROW><ROW><id>9660191</id><snippet>&gt;&gt;&gt; import types
&gt;&gt;&gt; class Foo(object):
...     def __init__(self):
...         self.a = "A"
...
&gt;&gt;&gt; def bar(self):
...     print self.a
...
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.bar = types.MethodType(bar, f, Foo)
&gt;&gt;&gt; f.bar()
A
</snippet></ROW><ROW><id>9660395</id><snippet>import itertools

groups = [(1,2),(3,4,5),(6,7)]
groupdxs = [i for i, group in enumerate(groups) for j in range(len(group))]
old_combo = []
for dx_combo in itertools.permutations(groupdxs):
    if dx_combo &lt;= old_combo: # as simple filter
        continue
    old_combo = dx_combo
    iters = [iter(group) for group in groups]
    print [next(iters[i]) for i in dx_combo]
</snippet></ROW><ROW><id>9660395</id><snippet>groupdxs</snippet></ROW><ROW><id>9660761</id><snippet>from itertools import chain
from collections import defaultdict

romeo = {'alas':2, 'juliet':35, 'hello':1}
caesar = {'et':1, 'tu':3, 'cassius':12, 'hello':1}

dicts = defaultdict(dict)
dicts['romeo'] = romeo
dicts['caesar'] = caesar

columns = list(set(list(chain(romeo.keys(), caesar.keys()))))

matrix = defaultdict(dict)

for coll in ('romeo', 'caesar'):
    matrix[coll] = {}
    for key in columns:
        if dicts[coll].has_key(key):
            matrix[coll][key] = dicts[coll][key]
        else:
            matrix[coll][key] = 0

print columns

for coll in matrix.keys():
    for key in columns:
        print matrix[coll][key], 
    print '\n'
</snippet></ROW><ROW><id>9661021</id><snippet>class candy(object):
    def __init__(self, name, type):
        self.name = name
        self.type = type
</snippet></ROW><ROW><id>9661021</id><snippet>candy(name='name', type='type')
</snippet></ROW><ROW><id>9661021</id><snippet>candy(**{ 'name': 'name', 'type': 'type' })
</snippet></ROW><ROW><id>9661109</id><snippet>struct</snippet></ROW><ROW><id>9661109</id><snippet>ping(1)</snippet></ROW><ROW><id>9661432</id><snippet>return [YahooQuote._make(x) for x in csv.reader(csvfile)]
</snippet></ROW><ROW><id>9661432</id><snippet>YahooQuote = collections.namedtuple(
    'YahooQuote', 'date, open, high, low, close, volume, adj_close, ticker')

def prices(ticker):
    # make url given ticker
    ticker_list = [ticker]
    csvfile = urllib2.urlopen(url) 
    return [YahooQuote._make(x + ticker_list) for x in csv.reader(csvfile)]
</snippet></ROW><ROW><id>9661581</id><snippet>CV_XXXXX</snippet></ROW><ROW><id>9661581</id><snippet>cv2</snippet></ROW><ROW><id>9661581</id><snippet>cv2.XXXXX</snippet></ROW><ROW><id>9661581</id><snippet>cv2.cv.CV_XXXXX</snippet></ROW><ROW><id>9661581</id><snippet>cv2.cv.CV_IMWRITE_PNG_COMPRESSION</snippet></ROW><ROW><id>9661581</id><snippet>CV_XXXX</snippet></ROW><ROW><id>9661581</id><snippet>cv2.XXXX</snippet></ROW><ROW><id>9661581</id><snippet>cv2</snippet></ROW><ROW><id>9661581</id><snippet>CV_MORPH_DILATE</snippet></ROW><ROW><id>9661581</id><snippet>MORPH</snippet></ROW><ROW><id>9661581</id><snippet>import cv2
nms = dir(cv2) # list of everything in the cv2 module
[m for m in nms if 'MORPH' in m]
# ['MORPH_BLACKHAT', 'MORPH_CLOSE', 'MORPH_CROSS', 'MORPH_DILATE',
#  'MORPH_ELLIPSE', 'MORPH_ERODE', 'MORPH_GRADIENT', 'MORPH_OPEN',
#  'MORPH_RECT', 'MORPH_TOPHAT']
</snippet></ROW><ROW><id>9661581</id><snippet>MORPH_DILATE</snippet></ROW><ROW><id>9661581</id><snippet>cv</snippet></ROW><ROW><id>9661581</id><snippet>cv2</snippet></ROW><ROW><id>9661581</id><snippet>cv2.cv.CV_XXXX</snippet></ROW><ROW><id>9661581</id><snippet>IMWRITE_PNG_COMPRESSION</snippet></ROW><ROW><id>9661581</id><snippet>cv2....</snippet></ROW><ROW><id>9661581</id><snippet>cv2.cv.CV_IMWRITE_PNG_COMPRESSION</snippet></ROW><ROW><id>9661581</id><snippet>&gt;&gt;&gt; cv2.cv.CV_IMWRITE_PNG_COMPRESSION
16
</snippet></ROW><ROW><id>9661696</id><snippet>import sys
print '\n'.join(sorted(sys.path))
import socket
</snippet></ROW><ROW><id>9661723</id><snippet>a_dict.keys()</snippet></ROW><ROW><id>9661723</id><snippet>a_dict.values()</snippet></ROW><ROW><id>9661723</id><snippet>a_dict.items()</snippet></ROW><ROW><id>9661723</id><snippet>{value:key for key, value in a_dict.items()}</snippet></ROW><ROW><id>9661723</id><snippet>a_dict</snippet></ROW><ROW><id>9661723</id><snippet>value:key</snippet></ROW><ROW><id>9661723</id><snippet>key, value</snippet></ROW><ROW><id>9661723</id><snippet>a_dict</snippet></ROW><ROW><id>9661723</id><snippet>&gt;&gt;&gt; a_dict = {'a': 1, 'b': 2, 'c': 3}
&gt;&gt;&gt; b_dict = {value:key for key, value in a_dict.items()}

&gt;&gt;&gt; a_dict.items()
[('a', 1), ('c', 3), ('b', 2)]
&gt;&gt;&gt; b_dict.items()
[(1, 'a'), (2, 'b'), (3, 'c')]

&gt;&gt;&gt; a_dict.keys()
['a', 'c', 'b']
&gt;&gt;&gt; b_dict.values()
['a', 'b', 'c']

&gt;&gt;&gt; a_dict.values()
[1, 3, 2]
&gt;&gt;&gt; b_dict.keys()
[1, 2, 3]

# Try one with duplicates!
&gt;&gt;&gt; c_dict = {'a': 1, 'b': 2, 'c': 3, 'd':2}
&gt;&gt;&gt; d_dict = {value:key for key, value in c_dict.items()}

# The number 2 can only map to one value;
# the constructor seems to have encountered 'd' last
&gt;&gt;&gt; c_dict.items()
[('a', 1), ('c', 3), ('b', 2), ('d', 2)]
&gt;&gt;&gt; d_dict.items()
[(1, 'a'), (2, 'd'), (3, 'c')]
</snippet></ROW><ROW><id>9661723</id><snippet>&gt;&gt;&gt; e_dict = {n: str(n) * n for n in range(1, 30)}
</snippet></ROW><ROW><id>9662278</id><snippet># An example website
domain = 'http://secure.website.com'
url = domain + '/web/page.html'
# Create a new authentication handler
auth_handler = urllib.request.HTTPBasicAuthHandler()
# Set the login username and password
auth_handler.add_password(None, domain, user='username', passwd='password')
# Create and install a new opener for the handler
opener = urllib.request.build_opener(auth_handler)
urllib.request.install_opener(opener)
# Connect to the page
conn = urllib.request.urlopen(url)
# Read all data on the webpage
page = conn.readall().decode()
# close the connection
conn.close()
</snippet></ROW><ROW><id>9662453</id><snippet>__tablename__</snippet></ROW><ROW><id>9662453</id><snippet>__table__</snippet></ROW><ROW><id>9662453</id><snippet>class UserRemap(db.Model):
    __tablename__ = 'UserRemap'
    name = db.Column(db.String(40))
    email = db.Column(db.String(255))
    password = db.Column(db.String(64))
    flag = db.Column(db.String(1))

    def __init__(self, name, email, password):
        self.email = email
        self.name = name
        self.password = password
        self.flag='N'
</snippet></ROW><ROW><id>9662504</id><snippet>--no-exec</snippet></ROW><ROW><id>9662801</id><snippet>marshal</snippet></ROW><ROW><id>9662801</id><snippet>&gt;&gt;&gt; timeit.timeit("pickle.dumps([1,2,3])","import pickle",number=10000)
0.2939901351928711
&gt;&gt;&gt; timeit.timeit("json.dumps([1,2,3])","import json",number=10000)
0.09756112098693848
&gt;&gt;&gt; timeit.timeit("pickle.dumps([1,2,3])","import cPickle as pickle",number=10000)
0.031056880950927734
&gt;&gt;&gt; timeit.timeit("marshal.dumps([1,2,3])","import marshal", number=10000)
0.00703883171081543
</snippet></ROW><ROW><id>9663183</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; import example
&gt;&gt;&gt; inspect.getmembers(example, inspect.isroutine)
[('func_one', &lt;function func_one at 0x0238CBB0&gt;), ('func_three', &lt;functi
three at 0x0240ADB0&gt;), ('func_two', &lt;function func_two at 0x0240ADF0&gt;)]
</snippet></ROW><ROW><id>9663601</id><snippet>class foo:
    def __init__(self, a, b, c):
        # ...

x = foo(1, 2, 3) # __init__
</snippet></ROW><ROW><id>9663601</id><snippet>class foo:
    def __call__(self, a, b, c):
        # ...

x = foo()
x(1, 2, 3) # __call__
</snippet></ROW><ROW><id>9663658</id><snippet>*</snippet></ROW><ROW><id>9663658</id><snippet>args = [1, 2, 3]
foo(*args) # equivalent to foo(1, 2, 3)
</snippet></ROW><ROW><id>9663900</id><snippet>A.print_x(b) #&lt;-- 'eggs'
</snippet></ROW><ROW><id>9663900</id><snippet>a.__class__.print_x(b) #&lt;-- 'eggs'
</snippet></ROW><ROW><id>9663900</id><snippet>A.print_x</snippet></ROW><ROW><id>9663900</id><snippet>im_func</snippet></ROW><ROW><id>9663900</id><snippet>__func__</snippet></ROW><ROW><id>9663900</id><snippet># python 2.5-
A.print_x.im_func(b)    
a.print_x.im_func(b)

# python 2.6+
A.print_x.__func__(b)   
a.print_x.__func__(b)
</snippet></ROW><ROW><id>9663900</id><snippet>A.print_x</snippet></ROW><ROW><id>9663900</id><snippet>a.print_x</snippet></ROW><ROW><id>9663900</id><snippet># python 3.0+
A.print_x(b)
a.print_x.__func__(b)
</snippet></ROW><ROW><id>9663929</id><snippet>default_storage.exists("/site_media/media/logo.png")</snippet></ROW><ROW><id>9663929</id><snippet>os.path.join</snippet></ROW><ROW><id>9664122</id><snippet># this is my_app module
def app(environ, start_response):
    # environ is dict-like object containing the WSGI environment
    # refer to the PEP for details

    # start_response is a callable that, well, starts the response
    headers = [('Content-Type', 'text/plain; charset=utf-8')]
    start_response('200 OK', headers)

    return ["I'm a WSGI application.\n"]
</snippet></ROW><ROW><id>9664122</id><snippet>wsgiref</snippet></ROW><ROW><id>9664122</id><snippet>#!/usr/bin/python
# this is a CGI script that runs a WSGI application inside CGI handler
from wsgiref.handlers import CGIHandler
from my_app import app
CGIHandler().run(app)
</snippet></ROW><ROW><id>9664122</id><snippet>from wsgiref.simple_server import make_server
from my_app import app
httpd = make_server('localhost', 8000, app)
httpd.serve_forever()
</snippet></ROW><ROW><id>9664122</id><snippet>wsgiref</snippet></ROW><ROW><id>9664122</id><snippet>wsgiref.validate.validator</snippet></ROW><ROW><id>9664873</id><snippet>time.strptime</snippet></ROW><ROW><id>9664873</id><snippet>time.striptime</snippet></ROW><ROW><id>9664873</id><snippet>time.struct_time</snippet></ROW><ROW><id>9664873</id><snippet>datetime.datetime.strptime</snippet></ROW><ROW><id>9664873</id><snippet>datetime.datetime</snippet></ROW><ROW><id>9664873</id><snippet>import datetime as dt

def main(filename, from_str, to_str):
    date_from = dt.datetime.strptime(from_str, "%Y-%m-%d %H:%M")
    date_to = dt.datetime.strptime(to_str, "%Y-%m-%d %H:%M")
    print date_from, date_to
    days = (date_from - date_to).days
    print days
</snippet></ROW><ROW><id>9664873</id><snippet>% test.py '2011-09-08' '2011-10-08'
2011-09-08 00:00:00 2011-10-08 23:59:00
-31
</snippet></ROW><ROW><id>9664873</id><snippet>sys.argv</snippet></ROW><ROW><id>9664873</id><snippet>if __name__ == "__main__":
    if len(sys.argv) &lt;= 2:
        print "Usage: %s DATE [e.g. 2011-09-08 2011-10-08]"
</snippet></ROW><ROW><id>9664873</id><snippet>if len(sys.argv) &lt; 1</snippet></ROW><ROW><id>9665642</id><snippet>&gt;&gt;&gt; time = [0]
&gt;&gt;&gt; [time] = time
&gt;&gt;&gt; time
0
</snippet></ROW><ROW><id>9665718</id><snippet>
&lt;p i18n:translate=""&gt;This is &lt;strong i18n:name="very" i18n:translate=""&gt;very&lt;/strong&gt; important.
</snippet></ROW><ROW><id>9665718</id><snippet>This is ${very} string</snippet></ROW><ROW><id>9665718</id><snippet>very</snippet></ROW><ROW><id>9665862</id><snippet>"this is"</snippet></ROW><ROW><id>9665862</id><snippet>'this is'</snippet></ROW><ROW><id>9665862</id><snippet>'"this is"'</snippet></ROW><ROW><id>9665862</id><snippet>shell=True</snippet></ROW><ROW><id>9665862</id><snippet>this is</snippet></ROW><ROW><id>9665862</id><snippet>grep</snippet></ROW><ROW><id>9666308</id><snippet>import matplotlib.pyplot as plt
import numpy as np
from numpy.random import randn

fig = plt.figure()
data = np.clip(randn(250,250),-1,1)
cax = plt.imshow(data, interpolation='nearest')

title_obj = plt.title('my random fig') #get the title property handler
plt.getp(title_obj)                    #print out the properties of title
plt.getp(title_obj, 'text')            #print out the 'text' property for title
plt.setp(title_obj, color='r')         #set the color of title to red

axes_obj = plt.getp(cax,'axes')                 #get the axes' property handler
ytl_obj = plt.getp(axes_obj, 'yticklabels')     #get the properties for 
                                                #  yticklabels
plt.getp(ytl_obj)                               #print out a list of properties
                                                #  for yticklabels
plt.setp(ytl_obj, color="r")                    #set the color of yticks to red

plt.setp(plt.getp(axes_obj, 'xticklabels'), color='r') #xticklabels: same

color_bar = plt.colorbar()                            #this one is a little bit
cbytick_obj = plt.getp(color_bar.ax.axes, 'yticklabels')                #tricky
plt.setp(cbytick_obj, color='r')

plt.savefig('temp.png')
plt.savefig('temp2.png', facecolor="black", edgecolor="none")
</snippet></ROW><ROW><id>9666339</id><snippet>{{form.text(cols="45", rows="10", placeholder=_('Please describe in a few simple sentences'))|safe}}</snippet></ROW><ROW><id>9666339</id><snippet>()</snippet></ROW><ROW><id>9666415</id><snippet>name     description        license
python   language           opensource
windows  operating system   proprietry
</snippet></ROW><ROW><id>9666415</id><snippet>str</snippet></ROW><ROW><id>9666415</id><snippet>str</snippet></ROW><ROW><id>9666415</id><snippet>def dissect(text):
    data = {}
    for name, length in fields:
        data[name] = text[:length].rstrip()
        text = text[length:]
    return data
</snippet></ROW><ROW><id>9666415</id><snippet>fields = [('lang', 9), ('desc', 19), ('license', 12)]</snippet></ROW><ROW><id>9666415</id><snippet>&gt;&gt;&gt; self.dissect('python   language           opensource')
{'lang': 'python', 'license': 'opensource', 'desc': 'language'}
</snippet></ROW><ROW><id>9666767</id><snippet>--- EVENTS --- 

CREATE TABLE events ( 
  id INTEGER PRIMARY KEY autoincrement, 
  event_name TEXT NOT NULL, 
  event_date TEXT NOT NULL, 
); 

--- ARTISTS ---

CREATE TABLE artists (
  id INTEGER PRIMARY KEY autoincrement,
  artist_name TEXT NOT NULL
);

--- TRACKS --- 

CREATE TABLE tracks ( 
 id INTEGER PRIMARY KEY autoincrement, 
 trackname TEXT NOT NULL, 
 artist_id INTEGER, 
 FOREIGN KEY(artist_id) REFERENCES artists(id)
);  

--- PERFORMANCES ---

CREATE TABLE performances (
  id INTEGER PRIMARY KEY autoincrement,
  event_id INTEGER,
  track_id INTEGER,
  FOREIGN KEY (event_id) REFERENCES events(id),
  FOREIGN KEY (track_id) REFERENCES tracks(id)
);
</snippet></ROW><ROW><id>9666932</id><snippet>make</snippet></ROW><ROW><id>9666932</id><snippet>gcc</snippet></ROW><ROW><id>9666932</id><snippet>-march=armv4t</snippet></ROW><ROW><id>9666932</id><snippet>SBOX_EXTRA_COMPILER_FLAGS</snippet></ROW><ROW><id>9666932</id><snippet>SBOX_EXTRA_COMPILER_ARGS</snippet></ROW><ROW><id>9666932</id><snippet>CFLAGS</snippet></ROW><ROW><id>9666932</id><snippet>-march=armv4t</snippet></ROW><ROW><id>9667308</id><snippet>user.no_of_logins += 1
session.commit()
</snippet></ROW><ROW><id>9667453</id><snippet>{% for A ... %}
    {{ forloop.* }} is there for the 'for A ...'

    {% for B ... %}
        {{ forloop.* }} is there for the 'for B ...'
        {{ forloop.parentloop.* }} refers to the 'for A ...'
    {% empty %}
        {{ forloop.* }} is there for the 'for A ...' !!!
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>9667453</id><snippet>var js_variable{{ forloop.parentloop.counter0 }} = []
</snippet></ROW><ROW><id>9667453</id><snippet>var js_variable{{ forloop.counter0 }} = []
</snippet></ROW><ROW><id>9667481</id><snippet>In [1]: from lxml.etree import parse

In [2]: tree = parse('/tmp/test.xml')

In [3]: for entry in tree.xpath('/dir/results/entrylist/entry'):
   ...:     print entry.xpath('name|date')
   ...:
[&lt;Element name at 0x2ce7d70&gt;, &lt;Element date at 0x2ce7dc0&gt;]
[&lt;Element name at 0x2ce7dc0&gt;, &lt;Element date at 0x2ce7c30&gt;]
[&lt;Element name at 0x2ce7c30&gt;, &lt;Element date at 0x2ce7d70&gt;]
</snippet></ROW><ROW><id>9667809</id><snippet>  myFile = open(fileName, "w")
  p = subprocess.Popen(args, stdout=myFile)

  p.wait()          # &lt;-- Missing line

  myFile.flush()    # force the file to disk
  os.fsync(myFile)  # ..
  myFile.close()

  myFile = open(fileName, "r")
  while myFile.readline():
    pass # do stuff
  myFile.close()
</snippet></ROW><ROW><id>9668066</id><snippet>for word in keywords:
    if word in line:
        d[word] = True
</snippet></ROW><ROW><id>9668066</id><snippet>dict([(word,True) for word in keywords if word in line])
</snippet></ROW><ROW><id>9668066</id><snippet>eval</snippet></ROW><ROW><id>9668066</id><snippet>eval</snippet></ROW><ROW><id>9668066</id><snippet>def keyword_handler_word1(line):
    (...)

(...)

def keyword_handler_wordN(line):
    (...)

keyword_handlers = { 'word1': keyword_handler_word1, (...), 'wordN': keyword_handler_wordN }
</snippet></ROW><ROW><id>9668066</id><snippet>for word in keywords:
    # keyword_handlers[word] is a function
    keyword_handlers[word](line)
</snippet></ROW><ROW><id>9668227</id><snippet>   gst.parse_launch('gconfaudiosrc ! audioconvert ! audioresample '
                    + '! vader name=vad auto-threshold=true '
                    + '! pocketsphinx name=asr ! fakesink')
</snippet></ROW><ROW><id>9668227</id><snippet>   gst.parse_launch('gconfaudiosrc ! audioconvert ! audioresample '
                    + '! vader name=vad auto-threshold=true '
                    + '! pocketsphinx lm=&lt;your_file.lm&gt; name=asr ! fakesink')
</snippet></ROW><ROW><id>9668825</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; keys = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; values = [7, 8, 9]
&gt;&gt;&gt; d = [dict(zip(kperm, values)) for kperm in itertools.permutations(keys, len(values))]
&gt;&gt;&gt; len(d)
120
&gt;&gt;&gt; d[:10]
[{1: 7, 2: 8, 3: 9}, {1: 7, 2: 8, 4: 9}, {1: 7, 2: 8, 5: 9}, {1: 7, 2: 8, 6: 9}, {1: 7, 2: 9, 3: 8}, {1: 7, 3: 8, 4: 9}, {1: 7, 3: 8, 5: 9}, {1: 7, 3: 8, 6: 9}, {1: 7, 2: 9, 4: 8}, {1: 7, 3: 9, 4: 8}]
</snippet></ROW><ROW><id>9669082</id><snippet>distinct</snippet></ROW><ROW><id>9669082</id><snippet>qs = models.SomeTable.objects.filter(foo='bar', site__contained=some_polygon).values('site').distinct()
</snippet></ROW><ROW><id>9669436</id><snippet>#views.py
@view_config(route_name='view_customer', renderer='templates/view_customer.jinja2')
def view_page(request):
    customer_no = request.matchdict['customer']
    cust_slcustm = DBSessionRO.query(Slcustm).filter(Slcustm.customer == customer_no).first()
    cust_customer = DBSessionRO.query(Custom).filter(Custom.cu_custref== customer_no).first()
    cust_books = DBSessionRW.query(Customer).filter(Customer.name == customer_no).first()

    # Return a 404 if a result isn't found, slcustm and customer share one2one relationship on customer_no
    if cust_slcustm is None:
        return HTTPNotFound('No such customer')

    return dict(cust_slcustm=cust_slcustm, cust_customer=cust_customer, cust_books=cust_books)   
</snippet></ROW><ROW><id>9669436</id><snippet>{% for sample in cust_books.customer_samples %}
  {{ sample.name }}
{% endfor %}
</snippet></ROW><ROW><id>9669484</id><snippet>endswith</snippet></ROW><ROW><id>9669484</id><snippet>matching = False
found = []
with open('fileinput.txt', 'r') as file
    it = iter(file)
    for line in it:
        if matching:
            if line.strip() == '':
                break
            else:
                found.append(line)
        elif line.endswith('PATTERN:'):
            for _ in range(6):
                next(it)
            matching = True
</snippet></ROW><ROW><id>9669484</id><snippet>START</snippet></ROW><ROW><id>9669484</id><snippet>PATTERN</snippet></ROW><ROW><id>9669484</id><snippet>assert</snippet></ROW><ROW><id>9669484</id><snippet>found</snippet></ROW><ROW><id>9669484</id><snippet>for line in found:
    print line
</snippet></ROW><ROW><id>9669603</id><snippet>sys.stdin</snippet></ROW><ROW><id>9669603</id><snippet>byte</snippet></ROW><ROW><id>9669603</id><snippet>string</snippet></ROW><ROW><id>9669603</id><snippet>import sys
import xml.etree.cElementTree as ET

sys.stdin = sys.stdin.detach()
tree = ET.parse(sys.stdin)
</snippet></ROW><ROW><id>9669614</id><snippet>AdminImageMixin</snippet></ROW><ROW><id>9669614</id><snippet>ImageField</snippet></ROW><ROW><id>9669614</id><snippet>ImageField</snippet></ROW><ROW><id>9669614</id><snippet>from sorl.thumbnail import ImageField

class MyModel(models.Model):
    some_image = ImageField(...)
</snippet></ROW><ROW><id>9669614</id><snippet>django.db.models.ImageField</snippet></ROW><ROW><id>9669614</id><snippet>img</snippet></ROW><ROW><id>9669904</id><snippet>import numpy as np

def fitfunc(p, x):
    a = np.zeros(7)
    a[1:7] = p[:6]
    a[0] = 1 - a[1:4].sum()
    return a[0] + a[1]*exp(-x/a[4]) + a[2]*exp(-x/a[5]) + a[3]*exp(-x/a[6])

def errfunc(p, x, y1, y2):
    return np.concatenate((
        fitfunc(p[:6], x) - y1,
        fitfunc(p[6:12], x) - y2
    ))
</snippet></ROW><ROW><id>9670048</id><snippet>bwdist</snippet></ROW><ROW><id>9670048</id><snippet>scipy.ndimage.morphology.distance_transform_edt</snippet></ROW><ROW><id>9670486</id><snippet>simplejson.load()</snippet></ROW><ROW><id>9670486</id><snippet>encoding</snippet></ROW><ROW><id>9670486</id><snippet>with open("stem.json", "r") as f:
    data = simplejson.load(f, encoding="utf-8")
</snippet></ROW><ROW><id>9671030</id><snippet>Process.__init__()</snippet></ROW><ROW><id>9671030</id><snippet>Process</snippet></ROW><ROW><id>9671030</id><snippet>Process.start()</snippet></ROW><ROW><id>9671030</id><snippet>Process.__init__()</snippet></ROW><ROW><id>9671030</id><snippet>SyncManager</snippet></ROW><ROW><id>9671030</id><snippet>AttributeError: type object 'SyncManager' has no attribute 'from_address'</snippet></ROW><ROW><id>9671030</id><snippet>SyncManager</snippet></ROW><ROW><id>9671030</id><snippet>python myfile.py
</snippet></ROW><ROW><id>9671052</id><snippet>import random
print random.randint(1,10)
</snippet></ROW><ROW><id>9671052</id><snippet>d={'money':100, 'health':100}
def buyBread():
  d[money]=d[money]-10
  d[health]=d[health]+20
</snippet></ROW><ROW><id>9671287</id><snippet>class ComplextCallableObject(object):
    @wrap_me
    def __call__(self, a1, a2):
        pass #...

@wrap_me
def simple_function(tgt, a1, a2):
    pass

ComplextCallableObject.anInstanceMethod = simple_function
ComplextCallableObject.anClassMethod = classmethod(simple_function)
ComplextCallableObject.aStaticMethod = staticmethod(simple_function)
</snippet></ROW><ROW><id>9671287</id><snippet>simple_function</snippet></ROW><ROW><id>9671287</id><snippet>staticmethod</snippet></ROW><ROW><id>9671287</id><snippet>classmethod</snippet></ROW><ROW><id>9671287</id><snippet>self</snippet></ROW><ROW><id>9671287</id><snippet>def wrap_me(fn):
    names = fn.func_code.co_varnames
    if names and names[0]=='self':
        print 'looks like an instance method'
    else: print 'looks like a function'
    return fn
</snippet></ROW><ROW><id>9671301</id><snippet>chunks=[data[x:x+100] for x in xrange(0, len(data), 100)]
</snippet></ROW><ROW><id>9671502</id><snippet>inputFile = open(path,'r')
for n, line in enumerate(inputFile):
    if n &gt; given_number:
       variableX = line.split(' ')[5]
inputFile.close()
</snippet></ROW><ROW><id>9671502</id><snippet>inputFile = open(path,'r')
head_lines = 4
for n, line in enumerate(inputFile):
    if n &gt; head_lines:
       cols = line.split()
       if len(cols) == 9:               
           variableX = cols[7]
           # do whatever you need with variableX
inputFile.close()
</snippet></ROW><ROW><id>9672016</id><snippet>subprocess</snippet></ROW><ROW><id>9672185</id><snippet>python /usr/share/scripts/myscript.py 2&gt;&amp;1 &gt; /home/me/logs/myscript.log
</snippet></ROW><ROW><id>9672185</id><snippet>python /usr/share/scripts/myscript.py &gt; /home/me/logs/myscript.log 2&gt;&amp;1
</snippet></ROW><ROW><id>9672185</id><snippet>&gt;/dev/null 2&gt;&amp;1</snippet></ROW><ROW><id>9672359</id><snippet>class MyComboBox(QComboBox):
    def __init__(self):
        super(MyComboBox,self).__init__()  # your super was wrong.
                                           # you need to pass the _current_ class name
        self.setView(QTreeView())

        self.view().setHeaderHidden(True)
        self.view().setItemsExpandable(False)
        self.view().setRootIsDecorated(False)

    def showPopup(self):
        self.setRootModelIndex(QModelIndex()) # you need to add this
        self.view().expandAll()
        QComboBox.showPopup(self)

    def setModel(self, model):
        super(MyComboBox, self).setModel(model)
        parent, row = self._firstSelectableItem()
        if row is not None:
            self.setRootModelIndex(parent)
            self.setCurrentIndex(row)

    def _firstSelectableItem(self, parent=QModelIndex()):
        """
        Internal recursive function for finding the first selectable item.
        """
        for i in range(self.model().rowCount(parent)):
            itemIndex = self.model().index(i,0,parent)
            if self.model().itemFromIndex(itemIndex).isSelectable():
                return parent, i
            else:
                itemIndex, row = self._firstSelectableItem(itemIndex)
                if row is not None:
                    return itemIndex, row
        return parent, None
</snippet></ROW><ROW><id>9672419</id><snippet>time</snippet></ROW><ROW><id>9672419</id><snippet>time command arg1 arg2 arg3</snippet></ROW><ROW><id>9672419</id><snippet>real    0m0.631s
user    0m0.154s
sys     0m0.458s
</snippet></ROW><ROW><id>9672699</id><snippet>def switchFiles(args):
    pairs = []
    for root1, dirs1, files1 in os.walk(args.folder):
        for f1 in files1:
            for root2, dirs2, files2 in os.walk(args.database):
                for f2 in files2:
                    if f1 == f2:
                        pairs.append(os.path.join(root1, f1), os.path.join(root2, f2))
    for src, dst in pairs:
        shutil.copyfile(src, dst)
</snippet></ROW><ROW><id>9672699</id><snippet>def switchFiles(args):
    f, d = {}, {}
    for root1, dirs1, files1 in os.walk(args.folder):
        for f1 in files1:
            f[f1] = os.path.join(root1, f1)
    for root2, dirs2, files2 in os.walk(args.database):
        for f2 in files2:
            d[f2] = os.path.join(root2, f2)
    ns = set(f.keys()) &amp; set(d.keys())
    for n in ns:
        shutil.copyfile(f[n], d[n])
</snippet></ROW><ROW><id>9672733</id><snippet>ElementTree(html)</snippet></ROW><ROW><id>9672733</id><snippet>ElementTree.fromstring(html)</snippet></ROW><ROW><id>9672733</id><snippet>from xml.etree import ElementTree</snippet></ROW><ROW><id>9672733</id><snippet>Element</snippet></ROW><ROW><id>9672845</id><snippet>import httplib
from cStringIO import StringIO

h = httplib.HTTPMessage(StringIO(""))
h["Content-Type"] = "text/plain"
h["Content-Length"] = "1234"

print h.items()
</snippet></ROW><ROW><id>9672922</id><snippet>bottle.request.data</snippet></ROW><ROW><id>9672922</id><snippet>bottle.request.headers</snippet></ROW><ROW><id>9672971</id><snippet>exec</snippet></ROW><ROW><id>9672971</id><snippet>safe_dict</snippet></ROW><ROW><id>9672971</id><snippet>execCd = """
if (abs(22.0) &gt;= abs(-162.0)):
    retVal = 22.0
else:
    retVal = -162.0
"""

safe_list = ['math','acos', 'asin', 'atan', 'atan2', 'ceil', 'cos', 'cosh', 'de grees', 'e', 'exp', 'fabs', 'floor', 'fmod', 'frexp', 'hypot', 'ldexp', 'log', 'log10', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh'] 
safe_dict = dict([ (k, locals().get(k, None)) for k in safe_list ]) 
safe_dict['abs'] = abs
exec(execCd,{"__builtins__":None},safe_dict)
retVal = safe_dict["retVal"]
</snippet></ROW><ROW><id>9673032</id><snippet>b = a[:20]
</snippet></ROW><ROW><id>9673079</id><snippet>$ python -m trace --trace euler32.py | head
 --- modulename: euler32, funcname: &lt;module&gt;
euler32.py(4): from itertools import permutations
euler32.py(6): digits = range(1,10)
euler32.py(7): positions = range(1,9)
euler32.py(9): for c in permutations(digits,9):
euler32.py(10):     for x in positions:
euler32.py(11):         for equal in positions[x:]:
</snippet></ROW><ROW><id>9673164</id><snippet>from ..utl import server
</snippet></ROW><ROW><id>9673688</id><snippet>key</snippet></ROW><ROW><id>9673688</id><snippet>import operator
maxLPFt = max(lpfData, key=operator.itemgetter(1))
</snippet></ROW><ROW><id>9673688</id><snippet>max</snippet></ROW><ROW><id>9673688</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>9673688</id><snippet>sort</snippet></ROW><ROW><id>9673688</id><snippet>sorted</snippet></ROW><ROW><id>9673781</id><snippet>connect</snippet></ROW><ROW><id>9673781</id><snippet>QStandardItem</snippet></ROW><ROW><id>9673781</id><snippet>signalSource.availabilityChanged.connect(
    lambda enable: categoryItem.setEnabled(enable))
</snippet></ROW><ROW><id>9673781</id><snippet>for button in buttonList:
    item = QStandardItem("Test")
    ...
    button.toggled.connect(
        lambda enable, item=item: item.setEnabled(enable))
</snippet></ROW><ROW><id>9673806</id><snippet>from distutils.core import setup

setup(
    options = {'py2exe': {'bundle_files': 1}},
    zipfile = None,
    windows = [{
            "script":"myprogram.pyw",
            "icon_resources": [(1, "myicon.ico")],
            "dest_base":"myprogram"
            }],
)
</snippet></ROW><ROW><id>9673867</id><snippet>img = Image.open("someimage.jpg")
qt = img.quantization
# qt is now a dictionary of arrays which is your quantization table.

width, height = img.size
crop = img.crop((8, 0, width, height))
img = img.resize((width - 8, height))
img.paste(crop, (0,0))

# pass qt in as you save your jpeg
img.save("crop.jpg",  qtables = qt)
</snippet></ROW><ROW><id>9674047</id><snippet>locale</snippet></ROW><ROW><id>9674047</id><snippet>categories</snippet></ROW><ROW><id>9674047</id><snippet>def requires_swedish_setup(self):
    """
    Return True if this project requires extra Swedish setup.
    """
    return (self.locale.filter(name__in = ('All', 'Sweden')).exists())
            and self.categories.filter(name__in = ('Technology', 'Internet')).exists())
</snippet></ROW><ROW><id>9674047</id><snippet>if form.is_valid():
    project = form.save()
    next = 'project_new_step2'
    if project.requires_swedish_setup():
        next = 'project_new_se'
    next_url = reverse(next, kwargs={'project_id': project.id})
    return HttpResponseRedirect(next_url)
</snippet></ROW><ROW><id>9674047</id><snippet>Locale</snippet></ROW><ROW><id>9674047</id><snippet>Category</snippet></ROW><ROW><id>9674047</id><snippet>name</snippet></ROW><ROW><id>9674047</id><snippet>request.POST</snippet></ROW><ROW><id>9674047</id><snippet>form.cleaned_data</snippet></ROW><ROW><id>9674047</id><snippet>request.build_absolute_uri</snippet></ROW><ROW><id>9674047</id><snippet>reverse</snippet></ROW><ROW><id>9674047</id><snippet>HttpResponseRedirect</snippet></ROW><ROW><id>9674047</id><snippet>"All" or "Sweden" in kwargs['locale']</snippet></ROW><ROW><id>9674047</id><snippet>"All" or ("Sweden" in kwargs['locale'])</snippet></ROW><ROW><id>9674097</id><snippet>tail</snippet></ROW><ROW><id>9674097</id><snippet>element.text</snippet></ROW><ROW><id>9674097</id><snippet>element.tail</snippet></ROW><ROW><id>9674097</id><snippet>&gt;&gt;&gt; import lxml.etree
&gt;&gt;&gt; root = lxml.etree.fromstring('''&lt;root&gt;&lt;foo&gt;bar&lt;/foo&gt;baz&lt;/root&gt;''')
&gt;&gt;&gt; root[0]
&lt;Element foo at 0x145a3c0&gt;
&gt;&gt;&gt; root[0].tail
'baz'
</snippet></ROW><ROW><id>9674097</id><snippet>&gt;&gt;&gt; et = lxml.etree.fromstring('''&lt;item&gt;&lt;img src="cat.jpg" /&gt; Picture of a cat&lt;/item&gt;''')
&gt;&gt;&gt; et.find('img').tail
' Picture of a cat'
</snippet></ROW><ROW><id>9674097</id><snippet>&gt;&gt;&gt; import xml.etree.ElementTree
&gt;&gt;&gt; xml.etree.ElementTree.fromstring(
...   '''&lt;item&gt;&lt;img src="cat.jpg" /&gt; Picture of a cat&lt;/item&gt;'''
... ).find('img').tail
' Picture of a cat'
</snippet></ROW><ROW><id>9674162</id><snippet>import subprocess

proc = subprocess.Popen(['/bin/bash'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
stdout = proc.communicate('ls -lash')

print stdout
</snippet></ROW><ROW><id>9674162</id><snippet>&gt;&gt;&gt; process = subprocess.Popen(['/bin/bash'], shell=False, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
&gt;&gt;&gt; process.stdin.write('echo it works!\n')
&gt;&gt;&gt; process.stdout.readline()
'it works!\n'
&gt;&gt;&gt; process.stdin.write('date\n')
&gt;&gt;&gt; process.stdout.readline()
'wto, 13 mar 2012, 17:25:35 CET\n'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9674297</id><snippet>5 / 2</snippet></ROW><ROW><id>9674297</id><snippet>from __future__ import division</snippet></ROW><ROW><id>9674433</id><snippet>//File T1
&lt;root&gt;
  &lt;block t3_container&gt;
    {% block t3 %}{% endblock %}
  &lt;/block t3_container&gt;

  &lt;block t2_container&gt;
  {% block t2 %}{% endblock %}
  &lt;/block t2_container&gt;
&lt;/root&gt;

// File T2
{% extends 't1.djhtml' %}
{%- from 't3.djhtml' import inner, inner2 with context %}

{% block t3 %}
   {{inner2()}}   
{% endblock %}

{% block t2 %}
    &lt;block t2&gt;
        {{ inner() }}
    &lt;/block t2&gt;
{% endblock %}

// File T3
{% macro inner2() %}
    &lt;block t3&gt;
        CONTENT '{{foo+1}}'
    &lt;/block t3&gt;
{% endmacro %}

{% macro inner() %}
  hello
{% endmacro %}

// test.py
from jinja2 import Environment, FileSystemLoader
env  = Environment(loader=FileSystemLoader(''))
t=env.get_template('t2.djhtml')
print t.render({ 'foo' : 122 })
</snippet></ROW><ROW><id>9674527</id><snippet>numpy.sum(g, axis=0)
</snippet></ROW><ROW><id>9674801</id><snippet>Q</snippet></ROW><ROW><id>9674801</id><snippet>|</snippet></ROW><ROW><id>9674801</id><snippet>from django.db.models import Q

def companies_matching(merchants):
    """
    Return a queryset for companies whose names contain case-insensitive
    matches for any of the `merchants`.
    """
    q = Q()
    for merchant in merchants:
        q |= Q(name__icontains = merchant)
    return Companies.objects.filter(q)
</snippet></ROW><ROW><id>9674801</id><snippet>iexact</snippet></ROW><ROW><id>9674801</id><snippet>icontains</snippet></ROW><ROW><id>9675091</id><snippet>import random, string

key = "".join([random.choice(string.letters + string.digits + string.punctuation) for _ in xrange(64)])
</snippet></ROW><ROW><id>9675120</id><snippet>select_related()</snippet></ROW><ROW><id>9675120</id><snippet>extra()</snippet></ROW><ROW><id>9675120</id><snippet>.raw()</snippet></ROW><ROW><id>9675120</id><snippet>def get_field_display(klass, field, value):
    f = klass._meta.get_field(field)
    return dict(f.flatchoices).get(value, value)

# usage
get_field_display(User, 'name', 'JSmith001')
</snippet></ROW><ROW><id>9675149</id><snippet>list = file_in.readlines()
list2 = []     
string =""
i = 0

while i &lt; len(list):
   ## remove any leading or trailing white space then split on ' '
   line_arr = list[i].lstrip().rstrip().split(' ')
</snippet></ROW><ROW><id>9675149</id><snippet>   ##check for float at end of line
   try:
      float(line_arr[-1])
   except ValueError:
      ##not a float 
      ##remove new line and add to previous line
      string = string.replace('\n',' ') +  list[i]
   else:
      ##there is a float at the end of current line
      ##add to previous then add record to list2
      string = string.replace('\n',' ') +  list[i]
      list2.append(string)
      string = ""
   i+=1
</snippet></ROW><ROW><id>9675149</id><snippet>20/09/2011||line_number_1
Text unstructured of the second record bla bla 406.25 10001||line_number_2
06/10/2011||line_number_3
28/11/2011||line_number_4
Second record of the day/month BUT the fifth record of the file 500 90.25||line_number_5
</snippet></ROW><ROW><id>9675181</id><snippet>print "docID:    {0}\nCitation: {1}\n".format(docID.encode("UTF-8"),
                                              target.encode("UTF-8"))
</snippet></ROW><ROW><id>9675318</id><snippet>SELECT OUTFILE</snippet></ROW><ROW><id>9675318</id><snippet>cursor=MySQLdb.cursors.SSCursor</snippet></ROW><ROW><id>9675422</id><snippet>def myfunc():
    return dict(caption='Me', source='http://example.com/img.png')
</snippet></ROW><ROW><id>9675422</id><snippet>{{include 'image.html'}}
</snippet></ROW><ROW><id>9675422</id><snippet>caption</snippet></ROW><ROW><id>9675422</id><snippet>source</snippet></ROW><ROW><id>9675422</id><snippet>caption</snippet></ROW><ROW><id>9675422</id><snippet>source</snippet></ROW><ROW><id>9675422</id><snippet>include</snippet></ROW><ROW><id>9675422</id><snippet>{{caption = 'Me'
  source = 'http://example.com/img.png'}}
{{include 'image.html'}}
</snippet></ROW><ROW><id>9675546</id><snippet>a[i][j] = input("college %d %s" % (j+1, d[i]))
</snippet></ROW><ROW><id>9675546</id><snippet>"%s %s" % "Hello" % "World"
</snippet></ROW><ROW><id>9675546</id><snippet>"%s %s" % ("Hello", "World")
</snippet></ROW><ROW><id>9675546</id><snippet>"college {0} {1}".format(j+1, d)
</snippet></ROW><ROW><id>9675546</id><snippet>"college {} {}".format(j+1, d)
</snippet></ROW><ROW><id>9675560</id><snippet>Post.objects.raw_query({'author.name': "Ralph"})
</snippet></ROW><ROW><id>9675842</id><snippet>\Windows\WindowStations\WinSta0</snippet></ROW><ROW><id>9675842</id><snippet>\Windows\WindowStations\Service-0x0-3e7$</snippet></ROW><ROW><id>9675842</id><snippet>pythonw.exe &lt;main_py&gt;</snippet></ROW><ROW><id>9675842</id><snippet># set up logging #####################################
import sys,os,logging
logfile = os.path.splitext(os.path.basename(sys.argv[0]))[0]+".log"
logging.basicConfig(\
    format='%(asctime)s %(levelname)-8s %(message)s',\
    filename=logfile,\
    level=logging.DEBUG)
l = logging.getLogger()
#to avoid multiple copies after restart from pdb prompt
if len(l.handlers)&lt;=1: l.addHandler(logging.StreamHandler(sys.stdout))
#hook to log unhandled exceptions
def excepthook(type,value,traceback):
    logging.exception("Unhandled exception occured",exc_info=(type,value,traceback))
    old_excepthook(type,value,traceback)
old_excepthook = sys.excepthook
sys.excepthook = excepthook
# ####################################################
</snippet></ROW><ROW><id>9675962</id><snippet>print "".join(traceback.format_exception(type, value, tb))
</snippet></ROW><ROW><id>9676235</id><snippet>CARD_VALUES=["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"]
SUIT_COLOR={"clubs": "black", "spades":"black", "hearts":"red", "diamonds":"red"}


class Card:
    def __init__(self, value, suit):
        if value not in CARD_VALUES:
            raise Exception("Invalid card value {}".format(value))

        if suit not in SUIT_COLOR:
            raise Exception("Invalid suit {}".format(suit))

        self.value = value
        self.suit = suit

    def suit_color(self):
        return SUIT_COLOR[self.suit]

    def card_value(self):
        return CARD_VALUES.index(self.value)

    def __repr__(self):
        return "({} of {})".format(self.value, self.suit)


class Row:
    def __init__(self):
        self.cards=[]

    def valid_add_card(self, card):
        if not self.cards:
            return True # true for empty deck

        last_card=self.cards[-1]
        return last_card.card_value()==card.card_value()+1 and last_card.suit_color()!=card.suit_color()

    def add_card(self, card):
        if self.valid_add_card(card):
            self.cards.append(card)
        else:
            raise Exception("Cannot add card {} to {}".format(card, self.cards[-1]))

    def __repr__(self):
        return " - ".join(str(c) for c in self.cards)


r=Row()
r.add_card(Card("J", "spades"))
r.add_card(Card("10", "hearts"))
r.add_card(Card("9", "clubs"))
print(r)
print("Last card won't work:")
r.add_card(Card("8", "spades"))
</snippet></ROW><ROW><id>9676767</id><snippet>zip(*[iter(sonnets.split("\n\n"))]*2)
</snippet></ROW><ROW><id>9676767</id><snippet>&gt;&gt;&gt; sonnets = "SONNET 1\n\nFrom fairest creatures we desire increase, That thereby beauty's rose might never die, But as the riper should by time decease, His tender heir might bear his memory: But thou, contracted to thine own bright eyes, Feed'st thy light's flame with self-substantial fuel, Making a famine where abundance lies, Thyself thy foe, to thy sweet self too cruel. Thou that art now the world's fresh ornament And only herald to the gaudy spring, Within thine own bud buriest thy content And, tender churl, makest waste in niggarding. Pity the world, or else this glutton be, To eat the world's due, by the grave and thee.\n\nSONNET 2\n\nWhen forty winters shall beseige thy brow, And dig deep trenches in thy beauty's field, Thy youth's proud livery, so gazed on now, Will be a tatter'd weed, of small worth held: Then being ask'd where all thy beauty lies, Where all the treasure of thy lusty days, To say, within thine own deep-sunken eyes, Were an all-eating shame and thriftless praise. How much more praise deserved thy beauty's use, If thou couldst answer 'This fair child of mine Shall sum my count and make my old excuse,' Proving his beauty by succession thine! This were to be new made when thou art old, And see thy blood warm when thou feel'st it cold."
&gt;&gt;&gt; L=[{'title':title, 'content': content} for title, content in zip(*[iter(sonnets.split("\n\n"))]*2)]
&gt;&gt;&gt; L[0]['title']
'SONNET 1'
&gt;&gt;&gt; L[0]['content']
"From fairest creatures we desire increase, That thereby beauty's rose might never die, But as the riper should by time decease, His tender heir might bear his memory: But thou, contracted to thine own bright eyes, Feed'st thy light's flame with self-substantial fuel, Making a famine where abundance lies, Thyself thy foe, to thy sweet self too cruel. Thou that art now the world's fresh ornament And only herald to the gaudy spring, Within thine own bud buriest thy content And, tender churl, makest waste in niggarding. Pity the world, or else this glutton be, To eat the world's due, by the grave and thee."
&gt;&gt;&gt; L[1]['title']
'SONNET 2'
&gt;&gt;&gt; L[1]['content']
"When forty winters shall beseige thy brow, And dig deep trenches in thy beauty's field, Thy youth's proud livery, so gazed on now, Will be a tatter'd weed, of small worth held: Then being ask'd where all thy beauty lies, Where all the treasure of thy lusty days, To say, within thine own deep-sunken eyes, Were an all-eating shame and thriftless praise. How much more praise deserved thy beauty's use, If thou couldst answer 'This fair child of mine Shall sum my count and make my old excuse,' Proving his beauty by succession thine! This were to be new made when thou art old, And see thy blood warm when thou feel'st it cold."
</snippet></ROW><ROW><id>9676891</id><snippet>re.match</snippet></ROW><ROW><id>9676891</id><snippet>re.search</snippet></ROW><ROW><id>9676891</id><snippet>r</snippet></ROW><ROW><id>9676891</id><snippet>'\b'</snippet></ROW><ROW><id>9676891</id><snippet>if re.search(r'\b' + stopwords[y] + r'\b', testfile[x], re.I):
</snippet></ROW><ROW><id>9676891</id><snippet>dellist</snippet></ROW><ROW><id>9676891</id><snippet>testfile</snippet></ROW><ROW><id>9676891</id><snippet>dellist = [w for w in testfile for test in stopwords if re.search(test,w,re.I)]
</snippet></ROW><ROW><id>9676891</id><snippet>re</snippet></ROW><ROW><id>9676891</id><snippet>stopwords</snippet></ROW><ROW><id>9676891</id><snippet>\b(We|no)\b</snippet></ROW><ROW><id>9676891</id><snippet>testfile</snippet></ROW><ROW><id>9676891</id><snippet>regex = r'\b(' + '|'.join(stopwords) + r')\b'  # r'\b(We|no)\b'
</snippet></ROW><ROW><id>9676891</id><snippet>newtestfile = [w for w in testfile if re.search(regex,w,re.I) is None]
# newtestfile is ['education']
</snippet></ROW><ROW><id>9677080</id><snippet>send_html_email</snippet></ROW><ROW><id>9677080</id><snippet>send_html_email</snippet></ROW><ROW><id>9677219</id><snippet>class A():
</snippet></ROW><ROW><id>9677219</id><snippet>class A(object):
</snippet></ROW><ROW><id>9677348</id><snippet>from datetime import datetime, timedelta

startDate = datetime(your_year, 1, 1)
endDate = (startDate + timedelta(days=days_from_the_begining)).weekday()
</snippet></ROW><ROW><id>9677348</id><snippet>from datetime import datetime, timedelta

def get_weekday(year, dayOfTheYear):
    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

    userWeekDay = (datetime(year, 1, 1) + timedelta(days=dayOfTheYear)).weekday()
    return days[userWeekDay]
</snippet></ROW><ROW><id>9677748</id><snippet>tfidf = term freq * log(document count / (document frequency + 1))
tfidf = [# of t in d] * log([#d in c] / ([#d with t in c] + 1))
</snippet></ROW><ROW><id>9678335</id><snippet>os.error()</snippet></ROW><ROW><id>9678335</id><snippet>logging.error()</snippet></ROW><ROW><id>9678335</id><snippet>error()</snippet></ROW><ROW><id>9678335</id><snippet>int()</snippet></ROW><ROW><id>9678335</id><snippet>random.int()</snippet></ROW><ROW><id>9678335</id><snippet>random_int()</snippet></ROW><ROW><id>9678335</id><snippet>from os import *</snippet></ROW><ROW><id>9678335</id><snippet>os</snippet></ROW><ROW><id>9678335</id><snippet>re</snippet></ROW><ROW><id>9678335</id><snippet>sqlite3</snippet></ROW><ROW><id>9678335</id><snippet>csv</snippet></ROW><ROW><id>9678335</id><snippet>logging</snippet></ROW><ROW><id>9678445</id><snippet>L[1:]</snippet></ROW><ROW><id>9678445</id><snippet>def append_to_all(L, v):
'''Append value v, which may be of any type, to all the nested lists in L.
L is a list, and may contain other lists.'''

    if len(L) == 0:
        return [v]
    elif isinstance(L[0], list):
        return [L[0] + [v]] + append_to_all(L[1:], v)
    else:
        return [L[0]] + append_to_all(L[1:], v)
</snippet></ROW><ROW><id>9678445</id><snippet>def append_to_all(L, v):
    for item in L:
        if isinstance(L, list):
            item.append(v)
    L.append(v)
</snippet></ROW><ROW><id>9678459</id><snippet>create_user</snippet></ROW><ROW><id>9678974</id><snippet>char is None</snippet></ROW><ROW><id>9678974</id><snippet>char == None</snippet></ROW><ROW><id>9678974</id><snippet>None</snippet></ROW><ROW><id>9678974</id><snippet>is</snippet></ROW><ROW><id>9678974</id><snippet>def get_input_char():
    while True:
        char = str.lower(input("Input a letter: "))
        if len(char) == 1 and char in string.ascii_letters:
            break
        else:
            print("Character '%s' not valid. Try again.\n" % char)
    return char
</snippet></ROW><ROW><id>9679067</id><snippet>for i in range(0,6):
    self.buttons.append(wx.Button(self, -1, "Button &amp;"+str(i)))
    self.sizer2.Add(self.button[i], 1, wx.EXPAND)
</snippet></ROW><ROW><id>9679067</id><snippet>self.buttons</snippet></ROW><ROW><id>9679067</id><snippet>self.buttons[i]</snippet></ROW><ROW><id>9679720</id><snippet>#!/usr/bin/env python
# 
# Counts the IP addresses of a log file.
# 
# Assumption: the IP address is logged in the first column.
# Example line: 117.195.185.130 - - [06/Mar/2012:00:00:00 -0800] \
#    "GET /mysidebars/newtab.html HTTP/1.1" 404 0 - -
#

import sys

def urlcheck(line, url):
    '''Checks if the url is part of the log line.'''
    lsplit = line.split()
    if len(lsplit)&lt;7:
        return False
    return url==lsplit[6]

def extract_ip(line):
    '''Extracts the IP address from the line.
       Currently it is assumed, that the IP address is logged in
       the first column and the columns are space separated.'''
    return line.split()[0]

def increase_count(ip_dict, ip_addr):
    '''Increases the count of the IP address.
       If an IP address is not in the given dictionary,
       it is initially created and the count is set to 1.'''
    if ip_addr in ip_dict:
        ip_dict[ip_addr] += 1
    else:
        ip_dict[ip_addr] = 1

def read_ips(infilename, url):
    '''Read the IP addresses from the file and store (count)
       them in a dictionary - returns the dictionary.'''
    res_dict = {}
    log_file = file(infilename)
    for line in log_file:
        if line.isspace():
            continue
        if not urlcheck(line, url):
            continue
        ip_addr = extract_ip(line)
        increase_count(res_dict, ip_addr)
    return res_dict

def write_ips(outfilename, ip_dict):
    '''Write out the count and the IP addresses.'''
    out_file = file(outfilename, "w")
    for ip_addr, count in ip_dict.iteritems():
        out_file.write("%s\t%5d\n" % (ip_addr, count))
    out_file.close()

def parse_cmd_line_args():
    '''Return the in and out file name.
       If there are more or less than two parameters,
       an error is logged in the program is exited.'''
    if len(sys.argv)!=4:
        print("Usage: %s [infilename] [outfilename] [url]" % sys.argv[0])
        sys.exit(1)
    return sys.argv[1], sys.argv[2], sys.argv[3]

def main():
    infilename, outfilename, url = parse_cmd_line_args()
    ip_dict = read_ips(infilename, url)
    write_ips(outfilename, ip_dict)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>9679836</id><snippet>match = s.match(/\\"(.*)\\"/m)
match[1] if match
</snippet></ROW><ROW><id>9679931</id><snippet>req = urllib2.Request(url)
req.headers['Range'] = 'bytes=%s-%s' % (start, end)
f = urllib2.urlopen(req)
</snippet></ROW><ROW><id>9679931</id><snippet>s = f.read()
hashlib.sha1(s).hexdigest()
</snippet></ROW><ROW><id>9680619</id><snippet>def full_clean(self):
    if self.data.get('DELETE', False):
        # skip validation for form that has DELETE
        return

    # go through the normal validation process otherwise
    return super(TravelsRelationsForm, self).full_clean()
</snippet></ROW><ROW><id>9680619</id><snippet>raise forms.ValidationError('You must have at least one title')
</snippet></ROW><ROW><id>9680784</id><snippet>import gzip
content = "Lots of content here"
f = gzip.open('/home/joe/file.txt.gz', 'wb')
f.write(content)
f.close()
</snippet></ROW><ROW><id>9680861</id><snippet>from boto.s3.connection import S3Connection
from boto.s3.key import Key
import s3config

conn    = S3Connection(s3config.passwd, s3config.secret)
bucket  = conn.get_bucket(s3config.bucket)
s3_path = '/some/path/in/your/bucket'
keys    = bucket.list(s3_path)
# or if you want all keys:
# keys   = bucket.get_all_keys()

for key in keys:
  print key
  # here you can download or do other stuff
  # with the keys like get some metadata
  print key.name
  print key.etag
  print key.size
  print key.last_modified
</snippet></ROW><ROW><id>9680861</id><snippet>#s3config.py
passwd = 'BLABALBALABALA'
secret = 'xvdwv3efefefefefef'
bucket = 'name-of-your-bucket'
</snippet></ROW><ROW><id>9680861</id><snippet>/this/string/key/looks/like/a/unix/path
/folder/images/fileA.jpg
/folder/images/fileB.jpg
/folder/images/folderX/fileX1.jpg
</snippet></ROW><ROW><id>9680861</id><snippet>bucket.list(prefix="/folder/images/")</snippet></ROW><ROW><id>9681963</id><snippet>cd /opt/local/bin 
sudo ./port install py27-numpy
</snippet></ROW><ROW><id>9682073</id><snippet>import subprocess

subprocess.call(["xdotool", "mousemove", "945", "132"])
</snippet></ROW><ROW><id>9682073</id><snippet>subprocess</snippet></ROW><ROW><id>9682131</id><snippet>from BeautifulSoup import BeautifulSoup

html = \
"""
String1 :  &lt;font style="color:#EE6564;" &gt; 
112.674448 &lt;/font&gt; handle &lt;br/&gt;

String2 :  &lt;font id="font1" style="color:#EE6564;" &gt; 
60.90402 &lt;/font&gt; handle  &lt;br/&gt;

String3 :  &lt;font style="color:#EE6564;" &gt; 
51.770428 &lt;/font&gt; handle  &lt;br/&gt;

String4 :  &lt;font style="color:#EE6564;" &gt; 
182712 &lt;/font&gt; handle  &lt;br/&gt;"""

soup = BeautifulSoup(html)

soup.findAll("font",id="font1")
</snippet></ROW><ROW><id>9682372</id><snippet>import pygame, pygame.font, pygame.event, pygame.draw, string
from pygame.locals import *

def display_box(screen, message):
    fontobject=pygame.font.SysFont('Arial', 18)
    if len(message) != 0:
        screen.blit(fontobject.render(message, 1, (255, 255, 255)),
                ((screen.get_width() / 2) - 100, (screen.get_height() / 2) - 10))
    pygame.display.flip()

def get_key():
    while True:
        event = pygame.event.poll()
        if event.type == KEYDOWN:
            return event.key

if __name__ == "__main__":
    # Graphics initialization
    full_screen = False    
    window_size = (1024, 768)
    pygame.init()      
    if full_screen:
        surf = pygame.display.set_mode(window_size, HWSURFACE | FULLSCREEN | DOUBLEBUF)
    else:
        surf = pygame.display.set_mode(window_size)

    # Create a display box
    while True:
        display_box(surf, "hello world")
        inkey = get_key()
        if inkey == K_RETURN or inkey == K_KP_ENTER:
            break
        pygame.display.flip()
</snippet></ROW><ROW><id>9682394</id><snippet>A</snippet></ROW><ROW><id>9682394</id><snippet>&gt;&gt;&gt; A = ((2, 3),)
&gt;&gt;&gt; A + ((1,4), (5,8))
((2, 3), (1, 4), (5, 8))
</snippet></ROW><ROW><id>9682793</id><snippet>BankAccount.DoesNotExist</snippet></ROW><ROW><id>9682793</id><snippet>UserProfile</snippet></ROW><ROW><id>9682793</id><snippet>BankAccount</snippet></ROW><ROW><id>9682793</id><snippet>try...except</snippet></ROW><ROW><id>9682907</id><snippet>b</snippet></ROW><ROW><id>9682907</id><snippet>a</snippet></ROW><ROW><id>9682907</id><snippet>a</snippet></ROW><ROW><id>9682907</id><snippet>b</snippet></ROW><ROW><id>9682907</id><snippet>a</snippet></ROW><ROW><id>9682907</id><snippet>b</snippet></ROW><ROW><id>9682907</id><snippet>a</snippet></ROW><ROW><id>9682907</id><snippet>b</snippet></ROW><ROW><id>9683470</id><snippet>Task</snippet></ROW><ROW><id>9683789</id><snippet>2020202020202020202020205635514d385a5856
 5VMQZ8VX (yes there's a space in front)
</snippet></ROW><ROW><id>9683789</id><snippet>            V5QM8ZXV
</snippet></ROW><ROW><id>9684025</id><snippet>@memoize
@property
    def value:
        # return if already computed =&gt; What can be done ?
        computed_value = compute()
        return computed_value
</snippet></ROW><ROW><id>9684232</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>9684232</id><snippet>sys.stdout</snippet></ROW><ROW><id>9684232</id><snippet>print()</snippet></ROW><ROW><id>9684571</id><snippet>from django.contrib import admin

from models import News, NewsLang

class NewsLangInline(admin.TabularInline):
    model = NewsLang

class NewsAdmin(admin.ModelAdmin):
    inlines = [NewsLangInline]
admin.site.register(News, NewsAdmin)
</snippet></ROW><ROW><id>9684695</id><snippet>csrf</snippet></ROW><ROW><id>9684695</id><snippet>csrf_token</snippet></ROW><ROW><id>9684695</id><snippet>html += "&lt;input type='hidden' name='csrfmiddlewaretoken' value='%' /&gt;" %csrf_string
</snippet></ROW><ROW><id>9684695</id><snippet>{% csrf_token %}
</snippet></ROW><ROW><id>9684729</id><snippet>from __future__ import print_function
import re

tests = (
    '(c) 2012 DC Comics',
    'DC Comics. 2012',
    'DC Comics, (c) 2012.',
    'DC Comics, Copyright 2012',
    '(c) 2012 10 DC Comics',
    '10 DC Comics. 2012',
    '10 DC Comics , (c) 2012.',
    '10 DC Comics, Copyright 2012',
    'Warner Bros, 2011',
    'Stanford and Sons, Ltd. Inc. (C) 2011. All Rights Reserved.',
)

for input in tests:
    print("&lt;", input)
    output = re.sub(r'''
            (?P&lt;lead&gt; (?: \S .*? \S )?? )
            [\s.,]*
            (?: (?: \( c \) | copyright ) \s+ )?
            (?P&lt;year&gt; (?:19|20)\d\d )
            [\s.,]?
        ''', r"\g&lt;year&gt;. \g&lt;lead&gt;", input, 1, re.I + re.X)
    print("&gt;", output, "\n")
</snippet></ROW><ROW><id>9684729</id><snippet>&lt; (c) 2012 DC Comics
&gt; 2012. DC Comics 

&lt; DC Comics. 2012
&gt; 2012. DC Comics 

&lt; DC Comics, (c) 2012.
&gt; 2012. DC Comics 

&lt; DC Comics, Copyright 2012
&gt; 2012. DC Comics 

&lt; (c) 2012 10 DC Comics
&gt; 2012. 10 DC Comics 

&lt; 10 DC Comics. 2012
&gt; 2012. 10 DC Comics 

&lt; 10 DC Comics , (c) 2012.
&gt; 2012. 10 DC Comics 

&lt; 10 DC Comics, Copyright 2012
&gt; 2012. 10 DC Comics 

&lt; Warner Bros, 2011
&gt; 2011. Warner Bros 

&lt; Stanford and Sons, Ltd. Inc. (C) 2011. All Rights Reserved.
&gt; 2011. Stanford and Sons, Ltd. Inc All Rights Reserved. 
</snippet></ROW><ROW><id>9684744</id><snippet>capability = webdriver.DesiredCapabilities.TestParameters['Environment']
</snippet></ROW><ROW><id>9684744</id><snippet>TestParameters</snippet></ROW><ROW><id>9684744</id><snippet>webdriver.DesiredCapabilites</snippet></ROW><ROW><id>9684744</id><snippet>TestParameters['Environment']</snippet></ROW><ROW><id>9684744</id><snippet>capabilityAttributeName = TestParameters['Environment']
capability = getattr(webdriver.DesiredCapabilities, capabilityAttributeName)
</snippet></ROW><ROW><id>9685115</id><snippet>V$SESSION</snippet></ROW><ROW><id>9685115</id><snippet>STATE</snippet></ROW><ROW><id>9685115</id><snippet>'WAITING'</snippet></ROW><ROW><id>9685115</id><snippet>'WAITED KNOWN TIME'</snippet></ROW><ROW><id>9685115</id><snippet>'WAITED SHORT TIME'</snippet></ROW><ROW><id>9685115</id><snippet>'WAITED UNKNOWN TIME'</snippet></ROW><ROW><id>9685246</id><snippet>self</snippet></ROW><ROW><id>9685246</id><snippet>readSaved()</snippet></ROW><ROW><id>9685246</id><snippet>def readSaved(self):
    # ...
</snippet></ROW><ROW><id>9685246</id><snippet>s = readSaved()
</snippet></ROW><ROW><id>9685247</id><snippet>__init__</snippet></ROW><ROW><id>9685247</id><snippet>__init__</snippet></ROW><ROW><id>9685247</id><snippet>FileInfo</snippet></ROW><ROW><id>9685247</id><snippet>__init__</snippet></ROW><ROW><id>9685247</id><snippet>UserDict</snippet></ROW><ROW><id>9685247</id><snippet>__init__</snippet></ROW><ROW><id>9685247</id><snippet>__init__</snippet></ROW><ROW><id>9685247</id><snippet>FileInfo</snippet></ROW><ROW><id>9685247</id><snippet>__init__</snippet></ROW><ROW><id>9685247</id><snippet>super</snippet></ROW><ROW><id>9685247</id><snippet>class FileInfo(UserDict):
    "store file metadata"
    def __init__(self, filename=None):
        super(UserDict, self).__init__()
        self["name"] = filename
</snippet></ROW><ROW><id>9685247</id><snippet>get_context_data</snippet></ROW><ROW><id>9685247</id><snippet>class MyView(TemplateView):
    def get_context_data(self, **kwargs):
        context = super(MyClass, self).get_context_data(**kwargs)
        context['new_key'] = self.some_custom_method()
        return kwargs
</snippet></ROW><ROW><id>9685345</id><snippet>class Crono(QtCore.QThread):
    tick = QtCore.pyqtSignal(int, name="changed") #New style signal

    def __init__(self, parent):
        QtCore.QThread.__init__(self,parent)

    def checkStatus(self):
        for x in range(1,101):
            self.tick.emit(x)                     
            time.sleep(1)
</snippet></ROW><ROW><id>9685345</id><snippet>class WTrainning(wMeta.WMeta, QtGui.QWidget):

    def __init__(self):
        super(WTrainning, self).__init__()
        self.crono = Crono()

    def createUI(self):
        #Create GUI stuff here

        #Connect signal of self.crono to a slot of self.progressBar
        self.crono.tick.connect(self.progressBar.setValue)
</snippet></ROW><ROW><id>9685345</id><snippet>valueChanged</snippet></ROW><ROW><id>9685345</id><snippet>setValue</snippet></ROW><ROW><id>9685534</id><snippet>max(d.values())</snippet></ROW><ROW><id>9685534</id><snippet>'A'</snippet></ROW><ROW><id>9685534</id><snippet>d = {'A':100, 'a':10, 'T':50, 't':5}
key_to_delete = max(d, key=lambda k: d[k])
del d[key_to_delete]
</snippet></ROW><ROW><id>9685534</id><snippet>dict</snippet></ROW><ROW><id>9685534</id><snippet>val_to_delete = max(d.values())
keys_to_delete = [k for k,v in d.iteritems() if v==val_to_delete]
for k in keys_to_delete:
    del d[k]
</snippet></ROW><ROW><id>9685581</id><snippet>import itertools
Adict = {"x": 1, "y": 2, "z":3}
Bdict = {"foo": 4, "bar": 5, "baz":6}
A,B = Adict.values(),Bdict.values()
def comp(a, b):
  return a * b # Insert complicated computation here
res = {(a,b):comp(a,b) for a,b in itertools.product(A, B)}
</snippet></ROW><ROW><id>9685846</id><snippet>id</snippet></ROW><ROW><id>9685846</id><snippet>primarykey</snippet></ROW><ROW><id>9685846</id><snippet>db.define_table('pairing', 
    Field('user', writable=True, readable=True), 
    Field('uid', writable=True, readable=True),
    primarykey=['user', 'uid'])
</snippet></ROW><ROW><id>9685846</id><snippet>IS_NOT_IN_DB</snippet></ROW><ROW><id>9685846</id><snippet>db.define_table('pairing',
    Field('user', writable=True, readable=True),
    Field('uid', writable=True, readable=True))

db.pairing.uid.requires=IS_NOT_IN_DB(db(db.pairing.user==request.vars.user),
    'pairing.uid')
</snippet></ROW><ROW><id>9685846</id><snippet>uid</snippet></ROW><ROW><id>9685846</id><snippet>user</snippet></ROW><ROW><id>9685846</id><snippet>user</snippet></ROW><ROW><id>9685846</id><snippet>user</snippet></ROW><ROW><id>9685846</id><snippet>uid</snippet></ROW><ROW><id>9685846</id><snippet>SQLFORM</snippet></ROW><ROW><id>9685846</id><snippet>.validate_and_insert()</snippet></ROW><ROW><id>9685846</id><snippet>.executesql()</snippet></ROW><ROW><id>9686038</id><snippet>int myfunc(GDALDatasetH ds);
</snippet></ROW><ROW><id>9686038</id><snippet>ctypes</snippet></ROW><ROW><id>9686038</id><snippet>_lib = C.LibraryLoader(C.CDLL).LoadLibrary(lib_path)
_myfunc = _lib.myfunc
_myfunc.argtypes = [C.c_void_p]
_myfunc.restype = C.POINTER(C.c_char)
</snippet></ROW><ROW><id>9686038</id><snippet>ds = gdal.Open(path)
...
_myfunc(C.c_void_p(long(ds.this)))
</snippet></ROW><ROW><id>9686061</id><snippet>cursor.execute("SELECT MAX(id) AS maxid FROM %s" , ("test",)) 
</snippet></ROW><ROW><id>9686061</id><snippet>cursor.execute</snippet></ROW><ROW><id>9686061</id><snippet>sql = "SELECT MAX(id) AS maxid FROM %s" % ("test", )
cursor.execute(sql)
</snippet></ROW><ROW><id>9686074</id><snippet>print eval('2 + 4')
</snippet></ROW><ROW><id>9686074</id><snippet>6
</snippet></ROW><ROW><id>9686074</id><snippet>a = 5
print eval('a + 4')
</snippet></ROW><ROW><id>9686074</id><snippet>9
</snippet></ROW><ROW><id>9686074</id><snippet>d = eval('4 + 5')
print d
</snippet></ROW><ROW><id>9686074</id><snippet>9
</snippet></ROW><ROW><id>9686074</id><snippet>def add(a, b):
    return a + b

def subtract(a, b):
    return a - b

a = 20
b = 10    
print eval('add(a, b)')
print eval('subtract(a, b)')
</snippet></ROW><ROW><id>9686074</id><snippet>30
10
</snippet></ROW><ROW><id>9686446</id><snippet>[section]</snippet></ROW><ROW><id>9686446</id><snippet>from io import StringIO

filename = 'ham.egg'
vfile = StringIO(u'[Pseudo-Sectio]\n%s'  % open(filename).read())
</snippet></ROW><ROW><id>9686722</id><snippet>from service import application</snippet></ROW><ROW><id>9686722</id><snippet>application</snippet></ROW><ROW><id>9686722</id><snippet>from service import app as application</snippet></ROW><ROW><id>9686722</id><snippet>app = Flask(__name__)</snippet></ROW><ROW><id>9686722</id><snippet>app</snippet></ROW><ROW><id>9686722</id><snippet>application</snippet></ROW><ROW><id>9686722</id><snippet>application = Flask(__name__)</snippet></ROW><ROW><id>9686722</id><snippet>service.py</snippet></ROW><ROW><id>9686722</id><snippet>service.py</snippet></ROW><ROW><id>9686722</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>9686788</id><snippet>bill_products = json.dumps([rand_products])
</snippet></ROW><ROW><id>9687050</id><snippet>----------------------------------------------------------------------
XML: nosexunit.xml
Name        Stmts   Miss  Cover   Missing
-----------------------------------------
lib             0      0   100%   
lib.blank       1      0   100%   
-----------------------------------------
TOTAL           1      0   100%   
----------------------------------------------------------------------
Ran 2 tests in 0.008s
</snippet></ROW><ROW><id>9687211</id><snippet>&gt;&gt;&gt; class A(object):
        pass

&gt;&gt;&gt; a = A()
&gt;&gt;&gt; setattr(a, 'tést', 1)
&gt;&gt;&gt; a.tést
1
</snippet></ROW><ROW><id>9687211</id><snippet>&gt;&gt;&gt; setattr(a, u'tést', 1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\xe9' in position 1: ordinal not in range(128)
</snippet></ROW><ROW><id>9687211</id><snippet>e.name != unidecode(e.name)</snippet></ROW><ROW><id>9687464</id><snippet>timeout=5000</snippet></ROW><ROW><id>9687464</id><snippet>timeout=5</snippet></ROW><ROW><id>9687464</id><snippet>mechanize</snippet></ROW><ROW><id>9687464</id><snippet>HTTPRedirectHandler.max_redirections</snippet></ROW><ROW><id>9687529</id><snippet>Stack</snippet></ROW><ROW><id>9687529</id><snippet>def flip_stack(s):
    return flip_stack_helper(s, Stack()) # Stack is your stack class

def flip_stack_helper(s, t):
    if s.is_empty():
        return t
    t.push(s.pop())
    return flip_stack_helper(s, t)
</snippet></ROW><ROW><id>9687925</id><snippet>ElementTree.iterparse()</snippet></ROW><ROW><id>9687925</id><snippet>#!/usr/bin/env python
import xml.etree.cElementTree as etree

def getelements(source, tag):
    context = iter(etree.iterparse(source, events=('start', 'end')))
    _, root = next(context) # get root element
    for event, elem in context:
        if event == 'end' and elem.tag == tag:
            yield elem
            root.clear() # free memory

for elem in getelements('big.xml', 'person'):
    print '^'.join(elem.find(tag).text for tag in 'name age address'.split())
</snippet></ROW><ROW><id>9687925</id><snippet>address</snippet></ROW><ROW><id>9687925</id><snippet>re.sub(r'\s+', ' ', text)</snippet></ROW><ROW><id>9687925</id><snippet>Tom^18^London, xxx street, xxx building
John^22^Canberra, xxx street, xxx building, xxx floor, xxx room, xxx bed
</snippet></ROW><ROW><id>9687925</id><snippet>'^'</snippet></ROW><ROW><id>9687925</id><snippet>csv</snippet></ROW><ROW><id>9688085</id><snippet>template_name</snippet></ROW><ROW><id>9688085</id><snippet>myapp/registration_form.html</snippet></ROW><ROW><id>9688085</id><snippet>registration_form.html</snippet></ROW><ROW><id>9688085</id><snippet>manage.py shell</snippet></ROW><ROW><id>9688085</id><snippet>from django.conf import settings; print settings.TEMPLATE_DIRECTORIES</snippet></ROW><ROW><id>9688424</id><snippet>result = []
for res in resource_types:
    if int(res[0]) in unwanted_resource_types:
        result.append(res[1])
</snippet></ROW><ROW><id>9688424</id><snippet>result = [item[1] for item in resource_types if int(item[0]) in unwanted_resource_types]
</snippet></ROW><ROW><id>9688443</id><snippet>## naive recursion
def div(a, b):
    if (a &gt;= b):
        return div(a - b, b) + 1
    else: return 0

try:
    print div(5678, 3)
except Exception as e:
    print e  ## maximum recursion depth exceeded


## less naive recursion with trampolines
## see https://gist.github.com/802557 for details/explanations
def trampoline(f):
    def _(*args):
        result = f(*args)
        while callable(result):
            result = result()
        return result
    return _

def div_func(a, b, acc=0):
    if (a &gt;= b):
        return lambda: div_func(a - b, b, acc + 1)
    else: return acc

div2 = trampoline(div_func)

## ok
print div2(5678, 3)
</snippet></ROW><ROW><id>9688496</id><snippet>&gt;&gt;&gt; import boto
&gt;&gt;&gt; s3 = boto.connect_s3()
&gt;&gt;&gt; bucket = s3.lookup('mybucket')
&gt;&gt;&gt; for key in bucket:
       print key.name, key.size, key.last_modified
index.html 13738 2012-03-13T03:54:07.000Z
markdown.css 5991 2012-03-06T18:32:43.000Z
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9689048</id><snippet>...
# But for some strange reason I can't figure out how to remove the odd numbers from the list
    for i in all[:]:
        if i % 2 != 0:
            all.remove(i)
...
</snippet></ROW><ROW><id>9689058</id><snippet>def timer(m):
    i = 0
    while True:
        sys.stdout.write('\r%s\b%d' % (m,i))
        sys.stdout.flush()
        sleep(1)
        sys.stdout.write('\r  \b')
        i = i + 1
</snippet></ROW><ROW><id>9689098</id><snippet>if person.id in downline_cache:
      team.append(downline_cache[person.id])
else:
      downline_cache[person.id] = results
      team.append(results)
</snippet></ROW><ROW><id>9689107</id><snippet>def summary(a,b,c,row,col,tot):
    d={0:"Small", 1:"Medium", 2:"Large", 3:"Xlarge"}
    for i in range(row):
        print d[i].ljust(6),
        for j in range(col):
            print "%6d" %(a[i][j]),
        print "%6d\n" %(b[i]),
    print "\n" ,
    for j in range(col):
        print "%6d" %(c[j]),
    print "%6d\n" %tot
</snippet></ROW><ROW><id>9689107</id><snippet>rjust()</snippet></ROW><ROW><id>9689107</id><snippet>center()</snippet></ROW><ROW><id>9689107</id><snippet>format()</snippet></ROW><ROW><id>9689202</id><snippet>binascii.a2b_qp</snippet></ROW><ROW><id>9689202</id><snippet>magic_id_str = 'x100\x88\xce\xcf\xcfOrCAD '
magic_id = binascii.a2b_qp(magic_id_str)
</snippet></ROW><ROW><id>9689202</id><snippet>&gt;&gt;&gt; a = 'Φ'  
&gt;&gt;&gt; a  
'\xce\xa6'  
&gt;&gt;&gt; binascii.b2a_qp(a)  
'=CE=A6'  
&gt;&gt;&gt; magic_text = yaml.load("""  
... magic_string: '=CE=A6'  
... """)  
&gt;&gt;&gt; magic_text  
{'magic_string': '=CE=A6'}  
&gt;&gt;&gt; binascii.a2b_qp(magic_text['magic_string'])  
'\xce\xa6'  
</snippet></ROW><ROW><id>9689251</id><snippet>hist</snippet></ROW><ROW><id>9689251</id><snippet>import matplotlib.pyplot as plt

N = {1: 12, 2: 15, 3: 8, 4: 4, 5: 1}
plt.bar(N.keys(), N.values(), align='center')
plt.show()
</snippet></ROW><ROW><id>9689381</id><snippet>class Foo(object):
    def __init__(self, testing=False):
        if testing:
            import module_test as module
        else:
            import module
        self.module = module
</snippet></ROW><ROW><id>9689381</id><snippet>class Foo(object):
    def __init__(self, module=None):
        if not module:
            import module
        self.module = module
</snippet></ROW><ROW><id>9689508</id><snippet>def addValue(linkedSet, value):

    newNode={
        'data': value,
        'next': None
    }

    # if linkedSet is None, then you can just return this newNode

    # if linkedSet isnt None...
        # if linkedSets next is None, then it should just point to this newNode 
        # (append)

        # otherwise, you should set its current next to the next of this newnode,
        # and then set its next to this newNode (insert)
</snippet></ROW><ROW><id>9689567</id><snippet>def compare_triples(a, b):
    ret=cmp(a[0], b[0])
    if ret: return ret
    ret=cmp(b[2], a[2])
    if ret: return ret
    return cmp(a[1], b[1])

for i in m: print i
print "-" * 79
m2=sorted(m, cmp=compare_triples)
for i in m2: print i
</snippet></ROW><ROW><id>9689567</id><snippet>def compare_triples(a, b):
    return cmp((a[0], b[2], a[1]), (b[0], a[2], b[1]))
</snippet></ROW><ROW><id>9689567</id><snippet>def sort_key(a):
    return a[0], -int(a[2]), a[1]

for i in sorted(m, key=sort_key): print i
</snippet></ROW><ROW><id>9689772</id><snippet>(r'^selected/(?P&lt;location&gt;\w+)/$', 'app.views.selected', name='selected_holidays'),
</snippet></ROW><ROW><id>9689772</id><snippet>{% url selected_holidays 'Europe' %}
</snippet></ROW><ROW><id>9689772</id><snippet>{% for location in locations %}
    &lt;a href="{% url selected_holidays location %}"&gt;{{ location }}&lt;/a&gt;
{% endfor %}
</snippet></ROW><ROW><id>9689772</id><snippet>from django.core import urlresolvers

class Location(models.Model):
    # ... [snip]
    def get_absolute_url(self):
        return urlresolvers.reverse('selected_holidays', args=(self.location_name,))
</snippet></ROW><ROW><id>9689772</id><snippet>{% for location in locations %}
    &lt;a href="{{ location.get_absolute_url }}"&gt;{{ location }}&lt;/a&gt;
{% endfor %}
</snippet></ROW><ROW><id>9689772</id><snippet>{% load url from future %}
</snippet></ROW><ROW><id>9689772</id><snippet>{% url 'selected_holidays' 'Europe' %}
</snippet></ROW><ROW><id>9689866</id><snippet>printf</snippet></ROW><ROW><id>9689866</id><snippet>print</snippet></ROW><ROW><id>9689866</id><snippet>cout</snippet></ROW><ROW><id>9689866</id><snippet>printf</snippet></ROW><ROW><id>9689866</id><snippet>#include &lt;cstdio&gt;
int main()
{
    int x=0;
    while(x!=1000000)
    {
        ++x;
        std::printf("%d\n", x);
    }
    return 0;
}
</snippet></ROW><ROW><id>9689866</id><snippet>++x</snippet></ROW><ROW><id>9689866</id><snippet>x++</snippet></ROW><ROW><id>9689866</id><snippet>std::printf</snippet></ROW><ROW><id>9689866</id><snippet>x</snippet></ROW><ROW><id>9690069</id><snippet>N</snippet></ROW><ROW><id>9690436</id><snippet>Exception</snippet></ROW><ROW><id>9690436</id><snippet>PyObject* createExceptionClass(const char* name, PyObject* baseTypeObj = PyExc_Exception)
{
    using std::string;
    namespace bp = boost::python;

    string scopeName = bp::extract&lt;string&gt;(bp::scope().attr("__name__"));
    string qualifiedName0 = scopeName + "." + name;
    char* qualifiedName1 = const_cast&lt;char*&gt;(qualifiedName0.c_str());

    PyObject* typeObj = PyErr_NewException(qualifiedName1, baseTypeObj, 0);
    if(!typeObj) bp::throw_error_already_set();
    bp::scope().attr(name) = bp::handle&lt;&gt;(bp::borrowed(typeObj));
    return typeObj;
}
</snippet></ROW><ROW><id>9690436</id><snippet>PyObject* myExceptionTypeObj = 0;

BOOST_PYTHON_MODULE(MyModule)
{
    ...
    myExceptionTypeObj = createExceptionClass("MyException");
    ...
}
</snippet></ROW><ROW><id>9690436</id><snippet>MyModule.MyException</snippet></ROW><ROW><id>9690436</id><snippet>PyErr_SetString(myExceptionTypeObj, "Oh my!")
</snippet></ROW><ROW><id>9690610</id><snippet>## main.py ##

class MainWindow(QtGui.QMainWindow):

    def __init__(self, *args, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)
        self.resize(640,480)
        self.central = widget.Widget()
        self.setCentralWidget(self.central)

        self.toolbar = QtGui.QToolBar()
        self.toolbar.addAction("Reload Entire Widget", self._reloadWidget)
        self.addToolBar(QtCore.Qt.TopToolBarArea, self.toolbar)

    def _reloadWidget(self):
        print "Reloading", widget
        reload(widget)
        self.central.deleteLater()
        self.central = widget.Widget()
        self.setCentralWidget(self.central)

## widget.py ##

class Widget(QtGui.QWidget):

    def __init__(self, *args, **kwargs):
        super(Widget, self).__init__(*args, **kwargs)
        self.layout = QtGui.QVBoxLayout(self)
        self.button = QtGui.QPushButton("Click")
        self.layout.addWidget(self.button)

        self.button.clicked.connect(self.testMethod)

    def testMethod(self):
        print "testmethod(): FOO"
</snippet></ROW><ROW><id>9690906</id><snippet>functions.get(filename)()</snippet></ROW><ROW><id>9690906</id><snippet>functions = {
        'app_server.php':self.app_server,
        'dcrm2nlyte.php':self.dcrm2nlyte,
        'export.php':self.export,
        'host_server.php':self.host_server,
        'spc.php':self.spc,
        'spc_approved.php':self.spc_approved,
        'spc_approved_by_dc.php':self.spc_approved_by_dc,
        'spc_by_dc.php':self.spc_by_dc,
        'spc_complete.php':self.spc_complete,
        'spc_summary.php':self.spc_summary
}
</snippet></ROW><ROW><id>9690929</id><snippet>gocr -h</snippet></ROW><ROW><id>9690929</id><snippet>require 'fileutils'
tmp = 'directory'
file = 'file.png'

`ocropus book2pages #{tmp}/out #{file}`
`ocropus pages2lines #{tmp}/out`
`ocropus lines2fsts #{tmp}/out`
`ocropus buildhtml #{tmp}/out &gt; #{tmp}/output.html`

text = File.read("#{tmp}/output.html")
FileUtils.rm_rf(tmp)
</snippet></ROW><ROW><id>9691171</id><snippet>n = n &gt; 1
</snippet></ROW><ROW><id>9691171</id><snippet>while n &gt; 0:
</snippet></ROW><ROW><id>9691426</id><snippet>execute</snippet></ROW><ROW><id>9691426</id><snippet>cursor.execute("""INSERT INTO my_stats 
                  VALUES (%s, %s);""", (time.strftime('%Y-%m-%d'), 
                                        info["countries"],))
</snippet></ROW><ROW><id>9691522</id><snippet>max((k, (i, j)) for i, lst in enumerate(T) for j, (k, _) in enumerate(lst))
</snippet></ROW><ROW><id>9691522</id><snippet>&gt;&gt;&gt; T = [[(0, ''), (-1, '&lt;'), (-2, '&lt;')], [(-1, '^'), (1, '\\'), (0, '\\')], [(-2, '^'), (5, '^'), (0, '\\')]]
&gt;&gt;&gt; max((k, (i, j)) for i, lst in enumerate(T) for j, (k, _) in enumerate(lst))
(5, (2, 1))
&gt;&gt;&gt; T[2][1]
(5, '^')
</snippet></ROW><ROW><id>9691555</id><snippet>json.dumps([(datetime.datetime(2012, 3, 13, 14, 50, 13, 996833), 'ACTIVE' [u'my.test.service', '{}'])])

TypeError: datetime.datetime(2012, 3, 13, 14, 50, 13, 996833) is not JSON serializable
</snippet></ROW><ROW><id>9691555</id><snippet>In [23]: a = "[(datetime.datetime(2012, 3, 13, 14, 50, 13, 996833), 'ACTIVE', [u'my.test.service', '{}'])]"
In [24]: eval(a)
Out[24]: [(datetime.datetime(2012, 3, 13, 14, 50, 13, 996833), 'ACTIVE', [u'my.test.service', '{}'])]
</snippet></ROW><ROW><id>9691632</id><snippet>line == '' or line == '\n'</snippet></ROW><ROW><id>9691632</id><snippet>if</snippet></ROW><ROW><id>9691632</id><snippet>'#' in line</snippet></ROW><ROW><id>9691632</id><snippet>True</snippet></ROW><ROW><id>9691632</id><snippet>if line == '' or line == '\n':</snippet></ROW><ROW><id>9691632</id><snippet>if '#' in line or not line or line == '\n':
    print line
</snippet></ROW><ROW><id>9691632</id><snippet>'\n'</snippet></ROW><ROW><id>9691632</id><snippet>line == '\t'</snippet></ROW><ROW><id>9691632</id><snippet>if '#' in line or not line.strip()</snippet></ROW><ROW><id>9691676</id><snippet>SortedDict([
    (0, 'Eternity'),
    (15, '15 minutes'),
    # ...
    (300, '300 minutes'),
])
</snippet></ROW><ROW><id>9691727</id><snippet>str</snippet></ROW><ROW><id>9691727</id><snippet>s</snippet></ROW><ROW><id>9691727</id><snippet>if not s:
  # s is the empty string
</snippet></ROW><ROW><id>9691727</id><snippet>list</snippet></ROW><ROW><id>9691727</id><snippet>set</snippet></ROW><ROW><id>9691727</id><snippet>dict</snippet></ROW><ROW><id>9691822</id><snippet>import numpy as np
from matplotlib.projections.geo import HammerAxes
import matplotlib.projections as mprojections
from matplotlib.axes import Axes
from matplotlib.patches import Wedge
import matplotlib.spines as mspines

class LowerHammerAxes(HammerAxes):
    name = 'lower_hammer'
    def cla(self):
        HammerAxes.cla(self)
        Axes.set_xlim(self, -np.pi, np.pi)
        Axes.set_ylim(self, -np.pi / 2.0, 0)

    def _gen_axes_patch(self):
        return Wedge((0.5, 0.5), 0.5, 180, 360)

    def _gen_axes_spines(self):
        path = Wedge((0, 0), 1.0, 180, 360).get_path()
        spine = mspines.Spine(self, 'circle', path)
        spine.set_patch_circle((0.5, 0.5), 0.5)
        return {'wedge':spine}

mprojections.register_projection(LowerHammerAxes)

if __name__ == '__main__':
    import matplotlib.pyplot as plt
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='lower_hammer')
    ax.grid(True)
    plt.show()
</snippet></ROW><ROW><id>9691822</id><snippet>_get_axes_spines</snippet></ROW><ROW><id>9691822</id><snippet>def _gen_axes_spines(self):
    """Return the spines for the axes."""
    # Make the path for the spines
    # We need the path, rather than the patch, thus the "get_path()"
    # The path is expected to be centered at 0,0, with radius of 1
    # It will be transformed by `Spine` when we initialize it
    path = Wedge((0, 0), 1.0, 180, 360).get_path()

    # We can fake a "wedge" spine without subclassing `Spine` by initializing 
    # it as a circular spine with the wedge path. 
    spine = mspines.Spine(self, 'circle', path)

    # This sets some attributes of the patch object. In this particular 
    # case, what it sets happens to be approriate for our "wedge spine"
    spine.set_patch_circle((0.5, 0.5), 0.5)

    # Spines in matplotlib are handled in a dict (normally, you'd have top,
    # left, right, and bottom, instead of just wedge). The name is arbitrary
    return {'wedge':spine}
</snippet></ROW><ROW><id>9691822</id><snippet>HammerAxes</snippet></ROW><ROW><id>9691822</id><snippet>HammerAxes._set_lim_and_transforms</snippet></ROW><ROW><id>9691986</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = '''
... static public Register myReg1 = new Register("D4_STAT_1", 81);
... static public Register myReg2 = new Register("D5_STAT_1", 819);
... '''
&gt;&gt;&gt; myvar = "81"
&gt;&gt;&gt; re.search('static public Register \w+ = new Register\("(\w+)", %s\);' % re.escape(str(myvar)), s).group(1)
'D4_STAT_1'
</snippet></ROW><ROW><id>9691986</id><snippet>&gt;&gt;&gt; re.search('Register\("(\w+)", %s\);' % re.escape(str(myvar)), s).group(1)
'D4_STAT_1'
</snippet></ROW><ROW><id>9692194</id><snippet>weakref</snippet></ROW><ROW><id>9692194</id><snippet>weakref.WeakValueDictionary</snippet></ROW><ROW><id>9692194</id><snippet>collections.deque</snippet></ROW><ROW><id>9692194</id><snippet>maxlen</snippet></ROW><ROW><id>9692194</id><snippet>import weakref, collections
def createLRUCache(factory, maxlen=64):
    weak = weakref.WeakValueDictionary()
    strong = collections.deque(maxlen=maxlen)

    notFound = object()
    def fetch(key):
        value = weak.get(key, notFound)
        if value is notFound:
            weak[key] = value = factory(key)
        strong.append(value)
        return value
    return fetch
</snippet></ROW><ROW><id>9692194</id><snippet>deque</snippet></ROW><ROW><id>9692194</id><snippet>maxlen</snippet></ROW><ROW><id>9692194</id><snippet>WeakValueDictionary</snippet></ROW><ROW><id>9692194</id><snippet>maxlen</snippet></ROW><ROW><id>9692194</id><snippet>class Silly(object):
    def __init__(self, v):
        self.v = v

def fib(i):
    if i &gt; 1:
        return Silly(_fibCache(i-1).v + _fibCache(i-2).v)
    elif i: return Silly(1)
    else: return Silly(0)
_fibCache = createLRUCache(fib)
</snippet></ROW><ROW><id>9692259</id><snippet>SELECT * FROM users WHERE REPLACE(username, '.', '') = 'username_without_dots'
</snippet></ROW><ROW><id>9692259</id><snippet>normalized_name = searchterm.replace('.', '')
User.objects.raw('SELECT * FROM user WHERE '
                 'REPLACE(username, '.', '') = %s', 
                 [normalized_name])
</snippet></ROW><ROW><id>9692274</id><snippet>lst[0]</snippet></ROW><ROW><id>9692312</id><snippet>watershed_ift</snippet></ROW><ROW><id>9692312</id><snippet>scipy.ndimage.label</snippet></ROW><ROW><id>9692312</id><snippet>scipy.ndimage.find_objects</snippet></ROW><ROW><id>9692312</id><snippet>import numpy as np
from scipy import ndimage
import matplotlib.pyplot as plt

def draw_circle(grid, x0, y0, radius):
    ny, nx = grid.shape
    y, x = np.ogrid[:ny, :nx]
    dist = np.hypot(x - x0, y - y0)
    grid[dist &lt; radius] = True
    return grid

# Generate 3 circles...
a = np.zeros((512, 512), dtype=np.bool)
draw_circle(a, 100, 200, 30)
draw_circle(a, 400, 350, 20)
draw_circle(a, 200, 260, 20)

# Label the objects in the array. 
labels, numobjects = ndimage.label(a)

# Now find their bounding boxes (This will be a tuple of slice objects)
# You can use each one to directly index your data. 
# E.g. a[slices[0]] gives you the original data within the bounding box of the
# first object.
slices = ndimage.find_objects(labels)

#-- Plotting... -------------------------------------
fig, ax = plt.subplots()
ax.imshow(a)
ax.set_title('Original Data')

fig, ax = plt.subplots()
ax.imshow(labels)
ax.set_title('Labeled objects')

fig, axes = plt.subplots(ncols=numobjects)
for ax, sli in zip(axes.flat, slices):
    ax.imshow(labels[sli], vmin=0, vmax=numobjects)
    tpl = 'BBox:\nymin:{0.start}, ymax:{0.stop}\nxmin:{1.start}, xmax:{1.stop}'
    ax.set_title(tpl.format(*sli))
fig.suptitle('Individual Objects')

plt.show()
</snippet></ROW><ROW><id>9692336</id><snippet>return '.'.join(self.whitetags.values_list('fieldname', flat=True))
</snippet></ROW><ROW><id>9692336</id><snippet>fieldname</snippet></ROW><ROW><id>9692602</id><snippet>while True:
    i = temp.rindex('.')
    if not i:
        break
    ...
</snippet></ROW><ROW><id>9692867</id><snippet>r = requests.post(self.loginurl, data={'csrf_token': django.middleware.csrf.get_token(), 'username':self.username, 'password': self.password}, auth=(self.username, self.password),allow_redirects=True)
</snippet></ROW><ROW><id>9692886</id><snippet>add()</snippet></ROW><ROW><id>9692886</id><snippet>subtract()</snippet></ROW><ROW><id>9692886</id><snippet>subtract()</snippet></ROW><ROW><id>9692886</id><snippet>multiply()</snippet></ROW><ROW><id>9692886</id><snippet>multiply()</snippet></ROW><ROW><id>9692886</id><snippet>divide()</snippet></ROW><ROW><id>9692958</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.random.normal(0, .001, 1000)
&gt;&gt;&gt; draws_header = ['draw%s'%(i) for i in range(1000)]
&gt;&gt;&gt; f = open('file.csv', 'w')
&gt;&gt;&gt; np.savetxt(f, np.array(draws_header)[:,None].T, fmt="%s", delimiter="\t")
&gt;&gt;&gt; np.savetxt(f, x[:,None].T, delimiter="\t")
&gt;&gt;&gt; f.close()
</snippet></ROW><ROW><id>9692970</id><snippet>target_dict=dict(zip(keys,values))</snippet></ROW><ROW><id>9692970</id><snippet>target_dict = defaultdict(list)
for i, key in enumerate(keys):
    target_dict[k].append(values[i])
</snippet></ROW><ROW><id>9692970</id><snippet>defaultdict</snippet></ROW><ROW><id>9692970</id><snippet>collections</snippet></ROW><ROW><id>9693053</id><snippet>import os</snippet></ROW><ROW><id>9693053</id><snippet>os.environ</snippet></ROW><ROW><id>9693053</id><snippet>os.environ</snippet></ROW><ROW><id>9693053</id><snippet>eval</snippet></ROW><ROW><id>9693053</id><snippet>eval `python foo.py`
</snippet></ROW><ROW><id>9693053</id><snippet>export</snippet></ROW><ROW><id>9693053</id><snippet>import os

def example():
    cn = os.environ['GIT_COMMITTER_NAME']
    cm = os.environ['GIT_COMMITTER_EMAIL']
    if cn == 'ew':
        cn = 'Eric'
        cm = 'my.email@provider.com'
    print ('export GIT_COMMITTER_NAME="%s"' % cn)
    print ('export GIT_COMMITTER_EMAIL="%s"' % cm)

example() # or if __name__ == '__main__', etc.
</snippet></ROW><ROW><id>9693179</id><snippet>dir(instance)</snippet></ROW><ROW><id>9693179</id><snippet>dir(instance.__class__)</snippet></ROW><ROW><id>9693179</id><snippet>dir()</snippet></ROW><ROW><id>9693179</id><snippet>dir()</snippet></ROW><ROW><id>9693464</id><snippet>self</snippet></ROW><ROW><id>9693464</id><snippet>class ora(connect):
    myConnect = None

    def __init__(self, connstr):    
        self.myConnect = connect.__init__(self, connstr)

    # ...
</snippet></ROW><ROW><id>9693464</id><snippet>ora</snippet></ROW><ROW><id>9693464</id><snippet>from cx_Oracle import connect

class ora:
    myConnect = None

    def __init__(self, connstr):    
        self.myConnect = connect(connstr)

    def myquery(self):
        self.myConnect.cursor()
        self.myConnect.cursor.execute("SELECT * FROM table")
        self.myConnect.cursor.close()   
</snippet></ROW><ROW><id>9693522</id><snippet>-u</snippet></ROW><ROW><id>9693522</id><snippet>-i</snippet></ROW><ROW><id>9693693</id><snippet>def myprint(times):
    print(times*"foobar")
foo = random.randint(1, 6)
myprint(foo)
</snippet></ROW><ROW><id>9693768</id><snippet>   Lsof revision 4.85 lists on its standard output file information 
   about files opened by processes for the following UNIX dialects:

        AIX 5.3
        Apple Darwin 9 and Mac OS X 10.[56]
        FreeBSD 4.9 and 6.4 for x86-based systems
        FreeBSD 8.[02] and 9.0 for AMD64-based systems
        Linux 2.1.72 and above for x86-based systems
        Solaris 9, 10 and 11
</snippet></ROW><ROW><id>9693838</id><snippet>char*</snippet></ROW><ROW><id>9693838</id><snippet>add_property</snippet></ROW><ROW><id>9693868</id><snippet>max()</snippet></ROW><ROW><id>9693868</id><snippet>&gt;&gt;&gt; max((v, k, s) for k, (s, v) in td.iteritems())
(6, 1, 'b')
</snippet></ROW><ROW><id>9693868</id><snippet>maxval, maxnum, maxstate = max((v, k, s) for k, (s, v) in td.iteritems())
</snippet></ROW><ROW><id>9693919</id><snippet>wsimport</snippet></ROW><ROW><id>9693919</id><snippet>%IDE_WORKSPACE%/your project/src</snippet></ROW><ROW><id>9693919</id><snippet>stub</snippet></ROW><ROW><id>9693919</id><snippet>wsimport -keep &lt;http://yourwsdl?wsdl&gt;</snippet></ROW><ROW><id>9693919</id><snippet>port</snippet></ROW><ROW><id>9693919</id><snippet>service</snippet></ROW><ROW><id>9693919</id><snippet>public class WsClient {

  public static void main(String[] args) {
    //Create Service
    'GeneratedFile'Service service = new 'GeneratedFile'Service();

    //create proxy
    'GeneratedFile' proxy = service.get'GeneratedFile'Port();

    //invoke
    System.out.println(proxy.yourMethod(yourParam));
  }
}
</snippet></ROW><ROW><id>9693919</id><snippet>wsimport</snippet></ROW><ROW><id>9693919</id><snippet>wsimport</snippet></ROW><ROW><id>9693919</id><snippet>wsimport</snippet></ROW><ROW><id>9693919</id><snippet>RequestFileService</snippet></ROW><ROW><id>9693919</id><snippet>RequestFileService service = new RequestFileService();</snippet></ROW><ROW><id>9693919</id><snippet>RequestFile proxy = service.getRequestFilePort();</snippet></ROW><ROW><id>9693919</id><snippet>proxy.yourMethod(yourParam);</snippet></ROW><ROW><id>9693931</id><snippet>&gt;&gt;&gt; addEmail('emails.txt', 'Mary', 'mary@gmail.com') # content is 'Mary mary@gmail.com\n'
&gt;&gt;&gt; addEmail('emails.txt', 'John', 'john@gmail.com') # content is 'Mary mary@gmail.com\nJohn john@gmail.com\n'
</snippet></ROW><ROW><id>9693931</id><snippet>f.write("%s %s\n" % (name, email))
</snippet></ROW><ROW><id>9694000</id><snippet>import sys
import xmlrpclib
import threading
import time

from SimpleXMLRPCServer import SimpleXMLRPCServer

from PyQt4 import QtCore, QtGui

class MM(object):
    def __init__(self):
        self.lock = QtCore.QMutex()
        self.xmlrpc_client = xmlrpclib.ServerProxy('http://localhost:9092')

    def __getattr__(self, name):
        self.lock.lock()
        sys.stderr.write('locked, for %s\n' % name)
        print threading.current_thread()
        result = self.xmlrpc_client.__getattr__(name)
        sys.stderr.write('unlocked by %s\n' % name)
        self.lock.unlock()
        return result

class Server(QtCore.QThread):
    def __init__(self):
        QtCore.QThread.__init__(self)
        self.server = None

    def run(self):
        self.server = SimpleXMLRPCServer(("localhost", 9092), logRequests = False)
        def one():
            return 1
        self.server.register_function(one, 'one')
        self.server.serve_forever()
        print "SERVER DONE"


class Ask(QtCore.QThread):
    def __init__(self, mmInst):
        QtCore.QThread.__init__(self)
        self.mm = mmInst
        self._stopping = False

    def run(self):
        while not self._stopping:
            time.sleep(0.5)
            print self.mm.one()

    def stop(self):
        self._stopping = True
        self.wait()


def start_gui():
    app = QtGui.QApplication(sys.argv)

    server = Server()
    server.start()

    time.sleep(.25)

    mm = MM()
    print mm.one()

    a1 = Ask(mm)
    a1.start()

    a2 = Ask(mm)
    a2.start()

    try:
        app.exec_()
    except KeyboardInterrupt:
        server.server.shutdown()


if __name__ == "__main__":
    start_gui()
</snippet></ROW><ROW><id>9694000</id><snippet>class MM(object):
    def __init__(self):
        self.xmlrpc_client = xmlrpclib.ServerProxy('http://localhost:9093')

    def __getattr__(self, name):
        return self.xmlrpc_client.__getattr__(name)


class Ask(QtCore.QThread):
    def __init__(self, mmInst, lock):
        QtCore.QThread.__init__(self)
        self.mm = mmInst
        self.lock = lock

    def run(self):
        while not self._stopping:
            time.sleep(0.5)
            self.lock.lock()
            print self.mm.one()
            self.lock.unlock()

def start_gui():
    app = QtGui.QApplication(sys.argv)

    ...

    lock = QtCore.QMutex()

    a1 = Ask(mm, lock)
    a1.start()

    a2 = Ask(mm, lock)
    a2.start()
</snippet></ROW><ROW><id>9694033</id><snippet>seed</snippet></ROW><ROW><id>9694033</id><snippet>tocrawl</snippet></ROW><ROW><id>9694033</id><snippet>tocrawl</snippet></ROW><ROW><id>9694033</id><snippet>tocrawl</snippet></ROW><ROW><id>9694033</id><snippet>list</snippet></ROW><ROW><id>9694033</id><snippet>pop</snippet></ROW><ROW><id>9694033</id><snippet>union</snippet></ROW><ROW><id>9694033</id><snippet>tocrawl</snippet></ROW><ROW><id>9694033</id><snippet>union</snippet></ROW><ROW><id>9694033</id><snippet>set</snippet></ROW><ROW><id>9694033</id><snippet>def crawl_web(seed):
    tocrawl = set([seed])
    crawled = set()
    while tocrawl:
        page = tocrawl.pop()
        if page not in crawled:
            tocrawl.update(get_all_links(get_page(page)))
            crawled.add(page)
    return crawled
</snippet></ROW><ROW><id>9694096</id><snippet>for fname in itertools.chain(*map(glob.iglob, sys.argv[1:])):
    print fname
</snippet></ROW><ROW><id>9694096</id><snippet>def allglob(args):
    return itertools.chain.from_iterable(map(glob.iglob, args))
</snippet></ROW><ROW><id>9694246</id><snippet>&gt;&gt;&gt; rgb_to_name((0, 0, 0))
'black'
</snippet></ROW><ROW><id>9694246</id><snippet>&gt;&gt;&gt; name_to_rgb('navy')
(0, 0, 128)
</snippet></ROW><ROW><id>9694246</id><snippet>webcolors</snippet></ROW><ROW><id>9694246</id><snippet>import webcolors

def closest_colour(requested_colour):
    min_colours = {}
    for key, name in webcolors.css3_hex_to_names.items():
        r_c, g_c, b_c = webcolors.hex_to_rgb(key)
        rd = (r_c - requested_colour[0]) ** 2
        gd = (g_c - requested_colour[1]) ** 2
        bd = (b_c - requested_colour[2]) ** 2
        min_colours[(rd + gd + bd)] = name
    return min_colours[min(min_colours.keys())]

def get_colour_name(requested_colour):
    try:
        closest_name = actual_name = webcolors.rgb_to_name(requested_colour)
    except ValueError:
        closest_name = closest_colour(requested_colour)
        actual_name = None
    return actual_name, closest_name

requested_colour = (119, 172, 152)
actual_name, closest_name = get_colour_name(requested_colour)

print "Actual colour name:", actual_name, ", closest colour name:", closest_name
</snippet></ROW><ROW><id>9694246</id><snippet>Actual colour name: None , closest colour name: cadetblue
</snippet></ROW><ROW><id>9694275</id><snippet>import config
AWS_KEY = config.AWS_KEY
</snippet></ROW><ROW><id>9694275</id><snippet>from config import AWS_KEY, AWS_SECRET
</snippet></ROW><ROW><id>9694275</id><snippet>import config
print config.AWS_KEY
</snippet></ROW><ROW><id>9694291</id><snippet>+=</snippet></ROW><ROW><id>9694291</id><snippet>a += [1]
</snippet></ROW><ROW><id>9694291</id><snippet>1</snippet></ROW><ROW><id>9694291</id><snippet>a</snippet></ROW><ROW><id>9694291</id><snippet>a.extend([1])
</snippet></ROW><ROW><id>9694291</id><snippet>a.append(1)</snippet></ROW><ROW><id>9694459</id><snippet>find</snippet></ROW><ROW><id>9694459</id><snippet>if</snippet></ROW><ROW><id>9694459</id><snippet>find</snippet></ROW><ROW><id>9694459</id><snippet>integer</snippet></ROW><ROW><id>9694459</id><snippet>-1</snippet></ROW><ROW><id>9694459</id><snippet>if an_integer:</snippet></ROW><ROW><id>9694459</id><snippet>if bool(an_integer):</snippet></ROW><ROW><id>9694459</id><snippet>bool(an_integer)</snippet></ROW><ROW><id>9694459</id><snippet>False</snippet></ROW><ROW><id>9694459</id><snippet>an_integer==0</snippet></ROW><ROW><id>9694459</id><snippet>True</snippet></ROW><ROW><id>9694459</id><snippet>else</snippet></ROW><ROW><id>9694459</id><snippet>if</snippet></ROW><ROW><id>9694459</id><snippet>if self.num.find(str(self.count) + ',') &gt;= 0:
</snippet></ROW><ROW><id>9694459</id><snippet>re.match</snippet></ROW><ROW><id>9694459</id><snippet>re.match</snippet></ROW><ROW><id>9694459</id><snippet>re.search</snippet></ROW><ROW><id>9694459</id><snippet>11,</snippet></ROW><ROW><id>9694459</id><snippet>1,</snippet></ROW><ROW><id>9694459</id><snippet>11,</snippet></ROW><ROW><id>9694459</id><snippet>self.num = input('Line(s) to number?').split(",")
# ...
    if str(self.count) in self.num:
    #...
</snippet></ROW><ROW><id>9694459</id><snippet>enumerate</snippet></ROW><ROW><id>9694459</id><snippet>self.count</snippet></ROW><ROW><id>9694459</id><snippet>1</snippet></ROW><ROW><id>9694459</id><snippet>enumerate</snippet></ROW><ROW><id>9694459</id><snippet>for i, element in enumerate(self.list, 1):
</snippet></ROW><ROW><id>9694459</id><snippet>i</snippet></ROW><ROW><id>9694459</id><snippet>self.count</snippet></ROW><ROW><id>9694612</id><snippet># __get__
print myobject.someattribute

# __set__
myobject.someattribute = "foo"

# __del__
del myoject.someattribute
</snippet></ROW><ROW><id>9694612</id><snippet>myobject.__dict__</snippet></ROW><ROW><id>9694751</id><snippet>{k1:datetime.now() - v1 if (k1 not in dict2 or v1 &gt; dict2[k1]) 
                      else 'Old record' 
 for k1,v1 in dict1.iteritems()}
</snippet></ROW><ROW><id>9694751</id><snippet>k1</snippet></ROW><ROW><id>9694751</id><snippet>dict2</snippet></ROW><ROW><id>9694751</id><snippet>dict1[k1] &gt; dict2[k1]</snippet></ROW><ROW><id>9694751</id><snippet>datetime.now() - dict1[k1]</snippet></ROW><ROW><id>9694758</id><snippet>&gt;&gt;&gt; a = [('650', '724', '6354', '', '', ''), ('', '', '', '650', '723', '4539')]
&gt;&gt;&gt; [tuple(y for y in x if y) for x in a]
[('650', '724', '6354'), ('650', '723', '4539')]
</snippet></ROW><ROW><id>9694758</id><snippet>[... for x in a]</snippet></ROW><ROW><id>9694758</id><snippet>...</snippet></ROW><ROW><id>9694758</id><snippet>y for y in x if y</snippet></ROW><ROW><id>9694758</id><snippet>x</snippet></ROW><ROW><id>9694758</id><snippet>y</snippet></ROW><ROW><id>9694854</id><snippet>dirs = collections.defaultdict(set)

for file_path in input:
    file_path = file_path.rjust(8, "0")
    dir, name = file_path[:-3], file_path

    dirs[dir].add(name)

for dir, files in dirs.iteritems():
    for missing_file in files - set(glob.glob("*.tif")):
        print missing_file
</snippet></ROW><ROW><id>9694878</id><snippet># Execute SQL query test_file.sql"</snippet></ROW><ROW><id>9694878</id><snippet>"SELECT test_file"</snippet></ROW><ROW><id>9694878</id><snippet>"SELECT test_file"</snippet></ROW><ROW><id>9694878</id><snippet>SELECT</snippet></ROW><ROW><id>9694878</id><snippet>SELECT</snippet></ROW><ROW><id>9694878</id><snippet>rows = curs.fetchall(); for row in rows: ...</snippet></ROW><ROW><id>9694878</id><snippet>sqlite3</snippet></ROW><ROW><id>9694878</id><snippet>results = curs.execute("SELECT * FROM table_name")
for row in results:
    print (row)
</snippet></ROW><ROW><id>9694878</id><snippet>print test_file | test_file.txt</snippet></ROW><ROW><id>9694878</id><snippet>print</snippet></ROW><ROW><id>9694878</id><snippet>'quote marks'</snippet></ROW><ROW><id>9694878</id><snippet>test_file.txt</snippet></ROW><ROW><id>9694878</id><snippet>txt</snippet></ROW><ROW><id>9694878</id><snippet>test_file</snippet></ROW><ROW><id>9694878</id><snippet>NameError</snippet></ROW><ROW><id>9694878</id><snippet>test_file</snippet></ROW><ROW><id>9694878</id><snippet>AttributeError</snippet></ROW><ROW><id>9694878</id><snippet>sqlite3</snippet></ROW><ROW><id>9694878</id><snippet>adodbapi</snippet></ROW><ROW><id>9694878</id><snippet>import sqlite3
db_conn = sqlite3.connect(":memory:") # connect to temporary database
db_conn.execute("CREATE TABLE colours ( Name TEXT, Red INT, Green INT, Blue INT )")
db_conn.execute("INSERT INTO colours VALUES (?,?,?,?)", ('gray', 128, 128, 128))
db_conn.execute("INSERT INTO colours VALUES (?,?,?,?)", ('blue', 0, 0, 255))
results = db_conn.execute("SELECT * FROM colours")
for row in results:
    print (row)
</snippet></ROW><ROW><id>9694878</id><snippet>print test_file | test_file.txt</snippet></ROW><ROW><id>9694878</id><snippet>TypeError: unsupported operand type(s) for |: 'str' and 'str'</snippet></ROW><ROW><id>9694957</id><snippet> 0 &lt;= x &lt;  5: 0
 5 &lt;= x &lt;  7: 1
 7 &lt;= x &lt; 10: 2
10 &lt;= x &lt; 18: 3
18 &lt;= x &lt; 21: 4
</snippet></ROW><ROW><id>9694957</id><snippet>[5, 7, 10, 18, 21]
</snippet></ROW><ROW><id>9695045</id><snippet>flaskext.sqlalchemy</snippet></ROW><ROW><id>9695045</id><snippet># apps.members.models
from flaskext.sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Member(db.Model):
    # fields here
    pass
</snippet></ROW><ROW><id>9695045</id><snippet>init_app</snippet></ROW><ROW><id>9695045</id><snippet># apps.application.py
from flask import Flask
from apps.members.models import db

app = Flask(__name__)
# later on
db.init_app(app)
</snippet></ROW><ROW><id>9695045</id><snippet>db</snippet></ROW><ROW><id>9695045</id><snippet># apps.shared.models
from flaskext.sqlalchemy import SQLAlchemy

db = SQLAlchemy()
</snippet></ROW><ROW><id>9695045</id><snippet># apps.members.models
from apps.shared.models import db

class Member(db.Model):
    # TODO: Implement this.
    pass
</snippet></ROW><ROW><id>9695045</id><snippet># apps.reporting.members
from flask import render_template
from apps.members.models import Member

def report_on_members():
    # TODO: Actually use arguments
    members = Member.filter(1==1).all()
    return render_template("report.html", members=members)
</snippet></ROW><ROW><id>9695045</id><snippet># apps.reporting.routes
from flask import Blueprint
from apps.reporting.members import report_on_members

reporting = Blueprint("reporting", __name__)

reporting.route("/member-report", methods=["GET","POST"])(report_on_members)
</snippet></ROW><ROW><id>9695045</id><snippet># apps.application
from flask import Flask
from apps.shared import db
from apps.reporting.routes import reporting

app = Flask(__name__)
db.init_app(app)
app.register_blueprint(reporting)
</snippet></ROW><ROW><id>9695045</id><snippet>create_app</snippet></ROW><ROW><id>9695226</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>9695226</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>9695226</id><snippet>href</snippet></ROW><ROW><id>9695226</id><snippet>False</snippet></ROW><ROW><id>9695226</id><snippet>&lt;/td&gt;</snippet></ROW><ROW><id>9695226</id><snippet>from HTMLParser import HTMLParser

class LinkExctractor(HTMLParser):

    def reset(self):
        HTMLParser.reset(self)
        self.extracting = False
        self.links      = []

    def handle_startag(self, tag, attrs):
        if tag == "td" or tag == "a":
            attrs = dict(attrs)   # save us from iterating over the attrs
        if tag == "td" and attrs.get("class", "") == "title":
            self.extracting = True
        elif tag == "a" and "href" in attrs and self.extracting:
            self.links.append(attrs["href"])

    def handle_endtag(self, tag):
        if tag == "td":
            self.extracting = False
</snippet></ROW><ROW><id>9695226</id><snippet>lxml</snippet></ROW><ROW><id>9695226</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>9695604</id><snippet>django.forms</snippet></ROW><ROW><id>9695604</id><snippet>class</snippet></ROW><ROW><id>9695604</id><snippet>__init__</snippet></ROW><ROW><id>9695604</id><snippet>class</snippet></ROW><ROW><id>9695604</id><snippet>base_fields</snippet></ROW><ROW><id>9695604</id><snippet>base_fields</snippet></ROW><ROW><id>9695604</id><snippet>fields</snippet></ROW><ROW><id>9695604</id><snippet>.</snippet></ROW><ROW><id>9695604</id><snippet>[]</snippet></ROW><ROW><id>9695604</id><snippet>__getitem__</snippet></ROW><ROW><id>9695604</id><snippet>fields</snippet></ROW><ROW><id>9695604</id><snippet>BoundField</snippet></ROW><ROW><id>9695974</id><snippet>str</snippet></ROW><ROW><id>9695974</id><snippet>b'...'</snippet></ROW><ROW><id>9696266</id><snippet>through</snippet></ROW><ROW><id>9696266</id><snippet>clean</snippet></ROW><ROW><id>9696266</id><snippet>class Listing(models.Model):
    categories = models.ManyToManyField('Category', through='CategoryListing')
    price_sale = models.DecimalField(max_digits=8, decimal_places=0, null=True)
    price_rent = models.DecimalField(max_digits=8, decimal_places=0, null=True)
    price_vacation = models.DecimalField(max_digits=8, decimal_places=0, null=True)

class Category(models.Model):
    value = models.CharField(max_length=32)

class CategoryListing(models.Model):
    category = models.ForeignKey(Category)
    listing = models.ForeignKey(Listing)

    def clean(self):
        # validation logic
</snippet></ROW><ROW><id>9696380</id><snippet>-i</snippet></ROW><ROW><id>9696380</id><snippet>def interact():
        import code
        code.InteractiveConsole(locals=globals()).interact()
</snippet></ROW><ROW><id>9696838</id><snippet>canv.showPage()</snippet></ROW><ROW><id>9696838</id><snippet>canv.drawImage(...)</snippet></ROW><ROW><id>9697097</id><snippet>#!/usr/bin/env python3</snippet></ROW><ROW><id>9697124</id><snippet>dict.get(key, default)</snippet></ROW><ROW><id>9697124</id><snippet>dict[key]</snippet></ROW><ROW><id>9697572</id><snippet>&lt;...&gt;this&lt;/...&gt;</snippet></ROW><ROW><id>9697572</id><snippet>print data.description.contents
</snippet></ROW><ROW><id>9697572</id><snippet>print data.size['units']
</snippet></ROW><ROW><id>9697572</id><snippet>for node in data.findAll(True):
  # do stuff on node
</snippet></ROW><ROW><id>9697661</id><snippet>ast</snippet></ROW><ROW><id>9698160</id><snippet>...
buttonA.Bind(wx.EVT_BUTTON ,self.methode)
buttonB.Bind(wx.EVT_BUTTON ,self.methode)
...
...
def methode(self, event)
  #get the button that was clicked 
  button = event.GetEventObject()

  print button.GetLabel()
</snippet></ROW><ROW><id>9698257</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; url = "webservice"
&gt;&gt;&gt; s = urllib2.urlopen(url)
&gt;&gt;&gt; contents = s.read()
&gt;&gt;&gt; file = open("export.xml", 'w')
&gt;&gt;&gt; file.write(contents)
&gt;&gt;&gt; file.close()
</snippet></ROW><ROW><id>9698261</id><snippet>win32api.ShellExecute()</snippet></ROW><ROW><id>9698261</id><snippet>win32print.EnumJobs()</snippet></ROW><ROW><id>9698718</id><snippet>class TothegoSitemapHomesSpider(SitemapSpider):
    handle_httpstatus_list = [404]
</snippet></ROW><ROW><id>9699317</id><snippet>engine.close_spider</snippet></ROW><ROW><id>9699317</id><snippet>def process_item(self, item, spider):
    if some_flag:
        spider.close_down = True
</snippet></ROW><ROW><id>9699317</id><snippet>def parse(self, response):
    if self.close_down:
        raise CloseSpider(reason='API usage exceeded')
</snippet></ROW><ROW><id>9699439</id><snippet>$ /usr/local/bin/python2.7 foo.py
</snippet></ROW><ROW><id>9699439</id><snippet>$ virtualenv -p python2.7 myenv
</snippet></ROW><ROW><id>9699439</id><snippet>$ source myenv/bin/activate
</snippet></ROW><ROW><id>9699833</id><snippet>def do_POST(self):
    # ... some code to get args ... and output ...
    subprocess.Popen([cmd, args])

    self.send_response(201)
    self.send_header("Content-Length", str(len(output))) # This line does the trick!
    self.end_headers()
    self.wfile.write(output)
</snippet></ROW><ROW><id>9699961</id><snippet>type(obj)</snippet></ROW><ROW><id>9699961</id><snippet>obj.__class__</snippet></ROW><ROW><id>9699961</id><snippet>instance</snippet></ROW><ROW><id>9699961</id><snippet>&gt;&gt;&gt; class A(): pass
&gt;&gt;&gt; class B(A): pass
&gt;&gt;&gt; b = B()

&gt;&gt;&gt; assert b.__class__ is B
&gt;&gt;&gt; issubclass(b.__class__, A) # same as issubclass(B, A)
True
&gt;&gt;&gt; issubclass(type(b), A)
False

&gt;&gt;&gt; type(b)
&lt;type 'instance'&gt;
&gt;&gt;&gt; b.__class__
&lt;class __main__.B at 0x10043aa10&gt;
</snippet></ROW><ROW><id>9699961</id><snippet>&gt;&gt;&gt; class NA(object): pass
&gt;&gt;&gt; class NB(NA): pass
&gt;&gt;&gt; nb = NB()
&gt;&gt;&gt; issubclass(type(nb), NA)
True
&gt;&gt;&gt; type(nb)
&lt;class '__main__.NB'&gt;
&gt;&gt;&gt; nb.__class__
&lt;class '__main__.NB'&gt;
</snippet></ROW><ROW><id>9699961</id><snippet>&gt;&gt;&gt; isinstance(A, type)
False
&gt;&gt;&gt; isinstance(NA, type)
True
</snippet></ROW><ROW><id>9699961</id><snippet>class A()</snippet></ROW><ROW><id>9699961</id><snippet>class A(object)</snippet></ROW><ROW><id>9699961</id><snippet>True</snippet></ROW><ROW><id>9700418</id><snippet>fmin_bfgs fmin_cg fmin_powell</snippet></ROW><ROW><id>9700418</id><snippet>fmin_xx( func, x0, fprime=None, epsilon=.001 ... )
</snippet></ROW><ROW><id>9700418</id><snippet>x</snippet></ROW><ROW><id>9700418</id><snippet>(func( x + epsilon I ) - func(x)) / epsilon</snippet></ROW><ROW><id>9700418</id><snippet>fmin</snippet></ROW><ROW><id>9700418</id><snippet>fmin_tnc</snippet></ROW><ROW><id>9700418</id><snippet>scipy.optimize.tnc</snippet></ROW><ROW><id>9700418</id><snippet>fmin_tnc( func, x0, approx_grad=True, epsilon=.001 ... )  or
fmin_tnc( func_and_grad, x0 ... )  # func, your own estimated gradient
</snippet></ROW><ROW><id>9700519</id><snippet>os.system()</snippet></ROW><ROW><id>9700519</id><snippet>os.system()</snippet></ROW><ROW><id>9701055</id><snippet>os.walk()</snippet></ROW><ROW><id>9701055</id><snippet>&gt;&gt;&gt; tuple = (1,2,3)
&gt;&gt;&gt; one,two,three = tuple
&gt;&gt;&gt; print one,two,three
1 2 3
</snippet></ROW><ROW><id>9701055</id><snippet>&gt;&gt;&gt; list = [(1,2),(3,4)]
&gt;&gt;&gt; for a,b in list:
...   print a, b
... 
1 2
3 4
</snippet></ROW><ROW><id>9701332</id><snippet>In [214]: l = [None,None,None]

In [215]: reduce(lambda x,y: x== y, l)
Out[215]: False

In [216]: from functional import scanl

In [217]: scanl(lambda x,y: x== y, None, l)
Out[217]: &lt;generator object _scanl at 0x0000000005770D38&gt;

In [218]: list(scanl(lambda x,y: x== y, None, l))
Out[218]: [None, True, False, False]
</snippet></ROW><ROW><id>9701332</id><snippet>scanl</snippet></ROW><ROW><id>9701332</id><snippet>None == None</snippet></ROW><ROW><id>9701332</id><snippet>True</snippet></ROW><ROW><id>9701332</id><snippet>True == None</snippet></ROW><ROW><id>9701332</id><snippet>False</snippet></ROW><ROW><id>9701332</id><snippet>False == None</snippet></ROW><ROW><id>9701332</id><snippet>False</snippet></ROW><ROW><id>9701357</id><snippet>STATE_WAIT</snippet></ROW><ROW><id>9701357</id><snippet>SO_REUSEADDR</snippet></ROW><ROW><id>9701566</id><snippet>gx</snippet></ROW><ROW><id>9701566</id><snippet>{http://www.google.com/kml/ext/2.2}</snippet></ROW><ROW><id>9701566</id><snippet>gx:</snippet></ROW><ROW><id>9701566</id><snippet>find</snippet></ROW><ROW><id>9701566</id><snippet>from xml.etree import ElementTree as et

data = '''\
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;kml xmlns="http://www.opengis.net/kml/2.2" xmlns:gx="http://www.google.com/kml/ext/2.2" xmlns:kml="http://www.opengis.net/kml/2.2" xmlns:atom="http://www.w3.org/2005/Atom"&gt;
&lt;gx:Track&gt;
&lt;when&gt;2012-03-10T05:52:38.564-08:00&lt;/when&gt;
&lt;gx:coord&gt;16.424247 48.236804 0&lt;/gx:coord&gt;
&lt;when&gt;2012-03-10T06:00:39.748-08:00&lt;/when&gt;
&lt;gx:coord&gt;16.424247 48.236804 0&lt;/gx:coord&gt;
&lt;/gx:Track&gt;
&lt;/kml&gt;
'''

kmlTree = et.fromstring(data)

track = kmlTree.find(".//{http://www.google.com/kml/ext/2.2}Track")
print(track)
</snippet></ROW><ROW><id>9701566</id><snippet>&lt;Element '{http://www.google.com/kml/ext/2.2}Track' at 0x40cca70&gt;
</snippet></ROW><ROW><id>9702180</id><snippet>class Publication(models.Model):
    pub_date = models.DateField(_('publication date'))
    # other fields

    class Meta:
        abstract = True

class Book(Publication):
    # ...

class Magazine(Publication):
    # ...
</snippet></ROW><ROW><id>9702180</id><snippet>publication_type</snippet></ROW><ROW><id>9702180</id><snippet>published_after</snippet></ROW><ROW><id>9702204</id><snippet>sheets = { }
attr = getattr(self, "dclabels", None)
if attr is not None:
    sheets["dclabels"] = attr
</snippet></ROW><ROW><id>9702204</id><snippet>try:
    sheets["dclabels"] = self.dclabels
except AttributeError:
    pass
</snippet></ROW><ROW><id>9702214</id><snippet>rgb_to_something</snippet></ROW><ROW><id>9702214</id><snippet>def rgb_to_something(pixels):
    return pixels.sum(axis=1)
</snippet></ROW><ROW><id>9702214</id><snippet>In [16]: %timeit np.array([old_rgb_to_something(rgb) for rgb in image]).reshape(shape)
1 loops, best of 3: 3.03 s per loop

In [19]: %timeit image.sum(axis=1).reshape(shape)
1 loops, best of 3: 192 ms per loop
</snippet></ROW><ROW><id>9702214</id><snippet>np.vectorize</snippet></ROW><ROW><id>9702222</id><snippet>INNER</snippet></ROW><ROW><id>9702222</id><snippet>LEFT OUTER</snippet></ROW><ROW><id>9702222</id><snippet>RIGHT OUTER</snippet></ROW><ROW><id>9702222</id><snippet>FROM</snippet></ROW><ROW><id>9702222</id><snippet>INNER JOIN</snippet></ROW><ROW><id>9702222</id><snippet>INNER JOIN</snippet></ROW><ROW><id>9702222</id><snippet>query = "SELECT Karta.id FROM Karta INNER JOIN zaznam ON (Karta.id=zaznam.karta)"
cursor.execute(query) 
</snippet></ROW><ROW><id>9702308</id><snippet>class a:
    @HTMLwrapper
    def return_stuff_as_html(self, input):
        return self.return_stuff(input)
    def return_stuff(self, input):
        return awesome_dict
</snippet></ROW><ROW><id>9702308</id><snippet>&gt;&gt;&gt; import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
</snippet></ROW><ROW><id>9702335</id><snippet>Range</snippet></ROW><ROW><id>9702335</id><snippet>req = urllib2.Request(url)
req.headers['Range'] = 'bytes=%s-%s' % (start, end)
f = urllib2.urlopen(req)
</snippet></ROW><ROW><id>9702335</id><snippet>Range</snippet></ROW><ROW><id>9703219</id><snippet>if ('class', 'content') in element_attributes:
    #do stuff
</snippet></ROW><ROW><id>9703256</id><snippet>class A(object) :
    def __init__(self, args):
        self.a = 'a'
        self.args = args

    def getattA(self):
        return self.a, self.args

class B(object) :
    b = 'b' 
    def __init__(self, args) :
        self.b_init = args

    def getattB(self):
        return self.b

C = type('C', (A,B), dict(c='c'))

instc = C('args')

print 'attributes :', instc.a,  instc.args, instc.b, instc.c
print 'methodes :', instc.getattA(), instc.getattB()

print instc.b_init
</snippet></ROW><ROW><id>9703256</id><snippet>attributes : a args b c
methodes : ('a', 'args') b
Traceback (most recent call last):
  File "D:\Documents and settings\Bureau\merge2.py", line 24, in &lt;module&gt;
    print instc.b_init
AttributeError: 'C' object has no attribute 'b_init'
</snippet></ROW><ROW><id>9703645</id><snippet>os</snippet></ROW><ROW><id>9703645</id><snippet>sys</snippet></ROW><ROW><id>9703771</id><snippet>def tile1Func():
    return "tile 1"

def tile2Func():
    return "tile 2"

tileTypes = {
    1: {
        "color": "red",
        "func": tile1Func
    },
    2: {
        "color": "green",
        "func": tile2Func
    }
}

class tile():
    def __init__(self, type):
        self.color = tileTypes[type]["color"]
        self.func = tileTypes[type]["func"]

t1 = tile(1)
print("color: " + t1.color + ", name: " + t1.func())
</snippet></ROW><ROW><id>9703794</id><snippet>fncts = f</snippet></ROW><ROW><id>9703794</id><snippet>fncts = [f]</snippet></ROW><ROW><id>9703794</id><snippet>fncts = (f,)</snippet></ROW><ROW><id>9703794</id><snippet>callable(fncts)</snippet></ROW><ROW><id>9704029</id><snippet>.profile</snippet></ROW><ROW><id>9704029</id><snippet>.profile</snippet></ROW><ROW><id>9704109</id><snippet>HTTPRedirectHandler.redirect_request()</snippet></ROW><ROW><id>9704109</id><snippet>import urllib2

class HTTPRedirectHandler(urllib2.HTTPRedirectHandler):
    def redirect_request(self, req, fp, code, msg, headers, newurl):
        newreq = urllib2.HTTPRedirectHandler.redirect_request(self,
            req, fp, code, msg, headers, newurl)
        if newreq is not None:
            self.redirections.append(newreq.get_full_url())
        return newreq

url = 'http://google.com'

h = HTTPRedirectHandler()
h.max_redirections = 100
h.redirections = [url]
opener = urllib2.build_opener(h)
response = opener.open(url)
print h.redirections
# -&gt; ['http://google.com', 'http://www.google.com/', 'http://google.com.ua/']
</snippet></ROW><ROW><id>9704109</id><snippet>WWW::Mechanize</snippet></ROW><ROW><id>9704109</id><snippet>urllib2</snippet></ROW><ROW><id>9704109</id><snippet>mechanize</snippet></ROW><ROW><id>9704109</id><snippet>urllib2</snippet></ROW><ROW><id>9704109</id><snippet>mechanize</snippet></ROW><ROW><id>9704109</id><snippet>urllib2</snippet></ROW><ROW><id>9704109</id><snippet>mechanize</snippet></ROW><ROW><id>9704371</id><snippet>HTMLParser</snippet></ROW><ROW><id>9704371</id><snippet>lxml.html</snippet></ROW><ROW><id>9704371</id><snippet>import lxml.html

def main():
    doc = lxml.html.parse("http://thisisnthappiness.com/").getroot()
    for e in doc.cssselect("div.post"):
       print e # this is an object representing the element

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>9704512</id><snippet>cur_window = the_display.get_input_focus().focus
cur_class = None
while cur_class is None:
    cur_name = cur_window.get_wm_name()
    cur_class = cur_window.get_wm_class()
    if cur_class is None:
        cur_window = cur_window.query_tree().parent
</snippet></ROW><ROW><id>9704543</id><snippet>print([[x[3] for x in y] for y in matrix])
</snippet></ROW><ROW><id>9704775</id><snippet>In [6]: np.abs(A[:,np.newaxis] - B)
Out[6]: 
array([[1, 3, 5],
       [1, 1, 3],
       [4, 2, 0]])
</snippet></ROW><ROW><id>9704775</id><snippet>In [7]: def build_matrix(func,args):
   ...:     return func(*args)
   ...: 

In [8]: def f1(A,B):
   ...:     return np.abs(A[:,np.newaxis] - B)
   ...: 

In [9]: build_matrix(f1,(A,B))
Out[9]: 
array([[1, 3, 5],
       [1, 1, 3],
       [4, 2, 0]])
</snippet></ROW><ROW><id>9705075</id><snippet>seven_up = __import__("7update")
</snippet></ROW><ROW><id>9705075</id><snippet>seven_up</snippet></ROW><ROW><id>9705458</id><snippet>user</snippet></ROW><ROW><id>9705458</id><snippet>DbSession</snippet></ROW><ROW><id>9705458</id><snippet>request.session</snippet></ROW><ROW><id>9705458</id><snippet>DbSession</snippet></ROW><ROW><id>9705458</id><snippet>request.session</snippet></ROW><ROW><id>9705458</id><snippet>DbSession</snippet></ROW><ROW><id>9705458</id><snippet>user = DbSession.merge(user)</snippet></ROW><ROW><id>9705483</id><snippet>&gt;&gt;&gt; h = hashlib.new('ripemd161')                                                                                                                     
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/hashlib.py", line 124, in __hash_new
    return __get_builtin_constructor(name)(string)
  File "/usr/lib/python2.7/hashlib.py", line 91, in __get_builtin_constructor
    raise ValueError('unsupported hash type %s' % name)
ValueError: unsupported hash type ripemd161
</snippet></ROW><ROW><id>9705639</id><snippet>cursor.execute("SELECT foo FROM bar WHERE baz = ?", (3,))
</snippet></ROW><ROW><id>9705639</id><snippet>connpool.runQuery("SELECT foo FROM bar WHERE baz = ?", (3,))
</snippet></ROW><ROW><id>9705694</id><snippet>os.devnull</snippet></ROW><ROW><id>9705694</id><snippet>NUL</snippet></ROW><ROW><id>9705694</id><snippet>with open(os.devnull, 'w') as tempf:
    proc = Popen(cmd, stdout=tempf, stderr=tempf)
    proc.communicate()
</snippet></ROW><ROW><id>9706045</id><snippet>pythonw.exe</snippet></ROW><ROW><id>9706045</id><snippet>python.exe</snippet></ROW><ROW><id>9706045</id><snippet>print</snippet></ROW><ROW><id>9706045</id><snippet>print("a")
</snippet></ROW><ROW><id>9706139</id><snippet>IP_MULTICAST_IF</snippet></ROW><ROW><id>9706139</id><snippet>sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_IF, socket.inet_aton(addr))
</snippet></ROW><ROW><id>9706187</id><snippet>continue</snippet></ROW><ROW><id>9706187</id><snippet>for file in xmlFiles:
    # ...

    try:
        # ....
    except:
        shutil.move(os.path.join(localPath,file),errorPath)
        continue  # &lt;---- Will continue at the top of the for loop
                  #       with the next file in xmlFiles
</snippet></ROW><ROW><id>9706386</id><snippet>default</snippet></ROW><ROW><id>9706386</id><snippet>select()</snippet></ROW><ROW><id>9706386</id><snippet>from sqlalchemy.sql import select, func
...
Column('version', Integer, default=select([func.max(1,
    func.max(version_table.c.old_versions))]))
</snippet></ROW><ROW><id>9706496</id><snippet>nltk.download()</snippet></ROW><ROW><id>9706496</id><snippet>sys.path</snippet></ROW><ROW><id>9706496</id><snippet>nltk.data.path</snippet></ROW><ROW><id>9706542</id><snippet>file.seek()</snippet></ROW><ROW><id>9706542</id><snippet>import os

def locateA(pattern, root):
    file  = open(pattern, 'r')
    for path, dirs, files in os.walk(root):
        for word in files:
            file.seek(0)             # this line is new
            for line in file:
                if line.strip() in word:
                    print os.path.join(path, word), line.strip()
</snippet></ROW><ROW><id>9707103</id><snippet>Image</snippet></ROW><ROW><id>9707103</id><snippet>class Image(models.Model):
    obj = models.ForeignKey(MyModel, related_name='images')
    name = models.CharField(max_length=50)
    image = models.ImageField(upload_to='images')
    created = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created']
        get_latest_by = 'created'
</snippet></ROW><ROW><id>9707103</id><snippet>my_model_instance.images.latest()
</snippet></ROW><ROW><id>9707103</id><snippet>ImageRevision</snippet></ROW><ROW><id>9707103</id><snippet>Image</snippet></ROW><ROW><id>9707103</id><snippet>class Image(models.Model):
    name = models.CharField(max_length=50)

class ImageRevision(models.Model):
    parent = models.ForeignKey(Image, related_name='revisions')
    image = models.ImageField(upload_to='images')
    created = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created']
        get_latest_by = 'created'
</snippet></ROW><ROW><id>9707103</id><snippet>my_model_instance.image.revisions.latest()
</snippet></ROW><ROW><id>9707103</id><snippet>select_related</snippet></ROW><ROW><id>9707103</id><snippet>Image</snippet></ROW><ROW><id>9707180</id><snippet>import numpy as np
import matplotlib.pyplot as plt

# make some data
x = np.linspace(0, 2*np.pi)
y1 = np.sin(x)
y2 = np.cos(x)

# plot sin(x) and cos(x)
p1 = plt.plot(x, y1, 'b-', linewidth=1.0)
p2 = plt.plot(x, y2, 'r-', linewidth=1.0)

# make a legend for both plots
leg = plt.legend([p1, p2], ['sin(x)', 'cos(x)'], loc=1)

# set the linewidth of each legend object
for legobj in leg.legendHandles:
    legobj.set_linewidth(2.0)

plt.show()
</snippet></ROW><ROW><id>9707380</id><snippet>listofnums = [int(digit) for digit in '1234567890']
multipliers = reversed(range(2,12))
multipliednums = [a*b for a,b in zip(listofnums, multipliers)]
</snippet></ROW><ROW><id>9707380</id><snippet>int</snippet></ROW><ROW><id>9707380</id><snippet>[a*b for a,b in zip(listofnums, multipliers)]</snippet></ROW><ROW><id>9707380</id><snippet>reversed</snippet></ROW><ROW><id>9707380</id><snippet>tuple</snippet></ROW><ROW><id>9707380</id><snippet>list</snippet></ROW><ROW><id>9707469</id><snippet>&gt;&gt;&gt; import operator
&gt;&gt;&gt; keyExtractor=operator.itemgetter(1) # for demonstration purposes

&gt;&gt;&gt; aList = [('a', 'foo'), ('b', 'bar'), ('q', 'quux')]
&gt;&gt;&gt; d = {keyExtractor(x):x for x in aList}
&gt;&gt;&gt; if None in d:
      del d[None]
&gt;&gt;&gt; d
{'quux': ('q', 'quux'), 'foo': ('a', 'foo'), 'bar': ('b', 'bar')}
</snippet></ROW><ROW><id>9707814</id><snippet>results = list_from_your_regex
invalids = ['info', 'server', 'noreply', ...]
valid_emails = [good for good in results if good.split('@')[0] not in invalids]
</snippet></ROW><ROW><id>9707964</id><snippet>while True:
    line1 = f.readline()
    if not line1:
        break

    line2 = f.readline()
    line3 = f.readline()
    line4 = f.readline()
    # process lines
</snippet></ROW><ROW><id>9708045</id><snippet>@task
@hosts('controller')
def run_script():
    run('/test/launch_process.sh')
    execute(check_ps, hosts=['client'])
</snippet></ROW><ROW><id>9708079</id><snippet>ListedColormap</snippet></ROW><ROW><id>9708079</id><snippet>import matplotlib.pyplot as plt
from matplotlib import colors
import numpy as np

np.random.seed(101)
zvals = np.random.rand(100, 100) * 10

# make a color map of fixed colors
cmap = colors.ListedColormap(['white', 'red'])
bounds=[0,5,10]
norm = colors.BoundaryNorm(bounds, cmap.N)

# tell imshow about color map so that only set colors are used
img = plt.imshow(zvals, interpolation='nearest', origin='lower',
                    cmap=cmap, norm=norm)

# make a color bar
plt.colorbar(img, cmap=cmap, norm=norm, boundaries=bounds, ticks=[0, 5, 10])

plt.savefig('redwhite.png')
plt.show()
</snippet></ROW><ROW><id>9708079</id><snippet>bounds</snippet></ROW><ROW><id>9708079</id><snippet>BoundaryNorm</snippet></ROW><ROW><id>9708079</id><snippet>cmap.N</snippet></ROW><ROW><id>9708095</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; arr1 = np.array(['a', 'b', 'c'])
&gt;&gt;&gt; index = np.array([2, 1, 0])
&gt;&gt;&gt; arr1[index]
array(['c', 'b', 'a'], 
      dtype='|S1')
</snippet></ROW><ROW><id>9708482</id><snippet>texts = [ "The lion (Panthera leo) ...", "Panthera ...", "..." ]
keywords  = ['cat', 'lion', 'panthera', 'family']

# gives the count of `word in text`
def matches(text):
    return sum(word in text.lower() for word in keywords)

# or inline that helper function as a lambda:
# matches = lambda text:sum(word in text.lower() for word in keywords)

# print the one with the highest count of matches
print max(texts, key=matches)
</snippet></ROW><ROW><id>9708513</id><snippet>scipy.spatial.distance</snippet></ROW><ROW><id>9708513</id><snippet>X</snippet></ROW><ROW><id>9708513</id><snippet>n</snippet></ROW><ROW><id>9708513</id><snippet>n</snippet></ROW><ROW><id>9708513</id><snippet>n</snippet></ROW><ROW><id>9708513</id><snippet>from scipy.spatial import distance
D = distance.squareform(distance.pdist(X))
</snippet></ROW><ROW><id>9708513</id><snippet>i</snippet></ROW><ROW><id>9708513</id><snippet>np.argsort(D[i])[1]
</snippet></ROW><ROW><id>9708513</id><snippet>[1]</snippet></ROW><ROW><id>9708672</id><snippet>adler32()</snippet></ROW><ROW><id>9708861</id><snippet>loc</snippet></ROW><ROW><id>9708861</id><snippet>loc</snippet></ROW><ROW><id>9708928</id><snippet>In [39]: %timeit pythonsum(10)
100000 loops, best of 3: 8.41 us per loop

In [40]: %timeit pythonsum(100)
10000 loops, best of 3: 51.9 us per loop

In [41]: %timeit pythonsum(1000)
1000 loops, best of 3: 451 us per loop

In [42]: %timeit pythonsum(10000)
100 loops, best of 3: 17.9 ms per loop

In [43]: %timeit numpysum(10)
100000 loops, best of 3: 13.4 us per loop

In [44]: %timeit numpysum(100)
100000 loops, best of 3: 17 us per loop

In [45]: %timeit numpysum(1000)
10000 loops, best of 3: 50.3 us per loop

In [46]: %timeit numpysum(10000)
1000 loops, best of 3: 385 us per loop
</snippet></ROW><ROW><id>9709131</id><snippet>for x in subgenerator:
  yield x
</snippet></ROW><ROW><id>9709131</id><snippet>throw()/send()/close()</snippet></ROW><ROW><id>9709131</id><snippet>def traverse_tree(node):
  if not node.children:
    yield node
  for child in node.children:
    yield from traverse_tree(child)
</snippet></ROW><ROW><id>9709131</id><snippet>def get_list_values(lst):
  for item in lst:
    yield int(item)
  for item in lst:
    yield str(item)
  for item in lst:
    yield float(item)
</snippet></ROW><ROW><id>9709131</id><snippet>yield from</snippet></ROW><ROW><id>9709131</id><snippet>yield from</snippet></ROW><ROW><id>9709131</id><snippet>def get_list_values(lst):
  for sub in [get_list_values_as_int, 
              get_list_values_as_str, 
              get_list_values_as_float]:
    yield from sub(lst)
</snippet></ROW><ROW><id>9709131</id><snippet>yield</snippet></ROW><ROW><id>9709131</id><snippet>__next__()</snippet></ROW><ROW><id>9709131</id><snippet>yield from</snippet></ROW><ROW><id>9709493</id><snippet>mysets = [set([0, 1, 2]),
          set([3, 2]),
          set([4, 1]),
          set([5, 6]),
          set([7, 8])]

# Require at least one set in the output.
output = [mysets.pop(0)]

while mysets:
  test = mysets.pop(0)
  for idx, other in enumerate(output):
    if test &amp; other:
      output[idx] |= test
      break
  else:
    output.append(test)

# output -&gt; [set([0, 1, 2, 3, 4]), set([5, 6]), set([8, 7])]
</snippet></ROW><ROW><id>9709600</id><snippet>&gt;&gt;&gt; import win32com.client
&gt;&gt;&gt; h = win32com.client.Dispatch('matlab.application')
</snippet></ROW><ROW><id>9709769</id><snippet>numpy.datetime64(a.astype("S8").tolist())</snippet></ROW><ROW><id>9709769</id><snippet>numpy.datetime64(a.astype("S8"))</snippet></ROW><ROW><id>9709769</id><snippet>numpy.array([numpy.datetime64(str(i)) for i in a])</snippet></ROW><ROW><id>9709828</id><snippet>mln::image2d&lt;mln::value::int_u8&gt; working_img;

mln::image2d&lt;mln::value::int_u8&gt; *imLoad(const std::string path){
    mln::io::pgm::load(working_img, path);
    return &amp;working_img;
}

void imSave(const std::string path){

    mln::io::pgm::save(working_img, path);

}
</snippet></ROW><ROW><id>9709955</id><snippet>double</snippet></ROW><ROW><id>9709955</id><snippet>float</snippet></ROW><ROW><id>9709955</id><snippet>double</snippet></ROW><ROW><id>9709955</id><snippet>float</snippet></ROW><ROW><id>9710132</id><snippet>data = ["id", "gender", -1]
</snippet></ROW><ROW><id>9710246</id><snippet>from django.db import models
from django.contrib.auth.models import User

class Profile(models.Model):
    user = models.OneToOneField(User)

    def __unicode__(self):
        return self.user.get_full_name()
</snippet></ROW><ROW><id>9710246</id><snippet>def createprofile(request):

    user_ = User.objects.get(pk=1)
    profile = Profile(user=user_)
    profile.user.first_name = 'Joe'
    profile.user.last_name = 'Soe'
    profile.user.email = 'Joe@Soe.com'
    profile.user.save() #Not sure if this is needed or not? can't remember
    profile.save()
</snippet></ROW><ROW><id>9710261</id><snippet>eval</snippet></ROW><ROW><id>9710261</id><snippet>class objectD(object):
  def __init__(self,val1,val2,val3):
    self.val1 = val1
    self.val2 = val2
    self.val3 = val3

  def __str__(self):
    return str(str(self.val1)+","+str(self.val2)+","+str(self.val3))

  def dependence(self,dependent):
    print "values val1 and val2 of "+str(self)+" now depend on "+dependent
    self.val1 = dependent.val1
    self.val2 = dependent.val2
    self.dependent = dependent

  def update(self):
    self.val1 = self.dependent.val1
    self.val2 = self.dependent.val2

#test
obj1 = objectD(350,4,500)
print obj1
obj2 = objectD(230,1,1000)
print obj2
obj2.dependence(obj1)#problem with imported class no longer occurs there
print obj2
obj1.val1 = 1315
obj1.val2 = 6464
print obj1
obj2.update()
print obj2
</snippet></ROW><ROW><id>9710261</id><snippet>dependent</snippet></ROW><ROW><id>9710261</id><snippet>obj1</snippet></ROW><ROW><id>9710261</id><snippet>update()</snippet></ROW><ROW><id>9710418</id><snippet>WSGIApplicationGroup %{GLOBAL}
</snippet></ROW><ROW><id>9710586</id><snippet>float()</snippet></ROW><ROW><id>9710586</id><snippet>divide(age, 2.)</snippet></ROW><ROW><id>9710586</id><snippet>float()</snippet></ROW><ROW><id>9710629</id><snippet>import cv</snippet></ROW><ROW><id>9710629</id><snippet>&gt;&gt;&gt; import cv 
&gt;&gt;&gt; w=500
&gt;&gt;&gt; no_of_bits=8
&gt;&gt;&gt; channels=3
&gt;&gt;&gt; h=500
&gt;&gt;&gt; image=cv.CreateImage((w,h),no_of_bits,channels) 
&gt;&gt;&gt; print image
&lt;iplimage(nChannels=3 width=500 height=500 widthStep=1500 )&gt;
</snippet></ROW><ROW><id>9710739</id><snippet>argsort().argsort()</snippet></ROW><ROW><id>9710739</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.random.random(5)
&gt;&gt;&gt; a
array([ 0.54254555,  0.4547267 ,  0.50008037,  0.20388227,  0.13725801])
&gt;&gt;&gt; a.argsort().argsort()
array([4, 2, 3, 1, 0])
</snippet></ROW><ROW><id>9710888</id><snippet>_slsqp</snippet></ROW><ROW><id>9710888</id><snippet>.so</snippet></ROW><ROW><id>9710888</id><snippet>.pyd</snippet></ROW><ROW><id>9710965</id><snippet>Key</snippet></ROW><ROW><id>9710965</id><snippet>from google.appengine.api.datastore_types import Key

user_id="agxkZXZ-emFiZXRhLTJyCgsSBFVzZXIYGAw"
datamodel.Task.all().filter('user', Key(user_id))
</snippet></ROW><ROW><id>9711006</id><snippet>socket</snippet></ROW><ROW><id>9711006</id><snippet>SocketServer</snippet></ROW><ROW><id>9711006</id><snippet>SocketServer</snippet></ROW><ROW><id>9711015</id><snippet>&amp;</snippet></ROW><ROW><id>9711015</id><snippet>&amp;</snippet></ROW><ROW><id>9711015</id><snippet>&amp;</snippet></ROW><ROW><id>9711015</id><snippet>&amp;</snippet></ROW><ROW><id>9711015</id><snippet>handle_data()</snippet></ROW><ROW><id>9711015</id><snippet>[]</snippet></ROW><ROW><id>9711015</id><snippet>handle_data()</snippet></ROW><ROW><id>9711015</id><snippet># *****</snippet></ROW><ROW><id>9711015</id><snippet>__init__()</snippet></ROW><ROW><id>9711015</id><snippet>reset()</snippet></ROW><ROW><id>9711015</id><snippet>handle_entityref()</snippet></ROW><ROW><id>9711015</id><snippet>handle_charref()</snippet></ROW><ROW><id>9711015</id><snippet>class MyHTMLParser(HTMLParser):

    def reset(self):
        HTMLParser.reset(self)
        self.pages    = []
        self.text     = []                     # *****
        self.is_li    = False
        self.num_as   = 0
        self.close_a  = False
        self.close_li = False

    def handle_starttag(self, tag, attrs):
          if tag == 'li':
              self.is_li    = True
              self.close_a  = False
              self.close_li = False

          if tag == 'a' and self.is_li:
              if self.num_as &lt; 7:
                  self.num_as += 1
                  self.close_a = False
              else:
                  self.num_as = 0
                  self.is_li = False

    def handle_endtag(self, tag):
         if tag == 'a':
             self.close_a  = True
         if tag == 'li':
             self.close_li = True
             self.num_as   = 0
             self.pages.append("".join(self.text))      # *****
             self.text = []                             # *****

    def handle_data(self, data):
        if self.is_li:
            if self.num_as == 2 and not self.close_li and not self.close_a:
                print "found data",  data
                self.text.append(data)              # *****

    def handle_charref(self, ref):
        self.handle_entityref("#" + ref)

    def handle_entityref(self, ref):
        self.handle_data(self.unescape("&amp;%s;" % ref))

    def get_pages(self):
        return self.pages
</snippet></ROW><ROW><id>9711015</id><snippet>self.pages</snippet></ROW><ROW><id>9711015</id><snippet>handle_data()</snippet></ROW><ROW><id>9711015</id><snippet>self.text</snippet></ROW><ROW><id>9711015</id><snippet>&lt;/li&gt;</snippet></ROW><ROW><id>9711015</id><snippet>&lt;/a&gt;</snippet></ROW><ROW><id>9711015</id><snippet>pages</snippet></ROW><ROW><id>9711072</id><snippet>def do_something_with_hex(c):
    r"""
    &gt;&gt;&gt; do_something_with_hex('\x00')
    '\x00'
    """
    return repr(c)
</snippet></ROW><ROW><id>9711072</id><snippet>r</snippet></ROW><ROW><id>9711236</id><snippet>variable = '12345'
idunidad = 2501
sql = ("""insert into u_%(variable)s ( id ) VALUES (%(idunidad)s)""" % dict(table_name = table_name))
try:
    cursor.execute(sql):
    db.commit()
    cursor.close()
    db.close()
except:
    cursor.execute('''create table u_%(variable)s stocks (id)''' % dict(table_name = table_name))
    cursor.execute(sql)
    db.commit()
    cursor.close()
    db.close()
</snippet></ROW><ROW><id>9711512</id><snippet>import binascii, doctest

def ascii_to_packed_hex(string_data): 
    r"""
    &gt;&gt;&gt; binascii.a2b_hex('01')
    '\x01'
    &gt;&gt;&gt; binascii.a2b_hex('0102030405')
    '\x01\x02\x03\x04\x05'
    &gt;&gt;&gt; binascii.a2b_hex('fafbfcfd')
    '\xfa\xfb\xfc\xfd'
    &gt;&gt;&gt; binascii.a2b_hex('31323334')
    '1234'
    """
    doctest.testmod()
</snippet></ROW><ROW><id>9711526</id><snippet>dict</snippet></ROW><ROW><id>9711526</id><snippet>error_codes_to_messages = {
   1: 'foo',
   2: 'bar',
   3: 'baz',
}

error_messages_to_codes = dict(
    (v,k) for k,v in error_codes_to_messages.iteritems()
)
</snippet></ROW><ROW><id>9711526</id><snippet>[]</snippet></ROW><ROW><id>9711526</id><snippet>print error_codes_to_messages[2]
print error_messages_to_codes['foo']
</snippet></ROW><ROW><id>9711698</id><snippet>import sys
import cdecimal
assert "sqlalchemy" not in sys.modules
assert "decimal" not in sys.modules
sys.modules["decimal"] = cdecimal
</snippet></ROW><ROW><id>9711705</id><snippet>$</snippet></ROW><ROW><id>9711705</id><snippet>\Z</snippet></ROW><ROW><id>9711705</id><snippet>^</snippet></ROW><ROW><id>9711705</id><snippet>match()</snippet></ROW><ROW><id>9711705</id><snippet>pattern = re.compile(r"^\d{3,4}/?\d{6}\Z")
</snippet></ROW><ROW><id>9711739</id><snippet>&gt;&gt;&gt; import cdecimal
&gt;&gt;&gt; cdecimal.Decimal(1.23)
Decimal('1.229999999999999982236431605997495353221893310546875')
&gt;&gt;&gt; cdecimal.Decimal('1.23') 
Decimal('1.23')
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9711761</id><snippet>import os
module_dir = os.path.dirname(__file__)  # get current directory
file_path = os.path.join(module_dir, 'baz.txt')
</snippet></ROW><ROW><id>9711761</id><snippet>file</snippet></ROW><ROW><id>9711865</id><snippet>profit/weight</snippet></ROW><ROW><id>9711992</id><snippet>&gt;&gt;&gt; email_pattern = re.compile("[-a-zA-Z0-9._]+@[-a-zA-Z0-9_]+.[a-zA-Z0-9_.]+")
&gt;&gt;&gt; str = "Name &lt;emailaddress@example.com&gt;"
&gt;&gt;&gt; str2 = "Another email emailexample@domain.com"
&gt;&gt;&gt; lst = ["email1@example.com", "email2@yahoo.com", "email3@mail.com", "emailaddress@example.com"]
&gt;&gt;&gt; import re
&gt;&gt;&gt; set(re.findall(email_pattern, str)).intersection(lst)
set(['emailaddress@example.com'])
&gt;&gt;&gt; set(re.findall(email_pattern, str2)).intersection(lst)
set([])
</snippet></ROW><ROW><id>9712214</id><snippet>import math
import anothermodule
import anotherothermodule
</snippet></ROW><ROW><id>9712258</id><snippet>t = (1, 3)
search_field = 'c'
search_string = '%something%'
print cursor.mogrify("""\
    select * 
    from p
    where 
        c in %%s
        and
        lower (%s) like %%s
    """ % search_field, (t, search_string))
</snippet></ROW><ROW><id>9712258</id><snippet>select * 
from p
where 
    c in (1, 3)
    and
    lower (c) like '%something%'
</snippet></ROW><ROW><id>9712271</id><snippet>read_csv</snippet></ROW><ROW><id>9712435</id><snippet>type</snippet></ROW><ROW><id>9712435</id><snippet>int</snippet></ROW><ROW><id>9712435</id><snippet>float</snippet></ROW><ROW><id>9712435</id><snippet>int("3")</snippet></ROW><ROW><id>9712435</id><snippet>if( magic_castable_test( user_input, opt.value_type ) ):
   print "Your value will work!"
else:
   print "You value will break things!"
</snippet></ROW><ROW><id>9712435</id><snippet>value = None
try:
    value = opt.value_type(value)
except:
    pass
if value is None:
    print "Your value will work!  It is", value
else:
    print "Your value will not work
</snippet></ROW><ROW><id>9712435</id><snippet>__init__</snippet></ROW><ROW><id>9712435</id><snippet>class MyClass:
    def __init__(self, s):
        # do something with string s here
</snippet></ROW><ROW><id>9712435</id><snippet>MyClass</snippet></ROW><ROW><id>9712435</id><snippet>&gt;&gt;&gt; type(4)("3")
3
&gt;&gt;&gt; type(type(4)("3"))
&lt;type 'int'&gt;
</snippet></ROW><ROW><id>9712487</id><snippet>table[1]</snippet></ROW><ROW><id>9712487</id><snippet>[0]*1</snippet></ROW><ROW><id>9712487</id><snippet>[0]</snippet></ROW><ROW><id>9712487</id><snippet>table[1][1]</snippet></ROW><ROW><id>9712487</id><snippet>0</snippet></ROW><ROW><id>9712487</id><snippet>array[1]</snippet></ROW><ROW><id>9712487</id><snippet>[0]</snippet></ROW><ROW><id>9712487</id><snippet>array1[1] + table[1][1]</snippet></ROW><ROW><id>9712487</id><snippet>[0] + 0</snippet></ROW><ROW><id>9712487</id><snippet>print(array1[1])
print(table[1][1])
</snippet></ROW><ROW><id>9712508</id><snippet>l=[[100], [500], [300]]
result=[item for sublist in l for item in sublist]
</snippet></ROW><ROW><id>9712508</id><snippet>def flatten(seq, list = None):
    """flatten(seq, list = None) -&gt; list

    Return a flat version of the iterator `seq` appended to `list`
    """
    if list == None:
        list = []
    try:                          # Can `seq` be iterated over?
        for item in seq:          # If so then iterate over `seq`
            flatten(item, list)      # and make the same check on each item.
    except TypeError:             # If seq isn't iterable
        list.append(seq)             # append it to the new list.
    return list
</snippet></ROW><ROW><id>9712534</id><snippet>def getName(x):
    return x["name"]
</snippet></ROW><ROW><id>9712534</id><snippet>None</snippet></ROW><ROW><id>9712534</id><snippet>getName = lambda x: x["name"]</snippet></ROW><ROW><id>9712548</id><snippet>&gt;&gt;&gt; reduce(lambda x,  y: x*int(y),  ['2',  '3',  '4'])
'222222222222'
</snippet></ROW><ROW><id>9712548</id><snippet>'2' * 3</snippet></ROW><ROW><id>9712548</id><snippet>3</snippet></ROW><ROW><id>9712548</id><snippet>'222'</snippet></ROW><ROW><id>9712548</id><snippet>'222' * 4</snippet></ROW><ROW><id>9712548</id><snippet>'222222222222'</snippet></ROW><ROW><id>9712548</id><snippet>x</snippet></ROW><ROW><id>9712548</id><snippet>int(x)</snippet></ROW><ROW><id>9712548</id><snippet>&gt;&gt;&gt; reduce(lambda x, y: x * y, map(int, ['2', '3', '4']))
24
</snippet></ROW><ROW><id>9712581</id><snippet>isinstance</snippet></ROW><ROW><id>9712581</id><snippet>def foo(bar, baz="A baz", qux=0):
    return "(%r, %r, %r)" % (bar, baz, qux)

foo(5)
(5, 'A baz', 0)
foo(5, qux=2)
(5, 'A baz', 2)
</snippet></ROW><ROW><id>9712581</id><snippet>__name__</snippet></ROW><ROW><id>9712870</id><snippet>QThread</snippet></ROW><ROW><id>9712870</id><snippet>QThread</snippet></ROW><ROW><id>9712870</id><snippet>QObject</snippet></ROW><ROW><id>9712870</id><snippet>class SignalReceiver(QtCore.QObject):
    def __init__(self):
        self.eventLoop = QEventLoop(self)             

    @PySide.QtCore.Slot(str)
    def stop_waiting(self, text):                   
        self.text = text
        eventLoop.exit()

    def wait_for_input(self):
        eventLoop.exec()
        return self.text

class MainWindow(...):
     ...
     def __init__(self):
        ...
        self.helper_signal.connect(self.worker.signalReceiver.stop_waiting)

class WorkerThread(PySide.QtCore.QThread): 
    def __init__(self):
        self.signalReceiver = SignalReceiver() 
        # After the following call the slots will be executed in the thread             
        self.signalReceiver.moveToThread(self)    

    def get(self,  *args, **kwargs):
        result = requests.get(*args, **kwargs)
        while result.history:
            ...
            self.result = self.signalReceiver.wait_for_input()   
</snippet></ROW><ROW><id>9712928</id><snippet>Django Project (one)  &lt;-----&gt;&gt;  (many) Django Application
</snippet></ROW><ROW><id>9712928</id><snippet>/Project/
  __init__.py
  manage.py
  settings.py
  urls.py

  App1/
    __init__.py
    forms.py
    models.py
    views.py
    templates/App1/
      template1.html
      template2.html

  App2/
    ...
</snippet></ROW><ROW><id>9712928</id><snippet>from Project.App1.models import someModel</snippet></ROW><ROW><id>9712956</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>9712956</id><snippet>input</snippet></ROW><ROW><id>9712956</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; howfarforward = int(input("How far forward would you like to count?: "))
How far forward would you like to count?: 4
&gt;&gt;&gt; day = datetime.date.today()
&gt;&gt;&gt; day = day + datetime.timedelta(days=howfarforward)
&gt;&gt;&gt; day
datetime.date(2012, 3, 18)
</snippet></ROW><ROW><id>9712975</id><snippet>if request.method == "POST":
</snippet></ROW><ROW><id>9712975</id><snippet>from formencode import Schema, validators

class RegistrationForm(Schema):
    email = validators.Email(not_empty=True, strip=True)
    password = validators.UnicodeString(not_empty=True)
    password_confirm = validators.UnicodeString()
    chained_validators = [validators.FieldsMatch(
                    'password', 'password_confirm',
                    messages=dict(invalidNoMatch=u'Password does not match'))]
</snippet></ROW><ROW><id>9712975</id><snippet>from pyramid_simpleform import Form
from pyramid_simpleform.renderers import FormRenderer
from pyramid.view import view_config
from pyramid.httpexceptions import HTTPFound
from pyramid.url import route_url
from ..forms import RegistrationForm
from ..models import DBSession, User

@view_config(route_name='accounts_register', renderer='/accounts/register.mako',
            request_method='GET')
def register(request):
    """Shows the empty form."""
    form = Form(request, schema=RegistrationForm)
    return {'renderer': FormRenderer(form)}

@view_config(route_name='accounts_register', renderer='/accounts/register.mako',
            request_method='POST')
def register_post(request):
    """Receives the posted form."""
    form = Form(request, schema=RegistrationForm)
    if form.validate():
        user = User(form.data['email'], form.data['password'])
        DBSession.add(user)
        return HTTPFound(route_url('profile', request))
    return {'renderer': FormRenderer(form)}
</snippet></ROW><ROW><id>9712975</id><snippet>&lt;form action="" method="post"&gt;
  &lt;div class="${' error' if renderer.is_error('email') else ''}"&gt;
    &lt;label for="email"&gt;Email&lt;/label&gt;
    ${renderer.text('email', type='email', placeholder='Email')}
    % if renderer.is_error('email'):
      &lt;span class="errors"&gt;${', '.join(renderer.errors_for('email'))}&lt;/span&gt;
    % endif
  &lt;/div&gt;    
  &lt;!-- ... ---&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>9712988</id><snippet>bar = None</snippet></ROW><ROW><id>9712988</id><snippet>None</snippet></ROW><ROW><id>9713042</id><snippet>from prettytable import PrettyTable
x = PrettyTable(dat.dtype.names)
for row in dat:
    x.add_row(row)
# Change some column alignments; default was 'c'
x.align['column_one'] = 'r'
x.align['col_two'] = 'r'
x.align['column_3'] = 'l'
</snippet></ROW><ROW><id>9713042</id><snippet>border</snippet></ROW><ROW><id>9713042</id><snippet>&gt;&gt;&gt; print(x)
+------------+---------+-------------+
| column_one | col_two |   column_3  |
+------------+---------+-------------+
|          0 |  0.0001 | ABCD        |
|          1 |  1e-005 | ABCD        |
|          2 |  1e-006 | long string |
|          3 |  1e-007 | ABCD        |
+------------+---------+-------------+
&gt;&gt;&gt; print(x.get_string(border=False))
 column_one  col_two    column_3  
          0   0.0001  ABCD        
          1   1e-005  ABCD        
          2   1e-006  long string 
          3   1e-007  ABCD        
</snippet></ROW><ROW><id>9713281</id><snippet>a</snippet></ROW><ROW><id>9713281</id><snippet># foo.py
class Foo(object):
    def __init__(self):
        self.a = {}
        print self.a
        self.filla()
    def filla(self):
        for i in range(10):
            self.a[str(i)] = i
</snippet></ROW><ROW><id>9713447</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import datetime

from matplotlib.finance import candlestick
from matplotlib.dates import num2date

# data in a text file, 5 columns: time, opening, close, high, low
# note that I'm using the time you formated into an ordinal float
data = np.loadtxt('finance-data.txt', delimiter=',')

# determine number of days and create a list of those days
ndays = np.unique(np.trunc(data[:,0]), return_index=True)
xdays =  []
for n in np.arange(len(ndays[0])):
    xdays.append(datetime.date.isoformat(num2date(data[ndays[1],0][n])))

# creation of new data by replacing the time array with equally spaced values.
# this will allow to remove the gap between the days, when plotting the data
data2 = np.hstack([np.arange(data[:,0].size)[:, np.newaxis], data[:,1:]])

# plot the data
fig = plt.figure(figsize=(10, 5))
ax = fig.add_axes([0.1, 0.2, 0.85, 0.7])
    # customization of the axis
ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none')
ax.xaxis.set_ticks_position('bottom')
ax.yaxis.set_ticks_position('left')
ax.tick_params(axis='both', direction='out', width=2, length=8,
               labelsize=12, pad=8)
ax.spines['left'].set_linewidth(2)
ax.spines['bottom'].set_linewidth(2)
    # set the ticks of the x axis only when starting a new day
ax.set_xticks(data2[ndays[1],0])
ax.set_xticklabels(xdays, rotation=45, horizontalalignment='right')

ax.set_ylabel('Quote ($)', size=20)
ax.set_ylim([177, 196])

candlestick(ax, data2, width=0.5, colorup='g', colordown='r')

plt.show()
</snippet></ROW><ROW><id>9713984</id><snippet>&gt; '1 + 1 == 2' == True
False
&gt; eval('1 + 1 == 2') == True
True
</snippet></ROW><ROW><id>9713984</id><snippet>==</snippet></ROW><ROW><id>9713984</id><snippet>=</snippet></ROW><ROW><id>9713984</id><snippet>eq7 = eq6.replace('=', '==')
if eval(eq7) == True:
    print 'test1'
    print eq7
else:
    print 'oops1'
    print eq7
</snippet></ROW><ROW><id>9713984</id><snippet>solve('x + 2 = 10')
</snippet></ROW><ROW><id>9713984</id><snippet>x + 2 -( 10)
x - 2 -( 10)
(-12+1j)
oops1
12 + 2 == 10
</snippet></ROW><ROW><id>9714095</id><snippet>lxml</snippet></ROW><ROW><id>9714095</id><snippet>tds</snippet></ROW><ROW><id>9714242</id><snippet>Avoid extraneous whitespace in the following situations:

- Immediately inside parentheses, brackets or braces.

  Yes: spam(ham[1], {eggs: 2})
  No:  spam( ham[ 1 ], { eggs: 2 } )
</snippet></ROW><ROW><id>9714338</id><snippet>%token NAME NUMBER TEXT

%%

config_file : assignments
            | /* empty */
            ;

assignments : assignment
            | assignments assignment
            ;

assignment : NAME '=' values comma_opt

comma_opt : ',' | /* empty */;

values : value
       | values ',' value
       ;

value : NUMBER | TEXT ;
</snippet></ROW><ROW><id>9714338</id><snippet>y.output</snippet></ROW><ROW><id>9714338</id><snippet>foo = 1, 2, 3, bar = 4, 5, 6 xyzzy = 7 answer = 42
</snippet></ROW><ROW><id>9714338</id><snippet>comma_opt</snippet></ROW><ROW><id>9714338</id><snippet>comma_opt</snippet></ROW><ROW><id>9714338</id><snippet>NAME</snippet></ROW><ROW><id>9714338</id><snippet>NAME</snippet></ROW><ROW><id>9714727</id><snippet>Pygame.KEYDOWN</snippet></ROW><ROW><id>9714750</id><snippet>import sys
sys.path.append("/home/username/google_search")
</snippet></ROW><ROW><id>9714750</id><snippet>home/
    username/
        google_search/
            BeautifulSoup.py
            browser.py
            googlesets.py
            search.py
            sponsoredlinks.py
            translate.py
</snippet></ROW><ROW><id>9714750</id><snippet>&gt;&gt;&gt; import search
&gt;&gt;&gt; search.hey_look_we_are_calling_a_search_function()
</snippet></ROW><ROW><id>9714750</id><snippet>.bashrc</snippet></ROW><ROW><id>9714750</id><snippet>.profile</snippet></ROW><ROW><id>9714750</id><snippet>export PYTHONPATH=$PYTHONPATH:$HOME/google_search
</snippet></ROW><ROW><id>9714867</id><snippet>__hash__</snippet></ROW><ROW><id>9714867</id><snippet>tuple</snippet></ROW><ROW><id>9715124</id><snippet>import re
print re.sub(r'^[a-zA-Z]:\\.+(\\Data.+)', r'D:\\folder\1', r'C:\Some\Path\Data\File.txt')
</snippet></ROW><ROW><id>9715272</id><snippet>for k,v in x1.iteritems():
    try:
        eval(x1[k]['2010'],x)
    except NameError:
       continue
</snippet></ROW><ROW><id>9715804</id><snippet>.vimrc</snippet></ROW><ROW><id>9715804</id><snippet>:compiler python</snippet></ROW><ROW><id>9715804</id><snippet>:help compiler</snippet></ROW><ROW><id>9715804</id><snippet>ftdetect</snippet></ROW><ROW><id>9715804</id><snippet>:compiler</snippet></ROW><ROW><id>9715804</id><snippet>:autocmd</snippet></ROW><ROW><id>9715804</id><snippet>:compiler</snippet></ROW><ROW><id>9715804</id><snippet>:help filetype</snippet></ROW><ROW><id>9715804</id><snippet>make</snippet></ROW><ROW><id>9715804</id><snippet>.c</snippet></ROW><ROW><id>9715804</id><snippet>.h</snippet></ROW><ROW><id>9715804</id><snippet>.ini</snippet></ROW><ROW><id>9715989</id><snippet>b""</snippet></ROW><ROW><id>9715989</id><snippet>.encode()</snippet></ROW><ROW><id>9716148</id><snippet>while 1: data = conn.recv(1024) ...</snippet></ROW><ROW><id>9716148</id><snippet>run()</snippet></ROW><ROW><id>9716487</id><snippet>zip</snippet></ROW><ROW><id>9716487</id><snippet>if myiterwatch: ...</snippet></ROW><ROW><id>9716487</id><snippet>class IterWatch(object):
    def __init__(self, it):
        self.iter = iter(it)
        self._pending = []
    @property
    def pending(self):
        try:
            if not self._pending:
                # will raise StopIteration if exhausted
                self._pending.append(next(self.iter))
        except StopIteration:
            pass # swallow this
        return self._pending
    def next(self):
        try:
            return self.pending.pop(0)
        except IndexError:
            raise StopIteration
    __next__ = next # for Py3
    def __iter__(self): return self
    def __nonzero__(self):
        # returns True if we have data.
        return not not self.pending
        # or maybe bool(self.pending)
    __bool__ = __nonzero__ # for Py3
</snippet></ROW><ROW><id>9716487</id><snippet>guard = object()
result = return_generator()
if next(result, guard) is not guard:
    print 'Yes, the generator did generate something!'
</snippet></ROW><ROW><id>9716487</id><snippet>next(a, b)</snippet></ROW><ROW><id>9716487</id><snippet>b</snippet></ROW><ROW><id>9716487</id><snippet>a</snippet></ROW><ROW><id>9716487</id><snippet>zip()</snippet></ROW><ROW><id>9716558</id><snippet>MatchTemplate</snippet></ROW><ROW><id>9716558</id><snippet>minVal,maxVal,minLoc,maxLoc = cv.MinMaxLoc(result)
</snippet></ROW><ROW><id>9716558</id><snippet>minLoc</snippet></ROW><ROW><id>9716558</id><snippet>minVal</snippet></ROW><ROW><id>9716558</id><snippet>minVal</snippet></ROW><ROW><id>9717242</id><snippet>&gt;&gt;&gt; import ipaddress
&gt;&gt;&gt; ipaddress.ip_address('192.0.43.10') in ipaddress.ip_network('192.0.0.0/16')
True
</snippet></ROW><ROW><id>9717242</id><snippet>&gt;&gt;&gt; import ipaddr
&gt;&gt;&gt; ipaddr.IPAddress('192.0.43.10') in ipaddr.IPNetwork('192.0.0.0/16')
True
</snippet></ROW><ROW><id>9717242</id><snippet>n = ipaddress.ip_network('192.0.0.0/16')
netw = n.network_address.packed 
mask = n.netmask.packed
</snippet></ROW><ROW><id>9717242</id><snippet>a = ipaddress.ip_adress('192.0.43.10').packed
a = socket.inet_pton(socket.AF_INET, '192.0.43.10')
a = socket.inet_aton('192.0.43.10')  # IPv4 only
</snippet></ROW><ROW><id>9717242</id><snippet>in_network = (a and mask) == netw
</snippet></ROW><ROW><id>9717595</id><snippet>os.path.join()</snippet></ROW><ROW><id>9717595</id><snippet>root_folder = 'C:/Users/Robert/Videos/YouTube/Playlists/$s'
</snippet></ROW><ROW><id>9717595</id><snippet>%s</snippet></ROW><ROW><id>9717595</id><snippet>$s</snippet></ROW><ROW><id>9717595</id><snippet>%s</snippet></ROW><ROW><id>9717595</id><snippet>os.path.join()</snippet></ROW><ROW><id>9717595</id><snippet>root_folder = 'C:/Users/Robert/Videos/YouTube/Playlists'
</snippet></ROW><ROW><id>9717595</id><snippet>root_folder = 'C:\\Users\\Robert\\Videos\\YouTube\\Playlists'
</snippet></ROW><ROW><id>9717595</id><snippet>root_folder = r'C:\Users\Robert\Videos\YouTube\Playlists'
</snippet></ROW><ROW><id>9717595</id><snippet>my_path = os.path.join(root_folder, p[0])
if not os.path.exists(my_path):
    # ...
</snippet></ROW><ROW><id>9717595</id><snippet>os.path.join()</snippet></ROW><ROW><id>9717595</id><snippet>os.path.join("c:", "foo")</snippet></ROW><ROW><id>9717595</id><snippet>C:</snippet></ROW><ROW><id>9717595</id><snippet>c:foo</snippet></ROW><ROW><id>9717595</id><snippet>c:\foo</snippet></ROW><ROW><id>9717595</id><snippet>&gt;&gt;&gt; os.path.join('C', 'users')
'C\\users'
&gt;&gt;&gt; os.path.join('C:','users')
'C:users'
</snippet></ROW><ROW><id>9717595</id><snippet>&gt;&gt;&gt; os.path.join('C:/', 'users')
'C:\\users'
&gt;&gt;&gt; os.path.join(r'C:\', 'users')
'C:\\users'
</snippet></ROW><ROW><id>9717619</id><snippet>g:pep8_ignore</snippet></ROW><ROW><id>9717619</id><snippet>let g:pep8_ignore="E501,W601"
</snippet></ROW><ROW><id>9717982</id><snippet>#!/usr/bin/python
</snippet></ROW><ROW><id>9717982</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>9718217</id><snippet>from media.videofactory import VideoFactory
</snippet></ROW><ROW><id>9718217</id><snippet>from media.videofactory import *
</snippet></ROW><ROW><id>9718316</id><snippet>def grade(i):
    if i&lt;40: return "Fail"
    if i&gt;75: return "A++"
    if i&gt;50: return "A"
</snippet></ROW><ROW><id>9718316</id><snippet>li = map(lambda x: "{0} - {1}".format(x, grade(x)), s)
</snippet></ROW><ROW><id>9718316</id><snippet>for i in li: print i

# output

50 - None
62 - A
15 - Fail
76 - A++
57 - A
97 - A++
82 - A++
99 - A++
45 - None
23 - Fail
</snippet></ROW><ROW><id>9718575</id><snippet>yield</snippet></ROW><ROW><id>9718575</id><snippet>def tupleToDict(listOfList):
    yield getItems(listofList)
    for nestedList in listOfList:
        for el in getAllNestedItems(nestedList):
            yield el
</snippet></ROW><ROW><id>9718575</id><snippet>yield from</snippet></ROW><ROW><id>9718575</id><snippet>def tupleToDict(listOfList):
    q = [listOfList]
    while q:
        l = q.pop()
        yield getItems(l)
        for nestedList in listOfList:
            q += getAllNestedItems(nestedList)
</snippet></ROW><ROW><id>9718651</id><snippet>&gt;&gt;&gt; from urlparse import urljoin
&gt;&gt;&gt; urljoin('http://mysite.com/foo/bar/x.html', '../../images/img.png')
'http://mysite.com/images/img.png'
</snippet></ROW><ROW><id>9718713</id><snippet>:set ts=8</snippet></ROW><ROW><id>9718713</id><snippet>:set hlsearch</snippet></ROW><ROW><id>9718713</id><snippet>/\t</snippet></ROW><ROW><id>9718713</id><snippet>:set ts=n</snippet></ROW><ROW><id>9718713</id><snippet>n</snippet></ROW><ROW><id>9718713</id><snippet>:set et</snippet></ROW><ROW><id>9718713</id><snippet>:retab</snippet></ROW><ROW><id>9718836</id><snippet>python -m unittest discover
</snippet></ROW><ROW><id>9718836</id><snippet>python -m unittest -h
</snippet></ROW><ROW><id>9718836</id><snippet>unit2.py discover
</snippet></ROW><ROW><id>9718836</id><snippet>from XXX import *</snippet></ROW><ROW><id>9718836</id><snippet>XXX/__init__.py</snippet></ROW><ROW><id>9718836</id><snippet>__init__.py</snippet></ROW><ROW><id>9718836</id><snippet>import os

all_files = os.listdir(os.path.dirname(__file__))
modules = [x for x in all_files if x.endswith(".py") and not x.startswith("_")]
__all__ = [x.rpartition(".")[0] for x in modules]
</snippet></ROW><ROW><id>9718836</id><snippet>__all__</snippet></ROW><ROW><id>9719083</id><snippet>item[1]</snippet></ROW><ROW><id>9719083</id><snippet>dst</snippet></ROW><ROW><id>9719083</id><snippet>item</snippet></ROW><ROW><id>9719083</id><snippet>dst</snippet></ROW><ROW><id>9719083</id><snippet>item == 'Grass'</snippet></ROW><ROW><id>9719083</id><snippet>dst = item[1]+"/"+src</snippet></ROW><ROW><id>9719083</id><snippet>item[1] == 'r'</snippet></ROW><ROW><id>9719286</id><snippet>from django.contrib.sitemaps.views import sitemap

def locale_sitemaps(request):
    # assuming you make a "sitemaps" dict here of {language_code: sitemap}
    return sitemap(request, sitemaps=sitemaps[request.LANGUAGE_CODE])
</snippet></ROW><ROW><id>9719286</id><snippet>url(r'^sitemap.xml/$', 'views.locale_sitemaps', name='sitemap')
</snippet></ROW><ROW><id>9719731</id><snippet>super()</snippet></ROW><ROW><id>9719731</id><snippet>&gt;&gt;&gt; class OldStyle: pass
&gt;&gt;&gt; instance = OldStyle()
&gt;&gt;&gt; issubclass(instance.__class__, object)
False
</snippet></ROW><ROW><id>9719731</id><snippet>&gt;&gt;&gt; isinstance(instance, object)
True
</snippet></ROW><ROW><id>9719731</id><snippet>&gt;&gt;&gt; issubclass(OldStyle, object)  # OldStyle is not a new-style class
False
&gt;&gt;&gt; issubclass(int, object)  # int is a new-style class
True
</snippet></ROW><ROW><id>9719731</id><snippet>OldStyle().__class__</snippet></ROW><ROW><id>9719731</id><snippet>OldStyle</snippet></ROW><ROW><id>9719731</id><snippet>object</snippet></ROW><ROW><id>9719731</id><snippet>type(OldStyle())</snippet></ROW><ROW><id>9719731</id><snippet>instance</snippet></ROW><ROW><id>9719731</id><snippet>object</snippet></ROW><ROW><id>9719731</id><snippet>instance</snippet></ROW><ROW><id>9719731</id><snippet>OldStyle()</snippet></ROW><ROW><id>9719731</id><snippet>object</snippet></ROW><ROW><id>9719731</id><snippet>type()</snippet></ROW><ROW><id>9719731</id><snippet>object</snippet></ROW><ROW><id>9719731</id><snippet>object</snippet></ROW><ROW><id>9719731</id><snippet>instance</snippet></ROW><ROW><id>9719731</id><snippet>&gt;&gt;&gt; type(OldStyle)  # OldStyle creates objects but is not itself a type
classobj
&gt;&gt;&gt; type(int)  # A new-style class is a type
type
</snippet></ROW><ROW><id>9720418</id><snippet>sys.stdin</snippet></ROW><ROW><id>9720418</id><snippet>StringIO</snippet></ROW><ROW><id>9720423</id><snippet>&lt;xsl:stylesheet version="1.0"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
 &lt;xsl:output encoding="ISO-8859-1"/&gt;
 &lt;xsl:strip-space elements="*"/&gt;

 &lt;xsl:template match="node()|@*"&gt;
     &lt;xsl:copy&gt;
       &lt;xsl:apply-templates select="node()|@*"/&gt;
     &lt;/xsl:copy&gt;
 &lt;/xsl:template&gt;

 &lt;xsl:template match="cd/title[not(position() = last())]"/&gt;
&lt;/xsl:stylesheet&gt;
</snippet></ROW><ROW><id>9720423</id><snippet>&lt;catalog&gt;
    &lt;cd&gt;
        &lt;artist&gt;Bob Dylan&lt;/artist&gt;
    &lt;/cd&gt;
    &lt;cd&gt;
        &lt;title&gt;Hide your heart&lt;/title&gt;
    &lt;/cd&gt;
    &lt;cd&gt;
        &lt;title&gt;old_value&lt;/title&gt;
        &lt;title&gt;inbetween_value&lt;/title&gt;
        &lt;title&gt;new_value&lt;/title&gt;
    &lt;/cd&gt;
&lt;/catalog&gt;
</snippet></ROW><ROW><id>9720423</id><snippet>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;catalog&gt;
   &lt;cd&gt;
      &lt;artist&gt;Bob Dylan&lt;/artist&gt;
   &lt;/cd&gt;
   &lt;cd&gt;
      &lt;title&gt;Hide your heart&lt;/title&gt;
   &lt;/cd&gt;
   &lt;cd&gt;
      &lt;title&gt;new_value&lt;/title&gt;
   &lt;/cd&gt;
&lt;/catalog&gt;
</snippet></ROW><ROW><id>9720624</id><snippet>#!/usr/bin/python2.7 -tt
# coding: utf-8
import pyGnuplot
from datetime import datetime
out_file = 'test.png'
out_file_str = 'set out "'+out_file+'"'

#example of chart with options and data
data = (('10-02-2012 18:00:36', '33.547'),
        ('10-02-2012 18:01:06', '23.962'),
        ('10-02-2012 18:04:06', '18.071'),
        ('10-02-2012 18:35:36', '13.513'),
        ('10-02-2012 18:47:06', '23.869'),
        ('10-02-2012 18:51:06', '13.988'),
        ('10-02-2012 18:56:06', '5.869'),
        ('10-02-2012 18:56:36', '3.811'),
        ('10-02-2012 18:59:36', '4.01'))

ytics = 10

#When str(datatime.datatime), the format is %Y-%m-%d %H:%M:%S, so that
# is the format pyGnuplot uses by default -- Of course the format you use
# to create datetime objects is up to you.
start_range = '"2012-02-10 18:00:00"'
end_range = '"2012-02-10 19:00:00"'
xrange = ( start_range, end_range)
# yrange = ( 0, 50 )

tvals,yvals=zip(*data)
tvals=[datetime.strptime(i, '%d-%m-%Y %H:%M:%S') for i in tvals]
print str(tvals[0])
print tvals
print yvals
g = pyGnuplot.gnuplot(debug=1)
g('set xdata time')
g('set timefmt "%Y-%d-%m %H:%M:%S"')  #Default datatime output format.
set_xformat = 'set format x "%H:%M\\n%d.%m"'
g(set_xformat)
set_yformat = 'set format y "%.0f"'
g(set_yformat)
set_yticformat = 'set ytics format "%.0f"'
g(set_yticformat)
g('set ytics out nomirror')
g('set grid xtics ytics mxtics mytics')
g('set xtics axis out scale 1.0,0.1 nomirror')
g('set key out horiz')
g('set key center')
g('set key bmargin')
set_ytics = 'set ytics ' + str(ytics)
g(set_ytics)
y_range = (0, 100)
plt=g.plot(yvals,xvals=tvals,u="1:3")
plt.xrange(xrange)
plt.yrange(y_range)

g.show(plt)  #Show the plot in the gnuplot default terminal
g.hardcopy(plt,file='myfile.png',size='780,464',truecolor=True) #Make a hardcopy
print g.readlines()  #Get any script error messages from gnuplot
</snippet></ROW><ROW><id>9720721</id><snippet>class MyModelAdmin(admin.ModelAdmin):
    list_select_related = True
    # ....
</snippet></ROW><ROW><id>9720733</id><snippet>with open("d:/aaa.csv", "rb") as input_file:
    reader = csv.DictReader(input_file)
    for row in reader:
        row = {k: converters[k](v) for k, v in row.items()}
        print row
</snippet></ROW><ROW><id>9720733</id><snippet>dict()</snippet></ROW><ROW><id>9720733</id><snippet>yield row</snippet></ROW><ROW><id>9720733</id><snippet>print row</snippet></ROW><ROW><id>9721008</id><snippet>nonlocal</snippet></ROW><ROW><id>9721008</id><snippet>def enclosing_function():
    def factorial(n):
        if n &lt; 2:
            return 1
        return n * factorial(n - 1)  # fails with NameError
    print factorial(5)
</snippet></ROW><ROW><id>9721008</id><snippet>def make_scoreboard(frame, score=0):
    label = Label(frame)
    label.pack()
    for i in [-10, -1, 1, 10]:
        def increment(step=i):
            score = score + step  # fails with UnboundLocalError
            label['text'] = score
        button = Button(frame, text='%+d' % i, command=increment)
        button.pack()
    return label
</snippet></ROW><ROW><id>9721602</id><snippet>{% load %}</snippet></ROW><ROW><id>9721602</id><snippet>get_latest</snippet></ROW><ROW><id>9721602</id><snippet>my_tags.py</snippet></ROW><ROW><id>9721602</id><snippet>{% load my_tags %}
</snippet></ROW><ROW><id>9721602</id><snippet>{% get_latest gallery.screenshots 5 as recent_screens %}
</snippet></ROW><ROW><id>9721622</id><snippet>virtualenv -p path_to_python26_executable desired_path_to_new_virtualenv
</snippet></ROW><ROW><id>9721622</id><snippet>virtualenv --help</snippet></ROW><ROW><id>9721622</id><snippet>-p PYTHON_EXE, --python=PYTHON_EXE
                    The Python interpreter to use, e.g.,
                    --python=python2.5 will use the python2.5 interpreter
                    to create the new environment.  The default is the
                    interpreter that virtualenv was installed with
                    (/usr/bin/python)
</snippet></ROW><ROW><id>9721873</id><snippet>a[tuple(k)]
</snippet></ROW><ROW><id>9721873</id><snippet>&gt;&gt;&gt; a = numpy.array([[1,2],[3,4]])
&gt;&gt;&gt; i = numpy.array([(0,1),(1,0)])
&gt;&gt;&gt; k = i[0] + i[1]
&gt;&gt;&gt; a[tuple(k)]
4
</snippet></ROW><ROW><id>9721955</id><snippet>setup.py</snippet></ROW><ROW><id>9721955</id><snippet>python setup.py build_mpkg
</snippet></ROW><ROW><id>9721957</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = numpy.ones((2,4))
&gt;&gt;&gt; a
array([[ 1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.]])
&gt;&gt;&gt; a.tolist()
[[1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0]]
&gt;&gt;&gt; type(a.tolist())
&lt;type 'list'&gt;
&gt;&gt;&gt; type(a.tolist()[0])
&lt;type 'list'&gt;
</snippet></ROW><ROW><id>9722195</id><snippet>route_url</snippet></ROW><ROW><id>9722195</id><snippet>route_path</snippet></ROW><ROW><id>9722222</id><snippet>__new__</snippet></ROW><ROW><id>9722222</id><snippet>__init__</snippet></ROW><ROW><id>9722222</id><snippet>class Test(object):
    def __init__(self, value):
        self.value = value
    def __new__(cls, value):
        if value &gt; 1:
            return object.__new__(cls)
        return None
    def __repr__(self):
        return "Test value %d" % self.value


t1 = Test(2)
print repr(t1)
t2 = Test(1)
print repr(t2)
</snippet></ROW><ROW><id>9722222</id><snippet>__new__</snippet></ROW><ROW><id>9722222</id><snippet>if value &lt; 1:
    foo = None
else:
    foo = Test(value)
</snippet></ROW><ROW><id>9722222</id><snippet>foo = Test(value)  # will None if value &lt;= 1
</snippet></ROW><ROW><id>9722222</id><snippet>new_object</snippet></ROW><ROW><id>9722222</id><snippet>def maybe_foo(value):
    if value &gt; 1:
        return new_object(value)
    return None
</snippet></ROW><ROW><id>9722353</id><snippet>normpath()</snippet></ROW><ROW><id>9722353</id><snippet>os.path</snippet></ROW><ROW><id>9722353</id><snippet>".."</snippet></ROW><ROW><id>9722353</id><snippet>base = '/Users/paganotti/Documents/Project/simple/work/paga/'
rel = '../test.txt'

print os.path.normpath(os.path.join(base, rel))
</snippet></ROW><ROW><id>9722372</id><snippet>*</snippet></ROW><ROW><id>9722372</id><snippet>**</snippet></ROW><ROW><id>9722678</id><snippet>isinstance(self,DBAdminConnection)</snippet></ROW><ROW><id>9722678</id><snippet>app = web.application(urls, globals(), autoreload=False)
</snippet></ROW><ROW><id>9722806</id><snippet>ModelForm</snippet></ROW><ROW><id>9722806</id><snippet>class ChartAdminForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super(ChartAdminForm, self).__init__(*args, **kwargs)
        if self.instance.module_id:
            self.fields['parent'].queryset = self.fields['parent'].queryset.filter(module=self.instance.module)

class ChartAdmin(admin.ModelAdmin):
    form = ChartAdminForm
    ...
</snippet></ROW><ROW><id>9723067</id><snippet>f.seek(0)
</snippet></ROW><ROW><id>9723067</id><snippet>uniqueify(f)</snippet></ROW><ROW><id>9723245</id><snippet>try-except</snippet></ROW><ROW><id>9723245</id><snippet>def canSetAttr(o):
    try:
         name = 'probablynotset'
         flag = hasattr(o, name)
         if flag:
             old = getattr(o, name)
         setattr(o, name, 'x')
         if flag:
             setattr(o, name, old)
         else:
             delattr(o, name)

         return True
     except AttributeError:
         return False
</snippet></ROW><ROW><id>9723703</id><snippet>CELERY_RESULT_BACKEND = 'mongodb'
BROKER_HOST = "subdomain.mongolab.com"
BROKER_PORT = 123456
BROKER_TRANSPORT = 'mongodb'
BROKER_VHOST = 'testdb'
CELERY_IMPORTS = ('tasks',)
CELERY_MONGODB_BACKEND_SETTINGS = { 
       'host': 'subdomain.mongolab.com',
       'port': 123456,
       'database': 'testdb',
       'user': user,
       'password': password,
       'taskmeta_collection': 'teskmeta'
       }   
</snippet></ROW><ROW><id>9723926</id><snippet>total = float(sum(v for k,v in example))
example_dict = {}
for k,v in example:
     example_dict[k] = example_dict.get(k, 0) + v * 100 / total
</snippet></ROW><ROW><id>9724230</id><snippet>MyModel</snippet></ROW><ROW><id>9724230</id><snippet>ManagedItem</snippet></ROW><ROW><id>9724230</id><snippet>Meta</snippet></ROW><ROW><id>9724230</id><snippet>class MyModel(SansHashUrl, models.Model):
    class Meta:
        abstract = True
</snippet></ROW><ROW><id>9724413</id><snippet>extend</snippet></ROW><ROW><id>9724413</id><snippet>None</snippet></ROW><ROW><id>9724413</id><snippet>None</snippet></ROW><ROW><id>9724413</id><snippet>sort</snippet></ROW><ROW><id>9724413</id><snippet>None</snippet></ROW><ROW><id>9724413</id><snippet>sorted</snippet></ROW><ROW><id>9724566</id><snippet>Popen</snippet></ROW><ROW><id>9724566</id><snippet>subprocess</snippet></ROW><ROW><id>9724566</id><snippet>.communicate()</snippet></ROW><ROW><id>9724566</id><snippet>select()</snippet></ROW><ROW><id>9724566</id><snippet>select</snippet></ROW><ROW><id>9724566</id><snippet>select()</snippet></ROW><ROW><id>9724723</id><snippet>from random import randrange
cats = [1,2,3,4]
i = randrange(len(cats))

for c in cats[i:]+cats[:i]:
   pass
</snippet></ROW><ROW><id>9724723</id><snippet>choice</snippet></ROW><ROW><id>9724723</id><snippet>randrange</snippet></ROW><ROW><id>9724940</id><snippet>class IMAP4_SSL_CA_CHECKER(IMAP4_SSL):
    def open(self, host = '', port = IMAP4_SSL_PORT, ca_certs = None):
        self.host = host
        self.port = port
        self.sock = socket.create_connection((host, port))
        self.sslobj = ssl.wrap_socket(self.sock, self.keyfile, 
                          self.certificate, ca_certs=ca_certs)
        self.file = self.sslobj.makefile('rb')
</snippet></ROW><ROW><id>9725047</id><snippet>max_value = max(x[0] for x in A)
print [x for x in A if x[0] == max_value]
</snippet></ROW><ROW><id>9725093</id><snippet> &gt;&gt;&gt; import datetime
 &gt;&gt;&gt; today = datetime.date.today()
 &gt;&gt;&gt; first = datetime.date(day=1, month=today.month, year=today.year)
 &gt;&gt;&gt; lastMonth = first - datetime.timedelta(days=1)
 &gt;&gt;&gt; print lastMonth.strftime("%Y%m")
 201202
 &gt;&gt;&gt;
</snippet></ROW><ROW><id>9725094</id><snippet>d = { 'm': [1,2,3] }</snippet></ROW><ROW><id>9725094</id><snippet>d</snippet></ROW><ROW><id>9725094</id><snippet>m = d['m']</snippet></ROW><ROW><id>9725094</id><snippet>m</snippet></ROW><ROW><id>9725094</id><snippet>m = m[1:]</snippet></ROW><ROW><id>9725094</id><snippet>m</snippet></ROW><ROW><id>9725094</id><snippet>m</snippet></ROW><ROW><id>9725094</id><snippet>m</snippet></ROW><ROW><id>9725094</id><snippet>m = d['m']
for i, item in enumerate(m):
    result = do_something_with(item)
    m[i] = result
</snippet></ROW><ROW><id>9725589</id><snippet>random.choice</snippet></ROW><ROW><id>9725589</id><snippet>print(random.choice(word1), "the", random.choice(word2), random.choice(word3))
</snippet></ROW><ROW><id>9725628</id><snippet>def my_facebook_api(input):
    if input=='A':
        return 'X'
    elif input=='B':
        return 'D'

facebook_api =  Mock(side_effect=my_facebook_api)
</snippet></ROW><ROW><id>9725826</id><snippet>from suds.transport import Transport
import httplib2, StringIO

class Httplib2Response:
    pass
class Httplib2Transport(Transport):

    def __init__(self, **kwargs):
        Transport.__init__(self)
        self.http = httplib2.Http()

    def send(self, request):
        url = request.url
        message = request.message
        headers = request.headers
        headers['User-Agent']='XYZ'
        response = Httplib2Response()
        response.headers, response.message = self.http.request(url,
                "PUT", body=message, headers=headers)

        return response

    def open(self, request):
        response = Httplib2Response()
        request.headers['User-Agent']='XYZ'

        response.headers, response.message = self.http.request(request.url, "GET",
            body=request.message, headers=request.headers)
        return StringIO.StringIO(response.message)
</snippet></ROW><ROW><id>9725826</id><snippet>http = Httplib2Transport()
client = Client(url,transport=http)
</snippet></ROW><ROW><id>9725989</id><snippet>s.sendmail(FROM, TO, "the answer is " + str(x))
</snippet></ROW><ROW><id>9725989</id><snippet>x</snippet></ROW><ROW><id>9725989</id><snippet>str(x)</snippet></ROW><ROW><id>9725989</id><snippet>str(x)</snippet></ROW><ROW><id>9725989</id><snippet>"the answer is "</snippet></ROW><ROW><id>9725989</id><snippet>+</snippet></ROW><ROW><id>9726052</id><snippet>#Create Employee entity
employee = Employee()
employee.put()

#Set Employee as Address entity 's parent directly...
address = Address(parent=employee)

# ...or using its key
e_key = employee.key()
address = Address(parent=e_key)

# Save Address entity to datastore
address.put()​
</snippet></ROW><ROW><id>9726287</id><snippet>ax.figure.canvas</snippet></ROW><ROW><id>9726287</id><snippet>import matplotlib.pyplot as plt
ax = plt.gca()

canvas = ax.figure.canvas 
</snippet></ROW><ROW><id>9726347</id><snippet>xticks()</snippet></ROW><ROW><id>9726347</id><snippet>show()</snippet></ROW><ROW><id>9726347</id><snippet>plt.xticks(range(25))
</snippet></ROW><ROW><id>9726360</id><snippet>&gt;&gt;&gt; some_operation((a and b) and c)
(a and b), c
</snippet></ROW><ROW><id>9726435</id><snippet>import matlplotlib
matplotlib.use('TkAgg')
</snippet></ROW><ROW><id>9726578</id><snippet>24/10</snippet></ROW><ROW><id>9726578</id><snippet>ceil</snippet></ROW><ROW><id>9726578</id><snippet>print(int(math.ceil(24.0/10)))
</snippet></ROW><ROW><id>9726645</id><snippet>sys.modules</snippet></ROW><ROW><id>9726645</id><snippet>sys.modules</snippet></ROW><ROW><id>9727005</id><snippet>len()</snippet></ROW><ROW><id>9727005</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; data = [{'key': 11, 'country': 'USA'},{'key': 21, 'country': 'Canada'},{'key': 12, 'country': 'USA'}]
&gt;&gt;&gt; result = collections.defaultdict(dict)
&gt;&gt;&gt; for item in data:
...     country = item['country']
...     result[country][len(result[country])] = {'key': item['key']}
... 
&gt;&gt;&gt; dict(result)
{'Canada': {0: {'key': 21}}, 'USA': {0: {'key': 11}, 1: {'key': 12}}}
</snippet></ROW><ROW><id>9727418</id><snippet>sys.path</snippet></ROW><ROW><id>9727418</id><snippet>import sys; print sys.path</snippet></ROW><ROW><id>9727418</id><snippet>zlib</snippet></ROW><ROW><id>9727418</id><snippet>sys.path</snippet></ROW><ROW><id>9727418</id><snippet>&gt;&gt;&gt; import zlib
&gt;&gt;&gt; zlib
&lt;module 'zlib' from '/usr/local/lib/python2.7/lib-dynload/zlib.so'&gt;
</snippet></ROW><ROW><id>9727423</id><snippet>User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.79 Safari/535.11
</snippet></ROW><ROW><id>9727510</id><snippet>from scipy import linalg as la
sw=[[0.0112962962962963, 0.00675925925925926],[0.00675925925925926, 0.007962962962962963]]
sb=[[0.0530787037037037, 0.01657407407407407],[0.01657407407407407, 0.004606481481481482]]
print la.eig(sb)
</snippet></ROW><ROW><id>9727510</id><snippet>(array([ 0.05820394+0.j, -0.00051876+0.j]), array([[ 0.95536449, -0.29542969],
   [ 0.29542969,  0.95536449]]))
</snippet></ROW><ROW><id>9727510</id><snippet>scipy</snippet></ROW><ROW><id>9727510</id><snippet>eigh</snippet></ROW><ROW><id>9727750</id><snippet>ListView</snippet></ROW><ROW><id>9727750</id><snippet>Locations</snippet></ROW><ROW><id>9727750</id><snippet>Category</snippet></ROW><ROW><id>9727750</id><snippet>DetailView</snippet></ROW><ROW><id>9727750</id><snippet>Category</snippet></ROW><ROW><id>9727750</id><snippet>Locations</snippet></ROW><ROW><id>9727750</id><snippet>class CategoryLocationsView(DetailView):
    model = Category
    context_object_name = 'category'

    def get_context_data(self, **kwargs):
        context = super(CategoryLocationsView, self).get_context_data(**kwargs)
        context['location_list'] = self.get_object().location_set.all()
        return context
</snippet></ROW><ROW><id>9728326</id><snippet>self.setStyleSheet("QLabel {font-size : 400px; color : blue; background-image: url('tmp/test.jpg');}");
</snippet></ROW><ROW><id>9728406</id><snippet>class Shape(object):
    def __init__(self, x=None, y=None):
        self.x = x
        self.y = y

class Circle(Shape):
    def __init__(self, r=None, **kwargs):
        super(Circle, self).__init__(**kwargs)
        self.r = r
</snippet></ROW><ROW><id>9728406</id><snippet>**kwargs</snippet></ROW><ROW><id>9728478</id><snippet>import os

def list_files(startpath):
    for root, dirs, files in os.walk(startpath):
        level = root.replace(startpath, '').count(os.sep)
        indent = ' ' * 4 * (level)
        print('{}{}/'.format(indent, os.path.basename(root)))
        subindent = ' ' * 4 * (level + 1)
        for f in files:
            print('{}{}'.format(subindent, f))
</snippet></ROW><ROW><id>9728710</id><snippet>mook = npc(mook) 
mook.iq = (char_iq)
mook.pp = (char_PP)
mook.melee = (npc_Melees)
mook.ct = (combat_time)
</snippet></ROW><ROW><id>9728710</id><snippet>mookprint = npc(mookprint)
print mookprint.name
print mookprint.ct 
</snippet></ROW><ROW><id>9729067</id><snippet>for i in range(1,9):
    with open(inputgui, 'r') as input1:
        junkinfo = [next(input1) for dummy in range(22)]

        newOutput = output[:-4] + str(i) + output[-4:]

        with open(newOutput, 'w') as output1:
            for line in input1:
                columns = line.strip().split()
                output1.write('{:8}{:8}\n'.format(columns[1], columns[i+1]))
</snippet></ROW><ROW><id>9729298</id><snippet>name, view, id, *tokens = k
</snippet></ROW><ROW><id>9729298</id><snippet>(name, view, id), tokens = k[:3], k[3:]
</snippet></ROW><ROW><id>9729384</id><snippet>inner_a.columnconfigure(1, weight=1)</snippet></ROW><ROW><id>9729384</id><snippet>inner_b</snippet></ROW><ROW><id>9729482</id><snippet>f.read()</snippet></ROW><ROW><id>9729482</id><snippet>f.seek(0)</snippet></ROW><ROW><id>9729808</id><snippet>&gt;&gt;&gt; dc = ["hello", "world", "foo"]
&gt;&gt;&gt; lines = ["This is", "an example of hello", "line in the world of strings", "Testing"]
&gt;&gt;&gt; [word for word in dc if any(word in line for line in lines)]
['hello', 'world']
</snippet></ROW><ROW><id>9729837</id><snippet>&gt;&gt;&gt; import win32com.client
&gt;&gt;&gt; xl = win32com.client.Dispatch("Excel.Application")
&gt;&gt;&gt; xl.Visible = 1
&gt;&gt;&gt; wb = xl.Workbooks.Open(r'&lt;full path of excel spreadsheet&gt;')
&gt;&gt;&gt; sheet = wb.ActiveSheet
&gt;&gt;&gt; sheet.Range("A1").AddComment()
&lt;COMObject AddComment&gt;
&gt;&gt;&gt; sheet.Range("A1").Comment.Visible = True
&gt;&gt;&gt; sheet.Range("A1").Comment.Text("Hello World")
u'Hello World'
&gt;&gt;&gt; wb.SaveAs(r'&lt;full path of modified spreadsheet&gt;')
&gt;&gt;&gt; wb.Close()
&gt;&gt;&gt; xl.Quit()
</snippet></ROW><ROW><id>9729932</id><snippet>date()</snippet></ROW><ROW><id>9729932</id><snippet>time.strftime()</snippet></ROW><ROW><id>9729932</id><snippet>date</snippet></ROW><ROW><id>9729932</id><snippet>gmdate</snippet></ROW><ROW><id>9729932</id><snippet>$time = $status['updated_time'];
$time = strtotime($time);
$time = gmdate("Y-m-d H:i:s", $time);
</snippet></ROW><ROW><id>9729939</id><snippet>argparse</snippet></ROW><ROW><id>9729939</id><snippet>add_subparser()</snippet></ROW><ROW><id>9729939</id><snippet>&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; subparsers = parser.add_subparsers()
&gt;&gt;&gt; checkout = subparsers.add_parser('checkout', aliases=['co'])
&gt;&gt;&gt; checkout.add_argument('foo')
&gt;&gt;&gt; parser.parse_args(['checkout', 'bar'])
Namespace(foo='bar')
</snippet></ROW><ROW><id>9729939</id><snippet>help</snippet></ROW><ROW><id>9729939</id><snippet>-h</snippet></ROW><ROW><id>9729939</id><snippet>--help</snippet></ROW><ROW><id>9729939</id><snippet>$ ./MyApp.py branch --help
</snippet></ROW><ROW><id>9729939</id><snippet>--help</snippet></ROW><ROW><id>9729939</id><snippet>&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; subparsers = parser.add_subparsers(description='Sub description')
&gt;&gt;&gt; checkout = subparsers.add_parser('checkout', description='Checkout description')
&gt;&gt;&gt; checkout.add_argument('foo', help='This is the foo help')
&gt;&gt;&gt; parser.parse_args(['checkout', '--help'])
usage:  checkout [-h] foo

Checkout description

positional arguments:
  foo         This is the foo help

optional arguments:
  -h, --help  show this help message and exit
</snippet></ROW><ROW><id>9729939</id><snippet>help</snippet></ROW><ROW><id>9729939</id><snippet>--help</snippet></ROW><ROW><id>9730066</id><snippet>class Trellis:
    trell = []
    def __init__(self, hmm, words):
        self.trell = []
        temp = {}
        for label in hmm.labels:
           temp[label] = [0,None]
        for word in words:
            self.trell.append([word,copy.deepcopy(temp)])
        self.fill_in(hmm)

    def fill_in(self,hmm):
        for i in range(len(self.trell)):
            for token in self.trell[i][1]:
                word = self.trell[i][0]
                if i == 0:
                    self.trell[i][1][token][0] = hmm.e(token,word)
                else:
                    max = None
                    guess = None
                    c = None
                    for k in self.trell[i-1][1]:
                        c = self.trell[i-1][1][k][0] + hmm.t(k,token)
                        if max == None or c &gt; max:
                            max = c
                            guess = k
                    max += hmm.e(token,word)
                    self.trell[i][1][token][0] = max
                    self.trell[i][1][token][1] = guess

    def return_max(self):
        tokens = []
        token = None
        for i in range(len(self.trell)-1,-1,-1):
            if token == None:
                max = None
                guess = None
                for k in self.trell[i][1]:
                    if max == None or self.trell[i][1][k][0] &gt; max:
                        max = self.trell[i][1][k][0]
                        token = self.trell[i][1][k][1]
                        guess = k
                tokens.append(guess)
            else:
                tokens.append(token)
                token = self.trell[i][1][token][1]
        tokens.reverse()
        return tokens
</snippet></ROW><ROW><id>9730248</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>9730248</id><snippet>python manage.py sql appname</snippet></ROW><ROW><id>9730317</id><snippet>c.query("Select SourceName, Message from Win32_NTLogEvent where EventType =1, Logfile = \"Application\"")
</snippet></ROW><ROW><id>9730317</id><snippet>c.query("Select SourceName, Message from Win32_NTLogEvent where EventType =1 AND Logfile = \"Application\" AND TimeWritten&lt;=\"20110421013749.000000-000\" ")
</snippet></ROW><ROW><id>9730396</id><snippet>class Game(object):
    def __init__(self, start):
        self.start = start
</snippet></ROW><ROW><id>9730396</id><snippet>Game</snippet></ROW><ROW><id>9730396</id><snippet>Game</snippet></ROW><ROW><id>9730396</id><snippet>start</snippet></ROW><ROW><id>9730396</id><snippet>Game</snippet></ROW><ROW><id>9730396</id><snippet>__init__</snippet></ROW><ROW><id>9730396</id><snippet>self</snippet></ROW><ROW><id>9730396</id><snippet>start</snippet></ROW><ROW><id>9730396</id><snippet>start</snippet></ROW><ROW><id>9730396</id><snippet>start</snippet></ROW><ROW><id>9730396</id><snippet>start</snippet></ROW><ROW><id>9730458</id><snippet>str.count</snippet></ROW><ROW><id>9730458</id><snippet>&gt;&gt;&gt; s = 'a-b-c-d-e'
&gt;&gt;&gt; s.count('-') == 4
True
</snippet></ROW><ROW><id>9730500</id><snippet>url(r'^(?P&lt;real_name&gt;[\w|\W]+)/', usernames_by_player)</snippet></ROW><ROW><id>9730500</id><snippet>url(r'^realname/(?P&lt;real_name&gt;[\w|\W]+)/', usernames_by_player),
url(r'^username/(?P&lt;user_name&gt;[\w|\W]+)/', avatars_by_username),
</snippet></ROW><ROW><id>9730507</id><snippet>exit</snippet></ROW><ROW><id>9730507</id><snippet>__repr__</snippet></ROW><ROW><id>9730507</id><snippet>__str__</snippet></ROW><ROW><id>9730507</id><snippet>&lt;function exit at 0x00B97FB0&gt;
</snippet></ROW><ROW><id>9730507</id><snippet>exit</snippet></ROW><ROW><id>9730507</id><snippet>exit</snippet></ROW><ROW><id>9730507</id><snippet>__repr__</snippet></ROW><ROW><id>9730507</id><snippet>exit</snippet></ROW><ROW><id>9730536</id><snippet>pile[:5]=tmp.copy() 
</snippet></ROW><ROW><id>9730542</id><snippet>tornado.template.Loader</snippet></ROW><ROW><id>9730542</id><snippet>template_loader</snippet></ROW><ROW><id>9730542</id><snippet>render_string</snippet></ROW><ROW><id>9730542</id><snippet>UIModule</snippet></ROW><ROW><id>9730542</id><snippet>class JsonMinify(UIModule):    
    def render(self, path):
        code=self.render_string(path)
        return slimit.minify(code)
</snippet></ROW><ROW><id>9730546</id><snippet>replace</snippet></ROW><ROW><id>9730546</id><snippet>pattern</snippet></ROW><ROW><id>9730546</id><snippet>text = open(path).read()
new_text = '\n'.join(replace if line.startswith(pattern) else line
                                for line in text.splitlines())
open(path, 'w').write(new_text)
</snippet></ROW><ROW><id>9730546</id><snippet>with</snippet></ROW><ROW><id>9730546</id><snippet>with open(input_path) as text, open(output_path, 'w') as new_text:
    new_text.write(''.join(replace if line.startswith(pattern) else line
                                for line in text))
</snippet></ROW><ROW><id>9730546</id><snippet>replace</snippet></ROW><ROW><id>9730546</id><snippet>\n</snippet></ROW><ROW><id>9731060</id><snippet>perldoc perlrun</snippet></ROW><ROW><id>9731060</id><snippet>$ echo "одобрение за" | perl -C -pe 's/.\K/ /g'
о д о б р е н и е   з а 
</snippet></ROW><ROW><id>9731060</id><snippet>PYTHONIOENCODING</snippet></ROW><ROW><id>9731060</id><snippet>$ echo "одобрение за" | PYTHONIOENCODING=utf-8 python -c'import sys
for line in sys.stdin:
    print " ".join(line.decode(sys.stdin.encoding)),
'
о д о б р е н и е   з а 
</snippet></ROW><ROW><id>9731060</id><snippet>/\X/</snippet></ROW><ROW><id>9731060</id><snippet>$ echo "одобрение за" | perl -C -pe 's/\X\K/ /g'
о д о б р е н и е   з а 
</snippet></ROW><ROW><id>9731060</id><snippet>\X</snippet></ROW><ROW><id>9731060</id><snippet>regex</snippet></ROW><ROW><id>9731154</id><snippet>&gt;&gt;&gt; x = [['a','b'],['c','f'],['q','w','t']]
&gt;&gt;&gt; [c for s in x for c in itertools.combinations(s, 2)]
[('a', 'b'), ('c', 'f'), ('q', 'w'), ('q', 't'), ('w', 't')]
</snippet></ROW><ROW><id>9731177</id><snippet>sudo easy_install pyusb
</snippet></ROW><ROW><id>9731177</id><snippet>sudo pip install pyusb
</snippet></ROW><ROW><id>9731177</id><snippet>sudo easy_install pip
</snippet></ROW><ROW><id>9731424</id><snippet>split</snippet></ROW><ROW><id>9731424</id><snippet>[item for item in wordlist if item.startswith("foo")]</snippet></ROW><ROW><id>9731424</id><snippet>split</snippet></ROW><ROW><id>9731424</id><snippet>partition</snippet></ROW><ROW><id>9731424</id><snippet>startswith</snippet></ROW><ROW><id>9731597</id><snippet>os.system("python ..\\test.py abc")
</snippet></ROW><ROW><id>9731658</id><snippet>NextRowToProcess</snippet></ROW><ROW><id>9731658</id><snippet>InterlockedIncrement</snippet></ROW><ROW><id>9731678</id><snippet>binascii</snippet></ROW><ROW><id>9731678</id><snippet>response = HttpResponse(binascii.a2b_qp(spec.get_template()), mimetype='application/ms-excel')
</snippet></ROW><ROW><id>9731678</id><snippet>binascii.a2b_qp</snippet></ROW><ROW><id>9731721</id><snippet>threading</snippet></ROW><ROW><id>9731891</id><snippet>.returncode</snippet></ROW><ROW><id>9731891</id><snippet>.communicate()</snippet></ROW><ROW><id>9731891</id><snippet>p = subproccess.Popen('ls | tee out.txt', shell=True, ...)
p.communicate()
print p.returncode
</snippet></ROW><ROW><id>9731919</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>9731919</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>9731919</id><snippet>&lt;table summary="Showtime series for Sunday in a Planner format." border="0" bgcolor="#bfa89b" cellpadding="0" cellspacing="0" width="100%"&gt;</snippet></ROW><ROW><id>9731919</id><snippet>summary="Showtime series for (Monday|Tuesday|....|Sunday)"</snippet></ROW><ROW><id>9731919</id><snippet>&lt;tr&gt;</snippet></ROW><ROW><id>9731919</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>9731919</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>9731919</id><snippet>src</snippet></ROW><ROW><id>9731919</id><snippet>img</snippet></ROW><ROW><id>9731919</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>9731919</id><snippet>&lt;tr&gt;</snippet></ROW><ROW><id>9731919</id><snippet>summary="..."</snippet></ROW><ROW><id>9731919</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>9731942</id><snippet>object_session</snippet></ROW><ROW><id>9732047</id><snippet>sys.path</snippet></ROW><ROW><id>9732047</id><snippet>import sys
from os.path import dirname, join
sys.path.append(dirname(__file__))  #package-root-directory 
</snippet></ROW><ROW><id>9732047</id><snippet>module_dir = 'mymodules'
sys.path.append(join(dirname(__file__), module_dir)) # in the main-file
</snippet></ROW><ROW><id>9732047</id><snippet>from .linkIO can_follow
</snippet></ROW><ROW><id>9732047</id><snippet>import</snippet></ROW><ROW><id>9732047</id><snippet>from .relmodule import xyz</snippet></ROW><ROW><id>9732047</id><snippet>import .XYZ</snippet></ROW><ROW><id>9732047</id><snippet>from</snippet></ROW><ROW><id>9732254</id><snippet>ipython</snippet></ROW><ROW><id>9732254</id><snippet>[I] dev-python/ipython
     Available versions:  0.10 0.10.1 0.10.2 (~)0.12-r1 {doc emacs examples gnuplot matplotlib mongodb notebook qt4 readline (+)smp sqlite test wxwidgets}
     Installed versions:  0.12-r1(11:47:58 AM 03/16/2012)(examples qt4 readline smp -doc -emacs -matplotlib -mongodb -notebook -sqlite -test -wxwidgets)
     Homepage:            http://ipython.org/
     Description:         Advanced interactive shell for Python
</snippet></ROW><ROW><id>9732254</id><snippet>...:</snippet></ROW><ROW><id>9732254</id><snippet>$ ipython
Python 2.7.2 (default, Mar  7 2012, 21:18:58) 
Type "copyright", "credits" or "license" for more information.

IPython 0.12 -- An enhanced Interactive Python.
?         -&gt; Introduction and overview of IPython's features.
%quickref -&gt; Quick reference.
help      -&gt; Python's own help system.
object?   -&gt; Details about 'object', use 'object??' for extra details.

In [1]: for i in range(2):
   ...:     for j in range(2):
   ...:         print i*j
   ...:         
0
0
0
1
</snippet></ROW><ROW><id>9732254</id><snippet>bpython</snippet></ROW><ROW><id>9732254</id><snippet>for</snippet></ROW><ROW><id>9732254</id><snippet>&gt;&gt;&gt; for i in range(2):
...     for j in range(2):
...         print i*j
...         
...     
... 
0
0
0
1
</snippet></ROW><ROW><id>9732341</id><snippet>from collections import defaultdict

d = defaultdict(list)
with open('input.txt') as f:
    for line in f.readlines():
        data = line.split()
        d[data[0]].extend(data[1:])

with open('output.txt', 'w') as f:
    for key, value in d.iteritems():
        f.write(
            '%(key)s %(value)s\n' 
            % {'key': key, 'value': " ".join(sorted(value))}
        )
</snippet></ROW><ROW><id>9732374</id><snippet>l, = v
</snippet></ROW><ROW><id>9732374</id><snippet>[l] = v
</snippet></ROW><ROW><id>9732374</id><snippet>&gt;&gt;&gt; l=[3]
&gt;&gt;&gt; [v] = l
&gt;&gt;&gt; v
3
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9732552</id><snippet>float</snippet></ROW><ROW><id>9732552</id><snippet>0</snippet></ROW><ROW><id>9732552</id><snippet>progress = float(f.tell()) / total
</snippet></ROW><ROW><id>9732569</id><snippet>count = 0

for letter in set(string1):
  count += string2.count(letter)

print(count)
</snippet></ROW><ROW><id>9732921</id><snippet>point_layer = point_layers.create( pk=size )</snippet></ROW><ROW><id>9732921</id><snippet>create</snippet></ROW><ROW><id>9732921</id><snippet>snow_Depth</snippet></ROW><ROW><id>9732921</id><snippet>create</snippet></ROW><ROW><id>9732921</id><snippet>point_layer = PointLayer()
point_layer.pk = size
# .. other various fields
# Replace point_layer.get( pk=1 ).save( commit = False ) with:
point_layer.save()
</snippet></ROW><ROW><id>9732921</id><snippet>PointLayer</snippet></ROW><ROW><id>9732921</id><snippet>point_layer.get( pk=1 ).save( commit = False )</snippet></ROW><ROW><id>9732921</id><snippet>point_layer = point_layers.create( pk=size )</snippet></ROW><ROW><id>9732921</id><snippet>point_layer = PointLayer.objects.get(pk=size)</snippet></ROW><ROW><id>9732921</id><snippet>PointLayer.objects.all().delete()</snippet></ROW><ROW><id>9733290</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b is a 
True
&gt;&gt;&gt; b == a
True
&gt;&gt;&gt; b = a[:]
&gt;&gt;&gt; b is a
False
&gt;&gt;&gt; b == a
True
</snippet></ROW><ROW><id>9733306</id><snippet>from itertools import izip_longest

for row1, row2 in izip_longest(first, second, fillvalue=[]):
    writer.writerow([int(a == b) for a, b in izip_longest(row1, row2)])
</snippet></ROW><ROW><id>9733451</id><snippet>int f() {
   int result = 1;
   char * buffer = (char *)malloc(77);
   if(buffer!=NULL) {
      int const fd = open("/tmp/data.log", O_RDONLY);
      if(fd!=-1) {
         ssize_t const read_cnt = read(fd, buffer, 77);
         if(read_cnt!=77) {
            /* Do something: was not possible to read 77 bytes. */
            result = 0;
         }
         close(fd);
      }
      free(buffer);
   }
   return result;
}
</snippet></ROW><ROW><id>9733745</id><snippet># Make a copy to test values
new = group
</snippet></ROW><ROW><id>9733745</id><snippet>new</snippet></ROW><ROW><id>9733745</id><snippet>group</snippet></ROW><ROW><id>9733745</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>9734245</id><snippet>from waflib.TaskGen import feature, before_method, after_method

@feature('cxx')
@after_method('process_source')
@before_method('apply_incpaths')
def add_includes_paths(self):
        incs = set(self.to_list(getattr(self, 'includes', '')))
        for x in self.compiled_tasks:
                incs.add(x.inputs[0].parent.path_from(self.path))
        self.includes = list(incs)
</snippet></ROW><ROW><id>9734245</id><snippet>process_source</snippet></ROW><ROW><id>9734747</id><snippet>m1</snippet></ROW><ROW><id>9734747</id><snippet>calc_S</snippet></ROW><ROW><id>9734747</id><snippet>calc_S1</snippet></ROW><ROW><id>9734747</id><snippet>let calc_S res i = 
   let sum = ref 0. in
   for k = 0 to i-1 do
      sum := !sum +. (res.[k].[i] ** 2.)
   done;
   !sum

let calc_S1 res i dim = 
   let sum = ref 0. in
   for j = i+1 to dim-1 do
      for k = 0 to dim-1 do
        sum := !sum +. (res.[k].[i] *. res.[k].[j])
      done
   done;
   !sum
</snippet></ROW><ROW><id>9734776</id><snippet>a = {}

for row in reader:
    a.setdefault(row[0], {}).setdefault(row[1], 0)
    a[row[0]][row[1]] += 1
</snippet></ROW><ROW><id>9734776</id><snippet> {'item2': {'#00ffcc': 1, '#ffcc00': 3}, 
  'item1': {'#ffcc00': 2, '#ff00cc': 1}}
</snippet></ROW><ROW><id>9734776</id><snippet> b = dict((k, v.items()) for k, v in a.items())
</snippet></ROW><ROW><id>9734997</id><snippet>import difflib

str1 = "black_red_yellow"
str2 = "blue_red_green"

difference = difflib.SequenceMatcher()

difference.set_seqs(str1, str2)

for match in difference.get_matching_blocks():
    print str1[match[0]:match[0] + match[2]]
</snippet></ROW><ROW><id>9735384</id><snippet>Popen</snippet></ROW><ROW><id>9735384</id><snippet>'sh &lt;argument&gt;'</snippet></ROW><ROW><id>9735384</id><snippet>'sh python test.py arg1 arg2'</snippet></ROW><ROW><id>9735384</id><snippet>shell=True</snippet></ROW><ROW><id>9735384</id><snippet>subprocess.Popen("python test.py arg1 arg2", shell=True)
</snippet></ROW><ROW><id>9735585</id><snippet>d = {1 : 'a', 2 : 'b', 3 : 'c', 4 : 'd', 5 : 'e' }
s = set([1, 4])
</snippet></ROW><ROW><id>9735585</id><snippet>d2 = dict((k,v) for k,v in d.iteritems() if k in s)
</snippet></ROW><ROW><id>9735585</id><snippet>s</snippet></ROW><ROW><id>9735585</id><snippet>d2 = dict((k, d[k]) for k in set(d) &amp; s)
</snippet></ROW><ROW><id>9735585</id><snippet>d</snippet></ROW><ROW><id>9735585</id><snippet>for k in set(d) - s:
    del d[k]
</snippet></ROW><ROW><id>9735587</id><snippet>dict</snippet></ROW><ROW><id>9735587</id><snippet>d = dict()
d['myattr'] = 42
</snippet></ROW><ROW><id>9735587</id><snippet>c.myattr = 42</snippet></ROW><ROW><id>9736031</id><snippet>ps</snippet></ROW><ROW><id>9736031</id><snippet>$COLUMNS</snippet></ROW><ROW><id>9736031</id><snippet>--columns</snippet></ROW><ROW><id>9736031</id><snippet>ps</snippet></ROW><ROW><id>9736031</id><snippet>commands</snippet></ROW><ROW><id>9736031</id><snippet>subprocess</snippet></ROW><ROW><id>9736031</id><snippet>ps -ef</snippet></ROW><ROW><id>9736031</id><snippet>shell=True</snippet></ROW><ROW><id>9736031</id><snippet>ps = subprocess.Popen(['ps', '-ef', '--columns', '1000'], stdout=subprocess.PIPE)
output = ps.communicate()[0]
for line in output.splitlines():
    if 'rtptransmit' in line:
        print(line)
</snippet></ROW><ROW><id>9736031</id><snippet>pgrep</snippet></ROW><ROW><id>9736243</id><snippet>def yield_times():
    from datetime import date, time, datetime, timedelta
    start = datetime.combine(date.today(), time(0, 0))
    yield start.strftime("%H:%M:%S")
    while True:
        start += timedelta(seconds=7)
        yield start.strftime("%H:%M:%S")

&gt;&gt;&gt; gen = yield_times()
&gt;&gt;&gt; for ii in range(5):
...     print gen.next()
... 
00:00:00
00:00:07
00:00:14
00:00:21
00:00:28
</snippet></ROW><ROW><id>9736394</id><snippet>from __future__ import unicode_literals
</snippet></ROW><ROW><id>9736612</id><snippet>def strIntersection(s1, s2):
  out = ""
  for c in s1:
    if c in s2 and not c in out:
      out += c
  return out
</snippet></ROW><ROW><id>9736612</id><snippet>&gt;&gt;&gt; strIntersection('asdfasdfasfd' , 'qazwsxedc')
'asd'
</snippet></ROW><ROW><id>9736632</id><snippet>weights</snippet></ROW><ROW><id>9736632</id><snippet>histogram</snippet></ROW><ROW><id>9736632</id><snippet>numpy.histogram(ls,bins=(0,2,4,6),weights=ls)</snippet></ROW><ROW><id>9736829</id><snippet>def parse_data:

    if isinstance(value, dict):
        iterator = value.items()
    elif isinstance(value, list):
        iterator = enumerate(value)
    else:
        return

    for key, item in iterator:
        parse_data(value, key, item)

    # do some cool stuff with the rest
</snippet></ROW><ROW><id>9736942</id><snippet>fs = FieldSet(DataTBL)
fs = fs.bind(DataTBL, request=requestobject)

if requestobject.POST and fs.validate():
    fs.sync()
    session.add(fs.model)
    session.commit()
</snippet></ROW><ROW><id>9737013</id><snippet>[foo for foo in bar if foo.something]
</snippet></ROW><ROW><id>9737013</id><snippet>[v * 10 if v &lt; 3 else v * 2 for v in L if v != 3]
</snippet></ROW><ROW><id>9737159</id><snippet># Python 2.6.2
&gt;&gt;&gt; import simplejson as json
&gt;&gt;&gt; s = r'{"a":{"a1":"{\"foo\":\"bar\",\"foo1\":\"bar1\"}"}}'
&gt;&gt;&gt; json.loads(s)
{u'a': {u'a1': u'{"foo":"bar","foo1":"bar1"}'}}
</snippet></ROW><ROW><id>9737461</id><snippet>render</snippet></ROW><ROW><id>9737461</id><snippet>custom_render</snippet></ROW><ROW><id>9737461</id><snippet>from django.shortcuts import render
@login_required
def index(request, template_name):
    return render(request, template_name,extra={})
</snippet></ROW><ROW><id>9737461</id><snippet>base.html</snippet></ROW><ROW><id>9737461</id><snippet>{% url home as home_url %}
{% if request.path != home_url %}&lt;a href="{{ home_url }}"&gt;Home&lt;/a&gt;{% endif %}
</snippet></ROW><ROW><id>9737516</id><snippet>&gt;&gt;&gt; from django.forms.models import inlineformset_factory
&gt;&gt;&gt; GuestOnMeetingInline = inlineformset_factory(GuestOnMeeting, Meeting)
&gt;&gt;&gt; meeting = Meeting.objects.all()[0]
&gt;&gt;&gt; form = MeetingForm(instance=meeting)
&gt;&gt;&gt; formset = GuestOnMeetingInline(instance=meeting)
</snippet></ROW><ROW><id>9737794</id><snippet>[clients, signals]</snippet></ROW><ROW><id>9737794</id><snippet>clients+signals</snippet></ROW><ROW><id>9737794</id><snippet>select</snippet></ROW><ROW><id>9738013</id><snippet>self.request.recv (...)</snippet></ROW><ROW><id>9738013</id><snippet>print</snippet></ROW><ROW><id>9738013</id><snippet>'\n'</snippet></ROW><ROW><id>9738013</id><snippet>print</snippet></ROW><ROW><id>9738013</id><snippet>while True:
    select.select([self.rfile], [], [self.rfile])
    self.data = self.request.recv(10) 
    if self.data:
       print self.data
    else:
       # &lt;close connection here&gt;
</snippet></ROW><ROW><id>9738013</id><snippet>write(sock, perfect_numbers[i].c_str(), sizeof(perfect_numbers[i].c_str()))
</snippet></ROW><ROW><id>9738013</id><snippet>sizeof(char*)</snippet></ROW><ROW><id>9738013</id><snippet>sock</snippet></ROW><ROW><id>9738013</id><snippet>perfect_numbers[i]</snippet></ROW><ROW><id>9738013</id><snippet>write</snippet></ROW><ROW><id>9738013</id><snippet>perfect_numbers[i].size ()</snippet></ROW><ROW><id>9738013</id><snippet> char buf[1024];

 ...

 write (sock, buf, sizeof (buf));
</snippet></ROW><ROW><id>9738694</id><snippet>~/.buildout/mr.developer.cfg</snippet></ROW><ROW><id>9738694</id><snippet>[mr.developer]
threads = 1
</snippet></ROW><ROW><id>9738751</id><snippet>activate</snippet></ROW><ROW><id>9738751</id><snippet>$PATH</snippet></ROW><ROW><id>9738751</id><snippet>bin</snippet></ROW><ROW><id>9738751</id><snippet>bin/</snippet></ROW><ROW><id>9738751</id><snippet>path/to/env/bin/pip</snippet></ROW><ROW><id>9738751</id><snippet>/path/to/env/bin/python script.py</snippet></ROW><ROW><id>9738751</id><snippet>$result = system("ENV/bin/python test.py");
</snippet></ROW><ROW><id>9739005</id><snippet>sudo rm -rf \
    /opt/local \
    /Applications/DarwinPorts \
    /Applications/MacPorts \
    /Library/LaunchDaemons/org.macports.* \
    /Library/Receipts/DarwinPorts*.pkg \
    /Library/Receipts/MacPorts*.pkg \
    /Library/StartupItems/DarwinPortsStartup \
    /Library/Tcl/darwinports1.0 \
    /Library/Tcl/macports1.0 \
    ~/.macports
</snippet></ROW><ROW><id>9739005</id><snippet>/opt/local/var/macports/logs/_opt_local_var_macports_registry_portfiles_python27_2.7.1_3/python27/main.log</snippet></ROW><ROW><id>9739290</id><snippet>std::rotate</snippet></ROW><ROW><id>9739290</id><snippet>#include &lt;algorithm&gt;

std::vector&lt;T&gt; v /* = populate() */;
std::rotate(v.begin(), v.begin() + 3, v.end());
</snippet></ROW><ROW><id>9739375</id><snippet>"admin\40local.domain@mydomain.tld"
</snippet></ROW><ROW><id>9739375</id><snippet>"admin\\40local.domain@mydomain.tld"
</snippet></ROW><ROW><id>9739465</id><snippet>forms</snippet></ROW><ROW><id>9739465</id><snippet>forms.remove((form,question))
</snippet></ROW><ROW><id>9739465</id><snippet>for</snippet></ROW><ROW><id>9739465</id><snippet>for x in a[:]: # make a slice copy of the entire list
...    if len(x) &gt; 6: a.insert(0, x)
</snippet></ROW><ROW><id>9739465</id><snippet>for</snippet></ROW><ROW><id>9739465</id><snippet>forms</snippet></ROW><ROW><id>9739512</id><snippet>l = ["line1","line2","line3","line4"]
print l[2:] # print from 2nd element (including) onwards 
["line3","line4"]
</snippet></ROW><ROW><id>9739512</id><snippet>[from(included):to(excluded):step]</snippet></ROW><ROW><id>9739512</id><snippet>[:]</snippet></ROW><ROW><id>9739512</id><snippet>string</snippet></ROW><ROW><id>9739512</id><snippet>tuple</snippet></ROW><ROW><id>9739512</id><snippet>[:-2]</snippet></ROW><ROW><id>9739512</id><snippet>[::-1]</snippet></ROW><ROW><id>9739512</id><snippet>list</snippet></ROW><ROW><id>9739533</id><snippet>import re
s = 'a b'
m = re.search('(\w) (\w)( (\w))?', s)
</snippet></ROW><ROW><id>9739533</id><snippet>?</snippet></ROW><ROW><id>9739533</id><snippet>m = re.search('(\w) (\w)(?: (\w))?', s)
</snippet></ROW><ROW><id>9739533</id><snippet>m</snippet></ROW><ROW><id>9739545</id><snippet>search_kw = ('kw: ', 'kw1: ', 'kw3 ', 'kw4: ', 'kw5: ', 'kw6: ', 'kw7: ', 'kw8: ')

keyword = raw_input('Enter your keyword here\n &gt; ')

def add_keyword():
    for word in search_kw:
        # Leave the function, breaking the loop after the first iteration
        return word + keyword

text_file = open("/Users/home/Projects/keyword_file.txt", "w")
# Write search_kw before adding any keywords to it
text_file.write("%s" % search_kw)
text_file.close()

# Only calling add_keyword and the end, and not using the return value
add_keyword()
</snippet></ROW><ROW><id>9739545</id><snippet>def add_keyword():
    keywords = []
    for word in search_kw:
        keywords.append(word + keyword)
    return keywords

search_kw = add_keyword()
text_file = open("/Users/home/Projects/keyword_file.txt", "w")
text_file.write("%s" % search_kw)
text_file.close()
</snippet></ROW><ROW><id>9739828</id><snippet>dateutil.parser.parse</snippet></ROW><ROW><id>9739828</id><snippet>converters</snippet></ROW><ROW><id>9739828</id><snippet>read_csv</snippet></ROW><ROW><id>9739990</id><snippet>pexpect</snippet></ROW><ROW><id>9740068</id><snippet>try
{
    string jsonResponse = doStuff();

    return Json(jsonResponse, JsonRequestBehavior.AllowGet);
}
catch (Exception ex)
{
    return Json(new GetTokenError(ex.Message), JsonRequestBehavior.AllowGet);
}
</snippet></ROW><ROW><id>9740068</id><snippet>/// &lt;summary&gt;
/// Used for displaying consistent error messages
/// &lt;/summary&gt;
public class GetTokenError
{
    /// &lt;summary&gt;
    /// Ctor
    /// &lt;/summary&gt;
    /// &lt;param name="error"&gt;Error message to display&lt;/param&gt;
    public GetTokenError(string error)
    {
        this.error = error;
    }

    /// &lt;summary&gt;
    /// The error to display
    /// &lt;/summary&gt;
    public string error { get; set; }
}
</snippet></ROW><ROW><id>9740068</id><snippet>var http:HTTPService = new HTTPService();
http.method = "POST";
http.resultFormat = HTTPService.RESULT_FORMAT_TEXT;
http.url = "http://url.com";
http.addEventListener(ResultEvent.RESULT, function(evt:ResultEvent):void {
    try {
        var ret:Object = JSON.decode(evt.result.toString());

        if (ret.error)
        {
            // handle server error
        }

        // go about task

    } catch (e:Error) {
        // handle local error
    }
});

http.addEventListener(FaultEvent.FAULT, function(ex:FaultEvent):void {
    // handle error with the call
});

http.send();
</snippet></ROW><ROW><id>9740093</id><snippet>"r+"</snippet></ROW><ROW><id>9740093</id><snippet>seek</snippet></ROW><ROW><id>9740093</id><snippet>os.open</snippet></ROW><ROW><id>9740093</id><snippet>os.lseek</snippet></ROW><ROW><id>9740093</id><snippet>os.read</snippet></ROW><ROW><id>9740093</id><snippet>os.write</snippet></ROW><ROW><id>9740237</id><snippet>" ".join("%s=%s" % (k, v) for k, v in csstidy_opts.iteritems() if v is not False)
</snippet></ROW><ROW><id>9740237</id><snippet>args = ["%s=%s" % (k, v) for k, v in csstidy_opts.iteritems() if v is not False]
</snippet></ROW><ROW><id>9741014</id><snippet>//primary_key[source="firstone"]/value/text()</snippet></ROW><ROW><id>9741014</id><snippet>//primary_key[source="second one"]/value/text()</snippet></ROW><ROW><id>9741519</id><snippet>def clean(self):
    cleaned_data = self.cleaned_data
    npv = cleaned_data.get("npv")
    irr = cleaned_data.get("irr")
    if npv == irr:
        raise forms.ValidationError('Must have either an NPV or IRR entry.')
    if (npv != None) and (irr != None):
        raise forms.ValidationError('Must have only one entry, either NPV or IRR.')
    return cleaned_data
</snippet></ROW><ROW><id>9741519</id><snippet>a = ModelFormA()
b = ModelFormB()
c = ModelFormC()

c = {'a':a,'b':b,'c':c}
return rendertoresponse('template.html',c)
</snippet></ROW><ROW><id>9741784</id><snippet>sys.excepthook</snippet></ROW><ROW><id>9741784</id><snippet>sys.exit()</snippet></ROW><ROW><id>9741784</id><snippet>import atexit
import sys

class ExitHooks(object):
    def __init__(self):
        self.exit_code = None
        self.exception = None

    def hook(self):
        self._orig_exit = sys.exit
        sys.exit = self.exit
        sys.excepthook = self.exc_handler

    def exit(self, code=0):
        self.exit_code = code
        self._orig_exit(code)

    def exc_handler(self, exc_type, exc, *args):
        self.exception = exc

hooks = ExitHooks()
hooks.hook()

def foo():
    if hooks.exit_code is not None:
        print("death by sys.exit(%d)" % hooks.exit_code)
    elif hooks.exception is not None:
        print("death by exception: %s" % hooks.exception)
    else:
        print("natural death")
atexit.register(foo)

# test
sys.exit(1)
</snippet></ROW><ROW><id>9741835</id><snippet>a=time.time()
(a+1/5000.0)-a
#0.00020003318786621094
1/5000.0
#0.0002
1331918373+1/5000.0-1331918373
#0.00020003318786621094
</snippet></ROW><ROW><id>9742171</id><snippet>&lt;html&gt;
&lt;!--other html --&gt;
&lt;table&gt;
replace me
I'm old and weak
*cough*  can't.. hang.. on.. much... longer..
&lt;/table&gt;
&lt;!-- other html --&gt;
</snippet></ROW><ROW><id>9742171</id><snippet>&lt;html&gt;
&lt;table&gt;
I'm new content
replace old content with me
&lt;/table&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>9742171</id><snippet>import re

# open the files
Old = open('/somelocation/old.html').read()
New = open('/somelocation/new.html').read()

# get the strings you want to swap
NewTableContents = re.findall(r'&lt;table&gt;([\s\S]+?)&lt;/table&gt;',New)[0]
OldTableContents = re.findall(r'&lt;table&gt;([\s\S]+?)&lt;/table&gt;',Old)[0]

# replace
Replace = Old.replace(OldTableContents,NewTableContents)

# output string to new file
File = open('/somelocation/oldHTMLWithNewTableContents.html','w')
File.write(Replace)
File.close()
</snippet></ROW><ROW><id>9742171</id><snippet>&lt;html&gt;
&lt;!--other html --&gt;
&lt;table&gt;
I'm new content
replace old content with me
&lt;/table&gt;
&lt;!-- other html --&gt;
</snippet></ROW><ROW><id>9742643</id><snippet>a = numpy.ones(other_array.shape)
</snippet></ROW><ROW><id>9742643</id><snippet>other_array.shape</snippet></ROW><ROW><id>9742643</id><snippet>numpy.random.rand()</snippet></ROW><ROW><id>9742958</id><snippet>for x in filter(long_word.startswith, list1):
    for y in filter(long_word[len(x):].startswith, list2):
        z = long_word[len(x)+len(y):]
        if z in list3:
            print('Found: {}, {}, {}'.format(x, y, z))
            break
    else:
        continue
    break
else:
    print('Not found')
</snippet></ROW><ROW><id>9742993</id><snippet>sql2 = """UPDATE student
          SET f_name = %s
          WHERE id_user = %s"""
cursor.execute(sql2, (se, the))
</snippet></ROW><ROW><id>9743183</id><snippet>def CommonLetters(s1, s2):
    l1=list(''.join(s1.split()))
    l2=list(''.join(s2.split()))
    return [x for x in l1 if x in l2]

print CommonLetters('Tom','Dom de Tommaso')    
</snippet></ROW><ROW><id>9743183</id><snippet>&gt;&gt;&gt; ['T', 'o', 'm']
</snippet></ROW><ROW><id>9743311</id><snippet>Storage</snippet></ROW><ROW><id>9743311</id><snippet>from gluon.storage import Storage
settings = Storage()
settings.title = 'My Amazing App'
</snippet></ROW><ROW><id>9743311</id><snippet>settings = Storage({'title': 'My Amazing App'})
</snippet></ROW><ROW><id>9743311</id><snippet>request</snippet></ROW><ROW><id>9743311</id><snippet>response</snippet></ROW><ROW><id>9743311</id><snippet>session</snippet></ROW><ROW><id>9743311</id><snippet>Storage</snippet></ROW><ROW><id>9743335</id><snippet>fin = csv.reader(open('LogFile.txt', 'rb'), delimiter='\t')
fout = open('newLogFile.csv', 'w')
for row in fin:
    fout.write(';'.join(row) + '\n')
</snippet></ROW><ROW><id>9743335</id><snippet>["sed", "-e", "s/^[ ]*//g", "-e", "s/\([0-9a-zA-Z\.]*\)*/\1;/g", "LogFile.txt"]
</snippet></ROW><ROW><id>9743335</id><snippet>s/.../.../g</snippet></ROW><ROW><id>9743335</id><snippet>Popen</snippet></ROW><ROW><id>9743335</id><snippet>sed</snippet></ROW><ROW><id>9743335</id><snippet>stderr=f</snippet></ROW><ROW><id>9743335</id><snippet>stderr=subprocess.STDOUT</snippet></ROW><ROW><id>9743335</id><snippet>f = open("newlogfile.csv", "w")
args = ["sed", "-e", "s/^[ ]*//g", "-e", "s/\([0-9a-zA-Z\.]*\)*/\1;/g", "LogFile.txt"]
p = subprocess.Popen(args, stdout=f, stderr=subprocess.STDOUT)
f.close()
</snippet></ROW><ROW><id>9743490</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>9743490</id><snippet>CAT('Line 1', BR(), 'Line 2')
</snippet></ROW><ROW><id>9743490</id><snippet>XML()</snippet></ROW><ROW><id>9743490</id><snippet>XML('Line 1&lt;br /&gt;Line 2')
</snippet></ROW><ROW><id>9743490</id><snippet>SQLFORM.grid</snippet></ROW><ROW><id>9743490</id><snippet>db.define_table('mytable',
    Field('myfield', label=CAT('My', BR(), 'Label')))
</snippet></ROW><ROW><id>9743490</id><snippet>db.mytable.myfield.label = CAT('My', BR(), 'Label')
</snippet></ROW><ROW><id>9743816</id><snippet>type_code = linea[0:2]
(derivation, name) = (linea[2:4], linea[4:20])
</snippet></ROW><ROW><id>9743816</id><snippet>def split_string_by_position(a_string, lengths):
    result = []
    position = 0
    for length in lengths:
        result.append(a_string[position:position+length])
        position = position+length
    return result


line = '66TP        1003    54.437269600149717.012388003107655.5139691177756'
lengths = [2, 2, 16, 16, 16, 16, 16, 16, 1, 1, 16, 16]

print(split_string_by_position(line, lengths))
</snippet></ROW><ROW><id>9743816</id><snippet>['66', 'TP', '        1003    ', '54.4372696001497', '17.0123880031076', '55.5139691177756', '', '', '', '', '', '']
</snippet></ROW><ROW><id>9743816</id><snippet>[[2,'type'], [2,'derivation'],...]</snippet></ROW><ROW><id>9743816</id><snippet>dict</snippet></ROW><ROW><id>9743816</id><snippet>the_result['variable_name']</snippet></ROW><ROW><id>9743860</id><snippet>def getProductElement(m1, m2, i, j):
    # some calculations
    return element
</snippet></ROW><ROW><id>9743860</id><snippet>from multiprocessing import Pool, cpu_count
pool = Pool(processes=cpu_count())
</snippet></ROW><ROW><id>9743860</id><snippet>result = []
# here you need to iterate through the the columns of the first and the rows of
# the second matrix. How you do it, depends on the implementation (how you store
# the matrices). Also, make sure you check the dimensions are the same.
# The simplest case is if you have a list of columns:

N = len(m1)
M = len(m2[0])
for i in range(N):
    for j in range(M):
        results.append(pool.apply_async(getProductElement, (m1, m2, i, j)))
</snippet></ROW><ROW><id>9743860</id><snippet>m = []
count = 0
for i in range(N):
    column = []
    for j in range(M):
        column.append(results[count].get())
    m.append(column)
</snippet></ROW><ROW><id>9744115</id><snippet>"reel"</snippet></ROW><ROW><id>9744115</id><snippet>outp</snippet></ROW><ROW><id>9744115</id><snippet>inp</snippet></ROW><ROW><id>9744115</id><snippet>['y', 'e', 'l', 'l', 'o', 'w', ' ', 'g', 'e', 'l',' ', 'p','e','e','k']</snippet></ROW><ROW><id>9744115</id><snippet>'y'</snippet></ROW><ROW><id>9744115</id><snippet>'yellow'</snippet></ROW><ROW><id>9744115</id><snippet>'w'</snippet></ROW><ROW><id>9744115</id><snippet>tail</snippet></ROW><ROW><id>9744115</id><snippet>listiterator</snippet></ROW><ROW><id>9744115</id><snippet>list</snippet></ROW><ROW><id>9744115</id><snippet>print</snippet></ROW><ROW><id>9744115</id><snippet>'w'</snippet></ROW><ROW><id>9744115</id><snippet>'yellow'</snippet></ROW><ROW><id>9744115</id><snippet>'k'</snippet></ROW><ROW><id>9744115</id><snippet>"peek"</snippet></ROW><ROW><id>9744115</id><snippet>'gel'</snippet></ROW><ROW><id>9744115</id><snippet>'gel'</snippet></ROW><ROW><id>9744115</id><snippet>'peek'</snippet></ROW><ROW><id>9744115</id><snippet>''.join(inp).split(' ')</snippet></ROW><ROW><id>9744115</id><snippet>outp</snippet></ROW><ROW><id>9744115</id><snippet>enumerate</snippet></ROW><ROW><id>9744115</id><snippet>True</snippet></ROW><ROW><id>9744115</id><snippet>False</snippet></ROW><ROW><id>9744115</id><snippet>def words_from(chars):
    begin = 0 # index of beginning of current word
    result = [] # where we store the output
    for i, char in enumerate(chars):
        if char == ' ':
            result.append(''.join(chars[begin:i]))
            begin = i + 1
    # At the end, make one more word from the chars after the last space.
    result.append(''.join(chars[begin:]))
    return result
</snippet></ROW><ROW><id>9744242</id><snippet># Additional stuff for the LaTeX preamble.
latex_elements['preamble'] = '\usepackage{amsmath}\n\usepackage{amssymb}\n'

#####################################################
# add LaTeX macros 

f = file('latex_macros.sty')

try:
    pngmath_latex_preamble  # check whether this is already defined
except NameError:
    pngmath_latex_preamble = ""

for macro in f:
    # used when building latex and pdf versions
    latex_elements['preamble'] += macro + '\n'
    # used when building html version
    pngmath_latex_preamble += macro + '\n'

#####################################################
</snippet></ROW><ROW><id>9744268</id><snippet>http://127.0.0.1/add/</snippet></ROW><ROW><id>9744268</id><snippet>http://127.0.0.1/add</snippet></ROW><ROW><id>9744268</id><snippet>@csrf_exempt</snippet></ROW><ROW><id>9744405</id><snippet>for i in range(6):
    # do stuff
</snippet></ROW><ROW><id>9744811</id><snippet>datetime.datetime.fromtimestamp()</snippet></ROW><ROW><id>9744811</id><snippet>fromtimestamp()</snippet></ROW><ROW><id>9744811</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; your_timestamp = 1331856000000
&gt;&gt;&gt; date = datetime.datetime.fromtimestamp(your_timestamp / 1e3)
</snippet></ROW><ROW><id>9744811</id><snippet>&gt;&gt;&gt; date
datetime.datetime(2012, 3, 16, 1, 0)
</snippet></ROW><ROW><id>9744811</id><snippet>1e3</snippet></ROW><ROW><id>9744811</id><snippet>1000</snippet></ROW><ROW><id>9744811</id><snippet>int</snippet></ROW><ROW><id>9744811</id><snippet>/</snippet></ROW><ROW><id>9744811</id><snippet>int</snippet></ROW><ROW><id>9744811</id><snippet>int</snippet></ROW><ROW><id>9744811</id><snippet>1000</snippet></ROW><ROW><id>9744811</id><snippet>int</snippet></ROW><ROW><id>9744811</id><snippet>1e3</snippet></ROW><ROW><id>9744811</id><snippet>1000</snippet></ROW><ROW><id>9744811</id><snippet>float(1000)</snippet></ROW><ROW><id>9744811</id><snippet>1000.</snippet></ROW><ROW><id>9744811</id><snippet>float</snippet></ROW><ROW><id>9744811</id><snippet>int</snippet></ROW><ROW><id>9744811</id><snippet>float</snippet></ROW><ROW><id>9744811</id><snippet>float</snippet></ROW><ROW><id>9744811</id><snippet>int</snippet></ROW><ROW><id>9744811</id><snippet>float</snippet></ROW><ROW><id>9744811</id><snippet>float</snippet></ROW><ROW><id>9744811</id><snippet>fromtimestamp()</snippet></ROW><ROW><id>9745014</id><snippet>episodes = [("N", 221), ("N", 222), ("N", 225), ("N", 227),
            ("N", 228), ("P", 9), ("P", 10), ("P", 11)]
</snippet></ROW><ROW><id>9745014</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>9745014</id><snippet>collections.deque()</snippet></ROW><ROW><id>9745014</id><snippet>new_episodes = []
for name, it in groupby(episodes, lambda x: x[0]):
    new_episodes.extend(deque(it, maxlen=2))
</snippet></ROW><ROW><id>9745014</id><snippet>new_episodes</snippet></ROW><ROW><id>9745014</id><snippet>[('N', 227), ('N', 228), ('P', 10), ('P', 11)]
</snippet></ROW><ROW><id>9745014</id><snippet>episodes</snippet></ROW><ROW><id>9745053</id><snippet>self</snippet></ROW><ROW><id>9745053</id><snippet>newhotspot()</snippet></ROW><ROW><id>9745053</id><snippet>def newhotspot(self, *args):
    ...
</snippet></ROW><ROW><id>9745053</id><snippet>self</snippet></ROW><ROW><id>9745053</id><snippet>args</snippet></ROW><ROW><id>9745109</id><snippet>inspect.getsource()</snippet></ROW><ROW><id>9745213</id><snippet>def quotedStringOrWord(pattern):
    return quotedString(pattern) | Word(pattern)
</snippet></ROW><ROW><id>9745790</id><snippet>None</snippet></ROW><ROW><id>9745790</id><snippet>returngene</snippet></ROW><ROW><id>9745790</id><snippet>population[each]</snippet></ROW><ROW><id>9745790</id><snippet>None</snippet></ROW><ROW><id>9745790</id><snippet>population[each]</snippet></ROW><ROW><id>9745790</id><snippet>None</snippet></ROW><ROW><id>9745790</id><snippet>population</snippet></ROW><ROW><id>9745790</id><snippet>None</snippet></ROW><ROW><id>9745790</id><snippet>chromosone.Chromosone(chromosoneSize)
</snippet></ROW><ROW><id>9745790</id><snippet>chromosone.Chromosone.makeChromo(newOrganism)
</snippet></ROW><ROW><id>9745790</id><snippet>None</snippet></ROW><ROW><id>9745819</id><snippet>&gt;&gt;&gt; ' '.join("Please \n don't \t hurt \x0b me.".split()) 
"Please don't hurt me."
</snippet></ROW><ROW><id>9745819</id><snippet>newLogFile = open('newLogFile.csv', 'w')
textFile = open('LogFile.txt', 'rb')
for row in textFile:
    newLogFile.write('\t'.join(row.split()))
</snippet></ROW><ROW><id>9745819</id><snippet>2012-03-16 ,13:47:30.465 ,-0400
</snippet></ROW><ROW><id>9745864</id><snippet>#!/usr/bin/env python
#file: child.py
import os
import random
import sys
import time

for i in range(10):
    print("%2d %s %s" % (int(sys.argv[1]), os.getpid(), i))
    sys.stdout.flush()
    time.sleep(random.random())
</snippet></ROW><ROW><id>9745864</id><snippet>select</snippet></ROW><ROW><id>9745864</id><snippet>#!/usr/bin/env python
from __future__ import print_function
from select     import select
from subprocess import Popen, PIPE

# start several subprocesses
processes = [Popen(['./child.py', str(i)], stdout=PIPE,
                   bufsize=1, close_fds=True,
                   universal_newlines=True)
             for i in range(5)]

# read output
timeout = 0.1 # seconds
while processes:
    # remove finished processes from the list (O(N**2))
    for p in processes[:]:
        if p.poll() is not None: # process ended
            print(p.stdout.read(), end='') # read the rest
            p.stdout.close()
            processes.remove(p)

    # wait until there is something to read
    rlist = select([p.stdout for p in processes], [],[], timeout)[0]

    # read a line from each process that has output ready
    for f in rlist:
        print(f.readline(), end='') #NOTE: it can block
</snippet></ROW><ROW><id>9745864</id><snippet>os.pipe()</snippet></ROW><ROW><id>9745864</id><snippet>#!/usr/bin/env python
from __future__ import print_function
import io
import os
import sys
from subprocess import Popen

ON_POSIX = 'posix' in sys.builtin_module_names

# create a pipe to get data
input_fd, output_fd = os.pipe()

# start several subprocesses
processes = [Popen([sys.executable, 'child.py', str(i)], stdout=output_fd,
                   close_fds=ON_POSIX) # close input_fd in children
             for i in range(5)]
os.close(output_fd) # close unused end of the pipe

# read output line by line as soon as it is available
with io.open(input_fd, 'r', buffering=1) as file:
    for line in file:
        print(line, end='')
#
for p in processes:
    p.wait()
</snippet></ROW><ROW><id>9745982</id><snippet>**</snippet></ROW><ROW><id>9745982</id><snippet>parameters</snippet></ROW><ROW><id>9745982</id><snippet>class Expression(object):
    def ReturnFirstParameter(self, parameters):
        return parameters['first']
</snippet></ROW><ROW><id>9745982</id><snippet>**</snippet></ROW><ROW><id>9745982</id><snippet>x.ReturnFirstParameter({'first': 1})
</snippet></ROW><ROW><id>9745982</id><snippet>**parameters</snippet></ROW><ROW><id>9745982</id><snippet>x.ReturnFirstParameter(first=1)
</snippet></ROW><ROW><id>9746113</id><snippet>time.sleep(0.1) 
</snippet></ROW><ROW><id>9746113</id><snippet>p.stdin.write(phrase + '\n')
</snippet></ROW><ROW><id>9746135</id><snippet>do</snippet></ROW><ROW><id>9746135</id><snippet># list comp, creates the list [0,1,2,3,4,5,6,7,8,9]
[i for i in range(10)]

# loop, does nothing
for i in range(10):
    i  # meh, just an expression which doesn't have an effect
</snippet></ROW><ROW><id>9746135</id><snippet>deque.extend</snippet></ROW><ROW><id>9746135</id><snippet>for</snippet></ROW><ROW><id>9746135</id><snippet>&gt;&gt;&gt; from collections import deque
&gt;&gt;&gt; consume = deque(maxlen=0).extend
&gt;&gt;&gt; consume(do(stuff) for stuff in all_stuff)
</snippet></ROW><ROW><id>9746291</id><snippet>itertools.groupby</snippet></ROW><ROW><id>9746291</id><snippet>max</snippet></ROW><ROW><id>9746291</id><snippet>&gt;&gt;&gt; lst = [['foo', 1, 2], ['asdf', 2, 5], ['bar', 1, 3]]
&gt;&gt;&gt; import itertools as it
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; [max(items, key=itemgetter(2)) 
     for _,items in it.groupby(sorted(lst, key=itemgetter(1)), key=itemgetter(1))]
[['bar', 1, 3], ['asdf', 2, 5]]
</snippet></ROW><ROW><id>9746432</id><snippet>import json

data = {
        'ids': [12, 3, 4, 5, 6]
}

req = urllib2.Request('http://abc.com/api/posts/create')
req.add_header('Content-Type', 'application/json')

response = urllib2.urlopen(req, json.dumps(data))
</snippet></ROW><ROW><id>9746432</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>9746642</id><snippet>xmpp['xep_0060'].subscribe('pubsub.example.com', 'blogupdates')
</snippet></ROW><ROW><id>9746642</id><snippet>bare=False
# Subscribe using a specific resource, and not the bare JID

subscribee='somejid@example.com'
# Subscribe a different JID to the node, if authorized

options=data_form
# Provide subscription options using a XEP-0004 data form
</snippet></ROW><ROW><id>9746642</id><snippet># Generic pubsub event handlers for all nodes
xmpp.add_event_handler('pubsub_publish', handler)
xmpp.add_event_handler('pubsub_retract', handler)
xmpp.add_event_handler('pubsub_purge', handler)
xmpp.add_event_handler('pubsub_delete', handler)

# Use custom-named events for certain nodes, in this case 
# the User Tune node from PEP.
xmpp['xep_0060'].map_node_event('http://jabber.org/protocol/tune', 'user_tune')
xmpp.add_event_handler('user_tune_publish', handler)
# ...
# The same suffixes as the pubsub_* events.
# These events are raised in addition to the pubsub_* events.
</snippet></ROW><ROW><id>9746642</id><snippet>def pubsub_publish(self, msg):
    # An event message could contain multiple items, but we break them up into
    # separate events for you to make it a bit easier.
    item = msg['pubsub_event']['items']['item']
    # Process item depending on application, like item['tune'], 
    # or the generic item['payload']
</snippet></ROW><ROW><id>9746642</id><snippet># Note that xmpp can be either a ClientXMPP or ComponentXMPP object.
xmpp['xep_0060'].map_node_event('blogupdates', 'blogupdates')
xmpp['xep_0060'].add_event_handler('blogupdates_publish', blogupdate_publish)
xmpp['xep_0060'].subscribe('pubsub.example.com', 'blogupdates')
# If using a component, you'll need to specify a JID when subscribing using:   
# ifrom="specific_jid@yourcomponent.example.com"

def blogupdate_publish(msg):
    """Handle blog updates as they come in."""
    update_xml = msg['pubsub_event']['items']['item']['payload']
    # Do stuff with the ElementTree XML object, update_xml
</snippet></ROW><ROW><id>9746678</id><snippet>time python prog.py</snippet></ROW><ROW><id>9746726</id><snippet>while(self.running == True)</snippet></ROW><ROW><id>9746726</id><snippet>def</snippet></ROW><ROW><id>9746726</id><snippet>self</snippet></ROW><ROW><id>9746726</id><snippet>NameError</snippet></ROW><ROW><id>9746726</id><snippet>pass</snippet></ROW><ROW><id>9746726</id><snippet>def run(self):</snippet></ROW><ROW><id>9746726</id><snippet>self</snippet></ROW><ROW><id>9746843</id><snippet>import numpy as np
from itertools import izip

vector = np.array([2.0, 2.24, 3.1, 4.768, 16.8, 16.9,23.5,24.0])
start = np.array([3.0,4.5,6.5,15.2])
end = np.array([7.3,16.2,17.7,25.8])
start_i = vector.searchsorted(start, 'left')
end_i = vector.searchsorted(end, 'right')
output = [vector[s:e] for s, e in izip(start_i, end_i)]
print output
[array([ 3.1  ,  4.768]), array([ 4.768]), array([ 16.8,  16.9]), array([ 16.8,  16.9,  23.5,  24. ])]
</snippet></ROW><ROW><id>9746843</id><snippet>from bisect import bisect_left, bisect_right
from itertools import izip

vector = [2.0, 2.24, 3.1, 4.768, 16.8, 16.9,23.5,24.0]
start = [3.0,4.5,6.5,15.2]
end = [7.3,16.2,17.7,25.8]
se = izip(start, end)
output = [vector[bisect_left(vector, s):bisect_right(vector, e)] for s, e in se]
print output
[[3.1, 4.768], [4.768], [16.8, 16.9], [16.8, 16.9, 23.5, 24.0]]
</snippet></ROW><ROW><id>9746863</id><snippet>conn.commit()</snippet></ROW><ROW><id>9746877</id><snippet>with open("directory", "r") as f:
    page = "\n".join("&lt;p&gt;%s&lt;/p&gt;" % line for line in f)
</snippet></ROW><ROW><id>9746877</id><snippet>with open("directory", "r") as f:
    page = '&lt;ul&gt;%s&lt;/ul&gt;' % "\n".join("&lt;li&gt;%s&lt;/li&gt;" % line for line in f)
</snippet></ROW><ROW><id>9746877</id><snippet>pre</snippet></ROW><ROW><id>9746877</id><snippet>with open('directory', 'r') as f:
    page = '&lt;pre&gt;%s&lt;/pre&gt;' % f.read()
</snippet></ROW><ROW><id>9746877</id><snippet>cgi.escape</snippet></ROW><ROW><id>9747013</id><snippet>fh  = open('Documents/import.txt').read()

for line in fh.split('\n'):
    print line.strip()
    splits = line.split()
    if  len(splits) ==1 and splits[0]== line.strip():
        splits = [item for item in line.strip().split(',') if item]
    print splits
</snippet></ROW><ROW><id>9747013</id><snippet>fh  = open('Documents/import.txt').read()
the_list = []
for line in fh.split('\n'):
    print line.strip()
    splits = line.split()
    if  len(splits) ==1 and splits[0]== line.strip():
        splits = line.strip().split(',')
    if splits:the_list.append(splits)

for i in range(len(the_list)):
    print the_list[i]
    if  the_list[i][-1]=='':
        the_list[i].pop(-1)
        the_list[i].extend(the_list[i+1])
        i += 1

print the_list
</snippet></ROW><ROW><id>9747250</id><snippet>if</snippet></ROW><ROW><id>9747250</id><snippet>if</snippet></ROW><ROW><id>9747250</id><snippet>X if C else Y</snippet></ROW><ROW><id>9747250</id><snippet>for</snippet></ROW><ROW><id>9747250</id><snippet>SyntaxError</snippet></ROW><ROW><id>9747250</id><snippet>AttributeError</snippet></ROW><ROW><id>9747250</id><snippet>if</snippet></ROW><ROW><id>9747250</id><snippet>setattr</snippet></ROW><ROW><id>9747250</id><snippet>__dict__</snippet></ROW><ROW><id>9747250</id><snippet>getattr</snippet></ROW><ROW><id>9747250</id><snippet>getattr</snippet></ROW><ROW><id>9747300</id><snippet>+</snippet></ROW><ROW><id>9747300</id><snippet>call(['c:/program files/ABBYY FineReader 10/finereader.exe'] + f)
</snippet></ROW><ROW><id>9747300</id><snippet>extend()</snippet></ROW><ROW><id>9747300</id><snippet>command = ['c:/program files/ABBYY FineReader 10/finereader.exe']
command.extend(f)
call(command)
</snippet></ROW><ROW><id>9747374</id><snippet>for character in text:
</snippet></ROW><ROW><id>9747374</id><snippet>def better_split(text,markersString):
    # simple and better way for 'for e in markerString...'
    markers = list(markersString)
    splited = []

    # there is no need to assign variable n, we all know it should be 1
    # n = 1    

    def iter_text(text):
        # check if text is an empty string,
        # NOTE this `text` will cover `text` in upper function as to local scope,
        # so it's actually the text everytime iter_text() get,
        # not the one better_split() get.
        if not text:
            return
        # [UPDATES 2012-03-17 01:07 EST]
        # add a flag to judge if there are markers in `text`
        _has_marker = False
        for character in text:
            if character in markers:
                # set `_has_marker` to True to indicate `text` has been handled
                _has_marker = True
                point = text.find(character)
                word = text[:point]
                splited.append(word)
                # check if text[point] is legal, to prevent raising of IndexError
                while point + 1 &lt;= len(text) and text[point] in markers:
                    point = point + 1
                text = text[point:]
                # break the loop when you find a marker
                # and change `text` according to it,
                # so that the new loop will get started with changed `text`
                break
        # if no marker was found in `text`, add the whole `text` to `splited`
        if not _has_marker:
            splited.append(text)
        else:
            iter_text(text)

    iter_text(text)

    print 'final splited = ', splited
</snippet></ROW><ROW><id>9747374</id><snippet>def better_split(s, seprators):
    assert isinstance(seprators, str), 'seprators must be string'
    buf = [s]
    for sep in seprators:
        for loop, text in enumerate(buf):
            buf[loop:loop+1] = [i for i in text.split(sep) if i]
    return buf
</snippet></ROW><ROW><id>9747417</id><snippet>cwd='/path/'</snippet></ROW><ROW><id>9747417</id><snippet>subprocess.call</snippet></ROW><ROW><id>9747417</id><snippet>'/path/'</snippet></ROW><ROW><id>9747417</id><snippet>import os
f = [os.path.basename(x) for x in f]
</snippet></ROW><ROW><id>9747482</id><snippet>chr((x &gt;&gt; 24) &amp; 255) + chr((x &gt;&gt; 16) &amp; 255) + chr((x &gt;&gt; 8) &amp; 255) + chr(x &amp; 255)</snippet></ROW><ROW><id>9747482</id><snippet>i &gt;&gt; n</snippet></ROW><ROW><id>9747482</id><snippet>i // ( 2 ** n)</snippet></ROW><ROW><id>9747482</id><snippet>//</snippet></ROW><ROW><id>9747482</id><snippet>i &amp; 255</snippet></ROW><ROW><id>9747482</id><snippet>i % 256</snippet></ROW><ROW><id>9747482</id><snippet>+</snippet></ROW><ROW><id>9747482</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; def pack_be_I(x):
...     return (
...         chr((x &gt;&gt; 24) &amp; 255) +
...         chr((x &gt;&gt; 16) &amp; 255) +
...         chr((x &gt;&gt;  8) &amp; 255) +
...         chr(x         &amp; 255)
...         )
...
&gt;&gt;&gt; for anint in (4, 8, 10, 0x01020304, 0x04030201):
...     packed = pack_be_I(anint)
...     hexbytes = binascii.hexlify(packed)
...     print anint, repr(packed), hexbytes
...
4 '\x00\x00\x00\x04' 00000004
8 '\x00\x00\x00\x08' 00000008
10 '\x00\x00\x00\n' 0000000a
16909060 '\x01\x02\x03\x04' 01020304
67305985 '\x04\x03\x02\x01' 04030201
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9747482</id><snippet>10</snippet></ROW><ROW><id>9747482</id><snippet>'\x00\x00\x00\n'</snippet></ROW><ROW><id>9747482</id><snippet>'\x0a'</snippet></ROW><ROW><id>9747482</id><snippet>'\n'</snippet></ROW><ROW><id>9747482</id><snippet>chr(10)</snippet></ROW><ROW><id>9747482</id><snippet>'wb'</snippet></ROW><ROW><id>9747482</id><snippet>'w'</snippet></ROW><ROW><id>9747804</id><snippet>python</snippet></ROW><ROW><id>9747804</id><snippet>spyder</snippet></ROW><ROW><id>9747804</id><snippet>PATH</snippet></ROW><ROW><id>9747804</id><snippet>c:\some\dir&gt; python some_file
</snippet></ROW><ROW><id>9747804</id><snippet>python</snippet></ROW><ROW><id>9747804</id><snippet>c:\some\dir\some_file</snippet></ROW><ROW><id>9747804</id><snippet>some_file</snippet></ROW><ROW><id>9747804</id><snippet>c:\some\dir&gt; python another_dir\some_file
</snippet></ROW><ROW><id>9747804</id><snippet>python</snippet></ROW><ROW><id>9747804</id><snippet>c:\some\dir\another_dir\some_file</snippet></ROW><ROW><id>9747804</id><snippet>another_dir</snippet></ROW><ROW><id>9747804</id><snippet>some_file</snippet></ROW><ROW><id>9747804</id><snippet>c:\some\dir&gt; python C:\path\to\some_file
</snippet></ROW><ROW><id>9747804</id><snippet>python</snippet></ROW><ROW><id>9747804</id><snippet>C:\path\to\some_file</snippet></ROW><ROW><id>9747804</id><snippet>C:\path\to</snippet></ROW><ROW><id>9747804</id><snippet>python spyder --reset</snippet></ROW><ROW><id>9747804</id><snippet>spyder</snippet></ROW><ROW><id>9747804</id><snippet>scripts</snippet></ROW><ROW><id>9747804</id><snippet>spyder</snippet></ROW><ROW><id>9747804</id><snippet>spyder.bat</snippet></ROW><ROW><id>9747804</id><snippet>spyder.bat</snippet></ROW><ROW><id>9747804</id><snippet>PATH</snippet></ROW><ROW><id>9747804</id><snippet>c:\any\dir&gt; spyder
</snippet></ROW><ROW><id>9747804</id><snippet>python spyder --reset</snippet></ROW><ROW><id>9747804</id><snippet>c:\any\dir&gt; spyder --reset
</snippet></ROW><ROW><id>9747804</id><snippet>spyderlib.spyder.main()</snippet></ROW><ROW><id>9747804</id><snippet>spyder</snippet></ROW><ROW><id>9747804</id><snippet>python -c "from spyderlib.spyder import main; main()" --reset
</snippet></ROW><ROW><id>9748290</id><snippet>itertools.product</snippet></ROW><ROW><id>9748290</id><snippet>itertools.chain</snippet></ROW><ROW><id>9748290</id><snippet>numbers = '0123456789'
alnum = numbers + 'abcdefghijklmnopqrstuvwxyz'
</snippet></ROW><ROW><id>9748290</id><snippet>itertools.product</snippet></ROW><ROW><id>9748290</id><snippet>len2 = itertools.product(numbers, alnum) # length 2
len3 = itertools.product(numbers, alnum, alnum) # length 3
...
</snippet></ROW><ROW><id>9748290</id><snippet>[''.join(p) for p in itertools.chain(len2, len3, len4, len5, len6)]
</snippet></ROW><ROW><id>9748338</id><snippet>re.findall</snippet></ROW><ROW><id>9748338</id><snippet>(?:...)</snippet></ROW><ROW><id>9748338</id><snippet>pat = "[\w.]+ *@ *\w+(?:\.\w+)*"
re.findall(pat, 'abc@cs.stansoft.edu.com .rtrt.. myacc@gmail.com ')
</snippet></ROW><ROW><id>9748537</id><snippet>alive = True

class MyThread(threading.Thread):
    def run():
        while(alive):
            #do work here
</snippet></ROW><ROW><id>9748537</id><snippet>alive = False
</snippet></ROW><ROW><id>9748537</id><snippet>Ctrl+C</snippet></ROW><ROW><id>9748537</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>9748537</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>9748652</id><snippet>enable-app-engine-project</snippet></ROW><ROW><id>9748703</id><snippet>#file: cyclone-ssl.py
import cyclone.web

class IndexHandler(cyclone.web.RequestHandler):
    def get(self):
        self.write("hello world")

factory = cyclone.web.Application([(r"/", IndexHandler)])
portstr = "ssl:4443:privateKey=server_key.pem:certKey=server_cert.pem"

# make twisted app
from twisted.application import service, strports

application = service.Application("cyclone-ssl")
strports.service(portstr, factory).setServiceParent(application)
</snippet></ROW><ROW><id>9748703</id><snippet>$ twistd -ny cyclone-ssl.py
</snippet></ROW><ROW><id>9748703</id><snippet>portstr</snippet></ROW><ROW><id>9748703</id><snippet>4443</snippet></ROW><ROW><id>9748703</id><snippet>server_key.pem</snippet></ROW><ROW><id>9748703</id><snippet>server_cert.pem</snippet></ROW><ROW><id>9748715</id><snippet>if 'property' in a.__dict__:
    a.property
</snippet></ROW><ROW><id>9748715</id><snippet>class A(object):
    @property
    def prop(self):
        return 3

a = A()
print "'prop' in a.__dict__ =", 'prop' in a.__dict__
print "hasattr(a, 'prop') =", hasattr(a, 'prop')
print "a.prop =", a.prop
</snippet></ROW><ROW><id>9748715</id><snippet>__dict__</snippet></ROW><ROW><id>9748715</id><snippet># Cached attribute
try:
    big_object = self.big_object
    # or getattr(self, 'big_object')
except AttributeError:
    # Creating the Big Object takes five days
    # and three hundred pounds of over-ripe melons.
    big_object = CreateBigObject()
    self.big_object = big_object
big_object.do_something()
</snippet></ROW><ROW><id>9748715</id><snippet>try:
    f = open('some_file', 'r')
except IOError as ex:
    if ex.errno != errno.ENOENT:
        raise
    # it doesn't exist
else:
    # it does and it's open
</snippet></ROW><ROW><id>9748715</id><snippet>try:
    i = int(s)
except ValueError:
    print "Not an integer! Please try again."
    sys.exit(1)
</snippet></ROW><ROW><id>9748715</id><snippet>try:
    import readline
except ImportError:
    pass
</snippet></ROW><ROW><id>9748715</id><snippet>hasattr</snippet></ROW><ROW><id>9748715</id><snippet># Cached attribute
if not hasattr(self, 'big_object'):
    big_object = CreateBigObject()
    self.big_object = CreateBigObject()
big_object.do_something()
</snippet></ROW><ROW><id>9748715</id><snippet>hasattr</snippet></ROW><ROW><id>9748715</id><snippet>hasattr</snippet></ROW><ROW><id>9748715</id><snippet>try/except</snippet></ROW><ROW><id>9748715</id><snippet>hasattr</snippet></ROW><ROW><id>9748715</id><snippet>AttributeError</snippet></ROW><ROW><id>9748715</id><snippet>hasattr</snippet></ROW><ROW><id>9748715</id><snippet>try/except</snippet></ROW><ROW><id>9748715</id><snippet>LBYL</snippet></ROW><ROW><id>9748715</id><snippet># Seems rather fragile...
if re.match('^(:?0|-?[1-9][0-9]*)$', s):
    i = int(s)
else:
    print "Not an integer! Please try again."
    sys.exit(1)
</snippet></ROW><ROW><id>9748715</id><snippet>if os.path.isfile('some_file'):
    # At this point, some other program could
    # delete some_file...
    f = open('some_file', 'r')
</snippet></ROW><ROW><id>9748715</id><snippet>getattr</snippet></ROW><ROW><id>9748715</id><snippet>try/except</snippet></ROW><ROW><id>9748715</id><snippet>x = getattr(self, 'x', default_value)
</snippet></ROW><ROW><id>9748715</id><snippet>x = getattr(self, 'attr', None)
if x is None:
    x = CreateDefaultValue()
    self.attr = x
</snippet></ROW><ROW><id>9748715</id><snippet>None</snippet></ROW><ROW><id>9748715</id><snippet>sentinel = object()

x = getattr(self, 'attr', sentinel)
if x is sentinel:
    x = CreateDefaultValue()
    self.attr = x
</snippet></ROW><ROW><id>9748715</id><snippet>getattr</snippet></ROW><ROW><id>9748715</id><snippet>hasattr</snippet></ROW><ROW><id>9748715</id><snippet>try/except</snippet></ROW><ROW><id>9748715</id><snippet>try/except</snippet></ROW><ROW><id>9748715</id><snippet>hasattr/getattr</snippet></ROW><ROW><id>9749169</id><snippet>from django import forms

class PictureForm(forms.ModelForm):
    def clean_file(self,form):
        if image:
            if image._size &gt; settings.MAX_IMAGE_SIZE:
            raise ValidationError("Image file too large ( &gt; 20mb )")
        else:
            raise ValidationError("Couldn't read uploaded image")

    class Meta:
        model = Picture
</snippet></ROW><ROW><id>9749169</id><snippet>class PictureCreateView(CreateView):
    form_class = PictureForm

    # .... snip
</snippet></ROW><ROW><id>9749222</id><snippet>uwsgi_intercept_errors on;</snippet></ROW><ROW><id>9749222</id><snippet>uwsgi</snippet></ROW><ROW><id>9749738</id><snippet>import itertools

result = []
for pair in itertools.combinations(a, 2):
    result.append(xor(pair[0], pair[1]))
</snippet></ROW><ROW><id>9749738</id><snippet> result = [xor(*p) for p in itertools.combinations(a, 2)]
</snippet></ROW><ROW><id>9749800</id><snippet>from __future__ import unicode_literals
</snippet></ROW><ROW><id>9749800</id><snippet>(u"TEXT %s\nENDQ\n" % f_str.replace(u"\n", u" ")).encode("utf-8")
</snippet></ROW><ROW><id>9749897</id><snippet>quality_list =  ['Flaming', 'Frozen', 'etc.']
quality = random.choice(quality_list)

item_list = ['Sword', 'Dagger', 'Mace', 'etc.']
item = random.choice(item_list)


hot_qualities = ['Flaming', ...]
cold_qualities = ['Frozen', ...]
hot_elements = ['Fire', 'Inferno']
cold_elements = ['Cold', 'Frost']

if quality in hot_qualities:
    element = random.choice(hot_elements)
elif quality in cold_qualities:
    element = random.choice(cold_elements)

# NB this is Python 2.X's print and string format, adjust accordingly for 3.X
print "%s %s of %s" % (quality, item, element)
</snippet></ROW><ROW><id>9750347</id><snippet>if isinstance(encObject, unicode):
                           myStr = encObject.encode('utf-8')   
</snippet></ROW><ROW><id>9750495</id><snippet>__del__</snippet></ROW><ROW><id>9750495</id><snippet>__del__()</snippet></ROW><ROW><id>9750495</id><snippet>__del__()</snippet></ROW><ROW><id>9750495</id><snippet>Robot.population -= 1</snippet></ROW><ROW><id>9750658</id><snippet>http.client</snippet></ROW><ROW><id>9750658</id><snippet>HEAD</snippet></ROW><ROW><id>9750658</id><snippet>content-type</snippet></ROW><ROW><id>9750658</id><snippet>text/html</snippet></ROW><ROW><id>9750658</id><snippet>GET</snippet></ROW><ROW><id>9750932</id><snippet>import numpy as np
import matplotlib.pyplot as plt

iris = np.recfromcsv('iris.csv')
names = set(iris['class'])

x,y = iris['sepal_length'],  iris['sepal_width']

for name in names:
    cond = iris['class'] == name
    plt.plot(x[cond], y[cond], linestyle='none', marker='o', label=name)

plt.legend(numpoints=1)
plt.show()
</snippet></ROW><ROW><id>9750932</id><snippet>scatter</snippet></ROW><ROW><id>9750932</id><snippet>plot</snippet></ROW><ROW><id>9750932</id><snippet>plot</snippet></ROW><ROW><id>9751085</id><snippet>1</snippet></ROW><ROW><id>9751085</id><snippet>int</snippet></ROW><ROW><id>9751085</id><snippet>def foo(): pass</snippet></ROW><ROW><id>9751085</id><snippet>foo</snippet></ROW><ROW><id>9751085</id><snippet>function</snippet></ROW><ROW><id>9751085</id><snippet>class</snippet></ROW><ROW><id>9751085</id><snippet>type</snippet></ROW><ROW><id>9751085</id><snippet>class Foo:
  string = "foo1"

class Foo:
  string = "foo2"
</snippet></ROW><ROW><id>9751085</id><snippet>a = 1
a = 2
</snippet></ROW><ROW><id>9751085</id><snippet>type</snippet></ROW><ROW><id>9751085</id><snippet>type</snippet></ROW><ROW><id>9751085</id><snippet>type</snippet></ROW><ROW><id>9751085</id><snippet>Foo = type('Foo', (), {string: 'foo1'})
</snippet></ROW><ROW><id>9751139</id><snippet>myModule</snippet></ROW><ROW><id>9751139</id><snippet>import myModule
pValue = myModule.doSomething()
print pValue
</snippet></ROW><ROW><id>9751139</id><snippet>#include &lt;Python.h&gt;

- (void)example {

    PyObject *pName, *pModule, *pDict, *pFunc, *pArgs, *pValue;
    NSString *nsString;

    // Initialize the Python Interpreter
    Py_Initialize();

    // Build the name object
    pName = PyString_FromString("myModule");

    // Load the module object
    pModule = PyImport_Import(pName);

    // pDict is a borrowed reference 
    pDict = PyModule_GetDict(pModule);

    // pFunc is also a borrowed reference 
    pFunc = PyDict_GetItemString(pDict, "doSomething");

    if (PyCallable_Check(pFunc)) {
        pValue = PyObject_CallObject(pFunc, NULL);
        if (pValue != NULL) {
            if (PyObject_IsInstance(pValue, (PyObject *)&amp;PyUnicode_Type)) {
                    nsString = [NSString stringWithCharacters:((PyUnicodeObject *)pValue)-&gt;str length:((PyUnicodeObject *) pValue)-&gt;length];
            } else if (PyObject_IsInstance(pValue, (PyObject *)&amp;PyBytes_Type)) {
                    nsString = [NSString stringWithUTF8String:((PyBytesObject *)pValue)-&gt;ob_sval];
            } else {
                    /* Handle a return value that is neither a PyUnicode_Type nor a PyBytes_Type */
            }
            Py_XDECREF(pValue);
        } else {
            PyErr_Print();
        }
    } else {
        PyErr_Print();
    }

    // Clean up
    Py_XDECREF(pModule);
    Py_XDECREF(pName);

    // Finish the Python Interpreter
    Py_Finalize();

    NSLog(@"%@", nsString);
}
</snippet></ROW><ROW><id>9751146</id><snippet>OuterHtml</snippet></ROW><ROW><id>9751146</id><snippet>DocumentNode</snippet></ROW><ROW><id>9751146</id><snippet>var webGet = new HtmlWeb();
var document = webGet.Load("http://stackoverflow.com");
Console.WriteLine(document.DocumentNode.OuterHtml);
</snippet></ROW><ROW><id>9751369</id><snippet>import matplotlib.pyplot as plt

fig, ax = plt.subplots()

ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)

plt.show()
</snippet></ROW><ROW><id>9751369</id><snippet>ax.xaxis.set_ticks_position('bottom')
ax.yaxis.set_ticks_position('left')
</snippet></ROW><ROW><id>9751386</id><snippet>glDeleteBuffers()</snippet></ROW><ROW><id>9751386</id><snippet>pointer(vbo_id)</snippet></ROW><ROW><id>9751386</id><snippet>glGenBuffers()</snippet></ROW><ROW><id>9751437</id><snippet>if all ( [ dictionary[class.methodclass()][constant - 1] ==  
           dictionary[class.methodclass()][ noConstant]  
           for noConstant in range(constant - 2,  constant - 6, -1 )  ]
       ):
    blablabla
</snippet></ROW><ROW><id>9751490</id><snippet>from urllib2 import Request, urlopen
from pyPdf import PdfFileWriter, PdfFileReader
from StringIO import StringIO

url = "http://www.silicontao.com/ProgrammingGuide/other/beejnet.pdf"
writer = PdfFileWriter()

remoteFile = urlopen(Request(url)).read()
memoryFile = StringIO(remoteFile)
pdfFile = PdfFileReader(memoryFile)

for pageNum in xrange(pdfFile.getNumPages()):
        currentPage = pdfFile.getPage(pageNum)
        #currentPage.mergePage(watermark.getPage(0))
        writer.addPage(currentPage)


outputStream = open("output.pdf","wb")
writer.write(outputStream)
outputStream.close()
</snippet></ROW><ROW><id>9751566</id><snippet>__init__</snippet></ROW><ROW><id>9751566</id><snippet>class Listener:
    def __init__(self, id):
        self.id = id
        self.artists = []

    def addArtist(self, artist, plays):
        print self.id # debugging...
        print "pre: ", self.artists
        self.artists.append(artist)
        print "post: ", self.artists
</snippet></ROW><ROW><id>9751566</id><snippet>class A:
  x=5
</snippet></ROW><ROW><id>9751566</id><snippet>&gt;&gt;&gt; a=A()
&gt;&gt;&gt; print a.x
5
</snippet></ROW><ROW><id>9751566</id><snippet>&gt;&gt;&gt; print A.x
5
</snippet></ROW><ROW><id>9751566</id><snippet>&gt;&gt;&gt; a1=A()
&gt;&gt;&gt; a2=A()
&gt;&gt;&gt; a1.x=6
&gt;&gt;&gt; print a1.x
6
&gt;&gt;&gt; print a2.x
5
</snippet></ROW><ROW><id>9751566</id><snippet>&gt;&gt;&gt; print A.x
5
</snippet></ROW><ROW><id>9751566</id><snippet>class A:
  l=[]

&gt;&gt;&gt; a1=A()
&gt;&gt;&gt; print a1.l
[]
&gt;&gt;&gt; a2=A()
&gt;&gt;&gt; print a2.l
[]
&gt;&gt;&gt; a1.l.append(5)
&gt;&gt;&gt; print a1.l
[5]
&gt;&gt;&gt; print a2.l
[5]
&gt;&gt;&gt; print A.l
[5]
</snippet></ROW><ROW><id>9751779</id><snippet>round</snippet></ROW><ROW><id>9751779</id><snippet>__round__</snippet></ROW><ROW><id>9751779</id><snippet>__future__</snippet></ROW><ROW><id>9751779</id><snippet>&gt;&gt;&gt; class X(object):
...     def __round__(self, n=0): return 1.
...     def __float__(self): return 2.
... 
&gt;&gt;&gt; x = X()
&gt;&gt;&gt; round(x)
2.0
&gt;&gt;&gt; float(x)
2.0
&gt;&gt;&gt; old_round = round
&gt;&gt;&gt; def round(x, n=0):
...     try:
...             return x.__round__(n)
...     except AttributeError:
...             return old_round(x)
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; round(x)
1.0
&gt;&gt;&gt; float(x)
2.0
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9751779</id><snippet>round()</snippet></ROW><ROW><id>9751779</id><snippet>round(2.5)</snippet></ROW><ROW><id>9751779</id><snippet>2</snippet></ROW><ROW><id>9751779</id><snippet>3</snippet></ROW><ROW><id>9751779</id><snippet>round(x[, n])()</snippet></ROW><ROW><id>9751779</id><snippet>x.__round__([n])</snippet></ROW><ROW><id>9751779</id><snippet>x</snippet></ROW><ROW><id>9751828</id><snippet>__name__</snippet></ROW><ROW><id>9751828</id><snippet>__name__</snippet></ROW><ROW><id>9751828</id><snippet>_getattr__</snippet></ROW><ROW><id>9751828</id><snippet>__name__</snippet></ROW><ROW><id>9751828</id><snippet>...
def printName(self):
    Base.printMsg('#', self.__class__.__name__)
    return
...
</snippet></ROW><ROW><id>9751922</id><snippet>tell()</snippet></ROW><ROW><id>9751990</id><snippet>value += d[i] * pow(size, i)
</snippet></ROW><ROW><id>9751990</id><snippet>math.pow</snippet></ROW><ROW><id>9751990</id><snippet>pow</snippet></ROW><ROW><id>9751990</id><snippet>pow</snippet></ROW><ROW><id>9751990</id><snippet>**</snippet></ROW><ROW><id>9751990</id><snippet>def decode(s):
    d = [reverse_dictionary[c] for c in s]
    result, power = 0, 1
    for x in d:
        result += x * power
        power *= size
    return result
</snippet></ROW><ROW><id>9751990</id><snippet>print decode(encode(88291326719355847026813766449910520462))
# =&gt; 88291326719355847026813766449910520462
</snippet></ROW><ROW><id>9752105</id><snippet>declarative</snippet></ROW><ROW><id>9752105</id><snippet>relationships</snippet></ROW><ROW><id>9752105</id><snippet># models.py
class User(object):
    pass

----

# mappings.py
from sqlalchemy import Table, MetaData, Column, ForeignKey, Integer, String
from sqlalchemy.orm import mapper
from models import User

metadata = MetaData()

user = Table('user', metadata,
            Column('id', Integer, primary_key=True),
            Column('name', String(50)),
            Column('fullname', String(50)),
            Column('password', String(12))
        )

mapper(User, user)
</snippet></ROW><ROW><id>9752105</id><snippet>configure</snippet></ROW><ROW><id>9752182</id><snippet># show the result
result = cur.fetchall()
for item in result:
    print repr(item)
</snippet></ROW><ROW><id>9752182</id><snippet># show the result
result = cur.fetchall()
for item in result:
    print item
</snippet></ROW><ROW><id>9752182</id><snippet>str</snippet></ROW><ROW><id>9752336</id><snippet>0</snippet></ROW><ROW><id>9752336</id><snippet>CountChars</snippet></ROW><ROW><id>9752336</id><snippet>name.seek(0)</snippet></ROW><ROW><id>9752336</id><snippet>CountChars</snippet></ROW><ROW><id>9752419</id><snippet>bisect</snippet></ROW><ROW><id>9752419</id><snippet>from operator import itemgetter
import bisect

data = ((0, 16777215, 'ZZ'), (1000013824, 1000079359, 'CN'), (1000079360, 1000210431, 'JP'), (1000210432, 1000341503, 'JP'), (1000341504, 1000603647, 'IN'))
sorted_data = sorted(data, key=itemgetter(0))
lower_bounds = [lower for lower,_,_ in data]

def lookup_ip(ip):
    index = bisect.bisect(lower_bounds, ip) - 1
    if index &lt; 0:
        return None
    _, upper, country = sorted_data[index]
    return country if ip &lt;= upper else None

print(lookup_ip(-1))          # =&gt; None
print(lookup_ip(999))         # =&gt; 'ZZ'
print(lookup_ip(16777216))    # =&gt; None
print(lookup_ip(1000013824))  # =&gt; 'CN'
print(lookup_ip(1000400000))  # =&gt; 'IN'
</snippet></ROW><ROW><id>9752419</id><snippet>O(log n)</snippet></ROW><ROW><id>9752419</id><snippet>O(n)</snippet></ROW><ROW><id>9752485</id><snippet>cur.description</snippet></ROW><ROW><id>9752485</id><snippet>col_names = [i[0] for i in cur.description]
</snippet></ROW><ROW><id>9752570</id><snippet>socket.sendto</snippet></ROW><ROW><id>9752570</id><snippet>unicode</snippet></ROW><ROW><id>9752570</id><snippet>outSock.sendto(s.encode('utf-8'), self.serveraddr)
</snippet></ROW><ROW><id>9752570</id><snippet>recvfrom</snippet></ROW><ROW><id>9752570</id><snippet>unicode_string = s.decode('utf-8')
</snippet></ROW><ROW><id>9752570</id><snippet>bytes</snippet></ROW><ROW><id>9752570</id><snippet>unicode</snippet></ROW><ROW><id>9752677</id><snippet>cursor.execute(sql2(f,l,r))
</snippet></ROW><ROW><id>9752677</id><snippet>cursor.execute( sql2, (f,l,r) )
</snippet></ROW><ROW><id>9752677</id><snippet>this_is_how_we_call_a_func()</snippet></ROW><ROW><id>9752677</id><snippet>sql2</snippet></ROW><ROW><id>9752677</id><snippet>&gt;&gt;&gt; dir(sql2)
['__add__', '__class__', '__contains__', '__delattr__', ... other stuff

&gt;&gt;&gt; def my_func(): pass
...
&gt;&gt;&gt; dir(my_func)
['__call__', '__class__', '__closure__', '__code__', ... other stuff
 ^^^^^^^^^^
</snippet></ROW><ROW><id>9752811</id><snippet>task.request.retries</snippet></ROW><ROW><id>9752811</id><snippet>min</snippet></ROW><ROW><id>9752811</id><snippet>from celery.task import current, task

@task
def update_status(auth, status):
    try:
        Twitter(auth).update_status(status)
    except Twitter.WhaleFail as exc:
        current.retry(exc=exc, countdown=min(2 ** current.request.retries, 128))
</snippet></ROW><ROW><id>9752811</id><snippet>current</snippet></ROW><ROW><id>9752811</id><snippet>update_status</snippet></ROW><ROW><id>9752868</id><snippet>/Users/me/Developer/Cellar/python/2.7.2/lib/python2.7</snippet></ROW><ROW><id>9752868</id><snippet>setup.py install</snippet></ROW><ROW><id>9752868</id><snippet>/Library/Frameworks/Python.framework/Versions/...</snippet></ROW><ROW><id>9752970</id><snippet>dict</snippet></ROW><ROW><id>9752970</id><snippet>def select_choice():
     ...
        return (i, card)

my_i, my_card = select_choice()
</snippet></ROW><ROW><id>9753352</id><snippet>reduce(lambda x,y:ord(x)+ord(y),list("BOY"))
</snippet></ROW><ROW><id>9753352</id><snippet>'B' 'O' 'Y'
145 'Y'
</snippet></ROW><ROW><id>9753352</id><snippet>ord(145) + ord('Y')</snippet></ROW><ROW><id>9753352</id><snippet>reduce(lambda x, y: x + ord(y), "BOY", 0)
</snippet></ROW><ROW><id>9753352</id><snippet>0 'B' 'O' 'Y'
66 'O' 'Y'
145 'Y'
234
</snippet></ROW><ROW><id>9753352</id><snippet>sum(map(ord, "BOY"))
</snippet></ROW><ROW><id>9753886</id><snippet>help(your_function)</snippet></ROW><ROW><id>9753886</id><snippet>def show_elements(elements):
    """Shows elements of the passed argument
    """
    for element in elements:
        print element
</snippet></ROW><ROW><id>9753886</id><snippet>elements</snippet></ROW><ROW><id>9753886</id><snippet>list</snippet></ROW><ROW><id>9753886</id><snippet>list</snippet></ROW><ROW><id>9753886</id><snippet>def show_elements(list):
    """Shows elements of the passed argument
    """
    for element in list:
        print element
</snippet></ROW><ROW><id>9753886</id><snippet>list</snippet></ROW><ROW><id>9753886</id><snippet>list</snippet></ROW><ROW><id>9753886</id><snippet>def funca():
    local_val1 = 'some value1'
    local_val2 = 'some value2'
    def funcb(local_val1=local_val1):
        # local_val1 is accessible here, even though local_val2 is not
        ...
    ...
</snippet></ROW><ROW><id>9754021</id><snippet>list_a</snippet></ROW><ROW><id>9754021</id><snippet>list_a.pop()</snippet></ROW><ROW><id>9754021</id><snippet>int</snippet></ROW><ROW><id>9754021</id><snippet>'6G'</snippet></ROW><ROW><id>9754021</id><snippet>'6I'</snippet></ROW><ROW><id>9754021</id><snippet>b_value = list_b[-1]
a_value = list_a.pop()

ok = int(b_value[0]) + 1 == int(a_value[0]) and b_value[1] == a_value[1]
</snippet></ROW><ROW><id>9754051</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; x = [1,2,3,2,4,1,2,5,7,2]
&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; for i in x:
        d[i] += 1

&gt;&gt;&gt; dict(d)
{1: 2, 2: 4, 3: 1, 4: 1, 5: 1, 7: 1}
</snippet></ROW><ROW><id>9754051</id><snippet>collections.Counter</snippet></ROW><ROW><id>9754225</id><snippet># -*- coding: utf-8 -*-
import pygame
import multiprocessing
from time import sleep



def init():
    pygame.init()
    screen = pygame.display.set_mode((320,240))
    return screen

def main():
    screen = init()
    while True:
        pygame.event.pump()
        event =  pygame.event.poll()
        if event.type != pygame.NOEVENT:
            print event


class Multigame(multiprocessing.Process):
    def run(self):
        return main()

for i in range(3):
    Multigame().start()

while True:
    sleep(1)
</snippet></ROW><ROW><id>9754238</id><snippet>pylab.ion()</snippet></ROW><ROW><id>9754238</id><snippet>pylab.show()</snippet></ROW><ROW><id>9754238</id><snippet>show</snippet></ROW><ROW><id>9754423</id><snippet>import ctypes as c
import numpy as np
import multiprocessing as mp

n, m = 2, 3
mp_arr = mp.Array(c.c_double, n*m) # shared, can be used from multiple processes
# then in each new process create a new numpy array using:
arr = np.frombuffer(mp_arr.get_obj()) # mp_arr and arr share the same memory
# make it two-dimensional
b = arr.reshape((n,m)) # b and arr share the same memory
</snippet></ROW><ROW><id>9754423</id><snippet>multiprocessing.Manager</snippet></ROW><ROW><id>9754423</id><snippet>from multiprocessing import Process, Manager

def f(L):
    row = L[0] # take the 1st row
    row.append(10) # change it
    L[0] = row #NOTE: important: copy the row back (otherwise parent
               #process won't see the changes)

if __name__ == '__main__':
    manager = Manager()

    lst = manager.list()
    lst.append([1])
    lst.append([2, 3])
    print(lst) # before: [[1], [2, 3]]

    p = Process(target=f, args=(lst,))
    p.start()
    p.join()

    print(lst) # after: [[1, 10], [2, 3]]
</snippet></ROW><ROW><id>9754438</id><snippet>gScore, bScore, yScore =  
          [sum(map(int, scores)) for scores in (data[n::4] for n in range(1, 4))]
</snippet></ROW><ROW><id>9754438</id><snippet>data[::4]</snippet></ROW><ROW><id>9754547</id><snippet>gevent/libevent.h:9: fatal error: event.h: No such file or directory
</snippet></ROW><ROW><id>9754547</id><snippet>libevent-dev</snippet></ROW><ROW><id>9754551</id><snippet>myrange = range(1,4)
mylist = ['a','b','c']
for each in myrange:
    print str(each)+mylist[each-1],
</snippet></ROW><ROW><id>9754622</id><snippet>goal_resource = GoalResource
</snippet></ROW><ROW><id>9754622</id><snippet>goal_resource = GoalResource()
</snippet></ROW><ROW><id>9754814</id><snippet>import json
import urllib
import urllib2

# make query
query = urllib.urlencode(dict(q="blue angel", rpp=5, include_entities=1,
                              result_type="mixed"))  
# make request
resp = urllib2.urlopen("http://search.twitter.com/search.json?" + query)

# make dictionary (parse json response)
d = json.load(resp)
</snippet></ROW><ROW><id>9754814</id><snippet>gevent</snippet></ROW><ROW><id>9754814</id><snippet>import gevent
import gevent.monkey; gevent.monkey.patch_all() # patch stdlib

import json
import urllib
import urllib2

def f(querystr):
    query = urllib.urlencode(dict(q=querystr, rpp=5, include_entities=1,
                                  result_type="mixed"))
    resp = urllib2.urlopen("http://search.twitter.com/search.json?" + query)
    d = json.load(resp)
    print('number of results %d' % (len(d['results']),))

jobs = [gevent.spawn(f, q) for q in ['blue angel', 'another query']]
gevent.joinall(jobs) # wait for completion
</snippet></ROW><ROW><id>9754888</id><snippet>codecs.open()</snippet></ROW><ROW><id>9754915</id><snippet> button[i] = ttk.Button(loadProject, text=data_files[i], command = lambda i=data_files[i]:load(i)).grid(column=1, row=i, sticky=W)  
</snippet></ROW><ROW><id>9754915</id><snippet>class Command:
            def __init__(self, callback, *args, **kwargs):
                    self.callback = callback
                    self.args = args
                    self.kwargs = kwargs

            def __call__(self):
                    return(self.callback(*self.args, **self.kwargs))
</snippet></ROW><ROW><id>9754915</id><snippet>button[i] = ttk.Button(loadProject, text=data_files[i], command = Command(load,data_files[i])).grid(column=1, row=i, sticky=W)     
</snippet></ROW><ROW><id>9754915</id><snippet>def load(myFile):                
            spamReader = csv.reader(open(myFile))
            for row in spamReader:
                    a = list(row)

            ttk.Label(loadProject, text=(a[0])).grid(column=4, row=0, sticky=W)
            ttk.Label(loadProject, text=("\n"+a[1])).grid(column=4, row=1, sticky=W)
            ttk.Label(loadProject, text=("\n"+a[2])).grid(column=4, row=2, sticky=W)
            ttk.Label(loadProject, text=(a[3])).grid(column=4, row=3, sticky=W)
            ttk.Label(loadProject, text=(a[4])).grid(column=4, row=4, sticky=W)
            ttk.Label(loadProject, text=("\n"+a[5])).grid(column=4, row=5, sticky=W)
            ttk.Label(loadProject, text=("\n"+a[6])).grid(column=4, row=6, sticky=W)
            ttk.Label(loadProject, text=("\n\n"+a[7])).grid(column=4, row=7, sticky=W)
</snippet></ROW><ROW><id>9755040</id><snippet>set_transform</snippet></ROW><ROW><id>9755040</id><snippet>a = figlegend( (line1, line2),('*', '-'),'upper right' )
a.set_transform(self.get_transform())
</snippet></ROW><ROW><id>9755155</id><snippet>source = im.split()
mask = source[2].point(lambda i: i &lt; 100 and 255)
im = Image.merge(im.mode, source)
</snippet></ROW><ROW><id>9755211</id><snippet>out = open("outputfile.txt","w")
</snippet></ROW><ROW><id>9755211</id><snippet>with open("outputfile.txt","w") as out:
</snippet></ROW><ROW><id>9755491</id><snippet>from datetime import datetime
#       ^               ^
#       |               |
#    module      object inside module

# Now you can use
now = datetime.now()
</snippet></ROW><ROW><id>9755548</id><snippet>random.sample(range(100), 10)
</snippet></ROW><ROW><id>9755548</id><snippet>all_lines = f1.readlines()
for i in range(50):
    lines = random.sample(all_lines, 40)
</snippet></ROW><ROW><id>9755548</id><snippet>f1.readlines()</snippet></ROW><ROW><id>9755830</id><snippet>__del__</snippet></ROW><ROW><id>9755830</id><snippet>__del__</snippet></ROW><ROW><id>9755839</id><snippet>sticky</snippet></ROW><ROW><id>9755839</id><snippet>grid</snippet></ROW><ROW><id>9755839</id><snippet>self.lblTitle.grid(...)</snippet></ROW><ROW><id>9755839</id><snippet>grid</snippet></ROW><ROW><id>9756028</id><snippet>s = ('www.python.org', 80)</snippet></ROW><ROW><id>9756028</id><snippet>t = ('red', [10, 20, 30])</snippet></ROW><ROW><id>9756202</id><snippet>myDictionary[word].append(lineNumber)</snippet></ROW><ROW><id>9756202</id><snippet>append()</snippet></ROW><ROW><id>9756202</id><snippet>myDIctionary[word]</snippet></ROW><ROW><id>9756202</id><snippet>list</snippet></ROW><ROW><id>9756202</id><snippet>list</snippet></ROW><ROW><id>9756202</id><snippet>myDictionary[word]</snippet></ROW><ROW><id>9756202</id><snippet>append()</snippet></ROW><ROW><id>9756202</id><snippet>append()</snippet></ROW><ROW><id>9756202</id><snippet>AttributeException</snippet></ROW><ROW><id>9756292</id><snippet>&gt;&gt;&gt; url = 'http://httpbin.org/cookies/set/requests-is/awesome'
&gt;&gt;&gt; r = requests.get(url)

&gt;&gt;&gt; print r.cookies
{'requests-is': 'awesome'}
</snippet></ROW><ROW><id>9756328</id><snippet>bar</snippet></ROW><ROW><id>9756328</id><snippet>sys.stdin</snippet></ROW><ROW><id>9756328</id><snippet>sys.stdin</snippet></ROW><ROW><id>9756328</id><snippet>python -u</snippet></ROW><ROW><id>9756328</id><snippet>   -u     Force  stdin,  stdout  and  stderr to be totally unbuffered.  On
          systems where it matters, also put stdin, stdout and  stderr  in
          binary  mode.   Note  that there is internal buffering in xread‐
          lines(), readlines() and file-object  iterators  ("for  line  in
          sys.stdin")  which  is  not  influenced by this option.  To work
          around this, you will want to use "sys.stdin.readline()"  inside
          a "while 1:" loop.
</snippet></ROW><ROW><id>9756328</id><snippet>#!/usr/bin/python                                                   
import sys 
import os

while True:
    line = sys.stdin.readline()
    if not line:
        break
    sys.stdout.write(line) # or print, doesn't matter.
</snippet></ROW><ROW><id>9756420</id><snippet>input()</snippet></ROW><ROW><id>9756420</id><snippet>args</snippet></ROW><ROW><id>9756420</id><snippet>optparse</snippet></ROW><ROW><id>9756545</id><snippet>r'^(---)(.*)(---)$'</snippet></ROW><ROW><id>9756545</id><snippet>r</snippet></ROW><ROW><id>9756545</id><snippet>^</snippet></ROW><ROW><id>9756545</id><snippet>(---)</snippet></ROW><ROW><id>9756545</id><snippet>---</snippet></ROW><ROW><id>9756545</id><snippet>(.*)</snippet></ROW><ROW><id>9756545</id><snippet>.</snippet></ROW><ROW><id>9756545</id><snippet>*</snippet></ROW><ROW><id>9756545</id><snippet>(---)</snippet></ROW><ROW><id>9756545</id><snippet>$</snippet></ROW><ROW><id>9756545</id><snippet>()</snippet></ROW><ROW><id>9756545</id><snippet>r'^\s*---(.*)---\s*$'</snippet></ROW><ROW><id>9756545</id><snippet>\s*</snippet></ROW><ROW><id>9756545</id><snippet>(.*)</snippet></ROW><ROW><id>9756545</id><snippet>.*</snippet></ROW><ROW><id>9756545</id><snippet>re.findall</snippet></ROW><ROW><id>9756545</id><snippet>re.DOTALL</snippet></ROW><ROW><id>9756783</id><snippet>s</snippet></ROW><ROW><id>9756783</id><snippet>'s'</snippet></ROW><ROW><id>9756905</id><snippet>&gt;&gt;&gt; 'After  the'.split(' ')</snippet></ROW><ROW><id>9756905</id><snippet>['After', '', 'the']</snippet></ROW><ROW><id>9756905</id><snippet>'  '</snippet></ROW><ROW><id>9756905</id><snippet>''</snippet></ROW><ROW><id>9756905</id><snippet>.split(</snippet></ROW><ROW><id>9756905</id><snippet>def split_string(source, separatorList):
    splited = [source]
    for separator in separatorList:
        # if you want to exchange two variables, then write in one line can make the code more clear
        source, splited = splited, []
        for sequence in source:
            # there's no need to check `sequence` in advance, just split it
            # if sequence not in separatorList and sequence != ' ':
                # splited = splited + sequence.split(separator)

            # code to prevent appearance of `''` is here, do a if check in list comprehension.
            # `+=` is equivalent to `= splited +`
            splited += [i for i in sequence.split(separator) if i]
    return splited
</snippet></ROW><ROW><id>9756905</id><snippet>[i for i in a_list if i]</snippet></ROW><ROW><id>9756960</id><snippet>getLastError</snippet></ROW><ROW><id>9756962</id><snippet>f</snippet></ROW><ROW><id>9756962</id><snippet>f()</snippet></ROW><ROW><id>9756962</id><snippet>do_twice(print_spam)</snippet></ROW><ROW><id>9756962</id><snippet>do_twice</snippet></ROW><ROW><id>9756962</id><snippet>print_spam</snippet></ROW><ROW><id>9756962</id><snippet>do_twice(print_spam())</snippet></ROW><ROW><id>9756962</id><snippet>do_twice</snippet></ROW><ROW><id>9756962</id><snippet>print_spam</snippet></ROW><ROW><id>9756962</id><snippet>None</snippet></ROW><ROW><id>9757071</id><snippet>class PROCESSENTRY32(Structure):
    _fields_ = [ ( 'dwSize' , DWORD ) ,
                 ( 'cntUsage' , DWORD) ,
                 ( 'th32ProcessID' , DWORD) ,
                 ( 'th32DefaultHeapID' , POINTER(ULONG)) ,
                 ( 'th32ModuleID' , DWORD) ,
                 ( 'cntThreads' , DWORD) ,
                 ( 'th32ParentProcessID' , DWORD) ,
                 ( 'pcPriClassBase' , LONG) ,
                 ( 'dwFlags' , DWORD) ,
                 ( 'szExeFile' , c_char * 260 ) ]
</snippet></ROW><ROW><id>9757282</id><snippet>word[1:]
</snippet></ROW><ROW><id>9757306</id><snippet>heapq.nlargest()</snippet></ROW><ROW><id>9757306</id><snippet>maxvalues = heapq.nlargest(20, lst)
</snippet></ROW><ROW><id>9757306</id><snippet>heapq.nlargest(n, iterable, key=None)</snippet></ROW><ROW><id>9757306</id><snippet>iterable</snippet></ROW><ROW><id>9757306</id><snippet>key</snippet></ROW><ROW><id>9757306</id><snippet>key=str.lower</snippet></ROW><ROW><id>9757306</id><snippet>sorted(iterable, key=key, reverse=True)[:n]</snippet></ROW><ROW><id>9757306</id><snippet>heapq.nsmallest()</snippet></ROW><ROW><id>9757306</id><snippet>nlargest</snippet></ROW><ROW><id>9757306</id><snippet>nsmallest</snippet></ROW><ROW><id>9757306</id><snippet>n</snippet></ROW><ROW><id>9757306</id><snippet>sorted()</snippet></ROW><ROW><id>9757306</id><snippet>n==1</snippet></ROW><ROW><id>9757306</id><snippet>min()</snippet></ROW><ROW><id>9757306</id><snippet>max()</snippet></ROW><ROW><id>9757398</id><snippet>__call__</snippet></ROW><ROW><id>9757398</id><snippet>c</snippet></ROW><ROW><id>9757398</id><snippet>c</snippet></ROW><ROW><id>9757398</id><snippet>render</snippet></ROW><ROW><id>9757450</id><snippet>get_file()</snippet></ROW><ROW><id>9757450</id><snippet>welcome()</snippet></ROW><ROW><id>9757450</id><snippet>get_file()</snippet></ROW><ROW><id>9757611</id><snippet>-E</snippet></ROW><ROW><id>9757611</id><snippet>-S</snippet></ROW><ROW><id>9757611</id><snippet>site</snippet></ROW><ROW><id>9757611</id><snippet>posix._exit(0)</snippet></ROW><ROW><id>9757611</id><snippet>site</snippet></ROW><ROW><id>9757611</id><snippet>sys.exitfunc</snippet></ROW><ROW><id>9757611</id><snippet>atexit</snippet></ROW><ROW><id>9757670</id><snippet>thistime</snippet></ROW><ROW><id>9757670</id><snippet>Adder</snippet></ROW><ROW><id>9757670</id><snippet>giveResult()</snippet></ROW><ROW><id>9757670</id><snippet>result = thistime.giveResult()
</snippet></ROW><ROW><id>9757670</id><snippet>result = 0</snippet></ROW><ROW><id>9757670</id><snippet>Adder</snippet></ROW><ROW><id>9757670</id><snippet>self.result</snippet></ROW><ROW><id>9757670</id><snippet>__init__()</snippet></ROW></DATA>