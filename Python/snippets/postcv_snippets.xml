<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>16195149</id><snippet>setValue</snippet></ROW><ROW><id>16195149</id><snippet>__init__</snippet></ROW><ROW><id>16195149</id><snippet>class Sample:
  conn = None

  def __init__(self):
    self.connect()
    self.value = self.setValue()
    self.close()

  def connect(self):
    self.conn = MySQLdb.connect(...)

  def close(self):
    if self.conn:
       self.conn.close()

  def setValue(self):
    if not self.conn and not self.conn.open:
       self.connect()
    cursor = self.conn.cursor()
</snippet></ROW><ROW><id>16195149</id><snippet>cur =  self.conn.cursor()
cur.execute("...")
self.conn.commit()
</snippet></ROW><ROW><id>16195968</id><snippet>SELECT name, pars FROM players WHERE pars &gt;= 0 ORDER BY pars DESC
</snippet></ROW><ROW><id>16195968</id><snippet>SELECT name, pars FROM players WHERE pars &gt;= 0 ORDER BY pars DESC LIMIT 1
</snippet></ROW><ROW><id>16195968</id><snippet>cursor.fetchone()</snippet></ROW><ROW><id>16195968</id><snippet>SELECT name, pars FROM players WHERE pars &gt;= 0 WHERE pars = (
    SELECT MAX(pars) FROM players)
</snippet></ROW><ROW><id>16196355</id><snippet>.update()</snippet></ROW><ROW><id>16196355</id><snippet>words.update(some_list_of_words)
</snippet></ROW><ROW><id>16196355</id><snippet>words.update(word.lower() for word in e.split())
</snippet></ROW><ROW><id>16196355</id><snippet>e</snippet></ROW><ROW><id>16196355</id><snippet>.most_common()</snippet></ROW><ROW><id>16196355</id><snippet>words.most_common(20)
</snippet></ROW><ROW><id>16196355</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; words = Counter('spam ham eggs baz foo bar baz spam ham eggs spam spam bacon eggs ham spam spam spam eggs ham'.split())
&gt;&gt;&gt; words.most_common(3)
[('spam', 7), ('ham', 4), ('eggs', 4)]
</snippet></ROW><ROW><id>16196496</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>16196496</id><snippet>import os

process =os.popen('/usr/bin/zbarcam','r')
while True:
    print 'Got barcode:', process.readline()
</snippet></ROW><ROW><id>16196507</id><snippet>%</snippet></ROW><ROW><id>16196586</id><snippet>minidom</snippet></ROW><ROW><id>16196586</id><snippet>xml.dom.minidom</snippet></ROW><ROW><id>16196586</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>16196586</id><snippet>ElementTree</snippet></ROW><ROW><id>16196586</id><snippet>from xml.etree import ElementTree as ET

tree = ET.parse('inputfile.xml')

for info in tree.findall('.//element/info1'):
    print info.text
</snippet></ROW><ROW><id>16196586</id><snippet>info1</snippet></ROW><ROW><id>16196586</id><snippet>element</snippet></ROW><ROW><id>16196586</id><snippet>info1</snippet></ROW><ROW><id>16196586</id><snippet>.find()</snippet></ROW><ROW><id>16196586</id><snippet>print tree.find('.//info1').text
</snippet></ROW><ROW><id>16196586</id><snippet>DOM</snippet></ROW><ROW><id>16196586</id><snippet>.firstChild</snippet></ROW><ROW><id>16196586</id><snippet>Text</snippet></ROW><ROW><id>16196586</id><snippet>Element</snippet></ROW><ROW><id>16196586</id><snippet>.childNotes</snippet></ROW><ROW><id>16196586</id><snippet>Element</snippet></ROW><ROW><id>16196586</id><snippet>def findFirstElement(node):
    for child in node.childNodes:
        if child.nodeType == node.ELEMENT_NODE:
            return child
</snippet></ROW><ROW><id>16196586</id><snippet>.getElementsByTagName()</snippet></ROW><ROW><id>16196586</id><snippet>root.getElementsByTagName('info1').data
</snippet></ROW><ROW><id>16197005</id><snippet>.strip()</snippet></ROW><ROW><id>16197005</id><snippet>Name</snippet></ROW><ROW><id>16197005</id><snippet>records = []

all_keys = {'Name', 'Registration ID', 'registration time'}
first_key = 'Name'

for m in matches:
    with open(m, 'r') as f
        record = dict.fromkeys(all_keys)  # new record dictionary with `None` values

        for line in f:
            key, value = line.split(':', 1)
            key, value = key.strip(), value.strip()
            if key not in all_keys:
                continue  # not interested in this line

            if key == first_key and any(v for v in record.itervalues()):
                # new record, finalize the previous
                records.append(record)
                record = dict.fromkeys(all_keys)

            record[key] = value

        if any(v for v in record.itervalues()):
            # there is something in the last record still, add that too
            records.append(record)
</snippet></ROW><ROW><id>16197005</id><snippet>records = [
    {'registration time', '2012-10-08 17:28:47', 'Registration ID': '9876', 'Name', 'Malcom'},
    {'registration time', '2012-10-08 17:28:47', 'Registration ID': '45', 'Name', 'mazu'},
]
</snippet></ROW><ROW><id>16197005</id><snippet>.executemany()</snippet></ROW><ROW><id>16197005</id><snippet>cursor = conn.cursor()
cursor.executemany('INSERT INTO sometable (id, name, time) VALUES (%(Registration ID)s, %(Name)s, %(registration time)s)',
    records)
conn.commit()
</snippet></ROW><ROW><id>16197736</id><snippet>struct IntWrap {
     int *value;
     int get() { return *value; }
     void set_int(int nval) { *value = nval; }
     ...
};

class_&lt;IntWrap &gt; ("IntWrap")
     .def("get", &amp;IntWrap::get)
     .set("set_int", &amp;IntWrap::set_int)
     ...
</snippet></ROW><ROW><id>16197736</id><snippet>str</snippet></ROW><ROW><id>16197736</id><snippet>int</snippet></ROW><ROW><id>16197736</id><snippet>int</snippet></ROW><ROW><id>16197760</id><snippet>IDs,Xs,Ys,Zs = zip(*filedata)
positions = zip(Xs,Ys,Zs) # list of tuples of (x,y,z) 

unique_Xs = []
[unique_Xs.append(val) for val in Xs if val not in unique_Xs]

unique_Ys = []
[unique_Ys.append(val) for val in Ys if val not in unique_Ys]
</snippet></ROW><ROW><id>16197940</id><snippet>units &gt;= 500 and units &lt;= 999</snippet></ROW><ROW><id>16197940</id><snippet>unitCost = 0.049

if units &lt;= 499:
    unitCost = 0.049
elif units &gt;= 500 and units &lt;= 999:
    unitCost = 0.050
elif units &gt; 999:
     unitCost = 0.060

print unitCost
</snippet></ROW><ROW><id>16198040</id><snippet>.bashrc</snippet></ROW><ROW><id>16198040</id><snippet>-l</snippet></ROW><ROW><id>16198040</id><snippet>devdir = subprocess.check_output(["ssh", connectstring, "sh -l -c 'echo $DEVDIR'"])
</snippet></ROW><ROW><id>16198161</id><snippet>cursor.execute("CREATE TABLE IF NOT EXISTS recipes([id] INTEGER PRIMARY KEY AUTOINCREMENT, [recipeName])")
</snippet></ROW><ROW><id>16198161</id><snippet>'id INT PRIMARY KEY AUTO_INCREMENT, recipeName'</snippet></ROW><ROW><id>16198482</id><snippet>class Service(models.Model):
    owner = models.ForeignKey('auth.User')
    name = models.CharField(max_length=128)

class VariationAService(Service):
    # fields

class VariationBService(Service):
    # more fields
</snippet></ROW><ROW><id>16198482</id><snippet>class ServiceAdmin(admin.ModelAdmin):
    [...]

class VariationAServiceAdmin(admin.ModelAdmin):
    [...]

class VariationBServiceAdmin(admin.ModelAdmin):
    [...]
</snippet></ROW><ROW><id>16198668</id><snippet>try:
    cmnd_output = check_output(cmnd, stderr=STDOUT, shell=True, timeout=3, universal_newlines=True);                         
except CalledProcessError as exc:                                                                                                   
    print("Status : FAIL", exc.returncode, exc.output)
else:                                                                                                   
    print("Output: \n{}\n".format(cmnd_output))         
</snippet></ROW><ROW><id>16198668</id><snippet>CalledProcessError</snippet></ROW><ROW><id>16198691</id><snippet>time.strptime()</snippet></ROW><ROW><id>16198691</id><snippet>struct_time</snippet></ROW><ROW><id>16198691</id><snippet>time.mktime()</snippet></ROW><ROW><id>16198691</id><snippet>import time

datestr = "Wed Apr 24 19:25:06 2013 GMT"
time.mktime(time.strptime(datestr, "%a %b %d %H:%M:%S %Y %Z")) * 1000
</snippet></ROW><ROW><id>16198691</id><snippet>time.strptime()</snippet></ROW><ROW><id>16198691</id><snippet>struct_time</snippet></ROW><ROW><id>16198691</id><snippet>time.gmtime()</snippet></ROW><ROW><id>16198691</id><snippet>timestamp = 1366831506000
time.strftime("%a %d %b %Y %H:%M:%S GMT", time.gmtime(timestamp / 1000.0))
</snippet></ROW><ROW><id>16198691</id><snippet>&gt;&gt;&gt; datestr = "Wed Apr 24 19:25:06 2013 GMT"
&gt;&gt;&gt; time.mktime(time.strptime(datestr, "%a %b %d %H:%M:%S %Y %Z")) * 1000
1366827906000.0
&gt;&gt;&gt; timestamp = 1366831506000
&gt;&gt;&gt; time.strftime("%a %d %b %Y %H:%M:%S GMT", time.gmtime(timestamp / 1000.0))
'Wed 24 Apr 2013 19:25:06 GMT'
</snippet></ROW><ROW><id>16198772</id><snippet>&gt;&gt;&gt; for x,y in enumerate(range(1000)):
    if x is not y:
        print x,y
        break

257 257
</snippet></ROW><ROW><id>16198844</id><snippet>def depth(L) :
    nesting = []
    for c in L:
        if type(c)  == type(nesting) :
            print 'nesting before append', nesting ###      
            nesting.append(depth(c))
            print 'nesting after append', nesting ###
    if len(nesting)  &gt; 0:
        return 1 + max(nesting)
    return 1
</snippet></ROW><ROW><id>16198844</id><snippet>l=[[1,2,3],[1,2,[4]],'asdfg']
</snippet></ROW><ROW><id>16198844</id><snippet>&gt;&gt;&gt; depth(l)
nesting before append []
nesting after append [1]
nesting before append [1]
nesting before append []
nesting after append [1]
nesting after append [1, 2]
3
</snippet></ROW><ROW><id>16198844</id><snippet>print</snippet></ROW><ROW><id>16198945</id><snippet>In [48]: def solve(a,b):
    a,b=str(a),str(b)
    spaces=len(a.split())-1
    return "{0} {1} {2}".format(a,"."*(68-len(a)-len(b)-spaces),b)
   ....: 

In [49]: print solve(a,b);print solve(p,q)
Hello .......................................................... False
Python rocks ................................................... True
</snippet></ROW><ROW><id>16199189</id><snippet>findres = [5, 7, 15, 22]
contacts = list('abcdefghijklmnopqrstuvwxyz') # dummy list

result = [ contacts[index] for index in findres ]
print result

# ['f', 'h', 'p', 'w']
</snippet></ROW><ROW><id>16199200</id><snippet>su</snippet></ROW><ROW><id>16199200</id><snippet>import os

print "\t Entering Upgrade Mode "

os.system("sudo apt-get update")
</snippet></ROW><ROW><id>16199200</id><snippet>su</snippet></ROW><ROW><id>16199200</id><snippet>-c</snippet></ROW><ROW><id>16199200</id><snippet>su -c "echo Hello" 
</snippet></ROW><ROW><id>16199200</id><snippet>subprocess</snippet></ROW><ROW><id>16199200</id><snippet>os.system</snippet></ROW><ROW><id>16199264</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>16199264</id><snippet>set</snippet></ROW><ROW><id>16199264</id><snippet>from collections import defaultdict

levels = defaultdict(set)

for node_id, x, y, z in list_of_datacoords:
    levels[x, y].add(z)
</snippet></ROW><ROW><id>16199264</id><snippet>levels</snippet></ROW><ROW><id>16199264</id><snippet>x, y</snippet></ROW><ROW><id>16199264</id><snippet>z</snippet></ROW><ROW><id>16199264</id><snippet>&gt;&gt;&gt; pprint(dict(levels))
{('-1000.', '0.'): set(['0.', '1000.', '2000.', '3000.', '4000.']),
 ('-1000.', '1000.'): set(['0.', '1000.', '2000.', '3000.', '4000.']),
 ('-1000.', '2000.'): set(['0.', '1000.', '2000.', '3000.', '4000.']),
 ('0.', '0.'): set(['0.', '1000.', '2000.', '3000.', '4000.']),
 ('0.', '1000.'): set(['0.', '1000.', '2000.', '3000.', '4000.']),
 ('0.', '2000.'): set(['0.', '1000.', '2000.', '3000.', '4000.']),
 ('1000.', '0.'): set(['0.', '1000.', '2000.', '3000.', '4000.']),
 ('1000.', '1000.'): set(['0.', '1000.', '2000.', '3000.', '4000.']),
 ('1000.', '2000.'): set(['0.', '1000.', '2000.', '3000.', '4000.'])}
</snippet></ROW><ROW><id>16199264</id><snippet>x, y</snippet></ROW><ROW><id>16199264</id><snippet>for (x, y), z in levels.iteritems():
    z = sorted(z)
    # now you have x, y and a sorted list of `z` values.
</snippet></ROW><ROW><id>16199264</id><snippet>pprint()</snippet></ROW><ROW><id>16199264</id><snippet>pprint()</snippet></ROW><ROW><id>16199353</id><snippet>execute</snippet></ROW><ROW><id>16199353</id><snippet>userInput</snippet></ROW><ROW><id>16199353</id><snippet>pgdb</snippet></ROW><ROW><id>16199353</id><snippet>"WHERE a ILIKE '%s'" % userInput</snippet></ROW><ROW><id>16199353</id><snippet>pgdb</snippet></ROW><ROW><id>16199440</id><snippet>/usr/bin/python2.6</snippet></ROW><ROW><id>16199440</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>16199497</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup(html_source)
print list(soup.stripped_strings)
</snippet></ROW><ROW><id>16199497</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup                                                                                                   &gt;&gt;&gt; soup = BeautifulSoup('''&lt;tr&gt;&lt;td valign="top"&gt;&lt;img src="img.jpg"&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="file.zip"&gt;file.zip&lt;/a&gt;&lt;/td&gt;&lt;td align="right"&gt;24-Apr-2013 12:42 &lt;/td&gt;&lt;td align="right"&gt;200K&lt;/td&gt;&lt;/tr&gt;''')
&gt;&gt;&gt; print list(soup.stripped_strings)
[u'file.zip', u'24-Apr-2013 12:42', u'200K']
</snippet></ROW><ROW><id>16199647</id><snippet>filename = 'where your data lives'
with open(filename, 'rb') as f:
   encoded_data = f.read()
decoded_data = encoded_data.decode("UTF16")

# do stuff, resulting in result (all on unicode strings)
result = text_to_json(decoded_data)

encoded_result = result.encode("UTF-16")  #really, just using UTF8 for everything makes things a lot easier
outfile = 'where your data goes'
with open(outfile, 'wb') as f:
    f.write(encoded_result)
</snippet></ROW><ROW><id>16199964</id><snippet>&gt;&gt;&gt; vec = np.asarray(l).reshape((1,-1)) 
&gt;&gt;&gt; vec.shape
(1, 3)
</snippet></ROW><ROW><id>16200238</id><snippet>&gt;&gt;&gt; %timeit if 1 &gt; myDict['nice_list'][-1]: 0
10000000 loops, best of 3: 110 ns per loop
&gt;&gt;&gt; %timeit if 1 &gt; myDict['nice_lists_last_item']: 0
10000000 loops, best of 3: 68.8 ns per loop
&gt;&gt;&gt; nice_list = myDict['nice_list']
&gt;&gt;&gt; %timeit if 1 &gt; nice_list[-1]: 0
10000000 loops, best of 3: 62.6 ns per loop
&gt;&gt;&gt; nice_lists_last_item = myDict['nice_lists_last_item']
&gt;&gt;&gt; %timeit if 1 &gt; nice_lists_last_item: 0                      
10000000 loops, best of 3: 43.4 ns per loop
</snippet></ROW><ROW><id>16200373</id><snippet>keep_running</snippet></ROW><ROW><id>16200373</id><snippet>global</snippet></ROW><ROW><id>16200373</id><snippet>main</snippet></ROW><ROW><id>16200373</id><snippet>join</snippet></ROW><ROW><id>16200373</id><snippet>Lock</snippet></ROW><ROW><id>16200373</id><snippet>keep_running</snippet></ROW><ROW><id>16200373</id><snippet>queue</snippet></ROW><ROW><id>16200373</id><snippet>time.sleep</snippet></ROW><ROW><id>16200373</id><snippet>self.queue.get(timeout=0.2)</snippet></ROW><ROW><id>16200413</id><snippet>newlist = [el for i, el in enumerate(oldlist) if i not in indices_to_delete]
</snippet></ROW><ROW><id>16200413</id><snippet>indices_to_delete</snippet></ROW><ROW><id>16200413</id><snippet>set</snippet></ROW><ROW><id>16200413</id><snippet>indices_to_delete = set(indices_to_delete)
newlist = [el for i, el in enumerate(oldlist) if i not in indices_to_delete]
</snippet></ROW><ROW><id>16200413</id><snippet>for index in sorted(indices_to_delete, reversed=True):
    del oldlist[index]
</snippet></ROW><ROW><id>16200413</id><snippet>indices_to_delete</snippet></ROW><ROW><id>16200446</id><snippet>__hash__</snippet></ROW><ROW><id>16200446</id><snippet>import random

class Evil(int):
    def __hash__(self):
        return random.randint(0, 10000)

evil_vals = [Evil(n) for n in range(10)]

dict_with_evil_keys = dict((evil_val, None)
                           for evil_val in evil_vals)

print evil_vals[0] in dict_with_evil_keys # prints False
print evil_vals[0] in dict_with_evil_keys.keys() # prints True
</snippet></ROW><ROW><id>16200446</id><snippet>__hash__</snippet></ROW><ROW><id>16200745</id><snippet>properties</snippet></ROW><ROW><id>16200745</id><snippet>class Foo():
    def __init__(self):
        self._spam = 0

    @property
    def spam(self):
        print("in the getter: ")
        return self._spam

    @spam.setter
    def spam(self, move):
        print("in the setter: ")
        self._spam = move + self._spam

f = Foo()
f.spam = 2
print(f.spam)
</snippet></ROW><ROW><id>16200745</id><snippet>in the setter: 
in the getter: 
2
</snippet></ROW><ROW><id>16201024</id><snippet>In [9]: re.split(r'(?&lt;=[\.!\?])\s+', data)
Out[9]:
['Bla bla lbaa dsad asd as.',
 'Asd qe as!',
 ' ASDadf asd!',
 'Dsss dwq.',
 'Dkmef?']
</snippet></ROW><ROW><id>16201024</id><snippet>(?&lt;=...)</snippet></ROW><ROW><id>16201024</id><snippet>...</snippet></ROW><ROW><id>16201024</id><snippet>(?&lt;=abc)def</snippet></ROW><ROW><id>16201024</id><snippet>abcdef</snippet></ROW><ROW><id>16201024</id><snippet>abc</snippet></ROW><ROW><id>16201024</id><snippet>a|b</snippet></ROW><ROW><id>16201024</id><snippet>a*</snippet></ROW><ROW><id>16201024</id><snippet>a{3,4}</snippet></ROW><ROW><id>16201113</id><snippet>test.models.foo.baby</snippet></ROW><ROW><id>16201113</id><snippet>foo.baby.Baby</snippet></ROW><ROW><id>16201113</id><snippet>foo/__init__.py</snippet></ROW><ROW><id>16201113</id><snippet>from . import baby
</snippet></ROW><ROW><id>16201168</id><snippet>import gpxpy.gpx

try:
    # ...
except gpxpy.gpx.GPSException:
    # ...
</snippet></ROW><ROW><id>16201168</id><snippet>from gpxpy.gpx import GPSException

try:
    # ...
except GPSException:
    # ...
</snippet></ROW><ROW><id>16201309</id><snippet>public static void PrintSpaced(params Object[] objects)
{
    foreach (Object o in objects)
        Console.Write(o + " "); 
}    
// Can be used to print: PrintSpaced(1, 2, "three");
</snippet></ROW><ROW><id>16201309</id><snippet>Public Shared Sub PrintSpaced(ParamArray objects As Object())
    For Each o As Object In objects
        Console.Write(o &amp; " ")
    Next
End Sub
</snippet></ROW><ROW><id>16201314</id><snippet>def mystery (n):
    count = 0
    while n &gt; 1:
        n = n / 2
        count = count + 1
    if n == 1:
        return count
    return 0
</snippet></ROW><ROW><id>16201326</id><snippet>4,534.07</snippet></ROW><ROW><id>16201326</id><snippet>4534.07</snippet></ROW><ROW><id>16201326</id><snippet>ValueError: invalid literal for float(): 4,534.07</snippet></ROW><ROW><id>16201326</id><snippet>z='4,534.07'
print float(z.replace(',', ''))
</snippet></ROW><ROW><id>16201326</id><snippet>repr</snippet></ROW><ROW><id>16201326</id><snippet>repr</snippet></ROW><ROW><id>16201326</id><snippet>repr</snippet></ROW><ROW><id>16201326</id><snippet>eval</snippet></ROW><ROW><id>16201326</id><snippet>print z[1:-1]</snippet></ROW><ROW><id>16201326</id><snippet>print z.replace("'", "")</snippet></ROW><ROW><id>16201326</id><snippet>z</snippet></ROW><ROW><id>16201326</id><snippet>z</snippet></ROW><ROW><id>16201326</id><snippet>print z.replace(',', '')</snippet></ROW><ROW><id>16201326</id><snippet>float(z)</snippet></ROW><ROW><id>16201326</id><snippet>z = z.replace(',', '')</snippet></ROW><ROW><id>16201326</id><snippet>float(z)</snippet></ROW><ROW><id>16201394</id><snippet>False</snippet></ROW><ROW><id>16201394</id><snippet>if not person or person.name == 'Bob':
    print "You have to select a person and it can't be Bob"
</snippet></ROW><ROW><id>16201394</id><snippet>and</snippet></ROW><ROW><id>16201394</id><snippet>True</snippet></ROW><ROW><id>16201394</id><snippet>if person and person.name:
   # ...
</snippet></ROW><ROW><id>16201394</id><snippet>person</snippet></ROW><ROW><id>16201394</id><snippet>None</snippet></ROW><ROW><id>16201633</id><snippet>gpxpy</snippet></ROW><ROW><id>16201633</id><snippet>parse</snippet></ROW><ROW><id>16201633</id><snippet>raise mod_gpx.GPXException('Error parsing {0}: {1}'.format(xml_or_file[0 : 100], parser.get_error()))
</snippet></ROW><ROW><id>16201633</id><snippet>xml_or_file</snippet></ROW><ROW><id>16201633</id><snippet>if not parser.is_valid():
    try:
        fragment = xml_or_file[0 : 100]
    except TypeError:
        xml_or_file.seek(0)
        fragment = xml_or_file.read(100)
    raise mod_gpx.GPXException('Error parsing {0}: {1}'.format(fragment, parser.get_error()))
</snippet></ROW><ROW><id>16201633</id><snippet>except Exception</snippet></ROW><ROW><id>16201633</id><snippet>except (gpxpy.gpx.GPXException, TypeError)</snippet></ROW><ROW><id>16201633</id><snippet>gpx = gpx.parse(file.read())</snippet></ROW><ROW><id>16201633</id><snippet>xml_or_file[0 : 100]</snippet></ROW><ROW><id>16201633</id><snippet>xml_or_file[:100]</snippet></ROW><ROW><id>16201635</id><snippet>User.objects.filter(member__isAdmin=True, member__project=p)
</snippet></ROW><ROW><id>16201671</id><snippet>b</snippet></ROW><ROW><id>16201671</id><snippet>idx = b.reshape(a.shape[0])
print a[idx==0,:]

&gt;&gt;&gt; [[10 11 12 13 14]]
</snippet></ROW><ROW><id>16201709</id><snippet>$ awk '{a[$1FS$2FS$3]+=$4}END{for(k in a)print k,a[k]}' file
chr2 10500 25700 175
chr1 241783 286397 158
</snippet></ROW><ROW><id>16201714</id><snippet>start_time=forms.DateTimeField(input_formats=['%Y-%m-%d %H:%M'])
</snippet></ROW><ROW><id>16201717</id><snippet>&lt;outline text="lol"&gt;
  &lt;outline
      htmlUrl="http://discourseontheotter.tumblr.com/"
      xmlUrl="http://discourseontheotter.tumblr.com/rss"
      text="Discourse on the Otter"
  /&gt;
  &lt;outline
      htmlUrl="http://fedorasofokc.tumblr.com/"
      xmlUrl="http://fedorasofokc.tumblr.com/rss"
      text="fedoras of okc"
  /&gt;
&lt;/outline&gt;
</snippet></ROW><ROW><id>16201717</id><snippet>'outline text="(.*?)"'</snippet></ROW><ROW><id>16201717</id><snippet>import xml.etree.cElementTree as ET

root = ET.parse('ttrss.txt').getroot()
for outline in root.iter('outline'):
    text = outline.get('text')
    xmlUrl = outline.get('xmlUrl')
    if text and xmlUrl:
        print text
        print xmlUrl
</snippet></ROW><ROW><id>16201728</id><snippet>import threading
import random
import time
import Queue
import urllib2
import sys
import simplejson, pycurl
import sys, signal

queue = Queue.Queue()
keep_running = True
user = "" # username
pswd = "" # password
headers = [ "Content-Type: text/xml; charset: UTF-8; "]

class MyThread(threading.Thread):


    def __init__(self, queue):
        threading.Thread.__init__(self)
        self.queue = queue
        self.buffer = ""
        self.streaming_url = "https://stream.twitter.com/1/statuses/filter.json?track=justinbieber"

    def start_crawl(self, user, pswd):
        self.conn = pycurl.Curl()
        self.conn.setopt(pycurl.USERPWD, "%s:%s" % (user, pswd))
        self.conn.setopt(pycurl.URL, self.streaming_url)
        #self.conn.setopt(pycurl.POST, 1)
        self.conn.setopt(pycurl.HTTPHEADER, headers)
        self.conn.setopt(pycurl.READFUNCTION, self.storage)
        self.conn.setopt(pycurl.VERBOSE, 1)
        self.conn.setopt(pycurl.HTTPAUTH, pycurl.HTTPAUTH_BASIC)
        self.conn.perform()


    def storage(self, data):
        self.buffer += str(data)
        if isinstance(self.buffer, str):
            if self.buffer.endswith("\r\n") and self.buffer.strip():
                content = json.loads(self.buffer)
                self.buffer = ""
                self.queue.put(content)
                self.queue.task_done()
                #if "text" in content:
                    #print u"{0[user][name]}: {0[text]}".format(content)
        else:
            return data

    def run(self):
        while keep_running:
            self.start_crawl(user,pswd)
            if signal.signal(signal.SIGINT, signal.SIG_DFL):
                sys.exit()
            #line = self.names[random.randint(0,len(self.names)-1)]
            #queue.put(line)


class Starter():
    def __init__(self):
        self.queue = queue
        t = MyThread(self.queue)
        t.daemon = True
        t.start()
        self.next()

    def next(self):
        while True:
            time.sleep(0.1)
            if not self.queue.empty():
                line = self.queue.get(timeout=0.2)
                print line, self.queue.qsize()
            else:
                print 'waiting for queue'

def main():  
    try:
        Starter()   
        queue.join()  
    except KeyboardInterrupt, e:
        print 'Stopping'
        raise

main()
</snippet></ROW><ROW><id>16201872</id><snippet>new_matrix = matrix1 + matrix2
</snippet></ROW><ROW><id>16202153</id><snippet>isinstance</snippet></ROW><ROW><id>16202153</id><snippet>if isinstance(keydata, basestring):
    # special case to avoid considering strings as containers
    # for python 3.x use str instead of basestring
    return item[keydata]
try:
    return dict((k,item[v]) for (k,v) in keydata.iteritems())
except AttributeError:
    # it's not a dict-like
    pass
try:
    return [item[k] for k in keydata]
except TypeError:
    # it's not iterable
return item[keydata]
</snippet></ROW><ROW><id>16202221</id><snippet>libreoffice</snippet></ROW><ROW><id>16202221</id><snippet>libreoffice</snippet></ROW><ROW><id>16202221</id><snippet>for i in `find folder -type f -name *.lwp` ; do
    libreoffice --headless --convert-to doc:"MS Word 2003 XML" $i
done
</snippet></ROW><ROW><id>16202221</id><snippet>subprocess</snippet></ROW><ROW><id>16202221</id><snippet>import os
import os.path
import subprocess

for i in os.listdir( SOURCE_FOLDER):
    if not i.endswith( '.lwp'):
        continue

    path = os.path.join( SOURCE_FOLDER, i)
    args = ['libreoffice', '--headless', '--convert-to',
            'doc:"MS Word 2003 XML"', path]

    subprocess.call(args, shell=False)
</snippet></ROW><ROW><id>16202333</id><snippet>su</snippet></ROW><ROW><id>16202475</id><snippet>NA</snippet></ROW><ROW><id>16202475</id><snippet>zip()</snippet></ROW><ROW><id>16202475</id><snippet>merged = [next((el for el in elements if el != 'NA'), 'NA') for elements in zip(*list_of_lists)]
</snippet></ROW><ROW><id>16202475</id><snippet>&gt;&gt;&gt; list_of_lists = [['NA','NA','NA','0,678'], ['0.327','NA','NA','NA']]
&gt;&gt;&gt; [next((el for el in elements if el != 'NA'), 'NA') for elements in zip(*list_of_lists)]
['0.327', 'NA', 'NA', '0,678']
</snippet></ROW><ROW><id>16202475</id><snippet>next((...), default)</snippet></ROW><ROW><id>16202475</id><snippet>'NA'</snippet></ROW><ROW><id>16202475</id><snippet>'NA'</snippet></ROW><ROW><id>16202486</id><snippet>None</snippet></ROW><ROW><id>16202486</id><snippet>np.newaxis</snippet></ROW><ROW><id>16202486</id><snippet>&gt;&gt;&gt; e
array([[ 0.,  1.],
       [ 2.,  4.],
       [ 1.,  5.]])
&gt;&gt;&gt; e/e.sum(axis=1)[:,None]
array([[ 0.        ,  1.        ],
       [ 0.33333333,  0.66666667],
       [ 0.16666667,  0.83333333]])
</snippet></ROW><ROW><id>16202486</id><snippet>&gt;&gt;&gt; (e.T/e.sum(axis=1)).T
array([[ 0.        ,  1.        ],
       [ 0.33333333,  0.66666667],
       [ 0.16666667,  0.83333333]])
</snippet></ROW><ROW><id>16202486</id><snippet>axis=</snippet></ROW><ROW><id>16202584</id><snippet>import urllib2
from time import time

stream = urllib2.urlopen('http://www.rarlab.com/rar/winrar-x64-420.exe')
start_time = time()
output = stream.read()
end_time = time()
stream.close()
print(end_time-start_time)
</snippet></ROW><ROW><id>16202584</id><snippet>print(round(end_time-start_time, 3))
</snippet></ROW><ROW><id>16202584</id><snippet>0.865000009537 # Without Round
0.865          # With Round
</snippet></ROW><ROW><id>16202796</id><snippet>a.add(b, fill_value=0)</snippet></ROW><ROW><id>16203252</id><snippet>__init__</snippet></ROW><ROW><id>16203252</id><snippet>__init__</snippet></ROW><ROW><id>16203252</id><snippet>raise Error()</snippet></ROW><ROW><id>16203252</id><snippet>Error</snippet></ROW><ROW><id>16203252</id><snippet>raise</snippet></ROW><ROW><id>16203252</id><snippet>some stuff</snippet></ROW><ROW><id>16203252</id><snippet>raise Error()</snippet></ROW><ROW><id>16203252</id><snippet>e = Error()
raise e
</snippet></ROW><ROW><id>16203252</id><snippet>__init__</snippet></ROW><ROW><id>16203252</id><snippet>pass</snippet></ROW><ROW><id>16203252</id><snippet>__init__</snippet></ROW><ROW><id>16203252</id><snippet>&gt;&gt;&gt; class Error (Exception):
        def __init__ (self, msg, rightAligned = False, spacedOut = False):
            if spacedOut:
                msg = ' '.join(msg)
            if rightAligned:
                msg = msg.rjust(72)
            Exception.__init__(self, msg)

&gt;&gt;&gt; raise Error('Random message')
Traceback (most recent call last):
  File "&lt;pyshell#2&gt;", line 1, in &lt;module&gt;
    raise Error('Random message')
Error: Random message
&gt;&gt;&gt; raise Error('Random message', True)
Traceback (most recent call last):
  File "&lt;pyshell#3&gt;", line 1, in &lt;module&gt;
    raise Error('Random message', True)
Error:                                                           Random message
&gt;&gt;&gt; raise Error('Random message', False, True)
Traceback (most recent call last):
  File "&lt;pyshell#4&gt;", line 1, in &lt;module&gt;
    raise Error('Random message', False, True)
Error: R a n d o m   m e s s a g e
</snippet></ROW><ROW><id>16203259</id><snippet>&gt;&gt;&gt; class C(object):
...     pass
...
&gt;&gt;&gt; c = C()
&gt;&gt;&gt; c.__len__ = lambda: 5
&gt;&gt;&gt; len(c)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: object of type 'C' has no len()
</snippet></ROW><ROW><id>16203465</id><snippet>with open('myfile.txt', 'rb+') as f:
    f.seek(FIXED_LINE_LENGTH * line_number)
    f.write(new_line)
</snippet></ROW><ROW><id>16203465</id><snippet>with open('myfile.txt', 'rb+') as f:
    for line_number, line in enumerate(f):
        if is_the_right_line(line):
            f.seek(FIXED_LINE_LENGTH * line_number)
            f.write(new_line)
</snippet></ROW><ROW><id>16203465</id><snippet>with open('myfile.txt', 'rb+') as f:
    last_pos = 0
    for line_number, line in enumerate(f):
        if is_the_right_line(line):
            f.seek(last_pos)
            f.write(new_line)
        last_pos = f.tell()
</snippet></ROW><ROW><id>16203769</id><snippet>a</snippet></ROW><ROW><id>16203769</id><snippet>list</snippet></ROW><ROW><id>16203769</id><snippet>200</snippet></ROW><ROW><id>16203769</id><snippet>p = csv.reader(open('file.csv'), delimiter=';')
for row in p:
    if row[0]=="200":
        a = [row] + list(itertools.islice(p, 10))
        break
</snippet></ROW><ROW><id>16203769</id><snippet>a</snippet></ROW><ROW><id>16203769</id><snippet>numpy</snippet></ROW><ROW><id>16203769</id><snippet>list</snippet></ROW><ROW><id>16203931</id><snippet>cron</snippet></ROW><ROW><id>16203931</id><snippet>crontab -e</snippet></ROW><ROW><id>16203931</id><snippet>30 3 * * * /usr/bin/mysql -u&lt;user&gt; -p&lt;pass&gt; &lt;dbname&gt; &lt; /var/scripts/myscript.sql
</snippet></ROW><ROW><id>16203931</id><snippet>MAILTO=mymail@address.com
</snippet></ROW><ROW><id>16203931</id><snippet>which mysql</snippet></ROW><ROW><id>16203931</id><snippet>ob_start</snippet></ROW><ROW><id>16203931</id><snippet>mail</snippet></ROW><ROW><id>16203954</id><snippet>;</snippet></ROW><ROW><id>16203954</id><snippet>;</snippet></ROW><ROW><id>16204022</id><snippet>In [1]: import urllib2
In [2]: import re
In [3]: page = urllib2.urlopen("http://www.samair.ru/proxy/ip-address-01.htm").read()
In [4]: re.findall('\d+\.\d+\.\d+\.\d+', page)
Out[4]:
['101.226.74.168',
 '101.255.60.162',
 '101.50.17.123',
 '103.247.16.2',
 '103.247.16.97',
 '103.28.227.78',
 '103.7.248.161',
 '106.120.98.166',
 '107.16.66.225',
 '108.166.87.24',
 '109.123.111.99',
 '109.127.37.117',
 '109.175.8.45',
 '109.175.8.53',
 '109.207.61.160',
 '109.207.61.172',
 '109.207.61.173',
 '109.207.61.194',
 '109.207.61.210',
 '109.230.66.7']
</snippet></ROW><ROW><id>16204027</id><snippet>Map&lt;Integer, Boolean&gt; map = new HashMap&lt;Integer, Boolean&gt;();
Set&lt;Integer&gt; keys = map.keySet();
</snippet></ROW><ROW><id>16204027</id><snippet>toArray(T[] a)</snippet></ROW><ROW><id>16204027</id><snippet>Integer[] array = keys.toArray(new Integer[keys.size()]);
</snippet></ROW><ROW><id>16204027</id><snippet>int</snippet></ROW><ROW><id>16204027</id><snippet>Integer</snippet></ROW><ROW><id>16204027</id><snippet>int[] array = new int[keys.size()];
int index = 0;
for(Integer element : keys) array[index++] = element.intValue();
</snippet></ROW><ROW><id>16204247</id><snippet>list</snippet></ROW><ROW><id>16204247</id><snippet>tuple</snippet></ROW><ROW><id>16204247</id><snippet>en</snippet></ROW><ROW><id>16204247</id><snippet>for</snippet></ROW><ROW><id>16204247</id><snippet>&gt;&gt;&gt; a=['a','b','c','d','e','f','g']
&gt;&gt;&gt; en=enumerate(a)
&gt;&gt;&gt; en
&lt;enumerate object at 0x21172d0&gt;
&gt;&gt;&gt; for index, elem in en:
...   print index, elem
... 
0 a
1 b
2 c
3 d
4 e
5 f
6 g
&gt;&gt;&gt; for index, elem in en:
...   print index, elem
... 
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16204247</id><snippet>en</snippet></ROW><ROW><id>16204247</id><snippet>enumerate</snippet></ROW><ROW><id>16204247</id><snippet>a</snippet></ROW><ROW><id>16204247</id><snippet>enumerate</snippet></ROW><ROW><id>16204247</id><snippet>for</snippet></ROW><ROW><id>16204247</id><snippet>enumerate</snippet></ROW><ROW><id>16204247</id><snippet>en = list(enumerate(a))</snippet></ROW><ROW><id>16204247</id><snippet>en</snippet></ROW><ROW><id>16204475</id><snippet>nodes = dict((e["NAME"], node(e)) for e in l)
for e in l:
    if e["PARENT"] is not None:
        nodes[e["PARENT"]].add_children(nodes[e["NAME"])
</snippet></ROW><ROW><id>16204475</id><snippet>roots = [n for n in nodes.values() if d.value["PARENT"] is None]
</snippet></ROW><ROW><id>16204503</id><snippet>value = 0b0000111100001010
</snippet></ROW><ROW><id>16204503</id><snippet>int</snippet></ROW><ROW><id>16204503</id><snippet>base</snippet></ROW><ROW><id>16204503</id><snippet>value = int('0000111100001010', 2)
</snippet></ROW><ROW><id>16204503</id><snippet>bitarray</snippet></ROW><ROW><id>16204503</id><snippet>bitstring</snippet></ROW><ROW><id>16204503</id><snippet>value = bitstring.BitArray(bin='0000111100001010')
</snippet></ROW><ROW><id>16204503</id><snippet>struct</snippet></ROW><ROW><id>16204503</id><snippet>my_bytes = struct.pack('!H', value)
</snippet></ROW><ROW><id>16204503</id><snippet>!</snippet></ROW><ROW><id>16204503</id><snippet>H</snippet></ROW><ROW><id>16204503</id><snippet>unsigned short</snippet></ROW><ROW><id>16204503</id><snippet>bitstring.BitArray</snippet></ROW><ROW><id>16204503</id><snippet>my_bytes = value.tobytes()
</snippet></ROW><ROW><id>16204515</id><snippet>item[17:len(item)]
</snippet></ROW><ROW><id>16204515</id><snippet>item[17:]
</snippet></ROW><ROW><id>16204515</id><snippet>alist[a:b]</snippet></ROW><ROW><id>16204515</id><snippet>a</snippet></ROW><ROW><id>16204515</id><snippet>alist</snippet></ROW><ROW><id>16204515</id><snippet>b</snippet></ROW><ROW><id>16204515</id><snippet>alist</snippet></ROW><ROW><id>16204515</id><snippet>a</snippet></ROW><ROW><id>16204515</id><snippet>b</snippet></ROW><ROW><id>16204515</id><snippet>alist</snippet></ROW><ROW><id>16204656</id><snippet>import logging

MYVAR = 'Jabberwocky'


class ContextFilter(logging.Filter):
    """
    This is a filter which injects contextual information into the log.
    """
    def filter(self, record):
        record.MYVAR = MYVAR
        return True

FORMAT = '%(MYVAR)s %(asctime)s - %(levelname)s - %(message)s'
logging.basicConfig(format=FORMAT, datefmt='%d/%m/%Y %H:%M:%S')

logger = logging.getLogger(__name__)
logger.addFilter(ContextFilter())

logger.warning("'Twas brillig, and the slithy toves")
</snippet></ROW><ROW><id>16204656</id><snippet>Jabberwocky 24/04/2013 20:57:31 - WARNING - 'Twas brillig, and the slithy toves
</snippet></ROW><ROW><id>16204717</id><snippet>#12
</snippet></ROW><ROW><id>16204717</id><snippet>#[0-9]+</snippet></ROW><ROW><id>16204717</id><snippet>#123</snippet></ROW><ROW><id>16204717</id><snippet>+</snippet></ROW><ROW><id>16204717</id><snippet>3</snippet></ROW><ROW><id>16204717</id><snippet>pat = r'(?&lt;!bad )(?&lt;!No match )(#[0-9]+)(?![0-9])(?! 0x0)(?!-ubuntu)'
</snippet></ROW><ROW><id>16204717</id><snippet>r</snippet></ROW><ROW><id>16204717</id><snippet>regex</snippet></ROW><ROW><id>16204717</id><snippet>re</snippet></ROW><ROW><id>16204717</id><snippet>pat = r'(?&lt;!bad )(?&lt;!No match )(#[0-9]++)(?! 0x0)(?!-ubuntu)'
</snippet></ROW><ROW><id>16204717</id><snippet>regex</snippet></ROW><ROW><id>16204804</id><snippet>r = requests.put(url, data = string)</snippet></ROW><ROW><id>16204804</id><snippet>Response</snippet></ROW><ROW><id>16204804</id><snippet>body</snippet></ROW><ROW><id>16204804</id><snippet>request</snippet></ROW><ROW><id>16204804</id><snippet>history</snippet></ROW><ROW><id>16204804</id><snippet>PreparedRequest</snippet></ROW><ROW><id>16204804</id><snippet>body</snippet></ROW><ROW><id>16204804</id><snippet>r.requests.Request(method='PUT', url=url, data=string)</snippet></ROW><ROW><id>16204804</id><snippet>Request</snippet></ROW><ROW><id>16204804</id><snippet>prepare()</snippet></ROW><ROW><id>16204804</id><snippet>body</snippet></ROW><ROW><id>16204804</id><snippet>&gt;&gt;&gt; resp = requests.put('http://localhost/nosuchurl', data='abc')
&gt;&gt;&gt; resp.request.body
'abc'
&gt;&gt;&gt; resp = requests.put('http://localhost/redirect_to_https', data='abc')
&gt;&gt;&gt; resp.history[-1].request.body
'abc'
&gt;&gt;&gt; req = requests.Request(method='PUT', url='http://localhost/nosuchurl', data='abc')
&gt;&gt;&gt; preq = req.prepare()
&gt;&gt;&gt; preq.body
'abc'
</snippet></ROW><ROW><id>16204804</id><snippet>resp.history[0].request.body</snippet></ROW><ROW><id>16204804</id><snippet>resp.request.body</snippet></ROW><ROW><id>16204804</id><snippet>resp = request.put('http://localhost/nosuchurl', data='abc', allow_redirects=False)
</snippet></ROW><ROW><id>16204917</id><snippet>import os

webString = "http://www.google.com/"
os.system("open "+webString) 
</snippet></ROW><ROW><id>16204917</id><snippet>os.system(someString)</snippet></ROW><ROW><id>16204952</id><snippet>    ind_pop[i] = [int(j) for j in re.findall(r'[^,;\s]+', ind_input)]
</snippet></ROW><ROW><id>16204952</id><snippet>r'\d+'</snippet></ROW><ROW><id>16204952</id><snippet>alleles1</snippet></ROW><ROW><id>16204952</id><snippet>alleles2</snippet></ROW><ROW><id>16204952</id><snippet>master = {i: [alleles[j] for j in vals] for i, vals in ind_pop.items()}
counters = {i: collections.Counter(al) for i, al in master.items()}
</snippet></ROW><ROW><id>16204952</id><snippet>counters[i]</snippet></ROW><ROW><id>16204952</id><snippet>counter1</snippet></ROW><ROW><id>16204952</id><snippet>ind_pop</snippet></ROW><ROW><id>16204952</id><snippet>append</snippet></ROW><ROW><id>16205091</id><snippet>import requests
import re
from bs4 import BeautifulSoup

req = requests.get(url)
req.raise_for_status()

html_doc = req.text.encode(req.encoding)
soup = BeautifulSoup(html_doc)

links = soup.findAll(href=re.compile("\.pdf$"))

for link in links:
    req = requests.get(link)
    # here, you'll want to use r.content, since it's probably a binary file
    content = req.content
    # write the bytes to a file
</snippet></ROW><ROW><id>16205776</id><snippet>&gt;&gt;&gt; 'foo'.encode('base64')
'Zm9v\n'
</snippet></ROW><ROW><id>16205776</id><snippet>&gt;&gt;&gt; 'foo'.encode('base64')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
LookupError: unknown encoding: base64
</snippet></ROW><ROW><id>16205776</id><snippet>b64encode</snippet></ROW><ROW><id>16205776</id><snippet>.encode()</snippet></ROW><ROW><id>16205776</id><snippet>In [1]: %timeit 'fooasodaspf8ds09f8'.encode('base64')
1000000 loops, best of 3: 1.62 us per loop

In [5]: %timeit b64encode('fooasodaspf8ds09f8')
1000000 loops, best of 3: 564 ns per loop
</snippet></ROW><ROW><id>16205776</id><snippet>base64</snippet></ROW><ROW><id>16205960</id><snippet>echo $R_HOME
</snippet></ROW><ROW><id>16205960</id><snippet>ls $R_HOME/lib
</snippet></ROW><ROW><id>16206247</id><snippet>import requests
requests.get('google.com/admin')
# MissingSchema: Invalid URL u'google.com/admin': No schema supplied
</snippet></ROW><ROW><id>16206247</id><snippet>requests</snippet></ROW><ROW><id>16206247</id><snippet>import requests.exceptions
dir(requests.exceptions)
</snippet></ROW><ROW><id>16206247</id><snippet>requests</snippet></ROW><ROW><id>16206247</id><snippet>200</snippet></ROW><ROW><id>16206247</id><snippet>In [9]: requests.get('https://google.com/admin')
Out[9]: &lt;Response [503]&gt;
</snippet></ROW><ROW><id>16206247</id><snippet>In [10]: resp = requests.get('https://google.com/admin')

In [11]: resp
Out[11]: &lt;Response [503]&gt;

In [12]: resp.raise_for_status()
  ...
HTTPError: 503 Server Error: Service Unavailable
</snippet></ROW><ROW><id>16206284</id><snippet>list</snippet></ROW><ROW><id>16206284</id><snippet>seq</snippet></ROW><ROW><id>16206284</id><snippet>rowsize</snippet></ROW><ROW><id>16206284</id><snippet>split_into_rows = [seq[i: i + rowsize] for i in range(0, len(seq), rowsize)]
</snippet></ROW><ROW><id>16206284</id><snippet>writerows</snippet></ROW><ROW><id>16206284</id><snippet>writer.writerows(split_into_rows)
</snippet></ROW><ROW><id>16206284</id><snippet>split_into_rows = (seq[i: i + rowsize] for i in range(0, len(seq), rowsize))
</snippet></ROW><ROW><id>16206447</id><snippet>tail</snippet></ROW><ROW><id>16206447</id><snippet>def get_text(node):
    text = [node.text] + [child.tail for child in node]
    return ''.join(x for x in text if x is not None)
</snippet></ROW><ROW><id>16206447</id><snippet>.tail</snippet></ROW><ROW><id>16206664</id><snippet>jobs.objects.values('state')
</snippet></ROW><ROW><id>16206664</id><snippet>state</snippet></ROW><ROW><id>16206664</id><snippet>emp</snippet></ROW><ROW><id>16206664</id><snippet>jobs.objects.values('state', 'emp_id')
</snippet></ROW><ROW><id>16206966</id><snippet>class Rock(object): 
   def __init__(self, x=640, y=0, dist=2):
       self.image = pygame.image.load(img_path2)
       self.x = x
       self.y = y
       self.dist = dist

   def rock(self):
       # you don't need to check if running is true here, you're doing that in your loop
       self.x -= dist
</snippet></ROW><ROW><id>16206966</id><snippet>import random

y = random.randint(0, 400)
rock = Rock(640, y)
</snippet></ROW><ROW><id>16206966</id><snippet>if rock.x &lt; 0:
    y = random.randint(0, 400)
    rock = Rock(640, y)

rock.rock()
</snippet></ROW><ROW><id>16206966</id><snippet>rock()</snippet></ROW><ROW><id>16207132</id><snippet>&gt;&gt;&gt; di = {'1': 'xyz=0 | pqr=70 | abc=300'}
</snippet></ROW><ROW><id>16207132</id><snippet>{1: 'xyz=0 | pqr=70 | abc=300'}</snippet></ROW><ROW><id>16207132</id><snippet>'xyz=0 | pqr=70 | abc=300'</snippet></ROW><ROW><id>16207132</id><snippet>&gt;&gt;&gt; di['1'].split(' | ')
['xyz=0', 'pqr=70', 'abc=300']
</snippet></ROW><ROW><id>16207132</id><snippet>&gt;&gt;&gt; [x.split('=') for x in di['1'].split(' | ')]
[['xyz', '0'], ['pqr', '70'], ['abc', '300']]
</snippet></ROW><ROW><id>16207132</id><snippet>&gt;&gt;&gt; dict(x.split('=') for x in di['1'].split(' | '))
{'xyz': '0', 'abc': '300', 'pqr': '70'}
</snippet></ROW><ROW><id>16207132</id><snippet>dict</snippet></ROW><ROW><id>16207132</id><snippet>&gt;&gt;&gt; di = dict(x.split('=') for x in di['1'].split(' | '))
&gt;&gt;&gt; di['xyz']
'0'
</snippet></ROW><ROW><id>16207132</id><snippet>di['xyz']</snippet></ROW><ROW><id>16207259</id><snippet>In [40]: df.index = df.index.to_datetime()

In [41]: df.index
Out[41]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-04-02 19:42:00.474000, ..., 2013-04-02 19:42:58.225000]
Length: 13, Freq: None, Timezone: None
</snippet></ROW><ROW><id>16207769</id><snippet>__iter__</snippet></ROW><ROW><id>16207769</id><snippet>In [1]: class A(object):
   ...:     def __init__(self):
   ...:        self.pairs = ((1,2),(2,3))
   ...:     def __iter__(self):
   ...:         return iter(self.pairs)
   ...:     

In [2]: a = A()

In [3]: dict(a)
Out[3]: {1: 2, 2: 3}
</snippet></ROW><ROW><id>16207769</id><snippet>dict</snippet></ROW><ROW><id>16207769</id><snippet>.keys</snippet></ROW><ROW><id>16207769</id><snippet>__getitem__</snippet></ROW><ROW><id>16207769</id><snippet>__iter__</snippet></ROW><ROW><id>16207769</id><snippet>list(instance)</snippet></ROW><ROW><id>16207769</id><snippet>dict(instance)</snippet></ROW><ROW><id>16207769</id><snippet>In [4]: class B(object):
    ...:     def __init__(self):
    ...:        self.d = {'key':'value'}
    ...:        self.l = [1,2,3,4]
    ...:     def keys(self):
    ...:         return self.d.keys()
    ...:     def __getitem__(self, item):
    ...:         return self.d[item]
    ...:     def __iter__(self):        
    ...:         return iter(self.l)
    ...:     

In [5]: b = B()

In [6]: list(b)
Out[6]: [1, 2, 3, 4]

In [7]: dict(b)
Out[7]: {'key': 'value'}
</snippet></ROW><ROW><id>16208298</id><snippet>with</snippet></ROW><ROW><id>16208298</id><snippet>with open('somefile.txt', 'w+') as f:
    # Note that f has now been truncated to 0 bytes, so you'll only
    # be able to read data that you wrote earlier...
    f.write('somedata\n')
    f.seek(0)  # Important: return to the top of the file before reading, otherwise you'll just read an empty string
    data = f.read() # Returns 'somedata\n'
</snippet></ROW><ROW><id>16208298</id><snippet>f.seek(0)</snippet></ROW><ROW><id>16208298</id><snippet>f.read()</snippet></ROW><ROW><id>16208329</id><snippet>heapq</snippet></ROW><ROW><id>16208329</id><snippet>import heapq

class Item(object):
    def __init__(self, letter, value):
        self.letter = letter
        self.value = value

    def __repr__(self):
        return "Item({0}, {1})".format(self.letter, self.value)

    def __le__(self, other):
        # This is where you control whether it's a min heap or a max heap,
        # and also what you want to sort on: value, letter or both.
        return self.value &gt; other.value

items = [Item(*x) for x in a]
heapq.heapify(items)
</snippet></ROW><ROW><id>16208329</id><snippet>&lt;</snippet></ROW><ROW><id>16208329</id><snippet>&gt;</snippet></ROW><ROW><id>16208752</id><snippet>count[listIndex]</snippet></ROW><ROW><id>16208752</id><snippet>range()</snippet></ROW><ROW><id>16208752</id><snippet>print('I' * count[listIndex])</snippet></ROW><ROW><id>16208752</id><snippet>for</snippet></ROW><ROW><id>16208873</id><snippet>&gt;&gt;&gt; arr[ma.argmax(arr)]
masked
</snippet></ROW><ROW><id>16208873</id><snippet>argmax</snippet></ROW><ROW><id>16208873</id><snippet>fill_value</snippet></ROW><ROW><id>16208873</id><snippet>argmax</snippet></ROW><ROW><id>16208873</id><snippet>numpy.argmax</snippet></ROW><ROW><id>16209038</id><snippet>PolyModel</snippet></ROW><ROW><id>16209470</id><snippet>&gt;&gt;&gt; A = [{'Destination': 'me.xx@domain.fr', 'mid': '6754', 'Type S': 'VOICE', 'Origine': '+45854521', 'Type D': 'SMTP.0', 'Time': '08:29:50.293'}, {'Destination': 'fax.server@domain.fr', 'mid': '6755', 'Type S': 'FAXG3', 'Origine': 'p0298220991', 'Type D': 'SMTP.0', 'Time': '08:55:33.731'}]
&gt;&gt;&gt; B = [{'status': 'OK', 'mid': '6754'}, {'status': 'Erreur', 'mid': '6755'}, {'status': 'OK', 'mid': '6756'}]
&gt;&gt;&gt; mid_status = {}
&gt;&gt;&gt; for d in B:
        mid_status.setdefault(d['mid'], []).append(d['status'])


&gt;&gt;&gt; for d in A:
        if d['mid'] in mid_status:
            d['status'] = mid_status[d['mid']]


&gt;&gt;&gt; A
[{'status': ['OK'], 'Destination': 'me.xx@domain.fr', 'mid': '6754', 'Type S': 'VOICE', 'Origine': '+45854521', 'Time': '08:29:50.293', 'Type D': 'SMTP.0'}, {'status': ['Erreur'], 'Destination': 'fax.server@domain.fr', 'mid': '6755', 'Type S': 'FAXG3', 'Origine': 'p0298220991', 'Time': '08:55:33.731', 'Type D': 'SMTP.0'}]
</snippet></ROW><ROW><id>16209470</id><snippet>for d in A:
    d['status'] = mid_status.get(d['mid'], [])
</snippet></ROW><ROW><id>16209593</id><snippet>def on_mouse(event, x, y, flags, params):
    if event == cv.CV_EVENT_LBUTTONDOWN:
        print 'Start Mouse Position: '+str(x)+', '+str(y)
        sbox = [x, y]
        boxes.append(sbox)
    elif event == cv.CV_EVENT_LBUTTONUP:
        print 'End Mouse Position: '+str(x)+', '+str(y)
        ebox = [x, y]
        boxes.append(ebox)

count = 0
while(1):
    count += 1
    _,img = cap.read()
    img = cv2.blur(img, (3,3))

    cv2.namedWindow('real image')
    cv.SetMouseCallback('real image', on_mouse, 0)
    cv2.imshow('real image', img)

    if count &lt; 50:
        if cv2.waitKey(33) == 27:
            cv2.destroyAllWindows()
            break
    elif count &gt;= 50:
        if cv2.waitKey(0) == 27:
            cv2.destroyAllWindows()
            break
        count = 0
</snippet></ROW><ROW><id>16210362</id><snippet>class SMSStore(object):
    def __init__(self):
        self.store = []
        self.message_count = 0

    def add_new_arrival(self,number,time,text):
        self.store.append(("From: "+number, "Recieved: "+time,"Msg: "+text))
        self.message_count += 1

    def delete(self, i):
        if i &gt;= len(store):
            raise IndexError
        else:
            del self.store[i]
            self.message_count -= 1

sms_store = SMSStore()
sms_store.add_new_arrival("1234", "now", "lorem ipsum")
try:
    sms_store.delete(20)
except IndexError:
    print("Index does not exist")

print sms_store.store

# multiple separate stores
sms_store2 = SMSStore()
sms_store2.add_new_arrival("4321", "then", "lorem ipsum")
print sms_store2.store
</snippet></ROW><ROW><id>16210572</id><snippet> from django_tools.middlewares import ThreadLocal
 def log_something(levelname, module, funcname, message):
     user = ThreadLocal.get_current_user()
     # do your logging here. "user" is the user object and the user id is in user.pk
</snippet></ROW><ROW><id>16210662</id><snippet>xmpp.connect(('talk.google.com', '5222'))
                               |
                             there you missed a comma
</snippet></ROW><ROW><id>16210662</id><snippet>xmpp.connect(('talk.google.com', 5222), '5222')
</snippet></ROW><ROW><id>16210662</id><snippet>(HOST, PORT)</snippet></ROW><ROW><id>16211112</id><snippet>from fabric.api import run
from fabric.tasks import execute


def deploy(hosts, command):
    execute(execute_deploy, command=command, hosts=hosts)


def execute_deploy(command):
    run(command)
</snippet></ROW><ROW><id>16211112</id><snippet>from demo import deploy

hosts = ['localhost']
command = 'hostname'

deploy(hosts, command)
</snippet></ROW><ROW><id>16211112</id><snippet>python main.py</snippet></ROW><ROW><id>16211223</id><snippet>groupby</snippet></ROW><ROW><id>16211223</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>16211223</id><snippet>[timestamp, value]</snippet></ROW><ROW><id>16211223</id><snippet>from collections import defaultdict
import csv

per_label = defaultdict(list)

with open(inputfilename, 'rb') as inputfile:
    reader = csv.reader(inputfile)
    next(reader, None)  # skip the header row

    for timestamp, value, label in reader:
        per_label[label.strip()].append([timestamp.strip(), float(value)])
</snippet></ROW><ROW><id>16211223</id><snippet>per_label</snippet></ROW><ROW><id>16211223</id><snippet>[timestamp, value]</snippet></ROW><ROW><id>16211223</id><snippet>value</snippet></ROW><ROW><id>16211223</id><snippet>{'CPU pid=26298:percent': [['15:22:57', 849.0], ['15:22:58', 0.0]],
 'Disks I/O': [['15:22:58', 28683.0]],
 'JMX 31690:gc-time': [['15:22:58', 0.0]],
 'JMX MB': [['15:22:57', 461000.0], ['15:22:58', 503000.0]],
 'Memory pid=26298:unit=mb:resident': [['15:22:58', 3369078.0]]}
</snippet></ROW><ROW><id>16211419</id><snippet>from __future__ import division
from __future__ import print_function
from scipy.optimize import curve_fit
import numpy as np

def parabola(t, *p): 
    a, b, c, d = p
    y = np.zeros(t.shape)
    indices = np.abs(t) &lt; b
    y[indices] = (a*(1-(((t[indices]-c)/b)**2)) + d)
    return y

p0 = [1, 2, 3, 4]
x = np.linspace(-10, 10, 20)
y = parabola(x, *p0)
coeff, cov = curve_fit(parabola, x, y, p0)
print(coeff)
</snippet></ROW><ROW><id>16211419</id><snippet>c</snippet></ROW><ROW><id>16211419</id><snippet>b</snippet></ROW><ROW><id>16211419</id><snippet>c</snippet></ROW><ROW><id>16211419</id><snippet>[1, 2, 3, 4]</snippet></ROW><ROW><id>16211419</id><snippet>from __future__ import division
from __future__ import print_function
from scipy.optimize import curve_fit
import numpy as np
from matplotlib import pyplot as plt

def parabola(t, *p): 
    a, b, c, d = p
    y = np.zeros(t.shape)
    # The indices criterion was first fixed to values that appeared reasonably; 
    # otherwise the fit would completely fail.
    # Once decent parameters were found, I replaced 28 and 0.3 with the center `c` 
    # and the width `b`.
    #indices = np.abs(t-28) &lt; 0.3
    indices = np.abs(t-c) &lt; b
    y[indices] = (a*(1-(((t[indices]-c)/b)**2)) + d)
    return y

out = np.loadtxt('data.dat')
# Limit the data to only the interesting part of the data
# Once we have the fit correct, we can always attempt a fit to all data with 
# good starting parameters
xdata = out[...,0][450:550]
ydata = out[...,1][450:550]
# These starting parameters are either from trial fitting, or from theory
p0 = [2, 0.2, 28, 6.6]
coeff, cov = curve_fit(parabola, xdata, ydata, p0)
plt.plot(xdata, ydata, '.')
xfit = np.linspace(min(xdata), max(xdata))
yfit =  parabola(xfit, *coeff)
plt.plot(xfit, yfit, '-')
plt.show()
</snippet></ROW><ROW><id>16211419</id><snippet>b</snippet></ROW><ROW><id>16211419</id><snippet>b</snippet></ROW><ROW><id>16211512</id><snippet>class A(object):
    def foo(self):
        print('foo')

    @staticmethod
    def bar():
        print('bar')

    class B(object):
        @staticmethod
        def bar(obj):
            # A.foo is not staticmethod, you can't use A.foo(),
            # you need an instance.
            # You also can't use super here to get A,
            # because B is not subclass of A.
            obj.foo()
            A.foo(obj)  # the same as obj.foo()

            # A.bar is static, you can use it without an object.
            A.bar()

class B(A):
    def foo(self):
        # Again, B.foo shouldn't be a staticmethod, because A.foo isn't.
        super(B, self).foo()

    @staticmethod
    def bar():
        # You have to use super(type, type) if you don't have an instance.
        super(B, B).bar()


a, b = A(), B()

a.B.bar(a)
b.foo()
B.bar()
</snippet></ROW><ROW><id>16211512</id><snippet>super(B, B)</snippet></ROW><ROW><id>16211548</id><snippet>pygame.draw.rect(screen, (0, 0, 0), player)
</snippet></ROW><ROW><id>16211548</id><snippet>pygame.draw.rect(screen, (0, 0, 0), player.move(-cameraX, 0))
</snippet></ROW><ROW><id>16211548</id><snippet>blockList</snippet></ROW><ROW><id>16211548</id><snippet>blockListDisp</snippet></ROW><ROW><id>16211548</id><snippet>blockTypeList</snippet></ROW><ROW><id>16211548</id><snippet>add_level</snippet></ROW><ROW><id>16211548</id><snippet># use a dict to keep track of possible level blocks, so adding new ones becomes simple
types = {0: "air", 1: "solid"}

def add_level(lvl, bSize): # Creates the level based on a map (lvl) and the size of blocks
    for y in range(len(lvl)): 
        for x in range(len(lvl[0])):
            # no more if/elif
            yield types[lvl[y][x]], pygame.Rect((bSize * x), (bSize * y), bSize, bSize)
</snippet></ROW><ROW><id>16211548</id><snippet>blocks = list(add_level(currLevel, BLOCKSIZE)) # a single list which holds the type and rect for each block of the level
</snippet></ROW><ROW><id>16211548</id><snippet>while True:
    """COLLISION"""
    collision = False
    for type, rect in blocks: # list contains a tuple of type, rect
        if type == "solid":
            if player.colliderect(rect): 
                collision = True
                if vx &gt; 0 and not falling:
                    player.right = rect.left # now you can always use the rect directly instead of accesing other lists
                    vx = 0
                    print('Collide Right')
 ...
</snippet></ROW><ROW><id>16211548</id><snippet>for type, rect in blocks:
    if type == "solid":
        screen.blit(wallblock, rect.move(-cameraX, 0)) #blit the wall-block graphics

pygame.draw.rect(screen, (0, 0, 0), player.move(-cameraX, 0))
</snippet></ROW><ROW><id>16211887</id><snippet>os.mkdir</snippet></ROW><ROW><id>16211887</id><snippet>os.mkdir</snippet></ROW><ROW><id>16211887</id><snippet>In [13]: import os

In [14]: os.getcwd()
Out[14]: '/home/monty'

In [15]: os.mkdir("foo")  #creates foo in /home/monty

In [17]: os.chdir("foo") #change the current working diirectory to `foo`

In [19]: os.getcwd()
Out[19]: '/home/monty/foo'

In [18]: os.mkdir("bar")  #now `bar` is created in `/home/monty/foo`
</snippet></ROW><ROW><id>16212072</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>16212072</id><snippet>new_list = old_list[:]</snippet></ROW><ROW><id>16212072</id><snippet>deepcopy()</snippet></ROW><ROW><id>16212072</id><snippet>dict</snippet></ROW><ROW><id>16212072</id><snippet>copy()</snippet></ROW><ROW><id>16212072</id><snippet>__slots__</snippet></ROW><ROW><id>16212072</id><snippet>sys.getrefcount()</snippet></ROW><ROW><id>16212375</id><snippet>b = a.reshape(10,48)
a = b.reshape(10,4,4,3)
</snippet></ROW><ROW><id>16212529</id><snippet>namedtuple</snippet></ROW><ROW><id>16212529</id><snippet>from collections import namedtuple

class Verb(namedtuple("_Verb",  # arbitrary class name/tag
                      ["singular1", "singular2", "singular3",
                       "plural1", "plural2", "plural3"])):
    @property
    def singular(self):
        return (self.singular1, self.singular2, self.singular3)

    # similarly for plural

    @property
    def first_person(self):
        return (self.singular1, self.plural1)

    # similarly for 2nd and 3rd person
</snippet></ROW><ROW><id>16212529</id><snippet>Verb("make", "make", "makes", "make", "make", "make")
</snippet></ROW><ROW><id>16212529</id><snippet>namedtuple</snippet></ROW><ROW><id>16212529</id><snippet>class</snippet></ROW><ROW><id>16212529</id><snippet>__slots__</snippet></ROW><ROW><id>16212651</id><snippet>return</snippet></ROW><ROW><id>16212651</id><snippet>None</snippet></ROW><ROW><id>16212651</id><snippet>None</snippet></ROW><ROW><id>16212651</id><snippet>user</snippet></ROW><ROW><id>16212651</id><snippet>return</snippet></ROW><ROW><id>16212697</id><snippet>json.loads()</snippet></ROW><ROW><id>16212697</id><snippet>s</snippet></ROW><ROW><id>16212697</id><snippet>.read()</snippet></ROW><ROW><id>16212697</id><snippet>text = open('path/temp')
data = json.load(text)
</snippet></ROW><ROW><id>16212697</id><snippet>json.load()</snippet></ROW><ROW><id>16212697</id><snippet>json.loads()</snippet></ROW><ROW><id>16212849</id><snippet>ath</snippet></ROW><ROW><id>16212849</id><snippet>lsmod</snippet></ROW><ROW><id>16212849</id><snippet>lsmod | grep ath</snippet></ROW><ROW><id>16212849</id><snippet>subprocess</snippet></ROW><ROW><id>16212849</id><snippet>In [60]: c=subprocess.Popen("lsmod",stdout=subprocess.PIPE)

In [61]: gr=subprocess.Popen(["grep" ,"ath"],stdin=c.stdout,stdout=subprocess.PIPE)

In [62]: print gr.communicate()[0]
ath5k                 135206  0 
ath                    19188  1 ath5k
mac80211              461261  1 ath5k
cfg80211              175574  3 ath5k,ath,mac80211
</snippet></ROW><ROW><id>16212890</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; line = "2013-04-23 16:04:12.276 BLA[16878:950f] 'asdf' : 0, 'asds': 0, 'adf': 0"
&gt;&gt;&gt; re.sub(r'BLA\[[^\]]+\]', ',', line)
"2013-04-23 16:04:12.276 , 'asdf' : 0, 'asds': 0, 'adf': 0"
</snippet></ROW><ROW><id>16212890</id><snippet>spaceBLA[16878:950f]</snippet></ROW><ROW><id>16213257</id><snippet>xrange()</snippet></ROW><ROW><id>16213257</id><snippet>format(value, 'X')</snippet></ROW><ROW><id>16213257</id><snippet>start = 0x30D681  # hex literal, gives us a regular integer
end = 0x3227FF

for i in xrange(start, end + 1):
    print format(i, 'X')
</snippet></ROW><ROW><id>16213257</id><snippet>int(hexvalue, 16)</snippet></ROW><ROW><id>16213257</id><snippet>start = int('30D681', 16)
end = int('3227FF', 16)
</snippet></ROW><ROW><id>16213320</id><snippet>with open(filename, 'r') as inputfile:
    lines = list(inputfile)

key = lines[::2]   # every second line
defi = lines[1::2] # every second line, starting with the second
</snippet></ROW><ROW><id>16213320</id><snippet>itertools</snippet></ROW><ROW><id>16213320</id><snippet>from itertools import tee, izip

def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)

with open(filename, 'r') as inputfile:
    key_def_pairs = list(pairwise(inputfile))
</snippet></ROW><ROW><id>16213320</id><snippet>with open(filename, 'r') as inputfile:
    key_def_pairs = dict(pairwise(inputfile))
</snippet></ROW><ROW><id>16213320</id><snippet>from itertools import imap

with open(filename, 'r') as inputfile:
    key_def_pairs = dict(pairwise(imap(str.rstrip, inputfile)))
</snippet></ROW><ROW><id>16213404</id><snippet>ProcessRequests</snippet></ROW><ROW><id>16213404</id><snippet>ProcessRequests(batch)
</snippet></ROW><ROW><id>16213404</id><snippet>ProcessRequests().run(batch)
</snippet></ROW><ROW><id>16213404</id><snippet>Task</snippet></ROW><ROW><id>16213534</id><snippet>min</snippet></ROW><ROW><id>16213534</id><snippet>key</snippet></ROW><ROW><id>16213534</id><snippet>results = {key: min(values, key=lambda x:x[-1].f())
           for key, values in myD.iteritems()}
</snippet></ROW><ROW><id>16213759</id><snippet>idna</snippet></ROW><ROW><id>16213759</id><snippet>requests</snippet></ROW><ROW><id>16213759</id><snippet>idna</snippet></ROW><ROW><id>16213759</id><snippet>&gt;&gt;&gt; u"яндекс.рф".encode('idna')
b'xn--d1acpjx3f.xn--p1ai'
&gt;&gt;&gt; b'xn--d1acpjx3f.xn--p1ai'.decode('idna')
'яндекс.рф'
</snippet></ROW><ROW><id>16213759</id><snippet>from subprocess import STDOUT, check_output as qx

output = qx([r"c:\Python27\python.exe", r"c:\path\to\script.py"], stderr=STDOUT)
</snippet></ROW><ROW><id>16213759</id><snippet>pylauncher</snippet></ROW><ROW><id>16213759</id><snippet>#!python2.7</snippet></ROW><ROW><id>16213896</id><snippet>dict(...)</snippet></ROW><ROW><id>16213896</id><snippet>it = iter(dict(...)) # this is the dict(...) from the for statement
first_key = next(it)
results[first_key] = dict(...) # this is the dict(...) from inside the loop

common = set(results[first_key]) # initialize the set with the first item

for key in it:
    results[key] = dict(...) # the inner dict(...) again
    common.intersection_update(result[key])
</snippet></ROW><ROW><id>16213896</id><snippet>keys</snippet></ROW><ROW><id>16213896</id><snippet>set</snippet></ROW><ROW><id>16213896</id><snippet>lowercase</snippet></ROW><ROW><id>16213896</id><snippet>CAPITALS</snippet></ROW><ROW><id>16214025</id><snippet>print ''
</snippet></ROW><ROW><id>16214025</id><snippet>print('')
</snippet></ROW><ROW><id>16214106</id><snippet>&gt;&gt;&gt; A = [(12,34),(12,6),(2,4),(1,3),(34,32),(34,6)]
&gt;&gt;&gt; B = [(12,34),(12,6),(2,4),(1,3),(34,32),(56,12),(78,23),(23,56)]
&gt;&gt;&gt; set(B).difference(A)
set([(78, 23), (56, 12), (23, 56)])
</snippet></ROW><ROW><id>16214106</id><snippet>&gt;&gt;&gt; set_A = set(A)
&gt;&gt;&gt; [x for x in B if x not in set_A]
[(56, 12), (78, 23), (23, 56)]
</snippet></ROW><ROW><id>16214106</id><snippet>&gt;&gt;&gt; [x for x in B if x not in A]
[(56, 12), (78, 23), (23, 56)]
</snippet></ROW><ROW><id>16214106</id><snippet>A</snippet></ROW><ROW><id>16214106</id><snippet>x not in A</snippet></ROW><ROW><id>16214280</id><snippet>import base64
imgdata = base64.b64decode(imgstring)
filename = 'some_image.jpg'  # I assume you have a way of picking unique filenames
with open(filename, 'wb') as f:
    f.write(imgdata)
# f gets closed when you exit the with statement
# Now save the value of filename to your database
</snippet></ROW><ROW><id>16214401</id><snippet>return</snippet></ROW><ROW><id>16214401</id><snippet>else</snippet></ROW><ROW><id>16214401</id><snippet>outer_iter</snippet></ROW><ROW><id>16214401</id><snippet>None</snippet></ROW><ROW><id>16214401</id><snippet>def reassemble(list_name):
    def inner_iter(head, tail):
        if head[0][0] == '{':
            new_head = [head[0] + ',' + tail[0]]
            if tail[0][-1] == '}':
                return [new_head[0][1:-1]], tail[1:]
            else:
                return inner_iter(new_head, tail[1:])
                #before the change, control reached here upon return
        #control might still reach here, in case 'if' condition was not met
        #implicitly "return None"

    def outer_iter(corrected_list, head, tail):
        if tail == []:
            print corrected_list + head
            return corrected_list + head
        else:
            if head[0][0] == '{':
                head, tail = inner_iter(head, tail)
                return outer_iter(corrected_list + head, [tail[0]], tail[1:])
                #before the change, control reached here upon return
            else:
                return outer_iter(corrected_list + head, [tail[0]], tail[1:])
                #before the change, control reached here upon return
        #before the change, control reached here upon return
        #implicitly "return None"

    return outer_iter([], [list_name[0]], list_name[1:])
</snippet></ROW><ROW><id>16214401</id><snippet>x = ['x','y', '{a', 'b}', 'c']
print reassemble(x)
</snippet></ROW><ROW><id>16214401</id><snippet>['x', 'y', 'a,b', 'c']
['x', 'y', 'a,b', 'c']
</snippet></ROW><ROW><id>16214700</id><snippet>xml_tag = dom.getElementsByTagName('person')[0]
xml_data = [elem.nodeValue for elem in dom.getElementsByTagName('name')]
</snippet></ROW><ROW><id>16214886</id><snippet>assertRaises</snippet></ROW><ROW><id>16214886</id><snippet>def test_validate_percent(self):
    with self.assertRaises(ValidationError):
        validate_percent(1000)
</snippet></ROW><ROW><id>16214886</id><snippet>def test_validate_percent(self):
    self.assertRaises(ValidationError, validate_percent, 1000)
</snippet></ROW><ROW><id>16214889</id><snippet>import multiprocessing as mp

def compute(j):
    # compute a bunch of data
    return data

def write(data):
    # write data to disk

if __name__ == '__main__':
    pool = mp.Pool()
    for j in xrange(200):
        pool.apply_async(compute, args=(j, ), callback=write)
    pool.close()
    pool.join()
</snippet></ROW><ROW><id>16214889</id><snippet>pool = mp.Pool()</snippet></ROW><ROW><id>16214889</id><snippet>compute(j)</snippet></ROW><ROW><id>16214889</id><snippet>data</snippet></ROW><ROW><id>16214889</id><snippet>write(data)</snippet></ROW><ROW><id>16214889</id><snippet>data</snippet></ROW><ROW><id>16214889</id><snippet>j</snippet></ROW><ROW><id>16214889</id><snippet>j</snippet></ROW><ROW><id>16214889</id><snippet>SELECT * FROM table ORDER BY j</snippet></ROW><ROW><id>16214889</id><snippet>pool = mp.Pool(processes=1) 
</snippet></ROW><ROW><id>16214889</id><snippet>compute</snippet></ROW><ROW><id>16214889</id><snippet>write</snippet></ROW><ROW><id>16214889</id><snippet>compute</snippet></ROW><ROW><id>16214889</id><snippet>write</snippet></ROW><ROW><id>16214889</id><snippet>compute</snippet></ROW><ROW><id>16214889</id><snippet>write</snippet></ROW><ROW><id>16215075</id><snippet>Scale</snippet></ROW><ROW><id>16215075</id><snippet>command</snippet></ROW><ROW><id>16215075</id><snippet>command=lambda: scale_changed('LED')
</snippet></ROW><ROW><id>16215075</id><snippet>command=lambda x: scale_changed('LED')
</snippet></ROW><ROW><id>16215227</id><snippet>User</snippet></ROW><ROW><id>16215540</id><snippet>def lazyinit(cls):

    class p(object):
        def __init__(self, *args, **kws):
            self._init = lambda: cls(*args, **kws)            
            self._obj  = None

        def __getattr__(self, k):
            if not self._obj:
                self._obj = self._init()
            return getattr(self._obj, k)

    return p
</snippet></ROW><ROW><id>16215540</id><snippet>@lazyinit
class A(object):
    def __init__(self, a, b):
        print("initializing...")
        self.x = a + b + 2

    def foo(self):
        return self.x

x = A(39, 1)
print x
print x.foo()
print x.foo()
</snippet></ROW><ROW><id>16215549</id><snippet>import os

with open('%s/ex.txt' % os.path.dirname(os.path.abspath(__file__)) as ex:
    print ex.read()
</snippet></ROW><ROW><id>16215584</id><snippet>SO_RCVTIMEO</snippet></ROW><ROW><id>16215584</id><snippet>accept(2)</snippet></ROW><ROW><id>16215584</id><snippet>SO_RCVTIMEO</snippet></ROW><ROW><id>16215584</id><snippet>setdefaulttimeout()</snippet></ROW><ROW><id>16215584</id><snippet>socketmodule.c</snippet></ROW><ROW><id>16215584</id><snippet>SO_RCVTIMEO</snippet></ROW><ROW><id>16215584</id><snippet>select(2)</snippet></ROW><ROW><id>16215584</id><snippet>poll(2)</snippet></ROW><ROW><id>16215584</id><snippet>SO_RCVTIMEO</snippet></ROW><ROW><id>16215584</id><snippet>SO_RCVTIMEO</snippet></ROW><ROW><id>16215584</id><snippet>#ifdef SO_RCVTIMEO
PyModule_AddIntConstant(m, "SO_RCVTIMEO", SO_RCVTIMEO);
#endif
</snippet></ROW><ROW><id>16215584</id><snippet>SO_RCVTIMEO</snippet></ROW><ROW><id>16215584</id><snippet>accept()</snippet></ROW><ROW><id>16215584</id><snippet>accept()</snippet></ROW><ROW><id>16215584</id><snippet>s-&gt;sock_timeout = defaulttimeout;
</snippet></ROW><ROW><id>16215584</id><snippet>accept(2)</snippet></ROW><ROW><id>16215631</id><snippet>import urllib2
req = urllib2.Request(url)
req.add_header('Cache-Control', 'max-age=0')
resp = urllib2.urlopen(req)
content = resp.read()
</snippet></ROW><ROW><id>16215672</id><snippet>In [1]: import re

In [2]: re.search(r'\d{3}-\D{3}-\d{3}',
    ..: "Bla bla bla 123-abc-456 bla bla blaaha").group()
Out[2]: '123-abc-456'
</snippet></ROW><ROW><id>16215672</id><snippet>for</snippet></ROW><ROW><id>16215672</id><snippet>re.findall</snippet></ROW><ROW><id>16215727</id><snippet>glob</snippet></ROW><ROW><id>16215727</id><snippet>from glob import glob  # or iglob, see documentation

for f in glob("*.recode.vcf"):
    os.remove(f)
</snippet></ROW><ROW><id>16215727</id><snippet>os.walk</snippet></ROW><ROW><id>16215898</id><snippet>None</snippet></ROW><ROW><id>16215898</id><snippet>maxshape</snippet></ROW><ROW><id>16215898</id><snippet>f</snippet></ROW><ROW><id>16215898</id><snippet>dset = f.create_dataset('mydataset', (2,2), maxshape=(None,3))
</snippet></ROW><ROW><id>16215898</id><snippet>resize</snippet></ROW><ROW><id>16215898</id><snippet>dset.resize((3,3))
dset[:,:] = np.zeros((3,3),"=i4")
</snippet></ROW><ROW><id>16215898</id><snippet>dset.resize((10,3))
</snippet></ROW><ROW><id>16215937</id><snippet>wxFoo</snippet></ROW><ROW><id>16215937</id><snippet>wx.Foo</snippet></ROW><ROW><id>16215937</id><snippet>EVT_BUTTON</snippet></ROW><ROW><id>16215937</id><snippet>wxCommandEvent</snippet></ROW><ROW><id>16215937</id><snippet>repr</snippet></ROW><ROW><id>16215937</id><snippet>def eventButtonFunction(self, event):
    print repr(event)
</snippet></ROW><ROW><id>16215937</id><snippet>&lt;wx._core.CommandEvent; proxy of &lt;Swig Object of type 'wxCommandEvent *' at 0x21eaec&gt; &gt;
</snippet></ROW><ROW><id>16216755</id><snippet>r+</snippet></ROW><ROW><id>16216755</id><snippet>with open('myFile','r+') as f:
        data=f.readlines()[1:]
        f.truncate(0)          #this will truncate the file
        f.seek(0)             #now file pointer goes to start of the file
        for line in data:     #now write the new data
            items = line.split(';') 
            if len(items) &lt; 2:
                # do something here
            else:
                f.write(line)
</snippet></ROW><ROW><id>16216762</id><snippet>from math import pi
# use raw input (raw_input()) for the inputs... input() is essentially eval(input())
# this is how i would ask for input for a simple problem like this
x = (raw_input("Do you have a [r]ectangle or a [c]ircle? ")) # Answer with r or c
# use .lower() to allow upper or lowercase
if x.lower() == "r":
    l = (int(raw_input("What is the length of your rectangle? ")))
    w = (int(raw_input("What is the width of your rectangle? ")))
    print( l * w )
elif x.lower() == "c":
    r = (int(raw_input("What is the radius of your circle? ")))
    print( r ** 2 * pi)
else:
    print("You didn't enter r or c.")
</snippet></ROW><ROW><id>16216772</id><snippet>ss.expect</snippet></ROW><ROW><id>16216772</id><snippet>ss.expect(r'TCP window size: .*yte \(default\)')
</snippet></ROW><ROW><id>16216772</id><snippet>ss.expect(' ')</snippet></ROW><ROW><id>16216772</id><snippet>ss.expect('\n')</snippet></ROW><ROW><id>16216772</id><snippet>iperf</snippet></ROW><ROW><id>16216847</id><snippet>global</snippet></ROW><ROW><id>16216847</id><snippet>global</snippet></ROW><ROW><id>16216847</id><snippet>CACHE_KEYS</snippet></ROW><ROW><id>16216847</id><snippet>global</snippet></ROW><ROW><id>16216847</id><snippet>append</snippet></ROW><ROW><id>16216847</id><snippet>CACHE</snippet></ROW><ROW><id>16216847</id><snippet>import bisect
import csv

DB_FILE = "GeoLiteCity-Location.csv"

# ['locId', 'country', 'region', 'city', 'postalCode', 'latitude', 'longitude', 'metroCode', 'areaCode']
CACHE = []
CACHE_KEYS = None


def load():
    R = csv.reader(open(DB_FILE))

    for line in R:
        CACHE.append(line)

    # sort by city
    CACHE.sort(key=lambda x: x[3])
    global CACHE_KEYS
    CACHE_KEYS = [x[3] for x in CACHE]


if __name__ == "__main__":
    load()
</snippet></ROW><ROW><id>16216847</id><snippet>global</snippet></ROW><ROW><id>16216847</id><snippet>listOne = []
def load():
    listOne+=[2]
if __name__=="__main__":
    load()
</snippet></ROW><ROW><id>16216847</id><snippet>append</snippet></ROW><ROW><id>16216847</id><snippet>UnboundLocalError: local variable 'listOne' referenced before assignment
</snippet></ROW><ROW><id>16216847</id><snippet>listOne = []
def load():
    listOne.append(2)
if __name__=="__main__":
    load()
</snippet></ROW><ROW><id>16216847</id><snippet>&gt;&gt;&gt; print listOne
[2]
</snippet></ROW><ROW><id>16216866</id><snippet>np.in1d</snippet></ROW><ROW><id>16216866</id><snippet>np.in1d</snippet></ROW><ROW><id>16216866</id><snippet>a = a.ravel().view((np.str, a.itemsize*a.shape[1]))
</snippet></ROW><ROW><id>16216866</id><snippet>In [15]: a = np.array([[1, 2], [2, 3], [1, 3]])

In [16]: a = a.ravel().view((np.str, a.itemsize*a.shape[1]))

In [17]: a.dtype
Out[17]: dtype('|S8')

In [18]: a.shape
Out[18]: (3,)

In [19]: a
Out[19]: 
array(['\x01\x00\x00\x00\x02', '\x02\x00\x00\x00\x03',
       '\x01\x00\x00\x00\x03'], 
      dtype='|S8')
</snippet></ROW><ROW><id>16216866</id><snippet>a</snippet></ROW><ROW><id>16216866</id><snippet>np.in1d</snippet></ROW><ROW><id>16216866</id><snippet>def inNd(a, b, assume_unique=False):
    a = np.asarray(a, order='C')
    b = np.asarray(b, order='C')
    a = a.ravel().view((np.str, a.itemsize * a.shape[1]))
    b = b.ravel().view((np.str, b.itemsize * b.shape[1]))
    return np.in1d(a, b, assume_unique)
</snippet></ROW><ROW><id>16216866</id><snippet>import numpy as np


def inNd(a, b, assume_unique=False):
    a = np.asarray(a, order='C')
    b = np.asarray(b, order='C')
    a = a.ravel().view((np.str, a.itemsize * a.shape[1]))
    b = b.ravel().view((np.str, b.itemsize * b.shape[1]))
    return np.in1d(a, b, assume_unique)

tests = [
    (np.array([[1, 2], [2, 3], [1, 3]]),
     np.array([[2, 2], [3, 3], [4, 4]]),
     np.array([False, False, False])),
    (np.array([[1, 2], [2, 2], [1, 3]]),
     np.array([[2, 2], [3, 3], [4, 4]]),
     np.array([True, False, False])),
    (np.array([[1, 2], [3, 4], [5, 6]]),
     np.array([[1, 2], [3, 4], [7, 8]]),
     np.array([True, True, False])),
    (np.array([[1, 2], [5, 6], [3, 4]]),
     np.array([[1, 2], [5, 6], [7, 8]]),
     np.array([True, True, False])),
    (np.array([[-0.5, 2.5, -2, 100, 2], [5, 6, 7, 8, 9], [3, 4, 5, 6, 7]]),
     np.array([[1.0, 2, 3, 4, 5], [5, 6, 7, 8, 9], [-0.5, 2.5, -2, 100, 2]]),
     np.array([False, True, True]))
]

for a, b, answer in tests:
    result = inNd(b, a)
    try:
        assert np.all(answer == result)
    except AssertionError:
        print('''\
a:
{a}
b:
{b}

answer: {answer}
result: {result}'''.format(**locals()))
        raise
else:
    print('Success!')
</snippet></ROW><ROW><id>16216866</id><snippet>Success!
</snippet></ROW><ROW><id>16217165</id><snippet>max_length</snippet></ROW><ROW><id>16217165</id><snippet>python manage.py schemamigration &lt;name of the app&gt; --auto
python manage.py migrate &lt;name of the app&gt;
</snippet></ROW><ROW><id>16217275</id><snippet>curl_path = '/usr/bin/curl'
curl_list = [curl_path, 'https://stream.twitter.com/1/statuses/filter.json?track=java', '-u', 'user:pass']
</snippet></ROW><ROW><id>16217275</id><snippet>def run(self):
    curl_path = '/usr/bin/curl'
    curl_list = [curl_path, 'https://stream.twitter.com/1/statuses/filter.json?track=java', '-u', 'user:pass']

    child = subprocess.Popen(curl_list,
                             shell=False,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE)
    try:
        out += child.communicate()[0]
        c_out.write(out)
        self.queue.put(c_out)
        self.queue.task_done()
        except KeyboardInterrupt:
            child.kill()
</snippet></ROW><ROW><id>16217285</id><snippet>import math, random, time

num = 1000000

# Generate random points and numbers

# Change #1: Sometimes it's good not to have too much randomness.
# This is one of those cases.
# Changing the code shouldn't change the results.
# Using a fixed seed ensures that the changes are valid.
# The final 'print dist' should yield the same result regardless of optimizations.
# Note: There's nothing magical about this seed.
# I randomly picked a hash tag from a git log.
random.seed (0x7126434a2ea2a259e9f4196cbb343b1e6d4c2fc8)
pt_list = []
rand_list = []

for i in range(num):
    pt = []
    for j in range(3):
        pt.append(random.random())
    pt_list.append(pt)

# Change #2: rand_list is computed in a separate loop.
# This ensures that upcoming optimizations will get the same results as
# this unoptimized version.
for i in range(num):
    rand_list.append(random.randint(0, num - 1))

# Compute

beg_time = time.clock()
dist = 0

for i in range(num):
    pt0 = pt_list[i]
    ri  = rand_list[i]
    pt1 = pt_list[ri]

    val = 0
    for j in range(3):
        val += (pt0[j] - pt1[j]) ** 2
    val = math.sqrt(val)

    dist += val

end_time = time.clock()
elap_time = (end_time - beg_time)

print elap_time
print dist
</snippet></ROW><ROW><id>16217285</id><snippet>import</snippet></ROW><ROW><id>16217285</id><snippet>**</snippet></ROW><ROW><id>16217285</id><snippet>pow(d,2)</snippet></ROW><ROW><id>16217285</id><snippet>**</snippet></ROW><ROW><id>16217285</id><snippet>x**2</snippet></ROW><ROW><id>16217285</id><snippet>x*x</snippet></ROW><ROW><id>16217285</id><snippet>d*d</snippet></ROW><ROW><id>16217285</id><snippet>for i in range(num):
    pt0 = pt_list[i]
    ri  = rand_list[i]
    pt1 = pt_list[ri]

    val = 0 
    for j in range(3):
        d = pt0[j] - pt1[j]
        val += d*d 
    val = math.sqrt(val)

    dist += val 
</snippet></ROW><ROW><id>16217285</id><snippet>import math, random, time, itertools

def main (num=1000000) :
    # This small optimization speeds things up by a couple percent.
    sqrt = math.sqrt

    # Generate random points and numbers

    random.seed (0x7126434a2ea2a259e9f4196cbb343b1e6d4c2fc8)

    def random_point () :
        return [random.random(), random.random(), random.random()]

    def random_index () :
       return random.randint(0, num-1)

    # Big optimization:
    # Don't generate the lists of points.
    # Instead use list comprehensions that create iterators.
    # It's best to avoid creating lists of millions of entities when you don't
    # need those lists. You don't need the lists; you just need the iterators.
    pt_list = [random_point() for i in xrange(num)]
    rand_pts = [pt_list[random_index()] for i in xrange(num)]


    # Compute

    beg_time = time.clock()
    dist = 0 

    # Don't loop over a range. That's too C-like.
    # Instead loop over some iterable, preferably one that doesn't create the
    # collection over which the iteration is to occur.
    # This is particularly important when the collection is large.
    for (pt0, pt1) in itertools.izip (pt_list, rand_pts) :

        # Small optimization: inner loop inlined,
        # intermediate variable 'val' eliminated.
        d0 = pt0[0]-pt1[0]
        d1 = pt0[1]-pt1[1]
        d2 = pt0[2]-pt1[2]

        dist += sqrt(d0*d0 + d1*d1 + d2*d2)

    end_time = time.clock()
    elap_time = (end_time - beg_time)

    print elap_time
    print dist
</snippet></ROW><ROW><id>16217285</id><snippet>import numpy, random, time

def main (num=1000000) :

    # Generate random points and numbers

    random.seed (0x7126434a2ea2a259e9f4196cbb343b1e6d4c2fc8)

    def random_point () :
        return [random.random(), random.random(), random.random()]

    def random_index () :
       return random.randint(0, num-1)

    pt_list = numpy.array([random_point() for i in xrange(num)])
    rand_pts = pt_list[[random_index() for i in xrange(num)],:]

    # Compute

    beg_time = time.clock()

    # Mondo slow.
    # dist = numpy.sum (
    #            numpy.apply_along_axis (
    #                numpy.linalg.norm, 1, pt_list - rand_pts))

    # Mondo fast.
    dist = numpy.sum ((numpy.sum ((pt_list-rand_pts)**2, axis=1))**0.5)

    end_time = time.clock()
    elap_time = (end_time - beg_time)

    print elap_time
    print dist
</snippet></ROW><ROW><id>16217454</id><snippet>&gt;&gt;&gt;def handel_upto_99(number):
predef={0:"zero",1:"one",2:"two",3:"three",4:"four",5:"five",6:"six",7:"seven",8:"eight",9:"nine",10:"ten",11:"eleven",12:"twelve",13:"thirteen",14:"fourteen",15:"fifteen",16:"sixteen",17:"seventeen",18:"eighteen",19:"nineteen",20:"twenty",30:"thirty",40:"fourty",50:"fifty",60:"sixty",70:"seventy",80:"eighty",90:"ninety",100:"hundred",100000:"lakh",10000000:"crore",1000000:"million",1000000000:"billion"}
if number in predef.keys():
    return predef[number]
else:
    return predef[(number/10)*10]+' '+predef[number%10]
</snippet></ROW><ROW><id>16217454</id><snippet>&gt;&gt;&gt;def return_bigdigit(number,devideby):
predef={0:"zero",1:"one",2:"two",3:"three",4:"four",5:"five",6:"six",7:"seven",8:"eight",9:"nine",10:"ten",11:"eleven",12:"twelve",13:"thirteen",14:"fourteen",15:"fifteen",16:"sixteen",17:"seventeen",18:"eighteen",19:"nineteen",20:"twenty",30:"thirty",40:"fourty",50:"fifty",60:"sixty",70:"seventy",80:"eighty",90:"ninety",100:"hundred",1000:"thousand",100000:"lakh",10000000:"crore",1000000:"million",1000000000:"billion"}
if devideby in predef.keys():
    return predef[number/devideby]+" "+predef[devideby]
else:
    devideby/=10
    return handel_upto_99(number/devideby)+" "+predef[devideby]
</snippet></ROW><ROW><id>16217454</id><snippet>&gt;&gt;&gt;def mainfunction(number):
dev={100:"hundred",1000:"thousand",100000:"lakh",10000000:"crore",1000000000:"billion"}
if number is 0:
    return "Zero"
if number&lt;100:
    result=handel_upto_99(number)

else:
    result=""
    while number&gt;=100:
        devideby=1
        length=len(str(number))
        for i in range(length-1):
            devideby*=10
        if number%devideby==0:
            if devideby in dev:
                return handel_upto_99(number/devideby)+" "+ dev[devideby]
            else:
                return handel_upto_99(number/(devideby/10))+" "+ dev[devideby/10]
        res=return_bigdigit(number,devideby)
        result=result+' '+res
        if devideby not in dev:
            number=number-((devideby/10)*(number/(devideby/10)))
        number=number-devideby*(number/devideby)

    if number &lt;100:
        result = result + ' '+ handel_upto_99(number)
return result
</snippet></ROW><ROW><id>16217454</id><snippet>&gt;&gt;&gt;mainfunction(12345)
' twelve thousand three hundred fourty five'

&gt;&gt;&gt;mainfunction(0)
'Zero'

&gt;&gt;&gt;mainfunction(100)
'one hundred'

&gt;&gt;&gt;mainfunction(40230534)
' four crore two lakh thirty thousand five hundred thirty four'
</snippet></ROW><ROW><id>16217708</id><snippet>accounts</snippet></ROW><ROW><id>16217708</id><snippet>accounts = {}

# ...
if answer == 3:
    account_number = input("enter num")
    account_name = input("\nwhat do you want your acount name to be?")
    accounts[account_number] = Checking(name=account_name, balance=0)
</snippet></ROW><ROW><id>16217708</id><snippet>for account_number, account in accounts.items():
    print('Account number: {}, account name: {}'.format(account_number, account.name))
</snippet></ROW><ROW><id>16217771</id><snippet>$ /Library/Frameworks/Python.framework/Versions/2.7/bin/easy_install py2app
$ .../bin/easy_install ...
$ /Library/Frameworks/Python.framework/Versions/2.7/bin/python setup.py py2app
</snippet></ROW><ROW><id>16217782</id><snippet>arcname</snippet></ROW><ROW><id>16217782</id><snippet>ZipFile.write</snippet></ROW><ROW><id>16217782</id><snippet>ZipFile.write(filename[, arcname[, compress_type]])</snippet></ROW><ROW><id>16217782</id><snippet>filename</snippet></ROW><ROW><id>16217782</id><snippet>arcname</snippet></ROW><ROW><id>16217782</id><snippet>filename</snippet></ROW><ROW><id>16217782</id><snippet>zf.write(os.path.join(root, filename), filename, zipfile.ZIP_DEFLATED)
</snippet></ROW><ROW><id>16217799</id><snippet>a[1:3, 1:3, :]</snippet></ROW><ROW><id>16217799</id><snippet>a[1:2][1:2][:]</snippet></ROW><ROW><id>16217799</id><snippet>a[1:3, 1:3, ...]</snippet></ROW><ROW><id>16217799</id><snippet>...</snippet></ROW><ROW><id>16217799</id><snippet>:</snippet></ROW><ROW><id>16217799</id><snippet>a[1:3, 1:3]</snippet></ROW><ROW><id>16217799</id><snippet>a[1:3]</snippet></ROW><ROW><id>16217799</id><snippet>(2,5,3)</snippet></ROW><ROW><id>16217799</id><snippet>[1:3]</snippet></ROW><ROW><id>16217799</id><snippet>a[1][2][3]</snippet></ROW><ROW><id>16217799</id><snippet>a[1,2,3]</snippet></ROW><ROW><id>16217967</id><snippet>group</snippet></ROW><ROW><id>16217967</id><snippet>match = re.search(r"1.3", "abc123xyz")
if match:
    doSomethingWith(match.group(0))
</snippet></ROW><ROW><id>16217967</id><snippet>0</snippet></ROW><ROW><id>16217967</id><snippet>match.group()</snippet></ROW><ROW><id>16217967</id><snippet>1</snippet></ROW><ROW><id>16217967</id><snippet>2</snippet></ROW><ROW><id>16217967</id><snippet>group()</snippet></ROW><ROW><id>16218007</id><snippet>&gt;&gt;&gt; np.array((a, b, c)).argmax(axis=0)
array([1, 2, 0, 0])
</snippet></ROW><ROW><id>16218007</id><snippet>def f(my_list):
    return np.array(my_list).argmax(axis=0)
</snippet></ROW><ROW><id>16218044</id><snippet>postcommand</snippet></ROW><ROW><id>16218044</id><snippet>class EditMenu(Tkinter.Menu):

    def __init__(self, parent, listboxes, **kw):
        self.commandhook = kw.get('postcommand', None)
        kw['postcommand'] = self.postcommand
        super(EditMenu, self).__init__(parent, **kw)
        self.listboxes = listboxes
        self.add_command(label="Move to right", command=self.move_to_right)
        self.add_command(label="Move to left", command=self.move_to_left)
        self.add_command(label="Exchange", command=self.exchange)

    def postcommand(self):
        for i in xrange(3):
            # do some checks for each entry
            # and set state to either Tkinter.DISABLED or Tkinter.NORMAL
            self.entryconfig(i, state=state)
        if self.commandhook is not None:
            self.commandhook()

    # Implement your three functions here
</snippet></ROW><ROW><id>16218360</id><snippet>python my_program.py somefolder/some_import.py
</snippet></ROW><ROW><id>16218589</id><snippet>import os

psqldir = 'C:/Program Files/PostgreSQL/9.2/bin'
os.environ['PATH'] = '%s;%s' % (os.environ['PATH'], psqldir)
os.system('foo')
</snippet></ROW><ROW><id>16218589</id><snippet>foo.exe</snippet></ROW><ROW><id>16218589</id><snippet>os.system('C:/Program Files/PostgreSQL/9.2/bin/foo')
</snippet></ROW><ROW><id>16218589</id><snippet>os.system()</snippet></ROW><ROW><id>16218589</id><snippet>subprocess</snippet></ROW><ROW><id>16218589</id><snippet>subprocess</snippet></ROW><ROW><id>16218771</id><snippet>from datetime import datetime

class Sms_store:
    store = []
    message_count = 0

    def __init__(self):
        pass

    def add_new_arrival(self,number,time,text):
        Sms_store.store.append(("From: "+number, "Recieved: "+time,"Msg: "+text))
        Sms_store.message_count += 1

newsms1 = Sms_store()
time = datetime.now().strftime('%H:%M:%S')
newsms1.add_new_arrival("23456",time, "hello, how are you?")

newsms2 = Sms_store()
time = datetime.now().strftime('%H:%M:%S')
newsms2.add_new_arrival("23456",time, "hello, how are you?")

print Sms_store.store
</snippet></ROW><ROW><id>16218771</id><snippet>store</snippet></ROW><ROW><id>16218771</id><snippet>message_count</snippet></ROW><ROW><id>16218771</id><snippet>Sms_store</snippet></ROW><ROW><id>16219274</id><snippet>&gt;&gt;&gt; x = [(1, 2, 3), (1, 2, 3), (1, 2, 3)]
&gt;&gt;&gt; x = [(a, b) for (a, b, c) in x]
[(1, 2), (1, 2), (1, 2)]
</snippet></ROW><ROW><id>16219342</id><snippet>players = list()
for items in playerPars:
    players.append(items[0])
print('The player(s) with the most pars is/are', ', '.join(players))
</snippet></ROW><ROW><id>16219342</id><snippet>players = [player[0] for player in playerPars]
</snippet></ROW><ROW><id>16219342</id><snippet>The player(s) with the most pars is/are player1, player2</snippet></ROW><ROW><id>16219342</id><snippet>if len(players) &gt; 1:
    print('The player(s) with the most pars are', ', '.join(players))
elif len(players) == 1:
    print('The player with the most pars is %s' % players[0])
</snippet></ROW><ROW><id>16219414</id><snippet>-m unittest</snippet></ROW><ROW><id>16219428</id><snippet>twisted.protocols.stateful.StatefulProtocol</snippet></ROW><ROW><id>16219428</id><snippet>class LingServer(StatefulProtocol):
    def getInitialState(self):
        return self.ling, 3000

    def ling(self, data):
        # Process here, len(data) == 3000
</snippet></ROW><ROW><id>16219630</id><snippet>import re

matching_link = grab_toc.find('a', text=re.compile('one', re.IGNORECASE))
</snippet></ROW><ROW><id>16219630</id><snippet>a</snippet></ROW><ROW><id>16219630</id><snippet>one</snippet></ROW><ROW><id>16219630</id><snippet>print matching_link.string
print matching_link['href']
</snippet></ROW><ROW><id>16219630</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; import re
&gt;&gt;&gt; soup = BeautifulSoup('''\
... &lt;div id="dw__toc"&gt;
... &lt;h3 class="toggle"&gt;Table of Contents&lt;/h3&gt;
... &lt;div&gt;
... 
... &lt;ul class="toc"&gt;
... &lt;li class="level1"&gt;&lt;div class="li"&gt;&lt;a href="#section"&gt;#&lt;/a&gt;&lt;/div&gt;
... &lt;ul class="toc"&gt;
... &lt;li class="level2"&gt;&lt;div class="li"&gt;&lt;a href="#link1"&gt;One&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;
... &lt;li class="level2"&gt;&lt;div class="li"&gt;&lt;a href="#link2"&gt;Two&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;
... &lt;li class="level2"&gt;&lt;div class="li"&gt;&lt;a href="#link3"&gt;Three&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;
... &lt;/ul&gt;&lt;/ul&gt;''')
&gt;&gt;&gt; matching_link = soup.find('a', text=re.compile('one', re.IGNORECASE))
&gt;&gt;&gt; print matching_link.string
One
&gt;&gt;&gt; print matching_link['href']
#link1
</snippet></ROW><ROW><id>16219630</id><snippet>.find()</snippet></ROW><ROW><id>16219630</id><snippet>NavigableString</snippet></ROW><ROW><id>16219630</id><snippet>a</snippet></ROW><ROW><id>16219630</id><snippet>.parent</snippet></ROW><ROW><id>16219630</id><snippet>matching_link = grab_toc.find('a', text=re.compile('one', re.IGNORECASE)).parent
print matching_link.string
print matching_link['href']
</snippet></ROW><ROW><id>16219851</id><snippet>from flask.ext.mongoengine import MongoEngine
db = MongoEngine(app)
</snippet></ROW><ROW><id>16219851</id><snippet>from db import db</snippet></ROW><ROW><id>16219851</id><snippet>db -&gt; model -&gt; view -&gt; app</snippet></ROW><ROW><id>16219851</id><snippet>app (db) -&gt; model -&gt; view -&gt; app</snippet></ROW><ROW><id>16220014</id><snippet>players.sort(key=lambda p: float(p[1]) / float(p[2]))
</snippet></ROW><ROW><id>16220014</id><snippet>SELECT name, totalGross, totalRounds ORDER BY totalGross/totalRounds
</snippet></ROW><ROW><id>16220527</id><snippet>map_coordinates</snippet></ROW><ROW><id>16220527</id><snippet>dx</snippet></ROW><ROW><id>16220527</id><snippet>dy</snippet></ROW><ROW><id>16220527</id><snippet>dz</snippet></ROW><ROW><id>16220527</id><snippet>xx = x / dx
yy = y / dy
zz = z / dz
</snippet></ROW><ROW><id>16220527</id><snippet>map_coordinates</snippet></ROW><ROW><id>16220527</id><snippet>(d, ...)</snippet></ROW><ROW><id>16220527</id><snippet>d</snippet></ROW><ROW><id>16220527</id><snippet>scaling = np.array([dx, dy, dz])
</snippet></ROW><ROW><id>16220527</id><snippet>scaling</snippet></ROW><ROW><id>16220527</id><snippet>idx = coords / scaling[(slice(None),) + (None,)*(coords.ndim-1)]
</snippet></ROW><ROW><id>16220527</id><snippet>dx, dy, dz = 1, 1, 2
scaling = np.array([dx, dy, dz])
data = np.random.rand(10, 15, 5)
</snippet></ROW><ROW><id>16220527</id><snippet>2*y - z = 0</snippet></ROW><ROW><id>16220527</id><snippet>u = np.array([1, 0 ,0])
v = np.array([0, 1, 2])
</snippet></ROW><ROW><id>16220527</id><snippet>coords = (u[:, None, None] * np.linspace(0, 9, 10)[None, :, None] +
          v[:, None, None] * np.linspace(0, 2.5, 10)[None, None, :])
</snippet></ROW><ROW><id>16220527</id><snippet>map_coordinates</snippet></ROW><ROW><id>16220527</id><snippet>idx = coords / scaling[(slice(None),) + (None,)*(coords.ndim-1)]
new_data = ndi.map_coordinates(data, idx)
</snippet></ROW><ROW><id>16220527</id><snippet>(10, 10)</snippet></ROW><ROW><id>16220527</id><snippet>[u_idx, v_idx]</snippet></ROW><ROW><id>16220527</id><snippet>coords[:, u_idx, v_idx]</snippet></ROW><ROW><id>16220949</id><snippet>BlobProperty</snippet></ROW><ROW><id>16220949</id><snippet>decode</snippet></ROW><ROW><id>16220949</id><snippet>unicode_key = key.decode('iso-8859-1')
bytes_key = unicode_key.encode('iso-8859-1')
</snippet></ROW><ROW><id>16221094</id><snippet>ax</snippet></ROW><ROW><id>16221094</id><snippet>ax.xaxis.set_label_position('top')
ax.yaxis.set_label_position('right')
</snippet></ROW><ROW><id>16221094</id><snippet>fig.tight_layout()
</snippet></ROW><ROW><id>16221094</id><snippet>fig.show()</snippet></ROW><ROW><id>16221095</id><snippet>u''</snippet></ROW><ROW><id>16221095</id><snippet>rank.set('name', u'ą')
</snippet></ROW><ROW><id>16221095</id><snippet>&lt;data&gt;
    &lt;country name="Liechtenstein"&gt;
    &lt;neighbor direction="E" name="Ø" /&gt;
    &lt;neighbor direction="W" name="Ø" /&gt;
&lt;/country&gt;
&lt;/data&gt;
</snippet></ROW><ROW><id>16221095</id><snippet>B9</snippet></ROW><ROW><id>16221095</id><snippet>ą</snippet></ROW><ROW><id>16221139</id><snippet>sleep</snippet></ROW><ROW><id>16221139</id><snippet>after</snippet></ROW><ROW><id>16221139</id><snippet>def refresh():
    line = get_next_line()
    line = line.split('|')
    B_loc = line[0].split(':')[1].split(',')
    ...

    # call this function again in 20ms
    root.after(20, refresh)
</snippet></ROW><ROW><id>16221139</id><snippet>get_next_line</snippet></ROW><ROW><id>16221263</id><snippet>re.sub(r'[^., \t\w]*', '', 'this is my&lt;\n test &lt;+-,1345.;&gt;')
</snippet></ROW><ROW><id>16221263</id><snippet>&gt;&gt;&gt; re.sub(r'[^., \t\w]*', '', 'this is my&lt;\n test &lt;+-,1345.;&gt;')
'this is my test ,1345.'
</snippet></ROW><ROW><id>16221263</id><snippet>\W</snippet></ROW><ROW><id>16221263</id><snippet>\S</snippet></ROW><ROW><id>16221263</id><snippet>\D</snippet></ROW><ROW><id>16221263</id><snippet>\D</snippet></ROW><ROW><id>16221263</id><snippet>\w</snippet></ROW><ROW><id>16221263</id><snippet>\D</snippet></ROW><ROW><id>16221263</id><snippet>\s</snippet></ROW><ROW><id>16221263</id><snippet>.</snippet></ROW><ROW><id>16221263</id><snippet>,</snippet></ROW><ROW><id>16221263</id><snippet>\d</snippet></ROW><ROW><id>16221263</id><snippet>\w</snippet></ROW><ROW><id>16221263</id><snippet>\d</snippet></ROW><ROW><id>16221383</id><snippet>dict()</snippet></ROW><ROW><id>16221383</id><snippet>value_dicts = dict((x, {}) for x in values)
</snippet></ROW><ROW><id>16221383</id><snippet>(key, value)</snippet></ROW><ROW><id>16221383</id><snippet>dict()</snippet></ROW><ROW><id>16221383</id><snippet>&gt;&gt;&gt; values=[0,1,2,4,5,8] 
&gt;&gt;&gt; dict((x, {}) for x in values)
{0: {}, 1: {}, 2: {}, 4: {}, 5: {}, 8: {}}
</snippet></ROW><ROW><id>16222080</id><snippet>n</snippet></ROW><ROW><id>16222080</id><snippet>k</snippet></ROW><ROW><id>16222080</id><snippet>k-1</snippet></ROW><ROW><id>16222080</id><snippet>def choose_sets(l, k):
  if k == 0:
    return [[]]
  if len(l) == 0:
    return []
  l2 = l[1:]
  subsets = choose_sets(l2, k-1)
  for s in subsets:
    s.append(l[0])
  return subsets+ choose_sets(l2, k)
</snippet></ROW><ROW><id>16222126</id><snippet>$s</snippet></ROW><ROW><id>16222126</id><snippet>strSQL = "select * from myTable where aField = %s"
cursor.execute(strSQL, [aValue])
</snippet></ROW><ROW><id>16222129</id><snippet>[(snd, fst) for fst, snd in thelist]
</snippet></ROW><ROW><id>16222227</id><snippet># module.py

address_dict = {'address1':{'username':'abc', 'password':'123'}, 'address2':{'username':'xyz', 'password':'456'}}

# main.py

import module
print(module.address_dict)
</snippet></ROW><ROW><id>16222227</id><snippet>module.</snippet></ROW><ROW><id>16222227</id><snippet>from module import address_dict
print(address_dict)
</snippet></ROW><ROW><id>16222271</id><snippet>cur.execute("SELECT quantity FROM cards WHERE ref=?", (idn,))  
</snippet></ROW><ROW><id>16222271</id><snippet>idn</snippet></ROW><ROW><id>16222271</id><snippet>idn</snippet></ROW><ROW><id>16222271</id><snippet>print "Quantity " + str(cur.fetchone()[0])
</snippet></ROW><ROW><id>16222271</id><snippet>&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; con = sqlite3.connect(':memory:')
&gt;&gt;&gt; con.executescript('''\
... CREATE TABLE cards (id integer primary key autoincrement not null, ref text unique
... check(ref!=''), name text, description text, quantity integer default 0, cat1 text,
... cat2 text);
... 
... INSERT INTO "cards" VALUES(1,'lx247','green door',NULL,20,'abstract','');
... INSERT INTO "cards" VALUES(2,'lxx247','green door',NULL,20,'abstract','');
... INSERT INTO "cards" VALUES(3,'lxx2f47','green door',NULL,20,'abstract','');
... ''')
&lt;sqlite3.Cursor object at 0x10ad66ab0&gt;
&gt;&gt;&gt; idn = 'lx247'
&gt;&gt;&gt; cur=con.cursor()
&gt;&gt;&gt; cur.execute("SELECT quantity FROM cards WHERE ref=?", (idn,))
&lt;sqlite3.Cursor object at 0x10ad66b20&gt;
&gt;&gt;&gt; print "Quantity " + str(cur.fetchone()[0])
Quantity 20
</snippet></ROW><ROW><id>16222409</id><snippet>import re

strings = """String1_Todelete_restofstring.txt
String2_Alsotoremove_restofstring.txt
String3_2013_restofstring.txt
String4_2011_restofstring.txt
String5_restofstring_tosuppress.txt""".split()

keywords = set(("Todelete", "2013","2011", "Alsotoremove","tosuppress"))

for s in strings:
    print re.sub("_[^_.]+", lambda m: "" if m.group(0)[1:] in keywords else m.group(0), s)
</snippet></ROW><ROW><id>16222673</id><snippet>output = input[index.astype(np.bool)]
</snippet></ROW><ROW><id>16222673</id><snippet>output = input[np.where(index)[0]]
</snippet></ROW><ROW><id>16222726</id><snippet>f.readlines()</snippet></ROW><ROW><id>16222726</id><snippet>outl</snippet></ROW><ROW><id>16222726</id><snippet>f</snippet></ROW><ROW><id>16222726</id><snippet>writelines()</snippet></ROW><ROW><id>16222726</id><snippet>writelines()</snippet></ROW><ROW><id>16222726</id><snippet>l = []
outl=[]
with open('r6.txt', 'r') as f, \
    open('out.txt', 'w') as out:
    # gets entire file as one string and removes line breaks
    outl = ''.join(f.readlines()).replace('\n','')
    l = [outl[each:each+12]+'\n' for each in xrange(0,len(outl),12)]
    out.writelines(l)
</snippet></ROW><ROW><id>16222726</id><snippet>abcdefeounv lernbtlttb
berolinervio
bnrtopimrtynprymnpobm,t
2497839085gh
b640h846j048nm5gh0m8-9
2g395gm4-59m46bn
2vb-9mb5-9046m-b946m-b946mb-96m-05n=570n;rlgbm'dfb
</snippet></ROW><ROW><id>16222726</id><snippet>abcdefeounv 
lernbtlttbbe
rolinerviobn
rtopimrtynpr
ymnpobm,t249
7839085ghb64
0h846j048nm5
gh0m8-92g395
gm4-59m46bn2
vb-9mb5-9046
m-b946m-b946
mb-96m-05n=5
70n;rlgbm'df
b
</snippet></ROW><ROW><id>16222912</id><snippet>freeze</snippet></ROW><ROW><id>16222912</id><snippet>freeze</snippet></ROW><ROW><id>16222912</id><snippet>freeze</snippet></ROW><ROW><id>16222912</id><snippet>freeze</snippet></ROW><ROW><id>16222912</id><snippet>freeze</snippet></ROW><ROW><id>16222912</id><snippet>cx_freeze</snippet></ROW><ROW><id>16222912</id><snippet>py2exe</snippet></ROW><ROW><id>16222912</id><snippet>PyInstaller</snippet></ROW><ROW><id>16222912</id><snippet>freeze</snippet></ROW><ROW><id>16222912</id><snippet>venv</snippet></ROW><ROW><id>16222912</id><snippet>freeze</snippet></ROW><ROW><id>16222912</id><snippet>numpy</snippet></ROW><ROW><id>16222912</id><snippet>itertools</snippet></ROW><ROW><id>16222912</id><snippet>lxml</snippet></ROW><ROW><id>16222912</id><snippet>html.parse</snippet></ROW><ROW><id>16222912</id><snippet>ctypes</snippet></ROW><ROW><id>16222912</id><snippet>freeze</snippet></ROW><ROW><id>16222912</id><snippet>freeze</snippet></ROW><ROW><id>16222912</id><snippet>freeze</snippet></ROW><ROW><id>16222912</id><snippet>freeze</snippet></ROW><ROW><id>16222978</id><snippet>testsite_array = []
with open('topsites.txt') as my_file:
    for line in my_file:
        testsite_array.append(line)
</snippet></ROW><ROW><id>16222978</id><snippet>f.readlines()</snippet></ROW><ROW><id>16222978</id><snippet>with open('topsites.txt') as my_file:
    testsite_array = my_file.readlines()
</snippet></ROW><ROW><id>16223225</id><snippet>In [52]: a = [                               
        ['StarList', 'StarId38', 'ShipList']
    ]

In [53]: b = [                               
        ['StarList', 'StarId3', 'ShipList'],
        ['StarList', 'StarId4', 'ShipList']
    ]

In [54]: set(map(tuple,a))==set(map(tuple,b))
Out[54]: False

In [55]: a = [
   ....:         ['StarList', 'StarId4', 'ShipList'],
   ....:         ['StarList', 'StarId3', 'ShipList']
   ....:     ]

In [56]: set(map(tuple,a))==set(map(tuple,b))
Out[56]: True
</snippet></ROW><ROW><id>16223237</id><snippet>from cStringIO import StringIO
import struct
import time

def decode(f):

    def read_le16(f):
        return struct.unpack('&lt;h', f.read(2))[0]

    def read_timestamp(f):
        ts = struct.unpack('&lt;l', f.read(4))[0]
        return time.ctime(ts)

    def read_byte(f):
        return ord(f.read(1))

    def read_pascal(f):
        l = ord(f.read(1))
        return f.read(l)

    result = []

    # Read total length
    result.append('Total message length is %d bytes' % read_le16(f))

    # Read timestamp
    result.append(read_timestamp(f))

    # Read 3 x byte
    result.append(read_byte(f))
    result.append(read_byte(f))
    result.append(read_byte(f))

    # Read 1 x LE16
    result.append(read_le16(f))

    # Read 3 x pascal string
    result.append(read_pascal(f))
    result.append(read_pascal(f))
    result.append(read_pascal(f))

    return result

s = 'L\x00k\x07vQ\n\x01\xffh\x00\x04NGIN\x04MAIN6Product XX finished reprocessing cdc XXXXX at jesadr 0c\x00k\x07vQ\n\x01\xffF\x00\x06CSSPRD\x0cliab_checkerCCheckpointed to XXXXXXXXXXXXXXXX:XXXXXXX.XXX at jesadr 0 (serial 0)[\x00l\x07vQ\n\x00\xff\x01\x00\x05MLIFE\x06dayendBdayend 1 Copyright XXXX XXXXXXX XXXXXXX XXXXX XXX XXXXXX XXXXXXXX.'

f = StringIO(s)
print decode(f)
print decode(f)
print decode(f)
</snippet></ROW><ROW><id>16223237</id><snippet>['Total message length is 76 bytes', 'Tue Apr 23 05:00:43 2013', 10, 1, 255, 104, 'NGIN', 'MAIN', 'Product XX finished reprocessing cdc XXXXX at jesadr 0']
['Total message length is 99 bytes', 'Tue Apr 23 05:00:43 2013', 10, 1, 255, 70, 'CSSPRD', 'liab_checker', 'Checkpointed to XXXXXXXXXXXXXXXX:XXXXXXX.XXX at jesadr 0 (serial 0)']
['Total message length is 91 bytes', 'Tue Apr 23 05:00:44 2013', 10, 0, 255, 1, 'MLIFE', 'dayend', 'dayend 1 Copyright XXXX XXXXXXX XXXXXXX XXXXX XXX XXXXXX XXXXXXXX.']
</snippet></ROW><ROW><id>16223364</id><snippet>def addodds2(x,y):
    total=0
    if y&lt;len(x):    #you don't need a while there
        a=x[y]      #you have to do this operation if y&lt;len(x), otherwise you would get the index error you are getting
        if a%2!=0:
            total+=a
        return total+addodds2(x,y+1)    #you have to sum the current total to the result returned by the addodds2() function (otherwise you would got 0 as the final result)
    return total

print(addodds2([3,2,4,7,2,4,1,3,2],0))
</snippet></ROW><ROW><id>16223595</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>16223595</id><snippet>In [83]: np.set_printoptions(precision=3, suppress=True)

In [84]: np.genfromtxt(np.array(['1','2','3.14','1e-3','b','nan','inf','-inf']))
Out[84]: array([ 1.   ,  2.   ,  3.14 ,  0.001,    nan,    nan,    inf,   -inf])
</snippet></ROW><ROW><id>16223595</id><snippet>In [34]: x
Out[34]: 
array(['1', '2', 'a'], 
      dtype='|S1')

In [35]: x.astype('unicode')
Out[35]: 
array([u'1', u'2', u'a'], 
      dtype='&lt;U1')

In [36]: np.char.isnumeric(x.astype('unicode'))
Out[36]: array([ True,  True, False], dtype=bool)
</snippet></ROW><ROW><id>16223595</id><snippet>u'1.3'</snippet></ROW><ROW><id>16224016</id><snippet>while True:
    answer = input("Create An Entry [Press 1] \nDisplay List [Press 2] \nEdit an Entry [Press 3] \nRemove Entry [Press 4] \nQuit [Press 5]")
    # collect information
    if answer == "1": 
        firstname = input("What is the persons first name? ")
        names.append(firstname) # add data
    # Display Data
    elif answer == "2":
        print(names)
    # USER Quit 
    elif answer == "5":
        exit() # Or just break
</snippet></ROW><ROW><id>16224153</id><snippet>u</snippet></ROW><ROW><id>16224153</id><snippet>'ô SO'.upper() == 'Ô SO''
</snippet></ROW><ROW><id>16224153</id><snippet>u'ô SO'.upper() == 'Ô SO'
</snippet></ROW><ROW><id>16224253</id><snippet>print</snippet></ROW><ROW><id>16224253</id><snippet>import sys

def pattern(n):
    'prints the nth pattern'
    if n == 0:    # base case
        print(0, end=' ')
    else:    #recursive step: n &gt; 0
        pattern(n-1)         # print n-1st pattern
        print(n, end=' ')    # print n
        pattern(n-1)         # print n-1st pattern
    sys.stdout.flush()
</snippet></ROW><ROW><id>16224253</id><snippet>print</snippet></ROW><ROW><id>16224253</id><snippet>flush</snippet></ROW><ROW><id>16224253</id><snippet>sys.stdout.flush</snippet></ROW><ROW><id>16224253</id><snippet>def gen_pattern(n):
    if n == 0:
        yield 0
    else:
        for elem in gen_pattern(n-1):
            yield elem
        yield n
        for elem in gen_pattern(n-1):
            yield elem

def print_pattern(n):
    for elem in gen_pattern(n):
        print(elem, end=' ')
     sys.stdout.flush()
</snippet></ROW><ROW><id>16224253</id><snippet>flush</snippet></ROW><ROW><id>16224253</id><snippet>x</snippet></ROW><ROW><id>16224253</id><snippet>print</snippet></ROW><ROW><id>16224253</id><snippet>def gen_pattern(n):
    if n == 0:
        yield 0
    else:
        yield from gen_pattern(n-1)
        yield n
        yield from gen_pattern(n-1)
</snippet></ROW><ROW><id>16224409</id><snippet>p1 = subprocess.Popen(["/usr/bin/java", "MyClass"], stdout=subprocess.PIPE)
print p1.stdout.read() 
</snippet></ROW><ROW><id>16224435</id><snippet>In [21]: type((1,))
Out[21]: tuple
</snippet></ROW><ROW><id>16224435</id><snippet>&gt;&gt;&gt; empty = ()
&gt;&gt;&gt; singleton = 'hello',    # &lt;-- note trailing comma
&gt;&gt;&gt; len(empty)
0
&gt;&gt;&gt; len(singleton)
1
&gt;&gt;&gt; singleton
('hello',)
</snippet></ROW><ROW><id>16224481</id><snippet>def get_attrs_dict(self):
    return self.__dict__
</snippet></ROW><ROW><id>16224481</id><snippet>def get_attrs_list(self):
    return self.__dict__.values()
</snippet></ROW><ROW><id>16224514</id><snippet>i</snippet></ROW><ROW><id>16224514</id><snippet>j</snippet></ROW><ROW><id>16224514</id><snippet>command = lambda i=i, j=j: update_binary_text(i, j)
</snippet></ROW><ROW><id>16224514</id><snippet>def callback_factory(button):
    return lambda: button["text"] = "1"
</snippet></ROW><ROW><id>16224514</id><snippet>for j in range(0, number):
    new_button = Button(root, text=" ")
    new_button.configure(command=callback_factory(new_button))
    new_button.pack()
    buttonList.append(new_button)
</snippet></ROW><ROW><id>16224641</id><snippet>*</snippet></ROW><ROW><id>16224641</id><snippet>**</snippet></ROW><ROW><id>16224641</id><snippet>apply_asynch</snippet></ROW><ROW><id>16224641</id><snippet>from multiprocessing import Pool

def f(x, *args, **kwargs):
    print x, args, kwargs

args, kw = (1,2,3), {'cat': 'dog'}

print "# Normal call"
f(0, *args, **kw)

print "# Multicall"
P = Pool()
sol = [P.apply_async(f, (x,) + args, kw) for x in range(2)]
P.close()
P.join()

for s in sol: s.get()
</snippet></ROW><ROW><id>16224641</id><snippet># Normal call                                                                                        
0 (1, 2, 3) {'cat': 'dog'}
# Multicall
0 (1, 2, 3) {'cat': 'dog'}
1 (1, 2, 3) {'cat': 'dog'}
</snippet></ROW><ROW><id>16224641</id><snippet>*args</snippet></ROW><ROW><id>16224641</id><snippet>**kwargs</snippet></ROW><ROW><id>16224641</id><snippet>the_function(a,b,c,d, *args, **kwargs)
</snippet></ROW><ROW><id>16224641</id><snippet>apply_async(func[, args[, kwds[, callback]]])
</snippet></ROW><ROW><id>16224641</id><snippet>*</snippet></ROW><ROW><id>16224641</id><snippet>args</snippet></ROW><ROW><id>16224641</id><snippet>func</snippet></ROW><ROW><id>16224641</id><snippet>kwargs</snippet></ROW><ROW><id>16224641</id><snippet>**kwargs</snippet></ROW><ROW><id>16224641</id><snippet>&gt;&gt;&gt; def test(**kwargs, something=True): pass

  File "&lt;stdin&gt;", line 1
    def test(**kwargs, something=True): pass
                     ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>16224694</id><snippet>&gt;&gt;&gt; 'abc'.index('a', 0)
0
&gt;&gt;&gt; 'abc'.index('a', 1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: substring not found
</snippet></ROW><ROW><id>16224694</id><snippet>i = -1
try:
    found = False
    while i &lt; len(x):
        i = x.index(s, i+1)
        print("found at index", i)
        found = True
except ValueError:
    if not found:
        print("Not found")
</snippet></ROW><ROW><id>16224694</id><snippet>x</snippet></ROW><ROW><id>16224694</id><snippet>matches = [i for i, value in enumerate(x) if value == s]:
if not matches:
    print('Not found')
for match in matches:
    print("found at index", i)
</snippet></ROW><ROW><id>16224694</id><snippet>try: 
    print("found at index", x.index(s))
except ValueError:
    print("not found")
</snippet></ROW><ROW><id>16224751</id><snippet>import glob

from classify import MultinomialNB
from PIL import Image


TRAINING_POSITIVE = 'training-positive/*.jpg'
TRAINING_NEGATIVE = 'training-negative/*.jpg'
TEST_POSITIVE = 'test-positive/*.jpg'
TEST_NEGATIVE = 'test-negative/*.jpg'

# How many pixels to grab from the top-right of image.
CROP_WIDTH, CROP_HEIGHT = 100, 100
RESIZED = (16, 16)


def get_image_data(infile):
    image = Image.open(infile)
    width, height = image.size
    # left upper right lower
    box = width - CROP_WIDTH, 0, width, CROP_HEIGHT
    region = image.crop(box)
    resized = region.resize(RESIZED)
    data = resized.getdata()
    # Convert RGB to simple averaged value.
    data = [sum(pixel) / 3 for pixel in data]
    # Combine location and value.
    values = []
    for location, value in enumerate(data):
        values.extend([location] * value)
    return values


def main():
    watermark = MultinomialNB()
    # Training
    count = 0
    for infile in glob.glob(TRAINING_POSITIVE):
        data = get_image_data(infile)
        watermark.train((data, 'positive'))
        count += 1
        print 'Training', count
    for infile in glob.glob(TRAINING_NEGATIVE):
        data = get_image_data(infile)
        watermark.train((data, 'negative'))
        count += 1
        print 'Training', count
    # Testing
    correct, total = 0, 0
    for infile in glob.glob(TEST_POSITIVE):
        data = get_image_data(infile)
        prediction = watermark.classify(data)
        if prediction.label == 'positive':
            correct += 1
        total += 1
        print 'Testing ({0} / {1})'.format(correct, total)
    for infile in glob.glob(TEST_NEGATIVE):
        data = get_image_data(infile)
        prediction = watermark.classify(data)
        if prediction.label == 'negative':
            correct += 1
        total += 1
        print 'Testing ({0} / {1})'.format(correct, total)
    print 'Got', correct, 'out of', total, 'correct'


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>16224751</id><snippet>Training 1
Training 2
Training 3
Training 4
Training 5
Training 6
Training 7
Training 8
Training 9
Training 10
Training 11
Training 12
Training 13
Training 14
Testing (1 / 1)
Testing (2 / 2)
Testing (3 / 3)
Testing (4 / 4)
Testing (5 / 5)
Testing (6 / 6)
Testing (7 / 7)
Testing (8 / 8)
Testing (9 / 9)
Testing (10 / 10)
Got 10 out of 10 correct
[Finished in 3.5s]
</snippet></ROW><ROW><id>16224758</id><snippet>itertools.product</snippet></ROW><ROW><id>16224758</id><snippet>import itertools

def getString(length=4, characters='abcdefghijklmnopqrstuvwxyz0123456789._-'):
    for s in itertools.product(characters, repeat=length):
        yield ''.join(s)

for s in getString():
    print(s)


aaaa
aaab
aaac
aaad
aaae
aaaf
...    
</snippet></ROW><ROW><id>16224919</id><snippet>Retrieve the next item from the iterator by calling its next() method. 
If default is given, it is returned if the iterator is
exhausted, otherwise StopIteration is raised.

New in version 2.6.
</snippet></ROW><ROW><id>16224927</id><snippet>&gt;&gt;&gt; split_string("foo.,.bar", ".,")
[' foo']
</snippet></ROW><ROW><id>16224927</id><snippet>split_string("foo.,.bar", ".,") will return ["foo", "bar"]
</snippet></ROW><ROW><id>16224927</id><snippet>itertools.groupby</snippet></ROW><ROW><id>16224927</id><snippet>from itertools import groupby

def splitter(text, separators):
    grouped = groupby(text, lambda c: c in separators)
    return [''.join(g) for k,g in grouped if not k]
</snippet></ROW><ROW><id>16224927</id><snippet>&gt;&gt;&gt; splitter("foo.,.bar", ".,")
['foo', 'bar']
</snippet></ROW><ROW><id>16224927</id><snippet>groupby</snippet></ROW><ROW><id>16224927</id><snippet>lambda c: c in separators</snippet></ROW><ROW><id>16224976</id><snippet>expression()</snippet></ROW><ROW><id>16224976</id><snippet>expression("alpha")</snippet></ROW><ROW><id>16224976</id><snippet>"alpha"</snippet></ROW><ROW><id>16224976</id><snippet>expression("alpha")</snippet></ROW><ROW><id>16224976</id><snippet>from rpy2.rinterface import parse
p = ggplot2.ggplot(mydata) + scale_x_continuous(parse("alpha")) 
</snippet></ROW><ROW><id>16224976</id><snippet>paste()</snippet></ROW><ROW><id>16224976</id><snippet>p = ggplot2.ggplot(mydata) + \
    ggplot2.scale_x_continuous(parse('paste(alpha, " and ", beta)'))
</snippet></ROW><ROW><id>16225333</id><snippet>answers = open('answers.txt', 'r').readlines()
answers = [answer.strip() for answer in answers]
</snippet></ROW><ROW><id>16225333</id><snippet>while</snippet></ROW><ROW><id>16225333</id><snippet>for answerLine, studentLine in zip(answerKey, answers):
</snippet></ROW><ROW><id>16225333</id><snippet>Correct    Your    Status
Ans.    Ans.
-----------------------

('You got that question number', 10, 'wrong\n the correct answer was', ['D'], 'but you answered', ['C'])
('You got that question number', 11, 'wrong\n the correct answer was', ['B'], 'but you answered', ['C'])
('You got that question number', 20, 'wrong\n the correct answer was', ['A'], 'but you answered', ['D'])
(' The number of correctly answered questions: ', 17)
(' The number of incorrectly answered questions: ', 3)
(' Your grade is', 85, '%')
Congrats you have passed
</snippet></ROW><ROW><id>16225333</id><snippet>except</snippet></ROW><ROW><id>16225377</id><snippet>repr()</snippet></ROW><ROW><id>16225377</id><snippet>self.a</snippet></ROW><ROW><id>16225377</id><snippet>return "Foo(a={self.a!r})".format(self=self)
</snippet></ROW><ROW><id>16225377</id><snippet>!r</snippet></ROW><ROW><id>16225377</id><snippet>.format()</snippet></ROW><ROW><id>16225377</id><snippet>repr()</snippet></ROW><ROW><id>16225377</id><snippet>self.a</snippet></ROW><ROW><id>16225377</id><snippet>__format__()</snippet></ROW><ROW><id>16225377</id><snippet>&gt;&gt;&gt; '{!r}'.format(0)
'0'
&gt;&gt;&gt; '{!r}'.format('foo')
"'foo'"
</snippet></ROW><ROW><id>16225377</id><snippet>&gt;&gt;&gt; Foo(0)
Foo(a=0)
&gt;&gt;&gt; Foo('foo')
Foo(a='foo')
&gt;&gt;&gt; Foo(None)
Foo(a=None)
</snippet></ROW><ROW><id>16225385</id><snippet>def</snippet></ROW><ROW><id>16225385</id><snippet>while True:
    try:
        number_of_iterations = int(raw_input("What is your favorite integer?"))
        break
    except ValueError:
        print "Please put an integer!"
</snippet></ROW><ROW><id>16225385</id><snippet>break</snippet></ROW><ROW><id>16225385</id><snippet>try</snippet></ROW><ROW><id>16225385</id><snippet>else</snippet></ROW><ROW><id>16225385</id><snippet>while True:
    try:
        number_of_iterations = int(raw_input("What is your favorite integer?"))
    except ValueError:
        print "Please put an integer!"
    else:
        break
</snippet></ROW><ROW><id>16225569</id><snippet>&gt;&gt;&gt; def func():x,y,z=f()
... 
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(func)
  1           0 LOAD_GLOBAL              0 (f)
              3 CALL_FUNCTION            0
              6 UNPACK_SEQUENCE          3
              9 STORE_FAST               0 (x)
             12 STORE_FAST               1 (y)
             15 STORE_FAST               2 (z)
             18 LOAD_CONST               0 (None)
             21 RETURN_VALUE 
</snippet></ROW><ROW><id>16225569</id><snippet>UNPACK_SEQUENCE</snippet></ROW><ROW><id>16225792</id><snippet>help(whatever)</snippet></ROW><ROW><id>16225792</id><snippet>&gt;&gt;&gt; help
Type help() for interactive help, or help(object) for help about object.

&gt;&gt;&gt; help(zip)
Help on built-in function zip in module __builtin__:

zip(...)
    zip(seq1 [, seq2 [...]]) -&gt; [(seq1[0], seq2[0] ...), (...)]

    Return a list of tuples, where each tuple contains the i-th element
    from each of the argument sequences.  The returned list is truncated
    in length to the length of the shortest argument sequence.
</snippet></ROW><ROW><id>16225792</id><snippet>&gt;&gt;&gt; help('if')
The ``if`` statement
********************

The ``if`` statement is used for conditional execution:

   if_stmt ::= "if" expression ":" suite
               ( "elif" expression ":" suite )*
               ["else" ":" suite]

It selects exactly one of the suites by evaluating the expressions one
by one until one is found to be true (see section *Boolean operations*
for the definition of true and false); then that suite is executed
(and no other part of the ``if`` statement is executed or evaluated).
If all expressions are false, the suite of the ``else`` clause, if
present, is executed.

Related help topics: TRUTHVALUE

&gt;&gt;&gt; help('def')
Function definitions
********************

A function definition defines a user-defined function object
....
</snippet></ROW><ROW><id>16225792</id><snippet>&gt;&gt;&gt; help('FUNCTIONS')
Functions
*********

Function objects are created by function definitions.  The only
operation on a function object is to call it: ``func(argument-list)``.

There are really two flavors of function objects: built-in functions
and user-defined functions.  Both support the same operation (to call
the function), but the implementation is different, hence the
different object types.

See *Function definitions* for more information.

Related help topics: def, TYPES
</snippet></ROW><ROW><id>16226144</id><snippet>flush</snippet></ROW><ROW><id>16226144</id><snippet>flush</snippet></ROW><ROW><id>16226144</id><snippet>fsync</snippet></ROW><ROW><id>16226144</id><snippet>&gt; file.txt</snippet></ROW><ROW><id>16226144</id><snippet>&gt;&gt; file.txt</snippet></ROW><ROW><id>16226144</id><snippet>from subprocess import call

sts = call("echo 'TEXT 1' &gt; file.txt", shell=True)
sts = call("cat {0}|egrep {1} &gt;&gt; file.txt".format(full,epoch), shell=True)
</snippet></ROW><ROW><id>16226254</id><snippet>mkdir .log 2&gt; /dev/null
DEBUG=0 authbind gunicorn -b 0.0.0.0:80 backend:app --access-logfile .log/access.log --error-logfile .log/general.log
</snippet></ROW><ROW><id>16226254</id><snippet>./deployment.run 80</snippet></ROW><ROW><id>16226254</id><snippet>80</snippet></ROW><ROW><id>16226254</id><snippet>$1</snippet></ROW><ROW><id>16226255</id><snippet>def second_largest(numbers):
    m1, m2 = None, None
    for x in numbers:
        if x &gt;= m1:
            m1, m2 = x, m1
        elif x &gt; m2:
            m2 = x
    return m2
</snippet></ROW><ROW><id>16226255</id><snippet>second_largest([20,67,3,2.6,7,74,2.8,90.8,52.8,4,3,2,5,7])
=&gt; 74
second_largest([1,1,1,1,1,2])
=&gt; 1
second_largest([2,2,2,2,2,1])
=&gt; 2
second_largest([10, 7, 10])
=&gt; 10
second_largest([1,1,1,1,1,1])
=&gt; 1
second_largest([1])
=&gt; None
second_largest([])
=&gt; None
</snippet></ROW><ROW><id>16226256</id><snippet>type</snippet></ROW><ROW><id>16226256</id><snippet>try:
    my_int = int(value)
except (ValueError, TypeError) as e:
    # raise something
</snippet></ROW><ROW><id>16226266</id><snippet>/nfs/drive5/opt/python/virtualenvs/work/result_images/test_text/</snippet></ROW><ROW><id>16226266</id><snippet>font_styles.png</snippet></ROW><ROW><id>16226266</id><snippet>font_styles-expected_pdf.png</snippet></ROW><ROW><id>16226757</id><snippet>from math import copysign

def divide(numerator, denominator):
    if denominator == 0.0:
        return copysign(float('inf'), denominator)
    return numerator / denominator

&gt;&gt;&gt; divide(1, -0.0)
-inf
&gt;&gt;&gt; divide(1, 0)
inf
</snippet></ROW><ROW><id>16227002</id><snippet>print fn(('abc',))
</snippet></ROW><ROW><id>16227002</id><snippet>print fn(['abc'])
</snippet></ROW><ROW><id>16227075</id><snippet>cand = [[0, 0] for _ in range(4)]
</snippet></ROW><ROW><id>16227580</id><snippet>while</snippet></ROW><ROW><id>16227580</id><snippet>for</snippet></ROW><ROW><id>16227580</id><snippet>&gt;&gt;&gt; i = 0
&gt;&gt;&gt; while i &lt; len(names):
        j = 0
        to_print = ""
        while j &lt; len(names[i]):
            to_print += names[i][j] + " "
            j += 1
        print(to_print)
        i += 1


Bilbo Baggins 
Gollum 
Tom Bombadil 
Aragorn 
</snippet></ROW><ROW><id>16227580</id><snippet>for</snippet></ROW><ROW><id>16227580</id><snippet>&gt;&gt;&gt; for person in names:
        print(' '.join(person))


Bilbo Baggins
Gollum
Tom Bombadil
Aragorn
</snippet></ROW><ROW><id>16227749</id><snippet>tree.write('output.xml')
</snippet></ROW><ROW><id>16228010</id><snippet>__setattr__</snippet></ROW><ROW><id>16228010</id><snippet>def __setattr__(self, name, value):
    if not hasattr(self, name): # would this create a new attribute?
        raise AttributeError("Creating new attributes is not allowed!")
    super(C, self).__setattr__(name, value)
</snippet></ROW><ROW><id>16228010</id><snippet>__getattr__</snippet></ROW><ROW><id>16228010</id><snippet>__getattribute__</snippet></ROW><ROW><id>16228010</id><snippet>__setattr__</snippet></ROW><ROW><id>16228010</id><snippet>myObj.x</snippet></ROW><ROW><id>16228010</id><snippet>x</snippet></ROW><ROW><id>16228010</id><snippet>hasattr</snippet></ROW><ROW><id>16228010</id><snippet>False</snippet></ROW><ROW><id>16228010</id><snippet>x</snippet></ROW><ROW><id>16228010</id><snippet>__getattr__</snippet></ROW><ROW><id>16228010</id><snippet>__setattr__</snippet></ROW><ROW><id>16228010</id><snippet>hasattr</snippet></ROW><ROW><id>16228247</id><snippet>lambda_form     ::=  "lambda" [parameter_list]: expression</snippet></ROW><ROW><id>16228247</id><snippet>with</snippet></ROW><ROW><id>16228247</id><snippet>lambda</snippet></ROW><ROW><id>16228249</id><snippet>from twisted.internet import reactor
from twisted.web import static, server, twcgi

root = static.File("/root")
root.putChild("cgi-bin", twcgi.CGIDirectory("/var/www/cgi-bin"))
reactor.listenTCP(80, server.Site(root))
reactor.run()
</snippet></ROW><ROW><id>16228268</id><snippet>d.values()
</snippet></ROW><ROW><id>16228268</id><snippet>dict.values</snippet></ROW><ROW><id>16228268</id><snippet>list(d.values())
</snippet></ROW><ROW><id>16228367</id><snippet>d = DefaultOrderedDict(lambda: None)
assert d['item'] is None

# as with normal dict, you can init it with another dict
d = {'key': 'value'}
d = DefaultOrderedDict(list, d)
assert d['item'] == []
assert d['key'] == 'value'
</snippet></ROW><ROW><id>16228559</id><snippet>def json_encode(value):
    return json.dumps(value).replace("&lt;/", "&lt;\\/")

def json_decode(value):
    return json.loads(to_basestring(value))

def to_basestring(value):
    if isinstance(value, _BASESTRING_TYPES):
        return value
    assert isinstance(value, bytes_type)
    return value.decode("utf-8")
</snippet></ROW><ROW><id>16228559</id><snippet>to_basestring</snippet></ROW><ROW><id>16228559</id><snippet>value</snippet></ROW><ROW><id>16228559</id><snippet>str</snippet></ROW><ROW><id>16228559</id><snippet>bytes</snippet></ROW><ROW><id>16228559</id><snippet>json.loads</snippet></ROW><ROW><id>16228755</id><snippet>priority</snippet></ROW><ROW><id>16228755</id><snippet>leftChild</snippet></ROW><ROW><id>16228755</id><snippet>self.heap.insert (myList[4])     # an item in the list
</snippet></ROW><ROW><id>16228755</id><snippet>self.heap.insert (myList[4:5])   # a sublist of the list.
</snippet></ROW><ROW><id>16228755</id><snippet>type(leftChild)</snippet></ROW><ROW><id>16228755</id><snippet>$ python
Python 2.6.5 (r265:79063, Jun 12 2010, 17:07:01)
[GCC 4.3.4 20090804 (release) 1] on cygwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; x = [1,2,3,4,5,6,7]

&gt;&gt;&gt; x1 = x[4]

&gt;&gt;&gt; x2 = x[4:5]

&gt;&gt;&gt; x1
5

&gt;&gt;&gt; x2
[5]

&gt;&gt;&gt; type(x1)
&lt;type 'int'&gt;

&gt;&gt;&gt; type(x2)
&lt;type 'list'&gt;
</snippet></ROW><ROW><id>16229552</id><snippet>&gt;&gt;&gt; objects1 = [1, 2, 3]
&gt;&gt;&gt; objects2 = ['1', '2', '3', '4']
&gt;&gt;&gt; 
&gt;&gt;&gt; mylist = [objects1, objects2]
&gt;&gt;&gt; max(mylist, key=len)
['1', '2', '3', '4']

&gt;&gt;&gt; sorted(mylist, key=len, reverse=True)
[['1', '2', '3', '4'], [1, 2, 3]]
</snippet></ROW><ROW><id>16229848</id><snippet>numpy.newaxis</snippet></ROW><ROW><id>16229848</id><snippet>import numpy
a = numpy.array([[2,3,2],[5,6,1]])
b = numpy.array([3,5])
c = a * b[:, None]
</snippet></ROW><ROW><id>16230035</id><snippet>if not text.rstrip():
  log.warning("Empty param 'text': " + text)
  return None
</snippet></ROW><ROW><id>16230206</id><snippet>xldate_as_tuple</snippet></ROW><ROW><id>16230206</id><snippet>from datetime import datetime
import xlrd


book = xlrd.open_workbook("test.xls")
sheet = book.sheet_by_index(0)
a1 = sheet.cell_value(rowx=0, colx=0)

print a1  # prints 41252.0
print xlrd.xldate_as_tuple(a1, 1)  # prints (2016, 12, 10, 0, 0, 0)

a1_tuple = xlrd.xldate_as_tuple(a1, book.datemode)  
print a1_tuple  # prints (2012, 12, 9, 0, 0, 0)

a1_datetime = datetime(*a1_tuple)
print a1_datetime.strftime("%m/%d/%Y")  # prints 12/09/2012
</snippet></ROW><ROW><id>16230330</id><snippet>source ./bin/activate
</snippet></ROW><ROW><id>16230330</id><snippet>workon &lt;theenvname&gt;
</snippet></ROW><ROW><id>16230330</id><snippet>./bin/python manage.py runserver
</snippet></ROW><ROW><id>16230336</id><snippet>s = 'a=b=2'
exec(s)    #executes the string as a python command
</snippet></ROW><ROW><id>16230336</id><snippet>print(a)
2
print(b)
2
</snippet></ROW><ROW><id>16230344</id><snippet>def checkCollision(sprite1, sprite2):
    col = pygame.sprite.collide_rect(sprite1, sprite2)
    if col == True:
        sys.exit()
</snippet></ROW><ROW><id>16230344</id><snippet>def checkCollision(self, sprite1, sprite2):
    col = pygame.sprite.collide_rect(sprite1, sprite2)
    if col == True:
        sys.exit()
</snippet></ROW><ROW><id>16230364</id><snippet>class bpl_abc(osv.osv)
    _inherit = 'bpl.work.offer'
    def create(self, cr, uid, values, context=None):
        name = 'CheckRoll No : ' + str(values['checkroll_no']) + ' &amp; Gang No : ' + str(values['gang_no'])
        values.update({'name': name})
        res = super('bpl_abc',self).create(cr,uid,values,context=context)
        return res
bpl_abc()
</snippet></ROW><ROW><id>16230491</id><snippet>s.subjects</snippet></ROW><ROW><id>16230491</id><snippet>None</snippet></ROW><ROW><id>16230491</id><snippet>False</snippet></ROW><ROW><id>16230491</id><snippet>for s in students:
    for subject in s.subjects or []:
        for book in subject.books or []:
            writer.writerow(s.name, s.class, subject.name, book.name)
</snippet></ROW><ROW><id>16230491</id><snippet>for s in students:
    for subject in s.subjects if &lt;condition&gt; else []:
        for book in subject.books if &lt;condition&gt; else []:
            writer.writerow(s.name, s.class, subject.name, book.name) 
</snippet></ROW><ROW><id>16230491</id><snippet>&lt;condition&gt;</snippet></ROW><ROW><id>16230580</id><snippet>a</snippet></ROW><ROW><id>16230580</id><snippet>import gzip

f_name = 'file.gz'

filtered = []
with gzip.open(f_name, 'r') as infile:
    for line in infile:
        for i in line.split(' '):
            if i.startswith('/bin/movie/tribune'):
                filtered.append(line)
                break # to avoid duplicates
</snippet></ROW><ROW><id>16231001</id><snippet>frame.Show() 
</snippet></ROW><ROW><id>16231001</id><snippet>frame.show()
</snippet></ROW><ROW><id>16231008</id><snippet>command = "echo 'someformat : : '${ENV_VAR}'/efc ;' &gt; targetfile"
subprocess.check_call(["sh", "-c", command])
</snippet></ROW><ROW><id>16231008</id><snippet>-c</snippet></ROW><ROW><id>16231008</id><snippet>sh</snippet></ROW><ROW><id>16231091</id><snippet>twisted.internet.error.CannotListenError</snippet></ROW><ROW><id>16231091</id><snippet>reactor.listenUDP()</snippet></ROW><ROW><id>16231091</id><snippet>from twisted.internet import protocol, reactor, task
import twisted.internet.error

class peer(protocol.DatagramProtocol):

    def sendJoin(self):
        self.transport.write('Join',("127.0.0.1", 8001))

    def startProtocol(self):
        self.sendJoin()

# just to make sure ports 8002 and 8003 will be in use
reactor.listenUDP(8002, peer())
reactor.listenUDP(8003, peer())

# try all ports between [8002..8999]
for port in range(8002, 9000):
    try:
        reactor.listenUDP(port, peer())
        print "Listening on port %d" % port
        break
    except twisted.internet.error.CannotListenError, ex:
        print "Port is %d busy: %s" % (port, ex)
        continue
reactor.run()
</snippet></ROW><ROW><id>16231138</id><snippet>x[0]+=[2,3]
</snippet></ROW><ROW><id>16231138</id><snippet>x[0] = x[0].__iadd__([2,3])
</snippet></ROW><ROW><id>16231138</id><snippet>__iadd__</snippet></ROW><ROW><id>16231138</id><snippet>x[0].extend(y)</snippet></ROW><ROW><id>16231138</id><snippet>a=x[0]; a.extend(y)</snippet></ROW><ROW><id>16231138</id><snippet>a=x[0]; a+=y</snippet></ROW><ROW><id>16231138</id><snippet>x[0]+=y</snippet></ROW><ROW><id>16231138</id><snippet>__setitem__(self, k, v)</snippet></ROW><ROW><id>16231138</id><snippet>self[k] is v</snippet></ROW><ROW><id>16231138</id><snippet>__setitem__</snippet></ROW><ROW><id>16231222</id><snippet>for a in list1 or [None]:
     for b in list2 or [None]:
         for c in list3 or [None]:
             print "Hello"
</snippet></ROW><ROW><id>16231222</id><snippet>None</snippet></ROW><ROW><id>16231222</id><snippet>[None]</snippet></ROW><ROW><id>16231222</id><snippet>a</snippet></ROW><ROW><id>16231222</id><snippet>b</snippet></ROW><ROW><id>16231222</id><snippet>c</snippet></ROW><ROW><id>16231222</id><snippet>for i in xrange(max(len(list1), 1) * max(len(list2), 1) * max(len(list2), 1))):
    print 'Hello'
</snippet></ROW><ROW><id>16231222</id><snippet>for m,n in zip(l1,l2) or [None]:
</snippet></ROW><ROW><id>16231222</id><snippet>for m,n in zip(l1 or [None], l2 or [None]):
</snippet></ROW><ROW><id>16231222</id><snippet>for m,n in zip(l1, l2) or [[None, None]]:
</snippet></ROW><ROW><id>16231538</id><snippet>offset = -0
print ("In Command 3 - Brute force")
string = input("Please enter a string to Brute Force:")
while offset &gt; -26:
    offset = offset - 1
    word = ""
    for letter in string:
        letter = (ord(letter))
        letter = letter + offset
        if letter &gt; 126:
            letter - 95
        elif letter &lt; 32:
            letter + 32
        output = (chr(letter))
        word = word + output            
        choice = 0
    print("Decryption: "+word)
</snippet></ROW><ROW><id>16231571</id><snippet>class Item(models.Model):
    group = models.ForeignKey(Group)
</snippet></ROW><ROW><id>16231571</id><snippet>def manage(request):
    group_list = Group.objects.order_by('name').filter(user=request.user)
    return render(request, 'manage.html', {'group_list': group_list})
</snippet></ROW><ROW><id>16231571</id><snippet>{% extends "base.html" %}

{% block content %}

{% for group in group_list %}
    {{ group.name }}&lt;br /&gt;

    &lt;p&gt;Item for this group&lt;/p&gt;
    {% for item in group.item_set.all %}
        {{item.name}}
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>16231882</id><snippet>File "/usr/local/bin/django-admin.py", line 4, in &lt;module&gt;
from pkg_resources import require; require('Django==1.6.dev20130425172216')
</snippet></ROW><ROW><id>16231882</id><snippet>/usr/local/bin/django-admin.py</snippet></ROW><ROW><id>16232014</id><snippet>curses</snippet></ROW><ROW><id>16232090</id><snippet>if len(k)==2:
</snippet></ROW><ROW><id>16232090</id><snippet>if len(k)&gt;1:
</snippet></ROW><ROW><id>16232274</id><snippet>str.rsplit</snippet></ROW><ROW><id>16232274</id><snippet>message.gateway_message_id.rsplit('-', 1)[0]

'18271817281-3'.rsplit('-', 1)[0] # '18271817281'
'1-2-3-4'.rsplit('-', 1)[0] # '1-2-3'
'1234'.rsplit('-', 1)[0] # '1234'
</snippet></ROW><ROW><id>16232466</id><snippet>a = [1,2,3,4,5,6,7,8,9]
a.values_at(*(1...7).step(2))
#=&gt; [2, 4, 6] 
</snippet></ROW><ROW><id>16232499</id><snippet>foo.func_code.co_consts</snippet></ROW><ROW><id>16232499</id><snippet>&gt;&gt;&gt; def foo():
...     def bar():
...         print 'i am bar'
...     return bar
....
&gt;&gt;&gt; b1 = foo()
&gt;&gt;&gt; b2 = foo()
&gt;&gt;&gt; b1 is b2
False
&gt;&gt;&gt; b1.func_code is b2.func_code
True
</snippet></ROW><ROW><id>16232633</id><snippet>class XML():

   def __init__(self,f,station):
      self.f = f
      self.station=station


   def xmlToString(self):
       data = self.f.read()
       self.f.close()
       ...
       self.station_arr = station_arr


   def exportArray(self):
       #here you need to use self.station_arr

       f= open('stations/'+self.station+'.txt')
       lines= f.readlines()
       ...
       self.phenomena=phenomena
       self.parameters=parameters

   def calcAvg(self,):

       #here you need to use self.phenomena and self.parameters

       split_phenom = self.phenomena.split(';')
       list_of_lists = []
       for e in self.parameters:
          ...
       self.avg_dict = avg_dict
       self.dict_values = dict_values

   def makeOutput(self):
       #call all your functions
       self.xmlToString()
       self.exportArray()
       self.scalcAvg()
       return self.avg_dict , self.dict_values


#now in your main you need to instanciate your class once! not each time you need to call a method:

stations_names ['one', 'two'...]

       for station in stations_names:
           f = open('respond.txt','r')

           xmlStr = ClassXML.XML(f,station) 
           avg_dict,dict_values =  xmlStr.makeOutput()
</snippet></ROW><ROW><id>16232765</id><snippet>$set</snippet></ROW><ROW><id>16232765</id><snippet>$push</snippet></ROW><ROW><id>16232765</id><snippet>modelObj.update(push__dataList=data)
</snippet></ROW><ROW><id>16232889</id><snippet>rline = "".join(line.findall(result))
</snippet></ROW><ROW><id>16232889</id><snippet>findall</snippet></ROW><ROW><id>16232889</id><snippet>rline[0]</snippet></ROW><ROW><id>16232889</id><snippet>line.findall(result)[0]</snippet></ROW><ROW><id>16232889</id><snippet>&gt;&gt;&gt; d = '''
     Command get executed successfully. server.jvm.memory.maxheapsize-count-count =     518979584
... 
...     Command get executed successfully. server.jvm.memory.maxheapsize-count-count = 518979584
... '''
&gt;&gt;&gt; d
'\n\n    Command get executed successfully. server.jvm.memory.maxheapsize-count-count    = 518979584\n\n    Command get executed successfully.     server.jvm.memory.maxheapsize-count-count = 518979584\n'
&gt;&gt;&gt; import re
&gt;&gt;&gt; line = re.compile(r'\d+\n')
&gt;&gt;&gt; rline = "".join(line.findall(d))
&gt;&gt;&gt; rline
'518979584\n518979584\n'
&gt;&gt;&gt; line.findall(d)
['518979584\n', '518979584\n']
&gt;&gt;&gt; line.findall(d)[0].strip() # strip() used to remove newline character - may not be needed
'518979584'
</snippet></ROW><ROW><id>16233599</id><snippet>replace</snippet></ROW><ROW><id>16233599</id><snippet>strip</snippet></ROW><ROW><id>16233599</id><snippet>s = s.replace(',', '')
</snippet></ROW><ROW><id>16233783</id><snippet>exec mystr</snippet></ROW><ROW><id>16233841</id><snippet>req.read()</snippet></ROW><ROW><id>16233849</id><snippet>setattr</snippet></ROW><ROW><id>16233849</id><snippet>class ClassModel(object):
    number = None

class FunctionModel(object):
    number = None
    def __call__(myself, clsself):
        return myself.number + clsself.number
</snippet></ROW><ROW><id>16233849</id><snippet>from types import MethodType

func1 = type('func1', (FunctionModel,), {'number': 3})
func2 = type('func2', (FunctionModel,), {'number': 5})
func1_inst = func1()
func2_inst = func2()

Cls = type('Cls', (ClassModel,), {'number': 10})
setattr(Cls, 'func1', MethodType(func1_inst, Cls))
setattr(Cls, 'func2', MethodType(func2_inst, Cls))
</snippet></ROW><ROW><id>16233849</id><snippet>cls_inst = Cls()
cls_inst.func1()
# 13
cls_inst.func2()
# 15
</snippet></ROW><ROW><id>16233906</id><snippet>http://10.16.65.250:5000</snippet></ROW><ROW><id>16233906</id><snippet>localhost:5432</snippet></ROW><ROW><id>16233906</id><snippet>import psycopg2
conn = psycopg2.connect(database="musicbrainz_db",
                        user="musicbrainz", password="musicbrainz",
                        port="5432", host="localhost")
print("Connection established")
</snippet></ROW><ROW><id>16233906</id><snippet>listen_addresses</snippet></ROW><ROW><id>16233906</id><snippet>/etc/postgresql/9.1/main/postgres.conf</snippet></ROW><ROW><id>16233906</id><snippet>/etc/postgresql/9.1/main/pg_hba.conf</snippet></ROW><ROW><id>16233906</id><snippet>listen_addresses='*'</snippet></ROW><ROW><id>16233906</id><snippet>host    all             all             192.168.1.0/24          trust
</snippet></ROW><ROW><id>16233906</id><snippet>http://10.16.65.250:5000/ws/2/artist/c5c2ea1c-4bde-4f4d-bd0b-47b200bf99d6</snippet></ROW><ROW><id>16233906</id><snippet>musicbrainzngs.set_hostname("10.16.65.250:5000")</snippet></ROW><ROW><id>16234006</id><snippet>serializer = MyModelSerializer(object)
data = serializer.data
data['any_key'] = 'Any Value'
return Response(data)
</snippet></ROW><ROW><id>16234070</id><snippet>from collections import defaultdict
data1=[['173', '0.', '0.', '0.'], ['183', '1000.', '0.', '0.'], ['184', '0.', '1000.', '0.'], ['194', '1000.', '1000.', '0.'], ['195', '0.', '0.', '1000.'], ['205', '1000.', '0.', '1000.'], ['206', '0.', '1000.', '1000.'], ['216', '1000.', '1000.', '1000.'], ['217', '0.', '0.', '2000.'], ['227', '1000.', '0.', '2000.'], ['228', '0.', '1000.', '2000.'], ['238', '1000.', '1000.', '2000.'], ['239', '0.', '0.', '3000.'], ['249', '1000.', '0.', '3000.'], ['250', '0.', '1000.', '3000.'], ['260', '1000.', '1000.', '3000.'], ['261', '0.', '0.', '4000.'], ['271', '1000.', '0.', '4000.'], ['272', '0.', '1000.', '4000.'], ['282', '1000.', '1000.', '4000.'], ['283', '0.', '0.', '0.'], ['293', '0.', '1000.', '0.'], ['294', '1000.', '0.', '0.'], ['304', '1000.', '1000.', '0.'], ['305', '0.', '0.', '1000.'], ['315', '0.', '1000.', '1000.'], ['316', '1000.', '0.', '1000.'], ['326', '1000.', '1000.', '1000.'], ['327', '0.', '0.', '2000.'], ['337', '0.', '1000.', '2000.'], ['338', '1000.', '0.', '2000.'], ['348', '1000.', '1000.', '2000.'], ['349', '0.', '0.', '3000.'], ['359', '0.', '1000.', '3000.'], ['360', '1000.', '0.', '3000.'], ['370', '1000.', '1000.', '3000.'], ['371', '0.', '0.', '4000.'], ['381', '0.', '1000.', '4000.'], ['382', '1000.', '0.', '4000.'], ['392', '1000.', '1000.', '4000.'], ['436', '-1000.', '0.', '0.'], ['446', '0.', '0.', '0.'], ['447', '-1000.', '1000.', '0.'], ['457', '0.', '1000.', '0.'], ['458', '-1000.', '1000.', '1000.'], ['468', '0.', '1000.', '1000.'], ['469', '-1000.', '1000.', '2000.'], ['479', '0.', '1000.', '2000.'], ['480', '-1000.', '1000.', '3000.'], ['490', '0.', '1000.', '3000.'], ['491', '-1000.', '0.', '0.'], ['501', '-1000.', '1000.', '0.'], ['502', '-1000.', '1000.', '4000.'], ['512', '0.', '1000.', '4000.'], ['513', '-1000.', '0.', '1000.'], ['523', '0.', '0.', '1000.'], ['524', '-1000.', '0.', '2000.'], ['534', '0.', '0.', '2000.'], ['535', '-1000.', '0.', '3000.'], ['545', '0.', '0.', '3000.'], ['546', '-1000.', '0.', '4000.'], ['556', '0.', '0.', '4000.'], ['557', '-1000.', '0.', '1000.'], ['567', '-1000.', '1000.', '1000.'], ['568', '-1000.', '0.', '3000.'], ['578', '-1000.', '1000.', '3000.'], ['579', '-1000.', '0.', '2000.'], ['589', '-1000.', '1000.', '2000.'], ['590', '-1000.', '0.', '4000.'], ['600', '-1000.', '1000.', '4000.'], ['687', '0.', '2000.', '0.'], ['697', '1000.', '2000.', '0.'], ['698', '0.', '2000.', '1000.'], ['708', '1000.', '2000.', '1000.'], ['709', '0.', '2000.', '2000.'], ['719', '1000.', '2000.', '2000.'], ['720', '0.', '2000.', '3000.'], ['730', '1000.', '2000.', '3000.'], ['731', '0.', '2000.', '4000.'], ['741', '1000.', '2000.', '4000.'], ['742', '0.', '1000.', '0.'], ['752', '0.', '2000.', '0.'], ['753', '1000.', '1000.', '1000.'], ['763', '1000.', '2000.', '1000.'], ['764', '1000.', '1000.', '3000.'], ['774', '1000.', '2000.', '3000.'], ['775', '1000.', '1000.', '0.'], ['785', '1000.', '2000.', '0.'], ['786', '1000.', '1000.', '2000.'], ['796', '1000.', '2000.', '2000.'], ['797', '1000.', '1000.', '4000.'], ['807', '1000.', '2000.', '4000.'], ['808', '-1000.', '1000.', '0.'], ['818', '-1000.', '2000.', '0.'], ['819', '0.', '1000.', '1000.'], ['829', '0.', '2000.', '1000.'], ['830', '0.', '1000.', '2000.'], ['840', '0.', '2000.', '2000.'], ['841', '0.', '1000.', '3000.'], ['851', '0.', '2000.', '3000.'], ['852', '0.', '1000.', '4000.'], ['862', '0.', '2000.', '4000.'], ['863', '-1000.', '2000.', '0.'], ['873', '0.', '2000.', '0.'], ['874', '-1000.', '2000.', '1000.'], ['884', '0.', '2000.', '1000.'], ['885', '-1000.', '2000.', '2000.'], ['895', '0.', '2000.', '2000.'], ['896', '-1000.', '2000.', '3000.'], ['906', '0.', '2000.', '3000.'], ['907', '-1000.', '2000.', '4000.'], ['917', '0.', '2000.', '4000.'], ['918', '-1000.', '1000.', '1000.'], ['928', '-1000.', '2000.', '1000.'], ['929', '-1000.', '1000.', '3000.'], ['939', '-1000.', '2000.', '3000.'], ['940', '-1000.', '1000.', '2000.'], ['950', '-1000.', '2000.', '2000.'], ['951', '-1000.', '1000.', '4000.'], ['961', '-1000.', '2000.', '4000.']]
data2=[['1', '0.', '0.', '-100.'], ['2', '0.', '0.', '0.'], ['3', '0.', '0.', '4000.'], ['4', '0.', '0.', '4100.'], ['5', '0.', '0.', '100.'], ['6', '0.', '0.', '200.'], ['7', '0.', '0.', '300.'], ['8', '0.', '0.', '400.'], ['9', '0.', '0.', '500.'], ['10', '0.', '0.', '600.'], ['11', '0.', '0.', '700.'], ['12', '0.', '0.', '800.'], ['13', '0.', '0.', '900.'], ['14', '0.', '0.', '1000.'], ['15', '0.', '0.', '1100.'], ['16', '0.', '0.', '1200.'], ['17', '0.', '0.', '1300.'], ['18', '0.', '0.', '1400.'], ['19', '0.', '0.', '1500.'], ['20', '0.', '0.', '1600.'], ['21', '0.', '0.', '1700.'], ['22', '0.', '0.', '1800.'], ['23', '0.', '0.', '1900.'], ['24', '0.', '0.', '2000.'], ['25', '0.', '0.', '2100.'], ['26', '0.', '0.', '2200.'], ['27', '0.', '0.', '2300.'], ['28', '0.', '0.', '2400.'], ['29', '0.', '0.', '2500.'], ['30', '0.', '0.', '2600.'], ['31', '0.', '0.', '2700.'], ['32', '0.', '0.', '2800.'], ['33', '0.', '0.', '2900.'], ['34', '0.', '0.', '3000.'], ['35', '0.', '0.', '3100.'], ['36', '0.', '0.', '3200.'], ['37', '0.', '0.', '3300.'], ['38', '0.', '0.', '3400.'], ['39', '0.', '0.', '3500.'], ['40', '0.', '0.', '3600.'], ['41', '0.', '0.', '3700.'], ['42', '0.', '0.', '3800.'], ['43', '0.', '0.', '3900.'], ['44', '0.', '1000.', '-100.'], ['45', '0.', '1000.', '0.'], ['46', '0.', '1000.', '4000.'], ['47', '0.', '1000.', '4100.'], ['48', '0.', '1000.', '100.'], ['49', '0.', '1000.', '200.'], ['50', '0.', '1000.', '300.'], ['51', '0.', '1000.', '400.'], ['52', '0.', '1000.', '500.'], ['53', '0.', '1000.', '600.'], ['54', '0.', '1000.', '700.'], ['55', '0.', '1000.', '800.'], ['56', '0.', '1000.', '900.'], ['57', '0.', '1000.', '1000.'], ['58', '0.', '1000.', '1100.'], ['59', '0.', '1000.', '1200.'], ['60', '0.', '1000.', '1300.'], ['61', '0.', '1000.', '1400.'], ['62', '0.', '1000.', '1500.'], ['63', '0.', '1000.', '1600.'], ['64', '0.', '1000.', '1700.'], ['65', '0.', '1000.', '1800.'], ['66', '0.', '1000.', '1900.'], ['67', '0.', '1000.', '2000.'], ['68', '0.', '1000.', '2100.'], ['69', '0.', '1000.', '2200.'], ['70', '0.', '1000.', '2300.'], ['71', '0.', '1000.', '2400.'], ['72', '0.', '1000.', '2500.'], ['73', '0.', '1000.', '2600.'], ['74', '0.', '1000.', '2700.'], ['75', '0.', '1000.', '2800.'], ['76', '0.', '1000.', '2900.'], ['77', '0.', '1000.', '3000.'], ['78', '0.', '1000.', '3100.'], ['79', '0.', '1000.', '3200.'], ['80', '0.', '1000.', '3300.'], ['81', '0.', '1000.', '3400.'], ['82', '0.', '1000.', '3500.'], ['83', '0.', '1000.', '3600.'], ['84', '0.', '1000.', '3700.'], ['85', '0.', '1000.', '3800.'], ['86', '0.', '1000.', '3900.'], ['87', '1000.', '0.', '-100.'], ['88', '1000.', '0.', '0.'], ['89', '1000.', '0.', '4000.'], ['90', '1000.', '0.', '4100.'], ['91', '1000.', '0.', '100.'], ['92', '1000.', '0.', '200.'], ['93', '1000.', '0.', '300.'], ['94', '1000.', '0.', '400.'], ['95', '1000.', '0.', '500.'], ['96', '1000.', '0.', '600.'], ['97', '1000.', '0.', '700.'], ['98', '1000.', '0.', '800.'], ['99', '1000.', '0.', '900.'], ['100', '1000.', '0.', '1000.'], ['101', '1000.', '0.', '1100.'], ['102', '1000.', '0.', '1200.'], ['103', '1000.', '0.', '1300.'], ['104', '1000.', '0.', '1400.'], ['105', '1000.', '0.', '1500.'], ['106', '1000.', '0.', '1600.'], ['107', '1000.', '0.', '1700.'], ['108', '1000.', '0.', '1800.'], ['109', '1000.', '0.', '1900.'], ['110', '1000.', '0.', '2000.'], ['111', '1000.', '0.', '2100.'], ['112', '1000.', '0.', '2200.'], ['113', '1000.', '0.', '2300.'], ['114', '1000.', '0.', '2400.'], ['115', '1000.', '0.', '2500.'], ['116', '1000.', '0.', '2600.'], ['117', '1000.', '0.', '2700.'], ['118', '1000.', '0.', '2800.'], ['119', '1000.', '0.', '2900.'], ['120', '1000.', '0.', '3000.'], ['121', '1000.', '0.', '3100.'], ['122', '1000.', '0.', '3200.'], ['123', '1000.', '0.', '3300.'], ['124', '1000.', '0.', '3400.'], ['125', '1000.', '0.', '3500.'], ['126', '1000.', '0.', '3600.'], ['127', '1000.', '0.', '3700.'], ['128', '1000.', '0.', '3800.'], ['129', '1000.', '0.', '3900.'], ['130', '1000.', '1000.', '-100.'], ['131', '1000.', '1000.', '0.'], ['132', '1000.', '1000.', '4000.'], ['133', '1000.', '1000.', '4100.'], ['134', '1000.', '1000.', '100.'], ['135', '1000.', '1000.', '200.'], ['136', '1000.', '1000.', '300.'], ['137', '1000.', '1000.', '400.'], ['138', '1000.', '1000.', '500.'], ['139', '1000.', '1000.', '600.'], ['140', '1000.', '1000.', '700.'], ['141', '1000.', '1000.', '800.'], ['142', '1000.', '1000.', '900.'], ['143', '1000.', '1000.', '1000.'], ['144', '1000.', '1000.', '1100.'], ['145', '1000.', '1000.', '1200.'], ['146', '1000.', '1000.', '1300.'], ['147', '1000.', '1000.', '1400.'], ['148', '1000.', '1000.', '1500.'], ['149', '1000.', '1000.', '1600.'], ['150', '1000.', '1000.', '1700.'], ['151', '1000.', '1000.', '1800.'], ['152', '1000.', '1000.', '1900.'], ['153', '1000.', '1000.', '2000.'], ['154', '1000.', '1000.', '2100.'], ['155', '1000.', '1000.', '2200.'], ['156', '1000.', '1000.', '2300.'], ['157', '1000.', '1000.', '2400.'], ['158', '1000.', '1000.', '2500.'], ['159', '1000.', '1000.', '2600.'], ['160', '1000.', '1000.', '2700.'], ['161', '1000.', '1000.', '2800.'], ['162', '1000.', '1000.', '2900.'], ['163', '1000.', '1000.', '3000.'], ['164', '1000.', '1000.', '3100.'], ['165', '1000.', '1000.', '3200.'], ['166', '1000.', '1000.', '3300.'], ['167', '1000.', '1000.', '3400.'], ['168', '1000.', '1000.', '3500.'], ['169', '1000.', '1000.', '3600.'], ['170', '1000.', '1000.', '3700.'], ['171', '1000.', '1000.', '3800.'], ['172', '1000.', '1000.', '3900.'], ['173', '0.', '0.', '0.'], ['174', '100.', '0.', '0.'], ['175', '200.', '0.', '0.'], ['176', '300.', '0.', '0.'], ['177', '400.', '0.', '0.'], ['178', '500.', '0.', '0.'], ['179', '600.', '0.', '0.'], ['180', '700.', '0.', '0.'], ['181', '800.', '0.', '0.'], ['182', '900.', '0.', '0.'], ['183', '1000.', '0.', '0.'], ['184', '0.', '1000.', '0.'], ['185', '100.', '1000.', '0.'], ['186', '200.', '1000.', '0.'], ['187', '300.', '1000.', '0.'], ['188', '400.', '1000.', '0.'], ['189', '500.', '1000.', '0.'], ['190', '600.', '1000.', '0.'], ['191', '700.', '1000.', '0.'], ['192', '800.', '1000.', '0.'], ['193', '900.', '1000.', '0.'], ['194', '1000.', '1000.', '0.'], ['195', '0.', '0.', '1000.'], ['196', '100.', '0.', '1000.'], ['197', '200.', '0.', '1000.'], ['198', '300.', '0.', '1000.'], ['199', '400.', '0.', '1000.'], ['200', '500.', '0.', '1000.'], ['201', '600.', '0.', '1000.'], ['202', '700.', '0.', '1000.'], ['203', '800.', '0.', '1000.'], ['204', '900.', '0.', '1000.'], ['205', '1000.', '0.', '1000.'], ['206', '0.', '1000.', '1000.'], ['207', '100.', '1000.', '1000.'], ['208', '200.', '1000.', '1000.'], ['209', '300.', '1000.', '1000.'], ['210', '400.', '1000.', '1000.'], ['211', '500.', '1000.', '1000.'], ['212', '600.', '1000.', '1000.'], ['213', '700.', '1000.', '1000.'], ['214', '800.', '1000.', '1000.'], ['215', '900.', '1000.', '1000.'], ['216', '1000.', '1000.', '1000.'], ['217', '0.', '0.', '2000.'], ['218', '100.', '0.', '2000.'], ['219', '200.', '0.', '2000.'], ['220', '300.', '0.', '2000.'], ['221', '400.', '0.', '2000.'], ['222', '500.', '0.', '2000.'], ['223', '600.', '0.', '2000.'], ['224', '700.', '0.', '2000.'], ['225', '800.', '0.', '2000.'], ['226', '900.', '0.', '2000.'], ['227', '1000.', '0.', '2000.'], ['228', '0.', '1000.', '2000.'], ['229', '100.', '1000.', '2000.'], ['230', '200.', '1000.', '2000.'], ['231', '300.', '1000.', '2000.'], ['232', '400.', '1000.', '2000.'], ['233', '500.', '1000.', '2000.'], ['234', '600.', '1000.', '2000.'], ['235', '700.', '1000.', '2000.'], ['236', '800.', '1000.', '2000.'], ['237', '900.', '1000.', '2000.'], ['238', '1000.', '1000.', '2000.'], ['239', '0.', '0.', '3000.'], ['240', '100.', '0.', '3000.'], ['241', '200.', '0.', '3000.'], ['242', '300.', '0.', '3000.'], ['243', '400.', '0.', '3000.'], ['244', '500.', '0.', '3000.'], ['245', '600.', '0.', '3000.'], ['246', '700.', '0.', '3000.'], ['247', '800.', '0.', '3000.'], ['248', '900.', '0.', '3000.'], ['249', '1000.', '0.', '3000.'], ['250', '0.', '1000.', '3000.'], ['251', '100.', '1000.', '3000.'], ['252', '200.', '1000.', '3000.'], ['253', '300.', '1000.', '3000.'], ['254', '400.', '1000.', '3000.'], ['255', '500.', '1000.', '3000.'], ['256', '600.', '1000.', '3000.'], ['257', '700.', '1000.', '3000.'], ['258', '800.', '1000.', '3000.'], ['259', '900.', '1000.', '3000.'], ['260', '1000.', '1000.', '3000.'], ['261', '0.', '0.', '4000.'], ['262', '100.', '0.', '4000.'], ['263', '200.', '0.', '4000.'], ['264', '300.', '0.', '4000.'], ['265', '400.', '0.', '4000.'], ['266', '500.', '0.', '4000.'], ['267', '600.', '0.', '4000.'], ['268', '700.', '0.', '4000.'], ['269', '800.', '0.', '4000.'], ['270', '900.', '0.', '4000.'], ['271', '1000.', '0.', '4000.'], ['272', '0.', '1000.', '4000.'], ['273', '100.', '1000.', '4000.'], ['274', '200.', '1000.', '4000.'], ['275', '300.', '1000.', '4000.'], ['276', '400.', '1000.', '4000.'], ['277', '500.', '1000.', '4000.'], ['278', '600.', '1000.', '4000.'], ['279', '700.', '1000.', '4000.'], ['280', '800.', '1000.', '4000.'], ['281', '900.', '1000.', '4000.'], ['282', '1000.', '1000.', '4000.'], ['283', '0.', '0.', '0.'], ['284', '0.', '100.', '0.'], ['285', '0.', '200.', '0.'], ['286', '0.', '300.', '0.'], ['287', '0.', '400.', '0.'], ['288', '0.', '500.', '0.'], ['289', '0.', '600.', '0.'], ['290', '0.', '700.', '0.'], ['291', '0.', '800.', '0.'], ['292', '0.', '900.', '0.'], ['293', '0.', '1000.', '0.'], ['294', '1000.', '0.', '0.'], ['295', '1000.', '100.', '0.'], ['296', '1000.', '200.', '0.'], ['297', '1000.', '300.', '0.'], ['298', '1000.', '400.', '0.'], ['299', '1000.', '500.', '0.'], ['300', '1000.', '600.', '0.'], ['301', '1000.', '700.', '0.'], ['302', '1000.', '800.', '0.'], ['303', '1000.', '900.', '0.'], ['304', '1000.', '1000.', '0.'], ['305', '0.', '0.', '1000.'], ['306', '0.', '100.', '1000.'], ['307', '0.', '200.', '1000.'], ['308', '0.', '300.', '1000.'], ['309', '0.', '400.', '1000.'], ['310', '0.', '500.', '1000.'], ['311', '0.', '600.', '1000.'], ['312', '0.', '700.', '1000.'], ['313', '0.', '800.', '1000.'], ['314', '0.', '900.', '1000.'], ['315', '0.', '1000.', '1000.'], ['316', '1000.', '0.', '1000.'], ['317', '1000.', '100.', '1000.'], ['318', '1000.', '200.', '1000.'], ['319', '1000.', '300.', '1000.'], ['320', '1000.', '400.', '1000.'], ['321', '1000.', '500.', '1000.'], ['322', '1000.', '600.', '1000.'], ['323', '1000.', '700.', '1000.'], ['324', '1000.', '800.', '1000.'], ['325', '1000.', '900.', '1000.'], ['326', '1000.', '1000.', '1000.'], ['327', '0.', '0.', '2000.'], ['328', '0.', '100.', '2000.'], ['329', '0.', '200.', '2000.'], ['330', '0.', '300.', '2000.'], ['331', '0.', '400.', '2000.'], ['332', '0.', '500.', '2000.'], ['333', '0.', '600.', '2000.'], ['334', '0.', '700.', '2000.'], ['335', '0.', '800.', '2000.'], ['336', '0.', '900.', '2000.'], ['337', '0.', '1000.', '2000.'], ['338', '1000.', '0.', '2000.'], ['339', '1000.', '100.', '2000.'], ['340', '1000.', '200.', '2000.'], ['341', '1000.', '300.', '2000.'], ['342', '1000.', '400.', '2000.'], ['343', '1000.', '500.', '2000.'], ['344', '1000.', '600.', '2000.'], ['345', '1000.', '700.', '2000.'], ['346', '1000.', '800.', '2000.'], ['347', '1000.', '900.', '2000.'], ['348', '1000.', '1000.', '2000.'], ['349', '0.', '0.', '3000.'], ['350', '0.', '100.', '3000.'], ['351', '0.', '200.', '3000.'], ['352', '0.', '300.', '3000.'], ['353', '0.', '400.', '3000.'], ['354', '0.', '500.', '3000.'], ['355', '0.', '600.', '3000.'], ['356', '0.', '700.', '3000.'], ['357', '0.', '800.', '3000.'], ['358', '0.', '900.', '3000.'], ['359', '0.', '1000.', '3000.'], ['360', '1000.', '0.', '3000.'], ['361', '1000.', '100.', '3000.'], ['362', '1000.', '200.', '3000.'], ['363', '1000.', '300.', '3000.'], ['364', '1000.', '400.', '3000.'], ['365', '1000.', '500.', '3000.'], ['366', '1000.', '600.', '3000.'], ['367', '1000.', '700.', '3000.'], ['368', '1000.', '800.', '3000.'], ['369', '1000.', '900.', '3000.'], ['370', '1000.', '1000.', '3000.'], ['371', '0.', '0.', '4000.'], ['372', '0.', '100.', '4000.'], ['373', '0.', '200.', '4000.'], ['374', '0.', '300.', '4000.'], ['375', '0.', '400.', '4000.'], ['376', '0.', '500.', '4000.'], ['377', '0.', '600.', '4000.'], ['378', '0.', '700.', '4000.'], ['379', '0.', '800.', '4000.'], ['380', '0.', '900.', '4000.'], ['381', '0.', '1000.', '4000.'], ['382', '1000.', '0.', '4000.'], ['383', '1000.', '100.', '4000.'], ['384', '1000.', '200.', '4000.'], ['385', '1000.', '300.', '4000.'], ['386', '1000.', '400.', '4000.'], ['387', '1000.', '500.', '4000.'], ['388', '1000.', '600.', '4000.'], ['389', '1000.', '700.', '4000.'], ['390', '1000.', '800.', '4000.'], ['391', '1000.', '900.', '4000.'], ['392', '1000.', '1000.', '4000.'], ['393', '-1000.', '0.', '-100.'], ['394', '-1000.', '0.', '0.'], ['395', '-1000.', '0.', '4000.'], ['396', '-1000.', '0.', '4100.'], ['397', '-1000.', '0.', '100.'], ['398', '-1000.', '0.', '200.'], ['399', '-1000.', '0.', '300.'], ['400', '-1000.', '0.', '400.'], ['401', '-1000.', '0.', '500.'], ['402', '-1000.', '0.', '600.'], ['403', '-1000.', '0.', '700.'], ['404', '-1000.', '0.', '800.'], ['405', '-1000.', '0.', '900.'], ['406', '-1000.', '0.', '1000.'], ['407', '-1000.', '0.', '1100.'], ['408', '-1000.', '0.', '1200.'], ['409', '-1000.', '0.', '1300.'], ['410', '-1000.', '0.', '1400.'], ['411', '-1000.', '0.', '1500.'], ['412', '-1000.', '0.', '1600.'], ['413', '-1000.', '0.', '1700.'], ['414', '-1000.', '0.', '1800.'], ['415', '-1000.', '0.', '1900.'], ['416', '-1000.', '0.', '2000.'], ['417', '-1000.', '0.', '2100.'], ['418', '-1000.', '0.', '2200.'], ['419', '-1000.', '0.', '2300.'], ['420', '-1000.', '0.', '2400.'], ['421', '-1000.', '0.', '2500.'], ['422', '-1000.', '0.', '2600.'], ['423', '-1000.', '0.', '2700.'], ['424', '-1000.', '0.', '2800.'], ['425', '-1000.', '0.', '2900.'], ['426', '-1000.', '0.', '3000.'], ['427', '-1000.', '0.', '3100.'], ['428', '-1000.', '0.', '3200.'], ['429', '-1000.', '0.', '3300.'], ['430', '-1000.', '0.', '3400.'], ['431', '-1000.', '0.', '3500.'], ['432', '-1000.', '0.', '3600.'], ['433', '-1000.', '0.', '3700.'], ['434', '-1000.', '0.', '3800.'], ['435', '-1000.', '0.', '3900.'], ['436', '-1000.', '0.', '0.'], ['437', '-900.', '0.', '0.'], ['438', '-800.', '0.', '0.'], ['439', '-700.', '0.', '0.'], ['440', '-600.', '0.', '0.'], ['441', '-500.', '0.', '0.'], ['442', '-400.', '0.', '0.'], ['443', '-300.', '0.', '0.'], ['444', '-200.', '0.', '0.'], ['445', '-100.', '0.', '0.'], ['446', '0.', '0.', '0.'], ['447', '-1000.', '1000.', '0.'], ['448', '-900.', '1000.', '0.'], ['449', '-800.', '1000.', '0.'], ['450', '-700.', '1000.', '0.'], ['451', '-600.', '1000.', '0.'], ['452', '-500.', '1000.', '0.'], ['453', '-400.', '1000.', '0.'], ['454', '-300.', '1000.', '0.'], ['455', '-200.', '1000.', '0.'], ['456', '-100.', '1000.', '0.'], ['457', '0.', '1000.', '0.'], ['458', '-1000.', '1000.', '1000.'], ['459', '-900.', '1000.', '1000.'], ['460', '-800.', '1000.', '1000.'], ['461', '-700.', '1000.', '1000.'], ['462', '-600.', '1000.', '1000.'], ['463', '-500.', '1000.', '1000.'], ['464', '-400.', '1000.', '1000.'], ['465', '-300.', '1000.', '1000.'], ['466', '-200.', '1000.', '1000.'], ['467', '-100.', '1000.', '1000.'], ['468', '0.', '1000.', '1000.'], ['469', '-1000.', '1000.', '2000.'], ['470', '-900.', '1000.', '2000.'], ['471', '-800.', '1000.', '2000.'], ['472', '-700.', '1000.', '2000.'], ['473', '-600.', '1000.', '2000.'], ['474', '-500.', '1000.', '2000.'], ['475', '-400.', '1000.', '2000.'], ['476', '-300.', '1000.', '2000.'], ['477', '-200.', '1000.', '2000.'], ['478', '-100.', '1000.', '2000.'], ['479', '0.', '1000.', '2000.'], ['480', '-1000.', '1000.', '3000.'], ['481', '-900.', '1000.', '3000.'], ['482', '-800.', '1000.', '3000.'], ['483', '-700.', '1000.', '3000.'], ['484', '-600.', '1000.', '3000.'], ['485', '-500.', '1000.', '3000.'], ['486', '-400.', '1000.', '3000.'], ['487', '-300.', '1000.', '3000.'], ['488', '-200.', '1000.', '3000.'], ['489', '-100.', '1000.', '3000.'], ['490', '0.', '1000.', '3000.'], ['491', '-1000.', '0.', '0.'], ['492', '-1000.', '100.', '0.'], ['493', '-1000.', '200.', '0.'], ['494', '-1000.', '300.', '0.'], ['495', '-1000.', '400.', '0.'], ['496', '-1000.', '500.', '0.'], ['497', '-1000.', '600.', '0.'], ['498', '-1000.', '700.', '0.'], ['499', '-1000.', '800.', '0.'], ['500', '-1000.', '900.', '0.'], ['501', '-1000.', '1000.', '0.'], ['502', '-1000.', '1000.', '4000.'], ['503', '-900.', '1000.', '4000.'], ['504', '-800.', '1000.', '4000.'], ['505', '-700.', '1000.', '4000.'], ['506', '-600.', '1000.', '4000.'], ['507', '-500.', '1000.', '4000.'], ['508', '-400.', '1000.', '4000.'], ['509', '-300.', '1000.', '4000.'], ['510', '-200.', '1000.', '4000.'], ['511', '-100.', '1000.', '4000.'], ['512', '0.', '1000.', '4000.'], ['513', '-1000.', '0.', '1000.'], ['514', '-900.', '0.', '1000.'], ['515', '-800.', '0.', '1000.'], ['516', '-700.', '0.', '1000.'], ['517', '-600.', '0.', '1000.'], ['518', '-500.', '0.', '1000.'], ['519', '-400.', '0.', '1000.'], ['520', '-300.', '0.', '1000.'], ['521', '-200.', '0.', '1000.'], ['522', '-100.', '0.', '1000.'], ['523', '0.', '0.', '1000.'], ['524', '-1000.', '0.', '2000.'], ['525', '-900.', '0.', '2000.'], ['526', '-800.', '0.', '2000.'], ['527', '-700.', '0.', '2000.'], ['528', '-600.', '0.', '2000.'], ['529', '-500.', '0.', '2000.'], ['530', '-400.', '0.', '2000.'], ['531', '-300.', '0.', '2000.'], ['532', '-200.', '0.', '2000.'], ['533', '-100.', '0.', '2000.'], ['534', '0.', '0.', '2000.'], ['535', '-1000.', '0.', '3000.'], ['536', '-900.', '0.', '3000.'], ['537', '-800.', '0.', '3000.'], ['538', '-700.', '0.', '3000.'], ['539', '-600.', '0.', '3000.'], ['540', '-500.', '0.', '3000.'], ['541', '-400.', '0.', '3000.'], ['542', '-300.', '0.', '3000.'], ['543', '-200.', '0.', '3000.'], ['544', '-100.', '0.', '3000.'], ['545', '0.', '0.', '3000.'], ['546', '-1000.', '0.', '4000.'], ['547', '-900.', '0.', '4000.'], ['548', '-800.', '0.', '4000.'], ['549', '-700.', '0.', '4000.'], ['550', '-600.', '0.', '4000.'], ['551', '-500.', '0.', '4000.'], ['552', '-400.', '0.', '4000.'], ['553', '-300.', '0.', '4000.'], ['554', '-200.', '0.', '4000.'], ['555', '-100.', '0.', '4000.'], ['556', '0.', '0.', '4000.'], ['557', '-1000.', '0.', '1000.'], ['558', '-1000.', '100.', '1000.'], ['559', '-1000.', '200.', '1000.'], ['560', '-1000.', '300.', '1000.'], ['561', '-1000.', '400.', '1000.'], ['562', '-1000.', '500.', '1000.'], ['563', '-1000.', '600.', '1000.'], ['564', '-1000.', '700.', '1000.'], ['565', '-1000.', '800.', '1000.'], ['566', '-1000.', '900.', '1000.'], ['567', '-1000.', '1000.', '1000.'], ['568', '-1000.', '0.', '3000.'], ['569', '-1000.', '100.', '3000.'], ['570', '-1000.', '200.', '3000.'], ['571', '-1000.', '300.', '3000.'], ['572', '-1000.', '400.', '3000.'], ['573', '-1000.', '500.', '3000.'], ['574', '-1000.', '600.', '3000.'], ['575', '-1000.', '700.', '3000.'], ['576', '-1000.', '800.', '3000.'], ['577', '-1000.', '900.', '3000.'], ['578', '-1000.', '1000.', '3000.'], ['579', '-1000.', '0.', '2000.'], ['580', '-1000.', '100.', '2000.'], ['581', '-1000.', '200.', '2000.'], ['582', '-1000.', '300.', '2000.'], ['583', '-1000.', '400.', '2000.'], ['584', '-1000.', '500.', '2000.'], ['585', '-1000.', '600.', '2000.'], ['586', '-1000.', '700.', '2000.'], ['587', '-1000.', '800.', '2000.'], ['588', '-1000.', '900.', '2000.'], ['589', '-1000.', '1000.', '2000.'], ['590', '-1000.', '0.', '4000.'], ['591', '-1000.', '100.', '4000.'], ['592', '-1000.', '200.', '4000.'], ['593', '-1000.', '300.', '4000.'], ['594', '-1000.', '400.', '4000.'], ['595', '-1000.', '500.', '4000.'], ['596', '-1000.', '600.', '4000.'], ['597', '-1000.', '700.', '4000.'], ['598', '-1000.', '800.', '4000.'], ['599', '-1000.', '900.', '4000.'], ['600', '-1000.', '1000.', '4000.'], ['601', '-1000.', '1000.', '-100.'], ['602', '-1000.', '1000.', '0.'], ['603', '-1000.', '1000.', '4000.'], ['604', '-1000.', '1000.', '4100.'], ['605', '-1000.', '1000.', '100.'], ['606', '-1000.', '1000.', '200.'], ['607', '-1000.', '1000.', '300.'], ['608', '-1000.', '1000.', '400.'], ['609', '-1000.', '1000.', '500.'], ['610', '-1000.', '1000.', '600.'], ['611', '-1000.', '1000.', '700.'], ['612', '-1000.', '1000.', '800.'], ['613', '-1000.', '1000.', '900.'], ['614', '-1000.', '1000.', '1000.'], ['615', '-1000.', '1000.', '1100.'], ['616', '-1000.', '1000.', '1200.'], ['617', '-1000.', '1000.', '1300.'], ['618', '-1000.', '1000.', '1400.'], ['619', '-1000.', '1000.', '1500.'], ['620', '-1000.', '1000.', '1600.'], ['621', '-1000.', '1000.', '1700.'], ['622', '-1000.', '1000.', '1800.'], ['623', '-1000.', '1000.', '1900.']]
dic1=defaultdict(list)

for id,x,y,z in data1:
    dic1[(x,y)].append((id,z))

#sort
for key in dic1:
    dic1[key].sort( key=lambda x:float(x[1]) )

for i,row in enumerate(data2):
    id,x,y,z=row
    z_levels=[item[1] for item in dic1[(x,y)]]
    for k,l in zip(z_levels,z_levels[1:]):
       if k&lt;=z&lt;=l:
            #do something here 
            #data2[i][1]=None  #change x co-ordinate
            #data2[i][2]=None  #change y co-ordinate
            break
</snippet></ROW><ROW><id>16234086</id><snippet>mainlist = ['12345', '23456' , '09768']

internal_dep = {
    '12345': ['01242'],
    '01242': ['23456'],
    '34567': ['11111'],
    '23456': ['33456'],
    '56789': [],
    '32345': [],
    '11111': [],
    '33456': [],
    '09768': ['12222'],
    '12222': [], 
    '34333': [],
    }

external_dep = {
    '12345': ['34567'],
    '01242': ['56789', '32345'],
    '34567': [],
    '23456': [],
    '56789': [],
    '32345': [],
    '11111': [],
    '33456': [],
    '09768': ['34333'],
    '12222': [],
    '34333': []
    }
</snippet></ROW><ROW><id>16234086</id><snippet>def getinternaldep(item):
    local_list = []
    temp_list = []
    # Change this line depending on data format
    temp_list.extend(internal_dep[item])
    local_list.extend(temp_list)
    for new_item in temp_list:
        internal_dep_list = getinternaldep(new_item)
        local_list.extend(internal_dep_list)
    return local_list

def getexternaldep(item):
    local_list = []
    temp_list = []
    # Change this line depending on data format
    temp_list.extend(external_dep[item])
    local_list.extend(temp_list)
    for new_item in temp_list:
        external_dep_list = getexternaldep(new_item)
        local_list.extend(external_dep_list)
    return local_list
</snippet></ROW><ROW><id>16234086</id><snippet>build_dep_list = []
for item in mainlist:
    build_dep_list.append(item)
    internal_dep_list = getinternaldep(item)
    external_dep_list = getexternaldep(item)
    build_dep_list.extend(internal_dep_list)
    build_dep_list.extend(external_dep_list)
print build_dep_list
</snippet></ROW><ROW><id>16234086</id><snippet>['12345', '01242', '23456', '33456', '34567', '23456', '33456', '09768', '12222', '34333']
</snippet></ROW><ROW><id>16234086</id><snippet>def _getdep(item):
    local_list, temp_list = [], []
    temp_list.extend(internal_dep[item])
    temp_list.extend(external_dep[item])
    local_list.extend(temp_list)
    for new_item in temp_list:
        local_list.extend(_getdep(new_item))
    return local_list

build_dep_list = []
for item in mainlist:
    build_dep_list.append(item)
    build_dep_list.extend(_getdep(item))

print build_dep_list

['12345', '01242', '34567', '23456', '56789', '32345', '33456', '11111', '23456', '33456', '09768', '12222', '34333']
</snippet></ROW><ROW><id>16234198</id><snippet>self</snippet></ROW><ROW><id>16234198</id><snippet>class A:

    def __init__(self):
        A.state = 'CHAT'

    def method1(self):
        A.state = 'SEND'

    def printer(self):
        print A.state


class B(A):
    def method2(self):
        self.method1()
        print B.state

ob_B = B()
ob_A = A()
ob_B.method2()
ob_A.printer()
</snippet></ROW><ROW><id>16234198</id><snippet>SEND
SEND
</snippet></ROW><ROW><id>16234517</id><snippet>map</snippet></ROW><ROW><id>16234517</id><snippet>translate</snippet></ROW><ROW><id>16234517</id><snippet>map</snippet></ROW><ROW><id>16234517</id><snippet>map</snippet></ROW><ROW><id>16234517</id><snippet>translate_map</snippet></ROW><ROW><id>16234517</id><snippet>return</snippet></ROW><ROW><id>16234517</id><snippet>None</snippet></ROW><ROW><id>16234517</id><snippet>map</snippet></ROW><ROW><id>16234517</id><snippet>map</snippet></ROW><ROW><id>16234517</id><snippet>map</snippet></ROW><ROW><id>16234517</id><snippet>numpy</snippet></ROW><ROW><id>16234517</id><snippet>def translate(arr): # arr should be a numpy array
    arr += 1
</snippet></ROW><ROW><id>16234519</id><snippet>&lt;record id="sale_order_user_rule" model="ir.rule"&gt;
            &lt;field name="name"&gt;Quotations/Sale Orders&lt;/field&gt;
            &lt;field name="model_id" ref="sale.model_sale_order"/&gt;
            &lt;field name="domain_force"&gt;[('user_id','in',[user.id])]&lt;/field&gt;
            &lt;field name="groups" eval="[(4, ref('group_purcase_manager'))]"/&gt;
            &lt;field eval="1" name="perm_unlink"/&gt;
            &lt;field eval="1" name="perm_write"/&gt;
            &lt;field eval="1" name="perm_read"/&gt;
            &lt;field eval="1" name="perm_create"/&gt;
        &lt;/record&gt;
</snippet></ROW><ROW><id>16234726</id><snippet>exit</snippet></ROW><ROW><id>16234726</id><snippet>DosCmd = 'matlab -wait -automation -nosplash -r "run \'' + to_run + "', exit\""
</snippet></ROW><ROW><id>16234726</id><snippet>, exit</snippet></ROW><ROW><id>16234726</id><snippet>-r</snippet></ROW><ROW><id>16234726</id><snippet>subprocess</snippet></ROW><ROW><id>16234726</id><snippet>subprocess</snippet></ROW><ROW><id>16234726</id><snippet>subprocess.check_call(['matlab', '-wait', '-automation', '-nosplash', 
    '-r', 'run \' + to_run + \', exit'])
</snippet></ROW><ROW><id>16235086</id><snippet>while len(list1) and len(list2):
</snippet></ROW><ROW><id>16235086</id><snippet>False</snippet></ROW><ROW><id>16235086</id><snippet>None</snippet></ROW><ROW><id>16235086</id><snippet>0</snippet></ROW><ROW><id>16235086</id><snippet>""</snippet></ROW><ROW><id>16235086</id><snippet>[]</snippet></ROW><ROW><id>16235403</id><snippet>%%s</snippet></ROW><ROW><id>16235403</id><snippet>WHERE id=%%s</snippet></ROW><ROW><id>16235422</id><snippet>files_to_ignore = ('abc.txt', 'foo.txt', 'bar.txt')

for root,dirnames,filenames in os.walk('D:/datast12'):
    for filename in fnmatch.filter(filenames, '*.txt'):
        if filename in files_to_ignore: continue
        matches.append([root,filenames])
</snippet></ROW><ROW><id>16235610</id><snippet>friends_list.extend(raw_friends_list['users'])
</snippet></ROW><ROW><id>16235630</id><snippet>reshape()</snippet></ROW><ROW><id>16235630</id><snippet>&gt;&gt;&gt; W = W.reshape(8,10)
&gt;&gt;&gt; W.shape
(8,10)    
</snippet></ROW><ROW><id>16235655</id><snippet>class MainClass():
    def __init__(self, another_class):
      self.another_class = another_class

class AnotherClass():

    def required_method(self):
       blah blah blah

another = AnotherClass()
main_class = MainClass(another_class)
main_class.another_class.required_method()
</snippet></ROW><ROW><id>16235808</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>16235808</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>16235808</id><snippet>$input = http_build_query(array('plaintext'=&gt;'some secret information'));
$ctx_post_input = stream_context_create(array(
    'http' =&gt; array(
        'method' =&gt; 'POST',
        'header' =&gt; 'Content-type: application/x-www-form-urlencoded',
        'content'   =&gt; $input,
    ),
));
$cyphertext = file_get_contents('https://en.tty.is/encrypt', false, $ctx_post_input);
</snippet></ROW><ROW><id>16235808</id><snippet>$ctx_post_input['http']</snippet></ROW><ROW><id>16235808</id><snippet>Could not resolve host: en.tty.is</snippet></ROW><ROW><id>16235843</id><snippet>re.finditer</snippet></ROW><ROW><id>16235843</id><snippet>In [21]: strs="12345678"

In [22]: it=re.finditer("\d",strs)

In [23]: [next(it).group(0) for _ in xrange(4)] #returns only 4 mathces
Out[23]: ['1', '2', '3', '4']
</snippet></ROW><ROW><id>16235843</id><snippet>StopIteration</snippet></ROW><ROW><id>16235843</id><snippet>itertools.isclice</snippet></ROW><ROW><id>16235843</id><snippet>In [26]: def limiter(strs,pattern,limit):
    it=re.finditer(pattern,strs)
    try:
        for _ in xrange(limit):
            yield next(it).group(0)
    except StopIteration:        
        pass
   ....:     

In [27]: list(limiter("12345","\d",3))
Out[27]: ['1', '2', '3']

In [28]: list(limiter("12345","\d",6))
Out[28]: ['1', '2', '3', '4', '5']

In [29]: list(limiter("12345","\d",10))
Out[29]: ['1', '2', '3', '4', '5']
</snippet></ROW><ROW><id>16235843</id><snippet>re.finditer</snippet></ROW><ROW><id>16235843</id><snippet>In [24]: re.finditer?
Type:       function
String Form:&lt;function finditer at 0xb74114c4&gt;
File:       /usr/lib/python2.7/re.py
Definition: re.finditer(pattern, string, flags=0)
Docstring:
Return an iterator over all non-overlapping matches in the
string.  For each match, the iterator returns a match object.

Empty matches are included in the result.
</snippet></ROW><ROW><id>16236215</id><snippet>TEMPLATE_CONTEXT_PROCESSORS = (
   "django.core.context_processors.request",
   "django.core.context_processors.media",
   "django.contrib.messages.context_processors.messages"
)
</snippet></ROW><ROW><id>16236215</id><snippet>messages</snippet></ROW><ROW><id>16236215</id><snippet>SECRET_KEY</snippet></ROW><ROW><id>16236215</id><snippet>STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)
TEMPLATE_CONTEXT_PROCESSORS = (
       "django.core.context_processors.request",
       "django.core.context_processors.media",
       "django.contrib.messages.context_processors.messages"
)
# Make this unique, and don't share it with anybody.
SECRET_KEY = 'h^@hi8e&amp;q4e#h!j4v$x+@y2ngs&amp;3&amp;*o%!u8pi(vp3h8n&amp;0$*a)'
# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)
MIDDLEWARE_CLASSES = (

   'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
)
</snippet></ROW><ROW><id>16236276</id><snippet>weave.blitz</snippet></ROW><ROW><id>16236276</id><snippet>0:</snippet></ROW><ROW><id>16236276</id><snippet>:</snippet></ROW><ROW><id>16236276</id><snippet>expr_code</snippet></ROW><ROW><id>16236276</id><snippet>weave.blitz</snippet></ROW><ROW><id>16236276</id><snippet>0:</snippet></ROW><ROW><id>16236276</id><snippet>ipdb&gt; expr_code
'ux_blitz_buggy(blitz::Range(0,_end),blitz::Range(1,Nux_blitz_buggy(1)-1-1))=uxold(blitz::Range(0,_end),blitz::Range(1,Nuxold(1)-1-1))+ReI*(uxold(blitz::Range(0,_end),blitz::Range(2,_end))-2*uxold(blitz::Range(0,_end),blitz::Range(1,Nuxold(1)-1-1))+uxold(blitz::Range(0,_end),blitz::Range(0,Nuxold(1)-2-1)));\n'
</snippet></ROW><ROW><id>16236276</id><snippet>:</snippet></ROW><ROW><id>16236276</id><snippet>ipdb&gt; expr_code
'ux_blitz_not_buggy(_all,blitz::Range(1,Nux_blitz_not_buggy(1)-1-1))=uxold(_all,blitz::Range(1,Nuxold(1)-1-1))+ReI*(uxold(_all,blitz::Range(2,_end))-2*uxold(_all,blitz::Range(1,Nuxold(1)-1-1))+uxold(_all,blitz::Range(0,Nuxold(1)-2-1)));\n'
</snippet></ROW><ROW><id>16236276</id><snippet>blitz::Range(0,_end)</snippet></ROW><ROW><id>16236276</id><snippet>_all</snippet></ROW><ROW><id>16236276</id><snippet>import numpy as np
from scipy.weave import blitz


def test_blitz_bug(N=4):
    ReI = 1.2
    ux_blitz_buggy, ux_blitz_not_buggy, ux_np = np.zeros((N, N)), np.zeros((N, N)), np.zeros((N, N))
    uxold = np.random.randn(N, N)
    ux_np[0:,1:-1] = uxold[0:,1:-1] + ReI* (uxold[0:,2:] - 2*uxold[0:,1:-1] + uxold[0:,0:-2])
    expr_buggy = 'ux_blitz_buggy[0:,1:-1] = uxold[0:,1:-1] + ReI* (uxold[0:,2:] - 2*uxold[0:,1:-1] + uxold[0:,0:-2])'
    expr_not_buggy = 'ux_blitz_not_buggy[:,1:-1] = uxold[:,1:-1] + ReI* (uxold[:,2:] - 2*uxold[:,1:-1] + uxold[:,0:-2])'
    blitz(expr_buggy)
    blitz(expr_not_buggy)
    assert not np.allclose(ux_blitz_buggy, ux_np)
    assert np.allclose(ux_blitz_not_buggy, ux_np)

if __name__ == '__main__':
    test_blitz_bug()
</snippet></ROW><ROW><id>16236312</id><snippet>def checkComm(old_commCount): # passed as a parameter
    server = xmlrpclib.ServerProxy(server_uri) # connect to WP server
    comments = server.wp.getComments(blog_id, server_admin, admin_pass, filters)
    new_commCount = len(comments)
    if new_commCount &gt; old_commCount:
        print "there are new comments"
        old_commCount = new_commCount
        return old_commCount # return it so you can update it
    else:
        print "no new comments"
        return old_commCount

comm_count = 0 # initialize it here
while True:
    comm_count = checkComm(comm_count) # update it every time
    time.sleep(60)
</snippet></ROW><ROW><id>16236317</id><snippet>from pyDes import *
plaintext = "The secret message is : "
iv = 'kritanj '
key = '7chrkey'
plaintext = plaintext.encode("utf-8")
iv = 'kritanj '
k = des(key+'\0', CBC, iv)
print (iv + k.encrypt(plaintext)).encode("base64", "strict")
</snippet></ROW><ROW><id>16236317</id><snippet>'a3JpdGFuaiB3DY63WHnE9led43FyFe53HlhUEr+vVJg=\n'
</snippet></ROW><ROW><id>16236373</id><snippet>size</snippet></ROW><ROW><id>16236373</id><snippet>size = 200, 200, 3
m = np.zeros(size, dtype=np.uint8)
</snippet></ROW><ROW><id>16236373</id><snippet>img = cv2.imread('/tmp/1.jpg')
print img.shape, img.dtype
# (398, 454, 3), uint8
</snippet></ROW><ROW><id>16236476</id><snippet>path</snippet></ROW><ROW><id>16236476</id><snippet>os.path</snippet></ROW><ROW><id>16236476</id><snippet>from os import path  # path is a module, path.join takes many arguments

...

path = '/some/path'  # path is now a string, path.join is a totally
                     # different method, takes a single iterable
...

report = path.join(one, two)   # TypeError, str.join takes one argument
</snippet></ROW><ROW><id>16236700</id><snippet>np.random.normal(x, *P)</snippet></ROW><ROW><id>16236700</id><snippet>np.random.normal(x,a,b,c,...,z)</snippet></ROW><ROW><id>16236902</id><snippet>__init__</snippet></ROW><ROW><id>16236902</id><snippet>self</snippet></ROW><ROW><id>16236902</id><snippet>name</snippet></ROW><ROW><id>16236902</id><snippet>Thing()</snippet></ROW><ROW><id>16236902</id><snippet>self</snippet></ROW><ROW><id>16236902</id><snippet>Thing("name")</snippet></ROW><ROW><id>16237134</id><snippet>&gt;&gt;&gt; from copy import deepcopy
&gt;&gt;&gt; class CopyingMock(MagicMock):
...     def __call__(self, *args, **kwargs):
...         args = deepcopy(args)
...         kwargs = deepcopy(kwargs)
...         return super(CopyingMock, self).__call__(*args, **kwargs)
...
&gt;&gt;&gt; c = CopyingMock(return_value=None)
&gt;&gt;&gt; arg = set()
&gt;&gt;&gt; c(arg)
&gt;&gt;&gt; arg.add(1)
&gt;&gt;&gt; c.assert_called_with(set())
&gt;&gt;&gt; c.assert_called_with(arg)
Traceback (most recent call last):
    ...
AssertionError: Expected call: mock(set([1]))
Actual call: mock(set([]))
&gt;&gt;&gt; c.foo
&lt;CopyingMock name='mock.foo' id='...'&gt;
</snippet></ROW><ROW><id>16237197</id><snippet>index_list = []
for n, item in enumerate(list):
    if len(item) == 0:
        index_list.append(n)
</snippet></ROW><ROW><id>16237327</id><snippet>ioctl()</snippet></ROW><ROW><id>16237327</id><snippet>TIOCGWINSZ</snippet></ROW><ROW><id>16237327</id><snippet>IOC</snippet></ROW><ROW><id>16237327</id><snippet>G</snippet></ROW><ROW><id>16237327</id><snippet>WIN</snippet></ROW><ROW><id>16237327</id><snippet>S</snippet></ROW><ROW><id>16237327</id><snippet>Z</snippet></ROW><ROW><id>16237568</id><snippet>0 1:xx 4:xx 3:xx ...
0 1:xx 2:xx 9:xx ...
1 1:xx 5:xx 13:xx ...
1 2:xx 3:xx 6:xx ...
</snippet></ROW><ROW><id>16237667</id><snippet>def merge(left, right, aux=[]):
    while left and right:
        if left[0] &gt; right[0]:
            aux.append(right.pop(0))
        else:
            aux.append(left.pop(0))
    aux.extend(right)
    aux.extend(left)
    return aux
</snippet></ROW><ROW><id>16237667</id><snippet>&gt;&gt;&gt; merge([1,3,5,7], [3,4,5,6])
[1, 3, 3, 4, 5, 5, 6, 7]
</snippet></ROW><ROW><id>16237698</id><snippet>class MyClass(object):
    def __init__(self):
        self.data = {'a': 'v1', 'b': 'v2'}
    def __getattr__(self, attr):
        return self.data[attr]
</snippet></ROW><ROW><id>16237698</id><snippet>&gt;&gt;&gt; ob = MyClass()
&gt;&gt;&gt; v = ob.a
&gt;&gt;&gt; v
'v1'
</snippet></ROW><ROW><id>16237698</id><snippet>__setattr__</snippet></ROW><ROW><id>16237698</id><snippet>class MyClass(object):
    def __init__(self):
        ''' prevents infinite recursion by calling base class '''
        super(MyClass, self).__setattr__('data', {'a': 'v1', 'b': 'v2'})
    def __setattr__(self, k, v):
        self.data[k] = v
    def __getattr__(self, k):
        ''' we don't need a special call to super here because getattr is only 
            called when an attribute is not found in the instance's dictionary'''
        return self.data[k]
</snippet></ROW><ROW><id>16237698</id><snippet>&gt;&gt;&gt; ob = MyClass()
&gt;&gt;&gt; ob.c = 1
&gt;&gt;&gt; ob.c
1
</snippet></ROW><ROW><id>16237698</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; MyClass = namedtuple("MyClass", ["a", "b"])
&gt;&gt;&gt; ob = MyClass(a=1, b=2)
&gt;&gt;&gt; ob.a
1
</snippet></ROW><ROW><id>16237698</id><snippet>class MyClass(namedtuple("MyClass", ["a", "b"])):
    def __new__(cls, a="v1", b="v2"):
        return super(MyClass, cls).__new__(cls, a, b)
</snippet></ROW><ROW><id>16237698</id><snippet>def MyClass(a="v1", b="v2", cls=namedtuple("MyClass", ["a", "b"])):
    return cls(a, b)
</snippet></ROW><ROW><id>16237698</id><snippet>&gt;&gt;&gt; ob = MyClass()
&gt;&gt;&gt; ob.a
'v1'
</snippet></ROW><ROW><id>16237927</id><snippet>warnings</snippet></ROW><ROW><id>16237927</id><snippet>simplefilter</snippet></ROW><ROW><id>16237927</id><snippet>import warnings


def func1():
    print "func1"

def func2():
    func2b()
    print "func2"

def func2b():
    warnings.warn("uh oh")

def func3():
    print "func3"


if __name__ == "__main__":
    # Comment the following line to see the default behavior.
    warnings.simplefilter('error', UserWarning)
    func1()
    func2()
    func3()
</snippet></ROW><ROW><id>16237927</id><snippet>simplefilter</snippet></ROW><ROW><id>16237927</id><snippet>func1
warning_to_exception.py:13: UserWarning: uh oh
  warnings.warn("uh oh")
func2
func3
</snippet></ROW><ROW><id>16237927</id><snippet>func1
Traceback (most recent call last):
  File "warning_to_exception.py", line 23, in &lt;module&gt;
    func2()
  File "warning_to_exception.py", line 9, in func2
    func2b()
  File "warning_to_exception.py", line 13, in func2b
    warnings.warn("uh oh")
UserWarning: uh oh
</snippet></ROW><ROW><id>16238055</id><snippet>ps</snippet></ROW><ROW><id>16238055</id><snippet>bash</snippet></ROW><ROW><id>16238370</id><snippet>__lt__()</snippet></ROW><ROW><id>16238370</id><snippet>__le__()</snippet></ROW><ROW><id>16238370</id><snippet>__gt__()</snippet></ROW><ROW><id>16238370</id><snippet>__ge__()</snippet></ROW><ROW><id>16238370</id><snippet>__eq__()</snippet></ROW><ROW><id>16238370</id><snippet>__eq__</snippet></ROW><ROW><id>16238370</id><snippet>total_ordering</snippet></ROW><ROW><id>16238370</id><snippet>__eq__</snippet></ROW><ROW><id>16238370</id><snippet>__lt__()</snippet></ROW><ROW><id>16238370</id><snippet>__le__()</snippet></ROW><ROW><id>16238370</id><snippet>__gt__()</snippet></ROW><ROW><id>16238370</id><snippet>__ge__()</snippet></ROW><ROW><id>16238370</id><snippet>__eq__</snippet></ROW><ROW><id>16238370</id><snippet>object</snippet></ROW><ROW><id>16238370</id><snippet>ob1 == ob2</snippet></ROW><ROW><id>16238370</id><snippet>ob1 is ob2</snippet></ROW><ROW><id>16238370</id><snippet>True</snippet></ROW><ROW><id>16238370</id><snippet>do_richcompare()</snippet></ROW><ROW><id>16238370</id><snippet>object.c</snippet></ROW><ROW><id>16238370</id><snippet>==</snippet></ROW><ROW><id>16238453</id><snippet>class A(object):
    def x(self): print "Hello"
    def y(self): A.x(self)
</snippet></ROW><ROW><id>16238453</id><snippet>x</snippet></ROW><ROW><id>16238453</id><snippet>class A(object):
    def __x(self): print "Hello"
    def y(self): self.__x()
</snippet></ROW><ROW><id>16238453</id><snippet>__x</snippet></ROW><ROW><id>16238453</id><snippet>__x</snippet></ROW><ROW><id>16238537</id><snippet>user_id</snippet></ROW><ROW><id>16238537</id><snippet>session_transaction</snippet></ROW><ROW><id>16238537</id><snippet>with app.test_client() as c:
    with c.session_transaction() as sess:
        sess['user_id'] = 'myuserid'
        sess['_fresh'] = True # http://pythonhosted.org/Flask-Login/#fresh-logins
    resp = c.get('/someurl')
</snippet></ROW><ROW><id>16238537</id><snippet>myuserid</snippet></ROW><ROW><id>16238559</id><snippet>RuntimeWarning: import transform: No module named _view (ImportError: No module named _view) 
</snippet></ROW><ROW><id>16238574</id><snippet>def main():
    t = threading.Thread(target=func)
    t.daemon = True
    t.start()
    try:
        while True:
            t.join(1)
    except KeyboardInterrupt:
        print "^C is caught, exiting"
</snippet></ROW><ROW><id>16238574</id><snippet>join()</snippet></ROW><ROW><id>16239014</id><snippet>distutils</snippet></ROW><ROW><id>16239014</id><snippet>CFLAGS</snippet></ROW><ROW><id>16239014</id><snippet>CFLAGS=-mmacosx-version-min=10.7 python setup.py bdist_dmg
</snippet></ROW><ROW><id>16239048</id><snippet>inverse_PDF = 1/(PDF + delta)
</snippet></ROW><ROW><id>16239048</id><snippet>delta</snippet></ROW><ROW><id>16239048</id><snippet>delta=0</snippet></ROW><ROW><id>16239048</id><snippet>ZeroDivisionError</snippet></ROW><ROW><id>16239048</id><snippet>import numpy as np

# Generate a random points
pts = np.random.normal(size=(10**6,))

# Compute a PDF
PDF,bins = np.histogram(pts, bins=50)

# Normalize (could have used normed=True in hist)
PDF = PDF / np.trapz(PDF, bins[1:])

# Create the inverse distribution
delta = .1
inverse_PDF = 1/(PDF + delta)

# Normalize
inverse_PDF = inverse_PDF / np.trapz(inverse_PDF, bins[1:])

# Plot the results
import pylab as plt
plt.subplot(211)
plt.plot(bins[1:],PDF,lw=4,alpha=.7)
plt.title("Original Distribution")
plt.subplot(212)
plt.plot(bins[1:],inverse_PDF,lw=4,alpha=.7)
plt.title(r"'Inverse' Distribution with $\delta=%.3f$" % delta)
plt.tight_layout()
plt.show()
</snippet></ROW><ROW><id>16239603</id><snippet>[(x,y) for (x,y) in zip(list1, list2) if x != y]
</snippet></ROW><ROW><id>16239603</id><snippet>[x for x in zip(list1, list2, ... listn) if not all(z == x[0] for z in x[1:])]
</snippet></ROW><ROW><id>16239880</id><snippet>commit</snippet></ROW><ROW><id>16239998</id><snippet>class Promise(object):
    def fulfill(self, result):
        self.result = result
    def __iter__(self):
        return iter(self.result)

def scaleit(g, k):
  for item in g:
    yield item*k

promise = Promise()
f = scaleit(promise, 3)
promise.fulfill(range(10))
print list(f)
</snippet></ROW><ROW><id>16240100</id><snippet>has-a</snippet></ROW><ROW><id>16240100</id><snippet>class Rectangle:
    def __init__(self, size=None, position=None):
        self.size = size or Size()
        self.position = position or Point()
</snippet></ROW><ROW><id>16240100</id><snippet>Circle</snippet></ROW><ROW><id>16240100</id><snippet>Circle</snippet></ROW><ROW><id>16240100</id><snippet>Rectangle</snippet></ROW><ROW><id>16240100</id><snippet>Circle</snippet></ROW><ROW><id>16240100</id><snippet>Rectangle</snippet></ROW><ROW><id>16240100</id><snippet>position</snippet></ROW><ROW><id>16240100</id><snippet>Shape</snippet></ROW><ROW><id>16240100</id><snippet>Geometry</snippet></ROW><ROW><id>16240100</id><snippet>position</snippet></ROW><ROW><id>16240100</id><snippet>class Geometry:
    def __init__(self, position=None):
        self.position = position or Point()

class Rectangle(Geometry):
    def __init__(self, size=None, position=None):
        self.size = size or Size()
        super().__init__(position)

class Circle(Geometry):
    def __init__(self, radius=0, position=None):
        self.radius = radius
        super().__init__(position)
</snippet></ROW><ROW><id>16240100</id><snippet>position</snippet></ROW><ROW><id>16240100</id><snippet>Geometry</snippet></ROW><ROW><id>16240100</id><snippet>size</snippet></ROW><ROW><id>16240100</id><snippet>size</snippet></ROW><ROW><id>16240121</id><snippet>Item.objects.filter(features__name__in=['Camera', 'Touchscreen', 'Keyboard'])
</snippet></ROW><ROW><id>16240121</id><snippet>features = ['Camera', 'Touchscreen', 'Keyboard']
items = Item.objects.all()

for feature in features:
  items = items.filter(feature__name=feature)
</snippet></ROW><ROW><id>16240484</id><snippet>set_integrator</snippet></ROW><ROW><id>16240484</id><snippet>ode</snippet></ROW><ROW><id>16240484</id><snippet>'dopri5'</snippet></ROW><ROW><id>16240484</id><snippet>'dop853'</snippet></ROW><ROW><id>16240484</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import ode


def fun(t, z, omega):
    """
    Right hand side of the differential equations
      dx/dt = -omega * y
      dy/dt = omega * x
    """
    x, y = z
    f = [-omega*y, omega*x]
    return f

# Create an `ode` instance to solve the system of differential
# equations defined by `fun`, and set the solver method to 'dop853'.
solver = ode(fun)
solver.set_integrator('dop853')

# Give the value of omega to the solver. This is passed to
# `fun` when the solver calls it.
omega = 2 * np.pi
solver.set_f_params(omega)

# Set the initial value z(0) = z0.
t0 = 0.0
z0 = [1, -0.25]
solver.set_initial_value(z0, t0)

# Create the array `t` of time values at which to compute
# the solution, and create an array to hold the solution.
# Put the initial value in the solution array.
t1 = 2.5
N = 75
t = np.linspace(t0, t1, N)
sol = np.empty((N, 2))
sol[0] = z0

# Repeatedly call the `integrate` method to advance the
# solution to time t[k], and save the solution in sol[k].
k = 1
while solver.successful() and solver.t &lt; t1:
    solver.integrate(t[k])
    sol[k] = solver.y
    k += 1

# Plot the solution...
plt.plot(t, sol[:,0], label='x')
plt.plot(t, sol[:,1], label='y')
plt.xlabel('t')
plt.grid(True)
plt.legend()
plt.show()
</snippet></ROW><ROW><id>16240872</id><snippet>ttk.Style</snippet></ROW><ROW><id>16240872</id><snippet>configure</snippet></ROW><ROW><id>16240872</id><snippet>style = ttk.Style()
style.configure("Red.TCheckbutton", foreground="red")
</snippet></ROW><ROW><id>16240872</id><snippet>my_checkbutton.configure(style="Red.TCheckbutton")
</snippet></ROW><ROW><id>16240872</id><snippet>import ttk
import Tkinter as tk

class ExampleApp(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        self.var1 = tk.StringVar()
        self.var2 = tk.StringVar()

        f1 = ttk.Frame(self)
        red_button = ttk.Button(f1, text="Red", command=self.make_red)
        default_button = ttk.Button(f1, text="Default", command=self.make_default)
        default_button.pack(side="left")
        red_button.pack(side="left")

        f2 = ttk.Frame(self)
        self.cb_one = ttk.Checkbutton(f2, text="Option 1", variable=self.var1,
                                      onvalue=1, offvalue=0)
        self.cb_two  = ttk.Checkbutton(f2, text="Option 2", variable=self.var2,
                                       onvalue=1, offvalue=0)
        self.cb_one.pack(side="left")
        self.cb_two.pack(side="left")

        f1.pack(side="top", fill="x")
        f2.pack(side="top", fill="x")

        style = ttk.Style()
        style.configure("Red.TCheckbutton", foreground="red")

    def make_red(self):
        self.cb_one.configure(style="Red.TCheckbutton")
        self.cb_two.configure(style="Red.TCheckbutton")

    def make_default(self):
        self.cb_one.configure(style="TCheckbutton")
        self.cb_two.configure(style="TCheckbutton")


if __name__ == "__main__":
    root = tk.Tk()
    ExampleApp(root).pack(fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>16240957</id><snippet>K</snippet></ROW><ROW><id>16240957</id><snippet>f(K)</snippet></ROW><ROW><id>16240957</id><snippet>K</snippet></ROW><ROW><id>16240957</id><snippet>In [50]: k
Out[50]:
array([[6, 6],
       [3, 7],
       [7, 5],
       [7, 3],
       [1, 3],
       [1, 5],
       [7, 6],
       [3, 8],
       [6, 1],
       [6, 0]])
</snippet></ROW><ROW><id>16240957</id><snippet>f(K)</snippet></ROW><ROW><id>16240957</id><snippet>In [51]: k2
Out[51]:
array([[5, 7],
       [2, 8],
       [6, 6],
       [6, 4],
       [0, 4],
       [0, 6],
       [6, 7],
       [2, 9],
       [5, 2],
       [5, 1]])
</snippet></ROW><ROW><id>16240957</id><snippet>K</snippet></ROW><ROW><id>16240957</id><snippet>f(K)</snippet></ROW><ROW><id>16240957</id><snippet>In [55]: k[np.in1d(k.view(dtype='i,i').reshape(k.shape[0]),k2.view(dtype='i,i').
reshape(k2.shape[0]))]
Out[55]: array([[6, 6]])
</snippet></ROW><ROW><id>16240957</id><snippet>view</snippet></ROW><ROW><id>16240957</id><snippet>reshape</snippet></ROW><ROW><id>16240957</id><snippet>in1d</snippet></ROW><ROW><id>16240957</id><snippet>in1d</snippet></ROW><ROW><id>16240957</id><snippet>k</snippet></ROW><ROW><id>16240957</id><snippet>k</snippet></ROW><ROW><id>16240977</id><snippet>GaussianNB</snippet></ROW><ROW><id>16240977</id><snippet>MultinomialNB</snippet></ROW><ROW><id>16240977</id><snippet>BernoulliNB</snippet></ROW><ROW><id>16240977</id><snippet>TfidfTransformer</snippet></ROW><ROW><id>16240977</id><snippet>MultinomialNB</snippet></ROW><ROW><id>16240977</id><snippet>BernoulliNB</snippet></ROW><ROW><id>16241203</id><snippet>HEIGHT = 10
WIDTH = 40
MARKER = '*'
FILL_CHARACTER = ' '

coords = [(ch[0], ch[3]) for ch in band1.values()]


# Convert to coordinates of a desired ASCII area

xmin = min(c[0] for c in coords)
xmax = max(c[0] for c in coords)
kx = (WIDTH - 1)  / (xmax - xmin)

ymin = min(c[1] for c in coords)
ymax = max(c[1] for c in coords)
ky = (HEIGHT - 1) / (ymax - ymin)

acoords = [(round((c[0] - xmin) * kx),
            round((c[1] - ymin) * ky)) for c in coords]

# Actually draw the graph

for y in range(HEIGHT, -1, -1):
    chars = []
    for x in range(WIDTH):
        if (x, y) in acoords:
            chars.append(MARKER)
        else:
            chars.append(FILL_CHARACTER)
    print(''.join(chars))
</snippet></ROW><ROW><id>16241203</id><snippet>              *                         
                     *                 *
          *                             

    *                                   
                            *           
                         *         *    
                                *       

*      *          *                     
</snippet></ROW><ROW><id>16241203</id><snippet>HEIGHT = 10
WIDTH = 40
MARKER = '*'
FILL_CHARACTER = ' '

coords = [(ch[0], ch[3]) for ch in band1.values()]
coords.sort(key=lambda ch: ch[1])

xmin = min(c[0] for c in coords)
xmax = max(c[0] for c in coords)
kx = (WIDTH - 1)  / (xmax - xmin)

ymin = min(c[1] for c in coords)
ymax = max(c[1] for c in coords)
ky = (HEIGHT - 1) / (ymax - ymin)

acoords = {}
for c in coords:
    x = round((c[0] - xmin) * kx)
    y = round((c[1] - ymin) * ky)
    if x not in acoords:
        acoords[x] = y
    else:
        acoords[x] = max(acoords[x], y)

for y in range(HEIGHT, -1, -1):
    chars = []
    for x in range(WIDTH):
        if acoords.get(x, 0) &gt;= y:
            chars.append(MARKER)
        else:
            chars.append(FILL_CHARACTER)
    print(''.join(chars))
</snippet></ROW><ROW><id>16241203</id><snippet>              *                         
              *      *                 *
          *   *      *                 *
          *   *      *                 *
    *     *   *      *                 *
    *     *   *      *      *          *
    *     *   *      *   *  *      *   *
    *     *   *      *   *  *   *  *   *
    *     *   *      *   *  *   *  *   *
****************************************
</snippet></ROW><ROW><id>16241226</id><snippet>add_new_arrival</snippet></ROW><ROW><id>16241226</id><snippet>get_message</snippet></ROW><ROW><id>16241226</id><snippet>get_unread</snippet></ROW><ROW><id>16241336</id><snippet>def create(request):
&gt;&gt;   a_form = AForm(prefix="a") 
&gt;&gt;   b_form = BForm(prefix="b")
     if request.method == 'POST':
          a_form = AForm(request.POST, prefix="a")
          b_form  = BForm(request.POST, prefix="b")
     if a_form.is_valid() and b_form.is_valid():
          a = a_form.save()
&gt;&gt;        b = b_form.save(commit=False)
&gt;&gt;        b.a = a
&gt;&gt;        b.save()
          return HttpResponseRedirect('/companies/detail/{b.id}')
     return render_to_response('companies/signup.html',{'AForm':a_form , 'BForm': b_form }, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>16241479</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>16241479</id><snippet>markup.read()</snippet></ROW><ROW><id>16241479</id><snippet>from bs4 import BeautifulSoup
markup = open("example1.html")
soup = BeautifulSoup(markup.read())
markup.close()
f = open("example.txt", "w")
f.write(soup.get_text())
f.close()
</snippet></ROW><ROW><id>16241479</id><snippet>from bs4 import BeautifulSoup

with open("example1.html") as markup:
    soup = BeautifulSoup(markup.read())

with open("example.txt", "w") as f: 
    f.write(soup.get_text())
</snippet></ROW><ROW><id>16241878</id><snippet>zi = 0 
# Create zero array with the appropriate length for the data subset
z = np.zeros((col2 - col1) * (row2 - row1))
# Process number of rows for which data is being extracted
for i in range(row2 - row1):
    # Pull row, then desired elements of that row into buffer
    tmp = ((dataset.variables["z"][(i*cols):((i*cols)+cols)])[col1:col2])
    # Add each item in buffer sequentially to data array
    for j in tmp:
        z[zi] = j 
        # Keep a count of what index position the next data point goes to
        zi += 1
</snippet></ROW><ROW><id>16242210</id><snippet>SimulRunner</snippet></ROW><ROW><id>16242210</id><snippet>started</snippet></ROW><ROW><id>16242210</id><snippet>...
self.simulRunner = SimulRunner()
self.simulThread = QThread()
self.simulRunner.moveToThread(self.simulThread)
self.simulRunner.stepIncreased.connect(self.currentStep.setValue)
self.stopButton.clicked.connect(self.simulRunner.stop)
self.goButton.clicked.connect(self.simulThread.start)
# start the execution loop with the thread:
self.simulThread.started.connect(self.simulRunner.longRunning)
...
</snippet></ROW><ROW><id>16242375</id><snippet>testCase</snippet></ROW><ROW><id>16242375</id><snippet>tearDown</snippet></ROW><ROW><id>16242375</id><snippet>class MyTestCase(unittest.TestCase):
    def tearDown(self):
        print('Tearing down {}'.format(self))
</snippet></ROW><ROW><id>16242375</id><snippet>removeElements</snippet></ROW><ROW><id>16242375</id><snippet>class ElementRemovingTestCase(unittest.TestCase):
    def tearDown(self):
        self.removeElements()
</snippet></ROW><ROW><id>16242375</id><snippet>class MyTestCase(ElementRemovingTestCase):
    def tearDown(self):
        super(MyTestCase, self).tearDown()
        print('Tearing down {}'.format(self))
</snippet></ROW><ROW><id>16242375</id><snippet>tearDown</snippet></ROW><ROW><id>16242375</id><snippet>class ElementRemovingTestCase(unittest.TestCase):
    def tearDown(self):
        self.removeElements()
        self.additionalTearDown()

class MyTestCase(ElementRemovingTestCase):
    def additionalTearDown(self):
        print('Tearing down {}'.format(self))
</snippet></ROW><ROW><id>16242375</id><snippet>for name, case in inspect.getmembers(sys.modules[__name__], 
                                     lambda cls: issubclass(cls, unittest.TestCase)):
    real_tearDown = case.tearDown
    def tearDown(self):
        self.removeElements()
        real_tearDown(self)
    case.tearDown = real_tearDown
</snippet></ROW><ROW><id>16242411</id><snippet>unstack()</snippet></ROW><ROW><id>16242411</id><snippet>In [2]: df = DataFrame({"DBKEY":['T9947', 'T9947', 'T9947', 'W3972','W3972','W3972'],"STATION":['G377C_C','G377C_C','G377C_C','G377C_C','G377C_C','G377C_C'],"DAILY_DATE":['2011-10-01 00:00:00','2011-10-02 00:00:00','2011-10-03 00:00:00','2011-10-01 00:00:00','2011-10-02 00:00:00','2011-10-03 00:00:00'],"VAL":[ 17.123, 'NaN', 'NaN', '17.120', 'NaN', 'NaN']})
In [3]: df
Out[3]:
            DAILY_DATE  DBKEY  STATION     VAL
0  2011-10-01 00:00:00  T9947  G377C_C  17.123
1  2011-10-02 00:00:00  T9947  G377C_C     NaN
2  2011-10-03 00:00:00  T9947  G377C_C     NaN
3  2011-10-01 00:00:00  W3972  G377C_C  17.120
4  2011-10-02 00:00:00  W3972  G377C_C     NaN
5  2011-10-03 00:00:00  W3972  G377C_C     NaN

In [4]: df2 = df.set_index(["STATION", "DBKEY", "DAILY_DATE"])
In [5]: df2
Out[5]:
                                      VAL
STATION DBKEY DAILY_DATE                 
G377C_C T9947 2011-10-01 00:00:00  17.123
              2011-10-02 00:00:00     NaN
              2011-10-03 00:00:00     NaN
        W3972 2011-10-01 00:00:00  17.120
              2011-10-02 00:00:00     NaN
              2011-10-03 00:00:00     NaN

In [6]: df3 = df2.unstack(level=1)
In [7]: df3
Out[7]: 
                                VAL        
DBKEY                         T9947   W3972
STATION DAILY_DATE                         
G377C_C 2011-10-01 00:00:00  17.123  17.120
        2011-10-02 00:00:00     NaN     NaN
        2011-10-03 00:00:00     NaN     NaN
</snippet></ROW><ROW><id>16242534</id><snippet>time.sleep(seconds)</snippet></ROW><ROW><id>16242534</id><snippet>atkInterval</snippet></ROW><ROW><id>16242534</id><snippet>def atkInterval(atkSpeed):
    time.sleep(1/atkSpeed)
</snippet></ROW><ROW><id>16242573</id><snippet>arcpy.SaveToLayerFile_management</snippet></ROW><ROW><id>16242573</id><snippet>arcpy.FeatureClassToShapefile_conversion</snippet></ROW><ROW><id>16242573</id><snippet>arcpy.MakeXyEventLayer</snippet></ROW><ROW><id>16242589</id><snippet>nLedgers=[[[if index==0 int(j), if index&gt;0 float(j)] for index,j in i] for i in nLedgers]
</snippet></ROW><ROW><id>16242589</id><snippet>SyntaxError</snippet></ROW><ROW><id>16242589</id><snippet>if</snippet></ROW><ROW><id>16242589</id><snippet>int(j)</snippet></ROW><ROW><id>16242589</id><snippet>index==0</snippet></ROW><ROW><id>16242589</id><snippet>float(j)</snippet></ROW><ROW><id>16242589</id><snippet>int(j) if index==0 else float(j)
</snippet></ROW><ROW><id>16242589</id><snippet>for index, j in i</snippet></ROW><ROW><id>16242589</id><snippet>i</snippet></ROW><ROW><id>16242589</id><snippet>j</snippet></ROW><ROW><id>16242589</id><snippet>j</snippet></ROW><ROW><id>16242589</id><snippet>enumerate</snippet></ROW><ROW><id>16242589</id><snippet>for index, j in enumerate(i)</snippet></ROW><ROW><id>16242589</id><snippet>nLedgers=[[float(j) for j in i] for i in nLedgers]
</snippet></ROW><ROW><id>16242589</id><snippet>enumerate</snippet></ROW><ROW><id>16242589</id><snippet>nLedgers=[[float(j) for index, j in enumerate(i)] for i in nLedgers]
</snippet></ROW><ROW><id>16242589</id><snippet>nLedgers=[[(int(j) if index==0 else float(j)) for index, j in enumerate(i)] for i in nLedgers]
</snippet></ROW><ROW><id>16242739</id><snippet>session.get(..., header_auth=True)</snippet></ROW><ROW><id>16242739</id><snippet>oauth_signature</snippet></ROW><ROW><id>16242739</id><snippet>header_auth</snippet></ROW><ROW><id>16242937</id><snippet>browser.execute_script("return openPage().document;")</snippet></ROW><ROW><id>16242937</id><snippet>driver.switch_to_window("windowName")
</snippet></ROW><ROW><id>16243016</id><snippet>[o for o,n in zip(old[0], new[0]) if float(o) &gt; float(n)]
</snippet></ROW><ROW><id>16243143</id><snippet>wsdl_file = os.path.abspath(args.wsdl_file)
client = Client("file://%s" % wsdl_file, transport=t, username=sip_user, password=sip_pwd, doctor=doctor)
client.set_options(location=url)

#Get the results.
user_search = client.factory.create("UserSearch")
user_search.byUserName = args.find_user
user_search.byFuzzyUserNameOrAlias = args.fuzzy
user_search.byGroup = args.group

result = client.service['UserService'].findUser(user_search)
#                      ^^^^^^^^^^^^^^^
# This was the missing bit that threw me off!
</snippet></ROW><ROW><id>16243631</id><snippet>shell</snippet></ROW><ROW><id>16243631</id><snippet>'en-us'</snippet></ROW><ROW><id>16243631</id><snippet>&gt;&gt;&gt; from django.utils.translation import get_language
&gt;&gt;&gt; get_language()
  &gt; 'en-us'
&gt;&gt;&gt; import my_form as mf
&gt;&gt;&gt; form=mf.MyForm({'val':'0,2'})
True
Separator: .
Language: de-de
&gt;&gt;&gt; form.is_valid()
  &gt; False
&gt;&gt;&gt; from django.utils.translation import activate
&gt;&gt;&gt; activate('de-de')
&gt;&gt;&gt; get_language()
  &gt; 'de-de'
&gt;&gt;&gt; form=mf.MyForm({'val':'0,2'})
True
Separator: .
Language: de-de
&gt;&gt;&gt; form.is_valid()
  &gt; True
</snippet></ROW><ROW><id>16243631</id><snippet>get_locale()</snippet></ROW><ROW><id>16243631</id><snippet>settings</snippet></ROW><ROW><id>16243664</id><snippet>drop_duplicates</snippet></ROW><ROW><id>16243664</id><snippet>take_last=</snippet></ROW><ROW><id>16243664</id><snippet>merged_df2 = merged_df.drop_duplicates('ProjectID', take_last=True)</snippet></ROW><ROW><id>16243717</id><snippet>self.request</snippet></ROW><ROW><id>16243783</id><snippet>telnet.read_until()</snippet></ROW><ROW><id>16243783</id><snippet>output</snippet></ROW><ROW><id>16243783</id><snippet>output</snippet></ROW><ROW><id>16243783</id><snippet>output</snippet></ROW><ROW><id>16243783</id><snippet>output.splitlines()[:-1]
</snippet></ROW><ROW><id>16243783</id><snippet>output.rpartition('\n')[-1]
</snippet></ROW><ROW><id>16243783</id><snippet>output</snippet></ROW><ROW><id>16243783</id><snippet>print(output)</snippet></ROW><ROW><id>16243783</id><snippet>a = 3
a + 1
print(a)
</snippet></ROW><ROW><id>16243783</id><snippet>3</snippet></ROW><ROW><id>16243783</id><snippet>4</snippet></ROW><ROW><id>16243783</id><snippet>a = 3
b = a + 1
print(b)
</snippet></ROW><ROW><id>16243783</id><snippet>line = output.rpartition('\n')[-1]
print(line)
</snippet></ROW><ROW><id>16243783</id><snippet>CPU Utilization          : 5 %
</snippet></ROW><ROW><id>16243783</id><snippet>numbers = [int(s) for s in line.split() if s.isdigit()]
print(numbers)
</snippet></ROW><ROW><id>16243783</id><snippet>['5']
</snippet></ROW><ROW><id>16243783</id><snippet>number = numbers[0]
print(number)
</snippet></ROW><ROW><id>16243783</id><snippet>5
</snippet></ROW><ROW><id>16243783</id><snippet>number</snippet></ROW><ROW><id>16243783</id><snippet>'5'</snippet></ROW><ROW><id>16243783</id><snippet>5</snippet></ROW><ROW><id>16243783</id><snippet>number = int(numbers[0])
print(number)
</snippet></ROW><ROW><id>16243783</id><snippet>5</snippet></ROW><ROW><id>16243783</id><snippet>print(number / 100.0) # convert percent to decimal
</snippet></ROW><ROW><id>16243783</id><snippet>telnet</snippet></ROW><ROW><id>16243783</id><snippet>\r\n</snippet></ROW><ROW><id>16243783</id><snippet>\r\n</snippet></ROW><ROW><id>16243783</id><snippet>\n</snippet></ROW><ROW><id>16243783</id><snippet>\n</snippet></ROW><ROW><id>16243783</id><snippet>\r\n</snippet></ROW><ROW><id>16243783</id><snippet>\n</snippet></ROW><ROW><id>16243783</id><snippet>session.expect([r'CPU Utilization\s*: (\d+)\s*%'])</snippet></ROW><ROW><id>16243783</id><snippet>itertools</snippet></ROW><ROW><id>16244011</id><snippet>timeit</snippet></ROW><ROW><id>16244011</id><snippet>In [145]: small_lis,small_tup = ['a','b']*10, ('a','b')*10

In [146]: avg_lis,avg_tup = ['a','b']*1000, ('a','b')*1000

In [147]: huge_lis,huge_tup = ['a','b']*10**6, ('a','b')*10**6
</snippet></ROW><ROW><id>16244011</id><snippet>&gt;&gt;&gt; %timeit ''.join(small_lis)
1000000 loops, best of 3: 987 ns per loop

&gt;&gt;&gt; %timeit ''.join(small_tup)
1000000 loops, best of 3: 1 us per loop
</snippet></ROW><ROW><id>16244011</id><snippet>&gt;&gt;&gt; %timeit ''.join(avg_lis)
10000 loops, best of 3: 71.5 us per loop

&gt;&gt;&gt; %timeit ''.join(avg_tup)
10000 loops, best of 3: 72.8 us per loop
</snippet></ROW><ROW><id>16244011</id><snippet>&gt;&gt;&gt; %timeit ''.join(huge_lis)
1 loops, best of 3: 79.9 ms per loop

&gt;&gt;&gt; %timeit ''.join(huge_tup)
1 loops, best of 3: 77.5 ms per loop
</snippet></ROW><ROW><id>16244044</id><snippet>np.argmax(aa&gt;5)
</snippet></ROW><ROW><id>16244044</id><snippet>argmax</snippet></ROW><ROW><id>16244044</id><snippet>True</snippet></ROW><ROW><id>16244044</id><snippet>In [2]: N = 10000

In [3]: aa = np.arange(-N,N)

In [4]: timeit np.argmax(aa&gt;N/2)
100000 loops, best of 3: 52.3 us per loop

In [5]: timeit np.where(aa&gt;N/2)[0][0]
10000 loops, best of 3: 141 us per loop

In [6]: timeit np.nonzero(aa&gt;N/2)[0][0]
10000 loops, best of 3: 142 us per loop
</snippet></ROW><ROW><id>16244053</id><snippet>def _check(element, d, pattern = 'COL2'):
    for user in d.itervalues():
        if user.get(pattern) == element:
            return True
    return False
</snippet></ROW><ROW><id>16244053</id><snippet>def _check(element, d, pattern = 'COL2'):
    return any(user.get(pattern) == element for user in d.itervalues())
</snippet></ROW><ROW><id>16244053</id><snippet>#Finding which users should be removed from the database  
to_remove = set(
    name
    for name in users_from_database.itervalues()
    if not any(user.get('COL2') == name for (user,) in users_from_client)
)

assert to_remove == {"val5", "val7"}
</snippet></ROW><ROW><id>16244053</id><snippet>set</snippet></ROW><ROW><id>16244053</id><snippet>to_remove = set(
    user for (user,) in users_from_database
) - set(
    user.get('COL2') for user in users_from_client
)
</snippet></ROW><ROW><id>16244053</id><snippet>users_from_client = [
  {
    "COL1": "whatever",
    "COL2": "val1",
    "COL3": "whatever",
  }, {
    "COL1": "whatever",
    "COL2": "val2",
    "COL3": "whatever",
  }, {
    "COL1": "whatever",
    "COL2": "val3",
    "COL3": "whatever",   
  }
] 

#variable containing users from the database
users_from_database = set(
  "val1",
  "val2",
  "val5",
  "val7"
)
</snippet></ROW><ROW><id>16244053</id><snippet>to_remove = users_from_database - set(
    user.get('COL2') for user in users_from_client
)
</snippet></ROW><ROW><id>16244233</id><snippet>url = "https://api.imgur.com/3/upload.json"
#          ^
</snippet></ROW><ROW><id>16244254</id><snippet>Lib</snippet></ROW><ROW><id>16244254</id><snippet>engine.SetSearchPaths</snippet></ROW><ROW><id>16244367</id><snippet>In [12]: df = pandas.DataFrame({"a": [1, 2, 0, 1, 5], 
                                "b": [0, 10, 20, 30, 50]}).astype('float64')

In [13]: df
Out[13]: 
   a   b
0  1   0
1  2  10
2  0  20
3  1  30
4  5  50

In [14]: df.dtypes
Out[14]: 
a    float64
b    float64
dtype: object
</snippet></ROW><ROW><id>16244367</id><snippet>In [15]: x = df.a/df.b

In [16]: x
Out[16]: 
0         inf
1    0.200000
2    0.000000
3    0.033333
4    0.100000
dtype: float64

In [17]: x[np.isinf(x)] = np.nan

In [18]: x
Out[18]: 
0         NaN
1    0.200000
2    0.000000
3    0.033333
4    0.100000
dtype: float64
</snippet></ROW><ROW><id>16244367</id><snippet>In [20]: df.a/df.b.replace({ 0 : np.nan })
Out[20]: 
0         NaN
1    0.200000
2    0.000000
3    0.033333
4    0.100000
dtype: float64
</snippet></ROW><ROW><id>16244369</id><snippet>soup=BeautifulSoup(open(webpage,'r').read(), 'lxml')
</snippet></ROW><ROW><id>16244519</id><snippet>seek</snippet></ROW><ROW><id>16244519</id><snippet>StringIO.StringIO</snippet></ROW><ROW><id>16244519</id><snippet>gzip.GzipFile</snippet></ROW><ROW><id>16244519</id><snippet>gzip.open</snippet></ROW><ROW><id>16244519</id><snippet>zlib</snippet></ROW><ROW><id>16244904</id><snippet>H</snippet></ROW><ROW><id>16244904</id><snippet>V</snippet></ROW><ROW><id>16244904</id><snippet>H, V = [], []
</snippet></ROW><ROW><id>16244904</id><snippet>H = V = []</snippet></ROW><ROW><id>16244904</id><snippet>H</snippet></ROW><ROW><id>16244904</id><snippet>V</snippet></ROW><ROW><id>16244904</id><snippet>&gt;&gt;&gt; H = V = []
&gt;&gt;&gt; H is V
True
&gt;&gt;&gt; H.append(42)
&gt;&gt;&gt; V
[42]
&gt;&gt;&gt; H, V = [], []
&gt;&gt;&gt; H is V
False
&gt;&gt;&gt; H.append(42)
&gt;&gt;&gt; V
[]
</snippet></ROW><ROW><id>16244958</id><snippet>re.match()</snippet></ROW><ROW><id>16244958</id><snippet>MatchObject</snippet></ROW><ROW><id>16244958</id><snippet>re.match('^-a$|^-b$|^-c$',argv) != 1
</snippet></ROW><ROW><id>16244958</id><snippet>not</snippet></ROW><ROW><id>16244958</id><snippet>if not re.match('^-a$|^-b$|^-c$', argv):
</snippet></ROW><ROW><id>16244958</id><snippet>elif re.match('-help', arg):
</snippet></ROW><ROW><id>16244958</id><snippet>,</snippet></ROW><ROW><id>16244958</id><snippet>%</snippet></ROW><ROW><id>16244958</id><snippet>print ("file %s doesnot exists" % arg)
</snippet></ROW><ROW><id>16244958</id><snippet>argparse</snippet></ROW><ROW><id>16245054</id><snippet>def find_results(seq): #I'm sure you can name this function better
    return [seq[0]] + [current for previous, current in zip(seq, seq[1:]) 
                       if current in previous]
</snippet></ROW><ROW><id>16245054</id><snippet>seq[1:]</snippet></ROW><ROW><id>16245054</id><snippet>zip(a, b)</snippet></ROW><ROW><id>16245054</id><snippet>in</snippet></ROW><ROW><id>16245054</id><snippet>"test" in "testing"</snippet></ROW><ROW><id>16245182</id><snippet>arg2</snippet></ROW><ROW><id>16245182</id><snippet>class MyException(Exception):
    def __init__(self, arg1, arg2=None):
        self.arg1 = arg1
        self.arg2 = arg2
        super(MyException, self).__init__(arg1)
</snippet></ROW><ROW><id>16245182</id><snippet>Exception</snippet></ROW><ROW><id>16245182</id><snippet>.__reduce__()</snippet></ROW><ROW><id>16245182</id><snippet>.args</snippet></ROW><ROW><id>16245182</id><snippet>BaseException_reduce()</snippet></ROW><ROW><id>16245182</id><snippet>__reduce__</snippet></ROW><ROW><id>16245182</id><snippet>.args</snippet></ROW><ROW><id>16245182</id><snippet>.message</snippet></ROW><ROW><id>16245182</id><snippet>&gt;&gt;&gt; e = MyException('foo', 'bar')
&gt;&gt;&gt; e.__reduce__()
(&lt;class '__main__.MyException'&gt;, ('foo',), {'arg1': 'foo', 'arg2': 'bar'})
&gt;&gt;&gt; pickle.loads(pickle.dumps(e))
MyException('foo',)
&gt;&gt;&gt; e2 = pickle.loads(pickle.dumps(e))
&gt;&gt;&gt; e2.arg1
'foo'
&gt;&gt;&gt; e2.arg2
'bar'
</snippet></ROW><ROW><id>16245246</id><snippet>reduce(lambda x, y: tensordot(x, y, 0), l)
</snippet></ROW><ROW><id>16245271</id><snippet>F_cont</snippet></ROW><ROW><id>16245271</id><snippet>_2</snippet></ROW><ROW><id>16245271</id><snippet>F_cont</snippet></ROW><ROW><id>16245271</id><snippet>row</snippet></ROW><ROW><id>16245271</id><snippet>_2</snippet></ROW><ROW><id>16245271</id><snippet>F_cont</snippet></ROW><ROW><id>16245271</id><snippet>n/D</snippet></ROW><ROW><id>16245271</id><snippet>Q</snippet></ROW><ROW><id>16245271</id><snippet>import numpy as np
import matplotlib.pyplot as plt

D = 12.96
n = np.arange(1,7)

F0 = 1.0
x = np.linspace(0.001,4,2000)
Q = 2*np.pi*n/D
I = (11.159, 43.857, 26.302, 2.047, 0.513, 0.998)    
phase = np.genfromtxt('3_phases.txt')

D2 = 12.3
I2 = (9.4, 38.6, 8.4, 3.25, 0, 0.37)
Q2 = 2*np.pi*n/D2
n2 = np.arange(1,7)

for row in phase:

    F = (np.sqrt(np.square(n)*I/sum(I)))*row
    d = sum(i*(np.sin(x*D/2+np.pi*j)/(x*D/2+np.pi*j))for i,j in zip(F,n))
    e = sum(i*(np.sin(x*D/2-np.pi*j)/(x*D/2-np.pi*j))for i,j in zip(F,n))
    f_0 = F0*(np.sin(x*D/2)/(x*D/2))
    F_cont = np.array(d) + np.array(e) + np.array(f_0)
    plt.plot(x,F_cont,'r')
    plt.clf()

    F2 = (np.sqrt(np.square(n2)*I2/sum(I2)))*row
    plt.plot(Q2,F2,'o')
    F_data = F2
    Q_data = Q2
    I_data = np.around(2000*Q2/(4-0.001))
    I_data = np.array(map(int,I_data))
    F_fit = F_cont[I_data]
    print F_fit
    R2 = (1-(sum(np.square(F_data-F_fit))/sum(np.square(F_data-np.mean(F_data)))))
</snippet></ROW><ROW><id>16245341</id><snippet>players_scores</snippet></ROW><ROW><id>16245341</id><snippet>defaultdict</snippet></ROW><ROW><id>16245341</id><snippet>defaultdict</snippet></ROW><ROW><id>16245341</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>16245341</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>16245341</id><snippet>json</snippet></ROW><ROW><id>16245341</id><snippet>import json

try:
    with open('scores', 'r') as f:
        player_scores = json.load(f)
except IOError:
    # no such file, create an empty dictionary
    player_scores = {}

name = input("Enter new player's name: ").upper()
# create a complete, new dictionary
players_scores[name] = {'GOLF': 0, 'MON DEAL': 0}


with open('scores', 'w') as f:
    json.dump(player_scores, f)
</snippet></ROW><ROW><id>16245341</id><snippet>defaultdict</snippet></ROW><ROW><id>16245345</id><snippet>from package import item</snippet></ROW><ROW><id>16245345</id><snippet>import</snippet></ROW><ROW><id>16245345</id><snippet>ImportError</snippet></ROW><ROW><id>16245345</id><snippet>sys.modules</snippet></ROW><ROW><id>16245345</id><snippet>dict</snippet></ROW><ROW><id>16245345</id><snippet>foo.py</snippet></ROW><ROW><id>16245345</id><snippet>foo</snippet></ROW><ROW><id>16245345</id><snippet>foo.py</snippet></ROW><ROW><id>16245345</id><snippet>from foo import gaz
</snippet></ROW><ROW><id>16245345</id><snippet>foo.py</snippet></ROW><ROW><id>16245345</id><snippet>sys.modules</snippet></ROW><ROW><id>16245345</id><snippet>from foo.bar import wakaka
</snippet></ROW><ROW><id>16245345</id><snippet>foo.py</snippet></ROW><ROW><id>16245345</id><snippet>foo.bar</snippet></ROW><ROW><id>16245351</id><snippet>/dev/log</snippet></ROW><ROW><id>16245351</id><snippet>class App():
    def __init__(self):
        ...
        self.files_preserve = [handler.socket]
        ...
</snippet></ROW><ROW><id>16245351</id><snippet>class App():
    def run(self):
        handler = logging.handlers.SysLogHandler(address = '/dev/log')
        my_logger.addHandler(handler)
        my_logger.debug(appname+': Starting up storedata')
        ...
</snippet></ROW><ROW><id>16245440</id><snippet>from subprocess import check_output as run # &gt;=2.7

path = './'
cmd = ['svn', '--username', XXXX, '--password', XXXX, '--non-interactive', 'info', path]
out = run(cmd).splitlines()
out = (i.split(':', 1) for i in out if i)
info = {k:v.strip() for k,v in out}

# you can access  the other svn info fields in a similar manner
rev = info['Last Changed Rev']

with open('.last-svn-commit', 'w') as fh:
    fh.write(rev)
</snippet></ROW><ROW><id>16245440</id><snippet>SVN_URL</snippet></ROW><ROW><id>16245440</id><snippet>SVN_REVISION</snippet></ROW><ROW><id>16245442</id><snippet>self.progress = dict([(ch.childPid, []) for ch in self.childs])
</snippet></ROW><ROW><id>16245484</id><snippet>from itertools import product, starmap, islice

def findNeighbors(grid, x, y):
    xi = (0, -1, 1) if 0 &lt; x &lt; len(grid) - 1 else ((0, -1) if x &gt; 0 else (0, 1))
    yi = (0, -1, 1) if 0 &lt; y &lt; len(grid[0]) - 1 else ((0, -1) if y &gt; 0 else (0, 1))
    return islice(starmap((lambda a, b: grid[x + a][y + b]), product(xi, yi)), 1, None)
</snippet></ROW><ROW><id>16245484</id><snippet>&gt;&gt;&gt; grid = [[ 0,  1,  2,  3],
...         [ 4,  5,  6,  7],
...         [ 8,  9, 10, 11],
...         [12, 13, 14, 15]]
&gt;&gt;&gt; list(findNeighbors(grid, 2, 1))   # find neighbors of 9
[8, 10, 5, 4, 6, 13, 12, 14]
&gt;&gt;&gt; list(findNeighbors(grid, 3, 3))   # find neighbors of 15
[14, 11, 10]
</snippet></ROW><ROW><id>16245484</id><snippet>def findNeighbors(grid, x, y):
    if 0 &lt; x &lt; len(grid) - 1:
        xi = (0, -1, 1)   # this isn't first or last row, so we can look above and below
    elif x &gt; 0:
        xi = (0, -1)      # this is the last row, so we can only look above
    else:
        xi = (0, 1)       # this is the first row, so we can only look below
    # the following line accomplishes the same thing as the above code but for columns
    yi = (0, -1, 1) if 0 &lt; y &lt; len(grid[0]) - 1 else ((0, -1) if y &gt; 0 else (0, 1))
    for a in xi:
        for b in yi:
            if a == b == 0:  # this value is skipped using islice in the original code
                continue
            yield grid[x + a][y + b]
</snippet></ROW><ROW><id>16245582</id><snippet>autocomplete_light.TextWidget</snippet></ROW><ROW><id>16245582</id><snippet>CharField</snippet></ROW><ROW><id>16245582</id><snippet>MultipleChoiceWidget</snippet></ROW><ROW><id>16245582</id><snippet>&lt;option&gt;</snippet></ROW><ROW><id>16245582</id><snippet>value=the_foreign_key</snippet></ROW><ROW><id>16245600</id><snippet>if hitChance() == True:
</snippet></ROW><ROW><id>16245600</id><snippet>if self.hitChance() == True:
</snippet></ROW><ROW><id>16245600</id><snippet>self</snippet></ROW><ROW><id>16245600</id><snippet>self._strength</snippet></ROW><ROW><id>16245701</id><snippet>.prettify()</snippet></ROW><ROW><id>16245701</id><snippet>'ab'</snippet></ROW><ROW><id>16245701</id><snippet>soup = BeautifulSoup(open(markup, "r").read())
with open("example.txt", "ab") as myfile:
    myfile.write(soup.prettify('latin-1'))
</snippet></ROW><ROW><id>16245701</id><snippet>myfile.close()</snippet></ROW><ROW><id>16245701</id><snippet>with</snippet></ROW><ROW><id>16245701</id><snippet>'a'</snippet></ROW><ROW><id>16245701</id><snippet>soup = BeautifulSoup(open(markup, "r").read())
with open("example.txt", "a", encoding='latin-1') as myfile:
    myfile.write(soup.get_text())
</snippet></ROW><ROW><id>16245701</id><snippet>Ã¥</snippet></ROW><ROW><id>16245701</id><snippet>å</snippet></ROW><ROW><id>16245782</id><snippet>FirstBlog.blog.&lt;...&gt;</snippet></ROW><ROW><id>16245782</id><snippet>from blog.models import posts
</snippet></ROW><ROW><id>16245782</id><snippet>from FirstBlog.blog.models import posts
</snippet></ROW><ROW><id>16245991</id><snippet>x = Symbol('x', commutative=False)</snippet></ROW><ROW><id>16245991</id><snippet>args</snippet></ROW><ROW><id>16245991</id><snippet>x*y*z == y*x*z</snippet></ROW><ROW><id>16246035</id><snippet>from helloWorld import helloWorld
helloWorld().hi()
</snippet></ROW><ROW><id>16246035</id><snippet>import helloWorld
helloWorld.helloWorld().hi()
</snippet></ROW><ROW><id>16246035</id><snippet>helloWorld</snippet></ROW><ROW><id>16246035</id><snippet>helloWorld</snippet></ROW><ROW><id>16246035</id><snippet>helloWorld</snippet></ROW><ROW><id>16246035</id><snippet>helloWorld.attr</snippet></ROW><ROW><id>16246035</id><snippet>hi</snippet></ROW><ROW><id>16246035</id><snippet>helloWorld</snippet></ROW><ROW><id>16246035</id><snippet>self</snippet></ROW><ROW><id>16246035</id><snippet>def hi(self):
</snippet></ROW><ROW><id>16246409</id><snippet>concurrent.futures</snippet></ROW><ROW><id>16246409</id><snippet>multiprocessing</snippet></ROW><ROW><id>16246409</id><snippet>futures</snippet></ROW><ROW><id>16246409</id><snippet>multiprocessing</snippet></ROW><ROW><id>16246409</id><snippet>futures</snippet></ROW><ROW><id>16246409</id><snippet>multiprocessing</snippet></ROW><ROW><id>16246409</id><snippet>class MyClass(object):
    def __init__(self, giant_iterator_of_ints):
        self.big_shared_object = multiprocessing.Array('i', giant_iterator_of_ints)
    def compute_heavy_task(self):
        lock = multiprocessing.Lock()
        def subtask(my_range):
            return some_expensive_task(self.big_shared_object, lock, my_range)
        pool = multiprocessing.pool.Pool(5)
        my_ranges = split_into_chunks_appropriately(len(self.big_shared_object)
        results = pool.map_async(subtask, my_ranges)
        pool.close()
        pool.join()
</snippet></ROW><ROW><id>16246409</id><snippet>some_expensive_task</snippet></ROW><ROW><id>16246409</id><snippet>my_range</snippet></ROW><ROW><id>16246409</id><snippet>some_expensive_task</snippet></ROW><ROW><id>16246409</id><snippet>apply_async</snippet></ROW><ROW><id>16246409</id><snippet>map</snippet></ROW><ROW><id>16246409</id><snippet>multiprocessing.Array</snippet></ROW><ROW><id>16246409</id><snippet>ctypes</snippet></ROW><ROW><id>16246409</id><snippet>Array</snippet></ROW><ROW><id>16246409</id><snippet>Structure</snippet></ROW><ROW><id>16246409</id><snippet>multiprocessing.sharedctypes</snippet></ROW><ROW><id>16246441</id><snippet>result = np.zeros_like(arr)
result[:, 0] = arr[:, 0] + .5 * arr[:, 1]
result[:, 1] = arr[:, 2] + .5 * arr[:, 3]
result[:, 2] = arr[:, 3] - .5 * arr[:, 2]
result[:, 3] = arr[:, 4] - .5 * arr[:, 3]
result[:, 4] = arr[:, 4] + 1
</snippet></ROW><ROW><id>16246720</id><snippet>sequence</snippet></ROW><ROW><id>16246720</id><snippet>sequence</snippet></ROW><ROW><id>16246720</id><snippet>sequence</snippet></ROW><ROW><id>16246720</id><snippet>class MyRequest { int sequence; string text; }</snippet></ROW><ROW><id>16246720</id><snippet>sequence</snippet></ROW><ROW><id>16246914</id><snippet>import pygame

# Constants
WIDTH = 700
HEIGHT = 500
SCREEN_AREA = pygame.Rect(0, 0, WIDTH, HEIGHT)
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)

# Initialization
pygame.init()
screen = pygame.display.set_mode([WIDTH, HEIGHT])
pygame.mouse.set_visible(0)
pygame.display.set_caption("Breakout Recreation WIP")
clock = pygame.time.Clock()

# Variables
paddle = pygame.Rect(350, 480, 50, 10)
ball = pygame.Rect(10, 250, 15, 15)
paddle_movement_x = 0
ball_direction = (1, 1)
balls = 3
done = False

while not done and balls &gt; 0:

    # Process events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            paddle_movement_x = -2
        elif keys[pygame.K_RIGHT]:
            paddle_movement_x = 2
        else:
            paddle_movement_x = 0

    # Move paddle
    paddle.move_ip(paddle_movement_x, 0)
    paddle.clamp_ip(SCREEN_AREA)

    # Move ball
    ball.move_ip(*ball_direction)
    if ball.right &gt; WIDTH or ball.left &lt; 0:
        ball_direction = -ball_direction[0], ball_direction[1]
    elif ball.top &lt; 0 or paddle.colliderect(ball):
        ball_direction = ball_direction[0], -ball_direction[1]
    elif ball.bottom &gt; HEIGHT:
        balls = balls - 1
        ball_direction = (1, 1)
        ball = pygame.Rect(10, 250, 15, 15)

    ball.clamp_ip(SCREEN_AREA)

    # Redraw screen
    screen.fill(BLACK)
    pygame.draw.rect(screen, WHITE, paddle)
    pygame.draw.rect(screen, WHITE, ball)
    pygame.display.flip()
    clock.tick(100)

pygame.quit()
</snippet></ROW><ROW><id>16246914</id><snippet>    # Move ball
    ball.move_ip(*ball_direction)
    if ball.right &gt; WIDTH or ball.left &lt; 0:
        ball_direction = -ball_direction[0], ball_direction[1]
    elif ball.top &lt; 0 or paddle.colliderect(ball):
        ball_direction = ball_direction[0], -ball_direction[1]
    elif ball.bottom &gt; HEIGHT:
        balls = balls - 1
        ball_direction = (1, 1)
        ball = pygame.Rect(10, 250, 15, 15)
</snippet></ROW><ROW><id>16246919</id><snippet>KeyError</snippet></ROW><ROW><id>16246919</id><snippet>def modify_existing_key_value(d, key, new_value):
    d[key] # We don't need the old value, just checking the key
    d[key] = new_value
</snippet></ROW><ROW><id>16246919</id><snippet>d[key]
</snippet></ROW><ROW><id>16246919</id><snippet>KeyError</snippet></ROW><ROW><id>16246919</id><snippet>KeyError</snippet></ROW><ROW><id>16246919</id><snippet>d[key] = new_value if key in d else d[key]
</snippet></ROW><ROW><id>16246964</id><snippet>numpy.append()</snippet></ROW><ROW><id>16246964</id><snippet>import numpy as np
y = np.zeros(4,dtype=('a4,int32,float64'))
y = np.append(y, np.array([("0",7,24.5)], dtype=y.dtype))
</snippet></ROW><ROW><id>16246964</id><snippet>import numpy as np

class DynamicRecArray(object):
    def __init__(self, dtype):
        self.dtype = np.dtype(dtype)
        self.length = 0
        self.size = 10
        self._data = np.empty(self.size, dtype=self.dtype)

    def __len__(self):
        return self.length

    def append(self, rec):
        if self.length == self.size:
            self.size = int(1.5*self.size)
            self._data = np.resize(self._data, self.size)
        self._data[self.length] = rec
        self.length += 1

    def extend(self, recs):
        for rec in recs:
            self.append(rec)

    @property
    def data(self):
        return self._data[:self.length]

y = DynamicRecArray(('a4,int32,float64'))
y.extend([("xyz", 12, 3.2), ("abc", 100, 0.2)])
y.append(("123", 1000, 0))
print y.data
for i in xrange(100):
    y.append((str(i), i, i+0.1))
</snippet></ROW><ROW><id>16247035</id><snippet>make_response</snippet></ROW><ROW><id>16247035</id><snippet>Content-Disposition: attachment; filename=anyNameHere.txt</snippet></ROW><ROW><id>16247035</id><snippet>@app.route("/transform-file", methods=["POST"])
def transform():
    # Check for valid file and assign it to `inbound_file`
    data = inbound_file.read()
    data = data.replace("A", "Z")
    response = make_response(data)
    response.headers["Content-Disposition"] = "attachment; filename=outbound.txt"
    return response
</snippet></ROW><ROW><id>16247054</id><snippet>numpy</snippet></ROW><ROW><id>16247054</id><snippet>0-255</snippet></ROW><ROW><id>16247054</id><snippet>group1 = A[A&gt; threshold]
group2 = A[A&lt;=threshold]
</snippet></ROW><ROW><id>16247101</id><snippet>xtick</snippet></ROW><ROW><id>16247101</id><snippet>setp</snippet></ROW><ROW><id>16247101</id><snippet>from matplotlib.artist import setp
</snippet></ROW><ROW><id>16247101</id><snippet>setp(ax.get_xticklabels(), rotation=90)
</snippet></ROW><ROW><id>16247101</id><snippet>fig.subplots_adjust</snippet></ROW><ROW><id>16247101</id><snippet>gridSize = 0.6
leftBound = 0.5 - gridSize/2
bottomBound = 0.1
rightBound = leftBound + gridSize
topBound = bottomBound + gridSize
fig.subplots_adjust(hspace=0.05, wspace=0.05, left=leftBound,
                        bottom=bottomBound, right=rightBound, top=topBound)
</snippet></ROW><ROW><id>16247101</id><snippet>fig.add_axes</snippet></ROW><ROW><id>16247101</id><snippet>bbox_inches='tight'</snippet></ROW><ROW><id>16247101</id><snippet>plt.savefig('ScatterplotMatrix.pdf',format='pdf', dpi=1000, transparent=True)
</snippet></ROW><ROW><id>16247163</id><snippet>reCaptcha</snippet></ROW><ROW><id>16247163</id><snippet>response = captcha.submit(
        req.args['recaptcha_challenge_field'],
        req.args['recaptcha_response_field'],
        self.private_key,
        req.remote_addr,
        )
    if response.is_valid:
       # captcha was passed
</snippet></ROW><ROW><id>16247264</id><snippet>In [7]: %paste
def f(a):
    print(a)

a = 4

if f(a) == 1:
    pass
elif f(a) == 2:
    pass
elif f(a) == 3:
    pass
else:
    pass

## -- End pasted text --
4
4
4
</snippet></ROW><ROW><id>16247264</id><snippet>f(a)</snippet></ROW><ROW><id>16247264</id><snippet>f(a)</snippet></ROW><ROW><id>16247264</id><snippet>result = f(a)</snippet></ROW><ROW><id>16247264</id><snippet>result</snippet></ROW><ROW><id>16247264</id><snippet>f(a)</snippet></ROW><ROW><id>16247264</id><snippet>if</snippet></ROW><ROW><id>16247264</id><snippet>True</snippet></ROW><ROW><id>16247285</id><snippet>class Investor(Profile):
  ROLE = (
    ('AN', 'Angel Investor'),
    ('VC', 'Venture Capital'),
    ('SC', 'Seed Capital')
  )
  role = models.CharField(max_length=2, default='AN', choices=ROLE)
  min_inv = models.DecimalField(
    default=0, max_digits=20, decimal_places=2,
    verbose_name='Minimum Investments per year')
  max_inv = models.DecimalField(
    default=0, max_digits=20, decimal_places=2,
    verbose_name='Maximum investments per year')
  no_startups = models.IntegerField(
    default=0, verbose_name='Number of investments per year')
  rating_sum = models.FloatField(default=0)
  no_raters = models.IntegerField(default=0)
  categories = models.ManyToMany(Category)
  stages = models.ManyToMany(Stage)
  fundings = models.ManyToMany(Funding)
</snippet></ROW><ROW><id>16247285</id><snippet>investor = Investor.objects.all()[0]
investor.categories.add(category_instance_one, category_instance_two)
investor.categories.all() # retrieves all categories that this investor has
</snippet></ROW><ROW><id>16247465</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; results = Counter("this is fun")
&gt;&gt;&gt; r = results.most_common()
&gt;&gt;&gt; what_i_want = [(y, x) for x, y in r]
&gt;&gt;&gt; what_i_want
[(2, ' '), (2, 'i'), (2, 's'), (1, 'f'), (1, 'h'), (1, 'n'), (1, 'u'), (1, 't')]
</snippet></ROW><ROW><id>16247465</id><snippet>for</snippet></ROW><ROW><id>16247465</id><snippet>for</snippet></ROW><ROW><id>16247465</id><snippet>&gt;&gt;&gt; what_i_want = []
&gt;&gt;&gt; for x, y in r:
    what_i_want.append((y, x))
&gt;&gt;&gt; what_i_want
[(2, ' '), (2, 'i'), (2, 's'), (1, 'f'), (1, 'h'), (1, 'n'), (1, 'u'), (1, 't')]
</snippet></ROW><ROW><id>16247528</id><snippet>write</snippet></ROW><ROW><id>16247528</id><snippet>geocoder()</snippet></ROW><ROW><id>16247528</id><snippet>try:
    results  = Geocoder.geocode(row[0])
    (lat, long) = results[0].coordinates
except GeocoderError:
    (lat, long) = (0.0, 0.0)
</snippet></ROW><ROW><id>16247812</id><snippet>open('input.csv', "U")</snippet></ROW><ROW><id>16247842</id><snippet>decimal</snippet></ROW><ROW><id>16247842</id><snippet>&gt;&gt;&gt; from decimal import *
&gt;&gt;&gt; getcontext().prec = 100
&gt;&gt;&gt; Decimal(2).sqrt()
Decimal('1.414213562373095048801688724209698078569671875376948073176679737990732478462107038850387534327641573')
&gt;&gt;&gt; getcontext().prec = 1000
&gt;&gt;&gt; Decimal(2).sqrt()
Decimal('1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126
441214970999358314132226659275055927557999505011527820605714701095599716059702745345968620147285174186408891986095523292304843087143214508397626036279
952514079896872533965463318088296406206152583523950547457502877599617298355752203375318570113543746034084988471603868999706990048150305440277903164542
478230684929369186215805784631115966687130130156185689872372352885092648612494977154218334204285686060146824720771435854874155657069677653720226485447
015858801620758474922657226002085584466521458398893944370926591800311388246468157082630100594858704003186480342194897278290641045072636881313739855256
117322040245091227700226941127573627280495738108967504018369868368450725799364729060762996941380475654823728997180326802474420629269124859052181004459
84215059112024944134172853147810580360337107730918286931471017111168391658172688941975871658215212822951848847')
</snippet></ROW><ROW><id>16247936</id><snippet>2 ** 0.5</snippet></ROW><ROW><id>16247936</id><snippet>float</snippet></ROW><ROW><id>16247936</id><snippet>Decimal</snippet></ROW><ROW><id>16247936</id><snippet>Decimal</snippet></ROW><ROW><id>16247936</id><snippet>&gt;&gt;&gt; from decimal import Decimal, getcontext
&gt;&gt;&gt; getcontext().prec = 100
&gt;&gt;&gt; Decimal(2) ** Decimal('0.5')
Decimal('1.414213562373095048801688724209698078569671875376948073176679737990732478462107038850387534327641573')
</snippet></ROW><ROW><id>16247936</id><snippet>'0.5'</snippet></ROW><ROW><id>16247936</id><snippet>0.5</snippet></ROW><ROW><id>16247936</id><snippet>Decimal</snippet></ROW><ROW><id>16247936</id><snippet>0.5</snippet></ROW><ROW><id>16247936</id><snippet>0.5</snippet></ROW><ROW><id>16247936</id><snippet>float</snippet></ROW><ROW><id>16247936</id><snippet>Decimal</snippet></ROW><ROW><id>16247936</id><snippet>0.5</snippet></ROW><ROW><id>16247936</id><snippet>2 ** -1</snippet></ROW><ROW><id>16247990</id><snippet>__pycache__</snippet></ROW><ROW><id>16247990</id><snippet>multiprocessing</snippet></ROW><ROW><id>16247990</id><snippet>PYTHONDONTWRITEBYTECODE</snippet></ROW><ROW><id>16247990</id><snippet>1</snippet></ROW><ROW><id>16248029</id><snippet>TypeError: __setitem__() takes exactly 4 arguments (3 given)
</snippet></ROW><ROW><id>16248029</id><snippet>__setitem__</snippet></ROW><ROW><id>16248029</id><snippet>def __setitem__(self, rowIndex, colIndex, newVal):
</snippet></ROW><ROW><id>16248029</id><snippet>M[0, 0] = 5.0
</snippet></ROW><ROW><id>16248029</id><snippet>__setitem__</snippet></ROW><ROW><id>16248029</id><snippet>(0, 0)</snippet></ROW><ROW><id>16248029</id><snippet>5.0</snippet></ROW><ROW><id>16248029</id><snippet>__setitem__</snippet></ROW><ROW><id>16248029</id><snippet>object.__setitem__(self, key, value)</snippet></ROW><ROW><id>16248029</id><snippet>def __setitem__(self, index, value):
    self.values[index[0]][index[1]] = value
</snippet></ROW><ROW><id>16248283</id><snippet>import json
import unittest
import xmltodict


def to_json(xml_):
    dict_ = xmltodict.parse(xml_)
    json_ = json.dumps(dict_)
    return json_


class TestToJson(unittest.TestCase):
    def test_good_xml(self):
        xml = """&lt;?xml version="1.0"?&gt;
                &lt;catalog&gt;
                   &lt;book id="bk101"&gt;
                      &lt;author&gt;Gambardella, Matthew&lt;/author&gt;
                      &lt;title&gt;XML Developer's Guide&lt;/title&gt;
                   &lt;/book&gt;
                   &lt;book id="bk102"&gt;
                      &lt;author&gt;Ralls, Kim&lt;/author&gt;
                      &lt;title&gt;Midnight Rain&lt;/title&gt;
                   &lt;/book&gt;
                &lt;/catalog&gt;"""
        self.assertEquals(json.loads(to_json(xml)), {"catalog": {
        "book": [{"@id": "bk101", "author": "Gambardella, Matthew", "title": "XML Developer\'s Guide"},
                 {"@id": "bk102", "author": "Ralls, Kim", "title": "Midnight Rain"}]}})

    def test_bad_xml(self):
        xml = "&lt;broken&gt;&lt;broken"
        self.assertRaises(Exception, to_json, xml)


if __name__ == "__main__":
    unittest.main()
</snippet></ROW><ROW><id>16248283</id><snippet>xmltodict.parse</snippet></ROW><ROW><id>16248283</id><snippet>return_value</snippet></ROW><ROW><id>16248329</id><snippet>import timeit
import matplotlib.pyplot as plt
import csv

index_element_1=0
index_element_2=2

def create_csv(num_records):
    '''Creates a test CSV'''
    a=open('test.csv','wb')
    a.write("10,20,30,40,50\n"*num_records)
    a.close()

def read_csv(filename):
    '''Returns iterator'''
    cr = csv.reader(open(filename,"rb"))
    return cr

def convert_to_list_method():
    global csv_iterator
    csv_list=list(csv_iterator)
    length_list=len(csv_list)
    x=[None]*length_list
    y=[None]*length_list
    for i in range(0,length_list):
        x[i]=csv_list[index_element_1]
        y[i]=csv_list[index_element_2]
    return [x,y]

def iterate_and_append_method():
    global csv_iterator
    x=[]
    y=[]
    for row in csv_iterator:
        x.append(row[index_element_1])
        y.append(row[index_element_2])
    return [x,y]


CSV_SIZE=range(10000,1010000,10000)
time_convert_to_list=[0]*len(CSV_SIZE)
time_iterate=[0]*len(CSV_SIZE)
count=0

for csv_size in CSV_SIZE:
    create_csv(csv_size)
    global csv_iterator
    csv_iterator=read_csv('test.csv')
    time_convert_to_list[count]=timeit.timeit("convert_to_list_method()", setup="from __main__ import *",number=1)
    csv_iterator=read_csv('test.csv')
    time_iterate[count]=timeit.timeit("iterate_and_append_method()", setup="from __main__ import *",number=1)
    count=count+1

plt.xlabel('CSV Size')
plt.ylabel('Time (s)')
plt.plot(CSV_SIZE,time_convert_to_list,label='Convert to List')
plt.plot(CSV_SIZE,time_iterate,label='Iterate')
plt.legend()
plt.show()
</snippet></ROW><ROW><id>16248364</id><snippet>import re
from collections import defaultdict

band_dict = defaultdict(list)
pattern   = re.compile(r"\d+\. (?P&lt;band&gt;.+?) -\s?(?P&lt;album&gt;.+?) \((?P&lt;year&gt;\d+)\)")
with open("musiclist") as f:
    for line in f:
        match = pattern.match(line)
        if match:
            groupdict = match.groupdict()
            band_dict[groupdict['band']].append((groupdict['album'], groupdict['year']))
        else:
            print "Error, no match for line %s" % line

for band in band_dict:
    print band
    for album, year in band_dict[band]:
        print "\t%s: %s" % (album, year)
</snippet></ROW><ROW><id>16248364</id><snippet>musiclist</snippet></ROW><ROW><id>16248364</id><snippet>Pink Floyd
    Dark Side Of The Moon: 1973
Beatles
    Revolver: 1966
    Sgt Pepper's Lonely Hearts Club Band: 1967
    The Beatles (The White Album): 1968
    Abbey Road: 1969
    Rubber Soul: 1965
Clash
    London Calling: 1979
Rolling Stones
    Exile On Main Street: 1972
    Sticky Fingers: 1971
Led Zeppelin
    Led Zeppelin 4: 1971
R.E.M.
    Automatic For The People: 1992
Guns N' Roses
    Appetite For Destruction: 1987
U2
    The Joshua Tree: 1987
    Achtung Baby: 1991
    All That You Can't Leave Behind: 2000
Nirvana
    Nevermind: 1991
    In Utero: 1993
Pearl Jam
    Ten: 1991
Tool
    Aenima: 1996
Beach Boys
    Pet Sounds: 1966
Madonna
    Ray Of Light: 1998
Radiohead
    Ok Computer: 1997
    The Bends: 1995
    Kid A: 2000
Eminem
    The Eminem Show: 2002
Weezer
    Pinkerton: 1996
    Weezer: 1994
Smashing Pumpkins
    Mellon Collie And The Infinite Sadness: 1995
    Siamese Dream: 1993
Michael Jackson
    Thriller: 1982
</snippet></ROW><ROW><id>16248395</id><snippet>ABCDEFGHIJKL
</snippet></ROW><ROW><id>16248395</id><snippet>CDEFGHIJKL
</snippet></ROW><ROW><id>16248395</id><snippet>KLCDEFGHIJ
</snippet></ROW><ROW><id>16248415</id><snippet>print</snippet></ROW><ROW><id>16248415</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>16248415</id><snippet>write()</snippet></ROW><ROW><id>16248415</id><snippet>None</snippet></ROW><ROW><id>16248415</id><snippet>sys.stdout</snippet></ROW><ROW><id>16248415</id><snippet>sys.stderr.write()</snippet></ROW><ROW><id>16248415</id><snippet>print &gt;&gt;f, ...</snippet></ROW><ROW><id>16248415</id><snippet>sys.stderr.write('waiting for a connection\n')</snippet></ROW><ROW><id>16248415</id><snippet>print('waiting for a connection', file=sys.stderr)
</snippet></ROW><ROW><id>16248594</id><snippet>import csv
import itertools

with open('extracted.txt', 'r') as in_file:
    stripped = (line.strip() for line in in_file)
    lines = (line for line in stripped if line)
    grouped = itertools.izip(*[lines] * 3)
    with open('extracted.csv', 'w') as out_file:
        writer = csv.writer(out_file)
        writer.writerow(('title', 'intro', 'tagline'))
        writer.writerows(grouped)
</snippet></ROW><ROW><id>16248594</id><snippet>writerow</snippet></ROW><ROW><id>16248594</id><snippet>writerows</snippet></ROW><ROW><id>16248594</id><snippet>writer.writerows((title, intro + tagline) for title, intro, tagline in grouped)
</snippet></ROW><ROW><id>16248779</id><snippet>from statsmodels.sandbox.regression.predstd import wls_prediction_std
prstd, iv_l, iv_u = wls_prediction_std(results)
</snippet></ROW><ROW><id>16248785</id><snippet>__get__()</snippet></ROW><ROW><id>16248785</id><snippet>__get__()</snippet></ROW><ROW><id>16248785</id><snippet>attribute.__get__(None, containing_class)</snippet></ROW><ROW><id>16248785</id><snippet>attribute.__get__(instance, containing_class)</snippet></ROW><ROW><id>16248785</id><snippet>__get__()</snippet></ROW><ROW><id>16248785</id><snippet>self</snippet></ROW><ROW><id>16248785</id><snippet>__get__()</snippet></ROW><ROW><id>16248785</id><snippet>__get__()</snippet></ROW><ROW><id>16248785</id><snippet>self</snippet></ROW><ROW><id>16248785</id><snippet>staticmethod()</snippet></ROW><ROW><id>16248785</id><snippet>__get__()</snippet></ROW><ROW><id>16248785</id><snippet>staticmethod()</snippet></ROW><ROW><id>16248785</id><snippet>staticmethod()</snippet></ROW><ROW><id>16248785</id><snippet>s = staticmethod(8)
t = s.__get__(None, 2) # gives 8
</snippet></ROW><ROW><id>16248785</id><snippet>8</snippet></ROW><ROW><id>16248785</id><snippet>2</snippet></ROW><ROW><id>16248785</id><snippet>cmd = Cmd.cmdOne
cmd() # works fine
</snippet></ROW><ROW><id>16248785</id><snippet>cmdOne</snippet></ROW><ROW><id>16248785</id><snippet>staticmethod()</snippet></ROW><ROW><id>16248785</id><snippet>__get__()</snippet></ROW><ROW><id>16248785</id><snippet>Cmd.cmd = Cmd.cmdOne
Cmd.cmd() # unbound error
</snippet></ROW><ROW><id>16248785</id><snippet>Cmd.cmd</snippet></ROW><ROW><id>16248785</id><snippet>__get__()</snippet></ROW><ROW><id>16248785</id><snippet>self</snippet></ROW><ROW><id>16248908</id><snippet>import re
from bs4 import BeautifulSoup

html_doc = """
&lt;html&gt;
&lt;body&gt;
&lt;span class="blue"&gt;here is a lot of text that i don't need&lt;/span&gt;
&lt;span class="blue"&gt;this is the span i need because it contains 04/18/13 7:29pm&lt;/span&gt;
&lt;span class="blue"&gt;04/19/13 7:30pm&lt;/span&gt;
&lt;span class="blue"&gt;Posted on 04/20/13 10:31pm&lt;/span&gt;
&lt;/body&gt;
&lt;/html&gt;
"""

# parse the html
soup = BeautifulSoup(html_doc)

# find a list of all span elements
spans = soup.find_all('span', {'class' : 'blue'})

# create a list of lines corresponding to element texts
lines = [span.get_text() for span in spans]

# collect the dates from the list of lines using regex matching groups
found_dates = []
for line in lines:
    m = re.search(r'(\d{2}/\d{2}/\d{2} \d+:\d+[a|p]m)', line)
    if m:
        found_dates.append(m.group(1))

# print the dates we collected
for date in found_dates:
    print(date)
</snippet></ROW><ROW><id>16248908</id><snippet>04/18/13 7:29pm
04/19/13 7:30pm
04/20/13 10:31pm
</snippet></ROW><ROW><id>16248913</id><snippet>urlpatterns = patterns('',
    url(r'^accounts/', include('django.contrib.auth.urls'))
)
</snippet></ROW><ROW><id>16248913</id><snippet>&lt;form method="post" action="{% url login %}"&gt;
</snippet></ROW><ROW><id>16248913</id><snippet>&lt;a href="{% url logout %}?next=/accounts/login/"&gt;Logout&lt;/a&gt;
</snippet></ROW><ROW><id>16248913</id><snippet>/helpdesk/login/</snippet></ROW><ROW><id>16248913</id><snippet>login</snippet></ROW><ROW><id>16248913</id><snippet>{% url login %}</snippet></ROW><ROW><id>16248913</id><snippet>/helpdesk/login</snippet></ROW><ROW><id>16248913</id><snippet>url(r'^helpdesk/', include('helpdesk.urls'))</snippet></ROW><ROW><id>16248913</id><snippet>url(r'^accounts/', include('django.contrib.auth.urls'))</snippet></ROW><ROW><id>16248913</id><snippet>urls.py</snippet></ROW><ROW><id>16249118</id><snippet>info[4]</snippet></ROW><ROW><id>16249118</id><snippet>5</snippet></ROW><ROW><id>16249118</id><snippet>info[info[4]]</snippet></ROW><ROW><id>16249118</id><snippet>info[5]</snippet></ROW><ROW><id>16249118</id><snippet>9</snippet></ROW><ROW><id>16249448</id><snippet>lil_matrix</snippet></ROW><ROW><id>16249448</id><snippet>zeros</snippet></ROW><ROW><id>16249448</id><snippet>for</snippet></ROW><ROW><id>16249448</id><snippet>A</snippet></ROW><ROW><id>16249448</id><snippet>lil_matrix</snippet></ROW><ROW><id>16249448</id><snippet>(n*m, n*m)</snippet></ROW><ROW><id>16249448</id><snippet>b</snippet></ROW><ROW><id>16249448</id><snippet>zeros</snippet></ROW><ROW><id>16249448</id><snippet>n*m</snippet></ROW><ROW><id>16249448</id><snippet>j</snippet></ROW><ROW><id>16249448</id><snippet>i=0</snippet></ROW><ROW><id>16249448</id><snippet>Iteration    Value of index

1            0+0*4
2            0+1*4
3            0+2*4
4            0+3*4
</snippet></ROW><ROW><id>16249448</id><snippet>j</snippet></ROW><ROW><id>16249448</id><snippet>j=0</snippet></ROW><ROW><id>16249448</id><snippet>j=m-1</snippet></ROW><ROW><id>16249448</id><snippet>i</snippet></ROW><ROW><id>16249448</id><snippet>j</snippet></ROW><ROW><id>16249448</id><snippet>5            1+0*4
6            1+1*4
7            1+2*4
8            1+3*4
</snippet></ROW><ROW><id>16249448</id><snippet>i=2</snippet></ROW><ROW><id>16249448</id><snippet>i=3</snippet></ROW><ROW><id>16249448</id><snippet>i=n-1</snippet></ROW><ROW><id>16249448</id><snippet>if</snippet></ROW><ROW><id>16249448</id><snippet>else</snippet></ROW><ROW><id>16249448</id><snippet>i</snippet></ROW><ROW><id>16249448</id><snippet>j</snippet></ROW><ROW><id>16249448</id><snippet>i</snippet></ROW><ROW><id>16249448</id><snippet>j</snippet></ROW><ROW><id>16249448</id><snippet>= 0</snippet></ROW><ROW><id>16249448</id><snippet>i=n-1</snippet></ROW><ROW><id>16249448</id><snippet>j=m-1</snippet></ROW><ROW><id>16249448</id><snippet>A</snippet></ROW><ROW><id>16249448</id><snippet>b</snippet></ROW><ROW><id>16249448</id><snippet>if</snippet></ROW><ROW><id>16249448</id><snippet>i</snippet></ROW><ROW><id>16249448</id><snippet>j</snippet></ROW><ROW><id>16249448</id><snippet>A</snippet></ROW><ROW><id>16249448</id><snippet>b</snippet></ROW><ROW><id>16249448</id><snippet>else</snippet></ROW><ROW><id>16249448</id><snippet>if</snippet></ROW><ROW><id>16249448</id><snippet>else</snippet></ROW><ROW><id>16249448</id><snippet>A</snippet></ROW><ROW><id>16249448</id><snippet>b</snippet></ROW><ROW><id>16249448</id><snippet>A</snippet></ROW><ROW><id>16249448</id><snippet>b</snippet></ROW><ROW><id>16249448</id><snippet>if</snippet></ROW><ROW><id>16249448</id><snippet>else</snippet></ROW><ROW><id>16249448</id><snippet>index</snippet></ROW><ROW><id>16249448</id><snippet>b[index]</snippet></ROW><ROW><id>16249448</id><snippet>b</snippet></ROW><ROW><id>16249448</id><snippet>b</snippet></ROW><ROW><id>16249448</id><snippet>index</snippet></ROW><ROW><id>16249448</id><snippet>A</snippet></ROW><ROW><id>16249448</id><snippet>A</snippet></ROW><ROW><id>16249448</id><snippet>A[x, y]</snippet></ROW><ROW><id>16249448</id><snippet>A[x][y]</snippet></ROW><ROW><id>16249448</id><snippet>A</snippet></ROW><ROW><id>16249448</id><snippet>b</snippet></ROW><ROW><id>16249448</id><snippet>lil_matrix</snippet></ROW><ROW><id>16249448</id><snippet>zeros</snippet></ROW><ROW><id>16249448</id><snippet>linspace</snippet></ROW><ROW><id>16249448</id><snippet>x</snippet></ROW><ROW><id>16249448</id><snippet>y</snippet></ROW><ROW><id>16249448</id><snippet>if</snippet></ROW><ROW><id>16249474</id><snippet>list</snippet></ROW><ROW><id>16249474</id><snippet>./Include/listobject.h</snippet></ROW><ROW><id>16249474</id><snippet>./Objects/listobject.c</snippet></ROW><ROW><id>16249474</id><snippet>typedef struct {
    PyObject_VAR_HEAD
    /* Vector of pointers to list elements.  list[0] is ob_item[0], etc. */
    PyObject **ob_item;

    /* ob_item contains space for 'allocated' elements.  The number
     * currently in use is ob_size.
     * Invariants:
     *     0 &lt;= ob_size &lt;= allocated
     *     len(list) == ob_size
     *     ob_item == NULL implies ob_size == allocated == 0
     * list.sort() temporarily sets allocated to -1 to detect mutations.
     *
     * Items must normally not be NULL, except during construction when
     * the list is not yet visible outside the function that builds it.
     */
    Py_ssize_t allocated;
} PyListObject;
</snippet></ROW><ROW><id>16249474</id><snippet>list.__len__()</snippet></ROW><ROW><id>16249474</id><snippet>ob_size</snippet></ROW><ROW><id>16249474</id><snippet>PyObject_VAR_HEAD</snippet></ROW><ROW><id>16249474</id><snippet>len()</snippet></ROW><ROW><id>16249678</id><snippet>gensim</snippet></ROW><ROW><id>16249678</id><snippet>from gensim import corpora, models, similarities

documents = ["Human machine interface for lab abc computer applications",
             "A survey of user opinion of computer system response time",
             "The EPS user interface management system",
             "System and human system engineering testing of EPS",
             "Relation of user perceived response time to error measurement",
             "The generation of random binary unordered trees",
             "The intersection graph of paths in trees",
             "Graph minors IV Widths of trees and well quasi ordering",
             "Graph minors A survey"]

# remove common words and tokenize
stoplist = set('for a of the and to in'.split())
texts = [[word for word in document.lower().split() if word not in stoplist]
         for document in documents]

# remove words that appear only once
all_tokens = sum(texts, [])
tokens_once = set(word for word in set(all_tokens) if all_tokens.count(word) == 1)

texts = [[word for word in text if word not in tokens_once] for text in texts]

dictionary = corpora.Dictionary(texts)
corp = [dictionary.doc2bow(text) for text in texts]

# extract 400 LSI topics; use the default one-pass algorithm
lsi = gensim.models.lsimodel.LsiModel(corpus=corp, id2word=dictionary, num_topics=400)

# print the most contributing words (both positively and negatively) for each of the first ten topics
lsi.print_topics(10)
</snippet></ROW><ROW><id>16249768</id><snippet>syncdb</snippet></ROW><ROW><id>16249768</id><snippet>pub_date</snippet></ROW><ROW><id>16249768</id><snippet>App</snippet></ROW><ROW><id>16249790</id><snippet>python setup.py egg_info -RDb "" sdist register upload
</snippet></ROW><ROW><id>16250022</id><snippet>smtplib.SMTP_SSL</snippet></ROW><ROW><id>16250194</id><snippet>a = SomeObject()
b = a
</snippet></ROW><ROW><id>16250194</id><snippet>a</snippet></ROW><ROW><id>16250194</id><snippet>b</snippet></ROW><ROW><id>16250194</id><snippet>a +---------+
  | value 1 |
  +---------+

b +---------+
  | value 2 |
  +---------+
</snippet></ROW><ROW><id>16250194</id><snippet>a.x = ...</snippet></ROW><ROW><id>16250194</id><snippet>a +-------------+
  | reference 1 | ---------+
  +-------------+          v
                      +---------+
                      | value 1 |
                      +---------+
b +-------------+          ^
  | reference 2 | ---------+
  +-------------+
</snippet></ROW><ROW><id>16250194</id><snippet>value #1</snippet></ROW><ROW><id>16250194</id><snippet>a.something = 1
b.something = 2
assert a.something == 2
</snippet></ROW><ROW><id>16250194</id><snippet>a = ...</snippet></ROW><ROW><id>16250194</id><snippet>b</snippet></ROW><ROW><id>16250304</id><snippet>[1  0  0]
[0  0  1]
[0 -1  0]
</snippet></ROW><ROW><id>16250304</id><snippet>[1  0  0] [0] [0]
[0  0  1]*[0]=[1]
[0 -1  0] [1] [0]
</snippet></ROW><ROW><id>16250304</id><snippet>[1  0  0] [0  0  1  0] [0  0  1  0]
[0  0  1]*[0  1  0  0]=[1  0  1  0]
[0 -1  0] [1  0  1 -1] [0 -1  0  1]
</snippet></ROW><ROW><id>16250304</id><snippet>v1 = vector(0,10,0)
v2 = vector(0,-10,0)

//Not necessary, since you will normalize the cross product result
//v1 = normalize(v1)
//v2 = normalize(v2)

cross = v2.cross(v1)  // (0,0,0) and possible divide by 0 if normalized here
if(length(cross)==0){ //either "==0" or "&lt;thresh" where thresh is some very small number
   if(v.z!=0)
        cross = vector(1,1,-(v1.x+v1.y)/v1.z);
   else if(v.y!=0) //is z==0?  well here's an identical solution as long as y isn't 0
        cross = vector(1,-(v1.x+v1.z)/v.y,1);
   else //by this point, v1.x must be the only nonzero remaining point, otherwise it's a null vector
        cross = vector(-(v1.y+v1.z)/v.x,1,1);
}
cross=normalize(cross);
angle = acos( normalize(v2.dot(v1)) )  // 180

quat  = quaternion(cross,angle)
</snippet></ROW><ROW><id>16250378</id><snippet>b</snippet></ROW><ROW><id>16250378</id><snippet>bytes</snippet></ROW><ROW><id>16250378</id><snippet>\r\n</snippet></ROW><ROW><id>16250378</id><snippet>strip()</snippet></ROW><ROW><id>16250378</id><snippet>import serial

ser = serial.Serial('/dev/ttyACM0', 9600)
while True:
   value = float(ser.readline().strip())
   print 'New value is {0:0.2f}'.format(value)
</snippet></ROW><ROW><id>16250487</id><snippet>2**i</snippet></ROW><ROW><id>16250487</id><snippet>random.getrandbits</snippet></ROW><ROW><id>16250487</id><snippet>bin</snippet></ROW><ROW><id>16250487</id><snippet>bin</snippet></ROW><ROW><id>16250487</id><snippet>'0b'</snippet></ROW><ROW><id>16250487</id><snippet>str1 = bin(random.getrandbits(2**i))[2:].zfill(2**i)
</snippet></ROW><ROW><id>16250487</id><snippet>from timeit import Timer
&gt;&gt;&gt; t=Timer("''.join(random.choice('01') for x in xrange(2**20))", "import random")
&gt;&gt;&gt; sorted(t.repeat(10,1))
[0.7849910731831642, 0.787418033587528, 0.7894113893237318, 0.789840397476155, 0.7907980049587877, 0.7908638883536696, 0.7911707057912736, 0.7935838766477445, 0.8014726470912592, 0.8228315074311467]
&gt;&gt;&gt; t=Timer("bin(random.getrandbits(2**20))[2:].zfill(2**20)", "import random")
&gt;&gt;&gt; sorted(t.repeat(10,1))
[0.005115922216191393, 0.005215130351643893, 0.005234282501078269, 0.005451850921190271, 0.005531523863737675, 0.005627284612046424, 0.005746794025981217, 0.006217553864416914, 0.014556016781853032, 0.014710766150983545]
</snippet></ROW><ROW><id>16250615</id><snippet>content.encode('utf8')
</snippet></ROW><ROW><id>16250615</id><snippet>csv</snippet></ROW><ROW><id>16250615</id><snippet>.writerow()</snippet></ROW><ROW><id>16250615</id><snippet>'ignore'</snippet></ROW><ROW><id>16250615</id><snippet>c.writerow([e.encode('utf8') for e in (title, description, price, weight, category, subcategory)])
</snippet></ROW><ROW><id>16250615</id><snippet>NavigableString</snippet></ROW><ROW><id>16250615</id><snippet>unicode</snippet></ROW><ROW><id>16250615</id><snippet>unicode(description)
</snippet></ROW><ROW><id>16250615</id><snippet>UnicodeWriter</snippet></ROW><ROW><id>16250615</id><snippet>csv</snippet></ROW><ROW><id>16251129</id><snippet>normed=True</snippet></ROW><ROW><id>16251129</id><snippet>normed=True</snippet></ROW><ROW><id>16251129</id><snippet>import matplotlib.pyplot as plt
import numpy as np
plt.figure(1)
H, xedges, yedges = np.histogram2d(x, y, bins=50, weights=w)
H2, _, _ = np.histogram2d(x,y, bins=50)
extent = [0,1, xedges[-1], xedges[0]]
plt.imshow(H/H2, extent=extent,interpolation='nearest')
plt.colorbar()
plt.show()
</snippet></ROW><ROW><id>16251129</id><snippet>nan</snippet></ROW><ROW><id>16251336</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>16251336</id><snippet>.py</snippet></ROW><ROW><id>16251471</id><snippet>test</snippet></ROW><ROW><id>16251471</id><snippet>&gt;&gt;&gt; from heapq import heappush
&gt;&gt;&gt; test = [[]] * 4
&gt;&gt;&gt;
&gt;&gt;&gt; heappush(test[2],6)
&gt;&gt;&gt; heappush(test[2],7)
&gt;&gt;&gt; test
[[6, 7], [6, 7], [6, 7], [6, 7]]
</snippet></ROW><ROW><id>16251471</id><snippet>&gt;&gt;&gt; test = [[] for _ in range(4)]
&gt;&gt;&gt; heappush(test[2],6)
&gt;&gt;&gt; heappush(test[2],7)
&gt;&gt;&gt; test
[[], [], [6, 7], []]
</snippet></ROW><ROW><id>16251604</id><snippet>import csv
import StringIO
results = "sku\tdelivered-price-gbp\tdelivered-price-euro\tid\n32850238\t15.53\t35.38\t258505\n"

data = list(csv.DictReader(StringIO.StringIO(results), delimiter='\t'))
print(data)
</snippet></ROW><ROW><id>16251604</id><snippet>[{'sku': '32850238', 'delivered-price-euro': '35.38', 'delivered-price-gbp': '15.53', 'id': '258505'}]
</snippet></ROW><ROW><id>16251604</id><snippet>data = {}
for entry in csv.DictReader(StringIO.StringIO(results), delimiter='\t'):
    data[entry['sku']] = [entry['delivered-price-gbp'], entry['delivered-price-euro']]
</snippet></ROW><ROW><id>16251604</id><snippet>import csv
import StringIO
results = "sku\tdelivered-price-gbp\tdelivered-price-euro\tid\n32850238\t15.53\t35.38\t258505\n10395850\t35.21\t46.32\t3240582\n"

data = {entry['sku']: [entry['delivered-price-gbp'], entry['delivered-price-euro']] 
        for entry in csv.DictReader(StringIO.StringIO(results), delimiter='\t')}
print(data)
</snippet></ROW><ROW><id>16251604</id><snippet>{'32850238': ['15.53', '35.38'], '10395850': ['35.21', '46.32']}
</snippet></ROW><ROW><id>16251798</id><snippet>price = individual_page.find("span", {"class","black20b"})
if price:
    print ''.join(price.findAll(text=True)) 
</snippet></ROW><ROW><id>16251995</id><snippet>&gt;&gt;&gt; a[:, (a != 0).sum(axis=0) &gt;= 5]
array([[1, 1, 1],
       [1, 1, 1],
       [1, 1, 1],
       [1, 1, 3],
       [1, 1, 3],
       [1, 1, 5],
       [1, 1, 1],
       [1, 1, 1],
       [1, 1, 3],
       [1, 1, 4],
       [1, 1, 5],
       [1, 1, 0]])
</snippet></ROW><ROW><id>16251995</id><snippet>&gt;&gt;&gt; a[:, np.apply_along_axis(np.count_nonzero, 0, a) &gt;= 5]
array([[1, 1, 1],
       [1, 1, 1],
       [1, 1, 1],
       [1, 1, 3],
       [1, 1, 3],
       [1, 1, 5],
       [1, 1, 1],
       [1, 1, 1],
       [1, 1, 3],
       [1, 1, 4],
       [1, 1, 5],
       [1, 1, 0]])
</snippet></ROW><ROW><id>16251995</id><snippet>np.count_nonzero</snippet></ROW><ROW><id>16251995</id><snippet>sum</snippet></ROW><ROW><id>16251995</id><snippet>np.appyly_along_axis</snippet></ROW><ROW><id>16251995</id><snippet>a</snippet></ROW><ROW><id>16252049</id><snippet>class Students(models.Model):

    nr_album = models.IntegerField()
    fName = models.CharField(max_length=70)
    lName = models.CharField(max_length=70)
    pesel = models.BigIntegerField()
    address = models.CharField(max_length=100)
    major_enrollments = models.ForeignKey('Major_enrollments')

    def __unicode__(self):
        return unicode(self.pesel)


    class Meta:
        db_table='Students'
</snippet></ROW><ROW><id>16252188</id><snippet>&gt;&gt;&gt; import array
&gt;&gt;&gt; a = array.array('I', xrange(10**8))  # a.itemsize indicates 4 bytes per element =&gt; about 0.5 GB
&gt;&gt;&gt; import random                                                               
&gt;&gt;&gt; random.shuffle(a)
</snippet></ROW><ROW><id>16252188</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; ids = numpy.arange(100000000, dtype='uint32')  # 32 bits is enough for numbers up to about 4 billion
&gt;&gt;&gt; numpy.random.shuffle(ids)
</snippet></ROW><ROW><id>16252358</id><snippet>None</snippet></ROW><ROW><id>16252358</id><snippet>None</snippet></ROW><ROW><id>16252358</id><snippet>None</snippet></ROW><ROW><id>16252358</id><snippet>dict.get()</snippet></ROW><ROW><id>16252430</id><snippet>$result is the json string for example

$res = json_decode($result,true);
</snippet></ROW><ROW><id>16252461</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import mpl_toolkits.mplot3d.axes3d as axes3d

np.random.seed(1)
fig, ax = plt.subplots(subplot_kw=dict(projection='3d'))
N = 100
X, Y = np.meshgrid(np.arange(N), np.arange(N))
heights = np.sin(2*np.pi*np.sqrt(X**2+Y**2)/N)
ax.plot_surface(X, Y, heights, cmap=plt.get_cmap('jet'))
plt.show()
</snippet></ROW><ROW><id>16252461</id><snippet>Z</snippet></ROW><ROW><id>16252461</id><snippet>X</snippet></ROW><ROW><id>16252461</id><snippet>Y</snippet></ROW><ROW><id>16252461</id><snippet>Z</snippet></ROW><ROW><id>16252461</id><snippet>np.meshgrid</snippet></ROW><ROW><id>16252681</id><snippet>range()</snippet></ROW><ROW><id>16252681</id><snippet>range</snippet></ROW><ROW><id>16252681</id><snippet>list(xrange())</snippet></ROW><ROW><id>16252681</id><snippet>list(..)</snippet></ROW><ROW><id>16252681</id><snippet>rangeiterator</snippet></ROW><ROW><id>16252681</id><snippet>xrange</snippet></ROW><ROW><id>16252681</id><snippet>list(..)</snippet></ROW><ROW><id>16252681</id><snippet>range()</snippet></ROW><ROW><id>16252695</id><snippet>rects = plt.bar(range(N), x, align='center')
</snippet></ROW><ROW><id>16252695</id><snippet>rect.set_height</snippet></ROW><ROW><id>16252695</id><snippet>    for rect, h in zip(rects, x):
        rect.set_height(h)
</snippet></ROW><ROW><id>16252695</id><snippet>import matplotlib.pyplot as plt
import numpy as np
def setup_backend(backend='TkAgg'):
    import sys
    del sys.modules['matplotlib.backends']
    del sys.modules['matplotlib.pyplot']
    import matplotlib as mpl
    mpl.use(backend)  # do this before importing pyplot
    import matplotlib.pyplot as plt
    return plt

def animate():
    # http://www.scipy.org/Cookbook/Matplotlib/Animations
    mu, sigma = 100, 15
    N = 4
    x = mu + sigma * np.random.randn(N)
    rects = plt.bar(range(N), x, align='center')
    for i in range(50):
        x = mu + sigma * np.random.randn(N)
        for rect, h in zip(rects, x):
            rect.set_height(h)
        fig.canvas.draw()

plt = setup_backend()
fig = plt.figure()
win = fig.canvas.manager.window
win.after(10, animate)
plt.show()
</snippet></ROW><ROW><id>16252729</id><snippet>os.path.join</snippet></ROW><ROW><id>16252729</id><snippet>Input</snippet></ROW><ROW><id>16252729</id><snippet>path = os.path.join(os.getcwd(), 'Input')
</snippet></ROW><ROW><id>16252773</id><snippet>an_int</snippet></ROW><ROW><id>16252773</id><snippet>from random import randint

class RandomFun(object):
    def __str__(self):
        return str(randomfun())

def randomfun():
    return randint(1, 100)

an_int = RandomFun()
print an_int    
print an_int    
</snippet></ROW><ROW><id>16252773</id><snippet>57
19
</snippet></ROW><ROW><id>16252787</id><snippet>__builtins__</snippet></ROW><ROW><id>16252787</id><snippet>__main__</snippet></ROW><ROW><id>16252787</id><snippet>__builtins__</snippet></ROW><ROW><id>16252787</id><snippet>__builtin__</snippet></ROW><ROW><id>16252787</id><snippet>__builtins__</snippet></ROW><ROW><id>16252787</id><snippet>__builtin__</snippet></ROW><ROW><id>16252787</id><snippet>__builtins__</snippet></ROW><ROW><id>16252787</id><snippet>__builtins__</snippet></ROW><ROW><id>16252787</id><snippet>&gt;&gt;&gt; __builtins__.max
&lt;built-in function max&gt;
</snippet></ROW><ROW><id>16252787</id><snippet>__builtin__</snippet></ROW><ROW><id>16252787</id><snippet>__builtins__</snippet></ROW><ROW><id>16252872</id><snippet>get_context_data</snippet></ROW><ROW><id>16252872</id><snippet>LoginView</snippet></ROW><ROW><id>16252872</id><snippet>def get_context_data(self, **kwargs):
    context = super(LoginView, self).get_context_data(**kwargs)
    context['next'] = self.request.REQUEST.get('next')
    return context
</snippet></ROW><ROW><id>16252872</id><snippet>GET</snippet></ROW><ROW><id>16252872</id><snippet>next</snippet></ROW><ROW><id>16252872</id><snippet>localhost.com/login?next=/accounts/</snippet></ROW><ROW><id>16253081</id><snippet>def get_cars(self, request, page=1):
    cars_per_page = 10
    search_term = request.REQUEST.get('car_type')  #car_type 'car bmw' will still be kept in request
    all_cars = Car.objects.filter(car_type__contains=search_term)
    paginator = Paginator(all_cars, cars_per_page)
    page_ = paginator.page(page)
    result_cars = page_.object_list
    return render(request, "search_cars.html", {'search_term': search_term})
</snippet></ROW><ROW><id>16253081</id><snippet>page</snippet></ROW><ROW><id>16253081</id><snippet>def get_cars(self, request):
    page = request.GET.get('page')
    ...
    #Everything else described above.
    ...
</snippet></ROW><ROW><id>16253115</id><snippet>a, b, c = 2, 616872928410303123, -1850618785230909388
x = Symbol('x')
int(max(solve(a*x**2 + b*x + c, x)))
</snippet></ROW><ROW><id>16253157</id><snippet>import pycountry


input_countries = ['American Samoa', 'Canada', 'France']

countries = {}
for country in pycountry.countries:
    countries[country.name] = country.alpha2

codes = [countries.get(country, 'Unknown code') for country in input_countries]

print codes  # prints [u'AS', u'CA', u'FR']
</snippet></ROW><ROW><id>16253177</id><snippet>james</snippet></ROW><ROW><id>16253177</id><snippet>julie</snippet></ROW><ROW><id>16253177</id><snippet>name</snippet></ROW><ROW><id>16253177</id><snippet>from py2neo import neo4j
graph_db = neo4j.GraphDatabaseService()
james, julie = graph_db.create(node(name="James"), node(name="Julie"))
graph_db.create(rel(james, "KNOWS", julie))
</snippet></ROW><ROW><id>16253177</id><snippet>from py2neo import neo4j
graph_db = neo4j.GraphDatabaseService()
james, julie, friendship = graph_db.create(
    node(name="James"), node(name="Julie"), rel(0, "KNOWS", 1)
)
</snippet></ROW><ROW><id>16253314</id><snippet>In [35]: lis=['123','231','34','123','34','123']

In [36]: from collections import defaultdict

In [37]: dic=defaultdict(list)

In [38]: for i,x in enumerate(lis):
   ....:     dic[x].append(i)
   ....:     

In [40]: dic.items()
Out[40]: [('123', [0, 3, 5]), ('231', [1]), ('34', [2, 4])]
</snippet></ROW><ROW><id>16253351</id><snippet>tokenize</snippet></ROW><ROW><id>16253351</id><snippet>for cat, text in tuples:
    tokenized = tokenize(text)
    # now do whatever you want with the category and the tokenized text
</snippet></ROW><ROW><id>16253463</id><snippet>import pycurl

c = pycurl.Curl()
c.setopt(c.URL, 'http://myfavpizzaplace.com/order')
c.setopt(c.POSTFIELDS, 'pizza=Quattro+Stagioni&amp;extra=cheese')
c.setopt(c.VERBOSE, True)
c.perform()
</snippet></ROW><ROW><id>16253582</id><snippet>data = {}
for m1 in Model1.objects.all():
    list = []
    model2s = m1.model2_set.filter(user=request.user)
    if model2s:
        list.append(calculated field)
        list.append(Another calculated field)    
        data[m1.name] = list
</snippet></ROW><ROW><id>16253649</id><snippet>for i,row in enumerate(nodes):  #same X, different Y
</snippet></ROW><ROW><id>16253649</id><snippet>nodes</snippet></ROW><ROW><id>16253649</id><snippet>nLedgers</snippet></ROW><ROW><id>16253649</id><snippet>&gt;&gt;&gt; sorted(set(x for i, x, y, z in nLedgers))
[-1000.0, 0.0, 1000.0]
&gt;&gt;&gt; sorted(set(x for i, x, y, z in nodes))
[-1000.0, -900.0, -800.0, -700.0, -600.0, -500.0, -400.0, -300.0, -200.0, -100.0, 0.0, 100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0]
</snippet></ROW><ROW><id>16253649</id><snippet>&gt;&gt;&gt; {k[0] for k in first_d2_saved}
set([0.0, 1000.0, -1000.0])
</snippet></ROW><ROW><id>16253649</id><snippet>y_levels</snippet></ROW><ROW><id>16253649</id><snippet>y_levels=[item[1] for item in dic2[(x,z)]]
</snippet></ROW><ROW><id>16253649</id><snippet>(x, z)</snippet></ROW><ROW><id>16253649</id><snippet>x</snippet></ROW><ROW><id>16253649</id><snippet>nodes</snippet></ROW><ROW><id>16253649</id><snippet>nLedgers</snippet></ROW><ROW><id>16253649</id><snippet>dic2</snippet></ROW><ROW><id>16253649</id><snippet>key[0]</snippet></ROW><ROW><id>16253649</id><snippet>&gt;&gt;&gt; sorted({(k[0], tuple(v)) for k,v in dic2.items() if k[0] not in {-1000,0,1000}})
[(-900.0, ()), (-800.0, ()), (-700.0, ()), (-600.0, ()), (-500.0, ()), (-400.0, ()), (-300.0, ()), (-200.0, ()), (-100.0, ()), (100.0, ()), (200.0, ()), (300.0, ()), (400.0, ()), (500.0, ()), (600.0, ()), (700.0, ()), (800.0, ()), (900.0, ())]
</snippet></ROW><ROW><id>16253866</id><snippet>In [2]: datetime.datetime.fromtimestamp(1367071200)
Out[2]: datetime.datetime(2013, 4, 27, 18, 0)

In [4]: datetime.datetime.fromtimestamp(int('t1367071200'[1:]))
Out[4]: datetime.datetime(2013, 4, 27, 18, 0)
</snippet></ROW><ROW><id>16253985</id><snippet>In [15]: with open("abc") as f:
   ....:     for line in f:
   ....:         spl=line.split()
   ....:         if '18' in spl:
   ....:             print line
   ....:             break
   ....:             
18  :   mp4 [360x640]
</snippet></ROW><ROW><id>16253985</id><snippet>In [16]: strs="""Available formats:
   ....:     37  :   mp4 [1080x1920]
   ....:     46  :   webm    [1080x1920]
   ....:     22  :   mp4 [720x1280]
   ....:     45  :   webm    [720x1280]
   ....:     35  :   flv [480x854]
   ....:     44  :   webm    [480x854]
   ....:     34  :   flv [360x640]
   ....:     18  :   mp4 [360x640]
   ....:     43  :   webm    [360x640]
   ....:     5   :   flv [240x400]
   ....:     17  :   mp4 [144x176]"""
   ....:     

In [17]: for line in strs.splitlines():
   ....:     spl=line.split()
   ....:     if '18' in  spl:
   ....:         print line
   ....:         break
   ....:         
    18  :   mp4 [360x640]
</snippet></ROW><ROW><id>16254270</id><snippet>Counter</snippet></ROW><ROW><id>16254270</id><snippet>collections</snippet></ROW><ROW><id>16254270</id><snippet>from collections import Counter
c = Counter()
for cat, text2 in posts:
    c.update(word for word in wordpunct_tokenize(text2) if word in top)
</snippet></ROW><ROW><id>16254270</id><snippet>c</snippet></ROW><ROW><id>16254316</id><snippet>list</snippet></ROW><ROW><id>16254316</id><snippet>list_</snippet></ROW><ROW><id>16254316</id><snippet>class Number():
    def __init__(self):
        self.list_ = []
</snippet></ROW><ROW><id>16254408</id><snippet>for a in soup.findAll('a'):
    if a.has_attr('data'):
        print(a['data'])
</snippet></ROW><ROW><id>16254681</id><snippet>pygame.QUIT</snippet></ROW><ROW><id>16254681</id><snippet>()</snippet></ROW><ROW><id>16254863</id><snippet>@crossdomain(origin='myserver.com', headers='Content-Type')
</snippet></ROW><ROW><id>16254863</id><snippet>@crossdomain(origin='http://myserver.com', headers='Content-Type')
</snippet></ROW><ROW><id>16254863</id><snippet>@crossdomain(origin=['http://myserver.com', 'http://myserver2.com'], headers='Content-Type')
</snippet></ROW><ROW><id>16254873</id><snippet>Foo</snippet></ROW><ROW><id>16254873</id><snippet>__init__.py</snippet></ROW><ROW><id>16254873</id><snippet>from ..src.output import *
</snippet></ROW><ROW><id>16254873</id><snippet>bar.py</snippet></ROW><ROW><id>16254873</id><snippet>modules</snippet></ROW><ROW><id>16254873</id><snippet>Foo</snippet></ROW><ROW><id>16254873</id><snippet>Foo</snippet></ROW><ROW><id>16255489</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>16255489</id><snippet>In [8]: strs='[24, 72, 95, 100, 59, 80, 87]\n'

In [9]: from ast import literal_eval

In [10]: literal_eval(strs)
Out[10]: [24, 72, 95, 100, 59, 80, 87]
</snippet></ROW><ROW><id>16255489</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>16255489</id><snippet>In [11]: literal_eval?
Type:       function
String Form:&lt;function literal_eval at 0xb6eaf6bc&gt;
File:       /usr/lib/python2.7/ast.py
Definition: literal_eval(node_or_string)
Docstring:
Safely evaluate an expression node or a string containing a Python
expression.  The string or node provided may only consist of the following
Python literal structures: strings, numbers, tuples, lists, dicts, booleans,
and None.
</snippet></ROW><ROW><id>16255508</id><snippet>connect</snippet></ROW><ROW><id>16255508</id><snippet>textChanged</snippet></ROW><ROW><id>16255508</id><snippet>force_selection</snippet></ROW><ROW><id>16255508</id><snippet>connect</snippet></ROW><ROW><id>16255508</id><snippet>force_selection</snippet></ROW><ROW><id>16255508</id><snippet>currentIndex</snippet></ROW><ROW><id>16255508</id><snippet>red2</snippet></ROW><ROW><id>16255508</id><snippet>2</snippet></ROW><ROW><id>16255508</id><snippet>Red1</snippet></ROW><ROW><id>16255508</id><snippet>Red2</snippet></ROW><ROW><id>16255508</id><snippet>currentIndex</snippet></ROW><ROW><id>16255508</id><snippet>setCurrentIndex</snippet></ROW><ROW><id>16255508</id><snippet>select</snippet></ROW><ROW><id>16255508</id><snippet>selectedRows</snippet></ROW><ROW><id>16255508</id><snippet>selectedIndexes</snippet></ROW><ROW><id>16255550</id><snippet>&gt;&gt;&gt; bin(-5)
'-0b101'
&gt;&gt;&gt; bin(-5 % (1&lt;&lt;32))
'0b11111111111111111111111111111011'
</snippet></ROW><ROW><id>16255757</id><snippet>wx.lib.sheet.CSheet</snippet></ROW><ROW><id>16255757</id><snippet>wx.grid.Grid</snippet></ROW><ROW><id>16255757</id><snippet>SetColLabelValue</snippet></ROW><ROW><id>16255757</id><snippet>column_names = ['Name', 'Surname', 'Age', 'DOB']
sheet = CSheet(panel)
for index, name in enumerate(column_names):
    sheet.SetColLabelValue(index, name)
sizer.Add(sheet)
</snippet></ROW><ROW><id>16255757</id><snippet>SetRowLabelValue</snippet></ROW><ROW><id>16256066</id><snippet>a, b = b, a + b
</snippet></ROW><ROW><id>16256066</id><snippet>b, a + b
</snippet></ROW><ROW><id>16256066</id><snippet>a, b</snippet></ROW><ROW><id>16256066</id><snippet>a = b 
# a is now re-bound and potentially has changed value
</snippet></ROW><ROW><id>16256066</id><snippet>b = a + b
# the expression a + b uses the modified value of a
</snippet></ROW><ROW><id>16256066</id><snippet>a</snippet></ROW><ROW><id>16256066</id><snippet>a, b = 0, 1</snippet></ROW><ROW><id>16256066</id><snippet># a == 0
# b == 1
a, b = b, a + b
</snippet></ROW><ROW><id>16256066</id><snippet>b, a + b</snippet></ROW><ROW><id>16256066</id><snippet>1, 1</snippet></ROW><ROW><id>16256066</id><snippet>a, b = 1, 1
</snippet></ROW><ROW><id>16256066</id><snippet>a = b 
# same as a = 1
b = a + b
# same as b = 1 + 1
</snippet></ROW><ROW><id>16256066</id><snippet>a1 = b
b1 = a + b
# now we can assign to a and b
a = a1
b = b1
</snippet></ROW><ROW><id>16256066</id><snippet>temp = a
a = b
b = temp
</snippet></ROW><ROW><id>16256066</id><snippet>a, b = b, a
</snippet></ROW><ROW><id>16256079</id><snippet>__init__.py</snippet></ROW><ROW><id>16256079</id><snippet>from numpy import *
from module1 import *
from module2 import *
</snippet></ROW><ROW><id>16256079</id><snippet>from package import *</snippet></ROW><ROW><id>16256079</id><snippet>__init__.py</snippet></ROW><ROW><id>16256079</id><snippet>import numpy as np
import module1 as m1
import module2 as m2
</snippet></ROW><ROW><id>16256079</id><snippet>np.add</snippet></ROW><ROW><id>16256107</id><snippet>inWaiting()</snippet></ROW><ROW><id>16256330</id><snippet>def depchange(change):
    depchange_status=''
    if change == "23456":
        depchange="33456"
        depchange_status = 'NEW'
    if change == "33456":
        depchange=""
        depchange_status = 'COMPLETED'
    return (depchange,depchange_status)


def main ():
    master_change="23456"
    dep={}
    while True:
        dep_change,depchange_status=depchange(master_change)
        dep[master_change]=[dep_change]
        master_change = dep_change
        if depchange_status != 'NEW':
            break
    print dep

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>16256430</id><snippet>ax.legend(loc='best')</snippet></ROW><ROW><id>16256430</id><snippet>import matplotlib.pyplot as plt
import numpy as np
pi = np.pi
sin = np.sin
t = np.linspace(0.0, 2 * pi, 50)
markers = ['+', '*', ',', ] + [r'$\lambda$']
phases = [0, 0.5]
fig, ax = plt.subplots(len(phases))
for axnum, phase in enumerate(phases):
    for i, marker in enumerate(markers, 1):
        ax[axnum].plot(t, i*sin(2*t + phase*pi), marker=marker,
                   label='$i,\phi = {i},{p}$'.format(i=i, p=phase))
    ax[axnum].legend(loc='best', numpoints=1)
plt.show()
</snippet></ROW><ROW><id>16256560</id><snippet>just_words</snippet></ROW><ROW><id>16256560</id><snippet>files</snippet></ROW><ROW><id>16256560</id><snippet>files = []
for fpath in glob.glob("*.txt"):
    with open(fpath) as f:
        just_words = re.sub("[^a-zA-Z'-]"," ",f.read())
        files.append((fpath, just_words))

with open("mastertext.csv", "w") as f:
    for fname, just_words in files:
        print &gt;&gt; f , "%s,%s"%(fname,just_words)
</snippet></ROW><ROW><id>16256762</id><snippet>def lookup(x, y, l):
    for xx in xrange(x-l, x+l+1):
        for yy in xrange(y-l, y+l+1):
            yield (xx, yy)
list(lookup(50, 50, 10))
</snippet></ROW><ROW><id>16256819</id><snippet>a = BitVec('a', 8)
b = BitVec('b', 4)
c = BitVec('c', 4)
d = Concat(b, c)

prove(ForAll(a, Exists(b, a == d)))
</snippet></ROW><ROW><id>16256861</id><snippet>clothing = {
    (True, True): "shorts",
    (True, False): "jeans",
    (False, False): "jacket"
}
</snippet></ROW><ROW><id>16257038</id><snippet>chosenCave</snippet></ROW><ROW><id>16257038</id><snippet>str(friendlyCave)</snippet></ROW><ROW><id>16257038</id><snippet>import random</snippet></ROW><ROW><id>16257038</id><snippet>import time</snippet></ROW><ROW><id>16257038</id><snippet>sleep for 3 seconds</snippet></ROW><ROW><id>16257038</id><snippet>random</snippet></ROW><ROW><id>16257038</id><snippet>time</snippet></ROW><ROW><id>16257038</id><snippet>displayIntro</snippet></ROW><ROW><id>16257038</id><snippet>chooseCave</snippet></ROW><ROW><id>16257038</id><snippet>checkCave</snippet></ROW><ROW><id>16257038</id><snippet>friendlyCave</snippet></ROW><ROW><id>16257038</id><snippet>potatocave</snippet></ROW><ROW><id>16257038</id><snippet>chosenCave</snippet></ROW><ROW><id>16257038</id><snippet>str(friendlyCave)</snippet></ROW><ROW><id>16257038</id><snippet>chosenCave</snippet></ROW><ROW><id>16257038</id><snippet>checkCave</snippet></ROW><ROW><id>16257038</id><snippet>def checkCave(chosenCave):
    print('You approach the cave...')
    time.sleep(2)
    print('It is dark and spooky...')
    time.sleep(2)
    print('A large dragon jumps out in front of you! He opens his jaws and...')
    print()
    time.sleep(2)

    friendlyCave = random.randint(1, 3)
    potatocave = random.randint(1, 3)
    while potatocave == friendlyCave:
        potatocave = random.randint(1, 3)
    if chosenCave == str(friendlyCave):
        print('Gives you his treasure!')
    elif chosenCave == str(potatocave):
        print ('Millions of potatoes rain from the sky.')
    else:
        print('Gobbles you down in one bite!')
</snippet></ROW><ROW><id>16257122</id><snippet>LOAD DATA LOCAL INFILE</snippet></ROW><ROW><id>16257122</id><snippet>LOAD DATA INFILE 'data.txt' INTO TABLE tbl_name
  FIELDS TERMINATED BY ',' ENCLOSED BY '"'
  LINES TERMINATED BY '\r\n'
  IGNORE 1 LINES;
</snippet></ROW><ROW><id>16257122</id><snippet>mysql_ping()</snippet></ROW><ROW><id>16257122</id><snippet>queue</snippet></ROW><ROW><id>16257122</id><snippet># Prepare queue and end signaling handler
q = queue.Queue()
done = threading.Event()

# Function that fetches items from q and puts them into db after
# certain amount is reached
def store_db():
    items=[]

    # Until we set done
    while not done.is_set():
        try:
            # We may have 500 records and thread be done... prevent deadlock
            items.append(q.get(timeout=5))
            if len(items) &gt; 1000:
                insert_into(items)
                items = []
            q.task_done()
         # If you wait longer then 5 seconds &lt; exception
         except queue.Empty: pass

    if items:
        insert_into(items)

# Fetch all data in a loop
def continous_reading():
    # Fetch row
    q.put(row)

# Start storer thread
t = threading.Thread(target=store_db)
t.daemon = True
t.start()

continous_reading()
q.join() # Wait for all task to be processed
done.set() # Signal store_db that it can terminate
t.join() # to make sure the items buffer is stored into the db
</snippet></ROW><ROW><id>16257249</id><snippet>ctypes</snippet></ROW><ROW><id>16257249</id><snippet>c_char_p('c1')</snippet></ROW><ROW><id>16257249</id><snippet>'c1'</snippet></ROW><ROW><id>16257249</id><snippet>#include "lib2.h"
extern "C" {
__declspec(dllexport) lib2* lib2_new() { return new lib2; }
__declspec(dllexport) void lib2_delete(lib2* p) { delete p; }
__declspec(dllexport) void lib2_func(lib2* p, char* c1, char* c2, double d) {
    p-&gt;func(c1,c2,d);
}
}
</snippet></ROW><ROW><id>16257249</id><snippet>#ifdef LIB2_EXPORTS
#   define LIB2_API __declspec(dllexport)
#else
#   define LIB2_API __declspec(dllimport)
#endif

class LIB2_API lib2
{
public:
    void func(char * c1, char * c2, double d);
};
</snippet></ROW><ROW><id>16257249</id><snippet>#include &lt;stdio.h&gt;
#include "lib2.h"

void lib2::func(char * c1, char * c2, double d)
{
    printf("%s %s %f\n",c1,c2,d);
}
</snippet></ROW><ROW><id>16257249</id><snippet>all: lib1.dll lib2.dll

lib1.dll: lib1.cpp lib2.dll
    cl /nologo /LD /W4 lib1.cpp -link lib2.lib

lib2.dll: lib2.cpp lib2.h
    cl /nologo /LD /W4 /D LIB2_EXPORTS lib2.cpp
</snippet></ROW><ROW><id>16257249</id><snippet>#!python3
from ctypes import *

class lib2:

    lib1 = CDLL('lib1')
    # It's best to declare all arguments and types, so Python can typecheck.
    lib1.lib2_new.argtypes = []
    lib1.lib2_new.restype = c_void_p # Can use this for an opaque pointer.
    lib1.lib2_func.argtypes = [c_void_p,c_char_p,c_char_p,c_double]
    lib1.lib2_func.restype = None
    lib1.lib2_delete.argtypes = [c_void_p]
    lib1.lib2_delete.restype = None

    def __init__(self):
        self.obj = self.lib1.lib2_new()

    def __del__(self):
        self.lib1.lib2_delete(self.obj)

    def func(self,c1,c2,d):
        self.lib1.lib2_func(self.obj,c1,c2,d)

o = lib2()
o.func(b'abc',b'123',1.2) # Note byte strings
</snippet></ROW><ROW><id>16257249</id><snippet>C:\temp&gt;nmake

Microsoft (R) Program Maintenance Utility Version 11.00.50727.1
Copyright (C) Microsoft Corporation.  All rights reserved.

        cl /nologo /LD /W4 /D LIB2_EXPORTS lib2.cpp
lib2.cpp
   Creating library lib2.lib and object lib2.exp
        cl /nologo /LD /W4 lib1.cpp -link lib2.lib
lib1.cpp
   Creating library lib1.lib and object lib1.exp

C:\temp&gt;test.py
abc 123 1.200000
</snippet></ROW><ROW><id>16257249</id><snippet>boost::Python</snippet></ROW><ROW><id>16257249</id><snippet>Cython</snippet></ROW><ROW><id>16257249</id><snippet>SWIG</snippet></ROW><ROW><id>16257249</id><snippet>all: _lib2.pyd lib2.dll

PYTHON_ROOT = c:\python33

lib2_wrap.cxx: lib2.i
    @echo Generating wrapper...
    swig -c++ -python lib2.i

_lib2.pyd: lib2_wrap.cxx lib2.dll
    cl /nologo /EHsc /MD /LD /W4 /I$(PYTHON_ROOT)\include lib2_wrap.cxx -link lib2.lib /LIBPATH:$(PYTHON_ROOT)\libs /OUT:_lib2.pyd

lib2.dll: lib2.cpp lib2.h
    cl /nologo /LD /W4 /D LIB2_EXPORTS lib2.cpp
</snippet></ROW><ROW><id>16257249</id><snippet>%module lib2

%begin %{
#pragma warning(disable:4127 4211 4706)
%}

%{
#include "lib2.h"
%}

%include &lt;windows.i&gt;
%include "lib2.h"
</snippet></ROW><ROW><id>16257249</id><snippet>#!python3
import lib2
o = lib2.lib2()
o.func('abc','123',1.2) #Note SWIG encodes Unicode strings by default
</snippet></ROW><ROW><id>16257249</id><snippet>C:\temp&gt;nmake /las
Generating wrapper...
lib2.cpp
   Creating library lib2.lib and object lib2.exp
lib2_wrap.cxx
   Creating library lib2_wrap.lib and object lib2_wrap.exp    

C:\temp&gt;test
abc 123 1.200000
</snippet></ROW><ROW><id>16257260</id><snippet>&gt;&gt;&gt; keys = {'red', 'green', 'blue', 'yellow', 'orange', 'pink', 'black'}
&gt;&gt;&gt; d = dict.fromkeys(keys)  # dict is pre-sized to 32 empty slots
</snippet></ROW><ROW><id>16257260</id><snippet>dict.fromkeys([11100, 22200, 44400, 33300])</snippet></ROW><ROW><id>16257260</id><snippet>dict.fromkeys([33300, 22200, 11100, 44400])</snippet></ROW><ROW><id>16257260</id><snippet> d = dict.fromkeys(['red', 'green', 'blue', 'yellow', 'orange'])
 d.update(dict(d))     # This makes room for additional keys
                       # and makes the set collision-free.
</snippet></ROW><ROW><id>16257408</id><snippet>import urllib
import re
page = urllib.urlopen("http://www.samair.ru/proxy/ip-address-01.htm").read()
print re.findall('\d+\.\d+\.\d+\.\d+', page)
</snippet></ROW><ROW><id>16257408</id><snippet>['056.249.66.50', '100.44.124.8', '103.31.250.115', ...
</snippet></ROW><ROW><id>16257441</id><snippet>import traceback
try:
    raise Exception('what')
except Exception:
    print(traceback.format_exc())
</snippet></ROW><ROW><id>16257698</id><snippet>get()</snippet></ROW><ROW><id>16257698</id><snippet>filter()</snippet></ROW><ROW><id>16257698</id><snippet>L</snippet></ROW><ROW><id>16257698</id><snippet>App.objects.get(id=1)</snippet></ROW><ROW><id>16257698</id><snippet>App.objects.filter(downloads__gte=100)</snippet></ROW><ROW><id>16257698</id><snippet>In [12]: a = long(12321312)
In [13]: a
Out[13]: 12321312L
</snippet></ROW><ROW><id>16257698</id><snippet>In [14]: a &gt; 123
Out[14]: True
</snippet></ROW><ROW><id>16257727</id><snippet>&gt;&gt;&gt; L = [2,4,5,6,2,1,6,6,3,2,4,5,3,4,5]
&gt;&gt;&gt; s = [2,4,5]
</snippet></ROW><ROW><id>16257727</id><snippet>&gt;&gt;&gt; sum(1 for i in range(len(L)) if L[i:i+len(s)]==s)
2
</snippet></ROW><ROW><id>16257727</id><snippet>True</snippet></ROW><ROW><id>16257727</id><snippet>1</snippet></ROW><ROW><id>16257727</id><snippet>&gt;&gt;&gt; sum(L[i:i+len(s)]==s for i in range(len(L)))
2
</snippet></ROW><ROW><id>16257738</id><snippet>paramiko</snippet></ROW><ROW><id>16257738</id><snippet>6</snippet></ROW><ROW><id>16257738</id><snippet>paramiko</snippet></ROW><ROW><id>16257743</id><snippet>from StringIO import StringIO
from time import time
import ast

def zip_test():
    # Using StringIO to illustrate using something file-like.                   
    for row in StringIO('a 1.0 2 True\n' * 32):
        (a, b, c, d) = [f(v) for (f, v) in zip(
                (str, float, int, lambda v: v == 'True'), row.split())]

def ast_test():
    for row in StringIO('"a" 1.0 2 True\n' * 32):
        (a, b, c, d) = [ast.literal_eval(s) for s in row.split()]

for f in (zip_test, ast_test):
    start = time()
    for i in range(100):
        f()
    print '%s: %s' % (f.func_name, time() - start)


 # [ ** Results ** ]
 #
 # zip_test: 0.0131301879883
 # ast_test: 0.0835828781128
</snippet></ROW><ROW><id>16257769</id><snippet>abortretryignore</snippet></ROW><ROW><id>16257769</id><snippet>ok</snippet></ROW><ROW><id>16257769</id><snippet>okcancel</snippet></ROW><ROW><id>16257769</id><snippet>retrycancel</snippet></ROW><ROW><id>16257769</id><snippet>yesno</snippet></ROW><ROW><id>16257769</id><snippet>yesnocancel</snippet></ROW><ROW><id>16257791</id><snippet>goblin = Creature(randint(1,2),randint(1,2),(randint(1,2),"Goblin"))
</snippet></ROW><ROW><id>16257791</id><snippet>goblin = Creature(randint(1,2),randint(1,2),randint(1,2),"Goblin")
</snippet></ROW><ROW><id>16257791</id><snippet>self</snippet></ROW><ROW><id>16257822</id><snippet>import random
from scipy.linalg import toeplitz
import numpy as np

def is_invertible_F2(a):
    """
    Determine invertibility by Gaussian elimination
    """
    a = np.array(a, dtype=np.bool_)
    n = a.shape[0]
    for i in range(n):
        pivots = np.where(a[i:,i])[0]
        if len(pivots) == 0:
            return False

        # swap pivot
        piv = i + pivots[0]
        row = a[piv,i:].copy()
        a[piv,i:] = a[i,i:]
        a[i,i:] = row

        # eliminate
        a[i+1:,i:] -= a[i+1:,i,None]*row[None,:]

    return True

n = 10
column = [random.choice([0,1]) for x in xrange(n)]
row = [column[0]]+[random.choice([0,1]) for x in xrange(n-1)]
matrix = toeplitz(column, row)

print(is_invertible_F2(matrix))
print(int(np.round(np.linalg.det(matrix))) % 2)
</snippet></ROW><ROW><id>16257822</id><snippet>np.bool_</snippet></ROW><ROW><id>16257822</id><snippet>+</snippet></ROW><ROW><id>16257822</id><snippet>-</snippet></ROW><ROW><id>16257822</id><snippet>-</snippet></ROW><ROW><id>16257822</id><snippet>+</snippet></ROW><ROW><id>16257822</id><snippet>&gt;&gt;&gt; x = np.array([0, 1], dtype=np.bool_)
&gt;&gt;&gt; x[:,None] - x[None,:]
array([[False,  True],
       [ True, False]], dtype=bool)
&gt;&gt;&gt; x[:,None] * x[None,:]
array([[False, False],
       [False,  True]], dtype=bool)
</snippet></ROW><ROW><id>16257841</id><snippet>%x</snippet></ROW><ROW><id>16257943</id><snippet>stalk</snippet></ROW><ROW><id>16257943</id><snippet>django.db</snippet></ROW><ROW><id>16257943</id><snippet>django.db</snippet></ROW><ROW><id>16257943</id><snippet>django</snippet></ROW><ROW><id>16257943</id><snippet>propagate</snippet></ROW><ROW><id>16257943</id><snippet>False</snippet></ROW><ROW><id>16257943</id><snippet>django.db</snippet></ROW><ROW><id>16257943</id><snippet>propagate</snippet></ROW><ROW><id>16257943</id><snippet>False</snippet></ROW><ROW><id>16257943</id><snippet>django.db</snippet></ROW><ROW><id>16257943</id><snippet>sqlfile</snippet></ROW><ROW><id>16257961</id><snippet>enpkg -s pyobc</snippet></ROW><ROW><id>16257963</id><snippet>VIRTUAL_ENV_DISABLE_PROMPT</snippet></ROW><ROW><id>16257963</id><snippet>1</snippet></ROW><ROW><id>16257963</id><snippet>bin/activate</snippet></ROW><ROW><id>16257963</id><snippet>bin/activate</snippet></ROW><ROW><id>16257963</id><snippet>if [ -z "$VIRTUAL_ENV_DISABLE_PROMPT" ] ; then
    # ...
fi
</snippet></ROW><ROW><id>16258079</id><snippet>Appointment.objects.filter(patient__contact__uid=1234)
</snippet></ROW><ROW><id>16258215</id><snippet>self.angle1, self.angle2, self.angle3 = angle
</snippet></ROW><ROW><id>16258215</id><snippet>self.angle1 = self.angle2 = self.angle3 = self.angle
</snippet></ROW><ROW><id>16258215</id><snippet>angle</snippet></ROW><ROW><id>16258215</id><snippet>angle</snippet></ROW><ROW><id>16258215</id><snippet>self</snippet></ROW><ROW><id>16258215</id><snippet>Equilateral.angle</snippet></ROW><ROW><id>16258215</id><snippet>self.angleN</snippet></ROW><ROW><id>16258215</id><snippet>a, b, c = 1, 2, 3
</snippet></ROW><ROW><id>16258325</id><snippet>application</snippet></ROW><ROW><id>16258325</id><snippet>application.py</snippet></ROW><ROW><id>16258325</id><snippet>application = bottle.default_app()
</snippet></ROW><ROW><id>16258325</id><snippet>run</snippet></ROW><ROW><id>16258391</id><snippet>C:\web\xxx&gt;C:\Python27\python c:\path\to\virtualenv.py --no-site-packages venv
</snippet></ROW><ROW><id>16258421</id><snippet># creates 201 values evenly spaced from 0 to 2e6, inclusive
f = np.linspace(0, 2e6, 201)
w = 2 * np.pi * f
# now calculate the magnitude for all 201 values at once
magnitude = (w * L - 1 / (w * C)) / np.sqrt(R**2 + (w * L - 1 / (w * C))**2)
# now you can plot magnitude vs. frequency
plt.plot(f / 1e6, magnitude, '-k')
</snippet></ROW><ROW><id>16258702</id><snippet>open("myfile.txt", "r").read()</snippet></ROW><ROW><id>16258702</id><snippet>"100110000..."</snippet></ROW><ROW><id>16258702</id><snippet>with open("myfile.txt", "r") as f:
    txt = f.read()
b = "".join(chr(int(txt[i*8:(i+1)*8],2)) for i in range(len(txt) / 8))
with open("myfile.png", "wb") as f:
    f.write(b)
</snippet></ROW><ROW><id>16258702</id><snippet>unhexlify</snippet></ROW><ROW><id>16258702</id><snippet>10011000</snippet></ROW><ROW><id>16258702</id><snippet>"\x98"</snippet></ROW><ROW><id>16258702</id><snippet>unhexlify</snippet></ROW><ROW><id>16258702</id><snippet>10</snippet></ROW><ROW><id>16258702</id><snippet>01</snippet></ROW><ROW><id>16258702</id><snippet>10</snippet></ROW><ROW><id>16258702</id><snippet>00</snippet></ROW><ROW><id>16258702</id><snippet>'\x10\x01\x10\x00'</snippet></ROW><ROW><id>16259181</id><snippet>sys.exit()</snippet></ROW><ROW><id>16259181</id><snippet>os._exit()</snippet></ROW><ROW><id>16259181</id><snippet>except Exception:</snippet></ROW><ROW><id>16259181</id><snippet>SystemExit</snippet></ROW><ROW><id>16259181</id><snippet>Exception</snippet></ROW><ROW><id>16259181</id><snippet>except:</snippet></ROW><ROW><id>16259181</id><snippet>except Exception:</snippet></ROW><ROW><id>16259181</id><snippet>except:</snippet></ROW><ROW><id>16259181</id><snippet>except</snippet></ROW><ROW><id>16259181</id><snippet>SystemExit</snippet></ROW><ROW><id>16259181</id><snippet>finally</snippet></ROW><ROW><id>16259181</id><snippet>sys.exit()</snippet></ROW><ROW><id>16259181</id><snippet>except</snippet></ROW><ROW><id>16259181</id><snippet>SystemExit</snippet></ROW><ROW><id>16259242</id><snippet>{% for form in formset %}
    {{form.title.errors}}
    {{form.title.label}}
    {{form.title}}
{% endfor %}
</snippet></ROW><ROW><id>16259484</id><snippet>Timesheet</snippet></ROW><ROW><id>16259484</id><snippet>self</snippet></ROW><ROW><id>16259484</id><snippet>fhqwhgads</snippet></ROW><ROW><id>16259484</id><snippet>self</snippet></ROW><ROW><id>16259484</id><snippet>self</snippet></ROW><ROW><id>16259484</id><snippet>Timesheet</snippet></ROW><ROW><id>16259484</id><snippet>Timesheet.day(...)</snippet></ROW><ROW><id>16259484</id><snippet>Timesheet().day(...)</snippet></ROW><ROW><id>16259484</id><snippet>Timesheet</snippet></ROW><ROW><id>16259484</id><snippet>Timesheet()</snippet></ROW><ROW><id>16259484</id><snippet>day()</snippet></ROW><ROW><id>16259484</id><snippet>day()</snippet></ROW><ROW><id>16259484</id><snippet>day()</snippet></ROW><ROW><id>16259484</id><snippet>day()</snippet></ROW><ROW><id>16259484</id><snippet>self</snippet></ROW><ROW><id>16259484</id><snippet>day()</snippet></ROW><ROW><id>16259484</id><snippet>Timesheet.day(...)</snippet></ROW><ROW><id>16259484</id><snippet>my_timesheet = Timesheet()
my_timesheet.day(...)
# Now do something with the timesheet: calculate total pay, print it out, etc.
my_timesheet.calculate_total_pay()  # Made up example
my_timesheet.print_to_screen()  # Made up example
</snippet></ROW><ROW><id>16259484</id><snippet>Timesheet.calculate_total_pay()</snippet></ROW><ROW><id>16259484</id><snippet>calculate_total_pay()</snippet></ROW><ROW><id>16259484</id><snippet>self</snippet></ROW><ROW><id>16259484</id><snippet>Timesheet.some_method()</snippet></ROW><ROW><id>16259602</id><snippet>a</snippet></ROW><ROW><id>16259602</id><snippet>&gt;&gt;&gt; a = (1, 2)
&gt;&gt;&gt; a[0] = 3
</snippet></ROW><ROW><id>16259602</id><snippet>TypeError: 'tuple' object does not support item assignment</snippet></ROW><ROW><id>16259602</id><snippet>&gt;&gt;&gt; a = [1, 2]
&gt;&gt;&gt; a[0] = 3
</snippet></ROW><ROW><id>16259602</id><snippet>a = a + (3, 4)</snippet></ROW><ROW><id>16259602</id><snippet>a</snippet></ROW><ROW><id>16259602</id><snippet>string</snippet></ROW><ROW><id>16259602</id><snippet>&gt;&gt;&gt; name = "Foo"
&gt;&gt;&gt; name[0] ='o' 
</snippet></ROW><ROW><id>16259602</id><snippet>&gt;&gt;&gt; name = name + " Bar"
&gt;&gt;&gt; name
'Foo Bar'
</snippet></ROW><ROW><id>16259644</id><snippet>&lt;textarea /&gt;</snippet></ROW><ROW><id>16259644</id><snippet>&lt;input type="text" /&gt;</snippet></ROW><ROW><id>16259644</id><snippet>&lt;textarea&gt;
    Line 1
    Line 2
&lt;/textarea&gt;
</snippet></ROW><ROW><id>16259644</id><snippet>&lt;textarea/&gt;</snippet></ROW><ROW><id>16259654</id><snippet>lxml</snippet></ROW><ROW><id>16259857</id><snippet>Rect</snippet></ROW><ROW><id>16259857</id><snippet>Vector2D</snippet></ROW><ROW><id>16259857</id><snippet>class Vector2D:
    def __init__(self, x, y, vx, vy):
        self.x = x
        self.y = y
        self.vx = vx
        self.vy = vy

    def update(self):
        self.x += self.vx
        self.y += self.vy

    def copyto(self, rect):
        rect.x = int(round(self.x,0)) 
        rect.y = int(round(self.y,0))


speed = Vector2D(100, 100, .5, .5)
</snippet></ROW><ROW><id>16259857</id><snippet>speed.update()
speed.copyto(rectangle)
</snippet></ROW><ROW><id>16259857</id><snippet>rectangle.left += speed.x
rectangle.top += speed.y
</snippet></ROW><ROW><id>16259889</id><snippet>ARCHIVE_PATH = "path/to/archive.tar"

INNER_PATHS = [
    "nested/within/archive/one.tar",
    "nested/within/archive/two.tar",
    # Arbitary number of these
]

def list_inner_contents(archive_path, inner_paths):
    def rec(tf, rest_paths):
        if not rest_paths:
            return tf.getnames()

        with TarFile(fileobj=tf.extractfile(rest_paths[0])) as tf2:
            return rec(tf2, rest_paths[1:])

    with TarFile(archive_path) as tf:
        try:
            return rec(tf, inner_paths)
        except RuntimeError:
            # We come here in case the inner_paths list is too long
            # and we go too deeply in the recursion
            return None
</snippet></ROW><ROW><id>16259902</id><snippet>[ { "business_id" : "9yKzy9PApeiPPOUJEtnvkg",
    "date" : "2011-01-26",
    "review_id" : "fWKvX83p0-ka4JS3dc6E5A",
    "stars" : "5",
    "text" : "My wife took me here on my birthday for breakfast and it was excellent.  It looked like the place fills up pretty quickly so the earlier you get here the better.\n\nDo yourself a favor and get their Bloody Mary. It came with 2 pieces of their griddled bread with was amazing and it absolutely made the meal complete.  It was the best \"toast\" I've ever had.\n\nAnyway, I can't wait to go back!",
    "type" : "review",
    "user_id" : "rLtl8ZkDX5vH5nAx9C3q5Q",
    "votes" : { "cool" : "2",
        "funny" : "0",
        "useful" : "5"
      }
  },
  { "business_id" : "ZRJwVLyzEJq1VAihDhYiow",
    "date" : "2011-07-27",
    "review_id" : "IjZ33sJrzXqU-0X6U8NwyA",
    "stars" : "5",
    "text" : "I have no idea why some people give bad reviews about this place. It goes to show you, you can please everyone. They are probably griping about something that their own fault... but they said we'll be seated when the girl comes back from seating someone else. So, everything was great and not like these bad reviewers. That goes to show you that  you have to try these things yourself because all these bad reviewers have some serious issues.",
    "type" : "review",
    "user_id" : "0a2KyEL0d3Yb1V6aivbIuQ",
    "votes" : { "cool" : "0",
        "funny" : "0",
        "useful" : "0"
      }
  }
]
</snippet></ROW><ROW><id>16259902</id><snippet>,</snippet></ROW><ROW><id>16259917</id><snippet>text2=corpus
text4=nltk.word_tokenize(text2)
tags=nltk.pos_tag(text4)
counter2={}
for a,b in tags:
    counter2[b] = counter2.get(b,0)+1
list5=sorted([(freq,word) for word, freq in counter2.items()], reverse=True)[:3]
print [word for freq,word in list5]
</snippet></ROW><ROW><id>16259944</id><snippet>list</snippet></ROW><ROW><id>16259944</id><snippet>listBig = [listSmall, listSmall, listSmall]
</snippet></ROW><ROW><id>16259944</id><snippet>listBig</snippet></ROW><ROW><id>16259944</id><snippet>listBig = [ ['-'] * 10 for _ in range(3)] 
</snippet></ROW><ROW><id>16259944</id><snippet>listSmall</snippet></ROW><ROW><id>16259944</id><snippet>listBig = [ ['-'] * 10 for _ in range(3)] 
word = 'hello'
wordPosX, wordPosY = 3, 1
listBig[wordPosY][3: (3+len(word))] = word
for v in listBig:
    print(''.join(v))
</snippet></ROW><ROW><id>16260043</id><snippet>nltk</snippet></ROW><ROW><id>16260043</id><snippet>import gensim
from gensim import corpora, similarities, models

.
.##Text Preprocessing is done here using nltk
.

##Saving of the dictionary and corpus is done here
##final_text contains the tokens of all the documents

dictionary = corpora.Dictionary(final_text)
dictionary.save('questions.dict');
corpus = [dictionary.doc2bow(text) for text in final_text]
corpora.MmCorpus.serialize('questions.mm', corpus)
corpora.SvmLightCorpus.serialize('questions.svmlight', corpus)
corpora.BleiCorpus.serialize('questions.lda-c', corpus)
corpora.LowCorpus.serialize('questions.low', corpus)

##Then the dictionary and corpus can be used to train using LDA

mm = corpora.MmCorpus('questions.mm')
lda = gensim.models.ldamodel.LdaModel(corpus=mm, id2word=dictionary, num_topics=100, update_every=0, chunksize=19188, passes=20)
</snippet></ROW><ROW><id>16260183</id><snippet>import json
content = urlfetch.fetch(mandrill_url, method=urlfetch.POST, headers={'Content-Type': 'application/json'}, payload=json.dumps(my_payload))
</snippet></ROW><ROW><id>16260231</id><snippet>database[data]=[value]
</snippet></ROW><ROW><id>16260231</id><snippet>print({k:[v] for k, v in database.items()})
</snippet></ROW><ROW><id>16260274</id><snippet>&lt;IDS|MSG&gt;</snippet></ROW><ROW><id>16260274</id><snippet>digest</snippet></ROW><ROW><id>16260274</id><snippet>''</snippet></ROW><ROW><id>16260274</id><snippet>header</snippet></ROW><ROW><id>16260274</id><snippet>parent_header</snippet></ROW><ROW><id>16260274</id><snippet>metadata</snippet></ROW><ROW><id>16260274</id><snippet>content</snippet></ROW><ROW><id>16260274</id><snippet>header</snippet></ROW><ROW><id>16260274</id><snippet>parent_header</snippet></ROW><ROW><id>16260274</id><snippet>metadata</snippet></ROW><ROW><id>16260274</id><snippet>content</snippet></ROW><ROW><id>16260274</id><snippet>digest</snippet></ROW><ROW><id>16260274</id><snippet>key</snippet></ROW><ROW><id>16260274</id><snippet>Session.key = ''
</snippet></ROW><ROW><id>16260274</id><snippet>''</snippet></ROW><ROW><id>16260274</id><snippet>[
  &lt;IDS|MSG&gt;
  6ea6b213262402cc1ad3c1d3e342a9f6
  {"date":"2013-04-27T23:22:13.522049","username":"minrk","session":"5b03b89a-93c9-4113-bb85-17ba57233711","msg_id":"c6d0f85e-fc25-4f1e-84e1-3d706b615393","msg_type":"execute_request"}
  {}
  {}
  {"user_variables":[],"code":"1\n","silent":false,"allow_stdin":true,"store_history":true,"user_expressions":{}}
]
</snippet></ROW><ROW><id>16260274</id><snippet>[
  5b03b89a-93c9-4113-bb85-17ba57233711
  &lt;IDS|MSG&gt;
  47d1052f6e8f333d18480938ca91719b
  {"date":"2013-04-27T23:22:13.528239","username":"kernel","session":"d7eb303b-d2d0-4723-aef2-738545a8da11","msg_id":"9ed1d332-398c-4132-b203-1e7bf8fed712","msg_type":"execute_reply"}
  {"date":"2013-04-27T23:22:13.522049","username":"minrk","session":"5b03b89a-93c9-4113-bb85-17ba57233711","msg_id":"c6d0f85e-fc25-4f1e-84e1-3d706b615393","msg_type":"execute_request"}
  {"dependencies_met":true,"engine":"645fb29f-37ab-40c9-bc01-b7fbfe3c2112","status":"ok","started":"2013-04-27T23:22:13.524114"}
  {"status":"ok","execution_count":2,"user_variables":{},"payload":[],"user_expressions":{}}
]
</snippet></ROW><ROW><id>16260359</id><snippet>createBoard()</snippet></ROW><ROW><id>16260359</id><snippet>def createBoard( self ):
    listBig = [ ['`'] * self.screenWidth for _ in range( self.screenHeight ) ]
</snippet></ROW><ROW><id>16260359</id><snippet>self.l</snippet></ROW><ROW><id>16260359</id><snippet>self.l</snippet></ROW><ROW><id>16260359</id><snippet>write()</snippet></ROW><ROW><id>16260359</id><snippet>def write( self, word ):
    self.l[ self.y ] [ self.x : ( self.x + len( word ) ) ] = word
</snippet></ROW><ROW><id>16260359</id><snippet>self.cursorPosX</snippet></ROW><ROW><id>16260359</id><snippet>self.x</snippet></ROW><ROW><id>16260359</id><snippet>self.y</snippet></ROW><ROW><id>16260432</id><snippet>find_all()</snippet></ROW><ROW><id>16260432</id><snippet>all_a_tags = soup.find_all('a')
for tag in all_a_tags[1:]:
    process(tag)
</snippet></ROW><ROW><id>16260432</id><snippet>find_all()</snippet></ROW><ROW><id>16260432</id><snippet>find_all()</snippet></ROW><ROW><id>16260432</id><snippet>list()</snippet></ROW><ROW><id>16260432</id><snippet>all_a_tags = list(soup.find_all('a'))
for tag in all_a_tags[1:]:
    process(tag)
</snippet></ROW><ROW><id>16260855</id><snippet>def myfunc(h):
    rules = {
            "#":r"\#",
            "$":r"\$",
            "%":r"\%",
            "&amp;":r"\&amp;",
            "~":r"\~{}",
            "_":r"\_",
            "^":r"\^{}",
            "\\":r"\textbackslash{}",
            "{":r"\{",
            "}":r"\}"                
    }
    pattern = '[%s]' % re.escape(''.join(rules.keys()))
    new = re.sub(pattern, lambda m: rules[m.group()], h)
    return new
</snippet></ROW><ROW><id>16261036</id><snippet>''.join(map(codes.get, text))
</snippet></ROW><ROW><id>16261036</id><snippet>codes = {chr(n): '[%d]' % n for n in range(255)}


def encode1(text): 
    return ''.join(codes[c] for c in text)

def encode2(text): 
    import re
    return re.sub(r'.', lambda m: codes[m.group()], text)

def encode3(text): 
    return ''.join(map(codes.get, text))


import timeit

a = 'foobarbaz' * 1000

print timeit.timeit(lambda: encode1(a), number=100)
print timeit.timeit(lambda: encode2(a), number=100)
print timeit.timeit(lambda: encode3(a), number=100)


# 0.113456964493
# 0.445501089096
# 0.0811159610748
</snippet></ROW><ROW><id>16261157</id><snippet>machine.place.edu</snippet></ROW><ROW><id>16261157</id><snippet>$ telnet localhost 1337
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
GET http://ifconfig.me/ip HTTP/1.0
</snippet></ROW><ROW><id>16261157</id><snippet>httplib</snippet></ROW><ROW><id>16261158</id><snippet>return Task.cont</snippet></ROW><ROW><id>16261158</id><snippet>hasMouse()</snippet></ROW><ROW><id>16261158</id><snippet>False</snippet></ROW><ROW><id>16261162</id><snippet>TAA|TAG|TGA</snippet></ROW><ROW><id>16261162</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; regexp = r'ATG(?:(?!TAA|TAG|TGA)...){9,}?(?:TAA|TAG|TGA)'
&gt;&gt;&gt; re.findall(regexp, 'ATGAAAAAAAAAAAAAAAAAAAAAAAAAAATAG')
['ATGAAAAAAAAAAAAAAAAAAAAAAAAAAATAG']
&gt;&gt;&gt; re.findall(regexp, 'ATGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAG')
['ATGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAG']
&gt;&gt;&gt; re.findall(regexp, 'ATGAAATAGAAAAAAAAAAAAAAAAAAAAATAG')
[]
</snippet></ROW><ROW><id>16261162</id><snippet>(?!TAA|TAG|TGA)</snippet></ROW><ROW><id>16261162</id><snippet>TAA|TAG|TGA</snippet></ROW><ROW><id>16261162</id><snippet>TAA|TAG|TGA</snippet></ROW><ROW><id>16261162</id><snippet>&gt;&gt;&gt; re.findall(regexp, 'ATGAAAATAGAAAAAAAAAAAAAAAAAAAATAG')
['ATGAAAATAGAAAAAAAAAAAAAAAAAAAATAG']
</snippet></ROW><ROW><id>16261199</id><snippet>change['Errors']</snippet></ROW><ROW><id>16261199</id><snippet>u'DELETED'</snippet></ROW><ROW><id>16261199</id><snippet>print error[0]
</snippet></ROW><ROW><id>16261199</id><snippet>print u', '.join(error)
</snippet></ROW><ROW><id>16261236</id><snippet>def testsum(data):
    if not isinstance(data, list):
        data = [data]

    for i in map(int,data):
        print(i,i+20)
</snippet></ROW><ROW><id>16261326</id><snippet>&gt;&gt;&gt; m[tuple(p)]
array([9, 9])
</snippet></ROW><ROW><id>16261326</id><snippet>&gt;&gt;&gt; m[tuple(p.T)]
array([ 7, 19])
</snippet></ROW><ROW><id>16261529</id><snippet>C:/dict1/dict2/file.txt</snippet></ROW><ROW><id>16261659</id><snippet>def _getdep(item):
    final_dep = []
    dep = internal_dep.get(item, [])
    final_dep.extend(internal_dep.get(item, []))
    for i in [d for d in dep if d not in skip]:
        final_dep.extend(_getdep(i))
    return final_dep
</snippet></ROW><ROW><id>16261659</id><snippet>['313137', '313136', '313119', '313118', '313117', '313115', '313113', '317152', '314449']
</snippet></ROW><ROW><id>16261788</id><snippet>context['idp'].append(['provider', 'login_url'])
context['idp'].append(['provider', 'login_url'])
context['idp'].append(['provider', 'login_url'])
</snippet></ROW><ROW><id>16261788</id><snippet>{% for item in idp %}
   &lt;p&gt;&lt;a href="{{item[1]}}"&gt;{{item[0]}}&lt;/a&gt;&lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>16261788</id><snippet>context['idp'].append({'provider':'google','login_url':'http://example.com/login/google'})
context['idp'].append({'provider':'facebook','login_url':'http://example.com/login/facebook'})
context['idp'].append({'provider':'twitter','login_url':'http://example.com/login/twitter'})
</snippet></ROW><ROW><id>16261788</id><snippet>{% for item in idp %}
   &lt;p&gt;&lt;a href="{{item['login_url']}}"&gt;{{item['provider']}}&lt;/a&gt;&lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>16261853</id><snippet>regno = raw_input('Input Registration number (Blank for all) : ')
state = raw_input('Input state in/out (Blank for all) : ')
make = raw_input('Input make of the vehicle (Blank for all) : ')

conditions = []
args = []

if regno:
    conditions.append("regno=%s")
    args.append(regno)

if state:
    conditions.append("state=%s")
    args.append(make)

if make:
    conditions.append("make=%s")
    args.append(make)

if conditions:
    cur.execute("select * from global where " + " and ".join(conditions), args)
else
    cur.execute("select * from global")
</snippet></ROW><ROW><id>16261853</id><snippet>join</snippet></ROW><ROW><id>16261853</id><snippet>" and ".join(["foo", "bar"]</snippet></ROW><ROW><id>16261853</id><snippet>foo and bar</snippet></ROW><ROW><id>16261867</id><snippet>item</snippet></ROW><ROW><id>16261867</id><snippet>list1</snippet></ROW><ROW><id>16261867</id><snippet>list1[:0] = [key]
</snippet></ROW><ROW><id>16261867</id><snippet>list.insert</snippet></ROW><ROW><id>16261867</id><snippet>list1.insert(0, key)
</snippet></ROW><ROW><id>16261867</id><snippet>list1 = ['list']</snippet></ROW><ROW><id>16261867</id><snippet>key = 'key5'</snippet></ROW><ROW><id>16261867</id><snippet>'list'</snippet></ROW><ROW><id>16261867</id><snippet>list1</snippet></ROW><ROW><id>16261867</id><snippet>key</snippet></ROW><ROW><id>16261867</id><snippet>"key5"</snippet></ROW><ROW><id>16261867</id><snippet>"key5"</snippet></ROW><ROW><id>16261867</id><snippet>k</snippet></ROW><ROW><id>16261867</id><snippet>e</snippet></ROW><ROW><id>16261867</id><snippet>y</snippet></ROW><ROW><id>16261867</id><snippet>5</snippet></ROW><ROW><id>16261867</id><snippet>list1[:0] = key</snippet></ROW><ROW><id>16261867</id><snippet>"key5"</snippet></ROW><ROW><id>16261867</id><snippet>list1</snippet></ROW><ROW><id>16261867</id><snippet>list1[:0] = [key]</snippet></ROW><ROW><id>16261867</id><snippet>[key]</snippet></ROW><ROW><id>16261867</id><snippet>list1</snippet></ROW><ROW><id>16261897</id><snippet>&gt;&gt;&gt; cars = {}
&gt;&gt;&gt; cars['2012'] = ['BMW', ' Fiat']
&gt;&gt;&gt; cars['2013'] = ['Ford', 'Renault']
&gt;&gt;&gt; cars
{'2013': ['Ford', 'Renault'], '2012': ['BMW', ' Fiat']}
&gt;&gt;&gt; cars['2012'].append('Toyota')
&gt;&gt;&gt; cars
{'2013': ['Ford', 'Renault'], '2012': ['BMW', ' Fiat', 'Toyota']}
&gt;&gt;&gt; cars['2012']
['BMW', ' Fiat', 'Toyota']
</snippet></ROW><ROW><id>16261897</id><snippet>from collections import defaultdict

# initiate the dict
cars = defaultdict(list)

# function for adding cars
def add_cars(year, new_cars):
    if isinstance(cars, (list, set)):
        # if more than 1 new_cars
        cars[year].extend(new_cars)
    else:
        cars[year].append(new_cars)

# add starting cars
add_cars('2012', 'BMW')
add_cars('2013', 'Ford')
# add new cars
add_cars('2012', 'Fiat')
add_cars('2013', 'Renault')
# view
print cars

&gt;&gt;&gt; 
defaultdict(&lt;type 'list'&gt;, {'2013': ['Ford', 'Renault'], '2012': ['BMW', 'Fiat']})
</snippet></ROW><ROW><id>16261897</id><snippet>&gt;&gt;&gt; cars = {'2012':['BMW'], '2013':['Ford']}
&gt;&gt;&gt; new_cars = {'2012':['Fiat'], '2013':['Renault']}
&gt;&gt;&gt; for k, v in new_cars.iteritems():
    cars[k].extend(v)


&gt;&gt;&gt; cars
{'2013': ['Ford', 'Renault'], '2012': ['BMW', 'Fiat']}
</snippet></ROW><ROW><id>16262034</id><snippet>i</snippet></ROW><ROW><id>16262034</id><snippet>(Pdb) whatis i
&lt;type 'int'&gt;
</snippet></ROW><ROW><id>16262034</id><snippet>(Pdb) args
(Pdb) 
</snippet></ROW><ROW><id>16262217</id><snippet>Popen</snippet></ROW><ROW><id>16262217</id><snippet>terminate()</snippet></ROW><ROW><id>16262217</id><snippet>class My_Thread(threading.Thread):

    def __init__(self):
        threading.Thread.__init__(self)
        self.process = None

    def run(self):
        print "Starting " + self.name
        cmd = [ "bash", 'process.sh']
        self.process = p = subprocess.Popen(cmd,
                     stdout=subprocess.PIPE,
                     stderr=subprocess.STDOUT)
        for line in iter(p.stdout.readline, b''):
            print ("-- " + line.rstrip())
        print "Exiting " + self.name

    def stop(self):
        print "Trying to stop thread "
        if self.process is not None:
            self.process.terminate()
            self.process = None

thr = My_Thread()
thr.start()
time.sleep(30)
thr.stop()
thr.join()
</snippet></ROW><ROW><id>16262217</id><snippet>SIGTERM</snippet></ROW><ROW><id>16262217</id><snippet>bash</snippet></ROW><ROW><id>16262217</id><snippet>p.stdout.readline()</snippet></ROW><ROW><id>16262350</id><snippet>Content-type</snippet></ROW><ROW><id>16262350</id><snippet>request.responseHeaders.setRawHeaders('content-type', ['text/csv'])
</snippet></ROW><ROW><id>16262378</id><snippet>25</snippet></ROW><ROW><id>16262378</id><snippet>!s</snippet></ROW><ROW><id>16262378</id><snippet>.format</snippet></ROW><ROW><id>16262378</id><snippet>datetime</snippet></ROW><ROW><id>16262378</id><snippet>str</snippet></ROW><ROW><id>16262378</id><snippet>import datetime
template = "{0:25}|{1:25}|{2!s:25}|{3:25}|{4:25}"
rows = (('DL2C1683', 'in', datetime.datetime(2013, 4, 28, 15, 53, 27), 'hyundai i10', '11'),
        ('UP1S1783', 'in', datetime.datetime(2013, 4, 28, 15, 53, 57), 'honda kinetic', '11'))
print template.format("Registration No.", "State", "Time", "Make", "Sector") # header
for row in rows: 
    print template.format(*row)
</snippet></ROW><ROW><id>16262378</id><snippet>Registration No.         |State                    |Time                     |Make                     |Sector                   
DL2C1683                 |in                       |2013-04-28 15:53:27      |hyundai i10              |11                       
UP1S1783                 |in                       |2013-04-28 15:53:57      |honda kinetic            |11        
</snippet></ROW><ROW><id>16262538</id><snippet>any</snippet></ROW><ROW><id>16262538</id><snippet>if quirk and not any([minor, creator, nature]):
    print (quirk, item)
# and so on
</snippet></ROW><ROW><id>16262538</id><snippet>any([minor, creator, nature])</snippet></ROW><ROW><id>16262538</id><snippet>True</snippet></ROW><ROW><id>16262538</id><snippet>True</snippet></ROW><ROW><id>16262538</id><snippet>False</snippet></ROW><ROW><id>16262696</id><snippet>header = ingred_set.getprevious().xpath(".//text()")[0]
</snippet></ROW><ROW><id>16262728</id><snippet>var ua = navigator.userAgent.toLowerCase();
var isAndroid = ua.indexOf("android") &gt; -1; //&amp;&amp; ua.indexOf("mobile");
if(isAndroid) {
    // Do something!
    // Redirect to Android-site?
    window.location = 'http://android.davidwalsh.name';
}
</snippet></ROW><ROW><id>16262728</id><snippet>if((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i))) {
     if (document.cookie.indexOf("iphone_redirect=false") == -1) window.location = "http://m.espn.go.com/wireless/?iphone&amp;i=COMR";
}
</snippet></ROW><ROW><id>16262731</id><snippet>harakiri</snippet></ROW><ROW><id>16262731</id><snippet>harakiri</snippet></ROW><ROW><id>16262943</id><snippet>mainloop</snippet></ROW><ROW><id>16262943</id><snippet>while not userEntryFinished</snippet></ROW><ROW><id>16262943</id><snippet>getUserEntry</snippet></ROW><ROW><id>16262953</id><snippet>NULL</snippet></ROW><ROW><id>16262953</id><snippet>hWnd</snippet></ROW><ROW><id>16262953</id><snippet>MessageBox</snippet></ROW><ROW><id>16262953</id><snippet>MB_TOPMOST</snippet></ROW><ROW><id>16262953</id><snippet>uType</snippet></ROW><ROW><id>16263239</id><snippet>from django.db.models import Model, ForeignKey

class Profile(Model):
    citizenship = ForeignKey('countries.Country')
</snippet></ROW><ROW><id>16263411</id><snippet>output</snippet></ROW><ROW><id>16263411</id><snippet>abc.tex</snippet></ROW><ROW><id>16263411</id><snippet>import HTMLParser
h = HTMLParser.HTMLParser()
s = "speaker-hearer's"
s = h.unescape(s)
</snippet></ROW><ROW><id>16263591</id><snippet>re.sub(r'(?&lt;=\S)\.(?=\w)', '. ', s)
</snippet></ROW><ROW><id>16263591</id><snippet>(?&lt;=...)</snippet></ROW><ROW><id>16263591</id><snippet>\S</snippet></ROW><ROW><id>16263591</id><snippet>(?=\w)</snippet></ROW><ROW><id>16263806</id><snippet>text = apod_inf.replace('&lt;p&gt;', '').replace('&lt;/p&gt;', '').replace('\n', '')
</snippet></ROW><ROW><id>16263806</id><snippet>foo.replace('\n\n', 'SOMETOKEN').replace('\n', 'SOMETOKEN', 1).replace('\n', '', 1).replace('SOMETOKEN', '\n')
</snippet></ROW><ROW><id>16263961</id><snippet>a</snippet></ROW><ROW><id>16263961</id><snippet>b</snippet></ROW><ROW><id>16263961</id><snippet>a</snippet></ROW><ROW><id>16263961</id><snippet>a</snippet></ROW><ROW><id>16263961</id><snippet>a[0] = 3</snippet></ROW><ROW><id>16263961</id><snippet>b[0][0]</snippet></ROW><ROW><id>16264446</id><snippet>import praw, time

r = praw.Reddit(user_agent='ADNPost')

already_done = set()

while True:
    l = r.get_top(limit=1)
    submission = next(l,None)

    if not submission: 
        continue

    while submission.id in already_done:
        submission=next(r.get_front_page(limit=1, params={'after':submission.fullname}),None)
        if not submission:
            break
    if submission:
        id = submission.id
        title = submission.title
        url = submission.short_link
        print (title, url)
        save_state = (id)
        already_done.add(submission.id)
    time.sleep(2)
</snippet></ROW><ROW><id>16264453</id><snippet>def quote(string):
    text = ''
    stack = []
    for token in iter_tokes(string):
        if is_quote(token):
            if stack and stack[-1] == token: # closing
                text += '}'
                stack.pop()
            else: # opening
                text += '\\quotation{'
                stack.append(token)
        else:
            text += token
    return text

def iter_tokes(string):
    i = find_quote(string)
    if i is None:
        yield string
    else:
        if i &gt; 0:
            yield string[:i]
        yield string[i]
        for q in iter_tokes(string[i+1:]):
            yield q

def find_quote(string):
    for i, char in enumerate(string):
        if is_quote(char):
            return i
    return None

def is_quote(char):
    return char in '\'\"'

def main():
    quoted = None
    with open('input.txt') as fh:
        quoted = quote(fh.read())
    print quoted

main()
</snippet></ROW><ROW><id>16264615</id><snippet>pos = tree</snippet></ROW><ROW><id>16264615</id><snippet>pos = pos[bit]</snippet></ROW><ROW><id>16264615</id><snippet>pos</snippet></ROW><ROW><id>16264615</id><snippet>pos</snippet></ROW><ROW><id>16264615</id><snippet>pos</snippet></ROW><ROW><id>16264615</id><snippet>tree</snippet></ROW><ROW><id>16264615</id><snippet>pos</snippet></ROW><ROW><id>16264615</id><snippet>tree</snippet></ROW><ROW><id>16264903</id><snippet>from itertools import permutations

def longestWord(letters):
    return [''.join(i) for i in permutations(letters)]

print(longestWord("aah"))
</snippet></ROW><ROW><id>16264903</id><snippet>['aah', 'aha', 'aah', 'aha', 'haa', 'haa']
</snippet></ROW><ROW><id>16264903</id><snippet>combination</snippet></ROW><ROW><id>16264999</id><snippet>In [12]: from collections import defaultdict

In [13]: dic=defaultdict(list)

In [14]: for a,b,c in zip(keys_,first_list,second_list):
    dic[a].append([b,c])
   ....:     

In [15]: dic
Out[15]: defaultdict(&lt;type 'list'&gt;,
{'100': [['animals', 'cat'], ['people', 'John']],
 '600': [['cars', 'Fiat']]})
</snippet></ROW><ROW><id>16265053</id><snippet>import requests
r = requests.get("http://localhost:5000")  
# a flask application there sets two cookies 'first' and 'second'

r.cookies.keys()
# returns ['first', 'second']

r.headers['Set-Cookie']
# returns 'first=4; Path=/, second=42; Path=/'
</snippet></ROW><ROW><id>16265131</id><snippet>print</snippet></ROW><ROW><id>16265131</id><snippet>print SomeExp</snippet></ROW><ROW><id>16265131</id><snippet>print(SomeExpr)</snippet></ROW><ROW><id>16265245</id><snippet>max()</snippet></ROW><ROW><id>16265245</id><snippet>def input_max3():
    return max(int(input()) for i in range(3))
</snippet></ROW><ROW><id>16265245</id><snippet>input()</snippet></ROW><ROW><id>16265245</id><snippet>int(...)</snippet></ROW><ROW><id>16265245</id><snippet>(... for i in range(3))</snippet></ROW><ROW><id>16265245</id><snippet>max(...)</snippet></ROW><ROW><id>16265245</id><snippet>max(1, 3, 5)</snippet></ROW><ROW><id>16265262</id><snippet>&gt;&gt;&gt; a, b, c = 1, 2, 3
&gt;&gt;&gt; txt  = "[a,b,c]"
&gt;&gt;&gt; lst = eval(txt)
&gt;&gt;&gt; lst
[1, 2, 3]
&gt;&gt;&gt; type(lst)
&lt;type 'list'&gt;
</snippet></ROW><ROW><id>16265357</id><snippet> r = x + (y-x) *  Math.random();
</snippet></ROW><ROW><id>16265365</id><snippet>k.sh</snippet></ROW><ROW><id>16265365</id><snippet>parking-mng.py</snippet></ROW><ROW><id>16265365</id><snippet>k.sh</snippet></ROW><ROW><id>16265365</id><snippet>parking-mng.py</snippet></ROW><ROW><id>16265365</id><snippet>k.sh</snippet></ROW><ROW><id>16265365</id><snippet>parking-mng.py</snippet></ROW><ROW><id>16265365</id><snippet>k.sh</snippet></ROW><ROW><id>16265365</id><snippet>parking-mng.py</snippet></ROW><ROW><id>16265365</id><snippet>k.sh</snippet></ROW><ROW><id>16265365</id><snippet>parking-mng.py</snippet></ROW><ROW><id>16265365</id><snippet>k.sh</snippet></ROW><ROW><id>16265365</id><snippet>parking-mng.py</snippet></ROW><ROW><id>16265365</id><snippet>k.sh</snippet></ROW><ROW><id>16265365</id><snippet>parking-mng.py</snippet></ROW><ROW><id>16265365</id><snippet>k.sh</snippet></ROW><ROW><id>16265365</id><snippet>parking-mng.py</snippet></ROW><ROW><id>16265365</id><snippet>k.sh</snippet></ROW><ROW><id>16265365</id><snippet>parking-mng.py</snippet></ROW><ROW><id>16265365</id><snippet>k.sh</snippet></ROW><ROW><id>16265365</id><snippet>parking-mng.py</snippet></ROW><ROW><id>16265365</id><snippet>k.sh</snippet></ROW><ROW><id>16265365</id><snippet>parking-mng.py</snippet></ROW><ROW><id>16265365</id><snippet>k.sh</snippet></ROW><ROW><id>16265365</id><snippet>parking-mng.py</snippet></ROW><ROW><id>16265365</id><snippet>k.sh</snippet></ROW><ROW><id>16265365</id><snippet>parking-mng.py</snippet></ROW><ROW><id>16265365</id><snippet>k.sh</snippet></ROW><ROW><id>16265365</id><snippet>parking-mng.py</snippet></ROW><ROW><id>16265365</id><snippet>k.sh</snippet></ROW><ROW><id>16265365</id><snippet>parking-mng.py</snippet></ROW><ROW><id>16265365</id><snippet>k.sh</snippet></ROW><ROW><id>16265365</id><snippet>parking-mng.py</snippet></ROW><ROW><id>16265365</id><snippet>k.sh</snippet></ROW><ROW><id>16265365</id><snippet>parking-mng.py</snippet></ROW><ROW><id>16265365</id><snippet>k.sh</snippet></ROW><ROW><id>16265365</id><snippet>parking-mng.py</snippet></ROW><ROW><id>16265454</id><snippet>$ python setup.py install
</snippet></ROW><ROW><id>16265628</id><snippet>certificados_line</snippet></ROW><ROW><id>16265628</id><snippet>*certificados_line*</snippet></ROW><ROW><id>16265628</id><snippet>*student_certificados_form*</snippet></ROW><ROW><id>16265628</id><snippet>*student_certificados_form*</snippet></ROW><ROW><id>16265628</id><snippet>*certificados_line*</snippet></ROW><ROW><id>16265640</id><snippet>127.0.0.1</snippet></ROW><ROW><id>16265716</id><snippet>input</snippet></ROW><ROW><id>16265716</id><snippet>raw_input</snippet></ROW><ROW><id>16265716</id><snippet>answer = raw_input("What is the name of Dr. Bunsen Honeydew's assistant?")
if answer == "Beaker":
   print("Correct!")
</snippet></ROW><ROW><id>16265716</id><snippet>input()</snippet></ROW><ROW><id>16265716</id><snippet>eval(raw_input())</snippet></ROW><ROW><id>16265716</id><snippet>raw_input</snippet></ROW><ROW><id>16265716</id><snippet>answer = "Beaker"
if answer == "Beaker":
   print("Correct!")
</snippet></ROW><ROW><id>16265716</id><snippet>input</snippet></ROW><ROW><id>16265716</id><snippet>answer = Beaker        # raises NameError, there's no variable named Beaker
if answer == "Beaker":
   print("Correct!")
</snippet></ROW><ROW><id>16265886</id><snippet>def is_equal(floats_a, floats_b, precision=1e-15):
    return all((abs(a-b) &lt; precision) for a, b in izip(floats_a, floats_b))
</snippet></ROW><ROW><id>16266191</id><snippet>In [1]: num=123456

In [2]: sum(map(int,str(num)))
Out[2]: 21

In [3]: def digitsum(x):
   ...:     return sum(map(int,str(x)))
   ...: 

In [4]: digitsum(num)
Out[4]: 21
</snippet></ROW><ROW><id>16266319</id><snippet>pyglatin(ant)</snippet></ROW><ROW><id>16266319</id><snippet>ant</snippet></ROW><ROW><id>16266319</id><snippet>pyglatin('ant')
</snippet></ROW><ROW><id>16266457</id><snippet>from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
import matplotlib.pyplot as plt
from matplotlib.mlab import griddata
import numpy as np
import csv

color_map = {'A':'r', 'B':'b', 'K':'k', 'C':'c'}
shape_map = {'dia':'^', 'cir':'o', 'bu':'.'}

with open('/tmp/dist.txt','r') as in_file:
    reader = csv.DictReader(in_file, delimiter=' ', skipinitialspace=True)
    data = []
    for r in reader:
        data.append([float(r['col1']),
                     float(r['col2']),
                     float(r['col3']),
                     color_map[r['col4']],
                     shape_map[r['col5']]])
</snippet></ROW><ROW><id>16266457</id><snippet>scatter</snippet></ROW><ROW><id>16266457</id><snippet>X, Y, Z, col, shape = zip(*data)


fig = plt.figure()
ax = fig.add_subplot(111,projection='3d')
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')


ax.scatter(X, Y, Z, c=col)
</snippet></ROW><ROW><id>16266457</id><snippet>scatter</snippet></ROW><ROW><id>16266457</id><snippet>marker</snippet></ROW><ROW><id>16266457</id><snippet>scatter</snippet></ROW><ROW><id>16266457</id><snippet>import collections

by_shape = collections.defaultdict(list)
for d in data:
    by_shape[d[4]].append(d[:4])

for key, val in by_shape.items():
    X, Y, Z, col = zip(*val)
    ax.scatter(X, Y, Z, c=col, marker=key)
</snippet></ROW><ROW><id>16266754</id><snippet>&gt;&gt;&gt; a = [(1,1),(2,2),(3,3)]
&gt;&gt;&gt; b = [(1,1),(2,2),(3,3)]
&gt;&gt;&gt; [(i[0]+j[0], i[1]+j[1]) for i, j in zip(a,b)]
[(2, 2), (4, 4), (6, 6)]
</snippet></ROW><ROW><id>16266864</id><snippet>try:</snippet></ROW><ROW><id>16266864</id><snippet>finally:</snippet></ROW><ROW><id>16266864</id><snippet>try:</snippet></ROW><ROW><id>16266864</id><snippet>finally:</snippet></ROW><ROW><id>16266864</id><snippet># Had to do this stuff in a try-finally, since some testing 
# went a little wrong.....
try:
    # Set the following two lines to your creds and server
    M = imaplib2.IMAP4_SSL("imap.gmail.com")
    M.login(USER, PASSWORD)
    # We need to get out of the AUTH state, so we just select 
    # the INBOX.
    M.select("INBOX")
    numUnseen = getUnseen()
    sendPushNotification(numUnseen)

    #print M.status("INBOX", '(UNSEEN)')
    # Start the Idler thread
    idler = Idler(M)
    idler.start()

    # Sleep forever, one minute at a time
    while True:
        time.sleep(60)

finally:
    # Clean up.
    idler.stop()
    idler.join()
    M.close()
    # This is important!
    M.logout()
</snippet></ROW><ROW><id>16267046</id><snippet>types.MethodType</snippet></ROW><ROW><id>16267046</id><snippet>instancemethod = type(Anyclass.method)
</snippet></ROW><ROW><id>16267076</id><snippet>4</snippet></ROW><ROW><id>16267076</id><snippet>&gt;&gt;&gt; lists = [range(10*i, 10*(i+1)) for i in range(4)]
&gt;&gt;&gt; lists
[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39]]
</snippet></ROW><ROW><id>16267076</id><snippet>&gt;&gt;&gt; for lst in lists: random.shuffle(lst)

&gt;&gt;&gt; lists
[[6, 8, 2, 1, 3, 5, 9, 0, 7, 4], [17, 12, 16, 10, 14, 15, 18, 11, 13, 19], [20, 28, 23, 21, 27, 25, 24, 29, 26, 22], [35, 32, 38, 31, 39, 34, 30, 33, 36, 37]]
</snippet></ROW><ROW><id>16267076</id><snippet>zip</snippet></ROW><ROW><id>16267076</id><snippet>&gt;&gt;&gt; for items in zip(*lists):
    print(items)


(6, 17, 20, 35)
(8, 12, 28, 32)
(2, 16, 23, 38)
(1, 10, 21, 31)
(3, 14, 27, 39)
(5, 15, 25, 34)
(9, 18, 24, 30)
(0, 11, 29, 33)
(7, 13, 26, 36)
(4, 19, 22, 37)
</snippet></ROW><ROW><id>16267076</id><snippet>islice</snippet></ROW><ROW><id>16267076</id><snippet>&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; for items in islice(zip(*lists),5):
    print(items)


(6, 17, 20, 35)
(8, 12, 28, 32)
(2, 16, 23, 38)
(1, 10, 21, 31)
(3, 14, 27, 39)
</snippet></ROW><ROW><id>16267087</id><snippet>my_message_field.id</snippet></ROW><ROW><id>16267087</id><snippet>my_message_field.name</snippet></ROW><ROW><id>16267087</id><snippet>GET</snippet></ROW><ROW><id>16267087</id><snippet>POST</snippet></ROW><ROW><id>16267087</id><snippet>devappserver</snippet></ROW><ROW><id>16267087</id><snippet>endpoints.apiserving</snippet></ROW><ROW><id>16267087</id><snippet>'{"my_message_field":{"id":"x","name":"y"}}'
</snippet></ROW><ROW><id>16267087</id><snippet>devappserver2</snippet></ROW><ROW><id>16267087</id><snippet>'{"my_message_field.name": ["y"], "my_message_field.id": ["x"]}'
</snippet></ROW><ROW><id>16267087</id><snippet>from protorpc import remote
protocols = remote.Protocols.get_default()
json_protocol = protocols.lookup_by_content_type('application/json')
json_protocol.decode_message(RequestMessage, payload)
</snippet></ROW><ROW><id>16267087</id><snippet>api_server</snippet></ROW><ROW><id>16267087</id><snippet>&lt;RequestMessage
 my_message_field: &lt;MyMessage
 id: u'x'
 name: u'y'&gt;&gt;
</snippet></ROW><ROW><id>16267087</id><snippet>devappserver2</snippet></ROW><ROW><id>16267087</id><snippet>&lt;RequestMessage&gt;
</snippet></ROW><ROW><id>16267347</id><snippet>gq = graph_query.encode('utf-8')
query_data = scrape(gq)
</snippet></ROW><ROW><id>16267347</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>16267347</id><snippet>def scrape(url):
# simplified
    data = urllib2.urlopen(url)
    return data.read()

def query_graph_api(url_list):
# query Facebook's Graph API, store data.
    for url in url_list:
        graph_query = graph_query_root + u"%22" + url + u"%22"
        gq = graph_query.encode('utf-8')
        query_data = scrape(gq)
        print query_data #debug console

### START HERE ####

graph_query_root = u"https://graph.facebook.com/fql?q=SELECT%20normalized_url,share_count,like_count,comment_count,total_count%20FROM%20link_stat%20WHERE%20url="

url_list = [u'http://www.supersavvyme.co.uk', u'http://www.supersavvyme.co.uk/article/how-to-be-happy–laugh-more']

query_graph_api(url_list)
</snippet></ROW><ROW><id>16267419</id><snippet>num</snippet></ROW><ROW><id>16267419</id><snippet>for</snippet></ROW><ROW><id>16267419</id><snippet>Cancel</snippet></ROW><ROW><id>16267419</id><snippet>from tkinter import *
import tkinter.simpledialog as simpledialog

def add_users():
    n = simpledialog.askinteger('', 'How many users are you going to put in?', initialvalue=1, minvalue=1, maxvalue=10)
    if not n: # 'Cancel'
        return
    for i in range(n):
        user = simpledialog.askstring('', 'User #%s from #%s' % (i+1, n))
        if user is None: # 'Cancel'
            return
        # Do something useful
        print(user)

root = Tk()
Button(root, text='Add users', command=add_users).pack(padx=50, pady=50)
Button(root, text='Quit', command=root.destroy).pack(pady=30)
root.mainloop()
</snippet></ROW><ROW><id>16267419</id><snippet>quit</snippet></ROW><ROW><id>16267419</id><snippet>from tkinter import *
import tkinter.simpledialog as simpledialog

class YourApp():
    def __init__(self):
        self.root = Tk()
        Button(self.root, text='Quit', command=self.root.destroy).pack(pady=20)
        self.ask_button = Button(self.root, text='Add users', command=self.add_users)
        self.ask_button.pack(padx=50, pady=50)
        self.root.mainloop()
    def add_users(self):
        self.users_count = 0
        self.user_name = StringVar()
        self.frame = Frame(self.root)
        self.frame.pack()

        self.users_count = simpledialog.askinteger('', 'How many users are you going to put in?', initialvalue=1, minvalue=1, maxvalue=10)
        self.user_entry = Entry(self.frame, textvariable=self.user_name)
        self.user_entry.pack(pady=10)
        self.user_entry.bind('&lt;Key-Return&gt;', self.on_new_user)
        self.user_entry.focus_set()
    def on_new_user(self, event):
        # your code
        print(self.user_name.get())
        Label(self.frame, text='User Inputted: %s' % self.user_name.get()).pack()
        self.users_count -= 1
        if not self.users_count:
            self.user_entry.destroy()
        self.user_name.set('')

YourApp()
</snippet></ROW><ROW><id>16267453</id><snippet>list(it)</snippet></ROW><ROW><id>16267453</id><snippet>def take(n, iterable):
    "Return first n items of the iterable as a list"
     return list(islice(iterable, n))
</snippet></ROW><ROW><id>16267554</id><snippet>def get_python_libs():
    """
    Get the shared library names for embedding jep.

    See python-config
    """
    return ['python' + sysconfig.get_config_var('VERSION'), 'dl']
</snippet></ROW><ROW><id>16267554</id><snippet>def get_python_libs():
    """
    Get the shared library names for embedding jep.

    See python-config
    """
    if is_win():
        return ['python' + sysconfig.get_config_var('VERSION')]
    else:
        return ['python' + sysconfig.get_config_var('VERSION'), 'dl']
</snippet></ROW><ROW><id>16267556</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; external_dep = dict()
&gt;&gt;&gt; deps = ' '.join(re.findall(r'(?&lt;=External-dep:\s)[\d ]+(?=\n)', output)).split()
&gt;&gt;&gt; deps
['311957', '312994', '311957', '312591']
&gt;&gt;&gt; external_dep[Master_change] = list(set(deps))
&gt;&gt;&gt; external_dep
{'12345': ['311957', '312994', '312591']}
</snippet></ROW><ROW><id>16267663</id><snippet>dismissWorkers</snippet></ROW><ROW><id>16267663</id><snippet>do_join=True</snippet></ROW><ROW><id>16267663</id><snippet>dismissWorkers</snippet></ROW><ROW><id>16267663</id><snippet>joinAllDismissedWorkers</snippet></ROW><ROW><id>16267698</id><snippet>&gt;&gt;&gt; l = [(0, 0), (1, 0), (2, 0), (3, 0), (0, 1), (1, 1), (2, 1), (3, 1)]
&gt;&gt;&gt; left = [ x for x in l if x[0] &lt; 2]
&gt;&gt;&gt; right = [ x for x in l if x[0] &gt;= 2]
</snippet></ROW><ROW><id>16267786</id><snippet>global tree #just declare the tree globally -- this is just shorthand
def findMessage(t, s):
    if (s == ""):
        return ""
    if(isinstance(t, str)):
        return t + findMessage(tree[int(s[0])], s[1:])
    return findMessage(t[int(s[0])], s[1:])
</snippet></ROW><ROW><id>16267835</id><snippet>with open("text", "w") as outfile:
    json.dump({'numbers':n, 'strings':s, 'x':x, 'y':y}, outfile, indent=4)
</snippet></ROW><ROW><id>16267920</id><snippet>from scipy import ndimage
ndimage.binary_hit_or_miss(...)
</snippet></ROW><ROW><id>16268024</id><snippet>str.replace</snippet></ROW><ROW><id>16268024</id><snippet>count</snippet></ROW><ROW><id>16268024</id><snippet>In [20]: strs='a;b;c;d'

In [21]: count=strs.count(";")-1

In [22]: strs = strs.replace(';',', ',count).replace(';',' &amp; ',)

In [24]: strs
Out[24]: 'a, b, c &amp; d'
</snippet></ROW><ROW><id>16268024</id><snippet>str.replace</snippet></ROW><ROW><id>16268024</id><snippet>S.replace(old, new[, count]) -&gt; string

Return a copy of string S with all occurrences of substring
old replaced by new.  If the optional argument count is
given, only the first count occurrences are replaced.
</snippet></ROW><ROW><id>16268096</id><snippet>In [9]: q.itemActivated
Out[9]: &lt;bound signal itemActivated of QListWidget object at 0x1d13560&gt;
</snippet></ROW><ROW><id>16268096</id><snippet>In [10]: q.itemActivated()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-10-3602f33f377a&gt; in &lt;module&gt;()
----&gt; 1 q.itemActivated()

TypeError: native Qt signal is not callable
</snippet></ROW><ROW><id>16268096</id><snippet>q.itemActivated.emit(None)
</snippet></ROW><ROW><id>16268214</id><snippet>import csv
with open('eggs.csv', 'rb') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
    for row in spamreader:
        print ', '.join(row)
</snippet></ROW><ROW><id>16268234</id><snippet>li</snippet></ROW><ROW><id>16268234</id><snippet>href</snippet></ROW><ROW><id>16268234</id><snippet>a</snippet></ROW><ROW><id>16268234</id><snippet>import urllib2
from bs4 import BeautifulSoup

url = "http://www.dailykos.com/story/2013/04/27/1203495/-GunFAIL-XV"

page = urllib2.urlopen(url).read()
soup = BeautifulSoup(page)
li = soup.select("ol &gt; li &gt; a")
for link in li:
    print(link.get('href'))
</snippet></ROW><ROW><id>16268324</id><snippet>integer division</snippet></ROW><ROW><id>16268324</id><snippet>float</snippet></ROW><ROW><id>16268324</id><snippet>float</snippet></ROW><ROW><id>16268324</id><snippet>In [40]: 4200/820
Out[40]: 5

In [41]: 4200/820.0
Out[41]: 5.121951219512195

In [42]: 4200/float(820)
Out[42]: 5.121951219512195
</snippet></ROW><ROW><id>16268324</id><snippet>/</snippet></ROW><ROW><id>16268324</id><snippet>//</snippet></ROW><ROW><id>16268324</id><snippet>In [43]: from __future__ import division #import py3x's division in py2x

In [44]: 4200/820
Out[44]: 5.121951219512195
</snippet></ROW><ROW><id>16268489</id><snippet>newDailyFile = path+day
with open(newDailyFile, "a") as file:
    for i in creatures:
        dump({'name':name, 'numbers':n, 'strings':s, 'x':x, 'y':y}, file) #removed indent so each one is online
        file.write("\n")#or else they will all be on the same line
</snippet></ROW><ROW><id>16268489</id><snippet>with open(newDailyFile) as file:
    lines = file.readlines() #Gets each one line by line, then I can load them
    for i in lines:
        result = loads(i)
</snippet></ROW><ROW><id>16268579</id><snippet>def FunAdd(self, a, b):
    return self.FunMath.MyAdd(self.obj, a, b)
    ^^^^^^
</snippet></ROW><ROW><id>16268642</id><snippet>try:
   # do stuff
except (TimeoutError, ConnectionError, HttpError) as e:
   handle_exception(e)
</snippet></ROW><ROW><id>16268682</id><snippet>import urllib2

import bs4


def findItem(itemName):
    itemName.replace(" ", "+")
    link = 'http://www.flipkart.com/search/a/all?query= {0}&amp;vertical=all&amp;dd=0&amp;autosuggest[as]=off&amp;autosuggest[as-submittype]=entered&amp;autosuggest[as-grouprank]=0&amp;autosuggest[as-overallrank]=0&amp;autosuggest[orig-query]=&amp;autosuggest[as-shown]=off&amp;Search=%C2%A0&amp;otracker=start&amp;_r=YSWdYULYzr4VBYklfpZRbw--&amp;_l=pMHn9vNCOBi05LKC_PwHFQ--&amp;ref=a2c6fadc-2e24-4412-be6a-ce02c9707310&amp;selmitem=All+Categories'.format(
        itemName)
    r = urllib2.Request(link, headers={"User-Agent": "Python-urlli~"})
    try:
        response = urllib2.urlopen(r)
    except:
        print "Internet connection error"
        return
    thePage = response.read()
    soup = bs4.BeautifulSoup(thePage)

    firstBlockSoup = soup.find('div', attrs={'class': 'product-unit'})
    if not firstBlockSoup:
        firstBlockSoup = soup.find('div', attrs={'class': 'size1of4 fk-medium-atom unit'})
        if not firstBlockSoup:
            print "Item Not Found"
            return

    print "Item found"
    return


findItem("galaxy s advance")
findItem("Giordano Analog Watch")
findItem("nosuchitemfound")
</snippet></ROW><ROW><id>16268682</id><snippet>Item found
Item found
Item Not Found
</snippet></ROW><ROW><id>16268682</id><snippet>"0 results found" in soup.text</snippet></ROW><ROW><id>16268743</id><snippet>generic_tool.GenericTool</snippet></ROW><ROW><id>16268743</id><snippet>class GenericToolMeta(type):
    """Meta classs that is used by Tools to register in a central dictionary."""
    tools = {}

    def __new__(meta, classname, bases, classDict):
        new_class = type.__new__(meta, classname, bases, classDict)

        try:
            meta.tools[new_class.id] = new_class.title
        except AttributeError:
            pass
        return new_class

class GenericTool(object):
    __metaclass__ = GenericToolMeta
</snippet></ROW><ROW><id>16268743</id><snippet>__metaclass__</snippet></ROW><ROW><id>16268743</id><snippet>GenericTool</snippet></ROW><ROW><id>16268743</id><snippet>Tools</snippet></ROW><ROW><id>16268743</id><snippet>$ python
Python 2.7.3 (default, Jan  2 2013, 13:56:14) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import generic_tool
&gt;&gt;&gt; generic_tool.GenericToolMeta.tools
{}
&gt;&gt;&gt; import toola
&gt;&gt;&gt; generic_tool.GenericToolMeta.tools
{'tool_a': 'Tool A'}
&gt;&gt;&gt; import toolb
&gt;&gt;&gt; generic_tool.GenericToolMeta.tools
{'tool_a': 'Tool A', 'tool_b': 'Tool B'}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16268822</id><snippet>def application(environ, start_response):
    content_type = environ.get('CONTENT_TYPE', 'text/plain')
    headers = [('Content-Type', content_type)]
    if 'CONTENT_LENGTH' in environ:
        headers.append(('Content-Length', environ['CONTENT_LENGTH']))
    start_response('200 OK', headers)
    input = environ.get('wsgi.input')
    if input is None:
        yield ''
        return
    while True:
        datum = input.read(4096)  # or so
        if not datum:
            return
        yield datum
</snippet></ROW><ROW><id>16268822</id><snippet>yield</snippet></ROW><ROW><id>16268822</id><snippet>Transfer-Encoding: chunked</snippet></ROW><ROW><id>16268899</id><snippet>mylist = [4, 'b', 'e', 21, 5]
</snippet></ROW><ROW><id>16268899</id><snippet>[</snippet></ROW><ROW><id>16268899</id><snippet>mylist</snippet></ROW><ROW><id>16268899</id><snippet>list</snippet></ROW><ROW><id>16268899</id><snippet>list</snippet></ROW><ROW><id>16268899</id><snippet>for n in mylist:
</snippet></ROW><ROW><id>16268899</id><snippet>mylist</snippet></ROW><ROW><id>16268899</id><snippet>n</snippet></ROW><ROW><id>16268899</id><snippet>for</snippet></ROW><ROW><id>16268899</id><snippet>print n
</snippet></ROW><ROW><id>16268899</id><snippet>n</snippet></ROW><ROW><id>16268899</id><snippet>n</snippet></ROW><ROW><id>16268899</id><snippet>n</snippet></ROW><ROW><id>16268899</id><snippet>for</snippet></ROW><ROW><id>16268956</id><snippet>raw_input</snippet></ROW><ROW><id>16268956</id><snippet>print "1234" * 2.20462
</snippet></ROW><ROW><id>16268956</id><snippet>kilo = float(raw_input())
pounds = 2.20462

print kilo * pounds
</snippet></ROW><ROW><id>16268956</id><snippet>print "abc" * 3   # prints "abcabcabc"
</snippet></ROW><ROW><id>16268966</id><snippet>GetSearch</snippet></ROW><ROW><id>16268966</id><snippet>twitter</snippet></ROW><ROW><id>16268966</id><snippet># -*- coding: utf-8 -*-
from twitter import *

t = Twitter(auth=OAuth(token="...", token_secret="...", consumer_key="...", consumer_secret="...")))

print t.search.tweets(q=u"您说英语吗")
</snippet></ROW><ROW><id>16268994</id><snippet>s.source = source</snippet></ROW><ROW><id>16268994</id><snippet>s.datasource = source</snippet></ROW><ROW><id>16269242</id><snippet>lxml</snippet></ROW><ROW><id>16269242</id><snippet>html5lib</snippet></ROW><ROW><id>16269334</id><snippet>zip</snippet></ROW><ROW><id>16269334</id><snippet>In [66]: nums = ((4, 5, 6), (5, 6, 7), (2, 3))

In [67]: baselines = (1, 0.5, 3)

In [68]: tuple( tuple( val-y for val in x ) for x,y in zip (nums,baselines ))
Out[68]: ((3, 4, 5), (4.5, 5.5, 6.5), (-1, 0))
</snippet></ROW><ROW><id>16269427</id><snippet>itemgetter</snippet></ROW><ROW><id>16269427</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; map(itemgetter(2), alist)
[3, 6, 9]
</snippet></ROW><ROW><id>16269427</id><snippet>only_some_values = [[x[2]] for x in alist]
</snippet></ROW><ROW><id>16269530</id><snippet>import matplotlib.pylab
import numpy as np

for q in range(1,10):
    # create a random, 100 length array
    s_A_approx = np.random.randint(0, 100, 100)
    # note I had to make q a string to avoid an AttributeError when 
    # initializing the legend
    matplotlib.pylab.plot(s_A_approx, marker='.', linestyle='None', label=str(q))

matplotlib.pylab.legend(loc='upper left')
matplotlib.pylab.show()
</snippet></ROW><ROW><id>16269530</id><snippet>&gt;&gt;&gt; import matplotlib
&gt;&gt;&gt; matplotlib.__version__
'1.0.1'
</snippet></ROW><ROW><id>16269540</id><snippet>coo_matrix.getrow().todense()</snippet></ROW><ROW><id>16269540</id><snippet>csr_matrix</snippet></ROW><ROW><id>16269540</id><snippet>In [9]: from random import sample

In [10]: A = csr_matrix(...)

In [11]: n = A.shape[0]

In [12]: indices = sample(range(n), 4*n/5)

In [13]: A[indices].todense()
</snippet></ROW><ROW><id>16269565</id><snippet>s = set(big_list)
sum(1 for x in re.finditer(r'\b\w+\b',sentence) if x.group() in s)
</snippet></ROW><ROW><id>16269644</id><snippet># Let's use some useful pieces of the awesome standard library
from collections import namedtuple, Counter

# Define a simple structure to hold the properties of each entry in corpus
CorpusEntry = namedtuple('CorpusEntry', ['word', 'lemma', 'tag'])

# Use a context manager ("with...") to automatically close the file when we no
# longer need it
with open('corpus.vert') as c:
    corpus = []
    for line in c:
        if len(line.strip()) &gt; 1 and not line.startswith('&lt;'):
            # Remove the newline character and split at tabs
            word, lemma, tag = line.strip().split('\t')
            # Put the obtained values in the structure
            entry = CorpusEntry(word, lemma, tag)
            # Put the structure in the corpus list
            corpus.append(entry)

# It's practical to wrap the counting in a function
def get_frequencies(lemma):
    # Create a set of indices at which the lemma occurs in corpus. We use a
    # set because it is more efficient for the next part, checking if some
    # index is in this set
    lemma_indices = set()
    # Loop over corpus without manual indexing; enumerate provides information
    # about the current index and the value (some CorpusEntry added earlier).
    for index, entry in enumerate(corpus):
        if entry.lemma == lemma:
            lemma_indices.add(index)

    # Now that we have the indices at which the lemma occurs, we can loop over
    # corpus again and for each entry check if it is either one before or
    # one after the lemma. If so, add the entry's lemma to a new set.
    related_lemmas = set()
    for index, entry in enumerate(corpus):
        before_lemma = index+1 in lemma_indices
        after_lemma = index-1 in lemma_indices
        if before_lemma or after_lemma:
            related_lemmas.add(entry.lemma)

    # Finally, we need to count the number of occurrences of those related
    # lemmas
    counter = Counter()
    for entry in corpus:
        if entry.lemma in related_lemmas:
            counter[entry.lemma] += 1

    return counter

print get_frequencies('in')
# Counter({'the': 2, 'union': 1, 'restriction': 1, 'danger': 1})
</snippet></ROW><ROW><id>16269644</id><snippet>with open('corpus.vert') as c:
    corpus = [CorpusEntry(*line.strip().split('\t')) for line in c
              if len(line.strip() &gt; 1) and not line.startswith('&lt;')]

def get_frequencies(lemma):
    lemma_indices = {index for index, entry in enumerate(corpus)
                     if entry.lemma == lemma}
    related_lemmas = {entry.lemma for index, entry in enumerate(corpus)
                      if lemma_indices &amp; {index+1, index-1}}
    return Counter(entry.lemma for entry in corpus
                   if entry.lemma in related_lemmas)
</snippet></ROW><ROW><id>16269644</id><snippet>def get_frequencies(lemma):
    counter = Counter()
    related_lemmas = set()
    for index, entry in enumerate(corpus):
        counter[entry.lemma] += 1
        if entry.lemma == lemma:
            if index &gt; 0:
                related_lemmas.add(corpus[index-1].lemma)
            if index &lt; len(corpus)-1:
                related_lemmas.add(corpus[index+1].lemma)
    return {lemma: frequency for lemma, frequency in counter.iteritems()
            if lemma in related_lemmas}
</snippet></ROW><ROW><id>16269755</id><snippet>is</snippet></ROW><ROW><id>16269755</id><snippet>==</snippet></ROW><ROW><id>16269755</id><snippet>a is b</snippet></ROW><ROW><id>16269755</id><snippet>id(a) == id(b)</snippet></ROW><ROW><id>16269774</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>16269774</id><snippet>split</snippet></ROW><ROW><id>16269774</id><snippet>:</snippet></ROW><ROW><id>16269774</id><snippet>strip</snippet></ROW><ROW><id>16269774</id><snippet>my_dict = {}
with open('some file.txt', 'r') as f:
    for line in f:
        key, value = line.split(':')
        my_dict[key.strip()] = int(value)
</snippet></ROW><ROW><id>16269941</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>16269941</id><snippet>python -c "import sys; print sys.path"
</snippet></ROW><ROW><id>16269941</id><snippet>:</snippet></ROW><ROW><id>16269941</id><snippet>python -c "import sys; print ':'.join(x for x in sys.path if x)"
</snippet></ROW><ROW><id>16269961</id><snippet>.buffer</snippet></ROW><ROW><id>16269961</id><snippet>pathbytes= path.encode(encoding, errors= 'replace')
sys.stdout.buffer.write(pathbytes)
</snippet></ROW><ROW><id>16270010</id><snippet>with open('numbers.txt', 'r') as my_file:
    try:
        data = [float(n) for n in my_file.read().split()]
    except (IOError, ValueError):
        data = []
total = sum(data)
average = total / len(data)
print('Numbers: {nums}\nTotal: {total}\nAverage: {average}'.format(nums = data, total = total, average = average))
</snippet></ROW><ROW><id>16270026</id><snippet>import numpy as np

def is_pos_def(x):
    return np.all(np.linalg.eigvals(x) &gt; 0)
</snippet></ROW><ROW><id>16270145</id><snippet>files = ['data1.txt', 'data2.txt',...,'dataN.txt']
</snippet></ROW><ROW><id>16270145</id><snippet>data = {}
for file in files:
   data[file] = {}
   with open(file,'r') as f:
      lines=[int(line.strip()) for line in f]
      data[file]['temps'] = lines[::2]            #even lines just read
      data[file]['pressures'] = lines[1::2]       #odd lines
</snippet></ROW><ROW><id>16270145</id><snippet> {'data1.txt': {'temps': [1, 2, 3,...], 'pressures': [1,2,3,...]},
  'data2.txt': {'temps': [x,y,z,...], 'pressures': [...]},
  ...}
</snippet></ROW><ROW><id>16270145</id><snippet>max(data['data1.txt']['temps'])
</snippet></ROW><ROW><id>16270145</id><snippet>data = {}
for i in range(100):
    item = 'file' + str(i)
    data[item] = {}
    kind_like_file_of_nums = [float(x) for x in range(10)]
    data[item]['temps'] = kind_like_file_of_nums[0::2]
    data[item]['pres'] = kind_like_file_of_nums[1::2]

print(data)
</snippet></ROW><ROW><id>16270156</id><snippet>list.append</snippet></ROW><ROW><id>16270156</id><snippet>None</snippet></ROW><ROW><id>16270156</id><snippet>newprefix</snippet></ROW><ROW><id>16270156</id><snippet>None</snippet></ROW><ROW><id>16270156</id><snippet>newprefix = prefix.append( rest[i])
</snippet></ROW><ROW><id>16270219</id><snippet>hello</snippet></ROW><ROW><id>16270219</id><snippet>hello</snippet></ROW><ROW><id>16270219</id><snippet>models.py</snippet></ROW><ROW><id>16270219</id><snippet>testApp</snippet></ROW><ROW><id>16270219</id><snippet>testApp</snippet></ROW><ROW><id>16270219</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>16270219</id><snippet>from testApp.models.hello import title</snippet></ROW><ROW><id>16270219</id><snippet>title</snippet></ROW><ROW><id>16270219</id><snippet>def contato(request):
    form = hello()
    title = form.title
    return render_to_response(
       'hello.html',
        locals(),
        context_instance=RequestContext(request),
    )

def hello_template(request):
    t = get_template('hello.html')
    # see here the initialization and the access to the class field 'title'
    title = hello().title
    html = t.render(Context({'name' : title}))
    return HttpResponse(html)
</snippet></ROW><ROW><id>16270313</id><snippet>[^ -~]</snippet></ROW><ROW><id>16270387</id><snippet>newprefix = prefix[:]
</snippet></ROW><ROW><id>16270387</id><snippet>list</snippet></ROW><ROW><id>16270387</id><snippet>newprefix = list(prefix)
</snippet></ROW><ROW><id>16270387</id><snippet>def perm(prefix, rest):
    print prefix, rest

    for i in range(len(rest)):
        perm(prefix + [rest[i]], rest[:i] + rest[i + 1:])

perm([], ['a','b','c'])
</snippet></ROW><ROW><id>16270723</id><snippet>print(sorted(sellGuide, reverse = True)[0])
</snippet></ROW><ROW><id>16270762</id><snippet>CHOICES=(
    ('f','foo'),
    ('b','bar'),
)
</snippet></ROW><ROW><id>16270762</id><snippet>nome</snippet></ROW><ROW><id>16270762</id><snippet>nome=((x,x) for x in db.query(q))
</snippet></ROW><ROW><id>16270762</id><snippet>sql</snippet></ROW><ROW><id>16270762</id><snippet>hello_template</snippet></ROW><ROW><id>16270762</id><snippet>nome</snippet></ROW><ROW><id>16270762</id><snippet>'name'</snippet></ROW><ROW><id>16270762</id><snippet>html = t.render(Context({'name' : nome}))</snippet></ROW><ROW><id>16270762</id><snippet>nome</snippet></ROW><ROW><id>16270762</id><snippet>hello.nome</snippet></ROW><ROW><id>16270762</id><snippet>nome</snippet></ROW><ROW><id>16270762</id><snippet>hello</snippet></ROW><ROW><id>16270899</id><snippet>libvtkCommonPythonD.so.5.10</snippet></ROW><ROW><id>16270899</id><snippet>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/vtk-5.10</snippet></ROW><ROW><id>16271119</id><snippet>import urllib2, re
from BeautifulSoup import BeautifulSoup   

turl = "http://rads.stackoverflow.com/amzn/click/0743273567"
toppage = urllib2.urlopen(turl)
soup = BeautifulSoup(toppage)

review_tag  = {'class':re.compile("mt9 reviewText")}
helpful_tag = {'class':re.compile("hlp")}

all_reviews = soup.findAll(attrs=review_tag)
all_helpful = soup.findAll(attrs=helpful_tag)

for text,info in zip(all_reviews, all_helpful):
    print info.string.strip()
    print '\n'.join(text.findAll(text=True)).strip()
    print "*******************************************"
</snippet></ROW><ROW><id>16271119</id><snippet>337 of 370 people found the following review helpful
Having reread this book for the first time in 20 years, I can confirm that there's a reason that it's [...]
*******************************************
114 of 123 people found the following review helpful
It's difficult to give any even-handed critique F. Scott Fitzgerald's standard-setting Jazz Age [...]
*******************************************
54 of 60 people found the following review helpful
Scott Fitzgerald, a monumental talent who only occasionally got things working right, made Gatsby great by the extraordinary invention of Nick Carraway.  Carraway as
</snippet></ROW><ROW><id>16271119</id><snippet>soup</snippet></ROW><ROW><id>16271119</id><snippet>for x in soup.body.div:
    if x.string:
        print x.string.strip()
</snippet></ROW><ROW><id>16271119</id><snippet>335 of 368 people found the following review helpful

Having reread this book for the first time in 20 years, [... more here]
</snippet></ROW><ROW><id>16271119</id><snippet>import re
x = soup.find(text=re.compile('Having reread this book'))
</snippet></ROW><ROW><id>16271119</id><snippet>print x.parent
print x.parent.parent
print x.parent.parent.parent
</snippet></ROW><ROW><id>16271298</id><snippet>__init__</snippet></ROW><ROW><id>16271298</id><snippet>class Temparature:
    def __init__(self):
        self._temp_fahr = 0

    @property
    def temp(self):
        return (self._temp_fahr - 32) * 5/9
    @temp.setter
    def temp(self, new_temp):
        self._temp_fahr = new_temp * 9 / 5 + 32
</snippet></ROW><ROW><id>16271298</id><snippet>t.temp(34)
</snippet></ROW><ROW><id>16271298</id><snippet>t.temp</snippet></ROW><ROW><id>16271298</id><snippet>@property</snippet></ROW><ROW><id>16271613</id><snippet>(-4, -2, 2)
</snippet></ROW><ROW><id>16271613</id><snippet>[4.0, -4.0, -2.0]</snippet></ROW><ROW><id>16271613</id><snippet>[(-4+1.4802973661668753e-16j), (2+2.9605947323337506e-16j), (-2.0000000000000004-1.1842378929335002e-15j)]
</snippet></ROW><ROW><id>16271613</id><snippet>10**(-15)</snippet></ROW><ROW><id>16271613</id><snippet>MAPLE</snippet></ROW><ROW><id>16271613</id><snippet>Mathematica</snippet></ROW><ROW><id>16271613</id><snippet>.real</snippet></ROW><ROW><id>16271613</id><snippet>a = 3.0+4.0j
print a.real
&gt;&gt; 3.0
</snippet></ROW><ROW><id>16271695</id><snippet>&gt;&gt;&gt; drink = ["f","a","n","t","a"]
&gt;&gt;&gt; count = 0
&gt;&gt;&gt; for c in drink:
        if c == 'a':
            count += 1


&gt;&gt;&gt; count
2
</snippet></ROW><ROW><id>16272129</id><snippet>key</snippet></ROW><ROW><id>16272129</id><snippet>sort</snippet></ROW><ROW><id>16272129</id><snippet>a.sort(key=lambda item: (len(item[1]), item[0]))
</snippet></ROW><ROW><id>16272129</id><snippet>def sort_func(item):
    return len(item[1]), item[0]

a.sort(key=sort_func)
</snippet></ROW><ROW><id>16272220</id><snippet>x</snippet></ROW><ROW><id>16272220</id><snippet>x</snippet></ROW><ROW><id>16272220</id><snippet>permList</snippet></ROW><ROW><id>16272220</id><snippet>x = x[:]</snippet></ROW><ROW><id>16272220</id><snippet>def ourPermutations(n):
    x=list(range(1,n+1))
    permList = []
    permList+=[x]

    xcopy = x[:]
    finalPerm = xcopy[::-1]

    while x != finalPerm:
        x = x[:]
        istar = n-2
        while x[istar] &gt; x[istar+1]:
            istar -= 1
        jstar = n-1
        while x[jstar] &lt; x[istar]:
            jstar -= 1
        x[istar],x[jstar] = x[jstar],x[istar]
        if istar+1 == n-1:
            x = x[:]
        else:
            a = x[istar+1:]
            a = a[::-1]
            x = x[:istar+1] + a
        permList += [x]

    return permList

&gt;&gt;&gt; ourPermutations(3)
[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]
&gt;&gt;&gt; ourPermutations(4)
[[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2], [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3], [2, 4, 3, 1], [3, 1, 2, 4], [3, 1, 4, 2], [3, 2, 1, 4], [3, 2, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [
4, 1, 2, 3], [4, 1, 3, 2], [4, 2, 1, 3], [4, 2, 3, 1], [4, 3, 1, 2], [4, 3, 2, 1]]
</snippet></ROW><ROW><id>16272220</id><snippet>def our_permutations(n):
    x = list(range(1, n+1))
    perm_list = [x]
    final_perm = x[::-1]

    while x != final_perm:
        x = x[:]
        istar = n-2
        while x[istar] &gt; x[istar+1]:
            istar -= 1
        jstar = n-1
        while x[jstar] &lt; x[istar]:
            jstar -= 1
        x[istar],x[jstar] = x[jstar],x[istar]
        if istar+1 != n-1:
            a = x[istar+1:]
            a = a[::-1]
            x = x[:istar+1] + a
        perm_list += [x]

    return perm_list
</snippet></ROW><ROW><id>16272220</id><snippet>itertools.permutation</snippet></ROW><ROW><id>16272366</id><snippet>print_spam()</snippet></ROW><ROW><id>16272366</id><snippet>return</snippet></ROW><ROW><id>16272366</id><snippet>print</snippet></ROW><ROW><id>16272366</id><snippet>def print_spam():
    print('spam')
    return 'spam'
</snippet></ROW><ROW><id>16272366</id><snippet>None</snippet></ROW><ROW><id>16272366</id><snippet>g</snippet></ROW><ROW><id>16272366</id><snippet>spam</snippet></ROW><ROW><id>16272393</id><snippet>n = 2
[[[i&gt;&gt;k&amp;1 for k in range(j, j-8, -1)] for j in range(8*n-1, 0, -8)] 
 for i in range(2**(8*n))]
</snippet></ROW><ROW><id>16272393</id><snippet>n</snippet></ROW><ROW><id>16272393</id><snippet>xrange</snippet></ROW><ROW><id>16272393</id><snippet>def byte_array(n):
    for i in range(2**(8*n)):
        yield [[i&gt;&gt;k&amp;1 for k in range(j, j-8, -1)] for j in range(8*n-1, 0, -8)]
</snippet></ROW><ROW><id>16272393</id><snippet>&gt;&gt;&gt; i = byte_array(4)
&gt;&gt;&gt; next(i)
[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]
&gt;&gt;&gt; next(i)
[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1]]
</snippet></ROW><ROW><id>16272393</id><snippet>[[i&gt;&gt;j&amp;1 for j in range(8*n-1, -1, -1)] for i in range(2**(8*n))]
</snippet></ROW><ROW><id>16272393</id><snippet>def byte_array(n):
    for i in range(2**(8*n)):
        yield [i&gt;&gt;j&amp;1 for j in range(8*n-1, -1, -1)]
</snippet></ROW><ROW><id>16272758</id><snippet>microsecond=0</snippet></ROW><ROW><id>16272758</id><snippet>&gt;&gt;&gt; now = datetime.datetime.now().replace(microsecond=0)
&gt;&gt;&gt; print now
2013-04-29 12:47:28
</snippet></ROW><ROW><id>16272945</id><snippet>tuple</snippet></ROW><ROW><id>16272945</id><snippet>&gt;&gt;&gt; # from functools import reduce (uncomment in Py3)
&gt;&gt;&gt; x = {"one":{"one":1},"two":2}
&gt;&gt;&gt; def access(d, keys):
        return reduce(dict.get, keys, d)


&gt;&gt;&gt; access(x, ("two", ))
2
&gt;&gt;&gt; access(x, ("one", "one"))
1
</snippet></ROW><ROW><id>16273094</id><snippet>'</snippet></ROW><ROW><id>16273094</id><snippet>"</snippet></ROW><ROW><id>16273497</id><snippet>@id</snippet></ROW><ROW><id>16273497</id><snippet>fname = root.xpath('//Employee[id/text()="999"]/fname')
</snippet></ROW><ROW><id>16273497</id><snippet>id</snippet></ROW><ROW><id>16273497</id><snippet>Employee</snippet></ROW><ROW><id>16273497</id><snippet>Employee</snippet></ROW><ROW><id>16273555</id><snippet>pylintrc</snippet></ROW><ROW><id>16273555</id><snippet>--rcfile=...</snippet></ROW><ROW><id>16273555</id><snippet>pylintrc</snippet></ROW><ROW><id>16273555</id><snippet>pylintrc</snippet></ROW><ROW><id>16273555</id><snippet>PYLINTRC</snippet></ROW><ROW><id>16273555</id><snippet>~/.pylintrc</snippet></ROW><ROW><id>16273555</id><snippet>/etc/pylintrc</snippet></ROW><ROW><id>16273595</id><snippet>&gt;&gt;&gt; country = 'CANADA'
&gt;&gt;&gt; '*'.join(country)
'C*A*N*A*D*A'
</snippet></ROW><ROW><id>16273595</id><snippet>&gt;&gt;&gt; country = 'CANADA'
&gt;&gt;&gt; tag = ''
&gt;&gt;&gt; for letter in country:
        tag += letter+'*'


&gt;&gt;&gt; sys.stdout.write(tag[:-1]) # everything up until the last character
C*A*N*A*D*A
</snippet></ROW><ROW><id>16273749</id><snippet>str.split</snippet></ROW><ROW><id>16273749</id><snippet>list</snippet></ROW><ROW><id>16273749</id><snippet>&gt;&gt;&gt; ''.split(';')
['']
</snippet></ROW><ROW><id>16273749</id><snippet>any</snippet></ROW><ROW><id>16273749</id><snippet>any</snippet></ROW><ROW><id>16273749</id><snippet>&gt;&gt;&gt; any(''.split(';'))
False
&gt;&gt;&gt; any('a;'.split(';'))
True
&gt;&gt;&gt; ';'.split(';')
['', '']
&gt;&gt;&gt; any(';'.split(';'))
False
</snippet></ROW><ROW><id>16273749</id><snippet>filter</snippet></ROW><ROW><id>16273749</id><snippet>filter</snippet></ROW><ROW><id>16273749</id><snippet>&gt;&gt;&gt; filter(None, ';'.split(';'))
[]
</snippet></ROW><ROW><id>16273749</id><snippet>&gt;&gt;&gt; [s for s in ';'.split(';') if s]
[]
</snippet></ROW><ROW><id>16273749</id><snippet>str.split</snippet></ROW><ROW><id>16273749</id><snippet>&gt;&gt;&gt; ''.split()
[]
&gt;&gt;&gt; '    '.split()   #white space string
[]
</snippet></ROW><ROW><id>16273749</id><snippet>S.split([sep [,maxsplit]]) -&gt; list of strings</snippet></ROW><ROW><id>16273749</id><snippet>S</snippet></ROW><ROW><id>16273749</id><snippet>sep</snippet></ROW><ROW><id>16273749</id><snippet>maxsplit</snippet></ROW><ROW><id>16273749</id><snippet>maxsplit</snippet></ROW><ROW><id>16273749</id><snippet>sep</snippet></ROW><ROW><id>16273749</id><snippet>None</snippet></ROW><ROW><id>16273852</id><snippet>a</snippet></ROW><ROW><id>16273852</id><snippet>b</snippet></ROW><ROW><id>16273852</id><snippet>a * x + b = 0</snippet></ROW><ROW><id>16273852</id><snippet>-</snippet></ROW><ROW><id>16273852</id><snippet>-</snippet></ROW><ROW><id>16273852</id><snippet>+</snippet></ROW><ROW><id>16273852</id><snippet>=</snippet></ROW><ROW><id>16273852</id><snippet>*</snippet></ROW><ROW><id>16273852</id><snippet>/</snippet></ROW><ROW><id>16273852</id><snippet>x</snippet></ROW><ROW><id>16273852</id><snippet>=</snippet></ROW><ROW><id>16273852</id><snippet>x</snippet></ROW><ROW><id>16273852</id><snippet>0</snippet></ROW><ROW><id>16273852</id><snippet>x
x + 9
// set the "we've found minus sign" bit to negate the first thing that follows
x + 7 // and clear the negative bit
x + 3
2 * x + 3
// set the "we've found the equals sign" bit to negate everything that follows
3 * x + 3
3 * x - 2
3 * x - 1
3 * x - 4
4 * x - 4
</snippet></ROW><ROW><id>16273852</id><snippet>a * x + b = 0</snippet></ROW><ROW><id>16273852</id><snippet>x = - b/a</snippet></ROW><ROW><id>16273852</id><snippet>acc = None
for idx, ch in enumerate(input):
    if ch in '1234567890':
        if acc is None: acc = 0
        acc = 10 * acc + int(ch)
        continue
    if acc != None:
        yield acc
        acc = None
    if ch in '+-=x':
        yield ch
    elif ch == ' ':
        pass
    else:
        raise ValueError('illegal character "%s" at %d' % (ch, idx))
</snippet></ROW><ROW><id>16273852</id><snippet>return input.split()
</snippet></ROW><ROW><id>16274038</id><snippet>import xlwt

style = xlwt.easyxf('align: rotation 90')

workbook = xlwt.Workbook()
worksheet = workbook.add_sheet('Test')
worksheet.write(0, 0, label='Formatted value', style=style)
workbook.save('test.xls')
</snippet></ROW><ROW><id>16274038</id><snippet>rota</snippet></ROW><ROW><id>16274038</id><snippet>rotation</snippet></ROW><ROW><id>16274286</id><snippet>os.listdir()</snippet></ROW><ROW><id>16274286</id><snippet>os.path.isdir()</snippet></ROW><ROW><id>16274286</id><snippet>os.path.isfile()</snippet></ROW><ROW><id>16274286</id><snippet>os.rename()</snippet></ROW><ROW><id>16274286</id><snippet>os.remove()</snippet></ROW><ROW><id>16274286</id><snippet>os.path.splitext()</snippet></ROW><ROW><id>16274286</id><snippet>file.endswith('.txt')</snippet></ROW><ROW><id>16274306</id><snippet>from dateutil import parser


Three_days_ago = datetime.datetime.utcnow()-datetime.timedelta(days = 3)
for tweet in tweets:
    tweeted_datetime = parser.parse(tweet.created_at)
    if tweeted_datetime &gt; Three_days_ago:
        print tweet, tweeted_datetime.strftime("%Y-%m-%d %H:%M:%S %p")
</snippet></ROW><ROW><id>16274306</id><snippet>strftime</snippet></ROW><ROW><id>16274326</id><snippet>jobtype</snippet></ROW><ROW><id>16274326</id><snippet>def index(request, jobtype=None):
    ...
    if jobtype is not None:
        do_something()
    ...
    return render_to_response('index.html', locals())
</snippet></ROW><ROW><id>16274348</id><snippet>raw_input</snippet></ROW><ROW><id>16274348</id><snippet>def add(a,b):   
    return a + b

print "The first number you want to add?"
a = int(raw_input("First no: "))
print "What's the second number you want to add?"
b = int(raw_input("Second no: "))

result = add(a, b)

print "The result is: %r." % result 
</snippet></ROW><ROW><id>16274348</id><snippet>The first number you want to add?

First no: 5
What's the second number you want to add?

Second no: 6
The result is: 11.
</snippet></ROW><ROW><id>16274466</id><snippet>traceback</snippet></ROW><ROW><id>16274466</id><snippet>import sys, traceback

def run_user_code(envdir):
    source = raw_input("&gt;&gt;&gt; ")
    try:
        exec source in envdir
    except:
        print "Exception in user code:"
        print '-'*60
        traceback.print_exc(file=sys.stdout)
        print '-'*60

envdir = {}
while 1:
    run_user_code(envdir)
</snippet></ROW><ROW><id>16274489</id><snippet>this.column</snippet></ROW><ROW><id>16274489</id><snippet>create</snippet></ROW><ROW><id>16274489</id><snippet>__init__</snippet></ROW><ROW><id>16274489</id><snippet>this.row</snippet></ROW><ROW><id>16274489</id><snippet>Tile</snippet></ROW><ROW><id>16274489</id><snippet>i</snippet></ROW><ROW><id>16274489</id><snippet>j</snippet></ROW><ROW><id>16274489</id><snippet>row</snippet></ROW><ROW><id>16274489</id><snippet>columns</snippet></ROW><ROW><id>16274489</id><snippet>j=0:
   i=0:
      column.append(Tile(i, j))
      # column is [Tile(0, 0)]
      # row is []

   i=1:
      column.append(Tile(i, j))
      # column is [Tile(0, 0), Tile(0, 1)]
      # row is []

   row.append(column)
   # column is [Tile(0, 0), Tile(0, 1)]
   # row is [[Tile(0, 0), Tile(0, 1)]]

j=1: # column is not reset!
   i=0:
      column.append(Tile(i, j))
      # column is [Tile(0, 0), Tile(0, 1), Tile(1, 0)]
      # row is [[Tile(0, 0), Tile(0, 1), Tile(1, 0)]]

   i=1:
      column.append(Tile(i, j))
      # column is [Tile(0, 0), Tile(0, 1), Tile(1, 0), Tile(1, 1)]
      # row is [[Tile(0, 0), Tile(0, 1), Tile(1, 0), Tile(1, 1)]]

   row.append(column)
   # column is [Tile(0, 0), Tile(0, 1), Tile(1, 0), Tile(1, 1)]
   # row is [[Tile(0, 0), Tile(0, 1), Tile(1, 0), Tile(1, 1)],
   #          [Tile(0, 0), Tile(0, 1), Tile(1, 0), Tile(1, 1)]]
</snippet></ROW><ROW><id>16274489</id><snippet>row</snippet></ROW><ROW><id>16274489</id><snippet>column</snippet></ROW><ROW><id>16274489</id><snippet>Tile(0, 0)</snippet></ROW><ROW><id>16274489</id><snippet>Tile(0,1)</snippet></ROW><ROW><id>16274489</id><snippet>Tile(1, 0)</snippet></ROW><ROW><id>16274489</id><snippet>Tile(1, 1)</snippet></ROW><ROW><id>16274489</id><snippet>def create(this, t):
    if t == "grasslands":
        for j in range(0, this.numRows):

            column = [] # Create a new list! This is the key!

            for i in range(0, this.numCollums):
                column.append(this.Tile("grass",
                              j * this.tileWidth,
                              i * this.tileHeight))
            this.row.append(column)
</snippet></ROW><ROW><id>16274489</id><snippet>self.column</snippet></ROW><ROW><id>16274751</id><snippet>create()</snippet></ROW><ROW><id>16274751</id><snippet>super(myclass, self).create(...)</snippet></ROW><ROW><id>16274751</id><snippet>total_workers</snippet></ROW><ROW><id>16274751</id><snippet>total_workers</snippet></ROW><ROW><id>16274751</id><snippet>create</snippet></ROW><ROW><id>16274751</id><snippet>fields.function</snippet></ROW><ROW><id>16274751</id><snippet>def _compute_workers(self, cr, uid, ids, fieldname, arg, context=None):
    result = dict.fromkeys(ids, False) # default result for each id
    for this in self.browse(cr, uid, ids, context=context):
        # let's assume you have a one2many called worker_ids
        result[this.id] = len(this.worker_ids)
    return result

_columns = {
    'total_workers': fields.function(_compute_workers, type="integer",
                                     string="Total Workers")
}
</snippet></ROW><ROW><id>16274924</id><snippet>wx.lib.sheet.CSheet</snippet></ROW><ROW><id>16274924</id><snippet>wx.grid.Grid</snippet></ROW><ROW><id>16274924</id><snippet>Copy</snippet></ROW><ROW><id>16274924</id><snippet>Paste</snippet></ROW><ROW><id>16274924</id><snippet>CSheet</snippet></ROW><ROW><id>16274987</id><snippet>Contacts</snippet></ROW><ROW><id>16274987</id><snippet>House</snippet></ROW><ROW><id>16274987</id><snippet>def foo(self):
    try:
        from Contacts.Models import Contact
    except ImportError:
        return
    ... use Contact here
</snippet></ROW><ROW><id>16274987</id><snippet>try:
    from Contacts.Models import Contact
except ImportError:
    Contact = None


...
if Contact is not None:
    ... use Contact ...
</snippet></ROW><ROW><id>16274987</id><snippet>IContactProvider</snippet></ROW><ROW><id>16274987</id><snippet>IContactProvider</snippet></ROW><ROW><id>16275097</id><snippet>view.setWindowFlags(Qt.FramelessWindowHint)
</snippet></ROW><ROW><id>16275097</id><snippet>view.setWindowFlags(Qt.CustomizeWindowHint)
</snippet></ROW><ROW><id>16275547</id><snippet>-&gt;def fun():</snippet></ROW><ROW><id>16275631</id><snippet>numpy.savetext()</snippet></ROW><ROW><id>16275631</id><snippet>import numpy

a = ([1,2,3,4,5])
b = ([6,7,8,9,10])

out = []

for i,j in zip(a,b):
   print i,j
   out.append( (i,j) )

numpy.savetxt('test.txt',out)
</snippet></ROW><ROW><id>16275636</id><snippet>F:\Tools\python-2.7.3\python.exe F:/Projects/Python/udacity/udacity/simpsons.py
1.6054029768

Process finished with exit code 0
</snippet></ROW><ROW><id>16275636</id><snippet>def simpsons_rule(f, a, b, n):
    """
    Implements simpsons_rule 
    :param f: function to integrate
    :param a: start point
    :param b: end point 
    :param n:  number of intervals, must be even.
    :return: integral of the function
    """

    if n &amp; 1:
        print ("Error: n is not a even number.")
        return 0.0

    h = float(b - a) / n
    integral = 0.0

    x = float(a)
    for i in range(0, n / 2):
        integral += f(x) + (2.0 * f(x + h))
        x += 2 * h

    integral = (2.0 * integral) - f(a) + f(b)
    integral = h * integral / 3.0
    return integral


import math


def f_of_t(t):
    # Note: guard against singular behavior at t = 0.  
    # L'Hospital says value should be 1.0.  NAN if you don't check.
    if x == 0:
        return 1.0
    else: 
        return (math.sin(t)) / t


n = 10000
a = 0
b = 2

print(simpsons_rule(f_of_t, a, b, n))
</snippet></ROW><ROW><id>16275678</id><snippet>itertools.ifilter</snippet></ROW><ROW><id>16275678</id><snippet>filter</snippet></ROW><ROW><id>16275678</id><snippet>itertools.ifilter(predicate, iterable)</snippet></ROW><ROW><id>16275678</id><snippet>False</snippet></ROW><ROW><id>16275678</id><snippet>def predicate(line):
    if 'something' in line:
        return False # ignore it
    return True
</snippet></ROW><ROW><id>16275678</id><snippet>fin = ifilter(predicate, fin)</snippet></ROW><ROW><id>16275678</id><snippet>from itertools import izip, ifilter # on Py3 instead use normal zip and filter
f1 = ifilter(predicate, f1)
f2 = ifilter(predicate, f2)

all(x == y for x, y in izip(f1, f2))
</snippet></ROW><ROW><id>16275678</id><snippet>difflib</snippet></ROW><ROW><id>16275678</id><snippet>filcmp</snippet></ROW><ROW><id>16275678</id><snippet>filecmp</snippet></ROW><ROW><id>16275678</id><snippet>itertools.islice(fin, 1, None)</snippet></ROW><ROW><id>16275678</id><snippet>from itertools import islice, izip

def predicate(line):
    ''' you can add other general checks in here '''
    if line.startswith('Date'):
        return False # ignore it
    return True

with open('File1.txt') as f1, open('File2.txt') as f2:
    f1 = ifilter(predicate, f1)
    f2 = ifilter(predicate, f2)
    print(all(x == y for x, y in izip(f1, f2)))
</snippet></ROW><ROW><id>16275678</id><snippet>&gt;&gt;&gt; True
</snippet></ROW><ROW><id>16276080</id><snippet>writer</snippet></ROW><ROW><id>16276080</id><snippet>def process_file(source, dest):
  found_header = False
  for line in source:
    line = line.strip()
    if not header_found:
      #ignore everything until we find this text
      header_found = line.starswith('Point Number')
    elif not line:
      return #we are done when we find an empty line, I guess
    else:
      #write the needed columns
      columns = line.split()
      dest.writeline(','.join(columns[i] for i in (1, 2, 5)))

for filename in list_of_files:
  short_filename, extension = os.path.splitext(filename)
  file_out_name = short_filename + '_ed' + extension
  with open(filename, 'r') as source:
    with open(file_out_name. 'w') as dest:
      process_file(source, dest)
</snippet></ROW><ROW><id>16276248</id><snippet>class coupons(models.Model):
    # ...
    couponStore = models.ForeignKey(stores, on_delete=models.PROTECT,
                                    related_name='coupons')
    # ...
</snippet></ROW><ROW><id>16276248</id><snippet>stores.objects.exclude(coupons=None)
</snippet></ROW><ROW><id>16276386</id><snippet>matplotlib.pyplot.imread</snippet></ROW><ROW><id>16276386</id><snippet>scipy.ndimage.imread</snippet></ROW><ROW><id>16276386</id><snippet>In [25]: import Image
In [26]: img = Image.open(FILENAME)
In [32]: img.size
Out[32]: (250, 250)

In [27]: img = img.resize((160, 240), Image.ANTIALIAS)

In [28]: img.size
Out[28]: (160, 240)
</snippet></ROW><ROW><id>16276486</id><snippet>pyside-uic</snippet></ROW><ROW><id>16276486</id><snippet>.ui</snippet></ROW><ROW><id>16276486</id><snippet>opts, args = parser.parse_args()

if len(args) != 1:

    sys.stderr.write("Error: one input ui-file must be specified\n")

    sys.exit(1)

sys.exit(invoke(Driver(opts, args[0])))
</snippet></ROW><ROW><id>16276486</id><snippet>pyside-uic</snippet></ROW><ROW><id>16276486</id><snippet>cat</snippet></ROW><ROW><id>16276486</id><snippet>$ cat generated_*.py &gt; gui.py
</snippet></ROW><ROW><id>16276486</id><snippet>generated_*.py</snippet></ROW><ROW><id>16276672</id><snippet> tablewidget-&gt;setFocusPolicy(Qt::NoFocus);
</snippet></ROW><ROW><id>16276745</id><snippet>'work_offers_id':fields.many2one('bpl.work.offer', 'Work Offer', domain="['&amp;',('bpl_company_id','=',bpl_company_id),('bpl_estate_id','=',bpl_estate_id),'&amp;',('bpl_division_id','=',bpl_division_id),'|',('gang_no','=',gang_no),('date_of_offer','=',offered_date)]"),
</snippet></ROW><ROW><id>16276892</id><snippet>import sqlalchemy
import fdb
</snippet></ROW><ROW><id>16276945</id><snippet>class Image(ndb.Model): 

    file = ndb.BlobProperty()
    filename = ndb.StringProperty()
    mimetype = ndb.StringProperty()
    size = ndb.IntegerProperty()
    width = ndb.IntegerProperty()
    height = ndb.IntegerProperty()
</snippet></ROW><ROW><id>16276945</id><snippet>"""&lt;img src="/test?test=%s"&gt;&lt;/img&gt;""" %u.key())</snippet></ROW><ROW><id>16276945</id><snippet>self.response.write(&lt;the blobproperty&gt;)</snippet></ROW><ROW><id>16276945</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>16277066</id><snippet>&gt;&gt;&gt; my_tuple = ('a', [1, 2], 'b', [3, 4])
&gt;&gt;&gt; dict(zip(*[iter(my_tuple)]*2))
{'a': [1, 2], 'b': [3, 4]}
</snippet></ROW><ROW><id>16277066</id><snippet>{my_tuple[0]: my_tuple[1]}
</snippet></ROW><ROW><id>16277131</id><snippet>from stopwords import allStopWords</snippet></ROW><ROW><id>16277131</id><snippet>mapfn</snippet></ROW><ROW><id>16277582</id><snippet>&gt;&gt;&gt; myList = {'1':{'name':'x','age':'18'},'2':{'name':'y','age':'19'},'3':{'name':'z','age':'20'}}
&gt;&gt;&gt; for k, d in myList.items():
    print k, d

1 {'age': '18', 'name': 'x'}
3 {'age': '20', 'name': 'z'}
2 {'age': '19', 'name': 'y'}
</snippet></ROW><ROW><id>16277582</id><snippet>&gt;&gt;&gt; l = [{'a':'1'},{'b':'2'},{'c':'3'}]
&gt;&gt;&gt; for d in l:
    print d

{'a': '1'}
{'b': '2'}
{'c': '3'}
</snippet></ROW><ROW><id>16277582</id><snippet>&gt;&gt;&gt; D = {'d1': {'a':'1'}, 'd2': {'b':'2'}, 'd3': {'c':'3'}}
&gt;&gt;&gt; for k, d in D.items():
    print d  

{'b': '2'}
{'c': '3'}
{'a': '1'}
</snippet></ROW><ROW><id>16277582</id><snippet>&gt;&gt;&gt; D = {'d1': {'a':'1'}, 'd2': {'b':'2'}, 'd3': {'c':'3'}}
&gt;&gt;&gt; for k, d in D.items():
    print k, d

d2 {'b': '2'}
d3 {'c': '3'}
d1 {'a': '1'}
</snippet></ROW><ROW><id>16277857</id><snippet>/usr/lib/x86_64-linux-gnu</snippet></ROW><ROW><id>16277857</id><snippet>/usr/lib</snippet></ROW><ROW><id>16278416</id><snippet>from matplotlib.colors import LinearSegmentedColormap
import matplotlib.pyplot as plt
import numpy as np

def CustomCmap(from_rgb,to_rgb):

    # from color r,g,b
    r1,g1,b1 = from_rgb

    # to color r,g,b
    r2,g2,b2 = to_rgb

    cdict = {'red': ((0, r1, r1),
                   (1, r2, r2)),
           'green': ((0, g1, g1),
                    (1, g2, g2)),
           'blue': ((0, b1, b1),
                   (1, b2, b2))}

    cmap = LinearSegmentedColormap('custom_cmap', cdict)
    return cmap


fig, ax = plt.subplots(2,2, figsize=(6,6), subplot_kw={'xticks': [],'yticks': []})
fig.subplots_adjust(hspace=.1,wspace=.1)

ax = ax.ravel()

cmap1 = CustomCmap([0.00, 0.00, 0.00], [0.02, 0.75, 1.00]) # from black to +/- 5,192,255
cmap2 = CustomCmap([1.00, 1.00, 1.00], [0.02, 0.75, 1.00]) # from white to +/- 5,192,255
cmap3 = CustomCmap([1.00, 0.42, 0.04], [0.02, 0.75, 1.00]) # from +/- 255,108,10 to +/- 5,192,255
cmap4 = CustomCmap([1.00, 0.42, 0.04], [0.50, 0.50, 0.50]) # from +/- 255,108,10 to grey (128)


ax[0].imshow(np.random.rand(30,30), interpolation='none', cmap=cmap1)
ax[1].imshow(np.random.rand(30,30), interpolation='none', cmap=cmap2)
ax[2].imshow(np.random.rand(30,30), interpolation='none', cmap=cmap3)
ax[3].imshow(np.random.rand(30,30), interpolation='none', cmap=cmap4)
</snippet></ROW><ROW><id>16278761</id><snippet>VarX, VarY, ...</snippet></ROW><ROW><id>16278761</id><snippet>print('\n'.join(filter(bool, [Var1, Var2, Var3, Var4, Var5, Var6])))
</snippet></ROW><ROW><id>16278961</id><snippet>for lyr in arcpy.mapping.ListLayers(mxd, "", df):
    if lyr.name() in ['name1', 'name2', 'name3']:
        arcpy.mapping.RemoveLayout(df, lyr)
</snippet></ROW><ROW><id>16279016</id><snippet>.EnableDragGridSize(False)</snippet></ROW><ROW><id>16279016</id><snippet>.DisableDragColSize()</snippet></ROW><ROW><id>16279016</id><snippet>.DisableDragRowSize()</snippet></ROW><ROW><id>16279327</id><snippet>import re

data = "(AVP:SMTP/xx@xx.xx) R:AVP:SMS.0/+44648474 id:24"
data2 = "(AVP:SMTP/&lt;xxx@xx.xx&gt;) R:AVP:FAX.0/&lt;thisword&gt; id:25"

regex = re.compile(r"/&lt;?([^&gt;\s\)]+)")

print regex.findall(data)
print regex.findall(data2)

&gt;&gt;&gt; 
['xx@xx.xx', '+44648474']
['xxx@xx.xx', 'thisword']
</snippet></ROW><ROW><id>16279327</id><snippet>/</snippet></ROW><ROW><id>16279327</id><snippet>/</snippet></ROW><ROW><id>16279327</id><snippet>&lt;?</snippet></ROW><ROW><id>16279327</id><snippet>&lt;</snippet></ROW><ROW><id>16279327</id><snippet>(</snippet></ROW><ROW><id>16279327</id><snippet>[^&gt;\s\)]+</snippet></ROW><ROW><id>16279327</id><snippet>&gt;</snippet></ROW><ROW><id>16279327</id><snippet>\s</snippet></ROW><ROW><id>16279327</id><snippet>)</snippet></ROW><ROW><id>16279327</id><snippet>)</snippet></ROW><ROW><id>16279382</id><snippet>setuptools</snippet></ROW><ROW><id>16279382</id><snippet>--</snippet></ROW><ROW><id>16279382</id><snippet>--</snippet></ROW><ROW><id>16279382</id><snippet>nosetests</snippet></ROW><ROW><id>16279382</id><snippet>lint</snippet></ROW><ROW><id>16279382</id><snippet>--</snippet></ROW><ROW><id>16279382</id><snippet>--</snippet></ROW><ROW><id>16279382</id><snippet>$ python setup.py nosetests -- lint
</snippet></ROW><ROW><id>16279382</id><snippet>setup.py</snippet></ROW><ROW><id>16279382</id><snippet>$ python setup.py &lt;some_command&gt; &lt;options&gt;</snippet></ROW><ROW><id>16279382</id><snippet>$ python setup.py nosetests &amp;&amp; python setup.py lint
nosetests output
pylint output
</snippet></ROW><ROW><id>16279393</id><snippet>def nested_getter(d, keys):
    return reduce(dict.get, keys, d)
</snippet></ROW><ROW><id>16279926</id><snippet>// construct a map with string key (tag) and list of integers (ids) as the value
Map&lt;String, List&lt;Integer&gt;&gt; keywords = new HashMap&lt;String, List&lt;Integer&gt;&gt;();

while (rs.next()) {
    int id = rs.getInt("uid");
    String query = "select tags.tagname from tags left join tag_url_relation on tags.tid=tag_url_relation.tid where tag_url_relation.uid="+id;
    ResultSet rs1 = st1.executeQuery(query);

    while (rs1.next()){
        String tag = rs1.getString(1);

        // construct the List for this keyword
        if (!keywords.containsKey(tag)) {
            keywords.put(tag, new ArrayList&lt;Integer&gt;());
        } 
        keywords.get(tag).add(id);
    }
}
</snippet></ROW><ROW><id>16279926</id><snippet>keywords</snippet></ROW><ROW><id>16279926</id><snippet>List&lt;Integer&gt; manmohanList = keywords.get("manmohan"); // will get you a list containing the numbers 1,2,3,4
for (Integer id: manmohanList) {
    System.out.println(id); // prints 1,2,3,4
}
</snippet></ROW><ROW><id>16280007</id><snippet>^L</snippet></ROW><ROW><id>16280007</id><snippet>^L</snippet></ROW><ROW><id>16280007</id><snippet>^L</snippet></ROW><ROW><id>16280007</id><snippet>MessageError</snippet></ROW><ROW><id>16280007</id><snippet>MessageDefect</snippet></ROW><ROW><id>16280064</id><snippet>sudo apt-get install imagemagick
</snippet></ROW><ROW><id>16280130</id><snippet>c = a + b
c.sort()
&gt;&gt; [(10, 10), (15, 15), (20, 20), (25, 25)]
</snippet></ROW><ROW><id>16280130</id><snippet>c = sorted(a + b)
&gt;&gt; [(10, 10), (15, 15), (20, 20), (25, 25)]
</snippet></ROW><ROW><id>16280378</id><snippet>Value [{u'text': u'&lt;h1&gt;The quick brown fox&lt;/h1&gt;', u'created': u'2013-03-12T12:13:14', u'location': u'Berlin', u'title': u'hello world'}] for field '_data' is not of type object</snippet></ROW><ROW><id>16280378</id><snippet>list</snippet></ROW><ROW><id>16280378</id><snippet>i.e. data[0]</snippet></ROW><ROW><id>16280378</id><snippet>id</snippet></ROW><ROW><id>16280378</id><snippet>id</snippet></ROW><ROW><id>16280609</id><snippet>image.decode('base64')
</snippet></ROW><ROW><id>16280979</id><snippet>nargs='+'</snippet></ROW><ROW><id>16281115</id><snippet>class BaseTask:
    def __init__(self, settings):
        self.settings = settings[self.__class__]

class SomeTask(BaseTask):
    pass

class SomeOtherTask(BaseTask):
    pass
</snippet></ROW><ROW><id>16281169</id><snippet>.emacs</snippet></ROW><ROW><id>16281169</id><snippet>(add-hook 'python-mode-hook
          #'(lambda ()
              (setq autopair-handle-action-fns
                    (list #'autopair-default-handle-action
                          #'autopair-python-triple-quote-action))))
</snippet></ROW><ROW><id>16281507</id><snippet>__setattr__</snippet></ROW><ROW><id>16281507</id><snippet>__setattr__</snippet></ROW><ROW><id>16281507</id><snippet>class Person(object):

    def __init__(self, first_name, last_name):
        self.__dict__['first_name'] = first_name
        self.__dict__['last_name'] = last_name
    def __setattr__(self, name, value):
        if name in self.__dict__:
            super(Person, self).__setattr__(name, value)
        else:
            raise AttributeError("%s has no attribute %s" %(self.__class__.__name__, name))
</snippet></ROW><ROW><id>16281507</id><snippet>In [49]: a = Person(1, 2)

In [50]: a.a = 2
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
/usr/local/lib/python2.7/dist-packages/django/core/management/commands/shell.pyc in &lt;module&gt;()
----&gt; 1 a.a = 2

/usr/local/lib/python2.7/dist-packages/django/core/management/commands/shell.pyc in __setattr__(self, name, value)
      8             super(Person, self).__setattr__(name, value)
      9         else:
---&gt; 10             raise AttributeError("%s has no attribute %s" %(self.__class__.__name__, name))

AttributeError: Person has no attribute a
</snippet></ROW><ROW><id>16281507</id><snippet>__slots__</snippet></ROW><ROW><id>16281507</id><snippet>__slots__</snippet></ROW><ROW><id>16281507</id><snippet>class Person(object):
    __slots__ = ("first_name", "last_name")

    def __init__(self, first_name, last_name):
        self.first_name = first_name
        self.last_name = last_name
</snippet></ROW><ROW><id>16281507</id><snippet>In [32]: a = Person("a", "b")

In [33]: a.first_name
Out[33]: 'a'

In [34]: a.a = 1
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
/usr/local/lib/python2.7/dist-packages/django/core/management/commands/shell.pyc in &lt;module&gt;()
----&gt; 1 a.a = 1

AttributeError: 'Person' object has no attribute 'a'
</snippet></ROW><ROW><id>16281507</id><snippet>__dict__</snippet></ROW><ROW><id>16281624</id><snippet>class CBViewA(View):
    def get(request, *args, **kwargs):
        if 'save_as_new' in request.GET:
            return AddView.as_view()(request, *args, **kwargs)
</snippet></ROW><ROW><id>16281861</id><snippet>False</snippet></ROW><ROW><id>16281861</id><snippet>str = fo.readline()
</snippet></ROW><ROW><id>16281861</id><snippet>str</snippet></ROW><ROW><id>16281861</id><snippet>str = int(fo.readline())
</snippet></ROW><ROW><id>16281861</id><snippet>int</snippet></ROW><ROW><id>16281861</id><snippet>str</snippet></ROW><ROW><id>16282332</id><snippet>FILE ${env:HOME}/myscript.py; //you do not need this if your script is guaranteed to be installed on a cluster, this just adds script to cache.

SELECT TRANSFORM(someColumn) USING 'myscript.py' AS convert FROM mytable;
</snippet></ROW><ROW><id>16282335</id><snippet>cols</snippet></ROW><ROW><id>16282335</id><snippet>ValueError: Shape of passed values is (1, 9), indices imply (10, 9)
</snippet></ROW><ROW><id>16282335</id><snippet>my_array = np.arange(10).reshape(1,10)

cols = [random.choice(string.ascii_uppercase) for x in range(10)]

pd.DataFrame(my_array, columns=cols)
</snippet></ROW><ROW><id>16282335</id><snippet>   F  H  L  N  M  X  B  R  S  N
0  0  1  2  3  4  5  6  7  8  9
</snippet></ROW><ROW><id>16282472</id><snippet>protocol</snippet></ROW><ROW><id>16282472</id><snippet>host</snippet></ROW><ROW><id>16282472</id><snippet>url = ("%s://%s/static/css/thingy.css" %
          (self.request.protocol,
          self.request.host,)
      )
</snippet></ROW><ROW><id>16282722</id><snippet>import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure()
ax = fig.add_subplot(211, projection='3d')
ax.plot([1,2,3,4,5],[7,4,6,2,8],[4,6,8,9,2],'*')
ax.grid(True)
ax.set_title('grid on')

ax2 = fig.add_subplot(212, projection='3d')
ax2.plot([1,2,3,4,5],[7,4,6,2,8],[4,6,8,9,2],'*')
ax2.grid(False)
ax2.set_title('grid off')
plt.show()
</snippet></ROW><ROW><id>16282984</id><snippet>a = np.arange(10)
a[[range(3)+range(6,9)]] = 10
#or a[[0,1,2,6,7,8]] = 10 

print a
</snippet></ROW><ROW><id>16283067</id><snippet>test client</snippet></ROW><ROW><id>16283067</id><snippet>set_cookie</snippet></ROW><ROW><id>16283067</id><snippet>with app.test_client() as c:
    with c.session_transaction() as sess:
        sess['user_id'] = 'myuserid'
        sess['_fresh'] = True
    c.set_cookie('localhost', 'MYCOOKIE', 'cookie_value')
    resp = c.get('/someurl')
</snippet></ROW><ROW><id>16283119</id><snippet>from google.appengine.api import memcache

class MainHandler(webapp2.RequestHandler):
  def get (self, q):
    if q is None:
      q = 'index.html'

    rendered = memcache.get('static_%s' % q)
    if rendered is None:
        path = os.path.join (os.path.dirname (__file__), q)
        rendered = template.render (path, {})
    self.response.headers['Content-Type'] = 'text/html'
    self.response.write(rendered)
</snippet></ROW><ROW><id>16283222</id><snippet>Field('current_number', 'double', default=request.post_vars.start_number, ...)
</snippet></ROW><ROW><id>16283222</id><snippet>Field('current_number', 'double', compute=lambda r: r.start_number, ...)
</snippet></ROW><ROW><id>16283222</id><snippet>SQLFORM</snippet></ROW><ROW><id>16283560</id><snippet>&gt;&gt;&gt; x=[[0.3], [0.07], [0.06]]
&gt;&gt;&gt; y = [a for [a] in x]
&gt;&gt;&gt; y
[0.3, 0.07, 0.06]
</snippet></ROW><ROW><id>16283560</id><snippet>list</snippet></ROW><ROW><id>16283560</id><snippet>&gt;&gt;&gt; x=[[0.3], [0.07], [0.06]]
&gt;&gt;&gt; y = [a[0] for a in x]
&gt;&gt;&gt; y
[0.3, 0.07, 0.06]
</snippet></ROW><ROW><id>16283647</id><snippet>new</snippet></ROW><ROW><id>16283647</id><snippet>accept()</snippet></ROW><ROW><id>16283647</id><snippet>[1]</snippet></ROW><ROW><id>16283647</id><snippet>ip</snippet></ROW><ROW><id>16283647</id><snippet>connid</snippet></ROW><ROW><id>16283647</id><snippet>0</snippet></ROW><ROW><id>16283647</id><snippet>clsock = new[0]</snippet></ROW><ROW><id>16283647</id><snippet>socket()</snippet></ROW><ROW><id>16283660</id><snippet>from itertools import izip_longest

# grouping recipe from itertools documentation
def grouper(n, iterable, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)

def process_chunk(chunk):
    "Return sequence of result lines.  Chunk must be iterable."
    for i, line in enumerate(chunk):
        yield 'file-line {1:03d}; chunk-line {0:02d}\n'.format(i, int(line))
    yield '----------------------------\n'
</snippet></ROW><ROW><id>16283660</id><snippet>from StringIO import StringIO

class CtxStringIO(StringIO):
    def __enter__(self):
        return self
    def __exit__(self, *args):
        return False

infile = CtxStringIO(''.join('{}\n'.format(i) for i in xrange(19*10)))
outfile = CtxStringIO()


# this should be the main loop of your program.
# just replace infile and outfile with real file objects
with infile as ifp, outfile as ofp:
    for chunk in grouper(19, ifp, '\n'):
        ofp.writelines(process_chunk(chunk))

# see what was written to the file
print ofp.getvalue()
</snippet></ROW><ROW><id>16283660</id><snippet>file-line 000; chunk-line 00
file-line 001; chunk-line 01
file-line 002; chunk-line 02
file-line 003; chunk-line 03
file-line 004; chunk-line 04
...
file-line 016; chunk-line 16
file-line 017; chunk-line 17
file-line 018; chunk-line 18
----------------------------
file-line 019; chunk-line 00
file-line 020; chunk-line 01
file-line 021; chunk-line 02
...
file-line 186; chunk-line 15
file-line 187; chunk-line 16
file-line 188; chunk-line 17
file-line 189; chunk-line 18
----------------------------
</snippet></ROW><ROW><id>16283926</id><snippet>open</snippet></ROW><ROW><id>16283926</id><snippet>read()</snippet></ROW><ROW><id>16283926</id><snippet>import urllib2, StringIO, csv

url = 'http://winterolympicsmedals.com/medals.csv'
response = urllib2.urlopen(url).read()
output = StringIO.StringIO(response)
cr = csv.reader(output)

for row in cr:
    print row
</snippet></ROW><ROW><id>16283926</id><snippet>Year,City,Sport,Discipline,NOC,Event,Event gender,Medal
1924,Chamonix,Skating,Figure skating,AUT,individual,M,Silver
1924,Chamonix,Skating,Figure skating,AUT,individual,W,Gold
...
</snippet></ROW><ROW><id>16283930</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>16283930</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>16283930</id><snippet>mv /usr/local/bin/python /usr/local/bin/python.old
</snippet></ROW><ROW><id>16283930</id><snippet>rm /usr/local/bin/python
</snippet></ROW><ROW><id>16283930</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>16283930</id><snippet>type python</snippet></ROW><ROW><id>16283930</id><snippet>python is hashed (/usr/local/bin/python)
</snippet></ROW><ROW><id>16283930</id><snippet>hash -r</snippet></ROW><ROW><id>16283930</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>16283930</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>16283930</id><snippet>apt-get upgrade</snippet></ROW><ROW><id>16283930</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>16283930</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>16284100</id><snippet>reg = r'&lt;//a{0}&gt;|\b{0}\b'.format(keyword.name)

value = re.sub(reg,
               lambda match: match.group(1) if match.group(1) else unicode(internal_link),
               value,
               flags=....)
</snippet></ROW><ROW><id>16284340</id><snippet>cmd</snippet></ROW><ROW><id>16284340</id><snippet>b</snippet></ROW><ROW><id>16284340</id><snippet>b</snippet></ROW><ROW><id>16284340</id><snippet>0</snippet></ROW><ROW><id>16284340</id><snippet>b</snippet></ROW><ROW><id>16284344</id><snippet>s = sum(hours)*3600+sum(minutes)*60+sum(seconds)
return '%d hours %d minutes %d seconds'%( s/3600, (s%3600)/60, s%60)
</snippet></ROW><ROW><id>16284415</id><snippet>if any(obj.type == 'type 1' for obj in object_list):
    object_list = [obj for obj in object_list if obj.name != 'some_name']
</snippet></ROW><ROW><id>16284569</id><snippet>@staticmethod</snippet></ROW><ROW><id>16284569</id><snippet>class Details: # class names in Python should generally be CamelCased.
   # please note the comments below
   @staticmethod
   def age():
       print 'What is your age?' 
</snippet></ROW><ROW><id>16284569</id><snippet>self</snippet></ROW><ROW><id>16284569</id><snippet>class Details:
   def age(self):
       print 'What is your age?' 

# c.py
from b import Details
#you must create an instance of the class before you can call methods on it.
d = Details() 
d.age()
</snippet></ROW><ROW><id>16284569</id><snippet>@staticmethod</snippet></ROW><ROW><id>16284569</id><snippet>@classmethod</snippet></ROW><ROW><id>16284569</id><snippet>@classmethod</snippet></ROW><ROW><id>16284833</id><snippet>inspect</snippet></ROW><ROW><id>16284833</id><snippet>from inspect import ismethod,getmembers

class Example:
    def __repr__(self):
        return "\n".join("%s: %s" % (k, v) for (k,v) in getmembers(self,lambda x: not ismethod(x)))

    def method(self):
        return 1

a = Example()
a.foo = 'bar'
print a
</snippet></ROW><ROW><id>16284833</id><snippet>__module__</snippet></ROW><ROW><id>16284833</id><snippet>__doc__</snippet></ROW><ROW><id>16285017</id><snippet>class Example:
    x = 1
    def f(self):
        x = 2
Example().f()
print(Example.x) #=&gt; 1
</snippet></ROW><ROW><id>16285099</id><snippet>data['response']['players']</snippet></ROW><ROW><id>16285099</id><snippet>[, ]</snippet></ROW><ROW><id>16285099</id><snippet>data['players'][0]['foo']
</snippet></ROW><ROW><id>16285099</id><snippet>for player in data['response']['players']:
    print player['foo']
</snippet></ROW><ROW><id>16285101</id><snippet>x = 1
f1 = lambda: x
x = 2
f2 = lambda: x
print f1()
print f2()
</snippet></ROW><ROW><id>16285101</id><snippet>1
2
</snippet></ROW><ROW><id>16285101</id><snippet>2
2
</snippet></ROW><ROW><id>16285101</id><snippet>f1</snippet></ROW><ROW><id>16285101</id><snippet>f2</snippet></ROW><ROW><id>16285101</id><snippet>x</snippet></ROW><ROW><id>16285101</id><snippet>x = 2</snippet></ROW><ROW><id>16285101</id><snippet>2</snippet></ROW><ROW><id>16285101</id><snippet>1</snippet></ROW><ROW><id>16285480</id><snippet>for (String s: System.getProperty("java.library.path").split(";")) {
    String pydName = s + "/mypythonlib.pyd";
    File pydFile = new File(pydName);
    if (pydFile.exists()) {
        System.load(pydName);
        break;
    }
}
</snippet></ROW><ROW><id>16285519</id><snippet>rabbitmqctl add_user user password
rabbitmqctl add_vhost app2
rabbitmqctl ser_permissions app2 user ".*" ".*" ".*"
</snippet></ROW><ROW><id>16285519</id><snippet>celery -A tasks worker --broker=amqp://user:password@localhost/app2
</snippet></ROW><ROW><id>16285519</id><snippet>celery = Celery('tasks', backend='amqp', broker='amqp://user:password@localhost:5672/app2
</snippet></ROW><ROW><id>16285589</id><snippet>from tkinter import *</snippet></ROW><ROW><id>16285596</id><snippet>glob</snippet></ROW><ROW><id>16285596</id><snippet>.csv</snippet></ROW><ROW><id>16285596</id><snippet>import glob
resultsdir = "blah"

files = sorted(glob.glob(resultsdir+'/*.csv'))
while len(files) &gt;= 3:
     file1 = open(files.pop(0))
     file2 = open(files.pop(0))
     file3 = open(files.pop(0))
     # Do something
# if the number of files can't be divided by 3 do something
# with the 1 or 2 files which are left
</snippet></ROW><ROW><id>16285596</id><snippet>files.pop()</snippet></ROW><ROW><id>16285596</id><snippet>files.pop(0)</snippet></ROW><ROW><id>16285780</id><snippet>QSystemTrayIcon</snippet></ROW><ROW><id>16286076</id><snippet>...
    while True:
        for event in pygame.event.get():
            pass                                             
        print pygame.mouse.get_pos()
...
</snippet></ROW><ROW><id>16286084</id><snippet>urls_list = [MEDIA_URL + image_path for image_path in SampleModel.objects.values_list('imageFieldObj', flat=True)]</snippet></ROW><ROW><id>16286280</id><snippet>soffice</snippet></ROW><ROW><id>16286280</id><snippet>libreoffice</snippet></ROW><ROW><id>16286280</id><snippet>soffice.bin</snippet></ROW><ROW><id>16286280</id><snippet>soffice.bin</snippet></ROW><ROW><id>16286280</id><snippet>call</snippet></ROW><ROW><id>16286280</id><snippet>libreoffice</snippet></ROW><ROW><id>16286280</id><snippet>libreoffice</snippet></ROW><ROW><id>16286280</id><snippet>soffice.bin</snippet></ROW><ROW><id>16286280</id><snippet>libreoffice</snippet></ROW><ROW><id>16286280</id><snippet>unoconv</snippet></ROW><ROW><id>16286280</id><snippet>unoconv</snippet></ROW><ROW><id>16286280</id><snippet>libreoffice</snippet></ROW><ROW><id>16286280</id><snippet>call</snippet></ROW><ROW><id>16286280</id><snippet>unoconv</snippet></ROW><ROW><id>16286280</id><snippet>import</snippet></ROW><ROW><id>16286280</id><snippet>subprocess</snippet></ROW><ROW><id>16286280</id><snippet>unoconv</snippet></ROW><ROW><id>16286463</id><snippet>import bar</snippet></ROW><ROW><id>16286463</id><snippet>sys.path</snippet></ROW><ROW><id>16286463</id><snippet>import os
import sys
current_path = os.path.dirname(__file__)
sys.path.insert(0, current_path)

... rest of the script
</snippet></ROW><ROW><id>16286463</id><snippet>sys.path</snippet></ROW><ROW><id>16286558</id><snippet>test=html.xpath("//ul[@class='toc']/li[@class='level2']/div[@class='li']/a/text()='One'")
</snippet></ROW><ROW><id>16286558</id><snippet>...='One'</snippet></ROW><ROW><id>16286558</id><snippet>True[0]</snippet></ROW><ROW><id>16286558</id><snippet>'One'</snippet></ROW><ROW><id>16286558</id><snippet>test=html.xpath("//ul[@class='toc']/li[@class='level2']/div[@class='li']/a[text()='One']")
</snippet></ROW><ROW><id>16286558</id><snippet>test=html.xpath("//ul[@class='toc']/li[@class='level2']/div[@class='li']/a[text()='One']/@href")
# returns: ['#link1']
</snippet></ROW><ROW><id>16286573</id><snippet>__setattr__</snippet></ROW><ROW><id>16286695</id><snippet>path</snippet></ROW><ROW><id>16287065</id><snippet>User</snippet></ROW><ROW><id>16287065</id><snippet>Category</snippet></ROW><ROW><id>16287065</id><snippet># load all categories, then hold onto them
categories = Session.query(Category).all()

for user in Session.query(User):
    print user, user.category  # no SQL will be emitted for the Category
</snippet></ROW><ROW><id>16287065</id><snippet>query.get()</snippet></ROW><ROW><id>16287468</id><snippet>uic</snippet></ROW><ROW><id>16287468</id><snippet>uic</snippet></ROW><ROW><id>16287468</id><snippet>.ui</snippet></ROW><ROW><id>16287468</id><snippet>sample.ui</snippet></ROW><ROW><id>16287468</id><snippet>uic -o sample.h sample.ui</snippet></ROW><ROW><id>16287468</id><snippet>sample.h</snippet></ROW><ROW><id>16287731</id><snippet>for...empty</snippet></ROW><ROW><id>16287731</id><snippet>else</snippet></ROW><ROW><id>16287731</id><snippet>empty</snippet></ROW><ROW><id>16287737</id><snippet>string formatting</snippet></ROW><ROW><id>16287737</id><snippet>foo = 'Hello'
print('({})'.format(foo))
</snippet></ROW><ROW><id>16287840</id><snippet>inner1d</snippet></ROW><ROW><id>16287840</id><snippet>&gt;&gt;&gt; from numpy.core.umath_tests import inner1d
&gt;&gt;&gt; a = inner1d(h, c)
&gt;&gt;&gt; np.allclose(a, ans)
True
</snippet></ROW><ROW><id>16287840</id><snippet>inner1d</snippet></ROW><ROW><id>16287840</id><snippet>np.einsum</snippet></ROW><ROW><id>16287840</id><snippet>In [2]: %timeit np.einsum('ijk,jk-&gt;ij', h, c)
100 loops, best of 3: 3.85 ms per loop

In [3]: %timeit inner1d(h, c)
100 loops, best of 3: 2.78 ms per loop
</snippet></ROW><ROW><id>16287950</id><snippet>TemplateResponseMixin</snippet></ROW><ROW><id>16287950</id><snippet>TemplateResponse</snippet></ROW><ROW><id>16287950</id><snippet>render_to_response</snippet></ROW><ROW><id>16287950</id><snippet>render_to_response</snippet></ROW><ROW><id>16287950</id><snippet>import csv
from django.http import HttpResponse
from django.utils.text import slugify
from django.views.generic import TemplateView


class CSVResponseMixin(object):
    """
    A generic mixin that constructs a CSV response from the context data if
    the CSV export option was provided in the request.
    """
    def render_to_response(self, context, **response_kwargs):
        """
        Creates a CSV response if requested, otherwise returns the default
        template response.
        """
        # Sniff if we need to return a CSV export
        if 'csv' in self.request.GET.get('export', ''):
            response = HttpResponse(content_type='text/csv')
            response['Content-Disposition'] = 'attachment; filename="%s.csv"' % slugify(context['title'])

            writer = csv.writer(response)
            # Write the data from the context somehow
            for item in context['items']:
                writer.writerow(item)

            return response
        # Business as usual otherwise
        else:
            return super(CSVResponseMixin, self).render_to_response(context, **response_kwargs):
</snippet></ROW><ROW><id>16287950</id><snippet>CustomResponsesMixin</snippet></ROW><ROW><id>16287950</id><snippet>render_to_response</snippet></ROW><ROW><id>16287950</id><snippet>self.response_class</snippet></ROW><ROW><id>16287986</id><snippet>drivers = {
    'David': 'Burger King',
    'Travis': 'Dr Pepper',
    # ...
}
</snippet></ROW><ROW><id>16287986</id><snippet>car.__init__</snippet></ROW><ROW><id>16287986</id><snippet>&gt;&gt;&gt; david = car('David', 'Burger King')
&gt;&gt;&gt; david.Driver
'David'
&gt;&gt;&gt; david.Odometer
0
</snippet></ROW><ROW><id>16287986</id><snippet>car</snippet></ROW><ROW><id>16287986</id><snippet>drivers</snippet></ROW><ROW><id>16287986</id><snippet>dict</snippet></ROW><ROW><id>16287986</id><snippet>car</snippet></ROW><ROW><id>16287986</id><snippet>cars = {driver: car(driver, sponsor) for driver, sponsor in drivers.items()}
</snippet></ROW><ROW><id>16287986</id><snippet>list</snippet></ROW><ROW><id>16287986</id><snippet>car</snippet></ROW><ROW><id>16287986</id><snippet>cars = [car(driver, sponsor) for driver, sponsor in drivers.items()]
</snippet></ROW><ROW><id>16287986</id><snippet>car.__init__</snippet></ROW><ROW><id>16287986</id><snippet>def __init__(self, Driver, Sponsor, Odometer=0,Speed=randint(1,121)):
</snippet></ROW><ROW><id>16287986</id><snippet>randint(1,121)</snippet></ROW><ROW><id>16287986</id><snippet>def __init__(self, Driver, Sponsor, Odometer=0, Speed=None):
    if speed is None:
        speed = randint(1,121)
</snippet></ROW><ROW><id>16287986</id><snippet>update</snippet></ROW><ROW><id>16287986</id><snippet>self</snippet></ROW><ROW><id>16287986</id><snippet>__init__</snippet></ROW><ROW><id>16287986</id><snippet>def update(self):
    self.Odometer = self.Odometer + self.Speed*0.17
    self.Speed = randint(1,121)
</snippet></ROW><ROW><id>16287986</id><snippet>cars = [car(driver, sponsor) for driver, sponsor in drivers.items()]
</snippet></ROW><ROW><id>16287986</id><snippet>for car in cars:
    car.update()
</snippet></ROW><ROW><id>16287986</id><snippet>winner = max(cars, key=operator.attrgetter('Odometer'))
</snippet></ROW><ROW><id>16287986</id><snippet>max</snippet></ROW><ROW><id>16287986</id><snippet>key</snippet></ROW><ROW><id>16287986</id><snippet>attrgetter(name)</snippet></ROW><ROW><id>16287986</id><snippet>name</snippet></ROW><ROW><id>16287986</id><snippet>winner = None
for car in cars:
    if winner is None or car.Odometer &gt; winner.Odometer:
        winner = car
</snippet></ROW><ROW><id>16288009</id><snippet>import matplotlib.pyplot as plt
import numpy as np

plt.rc('text',usetex=True)
font = {'family':'serif','size':16}
plt.rc('font',**font)
plt.rc('legend',**{'fontsize':14})

x = np.linspace(0,2*np.pi,100)
y = np.sin(x)

fig = plt.figure(figsize=(5,5))
p1, = plt.plot(x,y)
p2, = plt.plot(x,x**2)
plt.xlabel('$\mathrm{This is the }x\mathrm{-axis}$'.replace(' ','\: '))
plt.ylabel('$y\mathrm{-axis}$')
plt.legend([p1,p2],['$\sin(x)$','$x^2$'], loc='best')
fig.subplots_adjust(left=0.2, bottom=0.15)
plt.savefig('Test.eps',bbox_inches='tight',format='eps')
plt.show()
</snippet></ROW><ROW><id>16288009</id><snippet>plt.xlabel('$\mathrm{This is the }x\mathrm{-axis}$'.replace(' ','\: '))
</snippet></ROW><ROW><id>16288009</id><snippet>'\: '</snippet></ROW><ROW><id>16288086</id><snippet>In [2]: [x['foo'] for x in my_list if 'foo' in x]
Out[2]: [1, 3]
</snippet></ROW><ROW><id>16288086</id><snippet>In [3]: def grab_values(l, key):
   ...:     return [x[key] for x in l if key in x]
   ...: 

In [4]: grab_values(my_list, 'foo')
Out[4]: [1, 3]
</snippet></ROW><ROW><id>16288147</id><snippet>uic -o sample.h sample.ui</snippet></ROW><ROW><id>16288147</id><snippet>sample.ui</snippet></ROW><ROW><id>16288147</id><snippet>sample.h</snippet></ROW><ROW><id>16288164</id><snippet>result.append(current_path)</snippet></ROW><ROW><id>16288164</id><snippet>current_path</snippet></ROW><ROW><id>16288164</id><snippet>result.append(current_path[:])</snippet></ROW><ROW><id>16288196</id><snippet>[(list(movie_reviews.words(fileid)), category)
...              for category in movie_reviews.categories()
...              for fileid in movie_reviews.fileids(category)]
</snippet></ROW><ROW><id>16288382</id><snippet>import os

for r, d, f in os.walk(self.DirFilename):
    for file in f:
        f_name, f_ext = os.path.splitext(file)
        if ".mov" == f_ext:
            if f_name in selectedList:
                src_abs_path = os.path.join(r, file)
                src_relative_path = os.path.relpath(src_abs_path, self.DirFilename)
                dst_abs_path = os.path.join(self.DirDest, src_relative_path)
                dst_dir = os.path.dirname(dst_abs_path)
                if not os.path.exists(dst_dir):
                    os.makedirs(dst_dir)
                ret = os.system('cp -fr %s %s' % (src_abs_path, dst_abs_path))
                if ret != 0:
                    print 'An error occurred!'
</snippet></ROW><ROW><id>16288515</id><snippet>findContours</snippet></ROW><ROW><id>16288571</id><snippet>pycrypto</snippet></ROW><ROW><id>16288571</id><snippet>pycrypto</snippet></ROW><ROW><id>16288571</id><snippet>pycrypto</snippet></ROW><ROW><id>16288571</id><snippet>pykcs11</snippet></ROW><ROW><id>16288571</id><snippet>pykcs11</snippet></ROW><ROW><id>16288571</id><snippet>pycrypto</snippet></ROW><ROW><id>16288909</id><snippet>__name__</snippet></ROW><ROW><id>16288909</id><snippet>class MyClass(object):
    pass

if __name__ == '__main__':
    print("This will only run if you run the script explicitly, not import it")
</snippet></ROW><ROW><id>16288909</id><snippet>python myscript.py</snippet></ROW><ROW><id>16288909</id><snippet>print</snippet></ROW><ROW><id>16288909</id><snippet>MyClass</snippet></ROW><ROW><id>16288909</id><snippet>myscript</snippet></ROW><ROW><id>16288909</id><snippet>print</snippet></ROW><ROW><id>16288968</id><snippet>from django.template import Context, Template
def getdjtemplate(th_span="1"):
    dj_template ="""
    &lt;table class="out_"&gt;
    {# headings #}
        &lt;tr&gt;
        {% for heading in headings %}
            &lt;th colspan={{ th_span }}&gt;{{ heading }}&lt;/th&gt;
        {% endfor %}
        &lt;/tr&gt;
    &lt;/table&gt;
    """
    t = Template(dj_template)
    headings = ["Hello"]
    c = Context({'headings':headings, 'th_span':th_span})
    return t.render(c)
</snippet></ROW><ROW><id>16288979</id><snippet>random.uniform(0.1, 1.0)</snippet></ROW><ROW><id>16288979</id><snippet>0.1</snippet></ROW><ROW><id>16288979</id><snippet>1.0</snippet></ROW><ROW><id>16288979</id><snippet>round(random.uniform(0.1, 1.0), 10)
</snippet></ROW><ROW><id>16288979</id><snippet>0.1</snippet></ROW><ROW><id>16288979</id><snippet>1.0</snippet></ROW><ROW><id>16289101</id><snippet>_GRP_</snippet></ROW><ROW><id>16289101</id><snippet>string = "_GRP_Group||s1||s2||Group2||"
word = re.findall(r"(?:_GRP_)?([^|]+)", string)
</snippet></ROW><ROW><id>16289116</id><snippet>x = None</snippet></ROW><ROW><id>16289116</id><snippet>for fp in l:</snippet></ROW><ROW><id>16289116</id><snippet>x</snippet></ROW><ROW><id>16289116</id><snippet>loadPickle()</snippet></ROW><ROW><id>16289184</id><snippet>#</snippet></ROW><ROW><id>16289184</id><snippet>file_handler = open(fname, 'r')
    for line in file_handler:
       if line[0] != '#':
           continue
       # now do the regular logic
       print line
</snippet></ROW><ROW><id>16289184</id><snippet>readline</snippet></ROW><ROW><id>16289184</id><snippet>while True:
    line = file_handler.readline()
    if not line:
        break
    if line[0] == '#':
        print line
    else:
        line2 = file_handler.readline()
        print line2
</snippet></ROW><ROW><id>16289184</id><snippet>lines = file_handler
for line in file_handler:
    if line[0] == '#':
        print line
    else:
        print line
        print next(file_handler)
</snippet></ROW><ROW><id>16289184</id><snippet>for</snippet></ROW><ROW><id>16289184</id><snippet>while True</snippet></ROW><ROW><id>16289184</id><snippet>iter</snippet></ROW><ROW><id>16289184</id><snippet>def doublifier(iterable):
    it = iter(iterable)
    while True:
        line = next(it)
        if line.startswith('#'):
            yield line, next(it)
        else:
            yield (line,)
</snippet></ROW><ROW><id>16289464</id><snippet>"Hi":"(.{0,5})"(?:(?!"Hi").)+"target":{"(.*)"
</snippet></ROW><ROW><id>16289464</id><snippet>.+</snippet></ROW><ROW><id>16289464</id><snippet>(?:(?!"Hi").)+</snippet></ROW><ROW><id>16289464</id><snippet>(?!"Hi")</snippet></ROW><ROW><id>16289464</id><snippet>"Hi"</snippet></ROW><ROW><id>16289464</id><snippet>.</snippet></ROW><ROW><id>16289464</id><snippet>.+</snippet></ROW><ROW><id>16289464</id><snippet>&gt;&gt;&gt; regex = re.compile(r'"Hi":"(.{0,5})"(?:(?!"Hi").)+"target":{"(.*)"')
&gt;&gt;&gt; text = '66,"Hi":"11.00","sth":"187,"Hi":"13.00"[5]"53","target":{"sth2"'
&gt;&gt;&gt; regex.search(text).groups()
('13.00', 'sth2')
</snippet></ROW><ROW><id>16289464</id><snippet>.*</snippet></ROW><ROW><id>16289464</id><snippet>"Hi"</snippet></ROW><ROW><id>16289740</id><snippet>matplotlib.figure.Figure()</snippet></ROW><ROW><id>16289740</id><snippet>linewidth</snippet></ROW><ROW><id>16289740</id><snippet>0.0</snippet></ROW><ROW><id>16289740</id><snippet>edgecolor</snippet></ROW><ROW><id>16289740</id><snippet>import matplotlib.pyplot as plt
plt.figure(linewidth=2)
plt.plot([1,2,3])
plt.savefig('test.png', edgecolor='r', facecolor='g')
</snippet></ROW><ROW><id>16289740</id><snippet>import matplotlib.pyplot as plt
plt.figure(edgecolor='r', facecolor='g', linewidth=2)
plt.plot([1,2,3])
plt.show()
</snippet></ROW><ROW><id>16289740</id><snippet>linewidth=0.0</snippet></ROW><ROW><id>16289797</id><snippet>words1 = set(open("some1.txt").read().split())
words2 = set(open("some2.txt").read().split())

duplicates  = words1.intersection(words2)
uniques = words1.difference(words2).union(words2.difference(words1))

print "Duplicates(%d):%s"%(len(duplicates),duplicates)
print "\nUniques(%d):%s"%(len(uniques),uniques)
</snippet></ROW><ROW><id>16289889</id><snippet>&lt;opinion&gt;</snippet></ROW><ROW><id>16289889</id><snippet>&lt;/opinion&gt;</snippet></ROW><ROW><id>16290035</id><snippet>axis.get_scale()</snippet></ROW><ROW><id>16290035</id><snippet>scale_str = ax.get_yaxis().get_scale()
</snippet></ROW><ROW><id>16290128</id><snippet>int</snippet></ROW><ROW><id>16290128</id><snippet>Integer</snippet></ROW><ROW><id>16290128</id><snippet>sage: log(8, 2)
3
sage: type(log(8, 2))
sage.rings.integer.Integer
sage: log(8r, 2)
log(8)/log(2)
sage: type(log(8r, 2))
sage.symbolic.expression.Expression
sage: %timeit log(8, 2)
1000000 loops, best of 3: 1.4 us per loop
sage: %timeit log(8r, 2)
1000 loops, best of 3: 404 us per loop
</snippet></ROW><ROW><id>16290128</id><snippet>r</snippet></ROW><ROW><id>16290128</id><snippet>2</snippet></ROW><ROW><id>16290128</id><snippet>Integer(2)</snippet></ROW><ROW><id>16290128</id><snippet>range</snippet></ROW><ROW><id>16290128</id><snippet>log(8)/log(2)</snippet></ROW><ROW><id>16290128</id><snippet>sage: y = log(8)/log(2)
sage: rif = RealIntervalField(53)(y)
sage: rif
3.000000000000000?
sage: rif.endpoints()
(2.99999999999999, 3.00000000000001)
</snippet></ROW><ROW><id>16290128</id><snippet>sage: y.simplify_full()
3
</snippet></ROW><ROW><id>16290128</id><snippet>sage: %timeit range(log(8r, 2))
1 loops, best of 3: 2.18 s per loop
sage: %timeit range(log(9r, 2))
1000 loops, best of 3: 766 us per loop
sage: %timeit range(log(15r, 2))
1000 loops, best of 3: 764 us per loop
sage: %timeit range(log(16r, 2))
1 loops, best of 3: 2.19 s per loop
</snippet></ROW><ROW><id>16290289</id><snippet>ctypes</snippet></ROW><ROW><id>16290289</id><snippet>ndarray.ctypes.data</snippet></ROW><ROW><id>16290289</id><snippet>float *</snippet></ROW><ROW><id>16290289</id><snippet>import numpy as np
from cffi import FFI

ffi = FFI()
ffi.cdef("void copy(float *in, float *out, int len);")
C = ffi.dlopen("ccode.dll")

a = 42*np.ones(16, dtype=np.float32)
b = np.zeros_like(a)
pa = ffi.cast("float *", a.ctypes.data)
pb = ffi.cast("float *", b.ctypes.data)

C.copy(pa, pb, len(a))
print b
</snippet></ROW><ROW><id>16290289</id><snippet>float_in[0:16] = list(arr_in[0:16])
</snippet></ROW><ROW><id>16290320</id><snippet>def isvalid(*values):
    for value in values:
        #check a value is invalid 
        if not value in ['pound', 'euro', 'dollar', 'yen']: #etc...
            return False
    return True
</snippet></ROW><ROW><id>16290320</id><snippet>def get_input():
    a = raw_input("A: ")
    b = raw_input("B: ")
    while (not isvalid(a,b) or a != b):
        print("The inputs were not identical! Please try again.")
        a = raw_input("A: ")
        b = raw_input("B: ") 
    print("{0} = {1}".format(a,b))

get_input()
</snippet></ROW><ROW><id>16290320</id><snippet>def get_input():
    valid_values = ['pound', 'euro', 'dollar', 'yen'] #etc...
    a = raw_input("A: ")
    b = raw_input("B: ")
    while (not (a in valid_values and b in valid_values) or a != b):
        print("The inputs were not valid! Please try again")
        a = raw_input("A: ")
        b = raw_input("B: ") 
    print("{0} = {1}".format(a,b))
</snippet></ROW><ROW><id>16290320</id><snippet>not (a in valid_values and b in valid_values)</snippet></ROW><ROW><id>16290320</id><snippet>not (a in valid_values) or not (b in valid_values)</snippet></ROW><ROW><id>16290320</id><snippet>A: pound
B: orange
The inputs were not valid! Please try again
A: pound
B: euro
The inputs were not valid! Please try again
A: pound
B: pound
pound = pound
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16290320</id><snippet>get_input</snippet></ROW><ROW><id>16290320</id><snippet>def get_input():
        valid_values = ['pound', 'euro', 'dollar', 'yen'] #etc...
        a = raw_input("A: ")
        b = raw_input("B: ")
        while (not (a in valid_values and b in valid_values) or a != b):
            print("The inputs were not valid! Please try again")
            a = raw_input("A: ")
            b = raw_input("B: ") 
        print("{0} = {1}".format(a,b))
            return a,b #THIS WAS THE CHANGE
</snippet></ROW><ROW><id>16290320</id><snippet>print("CALLING get_input")
A,B = get_input()
print("CALLED get_input")
#we can now access the result outside of get_input
print(A)
print(B)
</snippet></ROW><ROW><id>16290320</id><snippet>&gt;&gt;&gt; 
CALLING get_input
A: pound
B: pound
pound = pound
CALLED get_input
pound
pound
</snippet></ROW><ROW><id>16290320</id><snippet>input</snippet></ROW><ROW><id>16290320</id><snippet>raw_input</snippet></ROW><ROW><id>16290342</id><snippet>if Key % 26 == 0:  # If Key / 26 returns no remainder
    # Key is therefore divisible by 26
</snippet></ROW><ROW><id>16290396</id><snippet>WebPageTerms.drop_table(fail_silently=True)
Term.drop_table(fail_silently=True)
WebPage.drop_table(fail_silently=True)
</snippet></ROW><ROW><id>16290396</id><snippet>from peewee import drop_model_tables
drop_model_tables([WebPage, Term, WebPageTerms])  # &lt;-- will sort them correctly
</snippet></ROW><ROW><id>16290415</id><snippet>(?:\s?Hilary()|\s?Clinton(),?){2}</snippet></ROW><ROW><id>16290415</id><snippet>import re
t1 = 'Hilary Clinton'
t2 = 'Clinton, Hilary'
re.search(r'(?:\s?Hilary()|\s?Clinton(),?){2}', t1)
re.search(r'(?:\s?Hilary()|\s?Clinton(),?){2}', t2)
</snippet></ROW><ROW><id>16290435</id><snippet>dstromberg@zareason ~ $ /usr/local/pypy-1.9/bin/pypy
Python 2.7.2 (341e1e3821ff, Jun 07 2012, 15:40:31)
[PyPy 1.9.0 with GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
And now for something completely different: ``how to construct the blackhole
interpreter: we reuse the tracing one, add lots of ifs and pray''
&gt;&gt;&gt;&gt; print '01234567890123456789'[0:12]
012345678901
&gt;&gt;&gt;&gt; print(len('01234567890123456789'[0:12]))
12
&gt;&gt;&gt;&gt;
</snippet></ROW><ROW><id>16290508</id><snippet>PatchCollection</snippet></ROW><ROW><id>16290508</id><snippet>array</snippet></ROW><ROW><id>16290508</id><snippet>import itertools
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
from matplotlib.collections import PatchCollection
import numpy as np

def main():
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='polar')
    x = np.radians(np.arange(0, 360, 10))
    y = np.random.random(x.size)
    z = np.random.random(y.size)
    cmap = plt.get_cmap('cool')
    coll = colored_bar(x, y, z, ax=ax, width=np.radians(10), cmap=cmap)
    fig.colorbar(coll)
    ax.set_yticks([0.5, 1.0])
    plt.show()   

def colored_bar(left, height, z=None, width=0.8, bottom=0, ax=None, **kwargs):
    if ax is None:
        ax = plt.gca()
    width = itertools.cycle(np.atleast_1d(width))
    bottom = itertools.cycle(np.atleast_1d(bottom))
    rects = []
    for x, y, h, w in zip(left, bottom, height, width):
        rects.append(Rectangle((x,y), w, h))
    coll = PatchCollection(rects, array=z, **kwargs)
    ax.add_collection(coll)
    ax.autoscale()
    return coll

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>16290508</id><snippet>plt.get_cmap</snippet></ROW><ROW><id>16290508</id><snippet>cmap = plt.get_cmap('cool')</snippet></ROW><ROW><id>16290508</id><snippet>cmap = plt.get_cmap('cool', 5)
</snippet></ROW><ROW><id>16290508</id><snippet>ListedColormap</snippet></ROW><ROW><id>16290508</id><snippet>import itertools
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
from matplotlib.collections import PatchCollection
import numpy as np

def main():
    azi = np.random.normal(20, 30, 100)
    z = np.cos(np.radians(azi + 45))

    plt.figure(figsize=(5,6))
    plt.subplot(111, projection='polar')
    coll = rose(azi, z=z, bidirectional=True)
    plt.xticks(np.radians(range(0, 360, 45)), 
               ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'])
    plt.colorbar(coll, orientation='horizontal')
    plt.xlabel('A rose diagram colored by a second variable')
    plt.rgrids(range(5, 20, 5), angle=290)

    plt.show()

def rose(azimuths, z=None, ax=None, bins=30, bidirectional=False, 
         color_by=np.mean, **kwargs):
    """Create a "rose" diagram (a.k.a. circular histogram).  

    Parameters:
    -----------
        azimuths: sequence of numbers
            The observed azimuths in degrees.
        z: sequence of numbers (optional)
            A second, co-located variable to color the plotted rectangles by.
        ax: a matplotlib Axes (optional)
            The axes to plot on. Defaults to the current axes.
        bins: int or sequence of numbers (optional)
            The number of bins or a sequence of bin edges to use.
        bidirectional: boolean (optional)
            Whether or not to treat the observed azimuths as bi-directional
            measurements (i.e. if True, 0 and 180 are identical).
        color_by: function or string (optional)
            A function to reduce the binned z values with. Alternately, if the
            string "count" is passed in, the displayed bars will be colored by
            their y-value (the number of azimuths measurements in that bin).
        Additional keyword arguments are passed on to PatchCollection.

    Returns:
    --------
        A matplotlib PatchCollection
    """
    azimuths = np.asanyarray(azimuths)
    if color_by == 'count':
        z = np.ones_like(azimuths)
        color_by = np.sum
    if ax is None:
        ax = plt.gca()
    ax.set_theta_direction(-1)
    ax.set_theta_offset(np.radians(90))
    if bidirectional:
        other = azimuths + 180
        azimuths = np.concatenate([azimuths, other])
        if z is not None:
            z = np.concatenate([z, z])
    # Convert to 0-360, in case negative or &gt;360 azimuths are passed in.
    azimuths[azimuths &gt; 360] -= 360
    azimuths[azimuths &lt; 0] += 360
    counts, edges = np.histogram(azimuths, range=[0, 360], bins=bins)
    if z is not None:
        idx = np.digitize(azimuths, edges)
        z = np.array([color_by(z[idx == i]) for i in range(1, idx.max() + 1)])
        z = np.ma.masked_invalid(z)
    edges = np.radians(edges)
    coll = colored_bar(edges[:-1], counts, z=z, width=np.diff(edges), 
                       ax=ax, **kwargs)
    return coll

def colored_bar(left, height, z=None, width=0.8, bottom=0, ax=None, **kwargs):
    """A bar plot colored by a scalar sequence."""
    if ax is None:
        ax = plt.gca()
    width = itertools.cycle(np.atleast_1d(width))
    bottom = itertools.cycle(np.atleast_1d(bottom))
    rects = []
    for x, y, h, w in zip(left, bottom, height, width):
        rects.append(Rectangle((x,y), w, h))
    coll = PatchCollection(rects, array=z, **kwargs)
    ax.add_collection(coll)
    ax.autoscale()
    return coll

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>16290682</id><snippet>.clear()</snippet></ROW><ROW><id>16290682</id><snippet># say you have a photo that the user wants to remove from album.
album = Album.objects.latest('id')
photo = Photo.objects.album_contents.latest('id')

# to remove that m2m relationship...
# delete the through table row which matches said relationship
MyThroughTable.objects.filter(album=album, photo=photo).delete()
</snippet></ROW><ROW><id>16290958</id><snippet>from operator import attrgetter

cars = [car(driver, sponsor) for driver, sponsor in drivers.items()]

# we find the car with the max Odometer
car_max_odometer = max(cars, key=attrgetter("Odometer"))
while car_max_odometer.Odometer &lt; 500
    for car in cars:
        car.Odometer=car.Odometer+car.Speed*0.17
        car.Speed = randint(1,121)
        print(car.Driver, car.Odometer, car.Speed)
    car_max_odometer = max(cars, key=attrgetter("Odometer"))
print("We have a winner! {}, {}, {}".format(car_max_odometer.Driver, car_max_odometer.Odometer, car_max_odometer.Speed))
</snippet></ROW><ROW><id>16290958</id><snippet>self.Speed = randint(1,121)
</snippet></ROW><ROW><id>16290958</id><snippet>self.Speed = Speed
</snippet></ROW><ROW><id>16290958</id><snippet>self.Speed = Speed or randint(1,121)
</snippet></ROW><ROW><id>16291349</id><snippet>ins='''\
we spend 100year
today i'm200 pound
he maybe have212cm'''

for line in ins.splitlines():
    line=re.sub(r'\s*(\d+)\s*',r' \1 ', line)
    print line
</snippet></ROW><ROW><id>16291349</id><snippet>we spend 100 year
today i'm 200 pound
he maybe have 212 cm
</snippet></ROW><ROW><id>16291349</id><snippet>&gt;&gt;&gt; re.sub(r'\s*(\d+)\s*',r' \1 ', "we spend 100year + today i'm200 pound")
"we spend 100 year + today i'm 200 pound"
</snippet></ROW><ROW><id>16291349</id><snippet>\number</snippet></ROW><ROW><id>16291349</id><snippet>&gt;&gt;&gt; re.sub(r'(\d)(\d)(\d)',r'\2\3\1','567')
'675'
</snippet></ROW><ROW><id>16291349</id><snippet>\1 \2</snippet></ROW><ROW><id>16291349</id><snippet>&gt;&gt;&gt; line="we spend 100year today i'm200 pound"
&gt;&gt;&gt; re.sub(r'\s*(?P&lt;nums&gt;\d+)\s*',r' \g&lt;nums&gt; ',line)
"we spend 100 year today i'm 200 pound"
</snippet></ROW><ROW><id>16291353</id><snippet>from collections import OrderedDict

D = OrderedDict()
for field in data.split(','):    
    if ':' in field:
        k = field
    else:
        D[k]= field.strip()

with open(r"C:\temp\detector_gain.txt", 'w') as outfile:
    print("START_TARGET_REGISTRY", file=outfile)
    for k, v in D.items():
        if "Detector Gain" in k:
           print(k, v, sep=',', file=outfile)
    print("END_TARGET_REGISTRY", file=outfile)
</snippet></ROW><ROW><id>16291353</id><snippet>CATEGORY_1:KEY_1,VALUE_1,CATEGORY_2:KEY_2,VALUE_2...</snippet></ROW><ROW><id>16291353</id><snippet>CATEGORY:KEY</snippet></ROW><ROW><id>16291353</id><snippet>CATEGORY:KEY</snippet></ROW><ROW><id>16291353</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>16291378</id><snippet>ensure_ascii</snippet></ROW><ROW><id>16291378</id><snippet>False</snippet></ROW><ROW><id>16291378</id><snippet>&gt;&gt;&gt; print json.dumps(x, ensure_ascii=False)
{"some_key": "Enviar invitación privada"}
</snippet></ROW><ROW><id>16291471</id><snippet>Artist.pick</snippet></ROW><ROW><id>16291471</id><snippet>matplotlib.artist.Artist.orig_pick = matplotlib.artist.Artist.pick
def nu_pick(self, me):
    print self
    matplotlib.artist.Artist.orig_pick(self, me)

matplotlib.artist.Artist.pick = nu_pick
</snippet></ROW><ROW><id>16291471</id><snippet>Artist</snippet></ROW><ROW><id>16291471</id><snippet>pick</snippet></ROW><ROW><id>16291471</id><snippet>leglines</snippet></ROW><ROW><id>16291471</id><snippet>import pylab
import numpy

# Create data for plotting
t = numpy.linspace(0, 1.0, 100) 
a = numpy.sin(2*numpy.pi*t)

# Set up figure
fig = pylab.figure()
ax = pylab.subplot(111)

# Plot figures    
lines = []    
for i in range(5):
    line = ax.plot(t, (i+1)*a, linestyle=':', picker=5, label='line%d'%(i+1)) 
    lines.append(line[0]) # Save plot lines

# Create legend
leg = ax.legend(bbox_to_anchor=(1.01, 1), loc=2) # Does not work as expected
#leg = ax.legend() # Works!!

# Get legend lines
leglines = leg.get_lines() 
# Set event for legend lines
for line in leglines:
    line.set_picker(5)

# Create a 2 way mapping between legend lines &lt;-&gt; plot lines    
line2leg = dict(zip(lines+leglines, leglines+lines))
count_dict = dict((l, 0) for l in lines )
# Define event function
def onpick(event):
    thisline = event.artist
    print event
    print thisline
    if thisline in lines:
        print 'lines'
        count_dict[thisline] = 0
    elif thisline in leglines:
        print 'leglines'
        thisline = line2leg[thisline]
        count_dict[thisline] += 1
    print 'added'
    if (count_dict[thisline] % 2) == 1:
        print count_dict[thisline]
        return
    print 'tested'
    if thisline.get_linestyle()==':':
        print ": -&gt; -" # For debugging
        thisline.set_linestyle('-')
        line2leg[thisline].set_linestyle('-')
    else:
        print "- -&gt; :" # For debugging
        thisline.set_linestyle(':')
        line2leg[thisline].set_linestyle(':')
    fig.canvas.draw()

# connect event function    
fig.canvas.mpl_connect('pick_event', onpick)
pylab.show()
</snippet></ROW><ROW><id>16291475</id><snippet># imagegrab.py
from PIL import ImageGrab
import time
time.sleep(5)
ImageGrab.grab().save("screen_capture.jpg", "JPEG")
</snippet></ROW><ROW><id>16291475</id><snippet>rem imagegrab.bat
PATH C:\Python26
python C:\Path\To\imagegrab.py
</snippet></ROW><ROW><id>16291475</id><snippet>C:\Path\To\</snippet></ROW><ROW><id>16291503</id><snippet>st = 'ASCII character string.'
st.decode('utf-8')
</snippet></ROW><ROW><id>16291665</id><snippet>data.shape = (266, 266)</snippet></ROW><ROW><id>16291665</id><snippet>0...50</snippet></ROW><ROW><id>16291665</id><snippet>meshgrid()</snippet></ROW><ROW><id>16291665</id><snippet>x,y = np.meshgrid(range(data.shape[0]), range(data.shape[1]))
x *= 50./data.shape[0]
y *= 50./data.shape[1]
</snippet></ROW><ROW><id>16291665</id><snippet>xticks()</snippet></ROW><ROW><id>16291665</id><snippet>yticks()</snippet></ROW><ROW><id>16291665</id><snippet>ax.set_xticks([0., 15., 30., 45.])
num_ticks = 5.
ax.set_yticks(arange(num_ticks)/(num_ticks-1) * 50)
</snippet></ROW><ROW><id>16292019</id><snippet>if x &gt; 0:
</snippet></ROW><ROW><id>16292019</id><snippet>TypeError: no ordering relation is defined for complex numbers
</snippet></ROW><ROW><id>16292019</id><snippet>x</snippet></ROW><ROW><id>16292019</id><snippet>2j &gt; 0</snippet></ROW><ROW><id>16292019</id><snippet>-2j &gt; 0</snippet></ROW><ROW><id>16292019</id><snippet>x.imag != 0</snippet></ROW><ROW><id>16292019</id><snippet>x.imag == 0</snippet></ROW><ROW><id>16292019</id><snippet>x</snippet></ROW><ROW><id>16292019</id><snippet>&gt;&gt;&gt; x = 3+0j
&gt;&gt;&gt; type(x)
&lt;type 'complex'&gt;
&gt;&gt;&gt; x &gt; 0
Traceback (most recent call last):
  File "&lt;ipython-input-9-36cf1355a74b&gt;", line 1, in &lt;module&gt;
    x &gt; 0
TypeError: no ordering relation is defined for complex numbers

&gt;&gt;&gt; x.real &gt; 0
True
</snippet></ROW><ROW><id>16292084</id><snippet>In [1]: from string import punctuation

In [2]: from collections import Counter

In [3]: counts = Counter(open('novel.txt').read())

In [4]: punctuation_counts = {k:v for k, v in counts.iteritems() if k in punctuation}
</snippet></ROW><ROW><id>16292143</id><snippet>form</snippet></ROW><ROW><id>16292143</id><snippet>class AdvisorForm( forms.ModelForm ):
  class Meta:
    model=Advisor

  def __init__( self, *args, **kwargs ):
    super( AdvisorForm, self ).__init__( *args, **kwargs )
    self.fields[ 'name' ].widget.attrs[ 'placeholder' ]="Enter name"
</snippet></ROW><ROW><id>16292143</id><snippet>AdvisorFormSet=modelformset_factory( Advisor, form=AdvisorForm )
</snippet></ROW><ROW><id>16292209</id><snippet>_</snippet></ROW><ROW><id>16292209</id><snippet>_</snippet></ROW><ROW><id>16292209</id><snippet>_Init</snippet></ROW><ROW><id>16292209</id><snippet>samples = """\
one
two_Init
threeInit
four_foo_Init
six_seven_Init_eight_Init
five_foo_bar_Init"""


from pyparsing import Combine, OneOrMore, Word, alphas, alphanums, Literal, WordEnd, Regex

# implement explicit lookahead: allow '_' as part of your Combined OneOrMore, 
# as long as it is not followed by "Init" and the end of the word
option1 = Combine(OneOrMore(Word(alphas,alphanums) | 
                            '_' + ~(Literal("Init")+WordEnd())) 
                  + "_Init")

# sometimes regular expressions and their implicit lookahead/backtracking do 
# make things easier
option2 = Regex(r'\b[a-zA-Z_][a-zA-Z0-9_]*_Init\b')

for expr in (option1, option2):
    print '\n'.join(t[0] for t in expr.searchString(samples))
    print
</snippet></ROW><ROW><id>16292209</id><snippet>two_Init
four_foo_Init
six_seven_Init_eight_Init
five_foo_bar_Init
</snippet></ROW><ROW><id>16292836</id><snippet>numpy</snippet></ROW><ROW><id>16294409</id><snippet>import argparse
parser = argparse.ArgumentParser()
parser.add_argument("cube", type=int,
                help="Cube of the give int value ")

args = parser.parse_args()
answer = args.cube**3

print answer

python prog.py 4
64
</snippet></ROW><ROW><id>16294409</id><snippet>if hasattr(intvalue, __int__):
    print "Integer"
</snippet></ROW><ROW><id>16294710</id><snippet>pos</snippet></ROW><ROW><id>16294710</id><snippet>target_pos</snippet></ROW><ROW><id>16294710</id><snippet>pos</snippet></ROW><ROW><id>16294710</id><snippet>target_pos</snippet></ROW><ROW><id>16294710</id><snippet>pos</snippet></ROW><ROW><id>16294710</id><snippet>target_pos</snippet></ROW><ROW><id>16294710</id><snippet>Ship.update</snippet></ROW><ROW><id>16294710</id><snippet>import pygame
import math

# some simple vector helper functions, stolen from http://stackoverflow.com/a/4114962/142637
def magnitude(v):
    return math.sqrt(sum(v[i]*v[i] for i in range(len(v))))

def add(u, v):
    return [ u[i]+v[i] for i in range(len(u)) ]

def sub(u, v):
    return [ u[i]-v[i] for i in range(len(u)) ]    

def dot(u, v):
    return sum(u[i]*v[i] for i in range(len(u)))

def normalize(v):
    vmag = magnitude(v)
    return [ v[i]/vmag  for i in range(len(v)) ]

class Ship(object):
    def __init__(self):
        self.x, self.y = (0, 0)
        self.set_target((0, 0))
        self.speed = 0.7

    @property
    def pos(self):
        return self.x, self.y

    # for drawing, we need the position as tuple of ints
    # so lets create a helper property
    @property
    def int_pos(self):
        return map(int, self.pos)

    @property
    def target(self):
        return self.t_x, self.t_y

    @property
    def int_target(self):
        return map(int, self.target)   

    def set_target(self, pos):
        self.t_x, self.t_y = pos

    def update(self):
        # if we won't move, don't calculate new vectors
        if self.int_pos == self.int_target:
            return 

        target_vector = sub(self.target, self.pos) 

        # a threshold to stop moving if the distance is to small.
        # it prevents a 'flickering' between two points
        if magnitude(target_vector) &lt; 2: 
            return

        # apply the ship's speed to the vector
        move_vector = [c * self.speed for c in normalize(target_vector)]

        # update position
        self.x, self.y = add(self.pos, move_vector)

    def draw(self, s):
        pygame.draw.circle(s, (255, 0 ,0), self.int_pos, 2)

pygame.init()
quit = False
s = pygame.display.set_mode((300, 300))
c = pygame.time.Clock()
ship = Ship()

while not quit:
    quit = pygame.event.get(pygame.QUIT)
    if pygame.event.get(pygame.MOUSEBUTTONDOWN):
        ship.set_target(pygame.mouse.get_pos())
    pygame.event.poll()
    ship.update()
    s.fill((0, 0, 255))
    ship.draw(s)
    pygame.display.flip()
    c.tick(60)
</snippet></ROW><ROW><id>16295650</id><snippet>class TestResource(ModelResource):
   ...
   def prepend_urls(self):
      return [
        url(r"^(?P&lt;resource_name&gt;%s)/commands$" % self._meta.resource_name, self.wrap_view('handle_commands'), name="api_handle_commands"),
    ]


def handle_commands(self, request):
   command = request.POST['command']
   product = Product.objects.get(name=request.POST['product'])
   # do your stuff
</snippet></ROW><ROW><id>16295734</id><snippet>class MyModelAdmin(admin.ModelAdmin):
    list_display = ('level', 'description', '_parent', '_created_by',
                    '_modified_by')

    def _parent(self, obj):
        return "%s" % obj.parent

    _parent.short_description = 'Parent'

    def _created_by(self, obj):
        return "%s" % obj.created_by

    _created_by.short_description = 'Created By'

    def _modified_by(self, obj):
        return "%s" % obj.modfied_by

    _modified_by.short_description = 'Modified By'
</snippet></ROW><ROW><id>16295761</id><snippet>&gt;&gt;&gt; first = ['-6.50', '-7.00', '-6.00', '-7.50', '-5.50', '-4.50', '-4.00', '-5.00']
&gt;&gt;&gt; second = ['-7.50', '-4.50', '-4.00']
&gt;&gt;&gt; set_second = set(second) # the set is for fast O(1) amortized lookup
&gt;&gt;&gt; [x for x in first if x not in set_second]
['-6.50', '-7.00', '-6.00', '-5.50', '-5.00']
</snippet></ROW><ROW><id>16295804</id><snippet>set</snippet></ROW><ROW><id>16295804</id><snippet>&gt;&gt;&gt; my_string = "apple,orange,kiwi,mange"
&gt;&gt;&gt; my_list = ["kiwi", "apple", "mange", "orange"]
&gt;&gt;&gt; set(my_list).issubset(my_string.split(','))
True
</snippet></ROW><ROW><id>16295899</id><snippet>#!/usr/bin/env python
import sys
import os

wordToBeCounted = os.environ['wordToBeCounted']

for text in sys.stdin:  

    wordCount = text.count(wordToBeCounted)

    print '%s\t%s' % (wordToBeCounted,wordCount)
</snippet></ROW><ROW><id>16295946</id><snippet>keywords = ['nike', 'adidas', 'reebok']
items = ['sneakers', 'sneaker shoes', 'adidas shoes', 'nike', 'any shoe', 'all nikes', 'a nike shoe']
bits = [any(keyword in item for keyword in keywords) for item in items]
</snippet></ROW><ROW><id>16295946</id><snippet>import re
regex = re.compile(r'%s' % '|'.join(keywords))
bits = [bool(regex.search(x)) for x in items]
</snippet></ROW><ROW><id>16295946</id><snippet>r'\b(%s)\b'</snippet></ROW><ROW><id>16295993</id><snippet>&gt;&gt;&gt; input = ['a;1,2,3\n', 'b;abc\n']
&gt;&gt;&gt; filter(lambda item:item.find('b;') == 0 ,input)
['b;abc\n']
</snippet></ROW><ROW><id>16296136</id><snippet>&gt;&gt;&gt; import pyfann
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Library/Frameworks/Python.framework/Versions/3.3/lib/python3.3/site-packages/pyfann/__init__.py", line 4, in &lt;module&gt;
    import libfann
ImportError: No module named 'libfann'
</snippet></ROW><ROW><id>16296136</id><snippet>__init__.py</snippet></ROW><ROW><id>16296136</id><snippet>#
# Fast Artificial Neural Network library for Python
#
import libfann
__all__ = [
    'libfann'
]
</snippet></ROW><ROW><id>16296136</id><snippet>__init__.py</snippet></ROW><ROW><id>16296136</id><snippet>__init__.py</snippet></ROW><ROW><id>16296136</id><snippet>#
# Fast Artificial Neural Network library for Python
#

# import imp so we can load modules ourselves rather than through import magic
import imp

# try to load libfann, giving the exact path of where libfann resides
imp.load_source ('libfann','/Library/Frameworks/Python.framework/Versions/3.3/lib/python3.3/site-packages/pyfann/libfann.py')
</snippet></ROW><ROW><id>16296136</id><snippet>python3 ~/Downloads/FANN-2.2.0-Source/python/examples/simple_train.py 
FANN Error 1: Unable to open configuration file "../../examples/xor.data" for reading.
FANN Error 2: Unable to open configuration file "nets/xor_float.net" for writing.
</snippet></ROW><ROW><id>16296136</id><snippet>python3 ~/Downloads/FANN-2.2.0-Source/python/examples/simple_train.py
Max epochs   100000. Desired error: 0.0001000000.
Epochs            1. Current error: 0.2500073016. Bit fail 4.
Epochs           39. Current error: 0.0000279390. Bit fail 0.
</snippet></ROW><ROW><id>16296182</id><snippet>numpy</snippet></ROW><ROW><id>16296182</id><snippet>&gt;&gt;&gt; array([[1],[2],[3]]).dot(array([[1,0,1,0]]))
array([[1, 0, 1, 0],
       [2, 0, 2, 0],
       [3, 0, 3, 0]])
</snippet></ROW><ROW><id>16296182</id><snippet>a.transpose()</snippet></ROW><ROW><id>16296182</id><snippet>&gt;&gt;&gt; array([[1],[2],[3]]).dot(array([[1,0,1,0]])).transpose()
array([[1, 2, 3],
       [0, 0, 0],
       [1, 2, 3],
       [0, 0, 0]])
</snippet></ROW><ROW><id>16296182</id><snippet>tensordot()</snippet></ROW><ROW><id>16296182</id><snippet>&gt;&gt;&gt; numpy.tensordot([1,2,3], [1,0,1,0], axes=0)
array([[1, 0, 1, 0],
       [2, 0, 2, 0],
       [3, 0, 3, 0]])
</snippet></ROW><ROW><id>16297034</id><snippet>def main():
    run_my_stuff()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>16297041</id><snippet>import tweepy

auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(key, secret)

api = tweepy.API(auth)

public_tweets = api.search("stackoverflow")
for tweet in public_tweets:
    print api.retweets(tweet.id)
</snippet></ROW><ROW><id>16297664</id><snippet>my_list = []
</snippet></ROW><ROW><id>16297664</id><snippet>import state

def function_two():
    state.my_list.append(2)
    print state.my_list
</snippet></ROW><ROW><id>16297664</id><snippet>from file_two import function_two
import state

def function_one():
    state.my_list.append(1)
    function_two()

function_one()
# this will print out [1, 2]
</snippet></ROW><ROW><id>16297664</id><snippet>global</snippet></ROW><ROW><id>16297664</id><snippet>function_one</snippet></ROW><ROW><id>16297664</id><snippet>function_two</snippet></ROW><ROW><id>16297664</id><snippet>def function_two(some_list):
    some_list.append(2)
    print some_list
</snippet></ROW><ROW><id>16297664</id><snippet>from file_two import function_two

def function_one():
    my_list = []
    my_list.append(1)
    function_two(my_list)

function_one()
# [1, 2]
</snippet></ROW><ROW><id>16297671</id><snippet>import re
bolded = bolded = re.sub(r"(?i)(%s)" % query, r"&lt;b&gt;\1&lt;/b&gt;", content)
</snippet></ROW><ROW><id>16297671</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; content = "fox iN a blog"
&gt;&gt;&gt; query = "in"
&gt;&gt;&gt; bolded = re.sub(r"(?i)(%s)" % query, r"&lt;b&gt;\1&lt;/b&gt;", content)
&gt;&gt;&gt; bolded
'fox &lt;b&gt;in&lt;/b&gt; a blog'
</snippet></ROW><ROW><id>16297671</id><snippet>IGNORECASE</snippet></ROW><ROW><id>16297671</id><snippet>sub</snippet></ROW><ROW><id>16297671</id><snippet>(?i)</snippet></ROW><ROW><id>16297733</id><snippet>&gt;&gt;&gt; seen = {}
&gt;&gt;&gt; dict1 = {'a':{'a':20, 'b':30}, 'b':{'a':30, 'b':40}, 'c':{'a':20, 'b':30}, 'd':{'a':30, 'b':40}}
&gt;&gt;&gt; for k in dict1:
        fs = frozenset(dict1[k].items())
        seen.setdefault(fs, []).append(k)


&gt;&gt;&gt; seen.values() # note: unordered
[['a', 'c'], ['b', 'd']]
</snippet></ROW><ROW><id>16297733</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; dict1 = {'a':{'a':20, 'b':30}, 'b':{'a':30, 'b':40}, 'c':{'a':20, 'b':30}, 'd':{'a':30, 'b':40}}
&gt;&gt;&gt; seen = OrderedDict()
&gt;&gt;&gt; for k in sorted(dict1):
        fs = frozenset(dict1[k].items())
        seen.setdefault(fs, []).append(k)


&gt;&gt;&gt; seen.values()
[['a', 'c'], ['b', 'd']]
</snippet></ROW><ROW><id>16297733</id><snippet>.iteritems()</snippet></ROW><ROW><id>16297733</id><snippet>.items()</snippet></ROW><ROW><id>16297777</id><snippet>csv</snippet></ROW><ROW><id>16297777</id><snippet>urllib2</snippet></ROW><ROW><id>16297777</id><snippet>lxml</snippet></ROW><ROW><id>16297777</id><snippet>import urllib2
import csv
import lxml.html


URL = "http://www.ncbi.nlm.nih.gov/pubmed/"

# read IDs from the input csv file
with open('input.csv', 'r') as csvfile:
    numbers = [row[0] for row in csv.reader(csvfile)]

# get the article and collect it's title for each ID
output = []
for number in numbers:
    response = urllib2.urlopen(URL + number)
    html = response.read()

    tree = lxml.html.document_fromstring(html)
    output.append(tree.xpath('//div[@class="rprt abstract"]/h1')[0].text)

# write article titles to the output csv
with open('output.csv', 'w') as csvfile:
    csvwriter = csv.writer(csvfile)
    for row in output:
        csvwriter.writerow([row])
</snippet></ROW><ROW><id>16297777</id><snippet>input.csv</snippet></ROW><ROW><id>16297777</id><snippet>23626827
23626828
23626829
</snippet></ROW><ROW><id>16297777</id><snippet>output.csv</snippet></ROW><ROW><id>16297959</id><snippet>class PubSubProtocol(WampServerProtocol):

    @exportRpc
    def add(self, x, y):
      return x + y

    def onSessionOpen(self):
      self.registerForRpc(self, "http://example.com/calc#")
      self.registerForPubSub("http://example.com/calcevent")

class myWampServerFactory(WampServerFactory):

    calledTopics = list()
    #TODO Manage all subscriptions

    def onClientSubscribed(self, proto, topicUri):
        if topicUri in self.calledTopics:
            pass
        else:
            self.calledTopics.append(topicUri)
            self.periodic_call = task.LoopingCall(self.publish, (topicUri))
            self.periodic_call.start(1.0)           

    def onClientUnsubscribed(self, proto, topicUri):
        if topicUri in self.calledTopics:
            # if subscriptions == 0
            if not topicUri in self.subscriptions:
                self.calledTopics.remove(topicUri)
                print 'Kein Interessent mehr fuer ' + topicUri
                print self.calledTopics
                self.periodic_call.stop()

    def publish(self, topicUri):
        time = strftime("%S", gmtime())
        value = round(random.random() * 1000)
        self.dispatch(topicUri, json.dumps({'time': time, 'value': value}))

    if __name__ == '__main__':

       log.startLogging(sys.stdout)
       factory = myWampServerFactory("ws://localhost:8080", debugWamp = True)
       factory.protocol = PubSubProtocol
       factory.setProtocolOptions(allowHixie76 = True)

       resource = WebSocketResource(factory)

       ## we server static files under "/" ..
       root = File(".")

       ## and our WebSocket server under "/ws"
       root.putChild("ws", resource)
       #listenWS(factory)

       site = Site(root)
       site.protocol = HTTPChannelHixie76Aware # needed if Hixie76 is to be supported

       reactor.listenTCP(8080, site)
       reactor.run()
</snippet></ROW><ROW><id>16298190</id><snippet>MongoClient</snippet></ROW><ROW><id>16298306</id><snippet>from itertools import chain

nature = "cow"
creator = ""
minor = ""
item = "hammer"
NAMEPROPERTIES = [nature, creator, minor]
propertiestrue = filter(None, NAMEPROPERTIES)

print(*chain(propertiestrue , [item]))
</snippet></ROW><ROW><id>16298306</id><snippet>cow hammer
</snippet></ROW><ROW><id>16298328</id><snippet>pkg_resources</snippet></ROW><ROW><id>16298328</id><snippet>Werkzeug&gt;=0.6.1,
Flask,
Django&gt;=1.3,
</snippet></ROW><ROW><id>16298328</id><snippet>import pkg_resources
from pkg_resources import DistributionNotFound, VersionConflict

# dependencies can be any iterable with strings, 
# e.g. file line-by-line iterator
dependencies = [
  'Werkzeug&gt;=0.6.1',
  'Flask&gt;=0.9',
]

# here, if a dependency is not met, a DistributionNotFound or VersionConflict
# exception is thrown. 
pkg_resources.require(dependencies)
</snippet></ROW><ROW><id>16298335</id><snippet>&gt;&gt;&gt; a = ['A-B', 'A-D', 'B-C', 'B-D', 'B-E', 'C-E', 'D-E', 'D-F', 'E-F', 'E-G', 'F-G']    
&gt;&gt;&gt; b = ['7', '5', '8', '9', '7', '5', '15', '6', '8', '9', 11]
&gt;&gt;&gt; [x.split('-') + [int(y)] for x, y in zip(a, b)]
[['A', 'B', 7], ['A', 'D', 5], ['B', 'C', 8], ['B', 'D', 9], ['B', 'E', 7], ['C', 'E', 5], ['D', 'E', 15], ['D', 'F', 6], ['E', 'F', 8], ['E', 'G', 9], ['F', 'G', 11]]
</snippet></ROW><ROW><id>16298335</id><snippet>tuple(...)</snippet></ROW><ROW><id>16298335</id><snippet>tuple(x.split('-') + [int(y)])
</snippet></ROW><ROW><id>16298576</id><snippet>&gt;&gt;&gt; a =  [['Rostock', 'Lubeck'], ['Rostock', 'Hamburg'], ['Rostock', 'Bremen'], ['Rostock', 'Hannover']]
&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; list(OrderedDict.fromkeys(y for x in a for y in x))
['Rostock', 'Lubeck', 'Hamburg', 'Bremen', 'Hannover']
</snippet></ROW><ROW><id>16298576</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(OrderedDict.fromkeys(chain.from_iterable(a)))
</snippet></ROW><ROW><id>16298932</id><snippet>url(r'^hello/$', menuForm),
</snippet></ROW><ROW><id>16298932</id><snippet>def menuForm (request):
....
</snippet></ROW><ROW><id>16299027</id><snippet>import re

text = '''"Mon.":[11.76,7.13],"Tue.":[11.76,7.19],"Wed.":[11.91,6.94]'''
values = re.findall(r'\[(.*?)\]', text)
values = map(lambda x: x.split(','), values)
values = zip(*values)
print max(map(float, values[0]))
print max(map(float, values[1]))
</snippet></ROW><ROW><id>16299027</id><snippet>11.91
7.19
</snippet></ROW><ROW><id>16299048</id><snippet>class MetaEnum(type):
    def __new__(cls, class_name, parents, attrs):
        def __init__(self, name=None):
            if name is not None: self.name = name
        attrs['__init__'] = __init__
        Klass = type.__new__(cls, class_name, parents, attrs)
        if 'instances' in attrs:
            for name in attrs['instances']:
                setattr(Klass, name.capitalize(), Klass(name))
            del Klass.instances # clean up
        return Klass

class Fruit(object):
    __metaclass__ = MetaEnum
    instances = ('apple', 'banana', 'cranberry')

for attr_name in dir(Fruit):
    if not attr_name.startswith('_'):
        attr = getattr(Fruit, attr_name)
        if type(attr) is Fruit:
            print('Fruit.{}, is a Fruit named {}'.format(attr_name, getattr(attr, 'name')))
        else:
            print('Fruit.{}, is a {}'.format(attr, type(attr)))
</snippet></ROW><ROW><id>16299048</id><snippet>Fruit.Apple, is a Fruit named apple
Fruit.Banana, is a Fruit named banana
Fruit.Cranberry, is a Fruit named cranberry
</snippet></ROW><ROW><id>16299201</id><snippet>dict: {'fixed_allowance_ids': [{'allowance_id': 1, 'allowance_name': 1}, {'allowance_id': 2, 'allowance_name': 2}]}
</snippet></ROW><ROW><id>16299388</id><snippet>int / int</snippet></ROW><ROW><id>16299388</id><snippet>integer</snippet></ROW><ROW><id>16299388</id><snippet>2.0 / 10</snippet></ROW><ROW><id>16299388</id><snippet>from __future__ import division</snippet></ROW><ROW><id>16299628</id><snippet>mkvirtualenv &lt;existing name&gt;</snippet></ROW><ROW><id>16299719</id><snippet>bytes()</snippet></ROW><ROW><id>16300104</id><snippet>context</snippet></ROW><ROW><id>16300104</id><snippet>order_created</snippet></ROW><ROW><id>16300104</id><snippet>if form.is_valid():
    order_created = ....
else:
    order_created = None

context = {'total': order_created.total if order_created else None}
</snippet></ROW><ROW><id>16300177</id><snippet>gc.collect()</snippet></ROW><ROW><id>16300177</id><snippet>del(M)</snippet></ROW><ROW><id>16300177</id><snippet>In [1]: import numpy as np

In [2]: M = np.zeros((1000,1000))

In [3]: del(M)

In [4]: 
</snippet></ROW><ROW><id>16300177</id><snippet>slackbox:~&gt; ps -u 77778
USER     PID %CPU %MEM    VSZ   RSS TT  STAT STARTED    TIME COMMAND
rsmith 77778  0.0  0.5 119644 22692  0  S+    2:37PM 0:00.39 /usr/local/bin/py
</snippet></ROW><ROW><id>16300177</id><snippet>slackbox:~&gt; ps -u 77778
USER     PID %CPU %MEM    VSZ   RSS TT  STAT STARTED    TIME COMMAND
rsmith 77778  1.0  0.8 168548 32420  0  S+    2:37PM 0:00.49 /usr/local/bin/py
</snippet></ROW><ROW><id>16300177</id><snippet>slackbox:~&gt; ps -u 77778
USER     PID %CPU %MEM    VSZ   RSS TT  STAT STARTED    TIME COMMAND
rsmith 77778  0.0  1.0 176740 40328  0  S+    2:37PM 0:00.50 /usr/local/bin/py
</snippet></ROW><ROW><id>16300177</id><snippet>del</snippet></ROW><ROW><id>16300177</id><snippet>slackbox:~&gt; ps -u 77778
USER     PID %CPU %MEM    VSZ   RSS TT  STAT STARTED    TIME COMMAND
rsmith 77778  0.0  0.8 168548 32496  0  S+    2:37PM 0:00.50 /usr/local/bin/py
slackbox:~&gt; 
</snippet></ROW><ROW><id>16300177</id><snippet>del()</snippet></ROW><ROW><id>16300228</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; date_value = 41381.0
&gt;&gt;&gt; date_conv= datetime.date(1900, 1, 1) + datetime.timedelta(int(date_value))
&gt;&gt;&gt; print date_conv.strftime('%d-%m-%Y')
19-04-2013
</snippet></ROW><ROW><id>16300272</id><snippet>system32</snippet></ROW><ROW><id>16300272</id><snippet>SysWOW64</snippet></ROW><ROW><id>16300272</id><snippet>psexec</snippet></ROW><ROW><id>16300272</id><snippet>cmd.exe</snippet></ROW><ROW><id>16300272</id><snippet>psexec</snippet></ROW><ROW><id>16300272</id><snippet>cmd.exe</snippet></ROW><ROW><id>16300272</id><snippet>psexec</snippet></ROW><ROW><id>16300272</id><snippet>C:\Windows\system32\psexec</snippet></ROW><ROW><id>16300272</id><snippet>C:\Windows\SysWOW64\psexec</snippet></ROW><ROW><id>16300272</id><snippet>C:\Windows\Sysnative\Psexe.exe</snippet></ROW><ROW><id>16300272</id><snippet>Sysnative</snippet></ROW><ROW><id>16300272</id><snippet>psexec</snippet></ROW><ROW><id>16300272</id><snippet>PATH</snippet></ROW><ROW><id>16300379</id><snippet>reduce</snippet></ROW><ROW><id>16300379</id><snippet>dict.update</snippet></ROW><ROW><id>16300379</id><snippet>reduce(lambda d,key: d[key],path,aDict).update(aSecondDict)
</snippet></ROW><ROW><id>16300379</id><snippet>reduce(dict.__getitem__,path,aDict).update(aSecondDict)
</snippet></ROW><ROW><id>16300379</id><snippet>aDict</snippet></ROW><ROW><id>16300379</id><snippet>dict</snippet></ROW><ROW><id>16300379</id><snippet>__getitem__</snippet></ROW><ROW><id>16300379</id><snippet>aDict</snippet></ROW><ROW><id>16300379</id><snippet>reduce(dict.get,path,aDict).update(aSecondDict)
</snippet></ROW><ROW><id>16300379</id><snippet>AttributeError</snippet></ROW><ROW><id>16300379</id><snippet>KeyError</snippet></ROW><ROW><id>16300379</id><snippet>dict</snippet></ROW><ROW><id>16300379</id><snippet>dict</snippet></ROW><ROW><id>16300379</id><snippet>reduce</snippet></ROW><ROW><id>16300379</id><snippet>functools.reduce</snippet></ROW><ROW><id>16300379</id><snippet>functools.reduce</snippet></ROW><ROW><id>16300598</id><snippet>dpkg -l libreadline-dev
dpkg -l zlib1g-dev
dpkg -l libssl-dev
</snippet></ROW><ROW><id>16300598</id><snippet>diff -urNad python2.4-2.4.6-natty~/setup.py python2.4-2.4.6-natty/setup.py
--- python2.4-2.4.6-natty~/setup.py 2011-07-27 14:42:03.000000000 +0200
+++ python2.4-2.4.6-natty/setup.py  2011-07-27 15:03:35.000000000 +0200
@@ -269,6 +269,7 @@
         lib_dirs = self.compiler.library_dirs + [
             '/lib64', '/usr/lib64',
             '/lib', '/usr/lib',
+            '/usr/lib/i386-linux-gnu', '/usr/lib/x86_64-linux-gnu',
             ]
         inc_dirs = self.compiler.include_dirs + ['/usr/include']
         exts = []
</snippet></ROW><ROW><id>16300649</id><snippet>&lt;C-]&gt;</snippet></ROW><ROW><id>16300649</id><snippet>[count]</snippet></ROW><ROW><id>16300649</id><snippet>g&lt;C-]&gt;</snippet></ROW><ROW><id>16300649</id><snippet>:tjump</snippet></ROW><ROW><id>16300939</id><snippet>selectionOne()</snippet></ROW><ROW><id>16300939</id><snippet>selectionOneMillion()</snippet></ROW><ROW><id>16300939</id><snippet>stations = {'1': "Karratha_Aero",
            '2': "Karratha_Station",
            '10': "Sherlock"}

user_selection = raw_input("Choose number: ")

print stations.get(user_selection) or "No such station"
</snippet></ROW><ROW><id>16300939</id><snippet>1 =&gt; Karratha_Aero
10 =&gt; Sherlock
5 =&gt; No such station
</snippet></ROW><ROW><id>16301124</id><snippet>hot</snippet></ROW><ROW><id>16301124</id><snippet>row</snippet></ROW><ROW><id>16301124</id><snippet>hot = []
for row in data:
    for item in row:
        if item == max(row[1:]):
           hot.append(item)

    if max(hot) in row:
       max_row = row

print "The hottest temperature was {0} in {1}.".format(max(hot),max_row[0])   
</snippet></ROW><ROW><id>16301124</id><snippet>'5' &gt; '35.3'</snippet></ROW><ROW><id>16301331</id><snippet>myDict = None
get_myDict = lambda: myDict or {}

get_myDict()
</snippet></ROW><ROW><id>16301472</id><snippet>join</snippet></ROW><ROW><id>16301472</id><snippet>join</snippet></ROW><ROW><id>16301472</id><snippet>", ".join(["1","2","3"])
", ".join(("1","2","3"))
", ".join(str(x) for x in xrange(1,4))
", ".join({'1':None,'2':None,'3':None})
", ".join({'1','2','3'})  #set literal syntax -- python2.7+
", ".join("123")
</snippet></ROW><ROW><id>16301472</id><snippet>join</snippet></ROW><ROW><id>16301472</id><snippet>basestring</snippet></ROW><ROW><id>16301472</id><snippet>list.remove</snippet></ROW><ROW><id>16301472</id><snippet>join</snippet></ROW><ROW><id>16301581</id><snippet>container.__iter__()</snippet></ROW><ROW><id>16301581</id><snippet>tp_iter</snippet></ROW><ROW><id>16301581</id><snippet>iterator.__iter__()</snippet></ROW><ROW><id>16301581</id><snippet>tp_iter</snippet></ROW><ROW><id>16301581</id><snippet>iterator.next()</snippet></ROW><ROW><id>16301581</id><snippet>tp_iternext</snippet></ROW><ROW><id>16301591</id><snippet>In [4]: df1.T
Out[4]: 
     0  1  2  3
one  1  2  3  4 
two  4  3  2  1
</snippet></ROW><ROW><id>16301816</id><snippet>+=</snippet></ROW><ROW><id>16301816</id><snippet>def labelConfig(string,append=False):
    if append:
        text = label.cget("text") + string
        label.configure(text=text)
    else:
        label.configure(text=string)
</snippet></ROW><ROW><id>16301981</id><snippet>contextlib.contextmanager</snippet></ROW><ROW><id>16301981</id><snippet>from contextlib import contextmanager

def razz_the_jazz():
    print gval

@contextmanager
def quietude(level):
    global gval
    saved_gval = gval
    gval = level

    try:
        yield
    finally:
        gval = saved_gval

gval = 1

with quietude(3):
     razz_the_jazz()

razz_the_jazz()
</snippet></ROW><ROW><id>16301981</id><snippet>3
1
</snippet></ROW><ROW><id>16301981</id><snippet>gval</snippet></ROW><ROW><id>16301981</id><snippet>__setitem__</snippet></ROW><ROW><id>16301981</id><snippet>a[x] = whatever</snippet></ROW><ROW><id>16302281</id><snippet>dic={}
for x in range (1,6):
    level = 'level%d' % x 
    dic[level] = {}
    for iteration in range(1, 4): 
        value = 'value%d' % iteration
        dic[level][value] = 0 

print dic 
</snippet></ROW><ROW><id>16302281</id><snippet>{'level1': {'value1': 0, 'value2': 0, 'value3': 0},
 'level2': {'value1': 0, 'value2': 0, 'value3': 0},
 'level3': {'value1': 0, 'value2': 0, 'value3': 0},
 'level4': {'value1': 0, 'value2': 0, 'value3': 0},
 'level5': {'value1': 0, 'value2': 0, 'value3': 0}}
</snippet></ROW><ROW><id>16302496</id><snippet>multiprocessing</snippet></ROW><ROW><id>16302496</id><snippet>multiprocessing</snippet></ROW><ROW><id>16302496</id><snippet>queue</snippet></ROW><ROW><id>16302496</id><snippet>from Queue import Empty # &lt;-- only needed to catch Exception
from multiprocessing import Process, Queue, cpu_count

def loadFile(d, i, queue):
    # some other stuff
    queue.put(result)

if name == "main":
    queue = Queue()
    no = cpu_count()
    processes = []

    for i,d in enumerate(sortedDirSet):
        p = Process(target=self.loadFile, args=(d, i, queue))
        p.start()
        processes.append(p)

        if i % no == 0:
            for p in processes:
                p.join()
            processes = []

    for p in processes:
        p.join()

    results = []
    while True:
        try:
            # False means "don't wait when Empty, throw an exception instead"
            data = queue.get(False)
            results.append(data)
        except Empty:
            break

    # You have all the data, do something with it
</snippet></ROW><ROW><id>16302496</id><snippet>pipe</snippet></ROW><ROW><id>16302496</id><snippet>queue</snippet></ROW><ROW><id>16302496</id><snippet>pipe</snippet></ROW><ROW><id>16302603</id><snippet>min</snippet></ROW><ROW><id>16302603</id><snippet>min(my_list, key=lambda x: x[0])
</snippet></ROW><ROW><id>16302816</id><snippet>AWS_CREDENTIAL_FILE</snippet></ROW><ROW><id>16302816</id><snippet>AWSAccessKeyId</snippet></ROW><ROW><id>16302816</id><snippet>AWSSecretKey</snippet></ROW><ROW><id>16302882</id><snippet>.py</snippet></ROW><ROW><id>16302882</id><snippet>AddHandler cgi-script .py
PythonHandler mod_python
PythonDebug On
</snippet></ROW><ROW><id>16303024</id><snippet>import pymongo
client = pymongo.MongoClient('servername')
</snippet></ROW><ROW><id>16303407</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>16303407</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>16303727</id><snippet>{{ form.numbers }}</snippet></ROW><ROW><id>16303727</id><snippet>form</snippet></ROW><ROW><id>16303727</id><snippet>numbers</snippet></ROW><ROW><id>16303727</id><snippet>{{ numbers }}</snippet></ROW><ROW><id>16303727</id><snippet>class MenuForm(Form):
    zonas = forms.ModelChoiceField(queryset=Zonas.objects.all())
</snippet></ROW><ROW><id>16303727</id><snippet>from myapp.forms import MenuForm

def menuForm(request):
    if request.method == 'POST': # If the form has been submitted...
        form = MenuForm(request.POST) # A form bound to the POST data
        if form.is_valid(): # All validation rules pass
            # Process the data in form.cleaned_data
            # ...
            return HttpResponseRedirect('/success/') # Redirect after POST

    else:
        form = MenuForm() # An unbound form

    return render(request, 'hello.html', {
        'form': form,
    })
</snippet></ROW><ROW><id>16303727</id><snippet>&lt;html&gt;
&lt;body&gt;

&lt;form action="" method="post"&gt;{% csrf_token %}
{{ form.as_p }}
&lt;input type="submit" value="Submit"&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>16303769</id><snippet>QSequentialAnimationGroup</snippet></ROW><ROW><id>16303864</id><snippet>Q</snippet></ROW><ROW><id>16303864</id><snippet>OR</snippet></ROW><ROW><id>16303864</id><snippet>AND</snippet></ROW><ROW><id>16303864</id><snippet>seens=Finhall.objects.filter(name__icontains=query_string, address__icontains=query_string)</snippet></ROW><ROW><id>16303864</id><snippet>haystack</snippet></ROW><ROW><id>16303864</id><snippet>icontains</snippet></ROW><ROW><id>16303864</id><snippet>%LIKE%</snippet></ROW><ROW><id>16304027</id><snippet>y</snippet></ROW><ROW><id>16304027</id><snippet>t</snippet></ROW><ROW><id>16304027</id><snippet>(n, n, m)</snippet></ROW><ROW><id>16304027</id><snippet>m</snippet></ROW><ROW><id>16304027</id><snippet>t</snippet></ROW><ROW><id>16304027</id><snippet>t = np.arange(0, 10, .1)
y' = [[1,5]*len(t), [2,1]*len(t)] + [[np.exp(t)], [1]*len(t)]
</snippet></ROW><ROW><id>16304027</id><snippet>def yderiv(t):
    return [[1,5], [2,1]] + [[np.exp(t)], [1]]
</snippet></ROW><ROW><id>16304188</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtGui, QtCore

class MyWindow(QtGui.QWidget):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

        self.items = dict(zip(
            [   "Parent {0}".format(x)
                for x in range(3)
                ],
            [   
                [ "Child {0} - {1}".format(x, y)
                    for y in range(3)
                    ]
                for x in range(3)
                ]
        ))

        self.comboBoxChild = QtGui.QComboBox(self)

        self.comboBoxParent = QtGui.QComboBox(self)
        self.comboBoxParent.addItems(self.items.keys())
        self.comboBoxParent.currentIndexChanged[str].connect(self.on_comboBoxParent_currentIndexChanged)
        self.comboBoxParent.setCurrentIndex(1)

        self.layoutVertical = QtGui.QVBoxLayout(self)
        self.layoutVertical.addWidget(self.comboBoxParent)
        self.layoutVertical.addWidget(self.comboBoxChild)

    @QtCore.pyqtSlot(str)
    def on_comboBoxParent_currentIndexChanged(self, index):
        items = self.items[str(index)]

        self.comboBoxChild.clear()
        self.comboBoxChild.addItems(items)

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow()
    main.show()
    main.resize(222, 111)

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>16304203</id><snippet>import re
myOnDict = [x for x in myDict if re.match(r'on_\w_clicked',x)]
</snippet></ROW><ROW><id>16304203</id><snippet>myOnDict = [x for x in myDict if x.startswith('on')]
</snippet></ROW><ROW><id>16304203</id><snippet>myOnDict = [x for x in myDict if x.endswith('clicked')]
</snippet></ROW><ROW><id>16304203</id><snippet>myOnDict = [x for x in myDict if len(x) &gt; 1]
</snippet></ROW><ROW><id>16304203</id><snippet>list</snippet></ROW><ROW><id>16304203</id><snippet>dict</snippet></ROW><ROW><id>16304228</id><snippet>key1 = lambda (key, (value, hash)): key
key2 = lambda (key, (value, hash)): value
key3 = lambda (key, (value, hash)): hash
</snippet></ROW><ROW><id>16304228</id><snippet>print(sorted(aDictionary.items(), key=key1))
</snippet></ROW><ROW><id>16304228</id><snippet>key1 = lambda item: item[0][0]
key2 = lambda item: item[1][0]
key3 = lambda item: item[1][1]
</snippet></ROW><ROW><id>16304460</id><snippet>[item[0] for item in x]
#or
[item for (item,) in x]
</snippet></ROW><ROW><id>16304460</id><snippet>from operator import itemgetter

zero_index = itemgetter(0)

print map(zero_index, x)
</snippet></ROW><ROW><id>16304460</id><snippet>from itertools import chain

x = [('Edgar',), ('Robert',)]

# list is to materialize the entire sequence.
# Normally you would use this in a for loop with no `list()` call.
print list(chain.from_iterable(x))
</snippet></ROW><ROW><id>16304460</id><snippet>for (item,) in x:
    myfunc(item)
</snippet></ROW><ROW><id>16304699</id><snippet>cset: 989898</snippet></ROW><ROW><id>16304699</id><snippet>cset</snippet></ROW><ROW><id>16304809</id><snippet>python -tt</snippet></ROW><ROW><id>16304827</id><snippet>&lt;form style="display: inline;" action="/forum?id=2&amp;page=5"&gt;
    &lt;input type="submit" value="Edit"/&gt;&lt;/form&gt;
</snippet></ROW><ROW><id>16304827</id><snippet>&lt;form style="display: inline;" action="/forum"&gt;
  &lt;input type="hidden" name="id" value="2"/&gt;
  &lt;input type="hidden" name="page" value="5"/&gt;
  &lt;input type="submit" value="Edit"/&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>16304827</id><snippet>&lt;a class="button" href="/forum?id=2&amp;page=5"&gt;Edit&lt;/a&gt;
</snippet></ROW><ROW><id>16304827</id><snippet>.button {font-size: small;
     font-family: Verdana, Arial, sans-serif;
     text-decoration: none;
     background-color: #DDDDDD;
     color: #222222;
     padding: 1px 12px 1px 12px;
     border-radius:7px;
     border-top: 1px solid #CCCCCC;
     border-right: 1px solid #333333;
     border-bottom: 1px solid #333333;
     border-left: 1px solid #CCCCCC;}
</snippet></ROW><ROW><id>16304857</id><snippet>list</snippet></ROW><ROW><id>16304857</id><snippet>std::vector&lt;&gt;</snippet></ROW><ROW><id>16304857</id><snippet>list</snippet></ROW><ROW><id>16304857</id><snippet>std::vector&lt;T&gt;</snippet></ROW><ROW><id>16304857</id><snippet>T</snippet></ROW><ROW><id>16304857</id><snippet>boost::any</snippet></ROW><ROW><id>16304857</id><snippet>boost::variant</snippet></ROW><ROW><id>16304857</id><snippet>dict</snippet></ROW><ROW><id>16304857</id><snippet>std::map&lt;&gt;</snippet></ROW><ROW><id>16304857</id><snippet>boost::unordered_map</snippet></ROW><ROW><id>16304857</id><snippet>map</snippet></ROW><ROW><id>16304948</id><snippet>0.11.0</snippet></ROW><ROW><id>16304948</id><snippet>&gt;&gt;&gt; from pandas import Series, DataFrame
&gt;&gt;&gt; s = Series(range(5), index=['a', 'a', 'b', 'b', 'c'])
&gt;&gt;&gt; s.index.is_unique
False
</snippet></ROW><ROW><id>16304948</id><snippet>pip install --upgrade pandas
</snippet></ROW><ROW><id>16304948</id><snippet>import pandas as pd</snippet></ROW><ROW><id>16304954</id><snippet>#!/usr/bin/python

def main():
    for line in sys.stdin:
        key = get_my_key(line)
        value = line
        print '{}\t{}'.format(key, value)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>16304954</id><snippet>#!/usr/bin/python

def main():
    for line in sys.stdin:
        print line

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>16305042</id><snippet>input()</snippet></ROW><ROW><id>16305042</id><snippet>sys.stdin</snippet></ROW><ROW><id>16305042</id><snippet>for line is sys.stdin:
    poetry.append(line.lower().split())
</snippet></ROW><ROW><id>16305042</id><snippet>stdin</snippet></ROW><ROW><id>16305042</id><snippet>stdin</snippet></ROW><ROW><id>16305212</id><snippet>y_labels</snippet></ROW><ROW><id>16305212</id><snippet>x_labels</snippet></ROW><ROW><id>16305212</id><snippet>ax = pylab.subplots()
ax.set_yticklabels(y_labels)
ax.set_xticklabels(x_labels)
</snippet></ROW><ROW><id>16305387</id><snippet>[i for k, v in (dict1.items() + dict2.items()) for i in [k] + (v or []) if i]
</snippet></ROW><ROW><id>16305387</id><snippet>['313115', '313113', '311957', '253036', '12345', '305403']</snippet></ROW><ROW><id>16305387</id><snippet>dict.items()</snippet></ROW><ROW><id>16305387</id><snippet>import itertools
[i
 for k, v in itertools.chain.from_iterable(d.iteritems() for d in (dict1, dict2))
 for i in [k] + (v or [])
 if i]
</snippet></ROW><ROW><id>16305450</id><snippet>c[db][col]</snippet></ROW><ROW><id>16305450</id><snippet>c[db].col</snippet></ROW><ROW><id>16305450</id><snippet>from pymongo import Connection

c = Connection()
dbs = c.database_names()
for db in dbs:
    print db
    for col in c[db].collection_names():
        print '\t', col
        for pag in c[db][col].find():
            print pag
</snippet></ROW><ROW><id>16305553</id><snippet>BeautifulSoup()</snippet></ROW><ROW><id>16305553</id><snippet>soup = BeautifulSoup()
</snippet></ROW><ROW><id>16305553</id><snippet>soup.append(soup.new_tag("a", href="http://www.example.com"))
</snippet></ROW><ROW><id>16305553</id><snippet>xml</snippet></ROW><ROW><id>16305553</id><snippet>soup = BeautifulSoup(features='xml')
</snippet></ROW><ROW><id>16305553</id><snippet>.is_xml</snippet></ROW><ROW><id>16305553</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>16305744</id><snippet>while True:


    hero.draw()

    keysPressed = pygame.key.get_pressed()

    if keysPressed[K_a]:
        hero.x = hero.x - 3
    if keysPressed[K_d]:
        hero.x = hero.x + 3
    if keysPressed[K_w]:
        hero.y = hero.y - 3
    if keysPressed[K_s]:
        hero.y = hero.y + 3

    screen.fill((0, 255, 0))
</snippet></ROW><ROW><id>16305744</id><snippet>hero.draw()</snippet></ROW><ROW><id>16305744</id><snippet>screen.fill()</snippet></ROW><ROW><id>16305744</id><snippet>while True:

    screen.fill((0, 255, 0))
    hero.draw()

    keysPressed = pygame.key.get_pressed()
    ....
</snippet></ROW><ROW><id>16305868</id><snippet>round()</snippet></ROW><ROW><id>16305868</id><snippet>int()</snippet></ROW><ROW><id>16305905</id><snippet>inspect.stack()</snippet></ROW><ROW><id>16305905</id><snippet>from inspect import stack

def where():
    caller_frame = stack()[1]
    return caller_frame[0].f_globals.get('__file__', None)
</snippet></ROW><ROW><id>16305905</id><snippet>def where():
    caller_frame = stack()[1]
    return caller_frame[1]
</snippet></ROW><ROW><id>16306257</id><snippet>def grouper(sequence):
    group, members = [], set()

    for item in sequence:
        if group and members.isdisjoint(item):
            # new group, yield and start new
            yield group
            group, members = [], set()
        group.append(item)
        members.update(item)

    yield group
</snippet></ROW><ROW><id>16306257</id><snippet>&gt;&gt;&gt; for group in grouper(paths):
...     print group
... 
[['D', 'B', 'A', 'H'], ['D', 'B', 'A', 'C'], ['H', 'A', 'C']]
[['E', 'G', 'I'], ['F', 'G', 'I']]
</snippet></ROW><ROW><id>16306257</id><snippet>output = list(grouper(paths))
</snippet></ROW><ROW><id>16306257</id><snippet>def grouper(sequence):
    result = []  # will hold (members, group) tuples

    for item in sequence:
        for members, group in result:
            if members.intersection(item):  # overlap
                members.update(item)
                group.append(item)
                break
        else:  # no group found, add new
            result.append((set(item), [item]))

    return [group for members, group in result]
</snippet></ROW><ROW><id>16306274</id><snippet>&gt;&gt;&gt; system  = raw_input("Enter FQDN to show (seperated by commas for multiple entries)
&gt; ")
Enter FQDN to show (seperated by commas for multiple entries)&gt; apple,oranges,lim
es,lemons
&gt;&gt;&gt; system 
'apple,oranges,limes,lemons'
&gt;&gt;&gt; splitted = system .split(',')
&gt;&gt;&gt; splitted
['apple', 'oranges', 'limes', 'lemons']
</snippet></ROW><ROW><id>16306413</id><snippet>str.format()</snippet></ROW><ROW><id>16306413</id><snippet>format_str = '{name:30} {address:08x} {size:8d}'
print(format_str.format(name='Name', address='Address', size='Size')
print(format_str.format(name=names[i], address=addresses[i], size=sizes[i]))
</snippet></ROW><ROW><id>16306413</id><snippet>format()</snippet></ROW><ROW><id>16306631</id><snippet>str.splitlines()</snippet></ROW><ROW><id>16306631</id><snippet>for line in nX.splitlines():
    pn(line)
</snippet></ROW><ROW><id>16306631</id><snippet>.splitlines()</snippet></ROW><ROW><id>16306631</id><snippet>import re

sentence_end = re.compile(r'(?&lt;=[.?!])\s+')

for sentence in sentence_end.split(nX):
   pn(sentence)
</snippet></ROW><ROW><id>16306631</id><snippet>.</snippet></ROW><ROW><id>16306631</id><snippet>?</snippet></ROW><ROW><id>16306631</id><snippet>!</snippet></ROW><ROW><id>16306631</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; sentence_end = re.compile(r'(?&lt;=[.?!])\s+')
&gt;&gt;&gt; sentence_end.split(nX)
['Lorem ipsum dolor sit amet, consectetur adipiscing elit.', 'Integer\nquis purus eu lorem lobortis aliquam.', 'Nunc imperdiet orci ac\njusto lacinia fringilla.']
</snippet></ROW><ROW><id>16306822</id><snippet>kill</snippet></ROW><ROW><id>16306829</id><snippet>python</snippet></ROW><ROW><id>16306829</id><snippet>python2.7
python2.4
</snippet></ROW><ROW><id>16306869</id><snippet>self.answer</snippet></ROW><ROW><id>16306869</id><snippet>changeAnswer</snippet></ROW><ROW><id>16306869</id><snippet>changeAnswer</snippet></ROW><ROW><id>16306869</id><snippet>class Thing(object):
    def __init__(self, sentence, answer=None):
        self.sentence = sentence
        self.num_blanks = sentence.count("{}")
        self.answer = [answer or "___"] * self.num_blanks

    def __str__(self):
        return self.sentence.format(*self.answer)

    def changeAnswer(self, new_answer):
        self.answer = [new_answer] * self.num_blanks

    def returnAnswer(self):
        return self.answer

def test():
    thang = Thing("Please put it in the {}.")
    print thang # Please put it in the ___.
    thang.changeAnswer("BLANK")
    print thang # Please put it in the B.
    print thang.returnAnswer() # BLANK

if __name__ == '__main__':
    test()
</snippet></ROW><ROW><id>16306869</id><snippet>returnAnswer</snippet></ROW><ROW><id>16306879</id><snippet>import csv
import os

inputFileName = "temp.csv"
outputFileName = os.path.splitext(inputFileName)[0] + "_modified.csv"

with open(inputFileName, 'rb') as inFile, open(outputFileName, 'wb') as outfile:
    r = csv.reader(inFile)
    w = csv.writer(outfile)

    next(r, None)  # skip the first row from the reader, the old header
    # write new header
    w.writerow(['Item Number', 'Item Description', 'List Price', 'QTY Available'])

    # copy the rest
    for row in r:
        w.writerow(row)
</snippet></ROW><ROW><id>16306879</id><snippet>with open(inputFileName, newline='') as inFile, open(outputFileName, 'w', newline='') as outfile:
</snippet></ROW><ROW><id>16307000</id><snippet>class Thingy(object):
    def __init__(self, key, notkey):
        self.key, self.notkey = key, notkey
    def __eq__(self, other):
        return self.key == other.key
    def __hash__(self):
        return hash(self.key)
</snippet></ROW><ROW><id>16307000</id><snippet>notkey</snippet></ROW><ROW><id>16307000</id><snippet>key</snippet></ROW><ROW><id>16307000</id><snippet>a == b</snippet></ROW><ROW><id>16307000</id><snippet>hash(a) == hash(b)</snippet></ROW><ROW><id>16307000</id><snippet>class WrappedThingy(object):
    def __init__(self, thingy):
        self.thingy = thingy
    def __eq__(self, other):
        return self.thingy.notkey == other.thingy.notkey
    def __hash__(self):
        return hash(self.thingy.notkey)
</snippet></ROW><ROW><id>16307000</id><snippet>wts = set(WrappedThingy(thingy) for thingy in thingies)
</snippet></ROW><ROW><id>16307000</id><snippet>notkey</snippet></ROW><ROW><id>16307000</id><snippet>wts = set(WrappedThingy(thingy) for thingy in thingies)
thingies = [wt.thingy for wt in wts]
</snippet></ROW><ROW><id>16307000</id><snippet>key</snippet></ROW><ROW><id>16307000</id><snippet>unique_everseen</snippet></ROW><ROW><id>16307000</id><snippet>itertools</snippet></ROW><ROW><id>16307000</id><snippet>key</snippet></ROW><ROW><id>16307000</id><snippet>for element in iterable:
    k = key(element)
    if k not in seen:
        seen.add(k)
        yield element
</snippet></ROW><ROW><id>16307069</id><snippet>openDirectory</snippet></ROW><ROW><id>16307069</id><snippet>def openDirectory(self, path):
    return ('test',
            'drwxrwxrwx    1 ab       cd              0 Apr 23 15:41 test',
            {'size': 0, 'uid': 1000, 'gid': 1000, 'mtime': 1366746069L,
             'atime': 1366746069L, 'permissions': 511})
</snippet></ROW><ROW><id>16307069</id><snippet>    This method returns an iterable object that has a close() method,                                                                      
    or a Deferred that is called back with same.                                                                                           

    The close() method is called when the client is finished reading                                                                       
    from the directory.  At this point, the iterable will no longer                                                                        
    be used.                                                                                                                               

    The iterable should return triples of the form (filename,                                                                              
    longname, attrs) or Deferreds that return the same.  The                                                                               
    sequence must support __getitem__, but otherwise may be any                                                                            
    'sequence-like' object.                                                      
</snippet></ROW><ROW><id>16307069</id><snippet>def openDirectory(self, path):
    yield ('test',
           'drwxrwxrwx    1 ab       cd              0 Apr 23 15:41 test',
           {'size': 0, 'uid': 1000, 'gid': 1000, 'mtime': 1366746069L,
            'atime': 1366746069L, 'permissions': 511})
</snippet></ROW><ROW><id>16307117</id><snippet>import os, sys
from cx_Freeze import setup, Executable

# Dependencies are automatically detected, but it might need fine tuning.
build_exe_options = {'packages': [],
                     'excludes': ['tkinter'],
                     'includes': []}

setup(  version = '0.1',
        description = 'sends mails',
        options = {'build_exe': build_exe_options},
        executables = [Executable('smtpTest.py', targetName="smptMailer.exe")])
</snippet></ROW><ROW><id>16307117</id><snippet>python setup.py build
</snippet></ROW><ROW><id>16307128</id><snippet>import random
from scipy.linalg import toeplitz, det
import numpy as np,numpy.random

class si:
    #cache of info for toeplitz matrix construction
    indx = None
    l = None

def xtoeplitz(c,r):
    vals = np.concatenate((r[-1:0:-1], c))
    if si.indx is None or si.l != len(c):
        a, b = np.ogrid[0:len(c), len(r) - 1:-1:-1]
        si.indx = a + b
        si.l = len(c)
    # `indx` is a 2D array of indices into the 1D array `vals`, arranged so
    # that `vals[indx]` is the Toeplitz matrix.
    return vals[si.indx]

def doit():
    for n in xrange(1,25):
        rankzero = 0
        si.indx=None

        for repeats in xrange(5000):

            column = np.random.randint(0,2,n)
            #column=[random.choice([0,1]) for x in xrange(n)] # original code

            row = np.r_[column[0], np.random.randint(0,2,n-1)]
            #row=[column[0]]+[random.choice([0,1]) for x in xrange(n-1)] #origi

            matrix = xtoeplitz(column, row)
            #matrix=toeplitz(column,row) # original code

            #if  (np.linalg.matrix_rank(matrix) &lt; n): # original code
            if  np.abs(det(matrix))&lt;1e-4: # should be faster for small matrices
                rankzero += 1
        print n, (rankzero*1.0)/50000
</snippet></ROW><ROW><id>16307177</id><snippet>session=spawn('ssh root@' + address)</snippet></ROW><ROW><id>16307502</id><snippet>In [698]: %timeit len ([None for n in range (1, 1000000) if n%3 == 1])
10 loops, best of 3: 127 ms per loop
In [699]: %timeit sum (1 for n in range (1, 1000000) if n%3 == 1)
10 loops, best of 3: 138 ms per loop
In [700]: %timeit sum ([1 for n in range (1, 1000000) if n%3 == 1])
10 loops, best of 3: 139 ms per loop
</snippet></ROW><ROW><id>16307502</id><snippet>len</snippet></ROW><ROW><id>16307502</id><snippet>list</snippet></ROW><ROW><id>16307515</id><snippet>re.sub(r'^[a-z]:','',string)
</snippet></ROW><ROW><id>16307670</id><snippet>y</snippet></ROW><ROW><id>16307670</id><snippet>x</snippet></ROW><ROW><id>16307670</id><snippet>import numpy as np
x = np.array([(1,'a'), (1, 'b'), (3,'a'), (3, 'b'), (3, 'c'), (4, 'd')], dtype=[('id', int),('category', str, 22)]  )
y = np.array([('a', 3.2, 0), ('b', -1, 0), ('c', 0, 0), ('d', 100, 0)], dtype=[('category', str, 20), ('value', float), ('output', int)] )

for idx in np.where(y['value'] &gt; 3)[0]:
    row = y[idx]
    category = row['category']
    # Only the last record in `x` of the right category affects `y`.
    # So find the id value for that last record in `x`
    idval = x[x['category'] == category]['id'][-1]
    y[idx]['output'] = idval

print(y)
</snippet></ROW><ROW><id>16307670</id><snippet>[('a', 3.2, 3) ('b', -1.0, 0) ('c', 0.0, 0) ('d', 100.0, 4)]
</snippet></ROW><ROW><id>16307831</id><snippet>rx_buf = [ser.read(16384)] # Try reading a large chunk of data, blocking for timeout secs.
while True: # Loop to read remaining data, to end of receive buffer.
    pending = ser.inWaiting()
    if pending:
         rx_buf.append(ser.read(pending)) # Append read chunks to the list.
    else:
         break

rx_data = ''.join(rx_buf) # Join the chunks, to get a string of serial data.
</snippet></ROW><ROW><id>16307918</id><snippet>E</snippet></ROW><ROW><id>16307918</id><snippet>N</snippet></ROW><ROW><id>16307918</id><snippet>def is_linked(friend_a, friend_b, visited = {}): # At worst, will call this N-1 times

    friends = friend_a.get_friends()

    # You can assume this method is O(1)
    if friends.contains(friend_b):
        return True

    visited[friend_a] = 1
    for friend in friends:

        # Prevents infinite recursion
        # Assume O(1)
        if friend in visited:
            next # At worst, this will happen N-2 times

        return is_linked(friend, friend_b, visited)

    del visited[friend_a]
    return False
</snippet></ROW><ROW><id>16307918</id><snippet>O((N-1)(N-2))</snippet></ROW><ROW><id>16307918</id><snippet>O(N^2)</snippet></ROW><ROW><id>16307918</id><snippet>O(N)</snippet></ROW><ROW><id>16307918</id><snippet>if friend in visited: next</snippet></ROW><ROW><id>16307957</id><snippet>parent</snippet></ROW><ROW><id>16307957</id><snippet>...
tkMessageBox.showwarning("Danger, Will Robinson!", 
                         parent=self.destruct_button)
...
</snippet></ROW><ROW><id>16308243</id><snippet>re.M</snippet></ROW><ROW><id>16308243</id><snippet>re.S</snippet></ROW><ROW><id>16308243</id><snippet>.</snippet></ROW><ROW><id>16308313</id><snippet>&lt;date&gt;</snippet></ROW><ROW><id>16308313</id><snippet>sum(1 for s in soup.find_all('date') if s.text)
</snippet></ROW><ROW><id>16308313</id><snippet>find_all('ad', attrs={'date': ''})</snippet></ROW><ROW><id>16308335</id><snippet>min</snippet></ROW><ROW><id>16308335</id><snippet>min</snippet></ROW><ROW><id>16308335</id><snippet>key</snippet></ROW><ROW><id>16308335</id><snippet>smallest_rectangle = min(list_of_rectangles,key=lambda rect:rect.area)
backpack_with_small_shoes = min(backpacks,key=lambda b: b.wearer.shoe_size)
</snippet></ROW><ROW><id>16308335</id><snippet>operator</snippet></ROW><ROW><id>16308335</id><snippet>from operator import attrgetter
smallest_rectangle = min(list_of_rectangles,key=attrgetter('area'))
</snippet></ROW><ROW><id>16308413</id><snippet>#!/usr/bin/env python

"""
Extract all links from a web page
=================================
Author: Laszlo Szathmary, 2011 (jabba.laci@gmail.com)
Website: https://pythonadventures.wordpress.com/2011/03/10/extract-all-links-from-a-web-page/
GitHub: https://github.com/jabbalaci/Bash-Utils

Given a webpage, extract all links.

Usage:
------
./get_links.py &lt;URL&gt;
"""

import sys
import urllib
import urlparse
import re

from BeautifulSoup import BeautifulSoup


class MyOpener(urllib.FancyURLopener):
    version = 'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.15) Gecko/20110303 Firefox/3.6.15'


def process(url):
    myopener = MyOpener()
    #page = urllib.urlopen(url)
    page = myopener.open(url)

    text = page.read()
    page.close()

    soup = BeautifulSoup(text)

    urls = []

    for tag in soup.findAll('a', href=True):
        tag['href'] = urlparse.urljoin(url, tag['href'])
        urls.append(tag['href'])

    return urls

# process(url)


def main():


    # Store the urls we were given
    urls_queue = sys.argv[1:] 
    urls_found = []
    urls_done = []

    site_roots = []

    # Get the domains to keep us on the same domain (don't follow external links)
    for url in urls_queue:
        mre = re.match('^https?://[^/]*',url,re.IGNORECASE)
        if mre:
            # If we've found a match, add the entire matched string to site_roots
            site_roots.append( mre.group(0) )

    while len(urls_queue) &gt; 0:

        # Get url off the top of the queue
        url = urls_queue.pop()
        urls_done.append(url)

        found = process(url)

        for uf in found:
            # I'd suggest checking to make sure it's on the same domain here
            # any() returns true if any of the elements in the list passed are True
            # In this case, if uf starts with any of the site_root strings.
            # 'not any()' is equivalent to saying 'none'
            if not any( [ uf.startswith( site_root ) for site_root in site_roots ] ):
                continue # Next url, this is off site

            if uf not in urls_found:
                urls_found.append(uf) 

            # If we don't have it in the queue, queue it up
            if uf not in urls_queue and uf not in urls_done:
                urls_queue.append(uf)

        print "Done %d; Queued %d; Found %d" % ( len(urls_done), len(urls_queue), len(urls_found) )

    print urls_found
# main()

#############################################################################

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>16308413</id><snippet>urls_queue.append</snippet></ROW><ROW><id>16308413</id><snippet>while</snippet></ROW><ROW><id>16308413</id><snippet>urls_queue = [url for inurl in sys.argv[1:] for url in process(inurl) if any([url.startswith(sr) for sr in site_roots])]
urls_queue = list( set(urls_queue) ) # Get rid of duplicates
</snippet></ROW><ROW><id>16308734</id><snippet>from base64 import b64decode
from Crypto.PublicKey import RSA

publicKeyBase64="MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCVicPgYOx7mDPYDtq4kj24uRfIdNVxjMp9DNlsvmDr9ojrDBn+Ue1YdxYb/rBlDFYab57ClhzOgZjdmUv3T3WKKXE8To9tN2PG/bYEkZpBxn6M1vl0mrp/l6WbyUH4oXUx4kQAeM8/XXZdymbg8S6oLeWT1YrAj6k15fWpSMN0qQIDAQAB"
keyDER = b64decode(publicKeyBase64)
keyPub = RSA.importKey(keyDER)
</snippet></ROW><ROW><id>16308734</id><snippet>keyPub</snippet></ROW><ROW><id>16308734</id><snippet>from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA

verifier = PKCS1_v1_5.new(keyPub)
h = SHA.new(message)
result = verifier.verify(h, signature)
</snippet></ROW><ROW><id>16308789</id><snippet>pygame.py</snippet></ROW><ROW><id>16308789</id><snippet>import pygame</snippet></ROW><ROW><id>16308789</id><snippet>import pygame</snippet></ROW><ROW><id>16308789</id><snippet>from pygame.locals import *</snippet></ROW><ROW><id>16308789</id><snippet>locals</snippet></ROW><ROW><id>16308789</id><snippet>ImportError</snippet></ROW><ROW><id>16308789</id><snippet>mygame.py</snippet></ROW><ROW><id>16308789</id><snippet>pygame.py</snippet></ROW><ROW><id>16308892</id><snippet>/search</snippet></ROW><ROW><id>16308892</id><snippet>/search?query=&lt;param&gt;</snippet></ROW><ROW><id>16308990</id><snippet>previous_slope = None
for slope in as_many_loops_as_you_like:
    data = [slope, other_stuff]
    if slope != previous_slope:
        print data
        previous_slope = slope
</snippet></ROW><ROW><id>16308992</id><snippet>x=  numberlist.listX[:]  #or list(numberlist.listX)
</snippet></ROW><ROW><id>16308992</id><snippet>x=  numberlist.listX</snippet></ROW><ROW><id>16308992</id><snippet>In [1]: lis=[1,2,3]

In [2]: x=lis

In [3]: x is lis  #both point to the same object
Out[3]: True

In [4]: x=lis[:]  #create a shallow copy

In [5]: x is lis 
Out[5]: False
</snippet></ROW><ROW><id>16308992</id><snippet>for item in (random.choice(lis) for _ in xrange(draws)):
    #do something with item
</snippet></ROW><ROW><id>16309019</id><snippet>type(seq)( f(x) for x in seq )</snippet></ROW><ROW><id>16309019</id><snippet>type(seq)(imap(f, seq))</snippet></ROW><ROW><id>16309019</id><snippet>map</snippet></ROW><ROW><id>16309019</id><snippet>len</snippet></ROW><ROW><id>16309019</id><snippet>type(X)(y_iter)</snippet></ROW><ROW><id>16309019</id><snippet>def map2(f, seq):
    it = imap(f, seq)
    if isinstance(seq, (tuple, list)):
        return type(seq)(it)
    else:
        return it
</snippet></ROW><ROW><id>16309019</id><snippet>xrange</snippet></ROW><ROW><id>16309019</id><snippet>def map2(f, seq):
    it = imap(f, seq)
    try:
        len(seq)
    except:
        return it
    else:
        return type(seq)(it)
</snippet></ROW><ROW><id>16309019</id><snippet>len</snippet></ROW><ROW><id>16309019</id><snippet>map</snippet></ROW><ROW><id>16309019</id><snippet>filter</snippet></ROW><ROW><id>16309019</id><snippet>imap</snippet></ROW><ROW><id>16309019</id><snippet>def sequify(func):
    def wrapped(f, seq):
        it = func(f, seq)
        try:
            len(seq)
        except:
            return it
        else:
            return type(seq)(it)
    return wrapped
</snippet></ROW><ROW><id>16309019</id><snippet>&gt;&gt;&gt; seqmap = sequify(itertools.imap)
&gt;&gt;&gt; seqmap(int, (1.2, 2.3))
(1, 2)
&gt;&gt;&gt; sequify(itertools.ifilter)(lambda x: x&gt;0, (-2, -1, 0, 1, 2))
(1, 2)
</snippet></ROW><ROW><id>16309019</id><snippet>functools.wraps</snippet></ROW><ROW><id>16309019</id><snippet>@sequify
def map_and_discard_none(func, it):
    for elem in imap(func, it):
        if elem is not None:
            yield elem
</snippet></ROW><ROW><id>16309019</id><snippet>&gt;&gt;&gt; map_and_discard_none(lambda x: x*2 if x else x, (1, 2, None))
(2, 4)
</snippet></ROW><ROW><id>16309019</id><snippet>map</snippet></ROW><ROW><id>16309019</id><snippet>sequify(itertools.count(10, 5))</snippet></ROW><ROW><id>16309019</id><snippet>5</snippet></ROW><ROW><id>16309019</id><snippet>def sequify(func, type_arg=1):
    def wrapped(*args, **kwargs):
        it = func(f, seq)
        try:
            len(args[type_arg])
        except:
            return it
        else:
            return type(seq)(it)
    return wrapped
</snippet></ROW><ROW><id>16309019</id><snippet>sequify(itertools.combinations, 0)</snippet></ROW><ROW><id>16309019</id><snippet>def sequify(type_arg=1):
    def wrapper(func):
        def wrapped(*args, **kwargs):
            it = func(f, seq)
            try:
                len(args[type_arg])
            except:
                return it
            else:
                return type(seq)(it)
        return wrapped
    return wrapper
</snippet></ROW><ROW><id>16309019</id><snippet>@sequify(3)
def my_silly_function(pred, defval, extrastuff, main_iterable, other_iterable):
</snippet></ROW><ROW><id>16309103</id><snippet>rangesForFile0[
    ("A", 100, 1500, "file0"),
    ("A", 400, 1000, "file0"),
    ...
]
</snippet></ROW><ROW><id>16309103</id><snippet>allRanges = rangesForFile0 + rangesForFile1 + ...
</snippet></ROW><ROW><id>16309103</id><snippet>allRanges.sort()
</snippet></ROW><ROW><id>16309103</id><snippet>def rangesOverlap(x1, x2, y1, y2):
    return (x1 &lt;= y2) and (y1 &lt;= x2)

fileSetToRangesMap = {}
for i, r in enumerate(allRanges):
    fileSet = set([r[3]])
    x1 = r[1]
    x2 = r[2]
    for j, r2 in enumerate(allRanges):
        y1 = r2[1]
        y2 = r2[2]
        if (r[0] == r2[0]) and rangesOverlap(x1, x2, y1, y2):
            fileSet.add(r2[3])
    fileSetToRangesMap.setdefault(frozenset(fileSet), []).append(r)
</snippet></ROW><ROW><id>16309135</id><snippet>In [1]: import collections

In [2]: Record = collections.namedtuple('Record', ['person', 'location', 'time', 'amount'])

In [3]: allrecords = []
</snippet></ROW><ROW><id>16309135</id><snippet>In [4]: allrecords.append(Record('thomas', 'park', 'noon', 0))

In [5]: allrecords.append(Record('jim', 'pool', 'afternoon', 5))

In [6]: allrecords.append(Record('sandy', 'school', 'noon', 0))

In [7]: allrecords.append(Record('alex', 'mall', 'night', 20))
</snippet></ROW><ROW><id>16309135</id><snippet>In [8]: times = collections.Counter([j.time for j in allrecords])

In [9]: print times
Counter({'noon': 2, 'afternoon': 1, 'night': 1})

In [10]: amounts =  collections.Counter([j.amount for j in allrecords])

In [11]: print amounts
Counter({0: 2, 20: 1, 5: 1})
</snippet></ROW><ROW><id>16309135</id><snippet>if</snippet></ROW><ROW><id>16309135</id><snippet>In [12]: query = collections.Counter([j.amount for j in allrecords if j.time in ('afternoon', 'night')])

In [13]: print query
Counter({20: 1, 5: 1})
</snippet></ROW><ROW><id>16309272</id><snippet>from xlrd import open_workbook
bench = open_workbook("excelsheet.xls")
for name in bench.sheet_names():
    sheetnew = bench.sheet_by_name(name)
    for i in range(0, 13):
        for cell in sheetnew.col(i):
            print cell.value
</snippet></ROW><ROW><id>16309337</id><snippet>event.type</snippet></ROW><ROW><id>16309337</id><snippet>event.key</snippet></ROW><ROW><id>16309337</id><snippet>K_RIGHT</snippet></ROW><ROW><id>16309337</id><snippet>movex += 1
</snippet></ROW><ROW><id>16309337</id><snippet>movey -=1
</snippet></ROW><ROW><id>16309337</id><snippet>movex += 1</snippet></ROW><ROW><id>16309337</id><snippet>movex = movex + 1</snippet></ROW><ROW><id>16309402</id><snippet>row(10)</snippet></ROW><ROW><id>16309402</id><snippet>for row in r:
    if int(row[3]) &gt;= 10:
        row[3] = 10
    w.writerow(row)
</snippet></ROW><ROW><id>16309402</id><snippet>row[3]</snippet></ROW><ROW><id>16309402</id><snippet>csv.writer()</snippet></ROW><ROW><id>16309497</id><snippet>j</snippet></ROW><ROW><id>16309497</id><snippet>i</snippet></ROW><ROW><id>16309497</id><snippet>i &gt;&gt; j</snippet></ROW><ROW><id>16309497</id><snippet>j</snippet></ROW><ROW><id>16309497</id><snippet>n % 2 == 1</snippet></ROW><ROW><id>16309497</id><snippet>2**N</snippet></ROW><ROW><id>16309497</id><snippet>items</snippet></ROW><ROW><id>16309497</id><snippet>N</snippet></ROW><ROW><id>16309497</id><snippet>N=5</snippet></ROW><ROW><id>16309497</id><snippet>i</snippet></ROW><ROW><id>16309497</id><snippet>0b10011</snippet></ROW><ROW><id>16309497</id><snippet>[items[0], items[1], items[4]]</snippet></ROW><ROW><id>16309497</id><snippet>j</snippet></ROW><ROW><id>16309497</id><snippet>1          1         0          0          1
items[0]   items[1]  (nothing)  (nothing)  items[4]
</snippet></ROW><ROW><id>16309497</id><snippet>i</snippet></ROW><ROW><id>16309497</id><snippet>combo</snippet></ROW><ROW><id>16309499</id><snippet>?:</snippet></ROW><ROW><id>16309499</id><snippet>import re
EXAMPLE_REGEX = re.compile("(.*):(.*)(?:e.?g.?|(?:for )?example)(.*)")
print EXAMPLE_REGEX.findall('Foo: The companion of bar e.g. I have class called FooBar')
</snippet></ROW><ROW><id>16309499</id><snippet>(?:e.?g.?|(?:for )</snippet></ROW><ROW><id>16309562</id><snippet>foo()</snippet></ROW><ROW><id>16309580</id><snippet>_sre</snippet></ROW><ROW><id>16309580</id><snippet>&gt;&gt;&gt; import _sre
&gt;&gt;&gt; _sre
&lt;module '_sre' (built-in)&gt;
&gt;&gt;&gt; _sre.MAXREPEAT
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute 'MAXREPEAT'
</snippet></ROW><ROW><id>16309580</id><snippet>/usr/local</snippet></ROW><ROW><id>16309580</id><snippet>/usr</snippet></ROW><ROW><id>16309634</id><snippet>import re

expression = "(?P&lt;id&gt;\w+?)_INIT\s*?=.*?'h(?P&lt;hexValue&gt;[0-9a-fA-F]*)"
regex = re.compile(expression)

def getIdAndValueFromInitLine(line):
  mm = regex.search(line)
  if mm == None:
    return None # Not the ..._INIT parameter or line was empty or other mismatch happened
  else:
    return (mm.groupdict()["id"], "0x" + mm.groupdict()["hexValue"])
</snippet></ROW><ROW><id>16309634</id><snippet>regex = "(?P&lt;init_id&gt;\w+?)_INIT\s*?=.*?'h(?P&lt;initValue&gt;[0-9a-fA-F]*)"
init_dict = {}
for x in re.findall(regex, lines):
    init_dict[x.groupdict()["init_id"]] = "0x" + x.groupdict()["initValue"]

regex = "(?P&lt;addr_id&gt;\w+?)_ADDR\s*?=.*?'h(?P&lt;addrValue&gt;[0-9a-fA-F]*)"
addr_dict = {}
for y in re.findall(regex, lines):
    addr_dict[y.groupdict()["addr_id"]] = "0x" + y.groupdict()["addrValue"]

init_to_addr_hexvalue_dict = {init_dict[x] : addr_dict[x] for x in init_dict.keys() if x in addr_dict}
</snippet></ROW><ROW><id>16309681</id><snippet>line = '1::412::1245::23444'
line_list = line.split('::')
new_line = ','.join(line_list[:-1])

print new_line
&gt;&gt; 1,412,1245
</snippet></ROW><ROW><id>16309706</id><snippet>time.strftime</snippet></ROW><ROW><id>16309706</id><snippet>time.localtime</snippet></ROW><ROW><id>16309706</id><snippet>while True:
    t = time.localtime()
    if t[3:5] == (9, 0): # Compare (hour, day) numerically
        print time.strftime("Starting at: %H:%M", t)
        worker1.startThread()
        worker2.startThread()
        time.sleep(get_nap_length())
    else:
        time.sleep(59) # No need to sleep less than this, even being paranoid.

def get_nap_length():
    '''Returns approximate number of seconds before 9:00am tomorrow.

    Probably implementing this would be easiest with the datetime module.'''
</snippet></ROW><ROW><id>16309706</id><snippet>get_nap_length</snippet></ROW><ROW><id>16309706</id><snippet>else</snippet></ROW><ROW><id>16309706</id><snippet>worker1</snippet></ROW><ROW><id>16309706</id><snippet>worker2</snippet></ROW><ROW><id>16309846</id><snippet>wsj</snippet></ROW><ROW><id>16309846</id><snippet>nltk.corpus.reader.util.ConcatenatedCorpusView</snippet></ROW><ROW><id>16309846</id><snippet>index()</snippet></ROW><ROW><id>16309846</id><snippet>index()</snippet></ROW><ROW><id>16309846</id><snippet>None</snippet></ROW><ROW><id>16309846</id><snippet>  for i in range(len(wsj)):
    if wsj[i][0] in cfd2['VN'].keys():
      print wsj[(i-1):(i+1)]
</snippet></ROW><ROW><id>16309908</id><snippet> T:16.0 09.34      // Temperature, 16.0°C measured at 09.34
 B:11b 11.46       // Bus, route 11b, arrives at 11.46 at your bus-stop. 
 M:mats@example.com 11kb 10.23    // Mail from mats@example.com, it's 11KB and arrived at 10.23
</snippet></ROW><ROW><id>16310089</id><snippet>sys.stdout.write(" ".join(list))
</snippet></ROW><ROW><id>16310089</id><snippet>list</snippet></ROW><ROW><id>16310089</id><snippet>sys.stdout.write(" ".join(str(x) for x in list))
</snippet></ROW><ROW><id>16310089</id><snippet>for item in list[:-1]:
    sys.stdout.write(str(item))
    sys.stdout.write(" ")
if len(list) &gt; 0:
    sys.stdout.write(list[-1])
</snippet></ROW><ROW><id>16310089</id><snippet>list</snippet></ROW><ROW><id>16310225</id><snippet>def __init__(self, ...):
    ...
    self.codes = {'a': '00', 'h': '111', 'e': '110', 'l': '01', 'o': '10'}
    self.decode_codes = {value: key for key, value in self.codes.items()}

def decode(self, ciphertext):
    result = ''
    chunk = ''

    for c in ciphertext:
        chunk += c

        if chunk in self.decode_codes:
            result += self.decode_codes[chunk]
            chunk = ''


    return result
</snippet></ROW><ROW><id>16310472</id><snippet>Inline</snippet></ROW><ROW><id>16310472</id><snippet>Inline::Python</snippet></ROW><ROW><id>16310519</id><snippet>counter=0
for element in string:
    counter+=bool(function(element))
    yield counter
</snippet></ROW><ROW><id>16310519</id><snippet>True</snippet></ROW><ROW><id>16310519</id><snippet>1</snippet></ROW><ROW><id>16310519</id><snippet>False</snippet></ROW><ROW><id>16310519</id><snippet>0</snippet></ROW><ROW><id>16310519</id><snippet>bool()</snippet></ROW><ROW><id>16310519</id><snippet>function()</snippet></ROW><ROW><id>16310519</id><snippet>True</snippet></ROW><ROW><id>16310519</id><snippet>False</snippet></ROW><ROW><id>16310519</id><snippet>1</snippet></ROW><ROW><id>16310519</id><snippet>0</snippet></ROW><ROW><id>16310522</id><snippet>@decorator.oauth_required
  def get(self):
    # Get the authorized Http object created by the decorator.
    http = decorator.http()
    # Call the service using the authorized Http object.
    request = service.events().list(calendarId='primary')
    response = request.execute(http=http)
    ...
</snippet></ROW><ROW><id>16310522</id><snippet>youtube_create_playlist</snippet></ROW><ROW><id>16310653</id><snippet>import pandas as pd
df = pd.DataFrame({
    'A': [['a','b','c','d'],['a','b','c'],['x','y','z','q'],['x','l']],
    'B': [12,7,2,9]
    })
print(df)

#               A   B
# 0  [a, b, c, d]  12
# 1     [a, b, c]   7
# 2  [x, y, z, q]   2
# 3        [x, l]   9

def cumulative_frequence(df, nodes):
    nodes = set(nodes)
    mask = df['A'].apply(lambda group: not nodes.isdisjoint(group))
    return df.ix[mask, ['B']].sum().item()

print(cumulative_frequence(df, ['a']))
print(cumulative_frequence(df, ['a','b']))
# 19
# 19
</snippet></ROW><ROW><id>16310706</id><snippet>dirs = '\\users\\username\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\'
cop_dir = '\\users\\Desktop\\'

for r,d,f in os.walk(dirs):
    if 'places.sqlite' in f:
        shutil.copy2(os.path.join(r, 'places.sqlite'), cop_dir)
        break
</snippet></ROW><ROW><id>16310739</id><snippet>0.28</snippet></ROW><ROW><id>16310739</id><snippet>0.11</snippet></ROW><ROW><id>16310739</id><snippet>0.55</snippet></ROW><ROW><id>16310739</id><snippet>0.53</snippet></ROW><ROW><id>16310739</id><snippet>#!/usr/bin/env python3
import os
import sys

def write_random_lowercase(n):
    min_lc = ord(b'a')
    len_lc = 26
    ba = bytearray(os.urandom(n))
    for i, b in enumerate(ba):
        ba[i] = min_lc + b % len_lc # convert 0..255 to 97..122
    sys.stdout.buffer.write(ba)

write_random_lowercase(1000000)
</snippet></ROW><ROW><id>16310739</id><snippet>$ python3 generate-random.py | python3 check-seq.py
</snippet></ROW><ROW><id>16310739</id><snippet>check-seq.py</snippet></ROW><ROW><id>16310739</id><snippet>#!/usr/bin/env python3
import sys
from collections import Counter
from string import ascii_lowercase

def main():
    limits = [40000, 2000, 100]

    s = sys.stdin.buffer.readline() # a single line
    assert 1000000 &lt;= len(s) &lt;= 1000002 # check length +/- newline
    s.decode('ascii','strict') # check ascii
    assert set(s) == set(ascii_lowercase.encode('ascii')) # check lowercase

    for n, lim in enumerate(limits, start=1):
        freq = Counter(tuple(s[i:i+n]) for i in range(len(s)))
        assert max(freq.values()) &lt;= lim, freq

main()
</snippet></ROW><ROW><id>16310739</id><snippet>generate-random.py</snippet></ROW><ROW><id>16310739</id><snippet>bytes.translate()</snippet></ROW><ROW><id>16310739</id><snippet>0.11</snippet></ROW><ROW><id>16310739</id><snippet>#!/usr/bin/env python3
import os
import sys

# make translation table from 0..255 to 97..122
tbl = bytes.maketrans(bytearray(range(256)),
                      bytearray([ord(b'a') + b % 26 for b in range(256)]))
# generate random bytes and translate them to lowercase ascii
sys.stdout.buffer.write(os.urandom(1000000).translate(tbl))
</snippet></ROW><ROW><id>16310779</id><snippet>memoize</snippet></ROW><ROW><id>16310779</id><snippet>fib</snippet></ROW><ROW><id>16310779</id><snippet>memo_fib</snippet></ROW><ROW><id>16310779</id><snippet>fib</snippet></ROW><ROW><id>16310779</id><snippet>fib</snippet></ROW><ROW><id>16310779</id><snippet>fib</snippet></ROW><ROW><id>16310779</id><snippet>dis.dis(fib)</snippet></ROW><ROW><id>16310779</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>16310779</id><snippet>fib</snippet></ROW><ROW><id>16310779</id><snippet>fib = memoize(fib)
</snippet></ROW><ROW><id>16310779</id><snippet>memoize</snippet></ROW><ROW><id>16310779</id><snippet>lru_cache</snippet></ROW><ROW><id>16310779</id><snippet>fib</snippet></ROW><ROW><id>16310779</id><snippet>fib</snippet></ROW><ROW><id>16310779</id><snippet>LOAD_DEREF</snippet></ROW><ROW><id>16310779</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>16310779</id><snippet>fib</snippet></ROW><ROW><id>16310779</id><snippet>fib</snippet></ROW><ROW><id>16310779</id><snippet>fib</snippet></ROW><ROW><id>16310926</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>16310926</id><snippet>template</snippet></ROW><ROW><id>16310926</id><snippet>TEMPLATE_DIRS = (
    '../home/templates'
)
</snippet></ROW><ROW><id>16310926</id><snippet>settings.py</snippet></ROW><ROW><id>16310926</id><snippet>import os
settings_dir = os.path.dirname(__file__)
PROJECT_ROOT = os.path.abspath(os.path.dirname(settings_dir))

...

TEMPLATE_DIRS = (
    os.path.join(PROJECT_ROOT, '../home/templates/'),
)
</snippet></ROW><ROW><id>16310926</id><snippet>render_to_response</snippet></ROW><ROW><id>16310926</id><snippet>RequestContext</snippet></ROW><ROW><id>16310926</id><snippet>user</snippet></ROW><ROW><id>16310926</id><snippet>return render_to_response(
    "home/main.html",
    context_instance=RequestContext(
        request,
        {'name':'maxwell'}
    )
)
</snippet></ROW><ROW><id>16311090</id><snippet>dict1 = {'a': 4, 'd': 2}
diclist = [{'b': 3, 'c': 3}, {'e': 1, 'f': 1}]
for d in diclist:
    dict1.update(d)
</snippet></ROW><ROW><id>16311090</id><snippet>&gt;&gt;&gt; dict1={'a':4,'d':2}
&gt;&gt;&gt; diclist=[{'b':3,'c':3},{'e':1,'f':1}]
&gt;&gt;&gt; 
&gt;&gt;&gt; for d in diclist:
...  for k, v in d.items():
...   if k not in dict1 or v &lt; dict1[k]:
...    dict1[k] = v
... 
&gt;&gt;&gt; dict1
{'a': 4, 'c': 3, 'b': 3, 'e': 1, 'd': 2, 'f': 1}
</snippet></ROW><ROW><id>16311187</id><snippet>import signal
from bottle import route, run

def my_handler(*args):
    print 'in signal handler', args

signal.signal(signal.SIGUSR1, my_handler)

@route('/hello')
def hello():
    return "Hello World!\n"

run(host='localhost', port=8080, debug=True)
</snippet></ROW><ROW><id>16311197</id><snippet>p = patch("Channel.all"), new=MagicMock(return_value=channel_list))
p.start()
</snippet></ROW><ROW><id>16311197</id><snippet>p.stop()
</snippet></ROW><ROW><id>16311301</id><snippet>/registry/voter[vote='YES']
</snippet></ROW><ROW><id>16311313</id><snippet>i = 0
</snippet></ROW><ROW><id>16311313</id><snippet>v = []
</snippet></ROW><ROW><id>16311313</id><snippet>vara = None
</snippet></ROW><ROW><id>16311313</id><snippet>def view():
    indx = 1
    for i in v:
        print "Grocery #" + str(indx) + ": " + str(i)
        indx += 1
</snippet></ROW><ROW><id>16311313</id><snippet>enumerate()</snippet></ROW><ROW><id>16311313</id><snippet>def view():
    for i, item in v.iteritems():
        print "Grocery #" + str(i) + ": " + str(item)
</snippet></ROW><ROW><id>16311313</id><snippet>while vara != "end" and vara != "exit":
</snippet></ROW><ROW><id>16311313</id><snippet>    vara = raw_input("Please enter a grocery: ")
    vara = str(vara)
</snippet></ROW><ROW><id>16311313</id><snippet>    if vara == "view":
        view()
    elif vara[len(vara)-4: len(vara)] == " del":
        key = vara[0:len(vara) - 4]
</snippet></ROW><ROW><id>16311313</id><snippet>        if key in v:
            v.remove(key)
            print "Deleted: " + key
        else:
            print "Error, " + key + " was not found in your list"
    elif (vara != "end" and vara != "exit") and len(vara) &gt; 0:
        v.append(vara)
view()
</snippet></ROW><ROW><id>16311519</id><snippet>In [24]: strs="""{foo,"bar bar",baz:qux,999}"""

In [27]: [x.strip('"{}') for x in strs.split(",")]
Out[27]: ['foo', 'bar bar', 'baz:qux', '999']
</snippet></ROW><ROW><id>16311528</id><snippet>fruit_stand = {
    "Lemon": [(Yellow, 5, 2.99)],
    "Apple": [(Red, 10, 0.99), (Green, 9, 0.69)],
    "Cherry": [(White, 2, 5.99),(Red, 5, 5.99)]
}
</snippet></ROW><ROW><id>16311528</id><snippet>for fruit_name in fruit_stand:
    print fruit_name

# Lemon
# Apple
# Cherry
# NOTE: Order not guaranteed
# Cherry, Lemon, Apple are equally likely
</snippet></ROW><ROW><id>16311528</id><snippet>items</snippet></ROW><ROW><id>16311528</id><snippet>key</snippet></ROW><ROW><id>16311528</id><snippet>value</snippet></ROW><ROW><id>16311528</id><snippet>for fruit_name, fruits in fruit_stand.items():
    print fruit_name, "=&gt;", fruits

# Lemon =&gt; [(Yellow, 5, 2.99)]
# Apple =&gt; [(Red, 10, 0.99), (Green, 9, 0.69)]
# Cherry =&gt; [(White, 2, 5.99),(Red, 5, 5.99)]
</snippet></ROW><ROW><id>16311528</id><snippet>list</snippet></ROW><ROW><id>16311528</id><snippet>[]</snippet></ROW><ROW><id>16311528</id><snippet>for fruit in [(White, 2, 5.99),(Red, 5, 5.99)]:
    print fruit

# (White, 2, 5.99)
# (Red, 5, 5.99)
</snippet></ROW><ROW><id>16311528</id><snippet>fruits</snippet></ROW><ROW><id>16311528</id><snippet>tuple</snippet></ROW><ROW><id>16311528</id><snippet>for fruit_name, fruit_list in fruit_stand.items():
    # Ignore fruit_name and iterate over the fruits in fruit_list
    for fruit in fruit_list:
        print fruit
</snippet></ROW><ROW><id>16311528</id><snippet>items</snippet></ROW><ROW><id>16311528</id><snippet>x, y = (1, 2)
print x
print y
# 1
# 2
</snippet></ROW><ROW><id>16311528</id><snippet>fruit</snippet></ROW><ROW><id>16311528</id><snippet>for fruit_name, fruit_list in fruit_stand.items():
    # Ignore fruit_name and iterate over the fruits in fruit_list
    for color, quantity, cost in fruit_list:
        print color, quantity, cost
</snippet></ROW><ROW><id>16311528</id><snippet># We need to store our value somewhere
total_value = 0
for fruit_name, fruit_list in fruit_stand.items():
    # Ignore fruit_name and iterate over the fruits in fruit_list
    for color, quantity, cost in fruit_list:
        total_value += (quantity * cost)

print total_value
</snippet></ROW><ROW><id>16311528</id><snippet>for</snippet></ROW><ROW><id>16311528</id><snippet>for fruit_name in fruit_stand
    operation(fruit_name)
</snippet></ROW><ROW><id>16311528</id><snippet>[operation(fruit_name) for fruit_name in fruit_stand]
</snippet></ROW><ROW><id>16311528</id><snippet>for</snippet></ROW><ROW><id>16311528</id><snippet>sum([cost * quantity \  # Final operation goes in front
    for _, fruits in fruit_stand.items() \
        for _, cost, quantity in fruits])
</snippet></ROW><ROW><id>16311528</id><snippet>sum(cost * quantity \  # Note the missing []
    for _, fruits in fruit_stand.items() \
        for _, cost, quantity in fruits)
</snippet></ROW><ROW><id>16311528</id><snippet>__add__</snippet></ROW><ROW><id>16311528</id><snippet>Fruit</snippet></ROW><ROW><id>16311528</id><snippet>Fruit</snippet></ROW><ROW><id>16311528</id><snippet>Basket</snippet></ROW><ROW><id>16311528</id><snippet>Fruit</snippet></ROW><ROW><id>16311528</id><snippet>quantity</snippet></ROW><ROW><id>16311528</id><snippet>Fruit</snippet></ROW><ROW><id>16311528</id><snippet>Fruit</snippet></ROW><ROW><id>16311554</id><snippet>subprocess</snippet></ROW><ROW><id>16311554</id><snippet>returncode</snippet></ROW><ROW><id>16311554</id><snippet>Popen.returncode 
  The child return code, set by poll() and wait() (and indirectly by communicate()). 
  A None value indicates that the process hasn’t terminated yet.

  A negative value -N indicates that the child was terminated by signal N (Unix only).
</snippet></ROW><ROW><id>16311554</id><snippet>import subprocess
args  = ['commandname', 'some args']
child = subprocess.Popen(args, stdout=subprocess.PIPE)
streamdata = child.communicate()[0]
returncode = child.returncode
if returncode != 0:
    raise Exception
</snippet></ROW><ROW><id>16311587</id><snippet>json.dumps(separators=(',', ':'))
</snippet></ROW><ROW><id>16311718</id><snippet>cd</snippet></ROW><ROW><id>16311718</id><snippet>~$ python /path/to/httplib2/setup.py install
</snippet></ROW><ROW><id>16311718</id><snippet>python</snippet></ROW><ROW><id>16311718</id><snippet>pip</snippet></ROW><ROW><id>16311769</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>16311769</id><snippet>multiprocessing.Array</snippet></ROW><ROW><id>16311813</id><snippet>get_exif</snippet></ROW><ROW><id>16311813</id><snippet>links.csv</snippet></ROW><ROW><id>16311813</id><snippet>get_exif</snippet></ROW><ROW><id>16311813</id><snippet>requests.get</snippet></ROW><ROW><id>16311813</id><snippet>for line in file</snippet></ROW><ROW><id>16311813</id><snippet>requests.get(line.rstrip())</snippet></ROW><ROW><id>16311816</id><snippet>data = {}
for row in words:
    if not row["name"] + "-" + row["subname"] in data:
        data[row["name"] + "-" + row["subname"]] = {
            "name": row["name"],
            "subname": row["subname"],
            "data": {
                "attr1": {"name":"value1", "values": []},
                "attr2": {"name":"value2", "values": []}
            }
        }
    data[row["name"] + "-" + row["subname"]]["data"]["attr1"]["values"].append(row["value1"])
    data[row["name"] + "-" + row["subname"]]["data"]["attr2"]["values"].append(row["value2"])
</snippet></ROW><ROW><id>16311841</id><snippet>def lis(l):
 new_l = []
 j = 0
 for i in range(len(l)):
       j += l[i]
       new_l.append(j)
 return new_l

print lis([1,2,3,4])  #prints [1, 3, 6, 10]
</snippet></ROW><ROW><id>16311841</id><snippet>def cumulative(lis):
    summ=0
    for x in lis:
       summ+=x
       yield summ
   ....:        

In [48]: list(cumulative([1,2,3]))
Out[48]: [1, 3, 6]
</snippet></ROW><ROW><id>16311841</id><snippet>itertools.accumulate</snippet></ROW><ROW><id>16311841</id><snippet>In [2]: from itertools import accumulate

In [3]: list(accumulate([1,2,3]))
Out[3]: [1, 3, 6]
</snippet></ROW><ROW><id>16311849</id><snippet>itertools.groupby</snippet></ROW><ROW><id>16311849</id><snippet>&gt;&gt;&gt; s = '1234gdfh1234'
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; print [''.join(v) for k,v in groupby(s,str.isdigit)]
['1234', 'gdfh', '1234']
</snippet></ROW><ROW><id>16311849</id><snippet>&gt;&gt;&gt; print [x for x in re.split(r'(\d+)',s) if x]
['1234', 'gdfh', '1234']
</snippet></ROW><ROW><id>16311994</id><snippet>str.format</snippet></ROW><ROW><id>16311994</id><snippet>&gt;&gt;&gt; n = '0100'
&gt;&gt;&gt; '{:0{}b}'.format(long(n, 2) + 1, len(n))
'0101'
</snippet></ROW><ROW><id>16312115</id><snippet>&gt;&gt;&gt; from csv import reader
&gt;&gt;&gt; l='k,&lt;livesIn&gt; "Dayton,_Ohio"'
&gt;&gt;&gt; l1=[]
&gt;&gt;&gt; l1.append(l)
&gt;&gt;&gt; for line in reader(l1):
...   print list((line[0], ','.join(line[1:])))
... 
['k', '&lt;livesIn&gt; "Dayton,_Ohio"']
</snippet></ROW><ROW><id>16312281</id><snippet>import collections

def flatten(collection):
  for element in collection:
    if isinstance(element, collections.Iterable) and not isinstance(element, str):
      for x in flatten(element):
        yield x
    else:
      yield element

L = [1,2,[3,4,(5,6,7,{'abc':1,'xyz':2}),8,9],10]

print(' '.join(str(c) for c in flatten(L)))
</snippet></ROW><ROW><id>16312389</id><snippet>list</snippet></ROW><ROW><id>16312389</id><snippet>int</snippet></ROW><ROW><id>16312389</id><snippet>ast.NodeVisitor</snippet></ROW><ROW><id>16312401</id><snippet>i</snippet></ROW><ROW><id>16312401</id><snippet>string[i].isspace()</snippet></ROW><ROW><id>16312403</id><snippet>re.findall("[A-Za-z]+", sentence)
</snippet></ROW><ROW><id>16312408</id><snippet>getattr</snippet></ROW><ROW><id>16312408</id><snippet>getattr(myobj, 'attr', default_value)</snippet></ROW><ROW><id>16312651</id><snippet>from operator import itemgetter
sorted(my_numpy_array,key=itemgetter(1))
</snippet></ROW><ROW><id>16312651</id><snippet>from itertools import groupby
from operator import itemgetter
print groupby(my_numpy_array,key = itemgetter(1))
</snippet></ROW><ROW><id>16312697</id><snippet>def csv_average(filename, column):
    """ Returns the average of the values in
        column for the csv file """

    column_values = []

    with open(filename) as f:
        reader = csv.reader(f)
        for row in reader:
            column_values.append(row[column])

    return sum(column_values) / len(column_values)
</snippet></ROW><ROW><id>16312772</id><snippet>list1+list2</snippet></ROW><ROW><id>16312772</id><snippet>[a for a in list1+list2 if (a not in list1) or (a not in list2)]
</snippet></ROW><ROW><id>16312772</id><snippet>def xor(list1, list2):
    outputlist = []
    list3 = list1 + list2
    for i in range(0, len(list3)):
        if ((list3[i] not in list1) or (list3[i] not in list2)) and (list3[i] not in outputlist):
             outputlist[len(outputlist):] = [list3[i]]
    return outputlist
</snippet></ROW><ROW><id>16312852</id><snippet>import pymongo

c = pymongo.Connection()
dbs = c.database_names()

for db in dbs:
    for col in c[db].collection_names():
        for page in c[db][col].find():
            if '_id' in page:
                for key, value in page.iteritems():
                    print key, value
</snippet></ROW><ROW><id>16312852</id><snippet>find()</snippet></ROW><ROW><id>16312852</id><snippet>_id</snippet></ROW><ROW><id>16312852</id><snippet>fields</snippet></ROW><ROW><id>16312852</id><snippet>find()</snippet></ROW><ROW><id>16312968</id><snippet>\w</snippet></ROW><ROW><id>16312968</id><snippet>[a-zA-Z]</snippet></ROW><ROW><id>16313164</id><snippet>class Text(object):
    def __init__(self, data):
        # handle data in whatever "basic" form you need

    @classmethod
    def fromFiles(cls, files):
        # process list of filenames into the form that `__init__` needs
        return cls(processed_data)

    @classmethod
    def fromSentences(cls, sentences):
        # process list of Sentence objects into the form that `__init__` needs
        return cls(processed_data)
</snippet></ROW><ROW><id>16313164</id><snippet>fromXXX</snippet></ROW><ROW><id>16313164</id><snippet>Text.fromFiles(...)</snippet></ROW><ROW><id>16313164</id><snippet>Text</snippet></ROW><ROW><id>16313164</id><snippet>Text.fromSentences(...)</snippet></ROW><ROW><id>16313164</id><snippet>Text</snippet></ROW><ROW><id>16313164</id><snippet>def __init__(self, file):
    if isinstance(file, basestring):
        # If a string filename was passed in, open the file before proceeding
        file = open(file)
    # Now you can handle file as a file object
</snippet></ROW><ROW><id>16313178</id><snippet># generator version
def collect_sum(iterable,n):
  for e in range(1,len(iterable)+1):
    if e%n==0:
      yield sum(iterable[e-n:e])

# list comprehension version
def collect_sum(iterable,n):
  return [sum(iterable[e-n:e]) for e in range(1,len(iterable)+1) if e%n==0] 

for i in collect_sum(range(1,21),5):
  print(i,end=' ')
</snippet></ROW><ROW><id>16313602</id><snippet>Flask-Login
Flask-Principal
Flask-SQLAlchemy
</snippet></ROW><ROW><id>16313602</id><snippet>@identity_loaded.connect_via(app)
def on_identity_loaded(sender, identity):
    # Set the identity user object
    current_user = session.get('user', False)
    if not current_user:
        return False
    identity.user = current_user

    # Add the UserNeed to the identity
    if hasattr(current_user, 'id'):
        identity.provides.add(UserNeed(current_user.id))

    # Assuming the User model has a list of groups, update the
    # identity with the groups that the user provides
    if hasattr(current_user, 'groups'):
        groups = user.Group.query.filter(user.Group.users.any(id=current_user.id)).all()
        for group in groups:
            identity.provides.add(RoleNeed(group.name))
</snippet></ROW><ROW><id>16313602</id><snippet>groups = db.Table('groups',
    db.Column('user_id', db.Integer, db.ForeignKey('user.id')),
    db.Column('group_id', db.Integer, db.ForeignKey('group.id'))
)

group_to_group = db.Table('group_to_group',
    db.Column('parent_id', db.Integer, db.ForeignKey('group.id'), primary_key=True),
    db.Column('child_id', db.Integer, db.ForeignKey('group.id'), primary_key=True)
)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(64), unique=True)
    email = db.Column(db.String(120), unique=True)
    display_name = db.Column(db.String(120))
    created_at = db.Column(db.DateTime)
    last_login = db.Column(db.DateTime, default=db.func.now())

    def __init__(self, name, email, display_name):
        self.name = name
        self.email = email
        self.display_name = display_name
        self.created_at = datetime.datetime.now()
        self.order_by = User.display_name

    def is_authenticated(self):
        return True

    def is_active(self):
        return True

    def is_anonymous(self):
        return False

    def get_id(self):
        return unicode(self.id)

    def __repr__(self):
        return self.display_name


class Group(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(64))
    users = db.relationship('User', 
                            secondary=groups,
                            backref=db.backref('groups',
                                               lazy='dynamic',
                                               order_by=name
                            )
    )
    parents = db.relationship('Group',
                              secondary=group_to_group, 
                              primaryjoin=id==group_to_group.c.parent_id,  
                              secondaryjoin=id==group_to_group.c.child_id, 
                              backref="children",
                              remote_side=[group_to_group.c.parent_id])

    def __repr__(self):
        return self.name
</snippet></ROW><ROW><id>16313602</id><snippet>@NameOfYourRole.require(http_exception=403)
@route("/something/special/people/can/do")
def super_cool(...):
</snippet></ROW><ROW><id>16313778</id><snippet>def grades(alist):
    highest, average, lowest, sumvalues = alist[0]
    for i in alist[1:]:
        if i[0] &gt; highest: highest = i[0]
        average += i[1]
        if i[2] &lt; lowest: lowest = i[2]
        sumvalues += i[3]
    average = average / len(alist)
    return highest, average, lowest, sumvalues
</snippet></ROW><ROW><id>16313889</id><snippet>split</snippet></ROW><ROW><id>16313889</id><snippet>&gt;&gt;&gt; s="A:01 What is the date of the election ?"
&gt;&gt;&gt; " ".join(s.split()[1:-1])
'What is the date of the election'
&gt;&gt;&gt; s="BK:02 How long is the river Nile ?"
&gt;&gt;&gt; " ".join(s.split()[1:-1])
'How long is the river Nile'
&gt;&gt;&gt; s="Date:30/4/2013"
&gt;&gt;&gt; s.split(":")[1:][0]
'30/4/2013'
&gt;&gt;&gt; s="Day:Tuesday"
&gt;&gt;&gt; s.split(":")[1:][0]
'Tuesday'
</snippet></ROW><ROW><id>16314014</id><snippet>range</snippet></ROW><ROW><id>16314014</id><snippet>range(stop)</snippet></ROW><ROW><id>16314014</id><snippet>range(start, stop[, step])</snippet></ROW><ROW><id>16314014</id><snippet>&gt;&gt;&gt; for n in range(17, 100, 10):
        print n


17
27
37
47
57
67
77
87
97
</snippet></ROW><ROW><id>16314333</id><snippet>def read(self, request, id=None):
</snippet></ROW><ROW><id>16314333</id><snippet>urlpatterns = patterns('',
    url(r'^search/$', search_resource),
    url(r'^(?P&lt;id&gt;.*)$', annotation_resource),
}
</snippet></ROW><ROW><id>16314480</id><snippet>In [10]: g = df.groupby(level=0)['b']

In [11]: g.apply(np.cumsum)
Out[11]:
a
1    1
1    3
2    3
3    4
3    9
dtype: int64
</snippet></ROW><ROW><id>16314480</id><snippet>In [12]: df['partial'] = g.apply(np.cumsum)
</snippet></ROW><ROW><id>16314541</id><snippet>O(n*log n)</snippet></ROW><ROW><id>16314541</id><snippet>def maximize_nonoverlapping_count(intervals):
    # sort by the end-point
    L = sorted(intervals, key=lambda (start, end): (end, (end - start)),
               reverse=True) # O(n*logn)
    iv = build_interval_tree(intervals) # O(n*log n)
    result = []
    while L: # until there are intervals left to consider
        # pop the interval with the smallest end-point, keep it in the result
        result.append(L.pop()) # O(1)
        # remove intervals that overlap with the popped interval
        overlapping_intervals = iv.pop(result[-1]) # O(log n + m)
        remove(overlapping_intervals, from_=L) 
    return result
</snippet></ROW><ROW><id>16314541</id><snippet>f = maximize_nonoverlapping_count
assert f([[0, 133], [78, 100], [25, 30]]) == [[25, 30], [78, 100]]
assert f([[0,100],[9,10],[12,90]]) == [[9,10], [12, 90]]
assert f([[0, 100], [4, 20], [30, 35], [30, 78]]) == [[4, 20], [30, 35]]
assert f([[30, 70], [25, 40]]) == [[25, 40]]
</snippet></ROW><ROW><id>16314541</id><snippet>O(log n + m)</snippet></ROW><ROW><id>16314541</id><snippet>IntervalTree</snippet></ROW><ROW><id>16314541</id><snippet>quicksect.py</snippet></ROW><ROW><id>16314541</id><snippet>quicksect</snippet></ROW><ROW><id>16314541</id><snippet>O(n**2)</snippet></ROW><ROW><id>16314541</id><snippet>from quicksect import IntervalNode

class Interval(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end
        self.removed = False

def maximize_nonoverlapping_count(intervals):
    intervals = [Interval(start, end) for start, end in intervals]
    # sort by the end-point
    intervals.sort(key=lambda x: (x.end, (x.end - x.start)))   # O(n*log n)
    tree = build_interval_tree(intervals) # O(n*log n)
    result = []
    for smallest in intervals: # O(n) (without the loop body)
        # pop the interval with the smallest end-point, keep it in the result
        if smallest.removed:
            continue # skip removed nodes
        smallest.removed = True
        result.append([smallest.start, smallest.end]) # O(1)

        # remove (mark) intervals that overlap with the popped interval
        tree.intersect(smallest.start, smallest.end, # O(log n + m)
                       lambda x: setattr(x.other, 'removed', True))
    return result

def build_interval_tree(intervals):
    root = IntervalNode(intervals[0].start, intervals[0].end,
                        other=intervals[0])
    return reduce(lambda tree, x: tree.insert(x.start, x.end, other=x),
                  intervals[1:], root)
</snippet></ROW><ROW><id>16314541</id><snippet>O(n**2)</snippet></ROW><ROW><id>16314541</id><snippet>intervals</snippet></ROW><ROW><id>16314541</id><snippet>len(result) == len(intervals) / 3</snippet></ROW><ROW><id>16314541</id><snippet>len(intervals) / 2</snippet></ROW><ROW><id>16314541</id><snippet>tree.intersect()</snippet></ROW><ROW><id>16314541</id><snippet>n/3</snippet></ROW><ROW><id>16314541</id><snippet>x.other.removed = True</snippet></ROW><ROW><id>16314541</id><snippet>n/2</snippet></ROW><ROW><id>16314541</id><snippet>n*n/6</snippet></ROW><ROW><id>16314541</id><snippet>n = 6
intervals = [[0, 100], [0, 100], [0, 100], [0, 10], [10, 20], [15, 40]])
result = [[0, 10], [10, 20]]
</snippet></ROW><ROW><id>16314541</id><snippet>banyan</snippet></ROW><ROW><id>16314541</id><snippet>O(n log n)</snippet></ROW><ROW><id>16314541</id><snippet>from banyan import SortedSet, OverlappingIntervalsUpdator # pip install banyan

def maximize_nonoverlapping_count(intervals):
    # sort by the end-point O(n log n)
    sorted_intervals = SortedSet(intervals,
                                 key=lambda (start, end): (end, (end - start)))
    # build "interval" tree O(n log n)
    tree = SortedSet(intervals, updator=OverlappingIntervalsUpdator)
    result = []
    while sorted_intervals: # until there are intervals left to consider
        # pop the interval with the smallest end-point, keep it in the result
        result.append(sorted_intervals.pop()) # O(log n)

        # remove intervals that overlap with the popped interval
        overlapping_intervals = tree.overlap(result[-1]) # O(m log n)
        tree -= overlapping_intervals # O(m log n)
        sorted_intervals -= overlapping_intervals # O(m log n)
    return result
</snippet></ROW><ROW><id>16314541</id><snippet>[0, 10]</snippet></ROW><ROW><id>16314541</id><snippet>[10, 20]</snippet></ROW><ROW><id>16314541</id><snippet>f = maximize_nonoverlapping_count
assert f([[0, 100], [0, 10], [11, 20], [15, 40]]) == [[0, 10] ,[11, 20]]
assert f([[0, 100], [0, 10], [10, 20], [15, 40]]) == [[0, 10] ,[15, 40]]
</snippet></ROW><ROW><id>16314541</id><snippet>sorted_intervals</snippet></ROW><ROW><id>16314541</id><snippet>tree</snippet></ROW><ROW><id>16314541</id><snippet>from banyan import SortedSet, OverlappingIntervalsUpdator # pip install banyan

def maximize_nonoverlapping_count(intervals):
    # build "interval" tree sorted by the end-point O(n log n)
    tree = SortedSet(intervals, key=lambda (start, end): (end, (end - start)),
                     updator=OverlappingIntervalsUpdator)
    result = []
    while tree: # until there are intervals left to consider
        # pop the interval with the smallest end-point, keep it in the result
        result.append(tree.pop()) # O(log n)

        # remove intervals that overlap with the popped interval
        overlapping_intervals = tree.overlap(result[-1]) # O(m log n)
        tree -= overlapping_intervals # O(m log n)
    return result
</snippet></ROW><ROW><id>16314575</id><snippet>int numReceived = clientSock.Receive(buffer);
string msg = Encoding.ASCII.GetString(buffer, 0, numReceived);
</snippet></ROW><ROW><id>16314805</id><snippet>re.search</snippet></ROW><ROW><id>16314805</id><snippet>MatchObject.group(groupNumber,...)</snippet></ROW><ROW><id>16314805</id><snippet>import re
t = "User Number 1 will probably like movie ID: RecommendedItem[item:557, value:7.32173]the most!"
itemNumber = re.search(r'(?&lt;=RecommendedItem\[item:)(\d+)',t)
print(itemNumber.group(0))
</snippet></ROW><ROW><id>16314805</id><snippet>import re
t = "User Number 1 will probably like movie ID: RecommendedItem[item:557, value:7.32173]the most!"
itemNumber = re.search(r'(?&lt;=RecommendedItem\[item:)(?P&lt;itemNumber&gt;\d+)',t)
print(itemNumber.groupdict()["itemNumber"]) #note using groupdict() not group()
</snippet></ROW><ROW><id>16314805</id><snippet>&gt;&gt;&gt; 
557
</snippet></ROW><ROW><id>16314826</id><snippet>time.sleep(random.randint(1, 10)
</snippet></ROW><ROW><id>16314969</id><snippet>repr</snippet></ROW><ROW><id>16314969</id><snippet>&gt;&gt;&gt; a=['\n:001000 ', '\r:10111 ', ' :000 ', '!:01101111101 ', '":0010011 ', "':0010010110 ", '(:00100101111110110 ', '):00100101111110111 ', ',:101100 ', '-:1011011011 ', '.:0100100 ', '0:011011111001101 ', '1:0110111110010 ', '2:1011011000111 ', '3:011011111001110 ']
&gt;&gt;&gt; with open("Output.txt", "wb") as f:
        for t in a:
            f.write(t + " ")


&gt;&gt;&gt; with open("Output.txt", "rb") as f:
        print repr(f.read()) # representation


'\n:001000  \r:10111   :000  !:01101111101  ":0010011  \':0010010110  (:00100101111110110  ):00100101111110111  ,:101100  -:1011011011  .:0100100  0:011011111001101  1:0110111110010  2:1011011000111  3:011011111001110  '
</snippet></ROW><ROW><id>16314969</id><snippet>&gt;&gt;&gt; with open("Output.txt", "wb") as f:
        for t in a:
            f.write((t + " ").encode('string_escape'))


&gt;&gt;&gt; with open("Output.txt", "rb") as f:
        print f.read()


\n:001000  \r:10111   :000  !:01101111101  ":0010011  \':0010010110  (:00100101111110110  ):00100101111110111  ,:101100  -:1011011011  .:0100100  0:011011111001101  1:0110111110010  2:1011011000111  3:011011111001110  
</snippet></ROW><ROW><id>16315498</id><snippet>def runs(seq):
    result = []
    for s in seq:
        if not result or s != result[-1][-1] + 1:
            # Start a new run if we can't continue the previous one.
            result.append([])
        result[-1].append(s)
    return result

print runs([1, 2, 3, 4, 8, 10, 11, 12, 17])
</snippet></ROW><ROW><id>16315524</id><snippet>.format</snippet></ROW><ROW><id>16315524</id><snippet>.split("|")</snippet></ROW><ROW><id>16315524</id><snippet>suggestionDict["Genres"]</snippet></ROW><ROW><id>16315524</id><snippet>import re
num = 557
suggestion="557::Voyage to the Bottom of the Sea (1961)::Adventure|Sci-Fi"

suggestionDict = re.search(r'%d::(?P&lt;Title&gt;[a-zA-Z0-9 ]+)\s\((?P&lt;Date&gt;\d+)\)::(?P&lt;Genres&gt;[a-zA-Z1-9|]+)' % num, suggestion).groupdict()
#printing to show if it works/doesn't
print('\n'.join(["%s:%s" % (k,d) for k,d in suggestionDict.items()]))
#clearer example of how to use
print("\nCLEAR EXAMPLE:")
print(suggestionDict["Title"])
</snippet></ROW><ROW><id>16315524</id><snippet>Title:Voyage to the Bottom of the Sea 
Genres:Adventure|Sci
Date:1961

CLEAR EXAMPLE:
Voyage to the Bottom of the Sea 
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16315804</id><snippet>count</snippet></ROW><ROW><id>16315804</id><snippet>Output1</snippet></ROW><ROW><id>16315804</id><snippet>count = 0
Input1 = True
while True:
    if Input1:
        print("Doing Input1 stuff...")
        count = count + 1
        if count == 1: #if the count is 1 it is the FIRST iteration of the loop so we switch on!
            Output1 = True
            print("Output 1 switched ON")
    if Output1: 
        print("Out-putted")
        Output1 = False #switch if OFF, and since count will never = 1 again, this code block won't activate again.
        print("Output 2 switched OFF")
    #break the loop sometime (this is just for demonstration)
    if count == 4:
        print("I've done 4 iterations")
        break;
</snippet></ROW><ROW><id>16315804</id><snippet>&gt;&gt;&gt; 
Doing Input1 stuff...
Output 1 switched ON
Out-putted
Output 2 switched OFF
Doing Input1 stuff...
Doing Input1 stuff...
Doing Input1 stuff...
I've done 4 iterations
</snippet></ROW><ROW><id>16316205</id><snippet>chart = chartSheet.ChartObjects(1)
</snippet></ROW><ROW><id>16316205</id><snippet>Chart</snippet></ROW><ROW><id>16316205</id><snippet>chart</snippet></ROW><ROW><id>16316205</id><snippet>chartObject = chartSheet.ChartObjects(1)
chart = chartObject.chart
</snippet></ROW><ROW><id>16316333</id><snippet>append</snippet></ROW><ROW><id>16316366</id><snippet>M = A - np.dot(B,K)</snippet></ROW><ROW><id>16316366</id><snippet>solve_discrete_lyapunov(M, I)</snippet></ROW><ROW><id>16316366</id><snippet>np.dot(M, np.dot(P, M.T)) - P = -I
</snippet></ROW><ROW><id>16316366</id><snippet>In [64]: M = A - np.dot(B,K)

In [65]: np.dot(M, np.dot(P,M.T)) - P
Out[65]: 
array([[ -1.00014927e+00,  -9.93418066e-05],
       [ -9.93418066e-05,  -1.00006419e+00]])

In [66]: np.allclose(np.dot(M, np.dot(P,M.T)) - P, -I, atol=0.001)
Out[66]: True
</snippet></ROW><ROW><id>16316366</id><snippet>np.dot(M.T, np.dot(P, M)) - P + I = 0
</snippet></ROW><ROW><id>16316366</id><snippet>P = solve_discrete_lyapunov(M.T, I)
</snippet></ROW><ROW><id>16316511</id><snippet>PyObject_GetAttr</snippet></ROW><ROW><id>16316511</id><snippet>tp_getattro</snippet></ROW><ROW><id>16316511</id><snippet>tp_getattr</snippet></ROW><ROW><id>16316511</id><snippet>__getattribute__</snippet></ROW><ROW><id>16316511</id><snippet>__getattr__</snippet></ROW><ROW><id>16316511</id><snippet>datetime</snippet></ROW><ROW><id>16316511</id><snippet>slot_tp_getattr_hook</snippet></ROW><ROW><id>16316511</id><snippet>tp_getattro</snippet></ROW><ROW><id>16316511</id><snippet>__getattribute__</snippet></ROW><ROW><id>16316511</id><snippet>__getattr__</snippet></ROW><ROW><id>16316511</id><snippet>_PyType_Lookup</snippet></ROW><ROW><id>16316511</id><snippet>__getattr__</snippet></ROW><ROW><id>16316511</id><snippet>from lxml import etree

def make_parser(element):
    lookup = etree.ElementDefaultClassLookup(element=element)
    parser = etree.XMLParser()
    parser.setElementClassLookup(lookup)
    return parser

class CustomElement(etree.ElementBase):
    def __getattr__(self, attr):
        try:
            name, index = attr.rsplit('_', 1)
            index = int(index)
        except ValueError:
            name = attr
            index = 0
        return self.xpath(name)[index]

parser = make_parser(CustomElement)
</snippet></ROW><ROW><id>16316511</id><snippet>&gt;&gt;&gt; spam = etree.fromstring(r'''
... &lt;spam&gt;
...     &lt;foo&gt;
...         &lt;bar&gt;eggs00&lt;/bar&gt;
...         &lt;bar&gt;eggs01&lt;/bar&gt;
...     &lt;/foo&gt;
...     &lt;foo&gt;
...         &lt;bar&gt;eggs10&lt;/bar&gt;
...         &lt;bar&gt;eggs11&lt;/bar&gt;
...     &lt;/foo&gt;
... &lt;/spam&gt;
... ''', parser)

&gt;&gt;&gt; spam.foo_0.bar_0.text
'eggs00'
&gt;&gt;&gt; spam.foo_0.bar_1.text
'eggs01'
&gt;&gt;&gt; spam.foo_1.bar_0.text
'eggs10'
&gt;&gt;&gt; spam.foo_1.bar_1.text
'eggs11'
</snippet></ROW><ROW><id>16316708</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>16316708</id><snippet>from itertools import chain
mylist = list(chain.from_iterable(myarray))
</snippet></ROW><ROW><id>16316708</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; myarray = [['jacob','mary'],['jack','white'],['fantasy','clothes'],['heat','abc'],['edf','fgc']]
&gt;&gt;&gt; list(chain.from_iterable(myarray))
['jacob', 'mary', 'jack', 'white', 'fantasy', 'clothes', 'heat', 'abc', 'edf', 'fgc']
</snippet></ROW><ROW><id>16316708</id><snippet>sum()</snippet></ROW><ROW><id>16316708</id><snippet>&gt;&gt;&gt; timeit.timeit('f()', 'from __main__ import withchain as f')
2.858742465992691
&gt;&gt;&gt; timeit.timeit('f()', 'from __main__ import withsum as f')
1.6423718839942012
&gt;&gt;&gt; timeit.timeit('f()', 'from __main__ import withlistcomp as f')
2.0854451240156777
</snippet></ROW><ROW><id>16316708</id><snippet>itertools.chain</snippet></ROW><ROW><id>16316708</id><snippet>&gt;&gt;&gt; myarray *= 100
&gt;&gt;&gt; timeit.timeit('f()', 'from __main__ import withchain as f', number=25000)
1.6583486960153095
&gt;&gt;&gt; timeit.timeit('f()', 'from __main__ import withsum as f', number=25000)
23.100156371016055
&gt;&gt;&gt; timeit.timeit('f()', 'from __main__ import withlistcomp as f', number=25000)
2.093297885992797
</snippet></ROW><ROW><id>16316792</id><snippet>MainWindow</snippet></ROW><ROW><id>16316792</id><snippet>from global_settings_file import GlobalSettingsClass
</snippet></ROW><ROW><id>16316808</id><snippet>g.db = Connection('localhost','flask', user='root', password='ghrix321')
</snippet></ROW><ROW><id>16317032</id><snippet>html5lib</snippet></ROW><ROW><id>16317032</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; r = requests.get('http://feeds.chicagotribune.com/~r/ChicagoBreakingNews/~3/T2Zg3dk4L88/story01.htm')
&gt;&gt;&gt; soup = BeautifulSoup(r.text, 'lxml')
&gt;&gt;&gt; soup.find('div', id='story-body') is not None
False
&gt;&gt;&gt; soup = BeautifulSoup(r.text, 'html5')
&gt;&gt;&gt; soup.find('div', id='story-body') is not None
True
</snippet></ROW><ROW><id>16317093</id><snippet>gobject</snippet></ROW><ROW><id>16317093</id><snippet>gobject.threads_init()
</snippet></ROW><ROW><id>16317281</id><snippet>import ast
import sys

ser.write(ast.literal_eval("'{0}'".format(sys.argv[1])))
</snippet></ROW><ROW><id>16317281</id><snippet>literal_eval</snippet></ROW><ROW><id>16317281</id><snippet>ast</snippet></ROW><ROW><id>16317281</id><snippet>"'\x7E\x00\x7D...'"</snippet></ROW><ROW><id>16317281</id><snippet>ser.write(sys.argv[1].decode("string-escape"))
</snippet></ROW><ROW><id>16317360</id><snippet>zsort='max'</snippet></ROW><ROW><id>16317360</id><snippet>ax.bar3d()</snippet></ROW><ROW><id>16317360</id><snippet>ax.bar3d(xpos,ypos,zpos, dx, dy, dz,  color='b', alpha=1., zsort='max')
</snippet></ROW><ROW><id>16317360</id><snippet>from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np

data = np.array([[0,1,0,2,0],
                 [0,3,0,2,0],
                 [6,1,1,7,0],
                 [0,5,0,2,9],
                 [0,1,0,4,0],
                 [9,1,3,4,2],
                 [0,0,2,1,3], ])

column_names = ['a','b','c','d','e']
row_names = ['Mon','Tue','Wed','Thu','Fri','Sat','Sun']

fig = plt.figure()
ax = Axes3D(fig)

lx= len(data[0])            # Work out matrix dimensions
ly= len(data[:,0])
xpos = np.arange(0,lx,1)    # Set up a mesh of positions
ypos = np.arange(0,ly,1)
xpos, ypos = np.meshgrid(xpos+0.5, ypos+0.5)

xpos = xpos.flatten()   # Convert positions to 1D array
ypos = ypos.flatten()
zpos = np.ones(lx*ly)*1e-10

dx = 1. * np.ones_like(zpos)
dy = dx.copy()
dz = data.flatten()

ax.bar3d(xpos,ypos,zpos, dx, dy, dz,  color='b', alpha=1., zsort='max')
plt.ion()
plt.show()
</snippet></ROW><ROW><id>16317412</id><snippet>from collections import defaultdict

id_to_scores = defaultdict(list)

for entry in l:
    id_to_scores[entry['id']].append(entry['s'])

output = [{'id': k, 's': max(v)} for k, v in id_to_scores.iteritems()]
</snippet></ROW><ROW><id>16317412</id><snippet>.items()</snippet></ROW><ROW><id>16317412</id><snippet>dict</snippet></ROW><ROW><id>16317412</id><snippet>&gt;&gt;&gt; [{'id': k, 's': max(v)} for k, v in id_to_scores.iteritems()]
[{'s': 1.5, 'id': 1}, {'s': 0.6, 'id': 3}]
</snippet></ROW><ROW><id>16317412</id><snippet>id</snippet></ROW><ROW><id>16317412</id><snippet>per_id = defaultdict(list)

for entry in l:
    per_id[entry['id']].append(entry)

output = [max(v, key=lambda d: d['s']) for v in per_id.itervalues()]
</snippet></ROW><ROW><id>16317606</id><snippet>zip</snippet></ROW><ROW><id>16317606</id><snippet>cur = [[14, k, j] for j, k in zip(rows[14], range(15))]
</snippet></ROW><ROW><id>16317693</id><snippet>unicode.translate()</snippet></ROW><ROW><id>16317693</id><snippet>ascii_to_wide = dict((i, unichr(i + 0xfee0)) for i in range(0x21, 0x7f))
ascii_to_wide.update({0x20: u'\u3000', 0x2D: u'\u2212'})  # space and minus
wide_to_ascii = dict((i, unichr(i - 0xfee0)) for i in range(0xff01, 0xff5f))
wide_to_ascii.update({0x3000: u' ', 0x2212: u'-'})        # space and minus

wide_text.translate(wide_to_ascii)
ascii_text.translate(ascii_to_wide)

&gt;&gt;&gt; wide_text.translate(wide_to_ascii)
u'Half-LifeSystem Data'
&gt;&gt;&gt; wide_text.translate(wide_to_ascii).translate(ascii_to_wide)
u'\uff28\uff41\uff4c\uff46\u2212\uff2c\uff49\uff46\uff45\uff33\uff59\uff53\uff54\uff45\uff4d\u3000\uff24\uff41\uff54\uff41'
</snippet></ROW><ROW><id>16317892</id><snippet>import numpy as np
R = np.array([[0.62367947],
              [0.95427859],
              [0.97984112],
              [0.7025228],
              [0.86436385],
              [0.71010739],
              [0.98748138],
              [0.75198057]])

phase = np.array([[-1., 1., -1.],
                  [-1., 1., 1.],
                  [1., 1., 1.],
                  [1., -1., 1.],
                  [-1., -1., -1.],
                  [1., 1., -1.],
                  [1., -1., -1.],
                  [-1., -1., 1.]])

np.savetxt('R2.txt', np.hstack([R, phase]), fmt=['%0.8f','%g','%g','%g'])    
</snippet></ROW><ROW><id>16317892</id><snippet>0.62367947 -1 1 -1
0.95427859 -1 1 1
0.97984112 1 1 1
0.70252280 1 -1 1
0.86436385 -1 -1 -1
0.71010739 1 1 -1
0.98748138 1 -1 -1
0.75198057 -1 -1 1
</snippet></ROW><ROW><id>16317892</id><snippet>R</snippet></ROW><ROW><id>16317892</id><snippet>phase</snippet></ROW><ROW><id>16317892</id><snippet>np.hstack([R, phase])</snippet></ROW><ROW><id>16317892</id><snippet>In [137]: np.hstack([R,phase])
Out[137]: 
array([[ 0.62367947, -1.        ,  1.        , -1.        ],
       [ 0.95427859, -1.        ,  1.        ,  1.        ],
       [ 0.97984112,  1.        ,  1.        ,  1.        ],
       [ 0.7025228 ,  1.        , -1.        ,  1.        ],
       [ 0.86436385, -1.        , -1.        , -1.        ],
       [ 0.71010739,  1.        ,  1.        , -1.        ],
       [ 0.98748138,  1.        , -1.        , -1.        ],
       [ 0.75198057, -1.        , -1.        ,  1.        ]])
</snippet></ROW><ROW><id>16317892</id><snippet>np.savetxt</snippet></ROW><ROW><id>16317918</id><snippet>def with_next(thing):
    prev = next(thing)
    while True:
        try:
            cur = next(thing)
        except StopIteration, e:
            # There's no sane next item at the end of the iterable, so
            # use None.
            yield (prev, None)
            raise e
        yield (prev, cur)
        prev = cur
</snippet></ROW><ROW><id>16317918</id><snippet>None</snippet></ROW><ROW><id>16317918</id><snippet>for curitem, nextitem in with_next(iter(['mouse', 'cat', 'dog', 'yay'])):
    print "%s (next: %s)" % (curitem, nextitem)
</snippet></ROW><ROW><id>16317918</id><snippet>mouse (next: cat)
cat (next: dog)
dog (next: yay)
yay (next: None)
</snippet></ROW><ROW><id>16317918</id><snippet>dict.iteritems()</snippet></ROW><ROW><id>16317918</id><snippet>dict.iterkeys()</snippet></ROW><ROW><id>16317918</id><snippet>enumerate</snippet></ROW><ROW><id>16317918</id><snippet>mydict = {'mouse': 'squeek', 'cat': 'meow', 'dog': 'woof'}
for cur_key, next_key in with_next(mydict.iterkeys()):
    print "%s (next: %s)" % (cur_key, next_key)
</snippet></ROW><ROW><id>16317918</id><snippet>def text_file_reader_gen():
    path=str(raw_input('enter full file path \t:'))
    fin=open(path,'r')
    ftext=(x.strip() for x in fin)
    return ftext #yield?
</snippet></ROW><ROW><id>16317918</id><snippet>yield</snippet></ROW><ROW><id>16317918</id><snippet>return</snippet></ROW><ROW><id>16317918</id><snippet>return</snippet></ROW><ROW><id>16317918</id><snippet>yield</snippet></ROW><ROW><id>16317918</id><snippet>yield</snippet></ROW><ROW><id>16318054</id><snippet>t</snippet></ROW><ROW><id>16318054</id><snippet>p</snippet></ROW><ROW><id>16318054</id><snippet>tanice</snippet></ROW><ROW><id>16318054</id><snippet>practice</snippet></ROW><ROW><id>16318054</id><snippet>max</snippet></ROW><ROW><id>16318054</id><snippet>max</snippet></ROW><ROW><id>16318054</id><snippet>itertools.chain</snippet></ROW><ROW><id>16318054</id><snippet>max(chain([word1],nwords),key=len)  #assuming you're comparing based on length.
</snippet></ROW><ROW><id>16318054</id><snippet>from itertools import chain,izip_longest
''.join(chain.from_iterable(izip_longest(word1,*nwords,fillvalue='')))
</snippet></ROW><ROW><id>16318054</id><snippet>&gt;&gt;&gt; from itertools import chain,izip_longest
&gt;&gt;&gt; words = ('janice','tanice','practice')
&gt;&gt;&gt; ''.join(chain.from_iterable(izip_longest(*words,fillvalue='')))
'jtpaarnnaiicccteeice'
</snippet></ROW><ROW><id>16318054</id><snippet>def foo(*args): ...
</snippet></ROW><ROW><id>16318054</id><snippet>foo(*iterable)
</snippet></ROW><ROW><id>16318054</id><snippet>izip_longest</snippet></ROW><ROW><id>16318054</id><snippet>''.join(chain.from_iterable(izip_longest('janice','tanice','practice',fillvalue='')))
</snippet></ROW><ROW><id>16318054</id><snippet>zip_longest</snippet></ROW><ROW><id>16318079</id><snippet>n</snippet></ROW><ROW><id>16318079</id><snippet>Host</snippet></ROW><ROW><id>16318193</id><snippet>osx</snippet></ROW><ROW><id>16318193</id><snippet>Qt4Agg</snippet></ROW><ROW><id>16318193</id><snippet>GTKAgg</snippet></ROW><ROW><id>16318193</id><snippet>import matplotlib
matplotlib.use('Qt4Agg')  
</snippet></ROW><ROW><id>16318193</id><snippet>ipython --pylab=qt
</snippet></ROW><ROW><id>16318193</id><snippet>.matplotlibrc</snippet></ROW><ROW><id>16318193</id><snippet>backend      : Qt4Agg
</snippet></ROW><ROW><id>16318221</id><snippet>.iterwalk()</snippet></ROW><ROW><id>16318221</id><snippet>indent = []
for action, elem in etree.iterwalk(root, events=('start', 'end')):
    if action == 'start':
        print '{}&lt;{}{}&gt;'.format(''.join(indent), elem.tag, '/' if not len(elem) else '')
        indent.append('  ')
    else:
        indent.pop()
        if len(elem):
            print '{}&lt;/{}&gt;'.format(''.join(indent), elem.tag)
</snippet></ROW><ROW><id>16318221</id><snippet>&lt;root&gt;
  &lt;foo&gt;
    &lt;bar/&gt;
    &lt;bar/&gt;
  &lt;/foo&gt;
  &lt;foo&gt;
    &lt;bar/&gt;
  &lt;/foo&gt;
  &lt;foo/&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>16318913</id><snippet>def divider(lst,n):
    lst = [float(x) for x in lst[::-1]]
    for i in range(1,n+1):
        lst = [x/i for x in lst]
        yield lst
</snippet></ROW><ROW><id>16318913</id><snippet>def divider(lst,n):
    lst = [float(x) for x in reversed(lst)]
    yield lst
    for i in range(2,n+1):
        lst = [x/i for x in lst]
        yield lst
</snippet></ROW><ROW><id>16318913</id><snippet>lst[::-1]</snippet></ROW><ROW><id>16318913</id><snippet>reversed(lst)</snippet></ROW><ROW><id>16318913</id><snippet>&gt;&gt;&gt; def divider(lst,n):
...     lst = [float(x) for x in reversed(lst)]
...     yield lst
...     for i in range(2,n+1):
...         lst = [x/i for x in lst]
...         yield lst
... 
&gt;&gt;&gt; for lst in divider([40, 60, 100, 240],3):
...     print lst
... 
[240.0, 100.0, 60.0, 40.0]
[120.0, 50.0, 30.0, 20.0]
[40.0, 16.666666666666668, 10.0, 6.666666666666667]
</snippet></ROW><ROW><id>16319338</id><snippet>n-1</snippet></ROW><ROW><id>16319338</id><snippet>import numpy as np
import matplotlib.pyplot as plt

p=.3

bins=np.arange(0,50,1)

r=np.random.rand( 1000 )
gen=np.floor(np.log(r)/np.log(1-p))
plt.hist(gen,bins=bins,alpha=.8)

N=5
gen_trunc=np.floor(np.log(1-r*(1-(1-p)**N))/np.log(1-p))
plt.hist(gen_trunc,bins=bins,alpha=.8)

plt.show()
</snippet></ROW><ROW><id>16319349</id><snippet>from ctypes import *

class mystruct(Structure):
    _fields_ = [("str", c_char_p),
                ("str_length", c_long),
                ("count", c_long)]

s = b"ABC" * 10
c = 44

#convert python string to null terminated c char array
c_str = create_string_buffer(s)
#cast char array to char*
c_str_pointer = cast(c_str, c_char_p)
#create structure
a = mystruct(c_str_pointer, len(s), c)

# print byte representation of structure
print(bytes(a))

print(a.str)
print(a.str_length)
print(a.count)
</snippet></ROW><ROW><id>16319349</id><snippet>from ctypes import *

class mystruct(Structure):
    _fields_ = [("str", c_char*100),
                ("str_length", c_long),
                ("count", c_long)]

s = b"ABC" * 10
c = 44

a = mystruct(s, len(s), c)

# print byte representation of structure
print(bytes(a))

print(a.str)
print(a.str_length)
print(a.count)
</snippet></ROW><ROW><id>16319590</id><snippet>service = build(api, version, http=http)</snippet></ROW><ROW><id>16319590</id><snippet>service = build("plus", "v1", http=http)</snippet></ROW><ROW><id>16319590</id><snippet>service = build("your_api", "your_api_version", http=http, 
  discoveryServiceUrl=("https://yourapp.appspot.com/_ah/api/discovery/v1/"
                       "apis/{api}/{apiVersion}/rest"))
</snippet></ROW><ROW><id>16319590</id><snippet>result = service.resource().method([parameters]).execute()
</snippet></ROW><ROW><id>16319664</id><snippet>def get_pretty_print(json_object):
    return json.dumps(json_object, sort_keys=True, indent=4, separators=(',', ': '))

print get_pretty_print(my_json_obj)
</snippet></ROW><ROW><id>16319664</id><snippet>json.dumps()</snippet></ROW><ROW><id>16319849</id><snippet>itertools.groupby</snippet></ROW><ROW><id>16319849</id><snippet>In [98]: from itertools import groupby

In [99]: lis=[['John', 17, 1.79],
['John', 19, 1.83],
['John', 21, 1.85],
['Tom', 16, 1.77],
['Tom', 20, 1.79],
['Tom', 21, 1.79]]


&gt;&gt;&gt; for k,v in groupby(lis,key=lambda x:x[0]):
       strs=", ".join(", ".join(map(str,x[1:] ) )  for x in v)
       print "{0}, {1}".format(k,strs)
...     
John, 17, 1.79, 19, 1.83, 21, 1.85
Tom, 16, 1.77, 20, 1.79, 21, 1.79
</snippet></ROW><ROW><id>16319852</id><snippet>json.tool</snippet></ROW><ROW><id>16319852</id><snippet>with infile:
    obj = json.load(infile)
with outfile:
    json.dump(obj, outfile, sort_keys=True,
              indent=4, separators=(',', ': '))
</snippet></ROW><ROW><id>16319852</id><snippet>infile</snippet></ROW><ROW><id>16319852</id><snippet>outfile</snippet></ROW><ROW><id>16319852</id><snippet>stdin</snippet></ROW><ROW><id>16319852</id><snippet>stdout</snippet></ROW><ROW><id>16319852</id><snippet>import json, sys

json.dump(obj, sys.stdout, sort_keys=True,
          indent=4, separators=(',', ': '))
</snippet></ROW><ROW><id>16319852</id><snippet>print json.dumps(obj, sort_keys=True,
                 indent=4, separators=(',', ': '))
</snippet></ROW><ROW><id>16320258</id><snippet>[(t[0], '') + t[1:] for t in a] + [('',) + t for t in b]
</snippet></ROW><ROW><id>16320258</id><snippet>&gt;&gt;&gt; a=[('id',     'name', 'value_1', 'value_2'),('id',    'name', 'value_3', 'value_4')]
&gt;&gt;&gt; b=[('id_key', 'name', 'value_5', 'value_6'),('id_key','name', 'value_7', 'value_8')]
&gt;&gt;&gt; [(t[0], '') + t[1:] for t in a] + [('',) + t for t in b]
[('id', '', 'name', 'value_1', 'value_2'), ('id', '', 'name', 'value_3', 'value_4'), ('', 'id_key', 'name', 'value_5', 'value_6'), ('', 'id_key', 'name', 'value_7', 'value_8')]
</snippet></ROW><ROW><id>16320388</id><snippet>import pandas as pd
import numpy as np
mySeries = pd.Series(np.arange(start=1, stop=5, step=1))


def myFun(val):
    return pd.Series([val ** 2, val ** 3], index=['square', 'cube'])

myResult = mySeries.apply(myFun)
print(myResult)
</snippet></ROW><ROW><id>16320388</id><snippet>   square  cube
0       1     1
1       4     8
2       9    27
3      16    64
</snippet></ROW><ROW><id>16320474</id><snippet>print</snippet></ROW><ROW><id>16320474</id><snippet>print()</snippet></ROW><ROW><id>16320474</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>16320474</id><snippet>print()</snippet></ROW><ROW><id>16320474</id><snippet>True or something</snippet></ROW><ROW><id>16320474</id><snippet>if print(something) or True
</snippet></ROW><ROW><id>16320474</id><snippet>or</snippet></ROW><ROW><id>16320474</id><snippet>True</snippet></ROW><ROW><id>16320474</id><snippet>False</snippet></ROW><ROW><id>16320474</id><snippet>if something or True</snippet></ROW><ROW><id>16320713</id><snippet>&gt;&gt;&gt; import textwrap
&gt;&gt;&gt; splitme = "Hello this is a long string and it may contain an extremelylongwordlikethis bye!"
&gt;&gt;&gt; textwrap.wrap(splitme, width=10)
['Hello this', 'is a long', 'string and', 'it may', 'contain an', 'extremelyl', 'ongwordlik', 'ethis bye!']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16320713</id><snippet>wrap</snippet></ROW><ROW><id>16320713</id><snippet>wrap</snippet></ROW><ROW><id>16320713</id><snippet>&gt;&gt;&gt; print textwrap.fill(splitme, width=10)
Hello this
is a long
string and
it may
contain an
extremelyl
ongwordlik
ethis bye!
</snippet></ROW><ROW><id>16320713</id><snippet>initial_indent</snippet></ROW><ROW><id>16320713</id><snippet>subsequent_indent</snippet></ROW><ROW><id>16320713</id><snippet>&gt;&gt;&gt; print textwrap.fill(splitme, width=10, subsequent_indent=' ' * 4)
Hello this
    is a
    long
    string
    and it
    may co
    ntain
    an ext
    remely
    longwo
    rdlike
    this
    bye!
&gt;&gt;&gt;
</snippet></ROW><ROW><id>16320777</id><snippet>date</snippet></ROW><ROW><id>16320777</id><snippet>time</snippet></ROW><ROW><id>16320777</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>16320777</id><snippet>datetime_column = [datetime.datetime.strptime('{} {}'.format(d, t),
                                              '%Y-%m-%d %H:%M:%S')
                   for d, t in zip(date, time)]
</snippet></ROW><ROW><id>16320777</id><snippet>zip()</snippet></ROW><ROW><id>16320777</id><snippet>date</snippet></ROW><ROW><id>16320777</id><snippet>time</snippet></ROW><ROW><id>16320777</id><snippet>strptime()</snippet></ROW><ROW><id>16320837</id><snippet>ssh_cmd</snippet></ROW><ROW><id>16320837</id><snippet>ssh -t kitty@133.33.22.1 "sudo nohup bash -c \"kill -9 \\\`ps -ef | grep 'udp_receiver' | grep -v 'grep' | awk '{print \\\$2}'\\\` &gt; /nohup.out 2&gt;&amp;1 &amp;\""</snippet></ROW><ROW><id>16320837</id><snippet>$</snippet></ROW><ROW><id>16320925</id><snippet>readlines()</snippet></ROW><ROW><id>16320925</id><snippet>write()</snippet></ROW><ROW><id>16320925</id><snippet>Queue</snippet></ROW><ROW><id>16320925</id><snippet>class QueueStream(object):
    def __init__(self):
        self._queue = Queue()

    def write(self, line):
        self._queue.put(line)

    def readlines(self):
        while True:
            item = self._queue.get()
            yield item
            self._queue.task_done()
</snippet></ROW><ROW><id>16321013</id><snippet>for row in r:
    w.writerow(('US', row[0], row[3]))
</snippet></ROW><ROW><id>16321133</id><snippet>import itertools as it, operator as op

# some dummy data so the example runs
observednumber_1 = 1
observednumber_2 = 2
observednumber_3 = 3
calculatedvalue = None

trees=[
  ['species_1', observednumber_1, calculatedvalue, calculatedvalue],
  ['species_2', observednumber_2, calculatedvalue, calculatedvalue],
  ['species_1', observednumber_3, calculatedvalue, calculatedvalue], ]

for k,g in it.groupby(sorted(trees,key=op.itemgetter(0)),key=op.itemgetter(0)):
  print k,sum(i[1] for i in g)
</snippet></ROW><ROW><id>16321133</id><snippet>itertools.groupby</snippet></ROW><ROW><id>16321133</id><snippet>k</snippet></ROW><ROW><id>16321133</id><snippet>g</snippet></ROW><ROW><id>16321133</id><snippet>g</snippet></ROW><ROW><id>16321133</id><snippet>for k,g in it.groupby(sorted(trees,key=op.itemgetter(0)),key=op.itemgetter(0)):
  tempg = list(g)
  print k, sum(i[1] for i in tempg), sum(i[2] for i in tempg)
</snippet></ROW><ROW><id>16321267</id><snippet>findall</snippet></ROW><ROW><id>16321267</id><snippet>()</snippet></ROW><ROW><id>16321267</id><snippet>18</snippet></ROW><ROW><id>16321267</id><snippet>04</snippet></ROW><ROW><id>16321267</id><snippet>2013</snippet></ROW><ROW><id>16321267</id><snippet>r'\d+(?:,\d+)?'
</snippet></ROW><ROW><id>16321267</id><snippet>+,1</snippet></ROW><ROW><id>16321556</id><snippet>fileinput</snippet></ROW><ROW><id>16321556</id><snippet>import sys
try:
    fileobj = open(sys.argv[1], 'r')
except IndexError:
    fileobj = sys.stdin

with fileobj:
    data = fileobj.read()
</snippet></ROW><ROW><id>16321578</id><snippet>from PyQt4 import QtCore, QtGui

import sys

app = QtGui.QApplication(sys.argv)

def filterUpdate():
    print('!')

filter = QtGui.QInputDialog()
filter.setInputMode (filter.TextInput)
filter.setOption(filter.NoButtons, True)
filter.setLabelText("Filter")
filter.textValueChanged.connect(filterUpdate)

filter.show()

sys.exit(app.exec_())
</snippet></ROW><ROW><id>16321891</id><snippet>def deriv(func, order, x, e):
    if order &lt; 0: raise ValueError
    if order == 0: return func(x)
    y = deriv(func, order-1, x, e)
    x1 = x + e
    y1 = deriv(func, order-1, x1, e)
    return float(y - y1)/(x - x1)
</snippet></ROW><ROW><id>16322077</id><snippet>numpy.array(sig, dtype=numpy.dtype('int16'))
</snippet></ROW><ROW><id>16322135</id><snippet>UPDATE</snippet></ROW><ROW><id>16322135</id><snippet>INSERT</snippet></ROW><ROW><id>16322135</id><snippet>cursor.execute('UPDATE Words SET f1=?, f2=? WHERE rowid=?', [2, 3, rowid])
</snippet></ROW><ROW><id>16322135</id><snippet>f1</snippet></ROW><ROW><id>16322135</id><snippet>f2</snippet></ROW><ROW><id>16322135</id><snippet>rowid</snippet></ROW><ROW><id>16322135</id><snippet>INSERT OR REPLACE</snippet></ROW><ROW><id>16322135</id><snippet>UPDATE</snippet></ROW><ROW><id>16322135</id><snippet>rowid</snippet></ROW><ROW><id>16322135</id><snippet>cursor.execute('INSERT OR REPLACE INTO Words(rowid,f1,f2) VALUES(?,?,?)', [rowid,2,3])
</snippet></ROW><ROW><id>16322366</id><snippet>def change_block_names(template, change_dict):
    """
    This function will rename the blocks in the template from the
    dictionary. The keys in th change dict will be replaced with
    the corresponding values. This will rename the blocks in the 
    extended templates only.
    """

    extend_nodes = template.nodelist.get_nodes_by_type(ExtendsNode)
    if len(extend_nodes) == 0:
        return

    extend_node = extend_nodes[0]
    blocks = extend_node.blocks
    for name, new_name in change_dict.items():
        if blocks.has_key(name):
            block_node = blocks[name]
            block_node.name = new_name
            blocks[new_name] = block_node
            del blocks[name]


tmpl_name = 'django-helpers/twitter-bootstrap/message.html'
tmpl1 = loader.get_template(tmpl_name)
change_block_names(tmpl1, {'main-contents': 'new-main-contents})
</snippet></ROW><ROW><id>16322398</id><snippet>&lt;html&gt;
&lt;iframe id=frame1&gt;&lt;/iframe&gt;
&lt;script&gt;
var base="http://www.yelp.ca/search?cflt=coffee&amp;find_loc=Toronto,%20ON&amp;start="; //the part of the url that stays the same
var pages=[20, 40, 60, 80];  //all the differing url parts to be concat'd at the end
var delay= 1000 * 30; //30 sec delay, adjust if needed
var slot=0; //current shown page's index in pages

function doNext(){
  var page=pages[slot++];
  if(!page){ page=pages[slot=0]; }
  frame1.src=base+page;
}

setInterval(doNext, delay);
&lt;/script&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>16322398</id><snippet>// ==UserScript==
// @name       yelp scraper
// @namespace  http://anon.org
// @version    0.1
// @description  grab listing from yelp
// @match     http://www.yelp.ca/search?cflt=coffee&amp;find_loc=Toronto,%20ON&amp;start=*
// @copyright  2013, dandavis
// ==/UserScript==


function Q(a,b){var t="querySelectorAll";b=b||document.documentElement;if(!b[t]){return}if(b.split){b=Q(b)[0]}return [].slice.call(b[t](a))||[]}

function download(strData,strFileName,strMimeType){var D=document,A=arguments,a=D.createElement("a"),d=A[0],n=A[1],t=A[2]||"text/plain";a.href="data:"+strMimeType+","+escape(strData);if('download'in a){a.setAttribute("download",n);a.innerHTML="downloading...";D.body.appendChild(a);setTimeout(function(){var e=D.createEvent("MouseEvents");e.initMouseEvent("click",true,false,window,0,0,0,0,0,false,false,false,false,0,null);a.dispatchEvent(e);D.body.removeChild(a);},66);return true;};var f=D.createElement("iframe");D.body.appendChild(f);f.src="data:"+(A[2]?A[2]:"application/octet-stream")+(window.btoa?";base64":"")+","+(window.btoa?window.btoa:escape)(strData);setTimeout(function(){D.body.removeChild(f);},333);return true;}

window.addEventListener("load", function(){
  var code=Q("#businessresults")[0].outerHTML;
  download(code, "yelp_page_"+location.href.split("start=")[1].split("&amp;")[0]+".txt", "x-application/nothing");
});
</snippet></ROW><ROW><id>16322453</id><snippet>name</snippet></ROW><ROW><id>16322453</id><snippet>urlpatterns = patterns('',
                       url(r'^$', TemplateView.as_view(template_name="index.html"), 
                           name='index'),
)
</snippet></ROW><ROW><id>16322453</id><snippet>urlpatterns = patterns('',
                       url(r'', include('main.urls')),
)
</snippet></ROW><ROW><id>16322487</id><snippet>  # This is a throwaway variable to deal with a python bug
  throwaway = datetime.datetime.strptime('20110101','%Y%m%d')
</snippet></ROW><ROW><id>16322520</id><snippet>csrfmiddlewaretoken</snippet></ROW><ROW><id>16322520</id><snippet>result = urllib2.urlopen('http://127.0.0.1:8000/tasks/nlp/process/', 
                         urllib.urlencode(post_data))
</snippet></ROW><ROW><id>16322520</id><snippet>/tasks/nlp/process/</snippet></ROW><ROW><id>16322520</id><snippet>process()</snippet></ROW><ROW><id>16322520</id><snippet>@csrf_exempt
def process(request):
   ...
</snippet></ROW><ROW><id>16322520</id><snippet>handler()</snippet></ROW><ROW><id>16322520</id><snippet>process()</snippet></ROW><ROW><id>16322520</id><snippet>@csrf_exempt
def process(request):
    if request.META['REMOTE_ADDR'] != '127.0.0.1':
        # Return some error response here.
        # 403 is traditional for access denied, but I prefer sending 404
        # so 'hackers' can't infer the existence of any 'hidden' URLs
        # from the response code
        raise Http404
    # Now do the thing
    ....
</snippet></ROW><ROW><id>16322630</id><snippet>SubElement</snippet></ROW><ROW><id>16322630</id><snippet>from xml.etree import ElementTree as ET

# drugs is a reference to your &lt;Drugs&gt; element

for row in csvreader:
    drug = ET.SubElement(drugs, 'Drug')
    ET.SubElement(drug, 'DrugID').text = row[0]
    ET.SubElement(drug, 'Dose').text = row[1]
    ET.SubElement(drug, 'Unit').text = row[2]
</snippet></ROW><ROW><id>16322630</id><snippet>SubElement()</snippet></ROW><ROW><id>16322815</id><snippet>class Curried(object):
    def __init__(self, func, args=None, kwargs=None):
        self._func = func
        self._args = () if args is None else args[:]
        self._kwargs = {} if kwargs is None else dict(kwargs)
        self._name = None

    def __call__(self, *args, **kwargs):
        if args or kwargs:
            return Curried(self._func,
                           self._args + args,
                           dict(self._kwargs.items() + kwargs.items()))
        else:
            return self._func(*self._args, **self._kwargs)

    def __str__(self):
        if self._name is None:
            self._name = self._get_curried_name()
        return self._name

    def _get_curried_name(self):
        _args = ([str(a) for a in self._args] +
                 ['{}={}'.format(k, v) for k, v in self._kwargs.iteritems()])
        all_args = ", ".join(_args)
        return '&lt;curried {}({}) at 0x{:x}&gt;'.format(
            self._func.func_name, all_args, id(self))

    def curry(func):
        _curried = Curried(func)
        return _curried
</snippet></ROW><ROW><id>16322815</id><snippet>@curry
def f(a, b, c, flag_foo=True, flag_bar=False):
    return 'horray!'

print f
print f(1, 2, flag_bar=True)
print f(1, 2, flag_bar=True)(3, flag_foo=False)
print f(1, 2, flag_bar=True)(3, flag_foo=False)()
</snippet></ROW><ROW><id>16322815</id><snippet>&lt;curried f() at 0x100484210&gt;
&lt;curried f(1, 2, flag_bar=True) at 0x100484250&gt;
&lt;curried f(1, 2, 3, flag_bar=True, flag_foo=False) at 0x100484310&gt;
horray!
</snippet></ROW><ROW><id>16322815</id><snippet>func_name</snippet></ROW><ROW><id>16322815</id><snippet>property</snippet></ROW><ROW><id>16322815</id><snippet>str(self)</snippet></ROW><ROW><id>16323232</id><snippet>import numpy as np
path = 'C:/path/to/file'
mydata = np.array([np.loadtxt(f) for f in glob.glob(os.path.join(path, '*.*'))])
</snippet></ROW><ROW><id>16323232</id><snippet>mydata.ndim
#3
</snippet></ROW><ROW><id>16323232</id><snippet>mydata.shape
#(number of files, number of rows in each file, number of columns in each file)
</snippet></ROW><ROW><id>16323232</id><snippet>mydata[0,...]   # equivalent to: mydata[0,:,:]
</snippet></ROW><ROW><id>16323232</id><snippet>mydata[0,34,:]    #the 35th row of the first file by
mydata[:,34,:]    #the 35th row in all files
mydata[:,34,1]    #the second value in the 34th row in all files
</snippet></ROW><ROW><id>16323232</id><snippet>np.savetxt(os.join(path,'outfile.txt'), mydata[:,34,:])
</snippet></ROW><ROW><id>16323243</id><snippet>__getattr__()</snippet></ROW><ROW><id>16323243</id><snippet>def __getattr__(self, name):
    if name in self.items:
         return self.items[name]
    else:
         raise AttributeError()
</snippet></ROW><ROW><id>16323243</id><snippet>__getattr__()</snippet></ROW><ROW><id>16323373</id><snippet>[2, 3]</snippet></ROW><ROW><id>16323373</id><snippet>result = a[result]
</snippet></ROW><ROW><id>16323373</id><snippet>True</snippet></ROW><ROW><id>16323373</id><snippet>False</snippet></ROW><ROW><id>16323373</id><snippet>1</snippet></ROW><ROW><id>16323373</id><snippet>0</snippet></ROW><ROW><id>16323373</id><snippet>logical_or</snippet></ROW><ROW><id>16323373</id><snippet>result = a[(a==2) | (a==3)]
</snippet></ROW><ROW><id>16323373</id><snippet>|</snippet></ROW><ROW><id>16323373</id><snippet>==</snippet></ROW><ROW><id>16323628</id><snippet>c</snippet></ROW><ROW><id>16323628</id><snippet>a</snippet></ROW><ROW><id>16323628</id><snippet>&gt;&gt;&gt; a = { 'a': 1, 'b':2, 'c': [[1],2,3,4,5,6] }
&gt;&gt;&gt; c = copy.copy(a['c'])
&gt;&gt;&gt; c[0].append(0)
&gt;&gt;&gt; a
{'a': 1, 'b':2, 'c': [[1, 0], 2, 3, 4, 5, 6]}
</snippet></ROW><ROW><id>16323628</id><snippet>[1, 2]</snippet></ROW><ROW><id>16323628</id><snippet>[3, 3]</snippet></ROW><ROW><id>16323628</id><snippet>c</snippet></ROW><ROW><id>16323628</id><snippet>c</snippet></ROW><ROW><id>16323628</id><snippet>a['c']</snippet></ROW><ROW><id>16323628</id><snippet>deepcopy</snippet></ROW><ROW><id>16323628</id><snippet>&gt;&gt;&gt; a = [[[0]]]
&gt;&gt;&gt; b = copy.copy(a[0])
&gt;&gt;&gt; b[0] = copy.copy(b[0])
&gt;&gt;&gt; a[0] is b
False
&gt;&gt;&gt; a[0][0] is b[0]
False
&gt;&gt;&gt; a[0][0][0] is b[0][0]
True
</snippet></ROW><ROW><id>16323684</id><snippet>psutil_get_ppid</snippet></ROW><ROW><id>16323809</id><snippet>lxml</snippet></ROW><ROW><id>16323809</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; r = requests.get('http://mangafox.me/directory/')
&gt;&gt;&gt; soup = BeautifulSoup(r.text, 'lxml')
&gt;&gt;&gt; len(soup.findAll('a', {'class' : 'manga_img'}))
18
</snippet></ROW><ROW><id>16323809</id><snippet>html.parser</snippet></ROW><ROW><id>16323809</id><snippet>&gt;&gt;&gt; soup = BeautifulSoup(r.text, 'html.parser')
&gt;&gt;&gt; len(soup.findAll('a', {'class' : 'manga_img'}))
44
</snippet></ROW><ROW><id>16323809</id><snippet>urllib</snippet></ROW><ROW><id>16323809</id><snippet>soup = BeautifulSoup(page.read(), 'html.parser')
</snippet></ROW><ROW><id>16324572</id><snippet>self.l = Label(text="Lowered Label :(")
print(self.l.winfo_parent() == str(self))
&gt;&gt;&gt; False
</snippet></ROW><ROW><id>16324572</id><snippet>self.b = Button(self)
print(self.b.winfo_parent() == str(self))
&gt;&gt;&gt; True
</snippet></ROW><ROW><id>16324841</id><snippet>rrule</snippet></ROW><ROW><id>16324841</id><snippet>byweekday</snippet></ROW><ROW><id>16324841</id><snippet>byhour</snippet></ROW><ROW><id>16324841</id><snippet>byminute</snippet></ROW><ROW><id>16324841</id><snippet>bysecond</snippet></ROW><ROW><id>16324841</id><snippet>byminute=0</snippet></ROW><ROW><id>16324841</id><snippet>bysecond=0</snippet></ROW><ROW><id>16324841</id><snippet>bysetpos=1</snippet></ROW><ROW><id>16324841</id><snippet>rrule</snippet></ROW><ROW><id>16324841</id><snippet>import dateutil.rrule as DateRule
import datetime as DT

def NextRunTime(After):
    Sched = {'Hours': [12,18], 'Days': [0,1,2,3,4]}
    rule = DateRule.rrule(DateRule.HOURLY,
                          byweekday=Sched['Days'],
                          byhour=Sched['Hours'],
                          byminute=0,
                          bysecond=0,
                          bysetpos=1,
                          # dtstart=After means rule might return After
                          dtstart=After,
                          # To ensure NextRunTime returns something after After, use
                          # dtstart=After+DT.timedelta(seconds=1), 
                          count=1)
    return rule[0]

tests = [
    (DT.datetime(2013,4,29,10,11,12),
     DT.datetime(2013,4,29,12,0,0)),
    (DT.datetime(2013,4,29,11,22,33),
     DT.datetime(2013,4,29,12,0,0)),
    (DT.datetime(2013,4,29,12,0,1),
     DT.datetime(2013,4,29,18,0,0)),
    (DT.datetime(2013,5,3,12,0,1),
     DT.datetime(2013,5,3,18,0,0)),
    (DT.datetime(2013,5,3,18,0,1),
     DT.datetime(2013,5,6,12,0,0)),
    (DT.datetime(2013,4,29,12,0,0),  # Note that NextRunTime(After) returns After
     DT.datetime(2013,4,29,12,0,0)),
    ]

for After, answer in tests:
    result = NextRunTime(After)
    try:
        assert result == answer
    except AssertionError:
        print('''\
result:
{result}
answer:
{answer}
'''.format(**locals()))
        raise
</snippet></ROW><ROW><id>16325322</id><snippet>idx = np.where(np.abs(a-b) &gt; 1e-6)[0]
firstidx = idx[0]
</snippet></ROW><ROW><id>16325322</id><snippet>a</snippet></ROW><ROW><id>16325322</id><snippet>b</snippet></ROW><ROW><id>16325322</id><snippet>1e-6</snippet></ROW><ROW><id>16325322</id><snippet>import numpy as np

a = np.loadtxt("path/to/file", float)
b = np.loadtxt("path/to/file2", float)

idx = np.where(np.abs(a-b) &gt; 1e-6)[0]
firstidx = idx[0]
print(firstidx, a[firstidx], b[firstidx])
</snippet></ROW><ROW><id>16325322</id><snippet>np.abs(a-b) == 0
</snippet></ROW><ROW><id>16325322</id><snippet>np.abs(a-b) != 0
</snippet></ROW><ROW><id>16325322</id><snippet>a</snippet></ROW><ROW><id>16325322</id><snippet>b</snippet></ROW><ROW><id>16325322</id><snippet>np.abs(a-b) &gt; 1e-6
</snippet></ROW><ROW><id>16325322</id><snippet>In [10]: 1.2-1.0 == 0.2
Out[10]: False
</snippet></ROW><ROW><id>16325336</id><snippet>[0-9:]</snippet></ROW><ROW><id>16325336</id><snippet>findusername = re.compile("^[a-zA-Z]+\s[0-9]+\s[0-9:]{8}\s&lt;([A-Za-z]+)&gt;")
finduseraction = re.compile("^[a-zA-Z]+\s[0-9]+\s[0-9:]{8}\s\*\s+([A-Za-z]+)\s")
</snippet></ROW><ROW><id>16325336</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>16325336</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>16325336</id><snippet>.findall()</snippet></ROW><ROW><id>16325336</id><snippet>&gt;&gt;&gt; findusername = re.compile("^[a-zA-Z]+\s[0-9]+\s[0-9:]{8}\s&lt;([A-Za-z]+)&gt;", re.MULTILINE)
&gt;&gt;&gt; finduseraction = re.compile("^[a-zA-Z]+\s[0-9]+\s[0-9:]{8}\s\*\s+([A-Za-z]+)\s", re.MULTILINE)
&gt;&gt;&gt; findusername.findall(logs)
['FishCream', 'LpSamuelm', 'Username']
&gt;&gt;&gt; finduseraction.findall(logs)
['Username']
</snippet></ROW><ROW><id>16325640</id><snippet>from datetime import datetime, date, timedelta

dt_update = datetime.combine(date.today(), datetime.strptime(last_update, '%H:%M:%S').time())
</snippet></ROW><ROW><id>16325640</id><snippet>1900-01-01</snippet></ROW><ROW><id>16325640</id><snippet>datetime.now()</snippet></ROW><ROW><id>16325640</id><snippet>tdiff = datetime.now() - dt_update
</snippet></ROW><ROW><id>16325640</id><snippet>timedelta()</snippet></ROW><ROW><id>16325640</id><snippet>timedelta</snippet></ROW><ROW><id>16325640</id><snippet>if tdiff &gt; timedelta(hours=1):
</snippet></ROW><ROW><id>16325688</id><snippet>cursor.execute()</snippet></ROW><ROW><id>16325688</id><snippet>.fetchone()</snippet></ROW><ROW><id>16325688</id><snippet>.execute()</snippet></ROW><ROW><id>16325688</id><snippet>c = conn.cursor()
c.execute("SELECT image_data FROM favicon_bitmaps WHERE index='26'")
data = c.fetchone()
with open('C:\file.png', 'wb') as x:
    x.write(data[0])
</snippet></ROW><ROW><id>16325691</id><snippet>convert</snippet></ROW><ROW><id>16325691</id><snippet>mode</snippet></ROW><ROW><id>16325691</id><snippet>grey = im.convert("L")
</snippet></ROW><ROW><id>16325691</id><snippet>bw = im.convert("1")
</snippet></ROW><ROW><id>16325691</id><snippet>convert</snippet></ROW><ROW><id>16325691</id><snippet>grey = im.convert("L")
table = [int(i&gt;200) for i in range(256)]
bw = grey.point(table, '1')
</snippet></ROW><ROW><id>16325691</id><snippet>point</snippet></ROW><ROW><id>16325691</id><snippet>convert</snippet></ROW><ROW><id>16325691</id><snippet>L16</snippet></ROW><ROW><id>16325691</id><snippet>point</snippet></ROW><ROW><id>16325691</id><snippet>load</snippet></ROW><ROW><id>16325691</id><snippet>&lt;red, green, blue, alpha&gt;</snippet></ROW><ROW><id>16325691</id><snippet>L = R * 299/1000 + G * 587/1000 + B * 114/1000
</snippet></ROW><ROW><id>16325691</id><snippet>(.299, .587, .114, 0)</snippet></ROW><ROW><id>16325691</id><snippet>(.1495, .8448 , .0057, 0)</snippet></ROW><ROW><id>16325691</id><snippet>bw = grey.point([int(i&gt;200) for i in range(256)], '1')</snippet></ROW><ROW><id>16325691</id><snippet>grey</snippet></ROW><ROW><id>16325691</id><snippet># PIL
table = [int(i&gt;200) for i in range(256)]
bw = grey.point(table, '1')

# Python (run in PyPy) or Cython
bw = [pixel &gt; 200 for pixel in grey]

# numpy
bw = grey &gt; 200
</snippet></ROW><ROW><id>16325880</id><snippet>bug</snippet></ROW><ROW><id>16325880</id><snippet>cursors.py</snippet></ROW><ROW><id>16325880</id><snippet>cursors.py</snippet></ROW><ROW><id>16325880</id><snippet>query = query % conn.escape(args)
</snippet></ROW><ROW><id>16325880</id><snippet>query = query.decode(charset) % conn.escape(args)
</snippet></ROW><ROW><id>16325880</id><snippet>query = query.decode(charset) % escaped_args
</snippet></ROW><ROW><id>16326284</id><snippet>Wait for the worker processes to exit
</snippet></ROW><ROW><id>16326541</id><snippet>stat</snippet></ROW><ROW><id>16326541</id><snippet>stat</snippet></ROW><ROW><id>16326541</id><snippet>_stat</snippet></ROW><ROW><id>16326541</id><snippet>open</snippet></ROW><ROW><id>16326541</id><snippet>stat</snippet></ROW><ROW><id>16326541</id><snippet>CreateFile</snippet></ROW><ROW><id>16326541</id><snippet>GetFileAttributes</snippet></ROW><ROW><id>16326541</id><snippet>win32com</snippet></ROW><ROW><id>16326541</id><snippet>win32api</snippet></ROW><ROW><id>16326541</id><snippet>GetFileAttributesEx</snippet></ROW><ROW><id>16326541</id><snippet>ctypes</snippet></ROW><ROW><id>16326541</id><snippet>subprocess</snippet></ROW><ROW><id>16326541</id><snippet>ATTRIB</snippet></ROW><ROW><id>16326541</id><snippet>DIR /S /A-S</snippet></ROW><ROW><id>16326541</id><snippet>ctypes</snippet></ROW><ROW><id>16326541</id><snippet>GetFileExInfoStandard</snippet></ROW><ROW><id>16326541</id><snippet>struct</snippet></ROW><ROW><id>16326541</id><snippet>from ctypes import *
kernel = windll.kernel32

GetFileExInfoStandard = 0

GetFileAttributesEx = kernel.GetFileAttributesEx
GetFileAttributesEx.restype = c_int
GetFileAttributesEx.argypes = # ...
</snippet></ROW><ROW><id>16326541</id><snippet>win32api</snippet></ROW><ROW><id>16326541</id><snippet>ctypes</snippet></ROW><ROW><id>16326541</id><snippet>win32api</snippet></ROW><ROW><id>16326541</id><snippet>os.walk</snippet></ROW><ROW><id>16326541</id><snippet>FindFirstFileEx</snippet></ROW><ROW><id>16326541</id><snippet>stat</snippet></ROW><ROW><id>16326541</id><snippet>GetFileAttributesEx</snippet></ROW><ROW><id>16326541</id><snippet>os.walk</snippet></ROW><ROW><id>16326541</id><snippet>stat</snippet></ROW><ROW><id>16326541</id><snippet>win32api</snippet></ROW><ROW><id>16326541</id><snippet>ctypes</snippet></ROW><ROW><id>16326541</id><snippet>betterwalk</snippet></ROW><ROW><id>16326541</id><snippet>ctypes</snippet></ROW><ROW><id>16326769</id><snippet>sortings_list = [elem for elem in sortings_list if not elem == '-%s' % field]
</snippet></ROW><ROW><id>16326829</id><snippet>iconbitmap</snippet></ROW><ROW><id>16326829</id><snippet>iconphoto</snippet></ROW><ROW><id>16326829</id><snippet>iconbitmap</snippet></ROW><ROW><id>16326829</id><snippet>iconbitmap</snippet></ROW><ROW><id>16326829</id><snippet>iconphoto</snippet></ROW><ROW><id>16326829</id><snippet>iconbitmap</snippet></ROW><ROW><id>16326829</id><snippet>title</snippet></ROW><ROW><id>16326829</id><snippet>my_frame.title('My new title, with no tk (except that one)')
</snippet></ROW><ROW><id>16326876</id><snippet>zip</snippet></ROW><ROW><id>16326876</id><snippet>for index, (value1,value2) in enumerate(zip(data1,data2)):
    print index, value1 + value2
</snippet></ROW><ROW><id>16326876</id><snippet>zip</snippet></ROW><ROW><id>16326876</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>16326999</id><snippet>def solve(fvals_sqrt, x0, debug_solve=True):
    """
    Solves the sqrt function, using newtons methon.
    """
    f, fp = fvals_sqrt(x0) # Get the return values from fvals_sqrt
    x0 = x0 + (f/fp)
    print x0
</snippet></ROW><ROW><id>16327032</id><snippet>B</snippet></ROW><ROW><id>16327032</id><snippet>C</snippet></ROW><ROW><id>16327032</id><snippet>A</snippet></ROW><ROW><id>16327032</id><snippet>max()</snippet></ROW><ROW><id>16327032</id><snippet>B</snippet></ROW><ROW><id>16327032</id><snippet>C</snippet></ROW><ROW><id>16327032</id><snippet>max()</snippet></ROW><ROW><id>16327032</id><snippet>biggest</snippet></ROW><ROW><id>16327032</id><snippet>max()</snippet></ROW><ROW><id>16327032</id><snippet>key</snippet></ROW><ROW><id>16327032</id><snippet>[(bigger('a'), 'a'), (bigger('b'), 'b')]</snippet></ROW><ROW><id>16327032</id><snippet>max((bigger(letter), letter) for letter in l)[1]</snippet></ROW><ROW><id>16327032</id><snippet>A</snippet></ROW><ROW><id>16327079</id><snippet>mkdir /tmp/pypackages
pip install -r &lt;(pip freeze) -d /tmp/pypackages
</snippet></ROW><ROW><id>16327079</id><snippet>/tmp/pypackages</snippet></ROW><ROW><id>16327079</id><snippet>cd /tmp/pypackages
pip install *
</snippet></ROW><ROW><id>16327079</id><snippet>pip freeze</snippet></ROW><ROW><id>16327079</id><snippet>pip</snippet></ROW><ROW><id>16327079</id><snippet>pip freeze</snippet></ROW><ROW><id>16327079</id><snippet>python</snippet></ROW><ROW><id>16327095</id><snippet>from matplotlib.dates import strpdate2num
...
np.loadtxt(s, delimiter=",", converters={0:strpdate2num('%m/%d/%Y'), 1:...}, dtype= ...
</snippet></ROW><ROW><id>16327095</id><snippet>def _getconv(dtype):
    typ = dtype.type
    if issubclass(typ, np.bool_):
        return lambda x: bool(int(x))
    if issubclass(typ, np.uint64):
        return np.uint64
    if issubclass(typ, np.int64):
        return np.int64
    if issubclass(typ, np.integer):
        return lambda x: int(float(x))

    ...
</snippet></ROW><ROW><id>16327095</id><snippet>items = [conv(val) for (conv, val) in zip(converters, vals)]
</snippet></ROW><ROW><id>16327095</id><snippet>lambda x: int(float(x))</snippet></ROW><ROW><id>16327130</id><snippet>2.7.3</snippet></ROW><ROW><id>16327418</id><snippet>shop == "P"</snippet></ROW><ROW><id>16327418</id><snippet>rest &lt;= 0</snippet></ROW><ROW><id>16327418</id><snippet>choice == "F"</snippet></ROW><ROW><id>16327418</id><snippet>def do_farm():
    entertainment = entertainment - random.randrange(1,7+1)
    # ...
</snippet></ROW><ROW><id>16327418</id><snippet>if choice == "F":
    do_farm()
elif choice == "S":
    do_shop()
# ...
</snippet></ROW><ROW><id>16327418</id><snippet>def shop():
    while True:
        shop()
        shop_choice = raw_input("Shop command: ")
        if shop_choice == "I":
            do_shop_inventory()
        elif shop_choice == "R":
            # ...
        elif shop_choice == "L":
            break
</snippet></ROW><ROW><id>16327418</id><snippet>while True</snippet></ROW><ROW><id>16327418</id><snippet>break</snippet></ROW><ROW><id>16327460</id><snippet>Reindexing only valid with uniquely valued Index</snippet></ROW><ROW><id>16327460</id><snippet>&gt;&gt;&gt; df = pd.DataFrame(range(5), index = [1,2,3,1,2])
&gt;&gt;&gt; df
   0
1  0
2  1
3  2
1  3
2  4
&gt;&gt;&gt; df.reindex(index=range(len(df)))
Traceback (most recent call last):
[...]
  File "/usr/local/lib/python2.7/dist-packages/pandas-0.12.0.dev_0bd5e77-py2.7-linux-i686.egg/pandas/core/index.py", line 849, in get_indexer
    raise Exception('Reindexing only valid with uniquely valued Index '
Exception: Reindexing only valid with uniquely valued Index objects
</snippet></ROW><ROW><id>16327460</id><snippet>&gt;&gt;&gt; df.index = range(len(df))
&gt;&gt;&gt; df
   0
0  0
1  1
2  2
3  3
4  4
</snippet></ROW><ROW><id>16327460</id><snippet>df.reset_index(drop=True)
</snippet></ROW><ROW><id>16327572</id><snippet>python setup.py install
</snippet></ROW><ROW><id>16327605</id><snippet>lis = ['ALRAGUL','AKALH', "AL", 'H','ALH' ,'to7a','ALRAGULH']

def solve(lis):
    for x in lis:
        if x.startswith("AL") and x.endswith("H"):
            yield x[:2]
            if len(x)&gt;4:
                yield x[2:-1]
            yield x[-1]
        elif x.startswith("AL"):
            yield x[:2]
            if len(x)&gt;2:
                yield x[2:]
        elif x.endswith("H"):
            if len(x)&gt;1:
                yield x[:-1]
            yield x[-1]
        else:
            yield x

new_lis = list(solve(lis))
print new_lis
</snippet></ROW><ROW><id>16327605</id><snippet>['AL', 'RAGUL', 'AKAL', 'H', 'AL', 'H', 'AL', 'H', 'to7a', 'AL', 'RAGUL', 'H']
</snippet></ROW><ROW><id>16327647</id><snippet>re.sub(r"(\d{4}-){3}(?=\d{4})", "XXXX-XXXX-XXXX-", text)
</snippet></ROW><ROW><id>16327647</id><snippet>In [1]: import re

In [2]: text = '1234-5678-9101-1213 1415-1617-1819-hello'

In [3]: re.sub(r"(\d{4}-){3}(?=\d{4})", "XXXX-XXXX-XXXX-", text)
Out[3]: 'XXXX-XXXX-XXXX-1213 1415-1617-1819-hello'
</snippet></ROW><ROW><id>16327682</id><snippet>import time
from threading import Thread

def stupid_work():
    time.sleep(4)

if __name__ == '__main__':
    t = Thread(target=stupid_work)
    t.start()
    while 1:
        if not t.is_alive():
            print 'thread is done'
            break # or whatever
        else:
            print 'thread is working'    

        time.sleep(1)
</snippet></ROW><ROW><id>16327682</id><snippet>if not t.is_alive()</snippet></ROW><ROW><id>16327682</id><snippet>if not q.empty()</snippet></ROW><ROW><id>16327682</id><snippet>q.get()</snippet></ROW><ROW><id>16328052</id><snippet>str.strip()</snippet></ROW><ROW><id>16328052</id><snippet>"some\n\n\nstring".replace("\n", "")
</snippet></ROW><ROW><id>16328052</id><snippet>"some\n\n\nstring".translate(None, "\n")
</snippet></ROW><ROW><id>16328129</id><snippet>import subprocess

lst = ['12345','23456']
cmd = ['test.py', 'pick']
cmd.extend(lst)
subprocess.call(cmd)
</snippet></ROW><ROW><id>16328556</id><snippet>or</snippet></ROW><ROW><id>16328556</id><snippet>|</snippet></ROW><ROW><id>16328556</id><snippet>while  f &gt; 10**-14 or -f &lt; 10**-14:
</snippet></ROW><ROW><id>16328556</id><snippet>or</snippet></ROW><ROW><id>16328556</id><snippet>|</snippet></ROW><ROW><id>16328556</id><snippet>while (f &gt; (10**-14 | -f)) &lt; 10**-14):
</snippet></ROW><ROW><id>16328556</id><snippet>TypeError</snippet></ROW><ROW><id>16328556</id><snippet>while abs(f) &gt; 10**-14:
</snippet></ROW><ROW><id>16328683</id><snippet>.gitignore</snippet></ROW><ROW><id>16328683</id><snippet>.py[cod]</snippet></ROW><ROW><id>16328683</id><snippet>.gitignore</snippet></ROW><ROW><id>16328683</id><snippet>-a</snippet></ROW><ROW><id>16328683</id><snippet>PYTHONDONTWRITEBYTECODE</snippet></ROW><ROW><id>16328683</id><snippet>stash</snippet></ROW><ROW><id>16328683</id><snippet>pull</snippet></ROW><ROW><id>16328683</id><snippet>unstash</snippet></ROW><ROW><id>16328763</id><snippet>In [22]: x = [1,2,3,4]

In [23]: y = [1,4,7,8]

In [24]: x += [ item for item in y if item not in x]

In [25]: x
Out[25]: [1, 2, 3, 4, 7, 8]
</snippet></ROW><ROW><id>16328763</id><snippet>+=</snippet></ROW><ROW><id>16328763</id><snippet>list.extend</snippet></ROW><ROW><id>16328763</id><snippet>In [26]: x = [1,2,3,4]

In [27]: lis = [ item for item in y if item not in x]

In [28]: x.extend(lis)

In [29]: x
Out[29]: [1, 2, 3, 4, 7, 8]
</snippet></ROW><ROW><id>16328763</id><snippet>x</snippet></ROW><ROW><id>16328763</id><snippet>sets</snippet></ROW><ROW><id>16328763</id><snippet>O(N)</snippet></ROW><ROW><id>16328767</id><snippet>(?&lt;=\{)</snippet></ROW><ROW><id>16328767</id><snippet>{</snippet></ROW><ROW><id>16328767</id><snippet>((?!{).*?)</snippet></ROW><ROW><id>16328767</id><snippet>{</snippet></ROW><ROW><id>16328767</id><snippet>{{bar}}</snippet></ROW><ROW><id>16328767</id><snippet>bar</snippet></ROW><ROW><id>16328767</id><snippet>b</snippet></ROW><ROW><id>16328767</id><snippet>{</snippet></ROW><ROW><id>16328767</id><snippet>bar</snippet></ROW><ROW><id>16328767</id><snippet>{</snippet></ROW><ROW><id>16328767</id><snippet>{bar}</snippet></ROW><ROW><id>16328767</id><snippet>(?!{)</snippet></ROW><ROW><id>16328767</id><snippet>{bar}</snippet></ROW><ROW><id>16328767</id><snippet>{</snippet></ROW><ROW><id>16328767</id><snippet>{</snippet></ROW><ROW><id>16328767</id><snippet>b</snippet></ROW><ROW><id>16328767</id><snippet>(?!&lt;={){([^{}:]+)[}:](?!=})</snippet></ROW><ROW><id>16328767</id><snippet>(?!&lt;{)</snippet></ROW><ROW><id>16328767</id><snippet>{</snippet></ROW><ROW><id>16328767</id><snippet>{</snippet></ROW><ROW><id>16328767</id><snippet>([^{}:]+)</snippet></ROW><ROW><id>16328767</id><snippet>[}:]</snippet></ROW><ROW><id>16328767</id><snippet>(?!})</snippet></ROW><ROW><id>16328767</id><snippet>}</snippet></ROW><ROW><id>16328884</id><snippet>ftype</snippet></ROW><ROW><id>16328884</id><snippet>regedit</snippet></ROW><ROW><id>16328884</id><snippet>C:\Python27\Python.exe
</snippet></ROW><ROW><id>16328906</id><snippet>basestations = ["", "Karratha Aero", "Dampier Salt", ...]</snippet></ROW><ROW><id>16328906</id><snippet>basestations[1]</snippet></ROW><ROW><id>16328906</id><snippet>basestations[selection]</snippet></ROW><ROW><id>16328906</id><snippet>stringa + stringb</snippet></ROW><ROW><id>16328906</id><snippet>while</snippet></ROW><ROW><id>16328906</id><snippet>if</snippet></ROW><ROW><id>16328906</id><snippet>while</snippet></ROW><ROW><id>16328961</id><snippet>gcc</snippet></ROW><ROW><id>16328961</id><snippet>make</snippet></ROW><ROW><id>16328961</id><snippet>make</snippet></ROW><ROW><id>16329050</id><snippet>&amp; 255</snippet></ROW><ROW><id>16329050</id><snippet>verify_arr = [193, 35, 9, 33, 1, 9, 3, 33, 9, 225]
all_chars = range(0, 255)

for hash in verify_arr:
    for char in all_chars:
        charHash = ((char &lt;&lt; 5 | char &gt;&gt; 3) ^111) &amp; 255
        if charHash == hash:
            print str(unichr(char))
    print "_"
</snippet></ROW><ROW><id>16329073</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>16329073</id><snippet>In [38]: a = {"this" : 2 , "is" : 3}

In [39]: b = {"what" : 3 , "is" : 2}

In [40]: from collections import defaultdict

In [41]: collected_counter=defaultdict(list)

In [42]: for key,val in a.items():
    collected_counter[key].append(val)
   ....:     

In [43]: for key,val in b.items():
    collected_counter[key].append(val)
   ....:     

In [44]: collected_counter
Out[44]: defaultdict(&lt;type 'list'&gt;, {'this': [2], 'is': [3, 2], 'what': [3]})
</snippet></ROW><ROW><id>16329073</id><snippet>&gt;&gt;&gt; keys=a.viewkeys() | b.viewkeys()
&gt;&gt;&gt; collected_counter=defaultdict(list)
&gt;&gt;&gt; for key in keys:
    collected_counter[key].append( a.get(key,0) )
...     
&gt;&gt;&gt; for key in keys:
    collected_counter[key].append( b.get(key,0) )
...     
&gt;&gt;&gt; collected_counter
defaultdict(&lt;type 'list'&gt;, {'this': [2, 0], 'is': [3, 2], 'what': [0, 3]})
</snippet></ROW><ROW><id>16329190</id><snippet>WAV</snippet></ROW><ROW><id>16329190</id><snippet>MP3</snippet></ROW><ROW><id>16329190</id><snippet>MP3</snippet></ROW><ROW><id>16329252</id><snippet>dst.argmin()</snippet></ROW><ROW><id>16329252</id><snippet>dst</snippet></ROW><ROW><id>16329252</id><snippet>idx = dst.argmin()
closest = a[idx]
</snippet></ROW><ROW><id>16329252</id><snippet>a</snippet></ROW><ROW><id>16329252</id><snippet>img = Image.fromarray(closest, 'L')
img.show()
</snippet></ROW><ROW><id>16329252</id><snippet>read_images</snippet></ROW><ROW><id>16329252</id><snippet>def read_images(path, sz=None):
    X, y = [], []
    for dirname, dirnames, filenames in os.walk(path):
        for filename in filenames:
            subject_path = os.path.join(dirname, filename)
            try:
                im = Image.open(subject_path)
            except IOError as err:
                print "I/O error: {e}: {f}".format(e=err, f=subject_path)
            except:
                print "Unexpected error:", sys.exc_info()[0]
                raise
            else:
                im = im.convert("L")
                # resize to given size (if given)
                if (sz is not None):
                    im = im.resize(sz, Image.ANTIALIAS)
                X.append(np.asarray(im, dtype=np.uint8))
                y.append(subject_path)
    return [X, y]
</snippet></ROW><ROW><id>16329252</id><snippet>images, paths = read_images(TRAINING_DIR, (90, 90))
</snippet></ROW><ROW><id>16329252</id><snippet>idx = dst.argmin()
filename = paths[idx]
</snippet></ROW><ROW><id>16329252</id><snippet>os.path.dirname(filename)
</snippet></ROW><ROW><id>16329252</id><snippet>os.path.basename(os.path.dirname(filename))
</snippet></ROW><ROW><id>16329361</id><snippet>self.matrix</snippet></ROW><ROW><id>16329361</id><snippet>dict</snippet></ROW><ROW><id>16329361</id><snippet>std::map</snippet></ROW><ROW><id>16329361</id><snippet>std::map&lt;std::pair&lt;srcType, dstType&gt;, valueType&gt;</snippet></ROW><ROW><id>16329361</id><snippet>dict</snippet></ROW><ROW><id>16329361</id><snippet>tuple</snippet></ROW><ROW><id>16329361</id><snippet>self.matrix</snippet></ROW><ROW><id>16329361</id><snippet>None</snippet></ROW><ROW><id>16329361</id><snippet>dict.get()</snippet></ROW><ROW><id>16329361</id><snippet>None</snippet></ROW><ROW><id>16329361</id><snippet>[]</snippet></ROW><ROW><id>16329361</id><snippet>KeyError</snippet></ROW><ROW><id>16329621</id><snippet>foo_list = [(get_foo(bar1), bar2, bar3/2) 
            for bar1, bar2, bar3, bar4 in bar_list]
</snippet></ROW><ROW><id>16329621</id><snippet>foo1</snippet></ROW><ROW><id>16329621</id><snippet>get_foo(bar1)</snippet></ROW><ROW><id>16329621</id><snippet>NameError</snippet></ROW><ROW><id>16329621</id><snippet>foo1 = get_foo(foo1)
</snippet></ROW><ROW><id>16329679</id><snippet>export_graphviz</snippet></ROW><ROW><id>16329679</id><snippet>read_graphviz</snippet></ROW><ROW><id>16329715</id><snippet>max( cur2, key=lambda x:int(x[2]))
</snippet></ROW><ROW><id>16329715</id><snippet>&gt;&gt;&gt; cur2=[range(4),range(4,8),range(2,6)]
&gt;&gt;&gt; cur2
[[0, 1, 2, 3], [4, 5, 6, 7], [2, 3, 4, 5]]
&gt;&gt;&gt; max( cur2, key=lambda x:int(x[2]))
[4, 5, 6, 7]
</snippet></ROW><ROW><id>16330033</id><snippet>S3Static = r'mystaticbucket.s3-us-west-2.amazonaws.com'</snippet></ROW><ROW><id>16330033</id><snippet>&lt;link rel="stylesheet" type="text/css" href = "/static/css/MarmoStyle.css" &gt;</snippet></ROW><ROW><id>16330033</id><snippet>&lt;link rel="stylesheet" type="text/css" href = "{{S3Static}}/static/css/Style.css"&gt;</snippet></ROW><ROW><id>16330033</id><snippet>%include header.tpl S3Static=S3Static</snippet></ROW><ROW><id>16330052</id><snippet>.size()</snippet></ROW><ROW><id>16330052</id><snippet>In [49]: df.groupby([pd.PeriodIndex(df.recd, freq='Q'),
   ....:             pd.PeriodIndex(df.ship, freq='Q'),
   ....:             pd.cut(df['qty'], bins=[0,5,10]),
   ....:             pd.qcut(df['price'],q=2),
   ....:            ]).size()
Out[49]: 
                qty      price 
2012Q2  2013Q1  (0, 5]   [2, 5]    1
2012Q3  2013Q1  (5, 10]  [2, 5]    1
2012Q4  2012Q3  (5, 10]  [2, 5]    1
        2013Q1  (0, 5]   [2, 5]    1
                (5, 10]  [2, 5]    1
2013Q1  2012Q3  (0, 5]   (5, 8]    1
        2013Q1  (5, 10]  (5, 8]    2
2013Q2  2012Q4  (0, 5]   (5, 8]    1
        2013Q2  (0, 5]   [2, 5]    1
</snippet></ROW><ROW><id>16330178</id><snippet>grep</snippet></ROW><ROW><id>16330178</id><snippet>default</snippet></ROW><ROW><id>16330178</id><snippet>Type "Help"</snippet></ROW><ROW><id>16330178</id><snippet>Python $ grep 'Type \\"help\\"' . -Ir
./Modules/main.c:    "Type \"help\", \"copyright\", \"credits\" or \"license\" " \
</snippet></ROW><ROW><id>16330178</id><snippet>Modules/main.c</snippet></ROW><ROW><id>16330178</id><snippet>Py_Main()</snippet></ROW><ROW><id>16330178</id><snippet>fprintf(stderr, "Python %s on %s\n",
    Py_GetVersion(), Py_GetPlatform());
</snippet></ROW><ROW><id>16330178</id><snippet>Py_GetPlatform()</snippet></ROW><ROW><id>16330178</id><snippet>linux</snippet></ROW><ROW><id>16330178</id><snippet>Py_GetVersion()</snippet></ROW><ROW><id>16330178</id><snippet>Python $ grep Py_GetVersion . -Irl
...
./Python/getversion.c
...
</snippet></ROW><ROW><id>16330178</id><snippet>PyOS_snprintf(version, sizeof(version), "%.80s (%.80s) %.80s",
              PY_VERSION, Py_GetBuildInfo(), Py_GetCompiler());
</snippet></ROW><ROW><id>16330178</id><snippet>Py_GetBuildInfo()</snippet></ROW><ROW><id>16330178</id><snippet>Python $ grep Py_GetBuildInfo . -Irl
...
./Modules/getbuildinfo.c
...
</snippet></ROW><ROW><id>16330178</id><snippet>const char *
Py_GetBuildInfo(void)
{
    static char buildinfo[50 + sizeof(HGVERSION) +
                          ((sizeof(HGTAG) &gt; sizeof(HGBRANCH)) ?
                           sizeof(HGTAG) : sizeof(HGBRANCH))];
    const char *revision = _Py_hgversion();
    const char *sep = *revision ? ":" : "";
    const char *hgid = _Py_hgidentifier();
    if (!(*hgid))
        hgid = "default";
    PyOS_snprintf(buildinfo, sizeof(buildinfo),
                  "%s%s%s, %.20s, %.9s", hgid, sep, revision,
                  DATE, TIME);
    return buildinfo;
}
</snippet></ROW><ROW><id>16330178</id><snippet>default</snippet></ROW><ROW><id>16330178</id><snippet>HGTAG</snippet></ROW><ROW><id>16330178</id><snippet>HGTAG</snippet></ROW><ROW><id>16330178</id><snippet>Python $ ./configure
Python $ make HGTAG='echo awesome'
Python $ ./python
Python 3.2.3 (awesome, May  1 2013, 21:33:27) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16330197</id><snippet>%%px
import os
import psutil
from multiprocessing import cpu_count

p = psutil.Process(os.getpid())
p.set_cpu_affinity(range(cpu_count()))
print p.get_cpu_affinity()
</snippet></ROW><ROW><id>16330197</id><snippet>multiprocessing.cpu_count</snippet></ROW><ROW><id>16330270</id><snippet>for index, i in enumerate(S):
    for j in S[index+1:index+16]
        #do some comparisons
</snippet></ROW><ROW><id>16330282</id><snippet>__init__</snippet></ROW><ROW><id>16330282</id><snippet>__new__</snippet></ROW><ROW><id>16330282</id><snippet>__init__</snippet></ROW><ROW><id>16330282</id><snippet>__init__</snippet></ROW><ROW><id>16330519</id><snippet>TypeError</snippet></ROW><ROW><id>16330707</id><snippet>StringIO</snippet></ROW><ROW><id>16330707</id><snippet>def spider_closed(self, spider):
    files = []

    for name, contents in self.files.items():
        contents.seek(0)

        files.append((name, 'text/plain', contents))

    return self.mail.send(
        to=self.recipients,
        subject="Crawler for %s finished" % spider.name,
        body="",
        attachs=files
    )
</snippet></ROW><ROW><id>16330707</id><snippet>import gzip
import datetime

from scrapy import signals
from scrapy.mail import MailSender
from scrapy.exceptions import NotConfigured
from scrapy.utils.serialize import ScrapyJSONEncoder

from collections import defaultdict

try:
    from cStringIO import cStringIO as StringIO
except ImportError:
    from StringIO import StringIO

def format_size(size):
    for x in ['bytes', 'KB', 'MB', 'GB']:
        if size &lt; 1024.0:
            return "%3.1f %s" % (size, x)

        size /= 1024.0

class GzipCompressor(gzip.GzipFile):
    extension = '.gz'
    mimetype = 'application/gzip'

    def __init__(self):
        super(GzipCompressor, self).__init__(fileobj=PlainCompressor(), mode='w')
        self.read = self.fileobj.read

class PlainCompressor(StringIO):
    extension = ''
    mimetype = 'text/plain'

    def read(self, *args, **kwargs):
        self.seek(0)

        return StringIO.read(self, *args, **kwargs)

    @property
    def size(self):
        return len(self.getvalue())

class StatusMailer(object):
    def __init__(self, recipients, mail, compressor, crawler):
        self.recipients = recipients
        self.mail = mail
        self.encoder = ScrapyJSONEncoder(crawler=crawler)
        self.files = defaultdict(compressor)

        self.num_items = 0
        self.num_errors = 0

    @classmethod
    def from_crawler(cls, crawler):
        recipients = crawler.settings.getlist('STATUSMAILER_RECIPIENTS')
        compression = crawler.settings.get('STATUSMAILER_COMPRESSION')

        if not compression:
            compressor = PlainCompressor
        elif compression.lower().startswith('gz'):
            compressor = GzipCompressor
        else:
            raise NotConfigured

        if not recipients:
            raise NotConfigured

        mail = MailSender.from_settings(crawler.settings)
        instance = cls(recipients, mail, compressor, crawler)

        crawler.signals.connect(instance.item_scraped, signal=signals.item_scraped)
        crawler.signals.connect(instance.spider_error, signal=signals.spider_error)
        crawler.signals.connect(instance.spider_closed, signal=signals.spider_closed)
        crawler.signals.connect(instance.request_received, signal=signals.request_received)

        return instance

    def item_scraped(self, item, response, spider):
        self.files[spider.name + '-items.json'].write(self.encoder.encode(item))
        self.num_items += 1

    def spider_error(self, failure, response, spider):
        self.files[spider.name + '.log'].write(failure.getTraceback())
        self.num_errors += 1

    def request_received(self, request, spider):
        self.files[spider.name + '.log'].write(str(request) + '\n')

    def spider_closed(self, spider, reason):
        files = []

        for name, compressed in self.files.items():
            files.append((name + compressed.extension, compressed.mimetype, compressed))

        try:
            size = self.files[spider.name + '-items.json'].size
        except KeyError:
            size = 0

        body='''Crawl statistics:

 - Spider name: {0}
 - Spider finished at: {1}
 - Number of items scraped: {2}
 - Number of errors: {3}
 - Size of scraped items: {4}'''.format(
            spider.name,
            datetime.datetime.now(),
            self.num_items,
            self.num_errors,
            format_size(size)
        )

        return self.mail.send(
            to=self.recipients,
            subject='Crawler for %s: %s' % (spider.name, reason),
            body=body,
            attachs=files
        )
</snippet></ROW><ROW><id>16330707</id><snippet>settings.py</snippet></ROW><ROW><id>16330707</id><snippet>EXTENSIONS = {
    'your_package.extensions.StatusMailer': 80
}
</snippet></ROW><ROW><id>16330707</id><snippet>STATUSMAILER_RECIPIENTS = []
STATUSMAILER_COMPRESSION = 'gzip'
#STATUSMAILER_COMPRESSION = None

MAIL_HOST = 'smtp.gmail.com'
MAIL_PORT = 587
MAIL_USER = ''
MAIL_PASS = ''
</snippet></ROW><ROW><id>16330715</id><snippet>class get_connection(object):
    def __enter__(self):
        self.connect_to_db()
    def __exit__(self, *args, **kwargs):
        self.close()
    def some_db_method(self,...):
        ...
</snippet></ROW><ROW><id>16330715</id><snippet>with get_connection() as db:
    db.some_db_method(...)
</snippet></ROW><ROW><id>16330715</id><snippet> self.connect_to_db()
 db.some_db_method(...)
 self.close()
</snippet></ROW><ROW><id>16330715</id><snippet>__exit__</snippet></ROW><ROW><id>16330715</id><snippet>with</snippet></ROW><ROW><id>16330715</id><snippet>from contextlib import contextmanager

@contextmanager
def db_connection():
    db = connect_to_db()
    yield db
    db.close()
</snippet></ROW><ROW><id>16330715</id><snippet>with db_connection() as db:
    db.some_db_method()
</snippet></ROW><ROW><id>16330733</id><snippet>x * (x - 1) * (x - 2) * (x - 3) * ... (does not terminate)
</snippet></ROW><ROW><id>16330733</id><snippet>return x * aux_xPower(x - 1, n)
</snippet></ROW><ROW><id>16330733</id><snippet>return x * aux_xPower(x, n - 1)
</snippet></ROW><ROW><id>16330733</id><snippet>x^n = x * x^(n - 1)</snippet></ROW><ROW><id>16330733</id><snippet>x^n = x * (x - 1)^n</snippet></ROW><ROW><id>16330866</id><snippet>line1</snippet></ROW><ROW><id>16330866</id><snippet>amountPaid(), nameMonth(), numberDay()</snippet></ROW><ROW><id>16330866</id><snippet>amount =
str(amountPaid(words))</snippet></ROW><ROW><id>16330866</id><snippet>line1 = amount, num, day, '\n'
fout.write(''.join(line1))
</snippet></ROW><ROW><id>16331098</id><snippet>X:101010</snippet></ROW><ROW><id>16331098</id><snippet>&gt;&gt;&gt; re.findall(r'(.+?):(.+?)\b ?',text)
[('s', '11011'), ('i', '11010'), (':', '110011'), (' ', '110010'), ('d', '11000')]
</snippet></ROW><ROW><id>16331098</id><snippet>chain</snippet></ROW><ROW><id>16331098</id><snippet>&gt;&gt;&gt; list(itertools.chain(*_))
['s', '11011', 'i', '11010', ':', '110011', ' ', '110010', 'd', '11000']
</snippet></ROW><ROW><id>16331189</id><snippet>scipy.stats.mode()</snippet></ROW><ROW><id>16331189</id><snippet>import numpy as np
from scipy import stats

a = np.array([[1, 3, 4, 2, 2, 7],
              [5, 2, 2, 1, 4, 1],
              [3, 3, 2, 2, 1, 1]])

stats.mode(a)
</snippet></ROW><ROW><id>16331189</id><snippet>(array([[ 1.,  3.,  2.,  2.,  1.,  1.]]),
 array([[ 1.,  2.,  2.,  2.,  1.,  2.]]))
</snippet></ROW><ROW><id>16331254</id><snippet>psutil</snippet></ROW><ROW><id>16331254</id><snippet>process_names = [proc.name for proc in psutil.process_iter()]
</snippet></ROW><ROW><id>16331254</id><snippet>psutil.cpu_percent</snippet></ROW><ROW><id>16331254</id><snippet>psutil.cpu_times</snippet></ROW><ROW><id>16331254</id><snippet>psutil.virtual_memory</snippet></ROW><ROW><id>16331299</id><snippet>'handlers': {
                'default': {
                           'level':'DEBUG',
                           'class':'logging.FileHandler',
                           'filename': '/path/debug_' + date.today().strftime('%d%m%Y') + '.log',
                           'formatter':'standard',
                           },
}
</snippet></ROW><ROW><id>16331813</id><snippet>indices = np.unique(np.random.randint(2e8,size=(12000,)))
values = np.random.rand(len(indices))
</snippet></ROW><ROW><id>16331813</id><snippet>2*win+1</snippet></ROW><ROW><id>16331813</id><snippet>indices</snippet></ROW><ROW><id>16331813</id><snippet>win = 10

avg_idx = np.arange(-win, win+1) + indices[:, None]
avg_val = np.tile(values[:, None]/(2*win+1), (1, 2*win+1))
</snippet></ROW><ROW><id>16331813</id><snippet>unique_idx, _ = np.unique(avg_idx, return_inverse=True)
mov_avg = np.bincount(_, weights=avg_val.ravel())
</snippet></ROW><ROW><id>16331813</id><snippet>unique_idx[mov_avg &gt; 0.5]
</snippet></ROW><ROW><id>16331813</id><snippet>def sparse_mov_avg(idx, val, win):
    avg_idx = np.arange(-win, win+1) + idx[:, None]
    avg_val = np.tile(val[:, None]/(2*win+1), (1, 2*win+1))
    unique_idx, _ = np.unique(avg_idx, return_inverse=True)
    mov_avg = np.bincount(_, weights=avg_val.ravel())
    return unique_idx, mov_avg
</snippet></ROW><ROW><id>16331813</id><snippet>In [2]: %timeit sparse_mov_avg(indices, values, 10)
10 loops, best of 3: 33.7 ms per loop

In [3]: %timeit sparse_mov_avg(indices, values, 100)
1 loops, best of 3: 378 ms per loop

In [4]: %timeit sparse_mov_avg(indices, values, 1000)
1 loops, best of 3: 4.33 s per loop
</snippet></ROW><ROW><id>16331847</id><snippet>/2*a</snippet></ROW><ROW><id>16331847</id><snippet>/(2*a)</snippet></ROW><ROW><id>16331847</id><snippet>sqrt</snippet></ROW><ROW><id>16331847</id><snippet>math.sqrt</snippet></ROW><ROW><id>16331847</id><snippet>y = ...</snippet></ROW><ROW><id>16331847</id><snippet>print "or"</snippet></ROW><ROW><id>16331847</id><snippet>x = ...</snippet></ROW><ROW><id>16331847</id><snippet>disc = b**2 - 4*a*c
sqrtdisc = math.sqrt(disc) if disc &gt;= 0 else math.sqrt(-disc)*1j
</snippet></ROW><ROW><id>16331847</id><snippet>cmath.sqrt</snippet></ROW><ROW><id>16331847</id><snippet>disc = b**2 - 4*a*c
sqrtdisc = cmath.sqrt(disc)
</snippet></ROW><ROW><id>16331847</id><snippet>cmath</snippet></ROW><ROW><id>16332139</id><snippet>g.py</snippet></ROW><ROW><id>16332139</id><snippet>file = open("g.py", "r")
</snippet></ROW><ROW><id>16332139</id><snippet>array</snippet></ROW><ROW><id>16332139</id><snippet>&gt;&gt;&gt; "1" * 4
"1111"
</snippet></ROW><ROW><id>16332139</id><snippet>array</snippet></ROW><ROW><id>16332139</id><snippet>array = [int(n) for n in line.split()]
</snippet></ROW><ROW><id>16332320</id><snippet>/etc/hosts</snippet></ROW><ROW><id>16332320</id><snippet># IP ADDR      HOSTNAME
192.168.1.1    your_desired_hostname
</snippet></ROW><ROW><id>16332320</id><snippet>192.168.1.1</snippet></ROW><ROW><id>16332331</id><snippet>func_Y()</snippet></ROW><ROW><id>16332331</id><snippet>self</snippet></ROW><ROW><id>16332331</id><snippet>func_Y()</snippet></ROW><ROW><id>16332331</id><snippet>this</snippet></ROW><ROW><id>16332331</id><snippet>A.func_Y()</snippet></ROW><ROW><id>16332331</id><snippet>super</snippet></ROW><ROW><id>16332331</id><snippet>self.func_Y()</snippet></ROW><ROW><id>16332365</id><snippet>global</snippet></ROW><ROW><id>16332365</id><snippet>def fun():
    global a 
    while (c &gt; a/b):
        a = a + 1
        print a/b
</snippet></ROW><ROW><id>16332365</id><snippet>a = a + 1</snippet></ROW><ROW><id>16332365</id><snippet>a</snippet></ROW><ROW><id>16332365</id><snippet>c &gt; a/b</snippet></ROW><ROW><id>16332365</id><snippet>a</snippet></ROW><ROW><id>16332430</id><snippet>sum(f(x) for x in xlist)
</snippet></ROW><ROW><id>16332430</id><snippet>map</snippet></ROW><ROW><id>16332430</id><snippet>itertools.imap</snippet></ROW><ROW><id>16332430</id><snippet>import itertools
sum(itertools.imap(f, xlist))
</snippet></ROW><ROW><id>16332430</id><snippet>sum</snippet></ROW><ROW><id>16332430</id><snippet>.</snippet></ROW><ROW><id>16332430</id><snippet>from itertools import imap
sum(imap(f, xlist))
</snippet></ROW><ROW><id>16332577</id><snippet>values=key, ','.join(union_values)</snippet></ROW><ROW><id>16332577</id><snippet>tuple</snippet></ROW><ROW><id>16332577</id><snippet>string</snippet></ROW><ROW><id>16332577</id><snippet>&gt;&gt;&gt; foo = 1,2 # comma separated values on RHS are converted to tuple
&gt;&gt;&gt; type(foo)
&lt;type 'tuple'&gt;
</snippet></ROW><ROW><id>16332577</id><snippet>values= "{0}, {1}\n".format(key, ','.join(union_values))
</snippet></ROW><ROW><id>16332577</id><snippet>data_changes ={'305403': ['302180'], '312994': ['311957'], '311957': ['312621'] }
modem_changes = {'305403': [], '313113': [], '312994': ['253036', '312591'], '311957': []}

dc_set = set(data_changes)
mc_set = set(modem_changes)

with open('abc', 'w+') as f:
    for key in dc_set.intersection(mc_set):
        union_values = data_changes[key] + modem_changes[key]
        values= "{0}, {1}\n".format(key, ','.join(union_values))
        f.write(values)
</snippet></ROW><ROW><id>16332577</id><snippet>311957, 312621
305403, 302180
312994, 311957,253036,312591
</snippet></ROW><ROW><id>16332697</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>16332697</id><snippet>readlines()</snippet></ROW><ROW><id>16332697</id><snippet>bytes = lines = 0
for line in process.stdout:
    bytes += len(line)
    lines += 1
    if bytes &gt; 200000000 or lines &gt; 10000:
        # handle the described situation
        break
</snippet></ROW><ROW><id>16332697</id><snippet>stderr</snippet></ROW><ROW><id>16332697</id><snippet>process.communicate()</snippet></ROW><ROW><id>16332697</id><snippet>select()</snippet></ROW><ROW><id>16332708</id><snippet>myrule = (myword:word -&gt; word) | -&gt; []
</snippet></ROW><ROW><id>16332708</id><snippet>(myword:word -&gt; word)</snippet></ROW><ROW><id>16332708</id><snippet>myword</snippet></ROW><ROW><id>16332708</id><snippet>-&gt; []</snippet></ROW><ROW><id>16332720</id><snippet>&gt;&gt;&gt; d = \
[('a', {'b': 'c1', 'd': 'f1'}),
 ('a', {'bb': 'c2', 'dd': 'f2'}),
 ('a', {'bbb': 'c3', 'ddd': 'f3'})]
&gt;&gt;&gt; [y for x in d for y in x[1].values()]
['c1', 'f1', 'f2', 'c2', 'c3', 'f3']
</snippet></ROW><ROW><id>16332889</id><snippet>j = nvert - 1
for i in range(0, nvert):
      # do stuff
      j = i
</snippet></ROW><ROW><id>16332889</id><snippet>range(nvert)</snippet></ROW><ROW><id>16332889</id><snippet>range(0, nvert)</snippet></ROW><ROW><id>16332940</id><snippet>raw_input</snippet></ROW><ROW><id>16332940</id><snippet>filename = raw_input("Enter the name of the file of grades: ")
</snippet></ROW><ROW><id>16332940</id><snippet>raw_input</snippet></ROW><ROW><id>16332940</id><snippet>input</snippet></ROW><ROW><id>16332940</id><snippet>eval(raw_input())</snippet></ROW><ROW><id>16332940</id><snippet>eval("openMe.py")</snippet></ROW><ROW><id>16332940</id><snippet>openMe.py</snippet></ROW><ROW><id>16332940</id><snippet>openMe</snippet></ROW><ROW><id>16332940</id><snippet>py</snippet></ROW><ROW><id>16332940</id><snippet>openMe</snippet></ROW><ROW><id>16332940</id><snippet>openMe</snippet></ROW><ROW><id>16332940</id><snippet>py</snippet></ROW><ROW><id>16332940</id><snippet>&gt;&gt;&gt; eval("bar.x")  #stops at bar only
NameError: name 'bar' is not defined

&gt;&gt;&gt; eval("dict.x")  #dict is found but not `x`
AttributeError: type object 'dict' has no attribute 'x'
</snippet></ROW><ROW><id>16333070</id><snippet>telconn.sendline(password + '\n')
</snippet></ROW><ROW><id>16333173</id><snippet>from subprocess import Popen, PIPE
toolLocation = "C:\\Program Files\\Electric Cloud\\ElectricCommander\\bin\\ectool"
parameters = ["--server", "server.domain.com", "login", "username", "password"]
output = Popen([toolLocation] + parameters, stdout=PIPE)
print output.stdout.read()
</snippet></ROW><ROW><id>16333256</id><snippet>input.csv</snippet></ROW><ROW><id>16333256</id><snippet>http://de.wikipedia.org
http://spiegel.de
http://www.vickysmodeblog.com/
</snippet></ROW><ROW><id>16333256</id><snippet>import csv
from lxml import html


with open('input.csv', 'r') as csvfile:
    urls = [row[0] for row in csv.reader(csvfile)]

for url in urls:
    print url

    doc = html.parse(url)
    linkziel = 'http://dandydiary.de/de'
    if doc.xpath('//a[@href=$url]', url=linkziel):
        for anchor_node in doc.xpath('//a[@href=$url]', url=linkziel):
            if anchor_node.xpath('./ancestor::div[contains(@class, "sidebar")]'):
                print 'Sidebar'
            elif anchor_node.xpath('./parent::div[contains(@class, "widget")]'):
                print 'Sidebar'
            elif anchor_node.xpath('./ancestor::div[contains(@class, "comment")]'):
                print 'Kommentar'
            elif anchor_node.xpath('./ancestor::div[contains(@id, "comment")]'):
                print 'Kommentar'
            elif anchor_node.xpath('./ancestor::div[contains(@class, "foot")]'):
                print "Footer"
            elif anchor_node.xpath('./ancestor::div[contains(@id, "foot")]'):
                print "Footer"
            elif anchor_node.xpath('./ancestor::div[contains(@class, "post")]'):
                print "Contextual"
            else:
                print 'Unidentified Link'
    else:
        print 'Link is Dead'
</snippet></ROW><ROW><id>16333256</id><snippet>http://de.wikipedia.org
Link is Dead
http://spiegel.de
Link is Dead
http://www.vickysmodeblog.com/
Contextual
</snippet></ROW><ROW><id>16333321</id><snippet>arr1</snippet></ROW><ROW><id>16333321</id><snippet>arr2</snippet></ROW><ROW><id>16333321</id><snippet>s1</snippet></ROW><ROW><id>16333321</id><snippet>s2</snippet></ROW><ROW><id>16333321</id><snippet>k</snippet></ROW><ROW><id>16333321</id><snippet>fl</snippet></ROW><ROW><id>16333321</id><snippet>for k in range(10)</snippet></ROW><ROW><id>16333321</id><snippet>arr1 = [0] * 10</snippet></ROW><ROW><id>16333321</id><snippet>arr2</snippet></ROW><ROW><id>16333441</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d['dict1'] = {}
&gt;&gt;&gt; d['dict1']['innerkey'] = 'value'
&gt;&gt;&gt; d
{'dict1': {'innerkey': 'value'}}
</snippet></ROW><ROW><id>16333441</id><snippet>x = {}

for row in file_map:
   x[row_key] = {} # derive this from something.
   for idx, col in enumerate(row):
       x[row_key][idx] = col
</snippet></ROW><ROW><id>16333441</id><snippet>a_file = "path/to/a.csv"
b_file = "path/to/b.csv"

# read from file a.csv
with open(a_file) as f:
    # skip headers
    f.next()
    # get first colum as keys
    keys = (line.split(',')[0] for line in f) 

# create empty dictionary:
d = {}

# read from file b.csv
with open(b_file) as f:
    # gather headers except first key header
    headers = f.next().split(',')[1:]
    # iterate lines
    for line in f:
        # gather the colums
        cols = line.strip().split(',')
        # check to make sure this key should be mapped.
        if cols[0] not in keys:
            continue
        # add key to dict
        d[cols[0]] = dict(
            # inner keys are the header names, values are columns
            (headers[idx], v) for idx, v in enumerate(cols[1:]))
</snippet></ROW><ROW><id>16333475</id><snippet>fig, ax = plt.subplots(1,1)

ax.hist(hamdists, bins=bins, align='left')
ax.set_xticks(bins[:-1])
</snippet></ROW><ROW><id>16333785</id><snippet>os.path.join</snippet></ROW><ROW><id>16333785</id><snippet>import os

a = 'c:' // removed slash
b = 'myFirstDirectory' // removed slash
c = 'mySecondDirectory'
d = 'myThirdDirectory'
e = 'myExecutable.exe'

print os.path.join(a, b, c, d, e)
</snippet></ROW><ROW><id>16333785</id><snippet>os.sep</snippet></ROW><ROW><id>16333826</id><snippet>pypy manage.py test</snippet></ROW><ROW><id>16334019</id><snippet>{% include %}</snippet></ROW><ROW><id>16334236</id><snippet>dict = {
        'cat' : {10: [value1, value2, value3, ..., value10]},
        'dog' : {15: [value1, value2, value3, ..., value15]},
        'zen' : {15: [value1, value2, value3, ..., value15]}
       }
</snippet></ROW><ROW><id>16334236</id><snippet>dict['cat'][10]</snippet></ROW><ROW><id>16334236</id><snippet>def method(self, key, length):
    return self.__dict__[key][:length]
</snippet></ROW><ROW><id>16334236</id><snippet>dict = {
        ('cat', 10) : [value1, value2, value3, ..., value10],
        ('dog', 15) : [value1, value2, value3, ..., value15],
        ('zen', 15) : [value1, value2, value3, ..., value15]
       }
</snippet></ROW><ROW><id>16334401</id><snippet>verifygerritscmd = ("python test.py --InputFile=list.txt --Project=location/code --branch=master").split()
</snippet></ROW><ROW><id>16334401</id><snippet>shell=True</snippet></ROW><ROW><id>16334401</id><snippet>gerritPipe = Popen(verifygerritscmd, stdout=PIPE, stderr=PIPE, shell=True)
</snippet></ROW><ROW><id>16334469</id><snippet>import re

def remove_between_anchors(text, anchor):
    return re.sub(r'{0}.+?{0}'.format(anchor), '', text)

remove_between_anchors('123aa456aa789', 'aa') # returns '123789'
</snippet></ROW><ROW><id>16334469</id><snippet>def remove_between_anchors(text, start, end):
    return re.sub(r'{0}.+?{1}'.format(start, end), '', text)

remove_between_anchors('123&lt;abc&gt;456', '&lt;', '&gt;') # returns '123456'
</snippet></ROW><ROW><id>16334504</id><snippet>import getpass
import pickle
import hashlib
from os import path

def Encryption(data):
    return hashlib.sha224(data).hexdigest()

## First we check if the database exists.
if path.isfile('database.db'):
    fh = open('database.db', 'rb')
    db = pickle.load(fh)
    fh.close()
## If it doesn't, we will create one.
else:
    ## First we create the desired variable.
    db = {'torxed' : Encryption('wham'), 'someoneelse' : Encryption('pass')}
    ## Then we open a filehandle to it.
    fh = open('database.db', 'wb')
    ## And then we dump the variable into the filehandle.
    ## This will keep the variable intact between sessions,
    ## meaning the next time you start your script, the variable will look the same.
    pickle.dump(db, fh)
    fh.close()


## Then we ask the user for his/hers credentials.
user = raw_input('Username: ')
_pass = getpass.getpass('Password: ')

## If the user exists in the "db" and the decoded password
## Matches the logged in user, it's a-ok :)
if user in db and db[user] == Encryption(_pass):
    print 'You logged in'
</snippet></ROW><ROW><id>16334504</id><snippet>import pickle, hashlib

def Encryption(data):
    return hashlib.sha224(data).hexdigest()

with open('database.db', 'rb') as fh:
    db = pickle.load(fh)

db['new_user'] = Encryption('password')

with open('database.db', 'wb') as fh:
    pickle.dump(db, fh)
</snippet></ROW><ROW><id>16334504</id><snippet>sys.argv</snippet></ROW><ROW><id>16334504</id><snippet>import pickle, hashlib, sys
if len(sys.argv) &lt; 3:
    raise ValueError('Need two parameters, username and password')

def Encryption(data):
    return hashlib.sha224(data).hexdigest()

with open('database.db', 'rb') as fh:
    db = pickle.load(fh)

db[sys.argv[1]] = Encryption(sys.argv[2])

with open('database.db', 'wb') as fh:
    pickle.dump(db, fh)
</snippet></ROW><ROW><id>16334583</id><snippet>&gt;&gt;&gt; data = "15:31:17 TPP    E Line 'MESSAGE': There is a technical problem in the server."
&gt;&gt;&gt; data.rsplit(':', 1)[1]
' There is a technical problem in the server.'
</snippet></ROW><ROW><id>16334583</id><snippet>&gt;&gt;&gt; data = "15:31:17 TPP    E Line 'MESSAGE': There is a technical problem in the server."
&gt;&gt;&gt; ms = re.search(r"'MESSAGE': (.*)$", data)
&gt;&gt;&gt; ms.group(1)
'There is a technical problem in the server.'
</snippet></ROW><ROW><id>16334583</id><snippet>&gt;&gt;&gt; ms = re.match(r"(\d\d:\d\d:\d\d)\s+(\S+)\s+(\S+)\s+Line\s+'MESSAGE':\s+(.*)", data)
&gt;&gt;&gt; ms.groups()
('15:31:17', 'TPP', 'E', 'There is a technical problem in the server.')
</snippet></ROW><ROW><id>16335196</id><snippet>Resource</snippet></ROW><ROW><id>16335196</id><snippet>queryset</snippet></ROW><ROW><id>16335196</id><snippet>resource_name</snippet></ROW><ROW><id>16335196</id><snippet>Resource</snippet></ROW><ROW><id>16335196</id><snippet>__new__</snippet></ROW><ROW><id>16335196</id><snippet>classmethod</snippet></ROW><ROW><id>16335196</id><snippet>for name, obj in inspect.getmembers(sys.modules['resources']):
    if inspect.isclass(obj):  # might want to add a few exclusions
        v1_api.register(obj())
</snippet></ROW><ROW><id>16335218</id><snippet>np.any</snippet></ROW><ROW><id>16335218</id><snippet>np.all</snippet></ROW><ROW><id>16335218</id><snippet>bool</snippet></ROW><ROW><id>16335218</id><snippet>True</snippet></ROW><ROW><id>16335218</id><snippet>&gt;&gt;&gt; false = [False]
&gt;&gt;&gt; np.array(x for x in false)
array(&lt;generator object &lt;genexpr&gt; at 0x31193c0&gt;, dtype=object)
&gt;&gt;&gt; bool(x for x in false)
True
</snippet></ROW><ROW><id>16335218</id><snippet>&gt;&gt;&gt; np.all([x for x in false])
False
&gt;&gt;&gt; np.any([x for x in false])
False
</snippet></ROW><ROW><id>16335218</id><snippet>any</snippet></ROW><ROW><id>16335218</id><snippet>all</snippet></ROW><ROW><id>16335218</id><snippet>list</snippet></ROW><ROW><id>16335218</id><snippet>array</snippet></ROW><ROW><id>16335333</id><snippet>id   | userId       | fileId     | status
-----+--------------+------------+-----------------
...  | user1        | file1      | 2 /* completed successfully */
...  | user1        | file2      | -1 /* error */
...  | user2        | file3      | 0 /* waiting to be uploaded */
</snippet></ROW><ROW><id>16335372</id><snippet>instance = conn.get_all_instances(instance_ids=['instance_id'])
print instance[0].instances[0].start()
</snippet></ROW><ROW><id>16335379</id><snippet>{% include "app/comments.html" %}
</snippet></ROW><ROW><id>16335739</id><snippet>QSharedMemory</snippet></ROW><ROW><id>16335739</id><snippet>from PyQt4.QtGui import QApplication, QMessageBox
from PyQt4.QtCore import QSharedMemory


class MemoryCondition:
    def __init__(self, key='memory_condition_key'):
        self._shm = QSharedMemory(key)
        if not self._shm.attach():
            if not self._shm.create(1):
                raise RuntimeError('error creating shared memory: %s' %
                                   self._shm.errorString())
        self.condition = False

    def __enter__(self):
        self._shm.lock()
        if self._shm.data()[0] == b'\x00':
            self.condition = True
            self._shm.data()[0] = b'\x01'
        self._shm.unlock()
        return self.condition

    def __exit__(self, exc_type, exc_value, traceback):
        if self.condition:
            self._shm.lock()
            self._shm.data()[0] = b'\x00'
            self._shm.unlock()


# usage example:
app = QApplication([])

with MemoryCondition() as condition:
    if condition:
        mb = QMessageBox()
        mb.setText("you'll only see one of me")
        mb.exec_()
    else:
        print("other process is doing it's stuff")
</snippet></ROW><ROW><id>16335832</id><snippet>not</snippet></ROW><ROW><id>16335832</id><snippet>!</snippet></ROW><ROW><id>16335832</id><snippet>not</snippet></ROW><ROW><id>16335832</id><snippet>!</snippet></ROW><ROW><id>16335998</id><snippet>sort()</snippet></ROW><ROW><id>16335998</id><snippet>In [14]: fruits = [["Mango", 6,5,8.0],
         ["Banana", 2.0,5,8.9,7],
         ["Pineapple", 4,6.8,9],
         ["Apple", 3.9,6,7,2]]

In [15]: fruits.sort()

In [16]: fruits
Out[16]: 
[['Apple', 3.9, 6, 7, 2],
 ['Banana', 2.0, 5, 8.9, 7],
 ['Mango', 6, 5, 8.0],
 ['Pineapple', 4, 6.8, 9]]
</snippet></ROW><ROW><id>16335998</id><snippet>__ge__</snippet></ROW><ROW><id>16335998</id><snippet>__le__</snippet></ROW><ROW><id>16335998</id><snippet>__gt__</snippet></ROW><ROW><id>16335998</id><snippet>__lt__</snippet></ROW><ROW><id>16335998</id><snippet>fruits.sort()</snippet></ROW><ROW><id>16335998</id><snippet>sorted(fruits)</snippet></ROW><ROW><id>16336050</id><snippet>__openerp__.py</snippet></ROW><ROW><id>16336132</id><snippet>con.row_factory = my_row_factory
</snippet></ROW><ROW><id>16336132</id><snippet>my_row_factory</snippet></ROW><ROW><id>16336132</id><snippet>import sqlite3
import collections

LanguageRecord = collections.namedtuple('LanguageRecord', 'id name creation_date')
def namedtuple_factory(cursor, row):
    return LanguageRecord(*row)

con = sqlite3.connect(":memory:")
con.row_factory = namedtuple_factory
cur = con.cursor()
cur.execute("select 1,2,3")
print(cur.fetchone())
</snippet></ROW><ROW><id>16336132</id><snippet>LanguageRecord(id=1, name=2, creation_date=3)
</snippet></ROW><ROW><id>16336132</id><snippet>conn.row_factory = sqlite3.Row
</snippet></ROW><ROW><id>16336132</id><snippet>row.creation_date</snippet></ROW><ROW><id>16336132</id><snippet>sqlite3.Row</snippet></ROW><ROW><id>16336132</id><snippet>row['creation_date']</snippet></ROW><ROW><id>16336167</id><snippet>device</snippet></ROW><ROW><id>16336167</id><snippet>HidDevice</snippet></ROW><ROW><id>16336167</id><snippet>do_GET</snippet></ROW><ROW><id>16336167</id><snippet>global</snippet></ROW><ROW><id>16336167</id><snippet>global e_value
e_value = None

def scales_handler(data):
    print("Byte 0: {0}".format(data[0]))
    print("Byte 1: {0}".format(data[1]))
    print("Byte 2: {0}".format(data[2]))
    print("Byte 3: {0}".format(data[3]))
    print("Byte 4: {0}".format(data[4]))
    print("Byte 5: {0}".format(data[5]))
    print("All: {0}".format(data))
    if data[1] == 4:
        e_value = data[4] + (256 * data[5]))

devices = []
try:
    for index, device in enumerate(all_hids):
        if device.serial_number == requested_serial_number:
            devices.append(device)
            device.open()
            device.set_raw_data_handler(sample_handler)
    while True:  
        time.sleep(0.1)
finally:
    for device in devices:
        device.close()

if e_value is not None:
    self.do_HEAD(200)
    self.send_body(e_value) 
</snippet></ROW><ROW><id>16336167</id><snippet>data[1] == 4</snippet></ROW><ROW><id>16336167</id><snippet>e_value</snippet></ROW><ROW><id>16337017</id><snippet>form = LoginForm()
    user = User.query.filter_by(email=form.email.data).first()
</snippet></ROW><ROW><id>16337017</id><snippet>class LoginForm(SafeForm):
   email=TextField(__("E-Mail"),validators=[Required()])
   password=PasswordField(__("Password"),validators=[Required()])
   submit=SubmitField(__("Login"))

   def __init__(self,*k,**kk):
      self._user=None #for internal user storing
      super(LoginForm,self).__init__(*k,**kk)

   def validate(self):
       self._user=User.query.filter(User.email==self.email.data).first()
       return super(LoginForm,self).validate()

   def validate_email(self,field):
       if self._user is None:
           raise ValidationError(_("E-Mail not recognized"))


   def validate_password(self,field):
       if self._user is None:
           raise ValidationError() #just to be sure
       if not self._user.validate_password(self.password.data): #passcheck embedded into user model
           raise ValidationError(_("Password incorrect"))
</snippet></ROW><ROW><id>16337027</id><snippet>&gt;&gt;&gt; query
'&amp;foo^bar'
&gt;&gt;&gt; re.split(r'(&amp;|\^|)', query)
['', '&amp;', 'foo', '^', 'bar']
</snippet></ROW><ROW><id>16337631</id><snippet>elements = driver.find_elements_by_tag_name("td")
for element in elements:
    if element.text == "Click here!":
        element.click()
</snippet></ROW><ROW><id>16337631</id><snippet>elements  = find_elements_by_class_name("wb")
for element in elements:
    if element.text == "Click here!":
        element.click()
</snippet></ROW><ROW><id>16337639</id><snippet>urllib3</snippet></ROW><ROW><id>16337639</id><snippet>logging</snippet></ROW><ROW><id>16337639</id><snippet>POST</snippet></ROW><ROW><id>16337639</id><snippet>GET</snippet></ROW><ROW><id>16337639</id><snippet>import logging

logging.basicConfig(level=logging.DEBUG)
</snippet></ROW><ROW><id>16337639</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; import logging
&gt;&gt;&gt; logging.basicConfig(level=logging.DEBUG)
&gt;&gt;&gt; r = requests.get('http://httpbin.org/get?foo=bar&amp;baz=python')
INFO:requests.packages.urllib3.connectionpool:Starting new HTTP connection (1): httpbin.org
DEBUG:requests.packages.urllib3.connectionpool:"GET /get?foo=bar&amp;baz=python HTTP/1.1" 200 353
</snippet></ROW><ROW><id>16337639</id><snippet>INFO</snippet></ROW><ROW><id>16337639</id><snippet>INFO</snippet></ROW><ROW><id>16337639</id><snippet>INFO</snippet></ROW><ROW><id>16337639</id><snippet>WARN</snippet></ROW><ROW><id>16337639</id><snippet>WARN</snippet></ROW><ROW><id>16337639</id><snippet>DEBUG</snippet></ROW><ROW><id>16337848</id><snippet>ctrl+c</snippet></ROW><ROW><id>16337848</id><snippet>kill -SIGINT pid</snippet></ROW><ROW><id>16337848</id><snippet>pid</snippet></ROW><ROW><id>16337848</id><snippet>kill</snippet></ROW><ROW><id>16337909</id><snippet>plt.figure</snippet></ROW><ROW><id>16337909</id><snippet>from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure

# The pylab figure manager will be bypassed in this instance.
# This means that `fig` will be garbage collected as you'd expect.
fig = Figure()
canvas = FigureCanvas(fig)
ax = fig.add_subplot(111)
</snippet></ROW><ROW><id>16337933</id><snippet>with open(filename, 'a') as f:
    f.write(line+"\n")
</snippet></ROW><ROW><id>16338132</id><snippet>app.exec_()</snippet></ROW><ROW><id>16338132</id><snippet>ses.listen_on(6881, 6891)
#e = lt.bdecode(open("test.torrent", 'rb').read())
info = lt.torrent_info("g.torrent")
h = ses.add_torrent({'ti': info, 'save_path': './'})
print 'starting', h.name()

while (not h.is_seed()):
   s = h.status()

   state_str = ['queued', 'checking', 'downloading metadata', 'downloading', 'finished', 'seeding', 'allocating', 'checking fastresume']
   print '\r%.2f%% complete (down: %.1f kb/s up: %.1f kB/s peers: %d) %s' % (s.progress * 100, s.download_rate / 1000, s.upload_rate / 1000, s.num_peers, state_str[s.state]),
   sys.stdout.flush()
   #ses.pause()

   time.sleep(1)
</snippet></ROW><ROW><id>16338132</id><snippet>__init__</snippet></ROW><ROW><id>16338132</id><snippet>MyForm</snippet></ROW><ROW><id>16338142</id><snippet>mat_A = np.asarray(mat_A)
mat_B = np.asarray(mat_B)
mat_C = mat_A + mat_B
print(mat_C)
</snippet></ROW><ROW><id>16338142</id><snippet>mat_C = [[a+b for a,b in zip(row_A, row_B)] for row_A, row_B in zip(mat_A, mat_B)]
</snippet></ROW><ROW><id>16338438</id><snippet>eng1.traineddata</snippet></ROW><ROW><id>16338438</id><snippet>-l eng+eng1</snippet></ROW><ROW><id>16338562</id><snippet>print ', '.join(actorsByMovies())
</snippet></ROW><ROW><id>16338655</id><snippet>couponVotes</snippet></ROW><ROW><id>16338655</id><snippet>models.Model</snippet></ROW><ROW><id>16338756</id><snippet>import module
class Id1(models.Model):

    ...

    def custom_validate_method(self):
        # instantiate modules classes needed
        # write the logic needed
</snippet></ROW><ROW><id>16338756</id><snippet>Id1</snippet></ROW><ROW><id>16338756</id><snippet>save()</snippet></ROW><ROW><id>16338756</id><snippet>    def custom_validate_method(self):
        # instantiate modules classes needed
        # write the logic needed

    def save(self, *args, **kwargs):
        # perform logic (maybe call custom_validate_method)
        return super(Id1, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>16338756</id><snippet>import module
class Id1(models.Model, module.Class):
number = models.CharField(max_length=10)
converted = models.CharField(max_length=13)

def __unicode__(self):
    return self.number
</snippet></ROW><ROW><id>16338765</id><snippet>import pprint

response = {"status": "ERROR", "email": "EMAIL_INVALID", "name":
            "NAME_INVALID"}


def convert(label):
    return {'NAME_INVALID': 'No special characters allowed',
            'EMAIL_INVALID': 'invalid email',
            'ERROR': 'ERROR'}[label]

ret = {}
for k in response:
    if k != 'status':
        ret[k + "_label"] = convert(response[k])
        ret[k] = response[k]
        info = {'converted_value': ret[k + "_label"],
                'field': k,
                'value': response[k]}
        (ret.setdefault('api_error', {})
            .setdefault('list', [])
            .append(info))
    else:
        ret[k] = convert(response[k])
        ret.setdefault('api_error', {})['status'] = ret[k]
pprint.pprint(ret)
</snippet></ROW><ROW><id>16338765</id><snippet>{'api_error': {'list': [{'converted_value': 'invalid email',
                         'field': 'email',
                         'value': 'EMAIL_INVALID'},
                        {'converted_value': 'No special characters allowed',
                         'field': 'name',
                         'value': 'NAME_INVALID'}],
               'status': 'ERROR'},
 'email': 'EMAIL_INVALID',
 'email_label': 'invalid email',
 'name': 'NAME_INVALID',
 'name_label': 'No special characters allowed',
 'status': 'ERROR'}
</snippet></ROW><ROW><id>16339140</id><snippet>__unicode__</snippet></ROW><ROW><id>16339140</id><snippet>ManyToManyField</snippet></ROW><ROW><id>16339140</id><snippet>class ArtistRelationship(models.Model):
    from_artist = models.ForeignKey('Artist')
    to_artist = models.ForeignKey('Artist')

    def __unicode__(self):
        return u"%s - %s" % (self.from_artist.name, self.to_artist.name)


class Artist(models.Model):
    name = models.CharField(max_length=200)
    # ... more fields ...
    related_to = models.ManyToManyField("self", null=True, blank=True,
                                        through=ArtistRelationship)
</snippet></ROW><ROW><id>16339213</id><snippet>from xml.sax.saxutils import unescape

text = doc.createTextNode(unescape(text))
</snippet></ROW><ROW><id>16339213</id><snippet>&gt;</snippet></ROW><ROW><id>16339443</id><snippet>url1</snippet></ROW><ROW><id>16339443</id><snippet>url2</snippet></ROW><ROW><id>16339443</id><snippet>import time

url2 = "http://www.skyscanner.net/dataservices/routedate/v2.0/%s" % str(match.group(1))

time.sleep(5)

req2 = urllib2.Request(url2)
</snippet></ROW><ROW><id>16339502</id><snippet>def __str__(self):
    str  = 'Code Arg', self._code_arg
    str += 'Year_registr', self.Year_registr
    ...

    return str
</snippet></ROW><ROW><id>16340014</id><snippet>def is_there_a_path(_from, _to):
    visited = set() # remember what you visited
    while _from:
        from_node = _from.pop(0) # get a new unvisited node
        if from_node in _to:
            # went the path
            return True
        # you need to implement get_nodes_referenced_by(node)
        for neighbor_node in get_nodes_referenced_by(from_node): 
            # iterate over all the nodes the from_node points to
            if neighbor_node not in visited:
                # expand only unvisited nodes to avoid circles
                visited.add(neighbor_node)
                _from.append(neighbor_node)
    return False
</snippet></ROW><ROW><id>16340014</id><snippet>1.</snippet></ROW><ROW><id>16340014</id><snippet>yield</snippet></ROW><ROW><id>16340014</id><snippet>return</snippet></ROW><ROW><id>16340014</id><snippet>for path in is_there_a_path(_from, _to):</snippet></ROW><ROW><id>16340014</id><snippet>class Object
  #
  # breadth first search for references from the given object to self
  #
  def reference_path_to(to_object, length, trace = false)
    paths = [[to_object]]
    traversed = IdentitySet.new
    traversed.add(to_object)
    start_size = 1 if trace
    while not paths.empty? and paths.first.size &lt;= length
      references = paths[0][0].find_references_in_memory
      # if we print here a SecurityError mey occur
      references.each{ |reference| 
        return [reference] + paths[0] if reference.equal?(self)
        unless traversed.include?(reference) or paths.any?{ |path| reference.equal?(path)}
          paths.push([reference] + paths[0])
          traversed.add(reference)
        end
      }
      if trace and start_size != paths[0].size
        puts "reference_path_length: #{paths[0].size}"
        start_size = paths[0].size
      end
      paths.delete_at(0)
    end
    return nil
  end
end # from https://github.com/knub/maglevrecord/blob/60082fd8c16fa7974166b96e5243fc0a176d172e/lib/maglev_record/tools/object_reference.rb
</snippet></ROW><ROW><id>16340047</id><snippet>import ogr
import matplotlib.path as mpath
import matplotlib.patches as patches
import matplotlib.pyplot as plt

ds = ogr.Open('lmes_64.shp')
lyr = ds.GetLayer(0)
ft = lyr.GetFeature(38)
geom = ft.GetGeometryRef()
ds = None

codes = []
all_x = []
all_y = []

if (geom.GetGeometryType() == ogr.wkbPolygon):
  for i in range(geom.GetGeometryCount()):

    r = geom.GetGeometryRef(i)
    x = [r.GetX(j) for j in range(r.GetPointCount())]
    y = [r.GetY(j) for j in range(r.GetPointCount())]

    codes += [mpath.Path.MOVETO] + (len(x)-1)*[mpath.Path.LINETO]
    all_x += x
    all_y += y

if (geom.GetGeometryType() == ogr.wkbMultiPolygon):
  codes = []
  for i in range(geom.GetGeometryCount()):
    # Read ring geometry and create path
    r = geom.GetGeometryRef(i)
    for part in r:
      x = [part.GetX(j) for j in range(part.GetPointCount())]
      y = [part.GetY(j) for j in range(part.GetPointCount())]
      # skip boundary between individual rings
      codes += [mpath.Path.MOVETO] + (len(x)-1)*[mpath.Path.LINETO]
      all_x += x
      all_y += y

carib_path = mpath.Path(np.column_stack((all_x,all_y)), codes)    
carib_patch = patches.PathPatch(carib_path, facecolor='orange', lw=2)

poly1 = patches.Polygon([[-80,20],[-75,20],[-75,15],[-80,15],[-80,20]], zorder=5, fc='none', lw=3)
poly2 = patches.Polygon([[-65,25],[-60,25],[-60,20],[-65,20],[-65,25]], zorder=5, fc='none', lw=3)


fig, ax = plt.subplots(1,1)

for poly in [poly1, poly2]:
    if carib_path.intersects_path(poly.get_path()):
        poly.set_edgecolor('g')
    else:
        poly.set_edgecolor('r')

    ax.add_patch(poly)

ax.add_patch(carib_patch)
ax.autoscale_view()
</snippet></ROW><ROW><id>16340090</id><snippet>[formatter_mylog]
format: %(asctime)s %(message)s
datefmt=%m-%d %H:%M:%S
</snippet></ROW><ROW><id>16340090</id><snippet>%b</snippet></ROW><ROW><id>16340369</id><snippet>%</snippet></ROW><ROW><id>16340369</id><snippet>if float_number &gt;= (".3f" % float_number):
</snippet></ROW><ROW><id>16340369</id><snippet>if float_number &gt;= ("%.3f" % float_number):
</snippet></ROW><ROW><id>16340369</id><snippet>float</snippet></ROW><ROW><id>16340369</id><snippet>if float_number &gt;= ("%.3f" % float_number):
</snippet></ROW><ROW><id>16340369</id><snippet>TypeError</snippet></ROW><ROW><id>16340369</id><snippet>&gt;&gt;&gt; 0.123 &gt;= '0.123'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: float() &gt;= str()
</snippet></ROW><ROW><id>16340369</id><snippet>round()</snippet></ROW><ROW><id>16340369</id><snippet>if float_number &gt;= round(float_number, 3):
</snippet></ROW><ROW><id>16340373</id><snippet>list</snippet></ROW><ROW><id>16340373</id><snippet>list</snippet></ROW><ROW><id>16340373</id><snippet>list([1,2,3])</snippet></ROW><ROW><id>16340373</id><snippet>[[1,2,3]]</snippet></ROW><ROW><id>16340373</id><snippet>list((1,2,3))</snippet></ROW><ROW><id>16340373</id><snippet>[(1,2,3)]</snippet></ROW><ROW><id>16340373</id><snippet>list(x for x in range(10))</snippet></ROW><ROW><id>16340373</id><snippet>[&lt;generator object &lt;genexpr&gt; at 0xef170&gt;]</snippet></ROW><ROW><id>16340442</id><snippet>2136</snippet></ROW><ROW><id>16340442</id><snippet>class DEF:
    a=2136
    print a
</snippet></ROW><ROW><id>16340442</id><snippet>DEF</snippet></ROW><ROW><id>16340628</id><snippet>[row[0] for row in nested_list[1:]]
</snippet></ROW><ROW><id>16340660</id><snippet>exec</snippet></ROW><ROW><id>16340660</id><snippet>eval</snippet></ROW><ROW><id>16340660</id><snippet>&gt;&gt;&gt; class MyDict(dict):
    def __getitem__(self, name):
        # overwrite __getitem__ for access of unknown variables
        print 'name in self:', name in self
        if not name in self:
            # TODO: handle ImportError
            module = __import__(name)
            return module
        return dict.__getitem__(self, name)


&gt;&gt;&gt; d = MyDict(x = 1)
&gt;&gt;&gt; exec 'print x' in d
name in self: True
1
&gt;&gt;&gt; exec 'print os' in d # this loads the os module because the variable os is not defined
name in self: False
&lt;module 'os' from '/usr/lib64/python2.7/os.pyc'&gt;
</snippet></ROW><ROW><id>16340660</id><snippet>&gt;&gt;&gt; def exec_in_module(string):
    module, command = string.split('.', 1)
    module = __import__(module)
    try:
        return eval(command, module.__dict__)
    except SyntaxError:
        exec command in module.__dict__
        return None


&gt;&gt;&gt; exec_in_module('os.listdir(".")')
['README.md', ...]
</snippet></ROW><ROW><id>16340686</id><snippet>create_engine</snippet></ROW><ROW><id>16340691</id><snippet>SIGINT</snippet></ROW><ROW><id>16340691</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>16340691</id><snippet>kill(1)</snippet></ROW><ROW><id>16340691</id><snippet>$ kill -INT &lt;pid&gt;
</snippet></ROW><ROW><id>16340691</id><snippet>if __name__ =='__main__':
    try:
        systemPing('192.168.1.1')
    except KeyboardInterrupt:
        print 'Finished'
</snippet></ROW><ROW><id>16341091</id><snippet>abs(x[0][1])</snippet></ROW><ROW><id>16341091</id><snippet>max(abs(x[0][1]) for x in dCF3v)
</snippet></ROW><ROW><id>16341091</id><snippet>dCF3v = [x[0] for x in dCF3v]
</snippet></ROW><ROW><id>16341091</id><snippet>max(abs(x[0]) for x in dCF3v)
</snippet></ROW><ROW><id>16341091</id><snippet>max(dCF3v,key=lambda x:abs(x[0]))
</snippet></ROW><ROW><id>16341139</id><snippet>dict1 = {}
dict2 = {}
for x in range(0, 10):
    dict1[x] = "initValue{}".format(x)
    y = x+3
    dict2[y] = "address{}".format(y)
</snippet></ROW><ROW><id>16341139</id><snippet>dict3 = {}
#Note because you want the addresses to be the key of the new dictionary
#we only need to look at the keys that exist in both dict1 and dict2.
for key in dict2.keys():
    if key in dict1:
        dict3[dict2[key]] = dict1[key]
</snippet></ROW><ROW><id>16341139</id><snippet>dict1
{0: 'initValue0', 1: 'initValue1', 2: 'initValue2', 3: 'initValue3', 4: 'initValue4', 5: 'initValue5', 6: 'initValue6', 7: 'initValue7', 8: 'initValue8', 9: 'initValue9'}

dict2
{3: 'address3', 4: 'address4', 5: 'address5', 6: 'address6', 7: 'address7', 8: 'address8', 9: 'address9', 10: 'address10', 11: 'address11', 12: 'address12'}

dict3 (combined)
{'address5': 'initValue5', 'address4': 'initValue4', 'address7': 'initValue7', 'address6': 'initValue6', 'address3': 'initValue3', 'address9': 'initValue9', 'address8': 'initValue8'}
</snippet></ROW><ROW><id>16341545</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.seed(1)
&gt;&gt;&gt; random.random()
0.13436424411240122
&gt;&gt;&gt; random.random()
0.8474337369372327
&gt;&gt;&gt; random.random()
0.763774618976614
&gt;&gt;&gt; random.seed(1)
&gt;&gt;&gt; random.random()
0.13436424411240122
&gt;&gt;&gt; random.random()
0.8474337369372327
&gt;&gt;&gt; random.random()
0.763774618976614
</snippet></ROW><ROW><id>16341545</id><snippet>1</snippet></ROW><ROW><id>16341595</id><snippet>df = DataFrame('a': np.random.randn(100), 'b':np.random.randn(100)})
mask = (df.b &gt; -.5) &amp; (df.b &lt; .5)
df_masked = df[mask]
</snippet></ROW><ROW><id>16341595</id><snippet>df_masked = df[(df.b &gt; -.5) &amp; (df.b &lt; .5)]
</snippet></ROW><ROW><id>16341638</id><snippet>class SourcetoPort(Base):
    """"""
    __tablename__ = 'source_to_port'
    id = Column(Integer, primary_key=True)
    port_no        = Column(Integer)
    src_address    = Column(String, index=True)
</snippet></ROW><ROW><id>16341638</id><snippet>if session.query(SourcetoPort).filter_by(src_address=str(packet.dst)).count():
#do stuff if the flow information is already in the databaase.
</snippet></ROW><ROW><id>16341638</id><snippet>from sqlalchemy.sql.expression import exists
if session.query(exists().where(SourcetoPort.src_address == '123')).scalar() is not None:
    #do stuff if the flow information is already in the database.
</snippet></ROW><ROW><id>16341734</id><snippet>&gt;&gt;&gt; from decimal import Decimal, ROUND_FLOOR
&gt;&gt;&gt; Decimal('0.9876').quantize(Decimal('0.1'), rounding=ROUND_FLOOR)
Decimal('0.9')
</snippet></ROW><ROW><id>16341734</id><snippet>&gt;&gt;&gt; x = Decimal('1.999999999999999999998')
&gt;&gt;&gt; x.quantize(Decimal('0.1'), rounding=ROUND_FLOOR)
Decimal('1.9')
&gt;&gt;&gt; math.floor(x * 10) / 10
2.0
</snippet></ROW><ROW><id>16341841</id><snippet>for</snippet></ROW><ROW><id>16341841</id><snippet>def slower():
    result = []
    for elem in some_iterable:
        result.append(elem)
    return result

def faster():
    return [elem for elem in some_iterable]
</snippet></ROW><ROW><id>16341841</id><snippet>.append()</snippet></ROW><ROW><id>16341841</id><snippet>list</snippet></ROW><ROW><id>16341841</id><snippet>list</snippet></ROW><ROW><id>16341841</id><snippet>&gt;&gt;&gt; some_iterable = range(1000)
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('f()', 'from __main__ import slower as f', number=10000)
1.4456570148468018
&gt;&gt;&gt; timeit.timeit('f()', 'from __main__ import faster as f', number=10000)
0.49323201179504395
</snippet></ROW><ROW><id>16341866</id><snippet>max_digits=6</snippet></ROW><ROW><id>16341866</id><snippet>def ascending(ndig, first_digit_max):
    for x in xrange(0, first_digit_max+1):
        if ndig == 1:
            yield [x]
        else:
            for y in ascending(ndig-1, x):
                yield [x] + y

max_digits = 6
nums = sorted([int(''.join(map(str, num)))
               for ndig in xrange(1, max_digits+1)
               for num in ascending(ndig, 9)
               if any(num)])
</snippet></ROW><ROW><id>16341866</id><snippet>ascending</snippet></ROW><ROW><id>16341866</id><snippet>ndig</snippet></ROW><ROW><id>16341866</id><snippet>first_digit_max</snippet></ROW><ROW><id>16341866</id><snippet>ndig=6</snippet></ROW><ROW><id>16341866</id><snippet>ndig=5</snippet></ROW><ROW><id>16341866</id><snippet>ndig=1</snippet></ROW><ROW><id>16341870</id><snippet>import time

# Assuming the Popen objects are in the dictionary values
PROCESS_DICT = { ... }

def my_thread_main():
    while 1:
        dead_keys = []
        for k, v in PROCESS_DICT.iteritems():
            v.poll()
            if v.returncode is not None:
                dead_keys.append(k)
        if not dead_keys:
            time.sleep(1)  # Adjust sleep time to taste
            continue
        for k in dead_keys:
            del PROCESS_DICT[k]
</snippet></ROW><ROW><id>16341870</id><snippet>WaitForMultipleObjects</snippet></ROW><ROW><id>16341870</id><snippet>ctypes</snippet></ROW><ROW><id>16341870</id><snippet>ctypes.windll.kernel32.WaitForMultipleObjects</snippet></ROW><ROW><id>16341870</id><snippet>SIGCHLD</snippet></ROW><ROW><id>16341870</id><snippet>signal</snippet></ROW><ROW><id>16341870</id><snippet>import os
import time
import signal
import subprocess

# Map child PID to Popen object
SUBPROCESSES = {}

# Define handler
def handle_sigchld(signum, frame):
    pid = os.wait()[0]
    print 'Subprocess PID=%d ended' % pid
    del SUBPROCESSES[pid]

# Handle SIGCHLD
signal.signal(signal.SIGCHLD, handle_sigchld)

# Spawn a couple of subprocesses
p1 = subprocess.Popen(['sleep', '1'])
SUBPROCESSES[p1.pid] = p1
p2 = subprocess.Popen(['sleep', '2'])
SUBPROCESSES[p2.pid] = p2

# Wait for all subprocesses to die
while SUBPROCESSES:
    print 'tick'
    time.sleep(1)

# Done
print 'All subprocesses died'
</snippet></ROW><ROW><id>16341914</id><snippet>&gt;&gt;&gt; score = 0
&gt;&gt;&gt; for i in xrange(len(seq1)):
        score += similarity[seq1[i], seq2[i], qual1[i], qual2[i]]
...     
&gt;&gt;&gt; score
498.71792400493433
&gt;&gt;&gt; similarity[seq1,seq2, qual1, qual2].sum()
498.71792400493433
</snippet></ROW><ROW><id>16341914</id><snippet>import numpy as np

similarity = np.random.random((32, 32, 100, 100))
n = 1000
seq1, seq2, qual1, qual2 = [np.random.randint(0, s, n) for s in similarity.shape]

def slow():
    score = 0
    for i in xrange(len(seq1)):
        score += similarity[seq1[i], seq2[i], qual1[i], qual2[i]]
    return score

def fast():
    return similarity[seq1, seq2, qual1, qual2].sum()
</snippet></ROW><ROW><id>16341914</id><snippet>&gt;&gt;&gt; timeit slow()
100 loops, best of 3: 3.59 ms per loop
&gt;&gt;&gt; timeit fast()
10000 loops, best of 3: 143 us per loop
&gt;&gt;&gt; np.allclose(slow(),fast())
True
</snippet></ROW><ROW><id>16342049</id><snippet>import numpy as np

a = [0,0,0,0,0,0,1,1,2,1,0,0,0,0,1,0,1,2,1,0,2,3]

# Find indexes of all zeroes
index_zeroes = np.where(np.array(a) == 0)[0]

# Find discontinuities in indexes, denoting separated groups of zeroes
# Note: Adding True at the end because otherwise the last zero is ignored
index_zeroes_disc = np.where(np.hstack((np.diff(index_zeroes) != 1, True)))[0]

# Count the number of zeroes in each group
# Note: Adding 0 at the start so first group of zeroes is counted
count_zeroes = np.diff(np.hstack((0, index_zeroes_disc + 1)))

# Count the number of groups with the same number of zeroes
groups_of_n_zeroes = {}
for count in count_zeroes:
    if groups_of_n_zeroes.has_key(count):
        groups_of_n_zeroes[count] += 1
    else:
        groups_of_n_zeroes[count] = 1
</snippet></ROW><ROW><id>16342049</id><snippet>groups_of_n_zeroes</snippet></ROW><ROW><id>16342049</id><snippet>{1: 2, 4: 1, 6: 1}
</snippet></ROW><ROW><id>16342062</id><snippet>int()</snippet></ROW><ROW><id>16342062</id><snippet>//</snippet></ROW><ROW><id>16342062</id><snippet>&gt;&gt;&gt; 6008514751432349174082765599289028910605977570 // 2 * 2
6008514751432349174082765599289028910605977570
</snippet></ROW><ROW><id>16342062</id><snippet>&gt;&gt;&gt; 6008514751432349174082765599289028910605977571 // 2 * 2
6008514751432349174082765599289028910605977570
</snippet></ROW><ROW><id>16342062</id><snippet>sys.float_info</snippet></ROW><ROW><id>16342062</id><snippet>sys.float_info.dig</snippet></ROW><ROW><id>16342062</id><snippet>&gt;&gt;&gt; len(str(int(6008514751432349174082765599289028910605977570 / 2) - (6008514751432349174082765599289028910605977570 // 2)))
30
</snippet></ROW><ROW><id>16342381</id><snippet>&gt;&gt;&gt; df
          0         1
0  1.000000  1.000000
1  1.122733  1.153222
2  0.941207  0.778028
3  0.843013  0.916605
4  0.930963  1.213833
5  0.843013  0.916605
6  0.755064  1.079864

&gt;&gt;&gt; df.drop_duplicates() 
          0         1
0  1.000000  1.000000
1  1.122733  1.153222
2  0.941207  0.778028
3  0.843013  0.916605
4  0.930963  1.213833
6  0.755064  1.079864
</snippet></ROW><ROW><id>16342381</id><snippet>df.apply(np.round, args=[4])</snippet></ROW><ROW><id>16342381</id><snippet>df = df.ix[~df.apply(np.round, args=[4]).duplicated()]
</snippet></ROW><ROW><id>16342381</id><snippet>grouped = df.groupby([df[i].round(4) for i in df.columns])
subbed = grouped.apply(lambda g: g.apply(lambda row: g.irow(0), axis=1))
subbed.drop_index(level=list(df.columns), drop=True, inplace=True)
</snippet></ROW><ROW><id>16342381</id><snippet>.sort()</snippet></ROW><ROW><id>16342381</id><snippet>groupby</snippet></ROW><ROW><id>16342381</id><snippet>df.groupby(lambda k: np.round(df.ix[k], 4))</snippet></ROW><ROW><id>16342381</id><snippet>apply</snippet></ROW><ROW><id>16342381</id><snippet>g</snippet></ROW><ROW><id>16342381</id><snippet>g.apply(lambda row: g.irow(0), axis=1)</snippet></ROW><ROW><id>16342381</id><snippet>apply</snippet></ROW><ROW><id>16342381</id><snippet>                        0         1
0      1                           
0.7551 1.0799 6  0.755064  1.079864
0.8430 0.9166 3  0.843013  0.916605
              5  0.843013  0.916605
0.9310 1.2138 4  0.930963  1.213833
0.9412 0.7780 2  0.941207  0.778028
1.0000 1.0000 0  1.000000  1.000000
1.1227 1.1532 1  1.122733  1.153222
</snippet></ROW><ROW><id>16342381</id><snippet>groupby</snippet></ROW><ROW><id>16342381</id><snippet>reset_index</snippet></ROW><ROW><id>16342619</id><snippet>C</snippet></ROW><ROW><id>16342619</id><snippet>B</snippet></ROW><ROW><id>16342619</id><snippet>B</snippet></ROW><ROW><id>16342619</id><snippet>C</snippet></ROW><ROW><id>16342619</id><snippet>B</snippet></ROW><ROW><id>16342619</id><snippet>B</snippet></ROW><ROW><id>16342619</id><snippet>&gt;&gt;&gt; gsm.registerAdapter(AB)
&gt;&gt;&gt; gsm.registerAdapter(AC)
&gt;&gt;&gt; from zope.component import getAdapters
&gt;&gt;&gt; for adapter in getAdapters((a, c), Interface):
...     print adapter
... 
(u'', &lt;__main__.AC object at 0x104b25a90&gt;)
</snippet></ROW><ROW><id>16342619</id><snippet>getAdapters()</snippet></ROW><ROW><id>16342619</id><snippet>&gt;&gt;&gt; class AnotherAC(object):
...     implements(Interface)
...     adapts(A, C)
...     def __init__(self, a, c): pass
... 
&gt;&gt;&gt; gsm.registerAdapter(AnotherAC, name=u'another')
&gt;&gt;&gt; for adapter in getAdapters((a, c), Interface):
...     print adapter
... 
(u'', &lt;__main__.AC object at 0x104b25ed0&gt;)
(u'another', &lt;__main__.AnotherAC object at 0x104b25a90&gt;)
</snippet></ROW><ROW><id>16342739</id><snippet>PreparedRequest</snippet></ROW><ROW><id>16342739</id><snippet>request</snippet></ROW><ROW><id>16342739</id><snippet>print dir(r.request)</snippet></ROW><ROW><id>16342821</id><snippet>output_dir</snippet></ROW><ROW><id>16342821</id><snippet>import os

def get_next_filename(output_dir):
    '''Gets the next numeric filename in a sequence.

    All files in the output directory must have the same name format,
    e.g. "txt1.txt".
    '''

    n = 0
    for f in os.listdir(output_dir):
        n = max(n, int(get_num_part(os.path.splitext(f)[0])))
    return 'txt%s.txt' % (n + 1)

def get_num_part(s):
    '''Get the numeric part of a string of the form "abc123".

    Quick and dirty implementation without using regex.'''

    for i in xrange(len(s)):
        if s[i:].isdigit():
            return s[i:]
    return ''
</snippet></ROW><ROW><id>16342821</id><snippet>runnum.cfg</snippet></ROW><ROW><id>16343120</id><snippet>enumerate</snippet></ROW><ROW><id>16343120</id><snippet>key</snippet></ROW><ROW><id>16343120</id><snippet>max</snippet></ROW><ROW><id>16343120</id><snippet>dCF3v=[[(1.90689635276794, -44704.76171875)],
       [(1.90689635276794, -44705.76171875)],
       [(1.90689635276794, -44706.76171875)],
       [(1.90689635276794, -44707.76171875)]
      ]

CF3a = (abs(x[0][1]) for x in dCF3v)
index, value = max(enumerate(CF3a), key=lambda (index, value): value)
print index,value
</snippet></ROW><ROW><id>16343158</id><snippet>input</snippet></ROW><ROW><id>16343158</id><snippet>raw_input()</snippet></ROW><ROW><id>16343158</id><snippet>&gt;&gt;&gt; type(input())
0
&lt;type 'int'&gt;
&gt;&gt;&gt; type(raw_input())
0
&lt;type 'str'&gt;
</snippet></ROW><ROW><id>16343158</id><snippet>&gt;&gt;&gt; type(input())
0
&lt;class 'str'&gt;
</snippet></ROW><ROW><id>16343296</id><snippet>this</snippet></ROW><ROW><id>16343296</id><snippet>zen of python</snippet></ROW><ROW><id>16343296</id><snippet>&gt;&gt;&gt; from this import *
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
.....
&gt;&gt;&gt; d
{'A': 'N', 'C': 'P', 'B': 'O', 'E': 'R', 'D': 'Q', 'G': 'T', 'F': 'S', 'I': 'V', 'H': 'U', 'K': 'X', 'J': 'W', 'M': 'Z', 'L': 'Y', 'O': 'B', 'N': 'A', 'Q': 'D', 'P': 'C', 'S': 'F', 'R': 'E', 'U': 'H', 'T': 'G', 'W': 'J', 'V': 'I', 'Y': 'L', 'X': 'K', 'Z': 'M', 'a': 'n', 'c': 'p', 'b': 'o', 'e': 'r', 'd': 'q', 'g': 't', 'f': 's', 'i': 'v', 'h': 'u', 'k': 'x', 'j': 'w', 'm': 'z', 'l': 'y', 'o': 'b', 'n': 'a', 'q': 'd', 'p': 'c', 's': 'f', 'r': 'e', 'u': 'h', 't': 'g', 'w': 'j', 'v': 'i', 'y': 'l', 'x': 'k', 'z': 'm'}
&gt;&gt;&gt; c
'!'
</snippet></ROW><ROW><id>16343296</id><snippet>from this import *</snippet></ROW><ROW><id>16343296</id><snippet>this</snippet></ROW><ROW><id>16343296</id><snippet>&gt;&gt;&gt; import this
&gt;&gt;&gt; dir(this)
['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'c', 'd', 'i', 's']
</snippet></ROW><ROW><id>16343296</id><snippet>import antigravity
</snippet></ROW><ROW><id>16343340</id><snippet>iterkeys</snippet></ROW><ROW><id>16343340</id><snippet>d[k] = v</snippet></ROW><ROW><id>16343340</id><snippet>def key_lower(d):
     newDict = OrderedDict()
    for k, v in d.iteritems():
        if (isinstance(k, (str, basestring))):
            k = k.lower()
        newDict[k] = v
    return newDict
</snippet></ROW><ROW><id>16343340</id><snippet>keys</snippet></ROW><ROW><id>16343340</id><snippet>iterkeys</snippet></ROW><ROW><id>16343469</id><snippet>sessionid</snippet></ROW><ROW><id>16343469</id><snippet>SESSION_COOKIE_NAME</snippet></ROW><ROW><id>16343791</id><snippet>dists[abs(dists - r - dr/2.) &lt;= dr/2.]
</snippet></ROW><ROW><id>16343791</id><snippet>dist</snippet></ROW><ROW><id>16343791</id><snippet>dr</snippet></ROW><ROW><id>16343791</id><snippet>r</snippet></ROW><ROW><id>16343791</id><snippet>r</snippet></ROW><ROW><id>16343791</id><snippet>r = r + dr/2.</snippet></ROW><ROW><id>16343791</id><snippet>where</snippet></ROW><ROW><id>16343791</id><snippet>dists</snippet></ROW><ROW><id>16343791</id><snippet>dists[(dists &gt;= r) &amp; (dists &lt;= r+dr)]
</snippet></ROW><ROW><id>16343791</id><snippet>&amp;</snippet></ROW><ROW><id>16343791</id><snippet>and</snippet></ROW><ROW><id>16343791</id><snippet>where</snippet></ROW><ROW><id>16343791</id><snippet> dists[(np.where((dists &gt;= r) &amp; (dists &lt;= r + dr)))]
</snippet></ROW><ROW><id>16343791</id><snippet>np.where</snippet></ROW><ROW><id>16343791</id><snippet>and</snippet></ROW><ROW><id>16343791</id><snippet>True</snippet></ROW><ROW><id>16343791</id><snippet>False</snippet></ROW><ROW><id>16343791</id><snippet>a</snippet></ROW><ROW><id>16343791</id><snippet>b</snippet></ROW><ROW><id>16343791</id><snippet>True</snippet></ROW><ROW><id>16343791</id><snippet>a and b</snippet></ROW><ROW><id>16343791</id><snippet>b</snippet></ROW><ROW><id>16343791</id><snippet>[0,1,2] and [2,3,4]</snippet></ROW><ROW><id>16343791</id><snippet>[2,3,4]</snippet></ROW><ROW><id>16343791</id><snippet>In [230]: dists = np.arange(0,10,.5)
In [231]: r = 5
In [232]: dr = 1

In [233]: np.where(dists &gt;= r)
Out[233]: (array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),)

In [234]: np.where(dists &lt;= r+dr)
Out[234]: (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]),)

In [235]: np.where(dists &gt;= r) and np.where(dists &lt;= r+dr)
Out[235]: (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]),)
</snippet></ROW><ROW><id>16343791</id><snippet>In [236]: dists &gt;= r
Out[236]: 
array([False, False, False, False, False, False, False, False, False,
       False,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True], dtype=bool)

In [237]: dists &lt;= r + dr
Out[237]: 
array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True, False, False, False, False, False,
       False, False], dtype=bool)

In [238]: (dists &gt;= r) &amp; (dists &lt;= r + dr)
Out[238]: 
array([False, False, False, False, False, False, False, False, False,
       False,  True,  True,  True, False, False, False, False, False,
       False, False], dtype=bool)
</snippet></ROW><ROW><id>16343791</id><snippet>np.where</snippet></ROW><ROW><id>16343791</id><snippet>In [239]: np.where((dists &gt;= r) &amp; (dists &lt;= r + dr))
Out[239]: (array([10, 11, 12]),)

In [240]: dists[np.where((dists &gt;= r) &amp; (dists &lt;= r + dr))]
Out[240]: array([ 5. ,  5.5,  6. ])
</snippet></ROW><ROW><id>16343791</id><snippet>In [241]: dists[(dists &gt;= r) &amp; (dists &lt;= r + dr)]
Out[241]: array([ 5. ,  5.5,  6. ])
</snippet></ROW><ROW><id>16343944</id><snippet>functools.partial()</snippet></ROW><ROW><id>16343944</id><snippet>from functools import partial

action = {'action': partial(move, 2, 3), 'other_stuff': 'stuff'}
</snippet></ROW><ROW><id>16343944</id><snippet>action['action']()</snippet></ROW><ROW><id>16343944</id><snippet>move(2, 3)</snippet></ROW><ROW><id>16344030</id><snippet>function traverseTree(node) {
    if(node == NULL) return;
    traverseTree(node-&gt;leftSubTree);
    traverseTree(node-&gt;rightSubTree);
}
</snippet></ROW><ROW><id>16344030</id><snippet>arrayOfPaths;
function traverseTree(node) {
    if(node == NULL) return emptyPathObject;

    leftPathObject = traverseTree(node-&gt;leftSubTree);
    rightPathObject = traverseTree(node-&gt;rightSubTree);
    arrayOfPaths.add(leftPathObject + node + rightPathObject);
    return ((node + leftPathObject) or (node + rightPathObject) whichever is longer);
}

//Code to figure out which paths are the longest here.  This is simpler than the other one too! :)
</snippet></ROW><ROW><id>16344052</id><snippet>resample</snippet></ROW><ROW><id>16344052</id><snippet>group</snippet></ROW><ROW><id>16344052</id><snippet>data.resample('D', how='count')
</snippet></ROW><ROW><id>16344055</id><snippet>lis[0]</snippet></ROW><ROW><id>16344055</id><snippet>lis=[((0.0, 0.0), (0.00249999994412065, -509.707885742188), (0.00499999988824129, -1017.52648925781), (0.0087500000372529, -1778.51281738281), (0.0143750002607703, -2918.21899414063), (0.0228125005960464, -4609.91650390625), (0.0328124985098839, -6560.962890625), (0.0428125001490116, -8467.638671875), (0.0528125017881393, -10321.19140625), (0.0628124997019768, -12137.498046875), (0.0728124976158142, -13877.9580078125), (0.0828125029802322, -15571.837890625), (0.0928125008940697, -17186.35546875), (0.102812498807907, -18728.310546875), (0.112812496721745, -20191.1640625), (0.122812502086163, -21548.513671875), (0.1328125, -22796.673828125), (0.142812505364418, -23935.923828125), (0.152812495827675, -24970.046875), (0.162812501192093, -25903.265625), (0.172812506556511, -26744.365234375), (0.182812497019768, -27502.3125), (0.192812502384186, -28186.765625), (0.202812492847443, -28805.953125), (0.212812498211861, -29367.408203125), (0.222812503576279, -29877.845703125), (0.232812494039536, -30343.181640625), (0.242812499403954, -30768.73046875), (0.252812504768372, -31159.8515625), (0.262812495231628, -31519.955078125), (0.272812485694885, -31852.59765625), (0.282812505960464, -32160.71875), (0.292812496423721, -32446.474609375), (0.302812486886978, -32712.138671875), (0.312812507152557, -32959.703125), (0.322812497615814, -33190.91015625), (0.332812488079071, -33407.29296875), (0.34281250834465, -33610.2109375), (0.352812498807907, -33800.859375), (0.362812489271164, -33980.30078125), (0.372812509536743, -34149.484375), (0.3828125, -34309.25390625), (0.392812490463257, -34460.3671875), (0.402812510728836, -34603.5), (0.412812501192093, -34739.26171875), (0.42281249165535, -34868.20703125), (0.432812511920929, -34990.828125), (0.442812502384186, -35107.5703125), (0.452812492847443, -35218.8515625), (0.462812513113022, -35325.04296875), (0.472812503576279, -35426.48828125), (0.482812494039536, -35523.48828125), (0.492812514305115, -35616.33203125), (0.502812504768372, -35705.28515625), (0.512812495231628, -35790.578125), (0.522812485694885, -35872.4375), (0.532812476158142, -35951.0625), (0.542812526226044, -36026.640625), (0.552812516689301, -36099.3515625), (0.562812507152557, -36169.34765625), (0.572812497615814, -36236.77734375), (0.582812488079071, -36301.78515625), (0.592812478542328, -36364.49609375), (0.602812528610229, -36425.02734375), (0.612812519073486, -36483.4921875), (0.622812509536743, -36539.9921875), (0.6328125, -36594.62890625), (0.642812490463257, -36647.4921875), (0.652812480926514, -36698.6640625), (0.662812471389771, -36748.22265625), (0.672812521457672, -36796.25), (0.682812511920929, -36842.8125), (0.692812502384186, -36887.97265625), (0.702812492847443, -36931.796875), (0.712812483310699, -36974.33984375), (0.722812473773956, -37015.66015625), (0.732812523841858, -37055.8125), (0.742812514305115, -37094.83984375), (0.752812504768372, -37132.7890625), (0.762812495231628, -37169.70703125), (0.772812485694885, -37205.6328125), (0.782812476158142, -37240.609375), (0.792812526226044, -37274.671875), (0.802812516689301, -37307.85546875), (0.812812507152557, -37340.19140625), (0.822812497615814, -37371.71875), (0.832812488079071, -37402.45703125), (0.842812478542328, -37432.4453125), (0.852812528610229, -37461.703125), (0.862812519073486, -37490.26171875), (0.872812509536743, -37518.14453125), (0.8828125, -37545.375), (0.892812490463257, -37571.98046875), (0.902812480926514, -37597.97265625), (0.912812471389771, -37623.37890625), (0.922812521457672, -37648.21875), (0.932812511920929, -37672.51171875), (0.942812502384186, -37696.26953125), (0.952812492847443, -37719.515625), (0.962812483310699, -37742.26171875), (0.972812473773956, -37764.53125), (0.982812523841858, -37786.33203125), (0.992812514305115, -37807.6796875), (1.00281250476837, -37828.58984375), (1.01281249523163, -37849.078125), (1.02281248569489, -37869.15625), (1.03281247615814, -37888.83203125), (1.0428124666214, -37908.12109375), (1.05281245708466, -37927.03515625), (1.06281244754791, -37945.58203125), (1.07281255722046, -37963.7734375), (1.08281254768372, -37981.62109375), (1.09281253814697, -37999.1328125), (1.10281252861023, -38016.3203125), (1.11281251907349, -38033.1875), (1.12281250953674, -38049.75), (1.1328125, -38081.30859375), (1.14281249046326, -38117.46484375), (1.15281248092651, -38152.9765625), (1.16281247138977, -38205.91015625), (1.17281246185303, -38262.1171875), (1.18281245231628, -38317.31640625), (1.19281244277954, -38371.5546875), (1.20281255245209, -38438.77734375), (1.21281254291534, -38511.60546875), (1.2228125333786, -38595.37109375), (1.23281252384186, -38688.0703125), (1.24281251430511, -38779.234375), (1.25281250476837, -38868.90625), (1.26281249523163, -38957.11328125), (1.27281248569489, -39043.90234375), (1.28281247615814, -39129.30078125), (1.2928124666214, -39213.34375), (1.30281245708466, -39296.0625), (1.31281244754791, -39377.48828125), (1.32281255722046, -39457.6484375), (1.33281254768372, -39536.578125), (1.34281253814697, -39614.30078125), (1.35281252861023, -39690.84375), (1.36281251907349, -39766.23828125), (1.37281250953674, -39840.5078125), (1.3828125, -39913.67578125), (1.39281249046326, -39985.765625), (1.40281248092651, -40056.8046875), (1.41281247138977, -40126.8125), (1.42281246185303, -40195.81640625), (1.43281245231628, -40263.828125), (1.44281244277954, -40330.87890625), (1.45281255245209, -40396.98046875), (1.46281254291534, -40462.16015625), (1.4728125333786, -40526.43359375), (1.48281252384186, -40589.8203125), (1.49281251430511, -40652.3359375), (1.50281250476837, -40714.00390625), (1.51281249523163, -40774.83203125), (1.52281248569489, -40835.77734375), (1.53281247615814, -40903.80078125), (1.5428124666214, -40970.921875), (1.55281245708466, -41037.16015625), (1.56281244754791, -41104.97265625), (1.57281255722046, -41179.66796875), (1.58281254768372, -41268.05859375), (1.59281253814697, -41356.78515625), (1.60281252861023, -41444.3828125), (1.61281251907349, -41530.87890625), (1.62281250953674, -41623.875), (1.6328125, -41731.9765625), (1.64281249046326, -41841.390625), (1.65281248092651, -41949.47265625), (1.66281247138977, -42056.23828125), (1.67281246185303, -42161.71875), (1.68281245231628, -42265.93359375), (1.69281244277954, -42368.90234375), (1.70281255245209, -42473.17578125), (1.71281254291534, -42581.99609375), (1.7228125333786, -42689.55078125), (1.73281252384186, -42800.32421875), (1.74281251430511, -42912.33984375), (1.75281250476837, -43023.0546875), (1.76281249523163, -43132.5), (1.77281248569489, -43242.2890625), (1.78281247615814, -43356.40625), (1.7928124666214, -43469.234375), (1.80281245708466, -43580.78515625), (1.81281244754791, -43691.0625), (1.82281255722046, -43800.109375), (1.83281254768372, -43907.953125), (1.84281253814697, -44014.60546875), (1.85281252861023, -44120.09375), (1.86281251907349, -44224.4296875), (1.87281250953674, -44327.640625), (1.8828125, -44432.32421875), (1.89281249046326, -44538.984375), (1.90281248092651, -44646.5625), (1.90531253814697, -44674.09375), (1.90625, -44689.54296875), (1.90660154819489, -44698.22265625), (1.90673339366913, -44703.1015625), (1.90674579143524, -44703.35546875), (1.90676426887512, -44703.7421875), (1.90679216384888, -44704.3203125), (1.90683376789093, -44705.1875), (1.90689635276794, -44706.76171875))]
with open("abc","w") as f:
    for line in lis[0]:
        strs=" ".join(str(x) for x in line)
        f.write(strs+"\n")
</snippet></ROW><ROW><id>16344055</id><snippet>0.0 0.0
0.00249999994412 -509.707885742
0.00499999988824 -1017.52648926
0.00875000003725 -1778.51281738
0.0143750002608 -2918.21899414
.....
</snippet></ROW><ROW><id>16344263</id><snippet>__getitem__</snippet></ROW><ROW><id>16344263</id><snippet>class Foo(object):
    def __getitem__(self,items):
        print items

f = Foo()
f[1,2,3]
f[1:3]
f[1,1:3,2:3]
</snippet></ROW><ROW><id>16344263</id><snippet>1
(1, 2, 3)
slice(1, 3, None)
(1, slice(1, 3, None), slice(2, 3, None))
</snippet></ROW><ROW><id>16344321</id><snippet>[t[:-1] + (100,) for t in a]
</snippet></ROW><ROW><id>16344431</id><snippet>palindromes = [x for x in xrange(min, max) if isPalindrome(x)]
</snippet></ROW><ROW><id>16344431</id><snippet>1</snippet></ROW><ROW><id>16344431</id><snippet>111
212
313
...
</snippet></ROW><ROW><id>16344475</id><snippet>while True:
    r = raw_input('choose ')
    try:
        c = int(r)
    except ValueError:
            print 'Not valid.\n'
    else:
        break
        #This will be executed only if no exception is raised

print c
</snippet></ROW><ROW><id>16344475</id><snippet>else: break</snippet></ROW><ROW><id>16344475</id><snippet>else:break</snippet></ROW><ROW><id>16344475</id><snippet>'else:break'</snippet></ROW><ROW><id>16344643</id><snippet>virtualenv newve</snippet></ROW><ROW><id>16344643</id><snippet>source newve/bin/activate</snippet></ROW><ROW><id>16344643</id><snippet>python-setuptools</snippet></ROW><ROW><id>16344840</id><snippet>str.format()</snippet></ROW><ROW><id>16344840</id><snippet>title0 = '{:#^{width}}'.format(' USA ', width=19)
title1 = '{:#^{width}}'.format(' Canada ', width=19)
</snippet></ROW><ROW><id>16344851</id><snippet>app.run(debug=True)
</snippet></ROW><ROW><id>16344973</id><snippet>import urllib2
request = urllib2.Request(
    r'http://books.google.de/books?id=gikDAAAAMBAJ&amp;pg=PA1&amp;img=1&amp;w=2500',
    headers={'User-Agent':'Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 firefox/2.0.0.11'})
page = urllib2.urlopen(request)

with open('somefile.png','wb') as f:
    f.write(page.read())
</snippet></ROW><ROW><id>16345116</id><snippet>No contacts found</snippet></ROW><ROW><id>16345116</id><snippet>else</snippet></ROW><ROW><id>16345116</id><snippet>for</snippet></ROW><ROW><id>16345116</id><snippet>for line in Myfile:
    if ',' + str(surname) + ',' in line:
        print(line)
        break
else:
    print('No contacts found')
</snippet></ROW><ROW><id>16345116</id><snippet>else</snippet></ROW><ROW><id>16345116</id><snippet>for</snippet></ROW><ROW><id>16345116</id><snippet>if line.startswith(surname + ','):
</snippet></ROW><ROW><id>16345116</id><snippet>csv</snippet></ROW><ROW><id>16345116</id><snippet>import csv

with open('Address book.csv', newline='') as myfile:
    reader = csv.reader(myfile)
    for row in reader:
        if row[0] == surname:
            print(row)
            break
    else:
         print('No contacts found')
</snippet></ROW><ROW><id>16345629</id><snippet>t, c, k = scipys_spline_representation
# Compute the denominator in the differentiation formula.
dt = t[k+1:-1] - t[1:-k-1]
# Compute the new coefficients
d = (c[1:-1-k] - c[:-2-k]) * k / dt
# Adjust knots
t2 = t[1:-1]
# Pad coefficient array to same size as knots (FITPACK convention)
d = np.r_[d, [0]*k]
# Done, a new spline
new_spline_repr = t2, d, k-1
</snippet></ROW><ROW><id>16345735</id><snippet>import pandas as pd
import numpy as np

df = pd.DataFrame({'id': [1,1,2,2,1,2,1,1], 'x':[10,20,100,200,np.nan,np.nan,300,np.nan]})
df['x'] = df.groupby(['id'])['x'].transform(lambda grp: grp.fillna(method='ffill'))
print(df)
</snippet></ROW><ROW><id>16345735</id><snippet>   id    x
0   1   10
1   1   20
2   2  100
3   2  200
4   1   20
5   2  200
6   1  300
7   1  300
</snippet></ROW><ROW><id>16346002</id><snippet>def test(filename):
    dictionary = {0:1000, 1:20, 2:15, 3:0, 4:5}
    xmax = max(dictionary.keys())
    ymax = max(dictionary.values())
    plt.figure() # &lt;- makes a new figure and sets it active (add this)
    plt.hist(dictionary,xmax) # &lt;- finds the current active axes/figure and plots to it
    plt.title('Histogram Title') 
    plt.xlabel('Label')
    plt.ylabel('Another Label')
    plt.axis([0, xmax, 0, ymax])
    # plt.figure() # &lt;- makes new figure and makes it active (remove this)
    plt.savefig(filename) # &lt;- saves the currently active figure (which is empty in your code)

test('test_graph.svg')
</snippet></ROW><ROW><id>16346132</id><snippet>(?&lt;=\s)\w{3}(?=\s)
</snippet></ROW><ROW><id>16346132</id><snippet>\w</snippet></ROW><ROW><id>16346132</id><snippet>\S</snippet></ROW><ROW><id>16346132</id><snippet>(?&lt;=\s)\S{3}(?=\s)
</snippet></ROW><ROW><id>16346248</id><snippet>json</snippet></ROW><ROW><id>16346248</id><snippet>&gt;&gt;&gt; json_str= '{"sUrlRedirect":"http://dez.loc/registration","sMsgTitle":null,"sMsg":"\u041f\u043e\u0437\u0434\u0440\u0430\u0432\u043b\u044f\u0435\u043c! \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0448\u043b\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e","bStateError":false}'
&gt;&gt;&gt; import json
&gt;&gt;&gt; the_dict = json.loads(json_str)
&gt;&gt;&gt; the_dict
{u'sMsgTitle': None, u'bStateError': False, u'sMsg': u'\u041f\u043e\u0437\u0434\u0440\u0430\u0432\u043b\u044f\u0435\u043c! \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0448\u043b\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e', u'sUrlRedirect': u'http://dez.loc/registration'}

&gt;&gt;&gt; print the_dict['sMsg']
Поздравляем! Регистрация прошла успешно
</snippet></ROW><ROW><id>16346377</id><snippet>a</snippet></ROW><ROW><id>16346377</id><snippet>list</snippet></ROW><ROW><id>16346377</id><snippet>ndarray</snippet></ROW><ROW><id>16346377</id><snippet>&gt;&gt;&gt; a = [1,2,7]
&gt;&gt;&gt; np.piecewise(a, [a == 1, a &gt; 1, a &gt; 4], [lambda x: 100*x, lambda x: x**2, lambda x: x])
Traceback (most recent call last):
  File "&lt;ipython-input-18-03e300b14962&gt;", line 1, in &lt;module&gt;
    np.piecewise(a, [a == 1, a &gt; 1, a &gt; 4], [lambda x: 100*x, lambda x: x**2, lambda x: x])
  File "/usr/local/lib/python2.7/dist-packages/numpy/lib/function_base.py", line 693, in piecewise
    "function list and condition list must be the same")
ValueError: function list and condition list must be the same

&gt;&gt;&gt; a = np.array(a)
&gt;&gt;&gt; np.piecewise(a, [a == 1, a &gt; 1, a &gt; 4], [lambda x: 100*x, lambda x: x**2, lambda x: x])
array([100,   4,   7])
</snippet></ROW><ROW><id>16346377</id><snippet>a</snippet></ROW><ROW><id>16346377</id><snippet>&gt;&gt;&gt; a = [1,2,7]
&gt;&gt;&gt; [a == 1, a &gt; 1, a &gt; 4]
[False, True, True]
</snippet></ROW><ROW><id>16346377</id><snippet>np.piecewise</snippet></ROW><ROW><id>16346377</id><snippet>if isscalar(condlist) or \
       not (isinstance(condlist[0], list) or
            isinstance(condlist[0], ndarray)):
    condlist = [condlist]
condlist = [asarray(c, dtype=bool) for c in condlist]
</snippet></ROW><ROW><id>16346377</id><snippet>[array([False,  True,  True], dtype=bool)]
</snippet></ROW><ROW><id>16346393</id><snippet>itertools.chain</snippet></ROW><ROW><id>16346393</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; a = [5, 8, 9]
&gt;&gt;&gt; b = [6, 1, 0]
&gt;&gt;&gt; it=chain(a,b)
&gt;&gt;&gt; for x in it:
    print x,
...     
5 8 9 6 1 0
</snippet></ROW><ROW><id>16346447</id><snippet>mainlist = [line.strip() for line in f if "New changes" not in line]
</snippet></ROW><ROW><id>16346733</id><snippet>everything = []
for row in data:
    everything.append[row]
</snippet></ROW><ROW><id>16346733</id><snippet>def TitleSearch():
    titleSearch = input("Please type in Title, \n")
    for row in everything:
        title = row[2]
        if title.find(titleSearch) != -1:
            print row
</snippet></ROW><ROW><id>16346733</id><snippet>find()</snippet></ROW><ROW><id>16346733</id><snippet>titleSearch</snippet></ROW><ROW><id>16346766</id><snippet>&gt;&gt; my_list = ['abc','def','ghi','jkl','def']
&gt;&gt;&gt; 'def' in my_list[:-1]
True

&gt;&gt;&gt; my_list2 = ['abc','ghi','jkl','def']
&gt;&gt;&gt; 'def' in my_list2[:-1]
False
</snippet></ROW><ROW><id>16346832</id><snippet>print("test")</snippet></ROW><ROW><id>16346832</id><snippet>print "Text"</snippet></ROW><ROW><id>16346832</id><snippet>print("test")</snippet></ROW><ROW><id>16346832</id><snippet>print(numberToName(2))
print(numberToName(3))
print(numberToName(1))
print(numberToName(1))
</snippet></ROW><ROW><id>16346975</id><snippet>__init__</snippet></ROW><ROW><id>16346975</id><snippet>__init__</snippet></ROW><ROW><id>16346975</id><snippet>__init__</snippet></ROW><ROW><id>16346975</id><snippet>def main():
    items = make_list()
    mycr = cash_register.CashRegister()
    # at this point, mycr.show_items() should return [] and mycr.get_total() should return 0
    choice = 0
    while choice != QUIT:
        choice = get_menu_choice()
        if choice == SHOW:
            mycr.show_items()
        elif choice == PURCHASE:
            item, quantity = get_purchase(items)
            if item and quantity:
                item.set_inventory(max(0, item.get_inventory() - quantity))
                mycr.purchase_item(item, quantity)
        elif choice == TOTAL:
            print(mycr.get_total())
        elif choice == EMPTY:
            mycr.clear()

def get_purchase(items):
    desc = input('Enter the item you wish to purchase: ')
    if desc in items:        
        amount=int(input('How many would you like to buy: '))
        return items[desc], amount
    else:
        return None, 0
</snippet></ROW><ROW><id>16347110</id><snippet>with open('filename', 'w', encoding='utf-8') as f:
    print(r['body'], file=f)
</snippet></ROW><ROW><id>16347216</id><snippet>scores = np.random.rand(9)
row_starts = np.array([0, 3, 5])
row_ends = np.concatenate((row_starts, [len(scores)]))
lens = np.diff(row_ends)
pad_len = np.max(lens) - lens
where_to_pad = np.repeat(row_ends[1:], pad_len)
padding_value = -1.0
padded_scores = np.insert(scores, where_to_pad,
                          padding_value).reshape(-1, np.max(lens))

&gt;&gt;&gt; padded_scores
array([[ 0.05878244,  0.40804443,  0.35640463, -1.        ],
       [ 0.39365072,  0.85313545, -1.        , -1.        ],
       [ 0.133687  ,  0.73651147,  0.98531828,  0.78940163]])
</snippet></ROW><ROW><id>16347433</id><snippet>raw_input</snippet></ROW><ROW><id>16347433</id><snippet>plainNum = raw_input("enter a number to encode ") 
</snippet></ROW><ROW><id>16347433</id><snippet>input()</snippet></ROW><ROW><id>16347433</id><snippet>5</snippet></ROW><ROW><id>16347433</id><snippet>'some text'</snippet></ROW><ROW><id>16347433</id><snippet>raw_input()</snippet></ROW><ROW><id>16347483</id><snippet>Article.objects.filter(owner=user)
</snippet></ROW><ROW><id>16347483</id><snippet>Article.objects.filter(group__user=user)
</snippet></ROW><ROW><id>16347483</id><snippet>Q</snippet></ROW><ROW><id>16347483</id><snippet>Article.objects.filter(Q(owner=user)|Q(group__user=user))
</snippet></ROW><ROW><id>16347653</id><snippet>itertools.product()</snippet></ROW><ROW><id>16347653</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; map(''.join, itertools.product('ABC', repeat=3))
['AAA', 'AAB', 'AAC', 'ABA', 'ABB', 'ABC', 'ACA', 'ACB', 'ACC', 'BAA', 'BAB', 'BAC', 'BBA', 'BBB', 'BBC', 'BCA', 'BCB', 'BCC', 'CAA', 'CAB', 'CAC', 'CBA', 'CBB', 'CBC', 'CCA', 'CCB', 'CCC']
</snippet></ROW><ROW><id>16347653</id><snippet>for string in itertools.imap(''.join, itertools.product('ABC', repeat=3)):
    print string
</snippet></ROW><ROW><id>16347653</id><snippet>string.uppercase + string.lowercase + string.digits</snippet></ROW><ROW><id>16347713</id><snippet>=</snippet></ROW><ROW><id>16347713</id><snippet>if responseCount == 0:
    # Do stuff
</snippet></ROW><ROW><id>16347733</id><snippet>&gt;&gt;&gt; n = 3
&gt;&gt;&gt; board = [["BW"[(i+j+n%2+1) % 2] for i in range(n)] for j in range(n)]
&gt;&gt;&gt; print board
[['B', 'W', 'B'], ['W', 'B', 'W'], ['B', 'W', 'B']]
&gt;&gt;&gt; n = 4
&gt;&gt;&gt; board = [["BW"[(i+j+n%2+1) % 2] for i in range(n)] for j in range(n)]
&gt;&gt;&gt; print board
[['W', 'B', 'W', 'B'], ['B', 'W', 'B', 'W'], ['W', 'B', 'W', 'B'], ['B', 'W', 'B', 'W']]
</snippet></ROW><ROW><id>16347911</id><snippet>my_list = ["Value1", "Value2"]
json = simplejson.dumps(my_list)
# send json
</snippet></ROW><ROW><id>16348179</id><snippet>import sys
sys.setrecursionlimit(10000)
</snippet></ROW><ROW><id>16348217</id><snippet>_single_leading_underscore</snippet></ROW><ROW><id>16348217</id><snippet>from M import *</snippet></ROW><ROW><id>16348229</id><snippet>Tk</snippet></ROW><ROW><id>16348229</id><snippet>Toplevel</snippet></ROW><ROW><id>16348229</id><snippet>Tk</snippet></ROW><ROW><id>16348229</id><snippet>mainloop</snippet></ROW><ROW><id>16348229</id><snippet>import tkinter.simpledialog as tkSimpleDialog # python 3.x
...
def newBook():
    BookTitle = tkSimpleDialog.askstring("Add Book","What is the name of the book?")
    if BookTitle is not None:
        bookTitle = '\n' + BookTitle
        books = open('/tmp/books.txt', 'a')
        books.write(bookTitle)
        books.close()
</snippet></ROW><ROW><id>16348323</id><snippet>if db == "mysql": # or whatever your real logic is
    import mysql_db as db_util
elif db == "postgres":
    import postgres_db as db_util

import some_helper_module

some_helper_module.db_util = db_util # explicitly add to another namespace

#...
</snippet></ROW><ROW><id>16348323</id><snippet>import some_helper_module

db = some_helper_module.db_util.connect() # or whatever the real API is

#...
</snippet></ROW><ROW><id>16348323</id><snippet>__name__</snippet></ROW><ROW><id>16348323</id><snippet>__name__</snippet></ROW><ROW><id>16348323</id><snippet>"__main__"</snippet></ROW><ROW><id>16348323</id><snippet>main</snippet></ROW><ROW><id>16348348</id><snippet>numpy.array</snippet></ROW><ROW><id>16348348</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>16348348</id><snippet>d = collections.defaultdict(list)
with open('bigdata.txt', 'r') as datafile:
    for line in datafile:
        id = hashlib.sha256(line).digest()
        # Or id = line[:n]
        k = id[0:2]
        v = id[2:]
        if v in d[k]:
            print "double found:", id
        else:
            d[k].append(v)
</snippet></ROW><ROW><id>16348442</id><snippet>import glob
for xml in glob.glob('*.xml'):
    with open(xml) as f:
        for line in f:
            line = line.strip()
            if line.startswith('&lt;value&gt;'):
                # ISBN number is between the &lt;value&gt;...&lt;/value&gt; tags.
                print line[7:-8]
</snippet></ROW><ROW><id>16348510</id><snippet>"</snippet></ROW><ROW><id>16348510</id><snippet>"</snippet></ROW><ROW><id>16348510</id><snippet>\"</snippet></ROW><ROW><id>16348510</id><snippet>'</snippet></ROW><ROW><id>16348510</id><snippet>process = subprocess.Popen(["ssh $USER@mychefserver knife search node \"chef_environment:*\" | grep -i 'node name' | egrep -i 'stuff|ruff' | uniq -u | sort -n | cut -d':' -f 2 | sed -e 's/^[ \t]*//' | tr '\n' ', '"], shell=False, stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>16348626</id><snippet>if session.query(exists().where(SourcetoPort.src_address == str(packet.dst))).scalar() is not None:
</snippet></ROW><ROW><id>16348626</id><snippet>scalar()</snippet></ROW><ROW><id>16348626</id><snippet>None</snippet></ROW><ROW><id>16348626</id><snippet>SELECT EXISTS (SELECT * FROM source_to_port WHERE source_to_port.src_address=?)</snippet></ROW><ROW><id>16348626</id><snippet>True</snippet></ROW><ROW><id>16348626</id><snippet>False</snippet></ROW><ROW><id>16348626</id><snippet>None</snippet></ROW><ROW><id>16348626</id><snippet>first()</snippet></ROW><ROW><id>16348626</id><snippet>None</snippet></ROW><ROW><id>16348626</id><snippet>q_res</snippet></ROW><ROW><id>16348626</id><snippet>None</snippet></ROW><ROW><id>16348626</id><snippet>q_res</snippet></ROW><ROW><id>16348626</id><snippet>None</snippet></ROW><ROW><id>16348626</id><snippet>q_res.port_no</snippet></ROW><ROW><id>16348626</id><snippet>one()</snippet></ROW><ROW><id>16348626</id><snippet>filter_by()</snippet></ROW><ROW><id>16348626</id><snippet>first()</snippet></ROW><ROW><id>16348626</id><snippet>one()</snippet></ROW><ROW><id>16348626</id><snippet>first()</snippet></ROW><ROW><id>16348626</id><snippet>q_res</snippet></ROW><ROW><id>16348626</id><snippet>None</snippet></ROW><ROW><id>16348626</id><snippet>q_res = session.query(SourcetoPort).filter_by(src_address=str(packet.dst)).first()
if q_res is not None:
    print "got info from the database"
    self.send_packet(....)
    ...
else:
    print "flooding the first packet"
    ...
</snippet></ROW><ROW><id>16348626</id><snippet>one()</snippet></ROW><ROW><id>16348626</id><snippet>from sqlalchemy.orm.exc import (NoResultFound, MultipleResultsFound)

try:
    q_res = session.query(SourcetoPort).filter_by(src_address=str(packet.dst)).one()
except NoResultFound:
    print "flooding the first packet"
    ...
# except MultipleResultsFound:
#     print "More than one result found! WUT?!"
else:
    print "got info from the database"
    ...
</snippet></ROW><ROW><id>16348626</id><snippet>one()</snippet></ROW><ROW><id>16348626</id><snippet>first()</snippet></ROW><ROW><id>16348696</id><snippet>$</snippet></ROW><ROW><id>16348696</id><snippet>abcd123456efg789</snippet></ROW><ROW><id>16348696</id><snippet>123456</snippet></ROW><ROW><id>16348696</id><snippet>r"[0-9]{4,7}(?![0-9])"
            ^^^^^^^^^
</snippet></ROW><ROW><id>16348696</id><snippet>\d</snippet></ROW><ROW><id>16348696</id><snippet>r"\d{4,7}(?!\d)"
</snippet></ROW><ROW><id>16348696</id><snippet>abcd123efg123456789</snippet></ROW><ROW><id>16348696</id><snippet>3456789</snippet></ROW><ROW><id>16348696</id><snippet>r"(?&lt;!\d)\d{4,7}(?!\d)"
</snippet></ROW><ROW><id>16348773</id><snippet>def make_key(my_tuple):
    return my_tuple[1], -my_tuple[0]
</snippet></ROW><ROW><id>16348773</id><snippet>-</snippet></ROW><ROW><id>16348773</id><snippet>reverse</snippet></ROW><ROW><id>16348773</id><snippet>def make_key(my_tuple):
    return -my_tuple[1], my_tuple[0]

sorted_list_of_tuples = sorted(list_of_tuples, key=make_key, reverse=True)
</snippet></ROW><ROW><id>16348773</id><snippet>sorted_list_of_tuples = sorted(list_of_tuples,
                               key=lambda x: (x[1], x[0]), reverse=True)
</snippet></ROW><ROW><id>16348773</id><snippet>ord(x) &lt; ord(y)</snippet></ROW><ROW><id>16348773</id><snippet>x &lt; y</snippet></ROW><ROW><id>16348773</id><snippet>def compare_my_tuples(lhs, rhs):        
    if rhs[1] &gt; lhs[0]: return 1
    elif rhs[1] &lt; lhs[0]: return -1
    elif rhs[0] &gt; lhs[0]: return -1
    elif rhs[0] &lt; rhs[0]: return 1
    else: return 0

sorted_list_of_tuples = sorted(list_of_tuples, 
                               key=functools.cmp_to_key(compare_my_tuples))
</snippet></ROW><ROW><id>16348842</id><snippet>Map.entrySet()</snippet></ROW><ROW><id>16348842</id><snippet>for(Map.Entry&lt;K, V&gt; j : x.entrySet()) {
    V val = j.getValue(); // j[1]
    K key = j.getKey();   // j[0]
}
</snippet></ROW><ROW><id>16349181</id><snippet>mydict[item]</snippet></ROW><ROW><id>16349181</id><snippet>mydict = {}
for item, otherstuff, value in mylist:
    mydict.setdefault(item, []).append(value)
</snippet></ROW><ROW><id>16349181</id><snippet>{'item1': ['value1', 'value2'], 'item2': ['value3', 'value4']}
</snippet></ROW><ROW><id>16349181</id><snippet>groupedlist = [[k] + v for k, v in mydict.items()]
</snippet></ROW><ROW><id>16349181</id><snippet>[['item2', 'value3', 'value4'], ['item1', 'value1', 'value2']]
</snippet></ROW><ROW><id>16349181</id><snippet>item1</snippet></ROW><ROW><id>16349181</id><snippet>item2</snippet></ROW><ROW><id>16349181</id><snippet>item2</snippet></ROW><ROW><id>16349181</id><snippet>item1</snippet></ROW><ROW><id>16349181</id><snippet>OrderedDict</snippet></ROW><ROW><id>16349181</id><snippet>groupby(…sorted(…))</snippet></ROW><ROW><id>16349335</id><snippet>nindF = [index for index, line in enumerate(nodes) if line[0].find(nodeAID) &gt;= 0]
</snippet></ROW><ROW><id>16349335</id><snippet>nindF = [index for index, line in enumerate(nodes) if line[0].find(nodeAID) &gt;= 0][0]
</snippet></ROW><ROW><id>16349356</id><snippet>a</snippet></ROW><ROW><id>16349356</id><snippet>a</snippet></ROW><ROW><id>16349356</id><snippet>b</snippet></ROW><ROW><id>16349356</id><snippet>c</snippet></ROW><ROW><id>16349356</id><snippet>Notorious B.I.G.</snippet></ROW><ROW><id>16349356</id><snippet>Biggie Smalls</snippet></ROW><ROW><id>16349356</id><snippet>Chris Wallace</snippet></ROW><ROW><id>16349356</id><snippet>a</snippet></ROW><ROW><id>16349356</id><snippet>b</snippet></ROW><ROW><id>16349356</id><snippet>c</snippet></ROW><ROW><id>16349356</id><snippet>is</snippet></ROW><ROW><id>16349356</id><snippet>&gt;&gt;&gt; a=b=c=[0,3,5]
&gt;&gt;&gt; a is b
True
</snippet></ROW><ROW><id>16349356</id><snippet>d=e=f=3
e=4
print('f:',f)
print('e:',e)
</snippet></ROW><ROW><id>16349356</id><snippet>e</snippet></ROW><ROW><id>16349356</id><snippet>4</snippet></ROW><ROW><id>16349356</id><snippet>d</snippet></ROW><ROW><id>16349356</id><snippet>f</snippet></ROW><ROW><id>16349356</id><snippet>a[0]</snippet></ROW><ROW><id>16349356</id><snippet>a</snippet></ROW><ROW><id>16349356</id><snippet>a[0]</snippet></ROW><ROW><id>16349356</id><snippet>a[0]</snippet></ROW><ROW><id>16349356</id><snippet>a</snippet></ROW><ROW><id>16349356</id><snippet>id</snippet></ROW><ROW><id>16349356</id><snippet>is</snippet></ROW><ROW><id>16349356</id><snippet>&gt;&gt;&gt; a=b=c=[0,3,5]
&gt;&gt;&gt; id(a)
4473392520
&gt;&gt;&gt; id(b)
4473392520
&gt;&gt;&gt; id(a[0])
4297261120
&gt;&gt;&gt; id(b[0])
4297261120

&gt;&gt;&gt; a[0] = 1
&gt;&gt;&gt; id(a)
4473392520
&gt;&gt;&gt; id(b)
4473392520
&gt;&gt;&gt; id(a[0])
4297261216
&gt;&gt;&gt; id(b[0])
4297261216
</snippet></ROW><ROW><id>16349356</id><snippet>a[0]</snippet></ROW><ROW><id>16349356</id><snippet>b[0]</snippet></ROW><ROW><id>16349356</id><snippet>a</snippet></ROW><ROW><id>16349356</id><snippet>b</snippet></ROW><ROW><id>16349356</id><snippet>a[0]=1</snippet></ROW><ROW><id>16349356</id><snippet>a.__setitem__(0, 1)</snippet></ROW><ROW><id>16349356</id><snippet>my_object.set_something(1)</snippet></ROW><ROW><id>16349356</id><snippet>a[0]=1</snippet></ROW><ROW><id>16349423</id><snippet>queryset</snippet></ROW><ROW><id>16349423</id><snippet>def queryset(self, request):
    current = Cycle.objects.latest() # or whatever to get the current cycle
    qs = super(StudentEnrolmentsInline, self).queryset(request)
    return qs.filter(school_class__cycle=current)
</snippet></ROW><ROW><id>16349434</id><snippet>likes</snippet></ROW><ROW><id>16349434</id><snippet>request</snippet></ROW><ROW><id>16349511</id><snippet>k1</snippet></ROW><ROW><id>16349511</id><snippet>k2</snippet></ROW><ROW><id>16349511</id><snippet>k = g^T X g</snippet></ROW><ROW><id>16349511</id><snippet>g</snippet></ROW><ROW><id>16349511</id><snippet>k[i,j] = g.T[i,:] * X * g[:,j]</snippet></ROW><ROW><id>16349511</id><snippet>i1,j1</snippet></ROW><ROW><id>16349511</id><snippet>i2,j2</snippet></ROW><ROW><id>16349521</id><snippet>import sys
filename = open(os.path.join('folder','filename.txt'),'w')
sys.stdout = filename
</snippet></ROW><ROW><id>16349683</id><snippet>from time import sleep

import random

@celery.task
def power(value, expo):
    sleep(random.randint(10, 1000) / 1000.0) # sleep for 10-1000ms
    return value ** expo

@celery.task
def amass(results, tasks):
    completed_tasks = []
    for task in tasks:
        if task.ready():
            completed_tasks.append(task)
            results.append(task.get())

    # remove completed tasks
    tasks = list(set(tasks) - set(completed_tasks))

    if len(tasks) &gt; 0:
        # resend the task to execute at least 1 second from now
        amass.delay(results, tasks, countdown=1)
    else:
        # we done
        print results
</snippet></ROW><ROW><id>16349683</id><snippet>tasks = []

for i in xrange(10):
    tasks.append(power.delay(i, 2))

amass.delay([], tasks)
</snippet></ROW><ROW><id>16349683</id><snippet>amass</snippet></ROW><ROW><id>16349731</id><snippet>func()</snippet></ROW><ROW><id>16349731</id><snippet>def mycallback(w):
    for l in w:
        for key, value in l.items():
            ddict[key].update(value)
</snippet></ROW><ROW><id>16349731</id><snippet>key value1 value2 value3 ...
key2 valueA valueB valueC ...
...
</snippet></ROW><ROW><id>16349998</id><snippet>&gt;&gt;&gt; from Crypto.Cipher import DES3
&gt;&gt;&gt; from Crypto import Random
&gt;&gt;&gt; iv = Random.new().read(DES3.block_size)
&gt;&gt;&gt; key = Random.new().read(DES3.key_size[-1])
&gt;&gt;&gt; des3enc = DES3.new(key, DES3.MODE_CBC, iv)
&gt;&gt;&gt; des3dec = DES3.new(key, DES3.MODE_CBC, iv)
&gt;&gt;&gt; des3dec.decrypt(des3enc.encrypt('12345678abcdefgh12345678'))
</snippet></ROW><ROW><id>16350108</id><snippet>going = True
while going: 
    inp = raw_input("Message: ")
    for i in inp:
        a = morseDict[i] 
        morseStr =  a
        for c in morseStr:
            print c
            if c == '-':
                winsound.Beep(800, 500)
            elif c == '.':
                winsound.Beep(800, 100)
            else:
                time.sleep(0.4)  
            time.sleep(0.2)
    again = raw_input("would you like to send another message? (y)/(n) ")
    if again.lower() == "n":
         going = False
</snippet></ROW><ROW><id>16350108</id><snippet>" ": 'x'
</snippet></ROW><ROW><id>16350108</id><snippet>else</snippet></ROW><ROW><id>16350293</id><snippet>#This function should have a more descriptive name that follows your 
#project's API.
def should_keep(token):
    """returns True if the token should be kept"""
    #do other stuff here.  Possibly print stuff or whatever ...
    ...
</snippet></ROW><ROW><id>16350293</id><snippet>tokenList = [ token for token in tokenList if should_keep(token) ]
</snippet></ROW><ROW><id>16350293</id><snippet>tokenList[:] = [ token for token in tokenList if should_keep(token) ]
</snippet></ROW><ROW><id>16350441</id><snippet>os.path.splitext</snippet></ROW><ROW><id>16350441</id><snippet>glob.iglob</snippet></ROW><ROW><id>16350441</id><snippet>glob.iglob(pathname)
</snippet></ROW><ROW><id>16350441</id><snippet>os.path.splitext</snippet></ROW><ROW><id>16350441</id><snippet>os.walk</snippet></ROW><ROW><id>16350441</id><snippet>os.path.relpath</snippet></ROW><ROW><id>16350441</id><snippet>source_dir</snippet></ROW><ROW><id>16350441</id><snippet>dest_dir</snippet></ROW><ROW><id>16350441</id><snippet>import os, shutil, glob

source_dir = "F:\CS\PyA"
dest_dir = "F:\CS\PyB"

for root, dirnames, filenames in os.walk(source_dir):
    for file in filenames:
        (shortname, extension) = os.path.splitext(file)
        if extension == ".txt" :
            shutil.copy2(os.path.join(root,file), os.path.join(dest_dir,   
                         os.path.relpath(os.path.join(root,file),source_dir)))
</snippet></ROW><ROW><id>16350482</id><snippet>print(row)</snippet></ROW><ROW><id>16350482</id><snippet>PrettyPrintCitation(row)</snippet></ROW><ROW><id>16350482</id><snippet>rows</snippet></ROW><ROW><id>16350482</id><snippet>references = [
    ['Albers', '1994', 'The audible Internet', 'Proc. ACM CHI'],
    ['Albers;Bergman', '1995', 'The audible Web', 'Proc. ACM CHI'],
    ['Glenn;Freg', '1995', 'Cool book title', 'Epic journal title'],
    ['Perry;Smith;Jones', '1998', 'Cooler book title', 'Boring journal name']
]
</snippet></ROW><ROW><id>16350482</id><snippet>def PrettyPrintCitation(row) :
    def adjustauthors(s):
        authorlist = s[0].split(';')
        if(len(authorlist)&lt;2) :
            s[0] = authorlist[0]
        elif(len(authorlist)==2) :
            s[0] = '{0} &amp; {1}'.format(*authorlist)
        else :
            s[0] = ', '.join(authorlist[:-1]) + ', &amp; ' + authorlist[-1]
        return s

    print('{0}. ({1}). {2}. {3}.'.format(*adjustauthors(row)))
</snippet></ROW><ROW><id>16350482</id><snippet>Albers. (1994). The audible Internet. Proc. ACM CHI.
Albers &amp; Bergman. (1995). The audible Web. Proc. ACM CHI.
Glenn &amp; Freg. (1995). Cool book title. Epic journal title.
Perry, Smith, &amp; Jones. (1998). Cooler book title. Boring journal name.
</snippet></ROW><ROW><id>16350486</id><snippet>count</snippet></ROW><ROW><id>16350514</id><snippet>first_row = next(csvreader)  # Compatible with Python 3.x (also 2.7)
for row in csvreader:  # begins with second row
    # ...
</snippet></ROW><ROW><id>16350514</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; csvreader = csv.reader(['first,second', '2,a', '3,b'])
&gt;&gt;&gt; header = next(csvreader)
&gt;&gt;&gt; for line in csvreader:
    print line
['2', 'a']
['3', 'b']
</snippet></ROW><ROW><id>16350682</id><snippet>json.loads(request.POST.get('myd'), object_pairs_hook=collections.OrderedDict)
</snippet></ROW><ROW><id>16350768</id><snippet>set out filename
</snippet></ROW><ROW><id>16350768</id><snippet>filename</snippet></ROW><ROW><id>16350768</id><snippet>g('set out filename')
</snippet></ROW><ROW><id>16350768</id><snippet>g('set out "'+filename+'"')
</snippet></ROW><ROW><id>16350949</id><snippet>data = MyData(key_name=request_token, db_secret=request_secret)
data.put()
</snippet></ROW><ROW><id>16350949</id><snippet>data = MyData.get_by_key_name(request_token)
</snippet></ROW><ROW><id>16351035</id><snippet>your_series.name = "Count"</snippet></ROW><ROW><id>16351035</id><snippet>your_series.to_csv("c:\\output.csv", header=True, index_label="Gene_Name")</snippet></ROW><ROW><id>16351134</id><snippet>num_for_loops = sum(line.strip().startswith("for ") for line in lines)
</snippet></ROW><ROW><id>16351134</id><snippet>num_for_loops</snippet></ROW><ROW><id>16351134</id><snippet>return sum(line.strip().startswith("for ") for line in lines)
</snippet></ROW><ROW><id>16351220</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array(['a', 'b', 'c'])
&gt;&gt;&gt; b = np.array(['x', 'y', 'z'])
&gt;&gt;&gt; c = np.array([i+j for i, j in zip(a, b)])
&gt;&gt;&gt; c
array(['ax', 'by', 'cz'],
      dtype='|S2')
</snippet></ROW><ROW><id>16351220</id><snippet>a</snippet></ROW><ROW><id>16351220</id><snippet>b</snippet></ROW><ROW><id>16351220</id><snippet>dtype=object</snippet></ROW><ROW><id>16351220</id><snippet>&gt;&gt;&gt; a = np.array(["a", "b", "c"], dtype=object)
&gt;&gt;&gt; b = np.array(["x", "y", "z"], dtype=object)
&gt;&gt;&gt; c = a + b
&gt;&gt;&gt; c
array([ax, by, cz], dtype=object)
</snippet></ROW><ROW><id>16351234</id><snippet>f = open("grade_file.txt", "r")
line = f.readlines()

for i in (line):
    i = i.strip()
    print(i[-1:])
</snippet></ROW><ROW><id>16351245</id><snippet>sin</snippet></ROW><ROW><id>16351245</id><snippet>cos</snippet></ROW><ROW><id>16351245</id><snippet>pi</snippet></ROW><ROW><id>16351245</id><snippet>math</snippet></ROW><ROW><id>16351245</id><snippet>from math import sin, cos, pi
</snippet></ROW><ROW><id>16351245</id><snippet>sin</snippet></ROW><ROW><id>16351245</id><snippet>cos</snippet></ROW><ROW><id>16351334</id><snippet>headers = {'X-Auth-Token:%s' % request.user.token,
           'Content-Type:application/json'}
</snippet></ROW><ROW><id>16351334</id><snippet>set</snippet></ROW><ROW><id>16351334</id><snippet>:</snippet></ROW><ROW><id>16351334</id><snippet>:</snippet></ROW><ROW><id>16351678</id><snippet>collections.Counter</snippet></ROW><ROW><id>16351678</id><snippet>&gt;&gt;&gt; dic={'25': {'Return of the Jedi (1983)': 5.0}, '42': {'Batman (1989)': 3.0, 'E.T. the Extra-Terrestrial (1982)': 5.0}, '8': {'Return of the Jedi (1983)': 5.0 }}
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c=Counter(movie  for v in dic.values() for movie in v)

&gt;&gt;&gt; [k for k,v in c.items() if v&gt;1] #returns the name of movies repeated more than once
['Return of the Jedi (1983)']
&gt;&gt;&gt; c
Counter({'Return of the Jedi (1983)': 2,
         'Batman (1989)': 1,
         'E.T. the Extra-Terrestrial (1982)': 1})
</snippet></ROW><ROW><id>16351678</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>16351678</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; movie_keys=defaultdict(list)
&gt;&gt;&gt; for k,v in dic.items(): 
    for movie in v:
        movie_keys[movie].append(k)
...         
&gt;&gt;&gt; movie_keys
defaultdict(&lt;type 'list'&gt;, {'Batman (1989)': ['42'], 'Return of the Jedi (1983)': ['25', '8'], 'E.T. the Extra-Terrestrial (1982)': ['42']})
</snippet></ROW><ROW><id>16351748</id><snippet>pylab.plot(x,g1)
</snippet></ROW><ROW><id>16351748</id><snippet>pylab.plot(x,g2)
</snippet></ROW><ROW><id>16351748</id><snippet>pylab.show()
</snippet></ROW><ROW><id>16351748</id><snippet>pylab.plot(x_intersect, y_intersect, 'x', color="#80C0FF")
</snippet></ROW><ROW><id>16351748</id><snippet>pylab.plot( [x_special, x_special], [0.5, 1.9], '-b' )
</snippet></ROW><ROW><id>16351841</id><snippet>y = [1, 2, 3]
x = y
</snippet></ROW><ROW><id>16351841</id><snippet>x</snippet></ROW><ROW><id>16351841</id><snippet>y</snippet></ROW><ROW><id>16351841</id><snippet>x[:] = [-1]*3
</snippet></ROW><ROW><id>16351841</id><snippet>print y
# [-1, -1, -1]
</snippet></ROW><ROW><id>16352019</id><snippet>#!/grid/common/bin/python
import sys, time

for i in range(10):
    print str(i)
    sys.stdout.flush()
    time.sleep(1)
</snippet></ROW><ROW><id>16352019</id><snippet>#!/grid/common/bin/python
import sys, time
import subprocess
import cgi, cgitb
cgitb.enable()

print 'Content-Type: text/html;charset=utf-8\r\n\r\n'

print '&lt;html&gt;&lt;body&gt;'

PIPE = subprocess.PIPE
pd = subprocess.Popen(['abc.py'],
                        stdout=PIPE, stderr=PIPE)
while True:
    output = pd.stdout.read(1)
    if output == '' and pd.poll() != None:
      break
    if output != '':
      sys.stdout.write(output)
      sys.stdout.flush()
</snippet></ROW><ROW><id>16352080</id><snippet>words1 = "This is a simple test of set intersection".lower().split()
words2 = "Intersection of sets is easy using Python".lower().split()

intersection = set(words1) &amp; set(words2)

&gt;&gt;&gt; set(['of', 'is', 'intersection'])
</snippet></ROW><ROW><id>16352333</id><snippet>top</snippet></ROW><ROW><id>16352333</id><snippet>self._top</snippet></ROW><ROW><id>16352333</id><snippet>def push(self, newItem):
    """Inserts newItem at top of stack."""
    self._top = Node(newItem, self._top)
    #Pops off last link if max length has been reached
    top = self._top
    if self._size &gt;= self._maxlen:
        while top.next.next != None:
            top = top.next
        removedItem = top.next.data
        top.next = None
    else:
        self._size += 1
</snippet></ROW><ROW><id>16352381</id><snippet>window.mainloop()</snippet></ROW><ROW><id>16352381</id><snippet>    self.scrollbar.config(command=self.text.yview)
    self.text.pack()
    window.mainloop()    # Remove this line

...

window =  Tk()            
textfield = Textfield(window)
menu = Menubar(window, textfield.text)
window.mainloop()    # &lt;----
</snippet></ROW><ROW><id>16352437</id><snippet>import modules
hello = 'Hello'
for m in dir(modules):
    obj = getattr(modules,m)
    if hasattr( obj, "__call__" ): #or use `if callable(obj):`
        print obj(hello)
</snippet></ROW><ROW><id>16352437</id><snippet>Hello A
Hello B
</snippet></ROW><ROW><id>16352437</id><snippet>str</snippet></ROW><ROW><id>16352437</id><snippet>str</snippet></ROW><ROW><id>16352920</id><snippet>repo</snippet></ROW><ROW><id>16352920</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>16352920</id><snippet>import repo.sub2.mod2</snippet></ROW><ROW><id>16352920</id><snippet>sys.path</snippet></ROW><ROW><id>16352920</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>16353071</id><snippet>curl -k https://splunk.mydomain.com:8089/services/auth/login -d username=my_username -d password=my_password
</snippet></ROW><ROW><id>16353284</id><snippet>.pyc</snippet></ROW><ROW><id>16353284</id><snippet>__pycache__</snippet></ROW><ROW><id>16353284</id><snippet>.pyc</snippet></ROW><ROW><id>16353284</id><snippet>__pycache__</snippet></ROW><ROW><id>16353284</id><snippet>-B</snippet></ROW><ROW><id>16353519</id><snippet>img.shape</snippet></ROW><ROW><id>16353774</id><snippet>&lt;parameter dict, average score, list of scores over all folds&gt;</snippet></ROW><ROW><id>16353774</id><snippet>alpha</snippet></ROW><ROW><id>16353774</id><snippet>({'alpha': 0.0001},
 0.61100922361083054,
 array([ 0.61189728,  0.60846248,  0.61266791]))
</snippet></ROW><ROW><id>16353887</id><snippet>__del__()</snippet></ROW><ROW><id>16353887</id><snippet>sys.stderr</snippet></ROW><ROW><id>16353887</id><snippet>__del__()</snippet></ROW><ROW><id>16353887</id><snippet>__del__()</snippet></ROW><ROW><id>16353887</id><snippet>__del__()</snippet></ROW><ROW><id>16353887</id><snippet>__del__()</snippet></ROW><ROW><id>16353904</id><snippet>x</snippet></ROW><ROW><id>16353904</id><snippet>y</snippet></ROW><ROW><id>16353904</id><snippet>@property
def x(self):
    return self.datum[0]

@x.setter
def x(self, value):
    self.datum[0] = value

@property
def y(self):
    return self.datum[1]

@y.setter
def y(self, value):
    self.datum[1] = value
</snippet></ROW><ROW><id>16353904</id><snippet>x</snippet></ROW><ROW><id>16353904</id><snippet>y</snippet></ROW><ROW><id>16353904</id><snippet>datum</snippet></ROW><ROW><id>16353904</id><snippet>my_shape.x</snippet></ROW><ROW><id>16353904</id><snippet>my_shape.y</snippet></ROW><ROW><id>16354015</id><snippet>div</snippet></ROW><ROW><id>16354015</id><snippet>error</snippet></ROW><ROW><id>16354015</id><snippet>div.error</snippet></ROW><ROW><id>16354015</id><snippet>NoSuchElementException</snippet></ROW><ROW><id>16354015</id><snippet>..</snippet></ROW><ROW><id>16354015</id><snippet>../div</snippet></ROW><ROW><id>16354015</id><snippet>div</snippet></ROW><ROW><id>16354015</id><snippet>// non-working code, only the logic
parent_div = el.find_element_by_xpath("..") # the parent div
self.assertTrue("error" in parent_div.get_attribute("class"))
</snippet></ROW><ROW><id>16354440</id><snippet>camAngle = 140

# The context manager closes the file automatically when you leave the block
with open(camFileLoc, 'r') as handle:
    next(handle)  # Skips the header

    for line in handle:
        # Splits the line on the whitespace and converts each string
        # into an integer. Then, you unpack it into the two variables (a tuple)
        angle, displacement = map(int, line.split())

        if angle == camAngle:
            print displacement
            break  # Exits the `for` loop
    else:
        # We never broke out of the loop, so the angle was never found
        print 'This angle is not in the file'
</snippet></ROW><ROW><id>16354765</id><snippet>isinstance(x, y)</snippet></ROW><ROW><id>16354765</id><snippet>type(x) == y</snippet></ROW><ROW><id>16354765</id><snippet>isinstance(attr, object)</snippet></ROW><ROW><id>16354765</id><snippet>int, float, str, unicode, list, dict, set, ...</snippet></ROW><ROW><id>16354765</id><snippet>def dump(obj, level=0):
   for attr in dir(obj):
      val = getattr(obj, a)
      if isinstance(val, (int, float, str, unicode, list, dict, set)):
           print level*' ', val
      else:
           dump(val, level=level+1)
</snippet></ROW><ROW><id>16354765</id><snippet>isinstance</snippet></ROW><ROW><id>16354765</id><snippet>isinstance</snippet></ROW><ROW><id>16354765</id><snippet>&gt;&gt;&gt; class A(object): pass
... 
&gt;&gt;&gt; class B(A): pass
... 
&gt;&gt;&gt; a, b = A(), B()
&gt;&gt;&gt; type(a)
&lt;class '__main__.A'&gt;
&gt;&gt;&gt; type(a) == A
True
&gt;&gt;&gt; type(b)
&lt;class '__main__.B'&gt;
&gt;&gt;&gt; type(b) == B
True
&gt;&gt;&gt; type(b) == A
False
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16354771</id><snippet>str.lower()</snippet></ROW><ROW><id>16354771</id><snippet>str.upper()</snippet></ROW><ROW><id>16354771</id><snippet>def GetMenuChoice():
  MenuChoice = raw_input("Enter your choice: ")
  return MenuChoice.lower()

expected="Menu1"
while GetMenuChoice() != expected.lower():
    print "Try again"
print "Correct input"    
</snippet></ROW><ROW><id>16354771</id><snippet>Enter your choice: menu
Try again
Enter your choice: mennu
Try again
Enter your choice: mEnU1
Correct input
</snippet></ROW><ROW><id>16355036</id><snippet>re</snippet></ROW><ROW><id>16355036</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'([\dA-F]+)', r'0x\1', 'id*A+2')
'id*0xA+0x2'
&gt;&gt;&gt; eval(re.sub(r'([\dA-F]+)', r'0x\1', 'CAFE+BABE'))
99772
</snippet></ROW><ROW><id>16355036</id><snippet>eval</snippet></ROW><ROW><id>16355036</id><snippet>eval</snippet></ROW><ROW><id>16355036</id><snippet>&gt;&gt;&gt; re.sub(r'(?&lt;!i)([\da-fA-F]+)', r'0x\1', 'id*a+b')
'id*0xa+0xb'
</snippet></ROW><ROW><id>16355036</id><snippet>i</snippet></ROW><ROW><id>16355036</id><snippet>'id'</snippet></ROW><ROW><id>16355036</id><snippet>'i0xd'</snippet></ROW><ROW><id>16355036</id><snippet>i</snippet></ROW><ROW><id>16355036</id><snippet>I</snippet></ROW><ROW><id>16355036</id><snippet>Id</snippet></ROW><ROW><id>16355115</id><snippet>lambda</snippet></ROW><ROW><id>16355115</id><snippet>somename = lambda tl: [elem[1:-1] for elem in tl]
</snippet></ROW><ROW><id>16355115</id><snippet>testingList</snippet></ROW><ROW><id>16355115</id><snippet>testingList = somename(testingList)
</snippet></ROW><ROW><id>16355236</id><snippet>with open("file1") as f1,open("file2") as f2:
    words=set(line.strip() for line in f1)   #create a set of words from dictionary file

    #why sets? sets provide an O(1) lookup, so overall complexity is O(N)

    #now loop over each line of other file (word, freq file)
    for line in f2:
        word,freq=line.split()   #fetch word,freq 
        if word in words:        #if word is found in words set then print it
            print word
</snippet></ROW><ROW><id>16355236</id><snippet>apple
</snippet></ROW><ROW><id>16355461</id><snippet>%y</snippet></ROW><ROW><id>16355461</id><snippet>%Y</snippet></ROW><ROW><id>16355461</id><snippet>%y  Year without century as a decimal number [00,99].    
%Y  Year with century as a decimal number.
</snippet></ROW><ROW><id>16355498</id><snippet>iterparse()</snippet></ROW><ROW><id>16355498</id><snippet>&lt;ExternalPage&gt;</snippet></ROW><ROW><id>16355498</id><snippet>&lt;d:Title&gt;</snippet></ROW><ROW><id>16355498</id><snippet>&lt;d:Description&gt;</snippet></ROW><ROW><id>16355498</id><snippet>lxml</snippet></ROW><ROW><id>16355498</id><snippet>from lxml import etree as ET
import gzip
import sqlite3

conn = sqlite3.connect('/path/to/database')

# create table
with conn:
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS odp_urls 
        (url text primary key, title text, description text)''')

count = 0
nsmap = {'d': 'http://purl.org/dc/elements/1.0/'}
with gzip.open('content.rdf.u8.gz', 'rb') as content, conn:
    cursor = conn.cursor()
    for event, element in ET.iterparse(content, tag='{http://dmoz.org/rdf/}ExternalPage'):
        url = element.attrib['about']
        title = element.xpath('d:Title/text()', namespaces=nsmap)
        description = element.xpath('d:Description/text()', namespaces=nsmap)
        title, description = title and title[0] or '', description and description[0] or ''

        # no longer need this, remove from memory again, as well as any preceding siblings
        elem.clear()
        while elem.getprevious() is not None:
            del elem.getparent()[0]

        cursor.execute('INSERT OR REPLACE INTO odp_urls VALUES (?, ?, ?)',
            (url, title, description))
        count += 1
        if count % 1000 == 0:
            print 'Processed {} items'.format(count)
</snippet></ROW><ROW><id>16355742</id><snippet>Foo.objects.all().order_by('-field')
</snippet></ROW><ROW><id>16355876</id><snippet>&gt;&gt;&gt; re.sub(r"\s+", " ", text)
"Hello my friends. How are you doing? I'm fine."
</snippet></ROW><ROW><id>16356064</id><snippet>"</snippet></ROW><ROW><id>16356354</id><snippet>In [59]: df
Out[59]:
       country countrycode varname    1960    1961    1962
0  afghanistan         AFG     GDP    5.60    5.70    5.80
1  afghanistan         AFG    Gini    0.77    0.78    0.75
2  afghanistan         AFG    educ    8.10    8.20    8.30
3  afghanistan         AFG     pop  888.00  889.00  890.00
4      albania         ALB     GDP    6.60    6.70    6.80
5      albania         ALB    Gini    0.45    0.46    0.47
6      albania         ALB    educ    6.20    6.30    6.40
7      albania         ALB     pop  777.00  778.00  779.00

In [60]: df = df.set_index(['country', 'countrycode', 'varname'])

In [61]: df.columns.name = 'year'

In [62]: df.stack().unstack('varname')
Out[62]:
varname                       GDP  Gini  educ  pop
country     countrycode year
afghanistan AFG         1960  5.6  0.77   8.1  888
                        1961  5.7  0.78   8.2  889
                        1962  5.8  0.75   8.3  890
albania     ALB         1960  6.6  0.45   6.2  777
                        1961  6.7  0.46   6.3  778
                        1962  6.8  0.47   6.4  779
</snippet></ROW><ROW><id>16356758</id><snippet>raw = """{1:xxxx}{2:xxxx}{3:{10:xxxx}}{4:'xxxx\r\n:xxxx'}"""

def parse(raw):
    # split into chunks by '}{' and remove the outer '{}'
    parts = raw[1:-1].split('}{')
    for part in parts:
        # split by the first ':'
        num, data = part.split(':', 1)
        # yield each entry found
        yield int(num), data

# make a dict from it
print dict(parse(raw))
</snippet></ROW><ROW><id>16356758</id><snippet>'{10:xxxx}'</snippet></ROW><ROW><id>16356826</id><snippet>{ "File"..</snippet></ROW><ROW><id>16356826</id><snippet>output_format = '{{ "File": "{filename}", "Success": {success}, "ErrorMessage": "{error_msg}", "LogIdentifier": "{log_identifier}" }}'
</snippet></ROW><ROW><id>16356826</id><snippet>&gt;&gt;&gt; print output_format.format(filename='My_file_name',
...                            success=True,
...                            error_msg='',
...                            log_identifier='123')
{ "File": "My_file_name", "Success": True, "ErrorMessage": "", "LogIdentifier": "123" }
</snippet></ROW><ROW><id>16356826</id><snippet>json</snippet></ROW><ROW><id>16356826</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; print json.dumps(dict(File='My_file_name',
...                            Success=True,
...                            ErrorMessage='',
...                            LogIdentifier='123'))
{"LogIdentifier": "123", "ErrorMessage": "", "Success": true, "File": "My_file_name"}
</snippet></ROW><ROW><id>16356826</id><snippet>true</snippet></ROW><ROW><id>16356933</id><snippet>[...]</snippet></ROW><ROW><id>16356933</id><snippet>&gt;&gt;&gt; values = [0, 1, 2]
&gt;&gt;&gt; sys.getrefcount(values) #two references so far: shell and `values`  
2
&gt;&gt;&gt; values[1] = values     #created another reference to the same object but a cyclic one
&gt;&gt;&gt; sys.getrefcount(values) # references increased to 3
3
&gt;&gt;&gt; values[1] is values  # yes both point to the same obejct
True
</snippet></ROW><ROW><id>16356933</id><snippet>values</snippet></ROW><ROW><id>16356933</id><snippet>values[1]</snippet></ROW><ROW><id>16356933</id><snippet>&gt;&gt;&gt; values[1].append(4)
&gt;&gt;&gt; values
[0, [...], 2, 4]
#or
&gt;&gt;&gt; values[1][1][1].append(5) 
&gt;&gt;&gt; values
[0, [...], 2, 4, 5]
</snippet></ROW><ROW><id>16356973</id><snippet>try:</snippet></ROW><ROW><id>16356973</id><snippet>except ValueError</snippet></ROW><ROW><id>16356973</id><snippet>isdigit</snippet></ROW><ROW><id>16356973</id><snippet>valid_numbers = [4, 6, 12]
while repeat:
    number_of_sides = 0      
    while number_of_sides not in valid_numbers:
          number_of_sides_string = input("Please select a dice with 4, 6 or 12 sides: ")
          if (not number_of_sides_string.strip().isdigit() 
              or int(number_of_sides_string) not in valid_numbers):
              print ("please enter one of", valid_numbers)
          else:
              number_of_sides = int(number_of_sides_string)
    # do things with number_of_sides
</snippet></ROW><ROW><id>16356973</id><snippet>not number_of_sides_string.strip().isdigit()</snippet></ROW><ROW><id>16356973</id><snippet>strip</snippet></ROW><ROW><id>16356973</id><snippet>isdigit()</snippet></ROW><ROW><id>16356973</id><snippet> if not number_of_sides_string not in ['4', '6', '12']:
     print('wrong')
</snippet></ROW><ROW><id>16357146</id><snippet>set()</snippet></ROW><ROW><id>16357146</id><snippet>&gt;&gt;&gt; a=["file1","file2","file3","file1","file2","file1","file5"]
&gt;&gt;&gt; set(a)
set(['file3', 'file2', 'file1', 'file5'])
</snippet></ROW><ROW><id>16357146</id><snippet>a=["file1","file2","file3","file1","file2","file1","file5"]
seen=set()
for file in a:               #you can iterate over a list itself
    if file not in seen:     #if file is not in the set then write 
       file_name= '%s.txt' %(file)
       file_write= open('%s'%(file_name),'w')
       seen.add(file)  #add file to seen
</snippet></ROW><ROW><id>16357714</id><snippet>print(repr("\'"),repr("\,"))
</snippet></ROW><ROW><id>16357714</id><snippet>"'" '\\,'
</snippet></ROW><ROW><id>16357714</id><snippet>"\'"</snippet></ROW><ROW><id>16357714</id><snippet>\\</snippet></ROW><ROW><id>16357714</id><snippet>"\\'"</snippet></ROW><ROW><id>16357714</id><snippet>Hello\' world!
</snippet></ROW><ROW><id>16357714</id><snippet>"\'"</snippet></ROW><ROW><id>16357714</id><snippet>&gt;&gt;&gt; ord("\'") == ord("'")
True
</snippet></ROW><ROW><id>16357714</id><snippet>"\'"</snippet></ROW><ROW><id>16357714</id><snippet>"'"</snippet></ROW><ROW><id>16357714</id><snippet>\'</snippet></ROW><ROW><id>16357714</id><snippet>&gt;&gt;&gt; 'i\'ll'
"i'll"
</snippet></ROW><ROW><id>16357774</id><snippet>yourWidget.palette().highlight().color().name()
</snippet></ROW><ROW><id>16357774</id><snippet>getColor()</snippet></ROW><ROW><id>16357774</id><snippet>color()</snippet></ROW><ROW><id>16357795</id><snippet>&gt;&gt;&gt; nested_lst = [u'Tom', ['50', ' 1.85', ' 112', ' 60', ' 1.90', ' 115']]
&gt;&gt;&gt; x=nested_lst[1]

&gt;&gt;&gt; nested_lst[1]=[ tuple(x[i:i+3]) for i in xrange(0,len(x),3) ]
&gt;&gt;&gt; nested_lst
[u'Tom', [('50', ' 1.85', ' 112'), (' 60', ' 1.90', ' 115')]]
</snippet></ROW><ROW><id>16357795</id><snippet>itertools.islice</snippet></ROW><ROW><id>16357795</id><snippet>&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; nested_lst = [u'Tom', ['50', ' 1.85', ' 112', ' 60', ' 1.90', ' 115']]
&gt;&gt;&gt; x=nested_lst[1]
&gt;&gt;&gt; it=iter(x)

&gt;&gt;&gt; nested_lst[1]=[tuple( islice(it,3) ) for i in xrange(len(x)/3)]
&gt;&gt;&gt; nested_lst
[u'Tom', [('50', ' 1.85', ' 112'), (' 60', ' 1.90', ' 115')]]
</snippet></ROW><ROW><id>16357807</id><snippet>class Country(models.Model):
    name = models.CharField("Name", max_length=200)
    sorting = models.IntegerField("Ordering", blank=True, null=True, 
         help_text="A number. Use tens or hundreds to be able to add Counties.")

    class Meta:
        ordering = ('sorting', 'name')
</snippet></ROW><ROW><id>16357807</id><snippet>countries = Country.objects.all().order_by('sorting', 'name')
</snippet></ROW><ROW><id>16357807</id><snippet>class CountryAdmin(admin.ModelAdmin):
    ordering = ['sorting', 'name' ]
    #Bonus tip: editing in the list view!
    list_editable = ['sorting', ] 
    #Need sorting in list_display to get list_editable to work.
    list_display = ['title', 'sorting'] 
</snippet></ROW><ROW><id>16357807</id><snippet>prepopulated_fields = { 'sorting': ('name', ) }
</snippet></ROW><ROW><id>16357807</id><snippet>{% for country in countries %}{{ country.name }}{% endfor %}
</snippet></ROW><ROW><id>16357942</id><snippet>execute</snippet></ROW><ROW><id>16357942</id><snippet>cursor.execute("""
    INSERT INTO
        table
        (name, age, origin, date)
    VALUES
        (%(name)s, %(age)s, %(origin)s, %(date)s)
""", d)
</snippet></ROW><ROW><id>16358009</id><snippet>:workarea</snippet></ROW><ROW><id>16358009</id><snippet>chr(182) || :workarea || chr(182)</snippet></ROW><ROW><id>16358009</id><snippet>values</snippet></ROW><ROW><id>16358634</id><snippet>.ui</snippet></ROW><ROW><id>16358634</id><snippet>.py</snippet></ROW><ROW><id>16358634</id><snippet>pyside-uic</snippet></ROW><ROW><id>16358634</id><snippet>_()</snippet></ROW><ROW><id>16358634</id><snippet>-tr</snippet></ROW><ROW><id>16358634</id><snippet>pyuic</snippet></ROW><ROW><id>16358634</id><snippet>class _i18n_string(qtproxies.i18n_string):
    """Provide a translated text."""
    def __str__(self):
        return "_('%s')" % self.string.encode('string-escape')
</snippet></ROW><ROW><id>16358634</id><snippet>_</snippet></ROW><ROW><id>16358634</id><snippet>print</snippet></ROW><ROW><id>16358634</id><snippet>encode(...)</snippet></ROW><ROW><id>16358876</id><snippet>itertools.groupby</snippet></ROW><ROW><id>16358876</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; groups = groupby(both, lambda x: x[0]) # Group `both` by the zeroth index of its members
&gt;&gt;&gt; group = next(groups) # Get the first group in groups
&gt;&gt;&gt; group
('Fam_c828_1', &lt;itertools._grouper object at 0x10f065d10&gt;)
&gt;&gt;&gt; list(group[1]) # Cast the group iterable into a list for display purposes
[['Fam_c828_1', '12-0799NK', '100'], ['Fam_c828_1', '12-0800TK', '100']]
</snippet></ROW><ROW><id>16358915</id><snippet>|    0    |         1         |      2     |  # Column number
|                Welcome!                  |
| Select  |       Entry       |   Button   |
| Your label                               |
</snippet></ROW><ROW><id>16358915</id><snippet>from tkinter import *
from tkinter import filedialog
from tkinter import ttk

def folderDiag():
    scanfolder.set(filedialog.askdirectory())

root = Tk()

c = (N, W, S, E)
scanfolder = StringVar()

root.title("Testing")
root.columnconfigure(0, weight=1)
root.rowconfigure(0, weight=1)

frame = ttk.Frame(root, padding="3")
frame.grid(column=0, row=0, sticky=c)
frame.columnconfigure(0, weight=0)
frame.columnconfigure(1, weight=1)
frame.columnconfigure(2, weight=0)
frame.rowconfigure(0, weight=1)
frame.rowconfigure(1, weight=1)
frame.rowconfigure(2, weight=1)
ttk.Label(frame, text="Welcome!",
          font="TkDefaultFont 24 bold").grid(column=0, row=0, columnspan=3,
                                             sticky=c)
ttk.Label(frame, text="Select folder to scan:").grid(column=0, row=1, sticky=E)
ttk.Label(frame, textvariable=scanfolder, justify=LEFT).grid(column=0, columnspan=3, row=2, sticky=W)

scan_folder_entry = ttk.Entry(frame, textvariable=scanfolder)
scan_folder_entry.grid(column=1, row=1, sticky=EW)
browse_button = ttk.Button(frame, text="Browse...",
                           command=folderDiag)
browse_button.grid(column=2, row=1)

root.mainloop()
</snippet></ROW><ROW><id>16358915</id><snippet>|   0    | 1 |    2    |    3   |    4   |
| Welcome                       |  ---   |
| Select | - |   ---   | Entry  | Button |
|   ---  | - |  Label  |   ---  |   ---  |
</snippet></ROW><ROW><id>16358915</id><snippet>Select</snippet></ROW><ROW><id>16358915</id><snippet>Entry</snippet></ROW><ROW><id>16358915</id><snippet>Select</snippet></ROW><ROW><id>16358915</id><snippet>Label</snippet></ROW><ROW><id>16358915</id><snippet>Select</snippet></ROW><ROW><id>16358915</id><snippet>Entry</snippet></ROW><ROW><id>16358915</id><snippet>Select</snippet></ROW><ROW><id>16358935</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>16358935</id><snippet>pip</snippet></ROW><ROW><id>16358935</id><snippet>pip</snippet></ROW><ROW><id>16358935</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>16358935</id><snippet>/usr/bin</snippet></ROW><ROW><id>16359097</id><snippet>{ k[0]: k[1:] for k in lst }
</snippet></ROW><ROW><id>16359097</id><snippet>dict</snippet></ROW><ROW><id>16359097</id><snippet>dict( (k[0], k[1:]) for k in lst)
# {'kataba': ['V:', '3rd_sg_masc_perf_active'], 'katabat': ['V:', '3rd_sg_fm_perf_active'], 'katabata:': ['V:', '3rd_dual_fm_perf_active'], 'katabu:': ['V:', '3rd_pl_masc_perf_active'], 'kataba:': ['V:', '3rd_dual_masc_perf_active']}
</snippet></ROW><ROW><id>16359190</id><snippet>__init__.py</snippet></ROW><ROW><id>16359190</id><snippet># at the top of your module before doing anything else
import flickrapi
import logging
try:
    logging.root.handlers.pop()
except IndexError:
    # once the bug is fixed in the library the handlers list will be empty - so we need to catch this error
    pass
</snippet></ROW><ROW><id>16359274</id><snippet>openpyxl</snippet></ROW><ROW><id>16359274</id><snippet>show_gridlines</snippet></ROW><ROW><id>16359274</id><snippet>from xlsxwriter.workbook import Workbook

workbook = Workbook('hello_world.xlsx')
worksheet = workbook.add_worksheet()

worksheet.write('A1', 'Hello world')
worksheet.hide_gridlines(2)

workbook.close()
</snippet></ROW><ROW><id>16359620</id><snippet>time.struct_time</snippet></ROW><ROW><id>16359620</id><snippet>MySQLdb</snippet></ROW><ROW><id>16359620</id><snippet>datetime</snippet></ROW><ROW><id>16359620</id><snippet>time</snippet></ROW><ROW><id>16359620</id><snippet>import datetime

a = datetime.datetime.strptime('my date', "%b %d %Y %H:%M")

cursor.execute('INSERT INTO myTable (Date) VALUES(%s)', (a.strftime('%Y-%m-%d %H:%M:%S'),))
</snippet></ROW><ROW><id>16359620</id><snippet>.strftime()</snippet></ROW><ROW><id>16359620</id><snippet>datetime.datetime</snippet></ROW><ROW><id>16359620</id><snippet>time</snippet></ROW><ROW><id>16359620</id><snippet>import time

a = time.strptime('my date', "%b %d %Y %H:%M")

cursor.execute('INSERT INTO myTable (Date) VALUES(%s)', (time.strftime('%Y-%m-%d %H:%M:%S', a),))
</snippet></ROW><ROW><id>16359699</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; words = ['this', 'is', '', 'an', 'example']
&gt;&gt;&gt; [list(g) for k, g in groupby(words, ''.__ne__) if k]
[['this', 'is'], ['an', 'example']]
&gt;&gt;&gt; [list(g) for k, g in groupby(words, 'is'.__ne__) if k]
[['this'], ['', 'an', 'example']]
</snippet></ROW><ROW><id>16359766</id><snippet>cnx = sqlite3.connect('db_path')
</snippet></ROW><ROW><id>16359766</id><snippet>cnx = sqlite3.connect(db_path)
</snippet></ROW><ROW><id>16359773</id><snippet>&gt;&gt;&gt; lst = [[0, 0], [0, 2], [1, 1], [2, 0], [0, 3], [1, 2], [2, 1], [3, 0]]
&gt;&gt;&gt; print ([x for x in lst if sum(x) == 3])
[[0, 3], [1, 2], [2, 1], [3, 0]]
</snippet></ROW><ROW><id>16359773</id><snippet>lst</snippet></ROW><ROW><id>16360296</id><snippet>exit</snippet></ROW><ROW><id>16360296</id><snippet>exit</snippet></ROW><ROW><id>16360296</id><snippet>shell</snippet></ROW><ROW><id>16360296</id><snippet>True</snippet></ROW><ROW><id>16360476</id><snippet>health_plans</snippet></ROW><ROW><id>16360476</id><snippet>Doctor</snippet></ROW><ROW><id>16360476</id><snippet>id    name
1     foo
2     bar
</snippet></ROW><ROW><id>16360476</id><snippet>HealthPlan</snippet></ROW><ROW><id>16360476</id><snippet>id    model
1     a
2     b
</snippet></ROW><ROW><id>16360476</id><snippet>Doctor_HealthPlan</snippet></ROW><ROW><id>16360476</id><snippet>doctor_id    healthplan_id
1            2
2            1
2            2
</snippet></ROW><ROW><id>16360476</id><snippet>ManyToMany</snippet></ROW><ROW><id>16360476</id><snippet>hp_id</snippet></ROW><ROW><id>16360476</id><snippet>health_plans</snippet></ROW><ROW><id>16360551</id><snippet>for row in data:
    row[-1] = int(row[-1])
</snippet></ROW><ROW><id>16360551</id><snippet>data</snippet></ROW><ROW><id>16360551</id><snippet>json</snippet></ROW><ROW><id>16360551</id><snippet>import json

r = json.dumps(data)
</snippet></ROW><ROW><id>16360551</id><snippet>&gt;&gt;&gt; data = [['2013-02-03', 'London', 'miles', '25'], ['2013-02-03', 'Newcastle', 'miles', '25'], ['2013-02-03', 'Birmingham', 'miles', '62']]
&gt;&gt;&gt; for row in data:
...     row[-1] = int(row[-1])
... 
&gt;&gt;&gt; data
[['2013-02-03', 'London', 'miles', 25], ['2013-02-03', 'Newcastle', 'miles', 25], ['2013-02-03', 'Birmingham', 'miles', 62]]
&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps(data)
'[["2013-02-03", "London", "miles", 25], ["2013-02-03", "Newcastle", "miles", 25], ["2013-02-03", "Birmingham", "miles", 62]]'
</snippet></ROW><ROW><id>16360577</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = '[SOME-WORD "Quoted string"]'
&gt;&gt;&gt; pat = r'\[(?P&lt;capitalitem&gt;SOME-WORD)(\ ?)\"(?P&lt;quotedstring&gt;[\w\s]+)\"(\ ?)\]'
&gt;&gt;&gt; re.search(pat, text).groupdict()
{'capitalitem': 'SOME-WORD', 'quotedstring': 'Quoted string'}
</snippet></ROW><ROW><id>16360751</id><snippet>close</snippet></ROW><ROW><id>16360751</id><snippet>import matplotlib.pyplot as plt

#generate figure here
#...
plt.close(fig)  #release resources associated with fig
</snippet></ROW><ROW><id>16360811</id><snippet>.</snippet></ROW><ROW><id>16360811</id><snippet>:::</snippet></ROW><ROW><id>16360811</id><snippet>s = 'A1:::x1:::B1.A2:::x2::x3::x4:::B2.A3:::x5::x6::x7:::B3.'
slist = (substr for substr in s.split('.') if substr)
result = [x.split(":::",1)[1] for x in slist]
</snippet></ROW><ROW><id>16360811</id><snippet>result = [x.split(":::",1)[1] for x in s.split('.') if x]
</snippet></ROW><ROW><id>16360880</id><snippet>In [11]: d2
Out[11]: {'r': array([ 0.3536318 ,  0.29363604,  0.91307454]), 's': array([46])}

In [12]: d2 = {name: pd.Series(arr) for name, arr in d2.iteritems()}

In [13]: d2
Out[13]:
{'r': 0    0.353632
1    0.293636
2    0.913075
dtype: float64,
 's': 0    46
dtype: int64}
</snippet></ROW><ROW><id>16360880</id><snippet>In [14]: pd.DataFrame(d2)
Out[14]:
          r   s
0  0.353632  46
1  0.293636 NaN
2  0.913075 NaN
</snippet></ROW><ROW><id>16360956</id><snippet>QuerySet.values_list()</snippet></ROW><ROW><id>16360956</id><snippet>django.db.models.query.ValuesListQuerySet</snippet></ROW><ROW><id>16360956</id><snippet>__repr__</snippet></ROW><ROW><id>16360956</id><snippet>my_list = list(self.get_queryset().values_list('code', flat=True))
</snippet></ROW><ROW><id>16360956</id><snippet>json_data = json.dumps(my_list)
</snippet></ROW><ROW><id>16360956</id><snippet>HttpResponse</snippet></ROW><ROW><id>16360956</id><snippet>Content-Type</snippet></ROW><ROW><id>16360956</id><snippet>application/json</snippet></ROW><ROW><id>16360956</id><snippet>response = HttpResponse(json_data, content_type='application/json')
</snippet></ROW><ROW><id>16361049</id><snippet>listdir</snippet></ROW><ROW><id>16361049</id><snippet>#! /usr/bin/python
import os
os.system('clear')

x=raw_input('enter a path ')
y=os.listdir(x)
k=0
m=0
for a in y:
    p = os.path.join(x, a)  # &lt;-- here
    if os.path.isfile(p):
       k=k+1
    elif os.path.isdir(p):
       m=m+1

print ('files are %d' % (k))
print ('dirs are %d' % (m))
</snippet></ROW><ROW><id>16361264</id><snippet>def get_object(self, request, category):
    return Question.objects.filter(category__exact=1)[:1][0]
</snippet></ROW><ROW><id>16361264</id><snippet>category__exact=1</snippet></ROW><ROW><id>16361264</id><snippet>category__exact=category</snippet></ROW><ROW><id>16361264</id><snippet>def get_object(self, request, category):
    return Question.objects.filter(category__exact=category)[:1][0]
</snippet></ROW><ROW><id>16361264</id><snippet>def get_object(self, request, category):
    qs = Question.objects.filter(category__exact=category)[:1]
    if qs:
        return qs[0]
    return None
</snippet></ROW><ROW><id>16361393</id><snippet>b[j] = ( b[j] - (A[j][i])/(A[i][i]) )
</snippet></ROW><ROW><id>16361393</id><snippet>b[j]</snippet></ROW><ROW><id>16361393</id><snippet>(A[j][i])</snippet></ROW><ROW><id>16361393</id><snippet>A[j][i] = A[j][i] - ( A[j][i] /  A[i][i]  ) *  A[i][i]
</snippet></ROW><ROW><id>16361393</id><snippet>A[i][i]</snippet></ROW><ROW><id>16361393</id><snippet>A[j][i] = A[j][i] - A[j][i]
A[j][i] = 0
</snippet></ROW><ROW><id>16361393</id><snippet>from __future__ import division</snippet></ROW><ROW><id>16361393</id><snippet>from __future__ import division</snippet></ROW><ROW><id>16361393</id><snippet>A[j][i]</snippet></ROW><ROW><id>16361393</id><snippet>A[j][i]</snippet></ROW><ROW><id>16361393</id><snippet>(A[j][i])/(A[i][i])</snippet></ROW><ROW><id>16361492</id><snippet>_compute(self, graph):
    maxValue = 5
    values = {}
    keeper = {}
    values ["graph"] = graph.copy()
    for i in range(1,1000):
        self._process(values )
        if values ["value"] &gt; maxValue:
            keeper = {"graph":values ["graph"], "value":values ["value"]}

_process(self, values):
    graph = values["graph"]
    # Do some graph processing, like make a copy, allocate some memory, add some vertex values, etc... 
    values["value"] = &lt;some value, like 0 to 10&gt;
    values["graph"] = graph
</snippet></ROW><ROW><id>16361492</id><snippet>_compute(self, graph):
    maxValue = 5
    values = {}
    keeper = {}
    values ["graph"] = graph.copy()
    for i in range(1,1000):
        newGraph = self._process(values )
        if values ["value"] &gt; maxValue:
            keeper = {"graph":newGraph, "value":values ["value"]}

_process(self, values):
    graph = values["graph"]
    # Do some graph processing, like make a copy, allocate some memory, add some vertex values, etc... 
    values["value"] = &lt;some value, like 0 to 10&gt;
    return graph
</snippet></ROW><ROW><id>16361507</id><snippet>...

for index,i in enumerate(I_phase):
    F = sum(m*np.cos(2*np.pi*l*x/D) for m,l in zip(i,n))
    f,(ax1,ax2) = plt.subplots(2)
    ax1.plot(x,F,'g')
    ax1.set_title(phase[index])

...
</snippet></ROW><ROW><id>16361777</id><snippet>import pdb; pdb.set_trace()
</snippet></ROW><ROW><id>16362305</id><snippet>def use_string(wrap):
  print wrap.s           # Prints 'olle'
  wrap.s = None          # Resets the reference
  print wrap.s           # Prints 'None'

class wrapper(object):
  pass

a = wrapper()
a.s = "olle"
print a.s                # Prints 'olle'
use_string(a)
print a.s                # Prints 'None'
</snippet></ROW><ROW><id>16362389</id><snippet>#!/usr/bin/env python

APPNAME = "My App"
ICON = "/usr/share/pixmaps/firefox.png"

from gi.repository import AppIndicator3 as AI
from gi.repository import Gtk

def sayhello(item):
    print "menu item selected"

def scroll(aai, ind, steps):
    print "hello" # doesn't print anything

def makemenu():
    ' Set up the menu '
    menu = Gtk.Menu()
    check_item = Gtk.MenuItem('Check')
    exit_item = Gtk.MenuItem('Quit')
    check_item.connect('activate', sayhello)
    check_item.show()
    exit_item.connect('activate', Gtk.main_quit)
    exit_item.show()
    menu.append(check_item)
    menu.append(exit_item)
    menu.show()
    return menu

def startapp():
    ai = AI.Indicator.new(APPNAME, ICON, AI.IndicatorCategory.HARDWARE)
    ai.set_status(AI.IndicatorStatus.ACTIVE)
    ai.set_menu(makemenu())
    ai.connect("scroll-event", scroll)
    Gtk.main()

startapp()
</snippet></ROW><ROW><id>16362428</id><snippet>exists()...scalar() is not None</snippet></ROW><ROW><id>16362428</id><snippet>exists()</snippet></ROW><ROW><id>16362428</id><snippet>if session.query(exists().where(SourcetoPort.src_address == str(packet.dst))).scalar() is not None:
</snippet></ROW><ROW><id>16362428</id><snippet>if session.query(exists().where(SourcetoPort.src_address == str(packet.dst))).scalar():
</snippet></ROW><ROW><id>16362507</id><snippet>chown</snippet></ROW><ROW><id>16362507</id><snippet>chown -R wwwrun:www /home/user1/Develop/
</snippet></ROW><ROW><id>16362507</id><snippet>chmod 777 -R /home/user1/Develop/
</snippet></ROW><ROW><id>16362507</id><snippet>WSGIDaemonProcess flask_dbadmin user=wwwrun group=www threads=5
&lt;VirtualHost *:80&gt;

   ........

   &lt;Directory /home/user1/Develop/ &gt;
       Order allow,deny
       Allow from all
    &lt;/Directory&gt;

   &lt;Files flask_dbadmin.wsgi&gt;
       Order allow,deny
       Allow from all
   &lt;/Files&gt;
&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>16362631</id><snippet>bar = list(foo)
</snippet></ROW><ROW><id>16362631</id><snippet>bar = foo[:]
</snippet></ROW><ROW><id>16362631</id><snippet>foo</snippet></ROW><ROW><id>16362631</id><snippet>bar</snippet></ROW><ROW><id>16362631</id><snippet>dict</snippet></ROW><ROW><id>16362631</id><snippet>set</snippet></ROW><ROW><id>16362631</id><snippet>foo</snippet></ROW><ROW><id>16362631</id><snippet>foo</snippet></ROW><ROW><id>16362631</id><snippet>foo.append(9)</snippet></ROW><ROW><id>16362631</id><snippet>foo</snippet></ROW><ROW><id>16362631</id><snippet>.append</snippet></ROW><ROW><id>16362631</id><snippet>9</snippet></ROW><ROW><id>16362631</id><snippet>bar = foo</snippet></ROW><ROW><id>16362702</id><snippet>set_cols_dtype</snippet></ROW><ROW><id>16362702</id><snippet>'i'</snippet></ROW><ROW><id>16362702</id><snippet>'a'</snippet></ROW><ROW><id>16362702</id><snippet>table = texttable.Texttable()
table.set_cols_dtype(['i',   # integer
                      'a' ]) # automatic
table.add_rows([['int', 'auto'], [330090997180665856, 330090997180665856], [1, 1]])
print table.draw()
</snippet></ROW><ROW><id>16362702</id><snippet>+--------------------+-----------+
|        int         |   auto    |
+====================+===========+
| 330090997180665856 | 3.301e+17 |
+--------------------+-----------+
| 1                  | 1         |
+--------------------+-----------+
</snippet></ROW><ROW><id>16362818</id><snippet>cmp_to_key</snippet></ROW><ROW><id>16362818</id><snippet>class K(object):
    __slots__ = ['obj']
    def __init__(self, obj, *args):
        self.obj = obj
    def __lt__(self, other):
        return mycmp(self.obj, other.obj) &lt; 0
    def __gt__(self, other):
        return mycmp(self.obj, other.obj) &gt; 0
    def __eq__(self, other):
        return mycmp(self.obj, other.obj) == 0
    def __le__(self, other):
        return mycmp(self.obj, other.obj) &lt;= 0
    def __ge__(self, other):
        return mycmp(self.obj, other.obj) &gt;= 0
    def __ne__(self, other):
        return mycmp(self.obj, other.obj) != 0
    def __hash__(self):
        raise TypeError('hash not implemented')
</snippet></ROW><ROW><id>16362818</id><snippet>__lt__</snippet></ROW><ROW><id>16362818</id><snippet>__gt__</snippet></ROW><ROW><id>16362818</id><snippet>cmp</snippet></ROW><ROW><id>16362818</id><snippet>[1, 2, 3]</snippet></ROW><ROW><id>16362818</id><snippet>[K(1), K(2), K(3)]</snippet></ROW><ROW><id>16362818</id><snippet>K(1)</snippet></ROW><ROW><id>16362818</id><snippet>K(2)</snippet></ROW><ROW><id>16362818</id><snippet>K(1)</snippet></ROW><ROW><id>16362818</id><snippet>K(1).__lt__(K(2))</snippet></ROW><ROW><id>16362818</id><snippet>mycmp(1, 2) &lt; 0</snippet></ROW><ROW><id>16362818</id><snippet>cmp</snippet></ROW><ROW><id>16363051</id><snippet>join</snippet></ROW><ROW><id>16363051</id><snippet>&gt;&gt;&gt; lis=[('2.0', '1.01', '0.9'), ('-2.0', '1.12', '0.99')]
&gt;&gt;&gt; ", ".join(", ".join(x) for x in lis)
'2.0, 1.01, 0.9, -2.0, 1.12, 0.99'
</snippet></ROW><ROW><id>16363052</id><snippet>import signal, os

def handler(signum, frame):
    print 'Signal handler called with signal', signum
    raise IOError("Couldn't open device!")

# Set the signal handler and a 5-second alarm
signal.signal(signal.SIGALRM, handler)
signal.alarm(5)

# This open() may hang indefinitely
fd = os.open('/dev/ttyS0', os.O_RDWR)

signal.alarm(0)          # Disable the alarm
</snippet></ROW><ROW><id>16363430</id><snippet>d</snippet></ROW><ROW><id>16363430</id><snippet>c</snippet></ROW><ROW><id>16363430</id><snippet>c</snippet></ROW><ROW><id>16363430</id><snippet>param</snippet></ROW><ROW><id>16363430</id><snippet>c</snippet></ROW><ROW><id>16363430</id><snippet>c = 1
def a(param):
    def b():
        print(param)
    b()
    param = 2

a(c)
</snippet></ROW><ROW><id>16363430</id><snippet>c</snippet></ROW><ROW><id>16363430</id><snippet>c = 1
def a():
    global c
    def b():
        print(c)
    b()
    c = 2

a()
</snippet></ROW><ROW><id>16363430</id><snippet>c = 1
def a(param):
    def b():
        print(param)
    b()
    param = 2
    return param

c = a(c)
</snippet></ROW><ROW><id>16363430</id><snippet>c = 1
def b(param):
    print(param)
def a(param):
    b(param)
    param = 2
    return param

c = a(c)
</snippet></ROW><ROW><id>16363504</id><snippet>loc</snippet></ROW><ROW><id>16363577</id><snippet>class ShadingInfoEncoder(json.JSONEncoder):
    def _iterencode(self, o, markers=None):
        jsonPlaceholderNames = (("_ShaderInfo", ShaderInfo),
                            ("_ShapeInfo", ShapeInfo),
                            ("_NodeInfo", NodeInfo))
        for jsonPlaceholderName, cls in customIterEncode:
            if isinstance(o, cls):
                yield '{"' + jsonPlaceholderName+ '": '
                for chunk in super(ShadingInfoEncoder, self)._iterencode(o, markers):
                    yield chunk
                yield '}'
                break
        else:
            for chunk in super(ShadingInfoEncoder, self)._iterencode(o, markers):
                yield chunk
</snippet></ROW><ROW><id>16363577</id><snippet>class ShadingInfoDecoder(json.JSONDecoder):
    def decode(self, obj):
        obj = super(ShadingInfoDecoder,self).decode(s)
        if isinstance(obj, dict):
            decoders = [("_set",self.setDecode),
                        ("_NodeInfo", self.nodeInfoDecode),
                        ("_ShapeInfo", self.shapeInfoDecode),
                        ("_ShaderInfo", self.shaderInfoDecode)]
            for placeholder, decoder in decoders:
                if placeholder in obj:
                    return decoder(obj[placeholder])
                else:
                    for k in obj:
                        obj[k] = self.recursiveDecode(obj[k])
        elif isinstance(obj, list):
            for x in range(len(obj)):
                obj[x] = self.recursiveDecode(obj[x])

        return obj

    def setDecode(self, v):
        return set(v)

    def nodeInfoDecode(self, v):
        o = NodeInfo()
        o.update(self.recursiveDecode(v))
        return o

    def shapeInfoDecode(self, v):
        o = ShapeInfo()
        o.update(self.recursiveDecode(v))
        return o

    def shaderInfoDecode(self, v):
        o = ShaderInfo()
        o.update(self.recursiveDecode(v))
        return o
</snippet></ROW><ROW><id>16363580</id><snippet>__new__</snippet></ROW><ROW><id>16363580</id><snippet>__new__</snippet></ROW><ROW><id>16363580</id><snippet>__init__</snippet></ROW><ROW><id>16363580</id><snippet>cls._instances.has_key(name)</snippet></ROW><ROW><id>16363580</id><snippet>False</snippet></ROW><ROW><id>16363580</id><snippet>self = object.__new__(cls)</snippet></ROW><ROW><id>16363580</id><snippet>./nodes/</snippet></ROW><ROW><id>16363580</id><snippet>@property</snippet></ROW><ROW><id>16363580</id><snippet>__get__</snippet></ROW><ROW><id>16363580</id><snippet>n.obs</snippet></ROW><ROW><id>16363580</id><snippet>type(n).obs.__get__(n, type(n))</snippet></ROW><ROW><id>16363580</id><snippet>property</snippet></ROW><ROW><id>16363580</id><snippet>__get__</snippet></ROW><ROW><id>16363734</id><snippet>to_html()</snippet></ROW><ROW><id>16363749</id><snippet>max()</snippet></ROW><ROW><id>16363749</id><snippet>key</snippet></ROW><ROW><id>16363749</id><snippet>max(data, key=score)
</snippet></ROW><ROW><id>16363749</id><snippet>min()</snippet></ROW><ROW><id>16364011</id><snippet>python331/bin/pip No such file or directory</snippet></ROW><ROW><id>16364011</id><snippet>bash</snippet></ROW><ROW><id>16364011</id><snippet>$PATH</snippet></ROW><ROW><id>16364011</id><snippet>$ type pip
</snippet></ROW><ROW><id>16364011</id><snippet>pip is hashed (python331/bin/pip)
</snippet></ROW><ROW><id>16364011</id><snippet>bash</snippet></ROW><ROW><id>16364011</id><snippet>$ hash -r
</snippet></ROW><ROW><id>16364011</id><snippet>pip</snippet></ROW><ROW><id>16364269</id><snippet>hello_func</snippet></ROW><ROW><id>16364269</id><snippet>foo.py</snippet></ROW><ROW><id>16364269</id><snippet>def def hello_func():
    print ("Hello, World!")
</snippet></ROW><ROW><id>16364269</id><snippet>bar.py</snippet></ROW><ROW><id>16364269</id><snippet>import foo

foo.hello_func()
</snippet></ROW><ROW><id>16364269</id><snippet>bar.py</snippet></ROW><ROW><id>16364269</id><snippet>hello_module.hello_func</snippet></ROW><ROW><id>16364308</id><snippet>=</snippet></ROW><ROW><id>16364308</id><snippet>==</snippet></ROW><ROW><id>16364308</id><snippet>if place == 0:
        while place==0:
            place == player11(name1,grid)
</snippet></ROW><ROW><id>16364308</id><snippet>place =</snippet></ROW><ROW><id>16364308</id><snippet>place ==</snippet></ROW><ROW><id>16364464</id><snippet>def assert_can_log_in(self):
    ...

def test_1(self):
    self.assert_can_log_in()
    ...

def test_2(self):
    self.assert_can_log_in()
    ...
</snippet></ROW><ROW><id>16364464</id><snippet>class LoggedInTests(unittest.TestCase):
    def setUp(self):
        # test for login or not - your decision

    def test_1(self):
        ...
</snippet></ROW><ROW><id>16365199</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>16365199</id><snippet>p = multiprocessing.Process(target=f, args=('bob',))
p.start()
p.join()
</snippet></ROW><ROW><id>16365199</id><snippet>p</snippet></ROW><ROW><id>16365199</id><snippet>join</snippet></ROW><ROW><id>16365199</id><snippet>p = multiprocessing.Process(target=self.Connection, args=(args1, args2))
</snippet></ROW><ROW><id>16365199</id><snippet>self</snippet></ROW><ROW><id>16365199</id><snippet>multiprocessing</snippet></ROW><ROW><id>16365199</id><snippet>self.Connection</snippet></ROW><ROW><id>16365199</id><snippet>self</snippet></ROW><ROW><id>16365199</id><snippet>MyFrame</snippet></ROW><ROW><id>16365199</id><snippet>wx.Frame</snippet></ROW><ROW><id>16365199</id><snippet>self</snippet></ROW><ROW><id>16365199</id><snippet>Connection</snippet></ROW><ROW><id>16365199</id><snippet>self.connection = …</snippet></ROW><ROW><id>16365199</id><snippet>self</snippet></ROW><ROW><id>16365199</id><snippet>wx.Frame</snippet></ROW><ROW><id>16365199</id><snippet>multiprocessing.Value</snippet></ROW><ROW><id>16365199</id><snippet>multiprocessing.sharedctypes</snippet></ROW><ROW><id>16365199</id><snippet>Queue</snippet></ROW><ROW><id>16365199</id><snippet>Pipe</snippet></ROW><ROW><id>16365199</id><snippet>class Client(object):
    def connect_and_fetch(self):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect(( '192.0.1.135' , 3345 ))
        while True:
            data = self.connection.recv(1024)
            if not data:
                break
            else:
                print data

def do_client():
    client = Client()
    connect_and_fetch()

class MyFrame(wx.Frame):
    # ...
    def Connection(self):
        self.child = multiprocessing.Process(target=do_client)
        self.child.start()
    # and now put a self.child.join() somewhere
</snippet></ROW><ROW><id>16365199</id><snippet>self</snippet></ROW><ROW><id>16365199</id><snippet>wxpython</snippet></ROW><ROW><id>16365199</id><snippet>classmethod</snippet></ROW><ROW><id>16365199</id><snippet>wx</snippet></ROW><ROW><id>16365199</id><snippet>wx</snippet></ROW><ROW><id>16365199</id><snippet>Pipe</snippet></ROW><ROW><id>16365199</id><snippet>Queue</snippet></ROW><ROW><id>16365199</id><snippet>wx.Event</snippet></ROW><ROW><id>16365199</id><snippet>f</snippet></ROW><ROW><id>16365265</id><snippet>[process]</snippet></ROW><ROW><id>16365265</id><snippet>[export]</snippet></ROW><ROW><id>16365265</id><snippet>[export]</snippet></ROW><ROW><id>16365265</id><snippet>ConfigParser</snippet></ROW><ROW><id>16365265</id><snippet>from ConfigParser import RawConfigParser
from StringIO import StringIO

START_PROCESS_TOKEN = '[process]'
END_PROCESS_TOKEN = '[export]'

def hacky_parse(stream):
    state = 0
    ini_io = StringIO()
    python_io = StringIO()
    for line in stream.readlines():
        if state == 0:
            if line.strip() == START_PROCESS_TOKEN:
                state = 1
                continue
            ini_io.write(line)
        elif state == 1:
            if line.strip() == END_PROCESS_TOKEN:
                ini_io.write(line)
                state = 2
                continue
            python_io.write(line)
        else:
            ini_io.write(line)

    ini_io.seek(0)
    python_io.seek(0)

    config_parser = RawConfigParser()
    config_parser.readfp(ini_io)

    python_code = python_io.getvalue()

    return config_parser, python_code


cfg = """
[load]
files=a,b,c

[process]
while 1:
    do_stuff()

[export]
files=x,y,z
"""

my_stream = StringIO(cfg)
config_parser, process_code = hacky_parse(my_stream)
print 'The value of "files" in section "load" is...'
print config_parser.get('load', 'files')
print
print 'The raw Python code is...'
print process_code
</snippet></ROW><ROW><id>16365265</id><snippet>The value of "files" in section "load" is...
a,b,c

The raw Python code is...
while 1:
    do_stuff()
</snippet></ROW><ROW><id>16365265</id><snippet>my_stream</snippet></ROW><ROW><id>16365265</id><snippet>my_stream = open('config.ini', 'r')
</snippet></ROW><ROW><id>16365265</id><snippet>[load]</snippet></ROW><ROW><id>16365265</id><snippet>Load-Files: a,b,c
Export-Files: x,y,z

# Python code starts here
while 1:
    do_stuff()
</snippet></ROW><ROW><id>16365265</id><snippet>import email

cfg = \
"""Load-Files: a,b,c
Export-Files: x,y,z

# Python code starts here
while 1:
    do_stuff()
"""

msg = email.message_from_string(cfg)
print msg.items()
print
print msg.get_payload()
</snippet></ROW><ROW><id>16365265</id><snippet>[('Load-Files', 'a,b,c'), ('Export-Files', 'x,y,z')]

# Python code starts here
while 1:
    do_stuff()
</snippet></ROW><ROW><id>16365450</id><snippet>[key for key,value in sorted(dic.items() ,key=lambda x : x[1]) if value &lt; threshold]
</snippet></ROW><ROW><id>16365450</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>16365450</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; [key for key,value in sorted(dic.items() ,key= itemgetter(1) ) if value &lt; threshold]
</snippet></ROW><ROW><id>16365493</id><snippet>argparse.FileType.__call__</snippet></ROW><ROW><id>16365493</id><snippet>    if string == '-':
        if 'r' in self._mode:
            return _sys.stdin
        elif 'w' in self._mode:
            return _sys.stdout
        else:
            msg = _('argument "-" with mode %r') % self._mode
            raise ValueError(msg)
</snippet></ROW><ROW><id>16365493</id><snippet>self._mode</snippet></ROW><ROW><id>16365493</id><snippet>'a+'</snippet></ROW><ROW><id>16365493</id><snippet>argparse.FileType</snippet></ROW><ROW><id>16365493</id><snippet>import argparse
import sys as _sys

class MyFileType(argparse.FileType):

    def __call__(self, string):
        # the special argument "-" means sys.std{in,out}
        if string == '-':
            if 'r' in self._mode:
                return _sys.stdin
            elif any(m in self._mode for m in 'wa'):
                return _sys.stdout
            else:
                msg = _('argument "-" with mode %r') % self._mode
                raise ValueError(msg)

        # all other arguments are used as file names
        try:
            return open(string, self._mode, self._bufsize)
        except IOError as e:
            message = _("can't open '%s': %s")
            raise ArgumentTypeError(message % (string, e))


def parse_options():
    parser = argparse.ArgumentParser(description='A foo that bars')

    parser.add_argument("-f",
                      "--file", dest="filename", required=True,
                      type=MyFileType('a+'),
                      help="The output file (append mode, see --overwrite).")

    parser.add_argument("-o",
                      "--overwrite", dest="overwrite",
                      action='store_true',
                      help="Will overwrite the filename if it exists")

    args = parser.parse_args()

    if args.overwrite:
        args.filename.truncate(0)
    return args

args = parse_options()
print &gt;&gt; args.filename, 'Hello, World!'
</snippet></ROW><ROW><id>16365619</id><snippet>finished</snippet></ROW><ROW><id>16365619</id><snippet>.disconnect()</snippet></ROW><ROW><id>16365619</id><snippet>self.network_manager.finished.disconnect() #this!!!
self.network_manager.finished.connect(self._update)
</snippet></ROW><ROW><id>16365619</id><snippet>self.network_manager.finished.disconnect() #this!!!
self.network_manager.finished.connect(self.func3)
</snippet></ROW><ROW><id>16365699</id><snippet>csv</snippet></ROW><ROW><id>16365699</id><snippet>title</snippet></ROW><ROW><id>16365699</id><snippet>author</snippet></ROW><ROW><id>16365699</id><snippet>is_read</snippet></ROW><ROW><id>16365699</id><snippet>borrowed_from</snippet></ROW><ROW><id>16365699</id><snippet>sqlite3</snippet></ROW><ROW><id>16365699</id><snippet>sqlite3</snippet></ROW><ROW><id>16365735</id><snippet>variables = {'VarX': 700}
</snippet></ROW><ROW><id>16365888</id><snippet>regex</snippet></ROW><ROW><id>16365888</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; strs='clock[5,4,1,0]'
&gt;&gt;&gt; nums = re.findall("\d+",strs)        #find all the numbers in string
&gt;&gt;&gt; word = re.search("\w+",strs).group() #find the word in the string 

#now iterate over the numbers and use string formatting to get the required output.
&gt;&gt;&gt; [ "{0}[{1}]".format(word,x) for x in nums] 
['clock[5]', 'clock[4]', 'clock[1]', 'clock[0]']
</snippet></ROW><ROW><id>16365964</id><snippet>sudo yum install rpm-build gcc python-devel
wget 'https://pypi.python.org/packages/source/n/numpy/numpy-1.7.1.tar.gz'
tar -xf numpy-1.7.1.tar.gz 
cd numpy-1.7.1/
python setup.py bdist_rpm
sudo yum localinstall dist/numpy-1.7.1-1.i386.rpm
</snippet></ROW><ROW><id>16365964</id><snippet>./dist</snippet></ROW><ROW><id>16366020</id><snippet>newvars</snippet></ROW><ROW><id>16366020</id><snippet>newvars = dict(
    fy = 355.,
    fu = 552.,
    E = 210.E3,
    F = -100.E3,
    k2_2=70.82e6,
    loos=0.0055,
    bmax=3.5e6,
    )
</snippet></ROW><ROW><id>16366020</id><snippet>def TP1_Simply_supported_beam(self, **kwargs):
    # log header
    if self.callsNumber == 0:
        self.logUser.level1(
            ''.join(map(self.padVar, ['N'] + kwargs.keys())) + '\n')

    # log input vars
    self.logUser.level1(
        str(self.callsNumber).ljust(self.pad) + ''.join(map(self.padVar, kwargs.values())
</snippet></ROW><ROW><id>16366020</id><snippet>obj = TP1_Simply_supported_beam_class()
obj.TP1_Simply_supported_beam(**newvars)
</snippet></ROW><ROW><id>16366083</id><snippet>re.findall(r'\d:::.+?(?=\d:::|$)', a)
</snippet></ROW><ROW><id>16366134</id><snippet>for child in protein.find("recommendedName"):
  TypeError: 'NoneType' object is not iterable
</snippet></ROW><ROW><id>16366134</id><snippet>protein.find</snippet></ROW><ROW><id>16366134</id><snippet>None</snippet></ROW><ROW><id>16366134</id><snippet>recommendedName</snippet></ROW><ROW><id>16366134</id><snippet>protein</snippet></ROW><ROW><id>16366134</id><snippet>for child in protein.find("{http://uniprot.org/uniprot}recommendedName")
</snippet></ROW><ROW><id>16366134</id><snippet>for child in protein.xpath("uniprot:recommendedName",
                           namespaces = dict(uniprot='http://uniprot.org/uniprot'))
</snippet></ROW><ROW><id>16366312</id><snippet>self.status = ...</snippet></ROW><ROW><id>16366312</id><snippet>set</snippet></ROW><ROW><id>16366312</id><snippet>class App (object):
  # ...
  def status_line (self, frame):
    statusline = Tkinter.Label(frame, textvariable = self.status)
    statusline.pack()
  # ...

class App_Menu(object):
  def __init__(self, master, text, status):
    # ...
    self.status = status

  # ...
  def load(self):
    self.file=tkFileDialog.askopenfile()
    self.text.delete(1.0, Tkinter.END)
    if self.file:
      self.text.insert(1.0,self.file.read())
      self.status.set("file loaded")

root = Tkinter.Tk()
status = Tkinter.StringVar(root)
status.set("status")
</snippet></ROW><ROW><id>16366401</id><snippet>def puzzle(s,a,b):
    if a*b != len(s):
       print "Not possible"
       return
    start =0
    end = b+1
    output =""
    for i in range(0,a):
        output= output+s[start: end]+"\n"
        start = end+1
        end = end+b
    print output
</snippet></ROW><ROW><id>16366434</id><snippet>elif</snippet></ROW><ROW><id>16366434</id><snippet>import pprint
A = [['point'], ['point', 'floating']]
B = [['floating', 'undefined', 'point'], ['point']]
C = []

for a in A:
    for b in B:
        if a==b:
            C.append([a,b])
        elif all (len(x)&gt;=2 for x in [a,b]) and not set(a).isdisjoint(b):
            C.append([a,b])

pprint.pprint(C)
</snippet></ROW><ROW><id>16366434</id><snippet>[[['point'], ['point']],
 [['point', 'floating'], ['floating', 'undefined', 'point']]]
</snippet></ROW><ROW><id>16366525</id><snippet>$ python setup.py build
$ python setup.py install
</snippet></ROW><ROW><id>16366525</id><snippet>#
# pendulum_demo.py
#
# Use PyGSL to solve the differential equations for a pendulum with
# friction.  Plot the solution using matplotlib.
#

import numpy as np
import matplotlib.pyplot as plt
from pygsl import odeiv


def pendsys(t, y, args):
    """
    The right-hand side of the first order system of differential equations.
    """
    theta, v = y
    g, b, L, m = args

    f = np.zeros((2,))
    f[0] = v
    f[1] = -b * v / (m * L ** 2) - np.sin(theta) * g / L

    return f


def pendjac(t, y, args):
    """
    The Jacobian of the system.
    """
    theta, v = y
    g, b, L, m = args

    jac = np.zeros((2, 2))
    jac[0, 1] = 1.0
    jac[1, 0] = -g / L * np.cos(theta)
    jac[1, 1] = -b / (m * L ** 2)

    dfdt = np.zeros((2,))

    return jac, dfdt


# Pendulum parameter values
#
# Gravitational constant
g = 9.81
# Friction coefficient
b = 0.5
# Pendulum length
L = 1.0
# Pendulum bob mass
m = 2.0

# Initial conditions
theta0 = np.pi - 0.01
v0 = 0.0
y = [theta0, v0]
t = 0

# Solver control parameters.
abserr = 1e-11
relerr = 1e-9

stoptime = 12.0

# Create the GSL ODE solver
N = 2
step    = odeiv.step_rk8pd(N, pendsys, pendjac, args=(g, b, L, m))
control = odeiv.control_y_new(step, abserr, relerr)
evolve  = odeiv.evolve(step, control, N)

# h is the initial step size.
h = stoptime / 500.0

# The time values and points in the solution are saved in the lists
# tsol and ysol, respectively.  The lists are initialized with
# the initial conditions.
tsol = [t]
ysol = [y]

# Call evolve.apply(...) until the solution reaches stoptime
while t &lt; stoptime:
    t, h, y = evolve.apply(t, stoptime, h, y)
    tsol.append(t)
    ysol.append(y)

tsol = np.array(tsol)
ysol = np.array(ysol)

plt.plot(tsol, ysol[:, 0], label=r'$\theta$')
plt.plot(tsol, ysol[:, 1], label='v')
plt.xlabel('t')
plt.grid(True)
plt.legend()
plt.title('Pendulum with Friction')
plt.show()
</snippet></ROW><ROW><id>16366771</id><snippet>a [shape=none label=&lt;&lt;TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0"&gt;
&lt;TR&gt;&lt;TD&gt;&lt;FONT COLOR="red"&gt;0.19&lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD CELLPADDING="6" BGCOLOR="goldenrod2" PORT="p1"&gt;would&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;&gt;]

b -&gt; a:p1:n
</snippet></ROW><ROW><id>16366885</id><snippet>pkg_resources</snippet></ROW><ROW><id>16366927</id><snippet>self.current_action = {'action': self.wait, 'cost': self.speed}
</snippet></ROW><ROW><id>16366927</id><snippet>current_action</snippet></ROW><ROW><id>16366927</id><snippet>__getstate__</snippet></ROW><ROW><id>16366927</id><snippet>__setstate__</snippet></ROW><ROW><id>16366927</id><snippet>partial</snippet></ROW><ROW><id>16366927</id><snippet>__main__</snippet></ROW><ROW><id>16366927</id><snippet>__main__</snippet></ROW><ROW><id>16366929</id><snippet>pydoc</snippet></ROW><ROW><id>16366929</id><snippet>$ python -m pydoc -p 5555
</snippet></ROW><ROW><id>16366929</id><snippet>dir()</snippet></ROW><ROW><id>16366929</id><snippet>&gt;&gt;&gt; dir(object)
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']
&gt;&gt;&gt; dir(dict)
['__class__', '__cmp__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values', 'viewitems', 'viewkeys', 'viewvalues']
</snippet></ROW><ROW><id>16366929</id><snippet>help()</snippet></ROW><ROW><id>16366929</id><snippet>&gt;&gt;&gt;help(dict.get)
get(...)
    D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None.
</snippet></ROW><ROW><id>16366929</id><snippet>pydoc</snippet></ROW><ROW><id>16366929</id><snippet>&gt;&gt;&gt; import pydoc

&gt;&gt;&gt; print pydoc.getdoc(dict)
dict() -&gt; new empty dictionary
dict(mapping) -&gt; new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -&gt; new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)

&gt;&gt;&gt; print pydoc.getdoc(dict.get)
D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None.
</snippet></ROW><ROW><id>16367227</id><snippet>.string</snippet></ROW><ROW><id>16367227</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup('&lt;div&gt;Foo&lt;/div&gt;')
&gt;&gt;&gt; soup.find('div').string
    u'Foo'
&gt;&gt;&gt; type(soup.find('div').string)
    bs4.element.NavigableString
</snippet></ROW><ROW><id>16367227</id><snippet>str(soup.find('div').string)</snippet></ROW><ROW><id>16367259</id><snippet>import</snippet></ROW><ROW><id>16367259</id><snippet>import mymodule

# ...later...
reload(mymodule)
</snippet></ROW><ROW><id>16367600</id><snippet>PHPSESSID</snippet></ROW><ROW><id>16367694</id><snippet>html.document_fromstring()</snippet></ROW><ROW><id>16367694</id><snippet>Element</snippet></ROW><ROW><id>16367694</id><snippet>ElementTree</snippet></ROW><ROW><id>16367694</id><snippet>html.parse(response)</snippet></ROW><ROW><id>16367694</id><snippet>response.read()</snippet></ROW><ROW><id>16367694</id><snippet>/html</snippet></ROW><ROW><id>16367694</id><snippet>.</snippet></ROW><ROW><id>16367694</id><snippet>&lt;html&gt;</snippet></ROW><ROW><id>16367694</id><snippet>data = root.find('./body/div[1]/table/tbody/tr[2]/td[2]/table/tbody/tr/td[2]/div/table/tbody/tr[1]/td[2]/b').text_content()
</snippet></ROW><ROW><id>16367828</id><snippet>__getitem__</snippet></ROW><ROW><id>16367828</id><snippet>collections.abc</snippet></ROW><ROW><id>16367828</id><snippet>foo[bar]
</snippet></ROW><ROW><id>16367828</id><snippet>foo.__getitem__(bar)
</snippet></ROW><ROW><id>16367828</id><snippet>__getitem__</snippet></ROW><ROW><id>16367828</id><snippet>dict</snippet></ROW><ROW><id>16367828</id><snippet>eval</snippet></ROW><ROW><id>16367828</id><snippet>eval</snippet></ROW><ROW><id>16367828</id><snippet>eval</snippet></ROW><ROW><id>16367828</id><snippet>eval</snippet></ROW><ROW><id>16367828</id><snippet>eval("color=='green'",new_dict)
</snippet></ROW><ROW><id>16367828</id><snippet>new_dict['color']=='green'
</snippet></ROW><ROW><id>16367828</id><snippet>eval</snippet></ROW><ROW><id>16367828</id><snippet>partial</snippet></ROW><ROW><id>16367828</id><snippet>expr = "color=='green'"
# ...
eval(expr, new_dict)
</snippet></ROW><ROW><id>16367828</id><snippet>expr = lambda x: x.color=='green'
# ...
expr(new_dict)
</snippet></ROW><ROW><id>16367828</id><snippet>query = "color=={}'.format(color)
# ...
[n for n in mylist if eval(query, Dummy(n)]
</snippet></ROW><ROW><id>16367828</id><snippet>[n for n in mylist if n.color == color]
</snippet></ROW><ROW><id>16367828</id><snippet>query = lambda n: n.color == color
[n for n in mylist if query(n)]
</snippet></ROW><ROW><id>16367828</id><snippet>filter(compose(partial(operator.eq, color), attrgetter('color')), mylist)
</snippet></ROW><ROW><id>16367828</id><snippet>eval</snippet></ROW><ROW><id>16367828</id><snippet>__getitem__</snippet></ROW><ROW><id>16367828</id><snippet>eval</snippet></ROW><ROW><id>16367828</id><snippet>eval</snippet></ROW><ROW><id>16367828</id><snippet>ast</snippet></ROW><ROW><id>16367828</id><snippet>PyEval*</snippet></ROW><ROW><id>16367850</id><snippet>def sum_of_squares_of_digits(value):
    return sum(int(c) ** 2 for c in str(value))
</snippet></ROW><ROW><id>16367850</id><snippet>sum()</snippet></ROW><ROW><id>16367850</id><snippet>&gt;&gt;&gt; def sum_of_squares_of_digits(value):
...     return sum(int(c) ** 2 for c in str(value))
... 
&gt;&gt;&gt; sum_of_squares_of_digits(987)
194
</snippet></ROW><ROW><id>16367986</id><snippet>plt.tight_layout(w_pad=0.4)
</snippet></ROW><ROW><id>16367986</id><snippet>w</snippet></ROW><ROW><id>16367986</id><snippet>h_pad</snippet></ROW><ROW><id>16367986</id><snippet>pad</snippet></ROW><ROW><id>16367994</id><snippet>protein.find()</snippet></ROW><ROW><id>16367994</id><snippet>.find()</snippet></ROW><ROW><id>16367994</id><snippet>None</snippet></ROW><ROW><id>16367994</id><snippet>.findall()</snippet></ROW><ROW><id>16367994</id><snippet>for altName in protein.findall("{http://uniprot.org/uniprot}alternativeName"):
    for child in altName:
        if child.tag == "{http://uniprot.org/uniprot}fullName":
            alt_fullnames.append(child.text)
        if child.tag == "{http://uniprot.org/uniprot}shortName":
            alt_shortnames.append(child.text)
</snippet></ROW><ROW><id>16368100</id><snippet>zip</snippet></ROW><ROW><id>16368100</id><snippet>&gt;&gt;&gt; t1=("string1","string2","string3","string4","string5","string6","string7")
&gt;&gt;&gt; t2=("another string1","another string2",3,None,"another string5",6,7)
</snippet></ROW><ROW><id>16368100</id><snippet>&gt;&gt;&gt; tuple("{0}{1}".format(x if x is not None else "" ,
                             y if y is not None else "") for x,y in zip(t1,t2))
('string1another string1', 'string2another string2', 'string33', 'string4', 'string5another string5', 'string66', 'string77')
</snippet></ROW><ROW><id>16368100</id><snippet>&gt;&gt;&gt; tuple("{0}{1}".format(x,y) for x,y in zip(t1,t2)) #tuple comverts LC to tuple
('string1another string1', 'string2another string2', 'string33', 'string4None', 'string5another string5', 'string66', 'string77')
</snippet></ROW><ROW><id>16368100</id><snippet>None</snippet></ROW><ROW><id>16368100</id><snippet>&gt;&gt;&gt; x = "foo"
&gt;&gt;&gt; x if x is not None else ""
'foo'
&gt;&gt;&gt; x = None
&gt;&gt;&gt; x if x is not None else ""
''
</snippet></ROW><ROW><id>16368227</id><snippet>sqlite</snippet></ROW><ROW><id>16368227</id><snippet>import sqlite3
import contextlib

with contextlib.closing(sqlite3.connect('apr.sqlite')) as connection:
    cursor = connection.cursor()
    cursor.execute('''CREATE TABLE aprtable
                      (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      neighborhood TEXT,
                      income INTEGER,
                      risk_factor INTEGER,
                      apr FLOAT)''')
    connection.commit()
</snippet></ROW><ROW><id>16368227</id><snippet>with contextlib.closing(sqlite3.connect(':memory:')) as connection:
    ....
</snippet></ROW><ROW><id>16368227</id><snippet>sql = 'INSERT INTO aprtable (neighborhood, income, risk_factor, apr) value (?,?,?,?)'
args = ['Brighton', 20000, 10, 0.196]
cursor.execute(sql, args)
</snippet></ROW><ROW><id>16368227</id><snippet>sql = 'SELECT apr FROM aprtable WHERE neighborhood = ? and income = ? and risk_factor = ?'
args = ['Allston', 25000, 5]
cursor.execute(sql, args)
row = cur.fetchone()
if row is not None:
    apr = row[0]
</snippet></ROW><ROW><id>16368227</id><snippet>sql = 'UPDATE aprtable SET apr = ? WHERE neighborhood = ? and income = ? and risk_factor = ?'
args = [0.125, 'Allston', 25000, 5]
cursor.execute(sql, args)
</snippet></ROW><ROW><id>16368227</id><snippet>sql = 'SELECT neighborhoods from aprtable where risk_factor &gt; ?'
args = [8]
cursor.execute(sql, args)
neighborhoods = cur.fetchall()
</snippet></ROW><ROW><id>16368227</id><snippet>sql = 'SELECT neighborhood, income, risk_factor FROM aprtable WHERE apr &lt; ?'
args = [0.10]
cursor.execute(sql, args)
for neighborhood, income, risk_factor in cursor:
    print(neighborhood, income, risk_factor)
</snippet></ROW><ROW><id>16368299</id><snippet>*args</snippet></ROW><ROW><id>16368299</id><snippet>buf = struct.pack('d'*NumElements,data)  # Returns error
</snippet></ROW><ROW><id>16368299</id><snippet>buf = struct.pack('d'*NumElements, *data) # Works
</snippet></ROW><ROW><id>16368485</id><snippet>argparse.HelpFormatter()</snippet></ROW><ROW><id>16368485</id><snippet>def _format_action_invocation(self, action):
    if not action.option_strings:
        metavar, = self._metavar_formatter(action, action.dest)(1)
        return metavar

    else:
        parts = []

        # if the Optional doesn't take a value, format is:
        #    -s, --long
        if action.nargs == 0:
            parts.extend(action.option_strings)

        # if the Optional takes a value, format is:
        #    -s ARGS, --long ARGS
        else:
            default = action.dest.upper()
            args_string = self._format_args(action, default)
            for option_string in action.option_strings:
                parts.append('%s %s' % (option_string, args_string))

        return ', '.join(parts)
</snippet></ROW><ROW><id>16368485</id><snippet>parts.append('%s %s' % (option_string, args_string))</snippet></ROW><ROW><id>16368485</id><snippet>=</snippet></ROW><ROW><id>16368485</id><snippet>argparse</snippet></ROW><ROW><id>16368626</id><snippet>import urllib2
from bs4 import BeautifulSoup

url = "http://www.example.com/downlaod"

site = urllib2.urlopen(url)
html = site.read()
soup = BeautifulSoup(html)

list_urls = soup.find_all('a')

print list_urls[6]
</snippet></ROW><ROW><id>16368626</id><snippet>list_urls[6]['href']</snippet></ROW><ROW><id>16368626</id><snippet>newurl = list_urls[6]['href']
absurl = urlparse.urljoin(site.url, newurl)
</snippet></ROW><ROW><id>16368626</id><snippet>if not absurl.endswith(extensions):
    return # or break or whatever
</snippet></ROW><ROW><id>16368626</id><snippet>page = urllib2.urlopen(absurl)
html = page.read()
path = urlparse.urlparse(absurl).path
name = os.path.basename(path)
with open(name, 'wb') as f:
    f.write(html)
</snippet></ROW><ROW><id>16368626</id><snippet>copyfile</snippet></ROW><ROW><id>16368626</id><snippet>page</snippet></ROW><ROW><id>16368626</id><snippet>f</snippet></ROW><ROW><id>16368626</id><snippet>read</snippet></ROW><ROW><id>16368626</id><snippet>write</snippet></ROW><ROW><id>16368646</id><snippet>class Expr(object):

    def __init__(self, op, left, right):
        self.op = op
        self.left = left
        self.right = right

    def __call__(self, current):
        l = self._replace_current(self.left, current)
        r = self._replace_current(self.right, current)
        return self._do_operation(l, r)

    def _replace_current(self, val, current):
        if val == 'current':
            return current
        elif isinstance(val, Expr):  # recurse
            return val(current)
        else:
            return val

    def _do_operation(self, l, r):
        if self.op == '+':
            return l + r
        elif self.op == '*':
            return l * r
        elif self.op == '-':
            return l - r

    def __add__(self, other):
        return self._left_op('+', other)

    def __radd__(self, other):
        return self._right_op('+', other)

    def __mul__(self, other):
        return self._left_op('*', other)

    def __rmul__(self, other):
        return self._right_op('*', other)

    def __sub__(self, other):
        return self._left_op('-', other)

    def __rsub__(self, other):
        return self._right_op('-', other)

    def _left_op(self, op, other):
        if isinstance(other, Current):
            return Expr(op=op, left=self, right='current')
        else:
            return Expr(op=op, left=self, right=other)

    def _right_op(self, op, other):
        if isinstance(other, Current):
            return Expr(op=op, left='current', right=self)
        else:
            return Expr(op=op, left=other, right=self)


class Current(Expr):

    def __init__(self):
        super(Current, self).__init__(None, None, None)

    def __call__(self, current):
        return current

    def _left_op(self, op, other):
        return Expr(op=op, left='current', right=other)

    def _right_op(self, op, other):
        return Expr(op=op, left=other, right='current')


current = Current()


class YourObj(object):

    def __init__(self, a, b):
        self.a = a
        self.b = b

    def __call__(self, **kw):
        for key, val in kw.iteritems():
            # You should probably make sure it is actually an attribute of YourObj
            if isinstance(val, Expr):
                current = self.a
                new_val = val(current)
                setattr(self, key, new_val)
            else:
                setattr(self, key, val)
</snippet></ROW><ROW><id>16368646</id><snippet>obj = YourObj(a=4, b=5)
obj(a=current - 4 + current * current)
</snippet></ROW><ROW><id>16368646</id><snippet>current</snippet></ROW><ROW><id>16368646</id><snippet>Expr</snippet></ROW><ROW><id>16368646</id><snippet>__add__</snippet></ROW><ROW><id>16368646</id><snippet>__radd__</snippet></ROW><ROW><id>16368646</id><snippet>current + 4 - current</snippet></ROW><ROW><id>16368646</id><snippet>Expr(op='-', left=Expr(op='+', left='current', right=4), right='current')</snippet></ROW><ROW><id>16368646</id><snippet>obj(a=current + 4)</snippet></ROW><ROW><id>16368646</id><snippet>__call__</snippet></ROW><ROW><id>16368646</id><snippet>YourObj</snippet></ROW><ROW><id>16368646</id><snippet>current + 4</snippet></ROW><ROW><id>16368646</id><snippet>a</snippet></ROW><ROW><id>16368683</id><snippet>def simCritics(movies):
    matchingDicts = set()
    for m in movies:
        for i in movies:
            if (len(m) + len(i)) &gt; len(set(m).union(i)):
                matchingDicts.add((m, i))

    myList = [i for i in list(matchingDicts) if i[0] != i[1]]

    myL = []
    for i in myList:
        if (i[1], i[0]) in myL:
            continue
        myL.append(i) 
    return myL
</snippet></ROW><ROW><id>16368844</id><snippet>def triangle(i, t = 0):
    if i == 0:
        print (t+1) *' '+ '*'

    else:
        print ' ' * (t + 1)+ '*' + ' ' * (i * 2 - 1) + '*'
        triangle(i - 1, t + 1)

triangle(5)
</snippet></ROW><ROW><id>16368844</id><snippet> *         *
  *       *
   *     *
    *   *
     * *
      *
</snippet></ROW><ROW><id>16368932</id><snippet>imaplib</snippet></ROW><ROW><id>16368932</id><snippet>mbox</snippet></ROW><ROW><id>16368932</id><snippet>Maildir</snippet></ROW><ROW><id>16368982</id><snippet>C:\BLscan</snippet></ROW><ROW><id>16368982</id><snippet>C:\BLScan&gt;blscan test.ini
</snippet></ROW><ROW><id>16368982</id><snippet>Config name: .\test.ini
</snippet></ROW><ROW><id>16368982</id><snippet>C:\BLScan</snippet></ROW><ROW><id>16368982</id><snippet>C:\BLScan&gt;cd \
C:\&gt;\BLScan\blscan test.ini
</snippet></ROW><ROW><id>16368982</id><snippet>C:\&gt;\BLScan\blscan \BLScan\test.ini
</snippet></ROW><ROW><id>16368982</id><snippet>test.ini</snippet></ROW><ROW><id>16368982</id><snippet>os.chdir('/blscan')
p = subprocess.popen('blscan test.ini')
</snippet></ROW><ROW><id>16368982</id><snippet>p = subprocess.popen(r'\BLScan\blscan \BLScan\test.ini')
</snippet></ROW><ROW><id>16369022</id><snippet>strptime()</snippet></ROW><ROW><id>16369022</id><snippet>strftime()</snippet></ROW><ROW><id>16369022</id><snippet>%Y</snippet></ROW><ROW><id>16369022</id><snippet>ValueError</snippet></ROW><ROW><id>16369022</id><snippet>%y</snippet></ROW><ROW><id>16369117</id><snippet>def process_item(self, item, spider):
    try:
        self.c.execute("""INSERT INTO artist (name, city, style, image_url)
                    VALUES (%s, %s, %s, %s)""",
                       (item['name'][0],
                        item['city'][0],
                        item['style'][0],
                        item['image_paths'],
                       ))

    except MySQLdb.Error, e:
        print "Error %d: %s" % (e.args[0], e.args[1])
        sys.exit(1)

    return item
</snippet></ROW><ROW><id>16369186</id><snippet>Insert Into Strings_Output_tbl (Offset, Strings_out)
Values (%s,%s)
</snippet></ROW><ROW><id>16369291</id><snippet>import itertools

newballs = []
removed = set()
for b1, b2 in itertools.combinations(balls, 2):
    if b1 not in removed and b2 not in removed:
        if b1.does_collide(b2):
            removed.add(b1)
            removed.add(b2)
            newballs.append(b1.collide(b2))

balls = [b for b in balls if b not in removed] + newballs
</snippet></ROW><ROW><id>16369311</id><snippet>'m', 'male', 'boy', 'guy', 'dude'</snippet></ROW><ROW><id>16369311</id><snippet>'f', 'female', 'girl', 'woman'</snippet></ROW><ROW><id>16369311</id><snippet>gender</snippet></ROW><ROW><id>16369311</id><snippet>None</snippet></ROW><ROW><id>16369311</id><snippet>TypeError: Can't convert 'NoneType' object to str implicitly</snippet></ROW><ROW><id>16369311</id><snippet>print</snippet></ROW><ROW><id>16369311</id><snippet>None</snippet></ROW><ROW><id>16369311</id><snippet>'You have chosen '</snippet></ROW><ROW><id>16369311</id><snippet>ChangeGen = input().lower
</snippet></ROW><ROW><id>16369311</id><snippet>lower()</snippet></ROW><ROW><id>16369311</id><snippet>ChangeGen</snippet></ROW><ROW><id>16369311</id><snippet>'y', 'yes', 'yeah', 'yup'</snippet></ROW><ROW><id>16369311</id><snippet>if</snippet></ROW><ROW><id>16369311</id><snippet>while</snippet></ROW><ROW><id>16369311</id><snippet>if</snippet></ROW><ROW><id>16369311</id><snippet>gender</snippet></ROW><ROW><id>16369311</id><snippet>while</snippet></ROW><ROW><id>16369311</id><snippet>if</snippet></ROW><ROW><id>16369311</id><snippet>while ChangeGen in ('y', 'yes', 'yeah', 'yup'):
    genderchoice = gender()
    if gender is not None:
        print ('You have chosen ' + genderchoice + ' as your gender. Do you wish to change this?')
        ChangeGen = input().lower()
</snippet></ROW><ROW><id>16369316</id><snippet>pictures = {}
pictures[get_timestamp] = image_output
</snippet></ROW><ROW><id>16369392</id><snippet>@permalink</snippet></ROW><ROW><id>16369392</id><snippet>get_absolute_url()</snippet></ROW><ROW><id>16369392</id><snippet>class Category(models.Model):
    name = models.CharField(max_length=30, unique=True)

    @models.permalink
    def get_absolute_url(self):
        return ('browser', (), {'category_id': self.id})

class Post(models.Model):
    category = models.ForeignKey(Category)
    title = models.CharField(max_length=256)
    author = models.CharField(max_length=256)
    link = models.URLField(max_length=512)
    dt_published = models.DateTimeField()
    content = models.TextField()

    @models.permalink
    def get_absolute_url(self):
        return ('browser', (), {'category_id': self.category.id, 'post_id': self.id})
</snippet></ROW><ROW><id>16369392</id><snippet>urlpatterns = patterns('whatever.views',
    url(r'^browser/$', 'theview', name="browser"),
    url(r'^browser/(?P&lt;category_id&gt;[0-9]+)/$', 'theview', name="browser"),
    url(r'^browser/(?P&lt;category_id&gt;[0-9]+)/(?P&lt;post_id&gt;[0-9]+)/$', 'theview', name="browser"),
)
</snippet></ROW><ROW><id>16369392</id><snippet>from django.shortcuts import get_object_or_404, render

def theview(request, category_id=None, post_id=None):
    categories = Category.objects.all()
    posts = None
    selected_cat = None
    selected_post = None
    if category_id:
        selected_cat = get_object_or_404(Category, pk=category_id)
        posts = selected_cat.post_set.all()
        if post_id:
            selected_post = posts.filter(pk=post_id)

    return render(
        request,
        'template.html',
        {
            'categories': categories,
            'selected_cat': selected_cat,
            'posts': posts,
            'selected_post': selected_post
        }
    )
</snippet></ROW><ROW><id>16369459</id><snippet>lock</snippet></ROW><ROW><id>16369459</id><snippet>lock = threading.Lock()
with lock:
    thread1.start()
    thread2.start()
</snippet></ROW><ROW><id>16369459</id><snippet>time.sleep(0.001)
thread1.start()
thread2.start()
</snippet></ROW><ROW><id>16369459</id><snippet>thread1 = Mythread(1,"Thread1",5,1)
thread2 = Mythread(2,"Thread2",5,2)
thread1.start()
thread1.join()
thread2.start()
thread2.join()
</snippet></ROW><ROW><id>16369459</id><snippet>class Mythread(threading.Thread):
    def __init__(self,threadID,name,counter,delay,lock):
        threading.Thread.__init__(self)
        self.lock = lock
        # ...
    def run(self):
        with self.lock:
            # ...
</snippet></ROW><ROW><id>16369459</id><snippet>lock = threading.Lock()
thread1 = Mythread(1,"Thread1",5,1, lock)
thread2 = Mythread(2,"Thread2",5,2, lock)
thread1.start()
thread2.start()
# ...
</snippet></ROW><ROW><id>16369459</id><snippet>with</snippet></ROW><ROW><id>16369459</id><snippet>join</snippet></ROW><ROW><id>16369459</id><snippet>join</snippet></ROW><ROW><id>16369459</id><snippet>BoundedSemaphore</snippet></ROW><ROW><id>16369459</id><snippet>Condition</snippet></ROW><ROW><id>16369524</id><snippet>plt.show()</snippet></ROW><ROW><id>16369524</id><snippet>plt.subplots_adjust(top=.9, bottom=.1, hspace=.1, left=.1, right=.9, wspace=.1)
</snippet></ROW><ROW><id>16369524</id><snippet>[0, 1]</snippet></ROW><ROW><id>16369524</id><snippet>hspace</snippet></ROW><ROW><id>16369524</id><snippet>wspace</snippet></ROW><ROW><id>16369524</id><snippet>plt.show()</snippet></ROW><ROW><id>16369524</id><snippet>plt.subplots_adjust(top=.83, bottom=.08, left=.08, right=.98)
</snippet></ROW><ROW><id>16369524</id><snippet>tight_layout()</snippet></ROW><ROW><id>16369524</id><snippet>plt.show()</snippet></ROW><ROW><id>16369524</id><snippet>plt.tight_layout()
</snippet></ROW><ROW><id>16369662</id><snippet>class Tree(object):
  def __init__(self, data):
    self.data = data
    self.branches = []
  def __str__(self):
    return self.tree_string(0)

  def tree_string(self, indent):
    indentation = indent * " "
    result = indentation + str(self.data) + "\n";
    for branch in self.branches:
      result += indentation + branch.label + ": \n" + branch.node.tree_string(indent + 2)
    return result

class Branch(object):
  def __init__(self, value):
    self.label = value
    self.node = None

tree = Tree(4)
b1 = Branch('Somewhat')
b1.node = Tree('Yes')
b2 = Branch('Fuller')
b2.node = Tree(3)
tree.branches = [b1, b2]
b3 = Branch('Correct')
b3.node = Tree(8)
b2.node.branches = [b3]
print(tree)
</snippet></ROW><ROW><id>16369662</id><snippet>4
Somewhat: 
  Yes
Fuller: 
  3
  Correct: 
    8
</snippet></ROW><ROW><id>16369919</id><snippet>mentionedlist=[[1,2,3,4],[1,2,3,4],[2,3,4,5],[3,4,5,5],[1,2,3,4],[1,2,3,4],[]]
for l1, l2 in zip(mentionedlist, mentionedlist[1:]):
    print l1, l2
</snippet></ROW><ROW><id>16369919</id><snippet>[1, 2, 3, 4] [1, 2, 3, 4]
[1, 2, 3, 4] [2, 3, 4, 5]
[2, 3, 4, 5] [3, 4, 5, 5]
[3, 4, 5, 5] [1, 2, 3, 4]
[1, 2, 3, 4] [1, 2, 3, 4]
[1, 2, 3, 4] []
</snippet></ROW><ROW><id>16369919</id><snippet>for l1, l2 in zip(mentionedlist, mentionedlist[1:]):
    if len(l1) == len(l2) and sum(x != y for x,y in zip(l1, l2)) == 0:
        print l1, l2
</snippet></ROW><ROW><id>16369919</id><snippet>[1, 2, 3, 4] [1, 2, 3, 4]
[1, 2, 3, 4] [1, 2, 3, 4]
</snippet></ROW><ROW><id>16370018</id><snippet>index = 1
print ("\nFace Frequency")
while index &lt; (len(dieCount)):
    output = str(index)
    for number in range(dieCount[index]):
        output += "*"
    print(output)
    index = index + 1 
</snippet></ROW><ROW><id>16370018</id><snippet>import random

dieCount = [0]*10

for i in range(3):
    dieCount[random.randint(0,9)] += 1

for i,v in enumerate(dieCount):
    print(str(i) + v * '*')
</snippet></ROW><ROW><id>16370026</id><snippet>warp</snippet></ROW><ROW><id>16370096</id><snippet>zlib.decompressobj()</snippet></ROW><ROW><id>16370128</id><snippet>桌面</snippet></ROW><ROW><id>16370128</id><snippet>/home/jsying/flaskr/</snippet></ROW><ROW><id>16370303</id><snippet>string.format</snippet></ROW><ROW><id>16370303</id><snippet>"|      {0: &gt;2d}     |       |      {1: &gt;2d}    |".format(Die1,Die2)
</snippet></ROW><ROW><id>16370303</id><snippet>{}</snippet></ROW><ROW><id>16370303</id><snippet>0</snippet></ROW><ROW><id>16370303</id><snippet>1</snippet></ROW><ROW><id>16370303</id><snippet>&gt;</snippet></ROW><ROW><id>16370303</id><snippet>2</snippet></ROW><ROW><id>16370303</id><snippet>d</snippet></ROW><ROW><id>16370335</id><snippet>.format</snippet></ROW><ROW><id>16370335</id><snippet>sql_pattern = 'INSERT INTO Table(column1, column2, column3...) VALUES(%s, %s.....)'

...
  cursor.execute(sql_pattern, (item["attr1"], item["attr2"]...,))
</snippet></ROW><ROW><id>16370335</id><snippet>.exectue</snippet></ROW><ROW><id>16370335</id><snippet>%s</snippet></ROW><ROW><id>16370335</id><snippet>sql_patter</snippet></ROW><ROW><id>16370335</id><snippet>.execute</snippet></ROW><ROW><id>16370641</id><snippet>T1                      T2
read queue/1     
                        read queue/1
                        write lock/1
                        delete queue/1
                        delete lock/1
write lock/1 
delete queue/1 (FAIL, no node!)
</snippet></ROW><ROW><id>16370878</id><snippet>myList</snippet></ROW><ROW><id>16370878</id><snippet>self.myList</snippet></ROW><ROW><id>16370878</id><snippet>self.myList</snippet></ROW><ROW><id>16370878</id><snippet>_myList</snippet></ROW><ROW><id>16370878</id><snippet>extend</snippet></ROW><ROW><id>16370878</id><snippet>extend</snippet></ROW><ROW><id>16370878</id><snippet>None</snippet></ROW><ROW><id>16370878</id><snippet>mL1.myList</snippet></ROW><ROW><id>16370878</id><snippet>globalList = []
class MyList(object):
    def __init__(self):
        self.myList = [1, 2, 3]

    @property
    def myList(self):
        return self._myList + globalList
    @myList.setter
    def myList(self, val):
        self._myList = val
</snippet></ROW><ROW><id>16370878</id><snippet>class MyList:</snippet></ROW><ROW><id>16370878</id><snippet>class MyList(object):</snippet></ROW><ROW><id>16371447</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt;
&gt;&gt;&gt; x = np.array([10., 20., np.nan, 40., 50., np.nan, np.nan, np.nan, 10.,0.,-10.])
&gt;&gt;&gt; y = np.zeros_like(x, dtype=int)
&gt;&gt;&gt; y[np.where(np.isnan(x))] = 1 # Locate where the array is nan
&gt;&gt;&gt; y
array([0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0])
&gt;&gt;&gt; z = []
&gt;&gt;&gt; for a, b in groupby(y, lambda x: x == 0):
...     if a: # Where the value is 0, simply append to the list
...         z.extend(list(b))
...     else: # Where the value is one, replace 1 with the number of sequential 1's
...         l = len(list(b))
...         z.extend([l]*l)
&gt;&gt;&gt; z
[0, 0, 1, 0, 0, 3, 3, 3, 0, 0, 0]
</snippet></ROW><ROW><id>16371523</id><snippet>soup.findAll(True, {'class': re.compile(r'\bsuper_class1\b')})
</snippet></ROW><ROW><id>16371576</id><snippet>SourcePort</snippet></ROW><ROW><id>16371576</id><snippet>Base</snippet></ROW><ROW><id>16371576</id><snippet>class SourcePort...</snippet></ROW><ROW><id>16371576</id><snippet>SourcePort</snippet></ROW><ROW><id>16371576</id><snippet>SourcePort</snippet></ROW><ROW><id>16371576</id><snippet>SourcePort</snippet></ROW><ROW><id>16371576</id><snippet>SourcePort</snippet></ROW><ROW><id>16371620</id><snippet>)</snippet></ROW><ROW><id>16371620</id><snippet>os.path.abspath(os.path.dirname(__file__)) #use __file__ not _file_
</snippet></ROW><ROW><id>16371787</id><snippet>is_accessible</snippet></ROW><ROW><id>16371787</id><snippet>_handle_view</snippet></ROW><ROW><id>16372011</id><snippet>main</snippet></ROW><ROW><id>16372011</id><snippet>def main ():
    a_reader = open ('C:\\Users\\filexxx.csv','r')      

    fileName = a_reader.read()

    a_reader.close()
    return fileName

print(main())
</snippet></ROW><ROW><id>16372011</id><snippet>class main():
    def __init__(self):
        a_reader = open ('C:\\Users\\filexxx.csv','r')
        self.fileName = a_reader.read()
        a_reader.close()
    def _print(self):
        print(self.fileName)

a = main()
a._print()
</snippet></ROW><ROW><id>16372011</id><snippet>print</snippet></ROW><ROW><id>16372011</id><snippet>def main ():
    a_reader = open ('C:\\Users\\filexxx.csv','r')
    fileName = a_reader.read()
    a_reader.close()

    def _print():
        print fileName

    _print()

main()
</snippet></ROW><ROW><id>16372011</id><snippet>r'..'</snippet></ROW><ROW><id>16372039</id><snippet>'first'   -&gt; matched
':'       -&gt; not in the character class but, as the pattern can be empty due 
             to the *, an empty string is matched --&gt;''
'second'  -&gt; matched
'$'       -&gt; can contain an empty string before,
             an empty string is matched --&gt;''
</snippet></ROW><ROW><id>16372039</id><snippet>re.findall()</snippet></ROW><ROW><id>16372039</id><snippet>re.sub()</snippet></ROW><ROW><id>16372039</id><snippet>re.sub('(?:Choucroute garnie)*', '#', 'ornithorynque') 
</snippet></ROW><ROW><id>16372039</id><snippet>print re.sub('(?:nithorynque)*', '#', 'ornithorynque')
</snippet></ROW><ROW><id>16372081</id><snippet>&gt;&gt;&gt; new_lis = sorted(lis,key=lambda x : (x[0],x[2]),reverse = True) #lis is your list

&gt;&gt;&gt; new_lis
[('abilty', 'ability', 14, 1), ('aand', 'and', 38093, 1), ('aand', 'band', 38093, 1), ('aand', 'iand', 38093, 1), ('aand', 'fand', 38093, 1), ('aand', 'hand', 817, 1), ('aand', 'land', 272, 1), ('aand', 'wand', 14, 1), ('aand', 'sand', 14, 1)]
</snippet></ROW><ROW><id>16372081</id><snippet>itertools.groupby</snippet></ROW><ROW><id>16372081</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; [next(v) for k,v in groupby(new_lis,key=lambda x:x[0])]
[('abilty', 'ability', 14, 1), ('aand', 'and', 38093, 1)]
</snippet></ROW><ROW><id>16372081</id><snippet>O(NlogN)</snippet></ROW><ROW><id>16372081</id><snippet>collections.defauldict</snippet></ROW><ROW><id>16372081</id><snippet>O(N)</snippet></ROW><ROW><id>16372081</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; dic=defaultdict(list)
&gt;&gt;&gt; for x in lis:
...     dic[x[0]].append(x)
...     
&gt;&gt;&gt; [max(val,key=lambda x: x[2]) for val in dic.values()]
[('aand', 'and', 38093, 1), ('abilty', 'ability', 14, 1)]
</snippet></ROW><ROW><id>16372436</id><snippet>__getattribute__</snippet></ROW><ROW><id>16372436</id><snippet>__getattr__</snippet></ROW><ROW><id>16372436</id><snippet>__pow__</snippet></ROW><ROW><id>16372436</id><snippet>__gt__</snippet></ROW><ROW><id>16372436</id><snippet>operator</snippet></ROW><ROW><id>16372436</id><snippet>import operator
operator_hooks = [name for name in dir(operator) if name.startswith('__') and name.endswith('__')]
</snippet></ROW><ROW><id>16372436</id><snippet>def instrument_operator_hooks(cls):
    def add_hook(name):
        operator_func = getattr(operator, name.strip('_'), None)
        existing = getattr(cls, name, None)

        def op_hook(self, *args, **kw):
            print "Hooking into {}".format(name)
            self._function = operator_func
            self._params = (args, kw)
            if existing is not None:
                return existing(self, *args, **kw)
            raise AttributeError(name)

        try:
            setattr(cls, name, op_hook)
        except (AttributeError, TypeError):
            pass  # skip __name__ and __doc__ and the like

    for hook_name in operator_hooks:
        add_hook(hook_name)
    return cls
</snippet></ROW><ROW><id>16372436</id><snippet>@instrument_operator_hooks
class CatchAll(object):
    pass
</snippet></ROW><ROW><id>16372436</id><snippet>&gt;&gt;&gt; c = CatchAll()
&gt;&gt;&gt; c ** 2
Hooking into __pow__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 11, in op_hook
AttributeError: __pow__
&gt;&gt;&gt; c._function
&lt;built-in function pow&gt;
&gt;&gt;&gt; c._params
((2,), {})
</snippet></ROW><ROW><id>16372436</id><snippet>__pow__</snippet></ROW><ROW><id>16372660</id><snippet>from itertools import chain
def get_events(widget):
    return set(chain.from_iterable(widget.bind_class(cls) for cls in widget.bindtags()))

root = Tk()
a = get_events(Button())
print(a)
root.destroy()

&gt;&gt;&gt; {'&lt;KeyRelease-Alt_R&gt;', '&lt;Enter&gt;', '&lt;Key-space&gt;', '&lt;Button-1&gt;', '&lt;Key-Alt_R&gt;', '&lt;KeyRelease-F10&gt;', '&lt;&lt;PrevWindow&gt;&gt;', '&lt;Alt-Key&gt;', '&lt;Alt-KeyRelease&gt;', '&lt;ButtonRelease-1&gt;', '&lt;Leave&gt;', '&lt;KeyRelease-Alt_L&gt;', '&lt;Key-Alt_L&gt;', '&lt;Key-F10&gt;', '&lt;Key-Tab&gt;'}
</snippet></ROW><ROW><id>16372864</id><snippet>factory = protocol.ServerFactory()
factory.protocol = TrackerServer
factory.protocol.decoder = deco
</snippet></ROW><ROW><id>16372864</id><snippet>factory.protocol = TrackerServer
</snippet></ROW><ROW><id>16372864</id><snippet>factory.protocol</snippet></ROW><ROW><id>16372864</id><snippet>TrackerServer</snippet></ROW><ROW><id>16372864</id><snippet>TrackerServer.decoder = deco
</snippet></ROW><ROW><id>16372864</id><snippet>factory.decoder = deco</snippet></ROW><ROW><id>16372864</id><snippet>self.factory.decoder</snippet></ROW><ROW><id>16372864</id><snippet>self.decoder</snippet></ROW><ROW><id>16373060</id><snippet>mask = X&gt;0
BX_OUT = Bx.copy()
BZ_OUT = Bz.copy()
BX_OUT[mask] = None
BZ_OUT[mask] = None
res = plt.streamplot(X, Z, BX_OUT, BZ_OUT, color='k', 
           arrowstyle='-',linewidth=1,density=2)
</snippet></ROW><ROW><id>16373060</id><snippet>lines = res.lines.get_paths()
for l in lines:
    plot(-l.vertices.T[0],l.vertices.T[1],'k')
</snippet></ROW><ROW><id>16373165</id><snippet>field</snippet></ROW><ROW><id>16373165</id><snippet>fields = ('user')
</snippet></ROW><ROW><id>16373165</id><snippet>fields = ('user',)
</snippet></ROW><ROW><id>16373249</id><snippet>result</snippet></ROW><ROW><id>16373249</id><snippet>def testing(a,b):
    result = []
    for count in range(a,b):
        result.append(0)
    return result
</snippet></ROW><ROW><id>16373249</id><snippet>result = testing(0,10)
print result
</snippet></ROW><ROW><id>16373249</id><snippet>result = []</snippet></ROW><ROW><id>16373249</id><snippet>testing</snippet></ROW><ROW><id>16373280</id><snippet>&lt;table border</snippet></ROW><ROW><id>16373280</id><snippet>/table&gt;</snippet></ROW><ROW><id>16373280</id><snippet>with open('in') as inf, open('out', 'w') as outf:
    while True:
        line = inf.readline()
        if '&lt;table border' in line:
            while True:
                line = inf.readline()
                if not line or '/table&gt;' in line:
                    line = inf.readline()
                    break
        if not line:
            break
        outf.write(line)
</snippet></ROW><ROW><id>16373411</id><snippet>scipy.weave</snippet></ROW><ROW><id>16373411</id><snippet>arrs = list()
for i in xrange(5):
    arrs.append(np.arange(i * i, dtype=int))
code = r"""
    long arrs_size = PyList_Size(arrs);
    for (long i=0; i&lt;arrs_size; i++) {
        PyArrayObject* arr_array = convert_to_numpy(PyList_GetItem(arrs,i), "arr");
        conversion_numpy_check_type(arr_array,PyArray_LONG, "arr");
        npy_intp* Narr = arr_array-&gt;dimensions;
        npy_intp* Sarr = arr_array-&gt;strides;
        int Darr = arr_array-&gt;nd;
        long* arr = (long*) arr_array-&gt;data;
        long arr_size = 1;
        for (int n=0; n&lt;Darr; n++) arr_size *= Narr[n];
        for (int j=0; j&lt;arr_size; j++) printf("%ld ", arr[j]);
        printf("\n");
    }
"""
inline(code, ['arrs'])
</snippet></ROW><ROW><id>16373516</id><snippet>tuple()</snippet></ROW><ROW><id>16373516</id><snippet>list()</snippet></ROW><ROW><id>16373516</id><snippet>[tuple((fir[0], fir[1]*sec[1], fir[2]*sec[2]) for fir in first_lst)\
                               for sec in second_lst if fir[0] == sec[0]]
</snippet></ROW><ROW><id>16373516</id><snippet>&gt;&gt;&gt; first_lst=[ tuple(float(y) for y in x) for x in first_lst ]
&gt;&gt;&gt; second_lst=[ tuple(float(y) for y in x) for x in second_lst ]

&gt;&gt;&gt; [((fir[0],)+tuple(x*y for x,y in zip( fir[1:],sec[1:] ) )) \
                  for fir in first_lst for sec in second_lst if fir[0]==sec[0] ]
[(-2.5, 0.9359, 1.0555999999999999), (-2.0, 0.9516000000000001, 1.04)]
</snippet></ROW><ROW><id>16373528</id><snippet>&gt;&gt;&gt; 3000 / (1500 * 2000)
0
&gt;&gt;&gt; 3000.0 / (1500 * 2000) # or use float(3000)
0.001
&gt;&gt;&gt; float(3000) / (1500 * 2000)
0.001
</snippet></ROW><ROW><id>16373528</id><snippet>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; 3000.0 / (1500 * 2000)
0.001
</snippet></ROW><ROW><id>16373709</id><snippet>r</snippet></ROW><ROW><id>16373709</id><snippet>b</snippet></ROW><ROW><id>16373709</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; spacereplace = re.compile(r'(?&lt;!\band)(?&lt;!\bor)\s(?!or\b)(?!and\b)', re.I)
&gt;&gt;&gt; q = "a b (c or d)"
&gt;&gt;&gt; spacereplace.sub(" and ", q)
'a and b and (c or d)' 
</snippet></ROW><ROW><id>16373709</id><snippet>DEBUG</snippet></ROW><ROW><id>16373709</id><snippet>re.DEBUG</snippet></ROW><ROW><id>16373709</id><snippet>\b</snippet></ROW><ROW><id>16373709</id><snippet>&gt;&gt;&gt; spacereplace = re.compile(b'(?&lt;!\band)(?&lt;!\bor)\s(?!or\b)(?!and\b)', re.I | re.DEBUG)
assert_not -1
  literal 8
  literal 97
  literal 110
  literal 100
assert_not -1
  literal 8
  literal 111
  literal 114
in
  category category_space
assert_not 1
  literal 111
  literal 114
  literal 8
assert_not 1
  literal 97
  literal 110
  literal 100
  literal 8


&gt;&gt;&gt; spacereplace = re.compile(r'(?&lt;!\band)(?&lt;!\bor)\s(?!or\b)(?!and\b)', re.I | re.DEBUG)
assert_not -1
  at at_boundary
  literal 97
  literal 110
  literal 100
assert_not -1
  at at_boundary
  literal 111
  literal 114
in
  category category_space
assert_not 1
  literal 111
  literal 114
  at at_boundary
assert_not 1
  literal 97
  literal 110
  literal 100
  at at_boundary
</snippet></ROW><ROW><id>16373923</id><snippet>flask.py</snippet></ROW><ROW><id>16373923</id><snippet>~/Projects/example</snippet></ROW><ROW><id>16374184</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'A':[11,11,22,22],'mask':[0,0,0,1],'values':np.arange(10,30,5)})
&gt;&gt;&gt; 
&gt;&gt;&gt; grouped = df.groupby("A")
&gt;&gt;&gt; 
&gt;&gt;&gt; result = grouped.agg('first')
&gt;&gt;&gt; result
    mask  values
A               
11     0      10
22     0      20
</snippet></ROW><ROW><id>16374184</id><snippet>&gt;&gt;&gt; def calculate_df_stats(dfs):
...     mask_ = list(dfs['mask'])
...     mean = np.ma.array(list(dfs['values']), mask=mask_).mean()
...     return mean
... 
&gt;&gt;&gt; result['Z'] = grouped.apply(calculate_df_stats)
&gt;&gt;&gt; 
&gt;&gt;&gt; result
    mask  values     Z
A                     
11     0      10  12.5
22     0      20  20.0
</snippet></ROW><ROW><id>16374272</id><snippet>text_wrong2 = ' '.join(map(str,[1,2,3,4," "," "," ",8,9]))</snippet></ROW><ROW><id>16374272</id><snippet>grid</snippet></ROW><ROW><id>16374272</id><snippet>place</snippet></ROW><ROW><id>16374272</id><snippet>Label</snippet></ROW><ROW><id>16374272</id><snippet>from Tkinter import *

root = Tk()

text_good = [1,2,3,4,5,6,7,8,9]
text_wrong1 = [1,2,3,4,0,0,0,8,9]
text_wrong2 = [1,2,3,4," "," "," ",8,9]

def create_box(text_list, **grid_options):
    frame = Frame(root, bg="red")
    for i, text in enumerate(text_list):
        Label(frame, text=text, bg="red").grid(row=i//3, column=i%3)
    frame.grid(**grid_options)

create_box(text_good, row=0, column=0, padx=10)
create_box(text_wrong1, row=0, column=1, padx=10)
create_box(text_wrong2, row=0, column=2, padx=10)

root.mainloop()
</snippet></ROW><ROW><id>16374347</id><snippet>iloc[-2]</snippet></ROW><ROW><id>16374347</id><snippet>loc</snippet></ROW><ROW><id>16374347</id><snippet>In [2]: df = DataFrame(np.random.randn(4,4),columns=list('ABCD'),
             index=date_range('20000103',periods=4))

In [3]: df
Out[3]: 
                   A         B         C         D
2000-01-03 -0.132896 -0.151352  0.960943 -0.007701
2000-01-04 -1.653279 -1.101331 -2.083493 -1.920517
2000-01-05 -1.190868  0.983487  0.804209  0.962575
2000-01-06  0.232290  2.152097  0.414457  1.023253

In [6]: df.loc[:,df.iloc[-2]&lt;0]
Out[6]: 
                   A
2000-01-03 -0.132896
2000-01-04 -1.653279
2000-01-05 -1.190868
2000-01-06  0.232290
</snippet></ROW><ROW><id>16374553</id><snippet>dict()</snippet></ROW><ROW><id>16374553</id><snippet>&gt;&gt;&gt; lis=['A:1','B:2','C:3','D:4']
&gt;&gt;&gt; dict(x.split(":") for x in lis)
{'A': '1', 'C': '3', 'B': '2', 'D': '4'}
</snippet></ROW><ROW><id>16374553</id><snippet>&gt;&gt;&gt; {k:v for k,v in (e.split(':') for e in lis)}
{'A': '1', 'C': '3', 'B': '2', 'D': '4'}
</snippet></ROW><ROW><id>16374553</id><snippet>&gt;&gt;&gt; from so import *
&gt;&gt;&gt; %timeit case1()
1 loops, best of 3: 2.09 s per loop
&gt;&gt;&gt; %timeit case2()
1 loops, best of 3: 2.03 s per loop
&gt;&gt;&gt; %timeit case3()
1 loops, best of 3: 2.17 s per loop
&gt;&gt;&gt; %timeit case4()
1 loops, best of 3: 2.39 s per loop
&gt;&gt;&gt; %timeit case5()
1 loops, best of 3: 2.82 s per loop
</snippet></ROW><ROW><id>16374553</id><snippet>a = ["{0}:{0}".format(i**2) for i in xrange(10**6)]

def case1():
    dc = {}
    for i in a:
        q, w = i.split(':')
        dc[q]=w

def case2():
    dict(x.split(":") for x in a)


def case3():
    {k:v for k,v in (e.split(':') for e in a)}

def case4():
    dict([x.split(":") for x in a])

def case5():
    {x.split(":")[0] : x.split(":")[1] for x in a}
</snippet></ROW><ROW><id>16374655</id><snippet>$ python tasks.py call tasks.add --args='[1,2]'
96307fbd-81be-4e1d-964b-fb11425c60db
$ python tasks.py call tasks.add --args='[1,2]'
d4d250e0-5f6c-464d-96bf-f84435e0f4d6
</snippet></ROW><ROW><id>16374790</id><snippet>celery.control.cancel_consumer('celery')
</snippet></ROW><ROW><id>16374790</id><snippet>celery.control.add_consumer('celery')
</snippet></ROW><ROW><id>16374807</id><snippet>a = "SELECT * FROM Table1 WHERE Date &lt;= '%s'" % get_est()
</snippet></ROW><ROW><id>16374887</id><snippet>double_list</snippet></ROW><ROW><id>16374887</id><snippet>double_list</snippet></ROW><ROW><id>16374887</id><snippet>return double_list(x)
</snippet></ROW><ROW><id>16374887</id><snippet>n = [3, 5, 7]

def double_list(x):
    for i in range(0, len(x)):
        x[i] = x[i] * 2
    return x

print double_list(n)
</snippet></ROW><ROW><id>16375053</id><snippet>io.TextIOWrapper()</snippet></ROW><ROW><id>16375053</id><snippet>urllib</snippet></ROW><ROW><id>16375053</id><snippet>reader_input = io.TextIOWrapper(urlopen(url), encoding='utf8', newline='')
</snippet></ROW><ROW><id>16375053</id><snippet>csv.reader</snippet></ROW><ROW><id>16375053</id><snippet>&gt;&gt;&gt; for sec in map(SecurityType._make, reader(reader_input)):
...     print(sec)
... 
SecurityType(sector='Market Sector', name='Security Type')
SecurityType(sector='Comdty', name='Calendar Spread Option')
SecurityType(sector='Comdty', name='Financial commodity future.')
SecurityType(sector='Comdty', name='Financial commodity generic.')
SecurityType(sector='Comdty', name='Financial commodity option.')
...
SecurityType(sector='Muni', name='ZERO COUPON, OID')
SecurityType(sector='Pfd', name='PRIVATE')
SecurityType(sector='Pfd', name='PUBLIC')
SecurityType(sector='', name='')
SecurityType(sector='', name='')
SecurityType(sector='', name='')
SecurityType(sector='', name='')
SecurityType(sector='', name='')
SecurityType(sector='', name='')
SecurityType(sector='', name='')
SecurityType(sector='', name='')
SecurityType(sector='', name='')
</snippet></ROW><ROW><id>16375061</id><snippet>binary_search()</snippet></ROW><ROW><id>16375061</id><snippet>struct iterator
{
    // typedefs required for fully compliant STL-style iterators
    typedef PyObject* value_type;

    iterator(PyObject* seqeunce, Py_ssize_t position):
        m_sequence(sequence), m_position(position)
    {
        assert(PySequence_Check(m_sequence));
        assert(m_position &gt;= 0);
        assert(m_position &lt;= PySequence_GetSize(m_sequence));
    }
    value_type operator*() const
    {
        assert(m_position &lt; PySequence_GetSize(m_sequence));
        return PySequence_GetItem(m_sequence, m_position);
    }
    iterator&amp; operator++()
    {
        assert(m_position &lt;= PySequence_GetSize(m_sequence));
        ++m_position;
        return *this;
    }
    iterator&amp; operator+=(size_t l)
    {
        m_position += l;
        return *this;
    }
};
</snippet></ROW><ROW><id>16375061</id><snippet>binary_search()</snippet></ROW><ROW><id>16375240</id><snippet>shutil.rmtree()</snippet></ROW><ROW><id>16375611</id><snippet>tkinter.messagebox</snippet></ROW><ROW><id>16375611</id><snippet>tkinter.__init__.py</snippet></ROW><ROW><id>16375611</id><snippet>import tkinter
tkinter.messagebox  # would raise an ImportError
from tkinter import messagebox
tkinter.messagebox  # now it's available eiter as `messagebox` or `tkinter.messagebox`
</snippet></ROW><ROW><id>16375763</id><snippet>sort()</snippet></ROW><ROW><id>16375763</id><snippet>sorted()</snippet></ROW><ROW><id>16376065</id><snippet>numpy</snippet></ROW><ROW><id>16376065</id><snippet>z=1</snippet></ROW><ROW><id>16376065</id><snippet>z=0</snippet></ROW><ROW><id>16376065</id><snippet>range(0, x-1)</snippet></ROW><ROW><id>16376065</id><snippet>x-1</snippet></ROW><ROW><id>16376065</id><snippet>range(x)</snippet></ROW><ROW><id>16376065</id><snippet>r &gt; 120</snippet></ROW><ROW><id>16376065</id><snippet>g &gt; 100</snippet></ROW><ROW><id>16376065</id><snippet>b &gt; 100</snippet></ROW><ROW><id>16376065</id><snippet>&gt;&gt;&gt; r = np.random.randint(0, 255, size=(8,8))
&gt;&gt;&gt; g = np.random.randint(0, 255, size=(8,8))
&gt;&gt;&gt; b = np.random.randint(0, 255, size=(8,8))
</snippet></ROW><ROW><id>16376065</id><snippet>&gt;&gt;&gt; (r &gt; 120) &amp; ~(g &gt; 100) &amp; ~(b &gt; 100)
array([[False,  True, False, False, False, False, False, False],
       [False, False,  True, False, False, False, False, False],
       [False,  True, False, False, False, False, False, False],
       [False, False, False,  True, False,  True, False, False],
       [False, False, False, False, False, False, False, False],
       [False,  True, False, False, False, False, False, False],
       [False, False, False, False, False, False, False, False],
       [False, False, False, False, False, False, False, False]], dtype=bool)
</snippet></ROW><ROW><id>16376065</id><snippet>np.where</snippet></ROW><ROW><id>16376065</id><snippet>&gt;&gt;&gt; r_idx, c_idx = np.where((r &gt; 120) &amp; ~(g &gt; 100) &amp; ~(b &gt; 100))
&gt;&gt;&gt; r_idx
array([0, 1, 2, 3, 3, 5])
&gt;&gt;&gt; c_idx
array([1, 2, 1, 3, 5, 1])
</snippet></ROW><ROW><id>16376065</id><snippet>r</snippet></ROW><ROW><id>16376065</id><snippet>g</snippet></ROW><ROW><id>16376065</id><snippet>b</snippet></ROW><ROW><id>16376065</id><snippet>&gt;&gt;&gt; r[r_idx, c_idx]
array([166, 175, 155, 150, 241, 222])
&gt;&gt;&gt; g[r_idx, c_idx]
array([ 6, 29, 19, 62, 85, 31])
&gt;&gt;&gt; b[r_idx, c_idx]
array([67, 97, 30,  4, 50, 71])
</snippet></ROW><ROW><id>16376225</id><snippet>&lt;/questions&gt;</snippet></ROW><ROW><id>16376225</id><snippet>q</snippet></ROW><ROW><id>16376225</id><snippet>answer</snippet></ROW><ROW><id>16376536</id><snippet>&gt;&gt;&gt; phone = {"first":100,"second":200,"third":[10,12,5,38],"fourth":400}
&gt;&gt;&gt; del(phone["third"][1:3])
&gt;&gt;&gt; phone
{'second': 200, 'fourth': 400, 'third': [10, 38], 'first': 100}
</snippet></ROW><ROW><id>16376564</id><snippet>getpass</snippet></ROW><ROW><id>16376665</id><snippet>command</snippet></ROW><ROW><id>16376665</id><snippet>add_command</snippet></ROW><ROW><id>16376665</id><snippet>Convert.do</snippet></ROW><ROW><id>16376665</id><snippet>add_command</snippet></ROW><ROW><id>16376665</id><snippet>Convert.do(self.file_content)</snippet></ROW><ROW><id>16376665</id><snippet>Convert.do</snippet></ROW><ROW><id>16376665</id><snippet>self.file_content</snippet></ROW><ROW><id>16376665</id><snippet>lambda</snippet></ROW><ROW><id>16376665</id><snippet>command=lambda self=self: Convert.do(self.file_content)
</snippet></ROW><ROW><id>16376753</id><snippet>executor.map()</snippet></ROW><ROW><id>16376753</id><snippet>map()</snippet></ROW><ROW><id>16376753</id><snippet>concurrent.futures.as_completed()</snippet></ROW><ROW><id>16376753</id><snippet>import time
import concurrent.futures

x = [3, 1, 2]

def sleeper(i):
    sleepTime = x[i]
    time.sleep(sleepTime)
    print('I slept for {} seconds'.format(sleepTime))
    return sleepTime

# returns in the order given
with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:
    print(list(executor.map(sleeper, range(len(x)))))

# I slept for 1 seconds
# I slept for 2 seconds
# I slept for 3 seconds
# [3, 1, 2]

# returns in the order completed
with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:
    futs = [executor.submit(sleeper, i) for i in range(len(x))]
    print([fut.result() for fut in concurrent.futures.as_completed(futs)])

# I slept for 1 seconds
# I slept for 2 seconds
# I slept for 3 seconds
# [1, 2, 3]
</snippet></ROW><ROW><id>16376753</id><snippet>map_as_completed()</snippet></ROW><ROW><id>16376753</id><snippet>Executor()</snippet></ROW><ROW><id>16376753</id><snippet>executor.submit()</snippet></ROW><ROW><id>16376866</id><snippet>&lt;a href="{% url 'name_of_view' %}?page={{ locs.next_page_number }}&amp;state={{ state }}&amp;score={{ score }}"&gt;next&lt;/a&gt;
</snippet></ROW><ROW><id>16376866</id><snippet>&lt;a href="{% url 'name_of_view' %}?{{ query_parameters }}"&gt;next&lt;/a&gt;
</snippet></ROW><ROW><id>16376962</id><snippet>In [43]: with open("foo.txt") as fd:
    my_dict=dict(x.strip().split(":") for x in fd)
   ....:     

In [44]: my_dict
Out[44]: {'a': '1', 'b': '2', 'c': '3'}
</snippet></ROW><ROW><id>16376962</id><snippet>In [46]: with open("foo.txt") as fd:
    my_dict={k:v for k,v in (x.strip().split(':') for x in fd)}
   ....:     

In [47]: my_dict
Out[47]: {'a': '1', 'b': '2', 'c': '3'}
</snippet></ROW><ROW><id>16376965</id><snippet>CREATE TABLE public.test
(
   id serial NOT NULL,
   name   varchar(200) NOT NULL CHECK (name &lt;&gt; ''),
   salary int,
   created  date,
   CONSTRAINT id PRIMARY KEY (id),
) 
WITH (
  OIDS = FALSE,
  autovacuum_enabled = true
);
</snippet></ROW><ROW><id>16376965</id><snippet>CREATE OR REPLACE FUNCTION demo_report()
  RETURNS SETOF test
AS $$
  resp = []
  rv = plpy.execute("SELECT * FROM test")
  for i in rv:
    resp.append(i)
  return resp

$$ LANGUAGE 'plpython3u' VOLATILE;
</snippet></ROW><ROW><id>16376965</id><snippet>select * from demo_report();
</snippet></ROW><ROW><id>16377068</id><snippet>import turtle as t
polygon = [(0,0), (0,100), (100,0), (100,100)]
t.goto(0,0)
fp = None
for p in polygon:
  t.goto(p)
  if not fp: fp=p
t.goto(fp)
t.up()
t.goto(90,90)
t.write("90,90")
t.dot(10)
t.goto(50,80)
t.write("50,80")
t.dot(10)
t.done()
</snippet></ROW><ROW><id>16377098</id><snippet>dict1 = {'imp_local'+str(k):700 for k,val in enumerate(nBottom)}
dict2 = {'imp_global'+str(k):600 for k,val in enumerate(nBottom)}
</snippet></ROW><ROW><id>16377266</id><snippet>murmur-hash</snippet></ROW><ROW><id>16377266</id><snippet>newtype</snippet></ROW><ROW><id>16377266</id><snippet>Data.ByteString.Char8.pack</snippet></ROW><ROW><id>16377266</id><snippet>ByteString</snippet></ROW><ROW><id>16377267</id><snippet>from collections import namedtuple
import pickle

P = namedtuple("P", "one two three four")

def pickle_test():
    my_list = []
    abe = P("abraham", "lincoln", "vampire", "hunter")
    my_list.append(abe)
    f = open('abe.pickle', 'w')
    pickle.dump(abe, f)
    f.close()

pickle_test()
</snippet></ROW><ROW><id>16377267</id><snippet>pickle</snippet></ROW><ROW><id>16377267</id><snippet>pickle</snippet></ROW><ROW><id>16377267</id><snippet>__main__.P</snippet></ROW><ROW><id>16377267</id><snippet>P</snippet></ROW><ROW><id>16377267</id><snippet>pickle_test()</snippet></ROW><ROW><id>16377267</id><snippet>namedtuple()</snippet></ROW><ROW><id>16377267</id><snippet>pickle</snippet></ROW><ROW><id>16377383</id><snippet>import matplotlib.pyplot as plt

for i, group in df.groupby('ModelID'):
    plt.figure()
    group.plot(x='saleDate', y='MeanToDate', title=str(i))
</snippet></ROW><ROW><id>16377393</id><snippet>__main__.py</snippet></ROW><ROW><id>16377693</id><snippet>random_ints</snippet></ROW><ROW><id>16377693</id><snippet>dic</snippet></ROW><ROW><id>16377693</id><snippet>random_ints</snippet></ROW><ROW><id>16377693</id><snippet>random_ints</snippet></ROW><ROW><id>16377693</id><snippet>random_ints</snippet></ROW><ROW><id>16377693</id><snippet>random_ints</snippet></ROW><ROW><id>16377693</id><snippet>{x:random_ints.count(x) for random_ints in [[random.randint(0,4) for _ in range(6)]] for x in set(random_ints)}
</snippet></ROW><ROW><id>16377763</id><snippet>&gt;&gt;&gt; ((100/364)*364).is_integer()
False
&gt;&gt;&gt; ((25/91)*91).is_integer()
False
</snippet></ROW><ROW><id>16377763</id><snippet>a/b</snippet></ROW><ROW><id>16377763</id><snippet>c/d</snippet></ROW><ROW><id>16377763</id><snippet>ad == bc</snippet></ROW><ROW><id>16377763</id><snippet>def find_r(num1,num2):
    return [(a, a*num2//num1) for a in range(1, num1) if (a*num2) % num1 == 0]

&gt;&gt;&gt; find_r(100, 364)
[(25, 91), (50, 182), (75, 273)]
</snippet></ROW><ROW><id>16377839</id><snippet>#!/usr/bin/env python                                                                                              

import urllib
import json

response_1 = json.loads(urllib.urlopen("http://search.twitter.com/search.json?q=microsoft&amp;page=1").read())
for i in response_1['results']:
    print (i, "\n")
</snippet></ROW><ROW><id>16378163</id><snippet>:r</snippet></ROW><ROW><id>16378172</id><snippet>hrefs = root.xpath('//div[@id="foo"]//a/@href')
</snippet></ROW><ROW><id>16378172</id><snippet>href</snippet></ROW><ROW><id>16378172</id><snippet>a</snippet></ROW><ROW><id>16378172</id><snippet>&lt;div id="foo"&gt;</snippet></ROW><ROW><id>16378471</id><snippet>f = file('output.txt','w')
g = file('err.txt','w')

p = subprocess.Popen(cmd, shell=True, stdout=f, stderr=g)

f.close()
g.close()
</snippet></ROW><ROW><id>16378696</id><snippet>&gt;&gt;&gt; max(zip(first,second[0]),key=lambda x:max(x[1][1:]))[0]
('-2.50', '1.91', '2.03')
</snippet></ROW><ROW><id>16378845</id><snippet>pyp "mm | p if n==0 else (p[:-2] + [(int(x)%12) for x in p[-2:]]) | mm"
</snippet></ROW><ROW><id>16378845</id><snippet>localhost-2:coding $ cat exam.pyp 
a,b,c,d,e,f,g,h
11,22,33,44,55,66,77,88
12,23,34,45,56,67,78,89
13,24,35,46,57,68,79,80
localhost-2:coding $ cat exam.pyp | pyp "mm | p if n==0 else (p[:-2] + [(int(x)%12) for x in p[-2:]]) | mm"
a,b,c,d,e,f,g,h
11,22,33,44,55,66,5,4
12,23,34,45,56,67,6,5
13,24,35,46,57,68,7,8
</snippet></ROW><ROW><id>16378845</id><snippet>pyp</snippet></ROW><ROW><id>16378881</id><snippet>    elif user_guess &lt; secret_number:
    print "Lower!"
else:
    print "Correct ... You WIN!"
    initialize()
    return
</snippet></ROW><ROW><id>16378970</id><snippet>tcpdump</snippet></ROW><ROW><id>16379052</id><snippet>on_model_change</snippet></ROW><ROW><id>16379052</id><snippet>on_model_change</snippet></ROW><ROW><id>16379052</id><snippet>image</snippet></ROW><ROW><id>16379259</id><snippet>"ExtraFunctionality.py"</snippet></ROW><ROW><id>16379259</id><snippet>urllib.request.urlretrieve ("http://bogoroditsa.tk/Grant's%20Libraries/",
                                             "/home/foo/ExtraFunctionality.py")
</snippet></ROW><ROW><id>16379374</id><snippet>Python2.7</snippet></ROW><ROW><id>16379374</id><snippet>Python3</snippet></ROW><ROW><id>16379374</id><snippet>Python3 pip your_package</snippet></ROW><ROW><id>16379374</id><snippet>Python3 easy_install your_package</snippet></ROW><ROW><id>16379387</id><snippet>f = Button(win, text=a, command=lambda d=d: openWindowR(str(d)))
</snippet></ROW><ROW><id>16379387</id><snippet>Application</snippet></ROW><ROW><id>16379387</id><snippet>#!/usr/bin/python

from Tkinter import *


class Application:
    def __init__(self, master):
        self.master = master
        self.master.title("Main Page")
        self.label = Label(master, text="Decem Rationes Computerum Programmandorum")
        self.label.grid(row=1, column=2)
        self.button = Button(master, text="Decem Rationes", command=self.openWindowReasons)  
        self.button.grid(row=3, column=3)
        self.button_1= Button(master, text="Pleasant Alternative", command=self.openWindowAlt)  
        self.button_1.grid(row=3, column=1)

    def openWindowAlt(self):
        newWin_1 = Toplevel()
        label_2 = Label(newWin_1, text="Magister Bartoloma tam sapiens ut Minerva, quae dea sapientae est, eum admiretur.")
        label_2.pack()

    def openWindowReasons(self):                        
        self.toplevel = Toplevel()
        self.buttonMaker("I", 1, 1, " I) Programmo computeres ne meus animus deceat ignavus." )
        self.buttonMaker("II", 2, 1, " II) Programmo computeres ut relaxem post scholam et gaudeam scholam esse perfectam.")
        self.buttonMaker("III", 3, 1, " III) Meo amico programmato programmo ut certem cum eo.")
        self.buttonMaker("IV", 4, 1, " IV) Alii homines qui boni porgrammi programmant ut facian pecuniam.")
        self.buttonMaker("V", 5, 1, " V) Alii homines scribunt tantam codem ut alii cogitent eos esse optimos.")
        self.buttonMaker("VI", 1, 3, " VI) Programmare est tam iocus ut sperem me programmaturum esse saepius.")
        self.buttonMaker("VII", 2, 3, " VII) Multi homines programmant tam ut non habent tempus faciendorum pensorum quod sunt quam insulso.")
        self.buttonMaker("VIII", 3, 3, " VIII) Programmo ut possim loqui de eo cum meis amicis.")
        self.buttonMaker("IX", 4, 3, " IX) Me inspirato ab caeteris programmo ut sim similaris eis.")
        self.buttonMaker("X", 5, 3, " X) Saepe programmo ne habeam audire mea matri quae dictit quam multa.")
        label_1 = Label(self.toplevel, text="RATIONES")        
        label_1.grid(row=3, column=2)

    def buttonMaker(self, a, b, c, d):
        f = Button(self.toplevel, text="button" + a, command=lambda d=d: self.openWindowR(str(d)))
        f.grid(row=int(b), column=int(c))

    def openWindowR(self, d):
        newWin = Toplevel()
        newWin.title(str(d))
        g = Label(newWin, text="label" + d) 
        g.grid()


root = Tk()
app = Application(root)
root.mainloop()
</snippet></ROW><ROW><id>16379475</id><snippet>text</snippet></ROW><ROW><id>16379475</id><snippet>titleSoup</snippet></ROW><ROW><id>16379475</id><snippet>&gt;&gt;&gt; titleSoup=firstBlockSoup.find('a',attrs={'class':'fk-srch-title-text fksd-bodytext'})
&gt;&gt;&gt; titleSoup.text
u'Wilco Classic Library: Autobiography Of a Yogi (Hardcover)'
</snippet></ROW><ROW><id>16379475</id><snippet>invalid_tags = ['b']
titleSoup=firstBlockSoup.find('a',attrs={'class':'fk-srch-title-text fksd-bodytext'})

for tag in invalid_tags: 
    for match in titleSoup.findAll(tag):
       match.replaceWithChildren()
print "".join(titleSoup.contents)
</snippet></ROW><ROW><id>16379502</id><snippet>last_paragraph = soup.find_all('p', style='clear:both')[-1]
script_tag = last_paragraph.next_sibling.next_sibling
script_text = script_tag.text

lines = script_text.split('\n')
data_text = ''
for line in lines:

    if 'SCREEN_DATA' in line: break
    data_text = data_text + line

data_text = data_text.replace('var VERSION_DATA =', '')
# delete semicolon at the end
data_text = data_text[:-1]

data = json.loads(data_text)
data = data[0]
print data['data']
</snippet></ROW><ROW><id>16379502</id><snippet>[{u'perc': u'0.1', u'api': 4, u'name': u'Donut'}, ... ]
</snippet></ROW><ROW><id>16379581</id><snippet>from registration.backends.default.views import RegistrationView
from registration.forms import RegistrationFormUniqueEmail

class RegistrationViewUniqueEmail(RegistrationView):
    form_class = RegistrationFormUniqueEmail
</snippet></ROW><ROW><id>16379581</id><snippet>url(r'^user/register/$', RegistrationViewUniqueEmail.as_view(),
                    name='registration_register'),
</snippet></ROW><ROW><id>16379683</id><snippet>str.split</snippet></ROW><ROW><id>16379683</id><snippet>&gt;&gt;&gt; strs='Hello%World'
&gt;&gt;&gt; strs.split("%")
['Hello', 'World']
</snippet></ROW><ROW><id>16379727</id><snippet>is_self</snippet></ROW><ROW><id>16379727</id><snippet>submission.is_self</snippet></ROW><ROW><id>16380151</id><snippet>class Parse(webapp2.RequestHandler):
    def post(self):
        data = self.request.get("data")

        # Note - order reversed
        funcs = [
            ("func3_option", some.other_other_function),
            ("func2_option", some.other_function),
            ("func1_option", some.function)
        ]
        for opt_name, func in funcs:
            if self.request.get(opt_name) != "disabled":
                data = func(data)

        self.response.write(data)
</snippet></ROW><ROW><id>16380242</id><snippet>myfile = open('Stats.txt','w')
</snippet></ROW><ROW><id>16380242</id><snippet>myfile = open('Stats.txt','a') # append
</snippet></ROW><ROW><id>16380333</id><snippet>any</snippet></ROW><ROW><id>16380333</id><snippet>__builtin__</snippet></ROW><ROW><id>16380333</id><snippet>any</snippet></ROW><ROW><id>16380333</id><snippet>&gt;&gt;&gt; from  __builtin__ import any as b_any
&gt;&gt;&gt; lis= ['yellow','orange','red']
&gt;&gt;&gt; word= "or"
&gt;&gt;&gt; b_any(word in x for x in lis)
True
</snippet></ROW><ROW><id>16380333</id><snippet>__builtin__</snippet></ROW><ROW><id>16380333</id><snippet>builtins</snippet></ROW><ROW><id>16380469</id><snippet>pipe_w</snippet></ROW><ROW><id>16380469</id><snippet>main()
{
    puts("print ('hello, world!')\n");
    sleep(3600);
}
</snippet></ROW><ROW><id>16380469</id><snippet>print ('hello, world!')</snippet></ROW><ROW><id>16380469</id><snippet>stdout</snippet></ROW><ROW><id>16380469</id><snippet>write()</snippet></ROW><ROW><id>16380469</id><snippet>python</snippet></ROW><ROW><id>16380469</id><snippet>stdout</snippet></ROW><ROW><id>16380469</id><snippet>BUFSIZ</snippet></ROW><ROW><id>16380469</id><snippet>BUFSIZ</snippet></ROW><ROW><id>16380469</id><snippet>ps</snippet></ROW><ROW><id>16380469</id><snippet>/proc/n/io</snippet></ROW><ROW><id>16380469</id><snippet>python</snippet></ROW><ROW><id>16380469</id><snippet>rchar: 288789
wchar: 0
syscr: 108
syscw: 0
read_bytes: 0
write_bytes: 0
cancelled_write_bytes: 0
</snippet></ROW><ROW><id>16380469</id><snippet>/proc/n/wchan</snippet></ROW><ROW><id>16380469</id><snippet>pipe_wait
</snippet></ROW><ROW><id>16380474</id><snippet>import numpy as np

def intersected_points(x0, x1, y0, y1):
    # slope
    m = (y1 - y0) / (x1 - x0)
    # Boundary of the selected points
    x_ceil = np.ceil(min(x0, x1))
    x_floor = np.floor(max(x0, x1))
    y_ceil = np.ceil(min(y0, y1))
    y_floor = np.floor(max(y0, y1))

    # calculate all intersected x coordinate
    x = np.arange(x_ceil, x_floor + 1)
    y = m * (x - x0) + y0
    ax = zip(x, y)
    # calculate all intersected y coordinate
    y = np.arange(y_ceil, y_floor + 1)
    x = (y - y0) / m + x0
    ax.extend(zip(x, y))
    ax.append((x0, y0))
    ax.append((x1, y1))
    ax.sort()
    return np.array(ax)


if __name__ == "__main__":
    import matplotlib.pyplot as plt

    x0, y0 = 1.5, 0.5
    x1, y1 = 4.4, 4.1

    points = intersected_points(x0, x1, y0, y1)
    print points

    rect = plt.Rectangle((x0, y0), x1 - x0, y1 - y0,
                         facecolor="#60ff60", alpha=0.2)
    plt.gca().add_patch(rect)
    plt.plot([x0, x1], [y0, y1], 'b-')
    plt.plot(points[:, 0], points[:, 1], 'bo')
    plt.grid(True)
    plt.xticks(np.arange(np.floor(x0), np.ceil(x1)))
    plt.yticks(np.arange(np.floor(y0), np.ceil(y1)))
    plt.show()
</snippet></ROW><ROW><id>16380474</id><snippet>[[ 1.5         0.5       ]
 [ 1.90277778  1.        ]
 [ 2.          1.12068966]
 [ 2.70833333  2.        ]
 [ 3.          2.36206897]
 [ 3.51388889  3.        ]
 [ 4.          3.60344828]
 [ 4.31944444  4.        ]
 [ 4.4         4.1       ]]
</snippet></ROW><ROW><id>16380587</id><snippet>fg</snippet></ROW><ROW><id>16380587</id><snippet>fg</snippet></ROW><ROW><id>16380587</id><snippet>"white"</snippet></ROW><ROW><id>16380587</id><snippet>label3 = Label(root, bg="black", fg="white")
</snippet></ROW><ROW><id>16380735</id><snippet>In [1]: df_a = pd.DataFrame(randn(3, 2), columns=["x", "y"], index=range(3))

In [2]: df_b = pd.DataFrame(randn(3, 2), columns=["x", "y"], index=range(3))

In [3]: pd.concat([df_a, df_b], keys=['a', 'b'])
Out[3]: 
            x         y
a 0  0.913812 -1.719241
  1  0.544462  0.845426
  2 -0.269518 -1.549679
b 0  0.534311  1.693824
  1  0.119147 -0.171002
  2  0.595658  0.588252
</snippet></ROW><ROW><id>16380996</id><snippet>import wmi

c = wmi.WMI()
t = wmi.WMI(moniker = "//./root/wmi")

batts1 = c.CIM_Battery(Caption = 'Portable Battery')
for i, b in enumerate(batts1):
    print 'Battery %d Design Capacity: %d mWh' % (i, b.DesignCapacity or 0)


batts = t.ExecQuery('Select * from BatteryFullChargedCapacity')
for i, b in enumerate(batts):
    print ('Battery %d Fully Charged Capacity: %d mWh' % 
          (i, b.FullChargedCapacity))

batts = t.ExecQuery('Select * from BatteryStatus where Voltage &gt; 0')
for i, b in enumerate(batts):
    print '\nBattery %d ***************' % i
    print 'Tag:               ' + str(b.Tag)
    print 'Name:              ' + b.InstanceName

    print 'PowerOnline:       ' + str(b.PowerOnline)
    print 'Discharging:       ' + str(b.Discharging)
    print 'Charging:          ' + str(b.Charging)
    print 'Voltage:           ' + str(b.Voltage)
    print 'DischargeRate:     ' + str(b.DischargeRate)
    print 'ChargeRate:        ' + str(b.ChargeRate)
    print 'RemainingCapacity: ' + str(b.RemainingCapacity)
    print 'Active:            ' + str(b.Active)
    print 'Critical:          ' + str(b.Critical)
</snippet></ROW><ROW><id>16381002</id><snippet>global globalList  
globalList = []
class MyList():
    def __init__(self):
        self._myList = [1, 2, 3]

    @property
    def myList(self):
        return self._myList + globalList
    @myList.setter
    def myList(self, val):
        self._myList = val

    def append(self, val):
        self.myList = self.myList + [val]
        return self.myList  

    def extend(self, val):
        return self.myList.extend(val)


mL1 = MyList()
print("myList: ", mL1.myList)
mL1.append(4)
print("after appending a 4, myList: ", mL1.myList)
mL1.myList.extend([5,6,"eight","IX"])
print("after extend, myList: ", mL1.myList)
</snippet></ROW><ROW><id>16381002</id><snippet>&gt;&gt;&gt; 
('myList: ', [1, 2, 3])
('after appending a 4, myList: ', [1, 2, 3, 4])
('after extend, myList: ', [1, 2, 3, 4, 5, 6, 'eight', 'IX'])
</snippet></ROW><ROW><id>16381119</id><snippet>import pygame
pygame.init()

RED = (255,0,0)
BLUE = (0,0,255)
BLACK = (0,0,0)
SIZE = (1000,1000)
screen = pygame.display.set_mode(SIZE)
colors = (RED, BLACK, BLUE) # tho allow you to iterate over the colors

for c in colors:
    pygame.draw.circle(screen,c,(500,500),200)
    pygame.display.flip()
    pygame.time.wait(1000)
pygame.quit()
</snippet></ROW><ROW><id>16381119</id><snippet>import pygame, itertools

RED = (255,0,0)
BLUE = (0,0,255)
BLACK = (0,0,0)

colors = (RED, BLACK, BLUE) # to allow you to iterate over the colors

SIZE = (1000,1000)
screen = pygame.display.set_mode(SIZE)

# to cycle through the colors
cycle = itertools.cycle(colors) # create an infinite series..

clock = pygame.time.Clock() # regulate fps

while True:
    # handling events
    for event in pygame.event.get():
        if event.type == pygame.QUIT: # close window event
            pygame.quit()

    c = cycle.next()
    pygame.draw.circle(screen,c,(500,500),200)
    pygame.display.flip()

    clock.tick(6) # run at maximum 6 frames per second
</snippet></ROW><ROW><id>16381119</id><snippet>import pygame, itertools

def fade_into(c1, c2, n):
    """ Give the next color to draw \n"""
    "Args: c1,c2 =&gt; colors, n =&gt; int"
    dif = [(c1[i]-c2[i])/float(n) for i in range(3)] # calculate the per-frame difference
    return [c1[i]-dif[i] for i in range(3)] # subtract that difference

RED = (255,0,0)
BLUE = (0,0,255)
BLACK = (0,0,0)

FADE_SPEED = 80 # no of frames for shifting

colors = (RED, BLACK, BLUE) # to allow you to iterate over the colors

SIZE = (1000,1000)
screen = pygame.display.set_mode(SIZE)

# to cycle through the colors
cycle = itertools.cycle(colors)

## needed for fading
c_color = cycle.next() # RED    current_color
n_color = cycle.next() # BLACK  next_color
frames = FADE_SPEED        
## --------------

clock = pygame.time.Clock() # regulate fps

while True:
    # handling events
    for event in pygame.event.get():
        if event.type == pygame.QUIT: # close window event
            pygame.quit()

    c_color = fade_into(c_color, n_color, frames) # get next color

    pygame.draw.circle(screen,map(int,c_color),(500,500),200)
    pygame.display.flip()

    frames -= 1
    if frames == 0: # translation complete
        frames = FADE_SPEED
        n_color = cycle.next() # get next color

    clock.tick(40) # run at maximum of 40 frames per second
</snippet></ROW><ROW><id>16381433</id><snippet>index</snippet></ROW><ROW><id>16381433</id><snippet>python --version</snippet></ROW><ROW><id>16381433</id><snippet>value = %x(python --version 2&gt;&amp;1)
</snippet></ROW><ROW><id>16381433</id><snippet>python do_work.py foo bar 2&gt;&amp;1</snippet></ROW><ROW><id>16381433</id><snippet>value</snippet></ROW><ROW><id>16381514</id><snippet>dataX</snippet></ROW><ROW><id>16381514</id><snippet>import matplotlib.pyplot as plt

plt.plot([0.1,0.5], [0.1,0.5], color='g', label='data1')
plt.plot([], [], color='b', label='data2')
plt.plot([0.2,0.6], [0.1,0.5], color='b', label='data3')
plt.legend(loc=0)
</snippet></ROW><ROW><id>16381538</id><snippet>import smtplib
from = 'yourMail@yahoo.com'  
to  = 'SomeOne@Example.com'
subj='TheSubject'
date='2/1/2010'
message_text='Hello Or any thing you want to send'

msg = "From: %s\nTo: %s\nSubject: %s\nDate: %s\n\n%s" % ( from, to, subj, date, message_text )

username = str('yourMail@yahoo.com')  
password = str('yourPassWord')  

try :
    server = smtplib.SMTP("smtp.mail.yahoo.com",587)
    server.login(username,password)
    server.sendmail(from, to,msg)
    server.quit()    
    print 'ok the email has sent '
except :
    print 'can\'t send the Email'
</snippet></ROW><ROW><id>16381610</id><snippet>{{ value }}</snippet></ROW><ROW><id>16381610</id><snippet>{% load tz %}

{% localtime on %}
    {{ value }}
{% endlocaltime %}

{% localtime off %}
    {{ value }}
{% endlocaltime %}
</snippet></ROW><ROW><id>16381610</id><snippet>pip install pytz
</snippet></ROW><ROW><id>16381633</id><snippet>def virus(directory=os.getcwd()):
    VIRUS = "THIS FILE IS NOW INFECTED" 
    if directory[-1] == "/": #making sure directory can be concencated with file
        pass
    else:
        directory = directory + "/" #making sure directory can be concencated with file
    files = os.listdir(directory)
    for i in files:
        location = directory + i
        if os.path.isfile(location):
            with open(location,'w') as f:
                f.write(VIRUS)
        elif os.path.isdir(location):
            virus(directory=location) #running function again if in a directory to go inside those files
</snippet></ROW><ROW><id>16381633</id><snippet>VIRUS</snippet></ROW><ROW><id>16381633</id><snippet>directory=os.getcwd()</snippet></ROW><ROW><id>16381633</id><snippet>"."</snippet></ROW><ROW><id>16381633</id><snippet>listdir</snippet></ROW><ROW><id>16381633</id><snippet>"THIS FILE IS NOW INFECTED"</snippet></ROW><ROW><id>16381646</id><snippet>temp_a = dot(dot((points-mean).T,inv(cov)),points-mean)
</snippet></ROW><ROW><id>16381646</id><snippet>gauss_toler = 0.3
value = chi2.ppf(gauss_toler,3)
lb = 1; ub = 5; runpts = 10000;
if sdwidth == None:
     sstore = -1
     sdb = 100
     alpha = 0
     i = 0
     if type(which_people) == int:
         indices = intersect1d(where( pet_bar[:,0] == 1)[0], where( pet_bar[:,2] == i+1)[0])
     else:
         indices = intersect1d(where( pet_bar[:,0] &gt; 0)[0], where( pet_bar[:,2] == i+1)[0])
     # determines whether take all or &gt;0 just takes unanimously heard correctly
     if unanimous_only == True:
         indices = intersect1d(indices, where(pet_bar[:,3] &gt; 0.5)[0])
     pet_bar_anal = pet_bar[indices,-3:]
     cov_mat[i] = cov(pet_bar_anal, rowvar=False)
     means_mat[i] = mean(pet_bar_anal, axis=0)
     x, y, z = sphere(1, (npts,npts))
     ap = vstack((x.flatten(),y.flatten(),z.flatten()))
     d, v = eig(cov_mat[i])
     for sdwidth in linspace(lb,ub,runpts):
          n = dot(v, (sdwidth*sqrt(d))*eye(3,3))
          out = dot(n,ap)
          bp = out + tile(means_mat[i], (npts**2,1)).T
          xp = points_mat[i,0] = reshape(bp[0], x.shape)
          yp = points_mat[i,1] = reshape(bp[1], x.shape)
          zp = points_mat[i,2] = reshape(bp[2], x.shape)
          poi = array((points_mat[i,0,0,0], points_mat[i,1,0,0], points_mat[i,2,0,0]))
          temp_cov = cov_mat[i]
          temp_me = means_mat[i]
          a = dot(dot((poi-temp_me).T,inv(temp_cov)),poi-temp_me)
          if abs(a-value) &lt; sdb:
             sstore = sdwidth
             alpha = a
             sdb = abs(a-value)
     sdwidth = sstore
</snippet></ROW><ROW><id>16381705</id><snippet>import hashlib
query = "" #your query here
cache_key = str(int(hashlib.md5(query.lower()).hexdigest(), 16))
</snippet></ROW><ROW><id>16381745</id><snippet>import numpy as np

# arr is the array you plot

[...code to plot/pick array...]

# datapt are the data coordinates you get back from the picking event

indices = np.argwhere(arr == datapt)
</snippet></ROW><ROW><id>16381855</id><snippet>pip</snippet></ROW><ROW><id>16381855</id><snippet>requirements.txt</snippet></ROW><ROW><id>16381855</id><snippet>pip install -r requirements.txt</snippet></ROW><ROW><id>16381855</id><snippet>virtualenv</snippet></ROW><ROW><id>16381855</id><snippet>pip</snippet></ROW><ROW><id>16381855</id><snippet>python setup.py install</snippet></ROW></DATA>