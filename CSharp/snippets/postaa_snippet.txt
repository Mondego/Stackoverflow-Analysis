7Di2015UniqueSeparatordouble trans = (double)trackBar1.Value / 5000.0;Di2015NewLine
7Di2015UniqueSeparator5000.0
7Di2015UniqueSeparator5000d
7Di2015UniqueSeparatordouble trans = trackBar1.Value / 5000.0;Di2015NewLinedouble trans = trackBar1.Value / 5000d;Di2015NewLine
45Di2015UniqueSeparatorConsole.ReadLine()
298Di2015UniqueSeparatorList<KeyValuePair<string, string>> myList = aDictionary.ToList();Di2015NewLineDi2015NewLinemyList.Sort(Di2015NewLine    delegate(KeyValuePair<string, string> firstPair,Di2015NewLine    KeyValuePair<string, string> nextPair)Di2015NewLine    {Di2015NewLine        return firstPair.Value.CompareTo(nextPair.Value);Di2015NewLine    }Di2015NewLine);Di2015NewLine
298Di2015UniqueSeparatorList<KeyValuePair<string, string>> myList = aDictionary.ToList();Di2015NewLineDi2015NewLinemyList.Sort((firstPair,nextPair) =>Di2015NewLine    {Di2015NewLine        return firstPair.Value.CompareTo(nextPair.Value);Di2015NewLine    }Di2015NewLine);Di2015NewLine
509Di2015UniqueSeparatorBindingContext
509Di2015UniqueSeparatorBindingContext
509Di2015UniqueSeparatorDataSource
509Di2015UniqueSeparatorComboBox
509Di2015UniqueSeparatorBindingContext
509Di2015UniqueSeparatorConcurrenyMangager
509Di2015UniqueSeparatorConcurrenyManager
509Di2015UniqueSeparatorDataSource
509Di2015UniqueSeparatorComboBox
509Di2015UniqueSeparatorBindingContext
509Di2015UniqueSeparatorConcurrencyManager
566Di2015UniqueSeparatorSystem.Int32
602Di2015UniqueSeparatornondet_random
655Di2015UniqueSeparatorVersion v = Assembly.GetExecutingAssembly().GetName().Version;Di2015NewLinestring About = string.Format(CultureInfo.InvariantCulture, @"YourApp Version {0}.{1}.{2} (r{3})", v.Major, v.Minor, v.Build, v.Revision);Di2015NewLine
713Di2015UniqueSeparatorNUnit
713Di2015UniqueSeparatorTestDriven.NET
713Di2015UniqueSeparatorVS.NET
713Di2015UniqueSeparatorNUnit
713Di2015UniqueSeparatorBDD
755Di2015UniqueSeparatorObjectType instance = (ObjectType)Activator.CreateInstance(objectType);Di2015NewLineDi2015NewLineObjectType instance = (ObjectType)Activator.CreateInstance("MyNamespace.ObjectType, MyAssembly");Di2015NewLine
837Di2015UniqueSeparatorvar collection=<br>    from u in db.Universe<br>    select new<br>    {<br>        u.id,<br>        u.name,<br>        MaxDate =(DateTime?)<br>       (<br>           from h in db.History<br>           where u.Id == h.Id<br>           && h.dateCol < yesterday<br>           select h.dateCol <br>       ).Max()<br>    };<br>
951Di2015UniqueSeparatorusing System.Data.OleDb;<br>...<br><br>using (OleDbConnection conn = new OleDbConnection())<br>{<br>    conn.ConnectionString = "Provider=sqloledb;Data Source=yourServername\\\\yourInstance;Initial Catalog=databaseName;Integrated Security=SSPI;";<br>    using (OleDbCommand cmd = new OleDbCommand())<br>    {<br>        conn.Open();<br>        cmd.Connection = conn;<br>        cmd.CommandText = "Select * from yourTable";<br>        using (OleDbDataReader dr = cmd.ExecuteReader())<br>        {<br>            while (dr.Read())<br>            {<br>                Console.WriteLine(dr["columnName"]);<br>            }<br>        }<br>    }<br>}<br>
1044Di2015UniqueSeparatorMoveFileEx
1309Di2015UniqueSeparatorif not locked thenDi2015NewLine    open and update fileDi2015NewLine
1404Di2015UniqueSeparatorDateTime today = DateTime.Today;Di2015NewLineint age = today.Year - bday.Year;Di2015NewLineif (bday > today.AddYears(-age)) age--;Di2015NewLine
1556Di2015UniqueSeparator[Obsolete("These are not supported in this class.", true)]<br>public override Â void dontcallmeanymore()<br>{<br>}<br>
1843Di2015UniqueSeparatorusing System;<br>using System.Drawing;<br>using System.Windows.Forms;<br><br>static class Program<br>{<br>    static void Main()<br>    {<br>        Timer timer = new Timer();<br>        // timer.Interval = 4 minutes<br>        timer.Interval = (int)(TimeSpan.TicksPerMinute * 4 / TimeSpan.TicksPerMillisecond);<br>        timer.Tick += (sender, args) => { Cursor.Position = new Point(Cursor.Position.X + 1, Cursor.Position.Y + 1); };<br>        timer.Start();<br>        Application.Run();<br>    }<br>}<br>
1940Di2015UniqueSeparatorpublic ActionResult Send()<br>{<br>    TempData["form"] = Request.Form;<br>    return this.RedirectToAction(a => a.Form());<br>}<br>
1940Di2015UniqueSeparatorpublic ActionResult Form()<br>{<br>    /* Declare viewData etc. */<br><br>    if (TempData["form"] != null)<br>    {<br>        /* Cast TempData["form"] to <br>        System.Collections.Specialized.NameValueCollection <br>        and use it */<br>     }<br>     return View("Form", viewData);<br> }<br>
2182Di2015UniqueSeparatorTestIsTextValidSmallLetters
2182Di2015UniqueSeparatorTestIsTextValidNonAlphaNumericCharacters
2233Di2015UniqueSeparator<body runat="server" id="masterpageBody"><br>
2233Di2015UniqueSeparator<% MasterPageFile="..." %><br>
2233Di2015UniqueSeparatorMaster.FindControl("masterpageBody")<br>
2490Di2015UniqueSeparatorYourStruct o = new YourStruct();Di2015NewLinebyte[] buffer = new byte[Marshal.SizeOf(typeof(YourStruct))];Di2015NewLineGCHandle handle = GCHandle.Alloc(buffer, GCHandleType.Pinned);Di2015NewLineMarshal.StructureToPtr(o, handle.AddrOfPinnedObject(), false);Di2015NewLinehandle.Free();Di2015NewLine
2490Di2015UniqueSeparatorhandle = GCHandle.Alloc(buffer, GCHandleType.Pinned);Di2015NewLineo = (YourStruct)Marshal.PtrToStructure(handle.AddrOfPinnedObject(), typeof(YourStruct));Di2015NewLinehandle.Free();Di2015NewLine
2546Di2015UniqueSeparatorvoid treeView1MouseUp(object sender, MouseEventArgs e)Di2015NewLine{Di2015NewLine    if(e.Button == MouseButtons.Right)Di2015NewLine    {Di2015NewLine        // Select the clicked nodeDi2015NewLine        treeView1.SelectedNode = treeView1.GetNodeAt(e.X, e.Y);Di2015NewLineDi2015NewLine        if(treeView1.SelectedNode != null)Di2015NewLine        {Di2015NewLine            myContextMenuStrip.Show(treeView1, e.Location);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
2585Di2015UniqueSeparatorConvert.ToString(Convert.ToChar(Int32.Parse(EncodedString.Substring(intParseIndex, 2), System.Globalization.NumberStyles.HexNumber)));Di2015NewLine
2789Di2015UniqueSeparatoralpha=argb.alpha()<br>r = (alpha/255)*argb.r() + (1 - alpha/255)*blend.r()<br>g = (alpha/255)*argb.g() + (1 - alpha/255)*blend.g()<br>b = (alpha/255)*argb.b() + (1 - alpha/255)*blend.b()<br>
2839Di2015UniqueSeparatorIDisposable
2839Di2015UniqueSeparatorIDisposable.Dispose()
2839Di2015UniqueSeparatortry
2839Di2015UniqueSeparatorfinally
2839Di2015UniqueSeparatorusing()
2839Di2015UniqueSeparatorDispose()
2839Di2015UniqueSeparatorDispose()
2887Di2015UniqueSeparatorNewStuff ByteArrayToNewStuff(byte[] bytes)Di2015NewLine{Di2015NewLine    GCHandle handle = GCHandle.Alloc(bytes, GCHandleType.Pinned);Di2015NewLine    NewStuff stuff = (NewStuff)Marshal.PtrToStructure(Di2015NewLine        handle.AddrOfPinnedObject(), typeof(NewStuff));Di2015NewLine    handle.Free();Di2015NewLine    return stuff;Di2015NewLine}Di2015NewLine
2887Di2015UniqueSeparatorT ByteArrayToStructure<T>(byte[] bytes) where T: struct Di2015NewLine{Di2015NewLine    GCHandle handle = GCHandle.Alloc(bytes, GCHandleType.Pinned);Di2015NewLine    T stuff = (T)Marshal.PtrToStructure(handle.AddrOfPinnedObject(),Di2015NewLine        typeof(T));Di2015NewLine    handle.Free();Di2015NewLine    return stuff;Di2015NewLine}Di2015NewLine
3029Di2015UniqueSeparatorprop
3267Di2015UniqueSeparatorpublic static class HumanFriendlyInteger<br>{<br>    static string[] ones = new string[] { "", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine" };<br>    static string[] teens = new string[] { "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen" };<br>    static string[] tens = new string[] { "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety" };<br>    static string[] thousandsGroups = { "", " Thousand", " Million", " Billion" };<br><br>    private static string FriendlyInteger(int n, string leftDigits, int thousands)<br>    {<br>        if (n == 0)<br>        {<br>            return leftDigits;<br>        }<br>        string friendlyInt = leftDigits;<br>        if (friendlyInt.Length > 0)<br>        {<br>            friendlyInt += " ";<br>        }<br><br>        if (n < 10)<br>        {<br>            friendlyInt += ones[n];<br>        }<br>        else if (n < 20)<br>        {<br>            friendlyInt += teens[n - 10];<br>        }<br>        else if (n < 100)<br>        {<br>            friendlyInt += FriendlyInteger(n % 10, tens[n / 10 - 2], 0);<br>        }<br>        else if (n < 1000)<br>        {<br>            friendlyInt += FriendlyInteger(n % 100, (ones[n / 100] + " Hundred"), 0);<br>        }<br>        else<br>        {<br>            friendlyInt += FriendlyInteger(n % 1000, FriendlyInteger(n / 1000, "", thousands+1), 0);<br>        }<br><br>        return friendlyInt + thousandsGroups[thousands];<br>    }<br><br>    public static string IntegerToWritten(int n)<br>    {<br>        if (n == 0)<br>        {<br>            return "Zero";<br>        }<br>        else if (n < 0)<br>        {<br>            return "Negative " + IntegerToWritten(-n);<br>        }<br><br>        return FriendlyInteger(n, "", 0);<br>    }<br><br>}<br>
3294Di2015UniqueSeparatorpublic class A<br>{<br>    public static void Test()<br>    {<br>    }<br>}<br><br>public class B : A<br>{<br>}<br>
3294Di2015UniqueSeparatorclass Program<br>{<br>    static void Main(string[] args)<br>    {<br>        B.Test();<br>    }<br>}<br>
3294Di2015UniqueSeparator.entrypoint<br>.maxstack 8<br>L0000: nop <br>L0001: call void ConsoleApplication1.A::Test()<br>L0006: nop <br>L0007: ret <br>
3776Di2015UniqueSeparatorthis.TopLevel = false;Di2015NewLinethis.FormBorderStyle = FormBorderStyle.None;Di2015NewLinethis.Dock = DockStyle.Fill;Di2015NewLine
3776Di2015UniqueSeparatorSeparateForm f = new SeparateForm(); Di2015NewLineMainFormSplitContainer.Panel2.Controls.Add(f); Di2015NewLinef.Show();Di2015NewLine
3777Di2015UniqueSeparatorpublic partial class Default : System.Web.UI.Page, IPostBackEventHandler{}Di2015NewLine
3777Di2015UniqueSeparatorpublic void RaisePostBackEvent(string eventArgument) { }Di2015NewLine
3777Di2015UniqueSeparatorvar pageId = '<%=  Page.ClientID %>';Di2015NewLine__doPostBack(pageId, argumentString);Di2015NewLine
4441Di2015UniqueSeparatorstring [] strings = contactList.Select(c => c.Name).ToArray();Di2015NewLinestring csv = string.Join(",", strings);Di2015NewLine
4615Di2015UniqueSeparatorpublic static class StringExtensions<br>{<br>    public static String trim(this String s)<br>    {<br>        return s.Trim();<br>    }<br>}<br>
4615Di2015UniqueSeparatorString s = "  Test  ";<br>s = s.trim();<br>
4615Di2015UniqueSeparatorString s = "  Test  ";<br>s = StringExtensions.trim(s);<br>
4637Di2015UniqueSeparatorString propName = "Text";Di2015NewLinePropertyInfo pi = someObject.GetType().GetProperty(propName);Di2015NewLinepi.SetValue(someObject, "New Value", new Object[0]);Di2015NewLine
4821Di2015UniqueSeparatorusing System.Net;Di2015NewLineDi2015NewLineforeach (IPAddress address in Dns.GetHostAddresses("www.google.com"))Di2015NewLine{Di2015NewLine   Console.WriteLine(address.ToString());Di2015NewLine}Di2015NewLine
5219Di2015UniqueSeparator<body onload=""> <br>
5219Di2015UniqueSeparatorpublic static void PassthroughAuthentication()<br>{<br><br>    System.Web.HttpContext.Current.Response.Write("<body <br>    onload=document.forms[0].submit();window.location=\\"Home.aspx\\";>");<br><br>    System.Web.HttpContext.Current.Response.Write("<form name=\\"Form\\" <br>    target=_blank method=post <br>    action=\\"https://external-url.com/security.asp\\">");<br><br>    System.Web.HttpContext.Current.Response.Write(string.Format("<input <br>       type=hidden name=\\"cFName\\" value=\\"{0}\\">", "Username"));<br><br>    System.Web.HttpContext.Current.Response.Write("</form>");<br>    System.Web.HttpContext.Current.Response.Write("</body>");<br>}<br>
5695Di2015UniqueSeparator<Import Project="$(MSBuildToolsPath)\\Microsoft.CSharp.targets" />Di2015NewLineDi2015NewLine
5695Di2015UniqueSeparator<Import Project="$(MSBuildBinPath)\\Microsoft.CSharp.targets" />Di2015NewLineDi2015NewLine
6211Di2015UniqueSeparatorvoid SomethingHappened(object sender, EventArgs ea)Di2015NewLine{Di2015NewLine   if (InvokeRequired)Di2015NewLine   {Di2015NewLine      Invoke(new Action<object, EventArgs>(SomethingHappened), sender, ea);Di2015NewLine      return;Di2015NewLine   }Di2015NewLineDi2015NewLine   textBox1.Text = "Something happened";Di2015NewLine}Di2015NewLine
6417Di2015UniqueSeparatorfor(int i = 0; i < 10; i++){Di2015NewLine    if(i == 0) break;Di2015NewLine    DoSomeThingWith(i);Di2015NewLine}Di2015NewLine
6417Di2015UniqueSeparatorfor(int i = 0; i < 10; i++){Di2015NewLine    if(i == 0) continue;Di2015NewLine    DoSomeThingWith(i);Di2015NewLine}Di2015NewLine
6567Di2015UniqueSeparatorList<object> ol = new List<object>();<br>List<string> sl;<br>sl = (List<string>)ol;<br>
6824Di2015UniqueSeparatorString.Format
6824Di2015UniqueSeparatorStringBuilder
6824Di2015UniqueSeparatorpublic static string Format(IFormatProvider provider, string format, params object[] args)Di2015NewLine{Di2015NewLine    if ((format == null) || (args == null))Di2015NewLine    {Di2015NewLine        throw new ArgumentNullException((format == null) ? "format" : "args");Di2015NewLine    }Di2015NewLine    StringBuilder builder = new StringBuilder(format.Length + (args.Length * 8));Di2015NewLine    builder.AppendFormat(provider, format, args);Di2015NewLine    return builder.ToString();Di2015NewLine}Di2015NewLine
6824Di2015UniqueSeparatorStringBuilder.Append()
6824Di2015UniqueSeparatorStringBuilder.AppendFormat()
6824Di2015UniqueSeparator.Append()
7077Di2015UniqueSeparatorstring
7077Di2015UniqueSeparatorSystem.String
7077Di2015UniqueSeparatorint
7077Di2015UniqueSeparatorSystem.Int32
7077Di2015UniqueSeparatorstring
7077Di2015UniqueSeparatorstring place = "world";
7077Di2015UniqueSeparatorString
7077Di2015UniqueSeparatorstring greet = String.Format("Hello {0}!", place);
7101Di2015UniqueSeparator// Start all of the threads.Di2015NewLineList<Thread> startedThreads = new List<Thread>();Di2015NewLineforeach (...) {Di2015NewLine  Thread thread = new Thread(new ThreadStart(MyMethod));Di2015NewLine  thread.Start();Di2015NewLine  startedThreads.Add(thread);Di2015NewLine}Di2015NewLineDi2015NewLine// Wait for all of the threads to finish.Di2015NewLineforeach (Thread thread in startedThreads) {Di2015NewLine  thread.Join();Di2015NewLine}Di2015NewLine
7105Di2015UniqueSeparatorpublic class SingletonDi2015NewLine{Di2015NewLine    private static Singleton instance;Di2015NewLine    // Added a static mutex for synchronising use of instance.Di2015NewLine    private static System.Threading.Mutex mutex;Di2015NewLine    private Singleton() { }Di2015NewLine    static Singleton()Di2015NewLine    {Di2015NewLine        instance = new Singleton();Di2015NewLine        mutex = new System.Threading.Mutex();Di2015NewLine    }Di2015NewLineDi2015NewLine    public static Singleton Acquire()Di2015NewLine    {Di2015NewLine        mutex.WaitOne();Di2015NewLine        return instance;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Each call to Acquire() requires a call to Release()Di2015NewLine    public static void Release()Di2015NewLine    {Di2015NewLine        mutex.ReleaseMutex();Di2015NewLine    }Di2015NewLine}Di2015NewLine
7512Di2015UniqueSeparatorvar app = Process.GetProcesses().FirstOrDefault(p => p.ProcessName.Contains("MyAppName") && p.MainWindowHandle != IntPtr.Zero);Di2015NewLineif (app == null) return;Di2015NewLineSetForegroundWindow(app.MainWindowHandle);Di2015NewLine
7590Di2015UniqueSeparator<TextBlock Grid.Row="0" Grid.Column="0" />Di2015NewLine
7590Di2015UniqueSeparatorg.Children.Add(tb);Di2015NewLineGrid.SetRow(tb, 0);Di2015NewLineGrid.SetColumn(tb, 0);Di2015NewLine
8097Di2015UniqueSeparator    private void DrawLetter()Di2015NewLine    {Di2015NewLine        Graphics g = this.CreateGraphics();Di2015NewLineDi2015NewLine        float width = ((float)this.ClientRectangle.Width);Di2015NewLine        float height = ((float)this.ClientRectangle.Width);Di2015NewLineDi2015NewLine        float emSize = height;Di2015NewLineDi2015NewLine        Font font = new Font(FontFamily.GenericSansSerif, emSize, FontStyle.Regular);Di2015NewLineDi2015NewLine        font = FindBestFitFont(g, letter.ToString(), font, this.ClientRectangle.Size);Di2015NewLineDi2015NewLine        SizeF size = g.MeasureString(letter.ToString(), font);Di2015NewLine        g.DrawString(letter, font, new SolidBrush(Color.Black), (width-size.Width)/2, 0);Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    private Font FindBestFitFont(Graphics g, String text, Font font, Size proposedSize)Di2015NewLine    {Di2015NewLine        // Compute actual size, shrink if neededDi2015NewLine        while (true)Di2015NewLine        {Di2015NewLine            SizeF size = g.MeasureString(text, font);Di2015NewLineDi2015NewLine            // It fits, back outDi2015NewLine            if (size.Height <= proposedSize.Height &&Di2015NewLine                 size.Width <= proposedSize.Width) { return font; }Di2015NewLineDi2015NewLine            // Try a smaller font (90% of old size)Di2015NewLine            Font oldFont = font;Di2015NewLine            font = new Font(font.Name, (float)(font.Size * .9), font.Style);Di2015NewLine            oldFont.Dispose();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
8480Di2015UniqueSeparatormyProperties.AllowedColors = MyColor.Red | MyColor.Green | MyColor.Blue;Di2015NewLine
8480Di2015UniqueSeparator[Flags]
8480Di2015UniqueSeparator.ToString()
8480Di2015UniqueSeparator[Flags] enum SuitsFlags { Spades = 1, Clubs = 2, Diamonds = 4, Hearts = 8 }Di2015NewLineenum Suits { Spades = 1, Clubs = 2, Diamonds = 4, Hearts = 8 }Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLinevar str1 = (Suits.Spades | Suits.Diamonds).ToString();Di2015NewLine           // "5"Di2015NewLinevar str2 = (SuitsFlags.Spades | SuitsFlags.Diamonds).ToString();Di2015NewLine           // "Spades, Diamonds"Di2015NewLine
8480Di2015UniqueSeparator[Flags]
8480Di2015UniqueSeparator[Flags]Di2015NewLinepublic enum MyColorsDi2015NewLine{Di2015NewLine    Yellow,Di2015NewLine    Green,Di2015NewLine    Red,Di2015NewLine    BlueDi2015NewLine}Di2015NewLine
8480Di2015UniqueSeparator[Flags]Di2015NewLinepublic enum MyColorsDi2015NewLine{Di2015NewLine    Yellow = 1,Di2015NewLine    Green = 2,Di2015NewLine    Red = 4,Di2015NewLine    Blue = 8Di2015NewLine}Di2015NewLine
8480Di2015UniqueSeparatorif((myProperties.AllowedColors & MyColor.Yellow) == MyColor.Yellow)Di2015NewLine{Di2015NewLine    // Yellow has been set...Di2015NewLine}Di2015NewLineDi2015NewLineif((myProperties.AllowedColors & MyColor.Green) == MyColor.Green)Di2015NewLine{Di2015NewLine    // Green has been set...Di2015NewLine}    Di2015NewLine
8480Di2015UniqueSeparatorif (myProperties.AllowedColors.HasFlag(MyColor.Yellow))Di2015NewLine{Di2015NewLine    // Yellow has been set...Di2015NewLine}Di2015NewLine
8480Di2015UniqueSeparator Yellow: 00000001Di2015NewLine Green:  00000010Di2015NewLine Red:    00000100Di2015NewLine Blue:   00001000Di2015NewLine
8480Di2015UniqueSeparatormyProperties.AllowedColors: 00001110Di2015NewLine
8480Di2015UniqueSeparatormyProperties.AllowedColors: 00001110Di2015NewLine             MyColor.Green: 00000010Di2015NewLine             -----------------------Di2015NewLine                            00000010 // Hey, this is the same as MyColor.Green!Di2015NewLine
8480Di2015UniqueSeparator[Flags]Di2015NewLinepublic enum MyColorsDi2015NewLine{Di2015NewLine    None = 0,Di2015NewLine    ....Di2015NewLine}Di2015NewLine
8553Di2015UniqueSeparatorMonitor.TryEnter()
8553Di2015UniqueSeparatorMonitor.Enter()
8553Di2015UniqueSeparatortry catch
8633Di2015UniqueSeparatorpublic class TypedProperty<T> : PropertyDi2015NewLine{Di2015NewLine    public T TypedValueDi2015NewLine    {Di2015NewLine        get { return (T)Convert.ChangeType(base.Value, typeof(T)); }Di2015NewLine        set { base.Value = value.ToString();}Di2015NewLine    }Di2015NewLine}Di2015NewLine
8777Di2015UniqueSeparator[DllImport("winmm.dll")] Di2015NewLinestatic extern Int32 mciSendString(String command, StringBuilder buffer, Di2015NewLine                                  Int32 bufferSize, IntPtr hwndCallback);Di2015NewLine
8811Di2015UniqueSeparatorKeyValuePair<string, string> myKeyValuePair = new KeyValuePair<string,string>("defaultkey", "defaultvalue");Di2015NewLine
8956Di2015UniqueSeparatorTypeCode
8956Di2015UniqueSeparatorTypeCode enum
8956Di2015UniqueSeparatorGetType()
8956Di2015UniqueSeparatortypeof()
8956Di2015UniqueSeparatorstatic void WriteObjectInfo(object testObject)Di2015NewLine{Di2015NewLine    TypeCode    typeCode = Type.GetTypeCode( testObject.GetType() );Di2015NewLineDi2015NewLine    switch( typeCode )Di2015NewLine    {Di2015NewLine        case TypeCode.Boolean:Di2015NewLine            Console.WriteLine("Boolean: {0}", testObject);Di2015NewLine            break;Di2015NewLineDi2015NewLine        case TypeCode.Double:Di2015NewLine            Console.WriteLine("Double: {0}", testObject);Di2015NewLine            break;Di2015NewLineDi2015NewLine        default:Di2015NewLine            Console.WriteLine("{0}: {1}", typeCode.ToString(), testObject);Di2015NewLine            break;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
9306Di2015UniqueSeparatorint indexVal = 0;Di2015NewLineRegex re = new Regex(@"Index: (\\d*)")Di2015NewLineMatch m = re.Match(s)Di2015NewLineif(m.Success)Di2015NewLine  indexVal = int.TryParse(m.Groups[1].toString());Di2015NewLine
9387Di2015UniqueSeparatorMain.Designer.cs
9387Di2015UniqueSeparatorSystem.Windows.Forms.ListView
9387Di2015UniqueSeparatorMyApp.Controls.SortableListView<Image>
9387Di2015UniqueSeparatorclass ImagesListView : SortableListView<Image> { }Di2015NewLine
9387Di2015UniqueSeparatorMain.Designer.cs
9387Di2015UniqueSeparatorSortableListView
9387Di2015UniqueSeparatorSortableListView
9526Di2015UniqueSeparatoryield
9526Di2015UniqueSeparatorvar
9685Di2015UniqueSeparatorint[] s = { 1, 2, 3, 3, 4};Di2015NewLineint[] q = s.Distinct().ToArray();Di2015NewLine
9747Di2015UniqueSeparatorstring
9747Di2015UniqueSeparatorSystem.String
9747Di2015UniqueSeparatorint
9747Di2015UniqueSeparatorSystem.Int32
9747Di2015UniqueSeparatorlong
9747Di2015UniqueSeparatorSystem.Int64
9747Di2015UniqueSeparatorfloat
9747Di2015UniqueSeparatorSystem.Single
9747Di2015UniqueSeparatordouble
9747Di2015UniqueSeparatorSystem.Double
9747Di2015UniqueSeparatorchar
9747Di2015UniqueSeparatorSystem.Char
9747Di2015UniqueSeparatorbyte
9747Di2015UniqueSeparatorSystem.Byte
9747Di2015UniqueSeparatorshort
9747Di2015UniqueSeparatorSystem.Int16
9747Di2015UniqueSeparatorushort
9747Di2015UniqueSeparatorSystem.UInt16
9747Di2015UniqueSeparatoruint
9747Di2015UniqueSeparatorSystem.UInt32
9747Di2015UniqueSeparatorulong
9747Di2015UniqueSeparatorSystem.UInt64
9747Di2015UniqueSeparatorstring
9851Di2015UniqueSeparatorpublic int GetWeekRows(int year, int month)Di2015NewLine{Di2015NewLine    DateTime firstDayOfMonth = new DateTime(year, month, 1);Di2015NewLine    DateTime lastDayOfMonth = new DateTime(year, month, 1).AddMonths(1).AddDays(-1);Di2015NewLine    System.Globalization.Calendar calendar = System.Threading.Thread.CurrentThread.CurrentCulture.Calendar;Di2015NewLine    int lastWeek = calendar.GetWeekOfYear(lastDayOfMonth, System.Globalization.CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);Di2015NewLine    int firstWeek = calendar.GetWeekOfYear(firstDayOfMonth, System.Globalization.CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);Di2015NewLine    return lastWeek - firstWeek + 1;Di2015NewLine}Di2015NewLine
10157Di2015UniqueSeparatorthis.BeginInvoke((MethodInvoker)delegate() {update.Action.Run(); })Di2015NewLine
10157Di2015UniqueSeparatorApplication.DoEvents()Di2015NewLine
10262Di2015UniqueSeparator  string filename = @textBox1.Text;Di2015NewLine  string[] fields;Di2015NewLine  string[] delimiter = new string[] {"|"};Di2015NewLine  using (Microsoft.VisualBasic.FileIO.TextFieldParser parser =Di2015NewLine             new Microsoft.VisualBasic.FileIO.TextFieldParser(filename)) {Di2015NewLine                    parser.Delimiters = delimiter;Di2015NewLine                    parser.HasFieldsEnclosedInQuotes = false;Di2015NewLine                    while (!parser.EndOfData) {Di2015NewLine                       fields = parser.ReadFields();Di2015NewLineDi2015NewLine                       //Do what you needDi2015NewLine                    }Di2015NewLine  }Di2015NewLine
10287Di2015UniqueSeparatorThreadPool
10287Di2015UniqueSeparatorThreadPool
10287Di2015UniqueSeparatorThreadPool
10287Di2015UniqueSeparatorThreadPool
10287Di2015UniqueSeparatorThreadPool
10463Di2015UniqueSeparatorwebBrowser1.DocumentText = "<h1>Hello, world!</h1>";Di2015NewLine
10463Di2015UniqueSeparatorwebBrowser1.Document.OpenNew(true);Di2015NewLinewebBrowser1.Document.Write("<h1>Hello, world!</h1>");Di2015NewLine
11164Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8" ?>Di2015NewLine<hibernate-mapping default-cascade="save-update" xmlns="urn:nhibernate-mapping-2.2">Di2015NewLine\<class lazy="false" name="Namespace.Customer, Namespace" table="Customer">Di2015NewLine\\<id name="Id" type="Int32" unsaved-value="0">Di2015NewLine\\\<column name="CustomerAccountId" length="4" sql-type="int" not-null="true" unique="true" index="CustomerPK"/>Di2015NewLine\\\<generator class="native" />Di2015NewLine\\</id>Di2015NewLineDi2015NewLine\    <bag name="AcceptedOffers" inverse="false" lazy="false" cascade="all-delete-orphan" table="details">Di2015NewLine\      <key column="CustomerAccountId" foreign-key="AcceptedOfferFK"/>Di2015NewLine\      <many-to-manyDi2015NewLine\        class="Namespace.AcceptedOffer, Namespace"Di2015NewLine\        column="AcceptedOfferFK"Di2015NewLine\        foreign-key="AcceptedOfferID"Di2015NewLine\        lazy="false"Di2015NewLine\       />Di2015NewLine\    </bag>Di2015NewLineDi2015NewLine  </class>Di2015NewLine</hibernate-mapping>Di2015NewLineDi2015NewLineDi2015NewLine<?xml version="1.0" encoding="utf-8" ?>Di2015NewLine<hibernate-mapping default-cascade="save-update" xmlns="urn:nhibernate-mapping-2.2">Di2015NewLine\<class lazy="false" name="Namespace.AcceptedOffer, Namespace" table="AcceptedOffer">Di2015NewLine\\<id name="Id" type="Int32" unsaved-value="0">Di2015NewLine\\\<column name="AcceptedOfferId" length="4" sql-type="int" not-null="true" unique="true" index="AcceptedOfferPK"/>Di2015NewLine\\\<generator class="native" />Di2015NewLine\\</id>Di2015NewLineDi2015NewLine\    <many-to-one Di2015NewLine\      name="Plan"Di2015NewLine\      class="Namespace.Plan, Namespace"Di2015NewLine\      lazy="false"Di2015NewLine\      cascade="save-update"Di2015NewLine\    >Di2015NewLine\\<column name="PlanFK" length="4" sql-type="int" not-null="false"/>Di2015NewLine\\</many-to-one>Di2015NewLineDi2015NewLine\\<property name="StatusId" type="Int32">Di2015NewLine\\\<column name="StatusId" length="4" sql-type="int" not-null="true"/>Di2015NewLine\\</property>Di2015NewLineDi2015NewLine  </class>Di2015NewLine</hibernate-mapping>Di2015NewLine
11203Di2015UniqueSeparatorvar logs = from log in context.LogsDi2015NewLine           select log;Di2015NewLineDi2015NewLineif (filterBySeverity)Di2015NewLine    logs = logs.Where(p => p.Severity == severity);Di2015NewLineDi2015NewLineif (filterByUser)Di2015NewLine    logs = logs.Where(p => p.User == user);Di2015NewLine
11593Di2015UniqueSeparatorDataTable
11593Di2015UniqueSeparatorDataRowCollection
11593Di2015UniqueSeparatorIEnumerable<T>
11593Di2015UniqueSeparatorAsEnumerable()
11593Di2015UniqueSeparatorDataTable
11593Di2015UniqueSeparatorvar results = from myRow in myDataTable.AsEnumerable()Di2015NewLinewhere myRow.Field<int>("RowNo") == 1Di2015NewLineselect myRow;Di2015NewLine
11593Di2015UniqueSeparatorAsEnumerable()
11593Di2015UniqueSeparatorIEnumerable<DataRow>
11593Di2015UniqueSeparatorIEnumerable<DataRow>
11593Di2015UniqueSeparatorDataTable
11593Di2015UniqueSeparatorCopyToDataTable()
11641Di2015UniqueSeparatorHttpResponse.RemoveOutputCacheItem("/caching/CacheForever.aspx");Di2015NewLine
12052Di2015UniqueSeparatorpublic class MyExceptionClass : ExceptionDi2015NewLine{Di2015NewLine    public MyExceptionClass(string message, string extrainfo) : base(message)Di2015NewLine    {Di2015NewLine        //other stuff hereDi2015NewLine    }Di2015NewLine}Di2015NewLine
12138Di2015UniqueSeparator    public string HeaderDi2015NewLine    {Di2015NewLine        get { return (string)GetValue(HeaderProperty); }Di2015NewLine        set { SetValue(HeaderProperty, value); }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static readonly DependencyProperty HeaderProperty =Di2015NewLine        DependencyProperty.Register("Header", typeof(string), typeof(ownerclass));Di2015NewLine
12138Di2015UniqueSeparator    public static readonly DependencyProperty HeaderPropertyProperty =Di2015NewLine        DependencyProperty.Register("HeaderProperty", typeof(string), typeof(ownerclass), new PropertyMetadata(OnHeaderPropertyChanged));Di2015NewLineDi2015NewLine    public string HeaderProperty        Di2015NewLine    {Di2015NewLine        get { return (string)GetValue(HeaderPropertyProperty); }Di2015NewLine        set { SetValue(HeaderPropertyProperty, value); }Di2015NewLine    }Di2015NewLineDi2015NewLine   public static void OnHeaderPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args)Di2015NewLine    {Di2015NewLine        if (args.NewValue != null)Di2015NewLine        {Di2015NewLine            ownerclass c = (ownerclass) obj;Di2015NewLineDi2015NewLine            Binding b = new Binding();Di2015NewLine            b.Path = new PropertyPath(args.NewValue.ToString());Di2015NewLine            c.SetBinding(ownerclass.HeaderProperty, b);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
12342Di2015UniqueSeparatorstring typeName = typeof (StringBuilder).FullName;Di2015NewLine
12342Di2015UniqueSeparatorType t = Type.GetType(typeName);Di2015NewLine
12342Di2015UniqueSeparatorobject o = Activator.CreateInstance(t);Di2015NewLine
12446Di2015UniqueSeparatorIEnumerable
12446Di2015UniqueSeparatorCopyToDataTable
12446Di2015UniqueSeparatorIEnumerable<DataRow> query =Di2015NewLine    from order in orders.AsEnumerable()Di2015NewLine    where order.Field<DateTime>("OrderDate") > new DateTime(2001, 8, 1)Di2015NewLine    select order;Di2015NewLineDi2015NewLine// Create a table from the query.Di2015NewLineDataTable boundTable = query.CopyToDataTable<DataRow>();Di2015NewLine
12751Di2015UniqueSeparator#import "server.tlb" no_namespace named_guidsDi2015NewLine
12935Di2015UniqueSeparatorDBNull
13100Di2015UniqueSeparatorvoid Test1(string param)Di2015NewLine{Di2015NewLine    param = "new value";Di2015NewLine}Di2015NewLineDi2015NewLinestring s1 = "initial value";Di2015NewLineTest1(s1);Di2015NewLine// s1 == "initial value"Di2015NewLine
13100Di2015UniqueSeparatorout
13100Di2015UniqueSeparatorref
13100Di2015UniqueSeparatorout
13100Di2015UniqueSeparatorref
13100Di2015UniqueSeparatorout
13100Di2015UniqueSeparatorref
13100Di2015UniqueSeparatorref
13100Di2015UniqueSeparatorout
13100Di2015UniqueSeparatorref
13100Di2015UniqueSeparatorout
13100Di2015UniqueSeparatorvoid Test2(ref string param)Di2015NewLine{Di2015NewLine    param = "new value";Di2015NewLine}Di2015NewLineDi2015NewLinevoid Test3(out string param)Di2015NewLine{Di2015NewLine    // Use of param here will not compileDi2015NewLine    param = "another value";Di2015NewLine}Di2015NewLineDi2015NewLinestring s2 = "initial value";Di2015NewLinestring s3;Di2015NewLineTest2(ref s2);Di2015NewLine// s2 == "new value"Di2015NewLine// Test2(ref s3); // Passing ref s3 will not compileDi2015NewLineTest3(out s2);Di2015NewLine// s2 == "another value"Di2015NewLineTest3(out s3);Di2015NewLine// s3 == "another value"Di2015NewLine
13100Di2015UniqueSeparatorout
13100Di2015UniqueSeparatorref
13100Di2015UniqueSeparatorout
13100Di2015UniqueSeparatorref
13100Di2015UniqueSeparatorByRef
13613Di2015UniqueSeparator    /// <summary>Di2015NewLine    /// Add spaces to separate the capitalized words in the string, Di2015NewLine    /// i.e. insert a space before each uppercase letter that is Di2015NewLine    /// either preceded by a lowercase letter or followed by a Di2015NewLine    /// lowercase letter (but not for the first char in string). Di2015NewLine    /// This keeps groups of uppercase letters - e.g. acronyms - together.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="pascalCaseString">A string in PascalCase</param>Di2015NewLine    /// <returns></returns>Di2015NewLine    public static string Wordify(string pascalCaseString)Di2015NewLine    {            Di2015NewLine        Regex r = new Regex("(?<=[a-z])(?<x>[A-Z])|(?<=.)(?<x>[A-Z])(?=[a-z])");Di2015NewLine        return r.Replace(pascalCaseString, " ${x}");Di2015NewLine    }Di2015NewLine
13613Di2015UniqueSeparatorConsole.WriteLine(Wordify(ThisIsValueA.ToString()));Di2015NewLine
13613Di2015UniqueSeparator"This Is Value A".Di2015NewLine
13990Di2015UniqueSeparatorcustomer:Di2015NewLine  name: OrionDi2015NewLine  age: 26Di2015NewLine  addresses:Di2015NewLine    - type: WorkDi2015NewLine      number: 12Di2015NewLine      street: Bob StreetDi2015NewLine    - type: HomeDi2015NewLine      number: 15Di2015NewLine      street: Secret RoadDi2015NewLine
14496Di2015UniqueSeparatorswitch ( fileExtension )Di2015NewLine{Di2015NewLine    case "pdf": Response.ContentType = "application/pdf"; break; Di2015NewLine    case "swf": Response.ContentType = "application/x-shockwave-flash"; break; Di2015NewLineDi2015NewLine    case "gif": Response.ContentType = "image/gif"; break; Di2015NewLine    case "jpeg": Response.ContentType = "image/jpg"; break; Di2015NewLine    case "jpg": Response.ContentType = "image/jpg"; break; Di2015NewLine    case "png": Response.ContentType = "image/png"; break; Di2015NewLineDi2015NewLine    case "mp4": Response.ContentType = "video/mp4"; break; Di2015NewLine    case "mpeg": Response.ContentType = "video/mpeg"; break; Di2015NewLine    case "mov": Response.ContentType = "video/quicktime"; break; Di2015NewLine    case "wmv":Di2015NewLine    case "avi": Response.ContentType = "video/x-ms-wmv"; break; Di2015NewLineDi2015NewLine    //and so on          Di2015NewLineDi2015NewLine    default: Response.ContentType = "application/octet-stream"; break; Di2015NewLine}Di2015NewLine
14591Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinenamespace BitfieldTestDi2015NewLine{Di2015NewLine  [global::System.AttributeUsage(AttributeTargets.Field, AllowMultiple = false)]Di2015NewLine  sealed class BitfieldLengthAttribute : AttributeDi2015NewLine  {Di2015NewLine    uint length;Di2015NewLineDi2015NewLine    public BitfieldLengthAttribute(uint length)Di2015NewLine    {Di2015NewLine        this.length = length;Di2015NewLine    }Di2015NewLineDi2015NewLine    public uint Length { get { return length; } }Di2015NewLine  }Di2015NewLineDi2015NewLine  static class PrimitiveConversionDi2015NewLine  {Di2015NewLine    public static long ToLong<T>(T t) where T : structDi2015NewLine    {Di2015NewLine        long r = 0;Di2015NewLine        int offset = 0;Di2015NewLineDi2015NewLine        // For every field suitably attributed with a BitfieldLengthDi2015NewLine        foreach (System.Reflection.FieldInfo f in t.GetType().GetFields())Di2015NewLine        {Di2015NewLine            object[] attrs = f.GetCustomAttributes(typeof(BitfieldLengthAttribute), false);Di2015NewLine            if (attrs.Length == 1)Di2015NewLine            {Di2015NewLine                uint fieldLength  = ((BitfieldLengthAttribute)attrs[0]).Length;Di2015NewLineDi2015NewLine                // Calculate a bitmask of the desired lengthDi2015NewLine                long mask = 0;Di2015NewLine                for (int i = 0; i < fieldLength; i++)Di2015NewLine                    mask |= 1 << i;Di2015NewLineDi2015NewLine                r |= ((UInt32)f.GetValue(t) & mask) << offset;Di2015NewLineDi2015NewLine                offset += (int)fieldLength;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return r;Di2015NewLine    }Di2015NewLine  }Di2015NewLineDi2015NewLine  struct PESHeaderDi2015NewLine  {Di2015NewLine    [BitfieldLength(2)]Di2015NewLine    public uint reserved;Di2015NewLine    [BitfieldLength(2)]Di2015NewLine    public uint scrambling_control;Di2015NewLine    [BitfieldLength(1)]Di2015NewLine    public uint priority;Di2015NewLine    [BitfieldLength(1)]Di2015NewLine    public uint data_alignment_indicator;Di2015NewLine    [BitfieldLength(1)]Di2015NewLine    public uint copyright;Di2015NewLine    [BitfieldLength(1)]Di2015NewLine    public uint original_or_copy;Di2015NewLine  };Di2015NewLineDi2015NewLine  public class MainClassDi2015NewLine  {Di2015NewLine    public static void Main(string[] args)Di2015NewLine    {Di2015NewLine        PESHeader p = new PESHeader();Di2015NewLineDi2015NewLine        p.reserved = 3;Di2015NewLine        p.scrambling_control = 2;Di2015NewLine        p.data_alignment_indicator = 1;Di2015NewLineDi2015NewLine        long l = PrimitiveConversion.ToLong(p);Di2015NewLineDi2015NewLineDi2015NewLine        for (int i = 63; i >= 0; i--)Di2015NewLine        {Di2015NewLine           Console.Write( ((l & (1l << i)) > 0) ? "1" : "0");Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.WriteLine();Di2015NewLineDi2015NewLine        return;Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
14736Di2015UniqueSeparatorHttpUtility.UrlEncode Method (String)Di2015NewLine
14960Di2015UniqueSeparatorprivate void Form1_FormClosing(object sender, FormClosingEventArgs e)Di2015NewLine{Di2015NewLine    e.Cancel = true;Di2015NewLine}Di2015NewLine
14960Di2015UniqueSeparatorthis.FormClosing -= new System.Windows.Forms.FormClosingEventHandler(this.Form1_FormClosing);Di2015NewLinethis.Close();Di2015NewLine
15210Di2015UniqueSeparatorforeach(ObjectType objectItem in objectTypeList)Di2015NewLine{Di2015NewLine    // ...do some stuffDi2015NewLine}Di2015NewLine
15210Di2015UniqueSeparatorFor Each objectItem as ObjectType in objectTypeListDi2015NewLine    'Do some stuff 'Di2015NewLineNextDi2015NewLine
15494Di2015UniqueSeparatorIList<Car>
15494Di2015UniqueSeparatorEngine
15494Di2015UniqueSeparatorfrom c in listDi2015NewLineorderby c.EngineDi2015NewLineselect c;Di2015NewLine
15758Di2015UniqueSeparator#define
15758Di2015UniqueSeparator#define
15758Di2015UniqueSeparator#if
15758Di2015UniqueSeparator        static void Main(string[] args)Di2015NewLine        {Di2015NewLine#if DEBUGDi2015NewLine            //this only compiles if in DEBUGDi2015NewLine            Console.WriteLine("DEBUG")Di2015NewLine#endif Di2015NewLine#if !DEBUGDi2015NewLine            //this only compiles if not in DEBUGDi2015NewLine            Console.WriteLine("RELEASE")Di2015NewLine#endifDi2015NewLine            //This always compilesDi2015NewLine            Console.ReadLine()Di2015NewLine        }Di2015NewLine
15803Di2015UniqueSeparator[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]Di2015NewLinepublic ListView MyListView { get { return this.listView1; } }Di2015NewLine
15904Di2015UniqueSeparatorlist.push_end(new_data)Di2015NewLinewhile list.head.age >= age_limit:Di2015NewLine    list.pop_head()Di2015NewLine
16051Di2015UniqueSeparatorvar fileName = string.Format("{0}\\\\fileNameHere", Directory.GetCurrentDirectory());Di2015NewLinevar connectionString = string.Format("Provider=Microsoft.Jet.OLEDB.4.0; data source={0}; Extended Properties=Excel 8.0;", fileName);Di2015NewLineDi2015NewLinevar adapter = new OleDbDataAdapter("SELECT * FROM [workSheetNameHere$]", connectionString);Di2015NewLinevar ds = new DataSet();Di2015NewLineDi2015NewLineadapter.Fill(ds, "anyNameHere");Di2015NewLineDi2015NewLineDataTable data = ds.Tables["anyNameHere"];Di2015NewLine
16051Di2015UniqueSeparatorvar data = ds.Tables["anyNameHere"].AsEnumerable();Di2015NewLine
16051Di2015UniqueSeparatorvar query = data.Where(x => x.Field<string>("phoneNumber") != string.Empty).Select(x =>Di2015NewLine    \\\new MyContactDi2015NewLine    \\\\{Di2015NewLine    \\\\\firstName= x.Field<string>("First Name"),Di2015NewLine    \\\\\lastName = x.Field<string>("Last Name"),Di2015NewLine    \\\\\phoneNumber =x.Field<string>("Phone Number"),Di2015NewLine    \\\\});Di2015NewLine
16104Di2015UniqueSeparatorStatusEnum MyStatus = (StatusEnum) Enum.Parse( typeof(StatusEnum), "Active", true );Di2015NewLine
16104Di2015UniqueSeparatorpublic static T ParseEnum<T>( string value )Di2015NewLine{Di2015NewLine    return (T) Enum.Parse( typeof( T ), value, true );Di2015NewLine}Di2015NewLine
16104Di2015UniqueSeparatorStatusEnum MyStatus = EnumUtil.ParseEnum<StatusEnum>("Active");Di2015NewLine
16130Di2015UniqueSeparatorTextBox1.Select(0, TextBox1.Text.Length);Di2015NewLine
16318Di2015UniqueSeparatorSystem.IO.Path.GetDirectoryName(saveDialog.FileName)Di2015NewLine
16802Di2015UniqueSeparatorvar encodedHtml = HttpContext.Current.Server.HtmlEncode(...);Di2015NewLine
17042Di2015UniqueSeparatorvar result = GetUserID();Di2015NewLine
17236Di2015UniqueSeparatorStringBuilder sb = new StringBuilder();Di2015NewLineByte[] buf = new byte[8192];Di2015NewLineStream resStream = response.GetResponseStream();Di2015NewLinestring tmpString = null;Di2015NewLineint count = 0;Di2015NewLinedoDi2015NewLine{Di2015NewLine     count = resStream.Read(buf, 0, buf.Length);Di2015NewLine     if(count != 0)Di2015NewLine     {Di2015NewLine          tmpString = Encoding.ASCII.GetString(buf, 0, count);Di2015NewLine          sb.Append(tmpString);Di2015NewLine     }Di2015NewLine}while (count > 0);Di2015NewLine
17620Di2015UniqueSeparatorusing Microsoft.VisualBasic;Di2015NewLineDi2015NewLinestring path = @"c:\\myfile.txt";Di2015NewLineFileIO.FileSystem.DeleteDirectory(path, Di2015NewLine    FileIO.UIOption.OnlyErrorDialogs, Di2015NewLine    RecycleOption.SendToRecycleBin);Di2015NewLine
17807Di2015UniqueSeparatorpublic delegate object FastPropertyGetHandler(object target);    Di2015NewLineDi2015NewLineprivate static void EmitBoxIfNeeded(ILGenerator ilGenerator, System.Type type)Di2015NewLine{Di2015NewLine    if (type.IsValueType)Di2015NewLine    {Di2015NewLine        ilGenerator.Emit(OpCodes.Box, type);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static FastPropertyGetHandler GetPropertyGetter(PropertyInfo propInfo)Di2015NewLine{Di2015NewLine    // generates a dynamic method to generate a FastPropertyGetHandler delegateDi2015NewLine    DynamicMethod dynamicMethod =Di2015NewLine        new DynamicMethod(Di2015NewLine            string.Empty, Di2015NewLine            typeof (object), Di2015NewLine            new Type[] { typeof (object) },Di2015NewLine            propInfo.DeclaringType.Module);Di2015NewLineDi2015NewLine    ILGenerator ilGenerator = dynamicMethod.GetILGenerator();Di2015NewLine    // loads the object into the stackDi2015NewLine    ilGenerator.Emit(OpCodes.Ldarg_0);Di2015NewLine    // calls the getterDi2015NewLine    ilGenerator.EmitCall(OpCodes.Callvirt, propInfo.GetGetMethod(), null);Di2015NewLine    // creates code for handling the return valueDi2015NewLine    EmitBoxIfNeeded(ilGenerator, propInfo.PropertyType);Di2015NewLine    // returns the value to the callerDi2015NewLine    ilGenerator.Emit(OpCodes.Ret);Di2015NewLine    // converts the DynamicMethod to a FastPropertyGetHandler delegateDi2015NewLine    // to get the propertyDi2015NewLine    FastPropertyGetHandler getter =Di2015NewLine        (FastPropertyGetHandler) Di2015NewLine        dynamicMethod.CreateDelegate(typeof(FastPropertyGetHandler));Di2015NewLineDi2015NewLineDi2015NewLine    return getter;Di2015NewLine}Di2015NewLine
17974Di2015UniqueSeparatorint pageCount = (records + recordsPerPage - 1) / recordsPerPage;Di2015NewLine
18109Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinenamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            MyClass foo = new MyClass();Di2015NewLineDi2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    class BaseClassDi2015NewLine    {Di2015NewLine        public BaseClass()Di2015NewLine        {Di2015NewLine            Console.WriteLine("BaseClass constructor called.");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    class MyClass : BaseClassDi2015NewLine    {Di2015NewLine        public MyClass()Di2015NewLine        {Di2015NewLine            Console.WriteLine("MyClass constructor called.");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
18342Di2015UniqueSeparator    Stopwatch s = new Stopwatch();Di2015NewLineDi2015NewLine    var p = new { FirstName = "Bill", LastName = "Gates" };Di2015NewLineDi2015NewLine    int n = 1000000;Di2015NewLine    long fElapsedMilliseconds = 0, fElapsedTicks = 0, cElapsedMilliseconds = 0, cElapsedTicks = 0;Di2015NewLineDi2015NewLine    string result;Di2015NewLine    s.Start();Di2015NewLine    for (var i = 0; i < n; i++)Di2015NewLine        result = (p.FirstName + " " + p.LastName);Di2015NewLine    s.Stop();Di2015NewLine    cElapsedMilliseconds = s.ElapsedMilliseconds;Di2015NewLine    cElapsedTicks = s.ElapsedTicks;Di2015NewLine    s.Reset();Di2015NewLine    s.Start();Di2015NewLine    for (var i = 0; i < n; i++)Di2015NewLine        result = string.Format("{0} {1}", p.FirstName, p.LastName);Di2015NewLine    s.Stop();Di2015NewLine    fElapsedMilliseconds = s.ElapsedMilliseconds;Di2015NewLine    fElapsedTicks = s.ElapsedTicks;Di2015NewLine    s.Reset();Di2015NewLineDi2015NewLineDi2015NewLine    Console.Clear();Di2015NewLine    Console.WriteLine(n.ToString()+" x result = string.Format(\\"{0} {1}\\", p.FirstName, p.LastName); took: " + (fElapsedMilliseconds) + "ms - " + (fElapsedTicks) + " ticks");Di2015NewLine    Console.WriteLine(n.ToString() + " x result = (p.FirstName + \\" \\" + p.LastName); took: " + (cElapsedMilliseconds) + "ms - " + (cElapsedTicks) + " ticks");Di2015NewLine    Thread.Sleep(4000);Di2015NewLine
18342Di2015UniqueSeparator1000000 x result = string.Format("{0} {1}", p.FirstName, p.LastName); took: 618ms - 2213706 ticksDi2015NewLine1000000 x result = (p.FirstName + " " + p.LastName); took: 166ms - 595610 ticksDi2015NewLine
18416Di2015UniqueSeparator        bool b = new int[] { 3,7,12,5 }.Contains(5);Di2015NewLine
18507Di2015UniqueSeparatoruwgMyGrid.Columns.FromKey("colTest").AllowUpdate = AllowUpdate.Yes;Di2015NewLine
18616Di2015UniqueSeparatorusing System.Data;Di2015NewLineusing System.Data.Sql;Di2015NewLine
18786Di2015UniqueSeparatorDi2015NewLine    public enum eDeviceIntErrCodes Di2015NewLine    {Di2015NewLine        /// eDEVICEINT_ERR_FATAL -> 0x10001Di2015NewLine        eDEVICEINT_ERR_FATAL = 65537,Di2015NewLine    }Di2015NewLine
19056Di2015UniqueSeparator// Consider this code public domain. If you want, you can even tellDi2015NewLine// your boss, attractive women, or the other guy in your cube thatDi2015NewLine// you wrote it. Enjoy!Di2015NewLineDi2015NewLineusing System;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Drawing;Di2015NewLineDi2015NewLinenamespace UtilitiesDi2015NewLine{Di2015NewLine    public class RestorableForm : Form, INotifyPropertyChangedDi2015NewLine    {Di2015NewLine        // We invoke this event when the binding needs to be updated.Di2015NewLine        public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine        // This stores the last window position and stateDi2015NewLine        private WindowRestoreStateInfo windowRestoreState;Di2015NewLineDi2015NewLine        // Now we define the property that we will bind to our settings.Di2015NewLine        [Browsable(false)]        // Don't show it in the Properties listDi2015NewLine        [SettingsBindable(true)]  // But do enable binding to settingsDi2015NewLine        public WindowRestoreStateInfo WindowRestoreStateDi2015NewLine        {Di2015NewLine            get { return windowRestoreState; }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                windowRestoreState = value;Di2015NewLine                if (PropertyChanged != null)Di2015NewLine                {Di2015NewLine                    // If anybody's listening, let them know theDi2015NewLine                    // binding needs to be updated:Di2015NewLine                    PropertyChanged(this,Di2015NewLine                        new PropertyChangedEventArgs("WindowRestoreState"));Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        protected override void OnClosing(CancelEventArgs e)Di2015NewLine        {Di2015NewLine            WindowRestoreState = new WindowRestoreStateInfo();Di2015NewLine            WindowRestoreState.BoundsDi2015NewLine                = WindowState == FormWindowState.Normal ?Di2015NewLine                  Bounds : RestoreBounds;Di2015NewLine            WindowRestoreState.WindowState = WindowState;Di2015NewLineDi2015NewLine            base.OnClosing(e);Di2015NewLine        }Di2015NewLineDi2015NewLine        protected override void OnLoad(EventArgs e)Di2015NewLine        {Di2015NewLine            base.OnLoad(e);Di2015NewLineDi2015NewLine            if (WindowRestoreState != null)Di2015NewLine            {Di2015NewLine                Bounds = ConstrainToScreen(WindowRestoreState.Bounds);Di2015NewLine                WindowState = WindowRestoreState.WindowState;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        // This helper class stores both position and state.Di2015NewLine        // That way, we only have to set one binding.Di2015NewLine        public class WindowRestoreStateInfoDi2015NewLine        {Di2015NewLine            Rectangle bounds;Di2015NewLine            public Rectangle BoundsDi2015NewLine            {Di2015NewLine                get { return bounds; }Di2015NewLine                set { bounds = value; }Di2015NewLine            }Di2015NewLineDi2015NewLine            FormWindowState windowState;Di2015NewLine            public FormWindowState WindowStateDi2015NewLine            {Di2015NewLine                get { return windowState; }Di2015NewLine                set { windowState = value; }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private Rectangle ConstrainToScreen(Rectangle bounds)Di2015NewLine        {Di2015NewLine            Screen screen = Screen.FromRectangle(WindowRestoreState.Bounds);Di2015NewLine            Rectangle workingArea = screen.WorkingArea;Di2015NewLineDi2015NewLine            int width = Math.Min(bounds.Width, workingArea.Width);Di2015NewLine            int height = Math.Min(bounds.Height, workingArea.Height);Di2015NewLineDi2015NewLine            // mmm....minimaxDi2015NewLine            int left = Math.Min(workingArea.Right - width,Di2015NewLine                                Math.Max(bounds.Left, workingArea.Left));Di2015NewLine            int top = Math.Min(workingArea.Bottom - height,Di2015NewLine                                Math.Max(bounds.Top, workingArea.Top));Di2015NewLineDi2015NewLine            return new Rectangle(left, top, width, height);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19224Di2015UniqueSeparator1 + 2 / X
19224Di2015UniqueSeparatorX = 1 + 2 / X
19224Di2015UniqueSeparator1 + 2 / x;
19224Di2015UniqueSeparator1 + 2 / callfunc(12);
19224Di2015UniqueSeparatorcallfunc
19224Di2015UniqueSeparatorcallfunc(x = 2);
19224Di2015UniqueSeparatorcallfunc
19224Di2015UniqueSeparatorwhile
19224Di2015UniqueSeparatorif (E) S1; else S2;Di2015NewLine
19224Di2015UniqueSeparatorE ? E1 : E2Di2015NewLine
19455Di2015UniqueSeparator[TestClass]Di2015NewLinepublic class When_type_inherits_MyObjectDi2015NewLine{Di2015NewLine    private readonly List<Type> _types = new List<Type>();Di2015NewLineDi2015NewLine    public When_type_inherits_MyObject()Di2015NewLine    {Di2015NewLine        // lets find all types that inherit from MyObject, directly or indirectlyDi2015NewLine        foreach(Type type in typeof(MyObject).Assembly.GetTypes())Di2015NewLine        {Di2015NewLine            if(type.IsClass && typeof(MyObject).IsAssignableFrom(type))Di2015NewLine            {Di2015NewLine                _types.Add(type);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    [TestMethod]Di2015NewLine    public void Properties_have_XmlElement_attributeDi2015NewLine    {Di2015NewLine        foreach(Type type in _types)Di2015NewLine        {Di2015NewLine            foreach(PropertyInfo property in type.GetProperties())Di2015NewLine            {Di2015NewLine                object[] attribs = property.GetCustomAttributes(typeof(XmlElementAttribute), false);Di2015NewLine                Assert.IsTrue(attribs.Count > 0, "Missing XmlElementAttribute on property " + property.Name + " in type " + type.FullName);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
19663Di2015UniqueSeparatorforeach (Type t in Assembly.GetCallingAssembly().GetTypes())Di2015NewLine{Di2015NewLine  if (!typeof(IStep).IsAssignableFrom(t)) continue;Di2015NewLine  Console.WriteLine(t.FullName + " implements " + typeof(IStep).FullName);Di2015NewLine}Di2015NewLine
19663Di2015UniqueSeparatorIStep step = (IStep)Activator.CreateInstance(Type.GetType("MyNamespace.MyType"));Di2015NewLine
19835Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinepublic class ExampleDi2015NewLine{Di2015NewLine    public class ToyDi2015NewLine    {Di2015NewLine        private bool inCupboard = false;Di2015NewLine        public void Play() { Console.WriteLine("Playing."); }Di2015NewLine        public void PutAway() { inCupboard = true; }Di2015NewLine        public bool IsInCupboard { get { return inCupboard; } }Di2015NewLine    }Di2015NewLineDi2015NewLine    public delegate void ToyUseCallback(Toy toy);Di2015NewLineDi2015NewLine    public class ParentDi2015NewLine    {Di2015NewLine        public static void RequestToy(ToyUseCallback callback)Di2015NewLine        {Di2015NewLine            Toy toy = new Toy();Di2015NewLine            callback(toy);Di2015NewLine            if (!toy.IsInCupboard)Di2015NewLine            {Di2015NewLine                throw new Exception("You didn't put your toy in the cupboard!");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class ChildDi2015NewLine    {Di2015NewLine        public static void Play()Di2015NewLine        {Di2015NewLine            Parent.RequestToy(delegate(Toy toy)Di2015NewLine            {Di2015NewLine                toy.Play();Di2015NewLine                // Oops! Forgot to put the toy away!Di2015NewLine            });Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine        Child.Play();Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLine
20130Di2015UniqueSeparatorDi2015NewLineusing (FileStream fs = new FileStream(....))Di2015NewLine{Di2015NewLine    // Read in statsDi2015NewLine    XmlSerializer xs = new XmlSerializer(typeof(GameStats));Di2015NewLine    GameStats stats = (GameStats)xs.Deserialize(fs);Di2015NewLineDi2015NewLine    // Manipulate stats here ...Di2015NewLineDi2015NewLine    // Write out game statsDi2015NewLine    XmlSerializer xs = new XmlSerializer(typeof(GameStats));Di2015NewLine    xs.Serialize(fs, stats);Di2015NewLineDi2015NewLine    fs.Close();Di2015NewLine}Di2015NewLine
20139Di2015UniqueSeparatorstatic class ParserDi2015NewLine{Di2015NewLine    public static bool TryParse<TType>( string str, out TType x )Di2015NewLine    {Di2015NewLine        // Get the type on that TryParse shall be calledDi2015NewLine        Type objType = typeof( TType );Di2015NewLineDi2015NewLine        // Enumerate the methods of TTypeDi2015NewLine        foreach( MethodInfo mi in objType.GetMethods() )Di2015NewLine        {Di2015NewLine            if( mi.Name == "TryParse" )Di2015NewLine            {Di2015NewLine                // We found a TryParse method, check for the 2-parameter-signatureDi2015NewLine                ParameterInfo[] pi = mi.GetParameters();Di2015NewLine                if( pi.Length == 2 ) // Find TryParse( String, TType )Di2015NewLine                {Di2015NewLine                    // Build a parameter list for the callDi2015NewLine                    object[] paramList = new object[2] { str, default( TType ) };Di2015NewLineDi2015NewLine                    // Invoke the static methodDi2015NewLine                    object ret = objType.InvokeMember( "TryParse", BindingFlags.InvokeMethod, null, null, paramList );Di2015NewLineDi2015NewLine                    // Get the output value from the parameter listDi2015NewLine                    x = (TType)paramList[1];Di2015NewLine                    return (bool)ret;Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        // Maybe we should throw an exception here, because we were unable to find the TryParseDi2015NewLine        // method; this is not just a unable-to-parse error.Di2015NewLineDi2015NewLine        x = default( TType );Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
20139Di2015UniqueSeparatorpublic static TRet CallStaticMethod<TRet>( object obj, string methodName, params object[] args );Di2015NewLine
20175Di2015UniqueSeparatorpublic static string AddOrdinal(int num)Di2015NewLine{Di2015NewLine    if( num <= 0 ) return num.ToString();Di2015NewLineDi2015NewLine    switch(num % 100)Di2015NewLine    {Di2015NewLine        case 11:Di2015NewLine        case 12:Di2015NewLine        case 13:Di2015NewLine            return num + "th";Di2015NewLine    }Di2015NewLineDi2015NewLine    switch(num % 10)Di2015NewLine    {Di2015NewLine        case 1:Di2015NewLine            return num + "st";Di2015NewLine        case 2:Di2015NewLine            return num + "nd";Di2015NewLine        case 3:Di2015NewLine            return num + "rd";Di2015NewLine        default:Di2015NewLine            return num + "th";Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
20200Di2015UniqueSeparatorpublic abstract class AbstractClassDi2015NewLine{Di2015NewLine    public static AbstractClass MakeAbstractClass(string args)Di2015NewLine    {Di2015NewLine        if (args == "a")Di2015NewLine            return new ConcreteClassA();Di2015NewLine        if (args == "b")Di2015NewLine            return new ConcreteClassB();Di2015NewLine    }Di2015NewLineDi2015NewLine    private class ConcreteClassA : AbstractClassDi2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    private class ConcreteClassB : AbstractClassDi2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
20418Di2015UniqueSeparatorpublic class DisplayWrapperDi2015NewLine{Di2015NewLine    private UnderlyingClass underlyingObject;Di2015NewLineDi2015NewLine    public DisplayWrapper(UnderlyingClass u)Di2015NewLine    {Di2015NewLine        underlyingObject = u;Di2015NewLine    }Di2015NewLineDi2015NewLine    [DisplayOrder(1)]Di2015NewLine    public int SomeIntDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return underlyingObject .SomeInt;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    [DisplayOrder(2)]Di2015NewLine    public DateTime SomeDateDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return underlyingObject .SomeDate;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
20418Di2015UniqueSeparator[Browsable(false)]Di2015NewLinepublic SomeCustomType DontShowThisInTheDesignerDi2015NewLine{Di2015NewLine    get{/*do something*/}Di2015NewLine}Di2015NewLine
20418Di2015UniqueSeparatorpublic void SomeProfilingMethod(MethodInfo targetMethod, object target, params object[] args)Di2015NewLine{Di2015NewLine    bool time = true;Di2015NewLine    foreach (Attribute a in target.GetCustomAttributes())Di2015NewLine    {Di2015NewLine        if (a.GetType() is NoTimingAttribute)Di2015NewLine        {Di2015NewLine            time = false;Di2015NewLine            break;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    if (time)Di2015NewLine    {Di2015NewLine        StopWatch stopWatch = new StopWatch();Di2015NewLine        stopWatch.Start();Di2015NewLine        targetMethod.Invoke(target, args);Di2015NewLine        stopWatch.Stop();Di2015NewLine        HandleTimingOutput(targetMethod, stopWatch.Duration);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        targetMethod.Invoke(target, args);Di2015NewLine    }Di2015NewLine}Di2015NewLine
20418Di2015UniqueSeparatorpublic class DisplayOrderAttribute : AttributeDi2015NewLine{Di2015NewLine    private int order;Di2015NewLineDi2015NewLine    public DisplayOrderAttribute(int order)Di2015NewLine    {Di2015NewLine        this.order = order;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int OrderDi2015NewLine    {Di2015NewLine        get { return order; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
20495Di2015UniqueSeparatorvoid label_Paint(object sender, PaintEventArgs e)Di2015NewLine{Di2015NewLine  Label label = (Label)sender;Di2015NewLine  TextRenderer.DrawText(e.Graphics, label.Text, label.Font, label.ClientRectangle, label.ForeColor, TextFormatFlags.PathEllipsis);Di2015NewLine}Di2015NewLine
20495Di2015UniqueSeparatorDrawText
20495Di2015UniqueSeparatorOnPaint()
20625Di2015UniqueSeparatorconfigDoc.RemoveChild(projectNodes[i]);Di2015NewLine
20625Di2015UniqueSeparatorprojectNodes[i].parentNode.RemoveChild(projectNodes[i]);Di2015NewLine
20777Di2015UniqueSeparator/// <summary>Di2015NewLine/// Removes control characters and other non-UTF-8 charactersDi2015NewLine/// </summary>Di2015NewLine/// <param name="inString">The string to process</param>Di2015NewLine/// <returns>A string with no control characters or entities above 0x00FD</returns>Di2015NewLinepublic static string RemoveTroublesomeCharacters(string inString)Di2015NewLine{Di2015NewLine    if (inString == null) return null;Di2015NewLineDi2015NewLine    StringBuilder newString = new StringBuilder();Di2015NewLine    char ch;Di2015NewLineDi2015NewLine    for (int i = 0; i < inString.Length; i++)Di2015NewLine    {Di2015NewLineDi2015NewLine        ch = inString[i];Di2015NewLine        // remove any characters outside the valid UTF-8 range as well as all control charactersDi2015NewLine        // except tabs and new linesDi2015NewLine        if ((ch < 0x00FD && ch > 0x001F) || ch == '\\t' || ch == '\\n' || ch == '\\r')Di2015NewLine        {Di2015NewLine            newString.Append(ch);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return newString.ToString();Di2015NewLineDi2015NewLine}Di2015NewLine
20949Di2015UniqueSeparatorclass ArrayView<T> : IEnumerable<T>Di2015NewLine{Di2015NewLine    private readonly T[] array;Di2015NewLine    private readonly int offset, count;Di2015NewLineDi2015NewLine    public ArrayView(T[] array, int offset, int count)Di2015NewLine    {Di2015NewLine        this.array = array;Di2015NewLine        this.offset = offset;Di2015NewLine        this.count = count;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int LengthDi2015NewLine    {Di2015NewLine        get { return count; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public T this[int index]Di2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (index < 0 || index >= this.count)Di2015NewLine                throw new IndexOutOfRangeException();Di2015NewLine            elseDi2015NewLine                return this.array[offset + index];Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (index < 0 || index >= this.count)Di2015NewLine                throw new IndexOutOfRangeException();Di2015NewLine            elseDi2015NewLine                this.array[offset + index] = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public IEnumerator<T> GetEnumerator()Di2015NewLine    {Di2015NewLine        for (int i = offset; i < offset + count; i++)Di2015NewLine            yield return array[i];Di2015NewLine    }Di2015NewLineDi2015NewLine    IEnumerator IEnumerable.GetEnumerator()Di2015NewLine    {Di2015NewLine        IEnumerator<T> enumerator = this.GetEnumerator();Di2015NewLine        while (enumerator.MoveNext())Di2015NewLine        {Di2015NewLine            yield return enumerator.Current;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        byte[] arr = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };Di2015NewLine        ArrayView<byte> p1 = new ArrayView<byte>(arr, 0, 5);Di2015NewLine        ArrayView<byte> p2 = new ArrayView<byte>(arr, 5, 5);Di2015NewLine        Console.WriteLine("First array:");Di2015NewLine        foreach (byte b in p1)Di2015NewLine        {Di2015NewLine            Console.Write(b);Di2015NewLine        }Di2015NewLine        Console.Write("\\n");Di2015NewLine        Console.WriteLine("Second array:");Di2015NewLine        foreach (byte b in p2)Di2015NewLine        {Di2015NewLine            Console.Write(b);Di2015NewLine        }Di2015NewLine        Console.ReadKey();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21093Di2015UniqueSeparatorStringBuilder.Append()
21093Di2015UniqueSeparatorString.Join()
21093Di2015UniqueSeparatorStringBuilder
21093Di2015UniqueSeparatorStringBuilder sb = new StringBuilder();Di2015NewLinesb.Append(someString);Di2015NewLine
21093Di2015UniqueSeparatorString.Join
21093Di2015UniqueSeparatorstring key = String.Join("_", new String[] Di2015NewLine{ "Customers_Contacts", customerID, database, SessionID });Di2015NewLine
21292Di2015UniqueSeparatorforeach (int number in list1)Di2015NewLine{Di2015NewLine    foreach (int number2 in list2)Di2015NewLine    {Di2015NewLine        if (number2 == number)Di2015NewLine        {Di2015NewLine            returnList.add(number2);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21292Di2015UniqueSeparatorvar results = list1.Intersect(list2);Di2015NewLine
21479Di2015UniqueSeparator#define
21479Di2015UniqueSeparator/define
21786Di2015UniqueSeparatorIEnumerable
21786Di2015UniqueSeparatorvar d = new Dictionary<string, int>Di2015NewLine{Di2015NewLine    {"hello", 0},Di2015NewLine    {"the answer to life the universe and everything is:", 42}Di2015NewLine};Di2015NewLine
21786Di2015UniqueSeparatorclass c1 : IEnumerableDi2015NewLine{Di2015NewLine    void Add(int x1, int x2, int x3)Di2015NewLine    {Di2015NewLine        //...Di2015NewLine    }Di2015NewLineDi2015NewLine    //...Di2015NewLine}Di2015NewLine
21786Di2015UniqueSeparatorvar x = new c1Di2015NewLine{Di2015NewLine    {1,2,3},Di2015NewLine    {4,5,6}Di2015NewLine}Di2015NewLine
21786Di2015UniqueSeparatorList<Customer>
21786Di2015UniqueSeparatorvar x = new List<Customer>Di2015NewLine{Di2015NewLine    new Customer("Scott Wisniewski", "555-555-5555", "Seattle", "WA"),Di2015NewLine    new Customer("John Doe", "555-555-1234", "Los Angeles", "CA"),Di2015NewLine    new Customer("Michael Scott", "555-555-8769", "Scranton PA"),Di2015NewLine    new Customer("Ali G", "", "Staines", "UK")Di2015NewLine}Di2015NewLine
21786Di2015UniqueSeparatorclass CustomerList  : List<Customer>Di2015NewLine{Di2015NewLine    public void Add(string name, string phoneNumber, string city, string stateOrCountry)Di2015NewLine    {Di2015NewLine        Add(new Customer(name, phoneNumber, city, stateOrCounter));Di2015NewLine    }Di2015NewLine}Di2015NewLine
21786Di2015UniqueSeparatorvar customers = new CustomerListDi2015NewLine{Di2015NewLine    {"Scott Wisniewski", "555-555-5555", "Seattle", "WA"},Di2015NewLine    {"John Doe", "555-555-1234", "Los Angeles", "CA"},Di2015NewLine    {"Michael Scott", "555-555-8769", "Scranton PA"},Di2015NewLine    {"Ali G", "", "Staines", "UK"}Di2015NewLine}Di2015NewLine
21786Di2015UniqueSeparatorList<T>
22026Di2015UniqueSeparatorAppDomain currentDomain = AppDomain.CurrentDomain;Di2015NewLinecurrentDomain.AssemblyResolve += new ResolveEventHandler(MyResolveEventHandler);Di2015NewLine
22043Di2015UniqueSeparatortry {Di2015NewLine  // call service etc.Di2015NewLine  // handle success to viewDi2015NewLine} Di2015NewLinecatch (AccountAlreadyExistsException) {Di2015NewLine  // set the message and some other unique data in the viewDi2015NewLine}Di2015NewLinecatch (ServiceLayerException) {Di2015NewLine  // set the message in the viewDi2015NewLine}Di2015NewLine// system exceptions, and unrecoverable exceptions are allowed to bubble Di2015NewLine// up the call stack so a general error can be shown to the user, rather Di2015NewLine// than showing the form again.Di2015NewLine
22397Di2015UniqueSeparator   BeginInvoke(new EventHandler<CoolObjectEventArgs>(mCoolObject_CoolEvent), Di2015NewLine               sender, Di2015NewLine               args);Di2015NewLine
22397Di2015UniqueSeparatorInvoke
22397Di2015UniqueSeparatorBeginInvoke
22397Di2015UniqueSeparatorEndInvoke
22397Di2015UniqueSeparatorTargetInvocationException
22628Di2015UniqueSeparatorthrow;
22628Di2015UniqueSeparatortry {Di2015NewLine  // something that boms hereDi2015NewLine} catch (Exception ex)Di2015NewLine{Di2015NewLine    throw;Di2015NewLine}Di2015NewLine
22628Di2015UniqueSeparatorthrow ex;
22628Di2015UniqueSeparatorthrow ex;
22908Di2015UniqueSeparatorProvider=Microsoft.ACE.OLEDB.12.0;Di2015NewLine    Data Source=c:\\path\\to\\myfile.xlsx;Di2015NewLine    Extended Properties=\\"Excel 12.0 Xml;IMEX=1\\";Di2015NewLine
23799Di2015UniqueSeparatorresult = mObjList.Find(delegate(int x) { return x.ID == magicNumber; });Di2015NewLine
23799Di2015UniqueSeparatorresult = mObjList.Find(x => x.ID == magicNumber);Di2015NewLine
23933Di2015UniqueSeparatorclass MyCompositeObjectDi2015NewLine{Di2015NewLine    DateTime    CreatedDate;Di2015NewLine    string      SomeAttribute;Di2015NewLine    Object      Obj1;Di2015NewLine{Di2015NewLineclass MyCompositeObjects : List<MyCompositeObject> { }Di2015NewLine
24592Di2015UniqueSeparatorDataContext.TableName.Contains(Item)Di2015NewLine
24592Di2015UniqueSeparatorif(Item.id == 0)Di2015NewLine   DataContext.Insert(Item)Di2015NewLineelseDi2015NewLine   DataContext.Update(Item)Di2015NewLine
25024Di2015UniqueSeparatorfunction setColor(p){Di2015NewLine    var red = p<50 ? 255 : Math.round(256 - (p-50)*5.12);Di2015NewLine    var green = p>50 ? 255 : Math.round((p)*5.12);Di2015NewLine    return "rgb(" + red + "," + green + ",0)";Di2015NewLine}Di2015NewLine
25300Di2015UniqueSeparatorpublic enum TestDi2015NewLine{Di2015NewLine    @as = 1,Di2015NewLine    @is = 2Di2015NewLine}Di2015NewLine
25354Di2015UniqueSeparatorstring s = "foobar\\ngork";Di2015NewLinestring v = s.Replace(Environment.NewLine,",");Di2015NewLineSystem.Console.WriteLine(v);Di2015NewLine
25512Di2015UniqueSeparatortabControl1.Top = tabControl1.Top - tabControl1.ItemSize.Height;Di2015NewLinetabControl1.Height = tabControl1.Height + tabControl1.ItemSize.Height;Di2015NewLinetabControl1.Region = new Region(new RectangleF(tabPage1.Left, tabPage1.Top, tabPage1.Width, tabPage1.Height + tabControl1.ItemSize.Height));Di2015NewLine
25606Di2015UniqueSeparatorpublic JsonResult CheckUserName(string username)Di2015NewLine{Di2015NewLine    return Json(CheckValidUsername(username));Di2015NewLine}Di2015NewLine
25820Di2015UniqueSeparator[Log()]Di2015NewLinepublic void Method1(String name, Int32 value);Di2015NewLine
26203Di2015UniqueSeparatorList<int> myList = GetListOfIntsFromSomewhere();Di2015NewLineDi2015NewLine// This will filter out the list of ints that are > than 7, Where returns anDi2015NewLine// IEnumerable<T> so a call to ToList is required to convert back to a List<T>.Di2015NewLineList<int> filteredList = myList.Where( x => x > 7).ToList();Di2015NewLine
26238Di2015UniqueSeparatorpublic static void DownloadFile(string remoteFilename, string localFilename)Di2015NewLine{Di2015NewLine    WebClient client = new WebClient();Di2015NewLine    client.DownloadFile(remoteFilename, localFilename);Di2015NewLine}Di2015NewLine
26394Di2015UniqueSeparator// read settingDi2015NewLinestring setting1 = (string)Settings.Default["MySetting1"];Di2015NewLine// save settingDi2015NewLineSettings.Default["MySetting2"] = "My Setting Value";Di2015NewLine
26394Di2015UniqueSeparatorProperties.Settings.Default.Upgrade(); Di2015NewLine
26582Di2015UniqueSeparatorpublic static string Format(Array array)Di2015NewLine{Di2015NewLine    var builder = new StringBuilder();Di2015NewLine    builder.AppendLine("Count: " + array.Length);Di2015NewLine    var counter = 0;Di2015NewLineDi2015NewLine    var dimensions = new List<int>();Di2015NewLine    for (int i = 0; i < array.Rank; i++)Di2015NewLine    {Di2015NewLine    \dimensions.Add(array.GetUpperBound(i) + 1);Di2015NewLine    }Di2015NewLineDi2015NewLine    foreach (var current in array)Di2015NewLine    {Di2015NewLine    \var index = "";Di2015NewLine    \var remainder = counter;Di2015NewLine    \foreach (var bound in dimensions)Di2015NewLine    \{Di2015NewLine    \\index = remainder % bound + ", " + index;Di2015NewLine    \\remainder = remainder / bound;Di2015NewLine    \}Di2015NewLine    \index = index.Substring(0, index.Length - 2);Di2015NewLineDi2015NewLine    \builder.AppendLine("   [" + index + "] " + current);Di2015NewLine    \counter++;Di2015NewLine    }Di2015NewLine    return builder.ToString();Di2015NewLine}Di2015NewLine
26750Di2015UniqueSeparatorvar type = typeof(IMyInterface);Di2015NewLinevar types = AppDomain.CurrentDomain.GetAssemblies()Di2015NewLine    .SelectMany(s => s.GetTypes())Di2015NewLine    .Where(p => type.IsAssignableFrom(p));Di2015NewLine
26750Di2015UniqueSeparatorloop assemblies  Di2015NewLine loop types  Di2015NewLine  see if implemented.Di2015NewLine
26769Di2015UniqueSeparatorTimeSpan span;Di2015NewLineDi2015NewLineDi2015NewLineif (TimeSpan.TryParse("05h:30m".Replace("m","").Replace("h",""), out span))Di2015NewLine            MessageBox.Show(span.ToString());Di2015NewLine
26832Di2015UniqueSeparatorint? value = 5;Di2015NewLine
26832Di2015UniqueSeparatoras
26832Di2015UniqueSeparatoras
26832Di2015UniqueSeparatornull
26832Di2015UniqueSeparatorDBNull
26832Di2015UniqueSeparatoras
26832Di2015UniqueSeparatorDataRow row = ds.Tables[0].Rows[0];Di2015NewLinestring value = row as string;Di2015NewLine
26832Di2015UniqueSeparatorrow
26832Di2015UniqueSeparatorDBNull
26832Di2015UniqueSeparatorvalue
26832Di2015UniqueSeparatornull
26832Di2015UniqueSeparatoras
26832Di2015UniqueSeparatornull
26881Di2015UniqueSeparatorWebRequest req = WebRequest.Create("http://mysite/myform.aspx");Di2015NewLinestring postData = "item1=11111&item2=22222&Item3=33333";Di2015NewLineDi2015NewLinebyte[] send = Encoding.Default.GetBytes(postData);Di2015NewLinereq.Method = "POST";Di2015NewLinereq.ContentType = "application/x-www-form-urlencoded";Di2015NewLinereq.ContentLength = send.Length;Di2015NewLineDi2015NewLineStream sout = req.GetRequestStream();Di2015NewLinesout.Write(send, 0, send.Length);Di2015NewLinesout.Flush();Di2015NewLinesout.Close();Di2015NewLineDi2015NewLineWebResponse res = req.GetResponse();Di2015NewLineStreamReader sr = new StreamReader(res.GetResponseStream());Di2015NewLinestring returnvalue = sr.ReadToEnd();Di2015NewLine
26884Di2015UniqueSeparatorstatic void Hook1()Di2015NewLine{Di2015NewLine\someEvent += new EventHandler( Program_someEvent );Di2015NewLine}Di2015NewLineDi2015NewLinestatic void Hook2()Di2015NewLine{Di2015NewLine\someEvent += Program_someEvent;Di2015NewLine}Di2015NewLine
26884Di2015UniqueSeparatorsomeEvent += new EventHandler( Program_someEvent );
26884Di2015UniqueSeparatorEventHandler
27310Di2015UniqueSeparatorpublic Task CreateTask(XmlElement elem)Di2015NewLine{Di2015NewLine    if (elem != null)Di2015NewLine    { Di2015NewLine        tryDi2015NewLine        {Di2015NewLine          Assembly a = typeof(Task).AssemblyDi2015NewLine          string type = string.Format("{0}.{1}Task",typeof(Task).Namespace,elem.Name);Di2015NewLineDi2015NewLine          //this is only here, so that if that type doesn't exist, this methodDi2015NewLine          //throws an exceptionDi2015NewLine          Type t = a.GetType(type, true, true);Di2015NewLineDi2015NewLine          return a.CreateInstance(type, true) as Task;Di2015NewLine        }Di2015NewLine        catch(System.Exception)Di2015NewLine        {Di2015NewLine          throw new ArgumentException("Invalid Task");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
27317Di2015UniqueSeparator<Target Name="GenerateSerializationAssembliesForAllTypes"Di2015NewLine  DependsOnTargets="AssignTargetPaths;Compile;ResolveKeySource"Di2015NewLine  Inputs="$(MSBuildAllProjects);@(IntermediateAssembly)"Di2015NewLine  Outputs="$(OutputPath)$(_SGenDllName)">Di2015NewLine    <SGen BuildAssemblyName="$(TargetFileName)"Di2015NewLine      BuildAssemblyPath="$(OutputPath)" References="@(ReferencePath)"Di2015NewLine      ShouldGenerateSerializer="true" UseProxyTypes="true"Di2015NewLine      KeyContainer="$(KeyContainerName)" KeyFile="$(KeyOriginatorFile)"Di2015NewLine      DelaySign="$(DelaySign)" ToolPath="$(SGenToolPath)">Di2015NewLine        <Output TaskParameter="SerializationAssembly"Di2015NewLine          ItemName="SerializationAssembly" />Di2015NewLine     </SGen>Di2015NewLine</Target>Di2015NewLine<!-- <Target Name="BeforeBuild">Di2015NewLine</Target> -->Di2015NewLine<Target Name="AfterBuild"Di2015NewLine  DependsOnTargets="GenerateSerializationAssembliesForAllTypes">Di2015NewLine</Target>Di2015NewLine
27450Di2015UniqueSeparator//obtain another marshalbyref object of the type ISessionManager:Di2015NewLineISessionManager = MyServerObject.GetSessionManager();Di2015NewLine
27454Di2015UniqueSeparatorpublic class Something : ITest<String>Di2015NewLine{Di2015NewLine  private Something() { }Di2015NewLine}Di2015NewLine
27454Di2015UniqueSeparatorpublic interface ITest<T>Di2015NewLine  where T : ITest<T>, new()Di2015NewLine{Di2015NewLine}Di2015NewLine
27454Di2015UniqueSeparatorpublic class A : ITest<A>Di2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic class B : ITest<A>Di2015NewLine{Di2015NewLine  private B() { }Di2015NewLine}Di2015NewLine
27584Di2015UniqueSeparatorstring[] files = directory.GetFiles(@"c:\\windows\\system32", "*.dll", SearchOption.AllDirectories);Di2015NewLineDi2015NewLinereturn files.Length;Di2015NewLine
27773Di2015UniqueSeparatorSystem.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceNames();Di2015NewLine
28168Di2015UniqueSeparatorIntermec.Print.LinePrinter lp;Di2015NewLineDi2015NewLineint escapeCharacter = int.Parse("1b", NumberStyles.HexNumber);Di2015NewLinechar[] toEzPrintMode = new char[] { Convert.ToChar(num2), 'E', 'Z' };Di2015NewLineDi2015NewLinelp = new Intermec.Print.LinePrinter("Printer_Config.XML", "PrinterPB20_40COL");Di2015NewLinelp.Open();Di2015NewLineDi2015NewLinelp.Write(charArray2); //switch to ez print modeDi2015NewLineDi2015NewLinestring testBarcode = "{PRINT:@75,10:PD417,YDIM 6,XDIM 2,COLUMNS 2, SECURITY 3|ABCDEFGHIJKL|}";Di2015NewLinelp.Write(testBarcode);Di2015NewLineDi2015NewLinelp.Write("{LP}"); //switch from ez print mode back to line printer modeDi2015NewLineDi2015NewLinelp.NewLine();Di2015NewLinelp.Write("Test"); //verify line printer mode is workingDi2015NewLine
28252Di2015UniqueSeparator    public static readonly RoutedCommand Login = new RoutedCommand();Di2015NewLine
28252Di2015UniqueSeparator    <Button Command="{x:Static myclass.Login}"  />Di2015NewLine
28252Di2015UniqueSeparator    CommandBindings.Add(new CommandBinding(myclass.Login, ExecuteLogin));Di2015NewLine
28252Di2015UniqueSeparator   <UserControl.CommandBindings>Di2015NewLine        <CommandBinding Command="{x:Static myclass.Login}" Executed="ExecuteLogin" />Di2015NewLine   </UserControl.CommandBindings>Di2015NewLine
28252Di2015UniqueSeparator    private void ExecuteLogin(object sender, ExecutedRoutedEventArgs e)Di2015NewLine    {Di2015NewLine          //Your code goes here... e has your parameter!Di2015NewLine    }Di2015NewLine
28346Di2015UniqueSeparator   <exec program="${output.dir}SpecUnit.Report.exe" verbose="true">Di2015NewLine      <arg value="${output.dir}${acceptance.tests.assembly}" />Di2015NewLine    </exec>Di2015NewLine
28648Di2015UniqueSeparatorSystem.Diagnostics
28648Di2015UniqueSeparatorStopwatch sw = Stopwatch.StartNew();Di2015NewLinePerformWork();Di2015NewLinesw.Stop();Di2015NewLineDi2015NewLineConsole.WriteLine("Time taken: {0}ms", sw.Elapsed.TotalMilliseconds);Di2015NewLine
28648Di2015UniqueSeparatorDateTime.Now
28648Di2015UniqueSeparatorDateTime.UtcNow
28648Di2015UniqueSeparatorDateTime.Now
28648Di2015UniqueSeparatorDateTime.UtcNow
28715Di2015UniqueSeparatorctrl is IInterfaceToFindDi2015NewLine
28715Di2015UniqueSeparatorctrl.GetType() == aTypeVariableDi2015NewLine
28715Di2015UniqueSeparatorif(ctrl is typeToFind)Di2015NewLine
28871Di2015UniqueSeparatorpublic class ProductDi2015NewLine{Di2015NewLine  private idType id;Di2015NewLine  public string NameDi2015NewLine  {Di2015NewLine    getDi2015NewLine    {Di2015NewLine      return Localizer.Instance.GetLocalString(id, "Name");Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
28871Di2015UniqueSeparator  public string GetLocalString(idType objectId, string fieldName)Di2015NewLine  {Di2015NewLine    switch (_currentLanguage)Di2015NewLine    {Di2015NewLine      case Language.English:Di2015NewLine        // db access code to retrieve your string, may need to include the tableDi2015NewLine        // the object is in (e.g. "Products" "Orders" etc.)Di2015NewLine        db.GetValue(objectId, fieldName, "en-us");Di2015NewLine        break;Di2015NewLine    }Di2015NewLine  }Di2015NewLine
28917Di2015UniqueSeparatordecimal
28917Di2015UniqueSeparatorpublic class PositionDi2015NewLine{Di2015NewLine    decimal x;Di2015NewLine    decimal y;Di2015NewLine    decimal z;Di2015NewLine}Di2015NewLine
29232Di2015UniqueSeparatorMicrosoft.Office.Interop.Excel.Workbook wbk = excelApplication.Workbooks[0];  //or some other way of obtaining this workbook reference, as Jason Z mentionedDi2015NewLinewbk.SaveAs(filename, Type.Missing, Type.Missing, Type.Missing,Di2015NewLine\\\Type.Missing, Type.Missing, XlSaveAsAccessMode.xlNoChange, Di2015NewLine            Type.Missing, Type.Missing, Type.Missing, Type.Missing,Di2015NewLine\\\Type.Missing);Di2015NewLinewbk.Close();Di2015NewLineexcelApplication.Quit();Di2015NewLine
29283Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing Microsoft.CSharp;Di2015NewLineusing System.CodeDom;Di2015NewLineusing System.IO;Di2015NewLineusing System.CodeDom.Compiler;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLinenamespace CodeDomQuestionDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLineDi2015NewLine        private static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Program p = new Program();Di2015NewLine            p.dotest("C:\\\\fs.exe");Di2015NewLine        }Di2015NewLineDi2015NewLine        public void dotest(string outputname)Di2015NewLine        {Di2015NewLine            CSharpCodeProvider cscProvider = new CSharpCodeProvider();Di2015NewLine            CompilerParameters cp = new CompilerParameters();Di2015NewLine            cp.MainClass = null;Di2015NewLine            cp.GenerateExecutable = true;Di2015NewLine            cp.OutputAssembly = outputname;Di2015NewLineDi2015NewLine            CodeNamespace ns = new CodeNamespace("StackOverflowd");Di2015NewLineDi2015NewLine            CodeTypeDeclaration type = new CodeTypeDeclaration();Di2015NewLine            type.IsClass = true;Di2015NewLine            type.Name = "MainClass";Di2015NewLine            type.TypeAttributes = TypeAttributes.Public;Di2015NewLineDi2015NewLine            ns.Types.Add(type);Di2015NewLineDi2015NewLine            CodeMemberMethod cmm = new CodeMemberMethod();Di2015NewLine            cmm.Attributes = MemberAttributes.Static;Di2015NewLine            cmm.Name = "Main";Di2015NewLine            cmm.Statements.Add(new CodeSnippetExpression("System.Console.WriteLine('f'zxcvv)"));Di2015NewLine            type.Members.Add(cmm);Di2015NewLineDi2015NewLine            CodeCompileUnit ccu = new CodeCompileUnit();Di2015NewLine            ccu.Namespaces.Add(ns);Di2015NewLineDi2015NewLine            CompilerResults results = cscProvider.CompileAssemblyFromDom(cp, ccu);Di2015NewLineDi2015NewLine            foreach (CompilerError err in results.Errors)Di2015NewLine                Console.WriteLine(err.ErrorText + " - " + err.FileName + ":" + err.Line);Di2015NewLine            Console.WriteLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
29472Di2015UniqueSeparatorMyObj o = null;Di2015NewLineAssembly a = Assembly.LoadFrom("my.dll");Di2015NewLineType t = a.GetType("type info here");Di2015NewLineDi2015NewLineConstructorInfo ctor = t.GetConstructor(new Type[] { typeof(string) });Di2015NewLineif(ctor != null)Di2015NewLine   o = ctor.Invoke(new object[] { s });Di2015NewLine
29485Di2015UniqueSeparatorYourEnum foo = (YourEnum) Enum.Parse(typeof(YourEnum), yourString);Di2015NewLine
29485Di2015UniqueSeparatorYourEnum foo = (YourEnum)yourInt;Di2015NewLine
29485Di2015UniqueSeparatorYourEnum foo = Enum.ToObject(typeof(YourEnum) , yourInt);Di2015NewLine
29720Di2015UniqueSeparator[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]Di2015NewLinepublic string NameDi2015NewLine{Di2015NewLine    get;Di2015NewLine    set;Di2015NewLine}Di2015NewLine
29754Di2015UniqueSeparatorHttpContext.Current.Server.ScriptTimeout
29866Di2015UniqueSeparatorResourceManager
29866Di2015UniqueSeparatorLogin.resx
29866Di2015UniqueSeparatorvar resman = new System.Resources.ResourceManager(Di2015NewLine    "RootNamespace.Login",Di2015NewLine    System.Reflection.Assembly.GetExecutingAssembly()Di2015NewLine)Di2015NewLinevar text = resman.GetString("resname");Di2015NewLine
30109Di2015UniqueSeparatorpublic struct LineDi2015NewLine{Di2015NewLine    public static Line Empty;Di2015NewLineDi2015NewLine    private PointF p1;Di2015NewLine    private PointF p2;Di2015NewLineDi2015NewLine    public Line(PointF p1, PointF p2)Di2015NewLine    {Di2015NewLine        this.p1 = p1;Di2015NewLine        this.p2 = p2;Di2015NewLine    }Di2015NewLineDi2015NewLine    public PointF P1Di2015NewLine    {Di2015NewLine        get { return p1; }Di2015NewLine        set { p1 = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public PointF P2Di2015NewLine    {Di2015NewLine        get { return p2; }Di2015NewLine        set { p2 = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public float X1Di2015NewLine    {Di2015NewLine        get { return p1.X; }Di2015NewLine        set { p1.X = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public float X2Di2015NewLine    {Di2015NewLine        get { return p2.X; }Di2015NewLine        set { p2.X = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public float Y1Di2015NewLine    {Di2015NewLine        get { return p1.Y; }Di2015NewLine        set { p1.Y = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public float Y2Di2015NewLine    {Di2015NewLine        get { return p2.Y; }Di2015NewLine        set { p2.Y = value; }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic struct Polygon: IEnumerable<PointF>Di2015NewLine{Di2015NewLine    private PointF[] points;Di2015NewLineDi2015NewLine    public Polygon(PointF[] points)Di2015NewLine    {Di2015NewLine        this.points = points;Di2015NewLine    }Di2015NewLineDi2015NewLine    public PointF[] PointsDi2015NewLine    {Di2015NewLine        get { return points; }Di2015NewLine        set { points = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public int LengthDi2015NewLine    {Di2015NewLine        get { return points.Length; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public PointF this[int index]Di2015NewLine    {Di2015NewLine        get { return points[index]; }Di2015NewLine        set { points[index] = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static implicit operator PointF[](Polygon polygon)Di2015NewLine    {Di2015NewLine        return polygon.points;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static implicit operator Polygon(PointF[] points)Di2015NewLine    {Di2015NewLine        return new Polygon(points);Di2015NewLine    }Di2015NewLineDi2015NewLine    IEnumerator<PointF> IEnumerable<PointF>.GetEnumerator()Di2015NewLine    {Di2015NewLine        return (IEnumerator<PointF>)points.GetEnumerator();Di2015NewLine    }Di2015NewLineDi2015NewLine    public IEnumerator GetEnumerator()Di2015NewLine    {Di2015NewLine        return points.GetEnumerator();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic enum IntersectionDi2015NewLine{Di2015NewLine    None,Di2015NewLine    Tangent,Di2015NewLine    Intersection,Di2015NewLine    ContainmentDi2015NewLine}Di2015NewLineDi2015NewLinepublic static class GeometryDi2015NewLine{Di2015NewLineDi2015NewLine    public static Intersection IntersectionOf(Line line, Polygon polygon)Di2015NewLine    {Di2015NewLine        if (polygon.Length == 0)Di2015NewLine        {Di2015NewLine            return Intersection.None;Di2015NewLine        }Di2015NewLine        if (polygon.Length == 1)Di2015NewLine        {Di2015NewLine            return IntersectionOf(polygon[0], line);Di2015NewLine        }Di2015NewLine        bool tangent = false;Di2015NewLine        for (int index = 0; index < polygon.Length; index++)Di2015NewLine        {Di2015NewLine            int index2 = (index + 1)%polygon.Length;Di2015NewLine            Intersection intersection = IntersectionOf(line, new Line(polygon[index], polygon[index2]));Di2015NewLine            if (intersection == Intersection.Intersection)Di2015NewLine            {Di2015NewLine                return intersection;Di2015NewLine            }Di2015NewLine            if (intersection == Intersection.Tangent)Di2015NewLine            {Di2015NewLine                tangent = true;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return tangent ? Intersection.Tangent : IntersectionOf(line.P1, polygon);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static Intersection IntersectionOf(PointF point, Polygon polygon)Di2015NewLine    {Di2015NewLine        switch (polygon.Length)Di2015NewLine        {Di2015NewLine            case 0:Di2015NewLine                return Intersection.None;Di2015NewLine            case 1:Di2015NewLine                if (polygon[0].X == point.X && polygon[0].Y == point.Y)Di2015NewLine                {Di2015NewLine                    return Intersection.Tangent;Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    return Intersection.None;Di2015NewLine                }Di2015NewLine            case 2:Di2015NewLine                return IntersectionOf(point, new Line(polygon[0], polygon[1]));Di2015NewLine        }Di2015NewLineDi2015NewLine        int counter = 0;Di2015NewLine        int i;Di2015NewLine        PointF p1;Di2015NewLine        int n = polygon.Length;Di2015NewLine        p1 = polygon[0];Di2015NewLine        if (point == p1)Di2015NewLine        {Di2015NewLine            return Intersection.Tangent;Di2015NewLine        }Di2015NewLineDi2015NewLine        for (i = 1; i <= n; i++)Di2015NewLine        {Di2015NewLine            PointF p2 = polygon[i % n];Di2015NewLine            if (point == p2)Di2015NewLine            {Di2015NewLine                return Intersection.Tangent;Di2015NewLine            }Di2015NewLine            if (point.Y > Math.Min(p1.Y, p2.Y))Di2015NewLine            {Di2015NewLine                if (point.Y <= Math.Max(p1.Y, p2.Y))Di2015NewLine                {Di2015NewLine                    if (point.X <= Math.Max(p1.X, p2.X))Di2015NewLine                    {Di2015NewLine                        if (p1.Y != p2.Y)Di2015NewLine                        {Di2015NewLine                            double xinters = (point.Y - p1.Y) * (p2.X - p1.X) / (p2.Y - p1.Y) + p1.X;Di2015NewLine                            if (p1.X == p2.X || point.X <= xinters)Di2015NewLine                                counter++;Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine            p1 = p2;Di2015NewLine        }Di2015NewLineDi2015NewLine        return (counter % 2 == 1) ? Intersection.Containment : Intersection.None;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static Intersection IntersectionOf(PointF point, Line line)Di2015NewLine    {Di2015NewLine        float bottomY = Math.Min(line.Y1, line.Y2);Di2015NewLine        float topY = Math.Max(line.Y1, line.Y2);Di2015NewLine        bool heightIsRight = point.Y >= bottomY &&Di2015NewLine                             point.Y <= topY;Di2015NewLine        //Vertical line, slope is divideByZero error!Di2015NewLine        if (line.X1 == line.X2)Di2015NewLine        {Di2015NewLine            if (point.X == line.X1 && heightIsRight)Di2015NewLine            {Di2015NewLine                return Intersection.Tangent;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                return Intersection.None;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        float slope = (line.X2 - line.X1)/(line.Y2 - line.Y1);Di2015NewLine        bool onLine = (line.Y1 - point.Y) == (slope*(line.X1 - point.X));Di2015NewLine        if (onLine && heightIsRight)Di2015NewLine        {Di2015NewLine            return Intersection.Tangent;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            return Intersection.None;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
30231Di2015UniqueSeparatorstring dateString = "5/1/2008 8:30:52 AM";Di2015NewLineDateTime date1 = DateTime.Parse(dateString, CultureInfo.InvariantCulture);Di2015NewLine
30593Di2015UniqueSeparatorusing (Image src = Image.FromFile("main.gif"))Di2015NewLine{Di2015NewLine    using (Bitmap dst = new Bitmap(100, 129))Di2015NewLine    {Di2015NewLine        using (Graphics g = Graphics.FromImage(dst))Di2015NewLine        {Di2015NewLine            g.SmoothingMode = SmoothingMode.AntiAlias;Di2015NewLine            g.InterpolationMode = InterpolationMode.HighQualityBicubic;Di2015NewLine            g.DrawImage(src, 0, 0, dst.Width, dst.Height);Di2015NewLine        }Di2015NewLineDi2015NewLine        dst.Save("scale.png", ImageFormat.Png);Di2015NewLine    }Di2015NewLine}Di2015NewLine
30629Di2015UniqueSeparator    /// <summary>Di2015NewLine    /// Compare versions of form "1,2,3,4" or "1.2.3.4". Throws FormatExceptionDi2015NewLine    /// in case of invalid version.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="strA">the first version</param>Di2015NewLine    /// <param name="strB">the second version</param>Di2015NewLine    /// <returns>less than zero if strA is less than strB, equal to zero ifDi2015NewLine    /// strA equals strB, and greater than zero if strA is greater than strB</returns>Di2015NewLine    public static int CompareVersions(String strA, String strB)Di2015NewLine    {Di2015NewLine        Version vA = new Version(strA.Replace(",", "."));Di2015NewLine        Version vB = new Version(strB.Replace(",", "."));Di2015NewLineDi2015NewLine        return vA.CompareTo(vB);Di2015NewLine    }Di2015NewLine
30629Di2015UniqueSeparator    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        Test("1.0.0.0", "1.0.0.1", -1);Di2015NewLine        Test("1.0.0.1", "1.0.0.0", 1);Di2015NewLine        Test("1.0.0.0", "1.0.0.0", 0);Di2015NewLine        Test("1, 0.0.0", "1.0.0.0", 0);Di2015NewLine        Test("9, 5, 1, 44", "3.4.5.6", 1);Di2015NewLine        Test("1, 5, 1, 44", "3.4.5.6", -1);Di2015NewLine        Test("6,5,4,3", "6.5.4.3", 0);Di2015NewLineDi2015NewLine        tryDi2015NewLine        {Di2015NewLine            CompareVersions("2, 3, 4 - 4", "1,2,3,4");Di2015NewLine            Console.WriteLine("Exception should have been thrown");Di2015NewLine        }Di2015NewLine        catch (FormatException e)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Got exception as expected.");Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void Test(string lhs, string rhs, int expected)Di2015NewLine    {Di2015NewLine        int result = CompareVersions(lhs, rhs);Di2015NewLine        Console.WriteLine("Test(\\"" + lhs + "\\", \\"" + rhs + "\\", " + expected +Di2015NewLine            (result.Equals(expected) ? " succeeded." : " failed."));Di2015NewLine    }Di2015NewLine
31036Di2015UniqueSeparatorusing (OpenFileDialog dlg = new OpenFileDialog())Di2015NewLine{Di2015NewLine    dlg.Title = "Select a file";Di2015NewLine    if (dlg.ShowDialog()== DialogResult.OK)Di2015NewLine    {Di2015NewLine        //do something with dlg.FileName  Di2015NewLine    }Di2015NewLine}Di2015NewLine
31056Di2015UniqueSeparator[^\\r]\\nDi2015NewLine
31056Di2015UniqueSeparator([^\\r]|$)\\nDi2015NewLine
31056Di2015UniqueSeparatormyStr = myStr.Replace("(?<!\\r)\\n", "\\r\\n");Di2015NewLine
31110Di2015UniqueSeparatorabstract class Vehicle<T> where T : AxleDi2015NewLine{Di2015NewLine  public string Name;Di2015NewLine  public List<T> Axles;Di2015NewLine}Di2015NewLineDi2015NewLineclass Motorcycle : Vehicle<MotorcycleAxle>Di2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLineclass Car : Vehicle<CarAxle>Di2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLineabstract class AxleDi2015NewLine{Di2015NewLine  public int Length;Di2015NewLine  public void Turn(int numTurns) { ... }Di2015NewLine}Di2015NewLineDi2015NewLineclass MotorcycleAxle : AxleDi2015NewLine{Di2015NewLine  public bool WheelAttached;Di2015NewLine}Di2015NewLineDi2015NewLineclass CarAxle : AxleDi2015NewLine{Di2015NewLine  public bool LeftWheelAttached;Di2015NewLine  public bool RightWheelAttached;Di2015NewLine}Di2015NewLine
31220Di2015UniqueSeparatorpublic Person(LogonName ln)Di2015NewLine{Di2015NewLine    this.Load(ln.ToString());Di2015NewLine}Di2015NewLineDi2015NewLinepublic Person(BadgeNumber bn)Di2015NewLine{Di2015NewLine    //load logic here...Di2015NewLine}Di2015NewLine
31437Di2015UniqueSeparatorResolveUrl
31437Di2015UniqueSeparatorRedirect
31437Di2015UniqueSeparatorReturnPath
31437Di2015UniqueSeparatorReturnPath
31437Di2015UniqueSeparatorResponse.Redirect("~/Login.aspx?ReturnPath=" + Server.UrlEncode(Request.Url.ToString()));Di2015NewLine
31437Di2015UniqueSeparatorUri.ToString
31437Di2015UniqueSeparatorResponse.Redirect("~/Login.aspx?ReturnPath=" + Server.UrlEncode(Request.Url.AbsoluteUri));Di2015NewLine
31513Di2015UniqueSeparatorif (typeof(T) == typeof(String)) return (T)(object)String.Empty;Di2015NewLine
31710Di2015UniqueSeparatorvar matches = dict.Values.Where(rec => rec.Name == "foo").ToList();Di2015NewLine
31929Di2015UniqueSeparatorList<Person> foo = new List<Person>();Di2015NewLine
31929Di2015UniqueSeparatorPerson
31929Di2015UniqueSeparatorList<Person>
31929Di2015UniqueSeparatorListOfPerson
31929Di2015UniqueSeparatorPerson
31929Di2015UniqueSeparatorPerson
31929Di2015UniqueSeparatorList<something>
31929Di2015UniqueSeparatorList
31929Di2015UniqueSeparatorArrayList<Person> foo = new ArrayList<Person>();Di2015NewLine
31929Di2015UniqueSeparatorPerson
31929Di2015UniqueSeparatorListOfPerson
31929Di2015UniqueSeparatorArrayList
31929Di2015UniqueSeparatorPerson p = (Person)foo.get(1);
31929Di2015UniqueSeparatorPerson
31929Di2015UniqueSeparatorObject
31929Di2015UniqueSeparatorArrayList
31929Di2015UniqueSeparatorListOfPerson
31929Di2015UniqueSeparatorObject
31929Di2015UniqueSeparatorPerson
31929Di2015UniqueSeparatorstd::list<Person>* foo = new std::list<Person>();Di2015NewLine
31929Di2015UniqueSeparatorpseudo-classes
31929Di2015UniqueSeparatorPerson
31929Di2015UniqueSeparatorPerson
31929Di2015UniqueSeparatorPerson
31929Di2015UniqueSeparatorstring addNames<T>( T first, T second ) { return first.Name() + second.Name(); }Di2015NewLine
31929Di2015UniqueSeparatorT
31929Di2015UniqueSeparatorinterface IHasName{ string Name(); };Di2015NewLinestring addNames<T>( T first, T second ) where T : IHasName { .... }Di2015NewLine
31929Di2015UniqueSeparator<T extends IHasName>
31929Di2015UniqueSeparatorstring addNames<T>( T first, T second ) { return first + second; }Di2015NewLine
31929Di2015UniqueSeparator+
32005Di2015UniqueSeparatorusing (var conn = new SqlConnection(yourConnectionString))Di2015NewLine{Di2015NewLine    var cmd = new SqlCommand("insert into Foo values (@bar)", conn);Di2015NewLine    cmd.Parameters.AddWithValue("@bar", 17);Di2015NewLine    conn.Open();Di2015NewLine    cmd.ExecuteNonQuery();Di2015NewLine}Di2015NewLine
32063Di2015UniqueSeparatorat MyDeliveryExtension.MailDelivery.SendMail(SubscriptionData data, Stream reportStream, String reportName, String smptServerHostname, Int32 smtpServerPort) Di2015NewLine  in C:\\inetpub\\wwwroot\\CustomReporting\\MyDeliveryExtension\\MailDelivery.cs:line 48 Di2015NewLineDi2015NewLineat MyDeliveryExtension.MyDelivery.Deliver(Notification notification) Di2015NewLine  in C:\\inetpub\\wwwroot\\CustomReporting\\MyDeliveryExtension\\MyDelivery.cs:line 153Di2015NewLine
32063Di2015UniqueSeparatorpublic static List<string> SendMail(SubscriptionData data, Stream reportStream, string reportName, string smptServerHostname, int smtpServerPort)Di2015NewLine{Di2015NewLine  List<string> failedRecipients = new List<string>();Di2015NewLineDi2015NewLine  MailMessage emailMessage = new MailMessage(data.ReplyTo, data.To) {Di2015NewLine      Priority = data.Priority,Di2015NewLine      Subject = data.Subject,Di2015NewLine      IsBodyHtml = false,Di2015NewLine      Body = data.CommentDi2015NewLine  };Di2015NewLineDi2015NewLine  if (reportStream != null)Di2015NewLine    emailMessage.Attachments.Add(new Attachment(reportStream, reportName));Di2015NewLineDi2015NewLine  tryDi2015NewLine  {Di2015NewLine      SmtpClient smtp = new SmtpClient(smptServerHostname, smtpServerPort);Di2015NewLineDi2015NewLine      // Send the MailMessageDi2015NewLine      smtp.Send(emailMessage);Di2015NewLine  }Di2015NewLine  catch (SmtpFailedRecipientsException ex)Di2015NewLine  {Di2015NewLine    // Delivery failed for the recipient. Add the e-mail address to the failedRecipients ListDi2015NewLine    failedRecipients.Add(ex.FailedRecipient);Di2015NewLineDi2015NewLine    //are you missing a loop here? only one failed address will ever be returnedDi2015NewLine  }Di2015NewLine  catch (SmtpFailedRecipientException ex)Di2015NewLine  {Di2015NewLine    // Delivery failed for the recipient. Add the e-mail address to the failedRecipients ListDi2015NewLine    failedRecipients.Add(ex.FailedRecipient);Di2015NewLine  }Di2015NewLineDi2015NewLine  // Return the List of failed recipient e-mail addresses, so the client can maintain its list.Di2015NewLine  return failedRecipients;Di2015NewLine}Di2015NewLine
32113Di2015UniqueSeparatorListViewItem::BeginEdit();Di2015NewLine
32336Di2015UniqueSeparatorSystem.Net.Mail
32336Di2015UniqueSeparatorSystem.Web.Mail
32336Di2015UniqueSeparatorSystem.Web.Mail
32336Di2015UniqueSeparatorusing System.Net;Di2015NewLineusing System.Net.Mail;Di2015NewLineDi2015NewLinevar fromAddress = new MailAddress("from@gmail.com", "From Name");Di2015NewLinevar toAddress = new MailAddress("to@example.com", "To Name");Di2015NewLineconst string fromPassword = "fromPassword";Di2015NewLineconst string subject = "Subject";Di2015NewLineconst string body = "Body";Di2015NewLineDi2015NewLinevar smtp = new SmtpClientDi2015NewLine           {Di2015NewLine               Host = "smtp.gmail.com",Di2015NewLine               Port = 587,Di2015NewLine               EnableSsl = true,Di2015NewLine               DeliveryMethod = SmtpDeliveryMethod.Network,Di2015NewLine               UseDefaultCredentials = false,Di2015NewLine               Credentials = new NetworkCredential(fromAddress.Address, fromPassword)Di2015NewLine           };Di2015NewLineusing (var message = new MailMessage(fromAddress, toAddress)Di2015NewLine                     {Di2015NewLine                         Subject = subject,Di2015NewLine                         Body = bodyDi2015NewLine                     })Di2015NewLine{Di2015NewLine    smtp.Send(message);Di2015NewLine}Di2015NewLine
32399Di2015UniqueSeparatort = (time of entry post) - (Dec 8, 2005)Di2015NewLinex = upvotes - downvotesDi2015NewLineDi2015NewLiney = {1 if x > 0, 0 if x = 0, -1 if x < 0)Di2015NewLinez = {1 if x < 1, otherwise x}Di2015NewLineDi2015NewLinelog(z) + (y * t)/45000Di2015NewLine
32418Di2015UniqueSeparator<ResoureDictionary ...Di2015NewLine  xmlns:local="clr-namespace:Namespace.Where.Your.BaseThingy.Class.Is.Defined"Di2015NewLine>Di2015NewLine  <Style BasedOn="{x:Static local:BaseThingy.BaseStyle}" TargetType="BaseThingy" />Di2015NewLine</ResourceDictionary>Di2015NewLine
32465Di2015UniqueSeparatorvar pageObject = (from op in db.ObjectPermissionsDi2015NewLine                  join pg in db.Pages on op.ObjectPermissionName equals page.PageNameDi2015NewLine                  where pg.PageID == page.PageIDDi2015NewLine                  select new { pg, op }).SingleOrDefault();Di2015NewLine
32465Di2015UniqueSeparatorvar pageObject = (from op in db.ObjectPermissionsDi2015NewLine                  join pg in db.Pages on op.ObjectPermissionName equals page.PageNameDi2015NewLine                  where pg.PageID == page.PageIDDi2015NewLine                  select newDi2015NewLine                  {Di2015NewLine                      PermissionName = pg, Di2015NewLine                      ObjectPermission = opDi2015NewLine                  }).SingleOrDefault();Di2015NewLine
32465Di2015UniqueSeparatorif (pageObject.PermissionName.FooBar == "golden goose") Application.Exit();Di2015NewLine
32473Di2015UniqueSeparator    private static void DisableControl(WebControl control)Di2015NewLine    {Di2015NewLine        Type controlType = control.GetType();Di2015NewLineDi2015NewLine        if (controlType == typeof(CheckBox))Di2015NewLine        {Di2015NewLine            ((CheckBox)control).InputAttributes.Add("disabled", "disabled");Di2015NewLineDi2015NewLine        }Di2015NewLine        else if (controlType == typeof(RadioButton))Di2015NewLine        {Di2015NewLine            ((RadioButton)control).InputAttributes.Add("disabled", "true");Di2015NewLine        }Di2015NewLine        else if (controlType == typeof(ImageButton))Di2015NewLine        {Di2015NewLine            ((ImageButton)control).Enabled = false;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            control.Attributes.Add("readonly", "readonly");Di2015NewLine        }Di2015NewLine    }Di2015NewLine
32648Di2015UniqueSeparatorRegex r = new Regex("(https?://[^ ]+)");Di2015NewLinemyString = r.Replace(myString, "<a href=\\"$1\\">$1</a>");Di2015NewLine
32705Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    db.SubmitChanges(ConflictMode.ContinueOnConflict);Di2015NewLine}Di2015NewLinecatch (ChangeConflictException e)Di2015NewLine{Di2015NewLine    Console.WriteLine("Optimistic concurrency error.");Di2015NewLine    Console.WriteLine(e.Message);Di2015NewLine    Console.ReadLine();Di2015NewLine    foreach (ObjectChangeConflict occ in db.ChangeConflicts)Di2015NewLine    {Di2015NewLine        MetaTable metatable = db.Mapping.GetTable(occ.Object.GetType());Di2015NewLine        Customer entityInConflict = (Customer)occ.Object;Di2015NewLine        Console.WriteLine("Table name: {0}", metatable.TableName);Di2015NewLine        Console.Write("Customer ID: ");Di2015NewLine        Console.WriteLine(entityInConflict.CustomerID);Di2015NewLine        foreach (MemberChangeConflict mcc in occ.MemberConflicts)Di2015NewLine        {Di2015NewLine            object currVal = mcc.CurrentValue;Di2015NewLine            object origVal = mcc.OriginalValue;Di2015NewLine            object databaseVal = mcc.DatabaseValue;Di2015NewLine            MemberInfo mi = mcc.Member;Di2015NewLine            Console.WriteLine("Member: {0}", mi.Name);Di2015NewLine            Console.WriteLine("current value: {0}", currVal);Di2015NewLine            Console.WriteLine("original value: {0}", origVal);Di2015NewLine            Console.WriteLine("database value: {0}", databaseVal);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
32705Di2015UniqueSeparatordb.SubmitChanges(ConflictMode.ContinueOnConflict);Di2015NewLine
32749Di2015UniqueSeparatorDateTime.Now.ToString("M/d/yyyy");Di2015NewLine
32841Di2015UniqueSeparatorMemoryStream ms = new MemoryStream(byteArrayIn);Di2015NewLine
32841Di2015UniqueSeparatorms.Write(byteArrayIn, 0, byteArrayIn.Length);Di2015NewLine
33179Di2015UniqueSeparator<Browsable(True)> Public Event InitializeStuffCallbackDi2015NewLine
33179Di2015UniqueSeparator[Browsable(true)]Di2015NewLinepublic event EventHandler InitializeStuffCallback;Di2015NewLine
33234Di2015UniqueSeparatorpublic static class ExtensionsDi2015NewLine{Di2015NewLine    public static bool In<T>(this T testValue, params T[] values)Di2015NewLine    {Di2015NewLine    \return values.Contains(testValue);Di2015NewLine    }Di2015NewLine}Di2015NewLine
33234Di2015UniqueSeparatorPersonnel userId = Personnel.JohnDoe;Di2015NewLineDi2015NewLineif (userId.In(Personnel.JohnDoe, Personnel.JaneDoe))Di2015NewLine{Di2015NewLine    // Do somethingDi2015NewLine}Di2015NewLine
33391Di2015UniqueSeparatorpublic static AbstractCriterion operator &(AbstractCriterion lhs, AbstractCriterion rhs)Di2015NewLine{Di2015NewLine       return new AndExpression(lhs, rhs);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static AbstractCriterion operator |(AbstractCriterion lhs, AbstractCriterion rhs)Di2015NewLine{Di2015NewLine       return new OrExpression(lhs, rhs);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static bool operator false(AbstractCriterion criteria)Di2015NewLine{Di2015NewLine       return false;Di2015NewLine}Di2015NewLinepublic static bool operator true(AbstractCriterion criteria)Di2015NewLine{Di2015NewLine       return false;Di2015NewLine}Di2015NewLine
34095Di2015UniqueSeparatorXPathDocument myXPathDoc = new XPathDocument(myXmlFile) ;Di2015NewLineXslTransform myXslTrans = new XslTransform() ;Di2015NewLinemyXslTrans.Load(myStyleSheet);Di2015NewLineXmlTextWriter myWriter = new XmlTextWriter("result.html",null) ;Di2015NewLinemyXslTrans.Transform(myXPathDoc,null,myWriter) ;Di2015NewLine
34095Di2015UniqueSeparatorXslTransform
34095Di2015UniqueSeparatorXslCompiledTransform
34095Di2015UniqueSeparatorXPathDocument myXPathDoc = new XPathDocument(myXmlFile) ;Di2015NewLineXslCompiledTransform myXslTrans = new XslCompiledTransform();Di2015NewLinemyXslTrans.Load(myStyleSheet);Di2015NewLineXmlTextWriter myWriter = new XmlTextWriter("result.html",null);Di2015NewLinemyXslTrans.Transform(myXPathDoc,null,myWriter);Di2015NewLine
34108Di2015UniqueSeparatoruints
34108Di2015UniqueSeparatorint
34431Di2015UniqueSeparatorstatic string Truncate(string s, int maxLength) {Di2015NewLine    if (Encoding.UTF8.GetByteCount(s) <= maxLength)Di2015NewLine    \return s;Di2015NewLine    var cs = s.ToCharArray();Di2015NewLine    int length = 0;Di2015NewLine    int i = 0;Di2015NewLine    while (i < cs.Length){Di2015NewLine    \int charSize = 1;Di2015NewLine    \if (i < (cs.Length - 1) && char.IsSurrogate(cs[i]))Di2015NewLine    \\charSize = 2;Di2015NewLine    \int byteSize = Encoding.UTF8.GetByteCount(cs, i, charSize);Di2015NewLine    \if ((byteSize + length) <= maxLength){Di2015NewLine    \\i = i + charSize;Di2015NewLine    \\length += byteSize;Di2015NewLine    \}Di2015NewLine    \elseDi2015NewLine    \\break;Di2015NewLine    }Di2015NewLine    return s.Substring(0, i);Di2015NewLine}Di2015NewLine
34533Di2015UniqueSeparator/// <summary>Di2015NewLine/// Authenticates a user based on a username and password.Di2015NewLine/// </summary>Di2015NewLine/// <param name="username">The username.</param>Di2015NewLine/// <param name="password">The password.</param>Di2015NewLine/// <returns>Di2015NewLine/// True, if authentication is successful, otherwise False.Di2015NewLine/// </returns>Di2015NewLine/// <remarks>Di2015NewLine/// For use with local systemsDi2015NewLine/// </remarks>Di2015NewLinepublic override bool Authenticate(string username, string password)Di2015NewLine
34541Di2015UniqueSeparatorstruct Person {Di2015NewLine    public readonly string FirstName;Di2015NewLine    public readonly string Name;Di2015NewLine    public readonly DateTime Birthday;Di2015NewLineDi2015NewLine    public int ShoeSize;Di2015NewLine}Di2015NewLine
34541Di2015UniqueSeparatorpublic int GetHashCode() {Di2015NewLine    return FirstName.GetHashCode() ^ Name.GetHashCode() ^ Birthday.GetHashCode();Di2015NewLine}Di2015NewLine
34884Di2015UniqueSeparatorforeach(string key in hashTable.Keys)Di2015NewLine{Di2015NewLine   Console.WriteLine(String.Format("{0}: {1}", key, hashTable[key]));Di2015NewLine}Di2015NewLine
35116Di2015UniqueSeparatorwrite(MD5(SecretKey + ConfigFileText));Di2015NewLine
35172Di2015UniqueSeparatoruint i = 17;Di2015NewLineuint j = i << 1 | i >> 15;Di2015NewLine
35172Di2015UniqueSeparatorvar input = 17;Di2015NewLinevar result = i << n | i >> (b - n);Di2015NewLine
35314Di2015UniqueSeparatorif(condition1 || condition2 || condition3)Di2015NewLine
35314Di2015UniqueSeparatorif(condition1 | condition2 | condition3)Di2015NewLine
35314Di2015UniqueSeparatorif(class != null && class.someVar < 20)Di2015NewLine
35666Di2015UniqueSeparatorpublic class ReadOnlyDictionary<TKey, TValue> : IDictionary<TKey, TValue>Di2015NewLine{Di2015NewLine    IDictionary<TKey, TValue> _dict;Di2015NewLineDi2015NewLine    public ReadOnlyDictionary(IDictionary<TKey, TValue> backingDict)Di2015NewLine    {Di2015NewLine        _dict = backingDict;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Add(TKey key, TValue value)Di2015NewLine    {Di2015NewLine        throw new InvalidOperationException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool ContainsKey(TKey key)Di2015NewLine    {Di2015NewLine        return _dict.ContainsKey(key);Di2015NewLine    }Di2015NewLineDi2015NewLine    public ICollection<TKey> KeysDi2015NewLine    {Di2015NewLine        get { return _dict.Keys; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool Remove(TKey key)Di2015NewLine    {Di2015NewLine        throw new InvalidOperationException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool TryGetValue(TKey key, out TValue value)Di2015NewLine    {Di2015NewLine        return _dict.TryGetValue(key, out value);Di2015NewLine    }Di2015NewLineDi2015NewLine    public ICollection<TValue> ValuesDi2015NewLine    {Di2015NewLine        get { return _dict.Values; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public TValue this[TKey key]Di2015NewLine    {Di2015NewLine        get { return _dict[key]; }Di2015NewLine        set { throw new InvalidOperationException(); }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Add(KeyValuePair<TKey, TValue> item)Di2015NewLine    {Di2015NewLine        throw new InvalidOperationException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Clear()Di2015NewLine    {Di2015NewLine        throw new InvalidOperationException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool Contains(KeyValuePair<TKey, TValue> item)Di2015NewLine    {Di2015NewLine        return _dict.Contains(item);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)Di2015NewLine    {Di2015NewLine        _dict.CopyTo(array, arrayIndex);Di2015NewLine    }Di2015NewLineDi2015NewLine    public int CountDi2015NewLine    {Di2015NewLine        get { return _dict.Count; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool IsReadOnlyDi2015NewLine    {Di2015NewLine        get { return true; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool Remove(KeyValuePair<TKey, TValue> item)Di2015NewLine    {Di2015NewLine        throw new InvalidOperationException();Di2015NewLine    }Di2015NewLineDi2015NewLine    public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()Di2015NewLine    {Di2015NewLine        return _dict.GetEnumerator();Di2015NewLine    }Di2015NewLineDi2015NewLine    System.Collections.IEnumerator Di2015NewLine           System.Collections.IEnumerable.GetEnumerator()Di2015NewLine    {Di2015NewLine        return ((System.Collections.IEnumerable)_dict).GetEnumerator();Di2015NewLine    }Di2015NewLine}Di2015NewLine
35930Di2015UniqueSeparatorProcess.Start
36050Di2015UniqueSeparatorSystem.Media.SoundPlayer
36050Di2015UniqueSeparatorusing (var file = new FileStream(oggFilename, FileMode.Open, FileAccess.Read))Di2015NewLine{Di2015NewLine  var player = new SoundPlayer(new OggDecodeStream(file));Di2015NewLine  player.PlaySync();Di2015NewLine}Di2015NewLine
36050Di2015UniqueSeparatorSoundPlayer
36050Di2015UniqueSeparatorSystem.Diagnostics.Process.Start("fullPath.mp3");
36367Di2015UniqueSeparatorFoo((object)new object[]{ (object)"1", (object)"2" }));Di2015NewLine
36678Di2015UniqueSeparatorvar totals =Di2015NewLinefrom s in sitesDi2015NewLinegroup s by s.SiteID into groupedDi2015NewLineselect newDi2015NewLine{Di2015NewLine    SiteID = grouped.Key,Di2015NewLine    Last30Sum = grouped.Sum( s => s.Last30 )Di2015NewLine};Di2015NewLine
37315Di2015UniqueSeparatorx => x.MyEvent
37315Di2015UniqueSeparator( x, h ) => x.MyEvent += h
37315Di2015UniqueSeparatorEventInfo
37315Di2015UniqueSeparatorEventInfo
37315Di2015UniqueSeparatorAddEventHandler
37315Di2015UniqueSeparatorRemoveEventHandler
37315Di2015UniqueSeparatorDelegate
37315Di2015UniqueSeparatorCombine
37315Di2015UniqueSeparatorRemove
37315Di2015UniqueSeparatorpublic sealed class EventWatcher : IDisposable {Di2015NewLine  private readonly object target_;Di2015NewLine  private readonly string eventName_;Di2015NewLine  private readonly FieldInfo eventField_;Di2015NewLine  private readonly Delegate listener_;Di2015NewLine  private bool eventWasRaised_;Di2015NewLineDi2015NewLine  public static EventWatcher Create<T>( T target, Expression<Func<T,Delegate>> accessor ) {Di2015NewLine    return new EventWatcher( target, accessor );Di2015NewLine  }Di2015NewLineDi2015NewLine  private EventWatcher( object target, LambdaExpression accessor ) {Di2015NewLine    this.target_ = target;Di2015NewLineDi2015NewLine    // Retrieve event definition from expression.Di2015NewLine    var eventAccessor = accessor.Body as MemberExpression;Di2015NewLine    this.eventField_ = eventAccessor.Member as FieldInfo;Di2015NewLine    this.eventName_ = this.eventField_.Name;Di2015NewLineDi2015NewLine    // Create our event listener and add it to the declaring object's event field.Di2015NewLine    this.listener_ = CreateEventListenerDelegate( this.eventField_.FieldType );Di2015NewLine    var currentEventList = this.eventField_.GetValue( this.target_ ) as Delegate;Di2015NewLine    var newEventList = Delegate.Combine( currentEventList, this.listener_ );Di2015NewLine    this.eventField_.SetValue( this.target_, newEventList );Di2015NewLine  }Di2015NewLineDi2015NewLine  public void SetEventWasRaised( ) {Di2015NewLine    this.eventWasRaised_ = true;Di2015NewLine  }Di2015NewLineDi2015NewLine  private Delegate CreateEventListenerDelegate( Type eventType ) {Di2015NewLine    // Create the event listener's body, setting the 'eventWasRaised_' field.Di2015NewLine    var setMethod = typeof( EventWatcher ).GetMethod( "SetEventWasRaised" );Di2015NewLine    var body = Expression.Call( Expression.Constant( this ), setMethod );Di2015NewLineDi2015NewLine    // Get the event delegate's parameters from its 'Invoke' method.Di2015NewLine    var invokeMethod = eventType.GetMethod( "Invoke" );Di2015NewLine    var parameters = invokeMethod.GetParameters( )Di2015NewLine        .Select( ( p ) => Expression.Parameter( p.ParameterType, p.Name ) );Di2015NewLineDi2015NewLine    // Create the listener.Di2015NewLine    var listener = Expression.Lambda( eventType, body, parameters );Di2015NewLine    return listener.Compile( );Di2015NewLine  }Di2015NewLineDi2015NewLine  void IDisposable.Dispose( ) {Di2015NewLine    // Remove the event listener.Di2015NewLine    var currentEventList = this.eventField_.GetValue( this.target_ ) as Delegate;Di2015NewLine    var newEventList = Delegate.Remove( currentEventList, this.listener_ );Di2015NewLine    this.eventField_.SetValue( this.target_, newEventList );Di2015NewLineDi2015NewLine    // Ensure event was raised.Di2015NewLine    if( !this.eventWasRaised_ )Di2015NewLine      throw new InvalidOperationException( "Event was not raised: " + this.eventName_ );Di2015NewLine  }Di2015NewLine}Di2015NewLine
37315Di2015UniqueSeparatortry {Di2015NewLine  using( EventWatcher.Create( o, x => x.MyEvent ) ) {Di2015NewLine    //o.RaiseEvent( );  // Uncomment for test to succeed.Di2015NewLine  }Di2015NewLine  Console.WriteLine( "Event raised successfully" );Di2015NewLine}Di2015NewLinecatch( InvalidOperationException ex ) {Di2015NewLine  Console.WriteLine( ex.Message );Di2015NewLine}Di2015NewLine
37332Di2015UniqueSeparatorfrom t1 in db.Table1Di2015NewLinejoin t2 in db.Table2 on t1.field equals t2.fieldDi2015NewLineselect new { t1.field2, t2.field3}Di2015NewLine
37332Di2015UniqueSeparatorvar dealercontacts = from contact in DealerContactDi2015NewLine                     join dealer in Dealer on contact.DealerId equals dealer.IDDi2015NewLine                     select contact;Di2015NewLine
37336Di2015UniqueSeparatorpublic Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        foreach (Control ctrl in Controls)Di2015NewLine        {Di2015NewLine            if (ctrl is TextBox)Di2015NewLine            {Di2015NewLine                ctrl.Enter += delegate(object sender, EventArgs e)Di2015NewLine                              {Di2015NewLine                                  _lastEnteredControl = (Control)sender;Di2015NewLine                              };Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
37361Di2015UniqueSeparatormockService.Setup(s => s.GetCustomers()).Returns(new List<Customer>());Di2015NewLine
37631Di2015UniqueSeparator<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">Di2015NewLine    <xsl:output method="text"/>Di2015NewLine    <xsl:template match="//error/serverVariables">Di2015NewLine      <xsl:text>Server variables:Di2015NewLine      </xsl:text>Di2015NewLine      <xsl:for-each select="item">Di2015NewLine        <xsl:value-of select="@name"/>:<xsl:value-of select="value/@string"/>Di2015NewLine        <xsl:text>Di2015NewLine        </xsl:text>Di2015NewLine      </xsl:for-each>Di2015NewLine    </xsl:template>Di2015NewLine    <xsl:template match="//error/queryString">Di2015NewLine      <xsl:text>Query string items:Di2015NewLine      </xsl:text>Di2015NewLine      <xsl:for-each select="item">Di2015NewLine        <xsl:value-of select="@name"/>:<xsl:value-of select="value/@string"/>Di2015NewLine        <xsl:text>Di2015NewLine        </xsl:text>Di2015NewLine      </xsl:for-each>Di2015NewLine    </xsl:template>Di2015NewLine</xsl:stylesheet>Di2015NewLine
37880Di2015UniqueSeparatorif (String.IsNullOrEmpty(title)) return "";Di2015NewLine
37880Di2015UniqueSeparator// remove any leading or trailing spaces left overDi2015NewLineâ¦ muuuch later:Di2015NewLine// remove trailing dash, if there is oneDi2015NewLine
37880Di2015UniqueSeparator// replace spaces with single dashDi2015NewLinetitle = Regex.Replace(title, @"\\s+", "-");Di2015NewLine// if we end up with multiple dashes, collapse to single dash            Di2015NewLinetitle = Regex.Replace(title, @"\\-{2,}", "-");Di2015NewLine
37880Di2015UniqueSeparator// make it all lower caseDi2015NewLinetitle = title.ToLower();Di2015NewLine// remove entitiesDi2015NewLinetitle = Regex.Replace(title, @"&\\w+;", "");Di2015NewLine// remove anything that is not letters, numbers, dash, or spaceDi2015NewLinetitle = Regex.Replace(title, @"[^a-z0-9\\-\\s]", "");Di2015NewLine// replace spacesDi2015NewLinetitle = title.Replace(' ', '-');Di2015NewLine// collapse dashesDi2015NewLinetitle = Regex.Replace(title, @"-{2,}", "-");Di2015NewLine// trim excessive dashes at the beginningDi2015NewLinetitle = title.TrimStart(new [] {'-'});Di2015NewLine// if it's too long, clip itDi2015NewLineif (title.Length > 80)Di2015NewLine    title = title.Substring(0, 79);Di2015NewLine// remove trailing dashesDi2015NewLinetitle = title.TrimEnd(new [] {'-'});Di2015NewLinereturn title;Di2015NewLine
38064Di2015UniqueSeparatorpublic static class DateTimeExtensionsDi2015NewLine{Di2015NewLine    public static DateTime StartOfWeek(this DateTime dt, DayOfWeek startOfWeek)Di2015NewLine    {Di2015NewLine        int diff = dt.DayOfWeek - startOfWeek;Di2015NewLine        if (diff < 0)Di2015NewLine        {Di2015NewLine            diff += 7;Di2015NewLine        }Di2015NewLineDi2015NewLine        return dt.AddDays(-1 * diff).Date;Di2015NewLine    }Di2015NewLine}Di2015NewLine
38064Di2015UniqueSeparatorDateTime dt = DateTime.Now.StartOfWeek(DayOfWeek.Monday);Di2015NewLineDateTime dt = DateTime.Now.StartOfWeek(DayOfWeek.Sunday);Di2015NewLine
38410Di2015UniqueSeparatorprivate readonly Collection<T> myCollection_ = new ...;Di2015NewLinepublic Collection<T> MyCollection {Di2015NewLine  get { return this.myCollection_; }Di2015NewLine}Di2015NewLine
38410Di2015UniqueSeparatorItems
38410Di2015UniqueSeparatorItemsControl
38410Di2015UniqueSeparatorItemsSource
38410Di2015UniqueSeparatorItemsControl
38410Di2015UniqueSeparatorprivate readonly List<T> myPrivateCollection_ = new ...;Di2015NewLineprivate ReadOnlyCollection<T> myPrivateCollectionView_;Di2015NewLinepublic ReadOnlyCollection<T> MyCollection {Di2015NewLine  get {Di2015NewLine    if( this.myPrivateCollectionView_ == null ) { /* lazily initialize view */ }Di2015NewLine    return this.myPrivateCollectionView_;Di2015NewLine  }Di2015NewLine}Di2015NewLine
38410Di2015UniqueSeparatorReadOnlyCollection<T>
38410Di2015UniqueSeparatorIList<T>
38410Di2015UniqueSeparatorpublic IEnumerable<T> MyCollection {Di2015NewLine  get {Di2015NewLine    foreach( T item in this.myPrivateCollection_ )Di2015NewLine      yield return item;Di2015NewLine  }Di2015NewLine}Di2015NewLine
38410Di2015UniqueSeparatorprivate T[] myArray_;Di2015NewLinepublic T[] GetMyArray( ) {Di2015NewLine  T[] copy = new T[this.myArray_.Length];Di2015NewLine  this.myArray_.CopyTo( copy, 0 );Di2015NewLine  return copy;Di2015NewLine  // Note: if you are using LINQ, calling the 'ToArray( )' Di2015NewLine  //  extension method will create a copy for you.Di2015NewLine}Di2015NewLine
38410Di2015UniqueSeparatorSetMyArray( T[] array )
38410Di2015UniqueSeparatorpublic T this[int index] {Di2015NewLine  get { return this.myArray_[index]; }Di2015NewLine  set {Di2015NewLine    // TODO: validate new value; raise change event; etc.Di2015NewLine    this.myArray_[index] = value;Di2015NewLine  }Di2015NewLine}Di2015NewLine
38494Di2015UniqueSeparatorpublic interface INode {Di2015NewLine  INode Root { get; }Di2015NewLine  List<INode> GetChildren( );Di2015NewLine}Di2015NewLine
38494Di2015UniqueSeparatorpublic interface IChildNode : INode {Di2015NewLine  INode Parent { get; }Di2015NewLine}Di2015NewLine
38494Di2015UniqueSeparatorpublic static class NodeExtensions {Di2015NewLine  public INode GetParent( this INode node ) {Di2015NewLine    // If the node implements the new interface, call it directly.Di2015NewLine    var childNode = node as IChildNode;Di2015NewLine    if( !object.ReferenceEquals( childNode, null ) )Di2015NewLine      return childNode.Parent;Di2015NewLineDi2015NewLine    // Otherwise, fall back on a default implementation.Di2015NewLine    return FindParent( node, node.Root );Di2015NewLine  }Di2015NewLine}Di2015NewLine
38494Di2015UniqueSeparatorpublic interface ILongMethod {Di2015NewLine  public bool LongMethod( string s, double d, int i, object o, ... );Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLinepublic static LongMethodExtensions {Di2015NewLine  public bool LongMethod( this ILongMethod lm, string s, double d ) {Di2015NewLine    lm.LongMethod( s, d, 0, null );Di2015NewLine  }Di2015NewLine  ...Di2015NewLine}Di2015NewLine
38704Di2015UniqueSeparator%Temp%\\VWDWebCacheDi2015NewLine
38704Di2015UniqueSeparator%LocalAppData%\\Microsoft\\WebsiteCacheDi2015NewLine
38765Di2015UniqueSeparator   List<string> theList = (List<String> )callingForm.Invoke(callingForm.delegateGetKillStrings);Di2015NewLine    lock(theList.SyncRoot) {Di2015NewLine        foreach(string s in theList) {Di2015NewLine               // Do some JazzDi2015NewLine        }Di2015NewLine    }Di2015NewLine
38962Di2015UniqueSeparatorFile.Exists(path)Di2015NewLine
39015Di2015UniqueSeparator<asp:button id="ImAButton" runat="server">Click Me</asp:button>Di2015NewLineDi2015NewLine<script type="text/javascript">Di2015NewLinevar buttonId = "<%=ImAButton.ClientId%>";Di2015NewLine$("#"+buttonId).bind('click', function() { alert('hi); });Di2015NewLine</script>Di2015NewLine
39034Di2015UniqueSeparatorpublic interface IFoo {Di2015NewLineDi2015NewLine    public void CommonCode();Di2015NewLineDi2015NewLine    public void SpecificCode();Di2015NewLineDi2015NewLine}Di2015NewLine
39034Di2015UniqueSeparatorpublic abstract class AbstractFoo : IFoo {Di2015NewLineDi2015NewLine    public void CommonCode() {Di2015NewLine          SpecificCode();Di2015NewLine    }Di2015NewLineDi2015NewLine    public abstract void SpecificCode();Di2015NewLineDi2015NewLine}Di2015NewLine
39034Di2015UniqueSeparator[TextFixture]Di2015NewLinepublic void TestClass {Di2015NewLineDi2015NewLine    private class TestFoo : AbstractFoo {Di2015NewLine        boolean hasCalledSpecificCode = false;Di2015NewLine        public void SpecificCode() {Di2015NewLine            hasCalledSpecificCode = true;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    [Test]Di2015NewLine    public void testCommonCallsSpecificCode() {Di2015NewLine        TestFoo fooFighter = new TestFoo();Di2015NewLine        fooFighter.CommonCode();Di2015NewLine        Assert.That(fooFighter.hasCalledSpecificCode, Is.True());Di2015NewLine    }Di2015NewLine}Di2015NewLine
39034Di2015UniqueSeparator[TestFixture]Di2015NewLinepublic void TestClass : AbstractFoo {Di2015NewLineDi2015NewLine    boolean hasCalledSpecificCode;Di2015NewLine    public void specificCode() {Di2015NewLine        hasCalledSpecificCode = true;Di2015NewLine    }Di2015NewLineDi2015NewLine    [Test]Di2015NewLine    public void testCommonCallsSpecificCode() {Di2015NewLine        AbstractFoo fooFighter = this;Di2015NewLine        hasCalledSpecificCode = false;Di2015NewLine        fooFighter.CommonCode();Di2015NewLine        Assert.That(fooFighter.hasCalledSpecificCode, Is.True());Di2015NewLine    }        Di2015NewLineDi2015NewLine}Di2015NewLine
39034Di2015UniqueSeparatorCommonCode
39034Di2015UniqueSeparatorSpecificCode
39034Di2015UniqueSeparatorPage_Load
39034Di2015UniqueSeparatorLoad
39091Di2015UniqueSeparatorSystem.DirectoryServices.DirectoryEntry entry = new System.DirectoryServices.DirectoryEntry();               Di2015NewLineDi2015NewLine// Push the property values from AD back to cache.Di2015NewLineDi2015NewLineentry.RefreshCache(new string[] {"cn", "www" });Di2015NewLine
39404Di2015UniqueSeparatorPI = 2 * (1 + 1/3 * (1 + 2/5 * (1 + 3/7 * (...))))Di2015NewLine
39404Di2015UniqueSeparatorPI = 2 * F(1);Di2015NewLine
39404Di2015UniqueSeparatordouble F (int i) {Di2015NewLine    1 + i / (2.0 * i + 1) * F(i + 1);Di2015NewLine}Di2015NewLine
39467Di2015UniqueSeparatorIEnumerable<T> FilterCollection<T>( ReadOnlyCollection<T> input ) {Di2015NewLine    foreach ( T item in input )Di2015NewLine        if (  /* criterion is met */ )Di2015NewLine            yield return item;Di2015NewLine}Di2015NewLine
39496Di2015UniqueSeparatorpublic void Consumer()Di2015NewLine{Di2015NewLine    foreach(int i in Integers())Di2015NewLine    {Di2015NewLine        Console.WriteLine(i.ToString());Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic IEnumerable<int> Integers()Di2015NewLine{Di2015NewLine    yield return 1;Di2015NewLine    yield return 2;Di2015NewLine    yield return 4;Di2015NewLine    yield return 8;Di2015NewLine    yield return 16;Di2015NewLine    yield return 16777216;Di2015NewLine}Di2015NewLine
40029Di2015UniqueSeparatorC:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A\\Bin\\x64\\sqlmetal.exe Di2015NewLine  /server:<SERVER> Di2015NewLine  /database:<database> Di2015NewLine  /code:"path\\Solution\\DataContextProject\\dbContext.cs" Di2015NewLine  /language:csharp Di2015NewLine  /namespace:<your namespace>Di2015NewLine
40065Di2015UniqueSeparatorprivate static object ThisLock = new object();Di2015NewLineDi2015NewLinepublic string GetFoo()Di2015NewLine{Di2015NewLineDi2015NewLine  // try to pull from cache hereDi2015NewLineDi2015NewLine  lock (ThisLock)Di2015NewLine  {Di2015NewLine    // cache was empty before we got the lock, check again inside the lockDi2015NewLineDi2015NewLine    // cache is still empty, so retreive the value hereDi2015NewLineDi2015NewLine    // store the value in the cache hereDi2015NewLine  }Di2015NewLineDi2015NewLine  // return the cached value hereDi2015NewLineDi2015NewLine}Di2015NewLine
40093Di2015UniqueSeparator$
40148Di2015UniqueSeparator//takes a function that matches the Func<T,R> delegateDi2015NewLinelistInstance.Aggregate( Di2015NewLine    startingValue, Di2015NewLine    (x, y) => /* aggregate two subsequent values */ );Di2015NewLineDi2015NewLine//takes a function that matches the Action<T> delegateDi2015NewLinelistInstance.ForEach( Di2015NewLine    x => /* do something with x */);Di2015NewLine
40148Di2015UniqueSeparatorConvertAll<T>
40148Di2015UniqueSeparatorSelect<T>
40180Di2015UniqueSeparatorforeach( string s in "1,3,5-10,12".Split(',') ) Di2015NewLine{Di2015NewLine    // try and get the numberDi2015NewLine    int num;Di2015NewLine    if( int.TryParse( s, out num ) )Di2015NewLine    {Di2015NewLine        yield return num;Di2015NewLine        continue; // skip the restDi2015NewLine    }Di2015NewLineDi2015NewLine    // otherwise we might have a rangeDi2015NewLine    // split on the range delimiterDi2015NewLine    string[] subs = s.Split('-');Di2015NewLine    int start, end;Di2015NewLineDi2015NewLine    // now see if we can parse a start and endDi2015NewLine    if( subs.Length > 1 &&Di2015NewLine        int.TryParse(subs[0], out start) &&Di2015NewLine        int.TryParse(subs[1], out end) &&Di2015NewLine        end >= start )Di2015NewLine    {Di2015NewLine        // create a range between the two valuesDi2015NewLine        int rangeLength = end - start + 1;Di2015NewLine        foreach(int i in Enumerable.Range(start, rangeLength))Di2015NewLine        {Di2015NewLine            yield return i;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
40208Di2015UniqueSeparatorLinqEntity item = new LinqEntity(){ Id = 1, Name = "OldName", Surname = "OldSurname"}; Di2015NewLinecontext.LinqEntities.Attach(item);Di2015NewLineitem.Name = "John";Di2015NewLineitem.Surname = "Doe";Di2015NewLinecontext.SubmitChanges();Di2015NewLine
40217Di2015UniqueSeparatorif ((testItem & FlagTest.Flag1) == FlagTest.Flag1)Di2015NewLine{Di2015NewLine     // Do somethingDi2015NewLine}Di2015NewLine
40830Di2015UniqueSeparatorpublic static void Main()    Di2015NewLine{        Di2015NewLine  string scriptDirectory = "c:\\\\temp\\\\sqltest\\\\";Di2015NewLine  string sqlConnectionString = "Integrated Security=SSPI;" +Di2015NewLine  "Persist Security Info=True;Initial Catalog=Northwind;Data Source=(local)";Di2015NewLine  DirectoryInfo di = new DirectoryInfo(scriptDirectory);Di2015NewLine  FileInfo[] rgFiles = di.GetFiles("*.sql");Di2015NewLine  foreach (FileInfo fi in rgFiles)Di2015NewLine  {Di2015NewLine        FileInfo fileInfo = new FileInfo(fi.FullName);Di2015NewLine        string script = fileInfo.OpenText().ReadToEnd();Di2015NewLine        SqlConnection connection = new SqlConnection(sqlConnectionString);Di2015NewLine        Server server = new Server(new ServerConnection(connection));Di2015NewLine        server.ConnectionContext.ExecuteNonQuery(script);Di2015NewLine   }Di2015NewLine}Di2015NewLine
41012Di2015UniqueSeparator    BufferedStream stream = new BufferedStream(new MemoryStream());Di2015NewLine    stream.Write(Encoding.ASCII.GetBytes("<xml>foo</xml>"), 0, "<xml>foo</xml>".Length);Di2015NewLine    stream.Seek(0, SeekOrigin.Begin);Di2015NewLine    StreamReader sr = new StreamReader(stream);Di2015NewLine    XmlReader reader = XmlReader.Create(sr);Di2015NewLine    while (reader.Read())Di2015NewLine    {Di2015NewLine         Console.WriteLine(reader.Value);Di2015NewLine    }Di2015NewLine    stream.Close();Di2015NewLine
41149Di2015UniqueSeparatorRequest.Url.ToString()
41175Di2015UniqueSeparatorvar x = from list in optionListsDi2015NewLine        from option in listDi2015NewLine        where optionLists.All(l => l.Any(o => o.Value == option.Value))Di2015NewLine        orderby option.ValueDi2015NewLine        select option;Di2015NewLine
41324Di2015UniqueSeparatorpublic static Boolean IsEmpty<T>(this IEnumerable<T> source)Di2015NewLine{Di2015NewLine    if (source == null)Di2015NewLine        return true; // or throw an exceptionDi2015NewLine    return !source.Any();Di2015NewLine}Di2015NewLine
41408Di2015UniqueSeparatorstatic void TestException<E>(string message) where E : Exception, new()Di2015NewLine{Di2015NewLine    var e = new E();Di2015NewLine    e.Message = message;Di2015NewLine    throw e;Di2015NewLine}Di2015NewLine
41408Di2015UniqueSeparatorstatic void TestException<E>(string message) where E : ExceptionDi2015NewLine{Di2015NewLine    throw Activator.CreateInstance(typeof(E), message) as E;Di2015NewLine}Di2015NewLine
41428Di2015UniqueSeparator(?<date>\\d{2}/\\d{2}/\\d{2})\\s(?<time>\\d{2}:\\d{2}:\\d{2},\\d{3})\\s(?<message>(.(?!^\\d{2}/\\d{2}/Di2015NewLine\\d{2}))+)Di2015NewLine
41505Di2015UniqueSeparatorvar
41505Di2015UniqueSeparatorvar orders = cust.Orders;Di2015NewLine
41505Di2015UniqueSeparatorIEnumerable<Order>
41505Di2015UniqueSeparatorObservableCollection<Order>
41505Di2015UniqueSeparatorBindingList<Order>
41505Di2015UniqueSeparatorObservableCollection<Order> orders = cust.Orders;Di2015NewLine
41505Di2015UniqueSeparatorObservableCollection<Order>
41505Di2015UniqueSeparatorIList<Order>
41589Di2015UniqueSeparatorThreadPool
41589Di2015UniqueSeparatorManualResetEvent
41589Di2015UniqueSeparatorAutoResetEvent
41589Di2015UniqueSeparatorThreadStart
41589Di2015UniqueSeparatorpublic static void MultiThreadedTest()Di2015NewLine{Di2015NewLine    Thread[] threads = new Thread[count];Di2015NewLineDi2015NewLine    foreach(Thread thread in threads)Di2015NewLine    {Di2015NewLine        thread = new Thread(DoSomeWork());Di2015NewLine    }Di2015NewLineDi2015NewLine    foreach(Thread thread in threads)Di2015NewLine    {Di2015NewLine        thread.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    foreach(Thread thread in threads)Di2015NewLine    {Di2015NewLine        thread.Join();Di2015NewLine    }Di2015NewLine}Di2015NewLine
41684Di2015UniqueSeparatorvar qualityEncoder = Encoder.Quality;Di2015NewLinevar quality = (long)<desired quality>;Di2015NewLinevar ratio = new EncoderParameter(qualityEncoder, quality );Di2015NewLinevar codecParams = new EncoderParameters(1);Di2015NewLinecodecParams.Param[0] = ratio;Di2015NewLinevar jpegCodecInfo = <one of the codec infos from ImageCodecInfo.GetImageEncoders() with mime type = "image/jpeg">;Di2015NewLinebmp.Save(fileName, jpegCodecInfo, codecParams); // Save to JPGDi2015NewLine
42332Di2015UniqueSeparatorreturn new DataTable();Di2015NewLine
42332Di2015UniqueSeparatorreturn new DataTable("someName");Di2015NewLine
42551Di2015UniqueSeparatorToggle
42551Di2015UniqueSeparator    // thread 1 is running this codeDi2015NewLine    if(value == 0) Di2015NewLine    {Di2015NewLine        value = 1; Di2015NewLine        // RIGHT NOW, thread 2 steps in.Di2015NewLine        // It sees value as 1, so runs the other branch, and changes it to 0Di2015NewLine        // This causes your method to return 0 even though you actually want 1Di2015NewLine    }Di2015NewLine    else if(value == 1) Di2015NewLine    { Di2015NewLine        value = 0; Di2015NewLine    }Di2015NewLine    return value;Di2015NewLine
42551Di2015UniqueSeparatorsomething
42551Di2015UniqueSeparatorsomething
42551Di2015UniqueSeparator    // we read value hereDi2015NewLine    if(value == 0) Di2015NewLine    {Di2015NewLine        value = 1; Di2015NewLine    }Di2015NewLine    else if(value == 1) Di2015NewLine    { Di2015NewLine        value = 0; Di2015NewLine    }Di2015NewLine    // and we return it hereDi2015NewLine    return value;Di2015NewLine
42551Di2015UniqueSeparatorvalue
42551Di2015UniqueSeparatorreturn
42551Di2015UniqueSeparatorvalue
42551Di2015UniqueSeparatorlock( value )Di2015NewLine{Di2015NewLine     if(value == 0) Di2015NewLine     ... // all your code hereDi2015NewLine     return value;Di2015NewLine}Di2015NewLine
42656Di2015UniqueSeparatorusing System.Linq;  Di2015NewLineDi2015NewLineclass DoubleDispatchDi2015NewLine{ Di2015NewLine    public T Foo<T>(object arg)Di2015NewLine    { Di2015NewLine        var method = from m in GetType().GetMethods()Di2015NewLine                   where    m.Name == "Foo" Di2015NewLine                         && m.GetParameters().Length==1Di2015NewLine                         && arg.GetType().IsAssignableFromDi2015NewLine                                           (m.GetParameters()[0].GetType())Di2015NewLine                         && m.ReturnType == typeof(T)Di2015NewLine                   select m;Di2015NewLineDi2015NewLine        return (T) method.Single().Invoke(this,new object[]{arg});          Di2015NewLine    }Di2015NewLineDi2015NewLine    public int Foo(int arg) { /* ... */ }Di2015NewLineDi2015NewLine    static void Test() Di2015NewLine    { Di2015NewLine        object x = 5;Di2015NewLine        Foo<int>(x); //should call Foo(int) via Foo<T>(object).Di2015NewLine    }Di2015NewLine}       Di2015NewLine
42760Di2015UniqueSeparator        Dim xContext As XComponentContextDi2015NewLineDi2015NewLineDi2015NewLine<pre><code>    xContext = Bootstrap.bootstrap()Di2015NewLineDi2015NewLineDi2015NewLine    Dim xFactory As XMultiServiceFactoryDi2015NewLine    xFactory = DirectCast(xContext.getServiceManager(), _Di2015NewLine        XMultiServiceFactory)Di2015NewLineDi2015NewLineDi2015NewLine    'Create the DesktopDi2015NewLine    Dim xDesktop As unoidl.com.sun.star.frame.XDesktopDi2015NewLine    xDesktop = DirectCast(xFactory.createInstance("com.sun.star.frame.Desktop"), _Di2015NewLine        unoidl.com.sun.star.frame.XDesktop)Di2015NewLineDi2015NewLineDi2015NewLine    'Open a new empty writer documentDi2015NewLine    Dim xComponentLoader As unoidl.com.sun.star.frame.XComponentLoaderDi2015NewLine    xComponentLoader = DirectCast(xDesktop, unoidl.com.sun.star.frame.XComponentLoader)Di2015NewLine    Dim arProps() As unoidl.com.sun.star.beans.PropertyValue = _Di2015NewLine        New unoidl.com.sun.star.beans.PropertyValue() {}Di2015NewLine    Dim xComponent As unoidl.com.sun.star.lang.XComponentDi2015NewLine    xComponent = xComponentLoader.loadComponentFromURL( _Di2015NewLine        "private:factory/swriter", "_blank", 0, arProps)Di2015NewLine    Dim xTextDocument As unoidl.com.sun.star.text.XTextDocumentDi2015NewLine    xTextDocument = DirectCast(xComponent, unoidl.com.sun.star.text.XTextDocument)Di2015NewLine
42760Di2015UniqueSeparator        Dim storer As unoidl.com.sun.star.frame.XStorable = DirectCast(xTextDocument, unoidl.com.sun.star.frame.XStorable)Di2015NewLine        arProps = New unoidl.com.sun.star.beans.PropertyValue() {}Di2015NewLine        storer.storeToURL("file:///C:/Users/me/Desktop/OpenOffice Investigation/saved doc.odt", arProps)Di2015NewLine
42760Di2015UniqueSeparator        Dim xComponent As unoidl.com.sun.star.lang.XComponentDi2015NewLine        xComponent = xComponentLoader.loadComponentFromURL( _Di2015NewLine            "file:///C:/Users/me/Desktop/OpenOffice Investigation/saved doc.odt", "_blank", 0, arProps)Di2015NewLine
42760Di2015UniqueSeparator    Dim t_OOo As TypeDi2015NewLine    t_OOo = Type.GetTypeFromProgID("com.sun.star.ServiceManager")Di2015NewLine    Dim objServiceManager As ObjectDi2015NewLine    objServiceManager = System.Activator.CreateInstance(t_OOo)Di2015NewLineDi2015NewLineDi2015NewLine<pre><code>Dim oMailMerge As ObjectDi2015NewLineoMailMerge = t_OOo.InvokeMember("createInstance", _Di2015NewLine                BindingFlags.InvokeMethod, Nothing, _Di2015NewLine                objServiceManager, New [Object]() {"com.sun.star.text.MailMerge"})Di2015NewLineDi2015NewLineDi2015NewLine'Now set up a new MailMerge using the settings extracted from that docDi2015NewLineoMailMerge.DocumentURL = "file:///C:/Users/me/Desktop/OpenOffice Investigation/mail merged.odt"Di2015NewLineoMailMerge.DataSourceName = "adds"Di2015NewLineoMailMerge.CommandType = 0 ' http://api.openoffice.org/docs/common/ref/com/sun/star/text/MailMerge.html#CommandTypeDi2015NewLineoMailMerge.Command = "adds"Di2015NewLineoMailMerge.OutputType = 2 ' http://api.openoffice.org/docs/common/ref/com/sun/star/text/MailMerge.html#OutputTypeDi2015NewLineoMailMerge.execute(New [Object]() {})Di2015NewLine
42760Di2015UniqueSeparator    Dim t_OOo As TypeDi2015NewLine    t_OOo = Type.GetTypeFromProgID("com.sun.star.ServiceManager")Di2015NewLine    Dim objServiceManager As ObjectDi2015NewLine    objServiceManager = System.Activator.CreateInstance(t_OOo)Di2015NewLineDi2015NewLineDi2015NewLine<pre><code>Dim oMailMerge As ObjectDi2015NewLineoMailMerge = t_OOo.InvokeMember("createInstance", _Di2015NewLine                BindingFlags.InvokeMethod, Nothing, _Di2015NewLine                objServiceManager, New [Object]() {"com.sun.star.text.MailMerge"})Di2015NewLineDi2015NewLineDi2015NewLine'Now set up a new MailMerge using the settings extracted from that docDi2015NewLineoMailMerge.GetType().InvokeMember("DocumentURL", BindingFlags.SetProperty, Nothing, oMailMerge, New [Object]() {"file:///C:/Users/me/Desktop/OpenOffice Investigation/mail merged.odt"})Di2015NewLineoMailMerge.GetType().InvokeMember("DataSourceName", BindingFlags.SetProperty, Nothing, oMailMerge, New [Object]() {"adds"})Di2015NewLineoMailMerge.GetType().InvokeMember("CommandType", BindingFlags.SetProperty, Nothing, oMailMerge, New [Object]() {0})Di2015NewLineoMailMerge.GetType().InvokeMember("Command", BindingFlags.SetProperty, Nothing, oMailMerge, New [Object]() {"adds"})Di2015NewLineoMailMerge.GetType().InvokeMember("OutputType", BindingFlags.SetProperty, Nothing, oMailMerge, New [Object]() {2})Di2015NewLineoMailMerge.GetType().InvokeMember("Execute", BindingFlags.InvokeMethod Or BindingFlags.IgnoreReturn, Nothing, oMailMerge, New [Object]() {}) ' this line fails with a type mismatch errorDi2015NewLine
43017Di2015UniqueSeparatorfoo.*(?<!bar)Di2015NewLine
43029Di2015UniqueSeparatorforeach
43029Di2015UniqueSeparatorIEnumerable
43029Di2015UniqueSeparatorGetEnumerator
43029Di2015UniqueSeparatorEnumerator
43029Di2015UniqueSeparatorCurrent
43029Di2015UniqueSeparatorMoveNext
43029Di2015UniqueSeparatorCurrent
43074Di2015UniqueSeparatorint rule = 0;Di2015NewLinerule |= 0x80;Di2015NewLine
43110Di2015UniqueSeparatorx1
43110Di2015UniqueSeparatorx1
43110Di2015UniqueSeparatorx2
43110Di2015UniqueSeparatorx2
43110Di2015UniqueSeparatorx3
43141Di2015UniqueSeparatorT
43141Di2015UniqueSeparatorSystem.Type
43141Di2015UniqueSeparatorT
43141Di2015UniqueSeparatortypeof(T)
43141Di2015UniqueSeparatorT
43141Di2015UniqueSeparatortypeof
43141Di2015UniqueSeparatorType
43141Di2015UniqueSeparatorISessionFactory
43141Di2015UniqueSeparatorISession
43141Di2015UniqueSeparatorpublic static T[] LoadObjectListAll()Di2015NewLine{Di2015NewLine    var session = GetNewSession();Di2015NewLine    var criteria = session.CreateCriteria(typeof(T));Di2015NewLine    var results = criteria.List<T>();Di2015NewLine    return results.ToArray();        Di2015NewLine}Di2015NewLine
43505Di2015UniqueSeparatorEnumerable.SequenceEqual
43516Di2015UniqueSeparatorpublic sealed override void Render()Di2015NewLine{Di2015NewLine    // Prepare the object for rendering        Di2015NewLine    SpecialRender();Di2015NewLine    // Do some cleanup    Di2015NewLine}Di2015NewLine
43557Di2015UniqueSeparator#region
43557Di2015UniqueSeparator[System.Data.Linq.Mapping.DatabaseAttribute(Name="MyDB")]Di2015NewLinepublic partial class MyDataContext : System.Data.Linq.DataContextDi2015NewLine{Di2015NewLine    ...Di2015NewLineDi2015NewLine    partial void OnCreated();Di2015NewLine    partial void InsertMyTable(MyTable instance);Di2015NewLine    partial void UpdateMyTable(MyTable instance);Di2015NewLine    partial void DeleteMyTable(MyTable instance);Di2015NewLineDi2015NewLine    ...Di2015NewLine
43557Di2015UniqueSeparatorpublic partial class MyDataContextDi2015NewLine{Di2015NewLine    partial void OnCreated() {Di2015NewLine        //do something on data context creationDi2015NewLine    }Di2015NewLine}Di2015NewLine
43557Di2015UniqueSeparator//this code will get optimised out if no body is implementedDi2015NewLinepartial void DoSomethingIfCompFlag();Di2015NewLineDi2015NewLine#if COMPILER_FLAGDi2015NewLine//this code won't exist if the flag is offDi2015NewLinepartial void DoSomethingIfCompFlag() {Di2015NewLine    //your codeDi2015NewLine}Di2015NewLine#endifDi2015NewLine
43731Di2015UniqueSeparatorpublic static class SystemTimeDi2015NewLine{Di2015NewLine    public static Func<DateTime> Now = () => DateTime.Now;Di2015NewLine}Di2015NewLine
44461Di2015UniqueSeparatorNextDouble
44579Di2015UniqueSeparatordef accept(x)Di2015NewLine  send "accept#{x.class}".to_sym, xDi2015NewLineendDi2015NewLine
44761Di2015UniqueSeparatorAt some random time, throw an exception on thread B:Di2015NewLine
44761Di2015UniqueSeparatortry {Di2015NewLine    //do stuffDi2015NewLine} finally {Di2015NewLine    CloseResourceOne();Di2015NewLine    // ThreadA's exception gets thrown NOW, in the middle Di2015NewLine    // of our finally block and resource two NEVER gets closed.Di2015NewLine    // Obviously this is BAD, and the only way to stop is to NOT throwDi2015NewLine    // exceptions across threadsDi2015NewLine    CloseResourceTwo();Di2015NewLine}Di2015NewLine
44810Di2015UniqueSeparatorint num = 1;Di2015NewLineDi2015NewLineif(Session["ImageNumber"] != null)Di2015NewLine{Di2015NewLine  num = Convert.ToInt32(Session["ImageNumber"]) + 1;Di2015NewLine}Di2015NewLineDi2015NewLineSession["ImageNumber"] = num;Di2015NewLine
44923Di2015UniqueSeparator[WebMethod]Di2015NewLinepublic string[] GetSearchList(string prefixText, int count)Di2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLine[WebMethod]Di2015NewLinepublic string[] GetSearchList2<T>(string prefixText, int count)Di2015NewLine{Di2015NewLine}Di2015NewLine
44954Di2015UniqueSeparatorConvertAll
44954Di2015UniqueSeparatorList<int> l1 = new List<int>(new int[] { 1,2,3 } );Di2015NewLineList<string> l2 = l1.ConvertAll<string>(delegate(int i) { return i.ToString(); });Di2015NewLine
44991Di2015UniqueSeparator[]
44991Di2015UniqueSeparatorSystem.Collections.Generic.IEnumerable<T>
44991Di2015UniqueSeparatorGetEnumerator()
44991Di2015UniqueSeparatorElementAt(int)
45034Di2015UniqueSeparator<asp:HiddenField ID="ShowAll" Value="False" runat="server" />
45034Di2015UniqueSeparatorprotected void ToggleState(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    //parse string as boolean, invert, and convert back to stringDi2015NewLine    ShowAll.Value = (!Boolean.Parse(ShowAll.Value)).ToString();Di2015NewLine}Di2015NewLine
45037Di2015UniqueSeparatorpublic static int? ToNullableInt32(this string s)Di2015NewLine{Di2015NewLine    int i;Di2015NewLine    if (Int32.TryParse(s, out i)) return i;Di2015NewLine    return null;Di2015NewLine}Di2015NewLine
45067Di2015UniqueSeparatornamespace AutoCompleteDi2015NewLine{Di2015NewLine    public partial class Main : FormDi2015NewLine    {Di2015NewLine        //so you don't have to address "txtMain.AutoCompleteCustomSource" every timeDi2015NewLine        AutoCompleteStringCollection acsc;Di2015NewLine        public Main()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLineDi2015NewLine            //Set to use a Custom sourceDi2015NewLine            txtMain.AutoCompleteSource = AutoCompleteSource.CustomSource;Di2015NewLine            //Set to show drop down *and* append current suggestion to endDi2015NewLine            txtMain.AutoCompleteMode = AutoCompleteMode.SuggestAppend;Di2015NewLine            //Init string collection.Di2015NewLine            acsc = new AutoCompleteStringCollection();Di2015NewLine            //Set txtMain's AutoComplete Source to acscDi2015NewLine            txtMain.AutoCompleteCustomSource = acsc;Di2015NewLine        }Di2015NewLineDi2015NewLine        private void txtMain_KeyDown(object sender, KeyEventArgs e)Di2015NewLine        {Di2015NewLine            if (e.KeyCode == Keys.Enter)Di2015NewLine            {Di2015NewLine                //Only keep 10 AutoComplete stringsDi2015NewLine                if (acsc.Count < 10)Di2015NewLine                {Di2015NewLine                    //Add to collectionDi2015NewLine                    acsc.Add(txtMain.Text);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    //remove oldestDi2015NewLine                    acsc.RemoveAt(0); Di2015NewLine                    //Add to collectionDi2015NewLine                    acsc.Add(txtMain.Text);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private void Main_FormClosed(object sender, FormClosedEventArgs e)Di2015NewLine        {Di2015NewLine            //open stream to AutoComplete save fileDi2015NewLine            StreamWriter sw = new StreamWriter("AutoComplete.acs");Di2015NewLineDi2015NewLine            //Write AutoCompleteStringCollection to streamDi2015NewLine            foreach (string s in acsc)Di2015NewLine                sw.WriteLine(s);Di2015NewLineDi2015NewLine            //Flush to fileDi2015NewLine            sw.Flush();Di2015NewLineDi2015NewLine            //Clean upDi2015NewLine            sw.Close();Di2015NewLine            sw.Dispose();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void Main_Load(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            //open stream to AutoComplete save fileDi2015NewLine            StreamReader sr = new StreamReader("AutoComplete.acs");Di2015NewLineDi2015NewLine            //initial readDi2015NewLine            string line = sr.ReadLine();Di2015NewLine            //loop until endDi2015NewLine            while (line != null)Di2015NewLine            {Di2015NewLine                //add to AutoCompleteStringCollectionDi2015NewLine                acsc.Add(line);Di2015NewLine                //read againDi2015NewLine                line = sr.ReadLine();Di2015NewLine            }Di2015NewLineDi2015NewLine            //Clean upDi2015NewLine            sr.Close();Di2015NewLine            sr.Dispose();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
45493Di2015UniqueSeparatorvoid ParseURL(string strUrl)Di2015NewLine{Di2015NewLine  tryDi2015NewLine  {Di2015NewLine    using (var reader = XmlReader.Create(strUrl))Di2015NewLine    {Di2015NewLine      while (reader.Read())Di2015NewLine      {Di2015NewLine        switch (reader.NodeType)Di2015NewLine        {Di2015NewLine          case XmlNodeType.Element:Di2015NewLine            var attributes = new Hashtable();Di2015NewLine            var strURI = reader.NamespaceURI;Di2015NewLine            var strName = reader.Name;Di2015NewLine            if (reader.HasAttributes)Di2015NewLine            {Di2015NewLine              for (int i = 0; i < reader.AttributeCount; i++)Di2015NewLine              {Di2015NewLine                reader.MoveToAttribute(i);Di2015NewLine                attributes.Add(reader.Name,reader.Value);Di2015NewLine              }Di2015NewLine            }Di2015NewLine            StartElement(strURI,strName,strName,attributes);Di2015NewLine            break;Di2015NewLine            //Di2015NewLine            //you can handle other cases hereDi2015NewLine            //Di2015NewLine            //case XmlNodeType.EndElement:Di2015NewLine            // TodoDi2015NewLine            //case XmlNodeType.Text:Di2015NewLine            // TodoDi2015NewLine            default:Di2015NewLine            break;Di2015NewLine          }Di2015NewLine        }Di2015NewLine      }Di2015NewLine      catch (XmlException e)Di2015NewLine      {Di2015NewLine        Console.WriteLine("error occured: " + e.Message);Di2015NewLine      }Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
45692Di2015UniqueSeparatorOption Strict OffDi2015NewLineOption Explicit OffDi2015NewLineImports SystemDi2015NewLineImports EnvDTEDi2015NewLineImports EnvDTE80Di2015NewLineImports EnvDTE90Di2015NewLineImports System.DiagnosticsDi2015NewLineDi2015NewLinePublic Module RefreshDependenciesDi2015NewLine    Sub TemporaryMacro()Di2015NewLine        DTE.ActiveWindow.Object.GetItem("Project\\Setup1\\Setup1").Select(vsUISelectionType.vsUISelectionTypeSelect)Di2015NewLine        DTE.ExecuteCommand("Build.RefreshDependencies")Di2015NewLine    End SubDi2015NewLineEnd ModuleDi2015NewLine
45728Di2015UniqueSeparatorclass Foo<T> {Di2015NewLine    public Foo(T x) { â¦ }Di2015NewLine}Di2015NewLineDi2015NewLine// Notice: non-generic class overload. Possible in C#!Di2015NewLineclass Foo {Di2015NewLine    public static Foo<T> ctor<T>(T x) { return new Foo<T>(x); }Di2015NewLine}Di2015NewLineDi2015NewLinevar x = Foo.ctor(42);Di2015NewLine
45901Di2015UniqueSeparator using System;Di2015NewLine using System.Linq;Di2015NewLine using System.Linq.Expressions;Di2015NewLine using System.Reflection;Di2015NewLineDi2015NewLine class ExampleEventArgs : EventArgsDi2015NewLine {Di2015NewLine    public int IntArg {get; set;}Di2015NewLine }Di2015NewLineDi2015NewLine class EventRaiserDi2015NewLine { Di2015NewLine     public event EventHandler SomethingHappened;Di2015NewLine     public event EventHandler<ExampleEventArgs> SomethingHappenedWithArg;Di2015NewLineDi2015NewLine     public void RaiseEvents()Di2015NewLine     {Di2015NewLine         if (SomethingHappened!=null) SomethingHappened(this, EventArgs.Empty);Di2015NewLineDi2015NewLine         if (SomethingHappenedWithArg!=null) Di2015NewLine         {Di2015NewLine            SomethingHappenedWithArg(this, new ExampleEventArgs{IntArg = 5});Di2015NewLine         }Di2015NewLine     }Di2015NewLine }Di2015NewLineDi2015NewLine class HandlerDi2015NewLine { Di2015NewLine     public void HandleEvent() { Console.WriteLine("Handler.HandleEvent() called.");}Di2015NewLine     public void HandleEventWithArg(int arg) { Console.WriteLine("Arg: {0}",arg);    }Di2015NewLine }Di2015NewLineDi2015NewLine static class EventProxyDi2015NewLine { Di2015NewLine     //void delegates with no parametersDi2015NewLine     static public Delegate Create(EventInfo evt, Action d)Di2015NewLine     { Di2015NewLine         var handlerType = evt.EventHandlerType;Di2015NewLine         var eventParams = handlerType.GetMethod("Invoke").GetParameters();Di2015NewLineDi2015NewLine         //lambda: (object x0, EventArgs x1) => d()Di2015NewLine         var parameters = eventParams.Select(p=>Expression.Parameter(p.ParameterType,"x"));Di2015NewLine         var body = Expression.Call(Expression.Constant(d),d.GetType().GetMethod("Invoke"));Di2015NewLine         var lambda = Expression.Lambda(body,parameters.ToArray());Di2015NewLine         return Delegate.CreateDelegate(handlerType, lambda.Compile(), "Invoke", false);Di2015NewLine     }Di2015NewLineDi2015NewLine     //void delegate with one parameterDi2015NewLine     static public Delegate Create<T>(EventInfo evt, Action<T> d)Di2015NewLine     {Di2015NewLine         var handlerType = evt.EventHandlerType;Di2015NewLine         var eventParams = handlerType.GetMethod("Invoke").GetParameters();Di2015NewLineDi2015NewLine         //lambda: (object x0, ExampleEventArgs x1) => d(x1.IntArg)Di2015NewLine         var parameters = eventParams.Select(p=>Expression.Parameter(p.ParameterType,"x")).ToArray();Di2015NewLine         var arg    = getArgExpression(parameters[1], typeof(T));Di2015NewLine         var body   = Expression.Call(Expression.Constant(d),d.GetType().GetMethod("Invoke"), arg);Di2015NewLine         var lambda = Expression.Lambda(body,parameters);Di2015NewLine         return Delegate.CreateDelegate(handlerType, lambda.Compile(), "Invoke", false);Di2015NewLine     }Di2015NewLineDi2015NewLine     //returns an expression that represents an argument to be passed to the delegateDi2015NewLine     static Expression getArgExpression(ParameterExpression eventArgs, Type handlerArgType)Di2015NewLine     {Di2015NewLine        if (eventArgs.Type==typeof(ExampleEventArgs) && handlerArgType==typeof(int))Di2015NewLine        {Di2015NewLine           //"x1.IntArg"Di2015NewLine           var memberInfo = eventArgs.Type.GetMember("IntArg")[0];Di2015NewLine           return Expression.MakeMemberAccess(eventArgs,memberInfo);Di2015NewLine        }Di2015NewLineDi2015NewLine        throw new NotSupportedException(eventArgs+"->"+handlerArgType);Di2015NewLine     }Di2015NewLine }Di2015NewLineDi2015NewLineDi2015NewLine static class TestDi2015NewLine {Di2015NewLine     public static void Main()Di2015NewLine     { Di2015NewLine        var raiser  = new EventRaiser();Di2015NewLine        var handler = new Handler();Di2015NewLineDi2015NewLine        //void delegate with no parametersDi2015NewLine        string eventName = "SomethingHappened";Di2015NewLine        var eventinfo = raiser.GetType().GetEvent(eventName);Di2015NewLine        eventinfo.AddEventHandler(raiser,EventProxy.Create(eventinfo,handler.HandleEvent));Di2015NewLineDi2015NewLine        //void delegate with one parameterDi2015NewLine        string eventName2 = "SomethingHappenedWithArg";Di2015NewLine        var eventInfo2 = raiser.GetType().GetEvent(eventName2);Di2015NewLine        eventInfo2.AddEventHandler(raiser,EventProxy.Create<int>(eventInfo2,handler.HandleEventWithArg));Di2015NewLineDi2015NewLine        //or even just:Di2015NewLine        eventinfo.AddEventHandler(raiser,EventProxy.Create(eventinfo,()=>Console.WriteLine("!")));  Di2015NewLine        eventInfo2.AddEventHandler(raiser,EventProxy.Create<int>(eventInfo2,i=>Console.WriteLine(i+"!")));Di2015NewLineDi2015NewLine        raiser.RaiseEvents();Di2015NewLine     }Di2015NewLine }Di2015NewLine
46092Di2015UniqueSeparatorusing System.Diagnostics;Di2015NewLineusing System.Runtime.InteropServices;Di2015NewLineDi2015NewLine// Sets the window to be foregroundDi2015NewLine[DllImport("User32")]Di2015NewLineprivate static extern int SetForegroundWindow(IntPtr hwnd);Di2015NewLineDi2015NewLine// Activate or minimize a windowDi2015NewLine[DllImportAttribute("User32.DLL")]Di2015NewLineprivate static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);Di2015NewLineprivate const int SW_SHOW = 5;Di2015NewLineprivate const int SW_MINIMIZE = 6;Di2015NewLineprivate const int SW_RESTORE = 9;Di2015NewLineDi2015NewLineprivate void ActivateApplication(string briefAppName)Di2015NewLine{Di2015NewLine    Process[] procList = Process.GetProcessesByName(briefAppName);Di2015NewLineDi2015NewLine    if (procList.Length > 0)Di2015NewLine    {Di2015NewLine        ShowWindow(procList[0].MainWindowHandle, SW_RESTORE);Di2015NewLine        SetForegroundWindow(procList[0].MainWindowHandle);Di2015NewLine    }Di2015NewLine}Di2015NewLine
46378Di2015UniqueSeparatorXmlSerializer xs = new XmlSerializer(typeof(MyConfig));Di2015NewLineStringWriter xout = new StringWriter();Di2015NewLinexs.Serialize(xout, myConfig);Di2015NewLineXmlDocument x = new XmlDocument();Di2015NewLinex.LoadXml("<myConfig>" + xout.ToString() + "</myConfig>");Di2015NewLine
46384Di2015UniqueSeparatorpublic class Animal<SpeciesType,OrderType>Di2015NewLine    where SpeciesType : SpeciesDi2015NewLine    where OrderType : OrderDi2015NewLine{Di2015NewLine}Di2015NewLine
46952Di2015UniqueSeparatorbool createdNew;Di2015NewLineusing (Mutex mtx = new Mutex(false, "MyAwesomeMutex", out createdNew))Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        mtx.WaitOne();Di2015NewLineDi2015NewLine        MessageBox.Show("Click OK to release the mutex.");Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        mtx.ReleaseMutex();Di2015NewLine    }Di2015NewLine}Di2015NewLine
47095Di2015UniqueSeparatorprotected void Application_BeginRequest(Object sender, EventArgs e)Di2015NewLine{Di2015NewLine   if (HttpContext.Current.Request.IsSecureConnection.Equals(false) && HttpContext.Current.Request.IsLocal.Equals(false))Di2015NewLine   {Di2015NewLine    Response.Redirect("https://" + Request.ServerVariables["HTTP_HOST"]Di2015NewLine+   HttpContext.Current.Request.RawUrl);Di2015NewLine   }Di2015NewLine}Di2015NewLine
47242Di2015UniqueSeparatorStringBuilder script = new StringBuilder();Di2015NewLinescript.Append("var imgResources = {};");Di2015NewLinescript.AppendFormat("imgResources['{0}'] = '{1}';", Di2015NewLine    "drophint", Di2015NewLine    Page.ClientScript.GetWebResourceUrl(Page.GetType(), "assembly.location.dragdrophint.gif"));Di2015NewLinescript.AppendFormat("imgResources['{0}'] = '{1}';", Di2015NewLine    "anotherimg", Di2015NewLine    Page.ClientScript.GetWebResourceUrl(Page.GetType(), "assembly.location.anotherimg.gif"));Di2015NewLineDi2015NewLinePage.ClientScript.RegisterClientScriptBlock(Di2015NewLine    Page.GetType(),Di2015NewLine    "imgResources",Di2015NewLine    script.ToString(), Di2015NewLine    true);Di2015NewLine
47242Di2015UniqueSeparatorthis.drophint = document.createElement('img');Di2015NewLinethis.drophint.src = imgResources['drophint'];Di2015NewLinethis.anotherimg = document.createElement('img');Di2015NewLinethis.anotherimg.src = imgResources['anotherimg'];Di2015NewLine
47273Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Text;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLinenamespace TableGeneratorDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            List<TableClass> tables = new List<TableClass>();Di2015NewLineDi2015NewLine            // Pass assembly name via argumentDi2015NewLine            Assembly a = Assembly.LoadFile(args[0]);Di2015NewLineDi2015NewLine            Type[] types = a.GetTypes();Di2015NewLineDi2015NewLine            // Get Types in the assembly.Di2015NewLine            foreach (Type t in types)Di2015NewLine            {Di2015NewLine                TableClass tc = new TableClass(t);                Di2015NewLine                tables.Add(tc);Di2015NewLine            }Di2015NewLineDi2015NewLine            // Create SQL for each tableDi2015NewLine            foreach (TableClass table in tables)Di2015NewLine            {Di2015NewLine                Console.WriteLine(table.CreateTableScript());Di2015NewLine                Console.WriteLine();Di2015NewLine            }Di2015NewLineDi2015NewLine            // Total Hacked way to find FK relationships! Too lazy to fix right nowDi2015NewLine            foreach (TableClass table in tables)Di2015NewLine            {Di2015NewLine                foreach (KeyValuePair<String, Type> field in table.Fields)Di2015NewLine                {Di2015NewLine                    foreach (TableClass t2 in tables)Di2015NewLine                    {Di2015NewLine                        if (field.Value.Name == t2.ClassName)Di2015NewLine                        {Di2015NewLine                            // We have a FK Relationship!Di2015NewLine                            Console.WriteLine("GO");Di2015NewLine                            Console.WriteLine("ALTER TABLE " + table.ClassName + " WITH NOCHECK");Di2015NewLine                            Console.WriteLine("ADD CONSTRAINT FK_" + field.Key + " FOREIGN KEY (" + field.Key + ") REFERENCES " + t2.ClassName + "(ID)");Di2015NewLine                            Console.WriteLine("GO");Di2015NewLineDi2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class TableClassDi2015NewLine    {Di2015NewLine        private List<KeyValuePair<String, Type>> _fieldInfo = new List<KeyValuePair<String, Type>>();Di2015NewLine        private string _className = String.Empty;Di2015NewLineDi2015NewLine        private Dictionary<Type, String> dataMapperDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                // Add the rest of your CLR Types to SQL Types mapping hereDi2015NewLine                Dictionary<Type, String> dataMapper = new Dictionary<Type, string>();Di2015NewLine                dataMapper.Add(typeof(int), "BIGINT");Di2015NewLine                dataMapper.Add(typeof(string), "NVARCHAR(500)");Di2015NewLine                dataMapper.Add(typeof(bool), "BIT");Di2015NewLine                dataMapper.Add(typeof(DateTime), "DATETIME");Di2015NewLine                dataMapper.Add(typeof(float), "FLOAT");Di2015NewLine                dataMapper.Add(typeof(decimal), "DECIMAL(18,0)");Di2015NewLine                dataMapper.Add(typeof(Guid), "UNIQUEIDENTIFIER");Di2015NewLineDi2015NewLine                return dataMapper;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public List<KeyValuePair<String, Type>> FieldsDi2015NewLine        {Di2015NewLine            get { return this._fieldInfo; }Di2015NewLine            set { this._fieldInfo = value; }Di2015NewLine        }Di2015NewLineDi2015NewLine        public string ClassNameDi2015NewLine        {Di2015NewLine            get { return this._className; }Di2015NewLine            set { this._className = value; }Di2015NewLine        }Di2015NewLineDi2015NewLine        public TableClass(Type t)Di2015NewLine        {Di2015NewLine            this._className = t.Name;Di2015NewLineDi2015NewLine            foreach (PropertyInfo p in t.GetProperties())Di2015NewLine            {Di2015NewLine                KeyValuePair<String, Type> field = new KeyValuePair<String, Type>(p.Name, p.PropertyType);Di2015NewLineDi2015NewLine                this.Fields.Add(field);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public string CreateTableScript()Di2015NewLine        {Di2015NewLine            System.Text.StringBuilder script = new StringBuilder();Di2015NewLineDi2015NewLine            script.AppendLine("CREATE TABLE " + this.ClassName);Di2015NewLine            script.AppendLine("(");Di2015NewLine            script.AppendLine("\\t ID BIGINT,");Di2015NewLine            for (int i = 0; i < this.Fields.Count; i++)Di2015NewLine            {Di2015NewLine                KeyValuePair<String, Type> field = this.Fields[i];Di2015NewLineDi2015NewLine                if (dataMapper.ContainsKey(field.Value))Di2015NewLine                {Di2015NewLine                    script.Append("\\t " + field.Key + " " + dataMapper[field.Value]);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    // Complex Type? Di2015NewLine                    script.Append("\\t " + field.Key + " BIGINT");Di2015NewLine                }Di2015NewLineDi2015NewLine                if (i != this.Fields.Count - 1)Di2015NewLine                {Di2015NewLine                    script.Append(",");Di2015NewLine                }Di2015NewLineDi2015NewLine                script.Append(Environment.NewLine);Di2015NewLine            }Di2015NewLineDi2015NewLine            script.AppendLine(")");Di2015NewLineDi2015NewLine            return script.ToString();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
47273Di2015UniqueSeparatorpublic class FakeDataClassDi2015NewLine{Di2015NewLine    public int AnIntDi2015NewLine    {Di2015NewLine        get;Di2015NewLine        set;Di2015NewLine    }Di2015NewLineDi2015NewLine    public string AStringDi2015NewLine    {Di2015NewLine        get;Di2015NewLine        set;Di2015NewLine    }Di2015NewLineDi2015NewLine    public float AFloatDi2015NewLine    {Di2015NewLine        get;Di2015NewLine        set;Di2015NewLine    }Di2015NewLineDi2015NewLine    public FKClass AFKReferenceDi2015NewLine    {Di2015NewLine        get;Di2015NewLine        set;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class FKClassDi2015NewLine    {Di2015NewLine        public int AFKIntDi2015NewLine        {Di2015NewLine            get;Di2015NewLine            set;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
47273Di2015UniqueSeparatorCREATE TABLE FakeDataClassDi2015NewLine(Di2015NewLine         ID BIGINT,Di2015NewLine         AnInt BIGINT,Di2015NewLine         AString NVARCHAR(255),Di2015NewLine         AFloat FLOAT,Di2015NewLine         AFKReference BIGINTDi2015NewLine)Di2015NewLineDi2015NewLineDi2015NewLineCREATE TABLE FKClassDi2015NewLine(Di2015NewLine         ID BIGINT,Di2015NewLine         AFKInt BIGINTDi2015NewLine)Di2015NewLineDi2015NewLineDi2015NewLineGODi2015NewLineALTER TABLE FakeDataClass WITH NOCHECKDi2015NewLineADD CONSTRAINT FK_AFKReference FOREIGN KEY (AFKReference) REFERENCES FKClass(ID)Di2015NewLineGODi2015NewLine
47308Di2015UniqueSeparatorvar foos = new List<Foo> {Di2015NewLine   new Foo{Bar = 1,Lum = 1},Di2015NewLine   new Foo{Bar = 1,Lum = 2},Di2015NewLine   new Foo{Bar = 2,Lum = 3},Di2015NewLine};Di2015NewLineDi2015NewLine// Using language integrated queries:Di2015NewLineDi2015NewLinevar q = from foo in foosDi2015NewLine        group foo by foo.Bar into groupedFoosDi2015NewLine        let lums = from fooGroup in groupedFoosDi2015NewLine                   select fooGroup.LumDi2015NewLine        select new { Bar = groupedFoos.Key, Lums = lums };Di2015NewLineDi2015NewLine// Using lambdasDi2015NewLineDi2015NewLinevar q = foos.GroupBy(x => x.Bar).Di2015NewLine            Select(y => new {Bar = y.Key, Lums = y.Select(z => z.Lum)});Di2015NewLineDi2015NewLineDi2015NewLineforeach (var group in q)Di2015NewLine{Di2015NewLine    Console.WriteLine("Lums for Bar#" + group.Bar);Di2015NewLine    foreach (var lum in group.Lums)Di2015NewLine    {Di2015NewLine        Console.WriteLine(lum);Di2015NewLine    }Di2015NewLine}Di2015NewLine
47548Di2015UniqueSeparatorirb
47745Di2015UniqueSeparatorFork
47745Di2015UniqueSeparatoruse()
47745Di2015UniqueSeparatorbool available = false
47745Di2015UniqueSeparatorrelease()
47745Di2015UniqueSeparatorPhilosopher
47745Di2015UniqueSeparatorgetFork(Fork)
47745Di2015UniqueSeparatorreleaseFork(Fork)
47745Di2015UniqueSeparatoruseFork()
47745Di2015UniqueSeparatorDinningTable
47745Di2015UniqueSeparatorPhilosopher
47745Di2015UniqueSeparatorFork
47745Di2015UniqueSeparatorPlate
47745Di2015UniqueSeparatorPhilosopher.useFork()
47745Di2015UniqueSeparatorPhilosopher
47841Di2015UniqueSeparator  bool nonEmptyDataSet = dataSet != null && Di2015NewLine    (from DataTable t in dataSet.Tables where t.Rows.Count > 0 select t).Any();Di2015NewLine
47841Di2015UniqueSeparatorpublic static class ExtensionMethods {Di2015NewLine  public static bool IsEmpty(this DataSet dataSet) {Di2015NewLine    return dataSet == null ||Di2015NewLine      !(from DataTable t in dataSet.Tables where t.Rows.Count > 0 select t).Any();Di2015NewLine    }Di2015NewLine  }Di2015NewLine
48318Di2015UniqueSeparatorprivate bool IsMainWindow(IntPtr handle)Di2015NewLine{Di2015NewLine    return (!(NativeMethods.GetWindow(new HandleRef(this, handle), 4) != IntPtr.Zero)  Di2015NewLine             && NativeMethods.IsWindowVisible(new HandleRef(this, handle)));Di2015NewLine}Di2015NewLine
48383Di2015UniqueSeparatorsocket.SetSocketOption(SocketOptionLevel.Socket,SocketOptionName.ReuseAddress, true);Di2015NewLine
48545Di2015UniqueSeparatorpublic string branchName (string branchId) Di2015NewLine{Di2015NewLine    //branchList populated in the constructorDi2015NewLine    branch_summary bs = (from b in branchList where b.id == branchId select b).FirstOrDefault();Di2015NewLine    return branch_summary == null ? null : branch_summary.name;Di2015NewLine}Di2015NewLine
48705Di2015UniqueSeparatorvar query = from item in database.ItemsDi2015NewLine            // ...Di2015NewLine            select new { Id = item.Id, Name = item.Name };Di2015NewLineDi2015NewLinereturn query.ToDictionary(item => item.Id, item => item.Name);Di2015NewLine
48719Di2015UniqueSeparatorprivate void frmMainLoad(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    ActiveControl = textBox1;Di2015NewLine}Di2015NewLine
48792Di2015UniqueSeparator.Message
48792Di2015UniqueSeparatorException
48792Di2015UniqueSeparatorException
48971Di2015UniqueSeparatorprotected override void OnCreateSplashScreen()Di2015NewLine{Di2015NewLine    this.SplashScreen = new SplashForm();Di2015NewLine    this.SplashScreen.TopMost = true;Di2015NewLine}Di2015NewLine
49153Di2015UniqueSeparatorif (MessageBox.Show("Do you want to continue?", "Question", MessageBoxButton.YesNo) == MessageBoxResult.Yes) {Di2015NewLine     //some interesting behaviour hereDi2015NewLine}Di2015NewLine
49171Di2015UniqueSeparator    public WindowMain()Di2015NewLine    {Di2015NewLine       InitializeComponent();Di2015NewLine       // Bind KeyDi2015NewLine       InputBinding ib = new InputBinding(Di2015NewLine           MyAppCommands.SaveAll,Di2015NewLine           new KeyGesture(Key.S, ModifierKeys.Shift | ModifierKeys.Control));Di2015NewLine       this.InputBindings.Add(ib);Di2015NewLine       // Bind handlerDi2015NewLine       CommandBinding cb = new CommandBinding( MyAppCommands.SaveAll);Di2015NewLine       cb.Executed += new ExecutedRoutedEventHandler( HandlerThatSavesEverthing );Di2015NewLine       this.CommandBindings.Add (cb );Di2015NewLine    }Di2015NewLineDi2015NewLine    private void HandlerThatSavesEverthing (object obSender, ExecutedRoutedEventArgs e)Di2015NewLine    {Di2015NewLine      // Do the Save All thing here.Di2015NewLine    }Di2015NewLine
49289Di2015UniqueSeparatorSettings.Default.Properties["property"].DefaultValue // initial value from config fileDi2015NewLine
49289Di2015UniqueSeparatorstring foo = Settings.Default.Foo; // Foo = "Foo" by defaultDi2015NewLineSettings.Default.Foo = "Boo";Di2015NewLineSettings.Default.Save();Di2015NewLinestring modifiedValue = Settings.Default.Foo; // modifiedValue = "Boo"Di2015NewLinestring originalValue = Settings.Default.Properties["Foo"].DefaultValue as string; // originalValue = "Foo"Di2015NewLine
49311Di2015UniqueSeparatorpublic static Control GetPostBackControl(Page page)Di2015NewLine{Di2015NewLine    Control control = null;Di2015NewLineDi2015NewLine    string ctrlname = page.Request.Params.Get("__EVENTTARGET");Di2015NewLine    if (ctrlname != null && ctrlname != string.Empty)Di2015NewLine    {Di2015NewLine        control = page.FindControl(ctrlname);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        foreach (string ctl in page.Request.Form)Di2015NewLine        {Di2015NewLine            Control c = page.FindControl(ctl);Di2015NewLine            if (c is System.Web.UI.WebControls.Button)Di2015NewLine            {Di2015NewLine                control = c;Di2015NewLine                break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return control;Di2015NewLine}Di2015NewLine
49479Di2015UniqueSeparatorJSArrayString += "^" + (inv.RRP * oCountry.ExchangeRate).ToString("#0.00")Di2015NewLine
49479Di2015UniqueSeparatorJSArrayString = String.Format("{0}^{1:#0.00}",JSArrayString,(inv.RRP * oCountry.ExchangeRate))Di2015NewLine
50581Di2015UniqueSeparatorList<float[]> _calibrationSet = new List<float[]>();Di2015NewLineDi2015NewLine// ...Di2015NewLineDi2015NewLinewhile (recordsToRead)Di2015NewLine{Di2015NewLine    float[] record = new float[SensorCount];Di2015NewLine    for (int i = 0; i < SensorCount; i++)Di2015NewLine    {Di2015NewLine    \record[i] = calibrationArrayView.ReadFloat();Di2015NewLine    }Di2015NewLine    _calibrationSet.Add(record);Di2015NewLine}Di2015NewLineDi2015NewLine// access later: _calibrationSet[record][sensor]Di2015NewLine
51128Di2015UniqueSeparatorusing System.Runtime.InteropServices;Di2015NewLine
51128Di2015UniqueSeparatorprivate const int EM_SETTABSTOPS = 0x00CB;Di2015NewLine[DllImport("User32.dll", CharSet = CharSet.Auto)]Di2015NewLinepublic static extern IntPtr SendMessage(IntPtr h, Di2015NewLine int msg, Di2015NewLine int wParam, Di2015NewLine int [] lParam);Di2015NewLine
51128Di2015UniqueSeparator// define value of the Tab indent Di2015NewLineint[] stops = {16}; Di2015NewLine// change the indent Di2015NewLineSendMessage(this.textBox1.Handle, EM_SETTABSTOPS, 1, stops);Di2015NewLine
51149Di2015UniqueSeparator//Namespaces we need to useDi2015NewLineusing System.Diagnostics;Di2015NewLineDi2015NewLinepublic bool IsProcessOpen(string name)Di2015NewLine{Di2015NewLine    //here we're going to get a list of all running processes onDi2015NewLine    //the computerDi2015NewLine    foreach (Process clsProcess in Process.GetProcesses()) {Di2015NewLine        //now we're going to see if any of the running processesDi2015NewLine        //match the currently running processes. Be sure to notDi2015NewLine        //add the .exe to the name you provide, i.e: NOTEPAD,Di2015NewLine        //not NOTEPAD.EXE or false is always returned even ifDi2015NewLine        //notepad is running.Di2015NewLine        //Remember, if you have the process running more than once, Di2015NewLine        //say IE open 4 times the loop thr way it is now will close all 4,Di2015NewLine        //if you want it to just close the first one it findsDi2015NewLine        //then add a return; after the KillDi2015NewLine        if (clsProcess.ProcessName.Contains(name))Di2015NewLine        {Di2015NewLine            //if the process is found to be running then weDi2015NewLine            //return a trueDi2015NewLine            return true;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    //otherwise we return a falseDi2015NewLine    return false;Di2015NewLine}Di2015NewLineDi2015NewLine
51225Di2015UniqueSeparatorSystem.Xml.XmlDocument xd = new System.Xml.XmlDocument;Di2015NewLinexd.Load("http://www.webservice.com/webservice?fXML=1");Di2015NewLinestring xPath = "/xml/somekey";Di2015NewLine// this node's inner text contains "somevalue"Di2015NewLinereturn xd.SelectSingleNode(xPath).InnerText;Di2015NewLine
51225Di2015UniqueSeparatorcom.webservice.www.WebService ws = new com.webservice.www.WebService();Di2015NewLine// this assumes your web method takes in the fXML as an integer attributeDi2015NewLinereturn ws.SomeWebMethod(1);Di2015NewLine
51249Di2015UniqueSeparatorUL
51249Di2015UniqueSeparatorLI
51249Di2015UniqueSeparatorweb.sitemap
51298Di2015UniqueSeparatorRegistry.LocalMachineDi2015NewLine
51298Di2015UniqueSeparatorLocalUser
51298Di2015UniqueSeparatorLocalMachine
51621Di2015UniqueSeparatorinterface INamedObjectDi2015NewLine{Di2015NewLine    string Name {get;}Di2015NewLine}Di2015NewLine
51621Di2015UniqueSeparatorList<INamedObject> list = new List<INamedObject>(){fst, snd};Di2015NewLineDi2015NewLineforeach (INamedObject o in list)Di2015NewLine   Console.WriteLine(o.Name);Di2015NewLine
51672Di2015UniqueSeparatorusing System.IO;Di2015NewLineDi2015NewLineDriveInfo[] allDrives = DriveInfo.GetDrives();Di2015NewLineforeach (DriveInfo d in allDrives)Di2015NewLine{Di2015NewLine  if (d.IsReady && d.DriveType == DriveType.Removable)Di2015NewLine  {Di2015NewLine    // This is the drive you want...Di2015NewLine  }Di2015NewLine}Di2015NewLine
51737Di2015UniqueSeparatorpublic static T FromXml<T>(string xml)Di2015NewLine{Di2015NewLine    XmlSerializer xmlser = new XmlSerializer(typeof(T));Di2015NewLine    using (System.IO.StringReader sr = new System.IO.StringReader(xml))Di2015NewLine    {Di2015NewLine        return (T)xmlser.Deserialize(sr);Di2015NewLine    }Di2015NewLine}Di2015NewLine
51803Di2015UniqueSeparatorvar trace = new System.Diagnostics.StackTrace(exception);Di2015NewLine
51867Di2015UniqueSeparator<NewDataSet>  Di2015NewLine  <Foo>              <!-- Foo-Id: 0 -->Di2015NewLine    <Bar>abcd</Bar>Di2015NewLine    <Foo>efg</Foo>   <!-- Foo-Id: 1, Parent-Id: 0 -->Di2015NewLine  </Foo>Di2015NewLine  <Foo>              <!-- Foo-Id: 2 -->Di2015NewLine    <Bar>hijk</Bar>Di2015NewLine    <Foo>lmn</Foo>   <!-- Foo-Id: 3, Parent-Id: 2 -->Di2015NewLine  </Foo>Di2015NewLine</NewDataSet>Di2015NewLine
51867Di2015UniqueSeparator<NewDataSet>  Di2015NewLine  <Rec>              <!-- Rec-Id: 0 -->Di2015NewLine    <Bar>abcd</Bar>Di2015NewLine    <Foo>efg</Foo>   Di2015NewLine  </Rec>Di2015NewLine  <Rec>              <!-- Rec-Id: 1 -->Di2015NewLine    <Bar>hijk</Bar>Di2015NewLine    <Foo>lmn</Foo>   Di2015NewLine  </Rec>Di2015NewLine</NewDataSet>Di2015NewLine
51867Di2015UniqueSeparatorBar     Foo        Rec-IdDi2015NewLineabcd    efg        0Di2015NewLinehijk    lmn        1Di2015NewLine
51934Di2015UniqueSeparatorstring qs = getSession().getNamedQuery(queryName);Di2015NewLine
51934Di2015UniqueSeparatorqs = qs.replace(":tablename:", tableName);Di2015NewLine
51995Di2015UniqueSeparatorstring url = Request.RawUrl;Di2015NewLineDi2015NewLineNameValueCollection params = Request.QueryString;Di2015NewLinefor (int i=0; i<params.Count; i++)Di2015NewLine{Di2015NewLine    if (params[i].GetKey(i).ToLower() == "foo")Di2015NewLine    {Di2015NewLine        url += string.Concat((i==0 ? "?" : "&"), params[i].GetKey(i), "=", params.Get(i));Di2015NewLine    }Di2015NewLine}Di2015NewLineResponse.Redirect(url);Di2015NewLine
52318Di2015UniqueSeparatorforeach(MonthSpecification spec in this.MonthSpecifications)Di2015NewLine{Di2015NewLine   if(spec.IsSatisfiedBy(month))Di2015NewLine       spec.Perform(month);Di2015NewLine}Di2015NewLine
52443Di2015UniqueSeparatorvar students = new Dictionary<int, StudentName>()Di2015NewLine{Di2015NewLine    { 111, new StudentName {FirstName="Sachin", LastName="Karnik", ID=211}},Di2015NewLine    { 112, new StudentName {FirstName="Dina", LastName="Salimzianova", ID=317, }},Di2015NewLine    { 113, new StudentName {FirstName="Andy", LastName="Ruth", ID=198, }}Di2015NewLine};Di2015NewLine
52470Di2015UniqueSeparatorquery.UniqueResult<T>()
52940Di2015UniqueSeparatorlist.ForEach(i => Console.Write("{0}\\t", i));Di2015NewLine
53641Di2015UniqueSeparatorvar user1 = new User {Name = "steve", Age = 28};Di2015NewLinevar user2 = new User {Name = "foobar", Age = 28};Di2015NewLineDi2015NewLineExpression<Func<User, bool>> expression1 = t => t.Name == "steve";Di2015NewLineExpression<Func<User, bool>> expression2 = t => t.Age == 28;Di2015NewLineDi2015NewLinevar invokedExpression = Expression.Invoke(expression2, expression1.Parameters.Cast<Expression>());Di2015NewLineDi2015NewLinevar result = Expression.Lambda<Func<User, bool>>(Expression.And(expression1.Body, invokedExpression), expression1.Parameters);Di2015NewLineDi2015NewLineConsole.WriteLine(result.Compile().Invoke(user1)); // trueDi2015NewLineConsole.WriteLine(result.Compile().Invoke(user2)); // falseDi2015NewLine
53641Di2015UniqueSeparatorclass UserDi2015NewLine{Di2015NewLine  public string Name { get; set; }Di2015NewLine  public int Age { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static class PredicateExtensionsDi2015NewLine{Di2015NewLine  public static Expression<Func<T, bool>> And<T>(this Expression<Func<T, bool>> expression1,Expression<Func<T, bool>> expression2)Di2015NewLine  {Di2015NewLine    InvocationExpression invokedExpression = Expression.Invoke(expression2, expression1.Parameters.Cast<Expression>());Di2015NewLineDi2015NewLine    return Expression.Lambda<Func<T, bool>>(Expression.And(expression1.Body, invokedExpression), expression1.Parameters);Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine  static void Main(string[] args)Di2015NewLine  {Di2015NewLine    var user1 = new User {Name = "steve", Age = 28};Di2015NewLine    var user2 = new User {Name = "foobar", Age = 28};Di2015NewLineDi2015NewLine    Expression<Func<User, bool>> expression1 = t => t.Name == "steve";Di2015NewLine    Expression<Func<User, bool>> expression2 = t => t.Age == 28;Di2015NewLineDi2015NewLine    var result = expression1.And(expression2);Di2015NewLineDi2015NewLine    Console.WriteLine(result.Compile().Invoke(user1));Di2015NewLine    Console.WriteLine(result.Compile().Invoke(user2));Di2015NewLine  }Di2015NewLine}Di2015NewLine
53776Di2015UniqueSeparatorSystem.Configuration.ConfigurationManager.AppSettings["myKey"]
54273Di2015UniqueSeparatorpublic static class UriHelperDi2015NewLine{       Di2015NewLine    public static string NormalizeRelativePath(string path)Di2015NewLine    {Di2015NewLine\\UriBuilder _builder = new UriBuilder("http://localhost");Di2015NewLine    \builder.Path = path;Di2015NewLine    \return builder.Uri.AbsolutePath;Di2015NewLine    }Di2015NewLine}Di2015NewLine
54273Di2015UniqueSeparatorstring url = "foo/bar/../bar/path.aspx";Di2015NewLineConsole.WriteLine(UriHelper.NormalizeRelativePath(url));Di2015NewLine
54856Di2015UniqueSeparatorSystem.Exception
54856Di2015UniqueSeparatorSystem.ApplicationException
54856Di2015UniqueSeparatorSystem.ApplicationException
54888Di2015UniqueSeparatorpublic void btnSubmitClick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (this.txtMultiLine.Text.StartsWith("\\r\\n"))Di2015NewLine    {Di2015NewLine        this.txtMultiLine.Text = "\\r\\n" + this.txtMultiLine.Text;Di2015NewLine    }Di2015NewLine}Di2015NewLine
54928Di2015UniqueSeparator([^"^\\s]+)\\s*|"([^"]+)"\\s*Di2015NewLine
54928Di2015UniqueSeparatorDim token As StringDi2015NewLineDim r As Regex = New Regex("([^""^\\s]+)\\s*|""([^""]+)""\\s*")Di2015NewLineDim m As Match = r.Match("this is a ""test string""")Di2015NewLineDi2015NewLineWhile m.SuccessDi2015NewLine    token = m.Groups(1).ToStringDi2015NewLine    If token.length = 0 And m.Groups.Count > 1 ThenDi2015NewLine        token = m.Groups(2).ToStringDi2015NewLine    End IfDi2015NewLine    m = m.NextMatchDi2015NewLineEnd WhileDi2015NewLine
55242Di2015UniqueSeparatorparent.opener.document.getElemenyById('ParentTextBox').value = "New Text";Di2015NewLine
55254Di2015UniqueSeparator<
55254Di2015UniqueSeparator>
55254Di2015UniqueSeparator<
55254Di2015UniqueSeparator>
55254Di2015UniqueSeparatorvar myData = from a in db.MyTableDi2015NewLine             where a.MyValue == "A"Di2015NewLine             select new MyTypeDi2015NewLine             {Di2015NewLine                 Key = a.Key,Di2015NewLine                 Value = a.MyValueDi2015NewLine             };Di2015NewLine
55447Di2015UniqueSeparatorSystem.Web.Security.Membership.GeneratePassword(int length, int numberOfNonAlphanumericCharacters
55511Di2015UniqueSeparatorpublic static class JSonifyDi2015NewLine{Di2015NewLine    public static string GetJsonTable<T>(Di2015NewLine    \this IQueryable<T> query, int pageNumber, int pageSize, string IDColumnName, string[] columnNames)Di2015NewLine    {Di2015NewLine    \string select = string.Format("new ({0} as ID, \\"CELLSTART\\" as CELLSTART, {1}, \\"CELLEND\\" as CELLEND)", IDColumnName, string.Join(",", columnNames));Di2015NewLine    \var items = newDi2015NewLine    \{Di2015NewLine    \\page = pageNumber,Di2015NewLine    \\total = query.Count(),Di2015NewLine    \\rows = query.Select(select).Skip((pageNumber - 1) * pageSize).Take(pageSize)Di2015NewLine    \};Di2015NewLine    \string json = JavaScriptConvert.SerializeObject(items);Di2015NewLine    \json = json.Replace("\\"CELLSTART\\":\\"CELLSTART\\",", "\\"cell\\":[");Di2015NewLine    \json = json.Replace(",\\"CELLEND\\":\\"CELLEND\\"", "]");Di2015NewLine    \foreach (string column in columnNames)Di2015NewLine    \{Di2015NewLine    \\json = json.Replace("\\"" + column + "\\":", "");Di2015NewLine    \}Di2015NewLine    \return json;Di2015NewLine    }Di2015NewLine}Di2015NewLine
55980Di2015UniqueSeparatorif (!(foo is bar)) {Di2015NewLine}Di2015NewLine
56024Di2015UniqueSeparatorpublic class Const_V_ReadonlyDi2015NewLine{Di2015NewLine  public const int I_CONST_VALUE = 2;Di2015NewLine  public readonly int I_RO_VALUE;Di2015NewLine  public Const_V_Readonly()Di2015NewLine  {Di2015NewLine     I_RO_VALUE = 3;Di2015NewLine  }Di2015NewLine}Di2015NewLine
56024Di2015UniqueSeparatorpublic const int CM_IN_A_METER = 100;Di2015NewLine
56024Di2015UniqueSeparatorpublic readonly float PI = 3.14;Di2015NewLine
56100Di2015UniqueSeparatorpublic IEnumerable<string> Combine(IEnumerable<string> col1, IEnumerable<string> col2)Di2015NewLine{Di2015NewLine    foreach(string item in col1)Di2015NewLine        yield return item;Di2015NewLineDi2015NewLine    foreach(string item in col2)Di2015NewLine        yield return item;Di2015NewLine}Di2015NewLine
56299Di2015UniqueSeparatorTreeNode
56299Di2015UniqueSeparatorTreeNode
56483Di2015UniqueSeparatorcomboBox1.DataSource = Enum.GetValues(typeof(MyEnum));Di2015NewLine
56483Di2015UniqueSeparatorMyEnum value = (MyEnum)comboBox1.SelectedValue;Di2015NewLine
56483Di2015UniqueSeparatorDataGridViewComboBoxColumn col = new DataGridViewComboBoxColumn();Di2015NewLinecol.Name = "My Enum Column";Di2015NewLinecol.DataSource = Enum.GetValues(typeof(MyEnum));Di2015NewLinecol.ValueType = typeof(MyEnum);Di2015NewLinedataGridView1.Columns.Add(col);Di2015NewLine
56533Di2015UniqueSeparator[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]Di2015NewLine
56539Di2015UniqueSeparatorNullable<bool>
56735Di2015UniqueSeparator<
56735Di2015UniqueSeparator<=
56735Di2015UniqueSeparatorif (randomNumber < broker.Weight)Di2015NewLine
56735Di2015UniqueSeparatortotalWeight
57040Di2015UniqueSeparator<system.web>Di2015NewLine  <roleManager enabled="true" />Di2015NewLine</system.web>Di2015NewLine
57105Di2015UniqueSeparatorC:\\Windows\\Microsoft.NET\\Framework\\v2.0.50727\\Webdev.WebServer.exe /port:[PORT NUMBER] /path: [PATH TO ROOT]Di2015NewLine
57363Di2015UniqueSeparatorString appData = Di2015NewLine    Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);Di2015NewLine
57410Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    private static List<string> values;Di2015NewLine    private const int MAX_PATTERN_LENGTH = 4;Di2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        values = new List<string>();Di2015NewLine        values.AddRange(new string[] { "a", "b", "c", "c", "a", "c", "d", "c", "d" });Di2015NewLineDi2015NewLineDi2015NewLine        for (int i = MAX_PATTERN_LENGTH; i > 0; i--)Di2015NewLine        {Di2015NewLine            RemoveDuplicatesOfLength(i);Di2015NewLine        }Di2015NewLineDi2015NewLine        foreach (string s in values)Di2015NewLine        {Di2015NewLine            Console.WriteLine(s);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void RemoveDuplicatesOfLength(int dupeLength)Di2015NewLine    {Di2015NewLine        for (int i = 0; i < values.Count; i++)Di2015NewLine        {Di2015NewLine            if (i + dupeLength > values.Count)Di2015NewLine                break;Di2015NewLineDi2015NewLine            if (i + dupeLength + dupeLength > values.Count)Di2015NewLine                break;Di2015NewLineDi2015NewLine            var patternA = values.GetRange(i, dupeLength);Di2015NewLine            var patternB = values.GetRange(i + dupeLength, dupeLength);Di2015NewLineDi2015NewLine            bool isPattern = ComparePatterns(patternA, patternB);Di2015NewLineDi2015NewLine            if (isPattern)Di2015NewLine            {Di2015NewLine                values.RemoveRange(i, dupeLength);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private static bool ComparePatterns(List<string> pattern, List<string> candidate)Di2015NewLine    {Di2015NewLine        for (int i = 0; i < pattern.Count; i++)Di2015NewLine        {Di2015NewLine            if (pattern[i] != candidate[i])Di2015NewLine                return false;Di2015NewLine        }Di2015NewLineDi2015NewLine        return true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
57450Di2015UniqueSeparatorpublic class GenericFactory<T> where T : MyAbstractTypeDi2015NewLine{Di2015NewLine    public static T GetInstance()Di2015NewLine    {Di2015NewLine        return Activator.CreateInstance(typeof(T), true);Di2015NewLine    }Di2015NewLine}Di2015NewLine
57774Di2015UniqueSeparatorfunction linkPostback() {Di2015NewLineDi2015NewLine    var prm = Sys.WebForms.PageRequestManager.getInstance();Di2015NewLine    prm.add_endRequest(playAnimation)Di2015NewLine}Di2015NewLineDi2015NewLinefunction playAnimation() {Di2015NewLineDi2015NewLine    AnimationExtender.Enabled = true;Di2015NewLine    var onclkBehavior = $find("ctl00_btnOpenList").get_OnClickBehavior().get_animation();Di2015NewLine    onclkBehavior.play();Di2015NewLine    AnimationExtender.Enabled = false;Di2015NewLine}Di2015NewLine
57828Di2015UniqueSeparatorFoo foo = (Foo)bar
57828Di2015UniqueSeparatoras
57828Di2015UniqueSeparatorFoo foo = bar as Foo
57828Di2015UniqueSeparatorbool is = bar is Foo
57828Di2015UniqueSeparatoras
57828Di2015UniqueSeparatoris
57828Di2015UniqueSeparatorFoo
57828Di2015UniqueSeparatoris
57828Di2015UniqueSeparatoris
57828Di2015UniqueSeparatoras
57828Di2015UniqueSeparatoris
57995Di2015UniqueSeparator.Di2015NewLine.Di2015NewLine    <property name="show_sql">true</property>Di2015NewLine    <property name="query.substitutions">true 1, false 0, yes 'Y', no 'N'</property>Di2015NewLine    <mapping assembly="Project.DomainModel"/>  <!-- Here -->Di2015NewLine</session-factory>Di2015NewLine.Di2015NewLine.Di2015NewLine
58131Di2015UniqueSeparatorPage page = HttpContext.Current.Handler as Page;Di2015NewLineDi2015NewLineif (page != null)Di2015NewLine{Di2015NewLine     // Use page instance.Di2015NewLine}Di2015NewLine
58180Di2015UniqueSeparator    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]Di2015NewLine    public struct SidIdentifierAuthority {Di2015NewLineDi2015NewLine        /// BYTE[6]Di2015NewLine        [System.Runtime.InteropServices.MarshalAsAttribute(Di2015NewLine            System.Runtime.InteropServices.UnmanagedType.ByValArray, Di2015NewLine            SizeConst = 6, Di2015NewLine            ArraySubType = Di2015NewLine            System.Runtime.InteropServices.UnmanagedType.I1)]Di2015NewLine        public byte[] Value;Di2015NewLine    }Di2015NewLineDi2015NewLine    public partial class NativeMethods {Di2015NewLineDi2015NewLine        /// Return Type: BOOL->intDi2015NewLine        ///pIdentifierAuthority: PSID_IDENTIFIER_AUTHORITY->_SID_IDENTIFIER_AUTHORITY*Di2015NewLine        ///nSubAuthorityCount: BYTE->unsigned charDi2015NewLine        ///nSubAuthority0: DWORD->unsigned intDi2015NewLine        ///nSubAuthority1: DWORD->unsigned intDi2015NewLine        ///nSubAuthority2: DWORD->unsigned intDi2015NewLine        ///nSubAuthority3: DWORD->unsigned intDi2015NewLine        ///nSubAuthority4: DWORD->unsigned intDi2015NewLine        ///nSubAuthority5: DWORD->unsigned intDi2015NewLine        ///nSubAuthority6: DWORD->unsigned intDi2015NewLine        ///nSubAuthority7: DWORD->unsigned intDi2015NewLine        ///pSid: PSID*Di2015NewLine        [System.Runtime.InteropServices.DllImportAttribute("advapi32.dll", EntryPoint = "AllocateAndInitializeSid")]Di2015NewLine        [return: System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.Bool)]Di2015NewLine        public static extern bool AllocateAndInitializeSid(Di2015NewLine            [System.Runtime.InteropServices.InAttribute()] Di2015NewLine            ref SidIdentifierAuthority pIdentifierAuthority, Di2015NewLine            byte nSubAuthorityCount, Di2015NewLine            uint nSubAuthority0, Di2015NewLine            uint nSubAuthority1, Di2015NewLine            uint nSubAuthority2, Di2015NewLine            uint nSubAuthority3, Di2015NewLine            uint nSubAuthority4, Di2015NewLine            uint nSubAuthority5, Di2015NewLine            uint nSubAuthority6, Di2015NewLine            uint nSubAuthority7, Di2015NewLine            out System.IntPtr pSid);Di2015NewLineDi2015NewLine    }Di2015NewLine
58277Di2015UniqueSeparatorcommand.Parameters.AddWithValue("@parameter", null);Di2015NewLine
58570Di2015UniqueSeparatorFindMimeFromData
58570Di2015UniqueSeparatorFindMimeFromData
59172Di2015UniqueSeparatormyObjects.RemoveAll(delegate (MyObject m) { return m.X >= 10; });Di2015NewLine
59172Di2015UniqueSeparatormyObjects.RemoveAll(m => m.X >= 10);Di2015NewLine
59243Di2015UniqueSeparatorAppDomain.AssemblyResolve
59243Di2015UniqueSeparatorLoadFile
59243Di2015UniqueSeparatorAppDomain
59243Di2015UniqueSeparatorAppDomain
59243Di2015UniqueSeparatorAssembly.ReflectionOnlyLoad
59250Di2015UniqueSeparatorT[] array1 = getOneArray();Di2015NewLineT[] array2 = getAnotherArray();Di2015NewLineint array1OriginalLength = array1.Length;Di2015NewLineArray.Resize<T>(ref array1, array1OriginalLength + array2.Length);Di2015NewLineArray.Copy(array2, 0, array1, array1OriginalLength, array2.Length);Di2015NewLine
59250Di2015UniqueSeparatorT[] array1 = getOneArray();Di2015NewLineT[] array2 = getAnotherArray();Di2015NewLineT[] newArray = new T[array1.Length + array2.Length];Di2015NewLineArray.Copy(array1, 0, newArray);Di2015NewLineArray.Copy(array2, 0, newArray, array1.Length, array2.Length);Di2015NewLine
59551Di2015UniqueSeparatorprivate void MyMethod()Di2015NewLine{Di2015NewLine}Di2015NewLine
59551Di2015UniqueSeparator1) Delegate d = delegate() { };                       // Cannot convert anonymous method to type âSystem.Delegateâ because it is not a delegate typeDi2015NewLine2) Delegate d2 = MyMethod;                         // Cannot convert method group âMyMethodâ to non-delegate type âSystem.DelegateâDi2015NewLine3) Delegate d3 = (WaitCallback)MyMethod;   // No overload for âMyMethodâ matches delegate âSystem.Threading.WaitCallbackâDi2015NewLine
59551Di2015UniqueSeparator4) Delegate d4 = (MethodInvoker)MyMethod;  // Works because we cast to a delegate type of the same signature.Di2015NewLine5) Delegate d5 = (Action)delegate { };              // Works for same reason as d4.Di2015NewLine6) Action d6 = MyMethod;                                // Delegate inference at work here. New Action delegate is created and assigned.Di2015NewLine
60043Di2015UniqueSeparatorXmlSerializer serializer = new XmlSerializer(instance.GetType())Di2015NewLine
60089Di2015UniqueSeparatorint[] values = { 5, 14, 29, 49, 99, 150, 999 };Di2015NewLineDi2015NewLinefor (int key = 0; key < values.Length; ++key)Di2015NewLine  if (search <= values[key] && !stop)Di2015NewLine  {Di2015NewLine    // set key to a variableDi2015NewLine  }Di2015NewLine
60184Di2015UniqueSeparator    bool runThrobber = true;Di2015NewLine    private void AnimateThrobber(TreeNode animatedNode)Di2015NewLine    {Di2015NewLine        BackgroundWorker bg = new BackgroundWorker();Di2015NewLine        bg.DoWork += new DoWorkEventHandler(delegateDi2015NewLine        {Di2015NewLine            while (runThrobber)Di2015NewLine            {Di2015NewLine                this.Invoke((MethodInvoker)delegateDi2015NewLine                {Di2015NewLine                    animatedNode.SelectedImageIndex++;Di2015NewLine                    if (animatedNode.SelectedImageIndex >= imageList1.Images.Count) > animatedNode.SelectedImageIndex = 0;Di2015NewLine                });Di2015NewLine                Thread.Sleep(100);Di2015NewLine            }Di2015NewLine        });Di2015NewLine        bg.RunWorkerAsync();Di2015NewLine    }Di2015NewLine
60339Di2015UniqueSeparator    ...Di2015NewLine    lv.OwnerDraw = true;Di2015NewLine    lv.DrawItem += new DrawListViewItemEventHandler( lv_DrawItem );Di2015NewLine    ...Di2015NewLineDi2015NewLinevoid lv_DrawItem( object sender, DrawListViewItemEventArgs e )Di2015NewLine{Di2015NewLine    Rectangle foo = e.Bounds;Di2015NewLine    foo.Offset( -10, 0 );Di2015NewLine    e.Graphics.FillRectangle( new SolidBrush( e.Item.BackColor ), foo );Di2015NewLine    e.DrawDefault = true;Di2015NewLine}Di2015NewLine
60353Di2015UniqueSeparator<identity impersonate="true" />Di2015NewLine
60695Di2015UniqueSeparatorDi2015NewLine    GlacialList mylist = new GlacialList();Di2015NewLineDi2015NewLinemylist.Columns.Add( "Column1", 100 ); // this can also be added Di2015NewLineDi2015NewLine         // through the design time support Di2015NewLineDi2015NewLinemylist.Columns.Add( "Column2", 100 ); Di2015NewLinemylist.Columns.Add( "Column3", 100 ); Di2015NewLinemylist.Columns.Add( "Column4", 100 ); Di2015NewLineDi2015NewLineGLItem item;Di2015NewLineDi2015NewLineitem = this.glacialList1.Items.Add( "Atlanta Braves" );Di2015NewLineitem.SubItems[1].Text = "8v";Di2015NewLineitem.SubItems[2].Text = "Live";Di2015NewLineitem.SubItems[2].BackColor = Color.Bisque;Di2015NewLineitem.SubItems[3].Text = "MLB.TV"; Di2015NewLineDi2015NewLineitem = this.glacialList1.Items.Add( "Florida Marlins" );Di2015NewLineitem.SubItems[1].Text = "";Di2015NewLineitem.SubItems[2].Text = "Delayed";Di2015NewLineitem.SubItems[2].BackColor = Color.LightCoral;Di2015NewLineitem.SubItems[3].Text = "Audio";Di2015NewLineDi2015NewLineDi2015NewLineitem.SubItems[1].BackColor = Color.Aqua; // set the background Di2015NewLineDi2015NewLine      // of this particular subitem ONLYDi2015NewLineDi2015NewLineitem.UserObject = myownuserobjecttype; // set a private user objectDi2015NewLineDi2015NewLineitem.Selected = true; // set this item to selected stateDi2015NewLineDi2015NewLineitem.SubItems[1].Span = 2; // set this sub item to span 2 spacesDi2015NewLineDi2015NewLineDi2015NewLineArrayList selectedItems = mylist.SelectedItems; Di2015NewLine           // get list of selected itemsDi2015NewLine
60781Di2015UniqueSeparatorcompilerParams.ReferencedAssemblies.Add(typeof(DataContext).Assembly.Location);Di2015NewLine
61225Di2015UniqueSeparatorArgumentOutOfRangeException
61257Di2015UniqueSeparatorclass TreeNodeDi2015NewLine{Di2015NewLine    public string Value { get; set;}Di2015NewLine    public List<TreeNode> Nodes { get; set;}Di2015NewLineDi2015NewLineDi2015NewLine    public TreeNode()Di2015NewLine    {Di2015NewLine        Nodes = new List<TreeNode>();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineAction<TreeNode> traverse = null;Di2015NewLineDi2015NewLinetraverse = (n) => { Console.WriteLine(n.Value); n.Nodes.ForEach(traverse);};Di2015NewLineDi2015NewLinevar root = new TreeNode { Value = "Root" };Di2015NewLineroot.Nodes.Add(new TreeNode { Value = "ChildA"} );Di2015NewLineroot.Nodes[0].Nodes.Add(new TreeNode { Value = "ChildA1" });Di2015NewLineroot.Nodes[0].Nodes.Add(new TreeNode { Value = "ChildA2" });Di2015NewLineroot.Nodes.Add(new TreeNode { Value = "ChildB"} );Di2015NewLineroot.Nodes[1].Nodes.Add(new TreeNode { Value = "ChildB1" });Di2015NewLineroot.Nodes[1].Nodes.Add(new TreeNode { Value = "ChildB2" });Di2015NewLineDi2015NewLinetraverse(root);Di2015NewLine
61961Di2015UniqueSeparatorDim itemValues As Array = System.Enum.GetValues(GetType(Response))Di2015NewLineDim itemNames As Array = System.Enum.GetNames(GetType(Response))Di2015NewLineDi2015NewLineFor i As Integer = 0 To itemNames.Length - 1Di2015NewLine    Dim item As New ListItem(itemNames(i), itemValues(i))Di2015NewLine    dropdownlist.Items.Add(item)Di2015NewLineNextDi2015NewLine
61961Di2015UniqueSeparatorArray itemValues = System.Enum.GetValues(typeof(Response));Di2015NewLineArray itemNames = System.Enum.GetNames(typeof(Response));Di2015NewLineDi2015NewLinefor (int i = 0; i <= itemNames.Length - 1 ; i++) {Di2015NewLine    ListItem item = new ListItem(itemNames[i], itemValues[i]);Di2015NewLine    dropdownlist.Items.Add(item);Di2015NewLine}Di2015NewLine
62224Di2015UniqueSeparator#region
62381Di2015UniqueSeparatorDim HTTPRequest As HttpWebRequestDi2015NewLineDim HTTPResponse As HttpWebResponseDi2015NewLineDim ResponseReader As StreamReaderDi2015NewLineDim URL AS StringDi2015NewLineDim ResponseText As StringDi2015NewLineDi2015NewLineURL = "http://www.example.com/MyWebSerivce/MyMethod?arg1=A&arg2=B"Di2015NewLineDi2015NewLineHTTPRequest = HttpWebRequest.Create(URL)Di2015NewLineHTTPRequest.Method = "GET"Di2015NewLineDi2015NewLineHTTPResponse = HTTPRequest.GetResponse()Di2015NewLineDi2015NewLineResponseReader = New StreamReader(HTTPResponse.GetResponseStream())Di2015NewLineResponseText = ResponseReader.ReadToEnd()Di2015NewLine
62555Di2015UniqueSeparatorint
62555Di2015UniqueSeparatorInt32
62555Di2015UniqueSeparatorint
62555Di2015UniqueSeparatorInt32
62555Di2015UniqueSeparatorint
62555Di2015UniqueSeparatorInt32
62589Di2015UniqueSeparator[PersistenceMode(PersistenceMode.InnerProperty)]Di2015NewLine
62589Di2015UniqueSeparator<%@ Register Namespace="MyNamespace" TagPrefix="Pref" %>Di2015NewLine
62688Di2015UniqueSeparatorif (ex.Number == -2)Di2015NewLine{Di2015NewLine     //handle timeoutDi2015NewLine}Di2015NewLine
62688Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    SqlConnection sql = new SqlConnection(@"Network Library=DBMSSOCN;Data Source=YourServer,1433;Initial Catalog=YourDB;Integrated Security=SSPI;");Di2015NewLine    sql.Open();Di2015NewLineDi2015NewLine    SqlCommand cmd = sql.CreateCommand();Di2015NewLine    cmd.CommandText = "DECLARE @i int WHILE EXISTS (SELECT 1 from sysobjects) BEGIN SELECT @i = 1 END";Di2015NewLine    cmd.ExecuteNonQuery(); // This line will timeout.Di2015NewLineDi2015NewLine    cmd.Dispose();Di2015NewLine    sql.Close();Di2015NewLine}Di2015NewLinecatch (SqlException ex)Di2015NewLine{Di2015NewLine    if (ex.Number == -2) {Di2015NewLine        Console.WriteLine ("Timeout occurred");Di2015NewLine}Di2015NewLine
62775Di2015UniqueSeparatorbool oneIsNull = 1 == null;Di2015NewLine
62775Di2015UniqueSeparatorThe result of the expression is always 'false' since a value of type 'int' is never equal to 'null' of type '<null>'
63470Di2015UniqueSeparator    /// <summary>Di2015NewLine    /// Recursively traverse a tree of controls to find the control that has focus, if anyDi2015NewLine    /// </summary>Di2015NewLine    /// <param name="c">The control to search, might be a control container</param>Di2015NewLine    /// <returns>The control that either has focus or contains the control that has focus</returns>Di2015NewLine    private Control FindFocus(Control c) Di2015NewLine    {Di2015NewLine        foreach (Control k in c.Controls)Di2015NewLine        {Di2015NewLine            if (k.Focused)Di2015NewLine            {Di2015NewLine                return k;Di2015NewLine            }Di2015NewLine            else if (k.ContainsFocus)Di2015NewLine            {Di2015NewLine                return FindFocus(k);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return null;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void copyToolStripMenuItem_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Form f = this.ActiveMdiChild;Di2015NewLineDi2015NewLine        // Find the control that has focusDi2015NewLine        Control focusedControl = FindFocus(f.ActiveControl);Di2015NewLineDi2015NewLine        // See if focusedControl is of a type that can select text/dataDi2015NewLine        if (focusedControl is TextBox)Di2015NewLine        {Di2015NewLine            TextBox tb = focusedControl as TextBox;Di2015NewLine            Clipboard.SetDataObject(tb.SelectedText);Di2015NewLine        }Di2015NewLine        else if (focusedControl is DataGridView)Di2015NewLine        {Di2015NewLine            DataGridView dgv = focusedControl  as DataGridView;Di2015NewLine            Clipboard.SetDataObject(dgv.GetClipboardContent());Di2015NewLine        }Di2015NewLine        else if (...more?...)Di2015NewLine        {Di2015NewLine        }Di2015NewLine    }Di2015NewLine
63628Di2015UniqueSeparatorsetDi2015NewLine{ Di2015NewLine  _name = value; Di2015NewLine  NotifyPropertyChanged("Name"); Di2015NewLine}Di2015NewLine
63725Di2015UniqueSeparatorIQueryable<Log> matches = m_Locator.Logs;Di2015NewLineDi2015NewLine// Users filterDi2015NewLineif (usersFilter)Di2015NewLine    matches = matches.Where(l => l.UserName == comboBoxUsers.Text);Di2015NewLineDi2015NewLine // Severity filterDi2015NewLine if (severityFilter)Di2015NewLine     matches = matches.Where(l => l.Severity == comboBoxSeverity.Text);Di2015NewLineDi2015NewLine Logs = (from log in matchesDi2015NewLine         orderby log.EventTime descendingDi2015NewLine         select log).ToList();Di2015NewLine
64142Di2015UniqueSeparator    abstract class MathProvider<T>Di2015NewLine    {Di2015NewLine        public abstract T Divide(T a, T b);Di2015NewLine        public abstract T Multiply(T a, T b);Di2015NewLine        public abstract T Add(T a, T b);Di2015NewLine        public abstract T Negate(T a);Di2015NewLine        public virtual T Subtract(T a, T b)Di2015NewLine        {Di2015NewLine            return Add(a, Negate(b));Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    class DoubleMathProvider : MathProvider<double>Di2015NewLine    {Di2015NewLine        public override double Divide(double a, double b)Di2015NewLine        {Di2015NewLine            return a / b;Di2015NewLine        }Di2015NewLineDi2015NewLine        public override double Multiply(double a, double b)Di2015NewLine        {Di2015NewLine            return a * b;Di2015NewLine        }Di2015NewLineDi2015NewLine        public override double Add(double a, double b)Di2015NewLine        {Di2015NewLine            return a + b;Di2015NewLine        }Di2015NewLineDi2015NewLine        public override double Negate(double a)Di2015NewLine        {Di2015NewLine            return -a;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    class IntMathProvider : MathProvider<int>Di2015NewLine    {Di2015NewLine        public override int Divide(int a, int b)Di2015NewLine        {Di2015NewLine            return a / b;Di2015NewLine        }Di2015NewLineDi2015NewLine        public override int Multiply(int a, int b)Di2015NewLine        {Di2015NewLine            return a * b;Di2015NewLine        }Di2015NewLineDi2015NewLine        public override int Add(int a, int b)Di2015NewLine        {Di2015NewLine            return a + b;Di2015NewLine        }Di2015NewLineDi2015NewLine        public override int Negate(int a)Di2015NewLine        {Di2015NewLine            return -a;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    class Fraction<T>Di2015NewLine    {Di2015NewLine        static MathProvider<T> _math;Di2015NewLine        // Notice this is a type constructor.  It gets run the first time aDi2015NewLine        // variable of a specific type is declared for use.Di2015NewLine        // Having _math static reduces overhead.Di2015NewLine        static Fraction()Di2015NewLine        {Di2015NewLine            // This part of the code might be cleaner by onceDi2015NewLine            // using reflection and finding all the implementors ofDi2015NewLine            // MathProvider and assigning the instance by the one thatDi2015NewLine            // matches T.Di2015NewLine            if (typeof(T) == typeof(double))Di2015NewLine                _math = new DoubleMathProvider() as MathProvider<T>;Di2015NewLine            else if (typeof(T) == typeof(int))Di2015NewLine                _math = new IntMathProvider() as MathProvider<T>;Di2015NewLine            // ... assign other options here.Di2015NewLineDi2015NewLine            if (_math == null)Di2015NewLine                throw new InvalidOperationException(Di2015NewLine                    "Type " + typeof(T).ToString() + " is not supported by Fraction.");Di2015NewLine        }Di2015NewLineDi2015NewLine        // Immutable impementations are better.Di2015NewLine        public T Numerator { get; private set; }Di2015NewLine        public T Denominator { get; private set; }Di2015NewLineDi2015NewLine        public Fraction(T numerator, T denominator)Di2015NewLine        {Di2015NewLine            // We would want this to be reduced to simpilest terms.Di2015NewLine            // For that we would need GCD, abs, and remainder operationsDi2015NewLine            // defined for each math provider.Di2015NewLine            Numerator = numerator;Di2015NewLine            Denominator = denominator;Di2015NewLine        }Di2015NewLineDi2015NewLine        public static Fraction<T> operator +(Fraction<T> a, Fraction<T> b)Di2015NewLine        {Di2015NewLine            return new Fraction<T>(Di2015NewLine                _math.Add(Di2015NewLine                  _math.Multiply(a.Numerator, b.Denominator),Di2015NewLine                  _math.Multiply(b.Numerator, a.Denominator)),Di2015NewLine                _math.Multiply(a.Denominator, b.Denominator));Di2015NewLine        }Di2015NewLineDi2015NewLine        public static Fraction<T> operator -(Fraction<T> a, Fraction<T> b)Di2015NewLine        {Di2015NewLine            return new Fraction<T>(Di2015NewLine                _math.Subtract(Di2015NewLine                  _math.Multiply(a.Numerator, b.Denominator),Di2015NewLine                  _math.Multiply(b.Numerator, a.Denominator)),Di2015NewLine                _math.Multiply(a.Denominator, b.Denominator));Di2015NewLine        }Di2015NewLineDi2015NewLine        public static Fraction<T> operator /(Fraction<T> a, Fraction<T> b)Di2015NewLine        {Di2015NewLine            return new Fraction<T>(Di2015NewLine                _math.Multiply(a.Numerator, b.Denominator),Di2015NewLine                _math.Multiply(a.Denominator, b.Numerator));Di2015NewLine        }Di2015NewLineDi2015NewLine        // ... other operators would follow.Di2015NewLine    }Di2015NewLine
64142Di2015UniqueSeparatorMathProvider<T>
64142Di2015UniqueSeparatorFraction<T>
64167Di2015UniqueSeparator    private void UpdateFont()Di2015NewLine    {Di2015NewLine        //Change cell fontDi2015NewLine        foreach(DataGridViewColumn c in dgAssets.Columns)Di2015NewLine        {Di2015NewLine            c.DefaultCellStyle.Font = new Font("Arial", 8.5F, GraphicsUnit.Pixel);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
64507Di2015UniqueSeparatorSetStyle(ControlStyles.OptimizedDoubleBuffer | Di2015NewLine         ControlStyles.UserPaint |Di2015NewLine         ControlStyles.AllPaintingInWmPaint, true);Di2015NewLine
64662Di2015UniqueSeparatorDouble.Parse("1.234567E-06", System.Globalization.NumberStyles.Float);Di2015NewLine
64713Di2015UniqueSeparatorvoid foo(const char *);Di2015NewLine
65445Di2015UniqueSeparatorif (object.Equals(myArgument, default(T)))Di2015NewLine{Di2015NewLine    //...Di2015NewLine}Di2015NewLine
65445Di2015UniqueSeparatorstatic object.Equals()
65445Di2015UniqueSeparatornull
65445Di2015UniqueSeparatorobject.
65445Di2015UniqueSeparatorstatic
66595Di2015UniqueSeparatorint line = textbox.GetLineFromCharIndex(textbox.SelectionStart);Di2015NewLineint column = textbox.SelectionStart - textbox.GetFirstCharIndexFromLine(line);Di2015NewLine
66625Di2015UniqueSeparatorcscript adplus.vbs -crash -pn w3wp.exeDi2015NewLine
66625Di2015UniqueSeparator.loadby sos mscorwksDi2015NewLine
66625Di2015UniqueSeparator!clrstackDi2015NewLine
66625Di2015UniqueSeparatorkpn 200Di2015NewLine
66710Di2015UniqueSeparatorprivate static bool IsIngredientPresent(IngredientBag i, string ingredientType, string ingredient)Di2015NewLine{Di2015NewLine    return i != null && i.Contains(ingredientType) && i.Get(ingredientType).Contains(ingredient);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static Expression<Func<Potion, bool>>Di2015NewLine\\\\ContainsIngredients(string ingredientType, params string[] ingredients)Di2015NewLine{Di2015NewLine    var predicate = PredicateBuilder.False<Potion>();Di2015NewLine    // Here, I'm accessing p.Ingredients several times in one Di2015NewLine    // expression.  Is there any way to cache this value andDi2015NewLine    // reference the cached value in the expression?Di2015NewLine    foreach (var ingredient in ingredients)Di2015NewLine    {Di2015NewLine        var temp = ingredient;Di2015NewLine        predicate = predicate.Or(Di2015NewLine            p => IsIngredientPresent(p.Ingredients, ingredientType, temp));Di2015NewLine    }Di2015NewLineDi2015NewLine    return predicate;Di2015NewLine}Di2015NewLine
67321Di2015UniqueSeparatorenum Color{ Red, Green, Yellow, Blue };Di2015NewLineColor c = Color.Red;Di2015NewLine
67321Di2015UniqueSeparatorc
67321Di2015UniqueSeparatorRed
67321Di2015UniqueSeparatorGreen
67321Di2015UniqueSeparatorYellow
67321Di2015UniqueSeparatorBlue
67321Di2015UniqueSeparatorenum Cell<T>{ Di2015NewLine  empty; Di2015NewLine  cons( item : T, next : Cell<T> )Di2015NewLine}Di2015NewLineDi2015NewLineCell<int> c = <I don't know>;Di2015NewLine
67321Di2015UniqueSeparatorc
67321Di2015UniqueSeparatorempty
67321Di2015UniqueSeparatorcons(item, next)
67321Di2015UniqueSeparatoritem
67321Di2015UniqueSeparatorT
67321Di2015UniqueSeparatornext
67321Di2015UniqueSeparatorCell<T>
67321Di2015UniqueSeparatornew { Name='Joe'}
67321Di2015UniqueSeparatoritem
67321Di2015UniqueSeparatornext
67321Di2015UniqueSeparatorswitch( c ) {Di2015NewLine  case empty : 0;Di2015NewLine  case cons(item,next): 1 + cell_length(next);Di2015NewLine}Di2015NewLine
67321Di2015UniqueSeparator#define Red 1
67321Di2015UniqueSeparatorColor
67321Di2015UniqueSeparatorpublic interface ICell<T> {Di2015NewLine   T Item{ get; set; }Di2015NewLine   ICell<T>{ get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineclass Cons<T> : ICell<T> {Di2015NewLine  public T Item{ get; set; } /* C#3 auto-backed property */Di2015NewLine  public Cell<T> Next{ get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineclass EmptyCell<T> : ICell<T>{Di2015NewLine  public T Item{ get{ return default(T); set{ /* do nothing */ }; }Di2015NewLine  public ICell<T> Next{ get{ return null }; set{ /* do nothing */; }Di2015NewLine}Di2015NewLine
67321Di2015UniqueSeparatorList<ICell<T>>
67321Di2015UniqueSeparatorEmptyCell
67321Di2015UniqueSeparatorNext
67321Di2015UniqueSeparatorEmptyCell
67321Di2015UniqueSeparatorempty
67321Di2015UniqueSeparatorCons
67321Di2015UniqueSeparatorEmptyCell
67321Di2015UniqueSeparatorCons
67530Di2015UniqueSeparatorstring elementTypeName = Console.ReadLine();Di2015NewLineType elementType = Type.GetType(elementTypeName);Di2015NewLineType[] types = new Type[] { elementType };Di2015NewLineDi2015NewLineType listType = typeof(List<>);Di2015NewLineType genericType = listType.MakeGenericType(types);Di2015NewLineIProxy  proxy = (IProxy)Activator.CreateInstance(genericType);Di2015NewLine
67696Di2015UniqueSeparatords.select(DBDate = '15 Sep 2008')Di2015NewLine
68036Di2015UniqueSeparatorvar numbers = Enumerable.Range(0, n).Select(i => i * 3 + 9);Di2015NewLine
68681Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinenamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            MyStr m = new MyStr();Di2015NewLine            m.Foo();Di2015NewLineDi2015NewLine            MyStr.MyStrInner mi = new MyStr.MyStrInner();Di2015NewLine            mi.Bar();Di2015NewLineDi2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class MyclassDi2015NewLine    {Di2015NewLine        public int a;Di2015NewLine    }Di2015NewLineDi2015NewLine    struct MyStrDi2015NewLine    {Di2015NewLine        Myclass mc;Di2015NewLineDi2015NewLine        public void Foo()Di2015NewLine        {Di2015NewLine            mc = new Myclass();Di2015NewLine            mc.a = 1;Di2015NewLine        }Di2015NewLineDi2015NewLine        public class MyStrInnerDi2015NewLine        {Di2015NewLine            string x = "abc";Di2015NewLineDi2015NewLine            public string Bar()Di2015NewLine            {Di2015NewLine                return x;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
68772Di2015UniqueSeparatornamespace System.Web.MvcDi2015NewLine{Di2015NewLine    public static class ViewPageExtensionsDi2015NewLine    {Di2015NewLine        public static string GetDefaultPageTitle<T>(this ViewPage<T> v)Di2015NewLine        {Di2015NewLine            return "";Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
69372Di2015UniqueSeparatorprivate void Form1_KeyPress(object sender, KeyPressEventArgs e)Di2015NewLine{Di2015NewLine     if(e.KeyChar == 'm')Di2015NewLine         this.WindowState = FormWindowState.Minimized;Di2015NewLine}Di2015NewLine
69769Di2015UniqueSeparatorvar q  = from date in allDates Di2015NewLine         group date by date.Year into datesByYearDi2015NewLine         select datesByYear.ToList();Di2015NewLineq.ToList(); //returns List<List<DateTime>>Di2015NewLine
69985Di2015UniqueSeparatorvar meas = new int[] { 3, 6, 9, 12, 15, 18 };Di2015NewLineusing (mocks.Record())Di2015NewLine{Di2015NewLine    int forMockMethod = 0;Di2015NewLine    SetupResult.For(mocked_class.GetValue()).Do(Di2015NewLine    \new Func<int>(() => meas[forMockMethod++])Di2015NewLine    \);Di2015NewLine}Di2015NewLineDi2015NewLineusing(mocks.Playback())Di2015NewLine{Di2015NewLine    foreach (var i in meas)Di2015NewLine    \Assert.AreEqual(i, mocked_class.GetValue());Di2015NewLine}Di2015NewLine
69988Di2015UniqueSeparatorpublic struct MyValueTypeDi2015NewLine{Di2015NewLine    public int Id;Di2015NewLine    public void Swap(ref MyValueType other)Di2015NewLine    {Di2015NewLine        MyValueType temp = this;Di2015NewLine        this = other;Di2015NewLine        other = temp;Di2015NewLine    }Di2015NewLine}Di2015NewLine
70281Di2015UniqueSeparatorDataGridView.Rows.AddRange
70281Di2015UniqueSeparatorDataGridView.Columns.AddRange
70296Di2015UniqueSeparatorApplication.Run(new MainForm());Di2015NewLine
70375Di2015UniqueSeparatorGetHashCode
70375Di2015UniqueSeparatorGetHashCode
70375Di2015UniqueSeparatorGetHashCode
70375Di2015UniqueSeparatorEquals
70375Di2015UniqueSeparatorreturn str1.GetHashCode() ^ str2.GetHashCode() Di2015NewLine
70375Di2015UniqueSeparator^
70436Di2015UniqueSeparatorclass ExampleClassDi2015NewLine{Di2015NewLine    public ExampleClass()Di2015NewLine    {Di2015NewLine        string exampleString = "there is a cat";Di2015NewLine        // Split string on spaces. This will separate all the words in a stringDi2015NewLine        string[] words = exampleString.Split(' ');Di2015NewLine        foreach (string word in words)Di2015NewLine        {Di2015NewLine            Console.WriteLine(word);Di2015NewLine            // thereDi2015NewLine            // isDi2015NewLine            // aDi2015NewLine            // catDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
70901Di2015UniqueSeparatorsales-server:1521/sales.us.acme.com
71099Di2015UniqueSeparatorSystem.IO.Compression
71099Di2015UniqueSeparatorSystem.Security.Cryptography
71141Di2015UniqueSeparatorAPPLSYS.FND_PROFILE_OPTIONS
71141Di2015UniqueSeparatorFND_PROFILE_OPTION_VALUES
71454Di2015UniqueSeparatorusing System.ComponentModel;Di2015NewLineDi2015NewLine[Browsable(false)]Di2015NewLinepublic bool SampleProperty { get; set; }Di2015NewLine
71454Di2015UniqueSeparator<System.ComponentModel.Browsable(False)>Di2015NewLine
71457Di2015UniqueSeparator [Flags]Di2015NewLine    public enum ThreadAccess : intDi2015NewLine    {Di2015NewLine      TERMINATE = (0x0001),Di2015NewLine      SUSPEND_RESUME = (0x0002),Di2015NewLine      GET_CONTEXT = (0x0008),Di2015NewLine      SET_CONTEXT = (0x0010),Di2015NewLine      SET_INFORMATION = (0x0020),Di2015NewLine      QUERY_INFORMATION = (0x0040),Di2015NewLine      SET_THREAD_TOKEN = (0x0080),Di2015NewLine      IMPERSONATE = (0x0100),Di2015NewLine      DIRECT_IMPERSONATION = (0x0200)Di2015NewLine    }Di2015NewLineDi2015NewLine    [DllImport("kernel32.dll")]Di2015NewLine    static extern IntPtr OpenThread(ThreadAccess dwDesiredAccess, bool bInheritHandle, uint dwThreadId);Di2015NewLine    [DllImport("kernel32.dll")]Di2015NewLine    static extern uint SuspendThread(IntPtr hThread);Di2015NewLine    [DllImport("kernel32.dll")]Di2015NewLine    static extern int ResumeThread(IntPtr hThread);Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    private void SuspendProcess(int PID)Di2015NewLine    {Di2015NewLine      Process proc = Process.GetProcessById(PID);Di2015NewLineDi2015NewLine      if (proc.ProcessName == string.Empty)Di2015NewLine        return;Di2015NewLineDi2015NewLine      foreach (ProcessThread pT in proc.Threads)Di2015NewLine      {Di2015NewLine        IntPtr pOpenThread = OpenThread(ThreadAccess.SUSPEND_RESUME, false, (uint)pT.Id);Di2015NewLineDi2015NewLine        if (pOpenThread == IntPtr.Zero)Di2015NewLine        {Di2015NewLine          break;Di2015NewLine        }Di2015NewLineDi2015NewLine        SuspendThread(pOpenThread);Di2015NewLine      }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void ResumeProcess(int PID)Di2015NewLine    {Di2015NewLine      Process proc = Process.GetProcessById(PID);Di2015NewLineDi2015NewLine      if (proc.ProcessName == string.Empty)Di2015NewLine        return;Di2015NewLineDi2015NewLine      foreach (ProcessThread pT in proc.Threads)Di2015NewLine      {Di2015NewLine        IntPtr pOpenThread = OpenThread(ThreadAccess.SUSPEND_RESUME, false, (uint)pT.Id);Di2015NewLineDi2015NewLine        if (pOpenThread == IntPtr.Zero)Di2015NewLine        {Di2015NewLine          break;Di2015NewLine        }Di2015NewLineDi2015NewLine        ResumeThread(pOpenThread);Di2015NewLine      }Di2015NewLine    }Di2015NewLine
72283Di2015UniqueSeparatorPrivate Declare Function SendMessage _Di2015NewLine  Lib "user32" Alias "SendMessageA" _Di2015NewLine  (ByVal handle As IntPtr, ByVal wMsg As Integer, _Di2015NewLine  ByVal wParam As Integer, ByRef lParam As Integer) As IntegerDi2015NewLineDi2015NewLineDi2015NewLinePrivate Sub SetTabStops(ByVal ctlTextBox As TextBox)Di2015NewLineDi2015NewLine  Const EM_SETTABSTOPS As Integer = &HCBSDi2015NewLineDi2015NewLine  Dim tabs() As Integer = {20, 40, 80}Di2015NewLineDi2015NewLine  SendMessage(ctlTextBox.Handle, EM_SETTABSTOPS, _Di2015NewLine    tabs.Length, tabs(0))Di2015NewLineDi2015NewLineEnd SubDi2015NewLine
72283Di2015UniqueSeparatorusing System.Runtime.InteropServices;Di2015NewLine
72283Di2015UniqueSeparator    private const int EM_SETTABSTOPS = 0x00CB;Di2015NewLine    [DllImport("User32.dll", CharSet = CharSet.Auto)]Di2015NewLine    public static extern IntPtr SendMessage(IntPtr h, int msg, int wParam, int[] lParam);Di2015NewLine
72283Di2015UniqueSeparator    private void SetTabStops(TextBox ctlTextBox)Di2015NewLine    {Di2015NewLine        const int EM_SETTABSTOPS = 203;Di2015NewLine        int[] tabs = { 100, 40, 80 };Di2015NewLine        SendMessage(textBox1.Handle, EM_SETTABSTOPS, tabs.Length, tabs);Di2015NewLine    }Di2015NewLine
72283Di2015UniqueSeparator    private void Form1_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        SetTabStops(textBox1);Di2015NewLineDi2015NewLine        textBox1.Text = "Hi\\tWorld";Di2015NewLine    }Di2015NewLine
72550Di2015UniqueSeparatorType theTypeWeWant; // From argument or whateverDi2015NewLineforeach (object o in myCollection)Di2015NewLine{Di2015NewLine    if (theTypeWeWant.IsAssignableFrom(o.GetType))Di2015NewLine         return o;Di2015NewLine}Di2015NewLine
72550Di2015UniqueSeparatorprivate T FindObjectOfType<T>() where T: classDi2015NewLine{Di2015NewLine    foreach(object o in myCollection)Di2015NewLine    {Di2015NewLine        if (o is T)Di2015NewLine             return (T) o;Di2015NewLine    }Di2015NewLine    return null;Di2015NewLine}Di2015NewLine
72651Di2015UniqueSeparatorDi2015NewLine        [Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]Di2015NewLine        public override string TextDi2015NewLine        {Di2015NewLine            get { return _string; }Di2015NewLine            set { _string = value; }Di2015NewLine        }Di2015NewLine
72651Di2015UniqueSeparatorDi2015NewLine        [Editor("System.Windows.Forms.Design.StringArrayEditor, Di2015NewLine         System.Design, Version=2.0.0.0, Di2015NewLine         Culture=neutral, Di2015NewLine         PublicKeyToken=b03f5f7f11d50a3a", Di2015NewLine         typeof(UITypeEditor))]Di2015NewLine        public string[] LinesDi2015NewLine        {Di2015NewLine            get { return _lines; }Di2015NewLine            set { _lines = value; }Di2015NewLine        }Di2015NewLine
72822Di2015UniqueSeparatorpublic Byte[] ConvertToBytes(Char[] source)Di2015NewLine{Di2015NewLine    Byte[] result = new Byte[source.Length * sizeof(Char)];Di2015NewLine    IntPtr tempBuffer = Marshal.AllocHGlobal(result.Length);Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        Marshal.Copy(source, 0, tempBuffer, source.Length);Di2015NewLine        Marshal.Copy(tempBuffer, result, 0, result.Length);Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        Marshal.FreeHGlobal(tempBuffer);Di2015NewLine    }Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
72862Di2015UniqueSeparatorSystem.Globalization.TextInfo.ToTitleCase()
72862Di2015UniqueSeparatorstring text = "john doe";Di2015NewLinestring result = System.Globalization.TextInfo.ToTitleCase(text);Di2015NewLine// Produces "John Doe"Di2015NewLine
72908Di2015UniqueSeparatortreeView.LabelEdit = false;Di2015NewLinetreeView.LabelEdit = true;Di2015NewLine
73007Di2015UniqueSeparatore => e.MoveNext() ? e.Current : nullDi2015NewLine
73077Di2015UniqueSeparator<authentication mode="Forms">Di2015NewLine  <forms name=".ASPXAUTH" requireSSL="true" Di2015NewLine      protection="All" Di2015NewLine      enableCrossAppRedirects="true" />Di2015NewLine</authentication>Di2015NewLine
73077Di2015UniqueSeparator<form id="form1" runat="server">Di2015NewLine  <div>Di2015NewLine    <p><asp:Button ID="btnTransfer" runat="server" Text="Go" PostBackUrl="http://otherapp/" /></p>Di2015NewLine    <input id="hdnStreetCred" runat="server" type="hidden" />Di2015NewLine  </div>Di2015NewLine</form>Di2015NewLine
73077Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    FormsIdentity cIdentity = Page.User.Identity as FormsIdentity;Di2015NewLine    if (cIdentity != null)Di2015NewLine    {Di2015NewLine        this.hdnStreetCred.ID = FormsAuthentication.FormsCookieName;Di2015NewLine        this.hdnStreetCred.Value = FormsAuthentication.Encrypt(((FormsIdentity)User.Identity).Ticket);Di2015NewLine    }Di2015NewLine}Di2015NewLine
73083Di2015UniqueSeparatordelegate(object o){..}
73083Di2015UniqueSeparatorOnLogin
73083Di2015UniqueSeparatordelegate()
73108Di2015UniqueSeparatorSqlConnection
73108Di2015UniqueSeparatorSqlCommand
73108Di2015UniqueSeparatorSystem.Data.SqlClient
73108Di2015UniqueSeparatorSqlCommand
73732Di2015UniqueSeparatorFoo foo1 = null;Di2015NewLineFoo foo2 = new Foo();Di2015NewLineAssert.IsFalse(foo1 == foo2);Di2015NewLineDi2015NewLinepublic static bool operator ==(Foo foo1, Foo foo2) {Di2015NewLine    if (object.ReferenceEquals(null, foo1))Di2015NewLine        return object.ReferenceEquals(null, foo2);Di2015NewLine    return foo1.Equals(foo2);Di2015NewLine}Di2015NewLine
73734Di2015UniqueSeparatorstring sample = ",liger, unicorn, snipe";Di2015NewLinesample = sample.TrimStart(','); // to remove just the first commaDi2015NewLine
73734Di2015UniqueSeparatorsample = sample.Trim().TrimStart(','); // to remove any whitespace and then the first commaDi2015NewLine
73819Di2015UniqueSeparatordelegate Int32 BinaryIntOp(Int32 x, Int32 y);Di2015NewLine
73819Di2015UniqueSeparatorBinaryIntOp sumOfSquares = (a, b) => a*a + b*b;Di2015NewLine
73819Di2015UniqueSeparatorInt32 DiffOfSquares(Int32 x, Int32 y)Di2015NewLine{Di2015NewLine  return x*x - y*y;Di2015NewLine}Di2015NewLineDi2015NewLineFunc<Int32, Int32, Int32> funcPtr = DiffOfSquares;Di2015NewLine
73908Di2015UniqueSeparator.method public hidebysig specialname static int32 get_ExitCode() cil managedDi2015NewLine.method public hidebysig specialname static void set_ExitCode(int32 'value') cil managedDi2015NewLine
73908Di2015UniqueSeparatorif (m.IsSpecialName && (m.Attributes & MethodAttributes.HideBySig) != 0))Di2015NewLine
73976Di2015UniqueSeparatorclass MyTableDi2015NewLine{      int MyNum {get; set;}Di2015NewLine       int YourNum {get; set;}Di2015NewLine       char OneChar {get; set;}Di2015NewLine}Di2015NewLine
73976Di2015UniqueSeparatorclass MyFixedTableDi2015NewLine{      int MyNum {get; set;}Di2015NewLine       int YourNum {get; set;}Di2015NewLine       string OneChar {get; set;}Di2015NewLine   public MyFixedTable(MyTable t)Di2015NewLine   {Di2015NewLine         this,MyNum = t.MyNum;Di2015NewLine         this.YourNum = t.YourNum;Di2015NewLine         this.OneChar = new string(t.OneChar, 1);Di2015NewLine   }Di2015NewLine}Di2015NewLine
73976Di2015UniqueSeparatorvar q = from t in db.MyTableDi2015NewLine        select t;Di2015NewLine
73976Di2015UniqueSeparatorvar q = from t in db.MyTableDi2015NewLine        select new MyFixTable(t);Di2015NewLine
74049Di2015UniqueSeparatorResponse.AddHeader("content-disposition", @"attachment;filename=""MyFile.pdf""");Di2015NewLine
74169Di2015UniqueSeparatorpublic Image AppendBorder(Image original, int borderWidth)Di2015NewLine{Di2015NewLine    var borderColor = Color.White;Di2015NewLineDi2015NewLine    var newSize = new Size(Di2015NewLine        original.Width + borderWidth * 2,Di2015NewLine        original.Height + borderWidth * 2);Di2015NewLineDi2015NewLine    var img = new Bitmap(newSize.Width, newSize.Height);Di2015NewLine    var g = Graphics.FromImage(img);Di2015NewLineDi2015NewLine    g.Clear(borderColor);Di2015NewLine    g.DrawImage(original, new Point(borderWidth, borderWidth));Di2015NewLine    g.Dispose();Di2015NewLineDi2015NewLine    return img;Di2015NewLine}Di2015NewLine
74169Di2015UniqueSeparatorBitmap
74169Di2015UniqueSeparatorGraphics
74223Di2015UniqueSeparatorstring hexValue = decValue.ToString("X");Di2015NewLine
74223Di2015UniqueSeparatorint decValue = int.Parse(hexValue, System.Globalization.NumberStyles.HexNumber);Di2015NewLine
74223Di2015UniqueSeparatorint decValue = Convert.ToInt32(hexValue, 16);Di2015NewLine
74495Di2015UniqueSeparatorstring x = "123" + 45;Di2015NewLine
74495Di2015UniqueSeparatorString.Concat("123", 45);Di2015NewLine
74948Di2015UniqueSeparatorBackgroundWorker worker = new BackgroundWorker();Di2015NewLineworker.DoWork += delegate { myBClass.DoHardWork(); }Di2015NewLineworker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(SomeOtherMethod);Di2015NewLineworker.RunWorkerAsync();Di2015NewLine
75178Di2015UniqueSeparator       DataTable t;Di2015NewLine       t.Columns.Remove("columnName");Di2015NewLine       t.Columns.RemoveAt(columnIndex);Di2015NewLine
75235Di2015UniqueSeparator<%$ resources: ResourceKey %>Di2015NewLine
75235Di2015UniqueSeparator<%$ appSettings: AppSettingsKey %>Di2015NewLine
75483Di2015UniqueSeparatorusing (MyResource myRes = new MyResource())Di2015NewLine{Di2015NewLine    myRes.DoSomething();Di2015NewLine}Di2015NewLine
75483Di2015UniqueSeparator{ // limits scope of myResDi2015NewLine    MyResource myRes= new MyResource();Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        myRes.DoSomething();Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        // Check for a null resource.Di2015NewLine        if (myRes!= null)Di2015NewLine            // Call the object's Dispose method.Di2015NewLine            ((IDisposable)myRes).Dispose();Di2015NewLine    }Di2015NewLine}Di2015NewLine
75502Di2015UniqueSeparatorIEnumerable
75502Di2015UniqueSeparatorif (items[key] is IEnumerable)Di2015NewLine
75502Di2015UniqueSeparatorV
75502Di2015UniqueSeparatorIEnumerable`1
75502Di2015UniqueSeparatorIEnumerable<>
75502Di2015UniqueSeparatorstatic bool IsGenericEnumerable(Type t) {Di2015NewLine    var genArgs = t.GetGenericArguments();Di2015NewLine    if (genArgs.Length == 1 &&Di2015NewLine            typeof(IEnumerable<>).MakeGenericType(genArgs).IsAssignableFrom(t))Di2015NewLine        return true;Di2015NewLine    elseDi2015NewLine        return t.BaseType != null && IsGenericEnumerable(t.BaseType);Di2015NewLine}Di2015NewLine
75502Di2015UniqueSeparatorvar xs = new List<string>();Di2015NewLinevar ys = new System.Collections.ArrayList();Di2015NewLineConsole.WriteLine(IsGenericEnumerable(xs.GetType()));Di2015NewLineConsole.WriteLine(IsGenericEnumerable(ys.GetType()));Di2015NewLine
75502Di2015UniqueSeparatorTrueDi2015NewLineFalseDi2015NewLine
75502Di2015UniqueSeparatoris
75502Di2015UniqueSeparatorIsAssignableToGenericType
75502Di2015UniqueSeparatorpublic static bool IsAssignableToGenericType(Type givenType, Type genericType) {Di2015NewLine    var interfaceTypes = givenType.GetInterfaces();Di2015NewLineDi2015NewLine    foreach (var it in interfaceTypes)Di2015NewLine        if (it.IsGenericType)Di2015NewLine            if (it.GetGenericTypeDefinition() == genericType) return true;Di2015NewLineDi2015NewLine    Type baseType = givenType.BaseType;Di2015NewLine    if (baseType == null) return false;Di2015NewLineDi2015NewLine    return baseType.IsGenericType &&Di2015NewLine        baseType.GetGenericTypeDefinition() == genericType ||Di2015NewLine        IsAssignableToGenericType(baseType, genericType);Di2015NewLine}Di2015NewLine
75502Di2015UniqueSeparatorgenericType
75502Di2015UniqueSeparatorgivenType
75502Di2015UniqueSeparatorIsAssignableToGenericType(typeof(List<int>), typeof(List<>)) == falseDi2015NewLineIsAssignableToGenericType(typeof(int?), typeof(Nullable<>)) == falseDi2015NewLine
75755Di2015UniqueSeparatorusing (FileStream fs = new FileStream("c:\\file.txt", FileMode.Open))Di2015NewLineusing (BufferedStream bs = new BufferedStream(fs))Di2015NewLineusing (StreamReader sr = new StreamReader(bs))Di2015NewLine{Di2015NewLine    // all three get disposed when you're doneDi2015NewLine}Di2015NewLine
75822Di2015UniqueSeparatorEmployeeNumber =Di2015NewLine    string.IsNullOrEmpty(employeeNumberTextBox.Text)Di2015NewLine    ? (int?)nullDi2015NewLine    : Convert.ToInt32(employeeNumberTextBox.Text),Di2015NewLine
75822Di2015UniqueSeparatorEmployeeNumber =Di2015NewLine    string.IsNullOrEmpty(employeeNumberTextBox.Text)Di2015NewLine    ? nullDi2015NewLine    : (int?)Convert.ToInt32(employeeNumberTextBox.Text),Di2015NewLine
76085Di2015UniqueSeparatorusing System.Configuration;    Di2015NewLineDi2015NewLineConfiguration config =Di2015NewLineConfigurationManager.OpenExeConfiguration("C:\\Test.exe");Di2015NewLine
77233Di2015UniqueSeparatorpublic static void SetDoubleBuffered(System.Windows.Forms.Control c)Di2015NewLine{Di2015NewLine   //Taxes: Remote Desktop Connection and paintingDi2015NewLine   //http://blogs.msdn.com/oldnewthing/archive/2006/01/03/508694.aspxDi2015NewLine   if (System.Windows.Forms.SystemInformation.TerminalServerSession)Di2015NewLine      return;Di2015NewLineDi2015NewLine   System.Reflection.PropertyInfo aProp = Di2015NewLine         typeof(System.Windows.Forms.Control).GetProperty(Di2015NewLine               "DoubleBuffered", Di2015NewLine               System.Reflection.BindingFlags.NonPublic | Di2015NewLine               System.Reflection.BindingFlags.Instance);Di2015NewLineDi2015NewLine   aProp.SetValue(c, true, null); Di2015NewLine}Di2015NewLine
78292Di2015UniqueSeparatorProcess.Start(@"C:\\Program Files\\Microsoft Office\\Officexx\\excel.exe", "yourfile.xml");Di2015NewLine
78612Di2015UniqueSeparatorICloneable
78612Di2015UniqueSeparatorusing System;Di2015NewLineusing System.IO;Di2015NewLineusing System.Runtime.Serialization;Di2015NewLineusing System.Runtime.Serialization.Formatters.Binary;Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspxDi2015NewLine/// Provides a method for performing a deep copy of an object.Di2015NewLine/// Binary Serialization is used to perform the copy.Di2015NewLine/// </summary>Di2015NewLinepublic static class ObjectCopierDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Perform a deep Copy of the object.Di2015NewLine    /// </summary>Di2015NewLine    /// <typeparam name="T">The type of object being copied.</typeparam>Di2015NewLine    /// <param name="source">The object instance to copy.</param>Di2015NewLine    /// <returns>The copied object.</returns>Di2015NewLine    public static T Clone<T>(T source)Di2015NewLine    {Di2015NewLine        if (!typeof(T).IsSerializable)Di2015NewLine        {Di2015NewLine            throw new ArgumentException("The type must be serializable.", "source");Di2015NewLine        }Di2015NewLineDi2015NewLine        // Don't serialize a null object, simply return the default for that objectDi2015NewLine        if (Object.ReferenceEquals(source, null))Di2015NewLine        {Di2015NewLine            return default(T);Di2015NewLine        }Di2015NewLineDi2015NewLine        IFormatter formatter = new BinaryFormatter();Di2015NewLine        Stream stream = new MemoryStream();Di2015NewLine        using (stream)Di2015NewLine        {Di2015NewLine            formatter.Serialize(stream, source);Di2015NewLine            stream.Seek(0, SeekOrigin.Begin);Di2015NewLine            return (T)formatter.Deserialize(stream);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
78612Di2015UniqueSeparatorpublic static T Clone<T>(this T source)Di2015NewLine{Di2015NewLine   //...Di2015NewLine}Di2015NewLine
78612Di2015UniqueSeparatorobjectBeingCloned.Clone();
79205Di2015UniqueSeparatorEnumWindowsProc
79205Di2015UniqueSeparatorGetWindowThreadProcessId
79205Di2015UniqueSeparatorIsWindowVisible
79205Di2015UniqueSeparatorGetWindowCaption
79205Di2015UniqueSeparatorGetWindowTextLength
79205Di2015UniqueSeparatorhWnd
79675Di2015UniqueSeparator[ DesignerSerializationVisibility( DesignerSerializationVisibility.Hidden ),Di2015NewLine  EditorBrowsable( EditorBrowsableState.Advanced ),Di2015NewLine  Browsable( false ) ]Di2015NewLinepublic BindingContext BindingContext {Di2015NewLine    ...Di2015NewLine}Di2015NewLineDi2015NewLine[ ParenthesizePropertyName( true ),Di2015NewLine  RefreshProperties( RefreshProperties.All ),Di2015NewLine  DesignerSerializationVisibility( DesignerSerializationVisibility.Content ),Di2015NewLine  Category( "Data" ) ]Di2015NewLinepublic ControlBindingsCollection DataBindings {Di2015NewLine   ...Di2015NewLine}Di2015NewLine
79794Di2015UniqueSeparator#define TreeView_SetItemState(hwndTV, hti, data, _mask) \\Di2015NewLine{ TVITEM _ms_TVi;\\Di2015NewLine  _ms_TVi.mask = TVIF_STATE; \\Di2015NewLine  _ms_TVi.hItem = (hti); \\Di2015NewLine  _ms_TVi.stateMask = (_mask);\\Di2015NewLine  _ms_TVi.state = (data);\\Di2015NewLine  SNDMSG((hwndTV), TVM_SETITEM, 0, (LPARAM)(TV_ITEM *)&_ms_TVi);\\Di2015NewLine}Di2015NewLineDi2015NewLine#define TreeView_SetCheckState(hwndTV, hti, fCheck) \\Di2015NewLine  TreeView_SetItemState(hwndTV, hti, INDEXTOSTATEIMAGEMASK((fCheck)?2:1), TVIS_STATEIMAGEMASK)Di2015NewLine
79794Di2015UniqueSeparatorstatic class Interop {Di2015NewLineDi2015NewLinepublic static IntPtr TreeView_SetCheckState(HandleRef hwndTV, IntPtr hti, bool fCheck) {Di2015NewLine    return TreeView_SetItemState(hwndTV, hti, INDEXTOSTATEIMAGEMASK((fCheck) ? 2 : 1), (uint)TVIS.TVIS_STATEIMAGEMASK);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static IntPtr TreeView_SetItemState(HandleRef hwndTV, IntPtr hti, uint data, uint _mask) {Di2015NewLine    TVITEM _ms_TVi = new TVITEM();Di2015NewLine    _ms_TVi.mask = (uint)TVIF.TVIF_STATE;Di2015NewLine    _ms_TVi.hItem = (hti);Di2015NewLine    _ms_TVi.stateMask = (_mask);Di2015NewLine    _ms_TVi.state = (data);Di2015NewLine    IntPtr p = Marshal.AllocCoTaskMem(Marshal.SizeOf(_ms_TVi));Di2015NewLine    Marshal.StructureToPtr(_ms_TVi, p, false);Di2015NewLine    IntPtr r = SendMessage(hwndTV, (int)TVM.TVM_SETITEMW, IntPtr.Zero, p);Di2015NewLine    Marshal.FreeCoTaskMem(p);Di2015NewLine    return r;Di2015NewLine}Di2015NewLineDi2015NewLineprivate static uint INDEXTOSTATEIMAGEMASK(int i) { return ((uint)(i) << 12); }Di2015NewLineDi2015NewLine[DllImport("user32.dll", CharSet = CharSet.Auto)]Di2015NewLineprivate static extern IntPtr SendMessage(HandleRef hWnd, int msg, IntPtr wParam, IntPtr lParam);Di2015NewLineDi2015NewLineprivate enum TVIF : uint {Di2015NewLine    TVIF_STATE = 0x0008Di2015NewLine}Di2015NewLineDi2015NewLineprivate enum TVIS : uint {Di2015NewLine    TVIS_STATEIMAGEMASK = 0xF000Di2015NewLine}Di2015NewLineDi2015NewLineprivate enum TVM : int {Di2015NewLine    TV_FIRST = 0x1100,Di2015NewLine    TVM_SETITEMA = (TV_FIRST + 13),Di2015NewLine    TVM_SETITEMW = (TV_FIRST + 63)Di2015NewLine}Di2015NewLineDi2015NewLineprivate struct TVITEM {Di2015NewLine    public uint mask;Di2015NewLine    public IntPtr hItem;Di2015NewLine    public uint state;Di2015NewLine    public uint stateMask;Di2015NewLine    public IntPtr pszText;Di2015NewLine    public int cchTextMax;Di2015NewLine    public int iImage;Di2015NewLine    public int iSelectedImage;Di2015NewLine    public int cChildren;Di2015NewLine    public IntPtr lParam;Di2015NewLine}Di2015NewLine}Di2015NewLine
79903Di2015UniqueSeparatorEnum
79903Di2015UniqueSeparatorpublic T GetEnumFromString<T>(string value) where T : struct, IConvertibleDi2015NewLine{Di2015NewLine   if (!typeof(T).IsEnum) Di2015NewLine   {Di2015NewLine      throw new ArgumentException("T must be an enumerated type");Di2015NewLine   }Di2015NewLineDi2015NewLine   //...Di2015NewLine}Di2015NewLine
81047Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            FolderBrowserDialog profilePath = new FolderBrowserDialog();Di2015NewLineDi2015NewLine            if (profilePath.ShowDialog() == DialogResult.OK)Di2015NewLine            {Di2015NewLine                profilePathTextBox.Text = profilePath.SelectedPath;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                profilePathTextBox.Text = "Please Specify The Profile Path";Di2015NewLine            }Di2015NewLine
81171Di2015UniqueSeparatorusing System;Di2015NewLineusing C=System.Console;Di2015NewLineDi2015NewLinenamespace FooDi2015NewLine{Di2015NewLine    public class BarDi2015NewLine    {Di2015NewLine    \public static void Main(string[] args)Di2015NewLine    \{Di2015NewLine    \\myImplementationOfTest miot = new myImplementationOfTest();Di2015NewLine    \\miot.myVirtualMethod();Di2015NewLine    \\miot.myOtherVirtualMethod();Di2015NewLine    \\miot.myProperty = 42;Di2015NewLine    \\miot.myAbstractMethod();Di2015NewLine    \}Di2015NewLine    }Di2015NewLineDi2015NewLine    public abstract class testDi2015NewLine    {Di2015NewLine    \public abstract int myPropertyDi2015NewLine    \{Di2015NewLine    \\get;Di2015NewLine    \\set;Di2015NewLine    \}Di2015NewLineDi2015NewLine    \public abstract void myAbstractMethod();Di2015NewLineDi2015NewLine    \public virtual void myVirtualMethod()Di2015NewLine    \{Di2015NewLine    \\C.WriteLine("foo");Di2015NewLine    \}Di2015NewLineDi2015NewLine    \public virtual void myOtherVirtualMethod()Di2015NewLine    \{Di2015NewLine    \}Di2015NewLine    }Di2015NewLineDi2015NewLine    public class myImplementationOfTest : testDi2015NewLine    {Di2015NewLine    \private int _foo;Di2015NewLine    \public override int myPropertyDi2015NewLine    \{Di2015NewLine    \\get { return _foo; }Di2015NewLine    \\set { _foo = value; }Di2015NewLine    \}Di2015NewLineDi2015NewLine    \public override void myAbstractMethod()Di2015NewLine    \{Di2015NewLine    \\C.WriteLine(myProperty);Di2015NewLine    \}Di2015NewLineDi2015NewLine    \public override void myOtherVirtualMethod()Di2015NewLine    \{Di2015NewLine    \\C.WriteLine("bar");Di2015NewLine    \}Di2015NewLine    }Di2015NewLine}Di2015NewLine
82013Di2015UniqueSeparator (BInteger)torrent["info"][0]["files"]["length"];Di2015NewLine
82408Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Text;Di2015NewLineusing System.Runtime.InteropServices;Di2015NewLineDi2015NewLinenamespace SoundDi2015NewLine{Di2015NewLine    public static class SoundInfoDi2015NewLine    {Di2015NewLine        [DllImport("winmm.dll")]Di2015NewLine        private static extern uint mciSendString(Di2015NewLine            string command,Di2015NewLine            StringBuilder returnValue,Di2015NewLine            int returnLength,Di2015NewLine            IntPtr winHandle);Di2015NewLineDi2015NewLine        public static int GetSoundLength(string fileName)Di2015NewLine        {Di2015NewLine            StringBuilder lengthBuf = new StringBuilder(32);Di2015NewLineDi2015NewLine            mciSendString(string.Format("open \\"{0}\\" type waveaudio alias wave", fileName), null, 0, IntPtr.Zero);Di2015NewLine            mciSendString("status wave length", lengthBuf, lengthBuf.Capacity, IntPtr.Zero);Di2015NewLine            mciSendString("close wave", null, 0, IntPtr.Zero);Di2015NewLineDi2015NewLine            int length = 0;Di2015NewLine            int.TryParse(lengthBuf.ToString(), out length);Di2015NewLineDi2015NewLine            return length;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
82473Di2015UniqueSeparatorpublic class BarProviderDi2015NewLine{ BaseClass _source;Di2015NewLine  Bar _currentBar;Di2015NewLineDi2015NewLine  public void setSource(BaseClass b)Di2015NewLine  {Di2015NewLine    _source = b;Di2015NewLine    _currentBar = b.Bar;Di2015NewLine  }Di2015NewLineDi2015NewLine  public Bar getBar()Di2015NewLine  { return _currentBar;  }Di2015NewLine}Di2015NewLine
83055Di2015UniqueSeparatorSortedList sCol = new SortedList();Di2015NewLineDi2015NewLinesCol.Add("bee", "Some extended string matching bee");Di2015NewLinesCol.Add("ay", "value matching ay");Di2015NewLinesCol.Add("cee", "Just a standard cee");Di2015NewLineDi2015NewLine// Go through it backwards.Di2015NewLinefor (int i = sCol.Count - 1; i >=0 ; i--)Di2015NewLine    Console.WriteLine("sCol[" + i.ToString() + "] = " + sCol.GetByIndex(i));Di2015NewLineDi2015NewLine// Reference By KeyDi2015NewLineforeach (string i in sCol.Keys)Di2015NewLine    Console.WriteLine("sCol[" + i + "] = " + sCol[i]);Di2015NewLineDi2015NewLine// Enumerate all valuesDi2015NewLineforeach (string i in sCol.Values)Di2015NewLine    Console.WriteLine(i);Di2015NewLine
83265Di2015UniqueSeparator[Serializable]Di2015NewLinepublic struct KeyValuePair<K,V>Di2015NewLine{Di2015NewLine  public K Key {get;set;}Di2015NewLine  public V Value {get;set;}Di2015NewLine}Di2015NewLine
83587Di2015UniqueSeparatorprivate string getWindowsUsername()Di2015NewLine        {Di2015NewLine            AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal);Di2015NewLine            return Thread.CurrentPrincipal.Identity.Name;Di2015NewLine        }Di2015NewLine
83587Di2015UniqueSeparatorif (Thread.CurrentPrincipal.IsInRole("Domain Users") == true)Di2015NewLine{}Di2015NewLine
83667Di2015UniqueSeparatoraNullableDouble = double.TryParse(aString, out aDouble) ? (double?)aDouble : null;Di2015NewLine
83844Di2015UniqueSeparatorpartial void OnCreated()Di2015NewLine{Di2015NewLine  Name = "";Di2015NewLine}Di2015NewLine
84168Di2015UniqueSeparatorpublic class Solver {Di2015NewLineDi2015NewLine    private List<List<decimal>> mResults;Di2015NewLineDi2015NewLine    public List<List<decimal>> Solve(decimal goal, decimal[] elements) {Di2015NewLineDi2015NewLine        mResults = new List<List<decimal>>();Di2015NewLine        RecursiveSolve(goal, 0.0m, Di2015NewLine            new List<decimal>(), new List<decimal>(elements), 0);Di2015NewLine        return mResults; Di2015NewLine    }Di2015NewLineDi2015NewLine    private void RecursiveSolve(decimal goal, decimal currentSum, Di2015NewLine        List<decimal> included, List<decimal> notIncluded, int startIndex) {Di2015NewLineDi2015NewLine        for (int index = startIndex; index < notIncluded.Count; index++) {Di2015NewLineDi2015NewLine            decimal nextValue = notIncluded[index];Di2015NewLine            if (currentSum + nextValue == goal) {Di2015NewLine                List<decimal> newResult = new List<decimal>(included);Di2015NewLine                newResult.Add(nextValue);Di2015NewLine                mResults.Add(newResult);Di2015NewLine            }Di2015NewLine            else if (currentSum + nextValue < goal) {Di2015NewLine                List<decimal> nextIncluded = new List<decimal>(included);Di2015NewLine                nextIncluded.Add(nextValue);Di2015NewLine                List<decimal> nextNotIncluded = new List<decimal>(notIncluded);Di2015NewLine                nextNotIncluded.Remove(nextValue);Di2015NewLine                RecursiveSolve(goal, currentSum + nextValue,Di2015NewLine                    nextIncluded, nextNotIncluded, startIndex++);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
84168Di2015UniqueSeparatorclass Program {Di2015NewLine    static void Main(string[] args) {Di2015NewLineDi2015NewLine        string input;Di2015NewLine        decimal goal;Di2015NewLine        decimal element;Di2015NewLineDi2015NewLine        do {Di2015NewLine            Console.WriteLine("Please enter the goal:");Di2015NewLine            input = Console.ReadLine();Di2015NewLine        }Di2015NewLine        while (!decimal.TryParse(input, out goal));Di2015NewLineDi2015NewLine        Console.WriteLine("Please enter the elements (separated by spaces)");Di2015NewLine        input = Console.ReadLine();Di2015NewLine        string[] elementsText = input.Split(' ');Di2015NewLine        List<decimal> elementsList = new List<decimal>();Di2015NewLine        foreach (string elementText in elementsText) {Di2015NewLine            if (decimal.TryParse(elementText, out element)) {Di2015NewLine                elementsList.Add(element);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        Solver solver = new Solver();Di2015NewLine        List<List<decimal>> results = solver.Solve(goal, elementsList.ToArray());Di2015NewLine        foreach(List<decimal> result in results) {Di2015NewLine            foreach (decimal value in result) {Di2015NewLine                Console.Write("{0}\\t", value);Di2015NewLine            }Di2015NewLine            Console.WriteLine();Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLine
84406Di2015UniqueSeparatorStreamReader sr = File.OpenText(path);Di2015NewLinestring content = sr.ReadToEnd();Di2015NewLinesr.Close();Di2015NewLine
84406Di2015UniqueSeparatorstring content;Di2015NewLineusing (StreamReader sr = File.OpenText(path)) {Di2015NewLine    content = sr.ReadToEnd();Di2015NewLine}Di2015NewLine
84406Di2015UniqueSeparatorfor (int i=0;i<list.Count; i++) {Di2015NewLine   DoSomething(list[i]);Di2015NewLine}Di2015NewLine
84406Di2015UniqueSeparatorIEnumerator e = list.GetEnumerator();Di2015NewLinedo {Di2015NewLine   DoSomenthing(e.Current);Di2015NewLine} while (e.MoveNext());Di2015NewLine
84406Di2015UniqueSeparatorforeach (Item item in list) {Di2015NewLine   DoSomething(item);Di2015NewLine}Di2015NewLine
84406Di2015UniqueSeparatorList<int> list2 = new List<int>();Di2015NewLinefor (int num in list1) {Di2015NewLine  if (num>100) list2.Add(num);Di2015NewLine}Di2015NewLine
84406Di2015UniqueSeparatorvar list2 = list1.Where(num=>num>100);Di2015NewLine
84410Di2015UniqueSeparatorusing System;Di2015NewLineusing System.IO;Di2015NewLineusing iTextSharp.text.pdf;Di2015NewLineusing System.Text.RegularExpressions;Di2015NewLineDi2015NewLinenamespace Spider.UtilsDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Parses a PDF file and extracts the text from it.Di2015NewLine    /// </summary>Di2015NewLine    public class PDFParserDi2015NewLine    {Di2015NewLine        /// BT = Beginning of a text object operator Di2015NewLine        /// ET = End of a text object operatorDi2015NewLine        /// Td move to the start of next lineDi2015NewLine        ///  5 Ts = superscriptDi2015NewLine        /// -5 Ts = subscriptDi2015NewLineDi2015NewLine        #region FieldsDi2015NewLineDi2015NewLine        #region _numberOfCharsToKeepDi2015NewLine        /// <summary>Di2015NewLine        /// The number of characters to keep, when extracting text.Di2015NewLine        /// </summary>Di2015NewLine        private static int _numberOfCharsToKeep = 15;Di2015NewLine        #endregionDi2015NewLineDi2015NewLine        #endregionDi2015NewLineDi2015NewLine        #region ExtractTextDi2015NewLine        /// <summary>Di2015NewLine        /// Extracts a text from a PDF file.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="inFileName">the full path to the pdf file.</param>Di2015NewLine        /// <param name="outFileName">the output file name.</param>Di2015NewLine        /// <returns>the extracted text</returns>Di2015NewLine        public bool ExtractText(string inFileName, string outFileName)Di2015NewLine        {Di2015NewLine            StreamWriter outFile = null;Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                // Create a reader for the given PDF fileDi2015NewLine                PdfReader reader = new PdfReader(inFileName);Di2015NewLine                //outFile = File.CreateText(outFileName);Di2015NewLine                outFile = new StreamWriter(outFileName, false, System.Text.Encoding.UTF8);Di2015NewLineDi2015NewLine                Console.Write("Processing: ");Di2015NewLineDi2015NewLine                int totalLen = 68;Di2015NewLine                float charUnit = ((float)totalLen) / (float)reader.NumberOfPages;Di2015NewLine                int totalWritten = 0;Di2015NewLine                float curUnit = 0;Di2015NewLineDi2015NewLine                for (int page = 1; page <= reader.NumberOfPages; page++)Di2015NewLine                {Di2015NewLine                    outFile.Write(ExtractTextFromPDFBytes(reader.GetPageContent(page)) + " ");Di2015NewLineDi2015NewLine                    // Write the progress.Di2015NewLine                    if (charUnit >= 1.0f)Di2015NewLine                    {Di2015NewLine                        for (int i = 0; i < (int)charUnit; i++)Di2015NewLine                        {Di2015NewLine                            Console.Write("#");Di2015NewLine                            totalWritten++;Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                    elseDi2015NewLine                    {Di2015NewLine                        curUnit += charUnit;Di2015NewLine                        if (curUnit >= 1.0f)Di2015NewLine                        {Di2015NewLine                            for (int i = 0; i < (int)curUnit; i++)Di2015NewLine                            {Di2015NewLine                                Console.Write("#");Di2015NewLine                                totalWritten++;Di2015NewLine                            }Di2015NewLine                            curUnit = 0;Di2015NewLine                        }Di2015NewLineDi2015NewLine                    }Di2015NewLine                }Di2015NewLineDi2015NewLine                if (totalWritten < totalLen)Di2015NewLine                {Di2015NewLine                    for (int i = 0; i < (totalLen - totalWritten); i++)Di2015NewLine                    {Di2015NewLine                        Console.Write("#");Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                return true;Di2015NewLine            }Di2015NewLine            catchDi2015NewLine            {Di2015NewLine                return false;Di2015NewLine            }Di2015NewLine            finallyDi2015NewLine            {Di2015NewLine                if (outFile != null) outFile.Close();Di2015NewLine            }Di2015NewLine        }Di2015NewLine        #endregionDi2015NewLineDi2015NewLine        #region ExtractTextFromPDFBytesDi2015NewLine        /// <summary>Di2015NewLine        /// This method processes an uncompressed Adobe (text) object Di2015NewLine        /// and extracts text.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="input">uncompressed</param>Di2015NewLine        /// <returns></returns>Di2015NewLine        public string ExtractTextFromPDFBytes(byte[] input)Di2015NewLine        {Di2015NewLine            if (input == null || input.Length == 0) return "";Di2015NewLineDi2015NewLine            tryDi2015NewLine            {Di2015NewLine                string resultString = "";Di2015NewLineDi2015NewLine                // Flag showing if we are we currently inside a text objectDi2015NewLine                bool inTextObject = false;Di2015NewLineDi2015NewLine                // Flag showing if the next character is literal Di2015NewLine                // e.g. '\\\\' to get a '\\' character or '\\(' to get '('Di2015NewLine                bool nextLiteral = false;Di2015NewLineDi2015NewLine                // () Bracket nesting level. Text appears inside ()Di2015NewLine                int bracketDepth = 0;Di2015NewLineDi2015NewLine                // Keep previous chars to get extract numbers etc.:Di2015NewLine                char[] previousCharacters = new char[_numberOfCharsToKeep];Di2015NewLine                for (int j = 0; j < _numberOfCharsToKeep; j++) previousCharacters[j] = ' ';Di2015NewLineDi2015NewLineDi2015NewLine                for (int i = 0; i < input.Length; i++)Di2015NewLine                {Di2015NewLine                    char c = (char)input[i];Di2015NewLine                    if (input[i] == 213)Di2015NewLine                        c = "'".ToCharArray()[0];Di2015NewLineDi2015NewLine                    if (inTextObject)Di2015NewLine                    {Di2015NewLine                        // Position the textDi2015NewLine                        if (bracketDepth == 0)Di2015NewLine                        {Di2015NewLine                            if (CheckToken(new string[] { "TD", "Td" }, previousCharacters))Di2015NewLine                            {Di2015NewLine                                resultString += "\\n\\r";Di2015NewLine                            }Di2015NewLine                            elseDi2015NewLine                            {Di2015NewLine                                if (CheckToken(new string[] { "'", "T*", "\\"" }, previousCharacters))Di2015NewLine                                {Di2015NewLine                                    resultString += "\\n";Di2015NewLine                                }Di2015NewLine                                elseDi2015NewLine                                {Di2015NewLine                                    if (CheckToken(new string[] { "Tj" }, previousCharacters))Di2015NewLine                                    {Di2015NewLine                                        resultString += " ";Di2015NewLine                                    }Di2015NewLine                                }Di2015NewLine                            }Di2015NewLine                        }Di2015NewLineDi2015NewLine                        // End of a text object, also go to a new line.Di2015NewLine                        if (bracketDepth == 0 &&Di2015NewLine                            CheckToken(new string[] { "ET" }, previousCharacters))Di2015NewLine                        {Di2015NewLineDi2015NewLine                            inTextObject = false;Di2015NewLine                            resultString += " ";Di2015NewLine                        }Di2015NewLine                        elseDi2015NewLine                        {Di2015NewLine                            // Start outputting textDi2015NewLine                            if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))Di2015NewLine                            {Di2015NewLine                                bracketDepth = 1;Di2015NewLine                            }Di2015NewLine                            elseDi2015NewLine                            {Di2015NewLine                                // Stop outputting textDi2015NewLine                                if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))Di2015NewLine                                {Di2015NewLine                                    bracketDepth = 0;Di2015NewLine                                }Di2015NewLine                                elseDi2015NewLine                                {Di2015NewLine                                    // Just a normal text character:Di2015NewLine                                    if (bracketDepth == 1)Di2015NewLine                                    {Di2015NewLine                                        // Only print out next character no matter what. Di2015NewLine                                        // Do not interpret.Di2015NewLine                                        if (c == '\\\\' && !nextLiteral)Di2015NewLine                                        {Di2015NewLine                                            resultString += c.ToString();Di2015NewLine                                            nextLiteral = true;Di2015NewLine                                        }Di2015NewLine                                        elseDi2015NewLine                                        {Di2015NewLine                                            if (((c >= ' ') && (c <= '~')) ||Di2015NewLine                                                ((c >= 128) && (c < 255)))Di2015NewLine                                            {Di2015NewLine                                                resultString += c.ToString();Di2015NewLine                                            }Di2015NewLineDi2015NewLine                                            nextLiteral = false;Di2015NewLine                                        }Di2015NewLine                                    }Di2015NewLine                                }Di2015NewLine                            }Di2015NewLine                        }Di2015NewLine                    }Di2015NewLineDi2015NewLine                    // Store the recent characters for Di2015NewLine                    // when we have to go back for a checkingDi2015NewLine                    for (int j = 0; j < _numberOfCharsToKeep - 1; j++)Di2015NewLine                    {Di2015NewLine                        previousCharacters[j] = previousCharacters[j + 1];Di2015NewLine                    }Di2015NewLine                    previousCharacters[_numberOfCharsToKeep - 1] = c;Di2015NewLineDi2015NewLine                    // Start of a text objectDi2015NewLine                    if (!inTextObject && CheckToken(new string[] { "BT" }, previousCharacters))Di2015NewLine                    {Di2015NewLine                        inTextObject = true;Di2015NewLine                    }Di2015NewLine                }Di2015NewLineDi2015NewLine                return CleanupContent(resultString);Di2015NewLine            }Di2015NewLine            catchDi2015NewLine            {Di2015NewLine                return "";Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private string CleanupContent(string text)Di2015NewLine        {Di2015NewLine            string[] patterns = { @"\\\\\\(", @"\\\\\\)", @"\\\\226", @"\\\\222", @"\\\\223", @"\\\\224", @"\\\\340", @"\\\\342", @"\\\\344", @"\\\\300", @"\\\\302", @"\\\\304", @"\\\\351", @"\\\\350", @"\\\\352", @"\\\\353", @"\\\\311", @"\\\\310", @"\\\\312", @"\\\\313", @"\\\\362", @"\\\\364", @"\\\\366", @"\\\\322", @"\\\\324", @"\\\\326", @"\\\\354", @"\\\\356", @"\\\\357", @"\\\\314", @"\\\\316", @"\\\\317", @"\\\\347", @"\\\\307", @"\\\\371", @"\\\\373", @"\\\\374", @"\\\\331", @"\\\\333", @"\\\\334", @"\\\\256", @"\\\\231", @"\\\\253", @"\\\\273", @"\\\\251", @"\\\\221"};Di2015NewLine            string[] replace = {   "(",     ")",      "-",     "'",      "\\"",      "\\"",    "Ã ",      "Ã¢",      "Ã¤",      "Ã",      "Ã",      "Ã",      "Ã©",      "Ã¨",      "Ãª",      "Ã«",      "Ã",      "Ã",      "Ã",      "Ã",      "Ã²",      "Ã´",      "Ã¶",      "Ã",      "Ã",      "Ã",      "Ã¬",      "Ã®",      "Ã¯",      "Ã",      "Ã",      "Ã?",      "Ã§",      "Ã",      "Ã¹",      "Ã»",      "Ã¼",      "Ã",      "Ã",      "Ã",      "Â®",      "â¢",      "Â«",      "Â»",      "Â©",      "'" };Di2015NewLineDi2015NewLine            for (int i = 0; i < patterns.Length; i++)Di2015NewLine            {Di2015NewLine                string regExPattern = patterns[i];Di2015NewLine                Regex regex = new Regex(regExPattern, RegexOptions.IgnoreCase);Di2015NewLine                text = regex.Replace(text, replace[i]);Di2015NewLine            }Di2015NewLineDi2015NewLine            return text;Di2015NewLine        }Di2015NewLineDi2015NewLine        #endregionDi2015NewLineDi2015NewLine        #region CheckTokenDi2015NewLine        /// <summary>Di2015NewLine        /// Check if a certain 2 character token just came along (e.g. BT)Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="tokens">the searched token</param>Di2015NewLine        /// <param name="recent">the recent character array</param>Di2015NewLine        /// <returns></returns>Di2015NewLine        private bool CheckToken(string[] tokens, char[] recent)Di2015NewLine        {Di2015NewLine            foreach (string token in tokens)Di2015NewLine            {Di2015NewLine                if ((recent[_numberOfCharsToKeep - 3] == token[0]) &&Di2015NewLine                    (recent[_numberOfCharsToKeep - 2] == token[1]) &&Di2015NewLine                    ((recent[_numberOfCharsToKeep - 1] == ' ') ||Di2015NewLine                    (recent[_numberOfCharsToKeep - 1] == 0x0d) ||Di2015NewLine                    (recent[_numberOfCharsToKeep - 1] == 0x0a)) &&Di2015NewLine                    ((recent[_numberOfCharsToKeep - 4] == ' ') ||Di2015NewLine                    (recent[_numberOfCharsToKeep - 4] == 0x0d) ||Di2015NewLine                    (recent[_numberOfCharsToKeep - 4] == 0x0a))Di2015NewLine                    )Di2015NewLine                {Di2015NewLine                    return true;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine        #endregionDi2015NewLine    }Di2015NewLine}Di2015NewLine
84484Di2015UniqueSeparatorclass B : ADi2015NewLineclass C : ADi2015NewLine
84484Di2015UniqueSeparatorList<B> listB;Di2015NewLineList<C> listC;Di2015NewLine
84484Di2015UniqueSeparatorList<A> listA = listB.Cast<A>().Concat(listC.Cast<A>()).ToList()Di2015NewLine
84909Di2015UniqueSeparatorToolStripButton btn = new ToolStripButton("The text on the item.");Di2015NewLinethis.tsmiDelete.DropDownItems.Add(btn);Di2015NewLinebtn.Click += new EventHandler(OnBtnClicked);Di2015NewLine
84909Di2015UniqueSeparatorprivate void OnBtnClicked(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    ToolStripButton btn = sender as ToolStripButton;Di2015NewLineDi2015NewLine    // handle the button clickDi2015NewLine}Di2015NewLine
84987Di2015UniqueSeparatorAppBarFunctions.SetAppBar( this, ABEdge.Right );Di2015NewLine
84987Di2015UniqueSeparatorAppBarFunctions.SetAppBar( this, ABEdge.None );Di2015NewLine
84987Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Runtime.InteropServices;Di2015NewLineusing System.Windows;Di2015NewLineusing System.Windows.Interop;Di2015NewLineusing System.Windows.Threading;Di2015NewLineDi2015NewLinenamespace AppBarApplicationDi2015NewLine{    Di2015NewLine    public enum ABEdge : intDi2015NewLine    {Di2015NewLine        Left = 0,Di2015NewLine        Top,Di2015NewLine        Right,Di2015NewLine        Bottom,Di2015NewLine        NoneDi2015NewLine    }Di2015NewLineDi2015NewLine    internal static class AppBarFunctionsDi2015NewLine    {Di2015NewLine        [StructLayout(LayoutKind.Sequential)]Di2015NewLine        private struct RECTDi2015NewLine        {Di2015NewLine            public int left;Di2015NewLine            public int top;Di2015NewLine            public int right;Di2015NewLine            public int bottom;Di2015NewLine        }Di2015NewLineDi2015NewLine        [StructLayout(LayoutKind.Sequential)]Di2015NewLine        private struct APPBARDATADi2015NewLine        {Di2015NewLine            public int cbSize;Di2015NewLine            public IntPtr hWnd;Di2015NewLine            public int uCallbackMessage;Di2015NewLine            public int uEdge;Di2015NewLine            public RECT rc;Di2015NewLine            public IntPtr lParam;Di2015NewLine        }Di2015NewLineDi2015NewLine        private enum ABMsg : intDi2015NewLine        {Di2015NewLine            ABM_NEW = 0,Di2015NewLine            ABM_REMOVE,Di2015NewLine            ABM_QUERYPOS,Di2015NewLine            ABM_SETPOS,Di2015NewLine            ABM_GETSTATE,Di2015NewLine            ABM_GETTASKBARPOS,Di2015NewLine            ABM_ACTIVATE,Di2015NewLine            ABM_GETAUTOHIDEBAR,Di2015NewLine            ABM_SETAUTOHIDEBAR,Di2015NewLine            ABM_WINDOWPOSCHANGED,Di2015NewLine            ABM_SETSTATEDi2015NewLine        }Di2015NewLine        private enum ABNotify : intDi2015NewLine        {Di2015NewLine            ABN_STATECHANGE = 0,Di2015NewLine            ABN_POSCHANGED,Di2015NewLine            ABN_FULLSCREENAPP,Di2015NewLine            ABN_WINDOWARRANGEDi2015NewLine        }Di2015NewLineDi2015NewLine        [DllImport("SHELL32", CallingConvention = CallingConvention.StdCall)]Di2015NewLine        private static extern uint SHAppBarMessage(int dwMessage, ref APPBARDATA pData);Di2015NewLineDi2015NewLine        [DllImport("User32.dll", CharSet = CharSet.Auto)]Di2015NewLine        private static extern int RegisterWindowMessage(string msg);Di2015NewLineDi2015NewLine        private class RegisterInfoDi2015NewLine        {Di2015NewLine            public int CallbackId { get; set; }Di2015NewLine            public bool IsRegistered { get; set; }Di2015NewLine            public Window Window { get; set; }Di2015NewLine            public ABEdge Edge { get; set; }Di2015NewLine            public WindowStyle OriginalStyle { get; set; }            Di2015NewLine            public Point OriginalPosition { get; set; }Di2015NewLine            public Size OriginalSize { get; set; }Di2015NewLine            public ResizeMode OriginalResizeMode { get; set; }Di2015NewLineDi2015NewLineDi2015NewLine            public IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, Di2015NewLine                                    IntPtr lParam, ref bool handled)Di2015NewLine            {Di2015NewLine                if (msg == CallbackId)Di2015NewLine                {Di2015NewLine                    if (wParam.ToInt32() == (int)ABNotify.ABN_POSCHANGED)Di2015NewLine                    {Di2015NewLine                        ABSetPos(Edge, Window);Di2015NewLine                        handled = true;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                return IntPtr.Zero;Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLine        private static Dictionary<Window, RegisterInfo> s_RegisteredWindowInfo Di2015NewLine            = new Dictionary<Window, RegisterInfo>();Di2015NewLine        private static RegisterInfo GetRegisterInfo(Window appbarWindow)Di2015NewLine        {Di2015NewLine            RegisterInfo reg;Di2015NewLine            if( s_RegisteredWindowInfo.ContainsKey(appbarWindow))Di2015NewLine            {Di2015NewLine                reg = s_RegisteredWindowInfo[appbarWindow];Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                reg = new RegisterInfo()Di2015NewLine                    {Di2015NewLine                        CallbackId = 0,Di2015NewLine                        Window = appbarWindow,Di2015NewLine                        IsRegistered = false,Di2015NewLine                        Edge = ABEdge.Top,Di2015NewLine                        OriginalStyle = appbarWindow.WindowStyle,                        Di2015NewLine                        OriginalPosition =new Point( appbarWindow.Left, appbarWindow.Top),Di2015NewLine                        OriginalSize = Di2015NewLine                            new Size( appbarWindow.ActualWidth, appbarWindow.ActualHeight),Di2015NewLine                        OriginalResizeMode = appbarWindow.ResizeMode,Di2015NewLine                    };Di2015NewLine                s_RegisteredWindowInfo.Add(appbarWindow, reg);Di2015NewLine            }Di2015NewLine            return reg;Di2015NewLine        }Di2015NewLineDi2015NewLine        private static void RestoreWindow(Window appbarWindow)Di2015NewLine        {Di2015NewLine            RegisterInfo info = GetRegisterInfo(appbarWindow);Di2015NewLineDi2015NewLine            appbarWindow.WindowStyle = info.OriginalStyle;            Di2015NewLine            appbarWindow.ResizeMode = info.OriginalResizeMode;Di2015NewLine            appbarWindow.Topmost = false;Di2015NewLineDi2015NewLine            Rect rect = new Rect(info.OriginalPosition.X, info.OriginalPosition.Y, Di2015NewLine                info.OriginalSize.Width, info.OriginalSize.Height);Di2015NewLine            appbarWindow.Dispatcher.BeginInvoke(DispatcherPriority.ApplicationIdle,Di2015NewLine                    new ResizeDelegate(DoResize), appbarWindow, rect);Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        public static void SetAppBar(Window appbarWindow, ABEdge edge)Di2015NewLine        {Di2015NewLine            RegisterInfo info = GetRegisterInfo(appbarWindow);Di2015NewLine            info.Edge = edge;Di2015NewLineDi2015NewLine            APPBARDATA abd = new APPBARDATA();Di2015NewLine            abd.cbSize = Marshal.SizeOf(abd);Di2015NewLine            abd.hWnd = new WindowInteropHelper(appbarWindow).Handle;Di2015NewLineDi2015NewLine            if( edge == ABEdge.None)Di2015NewLine            {Di2015NewLine                if( info.IsRegistered)Di2015NewLine                {Di2015NewLine                    SHAppBarMessage((int)ABMsg.ABM_REMOVE, ref abd);Di2015NewLine                    info.IsRegistered = false;Di2015NewLine                }Di2015NewLine                RestoreWindow(appbarWindow);Di2015NewLine                return;Di2015NewLine            }Di2015NewLineDi2015NewLine            if (!info.IsRegistered)Di2015NewLine            {Di2015NewLine                info.IsRegistered = true; Di2015NewLine                info.CallbackId = RegisterWindowMessage("AppBarMessage");Di2015NewLine                abd.uCallbackMessage = info.CallbackId;Di2015NewLineDi2015NewLine                uint ret = SHAppBarMessage((int)ABMsg.ABM_NEW, ref abd);Di2015NewLineDi2015NewLine                HwndSource source = HwndSource.FromHwnd(abd.hWnd);Di2015NewLine                source.AddHook(new HwndSourceHook(info.WndProc));Di2015NewLine            }Di2015NewLineDi2015NewLine            appbarWindow.WindowStyle = WindowStyle.None;            Di2015NewLine            appbarWindow.ResizeMode = ResizeMode.NoResize;Di2015NewLine            appbarWindow.Topmost = true;Di2015NewLineDi2015NewLine            ABSetPos(info.Edge, appbarWindow);                Di2015NewLine        }Di2015NewLineDi2015NewLine        private delegate void ResizeDelegate(Window appbarWindow, Rect rect);Di2015NewLine        private static void DoResize(Window appbarWindow, Rect rect)Di2015NewLine        {Di2015NewLine            appbarWindow.Width = rect.Width;Di2015NewLine            appbarWindow.Height = rect.Height;Di2015NewLine            appbarWindow.Top = rect.Top;Di2015NewLine            appbarWindow.Left = rect.Left;Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine        private static void ABSetPos(ABEdge edge, Window appbarWindow)Di2015NewLine        {Di2015NewLine            APPBARDATA barData = new APPBARDATA();Di2015NewLine            barData.cbSize = Marshal.SizeOf(barData);Di2015NewLine            barData.hWnd = new WindowInteropHelper(appbarWindow).Handle;Di2015NewLine            barData.uEdge = (int)edge;Di2015NewLineDi2015NewLine            if (barData.uEdge == (int)ABEdge.Left || barData.uEdge == (int)ABEdge.Right)Di2015NewLine            {Di2015NewLine                barData.rc.top = 0;Di2015NewLine                barData.rc.bottom = (int)SystemParameters.PrimaryScreenHeight;Di2015NewLine                if (barData.uEdge == (int)ABEdge.Left)Di2015NewLine                {Di2015NewLine                    barData.rc.left = 0;Di2015NewLine                    barData.rc.right = (int)Math.Round(appbarWindow.ActualWidth);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    barData.rc.right = (int)SystemParameters.PrimaryScreenWidth;Di2015NewLine                    barData.rc.left = barData.rc.right - (int)Math.Round(appbarWindow.ActualWidth);Di2015NewLine                }Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                barData.rc.left = 0;Di2015NewLine                barData.rc.right = (int)SystemParameters.PrimaryScreenWidth;Di2015NewLine                if (barData.uEdge == (int)ABEdge.Top)Di2015NewLine                {Di2015NewLine                    barData.rc.top = 0;Di2015NewLine                    barData.rc.bottom = (int)Math.Round(appbarWindow.ActualHeight);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    barData.rc.bottom = (int)SystemParameters.PrimaryScreenHeight;Di2015NewLine                    barData.rc.top = barData.rc.bottom - (int)Math.Round(appbarWindow.ActualHeight);Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            SHAppBarMessage((int)ABMsg.ABM_QUERYPOS, ref barData);Di2015NewLine            SHAppBarMessage((int)ABMsg.ABM_SETPOS, ref barData);Di2015NewLineDi2015NewLine            Rect rect = new Rect((double)barData.rc.left, (double)barData.rc.top, Di2015NewLine                (double)(barData.rc.right - barData.rc.left), (double)(barData.rc.bottom - barData.rc.top));Di2015NewLine            //This is done async, because WPF will send a resize after a new appbar is added.  Di2015NewLine            //if we size right away, WPFs resize comes last and overrides us.Di2015NewLine            appbarWindow.Dispatcher.BeginInvoke(DispatcherPriority.ApplicationIdle, Di2015NewLine                new ResizeDelegate(DoResize), appbarWindow, rect);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
85188Di2015UniqueSeparatorpublic event EventHandler Jump;Di2015NewLinepublic void OnJump()Di2015NewLine{Di2015NewLine    EventHandler handler = Jump;Di2015NewLine    if (null != handler) handler(this, EventArgs.Empty);Di2015NewLine}Di2015NewLine
85188Di2015UniqueSeparatorFrog frog = new Frog();Di2015NewLinefrog.Jump += new EventHandler(yourMethod);Di2015NewLineDi2015NewLineprivate void yourMethod(object s, EventArgs e)Di2015NewLine{Di2015NewLine     Console.WriteLine("Frog has Jumped!");Di2015NewLine}Di2015NewLine
85503Di2015UniqueSeparatorIPrimaryKey
85503Di2015UniqueSeparatorpublic static IPrimaryKey GetByID<T>(this IQueryable<T> source, int id) where T : IPrimaryKeyDi2015NewLine{Di2015NewLine    return source(obj => obj.ID == id);Di2015NewLine}Di2015NewLine
85706Di2015UniqueSeparatorstateComboBox.DropDownStyle = ComboBoxStyle.DropDownList;Di2015NewLine
85732Di2015UniqueSeparatorclass QueryableWrapper<T> : IQueryable<T>Di2015NewLine{Di2015NewLine    private IQueryable<T> _InnerQueryable;Di2015NewLine    private bool _HasExecuted;Di2015NewLineDi2015NewLine    public QueryableWrapper(IQueryable<T> innerQueryable)Di2015NewLine    {Di2015NewLine        _InnerQueryable = innerQueryable;Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool HasExecutedDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return _HasExecuted;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public IEnumerator<T> GetEnumerator()Di2015NewLine    {Di2015NewLine        _HasExecuted = true;Di2015NewLineDi2015NewLine        return _InnerQueryable.GetEnumerator();Di2015NewLine    }Di2015NewLineDi2015NewLine    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()Di2015NewLine    {Di2015NewLine        return GetEnumerator();Di2015NewLine    }Di2015NewLineDi2015NewLine    public Type ElementTypeDi2015NewLine    {Di2015NewLine        get { return _InnerQueryable.ElementType; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public System.Linq.Expressions.Expression ExpressionDi2015NewLine    {Di2015NewLine        get { return _InnerQueryable.Expression; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public IQueryProvider ProviderDi2015NewLine    {Di2015NewLine        get { return _InnerQueryable.Provider; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
85732Di2015UniqueSeparatorvar query = new QueryableWrapper<string>(Di2015NewLine    from str in myDataSourceDi2015NewLine    select str);Di2015NewLineDi2015NewLineDebug.WriteLine("HasExecuted: " + query.HasExecuted.ToString());Di2015NewLineDi2015NewLineforeach (string str in query)Di2015NewLine{Di2015NewLine    Debug.WriteLine(str);Di2015NewLine}Di2015NewLineDi2015NewLineDebug.WriteLine("HasExecuted: " + query.HasExecuted.ToString());Di2015NewLine
85902Di2015UniqueSeparator#if NET11Di2015NewLine// .NET 1.1 codeDi2015NewLine#elif NET20Di2015NewLine// .NET 2.0 codeDi2015NewLine#endifDi2015NewLine
86256Di2015UniqueSeparator<%@ Page Language="C#" MasterPageFile="~/common/masterpages/MasterPage.master" %>
86256Di2015UniqueSeparator<asp:
86256Di2015UniqueSeparator<script>
86256Di2015UniqueSeparator<script>
86322Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Xml;Di2015NewLineusing System.ServiceModel.Syndication;Di2015NewLineDi2015NewLinenamespace FeedUnionDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Uri feedUri = new Uri("http://stackoverflow.com/feeds/tag/silverlight"); Di2015NewLine            SyndicationFeed feed;Di2015NewLine            SyndicationFeed feed2;Di2015NewLine            using(XmlReader reader = XmlReader.Create(feedUri.AbsoluteUri))Di2015NewLine            {Di2015NewLine                feed= SyndicationFeed.Load(reader); Di2015NewLine            }Di2015NewLine            Uri feed2Uri = new Uri("http://stackoverflow.com/feeds/tag/wpf"); Di2015NewLine            using (XmlReader reader2 = XmlReader.Create(feed2Uri.AbsoluteUri))Di2015NewLine            {Di2015NewLine            feed2 = SyndicationFeed.Load(reader2);Di2015NewLine            }Di2015NewLine            SyndicationFeed feed3 = new SyndicationFeed(feed.Items.Union(feed2.Items));Di2015NewLine            StringBuilder builder = new StringBuilder();Di2015NewLine            using (XmlWriter writer = XmlWriter.Create(builder))Di2015NewLine            {Di2015NewLine                feed3.SaveAsRss20(writer);Di2015NewLine                System.Console.Write(builder.ToString());Di2015NewLine                System.Console.Read();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
86341Di2015UniqueSeparatorpublic class MyXmlDocument: XmlDocumentDi2015NewLine{Di2015NewLine  bool TryParseXml(string xml){Di2015NewLine    try{Di2015NewLine      ParseXml(xml);Di2015NewLine      return true;Di2015NewLine    }catch(XmlException e){Di2015NewLine      return false;Di2015NewLine    }Di2015NewLine }Di2015NewLine
86350Di2015UniqueSeparatorXmlNode listXml = sharePointLists.GetList(listName);Di2015NewLineFile.WriteAllText("listdefinition.xml", listXml.OuterXml);Di2015NewLine
86350Di2015UniqueSeparator<Batch OnError="Continue">Di2015NewLine    <Method ID="1" Cmd="New">Di2015NewLine        <Field Name="Title">Abcdef</Field>Di2015NewLine        <Field Name="Project_x0020_code">999050</Field>Di2015NewLine        <Field Name="Status">Open</Field>    Di2015NewLine    </Method>Di2015NewLine</Batch>Di2015NewLine
86350Di2015UniqueSeparatorXmlNode result = sharePointLists.UpdateListItems(listDefinition.Name, updates);Di2015NewLine
86350Di2015UniqueSeparator<Results xmlns="http://schemas.microsoft.com/sharepoint/soap/">Di2015NewLine    <Result ID="1,New">Di2015NewLine    <ErrorCode>0x00000000</ErrorCode>Di2015NewLine    <z:row ows_ContentTypeId="0x010036F3F587127F1A44B8BA3FEFED4733C6" Di2015NewLine         ows_Title="Abcdef" Di2015NewLine         ows_Project_x0020_code="999050" Di2015NewLine         ows_Status="Open" Di2015NewLine         ows_LinkTitleNoMenu="Abcdef" Di2015NewLine         ows_LinkTitle="Abcdef" Di2015NewLine         ows_ID="1005"            Di2015NewLine         ... Di2015NewLine         xmlns:z="#RowsetSchema" />Di2015NewLine    </Result>Di2015NewLine</Results>Di2015NewLine
86483Di2015UniqueSeparatorstring a = String.Format("|{0,5}|{1,5}|{2,5}", 1, 20, 300);Di2015NewLinestring b = String.Format("|{0,-5}|{1,-5}|{2,-5}", 1, 20, 300);Di2015NewLineDi2015NewLine// 'a' will be equal to "|    1|   20|  300|"Di2015NewLine// 'b' will be equal to "|1    |20   |300  |"Di2015NewLine
87120Di2015UniqueSeparatorDirectoryEntry deUser = new DirectoryEntry(findMeinAD(tbPNUID.Text));Di2015NewLinedeUser.InvokeSet("HomeDirectory", tbPFolderVerification.Text);Di2015NewLinedeUser.InvokeSet("HomeDrive", "Z:");Di2015NewLinedeUser.CommitChanges();Di2015NewLine
87312Di2015UniqueSeparator "\\x0d\\x0a"Di2015NewLine
87519Di2015UniqueSeparatorArrays.toString
87519Di2015UniqueSeparatorCollections.toString
87519Di2015UniqueSeparatorjava.util
87519Di2015UniqueSeparatorjava.net.URL
87641Di2015UniqueSeparatorxsd.exe dependency1.xsd dependency2.xsd schema.xsd /out:outputDirDi2015NewLine
87823Di2015UniqueSeparatorIn(string propertyName, ICollection values)Di2015NewLine
87823Di2015UniqueSeparatorInG<T>(string propertyName, ICollection<T> values)Di2015NewLine
88017Di2015UniqueSeparatorobject[] myArray = new object[] {1,2,3,"string1","string2"};Di2015NewLineArrayList myArrayList = new ArrayList(myArray);Di2015NewLine
88353Di2015UniqueSeparatorprotected void CustomerView_PageIndexChanging(object sender, System.Web.UI.WebControls.GridViewPageEventArgs e)Di2015NewLine{Di2015NewLine    CustomerView.PageIndex = e.NewPageIndex;Di2015NewLine    CustomerView.DataSource = Customer.GetAll();Di2015NewLine    CustomerView.DataBind();Di2015NewLine}Di2015NewLine
88502Di2015UniqueSeparatorthrow ex;
88502Di2015UniqueSeparatorthrow;
88807Di2015UniqueSeparatorPerson _p$1 = new Person();Di2015NewLine_p$1.FirstName = "Joe";Di2015NewLine_p$1.LastName = "Smith";Di2015NewLinePerson p = _p$1;Di2015NewLine
89187Di2015UniqueSeparatorConsole.WriteLine(Settings.Default.PropertyValues.Count.ToString());Di2015NewLineConsole.ReadLine();Di2015NewLineSettings.Default.Setting = "abc";Di2015NewLineConsole.WriteLine(Settings.Default.PropertyValues.Count.ToString());Di2015NewLineConsole.ReadLine();Di2015NewLine
89261Di2015UniqueSeparator<pages configSource="pages.config"/>Di2015NewLine
89261Di2015UniqueSeparator<pages />
90131Di2015UniqueSeparatorpublic class ServiceProxyHelper<T> where T : MyInterface { ... }Di2015NewLine
90442Di2015UniqueSeparatorUnauthorizedAccessException
90466Di2015UniqueSeparatorcollectionOfRelatedObjects.Where(o => !(o is ISomethingable))Di2015NewLine
90606Di2015UniqueSeparatorbase.checkReadyness(sender, e);Di2015NewLine
90627Di2015UniqueSeparatorIOException
90627Di2015UniqueSeparatorException.ToString()
90627Di2015UniqueSeparatorException
90627Di2015UniqueSeparatorthrow new FileNotFoundException("File not found");
90627Di2015UniqueSeparatorusing
90627Di2015UniqueSeparatorusing
90627Di2015UniqueSeparatorcatch
90627Di2015UniqueSeparatortry {  Di2015NewLine    using (StreamReader reader = file.OpenText()) {  Di2015NewLine        // Your processing code here  Di2015NewLine    }  Di2015NewLine} catch (IOException e) {  Di2015NewLine    UI.AlertUserSomehow(e.ToString());  Di2015NewLine}
90627Di2015UniqueSeparatorusing
90627Di2015UniqueSeparatortry
90627Di2015UniqueSeparatorcatch
90627Di2015UniqueSeparatorcatch
90627Di2015UniqueSeparatorIOException
90627Di2015UniqueSeparatorException.ToString()
90627Di2015UniqueSeparatorcatch
90655Di2015UniqueSeparatorSystem.out.println("Hello");Di2015NewLine
90655Di2015UniqueSeparatorsuper
90655Di2015UniqueSeparatorbase
90655Di2015UniqueSeparatorpublic class A extends B {Di2015NewLine}Di2015NewLine
90655Di2015UniqueSeparatorA
90655Di2015UniqueSeparatorB
90655Di2015UniqueSeparatorclass A : B
90655Di2015UniqueSeparatorfinal
90655Di2015UniqueSeparatorconst
90655Di2015UniqueSeparatorArrayList
90655Di2015UniqueSeparatorVector
90655Di2015UniqueSeparatorHashtable
90655Di2015UniqueSeparatorHashSet
90655Di2015UniqueSeparatorArrayList
90655Di2015UniqueSeparatorHashMap
90655Di2015UniqueSeparatorSet
90655Di2015UniqueSeparatorList
90655Di2015UniqueSeparatorMap
90655Di2015UniqueSeparatorvirtual
90655Di2015UniqueSeparatorfinal
90655Di2015UniqueSeparatorint
90655Di2015UniqueSeparatorfloat
90655Di2015UniqueSeparatordouble
90655Di2015UniqueSeparatorchar
90655Di2015UniqueSeparatorlong
90655Di2015UniqueSeparatorObject
90655Di2015UniqueSeparatorInteger
90655Di2015UniqueSeparatorFloat
90655Di2015UniqueSeparatorDouble
90668Di2015UniqueSeparatorusing(DirectorySearcher srch = new DirectorySearcher(dirEnt, "(objectClass=Group)", loadProps))Di2015NewLine{Di2015NewLine    srch.PageSize = 1000;Di2015NewLine    var results = srch.FindAll();Di2015NewLine}Di2015NewLine
90668Di2015UniqueSeparatorpublic IEnumerable<SearchResult> SafeFindAll(DirectorySearcher searcher)Di2015NewLine{Di2015NewLine    using(SearchResultCollection results = searcher.FindAll())Di2015NewLine    {Di2015NewLine        foreach (SearchResult result in results)Di2015NewLine        {Di2015NewLine            yield return result;        Di2015NewLine        } Di2015NewLine    } // SearchResultCollection will be disposed hereDi2015NewLine}Di2015NewLine
90668Di2015UniqueSeparatorusing(DirectorySearcher srch = new DirectorySearcher(dirEnt, "(objectClass=Group)", loadProps))Di2015NewLine{Di2015NewLine    srch.PageSize = 1000;Di2015NewLine    var results = SafeFindAll(srch);Di2015NewLine}Di2015NewLine
90699Di2015UniqueSeparatorProperties.Resources
90699Di2015UniqueSeparatorpaused = !paused;Di2015NewLineif (paused)Di2015NewLine    notifyIcon.Icon = Properties.Resources.RedIcon;Di2015NewLineelseDi2015NewLine    notifyIcon.Icon = Properties.Resources.GreenIcon;Di2015NewLine
90835Di2015UniqueSeparatorclass FooDi2015NewLine{Di2015NewLine  double _v = ...;Di2015NewLineDi2015NewLine  void Bar()Di2015NewLine  {Di2015NewLine    double v = _v;Di2015NewLineDi2015NewLine    if( v == _v )Di2015NewLine    {Di2015NewLine      // Code may or may not execute here.Di2015NewLine      // _v is 64-bit.Di2015NewLine      // v could be either 64-bit (debug) or 80-bit (release) or something else (future?).Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
90877Di2015UniqueSeparatorSystem.Xml.XmlReader sqlXMLReader = sqlComm.ExecuteXmlReader();Di2015NewLineSystem.Xml.XmlDocument xmlDoc = new System.Xml.XmlDocument();Di2015NewLinexmlDoc.Load(sqlXMLReader);Di2015NewLineSystem.Xml.XmlNodeList xnlJobs = xmlDoc.SelectNodes("/job");Di2015NewLine
91018Di2015UniqueSeparator[Test]Di2015NewLine\public void AddComponentInstance()Di2015NewLine\{Di2015NewLine\\CustomerImpl customer = new CustomerImpl();Di2015NewLineDi2015NewLine\\kernel.AddComponentInstance("key", typeof(ICustomer), customer);Di2015NewLine\\Assert.IsTrue(kernel.HasComponent("key"));Di2015NewLineDi2015NewLine\\CustomerImpl customer2 = kernel["key"] as CustomerImpl;Di2015NewLine\\Assert.AreSame(customer, customer2);Di2015NewLineDi2015NewLine\\customer2 = kernel[typeof(ICustomer)] as CustomerImpl;Di2015NewLine\\Assert.AreSame(customer, customer2);Di2015NewLine\}Di2015NewLineDi2015NewLine\[Test]Di2015NewLine\public void AddComponentInstance_ByService()Di2015NewLine\{Di2015NewLine\\CustomerImpl customer = new CustomerImpl();Di2015NewLineDi2015NewLine\\kernel.AddComponentInstance <ICustomer>(customer);Di2015NewLine\\Assert.AreSame(kernel[typeof(ICustomer)],customer);Di2015NewLine\}Di2015NewLineDi2015NewLine\[Test]Di2015NewLine\public void AddComponentInstance2()Di2015NewLine\{Di2015NewLine\\CustomerImpl customer = new CustomerImpl();Di2015NewLineDi2015NewLine\\kernel.AddComponentInstance("key", customer);Di2015NewLine\\Assert.IsTrue(kernel.HasComponent("key"));Di2015NewLineDi2015NewLine\\CustomerImpl customer2 = kernel["key"] as CustomerImpl;Di2015NewLine\\Assert.AreSame(customer, customer2);Di2015NewLineDi2015NewLine\\customer2 = kernel[typeof(CustomerImpl)] as CustomerImpl;Di2015NewLine\\Assert.AreSame(customer, customer2);Di2015NewLine\}Di2015NewLine
91119Di2015UniqueSeparatorSystem.Threading.Thread.Sleep(50);Di2015NewLine
91326Di2015UniqueSeparatorHttpWebRequest req = (HttpWebRequest)Di2015NewLineWebRequest.Create("http://mysite.com/index.php");Di2015NewLinereq.Method = "POST";Di2015NewLinereq.ContentType = "application/x-www-form-urlencoded";Di2015NewLinestring postData = "var=value1&var2=value2";Di2015NewLinereq.ContentLength = postData.Length;Di2015NewLineDi2015NewLineStreamWriter stOut = newDi2015NewLineStreamWriter(req.GetRequestStream(),Di2015NewLineSystem.Text.Encoding.ASCII);Di2015NewLinestOut.Write(postData);Di2015NewLinestOut.Close();Di2015NewLine
91375Di2015UniqueSeparatorfoo {1, 2, 3}
91375Di2015UniqueSeparatorstring t = "1, 2, 3";Di2015NewLinestring v = String.Format(" foo {{{0}}}", t);Di2015NewLine
91375Di2015UniqueSeparator{
91375Di2015UniqueSeparator{{
91375Di2015UniqueSeparator}
91375Di2015UniqueSeparator}}
91575Di2015UniqueSeparatorprivate void LockUnlockBitsExample(PaintEventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLineDi2015NewLine   // Create a new bitmap.Di2015NewLine   Bitmap bmp = new Bitmap("c:\\\\fakePhoto.jpg");Di2015NewLineDi2015NewLineDi2015NewLine   // Lock the bitmap's bits.  Di2015NewLine   Rectangle rect = new Rectangle(0, 0, bmp.Width, bmp.Height);Di2015NewLine   System.Drawing.Imaging.BitmapData bmpData =Di2015NewLine         bmp.LockBits(rect, System.Drawing.Imaging.ImageLockMode.ReadWrite,Di2015NewLine         bmp.PixelFormat);Di2015NewLineDi2015NewLineDi2015NewLine   // Get the address of the first line.Di2015NewLine   IntPtr ptr = bmpData.Scan0;Di2015NewLineDi2015NewLineDi2015NewLine   // Declare an array to hold the bytes of the bitmap.Di2015NewLine   int bytes  = bmpData.Stride * bmp.Height;Di2015NewLine   byte[] rgbValues = new byte[bytes];Di2015NewLineDi2015NewLineDi2015NewLine   // Copy the RGB values into the array.Di2015NewLine   System.Runtime.InteropServices.Marshal.Copy(ptr, rgbValues, 0, bytes);Di2015NewLineDi2015NewLineDi2015NewLine   // Set every third value to 255. A 24bpp bitmap will look red.  Di2015NewLine   for (int counter = 2; counter < rgbValues.Length; counter += 3)Di2015NewLine       rgbValues[counter] = 255;Di2015NewLineDi2015NewLineDi2015NewLine   // Copy the RGB values back to the bitmapDi2015NewLine   System.Runtime.InteropServices.Marshal.Copy(rgbValues, 0, ptr, bytes);Di2015NewLineDi2015NewLineDi2015NewLine   // Unlock the bits.Di2015NewLine   bmp.UnlockBits(bmpData);Di2015NewLineDi2015NewLineDi2015NewLine   // Draw the modified image.Di2015NewLine   e.Graphics.DrawImage(bmp, 0, 150);Di2015NewLine}Di2015NewLine
91575Di2015UniqueSeparatorGraphics g = e.Graphics;Di2015NewLineBitmap bmp = new Bitmap("sample.jpg");Di2015NewLineg.FillRectangle(Brushes.White, this.ClientRectangle);Di2015NewLineDi2015NewLine// Create a color matrixDi2015NewLine// The value 0.6 in row 4, column 4 specifies the alpha valueDi2015NewLinefloat[][] matrixItems = {Di2015NewLine                            new float[] {1, 0, 0, 0, 0},Di2015NewLine                            new float[] {0, 1, 0, 0, 0},Di2015NewLine                            new float[] {0, 0, 1, 0, 0},Di2015NewLine                            new float[] {0, 0, 0, 0.6f, 0}, Di2015NewLine                            new float[] {0, 0, 0, 0, 1}};Di2015NewLineColorMatrix colorMatrix = new ColorMatrix(matrixItems);Di2015NewLineDi2015NewLine// Create an ImageAttributes object and set its color matrixDi2015NewLineImageAttributes imageAtt = new ImageAttributes();Di2015NewLineimageAtt.SetColorMatrix(colorMatrix, ColorMatrixFlag.Default, ColorAdjustType.Bitmap);Di2015NewLineDi2015NewLine// Now draw the semitransparent bitmap image.Di2015NewLineg.DrawImage(bmp, this.ClientRectangle, 0.0f, 0.0f, bmp.Width, bmp.Height, Di2015NewLine            GraphicsUnit.Pixel, imageAtt);Di2015NewLineDi2015NewLineimageAtt.Dispose();Di2015NewLine
91597Di2015UniqueSeparator        System.Type propertyType = typeof(Boolean);Di2015NewLine        System.TypeCode typeCode = Type.GetTypeCode(propertyType);Di2015NewLine        switch (typeCode)Di2015NewLine        {Di2015NewLine            case TypeCode.Boolean:Di2015NewLine                //doStuffDi2015NewLine                break;Di2015NewLine            case TypeCode.String:Di2015NewLine                //doOtherStuffDi2015NewLine                break;Di2015NewLine            default: break;Di2015NewLine        }Di2015NewLine
91659Di2015UniqueSeparatornamespace Tools.CastleWindsor.InterceptorsDi2015NewLine{Di2015NewLineusing System;Di2015NewLineusing System.Text;Di2015NewLineusing Castle.Core.Interceptor;Di2015NewLineusing Castle.Core.Logging;Di2015NewLineDi2015NewLinepublic abstract class AbstractLoggingInterceptor : IInterceptorDi2015NewLine{Di2015NewLine    protected readonly ILoggerFactory logFactory;Di2015NewLineDi2015NewLine    protected AbstractLoggingInterceptor(ILoggerFactory logFactory)Di2015NewLine    {Di2015NewLine        this.logFactory = logFactory;Di2015NewLine    }Di2015NewLineDi2015NewLine    public virtual void Intercept(IInvocation invocation)Di2015NewLine    {Di2015NewLine        ILogger logger = logFactory.Create(invocation.TargetType);Di2015NewLineDi2015NewLine        tryDi2015NewLine        {Di2015NewLine            StringBuilder sb = null;Di2015NewLineDi2015NewLine            if (logger.IsDebugEnabled)Di2015NewLine            {Di2015NewLine                sb = new StringBuilder(invocation.TargetType.FullName).AppendFormat(".{0}(", invocation.Method);Di2015NewLineDi2015NewLine                for (int i = 0; i < invocation.Arguments.Length; i++)Di2015NewLine                {Di2015NewLine                    if (i > 0)Di2015NewLine                        sb.Append(", ");Di2015NewLineDi2015NewLine                    sb.Append(invocation.Arguments[i]);Di2015NewLine                }Di2015NewLineDi2015NewLine                sb.Append(")");Di2015NewLineDi2015NewLine                logger.Debug(sb.ToString());Di2015NewLine            }Di2015NewLineDi2015NewLine            invocation.Proceed();Di2015NewLineDi2015NewLine            if (logger.IsDebugEnabled && invocation.ReturnValue != null)Di2015NewLine            {Di2015NewLine                logger.Debug("Result of " + sb + " is: " + invocation.ReturnValue);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        catch (Exception e)Di2015NewLine        {Di2015NewLine            logger.Error(string.Empty, e);Di2015NewLine            throw;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine}Di2015NewLine
91659Di2015UniqueSeparatornamespace Tools.CastleWindsor.InterceptorsDi2015NewLine{Di2015NewLineusing Castle.Core.Logging;Di2015NewLineDi2015NewLinepublic class LoggingInterceptor : AbstractLoggingInterceptorDi2015NewLine{Di2015NewLine    public LoggingInterceptor(ILoggerFactory logFactory) : base(logFactory)Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine}Di2015NewLine
91659Di2015UniqueSeparatornamespace Tools.CastleWindsor.InterceptorsDi2015NewLine{Di2015NewLineusing Castle.Core.Interceptor;Di2015NewLineusing Castle.Core.Logging;Di2015NewLineusing System.Linq;Di2015NewLineDi2015NewLinepublic class MethodLoggingInterceptor : AbstractLoggingInterceptorDi2015NewLine{Di2015NewLine    private readonly string[] methodNames;Di2015NewLineDi2015NewLine    public MethodLoggingInterceptor(string[] methodNames, ILoggerFactory logFactory) : base(logFactory)Di2015NewLine    {Di2015NewLine        this.methodNames = methodNames;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void Intercept(IInvocation invocation)Di2015NewLine    {Di2015NewLine        if ( methodNames.Contains(invocation.Method.Name) )Di2015NewLine            base.Intercept(invocation);Di2015NewLine    }Di2015NewLine}Di2015NewLine}Di2015NewLine
91758Di2015UniqueSeparatorDrawMode
91758Di2015UniqueSeparatorOwnerDrawFixed
91758Di2015UniqueSeparatorprivate void listBox_DrawItem(object sender, DrawItemEventArgs e)Di2015NewLine{Di2015NewLine    e.DrawBackground();Di2015NewLine    Graphics g = e.Graphics;Di2015NewLineDi2015NewLine    g.FillRectangle(new SolidBrush(Color.Silver), e.Bounds);Di2015NewLineDi2015NewLine    // Print textDi2015NewLineDi2015NewLine    e.DrawFocusRectangle();Di2015NewLine}Di2015NewLine
91836Di2015UniqueSeparatorContext.User.Identity.AuthenticationType
91853Di2015UniqueSeparatorClick
91853Di2015UniqueSeparatorbutton1
91853Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLineDi2015NewLine            button1.Click += button1_Click;Di2015NewLine            button1.Click += button1_Click2;Di2015NewLine            button2.Click += button2_Click;Di2015NewLine        }Di2015NewLineDi2015NewLine        private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            MessageBox.Show("Hello");Di2015NewLine        }Di2015NewLineDi2015NewLine        private void button1_Click2(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            MessageBox.Show("World");Di2015NewLine        }Di2015NewLineDi2015NewLine        private void button2_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            RemoveClickEvent(button1);Di2015NewLine        }Di2015NewLineDi2015NewLine        private void RemoveClickEvent(Button b)Di2015NewLine        {Di2015NewLine            FieldInfo f1 = typeof(Control).GetField("EventClick", Di2015NewLine                BindingFlags.Static | BindingFlags.NonPublic);Di2015NewLine            object obj = f1.GetValue(b);Di2015NewLine            PropertyInfo pi = b.GetType().GetProperty("Events",  Di2015NewLine                BindingFlags.NonPublic | BindingFlags.Instance);Di2015NewLine            EventHandlerList list = (EventHandlerList)pi.GetValue(b, null);Di2015NewLine            list.RemoveHandler(obj, list[obj]);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
91995Di2015UniqueSeparatorclass TreeNodeController {Di2015NewLine  Entity data; Di2015NewLineDi2015NewLine  virtual bool IsReadOnly { get; }Di2015NewLine  virtual bool CanDrop(TreeNodeController source, DragDropEffects effect);Di2015NewLine  virtual bool CanDrop(DataInfoObject info, DragDropEffects effect);Di2015NewLine  virtual bool CanRename();Di2015NewLine}Di2015NewLineDi2015NewLineclass ParentNodeController : TreeNodeController {Di2015NewLine  override bool IsReadOnly { get { return data.IsReadOnly; } } Di2015NewLine  override bool CanDrop(TreeNodeController source, DragDropEffect effect) {Di2015NewLine    return !IsReadOnly && !data.IsChildOf(source.data) && effect == DragDropEffect.Move;Di2015NewLine  }Di2015NewLine  virtual bool CanDrop(DataInfoObject info, DragDropEffects effect) {Di2015NewLine    return info.DragDataCollection != null;Di2015NewLine  }Di2015NewLine  override bool CanRename() { Di2015NewLine    return !data.IsReadOnly && data.HasName;Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLineclass LeafNodeController : TreeNodeController {Di2015NewLine  override bool CanDrop(TreeNodeController source, DragDropEffect effect) {Di2015NewLine    return false;Di2015NewLine  }Di2015NewLine}Di2015NewLine
91995Di2015UniqueSeparatorbool CanDrop(DragDropEventArgs args) {Di2015NewLine  Point point = tree.PointToClient(new Point(e.X, e.Y));Di2015NewLine  TreeNode target = tree.GetNodeAt(point);Di2015NewLine  TreeNodeController targetController = target.Tag as TreeNodeController;Di2015NewLineDi2015NewLine  DataInfoObject info = args.GetData(typeof(DataInfoObject)) as DataInfoObject;Di2015NewLine  TreeNodeController sourceController = args.GetData(typeof(TreeNodeController)) as TreeNodeController;Di2015NewLineDi2015NewLine  if (info != null) return targetController.CanDrop(info, e.Effect);Di2015NewLine  if (sourceController != null) return targetController.CanDrop(sourceController, e.Effect);Di2015NewLine  return false;Di2015NewLine}Di2015NewLine
92105Di2015UniqueSeparatordataGridView1.CurrentCell = this.dataGridView1[YourColumn,YourRow];Di2015NewLine
92165Di2015UniqueSeparatorf1 = open(filename1);Di2015NewLinef2 = open(filename2, "w");Di2015NewLinewhile( !f1.eof() ) {Di2015NewLine  buffer = f1.read(buffersize);Di2015NewLine  err = f2.write(buffer, buffersize);Di2015NewLine  if err != NO_ERROR_CODEDi2015NewLine    break;Di2015NewLine}Di2015NewLinef1.close(); f2.close();Di2015NewLine
92165Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.IO;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLinenamespace LoopCopyDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            if (args.Length != 2)Di2015NewLine            {Di2015NewLine                Console.WriteLine(Di2015NewLine                  "Usage: LoopCopy.exe SourceFile DestFile");Di2015NewLine                return;Di2015NewLine            }Di2015NewLineDi2015NewLine            string srcName = args[0];Di2015NewLine            string destName = args[1];Di2015NewLineDi2015NewLine            FileInfo sourceFile = new FileInfo(srcName);Di2015NewLine            if (!sourceFile.Exists)Di2015NewLine            {Di2015NewLine                Console.WriteLine("Source file {0} does not exist", Di2015NewLine                    srcName);Di2015NewLine                return;Di2015NewLine            }Di2015NewLine            long fileLen = sourceFile.Length;Di2015NewLineDi2015NewLine            FileInfo destFile = new FileInfo(destName);Di2015NewLine            if (destFile.Exists)Di2015NewLine            {Di2015NewLine                Console.WriteLine("Destination file {0} already exists", Di2015NewLine                    destName);Di2015NewLine                return;Di2015NewLine            }Di2015NewLineDi2015NewLine            int buflen = 1024;Di2015NewLine            byte[] buf = new byte[buflen];Di2015NewLine            long totalBytesRead = 0;Di2015NewLine            double pctDone = 0;Di2015NewLine            string msg = "";Di2015NewLine            int numReads = 0;Di2015NewLine            Console.Write("Progress: ");Di2015NewLine            using (FileStream sourceStream = Di2015NewLine              new FileStream(srcName, FileMode.Open))Di2015NewLine            {Di2015NewLine                using (FileStream destStream = Di2015NewLine                    new FileStream(destName, FileMode.CreateNew))Di2015NewLine                {Di2015NewLine                    while (true)Di2015NewLine                    {Di2015NewLine                        numReads++;Di2015NewLine                        int bytesRead = sourceStream.Read(buf, 0, buflen);Di2015NewLine                        if (bytesRead == 0) break; Di2015NewLine                        destStream.Write(buf, 0, bytesRead);Di2015NewLineDi2015NewLine                        totalBytesRead += bytesRead;Di2015NewLine                        if (numReads % 10 == 0)Di2015NewLine                        {Di2015NewLine                            for (int i = 0; i < msg.Length; i++)Di2015NewLine                            {Di2015NewLine                                Console.Write("\\b \\b");Di2015NewLine                            }Di2015NewLine                            pctDone = (double)Di2015NewLine                                ((double)totalBytesRead / (double)fileLen);Di2015NewLine                            msg = string.Format("{0}%", Di2015NewLine                                     (int)(pctDone * 100));Di2015NewLine                            Console.Write(msg);Di2015NewLine                        }Di2015NewLineDi2015NewLine                        if (bytesRead < buflen) break;Di2015NewLineDi2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            for (int i = 0; i < msg.Length; i++)Di2015NewLine            {Di2015NewLine                Console.Write("\\b \\b");Di2015NewLine            }Di2015NewLine            Console.WriteLine("100%");Di2015NewLine            Console.WriteLine("Done");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
92876Di2015UniqueSeparatorarrayOfA
92876Di2015UniqueSeparatorIFoo[]
92876Di2015UniqueSeparatorusing System;Di2015NewLinepublic class oink {Di2015NewLine    public static void Main() {Di2015NewLine        A[] aOa = new A[10];Di2015NewLineDi2015NewLine        if (aOa is IFoo[]) { Console.WriteLine("aOa is IFoo[]"); }Di2015NewLineDi2015NewLine    }Di2015NewLine    public interface IFoo {}Di2015NewLine    public class A : IFoo {}Di2015NewLine}Di2015NewLineDi2015NewLinePS D:\\> csc test.csDi2015NewLineMicrosoft (R) Visual C# 2008 Compiler version 3.5.30729.1Di2015NewLinefor Microsoft (R) .NET Framework version 3.5Di2015NewLineCopyright (C) Microsoft Corporation. All rights reserved.Di2015NewLineDi2015NewLinePS D:\\> D:\\test.exeDi2015NewLineaOa is IFoo[]Di2015NewLinePS D:\\>Di2015NewLine
92959Di2015UniqueSeparator<%@ Control Language="c#" AutoEventWireup="false" Di2015NewLine    Codebehind="WebUserControl1.ascx.cs" Di2015NewLine    Inherits="aspnet.eventbubble.WebUserControl1" Di2015NewLine    TargetSchema="http://schemas.microsoft.com/intellisense/ie5"Di2015NewLine%>Di2015NewLine<asp:Panel id="Panel1" runat="server" Width="128px" Height="96px">Di2015NewLine    WebUserControl1 Di2015NewLine    <asp:Button id="Button1" Text="Button" runat="server"/>Di2015NewLine</asp:Panel>Di2015NewLine
92959Di2015UniqueSeparatorpublic class WebUserControl1 : System.Web.UI.UserControlDi2015NewLine{Di2015NewLine   protected System.Web.UI.WebControls.Button Button1;Di2015NewLine   protected System.Web.UI.WebControls.Panel Panel1;Di2015NewLineDi2015NewLine   private void Page_Load(object sender, System.EventArgs e)Di2015NewLine   {Di2015NewLine      Response.Write("WebUserControl1 :: Page_Load <BR>");Di2015NewLine   }Di2015NewLineDi2015NewLine   private void Button1_Click(object sender, System.EventArgs e)Di2015NewLine   {Di2015NewLine      Response.Write("WebUserControl1 :: Begin Button1_Click <BR>");Di2015NewLine      OnBubbleClick(e);Di2015NewLine      Response.Write("WebUserControl1 :: End Button1_Click <BR>");Di2015NewLine   }Di2015NewLineDi2015NewLine   public event EventHandler BubbleClick;Di2015NewLineDi2015NewLine   protected void OnBubbleClick(EventArgs e)Di2015NewLine   {Di2015NewLine      if(BubbleClick != null)Di2015NewLine      {Di2015NewLine         BubbleClick(this, e);Di2015NewLine      }Di2015NewLine   }           Di2015NewLineDi2015NewLine   #region Web Form Designer generated codeDi2015NewLine   override protected void OnInit(EventArgs e)Di2015NewLine   {Di2015NewLine      InitializeComponent();Di2015NewLine      base.OnInit(e);Di2015NewLine   }Di2015NewLineDi2015NewLine   private void InitializeComponent()Di2015NewLine   {Di2015NewLine      this.Button1.Click += new System.EventHandler(this.Button1_Click);Di2015NewLine      this.Load += new System.EventHandler(this.Page_Load);Di2015NewLineDi2015NewLine   }Di2015NewLine   #endregionDi2015NewLineDi2015NewLine}Di2015NewLine
92959Di2015UniqueSeparator<%@ Register TagPrefix="ksa" Di2015NewLine    TagName="BubbleControl" Di2015NewLine    Src="WebUserControl1.ascx" Di2015NewLine%>Di2015NewLine<%@ Page language="c#" Codebehind="WebForm1.aspx.cs" Di2015NewLine    AutoEventWireup="false" Inherits="aspnet.eventbubble.WebForm1" Di2015NewLine%>Di2015NewLine<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" >Di2015NewLine<HTML>Di2015NewLine    <HEAD>Di2015NewLine    \<title>WebForm1</title>Di2015NewLine    </HEAD>Di2015NewLine    <body MS_POSITIONING="GridLayout">Di2015NewLine    \<form id="Form1" method="post" runat="server">Di2015NewLine    \\<ksa:BubbleControl id="BubbleControl" runat="server" />Di2015NewLine    \</form>Di2015NewLine    </body>Di2015NewLine</HTML>Di2015NewLine
92959Di2015UniqueSeparatorpublic class WebForm1 : System.Web.UI.PageDi2015NewLine{Di2015NewLine   protected WebUserControl1 BubbleControl;Di2015NewLineDi2015NewLine   private void Page_Load(object sender, System.EventArgs e)Di2015NewLine   {Di2015NewLine      Response.Write("WebForm1 :: Page_Load <BR>");Di2015NewLine   }Di2015NewLineDi2015NewLine   #region Web Form Designer generated codeDi2015NewLine   override protected void OnInit(EventArgs e)Di2015NewLine   {Di2015NewLine      InitializeComponent();Di2015NewLine      base.OnInit(e);Di2015NewLine   }Di2015NewLineDi2015NewLine   private void InitializeComponent()Di2015NewLine   {    Di2015NewLine      this.Load += new System.EventHandler(this.Page_Load);Di2015NewLine      BubbleControl.BubbleClick += new EventHandler(WebForm1_BubbleClick);Di2015NewLine   }Di2015NewLine   #endregionDi2015NewLineDi2015NewLine   private void WebForm1_BubbleClick(object sender, EventArgs e)Di2015NewLine   {Di2015NewLine      Response.Write("WebForm1 :: WebForm1_BubbleClick from " + Di2015NewLine                     sender.GetType().ToString() + "<BR>");         Di2015NewLine   }Di2015NewLine}Di2015NewLine
92982Di2015UniqueSeparatorSystem.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(string value)Di2015NewLine
93045Di2015UniqueSeparatorAppDomain domain = AppDomain.CreateDomain("New domain name");Di2015NewLine//Do other things to the domain like set the security policyDi2015NewLineDi2015NewLinestring pathToDll = @"C:\\myDll.dll"; //Full path to dll you want to loadDi2015NewLineType t = typeof(TypeIWantToLoad);Di2015NewLineTypeIWantToLoad myObject = (TypeIWantToLoad)domain.CreateInstanceFromAndUnwrap(pathToDll, t.FullName);Di2015NewLine
93204Di2015UniqueSeparatorWM_PAINT
93204Di2015UniqueSeparatorSystem.Windows.Forms.Timer
93204Di2015UniqueSeparatorSystem.Threading.Timer
93614Di2015UniqueSeparatordateTimePicker1.Format = DateTimePickerFormat.Custom;Di2015NewLinedateTimePicker1.CustomFormat = "MM dd yyyy hh mm ss";  Di2015NewLine
93721Di2015UniqueSeparatorControlBox = falseDi2015NewLineText = ""Di2015NewLine
93877Di2015UniqueSeparatorProcess.Start("http://www.yoururl.com/Blah.aspx");Di2015NewLine
94078Di2015UniqueSeparator    private void RegexTest()Di2015NewLine    {Di2015NewLine        String input = "foo[]=1&foo[]=5&foo[]=2";Di2015NewLine        String pattern = @"foo\\[\\]=(\\d+)";Di2015NewLineDi2015NewLine        Regex regex = new Regex(pattern);Di2015NewLineDi2015NewLine        foreach (Match match in regex.Matches(input))Di2015NewLine        {Di2015NewLine            Console.Out.WriteLine(match.Groups[1]);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
94151Di2015UniqueSeparatorPoint lastPoint = Point.Empty;Di2015NewLinePanel leftResizer = new Panel();Di2015NewLineleftResizer.Cursor = System.Windows.Forms.Cursors.SizeWE;Di2015NewLineleftResizer.Dock = System.Windows.Forms.DockStyle.Left;Di2015NewLineleftResizer.Size = new System.Drawing.Size(1, 100);Di2015NewLineleftResizer.MouseDown += delegate(object sender, MouseEventArgs e) { Di2015NewLine  lastPoint = leftResizer.PointToScreen(e.Location); Di2015NewLine  leftResizer.Capture = true;Di2015NewLine}Di2015NewLineleftResizer.MouseMove += delegate(object sender, MouseEventArgs e) {Di2015NewLine  if (lastPoint != Point.Empty) {Di2015NewLine    Point newPoint = leftResizer.PointToScreen(e.Location);Di2015NewLine    Location = new Point(Location.X + (newPoint.X - lastPoint.X), Location.Y);Di2015NewLine    Width = Math.Max(MinimumSize.Width, Width - (newPoint.X - lastPoint.X));Di2015NewLine    lastPoint = newPoint;Di2015NewLine  }Di2015NewLine}Di2015NewLineleftResizer.MouseUp += delegate (object sender, MouseEventArgs e) { Di2015NewLine  lastPoint = Point.Empty;Di2015NewLine  leftResizer.Capture = false;Di2015NewLine}Di2015NewLineDi2015NewLineform.BorderStyle = BorderStyle.None;Di2015NewLineform.Add(leftResizer);Di2015NewLine
94255Di2015UniqueSeparator[STAThread]Di2015NewLinestatic void Main() Di2015NewLine{Di2015NewLine   using(Mutex mutex = new Mutex(false, "Global\\\\" + appGuid))Di2015NewLine   {Di2015NewLine      if(!mutex.WaitOne(0, false))Di2015NewLine      {Di2015NewLine         MessageBox.Show("Instance already running");Di2015NewLine         return;Di2015NewLine      }Di2015NewLineDi2015NewLine      Application.Run(new Form1());Di2015NewLine   }Di2015NewLine}Di2015NewLineDi2015NewLineprivate static string appGuid = "c0a76b5a-12ab-45c5-b9d9-d693faa6e7b9";Di2015NewLine
94366Di2015UniqueSeparatorstring s = "...<tab>...";Di2015NewLines = s.Replace("<tab>", "\\t");Di2015NewLine
95030Di2015UniqueSeparatorDi2015NewLine    tryDi2015NewLine    {Di2015NewLine        throw new ArgumentException("some operation that throws an exception");Di2015NewLine        string s = "blah";Di2015NewLine    }Di2015NewLine    catch (e as ArgumentException)Di2015NewLine    {  Di2015NewLine        Console.Out.WriteLine(s);Di2015NewLine    }Di2015NewLine 
95143Di2015UniqueSeparator<Grid>Di2015NewLine    <Grid x:Name="MainContent" IsEnabled="False">Di2015NewLine    ...Di2015NewLine    </Grid>Di2015NewLineDi2015NewLine    <Grid x:Name="LoadingIndicatorPanel">Di2015NewLine    ...Di2015NewLine    </Grid>Di2015NewLine</Grid>Di2015NewLine
95928Di2015UniqueSeparatorif (StartDate < EndDate)Di2015NewLine   // codeDi2015NewLine
95928Di2015UniqueSeparatorif (StartDate.Date < EndDate.Date)Di2015NewLine    // codeDi2015NewLine
95973Di2015UniqueSeparatorBindingFlags.NonPublic
95973Di2015UniqueSeparatorBindingFlags.Instance
95973Di2015UniqueSeparatorFieldInfo[] fields = myType.GetFields(Di2015NewLine                         BindingFlags.NonPublic | Di2015NewLine                         BindingFlags.Instance);Di2015NewLine
96057Di2015UniqueSeparatorif(typeof(IMyInterface).IsAssignableFrom(typeof(T)))Di2015NewLine{Di2015NewLine  // somethingDi2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine  // something elseDi2015NewLine}Di2015NewLine
96240Di2015UniqueSeparator    public static long GetCommitCharge()Di2015NewLine    {Di2015NewLine        var p = new System.Diagnostics.PerformanceCounter("Memory", "Committed Bytes");Di2015NewLine        return p.RawValue;Di2015NewLine    }Di2015NewLine
96470Di2015UniqueSeparatorScreenCapture = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(Di2015NewLine   bmp.GetHbitmap(), Di2015NewLine   IntPtr.Zero, Di2015NewLine   System.Windows.Int32Rect.Empty, Di2015NewLine   BitmapSizeOptions.FromWidthAndHeight(width, height));Di2015NewLine
96651Di2015UniqueSeparator/// <summary>Di2015NewLine/// Summary for AssemblyResolverDi2015NewLine/// </summary>Di2015NewLinepublic ref class AssemblyResolverDi2015NewLine{Di2015NewLinepublic:Di2015NewLineDi2015NewLinestatic Assembly^ MyResolveEventHandler( Object^ sender, ResolveEventArgs^ args )Di2015NewLine{Di2015NewLine    Console::WriteLine( "Resolving..." );Di2015NewLineDi2015NewLine    Assembly^ thisAssembly = Assembly::GetExecutingAssembly();Di2015NewLine    String^ thisPath = thisAssembly->Location;Di2015NewLine    String^ directory = Path::GetDirectoryName(thisPath);Di2015NewLine    String^ pathToManagedAssembly = Path::Combine(directory, "managed.dll");Di2015NewLineDi2015NewLine    Assembly^ newAssembly = Assembly::LoadFile(pathToManagedAssembly);Di2015NewLine    return newAssembly;Di2015NewLine}Di2015NewLineDi2015NewLine};Di2015NewLine
96651Di2015UniqueSeparator#include "AssemblyResolver.h"Di2015NewLineDi2015NewLineextern "C" __declspec(dllexport) IMyObject* CreateMyObject(void)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        AppDomain^ currentDomain = AppDomain::CurrentDomain;Di2015NewLine        currentDomain->AssemblyResolve += gcnew ResolveEventHandler( AssemblyResolver::MyResolveEventHandler );Di2015NewLineDi2015NewLine        return new CMyWrapper( );Di2015NewLine    }Di2015NewLine    catch(System::Exception^ e)Di2015NewLine    {Di2015NewLine        System::Console::WriteLine(e->Message);Di2015NewLineDi2015NewLine        return NULL;Di2015NewLine    }Di2015NewLine}Di2015NewLine
96682Di2015UniqueSeparatorContextMenuStrip
96682Di2015UniqueSeparatorContextMenu
96682Di2015UniqueSeparatorTextBox
96682Di2015UniqueSeparatorContextMenuStrip
96682Di2015UniqueSeparatorTextBox
96907Di2015UniqueSeparatorBitmap image1 = ...Di2015NewLineBitmap image2 = ...Di2015NewLineDi2015NewLineBitmap combined = new Bitmap(image1.Width, image1.Height);Di2015NewLineusing (Graphics g = Graphics.FromImage(combined)) {Di2015NewLine  g.DrawImage(image1, new Point(0, 0));Di2015NewLine  g.DrawImage(image2, new Point(0, 0);Di2015NewLine}Di2015NewLineDi2015NewLineimageList.Add(combined);Di2015NewLine
97156Di2015UniqueSeparatorMicrosoft.VisualBasic
97156Di2015UniqueSeparatorInputBox
97156Di2015UniqueSeparatorMicrosoft.VisualBasic.Interaction
97156Di2015UniqueSeparatorstring input = Microsoft.VisualBasic.Interaction.InputBox("Prompt", "Title", "Default", -1, -1);Di2015NewLine
97199Di2015UniqueSeparator<configuration><services>
97199Di2015UniqueSeparator  <service name="MyServiceName" behaviorConfiguration="MyServiceBehavior">Di2015NewLine    <host>Di2015NewLine      <baseAddresses>Di2015NewLine        <add baseAddress="http://localhost:9000/MyService"/>Di2015NewLine      </baseAddresses>Di2015NewLine    </host>Di2015NewLine    <endpoint address="net.tcp://localhost:9001/MyService"Di2015NewLine              binding="netTcpBinding"Di2015NewLine              contract="IMyService"Di2015NewLine              bindingConfiguration="MyServiceBinding"/>Di2015NewLine  </service>Di2015NewLine
97199Di2015UniqueSeparatorhttp://localhost:9000/MyService?wsdl
97290Di2015UniqueSeparatorAppDomain.AssemblyResolve
97290Di2015UniqueSeparatorAppDomain.AssemblyResolve
97290Di2015UniqueSeparatorAssembly.GetManifestResourceStream
97290Di2015UniqueSeparatorAssembly.Load
97290Di2015UniqueSeparatorAppDomain.CurrentDomain.AssemblyResolve += (sender, args) =>Di2015NewLine{Di2015NewLine    var resName = args.Name + ".dll";    Di2015NewLine    var thisAssembly = Assembly.GetExecutingAssembly();    Di2015NewLine    using (var input = thisAssembly.GetManifestResourceStream(resName))Di2015NewLine    {Di2015NewLine        return input != null Di2015NewLine             ? Assembly.Load(StreamToBytes(input))Di2015NewLine             : null;Di2015NewLine    }Di2015NewLine};Di2015NewLine
97290Di2015UniqueSeparatorStreamToBytes
97290Di2015UniqueSeparatorstatic byte[] StreamToBytes(Stream input) Di2015NewLine{Di2015NewLine    var capacity = input.CanSeek ? (int) input.Length : 0;Di2015NewLine    using (var output = new MemoryStream(capacity))Di2015NewLine    {Di2015NewLine        int readLength;Di2015NewLine        var buffer = new byte[4096];Di2015NewLineDi2015NewLine        doDi2015NewLine        {Di2015NewLine            readLength = input.Read(buffer, 0, buffer.Length);Di2015NewLine            output.Write(buffer, 0, readLength);Di2015NewLine        }Di2015NewLine        while (readLength != 0);Di2015NewLineDi2015NewLine        return output.ToArray();Di2015NewLine    }Di2015NewLine}Di2015NewLine
97331Di2015UniqueSeparatorAppDomain.CurrentDomain.BaseDirectoryDi2015NewLine
97331Di2015UniqueSeparatorEnvironment.CurrentDirectoryDi2015NewLine
97397Di2015UniqueSeparatorstring value = (string)TransactionTypeCode.Shipment;Di2015NewLine
97517Di2015UniqueSeparator// The GetForegroundWindow function returns a handle to the foreground windowDi2015NewLine// (the window  with which the user is currently working).Di2015NewLine[System.Runtime.InteropServices.DllImport("user32.dll")]Di2015NewLineprivate static extern IntPtr GetForegroundWindow();Di2015NewLineDi2015NewLine// The GetWindowThreadProcessId function retrieves the identifier of the threadDi2015NewLine// that created the specified window and, optionally, the identifier of theDi2015NewLine// process that created the window.Di2015NewLine[System.Runtime.InteropServices.DllImport("user32.dll")]Di2015NewLineprivate static extern Int32 GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);Di2015NewLineDi2015NewLine// Returns the name of the process owning the foreground window.Di2015NewLineprivate string GetForegroundProcessName()Di2015NewLine{Di2015NewLine    IntPtr hwnd = GetForegroundWindow();Di2015NewLineDi2015NewLine    // The foreground window can be NULL in certain circumstances, Di2015NewLine    // such as when a window is losing activation.Di2015NewLine    if (hwnd == null)Di2015NewLine        return "Unknown";Di2015NewLineDi2015NewLine    uint pid;Di2015NewLine    GetWindowThreadProcessId(hwnd, out pid);Di2015NewLineDi2015NewLine    foreach (System.Diagnostics.Process p in System.Diagnostics.Process.GetProcesses())Di2015NewLine    {Di2015NewLine        if (p.Id == pid)Di2015NewLine            return p.ProcessName;Di2015NewLine    }Di2015NewLineDi2015NewLine    return "Unknown";Di2015NewLine}Di2015NewLine
97584Di2015UniqueSeparatorbind receives field to get value fromDi2015NewLinebind uses reflection to get the valueDi2015NewLinebind attempts to set the ExportInfoID property // boom, errorDi2015NewLine
97788Di2015UniqueSeparatorpublic static ImageData Create(string imageFilename)Di2015NewLine{Di2015NewLine   // ...Di2015NewLine   ImageDataHeader imageHeader = ParseHeader(imageFilename);Di2015NewLine   ImageData newImageData;Di2015NewLine   if (imageHeader.bpp == 32)Di2015NewLine   {Di2015NewLine      newImageData = new ImageData32(imageFilename, imageHeader);Di2015NewLine   }Di2015NewLine   elseDi2015NewLine   {Di2015NewLine      newImageData = new ImageData16(imageFilename, imageHeader);Di2015NewLine   }Di2015NewLine   // ...Di2015NewLine   return newImageData;Di2015NewLine}Di2015NewLine
98572Di2015UniqueSeparatorConvert.ToUInt32(hex, 16)  //Using ToUInt32 not ToUInt64, as per OP commentDi2015NewLine
100066Di2015UniqueSeparatorif (proposedFilename.IndexOfAny(System.IO.Path.GetInvalidFileNameChars()) != -1)Di2015NewLine{Di2015NewLine  MessageBox.Show("The filename is invalid");Di2015NewLine  return;Di2015NewLine}Di2015NewLine
100244Di2015UniqueSeparator\\uXXXX
100244Di2015UniqueSeparatorusing System;Di2015NewLineclass Uxxxx {Di2015NewLine    public static void Main() {Di2015NewLine        Console.WriteLine("\\u20AC");Di2015NewLine    }Di2015NewLine}Di2015NewLine
100293Di2015UniqueSeparatorBitmap bitmap = new Bitmap(@"C:\\image.png");Di2015NewLineColor clr = bitmap.GetPixel(0, 0);Di2015NewLine
100307Di2015UniqueSeparatorParallel.Foreach (ListOfStrings, (item) => Di2015NewLine    result.add(CalculateSmth(item));Di2015NewLine);Di2015NewLine
100490Di2015UniqueSeparatorwindbg.exe
100496Di2015UniqueSeparatorpublic static void InsertIfNotExists<TEntity>Di2015NewLine                    (this Table<TEntity> table,Di2015NewLine                     TEntity entity,Di2015NewLine                     Expression<Func<TEntity,bool>> predicate)Di2015NewLine    where TEntity : classDi2015NewLine{ Di2015NewLine    if (!table.Any(predicate)) Di2015NewLine    {Di2015NewLine        table.InsertOnSubmit(record);Di2015NewLine        table.Context.SubmitChanges();Di2015NewLine    }Di2015NewLine }Di2015NewLineDi2015NewLineDi2015NewLinetable.InsertIfNotExists(entity, e=>e.BooleanProperty);Di2015NewLine
100961Di2015UniqueSeparatorpublic void LogSomething(string msg)Di2015NewLine{Di2015NewLine  LogEntry le = new LogEntry { Message = msg };Di2015NewLine  le.ExtendedProperties.Add("Called from", new StackFrame(1).GetMethod().ReflectedType);Di2015NewLine  Logger.Write(le);Di2015NewLine}Di2015NewLine
100961Di2015UniqueSeparatorExtended Properties: Called from - LAB_Demo.TesterDi2015NewLine
100980Di2015UniqueSeparatorpublic static class EntityCollectionHelperDi2015NewLine{Di2015NewLine    public static EntitySet<T> ToEntitySet<T>(this IEnumerable<T> source) where T:classDi2015NewLine    {Di2015NewLine        EntitySet<T> set = new EntitySet<T>();Di2015NewLine        set.AddRange(source);Di2015NewLine        return set;Di2015NewLine    }Di2015NewLine}Di2015NewLine
100980Di2015UniqueSeparatorPageContents = (from pc in el.Elements()Di2015NewLine                                where pc.Name.LocalName == "revision"Di2015NewLine                                select new PageContent()Di2015NewLine                                {Di2015NewLine                                   Content = pc.Elements().Where(e => e.Name.LocalName=="text").First().Value,Di2015NewLine                                   Username = pc.Elements().Where(e => e.Name.LocalName == "contributor").First().Elements().Where(e => e.Name.LocalName == "username").First().Value,Di2015NewLine                                   DateTime = DateTime.Parse(pc.Elements().Where(e => e.Name.LocalName == "timestamp").First().Value)Di2015NewLine                                }).ToEntitySet()Di2015NewLine
101153Di2015UniqueSeparatorclass PointClass {Di2015NewLine  int double X;Di2015NewLine  int double Y;Di2015NewLine}Di2015NewLineDi2015NewLineclass Circle {Di2015NewLine  PointClass Center = new PointClass() { X = 0, Y = 0; }Di2015NewLine}Di2015NewLineDi2015NewLinestatic void Main() {Di2015NewLine  Circle c = new Circle();Di2015NewLine  Console.WriteLine(c.Center.X);Di2015NewLine  c.Center.X = 42;Di2015NewLine  Console.WriteLine(c.Center.X);Di2015NewLine}Di2015NewLine
101153Di2015UniqueSeparator0Di2015NewLine42Di2015NewLine
101153Di2015UniqueSeparatorstruct Point {Di2015NewLine  int double X;Di2015NewLine  int double Y;Di2015NewLine}Di2015NewLineDi2015NewLineclass Circle {Di2015NewLine  PointStruct Center = new PointStruct() { X = 0, Y = 0; }Di2015NewLine}Di2015NewLineDi2015NewLinestatic void Main() {Di2015NewLine  Circle c = new Circle();Di2015NewLine  Console.WriteLine(c.Center.X);Di2015NewLine  c.Center.X = 42;Di2015NewLine  Console.WriteLine(c.Center.X);Di2015NewLine}Di2015NewLine
101153Di2015UniqueSeparator0Di2015NewLine0Di2015NewLine
101256Di2015UniqueSeparatorpublic ActionResult MyAction()Di2015NewLine{Di2015NewLine    ... // Populate myObjectDi2015NewLine    return new JsonResult{ Data = myObject };Di2015NewLine}Di2015NewLine
101256Di2015UniqueSeparator$.getJSON("/controllerName/MyAction", callbackFunction);Di2015NewLine
101256Di2015UniqueSeparatorcallbackFunction
101313Di2015UniqueSeparatorlist.ForEach( item =>Di2015NewLine{Di2015NewLine    item.DoSomething();Di2015NewLine} );Di2015NewLine
101313Di2015UniqueSeparatorforeach(Item item in list)Di2015NewLine{Di2015NewLine     item.DoSomething();Di2015NewLine}Di2015NewLine
101632Di2015UniqueSeparatorwindow.alert = function () { }Di2015NewLine
102583Di2015UniqueSeparator    using System.Management;Di2015NewLineDi2015NewLine    void Shutdown()Di2015NewLine    {Di2015NewLine        ManagementBaseObject mboShutdown = null;Di2015NewLine        ManagementClass mcWin32 = new ManagementClass("Win32_OperatingSystem");Di2015NewLine        mcWin32.Get();Di2015NewLineDi2015NewLine        // You can't shutdown without security privilegesDi2015NewLine        mcWin32.Scope.Options.EnablePrivileges = true;Di2015NewLine        ManagementBaseObject mboShutdownParams =Di2015NewLine                 mcWin32.GetMethodParameters("Win32Shutdown");Di2015NewLineDi2015NewLine        // Flag 1 means we want to shut down the system. Use "2" to reboot.Di2015NewLine        mboShutdownParams["Flags"] = "1";Di2015NewLine        mboShutdownParams["Reserved"] = "0";Di2015NewLine        foreach (ManagementObject manObj in mcWin32.GetInstances())Di2015NewLine        {Di2015NewLine            mboShutdown = manObj.InvokeMethod("Win32Shutdown", Di2015NewLine                                           mboShutdownParams, null);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
102622Di2015UniqueSeparator"message text...\\nmore text..."Di2015NewLine
102752Di2015UniqueSeparatorSqlDataAdapter da = new SqlDataAdapter();Di2015NewLinevar cmd1 = ((IDbDataAdapter)da).DeleteCommand;Di2015NewLinevar cmd2 = ((IDbDataAdapter)da).UpdateCommand;Di2015NewLinevar cmd3 = ((IDbDataAdapter)da).SelectCommand;Di2015NewLinevar cmd4 = ((IDbDataAdapter)da).InsertCommand;Di2015NewLine
103057Di2015UniqueSeparatorString hour = "25";Di2015NewLineString minute = "36";Di2015NewLineString second = "55.57";Di2015NewLineDouble result = (hour) + (minute) / 60 + (second) / 3600;Di2015NewLine
103587Di2015UniqueSeparatorusing System.Collections.Generic;Di2015NewLineDi2015NewLinenamespace csharp_tricksDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        class MyClassDi2015NewLine        {Di2015NewLine            int keyValue;Di2015NewLine            int someInfo;Di2015NewLineDi2015NewLine            public MyClass(int key, int info)Di2015NewLine            {Di2015NewLine                keyValue = key;Di2015NewLine                someInfo = info;Di2015NewLine            }Di2015NewLineDi2015NewLine            public override bool Equals(object obj)Di2015NewLine            {Di2015NewLine                MyClass other = obj as MyClass;Di2015NewLine                if (other == null) return false;Di2015NewLineDi2015NewLine                return keyValue.Equals(other.keyValue);Di2015NewLine            }Di2015NewLineDi2015NewLine            public override int GetHashCode()Di2015NewLine            {Di2015NewLine                return keyValue.GetHashCode();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        class Pair<T, R>Di2015NewLine        {Di2015NewLine            public T First { get; set; }Di2015NewLine            public R Second { get; set; }Di2015NewLine        }Di2015NewLineDi2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            var dict = new Dictionary<Pair<int, MyClass>, object>();Di2015NewLineDi2015NewLine            dict.Add(new Pair<int, MyClass>() { First = 1, Second = new MyClass(1, 2) }, 1);Di2015NewLineDi2015NewLine            //this is a pair of the same values as previous! but... no exception this time...Di2015NewLine            dict.Add(new Pair<int, MyClass>() { First = 1, Second = new MyClass(1, 3) }, 1);Di2015NewLineDi2015NewLine            return;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
103668Di2015UniqueSeparatorpublic class Home {Di2015NewLine  public static IRepository<T> For<T> {Di2015NewLine    get {Di2015NewLine      return Container.Resolve<IRepository<T>>();Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
104197Di2015UniqueSeparatorclass TwoDPoint : System.ObjectDi2015NewLine{Di2015NewLine    public readonly int x, y;Di2015NewLineDi2015NewLine    public TwoDPoint(int x, int y)  //constructorDi2015NewLine    {Di2015NewLine        this.x = x;Di2015NewLine        this.y = y;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool Equals(System.Object obj)Di2015NewLine    {Di2015NewLine        // If parameter is null return false.Di2015NewLine        if (obj == null)Di2015NewLine        {Di2015NewLine            return false;Di2015NewLine        }Di2015NewLineDi2015NewLine        // If parameter cannot be cast to Point return false.Di2015NewLine        TwoDPoint p = obj as TwoDPoint;Di2015NewLine        if ((System.Object)p == null)Di2015NewLine        {Di2015NewLine            return false;Di2015NewLine        }Di2015NewLineDi2015NewLine        // Return true if the fields match:Di2015NewLine        return (x == p.x) && (y == p.y);Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool Equals(TwoDPoint p)Di2015NewLine    {Di2015NewLine        // If parameter is null return false:Di2015NewLine        if ((object)p == null)Di2015NewLine        {Di2015NewLine            return false;Di2015NewLine        }Di2015NewLineDi2015NewLine        // Return true if the fields match:Di2015NewLine        return (x == p.x) && (y == p.y);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override int GetHashCode()Di2015NewLine    {Di2015NewLine        return x ^ y;Di2015NewLine    }Di2015NewLine}Di2015NewLine
104222Di2015UniqueSeparatorLinkedResource objLinkedRes = new LinkedResource(Di2015NewLine    \\Server.MapPath(".") + "\\\\fuzzydev-logo.jpg", Di2015NewLine    \\"image/jpeg");Di2015NewLineobjLinkedRes.ContentId = "fuzzydev-logo";       Di2015NewLineAlternateView objHTLMAltView = AlternateView.CreateAlternateViewFromString(Di2015NewLine    \\"<img src='cid:fuzzydev-logo' />", Di2015NewLine    \\new System.Net.Mime.ContentType("text/html"));Di2015NewLineobjHTLMAltView.LinkedResources.Add(objLinkedRes);Di2015NewLineobjMailMessage.AlternateViews.Add(objHTLMAltView);Di2015NewLine
104387Di2015UniqueSeparatordouble d = -3.14;Di2015NewLineint i = (int)d;Di2015NewLine// i == -3Di2015NewLine
104664Di2015UniqueSeparatorif (item is IEnumerable)Di2015NewLine{Di2015NewLine    foreach (object o in (item as IEnumerable))Di2015NewLine    {Di2015NewLineDi2015NewLine    }Di2015NewLine} else {Di2015NewLine   // reflect over itemDi2015NewLine}Di2015NewLine
104948Di2015UniqueSeparatorpublic classs DeletePersonCommand: ICommandDi2015NewLine{Di2015NewLine     private Person personToDelete;Di2015NewLine     public DeletePersonCommand(Person personToDelete)Di2015NewLine     {Di2015NewLine         this.personToDelete = personToDelete;Di2015NewLine     }Di2015NewLineDi2015NewLine     public void Execute()Di2015NewLine     {Di2015NewLine        doSomethingWith(personToDelete);Di2015NewLine     }Di2015NewLine}Di2015NewLine
105109Di2015UniqueSeparator  [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]Di2015NewLine  private class MEMORYSTATUSEXDi2015NewLine  {Di2015NewLine     public uint dwLength;Di2015NewLine     public uint dwMemoryLoad;Di2015NewLine     public ulong ullTotalPhys;Di2015NewLine     public ulong ullAvailPhys;Di2015NewLine     public ulong ullTotalPageFile;Di2015NewLine     public ulong ullAvailPageFile;Di2015NewLine     public ulong ullTotalVirtual;Di2015NewLine     public ulong ullAvailVirtual;Di2015NewLine     public ulong ullAvailExtendedVirtual;Di2015NewLine     public MEMORYSTATUSEX()Di2015NewLine     {Di2015NewLine        this.dwLength = (uint)Marshal.SizeOf(typeof(NativeMethods.MEMORYSTATUSEX));Di2015NewLine     }Di2015NewLine  }Di2015NewLineDi2015NewLineDi2015NewLine  [return: MarshalAs(UnmanagedType.Bool)]Di2015NewLine  [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]Di2015NewLine  static extern bool GlobalMemoryStatusEx([In, Out] MEMORYSTATUSEX lpBuffer);Di2015NewLine
105109Di2015UniqueSeparatorulong installedMemory;Di2015NewLineMEMORYSTATUSEX memStatus = new MEMORYSTATUSEX();Di2015NewLineif( GlobalMemoryStatusEx( memStatus))Di2015NewLine{ Di2015NewLine   installedMemory = memStatus.ullTotalPhys;Di2015NewLine}Di2015NewLine
105402Di2015UniqueSeparatorforeach (Suit suit in (Suit[]) Enum.GetValues(typeof(Suit)))Di2015NewLine{Di2015NewLine}Di2015NewLine
105650Di2015UniqueSeparatorclass FooDi2015NewLine{Di2015NewLine    private int count = 0;Di2015NewLine    public void TrySomething()    Di2015NewLine    {Di2015NewLine        count++;Di2015NewLine    }Di2015NewLine}Di2015NewLine
105650Di2015UniqueSeparatorclass FooDi2015NewLine{Di2015NewLine    private int count = 0;Di2015NewLine    private readonly object sync = new object();Di2015NewLine    public void TrySomething()    Di2015NewLine    {Di2015NewLine        lock(sync)Di2015NewLine            count++;Di2015NewLine    }Di2015NewLine}Di2015NewLine
105650Di2015UniqueSeparatorclass FooDi2015NewLine{Di2015NewLine    private int count = 0;Di2015NewLine    public void TrySomething()    Di2015NewLine    {Di2015NewLine        System.Threading.Interlocked.Increment(ref count);Di2015NewLine    }Di2015NewLine}Di2015NewLine
105703Di2015UniqueSeparatornmap -O -oX "filename.xml" 192.168.0.0/24Di2015NewLine
105786Di2015UniqueSeparator      ' Format a negative integer or floating-point number in various ways.Di2015NewLine  Console.WriteLine("Standard Numeric Format Specifiers")Di2015NewLine  s = String.Format("(C) Currency: . . . . . . . . {0:C}" & vbCrLf & _Di2015NewLine                    "(D) Decimal:. . . . . . . . . {0:D}" & vbCrLf & _Di2015NewLine                    "(E) Scientific: . . . . . . . {1:E}" & vbCrLf & _Di2015NewLine                    "(F) Fixed point:. . . . . . . {1:F}" & vbCrLf & _Di2015NewLine                    "(G) General:. . . . . . . . . {0:G}" & vbCrLf & _Di2015NewLine                    "    (default):. . . . . . . . {0} (default = 'G')" & vbCrLf & _Di2015NewLine                    "(N) Number: . . . . . . . . . {0:N}" & vbCrLf & _Di2015NewLine                    "(P) Percent:. . . . . . . . . {1:P}" & vbCrLf & _Di2015NewLine                    "(R) Round-trip: . . . . . . . {1:R}" & vbCrLf & _Di2015NewLine                    "(X) Hexadecimal:. . . . . . . {0:X}" & vbCrLf, _Di2015NewLine                    - 123, - 123.45F)Di2015NewLine  Console.WriteLine(s)Di2015NewLine
105786Di2015UniqueSeparator(C) Currency: . . . . . . . . ($123.00)Di2015NewLine(D) Decimal:. . . . . . . . . -123Di2015NewLine(E) Scientific: . . . . . . . -1.234500E+002Di2015NewLine(F) Fixed point:. . . . . . . -123.45Di2015NewLine(G) General:. . . . . . . . . -123Di2015NewLine    (default):. . . . . . . . -123 (default = 'G')Di2015NewLine(N) Number: . . . . . . . . . -123.00Di2015NewLine(P) Percent:. . . . . . . . . -12,345.00 %Di2015NewLine(R) Round-trip: . . . . . . . -123.45Di2015NewLine(X) Hexadecimal:. . . . . . . FFFFFF85Di2015NewLine
105963Di2015UniqueSeparator    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        object val = 'O';Di2015NewLine        Console.WriteLine(EnumEqual(TransactionStatus.Open, val));Di2015NewLineDi2015NewLine        val = 'R';Di2015NewLine        Console.WriteLine(EnumEqual(DirectionStatus.Left, val));Di2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool EnumEqual(Enum e, object boxedValue)Di2015NewLine    {                        Di2015NewLine        return e.Equals(Enum.ToObject(e.GetType(), (char)boxedValue));Di2015NewLine    }Di2015NewLineDi2015NewLine    public enum TransactionStatus { Open = 'O', Closed = 'C' };Di2015NewLine    public enum DirectionStatus { Left = 'L', Right = 'R' };Di2015NewLine
106010Di2015UniqueSeparator    private void MyForm_FormClosing(object sender, FormClosingEventArgs e)Di2015NewLine    {Di2015NewLine        Settings.Default.CustomWindowSettings = WindowSettings.Record(Di2015NewLine            Settings.Default.CustomWindowSettings,Di2015NewLine            this, Di2015NewLine            splitContainer1);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void MyForm_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        WindowSettings.Restore(Di2015NewLine            Settings.Default.CustomWindowSettings, Di2015NewLine            this, Di2015NewLine            splitContainer1);Di2015NewLine    }Di2015NewLine
106101Di2015UniqueSeparator[Guid("123565C4-C5FA-4512-A560-1D47F9FDFA20")]Di2015NewLinepublic interface IConfigDi2015NewLine{Di2015NewLine    [DispId(1)]Di2015NewLine    string Destination{ get; }Di2015NewLineDi2015NewLine    [DispId(2)]Di2015NewLine    void Unserialize();Di2015NewLineDi2015NewLine    [DispId(3)]Di2015NewLine    void Serialize();Di2015NewLine}Di2015NewLineDi2015NewLine[ComVisible(true)]Di2015NewLine[Guid("12AC8095-BD27-4de8-A30B-991940666927")]Di2015NewLine[ClassInterface(ClassInterfaceType.None)]Di2015NewLinepublic sealed class Config : IConfigDi2015NewLine{Di2015NewLine    public Config()Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public string DestinationDi2015NewLine    {Di2015NewLine    \get { return ""; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Serialize()Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Unserialize()Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
106156Di2015UniqueSeparator        IAsyncResult result = command.BeginExecuteNonQuery();Di2015NewLineDi2015NewLine        int count = 0;Di2015NewLine        while (!result.IsCompleted)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Waiting ({0})", count++);Di2015NewLine            System.Threading.Thread.Sleep(1000);Di2015NewLine        }Di2015NewLine        Console.WriteLine("Command complete. Affected {0} rows.",Di2015NewLine        command.EndExecuteNonQuery(result));Di2015NewLine
106469Di2015UniqueSeparatorinterface IDi2015NewLine{Di2015NewLine    void C();Di2015NewLine}Di2015NewLineDi2015NewLineclass BaseClassDi2015NewLine{Di2015NewLine    public void A() { MessageBox.Show("A"); }Di2015NewLine    public void B() { MessageBox.Show("B"); }Di2015NewLine}Di2015NewLineDi2015NewLineclass Derived : IDi2015NewLine{Di2015NewLine    public void C()Di2015NewLine    {Di2015NewLine        b.A();Di2015NewLine        b.B();Di2015NewLine    }Di2015NewLineDi2015NewLine    private BaseClass b;Di2015NewLine}Di2015NewLine
107352Di2015UniqueSeparator<%# DataBinder.Eval (Container.DataItem, "Bucket.Property" ) %>Di2015NewLine
107448Di2015UniqueSeparatorView > MetaInfo > Raw:Header,Schema,Rows // important, otherwise you get very basic info from the next stepDi2015NewLineDi2015NewLineView > MetaInfo > Show!Di2015NewLine
107940Di2015UniqueSeparatorconst string wiaFormatJPEG = "{B96B3CAE-0728-11D3-9D7B-0000F81EF32E}";Di2015NewLineCommonDialogClass wiaDiag = new CommonDialogClass();Di2015NewLineWIA.ImageFile wiaImage = null;Di2015NewLineDi2015NewLinewiaImage = wiaDiag.ShowAcquireImage(Di2015NewLine        WiaDeviceType.UnspecifiedDeviceType, Di2015NewLine        WiaImageIntent.GrayscaleIntent, Di2015NewLine        WiaImageBias.MaximizeQuality, Di2015NewLine        wiaFormatJPEG, true, true, false);Di2015NewLineDi2015NewLineWIA.Vector vector = wiaImage.FileData;Di2015NewLine
107940Di2015UniqueSeparatorImage i = Image.FromStream(new MemoryStream((byte[])vector.get_BinaryData()));Di2015NewLinei.Save(filename)Di2015NewLine
107979Di2015UniqueSeparatorpublic class CustomGUIElement    Di2015NewLine{Di2015NewLine    public void PerformClick()Di2015NewLine    {Di2015NewLine        OnClick(EventArgs.Empty);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected virtual void OnClick(EventArgs e)Di2015NewLine    {Di2015NewLine        if (Click != null)Di2015NewLine            Click(this, e);Di2015NewLine    }Di2015NewLine}Di2015NewLine
107979Di2015UniqueSeparatorpublic void CustomForm_Click(object sender, MouseEventArgs e)        Di2015NewLine{Di2015NewLine    _elements[0].PerformClick();Di2015NewLine}Di2015NewLine
108045Di2015UniqueSeparator//get the filesDi2015NewLineXElement xe1 = XElement.Load(string_file_path_1);Di2015NewLineXElement xe2 = XElement.Load(string_file_path_2);Di2015NewLineDi2015NewLine//Give me all XML that has a filter of 'filter'.Di2015NewLinevar filter_elements1 = from p in xe1.Descendants("filter") select p;Di2015NewLinevar filter_elements2 = from p in xe2.Descendants("filter") select p;Di2015NewLinevar filter_elements = filter_elements1.Union(filter_elements2);Di2015NewLineDi2015NewLine//Give me all XML that has a title of 'Title 1'.Di2015NewLinevar title1 = from p in xe1.Descendants("title") where p.Value.Equals("Title 1") select p;Di2015NewLinevar title2 = from p in xe2.Descendants("title") where p.Value.Equals("Title 1") select p;Di2015NewLinevar titles = title1.Union(title2);Di2015NewLine
108045Di2015UniqueSeparatorXElement xe1 = XElement.Load(string_file_path_1);Di2015NewLineXElement xe2 = XElement.Load(string_file_path_2);Di2015NewLinevar _filter_elements = (from p1 in xe1.Descendants("filter") select p1).Union(from p2 in xe2.Descendants("filter") select p2);Di2015NewLinevar _titles = (from p1 in xe1.Descendants("title") where p1.Value.Equals("Title 1") select p1).Union(from p2 in xe2.Descendants("title") where p2.Value.Equals("Title 1") select p2);Di2015NewLine
108045Di2015UniqueSeparatorforeach (var v in filter_elements)Di2015NewLine    Response.Write("value of filter element" + v.Value + "<br />");Di2015NewLine
108122Di2015UniqueSeparatorType GetNullableType(Type type) {Di2015NewLine    // Use Nullable.GetUnderlyingType() to remove the Nullable<T> wrapper if type is already nullable.Di2015NewLine    type = Nullable.GetUnderlyingType(type);Di2015NewLine    if (type.IsValueType)Di2015NewLine        return typeof(Nullable<>).MakeGenericType(type);Di2015NewLine    elseDi2015NewLine        return type;Di2015NewLine}Di2015NewLine
108122Di2015UniqueSeparatortype
108122Di2015UniqueSeparatorNullable<T>
108316Di2015UniqueSeparatorpublic class TitleButton : ComponentDi2015NewLine{Di2015NewLine   // ... Di2015NewLine}Di2015NewLineDi2015NewLine[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]Di2015NewLinepublic List<TitleButton> TitleButtonsDi2015NewLine{Di2015NewLine   // ...Di2015NewLine}Di2015NewLine
109359Di2015UniqueSeparator//Some types we'll needDi2015NewLineenum JobsDi2015NewLine{Di2015NewLine    Programmer,Di2015NewLine    SalesmanDi2015NewLine}Di2015NewLineDi2015NewLineenum DrinkCodeDi2015NewLine{Di2015NewLine    Coffee,Di2015NewLine    Coke,Di2015NewLine    MountainDew,Di2015NewLine    GinAndTonicDi2015NewLine}Di2015NewLineDi2015NewLineinternal class DrinkDi2015NewLine{Di2015NewLine    public DrinkCode Code { get; set; }Di2015NewLine    public string Name { get; set; }Di2015NewLine    public bool Caffeinated { get; set; }Di2015NewLine    public bool Alcoholic { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineinternal class PersonDi2015NewLine{Di2015NewLine    public string Name { get; set; }Di2015NewLineDi2015NewLine    public Jobs Job { get; set; }Di2015NewLineDi2015NewLine    public DrinkCode Drink { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLine// the form classDi2015NewLinepublic partial class Form1 : FormDi2015NewLine{Di2015NewLineDi2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Form1_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        BindingSource bindingSource = new BindingSource();Di2015NewLine        bindingSource.DataSource = FindPersons();Di2015NewLine        this.dataGridView1.DataSource = bindingSource;Di2015NewLineDi2015NewLine        DataGridViewComboBoxColumn column =Di2015NewLine            new DataGridViewComboBoxColumn()Di2015NewLine        {Di2015NewLine            column.DataPropertyName = "Drink";Di2015NewLine            column.HeaderText = "beverage";Di2015NewLine            column.DisplayMember = "Name";Di2015NewLine            column.ValueMember = "Code";Di2015NewLine            column.DataSource = BuildDrinksList();Di2015NewLine        }Di2015NewLineDi2015NewLine       dataGridView1.Columns.Add(column);Di2015NewLine       //handling this event is the nub of the solutionDi2015NewLine       dataGridView1.EditingControlShowing += Di2015NewLine           new DataGridViewEditingControlShowingEventHandler(dataGridView1_EditingControlShowing);Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    void dataGridView1_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)Di2015NewLine    {Di2015NewLine        //When the focus goes into the combo box cell, we can update the contents of the dropdownDi2015NewLine        // Di2015NewLine        DataGridViewComboBoxEditingControl comboBox = e.Control as DataGridViewComboBoxEditingControl;Di2015NewLine        //if you have more than one drop down this is not going to be good enough, but hey, it's an example!Di2015NewLine        if (comboBox != null)Di2015NewLine        {Di2015NewLine            BindingSource bindingSource = this.dataGridView1.DataSource as BindingSource;Di2015NewLine            Person person = bindingSource.Current as Person;Di2015NewLine            BindingList<Drink> bindingList = t his.BuildDrinksList(person);Di2015NewLine            comboBox.DataSource = bindingList;Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    //the rest of this is just data to make the example workDi2015NewLine    private BindingList<Drink> BuildDrinksList()Di2015NewLine    {Di2015NewLine        var drinks = new BindingList<Drink>();Di2015NewLineDi2015NewLine        drinks.Add(new Drink() { Alcoholic = false, Caffeinated = true, Code = DrinkCode.Coffee, Name = "Coffee" });Di2015NewLine        drinks.Add(new Drink() { Alcoholic = false, Caffeinated = true, Code = DrinkCode.Coke, Name = "Coke" });Di2015NewLine        drinks.Add(new Drink() { Alcoholic = false, Caffeinated = true, Code = DrinkCode.MountainDew, Name = "Mountain Dew" });Di2015NewLine        drinks.Add(new Drink() { Alcoholic = true, Caffeinated = false, Code = DrinkCode.GinAndTonic, Name = "Gin and Tonic" });Di2015NewLineDi2015NewLine        return drinks;Di2015NewLine    }Di2015NewLineDi2015NewLine    private BindingList<Drink> BuildDrinksList(Person p)Di2015NewLine    {Di2015NewLine        var drinks = new BindingList<Drink>();Di2015NewLineDi2015NewLine        if (p.Job == Jobs.Programmer)Di2015NewLine        {Di2015NewLine            drinks.Add(new Drink() { Alcoholic = false, Caffeinated = true, Code = DrinkCode.Coffee, Name = "Coffee" });Di2015NewLine            drinks.Add(new Drink() { Alcoholic = false, Caffeinated = true, Code = DrinkCode.Coke, Name = "Coke" });Di2015NewLine            drinks.Add(new Drink() { Alcoholic = false, Caffeinated = true, Code = DrinkCode.MountainDew, Name = "Mountain Dew" });Di2015NewLine        }Di2015NewLine        if (p.Job == Jobs.Salesman)Di2015NewLine        {Di2015NewLine            drinks.Add(new Drink() { Alcoholic = true, Caffeinated = false, Code = DrinkCode.GinAndTonic, Name = "Gin and Tonic" });Di2015NewLine        }Di2015NewLine        return drinks;Di2015NewLine    }Di2015NewLineDi2015NewLine    private BindingList<Person> FindPersons()Di2015NewLine    {Di2015NewLine        BindingList<Person> bindingList = new BindingList<Person>();Di2015NewLine        bindingList.Add(new Person() { Job = Jobs.Programmer, Drink = DrinkCode.Coffee, Name = "steve" });Di2015NewLine        bindingList.Add(new Person() { Job = Jobs.Salesman, Drink = DrinkCode.GinAndTonic, Name = "john" });Di2015NewLine        return bindingList;Di2015NewLine    }Di2015NewLine}Di2015NewLine
109729Di2015UniqueSeparatorpublic MyClass(MyOtherClass inputObject): this(inputObject.ID, GetHelperText(inputObject) {}Di2015NewLineDi2015NewLineprivate static string GetHelperText(MyOtherClass o)Di2015NewLine{Di2015NewLine   using (var helper = o.CreateHelper())Di2015NewLine      return helper.Text;Di2015NewLine}Di2015NewLine
109872Di2015UniqueSeparatorDateTime
109872Di2015UniqueSeparatorstruct
109872Di2015UniqueSeparatorclass
109872Di2015UniqueSeparatorDateTime
109872Di2015UniqueSeparatorint
109872Di2015UniqueSeparatornull
109872Di2015UniqueSeparatorDateTime
109872Di2015UniqueSeparatorDateTime
109872Di2015UniqueSeparatornull
109872Di2015UniqueSeparatorDateTime?
109872Di2015UniqueSeparatorNullable<DateTime>
109872Di2015UniqueSeparatorNullable
109872Di2015UniqueSeparatorstruct
109992Di2015UniqueSeparatorforeach(PropertyInfo info in item.GetType().GetProperties())Di2015NewLine    Console.WriteLine("{0} = {1}", info.Name, info.GetValue(item, null));Di2015NewLine
110372Di2015UniqueSeparatorBULK INSERT your_database.your_schema.your_table FROM your_file WITH (FIRE_TRIGGERS )Di2015NewLine
110621Di2015UniqueSeparatorvalue = obj.GetType().GetProperty("Foo").GetAccessors()[0].Invoke(obj,null);Di2015NewLine
110621Di2015UniqueSeparatorobj.GetType().GetProperty("Foo").GetAccessors()[1].Invoke(obj,new object[]{value});Di2015NewLine
110621Di2015UniqueSeparatordelegate RET FunctionDelegate<T, RET>(T t);Di2015NewLineDi2015NewLinevoid func<T, RET>(FunctionDelegate<T,RET> function, T param, ...)Di2015NewLine{Di2015NewLine    ...Di2015NewLine    return function(param);Di2015NewLine}Di2015NewLine
110621Di2015UniqueSeparatorSomeClass obj = new SomeClass();Di2015NewLinefunc<SomeClass,int>(delegate(SomeClass o){return o.Foo;},obj);Di2015NewLine
110769Di2015UniqueSeparatorprivate string DoItalicsAndBold (string text)Di2015NewLine{Di2015NewLine    // <strong> must go first:Di2015NewLine    text = Regex.Replace (text, @"(\\*\\*|__) (?=\\S) (.+?[*_]*) (?<=\\S) \\1", Di2015NewLine                          new MatchEvaluator (BoldEvaluator),Di2015NewLine                          RegexOptions.IgnorePatternWhitespace | RegexOptions.Singleline);Di2015NewLineDi2015NewLine    // Then <em>:Di2015NewLine    text = Regex.Replace (text, @"(\\*|_) (?=\\S) (.+?) (?<=\\S) \\1",Di2015NewLine                          new MatchEvaluator (ItalicsEvaluator),Di2015NewLine                          RegexOptions.IgnorePatternWhitespace | RegexOptions.Singleline);Di2015NewLine    return text;Di2015NewLine}Di2015NewLineDi2015NewLineprivate string ItalicsEvaluator (Match match)Di2015NewLine{Di2015NewLine    return string.Format ("<em>{0}</em>", match.Groups[2].Value);Di2015NewLine}Di2015NewLineDi2015NewLineprivate string BoldEvaluator (Match match)Di2015NewLine{Di2015NewLine    return string.Format ("<strong>{0}</strong>", match.Groups[2].Value);Di2015NewLine}Di2015NewLine
111221Di2015UniqueSeparatorOutputStream
111221Di2015UniqueSeparatorStream
111221Di2015UniqueSeparatorFlush
111221Di2015UniqueSeparator    public void WriteDocument(HttpResponse response) {Di2015NewLine        StreamCopy(response.OutputStream, stream_);Di2015NewLine        response.End();Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void StreamCopy(Stream dest, Stream src) {Di2015NewLine        byte[] buffer = new byte[4 * 1024];Di2015NewLine        int n = 1;Di2015NewLine        while (n > 0) {Di2015NewLine            n = src.Read(buffer, 0, buffer.Length);Di2015NewLine            dest.Write(buffer, 0, n);Di2015NewLine        }Di2015NewLine        dest.Flush();Di2015NewLine    }Di2015NewLine
112593Di2015UniqueSeparator    protected override void WndProc(ref Message m)Di2015NewLine    {Di2015NewLine        if (m.Msg == (int)WM_NCHITTEST)Di2015NewLine            m.Result = (IntPtr)HTTRANSPARENT;Di2015NewLine        elseDi2015NewLine            base.WndProc(ref m);Di2015NewLine    }Di2015NewLine
112711Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Drawing;Di2015NewLineusing System.IO;Di2015NewLineusing System.Linq;Di2015NewLineDi2015NewLinenamespace ImageDimensionsDi2015NewLine{Di2015NewLine    public static class ImageHelperDi2015NewLine    {Di2015NewLine        const string errorMessage = "Could not recognise image format.";Di2015NewLineDi2015NewLine        private static Dictionary<byte[], Func<BinaryReader, Size>> imageFormatDecoders = new Dictionary<byte[], Func<BinaryReader, Size>>()Di2015NewLine        {Di2015NewLine            { new byte[]{ 0x42, 0x4D }, DecodeBitmap},Di2015NewLine            { new byte[]{ 0x47, 0x49, 0x46, 0x38, 0x37, 0x61 }, DecodeGif },Di2015NewLine            { new byte[]{ 0x47, 0x49, 0x46, 0x38, 0x39, 0x61 }, DecodeGif },Di2015NewLine            { new byte[]{ 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A }, DecodePng },Di2015NewLine            { new byte[]{ 0xff, 0xd8 }, DecodeJfif },Di2015NewLine        };Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Gets the dimensions of an image.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="path">The path of the image to get the dimensions of.</param>Di2015NewLine        /// <returns>The dimensions of the specified image.</returns>Di2015NewLine        /// <exception cref="ArgumentException">The image was of an unrecognised format.</exception>Di2015NewLine        public static Size GetDimensions(string path)Di2015NewLine        {Di2015NewLine            using (BinaryReader binaryReader = new BinaryReader(File.OpenRead(path)))Di2015NewLine            {Di2015NewLine                tryDi2015NewLine                {Di2015NewLine                    return GetDimensions(binaryReader);Di2015NewLine                }Di2015NewLine                catch (ArgumentException e)Di2015NewLine                {Di2015NewLine                    if (e.Message.StartsWith(errorMessage))Di2015NewLine                    {Di2015NewLine                        throw new ArgumentException(errorMessage, "path", e);Di2015NewLine                    }Di2015NewLine                    elseDi2015NewLine                    {Di2015NewLine                        throw e;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Gets the dimensions of an image.Di2015NewLine        /// </summary>Di2015NewLine        /// <param name="path">The path of the image to get the dimensions of.</param>Di2015NewLine        /// <returns>The dimensions of the specified image.</returns>Di2015NewLine        /// <exception cref="ArgumentException">The image was of an unrecognised format.</exception>    Di2015NewLine        public static Size GetDimensions(BinaryReader binaryReader)Di2015NewLine        {Di2015NewLine            int maxMagicBytesLength = imageFormatDecoders.Keys.OrderByDescending(x => x.Length).First().Length;Di2015NewLineDi2015NewLine            byte[] magicBytes = new byte[maxMagicBytesLength];Di2015NewLineDi2015NewLine            for (int i = 0; i < maxMagicBytesLength; i += 1)Di2015NewLine            {Di2015NewLine                magicBytes[i] = binaryReader.ReadByte();Di2015NewLineDi2015NewLine                foreach(var kvPair in imageFormatDecoders)Di2015NewLine                {Di2015NewLine                    if (magicBytes.StartsWith(kvPair.Key))Di2015NewLine                    {Di2015NewLine                        return kvPair.Value(binaryReader);Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            throw new ArgumentException(errorMessage, "binaryReader");Di2015NewLine        }Di2015NewLineDi2015NewLine        private static bool StartsWith(this byte[] thisBytes, byte[] thatBytes)Di2015NewLine        {Di2015NewLine            for(int i = 0; i < thatBytes.Length; i+= 1)Di2015NewLine            {Di2015NewLine                if (thisBytes[i] != thatBytes[i])Di2015NewLine                {Di2015NewLine                    return false;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            return true;Di2015NewLine        }Di2015NewLineDi2015NewLine        private static short ReadLittleEndianInt16(this BinaryReader binaryReader)Di2015NewLine        {Di2015NewLine            byte[] bytes = new byte[sizeof(short)];Di2015NewLine            for (int i = 0; i < sizeof(short); i += 1)Di2015NewLine            {Di2015NewLine                bytes[sizeof(short) - 1 - i] = binaryReader.ReadByte();Di2015NewLine            }Di2015NewLine            return BitConverter.ToInt16(bytes, 0);Di2015NewLine        }Di2015NewLineDi2015NewLine        private static int ReadLittleEndianInt32(this BinaryReader binaryReader)Di2015NewLine        {Di2015NewLine            byte[] bytes = new byte[sizeof(int)];Di2015NewLine            for (int i = 0; i < sizeof(int); i += 1)Di2015NewLine            {Di2015NewLine                bytes[sizeof(int) - 1 - i] = binaryReader.ReadByte();Di2015NewLine            }Di2015NewLine            return BitConverter.ToInt32(bytes, 0);Di2015NewLine        }Di2015NewLineDi2015NewLine        private static Size DecodeBitmap(BinaryReader binaryReader)Di2015NewLine        {Di2015NewLine            binaryReader.ReadBytes(16);Di2015NewLine            int width = binaryReader.ReadInt32();Di2015NewLine            int height = binaryReader.ReadInt32();Di2015NewLine            return new Size(width, height);Di2015NewLine        }Di2015NewLineDi2015NewLine        private static Size DecodeGif(BinaryReader binaryReader)Di2015NewLine        {Di2015NewLine            int width = binaryReader.ReadInt16();Di2015NewLine            int height = binaryReader.ReadInt16();Di2015NewLine            return new Size(width, height);Di2015NewLine        }Di2015NewLineDi2015NewLine        private static Size DecodePng(BinaryReader binaryReader)Di2015NewLine        {Di2015NewLine            binaryReader.ReadBytes(8);Di2015NewLine            int width = binaryReader.ReadLittleEndianInt32();Di2015NewLine            int height = binaryReader.ReadLittleEndianInt32();Di2015NewLine            return new Size(width, height);Di2015NewLine        }Di2015NewLineDi2015NewLine        private static Size DecodeJfif(BinaryReader binaryReader)Di2015NewLine        {Di2015NewLine            while (binaryReader.ReadByte() == 0xff)Di2015NewLine            {Di2015NewLine                byte marker = binaryReader.ReadByte();Di2015NewLine                short chunkLength = binaryReader.ReadLittleEndianInt16();Di2015NewLineDi2015NewLine                if (marker == 0xc0)Di2015NewLine                {Di2015NewLine                    binaryReader.ReadByte();Di2015NewLineDi2015NewLine                    int height = binaryReader.ReadLittleEndianInt16();Di2015NewLine                    int width = binaryReader.ReadLittleEndianInt16();Di2015NewLine                    return new Size(width, height);Di2015NewLine                }Di2015NewLineDi2015NewLine                binaryReader.ReadBytes(chunkLength - 2);Di2015NewLine            }Di2015NewLineDi2015NewLine            throw new ArgumentException(errorMessage);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
113442Di2015UniqueSeparator2 3 4 + *
113442Di2015UniqueSeparator(+ 3 4)
113442Di2015UniqueSeparator2 (+ 3 4) *
113442Di2015UniqueSeparator(* 2 (+ 3 4))
113442Di2015UniqueSeparator2 * (3 + 4)
113442Di2015UniqueSeparator**
113442Di2015UniqueSeparator2 3 4 ** **
113442Di2015UniqueSeparator(** 2 (** 3 4))
113442Di2015UniqueSeparator2 3 ** 4 **
113442Di2015UniqueSeparator(** (** 2 3) 4)
113442Di2015UniqueSeparator(2 ** 3) ** 4
113442Di2015UniqueSeparator-
113442Di2015UniqueSeparator/
113461Di2015UniqueSeparatorprivate static Type SafeGetSingleGenericParameter(Type type, Type interfaceType)Di2015NewLine    {Di2015NewLine        if (!interfaceType.IsGenericType || interfaceType.GetGenericArguments().Count() != 1)Di2015NewLine            return type;Di2015NewLineDi2015NewLine        foreach (Type baseInterface in type.GetInterfaces())Di2015NewLine        {Di2015NewLine            if (baseInterface.IsGenericType &&Di2015NewLine                baseInterface.GetGenericTypeDefinition() == interfaceType.GetGenericTypeDefinition())Di2015NewLine            {Di2015NewLine                return baseInterface.GetGenericArguments().Single();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return type;Di2015NewLine    }Di2015NewLine
113933Di2015UniqueSeparatorthis.BackColor = Color.Fuchsia;Di2015NewLinethis.TransparencyKey = Color.Fuchsia;Di2015NewLine
113933Di2015UniqueSeparatorpublic const int WM_NCHITTEST = 0x84;Di2015NewLinepublic const int HTTRANSPARENT = -1;Di2015NewLineDi2015NewLineprotected override void WndProc(ref Message message)Di2015NewLine{Di2015NewLine    if ( message.Msg == (int)WM_NCHITTEST )Di2015NewLine    {Di2015NewLine        message.Result = (IntPtr)HTTRANSPARENT;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        base.WndProc( ref message );Di2015NewLine    }Di2015NewLine}Di2015NewLine
113948Di2015UniqueSeparatormyObject.Field1 = "value";Di2015NewLineDi2015NewLine// Db is the datacontextDi2015NewLinedb.MyObjects.InsertOnSubmit(myObject);Di2015NewLinedb.SubmitChanges();Di2015NewLineDi2015NewLine// You can retrieve the id from the objectDi2015NewLineint id = myObject.ID;Di2015NewLine
114636Di2015UniqueSeparator<EditItemTemplate>Di2015NewLine    <asp:RadioButtonList ID="RadioButtonList1" runat="server" Di2015NewLine        DataSourceID="LookupSqlDataSource" DataTextField="LOOKUPITEM_DESCRIPTION" Di2015NewLine        DataValueField="LOOKUPITEM_ID" SelectedValue='<%# Bind("ITEM_ID")%>'>Di2015NewLine    </asp:RadioButtonList>Di2015NewLine</EditItemTemplate>Di2015NewLineDi2015NewLine<InsertItemTemplate>Di2015NewLine    <asp:RadioButtonList ID="RadioButtonList1" runat="server" Di2015NewLine        DataSourceID="LookupSqlDataSource" DataTextField="LOOKUPITEM_DESCRIPTION" Di2015NewLine        DataValueField="LOOKUPITEM_ID" SelectedValue='<%# Bind("ITEM_ID")%>'>Di2015NewLine    </asp:RadioButtonList>Di2015NewLine</InsertItemTemplate>Di2015NewLine
114693Di2015UniqueSeparatorcatch (Exception ex){}Di2015NewLine
114693Di2015UniqueSeparatorcatch (Exception ex){ return false; }Di2015NewLine
114809Di2015UniqueSeparatorpublic interface IReadOnlyCustomerDi2015NewLine{Di2015NewLine    String Name { get; }Di2015NewLine    int Age { get; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Customer : IReadOnlyCustomerDi2015NewLine{Di2015NewLine    private string m_name;Di2015NewLine    private int m_age;Di2015NewLineDi2015NewLine    public string NameDi2015NewLine    {Di2015NewLine        get { return m_name; }Di2015NewLine        set { m_name = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public int AgeDi2015NewLine    {Di2015NewLine        get { return m_age; }Di2015NewLine        set { m_age = value; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
114937Di2015UniqueSeparatorvar startInfo = new ProcessStartInfo();Di2015NewLinestartInfo.WorkingDirectory = // working directoryDi2015NewLine// set additional properties Di2015NewLineDi2015NewLineProcess proc = Process.Start(startInfo);Di2015NewLine
114952Di2015UniqueSeparatorpublic class LazyMatrixDi2015NewLine{Di2015NewLine    public static implicit operator Matrix(LazyMatrix l)Di2015NewLine    {Di2015NewLine        Matrix m = new Matrix();Di2015NewLine        foreach (Matrix x in l.Pending)Di2015NewLine        {Di2015NewLine            for (int i = 0; i < 2; ++i)Di2015NewLine                for (int j = 0; j < 2; ++j)Di2015NewLine                    m.Contents[i, j] += x.Contents[i, j];Di2015NewLine        }Di2015NewLineDi2015NewLine        return m;Di2015NewLine    }Di2015NewLineDi2015NewLine    public List<Matrix> Pending = new List<Matrix>();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MatrixDi2015NewLine{Di2015NewLine    public int[,] Contents = { { 0, 0 }, { 0, 0 } };Di2015NewLineDi2015NewLine    public static LazyMatrix operator+(Matrix a, Matrix b)Di2015NewLine    {Di2015NewLine        LazyMatrix l = new LazyMatrix();Di2015NewLine        l.Pending.Add(a);Di2015NewLine        l.Pending.Add(b);Di2015NewLine        return l;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static LazyMatrix operator+(Matrix a, LazyMatrix b)Di2015NewLine    {Di2015NewLine        b.Pending.Add(a);Di2015NewLine        return b;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        Matrix a = new Matrix();Di2015NewLine        Matrix b = new Matrix();Di2015NewLine        Matrix c = new Matrix();Di2015NewLine        Matrix d = new Matrix();Di2015NewLineDi2015NewLine        a.Contents[0, 0] = 1;Di2015NewLine        b.Contents[1, 0] = 4;Di2015NewLine        c.Contents[0, 1] = 9;Di2015NewLine        d.Contents[1, 1] = 16;Di2015NewLineDi2015NewLine        Matrix m = a + b + c + d;Di2015NewLineDi2015NewLine        for (int i = 0; i < 2; ++i)Di2015NewLine        {Di2015NewLine            for (int j = 0; j < 2; ++j)Di2015NewLine            {Di2015NewLine                System.Console.Write(m.Contents[i, j]);Di2015NewLine                System.Console.Write("  ");Di2015NewLine            }Di2015NewLine            System.Console.WriteLine();Di2015NewLine        }Di2015NewLineDi2015NewLine        System.Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLine
115106Di2015UniqueSeparatorproperty System::ServiceProcess::ServiceControllerStatus Status  Di2015NewLine{  Di2015NewLine    System::ServiceProcess::ServiceControllerStatus get()  Di2015NewLine    {  Di2015NewLine        return (System::ServiceProcess::ServiceControllerStatus)_status->dwCurrentState;   Di2015NewLine    }  Di2015NewLine}Di2015NewLine
115351Di2015UniqueSeparatoreditBox.DataBindings.Add("Text", car, "Name");Di2015NewLine
115440Di2015UniqueSeparatorDateTime expirationDate = new DateTime(2008, 1, 31); // random dateDi2015NewLinestring lastTwoDigitsOfYear = expirationDate.ToString("yy");Di2015NewLine
115905Di2015UniqueSeparator[DllImport("user32.dll")]Di2015NewLinestatic extern IntPtr GetForegroundWindow();Di2015NewLineDi2015NewLine[DllImport("user32.dll")]Di2015NewLinestatic extern int GetWindowText(IntPtr hWnd, StringBuilder text, int count);Di2015NewLineDi2015NewLineprivate string GetActiveWindowTitle()Di2015NewLine{Di2015NewLine    const int nChars = 256;Di2015NewLine    StringBuilder Buff = new StringBuilder(nChars);Di2015NewLine    IntPtr handle = GetForegroundWindow();Di2015NewLineDi2015NewLine    if (GetWindowText(handle, Buff, nChars) > 0)Di2015NewLine    {Di2015NewLine        return Buff.ToString();Di2015NewLine    }Di2015NewLine    return null;Di2015NewLine}Di2015NewLine
115965Di2015UniqueSeparatorint parentID = Convert.ToInt32(Request.QueryString["parentId"]);Di2015NewLineDi2015NewLineList<string> result =Di2015NewLine  db.ParentsDi2015NewLine  .Where(p => p.ParentId == parentID)Di2015NewLine  //.Where(p => p.ParentChildLookup.Children.Any())Di2015NewLine  //.ToList()Di2015NewLine  .Select(p => Di2015NewLine    "Name: " + p.ParentName + "<br />" + Di2015NewLine    "Children: " + String.Join(", ", p.ParentChildLookup.Children.Select(c => c.Name).ToArray() + "<br />"Di2015NewLine)).ToList();Di2015NewLine
116061Di2015UniqueSeparatorEnvironment.GetFolderPath(Environment.SpecialFolder.MyPictures);Di2015NewLine
116098Di2015UniqueSeparatorforeach ( Process p in System.Diagnostics.Process.GetProcessesByName("winword") )Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        p.Kill();Di2015NewLine        p.WaitForExit(); // possibly with a timeoutDi2015NewLine    }Di2015NewLine    catch ( Win32Exception winException )Di2015NewLine    {Di2015NewLine        // process was terminating or can't be terminated - deal with itDi2015NewLine    }Di2015NewLine    catch ( InvalidOperationException invalidException )Di2015NewLine    {Di2015NewLine        // process has already exited - might be able to let this one goDi2015NewLine     }Di2015NewLine}Di2015NewLine
116098Di2015UniqueSeparatorNotSupportedException
116706Di2015UniqueSeparator<TextBlock Text="HelloWorld!"/>Di2015NewLine
116948Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections;Di2015NewLineusing System.Collections.Generic; Di2015NewLineDi2015NewLineclass Test{Di2015NewLineDi2015NewLine    //Prints the contents of any generic Stack by Di2015NewLine    //using generic type inference Di2015NewLine    public static void PrintStackContents<T>(Stack<T> s){Di2015NewLine        while(s.Count != 0){Di2015NewLine            Console.WriteLine(s.Pop()); Di2015NewLine        } Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void Main(String[] args){Di2015NewLineDi2015NewLine    Stack<int> s2 = new Stack<int>(); Di2015NewLine    s2.Push(4); Di2015NewLine    s2.Push(5); Di2015NewLine    s2.Push(6); Di2015NewLineDi2015NewLine    PrintStackContents(s2);     Di2015NewLineDi2015NewLine    Stack<string> s1 = new Stack<string>(); Di2015NewLine    s1.Push("One"); Di2015NewLine    s1.Push("Two"); Di2015NewLine    s1.Push("Three"); Di2015NewLineDi2015NewLine    PrintStackContents(s1); Di2015NewLine    }Di2015NewLine}Di2015NewLine
116948Di2015UniqueSeparatorimport java.util.*; Di2015NewLineDi2015NewLineclass Test{Di2015NewLineDi2015NewLine    //Prints the contents of any generic Stack by Di2015NewLine    //specifying wildcard type Di2015NewLine    public static void PrintStackContents(Stack<?> s){Di2015NewLine        while(!s.empty()){Di2015NewLine            System.out.println(s.pop()); Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void main(String[] args){Di2015NewLineDi2015NewLine    Stack <Integer> s2 = new Stack <Integer>(); Di2015NewLine    s2.push(4); Di2015NewLine    s2.push(5); Di2015NewLine    s2.push(6); Di2015NewLineDi2015NewLine    PrintStackContents(s2);     Di2015NewLineDi2015NewLine    Stack<String> s1 = new Stack<String>(); Di2015NewLine    s1.push("One"); Di2015NewLine    s1.push("Two"); Di2015NewLine    s1.push("Three");   Di2015NewLineDi2015NewLine    PrintStackContents(s1); Di2015NewLine    }Di2015NewLine}Di2015NewLine
117217Di2015UniqueSeparatorString xsd =Di2015NewLine@"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>Di2015NewLine   <xsd:element name='root'>Di2015NewLine    <xsd:complexType>Di2015NewLine     <xsd:sequence>Di2015NewLine      <xsd:element name='child1' minOccurs='1' maxOccurs='1'>Di2015NewLine       <xsd:complexType>Di2015NewLine        <xsd:sequence>Di2015NewLine         <xsd:element name='grandchild1' minOccurs='1' maxOccurs='1'/>Di2015NewLine         <xsd:element name='grandchild2' minOccurs='1' maxOccurs='2'/>Di2015NewLine        </xsd:sequence>Di2015NewLine       </xsd:complexType>Di2015NewLine      </xsd:element>Di2015NewLine     </xsd:sequence>Di2015NewLine    </xsd:complexType>Di2015NewLine   </xsd:element>Di2015NewLine  </xsd:schema>";Di2015NewLineString xml = @"<?xml version='1.0'?>Di2015NewLine<root>Di2015NewLine    <child1>Di2015NewLine        <grandchild1>alpha</grandchild1>Di2015NewLine        <grandchild2>beta</grandchild2>Di2015NewLine    </child1>Di2015NewLine</root>";Di2015NewLineXmlSchemaSet schemas = new XmlSchemaSet();Di2015NewLineschemas.Add("", XmlReader.Create(new StringReader(xsd)));Di2015NewLineXDocument doc = XDocument.Load(XmlReader.Create(new StringReader(xml)));Di2015NewLineBoolean errors = false;Di2015NewLinedoc.Validate(schemas, (sender, e) =>Di2015NewLine{Di2015NewLine    Console.WriteLine(e.Message);Di2015NewLine    errors = true;Di2015NewLine}, true);Di2015NewLineerrors = false;Di2015NewLineXElement child = doc.Element("root").Element("child1");Di2015NewLinechild.Validate(child.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>Di2015NewLine{Di2015NewLine    Console.WriteLine(e.Message);Di2015NewLine    errors = true;Di2015NewLine});Di2015NewLine
117217Di2015UniqueSeparatorAssembly assembly = Assembly.GetExecutingAssembly();Di2015NewLine// you can use reflector to get the full namespace of your embedded resource hereDi2015NewLineStream stream = assembly.GetManifestResourceStream("AssemblyRootNamespace.Resources.XMLSchema.xsd");Di2015NewLineXmlSchemaSet schemas = new XmlSchemaSet();Di2015NewLineschemas.Add(null, XmlReader.Create(stream));Di2015NewLine
117374Di2015UniqueSeparator[XmlIgnore]Di2015NewLinepublic MyThing MyThing { get; set; }Di2015NewLineDi2015NewLine[XmlElement("MyThing")]Di2015NewLine[EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]Di2015NewLinepublic string MyThingForSerializationDi2015NewLine{Di2015NewLine    get { return //convert MyThing to string; }Di2015NewLine    set { MyThing = //convert string to MyThing; }Di2015NewLine}Di2015NewLine
117766Di2015UniqueSeparator        SortedList<DateTime,Control> sl = new SortedList<DateTime,Control>();Di2015NewLine        foreach (Control i in mainContent.Controls)Di2015NewLine        {Di2015NewLine            if (i.GetType().BaseType == typeof(MyBaseType))Di2015NewLine            {Di2015NewLine                MyBaseType iTyped = (MyBaseType)i;Di2015NewLine                sl.Add(iTyped.Date, iTyped);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        foreach (MyBaseType j in sl.Values)Di2015NewLine        {Di2015NewLine            j.SendToBack();Di2015NewLine        }Di2015NewLine
117980Di2015UniqueSeparator/// <summary>Di2015NewLine/// The GetForegroundWindow function returns a handle to the foreground window.Di2015NewLine/// </summary>Di2015NewLine[DllImport("user32.dll")]Di2015NewLinestatic extern IntPtr GetForegroundWindow();Di2015NewLine
117980Di2015UniqueSeparator[DllImport("user32.dll", SetLastError=true)]Di2015NewLinestatic extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);Di2015NewLine
118170Di2015UniqueSeparatorthis
118170Di2015UniqueSeparatorthis.Bounds = Screen.PrimaryScreen.Bounds;Di2015NewLinethis.TopMost = true;Di2015NewLine
118298Di2015UniqueSeparatorfind
118298Di2015UniqueSeparatorattr
118306Di2015UniqueSeparatorvar returnString = Regex.Replace(s,@"[!@#\\$%\\^*_\\+=\\\\]"," ");Di2015NewLine
118438Di2015UniqueSeparatorpublic string Name Di2015NewLine{Di2015NewLine  getDi2015NewLine  {Di2015NewLine    return this._Name;Di2015NewLine  }Di2015NewLine  setDi2015NewLine  {Di2015NewLine    if (value != this._Name)Di2015NewLine    {Di2015NewLine        this._Name= value;Di2015NewLine        NotifyPropertyChanged("Name");Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
118438Di2015UniqueSeparatorpublic event EventHandler NameChanged;Di2015NewLineDi2015NewLineDi2015NewLinepublic string Name Di2015NewLine{Di2015NewLine  getDi2015NewLine  {Di2015NewLine    return this._Name;Di2015NewLine  }Di2015NewLine  setDi2015NewLine  {Di2015NewLine    if (value != this._Name)Di2015NewLine    {Di2015NewLine        this._Name= value;Di2015NewLine        if (NameChanged != null) NameChanged(this, EventArgs.Empty);Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
119572Di2015UniqueSeparatorFile
119572Di2015UniqueSeparatorReadLines
119572Di2015UniqueSeparatorReadAllLines
119572Di2015UniqueSeparatorvar lineCount = File.ReadLines(@"C:\\file.txt").Count();Di2015NewLine
119572Di2015UniqueSeparatorvar lineCount = File.ReadAllLines(@"C:\\file.txt").Length;Di2015NewLine
119572Di2015UniqueSeparatorvar lineCount = 0;Di2015NewLineusing (var reader = File.OpenText(@"C:\\file.txt"))Di2015NewLine{Di2015NewLine    while (reader.ReadLine() != null)Di2015NewLine    {Di2015NewLine        lineCount++;Di2015NewLine    }Di2015NewLine}Di2015NewLine
119599Di2015UniqueSeparatorlock(someobject) {...}
119599Di2015UniqueSeparatorMutex lock = new Mutex("mymutex", false);Di2015NewLineDi2015NewLinelock.WaitOne();Di2015NewLineDi2015NewLine// access fileDi2015NewLineDi2015NewLinelock.ReleaseMutex();Di2015NewLine
119735Di2015UniqueSeparatorMicrosoft.SqlServer.Management.Smo.Server(ServerName).Settings.DefaultFileDi2015NewLine
119735Di2015UniqueSeparatorMicrosoft.SqlServer.Management.Smo.Server(ServerName).Information.RootDirectory + "\\\\DATA\\\\"Di2015NewLine
121107Di2015UniqueSeparatorint value = 0x48454C4F;Di2015NewLineConsole.WriteLine(Encoding.ASCII.GetString(Di2015NewLine  BitConverter.GetBytes(value).Reverse().ToArray()Di2015NewLine));Di2015NewLine
121537Di2015UniqueSeparatorPrepaid & Charge
121537Di2015UniqueSeparatorRegex badAmpersand = new Regex("&(?![a-zA-Z]{2,6};|#[0-9]{2,4};)");Di2015NewLine
121537Di2015UniqueSeparatorconst string goodAmpersand = "&";Di2015NewLine
121537Di2015UniqueSeparatorbadAmpersand.Replace(<your input>, goodAmpersand);
121537Di2015UniqueSeparatorString.Replace("&", "&")
121642Di2015UniqueSeparatorinternal struct Pair<T, K> : IEquatable<Pair<T, K>>Di2015NewLine{Di2015NewLine  private readonly T _first;Di2015NewLine  private readonly K _second;Di2015NewLineDi2015NewLine  public Pair(T first, K second)Di2015NewLine  {Di2015NewLine    _first = first;Di2015NewLine    _second = second;Di2015NewLine  }Di2015NewLineDi2015NewLine  public T FirstDi2015NewLine  {Di2015NewLine    get { return _first; }Di2015NewLine  }Di2015NewLineDi2015NewLine  public K SecondDi2015NewLine  {Di2015NewLine    get { return _second; }Di2015NewLine  }Di2015NewLineDi2015NewLine  public bool Equals(Pair<T, K> obj)Di2015NewLine  {Di2015NewLine    return Equals(obj._first, _first) && Equals(obj._second, _second);Di2015NewLine  }Di2015NewLineDi2015NewLine  public override bool Equals(object obj)Di2015NewLine  {Di2015NewLine    return obj is Pair<T, K> && Equals((Pair<T, K>) obj);Di2015NewLine  }Di2015NewLineDi2015NewLine  public override int GetHashCode()Di2015NewLine  {Di2015NewLine    uncheckedDi2015NewLine    {Di2015NewLine      return (_first != null ? _first.GetHashCode() * 397 : 0) ^ (_second != null ? _second.GetHashCode() : 0);Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
121686Di2015UniqueSeparatorNullable<int>
121740Di2015UniqueSeparatorLabel
121740Di2015UniqueSeparatorLiteral
121740Di2015UniqueSeparatorText
121883Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine<webParts>Di2015NewLine  <webPart xmlns="http://schemas.microsoft.com/WebPart/v3">Di2015NewLine    <metaData>Di2015NewLine      <!--Di2015NewLine      The following Guid is used as a reference to the web part class, Di2015NewLine      and it will be automatically replaced with actual type name at deployment time.Di2015NewLine      -->Di2015NewLine      <type name="7F8C4D34-6311-4f22-87B4-A221FA8735BA" />Di2015NewLine      <importErrorMessage>Cannot import Project Filter.</importErrorMessage>Di2015NewLine    </metaData>Di2015NewLine    <data>Di2015NewLine      <properties>Di2015NewLine        <property name="Title" type="string">Project Filter</property>Di2015NewLine        <property name="Description" type="string">Provides a list of Projects that can be used to Filter other Web Parts.</property>Di2015NewLine      </properties>Di2015NewLine    </data>Di2015NewLine  </webPart>Di2015NewLine</webParts>Di2015NewLine
121883Di2015UniqueSeparator<type name="TitleWP.TitleWP, TitleWP, Version=1.0.0.0, Culture=neutral, PublicKeyToken=9f4da00116c38ec5" />Di2015NewLine
121973Di2015UniqueSeparatortry {Di2015NewLine    yourstring = Regex.Replace(yourstring, "(<[be]pt[^>]+>.+?</[be]pt>)", "");Di2015NewLine} catch (ArgumentException ex) {Di2015NewLine    // Syntax error in the regular expressionDi2015NewLine}Di2015NewLine
121973Di2015UniqueSeparatorbool FoundMatch = false;Di2015NewLineDi2015NewLinetry {Di2015NewLine    Regex regex = new Regex(@"<([be])pt[^>]+>.+?</\\1pt>");Di2015NewLine    while(regex.IsMatch(yourstring) ) {Di2015NewLine\    yourstring = regex.Replace(yourstring, "");Di2015NewLine    }Di2015NewLine} catch (ArgumentException ex) {Di2015NewLine    // Syntax error in the regular expressionDi2015NewLine}Di2015NewLine
121973Di2015UniqueSeparator    // <([be])pt[^>]+>.+?</\\1pt>Di2015NewLine// Di2015NewLine// Match the character "<" literally Â«<Â»Di2015NewLine// Match the regular expression below and capture its match into backreference number 1 Â«([be])Â»Di2015NewLine//    Match a single character present in the list "be" Â«[be]Â»Di2015NewLine// Match the characters "pt" literally Â«ptÂ»Di2015NewLine// Match any character that is not a ">" Â«[^>]+Â»Di2015NewLine//    Between one and unlimited times, as many times as possible, giving back as needed (greedy) Â«+Â»Di2015NewLine// Match the character ">" literally Â«>Â»Di2015NewLine// Match any single character that is not a line break character Â«.+?Â»Di2015NewLine//    Between one and unlimited times, as few times as possible, expanding as needed (lazy) Â«+?Â»Di2015NewLine// Match the characters "</" literally Â«</Â»Di2015NewLine// Match the same text as most recently matched by backreference number 1 Â«\\1Â»Di2015NewLine// Match the characters "pt>" literally Â«pt>Â»Di2015NewLine
122060Di2015UniqueSeparatorprivate static Assembly _assembly;Di2015NewLineprivate static Assembly Assembly {Di2015NewLine  get {Di2015NewLine    if (_assembly == null) _assembly = Assembly.GetExecutingAssembly();Di2015NewLine    return _assembly;Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLineprivate static Assembly _calling_assembly;Di2015NewLineprivate static Assembly CallingAssembly {Di2015NewLine  get {Di2015NewLine    if (_calling_assembly == null) _calling_assembly = Assembly.GetCallingAssembly();Di2015NewLine    return _calling_assembly;Di2015NewLine  }Di2015NewLine}Di2015NewLine
122354Di2015UniqueSeparatorImports System.DrawingDi2015NewLineDi2015NewLinePrivate Function createImage(ByVal srcPath As String, ByVal fg As Color, ByVal bg As Color) As BitmapDi2015NewLine    Dim img As New Bitmap(srcPath)Di2015NewLine    For x As Int16 = 0 To img.WidthDi2015NewLine        For y As Int16 = 0 To img.HeightDi2015NewLine            If img.GetPixel(x, y) = Color.Black ThenDi2015NewLine                img.SetPixel(x, y, fg)Di2015NewLine            ElseDi2015NewLine                img.SetPixel(x, y, bg)Di2015NewLine            End IfDi2015NewLine        NextDi2015NewLine    NextDi2015NewLine    Return imgDi2015NewLineEnd FunctionDi2015NewLine
122361Di2015UniqueSeparatorpublic ProductController() : this( new Foo() )Di2015NewLine{Di2015NewLine  //the framework calls thisDi2015NewLine}Di2015NewLineDi2015NewLinepublic ProductController(IFoo foo)Di2015NewLine{Di2015NewLine  _foo = foo;Di2015NewLine}Di2015NewLine
122658Di2015UniqueSeparatorHttpUtility.HtmlDecode
122658Di2015UniqueSeparatorWebUtility.HtmlDecode
122658Di2015UniqueSeparatorSystem.Net
122948Di2015UniqueSeparatorprotected override void OnLoad(EventArge e)Di2015NewLine { base.OnLoad(e);Di2015NewLine   EnsureChildControls();Di2015NewLineDi2015NewLine   var linkButtons = from c in AfterPageRepeater.ControlsDi2015NewLine                                                .OfType<RepeaterItem>()Di2015NewLine                     where c.HasControls()Di2015NewLine                     select c into risDi2015NewLine                        from lb in ris.OfType<LinkButton>()Di2015NewLine                        select lb;Di2015NewLineDi2015NewLine   foreach(var linkButton in linkButtons)Di2015NewLine    { linkButton.Click += PageNavigateButton_ClickDi2015NewLine    }                          Di2015NewLine }Di2015NewLine
122984Di2015UniqueSeparatorSystem.Net.WebRequest req = System.Net.HttpWebRequest.Create("http://stackoverflow.com/robots.txt");Di2015NewLinereq.Method = "HEAD";Di2015NewLineusing (System.Net.WebResponse resp = req.GetResponse())Di2015NewLine{Di2015NewLine    int ContentLength;Di2015NewLine    if(int.TryParse(resp.Headers.Get("Content-Length"), out ContentLength))Di2015NewLine    { Di2015NewLine        //Do something useful with ContentLength here Di2015NewLine    }Di2015NewLine}Di2015NewLine
123067Di2015UniqueSeparatorvoid my_printf(const char *format, ...)Di2015NewLine{Di2015NewLine    char buf[2048];Di2015NewLineDi2015NewLine    // get the arg list and format it into a stringDi2015NewLine    va_start(arglist, format);Di2015NewLine    vsprintf_s(buf, 2048, format, arglist);Di2015NewLine    va_end(arglist); Di2015NewLineDi2015NewLine    vprintf_s(buf);            // prints to the standard output streamDi2015NewLine    OutputDebugString(buf);    // prints to the output windowDi2015NewLine}Di2015NewLine
123227Di2015UniqueSeparatorif (listBox.ItemsSource.IsGenericType && Di2015NewLine    typeof(IDictionary<,>).IsAssignableFrom(listBox.ItemsSource.GetGenericTypeDefinition()))Di2015NewLine{Di2015NewLine    var method = typeof(KeyValuePair<,>).GetProperty("Value").GetGetMethod();Di2015NewLine    var item = method.Invoke(listBox.SelectedItem, null);Di2015NewLine}Di2015NewLine
123294Di2015UniqueSeparatorstring[] formats = {"yyyyMMdd", "MM/dd/yy"};Di2015NewLinevar Result = DateTime.ParseExact(input, formats, CultureInfo.CurrentCulture, DateTimeStyles.None);Di2015NewLine
123294Di2015UniqueSeparatorDateTime result;Di2015NewLinestring[] formats = {"yyyyMMdd", "MM/dd/yy"};Di2015NewLineDateTime.TryParseExact(input, formats, CultureInfo.CurrentCulture, DateTimeStyles.None, out result);Di2015NewLine
123340Di2015UniqueSeparatorstring s = "sÃ¸me string";Di2015NewLines = Regex.Replace(s, @"[^\\u0000-\\u007F]", string.Empty);Di2015NewLine
123791Di2015UniqueSeparatorprivate BackgroundWorker worker = new BackgroundWorker();Di2015NewLineprivate AutoResetEvent _resetEvent = new AutoResetEvent(false);Di2015NewLineDi2015NewLinepublic Form1()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLineDi2015NewLine    worker.DoWork += worker_DoWork;Di2015NewLine}Di2015NewLineDi2015NewLinepublic void Cancel()Di2015NewLine{Di2015NewLine    worker.CancelAsync();Di2015NewLine    _resetEvent.WaitOne(); // will block until _resetEvent.Set() call madeDi2015NewLine}Di2015NewLineDi2015NewLinevoid worker_DoWork(object sender, DoWorkEventArgs e)Di2015NewLine{Di2015NewLine    while(!e.Cancel)Di2015NewLine    {Di2015NewLine        // do somethingDi2015NewLine    }Di2015NewLineDi2015NewLine    _resetEvent.Set(); // signal that worker is doneDi2015NewLine}Di2015NewLine
124027Di2015UniqueSeparatorargument.Replace(' ', '+')
124027Di2015UniqueSeparatorHttpRequest.ServerVariables["QUERY_STRING"]
124514Di2015UniqueSeparatormyType<TypeA> a; // This should be a myType<TypeB>, even if it contains only TypeA'sDi2015NewLineDi2015NewLinepublic void MethodB(myType<TypeB> b){ /* do stuff */ }Di2015NewLineDi2015NewLinepublic void Main()Di2015NewLine{Di2015NewLine  MethodB(a);Di2015NewLine}Di2015NewLine
124514Di2015UniqueSeparatorpublic void MethodA<T>(IList<T> list) where T : ITypeEntityDi2015NewLine{Di2015NewLine  IList<T> myIList = new List<T>();Di2015NewLineDi2015NewLine  foreach(T item in list)Di2015NewLine  {Di2015NewLine    myIList.Add(item);Di2015NewLine  }Di2015NewLineDi2015NewLine  b.MethodB(myIList);Di2015NewLine}Di2015NewLine
124522Di2015UniqueSeparatornamespace ExampleDi2015NewLine{Di2015NewLine    using System;Di2015NewLine    using System.Net;Di2015NewLine    using System.IO;Di2015NewLine    using System.Text.RegularExpressions;Di2015NewLineDi2015NewLine    public class MyExampleDi2015NewLine    {Di2015NewLine        public static string GetDirectoryListingRegexForUrl(string url)Di2015NewLine        {Di2015NewLine            if (url.Equals("http://www.ibiblio.org/pub/"))Di2015NewLine            {Di2015NewLine                return "<a href=\\".*\\">(?<name>.*)</a>";Di2015NewLine            }Di2015NewLine            throw new NotSupportedException();Di2015NewLine        }Di2015NewLine        public static void Main(String[] args)Di2015NewLine        {Di2015NewLine            string url = "http://www.ibiblio.org/pub/";Di2015NewLine            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);Di2015NewLine            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())Di2015NewLine            {Di2015NewLine                using (StreamReader reader = new StreamReader(response.GetResponseStream()))Di2015NewLine                {Di2015NewLine                    string html = reader.ReadToEnd();Di2015NewLine                    Regex regex = new Regex(GetDirectoryListingRegexForUrl(url));Di2015NewLine                    MatchCollection matches = regex.Matches(html);Di2015NewLine                    if (matches.Count > 0)Di2015NewLine                    {Di2015NewLine                        foreach (Match match in matches)Di2015NewLine                        {Di2015NewLine                            if (match.Success)Di2015NewLine                            {Di2015NewLine                                Console.WriteLine(match.Groups["name"]);Di2015NewLine                            }Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
124748Di2015UniqueSeparatorXDocument doc; // populate somehowDi2015NewLineDi2015NewLine// this will give the names as XNameDi2015NewLinevar names = from child in doc.Root.Elements()Di2015NewLine            select child.Name;Di2015NewLineDi2015NewLine// if you want just the local (no-namespaces) name as a string, use thisDi2015NewLinevar simpleNames = from child in doc.Root.Elements()Di2015NewLine                  select child.Name.LocalName;Di2015NewLine
124763Di2015UniqueSeparatorinsert into Policy
124763Di2015UniqueSeparatorbegin tran (read committed)Di2015NewLineDi2015NewLine/* tentatively insert new Policy */Di2015NewLineinsert PolicyDi2015NewLineDi2015NewLine/* attach Package to Policy if it's still free */Di2015NewLineupdate PackageDi2015NewLine  set Package.policy_id = @policy_idDi2015NewLine  where Package.package_id = @package_id and Package.policy_id is nullDi2015NewLineDi2015NewLineif @@rowcount > 0Di2015NewLine  commitDi2015NewLineelseDi2015NewLine  rollbackDi2015NewLine
124898Di2015UniqueSeparatornew EmailSender().Send(emailMessage);
124898Di2015UniqueSeparatornew
124898Di2015UniqueSeparatornew WorkflowStepper(emailSender).Step()
124898Di2015UniqueSeparatornew WorkflowStepper(emailSender, alertRegistry, databaseConnection).Step()
124898Di2015UniqueSeparatorEmailSender
124898Di2015UniqueSeparatorWorkflowStepper
124898Di2015UniqueSeparatorAlertRegistry
124898Di2015UniqueSeparatorWorkflowStepper stepper = Container.Get<WorkflowStepper>();
124898Di2015UniqueSeparatorWorkflowStepper
124898Di2015UniqueSeparatornew
125115Di2015UniqueSeparatorPublic Sub New()Di2015NewLine    MyBase.New()Di2015NewLineDi2015NewLine    'This call is required by the Windows Form Designer.Di2015NewLine    InitializeComponent()Di2015NewLineDi2015NewLine    'Add any initialization after the InitializeComponent() callDi2015NewLine    SetStyle(ControlStyles.UserPaint, True)Di2015NewLine    SetStyle(ControlStyles.AllPaintingInWmPaint, True)Di2015NewLine    SetStyle(ControlStyles.DoubleBuffer, True)Di2015NewLine    SetStyle(ControlStyles.ResizeRedraw, True)Di2015NewLineEnd SubDi2015NewLineDi2015NewLinePrivate Sub RichTextBox1_SelectionChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles RichTextBox1.SelectionChangedDi2015NewLine    FindLine()Di2015NewLine    Invalidate()Di2015NewLineEnd SubDi2015NewLineDi2015NewLinePrivate Sub FindLine()Di2015NewLine    Dim intChar As IntegerDi2015NewLineDi2015NewLine    intChar = RichTextBox1.GetCharIndexFromPosition(New Point(0, 0))Di2015NewLine    intLine = RichTextBox1.GetLineFromCharIndex(intChar)Di2015NewLineEnd SubDi2015NewLineDi2015NewLinePrivate Sub DrawLines(ByVal g As Graphics, ByVal intLine As Integer)Di2015NewLine    Dim intCounter As Integer, intY As IntegerDi2015NewLineDi2015NewLine    g.Clear(Color.Black)Di2015NewLineDi2015NewLine    intCounter = intLine + 1Di2015NewLine    intY = 2Di2015NewLine    DoDi2015NewLine        g.DrawString(intCounter.ToString(), Font, Brushes.White, 3, intY)Di2015NewLine        intCounter += 1Di2015NewLineDi2015NewLine        intY += Font.Height + 1Di2015NewLine        If intY > ClientRectangle.Height - 15 Then Exit DoDi2015NewLine    LoopDi2015NewLineEnd SubDi2015NewLineDi2015NewLineProtected Overrides Sub OnPaint(ByVal e As System.Windows.Forms.PaintEventArgs)Di2015NewLine    DrawLines(e.Graphics, intLine)Di2015NewLineEnd SubDi2015NewLineDi2015NewLinePrivate Sub RichTextBox1_VScroll(ByVal sender As Object, ByVal e As System.EventArgs) Handles RichTextBox1.VScrollDi2015NewLine    FindLine()Di2015NewLine    Invalidate()Di2015NewLineEnd SubDi2015NewLineDi2015NewLinePrivate Sub RichTextBox1_UserScroll() Handles RichTextBox1.UserScrollDi2015NewLine    FindLine()Di2015NewLine    Invalidate()Di2015NewLineEnd SubDi2015NewLine
125115Di2015UniqueSeparatorPublic Class UserControl1Di2015NewLineInherits System.Windows.Forms.RichTextBoxDi2015NewLineDi2015NewLinePublic Event UserScroll()Di2015NewLineDi2015NewLineProtected Overrides Sub WndProc(ByRef m As System.Windows.Forms.Message)Di2015NewLine    If m.Msg = &H115 ThenDi2015NewLine        RaiseEvent UserScroll()Di2015NewLine    End IfDi2015NewLineDi2015NewLine    MyBase.WndProc(m)Di2015NewLineEnd SubDi2015NewLineEnd ClassDi2015NewLine
125418Di2015UniqueSeparatorvar query = dataSource.Where("CategoryID == 2 && UnitPrice > 3")Di2015NewLine                      .OrderBy("SupplierID");Di2015NewLine
125611Di2015UniqueSeparator/virtdirect/somefolder/
126001Di2015UniqueSeparatorWaitForInputIdle
126016Di2015UniqueSeparatorDebugger.Break()
126016Di2015UniqueSeparatorConditional("DEBUG_SERVICE")
126016Di2015UniqueSeparator[Conditional("DEBUG_SERVICE")]Di2015NewLineprivate static void DebugMode()Di2015NewLine{Di2015NewLine    Debugger.Break();Di2015NewLine}Di2015NewLine
126016Di2015UniqueSeparatorpublic override void OnStart()Di2015NewLine{Di2015NewLine     DebugMode();Di2015NewLine     /* ... do the rest */Di2015NewLine}Di2015NewLine
126198Di2015UniqueSeparatorclass SomeObjectDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLineclass MyEnum : IEnumerable<SomeObject>Di2015NewLine{Di2015NewLine    private List<SomeObject> _myList = new List<SomeObject>();Di2015NewLineDi2015NewLine    public void Add(SomeObject o)Di2015NewLine    {Di2015NewLine        _myList.Add(o);Di2015NewLine    }Di2015NewLineDi2015NewLine    public IEnumerator<SomeObject> GetEnumerator()Di2015NewLine    {Di2015NewLine        return _myList.GetEnumerator();Di2015NewLine    }Di2015NewLineDi2015NewLine    IEnumerator IEnumerable.GetEnumerator()Di2015NewLine    {Di2015NewLine        return this.GetEnumerator();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        MyEnum a = new MyEnum();Di2015NewLine        a.Add(new SomeObject());Di2015NewLineDi2015NewLine        foreach (SomeObject o in a)Di2015NewLine        {Di2015NewLine            Console.WriteLine(o.GetType().ToString());Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLine
126198Di2015UniqueSeparatorclass SomeObjectDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLineclass MyEnum : List<SomeObject>Di2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        MyEnum a = new MyEnum();Di2015NewLine        a.Add(new SomeObject());Di2015NewLineDi2015NewLine        foreach (SomeObject o in a)Di2015NewLine        {Di2015NewLine            Console.WriteLine(o.GetType().ToString());Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLine
126206Di2015UniqueSeparator[XmlRoot("c1")]Di2015NewLinepublic class Class1Di2015NewLine{Di2015NewLine    [XmlArray("items")]Di2015NewLine    [XmlArrayItem("c2")] Di2015NewLine    public Class2[] Items;Di2015NewLine}Di2015NewLine
126206Di2015UniqueSeparator[XmlType("c2")]Di2015NewLinepublic class Class2Di2015NewLine{Di2015NewLine    [XmlAttribute("name")]Di2015NewLine    public string Name;Di2015NewLine}Di2015NewLine
126318Di2015UniqueSeparator<sectionGroup name="episerver">Di2015NewLine  <section name="domainLanguageMappings" allowDefinition="MachineToApplication" allowLocation="false" type="EPiServer.Util.DomainLanguageConfigurationHandler,EPiServer" />Di2015NewLine
126318Di2015UniqueSeparator  <domainLanguageMappings>Di2015NewLine    <map domain="site.com" language="EN" />Di2015NewLine    <map domain="site.se" language="SV" />Di2015NewLine  </domainLanguageMappings>Di2015NewLine
126318Di2015UniqueSeparator<add name="EPsDefaultLanguageBranch" key="EN"/>Di2015NewLine
126807Di2015UniqueSeparator[StructLayout(LayoutKind.Explicit)] Di2015NewLinepublic struct SampleUnionDi2015NewLine{Di2015NewLine    [FieldOffset(0)] public float bar;Di2015NewLine    [FieldOffset(4)] public int killroy;Di2015NewLine    [FieldOffset(4)] public float fubar;Di2015NewLine}Di2015NewLine
126959Di2015UniqueSeparatorIWebBrowser2 browser = siteObject as IWebBrowser2;Di2015NewLineif (browser != null) hwnd = new IntPtr(browser.HWND);Di2015NewLine(new MyForm(someParam)).ShowDialog(new WindowWrapper(hwnd));Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLine// Wrapper class so that we can return an IWin32Window given a hwndDi2015NewLinepublic class WindowWrapper : System.Windows.Forms.IWin32WindowDi2015NewLine{Di2015NewLine    public WindowWrapper(IntPtr handle)Di2015NewLine    {Di2015NewLine        _hwnd = handle;Di2015NewLine    }Di2015NewLineDi2015NewLine    public IntPtr HandleDi2015NewLine    {Di2015NewLine        get { return _hwnd; }Di2015NewLine    }Di2015NewLineDi2015NewLine    private IntPtr _hwnd;Di2015NewLine}Di2015NewLine
127254Di2015UniqueSeparatorforeach
127254Di2015UniqueSeparatorIEnumerable
127254Di2015UniqueSeparatorGetEnumerator
127254Di2015UniqueSeparatorMoveNext
127254Di2015UniqueSeparatorCurrent
127254Di2015UniqueSeparatorclass EnumerableWrapper {Di2015NewLine    private readonly TheObjectType obj;Di2015NewLineDi2015NewLine    public EnumerableWrapper(TheObjectType obj) {Di2015NewLine        this.obj = obj;Di2015NewLine    }Di2015NewLineDi2015NewLine    public IEnumerator<YourType> GetEnumerator() {Di2015NewLine        return obj.TheMethodReturningTheIEnumerator();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// Called like this:Di2015NewLineDi2015NewLineforeach (var xyz in new EnumerableWrapper(yourObj))Di2015NewLine    â¦;Di2015NewLine
127254Di2015UniqueSeparatorIEnumerator
127254Di2015UniqueSeparatorforeach (var yz in yourObj.MethodA())Di2015NewLine    â¦;Di2015NewLine
127317Di2015UniqueSeparatorXElement e = XElement.Parse(testStr);Di2015NewLineDi2015NewLinestring groupName = "GroupB";Di2015NewLinevar items = from g in e.Elements(groupName)Di2015NewLine            from i in g.Elements("Item")Di2015NewLine            select new {Di2015NewLine                           attr1 = (string)i.Attribute("attrib1"),Di2015NewLine                           attr2 = (string)i.Attribute("attrib2")Di2015NewLine                       };Di2015NewLineDi2015NewLineforeach (var item in items)Di2015NewLine{Di2015NewLine    Console.WriteLine(item.attr1 + ":" + item.attr2);Di2015NewLine}Di2015NewLine
127632Di2015UniqueSeparatorusing System;Di2015NewLineusing Microsoft.Office.Interop.InfoPath;Di2015NewLineDi2015NewLinenamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            var app = new ApplicationClass();Di2015NewLine            var uri = @".\\form1.xml";Di2015NewLine            var doc = app.XDocuments.Open(uri, 0);Di2015NewLineDi2015NewLine            app.XDocuments.Close(doc);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
127840Di2015UniqueSeparatorpublic AccountStatement()Di2015NewLine{Di2015NewLine    new AccountStatement(new Period(new NullDate().DateTime,newNullDate().DateTime), 0);Di2015NewLine}Di2015NewLine
127840Di2015UniqueSeparatorpublic AccountStatement() : this(new Period(new NullDate().DateTime, new NullDate().DateTime), 0)Di2015NewLine{Di2015NewLine}Di2015NewLine
128409Di2015UniqueSeparator        Hashtable filter2 = new Hashtable()Di2015NewLine        {Di2015NewLine            {"building", "A-51"},Di2015NewLine            {"apartment", "210"}Di2015NewLine        };Di2015NewLine
128409Di2015UniqueSeparator        Hashtable filter2 = new Hashtable();Di2015NewLine        filter2["building"] = "A-51";Di2015NewLine        filter2["apartment"] = "210";Di2015NewLine
128539Di2015UniqueSeparatorstring s = string.Format("{0:c}", 12345.6789);Di2015NewLine
128539Di2015UniqueSeparatorstring s = string.Format("{0:c}", Math.Round(12345.6789));Di2015NewLine
128589Di2015UniqueSeparator...Di2015NewLine<importantSetting>$importantSettingValue$</importantSetting>Di2015NewLine...Di2015NewLine
128589Di2015UniqueSeparator...Di2015NewLine<importantSettingValue>QAvalue</importantSettingValue>Di2015NewLine...Di2015NewLine
128589Di2015UniqueSeparator...Di2015NewLine<importantSettingValue>PRODvalue</importantSettingValue>Di2015NewLine...Di2015NewLine
128589Di2015UniqueSeparatorXmlPreProcess.exe app.config qavalues.xmlDi2015NewLine
128683Di2015UniqueSeparatorpublic class FileSizeFormatProvider : IFormatProvider, ICustomFormatterDi2015NewLine{Di2015NewLine    public object GetFormat(Type formatType)Di2015NewLine    {Di2015NewLine        if (formatType == typeof(ICustomFormatter)) return this;Di2015NewLine        return null;Di2015NewLine    }Di2015NewLineDi2015NewLine    private const string fileSizeFormat = "fs";Di2015NewLine    private const Decimal OneKiloByte = 1024M;Di2015NewLine    private const Decimal OneMegaByte = OneKiloByte * 1024M;Di2015NewLine    private const Decimal OneGigaByte = OneMegaByte * 1024M;Di2015NewLineDi2015NewLine    public string Format(string format, object arg, IFormatProvider formatProvider)Di2015NewLine    {    Di2015NewLine        if (format == null || !format.StartsWith(fileSizeFormat))    Di2015NewLine        {    Di2015NewLine            return defaultFormat(format, arg, formatProvider);    Di2015NewLine        }Di2015NewLineDi2015NewLine        if (arg is string)    Di2015NewLine        {    Di2015NewLine            return defaultFormat(format, arg, formatProvider);    Di2015NewLine        }Di2015NewLineDi2015NewLine        Decimal size;Di2015NewLineDi2015NewLine        try    Di2015NewLine        {    Di2015NewLine            size = Convert.ToDecimal(arg);    Di2015NewLine        }    Di2015NewLine        catch (InvalidCastException)    Di2015NewLine        {    Di2015NewLine            return defaultFormat(format, arg, formatProvider);    Di2015NewLine        }Di2015NewLineDi2015NewLine        string suffix;Di2015NewLine        if (size > OneGigaByte)Di2015NewLine        {Di2015NewLine            size /= OneGigaByte;Di2015NewLine            suffix = "GB";Di2015NewLine        }Di2015NewLine        else if (size > OneMegaByte)Di2015NewLine        {Di2015NewLine            size /= OneMegaByte;Di2015NewLine            suffix = "MB";Di2015NewLine        }Di2015NewLine        else if (size > OneKiloByte)Di2015NewLine        {Di2015NewLine            size /= OneKiloByte;Di2015NewLine            suffix = "kB";Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            suffix = " B";Di2015NewLine        }Di2015NewLineDi2015NewLine        string precision = format.Substring(2);Di2015NewLine        if (String.IsNullOrEmpty(precision)) precision = "2";Di2015NewLine        return String.Format("{0:N" + precision + "}{1}", size, suffix);Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    private static string defaultFormat(string format, object arg, IFormatProvider formatProvider)Di2015NewLine    {Di2015NewLine        IFormattable formattableArg = arg as IFormattable;Di2015NewLine        if (formattableArg != null)Di2015NewLine        {Di2015NewLine            return formattableArg.ToString(format, formatProvider);Di2015NewLine        }Di2015NewLine        return arg.ToString();Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
128683Di2015UniqueSeparatorConsole.WriteLine(String.Format(new FileSizeFormatProvider(), "File size: {0:fs}", 100));Di2015NewLineConsole.WriteLine(String.Format(new FileSizeFormatProvider(), "File size: {0:fs}", 10000));Di2015NewLine
128683Di2015UniqueSeparatorpublic static class ExtensionMethodsDi2015NewLine{Di2015NewLine    public static string ToFileSize(this long l)Di2015NewLine    {Di2015NewLine        return String.Format(new FileSizeFormatProvider(), "{0:fs}", l);Di2015NewLine    }Di2015NewLine}Di2015NewLine
128683Di2015UniqueSeparatorlong l = 100000000;Di2015NewLineConsole.WriteLine(l.ToFileSize());Di2015NewLine
128692Di2015UniqueSeparatorFile.WriteAllBytes()
128754Di2015UniqueSeparatorArray
128754Di2015UniqueSeparatortype[]
128754Di2015UniqueSeparatorArrayList
128754Di2015UniqueSeparatorList
128754Di2015UniqueSeparatorList<string>
128754Di2015UniqueSeparatorArrayList
128754Di2015UniqueSeparatorHashtable
128754Di2015UniqueSeparatorDictionary
128754Di2015UniqueSeparatorDictionary<string, string>
128754Di2015UniqueSeparatorSortedList
128754Di2015UniqueSeparatorList
128754Di2015UniqueSeparatorDictionary
128754Di2015UniqueSeparatorKeyValuePair
128754Di2015UniqueSeparatorSortedDictionary
128829Di2015UniqueSeparatortry...catch
128829Di2015UniqueSeparatortry..finally
128896Di2015UniqueSeparatorpublic WebProfile p = null;Di2015NewLineDi2015NewLineprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    p = ProfileController.GetWebProfile();Di2015NewLine    if (!this.IsPostBack)Di2015NewLine    {Di2015NewLine         PopulateForm();Di2015NewLine    }       Di2015NewLine}Di2015NewLineDi2015NewLinepublic static WebProfile GetWebProfile()Di2015NewLine{Di2015NewLine    //get shopperID from cookieDi2015NewLine    string mscsShopperID = GetShopperID();Di2015NewLine    string userName = new tpw.Shopper(Shopper.Columns.ShopperId,        mscsShopperID).Email;Di2015NewLine    return WebProfile.GetProfile(userName); Di2015NewLine}Di2015NewLine
129003Di2015UniqueSeparatorvar baseUri = new Uri("http://my.server.com/folder/directory/sample");Di2015NewLinevar absoluteUri = new Uri(baseUri,"../../other/path");Di2015NewLine
129003Di2015UniqueSeparatorUri uri;Di2015NewLineif ( Uri.TryCreate("http://base/","../relative", out uri) ) doSomething(uri);Di2015NewLine
129395Di2015UniqueSeparatorpublic static T DeepClone<T>(T obj)Di2015NewLine{Di2015NewLine using (var ms = new MemoryStream())Di2015NewLine {Di2015NewLine   var formatter = new BinaryFormatter();Di2015NewLine   formatter.Serialize(ms, obj);Di2015NewLine   ms.Position = 0;Di2015NewLineDi2015NewLine   return (T) formatter.Deserialize(ms);Di2015NewLine }Di2015NewLine}Di2015NewLine
129395Di2015UniqueSeparator[Serializable]
129395Di2015UniqueSeparatorusing System.Runtime.Serialization.Formatters.Binary;Di2015NewLineusing System.IO;Di2015NewLine
129434Di2015UniqueSeparator   <customErrors mode="RemoteOnly" defaultRedirect="/error.html">Di2015NewLine      <error statusCode="403" redirect="/accessdenied.html" />Di2015NewLine      <error statusCode="404" redirect="/pagenotfound.html" />Di2015NewLine   </customErrors>Di2015NewLine
129613Di2015UniqueSeparatorpublic delegate void EventHandler<TArgs>(object sender, TArgs args) where TArgs : EventArgsDi2015NewLine
129653Di2015UniqueSeparatorCoredll.dll
129653Di2015UniqueSeparatorOpenNETCF.WindowsCE.DeviceManagement.SystemInformation
129956Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    var url = new Uri("http://www.example.com/");Di2015NewLineDi2015NewLine    Process.Start(url.AbsoluteUri);Di2015NewLine}Di2015NewLinecatch (UriFormatException)Di2015NewLine{Di2015NewLine    // URL is not parsableDi2015NewLine}Di2015NewLine
130168Di2015UniqueSeparatorSystem.Design.dll
130168Di2015UniqueSeparatorSystem.ComponentModel.Design.MultilineStringEditor
130168Di2015UniqueSeparatorpublic class StuffDi2015NewLine{Di2015NewLine    [Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]Di2015NewLine    public string MultiLineProperty { get; set; }Di2015NewLine}Di2015NewLine
130641Di2015UniqueSeparatorpublic void ExportToFile(string filename)Di2015NewLine{Di2015NewLine    var permissionSet = new PermissionSet(PermissionState.None);    Di2015NewLine    var writePermission = new FileIOPermission(FileIOPermissionAccess.Write, filename);Di2015NewLine    permissionSet.AddPermission(writePermission);Di2015NewLineDi2015NewLine    if (permissionSet.IsSubsetOf(AppDomain.CurrentDomain.PermissionSet))Di2015NewLine    {Di2015NewLine        using (FileStream fstream = new FileStream(filename, FileMode.Create))Di2015NewLine        using (TextWriter writer = new StreamWriter(fstream))Di2015NewLine        {Di2015NewLine            // try catch block for write permissions Di2015NewLine            writer.WriteLine("sometext");Di2015NewLineDi2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        //perform some recovery action hereDi2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
130660Di2015UniqueSeparatorint penaltySum(int a, int b)Di2015NewLine{Di2015NewLine    return (int.MaxValue - a < b) ? int.MaxValue : a + b;Di2015NewLine}Di2015NewLine
130660Di2015UniqueSeparatorint penaltySum(int a, int b)Di2015NewLine{Di2015NewLine    if (a > 0 && b > 0)Di2015NewLine    {Di2015NewLine        return (int.MaxValue - a < b) ? int.MaxValue : a + b;Di2015NewLine    }Di2015NewLineDi2015NewLine    if (a < 0 && b < 0)Di2015NewLine    {Di2015NewLine        return (int.MinValue - a > b) ? int.MinValue : a + b;Di2015NewLine    }Di2015NewLineDi2015NewLine    return a + b;Di2015NewLine}Di2015NewLine
130690Di2015UniqueSeparatorpublic class ServiceAuthHeader : SoapHeaderDi2015NewLine{Di2015NewLine    public string SiteKey;Di2015NewLine    public string Password;Di2015NewLineDi2015NewLine    public ServiceAuthHeader() {}Di2015NewLine}Di2015NewLine
130690Di2015UniqueSeparatorpublic class AuthenticationSoapExtensionAttribute : SoapExtensionAttributeDi2015NewLine{Di2015NewLine    private int priority;Di2015NewLineDi2015NewLine    public AuthenticationSoapExtensionAttribute()Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public override Type ExtensionTypeDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return typeof(AuthenticationSoapExtension);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override int PriorityDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return priority;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            priority = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
130690Di2015UniqueSeparatorpublic class AuthenticationSoapExtension : SoapExtensionDi2015NewLine{Di2015NewLine    private ServiceAuthHeader authHeader;Di2015NewLineDi2015NewLine    public AuthenticationSoapExtension()Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public override object GetInitializer(Type serviceType)Di2015NewLine    {Di2015NewLine        return null;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override object GetInitializer(LogicalMethodInfo methodInfo, SoapExtensionAttribute attribute)Di2015NewLine    {Di2015NewLine        return null;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void Initialize(object initializer)Di2015NewLine    {        Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void ProcessMessage(SoapMessage message)Di2015NewLine    {Di2015NewLine        if (message.Stage == SoapMessageStage.AfterDeserialize)Di2015NewLine        {Di2015NewLine            foreach (SoapHeader header in message.Headers)Di2015NewLine            {Di2015NewLine                if (header is ServiceAuthHeader)Di2015NewLine                {Di2015NewLine                    authHeader = (ServiceAuthHeader)header;Di2015NewLineDi2015NewLine                    if(authHeader.Password == TheCorrectUserPassword)Di2015NewLine                    {Di2015NewLine                        return;  //confirmedDi2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            throw new SoapException("Unauthorized", SoapException.ClientFaultCode);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
130690Di2015UniqueSeparatorpublic ServiceAuthHeader AuthenticationSoapHeader;Di2015NewLineDi2015NewLine[WebMethod]Di2015NewLine[SoapHeader("AuthenticationSoapHeader")]Di2015NewLine[AuthenticationSoapExtension]Di2015NewLinepublic string GetSomeStuffFromTheCloud(string IdOfWhatYouWant)Di2015NewLine{Di2015NewLine  return WhatYouWant;Di2015NewLine}Di2015NewLine
130690Di2015UniqueSeparatorprivate ServiceAuthHeader header;Di2015NewLineprivate PublicService ps;Di2015NewLineDi2015NewLineheader = new ServiceAuthHeader();Di2015NewLineheader.SiteKey = "Thekey";Di2015NewLineheader.Password = "Thepassword";Di2015NewLineps.ServiceAuthHeaderValue = header;Di2015NewLineDi2015NewLinestring WhatYouWant = ps.GetSomeStuffFromTheCloud(SomeId);Di2015NewLine
130691Di2015UniqueSeparatorfrom u in DataContext.UsersDi2015NewLinewhere UserRolesBitmask | 22 == 22Di2015NewLineselect uDi2015NewLine
130735Di2015UniqueSeparatorpublic Class2Test()Di2015NewLine{Di2015NewLine     _StringProperty = ConfigurationManager.AppSettings["stringProperty"];Di2015NewLine}Di2015NewLine
130735Di2015UniqueSeparatorConfigurationManager.AppSettings
130735Di2015UniqueSeparatorClass2Test
130735Di2015UniqueSeparatorWebConfigSettingsReader
130805Di2015UniqueSeparatorprivate void OnRadioButtonCheckedChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Control1.Visible = RadioButton1.Checked;Di2015NewLine    Control2.Visible = RadioButton2.Checked;Di2015NewLine}Di2015NewLine
131467Di2015UniqueSeparator[return: MarshalAs(<your marshal type>)]Di2015NewLinepublic ISomething Foo()Di2015NewLine{Di2015NewLine    return new MyFoo();Di2015NewLine}Di2015NewLine
131551Di2015UniqueSeparatorreturn sequence.ToReadOnlyCollection<Expression>();Di2015NewLine
131551Di2015UniqueSeparatorreturn sequence.AsReadOnly();Di2015NewLine
131551Di2015UniqueSeparatorpublic class ParameterRebinder : ExpressionVisitor {Di2015NewLine    \private readonly Dictionary<ParameterExpression, ParameterExpression> map;Di2015NewLineDi2015NewLine    \public ParameterRebinder(Dictionary<ParameterExpression, ParameterExpression> map) {Di2015NewLine    \\this.map = map ?? new Dictionary<ParameterExpression, ParameterExpression>();Di2015NewLine    \}Di2015NewLineDi2015NewLine    \public static Expression ReplaceParameters(Dictionary<ParameterExpression, ParameterExpression> map, Expression exp) {Di2015NewLine    \\return new ParameterRebinder(map).Visit(exp);Di2015NewLine    \}Di2015NewLineDi2015NewLine    \internal override Expression VisitParameter(ParameterExpression p) {Di2015NewLine    \\ParameterExpression replacement;Di2015NewLine    \\if (map.TryGetValue(p, out replacement)) {Di2015NewLine    \\\p = replacement;Di2015NewLine    \\}Di2015NewLine    \\return base.VisitParameter(p);Di2015NewLine    \}Di2015NewLine    }Di2015NewLine
131551Di2015UniqueSeparatorpublic static class ExpressionExtensions {Di2015NewLine    \public static Expression<T> Compose<T>(this Expression<T> first, Expression<T> second, Func<Expression, Expression, Expression> merge) {Di2015NewLine    \\// build parameter map (from parameters of second to parameters of first)Di2015NewLine    \\var map = first.Parameters.Select((f, i) => new { f, s = second.Parameters[i] }).ToDictionary(p => p.s, p => p.f);Di2015NewLineDi2015NewLine    \\// replace parameters in the second lambda expression with parameters from the firstDi2015NewLine    \\var secondBody = ParameterRebinder.ReplaceParameters(map, second.Body);Di2015NewLineDi2015NewLine    \\// apply composition of lambda expression bodies to parameters from the first expression Di2015NewLine    \\return Expression.Lambda<T>(merge(first.Body, secondBody), first.Parameters);Di2015NewLine    \}Di2015NewLineDi2015NewLine    \public static Expression<Func<T, bool>> And<T>(this Expression<Func<T, bool>> first, Expression<Func<T, bool>> second) {Di2015NewLine    \\return first.Compose(second, Expression.And);Di2015NewLine    \}Di2015NewLineDi2015NewLine    \public static Expression<Func<T, bool>> Or<T>(this Expression<Func<T, bool>> first, Expression<Func<T, bool>> second) {Di2015NewLine    \\return first.Compose(second, Expression.Or);Di2015NewLine    \}Di2015NewLine    }Di2015NewLine
131551Di2015UniqueSeparatorpublic static class PredicateBuilder {Di2015NewLine\public static Expression<Func<T, bool>> True<T>() { return f => true; }Di2015NewLine\public static Expression<Func<T, bool>> False<T>() { return f => false; }Di2015NewLineDi2015NewLine}Di2015NewLine
131551Di2015UniqueSeparator\public static IList<Content> GetAllContentByTags(IList<Tag> tags) {Di2015NewLine\\IQueryable<Content> contentQuery = ...Di2015NewLineDi2015NewLine\\Expression<Func<Content, bool>> predicate = PredicateBuilder.False<Content>();Di2015NewLineDi2015NewLine\\foreach (Tag individualTag in tags) {Di2015NewLine\\\Tag tagParameter = individualTag;Di2015NewLine\\\predicate = predicate.Or(p => p.Tags.Any(tag => tag.Name.Equals(tagParameter.Name)));Di2015NewLine\\}Di2015NewLineDi2015NewLine\\IQueryable<Content> resultExpressions = contentQuery.Where(predicate);Di2015NewLineDi2015NewLine\\return resultExpressions.ToList();Di2015NewLine\}Di2015NewLine
131820Di2015UniqueSeparator.Subtract()
131820Di2015UniqueSeparatorTimeSpan difference = t1.Subtract(t2);
131980Di2015UniqueSeparatorstring input = "08:00";Di2015NewLineDateTime time;Di2015NewLineif (!DateTime.TryParse(input, out time))Di2015NewLine{Di2015NewLine    // invalid inputDi2015NewLine    return;Di2015NewLine}Di2015NewLineDi2015NewLineTimeSpan timeSpan = new TimeSpan(time.Hour, time.Minute, time.Second);Di2015NewLine
132085Di2015UniqueSeparatorforeach (var x in y)Di2015NewLine{Di2015NewLine   //bodyDi2015NewLine}Di2015NewLine
132085Di2015UniqueSeparatorvar enumerator = y.GetEnumerator();Di2015NewLinewhile (enumerator.MoveNext())Di2015NewLine{Di2015NewLine    var x = enumerator.Current;Di2015NewLine    //bodyDi2015NewLine}Di2015NewLineDi2015NewLineif (y != null)Di2015NewLine{Di2015NewLine    enumerator.Dispose();Di2015NewLine}Di2015NewLine
132085Di2015UniqueSeparator class ClosureEnumerable : IEnumerable<string>Di2015NewLine {Di2015NewLine    private IEnumerable<string> args;Di2015NewLine    private ClassType originalThis;Di2015NewLine    public ClosureEnumerator(ClassType origThis, IEnumerable<string> args)Di2015NewLine    {Di2015NewLine        this.args = args;Di2015NewLine        this.origianlThis = origThis;Di2015NewLine    }Di2015NewLine    public IEnumerator<string> GetEnumerator()Di2015NewLine    {Di2015NewLine        return new Closure(origThis, args);Di2015NewLine    }Di2015NewLine }Di2015NewLineDi2015NewLineclass Closure : IEnumerator<string>Di2015NewLine{Di2015NewLine    public Closure(ClassType originalThis, IEnumerable<string> args)Di2015NewLine    {Di2015NewLine        state = 0;Di2015NewLine        this.args = args;Di2015NewLine        this.originalThis = originalThis;Di2015NewLine    }Di2015NewLineDi2015NewLine    private IEnumerable<string> args;Di2015NewLine    private IEnumerator<string> enumerator2;Di2015NewLine    private IEnumerator<string> argEnumerator;Di2015NewLineDi2015NewLine    //- Here ClassType is the type of the object that contained the methodDi2015NewLine    //  This may be optimized away if the method does not access any Di2015NewLine    //  class membersDi2015NewLine    private ClassType originalThis;Di2015NewLineDi2015NewLine    //This holds the state value.Di2015NewLine    private int state;Di2015NewLine    //The current value to returnDi2015NewLine    private string currentValue;Di2015NewLineDi2015NewLine    public string CurrentDi2015NewLine    {Di2015NewLine        get Di2015NewLine        {Di2015NewLine            return currentValue;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
132085Di2015UniqueSeparatorcurrentValue = expr;Di2015NewLinestate = //the state number of the yield statement;Di2015NewLinereturn true;Di2015NewLine
132085Di2015UniqueSeparatorstate = -1;Di2015NewLinereturn false;Di2015NewLine
132085Di2015UniqueSeparatorIEnumerator<string> strings(IEnumerable<string> args)Di2015NewLine{Di2015NewLine   return new ClosureEnumerable(this,args);Di2015NewLine}Di2015NewLine
132324Di2015UniqueSeparatorpublic static T SetBarValue<T>(this T dataObject, int barValue)Di2015NewLine        where T : BaseDataObject Di2015NewLine    {Di2015NewLine        dataObject.SetData("bar", barValue);Di2015NewLine        return dataObject;Di2015NewLine    }Di2015NewLine
132467Di2015UniqueSeparatorInvalidCastException
132467Di2015UniqueSeparatoro
132467Di2015UniqueSeparatorstring
132467Di2015UniqueSeparatoro
132467Di2015UniqueSeparators
132467Di2015UniqueSeparatoro
132467Di2015UniqueSeparatornull
132467Di2015UniqueSeparatornull
132467Di2015UniqueSeparators
132467Di2015UniqueSeparatoro
132467Di2015UniqueSeparatorstring
132467Di2015UniqueSeparatoro
132467Di2015UniqueSeparatornull
132467Di2015UniqueSeparatornull
132467Di2015UniqueSeparatoro
132467Di2015UniqueSeparators
132467Di2015UniqueSeparatorNullReferenceException
132467Di2015UniqueSeparatoro
132467Di2015UniqueSeparatornull
132467Di2015UniqueSeparatoro.ToString()
132467Di2015UniqueSeparators
132467Di2015UniqueSeparatoro
132589Di2015UniqueSeparatorobject anon = Activator.CreateInstance(existingObject.GetType());Di2015NewLine
132774Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Text;Di2015NewLineusing System.Runtime.InteropServices;Di2015NewLineDi2015NewLinenamespace EnumerateRDUsersDi2015NewLine{Di2015NewLine  class ProgramDi2015NewLine  {Di2015NewLine    [DllImport("wtsapi32.dll")]Di2015NewLine    static extern IntPtr WTSOpenServer([MarshalAs(UnmanagedType.LPStr)] String pServerName);Di2015NewLineDi2015NewLine    [DllImport("wtsapi32.dll")]Di2015NewLine    static extern void WTSCloseServer(IntPtr hServer);Di2015NewLineDi2015NewLine    [DllImport("wtsapi32.dll")]Di2015NewLine    static extern Int32 WTSEnumerateSessions(Di2015NewLine        IntPtr hServer,Di2015NewLine        [MarshalAs(UnmanagedType.U4)] Int32 Reserved,Di2015NewLine        [MarshalAs(UnmanagedType.U4)] Int32 Version,Di2015NewLine        ref IntPtr ppSessionInfo,Di2015NewLine        [MarshalAs(UnmanagedType.U4)] ref Int32 pCount);Di2015NewLineDi2015NewLine    [DllImport("wtsapi32.dll")]Di2015NewLine    static extern void WTSFreeMemory(IntPtr pMemory);Di2015NewLineDi2015NewLine    [DllImport("Wtsapi32.dll")]Di2015NewLine    static extern bool WTSQuerySessionInformation(Di2015NewLine        System.IntPtr hServer, int sessionId, WTS_INFO_CLASS wtsInfoClass, out System.IntPtr ppBuffer, out uint pBytesReturned);Di2015NewLineDi2015NewLine    [StructLayout(LayoutKind.Sequential)]Di2015NewLine    private struct WTS_SESSION_INFODi2015NewLine    {Di2015NewLine      public Int32 SessionID;Di2015NewLineDi2015NewLine      [MarshalAs(UnmanagedType.LPStr)]Di2015NewLine      public String pWinStationName;Di2015NewLineDi2015NewLine      public WTS_CONNECTSTATE_CLASS State;Di2015NewLine    }Di2015NewLineDi2015NewLine    public enum WTS_INFO_CLASSDi2015NewLine    {Di2015NewLine      WTSInitialProgram,Di2015NewLine      WTSApplicationName,Di2015NewLine      WTSWorkingDirectory,Di2015NewLine      WTSOEMId,Di2015NewLine      WTSSessionId,Di2015NewLine      WTSUserName,Di2015NewLine      WTSWinStationName,Di2015NewLine      WTSDomainName,Di2015NewLine      WTSConnectState,Di2015NewLine      WTSClientBuildNumber,Di2015NewLine      WTSClientName,Di2015NewLine      WTSClientDirectory,Di2015NewLine      WTSClientProductId,Di2015NewLine      WTSClientHardwareId,Di2015NewLine      WTSClientAddress,Di2015NewLine      WTSClientDisplay,Di2015NewLine      WTSClientProtocolTypeDi2015NewLine    }Di2015NewLine    public enum WTS_CONNECTSTATE_CLASSDi2015NewLine    {Di2015NewLine      WTSActive,Di2015NewLine      WTSConnected,Di2015NewLine      WTSConnectQuery,Di2015NewLine      WTSShadow,Di2015NewLine      WTSDisconnected,Di2015NewLine      WTSIdle,Di2015NewLine      WTSListen,Di2015NewLine      WTSReset,Di2015NewLine      WTSDown,Di2015NewLine      WTSInitDi2015NewLine    }Di2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine      ListUsers("<INSERT SERVERNAME HERE>");Di2015NewLine    }Di2015NewLineDi2015NewLine    public static IntPtr OpenServer(String Name)Di2015NewLine    {Di2015NewLine      IntPtr server = WTSOpenServer(Name);Di2015NewLine      return server;Di2015NewLine    }Di2015NewLine    public static void CloseServer(IntPtr ServerHandle)Di2015NewLine    {Di2015NewLine      WTSCloseServer(ServerHandle);Di2015NewLine    }Di2015NewLine    public static void ListUsers(String ServerName)Di2015NewLine    {Di2015NewLine      IntPtr serverHandle = IntPtr.Zero;Di2015NewLine      List<String> resultList = new List<string>();Di2015NewLine      serverHandle = OpenServer(ServerName);Di2015NewLineDi2015NewLine      tryDi2015NewLine      {Di2015NewLine        IntPtr SessionInfoPtr = IntPtr.Zero;Di2015NewLine        IntPtr userPtr = IntPtr.Zero;Di2015NewLine        IntPtr domainPtr = IntPtr.Zero;Di2015NewLine        Int32 sessionCount = 0;Di2015NewLine        Int32 retVal = WTSEnumerateSessions(serverHandle, 0, 1, ref SessionInfoPtr, ref sessionCount);Di2015NewLine        Int32 dataSize = Marshal.SizeOf(typeof(WTS_SESSION_INFO));Di2015NewLine        Int32 currentSession = (int)SessionInfoPtr;Di2015NewLine        uint bytes = 0;Di2015NewLineDi2015NewLine        if (retVal != 0)Di2015NewLine        {Di2015NewLine          for (int i = 0; i < sessionCount; i++)Di2015NewLine          {Di2015NewLine            WTS_SESSION_INFO si = (WTS_SESSION_INFO)Marshal.PtrToStructure((System.IntPtr)currentSession, typeof(WTS_SESSION_INFO));Di2015NewLine            currentSession += dataSize;Di2015NewLineDi2015NewLine            WTSQuerySessionInformation(serverHandle, si.SessionID, WTS_INFO_CLASS.WTSUserName, out userPtr, out bytes);Di2015NewLine            WTSQuerySessionInformation(serverHandle, si.SessionID, WTS_INFO_CLASS.WTSDomainName, out domainPtr, out bytes);Di2015NewLineDi2015NewLine            Console.WriteLine("Domain and User: " + Marshal.PtrToStringAnsi(domainPtr) + "\\\\" + Marshal.PtrToStringAnsi(userPtr));Di2015NewLineDi2015NewLine            WTSFreeMemory(userPtr); Di2015NewLine            WTSFreeMemory(domainPtr);Di2015NewLine          }Di2015NewLineDi2015NewLine          WTSFreeMemory(SessionInfoPtr);Di2015NewLine        }Di2015NewLine      }Di2015NewLine      finallyDi2015NewLine      {Di2015NewLine        CloseServer(serverHandle);Di2015NewLine      }Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine  }Di2015NewLine}Di2015NewLine
133044Di2015UniqueSeparatorcatch (Exception ex)
133044Di2015UniqueSeparatorSystem.AppDomain.CurrentDomain.UnhandledException
133044Di2015UniqueSeparatorThreading
133044Di2015UniqueSeparatorSystem.Windows.Forms.Application.ThreadException.
133044Di2015UniqueSeparatorSystem.Web.HttpApplication.Error
133044Di2015UniqueSeparatorthrow new MyBaseException(ex);
133044Di2015UniqueSeparatorException ex
133290Di2015UniqueSeparator#include <stdio.h>Di2015NewLineDi2015NewLineint main()Di2015NewLine{Di2015NewLine\int list[]={4,7,2,4,1,10,3};Di2015NewLine\int n;  // the one int variableDi2015NewLineDi2015NewLine\startsort:Di2015NewLine\for (n=0; n< sizeof(list)/sizeof(int)-1; ++n)Di2015NewLine\\if (list[n] > list[n+1]) {Di2015NewLine\\\list[n] ^= list[n+1];Di2015NewLine\\\list[n+1] ^= list[n];Di2015NewLine\\\list[n] ^= list[n+1];Di2015NewLine\\\goto startsort;Di2015NewLine\\}Di2015NewLineDi2015NewLine\for (n=0; n< sizeof(list)/sizeof(int); ++n)Di2015NewLine\\printf("%d\\n",list[n]);Di2015NewLine\return 0;Di2015NewLine}Di2015NewLine
133500Di2015UniqueSeparatorstartInfo.Verb = "runas";Di2015NewLine
133577Di2015UniqueSeparatorlist.Remove(list.First(e => e.id == searchId));Di2015NewLine
133644Di2015UniqueSeparatorcertsender
134326Di2015UniqueSeparatorif (myHashtable.ContainsKey(key))Di2015NewLine    duplicates.Add(key);Di2015NewLineelseDi2015NewLine    myHashtable.Add(key, value);Di2015NewLine
134548Di2015UniqueSeparatorHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\ParametersDi2015NewLineDi2015NewLineTcpTimedWaitDelay = 30Di2015NewLineMaxUserPort = 65534 Di2015NewLineMaxHashTableSize = 65536 Di2015NewLineMaxFreeTcbs = 16000Di2015NewLine
134700Di2015UniqueSeparatorfooList.Exists(item => item.Bar == SomeBar)Di2015NewLine
134700Di2015UniqueSeparatorfooList.Exists(delegate(Foo Item) { return item.Bar == SomeBar});Di2015NewLine
134768Di2015UniqueSeparatorusing System;Di2015NewLineusing Host;Di2015NewLineDi2015NewLinenamespace ClientDi2015NewLine{Di2015NewLine    public class MyClass : IMyInterfaceDi2015NewLine    {Di2015NewLine        public int _id;Di2015NewLine        public string _name;Di2015NewLineDi2015NewLine        public MyClass(int id,Di2015NewLine            string name)Di2015NewLine        {Di2015NewLine            _id = id;Di2015NewLine            _name = name;Di2015NewLine        }Di2015NewLineDi2015NewLine        public string GetOutput()Di2015NewLine        {Di2015NewLine            return String.Format("{0} - {1}", _id, _name);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinenamespace HostDi2015NewLine{Di2015NewLine    public interface IMyInterfaceDi2015NewLine    {Di2015NewLine        string GetOutput();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineusing System;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLinenamespace HostDi2015NewLine{Di2015NewLine    internal class ProgramDi2015NewLine    {Di2015NewLine        private static void Main()Di2015NewLine        {Di2015NewLine            //These two would be read in some configurationDi2015NewLine            const string dllName = "Client.dll";Di2015NewLine            const string className = "Client.MyClass";Di2015NewLineDi2015NewLine            tryDi2015NewLine            {Di2015NewLine                Assembly pluginAssembly = Assembly.LoadFrom(dllName);Di2015NewLine                Type classType = pluginAssembly.GetType(className);Di2015NewLineDi2015NewLine                var plugin = (IMyInterface) Activator.CreateInstance(classType,Di2015NewLine                                                                     42, "Adams");Di2015NewLineDi2015NewLine                if (plugin == null)Di2015NewLine                    throw new ApplicationException("Plugin not correctly configured");Di2015NewLineDi2015NewLine                Console.WriteLine(plugin.GetOutput());Di2015NewLine            }Di2015NewLine            catch (Exception e)Di2015NewLine            {Di2015NewLine                Console.Error.WriteLine(e.ToString());Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
134771Di2015UniqueSeparatorbool
134771Di2015UniqueSeparatorSystem.Boolean
134771Di2015UniqueSeparatorint
134771Di2015UniqueSeparatorSystem.Int32
135257Di2015UniqueSeparatorout
135257Di2015UniqueSeparatorout
135257Di2015UniqueSeparatorint x;Di2015NewLineFoo(out x); // OKDi2015NewLineDi2015NewLineint y;Di2015NewLineFoo(ref y); // ErrorDi2015NewLine
135257Di2015UniqueSeparatorRef
135257Di2015UniqueSeparatorout
135257Di2015UniqueSeparatorint.TryParse
135464Di2015UniqueSeparatorobject
135464Di2015UniqueSeparatorBinaryOp
135464Di2015UniqueSeparatordelegate int BinaryOp(int x, int y);Di2015NewLineDi2015NewLineList<BinaryOp> methodsToExecute = new List<BinaryOp>();Di2015NewLineDi2015NewLinemethodsToExecute.add(Add);Di2015NewLinemethodsToExecute.add(Subtract);Di2015NewLineDi2015NewLineforeach(BinaryOp method in methodsToExecute)Di2015NewLine{Di2015NewLine    method(1,2);Di2015NewLine}Di2015NewLine
135482Di2015UniqueSeparatorMethodInfo dynMethod = this.GetType().GetMethod("Draw_" + itemType, BindingFlags.NonPublic | BindingFlags.Instance);Di2015NewLinedynMethod.Invoke(this, new object[] { methodParams });Di2015NewLine
135562Di2015UniqueSeparatorMouseWheel
135562Di2015UniqueSeparatorMouseEventArgs
135562Di2015UniqueSeparatorOnMouseWheel()
135562Di2015UniqueSeparatorDataGridView
135562Di2015UniqueSeparatorHandled
135562Di2015UniqueSeparatorMouseEventArgs
135562Di2015UniqueSeparatorMouseWheel
135562Di2015UniqueSeparatorOnMouseWheel()
135562Di2015UniqueSeparatorDataGridView
135562Di2015UniqueSeparatorSystemInformation.MouseWheelScrollLines
135562Di2015UniqueSeparatorMouseWheel
135562Di2015UniqueSeparatorMouseEventArgs
135562Di2015UniqueSeparatorHandledMouseEventArgs
135562Di2015UniqueSeparatorHandled = true
135562Di2015UniqueSeparatorDataGridView
135562Di2015UniqueSeparatorOnMouseWheel()
135562Di2015UniqueSeparatorSystemInformation.MouseWheelScrollLines
135562Di2015UniqueSeparator1
135562Di2015UniqueSeparatorScrollBar
135982Di2015UniqueSeparatorxmlns
135982Di2015UniqueSeparatorXmlDocument xml = new XmlDocument();Di2015NewLinexml.AppendChild(xml.CreateElement("root", "whatever:name-space-1.0"));Di2015NewLinexml.DocumentElement.AppendChild(xml.CreateElement("loner", "whatever:name-space-1.0")); Di2015NewLineConsole.WriteLine(xml.OuterXml);Di2015NewLine
136041Di2015UniqueSeparatorprivate static void MyMethod(string s, int x, int y)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        LogError(MethodBase.GetCurrentMethod(), ex, s, x, y);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate static void LogError(MethodBase method, Exception ex, params object[] values)Di2015NewLine{Di2015NewLine    ParameterInfo[] parms = method.GetParameters();Di2015NewLine    object[] namevalues = new object[2 * parms.Length];Di2015NewLineDi2015NewLine    string msg = "Error in " + method.Name + "(";Di2015NewLine    for (int i = 0, j = 0; i < parms.Length; i++, j += 2)Di2015NewLine    {Di2015NewLine        msg += "{" + j + "}={" + (j + 1) + "}, ";Di2015NewLine        namevalues[j] = parms[i].Name;Di2015NewLine        if (i < values.Length) namevalues[j + 1] = values[i];Di2015NewLine    }Di2015NewLine    msg += "exception=" + ex.Message + ")";Di2015NewLine    Console.WriteLine(string.Format(msg, namevalues));Di2015NewLine}Di2015NewLine
136092Di2015UniqueSeparatorSystem.Exception
136092Di2015UniqueSeparatorcatch (Exception ex)            Di2015NewLine{                Di2015NewLine    if (ex is FormatException || ex is OverflowException)Di2015NewLine    {Di2015NewLine        WebId = Guid.Empty;Di2015NewLine        return;Di2015NewLine    }Di2015NewLineDi2015NewLine    throw;Di2015NewLine}Di2015NewLine
136625Di2015UniqueSeparatorIPAddress IP = new IPAddress();Di2015NewLineif(IP.TryParse("127.0.0.1",out IP)){Di2015NewLine    Socket s = new Socket(AddressFamily.InterNetwork,Di2015NewLine    SocketType.Stream,Di2015NewLine    ProtocolType.Tcp);Di2015NewLineDi2015NewLine    try{   Di2015NewLine        s.Connect(IPs[0], port);Di2015NewLine    }Di2015NewLine    catch(Exception ex){Di2015NewLine        // something went wrongDi2015NewLine    }Di2015NewLine}Di2015NewLine
136998Di2015UniqueSeparator+=
136998Di2015UniqueSeparator-=
136998Di2015UniqueSeparatornull
136998Di2015UniqueSeparatorpublic bool IsEventHandlerRegistered(Delegate prospectiveHandler)Di2015NewLine{   Di2015NewLine\if ( this.EventHandler != null )Di2015NewLine\{Di2015NewLine\\foreach ( Delegate existingHandler in this.EventHandler.GetInvocationList() )Di2015NewLine\\{Di2015NewLine\\\if ( existingHandler == prospectiveHandler )Di2015NewLine\\\{Di2015NewLine\\\\return true;Di2015NewLine\\\}Di2015NewLine\\}Di2015NewLine\}Di2015NewLine\return false;Di2015NewLine}Di2015NewLine
136998Di2015UniqueSeparator-=
136998Di2015UniqueSeparator+=
137183Di2015UniqueSeparatorEnumerable.Repeat(true, result.TotalPages + 1).ToArray()Di2015NewLine
137324Di2015UniqueSeparatorclass Base {Di2015NewLine    public Base() {Di2015NewLine       InitializeComponent();Di2015NewLine    }Di2015NewLine    protected virtual void InitializeComponent() {Di2015NewLine        ...Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass Derived : Base {Di2015NewLine    private Button button1;Di2015NewLine    public Derived() : base() {Di2015NewLine        button1 = new Button();Di2015NewLine    }Di2015NewLine    protected override void InitializeComponent() {Di2015NewLine        button1.Text = "I'm gonna throw a null reference exception"Di2015NewLine    }Di2015NewLine}Di2015NewLine
137347Di2015UniqueSeparatorinternal static class Win32Di2015NewLine{Di2015NewLine    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]Di2015NewLine    internal static extern bool GetDiskFreeSpaceEx(string drive, out long freeBytesForUser, out long totalBytes, out long freeBytes);Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        long freeBytesForUser;Di2015NewLine        long totalBytes;Di2015NewLine        long freeBytes;Di2015NewLineDi2015NewLineDi2015NewLine<pre><code>    if (Win32.GetDiskFreeSpaceEx(@"\\\\prime\\cargohold", out freeBytesForUser, out totalBytes, out freeBytes)) {Di2015NewLine        Console.WriteLine(freeBytesForUser);Di2015NewLine        Console.WriteLine(totalBytes);Di2015NewLine        Console.WriteLine(freeBytes);Di2015NewLine    }Di2015NewLine}Di2015NewLine
137537Di2015UniqueSeparatorList<int>
137537Di2015UniqueSeparatorList<int>
137537Di2015UniqueSeparatorPerson[] coworkers = new Employee[20];Di2015NewLine
137675Di2015UniqueSeparatorclass AnimalDi2015NewLine    def MakeNoiseDi2015NewLine        return ""Di2015NewLine    endDi2015NewLine    def SleepDi2015NewLine        print self.class.name + " is sleeping.\\n"Di2015NewLine    endDi2015NewLineendDi2015NewLineDi2015NewLineclass Dog < AnimalDi2015NewLine    def MakeNoiseDi2015NewLine        return "Woof!"Di2015NewLine    endDi2015NewLineendDi2015NewLineDi2015NewLineclass Cat < AnimalDi2015NewLine    def MakeNoiseDi2015NewLine        return "Meow!"Di2015NewLine    endDi2015NewLineendDi2015NewLineDi2015NewLineanimals = [Dog.new, Cat.new]Di2015NewLineanimals.each {|a|Di2015NewLine    print a.MakeNoise + "\\n"Di2015NewLine    a.SleepDi2015NewLine}Di2015NewLine
137761Di2015UniqueSeparator// Tile all child forms horizontally.Di2015NewLinethis.LayoutMdi( MdiLayout.TileHorizontal );Di2015NewLineDi2015NewLine// Tile all child forms vertically.Di2015NewLinethis.LayoutMdi( MdiLayout.TileVertical );Di2015NewLineDi2015NewLine// Cascade all MDI child windows.Di2015NewLinethis.LayoutMdi( MdiLayout.Cascade );Di2015NewLine
138079Di2015UniqueSeparatorpublic static class ReflectionExtDi2015NewLine{Di2015NewLine    public static object GetAttr(this object obj, string name)Di2015NewLine    {Di2015NewLine        Type type = obj.GetType();Di2015NewLine        BindingFlags flags = BindingFlags.Instance | Di2015NewLine                                 BindingFlags.Public | Di2015NewLine                                 BindingFlags.GetProperty;Di2015NewLineDi2015NewLine        return type.InvokeMember(name, flags, Type.DefaultBinder, obj, null);Di2015NewLine    }Di2015NewLine}Di2015NewLine
138079Di2015UniqueSeparatorobject value = ReflectionExt.GetAttr(obj, "PropertyName");Di2015NewLine
138079Di2015UniqueSeparatorobject value = obj.GetAttr("PropertyName");Di2015NewLine
138082Di2015UniqueSeparatorprotected void Application_Error(Object sender, EventArgs e)Di2015NewLine
138468Di2015UniqueSeparatorclass CustomWindow : IDisposableDi2015NewLine{Di2015NewLine    delegate IntPtr WndProc(IntPtr hWnd, uint msg, IntPtr wParam, IntPtr lParam);Di2015NewLineDi2015NewLine    [System.Runtime.InteropServices.StructLayout(Di2015NewLine        System.Runtime.InteropServices.LayoutKind.Sequential,Di2015NewLine       CharSet = System.Runtime.InteropServices.CharSet.UnicodeDi2015NewLine    )]Di2015NewLine    struct WNDCLASSDi2015NewLine    {Di2015NewLine        public uint style;Di2015NewLine        public IntPtr lpfnWndProc;Di2015NewLine        public int cbClsExtra;Di2015NewLine        public int cbWndExtra;Di2015NewLine        public IntPtr hInstance;Di2015NewLine        public IntPtr hIcon;Di2015NewLine        public IntPtr hCursor;Di2015NewLine        public IntPtr hbrBackground;Di2015NewLine        [System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.LPWStr)]Di2015NewLine        public string lpszMenuName;Di2015NewLine        [System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.LPWStr)]Di2015NewLine        public string lpszClassName;Di2015NewLine    }Di2015NewLineDi2015NewLine    [System.Runtime.InteropServices.DllImport("user32.dll", SetLastError = true)]Di2015NewLine    static extern System.UInt16 RegisterClassW(Di2015NewLine        [System.Runtime.InteropServices.In] ref WNDCLASS lpWndClassDi2015NewLine    );Di2015NewLineDi2015NewLine    [System.Runtime.InteropServices.DllImport("user32.dll", SetLastError = true)]Di2015NewLine    static extern IntPtr CreateWindowExW(Di2015NewLine       UInt32 dwExStyle,Di2015NewLine       [System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.LPWStr)]Di2015NewLine       string lpClassName,Di2015NewLine       [System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.LPWStr)]Di2015NewLine       string lpWindowName,Di2015NewLine       UInt32 dwStyle,Di2015NewLine       Int32 x,Di2015NewLine       Int32 y,Di2015NewLine       Int32 nWidth,Di2015NewLine       Int32 nHeight,Di2015NewLine       IntPtr hWndParent,Di2015NewLine       IntPtr hMenu,Di2015NewLine       IntPtr hInstance,Di2015NewLine       IntPtr lpParamDi2015NewLine    );Di2015NewLineDi2015NewLine    [System.Runtime.InteropServices.DllImport("user32.dll", SetLastError = true)]Di2015NewLine    static extern System.IntPtr DefWindowProcW(Di2015NewLine        IntPtr hWnd, uint msg, IntPtr wParam, IntPtr lParamDi2015NewLine    );Di2015NewLineDi2015NewLine    [System.Runtime.InteropServices.DllImport("user32.dll", SetLastError = true)]Di2015NewLine    static extern bool DestroyWindow(Di2015NewLine        IntPtr hWndDi2015NewLine    );Di2015NewLineDi2015NewLine    private const int ERROR_CLASS_ALREADY_EXISTS = 1410;Di2015NewLineDi2015NewLine    private bool m_disposed;Di2015NewLine    private IntPtr m_hwnd;Di2015NewLineDi2015NewLine    public void Dispose() Di2015NewLine    {Di2015NewLine        Dispose(true);Di2015NewLine        GC.SuppressFinalize(this);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Dispose(bool disposing) Di2015NewLine    {Di2015NewLine        if (!m_disposed) {Di2015NewLine            if (disposing) {Di2015NewLine                // Dispose managed resourcesDi2015NewLine            }Di2015NewLineDi2015NewLine            // Dispose unmanaged resourcesDi2015NewLine            if (m_hwnd != IntPtr.Zero) {Di2015NewLine                DestroyWindow(m_hwnd);Di2015NewLine                m_hwnd = IntPtr.Zero;Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public CustomWindow(string class_name){Di2015NewLineDi2015NewLine        if (class_name == null) throw new System.Exception("class_name is null");Di2015NewLine        if (class_name == String.Empty) throw new System.Exception("class_name is empty");Di2015NewLineDi2015NewLine        m_wnd_proc_delegate = CustomWndProc;Di2015NewLineDi2015NewLine        // Create WNDCLASSDi2015NewLine        WNDCLASS wind_class = new WNDCLASS();Di2015NewLine        wind_class.lpszClassName = class_name;Di2015NewLine        wind_class.lpfnWndProc = System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(m_wnd_proc_delegate);Di2015NewLineDi2015NewLine        UInt16 class_atom = RegisterClassW(ref wind_class);Di2015NewLineDi2015NewLine        int last_error = System.Runtime.InteropServices.Marshal.GetLastWin32Error();Di2015NewLineDi2015NewLine        if (class_atom == 0 && last_error != ERROR_CLASS_ALREADY_EXISTS) {Di2015NewLine            throw new System.Exception("Could not register window class");Di2015NewLine        }Di2015NewLineDi2015NewLine        // Create windowDi2015NewLine        m_hwnd = CreateWindowExW(Di2015NewLine            0,Di2015NewLine            class_name,Di2015NewLine            String.Empty,Di2015NewLine            0,Di2015NewLine            0,Di2015NewLine            0,Di2015NewLine            0,Di2015NewLine            0,Di2015NewLine            IntPtr.Zero,Di2015NewLine            IntPtr.Zero,Di2015NewLine            IntPtr.Zero,Di2015NewLine            IntPtr.ZeroDi2015NewLine        );Di2015NewLine    }Di2015NewLineDi2015NewLine    private static IntPtr CustomWndProc(IntPtr hWnd, uint msg, IntPtr wParam, IntPtr lParam) Di2015NewLine    {Di2015NewLine        return DefWindowProcW(hWnd, msg, wParam, lParam);Di2015NewLine    }Di2015NewLineDi2015NewLine    private WndProc m_wnd_proc_delegate;Di2015NewLine}Di2015NewLine
138492Di2015UniqueSeparator<asp:GridView AllowSorting="True" OnSorting="gvName_Sorting" ...Di2015NewLine
138492Di2015UniqueSeparatorprotected void gvName_Sorting( object sender, GridViewSortEventArgs e )Di2015NewLine{Di2015NewLine    ...Di2015NewLine    //rebind gridviewDi2015NewLine}Di2015NewLine
138532Di2015UniqueSeparatorthrows SpecificException1, SpecificException2, SpecificException3 ...Di2015NewLine
138532Di2015UniqueSeparatorthrows GeneralExceptionDi2015NewLine
138561Di2015UniqueSeparatorc:\\temp>tidy -helpDi2015NewLinetidy [option...] [file...] [option...] [file...]Di2015NewLineUtility to clean up and pretty print HTML/XHTML/XMLDi2015NewLinesee http://tidy.sourceforge.net/Di2015NewLineDi2015NewLineOptions for HTML Tidy for Windows released on 14 February 2006:Di2015NewLineDi2015NewLineFile manipulationDi2015NewLine-----------------Di2015NewLine -output <file>, -o  write output to the specified <file>Di2015NewLine <file>Di2015NewLine -config <file>      set configuration options from the specified <file>Di2015NewLine -file <file>, -f    write errors to the specified <file>Di2015NewLine <file>Di2015NewLine -modify, -m         modify the original input filesDi2015NewLineDi2015NewLineProcessing directivesDi2015NewLine---------------------Di2015NewLine -indent, -i         indent element contentDi2015NewLine -wrap <column>, -w  wrap text at the specified <column>. 0 is assumed ifDi2015NewLine <column>            <column> is missing. When this option is omitted, theDi2015NewLine                     default of the configuration option "wrap" applies.Di2015NewLine -upper, -u          force tags to upper caseDi2015NewLine -clean, -c          replace FONT, NOBR and CENTER tags by CSSDi2015NewLine -bare, -b           strip out smart quotes and em dashes, etc.Di2015NewLine -numeric, -n        output numeric rather than named entitiesDi2015NewLine -errors, -e         only show errorsDi2015NewLine -quiet, -q          suppress nonessential outputDi2015NewLine -omit               omit optional end tagsDi2015NewLine -xml                specify the input is well formed XMLDi2015NewLine -asxml, -asxhtml    convert HTML to well formed XHTMLDi2015NewLine -ashtml             force XHTML to well formed HTMLDi2015NewLine -access <level>     do additional accessibility checks (<level> = 0, 1, 2, 3).Di2015NewLine                     0 is assumed if <level> is missing.Di2015NewLineDi2015NewLineCharacter encodingsDi2015NewLine-------------------Di2015NewLine -raw                output values above 127 without conversion to entitiesDi2015NewLine -ascii              use ISO-8859-1 for input, US-ASCII for outputDi2015NewLine -latin0             use ISO-8859-15 for input, US-ASCII for outputDi2015NewLine -latin1             use ISO-8859-1 for both input and outputDi2015NewLine -iso2022            use ISO-2022 for both input and outputDi2015NewLine -utf8               use UTF-8 for both input and outputDi2015NewLine -mac                use MacRoman for input, US-ASCII for outputDi2015NewLine -win1252            use Windows-1252 for input, US-ASCII for outputDi2015NewLine -ibm858             use IBM-858 (CP850+Euro) for input, US-ASCII for outputDi2015NewLine -utf16le            use UTF-16LE for both input and outputDi2015NewLine -utf16be            use UTF-16BE for both input and outputDi2015NewLine -utf16              use UTF-16 for both input and outputDi2015NewLine -big5               use Big5 for both input and outputDi2015NewLine -shiftjis           use Shift_JIS for both input and outputDi2015NewLine -language <lang>    set the two-letter language code <lang> (for future use)Di2015NewLineDi2015NewLineMiscellaneousDi2015NewLine-------------Di2015NewLine -version, -v        show the version of TidyDi2015NewLine -help, -h, -?       list the command line optionsDi2015NewLine -xml-help           list the command line options in XML formatDi2015NewLine -help-config        list all configuration optionsDi2015NewLine -xml-config         list all configuration options in XML formatDi2015NewLine -show-config        list the current configuration settingsDi2015NewLineDi2015NewLineUse --blah blarg for any configuration option "blah" with argument "blarg"Di2015NewLineDi2015NewLineInput/Output default to stdin/stdout respectivelyDi2015NewLineSingle letter options apart from -f may be combinedDi2015NewLineas in:  tidy -f errs.txt -imu foo.htmlDi2015NewLineFor further info on HTML see http://www.w3.org/MarkUpDi2015NewLine
138615Di2015UniqueSeparator>>> import reDi2015NewLine>>> re.sub(r"x(?=[^']*'([^']|'[^']*')*$)", "P", "axbx'cxdxe'fxgh'ixj'k")Di2015NewLine"axbx'cPdPe'fxgh'iPj'k"Di2015NewLine
138892Di2015UniqueSeparatorpublic List<Uri> FetchLinksFromSource(string htmlSource)Di2015NewLine{Di2015NewLine    List<Uri> links = new List<Uri>();Di2015NewLine    string regexImgSrc = @"<img[^>]*?src\\s*=\\s*[""']?([^'"" >]+?)[ '""][^>]*?>";Di2015NewLine    MatchCollection matchesImgSrc = Regex.Matches(htmlSource, regexImgSrc, RegexOptions.IgnoreCase | RegexOptions.Singleline);Di2015NewLine    foreach (Match m in matchesImgSrc)Di2015NewLine    {Di2015NewLine        string href = m.Groups[1].Value;Di2015NewLine        links.Add(new Uri(href));Di2015NewLine    }Di2015NewLine    return links;Di2015NewLine}Di2015NewLine
138892Di2015UniqueSeparatorHttpWebRequest request = (HttpWebRequest)WebRequest.Create("http://www.example.com");Di2015NewLinerequest.Credentials = System.Net.CredentialCache.DefaultCredentials;Di2015NewLineHttpWebResponse response = (HttpWebResponse)request.GetResponse();Di2015NewLineif (response.StatusCode == HttpStatusCode.OK)Di2015NewLine{Di2015NewLine    using( StreamReader sr = new StreamReader( response.GetResponseStream() )Di2015NewLine    {Di2015NewLine        List<Uri> links = FetchLinksFromSource( sr.ReadToEnd() );Di2015NewLine    }Di2015NewLine}Di2015NewLine
139611Di2015UniqueSeparatorSystem.Type
139611Di2015UniqueSeparatorGetType
139611Di2015UniqueSeparatorSystem.Type
139611Di2015UniqueSeparatortypeof
139611Di2015UniqueSeparatorGetType
139611Di2015UniqueSeparatortypeof
139841Di2015UniqueSeparatorpublic static Dictionary<TKey, TValue> CloneDictionaryCloningValues<TKey, TValue>Di2015NewLine   (Dictionary<TKey, TValue> original) where TValue : ICloneableDi2015NewLine{Di2015NewLine    Dictionary<TKey, TValue> ret = new Dictionary<TKey, TValue>(original.Count,Di2015NewLine                                                            original.Comparer);Di2015NewLine    foreach (KeyValuePair<TKey, TValue> entry in original)Di2015NewLine    {Di2015NewLine        ret.Add(entry.Key, (TValue) entry.Value.Clone());Di2015NewLine    }Di2015NewLine    return ret;Di2015NewLine}Di2015NewLine
139886Di2015UniqueSeparatorServiceHost
139886Di2015UniqueSeparatorServiceHost
139886Di2015UniqueSeparatorServiceHost
139886Di2015UniqueSeparatorMyService svc = new MyService();Di2015NewLinesvc.SomeEvent += new MyEventDelegate(this.OnSomeEvent);Di2015NewLineServiceHost host = new ServiceHost(svc);Di2015NewLinehost.Open();Di2015NewLine
140060Di2015UniqueSeparatorIEnumerable
140060Di2015UniqueSeparatorIEnumerable<object>
140060Di2015UniqueSeparatorEnumerable.Count<T>()
140060Di2015UniqueSeparatorusing System.Linq;Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLinevar resourceSet = resourceManager.GetResourceSet(..);Di2015NewLinevar count = resSet.Cast<object>().Count();Di2015NewLine
140154Di2015UniqueSeparatorWebOperationContext
140154Di2015UniqueSeparatorOutgoingResponse
140154Di2015UniqueSeparatorOutgoingWebResponseContext
140154Di2015UniqueSeparatorStatusCode
140154Di2015UniqueSeparatorWebOperationContext ctx = WebOperationContext.Current;Di2015NewLinectx.OutgoingResponse.StatusCode = System.Net.HttpStatusCode.OK;Di2015NewLine
140505Di2015UniqueSeparatorpublic class MyBaseDi2015NewLine{Di2015NewLine  public MyBase()Di2015NewLine  {Di2015NewLine    Console.WriteLine("MyBase");Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyDerived : MyBaseDi2015NewLine{Di2015NewLine  public MyDerived():base()Di2015NewLine  {Di2015NewLine    Console.WriteLine("MyDerived");Di2015NewLine  }Di2015NewLine}Di2015NewLine
140801Di2015UniqueSeparator   public void Session_OnStart()Di2015NewLine    {Di2015NewLine        if (HttpContext.Current.Request.Cookies.Contains("ASP.NET_SessionId") != null)Di2015NewLine        {Di2015NewLine            HttpContext.Current.Response.Redirect("SessionTimeout.aspx")Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine
141032Di2015UniqueSeparatorHierarchicalDataTemplate fieldPropertyTemplate = new Di2015NewLine    HierarchicalDataTemplate("FieldProperyInfo");Di2015NewLineDi2015NewLinefieldPropertyTemplate.SetBinding(Di2015NewLine   HierarchialDataTemplate.ItemSourceProperty, Di2015NewLine   new Binding("Value.Values");Di2015NewLinethis.Resources.Add(FieldPropertyInfo.GetType(), fieldPropertyTemplate);Di2015NewLine
141069Di2015UniqueSeparatorusing System.Text.RegularExpressions;Di2015NewLine// ...Di2015NewLinestring normalized = Regex.Replace(originalString, @"\\r\\n|\\n\\r|\\n|\\r", "\\r\\n");Di2015NewLine
141069Di2015UniqueSeparator$str =~ s/\\r\\n|\\n\\r|\\n|\\r/\\r\\n/g;Di2015NewLine
141069Di2015UniqueSeparator[bash$] ./test.plDi2015NewLine\\r -> \\r\\nDi2015NewLine\\n -> \\r\\nDi2015NewLine\\n\\n -> \\r\\n\\r\\nDi2015NewLine\\n\\r -> \\r\\nDi2015NewLine\\r\\n -> \\r\\nDi2015NewLine\\r\\n\\n -> \\r\\n\\r\\nDi2015NewLine
141098Di2015UniqueSeparatorforeach(KeyValuePair<string, string> entry in MyDic)Di2015NewLine{Di2015NewLine    // do something with entry.Value or entry.KeyDi2015NewLine}Di2015NewLine
141215Di2015UniqueSeparatorusing (SqlConnection conn = new SqlConnection (...))Di2015NewLine{Di2015NewLine    // Whatever happens in here, the connection is Di2015NewLine    // disposed of (closed) at the end.Di2015NewLine}Di2015NewLine
141528Di2015UniqueSeparatorpublic static IEnumerable<TElement> Flatten<TElement,TSequence> (this IEnumerable<TSequence> sequences)Di2015NewLine    where TSequence : IEnumerable<TElement> Di2015NewLine{Di2015NewLine    foreach (TSequence sequence in sequences)Di2015NewLine    {Di2015NewLine        foreach(TElement element in sequence)Di2015NewLine        {Di2015NewLine            yield return element;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
141528Di2015UniqueSeparatorstatic IEnumerable Flatten(params object[] objects)Di2015NewLine{Di2015NewLine    // Can't easily get varargs behaviour with IEnumerableDi2015NewLine    return Flatten((IEnumerable) objects);Di2015NewLine}Di2015NewLineDi2015NewLinestatic IEnumerable Flatten(IEnumerable enumerable)Di2015NewLine{Di2015NewLine    foreach (object element in enumerable)Di2015NewLine    {Di2015NewLine        IEnumerable candidate = element as IEnumerable;Di2015NewLine        if (candidate != null)Di2015NewLine        {Di2015NewLine            foreach (object nested in candidate)Di2015NewLine            {Di2015NewLine                yield return nested;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            yield return element;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
141816Di2015UniqueSeparatorbyte[] bytes = Encoding.GetEncoding(437).GetBytes("Ãª");Di2015NewLine
141954Di2015UniqueSeparatorSub ActionExample()Di2015NewLine   Dim objFind As Find = objTextDoc.DTE.FindDi2015NewLineDi2015NewLine   ' Set the find options.Di2015NewLine   objFind.Action = vsFindAction.vsFindActionFindAllDi2015NewLine   objFind.Backwards = FalseDi2015NewLine   objFind.FilesOfType = "*.vb"Di2015NewLine   objFind.FindWhat = "<Variable>"Di2015NewLine   objFind.KeepModifiedDocumentsOpen = FalseDi2015NewLine   objFind.MatchCase = TrueDi2015NewLine   objFind.MatchInHiddenText = TrueDi2015NewLine   objFind.MatchWholeWord = TrueDi2015NewLine   objFind.PatternSyntax = vsFindPatternSyntax.vsFindPatternSyntaxLiteralDi2015NewLine   objFind.ResultsLocation = vsFindResultsLocation.vsFindResultsNoneDi2015NewLine   objFind.SearchPath = "c:\\<Your>\\<Project>\\<Path>"Di2015NewLine   objFind.SearchSubfolders = FalseDi2015NewLine   objFind.Target = vsFindTarget.vsFindTargetCurrentDocumentDi2015NewLine   ' Perform the Find operation.Di2015NewLine   objFind.Execute()Di2015NewLineEnd SubDi2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine<System.ContextStaticAttribute()> _Di2015NewLinePublic WithEvents FindEvents As EnvDTE.FindEventsDi2015NewLineDi2015NewLinePublic Sub FindEvents_FindDone(ByVal Result As EnvDTE.vsFindResult, _Di2015NewLine                               ByVal Cancelled As Boolean) _Di2015NewLine                               Handles FindEvents.FindDoneDi2015NewLine   Select Case Result Di2015NewLine        case vsFindResultFoundDi2015NewLine             'Found!Di2015NewLine        case elseDi2015NewLine             'Not FoundDi2015NewLine   Ens selectDi2015NewLineEnd SubDi2015NewLine
142069Di2015UniqueSeparatorUserContrl1_LOadDataMethod()Di2015NewLine{Di2015NewLine    string name = "";Di2015NewLine    if(textbox1.InvokeRequired)Di2015NewLine    {Di2015NewLine        textbox1.Invoke(new MethodInvoker(delegate { name = textbox1.text; }));Di2015NewLine    }Di2015NewLine    if(name == "MyName")Di2015NewLine    {Di2015NewLine        // do whateverDi2015NewLine    }Di2015NewLine}Di2015NewLine
142069Di2015UniqueSeparatorUserContrl1_LOadDataMethod()Di2015NewLine{Di2015NewLine    if(textbox1.text=="MyName") //<<======Now it wont give exception**Di2015NewLine    {Di2015NewLine        //Load data correspondin to "MyName"Di2015NewLine        //Populate a globale variable List<string> which will beDi2015NewLine        //bound to grid at some later stageDi2015NewLine        if(InvokeRequired)Di2015NewLine        {Di2015NewLine            // after we've done all the processing, Di2015NewLine            this.Invoke(new MethodInvoker(delegate {Di2015NewLine                // load the control with the appropriate dataDi2015NewLine            }));Di2015NewLine            return;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
142263Di2015UniqueSeparatord == Math.Floor(d)Di2015NewLine
142362Di2015UniqueSeparatortype.GetConstructor(Type.EmptyTypes)Di2015NewLine
142819Di2015UniqueSeparator2748.ToString("X")Di2015NewLine
142823Di2015UniqueSeparator[Browsable(true)]Di2015NewLinepublic event EventHandler MyCustomEvent;Di2015NewLine
143024Di2015UniqueSeparatorImports Microsoft.VisualBasicDi2015NewLineDi2015NewLineModule Module1Di2015NewLineDi2015NewLine'Sample COMP-3 conversion codeDi2015NewLine'Adapted from http://support.microsoft.com/kb/65323Di2015NewLine'This code has not been testedDi2015NewLineDi2015NewLineSub Main()Di2015NewLineDi2015NewLine    Dim Digits%(15)       'Holds the digits for each number (max = 16).Di2015NewLine    Dim Basiceqv#(1000)   'Holds the Basic equivalent of each COMP-3 number.Di2015NewLineDi2015NewLine    'Added to make code compileDi2015NewLine    Dim MyByte As Char, HighPower%, HighNibble%Di2015NewLine    Dim LowNibble%, Digit%, E%, Decimal%, FileName$Di2015NewLineDi2015NewLineDi2015NewLine    'Clear the screen, get the filename and the amount of decimal placesDi2015NewLine    'desired for each number, and open the file for sequential input:Di2015NewLine    FileName$ = InputBox("Enter the COBOL data file name: ")Di2015NewLine    Decimal% = InputBox("Enter the number of decimal places desired: ")Di2015NewLineDi2015NewLine    FileOpen(1, FileName$, OpenMode.Binary)Di2015NewLineDi2015NewLine    Do Until EOF(1)   'Loop until the end of the file is reached.Di2015NewLine        Input(1, MyByte)Di2015NewLine        If MyByte = Chr(0) Then     'Check if byte is 0 (ASC won't work on 0).Di2015NewLine            Digits%(HighPower%) = 0       'Make next two digits 0. IncrementDi2015NewLine            Digits%(HighPower% + 1) = 0   'the high power to reflect theDi2015NewLine            HighPower% = HighPower% + 2   'number of digits in the numberDi2015NewLine            'plus 1.Di2015NewLine        ElseDi2015NewLine            HighNibble% = Asc(MyByte) \\ 16      'Extract the high and lowDi2015NewLine            LowNibble% = Asc(MyByte) And &HF    'nibbles from the byte. TheDi2015NewLine            Digits%(HighPower%) = HighNibble%  'high nibble will always be aDi2015NewLine            'digit.Di2015NewLine            If LowNibble% <= 9 Then                   'If low nibble is aDi2015NewLine                'digit, assign it andDi2015NewLine                Digits%(HighPower% + 1) = LowNibble%   'increment the highDi2015NewLine                HighPower% = HighPower% + 2            'power accordingly.Di2015NewLine            ElseDi2015NewLine                HighPower% = HighPower% + 1 'Low nibble was not a digit but aDi2015NewLine                Digit% = 0                  '+ or - signals end of number.Di2015NewLineDi2015NewLine                'Start at the highest power of 10 for the number and multiplyDi2015NewLine                'each digit by the power of 10 place it occupies.Di2015NewLine                For Power% = (HighPower% - 1) To 0 Step -1Di2015NewLine                    Basiceqv#(E%) = Basiceqv#(E%) + (Digits%(Digit%) * (10 ^ Power%))Di2015NewLine                    Digit% = Digit% + 1Di2015NewLine                NextDi2015NewLineDi2015NewLine                'If the sign read was negative, make the number negative.Di2015NewLine                If LowNibble% = 13 ThenDi2015NewLine                    Basiceqv#(E%) = Basiceqv#(E%) - (2 * Basiceqv#(E%))Di2015NewLine                End IfDi2015NewLineDi2015NewLine                'Give the number the desired amount of decimal places, printDi2015NewLine                'the number, increment E% to point to the next number to beDi2015NewLine                'converted, and reinitialize the highest power.Di2015NewLine                Basiceqv#(E%) = Basiceqv#(E%) / (10 ^ Decimal%)Di2015NewLine                Print(Basiceqv#(E%))Di2015NewLine                E% = E% + 1Di2015NewLine                HighPower% = 0Di2015NewLine            End IfDi2015NewLine        End IfDi2015NewLine    LoopDi2015NewLineDi2015NewLine    FileClose()   'Close the COBOL data file, and end.Di2015NewLineEnd SubDi2015NewLineDi2015NewLineEnd ModuleDi2015NewLine
143153Di2015UniqueSeparatorThread.Suspend
143153Di2015UniqueSeparatorSuspendThread
143153Di2015UniqueSeparatorResumeThread
143153Di2015UniqueSeparatorSuspendThread
143153Di2015UniqueSeparatorManualResetEvent
143153Di2015UniqueSeparatorwhile (true)Di2015NewLine{Di2015NewLine    _suspendEvent.WaitOne(Timeout.Infinite);Di2015NewLineDi2015NewLine    // Do some work...Di2015NewLine}Di2015NewLine
143153Di2015UniqueSeparatorManualResetEvent _suspendEvent = new ManualResetEvent(true);Di2015NewLine
143153Di2015UniqueSeparatortrue
143153Di2015UniqueSeparator_suspendEvent.Reset();Di2015NewLine
143153Di2015UniqueSeparator_suspendEvent.Set();Di2015NewLine
143153Di2015UniqueSeparatorpublic class WorkerDi2015NewLine{Di2015NewLine    ManualResetEvent _shutdownEvent = new ManualResetEvent(false);Di2015NewLine    ManualResetEVent _pauseEvent = new ManualResetEvent(true);Di2015NewLine    Thread _thread;Di2015NewLineDi2015NewLine    public Worker() { }Di2015NewLineDi2015NewLine    public void Start()Di2015NewLine    {Di2015NewLine        _thread = new Thread(DoWork);Di2015NewLine        _thread.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Pause()Di2015NewLine    {Di2015NewLine        _pauseEvent.Reset();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Resume()Di2015NewLine    {Di2015NewLine        _pauseEvent.Set();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Stop()Di2015NewLine    {Di2015NewLine        // Signal the shutdown eventDi2015NewLine        _shutdownEvent.Set();Di2015NewLineDi2015NewLine        // Make sure to resume any paused threadsDi2015NewLine        _pauseEvent.Set();Di2015NewLineDi2015NewLine        // Wait for the thread to exitDi2015NewLine        _thread.Join();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void DoWork()Di2015NewLine    {Di2015NewLine        while (true)Di2015NewLine        {Di2015NewLine            _pauseEvent.WaitOne(Timeout.Infinite);Di2015NewLineDi2015NewLine            if (_shutdownEvent.WaitOne(0))Di2015NewLine                break;Di2015NewLineDi2015NewLine            // Do the work..Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
143161Di2015UniqueSeparatorlock(lockobj);Di2015NewLinewhile (!signalled) {Di2015NewLine    wait(condvar);Di2015NewLine}Di2015NewLinesignalled = false;Di2015NewLineunlock(lockobj);Di2015NewLine
143161Di2015UniqueSeparatorlock(lockobj);Di2015NewLinesignalled = true;Di2015NewLinenotify(condvar);Di2015NewLineunlock(lockobj);Di2015NewLine
143423Di2015UniqueSeparatorpublic void CopyTo(Array array, int index)Di2015NewLine{Di2015NewLine    throw new NotImplementedException();Di2015NewLine}Di2015NewLine
143423Di2015UniqueSeparatorvoid ICollection.CopyTo(Array array, int index)Di2015NewLine{Di2015NewLine    throw new NotImplementedException();Di2015NewLine}Di2015NewLine
143423Di2015UniqueSeparatormyclass.CopyTo //invalid with explicitDi2015NewLine((IList)myClass).CopyTo //valid with explicit.Di2015NewLine
143567Di2015UniqueSeparatorobject
144069Di2015UniqueSeparatorfloat f = 1.5f;Di2015NewLineint i = (int) f; // ConversionDi2015NewLine
144069Di2015UniqueSeparatorobject o = "hello";Di2015NewLinestring x = (string) o; // No data is "converted"; x and o refer to the same objectDi2015NewLine
144189Di2015UniqueSeparatorpublic static string UnsafeAsciiBytesToString(this byte[] buffer, int offset)Di2015NewLine{Di2015NewLine    string result = null;Di2015NewLineDi2015NewLine    unsafeDi2015NewLine    {Di2015NewLine       fixed( byte* pAscii = &buffer)Di2015NewLine       { Di2015NewLine           result = new String((sbyte*)pAscii, offset, buffer.Length - offset);Di2015NewLine       }Di2015NewLine    }Di2015NewLineDi2015NewLine    return result;Di2015NewLine}Di2015NewLine
144441Di2015UniqueSeparatorstring CombinePaths(params string[] parts) {Di2015NewLine    string result = String.Empty;Di2015NewLine    foreach (string s in parts) {Di2015NewLine        result = Path.Combine(result, s);Di2015NewLine    }Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
144535Di2015UniqueSeparatorEquals()
144535Di2015UniqueSeparatornull
144535Di2015UniqueSeparatorEquals()
144535Di2015UniqueSeparatorString
144535Di2015UniqueSeparatorDateTime
144535Di2015UniqueSeparator==
144575Di2015UniqueSeparatorList<T>
144575Di2015UniqueSeparatorusing System.Collections.Generic;Di2015NewLineDi2015NewLinevar list = new List<int>();Di2015NewLinelist.Add(1);Di2015NewLinelist.Add("string"); //compile-time error!Di2015NewLineint i = list[0];Di2015NewLine
144791Di2015UniqueSeparatorpartial
145422Di2015UniqueSeparatorApps
145516Di2015UniqueSeparatory.Length
145516Di2015UniqueSeparatorx.Substring(0, y.Length).Equals(y)
145625Di2015UniqueSeparatorprivate void MyMethod(bool arg){Di2015NewLine   if(arg)Di2015NewLine       return;Di2015NewLine   //do stuffDi2015NewLine};Di2015NewLine
145864Di2015UniqueSeparatorvar ints = new int[] {1, 2, 3, 4, 5};Di2015NewLinevar result = string.Join(",", ints.Select(x => x.ToString()).ToArray());Di2015NewLineConsole.WriteLine(result); // prints "1,2,3,4,5"Di2015NewLine
145864Di2015UniqueSeparator// length computed from length of items in input array and length of separatorDi2015NewLinestring str = FastAllocateString(length);Di2015NewLinefixed (char* chRef = &str.m_firstChar) // note than we use direct memory access hereDi2015NewLine{Di2015NewLine    UnSafeCharBuffer buffer = new UnSafeCharBuffer(chRef, length);Di2015NewLine    buffer.AppendString(value[startIndex]);Di2015NewLine    for (int j = startIndex + 1; j <= num2; j++)Di2015NewLine    {Di2015NewLine        buffer.AppendString(separator);Di2015NewLine        buffer.AppendString(value[j]);Di2015NewLine    }Di2015NewLine}Di2015NewLine
146162Di2015UniqueSeparatorstring illegal = "\\"M\\"\\\\a/ry/ h**ad:>> a\\\\/:*?\\"| li*tt|le|| la\\"mb.?";Di2015NewLinestring invalid = new string(Path.GetInvalidFileNameChars()) + new string(Path.GetInvalidPathChars());Di2015NewLineDi2015NewLineforeach (char c in invalid)Di2015NewLine{Di2015NewLine    illegal = illegal.Replace(c.ToString(), ""); Di2015NewLine}Di2015NewLine
146162Di2015UniqueSeparatorstring illegal = "\\"M\\"\\\\a/ry/ h**ad:>> a\\\\/:*?\\"| li*tt|le|| la\\"mb.?";Di2015NewLinestring regexSearch = new string(Path.GetInvalidFileNameChars()) + new string(Path.GetInvalidPathChars());Di2015NewLineRegex r = new Regex(string.Format("[{0}]", Regex.Escape(regexSearch)));Di2015NewLineillegal = r.Replace(illegal, "");Di2015NewLine
146227Di2015UniqueSeparatorLookup
146227Di2015UniqueSeparatorLookup
146227Di2015UniqueSeparatorEnumerable.ToLookup
146474Di2015UniqueSeparatorProcess[] processes = Process.GetProcessesByName(processName);Di2015NewLineforeach(Process process in processes)Di2015NewLine{Di2015NewLine   process.Kill();Di2015NewLine}Di2015NewLine
146615Di2015UniqueSeparatorpublic abstract class MyServiceImplDi2015NewLine{Di2015NewLine    public void MyMethod(string entityId)Di2015NewLine    {Di2015NewLine        CheckPermissions(entityId);Di2015NewLine        //move along...Di2015NewLine    }Di2015NewLine    protected abstract bool CheckPermissions(string entityId);Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyServiceUnitTestDi2015NewLine{Di2015NewLine    private bool CheckPermissions(string entityId)Di2015NewLine    {Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyServiceMyAuthDi2015NewLine{Di2015NewLine    private bool CheckPermissions(string entityId)Di2015NewLine    {Di2015NewLine        //do some custom authenticationDi2015NewLine        return true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
146957Di2015UniqueSeparatordifflib
146957Di2015UniqueSeparatordef text_compare(text1, text2, isjunk=None):Di2015NewLine    return difflib.SequenceMatcher(isjunk, text1, text2).ratio()Di2015NewLine
147149Di2015UniqueSeparatorstring[] result = list1.Union(list2).ToArray();Di2015NewLine
147407Di2015UniqueSeparatorinterface IVisitorDi2015NewLine{Di2015NewLine  void DoPigStuff(Piggy p);Di2015NewLine  void DoDogStuff(Doggy d);Di2015NewLine}Di2015NewLineDi2015NewLineclass GuiVisitor : IVisitorDi2015NewLine{Di2015NewLine  void DoPigStuff(Piggy p)Di2015NewLine  {Di2015NewLine    label1.Text = String.Format("The pigs tail is {0}", p.TailLength);Di2015NewLine  }Di2015NewLineDi2015NewLine  void DoDogStuff(Doggy d)Di2015NewLine  {Di2015NewLine    Image1.src = d.Image;Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLineabstract class AnimalDi2015NewLine{Di2015NewLine    public String Name { get; set; }Di2015NewLine    public abstract void Visit(IVisitor visitor);Di2015NewLine}Di2015NewLineDi2015NewLineclass Piggy : AnimalDi2015NewLine{Di2015NewLine    public int TailLength { get; set; }Di2015NewLineDi2015NewLine    public Piggy(int tailLength) Di2015NewLine    {Di2015NewLine        Name = "Mr Pig";Di2015NewLine        TailLength = tailLength;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Visit(IVisitor visitor)Di2015NewLine    {Di2015NewLine       visitor.DoPigStuff(this);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass Doggy : Animal Di2015NewLine{Di2015NewLine   public String Image { get; set; }Di2015NewLineDi2015NewLine   public Doggy(String image) Di2015NewLine   {Di2015NewLine     Name = "Mr Dog";Di2015NewLine     Image = image;Di2015NewLine   }Di2015NewLineDi2015NewLine   public void Visit(IVisitor visitor)Di2015NewLine   {Di2015NewLine     visitor.DoDogStuff(this);Di2015NewLine   }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class AnimalProgramDi2015NewLine{Di2015NewLine  static void Main(string[] args) {Di2015NewLine    List<Animal> list = new List<Animal>();  Di2015NewLine    Pig p = new Pig(5);  Di2015NewLine    Dog d = new Dog("/images/dog1.jpg");  Di2015NewLine    list.Add(p);  Di2015NewLine    list.Add(d);Di2015NewLineDi2015NewLine    IVisitor visitor = new GuiVisitor();  Di2015NewLine    foreach (Animal a in list)   Di2015NewLine    {Di2015NewLine      a.Visit(visitor);Di2015NewLine    }  Di2015NewLine  }Di2015NewLine}Di2015NewLine
147656Di2015UniqueSeparatorT result = Operator.Add(first, second); // implicit <T>; hereDi2015NewLine
147656Di2015UniqueSeparatordynamic
147656Di2015UniqueSeparatorstatic T Add<T>(T x, T y) {Di2015NewLine    dynamic dx = x, dy = y;Di2015NewLine    return dx + dy;Di2015NewLine}Di2015NewLine
147656Di2015UniqueSeparatorinterface ICalc<T>Di2015NewLine{Di2015NewLine    T Add(T,T)() Di2015NewLine    T Subtract(T,T)()Di2015NewLine}Di2015NewLine
147656Di2015UniqueSeparatorICalc<T>;
147682Di2015UniqueSeparatorList<Customer>Di2015NewLine
147682Di2015UniqueSeparatorCustomerListDi2015NewLine
147785Di2015UniqueSeparator[Guid("00001111-2222-3333-4444-555566667777"), ComVisible(true)]    Di2015NewLinepublic class MyCOMRegisteredClassDi2015NewLine
147961Di2015UniqueSeparatorStream responseStream = CopyAndClose(resp.GetResponseStream());Di2015NewLine// Do something with the streamDi2015NewLineresponseStream.Position = 0;Di2015NewLine// Do something with the stream againDi2015NewLineDi2015NewLineDi2015NewLineprivate static Stream CopyAndClose(Stream inputStream)Di2015NewLine{Di2015NewLine    const int readSize = 256;Di2015NewLine    byte[] buffer = new byte[readSize];Di2015NewLine    MemoryStream ms = new MemoryStream();Di2015NewLineDi2015NewLine    int count = inputStream.Read(buffer, 0, readSize);Di2015NewLine    while (count > 0)Di2015NewLine    {Di2015NewLine        ms.Write(buffer, 0, count);Di2015NewLine        count = inputStream.Read(buffer, 0, readSize);Di2015NewLine    }Di2015NewLine    ms.Position = 0;Di2015NewLine    inputStream.Close();Di2015NewLine    return ms;Di2015NewLine}Di2015NewLine
148117Di2015UniqueSeparatorSystem.Diagnostics.TraceDi2015NewLine
148117Di2015UniqueSeparatorTrace()
148117Di2015UniqueSeparatorDefaultTraceListener
148117Di2015UniqueSeparatorTextWriterTraceListener
148117Di2015UniqueSeparatorEventLogTraceListener
148481Di2015UniqueSeparator# IronPythonDi2015NewLineimport SystemDi2015NewLineexported_types = [Di2015NewLine  (t.Namespace, t.Name)Di2015NewLine  for t in System.Int32().GetType().Assembly.GetExportedTypes()]Di2015NewLineDi2015NewLineimport itertoolsDi2015NewLineget_ns = lambda (ns, typename): nsDi2015NewLinesorted_exported_types = sorted(exported_types, key=get_ns)Di2015NewLinecounts_per_ns = dict(Di2015NewLine  (ns, len(list(typenames)))Di2015NewLine  for ns, typenamesDi2015NewLine  in itertools.groupby(sorted_exported_types, get_ns))Di2015NewLinecounts = sorted(counts_per_ns.values())Di2015NewLineDi2015NewLineprint 'Min:', counts[0]Di2015NewLineprint 'Max:', counts[-1]Di2015NewLineprint 'Avg:', sum(counts) / len(counts)Di2015NewLineprint 'Med:',Di2015NewLineif len(counts) % 2:Di2015NewLine  print counts[len(counts) / 2]Di2015NewLineelse: # ignoring len == 1 caseDi2015NewLine  print (counts[len(counts) / 2 - 1] + counts[len(counts) / 2]) / 2Di2015NewLine
148481Di2015UniqueSeparatorC:\\tools\\nspop>ipy nspop.pyDi2015NewLineMin: 1Di2015NewLineMax: 173Di2015NewLineAvg: 27Di2015NewLineMed: 15Di2015NewLine
148688Di2015UniqueSeparatorclass Foo {Di2015NewLine  public string currentValue; // yes, it is a fieldDi2015NewLineDi2015NewLine  public void SomeMethod(object sender, EventArgs e) {Di2015NewLine    Response.Write(currentValue);Di2015NewLine  }Di2015NewLine}Di2015NewLine...Di2015NewLinepublic Page_Index() {Di2015NewLine  Foo foo = new Foo();Di2015NewLine  foo.currentValue = "This is the FIRST value";Di2015NewLine  this.Load += foo.SomeMethod;Di2015NewLineDi2015NewLine  foo.currentValue = "This is the MODIFIED value";Di2015NewLine}Di2015NewLine
148716Di2015UniqueSeparatorfor(int i = originalList.length-1; i >=0; --i)Di2015NewLine{Di2015NewLine     if (!newList.Contains(originalList[i])Di2015NewLine            originalList.RemoveAt(i);Di2015NewLine}Di2015NewLineDi2015NewLineforeach(int n in newList)Di2015NewLine{Di2015NewLine     if (!originaList.Contains(n))Di2015NewLine           originalList.Add(n);Di2015NewLine}Di2015NewLine
148811Di2015UniqueSeparatorpublic enum DriveTypeDi2015NewLine{Di2015NewLine    Unknown,         // The type of drive is unknown.  Di2015NewLine    NoRootDirectory, // The drive does not have a root directory.  Di2015NewLine    Removable,       // The drive is a removable storage device, Di2015NewLine                     //    such as a floppy disk drive or a USB flash drive.  Di2015NewLine    Fixed,           // The drive is a fixed disk.  Di2015NewLine    Network,         // The drive is a network drive.  Di2015NewLine    CDRom,           // The drive is an optical disc device, such as a CD Di2015NewLine                     // or DVD-ROM.  Di2015NewLine    Ram              // The drive is a RAM disk.   Di2015NewLine}Di2015NewLine
148811Di2015UniqueSeparator    DriveInfo[] allDrives = DriveInfo.GetDrives();Di2015NewLine    foreach (DriveInfo d in allDrives)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Drive {0}, Type {1}", d.Name, d.DriveType);Di2015NewLine    }Di2015NewLine
149023Di2015UniqueSeparatorpublic class DomainEventStorage<ActionType>Di2015NewLine{Di2015NewLine    public List<ActionType> ActionsDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            var k = string.Format("Domain.Event.DomainEvent.{0}.{1}",Di2015NewLine                                  GetType().Name,Di2015NewLine                                  GetType().GetGenericArguments()[0]);Di2015NewLine            if (Local.Data[k] == null)Di2015NewLine                Local.Data[k] = new List<ActionType>();Di2015NewLineDi2015NewLine            return (List<ActionType>) Local.Data[k];Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public IDisposable Register(ActionType callback)Di2015NewLine    {Di2015NewLine        Actions.Add(callback);Di2015NewLine        return new DomainEventRegistrationRemover(() => Actions.Remove(callback)Di2015NewLine            );Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class DomainEvent<T1> : IDomainEvent where T1 : classDi2015NewLine{Di2015NewLine    private readonly DomainEventStorage<Action<T1>> _impl = new DomainEventStorage<Action<T1>>();Di2015NewLineDi2015NewLine    internal List<Action<T1>> Actions { get { return _impl.Actions; } }Di2015NewLineDi2015NewLine    public IDisposable Register(Action<T1> callback)Di2015NewLine    {Di2015NewLine        return _impl.Register(callback);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Raise(T1 args)Di2015NewLine    {Di2015NewLine        foreach (var action in Actions)Di2015NewLine        {Di2015NewLine            action.Invoke(args);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
149023Di2015UniqueSeparatorvar fail = false;Di2015NewLineusing(var ev = DomainErrors.SomethingHappened.Register(c => fail = true) Di2015NewLine{Di2015NewLine   //Do something with your domain hereDi2015NewLine}Di2015NewLine
149088Di2015UniqueSeparator   Di2015NewLineDi2015NewLineXmlDocument doc = new XmlDocument();Di2015NewLinedoc.LoadXml(xmlWithBogusNamespace);            Di2015NewLineXmlNamespaceManager nSpace = new XmlNamespaceManager(doc.NameTable);Di2015NewLinenSpace.AddNamespace("myNs", "http://theirUri");Di2015NewLineDi2015NewLineXmlNodeList nodes = doc.SelectNodes("//myNs:NodesIWant",nSpace);Di2015NewLine//etcDi2015NewLineDi2015NewLine
150123Di2015UniqueSeparatorRate      Try-Catch          TryParse        SlowdownDi2015NewLine  0%   00:00:00.0131758   00:00:00.0120421      0.1Di2015NewLine 10%   00:00:00.1540251   00:00:00.0087699     16.6Di2015NewLine 20%   00:00:00.2833266   00:00:00.0105229     25.9Di2015NewLine 30%   00:00:00.4462866   00:00:00.0091487     47.8Di2015NewLine 40%   00:00:00.6951060   00:00:00.0108980     62.8Di2015NewLine 50%   00:00:00.7567745   00:00:00.0087065     85.9Di2015NewLine 60%   00:00:00.7090449   00:00:00.0083365     84.1Di2015NewLine 70%   00:00:00.8179365   00:00:00.0088809     91.1Di2015NewLine 80%   00:00:00.9468898   00:00:00.0088562    105.9Di2015NewLine 90%   00:00:01.0411393   00:00:00.0081040    127.5Di2015NewLine100%   00:00:01.1488157   00:00:00.0078877    144.6Di2015NewLineDi2015NewLineDi2015NewLine/// <param name="errorRate">Rate of errors in user input</param>Di2015NewLine/// <returns>Total time taken</returns>Di2015NewLinepublic static TimeSpan TimeTryCatch(double errorRate, int seed, int count)Di2015NewLine{Di2015NewLine    Stopwatch stopwatch = new Stopwatch();Di2015NewLine    Random random = new Random(seed);Di2015NewLine    string bad_prefix = @"X";Di2015NewLineDi2015NewLine    stopwatch.Start();Di2015NewLine    for(int ii = 0; ii < count; ++ii)Di2015NewLine    {Di2015NewLine        string input = random.Next().ToString();Di2015NewLine        if (random.NextDouble() < errorRate)Di2015NewLine        {Di2015NewLine           input = bad_prefix + input;Di2015NewLine        }Di2015NewLineDi2015NewLine        int value = 0;Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            value = Int32.Parse(input);Di2015NewLine        }Di2015NewLine        catch(FormatException)Di2015NewLine        {Di2015NewLine            value = -1; // we would do something here with a logger perhapsDi2015NewLine        }Di2015NewLine    }Di2015NewLine    stopwatch.Stop();Di2015NewLineDi2015NewLine    return stopwatch.Elapsed;Di2015NewLine}Di2015NewLineDi2015NewLine/// <param name="errorRate">Rate of errors in user input</param>Di2015NewLine/// <returns>Total time taken</returns>Di2015NewLinepublic static TimeSpan TimeTryParse(double errorRate, int seed, int count)Di2015NewLine{Di2015NewLine    Stopwatch stopwatch = new Stopwatch();Di2015NewLine    Random random = new Random(seed);Di2015NewLine    string bad_prefix = @"X";Di2015NewLineDi2015NewLine    stopwatch.Start();Di2015NewLine    for(int ii = 0; ii < count; ++ii)Di2015NewLine    {Di2015NewLine        string input = random.Next().ToString();Di2015NewLine        if (random.NextDouble() < errorRate)Di2015NewLine        {Di2015NewLine           input = bad_prefix + input;Di2015NewLine        }Di2015NewLineDi2015NewLine        int value = 0;Di2015NewLine        if (!Int32.TryParse(input, out value))Di2015NewLine        {Di2015NewLine            value = -1; // we would do something here with a logger perhapsDi2015NewLine        }Di2015NewLine    }Di2015NewLine    stopwatch.Stop();Di2015NewLineDi2015NewLine    return stopwatch.Elapsed;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void TimeStringParse()Di2015NewLine{Di2015NewLine    double errorRate = 0.1; // 10% of the time our users mess upDi2015NewLine    int count = 10000; // 10000 entries by a userDi2015NewLineDi2015NewLine    TimeSpan trycatch = TimeTryCatch(errorRate, 1, count);Di2015NewLine    TimeSpan tryparse = TimeTryParse(errorRate, 1, count);Di2015NewLineDi2015NewLine    Console.WriteLine("trycatch: {0}", trycatch);Di2015NewLine    Console.WriteLine("tryparse: {0}", tryparse);Di2015NewLine}Di2015NewLine
150132Di2015UniqueSeparatorpublic abstract class FooBaseDi2015NewLine{Di2015NewLine  private FooBase() {} // Not inheritable by anyone elseDi2015NewLine  public class Foo<U> : FooBase {...generic stuff ...}Di2015NewLineDi2015NewLine  ... nongeneric stuff ...Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Bar<T> where T: FooBase { ... }Di2015NewLine...Di2015NewLinenew Bar<FooBase.Foo<string>>()Di2015NewLine
150144Di2015UniqueSeparatorif(id_table.display == 'none') Di2015NewLine{Di2015NewLine  id_table.display = '';Di2015NewLine}Di2015NewLineelse Di2015NewLine{Di2015NewLine  id_table.display = 'none';Di2015NewLine}Di2015NewLine
150156Di2015UniqueSeparator<Association Name="Customer_Order" Member="Customer"Di2015NewLine  ThisKey="CustomerID" OtherKey="CustomerID"Di2015NewLine  Type="Customer" IsForeignKey="true" />Di2015NewLine
150196Di2015UniqueSeparator<configuration><system.web><customErrors mode="Off"/></system.web></configuration>Di2015NewLine
150288Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  DataGrid dg = new DataGrid();Di2015NewLineDi2015NewLine  dg.GridLines = GridLines.Both;Di2015NewLineDi2015NewLine  dg.Columns.Add(new ButtonColumn {Di2015NewLine    CommandName = "add",Di2015NewLine    HeaderText = "Event Details",Di2015NewLine    Text = "Details",Di2015NewLine    ButtonType = ButtonColumnType.PushButtonDi2015NewLine  });Di2015NewLineDi2015NewLine  dg.DataSource = getDataTable();Di2015NewLine  dg.DataBind();Di2015NewLineDi2015NewLine  dg.ItemCommand += new DataGridCommandEventHandler(dg_ItemCommand);Di2015NewLineDi2015NewLine  pnlMain.Controls.Add(dg);Di2015NewLine}Di2015NewLineDi2015NewLineprotected void dg_ItemCommand(object source, DataGridCommandEventArgs e)Di2015NewLine{Di2015NewLine  if (e.CommandName == "add")Di2015NewLine  {Di2015NewLine    throw new Exception("add it!");Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLineprotected DataTable getDataTable()Di2015NewLine{Di2015NewLine  // returns your data tableDi2015NewLine}Di2015NewLine
150334Di2015UniqueSeparator  if (!dailyCountList.Any())Di2015NewLine      return;Di2015NewLineDi2015NewLine  //make a dictionary to provide O(1) lookups for laterDi2015NewLineDi2015NewLine  Dictionary<DateTime, RegistrationCount> lookup = dailyCountList.ToDictionary(r => r.EventDateTime);Di2015NewLineDi2015NewLine  DateTime minDate = dailyCountList[0].EventDateTime;Di2015NewLine  DateTime maxDate = dailyCountList[dailyCountList.Count - 1].EventDateTime;Di2015NewLineDi2015NewLine  int DayCount = 1 + (int) (maxDate - minDate).TotalDays;Di2015NewLineDi2015NewLine  // I have the days now.Di2015NewLine  IEnumerable<DateTime> allDates = EnumerableDi2015NewLine    .Range(0, DayCount)Di2015NewLine    .Select(x => minDate.AddDays(x));Di2015NewLineDi2015NewLine  //project the days into RegistrationCounts, making up the missing ones.Di2015NewLine  List<RegistrationCount> result = allDatesDi2015NewLine      .Select(d => lookup.ContainsKey(d) ? lookup[d] :Di2015NewLine          new RegistrationCount(){EventDateTime = d, Count = 0})Di2015NewLine      .ToList();Di2015NewLine
150343Di2015UniqueSeparator        IEnumerable<List<string>> someList = ...;Di2015NewLine        IEnumerable<string> all = someList.SelectMany(x => x);Di2015NewLine
150343Di2015UniqueSeparatorstatic IEnumerable<TResult> SelectMany<TSource, TResult>(Di2015NewLine    this IEnumerable<TSource> source,Di2015NewLine    Func<TSource, IEnumerable<TResult>> selector) {Di2015NewLineDi2015NewLine    foreach(TSource item in source) {Di2015NewLine      foreach(TResult result in selector(item)) {Di2015NewLine        yield return result;Di2015NewLine      }Di2015NewLine    }Di2015NewLine}Di2015NewLine
150408Di2015UniqueSeparatorDBCC MemoryStatusDi2015NewLineDi2015NewLineSelect Columns... From TABLES.... Where....Di2015NewLineDi2015NewLinedbcc MemoryStatusDi2015NewLineDi2015NewLineSelect Columns... From tables.... Where....Di2015NewLineDi2015NewLinedbcc MemoryStatusDi2015NewLine
150460Di2015UniqueSeparator//did the error go to a .ASP page?  If so, append x (for .aspx) and Di2015NewLine//issue a 301 permanently movedDi2015NewLine//when we get an error, the querystring will be "404;<complete original URL>"Di2015NewLinestring targetPage = Request.RawUrl.Substring(Request.FilePath.Length);Di2015NewLineDi2015NewLineif((null == targetPage) || (targetPage.Length == 0))Di2015NewLine    targetPage = "[home page]";Di2015NewLineelseDi2015NewLine{Di2015NewLine     //find the original URLDi2015NewLine    if(targetPage[0] == '?')Di2015NewLine    {Di2015NewLine    \if(-1 != targetPage.IndexOf("?aspxerrorpath="))Di2015NewLine    \     targetPage = targetPage.Substring(15); // ?aspxerrorpath=Di2015NewLine    \elseDi2015NewLine    \     targetPage = targetPage.Substring(5); // ?404;Di2015NewLine    \}Di2015NewLine    \elseDi2015NewLine    \{Di2015NewLine    \     if(-1 != targetPage.IndexOf("errorpath="))Di2015NewLine    \\ targetPage = targetPage.Substring(14); // aspxerrorpath=Di2015NewLine    \     elseDi2015NewLine    \\targetPage = targetPage.Substring(4); // 404;Di2015NewLine    \}Di2015NewLine    }\\\\Di2015NewLineDi2015NewLine    string upperTarget = targetPage.ToUpper();Di2015NewLine    if((-1 == upperTarget.IndexOf(".ASPX")) && (-1 != upperTarget.IndexOf(".ASP")))Di2015NewLine    {Di2015NewLine    \//this is a request for an .ASP page - permanently redirect to .aspxDi2015NewLine    \targetPage = upperTarget.Replace(".ASP", ".ASPX");Di2015NewLine    \//issue 301 redirectDi2015NewLine    \Response.Status = "301 Moved Permanently"; Di2015NewLine    \Response.AddHeader("Location",targetPage);Di2015NewLine    \Response.End();Di2015NewLine    }Di2015NewLineDi2015NewLine    if(-1 != upperTarget.IndexOf("ORDER"))Di2015NewLine    {Di2015NewLine                //going to old order page -- forward to new pageDi2015NewLine               Response.Redirect(WebRoot + "/order.aspx");Di2015NewLine           Response.End();Di2015NewLine    }Di2015NewLine
150480Di2015UniqueSeparatorpublic interface ITcpClientDi2015NewLine{Di2015NewLine   Stream GetStream(); Di2015NewLine   // Anything you need here       Di2015NewLine}Di2015NewLinepublic TcpClientAdapter: ITcpClientDi2015NewLine{Di2015NewLine   private TcpClient wrappedClient;Di2015NewLine   public TcpClientAdapter(TcpClient client)Di2015NewLine   {Di2015NewLine    wrappedClient = client;Di2015NewLine   }Di2015NewLineDi2015NewLine   public Stream GetStream()Di2015NewLine   {Di2015NewLine     return wrappedClient.GetStream();Di2015NewLine   }Di2015NewLine}Di2015NewLine
150596Di2015UniqueSeparator// http://support.microsoft.com/kb/186550Di2015NewLineconst int ERROR_FILE_NOT_FOUND = 2;Di2015NewLineconst int ERROR_ACCESS_DENIED = 5;Di2015NewLineconst int ERROR_NO_APP_ASSOCIATED = 1155; Di2015NewLineDi2015NewLinevoid OpenFile(string filePath)Di2015NewLine{Di2015NewLine    Process process = new Process();Di2015NewLineDi2015NewLine    tryDi2015NewLine    {Di2015NewLine        // Calls native application registered for the file typeDi2015NewLine        // This may throw native exceptionDi2015NewLine    \process.StartInfo.FileName = filePath;Di2015NewLine    \process.StartInfo.Verb = "Open";Di2015NewLine    \process.StartInfo.CreateNoWindow = true;Di2015NewLine    \process.Start();Di2015NewLine    }Di2015NewLine    catch (Win32Exception e)Di2015NewLine    {Di2015NewLine    \if (e.NativeErrorCode == ERROR_FILE_NOT_FOUND || Di2015NewLine    \\e.NativeErrorCode == ERROR_ACCESS_DENIED ||Di2015NewLine    \\e.NativeErrorCode == ERROR_NO_APP_ASSOCIATED)Di2015NewLine    \{Di2015NewLine    \\MessageBox.Show(this, e.Message, "Error", Di2015NewLine    \\\\MessageBoxButtons.OK, Di2015NewLine    \\\\MessageBoxIcon.Exclamation);Di2015NewLine    \}Di2015NewLine    }Di2015NewLine}Di2015NewLine
150974Di2015UniqueSeparatorstatic int FreeTcpPort()Di2015NewLine{Di2015NewLine  TcpListener l = new TcpListener(IPAddress.Loopback, 0);Di2015NewLine  l.Start();Di2015NewLine  int port = ((IPEndPoint)l.LocalEndpoint).Port;Di2015NewLine  l.Stop();Di2015NewLine  return port;Di2015NewLine}Di2015NewLine
151244Di2015UniqueSeparatorthis
151244Di2015UniqueSeparatorpublic class MyClass : IDisposableDi2015NewLine{Di2015NewLine    private bool disposed = false;Di2015NewLineDi2015NewLine    protected virtual void Dispose(bool disposing)Di2015NewLine    {Di2015NewLine        if (!disposed)Di2015NewLine        {Di2015NewLine            if (disposing)Di2015NewLine            {Di2015NewLine                // called via myClass.Dispose(). Di2015NewLine                // OK to use any private object referencesDi2015NewLine            }Di2015NewLineDi2015NewLine            disposed = true;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Dispose() // Implement IDisposableDi2015NewLine    {Di2015NewLine        Dispose(true);Di2015NewLine        GC.SuppressFinalize(this);Di2015NewLine    }Di2015NewLineDi2015NewLine    ~MyClass() // the finalizerDi2015NewLine    {Di2015NewLine        Dispose(false);Di2015NewLine    }Di2015NewLine}Di2015NewLine
151244Di2015UniqueSeparator    public void Dispose() // Implement IDisposableDi2015NewLine    {Di2015NewLine        Dispose(true);Di2015NewLine    #if DEBUGDi2015NewLine        GC.SuppressFinalize(this);Di2015NewLine    #endifDi2015NewLine    }Di2015NewLineDi2015NewLine    #if DEBUGDi2015NewLine    ~MyClass() // the finalizerDi2015NewLine    {Di2015NewLine        Dispose(false);Di2015NewLine    }Di2015NewLine    #endifDi2015NewLine
151560Di2015UniqueSeparator// File1.csDi2015NewLineusing System;Di2015NewLinenamespace Outer.InnerDi2015NewLine{Di2015NewLine    class FooDi2015NewLine    {Di2015NewLine        static void Bar()Di2015NewLine        {Di2015NewLine            double d = Math.PI;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
151560Di2015UniqueSeparator// File2.csDi2015NewLinenamespace OuterDi2015NewLine{Di2015NewLine    class MathDi2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
151560Di2015UniqueSeparatorOuter
151560Di2015UniqueSeparatorusing
151560Di2015UniqueSeparatorOuter.Math
151560Di2015UniqueSeparatorSystem.Math
151560Di2015UniqueSeparatorOuter.Math
151560Di2015UniqueSeparatorPI
151560Di2015UniqueSeparatorusing
151560Di2015UniqueSeparator// File1b.csDi2015NewLinenamespace Outer.InnerDi2015NewLine{Di2015NewLine    using System;Di2015NewLine    class FooDi2015NewLine    {Di2015NewLine        static void Bar()Di2015NewLine        {Di2015NewLine            double d = Math.PI;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
151560Di2015UniqueSeparatorSystem
151560Di2015UniqueSeparatorOuter
151560Di2015UniqueSeparatorSystem.Math
151560Di2015UniqueSeparatorMath
151560Di2015UniqueSeparatorSystem
151560Di2015UniqueSeparatorFoo
151560Di2015UniqueSeparatorOuter
151560Di2015UniqueSeparatorOuter.Inner
151560Di2015UniqueSeparatorOuter.Math
151560Di2015UniqueSeparatorusing
151560Di2015UniqueSeparatorusing
151950Di2015UniqueSeparatorprivate static readonly string[] EmptyStringArray = new string[0];Di2015NewLineDi2015NewLinestring[] GetTheStuff() {Di2015NewLine    if( somePredicate() ) {Di2015NewLine        List<string> s = new List<string>(); Di2015NewLine        // imagine we load some data or somethingDi2015NewLine        return s.ToArray();Di2015NewLine    } else {Di2015NewLine        return EmptyStringArray;Di2015NewLine    }Di2015NewLine}Di2015NewLine
151950Di2015UniqueSeparatorpublic static class Arrays<T> {Di2015NewLine    public static readonly Empty = new T[0];Di2015NewLine}Di2015NewLine
152059Di2015UniqueSeparatorThe class also can be used to get similarity level between two image of the same size, which can be useful to get information about how different/similar are images: Di2015NewLine// create template matching algorithm's instanceDi2015NewLine// use zero similarity to make sure algorithm will provide anythingDi2015NewLineExhaustiveTemplateMatching tm = new ExhaustiveTemplateMatching( 0 );Di2015NewLine// compare two imagesDi2015NewLineTemplateMatch[] matchings = tm.ProcessImage( image1, image2 );Di2015NewLine// check similarity levelDi2015NewLineif ( matchings[0].Similarity > 0.95 )Di2015NewLine{Di2015NewLine    // do something with quite similar imagesDi2015NewLine}Di2015NewLine
152297Di2015UniqueSeparator//this will allow you to import the necessary functions from the .dllDi2015NewLineusing System.Runtime.InteropServices;Di2015NewLineDi2015NewLine//this imports the function used to extend the transparent window border.Di2015NewLine[DllImport("dwmapi.dll")]Di2015NewLinestatic extern void DwmExtendFrameIntoClientArea(IntPtr hWnd, ref Margins pMargins);Di2015NewLineDi2015NewLine//this is used to specify the boundaries of the transparent areaDi2015NewLineinternal struct Margins {Di2015NewLine    public int Left, Right, Top, Bottom;Di2015NewLine}Di2015NewLineprivate Margins marg;Di2015NewLineDi2015NewLine//Do this every time the form is resized. It causes the window to be made transparent.Di2015NewLinemarg.Left = 0;Di2015NewLinemarg.Top = 0;Di2015NewLinemarg.Right = this.Width;Di2015NewLinemarg.Bottom = this.Height;Di2015NewLineDwmExtendFrameIntoClientArea(this.Handle, ref marg);Di2015NewLineDi2015NewLine//This initializes the DirectX device. It needs to be done once.Di2015NewLine//The alpha channel in the backbuffer is critical.Di2015NewLinePresentParameters presentParameters = new PresentParameters();Di2015NewLinepresentParameters.Windowed = true;Di2015NewLinepresentParameters.SwapEffect = SwapEffect.Discard;Di2015NewLinepresentParameters.BackBufferFormat = Format.A8R8G8B8;Di2015NewLineDi2015NewLineDevice device = new Device(0, DeviceType.Hardware, this.Handle,Di2015NewLineCreateFlags.HardwareVertexProcessing, presentParameters);Di2015NewLineDi2015NewLine//the OnPaint functions maked the background transparent by drawing black on it.Di2015NewLine//For whatever reason this results in transparency.Di2015NewLineprotected override void OnPaint(PaintEventArgs e) {Di2015NewLine    Graphics g = e.Graphics;Di2015NewLineDi2015NewLine    // black brush for Alpha transparencyDi2015NewLine    SolidBrush blackBrush = new SolidBrush(Color.Black);Di2015NewLine    g.FillRectangle(blackBrush, 0, 0, Width, Height);Di2015NewLine    blackBrush.Dispose();Di2015NewLineDi2015NewLine    //call your DirectX rendering function hereDi2015NewLine}Di2015NewLineDi2015NewLine//this is the dx rendering function. The Argb clearing function is important,Di2015NewLine//as it makes the directx background transparent.Di2015NewLineprotected void dxrendering() {Di2015NewLine    device.Clear(ClearFlags.Target, Color.FromArgb(0, 0, 0, 0), 1.0f, 0);Di2015NewLineDi2015NewLine    device.BeginScene();Di2015NewLine    //draw stuff here.Di2015NewLine    device.EndScene();Di2015NewLine    device.Present();Di2015NewLine}Di2015NewLine
152626Di2015UniqueSeparatorpublic class ThingDi2015NewLine{Di2015NewLine\public int theInt;Di2015NewLine\public char theChar;Di2015NewLine\public DateTime theDateTime;Di2015NewLineDi2015NewLine\public Thing(int theInt, char theChar, DateTime theDateTime)Di2015NewLine\{Di2015NewLine\\this.theInt = theInt;Di2015NewLine\\this.theChar = theChar;Di2015NewLine\\this.theDateTime = theDateTime;Di2015NewLine\}Di2015NewLineDi2015NewLine\public string Dump()Di2015NewLine\{Di2015NewLine\\return string.Format("I: {0}, S: {1}, D: {2}", Di2015NewLine\\\theInt, theChar, theDateTime);Di2015NewLine\}Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ThingCollection: List<Thing>Di2015NewLine{Di2015NewLine\public delegate Thing AggregateFunction(Thing Best, Di2015NewLine\\\\\\Thing Candidate);Di2015NewLineDi2015NewLine\public Thing Aggregate(Thing Seed, AggregateFunction Func)Di2015NewLine\{Di2015NewLine\\Thing res = Seed;Di2015NewLine\\foreach (Thing t in this) Di2015NewLine\\{Di2015NewLine\\\res = Func(res, t);Di2015NewLine\\}Di2015NewLine\\return res;Di2015NewLine\}Di2015NewLine}Di2015NewLineDi2015NewLineclass MainClassDi2015NewLine{Di2015NewLine\public static void Main(string[] args)Di2015NewLine\{Di2015NewLine\\Thing a = new Thing(1,'z',DateTime.Now);Di2015NewLine\\Thing b = new Thing(2,'y',DateTime.Now.AddDays(1));Di2015NewLine\\Thing c = new Thing(3,'x',DateTime.Now.AddDays(-1));Di2015NewLine\\Thing d = new Thing(4,'w',DateTime.Now.AddDays(2));Di2015NewLine\\Thing e = new Thing(5,'v',DateTime.Now.AddDays(-2));Di2015NewLineDi2015NewLine\\ThingCollection tc = new ThingCollection();Di2015NewLineDi2015NewLine\\tc.AddRange(new Thing[]{a,b,c,d,e});Di2015NewLineDi2015NewLine\\Thing result;Di2015NewLineDi2015NewLine\\//Max by dateDi2015NewLine\\result = tc.Aggregate(tc[0], Di2015NewLine\\\delegate (Thing Best, Thing Candidate) Di2015NewLine\\\{ Di2015NewLine\\\\return (Candidate.theDateTime.CompareTo(Di2015NewLine\\\\\Best.theDateTime) > 0) ? Di2015NewLine\\\\\Candidate : Di2015NewLine\\\\\Best;  Di2015NewLine\\\}Di2015NewLine\\);Di2015NewLine\\Console.WriteLine("Max by date: {0}", result.Dump());Di2015NewLineDi2015NewLine\\//Min by charDi2015NewLine\\result = tc.Aggregate(tc[0], Di2015NewLine\\\delegate (Thing Best, Thing Candidate) Di2015NewLine\\\{ Di2015NewLine\\\\return (Candidate.theChar < Best.theChar) ? Di2015NewLine\\\\\Candidate : Di2015NewLine\\\\\Best; Di2015NewLine\\\}Di2015NewLine\\);Di2015NewLine\\Console.WriteLine("Min by char: {0}", result.Dump());\\\\Di2015NewLine\}Di2015NewLine}Di2015NewLine
152626Di2015UniqueSeparatorMax by date: I: 4, S: w, D: 10/3/2008 12:44:07 AM
152626Di2015UniqueSeparatorMin by char: I: 5, S: v, D: 9/29/2008 12:44:07 AM
153014Di2015UniqueSeparatorstatic class ProgramDi2015NewLine{Di2015NewLine    //using extension method:Di2015NewLine    static DateTime Trim(this DateTime date, long roundTicks)Di2015NewLine    {Di2015NewLine        return new DateTime(date.Ticks - date.Ticks % roundTicks);Di2015NewLine    }Di2015NewLineDi2015NewLine    //sample usage:Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        Console.WriteLine(DateTime.Now);Di2015NewLine        Console.WriteLine(DateTime.Now.Trim(TimeSpan.TicksPerDay));Di2015NewLine        Console.WriteLine(DateTime.Now.Trim(TimeSpan.TicksPerHour));Di2015NewLine        Console.WriteLine(DateTime.Now.Trim(TimeSpan.TicksPerMillisecond));Di2015NewLine        Console.WriteLine(DateTime.Now.Trim(TimeSpan.TicksPerMinute));Di2015NewLine        Console.WriteLine(DateTime.Now.Trim(TimeSpan.TicksPerSecond));Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
153146Di2015UniqueSeparatorconst string FILE = @"C:\\test.txt";Di2015NewLineDi2015NewLinevar fs = File.GetAccessControl(FILE);Di2015NewLineDi2015NewLinevar sid = fs.GetOwner(typeof(SecurityIdentifier));Di2015NewLineConsole.WriteLine(sid); // SIDDi2015NewLineDi2015NewLinevar ntAccount = sid.Translate(typeof(NTAccount));Di2015NewLineConsole.WriteLine(ntAccount); // DOMAIN\\usernameDi2015NewLine
153146Di2015UniqueSeparatorvar ntAccount = new NTAccount("DOMAIN", "username");Di2015NewLinefs.SetOWner(ntAccount);Di2015NewLineDi2015NewLinetry {Di2015NewLine   File.SetAccessControl(FILE, fs);Di2015NewLine} catch (InvalidOperationException ex) {Di2015NewLine   Console.WriteLine("You cannot assign ownership to that user." +Di2015NewLine    "Either you don't have TakeOwnership permissions, or it is not your user account."Di2015NewLine   );Di2015NewLine   throw;Di2015NewLine}Di2015NewLine
153277Di2015UniqueSeparatorMemoryStream
153310Di2015UniqueSeparatorbyte b = (byte) 0x10;Di2015NewLine
153672Di2015UniqueSeparatorprivate Tracing trace = new Tracing("My.Namespace.Class");Di2015NewLine
153672Di2015UniqueSeparatorMyClass()Di2015NewLine{Di2015NewLine    trace.Verbose("Entered MyClass");Di2015NewLine    int x = 12;Di2015NewLine    trace.Information("X is: {0}", x);Di2015NewLine    trace.Verbose("Leaving MyClass");Di2015NewLine}Di2015NewLine
153672Di2015UniqueSeparator<system.diagnostics>Di2015NewLine    <trace autoflush="false" indentsize="4">Di2015NewLine    \<listeners>Di2015NewLine    \\<add name="myListener" type="System.Diagnostics.TextWriterTraceListener" initializeData="c:\\mylogfile.log" />Di2015NewLine    \</listeners>Di2015NewLine    </trace>Di2015NewLine    <switches>Di2015NewLine    \<add name="My.Namespace.Class" value="4"/>\\Di2015NewLine    </switches>Di2015NewLine</system.diagnostics>Di2015NewLine
153713Di2015UniqueSeparator<FlowDocumentScrollViewer VerticalScrollBarVisibility="Auto">Di2015NewLine    <FlowDocument>Di2015NewLine        <Paragraph>Di2015NewLine            <!-- ... -->Di2015NewLine
153780Di2015UniqueSeparatora = (v2.v2 v1.(x2-x1) - v1.v2 v2.(x2-x1)) / ((v1.v1)(v2.v2) - (v1.v2)^2)Di2015NewLineb = (v1.v2 v1.(x2-x1) - v1.v1 v2.(x2-x1)) / ((v1.v1)(v2.v2) - (v1.v2)^2)Di2015NewLine
153780Di2015UniqueSeparatorx1 + a * v1Di2015NewLine
153780Di2015UniqueSeparatorx1 + a*v1 = x2 + b*v2Di2015NewLine
153780Di2015UniqueSeparatorv1
153780Di2015UniqueSeparatorv2
153780Di2015UniqueSeparatorv1.v1*a - v2.v1*b = v1.(x2-x1)Di2015NewLinev1.v2*a - v2.v2*b = v2.(x2-x1)Di2015NewLine
153873Di2015UniqueSeparator<asp:ScriptManager ID="scriptManager1" Di2015NewLine    runat="server" EnablePageMethods="true" />Di2015NewLine
153873Di2015UniqueSeparatorPage.ClientScript.RegisterStartupScript(Di2015NewLine    this.GetType(), Di2015NewLine    "callDoSome",Di2015NewLine    "PageMethods.DoSome(Callback_Function, null)", Di2015NewLine    true);Di2015NewLine
153873Di2015UniqueSeparator<script language="javascript" type="text/javascript">Di2015NewLine    function Callback_Function(result, context) {Di2015NewLine        alert('WebMethod was called');Di2015NewLine    }Di2015NewLine</script>Di2015NewLine
153873Di2015UniqueSeparatorpublic void ServerAction(ToolbarItemInfo info) {Di2015NewLine    string jsfunction = "alert('Hello');";Di2015NewLine    Map mapctrl = (Map)info.BuddyControls[0];Di2015NewLine    CallbackResult cr = new CallbackResult(null, null, "javascript", jsfunction);Di2015NewLine    mapctrl.CallbackResults.Add(cr);Di2015NewLine}Di2015NewLine
154189Di2015UniqueSeparatorpressedButtonStoryboard.Begin(_xamlButton);Di2015NewLine
154189Di2015UniqueSeparatorpressedButtonStoryboard.Begin(_xamlButton, _xamlButton.Template);Di2015NewLine
154263Di2015UniqueSeparatorstring[] names = Enum.GetNames (typeof(MyEnum));Di2015NewLine
154461Di2015UniqueSeparatordTable
154461Di2015UniqueSeparatoradapter
154461Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    private DataTable dTable;Di2015NewLine    private OleDbDataAdapter adapter;Di2015NewLineDi2015NewLine    Public Form1()Di2015NewLine    {Di2015NewLine         ... your setup here ...Di2015NewLine         dTable = new DataTable();Di2015NewLine         ... etc ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
154496Di2015UniqueSeparatorHtmlElement head = webBrowser1.Document.GetElementsByTagName("head")[0];Di2015NewLineHtmlElement scriptEl = webBrowser1.Document.CreateElement("script");Di2015NewLineIHTMLScriptElement element = (IHTMLScriptElement)scriptEl.DomElement;Di2015NewLineelement.text = "function sayHello() { alert('hello') }";Di2015NewLinehead.AppendChild(scriptEl);Di2015NewLinewebBrowser1.Document.InvokeScript("sayHello");Di2015NewLine
154524Di2015UniqueSeparatorEncoding x = Encoding[28591]; // Equivalent to Encoding.GetEncoding(28591)Di2015NewLineEncoding y = Encoding["Foo"]; // Equivalent to Encoding.GetEncoding("Foo")Di2015NewLine
154687Di2015UniqueSeparatorbyte[] plaintextBytes = GetDataToProtect();Di2015NewLinebyte[] encodedBytes = ProtectedData.Protect(plaintextBytes, null, DataProtectionScope.CurrentUser);Di2015NewLine
154687Di2015UniqueSeparatorbyte[] encodedBytes = GetDataToUnprotect();Di2015NewLinebyte[] plaintextBytes[] = ProtectedData.Unprotect(encodedBytes, null, DataProtectionScope.CurrentUser);Di2015NewLine
154699Di2015UniqueSeparatorsealed
154699Di2015UniqueSeparatorfinal
154792Di2015UniqueSeparatorApplication.SetUnhandledExceptionMode(UnhandledExceptionMode.Automatic);Di2015NewLineApplication.ThreadException += ShowUnhandledException;Di2015NewLineApplication.Run(...);Di2015NewLine
154792Di2015UniqueSeparatorstatic void ShowUnhandledException(object sender, ThreadExceptionEventArgs t)Di2015NewLine{Di2015NewLine\Exception ex = t.Exception;Di2015NewLine\try {Di2015NewLine\\// Build a message to show to the userDi2015NewLine\\bool first = true;Di2015NewLine\\string msg = string.Empty;Di2015NewLine\\for (int i = 0; i < 3 && ex != null; i++) {Di2015NewLine\\\msg += string.Format("{0} {1}:\\n\\n{2}\\n\\n{3}", Di2015NewLine\\\\first ? "Unhandled " : "Inner exception ",Di2015NewLine\\\\ex.GetType().Name,Di2015NewLine\\\\ex.Message, Di2015NewLine\\\\i < 2 ? ex.StackTrace : "");Di2015NewLine\\\ex = ex.InnerException;Di2015NewLine\\\first = false;Di2015NewLine\\}Di2015NewLine\\msg += "\\n\\nAttempt to continue? (click No to exit now)";Di2015NewLineDi2015NewLine\\// Show the messageDi2015NewLine\\if (MessageBox.Show(msg, "Unhandled exception", MessageBoxButtons.YesNo, MessageBoxIcon.Error) == DialogResult.No)Di2015NewLine\\\Application.Exit();Di2015NewLine\} catch (Exception e2) {Di2015NewLine\\try {Di2015NewLine\\\MessageBox.Show(e2.Message, "Fatal error", MessageBoxButtons.OK, MessageBoxIcon.Stop);Di2015NewLine\\} finally {Di2015NewLine\\\Application.Exit();Di2015NewLine\\}Di2015NewLine\}Di2015NewLine}Di2015NewLine
154803Di2015UniqueSeparatorcounter
154803Di2015UniqueSeparatorpublic volatile
154803Di2015UniqueSeparatorvolatile
154803Di2015UniqueSeparatorvolatile
154803Di2015UniqueSeparatorvolatile
154803Di2015UniqueSeparatorlock(this.locker) this.counter++;Di2015NewLine
154803Di2015UniqueSeparatorlock
154803Di2015UniqueSeparatorthis.counter
154803Di2015UniqueSeparatorlocker
154803Di2015UniqueSeparatorlocker
154803Di2015UniqueSeparatorInterlocked.Increment(ref this.counter);Di2015NewLine
154803Di2015UniqueSeparatorvolatile
154803Di2015UniqueSeparatorqueueLength
154803Di2015UniqueSeparatorqueueLength
155048Di2015UniqueSeparatorint startMem = GC.GetTotalMemory(true);Di2015NewLineYourClass c = new YourClass();Di2015NewLineint endMem = GC.GetTotalMemory(true);Di2015NewLineint usedMeme = endMem - startMem;Di2015NewLine
155082Di2015UniqueSeparatorcmd.CommandText = "insert_test_result";Di2015NewLinecmd.CommandType = CommandType.StoredProcedure;Di2015NewLine
155082Di2015UniqueSeparator    foreach (IDataParameter param in command.Parameters)Di2015NewLine    {Di2015NewLine        if (param.Value == null) param.Value = DBNull.Value;Di2015NewLine    }Di2015NewLine
155149Di2015UniqueSeparator<configuration>Di2015NewLine    <system.web>Di2015NewLine      <compilation>Di2015NewLine         <codeSubDirectories>Di2015NewLine           <add directoryName="View"/>Di2015NewLine         </codeSubDirectories>Di2015NewLine      </compilation>Di2015NewLine   </system.web>Di2015NewLine</configuration>Di2015NewLine
155296Di2015UniqueSeparatorArrayList foos = new Arraylist();Di2015NewLinefoos.Add("Test");Di2015NewLine
155296Di2015UniqueSeparatorfoos.Add("Test" as System.Object);Di2015NewLinestring s = foos[1] as String.Di2015NewLine
155296Di2015UniqueSeparatorArrayList listOfStrings = new ArrayList();Di2015NewLinelistOfStrings.Add(1);Di2015NewLinelistOfStrings.Add("Test");Di2015NewLine
155296Di2015UniqueSeparatorList<int> listOfIntegers = new List<int>();Di2015NewLineList<String> listOfStrings = new List<String>();Di2015NewLineDi2015NewLinelistOfIntegers.add(1);Di2015NewLineDi2015NewLine// Compile time error.Di2015NewLinelistOfIntegers.add("test");Di2015NewLine
155296Di2015UniqueSeparatorpublic class Adder<T>Di2015NewLine{Di2015NewLine   public T AddTwoThings(T t1, T t2)Di2015NewLine   {Di2015NewLine       return t1 + t2;Di2015NewLine   }Di2015NewLine}Di2015NewLineDi2015NewLineAdder<String> stringAdder = new Adder<String>();Di2015NewLineConsole.Writeline(stringAdder.AddTwoThings("Test,"123"));Di2015NewLineDi2015NewLineAdder<int> intAdder = new Adder<int>();Di2015NewLineConsole.Writeline(intAdder.AddTwoThings(2,2));Di2015NewLine
155297Di2015UniqueSeparator/// <summary>Di2015NewLine/// Utilities for reading big-endian filesDi2015NewLine/// </summary>Di2015NewLinepublic class BigEndianReaderDi2015NewLine{Di2015NewLine    public BigEndianReader(BinaryReader baseReader)Di2015NewLine    {Di2015NewLine        mBaseReader = baseReader;Di2015NewLine    }Di2015NewLineDi2015NewLine    public short ReadInt16()Di2015NewLine    {Di2015NewLine        return BitConverter.ToInt16(ReadBigEndianBytes(2), 0);Di2015NewLine    }Di2015NewLineDi2015NewLine    public ushort ReadUInt16()Di2015NewLine    {Di2015NewLine        return BitConverter.ToUInt16(ReadBigEndianBytes(2), 0);Di2015NewLine    }Di2015NewLineDi2015NewLine    public uint ReadUInt32()Di2015NewLine    {Di2015NewLine        return BitConverter.ToUInt32(ReadBigEndianBytes(4), 0);Di2015NewLine    }Di2015NewLineDi2015NewLine    public byte[] ReadBigEndianBytes(int count)Di2015NewLine    {Di2015NewLine        byte[] bytes = new byte[count];Di2015NewLine        for (int i = count - 1; i >= 0; i--)Di2015NewLine            bytes[i] = mBaseReader.ReadByte();Di2015NewLineDi2015NewLine        return bytes;Di2015NewLine    }Di2015NewLineDi2015NewLine    public byte[] ReadBytes(int count)Di2015NewLine    {Di2015NewLine        return mBaseReader.ReadBytes(count);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Close()Di2015NewLine    {Di2015NewLine        mBaseReader.Close();Di2015NewLine    }Di2015NewLineDi2015NewLine    public Stream BaseStreamDi2015NewLine    {Di2015NewLine        get { return mBaseReader.BaseStream;  }Di2015NewLine    }Di2015NewLineDi2015NewLine    private BinaryReader mBaseReader;Di2015NewLine}Di2015NewLine
155467Di2015UniqueSeparatorpublic static bool operator ==(Region r1, Region r2)Di2015NewLine{Di2015NewLine    if (object.ReferenceEquals( r1, r2)) {Di2015NewLine        // handles if both are null as well as object identityDi2015NewLine        return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    if ((object)r1 == null || (object)r2 == null)Di2015NewLine    {Di2015NewLine       return false;Di2015NewLine    }        Di2015NewLineDi2015NewLine    return (r1.Cmr.CompareTo(r2.Cmr) == 0 && r1.Id == r2.Id);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static bool operator !=(Region r1, Region r2)Di2015NewLine{Di2015NewLine    return !(r1 == r2);Di2015NewLine}Di2015NewLine
155597Di2015UniqueSeparator    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            var f_oType = Type.GetTypeFromProgID("Project1.Class1");Di2015NewLine            var f_oInstance = Activator.CreateInstance(f_oType);Di2015NewLine            f_oType.InvokeMember("Test3", BindingFlags.InvokeMethod, null, f_oInstance, new object[] {});Di2015NewLine        }Di2015NewLine        catch(TargetInvocationException ex)Di2015NewLine        {Di2015NewLine            //no need to subtract -2147221504 if non custom error etcDi2015NewLine            int errorNumber = ((COMException)ex.InnerException).ErrorCode - (-2147221504);Di2015NewLine            MessageBox.Show(errorNumber.ToString() + ": " + ex.InnerException.Message);Di2015NewLine        }Di2015NewLine        catch(Exception ex)Di2015NewLine        { MessageBox.Show(ex.Message); }Di2015NewLine    }Di2015NewLine
155619Di2015UniqueSeparatorMain
155619Di2015UniqueSeparatorMain
155619Di2015UniqueSeparatorint
155619Di2015UniqueSeparatorEnvironment.Exit(code)
155787Di2015UniqueSeparatorpublic static void ReplaceOrAdd(this XElement source, XElement node)Di2015NewLine { var q = from x in source.Elements()Di2015NewLine           where    x.Name == node.NameDi2015NewLine                 && x.Attributes().AllDi2015NewLine                                  (a =>node.Attributes().AnyDi2015NewLine                                  (b =>a.Name==b.Name && a.Value==b.Value))Di2015NewLine           select x;Di2015NewLineDi2015NewLine   var n = q.LastOrDefault();Di2015NewLineDi2015NewLine   if (n == null) source.Add(node);Di2015NewLine   else n.ReplaceWith(node);                                              Di2015NewLine }Di2015NewLineDi2015NewLinevar root   =XElement.Parse(data);Di2015NewLinevar newElem=XElement.Parse("<thing2 a1=\\"a\\" a2=\\"b\\">new value</thing2>");Di2015NewLineDi2015NewLineroot.ReplaceOrAdd(newElem);Di2015NewLine
155851Di2015UniqueSeparatorif (!File.Exists(DB_FILENAME))Di2015NewLine{Di2015NewLine    var cnnStr = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DB_FILENAME;Di2015NewLineDi2015NewLine    // Use a late bound COM object to create a new catalog. This is so we avoid an interop assembly. Di2015NewLine    var catType = Type.GetTypeFromProgID("ADOX.Catalog");Di2015NewLine    object o = Activator.CreateInstance(catType);Di2015NewLine    catType.InvokeMember("Create", BindingFlags.InvokeMethod, null, o, new object[] {cnnStr});Di2015NewLineDi2015NewLine    OleDbConnection cnn = new OleDbConnection(cnnStr);Di2015NewLine    cnn.Open();Di2015NewLine    var cmd = cnn.CreateCommand();Di2015NewLine    cmd.CommandText = "CREATE TABLE VideoPosition (filename TEXT , pos LONG)";Di2015NewLine    cmd.ExecuteNonQuery();Di2015NewLineDi2015NewLine}Di2015NewLine
155895Di2015UniqueSeparator{controller}/{action}/{firstItem}
155895Di2015UniqueSeparator{controller}/{action}/{id}
155895Di2015UniqueSeparatorglobal.asax.cs
155895Di2015UniqueSeparatorid
155895Di2015UniqueSeparatorroutes.MapRoute(Di2015NewLine    "Inventory",Di2015NewLine    "Inventory/{action}/{firstItem}",Di2015NewLine    new { controller = "Inventory", action = "ListAll", firstItem = "" }Di2015NewLine);Di2015NewLine
155961Di2015UniqueSeparatorusing (OleDBConnection conn = new OleDBConnection(connstr))Di2015NewLine{Di2015NewLine    while (IHaveData)Di2015NewLine    {Di2015NewLine        using (OldDBCommand cmd = new OldDBCommand())Di2015NewLine        {Di2015NewLine            cmd.Connection = conn;Di2015NewLine            cmd.ExecuteScalar();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
156024Di2015UniqueSeparator(cmd.exe)Di2015NewLineC:Di2015NewLinemkdir \\TEMP\\CrossPlatformTestDi2015NewLinecd \\TEMP\\CrossPlatformTestDi2015NewLine
156024Di2015UniqueSeparator// file 'library.cs' in C:\\TEMP\\CrossPlatformTestDi2015NewLinenamespace Cross.Platform.LibraryDi2015NewLine{Di2015NewLine\public static class WorkerDi2015NewLine\{Di2015NewLine\\public static void Run()Di2015NewLine\\{Di2015NewLine\\\System.Console.WriteLine("Worker is running");Di2015NewLine\\\System.Console.WriteLine("(Enter to continue)");Di2015NewLine\\\System.Console.ReadLine();Di2015NewLine\\}Di2015NewLine\}Di2015NewLine}Di2015NewLine
156024Di2015UniqueSeparator(cmd.exe from Note 2)Di2015NewLinemkdir platform\\x86Di2015NewLinecsc /out:platform\\x86\\library.dll /target:library /platform:x86 library.csDi2015NewLinemkdir platform\\amd64Di2015NewLinecsc /out:platform\\amd64\\library.dll /target:library /platform:x64 library.csDi2015NewLine
156024Di2015UniqueSeparator// file 'bootstrapper.cs' in C:\\TEMP\\CrossPlatformTestDi2015NewLinenamespace Cross.Platform.ProgramDi2015NewLine{Di2015NewLine\public static class BootstrapperDi2015NewLine\{Di2015NewLine\\public static void Main()Di2015NewLine\\{Di2015NewLine\\\System.AppDomain.CurrentDomain.AssemblyResolve += CustomResolve;Di2015NewLine\\\App.Run();Di2015NewLine\\}Di2015NewLineDi2015NewLine\\private static System.Reflection.Assembly CustomResolve(Di2015NewLine\\\object sender,Di2015NewLine\\\System.ResolveEventArgs args)Di2015NewLine\\{Di2015NewLine\\\if (args.Name.StartsWith("library"))Di2015NewLine\\\{Di2015NewLine\\\\string fileName = System.IO.Path.GetFullPath(Di2015NewLine\\\\\"platform\\\\"Di2015NewLine\\\\\+ System.Environment.GetEnvironmentVariable("PROCESSOR_ARCHITECTURE")Di2015NewLine\\\\\+ "\\\\library.dll");Di2015NewLine\\\\System.Console.WriteLine(fileName);Di2015NewLine\\\\if (System.IO.File.Exists(fileName))Di2015NewLine\\\\{Di2015NewLine\\\\\return System.Reflection.Assembly.LoadFile(fileName);Di2015NewLine\\\\}Di2015NewLine\\\}Di2015NewLine\\\return null;Di2015NewLine\\}Di2015NewLine\}Di2015NewLine}Di2015NewLine
156024Di2015UniqueSeparator// file 'program.cs' in C:\\TEMP\\CrossPlatformTestDi2015NewLinenamespace Cross.Platform.ProgramDi2015NewLine{Di2015NewLine\public static class AppDi2015NewLine\{Di2015NewLine\\public static void Run()Di2015NewLine\\{Di2015NewLine\\\Cross.Platform.Library.Worker.Run();Di2015NewLine\\}Di2015NewLine\}Di2015NewLine}Di2015NewLine
156024Di2015UniqueSeparator(cmd.exe from Note 2)Di2015NewLinecsc /reference:platform\\x86\\library.dll /out:program.exe program.cs bootstrapper.csDi2015NewLine
156024Di2015UniqueSeparator(C:\\TEMP\\CrossPlatformTest, root dir)Di2015NewLine    platform (dir)Di2015NewLine        amd64 (dir)Di2015NewLine            library.dllDi2015NewLine        x86 (dir)Di2015NewLine            library.dllDi2015NewLine    program.exeDi2015NewLine    *.cs (source files)Di2015NewLine
156118Di2015UniqueSeparator public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            Bitmap bmp = WindowsFormsApplication10.Properties.Resources.glider;Di2015NewLine            this.Icon = Icon.FromHandle(bmp.GetHicon());Di2015NewLine        }Di2015NewLine
156184Di2015UniqueSeparatorctx.Refresh(RefreshMode.KeepCurrentValues, entities);Di2015NewLine
156365Di2015UniqueSeparatorstatic Expression<Func<T, bool>> BuildWhere<T>(int deviceId) {Di2015NewLine    var id = Expression.Constant(deviceId, typeof(int));Di2015NewLine    var arg = Expression.Parameter(typeof(T), "x");Di2015NewLine    var prop = Expression.Property(arg, "DeviceId");Di2015NewLine    return Expression.Lambda<Func<T, bool>>(Di2015NewLine        Expression.Equal(prop, id), arg);Di2015NewLine}Di2015NewLine
156506Di2015UniqueSeparatorpublic interface ICacheService Di2015NewLine{Di2015NewLine    AddItem(...);Di2015NewLine}Di2015NewLine
156506Di2015UniqueSeparatorpublic AspNetBasedCacheService : ICacheServiceDi2015NewLine{Di2015NewLine    AddItem(...)Di2015NewLine    {Di2015NewLine        // Implementation that uses the HttpContext.Cache objectDi2015NewLine    }Di2015NewLine }Di2015NewLine
156506Di2015UniqueSeparatorpublic class ChacheServiceProvider Di2015NewLine{Di2015NewLine    public static IChacheService Instance {get; set;}Di2015NewLineDi2015NewLine}Di2015NewLine
156506Di2015UniqueSeparator// inside your class library:Di2015NewLineIChacheService chache = CacheServiceProvider.Instance;Di2015NewLinecache.AddItem(...);Di2015NewLine
156638Di2015UniqueSeparatorInternalGetHostByName(string hostName, bool includeIPv6)
156750Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Net;Di2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        using (MyClient client = new MyClient())Di2015NewLine        {Di2015NewLine            client.HeadOnly = true;Di2015NewLine            string uri = "http://www.google.com";Di2015NewLine            byte[] body = client.DownloadData(uri); // note should be 0-lengthDi2015NewLine            string type = client.ResponseHeaders["content-type"];Di2015NewLine            client.HeadOnly = false;Di2015NewLine            // check 'tis not binary... we'll use text/, but couldDi2015NewLine            // check for text/htmlDi2015NewLine            if (type.StartsWith(@"text/"))Di2015NewLine            {Di2015NewLine                string text = client.DownloadString(uri);Di2015NewLine                Console.WriteLine(text);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLineclass MyClient : WebClientDi2015NewLine{Di2015NewLine    public bool HeadOnly { get; set; }Di2015NewLine    protected override WebRequest GetWebRequest(Uri address)Di2015NewLine    {Di2015NewLine        WebRequest req = base.GetWebRequest(address);Di2015NewLine        if (HeadOnly && req.Method == "GET")Di2015NewLine        {Di2015NewLine            req.Method = "HEAD";Di2015NewLine        }Di2015NewLine        return req;Di2015NewLine    }Di2015NewLine}Di2015NewLine
156750Di2015UniqueSeparatorprotected override WebResponse GetWebResponse(WebRequest request)Di2015NewLine{Di2015NewLine    WebResponse resp = base.GetWebResponse(request);Di2015NewLine    string type = resp.Headers["content-type"];Di2015NewLine    // do something with typeDi2015NewLine    return resp;Di2015NewLine}Di2015NewLine
156787Di2015UniqueSeparatorpublic void MyMethod(string myParam) { }Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLinestring myArg1 = "this is my argument";Di2015NewLinemyClass.MyMethod(myArg1);Di2015NewLine
156802Di2015UniqueSeparatorFoo foo = GetItem<Foo>("abc", () => new Foo("blah"));Di2015NewLine
156802Di2015UniqueSeparatorreturn ((T)HttpContext.Current.Session[key]) ?? defaultValue();Di2015NewLine
156802Di2015UniqueSeparatorpublic static T GetItem<T>(string key)Di2015NewLine    where T : new()Di2015NewLine{Di2015NewLine    return ((T)HttpContext.Current.Session[key]) ?? new T();Di2015NewLine}Di2015NewLine
156838Di2015UniqueSeparatorList<Person> list = new List<Person>();Di2015NewLine// [..] Populate list hereDi2015NewLinePerson jon = list.Find(p => p.Name == "Jon");Di2015NewLine
156838Di2015UniqueSeparatorList<Person> list = new List<Person>();Di2015NewLine// [..] Populate list hereDi2015NewLinePerson jon = list.Find(delegate(Person p) { return p.Name == "Jon"; });Di2015NewLine
156838Di2015UniqueSeparatorpublic Person FindByName(List<Person> list, String name)Di2015NewLine{Di2015NewLine    return list.Find(p => p.Name == name); // The "name" variable is capturedDi2015NewLine}Di2015NewLine
157175Di2015UniqueSeparator<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">Di2015NewLine    ....Di2015NewLine</Project>Di2015NewLine
157175Di2015UniqueSeparator<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">Di2015NewLine    <Import Project="project1.csproj" />Di2015NewLine    ...Di2015NewLine</Project>Di2015NewLine
157175Di2015UniqueSeparator<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">Di2015NewLine    <Import Project="project2.csproj" />Di2015NewLine    ...Di2015NewLine</Project>Di2015NewLine
157263Di2015UniqueSeparatorclass B {Di2015NewLine    S Get();Di2015NewLine    Set(S);Di2015NewLine}Di2015NewLineclass D : B {Di2015NewLine    T Get();Di2015NewLine    Set(T);Di2015NewLine}Di2015NewLine
157263Di2015UniqueSeparatorGet
157263Di2015UniqueSeparatorT
157263Di2015UniqueSeparatorS
157263Di2015UniqueSeparatorS
157263Di2015UniqueSeparatorD
157263Di2015UniqueSeparatorB
157263Di2015UniqueSeparatorB.Get()
157263Di2015UniqueSeparatorS
157263Di2015UniqueSeparatorSet
157263Di2015UniqueSeparatorT
157263Di2015UniqueSeparatorS
157263Di2015UniqueSeparatorS
157263Di2015UniqueSeparatorD
157263Di2015UniqueSeparatorB
157263Di2015UniqueSeparatorB.Set(X)
157263Di2015UniqueSeparatorX
157263Di2015UniqueSeparatorS
157263Di2015UniqueSeparatorT
157263Di2015UniqueSeparatorD::Set(T)
157570Di2015UniqueSeparatorpublic class SomethingDi2015NewLine{Di2015NewLine  private readonly object lockObj = new object();Di2015NewLineDi2015NewLine  public SomethingReentrant()Di2015NewLine  {Di2015NewLine    lock(lockObj)    // Line ADi2015NewLine    {Di2015NewLine      // ...Di2015NewLine     }Di2015NewLine   }Di2015NewLine}Di2015NewLine
157570Di2015UniqueSeparator  lock(this)Di2015NewLine
157575Di2015UniqueSeparatorMonitor
157624Di2015UniqueSeparatorXsltArgumentList arguments = new XsltArgumentList();Di2015NewLineXmlNodeList nodelist;Di2015NewLineXmlDocument nodesFrament = new XmlDocument();Di2015NewLineXmlNode root = nodesFragment.CreateElement("root");Di2015NewLineforeach (XmlNode node in nodeList)Di2015NewLine{Di2015NewLine    root.AppendChild(node);Di2015NewLine}Di2015NewLinenodesFragment.AppendChild(root);Di2015NewLineDi2015NewLinearguments.AddParam("argumentname", string.Empty, nodesFragment.CreateNavigator().SelectChildren(XPathNodeType.All));Di2015NewLine
157767Di2015UniqueSeparator  <Target Name="AfterBuild">Di2015NewLine    <!-- ============================ Script Compression============================ -->Di2015NewLine    <MakeDir Directories="$(OutputPath)\\compressed" />Di2015NewLine    <Exec Command="java -jar c:\\yuicompressor-2.2.5\\build\\yuicompressor-2.2.5.jar --charset UTF-8 styles.css -o compressed/styles.css" WorkingDirectory="$(OutputPath)" />Di2015NewLine    <Exec Command="move /Y .\\compressed\\* .\\" WorkingDirectory="$(OutputPath)" />Di2015NewLine    <RemoveDir Directories="$(OutputPath)\\sql" />Di2015NewLine    <Exec Command="c:\\7zip-4.4.2\\7za.exe a $(ZipName).zip $(OutputPath)\\*" />Di2015NewLine  </Target>Di2015NewLine
157843Di2015UniqueSeparatorprotected override bool ShowWithoutActivationDi2015NewLine{Di2015NewLine  get { return true; }Di2015NewLine}Di2015NewLine
157843Di2015UniqueSeparatorprotected override CreateParams CreateParamsDi2015NewLine{Di2015NewLine  getDi2015NewLine  {Di2015NewLine    CreateParams baseParams = base.CreateParams;Di2015NewLineDi2015NewLine    baseParams.ExStyle |= ( int )( Di2015NewLine      Win32.ExtendedWindowStyles.WS_EX_NOACTIVATE | Di2015NewLine      Win32.ExtendedWindowStyles.WS_EX_TOOLWINDOW );Di2015NewLineDi2015NewLine    return baseParams;Di2015NewLine  }Di2015NewLine}Di2015NewLine
158005Di2015UniqueSeparatorpublic class SafeDictionary<TKey, TValue>: IDictionary<TKey, TValue>Di2015NewLine{Di2015NewLine    private readonly object syncRoot = new object();Di2015NewLine    private Dictionary<TKey, TValue> d = new Dictionary<TKey, TValue>();Di2015NewLineDi2015NewLine    public void Add(TKey key, TValue value)Di2015NewLine    {Di2015NewLine        lock (syncRoot)Di2015NewLine        {Di2015NewLine            d.Add(key, value);Di2015NewLine        }Di2015NewLine        OnItemAdded(EventArgs.Empty);Di2015NewLine    }Di2015NewLineDi2015NewLine    public event EventHandler ItemAdded;Di2015NewLineDi2015NewLine    protected virtual void OnItemAdded(EventArgs e)Di2015NewLine    {Di2015NewLine        EventHandler handler = ItemAdded;Di2015NewLine        if (handler != null)Di2015NewLine            handler(this, e);Di2015NewLine    }Di2015NewLineDi2015NewLine    // more IDictionary members...Di2015NewLine}Di2015NewLine
158035Di2015UniqueSeparatorsession.AddStore("C:\\\\test.pst"); // loads existing or creates a new one, if there is none.Di2015NewLinestorage = session.Folders.GetLast(); // grabs root folder of the new fileStorage.Di2015NewLineDi2015NewLineif (storage.Name != storageName) // if fileStorage is brand new, it has default name.Di2015NewLine{Di2015NewLine      storage.Name = "Documents";Di2015NewLine      session.RemoveStore(storage); // to apply new fileStorage name, it have to be removed and added again.Di2015NewLine      session.AddStore(storagePath);Di2015NewLine }Di2015NewLine
158054Di2015UniqueSeparatorfunction promptDi2015NewLine{Di2015NewLine   ## Get the history. Since the history may be either empty,Di2015NewLine   ## a single item or an array, the @() syntax ensuresDi2015NewLine   ## that PowerShell treats it as an arrayDi2015NewLine   $history = @(get-history)Di2015NewLineDi2015NewLineDi2015NewLine   ## If there are any items in the history, find out theDi2015NewLine   ## Id of the final one.Di2015NewLine   ## PowerShell defaults the $lastId variable to '0' if thisDi2015NewLine   ## code doesn't execute.Di2015NewLine   if($history.Count -gt 0)Di2015NewLine   {Di2015NewLine      $lastItem = $history[$history.Count - 1]Di2015NewLine      $lastId = $lastItem.IdDi2015NewLine   }Di2015NewLineDi2015NewLine   ## The command that we're currently entering on the promptDi2015NewLine   ## will be next in the history. Because of that, we'llDi2015NewLine   ## take the last history Id and add one to it.Di2015NewLine   $nextCommand = $lastId + 1Di2015NewLineDi2015NewLine   ## Get the current locationDi2015NewLine   $currentDirectory = get-locationDi2015NewLineDi2015NewLine   ## Set the Windows Title to  the current locationDi2015NewLine   $host.ui.RawUI.WindowTitle = "PS: " + $currentDirectoryDi2015NewLineDi2015NewLine   ##pushd infoDi2015NewLine   $pushdCount = $(get-location -stack).countDi2015NewLine   $pushPrompt = ""Di2015NewLine   for ($i=0; $i -lt $pushdCount; $i++)Di2015NewLine   {Di2015NewLine       $pushPrompt += "+"Di2015NewLine    }Di2015NewLineDi2015NewLine   ## And create a prompt that shows the command number,Di2015NewLine   ## and current locationDi2015NewLine   "PS:$nextCommand $currentDirectory `n$($pushPrompt)>"Di2015NewLine}Di2015NewLine
158456Di2015UniqueSeparatorPS H:\\> $x = new-object system.io.driveinfo("h:\\")Di2015NewLinePS H:\\> $x.drivetypeDi2015NewLineNetworkDi2015NewLine
158530Di2015UniqueSeparator[DllImport("mpr.dll")]Di2015NewLine public static extern int WNetAddConnection2ADi2015NewLine (Di2015NewLine      [MarshalAs(UnmanagedType.LPArray)] NETRESOURCEA[] lpNetResource,Di2015NewLine      [MarshalAs(UnmanagedType.LPStr)] string lpPassword,Di2015NewLine      [MarshalAs(UnmanagedType.LPStr)] string UserName, int dwFlagsDi2015NewLine );Di2015NewLine
158675Di2015UniqueSeparatorfrom TabSection t in content.ChildControlsDi2015NewLine
158752Di2015UniqueSeparatorWorksheet sheet = excelApp.Worksheets.Open(...);Di2015NewLine...Di2015NewLineMarshal.ReleaseComObject(sheet);Di2015NewLine
158752Di2015UniqueSeparatorWorksheets sheets = excelApp.Worksheets; // <-- the important partDi2015NewLineWorksheet sheet = sheets.Open(...);Di2015NewLine...Di2015NewLineMarshal.ReleaseComObject(sheets);Di2015NewLineMarshal.ReleaseComObject(sheet);Di2015NewLine
159042Di2015UniqueSeparatorvoid MyFunction()Di2015NewLine{Di2015NewLine    using (TCPSEntities model = new TCPSEntities())Di2015NewLine    {Di2015NewLine        EmployeeRoles er = model.EmployeeRoles.First(p=>p.EmployeeId == 123);Di2015NewLine        er.Roles = GetDefaultRole(model);Di2015NewLine        model.SaveChanges();Di2015NewLine     }Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLineprivate static Roles GetDefaultRole(TCPSEntities model)Di2015NewLine{Di2015NewLine    Roles r = null;Di2015NewLine    r = model.Roles.First(p => p.RoleId == 1);Di2015NewLine    return r;Di2015NewLine}Di2015NewLine
159126Di2015UniqueSeparatorstring myString = "{foo} is {bar} and {yadi} is {yada}".Inject(o);Di2015NewLine
159126Di2015UniqueSeparatorStatus.Text = "{UserName} last logged in at {LastLoginDate}".FormatWith(user);Di2015NewLine
159246Di2015UniqueSeparatorTools -> Options -> Text Editor -> C# -> General -> Navigation BarDi2015NewLine
159683Di2015UniqueSeparatorDLLImportAttribute
159683Di2015UniqueSeparatorBOOL ReportEvent(Di2015NewLine__in  HANDLE hEventLog,Di2015NewLine__in  WORD wType,Di2015NewLine__in  WORD wCategory,Di2015NewLine__in  DWORD dwEventID,Di2015NewLine__in  PSID lpUserSid,Di2015NewLine__in  WORD wNumStrings,Di2015NewLine__in  DWORD dwDataSize,Di2015NewLine__in  LPCTSTR *lpStrings,Di2015NewLine__in  LPVOID lpRawDataDi2015NewLine);Di2015NewLine
159683Di2015UniqueSeparator[DllImport("Advapi32.dll", EntryPoint="ReportEventW",  SetLastError=true,Di2015NewLineCharSet=CharSet.Unicode)]Di2015NewLinebool WriteEvent(Di2015NewLine  IntPtr hEventLog, //Where to find it ?Di2015NewLine  ushort  wType,Di2015NewLine  ushort  wCategory,Di2015NewLine  ulong dwEventID,Di2015NewLine  IntPtr lpUserSid, // We'll leave this struct alone, so just feed it a pointerDi2015NewLine  ushort wNumStrings,Di2015NewLine  ushort dwDataSize,Di2015NewLine  string[] lpStrings,Di2015NewLine  IntPtr lpRawDataDi2015NewLine);Di2015NewLine
159993Di2015UniqueSeparatorpublic class FooDi2015NewLine{Di2015NewLine     public bool DoSomething() { return false; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Bar : FooDi2015NewLine{Di2015NewLine     public new bool DoSomething() { return true; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class TestDi2015NewLine{Di2015NewLine    public static void Main ()Di2015NewLine    {Di2015NewLine        Foo test = new Bar ();Di2015NewLine        Console.WriteLine (test.DoSomething ());Di2015NewLine    }Di2015NewLine}Di2015NewLine
160570Di2015UniqueSeparatorstatic int Count1<T>(IEnumerable<T> a)Di2015NewLine{Di2015NewLine    return a.Count();Di2015NewLine}Di2015NewLine
160661Di2015UniqueSeparatorFunc<int, bool>[] criteria = new Func<int, bool>[3]; Di2015NewLine            criteria[0] = i => i % 2 == 0; Di2015NewLine            criteria[1] = i => i % 3 == 0; Di2015NewLine            criteria[2] = i => i % 5 == 0;Di2015NewLine            Expression<Func<int, bool>>[] results = new Expression<Func<int, bool>>[criteria.Length];Di2015NewLine            for (int i = 0; i < criteria.Length; i++)Di2015NewLine            {Di2015NewLine                results[i] = f => true; Di2015NewLine                for (int j = 0; j <= i; j++)Di2015NewLine                {Di2015NewLine                    int ii = i;Di2015NewLine                    int jj = j;Di2015NewLine                    Expression<Func<int, bool>> expr = b => criteria[jj](b); Di2015NewLine                    var invokedExpr = Expression.Invoke(expr, results[ii].Parameters.Cast<Expression>()); Di2015NewLine                    results[ii] = Expression.Lambda<Func<int, bool>>(Expression.And(results[ii].Body, invokedExpr), results[ii].Parameters);Di2015NewLine                }Di2015NewLine            } Di2015NewLine            var predicates = results.Select(e => e.Compile()).ToArray();Di2015NewLine
160747Di2015UniqueSeparatorstring s = String.Format("{{ hello to all }}");Di2015NewLineConsole.WriteLine(s); //prints '{ hello to all }'Di2015NewLine
160850Di2015UniqueSeparatorconst
160850Di2015UniqueSeparator.maxstack 2Di2015NewLine.locals init ([0] int32, [1] int32)Di2015NewLineDi2015NewLineldc.i4.1   //load 1Di2015NewLinestloc.0    //store in 1st local variableDi2015NewLineldc.i4.5   //load 5Di2015NewLineldloc.0    //load 1st variableDi2015NewLinemul        // 1 * 5Di2015NewLinestloc.1    // store in 2nd local variableDi2015NewLine
160850Di2015UniqueSeparator.maxstack 1Di2015NewLine.locals init ( [0] int32 )Di2015NewLineDi2015NewLineldc.i4.5 //load 5 Di2015NewLinestloc.0  //store in local variableDi2015NewLine
161401Di2015UniqueSeparator.ShowRootLines = false
161401Di2015UniqueSeparatorShowRootLines
161401Di2015UniqueSeparatorExpand()
161401Di2015UniqueSeparatorShowPlusMinus
161411Di2015UniqueSeparatorif (Page is FooBar) { ... }Di2015NewLine
161484Di2015UniqueSeparatorusing CustomerList = System.Collections.Generic.List<Customer>;Di2015NewLine
161484Di2015UniqueSeparatorgcInt.MyEvent += gcInt_MyEvent;Di2015NewLine
161565Di2015UniqueSeparatorStringComparer.OrdinalIgnoreCase
161607Di2015UniqueSeparatordef func(x, bdg)Di2015NewLine  eval "#{x} += 1", bdgDi2015NewLineendDi2015NewLineDi2015NewLinea = 5Di2015NewLinefunc(:a, binding)Di2015NewLineputs a # => 6Di2015NewLine
161706Di2015UniqueSeparatorIN
161706Di2015UniqueSeparatorDetachedCriteria query = DetachedCriteria.For<Post>();Di2015NewLinequery.CreateCriteria("Post").Add(Expression.In("TagName",  string.Join(",",tags.ToArray()) );Di2015NewLine
161719Di2015UniqueSeparatorString.Format("(&(objectCategory=person)(objectClass=user)(sn={0}))", Di2015NewLine              EscapeFilterLiteral(lastName, false));Di2015NewLine
161719Di2015UniqueSeparatorpublic static string EscapeFilterLiteral(string literal, bool escapeWildcards)Di2015NewLine{Di2015NewLine    if (literal == null) throw new ArgumentNullException("literal");Di2015NewLineDi2015NewLine    literal = literal.Replace("\\\\", "\\\\5c");Di2015NewLine    literal = literal.Replace("(", "\\\\28");Di2015NewLine    literal = literal.Replace(")", "\\\\29");Di2015NewLine    literal = literal.Replace("\\0", "\\\\00");Di2015NewLine    literal = literal.Replace("/", "\\\\2f");Di2015NewLine    if (escapeWildcards) literal = literal.Replace("*", "\\\\2a");Di2015NewLine    return literal;Di2015NewLine}Di2015NewLine
161768Di2015UniqueSeparator<form runat="server" DefaultButton="SubmitButton">Di2015NewLine
161768Di2015UniqueSeparator<form runat="server" id="form1">Di2015NewLine
161768Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine   form1.DefaultButton = ucLogin.btnSubmit.ClientID;Di2015NewLine}Di2015NewLine
161834Di2015UniqueSeparatorpublic bool CalculatePoint(... out Point result);
161965Di2015UniqueSeparatorint.TryParse
162003Di2015UniqueSeparatorholy code
162013Di2015UniqueSeparator    // At startup.Di2015NewLine    ResourceManager mgr = Resources.ResourceManager;Di2015NewLine    List<string> keys = new List<string>();Di2015NewLineDi2015NewLine    ResourceSet set = mgr.GetResourceSet(CultureInfo.CurrentCulture, true, true);Di2015NewLine    foreach (DictionaryEntry o in set)Di2015NewLine    {Di2015NewLine        keys.Add((string)o.Key);Di2015NewLine    }Di2015NewLine    mgr.ReleaseAllResources();Di2015NewLineDi2015NewLine    Console.WriteLine(Resources.A);Di2015NewLine
162063Di2015UniqueSeparatorImageAttributes attribs = new ImageAttributes();Di2015NewLineList<ColorMap> colorMaps = new List<ColorMap>();Di2015NewLine//Di2015NewLine// Remap black top be transparentDi2015NewLineColorMap remap = new ColorMap();Di2015NewLineremap.OldColor = Color.Black;Di2015NewLineremap.NewColor = Color.Transparent;Di2015NewLinecolorMaps.Add(remap);Di2015NewLine//Di2015NewLine// ...add additional remapping entries here...Di2015NewLine//Di2015NewLineattribs.SetRemapTable(colorMaps.ToArray(), ColorAdjustType.Bitmap);Di2015NewLinecontext.Graphics.DrawImage(image, imageRect, 0, 0, Di2015NewLine                           imageRect.Width, imageRect.Height, Di2015NewLine                           GraphicsUnit.Pixel, attribs);Di2015NewLine
162317Di2015UniqueSeparator$('body').append($.facebox.settings.faceboxHtml)Di2015NewLine
162317Di2015UniqueSeparator$('#aspnetForm').append($.facebox.settings.faceboxHtml)Di2015NewLine
162348Di2015UniqueSeparatorDateTime.Parse()
162348Di2015UniqueSeparatorDateTime.TryParse()
162348Di2015UniqueSeparatorDateTime.TryParseExact()
162351Di2015UniqueSeparatorHKEY_CLASSES_ROOT
162585Di2015UniqueSeparatoritem.Save();Di2015NewLineitem.Move(some_folder);Di2015NewLineitems_list.Add(item.EntryID);Di2015NewLine
162585Di2015UniqueSeparatoritem.Save();Di2015NewLineitem = (Outlook.MailItem)item.Move(some_folder);Di2015NewLineitems_list.Add(item.EntryID);Di2015NewLine
162770Di2015UniqueSeparatorpublic enum ListViewExtendedStylesDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_GRIDLINESDi2015NewLine    /// </summary>Di2015NewLine    GridLines = 0x00000001,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_SUBITEMIMAGESDi2015NewLine    /// </summary>Di2015NewLine    SubItemImages = 0x00000002,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_CHECKBOXESDi2015NewLine    /// </summary>Di2015NewLine    CheckBoxes = 0x00000004,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_TRACKSELECTDi2015NewLine    /// </summary>Di2015NewLine    TrackSelect = 0x00000008,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_HEADERDRAGDROPDi2015NewLine    /// </summary>Di2015NewLine    HeaderDragDrop = 0x00000010,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_FULLROWSELECTDi2015NewLine    /// </summary>Di2015NewLine    FullRowSelect = 0x00000020,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_ONECLICKACTIVATEDi2015NewLine    /// </summary>Di2015NewLine    OneClickActivate = 0x00000040,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_TWOCLICKACTIVATEDi2015NewLine    /// </summary>Di2015NewLine    TwoClickActivate = 0x00000080,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_FLATSBDi2015NewLine    /// </summary>Di2015NewLine    FlatsB = 0x00000100,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_REGIONALDi2015NewLine    /// </summary>Di2015NewLine    Regional = 0x00000200,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_INFOTIPDi2015NewLine    /// </summary>Di2015NewLine    InfoTip = 0x00000400,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_UNDERLINEHOTDi2015NewLine    /// </summary>Di2015NewLine    UnderlineHot = 0x00000800,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_UNDERLINECOLDDi2015NewLine    /// </summary>Di2015NewLine    UnderlineCold = 0x00001000,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_MULTIWORKAREASDi2015NewLine    /// </summary>Di2015NewLine    MultilWorkAreas = 0x00002000,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_LABELTIPDi2015NewLine    /// </summary>Di2015NewLine    LabelTip = 0x00004000,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_BORDERSELECTDi2015NewLine    /// </summary>Di2015NewLine    BorderSelect = 0x00008000,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_DOUBLEBUFFERDi2015NewLine    /// </summary>Di2015NewLine    DoubleBuffer = 0x00010000,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_HIDELABELSDi2015NewLine    /// </summary>Di2015NewLine    HideLabels = 0x00020000,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_SINGLEROWDi2015NewLine    /// </summary>Di2015NewLine    SingleRow = 0x00040000,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_SNAPTOGRIDDi2015NewLine    /// </summary>Di2015NewLine    SnapToGrid = 0x00080000,Di2015NewLine    /// <summary>Di2015NewLine    /// LVS_EX_SIMPLESELECTDi2015NewLine    /// </summary>Di2015NewLine    SimpleSelect = 0x00100000Di2015NewLine}Di2015NewLineDi2015NewLinepublic enum ListViewMessagesDi2015NewLine{Di2015NewLine    First = 0x1000,Di2015NewLine    SetExtendedStyle = (First + 54),Di2015NewLine    GetExtendedStyle = (First + 55),Di2015NewLine}Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// Contains helper methods to change extended styles on ListView, including enabling double buffering.Di2015NewLine/// Based on Giovanni Montrone's article on <see cref="http://www.codeproject.com/KB/list/listviewxp.aspx"/>Di2015NewLine/// </summary>Di2015NewLinepublic class ListViewHelperDi2015NewLine{Di2015NewLine    private ListViewHelper()Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    [DllImport("user32.dll", CharSet = CharSet.Auto)]Di2015NewLine    private static extern int SendMessage(IntPtr handle, int messg, int wparam, int lparam);Di2015NewLineDi2015NewLine    public static void SetExtendedStyle(Control control, ListViewExtendedStyles exStyle)Di2015NewLine    {Di2015NewLine        ListViewExtendedStyles styles;Di2015NewLine        styles = (ListViewExtendedStyles)SendMessage(control.Handle, (int)ListViewMessages.GetExtendedStyle, 0, 0);Di2015NewLine        styles |= exStyle;Di2015NewLine        SendMessage(control.Handle, (int)ListViewMessages.SetExtendedStyle, 0, (int)styles);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void EnableDoubleBuffer(Control control)Di2015NewLine    {Di2015NewLine        ListViewExtendedStyles styles;Di2015NewLine        // read current styleDi2015NewLine        styles = (ListViewExtendedStyles)SendMessage(control.Handle, (int)ListViewMessages.GetExtendedStyle, 0, 0);Di2015NewLine        // enable double buffer and border selectDi2015NewLine        styles |= ListViewExtendedStyles.DoubleBuffer | ListViewExtendedStyles.BorderSelect;Di2015NewLine        // write new styleDi2015NewLine        SendMessage(control.Handle, (int)ListViewMessages.SetExtendedStyle, 0, (int)styles);Di2015NewLine    }Di2015NewLine    public static void DisableDoubleBuffer(Control control)Di2015NewLine    {Di2015NewLine        ListViewExtendedStyles styles;Di2015NewLine        // read current styleDi2015NewLine        styles = (ListViewExtendedStyles)SendMessage(control.Handle, (int)ListViewMessages.GetExtendedStyle, 0, 0);Di2015NewLine        // disable double buffer and border selectDi2015NewLine        styles -= styles & ListViewExtendedStyles.DoubleBuffer;Di2015NewLine        styles -= styles & ListViewExtendedStyles.BorderSelect;Di2015NewLine        // write new styleDi2015NewLine        SendMessage(control.Handle, (int)ListViewMessages.SetExtendedStyle, 0, (int)styles);Di2015NewLine    }Di2015NewLine}Di2015NewLine
163075Di2015UniqueSeparatorMailAddress
163075Di2015UniqueSeparatorMailAddress
163075Di2015UniqueSeparator"Tom Smith <tsmith@contoso.com>"
163075Di2015UniqueSeparatorstring emailAddress = "\\"Jim\\" <jim@example.com>";Di2015NewLineDi2015NewLineMailAddress address = new MailAddress(emailAddress.Replace('\\"', ''));Di2015NewLine
163134Di2015UniqueSeparator[XmlAttribute("Index")]Di2015NewLinepublic int OrderDi2015NewLine{  { get; set; }   }Di2015NewLine
163220Di2015UniqueSeparatorvar files = Directory.EnumerateFiles("C:\\\\path", "*.*", SearchOption.AllDirectories)Di2015NewLine            .Where(s => s.EndsWith(".mp3") || s.EndsWith(".jpg"));Di2015NewLine
163220Di2015UniqueSeparatorvar files = Directory.GetFiles("C:\\\\path", "*.*", SearchOption.AllDirectories)Di2015NewLine            .Where(s => s.EndsWith(".mp3") || s.EndsWith(".jpg"));Di2015NewLine
163247Di2015UniqueSeparatorprivate void setCellComboBoxItems(DataGridView dataGrid, int rowIndex, int colIndex, object[] itemsToAdd)Di2015NewLine{Di2015NewLine    DataGridViewComboBoxCell dgvcbc = (DataGridViewComboBoxCell) dataGrid.Rows[rowIndex].Cells[colIndex];Di2015NewLine    // You might pass a boolean to determine whether to clear or not.Di2015NewLine    dgvcbc.Items.Clear();Di2015NewLine    foreach (object itemToAdd in itemsToAdd)Di2015NewLine    {Di2015NewLine        dgvcbc.Items.Add(itemToAdd);Di2015NewLine    }Di2015NewLine}Di2015NewLine
163261Di2015UniqueSeparatorvar items = list.MyItems.Select(item => new { item.ID, item.Sector, item.Description, Di2015NewLine                                              item.CompleteDate, item.DueDate })Di2015NewLine                        .AsEnumerable() // Don't do the next bit in the DBDi2015NewLine                        .Select(item => new { item.ID, item.Sector, item.Description,Di2015NewLine                                              CompleteDate = FormatDate(CompleteDate),Di2015NewLine                                              DueDate = FormatDate(DueDate) });Di2015NewLineDi2015NewLineDi2015NewLinestatic string FormatDate(DateTime? date)Di2015NewLine{Di2015NewLine    return date.HasValue ? date.Value.ToShortDateString() : ""Di2015NewLine}Di2015NewLine
163362Di2015UniqueSeparatorlog4net:HostName
163362Di2015UniqueSeparator<conversionPattern value="%property{log4net:HostName}" />Di2015NewLine
163543Di2015UniqueSeparatorAssert
163717Di2015UniqueSeparatorpublic class CustomComboBox : ComboBoxDi2015NewLine{Di2015NewLine    public CustomComboBox()Di2015NewLine    {Di2015NewLine        base.DropDownStyle = ComboBoxStyle.DropDownList;Di2015NewLine    }Di2015NewLineDi2015NewLine    [DefaultValue(ComboBoxStyle.DropDownList)]Di2015NewLine    public new ComboBoxStyle DropDownStyleDi2015NewLine    {Di2015NewLine        set { base.DropDownStyle = value; Invalidate(); }Di2015NewLine        get { return base.DropDownStyle;}Di2015NewLine    }Di2015NewLine}Di2015NewLine
164270Di2015UniqueSeparatorxdoc.Descendants()Di2015NewLine    .Where(x => x.HasAttribute("id") && x.Attribute("id")==id)Di2015NewLine    .Single();Di2015NewLine
164455Di2015UniqueSeparatorif ((currentWeather.Type & _badWeatherTypes) == _badWeatherTypes)Di2015NewLine
164455Di2015UniqueSeparatorif ((currentWeather.Type & _badWeatherTypes) != 0)Di2015NewLine
164455Di2015UniqueSeparatorFlagsAttribute
164455Di2015UniqueSeparator[Flags]
164455Di2015UniqueSeparatorToString()
164455Di2015UniqueSeparatorWeatherTypes
164608Di2015UniqueSeparator// Assume we have a type named 'MyType' and a variable of this type named Di2015NewLine'myObject' Di2015NewLineSystem.Text.StringBuilder output = new System.Text.StringBuilder(); Di2015NewLineSystem.IO.StringWriter internalWriter = new System.IO.StringWriter(output); Di2015NewLineSystem.Xml.XmlWriter writer = new System.Xml.XmlTextWriter(internalWriter); Di2015NewLineSystem.Xml.Serialization.XmlSerializer serializer = new Di2015NewLineSystem.Xml.Serialization.XmlSerializer(typeof(MyType)); Di2015NewLineDi2015NewLineDi2015NewLinewriter.WriteStartElement("MyContainingElement"); Di2015NewLineserializer.Serialize(writer, myObject); Di2015NewLinewriter.WriteEndElement(); Di2015NewLine
164650Di2015UniqueSeparatorint
164650Di2015UniqueSeparatorSystem.Int32
164814Di2015UniqueSeparatorMyUserControl myControl = (MyUserControl)e.item.FindControl("NameInASPX");Di2015NewLinemyControl.MyCustomProperty = foo;Di2015NewLine
164908Di2015UniqueSeparatori++
164908Di2015UniqueSeparatori
164908Di2015UniqueSeparatori
164908Di2015UniqueSeparator++
164908Di2015UniqueSeparator// assume this function is defined:Di2015NewLineint Inc(ref int i)Di2015NewLine{Di2015NewLine  var old = i;Di2015NewLine  i = i + 1;Di2015NewLine  return old;Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLineint i = 1;Di2015NewLinestring result = String.Format("{0},{1},{2}", Inc(ref i), Inc(ref i), Inc(ref i));Di2015NewLineConsole.WriteLine(result);Di2015NewLine...Di2015NewLine
164908Di2015UniqueSeparatorInc(ref i)
164908Di2015UniqueSeparatori
164908Di2015UniqueSeparatori
164908Di2015UniqueSeparatorString.Format(...)
164932Di2015UniqueSeparatordecimalVar.ToString ("#.##");Di2015NewLine
165472Di2015UniqueSeparatorFoo foo = ...  // "Foo" is a type, "foo" is a variable with that typeDi2015NewLine
165728Di2015UniqueSeparatorInternalsVisibleTo
165891Di2015UniqueSeparator.PerformLayout()
166094Di2015UniqueSeparatorTuple<string, int> t = new Tuple<string, int>("Hello", 4);Di2015NewLine
166094Di2015UniqueSeparatorSystem.Collections.Generic.KeyValuePair<K, V>
166094Di2015UniqueSeparatorpublic class Pair<T, U> {Di2015NewLine    public Pair() {Di2015NewLine    }Di2015NewLineDi2015NewLine    public Pair(T first, U second) {Di2015NewLine        this.First = first;Di2015NewLine        this.Second = second;Di2015NewLine    }Di2015NewLineDi2015NewLine    public T First { get; set; }Di2015NewLine    public U Second { get; set; }Di2015NewLine};Di2015NewLine
166094Di2015UniqueSeparatorPair<String, int> pair = new Pair<String, int>("test", 2);Di2015NewLineConsole.WriteLine(pair.First);Di2015NewLineConsole.WriteLine(pair.Second);Di2015NewLine
166094Di2015UniqueSeparatortestDi2015NewLine2Di2015NewLine
166094Di2015UniqueSeparatorPair<Pair<String, int>, bool> pair = new Pair<Pair<String, int>, bool>();Di2015NewLinepair.First = new Pair<String, int>();Di2015NewLinepair.First.First = "test";Di2015NewLinepair.First.Second = 12;Di2015NewLinepair.Second = true;Di2015NewLineDi2015NewLineConsole.WriteLine(pair.First.First);Di2015NewLineConsole.WriteLine(pair.First.Second);Di2015NewLineConsole.WriteLine(pair.Second);Di2015NewLine
166094Di2015UniqueSeparatortestDi2015NewLine12Di2015NewLinetrueDi2015NewLine
166207Di2015UniqueSeparatorvar dict = myList.Cast<Foo>().ToDictionary(o => o.Description, o => o.Id);Di2015NewLine
166762Di2015UniqueSeparatorvar y = 0f; // f is singleDi2015NewLinevar z = 0d; // z is doubleDi2015NewLinevar r = 0m; // r is decimalDi2015NewLinevar i = 0U; // i is unsigned intDi2015NewLinevar j = 0L; // j is long (note capital L for clarity)Di2015NewLinevar k = 0UL; // k is unsigned long (note capital L for clarity)Di2015NewLine
167132Di2015UniqueSeparator<ReportViewer>.Reset();Di2015NewLine
167132Di2015UniqueSeparator<ReportViewer>.LocalReport.DataSources.Add( ... );Di2015NewLine
167178Di2015UniqueSeparatorvar delimitedString = selectedValues.Aggregate((x,y) => x + ", " + y);Di2015NewLine
167296Di2015UniqueSeparatorpublic static class StringManipulationDi2015NewLine{Di2015NewLine    public static string PregReplace(string input, string[] pattern, string[] replacements)Di2015NewLine    {Di2015NewLine        if (replacements.Length != pattern.Length)Di2015NewLine            throw new ArgumentException("Replacement and Pattern Arrays must be balanced");Di2015NewLineDi2015NewLine        for (int i = 0; i < pattern.Length; i++)Di2015NewLine        {Di2015NewLine            input = Regex.Replace(input, pattern[i], replacements[i]);                Di2015NewLine        }Di2015NewLineDi2015NewLine        return input;Di2015NewLine    }Di2015NewLine}Di2015NewLine
167375Di2015UniqueSeparatorpublic override void Import(string fileName, string password, Di2015NewLine                            X509KeyStorageFlags keyStorageFlags);Di2015NewLine
167375Di2015UniqueSeparatorpublic override void Import(byte[] rawData, string password, Di2015NewLine                            X509KeyStorageFlags keyStorageFlags);Di2015NewLine
167392Di2015UniqueSeparator// anonymous delegateDi2015NewLinevar evens = EnumerableDi2015NewLine                .Range(1, 100)Di2015NewLine                .Where(delegate(int x) { return (x % 2) == 0; })Di2015NewLine                .ToList();Di2015NewLineDi2015NewLine// lambda expressionDi2015NewLinevar evens = EnumerableDi2015NewLine                .Range(1, 100)Di2015NewLine                .Where(x => (x % 2) == 0)Di2015NewLine                .ToList();Di2015NewLine
167392Di2015UniqueSeparatorExpression<T>
167392Di2015UniqueSeparatorvoid Example(Predicate<int> aDelegate);Di2015NewLine
167392Di2015UniqueSeparatorExample(x => x > 5);Di2015NewLine
167392Di2015UniqueSeparatorvoid Example(Expression<Predicate<int>> expressionTree);Di2015NewLine
167392Di2015UniqueSeparatorx > 5
167642Di2015UniqueSeparatorDispose
168097Di2015UniqueSeparatorpublic class ComplexCalculationDi2015NewLine{Di2015NewLine    protected int favoriteNumber;Di2015NewLine    public int FavoriteNumberDi2015NewLine    {Di2015NewLine        get { return favoriteNumber; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
168097Di2015UniqueSeparatorpublic class ComplexCalculationTest : ComplexCalculationDi2015NewLine{Di2015NewLine    public void SetFavoriteNumber(int newFavoriteNumber)Di2015NewLine    {Di2015NewLine        this.favoriteNumber = newFavoriteNumber;Di2015NewLine    }Di2015NewLine}Di2015NewLine
168097Di2015UniqueSeparator    public void Test()Di2015NewLine    {Di2015NewLine        ComplexCalculationTest myTestObject = new ComplexCalculationTest();Di2015NewLine        myTestObject.SetFavoriteNumber(3);Di2015NewLine        ComplexCalculation myObject = myTestObject;Di2015NewLineDi2015NewLine        if (myObject.FavoriteNumber == 3)Di2015NewLine            Console.WriteLine("Win!");Di2015NewLineDi2015NewLine    }Di2015NewLine
168182Di2015UniqueSeparatorResponse.AddHeader("content-disposition", "attachment; filename=NewFileName.csv");Di2015NewLine
168221Di2015UniqueSeparatorpublic string Name { get; set; }Di2015NewLine
168362Di2015UniqueSeparatorPrivate Sub assignApplicationPool(ByVal WebSite As String, ByVal Vdir As String, ByVal appPool As String)Di2015NewLine   TryDi2015NewLine     Dim IISVdir As New DirectoryEntry(String.Format("IIS://{0}/W3SVC/1/Root/{1}", WebSite, Vdir))Di2015NewLine     IISVdir.Properties.Item("AppPoolId").Item(0) = appPoolDi2015NewLine     IISVdir.CommitChanges()Di2015NewLine   Catch ex As ExceptionDi2015NewLine     Throw exDi2015NewLine   End TryDi2015NewLine End SubDi2015NewLineDi2015NewLine Private strServer As String = "localhost"Di2015NewLine Private strRootSubPath As String = "/W3SVC/1/Root"Di2015NewLine Private strSchema As String = "IIsWebVirtualDir"Di2015NewLine Public Overrides Sub Install(ByVal stateSaver As IDictionary)Di2015NewLine   MyBase.Install(stateSaver)Di2015NewLine   TryDi2015NewLine     Dim webAppName As String = MyBase.Context.Parameters.Item("TARGETVDIR").ToStringDi2015NewLine     Dim vdirName As String = MyBase.Context.Parameters.Item("COMMONVDIR").ToStringDi2015NewLine     Me.assignApplicationPool(Me.strServer, MyBase.Context.Parameters.Item("TARGETVDIR").ToString, MyBase.Context.Parameters.Item("APPPOOL").ToString)Di2015NewLine   Catch ex As ExceptionDi2015NewLine     Throw exDi2015NewLine   End TryDi2015NewLine End SubDi2015NewLine
168365Di2015UniqueSeparator...Di2015NewLineMicrosoft.Win32.SystemEvents.SessionEnded +=newDi2015NewLine  Microsoft.Win32.SessionEndedEventHandler(shutdownHandler);Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLineprivate void shutdownHandler(object sender, Microsoft.Win32.SessionEndedEventArgs e) {Di2015NewLine  // Do stuffDi2015NewLine}Di2015NewLine
168414Di2015UniqueSeparatortypeof
168414Di2015UniqueSeparatorldtoken
168414Di2015UniqueSeparatorType.GetTypeFromHandle
168414Di2015UniqueSeparatorType.GetType(string)
168414Di2015UniqueSeparatorldtoken
168922Di2015UniqueSeparatorIList<T>
169039Di2015UniqueSeparatorForm
169210Di2015UniqueSeparatortxtfoo.AppendText Di2015NewLine
169210Di2015UniqueSeparator txtfoo.text+="something"Di2015NewLine
169226Di2015UniqueSeparator??
169226Di2015UniqueSeparatormyNewValue = myValue ?? new MyValue();Di2015NewLine
169613Di2015UniqueSeparatorarray is T[]
169613Di2015UniqueSeparatorclass MyCollection : ICollection<T> {Di2015NewLine   void ICollection<T>.CopyTo(T[] array, int index) {Di2015NewLine       // Bounds checking, etc here.Di2015NewLine       CopyToImpl(array, index);Di2015NewLine   }Di2015NewLine   void ICollection.CopyTo(Array array, int index) {Di2015NewLine       // Bounds checking, etc here.Di2015NewLine       if (array is T[]) { // quick, avoids reflection, but only works if array is typed as exactly T[]Di2015NewLine           CopyToImpl((T[])localArray, index);Di2015NewLine       } else {Di2015NewLine           Type elementType = array.GetType().GetElementType();Di2015NewLine           if (!elementType.IsAssignableFrom(typeof(T)) && !typeof(T).IsAssignableFrom(elementType)) {Di2015NewLine               throw new Exception();Di2015NewLine           }Di2015NewLine           CopyToImpl((object[])array, index);Di2015NewLine       }Di2015NewLine   }Di2015NewLine   private void CopyToImpl(object[] array, int index) {Di2015NewLine       // array will always have a valid type by this point, and the bounds will be checkedDi2015NewLine       // Handle the copying hereDi2015NewLine   }Di2015NewLine}Di2015NewLine
169613Di2015UniqueSeparatorelement.IsAssignableFrom(typeof(T))
169613Di2015UniqueSeparatortypeof(T).IsAssignableFrom(elementType)
169613Di2015UniqueSeparatorICollection
169613Di2015UniqueSeparatorS
169613Di2015UniqueSeparatorT
169613Di2015UniqueSeparatorS[]
169666Di2015UniqueSeparatorApplication.AddMessageFilter(myFilterClassInstance);Di2015NewLine
169666Di2015UniqueSeparatorpublic class MyFilterClass : IMessageFilterDi2015NewLine{Di2015NewLine    public bool PreFilterMessage(ref Message m)Di2015NewLine    {Di2015NewLine        if (m.Msg == WM_MOUSEMOVE)Di2015NewLine            // Check if mouse is over my picture box!Di2015NewLineDi2015NewLine        return false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
169893Di2015UniqueSeparator        private void SaveToImage(Word.InlineShape picShape, string filePath)Di2015NewLine    {Di2015NewLine        picShape.Select();Di2015NewLine        theApp.Selection.CopyAsPicture();Di2015NewLine        IDataObject data = Clipboard.GetDataObject();Di2015NewLine        if (data.GetDataPresent(typeof(Bitmap)))Di2015NewLine        {Di2015NewLine            Bitmap image = (Bitmap)data.GetData(typeof(Bitmap));Di2015NewLine            image.Save(filePath);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
169958Di2015UniqueSeparatorSize 1000, Repeat 1000Di2015NewLine    int[,] set: 3460Di2015NewLine    int[,] get: 4036 (chk=1304808064)Di2015NewLine    int[][] set: 2441Di2015NewLine    int[][] get: 1283 (chk=1304808064)Di2015NewLine
169958Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Diagnostics;Di2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Console.WriteLine("First is just for JIT...");Di2015NewLine        Test(10,10);Di2015NewLine        Console.WriteLine("Real numbers...");Di2015NewLine        Test(1000,1000);Di2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Test(int size, int repeat)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Size {0}, Repeat {1}", size, repeat);Di2015NewLine        int[,] rect = new int[size, size];Di2015NewLine        int[][] jagged = new int[size][];Di2015NewLine        for (int i = 0; i < size; i++)Di2015NewLine        { // don't cound this in the metrics...Di2015NewLine            jagged[i] = new int[size];Di2015NewLine        }Di2015NewLine        Stopwatch watch = Stopwatch.StartNew();Di2015NewLine        for (int cycle = 0; cycle < repeat; cycle++)Di2015NewLine        {Di2015NewLine            for (int i = 0; i < size; i++)Di2015NewLine            {Di2015NewLine                for (int j = 0; j < size; j++)Di2015NewLine                {Di2015NewLine                    rect[i, j] = i * j;Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        watch.Stop();Di2015NewLine        Console.WriteLine("\\tint[,] set: " + watch.ElapsedMilliseconds);Di2015NewLineDi2015NewLine        int sum = 0;Di2015NewLine        watch = Stopwatch.StartNew();Di2015NewLine        for (int cycle = 0; cycle < repeat; cycle++)Di2015NewLine        {Di2015NewLine            for (int i = 0; i < size; i++)Di2015NewLine            {Di2015NewLine                for (int j = 0; j < size; j++)Di2015NewLine                {Di2015NewLine                    sum += rect[i, j];Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        watch.Stop();Di2015NewLine        Console.WriteLine("\\tint[,] get: {0} (chk={1})", watch.ElapsedMilliseconds, sum);Di2015NewLineDi2015NewLine        watch = Stopwatch.StartNew();Di2015NewLine        for (int cycle = 0; cycle < repeat; cycle++)Di2015NewLine        {Di2015NewLine            for (int i = 0; i < size; i++)Di2015NewLine            {Di2015NewLine                for (int j = 0; j < size; j++)Di2015NewLine                {Di2015NewLine                    jagged[i][j] = i * j;Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        watch.Stop();Di2015NewLine        Console.WriteLine("\\tint[][] set: " + watch.ElapsedMilliseconds);Di2015NewLineDi2015NewLine        sum = 0;Di2015NewLine        watch = Stopwatch.StartNew();Di2015NewLine        for (int cycle = 0; cycle < repeat; cycle++)Di2015NewLine        {Di2015NewLine            for (int i = 0; i < size; i++)Di2015NewLine            {Di2015NewLine                for (int j = 0; j < size; j++)Di2015NewLine                {Di2015NewLine                    sum += jagged[i][j];Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        watch.Stop();Di2015NewLine        Console.WriteLine("\\tint[][] get: {0} (chk={1})", watch.ElapsedMilliseconds, sum);Di2015NewLine    }Di2015NewLine}Di2015NewLine
170040Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Threading;Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        ReaderWriterLockSlim sync = new ReaderWriterLockSlim();Di2015NewLineDi2015NewLine        using (sync.Read())Di2015NewLine        {Di2015NewLine           // etc    Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLinepublic static class ReaderWriterExtDi2015NewLine{Di2015NewLine    sealed class ReadLockToken : IDisposableDi2015NewLine    {Di2015NewLine        private ReaderWriterLockSlim sync;Di2015NewLine        public ReadLockToken(ReaderWriterLockSlim sync)Di2015NewLine        {Di2015NewLine            this.sync = sync;Di2015NewLine            sync.EnterReadLock();Di2015NewLine        }Di2015NewLine        public void Dispose()Di2015NewLine        {Di2015NewLine            if (sync != null)Di2015NewLine            {Di2015NewLine                sync.ExitReadLock();Di2015NewLine                sync = null;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public static IDisposable Read(this ReaderWriterLockSlim obj)Di2015NewLine    {Di2015NewLine        return new ReadLockToken(obj);Di2015NewLine    }Di2015NewLine}Di2015NewLine
170094Di2015UniqueSeparatorpublic bool TryEnter(object lockObject, Action work) Di2015NewLine{Di2015NewLine    if (Monitor.TryEnter(lockObject)) Di2015NewLine    {Di2015NewLine       try Di2015NewLine       {Di2015NewLine          work();Di2015NewLine       }Di2015NewLine       finally Di2015NewLine       {Di2015NewLine           Monitor.Exit(lockObject);Di2015NewLine       }        Di2015NewLine       return true;Di2015NewLine     }Di2015NewLineDi2015NewLine     return false;Di2015NewLine}Di2015NewLine
170279Di2015UniqueSeparatorvar control = DropDownControl.Create(name, dictionary);Di2015NewLine
170279Di2015UniqueSeparatorpublic static class DropDownControlDi2015NewLine{Di2015NewLine    public static DropDownControl<KeyValuePair<TKey,TValue>, TKey, TValue>Di2015NewLine            Create<TKey,TValue>(IDictionary<TKey, TValue> value, string name)Di2015NewLine    where TKey : IComparableDi2015NewLine    {Di2015NewLine        return new DropDownControl<KeyValuePair<TKey, TValue>, TKey, TValue>Di2015NewLine            (name, value, pair => pair.Key, pair => pair.Value,Di2015NewLine            key => value.ContainsKey(key)Di2015NewLine        );Di2015NewLine    }Di2015NewLine}Di2015NewLine
170279Di2015UniqueSeparatorpublic class DropDownControl<TKey, TValue> :Di2015NewLine    DropDownControl<KeyValuePair<TKey, TValue>, TKey, TValue>Di2015NewLine    where TKey : IComparableDi2015NewLine{Di2015NewLine    public DropDownControl(IDictionary<TKey, TValue> lookup, string name)Di2015NewLine        : base(name, lookup, pair => pair.Key, pair => pair.Value,Di2015NewLine            key => lookup.ContainsKey(key)) { }Di2015NewLine}Di2015NewLine
170463Di2015UniqueSeparatorusing (SqlConnection conn = new SqlConnection(connection))Di2015NewLine{Di2015NewLine    SqlDataAdapter adapter = new SqlDataAdapter();Di2015NewLine    adapter.SelectCommand = new SqlCommand(query, conn);Di2015NewLine    adapter.Fill(dataset);Di2015NewLine    return dataset;Di2015NewLine}Di2015NewLine
170731Di2015UniqueSeparatorpublic static T SafeConvert<T>(string s, T defaultValue)Di2015NewLine{Di2015NewLine\if ( string.IsNullOrEmpty(s) )Di2015NewLine\\return defaultValue;Di2015NewLine\return (T)Convert.ChangeType(s, typeof(T));Di2015NewLine}Di2015NewLine
170731Di2015UniqueSeparatorSafeConvert(null, 0.0) == 0.0;Di2015NewLineSafeConvert("", 0.0) == 0.0;Di2015NewLineSafeConvert("0", 0.0) == 0.0;Di2015NewLine
170731Di2015UniqueSeparator0
170731Di2015UniqueSeparatorIn32
170731Di2015UniqueSeparator0L
170731Di2015UniqueSeparatorInt64
170955Di2015UniqueSeparatorpublic class LowercaseConstraint : IRouteConstraintDi2015NewLine{Di2015NewLine    public bool Match(HttpContextBase httpContext, Route route,Di2015NewLine            string parameterName, RouteValueDictionary values,Di2015NewLine            RouteDirection routeDirection)Di2015NewLine    {Di2015NewLine        string value = (string)values[parameterName];Di2015NewLineDi2015NewLine        return Equals(value, value.ToLower());Di2015NewLine    }Di2015NewLine
170955Di2015UniqueSeparatorpublic static void RegisterRoutes(RouteCollection routes)Di2015NewLine{Di2015NewLine    routes.IgnoreRoute("{resource}.axd/{*pathInfo}");Di2015NewLineDi2015NewLine    routes.MapRoute(Di2015NewLine        "Default",                                              // Route nameDi2015NewLine        "{controller}/{action}/{id}",                           // URL with parametersDi2015NewLine        new { controller = "home", action = "index", id = "" },Di2015NewLine        new { controller = new LowercaseConstraint(), action = new LowercaseConstraint() }Di2015NewLine    );Di2015NewLine}Di2015NewLine
171337Di2015UniqueSeparatorInternalsVisibleTo
171488Di2015UniqueSeparatorSettingsProvider
171488Di2015UniqueSeparatorSettings
171488Di2015UniqueSeparator[SettingsProvider(typeof(CustomSettingsProvider))]Di2015NewLineinternal sealed partial class Settings { Di2015NewLine   ...Di2015NewLine}Di2015NewLine
171668Di2015UniqueSeparator   public T Evaluate<T>(T x, T y) {Di2015NewLine      switch (Operation)Di2015NewLine      {Di2015NewLine        case BinaryOp.Add:Di2015NewLine            return Operator.Add(x, y);Di2015NewLine        case BinaryOp.Subtract:Di2015NewLine            return Operator.Subtract(x, y);Di2015NewLine     ... etcDi2015NewLine
171780Di2015UniqueSeparatorC:\\drm_music
171780Di2015UniqueSeparatorimport os, shutilDi2015NewLineDi2015NewLinedef move_drm_files(music_folder):Di2015NewLine    all_songs = []Di2015NewLine    good_filetypes = ['mp3', 'm4a', 'ogg', 'flv', 'wma']Di2015NewLine    for root, dirs, files in os.walk(music_folder):Di2015NewLine        for name in files:Di2015NewLine    \    full_name = os.path.join(root, name)Di2015NewLine    \    all_songs.append(full_name)Di2015NewLine    os.mkdir('/drm_music')Di2015NewLine    for song in all_songs:Di2015NewLine    \if song[-3:] not in good_filetypes:Di2015NewLine    \\shutil.move(song, '/drm_music')Di2015NewLine
171780Di2015UniqueSeparatorpython -i move_drm.py
171780Di2015UniqueSeparatormove_drm.py
171780Di2015UniqueSeparatormove_drm_files('/users/alienfluid/music')
171780Di2015UniqueSeparatordef sort_drm(drm_folder, all_songs=[]):Di2015NewLine    os.mkdir('/drm_collection')Di2015NewLine    known_types = []Di2015NewLine    for root, dirs, files in os.walk(drm_folder):Di2015NewLine    \for name in files:Di2015NewLine    \\full_name = os.path.join(root, name)Di2015NewLine    \\all_songs.append(full_name)Di2015NewLine    for item in all_songs:Di2015NewLine    \if item[-3:] not in known_types:Di2015NewLine    \\known_types.append(item[-3:])Di2015NewLine    for item in known_types:Di2015NewLine    \os.mkdir('/drm_collection/'+item)Di2015NewLine    for item in all_songs:Di2015NewLine    \shutil.copy2(item, '/drm_collection/'+item[-3:])Di2015NewLine
171780Di2015UniqueSeparatorC:\\drm_collection
171780Di2015UniqueSeparatorsort_drm('/drm_music')
171974Di2015UniqueSeparatorusing System.Diagnostics;Di2015NewLine// Get call stackDi2015NewLineStackTrace stackTrace = new StackTrace();Di2015NewLineDi2015NewLine// Get calling method nameDi2015NewLineConsole.WriteLine(stackTrace.GetFrame(1).GetMethod().Name);Di2015NewLine
172135Di2015UniqueSeparator class Response<T>Di2015NewLine {Di2015NewLine    public ResponseData<T>[] responseData = new ResponseData<T>[0];Di2015NewLine    public HttpStatusCode responseStatus;Di2015NewLine    public object responseDetails;Di2015NewLine }Di2015NewLineDi2015NewLine public class ResponseData<TInternal> {Di2015NewLine    public TInternal responseData;Di2015NewLine    public HttpStatusCode responseStatus;Di2015NewLine    public object responseDetails;Di2015NewLine }Di2015NewLineDi2015NewLine public class TranslatedTextDi2015NewLine {Di2015NewLine    public string translatedText;Di2015NewLine }Di2015NewLineDi2015NewLine [Test]Di2015NewLine public void Sample()Di2015NewLine {Di2015NewLine    var input = @"Di2015NewLine       { Di2015NewLine       ""responseData"": [{""responseData"": {""translatedText"" : ""elefante"" },          ""responseDetails"":null, ""responseStatus"":200} , {""responseData"": {           ""translatedText"":""Burro"" }, ""responseDetails"":null, ""responseStatus"":200}], Di2015NewLine         ""responseDetails"" : null, ""responseStatus"": 200}Di2015NewLine        ";Di2015NewLineDi2015NewLine     var json = new JavaScriptSerializer();Di2015NewLine     var response = json.Deserialize<Response<TranslatedText>>(input);Di2015NewLine     Assert.AreEqual(response.responseData[0].responseData.translatedText,"elefante");Di2015NewLine     Assert.AreEqual(response.responseStatus,HttpStatusCode.OK);Di2015NewLine
172369Di2015UniqueSeparatorinterface IFeet {Di2015NewLine   void WashFeet();Di2015NewLine}Di2015NewLineDi2015NewLineclass FeetAdapter : IFeet {Di2015NewLine   private PigFeet.Feet _pigFeet;Di2015NewLine   private HorseFeet.Feet _horseFeet;Di2015NewLineDi2015NewLine   private FeetAdapter(PigFeet.Feet pigFeet) {Di2015NewLine      _pigFeet = pigFeet;Di2015NewLine   }Di2015NewLineDi2015NewLine   private FeetAdapter(HorseFeet.Feet horseFeet) {Di2015NewLine      _horseFeet = horseFeet;Di2015NewLine   }Di2015NewLineDi2015NewLine   public void WashFeet() {Di2015NewLine      if (_pigFeet != null) {Di2015NewLine         _pigFeet.WashFeet();Di2015NewLine      } else {Di2015NewLine         _horseFeet.WashFeet();Di2015NewLine      }Di2015NewLine   }Di2015NewLineDi2015NewLine   public static FeetAdapter Create(AnimalType animalType) {Di2015NewLine      switch (animalType) {Di2015NewLine         case AnimalType.Pig:Di2015NewLine            return new FeetAdapter(new PigFeet.Feet());Di2015NewLine         case AnimalType.Horse:Di2015NewLine            return new FeetAdapter(new HorseFeet.Feet());Di2015NewLine      }Di2015NewLine   }Di2015NewLine}Di2015NewLine
172575Di2015UniqueSeparatorusing System;Di2015NewLineusing System.IO;Di2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        string path = ""; // TODODi2015NewLine        ApplyAllFiles(path, ProcessFile);Di2015NewLine    }Di2015NewLine    static void ProcessFile(string path) {/* ... */}Di2015NewLine    static void ApplyAllFiles(string folder, Action<string> fileAction)Di2015NewLine    {Di2015NewLine        foreach (string file in Directory.GetFiles(folder))Di2015NewLine        {Di2015NewLine            fileAction(file);Di2015NewLine        }Di2015NewLine        foreach (string subDir in Directory.GetDirectories(folder))Di2015NewLine        {Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                ApplyAllFiles(subDir, fileAction);Di2015NewLine            }Di2015NewLine            catchDi2015NewLine            {Di2015NewLine                // swallow, log, whateverDi2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
172629Di2015UniqueSeparatorforeach
172629Di2015UniqueSeparatorDictionary<int, string> employees = new Dictionary<int, string>Di2015NewLine{Di2015NewLine    { 1, "Bob" },Di2015NewLine    { 2, "Alice" },Di2015NewLine    { 3, "Fred" },Di2015NewLine};Di2015NewLineDi2015NewLine// standard iterationDi2015NewLineforeach (var pair in employees)Di2015NewLine    Console.WriteLine("ID: {0}, Name: {1}", pair.Key, pair.Value);Di2015NewLineDi2015NewLine// alias Key/Value as ID/NameDi2015NewLineforeach (var emp in employees.Select(p => new { ID = p.Key, Name = p.Value }))Di2015NewLine    Console.WriteLine("ID: {0}, Name: {1}", emp.ID, emp.Name);Di2015NewLine
172629Di2015UniqueSeparatorforeach
172629Di2015UniqueSeparatorID
172629Di2015UniqueSeparatorName
172639Di2015UniqueSeparatorint i = (int)(object)this.value;Di2015NewLinei++;Di2015NewLinethis.value = (T)(object)i;Di2015NewLine
172639Di2015UniqueSeparatorthis.value = Operator.AddAlternative(this.value, 1);Di2015NewLine
172639Di2015UniqueSeparatorthis.value = Operator.AddAlternative<T,int>(this.value, 1);Di2015NewLine
172845Di2015UniqueSeparator// taken from http://sqlite.phxsoftware.com/forums/p/348/1457.aspx#1457Di2015NewLine[SQLiteFunction(Name = "REGEXP", Arguments = 2, FuncType = FunctionType.Scalar)]Di2015NewLineclass MyRegEx : SQLiteFunctionDi2015NewLine{Di2015NewLine   public override object Invoke(object[] args)Di2015NewLine   {Di2015NewLine      return System.Text.RegularExpressions.Regex.IsMatch(Convert.ToString(args[1]),Convert.ToString(args[0]));Di2015NewLine   }Di2015NewLine}Di2015NewLineDi2015NewLine// example SQL:  SELECT * FROM Foo WHERE Foo.Name REGEXP '$bar'Di2015NewLine
173114Di2015UniqueSeparatorFunc<..>
173114Di2015UniqueSeparatorExpression<Func<..>>
173333Di2015UniqueSeparatorusing
173375Di2015UniqueSeparatorDriver={SQL Native Client};Server=.\\SQLExpress;AttachDbFilename=c:\\asd\\qwe\\mydbfile.mdf; Database=dbname;Trusted_Connection=Yes;Di2015NewLine
173800Di2015UniqueSeparatorprotected override CreateParams CreateParamsDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        CreateParams createParams = base.CreateParams;Di2015NewLine        createParams.ExStyle |= 0x00000020; // WS_EX_TRANSPARENTDi2015NewLineDi2015NewLine        return createParams;Di2015NewLine    }Di2015NewLine}Di2015NewLine
173994Di2015UniqueSeparatorstring user = "fred";Di2015NewLineSomeMethodThatWantsADocument(user);Di2015NewLine
174223Di2015UniqueSeparatorswitch
174223Di2015UniqueSeparatorcase
174223Di2015UniqueSeparatorcase
174223Di2015UniqueSeparatorcase 0
174223Di2015UniqueSeparatorgoto case
174223Di2015UniqueSeparatorcase 1
174223Di2015UniqueSeparatorgoto default
174223Di2015UniqueSeparatorcase 2
174223Di2015UniqueSeparatorswitch (/*...*/) {Di2015NewLine    case 0: // shares the exact same code as case 1Di2015NewLine    case 1:Di2015NewLine        // do somethingDi2015NewLine        goto case 2;Di2015NewLine    case 2:Di2015NewLine        // do something elseDi2015NewLine        goto default;Di2015NewLine    default:Di2015NewLine        // do something entirely differentDi2015NewLine        break;Di2015NewLine}Di2015NewLine
174257Di2015UniqueSeparatorusing MyButton = MyPackage.MyClass.Button;Di2015NewLine
174928Di2015UniqueSeparatortype Line =Di2015NewLine    | Whitespace = 0Di2015NewLine    | Comment = 1Di2015NewLine    | Code = 2Di2015NewLinelet Classify (l:string) =         Di2015NewLine    let s = l.TrimStart([|' ';'\\t'|])Di2015NewLine    match s with        Di2015NewLine    | "" | "{" | "}" -> Line.WhitespaceDi2015NewLine    | _ when s.StartsWith("#") -> Line.WhitespaceDi2015NewLine    | _ when s.StartsWith("//") -> Line.CommentDi2015NewLine    | _ -> Line.CodeDi2015NewLinelet Loc (arr:list<_>) =     Di2015NewLine    let sums = Array.create 3 0Di2015NewLine    arr Di2015NewLine    |> List.iter (fun line -> Di2015NewLine        let i = Classify line |> intDi2015NewLine        sums.[i] <- sums.[i] + 1)Di2015NewLine    sumsDi2015NewLine
175050Di2015UniqueSeparatorPerson
175050Di2015UniqueSeparatorFirstName
175050Di2015UniqueSeparatorLastName
175050Di2015UniqueSeparatorINotifyPropertyChanged
175050Di2015UniqueSeparatorusing System.ComponentModel;Di2015NewLineDi2015NewLineclass Person : INotifyPropertyChanged {Di2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine    string _firstname;Di2015NewLine    public string FirstName {Di2015NewLine        get {Di2015NewLine            return _firstname;Di2015NewLine        }Di2015NewLine        set {Di2015NewLine            _firstname = value;Di2015NewLine            onPropertyChanged( "FirstName", "FullName" );Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    string _lastname;Di2015NewLine    public string LastName {Di2015NewLine        get {Di2015NewLine            return _lastname;Di2015NewLine        }Di2015NewLine        set {Di2015NewLine            _lastname = value;Di2015NewLine            onPropertyChanged( "LastName", "FullName" );Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public string FullName {Di2015NewLine        get {Di2015NewLine            return _firstname + " " + _lastname;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    void onPropertyChanged( params string[] propertyNames ) {Di2015NewLine        PropertyChangedEventHandler handler = PropertyChanged;Di2015NewLineDi2015NewLine        if ( handler != null ) {Di2015NewLine            foreach ( var pn in propertyNames ) {Di2015NewLine                handler( this, new PropertyChangedEventArgs( pn ) );Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
175050Di2015UniqueSeparatorPath=FirstName
175050Di2015UniqueSeparatorTextBlocks
175050Di2015UniqueSeparatorPerson
175050Di2015UniqueSeparatorDependencyObject
175050Di2015UniqueSeparatorFirstName
175050Di2015UniqueSeparatorLastName
175050Di2015UniqueSeparatorDependencyProperties
175050Di2015UniqueSeparatorFullName
175050Di2015UniqueSeparatorPerson
175050Di2015UniqueSeparatorTitle
175050Di2015UniqueSeparatorPerson
175050Di2015UniqueSeparatorWindow
175050Di2015UniqueSeparatorDataContext
175050Di2015UniqueSeparatorTitle="{Binding Path=FullName, Mode=OneWay}"Di2015NewLine
175050Di2015UniqueSeparatorTextBox
175050Di2015UniqueSeparatorTextBox
175050Di2015UniqueSeparator<TextBox Name="FirstNameEdit"Di2015NewLine    Text="{Binding Path=FirstName, UpdateSourceTrigger=PropertyChanged}" />Di2015NewLine
175050Di2015UniqueSeparatorFullName
175050Di2015UniqueSeparatorINotifyPropertyChanged
175050Di2015UniqueSeparatorPerson
175050Di2015UniqueSeparatorWindow
175050Di2015UniqueSeparatorWindow
175050Di2015UniqueSeparatorPropertyChanged
175050Di2015UniqueSeparatorWindow
175050Di2015UniqueSeparatorPropertyChanged
175050Di2015UniqueSeparatorPerson
175050Di2015UniqueSeparatorInitializeComponent()
175050Di2015UniqueSeparatorPropertyChanged
175050Di2015UniqueSeparatorPerson
175050Di2015UniqueSeparatornull
175050Di2015UniqueSeparatorInitializeComponent()
175050Di2015UniqueSeparatorPerson
175475Di2015UniqueSeparatorrunat="server"
175475Di2015UniqueSeparator<div id="formSpinner" runat="server">Di2015NewLine    <img src="images/spinner.gif">Di2015NewLine    <p>Saving...</p>Di2015NewLine</div>Di2015NewLine
175475Di2015UniqueSeparatorformSpinner.Attributes["class"] = "classOfYourChoice";Di2015NewLine
175475Di2015UniqueSeparatorasp:Panel
175475Di2015UniqueSeparatordiv
175475Di2015UniqueSeparator<asp:Panel id="formSpinner" runat="server">Di2015NewLine    <img src="images/spinner.gif">Di2015NewLine    <p>Saving...</p>Di2015NewLine</asp:Panel>Di2015NewLine
175475Di2015UniqueSeparatorformSpinner.CssClass = "classOfYourChoice";Di2015NewLine
175855Di2015UniqueSeparatorwsdl.exe
175855Di2015UniqueSeparatorwsdl.exe /sharetypes http://localhost/MyService1.asmx?wsdl http://localhost/MyService2.asmx?wsdlDi2015NewLine
175855Di2015UniqueSeparator/sharetypes
175870Di2015UniqueSeparatorPanel
175870Di2015UniqueSeparatorTimer
175870Di2015UniqueSeparatorScrollIntoView()
175870Di2015UniqueSeparatorAnimatedScrollPanel
175870Di2015UniqueSeparatorprotected
175870Di2015UniqueSeparatorScrollToControl()
175870Di2015UniqueSeparatorPoint
175870Di2015UniqueSeparatorScrollIntoView
176003Di2015UniqueSeparator<FooterTemplate>Di2015NewLine    <asp:DropDownList ID="ddlOptions"Di2015NewLine             runat="server" Di2015NewLine             AutoPostBack="true" Di2015NewLine             onselectedindexchanged="ddlOptions_SelectedIndexChanged">Di2015NewLine        <asp:ListItem>Option1</asp:ListItem>Di2015NewLine        <asp:ListItem>Option2</asp:ListItem>Di2015NewLine    </asp:DropDownList>Di2015NewLine</FooterTemplate>Di2015NewLine
176003Di2015UniqueSeparatorprotected void ddlOptions_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        //Event Code here.Di2015NewLine    }Di2015NewLine
176291Di2015UniqueSeparatorprivate static String states = "|AL|AK|AS|AZ|AR|CA|CO|CT|DE|DC|FM|FL|GA|GU|HI|ID|IL|IN|IA|KS|KY|LA|ME|MH|MD|MA|MI|MN|MS|MO|MT|NE|NV|NH|NJ|NM|NY|NC|ND|MP|OH|OK|OR|PW|PA|PR|RI|SC|SD|TN|TX|UT|VT|VI|VA|WA|WV|WI|WY|";Di2015NewLineDi2015NewLinepublic static bool isStateAbbreviation (String state)Di2015NewLine{Di2015NewLine  return state.Length == 2 && states.IndexOf( state ) > 0;Di2015NewLine}Di2015NewLine
176734Di2015UniqueSeparatorthis.BackgroundImage = //ImageDi2015NewLinethis.FormBorderStyle = FormBorderStyle.None;Di2015NewLinethis.Width = this.BackgroundImage.Width;Di2015NewLinethis.Height = this.BackgroundImage.Height;Di2015NewLinethis.TransparencyKey = Color.FromArgb(0, 255, 0); //Contrast ColorDi2015NewLine
176807Di2015UniqueSeparatorColumnKey
176807Di2015UniqueSeparatorTable
176807Di2015UniqueSeparatorElement
176807Di2015UniqueSeparatorHasMany
176807Di2015UniqueSeparatorElement
176807Di2015UniqueSeparator[HasMany(typeof(string), Table="ToDoList_Items", Di2015NewLine         ColumnKey = "ListItemID", Element = "Item")]Di2015NewLinepublic IList<string> Items { get; set; }Di2015NewLine
176906Di2015UniqueSeparatorShowDialog()
176938Di2015UniqueSeparatorHttpRequest.CookieContainer
176938Di2015UniqueSeparatorCookie:
176938Di2015UniqueSeparatorSet-Cookie:
177101Di2015UniqueSeparatorobject foo  = (int) 43;Di2015NewLinelong   lFoo = ((IConvertible) foo).ToInt64(null);Di2015NewLine
177169Di2015UniqueSeparator    private static XmlSerializer GetOverridedSerializer()Di2015NewLine    {Di2015NewLine        // set overrides for TestObject elementDi2015NewLine        XmlAttributes attrsTestObject = new XmlAttributes();Di2015NewLine        XmlRootAttribute rootTestObject = new XmlRootAttribute("SomethingElse");Di2015NewLine        attrsTestObject.XmlRoot = rootTestObject;Di2015NewLineDi2015NewLine       // create overriderDi2015NewLine       XmlAttributeOverrides xOver = new XmlAttributeOverrides();Di2015NewLine       xOver.Add(typeof(localhost.TestObject), attrsTestObject);Di2015NewLineDi2015NewLine       XmlSerializer xSer = new XmlSerializer(typeof(localhost.TestObject), xOver);Di2015NewLine       return xSer;Di2015NewLine    }Di2015NewLine
177169Di2015UniqueSeparator        //XmlSerializer xs = new XmlSerializer(typeof(localhost.TestObject));Di2015NewLine        XmlSerializer xs = GetOverridedSerializer();Di2015NewLine
177169Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?><SomethingElse xmlns:xsi="http://www.w3.oDi2015NewLinerg/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" AttribuDi2015NewLineteWorked="true" />Di2015NewLine
177390Di2015UniqueSeparatorApprovalEvents.Sort((lhs, rhs) => (lhs.EventDate.CompareTo(rhs.EventDate)));Di2015NewLine
177561Di2015UniqueSeparatorpublic static class ExtensionsDi2015NewLine{Di2015NewLine    public static void Times(this int count, Action action)Di2015NewLine    {Di2015NewLine        for (int i=0; i < count; i++)Di2015NewLine        {Di2015NewLine             action();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void Times(this int count, Action<int> action)Di2015NewLine    {Di2015NewLine        for (int i=0; i < count; i++)Di2015NewLine        {Di2015NewLine             action(i);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
177561Di2015UniqueSeparator5.Times(() => Console.WriteLine("Hi"));Di2015NewLine5.Times(i => Console.WriteLine("Index: {0}", i));Di2015NewLine
177641Di2015UniqueSeparatorListView
177641Di2015UniqueSeparator<Style TargetType="{x:Type ListView}">Di2015NewLine    <Setter Property="ItemContainerStyle">Di2015NewLine        <Setter.Value>Di2015NewLine            <Style TargetType="ListViewItem">Di2015NewLine                <Setter Property="VerticalContentAlignment" Value="Top"/>Di2015NewLine            </Style>Di2015NewLine        </Setter.Value>Di2015NewLine    </Setter>Di2015NewLine</Style>Di2015NewLine
177647Di2015UniqueSeparatorpublic void ProcessCustomers(IEnumerable<Customer> customers)Di2015NewLine{Di2015NewLine   ... implementation ...Di2015NewLine}Di2015NewLine
177647Di2015UniqueSeparatorprivate IEnumerable<Customer> GetCustomersByCountryCode(IEnumerable<Customer> customers, int countryCode)Di2015NewLine{Di2015NewLine    foreach(Customer c in customers)Di2015NewLine    {Di2015NewLine        if (c.CountryCode == countryCode) yield return c;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine... Di2015NewLineProcessCustomers(GetCustomersByCountryCode(myCustomers, myCountryCode);Di2015NewLine...Di2015NewLine
177851Di2015UniqueSeparator// Random intDi2015NewLineRandom r = new Random();Di2015NewLinereturn r.Next();Di2015NewLineDi2015NewLine// Random GuidDi2015NewLinereturn Guid.NewGuid();Di2015NewLineDi2015NewLine...Di2015NewLine
177851Di2015UniqueSeparatorswitch(typeof(T))Di2015NewLine{Di2015NewLine    case System.Int32:Di2015NewLine        Random r = new Random();Di2015NewLine        return (T)r.Next();Di2015NewLine    case System.Guid:Di2015NewLine        return (T)Guid.NewGuid();Di2015NewLine    ...Di2015NewLine
177851Di2015UniqueSeparatorRandomGenerator.GetData<Guid>();Di2015NewLine...Di2015NewLine
177899Di2015UniqueSeparatorsetup.exe
177899Di2015UniqueSeparatormyAppName.application
177899Di2015UniqueSeparatorMage.exe
178014Di2015UniqueSeparatorDataBinder.
178014Di2015UniqueSeparatorGetPropertyValue(
178014Di2015UniqueSeparatormyObject,"Property"
178014Di2015UniqueSeparator)
178090Di2015UniqueSeparatorstatic string AcceptNotNullObject(object! s)Di2015NewLine{Di2015NewLine    return s.ToString();Di2015NewLine}Di2015NewLine
178162Di2015UniqueSeparatorusing System.ServiceProcess;Di2015NewLineDi2015NewLineServiceController sc = new ServiceController(SERVICENAME);Di2015NewLineDi2015NewLineswitch (sc.Status)Di2015NewLine{Di2015NewLine    case ServiceControllerStatus.Running:Di2015NewLine        return "Running";Di2015NewLine    case ServiceControllerStatus.Stopped:Di2015NewLine        return "Stopped";Di2015NewLine    case ServiceControllerStatus.Paused:Di2015NewLine        return "Paused";Di2015NewLine    case ServiceControllerStatus.StopPending:Di2015NewLine        return "Stopping";Di2015NewLine    case ServiceControllerStatus.StartPending:Di2015NewLine        return "Starting";Di2015NewLine    default:Di2015NewLine        return "Status Changing";Di2015NewLine}Di2015NewLine
178162Di2015UniqueSeparatorsc.Refresh()
178464Di2015UniqueSeparatorthrow;Di2015NewLine
178595Di2015UniqueSeparatorpublic static bool ValidateServerCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)Di2015NewLine{Di2015NewLine    return true;Di2015NewLine}Di2015NewLineDi2015NewLineServicePointManager.ServerCertificateValidationCallback = new RemoteCertificateValidationCallback(ValidateServerCertificate);Di2015NewLine
178677Di2015UniqueSeparatorclass TestClass3 : TestInterfaces.MyInterfaceDi2015NewLine{Di2015NewLineDi2015NewLine    TestInterfaces.MyInterface.MyEnum TestInterfaces.MyInterface.NumberDi2015NewLine    {Di2015NewLine        get { throw new Exception("The method or operation is not implemented."); }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
178677Di2015UniqueSeparatorclass TestClass2 : IMyInterfaceDi2015NewLine{Di2015NewLineDi2015NewLine    MyEnum IMyInterface.NumberDi2015NewLine    {Di2015NewLine        get { throw new Exception("The method or operation is not implemented."); }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
178677Di2015UniqueSeparator.class public interface abstract auto ansi MyInterfaceDi2015NewLine
178677Di2015UniqueSeparator.class auto ansi sealed nested public MyEnumDi2015NewLine    extends [mscorlib]System.EnumDi2015NewLine
178677Di2015UniqueSeparator    .field public static literal valuetype TestInterfaces.MyInterface/MyEnum No = int32(1)Di2015NewLineDi2015NewLine    .field public specialname rtspecialname int32 value__Di2015NewLineDi2015NewLine    .field public static literal valuetype TestInterfaces.MyInterface/MyEnum Yes = int32(0)Di2015NewLineDi2015NewLine}Di2015NewLine
178764Di2015UniqueSeparator//failsDi2015NewLinethrow new FilterXmlParseException("<Filter> element expected", reader);Di2015NewLine
178931Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine\public Form1()Di2015NewLine\{Di2015NewLine\\InitializeComponent();Di2015NewLine\}Di2015NewLineDi2015NewLine\private void button1_Click(object sender, EventArgs e)Di2015NewLine\{Di2015NewLineDi2015NewLine\\Foo f = new Foo();Di2015NewLineDi2015NewLine\\f.BarList = new List<Bar>();Di2015NewLineDi2015NewLine\\f.BarList.Add(new Bar { Property1 = "abc", Property2 = "def" });Di2015NewLineDi2015NewLine\\XmlSerializer ser = new XmlSerializer(typeof(Foo));Di2015NewLineDi2015NewLine\\using (FileStream fs = new FileStream(@"c:\\sertest.xml", FileMode.Create))Di2015NewLine\\{Di2015NewLine\\\ser.Serialize(fs, f);Di2015NewLine\\}Di2015NewLine\}Di2015NewLine}Di2015NewLineDi2015NewLinepublic class FooDi2015NewLine{Di2015NewLine\[XmlArray("BarList"), XmlArrayItem(typeof(Bar), ElementName = "Bar")]Di2015NewLine\public List<Bar> BarList { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLine[XmlRoot("Foo")]Di2015NewLinepublic class BarDi2015NewLine{Di2015NewLine\public string Property1 { get; set; }Di2015NewLine\public string Property2 { get; set; }Di2015NewLine}Di2015NewLine
178931Di2015UniqueSeparator<?xml version="1.0"?>Di2015NewLine<Foo xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">Di2015NewLine  <BarList>Di2015NewLine    <Bar>Di2015NewLine      <Property1>abc</Property1>Di2015NewLine      <Property2>def</Property2>Di2015NewLine    </Bar>Di2015NewLine  </BarList>Di2015NewLine</Foo>Di2015NewLine
179191Di2015UniqueSeparatorXmlDocument xdoc = new XmlDocument();Di2015NewLinexdoc.LoadXml(@"<MyXml><Employee></Employee></MyXml>");Di2015NewLineDi2015NewLineXmlDocumentFragment xfrag = xdoc.CreateDocumentFragment();Di2015NewLinexfrag.InnerXml = @"<Demographic><Age/><DOB/></Demographic>";Di2015NewLineDi2015NewLinexdoc.DocumentElement.FirstChild.AppendChild(xfrag);Di2015NewLine
179323Di2015UniqueSeparatornamespace cs_console_appDi2015NewLine{Di2015NewLine    using System;Di2015NewLine    using System.Runtime.InteropServices;Di2015NewLine    using System.Runtime.InteropServices.ComTypes;Di2015NewLineDi2015NewLine    [ComImport]Di2015NewLine    [Guid("0000000d-0000-0000-C000-000000000046")]Di2015NewLine    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]Di2015NewLine    public interface IEnumSTATSTGDi2015NewLine    {Di2015NewLine        // The user needs to allocate an STATSTG array whose size is celt.Di2015NewLine        [PreserveSig]Di2015NewLine        uint Next(Di2015NewLine            uint celt,Di2015NewLine            [MarshalAs(UnmanagedType.LPArray), Out]Di2015NewLine            System.Runtime.InteropServices.ComTypes.STATSTG[] rgelt,Di2015NewLine            out uint pceltFetchedDi2015NewLine        );Di2015NewLineDi2015NewLine        void Skip(uint celt);Di2015NewLineDi2015NewLine        void Reset();Di2015NewLineDi2015NewLine        [return: MarshalAs(UnmanagedType.Interface)]Di2015NewLine        IEnumSTATSTG Clone();Di2015NewLine    }Di2015NewLineDi2015NewLine    [ComImport]Di2015NewLine    [Guid("0000000b-0000-0000-C000-000000000046")]Di2015NewLine    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]Di2015NewLine    interface IStorageDi2015NewLine    {Di2015NewLine        void CreateStream(Di2015NewLine            /* [string][in] */ string pwcsName,Di2015NewLine            /* [in] */ uint grfMode,Di2015NewLine            /* [in] */ uint reserved1,Di2015NewLine            /* [in] */ uint reserved2,Di2015NewLine            /* [out] */ out IStream ppstm);Di2015NewLineDi2015NewLine        void OpenStream(Di2015NewLine            /* [string][in] */ string pwcsName,Di2015NewLine            /* [unique][in] */ IntPtr reserved1,Di2015NewLine            /* [in] */ uint grfMode,Di2015NewLine            /* [in] */ uint reserved2,Di2015NewLine            /* [out] */ out IStream ppstm);Di2015NewLineDi2015NewLine        void CreateStorage(Di2015NewLine            /* [string][in] */ string pwcsName,Di2015NewLine            /* [in] */ uint grfMode,Di2015NewLine            /* [in] */ uint reserved1,Di2015NewLine            /* [in] */ uint reserved2,Di2015NewLine            /* [out] */ out IStorage ppstg);Di2015NewLineDi2015NewLine        void OpenStorage(Di2015NewLine            /* [string][unique][in] */ string pwcsName,Di2015NewLine            /* [unique][in] */ IStorage pstgPriority,Di2015NewLine            /* [in] */ uint grfMode,Di2015NewLine            /* [unique][in] */ IntPtr snbExclude,Di2015NewLine            /* [in] */ uint reserved,Di2015NewLine            /* [out] */ out IStorage ppstg);Di2015NewLineDi2015NewLine        void CopyTo(Di2015NewLine            /* [in] */ uint ciidExclude,Di2015NewLine            /* [size_is][unique][in] */ Guid rgiidExclude, // should this be an array?Di2015NewLine            /* [unique][in] */ IntPtr snbExclude,Di2015NewLine            /* [unique][in] */ IStorage pstgDest);Di2015NewLineDi2015NewLine        void MoveElementTo(Di2015NewLine            /* [string][in] */ string pwcsName,Di2015NewLine            /* [unique][in] */ IStorage pstgDest,Di2015NewLine            /* [string][in] */ string pwcsNewName,Di2015NewLine            /* [in] */ uint grfFlags);Di2015NewLineDi2015NewLine        void Commit(Di2015NewLine            /* [in] */ uint grfCommitFlags);Di2015NewLineDi2015NewLine        void Revert();Di2015NewLineDi2015NewLine        void EnumElements(Di2015NewLine            /* [in] */ uint reserved1,Di2015NewLine            /* [size_is][unique][in] */ IntPtr reserved2,Di2015NewLine            /* [in] */ uint reserved3,Di2015NewLine            /* [out] */ out IEnumSTATSTG ppenum);Di2015NewLineDi2015NewLine        void DestroyElement(Di2015NewLine            /* [string][in] */ string pwcsName);Di2015NewLineDi2015NewLine        void RenameElement(Di2015NewLine            /* [string][in] */ string pwcsOldName,Di2015NewLine            /* [string][in] */ string pwcsNewName);Di2015NewLineDi2015NewLine        void SetElementTimes(Di2015NewLine            /* [string][unique][in] */ string pwcsName,Di2015NewLine            /* [unique][in] */ System.Runtime.InteropServices.ComTypes.FILETIME pctime,Di2015NewLine            /* [unique][in] */ System.Runtime.InteropServices.ComTypes.FILETIME patime,Di2015NewLine            /* [unique][in] */ System.Runtime.InteropServices.ComTypes.FILETIME pmtime);Di2015NewLineDi2015NewLine        void SetClass(Di2015NewLine            /* [in] */ Guid clsid);Di2015NewLineDi2015NewLine        void SetStateBits(Di2015NewLine            /* [in] */ uint grfStateBits,Di2015NewLine            /* [in] */ uint grfMask);Di2015NewLineDi2015NewLine        void Stat(Di2015NewLine            /* [out] */ out System.Runtime.InteropServices.ComTypes.STATSTG pstatstg,Di2015NewLine            /* [in] */ uint grfStatFlag);Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    [Flags]Di2015NewLine    public enum STGM : intDi2015NewLine    {Di2015NewLine        DIRECT = 0x00000000,Di2015NewLine        TRANSACTED = 0x00010000,Di2015NewLine        SIMPLE = 0x08000000,Di2015NewLine        READ = 0x00000000,Di2015NewLine        WRITE = 0x00000001,Di2015NewLine        READWRITE = 0x00000002,Di2015NewLine        SHARE_DENY_NONE = 0x00000040,Di2015NewLine        SHARE_DENY_READ = 0x00000030,Di2015NewLine        SHARE_DENY_WRITE = 0x00000020,Di2015NewLine        SHARE_EXCLUSIVE = 0x00000010,Di2015NewLine        PRIORITY = 0x00040000,Di2015NewLine        DELETEONRELEASE = 0x04000000,Di2015NewLine        NOSCRATCH = 0x00100000,Di2015NewLine        CREATE = 0x00001000,Di2015NewLine        CONVERT = 0x00020000,Di2015NewLine        FAILIFTHERE = 0x00000000,Di2015NewLine        NOSNAPSHOT = 0x00200000,Di2015NewLine        DIRECT_SWMR = 0x00400000,Di2015NewLine    }Di2015NewLineDi2015NewLine    public enum STATFLAG : uintDi2015NewLine    {Di2015NewLine        STATFLAG_DEFAULT = 0,Di2015NewLine        STATFLAG_NONAME = 1,Di2015NewLine        STATFLAG_NOOPEN = 2Di2015NewLine    }Di2015NewLineDi2015NewLine    public enum STGTY : intDi2015NewLine    {Di2015NewLine        STGTY_STORAGE = 1,Di2015NewLine        STGTY_STREAM = 2,Di2015NewLine        STGTY_LOCKBYTES = 3,Di2015NewLine        STGTY_PROPERTY = 4Di2015NewLine    }Di2015NewLineDi2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        [DllImport("ole32.dll")]Di2015NewLine        private static extern int StgIsStorageFile(Di2015NewLine            [MarshalAs(UnmanagedType.LPWStr)] string pwcsName);Di2015NewLineDi2015NewLine        [DllImport("ole32.dll")]Di2015NewLine        static extern int StgOpenStorage(Di2015NewLine            [MarshalAs(UnmanagedType.LPWStr)] string pwcsName,Di2015NewLine            IStorage pstgPriority,Di2015NewLine            STGM grfMode,Di2015NewLine            IntPtr snbExclude,Di2015NewLine            uint reserved,Di2015NewLine            out IStorage ppstgOpen);Di2015NewLineDi2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            string filename = @"f:\\temp\\treta2.msg";Di2015NewLine            if (StgIsStorageFile(filename) == 0)Di2015NewLine            {Di2015NewLine                IStorage storage = null;Di2015NewLine                if (StgOpenStorage(Di2015NewLine                    filename,Di2015NewLine                    null,Di2015NewLine                    STGM.DIRECT | STGM.READ | STGM.SHARE_EXCLUSIVE,Di2015NewLine                    IntPtr.Zero,Di2015NewLine                    0,Di2015NewLine                    out storage) == 0)Di2015NewLine                {Di2015NewLine                    System.Runtime.InteropServices.ComTypes.STATSTG statstg;Di2015NewLine                    storage.Stat(out statstg, (uint) STATFLAG.STATFLAG_DEFAULT);Di2015NewLineDi2015NewLine                    IEnumSTATSTG pIEnumStatStg = null;Di2015NewLine                    storage.EnumElements(0, IntPtr.Zero, 0, out pIEnumStatStg);Di2015NewLineDi2015NewLine                    System.Runtime.InteropServices.ComTypes.STATSTG[] regelt = { statstg };Di2015NewLine                    uint fetched = 0;Di2015NewLine                    uint res = pIEnumStatStg.Next(1, regelt, out fetched);Di2015NewLineDi2015NewLine                    if (res == 0)Di2015NewLine                    {Di2015NewLine                        while (res != 1)Di2015NewLine                        {Di2015NewLine                            string strNode = statstg.pwcsName;Di2015NewLine                            bool bNodeFound = false;Di2015NewLineDi2015NewLine                            Console.WriteLine(strNode);Di2015NewLineDi2015NewLine                            if (strNode == "__substg1.0_0E04001E"Di2015NewLine                                || strNode == "__substg1.0_0E1D001E"Di2015NewLine                                || strNode == "__substg1.0_1000001E"Di2015NewLine                                || strNode == "__substg1.0_1013001E")Di2015NewLine                            {Di2015NewLine                                bNodeFound = true;Di2015NewLine                            }Di2015NewLineDi2015NewLine                            if (bNodeFound)Di2015NewLine                            {Di2015NewLine                                switch (statstg.type)Di2015NewLine                                {Di2015NewLine                                    case (int) STGTY.STGTY_STORAGE:Di2015NewLine                                        {Di2015NewLine                                            IStorage pIChildStorage;Di2015NewLine                                            storage.OpenStorage(statstg.pwcsName,Di2015NewLine                                               null,Di2015NewLine                                               (uint) (STGM.READ | STGM.SHARE_EXCLUSIVE),Di2015NewLine                                               IntPtr.Zero,Di2015NewLine                                               0,Di2015NewLine                                               out pIChildStorage);Di2015NewLine                                        }Di2015NewLine                                        break;Di2015NewLine                                    case (int) STGTY.STGTY_STREAM:Di2015NewLine                                        {Di2015NewLine                                            IStream pIStream;Di2015NewLine                                            storage.OpenStream(statstg.pwcsName,Di2015NewLine                                               IntPtr.Zero,Di2015NewLine                                               (uint)(STGM.READ | STGM.SHARE_EXCLUSIVE),Di2015NewLine                                               0,Di2015NewLine                                               out pIStream);Di2015NewLineDi2015NewLine                                            byte[] data = new byte[255];Di2015NewLineDi2015NewLine                                            pIStream.Read(data, 255, IntPtr.Zero);Di2015NewLine                                        }Di2015NewLine                                        break;Di2015NewLine                                }Di2015NewLine                            }Di2015NewLineDi2015NewLine                            if ((res = pIEnumStatStg.Next(1, regelt, out fetched)) != 1)Di2015NewLine                            {Di2015NewLine                                statstg = regelt[0];Di2015NewLine                            }Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
179462Di2015UniqueSeparatorDataContractSerializer
179462Di2015UniqueSeparator[OnDeserialized]Di2015NewLineprivate void OnDeserialized(StreamingContext c) {}Di2015NewLine
179486Di2015UniqueSeparatorFormatterServices.GetUninitializedObject()
179486Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Reflection;Di2015NewLineusing System.Runtime.Serialization;Di2015NewLineDi2015NewLinenamespace NoConstructorThingyDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main()Di2015NewLine        {Di2015NewLine            // does not call ctorDi2015NewLine            var myClass = (MyClass)FormatterServices.GetUninitializedObject(typeof(MyClass));Di2015NewLineDi2015NewLine            Console.WriteLine(myClass.One); // writes "0", constructor not calledDi2015NewLine            Console.WriteLine(myClass.Two); // writes "0", field initializer not calledDi2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class MyClassDi2015NewLine    {Di2015NewLine        public MyClass()Di2015NewLine        {Di2015NewLine            Console.WriteLine("MyClass ctor called.");Di2015NewLine            One = 1;Di2015NewLine        }Di2015NewLineDi2015NewLine        public int One { get; private set; }Di2015NewLine        public readonly int Two = 2;Di2015NewLine    }Di2015NewLine}Di2015NewLine
179499Di2015UniqueSeparatorSelectedIndexChanged
179499Di2015UniqueSeparatortabControl
179499Di2015UniqueSeparatortabControl1.SelectedIndex
179499Di2015UniqueSeparatortextBox.Focus();
179499Di2015UniqueSeparatorprivate void tabControl1_selectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine   if (tabControl1.SelectedIndex == 1)Di2015NewLine   {Di2015NewLine      textBox1.Focus();Di2015NewLine   }Di2015NewLine}Di2015NewLine
179820Di2015UniqueSeparator<%#FormatFlag(DataBinder.Eval(Container.DataItem, "Do_Not_Estimate_Flag" ))%>Di2015NewLine
179820Di2015UniqueSeparatorprotected string FormatFlag(object doNotEstimateFlag)Di2015NewLine{Di2015NewLine    if (doNotEstimateFlag.ToString() == "N") return "Yes";Di2015NewLine    return "No";Di2015NewLine}Di2015NewLine
179820Di2015UniqueSeparatorSELECTDi2015NewLine   ...Di2015NewLine   CASE WHEN Do_Not_Estimate_Flag = 'N' THEN 'Yes' ELSE 'No' END ESTIMATE_ALLOWED,Di2015NewLine   ...Di2015NewLineFROMDi2015NewLine   ...Di2015NewLine
180332Di2015UniqueSeparatorSaveFileDialog saveFileDialog1 = new SaveFileDialog(); Di2015NewLinesaveFileDialog1.InitialDirectory = Convert.ToString(Environment.SpecialFolder.MyDocuments); Di2015NewLinesaveFileDialog1.Filter = "Your extension here (*.EXT)|*.ext|All Files (*.*)|*.*" ; Di2015NewLinesaveFileDialog1.FilterIndex = 1; Di2015NewLineDi2015NewLineif(saveFileDialog1.ShowDialog() == DialogResult.OK) Di2015NewLine{ Di2015NewLine    Console.WriteLine(saveFileDialog1.FileName);//Do what you want hereDi2015NewLine} Di2015NewLine
180429Di2015UniqueSeparatorclass ActionCommandDi2015NewLine{Di2015NewLine    private readonly Action _action;Di2015NewLineDi2015NewLine    public ActionCommand(Action action)Di2015NewLine    {Di2015NewLine        _action = action;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void Do()Di2015NewLine    {Di2015NewLine        _action();Di2015NewLine    }                   Di2015NewLine};Di2015NewLine
180429Di2015UniqueSeparatorCommand c = new Command((Action)delegate()Di2015NewLine           {Di2015NewLine              // insert code hereDi2015NewLine           });Di2015NewLine
180455Di2015UniqueSeparator        Image myImage = Image.FromFile(@"C:\\temp\\IMG_0325.JPG");Di2015NewLine        PropertyItem propItem = myImage.GetPropertyItem(306);Di2015NewLine        DateTime dtaken;Di2015NewLineDi2015NewLine        //Convert date taken metadata to a DateTime objectDi2015NewLine        string sdate = Encoding.UTF8.GetString(propItem.Value).Trim();Di2015NewLine        string secondhalf = sdate.Substring(sdate.IndexOf(" "), (sdate.Length - sdate.IndexOf(" ")));Di2015NewLine        string firsthalf = sdate.Substring(0, 10);Di2015NewLine        firsthalf = firsthalf.Replace(":", "-");Di2015NewLine        sdate = firsthalf + secondhalf;Di2015NewLine        dtaken = DateTime.Parse(sdate);Di2015NewLine
180467Di2015UniqueSeparatorColumn.AutoSizeMode
180467Di2015UniqueSeparatorColumn.DefaultCellStyle
180467Di2015UniqueSeparatorstatic const int INDENTCOEFF = 5;Di2015NewLineDataGridViewCellStyle cellStyle = new DataGridViewCellStyle();Di2015NewLineDi2015NewLinecellStyle.Padding = Di2015NewLine         new Padding(INDENTCOEFF , 5, INDENTCOEFF , 5); //left,top,right,bottomDi2015NewLineMyColumn.DefaultCellStyle = cellStyle;Di2015NewLineMyColumn.AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;Di2015NewLine
180558Di2015UniqueSeparatorPrivate Sub Example_ControlAdded(ByVal sender As Object, ByVal e As System.Windows.Forms.ControlEventArgs) Handles Me.ControlAddedDi2015NewLineDi2015NewLine    AddHandler e.Control.MouseClick, AddressOf Example_MouseClickDi2015NewLineEnd SubDi2015NewLineDi2015NewLinePrivate Sub Example_MouseClick(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Me.MouseClickDi2015NewLine    MessageBox.Show("Click")Di2015NewLineEnd SubDi2015NewLine
180678Di2015UniqueSeparatorDirectoryEntry directoryEntry = new DirectoryEntry("WinNT://ComputerName" & ",computer", "AdminUN", "AdminPW");Di2015NewLineDirectoryEntry user = directoryEntry.Children.Add("username", "user");Di2015NewLineuser.Invoke("SetPassword", new object[] { "password"});Di2015NewLineser.CommitChanges();Di2015NewLine
180701Di2015UniqueSeparatorProjectDi2015NewLine-ModelsDi2015NewLine-ControllersDi2015NewLine-ViewsDi2015NewLine
180701Di2015UniqueSeparatorProjectDi2015NewLine-ModelsDi2015NewLine-PresentersDi2015NewLine-ViewsDi2015NewLine
180701Di2015UniqueSeparatorProjectDi2015NewLine-ModelsDi2015NewLine--InventoryDi2015NewLine-ControllersDi2015NewLine--InventoryDi2015NewLine---TransactionsController.csDi2015NewLine-ViewsDi2015NewLine--InventoryDi2015NewLine---TransactionsDi2015NewLine----EditTransactionsView.dfmDi2015NewLine
180977Di2015UniqueSeparator[Test]
180977Di2015UniqueSeparatorAssert
180977Di2015UniqueSeparator[Test]Di2015NewLinepublic void MyTest()Di2015NewLine{Di2015NewLine   string msg;Di2015NewLine   bool result = OldTestClass.MyTest(out msg);Di2015NewLine   if (!result)Di2015NewLine   {Di2015NewLine      Console.WriteLine(msg);Di2015NewLine   }Di2015NewLine   Assert.AreEqual(result, true);Di2015NewLine
181190Di2015UniqueSeparatorCatchâ¦When
181190Di2015UniqueSeparatorif
181190Di2015UniqueSeparatorcatch
181190Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    â¦Di2015NewLine}Di2015NewLinecatch (ArgumentNullException e)Di2015NewLine{Di2015NewLine    if ("SAMPLES" == e.ParamName.ToUpper())Di2015NewLine    {Di2015NewLine        â¦ // handle exceptionDi2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        throw;  // condition not fulfilled, let someone else handle the exceptionDi2015NewLine    } Di2015NewLine}Di2015NewLine
181310Di2015UniqueSeparatordecimal? dValue; // default value is nullDi2015NewLine if(decimalValueExists)Di2015NewLine{Di2015NewLine  dValue = <value read from text file>Di2015NewLine}Di2015NewLine
181310Di2015UniqueSeparatorpublic class MyFieldsDi2015NewLine{Di2015NewLine    decimal  req1;Di2015NewLine    decimal? opt1; // optional field 1  Di2015NewLine}Di2015NewLine
181310Di2015UniqueSeparator[WebMethod]Di2015NewLinevoid MyWSMethod(MyFields myFields)Di2015NewLine{/* code here will ultimately call InsertMyFields */}Di2015NewLineDi2015NewLinevoid InsertMyFields(MyFields myFields)Di2015NewLine{Di2015NewLine    using (SqlConnection connection = new SqlConnection(connectionString))Di2015NewLine    {Di2015NewLine    \// Create the command and set its properties.Di2015NewLine    \SqlCommand command = new SqlCommand();Di2015NewLine    \command.Connection = connection;Di2015NewLine    \command.CommandText = "AddMyFields";Di2015NewLine    \command.CommandType = CommandType.StoredProcedure;Di2015NewLineDi2015NewLine    \// Add the required input parameterDi2015NewLine    \SqlParameter parameter1 = new SqlParameter();Di2015NewLine    \parameter1.ParameterName = "@ReqField1";Di2015NewLine    \parameter1.SqlDbType = SqlDbType.NVarChar;Di2015NewLine    \parameter1.Direction = ParameterDirection.Input;Di2015NewLine    \parameter1.Value = myFields.req1;Di2015NewLineDi2015NewLine    \// Add the parameter to the Parameters collection. Di2015NewLine    \command.Parameters.Add(parameter1);Di2015NewLineDi2015NewLine    \// Add the optional parameter and set its properties.Di2015NewLine    \SqlParameter parameter2 = new SqlParameter();Di2015NewLine    \parameter2.ParameterName = "@OptField1";Di2015NewLine    \parameter2.SqlDbType = SqlDbType.NVarChar;Di2015NewLine    \parameter2.Direction = ParameterDirection.Input;Di2015NewLine    \parameter2.Value = myFields.opt1 ?? DBNull.Value; //null coalescing operatorDi2015NewLineDi2015NewLine    \// Add the parameter to the Parameters collection. Di2015NewLine    \command.Parameters.Add(parameter2);Di2015NewLineDi2015NewLine    \//.. rest of the codeDi2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
181404Di2015UniqueSeparatormytest.dllDi2015NewLinemytest.dll.configDi2015NewLinelib.dllDi2015NewLinelib.dll.configDi2015NewLine
181462Di2015UniqueSeparatorpublic class ExceptionEventArgs : EventArgsDi2015NewLine{Di2015NewLine    private readonly Exception error;Di2015NewLineDi2015NewLine    public ExceptionEventArgs(Exception error)Di2015NewLine    {Di2015NewLine         this.error = error;Di2015NewLine    }Di2015NewLineDi2015NewLine    public ErrorDi2015NewLine    {Di2015NewLine         get { return error; }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ComputerDi2015NewLine{Di2015NewLine    public event EventHandler Started = delegate{};Di2015NewLine    public event EventHandler Stopped = delegate{};Di2015NewLine    public event EventHandler Reset = delegate{};Di2015NewLine    public event EventHandler<ExceptionEventArgs> Error = delegate{};Di2015NewLineDi2015NewLine    protected void OnStarted()Di2015NewLine    {Di2015NewLine        Started(this, EventArgs.Empty);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void OnStopped()Di2015NewLine    {Di2015NewLine        Stopped(this, EventArgs.Empty);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void OnReset()Di2015NewLine    {Di2015NewLine        Reset(this, EventArgs.Empty);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void OnError(Exception e)Di2015NewLine    {Di2015NewLine        Error(this, new ExceptionEventArgs(e));Di2015NewLine    }Di2015NewLine}Di2015NewLine
181462Di2015UniqueSeparatorsomeComputer.Started += StartEventHandler; // A methodDi2015NewLinesomeComputer.Stopped += delegate(object o, EventArgs e)Di2015NewLine{ Di2015NewLine    Console.WriteLine("{0} has started", o);Di2015NewLine};Di2015NewLinesomeComputer.Reset += (o, e) => Console.WriteLine("{0} has been reset");Di2015NewLine
181462Di2015UniqueSeparatordelegate{}
181599Di2015UniqueSeparator// Generate a 2048 bit RSA keypairDi2015NewLineRSA keypair = new RSACryptoServiceProvider(2048);Di2015NewLine
181736Di2015UniqueSeparator<compilation defaultLanguage="c#" debug="true" />Di2015NewLine
181863Di2015UniqueSeparatoraccountRepositoryDi2015NewLine    .Expect(r => r.InsertAccount(account))Di2015NewLine    .Callback(() => account.ID = 1);Di2015NewLine
181882Di2015UniqueSeparator(?<!<[^>]*)(regex you want to check: Fred|span)
181882Di2015UniqueSeparator<[^>]*
181882Di2015UniqueSeparatorconst string notInsideBracketsRegex = @"(?<!<[^>]*)";Di2015NewLineconst string highlightPattern = @"<span class=""Highlight"">$0</span>";Di2015NewLineDataBoundLiteralControl litCustomerComments = (DataBoundLiteralControl)e.Row.Cells[CUSTOMERCOMMENTS_COLUMN].Controls[0];Di2015NewLineDi2015NewLine// Turn "term1 term2" into "(term1|term2)"Di2015NewLinestring spaceDelimited = txtTextFilter.Text.Trim();Di2015NewLinestring pipeDelimited = string.Join("|", spaceDelimited.Split(new[] {" "}, StringSplitOptions.RemoveEmptyEntries));Di2015NewLinestring searchPattern = "(" + pipeDelimited + ")";Di2015NewLinesearchPattern = notInsideBracketsRegex + searchPattern;Di2015NewLineDi2015NewLine// Highlight search terms in Customer - Comments columnDi2015NewLinee.Row.Cells[CUSTOMERCOMMENTS_COLUMN].Text = Regex.Replace(litCustomerComments.Text, searchPattern, highlightPattern, RegexOptions.IgnoreCase);Di2015NewLine
181941Di2015UniqueSeparatorAssembly.LoadFrom
181941Di2015UniqueSeparatorAssembly.LoadFile
181941Di2015UniqueSeparatorAppDomain.AssemblyResolve
182474Di2015UniqueSeparatorthis.SetStyle(ControlStyles.UserPaint | ControlStyles.OptimizedDoubleBuffer | Di2015NewLine    ControlStyles.AllPaintingInWmPaint | ControlStyles.SupportsTransparentBackColor,Di2015NewLine    true);Di2015NewLine
182557Di2015UniqueSeparator    for (int i = 0; i < 7; i++)Di2015NewLine    {Di2015NewLineDi2015NewLine        TableCell tCell = new TableCell();Di2015NewLine        TextBox txt = new TextBox();Di2015NewLine        tCell.Controls.Add(txt);Di2015NewLine        tRow.Cells.Add(tCell);Di2015NewLineDi2015NewLine    }Di2015NewLine
182767Di2015UniqueSeparatorforeach (X x in y)
182767Di2015UniqueSeparatorfor (X x : y)
182823Di2015UniqueSeparator        List<string> data = new List<string>()Di2015NewLine        {Di2015NewLine            "One",Di2015NewLine            "Two",Di2015NewLine            "Three"Di2015NewLine        };Di2015NewLineDi2015NewLine        string result =Di2015NewLine            "{ "Di2015NewLine            +Di2015NewLine            string.Join(", ", dataDi2015NewLine              .Select(c => @"""" + c + @""": """ + c + @"""")Di2015NewLine              .ToArray()Di2015NewLine            ) + " }";Di2015NewLine
182924Di2015UniqueSeparatorprivate string GetExcelColumnName(int columnNumber)Di2015NewLine{Di2015NewLine    int dividend = columnNumber;Di2015NewLine    string columnName = String.Empty;Di2015NewLine    int modulo;Di2015NewLineDi2015NewLine    while (dividend > 0)Di2015NewLine    {Di2015NewLine        modulo = (dividend - 1) % 26;Di2015NewLine        columnName = Convert.ToChar(65 + modulo).ToString() + columnName;Di2015NewLine        dividend = (int)((dividend - modulo) / 26);Di2015NewLine    } Di2015NewLineDi2015NewLine    return columnName;Di2015NewLine}Di2015NewLine
182947Di2015UniqueSeparatorMe.ToolStrip1.Dock = System.Windows.Forms.DockStyle.NoneDi2015NewLine
182947Di2015UniqueSeparatorMe.ToolStrip1.AutoSize = FalseDi2015NewLine
182947Di2015UniqueSeparatorMe.ToolStrip1.LayoutStyle = System.Windows.Forms.ToolStripLayoutStyle.FlowDi2015NewLine
182947Di2015UniqueSeparatorMe.ToolStrip1.Size = New System.Drawing.Size(300, 50)Di2015NewLine
183149Di2015UniqueSeparatorusing System;Di2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Console.WriteLine(typeof(Foo).IsSerializable); // shows TrueDi2015NewLine        Console.WriteLine(typeof(Bar).IsSerializable); // shows FalseDi2015NewLine    }Di2015NewLine}Di2015NewLine[Serializable]Di2015NewLineclass Foo {}Di2015NewLineclass Bar : Foo {}Di2015NewLine
183357Di2015UniqueSeparatorus_service.GetUserAttributeDropDown(systemId, "Country")
183357Di2015UniqueSeparatordsCountry.tblDropDownValues
183374Di2015UniqueSeparator<asp:BulletedList runat="server" ID="MyLovelyBulletedList" DisplayMode="LinkButton">Di2015NewLine    <asp:ListItem Text="My Lovely Text 1" />Di2015NewLine    <asp:ListItem Text="My Lovely Text 2" />Di2015NewLine</asp:BulletedList>Di2015NewLine
183374Di2015UniqueSeparatorvar links = document.getElementById('<%= MyLovelyBulletedList.ClientID %>').getElementsByTagName('a');Di2015NewLineDi2015NewLinevar targetLink = links[0];Di2015NewLineDi2015NewLineif (targetLink.fireEvent)Di2015NewLine{Di2015NewLine    // IEDi2015NewLine    targetLink.fireEvent("onclick");Di2015NewLine}Di2015NewLineelse if (targetLink.dispatchEvent)Di2015NewLine{Di2015NewLine    // W3CDi2015NewLine    var evt = document.createEvent("MouseEvents");Di2015NewLineDi2015NewLine    evt.initMouseEvent("click", true, true, window,Di2015NewLine    \0, 0, 0, 0, 0, false, false, false, false, 0, null);Di2015NewLineDi2015NewLine    targetLink.dispatchEvent(evt);Di2015NewLine}Di2015NewLine
183408Di2015UniqueSeparatorAction myDelegate = delegate(){Console.WriteLine("I did it!");};Di2015NewLineDi2015NewLineMyEvent += myDelegate;Di2015NewLineDi2015NewLineDi2015NewLine// .... laterDi2015NewLineDi2015NewLineMyEvent -= myDelegate;Di2015NewLine
183696Di2015UniqueSeparatorHashSet<T>
183804Di2015UniqueSeparatorNorthwindDataContext dc = new NorthwindDataContext();    Di2015NewLinedc.Log = Console.Out;Di2015NewLineDi2015NewLinevar query =    Di2015NewLine    from c in dc.Customers    Di2015NewLine    where !(from o in dc.Orders    Di2015NewLine            select o.CustomerID)    Di2015NewLine           .Contains(c.CustomerID)    Di2015NewLine    select c;Di2015NewLineDi2015NewLineforeach (var c in query) Console.WriteLine( c );Di2015NewLine
183891Di2015UniqueSeparatorEnumerable.Range
183891Di2015UniqueSeparatorList<Car> result = Enumerable.Range(0, Math.Min(makes.Count, models.Count))Di2015NewLine    .Select(i => new Car { Make = makes[i], Model = models[i] }).ToList();Di2015NewLine
183891Di2015UniqueSeparatormakes
183891Di2015UniqueSeparatormodels
183891Di2015UniqueSeparatorList<Car> result = makes.Select((make, i) => new Car { Make = make, Model = models[i] }).ToList();Di2015NewLine
183951Di2015UniqueSeparatorG
183951Di2015UniqueSeparatorDetailElement
183951Di2015UniqueSeparatorwhere G : DetailElement
183951Di2015UniqueSeparatorG
183951Di2015UniqueSeparator(ElementDefinition) generic
183951Di2015UniqueSeparatorG
183951Di2015UniqueSeparatorElementDefinition
183951Di2015UniqueSeparatorDetailElement
183951Di2015UniqueSeparatorElementDefinition
183951Di2015UniqueSeparatoras
183951Di2015UniqueSeparatoras
183951Di2015UniqueSeparatorElementDefinition
183951Di2015UniqueSeparator   interface ISomeInterface {...}Di2015NewLine   class SomeClass {...}Di2015NewLine   class MyClass<T> Di2015NewLine    {Di2015NewLine      void SomeMethod(T t)Di2015NewLine       {Di2015NewLine         ISomeInterface obj1 = (ISomeInterface)t;//CompilesDi2015NewLine         SomeClass      obj2 = (SomeClass)t;     //Does not compileDi2015NewLine       }Di2015NewLine    }Di2015NewLine
183951Di2015UniqueSeparator void SomeMethod<T>(T t) Di2015NewLine  { object temp = t;Di2015NewLine    MyOtherClass obj = (MyOtherClass)temp;  Di2015NewLine  }Di2015NewLine
183951Di2015UniqueSeparatoris
183951Di2015UniqueSeparatoras
183951Di2015UniqueSeparatoris
183951Di2015UniqueSeparatoras
183951Di2015UniqueSeparatorpublic void SomeMethod(T t)Di2015NewLine {Di2015NewLine   if(t is int) {...}Di2015NewLineDi2015NewLine   string str = t as string;Di2015NewLine   if(str != null) {...}Di2015NewLine }Di2015NewLine
184213Di2015UniqueSeparatorReadOnly=False;
184213Di2015UniqueSeparatorProvider=Microsoft.Jet.OLEDB.4.0;Data Source=fifa_ng_db.xls;Mode=ReadWrite;ReadOnly=false;Extended Properties=\\"Excel 8.0;HDR=Yes;IMEX=1\\";Di2015NewLine
184262Di2015UniqueSeparatorprotected override void OnInit(EventArgs e)Di2015NewLine{Di2015NewLine    Page.Init += delegate(object sender, EventArgs e_Init)Di2015NewLine                 {Di2015NewLine                     if (ScriptManager.GetCurrent(Page) == null)Di2015NewLine                     {Di2015NewLine                         ScriptManager sMgr = new ScriptManager();Di2015NewLine                         Page.Form.Controls.AddAt(0, sMgr);Di2015NewLine                     }Di2015NewLine                 };Di2015NewLine    base.OnInit(e);Di2015NewLine}Di2015NewLine
184659Di2015UniqueSeparatorusing (SqlConnection conn = new SqlConnection(connectionString))Di2015NewLine{Di2015NewLine    conn.Open();Di2015NewLine    using (SqlCommand updateCommand = new SqlCommand(update, conn))Di2015NewLine    {Di2015NewLine        string uid = Session["uid"].ToString();Di2015NewLine        updateCommand.Parameters.AddWithValue("@ID", uid);Di2015NewLine        updateCommand.Parameters.AddWithValue("@qnum", i);Di2015NewLine        updateCommand.Parameters.Add("@answer", System.Data.SqlDbType.VarChar);Di2015NewLine        for (int i = tempStart; i <= tempEnd; i++)Di2015NewLine        {Di2015NewLine            updateCommand.Parameters["@answer"] = Request.Form[i.ToString()];Di2015NewLine            updateCommand.ExecuteNonQuery();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
184659Di2015UniqueSeparatorusing (SqlConnection conn = new SqlConnection(connectionString))Di2015NewLine{Di2015NewLine    conn.Open();Di2015NewLine    using (SqlTransaction transaction = conn.BeginTransaction())Di2015NewLine    {Di2015NewLine        using (SqlCommand updateCommand = new SqlCommand(update, conn, transaction))Di2015NewLine        {Di2015NewLine            string uid = Session["uid"].ToString();Di2015NewLine            updateCommand.Parameters.AddWithValue("@ID", uid);Di2015NewLine            updateCommand.Parameters.AddWithValue("@qnum", i);Di2015NewLine            updateCommand.Parameters.Add("@answer", System.Data.SqlDbType.VarChar);Di2015NewLine            for (int i = tempStart; i <= tempEnd; i++)Di2015NewLine            {Di2015NewLine                updateCommand.Parameters["@answer"] = Request.Form[i.ToString()];Di2015NewLine                updateCommand.ExecuteNonQuery();Di2015NewLine            }Di2015NewLine            transaction.Commit();Di2015NewLine        }Di2015NewLine    } // Transaction will be disposed and rolled back here if an exception is thrownDi2015NewLine}Di2015NewLine
184697Di2015UniqueSeparatorif (obj.GetType() == typeof(ClassA)) {}
185146Di2015UniqueSeparatorIEnumerable
185146Di2015UniqueSeparatorvar
185146Di2015UniqueSeparatorList<int>
185146Di2015UniqueSeparatorQSLinq
185146Di2015UniqueSeparatorint[]
185146Di2015UniqueSeparatorList<int>
185146Di2015UniqueSeparator    public static IEnumerable<int> QSLinq(IEnumerable<int> _items)Di2015NewLine    {Di2015NewLine        if (_items.Count() <= 1)Di2015NewLine            return _items;Di2015NewLineDi2015NewLine        var _pivot = _items.First();Di2015NewLineDi2015NewLine        var _less = from _item in _items where _item < _pivot select _item;Di2015NewLine        var _same = from _item in _items where _item == _pivot select _item;Di2015NewLine        var _greater = from _item in _items where _item > _pivot select _item;Di2015NewLineDi2015NewLine        return QSLinq(_less).Concat(QSLinq(_same)).Concat(QSLinq(_greater));Di2015NewLine    }Di2015NewLine
185342Di2015UniqueSeparatorClose()
185342Di2015UniqueSeparatorProcess
185342Di2015UniqueSeparator Process
185342Di2015UniqueSeparatorIDisposable
185342Di2015UniqueSeparatorusing(...)
185342Di2015UniqueSeparatorDispose
185342Di2015UniqueSeparatorClose()
185342Di2015UniqueSeparatorusing (Process p = Process.Start(...))Di2015NewLine{Di2015NewLine  ...Di2015NewLine}Di2015NewLine
185342Di2015UniqueSeparatorIDisposable
185342Di2015UniqueSeparatorDispose
185342Di2015UniqueSeparatorClose
185342Di2015UniqueSeparatorusing(...)
185409Di2015UniqueSeparatorstatic private List<int> a = new List<int>() { 1 };Di2015NewLinestatic private List<int> b = new List<int>() { a[0] };Di2015NewLine
185409Di2015UniqueSeparatorNullReferenceException
185409Di2015UniqueSeparatorstatic private List<int> a = new List<int>() { b[0] };Di2015NewLinestatic private List<int> b = new List<int>() { 1 };Di2015NewLine
185409Di2015UniqueSeparatorpublic class A {Di2015NewLine    public static List<int> a = new List<int>() { B.b[0] };Di2015NewLine}Di2015NewLinepublic class B {Di2015NewLine    public static List<int> b = new List<int>() { A.a[0] };Di2015NewLine}Di2015NewLine
185409Di2015UniqueSeparatortry { Console.WriteLine(B.b); } catch (Exception e) { Console.WriteLine(e.InnerException.Message.); }Di2015NewLinetry { Console.WriteLine(A.a); } catch (Exception e) { Console.WriteLine(e.InnerException.Message); }Di2015NewLinetry { Console.WriteLine(B.b); } catch (Exception e) { Console.WriteLine(e.InnerException.Message); }Di2015NewLine
185409Di2015UniqueSeparatorThe type initializer for 'A' threw an exception.Di2015NewLineObject reference not set to an instance of an object.Di2015NewLineThe type initializer for 'A' threw an exception.Di2015NewLine
185409Di2015UniqueSeparatorB
185409Di2015UniqueSeparatorA
185409Di2015UniqueSeparatora
185409Di2015UniqueSeparatora
185409Di2015UniqueSeparatornull
185409Di2015UniqueSeparatorb
185449Di2015UniqueSeparatorusing(p = Process.Start(command))Di2015NewLine
185449Di2015UniqueSeparatorProcess
185449Di2015UniqueSeparatorIDisposable
185449Di2015UniqueSeparatorClose
185449Di2015UniqueSeparatorDispose
185449Di2015UniqueSeparatorClose
185449Di2015UniqueSeparatorClose
185449Di2015UniqueSeparatorp.Kill()
185449Di2015UniqueSeparatorp.WaitForExit()
185449Di2015UniqueSeparatorWaitHandle.WaitAll
185449Di2015UniqueSeparatorWaitHandle
185449Di2015UniqueSeparatorSystem.Diagnostics.Process
185449Di2015UniqueSeparatorWaitForMultipleObjects
185449Di2015UniqueSeparator[System.Runtime.InteropServices.DllImport( "kernel32.dll" )]Di2015NewLinestatic extern uint WaitForMultipleObjects( uint nCount, IntPtr[] lpHandles, bool bWaitAll, uint dwMilliseconds );Di2015NewLineDi2015NewLinestatic void Main( string[] args )Di2015NewLine{Di2015NewLine\var procs = new Process[] {Di2015NewLine\\Process.Start( @"C:\\Program Files\\ruby\\bin\\ruby.exe", "-e 'sleep 2'" ),Di2015NewLine\\Process.Start( @"C:\\Program Files\\ruby\\bin\\ruby.exe", "-e 'sleep 3'" ),Di2015NewLine\\Process.Start( @"C:\\Program Files\\ruby\\bin\\ruby.exe", "-e 'sleep 4'" ) };Di2015NewLine\// all started asynchronously in the backgroundDi2015NewLineDi2015NewLine\var handles = procs.Select( p => p.Handle ).ToArray();Di2015NewLine\WaitForMultipleObjects( (uint)handles.Length, handles, true, uint.MaxValue ); // uint.maxvalue waits foreverDi2015NewLineDi2015NewLine}Di2015NewLine
185475Di2015UniqueSeparatorSetStyle(ControlStyles.SupportsTransparentBackColor |Di2015NewLine         ControlStyles.Opaque |Di2015NewLine         ControlStyles.UserPaint |Di2015NewLine         ControlStyles.AllPaintingInWmPaint, true);Di2015NewLine
185580Di2015UniqueSeparatordepends.exe
185716Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Text.RegularExpressions;Di2015NewLinepublic class MyClassDi2015NewLine{Di2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine    \string domainUser = Regex.Replace("domain\\\\user",".*\\\\\\\\(.*)", "$1",RegexOptions.None);Di2015NewLine    \Console.WriteLine(domainUser);\Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
186221Di2015UniqueSeparatorItem item;Di2015NewLineif (needNewOne)Di2015NewLine{Di2015NewLine     item = new Item();Di2015NewLine     db.InsertOnSubmit(item);Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine     item = list[i];Di2015NewLine}Di2015NewLine///  build new or modify existing itemDi2015NewLine///   :Di2015NewLinedb.SubmitChanges();Di2015NewLine
186479Di2015UniqueSeparatorBindingOperations.ClearBinding(txtName, TextBox.TextProperty)Di2015NewLine
186479Di2015UniqueSeparatortxtName.SetBinding(TextBox.TextProperty, null);Di2015NewLine
186833Di2015UniqueSeparatorProcess compiler = new Process();Di2015NewLinecompiler.StartInfo.FileName = "csc.exe";Di2015NewLinecompiler.StartInfo.Arguments = "/r:System.dll /out:sample.exe stdstr.cs";Di2015NewLinecompiler.StartInfo.UseShellExecute = false;Di2015NewLinecompiler.StartInfo.RedirectStandardOutput = true;Di2015NewLinecompiler.Start();    Di2015NewLineDi2015NewLineConsole.WriteLine(compiler.StandardOutput.ReadToEnd());Di2015NewLineDi2015NewLinecompiler.WaitForExit();Di2015NewLine
186879Di2015UniqueSeparator<configuration>Di2015NewLine  <runtime>Di2015NewLine    <!-- the following setting prevents the host from closing when an unhandled exception is thrown -->Di2015NewLine    <legacyUnhandledExceptionPolicy enabled="1" />Di2015NewLine  </runtime>Di2015NewLine</configuration>Di2015NewLine
186907Di2015UniqueSeparatorTestRef t = new TestRef();Di2015NewLinet.Something = "Foo";Di2015NewLineDoSomething(ref t);Di2015NewLineDi2015NewLinevoid DoSomething(ref TestRef t)Di2015NewLine{Di2015NewLine  t = new TestRef();Di2015NewLine  t.Something = "Not just a changed t, but a completely different TestRef object";Di2015NewLine}Di2015NewLine
186907Di2015UniqueSeparatorint x = 1;Di2015NewLineChange(ref x);Di2015NewLineDebug.Assert(x == 5);Di2015NewLineWillNotChange(x);Di2015NewLineDebug.Assert(x == 5); // Note: x doesn't become 10Di2015NewLineDi2015NewLinevoid Change(ref int x)Di2015NewLine{Di2015NewLine  x = 5;Di2015NewLine}Di2015NewLineDi2015NewLinevoid WillNotChange(int x)Di2015NewLine{Di2015NewLine  x = 10;Di2015NewLine}Di2015NewLine
186931Di2015UniqueSeparatorHttpWebResponse response = (HttpWebResponse)request.GetResponse();Di2015NewLineif (response == null || response.StatusCode != HttpStatusCode.OK)Di2015NewLine
186973Di2015UniqueSeparatorMyObject obj = new MyObject();Di2015NewLineobj.TheEvent += new EventHandler(MyHandler);Di2015NewLineobj = null;Di2015NewLine// Now you might think that obj is set for collection but it Di2015NewLine// (probably - I don't have access to MS' .NET source code) isn't Di2015NewLine// since we're still listening to events from it.Di2015NewLine
187023Di2015UniqueSeparator<ul id="nav" runat="server">Di2015NewLine  <li class="forcePadding"><img src="css/site-style-images/menu_corner_right.jpg" /></li>               Di2015NewLine  <li id="screenshots"><a href="screenshots.aspx" title="Screenshots">Screenshots</a></li>Di2015NewLine  <li id="future"><a href="future.aspx" title="Future">Future</a></li>Di2015NewLine  <li id="news"><a href="news.aspx" title="News">News</a></li>Di2015NewLine  <li id="download"><a href="download.aspx" title="Download">Download</a></li>Di2015NewLine  <li id="home"><a href="index.aspx" title="Home">Home</a></li>Di2015NewLine  <li class="forcePadding"><img src="css/site-style-images/menu_corner_left.jpg" /></li>Di2015NewLine</ul>Di2015NewLine
187023Di2015UniqueSeparatorforeach(Control ctrl in nav.controls)Di2015NewLine{Di2015NewLine   if(!ctrl is HtmlAnchor)Di2015NewLine   {Di2015NewLine      string url = ((HtmlAnchor)ctrl).Href;Di2015NewLine      if(url == GetCurrentPage())  // <-- you'd need to write thatDi2015NewLine         ctrl.Parent.Attributes.Add("class", "active");Di2015NewLine   }Di2015NewLine}Di2015NewLine
187738Di2015UniqueSeparatorformat
187738Di2015UniqueSeparatorjoin
187793Di2015UniqueSeparatorpi.GetSetMethod(false)
187867Di2015UniqueSeparatornetsh wlan show networks mode=Bssid | findstr "BSSID"Di2015NewLine
187867Di2015UniqueSeparatorarp -a | findstr 192.168.1.254Di2015NewLine
187867Di2015UniqueSeparatorvar wlanClient = new WlanClient();Di2015NewLineforeach (WlanClient.WlanInterface wlanInterface in wlanClient.Interfaces)Di2015NewLine{Di2015NewLine    Wlan.WlanBssEntry[] wlanBssEntries = wlanInterface.GetNetworkBssList();Di2015NewLine    foreach (Wlan.WlanBssEntry wlanBssEntry in wlanBssEntries)Di2015NewLine    {Di2015NewLine        byte[] macAddr = wlanBssEntry.dot11Bssid;Di2015NewLine        var macAddrLen = (uint) macAddr.Length;Di2015NewLine        var str = new string[(int) macAddrLen];Di2015NewLine        for (int i = 0; i < macAddrLen; i++)Di2015NewLine        {Di2015NewLine            str[i] = macAddr[i].ToString("x2");Di2015NewLine        }Di2015NewLine        string mac = string.Join("", str);Di2015NewLine        Console.WriteLine(mac);Di2015NewLine    }Di2015NewLine}Di2015NewLine
187923Di2015UniqueSeparatorList<ManagementObject> managementList = managementObjects.Cast<ManagementObject>().ToList();Di2015NewLine
187923Di2015UniqueSeparatorManagementObjectCollection
187923Di2015UniqueSeparatorIEnumerable
187929Di2015UniqueSeparator[DllImport("iphlpapi.dll", ExactSpelling=true)]Di2015NewLinepublic static extern int SendARP( int destIp, int srcIP, byte[] macAddr, ref uint physicalAddrLen );Di2015NewLine
187929Di2015UniqueSeparatorIPAddress dst = IPAddress.Parse("192.168.2.1"); // the destination IP addressDi2015NewLineDi2015NewLinebyte[] macAddr = new byte[6];Di2015NewLineuint macAddrLen = (uint)macAddr.Length;Di2015NewLineDi2015NewLineif (SendARP(BitConverter.ToInt32(dst.GetAddressBytes(), 0), 0, macAddr, ref macAddrLen) != 0)Di2015NewLine     throw new InvalidOperationException("SendARP failed.");Di2015NewLineDi2015NewLinestring[] str = new string[(int)macAddrLen];Di2015NewLinefor (int i=0; i<macAddrLen; i++)Di2015NewLine     str[i] = macAddr[i].ToString("x2");Di2015NewLineDi2015NewLineConsole.WriteLine(string.Join(":", str));Di2015NewLine
188056Di2015UniqueSeparatorButton btnSave = new Button();    Di2015NewLinebtnSave.ID = "btnSave";    Di2015NewLinebtnSave.Text = "Save";  Di2015NewLinebtnSave.Click += new System.EventHandler(btnSave_Click);Di2015NewLineDi2015NewLineprotected void btnSave_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    //do something when button clicked. Di2015NewLine}Di2015NewLine
188084Di2015UniqueSeparator<node type="forest">Di2015NewLine    <node type="tree">Di2015NewLine        ...Di2015NewLine
188084Di2015UniqueSeparatorHierarchicalDataTemplate
188084Di2015UniqueSeparatorDataTemplate
188084Di2015UniqueSeparatorleaf
188084Di2015UniqueSeparator<Window.Resources>Di2015NewLine    <HierarchicalDataTemplateDi2015NewLine        DataType="forestPad"Di2015NewLine        ItemsSource="{Binding XPath=forest}">Di2015NewLine        <TextBlockDi2015NewLine            Text="a forestpad" />Di2015NewLine    </HierarchicalDataTemplate>Di2015NewLine    <HierarchicalDataTemplateDi2015NewLine        DataType="forest"Di2015NewLine        ItemsSource="{Binding XPath=tree}">Di2015NewLine        <TextBoxDi2015NewLine            Text="{Binding XPath=data}" />Di2015NewLine    </HierarchicalDataTemplate>Di2015NewLine    <HierarchicalDataTemplateDi2015NewLine        DataType="tree"Di2015NewLine        ItemsSource="{Binding XPath=branch}">Di2015NewLine        <TextBoxDi2015NewLine            Text="{Binding XPath=data}" />Di2015NewLine    </HierarchicalDataTemplate>Di2015NewLine    <HierarchicalDataTemplateDi2015NewLine        DataType="branch"Di2015NewLine        ItemsSource="{Binding XPath=leaf}">Di2015NewLine        <TextBoxDi2015NewLine            Text="{Binding XPath=data}" />Di2015NewLine    </HierarchicalDataTemplate>Di2015NewLine    <DataTemplateDi2015NewLine        DataType="leaf">Di2015NewLine        <TextBoxDi2015NewLine            Text="{Binding XPath=data}" />Di2015NewLine    </DataTemplate>Di2015NewLineDi2015NewLine    <XmlDataProviderDi2015NewLine        x:Key="dataxml"Di2015NewLine        XPath="forestPad" Source="D:\\fp.xml">Di2015NewLine    </XmlDataProvider>Di2015NewLine</Window.Resources>Di2015NewLine
188084Di2015UniqueSeparatorSource
188084Di2015UniqueSeparatorXmlDataProvider
188084Di2015UniqueSeparatordp = this.FindResource( "dataxml" ) as XmlDataProvider;Di2015NewLinedp.Source = new Uri( @"D:\\fp.xml" );Di2015NewLine
188084Di2015UniqueSeparatordp.Document.Save( dp.Source.LocalPath );Di2015NewLine
188084Di2015UniqueSeparatorTreeView
188084Di2015UniqueSeparatorName
188084Di2015UniqueSeparatorItemsSource
188084Di2015UniqueSeparatorXmlDataProvider
188084Di2015UniqueSeparator<TreeViewDi2015NewLine    Name="treeview"Di2015NewLine    ItemsSource="{Binding Source={StaticResource dataxml}, XPath=.}">Di2015NewLine
188084Di2015UniqueSeparatorTwoWay
188084Di2015UniqueSeparatorTextBox
188084Di2015UniqueSeparatorTextBox
188084Di2015UniqueSeparatorTreeView
188084Di2015UniqueSeparatorTextBox
188084Di2015UniqueSeparatorTextBlock
188084Di2015UniqueSeparatorTextBox
188084Di2015UniqueSeparatorTreeViewItem
188084Di2015UniqueSeparator<TextBoxDi2015NewLine    DataContext="{Binding ElementName=treeview, Path=SelectedItem}"Di2015NewLine    Text="{Binding XPath=data, UpdateSourceTrigger=PropertyChanged}"/>Di2015NewLine
188084Di2015UniqueSeparatorBinding
188084Di2015UniqueSeparatorPath
188084Di2015UniqueSeparatorXPath
188084Di2015UniqueSeparatorInnerXml
188084Di2015UniqueSeparatorInnerText
188084Di2015UniqueSeparatorXmlDataProvider
188084Di2015UniqueSeparatorXmlDocument
188084Di2015UniqueSeparatorXmlNodes
188084Di2015UniqueSeparatorInnerXml
188084Di2015UniqueSeparatorXmlNode
188084Di2015UniqueSeparatorInnerXml
188084Di2015UniqueSeparatorInnerText
188084Di2015UniqueSeparatorInnerText
188084Di2015UniqueSeparatorXmlDocument doc = dp.Document;Di2015NewLineDi2015NewLineXmlNodeList nodes = doc.SelectNodes( "//data" );Di2015NewLineDi2015NewLineforeach ( XmlNode node in nodes ) {Di2015NewLine    string data = node.InnerText;Di2015NewLine    node.InnerText = "";Di2015NewLine    XmlCDataSection cdata = doc.CreateCDataSection( data );Di2015NewLine    node.AppendChild( cdata );Di2015NewLine}Di2015NewLineDi2015NewLinedoc.Save( dp.Source.LocalPath );Di2015NewLine
188130Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// Non-generic class to produce instances of the generic class,Di2015NewLine/// optionally using type inference.Di2015NewLine/// </summary>Di2015NewLinepublic static class ProjectionEqualityComparerDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Creates an instance of ProjectionEqualityComparer using the specified projection.Di2015NewLine    /// </summary>Di2015NewLine    /// <typeparam name="TSource">Type parameter for the elements to be compared</typeparam>Di2015NewLine    /// <typeparam name="TKey">Type parameter for the keys to be compared,Di2015NewLine    /// after being projected from the elements</typeparam>Di2015NewLine    /// <param name="projection">Projection to use when determining the key of an element</param>Di2015NewLine    /// <returns>A comparer which will compare elements by projecting Di2015NewLine    /// each element to its key, and comparing keys</returns>Di2015NewLine    public static ProjectionEqualityComparer<TSource, TKey> Create<TSource, TKey>(Func<TSource, TKey> projection)Di2015NewLine    {Di2015NewLine        return new ProjectionEqualityComparer<TSource, TKey>(projection);Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Creates an instance of ProjectionEqualityComparer using the specified projection.Di2015NewLine    /// The ignored parameter is solely present to aid type inference.Di2015NewLine    /// </summary>Di2015NewLine    /// <typeparam name="TSource">Type parameter for the elements to be compared</typeparam>Di2015NewLine    /// <typeparam name="TKey">Type parameter for the keys to be compared,Di2015NewLine    /// after being projected from the elements</typeparam>Di2015NewLine    /// <param name="ignored">Value is ignored - type may be used by type inference</param>Di2015NewLine    /// <param name="projection">Projection to use when determining the key of an element</param>Di2015NewLine    /// <returns>A comparer which will compare elements by projectingDi2015NewLine    /// each element to its key, and comparing keys</returns>Di2015NewLine    public static ProjectionEqualityComparer<TSource, TKey> Create<TSource, TKey>Di2015NewLine        (TSource ignored,Di2015NewLine         Func<TSource, TKey> projection)Di2015NewLine    {Di2015NewLine        return new ProjectionEqualityComparer<TSource, TKey>(projection);Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// Class generic in the source only to produce instances of the Di2015NewLine/// doubly generic class, optionally using type inference.Di2015NewLine/// </summary>Di2015NewLinepublic static class ProjectionEqualityComparer<TSource>Di2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Creates an instance of ProjectionEqualityComparer using the specified projection.Di2015NewLine    /// </summary>Di2015NewLine    /// <typeparam name="TKey">Type parameter for the keys to be compared,Di2015NewLine    /// after being projected from the elements</typeparam>Di2015NewLine    /// <param name="projection">Projection to use when determining the key of an element</param>Di2015NewLine    /// <returns>A comparer which will compare elements by projecting each element to its key,Di2015NewLine    /// and comparing keys</returns>        Di2015NewLine    public static ProjectionEqualityComparer<TSource, TKey> Create<TKey>(Func<TSource, TKey> projection)Di2015NewLine    {Di2015NewLine        return new ProjectionEqualityComparer<TSource, TKey>(projection);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine/// Comparer which projects each element of the comparison to a key, and then comparesDi2015NewLine/// those keys using the specified (or default) comparer for the key type.Di2015NewLine/// </summary>Di2015NewLine/// <typeparam name="TSource">Type of elements which this comparer Di2015NewLine/// will be asked to compare</typeparam>Di2015NewLine/// <typeparam name="TKey">Type of the key projectedDi2015NewLine/// from the element</typeparam>Di2015NewLinepublic class ProjectionEqualityComparer<TSource, TKey> : IEqualityComparer<TSource>Di2015NewLine{Di2015NewLine    readonly Func<TSource, TKey> projection;Di2015NewLine    readonly IEqualityComparer<TKey> comparer;Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Creates a new instance using the specified projection, which must not be null.Di2015NewLine    /// The default comparer for the projected type is used.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="projection">Projection to use during comparisons</param>Di2015NewLine    public ProjectionEqualityComparer(Func<TSource, TKey> projection)Di2015NewLine        : this(projection, null)Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Creates a new instance using the specified projection, which must not be null.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="projection">Projection to use during comparisons</param>Di2015NewLine    /// <param name="comparer">The comparer to use on the keys. May be null, inDi2015NewLine    /// which case the default comparer will be used.</param>Di2015NewLine    public ProjectionEqualityComparer(Func<TSource, TKey> projection, IEqualityComparer<TKey> comparer)Di2015NewLine    {Di2015NewLine        if (projection == null)Di2015NewLine        {Di2015NewLine            throw new ArgumentNullException("projection");Di2015NewLine        }Di2015NewLine        this.comparer = comparer ?? EqualityComparer<TKey>.Default;Di2015NewLine        this.projection = projection;Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Compares the two specified values for equality by applying the projectionDi2015NewLine    /// to each value and then using the equality comparer on the resulting keys. NullDi2015NewLine    /// references are never passed to the projection.Di2015NewLine    /// </summary>Di2015NewLine    public bool Equals(TSource x, TSource y)Di2015NewLine    {Di2015NewLine        if (x == null && y == null)Di2015NewLine        {Di2015NewLine            return true;Di2015NewLine        }Di2015NewLine        if (x == null || y == null)Di2015NewLine        {Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine        return comparer.Equals(projection(x), projection(y));Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Produces a hash code for the given value by projecting it andDi2015NewLine    /// then asking the equality comparer to find the hash code ofDi2015NewLine    /// the resulting key.Di2015NewLine    /// </summary>Di2015NewLine    public int GetHashCode(TSource obj)Di2015NewLine    {Di2015NewLine        if (obj == null)Di2015NewLine        {Di2015NewLine            throw new ArgumentNullException("obj");Di2015NewLine        }Di2015NewLine        return comparer.GetHashCode(projection(obj));Di2015NewLine    }Di2015NewLine}Di2015NewLine
188130Di2015UniqueSeparatorvar f3 = f1.Except(f2, ProjectionEqualityComparer<Foo>.Create(a => a.key));Di2015NewLine
188148Di2015UniqueSeparatorFunc
188148Di2015UniqueSeparatorAction
188148Di2015UniqueSeparatorAction<T>
188155Di2015UniqueSeparatorpeople.Sort((x, y) => string.Compare(x.LastName, y.LastName));Di2015NewLine
188155Di2015UniqueSeparatorvar newList = people.OrderBy(x=>x.LastName).ToList(); // ToList optionalDi2015NewLine
188197Di2015UniqueSeparatorArrayList list = new ArrayList();Di2015NewLineMyStruct[] array = new MyStruct[list.Count];Di2015NewLinelist.CopyTo(array);Di2015NewLine
188197Di2015UniqueSeparatorpublic class SomeTypeDi2015NewLine{Di2015NewLine    public string Name {get;set;}Di2015NewLine    public string Content {get;set;}Di2015NewLine}Di2015NewLine
188237Di2015UniqueSeparatorTarget
188237Di2015UniqueSeparatorProperty
188237Di2015UniqueSeparatorItemGroup
188237Di2015UniqueSeparator<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">Di2015NewLine    <PropertyGroup>Di2015NewLine        <ProjectName>TheProject</ProjectName>Di2015NewLine        <ProjectDepthPath>..\\..\\</ProjectDepthPath>Di2015NewLine        <ProjectsLibFolder>..\\..\\lib\\</ProjectsLibFolder>Di2015NewLineDi2015NewLine        <LibFolder>$(ProjectsLibFolder)$(ProjectName)\\$(Configuration)\\</LibFolder>Di2015NewLine    </PropertyGroup>Di2015NewLineDi2015NewLine    <Target Name="DeleteLibFiles">Di2015NewLine        <Delete Files="@(LibFiles-> '$(ProjectDepthPath)$(LibFolder)%(filename)%(extension)')" TreatErrorsAsWarnings="true" />Di2015NewLine    </Target>Di2015NewLine    <Target Name="CopyLibFiles">Di2015NewLine        <Copy SourceFiles="@(LibFiles)" DestinationFolder="$(ProjectDepthPath)$(LibFolder)" SkipUnchangedFiles="True" />Di2015NewLine    </Target>Di2015NewLineDi2015NewLine    <ItemGroup>Di2015NewLine        <LibFiles Include=" ">Di2015NewLine        \<Visible>false</Visible>Di2015NewLine        </LibFiles>Di2015NewLine    </ItemGroup>Di2015NewLine</Project>Di2015NewLine
188237Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine<Project ToolsVersion="3.5" ... >Di2015NewLine    ...Di2015NewLine    <Import Project="..\\..\\..\\..\\build\\OurBuildTargets.targets" />Di2015NewLine      <ItemGroup>Di2015NewLine        <LibFiles Include="$(OutputPath)$(AssemblyName).dll">Di2015NewLine          <Visible>false</Visible>Di2015NewLine        </LibFiles>Di2015NewLine      </ItemGroup>Di2015NewLine    <Target Name="BeforeClean" DependsOnTargets="DeleteLibFiles" />Di2015NewLine    <Target Name="AfterBuild" DependsOnTargets="CopyLibFiles" />Di2015NewLine</Project>Di2015NewLine
188237Di2015UniqueSeparatorLibFiles
188237Di2015UniqueSeparatorDeleteLibFiles
188237Di2015UniqueSeparatorCopyLibFiles
188377Di2015UniqueSeparatorInvalidate(true)
188407Di2015UniqueSeparator[StructLayout(LayoutKind.Sequential, Size=TotalBytesInStruct),Serializable]Di2015NewLinepublic struct LPRDataDi2015NewLine{Di2015NewLine/// char[15]Di2015NewLine[MarshalAsAttribute(UnmanagedType.ByValTStr, SizeConst = 15)]Di2015NewLinepublic string data;Di2015NewLineDi2015NewLine/// int[15]Di2015NewLine[MarshalAsAttribute(UnmanagedType.ByValArray, SizeConst = 15)]Di2015NewLinepublic int[] prob;Di2015NewLine}Di2015NewLine
188419Di2015UniqueSeparator0x6600  0x67FF\Provider-defined internal non-transmittable propertyDi2015NewLine
188605Di2015UniqueSeparatorif( IsPostBack ) Di2015NewLine{Di2015NewLine    // get the target of the post-back, will be the name of the controlDi2015NewLine    // that issued the post-backDi2015NewLine    string eTarget = Request.Params["__EVENTTARGET"].ToString();Di2015NewLine}Di2015NewLine
188715Di2015UniqueSeparatorClose()
188715Di2015UniqueSeparatorDispose()
188715Di2015UniqueSeparatorGC.SuppressFinalize()
188838Di2015UniqueSeparatortextBox1.Lines = foo.Split(new String[] {"\\n"},StringSplitOptions.RemoveEmptyEntries);Di2015NewLine
188882Di2015UniqueSeparatorstruct ClassDi2015NewLine{Di2015NewLine   Class() ;Di2015NewLine   ~Class() ;Di2015NewLineDi2015NewLine   Thing *    m_pThing ;Di2015NewLine   Object     m_aObject ;Di2015NewLine   Gizmo *    m_pGizmo ;Di2015NewLine   Data       m_aData ;Di2015NewLine}Di2015NewLineDi2015NewLineClass::Class()Di2015NewLine{Di2015NewLine   this->m_pThing = new Thing() ;Di2015NewLine   this->m_pGizmo = new Gizmo() ;Di2015NewLine}Di2015NewLine
188882Di2015UniqueSeparatorClass pClass = new Class() ;Di2015NewLine
188882Di2015UniqueSeparatorstruct ClassDi2015NewLine{Di2015NewLine   Class() ;Di2015NewLine   ~Class() ;Di2015NewLineDi2015NewLine   std::auto_ptr<Thing>   m_pThing ;Di2015NewLine   Object                 m_aObject ;Di2015NewLine   std::auto_ptr<Gizmo>   m_pGizmo ;Di2015NewLine   Data                   m_aData ;Di2015NewLine}Di2015NewLineDi2015NewLineClass::Class()Di2015NewLine   : m_pThing(new Thing())Di2015NewLine   , m_pGizmo(new Gizmo())Di2015NewLine{Di2015NewLine}Di2015NewLine
188882Di2015UniqueSeparatorClass::Class()Di2015NewLine{Di2015NewLine   this->m_pThing.reset(new Thing()) ;Di2015NewLine   this->m_pGizmo.reset(new Gizmo()) ;Di2015NewLine}Di2015NewLine
188932Di2015UniqueSeparatordefault(Foo)
188932Di2015UniqueSeparatorFoo
188932Di2015UniqueSeparatorFoo
188932Di2015UniqueSeparatorFoo
188932Di2015UniqueSeparatordefault()
188932Di2015UniqueSeparatorFoo
188932Di2015UniqueSeparatordefault(Foo)
188932Di2015UniqueSeparatorSomeClass<T>
188932Di2015UniqueSeparatorMyMethod<T>
188932Di2015UniqueSeparatorString.Empty
188932Di2015UniqueSeparator""
189058Di2015UniqueSeparatorsystem.data.SqlClient
189325Di2015UniqueSeparatorAction( IAsyncResult )
189325Di2015UniqueSeparatorEndInvoke()
189325Di2015UniqueSeparatorEndPut()
189325Di2015UniqueSeparatorIAsyncResult BeginPut( string key, object value ) {Di2015NewLine    Action<string, object> put = this.Put;Di2015NewLine    return put.BeginInvoke( key, value, EndPut,Di2015NewLine        new Action<IAsyncResult>( put.EndInvoke ) );Di2015NewLine}Di2015NewLineDi2015NewLineIAsyncResult BeginPut( string region, string key, object value ) {Di2015NewLine    Action<string, string, object> put = this.Put;Di2015NewLine    return put.BeginInvoke( region, key, value, EndPut,Di2015NewLine        new Action<IAsyncResult>( put.EndInvoke ) );Di2015NewLine}Di2015NewLine
189325Di2015UniqueSeparatorvoid EndPut( IAsyncResult asyncResult ) {Di2015NewLine    var del = asyncResult.AsyncState as Action<IAsyncResult>;Di2015NewLine    del( asyncResult );Di2015NewLine}Di2015NewLine
189527Di2015UniqueSeparatorDataContext dc = new DataContext();Di2015NewLineDi2015NewLinevar recipe = (from r in dc.Recipes Di2015NewLine              where r.RecipesID == 1Di2015NewLine              select r).FirstOrDefault();Di2015NewLineDi2015NewLineif (recipe != null)Di2015NewLine{Di2015NewLine    id = recipe.RecipesID;Di2015NewLine    name = recipe.RecipesName;Di2015NewLine}Di2015NewLine
189963Di2015UniqueSeparatorpublic partial class DirList : System.Web.Mvc.ViewPage<List<Task>>Di2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLine
189966Di2015UniqueSeparatorImports System.NetDi2015NewLineImports System.Web.HttpUtilityDi2015NewLineDi2015NewLinePublic Class XMLHTTPDi2015NewLine'Makes an internet connection to specified URL Di2015NewLine   Public Overridable Sub open(ByVal bstrMethod As String, _Di2015NewLine     ByVal bstrUrl As String, Optional ByVal varAsync As _Di2015NewLine     Object = False, Optional ByVal bstrUser _Di2015NewLine     As Object = "", Optional ByVal bstrPassword As Object = "")Di2015NewLine       TryDi2015NewLine           strUrl = bstrUrlDi2015NewLine           strMethod = bstrMethodDi2015NewLineDi2015NewLine           'Checking if proxy configuration Di2015NewLine           'is required...(blnIsProxy value Di2015NewLine           'from config file)Di2015NewLine           If blnIsProxy ThenDi2015NewLine           'Set the proxy objectDi2015NewLine               proxyObject = WebProxy.GetDefaultProxy()Di2015NewLineDi2015NewLine               'Finding if proxy exists and if so set Di2015NewLine               'the proxy configuration parameters...Di2015NewLine               If Not (IsNothing(proxyObject.Address)) ThenDi2015NewLine                   uriAddress = proxyObject.AddressDi2015NewLine                   If Not (IsNothing(uriAddress)) ThenDi2015NewLine                       _ProxyName = uriAddress.HostDi2015NewLine                       _ProxyPort = uriAddress.PortDi2015NewLine                   End IfDi2015NewLine                   UpdateProxy()Di2015NewLine               End IfDi2015NewLine               urlWebRequest.Proxy = proxyObjectDi2015NewLine           End IfDi2015NewLineDi2015NewLine           'Make the webRequest...Di2015NewLine           urlWebRequest = System.Net.HttpWebRequest.Create(strUrl)Di2015NewLine           urlWebRequest.Method = strMethodDi2015NewLineDi2015NewLine           If (strMethod = "POST") ThenDi2015NewLine               setRequestHeader("Content-Type", _Di2015NewLine                   "application/x-www-form-urlencoded")Di2015NewLine           End IfDi2015NewLineDi2015NewLine           'Add the cookie values of jessionid of weblogic Di2015NewLine           'and PH-Session value of webseal Di2015NewLine           'for retaining the same sessionDi2015NewLine           urlWebRequest.Headers.Add("Cookie", str_g_cookieval)Di2015NewLineDi2015NewLine       Catch exp As ExceptionDi2015NewLine           SetErrStatusText("Error opening method level url connection")Di2015NewLine       End TryDi2015NewLine   End SubDi2015NewLine   'Sends the request with post parameters...Di2015NewLine   Public Overridable Sub Send(Optional ByVal objBody As Object = "")Di2015NewLine       TryDi2015NewLine           Dim rspResult As System.Net.HttpWebResponseDi2015NewLine           Dim strmRequestStream As System.IO.StreamDi2015NewLine           Dim strmReceiveStream As System.IO.StreamDi2015NewLine           Dim encode As System.Text.EncodingDi2015NewLine           Dim sr As System.IO.StreamReaderDi2015NewLine           Dim bytBytes() As ByteDi2015NewLine           Dim UrlEncoded As New System.Text.StringBuilderDi2015NewLine           Dim reserved() As Char = {ChrW(63), ChrW(61), ChrW(38)}Di2015NewLine           urlWebRequest.Expect = NothingDi2015NewLine           If (strMethod = "POST") ThenDi2015NewLine               If objBody <> Nothing ThenDi2015NewLine                   Dim intICounter As Integer = 0Di2015NewLine                   Dim intJCounter As Integer = 0Di2015NewLine                   While intICounter < objBody.LengthDi2015NewLine                     intJCounter = _Di2015NewLine                       objBody.IndexOfAny(reserved, intICounter)Di2015NewLine                     If intJCounter = -1 ThenDi2015NewLineUrlEncoded.Append(System.Web.HttpUtility.UrlEncode(objBody.Substring(intICounter, _Di2015NewLine                                                    objBody.Length - intICounter)))Di2015NewLine                       Exit WhileDi2015NewLine                     End IfDi2015NewLineUrlEncoded.Append(System.Web.HttpUtility.UrlEncode(objBody.Substring(intICounter, _Di2015NewLine                                                        intJCounter - intICounter)))Di2015NewLine                     UrlEncoded.Append(objBody.Substring(intJCounter, 1))Di2015NewLine                     intICounter = intJCounter + 1Di2015NewLine                   End WhileDi2015NewLineDi2015NewLine                   bytBytes = _Di2015NewLine                     System.Text.Encoding.UTF8.GetBytes(UrlEncoded.ToString())Di2015NewLine                   urlWebRequest.ContentLength = bytBytes.LengthDi2015NewLine                   strmRequestStream = urlWebRequest.GetRequestStreamDi2015NewLine                   strmRequestStream.Write(bytBytes, 0, bytBytes.Length)Di2015NewLine                   strmRequestStream.Close()Di2015NewLine                ElseDi2015NewLine                    urlWebRequest.ContentLength = 0Di2015NewLine               End IfDi2015NewLine           End IfDi2015NewLine           rspResult = urlWebRequest.GetResponse()Di2015NewLine           strmReceiveStream = rspResult.GetResponseStream()Di2015NewLine           encode = System.Text.Encoding.GetEncoding("utf-8")Di2015NewLine           sr = New System.IO.StreamReader(strmReceiveStream, encode)Di2015NewLineDi2015NewLine           Dim read(256) As CharDi2015NewLine           Dim count As Integer = sr.Read(read, 0, 256)Di2015NewLine           Do While count > 0Di2015NewLine               Dim str As String = New String(read, 0, count)Di2015NewLine               strResponseText = strResponseText & strDi2015NewLine               count = sr.Read(read, 0, 256)Di2015NewLine           LoopDi2015NewLine       Catch exp As ExceptionDi2015NewLine           SetErrStatusText("Error while sending parameters")Di2015NewLine           WritetoLog(exp.ToString)Di2015NewLine       End TryDi2015NewLine   End SubDi2015NewLine   'Setting header values...Di2015NewLine   Public Overridable Sub setRequestHeader(ByVal bstrHeader _Di2015NewLine                         As String, ByVal bstrValue As String)Di2015NewLine       Select Case bstrHeaderDi2015NewLine            Case "Referer"Di2015NewLine                urlWebRequest.Referer = bstrValueDi2015NewLine            Case "User-Agent"Di2015NewLine                urlWebRequest.UserAgent = bstrValueDi2015NewLine            Case "Content-Type"Di2015NewLine                urlWebRequest.ContentType = bstrValueDi2015NewLine            Case ElseDi2015NewLine                urlWebRequest.Headers(bstrHeader) = bstrValueDi2015NewLine       End SelectDi2015NewLine   End SubDi2015NewLineDi2015NewLine   Private Function UpdateProxy()Di2015NewLine       TryDi2015NewLine           If Not (IsNothing(uriAddress)) ThenDi2015NewLine               If ((Not IsNothing(_ProxyName)) And _Di2015NewLine                 (_ProxyName.Length > 0) And (_ProxyPort > 0)) ThenDi2015NewLine                   proxyObject = New WebProxy(_ProxyName, _ProxyPort)Di2015NewLine                   Dim strByPass() As String = Split(strByPassList, "|")Di2015NewLine                   If strByPass.Length > 0 ThenDi2015NewLine                       proxyObject.BypassList = strByPassDi2015NewLine                   End IfDi2015NewLine                   proxyObject.BypassProxyOnLocal = TrueDi2015NewLine                   If blnNetworkCredentials ThenDi2015NewLine                       If strDomain <> "" ThenDi2015NewLine                           proxyObject.Credentials = New _Di2015NewLine                             NetworkCredential(strUserName, _Di2015NewLine                             strPwd, strDomain)Di2015NewLine                       ElseDi2015NewLine                            proxyObject.Credentials = New _Di2015NewLine                              NetworkCredential(strUserName, _Di2015NewLine                              strPwd)Di2015NewLine                       End IfDi2015NewLine                   End IfDi2015NewLine               End IfDi2015NewLine           End IfDi2015NewLine       Catch exp As ExceptionDi2015NewLine           SetErrStatusText("Error while updating proxy configurations")Di2015NewLine           WritetoLog(exp.ToString)Di2015NewLine       End TryDi2015NewLine   End FunctionDi2015NewLine   'Property for setting the ResponsetextDi2015NewLine   Public Overridable ReadOnly Property ResponseText() As StringDi2015NewLine       GetDi2015NewLine           ResponseText = strResponseTextDi2015NewLine       End GetDi2015NewLine   End PropertyDi2015NewLineDi2015NewLine   Private urlWebRequest As System.Net.HttpWebRequestDi2015NewLine   Private urlWebResponse As System.Net.HttpWebResponseDi2015NewLine   Private strResponseText As StringDi2015NewLine   Private strUrl As StringDi2015NewLine   Private strMethod As StringDi2015NewLine   Private proxyObject As WebProxyDi2015NewLine   Private intCount As IntegerDi2015NewLine   Private uriAddress As UriDi2015NewLine   Private _ProxyName As StringDi2015NewLine   Private _ProxyPort As IntegerDi2015NewLineEnd ClassDi2015NewLine
190169Di2015UniqueSeparatorvar bubbleVideos = from item in criteriaListDi2015NewLine                   orderby (item.ItemType == "video" ? 0 : 1)Di2015NewLine                   select item;Di2015NewLinerepeater.DataSource = bubbleVideos.ToList();Di2015NewLine
190254Di2015UniqueSeparatorforeach (Attribute a in requiredAttributes)Di2015NewLine{Di2015NewLine    Attribute copy = a;Di2015NewLine    result = result.Where(p => p.Attributes.Contains(copy));Di2015NewLine}Di2015NewLine
190269Di2015UniqueSeparatorApplication.SetUnhandledExceptionMode(UnhandledExceptionMode.CatchException);Di2015NewLine
190297Di2015UniqueSeparatorRegex.Escape( wildcardExpression ).Replace( @"\\*", ".*" ).Replace( @"\\?", "." );Di2015NewLine
190308Di2015UniqueSeparatorstring x = GetBase64DataFromWherever();Di2015NewLineint size = (x.Length *3)/4;Di2015NewLineif (x.EndsWith("="))Di2015NewLine{Di2015NewLine    size--;Di2015NewLine}Di2015NewLineif (x.EndsWith("=="))Di2015NewLine{Di2015NewLine    size--; // 1 will already have been removed by the if statement aboveDi2015NewLine}Di2015NewLine
190541Di2015UniqueSeparatorInt32 decValue = 42;Di2015NewLinestring hexValue = decValue.ToString("X");Di2015NewLineDi2015NewLineInt32 decValue2 = Int32.Parse(hexValue, System.Globalization.NumberStyles.HexNumber);Di2015NewLine
190570Di2015UniqueSeparator(&(objectCategory=user)(manager=<user-dn-here>))Di2015NewLine
190570Di2015UniqueSeparator*   as  \\2aDi2015NewLine(   as  \\28Di2015NewLine)   as  \\29Di2015NewLine\\   as  \\5cDi2015NewLineNUL as  \\00Di2015NewLine/   as  \\2fDi2015NewLineDi2015NewLine// Arbitrary binary data can be represented using the same scheme.Di2015NewLine
190570Di2015UniqueSeparatorSearchRoot
190570Di2015UniqueSeparatorSearchScope
190570Di2015UniqueSeparatorBase
190655Di2015UniqueSeparator    public static Expression<Func<Customer, bool>> HasActiveContractDi2015NewLine    {Di2015NewLine        get { return cust => cust.Contracts.Count() == 1; }Di2015NewLine    }Di2015NewLine
190655Di2015UniqueSeparator    var filtered = db.Customers.Where(Customer.HasActiveContract);Di2015NewLine
190655Di2015UniqueSeparator    public IQueryable<Customer> CustomersWithActiveContractDi2015NewLine    {Di2015NewLine        get { return Customers.Where(Customer.HasActiveContract); }Di2015NewLine    }Di2015NewLine
190760Di2015UniqueSeparatorp = ( 0.5 * ( (0.5*1/10) + (0.5*1/26) ) )^6Di2015NewLine
190948Di2015UniqueSeparatorvar qry = from cust in db.CustomersDi2015NewLine          where cust.IsActiveDi2015NewLine          select cust;Di2015NewLine
190948Di2015UniqueSeparatorvar qry = db.Customers.Where(cust => cust.IsActive);Di2015NewLine
190948Di2015UniqueSeparatorIEnumerable<T>
190948Di2015UniqueSeparatorIQueryable<T>
190948Di2015UniqueSeparatorEnumerable
190948Di2015UniqueSeparatorQueryable
191182Di2015UniqueSeparatorpublic interface IView<TPresenter>Di2015NewLine{Di2015NewLine    TPresenter Presenter { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic interface IPresenter<TView, TPresenter>Di2015NewLine    where TView : IView<TPresenter>Di2015NewLine    where TPresenter : IPresenter<TView, TPresenter>Di2015NewLine{Di2015NewLine    TView View { get; set; }Di2015NewLine}Di2015NewLine
191182Di2015UniqueSeparatorpublic abstract class AbstractPresenter<TView, TPresenter> : IPresenter<TView, TPresenter>Di2015NewLine    where TView : IView<TPresenter>Di2015NewLine    where TPresenter : class, IPresenter<TView, TPresenter>Di2015NewLine{Di2015NewLine    protected TView view;Di2015NewLineDi2015NewLine    public TView ViewDi2015NewLine    {Di2015NewLine        get { return this.view; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            this.view = value;Di2015NewLine            this.view.Presenter = this as TPresenter;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
191182Di2015UniqueSeparatorpublic class MyPresenter : AbstractPresenter<IMyView, MyPresenter>Di2015NewLine{Di2015NewLine    //...Di2015NewLine}Di2015NewLine
191182Di2015UniqueSeparatorIMyView
191182Di2015UniqueSeparatorIView
191182Di2015UniqueSeparatorMyView
191182Di2015UniqueSeparatorMyPresenter
191182Di2015UniqueSeparatorMyView
191182Di2015UniqueSeparatorIMyView
191182Di2015UniqueSeparatorMyPresenter
191182Di2015UniqueSeparatorMyPresenter
191182Di2015UniqueSeparatorAbstractPresenter.View
191467Di2015UniqueSeparator <TextBox Name="nameText">Di2015NewLine    <TextBox.Text>Di2015NewLine       <Binding XPath="*[local-name()='Name']" />Di2015NewLine    </TextBox.Text>Di2015NewLine </TextBox>Di2015NewLine
191521Di2015UniqueSeparatorpublic class BaseClass { }Di2015NewLineDi2015NewLinepublic class SpecialBaseClass : BaseClass {}Di2015NewLineDi2015NewLinepublic class SpecialtyDerivedClass : SpecialBaseClass {}Di2015NewLine
191521Di2015UniqueSeparatorpublic class BaseClass { }Di2015NewLineDi2015NewLinepublic class SpecialBaseClass {}Di2015NewLineDi2015NewLinepublic class SpecialtyDerivedClass : BaseClass, SpecialBaseClass {}Di2015NewLine
191521Di2015UniqueSeparatorpublic class BaseClass { }Di2015NewLineDi2015NewLinepublic interface ISpecialBase {}Di2015NewLineDi2015NewLinepublic interface ISpecialDerived {}Di2015NewLineDi2015NewLinepublic class SpecialtyDerivedClass : BaseClass, ISpecialBase, ISpecialDerived {}Di2015NewLine
191596Di2015UniqueSeparatorpropertyValue1 = myObject.IfNotNull(o => o.ObjectProp).IfNotNull(p => p.StringProperty);Di2015NewLine
191754Di2015UniqueSeparator<script scr="var/scripts/en_GB-76909c49e9222ec2bb2f45e0a3c8baef80deb665.js"></script>Di2015NewLine
191949Di2015UniqueSeparator    static GenericCollection()Di2015NewLine    {Di2015NewLine        if (!typeof(T).IsSubclassOf(typeof(Delegate)))Di2015NewLine        {Di2015NewLine            throw new InvalidOperationException(typeof(T).Name + " is not a delegate type");Di2015NewLine        }Di2015NewLine    }Di2015NewLine
192141Di2015UniqueSeparatorHttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create("url");Di2015NewLinerequest.Method = "HEAD";Di2015NewLineDi2015NewLinebool exists;Di2015NewLinetryDi2015NewLine{Di2015NewLine    request.GetResponse();Di2015NewLine    exists = true;Di2015NewLine}Di2015NewLinecatchDi2015NewLine{Di2015NewLine   exists = false;Di2015NewLine}Di2015NewLine
192146Di2015UniqueSeparatorDateTime? d=null;Di2015NewLineDateTime d2;Di2015NewLinebool success = DateTime.TryParse("some date text", out d2);Di2015NewLineif (success) d=d2;Di2015NewLine
192233Di2015UniqueSeparatorIDisposable
192233Di2015UniqueSeparatorDispose
192233Di2015UniqueSeparatorIDisposable
192233Di2015UniqueSeparatorObjectDisposedException
192233Di2015UniqueSeparatorisDisposed
192654Di2015UniqueSeparator    private ITypeOfObjectsBoundToListBox DetermineHoveredItem()Di2015NewLine    {Di2015NewLine        Point screenPosition = ListBox.MousePosition;Di2015NewLine        Point listBoxClientAreaPosition = listBox.PointToClient(screenPosition);Di2015NewLineDi2015NewLine        int hoveredIndex = listBox.IndexFromPoint(listBoxClientAreaPosition);Di2015NewLine        if (hoveredIndex != -1)Di2015NewLine            return listBox.Items[hoveredIndex] as ITypeOfObjectsBoundToListBox;Di2015NewLine        elseDi2015NewLine            return null;        Di2015NewLine    }Di2015NewLine
192654Di2015UniqueSeparatorpublic static class MouseInputDi2015NewLine{Di2015NewLine    // TME_HOVERDi2015NewLine    // The caller wants hover notification. Notification is delivered as a Di2015NewLine    // WM_MOUSEHOVER message.  If the caller requests hover tracking while Di2015NewLine    // hover tracking is already active, the hover timer will be reset.Di2015NewLineDi2015NewLine    private const int TME_HOVER = 0x1;Di2015NewLineDi2015NewLine    private struct TRACKMOUSEEVENTDi2015NewLine    {Di2015NewLine        // Size of the structure - calculated in the constructorDi2015NewLine        public int cbSize;Di2015NewLineDi2015NewLine        // value that we'll set to specify we want to start over Mouse Hover and getDi2015NewLine        // notification when the hover has happenedDi2015NewLine        public int dwFlags;Di2015NewLineDi2015NewLine        // Handle to what's interested in the eventDi2015NewLine        public IntPtr hwndTrack;Di2015NewLineDi2015NewLine        // How long it takes for a hover to occurDi2015NewLine        public int dwHoverTime;Di2015NewLineDi2015NewLine        // Setting things up specifically for a simple resetDi2015NewLine        public TRACKMOUSEEVENT(IntPtr hWnd)Di2015NewLine        {Di2015NewLine            this.cbSize = Marshal.SizeOf(typeof(TRACKMOUSEEVENT));Di2015NewLine            this.hwndTrack = hWnd;Di2015NewLine            this.dwHoverTime = SystemInformation.MouseHoverTime;Di2015NewLine            this.dwFlags = TME_HOVER;Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    // Declaration of the Win32API functionDi2015NewLine    [DllImport("user32")]Di2015NewLine    private static extern bool TrackMouseEvent(ref TRACKMOUSEEVENT lpEventTrack);Di2015NewLineDi2015NewLine    public static void ResetMouseHover(IntPtr windowTrackingMouseHandle)Di2015NewLine    {Di2015NewLine        // Set up the parameter collection for the API call so that the appropriateDi2015NewLine        // control fires the eventDi2015NewLine        TRACKMOUSEEVENT parameterBag = new TRACKMOUSEEVENT(windowTrackingMouseHandle);Di2015NewLineDi2015NewLine        // The actual API callDi2015NewLine        TrackMouseEvent(ref parameterBag);Di2015NewLine    }Di2015NewLine
192690Di2015UniqueSeparatorprivate static ServerSettings defaultInstance = ((ServerSettings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new ServerSettings())));Di2015NewLineDi2015NewLinepublic static ServerSettings Default Di2015NewLine\{Di2015NewLine    get { return defaultInstance; }Di2015NewLine}Di2015NewLine
192906Di2015UniqueSeparatorSystem.Data.SqlTypes.SqlDecimal.ConvertToPrecScale( new SqlDecimal (1234.56789), 8, 2)Di2015NewLine
193038Di2015UniqueSeparator//Replaces OnMyEventRaised boiler-plate codeDi2015NewLine//Usage: SafeInvoker.RaiseEvent(this, MyEventRaised)Di2015NewLinepublic static void Raise(this EventHandler eventToRaise, object sender)Di2015NewLine{Di2015NewLine            EventHandler eventHandler = eventToRaise;Di2015NewLineDi2015NewLine            if (eventHandler != null)Di2015NewLine                eventHandler(sender, EventArgs.Empty);Di2015NewLine}Di2015NewLine
193050Di2015UniqueSeparatorparams
193050Di2015UniqueSeparatorobject[]
193050Di2015UniqueSeparatorstatic string appendFolders(params object[] folders)Di2015NewLine { return (string) folders.Aggregate("",(output, f) => Di2015NewLine                       Path.Combine( (string)outputDi2015NewLine                                    ,(f is string[]) Di2015NewLine                                      ? appendFolders((object[])f)Di2015NewLine                                      : ((string)f).TrimStart('\\\\')));Di2015NewLine }Di2015NewLine
193050Di2015UniqueSeparator  static string appendFolders(params StringOrArray[] folders)Di2015NewLine     { return folders.SelectMany(x=>x.AsEnumerable())Di2015NewLine                     .Aggregate("",Di2015NewLine                       (output, f)=>Path.Combine(output,f.TrimStart('\\\\')));Di2015NewLine     }Di2015NewLineDi2015NewLine   class StringOrArrayDi2015NewLine     { string[] array;Di2015NewLineDi2015NewLine       public IEnumerable<string> AsEnumerable()Di2015NewLine        { return soa.array;}Di2015NewLineDi2015NewLine       public static implicit operator StringOrArray(string   s)   Di2015NewLine        { return new StringOrArray{array=new[]{s}};}Di2015NewLineDi2015NewLine       public static implicit operator StringOrArray(string[] s)  Di2015NewLine        { return new StringOrArray{array=s};}Di2015NewLine     }Di2015NewLine
193050Di2015UniqueSeparatorappendFolders("base", "v1", "module", new[]{"debug","bin"});Di2015NewLine
193078Di2015UniqueSeparatorcontext.SubmitChanges(ConflictMode.ContinueOnConflict);Di2015NewLine
193078Di2015UniqueSeparatorcontext.ChangeConflictsDi2015NewLine
193323Di2015UniqueSeparator    private void AddWorksheetToExcelWorkbook(string fullFilename,string worksheetName)Di2015NewLine    {Di2015NewLine        Microsoft.Office.Interop.Excel.Application xlApp = null;Di2015NewLine        Workbook xlWorkbook = null;Di2015NewLine        Sheets xlSheets = null;Di2015NewLine        Worksheet xlNewSheet = null;Di2015NewLineDi2015NewLine        try {Di2015NewLine            xlApp = new Microsoft.Office.Interop.Excel.Application();Di2015NewLineDi2015NewLine            if (xlApp == null)Di2015NewLine                return;Di2015NewLineDi2015NewLine            // Uncomment the line below if you want to see what's happening in ExcelDi2015NewLine            // xlApp.Visible = true;Di2015NewLineDi2015NewLine            xlWorkbook = xlApp.Workbooks.Open(fullFilename, 0, false, 5, "", "",Di2015NewLine                    false, XlPlatform.xlWindows, "",Di2015NewLine                    true, false, 0, true, false, false);Di2015NewLineDi2015NewLine            xlSheets = xlWorkbook.Sheets as Sheets;Di2015NewLineDi2015NewLine            // The first argument below inserts the new worksheet as the first oneDi2015NewLine            xlNewSheet = (Worksheet)xlSheets.Add(xlSheets[1], Type.Missing, Type.Missing, Type.Missing);Di2015NewLine            xlNewSheet.Name = worksheetName;Di2015NewLineDi2015NewLine            xlWorkbook.Save();Di2015NewLine            xlWorkbook.Close(Type.Missing,Type.Missing,Type.Missing);Di2015NewLine            xlApp.Quit();Di2015NewLine        }Di2015NewLine        finally {Di2015NewLine            Marshal.ReleaseComObject(xlNewSheet);Di2015NewLine            Marshal.ReleaseComObject(xlSheets);Di2015NewLine            Marshal.ReleaseComObject(xlWorkbook);Di2015NewLine            Marshal.ReleaseComObject(xlApp);Di2015NewLine            xlApp = null;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
193609Di2015UniqueSeparatorc.UpdateLayout()Di2015NewLine
193609Di2015UniqueSeparatorBuildCanvas
193609Di2015UniqueSeparatorCanvas
193609Di2015UniqueSeparatorUIElement
193874Di2015UniqueSeparator<assignees>Di2015NewLine  <assignee>Di2015NewLine    <assignee-id type="integer">123456</assignee-id>Di2015NewLine  </assignee>Di2015NewLine  <assignee>Di2015NewLine    <assignee-id type="integer" nil="true"></assignee-id>Di2015NewLine  </assignee>Di2015NewLine</assignees>Di2015NewLine
193874Di2015UniqueSeparator<assignees xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">Di2015NewLine  <assignee>Di2015NewLine    <assignee-id xsi:type="integer">123456</assignee-id>Di2015NewLine  </assignee>Di2015NewLine  <assignee>Di2015NewLine    <assignee-id xsi:type="integer" xsi:nil="true" />Di2015NewLine  </assignee>Di2015NewLine</assignees>Di2015NewLine
194128Di2015UniqueSeparatorProcess myProcess = new Process();Di2015NewLineProcessStartInfo myProcessStartInfo = new ProcessStartInfo("YOUPROGRAM_CONSOLE.exe" );Di2015NewLinemyProcessStartInfo.UseShellExecute = false;Di2015NewLinemyProcessStartInfo.RedirectStandardOutput = true;Di2015NewLinemyProcess.StartInfo = myProcessStartInfo;Di2015NewLinemyProcess.Start();Di2015NewLineDi2015NewLineStreamReader myStreamReader = myProcess.StandardOutput;Di2015NewLinestring myString = myStreamReader.ReadLine();Di2015NewLineConsole.WriteLine(myString);Di2015NewLinemyProcess.Close();Di2015NewLine
194223Di2015UniqueSeparatorProgram Files
194223Di2015UniqueSeparator    static string ProgramFilesx86()Di2015NewLine    {Di2015NewLine        if( 8 == IntPtr.Size Di2015NewLine            || (!String.IsNullOrEmpty(Environment.GetEnvironmentVariable("PROCESSOR_ARCHITEW6432"))))Di2015NewLine        {Di2015NewLine            return Environment.GetEnvironmentVariable("ProgramFiles(x86)");Di2015NewLine        }Di2015NewLineDi2015NewLine        return Environment.GetEnvironmentVariable("ProgramFiles");Di2015NewLine    }Di2015NewLine
194238Di2015UniqueSeparatorstatic Regex pathArgumentsRegex = new Regex(@"(%\\d+)|(""%\\d+"")", RegexOptions.ExplicitCapture);Di2015NewLinestatic string GetPathAssociatedWithFileExtension(string extension)Di2015NewLine{Di2015NewLine    RegistryKey extensionKey = Registry.ClassesRoot.OpenSubKey(extension);Di2015NewLine    if (extensionKey != null)Di2015NewLine    {Di2015NewLine        object applicationName = extensionKey.GetValue(string.Empty);Di2015NewLine        if (applicationName != null)Di2015NewLine        {Di2015NewLine            RegistryKey commandKey = Registry.ClassesRoot.OpenSubKey(applicationName.ToString() + @"\\shell\\open\\command");Di2015NewLine            if (commandKey != null)Di2015NewLine            {Di2015NewLine                object command = commandKey.GetValue(string.Empty);Di2015NewLine                if (command != null)Di2015NewLine                {Di2015NewLine                    return pathArgumentsRegex.Replace(command.ToString(), "");Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return null;Di2015NewLine}Di2015NewLine
194238Di2015UniqueSeparatorprivate static string GetGoogleEarthExePath()Di2015NewLine{Di2015NewLine    RegistryKey googleEarthRK = Registry.CurrentUser.OpenSubKey(@"Software\\Google\\Google Earth Plus\\");Di2015NewLine    if (googleEarthRK != null)Di2015NewLine    {Di2015NewLine        object rootDir = googleEarthRK.GetValue("InstallLocation");Di2015NewLine        if (rootDir != null)Di2015NewLine        {Di2015NewLine            return Path.Combine(rootDir.ToString(), "googleearth.exe");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return null;Di2015NewLine}Di2015NewLine
194259Di2015UniqueSeparator// For the multi-dimentional arrayDi2015NewLineStringBuilder sb = new StringBuilder();Di2015NewLinefor (int stringIndex = 0; stringIndex < s.Length; stringIndex++)Di2015NewLine{Di2015NewLine  sb.Clear();Di2015NewLine  for (int charIndex = 0; charIndex < str.UpperBound(1); charIndex++)Di2015NewLine    sb.Append(str[stringIndex,charIndex]);Di2015NewLine  s[stringIndex] = sb.ToString();Di2015NewLine}Di2015NewLineDi2015NewLine// For the jagged arrayDi2015NewLinefor (int index = 0; index < s.Length; index++)Di2015NewLine  s[index] = new string(str[index]);Di2015NewLine
194414Di2015UniqueSeparatornamespace SomeNameSpaceDi2015NewLine{Di2015NewLine    public class MyProxy : IWebProxyDi2015NewLine    {Di2015NewLine        public ICredentials CredentialsDi2015NewLine        {Di2015NewLine            get { return new NetworkCredential("user", "password"); }Di2015NewLine            //or get { return new NetworkCredential("user", "password","domain"); }Di2015NewLine            set { }Di2015NewLine        }Di2015NewLineDi2015NewLine        public Uri GetProxy(Uri destination)Di2015NewLine        {Di2015NewLine            return new Uri("http://my.proxy:8080");Di2015NewLine        }Di2015NewLineDi2015NewLine        public bool IsBypassed(Uri host)Di2015NewLine        {Di2015NewLine            return false;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
194414Di2015UniqueSeparator<defaultProxy enabled="true" useDefaultCredentials="false">Di2015NewLine  <module type = "SomeNameSpace.MyProxy, SomeAssembly" />Di2015NewLine</defaultProxy>Di2015NewLine
194651Di2015UniqueSeparatorvar year = 1995;  // you can pass the year into a method so you can filter on any yearDi2015NewLinevar results = from row in dsQuotesDi2015NewLine              where row.QuoteDate > yearDi2015NewLine              select row;Di2015NewLine
194651Di2015UniqueSeparatorSELECT * FROM Quotes WHERE Year(QuoteDate) > @YearDi2015NewLine
194651Di2015UniqueSeparatorSELECT * FROM Quotes WHERE Year(QuoteDate) > ?Di2015NewLine
194671Di2015UniqueSeparator    static void Foo<T>() where T : new()Di2015NewLine    {Di2015NewLine        T t = new T();Di2015NewLine        Console.WriteLine(t.ToString()); // works fineDi2015NewLine        Console.WriteLine(t.GetHashCode()); // works fineDi2015NewLine        Console.WriteLine(t.Equals(t)); // works fineDi2015NewLineDi2015NewLine        // so it looks like an object and smells like an object...Di2015NewLineDi2015NewLine        // but this throws a NullReferenceException...Di2015NewLine        Console.WriteLine(t.GetType());Di2015NewLine    }Di2015NewLine
194671Di2015UniqueSeparatorNullable<T>
194671Di2015UniqueSeparatorint?
194671Di2015UniqueSeparatorwhere T : class, new()
194671Di2015UniqueSeparatorprivate static void Main() {Di2015NewLine    CanThisHappen<MyFunnyType>();Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void CanThisHappen<T>() where T : class, new() {Di2015NewLine    var instance = new T(); // new() on a ref-type; should be non-null, thenDi2015NewLine    Debug.Assert(instance != null, "How did we break the CLR?");Di2015NewLine}Di2015NewLine
194671Di2015UniqueSeparatorclass MyFunnyProxyAttribute : ProxyAttribute {Di2015NewLine    public override MarshalByRefObject CreateInstance(Type serverType) {Di2015NewLine        return null;Di2015NewLine    }Di2015NewLine}Di2015NewLine[MyFunnyProxy]Di2015NewLineclass MyFunnyType : ContextBoundObject { }Di2015NewLine
194671Di2015UniqueSeparatornew()
194671Di2015UniqueSeparatorMyFunnyProxyAttribute
194671Di2015UniqueSeparatornull
194789Di2015UniqueSeparatorNetworkInterface.GetIsNetworkAvailable()Di2015NewLine
194789Di2015UniqueSeparatorprivate static int ERROR_SUCCESS = 0;Di2015NewLinepublic static bool IsInternetConnected() {Di2015NewLine    long dwConnectionFlags = 0;Di2015NewLine    if (!InternetGetConnectedState(dwConnectionFlags, 0))Di2015NewLine        return false;Di2015NewLineDi2015NewLine    if(InternetAttemptConnect(0) != ERROR_SUCCESS)Di2015NewLine        return false;Di2015NewLineDi2015NewLine    return true;Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine [DllImport("wininet.dll", SetLastError=true)]Di2015NewLine public static extern int InternetAttemptConnect(uint res);Di2015NewLineDi2015NewLineDi2015NewLine [DllImport("wininet.dll", SetLastError=true)]Di2015NewLine public static extern bool InternetGetConnectedState(long flags,long reserved);Di2015NewLine
194870Di2015UniqueSeparatorDateTime RandomDay()Di2015NewLine{Di2015NewLine    DateTime start = new DateTime(1995, 1, 1);Di2015NewLine    Random gen = new Random();Di2015NewLineDi2015NewLine    int range = (DateTime.Today - start).Days;           Di2015NewLine    return start.AddDays(gen.Next(range));Di2015NewLine}Di2015NewLine
194870Di2015UniqueSeparatorstart
194870Di2015UniqueSeparatorgen
194870Di2015UniqueSeparatorrange
194974Di2015UniqueSeparatorList<string>
194974Di2015UniqueSeparatorstring[]
194974Di2015UniqueSeparatorList<int>
194974Di2015UniqueSeparatorint
194974Di2015UniqueSeparatorList<T>
194974Di2015UniqueSeparatorContains()
194974Di2015UniqueSeparatoruid.ToString().Contains(string[])
194974Di2015UniqueSeparatorstring[]
194974Di2015UniqueSeparatorList<int>()
194974Di2015UniqueSeparatorList<string> uids = new List<string>( arrayofuids );Di2015NewLineDi2015NewLinefrom xx in tableDi2015NewLinewhere uids.Contains( xx.uid.ToString() )Di2015NewLineselect xxDi2015NewLine
195290Di2015UniqueSeparatorHttpContext.Current.Items
195290Di2015UniqueSeparatorHttpContext.Current.Items
195427Di2015UniqueSeparatorTransaction Binding=Explicit Unbind;
195427Di2015UniqueSeparatorTransactionScope
195493Di2015UniqueSeparatorvar portNames = SerialPort.GetPortNames();Di2015NewLineDi2015NewLineforeach(var port in portNames) {Di2015NewLine    //Try for every portName and break on the first workingDi2015NewLine}Di2015NewLine
195562Di2015UniqueSeparator<form action="http://www.shutterfly.com/c4p/UpdateCart.jsp" method="post">Di2015NewLine<input type="hidden" name="addim" value="1">Di2015NewLine<input type="hidden" name="protocol" value="SFP,100">Di2015NewLine<input type="hidden" name="pid" value="C4P">Di2015NewLine<input type="hidden" name="puid" value="AFFL">Di2015NewLine<input type="hidden" name="imnum" value="1">Di2015NewLine<input type="hidden" name="imraw-1" value="http://images.partner.com/foo/12345.jpg">Di2015NewLine<input type="hidden" name="imrawheight-1" value="1800">Di2015NewLine<input type="hidden" name="imrawwidth-1" value="1200">Di2015NewLine<input type="hidden" name="imthumb-1" value="http://images.partner.com/foo/12345_thumb.jpg">Di2015NewLine<input type="hidden" name="imthumbheight-1" value="150">Di2015NewLine<input type="hidden" name="imthumbwidth-1" value="100">Di2015NewLine<input type="hidden" name="returl" value="http://www.partner.com/alice">Di2015NewLine<input type="submit" value="Submit">Di2015NewLine</form>Di2015NewLine
195749Di2015UniqueSeparator3326
195885Di2015UniqueSeparatorWarning 65\warning C4192: automatically excluding 'IServiceProvider' while importing type library 'ServiceLibrary.dll'Di2015NewLine
195885Di2015UniqueSeparatorimport "oaidl.idl";Di2015NewLineDi2015NewLine[Di2015NewLine    object,Di2015NewLine    uuid(9219CC5B-31CC-4868-A1DE-E18300F73C43),Di2015NewLine    dual,Di2015NewLine    nonextensible,Di2015NewLine    helpstring("IService Interface"),Di2015NewLine    pointer_default(unique)Di2015NewLine]Di2015NewLineinterface IService : IDispatchDi2015NewLine{Di2015NewLine  HRESULT DoSomething(void);Di2015NewLine}Di2015NewLineDi2015NewLine[Di2015NewLine    object,Di2015NewLine    uuid(9219CC5B-31CC-4868-A1DE-E18300F73C44),Di2015NewLine    dual,Di2015NewLine    nonextensible,Di2015NewLine    helpstring("IProvider Interface"),Di2015NewLine    pointer_default(unique)Di2015NewLine]Di2015NewLineinterface IServiceProvider2 : IDispatchDi2015NewLine{Di2015NewLine  HRESULT Init( IDispatch *sink, VARIANT_BOOL * result );Di2015NewLine  HRESULT GetService( LONG serviceIndicator, IService ** result );Di2015NewLine};Di2015NewLineDi2015NewLine[Di2015NewLine    uuid(9219CC5B-31CC-4868-A1DE-E18300F73C45),Di2015NewLine    version(1.0),Di2015NewLine]Di2015NewLinelibrary ServiceLibraryDi2015NewLine{Di2015NewLine\importlib("stdole2.tlb");Di2015NewLineDi2015NewLine\interface IService;Di2015NewLine\interface IServiceProvider2;Di2015NewLine};Di2015NewLine
195885Di2015UniqueSeparatorusing System.Runtime.InteropServices;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing ServiceLibrary;Di2015NewLineusing IServiceProvider=ServiceLibrary.IServiceProvider2;Di2015NewLineDi2015NewLinenamespace COMInterfaceTesterDi2015NewLine{Di2015NewLine    [ComVisible(true)]Di2015NewLine    [Guid("2B9D06B9-EB59-435e-B3FF-B891C63108B2")]Di2015NewLine    public interface INewService : IServiceDi2015NewLine    {Di2015NewLine        string ServiceName { get; }Di2015NewLine    }Di2015NewLineDi2015NewLine    [ComVisible(true)]Di2015NewLine    [Guid("2B9D06B9-EB59-435e-B3FF-B891C63108B3")]Di2015NewLine    public class NewService : INewServiceDi2015NewLine    {Di2015NewLine        public string _name;Di2015NewLineDi2015NewLine        public NewService(string name)Di2015NewLine        {Di2015NewLine            _name = name;Di2015NewLine        }Di2015NewLineDi2015NewLine        //  implement interfaceDi2015NewLine        #region IService MembersDi2015NewLineDi2015NewLine        public void DoSomething()Di2015NewLine        {Di2015NewLine            MessageBox.Show("NewService.DoSomething");Di2015NewLine        }Di2015NewLineDi2015NewLine        #endregionDi2015NewLineDi2015NewLine        public string ServiceNameDi2015NewLine        {Di2015NewLine            get { return _name; }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    [ComVisible(true)]Di2015NewLine    [Guid("2B9D06B9-EB59-435e-B3FF-B891C63108B4")]Di2015NewLine    public interface INewProvider : IServiceProviderDi2015NewLine    {Di2015NewLine        //  adds nothing, just implementsDi2015NewLine    }Di2015NewLineDi2015NewLine    [ComVisible(true)]Di2015NewLine    [Guid("2B9D06B9-EB59-435e-B3FF-B891C63108B5")]Di2015NewLine    public class NewProvider : INewProviderDi2015NewLine    {Di2015NewLine        //  implement interfaceDi2015NewLine        public void Init(object sink, ref bool result)Di2015NewLine        {Di2015NewLine            MessageBox.Show("NewProvider.Init");Di2015NewLine        }Di2015NewLineDi2015NewLine        public void GetService(int serviceIndicator, ref IService result)Di2015NewLine        {Di2015NewLine            result = new NewService("FooBar");Di2015NewLine            MessageBox.Show("NewProvider.GetService");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
195885Di2015UniqueSeparator#include "stdafx.h"Di2015NewLine#include <iostream>Di2015NewLine#include <atlbase.h>Di2015NewLine#import "COMInterfaceTester.tlb" raw_interfaces_onlyDi2015NewLine#import "ServiceLibrary.dll" raw_interfaces_onlyDi2015NewLineDi2015NewLineusing std::cout;Di2015NewLineDi2015NewLineint _tmain(int argc, _TCHAR* argv[])Di2015NewLine{Di2015NewLine\CoInitialize(NULL);   //Initialize all COM ComponentsDi2015NewLine\COMInterfaceTester::INewProviderPtr pNewProvider(__uuidof(COMInterfaceTester::NewProvider));Di2015NewLine\ServiceLibrary::IServiceProvider2 *pNewProviderPtr;Di2015NewLineDi2015NewLine\HRESULT hr = pNewProvider.QueryInterface(__uuidof(ServiceLibrary::IServiceProvider2), (void**)&pNewProviderPtr);Di2015NewLineDi2015NewLine\if(SUCCEEDED(hr))Di2015NewLine\{\\Di2015NewLine\\VARIANT_BOOL result = VARIANT_FALSE;Di2015NewLine\\int *p = NULL;Di2015NewLineDi2015NewLine\\hr = pNewProviderPtr->Init((IDispatch*)p, &result);Di2015NewLineDi2015NewLine\\if (FAILED(hr))Di2015NewLine\\{Di2015NewLine\\\cout << "Failed to call Init";Di2015NewLine\\}Di2015NewLineDi2015NewLine\\ServiceLibrary::IService *pService = NULL;Di2015NewLine\\hr = pNewProviderPtr->GetService(0, &pService);Di2015NewLineDi2015NewLine\\if (FAILED(hr))Di2015NewLine\\{Di2015NewLine\\\cout << "Failed to call GetService";Di2015NewLine\\}Di2015NewLine\\elseDi2015NewLine\\{Di2015NewLine\\\COMInterfaceTester::INewService* pNewService = NULL;Di2015NewLine\\\hr = pService->QueryInterface(__uuidof(COMInterfaceTester::INewService), (void**)&pNewService);Di2015NewLineDi2015NewLine\\\if (SUCCEEDED(hr))Di2015NewLine\\\{Di2015NewLine\\\\CComBSTR serviceName;Di2015NewLine\\\\pNewService->get_ServiceName(&serviceName); Di2015NewLineDi2015NewLine\\\\if (serviceName == "FooBar")Di2015NewLine\\\\{Di2015NewLine\\\\\pService->DoSomething();Di2015NewLine\\\\}Di2015NewLine\\\\elseDi2015NewLine\\\\\cout << "Unexpected service";Di2015NewLineDi2015NewLine\\\\pNewService->Release();Di2015NewLineDi2015NewLine\\\}Di2015NewLineDi2015NewLine\\\pService->Release();Di2015NewLine\\}Di2015NewLineDi2015NewLine\\pNewProviderPtr->Release();Di2015NewLine\}Di2015NewLine\elseDi2015NewLine\\cout << "Failed to query for IServiceProvider2";Di2015NewLineDi2015NewLine\pNewProvider.Release();Di2015NewLine\CoUninitialize ();   //DeInitialize all COM ComponentsDi2015NewLineDi2015NewLine}Di2015NewLine
196242Di2015UniqueSeparatorstring unformattedXml = "<?xml version=\\"1.0\\"?><book><author>Lewis, C.S.</author><title>The Four Loves</title></book>";Di2015NewLinestring formattedXml = XElement.Parse(unformattedXml).ToString();Di2015NewLineConsole.WriteLine(formattedXml);Di2015NewLine
196242Di2015UniqueSeparator<book>Di2015NewLine  <author>Lewis, C.S.</author>Di2015NewLine  <title>The Four Loves</title>Di2015NewLine</book>Di2015NewLine
196242Di2015UniqueSeparator  XElement.Parse(unformattedXml).Save(@"C:\\doc.xml");Di2015NewLine  Console.WriteLine(File.ReadAllText(@"C:\\doc.xml"));Di2015NewLine
196242Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine<book>Di2015NewLine  <author>Lewis, C.S.</author>Di2015NewLine  <title>The Four Loves</title>Di2015NewLine</book>Di2015NewLine
196397Di2015UniqueSeparatorunsafe
196451Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Windows;Di2015NewLineusing System.Windows.Controls;Di2015NewLineusing System.Windows.Input;Di2015NewLineusing System.Windows.Media;Di2015NewLineusing System.Windows.Shapes;Di2015NewLineDi2015NewLineclass Tree<T>   // use null for LeafDi2015NewLine{Di2015NewLine    public T Data { get; private set; }Di2015NewLine    public Tree<T> Left { get; private set; }Di2015NewLine    public Tree<T> Right { get; private set; }Di2015NewLine    public Tree(T x, Tree<T> l, Tree<T> r)Di2015NewLine    {Di2015NewLine        this.Data = x;Di2015NewLine        this.Left = l;Di2015NewLine        this.Right = r;Di2015NewLine    }Di2015NewLine}Di2015NewLineclass TreeDi2015NewLine{Di2015NewLine    public static Tree<T> Node<T>(T x, Tree<T> l, Tree<T> r) { return new Tree<T>(x, l, r); }Di2015NewLine    public static Tree<int> Tree7 = Node(4, Node(2, Node(1, null, null), Node(3, null, null)),Di2015NewLine                                            Node(6, Node(5, null, null), Node(7, null, null)));Di2015NewLine    public static R XFoldTree<A, R>(Func<A, R, R, Tree<A>, R> nodeF, Func<Tree<A>, R> leafV, Tree<A> tree)Di2015NewLine    {Di2015NewLine        return Loop(nodeF, leafV, tree, x => x);Di2015NewLine    }Di2015NewLine    public static R Loop<A, R>(Func<A, R, R, Tree<A>, R> nodeF, Func<Tree<A>, R> leafV, Tree<A> t, Func<R, R> cont)Di2015NewLine    {Di2015NewLine        if (t == null)Di2015NewLine            return cont(leafV(t));Di2015NewLine        elseDi2015NewLine            return Loop(nodeF, leafV, t.Left, lacc =>Di2015NewLine                   Loop(nodeF, leafV, t.Right, racc =>Di2015NewLine                   cont(nodeF(t.Data, lacc, racc, t))));Di2015NewLine    }Di2015NewLine    public static R FoldTree<A, R>(Func<A, R, R, R> nodeF, R leafV, Tree<A> tree)Di2015NewLine    {Di2015NewLine        return XFoldTree((x, l, r, _) => nodeF(x, l, r), _ => leafV, tree);Di2015NewLine    }Di2015NewLine    public static Func<Tree<A>, Tree<A>> XNode<A>(A x, Tree<A> l, Tree<A> r)Di2015NewLine    {Di2015NewLine        return (Tree<A> t) => x.Equals(t.Data) && l == t.Left && r == t.Right ? t : Node(x, l, r);Di2015NewLine    }Di2015NewLine    // DiffTree: Tree<'a> * Tree<'a> -> Tree<'a * bool> Di2015NewLine    // return second tree with extra bool Di2015NewLine    // the bool signifies whether the Node "ReferenceEquals" the first tree Di2015NewLine    public static Tree<KeyValuePair<A, bool>> DiffTree<A>(Tree<A> tree, Tree<A> tree2)Di2015NewLine    {Di2015NewLine        return XFoldTree((A x, Func<Tree<A>, Tree<KeyValuePair<A, bool>>> l, Func<Tree<A>, Tree<KeyValuePair<A, bool>>> r, Tree<A> t) => (Tree<A> t2) =>Di2015NewLine            Node(new KeyValuePair<A, bool>(t2.Data, object.ReferenceEquals(t, t2)),Di2015NewLine                 l(t2.Left), r(t2.Right)),Di2015NewLine            x => y => null, tree)(tree2);Di2015NewLine    }Di2015NewLine}Di2015NewLineclass ExampleDi2015NewLine{Di2015NewLine    // original version recreates entire tree, yuck Di2015NewLine    public static Tree<int> Change5to0(Tree<int> tree)Di2015NewLine    {Di2015NewLine        return Tree.FoldTree((int x, Tree<int> l, Tree<int> r) => Tree.Node(x == 5 ? 0 : x, l, r), null, tree);Di2015NewLine    }Di2015NewLine    // here it is with XFold - same as original, only with Xs Di2015NewLine    public static Tree<int> XChange5to0(Tree<int> tree)Di2015NewLine    {Di2015NewLine        return Tree.XFoldTree((int x, Tree<int> l, Tree<int> r, Tree<int> orig) =>Di2015NewLine            Tree.XNode(x == 5 ? 0 : x, l, r)(orig), _ => null, tree);Di2015NewLine    }Di2015NewLine}Di2015NewLineclass MyWPFWindow : Window Di2015NewLine{Di2015NewLine    void Draw(Canvas canvas, Tree<KeyValuePair<int, bool>> tree)Di2015NewLine    {Di2015NewLine        // assumes canvas is normalized to 1.0 x 1.0 Di2015NewLine        Tree.FoldTree((KeyValuePair<int, bool> kvp, Func<Transform, Transform> l, Func<Transform, Transform> r) => trans =>Di2015NewLine        {Di2015NewLine            // current node in top half, centered left-to-right Di2015NewLine            var tb = new TextBox();Di2015NewLine            tb.Width = 100.0; Di2015NewLine            tb.Height = 100.0;Di2015NewLine            tb.FontSize = 70.0;Di2015NewLine                // the tree is a "diff tree" where the bool represents Di2015NewLine                // "ReferenceEquals" differences, so color diffs Red Di2015NewLine            tb.Foreground = (kvp.Value ? Brushes.Black : Brushes.Red);Di2015NewLine            tb.HorizontalContentAlignment = HorizontalAlignment.Center;Di2015NewLine            tb.VerticalContentAlignment = VerticalAlignment.Center;Di2015NewLine            tb.RenderTransform = AddT(trans, TranslateT(0.25, 0.0, ScaleT(0.005, 0.005, new TransformGroup())));Di2015NewLine            tb.Text = kvp.Key.ToString();Di2015NewLine            canvas.Children.Add(tb);Di2015NewLine            // left child in bottom-left quadrant Di2015NewLine            l(AddT(trans, TranslateT(0.0, 0.5, ScaleT(0.5, 0.5, new TransformGroup()))));Di2015NewLine            // right child in bottom-right quadrant Di2015NewLine            r(AddT(trans, TranslateT(0.5, 0.5, ScaleT(0.5, 0.5, new TransformGroup()))));Di2015NewLine            return null;Di2015NewLine        }, _ => null, tree)(new TransformGroup());Di2015NewLine    }Di2015NewLineDi2015NewLine    public MyWPFWindow(Tree<KeyValuePair<int, bool>> tree)Di2015NewLine    {Di2015NewLine        var canvas = new Canvas();Di2015NewLine        canvas.Width=1.0;Di2015NewLine        canvas.Height=1.0;Di2015NewLine        canvas.Background = Brushes.Blue;Di2015NewLine        canvas.LayoutTransform=new ScaleTransform(200.0, 200.0);Di2015NewLine        Draw(canvas, tree);Di2015NewLine        this.Content = canvas;Di2015NewLine        this.Title = "MyWPFWindow";Di2015NewLine        this.SizeToContent = SizeToContent.WidthAndHeight;Di2015NewLine    }Di2015NewLine    TransformGroup AddT(Transform t, TransformGroup tg) { tg.Children.Add(t); return tg; }Di2015NewLine    TransformGroup ScaleT(double x, double y, TransformGroup tg) { tg.Children.Add(new ScaleTransform(x,y)); return tg; }Di2015NewLine    TransformGroup TranslateT(double x, double y, TransformGroup tg) { tg.Children.Add(new TranslateTransform(x,y)); return tg; }Di2015NewLineDi2015NewLine    [STAThread]Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var app = new Application();Di2015NewLine        //app.Run(new MyWPFWindow(Tree.DiffTree(Tree.Tree7,Example.Change5to0(Tree.Tree7))));Di2015NewLine        app.Run(new MyWPFWindow(Tree.DiffTree(Tree.Tree7, Example.XChange5to0(Tree.Tree7))));Di2015NewLine    }Di2015NewLine}Di2015NewLine
196464Di2015UniqueSeparatorHttpContext.Current.Request.UrlDi2015NewLine
196464Di2015UniqueSeparatorHttpContext.Current.Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped)Di2015NewLine
196599Di2015UniqueSeparatoroutput = String.Format("{0:0000}", intVariable);Di2015NewLine
196607Di2015UniqueSeparatorusing (MyDataContext ctx = new MyDataContext())Di2015NewLine{Di2015NewLine    StringWriter sw = new StringWriter();Di2015NewLine    ctx.Log = sw;Di2015NewLineDi2015NewLine    // execute some LINQ to SQL operations...Di2015NewLineDi2015NewLine    string sql = sw.ToString();Di2015NewLine    // put a breakpoint here, log it to a file, etc...Di2015NewLine}Di2015NewLine
196681Di2015UniqueSeparatorITypedList
196681Di2015UniqueSeparatorIList
196681Di2015UniqueSeparatorPropertyDescriptor
196873Di2015UniqueSeparator    <Menu >Di2015NewLine    \<MenuItem Header="File">Di2015NewLine    \\<MenuItem Header="Open"/>Di2015NewLine    \\<MenuItem Header="Close"/>Di2015NewLine    \\<Separator/>Di2015NewLine    \\<ComboBox Width="85" Height="21.96" />Di2015NewLine    \</MenuItem>Di2015NewLine    </Menu>Di2015NewLine
196945Di2015UniqueSeparatorvar properties = this.GetType().GetProperties();Di2015NewLineforeach (PropertyInfo p in properties)Di2015NewLine{Di2015NewLine    object value = typeof(MyClass)Di2015NewLine    .GetMethod("DoStuff")Di2015NewLine    .MakeGenericMethod(p.PropertyType)Di2015NewLine    .Invoke(null, new object[] { p.Name });Di2015NewLine    p.SetValue(this, value, null);Di2015NewLine}Di2015NewLine
196945Di2015UniqueSeparatorstatic object DoStuff(string name, Type propertyType);Di2015NewLine... and thenDi2015NewLineobject value = DoStuff(p.Name, p.PropertyType);Di2015NewLine
196963Di2015UniqueSeparatorprotected override void OnPreRender(EventArgs e)Di2015NewLine{Di2015NewLine    base.OnPreRender(e);Di2015NewLine    ValueLinkButton tempLink = new ValueLinkButton(); // [CASE 2]        Di2015NewLine    tempLink.ID = "valueLinkButton"; // Not persisted to ViewStateDi2015NewLine    Controls.Clear();Di2015NewLine    Controls.Add(tempLink);Di2015NewLine    tempLink.Value = "new value";  // Persisted to ViewStateDi2015NewLine    tempLink.Text = "Click";       // Persisted to ViewStateDi2015NewLine}Di2015NewLine
197062Di2015UniqueSeparator// dict is Dictionary<string, Foo>Di2015NewLineDi2015NewLineFoo[] foos = new Foo[dict.Count];Di2015NewLinedict.Values.CopyTo(foos, 0);Di2015NewLineDi2015NewLine// or in C# 3.0:Di2015NewLinevar foos = dict.Values.ToArray();Di2015NewLine
197087Di2015UniqueSeparatorIEnumerable Flatten(IEnumerable array)Di2015NewLine{Di2015NewLine    foreach(var item in array)Di2015NewLine    {Di2015NewLine        if(item is IEnumerable)Di2015NewLine        {Di2015NewLine            foreach(var subitem in Flatten((IEnumerable)item))Di2015NewLine            {Di2015NewLine                yield return subitem;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            yield return item;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
197087Di2015UniqueSeparatorpublic static IEnumerable Flatten(this IEnumerable array)Di2015NewLine
197087Di2015UniqueSeparatorforeach(var item in myArray.Flatten()) { ... }Di2015NewLine
197141Di2015UniqueSeparatorThread.CurrentThread.CurrentUICulture
197141Di2015UniqueSeparator.CurrentCulture
197141Di2015UniqueSeparatorCultureInfo("en-US")
197326Di2015UniqueSeparatorMyType myvar = default(MyType);Di2015NewLinestring a = default(string);Di2015NewLine
197530Di2015UniqueSeparatorList<Foo> list = new List<Foo>();Di2015NewLine// ...Di2015NewLineCollection<Foo> col = new Collection<Foo>(list);Di2015NewLine
197826Di2015UniqueSeparator[Column(Storage="_ParentKey", DbType="Int")]Di2015NewLinepublic System.Nullable<int> ParentKeyDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return this._ParentKey;Di2015NewLine    }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        if ((this._ParentKey != value))Di2015NewLine        {Di2015NewLine            //This code is added by the associationDi2015NewLine            if (this._Parent.HasLoadedOrAssignedValue)Di2015NewLine            {Di2015NewLine                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();Di2015NewLine            }Di2015NewLine            //This code is present regardless of associationDi2015NewLine            this.OnParentKeyChanging(value);Di2015NewLine            this.SendPropertyChanging();Di2015NewLine            this._ParentKey = value;Di2015NewLine            this.SendPropertyChanged("ParentKey");Di2015NewLine            this.OnServiceAddrIDChanged();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
197826Di2015UniqueSeparator[Association(Name="Parent_Child", Storage="_Parent", ThisKey="ParentKey", IsForeignKey=true, DeleteRule="CASCADE")]Di2015NewLinepublic Parent ParentDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return this._Parent.Entity;Di2015NewLine    }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        Parent previousValue = this._Parent.Entity;Di2015NewLine        if (((previousValue != value) Di2015NewLine                    || (this._Parent.HasLoadedOrAssignedValue == false)))Di2015NewLine        {Di2015NewLine            this.SendPropertyChanging();Di2015NewLine            if ((previousValue != null))Di2015NewLine            {Di2015NewLine                this._Parent.Entity = null;Di2015NewLine                previousValue.Exemptions.Remove(this);Di2015NewLine            }Di2015NewLine            this._Parent.Entity = value;Di2015NewLine            if ((value != null))Di2015NewLine            {Di2015NewLine                value.Exemptions.Add(this);Di2015NewLine                this._ParentKey = value.ParentKey;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                this._ParentKey = default(Nullable<int>);Di2015NewLine            }Di2015NewLine            this.SendPropertyChanged("Parent");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
198263Di2015UniqueSeparator[ActiveRecord(Table = "NewsMaster")]Di2015NewLinepublic class ArticleDi2015NewLine{Di2015NewLine    [PrimaryKey(Generator = PrimaryKeyType.Identity)]Di2015NewLine    public int NewsId { get; set; }Di2015NewLineDi2015NewLine    [Property(Column = "NewsHeadline")]Di2015NewLine    public string Headline { get; set; }Di2015NewLineDi2015NewLine    [Property(Column = "EffectiveStartDate")]Di2015NewLine    public DateTime StartDate { get; set; }Di2015NewLineDi2015NewLine    [Property(Column = "EffectiveEndDate")]Di2015NewLine    public DateTime EndDate { get; set; }Di2015NewLineDi2015NewLine    [Property]Di2015NewLine    public string NewsBlurb { get; set; }Di2015NewLine}Di2015NewLine
198263Di2015UniqueSeparator    [Test]Di2015NewLine    public void Can_get_table_name()Di2015NewLine    {Di2015NewLine        var attribs = typeof(Article).GetCustomAttributes(typeof(Castle.ActiveRecord.ActiveRecordAttribute), false);Di2015NewLineDi2015NewLine        if (attribs != null)Di2015NewLine        {Di2015NewLine            var attrib = (Castle.ActiveRecord.ActiveRecordAttribute) attribs[0];Di2015NewLine            Assert.AreEqual("NewsMaster", attrib.Table);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
198290Di2015UniqueSeparatorFormBorderStyle
198290Di2015UniqueSeparatorForm
198290Di2015UniqueSeparatorNone
198290Di2015UniqueSeparatorFixedDialog
198446Di2015UniqueSeparatorvar awGroups = from aw in _repository.GetAws()Di2015NewLinegroup aw by aw.AwType.ID into newGroup  //changed to group on IDDi2015NewLineselect newGroup;Di2015NewLineDi2015NewLineList<KeyValuePair<AwType, int>> RetGroups = new List<KeyValuePair<AwType, int>>();Di2015NewLineforeach (var group in awGroups)Di2015NewLine{Di2015NewLine    //changed to get the first element of the group and examine its AwTypeDi2015NewLine    RetGroups.Add(new KeyValuePair<AwType, int>(group.First().AwType, group.Count()));Di2015NewLine}Di2015NewLinereturn RetGroups;Di2015NewLine
198500Di2015UniqueSeparator1- CopyTo require to have a destination array when Clone return a new array.Di2015NewLine2- CopyTo let you specify an index (if required) to the destination array.Di2015NewLine
199159Di2015UniqueSeparatornamespace MadtasticDi2015NewLine{Di2015NewLine    public class CommentDi2015NewLine    {Di2015NewLine        private Madtastic.DataContext mdc;Di2015NewLine        private Madtastic.Entities.Comment comment;Di2015NewLineDi2015NewLine        public Int32 IDDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return comment.CommentsID;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public Madtastic.User OwnerDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return comment.User;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public Comment(Int32 commentID)Di2015NewLine        {            Di2015NewLine            mdc = new Madtastic.DataContext();Di2015NewLineDi2015NewLine            comment = (from c in mdc.CommentsDi2015NewLine                           where c.CommentsID == commentIDDi2015NewLine                           select c).FirstOrDefault();Di2015NewLineDi2015NewLine            if (comment == null)Di2015NewLine            {Di2015NewLine                comment = new Madtastic.Entities.Comment();Di2015NewLine    \    mdc.Comments.InsertOnSubmit(comment);Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        public void SubmitChanges()Di2015NewLine        {Di2015NewLineDi2015NewLine            mdc.SubmitChanges();Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        public void Delete()Di2015NewLine        {Di2015NewLine            mdc.Comments.DeleteOnSubmit(comment);Di2015NewLine            SubmitChanges();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
199254Di2015UniqueSeparator<html>Di2015NewLine  <head>Di2015NewLine     <script language="javascript" type="text/javascript">Di2015NewLine     <!--Di2015NewLine        var ajax = new XMLHttpRequest();Di2015NewLineDi2015NewLine        function pingSite() {Di2015NewLine           ajax.onreadystatechange = stateChanged;Di2015NewLine           ajax.open('GET', document.getElementById('siteToCheck').value, true);Di2015NewLine           ajax.send(null);Di2015NewLine        }Di2015NewLineDi2015NewLine        function stateChanged() {Di2015NewLine           if (ajax.readyState == 4) {Di2015NewLine              if (ajax.status == 200) {Di2015NewLine                 document.getElementById('statusLabel').innerHTML = "Success!";Di2015NewLine              }Di2015NewLine              else {Di2015NewLine                 document.getElementById('statusLabel').innerHTML = "Failure!";Di2015NewLine              }Di2015NewLine           }Di2015NewLine        }Di2015NewLine     -->Di2015NewLine     </script>Di2015NewLine  </head>Di2015NewLineDi2015NewLine  <body>Di2015NewLine     Site To Check:<br />Di2015NewLine     <input type="text" id="siteToCheck" /><input type="button" onclick="javascript:pingSite()" />Di2015NewLineDi2015NewLine     <p>Di2015NewLine        <span id="statusLabel"></span>Di2015NewLine     </p>Di2015NewLine  </body>Di2015NewLine
199278Di2015UniqueSeparatorBackColor
199278Di2015UniqueSeparatorDateTimePicker
199278Di2015UniqueSeparatorDateTimePicker
199278Di2015UniqueSeparatorBackColor
199278Di2015UniqueSeparatorWndProc
199278Di2015UniqueSeparatorBackColor
199278Di2015UniqueSeparatormyDTPicker.Invalidate()
199278Di2015UniqueSeparatorconst int WM_ERASEBKGND = 0x14;Di2015NewLineprotected override void WndProc(ref System.Windows.Forms.Message m)Di2015NewLine{Di2015NewLine     if(m.Msg == WM_ERASEBKGND)Di2015NewLine     {Di2015NewLine       Graphics g = Graphics.FromHdc(m.WParam);Di2015NewLine       g.FillRectangle(new SolidBrush(_backColor), ClientRectangle);Di2015NewLine       g.Dispose();Di2015NewLine       return;Di2015NewLine     }Di2015NewLineDi2015NewLine     base.WndProc(ref m);Di2015NewLine}Di2015NewLine
199307Di2015UniqueSeparatorprivate List<Rule> _Rules;Di2015NewLine[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]Di2015NewLinepublic List<Rule> RulesDi2015NewLine{Di2015NewLine    get { return _Rules; }Di2015NewLine}Di2015NewLine
199332Di2015UniqueSeparatorstring s = "<?xml version=\\"1.0\\"?><tag1><tag2>Some text.</taagg2></tag1>";Di2015NewLineSystem.Xml.XmlDocument doc = new System.Xml.XmlDocument();Di2015NewLineDi2015NewLinetryDi2015NewLine{Di2015NewLine    doc.LoadXml(s);Di2015NewLine}Di2015NewLinecatch(System.Xml.XmlException ex)Di2015NewLine{Di2015NewLine    MessageBox.Show(ex.LineNumber.ToString());Di2015NewLine    MessageBox.Show(ex.LinePosition.ToString());Di2015NewLine}Di2015NewLine
199406Di2015UniqueSeparatorScriptEngine engine = Python.CreateEngine();Di2015NewLineScriptSource source = engine.CreateScriptSourceFromString("2 + 5", SourceCodeKind.Expression);Di2015NewLineint result = source.Execute<int>();Di2015NewLine
199406Di2015UniqueSeparatorSourceCodeKind
199534Di2015UniqueSeparatorConsole.Read()
199534Di2015UniqueSeparatorConsole.ReadLine()
199534Di2015UniqueSeparatorcat
199534Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        string s;Di2015NewLine        while ((s = Console.ReadLine()) != null)Di2015NewLine        {Di2015NewLine            Console.WriteLine(s);Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
199715Di2015UniqueSeparatorDataTable
199715Di2015UniqueSeparatorDataRow emptyRow = hierarchies.NewRow();Di2015NewLineemptyRow["guid"] = "";Di2015NewLineemptyRow["ObjectLogicalName"] = "";Di2015NewLinehierarchies.Rows.Add(emptyRow);Di2015NewLine
199715Di2015UniqueSeparatorDataView newView =           Di2015NewLine     new DataView(hierarchies,       // source tableDi2015NewLine     "",                             // filterDi2015NewLine     "ObjectLogicalName",            // sort by columnDi2015NewLine     DataViewRowState.CurrentRows);  // rows with state to displayDi2015NewLine
199715Di2015UniqueSeparatorDataSource
199715Di2015UniqueSeparatorComboBox
199715Di2015UniqueSeparatorComboBox
199715Di2015UniqueSeparatorSelectedIndex
199715Di2015UniqueSeparatorComboBox.DropDownStyle
199715Di2015UniqueSeparatorDropDownList
199715Di2015UniqueSeparatorComboBox
199750Di2015UniqueSeparatorSystem.Drawing.
199750Di2015UniqueSeparatorBitmap
199750Di2015UniqueSeparatorSystem.Drawing.dll
199750Di2015UniqueSeparatorMemoryImageSource
199750Di2015UniqueSeparatorImageTraverser
199767Di2015UniqueSeparatorHRESULT GetFoo([in] int bufferSize, [in, size_is(bufferSize)] int buffer[]);Di2015NewLine
199767Di2015UniqueSeparatormethod public hidebysig newslot virtual instance void GetFoo([in] int32 bufferSize, [in] int32& buffer) runtime managed internalcallDi2015NewLine
199767Di2015UniqueSeparatormethod public hidebysig newslot virtual instance void GetFoo([in] int32 bufferSize, [in] int32[] marshal([]) buffer) runtime managed internalcallDi2015NewLine
199767Di2015UniqueSeparatorint[] b = ...;Di2015NewLineGetFoo(b.Length, b);Di2015NewLine
199797Di2015UniqueSeparator T deserialize<T>(string jsonStr, T obj) { /* ... */}Di2015NewLineDi2015NewLine var jsonString = "{FirstName='Chris', LastName='Johnson, Other='unused'}";Di2015NewLine var person     = deserialize(jsonString, new {FirstName="",LastName=""});Di2015NewLine var x          = person.FirstName; //strongly-typedDi2015NewLine
199976Di2015UniqueSeparatorSystem.Reflection.Assembly.GetEntryAssembly().LocationDi2015NewLine
200185Di2015UniqueSeparatorBitmapImage bi = new BitmapImage(new Uri(@"C:\\SimpleImage.jpg"));Di2015NewLineImage image = new Image();Di2015NewLineimage.Source = bi;Di2015NewLineInlineUIContainer container = new InlineUIContainer(image);            Di2015NewLineParagraph paragraph = new Paragraph(container); Di2015NewLineRichTextBoxOutput.Document.Blocks.Add(paragraph);Di2015NewLine
200426Di2015UniqueSeparatorXmlSerializer
200426Di2015UniqueSeparatorDataContractSerializer
200429Di2015UniqueSeparatorSystem.Diagnostics.Process.Start(@"cscript //B //Nologo c:\\scripts\\vbscript.vbs");Di2015NewLine
200429Di2015UniqueSeparatorProcess scriptProc = new Process();Di2015NewLinescriptProc.StartInfo.FileName = @"cscript"; Di2015NewLinescriptProc.StartInfo.Arguments ="//B //Nologo c:\\scripts\\vbscript.vbs";Di2015NewLinescriptProc.StartInfo.WindowStyle = ProcessWindowStyle.Hidden; //prevent console window from popping upDi2015NewLinescriptProc.Start();Di2015NewLinescriptProc.WaitForExit();Di2015NewLinescriptProc.Close();Di2015NewLine
200429Di2015UniqueSeparatorStartInfo
200429Di2015UniqueSeparatorcscript
200506Di2015UniqueSeparatorBindingList<T>
200506Di2015UniqueSeparatorControl.Invoke
200553Di2015UniqueSeparator<(tag1|tag2|tag3)>(.*?)</$1>Di2015NewLine
200553Di2015UniqueSeparator<(?'name'tag1|tag2|tag3)>(?'value'.*?)</\\k'name'>.Di2015NewLine
200843Di2015UniqueSeparator[Browsable(true)]
200843Di2015UniqueSeparator[Browsable(false)]
200843Di2015UniqueSeparatorTextBox
200843Di2015UniqueSeparatorPropertyGrid
200881Di2015UniqueSeparator    public struct UnitDi2015NewLine    {   // the conversion operator...Di2015NewLine        public static implicit operator Unit(int value)Di2015NewLine        {Di2015NewLine            return new Unit(value);Di2015NewLine        }Di2015NewLine        // the boring stuff...Di2015NewLine        private readonly int value;Di2015NewLine        public int Value { get { return value; } }Di2015NewLine        public Unit(int value) { this.value = value; }Di2015NewLine    }Di2015NewLine
201092Di2015UniqueSeparatorNamespace Z
201092Di2015UniqueSeparatorEnd Namespace
201092Di2015UniqueSeparatornamespace X.Y
201192Di2015UniqueSeparatorErrorController IHasErrorControlloer.ErrorController {Di2015NewLine  get {return this.ErrorController;}Di2015NewLine  set {this.ErrorController = (DSErrorController)value;}Di2015NewLine}Di2015NewLine
201192Di2015UniqueSeparatorErrorController
201266Di2015UniqueSeparatorFieldInfo field = typeof(StructureToMarshalFrom).GetField("_value1");Di2015NewLineobject[] attributes = field.GetCustomAttributes(typeof(MarshalAsAttribute), false);Di2015NewLineMarshalAsAttribute marshal = (MarshalAsAttribute) attributes[0];Di2015NewLineint sizeConst = marshal.SizeConst;Di2015NewLine
201341Di2015UniqueSeparatorHtml.ActionLink(article.Title, Di2015NewLine                "Login",  // <-- Controller Name.Di2015NewLine                "Item",   // <-- ActionMethodDi2015NewLine                new { id = article.ArticleID }, // <-- Route arguments.Di2015NewLine                null  // <-- htmlArguments .. which are none. You need this valueDi2015NewLine                      //     otherwise you call the WRONG method ...Di2015NewLine                      //     (refer to comments, below).Di2015NewLine                )Di2015NewLine
201341Di2015UniqueSeparatorpublic static string ActionLink(this HtmlHelper htmlHelper, Di2015NewLine                                string linkText,Di2015NewLine                                string controllerName,Di2015NewLine                                string actionName,Di2015NewLine                                object values, Di2015NewLine                                object htmlAttributes)Di2015NewLine
201341Di2015UniqueSeparatorHtml.ActionLink(article.Title, Di2015NewLine                "Item",   // <-- ActionMethodDi2015NewLine                "Login",  // <-- Controller Name.Di2015NewLine                new { id = article.ArticleID }, // <-- Route arguments.Di2015NewLine                null  // <-- htmlArguments .. which are none. You need this valueDi2015NewLine                      //     otherwise you call the WRONG method ...Di2015NewLine                      //     (refer to comments, below).Di2015NewLine                )Di2015NewLine
201341Di2015UniqueSeparatorpublic static string ActionLink(this HtmlHelper htmlHelper, Di2015NewLine                                string linkText,Di2015NewLine                                string actionName,Di2015NewLine                                string controllerName,Di2015NewLine                                object values, Di2015NewLine                                object htmlAttributes)Di2015NewLine
201341Di2015UniqueSeparatorHtml.ActionLink(article.Title, Di2015NewLine                "Item",   // <-- ActionMethodDi2015NewLine                "Login",  // <-- Controller Name.Di2015NewLine                new { article.ArticleID }, // <-- Route arguments.Di2015NewLine                null  // <-- htmlArguments .. which are none. You need this valueDi2015NewLine                      //     otherwise you call the WRONG method ...Di2015NewLine                      //     (refer to comments, below).Di2015NewLine                )Di2015NewLine
201341Di2015UniqueSeparator <a href="/Item/Login/5">Title</a> Di2015NewLine
201341Di2015UniqueSeparatorroutes.MapRoute(Di2015NewLine    "Default",     // Route nameDi2015NewLine    "{controller}/{action}/{id}",                           // URL with parametersDi2015NewLine    new { controller = "Home", action = "Index", id = "" }  // Parameter defaultsDi2015NewLine);Di2015NewLine
201387Di2015UniqueSeparatorn = 27Di2015NewLinestart at floor(sqrt(27)) = 5Di2015NewLineis 5 a factor? noDi2015NewLineis 4 a factor? noDi2015NewLineis 3 a factor? yes. 27 / 3 = 9. 9 is also a factor.Di2015NewLineis 2 a factor? no.Di2015NewLinefactors are 3 and 9.Di2015NewLine
201645Di2015UniqueSeparatorSystem.IO.StreamReader.Dispose
201847Di2015UniqueSeparatorif (m_PreviousServerPath != newServerPath) { Di2015NewLine    if (!m_IsRootPathDi2015NewLine        && m_LoginState == FtpLoginState.LoggedInDi2015NewLine        && m_LoginDirectory != null)Di2015NewLine    { Di2015NewLine        newServerPath = m_LoginDirectory+newServerPath;Di2015NewLine    } Di2015NewLine    m_NewServerPath = newServerPath; Di2015NewLineDi2015NewLine    commandList.Add(new PipelineEntry(FormatFtpCommand("CWD", newServerPath), PipelineEntryFlags.UserCommand)); Di2015NewLine}Di2015NewLine
201889Di2015UniqueSeparatorDefaultButton="Login$LoginButton"Di2015NewLine
202050Di2015UniqueSeparatorfor(int i=0; i=< myCollection.Count; i++)Di2015NewLine{Di2015NewLine    ... myCollection[i] ...Di2015NewLine}Di2015NewLine
202050Di2015UniqueSeparatorfor(int i=0; i=< myCollection.Count; i++)Di2015NewLine{Di2015NewLine    ... ((Collection<MyType>)myCollection)[i] ...Di2015NewLine}Di2015NewLine
202099Di2015UniqueSeparatorpublic partial class _Login : BasePage Di2015NewLine { /* ... */ Di2015NewLine }Di2015NewLine
202099Di2015UniqueSeparatorType
202099Di2015UniqueSeparatortypeof(_Login)
202099Di2015UniqueSeparatorType GetCodeBehindType()Di2015NewLine { return getCodeBehindTypeRecursive(this.GetType());Di2015NewLine }Di2015NewLineDi2015NewLineType getCodeBehindTypeRecursive(Type t)Di2015NewLine { var baseType = t.BaseType;Di2015NewLine   if (baseType == typeof(BasePage)) return t;Di2015NewLine   else return getCodeBehindTypeRecursive(baseType);Di2015NewLine }Di2015NewLine
202383Di2015UniqueSeparatorpublic static ushort LowWord(uint val)Di2015NewLine{Di2015NewLine    return (ushort)val;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static ushort HighWord(uint val)Di2015NewLine{Di2015NewLine   return (ushort)(val >> 16);Di2015NewLine}Di2015NewLineDi2015NewLinepublic static uint BuildWParam(ushort low, ushort high)Di2015NewLine{Di2015NewLine    return ((uint)high << 16) | (uint)low;Di2015NewLine}Di2015NewLine
202474Di2015UniqueSeparatorSELECT UserNameDi2015NewLineFROM Tbl_UsersDi2015NewLineWHERE FREETEXT (UserName, 'bob' )Di2015NewLineDi2015NewLineResults:Di2015NewLineDi2015NewLineJimBobDi2015NewLineLittle Bobby TablesDi2015NewLine
202474Di2015UniqueSeparatorCONTAINSDi2015NewLine    ( { column | * } , '< contains_search_condition >' Di2015NewLine    ) Di2015NewLineDi2015NewLine< contains_search_condition > ::= Di2015NewLine        { < simple_term > Di2015NewLine        | < prefix_term > Di2015NewLine        | < generation_term > Di2015NewLine        | < proximity_term > Di2015NewLine        | < weighted_term > Di2015NewLine        } Di2015NewLine        | { ( < contains_search_condition > ) Di2015NewLine        { AND | AND NOT | OR } < contains_search_condition > [ ...n ] Di2015NewLine        } Di2015NewLineDi2015NewLine< simple_term > ::= Di2015NewLine    word | " phrase "Di2015NewLineDi2015NewLine< prefix term > ::= Di2015NewLine    { "word * " | "phrase * " }Di2015NewLineDi2015NewLine< generation_term > ::= Di2015NewLine    FORMSOF ( INFLECTIONAL , < simple_term > [ ,...n ] ) Di2015NewLineDi2015NewLine< proximity_term > ::= Di2015NewLine    { < simple_term > | < prefix_term > } Di2015NewLine    { { NEAR | ~ } { < simple_term > | < prefix_term > } } [ ...n ] Di2015NewLineDi2015NewLine< weighted_term > ::= Di2015NewLine    ISABOUT Di2015NewLine        ( { { Di2015NewLine                < simple_term > Di2015NewLine                | < prefix_term > Di2015NewLine                | < generation_term > Di2015NewLine                | < proximity_term > Di2015NewLine                } Di2015NewLine            [ WEIGHT ( weight_value ) ] Di2015NewLine            } [ ,...n ] Di2015NewLine        )Di2015NewLine
202474Di2015UniqueSeparatorSELECT UserNameDi2015NewLineFROM Tbl_UsersDi2015NewLineWHERE CONTAINS(UserName, '"little*" NEAR tables')Di2015NewLineDi2015NewLineResults:Di2015NewLineDi2015NewLineLittle Bobby TablesDi2015NewLine
202601Di2015UniqueSeparator<?phpDi2015NewLineDi2015NewLineecho PHP_INT_SIZE, "\\n", PHP_INT_MAX;Di2015NewLineDi2015NewLine?>Di2015NewLine
202601Di2015UniqueSeparator<?phpDi2015NewLineDi2015NewLineecho intval( "12345678901234567890" );Di2015NewLine// prints 2147483647, the max value for a 32 bit signed int.Di2015NewLine
202646Di2015UniqueSeparatorvoid DoSomething( MyClass value )Di2015NewLine{Di2015NewLine    if( value != null )Di2015NewLine    {Di2015NewLine        value.Method();Di2015NewLine    }Di2015NewLine}Di2015NewLine
202854Di2015UniqueSeparatorint[] terms = new int[400];Di2015NewLinefor (int runs = 0; runs < 400; runs++)Di2015NewLine{Di2015NewLine    terms[runs] = value;Di2015NewLine}Di2015NewLine
202854Di2015UniqueSeparatorList<int> list = new List<int>();Di2015NewLinefor (int runs = 0; runs < 400; runs++)Di2015NewLine{Di2015NewLine    list.Add(value);Di2015NewLine}Di2015NewLineDi2015NewLine// You can convert it back to an array if you would like toDi2015NewLineint[] terms = list.ToArray();Di2015NewLine
202880Di2015UniqueSeparatorPrivate Sub ProcessOfficeDocument(ByVal fileName As String)Di2015NewLine\Dim docDSO As New DSOFile.OleDocumentPropertiesClassDi2015NewLine\Dim docTitle, docModified, docAuthor, docKeywords As StringDi2015NewLine\TryDi2015NewLine\\docDSO.Open(fileName, True)Di2015NewLine\\Dim docSummary As DSOFile.SummaryProperties = docDSO.SummaryPropertiesDi2015NewLine\\docTitle = docSummary.TitleDi2015NewLine\\docAuthor = docSummary.AuthorDi2015NewLine\\docKeywords = docSummary.KeywordsDi2015NewLine\\docModified = CStr(docSummary.DateLastSaved)Di2015NewLineDi2015NewLine\\If (Not String.IsNullOrEmpty(docTitle)) ThenDi2015NewLine\\\_Title = docTitleDi2015NewLine\\End IfDi2015NewLineDi2015NewLine\\If (Not String.IsNullOrEmpty(docAuthor)) ThenDi2015NewLine\\\_Author = docAuthorDi2015NewLine\\End IfDi2015NewLineDi2015NewLine\\If (Not String.IsNullOrEmpty(docModified)) ThenDi2015NewLine\\\_DateModified = DateTime.Parse(docModified)Di2015NewLine\\End IfDi2015NewLineDi2015NewLine\Catch ex As ExceptionDi2015NewLine\\'Do whatever you need to do here...'Di2015NewLine\FinallyDi2015NewLine\\If (Not docDSO Is Nothing) ThenDi2015NewLine\\\docDSO.Close()Di2015NewLine\\End IfDi2015NewLine\End TryDi2015NewLineEnd SubDi2015NewLine
202896Di2015UniqueSeparatorHttpWebRequest.BeginGetResponse()
202896Di2015UniqueSeparatorHttpWebRequest webRequest;Di2015NewLineDi2015NewLinevoid StartWebRequest()Di2015NewLine{Di2015NewLine    webRequest.BeginGetResponse(new AsyncCallback(FinishWebRequest), null);Di2015NewLine}Di2015NewLineDi2015NewLinevoid FinishWebRequest(IAsyncResult result)Di2015NewLine{Di2015NewLine    webRequest.EndGetResponse(result);Di2015NewLine}Di2015NewLine
202896Di2015UniqueSeparatorEndGetResponse()
203160Di2015UniqueSeparatorSocket socket = ...;Di2015NewLineTcpClient client = new TcpClient();Di2015NewLineclient.Client = socket;Di2015NewLine
203289Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLineDi2015NewLine    private static bool _s_stop = false;Di2015NewLineDi2015NewLine    public static void Main(string[] args)Di2015NewLine    {Di2015NewLine        Console.CancelKeyPress += new ConsoleCancelEventHandler(Console_CancelKeyPress);Di2015NewLine        while (!_s_stop)Di2015NewLine        {Di2015NewLine            /* put real logic here */Di2015NewLine            Console.WriteLine("still running at {0}", DateTime.Now);Di2015NewLine            Thread.Sleep(3000);Di2015NewLine        }Di2015NewLine        Console.WriteLine("Graceful shut down code here...");Di2015NewLineDi2015NewLine        //don't leave this...  demonstration purposes only...Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs e)Di2015NewLine    {Di2015NewLine        //you have 2 options here, leave e.Cancel set to false and just handle anyDi2015NewLine        //graceful shutdown that you can while in here, or set a flag to notify the otherDi2015NewLine        //thread at the next check that it's to shut down.  I'll do the 2nd optionDi2015NewLine        e.Cancel = true;Di2015NewLine        _s_stop = true;Di2015NewLine        Console.WriteLine("CancelKeyPress fired...");Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
203389Di2015UniqueSeparator// given this enum:Di2015NewLinepublic enum FooDi2015NewLine{Di2015NewLine    Fizz = 3, Di2015NewLine    Bar = 1,Di2015NewLine    Bang = 2Di2015NewLine}Di2015NewLineDi2015NewLine// this gets FizzDi2015NewLinevar lastFoo = Enum.GetValues(typeof(Foo)).Cast<Foo>().Last();Di2015NewLine
203389Di2015UniqueSeparatorvar lastFoo = Enum.GetValues(typeof(Foo)).Cast<Foo>().Max();Di2015NewLine
203490Di2015UniqueSeparatorIcon ico = Icon.ExtractAssociatedIcon(theProcess.MainModule.FileName);Di2015NewLine
203581Di2015UniqueSeparatorXmlTextWriter
203581Di2015UniqueSeparatorstatic public string Beautify(XmlDocument doc)Di2015NewLine{Di2015NewLine    StringBuilder sb = new StringBuilder();Di2015NewLine    XmlWriterSettings settings = new XmlWriterSettings();Di2015NewLine    settings.Indent = true;Di2015NewLine    settings.IndentChars = "  ";Di2015NewLine    settings.NewLineChars = "\\r\\n";Di2015NewLine    settings.NewLineHandling = NewLineHandling.Replace;Di2015NewLine    using (XmlWriter writer = XmlWriter.Create(sb, settings)) {Di2015NewLine        doc.Save(writer);Di2015NewLine    }Di2015NewLine    return sb.ToString();Di2015NewLine}Di2015NewLine
203595Di2015UniqueSeparatorpublic class CrcBDi2015NewLine{Di2015NewLine    const ushort __crcBDefault = 0xffff;Di2015NewLineDi2015NewLine    private static ushort UpdateCrc(byte b, ushort crc)Di2015NewLine    {Di2015NewLine            uncheckedDi2015NewLine            {Di2015NewLine                byte ch = (byte)(b^(byte)(crc & 0x00ff));Di2015NewLine                ch = (byte)(ch ^ (ch << 4));Di2015NewLine                return (ushort)((crc >> 8)^(ch << 8)^(ch << 3)^(ch >> 4));Di2015NewLine            }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static ushort ComputeCrc(byte[] bytes)Di2015NewLine    {Di2015NewLine            var res = __crcBDefault;Di2015NewLine            foreach (var b in bytes)Di2015NewLine                    res = UpdateCrc(b, res);Di2015NewLine            return (ushort)~res;Di2015NewLine    }Di2015NewLine}Di2015NewLine
203595Di2015UniqueSeparator public static void Main(string[] args) Di2015NewLine {Di2015NewLine     // test case 1 0xFC, 0xD1Di2015NewLine     var bytes = new byte[] { 0x0F, 0xAA, 0xFF };Di2015NewLine     var crc = CrcB.ComputeCrc(bytes);Di2015NewLine     var cbytes = BitConverter.GetBytes(crc);Di2015NewLineDi2015NewLine     Console.WriteLine("First (0xFC): {0:X}\\tSecond (0xD1): {1:X}", cbytes[0], cbytes[1]);Di2015NewLineDi2015NewLine     // test case 2 0xCC, 0xC6Di2015NewLine     bytes = new byte[] { 0x00, 0x00, 0x00 };Di2015NewLine     crc = CrcB.ComputeCrc(bytes);Di2015NewLine     cbytes = BitConverter.GetBytes(crc);Di2015NewLine     Console.WriteLine("First (0xCC): {0:X}\\tSecond (0xC6): {1:X}", cbytes[0], cbytes[1]);Di2015NewLineDi2015NewLineDi2015NewLine     Console.ReadLine();Di2015NewLine}Di2015NewLine
203613Di2015UniqueSeparatorprivate string _heldCssClass = null;Di2015NewLinepublic override void RenderBeginTag(HtmlTextWriter writer)Di2015NewLine{Di2015NewLine   writer.AddAttribute(HtmlTextWriterAttribute.Class, this.CssClass);   Di2015NewLine   writer.RenderBeginTag("span");Di2015NewLine   _heldCssClass = this.CssClass;Di2015NewLine   this.CssClass = String.Empty;Di2015NewLine   base.RenderBeginTag(writer);Di2015NewLine}Di2015NewLineDi2015NewLinepublic override void RenderEndTag(HtmlTextWriter writer)Di2015NewLine{Di2015NewLine   writer.RenderEndTag();Di2015NewLine   base.RenderEndTag(writer);Di2015NewLine   this.CssClass = _heldCssClass;Di2015NewLine}Di2015NewLine
203850Di2015UniqueSeparatorActionFilterAttribute
203850Di2015UniqueSeparatorActionResult
203917Di2015UniqueSeparatorint sampleRate = 8000;Di2015NewLineshort[] buffer = new short[8000];Di2015NewLinedouble amplitude = 0.25 * short.MaxValue;Di2015NewLinedouble frequency = 1000;Di2015NewLinefor (int n = 0; n < buffer.Length; n++)Di2015NewLine{Di2015NewLine    buffer[n] = (short)(amplitude * Math.Sin((2 * Math.PI * n * frequency) / sampleRate));Di2015NewLine}Di2015NewLine
203962Di2015UniqueSeparator  byte[] data = ...Di2015NewLine  int len = data.Length;Di2015NewLine  byte[] prefix = Bitconverter.GetBytes(len);Di2015NewLine  stream.Write(prefix, 0, prefix.Length); // fixed 4 bytesDi2015NewLine  stream.Write(data, 0, data.Length);Di2015NewLine
204009Di2015UniqueSeparatornew
204009Di2015UniqueSeparatornew
204009Di2015UniqueSeparatornew Guid()
204009Di2015UniqueSeparatornew Guid(someString)
204009Di2015UniqueSeparatornew(...)
204009Di2015UniqueSeparatorGuid localVariable = new Guid(someString);Di2015NewLine
204009Di2015UniqueSeparatormyInstanceOrStaticVariable = new Guid(someString);Di2015NewLine
204009Di2015UniqueSeparatorstfld
204009Di2015UniqueSeparatorstsfld
204009Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinepublic class TestDi2015NewLine{Di2015NewLine    static Guid field;Di2015NewLineDi2015NewLine    static void Main() {}Di2015NewLine    static void MethodTakingGuid(Guid guid) {}Di2015NewLineDi2015NewLineDi2015NewLine    static void ParameterisedCtorAssignToField()Di2015NewLine    {Di2015NewLine        field = new Guid("");Di2015NewLine    }Di2015NewLineDi2015NewLine    static void ParameterisedCtorAssignToLocal()Di2015NewLine    {Di2015NewLine        Guid local = new Guid("");Di2015NewLine        // Force the value to be usedDi2015NewLine        local.ToString();Di2015NewLine    }Di2015NewLineDi2015NewLine    static void ParameterisedCtorCallMethod()Di2015NewLine    {Di2015NewLine        MethodTakingGuid(new Guid(""));Di2015NewLine    }Di2015NewLineDi2015NewLine    static void ParameterlessCtorAssignToField()Di2015NewLine    {Di2015NewLine        field = new Guid();Di2015NewLine    }Di2015NewLineDi2015NewLine    static void ParameterlessCtorAssignToLocal()Di2015NewLine    {Di2015NewLine        Guid local = new Guid();Di2015NewLine        // Force the value to be usedDi2015NewLine        local.ToString();Di2015NewLine    }Di2015NewLineDi2015NewLine    static void ParameterlessCtorCallMethod()Di2015NewLine    {Di2015NewLine        MethodTakingGuid(new Guid());Di2015NewLine    }Di2015NewLine}Di2015NewLine
204009Di2015UniqueSeparator.class public auto ansi beforefieldinit Test extends [mscorlib]System.Object    Di2015NewLine{Di2015NewLine    // Removed Test's constructor, Main, and MethodTakingGuid.Di2015NewLineDi2015NewLine    .method private hidebysig static void ParameterisedCtorAssignToField() cil managedDi2015NewLine    {Di2015NewLine        .maxstack 8Di2015NewLine        L_0001: ldstr ""Di2015NewLine        L_0006: newobj instance void [mscorlib]System.Guid::.ctor(string)Di2015NewLine        L_000b: stsfld valuetype [mscorlib]System.Guid Test::fieldDi2015NewLine        L_0010: ret     Di2015NewLine    }Di2015NewLineDi2015NewLine    .method private hidebysig static void ParameterisedCtorAssignToLocal() cil managedDi2015NewLine    {Di2015NewLine        .maxstack 2Di2015NewLine        .locals init ([0] valuetype [mscorlib]System.Guid guid)    Di2015NewLine        L_0001: ldloca.s guid    Di2015NewLine        L_0003: ldstr ""    Di2015NewLine        L_0008: call instance void [mscorlib]System.Guid::.ctor(string)    Di2015NewLine        // Removed ToString() callDi2015NewLine        L_001c: retDi2015NewLine    }Di2015NewLineDi2015NewLine    .method private hidebysig static void ParameterisedCtorCallMethod() cil  managed    Di2015NewLine    {   Di2015NewLine        .maxstack 8Di2015NewLine        L_0001: ldstr ""Di2015NewLine        L_0006: newobj instance void [mscorlib]System.Guid::.ctor(string)Di2015NewLine        L_000b: call void Test::MethodTakingGuid(valuetype [mscorlib]System.Guid)Di2015NewLine        L_0011: ret     Di2015NewLine    }Di2015NewLineDi2015NewLine    .method private hidebysig static void ParameterlessCtorAssignToField() cil managedDi2015NewLine    {Di2015NewLine        .maxstack 8Di2015NewLine        L_0001: ldsflda valuetype [mscorlib]System.Guid Test::fieldDi2015NewLine        L_0006: initobj [mscorlib]System.GuidDi2015NewLine        L_000c: ret Di2015NewLine    }Di2015NewLineDi2015NewLine    .method private hidebysig static void ParameterlessCtorAssignToLocal() cil managedDi2015NewLine    {Di2015NewLine        .maxstack 1Di2015NewLine        .locals init ([0] valuetype [mscorlib]System.Guid guid)Di2015NewLine        L_0001: ldloca.s guidDi2015NewLine        L_0003: initobj [mscorlib]System.GuidDi2015NewLine        // Removed ToString() callDi2015NewLine        L_0017: ret Di2015NewLine    }Di2015NewLineDi2015NewLine    .method private hidebysig static void ParameterlessCtorCallMethod() cil managedDi2015NewLine    {Di2015NewLine        .maxstack 1Di2015NewLine        .locals init ([0] valuetype [mscorlib]System.Guid guid)    Di2015NewLine        L_0001: ldloca.s guidDi2015NewLine        L_0003: initobj [mscorlib]System.GuidDi2015NewLine        L_0009: ldloc.0 Di2015NewLine        L_000a: call void Test::MethodTakingGuid(valuetype [mscorlib]System.Guid)Di2015NewLine        L_0010: ret Di2015NewLine    }Di2015NewLineDi2015NewLine    .field private static valuetype [mscorlib]System.Guid fieldDi2015NewLine}Di2015NewLine
204009Di2015UniqueSeparatornewobj
204009Di2015UniqueSeparatorcall instance
204009Di2015UniqueSeparatornew
204009Di2015UniqueSeparatorinitobj
204009Di2015UniqueSeparatorinitobj
204009Di2015UniqueSeparatornew
204009Di2015UniqueSeparatorvoid HowManyStackAllocations()Di2015NewLine{Di2015NewLine    Guid guid = new Guid();Di2015NewLine    // [...] Use guidDi2015NewLine    guid = new Guid(someBytes);Di2015NewLine    // [...] Use guidDi2015NewLine    guid = new Guid(someString);Di2015NewLine    // [...] Use guidDi2015NewLine}Di2015NewLine
204009Di2015UniqueSeparatornew
204009Di2015UniqueSeparatorguid
204009Di2015UniqueSeparatorGuid
204319Di2015UniqueSeparator// this is helper collection.Di2015NewLine// there are all wrapper objectsDi2015NewLine// , which should not be collected by GCDi2015NewLineprivate List<object> holdedObjects = new List<object>();Di2015NewLineDi2015NewLine// hooks necesary eventsDi2015NewLinevoid HookEvents() {Di2015NewLine    // finds button in commandbarsDi2015NewLine    CommandBarButton btnSomeButton = FindCommandBarButton( "MyButton ");Di2015NewLine    // hooks "Click" eventDi2015NewLine    btnSomeButton.Click += btnSomeButton_Click;Di2015NewLine    // add "btnSomeButton" object to collection andDi2015NewLine    // and prevent themfrom collecting by GCDi2015NewLine    holdedObjects.Add( btnSomeButton );Di2015NewLine}Di2015NewLine
204329Di2015UniqueSeparator    int? _yer;Di2015NewLine    int _ner;Di2015NewLineDi2015NewLine    public MyStruct(int? ver, int ner) {Di2015NewLineDi2015NewLine        _yer = ver;Di2015NewLine        _ner = ner;Di2015NewLine    }Di2015NewLine}Di2015NewLine
204329Di2015UniqueSeparator    Nullable<int> _yer;Di2015NewLine    int _ner;Di2015NewLineDi2015NewLine    public MyStruct(Nullable<int> ver, int ner) {Di2015NewLineDi2015NewLine        _yer = ver;Di2015NewLine        _ner = ner;Di2015NewLine    }Di2015NewLine}Di2015NewLine
204329Di2015UniqueSeparatorerror CS0568: Structs cannot contain explicit parameterless constructorsDi2015NewLine
204393Di2015UniqueSeparator  if (this.tcpClient == null)Di2015NewLine  {Di2015NewLine    this.tcpClient = new TcpClient();Di2015NewLine  }Di2015NewLineDi2015NewLine  tryDi2015NewLine  {Di2015NewLine    if (!this.tcpClient.Connected)Di2015NewLine    {Di2015NewLine      this.tcpClient.Connect(EthernetAddress, TcpPort);Di2015NewLine    }Di2015NewLine  }Di2015NewLine  catch(Exception ex)Di2015NewLine  {Di2015NewLine    throw new TimeoutException("The device did not respond.\\n" + ex.Message);Di2015NewLine  }Di2015NewLine
204508Di2015UniqueSeparatorstring methodName = "DoSomething"; // e.g. read from XMLDi2015NewLineMethodInfo method = typeof(Singleton).GetMethod(methodName);Di2015NewLineFieldInfo field = typeof(Singleton).GetField("instance",Di2015NewLine    BindingFlags.Static | BindingFlags.Public);Di2015NewLineobject instance = field.GetValue(null);Di2015NewLinemethod.Invoke(instance, Type.EmptyTypes);Di2015NewLine
204633Di2015UniqueSeparatorvar user = from u in dc.UserDi2015NewLine                   where u.UserName == usnDi2015NewLine                   select u;Di2015NewLine
204772Di2015UniqueSeparatorfooFlag == (this.Foo & fooFlag) // result is true iff all bits in fooFlag are setDi2015NewLineDi2015NewLineDi2015NewLine(this.Foo & fooFlag) != 0       // result is true if any bits in fooFlag are setDi2015NewLine
204870Di2015UniqueSeparatortry {Di2015NewLine  // Do something that might generate an exceptionDi2015NewLine} catch (System.InvalidCastException ex) {Di2015NewLine  // This exception is safe to ignore due to...Di2015NewLine} catch (System.Exception ex) {Di2015NewLine  // Exception handlingDi2015NewLine}Di2015NewLine
204992Di2015UniqueSeparatoreventRaised = true
204992Di2015UniqueSeparator<TestFixture()> _Di2015NewLinePublic Class TestDi2015NewLine    <Test()> _Di2015NewLine    Public Sub EventTest()Di2015NewLine        Dim eventClass As New EventClassDi2015NewLine        Dim eventRaised As Boolean = FalseDi2015NewLine        AddHandler eventClass.AnEvent, Function() (SetValueToTrue(eventRaised))Di2015NewLine        eventClass.RaiseIt()Di2015NewLine        Assert.IsTrue(eventRaised)Di2015NewLine    End SubDi2015NewLineDi2015NewLine    Private Function SetValueToTrue(ByRef value As Boolean) As BooleanDi2015NewLine        value = TrueDi2015NewLine        Return TrueDi2015NewLine    End FunctionDi2015NewLineDi2015NewLineEnd ClassDi2015NewLineDi2015NewLinePublic Class EventClassDi2015NewLine    Public Event AnEvent()Di2015NewLine    Public Sub RaiseIt()Di2015NewLine        RaiseEvent AnEvent()Di2015NewLine    End SubDi2015NewLineEnd ClassDi2015NewLine
204993Di2015UniqueSeparator<!-- To modify your build process, add your task inside one of the targets below and uncomment it. Other similar extension points exist, see Microsoft.Common.targets.Di2015NewLine<Target Name="BeforeBuild">Di2015NewLine</Target>Di2015NewLine<Target Name="AfterBuild">Di2015NewLine</Target>Di2015NewLine-->Di2015NewLine
204993Di2015UniqueSeparator<Target Name="AfterBuild" DependsOnTargets="AssignTargetPaths;Compile;ResolveKeySource" Inputs="$(MSBuildAllProjects);@(IntermediateAssembly)" Outputs="$(OutputPath)$(_SGenDllName)">Di2015NewLine   <!-- Delete the file because I can't figure out how to force the SGen task. -->Di2015NewLine   <DeleteDi2015NewLine     Files="$(TargetDir)$(TargetName).XmlSerializers.dll"Di2015NewLine     ContinueOnError="true" />Di2015NewLine   <SGenDi2015NewLine     BuildAssemblyName="$(TargetFileName)"Di2015NewLine     BuildAssemblyPath="$(OutputPath)"Di2015NewLine     References="@(ReferencePath)"Di2015NewLine     ShouldGenerateSerializer="true"Di2015NewLine     UseProxyTypes="false"Di2015NewLine     KeyContainer="$(KeyContainerName)"Di2015NewLine     KeyFile="$(KeyOriginatorFile)"Di2015NewLine     DelaySign="$(DelaySign)"Di2015NewLine     ToolPath="$(TargetFrameworkSDKToolsDirectory)"Di2015NewLine     Platform="$(Platform)">Di2015NewLine      <OutputDi2015NewLine       TaskParameter="SerializationAssembly"Di2015NewLine       ItemName="SerializationAssembly" />Di2015NewLine   </SGen>Di2015NewLine</Target>Di2015NewLine
205012Di2015UniqueSeparatorusing System.Security.Principal;Di2015NewLineDi2015NewLineDi2015NewLineSecurityIdentifier sid = new SecurityIdentifier("S-1-5-18");Di2015NewLineNTAccount acct = (NTAccount)sid.Translate(typeof(NTAccount));Di2015NewLineConsole.WriteLine(acct.Value);Di2015NewLine
205258Di2015UniqueSeparatorstrComputer = "."Di2015NewLineSet objWMIService = GetObject("winmgmts:" _Di2015NewLine    & "{impersonationLevel=impersonate}!\\\\" & strComputer & "\\root\\cimv2")Di2015NewLineSet colQuickFixes = objWMIService.ExecQuery _Di2015NewLine    ("Select * from Win32_QuickFixEngineering")Di2015NewLineFor Each objQuickFix in colQuickFixesDi2015NewLine    Wscript.Echo "Computer: " & objQuickFix.CSNameDi2015NewLine    Wscript.Echo "Description: " & objQuickFix.DescriptionDi2015NewLine    Wscript.Echo "Hot Fix ID: " & objQuickFix.HotFixIDDi2015NewLine    Wscript.Echo "Installation Date: " & objQuickFix.InstallDateDi2015NewLine    Wscript.Echo "Installed By: " & objQuickFix.InstalledByDi2015NewLineNextDi2015NewLine
205347Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLineDi2015NewLine        XmlWriter w = XmlTextWriter.Create("./foo.xml");Di2015NewLine        w.WriteStartElement("foo");Di2015NewLine        w.WriteString(" THIS   HAS VARYING     SPACeS ");Di2015NewLine        w.WriteEndElement();Di2015NewLine        w.Close();Di2015NewLineDi2015NewLine        StreamReader sr = new StreamReader("./foo.xml");Di2015NewLine        Console.WriteLine(sr.ReadToEnd());Di2015NewLine        Console.ReadKey();Di2015NewLine    }Di2015NewLine}Di2015NewLine
205353Di2015UniqueSeparator\public static bool ContainsXHTML(this string input)Di2015NewLine\{Di2015NewLine\\tryDi2015NewLine\\{Di2015NewLine\\\XElement x = XElement.Parse("<wrapper>" + input + "</wrapper>");Di2015NewLine\\\return !(x.DescendantNodes().Count() == 1 && x.DescendantNodes().First().NodeType == XmlNodeType.Text);Di2015NewLine\\}Di2015NewLine\\catch (XmlException ex)Di2015NewLine\\{Di2015NewLine\\\return true;Di2015NewLine\\}Di2015NewLine\}Di2015NewLine
205353Di2015UniqueSeparator\public static string ConvertXHTMLEntities(this string input)Di2015NewLine\{Di2015NewLine\\// Convert all ampersands to the ampersand entity.Di2015NewLine\\string output = input;Di2015NewLine\\output = output.Replace("&", "amp_token");Di2015NewLine\\output = output.Replace("&", "&");Di2015NewLine\\output = output.Replace("amp_token", "&");Di2015NewLineDi2015NewLine\\// Convert less than to the less than entity (without messing up tags).Di2015NewLine\\output = output.Replace("< ", "< ");Di2015NewLineDi2015NewLine\\return output;Di2015NewLine\}Di2015NewLine
205353Di2015UniqueSeparatorbool ContainsHTML = UserEnteredString.ConvertXHTMLEntities().ContainsXHTML();Di2015NewLine
205448Di2015UniqueSeparatorinput = Regex.Replace(input, @"(EQUIP:)(\\S+)", m => string.Format(@"<a title=""View equipment item {1}"" href=""/EquipmentDisplay.asp?eqnum={2}"">{0}{1}</a>", m.Groups[1].Value, m.Groups[2].Value, m.Groups[2].Value.ToUpper()), RegexOptions.IgnoreCase);Di2015NewLine
205448Di2015UniqueSeparatorvar input = Regex.Replace(input, @"(EQUIP:)(\\S+)", Evaluator, RegexOptions.IgnoreCase);Di2015NewLineDi2015NewLineprivate static string Evaluator(Match match)Di2015NewLine{Di2015NewLine    return string.Format(@"<a title=""View equipment item {1}"" href=""/EquipmentDisplay.asp?eqnum={2}"">{0}{1}</a>", match.Groups[1].Value, match.Groups[2].Value, match.Groups[2].Value.ToUpper());Di2015NewLine}Di2015NewLine
205904Di2015UniqueSeparatorusing System.Runtime.InteropServices;Di2015NewLineDi2015NewLine[DllImport("user32.dll")]Di2015NewLinestatic extern int SendMessage(IntPtr hWnd, uint wMsg, Di2015NewLine                               UIntPtr wParam, IntPtr lParam);Di2015NewLine
205904Di2015UniqueSeparatorSendMessage(myRichTextBox.Handle, (uint)0x00B6, (UIntPtr)0, (IntPtr)(-1));Di2015NewLine
206079Di2015UniqueSeparatorcatch(Exception E) Di2015NewLine{Di2015NewLine  ...Di2015NewLine  throw E;  //Explicitly rethrow the exceptionDi2015NewLine}Di2015NewLine
206227Di2015UniqueSeparatorpi.GetValue
206227Di2015UniqueSeparatorobject
206347Di2015UniqueSeparator// Start the child process.Di2015NewLine Process p = new Process();Di2015NewLine // Redirect the output stream of the child process.Di2015NewLine p.StartInfo.UseShellExecute = false;Di2015NewLine p.StartInfo.RedirectStandardOutput = true;Di2015NewLine p.StartInfo.FileName = "YOURBATCHFILE.bat";Di2015NewLine p.Start();Di2015NewLine // Do not wait for the child process to exit beforeDi2015NewLine // reading to the end of its redirected stream.Di2015NewLine // p.WaitForExit();Di2015NewLine // Read the output stream first and then wait.Di2015NewLine string output = p.StandardOutput.ReadToEnd();Di2015NewLine p.WaitForExit();Di2015NewLine
206615Di2015UniqueSeparatorpublic class PersonDi2015NewLine{Di2015NewLine   public Person()Di2015NewLine   {Di2015NewLine       this.FirstName = string.Empty;Di2015NewLine   }Di2015NewLineDi2015NewLine   public string FirstName { get; set; }Di2015NewLine}Di2015NewLine
206710Di2015UniqueSeparatorGetDate()
206720Di2015UniqueSeparatorRegexOptions options = RegexOptions.None;Di2015NewLineRegex regex = new Regex(@"[ ]{2,}", options);     Di2015NewLinetempo = regex.Replace(tempo, @" ");Di2015NewLine
206739Di2015UniqueSeparatorvar data = Cache["Record_999"] as DataTable;Di2015NewLineif (data == null) {Di2015NewLine    // get from dbDi2015NewLine    // insert into cacheDi2015NewLine}Di2015NewLineSetDataSource(data);Di2015NewLine
206829Di2015UniqueSeparatorfloat GetCalcResult(void)Di2015NewLine{Di2015NewLine    float retval = 0.0f;Di2015NewLineDi2015NewLine    HWND calc= FindWindow("SciCalc", "Calculator");Di2015NewLine    if (calc == NULL) {Di2015NewLine        calc= FindWindow("Calc", "Calculator");Di2015NewLine    }Di2015NewLine    if (calc == NULL) {Di2015NewLine        MessageBox(NULL, "calculator not found", "Error", MB_OK);Di2015NewLine        return 0.0f;Di2015NewLine    }Di2015NewLine    HWND calcEdit = FindWindowEx(calc, 0, "Edit", NULL);Di2015NewLine    if (calcEdit == NULL) {Di2015NewLine        MessageBox(NULL, "error finding calc edit box", "Error", MB_OK);Di2015NewLine        return 0.0f;Di2015NewLine    }Di2015NewLineDi2015NewLine    long len = SendMessage(calcEdit, WM_GETTEXTLENGTH, 0, 0) + 1;Di2015NewLine    char* temp = (char*) malloc(len);Di2015NewLine    SendMessage(calcEdit, WM_GETTEXT, len, (LPARAM) temp);Di2015NewLine    retval = atof(temp);Di2015NewLine    free(temp);Di2015NewLineDi2015NewLine    return retval;Di2015NewLine}Di2015NewLine
206842Di2015UniqueSeparator// This is just an example, obviously you'll want to pass args to this.Di2015NewLineProcess p1 = new Process();Di2015NewLinep1.StartInfo.FileName = "ApplyTransform.exe";Di2015NewLinep1.StartInfo.UseShellExecute = false;Di2015NewLinep1.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;Di2015NewLineDi2015NewLinep1.Start();Di2015NewLinep1.WaitForExit();Di2015NewLineDi2015NewLineif (p1.ExitCode == 1)    Di2015NewLine   Console.WriteLine("StackOverflow was thrown");Di2015NewLine
206842Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(CurrentDomain_UnhandledException);Di2015NewLine        throw new StackOverflowException();Di2015NewLine    }Di2015NewLineDi2015NewLine    // We trap this, we can't save the process, Di2015NewLine    // but we can prevent the "ILLEGAL OPERATION" window Di2015NewLine    static void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e)Di2015NewLine    {Di2015NewLine        if (e.IsTerminating)Di2015NewLine        {Di2015NewLine            Environment.Exit(1);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
206884Di2015UniqueSeparator// Updates the textbox text.Di2015NewLineprivate void UpdateText(string text)Di2015NewLine{Di2015NewLine  // Set the textbox text.Di2015NewLine  m_TextBox.Text = text;Di2015NewLine}Di2015NewLineDi2015NewLinepublic delegate void UpdateTextCallback(string text);Di2015NewLineDi2015NewLine// Then from your thread you can call this...Di2015NewLinem_TextBox.Invoke(new UpdateTextCallback(this.UpdateText),Di2015NewLine    new object[]{"Text generated on non-UI thread."});Di2015NewLine
206933Di2015UniqueSeparatorpublic static bool SetPixelFormat(IntPtr deviceContext, int pixelFormat, ref PIXELFORMATDESCRIPTOR pixelFormatDescriptor) {Di2015NewLine        Kernel.LoadLibrary("opengl32.dll");Di2015NewLine        return _SetPixelFormat(deviceContext, pixelFormat, ref pixelFormatDescriptor);Di2015NewLine    }Di2015NewLine
206933Di2015UniqueSeparator[DllImport("opengl32.dll", EntryPoint = "glGetString", CharSet = CharSet.Auto, SetLastError = true, ExactSpelling = true)]Di2015NewLinestatic extern IntPtr _glGetString(StringName name);Di2015NewLinepublic static string glGetString(StringName name)Di2015NewLine{Di2015NewLine    return Marshal.PtrToStringAnsi(_glGetString(name));Di2015NewLine}Di2015NewLinepublic enum StringName : uintDi2015NewLine{Di2015NewLine    GL_VENDOR = 0x1F00,Di2015NewLine    GL_RENDERER = 0x1F01,Di2015NewLine    GL_VERSION = 0x1F02,Di2015NewLine    GL_EXTENSIONS = 0x1F03Di2015NewLine}Di2015NewLine
206933Di2015UniqueSeparatorGL.glGetString(0);Di2015NewLine
207048Di2015UniqueSeparatorforeach (SPRoleAssignment spAssignment in workspace.RoleAssignments)Di2015NewLine{Di2015NewLine    if (spAssignment.Member.Name == shortName)Di2015NewLine    {Di2015NewLine        workspace.RoleAssignments.Remove(spAssignment);Di2015NewLine        break;Di2015NewLine    }Di2015NewLine}Di2015NewLine
207146Di2015UniqueSeparatorget
207146Di2015UniqueSeparatorset
207146Di2015UniqueSeparator public string Name { get; set; }Di2015NewLine public string name;Di2015NewLine
207203Di2015UniqueSeparator// IEnumerable sequence with keywords dataDi2015NewLinevar keywords = from kw in ga.ArticleKeywords.Elements("keyword")Di2015NewLine               select new {Di2015NewLine                   Name = (string)kw.Attribute("name"),Di2015NewLine                   Value = (string)kw.Attribute("value"),Di2015NewLine                   Display = (string)kw.Attribute("display")Di2015NewLine               };Di2015NewLineDi2015NewLineDi2015NewLineforeach (var keyword in keywords)Di2015NewLine{Di2015NewLine    var kw = "Name: " + keyword.Name + Di2015NewLine             " Value: " + keyword.Value + Di2015NewLine             " Display: " + keyword.Display;Di2015NewLine    Console.WriteLine(kw);Di2015NewLine}Di2015NewLine
207262Di2015UniqueSeparator((?!SIGSEC)\\w{3}(?:SEC|PRI))Di2015NewLine
207515Di2015UniqueSeparatorgacutil.exe \\i C:\\Path\\To\\Dll.dllDi2015NewLine
207753Di2015UniqueSeparatorpublic void Whatever(IRenderable renderable)Di2015NewLine{Di2015NewLine   if (renderable is ILocateable)Di2015NewLine   {Di2015NewLine      ((ILocateable) renderable).LocationChanged += myEventHandler;Di2015NewLine   }Di2015NewLineDi2015NewLine   // Do normal stuffDi2015NewLine}Di2015NewLine
207753Di2015UniqueSeparatorinterface IMappable: IRenderable, ILocateable {}Di2015NewLineDi2015NewLinepublic void Whatever(IMappable mappable)Di2015NewLine{Di2015NewLine   mappable.LocationChanged += myEventHandler;Di2015NewLineDi2015NewLine   // Do normal stuffDi2015NewLine}Di2015NewLine
207753Di2015UniqueSeparatorinterface IRenderable: ILocateableDi2015NewLine{Di2015NewLine  // IRenderable interfaceDi2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic void Whatever(IRenderable renderable)Di2015NewLine{Di2015NewLine   renderable.LocationChanged += myEventHandler;Di2015NewLineDi2015NewLine   // Do normal stuffDi2015NewLine}Di2015NewLine
207923Di2015UniqueSeparator"(&(objectCategory=Person)(memberOf=DN=GroupName, OU=Org, DC=domain,Di2015NewLineDC=com))"Di2015NewLine
208150Di2015UniqueSeparatorprivate EventHandler canExecuteChanged;Di2015NewLineDi2015NewLinepublic event EventHandler CanExecuteChangedDi2015NewLine{Di2015NewLine    addDi2015NewLine    {Di2015NewLine        CommandManager.RequerySuggested += value;Di2015NewLine        canExecuteChanged += value;Di2015NewLine    }Di2015NewLine    removeDi2015NewLine    {Di2015NewLine        CommandManager.RequerySuggested -= value;Di2015NewLine        canExecuteChanged -= value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
208201Di2015UniqueSeparatorAutoGenerateColumns
208201Di2015UniqueSeparatorfalse
208201Di2015UniqueSeparatorBoundColumns
208201Di2015UniqueSeparatora3
208201Di2015UniqueSeparatora4
208448Di2015UniqueSeparator<% Html.RenderPartial("~/Views/AnotherFolder/Messages.ascx", ViewData.Model.Successes); %>Di2015NewLine
208523Di2015UniqueSeparatorenum Foo { A = 1, B = 2, C = 3 }    Di2015NewLinestatic void Main()Di2015NewLine{Di2015NewLine    Foo foo = (Foo)500; // works fineDi2015NewLine    Console.WriteLine(foo); // also fine - shows 500Di2015NewLine}Di2015NewLine
208523Di2015UniqueSeparatordefault
208523Di2015UniqueSeparatorswitch
208523Di2015UniqueSeparator[Flags]
208523Di2015UniqueSeparatorbool isValid = Enum.IsDefined(typeof(Foo), foo);Di2015NewLine
208541Di2015UniqueSeparatorIf (Me.IsPostBack) ThenDi2015NewLineMe.Validate()Di2015NewLineIf (Not Me.IsValid) ThenDi2015NewLine    Dim msg As StringDi2015NewLine    ' Loop through all validation controls to see which Di2015NewLine    ' generated the error(s).Di2015NewLine    Dim oValidator As IValidatorDi2015NewLine    For Each oValidator In ValidatorsDi2015NewLine        If oValidator.IsValid = False ThenDi2015NewLine            msg = msg & "<br />" & oValidator.ErrorMessageDi2015NewLine        End IfDi2015NewLine    NextDi2015NewLine    Label1.Text = msgDi2015NewLineEnd IfDi2015NewLine
208683Di2015UniqueSeparatorIEnumerable<DataRow> sequence = dt.AsEnumerable();Di2015NewLine
208683Di2015UniqueSeparatorList<DataRow> list = dt.AsEnumerable().ToList();Di2015NewLine
208687Di2015UniqueSeparator[DefaultValue]
208687Di2015UniqueSeparator[XmlIgnore]
208740Di2015UniqueSeparator[PrincipalPermission(...)]
208740Di2015UniqueSeparatorINotifyPropertyChanged
208920Di2015UniqueSeparatorwebBrowser.AllowNavigation = false;Di2015NewLinewebBrowser.AllowWebBrowserDrop = false;Di2015NewLinewebBrowser.IsWebBrowserContextMenuEnabled = false;Di2015NewLinewebBrowser.WebBrowserShortcutsEnabled = false;Di2015NewLine
208920Di2015UniqueSeparator[ComVisible(true)]Di2015NewLinepublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    ......Di2015NewLine    webBrowser.ObjectForScripting = this;Di2015NewLine    ......Di2015NewLine    public void CallMeInForm(string something)Di2015NewLine    {Di2015NewLine        MessageBox.Show("Silverlight said: " + something);Di2015NewLine    }Di2015NewLine}Di2015NewLine
208920Di2015UniqueSeparatorusing System.Windows.Browser;Di2015NewLine......Di2015NewLineScriptObject myForm = (ScriptObject)HtmlPage.Window.GetProperty("external");Di2015NewLinemyForm.Invoke("CallMeInForm", "testing 1 2 3");Di2015NewLine
208920Di2015UniqueSeparatorHtmlPage.RegisterScriptableObject("Page", this);Di2015NewLine......Di2015NewLine[ScriptableMember]Di2015NewLinepublic void CallMeInSilverlight(string message)Di2015NewLine{Di2015NewLine    HtmlPage.Window.Alert("The form said: " + message);Di2015NewLine}Di2015NewLine
208920Di2015UniqueSeparatorid="silverlightControl"
208920Di2015UniqueSeparator<object>
208920Di2015UniqueSeparatordocument.getElementById('silverlightControl').Content.Page.CallMeInSilverlight("testing 1 2 3");Di2015NewLine
208920Di2015UniqueSeparatorPage
208920Di2015UniqueSeparatorRegisterScriptableObject()
208920Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine    function CallMe(message) {Di2015NewLine        var control = document.getElementById('silverlightControl');Di2015NewLine        control.Content.Page.CallMeInSilverlight(message);Di2015NewLine    }Di2015NewLine</script>Di2015NewLine
208920Di2015UniqueSeparatorCallMe()
208920Di2015UniqueSeparatorpublic void CallToSilverlight()Di2015NewLine{Di2015NewLine    webBrowser.InvokeScript("CallMe", new object[] { "testing 1 2 3" });Di2015NewLine}Di2015NewLine
209182Di2015UniqueSeparatorparamtype == typeof(DelayComposite)
209219Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    int? i = GetValueOrNull<int>(null, string.Empty);Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic static Nullable<T> GetValueOrNull<T>(DbDataRecord reader, string columnName) where T : structDi2015NewLine{Di2015NewLine    object columnValue = reader[columnName];Di2015NewLineDi2015NewLine    if (!(columnValue is DBNull))Di2015NewLine    \return (T)columnValue;Di2015NewLineDi2015NewLine    return null;Di2015NewLine}Di2015NewLine
209256Di2015UniqueSeparator<roleManager defaultProvider="WindowsProvider" Di2015NewLine  enabled="true"Di2015NewLine  cacheRolesInCookie="false">Di2015NewLine  <providers>Di2015NewLine    <addDi2015NewLine      name="WindowsProvider"Di2015NewLine      type="System.Web.Security.WindowsTokenRoleProvider" />Di2015NewLine  </providers>Di2015NewLine</roleManager>Di2015NewLine
209259Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine  System.IO.StreamReader sr=new System.IO.StreamReader(@"c:\\does-not-exist");Di2015NewLine}Di2015NewLinecatch(Exception ex)Di2015NewLine{Di2015NewLine  Console.WriteLine(ex.ToString()); //Will display localized messageDi2015NewLine  ExceptionLogger el = new ExceptionLogger(ex);Di2015NewLine  System.Threading.Thread t = new System.Threading.Thread(el.DoLog);Di2015NewLine  t.CurrentUICulture = new System.Globalization.CultureInfo("en-US");Di2015NewLine  t.Start();Di2015NewLine}Di2015NewLine
209259Di2015UniqueSeparatorclass ExceptionLoggerDi2015NewLine{Di2015NewLine  Exception _ex;Di2015NewLineDi2015NewLine  public ExceptionLogger(Exception ex)Di2015NewLine  {Di2015NewLine    _ex = ex;Di2015NewLine  }Di2015NewLineDi2015NewLine  public void DoLog()Di2015NewLine  {Di2015NewLine    Console.WriteLine(_ex.ToString()); //Will display en-US messageDi2015NewLine  }Di2015NewLine}Di2015NewLine
209261Di2015UniqueSeparatorSomeGeneric<VeryLongTypename<NestedTypename>> thing = new   Di2015NewLineSomeGeneric<VeryLongTypename<NestedTypename>>();Di2015NewLine
209261Di2015UniqueSeparatorvar thing = new SomeGeneric<VeryLongTypename<NestedTypename>>();Di2015NewLine
209267Di2015UniqueSeparatorSystem.IntPtr
209267Di2015UniqueSeparator [DllImport("thirdparty.dll")]Di2015NewLine static extern long ThirdPartyFunction(ref IntPtr arg);Di2015NewLineDi2015NewLine long f(int[] array)Di2015NewLine  { long retval = 0;Di2015NewLine    int  size   = Marshal.SizeOf(typeof(int));Di2015NewLine    var  ptr    = IntPtr.Zero;Di2015NewLineDi2015NewLine    try Di2015NewLine     { ptr = Marshal.AllocHGlobal(size * array.Length);Di2015NewLineDi2015NewLine       for (int i= 0; i < array.Length; ++i) Di2015NewLine        { IntPtr tmpPtr = new IntPtr(ptr.ToInt64() + (i * size));Di2015NewLine          Marshal.StructureToPtr(array, tmpPtr, false);Di2015NewLine        }Di2015NewLineDi2015NewLine       retval = ThirdPartyFunction(ref ptr);Di2015NewLine     }Di2015NewLine    finally Di2015NewLine     { if (ptr != IntPtr.Zero) Marshal.FreeHGlobal(ptr);Di2015NewLine     }Di2015NewLineDi2015NewLine    return retval;Di2015NewLine  }Di2015NewLine
209278Di2015UniqueSeparator<ServerEXE>.config
209278Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8" ?>Di2015NewLine<configuration>Di2015NewLine   <system.runtime.remoting>    Di2015NewLine      <customErrors mode="off" />Di2015NewLine   </system.runtime.remoting>Di2015NewLine</configuration>Di2015NewLine
209319Di2015UniqueSeparatorfoo.notify() => Monitor.Pulse(foo)Di2015NewLinefoo.notifyAll() => Monitor.PulseAll(foo)Di2015NewLinefoo.wait() =>  Monitor.Wait(foo)Di2015NewLine
209319Di2015UniqueSeparatorlock
209319Di2015UniqueSeparatorMonitor.Enter
209319Di2015UniqueSeparatorMonitor.Exit
209395Di2015UniqueSeparatorstring initialValue = "010";Di2015NewLineint tempValue = Int.Parse(initialValue) + 1;Di2015NewLinestring newValue = tempValue.ToString("000");Di2015NewLine
209395Di2015UniqueSeparator.ToString()
209442Di2015UniqueSeparatorpublic class CastableObject {Di2015NewLineDi2015NewLine    private UnitOfMeasurement eUnit; // Assign this somehowDi2015NewLineDi2015NewLine    public static implicit operator int(CastableObject obj) Di2015NewLine    {Di2015NewLine        if (obj.eUnit != UnitOfMeasurement.Numeric)Di2015NewLine        {Di2015NewLine            throw new InvalidCastException("Mismatched unit of measurement");Di2015NewLine        }Di2015NewLine        // return the numeric valueDi2015NewLine    }Di2015NewLineDi2015NewLine    // Create other cast operators for the other unit typesDi2015NewLine}Di2015NewLine
209498Di2015UniqueSeparatorif (success)Di2015NewLine                {Di2015NewLine                    lblSuccessMessage.Text = _successMessage;Di2015NewLine                    showMessage(true);                        Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    lblSuccessMessage.Text = _failureMessage;Di2015NewLine                    showMessage(false);Di2015NewLine                }Di2015NewLineDi2015NewLine                if(success) {Di2015NewLine                    Threading.Thread.Sleep(200)Di2015NewLine                    Response.Redirect(_downloadURL);Di2015NewLine                }Di2015NewLine
209498Di2015UniqueSeparatorif (success)Di2015NewLine                {Di2015NewLine                    lblSuccessMessage.Text = _successMessage + "<br /><INPUT TYPE='button' VALUE='Continue...' onClick='parent.location='" + _downloadURL + "'/>";Di2015NewLine                    showMessage(true);                        Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    lblSuccessMessage.Text = _failureMessage;Di2015NewLine                    showMessage(false);Di2015NewLine                }Di2015NewLine
209829Di2015UniqueSeparatorJButton button = new JButton("Push me!");Di2015NewLinebutton.addActionListener(new ActionListener() {Di2015NewLine    public void actionPerformed(ActionEvent e) {Di2015NewLine        System.out.println("Pressed!");Di2015NewLine    }Di2015NewLine});Di2015NewLine
209829Di2015UniqueSeparatorval button = new JButton("Push me!")Di2015NewLinebutton.addActionListener { e =>Di2015NewLine  println("Pressed!")Di2015NewLine}Di2015NewLine
209983Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Management;Di2015NewLineDi2015NewLinenamespace WindowsFormsApplication_CSDi2015NewLine{Di2015NewLine    class NetworkManagementDi2015NewLine    {Di2015NewLine        /// <summary>Di2015NewLine        /// Set's a new IP Address and it's Submask of the local machineDi2015NewLine        /// </summary>Di2015NewLine        /// <param name="ip_address">The IP Address</param>Di2015NewLine        /// <param name="subnet_mask">The Submask IP Address</param>Di2015NewLine        /// <remarks>Requires a reference to the System.Management namespace</remarks>Di2015NewLine        public void setIP(string ip_address, string subnet_mask)Di2015NewLine        {Di2015NewLine            ManagementClass objMC = new ManagementClass("Win32_NetworkAdapterConfiguration");Di2015NewLine            ManagementObjectCollection objMOC = objMC.GetInstances();Di2015NewLineDi2015NewLine            foreach (ManagementObject objMO in objMOC)Di2015NewLine            {Di2015NewLine                if ((bool)objMO["IPEnabled"])Di2015NewLine                {Di2015NewLine                    tryDi2015NewLine                    {Di2015NewLine                        ManagementBaseObject setIP;Di2015NewLine                        ManagementBaseObject newIP =Di2015NewLine                            objMO.GetMethodParameters("EnableStatic");Di2015NewLineDi2015NewLine                        newIP["IPAddress"] = new string[] { ip_address };Di2015NewLine                        newIP["SubnetMask"] = new string[] { subnet_mask };Di2015NewLineDi2015NewLine                        setIP = objMO.InvokeMethod("EnableStatic", newIP, null);Di2015NewLine                    }Di2015NewLine                    catch (Exception)Di2015NewLine                    {Di2015NewLine                        throw;Di2015NewLine                    }Di2015NewLineDi2015NewLineDi2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        /// <summary>Di2015NewLine        /// Set's a new Gateway address of the local machineDi2015NewLine        /// </summary>Di2015NewLine        /// <param name="gateway">The Gateway IP Address</param>Di2015NewLine        /// <remarks>Requires a reference to the System.Management namespace</remarks>Di2015NewLine        public void setGateway(string gateway)Di2015NewLine        {Di2015NewLine            ManagementClass objMC = new ManagementClass("Win32_NetworkAdapterConfiguration");Di2015NewLine            ManagementObjectCollection objMOC = objMC.GetInstances();Di2015NewLineDi2015NewLine            foreach (ManagementObject objMO in objMOC)Di2015NewLine            {Di2015NewLine                if ((bool)objMO["IPEnabled"])Di2015NewLine                {Di2015NewLine                    tryDi2015NewLine                    {Di2015NewLine                        ManagementBaseObject setGateway;Di2015NewLine                        ManagementBaseObject newGateway =Di2015NewLine                            objMO.GetMethodParameters("SetGateways");Di2015NewLineDi2015NewLine                        newGateway["DefaultIPGateway"] = new string[] { gateway };Di2015NewLine                        newGateway["GatewayCostMetric"] = new int[] { 1 };Di2015NewLineDi2015NewLine                        setGateway = objMO.InvokeMethod("SetGateways", newGateway, null);Di2015NewLine                    }Di2015NewLine                    catch (Exception)Di2015NewLine                    {Di2015NewLine                        throw;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        /// <summary>Di2015NewLine        /// Set's the DNS Server of the local machineDi2015NewLine        /// </summary>Di2015NewLine        /// <param name="NIC">NIC address</param>Di2015NewLine        /// <param name="DNS">DNS server address</param>Di2015NewLine        /// <remarks>Requires a reference to the System.Management namespace</remarks>Di2015NewLine        public void setDNS(string NIC, string DNS)Di2015NewLine        {Di2015NewLine            ManagementClass objMC = new ManagementClass("Win32_NetworkAdapterConfiguration");Di2015NewLine            ManagementObjectCollection objMOC = objMC.GetInstances();Di2015NewLineDi2015NewLine            foreach (ManagementObject objMO in objMOC)Di2015NewLine            {Di2015NewLine                if ((bool)objMO["IPEnabled"])Di2015NewLine                {Di2015NewLine                    // if you are using the System.Net.NetworkInformation.NetworkInterface you'll need to change this line to if (objMO["Caption"].ToString().Contains(NIC)) and pass in the Description property instead of the name Di2015NewLine                    if (objMO["Caption"].Equals(NIC))Di2015NewLine                    {Di2015NewLine                        tryDi2015NewLine                        {Di2015NewLine                            ManagementBaseObject newDNS =Di2015NewLine                                objMO.GetMethodParameters("SetDNSServerSearchOrder");Di2015NewLine                            newDNS["DNSServerSearchOrder"] = DNS.Split(',');Di2015NewLine                            ManagementBaseObject setDNS =Di2015NewLine                                objMO.InvokeMethod("SetDNSServerSearchOrder", newDNS, null);Di2015NewLine                        }Di2015NewLine                        catch (Exception)Di2015NewLine                        {Di2015NewLine                            throw;Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        /// <summary>Di2015NewLine        /// Set's WINS of the local machineDi2015NewLine        /// </summary>Di2015NewLine        /// <param name="NIC">NIC Address</param>Di2015NewLine        /// <param name="priWINS">Primary WINS server address</param>Di2015NewLine        /// <param name="secWINS">Secondary WINS server address</param>Di2015NewLine        /// <remarks>Requires a reference to the System.Management namespace</remarks>Di2015NewLine        public void setWINS(string NIC, string priWINS, string secWINS)Di2015NewLine        {Di2015NewLine            ManagementClass objMC = new ManagementClass("Win32_NetworkAdapterConfiguration");Di2015NewLine            ManagementObjectCollection objMOC = objMC.GetInstances();Di2015NewLineDi2015NewLine            foreach (ManagementObject objMO in objMOC)Di2015NewLine            {Di2015NewLine                if ((bool)objMO["IPEnabled"])Di2015NewLine                {Di2015NewLine                    if (objMO["Caption"].Equals(NIC))Di2015NewLine                    {Di2015NewLine                        tryDi2015NewLine                        {Di2015NewLine                            ManagementBaseObject setWINS;Di2015NewLine                            ManagementBaseObject wins =Di2015NewLine                            objMO.GetMethodParameters("SetWINSServer");Di2015NewLine                            wins.SetPropertyValue("WINSPrimaryServer", priWINS);Di2015NewLine                            wins.SetPropertyValue("WINSSecondaryServer", secWINS);Di2015NewLineDi2015NewLine                            setWINS = objMO.InvokeMethod("SetWINSServer", wins, null);Di2015NewLine                        }Di2015NewLine                        catch (Exception)Di2015NewLine                        {Di2015NewLine                            throw;Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        } Di2015NewLine    }Di2015NewLine}Di2015NewLine
210243Di2015UniqueSeparator+
210243Di2015UniqueSeparator{n}
210243Di2015UniqueSeparator{n}
210243Di2015UniqueSeparator+
210243Di2015UniqueSeparator+
210243Di2015UniqueSeparator"_ [ 0-9]{10} {1}[ 0-9]{10} {2}[ 0-9]{6} {2}[ 0-9]{2}"Di2015NewLine
210464Di2015UniqueSeparatorusing System.Net;Di2015NewLineusing System.Net.Sockets;Di2015NewLineDi2015NewLine[STAThread]Di2015NewLinestatic void Main(string[] args)Di2015NewLine{Di2015NewLine    Socket socket = new Socket(AddressFamily.InterNetwork,Di2015NewLine    SocketType.Dgram, ProtocolType.Udp);Di2015NewLine    socket.Bind(new IPEndPoint(IPAddress.Any, 8002));Di2015NewLine    socket.Connect(new IPEndPoint(IPAddress.Broadcast, 8001));Di2015NewLine    socket.Send(System.Text.ASCIIEncoding.ASCII.GetBytes("hello"));Di2015NewLineDi2015NewLine    int availableBytes = socket.Available;Di2015NewLine    if (availableBytes > 0)Di2015NewLine    {Di2015NewLine        byte[] buffer = new byte[availableBytes];Di2015NewLine        socket.Receive(buffer, 0, availableBytes, SocketFlags.None);Di2015NewLine        // buffer has the information on how to connect to the serverDi2015NewLine    }Di2015NewLine}Di2015NewLine
210618Di2015UniqueSeparatorfor (int i = 0; i < MyList.Count; i++)Di2015NewLine{Di2015NewLine    if (MyList[i] is ClassA)Di2015NewLine    {Di2015NewLine        var a = ((ClassA)MyList[i]).PropertyA;Di2015NewLine        // do stuff with aDi2015NewLine    }Di2015NewLineDi2015NewLine    if (MyList[i] is ClassB)Di2015NewLine    {Di2015NewLine        var b = ((ClassB)MyList[i]).PropertyB;Di2015NewLine        // do stuff with bDi2015NewLine    }Di2015NewLine}Di2015NewLine
210618Di2015UniqueSeparatorpublic class BaseClassDi2015NewLine{Di2015NewLine    public virtual void DoStuff() { }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ClassA : BaseClassDi2015NewLine{Di2015NewLine    public object PropertyA { get; set; }Di2015NewLineDi2015NewLine    public override void DoStuff() Di2015NewLine    {Di2015NewLine        // do stuff with PropertyA Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ClassB : BaseClassDi2015NewLine{Di2015NewLine    public object PropertyB { get; set; }Di2015NewLineDi2015NewLine    public override void DoStuff() Di2015NewLine    {Di2015NewLine        // do stuff with PropertyBDi2015NewLine    }Di2015NewLine}Di2015NewLine
210619Di2015UniqueSeparatorDateTime dt1 = DateTime.Now;Di2015NewLineDateTime dt2 = DateTime.Now.AddDays(1);Di2015NewLineDi2015NewLineint diff = dt2.Subtract(dt1).TotalMinutes;Di2015NewLine
210822Di2015UniqueSeparator<foo>Di2015NewLine  <bar>Di2015NewLine    <baz/>Di2015NewLine    <baz>Hello, world!</baz>Di2015NewLine    <baz><qux/></baz>Di2015NewLine  </bar>Di2015NewLine</foo>Di2015NewLine
210822Di2015UniqueSeparatorfoo/bar
210822Di2015UniqueSeparatorfoo/bar/*[count(*)>0]Di2015NewLine
210822Di2015UniqueSeparatorfoo/bar
210822Di2015UniqueSeparatorfoo/bar/*[text()]Di2015NewLine
210822Di2015UniqueSeparatornot(foo/bar/*[count(*)>0 or text()])Di2015NewLine
211389Di2015UniqueSeparatorint myInt = new int(3);Di2015NewLine
211462Di2015UniqueSeparatormyNewRow.myGuidColumn = myGuid == null ? (object)DBNull.Value : myGuid.ValueDi2015NewLine
211462Di2015UniqueSeparatorDEFAULT
211462Di2015UniqueSeparatorNULL
211491Di2015UniqueSeparatorprivate readonly object syncRoot = new object();Di2015NewLine
211894Di2015UniqueSeparatorglobal::
211894Di2015UniqueSeparatornamespace Foo.BarDi2015NewLine{Di2015NewLine    public enum MyEnumDi2015NewLine    {Di2015NewLine        France,Di2015NewLine        Belgium,Di2015NewLine        Brazil,Di2015NewLine        SwitzerlandDi2015NewLine    }Di2015NewLine}Di2015NewLine
211894Di2015UniqueSeparator<Column Name="ShipCountry" Type="Foo.Bar.MyEnum" DbType="NVarChar(15)" CanBeNull="true" />Di2015NewLine
211894Di2015UniqueSeparatorprivate Foo.Bar.MyEnum _ShipCountry;Di2015NewLine//...Di2015NewLine[Column(Storage="_ShipCountry", DbType="NVarChar(15)", CanBeNull=true)]Di2015NewLinepublic Foo.Bar.MyEnum ShipCountryDi2015NewLine{ get {...} set {...} }Di2015NewLine
211894Di2015UniqueSeparatorusing (DataClasses1DataContext ctx = new DataClasses1DataContext())Di2015NewLine{Di2015NewLine    var qry = from order in ctx.OrdersDi2015NewLine              where order.ShipCountry == Foo.Bar.MyEnum.BrazilDi2015NewLine                || order.ShipCountry == Foo.Bar.MyEnum.BelgiumDi2015NewLine              select order;Di2015NewLine    foreach (var order in qry.Take(10))Di2015NewLine    {Di2015NewLine        Console.WriteLine("{0}, {1}", order.OrderID, order.ShipCountry);Di2015NewLine    }Di2015NewLine}Di2015NewLine
211894Di2015UniqueSeparator10250, BrazilDi2015NewLine10252, BelgiumDi2015NewLine10253, BrazilDi2015NewLine10256, BrazilDi2015NewLine10261, BrazilDi2015NewLine10287, BrazilDi2015NewLine10290, BrazilDi2015NewLine10291, BrazilDi2015NewLine10292, BrazilDi2015NewLine10299, BrazilDi2015NewLine
211978Di2015UniqueSeparator        var groups = from row in testListDi2015NewLine                  group row by row.SomeTime;Di2015NewLine        foreach (var group in groups.OrderBy(group => group.Key))Di2015NewLine        {Di2015NewLine            Console.WriteLine(group.Key);Di2015NewLine            foreach(var item in group.OrderBy(item => item.SomePrice))Di2015NewLine            {Di2015NewLine                Console.WriteLine(item.SomePrice);Di2015NewLine            }Di2015NewLine            Console.WriteLine("Total" + group.Sum(x=>x.SomePrice));Di2015NewLine        }Di2015NewLine
212135Di2015UniqueSeparatorAssembly.GetExecutingAssembly().GetName().VersionDi2015NewLine
212210Di2015UniqueSeparatorpublic class SomeDisposableType : IDisposableDi2015NewLine{Di2015NewLine   ...implmentation details...Di2015NewLine}Di2015NewLine
212210Di2015UniqueSeparatorSomeDisposableType t = new SomeDisposableType();Di2015NewLinetry {Di2015NewLine    OperateOnType(t);Di2015NewLine}Di2015NewLinefinally {Di2015NewLine   t.Dispose();Di2015NewLine}Di2015NewLine
212210Di2015UniqueSeparatorusing (SomeDisposableType u = new SomeDisposableType()) {Di2015NewLine    OperateOnType(u);Di2015NewLine}Di2015NewLine
212332Di2015UniqueSeparatorC:\\temp>runas RUNAS USAGE:
212332Di2015UniqueSeparatorrunas /noprofile /user:mymachine\\administrator cmd
212332Di2015UniqueSeparatorrunas /profile /env /user:mydomain\\admin "mmc %windir%\\system32\\dsa.msc"
212332Di2015UniqueSeparatorrunas /env /user:user@domain.microsoft.com "notepad \\"my file.txt\\""
212436Di2015UniqueSeparatorprotected void ListView1_ItemInserting(object sender, System.Web.UI.WebControls.ListViewInsertEventArgs e)Di2015NewLine        {Di2015NewLine            e.Values["BranchID"] = DropDownList1.SelectedValue;Di2015NewLine        }Di2015NewLine
212512Di2015UniqueSeparatorpublic static T[] CreateProperties<T>(IProperty[] properties)Di2015NewLine    where T : class, new()Di2015NewLine{Di2015NewLine    //Empty so return nullDi2015NewLine    if (properties==null || properties.Length == 0)Di2015NewLine        return null;Di2015NewLineDi2015NewLine    //Check the type is allowedDi2015NewLine    CheckPropertyTypes("CreateProperties(Type,IProperty[])",typeof(T));Di2015NewLineDi2015NewLine    //Convert the array of intermediary IProperty objects intoDi2015NewLine    // the passed service type e.g. Service1.PropertyDi2015NewLine    T[] result = new T[properties.Length];Di2015NewLine    for (int i = 0; i < properties.Length; i++)Di2015NewLine    {Di2015NewLine        T[i] = new T();Di2015NewLine        ServiceUtils.CopyProperties(properties[i], t[i]);Di2015NewLine    }Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
212512Di2015UniqueSeparatorProperty[] props = ObjectFactory.CreateProperties<Property>(properties);Di2015NewLine_service.SetProperties(folderItem.Path, props);Di2015NewLine
212707Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Data;Di2015NewLineusing System.Security.Cryptography;Di2015NewLineusing System.IO;Di2015NewLineDi2015NewLineDi2015NewLinepublic class SimpleAESDi2015NewLine{Di2015NewLine    // Change these keysDi2015NewLine    private byte[] Key = { 123, 217, 19, 11, 24, 26, 85, 45, 114, 184, 27, 162, 37, 112, 222, 209, 241, 24, 175, 144, 173, 53, 196, 29, 24, 26, 17, 218, 131, 236, 53, 209 };Di2015NewLine    private byte[] Vector = { 146, 64, 191, 111, 23, 3, 113, 119, 231, 121, 2521, 112, 79, 32, 114, 156 };Di2015NewLineDi2015NewLineDi2015NewLine    private ICryptoTransform EncryptorTransform, DecryptorTransform;Di2015NewLine    private System.Text.UTF8Encoding UTFEncoder;Di2015NewLineDi2015NewLine    public SimpleAES()Di2015NewLine    {Di2015NewLine        //This is our encryption methodDi2015NewLine        RijndaelManaged rm = new RijndaelManaged();Di2015NewLineDi2015NewLine        //Create an encryptor and a decryptor using our encryption method, key, and vector.Di2015NewLine        EncryptorTransform = rm.CreateEncryptor(this.Key, this.Vector);Di2015NewLine        DecryptorTransform = rm.CreateDecryptor(this.Key, this.Vector);Di2015NewLineDi2015NewLine        //Used to translate bytes to text and vice versaDi2015NewLine        UTFEncoder = new System.Text.UTF8Encoding();Di2015NewLine    }Di2015NewLineDi2015NewLine    /// -------------- Two Utility Methods (not used but may be useful) -----------Di2015NewLine    /// Generates an encryption key.Di2015NewLine    static public byte[] GenerateEncryptionKey()Di2015NewLine    {Di2015NewLine        //Generate a Key.Di2015NewLine        RijndaelManaged rm = new RijndaelManaged();Di2015NewLine        rm.GenerateKey();Di2015NewLine        return rm.Key;Di2015NewLine    }Di2015NewLineDi2015NewLine    /// Generates a unique encryption vectorDi2015NewLine    static public byte[] GenerateEncryptionVector()Di2015NewLine    {Di2015NewLine        //Generate a VectorDi2015NewLine        RijndaelManaged rm = new RijndaelManaged();Di2015NewLine        rm.GenerateIV();Di2015NewLine        return rm.IV;Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    /// ----------- The commonly used methods ------------------------------    Di2015NewLine    /// Encrypt some text and return a string suitable for passing in a URL.Di2015NewLine    public string EncryptToString(string TextValue)Di2015NewLine    {Di2015NewLine        return ByteArrToString(Encrypt(TextValue));Di2015NewLine    }Di2015NewLineDi2015NewLine    /// Encrypt some text and return an encrypted byte array.Di2015NewLine    public byte[] Encrypt(string TextValue)Di2015NewLine    {Di2015NewLine        //Translates our text value into a byte array.Di2015NewLine        Byte[] bytes = UTFEncoder.GetBytes(TextValue);Di2015NewLineDi2015NewLine        //Used to stream the data in and out of the CryptoStream.Di2015NewLine        MemoryStream memoryStream = new MemoryStream();Di2015NewLineDi2015NewLine        /*Di2015NewLine         * We will have to write the unencrypted bytes to the stream,Di2015NewLine         * then read the encrypted result back from the stream.Di2015NewLine         */Di2015NewLine        #region Write the decrypted value to the encryption streamDi2015NewLine        CryptoStream cs = new CryptoStream(memoryStream, EncryptorTransform, CryptoStreamMode.Write);Di2015NewLine        cs.Write(bytes, 0, bytes.Length);Di2015NewLine        cs.FlushFinalBlock();Di2015NewLine        #endregionDi2015NewLineDi2015NewLine        #region Read encrypted value back out of the streamDi2015NewLine        memoryStream.Position = 0;Di2015NewLine        byte[] encrypted = new byte[memoryStream.Length];Di2015NewLine        memoryStream.Read(encrypted, 0, encrypted.Length);Di2015NewLine        #endregionDi2015NewLineDi2015NewLine        //Clean up.Di2015NewLine        cs.Close();Di2015NewLine        memoryStream.Close();Di2015NewLineDi2015NewLine        return encrypted;Di2015NewLine    }Di2015NewLineDi2015NewLine    /// The other side: Decryption methodsDi2015NewLine    public string DecryptString(string EncryptedString)Di2015NewLine    {Di2015NewLine        return Decrypt(StrToByteArray(EncryptedString));Di2015NewLine    }Di2015NewLineDi2015NewLine    /// Decryption when working with byte arrays.    Di2015NewLine    public string Decrypt(byte[] EncryptedValue)Di2015NewLine    {Di2015NewLine        #region Write the encrypted value to the decryption streamDi2015NewLine        MemoryStream encryptedStream = new MemoryStream();Di2015NewLine        CryptoStream decryptStream = new CryptoStream(encryptedStream, DecryptorTransform, CryptoStreamMode.Write);Di2015NewLine        decryptStream.Write(EncryptedValue, 0, EncryptedValue.Length);Di2015NewLine        decryptStream.FlushFinalBlock();Di2015NewLine        #endregionDi2015NewLineDi2015NewLine        #region Read the decrypted value from the stream.Di2015NewLine        encryptedStream.Position = 0;Di2015NewLine        Byte[] decryptedBytes = new Byte[encryptedStream.Length];Di2015NewLine        encryptedStream.Read(decryptedBytes, 0, decryptedBytes.Length);Di2015NewLine        encryptedStream.Close();Di2015NewLine        #endregionDi2015NewLine        return UTFEncoder.GetString(decryptedBytes);Di2015NewLine    }Di2015NewLineDi2015NewLine    /// Convert a string to a byte array.  NOTE: Normally we'd create a Byte Array from a string using an ASCII encoding (like so).Di2015NewLine    //      System.Text.ASCIIEncoding encoding = new System.Text.ASCIIEncoding();Di2015NewLine    //      return encoding.GetBytes(str);Di2015NewLine    // However, this results in character values that cannot be passed in a URL.  So, instead, I justDi2015NewLine    // lay out all of the byte values in a long string of numbers (three per - must pad numbers less than 100).Di2015NewLine    public byte[] StrToByteArray(string str)Di2015NewLine    {Di2015NewLine        if (str.Length == 0)Di2015NewLine            throw new Exception("Invalid string value in StrToByteArray");Di2015NewLineDi2015NewLine        byte val;Di2015NewLine        byte[] byteArr = new byte[str.Length / 3];Di2015NewLine        int i = 0;Di2015NewLine        int j = 0;Di2015NewLine        doDi2015NewLine        {Di2015NewLine            val = byte.Parse(str.Substring(i, 3));Di2015NewLine            byteArr[j++] = val;Di2015NewLine            i += 3;Di2015NewLine        }Di2015NewLine        while (i < str.Length);Di2015NewLine        return byteArr;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Same comment as above.  Normally the conversion would use an ASCII encoding in the other direction:Di2015NewLine    //      System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding();Di2015NewLine    //      return enc.GetString(byteArr);    Di2015NewLine    public string ByteArrToString(byte[] byteArr)Di2015NewLine    {Di2015NewLine        byte val;Di2015NewLine        string tempStr = "";Di2015NewLine        for (int i = 0; i <= byteArr.GetUpperBound(0); i++)Di2015NewLine        {Di2015NewLine            val = byteArr[i];Di2015NewLine            if (val < (byte)10)Di2015NewLine                tempStr += "00" + val.ToString();Di2015NewLine            else if (val < (byte)100)Di2015NewLine                tempStr += "0" + val.ToString();Di2015NewLine            elseDi2015NewLine                tempStr += val.ToString();Di2015NewLine        }Di2015NewLine        return tempStr;Di2015NewLine    }Di2015NewLine}Di2015NewLine
213207Di2015UniqueSeparatorpublic string UserDefinedFieldDi2015NewLine{Di2015NewLine    get { return _userDefinedField; }Di2015NewLine    set { SetField(value); ChangedFields.Add(Fields.UserDefinedField); }Di2015NewLine}Di2015NewLineDi2015NewLine// Call this from internal methods and use the public property for other casesDi2015NewLineinternal string SetField(string userValue)Di2015NewLine{Di2015NewLine    _userDefinedField = userValue;Di2015NewLine}Di2015NewLine
213305Di2015UniqueSeparatorString.Join(",", CType(TargetArrayList.ToArray(Type.GetType("System.String")), String()))Di2015NewLine
213305Di2015UniqueSeparatorstring.Join(",", (string[])TargetArrayList.ToArray(Type.GetType("System.String")))Di2015NewLine
213305Di2015UniqueSeparatorString.Join(",", TargetList.ToArray())Di2015NewLine
213403Di2015UniqueSeparatorpublic static class HousesDi2015NewLine{Di2015NewLine    public static Houses<T> CreateFromElements<T>(params T[] initialElements)Di2015NewLine    {Di2015NewLine        return new Houses<T>(initialElements);Di2015NewLine    }Di2015NewLineDi2015NewLine    public Houses<T> CreateFromDefault<T>(int count, T defaultValue)Di2015NewLine    {Di2015NewLine        return new Houses<T>(count, defaultValue);Di2015NewLine    }Di2015NewLine}Di2015NewLine
213403Di2015UniqueSeparatorHouses<string> x = Houses.CreateFromDefault(10, "hi");Di2015NewLineHouses<int> y = Houses.CreateFromElements(20, 30, 40);Di2015NewLine
213450Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinenamespace ExtensionLibraryDi2015NewLine{Di2015NewLine  public static class ExtensionsDi2015NewLine  {Di2015NewLine    public static string CustomExtension(this string text)Di2015NewLine    {Di2015NewLine      char[] chars = text.ToCharArray();Di2015NewLine      Array.Reverse(chars);Di2015NewLine      return new string(chars);Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
213450Di2015UniqueSeparatorImports ExtensionLibraryDi2015NewLineDi2015NewLineModule TestDi2015NewLineDi2015NewLine    Sub Main()Di2015NewLine        Console.WriteLine("Hello".CustomExtension())Di2015NewLine    End SubDi2015NewLineDi2015NewLineEnd ModuleDi2015NewLine
213582Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing System.Runtime.InteropServices;Di2015NewLineusing System.Threading;Di2015NewLineDi2015NewLinepublic class Test Di2015NewLine{Di2015NewLineDi2015NewLine    [DllImport("user32.dll")]Di2015NewLine    [return: MarshalAs(UnmanagedType.Bool)]Di2015NewLine    static extern bool SetForegroundWindow(IntPtr hWnd);Di2015NewLineDi2015NewLine    [DllImport("user32.dll", EntryPoint="FindWindow", SetLastError = true)]Di2015NewLine    static extern IntPtr FindWindowByCaption(IntPtr zeroOnly, string lpWindowName);Di2015NewLineDi2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine        string originalTitle = Console.Title;Di2015NewLine        string uniqueTitle = Guid.NewGuid().ToString();Di2015NewLine        Console.Title = uniqueTitle;Di2015NewLine        Thread.Sleep(50);Di2015NewLine        IntPtr handle = FindWindowByCaption(IntPtr.Zero, uniqueTitle);Di2015NewLineDi2015NewLine        if (handle == IntPtr.Zero)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Oops, cant find main window.");Di2015NewLine            return;Di2015NewLine        }Di2015NewLine        Console.Title = originalTitle;Di2015NewLineDi2015NewLine        while (true)Di2015NewLine        {Di2015NewLine            Thread.Sleep(3000);Di2015NewLine            Console.WriteLine(SetForegroundWindow(handle));Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
213599Di2015UniqueSeparatorX509Certificate2
213651Di2015UniqueSeparator// Backing fieldDi2015NewLine// The underscores just make it simpler to see what's going on here.Di2015NewLine// In the rest of your source code for this class, if you refer toDi2015NewLine// ElementAddedEvent, you're really referring to this field.Di2015NewLineprivate EventHandler<EventArgs> __ElementAddedEvent;Di2015NewLineDi2015NewLineDi2015NewLine// Actual eventDi2015NewLinepublic EventHandler<EventArgs> ElementAddedEventDi2015NewLine{Di2015NewLine    addDi2015NewLine    {Di2015NewLine        lock(this)Di2015NewLine        {Di2015NewLine            // Equivalent to __ElementAddedEvent += value;Di2015NewLine            __ElementAddedEvent = Delegate.Combine(__ElementAddedEvent, value);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    removeDi2015NewLine    {Di2015NewLine        lock(this)Di2015NewLine        {Di2015NewLine            // Equivalent to __ElementAddedEvent -= value;Di2015NewLine            __ElementAddedEvent = Delegate.Remove(__ElementAddedEvent, value);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
213651Di2015UniqueSeparatornull
213651Di2015UniqueSeparatornull
213651Di2015UniqueSeparatorpublic EventHandler<EventArgs> ElementAddedEvent = delegate {};Di2015NewLine
213651Di2015UniqueSeparatordelegate {}
213751Di2015UniqueSeparatorShow()
213751Di2015UniqueSeparatorShowDialog()
213751Di2015UniqueSeparatorlong
213751Di2015UniqueSeparatorNativeWindow
213751Di2015UniqueSeparatorpublic DialogResult ShowDialog(long hwnd)Di2015NewLine{Di2015NewLine   IntPtr handle = new IntPtr(hwnd);Di2015NewLine   tryDi2015NewLine   {Di2015NewLine      NativeWindow nativeWindow = new NativeWindow();Di2015NewLineDi2015NewLine      nativeWindow.AssignHandle(handle);Di2015NewLine      return this.ShowDialog(nativeWindow);Di2015NewLine   }Di2015NewLine   finallyDi2015NewLine   {Di2015NewLine      handle = IntPtr.Zero;Di2015NewLine   }Di2015NewLine}Di2015NewLine
214106Di2015UniqueSeparatorpublic static string GetParamName(System.Reflection.MethodInfo method, int index)Di2015NewLine{Di2015NewLine    string retVal = string.Empty;Di2015NewLineDi2015NewLine    if (method != null && method.GetParameters().Length > index)Di2015NewLine        retVal = method.GetParameters()[index].Name;Di2015NewLineDi2015NewLineDi2015NewLine    return retVal;Di2015NewLine}Di2015NewLine
214152Di2015UniqueSeparatorMe.WebBrowser1.Navigate("about:blank")Di2015NewLineApplication.DoEvents()Di2015NewLineMe.WebBrowser1.Document.OpenNew(False).Write("<html><body><div id=""editable"">Edit this text</div></body></html>")Di2015NewLineDi2015NewLine'turns off document body editingDi2015NewLineFor Each el As HtmlElement In Me.WebBrowser1.Document.AllDi2015NewLine    el.SetAttribute("unselectable", "on")Di2015NewLine    el.SetAttribute("contenteditable", "false")Di2015NewLineNextDi2015NewLineDi2015NewLine'turns on editable div editingDi2015NewLineWith Me.WebBrowser1.Document.Body.All("editable")Di2015NewLine    .SetAttribute("width", Me.Width & "px")Di2015NewLine    .SetAttribute("height", "100%")Di2015NewLine    .SetAttribute("contenteditable", "true")Di2015NewLineEnd WithDi2015NewLineDi2015NewLine'turns on edit modeDi2015NewLineMe.WebBrowser1.ActiveXInstance.Document.DesignMode = "On"Di2015NewLine'stops right click->Browse ViewDi2015NewLineMe.WebBrowser1.IsWebBrowserContextMenuEnabled = FalseDi2015NewLine
214159Di2015UniqueSeparatorIUserType
214167Di2015UniqueSeparatorprotected override bool ProcessCmdKey(ref Message msg, Keys keyData)Di2015NewLine{Di2015NewLine    const int WM_KEYDOWN = 0x100;Di2015NewLine    const int WM_SYSKEYDOWN = 0x104;Di2015NewLineDi2015NewLine    if ((msg.Msg == WM_KEYDOWN) || (msg.Msg == WM_SYSKEYDOWN))Di2015NewLine    {Di2015NewLine        switch (keyData)Di2015NewLine        {Di2015NewLine            case Keys.Down:Di2015NewLine                this.Text = "Down Arrow Captured";Di2015NewLine                break;Di2015NewLineDi2015NewLine            case Keys.Up:Di2015NewLine                this.Text = "Up Arrow Captured";Di2015NewLine                break;Di2015NewLineDi2015NewLine            case Keys.Tab:Di2015NewLine                this.Text = "Tab Key Captured";Di2015NewLine                break;Di2015NewLineDi2015NewLine            case Keys.Control | Keys.M:Di2015NewLine                this.Text = "<CTRL> + M Captured";Di2015NewLine                break;Di2015NewLineDi2015NewLine            case Keys.Alt | Keys.Z:Di2015NewLine                this.Text = "<ALT> + Z Captured";Di2015NewLine                break;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return base.ProcessCmdKey(ref msg, keyData);Di2015NewLine}Di2015NewLine
214216Di2015UniqueSeparatorvar resultSet = from customer in customerListDi2015NewLine    select new Di2015NewLine    {Di2015NewLine       Value = customer.firstName, Title = "First Name";Di2015NewLine    };Di2015NewLine
214577Di2015UniqueSeparatorthis.Controls.Add(new LiteralControl("<b>hello there</b>"));Di2015NewLine
214606Di2015UniqueSeparatorFlashObject.cs
214606Di2015UniqueSeparatornamespace MyNamespace Di2015NewLine{ Di2015NewLine using System.Web.UI;Di2015NewLineDi2015NewLine public class FlashObject : ControlDi2015NewLine { public int Width  {get;set}Di2015NewLine   public int Height {get;set}Di2015NewLine   [UrlProperty] pubic string SourceUrl {get;set;}Di2015NewLineDi2015NewLine   protected override Render(HtmlWriter writer)Di2015NewLine    { writer.WriteLine( "<object type='application/x-shockwave-flash' "Di2015NewLine                       +" data='{0}' width='{1}' height='{2}'>\\r\\n"Di2015NewLine                       +"    <param name='movie' value='{0}'>\\r\\n</object>"Di2015NewLine                       ,ResolveUrl(SourceUrl)Di2015NewLine                       ,WidthDi2015NewLine                       ,Height);Di2015NewLine    }Di2015NewLine }Di2015NewLine}Di2015NewLine
214606Di2015UniqueSeparatorWeb.config
214606Di2015UniqueSeparator  <system.web> Di2015NewLine     <controls>Di2015NewLine       <add tagPrefix="my" namespace="MyNamespace" assembly="MyAssembly" />Di2015NewLine     </controls>Di2015NewLine  </system.web>Di2015NewLine
214606Di2015UniqueSeparatorMyPage.aspx
214606Di2015UniqueSeparator <my:FlashObject SourceUrl='~/yourflash.swf' runat='server' />Di2015NewLine
214629Di2015UniqueSeparatoripep
214779Di2015UniqueSeparator        const string xmlNamespace = "{http://schemas.microsoft.com/developer/msbuild/2003}";Di2015NewLineDi2015NewLine        return  from projectPath in projectPathsDi2015NewLine                let xml = XDocument.Load(projectPath)Di2015NewLine                let dir = Path.GetDirectoryName(projectPath)Di2015NewLine                from c in xml.Descendants(xmlNamespace + "Compile")Di2015NewLine                where c.Attribute("Include").Value.EndsWith(".cs")Di2015NewLine                select Path.Combine(dir, c.Attribute("Include").Value);Di2015NewLine
214788Di2015UniqueSeparatorReflector.VisualStudio.exe /installDi2015NewLine
214854Di2015UniqueSeparator<%@ Page Language="C#" AutoEventWireup="true" CodeFile="SampleMenu1.aspx.cs" Inherits="SampleMenuPage1" %>Di2015NewLine<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">Di2015NewLine<html xmlns="http://www.w3.org/1999/xhtml" >Di2015NewLine<head runat="server">Di2015NewLine    <title>Sample Menu</title>Di2015NewLine</head>Di2015NewLine<body>Di2015NewLine    <form id="form1" runat="server">Di2015NewLine        <asp:Menu ID="Menu1" runat="server" OnMenuItemClick="Menu1_MenuItemClick">Di2015NewLine            <Items>Di2015NewLine                <asp:MenuItem Text="File">Di2015NewLine                    <asp:MenuItem Text="Load Control1"></asp:MenuItem>Di2015NewLine                    <asp:MenuItem Text="Load Control2"></asp:MenuItem>Di2015NewLine                    <asp:MenuItem Text="Load Control3"></asp:MenuItem>Di2015NewLine                </asp:MenuItem>Di2015NewLine            </Items>Di2015NewLine        </asp:Menu>Di2015NewLine        <br />Di2015NewLine        <br />Di2015NewLine        <asp:ScriptManager ID="ScriptManager1" runat="server"></asp:ScriptManager>Di2015NewLine        <asp:UpdatePanel ID="UpdatePanel1" runat="server" UpdateMode="Conditional">Di2015NewLine            <ContentTemplate>Di2015NewLine                <asp:PlaceHolder ID="PlaceHolder1" runat="server"></asp:PlaceHolder>Di2015NewLine            </ContentTemplate>Di2015NewLine            <Triggers>Di2015NewLine                <asp:AsyncPostBackTrigger ControlID="Menu1" />Di2015NewLine            </Triggers>Di2015NewLine        </asp:UpdatePanel>Di2015NewLine    </form>Di2015NewLine</body>Di2015NewLine</html>Di2015NewLine
214854Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Web;Di2015NewLineusing System.Web.UI;Di2015NewLineusing System.Web.UI.WebControls;Di2015NewLineDi2015NewLinepublic partial class PlainSampleMenuPage : System.Web.UI.PageDi2015NewLine{Di2015NewLine    private const string BASE_PATH = "~/DynamicControlLoading/";Di2015NewLineDi2015NewLine    private string LastLoadedControlDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return ViewState["LastLoaded"] as string;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            ViewState["LastLoaded"] = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void LoadUserControl()Di2015NewLine    {Di2015NewLine        string controlPath = LastLoadedControl;Di2015NewLineDi2015NewLine        if (!string.IsNullOrEmpty(controlPath))Di2015NewLine        {Di2015NewLine            PlaceHolder1.Controls.Clear();Di2015NewLine            UserControl uc = (UserControl)LoadControl(controlPath);Di2015NewLine            PlaceHolder1.Controls.Add(uc);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        LoadUserControl();Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void Menu1_MenuItemClick(object sender, MenuEventArgs e)Di2015NewLine    {Di2015NewLine        MenuItem menu = e.Item;Di2015NewLineDi2015NewLine        string controlPath = string.Empty;Di2015NewLineDi2015NewLine        switch (menu.Text)Di2015NewLine        {Di2015NewLine            case "Load Control2":Di2015NewLine                controlPath = BASE_PATH + "SampleControl2.ascx";Di2015NewLine                break;Di2015NewLine            case "Load Control3":Di2015NewLine                controlPath = BASE_PATH + "SampleControl3.ascx";Di2015NewLine                break;Di2015NewLine            default:Di2015NewLine                controlPath = BASE_PATH + "SampleControl1.ascx";Di2015NewLine                break;Di2015NewLine        }Di2015NewLineDi2015NewLine        LastLoadedControl = controlPath;Di2015NewLine        LoadUserControl();Di2015NewLine    }Di2015NewLine}Di2015NewLine
215176Di2015UniqueSeparatorDi2015NewLine  <object ...>Di2015NewLine    <param name="flashvars" value="&xmlpath=<path to xml>"/>Di2015NewLine  </object>Di2015NewLine</pre>
215230Di2015UniqueSeparatorType type = typeof( Application ).GetNestedType( "ThreadContext",Di2015NewLine\BindingFlags.NonPublic );Di2015NewLineMethodInfo doIdle = type.GetMethod(Di2015NewLine\"System.Windows.Forms.UnsafeNativeMethods.IMsoComponent.FDoIdle",Di2015NewLine\BindingFlags.NonPublic | BindingFlags.Instance );Di2015NewLine
215230Di2015UniqueSeparatorGetMethods(...)
215269Di2015UniqueSeparator// create a new list item with a subitem that has white text on a blue backgroundDi2015NewLineListViewItem lvi = new ListViewItem( "item text" );Di2015NewLinelvi.UseItemStyleForSubItems = false;Di2015NewLinelvi.SubItems.Add( new ListViewItem.ListViewSubItem( lvi,Di2015NewLine\"subitem", Color.White, Color.Blue, lvi.Font ) );Di2015NewLine
215269Di2015UniqueSeparatorUseItemStyleForSubItems
215538Di2015UniqueSeparatorstring path = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);Di2015NewLine
215659Di2015UniqueSeparatorToXML()
215660Di2015UniqueSeparatorIntPtr sBuffer = new IntPtr( buffer.ToInt64() + 4 );Di2015NewLinestring s = Marshal.PtrToStringAuto( sBuffer );Di2015NewLine
215919Di2015UniqueSeparatordoDi2015NewLine  let timer = System.Diagnostics.Stopwatch.StartNew()Di2015NewLine  let f a b c d e f g h = a+b+c+d+e+f+g+hDi2015NewLine  let mutable i = 0Di2015NewLine  for n=1 to 30000000 doDi2015NewLine    i <- i + f 1 2 3 4 5 6 7 8Di2015NewLine  printfn "%d in %fs" i timer.Elapsed.TotalSecondsDi2015NewLine
215919Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var timer = System.Diagnostics.Stopwatch.StartNew();Di2015NewLine        Func<int, Func<int, Func<int, Func<int, Func<int, Func<int, Func<int, Func<int, int>>>>>>>> foo =Di2015NewLine            a => b => c => d => e => f => g => h => a + b + c + d + e + f + g + h;Di2015NewLine        int i = 0;Di2015NewLine        for (int n = 1; n <= 30000000; ++n)Di2015NewLine            i += foo(1)(2)(3)(4)(5)(6)(7)(8);Di2015NewLine        Console.WriteLine(i);Di2015NewLine        Console.WriteLine(timer.Elapsed.TotalSeconds);Di2015NewLine    }Di2015NewLine}Di2015NewLine
215919Di2015UniqueSeparatorinline
215919Di2015UniqueSeparator>
215919Di2015UniqueSeparatorlet inline bubblesort (>) (xs: _ []) =Di2015NewLine  for i=0 to xs.Length-2 doDi2015NewLine    for j=i+1 to xs.Length-1 doDi2015NewLine      if xs.[i] > xs.[j] thenDi2015NewLine        let t = xs.[i]Di2015NewLine        xs.[i] <- xs.[j]Di2015NewLine        xs.[j] <- tDi2015NewLineDi2015NewLinedoDi2015NewLine  let xs = Array.init 30000 (fun i -> -float i)Di2015NewLine  let timer = System.Diagnostics.Stopwatch.StartNew()Di2015NewLine  bubblesort (>) xsDi2015NewLine  printfn "%fs for %A" timer.Elapsed.TotalSeconds xsDi2015NewLine
215919Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void bubblesort<T>(Func<T, Func<T, bool>> greater, T[] xs)Di2015NewLine    {Di2015NewLine        for (int i=0; i<xs.Length-1; ++i)Di2015NewLine            for (int j=i+1; j<xs.Length; ++j)Di2015NewLine                if (greater(xs[i])(xs[j]))Di2015NewLine                {Di2015NewLine                    var t = xs[i];Di2015NewLine                    xs[i] = xs[j];Di2015NewLine                    xs[j] = t;Di2015NewLine                }Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var xs = new double[30000];Di2015NewLine        for (int i=0; i<xs.Length; ++i)Di2015NewLine            xs[i] = -i;Di2015NewLine        var timer = System.Diagnostics.Stopwatch.StartNew();Di2015NewLine        bubblesort<double>(x => y => x>y, xs);Di2015NewLine        Console.WriteLine(timer.Elapsed.TotalSeconds);Di2015NewLine        for (int i = 0; i < 10; ++i)Di2015NewLine            Console.WriteLine(xs[i]);Di2015NewLine    }Di2015NewLine}Di2015NewLine
216485Di2015UniqueSeparatorGetTable<T>()
216485Di2015UniqueSeparator    static void Save<T>(T item)Di2015NewLine        where T : class, IPublicObjectDi2015NewLine    {Di2015NewLine        using (DataContext ctx = GetDataContext())Di2015NewLine        {Di2015NewLine            Table<T> table = ctx.GetTable<T>();Di2015NewLine            // for insert...Di2015NewLine            table.InsertOnSubmit(item);Di2015NewLine            // for update...Di2015NewLine            table.Attach(item, true);Di2015NewLine            // for delete...Di2015NewLine            table.DeleteOnSubmit(item);Di2015NewLineDi2015NewLine            ctx.SubmitChanges();Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine
216485Di2015UniqueSeparatorT
216485Di2015UniqueSeparator    Foo foo = new Foo();Di2015NewLine    Save(foo); // <Foo> is inferredDi2015NewLine
216550Di2015UniqueSeparator    decimal one = 1000M;Di2015NewLine    decimal two = 12.5M;Di2015NewLineDi2015NewLine    Console.WriteLine(one.ToString("0.##"));Di2015NewLine    Console.WriteLine(two.ToString("0.##"));Di2015NewLine
216649Di2015UniqueSeparatorDi2015NewLine        [STAThreadAttribute]Di2015NewLine        static void Main(string[] args)Di2015NewLine
216723Di2015UniqueSeparator// the index of the current hot-tracking tabDi2015NewLineprivate int hotTrackTab = -1;Di2015NewLineDi2015NewLine// returns the index of the tab under the cursor, or -1 if no tab is underDi2015NewLineprivate int GetTabUnderCursor()Di2015NewLine{Di2015NewLine    Point cursor = this.tabs.PointToClient( Cursor.Position );Di2015NewLine    for( int i = 0; i < this.tabs.TabPages.Count; i++ )Di2015NewLine    {Di2015NewLine        if( this.tabs.GetTabRect( i ).Contains( cursor ) )Di2015NewLine            return i;Di2015NewLine    }Di2015NewLine    return -1;Di2015NewLine}Di2015NewLineDi2015NewLine// updates hot tracking based on the current cursor positionDi2015NewLineprivate void UpdateHotTrack()Di2015NewLine{Di2015NewLine    int hot = GetTabUnderCursor();Di2015NewLine    if( hot != this.hotTrackTab )Di2015NewLine    {Di2015NewLine        // invalidate the old hot-track item to remove hot-track effectsDi2015NewLine        if( this.hotTrackTab != -1 )Di2015NewLine            this.tabs.Invalidate( this.tabs.GetTabRect( this.hotTrackTab ) );Di2015NewLineDi2015NewLine        this.hotTrackTab = hot;Di2015NewLineDi2015NewLine        // invalidate the new hot-track item to add hot-track effectsDi2015NewLine        if( this.hotTrackTab != -1 )Di2015NewLine            this.tabs.Invalidate( this.tabs.GetTabRect( this.hotTrackTab ) );Di2015NewLineDi2015NewLine        // force the tab to redraw invalidated regionsDi2015NewLine        this.tabs.Update();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void tabs_DrawItem( object sender, DrawItemEventArgs e )Di2015NewLine{Di2015NewLine    // draw the background based on hot trackingDi2015NewLine    if( e.Index == this.hotTrackTab )Di2015NewLine    {Di2015NewLine        using( Brush b = new SolidBrush( Color.Yellow ) )Di2015NewLine            e.Graphics.FillRectangle( b, e.Bounds );Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        e.DrawBackground();Di2015NewLine    }Di2015NewLineDi2015NewLine    // draw the text label for the item, other effects, etcDi2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineprivate void tabs_MouseEnter( object sender, EventArgs e )Di2015NewLine{Di2015NewLine    UpdateHotTrack();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void tabs_MouseLeave( object sender, EventArgs e )Di2015NewLine{Di2015NewLine    UpdateHotTrack();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void tabs_MouseMove( object sender, MouseEventArgs e )Di2015NewLine{Di2015NewLine    UpdateHotTrack();Di2015NewLine}Di2015NewLine
216733Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Linq.Expressions;Di2015NewLineDi2015NewLineclass Program {Di2015NewLine    static void Main(string[] args) {Di2015NewLine        Console.WriteLine(StringPredicate(c => Char.IsDigit(c)));Di2015NewLine        var func = StringPredicate(c => Char.IsDigit(c)).Compile();Di2015NewLine        Console.WriteLine(func("h2ello"));Di2015NewLine        Console.WriteLine(func("2ello"));Di2015NewLine    }Di2015NewLineDi2015NewLine    public static Expression<Func<string,bool>> StringPredicate(Expression<Func<char,bool>> pred) {Di2015NewLine        Expression<Func<string, char>> get = s => s.First();Di2015NewLine        var p = Expression.Parameter(typeof(string), "s");Di2015NewLine        return Expression.Lambda<Func<string, bool>>(Di2015NewLine            Expression.Invoke(pred, Expression.Invoke(get, p)),Di2015NewLine            p);Di2015NewLine    }Di2015NewLine}Di2015NewLine
216747Di2015UniqueSeparator        XmlReaderSettings settings = new XmlReaderSettings();Di2015NewLine        settings.XmlResolver = null;Di2015NewLine        settings.DtdProcessing = DtdProcessing.Parse;Di2015NewLine        XmlDocument doc = new XmlDocument();Di2015NewLine        using (StringReader sr = new StringReader(xml))Di2015NewLine            using (XmlReader reader = XmlReader.Create(sr, settings))Di2015NewLine            {Di2015NewLine                doc.Load(reader);Di2015NewLine            }Di2015NewLine
216828Di2015UniqueSeparatorif (Directory.Exists(uploadDirectory)) Di2015NewLine  Directory.GetFiles(uploadDirectory)Di2015NewLine    .Where(f => File.GetLastWriteTime(file) < DateTime.Now.AddHours(-12))Di2015NewLine    .Each(f => File.Delete(f));Di2015NewLine
216828Di2015UniqueSeparatorvar di = new DirectoryInfo(uploadDirectory);Di2015NewLineif (di.Exists()) {Di2015NewLine   di.GetFiles()Di2015NewLine     .Where(f => f.LastWriteTime < DateTime.Now.AddHours(-12))Di2015NewLine     .Each(f=> f.Delete());Di2015NewLine}Di2015NewLine
216828Di2015UniqueSeparatorvoid Each<T>(this IEnumerable e, Action<T> action) {Di2015NewLine  foreach (T t in e) {Di2015NewLine    action(t);Di2015NewLine  }Di2015NewLine}Di2015NewLine
216828Di2015UniqueSeparatordi.GetFiles().Select(f => new() {Di2015NewLine   Delete = f.LastWriteTime < DateTime.Now.AddHours(-12) ? f.Delete : () => { }Di2015NewLine}).Delete();Di2015NewLine
216866Di2015UniqueSeparatorHtmlHelper
216866Di2015UniqueSeparatorHtml.MoneyTextBox()
216866Di2015UniqueSeparatorHtml.OptionGroup()
216866Di2015UniqueSeparatorHtml.Pager<T>
216866Di2015UniqueSeparatorpublic class CustomerInfoDi2015NewLine{Di2015NewLine  public Customer Customer { get; set; }Di2015NewLine  public bool IsEditable { get; set; }  // e.g. based on current user/roleDi2015NewLine  public bool NeedFullAddress { get; set; }  // e.g. based on requested action Di2015NewLine  public bool IsEligibleForSomething { get; set; }  // e.g. based on business ruleDi2015NewLine}Di2015NewLine
217207Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Runtime.Serialization;Di2015NewLineusing System.IO;Di2015NewLineDi2015NewLinenamespace SerializeThingyDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            List<string> myList = new List<string>();Di2015NewLine            myList.Add("One");Di2015NewLine            myList.Add("Two");Di2015NewLine            myList.Add("Three");Di2015NewLine            NetDataContractSerializer serializer = new NetDataContractSerializer();Di2015NewLine            MemoryStream stream = new MemoryStream();Di2015NewLine            serializer.Serialize(stream, myList);Di2015NewLine            stream.Position = 0;Di2015NewLine            Console.WriteLine(ASCIIEncoding.ASCII.GetString(stream.ToArray()));Di2015NewLine            List<string> myList2 = (List<string>)serializer.Deserialize(stream);Di2015NewLine            Console.WriteLine(myList2[0]);Di2015NewLine            Console.ReadKey();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
217361Di2015UniqueSeparatorresultGV.DataSource = from item in nvpDictionaryDi2015NewLine                      select new { Key = item.Key, Value = item.Value };Di2015NewLineresultGV.DataBind();Di2015NewLine
217361Di2015UniqueSeparatorresultGV.DataSource = nvpDictionary;Di2015NewLineresultGV.DataBind();Di2015NewLine
217361Di2015UniqueSeparatorprivate void BindList(NameValueCollection nvpList)Di2015NewLine{Di2015NewLine   Dictionary<string,string> temp = new Dictionary<string,string>();Di2015NewLine   foreach (string key in nvpList)Di2015NewLine   {Di2015NewLine      temp.Add(key,nvpList[key]);Di2015NewLine   }Di2015NewLineDi2015NewLine   resultGV.DataSource = temp;Di2015NewLine   resultGV.DataBind();Di2015NewLine}Di2015NewLine
217361Di2015UniqueSeparatorpublic static class NameValueCollectionExtensionsDi2015NewLine{Di2015NewLine   public static Dictionary<string,string> ToDictionary( this NameValueCollection collection )Di2015NewLine   {Di2015NewLine      Dictionary<string,string> temp = new Dictionary<string,string>();Di2015NewLine      foreach (string key in collection)Di2015NewLine      {Di2015NewLine          temp.Add(key,collection[key]);Di2015NewLine      }Di2015NewLine      return temp;Di2015NewLine   }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void BindList(NameValueCollection nvpList)Di2015NewLine{Di2015NewLine   resultGV.DataSource = nvpList.ToDictionary();Di2015NewLine   resultGV.DataBind();Di2015NewLine}Di2015NewLine
217366Di2015UniqueSeparatorpublic event EventHandler SaveButtonClickDi2015NewLine{Di2015NewLine    add { this.SaveButton.Click += value; }Di2015NewLine    remove { this.SaveButton.Click -= value; }Di2015NewLine}Di2015NewLine
217397Di2015UniqueSeparatorpublic void DoSomethingWithText(string formText)Di2015NewLine{Di2015NewLine   // do something text in hereDi2015NewLine}Di2015NewLine
217397Di2015UniqueSeparatorstring SomePropertyDi2015NewLine{Di2015NewLine   get Di2015NewLine   {Di2015NewLine      return textBox1.Text;Di2015NewLine   }Di2015NewLine   setDi2015NewLine   {Di2015NewLine      textBox1.Text = value;Di2015NewLine   }Di2015NewLine}Di2015NewLine
217452Di2015UniqueSeparatorprivate WindowsImpersonationContext context = null;Di2015NewLinepublic void RevertToAppPool()Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        if (!WindowsIdentity.GetCurrent().IsSystem)Di2015NewLine        {Di2015NewLine            context = WindowsIdentity.Impersonate(System.IntPtr.Zero);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    catch { }Di2015NewLine}Di2015NewLinepublic void UndoImpersonation()Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        if (context != null)Di2015NewLine        {Di2015NewLine            context.Undo();Di2015NewLine        }Di2015NewLine    }Di2015NewLine    catch { }Di2015NewLine}Di2015NewLine
217479Di2015UniqueSeparatorpublic static IEnumerable<string> ReadLinesFromFile(string filename)Di2015NewLine{Di2015NewLine    using (StreamReader reader = new StreamReader(filename))Di2015NewLine    {Di2015NewLine        while (true)Di2015NewLine        {Di2015NewLine            string s = reader.ReadLine();Di2015NewLine            if (s == null)Di2015NewLine                break;Di2015NewLine            yield return s;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
217479Di2015UniqueSeparatorvar jointDisplacements = from line in ReadLinesFromFile(@"c:\\import.txt")Di2015NewLine               let item = line.Split(new char[] { '\\t' })Di2015NewLine               select newDi2015NewLine               {Di2015NewLine    \      Joint = Convert.ToInt32(item[0]),Di2015NewLine    \      X-dsp = Convert.ToDouble(item[1]),Di2015NewLine    \      Y-dsp = Convert.ToDouble(item[2]),Di2015NewLine    \      Z-dsp = Convert.ToDouble(item[3]),Di2015NewLine    \      X-rot = Convert.ToDouble(item[4]),Di2015NewLine    \      Y-rot = Convert.ToDouble(item[5]),Di2015NewLine    \      Z-rot = Convert.ToDouble(item[6])Di2015NewLine               };Di2015NewLine
217509Di2015UniqueSeparatorusing mshtml;Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLine    IHTMLDocument2 htmlDocument = webBrowser1.Document.DomDocument as IHTMLDocument2;Di2015NewLineDi2015NewLine    IHTMLSelectionObject currentSelection= htmlDocument.selection;Di2015NewLineDi2015NewLine    if (currentSelection!=null) Di2015NewLine    {Di2015NewLine        IHTMLTxtRange range= currentSelection.createRange() as IHTMLTxtRange;Di2015NewLineDi2015NewLine        if (range != null)Di2015NewLine        {Di2015NewLine            MessageBox.Show(range.text);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
217716Di2015UniqueSeparatorlock
217716Di2015UniqueSeparatorsynchronized
217716Di2015UniqueSeparatorsynchronized
217716Di2015UniqueSeparator[MethodImpl(MethodImplOptions.Synchronized)]
218036Di2015UniqueSeparatorSqlParameterOption's
218036Di2015UniqueSeparatorclass SqlParameterOptionDi2015NewLine {Di2015NewLine    public SqlParameterOption Precision(int p) {/* ... */; return this;}Di2015NewLine    public SqlParameterOption Substitute() {/* ... */; return this;}Di2015NewLine    /* ... */       Di2015NewLine }Di2015NewLineDi2015NewLine/* ... */Di2015NewLineSqlParameter.Int32(":ID", 1234).With(new SqlParameterOption()Di2015NewLine                                           .Precision(15)Di2015NewLine                                           .Substitute());Di2015NewLine
218124Di2015UniqueSeparatorpublic partial class [...]WebServiceClientTypeDi2015NewLine  {Di2015NewLine    private static readonly XmlSchemaSet _schema;Di2015NewLineDi2015NewLine    static KeyImportFileType()Di2015NewLine    {Di2015NewLine      _schema = new XmlSchemaSet();Di2015NewLine      _schema.Add(null, XmlResourceResolver.GetXmlReader("http://www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd"));Di2015NewLine      _schema.Add(null, XmlResourceResolver.GetXmlReader("http://www.w3.org/TR/2002/REC-xmlenc-core-20021210/xenc-schema.xsd"));Di2015NewLine      _schema.Compile();Di2015NewLine    }Di2015NewLine
218141Di2015UniqueSeparatorobject result = formatter.Deserialize(stream); Di2015NewLineType t = result.GetType();Di2015NewLine
218253Di2015UniqueSeparatorFILE_SHARE_READ | FILE_SHARE_WRITE
218253Di2015UniqueSeparatorCreateFile()
218367Di2015UniqueSeparatorEquals
218367Di2015UniqueSeparatorCompareTo(other) == 0
218367Di2015UniqueSeparatorContains
218367Di2015UniqueSeparatorCompareTo
218367Di2015UniqueSeparatorEquals
218367Di2015UniqueSeparatorContains
218367Di2015UniqueSeparatorIEqualityComparer
218373Di2015UniqueSeparatorroutes.MapRoute(  "Default", // Route nameDi2015NewLine                   "{controller}/{action}/{id}/{ignoreThisBit}", Di2015NewLine                   new { controller = "Home", Di2015NewLine                         action = "Index", Di2015NewLine                         id = "",Di2015NewLine                         ignoreThisBit = ""}  // Parameter defaults )Di2015NewLine
218373Di2015UniqueSeparator<%= Html.ActionLink("Link text", "ActionName", "ControllerName",Di2015NewLine                    new { id = 1234, ignoreThisBit="friendly-text-here" });Di2015NewLine
218600Di2015UniqueSeparatorRandom rand = new Random(); //reuse this if you are generating manyDi2015NewLinedouble u1 = rand.NextDouble(); //these are uniform(0,1) random doublesDi2015NewLinedouble u2 = rand.NextDouble();Di2015NewLinedouble randStdNormal = Math.Sqrt(-2.0 * Math.Log(u1)) *Di2015NewLine             Math.Sin(2.0 * Math.PI * u2); //random normal(0,1)Di2015NewLinedouble randNormal =Di2015NewLine             mean + stdDev * randStdNormal; //random normal(mean,stdDev^2)Di2015NewLine
218677Di2015UniqueSeparatorSystem.Drawing.Printing
218896Di2015UniqueSeparatordatePrm.Value = nullableDate ?? (object)DBNull.Value;Di2015NewLine
218954Di2015UniqueSeparatorPublic Class ExecutionContextDi2015NewLine    ''' <summary>Di2015NewLine    ''' Gets a value indicating whether the application is a windows service.Di2015NewLine    ''' </summary>Di2015NewLine    ''' <value>Di2015NewLine    ''' <c>true</c> if this instance is service; otherwise, <c>false</c>.Di2015NewLine    ''' </value>Di2015NewLine    Public Shared ReadOnly Property IsService() As BooleanDi2015NewLine        GetDi2015NewLine            ' Determining whether or not the host application is a service isDi2015NewLine            ' an expensive operation (it uses reflection), so we cache theDi2015NewLine            ' result of the first call to this method so that we don't have toDi2015NewLine            ' recalculate it every call.Di2015NewLineDi2015NewLine            ' If we have not already determined whether or not the applicationDi2015NewLine            ' is running as a service...Di2015NewLine            If IsNothing(_isService) ThenDi2015NewLineDi2015NewLine                ' Get details of the host assembly.Di2015NewLine                Dim entryAssembly As Reflection.Assembly = Reflection.Assembly.GetEntryAssemblyDi2015NewLineDi2015NewLine                ' Get the method that was called to enter the host assembly.Di2015NewLine                Dim entryPoint As System.Reflection.MethodInfo = entryAssembly.EntryPointDi2015NewLineDi2015NewLine                ' If the base type of the host assembly inherits from theDi2015NewLine                ' "ServiceBase" class, it must be a windows service. We storeDi2015NewLine                ' the result ready for the next caller of this method.Di2015NewLine                _isService = (entryPoint.ReflectedType.BaseType.FullName = "System.ServiceProcess.ServiceBase")Di2015NewLineDi2015NewLine            End IfDi2015NewLineDi2015NewLine            ' Return the cached result.Di2015NewLine            Return CBool(_isService)Di2015NewLine        End GetDi2015NewLine    End PropertyDi2015NewLineDi2015NewLine    Private Shared _isService As Nullable(Of Boolean) = NothingDi2015NewLine#End RegionDi2015NewLineEnd ClassDi2015NewLine
219521Di2015UniqueSeparatorString.Join()
219521Di2015UniqueSeparatorchar sep = GetSeparatorChar();Di2015NewLineobject[] toJoin = GetToJoin();Di2015NewLinestring joined = toJoin.Aggregate((x,y) => x.ToString()+sep.ToString()+y.ToString());Di2015NewLine
219805Di2015UniqueSeparatorDateTime when = DateTime.Parse(data);Di2015NewLineDateTime when = DateTime.ParseExact(data);Di2015NewLineDateTime when = Convert.ToDateTime(data);Di2015NewLine
219835Di2015UniqueSeparator.field public string Foo // public fieldDi2015NewLine.property instance string Bar // public propertyDi2015NewLine{Di2015NewLine    .get instance string MyType::get_Bar()Di2015NewLine    .set instance void MyType::set_Bar(string)Di2015NewLine}Di2015NewLine
219835Di2015UniqueSeparator// only one instance field no matter how many events;Di2015NewLine// very useful if we expect most events to be unsubscribedDi2015NewLineprivate EventHandlerList events = new EventHandlerList();Di2015NewLineprotected EventHandlerList Events {Di2015NewLine    get { return events; } // usually lazyDi2015NewLine}Di2015NewLineDi2015NewLine// this code repeated per eventDi2015NewLineprivate static readonly object FooEvent = new object();Di2015NewLinepublic event EventHandler FooDi2015NewLine{Di2015NewLine    add { Events.AddHandler(FooEvent, value); }Di2015NewLine    remove { Events.RemoveHandler(FooEvent, value); }Di2015NewLine}Di2015NewLineprotected virtual void OnFoo()Di2015NewLine{Di2015NewLine    EventHandler handler = Events[FooEvent] as EventHandler;Di2015NewLine    if (handler != null) handler(this, EventArgs.Empty);Di2015NewLine}Di2015NewLine
219835Di2015UniqueSeparatorprivate Bar wrappedObject; // via ctorDi2015NewLinepublic event EventHandler SomeEventDi2015NewLine{Di2015NewLine    add { wrappedObject.SomeOtherEvent += value; }Di2015NewLine    remove { wrappedObject.SomeOtherEvent -= value; }Di2015NewLine}Di2015NewLine
219858Di2015UniqueSeparatornamespace TestDi2015NewLine{Di2015NewLine    class OneDi2015NewLine    {Di2015NewLine        public void AccessibleToAll()Di2015NewLine        {Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        internal void AccessibleWithinSameNamespace()Di2015NewLine        {Di2015NewLine            // I am not publicDi2015NewLineDi2015NewLine            // I can be accessed from other classesDi2015NewLine            // within the same namespace of my classDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinenamespace TestDi2015NewLine{Di2015NewLine    class TwoDi2015NewLine    {Di2015NewLine        public Two()Di2015NewLine        {Di2015NewLine            One one = new One();Di2015NewLineDi2015NewLine            // I am able to access this method because my classDi2015NewLine            // is in the same namespace as the class: "One"Di2015NewLine            one.AccessibleWithinSameNamespace();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
219877Di2015UniqueSeparator//extension method to convert my type to an object array.Di2015NewLinepublic static object[] ToObjectArray(this MyClass theSource)Di2015NewLine{Di2015NewLine  object[] result = new object[3];Di2015NewLine  result[0] = theSource.FirstDouble;Di2015NewLine  result[1] = theSource.SecondDouble;Di2015NewLine  result[2] = theSource.TheDateTime;Di2015NewLineDi2015NewLine  return result;Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine//some time later, new up a dataTable, set it's columns, and then...Di2015NewLineDi2015NewLineDataTable myTable = new DataTable()Di2015NewLineDi2015NewLineDataColumn column1 = new DataColumn();Di2015NewLinecolumn1.DataType = GetType("System.Double");Di2015NewLinecolumn1.ColumnName = "FirstDouble";Di2015NewLinemyTable.Add(column1);Di2015NewLineDi2015NewLineDataColumn column2 = new DataColumn();Di2015NewLinecolumn2.DataType = GetType("System.Double");Di2015NewLinecolumn2.ColumnName = "SecondDouble";Di2015NewLinemyTable.Add(column2);Di2015NewLineDi2015NewLineDataColumn column3 = new DataColumn();Di2015NewLinecolumn3.DataType = GetType("System.DateTime");Di2015NewLinecolumn3.ColumnName = "TheDateTime";Di2015NewLinemyTable.Add(column3);Di2015NewLineDi2015NewLine// ... Each Element becomes an array, and then a rowDi2015NewLineMyClassList.ForEach(x => myTable.Rows.Add(x.ToObjectArray());Di2015NewLine
219913Di2015UniqueSeparatorprivate object m_myProp;Di2015NewLinepublic object MyPropDi2015NewLine{Di2015NewLine    get { return m_myProp; }Di2015NewLine    protected set { m_myProp = value; }Di2015NewLine}Di2015NewLine
219913Di2015UniqueSeparatorpublic object MyProp {get; protected set;}Di2015NewLine
220015Di2015UniqueSeparatorpublic class PostDataDi2015NewLine{Di2015NewLineDi2015NewLine    private List<PostDataParam> m_Params;Di2015NewLineDi2015NewLine    public List<PostDataParam> ParamsDi2015NewLine    {Di2015NewLine    \get { return m_Params; }Di2015NewLine    \set { m_Params = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public PostData()Di2015NewLine    {Di2015NewLine    \m_Params = new List<PostDataParam>();Di2015NewLineDi2015NewLine    \// Add sample paramDi2015NewLine    \m_Params.Add(new PostDataParam("email", "MyEmail", PostDataParamType.Field));Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Returns the parameters array formatted for multi-part/form dataDi2015NewLine    /// </summary>Di2015NewLine    /// <returns></returns>Di2015NewLine    public string GetPostData()Di2015NewLine    {Di2015NewLine    \// Get boundary, default is --AaB03xDi2015NewLine    \string boundary = ConfigurationManager.AppSettings["ContentBoundary"].ToString();Di2015NewLineDi2015NewLine    \StringBuilder sb = new StringBuilder();Di2015NewLine    \foreach (PostDataParam p in m_Params)Di2015NewLine    \{Di2015NewLine    \\sb.AppendLine(boundary);Di2015NewLineDi2015NewLine    \\if (p.Type == PostDataParamType.File)Di2015NewLine    \\{Di2015NewLine    \\\sb.AppendLine(string.Format("Content-Disposition: file; name=\\"{0}\\"; filename=\\"{1}\\"", p.Name, p.FileName));Di2015NewLine    \\\sb.AppendLine("Content-Type: text/plain");Di2015NewLine    \\\sb.AppendLine();Di2015NewLine    \\\sb.AppendLine(p.Value);\\\\\Di2015NewLine    \\}Di2015NewLine    \\elseDi2015NewLine    \\{Di2015NewLine    \\\sb.AppendLine(string.Format("Content-Disposition: form-data; name=\\"{0}\\"", p.Name));Di2015NewLine    \\\sb.AppendLine();Di2015NewLine    \\\sb.AppendLine(p.Value);Di2015NewLine    \\}Di2015NewLine    \}Di2015NewLineDi2015NewLine    \sb.AppendLine(boundary);Di2015NewLineDi2015NewLine    \return sb.ToString();\\\Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic enum PostDataParamTypeDi2015NewLine{Di2015NewLine    Field,Di2015NewLine    FileDi2015NewLine}Di2015NewLineDi2015NewLinepublic class PostDataParamDi2015NewLine{Di2015NewLineDi2015NewLineDi2015NewLine    public PostDataParam(string name, string value, PostDataParamType type)Di2015NewLine    {Di2015NewLine    \Name = name;Di2015NewLine    \Value = value;Di2015NewLine    \Type = type;Di2015NewLine    }Di2015NewLineDi2015NewLine    public string Name;Di2015NewLine    public string FileName;Di2015NewLine    public string Value;Di2015NewLine    public PostDataParamType Type;Di2015NewLine}Di2015NewLine
220015Di2015UniqueSeparatorHttpWebRequest oRequest = null;Di2015NewLineoRequest = (HttpWebRequest)HttpWebRequest.Create(oURL.URL);Di2015NewLineoRequest.ContentType = "multipart/form-data";   \\\\\Di2015NewLineoRequest.Method = "POST";Di2015NewLinePostData pData = new PostData();Di2015NewLineDi2015NewLinebyte[] buffer = encoding.GetBytes(pData.GetPostData());Di2015NewLineDi2015NewLine// Set content length of our dataDi2015NewLineoRequest.ContentLength = buffer.Length;Di2015NewLineDi2015NewLine// Dump our buffered postdata to the stream, booyahDi2015NewLineoStream = oRequest.GetRequestStream();Di2015NewLineoStream.Write(buffer, 0, buffer.Length);Di2015NewLineoStream.Close();Di2015NewLineDi2015NewLine// get the responseDi2015NewLineoResponse = (HttpWebResponse)oRequest.GetResponse();Di2015NewLine
220166Di2015UniqueSeparatorthis.DoubleBuffered = true;Di2015NewLinethis.SetStyle(ControlStyles.UserPaint | Di2015NewLine              ControlStyles.AllPaintingInWmPaint |Di2015NewLine              ControlStyles.ResizeRedraw |Di2015NewLine              ControlStyles.ContainerControl |Di2015NewLine              ControlStyles.OptimizedDoubleBuffer |Di2015NewLine              ControlStyles.SupportsTransparentBackColorDi2015NewLine              , true);Di2015NewLine
220425Di2015UniqueSeparatorpublic class StubPropertyTypeDi2015NewLine{Di2015NewLine    public StubPropertyType(Type type)Di2015NewLine    {Di2015NewLine        this.StubPropertyTypeName = type.Name;Di2015NewLine    }Di2015NewLineDi2015NewLine    public string StubPropertyTypeName = string.Empty;Di2015NewLine}Di2015NewLine
220425Di2015UniqueSeparatorthis.propertyStubBindingSource.DataSource = typeof(StubPropertyType);Di2015NewLine
220425Di2015UniqueSeparatorthis.nameTextBox.DataBindings.Add(Di2015NewLine    new System.Windows.Forms.Binding(Di2015NewLine        "Text", Di2015NewLine        this.propertyStubBindingSource, Di2015NewLine        "StubPropertyTypeName", Di2015NewLine        true));Di2015NewLine
220519Di2015UniqueSeparatordgv.BeginInvoke(new MethodInvoker(delegate()Di2015NewLine{Di2015NewLine    PopulateReadOnlyGrid(dgv, gridLines, columns);Di2015NewLine}));Di2015NewLine
220519Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Data;Di2015NewLineusing System.Drawing;Di2015NewLineusing System.Text;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.Reflection;Di2015NewLineusing System.Threading;Di2015NewLineDi2015NewLinenamespace WindowsFormsApplication1Di2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        private delegate void PROG_Delegate<TGridLine>(Control dgv, IEnumerable<TGridLine> gridLines, string[] columns);Di2015NewLineDi2015NewLine        public static void PopulateReadOnlyGrid<TGridLine>(Control dgv, IEnumerable<TGridLine> gridLines, string[] columns)Di2015NewLine        {Di2015NewLine            if (dgv.InvokeRequired)Di2015NewLine            {Di2015NewLine                dgv.BeginInvokeDi2015NewLine                            (Di2015NewLine                                new PROG_Delegate<TGridLine>(PopulateReadOnlyGrid<TGridLine>),Di2015NewLine                                new object[] { dgv, gridLines, columns }Di2015NewLine                            );Di2015NewLine                return;Di2015NewLine            }Di2015NewLine            MessageBox.Show("hi");Di2015NewLine            //GridUtils.StatePreserver statePreserver = new GridUtils.StatePreserver(dgv);Di2015NewLine            //System.Data.DataTable dt = CollectionHelper.ConvertToDataTable<TGridLine>((gridLines));Di2015NewLine            //dgv.DataSource = dt;Di2015NewLine            //dgv.DataMember = "";Di2015NewLine            //dgv.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;Di2015NewLine            //GridUtils.OrderColumns<TGridLine>(dgv, columns);Di2015NewLine            //statePreserver.RestoreState();Di2015NewLine            //dgv.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.None;Di2015NewLine        }Di2015NewLineDi2015NewLine        private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            PopulateReadOnlyGrid(this, new int[] { 1, 2, 3 }, new string[] { "a" });Di2015NewLineDi2015NewLine            ThreadPool.QueueUserWorkItem(new WaitCallback((a) =>Di2015NewLine            {Di2015NewLine                PopulateReadOnlyGrid(this, new int[] { 1, 2, 3 }, new string[] { "a" });Di2015NewLine            }));Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
220553Di2015UniqueSeparatorProcess myProcess = New Process;Di2015NewLinemyProcess.StartInfo.FileName = "cmd.exe";Di2015NewLinemyProcess.StartInfo.Arguments = "/C " + cmd;Di2015NewLinemyProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;Di2015NewLinemyProcess.StartInfo.CreateNoWindow = True;Di2015NewLinemyProcess.Start();Di2015NewLinemyProcess.WaitForExit();Di2015NewLinemyProcess.Close();Di2015NewLine
220586Di2015UniqueSeparatorpartial class MyControl : System.Web.UI.UserControl, IStateManagerDi2015NewLine{Di2015NewLine    [Serializable()]Di2015NewLine    protected struct MyControlStateDi2015NewLine    {Di2015NewLine        public bool someValue;Di2015NewLine        public string name;Di2015NewLine    }Di2015NewLineDi2015NewLine    protected MyControlState state;Di2015NewLineDi2015NewLine    public bool someValue {Di2015NewLine        get { return state.someValue; }Di2015NewLine        set { state.someValue = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool IsTrackingViewState {Di2015NewLine        get { return true; }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void LoadViewState(object state)Di2015NewLine    {Di2015NewLine        state = getDefaultState();Di2015NewLine        if ((state != null) && state is MyControlState) {Di2015NewLine            this.state = state;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override object SaveViewState()Di2015NewLine    {Di2015NewLine        return state;Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void TrackViewState()Di2015NewLine    {Di2015NewLine        base.TrackViewState();Di2015NewLine    }Di2015NewLine}Di2015NewLine
220706Di2015UniqueSeparator-- convert UTC to local timeDi2015NewLinecreate FUNCTION [dbo].[udfUtcToLocalTime]Di2015NewLine(Di2015NewLine    @gmt datetimeDi2015NewLine)Di2015NewLineRETURNS datetimeDi2015NewLineASDi2015NewLineBEGINDi2015NewLine    DECLARE @dt datetimeDi2015NewLine    SELECT Di2015NewLine        @dt = dateadd(millisecond,datediff(millisecond,getutcdate(), getdate()),@gmt)Di2015NewLine    RETURN @dtDi2015NewLineENDDi2015NewLine
220706Di2015UniqueSeparatorSELECT dbo.udfUtcToLocalTime(someDateTimeField)Di2015NewLineFROM someTableDi2015NewLine
220957Di2015UniqueSeparatorFileStream fs = new FileStream(Di2015NewLine  FilePath, Di2015NewLine  FileMode.Open,Di2015NewLine  FileAccess.ReadWrite, Di2015NewLine  FileShare.NoneDi2015NewLine);Di2015NewLine
220981Di2015UniqueSeparatorXmlDocument document = new XmlDocument();Di2015NewLinedocument.LoadXml("<People><Person Name='Nick' /><Person Name='Joe' /></People>");Di2015NewLine
220981Di2015UniqueSeparatorXmlDocument document = new XmlDocument();Di2015NewLinedocument.Load(@"C:\\Path\\To\\xmldoc.xml");Di2015NewLine// Or using an XmlReader/XmlTextReaderDi2015NewLineXmlReader reader = XmlReader.Create(@"C:\\Path\\To\\xmldoc.xml");Di2015NewLinedocument.Load(reader);Di2015NewLine
220981Di2015UniqueSeparatorXmlDocument document = new XmlDocument();Di2015NewLinedocument.LoadXml("<People><Person Name='Nick' /><Person Name='Joe' /></People>");Di2015NewLineDi2015NewLine// Select a single nodeDi2015NewLineXmlNode node = document.SelectSingleNode("/People/Person[@Name = 'Nick']");Di2015NewLineDi2015NewLine// Select a list of nodesDi2015NewLineXmlNodeList nodes = document.SelectNodes("/People/Person");Di2015NewLine
220981Di2015UniqueSeparatorXmlReaderSettings settings = new XmlReaderSettings();Di2015NewLinesettings.ValidateType = ValidationType.Schema;Di2015NewLinesettings.Schemas.Add("", pathToXsd); // targetNamespace, pathToXsdDi2015NewLineDi2015NewLineXmlReader reader = XmlReader.Create(pathToXml, settings);Di2015NewLineXmlDocument document = new XmlDocument();Di2015NewLineDi2015NewLinetry {Di2015NewLine    document.Load(reader);Di2015NewLine} catch (XmlSchemaValidationException ex) { Trace.WriteLine(ex.Message); }Di2015NewLine
220981Di2015UniqueSeparatorXmlReaderSettings settings = new XmlReaderSettings();Di2015NewLinesettings.ValidateType = ValidationType.Schema;Di2015NewLinesettings.Schemas.Add("", pathToXsd); // targetNamespace, pathToXsdDi2015NewLinesettings.ValidationEventHandler += new ValidationEventHandler(settings_ValidationEventHandler);Di2015NewLineDi2015NewLineXmlReader reader = XmlReader.Create(pathToXml, settings);Di2015NewLinewhile (reader.Read()) { }Di2015NewLineDi2015NewLineprivate void settings_ValidationEventHandler(object sender, ValidationEventArgs args)Di2015NewLine{Di2015NewLine    // e.Message, e.Severity (warning, error), e.ErrorDi2015NewLine    // or you can access the reader if you have access to itDi2015NewLine    // reader.LineNumber, reader.LinePosition.. etcDi2015NewLine}Di2015NewLine
220981Di2015UniqueSeparatorXmlWriter writer = XmlWriter.Create(pathToOutput);Di2015NewLinewriter.WriteStartDocument();Di2015NewLinewriter.WriteStartElement("People");Di2015NewLineDi2015NewLinewriter.WriteStartElement("Person");Di2015NewLinewriter.WriteAttributeString("Name", "Nick");Di2015NewLinewriter.WriteEndElement();Di2015NewLineDi2015NewLinewriter.WriteStartElement("Person");Di2015NewLinewriter.WriteStartAttribute("Name");Di2015NewLinewriter.WriteValue("Nick");Di2015NewLinewriter.WriteEndAttribute();Di2015NewLinewriter.WriteEndElement();Di2015NewLineDi2015NewLinewriter.WriteEndElement();Di2015NewLinewriter.WriteEndDocument();Di2015NewLineDi2015NewLinewriter.Flush();Di2015NewLine
220981Di2015UniqueSeparator    XDocument doc = XDocument.Load(pathToXml);Di2015NewLine    List<Person> people = (from xnode in xdoc.Element("People").Elements("Person")Di2015NewLine                       select new PersonDi2015NewLine                       {Di2015NewLine                           Name = xnode.Attribute("Name").ValueDi2015NewLine                       }).ToList();Di2015NewLine
220981Di2015UniqueSeparatorXDocument doc =Di2015NewLine        new XDocument(Di2015NewLine              new XDeclaration("1.0", Encoding.UTF8.HeaderName, String.Empty),Di2015NewLine              new XComment("Xml Document"),Di2015NewLine              new XElement("catalog",Di2015NewLine                    new XElement("book",Di2015NewLine                          new XAttribute("id", "bk001"),Di2015NewLine                                new XElement("title", "Book Title")Di2015NewLine                    )Di2015NewLine              )Di2015NewLine        );Di2015NewLine
220981Di2015UniqueSeparator<!--Xml Document-->Di2015NewLine<catalog>Di2015NewLine  <book id="bk001">Di2015NewLine    <title>Book Title</title>Di2015NewLine  </book>Di2015NewLine</catalog>Di2015NewLine
221016Di2015UniqueSeparatorbinary(16)
221016Di2015UniqueSeparatorSystem.Guid
221016Di2015UniqueSeparatorbyte[]
221016Di2015UniqueSeparatorToByteArray()
221209Di2015UniqueSeparatorstatic string ConvertToHex(decimal d)Di2015NewLine{Di2015NewLine    int[] bits = decimal.GetBits(d);Di2015NewLine    if (bits[3] != 0) // Sign and exponentDi2015NewLine    {Di2015NewLine        throw new ArgumentException();Di2015NewLine    }Di2015NewLine    return string.Format("{0:x8}{1:x8}{2:x8}",Di2015NewLine        (uint)bits[2], (uint)bits[1], (uint)bits[0]);Di2015NewLine}Di2015NewLine
221227Di2015UniqueSeparator<configuration>Di2015NewLine  ...Di2015NewLine  <system.webServer>Di2015NewLine    ...Di2015NewLine    <modules>Di2015NewLine      <remove name="Session" />Di2015NewLine      <add name="Session" type="System.Web.SessionState.SessionStateModule"/>Di2015NewLine      ...Di2015NewLine    </modules>Di2015NewLine  </system.webServer>Di2015NewLine</configuration>Di2015NewLine
221227Di2015UniqueSeparatormachine.config
221243Di2015UniqueSeparatorfile:///
221243Di2015UniqueSeparator#
221243Di2015UniqueSeparator#
221348Di2015UniqueSeparator var fileLength = new FileInfo(filePath).Length;Di2015NewLine
221348Di2015UniqueSeparatorlong jpegByteSize;Di2015NewLineusing (var ms = new MemoryStream(estimatedLength)) // estimatedLength can be original fileLengthDi2015NewLine{Di2015NewLine    image.Save(ms, ImageFormat.Jpeg); // save image to stream in Jpeg formatDi2015NewLine    jpegByteSize = ms.Length;Di2015NewLine }Di2015NewLine
221470Di2015UniqueSeparatorList<Human> myList = new List<Human>();Di2015NewLineHuman h = new Human();Di2015NewLinemyList.Add(h);Di2015NewLine
221470Di2015UniqueSeparatorArrayList myObjectList = new ArrayList();Di2015NewLineHuman h = new Human();Di2015NewLinemyObjectList.Add((object)h));Di2015NewLine
221545Di2015UniqueSeparator# echo -n 127.0.0.1 | perl -n -e 'print (($_ =~ m/(^.*$)/)[0]),"\\n";'Di2015NewLine-> 127.0.0.1Di2015NewLine# echo -n 127.0.0.1 | perl -n -e 'print (($_ =~ m/(^*$)/)[0]),"\\n";'Di2015NewLine->Di2015NewLine
221630Di2015UniqueSeparatorObjectQuery<T>
221630Di2015UniqueSeparatorIQueryable<T>
221630Di2015UniqueSeparatorint count = oQuery.Count();Di2015NewLine
221695Di2015UniqueSeparatorwhere T : class
221695Di2015UniqueSeparatorwhere T : struct
221695Di2015UniqueSeparatorwhere T : SomeClass
221695Di2015UniqueSeparatorwhere T : ISomeInterface
221695Di2015UniqueSeparatorwhere T : new()
221724Di2015UniqueSeparatorICollection<T>
221724Di2015UniqueSeparatorIList<T>
221724Di2015UniqueSeparatorIList<T>
221724Di2015UniqueSeparatorIList
221724Di2015UniqueSeparatorIEnumerable<T>
221724Di2015UniqueSeparatorIEnumerable<T>
221724Di2015UniqueSeparatorIEnumerable<T>
221724Di2015UniqueSeparatorICollection<T>
221724Di2015UniqueSeparatorIList<T>
221724Di2015UniqueSeparatorIEnumerable<T>
221724Di2015UniqueSeparatorIEnumerable
221740Di2015UniqueSeparatorDateTime.MinValue
221740Di2015UniqueSeparatorDateTime? MyNullableDate;Di2015NewLine
221740Di2015UniqueSeparatorNullable<DateTime> MyNullableDate;Di2015NewLine
221740Di2015UniqueSeparatordefault(DateTime)Di2015NewLine
221920Di2015UniqueSeparatorc:\\temp
221920Di2015UniqueSeparatorcopy /a *.vcf c:\\allcards.vcf
221941Di2015UniqueSeparators.Length
221941Di2015UniqueSeparatorpublic static byte[] ReadFully(Stream input)Di2015NewLine{Di2015NewLine    byte[] buffer = new byte[16*1024];Di2015NewLine    using (MemoryStream ms = new MemoryStream())Di2015NewLine    {Di2015NewLine        int read;Di2015NewLine        while ((read = input.Read(buffer, 0, buffer.Length)) > 0)Di2015NewLine        {Di2015NewLine            ms.Write(buffer, 0, read);Di2015NewLine        }Di2015NewLine        return ms.ToArray();Di2015NewLine    }Di2015NewLine}Di2015NewLine
222016Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLineusing System.Data;Di2015NewLineDi2015NewLineusing System.Configuration;Di2015NewLineDi2015NewLineusing System.Web;Di2015NewLineDi2015NewLineusing System.Web.Security;Di2015NewLineDi2015NewLineusing System.Web.UI;Di2015NewLineDi2015NewLineusing System.Web.UI.HtmlControls;Di2015NewLineDi2015NewLineusing System.Web.UI.WebControls;Di2015NewLineDi2015NewLineusing System.Web.UI.WebControls.WebParts;Di2015NewLineDi2015NewLineusing BlogEngine.Core;Di2015NewLineDi2015NewLineusing BlogEngine.Core.Web.Controls;Di2015NewLineDi2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine/// <summary>Di2015NewLineDi2015NewLine/// Summary description for PostSecurityDi2015NewLineDi2015NewLine/// </summary>Di2015NewLineDi2015NewLine[Extension("Checks to see if a user can see this blog post.",Di2015NewLineDi2015NewLine            "1.0", "<a href=\\"http://www.lavablast.com\\">LavaBlast.com</a>")]Di2015NewLineDi2015NewLinepublic class RequireLoginDi2015NewLine{Di2015NewLineDi2015NewLine    static protected ExtensionSettings settings = null;Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    public RequireLogin()Di2015NewLine    {Di2015NewLineDi2015NewLine        Post.Serving += new EventHandler<ServingEventArgs>(Post_Serving);Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine        ExtensionSettings s = new ExtensionSettings("RequireLogin");Di2015NewLineDi2015NewLine        // describe specific rules for entering parametersDi2015NewLineDi2015NewLine        s.Help = "Checks to see if the user has any of those roles before displaying the post. ";Di2015NewLineDi2015NewLine        s.Help += "You can associate a role with a specific category. ";Di2015NewLineDi2015NewLine        s.Help += "All posts having this category will require that the user have the role. ";Di2015NewLineDi2015NewLine        s.Help += "A parameter with only a role without a category will enable to filter all posts to this role. ";Di2015NewLineDi2015NewLine        ExtensionManager.ImportSettings(s);Di2015NewLineDi2015NewLine        settings = ExtensionManager.GetSettings("PostSecurity");Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    protected void Post_Serving(object sender, ServingEventArgs e)Di2015NewLine    {Di2015NewLine        MembershipUser user = Membership.GetUser();Di2015NewLine        if(HttpContext.Current.Request.RawUrl.Contains("syndication.axd"))Di2015NewLine        {Di2015NewLine            return;Di2015NewLine        }Di2015NewLineDi2015NewLine        if (user == null)Di2015NewLine        {Di2015NewLine            HttpContext.Current.Response.Redirect("~/Login.aspx");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
222062Di2015UniqueSeparatorsim is MainSim;Di2015NewLine(sim as MainSim) != null;Di2015NewLinesim.GetType().IsSubclassOf(typeof(MainSim));Di2015NewLinetypeof(MainSim).IsAssignableFrom(sim.GetType());Di2015NewLine
222062Di2015UniqueSeparatorbool IsMainSimType(Type t)Di2015NewLine { if (t == typeof(MainSim)) return true;   Di2015NewLine   if (t == typeof(object) ) return false;Di2015NewLine   return IsMainSimType(t.BaseType);Di2015NewLine }Di2015NewLine
222111Di2015UniqueSeparatorusing (FileStream stream = new FileStream(@"C:\\Myfile.txt", FileMode.Open, FileAccess.ReadWrite, FileShare.Read))Di2015NewLine{Di2015NewLine   // Do your writing here.Di2015NewLine}Di2015NewLine
222111Di2015UniqueSeparatorusing (FileStream stream = new FileStream(@"C:\\Myfile.txt", FileMode.Open, FileAccess.Read, FileShare.ReadWrite))Di2015NewLine{Di2015NewLine   // Does reading  here.Di2015NewLine}Di2015NewLine
222426Di2015UniqueSeparatorinternal interface IRelativeToDi2015NewLine{Di2015NewLine    object getRelativeTo(); // or maybe something else non-genericDi2015NewLine    void setRelativeTo(object relativeTo);Di2015NewLine}Di2015NewLineinternal interface IRelativeTo<T> : IRelativeToDi2015NewLine    where T : IObjectDi2015NewLine{Di2015NewLine    new T getRelativeTo();Di2015NewLine    new void setRelativeTo(T relativeTo);Di2015NewLine}Di2015NewLine
222426Di2015UniqueSeparatorvoid DoSomething<T>() where T : IObjectDi2015NewLine{Di2015NewLine    IRelativeTo<IObject> foo = // etcDi2015NewLine}Di2015NewLine
222426Di2015UniqueSeparatorIRelativeTo<T>
222426Di2015UniqueSeparatorDoSomething()
222426Di2015UniqueSeparatorDoSomething(foo);Di2015NewLine
222426Di2015UniqueSeparatorDoSomething<SomeType>(foo);Di2015NewLine
222640Di2015UniqueSeparatorstatic class ExtensionsDi2015NewLine{Di2015NewLine    public static IList<T> Clone<T>(this IList<T> listToClone) where T: ICloneableDi2015NewLine    {Di2015NewLine        return listToClone.Select(item => (T)item.Clone()).ToList();Di2015NewLine    }Di2015NewLine}Di2015NewLine
222656Di2015UniqueSeparatorFooEditDto
222656Di2015UniqueSeparatorFooDto
222656Di2015UniqueSeparatorclass FooDtoDi2015NewLine { public FooDto(Bar a, Bar b, Bar c) Di2015NewLine    { PropertyA = a;Di2015NewLine      PropertyB = b;Di2015NewLine      PropertyC = c;Di2015NewLine    }Di2015NewLine   public Bar PropertyA {get;set;}Di2015NewLine   public Bar PropertyB {get;set;}Di2015NewLine   public Bar PropertyC {get;set;}Di2015NewLine }Di2015NewLineDi2015NewLineclass FooEditDto : FooDtoDi2015NewLine { public FooEditDto(Bar a, Bar b, Bar c) : base(a,b,c)Di2015NewLine   public Bar PropertyD {get;set;}Di2015NewLine   public Bar PropertyE {get;set;}Di2015NewLine }Di2015NewLineDi2015NewLinepublic static Expression<Func<Foo, FooEditDto>> EditDtoSelector()Di2015NewLine{Di2015NewLine    return f => new FooEditDto(f.PropertyA,f.PropertyB,f.PropertyC)Di2015NewLine    {Di2015NewLine        PropertyD = f.PropertyD,Di2015NewLine        PropertyE = f.PropertyEDi2015NewLine    };Di2015NewLine}Di2015NewLine
222898Di2015UniqueSeparatorstring.Format("{0}://{1}:{2}", Request.Url.Scheme, Request.Url.Host, Request.Url.Port)Di2015NewLine
223020Di2015UniqueSeparatorDispose
223020Di2015UniqueSeparatorBinaryReader
223020Di2015UniqueSeparatorpublic void Dispose()Di2015NewLine{Di2015NewLine}Di2015NewLine
223020Di2015UniqueSeparatorvoid IDisposable.Dispose()Di2015NewLine{Di2015NewLine}Di2015NewLine
223020Di2015UniqueSeparatorIDisposable
223020Di2015UniqueSeparatorIDisposable
223062Di2015UniqueSeparator<asp:TemplateField HeaderText="Msg"> Di2015NewLine    <asp:HyperLink runat="server" Text='<%# HttpUtility.UrlEncode(Eval("Msg")) %>' NavigateUrl='<%#Eval("Msg")%>' />Di2015NewLine</asp:TemplateField>Di2015NewLine
223068Di2015UniqueSeparatorbase
223068Di2015UniqueSeparatorthis
223068Di2015UniqueSeparatornull
223091Di2015UniqueSeparatorSystem.Diagnostics.Debug.Print()
223176Di2015UniqueSeparator//  using System.Text.RegularExpressions;Di2015NewLineDi2015NewLine/// <summary>Di2015NewLine///  Regular expression built for C# on: Tue, Oct 21, 2008, 02:34:30 PMDi2015NewLine///  Using Expresso Version: 3.0.2766, http://www.ultrapico.comDi2015NewLine///  Di2015NewLine///  A description of the regular expression:Di2015NewLine///  Di2015NewLine///  Any character that is NOT in this class: [\\\\], any number of repetitionsDi2015NewLine///  End of line or stringDi2015NewLine///  Di2015NewLine///Di2015NewLine/// </summary>Di2015NewLinepublic static Regex regex = new Regex(Di2015NewLine      @"[^\\\\]*$",Di2015NewLine    RegexOptions.IgnoreCaseDi2015NewLine    | RegexOptions.CultureInvariantDi2015NewLine    | RegexOptions.IgnorePatternWhitespaceDi2015NewLine    | RegexOptions.CompiledDi2015NewLine    );Di2015NewLine
223259Di2015UniqueSeparator<Compile Include="AlertDialog.xaml.cs">Di2015NewLine  <DependentUpon>AlertDialog.xaml</DependentUpon>Di2015NewLine</Compile>Di2015NewLine
223320Di2015UniqueSeparatorstring url = "http://stackoverflow.com/";Di2015NewLineSystem.Diagnostics.Process.Start(url); Di2015NewLine
223513Di2015UniqueSeparatorPageMethods.getAdCodeInfo(value, onSuccess, onError)Di2015NewLine
223513Di2015UniqueSeparatoronSuccess
223513Di2015UniqueSeparatoronError
223746Di2015UniqueSeparatorclass ADi2015NewLine{Di2015NewLine    public int Value;Di2015NewLine    public int Add(int a) { return a + Value; }Di2015NewLine    public int Mul(int a) { return a * Value; }Di2015NewLine}Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main( string[] args )Di2015NewLine    {Di2015NewLine        A a = new A();Di2015NewLine        a.Value = 10;Di2015NewLine        Func<int, int> f;Di2015NewLine        f = a.Add;Di2015NewLine        Console.WriteLine("Add: {0}", f(5));Di2015NewLine        f = a.Mul;Di2015NewLine        Console.WriteLine("Mul: {0}", f(5));Di2015NewLine    }Di2015NewLine}Di2015NewLine
223746Di2015UniqueSeparatorFunc<A,int,int> f = delegate( A o, int i ) { return o.Add( i ); };Di2015NewLineConsole.WriteLine( "Add: {0}", f( a, 5 ) );Di2015NewLinef = ( A o, int i ) => o.Mul( i );Di2015NewLineConsole.WriteLine( "Mul: {0}", f( a, 5 ) );Di2015NewLine
223764Di2015UniqueSeparatorpublic void WriteFile(string fileName)Di2015NewLine{Di2015NewLine    using (FileStream fs = new FileStream(fileName, FileMode.Create))Di2015NewLine    {Di2015NewLine        Stream s;Di2015NewLine        if (Path.GetExtension(fileName) == ".cmx")Di2015NewLine        {Di2015NewLine            s = new GZipStream(fs, CompressionMode.Compress);Di2015NewLine        }Di2015NewLine        else if (Path.GetExtension(fileName) == ".cmz")Di2015NewLine        {Di2015NewLine            s = new DeflateStream(fs, CompressionMode.Compress);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            s = fs;Di2015NewLine        }Di2015NewLine        WriteXml(s);Di2015NewLine        s.Close();Di2015NewLine    }Di2015NewLine}Di2015NewLine
223857Di2015UniqueSeparatorpublic bool OnlyHexInString(string test)Di2015NewLine{Di2015NewLine    // For C-style hex notation (0xFF) you can use @"\\A\\b(0[xX])?[0-9a-fA-F]+\\b\\Z"Di2015NewLine    return System.Text.RegularExpressions.Regex.IsMatch(test, @"\\A\\b[0-9a-fA-F]+\\b\\Z");Di2015NewLine}Di2015NewLine
224008Di2015UniqueSeparator        int width = 1000;Di2015NewLine        int height = 10000;Di2015NewLine        List<int[]> list = new List<int[]>();Di2015NewLine        for (int i = 0; i < height; i++)Di2015NewLine        {Di2015NewLine            list.Add(Enumerable.Range(0, width).ToArray());Di2015NewLine        }Di2015NewLine        int[][] bazillionInts = list.ToArray();Di2015NewLine        using (FileStream fsZ = new FileStream("c:\\\\temp_zipped.txt", FileMode.Create))Di2015NewLine        using (FileStream fs = new FileStream("c:\\\\temp_notZipped.txt", FileMode.Create))Di2015NewLine        using (GZipStream gz = new GZipStream(fsZ, CompressionMode.Compress))Di2015NewLine        {Di2015NewLine            BinaryFormatter f = new BinaryFormatter();Di2015NewLine            f.Serialize(gz, bazillionInts);Di2015NewLine            f.Serialize(fs, bazillionInts);Di2015NewLine        }Di2015NewLine
224008Di2015UniqueSeparator        int width = 1000;Di2015NewLine        int height = 10000;Di2015NewLine        Random rand = new Random(123456);Di2015NewLine        int[,] bazillionInts = new int[width, height];Di2015NewLine        for(int i = 0 ; i < width;i++)Di2015NewLine            for (int j = 0; j < height; j++)Di2015NewLine            {Di2015NewLine                bazillionInts[i, j] = rand.Next(50000);Di2015NewLine            }Di2015NewLine
224008Di2015UniqueSeparatortemp_notZipped.txt
224008Di2015UniqueSeparatortemp_zipped.txt
224244Di2015UniqueSeparatorstring text = "fkdfdsfdflkdkfk@dfsdfjk72388389@kdkfkdfkkl@jkdjkfjd@jjjk@";Di2015NewLineDi2015NewLinetext = text.Replace("@", "@" + System.Environment.NewLine);Di2015NewLine
224251Di2015UniqueSeparator    static void WriteShorts(short[] values, string path)Di2015NewLine    {Di2015NewLine        using (FileStream fs = new FileStream(path, FileMode.OpenOrCreate, FileAccess.Write))Di2015NewLine        {Di2015NewLine            using (BinaryWriter bw = new BinaryWriter(fs))Di2015NewLine            {Di2015NewLine                foreach (short value in values)Di2015NewLine                {Di2015NewLine                    bw.Write(value);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
224524Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine    \Console.WriteLine(Decrypt("47794945c0230c3d"));Di2015NewLine    }Di2015NewLineDi2015NewLine    static string Decrypt(string input)Di2015NewLine    {Di2015NewLine    \TripleDES tripleDes = TripleDES.Create();Di2015NewLine    \tripleDes.IV = Encoding.ASCII.GetBytes("password");Di2015NewLine    \tripleDes.Key = Encoding.ASCII.GetBytes("passwordDR0wSS@P6660juht");Di2015NewLine    \tripleDes.Mode = CipherMode.CBC;Di2015NewLine    \tripleDes.Padding = PaddingMode.Zeros;Di2015NewLineDi2015NewLine    \ICryptoTransform crypto = tripleDes.CreateDecryptor();Di2015NewLine    \byte[] decodedInput = Decoder(input);Di2015NewLine    \byte[] decryptedBytes = crypto.TransformFinalBlock(decodedInput, 0, decodedInput.Length);Di2015NewLine    \return Encoding.ASCII.GetString(decryptedBytes);Di2015NewLine    }Di2015NewLineDi2015NewLine    static byte[] Decoder(string input)Di2015NewLine    {Di2015NewLine    \byte[] bytes = new byte[input.Length/2];Di2015NewLine    \int targetPosition = 0;Di2015NewLineDi2015NewLine    \for( int sourcePosition=0; sourcePosition<input.Length; sourcePosition+=2 )Di2015NewLine    \{Di2015NewLine    \\string hexCode = input.Substring(sourcePosition, 2);Di2015NewLine    \\bytes[targetPosition++] = Byte.Parse(hexCode, NumberStyles.AllowHexSpecifier);Di2015NewLine    \}Di2015NewLineDi2015NewLine    \return bytes;Di2015NewLine    }Di2015NewLine}Di2015NewLine
224702Di2015UniqueSeparatorusing (IDbTransaction tran = conn.BeginTransaction()) {Di2015NewLine    try {Di2015NewLine        // your codeDi2015NewLine        tran.Commit();Di2015NewLine    }  catch {Di2015NewLine        tran.Rollback();Di2015NewLine        throw;Di2015NewLine    }Di2015NewLine}Di2015NewLine
224702Di2015UniqueSeparatorusing(TransactionScope tran = new TransactionScope()) {Di2015NewLine    CallAMethodThatDoesSomeWork();Di2015NewLine    CallAMethodThatDoesSomeMoreWork();Di2015NewLine    tran.Complete();Di2015NewLine}Di2015NewLine
225027Di2015UniqueSeparatorforeach (FontFamily ff in System.Drawing.FontFamily.Families)Di2015NewLine{Di2015NewLine    if (ff.IsStyleAvailable(FontStyle.Regular))Di2015NewLine    {Di2015NewLine        Font font = new Font(ff, 10);Di2015NewLine        LOGFONT lf = new LOGFONT();Di2015NewLine        font.ToLogFont(lf);Di2015NewLine        if (lf.lfPitchAndFamily ^ 1)Di2015NewLine        {Di2015NewLine            do stuff here......Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
225278Di2015UniqueSeparatorpublic Car CurrentCar { get; set; }Di2015NewLine
225278Di2015UniqueSeparator<div>Di2015NewLine  Wheels: <%= CurrentCar.Wheels %><br />Di2015NewLine  Model: <%= CurrentCar.Model %>Di2015NewLine</div>Di2015NewLine
225514Di2015UniqueSeparatormyContextMenuStrip.Items.Clear();Di2015NewLine
225514Di2015UniqueSeparatormyContextMenuStrip.Items.Add(myString);Di2015NewLine
225514Di2015UniqueSeparatorprivate void myContextMenuStrip_ItemClicked(object sender, ToolStripItemClickedEventArgs e)Di2015NewLine{Di2015NewLine    DoSomething(e.ClickedItem.Text);Di2015NewLine}Di2015NewLine
225556Di2015UniqueSeparatorif (MyLibraryControl.InvokeRequired)Di2015NewLine  //do your thing hereDi2015NewLine
225634Di2015UniqueSeparatorint bytesRead;Di2015NewLinebyte[] buffer = new byte[1024];Di2015NewLinewhile((bytesRead = webStream.Read(buffer, 0, buffer.Length)) > 0) {Di2015NewLine  // process "bytesRead" worth of data from "buffer"Di2015NewLine}Di2015NewLine
225771Di2015UniqueSeparatorint rawsize = Marshal.SizeOf(value);Di2015NewLinebyte[] rawdata = new byte[rawsize];Di2015NewLineGCHandle handle = GCHandle.Alloc(rawdata, GCHandleType.Pinned);Di2015NewLineMarshal.StructureToPtr(value, handle.AddrOfPinnedObject(), false);Di2015NewLinehandle.Free();Di2015NewLine
225771Di2015UniqueSeparator[StructLayout(LayoutKind.Sequential, Pack = 1)]Di2015NewLine
225771Di2015UniqueSeparator[MarshalAs(UnmanagedType.ByValArray, SizeConst = 8)]Di2015NewLinebyte[] _state;Di2015NewLine
225771Di2015UniqueSeparatorpublic T GetValue<T>()Di2015NewLine{Di2015NewLine    GCHandle handle = GCHandle.Alloc(RawValue, GCHandleType.Pinned);Di2015NewLine    T structure = (T)Marshal.PtrToStructure(handle.AddrOfPinnedObject(), Di2015NewLine                      typeof(T));Di2015NewLine    handle.Free();Di2015NewLine    return structure;Di2015NewLine}Di2015NewLine
225850Di2015UniqueSeparatorRelease
225850Di2015UniqueSeparatorinternal
225850Di2015UniqueSeparatorInternalsVisibleTo
225850Di2015UniqueSeparatorprivate
225850Di2015UniqueSeparatorDispose
225850Di2015UniqueSeparatorAppDomain
225850Di2015UniqueSeparatorRelease
225854Di2015UniqueSeparatorpublic DealsForm()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine    //this.StartPosition = FormStartPosition.CenterParent;Di2015NewLine}Di2015NewLineDi2015NewLine//DealsForm_Load EventDi2015NewLineprivate void DealsForm_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    this.Location = this.Owner.Location;  //NEW CODEDi2015NewLine}Di2015NewLine
225854Di2015UniqueSeparatorprivate void nvShowDeals_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)Di2015NewLine{Di2015NewLine    DealsForm frm = new DealsForm();Di2015NewLineDi2015NewLine    frm.DataSource = this.Deals;Di2015NewLine    frm.StartPosition = FormStartPosition.Manual; //NEW CODEDi2015NewLine    frm.Show(this);Di2015NewLine}Di2015NewLine
225967Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Drawing;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLinepublic class TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        var props = typeof(Color).GetProperties(BindingFlags.Public | BindingFlags.Static);Di2015NewLine        foreach (PropertyInfo prop in props)Di2015NewLine        {Di2015NewLine            Color color = (Color) prop.GetValue(null, null);Di2015NewLine            Console.WriteLine("Color.{0} = ({1}, {2}, {3})", prop.Name,Di2015NewLine                              color.R, color.G, color.B);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
225967Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Drawing;Di2015NewLineDi2015NewLinepublic class TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        foreach (KnownColor known in Enum.GetValues(typeof(KnownColor)))Di2015NewLine        {Di2015NewLine            Color color = Color.FromKnownColor(known);Di2015NewLine            Console.WriteLine("Color.{0} = ({1}, {2}, {3})", known,Di2015NewLine                              color.R, color.G, color.B);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
226008Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    int x = 10;Di2015NewLine    x = x++;Di2015NewLine    Console.WriteLine(x);Di2015NewLine}Di2015NewLine
226008Di2015UniqueSeparatorstatic int plusplus(ref int x)Di2015NewLine{Di2015NewLine  int xOld = x;Di2015NewLine  x++;Di2015NewLine  return xOld;Di2015NewLine}Di2015NewLineDi2015NewLinestatic void Main(string[] args)Di2015NewLine{Di2015NewLine    int x = 10;Di2015NewLine    x = plusplus(x);Di2015NewLine    Console.WriteLine(x);Di2015NewLine}Di2015NewLine
226008Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    int x = 10;Di2015NewLine    x = ++x;Di2015NewLine    Console.WriteLine(x);Di2015NewLine}Di2015NewLine
226123Di2015UniqueSeparatorusing Microsoft.SharePoint;Di2015NewLineusing Microsoft.Office.Server;Di2015NewLineusing Microsoft.Office.Server.UserProfiles;Di2015NewLine
226123Di2015UniqueSeparatorServerContext sc = ServerContext.Current;Di2015NewLineUserProfileManager upm = new UserProfileManager(sc);Di2015NewLineUserProfile up = upm.GetUserProfile(SPContext.Current.Web.CurrentUser.LoginName);Di2015NewLine
226123Di2015UniqueSeparatorupm.GetUserProfile(SPContext.Current.Web.CurrentUser.LoginName).IDDi2015NewLine
226123Di2015UniqueSeparatorupm.GetUserProfile(SPContext.Current.Web.CurrentUser.LoginName).PersonalSite.RootWeb.IDDi2015NewLine
226700Di2015UniqueSeparator    public IOrderedQueryable<int> GetOrderedQueryable()Di2015NewLine    {Di2015NewLine        IQueryable<int> myInts = new List<int>() { 3, 4, 1, 2 }.AsQueryable<int>();Di2015NewLine        return myInts.Where(i => i == 2);Di2015NewLine    }Di2015NewLine
226700Di2015UniqueSeparator    public IOrderedQueryable<int> GetOrderedQueryable()Di2015NewLine    {Di2015NewLine        IQueryable<int> myInts = new List<int>() { 3, 4, 1, 2 }.AsQueryable<int>();Di2015NewLine        return myInts.Where(i => i == 2) as IOrderedQueryable<int>;Di2015NewLine    }Di2015NewLine
226700Di2015UniqueSeparator    public void GetOrderedQueryable(ref IOrderedQueryable<int> query)Di2015NewLine    {Di2015NewLine        query = query.Where(i => i == 2);Di2015NewLine    }Di2015NewLine
226775Di2015UniqueSeparatorXPathDocument doc = new XPathDocument(@"c:\\filepath\\doc.xml");Di2015NewLineXPathNavigator nav = doc.CreateNavigator();Di2015NewLineXPathNodeIterator iter = nav.Select("/xpath/query/here");Di2015NewLineDi2015NewLinewhile(iter->MoveNext)Di2015NewLine{Di2015NewLine  //Do something with node here.Di2015NewLine}Di2015NewLine
226794Di2015UniqueSeparator webBrowser1.PreviewKeyDown += new PreviewKeyDownEventHandler(webBrowser1_PreviewKeyDown);       Di2015NewLineDi2015NewLine....Di2015NewLineDi2015NewLine private void webBrowser1_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e) {Di2015NewLine     Console.WriteLine(e.KeyCode.ToString() + "  " + e.Modifiers.ToString());Di2015NewLine     if (e.Modifiers == Keys.Control && e.KeyCode == Keys.V) {Di2015NewLine         MessageBox.Show("ctrl-v pressed");Di2015NewLine     }Di2015NewLine }Di2015NewLine
226795Di2015UniqueSeparatorHttpListener
226795Di2015UniqueSeparatorHttpWebRequest
226818Di2015UniqueSeparatorDictionary<string,DataTable> Tables = new Dictionary<string,DataTable>();Di2015NewLine// ... populate dictionary of tables ...Di2015NewLineXElement TableRoot = new XStreamingElement("Tables",Di2015NewLine    from t in TablesDi2015NewLine    select new XStreamingElement(t.Key,Di2015NewLine               from DataRow r in t.Value.RowsDi2015NewLine               select new XStreamingElement("row",Di2015NewLine                          from DataColumn c in t.Value.ColumnsDi2015NewLine                          select new XElement(c.ColumnName, r[c])))))Di2015NewLine
226818Di2015UniqueSeparator<Tables>Di2015NewLine    <Orders>Di2015NewLine        <row>Di2015NewLine            <sku>12345</sku>Di2015NewLine            <quantity>2</quantity>Di2015NewLine            <price>5.95</price>Di2015NewLine        </row>Di2015NewLine        <row>Di2015NewLine            <sku>54321</sku>Di2015NewLine            <quantity>3</quantity>Di2015NewLine            <price>2.95</price>Di2015NewLine        </row>Di2015NewLine    </Orders>Di2015NewLine</Tables>Di2015NewLine
227072Di2015UniqueSeparator// _timeZoneId is the String value found in the System Registry.Di2015NewLine// You can look up the list of TimeZones on your system using this:Di2015NewLine// ReadOnlyCollection<TimeZoneInfo> current = TimeZoneInfo.GetSystemTimeZones();Di2015NewLine// As long as your _timeZoneId string is in the registry Di2015NewLine// the _now DateTime object will containDi2015NewLine// the current time (adjusted for Daylight Savings Time) for that Time Zone.Di2015NewLinestring _timeZoneId = "Pacific Standard Time";Di2015NewLineDateTime startTime = DateTime.UtcNow;Di2015NewLineTimeZoneInfo tst = TimeZoneInfo.FindSystemTimeZoneById(_timeZoneId);Di2015NewLine_now = TimeZoneInfo.ConvertTime(startTime, TimeZoneInfo.Utc, tst);Di2015NewLine
227106Di2015UniqueSeparatorextended.ExtensionMethod(foo);Di2015NewLine
227106Di2015UniqueSeparatorStaticType.ExtensionMethod(extended, foo);Di2015NewLine
227133Di2015UniqueSeparatorforeach(UserControl uc in plhMediaBuys.Controls) {Di2015NewLine    MyControl c = uc as MyControl;Di2015NewLine    if (c != null) {Di2015NewLine        c.PublicPropertyIWantAccessTo;Di2015NewLine    }Di2015NewLine}Di2015NewLine
227218Di2015UniqueSeparatorusing System.IO;Di2015NewLineusing System.IO.IsolatedStorage;Di2015NewLine...Di2015NewLineDi2015NewLineIsolatedStorageFile appScope = IsolatedStorageFile.GetUserStoreForApplication();    Di2015NewLineusing(IsolatedStorageFileStream fs = new IsolatedStorageFileStream("data.dat", FileMode.OpenOrCreate, appScope))Di2015NewLine{Di2015NewLine...Di2015NewLine
227598Di2015UniqueSeparatorHttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(myURL);Di2015NewLineusing (HttpWebResponse response = (HttpWebResponse)webRequest.GetResponse())Di2015NewLine{Di2015NewLine    using (Stream resStream = response.GetResponseStream())Di2015NewLine    {Di2015NewLine        StreamReader reader = new StreamReader(resStream, Encoding.???);Di2015NewLine        return reader.ReadToEnd();Di2015NewLine    }Di2015NewLine}Di2015NewLine
227598Di2015UniqueSeparatorEncoding.Default
227713Di2015UniqueSeparator.testrunconfig
227745Di2015UniqueSeparator.ToString()
227795Di2015UniqueSeparatorvar i = System.Numerics.BigInteger.Parse("10000000000000000000000000000000");Di2015NewLine
227961Di2015UniqueSeparatorDataView dvOptions = new DataView(DataTableWithOptions);Di2015NewLinedvOptions.Sort = "Description";Di2015NewLineDi2015NewLineddlOptions.DataSource = dvOptions;Di2015NewLineddlOptions.DataTextField = "Description";Di2015NewLineddlOptions.DataValueField = "Id";Di2015NewLineddlOptions.DataBind();Di2015NewLine
228014Di2015UniqueSeparatorHttpListenerRequest
228014Di2015UniqueSeparator//POST paramDi2015NewLineif (webRequest.Method == "POST")Di2015NewLine{Di2015NewLine    StreamReader getPostParam = new StreamReader(request.InputStream, true);Di2015NewLine    postData = getPostParam.ReadToEnd();Di2015NewLine    byte[] postBuffer = System.Text.Encoding.Default.GetBytes(postData);Di2015NewLine    postDataStream.Write(postBuffer, 0, postBuffer.Length);Di2015NewLine    postDataStream.Close();Di2015NewLine}Di2015NewLine//END POST paramDi2015NewLine
228060Di2015UniqueSeparatorpublic static string Reverse( string s )Di2015NewLine{Di2015NewLine    char[] charArray = s.ToCharArray();Di2015NewLine    Array.Reverse( charArray );Di2015NewLine    return new string( charArray );Di2015NewLine}Di2015NewLine
228381Di2015UniqueSeparatorSystem.Diagnostics.Process.Start("psfile c:\\myfile.txt -c");
228381Di2015UniqueSeparatornet file ID /close
228405Di2015UniqueSeparatorMicrosoft.Win32.SystemEvents.PowerModeChanged
228531Di2015UniqueSeparatorbool is_hex_char = (c >= '0' && c <= '9') ||Di2015NewLine                   (c >= 'a' && c <= 'f') ||Di2015NewLine                   (c >= 'A' && c <= 'F');Di2015NewLine
228565Di2015UniqueSeparatorChar.IsDigit()
228565Di2015UniqueSeparatorChar.IsNumber()
228565Di2015UniqueSeparatorIsDigit()
228565Di2015UniqueSeparatortrue
228565Di2015UniqueSeparatorstatic private void test()Di2015NewLine{Di2015NewLine    for (int i = 0; i <= 0xffff; ++i)Di2015NewLine    {Di2015NewLine        char c = (char) i;Di2015NewLineDi2015NewLine        if (Char.IsDigit( c) != Char.IsNumber( c)) {Di2015NewLine            Console.WriteLine( "Char value {0:x} IsDigit() = {1}, IsNumber() = {2}", i, Char.IsDigit( c), Char.IsNumber( c));Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
228597Di2015UniqueSeparator        string[] newNames = { "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado", "Domingo" };Di2015NewLine        Thread.CurrentThread.CurrentCulture.DateTimeFormat.DayNames = newNames;Di2015NewLine
228641Di2015UniqueSeparatorprivate long sum(Node<T> thisNode)Di2015NewLine{Di2015NewLine    if (thisNode.Left == null && thisNode.Right == null)Di2015NewLine        return thisNode.Size;Di2015NewLine    if (node.Right == null)Di2015NewLine        return thisNode.Size + sum(thisNode.Left);Di2015NewLine    if (node.Left == null) Di2015NewLine        return thisNode.Size + sum(thisNode.Right);Di2015NewLine    return thisNode.Size + sum(thisNode.Left) + sum(thisNode.Right);Di2015NewLine}Di2015NewLine
228641Di2015UniqueSeparatorprivate long sum(Node<T> thisNode)Di2015NewLine{Di2015NewLine    if (thisNode.Left == null && thisNode.Right == null)Di2015NewLine        return thisNode.Size;Di2015NewLine    if (node.Right == null)Di2015NewLine        return sum(thisNode.Left);Di2015NewLine    if (node.Left == null) Di2015NewLine        return sum(thisNode.Right);Di2015NewLine    return sum(thisNode.Left) + sum(thisNode.Right);Di2015NewLine}Di2015NewLine
228641Di2015UniqueSeparatorprivate long sum(Node<T> thisNode)Di2015NewLine{Di2015NewLine    if (thisNode == null)Di2015NewLine        return 0;Di2015NewLine    return thisNode.Size + sum(thisNode.Left) + sum(thisNode.Right);Di2015NewLine}Di2015NewLine
228713Di2015UniqueSeparatorpublic abstract class AsyncCommand : ICommandDi2015NewLine{Di2015NewLine\public event EventHandler CanExecuteChanged;Di2015NewLine\public event EventHandler RunWorkerStarting;Di2015NewLine\public event RunWorkerCompletedEventHandler RunWorkerCompleted;Di2015NewLineDi2015NewLine\public abstract string Text { get; }Di2015NewLine\private bool _isExecuting;Di2015NewLine\public bool IsExecutingDi2015NewLine\{Di2015NewLine\\get { return _isExecuting; }Di2015NewLine\\private setDi2015NewLine\\{Di2015NewLine\\\_isExecuting = value;Di2015NewLine\\\if (CanExecuteChanged != null)Di2015NewLine\\\\CanExecuteChanged(this, EventArgs.Empty);Di2015NewLine\\}Di2015NewLine\}Di2015NewLineDi2015NewLine\protected abstract void OnExecute(object parameter);Di2015NewLineDi2015NewLine\public void Execute(object parameter)Di2015NewLine\{\Di2015NewLine\\tryDi2015NewLine\\{\Di2015NewLine\\\onRunWorkerStarting();Di2015NewLineDi2015NewLine\\\var worker = new BackgroundWorker();Di2015NewLine\\\worker.DoWork += ((sender, e) => OnExecute(e.Argument));Di2015NewLine\\\worker.RunWorkerCompleted += ((sender, e) => onRunWorkerCompleted(e));Di2015NewLine\\\worker.RunWorkerAsync(parameter);Di2015NewLine\\}Di2015NewLine\\catch (Exception ex)Di2015NewLine\\{Di2015NewLine\\\onRunWorkerCompleted(new RunWorkerCompletedEventArgs(null, ex, true));Di2015NewLine\\}Di2015NewLine\}Di2015NewLineDi2015NewLine\private void onRunWorkerStarting()Di2015NewLine\{Di2015NewLine\\IsExecuting = true;Di2015NewLine\\if (RunWorkerStarting != null)Di2015NewLine\\\RunWorkerStarting(this, EventArgs.Empty);Di2015NewLine\}Di2015NewLineDi2015NewLine\private void onRunWorkerCompleted(RunWorkerCompletedEventArgs e)Di2015NewLine\{Di2015NewLine\\IsExecuting = false;Di2015NewLine\\if (RunWorkerCompleted != null)Di2015NewLine\\\RunWorkerCompleted(this, e);Di2015NewLine\}Di2015NewLineDi2015NewLine\public virtual bool CanExecute(object parameter)Di2015NewLine\{Di2015NewLine\\return !IsExecuting;Di2015NewLine\}Di2015NewLine}Di2015NewLine
228798Di2015UniqueSeparatorBackgroundWorker
228798Di2015UniqueSeparatorThreadPool
228798Di2015UniqueSeparatorThreadPool
228798Di2015UniqueSeparatorpublic void SendDataAsync()Di2015NewLine{Di2015NewLine    ThreadPool.QueueUserWorkItem(delegateDi2015NewLine    {Di2015NewLine        SendEmail();Di2015NewLine    });Di2015NewLine}Di2015NewLine
228954Di2015UniqueSeparatorServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3;Di2015NewLine
228983Di2015UniqueSeparatorWait
228983Di2015UniqueSeparatorWorker
228983Di2015UniqueSeparatorMain
228983Di2015UniqueSeparatorWorker
228983Di2015UniqueSeparatorPulse
228983Di2015UniqueSeparatorMain
228983Di2015UniqueSeparatorWorker
228983Di2015UniqueSeparatorMain
228983Di2015UniqueSeparatorlock(obj) {...}
228983Di2015UniqueSeparatorMonitor.Enter
228983Di2015UniqueSeparatorMonitor.Exit
228983Di2015UniqueSeparatorlock(sync)
228983Di2015UniqueSeparator    static void Main()Di2015NewLine    {Di2015NewLine        object sync = new object();Di2015NewLine        lock (sync)Di2015NewLine        {Di2015NewLine            ThreadPool.QueueUserWorkItem(Worker, sync);Di2015NewLine            Console.WriteLine("Main sleeping");Di2015NewLineDi2015NewLine            // wait for the worker to tell us it is readyDi2015NewLine            Monitor.Wait(sync);Di2015NewLine            Console.WriteLine("Main woke up!");Di2015NewLine        }Di2015NewLine        Console.WriteLine("Press any key...");Di2015NewLine        Console.ReadKey();Di2015NewLine    }Di2015NewLine    static void Worker(object sync)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Worker started; about to sleep");Di2015NewLine        Thread.Sleep(5000);Di2015NewLine        Console.WriteLine("Worker about pulse");Di2015NewLine        lock (sync)Di2015NewLine        { // notify Main that we did something interestingDi2015NewLine            Monitor.Pulse(sync);Di2015NewLine            Console.WriteLine("Worker pulsed; about to release lock");Di2015NewLine        }Di2015NewLine        Console.WriteLine("Worker all done");Di2015NewLine    }Di2015NewLine
229085Di2015UniqueSeparatorfilename = Environment.ExpandEnvironmentVariables(filename);Di2015NewLine
229294Di2015UniqueSeparatorListBox listBox = c.Controls["listBox1"] as ListBox;Di2015NewLineif(listBox != null)Di2015NewLine{Di2015NewLine   listBox.Invoke(...);Di2015NewLine}Di2015NewLine
229351Di2015UniqueSeparatorString.intern
229351Di2015UniqueSeparator         // these strings get internedDi2015NewLine        string hello = "hello";Di2015NewLine        string hello2 = "hello";Di2015NewLineDi2015NewLine        string helloworld, helloworld2;Di2015NewLineDi2015NewLine        helloworld = hello;Di2015NewLine        helloworld += " world";Di2015NewLineDi2015NewLine        helloworld2 = hello;Di2015NewLine        helloworld2 += " world"; Di2015NewLineDi2015NewLine        unsafeDi2015NewLine        {Di2015NewLine            // very bad, this changes an interned string which affects Di2015NewLine            // all app domains.Di2015NewLine            fixed (char* str = hello2)Di2015NewLine            {Di2015NewLine                *str = 'X';Di2015NewLine            }Di2015NewLineDi2015NewLine            fixed (char* str = helloworld2)Di2015NewLine            {Di2015NewLine                *str = 'X';Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        Console.WriteLine("hello = {0} , hello2 = {1}", hello, hello2);Di2015NewLine        // output: hello = Xello , hello2 = Xello  Di2015NewLineDi2015NewLineDi2015NewLine        Console.WriteLine("helloworld = {0} , helloworld2 = {1}", helloworld, helloworld2);Di2015NewLine        // output : helloworld = hello world , helloworld2 = Xello worldDi2015NewLine
229367Di2015UniqueSeparator    /// <summary>Di2015NewLine    /// Renders a LoggingWeb user control.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="helper">Helper to extend.</param>Di2015NewLine    /// <param name="control">Type of control.</param>Di2015NewLine    /// <param name="data">ViewData to pass in.</param>Di2015NewLine    public static void RenderLoggingControl(this System.Web.Mvc.HtmlHelper helper, LoggingControls control, object data)Di2015NewLine    {Di2015NewLine        string controlName = string.Format("{0}.ascx", control);Di2015NewLine        string controlPath = string.Format("~/Controls/{0}", controlName);Di2015NewLine        string absControlPath = VirtualPathUtility.ToAbsolute(controlPath);Di2015NewLine        if (data == null)Di2015NewLine        {Di2015NewLine            helper.RenderPartial(absControlPath, helper.ViewContext.ViewData);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            helper.RenderPartial(absControlPath, data, helper.ViewContext.ViewData);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
229525Di2015UniqueSeparator[DllImport("GeoConvert.dll", Di2015NewLine                EntryPoint="_get_version@4", Di2015NewLine                CallingConvention=CallingConvention.StdCall)]Di2015NewLine    public static extern void GetGeoConvertVersion([MarshalAs(UnmanagedType.LPArray)]Di2015NewLine                                                    byte[] version);Di2015NewLine
229525Di2015UniqueSeparator[Test]Di2015NewLine    public void TestGetVersion()Di2015NewLine    {Di2015NewLine        //string version = "";Di2015NewLine        byte[] version = new byte[8];Di2015NewLine        LatLonUtils.GetGeoConvertVersion(version);Di2015NewLine        char[] versionChars = System.Text.Encoding.ASCII.GetChars(version);Di2015NewLineDi2015NewLine        string versionString = new string(versionChars);Di2015NewLine    }Di2015NewLine
229567Di2015UniqueSeparator    using System.Runtime.InteropServices;   //GuidAttributeDi2015NewLine    using System.Reflection;                //AssemblyDi2015NewLine    using System.Threading;                 //MutexDi2015NewLine    using System.Security.AccessControl;    //MutexAccessRuleDi2015NewLine    using System.Security.Principal;        //SecurityIdentifierDi2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        // get application GUID as defined in AssemblyInfo.csDi2015NewLine        string appGuid = ((GuidAttribute)Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(GuidAttribute), false).GetValue(0)).Value.ToString();Di2015NewLineDi2015NewLine        // unique id for global mutex - Global prefix means it is global to the machineDi2015NewLine        string mutexId = string.Format( "Global\\\\{{{0}}}", appGuid );Di2015NewLineDi2015NewLine        using (var mutex = new Mutex(false, mutexId))Di2015NewLine        {Di2015NewLine            // edited by Jeremy Wiebe to add example of setting up security for multi-user usageDi2015NewLine            // edited by 'Marc' to work also on localized systems (don't use just "Everyone") Di2015NewLine            var allowEveryoneRule = new MutexAccessRule(new SecurityIdentifier(WellKnownSidType.WorldSid, null), MutexRights.FullControl, AccessControlType.Allow);Di2015NewLine            var securitySettings = new MutexSecurity();Di2015NewLine            securitySettings.AddAccessRule(allowEveryoneRule);Di2015NewLine            mutex.SetAccessControl(securitySettings);Di2015NewLineDi2015NewLine            // edited by acidzombie24Di2015NewLine            var hasHandle = false;Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                tryDi2015NewLine                {Di2015NewLine                    // note, you may want to time out here instead of waiting foreverDi2015NewLine                    // edited by acidzombie24Di2015NewLine                    // mutex.WaitOne(Timeout.Infinite, false);Di2015NewLine                    hasHandle = mutex.WaitOne(5000, false);Di2015NewLine                    if (hasHandle == false)Di2015NewLine                        throw new TimeoutException("Timeout waiting for exclusive access");Di2015NewLine                }Di2015NewLine                catch (AbandonedMutexException)Di2015NewLine                {Di2015NewLine                    // Log the fact the mutex was abandoned in another process, it will still get aquiredDi2015NewLine                    hasHandle = true;Di2015NewLine                }Di2015NewLineDi2015NewLine                // Perform your work here.Di2015NewLine            }Di2015NewLine            finallyDi2015NewLine            {Di2015NewLine                // edited by acidzombie24, added if statemnetDi2015NewLine                if(hasHandle)Di2015NewLine                    mutex.ReleaseMutex();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
229670Di2015UniqueSeparatorIEnumerable<BaseClass>
229670Di2015UniqueSeparatorIEnumerator<BaseClass>
229670Di2015UniqueSeparatorEnumerable.Cast
229670Di2015UniqueSeparatorpublic static IEnumerator<TParent> Upcast<TParent, TChild>Di2015NewLine    (this IEnumerator<TChild> source)Di2015NewLine    where TChild : TParentDi2015NewLine{Di2015NewLine    while (source.MoveNext())Di2015NewLine    {Di2015NewLine        yield return source.Current;Di2015NewLine    }Di2015NewLine}Di2015NewLine
229670Di2015UniqueSeparatorreturn this.Map.Values.Cast<BaseClass>().GetEnumerator();Di2015NewLine
230002Di2015UniqueSeparator var x = GetSomeValue();Di2015NewLine
230002Di2015UniqueSeparatorclass DAOProxyServiceDi2015NewLine{Di2015NewLine     static DAOProxyService<T> Create<T>(T obj) { ......} Di2015NewLine}Di2015NewLine
230141Di2015UniqueSeparatorStream.CopyToAsync
230141Di2015UniqueSeparatorinput.CopyToAsync(output);Di2015NewLine
230141Di2015UniqueSeparatorTask
230141Di2015UniqueSeparatorawait input.CopyToAsync(output)Di2015NewLineDi2015NewLine// Code from here on will be run in a continuation.Di2015NewLine
230141Di2015UniqueSeparatorCopyToAsync
230141Di2015UniqueSeparatorSynchronizationContext
230141Di2015UniqueSeparatorawait
230141Di2015UniqueSeparatorStream.CopyTo
230141Di2015UniqueSeparatorinput.CopyTo(output);Di2015NewLine
230141Di2015UniqueSeparatorpublic static void CopyStream(Stream input, Stream output)Di2015NewLine{Di2015NewLine    byte[] buffer = new byte[32768];Di2015NewLine    int read;Di2015NewLine    while ((read = input.Read(buffer, 0, buffer.Length)) > 0)Di2015NewLine    {Di2015NewLine        output.Write (buffer, 0, read);Di2015NewLine    }Di2015NewLine}Di2015NewLine
230168Di2015UniqueSeparator[System.ComponentModel.DesignerCategory("Code")]Di2015NewLinepublic class SomeBaseClass : UserControlDi2015NewLine{Di2015NewLine //...Di2015NewLine}Di2015NewLine
230463Di2015UniqueSeparatorstring []answer = new string[10];Di2015NewLinefor(int i = 0;i<answer.length;i++)Di2015NewLine{Di2015NewLine\answer[i]= Console.ReadLine();Di2015NewLine}Di2015NewLine
230620Di2015UniqueSeparatormyList.Sort( delegate (MyType t1, MyType t2) Di2015NewLine    { return (t1.ID.CompareTo(t2.ID)); } Di2015NewLine);Di2015NewLine
230742Di2015UniqueSeparatorpublic interface IGenericFace<T> where T : SomeBaseClassDi2015NewLine
230753Di2015UniqueSeparatorlock (m_Hash)Di2015NewLine{Di2015NewLine    // Across all threads, I can be in one and only one of these two blocksDi2015NewLine    // Do something with the dictionaryDi2015NewLine}Di2015NewLinelock (m_Hash)Di2015NewLine{Di2015NewLine    // Across all threads, I can be in one and only one of these two blocksDi2015NewLine    // Do something with the dictionaryDi2015NewLine}Di2015NewLine
230753Di2015UniqueSeparatorprivate object m_LockerA = new object();Di2015NewLineprivate object m_LockerB = new object();Di2015NewLineDi2015NewLinelock (m_LockerA)Di2015NewLine{Di2015NewLine    // It's possible this block is active in one threadDi2015NewLine    // while the block below is active in anotherDi2015NewLine    // Do something with the dictionaryDi2015NewLine}Di2015NewLinelock (m_LockerB)Di2015NewLine{Di2015NewLine    // It's possible this block is active in one threadDi2015NewLine    // while the block above is active in anotherDi2015NewLine    // Do something with the dictionaryDi2015NewLine}Di2015NewLine
230949Di2015UniqueSeparatorpublic interface INodeAlterationProvider { ... }Di2015NewLinepublic interface IChildNodeListProvider { ... }Di2015NewLine
230949Di2015UniqueSeparatorpublic class NodeFactory : INodeAlterationProvider, IChildNodeListProvider { ... }Di2015NewLine
230949Di2015UniqueSeparatorcontainer.Register(Component.For<INodeAlterationProvider>().ImplementedBy<NodeFactory>());Di2015NewLinecontainer.Register(Component.For<IChildNodeListProvider>().ImplementedBy<NodeFactory>());Di2015NewLine
230949Di2015UniqueSeparatorcontainer.Register(Component.For<INodeAlterationProvider>().Forward<IChildNodeListProvider>().ImplementedBy<NodeFactory>());Di2015NewLine
231019Di2015UniqueSeparatormyList = myList.ConvertAll(d => d.ToLower());Di2015NewLine
231019Di2015UniqueSeparatorForEach
231019Di2015UniqueSeparatorConvertAll
231073Di2015UniqueSeparator<?xml version='1.0' encoding='utf-8'?>Di2015NewLine  <configuration>Di2015NewLine    <connectionStrings>Di2015NewLine      <clear />Di2015NewLine      <add name="Name" Di2015NewLine       providerName="System.Data.ProviderName" Di2015NewLine       connectionString="Valid Connection String;" />Di2015NewLine    </connectionStrings>Di2015NewLine  </configuration>Di2015NewLine
231112Di2015UniqueSeparatordo...while
231112Di2015UniqueSeparatorushort i = 0;Di2015NewLinedoDi2015NewLine{Di2015NewLine    // do somethingDi2015NewLine} while(i++ < UInt16.MaxValue);Di2015NewLine
231179Di2015UniqueSeparator ;; if (i > -1) {Di2015NewLine cmp eax, -1Di2015NewLine jle elseDi2015NewLinethen:Di2015NewLine ...Di2015NewLineelse:Di2015NewLineDi2015NewLine ;; if (i >= 0) {Di2015NewLine cmp eax, 0Di2015NewLine jl elseDi2015NewLinethen:Di2015NewLine ...Di2015NewLineelse:Di2015NewLine
231179Di2015UniqueSeparator // if (i >= 0) {   (assuming i is in register %t0)Di2015NewLineDi2015NewLine stl $t1, $0, $t0     // in C: t1 = (0 < t0)Di2015NewLine beq $t1, $0, else    // jump if t1 == 0, that is if t0 >= 0Di2015NewLine nopDi2015NewLinethen:Di2015NewLine ...Di2015NewLineelse:Di2015NewLineDi2015NewLine// if (i > -1) {    (assuming i is in register %t0)Di2015NewLineDi2015NewLine addi $t2, $0, -1      // in C: t2 = -1Di2015NewLine stl $t1, $t2, $t0      // in C: t1 = (t2 < t0) = (-1 < t0)Di2015NewLine bne $t1, $0, else     // jump if t1 != 0, that is if t0 > -1Di2015NewLine nopDi2015NewLinethen:Di2015NewLine ...Di2015NewLineelse:Di2015NewLine
231399Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections;Di2015NewLineDi2015NewLinenamespace ConsoleApplication3Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            ArrayList numbers = new ArrayList();Di2015NewLine            foreach (int number in new int[] { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 })Di2015NewLine            {Di2015NewLine                numbers.Add(number);Di2015NewLine            }Di2015NewLine            numbers.Insert(numbers.Count - 1, 75);Di2015NewLine            numbers.Remove(7);Di2015NewLine            numbers.RemoveAt(6);Di2015NewLine            for (int i = 0; i < numbers.Count; i++)Di2015NewLine            {Di2015NewLine                int number = (int)numbers[i];Di2015NewLine                Console.WriteLine(number);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
231422Di2015UniqueSeparatorFK_childtablename_parenttablename
231422Di2015UniqueSeparatorpublic void FillDataSet(DataSet targetDs, Dictionary<string, Dictionary<string, KeyValuePair<string, string>> parameterMap);Di2015NewLine
231486Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Drawing;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinepublic class MyListView : ListView {Di2015NewLine  private Point mItemStartPos;Di2015NewLine  private Point mMouseStartPos;Di2015NewLineDi2015NewLine  public MyListView() {Di2015NewLine    this.AllowDrop = true;Di2015NewLine    this.View = View.LargeIcon;Di2015NewLine    this.AutoArrange = false;Di2015NewLine    this.DoubleBuffered = true;Di2015NewLine  }Di2015NewLineDi2015NewLine  protected override void OnDragEnter(DragEventArgs e) {Di2015NewLine    if (e.Data.GetData(typeof(ListViewItem)) != null) e.Effect = DragDropEffects.Move;Di2015NewLine  }Di2015NewLine  protected override void OnItemDrag(ItemDragEventArgs e) {Di2015NewLine    // Start draggingDi2015NewLine    ListViewItem item = e.Item as ListViewItem;Di2015NewLine    mItemStartPos = item.Position;Di2015NewLine    mMouseStartPos = Control.MousePosition;Di2015NewLine    this.DoDragDrop(item, DragDropEffects.Move);Di2015NewLine  }Di2015NewLine  protected override void OnDragOver(DragEventArgs e) {Di2015NewLine    // Move iconDi2015NewLine    ListViewItem item = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;Di2015NewLine    if (item != null) {Di2015NewLine      Point mousePos = Control.MousePosition;Di2015NewLine      item.Position = new Point(mItemStartPos.X + mousePos.X - mMouseStartPos.X,Di2015NewLine          mItemStartPos.Y + mousePos.Y - mMouseStartPos.Y);Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
231536Di2015UniqueSeparatorpublic event EventHandler SomethingHappened = delegate {};Di2015NewLine
231536Di2015UniqueSeparatorstatic public void RaiseEvent(this EventHandler @event, object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (@event != null)Di2015NewLine        @event(sender, e);Di2015NewLine}Di2015NewLineDi2015NewLinestatic public void RaiseEvent<T>(this EventHandler<T> @event, object sender, T e)Di2015NewLine    where T : EventArgsDi2015NewLine{Di2015NewLine    if (@event != null)Di2015NewLine        @event(sender, e);Di2015NewLine}Di2015NewLine
231945Di2015UniqueSeparatoryield break
231945Di2015UniqueSeparatorreturn
231945Di2015UniqueSeparatorfor (int i = 0; i < 5; i++) {Di2015NewLine    yield return i;Di2015NewLine}Di2015NewLineDi2015NewLineConsole.Out.WriteLine("You will see me");Di2015NewLine
231945Di2015UniqueSeparatoryield break
231945Di2015UniqueSeparatorint i = 0;Di2015NewLinewhile (true) {Di2015NewLine    if (i < 5) {Di2015NewLine        yield return i;Di2015NewLine    } else {Di2015NewLine        // note that i++ will not be executed after thisDi2015NewLine        yield break;Di2015NewLine    }Di2015NewLine    i++;Di2015NewLine}Di2015NewLineDi2015NewLineConsole.Out.WriteLine("Won't see me");Di2015NewLine
232073Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine  Application.Run(new Form1());   Di2015NewLine}Di2015NewLine
232350Di2015UniqueSeparatorcatch (UnauthorizedAccessException) {}Di2015NewLine
232444Di2015UniqueSeparator// assumes stringdata[row, col] is your 2D string arrayDi2015NewLineDataTable dt = new DataTable();Di2015NewLine// assumes first row contains column names:Di2015NewLinefor (int col = 0; col < stringdata.GetLength(1); col++)Di2015NewLine{Di2015NewLine    dt.Columns.Add(stringdata[0, col]);Di2015NewLine}Di2015NewLine// load data from string array to data table:Di2015NewLinefor (rowindex = 1; rowindex < stringdata.GetLength(0); rowindex++)Di2015NewLine{Di2015NewLine    DataRow row = dt.NewRow();Di2015NewLine    for (int col = 0; col < stringdata.GetLength(1); col++)Di2015NewLine    {Di2015NewLine        row[col] = stringdata[rowindex, col];Di2015NewLine    }Di2015NewLine    dt.Rows.Add(row);Di2015NewLine}Di2015NewLine// sort by third column:Di2015NewLineDataRow[] sortedrows = dt.Select("", "3");Di2015NewLine// sort by column name, descending:Di2015NewLinesortedrows = dt.Select("", "COLUMN3 DESC");Di2015NewLine
232446Di2015UniqueSeparator    var param = Expression.Parameter(typeof(T), "o");Di2015NewLine    var fixedItem = Expression.Constant(objectOfTypeT, typeof(T));Di2015NewLine    var body = Expression.Equal(Di2015NewLine        Expression.PropertyOrField(param, fieldName),Di2015NewLine        Expression.PropertyOrField(fixedItem, fieldName));Di2015NewLine    var lambda = Expression.Lambda<Func<T,bool>>(body,param);Di2015NewLine    return source.Where(lambda);Di2015NewLine
232446Di2015UniqueSeparatorobjectOfTypeT
232446Di2015UniqueSeparatorExpression.Constant
232588Di2015UniqueSeparator<input type="hidden" name="products.Index" value="0" />Di2015NewLine<input type="text" name="products[0].Name" value="Beer" />Di2015NewLine<input type="text" name="products[0].Price" value="7.32" />Di2015NewLineDi2015NewLine<input type="hidden" name="products.Index" value="1" />Di2015NewLine<input type="text" name="products[1].Name" value="Chips" />Di2015NewLine<input type="text" name="products[1].Price" value="2.23" />Di2015NewLineDi2015NewLine<input type="hidden" name="products.Index" value="2" />Di2015NewLine<input type="text" name="products[2].Name" value="Salsa" />Di2015NewLine<input type="text" name="products[2].Price" value="1.23" />Di2015NewLine
232616Di2015UniqueSeparatorforeach
232616Di2015UniqueSeparatorDispose
232616Di2015UniqueSeparatorforeach
232616Di2015UniqueSeparatorfinally
232616Di2015UniqueSeparatorIDisposable
232616Di2015UniqueSeparatorIEnumerator
232616Di2015UniqueSeparatorIDisposable
232616Di2015UniqueSeparatorIEnumerator
232616Di2015UniqueSeparatorforeach
232616Di2015UniqueSeparatorIEnumerator
232616Di2015UniqueSeparatorIDisposable
232616Di2015UniqueSeparatorIDisposable
232616Di2015UniqueSeparatorIEnumerator<T>
232616Di2015UniqueSeparatorDispose
232616Di2015UniqueSeparatorDispose
232616Di2015UniqueSeparatorDispose
232616Di2015UniqueSeparatorfinally
232616Di2015UniqueSeparatorDispose
232621Di2015UniqueSeparatorMethodInfo method = typeof(Sample).GetMethod("GenericMethod");Di2015NewLineMethodInfo generic = method.MakeGenericMethod(myType);Di2015NewLinegeneric.Invoke(this, null);Di2015NewLine
232621Di2015UniqueSeparatornull
232621Di2015UniqueSeparatorInvoke
232803Di2015UniqueSeparatorStringBuilder builder = new StringBuilder();Di2015NewLineforeach (CheckBox cb in checkboxes)Di2015NewLine{Di2015NewLine    if (cb.Checked)Di2015NewLine    {Di2015NewLine        builder.AppendLine(cb.Text); // Or whateverDi2015NewLineDi2015NewLine        // Alternatively:Di2015NewLine        // builder.Append(cb.Text);Di2015NewLine        // builder.Append(Environment.NewLine); // Or a different line endingDi2015NewLine    }Di2015NewLine}Di2015NewLine// Call Trim if you want to remove the trailing newlineDi2015NewLinestring result = builder.ToString();Di2015NewLine
232870Di2015UniqueSeparatorpublic static class StopwatchExtensionsDi2015NewLine{Di2015NewLine    public static long Time(this Stopwatch sw, Action action, int iterations)Di2015NewLine    {Di2015NewLine        sw.Reset();Di2015NewLine        sw.Start(); Di2015NewLine        for (int i = 0; i < iterations; i++)Di2015NewLine        {Di2015NewLine            action();Di2015NewLine        }Di2015NewLine        sw.Stop();Di2015NewLineDi2015NewLine        return sw.ElapsedMilliseconds;Di2015NewLine    }Di2015NewLine}Di2015NewLine
232870Di2015UniqueSeparatorvar s = new Stopwatch();Di2015NewLineConsole.WriteLine(s.Time(() => DoStuff(), 1000));Di2015NewLine
232972Di2015UniqueSeparatornamespace My.Namespace.ControlsDi2015NewLine{Di2015NewLine[ToolboxData("<{0}:MyDropDownList runat=\\"server\\"></{0}:MyDropDownList>")]Di2015NewLinepublic class MyDropDownList: DropDownListDi2015NewLine{Di2015NewLine    // your custom code goes hereDi2015NewLine    // e.g.Di2015NewLine    protected override void  RenderContents(HtmlTextWriter writer)Di2015NewLine    {Di2015NewLine        //Your own render codeDi2015NewLine    }Di2015NewLine}Di2015NewLine}Di2015NewLine
232972Di2015UniqueSeparator    <add tagPrefix="my" namespace="My.Namespace.Controls" assembly="MyLibrary" />Di2015NewLine
232972Di2015UniqueSeparator<my:MyDropDownList ID="myDDl" runat="server">Di2015NewLine    ...Di2015NewLine</my:MyDropDownList>Di2015NewLine
232995Di2015UniqueSeparatorManagementObject disk = new ManagementObject("win32_logicaldisk.deviceid=\\"c:\\""); Di2015NewLinedisk.Get(); Di2015NewLineConsole.WriteLine("Logical Disk Size = " + disk["Size"] + " bytes"); Di2015NewLineConsole.WriteLine("Logical Disk FreeSpace = " + disk["FreeSpace"] + "bytes");Di2015NewLine
233146Di2015UniqueSeparatorIEnumerable<T>
233146Di2015UniqueSeparatorAddRange
233146Di2015UniqueSeparatorList<T>.AddRange
233146Di2015UniqueSeparatorT
233146Di2015UniqueSeparatorIEnumerable<T>
233236Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLinepublic abstract class Base<T>Di2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Concrete : Base<string>Di2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Type type = typeof(Concrete);Di2015NewLine        Type baseType = type.BaseType;Di2015NewLine        Type typeOfT = baseType.GetGenericArguments()[0]; // Only one argDi2015NewLine        Console.WriteLine(typeOfT.Name); // Prints StringDi2015NewLine    }Di2015NewLine}Di2015NewLine
233303Di2015UniqueSeparatorpublic static T Method<T,U>() where T : ClassA<U> where U : TDi2015NewLine
233488Di2015UniqueSeparatorstring[,] rectArray = new string[3,3] { Di2015NewLine    {"a", "b", "c"}, Di2015NewLine    {"d", "e", "f"}, Di2015NewLine    {"g", "h", "i"} };Di2015NewLineDi2015NewLinevar rectResult = rectArray.Cast<object>().ToArray();Di2015NewLine
233488Di2015UniqueSeparatorstring[][] jaggedArray =  { Di2015NewLine    new string[] {"a", "b", "c", "d"}, Di2015NewLine    new string[] {"e", "f"}, Di2015NewLine    new string[] {"g", "h", "i"} };Di2015NewLineDi2015NewLinevar jaggedResult = jaggedArray.SelectMany(s => s).Cast<object>().ToArray();Di2015NewLine
233505Di2015UniqueSeparatorIEnumerable<T>
233505Di2015UniqueSeparatorExpression
233505Di2015UniqueSeparator    public static IOrderedQueryable<T> OrderBy<T>(this IQueryable<T> source, string property)Di2015NewLine    {Di2015NewLine        return ApplyOrder<T>(source, property, "OrderBy");Di2015NewLine    }Di2015NewLine    public static IOrderedQueryable<T> OrderByDescending<T>(this IQueryable<T> source, string property)Di2015NewLine    {Di2015NewLine        return ApplyOrder<T>(source, property, "OrderByDescending");Di2015NewLine    }Di2015NewLine    public static IOrderedQueryable<T> ThenBy<T>(this IOrderedQueryable<T> source, string property)Di2015NewLine    {Di2015NewLine        return ApplyOrder<T>(source, property, "ThenBy");Di2015NewLine    }Di2015NewLine    public static IOrderedQueryable<T> ThenByDescending<T>(this IOrderedQueryable<T> source, string property)Di2015NewLine    {Di2015NewLine        return ApplyOrder<T>(source, property, "ThenByDescending");Di2015NewLine    }Di2015NewLine    static IOrderedQueryable<T> ApplyOrder<T>(IQueryable<T> source, string property, string methodName) {Di2015NewLine        string[] props = property.Split('.');Di2015NewLine        Type type = typeof(T);Di2015NewLine        ParameterExpression arg = Expression.Parameter(type, "x");Di2015NewLine        Expression expr = arg;Di2015NewLine        foreach(string prop in props) {Di2015NewLine            // use reflection (not ComponentModel) to mirror LINQDi2015NewLine            PropertyInfo pi = type.GetProperty(prop);Di2015NewLine            expr = Expression.Property(expr, pi);Di2015NewLine            type = pi.PropertyType;Di2015NewLine        }Di2015NewLine        Type delegateType = typeof(Func<,>).MakeGenericType(typeof(T), type);Di2015NewLine        LambdaExpression lambda = Expression.Lambda(delegateType, expr, arg);Di2015NewLineDi2015NewLine        object result = typeof(Queryable).GetMethods().Single(Di2015NewLine                method => method.Name == methodNameDi2015NewLine                        && method.IsGenericMethodDefinitionDi2015NewLine                        && method.GetGenericArguments().Length == 2Di2015NewLine                        && method.GetParameters().Length == 2)Di2015NewLine                .MakeGenericMethod(typeof(T), type)Di2015NewLine                .Invoke(null, new object[] {source, lambda});Di2015NewLine        return (IOrderedQueryable<T>)result;Di2015NewLine   } Di2015NewLine
233505Di2015UniqueSeparatordynamic
233505Di2015UniqueSeparatordynamic
233505Di2015UniqueSeparatordynamic
233505Di2015UniqueSeparatorMemberExpression
233505Di2015UniqueSeparatorHashtable
233505Di2015UniqueSeparatorusing Microsoft.CSharp.RuntimeBinder;Di2015NewLineusing System;Di2015NewLineusing System.Collections;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Dynamic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Runtime.CompilerServices;Di2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    private static class AccessorCacheDi2015NewLine    {Di2015NewLine        private static readonly Hashtable accessors = new Hashtable();Di2015NewLineDi2015NewLine        private static readonly Hashtable callSites = new Hashtable();Di2015NewLineDi2015NewLine        private static CallSite<Func<CallSite, object, object>> GetCallSiteLocked(string name) {Di2015NewLine            var callSite = (CallSite<Func<CallSite, object, object>>)callSites[name];Di2015NewLine            if(callSite == null)Di2015NewLine            {Di2015NewLine                callSites[name] = callSite = CallSite<Func<CallSite, object, object>>.Create(Di2015NewLine                            Binder.GetMember(CSharpBinderFlags.None, name, typeof(AccessorCache),Di2015NewLine                            new CSharpArgumentInfo[] { CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null) }));Di2015NewLine            }Di2015NewLine            return callSite;Di2015NewLine        }Di2015NewLineDi2015NewLine        internal static Func<dynamic,object> GetAccessor(string name)Di2015NewLine        {Di2015NewLine            Func<dynamic, object> accessor = (Func<dynamic, object>)accessors[name];Di2015NewLine            if (accessor == null)Di2015NewLine            {Di2015NewLine                lock (accessors )Di2015NewLine                {Di2015NewLine                    accessor = (Func<dynamic, object>)accessors[name];Di2015NewLine                    if (accessor == null)Di2015NewLine                    {Di2015NewLine                        if(name.IndexOf('.') >= 0) {Di2015NewLine                            string[] props = name.Split('.');Di2015NewLine                            CallSite<Func<CallSite, object, object>>[] arr = Array.ConvertAll(props, GetCallSiteLocked);Di2015NewLine                            accessor = target =>Di2015NewLine                            {Di2015NewLine                                object val = (object)target;Di2015NewLine                                for (int i = 0; i < arr.Length; i++)Di2015NewLine                                {Di2015NewLine                                    var cs = arr[i];Di2015NewLine                                    val = cs.Target(cs, val);Di2015NewLine                                }Di2015NewLine                                return val;Di2015NewLine                            };Di2015NewLine                        } else {Di2015NewLine                            var callSite = GetCallSiteLocked(name);Di2015NewLine                            accessor = target =>Di2015NewLine                            {Di2015NewLine                                return callSite.Target(callSite, (object)target);Di2015NewLine                            };Di2015NewLine                        }Di2015NewLine                        accessors[name] = accessor;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine            return accessor;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public static IOrderedEnumerable<dynamic> OrderBy(this IEnumerable<dynamic> source, string property)Di2015NewLine    {Di2015NewLine        return Enumerable.OrderBy<dynamic, object>(source, AccessorCache.GetAccessor(property), Comparer<object>.Default);Di2015NewLine    }Di2015NewLine    public static IOrderedEnumerable<dynamic> OrderByDescending(this IEnumerable<dynamic> source, string property)Di2015NewLine    {Di2015NewLine        return Enumerable.OrderByDescending<dynamic, object>(source, AccessorCache.GetAccessor(property), Comparer<object>.Default);Di2015NewLine    }Di2015NewLine    public static IOrderedEnumerable<dynamic> ThenBy(this IOrderedEnumerable<dynamic> source, string property)Di2015NewLine    {Di2015NewLine        return Enumerable.ThenBy<dynamic, object>(source, AccessorCache.GetAccessor(property), Comparer<object>.Default);Di2015NewLine    }Di2015NewLine    public static IOrderedEnumerable<dynamic> ThenByDescending(this IOrderedEnumerable<dynamic> source, string property)Di2015NewLine    {Di2015NewLine        return Enumerable.ThenByDescending<dynamic, object>(source, AccessorCache.GetAccessor(property), Comparer<object>.Default);Di2015NewLine    }Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        dynamic a = new ExpandoObject(), b = new ExpandoObject(), c = new ExpandoObject();Di2015NewLine        a.X = "abc";Di2015NewLine        b.X = "ghi";Di2015NewLine        c.X = "def";Di2015NewLine        dynamic[] data = new[] { new { Y = a },new { Y = b }, new { Y = c } };Di2015NewLineDi2015NewLine        var ordered = data.OrderByDescending("Y.X").ToArray();Di2015NewLine        foreach (var obj in ordered)Di2015NewLine        {Di2015NewLine            Console.WriteLine(obj.Y.X);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
233826Di2015UniqueSeparatorDISPLAY_DEVICE_ATTACHED_TO_DESKTOP
233943Di2015UniqueSeparatorvar employer = (from person in db.PeopleDi2015NewLine                where person.PersonID == idPersonDi2015NewLine                select person.Employer).FirstOrDefault();Di2015NewLine
234016Di2015UniqueSeparatorpublic Dictionary<Type, object> GenerateLists(List<Type> types)Di2015NewLine{Di2015NewLine    Dictionary<Type, object> lists = new Dictionary<Type, object>();Di2015NewLineDi2015NewLine    foreach (Type type in types)Di2015NewLine    {Di2015NewLine        Type genericList = typeof(List<>).MakeGenericType(type);Di2015NewLine        lists.Add(type, Activator.CreateInstance(genericList));Di2015NewLine    }Di2015NewLineDi2015NewLine    return lists;Di2015NewLine}Di2015NewLine
234266Di2015UniqueSeparator Action action = () => { if (m_Count < 10) m_Count++; value = m_Count; };Di2015NewLine
234266Di2015UniqueSeparatortype name = statement;
234423Di2015UniqueSeparatorusing (var cv = new OpenCVDotNet.CVCapture(0))Di2015NewLine{Di2015NewLine    var image = cv.CreateCompatibleImage();Di2015NewLine    // ...Di2015NewLine    cv.Release();Di2015NewLine}Di2015NewLine
234543Di2015UniqueSeparatorprivate static void configStep_addShortcutToStartupGroup()Di2015NewLine{Di2015NewLineusing (ShellLink shortcut = new ShellLink())Di2015NewLine{Di2015NewLine    shortcut.Target = Application.ExecutablePath;Di2015NewLine    shortcut.WorkingDirectory = Path.GetDirectoryName(Application.ExecutablePath);Di2015NewLine    shortcut.Description = "My Shorcut Name Here";Di2015NewLine    shortcut.DisplayMode = ShellLink.LinkDisplayMode.edmNormal;Di2015NewLine    shortcut.Save(STARTUP_SHORTCUT_FILEPATH);Di2015NewLine}Di2015NewLine}Di2015NewLine
235085Di2015UniqueSeparatorDirectoryEntry
235085Di2015UniqueSeparatorManagementObject
235142Di2015UniqueSeparator    public class SessionVarDi2015NewLine    {Di2015NewLine    static HttpSessionState SessionDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            if (HttpContext.Current == null)Di2015NewLine                throw new ApplicationException("No Http Context, No Session to Get!");Di2015NewLineDi2015NewLine            return HttpContext.Current.Session;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static T Get<T>(string key)Di2015NewLine    {Di2015NewLine        if (Session[key] == null)Di2015NewLine            return default(T);Di2015NewLine        elseDi2015NewLine            return (T)Session[key];Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void Set<T>(string key, T value)Di2015NewLine    {Di2015NewLine        Session[key] = value;Di2015NewLine    }Di2015NewLine    }Di2015NewLine
235142Di2015UniqueSeparatorpublic static string GetString(string key)Di2015NewLine    {Di2015NewLine        string s = Get<string>(key);Di2015NewLine        return s == null ? string.Empty : s;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void SetString(string key, string value)Di2015NewLine    {Di2015NewLine        Set<string>(key, value);Di2015NewLine    }Di2015NewLine
235142Di2015UniqueSeparatorpublic class CustomerInfoDi2015NewLine{Di2015NewLine    public string NameDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return SessionVar.GetString("CustomerInfo_Name");Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            SessionVar.SetString("CustomerInfo_Name", value);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
235274Di2015UniqueSeparatorstring configPath = "~/web.config";Di2015NewLineConfiguration config = WebConfigurationManager.OpenWebConfiguration(configPath);Di2015NewLineMembershipSection section = (MembershipSection)config.GetSection("system.web/membership");Di2015NewLineProviderSettingsCollection settings = section.Providers;Di2015NewLineNameValueCollection membershipParams = settings[section.DefaultProvider].Parameters;Di2015NewLineInitialize(section.DefaultProvider, membershipParams);Di2015NewLine
235301Di2015UniqueSeparatorBLLCustomer cust = ((BLLCustomer)new BLLCustomer()).FillByID(34);Di2015NewLine
235459Di2015UniqueSeparatori
235703Di2015UniqueSeparatorusing System.Reflection;Di2015NewLineusing System.Messaging;Di2015NewLine...Di2015NewLine        Type t = typeof(MessageQueueException);Di2015NewLine        ConstructorInfo ci = t.GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance, Di2015NewLine          null, new Type[] { typeof(int) }, null);Di2015NewLine        MessageQueueException ex = (MessageQueueException)ci.Invoke(new object[] { 911 });Di2015NewLine        throw ex;Di2015NewLine
235994Di2015UniqueSeparatorDictionary<string,object>
235994Di2015UniqueSeparator    static int counter = 0;Di2015NewLine    private static void RemoveNotPermittedItems(Dictionary<string, object> menu)Di2015NewLine    {Di2015NewLine        for (int c = menu.Count - 1; c >= 0; c--)Di2015NewLine        {Di2015NewLine            var key = menu.Keys.ElementAt(c);Di2015NewLine            var value = menu[key];Di2015NewLine            if (value is Dictionary<string, object>)Di2015NewLine            {Di2015NewLine                RemoveNotPermittedItems((Dictionary<string, object>)value);Di2015NewLine                if (((Dictionary<string, object>)value).Count == 0)Di2015NewLine                {Di2015NewLine                    menu.Remove(key);Di2015NewLine                }Di2015NewLine            }Di2015NewLine            else if (!GetIsPermitted(value))Di2015NewLine            {Di2015NewLine                menu.Remove(key);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    // This just added to actually cause some elements to be removed...Di2015NewLine    private static bool GetIsPermitted(object value)Di2015NewLine    {Di2015NewLine        if (counter++ % 2 == 0)Di2015NewLine            return false;Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine
236539Di2015UniqueSeparatorpublic T this[string key] {Di2015NewLine    get { return m_Dictionary[key]; }Di2015NewLine    set { m_Dictionary[key] = value; }Di2015NewLine}Di2015NewLine
236539Di2015UniqueSeparatorString
236539Di2015UniqueSeparator""
236539Di2015UniqueSeparatorTryGetValue
236539Di2015UniqueSeparatorPublic Shared Property DictionaryElement(ByVal Key As String) As ObjectDi2015NewLine    GetDi2015NewLine        Dim ret As StringDi2015NewLine        If m_Dictionary.TryGetValue(Key, ret) Then Return retDi2015NewLine        Return "" ' Same as String.Empty! 'Di2015NewLine    End GetDi2015NewLine    Set(ByVal value As Object)Di2015NewLine        m_Dictionary(Key) = valueDi2015NewLine    End SetDi2015NewLineEnd PropertyDi2015NewLine
236577Di2015UniqueSeparator//This assumes the datatables have the same schema...Di2015NewLine        public bool DatatablesAreSame(DataTable t1, DataTable t2) {         Di2015NewLine            if (t1.Rows.Count != t2.Rows.Count)Di2015NewLine                return false;Di2015NewLineDi2015NewLine            foreach (DataColumn dc in t1.Columns) {Di2015NewLine                for (int i = 0; i < t1.Rows.Count; i++) {Di2015NewLine                    if (t1.Rows[i][dc.ColumnName] != t2.Rows[i][dc.ColumnName]) {Di2015NewLine                        return false;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine            return true;Di2015NewLine        }Di2015NewLine
236602Di2015UniqueSeparatorMyComplexObject dto = new MyComplexObject();Di2015NewLineMemoryStream mem = new MemoryStream();Di2015NewLineBinaryFormatter b = new BinaryFormatter();Di2015NewLinetryDi2015NewLine{Di2015NewLine    b.Serialize(mem, dto);Di2015NewLine}Di2015NewLinecatch (Exception ex)Di2015NewLine{Di2015NewLine    Assert.Fail(ex.Message);Di2015NewLine}Di2015NewLine
236822Di2015UniqueSeparator <connectionStrings>Di2015NewLine  <add name="YourApp.Properties.Settings.DatabaseConnectionString"Di2015NewLine  connectionString="Data Source=localhost;Initial Catalog=xxx;Integrated Security=True;"Di2015NewLine  providerName="System.Data.SqlClient" />Di2015NewLine </connectionStrings>Di2015NewLine
236998Di2015UniqueSeparatorvar
236998Di2015UniqueSeparatorvar d = new Dictionary<string, Dictionary<string, Queue<SomeClass>>>();Di2015NewLine
236998Di2015UniqueSeparatorList<string>
236998Di2015UniqueSeparatorList<string> list = MyMethod();Di2015NewLine
236998Di2015UniqueSeparatorvar
236998Di2015UniqueSeparatorIEnumerable<string> list = MyMethod();Di2015NewLine
236998Di2015UniqueSeparatorvar
236998Di2015UniqueSeparatorvar
236998Di2015UniqueSeparatorvar rows = from DataRow r in parentRow.GetChildRows(myRelation)Di2015NewLine           where r.Field<bool>("Flag")Di2015NewLine           orderby r.Field<int>("SortKey")Di2015NewLine           select r;Di2015NewLine
236998Di2015UniqueSeparatorrows
236998Di2015UniqueSeparatorIEnumerable<DataRow>
236998Di2015UniqueSeparatorIEnumerable<T>
236998Di2015UniqueSeparatorforeach (DataRow r in rows)Di2015NewLine
236998Di2015UniqueSeparatorrows
236998Di2015UniqueSeparatorIEnumerable<DataRow>
236998Di2015UniqueSeparatorrows
237130Di2015UniqueSeparatorAction[] work=new Action[]{new Action(DoThis),   new Action(NowDoThat),    Di2015NewLine    new Action(NowDoThis),    new Action(MoreWork),    new Action(AndImSpent)};Di2015NewLineint current =0;Di2015NewLinewhile(current!=work.Length)Di2015NewLine{Di2015NewLine   tryDi2015NewLine   {Di2015NewLine      work[current]();Di2015NewLine      current++;Di2015NewLine   }Di2015NewLine   catch(Exception ex)Di2015NewLine   {Di2015NewLine      // log the error or whateverDi2015NewLine      // maybe sleep a while to not kill the processors if a successful execution depends on time elapsed  Di2015NewLine   }Di2015NewLine}Di2015NewLine
237224Di2015UniqueSeparatorvar x = from c in dt.Columns.Cast<DataColumn>()Di2015NewLine        select c.ColumnName;Di2015NewLine
237278Di2015UniqueSeparatorforeach (Object obj in list) {Di2015NewLine    Type type = obj.GetType();Di2015NewLineDi2015NewLine    foreach (var f in type.GetFields().Where(f => f.IsPublic)) {Di2015NewLine        Console.WriteLine(Di2015NewLine            String.Format("Name: {0} Value: {1}", f.Name, f.GetValue(obj));Di2015NewLine    }   \\\\\\Di2015NewLine}Di2015NewLine
237685Di2015UniqueSeparatorpublic static IEnumerable<int> IndexesWhere<T>(this IEnumerable<T> source, Func<T, bool> predicate)Di2015NewLine{Di2015NewLine    int index=0;Di2015NewLine    foreach (T element in source)Di2015NewLine    {Di2015NewLine        if (predicate(element))Di2015NewLine        {Di2015NewLine            yield return index;Di2015NewLine        }Di2015NewLine        index++;Di2015NewLine    }Di2015NewLine}Di2015NewLine
237685Di2015UniqueSeparatorstring[] s = {"zero", "one", "two", "three", "four", "five"};Di2015NewLinevar x = s.IndexesWhere(t => t.StartsWith("t"));Di2015NewLine
238020Di2015UniqueSeparatormyString = myString.Replace(System.Environment.NewLine, "replacement text")Di2015NewLine
238129Di2015UniqueSeparatorpublic List<IGrouping<DateTime, Game>> getGamesList(int leagueID)Di2015NewLine{Di2015NewLine    var sortedGameList =Di2015NewLine        from g in GamesDi2015NewLine        group g by g.Date;Di2015NewLineDi2015NewLine    return sortedGameList.ToList();Di2015NewLine}Di2015NewLine
238282Di2015UniqueSeparator<TreeViewItem Header="{Binding Path=Attribute[Title].Value}"/>Di2015NewLine
238357Di2015UniqueSeparatorApplication.ThreadException += new Threading.ThreadExceptionHandler(CatchFormsExceptions);Di2015NewLine
238463Di2015UniqueSeparator//pageNum is zero-based.Di2015NewLineList<string> GetPage(List<string> docList, List<int> pageBreaks, int pageNum)Di2015NewLine{Di2015NewLineDi2015NewLine  // 0 page caseDi2015NewLine  if (pageBreaks.Count != 0)Di2015NewLine  {Di2015NewLine    return docList;Di2015NewLine  }Di2015NewLineDi2015NewLine  int lastPage = pageBreaks.Count;Di2015NewLineDi2015NewLine  //requestedPage is after the lastPage caseDi2015NewLine  if (requestedPage > lastPage)Di2015NewLine  {Di2015NewLine    requestedPage = lastPage;Di2015NewLine  }Di2015NewLineDi2015NewLineDi2015NewLine  int firstLine = requestedPage == 0 ? 0  :Di2015NewLine      pageBreaks[requestedPage-1];Di2015NewLine  int lastLine = requestedPage == lastPage ? docList.Count :Di2015NewLine      pageBreaks[requestedPage];Di2015NewLineDi2015NewLine  //lastLine is excluded.  6 - 3 = 3 - 3, 4, 5Di2015NewLineDi2015NewLine  int howManyLines = lastLine - firstLine;Di2015NewLineDi2015NewLine  return docList.GetRange(firstLine, howManyLines);Di2015NewLine}Di2015NewLine
238463Di2015UniqueSeparatorIEnumerable<Page> pages =Di2015NewLine  Enumerable.Repeat(0, 1)Di2015NewLine  .Concat(pageBreaks)Di2015NewLine  .SelectDi2015NewLine  (Di2015NewLine    (p, i) => new Page()Di2015NewLine    {Di2015NewLine      PageNumber = i,Di2015NewLine      Lines = Di2015NewLine        docList.GetRange(p, ((i != pageBreaks.Count) ? pageBreaks[i] : docList.Count)  - p)Di2015NewLine    }Di2015NewLine  );Di2015NewLine
238640Di2015UniqueSeparatorHttpListener
238640Di2015UniqueSeparatorhttpcfg
238640Di2015UniqueSeparatornetsh
238669Di2015UniqueSeparatoruint z;Di2015NewLine
238669Di2015UniqueSeparatorint.MaxValue
238669Di2015UniqueSeparatorint.MinValue
238669Di2015UniqueSeparatorclass TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        checkedDi2015NewLine        {Di2015NewLine            uint a = 5;Di2015NewLine            uint b = 6;Di2015NewLine            uint c = a - b;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
238669Di2015UniqueSeparatorOverflowException
238669Di2015UniqueSeparator/checked+
238669Di2015UniqueSeparatorcsc
238669Di2015UniqueSeparatorc
238798Di2015UniqueSeparatorExpression
238798Di2015UniqueSeparatorMemberExpression
238798Di2015UniqueSeparatorMemberExpression
238798Di2015UniqueSeparatorPropertyInfo
238798Di2015UniqueSeparatorFieldInfo
238798Di2015UniqueSeparator.Expression
238798Di2015UniqueSeparator.Member
238798Di2015UniqueSeparatorFieldInfo
238798Di2015UniqueSeparator.GetValue(obj)
238798Di2015UniqueSeparatorFieldInfo
238798Di2015UniqueSeparatorPropertyInfo
238798Di2015UniqueSeparator.Expression
238798Di2015UniqueSeparatorConstantExpression
238798Di2015UniqueSeparatorParameterExpression
238798Di2015UniqueSeparatorExpression
238798Di2015UniqueSeparator.Compile()
238798Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Linq.Expressions;Di2015NewLineusing System.Reflection;Di2015NewLineclass FooDi2015NewLine{Di2015NewLine    public string Bar { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Foo foo = new Foo {Bar = "abc"};Di2015NewLine        Expression<Func<string>> func = () => foo.Bar;Di2015NewLineDi2015NewLine        MemberExpression outerMember = (MemberExpression)func.Body;Di2015NewLine        PropertyInfo outerProp = (PropertyInfo) outerMember.Member;Di2015NewLine        MemberExpression innerMember = (MemberExpression)outerMember.Expression;Di2015NewLine        FieldInfo innerField = (FieldInfo)innerMember.Member;Di2015NewLine        ConstantExpression ce = (ConstantExpression) innerMember.Expression;Di2015NewLine        object innerObj = ce.Value;Di2015NewLine        object outerObj = innerField.GetValue(innerObj);Di2015NewLine        string value = (string) outerProp.GetValue(outerObj, null);    Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
239316Di2015UniqueSeparatorList<T>
239316Di2015UniqueSeparatorLinkedList<T>
239316Di2015UniqueSeparatorLinkedListNode<T>
239359Di2015UniqueSeparatorpublic class Class1Di2015NewLine{Di2015NewLine    public string Selection { get; set; }Di2015NewLineDi2015NewLine    public void Sample()Di2015NewLine    {Di2015NewLine        Selection = "Example";Di2015NewLine        Example<Book, bool>(p => p.Title == Selection);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Example<T,TResult>(Expression<Func<T,TResult>> exp)Di2015NewLine    {Di2015NewLine        BinaryExpression equality = (BinaryExpression)exp.Body;Di2015NewLine        Debug.Assert(equality.NodeType == ExpressionType.Equal);Di2015NewLineDi2015NewLine        // Note that you need to know the type of the rhs of the equalityDi2015NewLine        var accessorExpression = Expression.Lambda<Func<string>>(equality.Right);Di2015NewLine        Func<string> accessor = accessorExpression.Compile();Di2015NewLine        var value = accessor();Di2015NewLine        Debug.Assert(value == Selection);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class BookDi2015NewLine{Di2015NewLine    public string Title { get; set; }Di2015NewLine}Di2015NewLine
239409Di2015UniqueSeparatorDataSet myDataSet = new DataSet();Di2015NewLineDi2015NewLinemyDataSet.ReadXml("myXmlFile.xml");Di2015NewLine
239423Di2015UniqueSeparator#if
239423Di2015UniqueSeparatorDEBUG
239423Di2015UniqueSeparatorRELEASE
239423Di2015UniqueSeparatorNotImplementedException
239423Di2015UniqueSeparator[Test]Di2015NewLinepublic void TestFoo() {Di2015NewLine  ActualTest<Foo>();Di2015NewLine}Di2015NewLine[Test]Di2015NewLinepublic void TestBar() {Di2015NewLine  ActualTest<Bar>();Di2015NewLine}Di2015NewLineDi2015NewLinestatic void ActualTest<T>() where T : SomeBaseClass, new() {Di2015NewLine  T obj = new T();Di2015NewLine  Assert.blah something involving objDi2015NewLine}Di2015NewLine
239877Di2015UniqueSeparatorpublic List<int> Factor(int number) {Di2015NewLine    List<int> factors = new List<int>();Di2015NewLine    int max = (int)Math.Sqrt(number);  //round downDi2015NewLine    for(int factor = 1; factor <= max; ++factor) { //test from 1 to the square root, or the int below it, inclusive.Di2015NewLine        if(number % factor == 0) {Di2015NewLine            factors.add(factor);Di2015NewLine            if(factor != number/factor) { // Don't add the square root twice!  Thanks JonDi2015NewLine                factors.add(number/factor);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return factors;Di2015NewLine}Di2015NewLine
239877Di2015UniqueSeparatorIEnumerable<int>
239877Di2015UniqueSeparatorList<int>
239963Di2015UniqueSeparatorbool hasCity = OrderXml.Elements("City").Any();Di2015NewLine
240042Di2015UniqueSeparatorList< List<Placement>> ListofListOfPlacements = new List< List<Placement>> ();Di2015NewLineDi2015NewLineList<Placement> dashboard1 = new List<Placement>();Di2015NewLineList<Placement> dashboard2 = new List<Placement>();Di2015NewLineList<Placement> dashboard3 = new List<Placement>();Di2015NewLineList<Placement> dashboard4 = new List<Placement>();Di2015NewLineDi2015NewLineListofListOfPlacements.Add(dashboard1);Di2015NewLineListofListOfPlacements.Add(dashboard2);Di2015NewLineListofListOfPlacements.Add(dashboard3);Di2015NewLineListofListOfPlacements.Add(dashboard4);Di2015NewLine
240191Di2015UniqueSeparatorSystem.Diagnostics.Process.Start()
240211Di2015UniqueSeparatorRegexOptions.IgnorePatternWhitespace
240211Di2015UniqueSeparatorif (!IsMatch(tagname,@"<font(\\s*size=""\\d{1}"")?Di2015NewLine    (\\s*color=""((\\#[0-9a-f]{6})|(\\#[0-9a-f]{3})|red|green|blue|black|white)"")?Di2015NewLine    (\\s*face=""(Arial|Courier New|Garamond|Georgia|Tahoma|Verdana)"")?Di2015NewLine    \\s?>"))Di2015NewLine{Di2015NewLine    html = html.Remove(tag.Index, tag.Length);Di2015NewLine}Di2015NewLine
240560Di2015UniqueSeparatorpublic DateTime WeekNum(DateTime now)Di2015NewLine{Di2015NewLine\DateTime NewNow = now.AddHours(-11).AddDays(6);Di2015NewLineDi2015NewLine\return (NewNow.AddDays(- (int) NewNow.DayOfWeek).Date);Di2015NewLine}Di2015NewLineDi2015NewLinepublic void Code(params string[] args)Di2015NewLine{Di2015NewLineDi2015NewLine\Console.WriteLine(WeekNum(DateTime.Now));\Di2015NewLine\Console.WriteLine(WeekNum(new DateTime(2008,10,27, 10, 00, 00)));Di2015NewLine\Console.WriteLine(WeekNum(new DateTime(2008,10,27, 12, 00, 00)));Di2015NewLine\Console.WriteLine(WeekNum(new DateTime(2008,10,28)));Di2015NewLine\Console.WriteLine(WeekNum(new DateTime(2008,10,25)));Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLine
240827Di2015UniqueSeparatorxlApp.ScreenUpdating = False
240827Di2015UniqueSeparatorxlApp.ScreenUpdating = False
240827Di2015UniqueSeparatorxlApp.ScreenUpdating = True
240827Di2015UniqueSeparatorGetObject()
240827Di2015UniqueSeparatorxlApp.ScreenUpdating = True
240827Di2015UniqueSeparatorxlApp.ScreenUpdating = False
241163Di2015UniqueSeparatorBoolean isRunningOnBattery =Di2015NewLine      (System.Windows.Forms.SystemInformation.PowerStatus.PowerLineStatus == Di2015NewLine       PowerLineStatus.Offline);Di2015NewLine
241194Di2015UniqueSeparatorprivate int myVar;Di2015NewLinepublic int MyVarDi2015NewLine{Di2015NewLine    get { return MyVar; }Di2015NewLine}Di2015NewLine
241267Di2015UniqueSeparatorCOD
241267Di2015UniqueSeparatorBuyerPaymentMethodCodeType
241267Di2015UniqueSeparator\XmlDocument wsdlDoc = new XmlDocument();Di2015NewLine\wsdlDoc.Load(@"D:\\temp\\eBaySvc.wsdl");Di2015NewLineDi2015NewLine\XmlNamespaceManager nsMgr = new XmlNamespaceManager(wsdlDoc.NameTable);Di2015NewLine\nsMgr.AddNamespace("xs", "http://www.w3.org/2001/XMLSchema");Di2015NewLineDi2015NewLine\XmlNode node = wsdlDoc.SelectSingleNode("//xs:simpleType[@name='BuyerPaymentMethodCodeType']/xs:restriction/xs:enumeration[@value='COD']/xs:annotation/xs:documentation", nsMgr);Di2015NewLine\string description = node.InnerText;Di2015NewLine
241291Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Text;Di2015NewLineusing System.Xml;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        string xml = @"Di2015NewLine<root>Di2015NewLine  <foo />Di2015NewLine  <foo>Di2015NewLine     <bar attr='value'/>Di2015NewLine     <bar other='va' />Di2015NewLine  </foo>Di2015NewLine  <foo><bar /></foo>Di2015NewLine</root>";Di2015NewLine        XmlDocument doc = new XmlDocument();Di2015NewLine        doc.LoadXml(xml);Di2015NewLine        XmlNode node = doc.SelectSingleNode("//@attr");Di2015NewLine        Console.WriteLine(FindXPath(node));Di2015NewLine        Console.WriteLine(doc.SelectSingleNode(FindXPath(node)) == node);Di2015NewLine    }Di2015NewLineDi2015NewLine    static string FindXPath(XmlNode node)Di2015NewLine    {Di2015NewLine        StringBuilder builder = new StringBuilder();Di2015NewLine        while (node != null)Di2015NewLine        {Di2015NewLine            switch (node.NodeType)Di2015NewLine            {Di2015NewLine                case XmlNodeType.Attribute:Di2015NewLine                    builder.Insert(0, "/@" + node.Name);Di2015NewLine                    node = ((XmlAttribute) node).OwnerElement;Di2015NewLine                    break;Di2015NewLine                case XmlNodeType.Element:Di2015NewLine                    int index = FindElementIndex((XmlElement) node);Di2015NewLine                    builder.Insert(0, "/" + node.Name + "[" + index + "]");Di2015NewLine                    node = node.ParentNode;Di2015NewLine                    break;Di2015NewLine                case XmlNodeType.Document:Di2015NewLine                    return builder.ToString();Di2015NewLine                default:Di2015NewLine                    throw new ArgumentException("Only elements and attributes are supported");Di2015NewLine            }Di2015NewLine        }Di2015NewLine        throw new ArgumentException("Node was not in a document");Di2015NewLine    }Di2015NewLineDi2015NewLine    static int FindElementIndex(XmlElement element)Di2015NewLine    {Di2015NewLine        XmlNode parentNode = element.ParentNode;Di2015NewLine        if (parentNode is XmlDocument)Di2015NewLine        {Di2015NewLine            return 1;Di2015NewLine        }Di2015NewLine        XmlElement parent = (XmlElement) parentNode;Di2015NewLine        int index = 1;Di2015NewLine        foreach (XmlNode candidate in parent.ChildNodes)Di2015NewLine        {Di2015NewLine            if (candidate is XmlElement && candidate.Name == element.Name)Di2015NewLine            {Di2015NewLine                if (candidate == element)Di2015NewLine                {Di2015NewLine                    return index;Di2015NewLine                }Di2015NewLine                index++;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        throw new ArgumentException("Couldn't find element within parent");Di2015NewLine    }Di2015NewLine}Di2015NewLine
241372Di2015UniqueSeparatornew MyClass();
241465Di2015UniqueSeparatorCanvas
241465Di2015UniqueSeparatorCanvas
241563Di2015UniqueSeparatorSystem.Linq.Enumerable
241563Di2015UniqueSeparatorJoin
241563Di2015UniqueSeparatorGroupJoin
241563Di2015UniqueSeparatorPositionalJoin
241563Di2015UniqueSeparatorsequenceA.PositionalJoin(sequenceB, (a, b) => new { a, b });Di2015NewLine
241563Di2015UniqueSeparatorpublic static IEnumerable<TResult> PositionalJoin<T1, T2, TResult>(Di2015NewLine    this IEnumerable<T1> source1, Di2015NewLine    IEnumerable<T2> source2, Di2015NewLine    Func<T1, T2, int, TResult> selector)Di2015NewLine{Di2015NewLine    // argument checking hereDi2015NewLine    return PositionalJoinIterator(source1, source2, selector);Di2015NewLine}Di2015NewLineDi2015NewLineprivate static IEnumerable<TResult> PositionalJoinIterator<T1, T2, TResult>(Di2015NewLine    IEnumerable<T1> source1, Di2015NewLine    IEnumerable<T2> source2, Di2015NewLine    Func<T1, T2, TResult> selector)Di2015NewLine{Di2015NewLine    using (var enumerator1 = source1.GetEnumerator())Di2015NewLine    using (var enumerator2 = source2.GetEnumerator())Di2015NewLine    {Di2015NewLine        bool gotItem;Di2015NewLine        doDi2015NewLine        {Di2015NewLine            gotItem = false;Di2015NewLineDi2015NewLine            T1 item1;Di2015NewLine            if (enumerator1.MoveNext())Di2015NewLine            {Di2015NewLine                item1 = enumerator1.Current;Di2015NewLine                gotItem = true;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                item1 = default(T1);Di2015NewLine            }Di2015NewLineDi2015NewLine            T2 item2;Di2015NewLine            if (enumerator2.MoveNext())Di2015NewLine            {Di2015NewLine                item2 = enumerator2.Current;Di2015NewLine                gotItem = true;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                item2 = default(T2);Di2015NewLine            }Di2015NewLineDi2015NewLine            if (gotItem)Di2015NewLine            {Di2015NewLine                yield return selector(item1, item2);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        while (gotItem);Di2015NewLine    }Di2015NewLine}Di2015NewLine
241885Di2015UniqueSeparatorDateTime dt1 = DateTime.ParseExact("24-okt-08 21:09:06 CEST".Replace("CEST", "+2"), "dd-MMM-yy HH:mm:ss z", culture);Di2015NewLineDateTime dt2 = DateTime.ParseExact("24-okt-08 21:09:06 CEST".Replace("CEST", "+02"), "dd-MMM-yy HH:mm:ss zz", culture);Di2015NewLineDateTime dt3 = DateTime.ParseExact("24-okt-08 21:09:06 CEST".Replace("CEST", "+02:00"), "dd-MMM-yy HH:mm:ss zzz", culture);Di2015NewLine
241942Di2015UniqueSeparatorpublic class AgeWrapperConverter : ExpandableObjectConverterDi2015NewLine{Di2015NewLine  public override bool CanConvertTo(ITypeDescriptorContext context, Di2015NewLine                                    Type destinationType)Di2015NewLine  {Di2015NewLine    // Can always convert to a string representationDi2015NewLine    if (destinationType == typeof(string))Di2015NewLine      return true;Di2015NewLineDi2015NewLine    // Let base class do standard processingDi2015NewLine    return base.CanConvertTo(context, destinationType);Di2015NewLine  }Di2015NewLineDi2015NewLine  public override object ConvertTo(ITypeDescriptorContext context, Di2015NewLine                                   System.Globalization.CultureInfo culture, Di2015NewLine                                   object value, Di2015NewLine                                   Type destinationType)Di2015NewLine  {Di2015NewLine    // Can always convert to a string representationDi2015NewLine    if (destinationType == typeof(string))Di2015NewLine    {Di2015NewLine      AgeWrapper wrapper = (AgeWrapper)value;Di2015NewLine      return "Age is " + wrapper.Age.ToString();Di2015NewLine    }Di2015NewLineDi2015NewLine    // Let base class attempt other conversionsDi2015NewLine    return base.ConvertTo(context, culture, value, destinationType);Di2015NewLine  }  Di2015NewLine}Di2015NewLine
241942Di2015UniqueSeparator[TypeConverter(typeof(AgeWrapperConverter))]Di2015NewLinepublic class AgeWrapperDi2015NewLine
241946Di2015UniqueSeparator    #region Data AccessDi2015NewLineDi2015NewLineprivate string GetSettingsFromDb(string settingName)Di2015NewLine{Di2015NewLine\return "";Di2015NewLine}Di2015NewLineprivate Dictionary<string,string> GetSettingsFromDb()Di2015NewLine{Di2015NewLine\return new Dictionary<string, string>();Di2015NewLine}Di2015NewLineDi2015NewLine#endregionDi2015NewLineDi2015NewLineprivate const string KEY_SETTING1 = "Setting1";Di2015NewLinepublic string Setting1Di2015NewLine{Di2015NewLine\getDi2015NewLine\{Di2015NewLine\\if (Cache.Get(KEY_SETTING1) != null)Di2015NewLine\\\return Cache.Get(KEY_SETTING1).ToString();Di2015NewLineDi2015NewLine\\Setting1 = GetSettingsFromDb(KEY_SETTING1);Di2015NewLineDi2015NewLine\\return Setting1;Di2015NewLineDi2015NewLine\} Di2015NewLine\setDi2015NewLine\{Di2015NewLine\\Cache.Remove(KEY_SETTING1);Di2015NewLine\\Cache.Insert(KEY_SETTING1, value, null, Cache.NoAbsoluteExpiration, TimeSpan.FromHours(2));Di2015NewLine\}Di2015NewLine}Di2015NewLineDi2015NewLineprivate Cache Cache { get { return HttpContext.Current.Cache; } }Di2015NewLine
242033Di2015UniqueSeparatorstatic Predicate<Car> ByYear(int year)Di2015NewLine{Di2015NewLine    return delegate(Car car)Di2015NewLine    {Di2015NewLine        return car.Year == year;Di2015NewLine    };Di2015NewLine}Di2015NewLineDi2015NewLinestatic void Main(string[] args)Di2015NewLine{Di2015NewLine    // yeah, this bit is C# 3.0, but ignore it - it's just setting up the list.Di2015NewLine    List<Car> list = new List<Car>Di2015NewLine    {Di2015NewLine        new Car { Year = 1940 },Di2015NewLine        new Car { Year = 1965 },Di2015NewLine        new Car { Year = 1973 },Di2015NewLine        new Car { Year = 1999 }Di2015NewLine    };Di2015NewLine    var car99 = list.Find(ByYear(1999));Di2015NewLine    var car65 = list.Find(ByYear(1965));Di2015NewLineDi2015NewLine    Console.WriteLine(car99.Year);Di2015NewLine    Console.WriteLine(car65.Year);Di2015NewLine}Di2015NewLine
242109Di2015UniqueSeparatorinterface IHasModelInputDi2015NewLine{Di2015NewLine    IModelInput GetModelInput();Di2015NewLine}Di2015NewLine
242109Di2015UniqueSeparatorIModelInput modelInputs = option_.GetModelInput();Di2015NewLine
242266Di2015UniqueSeparatorSingleOrDefault
242266Di2015UniqueSeparatorvar acc = context.Accounts.SingleOrDefault(pc => pc.AccountId == AccountId);Di2015NewLineif(acc != null)Di2015NewLine{Di2015NewLine  acc.Name = textboxAccountNameRead.Text.Trim();Di2015NewLine  context.SubmitChanges();Di2015NewLine}Di2015NewLine
242395Di2015UniqueSeparatorobj is ImplementA
242420Di2015UniqueSeparatorIEnumerable<T>
242420Di2015UniqueSeparatorZip
242420Di2015UniqueSeparatorstatic void Main()Di2015NewLine{Di2015NewLine    int[] left = { 1, 2, 3, 4, 5 };Di2015NewLine    string[] right = { "abc", "def", "ghi", "jkl", "mno" };Di2015NewLineDi2015NewLine    // using KeyValuePair<,> approachDi2015NewLine    foreach (var item in left.Zip(right))Di2015NewLine    {Di2015NewLine        Console.WriteLine("{0}/{1}", item.Key, item.Value);Di2015NewLine    }Di2015NewLineDi2015NewLine    // using projection approachDi2015NewLine    foreach (string item in left.Zip(right,Di2015NewLine        (x,y) => string.Format("{0}/{1}", x, y)))Di2015NewLine    {Di2015NewLine        Console.WriteLine(item);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// library code; written once and stuffed away in a util assembly...Di2015NewLineDi2015NewLine// returns each pais as a KeyValuePair<,>Di2015NewLinestatic IEnumerable<KeyValuePair<TLeft,TRight>> Zip<TLeft, TRight>(Di2015NewLine    this IEnumerable<TLeft> left, IEnumerable<TRight> right)Di2015NewLine{Di2015NewLine    return Zip(left, right, (x, y) => new KeyValuePair<TLeft, TRight>(x, y));Di2015NewLine}Di2015NewLineDi2015NewLine// accepts a projection from the caller for each pairDi2015NewLinestatic IEnumerable<TResult> Zip<TLeft, TRight, TResult>(Di2015NewLine    this IEnumerable<TLeft> left, IEnumerable<TRight> right,Di2015NewLine    Func<TLeft, TRight, TResult> selector)Di2015NewLine{Di2015NewLine    using(IEnumerator<TLeft> leftE = left.GetEnumerator())Di2015NewLine    using (IEnumerator<TRight> rightE = right.GetEnumerator())Di2015NewLine    {Di2015NewLine        while (leftE.MoveNext() && rightE.MoveNext())Di2015NewLine        {Di2015NewLine            yield return selector(leftE.Current, rightE.Current);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
242495Di2015UniqueSeparatorstring path = Server.MapPath("~");Di2015NewLine
242549Di2015UniqueSeparatorprivate const int TheAnswer = 42;Di2015NewLine
242716Di2015UniqueSeparator(?<!\\b(?:and| or|not))\\b(?!(?:and|or|not)\\b)Di2015NewLine
242716Di2015UniqueSeparator'except' 'the' 'words' AND, OR and NOT.Di2015NewLine
242724Di2015UniqueSeparator    string[] tokens = text.Split(',');Di2015NewLineDi2015NewLine    for (int i = 0; i < tokens.Length; i++)Di2015NewLine    {Di2015NewLine          yourListBox.Add(new ListItem(token[i], token[i]));Di2015NewLine    }Di2015NewLine
242763Di2015UniqueSeparatorTextChanged
243034Di2015UniqueSeparator string xml = @"<?xml version=""1.0"" encoding=""UTF-8""?>Di2015NewLine<rss version=""2.0"">Di2015NewLine    <channel>Di2015NewLine    <title>Twitter public timeline</title>Di2015NewLine    <link>http://twitter.com/public_timeline</link>Di2015NewLine    <description>Twitter updates from everyone!</description>Di2015NewLine    <language>en-us</language>Di2015NewLine    <ttl>40</ttl>Di2015NewLineDi2015NewLine    <item>Di2015NewLine      <title>yasu_kobayashi: rTwT: @junm : yayaya</title>Di2015NewLine      <description>yasu_kobayashi: rTwT: @junm : yayaya</description>Di2015NewLine      <pubDate>Tue, 28 Oct 2008 12:04:48 +0000</pubDate>Di2015NewLine      <guid>http://twitter.com/yasu_kobayashi/statuses/978829930</guid>Di2015NewLine      <link>http://twitter.com/yasu_kobayashi/statuses/978829930</link>Di2015NewLineDi2015NewLine    </item><item>Di2015NewLine      <title>FreeGroup: WikiFortio - foobar http://tinyurl.com/5gvttf</title>Di2015NewLine      <description>FreeGroup: WikiFortio - foobarDi2015NewLine      http://tinyurl.com/5gvttf</description>Di2015NewLine      <pubDate>Tue, 28 Oct 2008 12:04:47 +0000</pubDate>Di2015NewLine      <guid>http://twitter.com/FreeGroup/statuses/978829929</guid>Di2015NewLine      <link>http://twitter.com/FreeGroup/statuses/978829929</link>Di2015NewLineDi2015NewLine    </item></channel></rss>Di2015NewLine        ";Di2015NewLine            XPathDocument doc = new XPathDocument(new StringReader(xml));Di2015NewLine            XPathNavigator nav = doc.CreateNavigator();Di2015NewLineDi2015NewLine            // Compile a standard XPath expressionDi2015NewLineDi2015NewLine            XPathExpression expr;Di2015NewLine            expr = nav.Compile("/rss/channel/item");Di2015NewLine            XPathNodeIterator iterator = nav.Select(expr);Di2015NewLineDi2015NewLine            // Iterate on the node setDi2015NewLineDi2015NewLine            tryDi2015NewLine            {Di2015NewLine                while (iterator.MoveNext())Di2015NewLine                {Di2015NewLine                    XPathNavigator nav2 = iterator.Current.Clone();Di2015NewLine                    nav2.MoveToChild("title","");Di2015NewLine                    Console.WriteLine(nav2.Value);Di2015NewLine                    nav2.MoveToParent();Di2015NewLine                    nav2.MoveToChild("pubDate","");Di2015NewLine                    Console.WriteLine(nav2.Value);Di2015NewLineDi2015NewLine                }Di2015NewLine            }Di2015NewLine            catch (Exception ex)Di2015NewLine            {Di2015NewLine                Console.WriteLine(ex.Message);Di2015NewLine            }Di2015NewLine            Console.ReadKey();Di2015NewLine
243034Di2015UniqueSeparator        XmlDocument doc2 = new XmlDocument();Di2015NewLine        doc2.LoadXml(xml);Di2015NewLine        XmlNode root = doc2.DocumentElement;Di2015NewLineDi2015NewLine        foreach (XmlNode item in root.SelectNodes(@"/rss/channel/item"))Di2015NewLine        {Di2015NewLine            Console.WriteLine(item.SelectSingleNode("title").FirstChild.Value);Di2015NewLine            Console.WriteLine(item.SelectSingleNode("pubDate").FirstChild.Value);Di2015NewLine        }Di2015NewLine
243168Di2015UniqueSeparatorAction doThatThing = someMethod;Di2015NewLineDi2015NewLineif (condition)Di2015NewLine{Di2015NewLine  lock(thatThing)Di2015NewLine  {Di2015NewLine     doThatThing();Di2015NewLine  }Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine  doThatThing();Di2015NewLine}Di2015NewLine
243357Di2015UniqueSeparator    Stopwatch stopWatch = Stopwatch.StartNew();Di2015NewLine    Thread.Sleep(10000);Di2015NewLine    stopWatch.Stop();Di2015NewLine    // Get the elapsed time as a TimeSpan value.Di2015NewLine    TimeSpan ts = stopWatch.Elapsed;Di2015NewLine
243423Di2015UniqueSeparator  <!-- Copy all elements, and recur on their child nodes. -->Di2015NewLine  <xsl:template match="*">Di2015NewLine    <xsl:copy>Di2015NewLine      <xsl:apply-templates select="@*"/>Di2015NewLine      <xsl:apply-templates/>Di2015NewLine    </xsl:copy>Di2015NewLine  </xsl:template>Di2015NewLineDi2015NewLine  <!-- Copy all non-element nodes. -->Di2015NewLine  <xsl:template match="@*|text()|comment()|processing-instruction()">Di2015NewLine    <xsl:copy/>Di2015NewLine  </xsl:template>Di2015NewLine
243423Di2015UniqueSeparator  <!-- Do not copy WordML elements or their attributes to the Di2015NewLine       output tree; just recur on child nodes. -->Di2015NewLine  <xsl:template match="wml:*">Di2015NewLine    <xsl:apply-templates/>Di2015NewLine  </xsl:template>Di2015NewLine
243600Di2015UniqueSeparatorusing System;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Threading;Di2015NewLineusing System.Windows.Forms;Di2015NewLineclass Demo : FormDi2015NewLine{Di2015NewLine    class ChattyWorker : BackgroundWorkerDi2015NewLine    {Di2015NewLine        ~ChattyWorker()Di2015NewLine        {Di2015NewLine            Console.WriteLine("Worker finalized");Di2015NewLine        }Di2015NewLine    }Di2015NewLine    class SomeTargetDi2015NewLine    {Di2015NewLine        ~SomeTarget()Di2015NewLine        {Di2015NewLine            Console.WriteLine("Target finalized");Di2015NewLine        }Di2015NewLine        public SomeTarget()Di2015NewLine        {Di2015NewLine            Console.WriteLine("Target created");Di2015NewLine        }Di2015NewLine        public void Foo(object sender, EventArgs args)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Foo");Di2015NewLine        }Di2015NewLine    }Di2015NewLine    static void Collect(object sender, EventArgs args)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Collecting...");Di2015NewLine        GC.Collect(GC.MaxGeneration, GCCollectionMode.Forced);Di2015NewLine    }Di2015NewLine    protected override void OnLoad(EventArgs e)Di2015NewLine    {Di2015NewLine        base.OnLoad(e);Di2015NewLineDi2015NewLine        System.Windows.Forms.Timer timer = new System.Windows.Forms.Timer();Di2015NewLine        timer.Interval = 100;Di2015NewLine        timer.Tick += Collect;Di2015NewLine        timer.Start();Di2015NewLineDi2015NewLine        ChattyWorker worker = new ChattyWorker();Di2015NewLine        worker.RunWorkerCompleted += new SomeTarget().Foo;Di2015NewLine        worker.DoWork += delegateDi2015NewLine        {Di2015NewLine            Console.WriteLine("Worker starting");Di2015NewLine            for (int i = 0; i < 10; i++)Di2015NewLine            {Di2015NewLine                Thread.Sleep(250);Di2015NewLine                Console.WriteLine(i);Di2015NewLine            }Di2015NewLine            Console.WriteLine("Worker exiting");Di2015NewLine        };Di2015NewLine        worker.RunWorkerAsync();Di2015NewLine    }Di2015NewLine    [STAThread]Di2015NewLine    static void Main()Di2015NewLine    { // using a form to force a sync contextDi2015NewLine        Application.Run(new Demo());Di2015NewLine    }Di2015NewLine}Di2015NewLine
243844Di2015UniqueSeparator  <connectionStrings>Di2015NewLine     <remove name="LocalSqlServer"/>Di2015NewLine     <add name="LocalSqlServer" connectionString="<connection string>" providerName="System.Data.SqlClient"/>Di2015NewLine  </connectionStrings>Di2015NewLine  <system.web>Di2015NewLine     <membership defaultProvider="provider">Di2015NewLine       <providers>Di2015NewLine         <add name="provider" applicationName="MyApp" type="System.Web.Security.SqlMembershipProvider" connectionStringName="LocalSqlServer" minRequiredPasswordLength="6" minRequiredNonalphanumericCharacters="0" requiresQuestionAndAnswer="false" maxInvalidPasswordAttempts="3" passwordAttemptWindow="15"/>Di2015NewLine       </providers>Di2015NewLine     </membership>Di2015NewLine  </system.web>Di2015NewLine
244153Di2015UniqueSeparatorSelectMany
244153Di2015UniqueSeparatorfrom
244153Di2015UniqueSeparatorvar items = from order in customer.OrdersDi2015NewLine            from item in order.ItemsDi2015NewLine            select item;Di2015NewLine
244153Di2015UniqueSeparatorvar items = customer.Orders.SelectMany(order => order.Items);Di2015NewLine
244203Di2015UniqueSeparatornew Regex("asc$|desc$").IsMatch(yourQuery)Di2015NewLine
244203Di2015UniqueSeparator(?:asc|desc)$
244203Di2015UniqueSeparator$
244228Di2015UniqueSeparatordocs.Sort((x, y) => y.StoredDate.CompareTo(x.StoredDate));Di2015NewLine
244299Di2015UniqueSeparator<foo mean-attribute="<">Di2015NewLine
244299Di2015UniqueSeparator<foo mean-attribute="&<">Di2015NewLine
244331Di2015UniqueSeparatorpublic interface ICacheWrapperDi2015NewLine{Di2015NewLine   ...methods to supportDi2015NewLine}Di2015NewLineDi2015NewLinepublic class CacheWrapper : ICacheWrapperDi2015NewLine{Di2015NewLine    private System.Web.Caching.Cache cache;Di2015NewLine    public CacheWrapper( System.Web.Caching.Cache cache )Di2015NewLine    {Di2015NewLine        this.cache = cache;Di2015NewLine    }Di2015NewLineDi2015NewLine    ... implement methods using cache ...Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MockCacheWrapper : ICacheWrapperDi2015NewLine{Di2015NewLine    private MockCache cache;Di2015NewLine    public MockCacheWrapper( MockCache cache )Di2015NewLine    {Di2015NewLine        this.cache = cache;Di2015NewLine    }Di2015NewLineDi2015NewLine    ... implement methods using mock cache...Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MockCacheDi2015NewLine{Di2015NewLine     ... implement ways to set mock values and retrieve them...Di2015NewLine}Di2015NewLineDi2015NewLine[Test]Di2015NewLinepublic void CachingTest()Di2015NewLine{Di2015NewLine    ... set up omitted...Di2015NewLineDi2015NewLine    ICacheWrapper wrapper = new MockCacheWrapper( new MockCache() );Di2015NewLineDi2015NewLine    CacheManager manager = new CacheManager( wrapper );Di2015NewLineDi2015NewLine    manager.Insert(item,value);Di2015NewLineDi2015NewLine    Assert.AreEqual( value, manager[item] );Di2015NewLine}Di2015NewLine
244331Di2015UniqueSeparator...Di2015NewLineDi2015NewLineCacheManager manager = new CacheManager( new CacheWrapper( HttpContext.Current.Cache ));Di2015NewLineDi2015NewLinemanager.Add(item,value);Di2015NewLineDi2015NewLine...Di2015NewLine
244585Di2015UniqueSeparatorstring value = Regex.Replace("%PolicyAmount%", "%PolicyAmount%", @"$$0", RegexOptions.IgnoreCase);Di2015NewLine
244604Di2015UniqueSeparatorprgAll.Maximum = lbFolders.SelectedItems.Count;Di2015NewLine
244651Di2015UniqueSeparatorHeaderControl
244651Di2015UniqueSeparatorListView
244651Di2015UniqueSeparatorColumnHeader
244651Di2015UniqueSeparatorListView
244651Di2015UniqueSeparatorHeaderButton
244651Di2015UniqueSeparatorColumnHeader
244651Di2015UniqueSeparatorFlowLayoutPanel
244651Di2015UniqueSeparatorTableLayoutPanel
244651Di2015UniqueSeparatorHeaderButton
244660Di2015UniqueSeparatorpublic static void Invoke(this Control control, MethodInvoker methodInvoker)Di2015NewLine{Di2015NewLine    if (control.InvokeRequired)Di2015NewLine        control.Invoke(methodInvoker);Di2015NewLine    elseDi2015NewLine        methodInvoker();Di2015NewLine}Di2015NewLine
244660Di2015UniqueSeparatorif (element.className != null)Di2015NewLine{Di2015NewLine    this.Invoke(() => toolStripLabel1.Text = element.className);Di2015NewLine}Di2015NewLine
244798Di2015UniqueSeparatorpublic static void SetPermissions(string dir)Di2015NewLine        {Di2015NewLine            DirectoryInfo info = new DirectoryInfo(dir);Di2015NewLine            DirectorySecurity ds = info.GetAccessControl();            Di2015NewLine            ds.AddAccessRule(new FileSystemAccessRule(@"BUILTIN\\Users", Di2015NewLine                             FileSystemRights.FullControl,Di2015NewLine                             InheritanceFlags.ObjectInherit |Di2015NewLine                             InheritanceFlags.ContainerInherit,Di2015NewLine                             PropagationFlags.None,Di2015NewLine                             AccessControlType.Allow));Di2015NewLine            info.SetAccessControl(ds);            Di2015NewLine        }Di2015NewLine
244874Di2015UniqueSeparatorUPDATE Users Di2015NewLineSET Di2015NewLine    UserName = REPLACE(UserName, '\\\\ProductionDomain\\', '\\\\DevDomain\\')Di2015NewLine
244897Di2015UniqueSeparatorpublic class WebRequestWrapperDi2015NewLine{Di2015NewLine   internal WebRequestWrapper() {..}Di2015NewLineDi2015NewLine   public WebRequestWrapper(WebRequest req)Di2015NewLine   {Di2015NewLine      _innerRequest = req;Di2015NewLine   }Di2015NewLineDi2015NewLineDi2015NewLine   public virtual string UrlDi2015NewLine   {Di2015NewLine      return _innerReq.Url;Di2015NewLine   }Di2015NewLineDi2015NewLine   //repeat, make all necessary members virtualDi2015NewLine}Di2015NewLine
245077Di2015UniqueSeparatorSelectSingleNode
245077Di2015UniqueSeparatorNullReferenceException
245077Di2015UniqueSeparatorSelectSingleNode
245077Di2015UniqueSeparatorXPathException
245119Di2015UniqueSeparatorPropertyInfo[] info = obj.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);Di2015NewLine
245119Di2015UniqueSeparatorGetProperties()
245119Di2015UniqueSeparatorGetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static )
245119Di2015UniqueSeparatorBindingFlags.FlattenHierarchy
245128Di2015UniqueSeparator    1    class MyToolTip : ToolTipDi2015NewLine    2     {Di2015NewLine    3         public MyToolTip()Di2015NewLine    4         {Di2015NewLine    5             this.OwnerDraw = true;Di2015NewLine    6             this.Draw += new DrawToolTipEventHandler(OnDraw);Di2015NewLine    7 Di2015NewLine    8         }Di2015NewLine    9 Di2015NewLine   10         public MyToolTip(System.ComponentModel.IContainer Cont)Di2015NewLine   11         {Di2015NewLine   12             this.OwnerDraw = true;Di2015NewLine   13             this.Draw += new DrawToolTipEventHandler(OnDraw);Di2015NewLine   14         }Di2015NewLine   15 Di2015NewLine   16         private void OnDraw(object sender, DrawToolTipEventArgs e)Di2015NewLine   17         {Di2015NewLine                      ...Code Stuff...Di2015NewLine   24         }Di2015NewLine   25     }Di2015NewLine
245174Di2015UniqueSeparatorvar dictionary = dbDi2015NewLine    .TableDi2015NewLine    .Select(p => new { p.Key, p.Value })Di2015NewLine    .AsEnumerable()Di2015NewLine    .ToDictionary(kvp => kvp.Key, kvp => kvp.Value)Di2015NewLine;Di2015NewLine
245268Di2015UniqueSeparatorpromptTable.Visible = User.IsInRole(@"DOMAIN\\CMDB_CONTRIBUTE");Di2015NewLine
245268Di2015UniqueSeparator<%# %>
245268Di2015UniqueSeparator<%= %>
245388Di2015UniqueSeparatorString text = "dssdfsfadafdsaf";Di2015NewLinevar repeatedChars = text.ToCharArray().GroupBy(x => x).Where(y => y.Count() > 1).Select(z=>z.Key);Di2015NewLine
245416Di2015UniqueSeparatorBindingFlags.DeclaredOnly
245416Di2015UniqueSeparatorGetProperties
245416Di2015UniqueSeparatorBindingFlags.Public
245416Di2015UniqueSeparatorBindingFlags.Instance
246060Di2015UniqueSeparatorvoid DeductFromBalance( dAmount )Di2015NewLine
246060Di2015UniqueSeparatorvoid OnAccountDebit( dAmount )  // emails account holder with infoDi2015NewLine
246060Di2015UniqueSeparatorstring[] ExamineLogFileForX( string sFileName );Di2015NewLinevoid InsertStringsIntoDatabase( string[] );Di2015NewLine
246060Di2015UniqueSeparatorInsertStringsIntoDatabase( ExamineLogFileForX( "c:\\OMG.log" ) );Di2015NewLine
246064Di2015UniqueSeparatorvar x = this.Handle; Di2015NewLine
246101Di2015UniqueSeparatorList<Banana>
246101Di2015UniqueSeparatorList<Fruit>
246101Di2015UniqueSeparatorin
246101Di2015UniqueSeparatorout
246101Di2015UniqueSeparatorIEnumerable<T>
246101Di2015UniqueSeparatorIEnumerable<out T>
246101Di2015UniqueSeparatorIEnumerable<string>
246101Di2015UniqueSeparatorIEnumerable<object>
246101Di2015UniqueSeparatorAction<T>
246101Di2015UniqueSeparatorT
246101Di2015UniqueSeparatorAction<object>
246101Di2015UniqueSeparatorAction<string>
246101Di2015UniqueSeparatorobject
246101Di2015UniqueSeparatorstring
246132Di2015UniqueSeparatorIQueryable<T>
246132Di2015UniqueSeparatorQueryable
246132Di2015UniqueSeparator>Where: x => ((x % 2) = 0)Di2015NewLine<Where: x => ((x % 2) = 0)Di2015NewLine>CountDi2015NewLine'WindowsFormsApplication2.vshost.exe' (Managed): Loaded 'Anonymously Hosted DynamicMethods Assembly'Di2015NewLine<CountDi2015NewLine
246132Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing System.Linq.Expressions;Di2015NewLineDi2015NewLinenamespace DemoDi2015NewLine{Di2015NewLine    using DebugLinq;Di2015NewLine    static class ProgramDi2015NewLine    {Di2015NewLine        static void Main()Di2015NewLine        {Di2015NewLine            var data = System.Linq.Queryable.AsQueryable(new[] { 1, 2, 3, 4, 5 });Di2015NewLine            data.Where(x => x % 2 == 0).Count(); Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLinenamespace DebugLinqDi2015NewLine{Di2015NewLine    public static class DebugQueryableDi2015NewLine    {Di2015NewLine        public static int Count<T>(this System.Linq.IQueryable<T> source)Di2015NewLine        {Di2015NewLine            return Wrap(() => System.Linq.Queryable.Count(source), "Count");Di2015NewLine        }Di2015NewLineDi2015NewLine        public static System.Linq.IQueryable<T> Where<T>(this System.Linq.IQueryable<T> source, Expression<Func<T, bool>> predicate)Di2015NewLine        {Di2015NewLine            return Wrap(() => System.Linq.Queryable.Where(source, predicate), "Where: " + predicate);Di2015NewLine        }Di2015NewLine        static TResult Wrap<TResult>(Func<TResult> func, string caption)Di2015NewLine        {Di2015NewLine            Debug.WriteLine(">" + caption);Di2015NewLine            tryDi2015NewLine            {Di2015NewLine                TResult result = func();Di2015NewLine                Debug.WriteLine("<" + caption);Di2015NewLine                return result;Di2015NewLine            }Di2015NewLine            catchDi2015NewLine            {Di2015NewLine                Debug.WriteLine("!" + caption);Di2015NewLine                throw;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
246229Di2015UniqueSeparatorfoo.Date
246229Di2015UniqueSeparatorDateTime.Today
246332Di2015UniqueSeparatorDim c as new sqlcommand("...")Di2015NewLineDi2015NewLineDim d As New SqlParameter()Di2015NewLined.Direction = ParameterDirection.ReturnValueDi2015NewLinec.parameters.add(d)Di2015NewLineDi2015NewLinec.executeNonQueryDi2015NewLineDi2015NewLine(@@IDENTITY) = d.valueDi2015NewLine
246345Di2015UniqueSeparatorINotifyPropertyChanged
246345Di2015UniqueSeparatorFooChanged
246345Di2015UniqueSeparatorFoo
246345Di2015UniqueSeparatorTypeDescriptor
246345Di2015UniqueSeparatorPropertyDescriptor
246345Di2015UniqueSeparatorSupportsChangeEvents
246345Di2015UniqueSeparatorAddValueChanged
246345Di2015UniqueSeparatorRemoveValueChanged
246345Di2015UniqueSeparatorIDataErrorInfo
246345Di2015UniqueSeparatorDataGridView
246345Di2015UniqueSeparatorIDataErrorInfo dei = obj as IDataErrorInfo;Di2015NewLineif(dei != null) { // supports validationDi2015NewLine   string err = dei["PropName"]; // or .Error for overall statusDi2015NewLine   bool clean = string.IsNullOrEmpty(err);Di2015NewLine}Di2015NewLine
246345Di2015UniqueSeparatorColor
246359Di2015UniqueSeparatorShouldSerialize{Foo}()
246359Di2015UniqueSeparatorpublic bool ShouldSerializeID() {return ID.HasValue;}Di2015NewLine
246359Di2015UniqueSeparator{Foo}Specified
246529Di2015UniqueSeparatorpublic struct DateTimeWithZoneDi2015NewLine{Di2015NewLine    private readonly DateTime utcDateTime;Di2015NewLine    private readonly TimeZoneInfo timeZone;Di2015NewLineDi2015NewLine    public DateTimeWithZone(DateTime dateTime, TimeZoneInfo timeZone)Di2015NewLine    {Di2015NewLine        utcDateTime = TimeZoneInfo.ConvertTimeToUtc(dateTime, timeZone); Di2015NewLine        this.timeZone = timeZone;Di2015NewLine    }Di2015NewLineDi2015NewLine    public DateTime UniversalTime { get { return utcDateTime; } }Di2015NewLineDi2015NewLine    public TimeZoneInfo TimeZone { get { return timeZone; } }Di2015NewLineDi2015NewLine    public DateTime LocalTimeDi2015NewLine    { Di2015NewLine        get Di2015NewLine        { Di2015NewLine            return TimeZoneInfo.ConvertTime(utcDateTime, timeZone); Di2015NewLine        }Di2015NewLine    }        Di2015NewLine}Di2015NewLine
246700Di2015UniqueSeparatorprivate static string GetFullName()Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            DirectoryEntry de = new DirectoryEntry("WinNT://" + Environment.UserDomainName + "/" + Environment.UserName);Di2015NewLine            return de.Properties["fullName"].Value.ToString();Di2015NewLine        }Di2015NewLine        catch { return null; }Di2015NewLine    }Di2015NewLine
246719Di2015UniqueSeparatorSystem.Timers.Timer
246719Di2015UniqueSeparatorSystem.Threading.Timer
246719Di2015UniqueSeparatorSystem.Web.UI.Timer
246719Di2015UniqueSeparatorSystem.Windows.Forms.Timer
246719Di2015UniqueSeparatorSystem.Timers.Timer
246719Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Timers;Di2015NewLineDi2015NewLinepublic class Timer1Di2015NewLine{Di2015NewLine    private static System.Timers.Timer aTimer;Di2015NewLineDi2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine        // Normally, the timer is declared at the class level,Di2015NewLine        // so that it stays in scope as long as it is needed.Di2015NewLine        // If the timer is declared in a long-running method,  Di2015NewLine        // KeepAlive must be used to prevent the JIT compiler Di2015NewLine        // from allowing aggressive garbage collection to occur Di2015NewLine        // before the method ends. (See end of method.)Di2015NewLine        //System.Timers.Timer aTimer;Di2015NewLineDi2015NewLine        // Create a timer with a ten second interval.Di2015NewLine        aTimer = new System.Timers.Timer(10000);Di2015NewLineDi2015NewLine        // Hook up the Elapsed event for the timer.Di2015NewLine        aTimer.Elapsed += new ElapsedEventHandler(OnTimedEvent);Di2015NewLineDi2015NewLine        // Set the Interval to 2 seconds (2000 milliseconds).Di2015NewLine        aTimer.Interval = 2000;Di2015NewLine        aTimer.Enabled = true;Di2015NewLineDi2015NewLine        Console.WriteLine("Press the Enter key to exit the program.");Di2015NewLine        Console.ReadLine();Di2015NewLineDi2015NewLine        // If the timer is declared in a long-running method, useDi2015NewLine        // KeepAlive to prevent garbage collection from occurringDi2015NewLine        // before the method ends.Di2015NewLine        //GC.KeepAlive(aTimer);Di2015NewLine    }Di2015NewLineDi2015NewLine    // Specify what you want to happen when the Elapsed event is Di2015NewLine    // raised.Di2015NewLine    private static void OnTimedEvent(object source, ElapsedEventArgs e)Di2015NewLine    {Di2015NewLine        Console.WriteLine("The Elapsed event was raised at {0}", e.SignalTime);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine/* This code example produces output similar to the following:Di2015NewLineDi2015NewLinePress the Enter key to exit the program.Di2015NewLineThe Elapsed event was raised at 5/20/2007 8:42:27 PMDi2015NewLineThe Elapsed event was raised at 5/20/2007 8:42:29 PMDi2015NewLineThe Elapsed event was raised at 5/20/2007 8:42:31 PMDi2015NewLine...Di2015NewLine */Di2015NewLine
246719Di2015UniqueSeparatorSystem.Threading.Timer
246719Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Threading;Di2015NewLineDi2015NewLineclass TimerExampleDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        AutoResetEvent autoEvent     = new AutoResetEvent(false);Di2015NewLine        StatusChecker  statusChecker = new StatusChecker(10);Di2015NewLineDi2015NewLine        // Create the delegate that invokes methods for the timer.Di2015NewLine        TimerCallback timerDelegate = Di2015NewLine            new TimerCallback(statusChecker.CheckStatus);Di2015NewLineDi2015NewLine        // Create a timer that signals the delegate to invoke Di2015NewLine        // CheckStatus after one second, and every 1/4 second Di2015NewLine        // thereafter.Di2015NewLine        Console.WriteLine("{0} Creating timer.\\n", Di2015NewLine            DateTime.Now.ToString("h:mm:ss.fff"));Di2015NewLine        Timer stateTimer = Di2015NewLine                new Timer(timerDelegate, autoEvent, 1000, 250);Di2015NewLineDi2015NewLine        // When autoEvent signals, change the period to every Di2015NewLine        // 1/2 second.Di2015NewLine        autoEvent.WaitOne(5000, false);Di2015NewLine        stateTimer.Change(0, 500);Di2015NewLine        Console.WriteLine("\\nChanging period.\\n");Di2015NewLineDi2015NewLine        // When autoEvent signals the second time, dispose of Di2015NewLine        // the timer.Di2015NewLine        autoEvent.WaitOne(5000, false);Di2015NewLine        stateTimer.Dispose();Di2015NewLine        Console.WriteLine("\\nDestroying timer.");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass StatusCheckerDi2015NewLine{Di2015NewLine    int invokeCount, maxCount;Di2015NewLineDi2015NewLine    public StatusChecker(int count)Di2015NewLine    {Di2015NewLine        invokeCount  = 0;Di2015NewLine        maxCount = count;Di2015NewLine    }Di2015NewLineDi2015NewLine    // This method is called by the timer delegate.Di2015NewLine    public void CheckStatus(Object stateInfo)Di2015NewLine    {Di2015NewLine        AutoResetEvent autoEvent = (AutoResetEvent)stateInfo;Di2015NewLine        Console.WriteLine("{0} Checking status {1,2}.", Di2015NewLine            DateTime.Now.ToString("h:mm:ss.fff"), Di2015NewLine            (++invokeCount).ToString());Di2015NewLineDi2015NewLine        if(invokeCount == maxCount)Di2015NewLine        {Di2015NewLine            // Reset the counter and signal Main.Di2015NewLine            invokeCount  = 0;Di2015NewLine            autoEvent.Set();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
246750Di2015UniqueSeparatorpublic static class GlobalSomethingDi2015NewLine{Di2015NewLine   public static int NumberOfSomething { get; set; }Di2015NewLineDi2015NewLine   public static string MangleString( string someValue )Di2015NewLine   {Di2015NewLine   }Di2015NewLine}Di2015NewLine
247070Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Data;Di2015NewLineusing System.Drawing;Di2015NewLineusing System.Text;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.Security.Cryptography;Di2015NewLineDi2015NewLinenamespace DataProtectionTestDi2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine    \private static readonly byte[] entropy = { 1, 2, 3, 4, 1, 2, 3, 4 };Di2015NewLine    \private string password;Di2015NewLine    \public Form1()Di2015NewLine    \{Di2015NewLine    \\InitializeComponent();Di2015NewLine    \}Di2015NewLineDi2015NewLine    \private void btnEncryptIt_Click(object sender, EventArgs e)Di2015NewLine    \{Di2015NewLine    \\Byte[] pw = Encoding.Unicode.GetBytes(textBox1.Text);Di2015NewLine    \\Byte[] encryptedPw = ProtectedData.Protect(pw, entropy, DataProtectionScope.LocalMachine);Di2015NewLine    \\//password = Encoding.Unicode.GetString(encryptedPw);\\Di2015NewLine    \\password = Convert.ToBase64String(encryptedPw);Di2015NewLine    \}Di2015NewLineDi2015NewLine    \private void btnDecryptIt_Click(object sender, EventArgs e)Di2015NewLine    \{Di2015NewLine    \\//Byte[] pwBytes = Encoding.Unicode.GetBytes(password);Di2015NewLine    \\Byte[] pwBytes = Convert.FromBase64String(password);Di2015NewLine    \\tryDi2015NewLine    \\{Di2015NewLine    \\\Byte[] decryptedPw = ProtectedData.Unprotect(pwBytes, entropy, DataProtectionScope.LocalMachine);Di2015NewLine    \\\string pw = Encoding.Unicode.GetString(decryptedPw);Di2015NewLine    \\\textBox2.Text = pw;Di2015NewLine    \\}Di2015NewLine    \\catch (CryptographicException ce)Di2015NewLine    \\{Di2015NewLine    \\\textBox2.Text = ce.Message;Di2015NewLine    \\}Di2015NewLine    \}Di2015NewLine    }Di2015NewLine}Di2015NewLine
247171Di2015UniqueSeparatornint
247171Di2015UniqueSeparatoranint
247171Di2015UniqueSeparatorMath.Round
247171Di2015UniqueSeparatorMidpointRounding.AwayFromZero
247171Di2015UniqueSeparatoraint
247171Di2015UniqueSeparatordouble
247171Di2015UniqueSeparatorint
247244Di2015UniqueSeparatorMasterPage testMaster = (MasterPage) LoadControl( MasterPageFile );Di2015NewLineControl c = testMaster.FindControl(existantContentPlaceHolderID);Di2015NewLine
247417Di2015UniqueSeparatorstring number = "1234567890";Di2015NewLinestring formattedNumber = string.Format("{0}-{1}-{2}", number.Substring(0,3), number.Substring(3,3), number.Substring(6));Di2015NewLine
247436Di2015UniqueSeparatorDebugger.Launch();Di2015NewLine
247623Di2015UniqueSeparatorDispose
247623Di2015UniqueSeparatorIEnumerator
247623Di2015UniqueSeparatorIDisposable
247623Di2015UniqueSeparatorvar
247623Di2015UniqueSeparatordynamic
247623Di2015UniqueSeparatorEnvironment.Version
247699Di2015UniqueSeparator        si.StartInfo.Arguments = "dir";Di2015NewLine
247699Di2015UniqueSeparator        si.StartInfo.Arguments = "/c dir";Di2015NewLine
247822Di2015UniqueSeparatorSqlParameter theOrganizationNameParam = new SqlParameter( "@OrganisationName", SqlDbType.NVarChar, 256 );Di2015NewLinetheOrganizationNameParam.Direction = ParameterDirection.Output;Di2015NewLinecm.Parameters.Add( theOrganizationNameParam );Di2015NewLinecm.ExecuteNonQuery();Di2015NewLinename = theOrganizationNameParam.Value;Di2015NewLine
247868Di2015UniqueSeparator ddl.Items.Add(new ListItem(nameList[name].ToString()));Di2015NewLine
247868Di2015UniqueSeparator ddl.Items.Add(new ListItem(name));Di2015NewLine
248008Di2015UniqueSeparatorComparison<T>
248008Di2015UniqueSeparatorList
248008Di2015UniqueSeparatornameList.Sort(delegate(ListItem thisItem, ListItem otherItem) {Di2015NewLine    return thisItem.Text.CompareTo(otherItem.Text);Di2015NewLine});Di2015NewLine
248008Di2015UniqueSeparatornull
248017Di2015UniqueSeparatorinitControlsRecursive(ControlCollection coll)Di2015NewLine { Di2015NewLine    foreach (Control c in coll)  Di2015NewLine     {  Di2015NewLine       c.MouseClick += (sender, e) => {/* handle the click here  */});  Di2015NewLine       initControlsRecursive(c.Controls);Di2015NewLine     }Di2015NewLine }Di2015NewLineDi2015NewLine/* ... */Di2015NewLineinitControlsRecursive(Form.Controls);Di2015NewLine
248178Di2015UniqueSeparator<asp:CheckBox ID="cbMyBox" Runat="server" Text='<%# Eval("Key")%>' ToolTip='<%#Eval("Value")'></asp:CheckBox>Di2015NewLine
248276Di2015UniqueSeparatorHelperClass.HelperMethod();
248276Di2015UniqueSeparatorHelperClass
248525Di2015UniqueSeparator    static int CountDays(DayOfWeek day, DateTime start, DateTime end)Di2015NewLine    {Di2015NewLine        TimeSpan ts = end - start;                       // Total durationDi2015NewLine        int count = (int)Math.Floor(ts.TotalDays / 7);   // Number of whole weeksDi2015NewLine        int remainder = (int)(ts.TotalDays % 7);         // Number of remaining daysDi2015NewLine        int sinceLastDay = (int)(end.DayOfWeek - day);   // Number of days since last [day]Di2015NewLine        if (sinceLastDay < 0) sinceLastDay += 7;         // Adjust for negative days since last [day]Di2015NewLineDi2015NewLine        // If the days in excess of an even week are greater than or equal to the number days since the last [day], then count this one, too.Di2015NewLine        if (remainder >= sinceLastDay) count++;          Di2015NewLineDi2015NewLine        return count;Di2015NewLine    }Di2015NewLine
248613Di2015UniqueSeparatorIComparer
248613Di2015UniqueSeparator[DllImport("shlwapi.dll", CharSet = CharSet.Unicode)]Di2015NewLineprivate static extern int StrCmpLogicalW(string psz1, string psz2);Di2015NewLine
248613Di2015UniqueSeparator[SuppressUnmanagedCodeSecurity]Di2015NewLineinternal static class SafeNativeMethodsDi2015NewLine{Di2015NewLine    [DllImport("shlwapi.dll", CharSet = CharSet.Unicode)]Di2015NewLine    public static extern int StrCmpLogicalW(string psz1, string psz2);Di2015NewLine}Di2015NewLineDi2015NewLinepublic sealed class NaturalStringComparer : IComparer<string>Di2015NewLine{Di2015NewLine    public int Compare(string a, string b)Di2015NewLine    {Di2015NewLine        return SafeNativeMethods.StrCmpLogicalW(a, b);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic sealed class NaturalFileInfoNameComparer : IComparer<FileInfo>Di2015NewLine{Di2015NewLine    public int Compare(FileInfo a, FileInfo b)Di2015NewLine    {Di2015NewLine        return SafeNativeMethods.StrCmpLogicalW(a.Name, b.Name);Di2015NewLine    }Di2015NewLine}Di2015NewLine
248638Di2015UniqueSeparatorItemsSource
248638Di2015UniqueSeparatordrpCreditCardNumberWpf
248638Di2015UniqueSeparator//create the data templateDi2015NewLineDataTemplate cardLayout = new DataTemplate();Di2015NewLinecardLayout.DataType = typeof(CreditCardPayment);Di2015NewLineDi2015NewLine//set up the stack panelDi2015NewLineFrameworkElementFactory spFactory = new FrameworkElementFactory(typeof(StackPanel));Di2015NewLinespFactory.Name = "myComboFactory";Di2015NewLinespFactory.SetValue(StackPanel.OrientationProperty, Orientation.Horizontal);Di2015NewLineDi2015NewLine//set up the card holder textblockDi2015NewLineFrameworkElementFactory cardHolder = new FrameworkElementFactory(typeof(TextBlock));Di2015NewLinecardHolder.SetBinding(TextBlock.TextProperty, new Binding("BillToName"));Di2015NewLinecardHolder.SetValue(TextBlock.ToolTipProperty, "Card Holder Name");Di2015NewLinespFactory.AppendChild(cardHolder);Di2015NewLineDi2015NewLine//set up the card number textblockDi2015NewLineFrameworkElementFactory cardNumber = new FrameworkElementFactory(typeof(TextBlock));Di2015NewLinecardNumber.SetBinding(TextBlock.TextProperty, new Binding("SafeNumber"));Di2015NewLinecardNumber.SetValue(TextBlock.ToolTipProperty, "Credit Card Number");Di2015NewLinespFactory.AppendChild(cardNumber);Di2015NewLineDi2015NewLine//set up the notes textblockDi2015NewLineFrameworkElementFactory notes = new FrameworkElementFactory(typeof(TextBlock));Di2015NewLinenotes.SetBinding(TextBlock.TextProperty, new Binding("Notes"));Di2015NewLinenotes.SetValue(TextBlock.ToolTipProperty, "Notes");Di2015NewLinespFactory.AppendChild(notes);Di2015NewLineDi2015NewLine//set the visual tree of the data templateDi2015NewLinecardLayout.VisualTree = spFactory;Di2015NewLineDi2015NewLine//set the item template to be our shiny new data templateDi2015NewLinedrpCreditCardNumberWpf.ItemTemplate = cardLayout;Di2015NewLine
248638Di2015UniqueSeparatorToolTip
248638Di2015UniqueSeparatorTextBlock
248657Di2015UniqueSeparatorint compilerError = 1 / (MY_CONST % 3 == 0 ? 1 : 0);Di2015NewLine
248731Di2015UniqueSeparatorDim query = db.Customers.Where("City == @0 and Orders.Count >= @1", "London", 10). _Di2015NewLine                OrderBy("CompanyName"). _Di2015NewLine                Select("New(CompanyName as Name, Phone)")Di2015NewLine
248731Di2015UniqueSeparator Sub query(Of T)(ByVal Myobject As IQueryable(Of T))Di2015NewLine    Dim i = Myobject.Select("New(customer.Number)")Di2015NewLine End SubDi2015NewLine
248731Di2015UniqueSeparatorSub PassIt()Di2015NewLine    Dim name = "customer"Di2015NewLine    Select Case nameDi2015NewLine        Case "customer"Di2015NewLine            query(m.Customer)Di2015NewLine    End SelectDi2015NewLineEnd SubDi2015NewLine
248866Di2015UniqueSeparatorpublic static class ExtensionsDi2015NewLine{Di2015NewLine    public static void Method(this byte[] current)Di2015NewLine    {Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
248899Di2015UniqueSeparator// create a list of students and print them back out.Di2015NewLineStudentList list = new StudentList();Di2015NewLinelist.Add( new Student("Bob", 1234, 2, 'A') );Di2015NewLinelist.Add( new Student("Mary", 2345, 4, 'C') );Di2015NewLineDi2015NewLineforeach( Student student in list)Di2015NewLine{Di2015NewLine    Console.WriteLine(student.Name);Di2015NewLine}Di2015NewLine
248899Di2015UniqueSeparatorpublic class StudentList Di2015NewLine{Di2015NewLine    private ListNode _firstElement; // always need to keep track of the head.Di2015NewLineDi2015NewLine    private class ListNodeDi2015NewLine    {Di2015NewLine        public Student Element { get; set; }Di2015NewLine        public ListNode Next { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Add(Student student) { /* TODO */ }Di2015NewLineDi2015NewLine}Di2015NewLine
248899Di2015UniqueSeparatorpublic void Add(Student student)Di2015NewLine{Di2015NewLine    if (student == null)Di2015NewLine        throw new ArgumentNullException("student");Di2015NewLineDi2015NewLine    // create the new elementDi2015NewLine    ListNode insert = new ListNode() { Element = student };Di2015NewLineDi2015NewLine    if( _firstElement == null )Di2015NewLine    {Di2015NewLine        _firstElement = insert;Di2015NewLine        return;Di2015NewLine    }Di2015NewLineDi2015NewLine    ListNode current = _firstElement;Di2015NewLine    while (current.Next != null)Di2015NewLine    {Di2015NewLine        current = current.Next;Di2015NewLine    }Di2015NewLineDi2015NewLine    current.Next = insert;Di2015NewLine}Di2015NewLine
248899Di2015UniqueSeparatorprivate ListNode _lastElement;  // keep track of the last element: Adding is O(1) instead of O(n)Di2015NewLineDi2015NewLinepublic void Add(Student student)Di2015NewLine{Di2015NewLine    if( student == null )Di2015NewLine        throw new ArgumentNullException("student");Di2015NewLineDi2015NewLine    // create the new elementDi2015NewLine    ListNode insert = new ListNode() { Element = student };Di2015NewLineDi2015NewLine    if (_firstElement == null)Di2015NewLine    {Di2015NewLine        _firstElement = insert;Di2015NewLine        _lastElement = insert;Di2015NewLine        return;Di2015NewLine    }Di2015NewLineDi2015NewLine    // fix up Next referenceDi2015NewLine    ListNode last = _lastElement;Di2015NewLine    last.Next = insert;Di2015NewLine    _lastElement = insert;Di2015NewLine}Di2015NewLine
248899Di2015UniqueSeparatorforeach
248899Di2015UniqueSeparator// don't add this to StudentListDi2015NewLinevoid IterateOverList( ListNode current )Di2015NewLine{Di2015NewLine    while (current != null)Di2015NewLine    {Di2015NewLine        current = current.Next;Di2015NewLine    }Di2015NewLine}Di2015NewLine
248899Di2015UniqueSeparator// StudentList now implements IEnumerable<Student>Di2015NewLinepublic class StudentList : IEnumerable<Student>Di2015NewLine{Di2015NewLine    // previous code omittedDi2015NewLineDi2015NewLine    #region IEnumerable<Student> MembersDi2015NewLine    public IEnumerator<Student> GetEnumerator()Di2015NewLine    {Di2015NewLine        ListNode current = _firstElement;Di2015NewLineDi2015NewLine        while (current != null)Di2015NewLine        {Di2015NewLine            yield return current.Element;Di2015NewLine            current = current.Next;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region IEnumerable MembersDi2015NewLine    IEnumerator IEnumerable.GetEnumerator()Di2015NewLine    {Di2015NewLine        return GetEnumerator();Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLine}Di2015NewLine
248899Di2015UniqueSeparatoryield
248899Di2015UniqueSeparator_
248899Di2015UniqueSeparatorpublic class StudentDi2015NewLine{Di2015NewLine    private string _name;Di2015NewLine    private int _id;Di2015NewLine    private int _mark;Di2015NewLine    private char _letterGrade;Di2015NewLineDi2015NewLine    private Student()  // hide default ConstructorDi2015NewLine    { }Di2015NewLineDi2015NewLine    public Student(string name, int id, int mark, char letterGrade) // ConstructorDi2015NewLine    {Di2015NewLine        if( string.IsNullOrEmpty(name) )Di2015NewLine            throw new ArgumentNullException("name");Di2015NewLine        if( id <= 0 )Di2015NewLine            throw new ArgumentOutOfRangeException("id");Di2015NewLineDi2015NewLine        _name = name;Di2015NewLine        _id = id;Di2015NewLine        _mark = mark;Di2015NewLine        _letterGrade = letterGrade;Di2015NewLine    }Di2015NewLine    // read-only properties - compressed to 1 line for SO answer.Di2015NewLine    public string Name { get { return _name; } }Di2015NewLine    public int Id { get { return _id; } }Di2015NewLine    public int Mark { get { return _mark; } }Di2015NewLine    public char LetterGrade { get { return _letterGrade; } }Di2015NewLine}Di2015NewLine
248918Di2015UniqueSeparatorList<int> myList = new List<int>();Di2015NewLineDi2015NewLineConsole.Write(myList.GetType().IsGenericType && myList is IEnumerable);Di2015NewLine
248984Di2015UniqueSeparatorusing (SqlConnection con = new SqlConnection(Settings.Default.qlsdat_extensionsConnectionString))Di2015NewLineusing (SqlCommand cmd = new SqlCommand(reportDataSource, con))Di2015NewLine         {Di2015NewLine             cmd.CommandType = CommandType.StoredProcedure;Di2015NewLine             cmd.Parameters.Add("@Year", SqlDbType.Char, 4).Value = year;Di2015NewLine             cmd.Parameters.Add("@startDate", SqlDbType.DateTime).Value = start;Di2015NewLine             cmd.Parameters.Add("@endDate", SqlDbType.DateTime).Value = end;Di2015NewLine             cmd.Connection.Open();Di2015NewLineDi2015NewLine             DataSet dset = new DataSet();Di2015NewLine             new SqlDataAdapter(cmd).Fill(dset);Di2015NewLine             this.gridDataSource.DataSource = dset.Tables[0];Di2015NewLine         }Di2015NewLine
249014Di2015UniqueSeparatorvoid myfunction()Di2015NewLine{Di2015NewLine  {Di2015NewLine  // Open serial portDi2015NewLine     SerialPort port("COM1", 9600);Di2015NewLine     port.doTransfer(data);Di2015NewLine  } // Serial port gets closed here.Di2015NewLineDi2015NewLine  for(int i = 0; i < data.size(); i++)Di2015NewLine     doProcessData(data[i]);Di2015NewLine  etc...Di2015NewLine}Di2015NewLine
249042Di2015UniqueSeparator[TestMethod]Di2015NewLinepublic void Test_ThatMyEventIsRaised()Di2015NewLine{Di2015NewLine    List<string> receivedEvents = new List<string>();Di2015NewLine    MyClass myClass = new MyClass();Di2015NewLineDi2015NewLine    myClass.PropertyChanged += delegate(object sender, PropertyChangedEventArgs e)Di2015NewLine    {Di2015NewLine        receivedEvents.Add(e.PropertyName);Di2015NewLine    };Di2015NewLineDi2015NewLine    myClass.MyProperty = "testing";Di2015NewLine    Assert.AreEqual(2, receivedEvents.Count);Di2015NewLine    Assert.AreEqual("MyProperty", receivedEvents[0]);Di2015NewLine    Assert.AreEqual("MyOtherProperty", receivedEvents[1]);Di2015NewLine}Di2015NewLine
249202Di2015UniqueSeparatorclass CDi2015NewLine{Di2015NewLine  // Don't to expose this publicly so that Di2015NewLine  // no one can get behind your back and change Di2015NewLine  // anythingDi2015NewLine  private List<W> contentsW; Di2015NewLineDi2015NewLine  public void Add(W theW)Di2015NewLine  {Di2015NewLine    theW.Container = this;Di2015NewLine  }Di2015NewLineDi2015NewLine  public void Remove(W theW)Di2015NewLine  {Di2015NewLine    theW.Container = null;Di2015NewLine  }Di2015NewLineDi2015NewLine  #region Only to be used by WDi2015NewLine  internal void RemoveW(W theW)Di2015NewLine  {Di2015NewLine    // do nothing if C does not contain WDi2015NewLine    if (!contentsW.Contains(theW))Di2015NewLine       return; // or throw an exception if you consider this illegalDi2015NewLine    contentsW.Remove(theW);Di2015NewLine  }Di2015NewLineDi2015NewLine  internal void AddW(W theW)Di2015NewLine  {Di2015NewLine    if (!contentW.Contains(theW))Di2015NewLine      contentsW.Add(theW);Di2015NewLine  }Di2015NewLine  #endregionDi2015NewLine}Di2015NewLineDi2015NewLineclass WDi2015NewLine{Di2015NewLine  private C containerC;Di2015NewLineDi2015NewLine  public Container ContainerDi2015NewLine  {Di2015NewLine    get { return containerC; }Di2015NewLine    set Di2015NewLine    { Di2015NewLine      if (containerC != null)Di2015NewLine        containerC.RemoveW(this);Di2015NewLine      containerC = value; Di2015NewLine      if (containerC != null)Di2015NewLine        containerC.AddW(this);Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
249202Di2015UniqueSeparatorList<W>
249202Di2015UniqueSeparatorW1.Container = C1;Di2015NewLineW2.Container = C2;Di2015NewLine
249202Di2015UniqueSeparatorW2.Container = C1;Di2015NewLine
249202Di2015UniqueSeparatorW2.Container = null;Di2015NewLine
249300Di2015UniqueSeparatorPerson person = new Person();Di2015NewLineperson.Name = "John Smith";Di2015NewLine
249300Di2015UniqueSeparatorPerson person = new Person() { Name = "John Smith" };Di2015NewLine
249300Di2015UniqueSeparatorList<string> list = new List<string> { "foo", "bar" };Di2015NewLine
249300Di2015UniqueSeparatorpeople.Where(delegate(person) { return person.Age >= 21;);Di2015NewLine
249300Di2015UniqueSeparatorpeople.Where(person => person.Age >= 21 );Di2015NewLine
249300Di2015UniqueSeparatorpublic static class StringUtilitiesDi2015NewLine{Di2015NewLine    public static string Pluralize(this word)Di2015NewLine    {Di2015NewLine       ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
249300Di2015UniqueSeparatorstring word = "person";Di2015NewLineword.Pluralize(); // Returns "people"Di2015NewLine
249300Di2015UniqueSeparatorvar book = new { Title: "...", Cost: "..." };Di2015NewLine
249378Di2015UniqueSeparatorBinding binding = new Binding();Di2015NewLinebinding.ElementName = "listBox1";Di2015NewLinebinding.Path = new PropertyPath("SelectedItem");Di2015NewLinebinding.Mode = BindingMode.OneWay;Di2015NewLinetxtMyTextBox.SetBinding(TextBox.TextProperty, binding);Di2015NewLine
249408Di2015UniqueSeparator public List<XmlDocument> ChunkDocket(XmlDocument docket, int chunkSize)Di2015NewLine    {Di2015NewLine        List<XmlDocument> newDockets = new List<XmlDocument>();Di2015NewLine        //            Di2015NewLine        int orderCount = docket.SelectNodes("//docket/order").Count;Di2015NewLine        int chunkStart = 0;Di2015NewLine        XmlDocument newDocket = null;Di2015NewLine        XmlElement root = null;Di2015NewLine        XmlNodeList chunk = null;Di2015NewLineDi2015NewLine        while (chunkStart < orderCount)Di2015NewLine        {Di2015NewLine            newDocket = new XmlDocument();Di2015NewLine            root = newDocket.CreateElement("docket");Di2015NewLine            newDocket.AppendChild(root);Di2015NewLineDi2015NewLine            chunk = docket.SelectNodes(String.Format("//docket/order[position() > {0} and position() <= {1}]", chunkStart, chunkStart + chunkSize));Di2015NewLineDi2015NewLine            chunkStart += chunkSize;Di2015NewLineDi2015NewLine            XmlNode targetNode = null;Di2015NewLine            foreach (XmlNode c in chunk)Di2015NewLine            {Di2015NewLine                targetNode = newDocket.ImportNode(c, true);Di2015NewLine                root.AppendChild(targetNode);Di2015NewLine            }Di2015NewLineDi2015NewLine            newDockets.Add(newDocket);Di2015NewLine        } Di2015NewLineDi2015NewLine        return newDockets;Di2015NewLine    }Di2015NewLine
249519Di2015UniqueSeparatorprivate void textBox1_Validating(object sender, CancelEventArgs e)Di2015NewLine{Di2015NewLine    DateTime date;Di2015NewLine    if (!DateTime.TryParseExact(textBox1.Text, Di2015NewLine        "dd-MM-yyyy", Di2015NewLine        CultureInfo.CurrentCulture, Di2015NewLine        DateTimeStyles.None, Di2015NewLine        out date))Di2015NewLine    {Di2015NewLine        MessageBox.Show(textBox1.Text + " is not a valid date");Di2015NewLine        textBox1.Focus();Di2015NewLine        e.Cancel = true;Di2015NewLine        return;Di2015NewLine    }Di2015NewLine    if ((date < (DateTime) System.Data.SqlTypes.SqlDateTime.MinValue) ||Di2015NewLine        (date > (DateTime) System.Data.SqlTypes.SqlDateTime.MaxValue))Di2015NewLine    {Di2015NewLine        MessageBox.Show(textBox1.Text + " is out of range");Di2015NewLine        textBox1.Focus();Di2015NewLine        e.Cancel = true;Di2015NewLine        return;Di2015NewLine    }Di2015NewLine}Di2015NewLine
249532Di2015UniqueSeparatorAutoResetEvent processingCompleteEvent = new AutoResetEvent();Di2015NewLine
249532Di2015UniqueSeparator// call 3rd party componentDi2015NewLineprocessingCompleteEvent.WaitOne()Di2015NewLine
249532Di2015UniqueSeparator processingCompleteEvent.Set()Di2015NewLine
249624Di2015UniqueSeparatorvoid DeleteFile(string filePath);Di2015NewLinevoid DeleteFile(FileInfo file);Di2015NewLinevoid DeleteFile(DirectoryInfo directory, string fileName);Di2015NewLine
249624Di2015UniqueSeparatorpublic IList<Product> GetProductById(int productId) {...}Di2015NewLinepublic IList<Product> GetProductByCategory(Category category) {...}Di2015NewLinepublic IList<Product> GetProductByName(string Name ) {...}Di2015NewLine
249624Di2015UniqueSeparator// No collisions, even though both methods take int parametersDi2015NewLinepublic IList<Employee> GetEmployeesBySupervisor(int supervisorId);Di2015NewLinepublic IList<Employee> GetEmployeesByDepartment(int departmentId);Di2015NewLine
249624Di2015UniqueSeparator// Examples for GetEmployeesDi2015NewLineDi2015NewLinepublic IList<Employee> GetEmployeesBySupervisor(int supervisorId);Di2015NewLinepublic IList<Employee> GetEmployeesBySupervisor(Supervisor supervisor);Di2015NewLinepublic IList<Employee> GetEmployeesBySupervisor(Person supervisor);Di2015NewLineDi2015NewLinepublic IList<Employee> GetEmployeesByDepartment(int departmentId);Di2015NewLinepublic IList<Employee> GetEmployeesByDepartment(Department department);Di2015NewLineDi2015NewLine// Examples for GetProductDi2015NewLineDi2015NewLinepublic IList<Product> GetProductById(int productId) {...}Di2015NewLinepublic IList<Product> GetProductById(params int[] productId) {...}Di2015NewLineDi2015NewLinepublic IList<Product> GetProductByCategory(Category category) {...}Di2015NewLinepublic IList<Product> GetProductByCategory(IEnumerable<Category> category) {...}Di2015NewLinepublic IList<Product> GetProductByCategory(params Category[] category) {...}Di2015NewLine
249942Di2015UniqueSeparator// Gets the application pool collection from the server.Di2015NewLine[ModuleServiceMethod(PassThrough = true)]Di2015NewLinepublic ArrayList GetApplicationPoolCollection()Di2015NewLine{Di2015NewLine    // Use an ArrayList to transfer objects to the client.Di2015NewLine    ArrayList arrayOfApplicationBags = new ArrayList();Di2015NewLineDi2015NewLine    ServerManager serverManager = new ServerManager();Di2015NewLine    ApplicationPoolCollection applicationPoolCollection = serverManager.ApplicationPools;Di2015NewLine    foreach (ApplicationPool applicationPool in applicationPoolCollection)Di2015NewLine    {Di2015NewLine        PropertyBag applicationPoolBag = new PropertyBag();Di2015NewLine        applicationPoolBag[ServerManagerDemoGlobals.ApplicationPoolArray] = applicationPool;Di2015NewLine        arrayOfApplicationBags.Add(applicationPoolBag);Di2015NewLine        // If the applicationPool is stopped, restart it.Di2015NewLine        if (applicationPool.State == ObjectState.Stopped)Di2015NewLine        {Di2015NewLine            applicationPool.Start();Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    // CommitChanges to persist the changes to the ApplicationHost.config.Di2015NewLine    serverManager.CommitChanges();Di2015NewLine    return arrayOfApplicationBags;Di2015NewLine}Di2015NewLine
249986Di2015UniqueSeparatoronclick='<%# "PopulateTicketDiv(" +Eval("SHOW_ID") + " );" %>'Di2015NewLine
250057Di2015UniqueSeparator<?xml version="1.0" encoding="UTF-8"?>Di2015NewLine<test xmlns="http://tempuri.org/ns_old">Di2015NewLine    <child attrib="value">text</child>Di2015NewLine</test>Di2015NewLine
250057Di2015UniqueSeparator<?xml version="1.0" encoding="UTF-8"?>Di2015NewLine<xsl:stylesheetDi2015NewLine  version="1.0"Di2015NewLine  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"Di2015NewLine  xmlns:old="http://tempuri.org/ns_old"Di2015NewLine>Di2015NewLine  <xsl:output method="xml" version="1.0" Di2015NewLine    encoding="UTF-8" indent="yes" omit-xml-declaration="no" Di2015NewLine  />Di2015NewLineDi2015NewLine  <xsl:template match="node()|@*">Di2015NewLine    <xsl:copy>Di2015NewLine      <xsl:apply-templates select="node()|@*"/>Di2015NewLine    </xsl:copy>Di2015NewLine  </xsl:template>Di2015NewLineDi2015NewLine  <xsl:template match="old:*">Di2015NewLine    <xsl:element name="{local-name()}" namespace="http://tempuri.org/ns_new">Di2015NewLine      <xsl:apply-templates select="node()|@*"/>Di2015NewLine    </xsl:element>Di2015NewLine  </xsl:template>Di2015NewLineDi2015NewLine</xsl:stylesheet>Di2015NewLine
250057Di2015UniqueSeparator<?xml version="1.0" encoding="UTF-8"?>Di2015NewLine<test xmlns="http://tempuri.org/ns_new">Di2015NewLine  <child attrib="value">text</child>Di2015NewLine</test>Di2015NewLine
250057Di2015UniqueSeparatorhttp://tempuri.org/ns_old
250098Di2015UniqueSeparator1.to_s
250098Di2015UniqueSeparatorstr(1)
250098Di2015UniqueSeparatorString.valueOf(1)
250206Di2015UniqueSeparatorint ItemCount = (int) Math.Ceiling( (decimal)BrandCount / 4m );Di2015NewLine
250206Di2015UniqueSeparatorint
250206Di2015UniqueSeparatordecimal
250206Di2015UniqueSeparatordecimal
250206Di2015UniqueSeparatorint ItemCount = (int) Math.Ceiling( BrandCount / 4m );Di2015NewLine
250249Di2015UniqueSeparatorf
250400Di2015UniqueSeparatorpublic static DateTime UnixTimeStampToDateTime( double unixTimeStamp )Di2015NewLine{Di2015NewLine    // Unix timestamp is seconds past epochDi2015NewLine    System.DateTime dtDateTime = new DateTime(1970,1,1,0,0,0,0);Di2015NewLine    dtDateTime = dtDateTime.AddSeconds( unixTimeStamp ).ToLocalTime();Di2015NewLine    return dtDateTime;Di2015NewLine}Di2015NewLine
250400Di2015UniqueSeparatorpublic static DateTime JavaTimeStampToDateTime(double javaTimeStamp)Di2015NewLine{Di2015NewLine    // Java timestamp is millisecods past epochDi2015NewLine    System.DateTime dtDateTime = new DateTime(1970,1,1,0,0,0,0);Di2015NewLine    dtDateTime = dtDateTime.AddSeconds(Math.Round(javaTimeStamp / 1000)).ToLocalTime();Di2015NewLine    return dtDateTime;Di2015NewLine}Di2015NewLine
250442Di2015UniqueSeparatorpublic class MyClassDi2015NewLine
250442Di2015UniqueSeparatorpublic void MyMethod()Di2015NewLineprivate void myPrivateMethod()Di2015NewLine
250442Di2015UniqueSeparatorprivate int _count;Di2015NewLine
250442Di2015UniqueSeparatorint count;Di2015NewLine
250532Di2015UniqueSeparatorDTE.ActiveDocument.Language = "CSharp"Di2015NewLine
250541Di2015UniqueSeparatorif (disposing && (components != null))Di2015NewLine{Di2015NewLine     components.Dispose();Di2015NewLine}Di2015NewLine
250541Di2015UniqueSeparatorif (disposing && (components != null))Di2015NewLine{Di2015NewLine    _dataset.Dispose();Di2015NewLine    components.Dispose();Di2015NewLine}Di2015NewLine
250567Di2015UniqueSeparatorList<MyClass> list = new List();Di2015NewLine//add whatever you need to addDi2015NewLineDi2015NewLineMyClass min = list.Min();Di2015NewLineMyClass max = list.Max();Di2015NewLine
250587Di2015UniqueSeparatorPathGeometry geometry = new PathGeometry();Di2015NewLinegeometry.Figures.Add(new PathFigure(new Point(10, 10), new PathSegment[] { new LineSegment(new Point(10, 20), true), new LineSegment(new Point(20, 20), true) }, true));Di2015NewLineScaleTransform transform = new ScaleTransform(2, 2);Di2015NewLinePathGeometry geometryTransformed = Geometry.Combine(geometry, geometry, GeometryCombineMode.Intersect, transform);Di2015NewLine
250861Di2015UniqueSeparatorSUM-WHERE
251004Di2015UniqueSeparator<Style TargetType="{x:Type ComboBoxItem}">Di2015NewLine    <Setter Property="IsTabStop" Value="False"/>Di2015NewLine</Style>Di2015NewLine
251128Di2015UniqueSeparator    TextBox myCaption = (TextBox)ProjectPhotosList.EditItem.FindControl("ProjectPhotoCaptionTextBox");Di2015NewLineDi2015NewLine    int mykey = int.Parse(ProjectPhotosList.DataKeys[e.ItemIndex].Value.ToString());Di2015NewLineDi2015NewLine    if (myFile.HasFile)Di2015NewLine    {Di2015NewLineDi2015NewLine        //Get the posted fileDi2015NewLine        Stream fileDataStream = myFile.PostedFile.InputStream;Di2015NewLineDi2015NewLine        //Get length of fileDi2015NewLine        int fileLength = myFile.PostedFile.ContentLength;Di2015NewLineDi2015NewLine        //Create a byte array with file lengthDi2015NewLine        byte[] fileData = new byte[fileLength];Di2015NewLineDi2015NewLine        //Read the stream into the byte arrayDi2015NewLine        fileDataStream.Read(fileData, 0, fileLength);Di2015NewLineDi2015NewLine        //get the file typeDi2015NewLine        string fileType = myFile.PostedFile.ContentType;Di2015NewLineDi2015NewLine        //Open ConnectionDi2015NewLine        PHJamesDataContext db = new PHJamesDataContext();Di2015NewLine        //Find the Right RowDi2015NewLine        PHJProjectPhoto Newphoto = (from p in db.PHJProjectPhotosDi2015NewLine                                    where p.ProjectPhotoId == mykeyDi2015NewLine                                    select p).Single<PHJProjectPhoto>();Di2015NewLineDi2015NewLineDi2015NewLine        Newphoto.ProjectPhoto = fileData;Di2015NewLineDi2015NewLine        db.SubmitChanges();Di2015NewLine    }Di2015NewLine
251220Di2015UniqueSeparatorThread.CurrentThread.Priority = ThreadPriority.Lowest;Di2015NewLine
251238Di2015UniqueSeparatorusing System.Net;Di2015NewLineDi2015NewLineprivate bool CheckIfServer(IPAddress serverIP)Di2015NewLine{Di2015NewLine    // Get all addresses assigned to this machineDi2015NewLine    List<IPAddress> ipAddresses = new List<IPAddress>();Di2015NewLine    ipAddresses.AddRange(Dns.GetHostAddresses(Dns.GetHostName()));Di2015NewLineDi2015NewLine    // If desirable, also include the loopback adapterDi2015NewLine    ipAddresses.Add(IPAddress.Loopback);Di2015NewLineDi2015NewLine    // Detect if this machine contains the IP for the remote serverDi2015NewLine    // Note: This uses a Lambda Expression, which is only available .Net 3 or laterDi2015NewLine    return ipAddresses.Exists(i => i.ToString() == serverIP.ToString());Di2015NewLine}Di2015NewLine
251238Di2015UniqueSeparatorDns.GetHostAddresses("remote_host_address")Di2015NewLine
251269Di2015UniqueSeparatorWsdl.exe
251269Di2015UniqueSeparatorwsdl.exe
251269Di2015UniqueSeparatorwsdl.exe /protocol:HttpGet <url or path>Di2015NewLine
251269Di2015UniqueSeparatorhttp://www.w3.org/2001/XMLSchema
251285Di2015UniqueSeparatorSqlBulkCopy copier = new SqlBulkCopy(connectionString, SqlBulkCopyOptions.Default);Di2015NewLinecopier.BatchSize = 500; //# of rows to insert at a timeDi2015NewLinecopier.DestinationTableName = "dbo.MyTable";Di2015NewLinecopier.WriteToServer(myDataTable);Di2015NewLine
251314Di2015UniqueSeparator<ssctrl:photo ID="Photo" Key="<%# Eval("PageTemplatePK") %>" runat="server" />Di2015NewLine
251314Di2015UniqueSeparator<ssctrl:photo ID="Photo" Key='<%# Eval("PageTemplatePK") %>' runat="server" />Di2015NewLine
251364Di2015UniqueSeparatorcontext.Response.AddHeader("content-disposition", "attachment; filename=" + resource);Di2015NewLine
251411Di2015UniqueSeparator ControlCollection cool = new ControlCollection ();Di2015NewLine coll.Add(Page.Controls[0]);Di2015NewLine
251411Di2015UniqueSeparatorCheckBox[] boxes = new Checkbox[20];Di2015NewLinefor(int i =0; i< 20; ++i)Di2015NewLine{Di2015NewLine    boxes[i] = new CheckBox();Di2015NewLine    // do stuff hereDi2015NewLine    Page.Controls.Add(boxes[i]);Di2015NewLine}Di2015NewLine
251411Di2015UniqueSeparator<table>
251411Di2015UniqueSeparator<asp:placeholder>
251450Di2015UniqueSeparatorwhere
251450Di2015UniqueSeparatorif
251450Di2015UniqueSeparator||
251450Di2015UniqueSeparator(from creditCard in AvailableCreditCards Di2015NewLine where creditCard.BillToName.ToLowerInvariant().Contains(Di2015NewLine             txtFilter.Text.ToLowerInvariant())  Di2015NewLine || creditCard.CardNumber.().Contains(txtFilter.Text) Di2015NewLineorderby creditCard.BillToName Di2015NewLineselect creditCard)Di2015NewLine
251452Di2015UniqueSeparatorcontrol.DataSource = YourSource;Di2015NewLinecontrol.DataBind();Di2015NewLine
251619Di2015UniqueSeparatorKey
251619Di2015UniqueSeparator    class StringPairComparerDi2015NewLine        : IEqualityComparer<KeyValuePair<string, string>>Di2015NewLine    {Di2015NewLine        public bool Equals(KeyValuePair<string, string> x, KeyValuePair<string, string> y)Di2015NewLine        {Di2015NewLine            return x.Value == y.Value && x.Key == y.Key;Di2015NewLine        }Di2015NewLine        public int GetHashCode(KeyValuePair<string, string> obj)Di2015NewLine        {Di2015NewLine            return (obj.Key + obj.Value).GetHashCode();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
251663Di2015UniqueSeparatorTransactionScope
251668Di2015UniqueSeparatorthis
251668Di2015UniqueSeparatorthis
251668Di2015UniqueSeparatorthis
251668Di2015UniqueSeparatorlock(this)
251668Di2015UniqueSeparatorlock
251668Di2015UniqueSeparatorlock
251668Di2015UniqueSeparatorObject
251668Di2015UniqueSeparatorpublic class PersonDi2015NewLine{Di2015NewLine    public int Age { get; set;  }Di2015NewLine    public string Name { get; set; }Di2015NewLineDi2015NewLine    public void LockThis()Di2015NewLine    {Di2015NewLine        lock (this)Di2015NewLine        {Di2015NewLine            System.Threading.Thread.Sleep(10000);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var nancy = new Person {Name = "Nancy Drew", Age = 15};Di2015NewLine        var a = new Thread(nancy.LockThis);Di2015NewLine        a.Start();Di2015NewLine        var b = new Thread(Timewarp);Di2015NewLine        b.Start(nancy);Di2015NewLine        Thread.Sleep(10);Di2015NewLine        var anotherNancy = new Person { Name = "Nancy Drew", Age = 50 };Di2015NewLine        var c = new Thread(NameChange);Di2015NewLine        c.Start(anotherNancy);Di2015NewLine        a.Join();Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Timewarp(object subject)Di2015NewLine    {Di2015NewLine        var person = subject as Person;Di2015NewLine        if (person == null) throw new ArgumentNullException("subject");Di2015NewLine        // A lock does not make the object read-only.Di2015NewLine        lock (person.Name)Di2015NewLine        {Di2015NewLine            while (person.Age <= 23)Di2015NewLine            {Di2015NewLine                // There will be a lock on 'person' due to the LockThis method running in another threadDi2015NewLine                if (Monitor.TryEnter(person, 10) == false)Di2015NewLine                {Di2015NewLine                    Console.WriteLine("'this' person is locked!");Di2015NewLine                }Di2015NewLine                else Monitor.Exit(person);Di2015NewLine                person.Age++;Di2015NewLine                if(person.Age == 18)Di2015NewLine                {Di2015NewLine                    // Changing the 'person.Name' value doesn't change the lock...Di2015NewLine                    person.Name = "Nancy Smith";Di2015NewLine                }Di2015NewLine                Console.WriteLine("{0} is {1} years old.", person.Name, person.Age);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    static void NameChange(object subject)Di2015NewLine    {Di2015NewLine        var person = subject as Person;Di2015NewLine        if (person == null) throw new ArgumentNullException("subject");Di2015NewLine        // You should avoid locking on strings, since they are immutable.Di2015NewLine        if (Monitor.TryEnter(person.Name, 30) == false)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Failed to obtain lock on 50 year old Nancy, because Timewarp(object) locked on string \\"Nancy Drew\\".");Di2015NewLine        }Di2015NewLine        else Monitor.Exit(person.Name);Di2015NewLineDi2015NewLine        if (Monitor.TryEnter("Nancy Drew", 30) == false)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Failed to obtain lock using 'Nancy Drew' literal, locked by 'person.Name' since both are the same object thanks to inlining!");Di2015NewLine        }Di2015NewLine        else Monitor.Exit("Nancy Drew");Di2015NewLine        if (Monitor.TryEnter(person.Name, 10000))Di2015NewLine        {Di2015NewLine            string oldName = person.Name;Di2015NewLine            person.Name = "Nancy Callahan";Di2015NewLine            Console.WriteLine("Name changed from '{0}' to '{1}'.", oldName, person.Name);Di2015NewLine        }Di2015NewLine        else Monitor.Exit(person.Name);Di2015NewLine    }Di2015NewLine}Di2015NewLine
251668Di2015UniqueSeparator'this' person is locked!Di2015NewLineNancy Drew is 16 years old.Di2015NewLine'this' person is locked!Di2015NewLineNancy Drew is 17 years old.Di2015NewLineFailed to obtain lock on 50 year old Nancy, because Timewarp(object) locked on string "Nancy Drew".Di2015NewLine'this' person is locked!Di2015NewLineNancy Smith is 18 years old.Di2015NewLine'this' person is locked!Di2015NewLineNancy Smith is 19 years old.Di2015NewLine'this' person is locked!Di2015NewLineNancy Smith is 20 years old.Di2015NewLineFailed to obtain lock using 'Nancy Drew' literal, locked by 'person.Name' since both are the same object thanks to inlining!Di2015NewLine'this' person is locked!Di2015NewLineNancy Smith is 21 years old.Di2015NewLine'this' person is locked!Di2015NewLineNancy Smith is 22 years old.Di2015NewLine'this' person is locked!Di2015NewLineNancy Smith is 23 years old.Di2015NewLine'this' person is locked!Di2015NewLineNancy Smith is 24 years old.Di2015NewLineName changed from 'Nancy Drew' to 'Nancy Callahan'.Di2015NewLine
251827Di2015UniqueSeparatorusing System;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing System.Reflection;Di2015NewLineinterface IFooDi2015NewLine{Di2015NewLine    void AAA(); // just to push Bar to index 1Di2015NewLine    [Description("abc")]Di2015NewLine    void Bar();Di2015NewLine}Di2015NewLineclass Foo : IFooDi2015NewLine{Di2015NewLine    public void AAA() { } // just to satisfy interfaceDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        IFoo foo = new Foo();Di2015NewLine        foo.Bar();Di2015NewLine    }Di2015NewLine    void IFoo.Bar()Di2015NewLine    {Di2015NewLine        GetAttribute();Di2015NewLine    }Di2015NewLineDi2015NewLine    void GetAttribute()Di2015NewLine    { // simplified just to obtain the [Description]Di2015NewLineDi2015NewLine        StackTrace stackTrace = new StackTrace();Di2015NewLine        StackFrame stackFrame = stackTrace.GetFrame(1);Di2015NewLine        MethodBase classMethod = stackFrame.GetMethod();Di2015NewLine        InterfaceMapping map = GetType().GetInterfaceMap(typeof(IFoo));Di2015NewLine        int index = Array.IndexOf(map.TargetMethods, classMethod);Di2015NewLine        MethodBase iMethod = map.InterfaceMethods[index];Di2015NewLine        string desc = ((DescriptionAttribute)Attribute.GetCustomAttribute(iMethod, typeof(DescriptionAttribute))).Description;Di2015NewLine    }Di2015NewLine}Di2015NewLine
251853Di2015UniqueSeparatordouble framesPerSecond;Di2015NewLineBitmap[] imagesToDisplay;     // add the desired bitmaps to this arrayDi2015NewLineTimer playbackTimer;Di2015NewLineDi2015NewLineint currentImageIndex;Di2015NewLinePictureBox displayArea;Di2015NewLineDi2015NewLine(...)Di2015NewLineDi2015NewLinecurrentImageIndex = 0;Di2015NewLineplaybackTimer.Interval = 1000 / framesPerSecond;Di2015NewLineplaybackTimer.AutoReset = true;Di2015NewLineplaybackTimer.Elapsed += new ElapsedEventHandler(playbackNextFrame);Di2015NewLineplaybackTimer.Start();Di2015NewLineDi2015NewLine(...)Di2015NewLineDi2015NewLinevoid playbackNextFrame(object sender, ElapsedEventArgs e)Di2015NewLine{Di2015NewLine    if (currentImageIndex + 1 >= imagesToDisplay.Length)Di2015NewLine    {Di2015NewLine            playbackTimer.Stop();Di2015NewLineDi2015NewLine            return;Di2015NewLine    }Di2015NewLineDi2015NewLine    displayArea.Image = imagesToDisplay[currentImageIndex++];Di2015NewLine}Di2015NewLine
251897Di2015UniqueSeparator%Label%
251897Di2015UniqueSeparator(?<Label>.*?)
251897Di2015UniqueSeparator%Artist%-%Album%-%Track%-%Title%.mp3Di2015NewLine
251897Di2015UniqueSeparator(?<Artist>.*?)-(?<Album>.*?)-(?<Track>.*?)-(?<Title>.*?)\\.mp3Di2015NewLine
251897Di2015UniqueSeparatorDictinary<string,string> match_filename(string rule, string filename) {Di2015NewLine    Regex tag_re = new Regex(@'%(\\w+)%');Di2015NewLine    string pattern = tag_re.Replace(Regex.escape(rule), @'(?<$1>.*?)');Di2015NewLine    Regex filename_re = new Regex(pattern);Di2015NewLine    Match match = filename_re.Match(filename);Di2015NewLineDi2015NewLine    Dictionary<string,string> tokens =Di2015NewLine            new Dictionary<string,string>();Di2015NewLine    for (int counter = 1; counter < match.Groups.Count; counter++)Di2015NewLine    {Di2015NewLine        string group_name = filename_re.GroupNameFromNumber(counter);Di2015NewLine        tokens.Add(group_name, m.Groups[counter].Value);Di2015NewLine    }Di2015NewLine    return tokens;Di2015NewLine}Di2015NewLine
251897Di2015UniqueSeparator%Artist%%Album%
251897Di2015UniqueSeparator(?<Artist>.*?)(?<Album>.*?)
251897Di2015UniqueSeparator.*?.*?
251897Di2015UniqueSeparator%Track%
251897Di2015UniqueSeparator(?<Track>\\d+)
251897Di2015UniqueSeparatorTrack
251904Di2015UniqueSeparatorconst
251929Di2015UniqueSeparatorstring s = ...Di2015NewLinenew List<string>(s.Split(....));Di2015NewLine
251991Di2015UniqueSeparatorAssert.IsFalse(guid == Guid.Empty);Di2015NewLine
251991Di2015UniqueSeparatorAssert.IsTrue(guid == Guid.Empty);Di2015NewLine
251994Di2015UniqueSeparatorclass IntListConverter : TypeConverter {Di2015NewLine    public static List<int> FromString(string value) {Di2015NewLine       return new List<int>(Di2015NewLine          valueDi2015NewLine           .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)Di2015NewLine           .Select(s => Convert.ToInt32(s))Di2015NewLine       );Di2015NewLine    }Di2015NewLineDi2015NewLine    public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) {Di2015NewLine        if (destinationType == typeof(InstanceDescriptor)) {Di2015NewLine            List<int> list = (List<int>)value;Di2015NewLine            return new InstanceDescriptor(this.GetType().GetMethod("FromString"),Di2015NewLine                new object[] { string.Join(",", list.Select(i => i.ToString()).ToArray()) }Di2015NewLine            );Di2015NewLine        }Di2015NewLine        return base.ConvertTo(context, culture, value, destinationType);Di2015NewLine    }Di2015NewLine}Di2015NewLine
251998Di2015UniqueSeparatorddlCustomer.Items.Insert(0, "SELECT");Di2015NewLine
252015Di2015UniqueSeparator((Global)this.Context.ApplicationInstance).RolesDi2015NewLine
252301Di2015UniqueSeparator[DataContract]Di2015NewLinepublic class TestClassDi2015NewLine{Di2015NewLineDi2015NewLine    private static readonly DateTime unixEpoch = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);Di2015NewLineDi2015NewLine    [IgnoreDataMember]Di2015NewLine    public DateTime MyDateTime { get; set; }Di2015NewLineDi2015NewLine    [DataMember(Name = "MyDateTime")]Di2015NewLine    private int MyDateTimeTicksDi2015NewLine    {Di2015NewLine        get { return (int)(this.MyDateTime - unixEpoch).TotalSeconds; }Di2015NewLine        set { this.MyDateTime = unixEpoch.AddSeconds(Convert.ToInt32(value)); }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
252343Di2015UniqueSeparatorvar product = vals.Aggregate(1, (acc, val) => acc * val);Di2015NewLine
252343Di2015UniqueSeparator1
252343Di2015UniqueSeparatoracc
252343Di2015UniqueSeparatorval
252343Di2015UniqueSeparatoracc
252343Di2015UniqueSeparator(1, 1) => 1Di2015NewLine(1, 3) => 3Di2015NewLine(3, 5) => 15Di2015NewLine
252389Di2015UniqueSeparatorTcpClient _tcpClient = new TcpClient("host", 110);Di2015NewLineDi2015NewLineStreamReader reader = Di2015NewLine   new StreamReader(new System.Net.Security.SslStream(_tcpClient.GetStream(), true));Di2015NewLineDi2015NewLineConsole.WriteLine(reader.ReadToEnd());Di2015NewLine
252426Di2015UniqueSeparatorpublic static class AsynchronousQueryExecutorDi2015NewLine{Di2015NewLine    public static void Call<T>(IEnumerable<T> query, Action<IEnumerable<T>> callback, Action<Exception> errorCallback)Di2015NewLine    {Di2015NewLine        Func<IEnumerable<T>, IEnumerable<T>> func =Di2015NewLine            new Func<IEnumerable<T>, IEnumerable<T>>(InnerEnumerate<T>);Di2015NewLine        IEnumerable<T> result = null;Di2015NewLine        IAsyncResult ar = func.BeginInvoke(Di2015NewLine                            query,Di2015NewLine                            new AsyncCallback(delegate(IAsyncResult arr)Di2015NewLine                            {Di2015NewLine                                tryDi2015NewLine                                {Di2015NewLine                                    result = ((Func<IEnumerable<T>, IEnumerable<T>>)((AsyncResult)arr).AsyncDelegate).EndInvoke(arr);Di2015NewLine                                }Di2015NewLine                                catch (Exception ex)Di2015NewLine                                {Di2015NewLine                                    if (errorCallback != null)Di2015NewLine                                    {Di2015NewLine                                        errorCallback(ex);Di2015NewLine                                    }Di2015NewLine                                    return;Di2015NewLine                                }Di2015NewLine                                //errors from inside here are the callbacks problemDi2015NewLine                                //I think it would be confusing to report themDi2015NewLine                                callback(result);Di2015NewLine                            }),Di2015NewLine                            null);Di2015NewLine    }Di2015NewLine    private static IEnumerable<T> InnerEnumerate<T>(IEnumerable<T> query)Di2015NewLine    {Di2015NewLine        foreach (var item in query) //the method hangs here while the query executesDi2015NewLine        {Di2015NewLine            yield return item;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
252426Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLineDi2015NewLine    public static void Main(string[] args)Di2015NewLine    {Di2015NewLine        //this could be your linq queryDi2015NewLine        var qry = TestSlowLoadingEnumerable();Di2015NewLineDi2015NewLine        //We begin the call and give it our callback delegateDi2015NewLine        //and a delegate to an error handlerDi2015NewLine        AsynchronousQueryExecutor.Call(qry, HandleResults, HandleError);Di2015NewLineDi2015NewLine        Console.WriteLine("Call began on seperate thread, execution continued");Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void HandleResults(IEnumerable<int> results)Di2015NewLine    {Di2015NewLine        //the results are available in hereDi2015NewLine        foreach (var item in results)Di2015NewLine        {Di2015NewLine            Console.WriteLine(item);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void HandleError(Exception ex)Di2015NewLine    {Di2015NewLine        Console.WriteLine("error");Di2015NewLine    }Di2015NewLineDi2015NewLine    //just a sample lazy loading enumerableDi2015NewLine    public static IEnumerable<int> TestSlowLoadingEnumerable()Di2015NewLine    {Di2015NewLine        Thread.Sleep(5000);Di2015NewLine        foreach (var i in new int[] { 1, 2, 3, 4, 5, 6 })Di2015NewLine        {Di2015NewLine            yield return i;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
252526Di2015UniqueSeparatorupdate myTable set myColumn.Write(@data, @offset, @length) where someid = @someIdDi2015NewLine
252556Di2015UniqueSeparator    public class RangeValidatorEx : BaseValidatorDi2015NewLine{Di2015NewLineDi2015NewLine    protected override void AddAttributesToRender(System.Web.UI.HtmlTextWriter writer)Di2015NewLine    {Di2015NewLine        base.AddAttributesToRender(writer);Di2015NewLineDi2015NewLine        if (base.RenderUplevel)Di2015NewLine        {Di2015NewLine            string clientId = this.ClientID;Di2015NewLineDi2015NewLine            // The attribute evaluation funciton holds the name of client-side js function.Di2015NewLine            Page.ClientScript.RegisterExpandoAttribute(clientId, "evaluationfunction", "RangeValidatorEx");Di2015NewLineDi2015NewLine            Page.ClientScript.RegisterExpandoAttribute(clientId, "Range1High", this.Range1High.ToString());Di2015NewLine            Page.ClientScript.RegisterExpandoAttribute(clientId, "Range2High", this.Range2High.ToString());Di2015NewLine            Page.ClientScript.RegisterExpandoAttribute(clientId, "Range1Low", this.Range1Low.ToString());Di2015NewLine            Page.ClientScript.RegisterExpandoAttribute(clientId, "Range2Low", this.Range2Low.ToString());Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    // Will be invoked to validate the parameters Di2015NewLine    protected override bool ControlPropertiesValid()Di2015NewLine    {Di2015NewLine        if ((Range1High <= 0) || (this.Range1Low <= 0) || (this.Range2High <= 0) || (this.Range2Low <= 0))Di2015NewLine            throw new HttpException("The range values cannot be less than zero");Di2015NewLineDi2015NewLine        return base.ControlPropertiesValid();Di2015NewLine    }Di2015NewLineDi2015NewLine    // used to validation on server-sideDi2015NewLine    protected override bool EvaluateIsValid()Di2015NewLine    {Di2015NewLine        int code;Di2015NewLine        if (!Int32.TryParse(base.GetControlValidationValue(ControlToValidate), out code))Di2015NewLine            return false;Di2015NewLineDi2015NewLine        if ((code < this.Range1High && code > this.Range1Low) || (code < this.Range2High && code > this.Range2Low))Di2015NewLine            return true;Di2015NewLine        elseDi2015NewLine            return false;Di2015NewLine    }Di2015NewLineDi2015NewLine    // inject the client-side script to pageDi2015NewLine    protected override void OnPreRender(EventArgs e)Di2015NewLine    {Di2015NewLine           base.OnPreRender(e);Di2015NewLineDi2015NewLine           if (base.RenderUplevel)Di2015NewLine           {Di2015NewLine               this.Page.ClientScript.RegisterClientScriptBlock(this.GetType(), "RangeValidatorEx", RangeValidatorExJs(),true);Di2015NewLine           }Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    string RangeValidatorExJs()Di2015NewLine    {Di2015NewLine        string js;Di2015NewLine        // the validator will be rendered as a SPAN tag on the client-side and it will passed to the validation function.Di2015NewLine        js = "function RangeValidatorEx(val){ "Di2015NewLine        + " var code=document.getElementById(val.controltovalidate).value; "Di2015NewLine        + " if ((code < rangeValidatorCtrl.Range1High && code > rangeValidatorCtrl.Range1Low ) || (code < rangeValidatorCtrl.Range2High && code > rangeValidatorCtrl.Range2Low)) return true; else return false;}";Di2015NewLine        return js;Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    public int Range1LowDi2015NewLine    {Di2015NewLine        get {Di2015NewLine            object obj2 = this.ViewState["Range1Low"];Di2015NewLineDi2015NewLine            if (obj2 != null)Di2015NewLine                return System.Convert.ToInt32(obj2);Di2015NewLineDi2015NewLine            return 0;Di2015NewLineDi2015NewLine        }Di2015NewLine        set { this.ViewState["Range1Low"] = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public int Range1HighDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            object obj2 = this.ViewState["Range1High"];Di2015NewLineDi2015NewLine            if (obj2 != null)Di2015NewLine                return System.Convert.ToInt32(obj2);Di2015NewLineDi2015NewLine            return 0;Di2015NewLineDi2015NewLine        }Di2015NewLine        set { this.ViewState["Range1High"] = value; }Di2015NewLine    }Di2015NewLine    public int Range2LowDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            object obj2 = this.ViewState["Range2Low"];Di2015NewLineDi2015NewLine            if (obj2 != null)Di2015NewLine                return System.Convert.ToInt32(obj2);Di2015NewLineDi2015NewLine            return 0;Di2015NewLineDi2015NewLine        }Di2015NewLine        set { this.ViewState["Range2Low"] = value; }Di2015NewLine    }Di2015NewLine    public int Range2HighDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            object obj2 = this.ViewState["Range2High"];Di2015NewLineDi2015NewLine            if (obj2 != null)Di2015NewLine                return System.Convert.ToInt32(obj2);Di2015NewLineDi2015NewLine            return 0;Di2015NewLineDi2015NewLine        }Di2015NewLine        set { this.ViewState["Range2High"] = value; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
252682Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    public void MethodWithParams(object param1, params int[] param2) Di2015NewLine    {            Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var method = typeof(Program).GetMethod("MethodWithParams");Di2015NewLine        var @params = method.GetParameters();Di2015NewLine        foreach (var param in @params) Di2015NewLine        {Di2015NewLine            Console.WriteLine(param.IsDefined(typeof(ParamArrayAttribute), false));Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
252745Di2015UniqueSeparatorpublic extensible class MyClassDi2015NewLine
252745Di2015UniqueSeparatorpublic sealed class MyClassDi2015NewLine
253098Di2015UniqueSeparatorpi.CreateNoWindow = true;Di2015NewLine
253150Di2015UniqueSeparatorInvoke
253150Di2015UniqueSeparatorBeginInvoke
253150Di2015UniqueSeparatorDelegate
253150Di2015UniqueSeparatorMethodInvoker
253150Di2015UniqueSeparatorAction
253150Di2015UniqueSeparatorcontrol.Invoke((MethodInvoker) delegate {this.Text = "Hi";});Di2015NewLine
253150Di2015UniqueSeparatorstring message = "Hi";Di2015NewLinecontrol.Invoke((MethodInvoker) delegate {this.Text = message;});Di2015NewLine
253150Di2015UniqueSeparatorpublic static void Invoke(this Control control, Action action)Di2015NewLine{Di2015NewLine    control.Invoke((Delegate)action);Di2015NewLine}Di2015NewLine
253150Di2015UniqueSeparatorthis.Invoke(delegate { this.Text = "hi"; });Di2015NewLine// or simce we are using C# 3.0Di2015NewLinethis.Invoke(() => { this.Text = "hi"; });Di2015NewLine
253150Di2015UniqueSeparatorBeginInvoke
253150Di2015UniqueSeparatorpublic static void BeginInvoke(this Control control, Action action)Di2015NewLine{Di2015NewLine    control.BeginInvoke((Delegate)action);Di2015NewLine}Di2015NewLine
253150Di2015UniqueSeparatorForm
253461Di2015UniqueSeparatorfsutil behavior set disablelastaccess 1Di2015NewLine
253461Di2015UniqueSeparatorProcess.Start("fsutil", "behavior set disablelastaccess 1").WaitForExit();Di2015NewLine
253473Di2015UniqueSeparatorIDynamicMetaObject
253473Di2015UniqueSeparatorDynamicObject
253473Di2015UniqueSeparatordocument.RootElement.Person[5].Name["Attribute"]
253619Di2015UniqueSeparatorBeginGetRequestStream
253649Di2015UniqueSeparatorprivate static void WriteStartupInfo()Di2015NewLine{Di2015NewLine    Trace.TraceInformation(GetStartupInfoString());Di2015NewLine}Di2015NewLineDi2015NewLineprivate static String GetStartupInfoString() {Di2015NewLine    Settings settings = Settings.Default;Di2015NewLine    TimeSpan interval = settings.CleanupInterval;Di2015NewLine    TimeSpan span = settings.ExpiryTimeSpan;Di2015NewLine    string url = settings.TeamFoundationServerUrl; Di2015NewLine    StringBuilder sb = new StringBuilder();Di2015NewLine    sb.Append(String.Format("CleanupInterval:{0}{1}", interval,Environment.NewLine));Di2015NewLine    sb.Append(String.Format("ExpiryTimeSpan:{0}{1}", span,Environment.NewLine));Di2015NewLine    sb.Append(String.Format("TeamFoundationServerUrl:{0}{1}", url,Environment.NewLine));Di2015NewLine    return sb.ToString();Di2015NewLine}Di2015NewLine
253776Di2015UniqueSeparatorpublic class ADi2015NewLine{Di2015NewLine    public event EventHandler SomeEvent;Di2015NewLineDi2015NewLine    public void someMethod()Di2015NewLine    {Di2015NewLine        OnSomeEvent();Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void OnSomeEvent()Di2015NewLine    {Di2015NewLine        EventHandler handler = SomeEvent;Di2015NewLine        if(handler != null)Di2015NewLine            handler(this, someArgs);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class B : ADi2015NewLine{Di2015NewLine    public void someOtherMethod()Di2015NewLine    {Di2015NewLine        OnSomeEvent();Di2015NewLine    }Di2015NewLine}Di2015NewLine
253795Di2015UniqueSeparatorvar q = from t in dc.ThemesDi2015NewLine        join g in dc.Groups on t.K equals g.ThemeK into groupsDi2015NewLine        select new { t.Name, Groups=groups };Di2015NewLine
253945Di2015UniqueSeparatordataGridView1.DataSource = typeof(List); Di2015NewLinedataGridView1.DataSource = itemStates;Di2015NewLine
254001Di2015UniqueSeparatorSELECT TOP 1000 * FROM tblWHATEVERDi2015NewLine
254001Di2015UniqueSeparatorSELECT * FROM tblWHATEVER WHERE ROWNUM <= 1000Di2015NewLine
254012Di2015UniqueSeparatorstring s = "A,B,C";Di2015NewLinestring replaced = "'"+s.Replace(",", "','")+"'";Di2015NewLine
254139Di2015UniqueSeparator[EditorBrowsable(EditorBrowsableState.Never)]Di2015NewLinepublic static class ListViewExtensionsDi2015NewLine{Di2015NewLine    [StructLayout(LayoutKind.Sequential)]Di2015NewLine    public struct HDITEMDi2015NewLine    {Di2015NewLine        public Mask mask;Di2015NewLine        public int cxy;Di2015NewLine        [MarshalAs(UnmanagedType.LPTStr)] public string pszText;Di2015NewLine        public IntPtr hbm;Di2015NewLine        public int cchTextMax;Di2015NewLine        public Format fmt;Di2015NewLine        public IntPtr lParam;Di2015NewLine        // _WIN32_IE >= 0x0300 Di2015NewLine        public int iImage;Di2015NewLine        public int iOrder;Di2015NewLine        // _WIN32_IE >= 0x0500Di2015NewLine        public uint type;Di2015NewLine        public IntPtr pvFilter;Di2015NewLine        // _WIN32_WINNT >= 0x0600Di2015NewLine        public uint state;Di2015NewLineDi2015NewLine        [Flags]Di2015NewLine        public enum MaskDi2015NewLine        {Di2015NewLine            Format = 0x4,       // HDI_FORMATDi2015NewLine        };Di2015NewLineDi2015NewLine        [Flags]Di2015NewLine        public enum FormatDi2015NewLine        {Di2015NewLine            SortDown = 0x200,   // HDF_SORTDOWNDi2015NewLine            SortUp = 0x400,     // HDF_SORTUPDi2015NewLine        };Di2015NewLine    };Di2015NewLineDi2015NewLine    public const int LVM_FIRST = 0x1000;Di2015NewLine    public const int LVM_GETHEADER = LVM_FIRST + 31;Di2015NewLineDi2015NewLine    public const int HDM_FIRST = 0x1200;Di2015NewLine    public const int HDM_GETITEM = HDM_FIRST + 11;Di2015NewLine    public const int HDM_SETITEM = HDM_FIRST + 12;Di2015NewLineDi2015NewLine    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]Di2015NewLine    public static extern IntPtr SendMessage(IntPtr hWnd, UInt32 msg, IntPtr wParam, IntPtr lParam);Di2015NewLineDi2015NewLine    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]Di2015NewLine    public static extern IntPtr SendMessage(IntPtr hWnd, UInt32 msg, IntPtr wParam, ref HDITEM lParam);Di2015NewLineDi2015NewLine    public static void SetSortIcon(this ListView listViewControl, int columnIndex, SortOrder order)Di2015NewLine    {Di2015NewLine        IntPtr columnHeader = SendMessage(listViewControl.Handle, LVM_GETHEADER, IntPtr.Zero, IntPtr.Zero);Di2015NewLine        for (int columnNumber = 0; columnNumber <= listViewControl.Columns.Count - 1; columnNumber++)Di2015NewLine        {Di2015NewLine            var columnPtr = new IntPtr(columnNumber);Di2015NewLine            var item = new HDITEMDi2015NewLine                {Di2015NewLine                    mask = HDITEM.Mask.FormatDi2015NewLine                };Di2015NewLineDi2015NewLine            if (SendMessage(columnHeader, HDM_GETITEM, columnPtr, ref item) == IntPtr.Zero)Di2015NewLine            {Di2015NewLine                throw new Win32Exception();Di2015NewLine            }Di2015NewLineDi2015NewLine            if (order != SortOrder.None && columnNumber == columnIndex)Di2015NewLine            {Di2015NewLine                switch (order)Di2015NewLine                {Di2015NewLine                    case SortOrder.Ascending:Di2015NewLine                        item.fmt &= ~HDITEM.Format.SortDown;Di2015NewLine                        item.fmt |= HDITEM.Format.SortUp;Di2015NewLine                        break;Di2015NewLine                    case SortOrder.Descending:Di2015NewLine                        item.fmt &= ~HDITEM.Format.SortUp;Di2015NewLine                        item.fmt |= HDITEM.Format.SortDown;Di2015NewLine                        break;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                item.fmt &= ~HDITEM.Format.SortDown & ~HDITEM.Format.SortUp;Di2015NewLine            }Di2015NewLineDi2015NewLine            if (SendMessage(columnHeader, HDM_SETITEM, columnPtr, ref item) == IntPtr.Zero)Di2015NewLine            {Di2015NewLine                throw new Win32Exception();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
254139Di2015UniqueSeparatormyListView.SetSortIcon(0, SortOrder.Ascending);Di2015NewLine
254139Di2015UniqueSeparatorfmt
254139Di2015UniqueSeparatorHDF_SORTDOWN
254139Di2015UniqueSeparatorHDF_SORTUP
254221Di2015UniqueSeparatorpublic static class MyHelperDi2015NewLine{Di2015NewLine    public static V GetValueOrDefault<K, V>(this IDictionary<K, V> dic, Di2015NewLine                                            K key, Di2015NewLine                                            V defaultVal = default(V))Di2015NewLine    {Di2015NewLine        V ret;Di2015NewLine        bool found = dic.TryGetValue(key, out ret);Di2015NewLine        if (found) { return ret; }Di2015NewLine        return defaultVal;Di2015NewLine    }Di2015NewLine    void Example()Di2015NewLine    {Di2015NewLine        var dict = new Dictionary<int, string>();Di2015NewLine        dict.GetValueOrDefault(42, "default");Di2015NewLine    }Di2015NewLine}Di2015NewLine
254241Di2015UniqueSeparatorScreen.FromControl
254241Di2015UniqueSeparatorScreen.FromPoint
254241Di2015UniqueSeparatorScreen.FromRectangle
254241Di2015UniqueSeparatorclass MyForm : FormDi2015NewLine{Di2015NewLine  public Rectangle GetScreen()Di2015NewLine  {Di2015NewLine    return Screen.FromControl(this).Bounds;Di2015NewLine  }Di2015NewLine}Di2015NewLine
254241Di2015UniqueSeparatorstatic class ExtensionsForWPFDi2015NewLine{Di2015NewLine  public static System.Windows.Forms.Screen GetScreen(this Window window)Di2015NewLine  {Di2015NewLine    return System.Windows.Forms.Screen.FromHandle(new WindowInteropHelper(window).Handle);Di2015NewLine  }Di2015NewLine}Di2015NewLine
254455Di2015UniqueSeparatorvar subquery =Di2015NewLine  dc.GroupsDi2015NewLine  .OrderBy(g => g.TotalMembers)Di2015NewLine  .Take(5);Di2015NewLineDi2015NewLinevar query =Di2015NewLine  dc.ThemesDi2015NewLine  .Join(subquery, t => t.K, g => g.ThemeK, (t, g) => newDi2015NewLine  {Di2015NewLine    ThemeName = t.Name, GroupName = g.NameDi2015NewLine  }Di2015NewLine  );Di2015NewLine
254488Di2015UniqueSeparatorobject
254488Di2015UniqueSeparatornull
254488Di2015UniqueSeparatorpublic void GetParameterValue<T>(out T destination)Di2015NewLine{Di2015NewLine    object paramVal = "Blah";Di2015NewLine    destination = default(T);Di2015NewLine    destination = Convert.ChangeType(paramVal, typeof(T));Di2015NewLine}Di2015NewLine
254488Di2015UniqueSeparatorT
254664Di2015UniqueSeparatorReverse()
254664Di2015UniqueSeparatorpublic static IEnumerable<T> OrderRandomly<T>(this IEnumerable<T> sequence)Di2015NewLine{Di2015NewLine    Random random = new Random();Di2015NewLine    List<T> copy = sequence.ToList();Di2015NewLineDi2015NewLine    while (copy.Count > 0)Di2015NewLine    {Di2015NewLine        int index = random.Next(copy.Count);Di2015NewLine        yield return copy[index];Di2015NewLine        copy.RemoveAt(index);Di2015NewLine    }Di2015NewLine}Di2015NewLine
254664Di2015UniqueSeparatorforeach (int n in Enumerable.Range(1, 10).OrderRandomly())Di2015NewLine    Console.WriteLine(n);Di2015NewLine
254674Di2015UniqueSeparatorvoid Foo(int @string)Di2015NewLine
254861Di2015UniqueSeparatorSystem.Random rnd = new System.Random();Di2015NewLineIEnumerable<int> numbers = Enumerable.Range(1, 100).OrderBy(r => rnd.Next());Di2015NewLine
254867Di2015UniqueSeparatorif (something == true) DoSomething();Di2015NewLine
254894Di2015UniqueSeparatorXmlSerializer
254894Di2015UniqueSeparatorWriteEndElement()
254894Di2015UniqueSeparatorXmlWriter
254894Di2015UniqueSeparator<tag/>
254894Di2015UniqueSeparatorWriteFullEndElement()
254894Di2015UniqueSeparatorXmlTextWriter
254894Di2015UniqueSeparatorserializer
254894Di2015UniqueSeparatorXmlSerializer
254894Di2015UniqueSeparatorpublic class XmlTextWriterFull : XmlTextWriterDi2015NewLine{Di2015NewLine    public XmlTextWriterFull(TextWriter sink) : base(sink) { }Di2015NewLineDi2015NewLine    public override void WriteEndElement()Di2015NewLine    {Di2015NewLine        base.WriteFullEndElement();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLinevar writer = new XmlTextWriterFull(innerwriter);Di2015NewLineserializer.Serialize(writer, obj);Di2015NewLine
254894Di2015UniqueSeparatorpublic XmlTextWriterFull(Stream stream, Encoding enc) : base(stream, enc) { }Di2015NewLinepublic XmlTextWriterFull(String str, Encoding enc) : base(str, enc) { }Di2015NewLine
254894Di2015UniqueSeparatorSystem.IO.MemoryStream memOut = new System.IO.MemoryStream();Di2015NewLineXmlTextWriterFull writer = new XmlTextWriterFull(memOut, Encoding.UTF8Encoding); //Or the encoding of your choiceDi2015NewLinexmlout.Serialize(writer, envelope, namespc);Di2015NewLine
254908Di2015UniqueSeparatorvar InnerQuery = from i in inputDi2015NewLine                 join o in outputDi2015NewLine                 on i.Input_ID equals o.Output_ID into joinedDi2015NewLine                 from leftjoin in joined.DefaultIfEmpty()Di2015NewLine                 select newDi2015NewLine                 {Di2015NewLine                     Label = i.Label,Di2015NewLine                     AddedAmount = (i.Input_Amt + (leftjoin == null ? 0 : leftjoin.Output_Amt))Di2015NewLine                 };Di2015NewLine
255030Di2015UniqueSeparatorpublic class PaymentSection : ConfigurationSectionDi2015NewLine{Di2015NewLine   // Simple OneDi2015NewLine   [ConfigurationProperty("name")]]Di2015NewLine   public String nameDi2015NewLine   {Di2015NewLine      get { return this["name"]; }Di2015NewLine      set { this["name"] = value; }Di2015NewLine   }Di2015NewLineDi2015NewLine}Di2015NewLine
255037Di2015UniqueSeparatorAddButtonControl
255037Di2015UniqueSeparatorvar button = new Button { Text = id , ID = id };Di2015NewLine
255037Di2015UniqueSeparatorpublic partial class _Default : PageDi2015NewLine{Di2015NewLine    protected override void OnPreInit(EventArgs e)Di2015NewLine    {Di2015NewLine        base.OnPreInit(e);Di2015NewLine        AddButtons();Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void AddButtons()Di2015NewLine    {Di2015NewLine        AddButtonControl("btn1", "1");Di2015NewLine        AddButtonControl("btn2", "2");Di2015NewLine        AddButtonControl("btn3", "3");Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void AddButtonControl(string id, string text)Di2015NewLine    {Di2015NewLine        var button = new Button { Text = text, ID = id };Di2015NewLine        button.Click += button_Click;Di2015NewLine        ButtonsPanel.Controls.Add(button);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void button_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        foreach (Control control in ButtonsPanel.Controls)Di2015NewLine            control.Visible = !control.Equals(sender);Di2015NewLine    }Di2015NewLine}Di2015NewLine
255073Di2015UniqueSeparatorPCREDENTIALS
255073Di2015UniqueSeparator[DllImport("advapi32", SetLastError = true, CharSet=CharSet.Unicode)]Di2015NewLinestatic extern bool CredEnumerate(string filter, int flag, out int count, out IntPtrDi2015NewLinepCredentials);Di2015NewLine
255073Di2015UniqueSeparatorint count = 0;Di2015NewLineIntPtr pCredentials = IntPtr.Zero;Di2015NewLineIntPtr[] credentials = null;Di2015NewLinebool ret = CredEnumerate(null, 0, out count, out pCredentials);Di2015NewLineif (ret != false)Di2015NewLine{Di2015NewLine    credentials = new IntPtr[count];Di2015NewLine    IntPtr p = pCredentials;Di2015NewLine    for (int n = 0; n < count; n++)Di2015NewLine    {Di2015NewLine        credentials[n] = Marshal.ReadIntPtr(pCredentials,Di2015NewLine           n * Marshal.SizeOf(typeof(IntPtr)));Di2015NewLine    }Di2015NewLine} Di2015NewLineelseDi2015NewLine// failed....Di2015NewLine
255073Di2015UniqueSeparatorMarshal.PtrToStructure
255073Di2015UniqueSeparatorPCREDENTIALS
255073Di2015UniqueSeparatorPCREDENTIALS
255073Di2015UniqueSeparator// assuming you have declared struct PCREDENTIALSDi2015NewLinevar creds = new List<PCREDENTIALS>(credentials.Length);Di2015NewLineforeach (var ptr in credentials)Di2015NewLine{Di2015NewLine    creds.Add((PCREDENTIALS)Marshal.PtrToStructure(ptr, typeof(PCREDENTIALS)));Di2015NewLine}Di2015NewLine
255073Di2015UniqueSeparatorPtrToStructure
255113Di2015UniqueSeparatorstatic pd delegateInstance = new pd(MyClass.p1) + new pd(MyClass.p2) ...;Di2015NewLineDi2015NewLine...Di2015NewLinepd();Di2015NewLine
255424Di2015UniqueSeparatorpublic class StorageObject {Di2015NewLine  public string Name { get; set; }Di2015NewLine  public string Birthday { get; set; }Di2015NewLine  public List<string> OtherInfo { get; set; }  Di2015NewLine}Di2015NewLine
255424Di2015UniqueSeparatorOtherInfo = {"Hobbies|Programming", "Website|Stackoverflow.com"}Di2015NewLine
255424Di2015UniqueSeparator<StorageObject>Di2015NewLine    <Name>Matthew</Name>Di2015NewLine    <Birthday>Jan 1st, 2008</Birthday>Di2015NewLine    <OtherInfo>Di2015NewLine        <string>Hobbies|Programming</string>Di2015NewLine        <string>Website|Stackoverflow.com</string>Di2015NewLine    </OtherInfo>Di2015NewLine</StorageObject>Di2015NewLine
255424Di2015UniqueSeparatorpublic class StorageObject {Di2015NewLine  public string Name { get; set; }Di2015NewLine  public string Birthday { get; set; }Di2015NewLine  public XElement OtherInfo { get; set; } // XmlElement for dot net 2Di2015NewLine}Di2015NewLine
255424Di2015UniqueSeparatorXElement OtherInfo = new XElement("OtherInfo");Di2015NewLineOtherInfo.Add( ..Hobbies xelement & text value..);Di2015NewLineOtherInfo.Add( ..WebSite xelement & text value..);Di2015NewLine
255424Di2015UniqueSeparator<OtherInfo>Di2015NewLine    <Hobbies>Programming</Hobbies>Di2015NewLine    <Website>Stackoverflow.com</Website>Di2015NewLine</OtherInfo>Di2015NewLine
255424Di2015UniqueSeparatorXElement OtherInfo = new XElement("OtherInfo");Di2015NewLineOtherInfo.Add( ..nvp xattribute Hobbies & value..);Di2015NewLineOtherInfo.Add( ..nvp xattribute WebSite & value..);Di2015NewLineDi2015NewLine<OtherInfo>Di2015NewLine    <nvp n="Hobbies" v="Programming" />Di2015NewLine    <nvp n="Website" v="Stackoverflow.com" />Di2015NewLine</OtherInfo>Di2015NewLine
255638Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLineclass BiDictionary<TFirst, TSecond>Di2015NewLine{Di2015NewLine    IDictionary<TFirst, IList<TSecond>> firstToSecond = new Dictionary<TFirst, IList<TSecond>>();Di2015NewLine    IDictionary<TSecond, IList<TFirst>> secondToFirst = new Dictionary<TSecond, IList<TFirst>>();Di2015NewLineDi2015NewLine    private static IList<TFirst> EmptyFirstList = new TFirst[0];Di2015NewLine    private static IList<TSecond> EmptySecondList = new TSecond[0];Di2015NewLineDi2015NewLine    public void Add(TFirst first, TSecond second)Di2015NewLine    {Di2015NewLine        IList<TFirst> firsts;Di2015NewLine        IList<TSecond> seconds;Di2015NewLine        if (!firstToSecond.TryGetValue(first, out seconds))Di2015NewLine        {Di2015NewLine            seconds = new List<TSecond>();Di2015NewLine            firstToSecond[first] = seconds;Di2015NewLine        }Di2015NewLine        if (!secondToFirst.TryGetValue(second, out firsts))Di2015NewLine        {Di2015NewLine            firsts = new List<TFirst>();Di2015NewLine            secondToFirst[second] = firsts;Di2015NewLine        }Di2015NewLine        seconds.Add(second);Di2015NewLine        firsts.Add(first);Di2015NewLine    }Di2015NewLineDi2015NewLine    // Note potential ambiguity using indexers (e.g. mapping from int to int)Di2015NewLine    // Hence the methods as well...Di2015NewLine    public IList<TSecond> this[TFirst first]Di2015NewLine    {Di2015NewLine        get { return GetByFirst(first); }Di2015NewLine    }Di2015NewLineDi2015NewLine    public IList<TFirst> this[TSecond second]Di2015NewLine    {Di2015NewLine        get { return GetBySecond(second); }Di2015NewLine    }Di2015NewLineDi2015NewLine    public IList<TSecond> GetByFirst(TFirst first)Di2015NewLine    {Di2015NewLine        IList<TSecond> list;Di2015NewLine        if (!firstToSecond.TryGetValue(first, out list))Di2015NewLine        {Di2015NewLine            return EmptySecondList;Di2015NewLine        }Di2015NewLine        return new List<TSecond>(list); // Create a copy for sanityDi2015NewLine    }Di2015NewLineDi2015NewLine    public IList<TFirst> GetBySecond(TSecond second)Di2015NewLine    {Di2015NewLine        IList<TFirst> list;Di2015NewLine        if (!secondToFirst.TryGetValue(second, out list))Di2015NewLine        {Di2015NewLine            return EmptyFirstList;Di2015NewLine        }Di2015NewLine        return new List<TFirst>(list); // Create a copy for sanityDi2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        BiDictionary<int, string> greek = new BiDictionary<int, string>();Di2015NewLine        greek.Add(1, "Alpha");Di2015NewLine        greek.Add(2, "Beta");Di2015NewLine        greek.Add(5, "Beta");Di2015NewLine        ShowEntries(greek, "Alpha");Di2015NewLine        ShowEntries(greek, "Beta");Di2015NewLine        ShowEntries(greek, "Gamma");Di2015NewLine    }Di2015NewLineDi2015NewLine    static void ShowEntries(BiDictionary<int, string> dict, string key)Di2015NewLine    {Di2015NewLine        IList<int> values = dict[key];Di2015NewLine        StringBuilder builder = new StringBuilder();Di2015NewLine        foreach (int value in values)Di2015NewLine        {Di2015NewLine            if (builder.Length != 0)Di2015NewLine            {Di2015NewLine                builder.Append(", ");Di2015NewLine            }Di2015NewLine            builder.Append(value);Di2015NewLine        }Di2015NewLine        Console.WriteLine("{0}: [{1}]", key, builder);Di2015NewLine    }Di2015NewLine}Di2015NewLine
255660Di2015UniqueSeparatorpublic static DataTable GetHistory(DateTime from, DateTime to, List<string> types)Di2015NewLine{Di2015NewLine ..Di2015NewLine}Di2015NewLine
255660Di2015UniqueSeparatorList<string> types = Di2015NewLine  new List<string> { "paramedics" };Di2015NewLineDi2015NewLineor Di2015NewLineDi2015NewLineList<string> types = Di2015NewLine  new List<string> { "paramedics", "police" };Di2015NewLine
255660Di2015UniqueSeparatorstring values = "'paramedics', 'police'"Di2015NewLine
255660Di2015UniqueSeparatorstring values = string.Empty;Di2015NewLine            types.ForEach(s =>Di2015NewLine            {Di2015NewLine               if (!string.IsNullOrEmpty(values))Di2015NewLine                   values += ",";Di2015NewLine               values += string.Format("'{0}'", s);Di2015NewLineDi2015NewLine            });Di2015NewLine
255660Di2015UniqueSeparatorstring select =Di2015NewLine "SELECT call_time, location, emergency_type where call_time between @from AND @to AND emergency_type IN " + valuesDi2015NewLine
255918Di2015UniqueSeparatorbutton1.Text = "æ¥æ¬";Di2015NewLine
255958Di2015UniqueSeparatornamespace DotNetInterfaceTest {Di2015NewLine    class Program {Di2015NewLine    \static void Main(string[] args) {Di2015NewLine    \\A c = new C();Di2015NewLine    \}Di2015NewLine    }Di2015NewLineDi2015NewLine    interface A {Di2015NewLine    \void foo();Di2015NewLine    }Di2015NewLineDi2015NewLine    interface B : A {Di2015NewLine    \void bar();Di2015NewLine    }Di2015NewLineDi2015NewLine    class C : B {Di2015NewLine    \public void bar() {}Di2015NewLine    \public void foo() {}Di2015NewLine    }Di2015NewLine}Di2015NewLine
255965Di2015UniqueSeparator    Color clr = textBox1.BackColor;Di2015NewLine    textBox1.ReadOnly = true;Di2015NewLine    textBox1.BackColor = clr;Di2015NewLine
256078Di2015UniqueSeparatorqueue
256078Di2015UniqueSeparatorQueue queue = null;Di2015NewLine
256085Di2015UniqueSeparatorAppDomain.ProcessExit
256251Di2015UniqueSeparatorpublic interface IValidatableControlDi2015NewLine{Di2015NewLine    bool IsValidControl();    Di2015NewLine}Di2015NewLine
256251Di2015UniqueSeparatorpublic class Control1 : IValidatableControlDi2015NewLine{Di2015NewLine... Other methodsDi2015NewLine    public bool IsValidControl()Di2015NewLine    {Di2015NewLineDi2015NewLine        foreach(object c in this.Controls)Di2015NewLine        {Di2015NewLine            if(c.GetType() == "Control2")Di2015NewLine                return true;Di2015NewLine        }Di2015NewLine        return false;Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
256273Di2015UniqueSeparatorpublic class MyClientSOAPExtension : SoapExtensionDi2015NewLine{Di2015NewLineDi2015NewLine     Stream oldStream;Di2015NewLine     Stream newStream;Di2015NewLineDi2015NewLine     // Save the Stream representing the SOAP request or SOAP response intoDi2015NewLine     // a local memory buffer.Di2015NewLine     public override Stream ChainStream( Stream stream )Di2015NewLine     {Di2015NewLine            oldStream = stream;Di2015NewLine            newStream = new MemoryStream();Di2015NewLine            return newStream;Di2015NewLine     }Di2015NewLineDi2015NewLine    public override void ProcessMessage(SoapMessage message)Di2015NewLine    {Di2015NewLine       switch (message.Stage)Di2015NewLine        {Di2015NewLine            case SoapMessageStage.BeforeDeserialize:Di2015NewLine                // before the XML deserialized into object.Di2015NewLine                break;Di2015NewLine            case SoapMessageStage.AfterDeserialize:Di2015NewLine                break;        Di2015NewLine            case SoapMessageStage.BeforeSerialize:Di2015NewLine                break;Di2015NewLine            case SoapMessageStage.AfterSerialize:Di2015NewLine                break;            Di2015NewLine            default:Di2015NewLine                throw new Exception("Invalid stage...");Di2015NewLine        }       Di2015NewLine    }Di2015NewLine}Di2015NewLine
256308Di2015UniqueSeparatorXmlReadrer reader = XmlReader.Create(filepathString);Di2015NewLine
256636Di2015UniqueSeparatorpublic T Spawn<T>() where T : new()Di2015NewLine{Di2015NewLine    return new T();Di2015NewLine}Di2015NewLine
256636Di2015UniqueSeparatornew MyClass()
256666Di2015UniqueSeparatorstring name = // blahDi2015NewLineint value = // blahDi2015NewLinenew Thread((ThreadStart)delegate { DoWork(name, value);}); // or inline if shortDi2015NewLine
256666Di2015UniqueSeparatorPerson person = list.Find(x=>x.Age > minAge && x.Region == region);Di2015NewLine
256666Di2015UniqueSeparatorinternal sealed class PersonFinderDi2015NewLine{Di2015NewLine    public PersonFinder(int minAge, string region)Di2015NewLine    {Di2015NewLine        this.minAge = minAge;Di2015NewLine        this.region = region;Di2015NewLine    }Di2015NewLine    private readonly int minAge;Di2015NewLine    private readonly string region;Di2015NewLine    public bool IsMatch(Person person)Di2015NewLine    {Di2015NewLine        return person.Age > minAge && person.Region == region;Di2015NewLine    }Di2015NewLine}Di2015NewLine...Di2015NewLinePerson person = list.Find(new PersonFinder(minAge,region).IsMatch);Di2015NewLine
256666Di2015UniqueSeparator        for(int i = 0 ; i < 10 ; i++) {Di2015NewLine            ThreadPool.QueueUserWorkItem(delegateDi2015NewLine            {Di2015NewLine                Console.WriteLine(i);Di2015NewLine            });Di2015NewLine        }Di2015NewLine
256666Di2015UniqueSeparator        for(int i = 0 ; i < 10 ; i++) {Di2015NewLine            int j = i;Di2015NewLine            ThreadPool.QueueUserWorkItem(delegateDi2015NewLine            {Di2015NewLine                Console.WriteLine(j);Di2015NewLine            });Di2015NewLine        }Di2015NewLine
256844Di2015UniqueSeparatorusing
256844Di2015UniqueSeparatorlock
256844Di2015UniqueSeparatorusing
256871Di2015UniqueSeparatorvar languages = new string[2];Di2015NewLinelanguages[0] = "English";Di2015NewLinelanguages[1] = "German";Di2015NewLineDi2015NewLineDataSet myDataSet = new DataSet();Di2015NewLineDi2015NewLine// --- PreparationDi2015NewLineDataTable lTable = new DataTable("Lang");Di2015NewLineDataColumn lName = new DataColumn("Language", typeof(string));Di2015NewLinelTable.Columns.Add(lName);Di2015NewLineDi2015NewLinefor (int i = 0; i < languages.Length; i++)Di2015NewLine{Di2015NewLine    DataRow lLang = lTable.NewRow();Di2015NewLine    lLang["Language"] = languages[i];Di2015NewLine    lTable.Rows.Add(lLang);Di2015NewLine}Di2015NewLinemyDataSet.Tables.Add(lTable);Di2015NewLineDi2015NewLinetoolStripComboBox1.ComboBox.DataSource = myDataSet.Tables["Lang"].DefaultView;Di2015NewLinetoolStripComboBox1.ComboBox.DisplayMember = "Language";Di2015NewLineDi2015NewLinetoolStripComboBox1.ComboBox.BindingContext = this.BindingContext;Di2015NewLine
257227Di2015UniqueSeparatorusualTextBox.HideSelection
257227Di2015UniqueSeparatorfalse
257227Di2015UniqueSeparatorTextBox
257486Di2015UniqueSeparatorbyte[] encbuff = System.Text.Encoding.UTF8.GetBytes("the string");Di2015NewLinestring enc = Convert.ToBase64String(encbuff);Di2015NewLinestring urlenc = Server.UrlEncode(enc);Di2015NewLine
257486Di2015UniqueSeparator$data = $_REQUEST['in'];Di2015NewLine$decdata = urldecode($data);Di2015NewLine$raw = base64_decode($decdata);Di2015NewLine
257540Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    obj.SetValueAt(-1, "foo");Di2015NewLine    Assert.Fail("Expected exception");Di2015NewLine}Di2015NewLinecatch (IndexOutOfRangeException)Di2015NewLine{Di2015NewLine    // ExpectedDi2015NewLine}Di2015NewLineAssert.IsTrue(obj.IsValid());Di2015NewLine
257702Di2015UniqueSeparatorXLANGMessage outputFile;Di2015NewLine
257702Di2015UniqueSeparatorXLANGMessage outputFile = null;Di2015NewLine
257702Di2015UniqueSeparatorTypeOf
257702Di2015UniqueSeparatortypeof
257702Di2015UniqueSeparatorXMLDocument
257702Di2015UniqueSeparatorXLANGMessage
257702Di2015UniqueSeparatorXLANGMessage
257741Di2015UniqueSeparatorvoid hotkey_execute()Di2015NewLine{Di2015NewLine    IntPtr handle = new WindowInteropHelper(Application.Current.MainWindow).Handle;Di2015NewLine    BackgroundWorker bg = new BackgroundWorker();Di2015NewLine    bg.DoWork += new DoWorkEventHandler(delegateDi2015NewLine        {Di2015NewLine            Thread.Sleep(10);Di2015NewLine            SwitchToThisWindow(handle, true);Di2015NewLine        });Di2015NewLine    bg.RunWorkerAsync();Di2015NewLine}Di2015NewLine
257825Di2015UniqueSeparator<globalization>
257825Di2015UniqueSeparator<system.web>
257825Di2015UniqueSeparator<system.web>Di2015NewLine  <globalization culture="en-gb"/>Di2015NewLine  <!-- ... -->Di2015NewLine</system.web>Di2015NewLine
258008Di2015UniqueSeparatorpublic class IntervalDi2015NewLine{Di2015NewLine    public Interval(int state)Di2015NewLine    {Di2015NewLine    \this.State = state;Di2015NewLine    \this.Duration = -1; Di2015NewLine    \this.Date = DateTime.MinValue;Di2015NewLine    }Di2015NewLine    public DateTime Date;Di2015NewLine    public long Duration; Di2015NewLine    public int State; Di2015NewLine}Di2015NewLineDi2015NewLineclass StateSummaryDi2015NewLine{Di2015NewLine    public StateSummary(StateEnum state, long totalSeconds)Di2015NewLine    {\Di2015NewLine    \State = (int)state;Di2015NewLine    \TotalSeconds = totalSeconds;Di2015NewLine    }Di2015NewLine    public int State;Di2015NewLine    public long TotalSeconds; Di2015NewLine}Di2015NewLineDi2015NewLineInterval[] GetRandomIntervals(DateTime start, DateTime end, StateSummary[] sums, int totalEvents)Di2015NewLine{Di2015NewLine    Random r = new Random(); Di2015NewLine    ArrayList intervals = new ArrayList();Di2015NewLineDi2015NewLine    for (int i=0; i < sums.Length; i++)Di2015NewLine    {Di2015NewLine    \intervals.Add(new Interval(sums[i].State));Di2015NewLine    }Di2015NewLineDi2015NewLine    for (int i=0; i < totalEvents - sums.Length; i++)Di2015NewLine    {Di2015NewLine    \intervals.Add(new Interval(sums[r.Next(0,sums.Length)].State));Di2015NewLine    }Di2015NewLineDi2015NewLine    Hashtable eventCounts = new Hashtable();Di2015NewLine    foreach (Interval interval in intervals)Di2015NewLine    {Di2015NewLine    \if (eventCounts[interval.State] == null) Di2015NewLine    \{Di2015NewLine    \\eventCounts[interval.State] = 1; Di2015NewLine    \}Di2015NewLine    \else Di2015NewLine    \{Di2015NewLine    \\eventCounts[interval.State] = ((int)eventCounts[interval.State]) + 1;Di2015NewLine    \}Di2015NewLine    }Di2015NewLineDi2015NewLine    foreach(StateSummary sum in sums)Di2015NewLine    {Di2015NewLine    \long avgDuration = sum.TotalSeconds / (int)eventCounts[sum.State];Di2015NewLine    \foreach (Interval interval in intervals) Di2015NewLine    \{Di2015NewLine    \\if (interval.State == sum.State)Di2015NewLine    \\{Di2015NewLine    \\\long offset = ((long)(r.NextDouble() * avgDuration)) - (avgDuration / 2); Di2015NewLine    \\\interval.Duration = avgDuration + offset; Di2015NewLine    \\}Di2015NewLine    \}Di2015NewLine    } Di2015NewLineDi2015NewLine    // cap the durations. Di2015NewLine    Hashtable eventTotals = new Hashtable();Di2015NewLine    foreach (Interval interval in intervals)Di2015NewLine    {Di2015NewLine    \if (eventTotals[interval.State] == null) Di2015NewLine    \{Di2015NewLine    \\eventTotals[interval.State] = interval.Duration; Di2015NewLine    \}Di2015NewLine    \else Di2015NewLine    \{Di2015NewLine    \\eventTotals[interval.State] = ((long)eventTotals[interval.State]) + interval.Duration;Di2015NewLine    \}Di2015NewLine    }Di2015NewLineDi2015NewLine    foreach(StateSummary sum in sums)Di2015NewLine    {Di2015NewLine    \long diff = sum.TotalSeconds - (long)eventTotals[sum.State];Di2015NewLine    \if (diff != 0)Di2015NewLine    \{Di2015NewLine    \\long diffPerInterval = diff / (int)eventCounts[sum.State]; Di2015NewLine    \\long mod = diff % (int)eventCounts[sum.State];Di2015NewLine    \\bool first = true;Di2015NewLine    \\foreach (Interval interval in intervals) Di2015NewLine    \\{Di2015NewLine    \\\if (interval.State == sum.State)Di2015NewLine    \\\{Di2015NewLine    \\\\interval.Duration += diffPerInterval;Di2015NewLine    \\\\if (first) Di2015NewLine    \\\\{Di2015NewLine    \\\\\interval.Duration += mod;Di2015NewLine    \\\\\first = false;Di2015NewLine    \\\\}Di2015NewLineDi2015NewLine    \\\}Di2015NewLine    \\}Di2015NewLine    \}Di2015NewLine    }Di2015NewLineDi2015NewLine    Shuffle(intervals);Di2015NewLineDi2015NewLine    DateTime d = start; Di2015NewLine    foreach (Interval interval in intervals) Di2015NewLine    {Di2015NewLine    \interval.Date = d; Di2015NewLine    \d = d.AddSeconds(interval.Duration);Di2015NewLine    }Di2015NewLineDi2015NewLine    return (Interval[])intervals.ToArray(typeof(Interval));Di2015NewLine}Di2015NewLineDi2015NewLinepublic static ICollection Shuffle(ICollection c)Di2015NewLine{Di2015NewLine    Random rng = new Random();Di2015NewLine    object[] a = new object[c.Count];Di2015NewLine    c.CopyTo(a, 0);Di2015NewLine    byte[] b = new byte[a.Length];Di2015NewLine    rng.NextBytes(b);Di2015NewLine    Array.Sort(b, a);Di2015NewLine    return new ArrayList(a);Di2015NewLine}Di2015NewLine
258185Di2015UniqueSeparatorSELECT CASE
258373Di2015UniqueSeparator    string dir = ...todo...Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        // some codeDi2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        ex.Data.Add("dir", dir);Di2015NewLine        throw;Di2015NewLine    }Di2015NewLine
258417Di2015UniqueSeparator.Method.Name
258417Di2015UniqueSeparator.Method.Name
258482Di2015UniqueSeparatorpublic partial class MyCustomControl : IDisposableDi2015NewLine    {Di2015NewLineDi2015NewLine        public MyCustomControl() {Di2015NewLine            InitializeComponent();Di2015NewLineDi2015NewLine            Loaded += delegate(object sender, RoutedEventArgs e) {Di2015NewLine                System.Windows.Window parent_window = Window.GetWindow(this);Di2015NewLine                if (parent_window != null) {Di2015NewLine                    parent_window.Closed += delegate(object sender2, EventArgs e2) {Di2015NewLine                        Dispose();Di2015NewLine                    };Di2015NewLine                }Di2015NewLine            };Di2015NewLineDi2015NewLine            ...Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        ...Di2015NewLine    }Di2015NewLine
258495Di2015UniqueSeparator#if DEBUGDi2015NewLine/* re-throw the exception... */Di2015NewLine#elseDi2015NewLine/* write something in the event log... */Di2015NewLine#endifDi2015NewLine
258664Di2015UniqueSeparatorBackgroundWorker
258664Di2015UniqueSeparatorRunWorkerCompleted
258664Di2015UniqueSeparatorSystem.ComponentModel.RunWorkerCompletedEventArgs
258723Di2015UniqueSeparatorID="(\\d+)"Di2015NewLine
258723Di2015UniqueSeparatorRegex r = new Regex("ID=\\"(\\\\d+)\\"");Di2015NewLinestring outputXml = r.Replace(inputXml, new MatchEvaluator(ReplaceFunction));Di2015NewLine
258723Di2015UniqueSeparatorReplaceFunction
258723Di2015UniqueSeparatorpublic string ReplaceFunction(Match m)Di2015NewLine{Di2015NewLine  // do stuff with m.Groups(1);Di2015NewLine  return result.ToString();Di2015NewLine}Di2015NewLine
258739Di2015UniqueSeparator    static void Main() {Di2015NewLine        using (TextReader reader = File.OpenText("foo.bar")) { // [HERE]Di2015NewLine            Write(reader);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    static void Write(TextReader reader) {Di2015NewLine        Console.Write(reader.ReadToEnd());Di2015NewLine    }Di2015NewLine    static void Write(StreamReader reader) {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine
258739Di2015UniqueSeparatorvar reader
258739Di2015UniqueSeparator[HERE]
258828Di2015UniqueSeparatorDateTime.ParseExact(monthName, "MMMM", CultureInfo.CurrentCulture ).Month
258828Di2015UniqueSeparatorDictionary<string, int>
258876Di2015UniqueSeparatorpublic static string ToJson(IEnumerable collection)Di2015NewLine        {Di2015NewLine            DataContractJsonSerializer ser = new DataContractJsonSerializer(collection.GetType());Di2015NewLine            string json;Di2015NewLine            using (MemoryStream m = new MemoryStream())Di2015NewLine            {Di2015NewLine                XmlDictionaryWriter writer = JsonReaderWriterFactory.CreateJsonWriter(m);Di2015NewLine                ser.WriteObject(m, collection);Di2015NewLine                writer.Flush();Di2015NewLineDi2015NewLine                json = Encoding.Default.GetString(m.ToArray());Di2015NewLine            }Di2015NewLine            return json;Di2015NewLine        }Di2015NewLine
258907Di2015UniqueSeparatorDelegate
258907Di2015UniqueSeparatorFunc<...>
258907Di2015UniqueSeparatorAction<...>
258907Di2015UniqueSeparatorpublic MyResultType DoSomething(int arg1, int arg2)Di2015NewLine{Di2015NewLine    var result = invokeHandler(Di2015NewLine        (IDoSomethingHandler h, int a1, int a2) => h.DoSomething(a1, a2),Di2015NewLine        arg1, arg2);Di2015NewLine    return result;Di2015NewLine}Di2015NewLineDi2015NewLineprivate TResult invokeHandler<T, TResult>(Expression<Func<T,int,int,TResult>> action,Di2015NewLine    int arg1, int arg2)Di2015NewLine    where T : classDi2015NewLine{Di2015NewLine    // Here, I might want to check to see if action is already cached.Di2015NewLineDi2015NewLine    var compiledAction = action.Compile();Di2015NewLine    var methodCallExpr = action as MethodCallExpression;Di2015NewLineDi2015NewLine    // Here, I might want to store methodCallExpr in a cache somewhere.Di2015NewLineDi2015NewLine    var handler = ServiceLocator.Current.GetInstance<T>();Di2015NewLine    var result = compiledAction(handler, arg1, arg2);Di2015NewLineDi2015NewLine    return result;Di2015NewLine}Di2015NewLine
258921Di2015UniqueSeparator System.Type.GetType("MYClassName").GetConstructors()Di2015NewLine
259062Di2015UniqueSeparatorstring propertyIdentifier = lstProperty[u].PropertyIdentifier as string;Di2015NewLineif(propertyIdentifier != null && propertyIdentifier.CompareTo("Name") == 0)Di2015NewLine{Di2015NewLine    ... your if statement ...Di2015NewLine}Di2015NewLine
259079Di2015UniqueSeparatorpublic interface IFoo {Di2015NewLine    void Bar();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Foo: IFoo {Di2015NewLine    public static void Bar() {}Di2015NewLine}Di2015NewLine
259079Di2015UniqueSeparatorpublic class Animal: IListItem {Di2015NewLine    /* Can be tough to come up with a different, yet meaningful name!Di2015NewLine     * A different casing convention, like Java has, would help here.Di2015NewLine     */Di2015NewLine    public const string AnimalScreenName = "Animal";Di2015NewLine    public string ScreenName(){ return AnimalScreenName; }Di2015NewLine}Di2015NewLine
259146Di2015UniqueSeparatormt.exe -manifest "$(ProjectDir)$(TargetName).exe.manifest" -updateresource:"$(TargetDir)$(TargetName).exe;#1"Di2015NewLine
259167Di2015UniqueSeparator        using System.Security.Principal;Di2015NewLineDi2015NewLine        // ...Di2015NewLineDi2015NewLine        GenericIdentity identity = new GenericIdentity("M.Brown");Di2015NewLine        identity.IsAuthenticated = true;Di2015NewLineDi2015NewLine        // ...Di2015NewLineDi2015NewLine        System.Threading.Thread.CurrentPrincipal =Di2015NewLine            new GenericPrincipal(Di2015NewLine                identity,Di2015NewLine                new string[] { "Role1", "Roll2" }Di2015NewLine                );Di2015NewLineDi2015NewLine        //...Di2015NewLineDi2015NewLine        if (!System.Threading.Thread.CurrentPrincipal.IsInRole("Roll1"))Di2015NewLine        {Di2015NewLine            Console.WriteLine("Permission denied");Di2015NewLine            return;Di2015NewLine        }Di2015NewLine
259268Di2015UniqueSeparator     foreach (DataRow dr in dt.Rows)Di2015NewLine        {Di2015NewLine            items.SetValue("\\"" + dr["somenumber"].ToString() + "\\"", i);Di2015NewLine            i++;Di2015NewLine        }Di2015NewLine
259477Di2015UniqueSeparator    dataGridView1.Invalidate();Di2015NewLine
259477Di2015UniqueSeparator    dataGridView1.Invalidate(true);Di2015NewLine    dataGridView1.Update();             // <== forces immediate redrawDi2015NewLine
259477Di2015UniqueSeparatorprivate static System.Windows.Forms.Timer refreshWindow2;Di2015NewLinerefreshWindow2 = new Timer();Di2015NewLinerefreshWindow2.Interval = 1000;Di2015NewLinerefreshWindow2.Tick += new EventHandler(refreshWindow2_Tick);Di2015NewLinerefreshWindow2.Start();Di2015NewLine
259477Di2015UniqueSeparatorprivate void refreshWindow2_Tick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    dataGridView1.Invalidate();Di2015NewLine}Di2015NewLine
259544Di2015UniqueSeparatorSystem.Reflection.MethodBase.GetCurrentMethod().NameDi2015NewLine
259544Di2015UniqueSeparator__LINE__
259544Di2015UniqueSeparator__FUNCTION__
259604Di2015UniqueSeparatorint? i = 1;Di2015NewLinebool isINull = i == null;Di2015NewLineint j = (int)i;Di2015NewLine
259604Di2015UniqueSeparatorint? i = 1;Di2015NewLinebool isINull = !i.HasValue;Di2015NewLineint j = i.Value;Di2015NewLine
259695Di2015UniqueSeparatorApplication.DoEvents
259695Di2015UniqueSeparatorCancelAsync
259695Di2015UniqueSeparatorCancellationPending
259919Di2015UniqueSeparatorthrow new IndexOutOfBoundsException("offset < 0: " + off);Di2015NewLine
259958Di2015UniqueSeparatorWebRequest request = WebRequest.Create("http://google.com");Di2015NewLineDi2015NewLineusing (WebResponse response = request.GetResponse())Di2015NewLine{Di2015NewLine   //do my jobDi2015NewLine}Di2015NewLine
259987Di2015UniqueSeparatorvar elements = doc.Descendants("RemovalTarget").ToList().Reverse();Di2015NewLine/* reverse on the IList<T> may be faster than Reverse on the IEnumerable<T>,Di2015NewLine * needs benchmarking, but can't be any slowerDi2015NewLine */Di2015NewLineDi2015NewLineforeach (var element in elements) {Di2015NewLine    element.ReplaceWith(element.Nodes());Di2015NewLine}Di2015NewLine
260157Di2015UniqueSeparatorpublic override string ToString()Di2015NewLine{Di2015NewLine    StringBuilder builder = new StringBuilder();Di2015NewLine    builder.Append("{ test = ");Di2015NewLine    builder.Append(this.<test>i__Field);Di2015NewLine    builder.Append(" }");Di2015NewLine    return builder.ToString();Di2015NewLine}Di2015NewLine
260157Di2015UniqueSeparatorvar members = from myList in o_data.Descendants(bp + "Reaction")Di2015NewLine  select myList.Element(bp + "RIGHT").Attribute(rdf + "resource").Value;Di2015NewLinereturn members.ToArray();Di2015NewLine
260409Di2015UniqueSeparatorpublic class NoScrollTreeView : TreeViewDi2015NewLine{Di2015NewLine    public class NoScrollTreeViewItem : TreeViewItemDi2015NewLine    {Di2015NewLine        public NoScrollTreeViewItem() : base()Di2015NewLine        {Di2015NewLine            this.RequestBringIntoView += delegate (object sender, RequestBringIntoViewEventArgs e) {Di2015NewLine                e.Handled = true;Di2015NewLine            };Di2015NewLine        }Di2015NewLineDi2015NewLine        protected override DependencyObject GetContainerForItemOverride()Di2015NewLine        {Di2015NewLine            return new NoScrollTreeViewItem();Di2015NewLine        }Di2015NewLine    }Di2015NewLine    protected override DependencyObject GetContainerForItemOverride()Di2015NewLine    {Di2015NewLine        return new NoScrollTreeViewItem();Di2015NewLine    }Di2015NewLine}Di2015NewLine
260859Di2015UniqueSeparatorprivate void YourRichTextBox_KeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    if ((Control.ModifierKeys & Keys.Control) == Keys.Control && e.KeyCode == Keys.I)Di2015NewLine    {Di2015NewLine    \// do whatever you want to do here...Di2015NewLine    \e.SuppressKeyPress = true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
260947Di2015UniqueSeparatorDoEvents
260947Di2015UniqueSeparatorDoEvents
260947Di2015UniqueSeparator        int startIndex = 0;Di2015NewLine        Action action = null;Di2015NewLine        action = () =>Di2015NewLine        {   // only processes a batch of 50 rows, then calls BeginInvokeDi2015NewLine            // to schedule the next batchDi2015NewLine            int endIndex = startIndex + 50;Di2015NewLine            if (endIndex > dgItemMaster.Rows.Count) endIndex = dgItemMaster.Rows.Count;Di2015NewLineDi2015NewLine            if (startIndex > endIndex)Di2015NewLine            {Di2015NewLine                for (int i = startIndex; i < endIndex; i++)Di2015NewLine                {Di2015NewLine                    // process row iDi2015NewLine                }Di2015NewLineDi2015NewLine                startIndex = endIndex;Di2015NewLine                this.BeginInvoke(action); // next iterationDi2015NewLine            }                Di2015NewLine        };Di2015NewLineDi2015NewLine        // kick it offDi2015NewLine        this.BeginInvoke(action);Di2015NewLine
261020Di2015UniqueSeparator<asp:PlaceHolder ID="PlaceHolder1" runat="server" />Di2015NewLine
261020Di2015UniqueSeparatorHtmlGenericControl list = new HtmlGenericControl("ul");Di2015NewLinefor (int i = 0; i < 10; i++)Di2015NewLine{Di2015NewLine    HtmlGenericControl listItem = new HtmlGenericControl("li");Di2015NewLine    Label textLabel = new Label();Di2015NewLine    textLabel.Text = String.Format("Label {0}", i);Di2015NewLine    listItem.Controls.Add(textLabel);Di2015NewLine    // etc...Di2015NewLine    list.Controls.Add(listItem);Di2015NewLine}Di2015NewLinePlaceHolder1.Controls.Add(list);Di2015NewLine
261146Di2015UniqueSeparatorWidget
261146Di2015UniqueSeparatorWidget<T>
261146Di2015UniqueSeparatorpublic abstract class WidgetDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic abstract class Widget<T> : Widget where T : WidgetDi2015NewLine{Di2015NewLine}Di2015NewLine
261209Di2015UniqueSeparatorpublic static void ThrowIfNull<T>(this T obj, string parameterName) where T : classDi2015NewLine{Di2015NewLine    if(obj == null) throw new ArgumentNullException(parameterName);Di2015NewLine}Di2015NewLine
261209Di2015UniqueSeparatorfoo.ThrowIfNull("foo");Di2015NewLinebar.ThrowIfNull("bar");Di2015NewLine
261209Di2015UniqueSeparatorT : class
261209Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Reflection;Di2015NewLineusing PostSharp.Laos;Di2015NewLineDi2015NewLinenamespace IteratorBlocksDi2015NewLine{Di2015NewLine    [Serializable]Di2015NewLine    class NullArgumentAspect : OnMethodBoundaryAspectDi2015NewLine    {Di2015NewLine        string name;Di2015NewLine        int position;Di2015NewLineDi2015NewLine        public NullArgumentAspect(string name)Di2015NewLine        {Di2015NewLine            this.name = name;Di2015NewLine        }Di2015NewLineDi2015NewLine        public override void CompileTimeInitialize(MethodBase method)Di2015NewLine        {Di2015NewLine            base.CompileTimeInitialize(method);Di2015NewLine            ParameterInfo[] parameters = method.GetParameters();Di2015NewLine            for (int index = 0; index < parameters.Length; index++)Di2015NewLine            {Di2015NewLine                if (parameters[index].Name == name)Di2015NewLine                {Di2015NewLine                    position = index;Di2015NewLine                    return;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            throw new ArgumentException("No parameter with name " + name);Di2015NewLine        }Di2015NewLineDi2015NewLine        public override void OnEntry(MethodExecutionEventArgs eventArgs)Di2015NewLine        {Di2015NewLine            if (eventArgs.GetArguments()[position] == null)Di2015NewLine            {Di2015NewLine                throw new ArgumentNullException(name);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
261412Di2015UniqueSeparatorWorksheet.UsedRange
261412Di2015UniqueSeparatorget_Value()
261412Di2015UniqueSeparatorValue
261412Di2015UniqueSeparatorValue2
261412Di2015UniqueSeparatorobject[,]
261412Di2015UniqueSeparatordata = rangeData[iRow, iCol] != null ? rangeData[iRow, iCol].ToString() : string.Empty;Di2015NewLine
261412Di2015UniqueSeparatordata = Convert.ToString(rangeData[iRow, iCol]) ?? string.Empty;Di2015NewLine
261412Di2015UniqueSeparatornull
261608Di2015UniqueSeparatorSqlException
261608Di2015UniqueSeparator.Number
261608Di2015UniqueSeparatorInfoMessage
261653Di2015UniqueSeparatorusing System.Diagnostics
261653Di2015UniqueSeparator    FileVersionInfo info = FileVersionInfo.GetVersionInfo(path);Di2015NewLine
261653Di2015UniqueSeparatorinfo
261653Di2015UniqueSeparator    Console.WriteLine(info.CompanyName);Di2015NewLine    Console.WriteLine(info.ProductName);Di2015NewLine    Console.WriteLine(info.LegalCopyright);Di2015NewLine    Console.WriteLine(info.ProductVersion);Di2015NewLine
261742Di2015UniqueSeparatorprotected internal
261742Di2015UniqueSeparatorthis.
261742Di2015UniqueSeparatorsource
261742Di2015UniqueSeparatorthis
261742Di2015UniqueSeparatorTClass
261742Di2015UniqueSeparatorpublic class BaseDi2015NewLine{Di2015NewLine    protected internal void FigureItOut<TClass, TMember>(Expression<Func<TClass, TMember>> expr)Di2015NewLine    {Di2015NewLine        Debug.WriteLine("Got to actual method");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static class BaseExtDi2015NewLine{Di2015NewLine    public static void FigureItOut<TClass, TMember>(this TClass source, Expression<Func<TClass, TMember>> expr)Di2015NewLine        where TClass : BaseDi2015NewLine    { // call the actual methodDi2015NewLine        Debug.WriteLine("Got to extension method");Di2015NewLine        source.FigureItOut(expr);Di2015NewLine    }Di2015NewLine}Di2015NewLinepublic class Descendant : BaseDi2015NewLine{Di2015NewLine    public void TestMethod()Di2015NewLine    {Di2015NewLine        this.FigureItOut(c => c.Name);Di2015NewLine    }Di2015NewLineDi2015NewLine    public String Name { get; set; }Di2015NewLine}Di2015NewLine
261742Di2015UniqueSeparatorinternal
261742Di2015UniqueSeparatorprotected static void FigureItOut<TClass, TMember>(TClass source, Expression<Func<TClass, TMember>> expr)Di2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinepublic void TestMethod()Di2015NewLine{Di2015NewLine    FigureItOut(this, c => c.Name);Di2015NewLine}Di2015NewLine
261748Di2015UniqueSeparatorselect * from sysibm.sysdummy1Di2015NewLine
261748Di2015UniqueSeparatorselect * from dualDi2015NewLine
262032Di2015UniqueSeparator      //open the fileDi2015NewLine      Image i = Image.FromFile(path);Di2015NewLineDi2015NewLine      //create temporaryDi2015NewLine      Image t=new Bitmap(i.Width,i.Height);Di2015NewLineDi2015NewLine      //get graphicsDi2015NewLine      Graphics g=Graphics.FromImage(t);Di2015NewLineDi2015NewLine      //copy originalDi2015NewLine      g.DrawImage(i,0,0);Di2015NewLineDi2015NewLine      //close originalDi2015NewLine      i.Dispose();Di2015NewLineDi2015NewLine      //Can now saveDi2015NewLine      t.Save(path)Di2015NewLine
262112Di2015UniqueSeparatorforeach(TypeA objectA in listA){Di2015NewLine    listB.RemoveAll(objectB => objectB.Id == objectA.Id);Di2015NewLine}Di2015NewLine
262171Di2015UniqueSeparator<button runat="server" Di2015NewLine  style="background-image:url('/Content/Img/stackoverflow-logo-250.png')" >Di2015NewLine  your text here<br/>and some more<br/><br/> and some more ....Di2015NewLine  </button>Di2015NewLine
262291Di2015UniqueSeparatorProcess[] pname = Process.GetProcessesByName("notepad");Di2015NewLineif (pname.Length == 0)Di2015NewLine  MessageBox.Show("nothing");Di2015NewLineelseDi2015NewLine  MessageBox.Show("run");Di2015NewLine
262291Di2015UniqueSeparatorProcess[] processlist = Process.GetProcesses();Di2015NewLineforeach(Process theprocess in processlist){Di2015NewLine   Console.WriteLine("Process: {0} ID: {1}", theprocess.ProcessName, theprocess.Id);Di2015NewLine}Di2015NewLine
262377Di2015UniqueSeparator<Page x:Class="MyPage" DataContext="{Binding RelativeSource={RelativeSource Self}}">Di2015NewLine    <Page.Resources>Di2015NewLine        <CollectionViewSource Source="{Binding Items}" x:Key="items" />Di2015NewLine        <CollectionViewSource Source="{Binding RelatedItems}" x:Key="relatedItems" />Di2015NewLine    </Page.Resources>Di2015NewLineDi2015NewLine    <ListBox>Di2015NewLine       <ListBox.ItemsSource>Di2015NewLine         <CompositeCollection>Di2015NewLine           <CollectionContainerDi2015NewLine             Collection="{StaticResource items}" />Di2015NewLine           <CollectionContainerDi2015NewLine             Collection="{StaticResource relatedItems}" />Di2015NewLine         </CompositeCollection>Di2015NewLine       </ListBox.ItemsSource>Di2015NewLine    </ListBox>Di2015NewLine</Page>Di2015NewLine
262377Di2015UniqueSeparatorpublic class MyPage : PageDi2015NewLine{Di2015NewLine    private void Setup()Di2015NewLine    {Di2015NewLine        Items = ...;Di2015NewLine        RelatedItems = ...;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static readonly DependencyProperty ItemsProperty =Di2015NewLine        DependencyProperty.Register("Items", typeof(ReadOnlyCollection<data>), typeof(MyPage),new PropertyMetadata(false));Di2015NewLine    public ReadOnlyCollection<data> ItemsDi2015NewLine    {Di2015NewLine        get { return (ReadOnlyCollection<data>)this.GetValue(ItemsProperty ); }Di2015NewLine        set { this.SetValue(ItemsProperty , value); } Di2015NewLine    }Di2015NewLineDi2015NewLine    public static readonly DependencyProperty RelatedItemsProperty =Di2015NewLine        DependencyProperty.Register("RelatedItems", typeof(ReadOnlyCollection<data>), typeof(MyPage),new PropertyMetadata(false));Di2015NewLine    public ReadOnlyCollection<data> RelatedItemsDi2015NewLine    {Di2015NewLine        get { return (ReadOnlyCollection<data>)this.GetValue(RelatedItemsProperty ); }Di2015NewLine        set { this.SetValue(RelatedItemsProperty , value); } Di2015NewLine    }Di2015NewLine}Di2015NewLine
262396Di2015UniqueSeparatortreeView.ImageKey = "Value";Di2015NewLineDebug.WriteLine(treeView.ImageIndex);Di2015NewLinetreeView.ImageKey = null;Di2015NewLineDebug.WriteLine(treeView.ImageIndex);Di2015NewLinetreeView.ImageIndex = -1;Di2015NewLineDebug.WriteLine(treeView.ImageIndex);Di2015NewLine
262396Di2015UniqueSeparator-1Di2015NewLine0Di2015NewLine0Di2015NewLine
262466Di2015UniqueSeparatorstring CleanPhone(string phone)Di2015NewLine{Di2015NewLine    Regex digitsOnly = new Regex(@"[^\\d]");   Di2015NewLine    return digitsOnly.Replace(phone, "");Di2015NewLine}Di2015NewLine
262466Di2015UniqueSeparatorprivate static Regex digitsOnly = new Regex(@"[^\\d]");   Di2015NewLineDi2015NewLinepublic static string CleanPhone(string phone)Di2015NewLine{Di2015NewLine    return digitsOnly.Replace(phone, "");Di2015NewLine}Di2015NewLine
262570Di2015UniqueSeparatorSystem
262570Di2015UniqueSeparatorSystem.
262570Di2015UniqueSeparatorIO
262570Di2015UniqueSeparatorIf IO.File.Exists(MyFile) Then ....Di2015NewLine
262570Di2015UniqueSeparatorSystem.IO
262570Di2015UniqueSeparatorFile.Exists()
262570Di2015UniqueSeparatorSystem.IO.File.Exists()
262743Di2015UniqueSeparatorstatic string Search(string expression)Di2015NewLine{Di2015NewLine  int run = 0;Di2015NewLine  for (int i = 0; i < expression.Length; i++)Di2015NewLine  {Di2015NewLine    char c = expression[i];Di2015NewLine    if (Char.IsDigit(c))Di2015NewLine      run++;Di2015NewLine    else if (run == 5)Di2015NewLine      return expression.Substring(i - run, run);Di2015NewLine    elseDi2015NewLine      run = 0;Di2015NewLine  }Di2015NewLine  return null;Di2015NewLine}Di2015NewLineconst string pattern = @"\\d{5}";Di2015NewLinestatic string NotCached(string expression)Di2015NewLine{Di2015NewLine  return Regex.Match(expression, pattern, RegexOptions.Compiled).Value;Di2015NewLine}Di2015NewLineDi2015NewLinestatic Regex regex = new Regex(pattern, RegexOptions.Compiled);Di2015NewLinestatic string Cached(string expression)Di2015NewLine{Di2015NewLine  return regex.Match(expression).Value;Di2015NewLine}Di2015NewLine
262794Di2015UniqueSeparatorpublic class CustomControl : ControlDi2015NewLine{Di2015NewLine    public static readonly DependencyProperty PersonProperty =Di2015NewLine    \DependencyProperty.Register("Person", typeof(Person), typeof(CustomControl), new UIPropertyMetadata(null));Di2015NewLine    public Person PersonDi2015NewLine    {Di2015NewLine    \get { return (Person) GetValue(PersonProperty); }Di2015NewLine    \set { SetValue(PersonProperty, value); }Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    public static readonly DependencyProperty JobProperty =Di2015NewLine    \DependencyProperty.Register("Job", typeof(Job), typeof(CustomControl), new UIPropertyMetadata(null));Di2015NewLine    public Job JobDi2015NewLine    {Di2015NewLine    \get { return (Job) GetValue(JobProperty); }Di2015NewLine    \set { SetValue(JobProperty, value); }Di2015NewLine    }Di2015NewLineDi2015NewLine    static CustomControl()Di2015NewLine    {Di2015NewLine    \DefaultStyleKeyProperty.OverrideMetadata(typeof(CustomControl), new FrameworkPropertyMetadata(typeof(CustomControl)));Di2015NewLine    }Di2015NewLine}Di2015NewLine
262794Di2015UniqueSeparator<ResourceDictionaryDi2015NewLine    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine    xmlns:local="clr-namespace:WpfApplication3">Di2015NewLineDi2015NewLineDi2015NewLine    <Style TargetType="{x:Type local:CustomControl}">Di2015NewLine        <Setter Property="Template">Di2015NewLine            <Setter.Value>Di2015NewLine                <ControlTemplate TargetType="{x:Type local:CustomControl}">Di2015NewLine                    <Border Background="{TemplateBinding Background}"Di2015NewLine                            BorderBrush="{TemplateBinding BorderBrush}"Di2015NewLine                            BorderThickness="{TemplateBinding BorderThickness}">Di2015NewLine    \\\\\<StackPanel>Di2015NewLine    \\\\\\<TextBox Text="{TemplateBinding Person.Name}" />Di2015NewLine    \\\\\\<TextBox Text="{TemplateBinding Job.Address}" />Di2015NewLine    \\\\\</StackPanel>Di2015NewLine                    </Border>Di2015NewLine                </ControlTemplate>Di2015NewLine            </Setter.Value>Di2015NewLine        </Setter>Di2015NewLine    </Style>Di2015NewLine</ResourceDictionary>Di2015NewLine
262794Di2015UniqueSeparator<src:CustomControl Person="{Binding Person}" Job="{Binding Job}" />Di2015NewLine
262813Di2015UniqueSeparatorusing
262813Di2015UniqueSeparatorusing Ns1.Foo.Foo2;Di2015NewLineDi2015NewLinenamespace Ns1.FooDi2015NewLine{Di2015NewLine    class FooDi2015NewLine    {Di2015NewLine        public void Print()Di2015NewLine        {Di2015NewLine            System.Console.WriteLine("Ns1.Foo");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinenamespace Ns1.Foo.Foo2Di2015NewLine{Di2015NewLine    class FooDi2015NewLine    {Di2015NewLine        public void Print()Di2015NewLine        {Di2015NewLine            System.Console.WriteLine("Ns1.Foo.Foo2");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinenamespace Ns1.Foo.BarDi2015NewLine{Di2015NewLine    class BarDi2015NewLine    {Di2015NewLine        public void Print()Di2015NewLine        {Di2015NewLine            new Foo().Print();Di2015NewLine        }Di2015NewLineDi2015NewLine        static void Main()Di2015NewLine        {Di2015NewLine            new Bar().Print();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
262813Di2015UniqueSeparatornamespace Ns1.Foo.BarDi2015NewLine{Di2015NewLine    using Ns1.Foo.Foo2;Di2015NewLine    class BarDi2015NewLine    {Di2015NewLine        public void Print()Di2015NewLine        {Di2015NewLine            new Foo().Print();Di2015NewLine        }Di2015NewLineDi2015NewLine        static void Main()Di2015NewLine        {Di2015NewLine            new Bar().Print();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
262813Di2015UniqueSeparatorNs1.Foo.Foo2
263177Di2015UniqueSeparatorFunc<Order, bool> predicate = id == null Di2015NewLine    ? (Func<Order, bool>) (p => p.EmployeeID == null)Di2015NewLine    : p => p.EmployeeID == id;Di2015NewLine
263186Di2015UniqueSeparatorif(!thread.Join(End-now))Di2015NewLine    throw new NotFinishedInTime();Di2015NewLine
263459Di2015UniqueSeparatorpublic static void MinimizeMemory()Di2015NewLine{Di2015NewLine    GC.Collect(GC.MaxGeneration);Di2015NewLine    GC.WaitForPendingFinalizers();Di2015NewLine    SetProcessWorkingSetSize(Di2015NewLine        Process.GetCurrentProcess().Handle,Di2015NewLine        (UIntPtr)0xFFFFFFFF,Di2015NewLine        (UIntPtr)0xFFFFFFFF);Di2015NewLineDi2015NewLine    IntPtr heap = GetProcessHeap();Di2015NewLineDi2015NewLine    if (HeapLock(heap))Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            if (HeapCompact(heap, 0) == 0)Di2015NewLine            {Di2015NewLine                // error condition ignoredDi2015NewLine            }Di2015NewLine        }Di2015NewLine        finallyDi2015NewLine        {Di2015NewLine            HeapUnlock(heap);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine[DllImport("kernel32.dll")]Di2015NewLine[return: MarshalAs(UnmanagedType.Bool)]Di2015NewLineinternal static extern bool SetProcessWorkingSetSize(Di2015NewLine    IntPtr process,Di2015NewLine    UIntPtr minimumWorkingSetSize,Di2015NewLine    UIntPtr maximumWorkingSetSize);Di2015NewLineDi2015NewLine[DllImport("kernel32.dll", SetLastError = true)]Di2015NewLineinternal static extern IntPtr GetProcessHeap();Di2015NewLineDi2015NewLine[DllImport("kernel32.dll")]Di2015NewLine[return: MarshalAs(UnmanagedType.Bool)]Di2015NewLineinternal static extern bool HeapLock(IntPtr heap);Di2015NewLineDi2015NewLine[DllImport("kernel32.dll")]Di2015NewLineinternal static extern uint HeapCompact(IntPtr heap, uint flags);Di2015NewLineDi2015NewLine[DllImport("kernel32.dll")]Di2015NewLine[return: MarshalAs(UnmanagedType.Bool)]Di2015NewLineinternal static extern bool HeapUnlock(IntPtr heap);Di2015NewLine
263525Di2015UniqueSeparatorFile.Copy(filepath, "\\\\\\\\192.168.1.28\\\\Files");Di2015NewLine
263635Di2015UniqueSeparatorStackEntry { protected virtual void PostPop(); }Di2015NewLineReturn : StackEntry { protected override void PostPop(); }Di2015NewLineBacktrack : StackEntry { protected override void PostPop(); }Di2015NewLine
263675Di2015UniqueSeparatorSCENARIO MyScenarioDi2015NewLineDELAY 1Di2015NewLineCOUNT 1 ADD 1Di2015NewLineDIRECT_POWER 23, False, 150Di2015NewLineWAIT 3Di2015NewLine...Di2015NewLineEND_SCENARIODi2015NewLine
263675Di2015UniqueSeparatorscenario :: 'SCENARIO' label newline _cmds END_SCENARIODi2015NewLinecmds::  _delay or _count or _direct_power or...Di2015NewLinedelay:: 'DELAY' numberDi2015NewLine
263675Di2015UniqueSeparatordef scenario():Di2015NewLine    match_word('SCENARIO')Di2015NewLine    scenario_name = match_label()Di2015NewLine    emit('var scenario = new Scenario();')Di2015NewLine    cmds()Di2015NewLine    match_word('END_SCENARIO')Di2015NewLine    emit('byte[] ' + scenario_name + ' = scenario.Compile();')Di2015NewLineDi2015NewLinedef delay():Di2015NewLine    match_word('DELAY')Di2015NewLine    length = match_number()Di2015NewLine    emit('scenario.Add(new DelayCommand('+ length +'))')Di2015NewLineDi2015NewLinedef cmds():Di2015NewLine    word = peek_next_word()Di2015NewLine    if word == 'DELAY':Di2015NewLine       delay()Di2015NewLine    elif ...Di2015NewLine
263719Di2015UniqueSeparatorvirtual
263719Di2015UniqueSeparator[public|protected] void Freeze()Di2015NewLine{Di2015NewLine    if(!frozen)Di2015NewLine    {Di2015NewLine        frozen = true;Di2015NewLine        OnFrozen();Di2015NewLine    }Di2015NewLine}Di2015NewLineprotected virtual void OnFrozen() {} // subclass can add code here.Di2015NewLine
263956Di2015UniqueSeparatorxmlns:p="clr-namespace:UserSettings.Properties"Di2015NewLine
263956Di2015UniqueSeparatorUserSettings
263956Di2015UniqueSeparator<TextBlock Height="{Binding Source={x:Static p:Settings.Default}, Di2015NewLine           Path=Height, Mode=TwoWay}" ....... />Di2015NewLine
263956Di2015UniqueSeparatorprotected override void OnClosing(System.ComponentModel.CancelEventArgs e)Di2015NewLine{Di2015NewLine    Properties.Settings.Default.Save();Di2015NewLine    base.OnClosing(e); Di2015NewLine}Di2015NewLine
264122Di2015UniqueSeparatorftp.KeepAlive = false;Di2015NewLine
264155Di2015UniqueSeparatorpublic delegate void AddItemDelegate(string item);Di2015NewLinepublic AddItemDelegate AddItemCallback;Di2015NewLine
264155Di2015UniqueSeparatorprivate void btnScenario2_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine    FrmDialog dlg = new FrmDialog();Di2015NewLine    //Subscribe this form for callbackDi2015NewLine    dlg.AddItemCallback = new AddItemDelegate(this.AddItemCallbackFn);Di2015NewLine    dlg.ShowDialog();Di2015NewLineDi2015NewLine}Di2015NewLineprivate void AddItemCallbackFn(string item)Di2015NewLine{Di2015NewLineDi2015NewLine    lstBx.Items.Add(item);Di2015NewLineDi2015NewLine}Di2015NewLine
264595Di2015UniqueSeparatorNotifyWnd = FindWindowEx(SysTray, 0, "TrayNotifyWnd", 0);
264595Di2015UniqueSeparatorhHook=SetWindowsHookEx(WH_CALLWNDPROC,HOOKPROC(MsgProc),Di2015NewLine         hInstance,dwExplorerThreadId);
264595Di2015UniqueSeparatorTWDataT* twd=(TWDataT*)GetWindowLong(NotifyWnd,0);
264595Di2015UniqueSeparator      pTWIconDataT p=COMCTL32_332(twd->iconsInfo,i);
264752Di2015UniqueSeparatorBindingFlags.IgnoreCase |  BindingFlags.Public | BindingFlags.Instance
264755Di2015UniqueSeparator/// <exception.../>
264755Di2015UniqueSeparatorOutOfMemoryException
264755Di2015UniqueSeparatorThreadAbortException
264755Di2015UniqueSeparatorTypeLoadException
264849Di2015UniqueSeparatordbParams[MEMBER_CODE]Di2015NewLinedbParams[PASSWORD]Di2015NewLinedbParams[USERNAME]Di2015NewLinedbParams[REASON_CODE]Di2015NewLine
264891Di2015UniqueSeparator.Rows
264891Di2015UniqueSeparatorDataGridView
264891Di2015UniqueSeparator.DataBoundItem
264891Di2015UniqueSeparatorTypeDescriptor
264891Di2015UniqueSeparator        string propName = col.DataPropertyName;Di2015NewLine        // could also be a dictionary/hashset etcDi2015NewLine        // could be typed if you know the typeDi2015NewLine        List<object> values = new List<object>();Di2015NewLine        foreach(DataGridViewRow row in dgv.Rows)Di2015NewLine        {Di2015NewLine            object obj = row.DataBoundItem;Di2015NewLine            // could be typed (via cast) if you know the typeDi2015NewLine            object val = TypeDescriptor.GetProperties(obj)[propName].GetValue(obj);Di2015NewLine            if (!values.Contains(val))Di2015NewLine            {Di2015NewLine                values.Add(val);Di2015NewLine            }Di2015NewLine        }Di2015NewLine
265181Di2015UniqueSeparator       string [] arr = {"One","Two","Three"};Di2015NewLine       var target = "One";Di2015NewLine       var results = Array.FindAll(arr, s => s.Equals(target));Di2015NewLine
265214Di2015UniqueSeparatorint[] x = new[] { 1, 4, 23, 4, 1 };Di2015NewLineint[] distinct = x.Distinct().ToArray();Di2015NewLine// distinct is now { 1, 4, 23 } (but not necessarily in that order)Di2015NewLine
265340Di2015UniqueSeparator<xs:element name="colname" type="xs:decimal" minOccurs="0"Di2015NewLine  msdata:Caption="Friendly Caption" />Di2015NewLine
265564Di2015UniqueSeparatorDateTime.ToUniversalTime()
265564Di2015UniqueSeparatorDateTime.SpecifyKind(DateTime, DateTimeKind)
265599Di2015UniqueSeparatorA.B x = new A.B.B.B.B.B.B.B.B.B.B.B.B();Di2015NewLine
265648Di2015UniqueSeparatorpublic static class WebBrowserUtilityDi2015NewLine{Di2015NewLine    public static readonly DependencyProperty BindableSourceProperty =Di2015NewLine        DependencyProperty.RegisterAttached("BindableSource", typeof(string), typeof(WebBrowserUtility), new UIPropertyMetadata(null, BindableSourcePropertyChanged));Di2015NewLineDi2015NewLine    public static string GetBindableSource(DependencyObject obj)Di2015NewLine    {Di2015NewLine        return (string) obj.GetValue(BindableSourceProperty);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void SetBindableSource(DependencyObject obj, string value)Di2015NewLine    {Di2015NewLine        obj.SetValue(BindableSourceProperty, value);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void BindableSourcePropertyChanged(DependencyObject o, DependencyPropertyChangedEventArgs e)Di2015NewLine    {Di2015NewLine        WebBrowser browser = o as WebBrowser;Di2015NewLine        if (browser != null)Di2015NewLine        {Di2015NewLine            string uri = e.NewValue as string;Di2015NewLine            browser.Source = !String.IsNullOrEmpty(uri) ? new Uri(uri) : null;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
265648Di2015UniqueSeparator<WebBrowser ns:WebBrowserUtility.BindableSource="{Binding WebAddress}"Di2015NewLine    ScrollViewer.HorizontalScrollBarVisibility="Disabled" Di2015NewLine    ScrollViewer.VerticalScrollBarVisibility="Disabled" Di2015NewLine    Width="300"Di2015NewLine    Height="200" />Di2015NewLine
265885Di2015UniqueSeparatorthis
265885Di2015UniqueSeparatorpublic class Form1 : Form Di2015NewLine{Di2015NewLine    private Label label;Di2015NewLineDi2015NewLine    // Construction etc as normalDi2015NewLineDi2015NewLine    public string LabelTextDi2015NewLine    {Di2015NewLine         get { return label.Text; }Di2015NewLine         set { label.Text = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public Form2 CreateForm2()Di2015NewLine    {Di2015NewLine        return new Form2(this);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Form2 : FormDi2015NewLine{Di2015NewLine    private Form1 form1;Di2015NewLineDi2015NewLine    public Form2(Form1 form1)Di2015NewLine    {Di2015NewLine        this.form1 = form1;Di2015NewLine        // Normal constructionDi2015NewLine    }Di2015NewLineDi2015NewLine    public void SayHello()Di2015NewLine    {Di2015NewLine        form1.LabelText = "Hello";Di2015NewLine    }Di2015NewLine}Di2015NewLine
265938Di2015UniqueSeparatorusing System.IO;Di2015NewLineDi2015NewLineFile.SetAttributes(filePath, FileAttributes.Normal);Di2015NewLineFile.Delete(filePath);Di2015NewLine
266139Di2015UniqueSeparatorControl c = new TextBox();Di2015NewLineSystem.Drawing.Bitmap bmp = new System.Drawing.Bitmap(c.Width, c.Height);Di2015NewLinec.DrawToBitmap(bmp, c.ClientRectangle);Di2015NewLine
266173Di2015UniqueSeparatorstatic bool IsZeroOrEmpty(object o1)Di2015NewLine{Di2015NewLine    bool Passed = false;Di2015NewLine    object ZeroValue = 0;Di2015NewLineDi2015NewLine    if(o1 != null)Di2015NewLine    {Di2015NewLine        if(o1.GetType().IsValueType)Di2015NewLine        {Di2015NewLine            Passed = (o1 as System.ValueType).Equals(Convert.ChangeType(ZeroValue, o1.GetType()))Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            if (o1.GetType() == typeof(String))Di2015NewLine            {Di2015NewLine                Passed = o1.Equals(String.Empty);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return Passed;Di2015NewLine}Di2015NewLine
266282Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLinepublic class Generic<T>Di2015NewLine{Di2015NewLine    public Generic()Di2015NewLine    {Di2015NewLine        Console.WriteLine("T={0}", typeof(T));Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        string typeName = "System.String";Di2015NewLine        Type typeArgument = Type.GetType(typeName);Di2015NewLineDi2015NewLine        Type genericClass = typeof(Generic<>);Di2015NewLine        // MakeGenericType is badly namedDi2015NewLine        Type constructedClass = genericClass.MakeGenericType(typeArgument);Di2015NewLineDi2015NewLine        object created = Activator.CreateInstance(constructedClass);Di2015NewLine    }Di2015NewLine}Di2015NewLine
266718Di2015UniqueSeparatorstatic class ProgramDi2015NewLine{Di2015NewLine    static void Main() { }Di2015NewLineDi2015NewLine    static readonly object sync = new object();Di2015NewLineDi2015NewLine    static int GetValue() { return 5; }Di2015NewLineDi2015NewLine    static int ReturnInside()Di2015NewLine    {Di2015NewLine        lock (sync)Di2015NewLine        {Di2015NewLine            return GetValue();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    static int ReturnOutside()Di2015NewLine    {Di2015NewLine        int val;Di2015NewLine        lock (sync)Di2015NewLine        {Di2015NewLine            val = GetValue();Di2015NewLine        }Di2015NewLine        return val;Di2015NewLine    }Di2015NewLine}Di2015NewLine
266718Di2015UniqueSeparatorReturnInside
266718Di2015UniqueSeparator.method private hidebysig static int32 ReturnInside() cil managedDi2015NewLine{Di2015NewLine    .maxstack 2Di2015NewLine    .locals init (Di2015NewLine        [0] int32 CS$1$0000,Di2015NewLine        [1] object CS$2$0001)Di2015NewLine    L_0000: ldsfld object Program::syncDi2015NewLine    L_0005: dup Di2015NewLine    L_0006: stloc.1 Di2015NewLine    L_0007: call void [mscorlib]System.Threading.Monitor::Enter(object)Di2015NewLine    L_000c: call int32 Program::GetValue()Di2015NewLine    L_0011: stloc.0 Di2015NewLine    L_0012: leave.s L_001bDi2015NewLine    L_0014: ldloc.1 Di2015NewLine    L_0015: call void [mscorlib]System.Threading.Monitor::Exit(object)Di2015NewLine    L_001a: endfinally Di2015NewLine    L_001b: ldloc.0 Di2015NewLine    L_001c: ret Di2015NewLine    .try L_000c to L_0014 finally handler L_0014 to L_001bDi2015NewLine} Di2015NewLineDi2015NewLinemethod private hidebysig static int32 ReturnOutside() cil managedDi2015NewLine{Di2015NewLine    .maxstack 2Di2015NewLine    .locals init (Di2015NewLine        [0] int32 val,Di2015NewLine        [1] object CS$2$0000)Di2015NewLine    L_0000: ldsfld object Program::syncDi2015NewLine    L_0005: dup Di2015NewLine    L_0006: stloc.1 Di2015NewLine    L_0007: call void [mscorlib]System.Threading.Monitor::Enter(object)Di2015NewLine    L_000c: call int32 Program::GetValue()Di2015NewLine    L_0011: stloc.0 Di2015NewLine    L_0012: leave.s L_001bDi2015NewLine    L_0014: ldloc.1 Di2015NewLine    L_0015: call void [mscorlib]System.Threading.Monitor::Exit(object)Di2015NewLine    L_001a: endfinally Di2015NewLine    L_001b: ldloc.0 Di2015NewLine    L_001c: ret Di2015NewLine    .try L_000c to L_0014 finally handler L_0014 to L_001bDi2015NewLine}Di2015NewLine
266718Di2015UniqueSeparatorReturnInside
266871Di2015UniqueSeparatorEnvironment.CurrentDirectory
266871Di2015UniqueSeparatorOpenFileDialog
266871Di2015UniqueSeparatorSaveFileDialog
266871Di2015UniqueSeparatorSystem.IO
266871Di2015UniqueSeparatorEnvironment.CurrentDirectory
266871Di2015UniqueSeparatorAssembly.GetEntryAssembly()
266871Di2015UniqueSeparatorAssembly.GetExecutingAssembly()
266871Di2015UniqueSeparatorLocation
266871Di2015UniqueSeparatorCodeBase
266871Di2015UniqueSeparator`System.IO.Directory.SetCurrentDirectory( System.AppDomain.CurrentDomain.BaseDirectory );`Di2015NewLine
266871Di2015UniqueSeparatorOnStart
267053Di2015UniqueSeparatorvar oddCategories  = projectsByCat.ToList().Where((c,i) => i % 2 != 0);Di2015NewLinevar evenCategories = projectsByCat.ToList().Where((c,i) => i % 2 == 0);Di2015NewLine
267084Di2015UniqueSeparatorif(obj is string){...}Di2015NewLine
267162Di2015UniqueSeparatorMy
267162Di2015UniqueSeparatorswitch
267205Di2015UniqueSeparator   private void dataGridView1_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)Di2015NewLine    {Di2015NewLine        e.Control.ContextMenu = new ContextMenu();Di2015NewLine    }Di2015NewLine
267637Di2015UniqueSeparatorpublic partial class Window1 : WindowDi2015NewLine{Di2015NewLine\public MyClass2 MyClass2Object { get; set; }Di2015NewLine\public Window1()Di2015NewLine\{Di2015NewLine\\// use data context instead of sourceDi2015NewLine\\DataContext = this;Di2015NewLineDi2015NewLine\\InitializeComponent();Di2015NewLineDi2015NewLine\\MyClass2Object = new MyClass2();Di2015NewLine\\Binding binding = new Binding();Di2015NewLine\\binding.Path = new PropertyPath("MyClass2Object.StringVar");Di2015NewLine\\TextBoxFromXaml.SetBinding(TextBox.TextProperty, binding);Di2015NewLine\}Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyClass2Di2015NewLine{Di2015NewLine\public string StringVar { get; set; }Di2015NewLine\public MyClass2()Di2015NewLine\{Di2015NewLine\\StringVar = "My String Here";Di2015NewLine\}Di2015NewLine}Di2015NewLine
267727Di2015UniqueSeparatorprivate
267727Di2015UniqueSeparatorinternal
267735Di2015UniqueSeparator    [DllImport("user32.dll", EntryPoint = "GetDesktopWindow")]Di2015NewLine    private static extern IntPtr GetDesktopWindow();Di2015NewLineDi2015NewLine    [DllImport("user32.dll")]Di2015NewLine    private static extern IntPtr SendMessage(IntPtr hWnd, uint Msg, int wParam, int lParam);Di2015NewLineDi2015NewLine    //...Di2015NewLineDi2015NewLine    private const int SC_SCREENSAVE = 0xF140;Di2015NewLine    private const int WM_SYSCOMMAND = 0x0112;Di2015NewLineDi2015NewLine    //...Di2015NewLineDi2015NewLine    public static void SetScreenSaverRunning()Di2015NewLine    {Di2015NewLine    SendMessageDi2015NewLineDi2015NewLine(GetDesktopWindow(), WM_SYSCOMMAND, SC_SCREENSAVE, 0);Di2015NewLine}Di2015NewLine
267836Di2015UniqueSeparatorFile.Create
267836Di2015UniqueSeparatorFileStream
267836Di2015UniqueSeparatorusing (File.Create(file1)) {}Di2015NewLine
267964Di2015UniqueSeparatorIEnumerable
267964Di2015UniqueSeparatorIEnumerable<T>
267964Di2015UniqueSeparator_resources.Cast<LanguageEditorResource>().Where(r => r.IsDirty)Di2015NewLine
267964Di2015UniqueSeparatorEnumerable.Where
267964Di2015UniqueSeparatorIEnumerable<T>
267964Di2015UniqueSeparatorIEnumerable
267964Di2015UniqueSeparatorCast<T>
267964Di2015UniqueSeparatorOfType<T>
267964Di2015UniqueSeparatorCast<T>
267964Di2015UniqueSeparatorT
267964Di2015UniqueSeparatorOfType<T>
267964Di2015UniqueSeparatorT
267964Di2015UniqueSeparatorLanguageEditorResource
267964Di2015UniqueSeparatorCast<T>
267964Di2015UniqueSeparatorWhere
267964Di2015UniqueSeparatorIEnumerable<LanguageResource>
267964Di2015UniqueSeparatorCast<T>
267964Di2015UniqueSeparatoryield return
267964Di2015UniqueSeparatorT : LanguageResource
267964Di2015UniqueSeparatorT
267964Di2015UniqueSeparatorDictionary<string,T>
267964Di2015UniqueSeparatorIEnumerable<T>
267964Di2015UniqueSeparatorICollection<T>
268034Di2015UniqueSeparator        System.IO.MemoryStream stream = new System.IO.MemoryStream();Di2015NewLine        newBMP.Save(stream, System.Drawing.Imaging.ImageFormat.Bmp);Di2015NewLineDi2015NewLine        PHJProjectPhoto myPhoto =Di2015NewLine            new PHJProjectPhotoDi2015NewLine            {Di2015NewLine                ProjectPhoto = stream.ToArray(), // <<--- This will convert your stream to a byte[]Di2015NewLine                OrderDate = DateTime.Now,Di2015NewLine                ProjectPhotoCaption = ProjectPhotoCaptionTextBox.Text,Di2015NewLine                ProjectId = selectedProjectIdDi2015NewLine            };Di2015NewLine
268083Di2015UniqueSeparatorAdd(key,value)
268083Di2015UniqueSeparatorthis[key]
268083Di2015UniqueSeparatorAdd(KeyValuePair<,>)
268083Di2015UniqueSeparatorIDictionary<string, int>
268083Di2015UniqueSeparatorDictionary<string, int> PropertyIDs = new Dictionary<string, int> {Di2015NewLine  {"abc",1}, {"def",2}, {"ghi",3}Di2015NewLine}Di2015NewLine
268083Di2015UniqueSeparatorAdd(key,value)
268187Di2015UniqueSeparatordouble getPayAmount() {Di2015NewLine    double result;Di2015NewLine    if (_isDead) result = deadAmount();Di2015NewLine    else {Di2015NewLine    \if (_isSeparated) result = separatedAmount();Di2015NewLine    \else {Di2015NewLine    \\if (_isRetired) result = retiredAmount();Di2015NewLine    \\else result = normalPayAmount();Di2015NewLine    \};Di2015NewLine    }Di2015NewLine     return result;Di2015NewLine};Di2015NewLine
268187Di2015UniqueSeparator_isDead
268187Di2015UniqueSeparatordouble getPayAmount() {Di2015NewLine    if (_isDead) return deadAmount();Di2015NewLine    if (_isSeparated) return separatedAmount();Di2015NewLine    if (_isRetired) return retiredAmount();Di2015NewLine    return normalPayAmount();Di2015NewLine};Di2015NewLine
268223Di2015UniqueSeparatorswitch (myString)Di2015NewLine{Di2015NewLine   case "cat": return 0;Di2015NewLine   case "dog": return 1;Di2015NewLine   case "elephant": return 3;Di2015NewLine}Di2015NewLine
268353Di2015UniqueSeparator        textBox1.Multiline = true;Di2015NewLine        textBox1.Anchor = AnchorStyles.Top | AnchorStyles.Right | AnchorStyles.Left | AnchorStyles.Bottom;Di2015NewLine
268472Di2015UniqueSeparatorChangeTracker
268472Di2015UniqueSeparatorServices
268529Di2015UniqueSeparatorDateTime.Now.ToString("ggyyyy$dd-MMM (dddd)")Di2015NewLine
268529Di2015UniqueSeparatorDateTime.ParseExact()
268545Di2015UniqueSeparator/// <summary>Di2015NewLine/// This is a dictionary guaranteed to have only one of each value and key. Di2015NewLine/// It may be searched either by TFirst or by TSecond, giving a unique answer because it is 1 to 1.Di2015NewLine/// </summary>Di2015NewLine/// <typeparam name="TFirst">The type of the "key"</typeparam>Di2015NewLine/// <typeparam name="TSecond">The type of the "value"</typeparam>Di2015NewLinepublic class BiDictionaryOneToOne<TFirst, TSecond>Di2015NewLine{Di2015NewLine    IDictionary<TFirst, TSecond> firstToSecond = new Dictionary<TFirst, TSecond>();Di2015NewLine    IDictionary<TSecond, TFirst> secondToFirst = new Dictionary<TSecond, TFirst>();Di2015NewLineDi2015NewLine    #region Exception throwing methodsDi2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Tries to add the pair to the dictionary.Di2015NewLine    /// Throws an exception if either element is already in the dictionaryDi2015NewLine    /// </summary>Di2015NewLine    /// <param name="first"></param>Di2015NewLine    /// <param name="second"></param>Di2015NewLine    public void Add(TFirst first, TSecond second)Di2015NewLine    {Di2015NewLine        if (firstToSecond.ContainsKey(first) || secondToFirst.ContainsKey(second))Di2015NewLine            throw new ArgumentException("Duplicate first or second");Di2015NewLineDi2015NewLine        firstToSecond.Add(first, second);Di2015NewLine        secondToFirst.Add(second, first);Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Find the TSecond corresponding to the TFirst firstDi2015NewLine    /// Throws an exception if first is not in the dictionary.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="first">the key to search for</param>Di2015NewLine    /// <returns>the value corresponding to first</returns>Di2015NewLine    public TSecond GetByFirst(TFirst first)Di2015NewLine    {Di2015NewLine        TSecond second;Di2015NewLine        if (!firstToSecond.TryGetValue(first, out second))Di2015NewLine            throw new ArgumentException("first");Di2015NewLineDi2015NewLine        return second; Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Find the TFirst corresponing to the Second second.Di2015NewLine    /// Throws an exception if second is not in the dictionary.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="second">the key to search for</param>Di2015NewLine    /// <returns>the value corresponding to second</returns>Di2015NewLine    public TFirst GetBySecond(TSecond second)Di2015NewLine    {Di2015NewLine        TFirst first;Di2015NewLine        if (!secondToFirst.TryGetValue(second, out first))Di2015NewLine            throw new ArgumentException("second");Di2015NewLineDi2015NewLine        return first; Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Remove the record containing first.Di2015NewLine    /// If first is not in the dictionary, throws an Exception.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="first">the key of the record to delete</param>Di2015NewLine    public void RemoveByFirst(TFirst first)Di2015NewLine    {Di2015NewLine        TSecond second;Di2015NewLine        if (!firstToSecond.TryGetValue(first, out second))Di2015NewLine            throw new ArgumentException("first");Di2015NewLineDi2015NewLine        firstToSecond.Remove(first);Di2015NewLine        secondToFirst.Remove(second);Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Remove the record containing second.Di2015NewLine    /// If second is not in the dictionary, throws an Exception.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="second">the key of the record to delete</param>Di2015NewLine    public void RemoveBySecond(TSecond second)Di2015NewLine    {Di2015NewLine        TFirst first;Di2015NewLine        if (!secondToFirst.TryGetValue(second, out first))Di2015NewLine            throw new ArgumentException("second");Di2015NewLineDi2015NewLine        secondToFirst.Remove(second);Di2015NewLine        firstToSecond.Remove(first);Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region Try methodsDi2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Tries to add the pair to the dictionary.Di2015NewLine    /// Returns false if either element is already in the dictionary        Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="first"></param>Di2015NewLine    /// <param name="second"></param>Di2015NewLine    /// <returns>true if successfully added, false if either element are already in the dictionary</returns>Di2015NewLine    public Boolean TryAdd(TFirst first, TSecond second)Di2015NewLine    {Di2015NewLine        if (firstToSecond.ContainsKey(first) || secondToFirst.ContainsKey(second))Di2015NewLine            return false;Di2015NewLineDi2015NewLine        firstToSecond.Add(first, second);Di2015NewLine        secondToFirst.Add(second, first);Di2015NewLine        return true;Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Find the TSecond corresponding to the TFirst first.Di2015NewLine    /// Returns false if first is not in the dictionary.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="first">the key to search for</param>Di2015NewLine    /// <param name="second">the corresponding value</param>Di2015NewLine    /// <returns>true if first is in the dictionary, false otherwise</returns>Di2015NewLine    public Boolean TryGetByFirst(TFirst first, out TSecond second)Di2015NewLine    {Di2015NewLine        return firstToSecond.TryGetValue(first, out second);Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Find the TFirst corresponding to the TSecond second.Di2015NewLine    /// Returns false if second is not in the dictionary.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="second">the key to search for</param>Di2015NewLine    /// <param name="first">the corresponding value</param>Di2015NewLine    /// <returns>true if second is in the dictionary, false otherwise</returns>Di2015NewLine    public Boolean TryGetBySecond(TSecond second, out TFirst first)Di2015NewLine    {Di2015NewLine        return secondToFirst.TryGetValue(second, out first);Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Remove the record containing first, if there is one.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="first"></param>Di2015NewLine    /// <returns> If first is not in the dictionary, returns false, otherwise true</returns>Di2015NewLine    public Boolean TryRemoveByFirst(TFirst first)Di2015NewLine    {Di2015NewLine        TSecond second;Di2015NewLine        if (!firstToSecond.TryGetValue(first, out second))Di2015NewLine            return false;Di2015NewLineDi2015NewLine        firstToSecond.Remove(first);Di2015NewLine        secondToFirst.Remove(second);Di2015NewLine        return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Remove the record containing second, if there is one.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="second"></param>Di2015NewLine    /// <returns> If second is not in the dictionary, returns false, otherwise true</returns>Di2015NewLine    public Boolean TryRemoveBySecond(TSecond second)Di2015NewLine    {Di2015NewLine        TFirst first;Di2015NewLine        if (!secondToFirst.TryGetValue(second, out first))Di2015NewLine            return false;Di2015NewLineDi2015NewLine        secondToFirst.Remove(second);Di2015NewLine        firstToSecond.Remove(first);Di2015NewLine        return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregion        Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// The number of pairs stored in the dictionaryDi2015NewLine    /// </summary>Di2015NewLine    public Int32 CountDi2015NewLine    {Di2015NewLine        get { return firstToSecond.Count; }Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Removes all items from the dictionary.Di2015NewLine    /// </summary>Di2015NewLine    public void Clear()Di2015NewLine    {Di2015NewLine        firstToSecond.Clear();Di2015NewLine        secondToFirst.Clear();Di2015NewLine    }Di2015NewLine}Di2015NewLine
268576Di2015UniqueSeparatorAbstractEventDebugger
268576Di2015UniqueSeparatorSearch
268576Di2015UniqueSeparatorevent
268576Di2015UniqueSeparatorIdentifyEvent
268576Di2015UniqueSeparatordynamic type
268576Di2015UniqueSeparatorTypeBuilder
268576Di2015UniqueSeparatordebugger
268576Di2015UniqueSeparatorReflection.Emit.MethodBuilder
268576Di2015UniqueSeparatorIdentifyEvent
268576Di2015UniqueSeparatorReflection.Emit
268576Di2015UniqueSeparatorCustomAttributeBuilder
268576Di2015UniqueSeparatordynamic
268576Di2015UniqueSeparator:)
268582Di2015UniqueSeparatorswitch(foo)Di2015NewLine{Di2015NewLine   case bar:      Do1(); break;Di2015NewLine   case foobar_2: Do2(); break;Di2015NewLine}Di2015NewLine
268613Di2015UniqueSeparatorDefaultButton
268697Di2015UniqueSeparatorfunction startAutoComplete() {Di2015NewLine}Di2015NewLine
268697Di2015UniqueSeparatorpublic ActionResult GetSuggestions(string searchText)Di2015NewLine{Di2015NewLine    return Json(new {SearchText = searchText});Di2015NewLine}Di2015NewLine
268697Di2015UniqueSeparatorhttp://localhost/mycontroller/GetSuggestions?searchText=FooDi2015NewLine
268697Di2015UniqueSeparatorfunction startAutoComplete() {Di2015NewLine    var searchText = $("#myeditorid").text();Di2015NewLine    $.getJSON("/mycontroller/GetSuggestions?searchText=" + searchText,Di2015NewLine        null,Di2015NewLine        autoCompleteResponse);Di2015NewLine}Di2015NewLine
268697Di2015UniqueSeparatorfunction autoCompleteResponse(data) {Di2015NewLine    if (data.SearchText)Di2015NewLine    {Di2015NewLine        $("#myeditorid").text(data.SearchText);Di2015NewLine    }Di2015NewLine}Di2015NewLine
268699Di2015UniqueSeparatorToArray()
268699Di2015UniqueSeparatorIEnumerable query = ...;Di2015NewLineMyEntityType[] array = query.Cast<MyEntityType>().ToArray();Di2015NewLine
268699Di2015UniqueSeparatorpublic static void T[] PerformQuery<T>()Di2015NewLine{Di2015NewLine    IEnumerable query = ...;Di2015NewLine    T[] array = query.Cast<T>().ToArray();Di2015NewLine    return array;Di2015NewLine}Di2015NewLine
268829Di2015UniqueSeparatorDi2015NewLine.method public hidebysig virtual instance void OnEventConsumed(object sender, class [mscorlib]System.EventArgs e) cil managedDi2015NewLine    {Di2015NewLine        .maxstack 8Di2015NewLine        L_0000: nop Di2015NewLine        L_0001: ldarg.0 Di2015NewLine        L_0002: ldarg.1 Di2015NewLine        L_0003: ldarg.2 Di2015NewLine        L_0004: call instance void SubclassSpike.BaseClass::OnEventConsumed(object, class [mscorlib]System.EventArgs)Di2015NewLine        L_0009: nop Di2015NewLine        L_000a: ret Di2015NewLine    }Di2015NewLine
268888Di2015UniqueSeparatorMyTable record = new MyTable();Di2015NewLinerecord.Name = "James Curran";Di2015NewLinedb.MyTable.InsertOnSubmit(record);Di2015NewLinedb.SubmitChanges();Di2015NewLineConsole.WriteLine("record inserted as ID : {0}", record.Id);Di2015NewLine
268905Di2015UniqueSeparator[StructLayout(LayoutKind.Explicit, Size=4)]Di2015NewLineprivate struct IntFloat {Di2015NewLine    [FieldOffset(0)]Di2015NewLine    public float floatValue;Di2015NewLineDi2015NewLine    [FieldOffset(0)]Di2015NewLine    public int intValue;Di2015NewLineDi2015NewLine    // redundant assignment to avoid any complaints about uninitialized membersDi2015NewLine    IntFloat(int x) {Di2015NewLine        floatValue = 0;Di2015NewLine        intValue = x;Di2015NewLine    }Di2015NewLineDi2015NewLine    IntFloat(float x) { Di2015NewLine        intValue = 0;Di2015NewLine        floatValue = x;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static explicit operator float (IntFloat x) {Di2015NewLine        return x.floatValue;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static explicit operator int (IntFloat x) { Di2015NewLine        return x.intValue;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static explicit operator IntFloat (int i) {Di2015NewLine        return new IntFloat(i);Di2015NewLine    }Di2015NewLine    public static explicit operator IntFloat (float f) { Di2015NewLine        return new IntFloat(f);Di2015NewLine    }Di2015NewLine}Di2015NewLine
268993Di2015UniqueSeparatorDataContext Constructor (IDbConnection)
268993Di2015UniqueSeparatorDispose()
268993Di2015UniqueSeparator    protected override void Dispose(bool disposing)Di2015NewLine    {Di2015NewLine        if(disposing && this.Connection != null && this.Connection.State == ConnectionState.Open)Di2015NewLine        {Di2015NewLine            this.Connection.Close();Di2015NewLine            this.Connection.Dispose();Di2015NewLine        }Di2015NewLine        base.Dispose(disposing);Di2015NewLine    }Di2015NewLine
268993Di2015UniqueSeparatorusing(var conn = GetConnection())Di2015NewLine{Di2015NewLine   // snip: some stuff involving connDi2015NewLineDi2015NewLine   using(var ctx = new FooContext(conn))Di2015NewLine   {Di2015NewLine       // snip: some stuff involving ctxDi2015NewLine   }Di2015NewLineDi2015NewLine   // snip: some more stuff involving connDi2015NewLine}Di2015NewLine
269070Di2015UniqueSeparatorSelect
269070Di2015UniqueSeparatorvar list = FileList.Select((file, index) => new { Index=index, Filename=file });Di2015NewLine
269100Di2015UniqueSeparator    //Extract undo managerDi2015NewLine    if (m_undoManager == null) Di2015NewLine    {Di2015NewLine      IServiceProvider serviceProvider = Document as IServiceProvider;Di2015NewLineDi2015NewLine      Guid undoManagerGuid = typeof(IOleUndoManager).GUID;Di2015NewLine      Guid undoManagerGuid2 = typeof(IOleUndoManager).GUID;Di2015NewLine      IntPtr undoManagerPtr = ComSupport.NullIntPtr;Di2015NewLineDi2015NewLine      int hr = serviceProvider.QueryService(ref undoManagerGuid2, ref undoManagerGuid, out undoManagerPtr);Di2015NewLine      if ((hr == HRESULT.S_OK) && (undoManagerPtr != ComSupport.NullIntPtr))Di2015NewLine      {Di2015NewLine        m_undoManager = (IOleUndoManager)Marshal.GetObjectForIUnknown(undoManagerPtr);Di2015NewLine        Marshal.Release(undoManagerPtr);Di2015NewLine      }Di2015NewLine    }Di2015NewLineDi2015NewLine    //And to clear the stack Di2015NewLine    m_undoManager.Enable(true);Di2015NewLine    Application.DoEvents();Di2015NewLine
269113Di2015UniqueSeparatorpublic class ObservableCollectionEx<T> : ObservableCollection<T> where T : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    protected override void OnCollectionChanged(NotifyCollectionChangedEventArgs e)Di2015NewLine    {Di2015NewLine        Unsubscribe(e.OldItems);Di2015NewLine        Subscribe(e.NewItems);Di2015NewLine        base.OnCollectionChanged(e);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void ClearItems()Di2015NewLine    {Di2015NewLine        foreach(T element in this)Di2015NewLine            element.PropertyChanged -= ContainedElementChanged;Di2015NewLineDi2015NewLine        base.ClearItems();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Subscribe(IList iList)Di2015NewLine    {Di2015NewLine        if (iList != null)Di2015NewLine        {Di2015NewLine            foreach (T element in iList)Di2015NewLine                element.PropertyChanged += ContainedElementChanged;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Unsubscribe(IList iList)Di2015NewLine    {Di2015NewLine        if (iList != null)Di2015NewLine        {Di2015NewLine            foreach (T element in iList)Di2015NewLine                element.PropertyChanged -= ContainedElementChanged;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void ContainedElementChanged(object sender, PropertyChangedEventArgs e)Di2015NewLine    {Di2015NewLine        OnPropertyChanged(e);Di2015NewLine    }Di2015NewLine}Di2015NewLine
269113Di2015UniqueSeparatorObservableCollectionEx<Element> collection = new ObservableCollectionEx<Element>();Di2015NewLine((INotifyPropertyChanged)collection).PropertyChanged += (x,y) => ReactToChange();Di2015NewLine
269113Di2015UniqueSeparator  // work on original instanceDi2015NewLine  ObservableCollection<TestObject> col = new ObservableCollectionEx<TestObject>();Di2015NewLine  ((INotifyPropertyChanged)col).PropertyChanged += (s, e) => { Trace.WriteLine("Changed " + e.PropertyName); };Di2015NewLineDi2015NewLine  var test = new TestObject();Di2015NewLine  col.Add(test); // no event raisedDi2015NewLine  test.Info = "NewValue"; //Info property changed raisedDi2015NewLineDi2015NewLine  // working on explicit instanceDi2015NewLine  ObservableCollectionEx<TestObject> col = new ObservableCollectionEx<TestObject>();Di2015NewLine  col.PropertyChanged += (s, e) => { Trace.WriteLine("Changed " + e.PropertyName); };Di2015NewLineDi2015NewLine  var test = new TestObject();Di2015NewLine  col.Add(test); // Count and Item [] property changed raisedDi2015NewLine  test.Info = "NewValue"; //no event raisedDi2015NewLine
269156Di2015UniqueSeparator0xffff
269358Di2015UniqueSeparatorDataTable
269358Di2015UniqueSeparator//pseudo code:Di2015NewLineDi2015NewLineDataTable dt = new DataTable();Di2015NewLineDataColumn dc = new DataColumn("column1");Di2015NewLineDi2015NewLineDataRow dr = dt.NewRow();Di2015NewLinedr["column1"] = "value1";Di2015NewLinedt.Rows.AddNew(dr);Di2015NewLineDi2015NewLinemyDataGrid.DataSource = dt;Di2015NewLinemyDataGrid.DataBind();Di2015NewLine
269385Di2015UniqueSeparatordgvCalls.Columns.Insert(1, msisnnColumn);Di2015NewLinemsisnnColumn.CellTemplate = new DataGridViewTextBoxCell();Di2015NewLine
269472Di2015UniqueSeparatorStringBuilder sb = new StringBuilder()Di2015NewLinesb.AppendLine( "<script>" );Di2015NewLinesb.AppendLine( "var pageTracker = _gat._getTracker('UA-XXXXX-1');" );Di2015NewLinesb.AppendLine( "pageTracker._trackPageview();" );Di2015NewLinesb.AppendFormat( "pageTracker._addTrans('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}' );\\n", orderId, affiliation, total, tax, shipping, city, state, country );Di2015NewLinesb.AppendFormat( "pageTracker._addItem('{0}','{1}','{2}','{3}','{4}','{5}');\\n", itemNumber, sku, productName, category, price, quantity );Di2015NewLinesb.AppendLine("pageTracker._trackTrans();");Di2015NewLinesb.AppendLine( "</script>" );Di2015NewLine
269472Di2015UniqueSeparatorPage.RegisterStartupScript("someKey", sb.ToString());Di2015NewLine
269624Di2015UniqueSeparatorDim CC As New ClearCase.Application Di2015NewLineDim labelID As StringDi2015NewLineSet aVersion = CC.Version("[Path-To]\\BuildDCP.bat");Di2015NewLineSet someLabels = Ver.Labels;Di2015NewLineIf (someLabels.Count > 0) Then Di2015NewLine    ' the first label listed is the most recently appliedDi2015NewLine    labelID = someLabels.Item(1).Type.NameDi2015NewLineEndIfDi2015NewLine
269879Di2015UniqueSeparatorWhere
269879Di2015UniqueSeparatorSelect
269879Di2015UniqueSeparatorOrderBy
270060Di2015UniqueSeparatorConfigurationManager
270060Di2015UniqueSeparatorConfigurationManager
270060Di2015UniqueSeparatorSystem.Environment.SpecialFolder.LocalApplicationData
270060Di2015UniqueSeparatorSystem.Environment.SpecialFolder.LocalApplicationData
270060Di2015UniqueSeparatorConfigurationManager
270060Di2015UniqueSeparatorSettings
270060Di2015UniqueSeparatorapp.config
270106Di2015UniqueSeparatorprivate Form1 m_form1;Di2015NewLineprivate bool m_underConstruction = false;Di2015NewLineDi2015NewLineprivate void ShowForm1()Di2015NewLine{Di2015NewLine    if (m_underConstruction)Di2015NewLine    {Di2015NewLine        // We're about to show it anywayDi2015NewLine        return;Di2015NewLine    }Di2015NewLine    m_underConstruction = true;Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        if (m_form1 == null)Di2015NewLine        {Di2015NewLine            m_form1 = new Form1();Di2015NewLine            m_form1.FormClosed += new FormClosedEventHandler(m_form1_FormClosed);Di2015NewLine            m_form1.Show();Di2015NewLine        }Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        m_underConstruction = false;Di2015NewLine    }Di2015NewLine    m_form1.BringToFront();Di2015NewLine    m_form1.Activate();Di2015NewLine}Di2015NewLine
270231Di2015UniqueSeparatorclass MyCustomAttribute : Attribute {Di2015NewLine    public int[] Values { get; set; }Di2015NewLineDi2015NewLine    public MyCustomAttribute(params int[] values) {Di2015NewLine       this.Values = values;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine[MyCustomAttribute(3, 4, 5)]Di2015NewLineclass MyClass { }Di2015NewLine
270231Di2015UniqueSeparatorclass MyCustomAttribute : Attribute {Di2015NewLine    public int[] Values { get; set; }Di2015NewLineDi2015NewLine    public MyCustomAttribute(int[] values) {Di2015NewLine       this.Values = values;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine[MyCustomAttribute(new int[] { 3, 4, 5 })]Di2015NewLineclass MyClass { }Di2015NewLine
270269Di2015UniqueSeparator<List.Resources>Di2015NewLine    <Style TargetType="ListBoxItem">Di2015NewLine        <Setter Di2015NewLine            Property="IsSelected" Di2015NewLine            Value="{Binding Di2015NewLine                        Path=DataContext.Selected, Di2015NewLine                        RelativeSource={RelativeSource Self}}" Di2015NewLine            />Di2015NewLine    </Style>Di2015NewLine</List.Resources>Di2015NewLine
270417Di2015UniqueSeparator<fb:name uid="00101010101"/>
270417Di2015UniqueSeparatorpublic  class FbName:System.Web.UI.WebControls.WebControlDi2015NewLine{Di2015NewLineDi2015NewLine    protected override string TagNameDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return "fb:name";Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void RenderControl(HtmlTextWriter writer)Di2015NewLine    {  Di2015NewLine        RenderBeginTag(writer);// render only the begin tag.Di2015NewLine        //base.RenderContents(writer);Di2015NewLine        //base.RenderEndTag(writer);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void RenderBeginTag(HtmlTextWriter writer)Di2015NewLine    {Di2015NewLine        writer.Write("<" + this.TagName);Di2015NewLine        writer.WriteAttribute("uid", "00101010101");Di2015NewLine        writer.Write("/>");Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
270576Di2015UniqueSeparatorpublic static Stream BuildRDLCStream(Di2015NewLine    DataSet data, string name, string reportXslPath)Di2015NewLine{Di2015NewLine  using (MemoryStream schemaStream = new MemoryStream())Di2015NewLine  {Di2015NewLine    // save the schema to a streamDi2015NewLine    data.WriteXmlSchema(schemaStream);Di2015NewLine    schemaStream.Seek(0, SeekOrigin.Begin);Di2015NewLineDi2015NewLine    // load it into a Document and set the Name variableDi2015NewLine    XmlDocument xmlDomSchema = new XmlDocument();Di2015NewLine    xmlDomSchema.Load(schemaStream);        Di2015NewLine    xmlDomSchema.DocumentElement.SetAttribute("Name", data.DataSetName);Di2015NewLineDi2015NewLine    // load the report's XSL file (that's the magic)Di2015NewLine    XslCompiledTransform xform = new XslCompiledTransform();Di2015NewLine    xform.Load(reportXslPath);Di2015NewLineDi2015NewLine    // do the transformDi2015NewLine    MemoryStream rdlcStream = new MemoryStream();Di2015NewLine    XmlWriter writer = XmlWriter.Create(rdlcStream);Di2015NewLine    xform.Transform(xmlDomSchema, writer);Di2015NewLine    writer.Close();Di2015NewLine    rdlcStream.Seek(0, SeekOrigin.Begin);Di2015NewLineDi2015NewLine    // send back the RDLCDi2015NewLine    return rdlcStream;Di2015NewLine  }Di2015NewLine}Di2015NewLine
270576Di2015UniqueSeparatords.DataSetName = name;Di2015NewLineDi2015NewLineStream rdlc = RdlcEngine.BuildRDLCStream(Di2015NewLine    ds, name, "c:\\\\temp\\\\rdlc\\\\report.xsl");Di2015NewLineDi2015NewLinereportView.LocalReport.LoadReportDefinition(rdlc);Di2015NewLinereportView.LocalReport.DataSources.Clear();Di2015NewLinereportView.LocalReport.DataSources.Add(Di2015NewLine    new ReportDataSource(ds.DataSetName, ds.Tables[0]));Di2015NewLinereportView.RefreshReport();Di2015NewLine
270576Di2015UniqueSeparator\<?xml version="1.0"?>Di2015NewLine\<!-- Stylesheet for creating ReportViewer RDLC documents -->Di2015NewLine\<xsl:stylesheet version="1.0"Di2015NewLine\  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"Di2015NewLine\  xmlns:msxsl="urn:schemas-microsoft-com:xslt"Di2015NewLine\  xmlns:xs="http://www.w3.org/2001/XMLSchema"Di2015NewLine\  xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"Di2015NewLine\  xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner"  xmlns="http://schemas.microsoft.com/sqlserver/reporting/2005/01/reportdefinition"Di2015NewLine\  >Di2015NewLineDi2015NewLine\ <xsl:variable name="mvarName" select="/xs:schema/@Name"/>Di2015NewLine\ <xsl:variable name="mvarFontSize">8pt</xsl:variable>Di2015NewLine\ <xsl:variable name="mvarFontWeight">500</xsl:variable>Di2015NewLine\ <xsl:variable name="mvarFontWeightBold">700</xsl:variable>Di2015NewLineDi2015NewLineDi2015NewLine\ <xsl:template match="/">Di2015NewLine\  <xsl:apply-templates select="/xs:schema/xs:element/xs:complexType/xs:choice/xs:element/xs:complexType/xs:sequence">Di2015NewLine\  </xsl:apply-templates>Di2015NewLine\ </xsl:template>Di2015NewLineDi2015NewLine\ <xsl:template match="xs:sequence">Di2015NewLine\  <Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2005/01/reportdefinition">Di2015NewLine\   <BottomMargin>1in</BottomMargin>Di2015NewLine\   <RightMargin>1in</RightMargin>Di2015NewLine\   <LeftMargin>1in</LeftMargin>Di2015NewLine\   <TopMargin>1in</TopMargin>Di2015NewLine\   <InteractiveHeight>11in</InteractiveHeight>Di2015NewLine\   <InteractiveWidth>8.5in</InteractiveWidth>Di2015NewLine\   <Width>6.5in</Width>Di2015NewLine\   <Language>en-US</Language>Di2015NewLine\   <rd:DrawGrid>true</rd:DrawGrid>Di2015NewLine\   <rd:SnapToGrid>true</rd:SnapToGrid>Di2015NewLine\   <rd:ReportID>7358b654-3ca3-44a0-8677-efe0a55c7c45</rd:ReportID>Di2015NewLineDi2015NewLine\   <xsl:call-template name="BuildDataSource">Di2015NewLine\   </xsl:call-template>Di2015NewLineDi2015NewLine\   <xsl:call-template name="BuildDataSet">Di2015NewLine\   </xsl:call-template>Di2015NewLineDi2015NewLine\   <Body>Di2015NewLine\    <Height>0.50in</Height>Di2015NewLine\    <ReportItems>Di2015NewLine\     <Table Name="table1">Di2015NewLine\      <DataSetName><xsl:value-of select="$mvarName" /></DataSetName>Di2015NewLine\      <Top>0.5in</Top>Di2015NewLine\      <Height>0.50in</Height>Di2015NewLine\      <Header>Di2015NewLine\       <TableRows>Di2015NewLine\        <TableRow>Di2015NewLine\         <Height>0.25in</Height>Di2015NewLine\         <TableCells>Di2015NewLineDi2015NewLine\          <xsl:apply-templates select="xs:element" mode="HeaderTableCell">Di2015NewLine\          </xsl:apply-templates>Di2015NewLineDi2015NewLine\         </TableCells>Di2015NewLine\        </TableRow>Di2015NewLine\       </TableRows>Di2015NewLine\      </Header>Di2015NewLine\      <Details>Di2015NewLine\       <TableRows>Di2015NewLine\        <TableRow>Di2015NewLine\         <Height>0.25in</Height>Di2015NewLine\         <TableCells>Di2015NewLineDi2015NewLine\          <xsl:apply-templates select="xs:element" mode="DetailTableCell">Di2015NewLine\          </xsl:apply-templates>Di2015NewLineDi2015NewLine\         </TableCells>Di2015NewLine\        </TableRow>Di2015NewLine\       </TableRows>Di2015NewLine\      </Details>Di2015NewLine\      <TableColumns>Di2015NewLineDi2015NewLine\       <xsl:apply-templates select="xs:element" mode="TableColumn">Di2015NewLine\       </xsl:apply-templates>Di2015NewLineDi2015NewLine\      </TableColumns>Di2015NewLine\     </Table>Di2015NewLine\    </ReportItems>Di2015NewLine\   </Body>Di2015NewLine\  </Report>Di2015NewLine\ </xsl:template>Di2015NewLineDi2015NewLine\ <xsl:template name="BuildDataSource">Di2015NewLine\  <DataSources>Di2015NewLine\   <DataSource Name="DummyDataSource">Di2015NewLine\    <ConnectionProperties>Di2015NewLine\     <ConnectString/>Di2015NewLine\     <DataProvider>SQL</DataProvider>Di2015NewLine\    </ConnectionProperties>Di2015NewLine\    <rd:DataSourceID>84635ff8-d177-4a25-9aa5-5a921652c79c</rd:DataSourceID>Di2015NewLine\   </DataSource>Di2015NewLine\  </DataSources>Di2015NewLine\ </xsl:template>Di2015NewLineDi2015NewLine\ <xsl:template name="BuildDataSet">Di2015NewLine\  <DataSets>Di2015NewLine\   <DataSet Name="{$mvarName}">Di2015NewLine\    <Query>Di2015NewLine\     <rd:UseGenericDesigner>true</rd:UseGenericDesigner>Di2015NewLine\     <CommandText/>Di2015NewLine\     <DataSourceName>DummyDataSource</DataSourceName>Di2015NewLine\    </Query>Di2015NewLine\    <Fields>Di2015NewLineDi2015NewLine\     <xsl:apply-templates select="xs:element" mode="Field">Di2015NewLine\     </xsl:apply-templates>Di2015NewLineDi2015NewLine\    </Fields>Di2015NewLine\   </DataSet>Di2015NewLine\  </DataSets>Di2015NewLine\ </xsl:template>Di2015NewLineDi2015NewLine\ <xsl:template match="xs:element" mode="Field">Di2015NewLine\  <xsl:variable name="varFieldName"> Di2015NewLine\   <xsl:value-of select="@name" />Di2015NewLine\  </xsl:variable>Di2015NewLineDi2015NewLine\  <xsl:variable name="varDataType">Di2015NewLine\   <xsl:choose>Di2015NewLine\    <xsl:when test="@type='xs:int'">System.Int32</xsl:when>Di2015NewLine\    <xsl:when test="@type='xs:string'">System.String</xsl:when>Di2015NewLine\    <xsl:when test="@type='xs:dateTime'">System.DateTime</xsl:when>Di2015NewLine\    <xsl:when test="@type='xs:boolean'">System.Boolean</xsl:when>Di2015NewLine\   </xsl:choose>Di2015NewLine\  </xsl:variable>Di2015NewLineDi2015NewLine\  <Field Name="{$varFieldName}">Di2015NewLine\   <rd:TypeName><xsl:value-of select="$varDataType"/></rd:TypeName>Di2015NewLine\   <DataField><xsl:value-of select="$varFieldName"/></DataField>Di2015NewLine\  </Field>Di2015NewLine\ </xsl:template>Di2015NewLineDi2015NewLine\ <xsl:template match="xs:element" mode="HeaderTableCell">Di2015NewLine\  <xsl:variable name="varFieldName"> Di2015NewLine\   <xsl:value-of select="@name" />Di2015NewLine\  </xsl:variable>Di2015NewLineDi2015NewLine\  <TableCell>Di2015NewLine\   <ReportItems>Di2015NewLine\    <Textbox Name="textbox{position()}">Di2015NewLine\     <rd:DefaultName>textbox<xsl:value-of select="position()"/>Di2015NewLine\     </rd:DefaultName>Di2015NewLine\     <Value><xsl:value-of select="$varFieldName"/></Value>Di2015NewLine\     <CanGrow>true</CanGrow>Di2015NewLine\     <ZIndex>7</ZIndex>Di2015NewLine\     <Style>Di2015NewLine\      <TextAlign>Center</TextAlign>Di2015NewLine\      <PaddingLeft>2pt</PaddingLeft>Di2015NewLine\      <PaddingBottom>2pt</PaddingBottom>Di2015NewLine\      <PaddingRight>2pt</PaddingRight>Di2015NewLine\      <PaddingTop>2pt</PaddingTop>Di2015NewLine\      <FontSize><xsl:value-of select="$mvarFontSize"/></FontSize> Di2015NewLine\      <FontWeight><xsl:value-of select="$mvarFontWeightBold"/></FontWeight> Di2015NewLine\      <BackgroundColor>#000000</BackgroundColor> Di2015NewLine\      <Color>#ffffff</Color>Di2015NewLine\      <BorderColor>Di2015NewLine\       <Default>#ffffff</Default>Di2015NewLine\      </BorderColor>Di2015NewLine\      <BorderStyle>Di2015NewLine\       <Default>Solid</Default>Di2015NewLine\      </BorderStyle>Di2015NewLine\     </Style>Di2015NewLine\    </Textbox>Di2015NewLine\   </ReportItems>Di2015NewLine\  </TableCell>Di2015NewLine\ </xsl:template>Di2015NewLineDi2015NewLine\ <xsl:template match="xs:element" mode="DetailTableCell">Di2015NewLine\  <xsl:variable name="varFieldName"> Di2015NewLine\   <xsl:value-of select="@name" />Di2015NewLine\  </xsl:variable>Di2015NewLineDi2015NewLine\  <TableCell>Di2015NewLine\   <ReportItems>Di2015NewLine\    <Textbox Name="{$varFieldName}">Di2015NewLine\     <rd:DefaultName><xsl:value-of select="$varFieldName"/></rd:DefaultName>Di2015NewLine\     <Value>=Fields!<xsl:value-of select="$varFieldName"/>.Value</Value>Di2015NewLine\     <CanGrow>true</CanGrow>Di2015NewLine\     <ZIndex>7</ZIndex>Di2015NewLine\     <Style>Di2015NewLine\      <TextAlign>Left</TextAlign>Di2015NewLine\      <PaddingLeft>2pt</PaddingLeft>Di2015NewLine\      <PaddingBottom>2pt</PaddingBottom>Di2015NewLine\      <PaddingRight>2pt</PaddingRight>Di2015NewLine\      <PaddingTop>2pt</PaddingTop>Di2015NewLine\      <FontSize><xsl:value-of select="$mvarFontSize"/></FontSize> Di2015NewLine\      <FontWeight><xsl:value-of select="$mvarFontWeight"/></FontWeight> Di2015NewLine\      <BackgroundColor>#e0e0e0</BackgroundColor> Di2015NewLine\      <Color>#000000</Color> Di2015NewLine\      <BorderColor>Di2015NewLine\       <Default>#ffffff</Default> Di2015NewLine\      </BorderColor>Di2015NewLine\      <BorderStyle>Di2015NewLine\        <Default>Solid</Default>Di2015NewLine\      </BorderStyle>Di2015NewLine\     </Style>Di2015NewLine\    </Textbox>Di2015NewLine\   </ReportItems>Di2015NewLine\  </TableCell>Di2015NewLine\ </xsl:template>Di2015NewLineDi2015NewLine\ <xsl:template match="xs:element" mode="TableColumn">Di2015NewLine\  <TableColumn>Di2015NewLine\   <Width>0.75in</Width>Di2015NewLine\  </TableColumn>Di2015NewLine\ </xsl:template>Di2015NewLineDi2015NewLine\ <xsl:template name="replace-string">Di2015NewLine\  <xsl:param name="text"/>Di2015NewLine\  <xsl:param name="from"/>Di2015NewLine\  <xsl:param name="to"/>Di2015NewLine\  <xsl:choose>Di2015NewLine\   <xsl:when test="contains($text, $from)">Di2015NewLine\    <xsl:variable name="before" select="substring-before($text, $from)"/>Di2015NewLine\    <xsl:variable name="after" select="substring-after($text, $from)"/>Di2015NewLine\    <xsl:variable name="prefix" select="concat($before, $to)"/>Di2015NewLine\    <xsl:value-of select="$before"/>Di2015NewLine\    <xsl:value-of select="$to"/>Di2015NewLine\    <xsl:call-template name="replace-string">Di2015NewLine\     <xsl:with-param name="text" select="$after"/>Di2015NewLine\     <xsl:with-param name="from" select="$from"/>Di2015NewLine\     <xsl:with-param name="to" select="$to"/>Di2015NewLine\    </xsl:call-template>Di2015NewLine\   </xsl:when>Di2015NewLine\   <xsl:otherwise>Di2015NewLine\    <xsl:value-of select="$text"/>Di2015NewLine\   </xsl:otherwise>Di2015NewLine\  </xsl:choose>Di2015NewLine\ </xsl:template>Di2015NewLine\</xsl:stylesheet>Di2015NewLine
270580Di2015UniqueSeparatorCollectionDataContract
270641Di2015UniqueSeparatorList<T>
270641Di2015UniqueSeparatorArrayList
271251Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Text;Di2015NewLineusing System.Management;Di2015NewLineDi2015NewLinenamespace WMITestConsolApplicationDi2015NewLine{Di2015NewLineDi2015NewLine    class ProgramDi2015NewLine    {Di2015NewLineDi2015NewLine    \static void Main(string[] args)Di2015NewLine    \{Di2015NewLineDi2015NewLine    \\AddInsertUSBHandler();Di2015NewLine    \\AddRemoveUSBHandler();Di2015NewLine    \\while (true) {Di2015NewLine    \\}Di2015NewLineDi2015NewLine    \}Di2015NewLineDi2015NewLine    \static ManagementEventWatcher w = null;Di2015NewLineDi2015NewLine    \static void AddRemoveUSBHandler()Di2015NewLine    \{Di2015NewLineDi2015NewLine    \\WqlEventQuery q;Di2015NewLine    \\ManagementScope scope = new ManagementScope("root\\\\CIMV2");Di2015NewLine    \\scope.Options.EnablePrivileges = true;Di2015NewLineDi2015NewLine    \\try {Di2015NewLineDi2015NewLine    \\\q = new WqlEventQuery();Di2015NewLine    \\\q.EventClassName = "__InstanceDeletionEvent";Di2015NewLine    \\\q.WithinInterval = new TimeSpan(0, 0, 3);Di2015NewLine    \\\q.Condition = "TargetInstance ISA 'Win32_USBControllerdevice'";Di2015NewLine    \\\w = new ManagementEventWatcher(scope, q);Di2015NewLine    \\\w.EventArrived += USBRemoved;Di2015NewLineDi2015NewLine    \\\w.Start();Di2015NewLine    \\}Di2015NewLine    \\catch (Exception e) {Di2015NewLineDi2015NewLineDi2015NewLine    \\\Console.WriteLine(e.Message);Di2015NewLine    \\\if (w != null)Di2015NewLine    \\\{Di2015NewLine    \\\\w.Stop();Di2015NewLineDi2015NewLine    \\\}Di2015NewLine    \\}Di2015NewLineDi2015NewLine    \}Di2015NewLineDi2015NewLine    \static void AddInsertUSBHandler()Di2015NewLine    \{Di2015NewLineDi2015NewLine    \\WqlEventQuery q;Di2015NewLine    \\ManagementScope scope = new ManagementScope("root\\\\CIMV2");Di2015NewLine    \\scope.Options.EnablePrivileges = true;Di2015NewLineDi2015NewLine    \\try {Di2015NewLineDi2015NewLine    \\\q = new WqlEventQuery();Di2015NewLine    \\\q.EventClassName = "__InstanceCreationEvent";Di2015NewLine    \\\q.WithinInterval = new TimeSpan(0, 0, 3);Di2015NewLine    \\\q.Condition = "TargetInstance ISA 'Win32_USBControllerdevice'";Di2015NewLine    \\\w = new ManagementEventWatcher(scope, q);Di2015NewLine    \\\w.EventArrived += USBInserted;Di2015NewLineDi2015NewLine    \\\w.Start();Di2015NewLine    \\}Di2015NewLine    \\catch (Exception e) {Di2015NewLineDi2015NewLine    \\\Console.WriteLine(e.Message);Di2015NewLine    \\\if (w != null)Di2015NewLine    \\\{Di2015NewLine    \\\\w.Stop();Di2015NewLineDi2015NewLine    \\\}Di2015NewLine    \\}Di2015NewLineDi2015NewLine    \}Di2015NewLineDi2015NewLine    \static void USBInserted(object sender, EventArgs e)Di2015NewLine    \{Di2015NewLineDi2015NewLine    \\Console.WriteLine("A USB device inserted");Di2015NewLineDi2015NewLine    \}Di2015NewLineDi2015NewLine    \static void USBRemoved(object sender, EventArgs e)Di2015NewLine    \{Di2015NewLineDi2015NewLine    \\Console.WriteLine("A USB device removed");Di2015NewLineDi2015NewLine    \}Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
271264Di2015UniqueSeparatorClose()
271264Di2015UniqueSeparatorZipStream
271264Di2015UniqueSeparatorFlush()
271264Di2015UniqueSeparatorStream
271264Di2015UniqueSeparatorIDisposable
271264Di2015UniqueSeparatorusing
271264Di2015UniqueSeparatorMemoryStream
271264Di2015UniqueSeparatorStream
271264Di2015UniqueSeparatorpublic static byte[] Compress(byte[] data)Di2015NewLine{Di2015NewLine    using (var compressedStream = new MemoryStream())Di2015NewLine    using (var zipStream = new GZipStream(compressedStream, CompressionMode.Compress))Di2015NewLine    {Di2015NewLine        zipStream.Write(data, 0, data.Length);Di2015NewLine        zipStream.Close();Di2015NewLine        return compressedStream.ToArray();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static byte[] Decompress(byte[] data)Di2015NewLine{Di2015NewLine    using(var compressedStream = new MemoryStream(data))Di2015NewLine    using(var zipStream = new GZipStream(compressedStream, CompressionMode.Decompress))Di2015NewLine    using (var resultStream = new MemoryStream())Di2015NewLine    { ... }Di2015NewLine}Di2015NewLine
271264Di2015UniqueSeparatorusing
271264Di2015UniqueSeparatorMemoryStream
271264Di2015UniqueSeparatorMemoryStream
271264Di2015UniqueSeparatorusing
271264Di2015UniqueSeparatorIDisposable
271264Di2015UniqueSeparatorDispose()
271282Di2015UniqueSeparatorproxy
271282Di2015UniqueSeparatornull
271282Di2015UniqueSeparatorWeakReference
271282Di2015UniqueSeparatorpublic class ProxyDi2015NewLine{Di2015NewLine    private bool _isOpen;Di2015NewLineDi2015NewLine    public event EventHandler Complete;Di2015NewLineDi2015NewLine    public void Close() Di2015NewLine    {Di2015NewLine    \_isOpen = false;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Open() Di2015NewLine    { Di2015NewLine    \_isOpen = true; Di2015NewLine    }Di2015NewLineDi2015NewLine    public void RemoteOperationAsync()Di2015NewLine    {Di2015NewLine    \if (!_isOpen)Di2015NewLine    \\throw new ApplicationException();Di2015NewLine    \Thread.Sleep(1000);Di2015NewLine    \if (Complete != null)Di2015NewLine    \\Complete(this, EventArgs.Empty);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static class ProgramDi2015NewLine{Di2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine    \WeakReference wr = null;Di2015NewLineDi2015NewLine    \{Di2015NewLine    \\var proxy = new Proxy();Di2015NewLine    \\proxy.Complete += (sender, e) =>Di2015NewLine    \\\{Di2015NewLine    \\\\proxy.Close();Di2015NewLine    \\\\wr = new WeakReference(proxy);Di2015NewLine    \\\\proxy = null;Di2015NewLine    \\\};Di2015NewLine    \\proxy.Open();Di2015NewLine    \\proxy.RemoteOperationAsync();Di2015NewLine    \}Di2015NewLineDi2015NewLine    \GC.Collect(GC.GetGeneration(wr));Di2015NewLine    \GC.WaitForPendingFinalizers();Di2015NewLineDi2015NewLine    \Console.WriteLine("[LAMBDA] Is WeakReference alive? " + wr.IsAlive);Di2015NewLine    }Di2015NewLine}Di2015NewLine
271349Di2015UniqueSeparatore.Row.DataItem
271349Di2015UniqueSeparatorDataRowView
271349Di2015UniqueSeparatorDataSource
271349Di2015UniqueSeparatorDataView
271349Di2015UniqueSeparatorDataTable
271447Di2015UniqueSeparatorwhile (variable < 5)Di2015NewLine{Di2015NewLine    int copy = variable;Di2015NewLine    actions.Add(() => copy * 2);Di2015NewLine    ++ variable;Di2015NewLine}Di2015NewLine
271447Di2015UniqueSeparatorfor
271447Di2015UniqueSeparatorforeach
271447Di2015UniqueSeparatorfor (int i=0; i < 10; i++) // Just one variableDi2015NewLineforeach (string x in foo) // And again, despite how it reads out loudDi2015NewLine
271476Di2015UniqueSeparatorfor (int i = 0; i < lbSrc.Items.Count; i++)Di2015NewLine{Di2015NewLine    if (lbSrc.Items[i].Selected == true)Di2015NewLine    {Di2015NewLine        lbSrc.Items.RemoveAt(lbSrc.SelectedIndex);Di2015NewLine    }Di2015NewLine}Di2015NewLine
271487Di2015UniqueSeparator<table><tr><td>...</td></tr>...</table>
271487Di2015UniqueSeparatorDataTable
271487Di2015UniqueSeparator        public static void WriteCsv(string[] headers, IEnumerable<string[]> data, string filename)Di2015NewLine        {Di2015NewLine            if (data == null) throw new ArgumentNullException("data");Di2015NewLine            if (string.IsNullOrEmpty(filename)) filename = "export.csv";Di2015NewLineDi2015NewLine            HttpResponse resp = System.Web.HttpContext.Current.Response;Di2015NewLine            resp.Clear();Di2015NewLine            // remove this line if you don't want to prompt the user to save the fileDi2015NewLine            resp.AddHeader("Content-Disposition", "attachment;filename=" + filename);Di2015NewLine            // if not saving, try: "application/ms-excel"Di2015NewLine            resp.ContentType = "text/csv";Di2015NewLine            string csv = GetCsv(headers, data);Di2015NewLine            byte[] buffer = resp.ContentEncoding.GetBytes(csv);Di2015NewLine            resp.AddHeader("Content-Length", buffer.Length.ToString());Di2015NewLine            resp.BinaryWrite(buffer);Di2015NewLine            resp.End();Di2015NewLine        }Di2015NewLine        static void WriteRow(string[] row, StringBuilder destination)Di2015NewLine        {Di2015NewLine            if (row == null) return;Di2015NewLine            int fields = row.Length;Di2015NewLine            for (int i = 0; i < fields; i++)Di2015NewLine            {Di2015NewLine                string field = row[i];Di2015NewLine                if (i > 0)Di2015NewLine                {Di2015NewLine                    destination.Append(',');Di2015NewLine                }Di2015NewLine                if (string.IsNullOrEmpty(field)) continue; // empty fieldDi2015NewLineDi2015NewLine                bool quote = false;Di2015NewLine                if (field.Contains("\\""))Di2015NewLine                {Di2015NewLine                    // if contains quotes, then needs quoting and escapingDi2015NewLine                    quote = true;Di2015NewLine                    field = field.Replace("\\"", "\\"\\"");Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    // commas, line-breaks, and leading-trailing space also require quotingDi2015NewLine                    if (field.Contains(",") || field.Contains("\\n") || field.Contains("\\r")Di2015NewLine                        || field.StartsWith(" ") || field.EndsWith(" "))Di2015NewLine                    {Di2015NewLine                        quote = true;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                if (quote)Di2015NewLine                {Di2015NewLine                    destination.Append('\\"');Di2015NewLine                    destination.Append(field);Di2015NewLine                    destination.Append('\\"');Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    destination.Append(field);Di2015NewLine                }Di2015NewLineDi2015NewLine            }Di2015NewLine            destination.AppendLine();Di2015NewLine        }Di2015NewLine        static string GetCsv(string[] headers, IEnumerable<string[]> data)Di2015NewLine        {Di2015NewLine            StringBuilder sb = new StringBuilder();Di2015NewLine            if (data == null) throw new ArgumentNullException("data");Di2015NewLine            WriteRow(headers, sb);Di2015NewLine            foreach (string[] row in data)Di2015NewLine            {Di2015NewLine                WriteRow(row, sb);Di2015NewLineDi2015NewLine            }Di2015NewLine            return sb.ToString();Di2015NewLine        }Di2015NewLine
271529Di2015UniqueSeparatorDim number As Integer = 2Di2015NewLineDim str As String = "Hello " & number & " world"Di2015NewLine
271529Di2015UniqueSeparatorSystem.String
271529Di2015UniqueSeparatorString.Concat
271575Di2015UniqueSeparator// Probably wrongDi2015NewLineif (x = 5)Di2015NewLine
271575Di2015UniqueSeparatorif (x == 5)Di2015NewLine
271575Di2015UniqueSeparatorif (5 == x)Di2015NewLine
271575Di2015UniqueSeparatorx=5
271575Di2015UniqueSeparatorInt32
271575Di2015UniqueSeparatorBoolean
271600Di2015UniqueSeparator// Both of these types mean the same thing, the ? is just C# shorthand.Di2015NewLineprivate void Example(int? arg1, Nullable<int> arg2)Di2015NewLine{Di2015NewLine    if (arg1.HasValue)Di2015NewLine        DoSomething();Di2015NewLineDi2015NewLine    arg1 = null; // Valid.Di2015NewLine    arg1 = 123;  // Also valid.Di2015NewLineDi2015NewLine    DoSomethingWithInt(arg1); // NOT valid!Di2015NewLine    DoSomethingWithInt(arg1.Value); // Valid.Di2015NewLine}Di2015NewLine
271628Di2015UniqueSeparator     RectangleF rect = new RectangleF(100,100,100,100);Di2015NewLine     e.Graphics.DrawString(myString, myFont, myBrush, rect);Di2015NewLine
271645Di2015UniqueSeparatoradjList
271645Di2015UniqueSeparatorpropList
271645Di2015UniqueSeparatorToLookup
271645Di2015UniqueSeparatorToDictionary
271645Di2015UniqueSeparatoradjList
271645Di2015UniqueSeparatorToDictionary
271645Di2015UniqueSeparatorvar adjDictionary = adjList.ToDictionary(av => av.PropName);Di2015NewLineforeach (var p in propList)Di2015NewLine{Di2015NewLine    Adjustment a;Di2015NewLine    if (adjDictionary.TryGetValue(p.Name, out a))Di2015NewLine    {Di2015NewLine        p.Total = p.Val + a.AdjVal;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        p.Total = p.Val;Di2015NewLine    }Di2015NewLine}Di2015NewLine
271751Di2015UniqueSeparator<tr>\\s*Di2015NewLine<td[^>]*>.*?</td>\\s*Di2015NewLine<td[^>]*>\\s*(?<value>\\d+)\\s*</td>\\s*Di2015NewLine<td[^>]*>\\s*(?<time>\\d{2}:\\d{2}:\\d{2})\\s*</td>\\s*Di2015NewLine</tr>\\s*Di2015NewLine
271842Di2015UniqueSeparatorList<T>
271842Di2015UniqueSeparatorList<T>
271842Di2015UniqueSeparatorAdd
271842Di2015UniqueSeparatorInsert
271842Di2015UniqueSeparatorRemove
271842Di2015UniqueSeparatorCollection<T>
271842Di2015UniqueSeparatorIList<T>
271842Di2015UniqueSeparatorICollection<T>
271842Di2015UniqueSeparatorIEnumerable<T>
271842Di2015UniqueSeparatorList<T>
271842Di2015UniqueSeparatorBinarySearch
271842Di2015UniqueSeparatorSort
271929Di2015UniqueSeparator.method public hidebysig specialname rtspecialname Di2015NewLine        instance void  .ctor() cil managedDi2015NewLine{Di2015NewLine    // Code size       15 (0xf)Di2015NewLine    .maxstack  8Di2015NewLine    IL_0000:  ldarg.0Di2015NewLine    IL_0001:  ldc.i4.7Di2015NewLine    IL_0002:  stfld      int32 dummyCSharp.MyClass::myIntDi2015NewLine    IL_0007:  ldarg.0Di2015NewLine    IL_0008:  call       instance void [mscorlib]System.Object::.ctor()Di2015NewLine    IL_000d:  nopDi2015NewLine    IL_000e:  retDi2015NewLine} // end of method MyClass::.ctorDi2015NewLine
271929Di2015UniqueSeparatorldc.i4.7
271929Di2015UniqueSeparatorstfld int32 dummyCSharp.MyClass::myInt
271929Di2015UniqueSeparatorstfld
271929Di2015UniqueSeparatorclass MyClassDi2015NewLine{Di2015NewLine    public int myInt = 7;Di2015NewLine    public int myOtherInt;Di2015NewLineDi2015NewLine    public MyClass()Di2015NewLine    {Di2015NewLine        myOtherInt = 8;Di2015NewLine    }Di2015NewLine}Di2015NewLine
271929Di2015UniqueSeparator.method public hidebysig specialname rtspecialname Di2015NewLine                instance void  .ctor() cil managedDi2015NewLine{Di2015NewLine    // Code size       24 (0x18)Di2015NewLine    .maxstack  8Di2015NewLine    IL_0000:  ldarg.0Di2015NewLine    IL_0001:  ldc.i4.7Di2015NewLine    IL_0002:  stfld      int32 dummyCSharp.MyClass::myIntDi2015NewLine    IL_0007:  ldarg.0Di2015NewLine    IL_0008:  call       instance void [mscorlib]System.Object::.ctor()Di2015NewLine    IL_000d:  nopDi2015NewLine    IL_000e:  nopDi2015NewLine    IL_000f:  ldarg.0Di2015NewLine    IL_0010:  ldc.i4.8Di2015NewLine    IL_0011:  stfld      int32 dummyCSharp.MyClass::myOtherIntDi2015NewLine    IL_0016:  nopDi2015NewLine    IL_0017:  retDi2015NewLine} // end of method MyClass::.ctorDi2015NewLine
271929Di2015UniqueSeparatorIL_0008:  call       instance void [mscorlib]System.Object::.ctor()Di2015NewLine
271959Di2015UniqueSeparator<Project Di2015NewLine DefaultTargets="Build" Di2015NewLine xmlns="http://schemas.microsoft.com/developer/msbuild/2003">Di2015NewLineDi2015NewLine <Import Project="$(MSBuildBinPath)\\Microsoft.CSharp.targets" />Di2015NewLineDi2015NewLine <Target Name="AfterBuild">Di2015NewLine   <CreateItem Include="@(ReferencePath)" Condition="'%(CopyLocal)'=='true'">Di2015NewLine       <Output TaskParameter="Include" ItemName="IlmergeAssemblies"/>Di2015NewLine   </CreateItem>Di2015NewLineDi2015NewLine   <Message Text="MERGING: @(IlmergeAssemblies->'%(Filename)')" Importance="High" /> Di2015NewLineDi2015NewLine  <Exec Command=""$(ProgramFiles)\\Microsoft\\Ilmerge\\Ilmerge.exe" /out:@(MainAssembly) "@(IntermediateAssembly)" @(IlmergeAssemblies->'"%(FullPath)"', ' ') /log:ILMerge.log" /> Di2015NewLineDi2015NewLine </Target>Di2015NewLineDi2015NewLine <Target Name="_CopyFilesMarkedCopyLocal"/>Di2015NewLineDi2015NewLine</Project>Di2015NewLine
272005Di2015UniqueSeparatorDEV_BROADCAST_DEVICEINTERFACE
272005Di2015UniqueSeparatordbcc_classguid=GUID_DEVINTERFACE_VOLUME
272005Di2015UniqueSeparatorRegisterDeviceNotification()
272005Di2015UniqueSeparatorDEV_BROADCAST_DEVICEINTERFACE*
272005Di2015UniqueSeparatordbcc_name
272005Di2015UniqueSeparatorGetVolumeNameForVolumeMountPoint()
272005Di2015UniqueSeparatorGetLogicalDriveStrings()
272005Di2015UniqueSeparatorGetVolumeNameForVolumeMountPoint()
272044Di2015UniqueSeparatorFileAssociationInfo fai = new FileAssociationInfo(".bob");Di2015NewLineProgramAssociationInfo pai = new ProgramAssociationInfo(fai.ProgID);Di2015NewLineProgramIcon icon = pai.DefaultIcon;Di2015NewLine
272164Di2015UniqueSeparatorthis()
272250Di2015UniqueSeparatorMicrosoft.FSharp.Math.BigInt class.Di2015NewLine
272250Di2015UniqueSeparatorMicrosoft.FSharp.Math.Matrix<A> classDi2015NewLine
272252Di2015UniqueSeparatorpublic class RunnerDi2015NewLine{Di2015NewLine    public void Run(string executable, object processExitHandler)Di2015NewLine    {Di2015NewLine        ThreadPool.QueueUserWorkItem(state =>Di2015NewLine        {Di2015NewLine            var p = new Process()Di2015NewLine            {Di2015NewLine                StartInfo = new ProcessStartInfo()Di2015NewLine                {Di2015NewLine                    FileName = executableDi2015NewLine                }Di2015NewLine            };Di2015NewLine            p.Start();Di2015NewLine            while (!p.HasExited)Di2015NewLine            {Di2015NewLine                Thread.Sleep(100);Di2015NewLine            }Di2015NewLineDi2015NewLine            stateDi2015NewLine                .GetType()Di2015NewLine                .InvokeMember(Di2015NewLine                    "call", Di2015NewLine                    BindingFlags.InvokeMethod, Di2015NewLine                    null, Di2015NewLine                    state, Di2015NewLine                    new object[] { null, p.ExitCode }Di2015NewLine                );Di2015NewLine        }, processExitHandler);Di2015NewLine    }Di2015NewLine}Di2015NewLine
272252Di2015UniqueSeparator<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">Di2015NewLine<html>Di2015NewLine<head><title>ActiveXRunner</title>    Di2015NewLine    <script type="text/javascript">Di2015NewLine    function runNotepad() {Di2015NewLine        var ax = new ActiveXObject('ActiveXRunner.Runner');Di2015NewLine        ax.Run('c:\\\\windows\\\\notepad.exe', h);Di2015NewLine    }Di2015NewLineDi2015NewLine    function h(exitCode) {Di2015NewLine        alert('exitCode = ' + exitCode);Di2015NewLine    }Di2015NewLine    </script>Di2015NewLine</head>Di2015NewLine<body>Di2015NewLine    <a href="#" onclick="runNotepad();">Run notepad and show exit code when finished</a>Di2015NewLine</body>Di2015NewLine</html>Di2015NewLine
272393Di2015UniqueSeparatorCar<int>
272393Di2015UniqueSeparatorCheckType(IVehicle param)Di2015NewLine{Di2015NewLine    Car<int> car = param as Car<int>;Di2015NewLine    if (car != null)Di2015NewLine    {Di2015NewLine         ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
272703Di2015UniqueSeparatorFurtherValidate
272703Di2015UniqueSeparatorprotected
272703Di2015UniqueSeparatorinternal
272848Di2015UniqueSeparatorConfigurationManager.AppSettings
272848Di2015UniqueSeparatorAssembly.GetExecutingAssembly().FullName
272848Di2015UniqueSeparatorConfigurationManager
272929Di2015UniqueSeparatorstring AddSpacesToSentence(string text, bool preserveAcronyms)Di2015NewLine{Di2015NewLine        if (string.IsNullOrWhiteSpace(text))Di2015NewLine           return string.Empty;Di2015NewLine        StringBuilder newText = new StringBuilder(text.Length * 2);Di2015NewLine        newText.Append(text[0]);Di2015NewLine        for (int i = 1; i < text.Length; i++)Di2015NewLine        {Di2015NewLine            if (char.IsUpper(text[i]))Di2015NewLine                if ((text[i - 1] != ' ' && !char.IsUpper(text[i - 1])) ||Di2015NewLine                    (preserveAcronyms && char.IsUpper(text[i - 1]) && Di2015NewLine                     i < text.Length - 1 && !char.IsUpper(text[i + 1])))Di2015NewLine                    newText.Append(' ');Di2015NewLine            newText.Append(text[i]);Di2015NewLine        }Di2015NewLine        return newText.ToString();Di2015NewLine}Di2015NewLine
272929Di2015UniqueSeparatorif (char.IsUpper(text[i]))Di2015NewLine    if (char.IsUpper(text[i - 1]))Di2015NewLine        if (preserveAcronyms && i < text.Length - 1 && !char.IsUpper(text[i + 1]))Di2015NewLine            newText.Append(' ');Di2015NewLine        else ;Di2015NewLine    else if (text[i - 1] != ' ')Di2015NewLine        newText.Append(' ');Di2015NewLine
273144Di2015UniqueSeparatorRegex regex = new Regex(@"^\\d$");Di2015NewLine
273144Di2015UniqueSeparator"^\\d+$"
273144Di2015UniqueSeparator"\\d"
273144Di2015UniqueSeparator[0-9]
273144Di2015UniqueSeparatorÙ Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©
273144Di2015UniqueSeparator"^[0-9]+$"
273163Di2015UniqueSeparatorBOOL RegisterHotKey(Di2015NewLine    HWND hWnd,         // window to receive hot-key notificationDi2015NewLine    int id,            // identifier of hot keyDi2015NewLine    UINT fsModifiers,  // key-modifier flagsDi2015NewLine    UINT vk            // virtual-key codeDi2015NewLine);Di2015NewLine
273163Di2015UniqueSeparator[DllImport("User32.dll")] Di2015NewLineprivate static extern bool SetForegroundWindow(IntPtr hWnd);Di2015NewLineDi2015NewLine[DllImport("user32.dll", CharSet=CharSet.Auto)]Di2015NewLinestatic public extern IntPtr GetForegroundWindow();Di2015NewLineDi2015NewLine[DllImport("user32.dll")]Di2015NewLinestatic extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);Di2015NewLineDi2015NewLineDi2015NewLine.....Di2015NewLineDi2015NewLineprivate void SendCtrlC(IntPtr hWnd)Di2015NewLine    {Di2015NewLine    uint KEYEVENTF_KEYUP = 2;Di2015NewLine    byte VK_CONTROL = 0x11;Di2015NewLine    SetForegroundWindow(hWnd);Di2015NewLine    keybd_event(VK_CONTROL,0,0,0);Di2015NewLine    keybd_event (0x43, 0, 0, 0 ); //Send the C key (43 is "C")Di2015NewLine    keybd_event (0x43, 0, KEYEVENTF_KEYUP, 0);Di2015NewLine    keybd_event (VK_CONTROL, 0, KEYEVENTF_KEYUP, 0);// 'Left Control UpDi2015NewLineDi2015NewLine}Di2015NewLine
273289Di2015UniqueSeparator<style type="text/css">Di2015NewLine    @media handheldDi2015NewLine    {Di2015NewLine      /* handheld styles */Di2015NewLine    }Di2015NewLine</style>Di2015NewLine
273292Di2015UniqueSeparatorif (Thread.CurrentPrincipal.IsInRole(Roles.Admin)) {Di2015NewLine   btnDelete.Visible = false;Di2015NewLine}Di2015NewLine
273573Di2015UniqueSeparatorstring html = File.ReadAllText(originalFile, Encoding.GetEncoding(1252));Di2015NewLine
273750Di2015UniqueSeparatorClassName   Instances\TotalBytesAllocated\Gen0_InstancesCollected\Gen0BytesCollected\Gen1InstancesCollected\Gen1BytesCollectedDi2015NewLine=======Option #1    \\\\Di2015NewLineSystem.Text.StringBuilder   100,001\2,000,020\100,016\2,000,320\2\40Di2015NewLineSystem.String   301,020\32,587,168\201,147\11,165,268\3\246Di2015NewLineSystem.Char[]   200,000\8,977,780\200,022\8,979,678\2\90Di2015NewLineSystem.String[] 1\400,016\26\1,512\0\0Di2015NewLineSystem.Int32    100,000\1,200,000\100,061\1,200,732\2\24Di2015NewLineSystem.Object[] 100,000\2,000,000\100,070\2,004,092\2\40Di2015NewLine======Option #2 \\\\Di2015NewLineSystem.Text.StringBuilder   200,000\4,000,000\200,011\4,000,220\4\80Di2015NewLineSystem.String   401,018\37,587,036\301,127\16,164,318\3\214Di2015NewLineSystem.Char[]   200,000\9,377,780\200,024\9,379,768\0\0Di2015NewLineSystem.String[] 1\400,016\20\1,208\0\0Di2015NewLineSystem.Int32    100,000\1,200,000\100,051\1,200,612\1\12Di2015NewLineSystem.Object[] 100,000\2,000,000\100,058\2,003,004\1\20Di2015NewLine
273971Di2015UniqueSeparatorpublic static MemberInfo GetMemberInfo<T, U>(Expression<Func<T, U>> expression)Di2015NewLine{Di2015NewLine    var member = expression.Body as MemberExpression;Di2015NewLine    if (member != null)Di2015NewLine        return member.Member;Di2015NewLineDi2015NewLine    throw new ArgumentException("Expression is not a member access", "expression");Di2015NewLine}Di2015NewLine
273971Di2015UniqueSeparatorpublic class ProgramDi2015NewLine{Di2015NewLine    public string NameDi2015NewLine    {Di2015NewLine        get { return "My Program"; }Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        MemberInfo member = ReflectionUtility.GetMemberInfo((Program p) => p.Name);Di2015NewLine        Console.WriteLine(member.Name);Di2015NewLine    }Di2015NewLine}Di2015NewLine
273971Di2015UniqueSeparator(Program p) => p.Name
274025Di2015UniqueSeparatorx => x * 2;Di2015NewLine
274207Di2015UniqueSeparatorushort[] data = new ushort[10];Di2015NewLinefor (int i = 0; i < data.Length; ++i)Di2015NewLine    data[i] = (char) ('A' + i);Di2015NewLineDi2015NewLinestring asString;Di2015NewLinebyte[] asBytes = new byte[data.Length * sizeof(ushort)];Di2015NewLineBuffer.BlockCopy(data, 0, asBytes, 0, asBytes.Length);Di2015NewLineasString = Encoding.Unicode.GetString(asBytes);Di2015NewLine
274207Di2015UniqueSeparatorstring asString;Di2015NewLineunsafeDi2015NewLine{Di2015NewLine    fixed (ushort *dataPtr = &data[0])Di2015NewLine        asString = new string((char *) dataPtr, 0, data.Length);Di2015NewLine}Di2015NewLine
274357Di2015UniqueSeparatorclass UsefulStuff {Di2015NewLine    object _TheLock = new object { };Di2015NewLine    public void UsefulThingNumberOne() {Di2015NewLine        lock(_TheLock) {Di2015NewLine            //CodeBlockADi2015NewLine        }Di2015NewLine    }Di2015NewLine    public void UsefulThingNumberTwo() {Di2015NewLine        lock(_TheLock) {Di2015NewLine            //CodeBlockBDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
274357Di2015UniqueSeparatorCodeBlockA
274357Di2015UniqueSeparatorCodeBlockB
274357Di2015UniqueSeparator_TheLock
274357Di2015UniqueSeparator_TheLock
274487Di2015UniqueSeparatorpublic static class ExtensionMethodsDi2015NewLine{Di2015NewLine    public static int RoundOff (this int i)Di2015NewLine    {Di2015NewLine        return ((int)Math.Round(i / 10.0)) * 10;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineint roundedNumber = 236.RoundOff(); // returns 240Di2015NewLineint roundedNumber2 = 11.RoundOff(); // returns 10Di2015NewLine
274487Di2015UniqueSeparatorint roundedNumber = ExtensionMethods.RoundOff(236); // returns 240Di2015NewLineint roundedNumber2 = ExtensionMethods.RoundOff(11); // returns 10Di2015NewLine
274545Di2015UniqueSeparatorforeach(Type type in assembly)
274748Di2015UniqueSeparator=First(Fields!ClientName.Value.StringValue, "BusinessObject_CustomerInfo")Di2015NewLine
275129Di2015UniqueSeparatorSystem.Collections.Generic.IList<U>
275129Di2015UniqueSeparatorIEnumerable
275129Di2015UniqueSeparatorIEnumerable<T>
275129Di2015UniqueSeparatorIList<T>
275129Di2015UniqueSeparatorCast<T>
275392Di2015UniqueSeparatorIList
275392Di2015UniqueSeparatorIListSource
275392Di2015UniqueSeparatorIList
275392Di2015UniqueSeparatorDataMember
275392Di2015UniqueSeparatorBindingSource
275392Di2015UniqueSeparatorTextBox
275392Di2015UniqueSeparatorAverageValue
275392Di2015UniqueSeparatorDataGridView
275392Di2015UniqueSeparatorDataSource
275392Di2015UniqueSeparatorDataMember="Items"
275621Di2015UniqueSeparator        string buffer = String.Empty;Di2015NewLine        string buffer2 = String.Empty;Di2015NewLine        public Form3()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            this.richTextBox1.KeyDown += new KeyEventHandler(richTextBox1_KeyDown);Di2015NewLine            this.richTextBox1.TextChanged += new EventHandler(richTextBox1_TextChanged);Di2015NewLine        }Di2015NewLineDi2015NewLine        void richTextBox1_TextChanged(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            buffer2 = buffer;Di2015NewLine            buffer = richTextBox1.Text;Di2015NewLine        }Di2015NewLineDi2015NewLine        void richTextBox1_KeyDown(object sender, KeyEventArgs e)Di2015NewLine        {Di2015NewLine            if (e.Control && e.KeyCode == Keys.Z)Di2015NewLine            {Di2015NewLine                this.richTextBox1.Text = buffer2;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            richTextBox1.Text = "Changed";Di2015NewLine        }Di2015NewLine
275876Di2015UniqueSeparatorpublic void RenderRainbowText(string Text, PictureBox pb)Di2015NewLine{Di2015NewLine    // PictureBox needs an image to draw onDi2015NewLine    pb.Image = new Bitmap(pb.Width, pb.Height);Di2015NewLine    using (Graphics g = Graphics.FromImage(pb.Image))Di2015NewLine    {Di2015NewLine        // create all-white background for drawingDi2015NewLine        SolidBrush brush = new SolidBrush(Color.White);Di2015NewLine        g.FillRectangle(brush, 0, 0,Di2015NewLine            pb.Image.Width, pb.Image.Height);Di2015NewLine        // draw comma-delimited elements in multiple colorsDi2015NewLine        string[] chunks = Text.Split(',');Di2015NewLine        brush = new SolidBrush(Color.Black);Di2015NewLine        SolidBrush[] brushes = new SolidBrush[] { Di2015NewLine            new SolidBrush(Color.Red),Di2015NewLine            new SolidBrush(Color.Green),Di2015NewLine            new SolidBrush(Color.Blue),Di2015NewLine            new SolidBrush(Color.Purple) };Di2015NewLine        float x = 0;Di2015NewLine        for (int i = 0; i < chunks.Length; i++)Di2015NewLine        {Di2015NewLine            // draw text in whatever colorDi2015NewLine            g.DrawString(chunks[i], pb.Font, brushes[i], x, 0);Di2015NewLine            // measure text and advance xDi2015NewLine            x += (g.MeasureString(chunks[i], pb.Font)).Width;Di2015NewLine            // draw the comma back in, in blackDi2015NewLine            if (i < (chunks.Length - 1))Di2015NewLine            {Di2015NewLine                g.DrawString(",", pb.Font, brush, x, 0);Di2015NewLine                x += (g.MeasureString(",", pb.Font)).Width;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
275915Di2015UniqueSeparatorDictionary<,>
275915Di2015UniqueSeparatorSortedList<,>
275915Di2015UniqueSeparatorSortedDictionary<,>
275915Di2015UniqueSeparatorDictionary<,>
275915Di2015UniqueSeparatorCollection<T>
275915Di2015UniqueSeparatorDictionary<,>
275915Di2015UniqueSeparatorSortedList<,>
275921Di2015UniqueSeparator[DisplayName]
275921Di2015UniqueSeparator[Foo("Some name", typeof(Bar)]Di2015NewLine
275921Di2015UniqueSeparatorDisplayNameAttribute
275921Di2015UniqueSeparatorDisplayName
275954Di2015UniqueSeparatorpublic class MyListView : ListViewDi2015NewLine{Di2015NewLine\public event ScrollEventHandler HScrollEvent;Di2015NewLineDi2015NewLine\protected override void WndProc(ref System.Windows.Forms.Message msg) Di2015NewLine\{Di2015NewLine\\if (msg.Msg==WM_HSCROLL && HScrollEvent != null)Di2015NewLine\\\HScrollEvent(this,new ScrollEventArgs(ScrollEventType.ThumbTrack, (int)msg.WParam));Di2015NewLineDi2015NewLine\\base.WndProc(ref msg);Di2015NewLine\}Di2015NewLine}Di2015NewLine
275954Di2015UniqueSeparatorreportView.HScrollEvent += new ScrollEventHandler((sender,e) => {Di2015NewLine\if ((ushort) e.NewValue != SB_THUMBTRACK)Di2015NewLine\\SendMessage(summaryView.Handle, WM_HSCROLL, (IntPtr) e.NewValue, IntPtr.Zero);Di2015NewLine\else {Di2015NewLine\\int newPos = e.NewValue >> 16;Di2015NewLine\\int oldPos = GetScrollPos(reportView .Handle, SB_HORZ);\\\\\Di2015NewLine\\int pos    = GetScrollPos(summaryView.Handle, SB_HORZ);Di2015NewLine\\int lst;Di2015NewLineDi2015NewLine\\if (pos != newPos)Di2015NewLine\\\if      (pos<newPos && oldPos<newPos) do { lst=pos; SendMessage(summaryView.Handle,WM_HSCROLL,(IntPtr)SB_LINERIGHT,IntPtr.Zero); } while ((pos=GetScrollPos(summaryView.Handle,SB_HORZ)) < newPos && pos!=lst);Di2015NewLine\\\else if (pos>newPos && oldPos>newPos) do { lst=pos; SendMessage(summaryView.Handle,WM_HSCROLL,(IntPtr)SB_LINELEFT, IntPtr.Zero); } while ((pos=GetScrollPos(summaryView.Handle,SB_HORZ)) > newPos && pos!=lst);Di2015NewLine\\}Di2015NewLine\});Di2015NewLine
275954Di2015UniqueSeparatorreportView.ColumnWidthChanging += new ColumnWidthChangingEventHandler((sender,e) => {Di2015NewLine\summaryView.Columns[e.ColumnIndex].Width = e.NewWidth;Di2015NewLine\});Di2015NewLine
276036Di2015UniqueSeparatorroutes.Add(new Route("{resource}.axd/{*pathInfo}", new StopRoutingHandler()));Di2015NewLine
276056Di2015UniqueSeparatorfor (int i = myArray.Length; i --> 0; )Di2015NewLine{Di2015NewLine    //do somethingDi2015NewLine}Di2015NewLine
276098Di2015UniqueSeparator// Read the data in buffer.Di2015NewLinelength = iStream.Read(buffer, 0, bufferSize);Di2015NewLineDi2015NewLine// Write the data to the current output stream.Di2015NewLineResponse.OutputStream.Write(buffer, 0, length);Di2015NewLine
276193Di2015UniqueSeparatorBackColor
276193Di2015UniqueSeparatorTextBox
276193Di2015UniqueSeparatorTextBox
276193Di2015UniqueSeparatorReadOnly
276193Di2015UniqueSeparatortrue
276193Di2015UniqueSeparatorTextBox
276193Di2015UniqueSeparatorOnPaint
276193Di2015UniqueSeparatorReadOnly
276193Di2015UniqueSeparator!Enabled
276193Di2015UniqueSeparatorTextBox
276193Di2015UniqueSeparatorTextBox
276193Di2015UniqueSeparatorTextBox
276193Di2015UniqueSeparatorLabel
276193Di2015UniqueSeparatorTextBox
276202Di2015UniqueSeparator   var rootcategories2 = (from p in sr.productsDi2015NewLine                               group p.subcategory by p.category into subcatsDi2015NewLineDi2015NewLine                               select subcats);Di2015NewLine
276224Di2015UniqueSeparatornamespace CloudNavigationDi2015NewLine{Di2015NewLine    public partial class Test : System.Web.UI.PageDi2015NewLine    {Di2015NewLine        protected void Page_Load(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            if (IsPostBack)Di2015NewLine            {Di2015NewLine                this.recreateButtons();Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                // Execute heavy search 1 to generate buttonsDi2015NewLine                Button b = new Button();Di2015NewLine                b.Text = "Selection 1";Di2015NewLine                b.Command += new CommandEventHandler(b_Command);Di2015NewLine                Panel1.Controls.Add(b);Di2015NewLine                //store this stuff in ViewState for the very first timeDi2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        void b_Command(object sender, CommandEventArgs e)Di2015NewLine        {Di2015NewLine            //Execute heavy search 2 to generate new buttonsDi2015NewLine            //TODO: store data into ViewState or SessionDi2015NewLine            //and maybe create some new buttonsDi2015NewLine        }Di2015NewLineDi2015NewLine        void recreateButtons()Di2015NewLine        {Di2015NewLine            //retrieve data from ViewState or Session and create all the buttonsDi2015NewLine            //wiring them up to eventHandlerDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
276240Di2015UniqueSeparator<asp:DataList ID="dlMenuOne" runat="server" onitemdatabound="dlMenu_ItemDataBound" >Di2015NewLine            <ItemTemplate>Di2015NewLine             //your objectDi2015NewLineDi2015NewLine                <asp:DataList ID="dlMenuTwo"  runat="server" onitemdatabound="dlMenuTwo_ItemDataBound">Di2015NewLine                <ItemTemplate>Di2015NewLine                //your object's child itemsDi2015NewLineDi2015NewLine                    <asp:DataList ID="dlMenuThree" runat="server">Di2015NewLine                    <ItemTemplate>Di2015NewLine                       //child item's child items    Di2015NewLine                    </ItemTemplate>Di2015NewLine                    </asp:DataList>Di2015NewLineDi2015NewLine                </ItemTemplate>Di2015NewLine                </asp:DataList> Di2015NewLineDi2015NewLine            </ItemTemplate>Di2015NewLine            </asp:DataList>Di2015NewLine
276240Di2015UniqueSeparatorprotected void dlMenu_ItemDataBound(object sender, DataListItemEventArgs e)Di2015NewLine{Di2015NewLine    DataListItem parentList = e.Item;Di2015NewLine    DataList dlMenuTwo = (DataList)parentList.FindControl("dlMenuTwo");Di2015NewLine    MenuItem item = (MenuItem)parentList.DataItem;Di2015NewLine    dlMenuTwo.DataSource = _menu.GetChildItems(item);Di2015NewLine    dlMenuTwo.DataBind();Di2015NewLine}Di2015NewLine
276255Di2015UniqueSeparatorGetProperty
276255Di2015UniqueSeparatorGetProperty
276255Di2015UniqueSeparatorPropertyInfo prop = type.GetProperty("TurningRadius",Di2015NewLine    BindingFlags.Instance | BindingFlags.Public | BindingFlags.DeclaredOnly);Di2015NewLine
276255Di2015UniqueSeparatorprop
276255Di2015UniqueSeparatorstatic bool MagicAttributeSearcher(Type type)Di2015NewLine{Di2015NewLine    PropertyInfo prop = type.GetProperty("TurningRadius", BindingFlags.Instance | Di2015NewLine                                         BindingFlags.Public | BindingFlags.DeclaredOnly);Di2015NewLineDi2015NewLine    if (prop == null)Di2015NewLine    {Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine    var attr = Attribute.GetCustomAttribute(prop, typeof(MyAttribute), false);Di2015NewLine    return attr != null;Di2015NewLine}Di2015NewLine
276255Di2015UniqueSeparatortrue
276255Di2015UniqueSeparatorTurningRadius
276255Di2015UniqueSeparatorMyAttribute
276347Di2015UniqueSeparatorZipEntry
276347Di2015UniqueSeparatorPutNextEntry()
276347Di2015UniqueSeparatorFileStream fZip = File.Create(compressedOutputFile);Di2015NewLineZipOutputStream zipOStream = new ZipOutputStream(fZip);Di2015NewLineforeach (FileInfo fi in allfiles)Di2015NewLine{Di2015NewLine    ZipEntry entry = new ZipEntry((fi.Name));Di2015NewLine    zipOStream.PutNextEntry(entry);Di2015NewLine    FileStream fs = File.OpenRead(fi.FullName);Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        byte[] transferBuffer[1024];Di2015NewLine        doDi2015NewLine        {Di2015NewLine            bytesRead = fs.Read(transferBuffer, 0, transferBuffer.Length);Di2015NewLine            zipOStream.Write(transferBuffer, 0, bytesRead);Di2015NewLine        }Di2015NewLine        while (bytesRead > 0);Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        fs.Close();Di2015NewLine    }Di2015NewLine}Di2015NewLinezipOStream.Finish();Di2015NewLinezipOStream.Close();Di2015NewLine
276591Di2015UniqueSeparator <asp:Repeater ID="settingRepeater" runat="server" Di2015NewLine            onitemcreated="settingRepeater_ItemCreated" Di2015NewLine          >Di2015NewLine        <ItemTemplate>Di2015NewLine             <asp:PlaceHolder  ID="text" runat="server">Di2015NewLine                  <asp:Label ID="settingsLabel" CssClass="editlabel" Text='<%# XPath("@lbl") %>' runat="server" />Di2015NewLine                  <asp:TextBox ID="settingsLabelText"  runat="server"Di2015NewLine                      Text='<%# SettingsNode.SelectSingleNode(XPath("@xpath").ToString()).InnerText %>'Di2015NewLine                     Columns='<%#  XmlUtils.OptReadInt((XmlNode)Page.GetDataItem(),"@width",20) %>'Di2015NewLineDi2015NewLine                   />Di2015NewLineDi2015NewLine            </asp:PlaceHolder>Di2015NewLine            <asp:PlaceHolder ID="att_adder" runat="server">Di2015NewLine               <asp:CheckBox ID="settingsAttAdder" Text='<%# XPath("@lbl") %>' runat="server"Di2015NewLine                             Checked='<%# ((XmlElement)SettingsNode.SelectSingleNode(XPath("@xpath").ToString())).HasAttribute(XPath("@att").ToString()) %>'Di2015NewLine                />Di2015NewLine            </asp:PlaceHolder>Di2015NewLine      </ItemTemplate>Di2015NewLine  </asp:Repeater>Di2015NewLine
276591Di2015UniqueSeparator protected List<string> repeaterItemTypesDi2015NewLine   {Di2015NewLine      getDi2015NewLine      {Di2015NewLine         List<string> ret = (List<string>)ViewState["repeaterItemTypes"];Di2015NewLine         if (ret == null)Di2015NewLine         {Di2015NewLine            ret = new List<string>();Di2015NewLine            ViewState["repeaterItemTypes"] = ret;Di2015NewLine         }Di2015NewLine         return ret;Di2015NewLine      }Di2015NewLine   }Di2015NewLineDi2015NewLine   protected void settingRepeater_ItemCreated(object sender, RepeaterItemEventArgs e)Di2015NewLine   {Di2015NewLine      string type;Di2015NewLine      if (e.Item.DataItem != null)Di2015NewLine      {Di2015NewLine         // data binding mode..Di2015NewLine         type = ((XmlNode)e.Item.DataItem).LocalName;Di2015NewLine         int i = e.Item.ItemIndex;Di2015NewLine         if (i == repeaterItemTypes.Count)Di2015NewLine            repeaterItemTypes.Add(type);Di2015NewLine         elseDi2015NewLine            repeaterItemTypes.Insert(e.Item.ItemIndex, type);Di2015NewLine      }Di2015NewLine      elseDi2015NewLine      {Di2015NewLine         // restoring from ViewStateDi2015NewLine         type = repeaterItemTypes[e.Item.ItemIndex];Di2015NewLine      }Di2015NewLineDi2015NewLine      for (int i = e.Item.Controls.Count - 1; i >= 0; i--)Di2015NewLine      {Di2015NewLine         if (e.Item.Controls[i].ID != type) e.Item.Controls.RemoveAt(i);Di2015NewLine      }Di2015NewLine   }Di2015NewLine
276650Di2015UniqueSeparator    private void label1_MouseHover(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        //make changes for hoveringDi2015NewLine    }Di2015NewLineDi2015NewLine    private void label1_MouseLeave(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        //undo changesDi2015NewLine    }Di2015NewLine
277023Di2015UniqueSeparatorreadonly
277023Di2015UniqueSeparatorconst
277023Di2015UniqueSeparatorreadonly
277198Di2015UniqueSeparatorstatic IEnumerable<T> Where<T>(this IEnumerable<T> data, Func<T, bool> predicate)Di2015NewLine{Di2015NewLine    foreach(T value in data)Di2015NewLine    {Di2015NewLine        if(predicate(value)) yield return value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
277198Di2015UniqueSeparatoryield return
277198Di2015UniqueSeparatorIEnumerator<T>
277198Di2015UniqueSeparatorT
277198Di2015UniqueSeparatorint[] data = {1,2,3,4,5};Di2015NewLinevar odd = data.Where(i=>i%2 != 0);Di2015NewLine
277198Di2015UniqueSeparatorT
277198Di2015UniqueSeparatorvar odd = data.Where<int>(i=>i%2 != 0);Di2015NewLine
277198Di2015UniqueSeparatorIEnumerable
277198Di2015UniqueSeparator.Cast<T>(...)
277198Di2015UniqueSeparator.OfType<T>(...)
277198Di2015UniqueSeparatorIEnumerable<T>
277198Di2015UniqueSeparatorthis IEnumerable
277198Di2015UniqueSeparatorT
277198Di2015UniqueSeparatorT
277198Di2015UniqueSeparatorIEnumerable
277198Di2015UniqueSeparatorT
277198Di2015UniqueSeparatorCast<T>
277198Di2015UniqueSeparatorstatic void Main()Di2015NewLine{Di2015NewLine    IEnumerable data = new[] { new { Foo = "abc" }, new { Foo = "def" }, new { Foo = "ghi" } };Di2015NewLine    var typed = data.Cast(() => new { Foo = "never used" });Di2015NewLine    foreach (var item in typed)Di2015NewLine    {Di2015NewLine        Console.WriteLine(item.Foo);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// note that the template is not used, and we never need to pass one in...Di2015NewLinepublic static IEnumerable<T> Cast<T>(this IEnumerable source, Func<T> template)Di2015NewLine{Di2015NewLine    return Enumerable.Cast<T>(source);Di2015NewLine}Di2015NewLine
277253Di2015UniqueSeparator[TestFixture]Di2015NewLinepublic class Foo {Di2015NewLine    [Test]Di2015NewLine    public void Bar() {Di2015NewLine        Assert.AreEqual(2, 1+1);Di2015NewLine    }Di2015NewLine}Di2015NewLine
277637Di2015UniqueSeparatorfrom parent in parentsDi2015NewLinefrom child in parent.ChildrenDi2015NewLineselect new ParentChild() { ParentName = parent.Name, ChildName = child.Name };Di2015NewLine
277776Di2015UniqueSeparator[STAThread]Di2015NewLinestatic void Main() {Di2015NewLine    Application.EnableVisualStyles();Di2015NewLine    Application.Run(new Form()); // or whateverDi2015NewLine}Di2015NewLine
277790Di2015UniqueSeparatorXDocument doc;Di2015NewLineDi2015NewLineusing (StreamReader reader = File.OpenText(filename))Di2015NewLine{Di2015NewLine  doc = XDocument.Load(reader);Di2015NewLine  doc.Root.Add(entry);Di2015NewLine}Di2015NewLineDi2015NewLinedoc.Save(filename);Di2015NewLine
277808Di2015UniqueSeparatorfunction clickMyButton() {Di2015NewLine var ele = document.getElementById('btnSearchNow');Di2015NewLine if ((ele !== null) && (ele != 'undefined')) {Di2015NewLine   ele.click();Di2015NewLine }Di2015NewLine}Di2015NewLine
277873Di2015UniqueSeparatorSystem.IO
277873Di2015UniqueSeparatorFile
277873Di2015UniqueSeparatorWriteAllText
277873Di2015UniqueSeparatorFile.AppendAllText
277908Di2015UniqueSeparatorSystem.Net.WebRequestMethods.HttpDi2015NewLine    .Connect = "CONNECT"Di2015NewLine    .Get = "GET"Di2015NewLine    .Head = "HEAD"Di2015NewLine    .MkCol = "MKCOL"Di2015NewLine    .Post = "POST"Di2015NewLine    .Put = "PUT"Di2015NewLine
277908Di2015UniqueSeparatorconst
278166Di2015UniqueSeparatorImage newImage = Image.FromFile(myFilePath);Di2015NewLineSize outputSize = new Size(200, 200);Di2015NewLineBitmap backgroundBitmap = new Bitmap(outputSize.Width, outputSize.Height);Di2015NewLineusing (Bitmap tempBitmap = new Bitmap(newImage))Di2015NewLine{Di2015NewLine    using (Graphics g = Graphics.FromImage(backgroundBitmap))Di2015NewLine    {Di2015NewLine        g.InterpolationMode = InterpolationMode.HighQualityBicubic;Di2015NewLine        // Get the set of points that determine our rectangle for resizing.Di2015NewLine        Point[] corners = {Di2015NewLine            new Point(0, 0),Di2015NewLine            new Point(backgroundBitmap.Width, 0),Di2015NewLine            new Point(0, backgroundBitmap.Height)Di2015NewLine        };Di2015NewLine        g.DrawImage(tempBitmap, corners);Di2015NewLine    }Di2015NewLine}Di2015NewLinethis.BackgroundImage = backgroundBitmap;Di2015NewLine
278166Di2015UniqueSeparatorusing
278166Di2015UniqueSeparatorSystem.Drawing
278166Di2015UniqueSeparatorSystem.Drawing.Drawing2D
278176Di2015UniqueSeparatorString strPath = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().CodeBase);Di2015NewLine
278206Di2015UniqueSeparatorAction
278206Di2015UniqueSeparatorExpression
278206Di2015UniqueSeparatorpublic void Something(Expression<Action> action) {...}Di2015NewLine
278206Di2015UniqueSeparatorAction
278206Di2015UniqueSeparatorFunc
278206Di2015UniqueSeparatorExpression
278256Di2015UniqueSeparatorForm
278256Di2015UniqueSeparatortrue
278365Di2015UniqueSeparator.Value
278365Di2015UniqueSeparatorvar items =Di2015NewLine    from g in xDocument.Root.Descendants("Group").Elements("Entry")Di2015NewLine    select newDi2015NewLine    {Di2015NewLine        name = (string) g.Element("Name"),Di2015NewLine        id = (string) g.Element("ID") ?? "none",Di2015NewLine    };Di2015NewLine
278365Di2015UniqueSeparatorID
278365Di2015UniqueSeparatorvar items =Di2015NewLine    from g in xDocument.Root.Descendants("Group").Elements("Entry")Di2015NewLine    select newDi2015NewLine    {Di2015NewLine        name = (string) g.Element("Name"),Di2015NewLine        id = (int?) g.Element("ID"),Di2015NewLine    };Di2015NewLine
278457Di2015UniqueSeparatorpublic string GetTemporaryDirectory()Di2015NewLine{Di2015NewLine   string tempDirectory = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());Di2015NewLine   Directory.CreateDirectory(tempDirectory);Di2015NewLine   return tempDirectory;Di2015NewLine}Di2015NewLine
278543Di2015UniqueSeparatorAggregateException
278543Di2015UniqueSeparatorIEnumerable<Exception>
278543Di2015UniqueSeparatorSystem.Threading.AggregateException
278543Di2015UniqueSeparatorSystem.Threading
278543Di2015UniqueSeparatorSystem.Threading
278543Di2015UniqueSeparatorSystem
278702Di2015UniqueSeparatorclass FooDi2015NewLine{Di2015NewLine    public string Bar { get; set; }Di2015NewLine}Di2015NewLinestatic void Main()Di2015NewLine{Di2015NewLine    var lambda = GetExpression<Foo>("Bar", "abc");Di2015NewLine    Foo foo = new Foo { Bar = "aabca" };Di2015NewLine    bool test = lambda.Compile()(foo);Di2015NewLine}Di2015NewLinestatic Expression<Func<T, bool>> GetExpression<T>(string propertyName, string propertyValue)Di2015NewLine{Di2015NewLine    var parameterExp = Expression.Parameter(typeof(T), "type");Di2015NewLine    var propertyExp = Expression.Property(parameterExp, propertyName);Di2015NewLine    MethodInfo method = typeof(string).GetMethod("Contains", new[] { typeof(string) });Di2015NewLine    var someValue = Expression.Constant(propertyValue, typeof(string));Di2015NewLine    var containsMethodExp = Expression.Call(propertyExp, method, someValue);Di2015NewLineDi2015NewLine    return Expression.Lambda<Func<T, bool>>(containsMethodExp, parameterExp);Di2015NewLine}Di2015NewLine
278716Di2015UniqueSeparatorstring anybody = parm1 ?? localDefault ?? globalDefault;Di2015NewLine
278716Di2015UniqueSeparatorstring anyboby = (parm1 != null) ? parm1 Di2015NewLine               : ((localDefault != null) ? localDefault Di2015NewLine               : globalDefault);Di2015NewLine
278716Di2015UniqueSeparatorstring anybody = Parameters["Name"] Di2015NewLine              ?? Settings["Name"] Di2015NewLine              ?? GlobalSetting["Name"];Di2015NewLine
278716Di2015UniqueSeparatorstring anybody = (Parameters["Name"] != null ? Parameters["Name"] Di2015NewLine                 : (Settings["Name"] != null) ? Settings["Name"]Di2015NewLine                 :  GlobalSetting["Name"];Di2015NewLine
278791Di2015UniqueSeparatorprivate void myForm_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var fileWatcher = new System.IO.FileSystemWatcher();Di2015NewLineDi2015NewLine    // Monitor changes to PNG files in C:\\temp and subdirectoriesDi2015NewLine    fileWatcher.Path = @"C:\\temp";Di2015NewLine    fileWatcher.IncludeSubdirectories = true;Di2015NewLine    fileWatcher.Filter = @"*.png";Di2015NewLineDi2015NewLine    // Attach event handlers to handle each file system eventsDi2015NewLine    fileWatcher.Changed += fileChanged;Di2015NewLine    fileWatcher.Created += fileCreated;Di2015NewLine    fileWatcher.Renamed += fileRenamed;Di2015NewLineDi2015NewLine    // Start monitoring!Di2015NewLine    fileWatcher.EnableRaisingEvents = true;Di2015NewLine}Di2015NewLineDi2015NewLinevoid fileRenamed(object sender, System.IO.FileSystemEventArgs e)Di2015NewLine{Di2015NewLine    // a file has been renamed!Di2015NewLine}Di2015NewLineDi2015NewLinevoid fileCreated(object sender, System.IO.FileSystemEventArgs e)Di2015NewLine{Di2015NewLine    // a file has been created!Di2015NewLine}Di2015NewLineDi2015NewLinevoid fileChanged(object sender, System.IO.FileSystemEventArgs e)Di2015NewLine{Di2015NewLine    // a file is modified!Di2015NewLine}Di2015NewLine
278840Di2015UniqueSeparatorprivate static string ConvertUriToPath(string fileName)Di2015NewLine{Di2015NewLine   Uri uri = new Uri(fileName);Di2015NewLine   return uri.LocalPath;Di2015NewLineDi2015NewLine   // Some people have indicated that uri.LocalPath doesn't Di2015NewLine   // always return the corret path. If that's the case, useDi2015NewLine   // the following line:Di2015NewLine   // return uri.GetComponents(UriComponents.Path, UriFormat.SafeUnescaped);Di2015NewLine}Di2015NewLine
278884Di2015UniqueSeparatorBase
278884Di2015UniqueSeparatorGetAttributes
278884Di2015UniqueSeparatorGetType()
278884Di2015UniqueSeparatorpublic virtual void GetAttributes() {Di2015NewLine    MethodInfo method = GetType().GetMethod("GetAttributes");Di2015NewLine    // ...Di2015NewLine
278916Di2015UniqueSeparatorDataSet ds = GeneratePickingNoteDataSet(id);Di2015NewLineforeach (DataRow row in ds.Tables[0].Rows) {Di2015NewLine    CPickingNoteData pickingNoteData = new CPickingNoteData();Di2015NewLineDi2015NewLine    pickingNoteData.delivery_date = (DateTime)row["delivery_date"];Di2015NewLine    pickingNoteData.cust_po = (int)row["CustomerPONumber"];Di2015NewLine    pickingNoteData.address = row["CustomerAddress"].ToString();Di2015NewLine    // ... and so on ...Di2015NewLineDi2015NewLine    rptData.Add(pickingNoteData);Di2015NewLine}Di2015NewLine
278916Di2015UniqueSeparator((CPickingNoteData)rptData[0]).header_date = DateTime.Now;Di2015NewLine((CPickingNoteData)rptData[rptData.Count-1]).footer_serial = GenerateSerialNumber();Di2015NewLine
278916Di2015UniqueSeparatorReportDocument reportDoc = new ReportDocument();Di2015NewLinereportDoc.Load(reportPath);Di2015NewLinereportDoc.SetDataSource(rptData);Di2015NewLinecrystalReportViewer.ReportSource = reportDoc;Di2015NewLine
278924Di2015UniqueSeparator{Di2015NewLine  Font font1 = new Font("Arial", 10.0f);Di2015NewLine  tryDi2015NewLine  {Di2015NewLine    byte charset = font1.GdiCharSet;Di2015NewLine  }Di2015NewLine  finallyDi2015NewLine  {Di2015NewLine    if (font1 != null)Di2015NewLine      ((IDisposable)font1).Dispose();Di2015NewLine  }Di2015NewLine}Di2015NewLine
278968Di2015UniqueSeparator@"FORMATNAME:DIRECT=OS:.\\SYSTEM$;DeadXact"Di2015NewLine
279029Di2015UniqueSeparatorpublic partial class MyControl : UserControlDi2015NewLine{Di2015NewLine\public MyControl()Di2015NewLine\{Di2015NewLine\\InitializeComponent();Di2015NewLine\}Di2015NewLineDi2015NewLine\public static readonly DependencyProperty ItemTemplateProperty =Di2015NewLine\\DependencyProperty.Register("ItemTemplate", typeof(DataTemplate), typeof(MyControl), new UIPropertyMetadata(null));Di2015NewLine\public DataTemplate ItemTemplateDi2015NewLine\{Di2015NewLine\\get { return (DataTemplate) GetValue(ItemTemplateProperty); }Di2015NewLine\\set { SetValue(ItemTemplateProperty, value); }Di2015NewLine\}Di2015NewLine}Di2015NewLine
279029Di2015UniqueSeparator<UserControl x:Class="WpfApplication6.MyControl"Di2015NewLine    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine    xmlns:src="clr-namespace:WpfApplication6">Di2015NewLine    <ListBox ItemTemplate="{Binding ItemTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type src:MyControl}}}" />Di2015NewLine</UserControl>Di2015NewLine
279029Di2015UniqueSeparator<Style TargetType="{x:Type src:MyControl}">Di2015NewLine    <Setter Property="Template">Di2015NewLine        <Setter.Value>Di2015NewLine            <ControlTemplate TargetType="{x:Type src:MyControl}">Di2015NewLine                <Border Background="{TemplateBinding Background}"Di2015NewLine                        BorderBrush="{TemplateBinding BorderBrush}"Di2015NewLine                        BorderThickness="{TemplateBinding BorderThickness}">Di2015NewLineDi2015NewLine\\\\\<ListBox ItemTemplate="{TemplateBinding ItemTemplate}" />Di2015NewLine                </Border>Di2015NewLine            </ControlTemplate>Di2015NewLine        </Setter.Value>Di2015NewLine    </Setter>Di2015NewLine</Style>Di2015NewLine
279122Di2015UniqueSeparatorSystem.IO
279122Di2015UniqueSeparatorusing System.IO;Di2015NewLine
279122Di2015UniqueSeparatorSystem.IO.StreamReader arrComputer = new System.IO.StreamReader(FileDialog.filename);Di2015NewLine
279162Di2015UniqueSeparatorpublic static int Reverse(Array M)Di2015NewLine{Di2015NewLine    return Reverse(M);Di2015NewLine}Di2015NewLine
279162Di2015UniqueSeparatorreturn Array.Reverse(M);
279162Di2015UniqueSeparatorArray.Reverse
279162Di2015UniqueSeparatorint
279162Di2015UniqueSeparatorReverse
279162Di2015UniqueSeparatorvoid
279228Di2015UniqueSeparatorIsAuthenticated
279394Di2015UniqueSeparatorDim i = From Numbers In ints _Di2015NewLine            Group Numbers By Numbers Into Group _Di2015NewLine            Aggregate feq In Group Into Count() _Di2015NewLine            Select New With {.Number = Numbers, .Count = Count}Di2015NewLine
279394Di2015UniqueSeparatorvar i = from numbers in MDi2015NewLine                group numbers by numbers into groupedDi2015NewLine                select new { Number = grouped.Key, Freq = grouped.Count()};Di2015NewLine
279395Di2015UniqueSeparatorBindingFlags.Public | BindingFlags.Instance
279395Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLinepublic class TestDi2015NewLine{Di2015NewLine    private int foo;Di2015NewLineDi2015NewLine    public int Foo { get { return foo; } }Di2015NewLineDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        var prop = typeof(Test).GetProperty("foo",Di2015NewLine                                            BindingFlags.PublicDi2015NewLine                                            | BindingFlags.Instance Di2015NewLine                                            | BindingFlags.IgnoreCase);Di2015NewLine        Console.WriteLine(prop);Di2015NewLine    }Di2015NewLine}Di2015NewLine
279407Di2015UniqueSeparator<?phpDi2015NewLinerequire_once('lib/nusoap.php');Di2015NewLine$client = new nusoap_client('http://localhost:3333/Service.asmx?wsdl');Di2015NewLineDi2015NewLine$params = array(Di2015NewLine      'anId' => 3,Di2015NewLine      'action' => 'OMNOMNOMNOM',Di2015NewLine      'parameters' => array(Di2015NewLine              'Param' => array(Di2015NewLine                  array('Name' => 'firstName', 'Value' => 'Scott'),Di2015NewLine                  array('Name' => 'lastName', 'Value' => 'Smith')Di2015NewLine                       )Di2015NewLine      )Di2015NewLine);Di2015NewLine$result = $client->call('DoSomething', array($params), Di2015NewLine                'http://tempuri.org/webservices/DoSomething', Di2015NewLine                'http://tempuri.org/webservices/DoSomething');Di2015NewLineprint_r($result);Di2015NewLine?>Di2015NewLine
279486Di2015UniqueSeparator$('#SomeContainer').Load("default.aspx?What=GimmeSomeSweetAjax");Di2015NewLine
279486Di2015UniqueSeparatorif(Request.QueryString["What"]==GimmeSomeSweetAjax)Di2015NewLine{Di2015NewLine   Page page = new Page();Di2015NewLine   Control control = (Control)LoadControl("~/.../someUC.ascx");Di2015NewLine   StringWriter sw = new StringWriter();Di2015NewLine   page.Controls.Add(control);Di2015NewLine   Server.Execute(page, sw, false);Di2015NewLine   Response.Write(sw.ToString());Di2015NewLine   Response.Flush();Di2015NewLine   Response.Close();Di2015NewLine}Di2015NewLine
280077Di2015UniqueSeparatorRead()
280167Di2015UniqueSeparatorException
280167Di2015UniqueSeparatorSystem
280167Di2015UniqueSeparatorpublic void SurroundWithTryCatch(Action action)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        action();Di2015NewLine    }Di2015NewLine    catch(Exception ex)Di2015NewLine    {Di2015NewLine        //something even more boring stuffDi2015NewLine    }    Di2015NewLine}Di2015NewLine
280167Di2015UniqueSeparatorSurroundWithTryCatch(MyMethod)
280167Di2015UniqueSeparatorpublic void MyMethod()Di2015NewLine{Di2015NewLine    SurroundWithTryCatch(() => Di2015NewLine    {Di2015NewLine        // Logic hereDi2015NewLine    });Di2015NewLine}Di2015NewLine
280167Di2015UniqueSeparatorpublic int MyMethod()Di2015NewLine{Di2015NewLine    SurroundWithTryCatch(() => Di2015NewLine    {Di2015NewLine        // Logic hereDi2015NewLine        return 5;Di2015NewLine    });Di2015NewLine}Di2015NewLine
280167Di2015UniqueSeparatorSurroundWithTryCatch
280167Di2015UniqueSeparatorpublic T SurroundWithTryCatch<T>(Func<T> func)Di2015NewLine{    Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        return func();Di2015NewLine    }Di2015NewLine    catch(Exception ex)Di2015NewLine    {Di2015NewLine        //something even more boring stuffDi2015NewLine    }    Di2015NewLine}Di2015NewLine
280236Di2015UniqueSeparatorpublic static class ReportingComponentDi2015NewLine{Di2015NewLine  public static ReportingComponent<T> CreateInstance<T> (IQueryable<T> query)Di2015NewLine  {Di2015NewLine    return new ReportingComponent<T>(query);Di2015NewLine  }Di2015NewLine}Di2015NewLine
280236Di2015UniqueSeparatorvar report = ReportingComponent.CreateInstance(query);Di2015NewLine
280425Di2015UniqueSeparatorConsole.WriteLine(new StackFrame(1).GetMethod().Name);Di2015NewLine
280470Di2015UniqueSeparatorprivate Control GetControl()Di2015NewLine{Di2015NewLine    string dynamicCtrl = CurrentItem.DynamicControl;Di2015NewLine    string path = SomeClass.DynamicControls[dynamicCtrl];Di2015NewLineDi2015NewLine    Control ctrl = LoadControl(path);    Di2015NewLineDi2015NewLine    return ctrl;Di2015NewLine}Di2015NewLine
280478Di2015UniqueSeparator[DllImport("coredll.dll")]Di2015NewLineprivate static extern IntPtr FindWindow(string lpClassName, string lpWindowName);Di2015NewLineDi2015NewLine[DllImport("coredll.dll", EntryPoint="SetForegroundWindow")]Di2015NewLineprivate static extern int SetForegroundWindow(IntPtr hWnd);Di2015NewLine
280505Di2015UniqueSeparatorICloneable
280505Di2015UniqueSeparatorDbCommand
280505Di2015UniqueSeparatorclass Foo : ICloneableDi2015NewLine{Di2015NewLine    public Foo Clone() { return CloneCore(); }Di2015NewLine    object ICloneable.Clone() { return CloneCore(); }Di2015NewLine    protected virtual Foo CloneCore() { ... }Di2015NewLine}Di2015NewLineDi2015NewLineclass Bar : FooDi2015NewLine{Di2015NewLine    protected override Foo CloneCore() { ... }Di2015NewLine    public new Bar Clone() { return (Bar)CloneCore(); }Di2015NewLine}Di2015NewLine
280505Di2015UniqueSeparatoroverride
280505Di2015UniqueSeparatornew
280505Di2015UniqueSeparatorclass ADi2015NewLine{Di2015NewLine    public virtual A SomeMethod() { ... }Di2015NewLine}Di2015NewLineclass B : ADi2015NewLine{Di2015NewLine    public override A SomeMethod() { ... }Di2015NewLine    //Error 1\Type 'B' already defines a member called 'SomeMethod' with the same parameter typesDi2015NewLine    public new B SomeMethod() { ... }Di2015NewLine}Di2015NewLine
280505Di2015UniqueSeparatorCloneCore()
280512Di2015UniqueSeparatorvar MyDoc = XDocument.Load("File1.xml");Di2015NewLineMyDoc.Root.Add(XDocument.Load("File2.xml").Root.Elements());Di2015NewLine
280591Di2015UniqueSeparatorprivate static IEnumerable<T> InstancesOf<T>() where T : classDi2015NewLine{Di2015NewLine    var type = typeof(T);Di2015NewLine    return from t in type.Assembly.GetExportedTypes()Di2015NewLine           where t.IsClassDi2015NewLine               && type.IsAssignableFrom(t)Di2015NewLine               && t.GetConstructor(new Type[0]) != nullDi2015NewLine           select (T)Activator.CreateInstance(t);Di2015NewLine}Di2015NewLine
280960Di2015UniqueSeparatorString appToHookTo = "applicationthatloadedthedll";Di2015NewLineProcess[] foundProcesses = Process.GetProcessesByName(appToHookTo)Di2015NewLineProcessModuleCollection modules = foundProcesses[0].Modules;Di2015NewLineProcessModule dllBaseAdressIWant = null;Di2015NewLineforeach (ProcessModule i in modules) {Di2015NewLineif (i.ModuleName == "nameofdlliwantbaseadressof") {Di2015NewLine                    dllBaseAdressIWant = i;Di2015NewLine                }Di2015NewLine        }Di2015NewLine
280992Di2015UniqueSeparatorprotected override bool SupportsSearchingCoreDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprotected override bool SupportsSortingCoreDi2015NewLine{Di2015NewLine    get { return true; }Di2015NewLine}Di2015NewLine
280992Di2015UniqueSeparatorListSortDirection sortDirectionValue;Di2015NewLinePropertyDescriptor sortPropertyValue;Di2015NewLineDi2015NewLineprotected override void ApplySortCore(PropertyDescriptor prop, Di2015NewLine    ListSortDirection direction)Di2015NewLine{Di2015NewLine    sortedList = new ArrayList();Di2015NewLineDi2015NewLine    // Check to see if the property type we are sorting by implementsDi2015NewLine    // the IComparable interface.Di2015NewLine    Type interfaceType = prop.PropertyType.GetInterface("IComparable");Di2015NewLineDi2015NewLine    if (interfaceType != null)Di2015NewLine    {Di2015NewLine        // If so, set the SortPropertyValue and SortDirectionValue.Di2015NewLine        sortPropertyValue = prop;Di2015NewLine        sortDirectionValue = direction;Di2015NewLineDi2015NewLine        unsortedItems = new ArrayList(this.Count);Di2015NewLineDi2015NewLine        // Loop through each item, adding it the the sortedItems ArrayList.Di2015NewLine        foreach (Object item in this.Items) {Di2015NewLine            sortedList.Add(prop.GetValue(item));Di2015NewLine            unsortedItems.Add(item);Di2015NewLine        }Di2015NewLine        // Call Sort on the ArrayList.Di2015NewLine        sortedList.Sort();Di2015NewLine        T temp;Di2015NewLineDi2015NewLine        // Check the sort direction and then copy the sorted itemsDi2015NewLine        // back into the list.Di2015NewLine        if (direction == ListSortDirection.Descending)Di2015NewLine            sortedList.Reverse();Di2015NewLineDi2015NewLine        for (int i = 0; i < this.Count; i++)Di2015NewLine        {Di2015NewLine            int position = Find(prop.Name, sortedList[i]);Di2015NewLine            if (position != i) {Di2015NewLine                temp = this[i];Di2015NewLine                this[i] = this[position];Di2015NewLine                this[position] = temp;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        isSortedValue = true;Di2015NewLineDi2015NewLine        // Raise the ListChanged event so bound controls refresh theirDi2015NewLine        // values.Di2015NewLine        OnListChanged(new ListChangedEventArgs(ListChangedType.Reset, -1));Di2015NewLine    }Di2015NewLine    elseDi2015NewLine        // If the property type does not implement IComparable, let the userDi2015NewLine        // know.Di2015NewLine        throw new NotSupportedException("Cannot sort by " + prop.Name +Di2015NewLine            ". This" + prop.PropertyType.ToString() + Di2015NewLine            " does not implement IComparable");Di2015NewLine}Di2015NewLine
281224Di2015UniqueSeparator[Function(..., IsComposable=true)]
281224Di2015UniqueSeparatorvar qry = from cust in ctx.CustsDi2015NewLine           select new {Id = cust.Id, Value = ctx.GetTotalValue(cust.Id)};Di2015NewLine
281224Di2015UniqueSeparatorSELECT t1.Id, dbo.MyUdf(t1.Id)Di2015NewLineFROM CUSTOMER t1Di2015NewLine
281224Di2015UniqueSeparatorWhere()
281224Di2015UniqueSeparatorWHERE
281224Di2015UniqueSeparatorJOIN
281259Di2015UniqueSeparatorHttpWebResponse
281259Di2015UniqueSeparatorGetResponseStream
281340Di2015UniqueSeparatorDim routedurl = RouteTable.Routes.GetVirtualPath(context, rvd).VirtualPathDi2015NewLine
281340Di2015UniqueSeparatorrequestContext.HttpContext.Items("RequestContext") = requestContextDi2015NewLine
281340Di2015UniqueSeparatorDim rvd = Di2015NewLine  New RouteValueDictionary(New With {.country = "UK", .lang = "EN-GB"})Di2015NewLineDim routedurl = Di2015NewLine  RouteTable.Routes.GetVirtualPath(context.Items("RequestContext"), rvd).VirtualPathDi2015NewLine
281374Di2015UniqueSeparator* A Java Virtual Machine implemented in .NETDi2015NewLine* A .NET implementation of the Java class librariesDi2015NewLine* Tools that enable Java and .NET interoperabilityDi2015NewLine
281413Di2015UniqueSeparatorTagLib.File f = TagLib.File.Create(path);Di2015NewLinef.Tag.Album = "New Album Title";Di2015NewLinef.Save();Di2015NewLine
281505Di2015UniqueSeparatorpublic abstract class AbstractObject {Di2015NewLine    protected string id;Di2015NewLine    public string IdDi2015NewLine    {Di2015NewLine        get { return id; }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ConcreteObject : AbstractObjectDi2015NewLine{Di2015NewLine    public new string IdDi2015NewLine    {Di2015NewLine        get { return base.Id; }Di2015NewLine        set { id = value; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
281580Di2015UniqueSeparator  private static void WatcherError(object source, ErrorEventArgs e)Di2015NewLine  {Di2015NewLine     watcher = new FileSystemWatcher();//You might want to do a method and to setup all config...Di2015NewLine     while (!watcher.EnableRaisingEvents)Di2015NewLine     {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine           watcher = new FileSystemWatcher();//You might want to do a method and to setup all config...Di2015NewLine        }Di2015NewLine        catchDi2015NewLine        {Di2015NewLine           System.Threading.Thread.Sleep(30000); //Wait for retry 30 sec.Di2015NewLine        }Di2015NewLine     }Di2015NewLine  }Di2015NewLine
281631Di2015UniqueSeparator// In your aspx.cs define the server-side method marked with the Di2015NewLine// WebMethod attribute and it must be public static.Di2015NewLine[WebMethod]Di2015NewLinepublic static string HelloWorld(string name)Di2015NewLine{Di2015NewLine  return "Hello World - by " + name;Di2015NewLine}Di2015NewLineDi2015NewLine// Call the method via javascriptDi2015NewLinePageMethods.HelloWorld("Jimmy", callbackMethod, failMethod);Di2015NewLine
281679Di2015UniqueSeparatorstring[] sizes = { "B", "KB", "MB", "GB" };Di2015NewLinedouble len = new FileInfo(filename).Length;Di2015NewLineint order = 0;Di2015NewLinewhile (len >= 1024 && order + 1 < sizes.Length) {Di2015NewLine    order++;Di2015NewLine    len = len/1024;Di2015NewLine}Di2015NewLineDi2015NewLine// Adjust the format string to your preferences. For example "{0:0.#}{1}" wouldDi2015NewLine// show a single decimal place, and no space.Di2015NewLinestring result = String.Format("{0:0.##} {1}", len, sizes[order]);Di2015NewLine
282120Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinepublic class MyRtb : RichTextBox {Di2015NewLine  protected override bool ProcessCmdKey(ref Message m, Keys keyData) {Di2015NewLine    if (keyData == (Keys.I | Keys.Control)) {Di2015NewLine      // Do your stuffDi2015NewLine      return true;Di2015NewLine    }Di2015NewLine    return base.ProcessCmdKey(ref m, keyData);Di2015NewLine  }Di2015NewLine}Di2015NewLine
282202Di2015UniqueSeparatorIn:Di2015NewLine        protected override void OnClick(EventArgs e)Di2015NewLine        {Di2015NewLine            if (SecondaryContextMenu == null || MouseButtons != MouseButtons.Right)Di2015NewLine            {Di2015NewLine                base.OnClick(e);Di2015NewLine            }Di2015NewLine        }Di2015NewLine
282202Di2015UniqueSeparator MouseButtons != MouseButtons.RightDi2015NewLine
282202Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    class CustomToolStripMenuItem : ToolStripMenuItemDi2015NewLine    {Di2015NewLine        private ContextMenuStrip secondaryContextMenu;Di2015NewLineDi2015NewLine        public ContextMenuStrip SecondaryContextMenuDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return secondaryContextMenu;Di2015NewLine            }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                secondaryContextMenu = value;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public CustomToolStripMenuItem(string text)Di2015NewLine            : base(text)Di2015NewLine        { }Di2015NewLineDi2015NewLine        protected override void Dispose(bool disposing)Di2015NewLine        {Di2015NewLine            if (disposing)Di2015NewLine            {Di2015NewLine                if (secondaryContextMenu != null)Di2015NewLine                {Di2015NewLine                    secondaryContextMenu.Dispose();Di2015NewLine                    secondaryContextMenu = null;Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            base.Dispose(disposing);Di2015NewLine        }Di2015NewLineDi2015NewLine        protected override void OnClick(EventArgs e)Di2015NewLine        {Di2015NewLine            if (SecondaryContextMenu == null || MouseButtons != MouseButtons.Right)Di2015NewLine            {Di2015NewLine                base.OnClick(e);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    class CustomContextMenuStrip : ContextMenuStripDi2015NewLine    {Di2015NewLine        private bool secondaryContextMenuActive = false;Di2015NewLine        private ContextMenuStrip lastShownSecondaryContextMenu = null;Di2015NewLineDi2015NewLine        protected override void Dispose(bool disposing)Di2015NewLine        {Di2015NewLine            if (disposing)Di2015NewLine            {Di2015NewLine                if (lastShownSecondaryContextMenu != null)Di2015NewLine                {Di2015NewLine                    lastShownSecondaryContextMenu.Close();Di2015NewLine                    lastShownSecondaryContextMenu = null;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            base.Dispose(disposing);Di2015NewLine        }Di2015NewLineDi2015NewLine        protected override void OnControlAdded(ControlEventArgs e)Di2015NewLine        {Di2015NewLine            e.Control.MouseClick += new MouseEventHandler(Control_MouseClick);Di2015NewLine            base.OnControlAdded(e);Di2015NewLine        }Di2015NewLineDi2015NewLine        protected override void OnControlRemoved(ControlEventArgs e)Di2015NewLine        {Di2015NewLine            e.Control.MouseClick -= new MouseEventHandler(Control_MouseClick);Di2015NewLine            base.OnControlRemoved(e);Di2015NewLine        }Di2015NewLineDi2015NewLine        private void Control_MouseClick(object sender, MouseEventArgs e)Di2015NewLine        {Di2015NewLine            ShowSecondaryContextMenu(e);Di2015NewLine        }Di2015NewLineDi2015NewLine        protected override void OnMouseClick(MouseEventArgs e)Di2015NewLine        {Di2015NewLine            ShowSecondaryContextMenu(e);Di2015NewLine            base.OnMouseClick(e);Di2015NewLine        }Di2015NewLineDi2015NewLine        private bool ShowSecondaryContextMenu(MouseEventArgs e)Di2015NewLine        {Di2015NewLine            CustomToolStripMenuItem ctsm = this.GetItemAt(e.Location) as CustomToolStripMenuItem;Di2015NewLineDi2015NewLine            if (ctsm == null || ctsm.SecondaryContextMenu == null || e.Button != MouseButtons.Right)Di2015NewLine            {Di2015NewLine                return false;Di2015NewLine            }Di2015NewLineDi2015NewLine            lastShownSecondaryContextMenu = ctsm.SecondaryContextMenu;Di2015NewLine            secondaryContextMenuActive = true;Di2015NewLine            ctsm.SecondaryContextMenu.Closed += new ToolStripDropDownClosedEventHandler(SecondaryContextMenu_Closed);Di2015NewLine            ctsm.SecondaryContextMenu.Show(Cursor.Position);Di2015NewLine            return true;Di2015NewLine        }Di2015NewLineDi2015NewLine        void SecondaryContextMenu_Closed(object sender, ToolStripDropDownClosedEventArgs e)Di2015NewLine        {Di2015NewLine            ((ContextMenuStrip)sender).Closed -= new ToolStripDropDownClosedEventHandler(SecondaryContextMenu_Closed);Di2015NewLine            lastShownSecondaryContextMenu = null;Di2015NewLine            secondaryContextMenuActive = false;Di2015NewLine            Focus();Di2015NewLine        }Di2015NewLineDi2015NewLine        protected override void OnClosing(ToolStripDropDownClosingEventArgs e)Di2015NewLine        {Di2015NewLine            if (secondaryContextMenuActive)Di2015NewLine            {Di2015NewLine                e.Cancel = true;Di2015NewLine            }Di2015NewLineDi2015NewLine            base.OnClosing(e);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLineDi2015NewLine        CustomToolStripMenuItem itemPrimary1 = new CustomToolStripMenuItem("item primary 1");Di2015NewLine        itemPrimary1.SecondaryContextMenu = new ContextMenuStrip();Di2015NewLine        itemPrimary1.SecondaryContextMenu.Items.AddRange(new ToolStripMenuItem[] { Di2015NewLine            new ToolStripMenuItem("item primary 1.1"),Di2015NewLine            new ToolStripMenuItem("item primary 1.2"),Di2015NewLine        });Di2015NewLineDi2015NewLine        CustomToolStripMenuItem itemPrimary2 = new CustomToolStripMenuItem("item primary 2");Di2015NewLine        itemPrimary2.DropDownItems.Add("item primary 2, sub 1");Di2015NewLine        itemPrimary2.DropDownItems.Add("item primary 2, sub 2");Di2015NewLine        itemPrimary2.SecondaryContextMenu = new ContextMenuStrip();Di2015NewLine        itemPrimary2.SecondaryContextMenu.Items.AddRange(new ToolStripMenuItem[] { Di2015NewLine            new ToolStripMenuItem("item primary 2.1"),Di2015NewLine            new ToolStripMenuItem("item primary 2.2"),Di2015NewLine        });Di2015NewLineDi2015NewLine        CustomContextMenuStrip primaryContextMenu = new CustomContextMenuStrip();Di2015NewLine        primaryContextMenu.Items.AddRange(new ToolStripItem[]{Di2015NewLine            itemPrimary1,Di2015NewLine            itemPrimary2Di2015NewLine        });Di2015NewLineDi2015NewLine        this.ContextMenuStrip = primaryContextMenu;Di2015NewLine    }Di2015NewLine}Di2015NewLine
282217Di2015UniqueSeparator/// <summary>Di2015NewLine/// A simple popup window that can host any System.Windows.Forms.ControlDi2015NewLine/// </summary>Di2015NewLinepublic class PopupWindow : System.Windows.Forms.ToolStripDropDownDi2015NewLine{Di2015NewLine    private System.Windows.Forms.Control _content;Di2015NewLine    private System.Windows.Forms.ToolStripControlHost _host;Di2015NewLineDi2015NewLine    public PopupWindow(System.Windows.Forms.Control content)Di2015NewLine    {Di2015NewLine        //Basic setup...Di2015NewLine        this.AutoSize = false;Di2015NewLine        this.DoubleBuffered = true;Di2015NewLine        this.ResizeRedraw = true;Di2015NewLineDi2015NewLine        this._content = content;Di2015NewLine        this._host = new System.Windows.Forms.ToolStripControlHost(content);Di2015NewLineDi2015NewLine        //Positioning and SizingDi2015NewLine        this.MinimumSize = content.MinimumSize;Di2015NewLine        this.MaximumSize = content.Size;Di2015NewLine        this.Size = content.Size;Di2015NewLine        content.Location = Point.Empty;Di2015NewLineDi2015NewLine        //Add the host to the listDi2015NewLine        this.Items.Add(this._host);Di2015NewLine    }Di2015NewLine}Di2015NewLine
282217Di2015UniqueSeparatorPopupWindow popup = new PopupWindow(MyControlToHost);Di2015NewLinepopup.Show(new Point(100,100));Di2015NewLine...Di2015NewLinepopup.Close();Di2015NewLine
282277Di2015UniqueSeparatorusing System;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinenamespace TestDi2015NewLine{Di2015NewLine    public class ComponentClass : ComponentDi2015NewLine    {Di2015NewLine        public ComponentClass()Di2015NewLine        {Di2015NewLine            MessageBox.Show("Runtime!");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
282277Di2015UniqueSeparatorusing System;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinenamespace TestDi2015NewLine{Di2015NewLine    public class ComponentClass : ComponentDi2015NewLine    {Di2015NewLine        public ComponentClass()Di2015NewLine        {Di2015NewLine            if (LicenseManager.UsageMode != LicenseUsageMode.Designtime)Di2015NewLine            {Di2015NewLine                MessageBox.Show("Runtime!");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
282469Di2015UniqueSeparatorbool result = obj.GetType().IsAssignableFrom(otherObj.GetType());Di2015NewLine
282548Di2015UniqueSeparatorpublic class TimeSeries<T, U> where U : TimeSeries<T, U>Di2015NewLine{Di2015NewLine    U Slice(...)Di2015NewLine}Di2015NewLineDi2015NewLinepublic class TimeSeriesDouble : TimeSeries<double, TimeSeriesDouble>Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLine
282741Di2015UniqueSeparatorvoid SomeEventInvoke(object sender, EventArgs args) Di2015NewLine{Di2015NewLine    EventHandler ev = SomeEvent;Di2015NewLine    if (ev != null) ev(sender, args);Di2015NewLine}Di2015NewLine
282875Di2015UniqueSeparatorvar query = from a in db.tblActivitiesDi2015NewLine            join i in db.tblIPs on a.ipid equals i.idDi2015NewLine            join u in db.tblUsers on i.uid equals u.idDi2015NewLine            select new {Di2015NewLine               UserName = (u.UserName ?? i.Address),Di2015NewLine               Request = a.Request,Di2015NewLine               Date = a.DateTimeDi2015NewLine            };Di2015NewLine
282875Di2015UniqueSeparatorUserName = (u.UserName == null) ? i.Address : u.UserName,Di2015NewLine
282880Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinenamespace ConsoleApplication1Di2015NewLine{Di2015NewLine\public class fooDi2015NewLine\{Di2015NewLine\\public int value;Di2015NewLine\};Di2015NewLineDi2015NewLine\public class barDi2015NewLine\{Di2015NewLine\\public bar()Di2015NewLine\\{Di2015NewLine\\\m_foo = new foo();Di2015NewLine\\\m_foo.value = 42;Di2015NewLine\\}Di2015NewLineDi2015NewLine\\private foo m_foo;Di2015NewLine\\public foo getFoo() { return m_foo; }Di2015NewLine\};Di2015NewLineDi2015NewLine\public class ProgramDi2015NewLine\{Di2015NewLine\\public static int Main()Di2015NewLine\\{Di2015NewLine\\\bar b = new bar();Di2015NewLine\\\b.getFoo().value = 37;Di2015NewLine\\\return 0;Di2015NewLine\\}Di2015NewLine\};Di2015NewLine}Di2015NewLine
283157Di2015UniqueSeparatorvar query = from u in db.UsersDi2015NewLine            join p in db.PCs on p.UserId == u.IdDi2015NewLine            join a in db.Apps on a.PCId == p.IdDi2015NewLine            select newDi2015NewLine            {Di2015NewLine                username = u.Name,Di2015NewLine                pcname = p.Name,Di2015NewLine                appname = a.NameDi2015NewLine            };Di2015NewLine
283188Di2015UniqueSeparatorStringComparer
283188Di2015UniqueSeparatorList<string> list = new List<string>() {Di2015NewLine    "One", "Two", "Three", "three", "Four", "Five" };Di2015NewLineDi2015NewLinevar distinctList = list.Distinct(Di2015NewLine    StringComparer.CurrentCultureIgnoreCase).ToList();Di2015NewLine
283192Di2015UniqueSeparatorPage
283359Di2015UniqueSeparatorIList<T>
283359Di2015UniqueSeparatorfor(int i = 0 ; i < itemsToActOn.Count ; i++)Di2015NewLine{Di2015NewLine    T value = itemsToActOn[i];Di2015NewLine    visitor.Visit(ref t)Di2015NewLine    itemsToActOn[i] = value;Di2015NewLine}Di2015NewLine
283359Di2015UniqueSeparatorT Visit(T)
283359Di2015UniqueSeparatorfor(int i = 0 ; i < itemsToActOn.Count ; i++)Di2015NewLine{Di2015NewLine    itemsToActOn[i] = visitor.Visit(itemsToActOn[i]);Di2015NewLine}Di2015NewLine
283402Di2015UniqueSeparatorXmlDocument myXmlNode = new XmlDocument();Di2015NewLineusing (XmlReader reader = myXElement.CreateReader())Di2015NewLine{Di2015NewLine    myXmlNode.Load(reader);Di2015NewLine}Di2015NewLine
283474Di2015UniqueSeparatorImports SystemDi2015NewLineImports EnvDTEDi2015NewLineImports EnvDTE80Di2015NewLineImports EnvDTE90Di2015NewLineImports System.DiagnosticsDi2015NewLineDi2015NewLinePublic Module OrganiseUsingsDi2015NewLineDi2015NewLine    Public Sub RemoveAndSortAll()Di2015NewLine        On Error Resume NextDi2015NewLine        Dim sol As Solution = DTE.SolutionDi2015NewLineDi2015NewLine        For i As Integer = 1 To sol.Projects.Count    Di2015NewLine            Dim proj As Project = sol.Projects.Item(i)    Di2015NewLine            For j As Integer = 1 To proj.ProjectItems.Count    Di2015NewLine                RemoveAndSortSome(proj.ProjectItems.Item(j))    Di2015NewLine            Next    Di2015NewLine        Next    Di2015NewLine    End Sub    Di2015NewLineDi2015NewLine    Private Sub RemoveAndSortSome(ByVal projectItem As ProjectItem)Di2015NewLine        On Error Resume NextDi2015NewLine        If projectItem.Kind = Constants.vsProjectItemKindPhysicalFile Then    Di2015NewLine            If projectItem.Name.LastIndexOf(".cs") = projectItem.Name.Length - 3 ThenDi2015NewLine                Dim window As Window = projectItem.Open(Constants.vsViewKindCode)Di2015NewLineDi2015NewLine                window.Activate()Di2015NewLineDi2015NewLine                projectItem.Document.DTE.ExecuteCommand("Edit.RemoveAndSort")Di2015NewLineDi2015NewLine                window.Close(vsSaveChanges.vsSaveChangesYes)Di2015NewLine            End If    Di2015NewLine        End If    Di2015NewLineDi2015NewLine        For i As Integer = 1 To projectItem.ProjectItems.Count    Di2015NewLine            RemoveAndSortSome(projectItem.ProjectItems.Item(i))    Di2015NewLine        NextDi2015NewLine    End Sub   Di2015NewLineDi2015NewLineEnd ModuleDi2015NewLine
283491Di2015UniqueSeparatorstring x = "string1string2string3"Di2015NewLinestring y = "string1" + "string2" + "string3"Di2015NewLine
283491Di2015UniqueSeparatorStringBuilder
283491Di2015UniqueSeparatorStringBuilder
283491Di2015UniqueSeparatorStringBuilder
283500Di2015UniqueSeparatorobject
283500Di2015UniqueSeparatorref
283500Di2015UniqueSeparator    int i = 3;Di2015NewLine    //...Di2015NewLine    object obj = i;Di2015NewLine    Foo(ref obj);Di2015NewLine    i = (int)obj;Di2015NewLine
283500Di2015UniqueSeparatorref object
283500Di2015UniqueSeparatordynamic
283546Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Linq.Expressions;Di2015NewLineclass Test {Di2015NewLine    public string Foo { get; set; }Di2015NewLine    public string Bar { get; set; }Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        bool test1 = FuncTest<Test>.FuncEqual(x => x.Bar, y => y.Bar),Di2015NewLine            test2 = FuncTest<Test>.FuncEqual(x => x.Foo, y => y.Bar);Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine// this only exists to make it easier to call, i.e. so that I can use FuncTest<T> withDi2015NewLine// generic-type-inference; if you use the doubly-generic method, you need to specifyDi2015NewLine// both arguments, which is a pain...Di2015NewLinestatic class FuncTest<TSource>Di2015NewLine{Di2015NewLine    public static bool FuncEqual<TValue>(Di2015NewLine        Expression<Func<TSource, TValue>> x,Di2015NewLine        Expression<Func<TSource, TValue>> y)Di2015NewLine    {Di2015NewLine        return FuncTest.FuncEqual<TSource, TValue>(x, y);Di2015NewLine    }Di2015NewLine}Di2015NewLinestatic class FuncTest {Di2015NewLine    public static bool FuncEqual<TSource, TValue>(Di2015NewLine        Expression<Func<TSource,TValue>> x,Di2015NewLine        Expression<Func<TSource,TValue>> y)Di2015NewLine    {Di2015NewLine        return ExpressionEqual(x, y);Di2015NewLine    }Di2015NewLine    private static bool ExpressionEqual(Expression x, Expression y)Di2015NewLine    {Di2015NewLine        // deal with the simple cases first...Di2015NewLine        if (ReferenceEquals(x, y)) return true;Di2015NewLine        if (x == null || y == null) return false;Di2015NewLine        if (   x.NodeType != y.NodeTypeDi2015NewLine            || x.Type != y.Type ) return false;Di2015NewLineDi2015NewLine        switch (x.NodeType)Di2015NewLine        {Di2015NewLine            case ExpressionType.Lambda:Di2015NewLine                return ExpressionEqual(((LambdaExpression)x).Body, ((LambdaExpression)y).Body);Di2015NewLine            case ExpressionType.MemberAccess:Di2015NewLine                MemberExpression mex = (MemberExpression)x, mey = (MemberExpression)y;Di2015NewLine                return mex.Member == mey.Member; // should really test down-stream expressionDi2015NewLine            default:Di2015NewLine                throw new NotImplementedException(x.NodeType.ToString());Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
283683Di2015UniqueSeparatorApplication.Run(new Form1());Di2015NewLine
283683Di2015UniqueSeparatorApplication.Run
283683Di2015UniqueSeparatorForm1 form = new Form1();Di2015NewLineApplication.Run();Di2015NewLine
283683Di2015UniqueSeparatorApplication.ExitThread()
283683Di2015UniqueSeparatorFormClosed
283683Di2015UniqueSeparatorprivate void Form1_FormClosed(object sender, FormClosedEventArgs e)Di2015NewLine{Di2015NewLine    Application.ExitThread();Di2015NewLine}Di2015NewLine
283917Di2015UniqueSeparatorstatic public string AssemblyDirectoryDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        string codeBase = Assembly.GetExecutingAssembly().CodeBase;Di2015NewLine        UriBuilder uri = new UriBuilder(codeBase);Di2015NewLine        string path = Uri.UnescapeDataString(uri.Path);Di2015NewLine        return Path.GetDirectoryName(path);Di2015NewLine    }Di2015NewLine}Di2015NewLine
283917Di2015UniqueSeparatorAssembly.Location
283917Di2015UniqueSeparatorCodeBase
283917Di2015UniqueSeparatorUriBuild.UnescapeDataString
283917Di2015UniqueSeparatorFile://
283917Di2015UniqueSeparatorGetDirectoryName
283932Di2015UniqueSeparator<html>Di2015NewLine<head>Di2015NewLine<STYLE type="text/css">Di2015NewLine    h1 {text-align:center; font-size:12.0pt; font-family:Arial; font-weight:bold;}Di2015NewLineDi2015NewLine    p {margin:0in; margin-bottom:0pt; font-size: 10.0pt;font-family: Arial;}Di2015NewLine    p.Address {text-align:center;font-family:Times; margin-bottom: 10px;}Di2015NewLine</style></head>Di2015NewLine<body>Di2015NewLine<p class="Address">The Street</p>Di2015NewLine<h1>Head</h1>Di2015NewLine
284078Di2015UniqueSeparatorpublic static Int32? ParseInt32(this string str) {Di2015NewLine    Int32 k;Di2015NewLine    if(Int32.TryParse(str, out k))Di2015NewLine        return k;Di2015NewLine    return null;Di2015NewLine}Di2015NewLine
284116Di2015UniqueSeparatorByte value = 0x0FF;Di2015NewLineint value = 0x1B;Di2015NewLine
284116Di2015UniqueSeparatorstring foo = String.Format("{0} hex test", 0x0BB);Di2015NewLine
284129Di2015UniqueSeparatorvar dictionary = ...;Di2015NewLinevar readonly_keys = new ReadOnlyCollection<T> (new CollectionListWrapper<T> (dictionary.Keys)Di2015NewLine);Di2015NewLine
284313Di2015UniqueSeparator  Func<DataClasses.User, String> userName = user => user.UserName;Di2015NewLine  Func<DataClasses.User, Boolean> userIDOverTen = user => user.UserID < 10;Di2015NewLine  Func<DataClasses.User, Boolean> userIDUnderTen = user => user.UserID > 10;Di2015NewLine
284313Di2015UniqueSeparator  var userList = Di2015NewLine    from user in userListDi2015NewLine    where userIDOverTen(user)Di2015NewLine    select userName;Di2015NewLine
284313Di2015UniqueSeparator  var otherList =Di2015NewLine    userListDi2015NewLine    .Where(IDIsBelowNumber)Di2015NewLine    .Select(userName)Di2015NewLine
284313Di2015UniqueSeparator  private Boolean IDIsBelowNumber(DataClasses.User user, Di2015NewLine          Int32 someNumber, Boolean doSomething)Di2015NewLine  {Di2015NewLine    return user.UserID < someNumber;Di2015NewLine  }Di2015NewLine
284313Di2015UniqueSeparator  var completeList =Di2015NewLine     from user in userListDi2015NewLine     where IDIsBelowNumber(user, 10, true)Di2015NewLine     select userName;Di2015NewLine
284313Di2015UniqueSeparator  var otherList =Di2015NewLine    userListDi2015NewLine    .Where(IDIsBelowNumber????)Di2015NewLine    .Select(userName)Di2015NewLine
284313Di2015UniqueSeparator   private Func<DataClasses.User, Boolean> IDIsBelowNumberFunc(Int32 number)Di2015NewLine   {Di2015NewLine      return user => IDIsBelowNumber(user, number, true);Di2015NewLine   }Di2015NewLine
284313Di2015UniqueSeparator  var otherList =Di2015NewLine     userListDi2015NewLine     .Where(IDIsBelowNumberFunc(10))Di2015NewLine     .Select(userName)Di2015NewLine
284331Di2015UniqueSeparatorXmlSerializer
284331Di2015UniqueSeparatorXDocument
284331Di2015UniqueSeparatorXmlWriter
284331Di2015UniqueSeparatorXDocument
284331Di2015UniqueSeparator    Console.WriteLine(Di2015NewLine        new XElement("Foo",Di2015NewLine            new XAttribute("Bar", "some & value"),Di2015NewLine            new XElement("Nested", "data")));Di2015NewLine
284331Di2015UniqueSeparatorXmlDocument
284331Di2015UniqueSeparator    XmlDocument doc = new XmlDocument();Di2015NewLine    XmlElement el = (XmlElement)doc.AppendChild(doc.CreateElement("Foo"));Di2015NewLine    el.SetAttribute("Bar", "some & value");Di2015NewLine    el.AppendChild(doc.CreateElement("Nested")).InnerText = "data";Di2015NewLine    Console.WriteLine(doc.OuterXml);Di2015NewLine
284331Di2015UniqueSeparatorXmlDocument
284331Di2015UniqueSeparatorXDocument
284331Di2015UniqueSeparatorXmlWriter
284331Di2015UniqueSeparator    XmlWriter writer = XmlWriter.Create(Console.Out);Di2015NewLine    writer.WriteStartElement("Foo");Di2015NewLine    writer.WriteAttributeString("Bar", "Some & value");Di2015NewLine    writer.WriteElementString("Nested", "data");Di2015NewLine    writer.WriteEndElement();Di2015NewLine
284331Di2015UniqueSeparatorXmlSerializer
284331Di2015UniqueSeparator    [Serializable]Di2015NewLine    public class FooDi2015NewLine    {Di2015NewLine        [XmlAttribute]Di2015NewLine        public string Bar { get; set; }Di2015NewLine        public string Nested { get; set; }Di2015NewLine    }Di2015NewLine    ...Di2015NewLine    Foo foo = new FooDi2015NewLine    {Di2015NewLine        Bar = "some & value",Di2015NewLine        Nested = "data"Di2015NewLine    };Di2015NewLine    new XmlSerializer(typeof(Foo)).Serialize(Console.Out, foo);Di2015NewLine
284331Di2015UniqueSeparatorXmlSerializer
284331Di2015UniqueSeparatorIXmlSerializable
284331Di2015UniqueSeparatorXmlSerializer
284406Di2015UniqueSeparatorXmlDocument
284406Di2015UniqueSeparator    XmlDocument doc = new XmlDocument();Di2015NewLine    doc.Load(reader);Di2015NewLine    XmlElement el = doc.DocumentElement;Di2015NewLine
284406Di2015UniqueSeparator    doc.LoadXml(reader.ReadOuterXml());Di2015NewLine
284406Di2015UniqueSeparator    using (XmlReader subReader = reader.ReadSubtree())Di2015NewLine    {Di2015NewLine        XmlDocument doc = new XmlDocument();Di2015NewLine        doc.Load(subReader);Di2015NewLine        XmlElement el = doc.DocumentElement;Di2015NewLine    }Di2015NewLine
284462Di2015UniqueSeparatorusing System.Reflection;Di2015NewLineDi2015NewLinestatic Program()Di2015NewLine{Di2015NewLine    AppDomain.CurrentDomain.AssemblyResolve += delegate(object sender, ResolveEventArgs e)Di2015NewLine    {Di2015NewLine        AssemblyName requestedName = new AssemblyName(e.Name);Di2015NewLineDi2015NewLine        if (requestedName.Name == "Office11Wrapper")Di2015NewLine        {Di2015NewLine            // Put code here to load whatever version of the assembly you actually haveDi2015NewLineDi2015NewLine            return Assembly.LoadFile("Office11Wrapper.DLL");Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            return null;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
284505Di2015UniqueSeparatorMonitor
284505Di2015UniqueSeparatorlock
284570Di2015UniqueSeparatorclass
284579Di2015UniqueSeparatorstring s = AppDomain.CurrentDomain.GetData("DataDirectory") as string;Di2015NewLine
284665Di2015UniqueSeparatorpublic class Project{Di2015NewLineDi2015NewLinepublic string Title {get;set;}Di2015NewLinepublic string DevUrl {get;set;}Di2015NewLinepublic string QAUrl {get;set;}Di2015NewLinepublic string LiveUrl {get;set;}Di2015NewLinepublic IEnumerable<User> Users {get;set;}Di2015NewLineDi2015NewLinepublic static IEnumerable<Project> RetrieveAllProjects()Di2015NewLine{Di2015NewLine  return from p in db.ProjectsDi2015NewLine           orderby p.titleDi2015NewLine           select new ProjectDi2015NewLine             {Di2015NewLine                Title = p.title,Di2015NewLine                DevURL = p.devURL ?? "N/A",Di2015NewLine                QAURL = p.qaURL ?? "N/A",Di2015NewLine                LiveURL = p.liveURL ?? "N/A",Di2015NewLine                Users = p.GetUsers().MakeUserList()Di2015NewLine             };Di2015NewLine}Di2015NewLine
284665Di2015UniqueSeparatorpublic ActionResult Index()Di2015NewLine{Di2015NewLine  return View("Index", Project.RetrieveAllProjects());Di2015NewLine}Di2015NewLine
284665Di2015UniqueSeparator//snipDi2015NewLinepublic partial class Index : ViewPage<IEnumerable<Project>>Di2015NewLine{Di2015NewLine//snipDi2015NewLine
284672Di2015UniqueSeparatordataGridView1.RowPostPaint += OnRowPostPaint;Di2015NewLineDi2015NewLinevoid OnRowPostPaint(object sender, DataGridViewRowPostPaintEventArgs e)Di2015NewLine{Di2015NewLine    MyObject value = (MyObject) dataGridView1.Rows[e.RowIndex].DataBoundItem;Di2015NewLine    DataGridViewCellStyle style = dataGridView1.Rows[e.RowIndex].DefaultCellStyle;Di2015NewLineDi2015NewLine    // Do whatever you want with style and valueDi2015NewLine    ....Di2015NewLine}Di2015NewLine
284905Di2015UniqueSeparatorpublic Foo(int x, int y)Di2015NewLine{Di2015NewLine    this.x = x;Di2015NewLine    this.y = y;Di2015NewLine    precomputedValue = x * y;Di2015NewLine}Di2015NewLineDi2015NewLineprivate static int DefaultYDi2015NewLine{Di2015NewLine    get { return DateTime.Now.Minute; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic Foo(int x) : this(x, DefaultY)Di2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic Foo() : this(1, DefaultY)Di2015NewLine{Di2015NewLine}Di2015NewLine
284905Di2015UniqueSeparatorpublic static XmlDocument FromText(string xml)Di2015NewLineDi2015NewLinepublic static XmlDocument FromFile(string filename)Di2015NewLine
285041Di2015UniqueSeparatorp.StandardInput.Close()Di2015NewLine
285458Di2015UniqueSeparatorLinkVisibility
285458Di2015UniqueSeparatorLinkVisibility
285458Di2015UniqueSeparatorLinkVisibility
285500Di2015UniqueSeparatorMerge
285500Di2015UniqueSeparatordtAll = dtOne.Copy();Di2015NewLinedtAll.Merge(dtTwo);Di2015NewLine
285744Di2015UniqueSeparator   1: using System.ComponentModel.Composition;Di2015NewLine   2: using System.Reflection;Di2015NewLine   3: using Microsoft.VisualStudio.TestTools.UnitTesting;Di2015NewLine   4:  Di2015NewLine   5: namespace MVPwithMEFDi2015NewLine   6: {Di2015NewLine   7:     /// <summary>Di2015NewLine   8:     /// Summary description for MVPTriadFixtureDi2015NewLine   9:     /// </summary>Di2015NewLine  10:     [TestClass]Di2015NewLine  11:     public class MVPTriadFixtureDi2015NewLine  12:     {Di2015NewLine  13:         [TestMethod]Di2015NewLine  14:         public void MVPTriadShouldBeProperlyBuilt()Di2015NewLine  15:         {Di2015NewLine  16:             var catalog = new AttributedAssemblyPartCatalog(Assembly.GetExecutingAssembly());Di2015NewLine  17:             var container = new CompositionContainer(catalog.CreateResolver());Di2015NewLine  18:             var shell = container.GetExportedObject<Shell>();Di2015NewLine  19:             Assert.IsNotNull(shell);Di2015NewLine  20:             Assert.IsNotNull(shell.Presenter);Di2015NewLine  21:             Assert.IsNotNull(shell.Presenter.View);Di2015NewLine  22:             Assert.IsNotNull(shell.Presenter.Model);Di2015NewLine  23:         }Di2015NewLine  24:     }Di2015NewLine  25:  Di2015NewLine  26:     [Export]Di2015NewLine  27:     public class ShellDi2015NewLine  28:     {Di2015NewLine  29:         private IPresenter _presenter = null;Di2015NewLine  30:         Di2015NewLine  31:         public IPresenter PresenterDi2015NewLine  32:         {Di2015NewLine  33:             get { return _presenter; }Di2015NewLine  34:         }Di2015NewLine  35:  Di2015NewLine  36:         [ImportingConstructor]Di2015NewLine  37:         public Shell(IPresenter presenter)Di2015NewLine  38:         {Di2015NewLine  39:             _presenter = presenter;Di2015NewLine  40:         }Di2015NewLine  41:     }Di2015NewLine  42:  Di2015NewLine  43:     public interface IModelDi2015NewLine  44:     {Di2015NewLine  45:     }Di2015NewLine  46:  Di2015NewLine  47:     [Export(typeof(IModel))]Di2015NewLine  48:     public class Model : IModelDi2015NewLine  49:     {Di2015NewLine  50:         Di2015NewLine  51:     }Di2015NewLine  52:  Di2015NewLine  53:     public interface IViewDi2015NewLine  54:     {Di2015NewLine  55:     }Di2015NewLine  56:  Di2015NewLine  57:     [Export(typeof(IView))]Di2015NewLine  58:     public class View : IViewDi2015NewLine  59:     {Di2015NewLine  60:     }Di2015NewLine  61:  Di2015NewLine  62:     public interface IPresenterDi2015NewLine  63:     {Di2015NewLine  64:         IView View { get;}Di2015NewLine  65:         IModel Model { get; }Di2015NewLine  66:     }Di2015NewLine  67:  Di2015NewLine  68:     [Export(typeof(IPresenter))]Di2015NewLine  69:     public class Presenter : IPresenterDi2015NewLine  70:     {Di2015NewLine  71:  Di2015NewLine  72:         private IView _view;Di2015NewLine  73:         private IModel _model;Di2015NewLine  74:  Di2015NewLine  75:         [ImportingConstructor]Di2015NewLine  76:         public Presenter(IView view, IModel model)Di2015NewLine  77:         {Di2015NewLine  78:             _view = view;Di2015NewLine  79:             _model = model;Di2015NewLine  80:         }Di2015NewLine  81:  Di2015NewLine  82:         public IView ViewDi2015NewLine  83:         {Di2015NewLine  84:             get { return _view; }Di2015NewLine  85:         }Di2015NewLine  86:  Di2015NewLine  87:         public IModel ModelDi2015NewLine  88:         {Di2015NewLine  89:             get { return _model; }Di2015NewLine  90:         }Di2015NewLine  91:  Di2015NewLine  92:     }Di2015NewLine  93: }Di2015NewLine
285986Di2015UniqueSeparator+-------------------------+-------------------+-----------------+------------------------+Di2015NewLine| Length of Msg (4 bytes) | MsgType (2 bytes) | Flags (4 bytes) | Msg (length - 6 bytes) |Di2015NewLine+-------------------------+-------------------+-----------------+------------------------+Di2015NewLine
285986Di2015UniqueSeparatorconst uint32_t FLAG_0  = (1 << 0);Di2015NewLineconst uint32_t FLAG_1  = (1 << 1);Di2015NewLineconst uint32_t FLAG_2  = (1 << 2);Di2015NewLine...Di2015NewLineconst uint32_t RESERVED_32 = (1 << 31);Di2015NewLine
285986Di2015UniqueSeparatoruint32 length = MessageBuffer.ReadUint32();Di2015NewLineuint32 start = MessageBuffer.CurrentOffset();Di2015NewLineuint16 msgType = MessageBuffer.ReadUint16();Di2015NewLineuint32 flags = MessageBuffer.ReadUint32();Di2015NewLineDi2015NewLineif (flags & FLAG_0)Di2015NewLine{Di2015NewLine    // Read out whatever FLAG_0 represents.Di2015NewLine    // Single or multiple fieldsDi2015NewLine}Di2015NewLine// ...Di2015NewLine// read out the other flagsDi2015NewLine// ...Di2015NewLineDi2015NewLineMessageBuffer.AdvanceToOffset(start + length);Di2015NewLine
286056Di2015UniqueSeparatorstring xmlSample = "<root><item att1=\\"value\\" att2=\\"value2\\" /></root>"Di2015NewLine
286056Di2015UniqueSeparator<root><item att1="value" att2="value2" /></root>Di2015NewLine
286056Di2015UniqueSeparatorstring xmlSample = @"<root><item att1=\\""value\\"" att2=\\""value2\\"" /></root>";Di2015NewLine
286056Di2015UniqueSeparator<root><item att1=\\"value\\" att2=\\"value2\\" /></root>Di2015NewLine
286056Di2015UniqueSeparatorstring test = xmlSample.Replace(@"\\", string.Empty);Di2015NewLine
286056Di2015UniqueSeparator<root><item att1="value" att2="value2" /></root>Di2015NewLine
286056Di2015UniqueSeparator\\
286071Di2015UniqueSeparatorUserObject user = DAL.GetUserObject(userName);Di2015NewLineSession["CurrentUser"] = user;Di2015NewLine// Later...Di2015NewLineUserObject user = Session["CurrentUser"] as UserObject;Di2015NewLine// ...Di2015NewLine
286071Di2015UniqueSeparatorprivate UserObject CurrentUserDi2015NewLine{Di2015NewLine     getDi2015NewLine     {Di2015NewLine          return this.Session["CurrentUser"] as UserObject;Di2015NewLine     }Di2015NewLine     setDi2015NewLine     {Di2015NewLine          this.Session["CurrentUser"] = value;Di2015NewLine     }Di2015NewLine}Di2015NewLine
286288Di2015UniqueSeparatorCheckCreatedType
286288Di2015UniqueSeparatorpublic class ADi2015NewLine{Di2015NewLine    public IFieldSimpleItem Create()Di2015NewLine    {Di2015NewLine        IFieldSimpleItem created = InternalCreate();Di2015NewLine        CheckCreatedType(created);Di2015NewLine        return created;Di2015NewLine    }Di2015NewLineDi2015NewLine    protected virtual IFieldSimpleItem InternalCreate()Di2015NewLine    {Di2015NewLine        return new SimpleImpl();Di2015NewLine    }Di2015NewLine    protected virtual void CheckCreatedType(IFieldSimpleItem item)Di2015NewLine    { Di2015NewLine        // base class doesn't care. compiler guarantees IFieldSimpleItemDi2015NewLine    }Di2015NewLine}Di2015NewLinepublic class B : ADi2015NewLine{Di2015NewLine    protected override IFieldSimpleItem InternalCreate()Di2015NewLine    {Di2015NewLine        // does not call base class.Di2015NewLine        return new NormalImpl();Di2015NewLine    }Di2015NewLine    protected override void CheckCreatedType(IFieldSimpleItem item)Di2015NewLine    {Di2015NewLine        base.CheckCreatedType(item);Di2015NewLine        if (!(item is IFieldNormalItem))Di2015NewLine            throw new Exception("I need a normal item.");Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
286288Di2015UniqueSeparatorbase.CheckCreatedType(item)
286288Di2015UniqueSeparatorpublic class ADi2015NewLine{Di2015NewLine    public IFieldSimpleItem Create()Di2015NewLine    {Di2015NewLine        IFieldSimpleItem created = InternalCreate();Di2015NewLine        CheckCreatedType(created);Di2015NewLine        return created;Di2015NewLine    }Di2015NewLineDi2015NewLine    protected virtual IFieldSimpleItem InternalCreate()Di2015NewLine    {Di2015NewLine        return new SimpleImpl();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void CheckCreatedType(IFieldSimpleItem item)Di2015NewLine    {Di2015NewLine        Type inspect = this.GetType();Di2015NewLine        bool keepgoing = true;Di2015NewLine        while (keepgoing)Di2015NewLine        {Di2015NewLine            string name = inspect.FullName;Di2015NewLine            if (CheckDelegateMethods.ContainsKey(name))Di2015NewLine            {Di2015NewLine                var checkDelegate = CheckDelegateMethods[name];Di2015NewLine                if (!checkDelegate(item))Di2015NewLine                    throw new Exception("failed check");Di2015NewLine            }Di2015NewLine            if (inspect == typeof(A))Di2015NewLine            {Di2015NewLine                keepgoing = false;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                inspect = inspect.BaseType;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private static Dictionary<string,Func<IFieldSimpleItem,bool>> CheckDelegateMethods = new Dictionary<string,Func<IFieldSimpleItem,bool>>();Di2015NewLine    protected static void RegisterCheckOnType(string name, Func<IFieldSimpleItem,bool> checkMethod )Di2015NewLine    {Di2015NewLine        CheckDelegateMethods.Add(name, checkMethod);Di2015NewLine    }Di2015NewLine}Di2015NewLinepublic class B : ADi2015NewLine{Di2015NewLine    static B()Di2015NewLine    {Di2015NewLine        RegisterCheckOnType(typeof(B).FullName, o => o is IFieldNormalItem);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override IFieldSimpleItem InternalCreate()Di2015NewLine    {Di2015NewLine        // does not call base class.Di2015NewLine        return new NormalImpl();Di2015NewLine    }Di2015NewLine}Di2015NewLine
286288Di2015UniqueSeparatorSystem.Diagnostics.Conditional("DEBUG")]
286288Di2015UniqueSeparatorRegister..
286314Di2015UniqueSeparator&
286314Di2015UniqueSeparator&
286314Di2015UniqueSeparator&&
286314Di2015UniqueSeparator[Flags]Di2015NewLineenum SomeEnum { // formatted for space...Di2015NewLine    None = 0, Foo = 1, Bar = 2 // 4, 8, 16, 32, ...Di2015NewLine}Di2015NewLinestatic void Main() {Di2015NewLine    SomeEnum value = GetFlags();Di2015NewLine    bool hasFoo = (value & SomeEnum.Foo) != 0;Di2015NewLine}Di2015NewLinestatic SomeEnum GetFlags() { ... }Di2015NewLine
286445Di2015UniqueSeparatorpublic static T[,] ToRectangularArray<T>(this IEnumerable<T[]> source)Di2015NewLine{Di2015NewLine    if (!source.Any())Di2015NewLine    {Di2015NewLine        return new T[0,0];Di2015NewLine    }Di2015NewLineDi2015NewLine    int width = source.First().Length;Di2015NewLine    if (source.Any(array => array.Length != width))Di2015NewLine    {Di2015NewLine         throw new ArgumentException("All elements must have the same length");Di2015NewLine    }Di2015NewLineDi2015NewLine    T[,] ret = new T[source.Count(), width];Di2015NewLine    int row = 0;Di2015NewLine    foreach (T[] array in source)Di2015NewLine    {Di2015NewLine       for (int col=0; col < width; col++)Di2015NewLine       {Di2015NewLine           ret[row, col] = array[col];Di2015NewLine       }Di2015NewLine       row++;Di2015NewLine    }Di2015NewLine    return ret;Di2015NewLine}Di2015NewLine
286445Di2015UniqueSeparatorIEnumerable<IEnumerable<T>>
286445Di2015UniqueSeparatorpublic static T[,] ToRectangularArray<T,U>(this IEnumerable<U> source)Di2015NewLine    where U : IEnumerable<T>Di2015NewLine
286556Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.IO;Di2015NewLineDi2015NewLinenamespace testingDi2015NewLine{Di2015NewLine    public class ProgramDi2015NewLine    {Di2015NewLine        public static void Main(string[] args)Di2015NewLine        {Di2015NewLine            string file = @"C:\\Temp\\New Folder\\New Text Document.txt";Di2015NewLine            using(FileStream fs = new FileStream(file, FileMode.Open, FileAccess.Read))Di2015NewLine            {                    Di2015NewLine                using(StreamReader sr = new StreamReader(fs))Di2015NewLine                {Di2015NewLine                    while(!sr.EndOfStream)Di2015NewLine                    {Di2015NewLine                       Console.WriteLine(sr.ReadLine());Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
286645Di2015UniqueSeparatorFoo.Bar
286645Di2015UniqueSeparatorBar
286645Di2015UniqueSeparatorFoo
286645Di2015UniqueSeparatorextern alias FirstAlias;Di2015NewLineextern alias SecondAlias;Di2015NewLineDi2015NewLineusing FirstBar = FirstAlias::Foo.Bar;Di2015NewLineusing SecondBar = SecondAlias::Foo.Bar;Di2015NewLine
286645Di2015UniqueSeparatorFirstBar
286645Di2015UniqueSeparatorSecondBar
286652Di2015UniqueSeparatorstatic void RegisterMethod<TSelf, TProp> (Expression<Func<TSelf, TProp>> expression)Di2015NewLine{Di2015NewLine    var member_expression = expression.Body as MemberExpression;Di2015NewLine    if (member_expression == null)Di2015NewLine    \return;Di2015NewLineDi2015NewLine    var member = member_expression.Member;Di2015NewLine    if (member.MemberType != MemberTypes.Property)Di2015NewLine    \return;Di2015NewLineDi2015NewLine    var property = member as PropertyInfo;Di2015NewLine    var name = property.Name;Di2015NewLineDi2015NewLine    // ...Di2015NewLine}Di2015NewLine
286696Di2015UniqueSeparator<asp:Panel id="panel1" runat="server" DefaultButton="Button1">Di2015NewLine   <asp:TextBox id="textbox1" runat="server" />Di2015NewLine   <asp:Button id="Button1" runat="server" Text="Button 1" />Di2015NewLine</asp:Panel>Di2015NewLineDi2015NewLine<asp:Panel id="panel2" runat="server" DefaultButton="Button2">Di2015NewLine   <asp:TextBox id="textbox2" runat="server" />Di2015NewLine   <asp:Button id="Button2" runat="server" Text="Button 2" />Di2015NewLine</asp:Panel>Di2015NewLineDi2015NewLine<asp:Panel id="panel3" runat="server" DefaultButton="Button3">Di2015NewLine   <asp:TextBox id="textbox3" runat="server" />Di2015NewLine   <asp:Button id="Button3" runat="server" Text="Button 3" />Di2015NewLine</asp:Panel>Di2015NewLine
286701Di2015UniqueSeparatorpublic class ThingCollection : List<Thing> {}Di2015NewLine
286701Di2015UniqueSeparatorThingCollection tc = new ThingCollection();Di2015NewLinetc.Add(new ThingA());Di2015NewLinetc.Add(new ThingB());Di2015NewLinetc.Add(new ThingC());Di2015NewLine
286740Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing SourceSafeTypeLib;Di2015NewLineDi2015NewLinenamespace YourNamespaceDi2015NewLine{Di2015NewLineDi2015NewLinepublic class SourceSafeDatabase Di2015NewLine{Di2015NewLine    private readonly string dbPath;Di2015NewLine    private readonly string password;Di2015NewLine    private readonly string rootProject;Di2015NewLine    private readonly string username;Di2015NewLine    private readonly VSSDatabaseClass vssDatabase;Di2015NewLineDi2015NewLine    public SourceSafeDatabase(string dbPath, string username, string password, string rootProject)Di2015NewLine    {Di2015NewLine        this.dbPath = dbPath;Di2015NewLine        this.username = username;Di2015NewLine        this.password = password;Di2015NewLine        this.rootProject = rootProject;Di2015NewLineDi2015NewLine        vssDatabase = new VSSDatabaseClass();Di2015NewLine    }  Di2015NewLineDi2015NewLine    public List<string> GetAllLabels()Di2015NewLine    {Di2015NewLine        List<string> allLabels = new List<string>();Di2015NewLineDi2015NewLine        VSSItem item = vssDatabase.get_VSSItem(rootProject, false);Di2015NewLine        IVSSVersions versions = item.get_Versions(0);Di2015NewLineDi2015NewLine        foreach (IVSSVersion version in versions)Di2015NewLine        {Di2015NewLine            if (version.Label.Length > 0)Di2015NewLine            {Di2015NewLine                allLabels.Add(version.Label);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return allLabels;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void GetLabelledVersion(string label, string project, string directory)Di2015NewLine    {Di2015NewLine        string outDir = directory;Di2015NewLine        vssDatabase.get_VSSItem(rootProject, false).get_Version(label).Get(ref outDir, (int)VSSFlags.VSSFLAG_RECURSYES + (int)VSSFlags.VSSFLAG_USERRONO);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Open()Di2015NewLine    {Di2015NewLine        vssDatabase.Open(dbPath, username, password);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Close()Di2015NewLine    {Di2015NewLine        vssDatabase.Close();Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine// some other code that uses itDi2015NewLineDi2015NewLineSourceSafeDatabase sourceControlDatabase = new sourceControlDatabase(...);Di2015NewLinesourceControlDatabase.Open();Di2015NewLinesourceControlDatabase.GetLabelledVersion(label, rootProject, projectDirectory);Di2015NewLinesourceControlDatabase.Close();Di2015NewLine
286825Di2015UniqueSeparator<script>
286825Di2015UniqueSeparator<[^>]*>Di2015NewLine
286825Di2015UniqueSeparator<script>
286863Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing System.ServiceProcess;Di2015NewLineusing System.Text;Di2015NewLineusing System.Timers;Di2015NewLineDi2015NewLinenamespace SrvControlDi2015NewLine{Di2015NewLinepublic partial class Service1 : ServiceBaseDi2015NewLine{Di2015NewLine    Timer mytimer;Di2015NewLine    public Service1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnStart(string[] args)Di2015NewLine    {Di2015NewLine        if (mytimer == null)Di2015NewLine            mytimer = new Timer(5 * 1000.0);Di2015NewLine        mytimer.Elapsed += new ElapsedEventHandler(mytimer_Elapsed);Di2015NewLine        mytimer.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    void mytimer_Elapsed(object sender, ElapsedEventArgs e)Di2015NewLine    {Di2015NewLine        var srv = new ServiceController("MYSERVICE");Di2015NewLine        AppLog.Log(string.Format("MYSERVICE Status {0}", srv.Status));Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnStop()Di2015NewLine    {Di2015NewLine        mytimer.Stop();Di2015NewLine    }Di2015NewLine}Di2015NewLinepublic static class AppLogDi2015NewLine{Di2015NewLine    public static string z = "SrvControl";Di2015NewLine    static EventLog Logger = null;Di2015NewLine    public static void Log(string message)Di2015NewLine    {Di2015NewLine        if (Logger == null)Di2015NewLine        {Di2015NewLine            if (!(EventLog.SourceExists(z)))Di2015NewLine                EventLog.CreateEventSource(z, "Application");Di2015NewLineDi2015NewLine            Logger = new EventLog("Application");Di2015NewLine            Logger.Source = z;Di2015NewLine        }Di2015NewLine        Logger.WriteEntry(message, EventLogEntryType.Information);Di2015NewLine    }Di2015NewLine}Di2015NewLine
286999Di2015UniqueSeparator        Regex regex = new Regex( @"\\d+" );Di2015NewLine        MatchCollection matches = regex.Matches( "changed from 1 to 10" );Di2015NewLine        int num1 = int.Parse( matches[0].Value );Di2015NewLine        int num2 = int.Parse( matches[1].Value );Di2015NewLine
287010Di2015UniqueSeparatortest
287010Di2015UniqueSeparator    StringBuilder sb = new StringBuilder("{");Di2015NewLine    bool first = true;Di2015NewLine    foreach (Match match in Regex.Matches(html, @"test\\((""[^\\""]*\\"")\\)"))Di2015NewLine    {Di2015NewLine        if(first) {first = false;}Di2015NewLine        else {sb.Append(',');}Di2015NewLine        sb.Append(match.Groups[1].Value);Di2015NewLine    }Di2015NewLine    sb.Append('}');Di2015NewLine    Console.WriteLine(sb);Di2015NewLine
287010Di2015UniqueSeparator    foreach (Match match in Regex.Matches(html, @"test\\(""([^\\""]*)\\""\\)"))Di2015NewLine    {Di2015NewLine        Console.WriteLine(match.Groups[1].Value);Di2015NewLine    }Di2015NewLine
287129Di2015UniqueSeparator<Function Name="dbo.foo" Method="foo">Di2015NewLine    <Parameter Name="inc" Type="System.Int32" DbType="Int" />Di2015NewLine    <Parameter Name="dataset" Type="System.String" DbType="VarChar(20)" />Di2015NewLine    <Return Type="System.Int32" />Di2015NewLine</Function>Di2015NewLine
287129Di2015UniqueSeparator[Function(Name="dbo.foo")]Di2015NewLinepublic int foo([Parameter(DbType="Int")] System.Nullable<int> inc, [Parameter(DbType="VarChar(20)")] string dataset)Di2015NewLine{Di2015NewLine    IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), inc, dataset);Di2015NewLine    return ((int)(result.ReturnValue));Di2015NewLine}Di2015NewLine
287129Di2015UniqueSeparator<Function Name="dbo.foo" Method="FooPrivate" AccessModifier="Private">Di2015NewLine    <Parameter Name="inc" Type="System.Int32" DbType="Int" />Di2015NewLine    <Parameter Name="dataset" Type="System.String" DbType="VarChar(20)" />Di2015NewLine    <ElementType Name="fooResult" AccessModifier="Internal">Di2015NewLine      <Column Name="value" Type="System.Int32" DbType="Int NOT NULL" CanBeNull="false" />Di2015NewLine    </ElementType>Di2015NewLine</Function>Di2015NewLine
287129Di2015UniqueSeparator[Function(Name="dbo.foo")]Di2015NewLineprivate ISingleResult<fooResult> FooPrivate(Di2015NewLine    [Parameter(DbType="Int")] System.Nullable<int> inc,Di2015NewLine    [Parameter(DbType="VarChar(20)")] string dataset)Di2015NewLine{Di2015NewLine    IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), inc, dataset);Di2015NewLine    return ((ISingleResult<fooResult>)(result.ReturnValue));Di2015NewLine}Di2015NewLine
287129Di2015UniqueSeparatornamespace MyNamespace {Di2015NewLine    partial class MyDataContextDi2015NewLine    {Di2015NewLine        public int Foo(int? inc, string dataSet)Di2015NewLine        {Di2015NewLine            return FooPrivate(inc, dataSet).Single().value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
287190Di2015UniqueSeparator return person.Contacts.Any(person => person.Name=="aPersonName");Di2015NewLine
287190Di2015UniqueSeparator return person.Select(person => person.Name).Contains("aPersonName");Di2015NewLine
287217Di2015UniqueSeparatorvar urls = new Queue<string>();Di2015NewLineurls.Enqueue("http://www.google.com");Di2015NewLineDi2015NewLinewhile(urls.Count != 0)Di2015NewLine{Di2015NewLine    String url = url.Dequeue();Di2015NewLine    // Get all links from the urlDi2015NewLine    List<string> newUrls = GetLinks(url);Di2015NewLine    foreach (string newUrl in newUrls)Di2015NewLine    {Di2015NewLine        queue.Enqueue(newUrl);Di2015NewLine    }Di2015NewLine}Di2015NewLine
287217Di2015UniqueSeparatorAddRange
287217Di2015UniqueSeparatorQueue<T>
287222Di2015UniqueSeparator<Reference Include="Microsoft.SharePoint">Di2015NewLine  <HintPath Condition="'$(TargetFX1_1)'!='true'">pathto\\WSS3\\Microsoft.SharePoint.dll</HintPath>Di2015NewLine  <HintPath Condition="'$(TargetFX1_1)'=='true'">pathto\\WSS2\\Microsoft.SharePoint.dll</HintPath>Di2015NewLine</Reference>Di2015NewLine
287222Di2015UniqueSeparator#if FX1_1  Di2015NewLine    // WSSv2 specific code  Di2015NewLine#else  Di2015NewLine    // WSSv3 specific code  Di2015NewLine#endifDi2015NewLine
287222Di2015UniqueSeparator<Target Name="BeforeBuild">Di2015NewLine    <Message Text="--- Building for .NET 1.1 ---" Importance="high" Condition="'$(TargetFX1_1)'=='true'" />Di2015NewLine    <Message Text="--- Building for .NET 2.0 ---" Importance="high" Condition="'$(TargetFX1_1)'!='true'" />Di2015NewLine</Target>Di2015NewLine<Target Name="AfterBuild" Condition="'$(TargetFX1_1)'!='true'">Di2015NewLine    <MSBuild Projects="$(MSBuildProjectFile)" Properties="TargetFX1_1=true;" />Di2015NewLine</Target>Di2015NewLine
287368Di2015UniqueSeparator<%# SomeFunction( (long)DataBinder.Eval(Container.DataItem, "Id") ) %>Di2015NewLine
287368Di2015UniqueSeparator<%# SomeFunction(Container.DataItem) %>Di2015NewLine
287368Di2015UniqueSeparatorpublic string SomeFunction(object dataItem) {Di2015NewLine    var typedDataItem = (TYPED_DATA_ITEM_TYPE)dataItem;Di2015NewLineDi2015NewLine    // DO STUFF HERE WITH THE TYPED DATA ITEMDi2015NewLineDi2015NewLine    return "Hello";        Di2015NewLineDi2015NewLine}Di2015NewLine
287567Di2015UniqueSeparator public void Ping() {}Di2015NewLine
287694Di2015UniqueSeparatorDelegate[] events = Form1.SomeEvent.GetInvokationList();Di2015NewLineDi2015NewLineforeach (Delegate d in events)Di2015NewLine{Di2015NewLine     Form1.SomeEvent -= d;Di2015NewLine}Di2015NewLine
287740Di2015UniqueSeparatorprivate void ButtonClick(object sender, EventArgs e) {Di2015NewLine    if(sender != null) {Di2015NewLine        sender.Focus();Di2015NewLine    }Di2015NewLine}Di2015NewLine
287818Di2015UniqueSeparator<ItemsControl x:Name="items">Di2015NewLine  <ItemsControl.ItemTemplate>Di2015NewLine    <DataTemplate>Di2015NewLine       <local:TagControl TagData="{Binding}" />Di2015NewLine    </DataTemplate>Di2015NewLine  </ItemsControl.ItemTemplate>Di2015NewLine</ItemsControl>Di2015NewLine
287818Di2015UniqueSeparator<UserControl x:Class="SilverlightTesting.TagControl"Di2015NewLine    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Di2015NewLine    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Di2015NewLine    >Di2015NewLine    <TextBlock x:Name="text" TextWrapping="Wrap" FontSize="18" Margin="4,4,4,4">Di2015NewLine      <TextBlock.RenderTransform>Di2015NewLine          <ScaleTransform x:Name="scaleTx" />Di2015NewLine      </TextBlock.RenderTransform>Di2015NewLine    </TextBlock>Di2015NewLine</UserControl>Di2015NewLine
287818Di2015UniqueSeparatorpublic partial class TagControl : UserControlDi2015NewLine{Di2015NewLine    public TagControl()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    public Tag TagDataDi2015NewLine    {Di2015NewLine        get { return (Tag)GetValue(TagDataProperty); }Di2015NewLine        set { SetValue(TagDataProperty, value); }Di2015NewLine    }Di2015NewLineDi2015NewLine    // Using a DependencyProperty as the backing store for TagData.  This enables animation, styling, binding, etc...Di2015NewLine    public static readonly DependencyProperty TagDataProperty =Di2015NewLine        DependencyProperty.Register("TagData", typeof(Tag), typeof(TagControl), new PropertyMetadata(new PropertyChangedCallback(TagControl.OnTagDataPropertyChanged)));Di2015NewLineDi2015NewLine    public static void OnTagDataPropertyChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e)Di2015NewLine    {Di2015NewLine        var tc = obj as TagControl;Di2015NewLine        if (tc != null) tc.UpdateTagData();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void UpdateTagData()Di2015NewLine    {Di2015NewLine        text.Text = TagData.Title;Di2015NewLine        scaleTx.ScaleX = scaleTx.ScaleY = TagData.Weight;Di2015NewLine        this.InvalidateMeasure();Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
287877Di2015UniqueSeparatorCatch exception:Di2015NewLine   10,000 good:    63,668 ticksDi2015NewLine   10,000 bad:  6,435,609 ticksDi2015NewLineDi2015NewLineRegex Pre-Screen:Di2015NewLine   10,000 good:   637,633 ticksDi2015NewLine   10,000 bad:    717,894 ticksDi2015NewLineDi2015NewLineCOM Interop CLSIDFromStringDi2015NewLine   10,000 good:   126,120 ticksDi2015NewLine   10,000 bad:     23,134 ticksDi2015NewLine
287877Di2015UniqueSeparator/// <summary>Di2015NewLine/// Attempts to convert a string to a guid.Di2015NewLine/// </summary>Di2015NewLine/// <param name="s">The string to try to convert</param>Di2015NewLine/// <param name="value">Upon return will contain the Guid</param>Di2015NewLine/// <returns>Returns true if successful, otherwise false</returns>Di2015NewLinepublic static Boolean TryStrToGuid(String s, out Guid value)Di2015NewLine{Di2015NewLine   //ClsidFromString returns the empty guid for null strings   Di2015NewLine   if ((s == null) || (s == ""))   Di2015NewLine   {      Di2015NewLine      value = Guid.Empty;      Di2015NewLine      return false;   Di2015NewLine   }Di2015NewLineDi2015NewLine   int hresult = PInvoke.ObjBase.CLSIDFromString(s, out value);Di2015NewLine   if (hresult >= 0)Di2015NewLine   {Di2015NewLine      return true;Di2015NewLine   }Di2015NewLine   elseDi2015NewLine   {Di2015NewLine      value = Guid.Empty;Di2015NewLine      return false;Di2015NewLine   }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinenamespace PInvokeDi2015NewLine{Di2015NewLine    class ObjBaseDi2015NewLine    {Di2015NewLine    \/// <summary>Di2015NewLine    \/// This function converts a string generated by the StringFromCLSID function back into the original class identifier.Di2015NewLine    \/// </summary>Di2015NewLine    \/// <param name="sz">String that represents the class identifier</param>Di2015NewLine    \/// <param name="clsid">On return will contain the class identifier</param>Di2015NewLine    \/// <returns>Di2015NewLine    \/// Positive or zero if class identifier was obtained successfullyDi2015NewLine    \/// Negative if the call failedDi2015NewLine    \/// </returns>Di2015NewLine    \[DllImport("ole32.dll", CharSet = CharSet.Unicode, ExactSpelling = true, PreserveSig = true)]Di2015NewLine    \public static extern int CLSIDFromString(string sz, out Guid clsid);Di2015NewLine    }Di2015NewLine}Di2015NewLine
287877Di2015UniqueSeparatornew Guid(someString);Di2015NewLine
287946Di2015UniqueSeparatorpublic object this[int i]Di2015NewLine{Di2015NewLine    get { return InnerList[i]; }Di2015NewLine    set { InnerList[i] = value; }Di2015NewLine}Di2015NewLine
288311Di2015UniqueSeparatorpublic double Integrate(double a,double b, Func<double, double> f)Di2015NewLine{Di2015NewLine    double sum = 0.0;Di2015NewLineDi2015NewLine    for (int n = 0; n <= 100; ++n)Di2015NewLine    {Di2015NewLine        double x = a + n * (b - a) / 100.0;Di2015NewLine        sum += f(x) * (b - a) / 101.0;Di2015NewLine    }Di2015NewLine    return sum;Di2015NewLine}Di2015NewLine
288311Di2015UniqueSeparator    Func<double, double> fun = x => Math.Pow(x,2);        Di2015NewLine    double result = Integrate(0, 10, fun);Di2015NewLine
288419Di2015UniqueSeparatorControl.RenderControl(HtmlTextWriter)
288419Di2015UniqueSeparatorStringWriter
288419Di2015UniqueSeparatorHtmlTextWriter
288419Di2015UniqueSeparatorStringBuilder
288419Di2015UniqueSeparatorStringWriter
288419Di2015UniqueSeparatorStringBuilder
288529Di2015UniqueSeparatorprivate bool NthDayOfMonth(DateTime date, DayOfWeek dow, int n){Di2015NewLine  int d = date.Day;Di2015NewLine  return date.DayOfWeek == dow && (d-1)/7 == (n-1);Di2015NewLine}Di2015NewLine
288555Di2015UniqueSeparatorListView mylistv = new ListView();Di2015NewLinevar index = mylistv.SelectedIndices();Di2015NewLine
288675Di2015UniqueSeparator<configuration>Di2015NewLine  <system.web>Di2015NewLine    <httpRuntime maxRequestLength="xxx" />Di2015NewLine  </system.web>Di2015NewLine</configuration>Di2015NewLine
288928Di2015UniqueSeparatorhidebysig
288928Di2015UniqueSeparatornon-virtual : .method public hidebysig specialname instanceDi2015NewLinevirtual     : .method public hidebysig specialname newslot virtual instanceDi2015NewLine
288928Di2015UniqueSeparatoroverride    : .method public hidebysig specialname virtual instance Di2015NewLinenew         : .method public hidebysig specialname instanceDi2015NewLinenew virtual : .method public hidebysig specialname newslot virtual instanceDi2015NewLine
288928Di2015UniqueSeparatornew
288928Di2015UniqueSeparatornew
288928Di2015UniqueSeparatornew virtual
288928Di2015UniqueSeparatorvirtual
288928Di2015UniqueSeparatornewslot
288928Di2015UniqueSeparatorvar prop = typeof(ChildClass).GetProperty("TempProperty");Di2015NewLinevar getMethod = prop.GetGetMethod();Di2015NewLineif ((getMethod.Attributes & MethodAttributes.Virtual) != 0 &&Di2015NewLine    (getMethod.Attributes & MethodAttributes.NewSlot) == 0)Di2015NewLine{Di2015NewLine    // the property's 'get' method is an overrideDi2015NewLine}Di2015NewLine
288928Di2015UniqueSeparatorhidebysig
288928Di2015UniqueSeparatorelse Di2015NewLine{Di2015NewLine    if (getMethod.IsHideBySig)Di2015NewLine    {Di2015NewLine        var flags = getMethod.IsPublic ? BindingFlags.Public : BindingFlags.NonPublic;Di2015NewLine        flags |= getMethod.IsStatic ? BindingFlags.Static : BindingFlags.Instance;Di2015NewLine        var paramTypes = getMethod.GetParameters().Select(p => p.ParameterType).ToArray();Di2015NewLine        if (getMethod.DeclaringType.BaseType.GetMethod(getMethod.Name, flags, null, paramTypes, null) != null)Di2015NewLine        {Di2015NewLine            // the property's 'get' method shadows by signatureDi2015NewLine        }Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        var flags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance;Di2015NewLine        if (getMethod.DeclaringType.BaseType.GetMethods(flags).Any(m => m.Name == getMethod.Name))Di2015NewLine        {Di2015NewLine            // the property's 'get' method shadows by nameDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
288928Di2015UniqueSeparatorFoo
288928Di2015UniqueSeparatorfoo
288928Di2015UniqueSeparatorhidebysig
288987Di2015UniqueSeparatorvar result = from r Di2015NewLine    in fips.AsEnumerable() Di2015NewLine    select newDi2015NewLine    {Di2015NewLine        FacProcess = r.Field<string>("FACILITY_PROCESS_SUB_GROUP_CODE"),Di2015NewLine        GroupName = r.Field<string>("PROCESS_SUB_GROUP_NAME"),Di2015NewLine        Item3 = r.Field<string>("Item3")Di2015NewLine    };Di2015NewLine
288987Di2015UniqueSeparatorvar result = from r Di2015NewLine    in fips.AsEnumerable() Di2015NewLine    select new MyType("InitClassParams") Di2015NewLine    {Di2015NewLine        FacProcess = r.Field<string>("FACILITY_PROCESS_SUB_GROUP_CODE"),Di2015NewLine        GroupName = r.Field<string>("PROCESS_SUB_GROUP_NAME"),Di2015NewLine        Item3 = r.Field<string>("Item3")Di2015NewLine    };Di2015NewLine
288987Di2015UniqueSeparatorvar result = from r Di2015NewLine    in fips.AsEnumerable() Di2015NewLine    select newDi2015NewLine    {Di2015NewLine        FacProcess = r.Field<string>("FACILITY_PROCESS_SUB_GROUP_CODE"),Di2015NewLine        GroupName = r.Field<string>("PROCESS_SUB_GROUP_NAME"),Di2015NewLine        Item3 = r.Field<string>("Item3")Di2015NewLine    }Di2015NewLine    distinct;Di2015NewLine
288987Di2015UniqueSeparatorvar list = result.ToList()Di2015NewLineforeach(var item in result) {}Di2015NewLine
289040Di2015UniqueSeparatorpublic void SortList() {Di2015NewLine   MyList.Sort(delegate(MyClass a, MyClass b)Di2015NewLine   {Di2015NewLine      int xdiff = a.x.CompareTo(b.x);Di2015NewLine      if (xdiff != 0) return xdiff;Di2015NewLine      else return a.y.CompareTo(b.y);Di2015NewLine   });Di2015NewLine}Di2015NewLine
289115Di2015UniqueSeparator[DllImport EntryPoint="func" CharSet=CharSet.Auto, SetLastError=true]Di2015NewLinepublic extern static void Func(byte[]);Di2015NewLineDi2015NewLinebyte[] ar = new byte[1000];Di2015NewLineFunc(ar);Di2015NewLine
289115Di2015UniqueSeparator[DllImport EntryPoint="func" CharSet=CharSet.Auto, SetLastError=true]Di2015NewLinepublic extern static void Func(IntPtr p);Di2015NewLineDi2015NewLinebyte[] ar = new byte[1000];Di2015NewLineIntPtr p = Marshal.AllocHGlobal(Marshal.SizeOf(ar));Di2015NewLineMarshal.Copy(ar, 0, p, ar.Length);Di2015NewLineFunc(p);Di2015NewLineMarshal.FreeHGlobal(p);Di2015NewLine
289263Di2015UniqueSeparatormyObject.SomeEvent +=Di2015NewLine
289358Di2015UniqueSeparatorstatic
289358Di2015UniqueSeparatorpublic static event EventHandler SomeEvent;Di2015NewLine
289358Di2015UniqueSeparatorpublic static event EventHandler SomeEvent = delegate {};Di2015NewLine
289358Di2015UniqueSeparatorSomeEvent(null, EventArgs.Empty);Di2015NewLine
289363Di2015UniqueSeparatorvar result = list1.SelectMany(l1 => list2, (l1, l2) => new { i = l1, s = l2} );Di2015NewLine
289451Di2015UniqueSeparatorRegexOptions.Singleline
289451Di2015UniqueSeparatorRegexOptions.Multiline
289571Di2015UniqueSeparatorCurrencyManager
289571Di2015UniqueSeparatorBindingContext
289571Di2015UniqueSeparatorDataSource
289571Di2015UniqueSeparatorCurrencyManager
289571Di2015UniqueSeparatorCurrencyManager
289571Di2015UniqueSeparator.ToList()
289571Di2015UniqueSeparatorList<T>
289571Di2015UniqueSeparatorBindingContext
289571Di2015UniqueSeparatorcontrol.BindingContext = new BindingContext();Di2015NewLine
289607Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8" ?>Di2015NewLine<customBinding>Di2015NewLine            <binding name="AreaWebServiceSoap12" closeTimeout="00:01:00" openTimeout="00:10:00"Di2015NewLine                    receiveTimeout="00:20:00" sendTimeout="00:05:00">Di2015NewLine                <textMessageEncoding maxReadPoolSize="64" maxWritePoolSize="16"Di2015NewLine                  messageVersion="Soap12" writeEncoding="utf-8">Di2015NewLine                <readerQuotas maxDepth="32" maxStringContentLength="8192" maxArrayLength="16384"Di2015NewLine                    maxBytesPerRead="4096" maxNameTableCharCount="16384" />Di2015NewLine              </textMessageEncoding>              Di2015NewLine              <httpTransport manualAddressing="false" maxBufferPoolSize="524288"  Di2015NewLine                  maxReceivedMessageSize="65536" allowCookies="false" authenticationScheme="Ntlm"Di2015NewLine                  bypassProxyOnLocal="false" hostNameComparisonMode="StrongWildcard"Di2015NewLine                  keepAliveEnabled="true" maxBufferSize="65536" proxyAuthenticationScheme="Anonymous"Di2015NewLine                  realm="" transferMode="Buffered" unsafeConnectionNtlmAuthentication="false"Di2015NewLine                  useDefaultWebProxy="true" />              Di2015NewLine            </binding>Di2015NewLine          </customBinding>Di2015NewLine
289755Di2015UniqueSeparatorpublic double getTax()Di2015NewLine{Di2015NewLine    if (Salary < 10000)Di2015NewLine        tax = 0;Di2015NewLine    if (Salary <= 10000 && Salary >= 20000)Di2015NewLine        tax += Salary * 0.05;Di2015NewLine    else tax += Salary * 0.1;Di2015NewLine    return tax;Di2015NewLine}Di2015NewLine
289755Di2015UniqueSeparatortax
289755Di2015UniqueSeparatorSalary >= 10000
289755Di2015UniqueSeparatorfamilyBouns
289755Di2015UniqueSeparatorgetFamilyBonus
289755Di2015UniqueSeparator<= 10000
289755Di2015UniqueSeparator>= 20000
289755Di2015UniqueSeparator    Console.WriteLine("Tax= {0}", getTax());Di2015NewLine    Console.WriteLine("Tax= {0}", getTax());Di2015NewLine    Console.WriteLine("Tax= {0}", getTax());Di2015NewLine
289781Di2015UniqueSeparatorpair
289781Di2015UniqueSeparatorvar i = 0
289815Di2015UniqueSeparator(char)myint;Di2015NewLine
289815Di2015UniqueSeparatorConsole.WriteLine("(char)122 is {0}", (char)122);Di2015NewLine
289822Di2015UniqueSeparatorArrayList
289822Di2015UniqueSeparatorList<T>
289822Di2015UniqueSeparatorList<Room> rooms = ...Di2015NewLinestring roomType = "lounge";Di2015NewLinebool exists = rooms.Exists(delegate(Room room) { return room.Type == roomType; });Di2015NewLine
289822Di2015UniqueSeparatorbool exists = rooms.Exists(room => room.Type == roomType);Di2015NewLine
289822Di2015UniqueSeparatorbool exists = rooms.Any(room => room.Type == roomType);Di2015NewLine
289822Di2015UniqueSeparatorAny
289822Di2015UniqueSeparatorList<T>
289877Di2015UniqueSeparatorAppDomain
289877Di2015UniqueSeparatorAppDomain
289877Di2015UniqueSeparatorAppDomain.AssemblyResolve
289891Di2015UniqueSeparatorprivate
290017Di2015UniqueSeparatorAction<int> valueSetter = (Action<int>)Delegate.CreateDelegate(typeof(Action<int>), tc, tc.GetType().GetProperty("Value").GetSetMethod());Di2015NewLine
290017Di2015UniqueSeparatorAction<int> valueSetter = v => tc.Value = v;Di2015NewLine
290063Di2015UniqueSeparatorFunc<Person, string> nameProjection = p => p.Name;Di2015NewLine
290063Di2015UniqueSeparatorFunc<Person, string> nameProjection = delegate (Person p) { return p.Name; };Di2015NewLine
290063Di2015UniqueSeparatorPerson
290131Di2015UniqueSeparatorControls.Add
290131Di2015UniqueSeparatorlnkCalcOverhead.CssClass = "MyClass";Di2015NewLine
290131Di2015UniqueSeparatorlnkCalcOverhead.Style.Add("float", "left");Di2015NewLine
290269Di2015UniqueSeparatorCodeDomProvider codeProvider = new CSharpCodeProvider();Di2015NewLineICodeCompiler compiler = codeProvider.CreateCompiler();Di2015NewLineDi2015NewLine// add compiler parametersDi2015NewLineCompilerParameters compilerParams = new CompilerParameters();Di2015NewLinecompilerParams.CompilerOptions = "/target:library /optimize";Di2015NewLinecompilerParams.GenerateExecutable = false;Di2015NewLinecompilerParams.GenerateInMemory = true; \\Di2015NewLinecompilerParams.IncludeDebugInformation = false;Di2015NewLinecompilerParams.ReferencedAssemblies.Add("mscorlib.dll");Di2015NewLinecompilerParams.ReferencedAssemblies.Add("System.dll");Di2015NewLineDi2015NewLine// compile the codeDi2015NewLineCompilerResults results = compiler.CompileAssemblyFromSource(compilerParams, sourceCode);Di2015NewLine
290333Di2015UniqueSeparator[XmlIgnore]
290333Di2015UniqueSeparatorIXmlSerializable
290333Di2015UniqueSeparatorXmlSerializer
290333Di2015UniqueSeparator[Serializable]Di2015NewLinepublic class SpeedDialDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        XmlSerializer ser = new XmlSerializer(typeof(SpeedDial));Di2015NewLine        SpeedDial foo = new SpeedDial { Value = "110", TextTR = "Yangin",Di2015NewLine            TextEN = "Fire", IconId = "39" };Di2015NewLine        ser.Serialize(Console.Out, foo);Di2015NewLine    }Di2015NewLine    public SpeedDial()Di2015NewLine    {Di2015NewLine        Text = new SpeedDialText();Di2015NewLine    }Di2015NewLineDi2015NewLine    [XmlElement("text"), EditorBrowsable(EditorBrowsableState.Never)]Di2015NewLine    public SpeedDialText Text { get; set; }Di2015NewLineDi2015NewLine    public string Value { get; set; }Di2015NewLine    [XmlIgnore]Di2015NewLine    public string TextTRDi2015NewLine    {Di2015NewLine        get { return Text.Tr; }Di2015NewLine        set { Text.Tr = value; }Di2015NewLine    }Di2015NewLine    [XmlIgnore]Di2015NewLine    public string TextENDi2015NewLine    {Di2015NewLine        get { return Text.En; }Di2015NewLine        set { Text.En = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public string IconId { get; set; }Di2015NewLine}Di2015NewLine[Serializable]Di2015NewLinepublic class SpeedDialTextDi2015NewLine{Di2015NewLine    [XmlElement("EN")]Di2015NewLine    public string En { get; set; }Di2015NewLine    [XmlElement("TR")]Di2015NewLine    public string Tr { get; set; }Di2015NewLine}Di2015NewLine
290517Di2015UniqueSeparator.linkButtonDi2015NewLine{Di2015NewLine   background-color: transparent;Di2015NewLine   border-style: none;Di2015NewLine   color: /* Something nice */Di2015NewLine   cursor: pointer;Di2015NewLine   text-align: left;Di2015NewLine   text-decoration: underline;Di2015NewLine   display: table-cell;Di2015NewLine}Di2015NewLine
290811Di2015UniqueSeparator<%@ Page Language="C#" AutoEventWireup="true"Di2015NewLineCodebehind="Default.aspx.cs" Inherits="Sample._Default"Di2015NewLineEnableViewState="false" %>Di2015NewLine
290811Di2015UniqueSeparator    #region Disable ViewStateDi2015NewLine    protected override void SavePageStateToPersistenceMedium(object state)Di2015NewLine    {Di2015NewLine    }Di2015NewLine    protected override object LoadPageStateFromPersistenceMedium()Di2015NewLine    {Di2015NewLine        return null;Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLine
290907Di2015UniqueSeparator    private void t_Elapsed(object sender, ElapsedEventArgs e)Di2015NewLine    {Di2015NewLine        // Check service statusesDi2015NewLine    }Di2015NewLine
290907Di2015UniqueSeparator    private delegate void TextUpdateHandler(string updatedText);Di2015NewLineDi2015NewLine    private void UpdateServerStatuses(string statuses)Di2015NewLine    {Di2015NewLine        if (this.InvokeRequired)Di2015NewLine        {Di2015NewLine            TextUpdateHandler update = new TextUpdateHandler(this.UpdateServerStatuses);Di2015NewLine            this.BeginInvoke(update, statuses);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            // load textbox hereDi2015NewLine        }Di2015NewLine    }Di2015NewLine
291133Di2015UniqueSeparatorThread.CurrentThread.CurrentUICulture = new CultureInfo("es-ES");Di2015NewLine
291174Di2015UniqueSeparatorSystem.Diagnostics.EventLog eventLog1 = new System.Diagnostics.EventLog();Di2015NewLinestring eventLogName = "StackOverFlowEventName";Di2015NewLinestring eventLogSource = "StackOverFlowWebsite";Di2015NewLineDi2015NewLine//This code HERE will create the Event for youDi2015NewLineif (!System.Diagnostics.EventLog.SourceExists(eventLogSource))Di2015NewLine{Di2015NewLine\System.Diagnostics.EventLog.CreateEventSource(eventLogSource, eventLogName);Di2015NewLine}Di2015NewLineDi2015NewLineeventLog1.Source = eventLogSource;Di2015NewLineeventLog1.Log = eventLogName;Di2015NewLineeventLog1.WriteEntry("This is a test");Di2015NewLine
291357Di2015UniqueSeparatorif (null == arg)
291357Di2015UniqueSeparatorif (arg == null)
291380Di2015UniqueSeparatorif (propertyInfo.GetIndexParameters().Length > 0)Di2015NewLine{Di2015NewLine    // Property is an indexerDi2015NewLine}Di2015NewLine
291550Di2015UniqueSeparator//Add to main menuDi2015NewLineMenuItem newMenuItem1 = new MenuItem();Di2015NewLinenewMenuItem1.Header = "Test 123";Di2015NewLinethis.MainMenu.Items.Add(newMenuItem1);Di2015NewLineDi2015NewLine//Add to a sub itemDi2015NewLineMenuItem newMenuItem2 = new MenuItem();Di2015NewLineMenuItem newExistMenuItem = (MenuItem)this.MainMenu.Items[0];Di2015NewLinenewMenuItem2.Header = "Test 456";Di2015NewLinenewExistMenuItem.Items.Add(newMenuItem2);Di2015NewLine
291820Di2015UniqueSeparatorRegex r = new Regex("([A-Z]+[a-z]+)");Di2015NewLinestring result = r.Replace("CountOfWidgets", m => (m.Value.Length > 3 ? m.Value : m.Value.ToLower()) + " ");Di2015NewLine
292294Di2015UniqueSeparatorhtw.RenderBeginTag( HtmlTextWriterTag.Span );Di2015NewLinetryDi2015NewLine{Di2015NewLine   htw.Write(myObject.GenerateHtml());Di2015NewLine}Di2015NewLinecatch (Exception e)Di2015NewLine{Di2015NewLine   GenerateHtmlErrorMessage(htw);Di2015NewLine}Di2015NewLinefinallyDi2015NewLine{Di2015NewLine   htw.RenderEndTag( );Di2015NewLine}Di2015NewLine
292317Di2015UniqueSeparatorvar numbers = new[] { 0, 1, 2, 2, 2, 3, 4, 4, 5 };Di2015NewLineDi2015NewLinevar uniqueNumbers =Di2015NewLine    from n in numbersDi2015NewLine    group n by n into nGroupDi2015NewLine    where nGroup.Count() == 1Di2015NewLine    select nGroup.Key;Di2015NewLineDi2015NewLine// { 0, 1, 3, 5 }Di2015NewLine
292329Di2015UniqueSeparatorprivate static void DemandManagerPermission()Di2015NewLine{Di2015NewLine    // Verify the use has authority to proceedDi2015NewLine    string permissionGroup = ConfigurationManager.AppSettings["ManagerPermissionGroup"];Di2015NewLine    if (string.IsNullOrEmpty(permissionGroup))Di2015NewLine    \throw new FaultException("Group permissions not set for access control.");Di2015NewLineDi2015NewLine    AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal);Di2015NewLine    var p = new PrincipalPermission(ServiceSecurityContext.Current.WindowsIdentity.Name, permissionGroup, true);Di2015NewLine    p.Demand();Di2015NewLineDi2015NewLine}Di2015NewLine
292582Di2015UniqueSeparatorstatic extern
292582Di2015UniqueSeparatorDllImport
292758Di2015UniqueSeparator  Private Delegate Sub SomethingHappenedDelegate(ByVal result As Integer)Di2015NewLineDi2015NewLine  Private Sub Work()Di2015NewLine    For i As Integer = 0 To 10Di2015NewLine      Me.Invoke(New SomethingHappenedDelegate(AddressOf SomethingHappenedThreadSafe), i)Di2015NewLine      Threading.Thread.Sleep(500)Di2015NewLine    NextDi2015NewLine  End SubDi2015NewLineDi2015NewLine  Private Sub SomethingHappenedThreadSafe(ByVal result As Integer)Di2015NewLine    RaiseEvent SomthingHappend(result)Di2015NewLine  End SubDi2015NewLine
292758Di2015UniqueSeparator  Private mHost As FormDi2015NewLineDi2015NewLine  Public Sub New(ByVal host As Form)Di2015NewLine    mHost = hostDi2015NewLine  End SubDi2015NewLine
292758Di2015UniqueSeparator  Dim main As Form = Application.OpenForms(0)Di2015NewLine  main.Invoke(New SomethingHappenedDelegate(AddressOf SomethingHappenedThreadSafe), i)Di2015NewLine
292840Di2015UniqueSeparatorDelegate.Combine
292840Di2015UniqueSeparatorDelegate.Remove
292840Di2015UniqueSeparatorFire = (MyDelegate) Delegate.Remove(Fire, new MyDelegate(Program.OnFire));Di2015NewLine
292840Di2015UniqueSeparatorDelegate.Remove
292840Di2015UniqueSeparatorMyDelegate
292840Di2015UniqueSeparatorProgram.OnFire
292840Di2015UniqueSeparatorMyDelegate
292840Di2015UniqueSeparatornew MyDelegate
292840Di2015UniqueSeparatorFire += OnFire;Di2015NewLineFire -= OnFire;Di2015NewLine
292840Di2015UniqueSeparatorDelegate.Remove
292840Di2015UniqueSeparatorMyDelegate handler = Fire;Di2015NewLineif (handler != null)Di2015NewLine    handler("Hello 3");Di2015NewLine
292840Di2015UniqueSeparatorpublic static event MyDelegate Fire = delegate { };Di2015NewLine
292875Di2015UniqueSeparatormapping[peep.FirstName] = "Name";Di2015NewLine
292875Di2015UniqueSeparatormapping["FirstName"] = "Name";Di2015NewLine
292875Di2015UniqueSeparatorvar mapping = new Dictionary<Expression<Action<T>>,string>();Di2015NewLinemapping[ p => p.FirstName ] = "Name";Di2015NewLine
292875Di2015UniqueSeparatorprivate Dictionary<string,string> Convert(Dictionary<Expression<Action<T>>,string> mapping)Di2015NewLine{Di2015NewLine    var result = new Dictionary<string,string>();Di2015NewLine    foreach(var item in mapping)Di2015NewLine    {Di2015NewLine        LambdaExpression ex = item.Key as LambdaExpression;Di2015NewLine        string propertyName = ((MemberExpression)ex.Body).Member.Name;Di2015NewLine        string propertyValue = item.Value;Di2015NewLine        result.Add(propertyName,proeprtyValue);Di2015NewLine    }Di2015NewLine    return result;Di2015NewLine}Di2015NewLine
292973Di2015UniqueSeparatorpublic virtual KitItem ShallowCopy()        Di2015NewLine{            Di2015NewLine  return (KitItem) this.MemberwiseClone();        Di2015NewLine}Di2015NewLine
292973Di2015UniqueSeparatorpublic override KitItem ShallowCopy()        Di2015NewLine{            Di2015NewLine    return (PackageKitItem) this.MemberwiseClone();        Di2015NewLine}Di2015NewLine
292994Di2015UniqueSeparatorALTER PROCEDURE [dbo].[GetNextSms]Di2015NewLine(   Di2015NewLine    @SmsId UNIQUEIDENTIFIER OUTPUT, Di2015NewLine    @SmsContent NVARCHAR(1024) OUTPUT, Di2015NewLine    @ToNumber VARCHAR(50) OUTPUT,Di2015NewLine    @TimeAccepted DATETIME OUTPUTDi2015NewLine)Di2015NewLine
293031Di2015UniqueSeparatorusing System;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLinenamespace WindowsFormsApplication1 {Di2015NewLine  public partial class Form1 : Form {Di2015NewLine    public Form1() {Di2015NewLine      InitializeComponent();Di2015NewLine      button1.Click += new EventHandler(button1_Click);Di2015NewLine      // Get secret click event keyDi2015NewLine      FieldInfo eventClick = typeof(Control).GetField("EventClick", BindingFlags.NonPublic | BindingFlags.Static);Di2015NewLine      object secret = eventClick.GetValue(null);Di2015NewLine      // Retrieve the click eventDi2015NewLine      PropertyInfo eventsProp = typeof(Component).GetProperty("Events", BindingFlags.NonPublic | BindingFlags.Instance);Di2015NewLine      EventHandlerList events = (EventHandlerList)eventsProp.GetValue(button1, null);Di2015NewLine      Delegate click = events[secret];Di2015NewLine      // Remove it from button1, add it to button2Di2015NewLine      events.RemoveHandler(secret, click);Di2015NewLine      events = (EventHandlerList)eventsProp.GetValue(button2, null);Di2015NewLine      events.AddHandler(secret, click);Di2015NewLine    }Di2015NewLineDi2015NewLine    void button1_Click(object sender, EventArgs e) {Di2015NewLine      MessageBox.Show("Yada");Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
293594Di2015UniqueSeparatorMyEnum enumVar = (MyEnum)intVar;Di2015NewLine
293763Di2015UniqueSeparator<meta http-equiv="Content-Type" content="text/html; charset=US-ASCII">Di2015NewLine
293763Di2015UniqueSeparator<?xml version="1.0" encoding="ISO-8859-1"?>Di2015NewLine
293763Di2015UniqueSeparatorContent-Type: text/html; charset=ISO-8859-1Di2015NewLine
293848Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine  SvnHookArguments ha;Di2015NewLine  if (!SvnHookArguments.ParseHookArguments(args, SvnHookType.PostCommit, false, out ha))Di2015NewLine  {Di2015NewLine    Console.Error.WriteLine("Invalid arguments");Di2015NewLine    Environment.Exit(1);Di2015NewLine  }Di2015NewLineDi2015NewLine  using (SvnLookClient cl = new SvnLookClient())Di2015NewLine  {Di2015NewLine    SvnChangeInfoEventArgs ci;Di2015NewLine    cl.GetChangeInfo(ha.LookOrigin, out ci);Di2015NewLineDi2015NewLine    // ci contains information on the commit e.g.Di2015NewLine    Console.WriteLine(ci.LogMessage); // Has log messageDi2015NewLineDi2015NewLine    foreach(SvnChangeItem i in ci.ChangedPaths)Di2015NewLine    {Di2015NewLine       //Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
293908Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLinepublic class TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        var dict = new Dictionary<string, int>();Di2015NewLineDi2015NewLine        Type type = dict.GetType();Di2015NewLine        Console.WriteLine("Type arguments:");Di2015NewLine        foreach (Type arg in type.GetGenericArguments())Di2015NewLine        {Di2015NewLine            Console.WriteLine("  {0}", arg);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
293908Di2015UniqueSeparatorType arguments:Di2015NewLine  System.StringDi2015NewLine  System.Int32Di2015NewLine
294083Di2015UniqueSeparatoryield return
294083Di2015UniqueSeparatorIEnumerable.MoveNext
294083Di2015UniqueSeparatorIEnumerable
294083Di2015UniqueSeparatorText
294083Di2015UniqueSeparatoryield return
294083Di2015UniqueSeparatorIEnumerable.MoveNext 
294083Di2015UniqueSeparatoryield return
294083Di2015UniqueSeparatorList
294083Di2015UniqueSeparatorIEnumerable
294083Di2015UniqueSeparatoryield return
294083Di2015UniqueSeparatorIEnumerable
294145Di2015UniqueSeparatorvar result = dictionaries.SelectMany(dict => dict)Di2015NewLine                         .ToDictionary(pair => pair.Key, pair => pair.Value);Di2015NewLine
294145Di2015UniqueSeparatorvar result = dictionaries.SelectMany(dict => dict)Di2015NewLine                         .ToLookup(pair => pair.Key, pair => pair.Value)Di2015NewLine                         .ToDictionary(group => group.Key, group => group.First());Di2015NewLine
294233Di2015UniqueSeparatorprotected virtual void OnLeftThumbStickMove(ThumbStickEventArgs e)Di2015NewLine{Di2015NewLine  if (LeftThumbStickMove == null) return;Di2015NewLineDi2015NewLine  if (_syncObj == null || !_syncObj.InvokeRequired)Di2015NewLine    LeftThumbStickMove(this, e);Di2015NewLine  elseDi2015NewLine    _syncObj.BeginInvoke(LeftThumbStickMove, new object[] { this, e });Di2015NewLine}Di2015NewLine
294233Di2015UniqueSeparatorpublic XBox360GamePad(UserIndex controllerIndex, Func<int, Action, object> timerSetupAction)Di2015NewLine{Di2015NewLine  CurrentController = new Controller(controllerIndex);Di2015NewLine  _timerState = timerSetupAction(10, UpdateState);Di2015NewLine}Di2015NewLine
294233Di2015UniqueSeparatorpublic XBox360GamePad(UserIndex controllerIndex) : Di2015NewLine  this(controllerIndex, (i,f) => new Timer(delegate { f(); }, null, i, i)) {}Di2015NewLine
294233Di2015UniqueSeparator  _gamePad = new XBox360GamePad(UserIndex.One, (i, f) => {Di2015NewLine    var t = new DispatcherTimer(DispatcherPriority.Render) {Interval = new TimeSpan(0, 0, 0, 0, i) };Di2015NewLine    t.Tick += delegate { f(); };Di2015NewLine    t.Start();Di2015NewLine    return t;Di2015NewLine  });Di2015NewLine
294448Di2015UniqueSeparatorpublic static class MyWebAppExtensionsDi2015NewLine{Di2015NewLine    public static string FormatCurrency(this decimal d)Di2015NewLine    {Di2015NewLine        return d.ToString("c");Di2015NewLine    }Di2015NewLine}Di2015NewLine
294448Di2015UniqueSeparatorDecimal d = 100.25;Di2015NewLinestring s = d.FormatCurrency();Di2015NewLine
294525Di2015UniqueSeparatorconst int MAXPNAMELEN            = 32;Di2015NewLineconst int MIXER_SHORT_NAME_CHARS = 16;Di2015NewLineconst int MIXER_LONG_NAME_CHARS  = 64;Di2015NewLineDi2015NewLine[Flags] enum MIXERLINE_LINEF : uint{Di2015NewLine    ACTIVE       = 0x00000001,Di2015NewLine    DISCONNECTED = 0x00008000,Di2015NewLine    SOURCE       = 0x80000000Di2015NewLine}Di2015NewLine[Flags] enum MIXER           : uint{Di2015NewLine    GETLINEINFOF_DESTINATION     = 0x00000000,Di2015NewLine    GETLINEINFOF_SOURCE          = 0x00000001,Di2015NewLine    GETLINEINFOF_LINEID          = 0x00000002,Di2015NewLine    GETLINEINFOF_COMPONENTTYPE   = 0x00000003,Di2015NewLine    GETLINEINFOF_TARGETTYPE      = 0x00000004,Di2015NewLine    GETLINEINFOF_QUERYMASK       = 0x0000000F,Di2015NewLineDi2015NewLine    GETLINECONTROLSF_ALL         = 0x00000000,Di2015NewLine    GETLINECONTROLSF_ONEBYID     = 0x00000001,Di2015NewLine    GETLINECONTROLSF_ONEBYTYPE   = 0x00000002,Di2015NewLine    GETLINECONTROLSF_QUERYMASK   = 0x0000000F,Di2015NewLineDi2015NewLine    GETCONTROLDETAILSF_VALUE     = 0x00000000,Di2015NewLine    GETCONTROLDETAILSF_LISTTEXT  = 0x00000001,Di2015NewLine    GETCONTROLDETAILSF_QUERYMASK = 0x0000000F,Di2015NewLineDi2015NewLine    OBJECTF_MIXER                = 0x00000000,Di2015NewLine    OBJECTF_WAVEOUT              = 0x10000000,Di2015NewLine    OBJECTF_WAVEIN               = 0x20000000,Di2015NewLine    OBJECTF_MIDIOUT              = 0x30000000,Di2015NewLine    OBJECTF_MIDIIN               = 0x40000000,Di2015NewLine    OBJECTF_AUX                  = 0x50000000,Di2015NewLine    OBJECTF_HANDLE               = 0x80000000,Di2015NewLine    OBJECTF_HMIXER               = OBJECTF_HANDLE | OBJECTF_MIXER,Di2015NewLine    OBJECTF_HWAVEOUT             = OBJECTF_HANDLE | OBJECTF_WAVEOUT,Di2015NewLine    OBJECTF_HWAVEIN              = OBJECTF_HANDLE | OBJECTF_WAVEIN,Di2015NewLine    OBJECTF_HMIDIOUT             = OBJECTF_HANDLE | OBJECTF_MIDIOUT,Di2015NewLine    OBJECTF_HMIDIIN              = OBJECTF_HANDLE | OBJECTF_MIDIINDi2015NewLine}Di2015NewLine[Flags] enum MIXERCONTROL_CT : uint{Di2015NewLine    CLASS_MASK        = 0xF0000000,Di2015NewLine    CLASS_CUSTOM      = 0x00000000,Di2015NewLine    CLASS_METER       = 0x10000000,Di2015NewLine    CLASS_SWITCH      = 0x20000000,Di2015NewLine    CLASS_NUMBER      = 0x30000000,Di2015NewLine    CLASS_SLIDER      = 0x40000000,Di2015NewLine    CLASS_FADER       = 0x50000000,Di2015NewLine    CLASS_TIME        = 0x60000000,Di2015NewLine    CLASS_LIST        = 0x70000000,Di2015NewLineDi2015NewLine    SUBCLASS_MASK     = 0x0F000000,Di2015NewLineDi2015NewLine    SC_SWITCH_BOOLEAN = 0x00000000,Di2015NewLine    SC_SWITCH_BUTTON  = 0x01000000,Di2015NewLineDi2015NewLine    SC_METER_POLLED   = 0x00000000,Di2015NewLineDi2015NewLine    SC_TIME_MICROSECS = 0x00000000,Di2015NewLine    SC_TIME_MILLISECS = 0x01000000,Di2015NewLineDi2015NewLine    SC_LIST_SINGLE    = 0x00000000,Di2015NewLine    SC_LIST_MULTIPLE  = 0x01000000,Di2015NewLineDi2015NewLine    UNITS_MASK        = 0x00FF0000,Di2015NewLine    UNITS_CUSTOM      = 0x00000000,Di2015NewLine    UNITS_BOOLEAN     = 0x00010000,Di2015NewLine    UNITS_SIGNED      = 0x00020000,Di2015NewLine    UNITS_UNSIGNED    = 0x00030000,Di2015NewLine    UNITS_DECIBELS    = 0x00040000, /* in 10ths */Di2015NewLine    UNITS_PERCENT     = 0x00050000, /* in 10ths */Di2015NewLine}Di2015NewLine[Flags] enum MIXERCONTROL_CONTROLTYPE : uint{Di2015NewLine    CUSTOM         = MIXERCONTROL_CT.CLASS_CUSTOM | MIXERCONTROL_CT.UNITS_CUSTOM,Di2015NewLine    BOOLEANMETER   = MIXERCONTROL_CT.CLASS_METER | MIXERCONTROL_CT.SC_METER_POLLED | MIXERCONTROL_CT.UNITS_BOOLEAN,Di2015NewLine    SIGNEDMETER    = MIXERCONTROL_CT.CLASS_METER | MIXERCONTROL_CT.SC_METER_POLLED | MIXERCONTROL_CT.UNITS_SIGNED,Di2015NewLine    PEAKMETER      = SIGNEDMETER + 1,Di2015NewLine    UNSIGNEDMETER  = MIXERCONTROL_CT.CLASS_METER | MIXERCONTROL_CT.SC_METER_POLLED | MIXERCONTROL_CT.UNITS_UNSIGNED,Di2015NewLine    BOOLEAN        = MIXERCONTROL_CT.CLASS_SWITCH | MIXERCONTROL_CT.SC_SWITCH_BOOLEAN | MIXERCONTROL_CT.UNITS_BOOLEAN,Di2015NewLine    ONOFF          = BOOLEAN + 1,Di2015NewLine    MUTE           = BOOLEAN + 2,Di2015NewLine    MONO           = BOOLEAN + 3,Di2015NewLine    LOUDNESS       = BOOLEAN + 4,Di2015NewLine    STEREOENH      = BOOLEAN + 5,Di2015NewLine    BASS_BOOST     = BOOLEAN + 0x00002277,Di2015NewLine    BUTTON         = MIXERCONTROL_CT.CLASS_SWITCH | MIXERCONTROL_CT.SC_SWITCH_BUTTON | MIXERCONTROL_CT.UNITS_BOOLEAN,Di2015NewLine    DECIBELS       = MIXERCONTROL_CT.CLASS_NUMBER | MIXERCONTROL_CT.UNITS_DECIBELS,Di2015NewLine    SIGNED         = MIXERCONTROL_CT.CLASS_NUMBER | MIXERCONTROL_CT.UNITS_SIGNED,Di2015NewLine    UNSIGNED       = MIXERCONTROL_CT.CLASS_NUMBER | MIXERCONTROL_CT.UNITS_UNSIGNED,Di2015NewLine    PERCENT        = MIXERCONTROL_CT.CLASS_NUMBER | MIXERCONTROL_CT.UNITS_PERCENT,Di2015NewLine    SLIDER         = MIXERCONTROL_CT.CLASS_SLIDER | MIXERCONTROL_CT.UNITS_SIGNED,Di2015NewLine    PAN            = SLIDER + 1,Di2015NewLine    QSOUNDPAN      = SLIDER + 2,Di2015NewLine    FADER          = MIXERCONTROL_CT.CLASS_FADER | MIXERCONTROL_CT.UNITS_UNSIGNED,Di2015NewLine    VOLUME         = FADER + 1,Di2015NewLine    BASS           = FADER + 2,Di2015NewLine    TREBLE         = FADER + 3,Di2015NewLine    EQUALIZER      = FADER + 4,Di2015NewLine    SINGLESELECT   = MIXERCONTROL_CT.CLASS_LIST | MIXERCONTROL_CT.SC_LIST_SINGLE | MIXERCONTROL_CT.UNITS_BOOLEAN,Di2015NewLine    MUX            = SINGLESELECT + 1,Di2015NewLine    MULTIPLESELECT = MIXERCONTROL_CT.CLASS_LIST | MIXERCONTROL_CT.SC_LIST_MULTIPLE | MIXERCONTROL_CT.UNITS_BOOLEAN,Di2015NewLine    MIXER          = MULTIPLESELECT + 1,Di2015NewLine    MICROTIME      = MIXERCONTROL_CT.CLASS_TIME | MIXERCONTROL_CT.SC_TIME_MICROSECS | MIXERCONTROL_CT.UNITS_UNSIGNED,Di2015NewLine    MILLITIME      = MIXERCONTROL_CT.CLASS_TIME | MIXERCONTROL_CT.SC_TIME_MILLISECS | MIXERCONTROL_CT.UNITS_UNSIGNEDDi2015NewLine}Di2015NewLineDi2015NewLine[StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]Di2015NewLinestruct MIXERLINE{Di2015NewLine    [StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]Di2015NewLine    public struct TargetInfo{Di2015NewLine        public uint   dwType;Di2015NewLine        public uint   dwDeviceID;Di2015NewLine        public ushort wMid;Di2015NewLine        public ushort wPid;Di2015NewLine        public uint   vDriverVersion;Di2015NewLine        [MarshalAs(UnmanagedType.ByValTStr, SizeConst=MAXPNAMELEN)]Di2015NewLine        public string szPname;Di2015NewLine    }Di2015NewLineDi2015NewLine    public uint            cbStruct;Di2015NewLine    public uint            dwDestination;Di2015NewLine    public uint            dwSource;Di2015NewLine    public uint            dwLineID;Di2015NewLine    public MIXERLINE_LINEF fdwLine;Di2015NewLine    public uint            dwUser;Di2015NewLine    public uint            dwComponentType;Di2015NewLine    public uint            cChannels;Di2015NewLine    public uint            cConnection;Di2015NewLine    public uint            cControls;Di2015NewLine    [MarshalAs(UnmanagedType.ByValTStr, SizeConst=MIXER_SHORT_NAME_CHARS)]Di2015NewLine    public string          szShortName;Di2015NewLine    [MarshalAs(UnmanagedType.ByValTStr, SizeConst=MIXER_LONG_NAME_CHARS)]Di2015NewLine    public string          szName;Di2015NewLine    public TargetInfo      Target;Di2015NewLine}Di2015NewLine[StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]Di2015NewLinestruct MIXERCONTROL{Di2015NewLine    [StructLayout(LayoutKind.Explicit)]Di2015NewLine    public struct BoundsInfo{Di2015NewLine        [FieldOffset(0)]Di2015NewLine        public int    lMinimum;Di2015NewLine        [FieldOffset(4)]Di2015NewLine        public int    lMaximum;Di2015NewLine        [FieldOffset(0)]Di2015NewLine        public uint   dwMinimum;Di2015NewLine        [FieldOffset(4)]Di2015NewLine        public uint   dwMaximum;Di2015NewLine        [FieldOffset(8), MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]Di2015NewLine        public uint[] dwReserved;Di2015NewLine    }Di2015NewLine    [StructLayout(LayoutKind.Explicit)]Di2015NewLine    public struct MetricsInfo{Di2015NewLine        [FieldOffset(0)]Di2015NewLine        public uint   cSteps;Di2015NewLine        [FieldOffset(0)]Di2015NewLine        public uint   cbCustomData;Di2015NewLine        [FieldOffset(4), MarshalAs(UnmanagedType.ByValArray, SizeConst=5)]Di2015NewLine        public uint[] dwReserved;Di2015NewLine    }Di2015NewLineDi2015NewLine    public uint                     cbStruct;Di2015NewLine    public uint                     dwControlID;Di2015NewLine    public MIXERCONTROL_CONTROLTYPE dwControlType;Di2015NewLine    public uint                     fdwControl;Di2015NewLine    public uint                     cMultipleItems;Di2015NewLine    [MarshalAs(UnmanagedType.ByValTStr, SizeConst=MIXER_SHORT_NAME_CHARS)]Di2015NewLine    public string                   szShortName;Di2015NewLine    [MarshalAs(UnmanagedType.ByValTStr, SizeConst=MIXER_LONG_NAME_CHARS)]Di2015NewLine    public string                   szName;Di2015NewLine    public BoundsInfo               Bounds;Di2015NewLine    public MetricsInfo              Metrics;Di2015NewLine}Di2015NewLine[StructLayout(LayoutKind.Explicit)]Di2015NewLinestruct MIXERLINECONTROLS{Di2015NewLine    [FieldOffset(0)]Di2015NewLine    public uint   cbStruct;Di2015NewLine    [FieldOffset(4)]Di2015NewLine    public uint   dwLineID;Di2015NewLine    [FieldOffset(8)]Di2015NewLine    public uint   dwControlID;Di2015NewLine    [FieldOffset(8)] // not a typo!  overlaps previous fieldDi2015NewLine    public uint   dwControlType;Di2015NewLine    [FieldOffset(12)]Di2015NewLine    public uint   cControls;Di2015NewLine    [FieldOffset(16)]Di2015NewLine    public uint   cbmxctrl;Di2015NewLine    [FieldOffset(20)]Di2015NewLine    public IntPtr pamxctrl;Di2015NewLine}Di2015NewLine[StructLayout(LayoutKind.Explicit)]Di2015NewLinestruct MIXERCONTROLDETAILS{Di2015NewLine    [FieldOffset(0)]Di2015NewLine    public uint   cbStruct;Di2015NewLine    [FieldOffset(4)]Di2015NewLine    public uint   dwControlID;Di2015NewLine    [FieldOffset(8)]Di2015NewLine    public uint   cChannels;Di2015NewLine    [FieldOffset(12)]Di2015NewLine    public IntPtr hwndOwner;Di2015NewLine    [FieldOffset(12)] // not a typo!Di2015NewLine    public uint   cMultipleItems;Di2015NewLine    [FieldOffset(16)]Di2015NewLine    public uint   cbDetails;Di2015NewLine    [FieldOffset(20)]Di2015NewLine    public IntPtr paDetails;Di2015NewLine}Di2015NewLine[StructLayout(LayoutKind.Sequential)]Di2015NewLinestruct VOLUME{Di2015NewLine    public int left;Di2015NewLine    public int right;Di2015NewLine}Di2015NewLinestruct MixerInfo{Di2015NewLine    public uint volumeCtl;Di2015NewLine    public uint muteCtl;Di2015NewLine    public int  minVolume;Di2015NewLine    public int  maxVolume;Di2015NewLine}Di2015NewLineDi2015NewLine[DllImport("WinMM.dll", CharSet=CharSet.Auto)]Di2015NewLinestatic extern uint mixerGetLineInfo      (IntPtr hmxobj, ref MIXERLINE pmxl, MIXER flags);Di2015NewLineDi2015NewLine[DllImport("WinMM.dll", CharSet=CharSet.Auto)]Di2015NewLinestatic extern uint mixerGetLineControls  (IntPtr hmxobj, ref MIXERLINECONTROLS pmxlc, MIXER flags);Di2015NewLineDi2015NewLine[DllImport("WinMM.dll", CharSet=CharSet.Auto)]Di2015NewLinestatic extern uint mixerGetControlDetails(IntPtr hmxobj, ref MIXERCONTROLDETAILS pmxcd, MIXER flags);Di2015NewLineDi2015NewLine[DllImport("WinMM.dll", CharSet=CharSet.Auto)]Di2015NewLinestatic extern uint mixerSetControlDetails(IntPtr hmxobj, ref MIXERCONTROLDETAILS pmxcd, MIXER flags);Di2015NewLineDi2015NewLinestatic MixerInfo GetMixerControls(){Di2015NewLine    MIXERLINE         mxl = new MIXERLINE();Di2015NewLine    MIXERLINECONTROLS mlc = new MIXERLINECONTROLS();Di2015NewLine    mxl.cbStruct = (uint)Marshal.SizeOf(typeof(MIXERLINE));Di2015NewLine    mlc.cbStruct = (uint)Marshal.SizeOf(typeof(MIXERLINECONTROLS));Di2015NewLineDi2015NewLine    mixerGetLineInfo(IntPtr.Zero, ref mxl, MIXER.OBJECTF_MIXER | MIXER.GETLINEINFOF_DESTINATION);Di2015NewLineDi2015NewLine    mlc.dwLineID  = mxl.dwLineID;Di2015NewLine    mlc.cControls = mxl.cControls;Di2015NewLine    mlc.cbmxctrl  = (uint)Marshal.SizeOf(typeof(MIXERCONTROL));Di2015NewLine    mlc.pamxctrl  = Marshal.AllocHGlobal((int)(mlc.cbmxctrl * mlc.cControls));Di2015NewLineDi2015NewLine    mixerGetLineControls(IntPtr.Zero, ref mlc, MIXER.OBJECTF_MIXER | MIXER.GETLINECONTROLSF_ALL);Di2015NewLineDi2015NewLine    MixerInfo rtn = new MixerInfo();Di2015NewLineDi2015NewLine    for(int i = 0; i < mlc.cControls; i++){Di2015NewLine        MIXERCONTROL mxc = (MIXERCONTROL)Marshal.PtrToStructure((IntPtr)((int)mlc.pamxctrl + (int)mlc.cbmxctrl * i), typeof(MIXERCONTROL));Di2015NewLine        switch(mxc.dwControlType){Di2015NewLine        case MIXERCONTROL_CONTROLTYPE.VOLUME:Di2015NewLine            rtn.volumeCtl = mxc.dwControlID;Di2015NewLine            rtn.minVolume = mxc.Bounds.lMinimum;Di2015NewLine            rtn.maxVolume = mxc.Bounds.lMaximum;Di2015NewLine            break;Di2015NewLine        case MIXERCONTROL_CONTROLTYPE.MUTE:Di2015NewLine            rtn.muteCtl = mxc.dwControlID;Di2015NewLine            break;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    Marshal.FreeHGlobal(mlc.pamxctrl);Di2015NewLineDi2015NewLine    return rtn;Di2015NewLine}Di2015NewLinestatic VOLUME GetVolume(MixerInfo mi){Di2015NewLine    MIXERCONTROLDETAILS mcd = new MIXERCONTROLDETAILS();Di2015NewLine    mcd.cbStruct       = (uint)Marshal.SizeOf(typeof(MIXERCONTROLDETAILS));Di2015NewLine    mcd.dwControlID    = mi.volumeCtl;Di2015NewLine    mcd.cMultipleItems = 0;Di2015NewLine    mcd.cChannels      = 2;Di2015NewLine    mcd.cbDetails      = (uint)Marshal.SizeOf(typeof(int));Di2015NewLine    mcd.paDetails      = Marshal.AllocHGlobal((int)mcd.cbDetails);Di2015NewLineDi2015NewLine    mixerGetControlDetails(IntPtr.Zero, ref mcd, MIXER.GETCONTROLDETAILSF_VALUE | MIXER.OBJECTF_MIXER);Di2015NewLineDi2015NewLine    VOLUME rtn = (VOLUME)Marshal.PtrToStructure(mcd.paDetails, typeof(VOLUME));Di2015NewLineDi2015NewLine    Marshal.FreeHGlobal(mcd.paDetails);Di2015NewLineDi2015NewLine    return rtn;Di2015NewLine}Di2015NewLinestatic bool IsMuted(MixerInfo mi){Di2015NewLine    MIXERCONTROLDETAILS mcd = new MIXERCONTROLDETAILS();Di2015NewLine    mcd.cbStruct       = (uint)Marshal.SizeOf(typeof(MIXERCONTROLDETAILS));Di2015NewLine    mcd.dwControlID    = mi.muteCtl;Di2015NewLine    mcd.cMultipleItems = 0;Di2015NewLine    mcd.cChannels      = 1;Di2015NewLine    mcd.cbDetails      = 4;Di2015NewLine    mcd.paDetails      = Marshal.AllocHGlobal((int)mcd.cbDetails);Di2015NewLineDi2015NewLine    mixerGetControlDetails(IntPtr.Zero, ref mcd, MIXER.GETCONTROLDETAILSF_VALUE | MIXER.OBJECTF_MIXER);Di2015NewLineDi2015NewLine    int rtn = Marshal.ReadInt32(mcd.paDetails);Di2015NewLineDi2015NewLine    Marshal.FreeHGlobal(mcd.paDetails);Di2015NewLineDi2015NewLine    return rtn != 0;Di2015NewLine}Di2015NewLinestatic void AdjustVolume(MixerInfo mi, int delta){Di2015NewLine    VOLUME volume = GetVolume(mi);Di2015NewLineDi2015NewLine    if(delta > 0){Di2015NewLine        volume.left  = Math.Min(mi.maxVolume, volume.left  + delta);Di2015NewLine        volume.right = Math.Min(mi.maxVolume, volume.right + delta);Di2015NewLine    }else{Di2015NewLine        volume.left  = Math.Max(mi.minVolume, volume.left  + delta);Di2015NewLine        volume.right = Math.Max(mi.minVolume, volume.right + delta);Di2015NewLine    }Di2015NewLineDi2015NewLine    SetVolume(mi, volume);Di2015NewLine}Di2015NewLinestatic void SetVolume(MixerInfo mi, VOLUME volume){Di2015NewLine    MIXERCONTROLDETAILS mcd = new MIXERCONTROLDETAILS();Di2015NewLine    mcd.cbStruct       = (uint)Marshal.SizeOf(typeof(MIXERCONTROLDETAILS));Di2015NewLine    mcd.dwControlID    = mi.volumeCtl;Di2015NewLine    mcd.cMultipleItems = 0;Di2015NewLine    mcd.cChannels      = 2;Di2015NewLine    mcd.cbDetails      = (uint)Marshal.SizeOf(typeof(int));Di2015NewLine    mcd.paDetails      = Marshal.AllocHGlobal((int)mcd.cbDetails);Di2015NewLineDi2015NewLine    Marshal.StructureToPtr(volume, mcd.paDetails, false);Di2015NewLineDi2015NewLine    mixerSetControlDetails(IntPtr.Zero, ref mcd, MIXER.GETCONTROLDETAILSF_VALUE | MIXER.OBJECTF_MIXER);Di2015NewLineDi2015NewLine    Marshal.FreeHGlobal(mcd.paDetails);Di2015NewLine}Di2015NewLinestatic void SetMute(MixerInfo mi, bool mute){Di2015NewLine    MIXERCONTROLDETAILS mcd = new MIXERCONTROLDETAILS();Di2015NewLine    mcd.cbStruct       = (uint)Marshal.SizeOf(typeof(MIXERCONTROLDETAILS));Di2015NewLine    mcd.dwControlID    = mi.muteCtl;Di2015NewLine    mcd.cMultipleItems = 0;Di2015NewLine    mcd.cChannels      = 1;Di2015NewLine    mcd.cbDetails      = 4;Di2015NewLine    mcd.paDetails      = Marshal.AllocHGlobal((int)mcd.cbDetails);Di2015NewLineDi2015NewLine    Marshal.WriteInt32(mcd.paDetails, mute ? 1 : 0);Di2015NewLineDi2015NewLine    mixerSetControlDetails(IntPtr.Zero, ref mcd, MIXER.GETCONTROLDETAILSF_VALUE | MIXER.OBJECTF_MIXER);Di2015NewLineDi2015NewLine    Marshal.FreeHGlobal(mcd.paDetails);Di2015NewLine}Di2015NewLine
294525Di2015UniqueSeparatorMixerInfo mi = GetMixerControls();Di2015NewLineAdjustVolume(mi, 100);    // add 100 to the current volumeDi2015NewLine
294525Di2015UniqueSeparatorMixerInfo mi = GetMixerControls();Di2015NewLineAdjustVolume(mi, (mi.maxVolume - mi.minVolume) / 10);    // increase the volume by 10% of total rangeDi2015NewLine
294525Di2015UniqueSeparatorMixerInfo mi = GetMixerControls();Di2015NewLineSetVolume(mi, mi.maxVolume);    // let's get this party crunk'd!Di2015NewLine
294525Di2015UniqueSeparatorMixerInfo mi = GetMixerControls();Di2015NewLineSetMute(mi, true);    // shhhh!!!!!!Di2015NewLine
294575Di2015UniqueSeparator$(document).ready(Di2015NewLine    function() {Di2015NewLineDi2015NewLine        var headers = $('tr:first').children();Di2015NewLineDi2015NewLine        $('tr:not(:first)').each(Di2015NewLineDi2015NewLine          function(i,row) {Di2015NewLineDi2015NewLine             var cols = jQuery(row).children();Di2015NewLineDi2015NewLine             var dl = jQuery('<dl></dl>');Di2015NewLineDi2015NewLine             for (var i=0, len = headers.length; i < len; ++i) {Di2015NewLine                 var dt = jQuery('<dt>');Di2015NewLine                 dt.text( jQuery(headers[i]).text() );Di2015NewLineDi2015NewLine                 var dd = jQuery('<dd>');Di2015NewLine                 dd.text( jQuery(cols[i]).text() );Di2015NewLineDi2015NewLine                 dl.append(dt).append(dd);Di2015NewLine             }Di2015NewLine             $('body').append(dl);Di2015NewLine          }Di2015NewLine        );Di2015NewLine        $('table').remove();Di2015NewLine    }Di2015NewLine);Di2015NewLine
294866Di2015UniqueSeparatorSafeHandle
294866Di2015UniqueSeparatorSafeHandle
294866Di2015UniqueSeparatorControl
294866Di2015UniqueSeparatorControl
294866Di2015UniqueSeparatorHandle
294866Di2015UniqueSeparatorSafeHandle
294866Di2015UniqueSeparatorIsInvalid
294866Di2015UniqueSeparatorReleaseHandle
294866Di2015UniqueSeparatorControl.Handle
294866Di2015UniqueSeparatorHandleRef
295109Di2015UniqueSeparatorpublic class MyClassDi2015NewLine{Di2015NewLine    // this is a field.  It is private to your class and stores the actual data.Di2015NewLine    private string _myField;Di2015NewLineDi2015NewLine    // this is a property.  When you access it uses the underlying field, but only exposesDi2015NewLine    // the contract that will not be affected by the underlying fieldDi2015NewLine    public string MyFieldDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return _myField;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _myField = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
295134Di2015UniqueSeparatorelem.Attributes().FirstOrDefault(a=>a.Name.LocalName == "from");Di2015NewLine
295145Di2015UniqueSeparatorpublic event FooHandler FooDi2015NewLine{Di2015NewLine    addDi2015NewLine    {Di2015NewLine        c.Foo += value;Di2015NewLine    }Di2015NewLine    removeDi2015NewLine    {Di2015NewLine        c.Foo -= value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
295212Di2015UniqueSeparatorOption ExplicitDi2015NewLineDi2015NewLine' We are monitoring cell B2...Di2015NewLineDi2015NewLinePrivate initialB2Value As Variant  ' holds the value for reinstatement when the user changes itDi2015NewLineDi2015NewLinePrivate Sub Worksheet_Activate()Di2015NewLine' record the value before the user makes any changes.Di2015NewLine' Could be a constant value, or you could use .Formula to ensure a calculation is not lostDi2015NewLine    initialB2Value = Range("B2").ValueDi2015NewLineDi2015NewLineEnd SubDi2015NewLineDi2015NewLinePrivate Sub Worksheet_Change(ByVal Target As Range)Di2015NewLineDi2015NewLineStatic alreadyChanging As Boolean Di2015NewLine' when we reset the cell, Worksheet_Change will fire again, so we'll use a flagDi2015NewLine' to tell us if we should care or not...Di2015NewLineDi2015NewLine    If alreadyChanging Then ' change is because of this code, no need to processDi2015NewLine        alreadyChanging = FalseDi2015NewLine        Exit SubDi2015NewLine    End IfDi2015NewLineDi2015NewLine    If IsEmpty(Intersect(Target, Range("B2"))) ThenDi2015NewLine    ' If the change is not happening to the range we are monitoring, ignore itDi2015NewLine        Exit SubDi2015NewLine    End IfDi2015NewLineDi2015NewLine    ' Do something with the user's input hereDi2015NewLine    Debug.Print "User input " & Range("B2").Value & " into B2"Di2015NewLineDi2015NewLine    ' before we reset the value, flag that we are changing the value in codeDi2015NewLine    alreadyChanging = TrueDi2015NewLineDi2015NewLine    ' now apply the old valueDi2015NewLine    Range("B2").Value = initialB2ValueDi2015NewLineDi2015NewLineEnd SubDi2015NewLine
295248Di2015UniqueSeparatorusing
295248Di2015UniqueSeparatorList<byte>
295248Di2015UniqueSeparatorbyte[]
295248Di2015UniqueSeparatorref
295248Di2015UniqueSeparatorout
295263Di2015UniqueSeparatorclass FooDi2015NewLine{Di2015NewLine    public event CancelEventHandler Bar;Di2015NewLineDi2015NewLine    protected void OnBar()Di2015NewLine    {Di2015NewLine        bool cancel = false;Di2015NewLine        CancelEventHandler handler = Bar;Di2015NewLine        if (handler != null)Di2015NewLine        {Di2015NewLine            CancelEventArgs args = new CancelEventArgs(cancel);Di2015NewLine            foreach (CancelEventHandler tmp in handler.GetInvocationList())Di2015NewLine            {Di2015NewLine                tmp(this, args);Di2015NewLine                if (args.Cancel)Di2015NewLine                {Di2015NewLine                    cancel = true;Di2015NewLine                    break;Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        if(!cancel) { /* ... */ }Di2015NewLine    }Di2015NewLine}Di2015NewLine
295324Di2015UniqueSeparatorint id = ... // the primary key we want to look forDi2015NewLineusing(var ctx = new MydataContext()) {Di2015NewLine   SomeType record = ctx.SomeTable.Single(x => x.SomeColumn == id);Di2015NewLine   //... etcDi2015NewLineDi2015NewLine   // ctx.SubmitChanges(); // to commit any updatesDi2015NewLine}Di2015NewLine
295324Di2015UniqueSeparator    var myOrders = from row in ctx.OrdersDi2015NewLine                   where row.CustomerID = id && row.IsActiveDi2015NewLine                   orderby row.OrderDateDi2015NewLine                   select row;Di2015NewLine
295424Di2015UniqueSeparator#if DEBUGDi2015NewLine  System.Diagnostics.Debugger.Break();Di2015NewLine#endifDi2015NewLine
295424Di2015UniqueSeparator#if DEBUGDi2015NewLine  System.Diagnostics.Debugger.Break();Di2015NewLine#endifDi2015NewLine
295427Di2015UniqueSeparator[EditorBrowsable(EditorBrowsableState.Never)]Di2015NewLine
295474Di2015UniqueSeparator<%@ Page Language="C#" %>Di2015NewLine<%@ Import Namespace="System.Data" %>Di2015NewLine<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">Di2015NewLine<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">Di2015NewLine  <head>Di2015NewLine    <title>Code behind Arrrrrrrrrrgh</title>Di2015NewLine    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />Di2015NewLineDi2015NewLine    <script runat="server">Di2015NewLine    private void Page_Load(Object sender, EventArgs e)Di2015NewLine    {Di2015NewLine       DisplayServerDetails();Di2015NewLine       DisplayRequestDetails();Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    private void DisplayServerDetails()Di2015NewLine      {Di2015NewLine        serverName.Text = Environment.MachineName;Di2015NewLine        operatingSystem.Text = Environment.OSVersion.Platform.ToString();Di2015NewLine        operatingSystemVersion.Text = Environment.OSVersion.Version.ToString();Di2015NewLine      }Di2015NewLineDi2015NewLine      private void DisplayRequestDetails()Di2015NewLine      {Di2015NewLine         requestedPage.Text = Request.Url.AbsolutePath;Di2015NewLine         requestIP.Text = Request.UserHostAddress;Di2015NewLine         requestUA.Text = Request.UserAgent;Di2015NewLine      }Di2015NewLineDi2015NewLine    </script>Di2015NewLineDi2015NewLine  </head>Di2015NewLineDi2015NewLine  <body>Di2015NewLine    <form method="post" runat="server">Di2015NewLine         <table width="450px" border="1px">Di2015NewLine            <tr>Di2015NewLine               <td colspan="2"><strong>Server Details</strong></td>Di2015NewLine            </tr>Di2015NewLine            <tr>Di2015NewLine               <td>Server Name:</td>Di2015NewLine               <td>Di2015NewLine                  <asp:Label id="serverName" runat="server"></asp:Label></td>Di2015NewLine            </tr>Di2015NewLine            <tr>Di2015NewLine               <td>Operating System:</td>Di2015NewLine               <td>Di2015NewLine                  <asp:Label id="operatingSystem" runat="server"></asp:Label>Di2015NewLine               </td>Di2015NewLine            </tr>Di2015NewLine            <tr>Di2015NewLine               <td>Operating System Version:</td>Di2015NewLine               <td>Di2015NewLine                  <asp:Label id="operatingSystemVersion" runat="server">Di2015NewLine                  </asp:Label>Di2015NewLine               </td>Di2015NewLine            </tr>Di2015NewLine         </table>Di2015NewLine         <br>Di2015NewLine         <table width="450px" border="1px">Di2015NewLine            <tr>Di2015NewLine               <td colspan="2"><strong>Request Details</strong></td>Di2015NewLine            </tr>Di2015NewLine            <tr>Di2015NewLine               <td>Page Requested:</td>Di2015NewLine               <td>Di2015NewLine                  <asp:Label id="requestedPage" runat="server"></asp:Label>Di2015NewLine               </td>Di2015NewLine            </tr>Di2015NewLine            <tr>Di2015NewLine               <td>Request From:</td>Di2015NewLine               <td>Di2015NewLine                  <asp:Label id="requestIP" runat="server"></asp:Label>Di2015NewLine               </td>Di2015NewLine            </tr>Di2015NewLine            <tr>Di2015NewLine               <td>User Agent:</td>Di2015NewLine               <td>Di2015NewLine                  <asp:Label id="requestUA" runat="server"></asp:Label>Di2015NewLine               </td>Di2015NewLine            </tr>Di2015NewLine         </table>Di2015NewLine      </form>Di2015NewLine  </body>Di2015NewLine
295582Di2015UniqueSeparatorRun regedt32Di2015NewLineNavigate to the following key:Di2015NewLineHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Eventlog\\SecurityDi2015NewLineRight click on this entry and select PermissionsDi2015NewLineAdd the ASPNET userDi2015NewLineGive it Read permissionDi2015NewLineDi2015NewLine2. Change settings in machine.config fileDi2015NewLineDi2015NewLineRun ExplorerDi2015NewLineNavigate to WINDOWS or WINNT folderDi2015NewLineOpen Microsoft.NET folderDi2015NewLineOpen Framework folderDi2015NewLineOpen v1.1.4322 folder (folder name may be different, depending on what dotnet version is installed)Di2015NewLineOpen CONFIG folderDi2015NewLineOpen machine.config file using notepad (make a backup of this file first)Di2015NewLineLocate processmodel tag (approx. at line 441)Di2015NewLineLocate userName="machine" (approx. at line 452)Di2015NewLineChange it to userName="SYSTEM"Di2015NewLineSave and close the fileDi2015NewLineClose ExplorerDi2015NewLineDi2015NewLine3. Restart IISDi2015NewLineDi2015NewLineRun IISResetDi2015NewLine
295597Di2015UniqueSeparatorkey
295597Di2015UniqueSeparatorList<string> keys = FillKeys()Di2015NewLineforeach (string key in keys){Di2015NewLine    string copy = key;Di2015NewLine    q = q.Where(c => c.Company.Name.Contains(copy));Di2015NewLine}Di2015NewLine
295622Di2015UniqueSeparator[XmlType("webSite")]Di2015NewLinepublic class WebSite {...}Di2015NewLine
295622Di2015UniqueSeparator[XmlArrayItem("webSite")]Di2015NewLine[XmlArray("sites")]Di2015NewLinepublic WebSites Sites { get; set; }Di2015NewLine
295703Di2015UniqueSeparatorusing (new NetworkConnection(@"\\\\server\\read", readCredentials))Di2015NewLineusing (new NetworkConnection(@"\\\\server2\\write", writeCredentials)) {Di2015NewLine   File.Copy(@"\\\\server\\read\\file", @"\\\\server2\\write\\file");Di2015NewLine}Di2015NewLine
295760Di2015UniqueSeparatorclass A_part1:Di2015NewLine    def m1(self):Di2015NewLine        print "m1"Di2015NewLineDi2015NewLineclass A_part2:Di2015NewLine    def m2(self):Di2015NewLine        print "m2"Di2015NewLineDi2015NewLineclass A(A_part1, A_part2):Di2015NewLine    passDi2015NewLineDi2015NewLinea = A()Di2015NewLinea.m1()Di2015NewLinea.m2()Di2015NewLine
295842Di2015UniqueSeparatornull
295842Di2015UniqueSeparatorDateTime
295842Di2015UniqueSeparatorDateTime? foo;Di2015NewLinefoo = true ? (DateTime?)null : new DateTime(0);Di2015NewLine
295842Di2015UniqueSeparatorNullable<DateTime>
295842Di2015UniqueSeparatorDateTime?
295856Di2015UniqueSeparatornew string('a',3)
295856Di2015UniqueSeparatorEnumerable.Repeat("a",3)
295856Di2015UniqueSeparator    static void Main()Di2015NewLine    {Di2015NewLine        string foo = "foo";Di2015NewLine        string bar = foo.Repeat(3);Di2015NewLine    }Di2015NewLine    // stuff this bit away in some class library somewhere...Di2015NewLine    static string Repeat(this string value, int count)Di2015NewLine    {Di2015NewLine        if (count < 0) throw new ArgumentOutOfRangeException("count");Di2015NewLine        if (string.IsNullOrEmpty(value)) return value; // GIGO            Di2015NewLine        if (count == 0) return "";Di2015NewLine        StringBuilder sb = new StringBuilder(value.Length * count);Di2015NewLine        for (int i = 0; i < count; i++)Di2015NewLine        {Di2015NewLine            sb.Append(value);Di2015NewLine        }Di2015NewLine        return sb.ToString();Di2015NewLine    }Di2015NewLine
295931Di2015UniqueSeparator    XNamespace ns = "http://s3.amazonaws.com/doc/2006-03-01/";Di2015NewLine    var contents = from content in doc.Descendants(ns + "Contents")Di2015NewLine                   select new { Key = content.Element(ns + "Key").Value,Di2015NewLine                       ETag = content.Element(ns + "ETag").Value };Di2015NewLine
296004Di2015UniqueSeparatorinterface IObserverDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLineclass SubjectDi2015NewLine{Di2015NewLine  public Subject ()Di2015NewLine  {Di2015NewLine    m_observers = new List<IObserver> ();Di2015NewLine  }Di2015NewLineDi2015NewLine  public void Register (IObserver o)Di2015NewLine  {Di2015NewLine    m_observers.Add (o);Di2015NewLine  }Di2015NewLineDi2015NewLine  List<IObserver>Di2015NewLine    m_observers;Di2015NewLine}Di2015NewLine
296004Di2015UniqueSeparator  public void NotifyObservers (object param)Di2015NewLine  {Di2015NewLine    foreach (IObserver observer in m_observers)Di2015NewLine    {Di2015NewLine      foreach (MethodInfo method in observer.GetType ().GetMethods (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy | BindingFlags.Instance))Di2015NewLine      {Di2015NewLine        if (method.Name == "Notify")Di2015NewLine        {Di2015NewLine          ParameterInfo []Di2015NewLine            parameters = method.GetParameters ();Di2015NewLineDi2015NewLine          if (parameters.Length == 1 && parameters [0].ParameterType == param.GetType ())Di2015NewLine          {Di2015NewLine            method.Invoke (observer, new object [] { param });Di2015NewLine            break;Di2015NewLine          }Di2015NewLine        }Di2015NewLine      }Di2015NewLine    }Di2015NewLine  }Di2015NewLine
296004Di2015UniqueSeparatorclass Observer : IObserverDi2015NewLine{Di2015NewLine  public Observer (Subject s)Di2015NewLine  {Di2015NewLine    s.Register (this);Di2015NewLine  }Di2015NewLineDi2015NewLine  void Notify (float value)Di2015NewLine  {Di2015NewLine    System.Diagnostics.Trace.WriteLine ("float value = " + value);Di2015NewLine  }Di2015NewLineDi2015NewLine  void Notify (int value)Di2015NewLine  {Di2015NewLine    System.Diagnostics.Trace.WriteLine ("int value = " + value);Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLinestatic void Main (string [] args)Di2015NewLine{Di2015NewLine  SubjectDi2015NewLine    s = new Subject ();Di2015NewLineDi2015NewLine  ObserverDi2015NewLine    o = new Observer (s);Di2015NewLineDi2015NewLine  floatDi2015NewLine    v1 = 3.14f;Di2015NewLineDi2015NewLine  intDi2015NewLine    v2 = 42;Di2015NewLineDi2015NewLine  System.Diagnostics.Trace.WriteLine ("sending float");Di2015NewLine  s.NotifyObservers (v1);Di2015NewLine  System.Diagnostics.Trace.WriteLine ("sending int");Di2015NewLine  s.NotifyObservers (v2);Di2015NewLine}Di2015NewLine
296185Di2015UniqueSeparator#if TESTINGDi2015NewLine        [SoapDocumentMethodAttribute(something)]Di2015NewLine#elseDi2015NewLine        [SoapDocumentMethodAttribute(someotherthing)]Di2015NewLine#endifDi2015NewLine
296185Di2015UniqueSeparator<DefineConstants>TESTING</DefineConstants>Di2015NewLine
296375Di2015UniqueSeparatorusing System.Management;Di2015NewLine
296375Di2015UniqueSeparatorstring printerName = "YourPrinterName";Di2015NewLinestring query = string.Format("SELECT * from Win32_Printer WHERE Name LIKE '%{0}'", printerName);Di2015NewLineManagementObjectSearcher searcher = new ManagementObjectSearcher(query);Di2015NewLineManagementObjectCollection coll = searcher.Get();Di2015NewLineDi2015NewLineforeach (ManagementObject printer in coll)Di2015NewLine{Di2015NewLine    foreach (PropertyData property in printer.Properties)Di2015NewLine    {Di2015NewLine        Console.WriteLine(string.Format("{0}: {1}", property.Name, property.Value));Di2015NewLine    }Di2015NewLine}Di2015NewLine
296406Di2015UniqueSeparator<appConfig>Di2015NewLine   <SuperAppConfig handlerNamespace="BigCorp.SuperApp">Di2015NewLine      <Handler class="ClassB" />Di2015NewLine   </SuperAppConfig>Di2015NewLine</appConfig>Di2015NewLine
296474Di2015UniqueSeparator(&(objectCategory=user)(sAMAccountName=<user-logon-name-here>))Di2015NewLine
296474Di2015UniqueSeparatorDirectorySearcher ds = new DirectorySearcher();Di2015NewLinestring userName = WindowsIdentity.GetCurrent().Name;Di2015NewLinestring userFilter = "(&(objectCategory=user)(sAMAccountName={0}))";Di2015NewLineDi2015NewLineds.SearchScope = SearchScope.Subtree;Di2015NewLineds.PropertiesToLoad.Add("distinguishedName");Di2015NewLineds.PageSize = 1;Di2015NewLineds.ServerPageTimeLimit = TimeSpan.FromSeconds(2);Di2015NewLineds.Filter = string.Format(userFilter, userName);Di2015NewLineDi2015NewLineSearchResult sr = ds.FindOne();Di2015NewLine// now do something with sr.Properties["distinguishedName"][0]Di2015NewLine
296546Di2015UniqueSeparator"accountants, seekers, copiers, typers"Di2015NewLine
296564Di2015UniqueSeparator{"testNumbers": [5555555555,3333333333,4444444444]}Di2015NewLine
296780Di2015UniqueSeparatorpostParent
296780Di2015UniqueSeparatorpostParent
296780Di2015UniqueSeparatorpostParent
296946Di2015UniqueSeparatorclass YourClass {Di2015NewLine    public class Nested {Di2015NewLine        public Nested(YourClass outer) { m_RefToOuterWorld = outer; }Di2015NewLine        private readonly YourClass m_RefToOuterWorld;Di2015NewLineDi2015NewLine        public string this[int index] {Di2015NewLine            get { return m_RefToOuter.TestArray[index];Di2015NewLine            set { m_RefToOuter.TestArray[index] = value; }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private readonly Nested m_Nested;Di2015NewLine    private string[] TestArray = new string[10];Di2015NewLineDi2015NewLine    public YourClass() { m_Nested = new Nested(this); }Di2015NewLineDi2015NewLine    public Nested TestIt { get { return m_Nested; } }Di2015NewLine}Di2015NewLine
296946Di2015UniqueSeparatorvar test = new YourClass();Di2015NewLinetest.TestIt[2] = "Hello world!";Di2015NewLine
296985Di2015UniqueSeparatorxlsSheet.Write("C" + rowIndex, null, title);Di2015NewLine
297061Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Drawing;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.Windows.Forms.VisualStyles;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLinenamespace WindowsFormsApplication1 {Di2015NewLine  public partial class Form1 : Form {Di2015NewLine    VisualStyleElement pulseOverlay;Di2015NewLine    VisualStyleElement moveOverlay;Di2015NewLine    VisualStyleRenderer pulseRenderer;Di2015NewLine    VisualStyleRenderer moveRenderer;Di2015NewLine    Timer animator = new Timer();Di2015NewLine    public Form1() {Di2015NewLine      InitializeComponent();Di2015NewLine      ConstructorInfo ci = typeof(VisualStyleElement).GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance,Di2015NewLine        null, new Type[] { typeof(string), typeof(int), typeof(int) }, null);Di2015NewLine      pulseOverlay = (VisualStyleElement)ci.Invoke(new object[] { "PROGRESS", 7, 0 });Di2015NewLine      moveOverlay = (VisualStyleElement)ci.Invoke(new object[] { "PROGRESS", 8, 0 });Di2015NewLine      pulseRenderer = new VisualStyleRenderer(pulseOverlay);Di2015NewLine      moveRenderer = new VisualStyleRenderer(moveOverlay);Di2015NewLine      animator.Interval = 20;Di2015NewLine      animator.Tick += new EventHandler(animator_Tick);Di2015NewLine      animator.Enabled = true;Di2015NewLine      this.DoubleBuffered = true;Di2015NewLine    }Di2015NewLine    void animator_Tick(object sender, EventArgs e) {Di2015NewLine      Invalidate();Di2015NewLine    }Di2015NewLineDi2015NewLine    int xpos;Di2015NewLine    protected override void OnPaint(PaintEventArgs e) {Di2015NewLine      Rectangle rc = new Rectangle(10, 10, 100, 20);Di2015NewLine      ProgressBarRenderer.DrawHorizontalBar(e.Graphics, rc);Di2015NewLine      rc = new Rectangle(10, 10, 50, 20);Di2015NewLine      ProgressBarRenderer.DrawHorizontalChunks(e.Graphics, rc);Di2015NewLine      xpos += 3;Di2015NewLine      if (xpos >= 30) xpos = -150;  // Note: intentionally too far leftDi2015NewLine      rc = new Rectangle(xpos, 10, 50, 20);Di2015NewLine      pulseRenderer.DrawBackground(e.Graphics, rc);Di2015NewLine      moveRenderer.DrawBackground(e.Graphics, rc);Di2015NewLine    }Di2015NewLine  }Di2015NewLineDi2015NewLine}Di2015NewLine
297076Di2015UniqueSeparatorFunction("bar")]Di2015NewLinepublic string Bar(string name)Di2015NewLine{Di2015NewLine    string baseDirectory = Project.BaseDirectory;Di2015NewLine    return baseDirectory; Di2015NewLine}Di2015NewLine
297362Di2015UniqueSeparatorDi2015NewLineprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{    Di2015NewLine    if (!Page.IsPostBack)Di2015NewLine        {   Di2015NewLine             LoadData()Di2015NewLine        }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void LoadData()Di2015NewLine{Di2015NewLine    labDownloadList.Text = null;Di2015NewLine    //Session variables:    Di2015NewLine    if (Session["Game"] != null)Di2015NewLine    ...Di2015NewLine}Di2015NewLineDi2015NewLineprotected void btnFilter_Click(object sender, EventArgs e)Di2015NewLine{    Di2015NewLine    game = lstGames.SelectedValue;Di2015NewLine    modtype = lstTypeMod.SelectedValue;Di2015NewLine    filter = true;Di2015NewLine    LoadData();Di2015NewLine}Di2015NewLine
297378Di2015UniqueSeparatorDesigner
297378Di2015UniqueSeparatorComponentDesigner
297378Di2015UniqueSeparatorAssociatedComponents
297378Di2015UniqueSeparatorTimer
297378Di2015UniqueSeparatorDesignerAttribute
297378Di2015UniqueSeparatorControlDesigner
297378Di2015UniqueSeparatorComponentDesigner
297378Di2015UniqueSeparatorComponentDesigner
297378Di2015UniqueSeparatorAssociatedComponents
297378Di2015UniqueSeparatorToolStrip
297378Di2015UniqueSeparatorMenuStrip
297378Di2015UniqueSeparatorDesignerAttribute
297378Di2015UniqueSeparatorToolStripDesigner
297378Di2015UniqueSeparator/*Di2015NewLine * note that in C#, I can refer to the "DesignerAttribute" class within the [ brackets ]Di2015NewLine * by simply "Designer".  The compiler adds the "Attribute" to the end for us (assumingDi2015NewLine * there's no attribute class named simply "Designer").Di2015NewLine */Di2015NewLine[Designer("System.Windows.Forms.Design.ToolStripDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), ...(other attributes)]Di2015NewLinepublic class ToolStrip : ScrollableControl, IArrangedElement, ...(other interfaces){Di2015NewLine    ...Di2015NewLine}Di2015NewLine
297378Di2015UniqueSeparatorToolStripDesigner
297378Di2015UniqueSeparatorActivator.CreateInstance
297378Di2015UniqueSeparatorToolStripDesigner
297378Di2015UniqueSeparatorComponentDesigner
297378Di2015UniqueSeparatorAssociatedComponents
297378Di2015UniqueSeparatorArrayList
297378Di2015UniqueSeparatorToolStrip
297378Di2015UniqueSeparator/*Di2015NewLine * Some controls will require that we set their "Site" property beforeDi2015NewLine * we associate a IDesigner with them.  This "site" is used by theDi2015NewLine * IDesigner to get services from the designer.  Because we're notDi2015NewLine * implementing a real designer, we'll create a dummy site thatDi2015NewLine * provides bare minimum services and which relies on the frameworkDi2015NewLine * for as much of its functionality as possible.Di2015NewLine */Di2015NewLineclass DummySite : ISite, IDisposable{Di2015NewLine\DesignSurface designSurface;Di2015NewLine\IComponent    component;Di2015NewLine\string        name;Di2015NewLineDi2015NewLine\public IComponent Component {get{return component;}}Di2015NewLine\public IContainer Container {get{return designSurface.ComponentContainer;}}Di2015NewLine\public bool       DesignMode{get{return false;}}Di2015NewLine\public string     Name      {get{return name;}set{name = value;}}Di2015NewLineDi2015NewLine\public DummySite(IComponent component){Di2015NewLine\\this.component = component;Di2015NewLine\\designSurface = new DesignSurface();Di2015NewLine\}Di2015NewLine\~DummySite(){Dispose(false);}Di2015NewLineDi2015NewLine\protected virtual void Dispose(bool isDisposing){Di2015NewLine\\if(isDisposing)Di2015NewLine\\\designSurface.Dispose();Di2015NewLine\}Di2015NewLineDi2015NewLine\public void Dispose(){Di2015NewLine\\Dispose(true);Di2015NewLine\\GC.SuppressFinalize(this);Di2015NewLine\}Di2015NewLineDi2015NewLine\public object GetService(Type serviceType){return designSurface.GetService(serviceType);}Di2015NewLine}Di2015NewLineDi2015NewLinestatic void GetComponents(IComponent component, int level, Action<IComponent, int> action){Di2015NewLine\action(component, level);Di2015NewLineDi2015NewLine\bool visible, enabled;Di2015NewLine\Control control = component as Control;Di2015NewLine\if(control != null){Di2015NewLine\\/*Di2015NewLine\\ * Attaching the IDesigner sets the Visible and Enabled properties to true.Di2015NewLine\\ * This is useful when you're designing your form in Visual Studio, but atDi2015NewLine\\ * runtime, we'd rather the controls maintain their state, so we'll save theDi2015NewLine\\ * values of these properties and restore them after we detach the IDesigner.Di2015NewLine\\ */Di2015NewLine\\visible = control.Visible;Di2015NewLine\\enabled = control.Enabled;Di2015NewLineDi2015NewLine\\foreach(Control child in control.Controls)Di2015NewLine\\\GetComponents(child, level + 1, action);Di2015NewLine\}else visible = enabled = false;Di2015NewLineDi2015NewLine\/*Di2015NewLine\ * The TypeDescriptor class has a handy static method that getsDi2015NewLine\ * the DesignerAttribute of the type of the component we pass itDi2015NewLine\ * and creates an instance of the IDesigner class for us.  ThisDi2015NewLine\ * saves us a lot of trouble.Di2015NewLine\ */Di2015NewLine\ComponentDesigner des = TypeDescriptor.CreateDesigner(component, typeof(IDesigner)) as ComponentDesigner;Di2015NewLine\if(des != null)Di2015NewLine\\try{Di2015NewLine\\\DummySite site;Di2015NewLine\\\if(component.Site == null)Di2015NewLine\\\\component.Site = site = new DummySite(component);Di2015NewLine\\\else site = null;Di2015NewLineDi2015NewLine\\\try{Di2015NewLine\\\\des.Initialize(component);Di2015NewLine\\\\foreach(IComponent child in des.AssociatedComponents)Di2015NewLine\\\\\GetComponents(child, level + 1, action);Di2015NewLine\\\}finally{Di2015NewLine\\\\if(site != null){Di2015NewLine\\\\\component.Site = null;Di2015NewLine\\\\\site.Dispose();Di2015NewLine\\\\}Di2015NewLine\\\}Di2015NewLine\\}finally{des.Dispose();}Di2015NewLineDi2015NewLine\if(control != null){Di2015NewLine\\control.Visible = visible;Di2015NewLine\\control.Enabled = enabled;Di2015NewLine\}Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine/* We'll use this in the ListComponents call */Di2015NewLine[DllImport("user32.dll", CharSet=CharSet.Auto)]Di2015NewLinestatic extern int SendMessage(IntPtr hWnd, int msg, int wParam, int lParam);Di2015NewLineDi2015NewLineconst int WM_SETREDRAW = 11;Di2015NewLineDi2015NewLinevoid ListComponents(){Di2015NewLine\/*Di2015NewLine\ * Invisible controls and disabled controls will be temporarily shown and enabledDi2015NewLine\ * during the GetComponents call (see the comment within that call), so to keepDi2015NewLine\ * them from showing up and then disappearing again (or appearing to temporarilyDi2015NewLine\ * change enabled state), we'll disable redrawing of our window and re-enable itDi2015NewLine\ * afterwards.Di2015NewLine\ */Di2015NewLine\SendMessage(Handle, WM_SETREDRAW, 0, 0);Di2015NewLine\GetComponents(this, 0,Di2015NewLine\\/* You'll want to do something more useful here */Di2015NewLine\\(component, level)=>System.Diagnostics.Debug.WriteLine(new string('\\t', level) + component));Di2015NewLine\SendMessage(Handle, WM_SETREDRAW, 1, 0);Di2015NewLine}Di2015NewLine
297481Di2015UniqueSeparatorVector2 vector = new Vector2()Di2015NewLine
297525Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.ComponentModel;Di2015NewLineusing System.Data;Di2015NewLineusing System.Drawing;Di2015NewLineusing System.Text;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinenamespace WsTestDi2015NewLine{Di2015NewLine    public partial class PhpWsForm : FormDi2015NewLine    {Di2015NewLine        private localhost.MyWebService ws;Di2015NewLineDi2015NewLine        public PhpWsForm()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            ws = new WsTest.localhost.MyWebService();Di2015NewLineDi2015NewLine            // The line below is the part that I forgot!Di2015NewLine            ws.CookieContainer = new System.Net.CookieContainer();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void butSetVal_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            ws.setName(txtSetVal.Text);Di2015NewLine        }Di2015NewLineDi2015NewLine        private void butGetVal_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            txtGetVal.Text = ws.getName();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
297529Di2015UniqueSeparatorpublic static class extenstionsDi2015NewLine{Di2015NewLine    private static Dictionary<Type, Action<Control>> controldefaults = new Dictionary<Type, Action<Control>>() { Di2015NewLine            {typeof(TextBox), c => ((TextBox)c).Clear()},Di2015NewLine            {typeof(CheckBox), c => ((CheckBox)c).Checked = false},Di2015NewLine            {typeof(ListBox), c => ((ListBox)c).Items.Clear()},Di2015NewLine            {typeof(RadioButton), c => ((RadioButton)c).Checked = false},Di2015NewLine            {typeof(GroupBox), c => ((GroupBox)c).Controls.ClearControls()},Di2015NewLine            {typeof(Panel), c => ((Panel)c).Controls.ClearControls()}Di2015NewLine    };Di2015NewLineDi2015NewLine    private static void FindAndInvoke(Type type, Control control) Di2015NewLine    {Di2015NewLine        if (controldefaults.ContainsKey(type)) {Di2015NewLine            controldefaults[type].Invoke(control);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void ClearControls(this Control.ControlCollection controls)Di2015NewLine    {Di2015NewLine        foreach (Control control in controls)Di2015NewLine        {Di2015NewLine             FindAndInvoke(control.GetType(), control);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void ClearControls<T>(this Control.ControlCollection controls) where T : class Di2015NewLine    {Di2015NewLine        if (!controldefaults.ContainsKey(typeof(T))) return;Di2015NewLineDi2015NewLine        foreach (Control control in controls)Di2015NewLine        {Di2015NewLine           if (control.GetType().Equals(typeof(T)))Di2015NewLine           {Di2015NewLine               FindAndInvoke(typeof(T), control);Di2015NewLine           }Di2015NewLine        }    Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
297529Di2015UniqueSeparator private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        this.Controls.ClearControls();Di2015NewLine    }Di2015NewLine
297529Di2015UniqueSeparatorthis.Controls.ClearControls<TextBox>();Di2015NewLine
297980Di2015UniqueSeparatormyDataContext dc = new myDataContext();Di2015NewLineList<FunderText> myList = myDataContext.tbl_funderTexts.ToList();Di2015NewLineDi2015NewLineList<string> result1 = new List<string>();Di2015NewLineforeach(var theValue in myValues)Di2015NewLine{Di2015NewLine  result1.Add(Di2015NewLine    myList.First(f => f.funderID == theValue.funderId && f.eng_code == element).funderTextDi2015NewLine  );Di2015NewLine}Di2015NewLine
297984Di2015UniqueSeparatorstring xpathToUpdate = "/*[namespace-uri()='http://Test.Schemas']/*[local-name()='NodeA']/*[local-name()='NodeB']/*[local-name()='alpha']/@Type";Di2015NewLine
297984Di2015UniqueSeparator<ns0:TestXML xmlns:ns0="http://Test.Schemas">Di2015NewLine  <ns0:NodeA>Di2015NewLine    <ns0:NodeB>Di2015NewLine      <ns0:alpha Id="1" Value="Apple" Type="fruit">Di2015NewLine      </ns0:alpha>Di2015NewLine      <ns0:alpha Id="2" Value="Banana" Type="fruit">Di2015NewLine      </ns0:alpha>Di2015NewLine      <ns0:alpha Id="3" Value="Car" Type="fruit">Di2015NewLine      </ns0:alpha>Di2015NewLine      <ns0:alpha Id="4" Value="Duck" Type="fruit">Di2015NewLine      </ns0:alpha>Di2015NewLine    </ns0:NodeB>Di2015NewLine  </ns0:NodeA>Di2015NewLine</ns0:TestXML>Di2015NewLine
298020Di2015UniqueSeparatorService1
298020Di2015UniqueSeparator<%@ WebService Language="C#" CodeBehind="Service1.asmx.cs" Class="WebService1.Service1" %>Di2015NewLine
298020Di2015UniqueSeparatorClass
298020Di2015UniqueSeparatorCodeBehind
298020Di2015UniqueSeparator    [WebMethod(MessageName = "InsertXml")]Di2015NewLine    public XmlDocument Insert(XmlDocument Jobs)Di2015NewLine    { ... }Di2015NewLine
298020Di2015UniqueSeparatorInsertXml(...)
298208Di2015UniqueSeparator[DefaultValue("")]Di2015NewLinepublic string Foo {get;set;}Di2015NewLinepublic Bar() { // ctorDi2015NewLine  Foo = "";Di2015NewLine}Di2015NewLine
298208Di2015UniqueSeparatorprivate readonly List<SomeClass> items = new List<SomeClass>();Di2015NewLinepublic List<SomeClass> Items {get {return items;}}Di2015NewLine
298208Di2015UniqueSeparatorpublic Bar() : this("") {}Di2015NewLinepublic Bar(string foo) {Foo = foo;}Di2015NewLine
298208Di2015UniqueSeparatorbase(...)
298208Di2015UniqueSeparatorpublic Bar(string foo)
298208Di2015UniqueSeparatorthis(...)
298276Di2015UniqueSeparatorpublisher.SomeEvent += target.SomeHandler;Di2015NewLine
298287Di2015UniqueSeparatorvar
298287Di2015UniqueSeparatordynamic
298287Di2015UniqueSeparatordynamic
298287Di2015UniqueSeparatorvar
298313Di2015UniqueSeparatorEnumerable.Concat
298313Di2015UniqueSeparatorpublic IEnumerable<ProdPriceDisplay> GetShopProductsPrices()Di2015NewLine{Di2015NewLine    var products = from shop in db.SHOPsDi2015NewLine                   select new ProdPriceDisplayDi2015NewLine                   {Di2015NewLine                       ProdPrice = shop.S_NAME + " - Â£" + shop.S_PRICEDi2015NewLine                   };Di2015NewLineDi2015NewLine    return products.AsEnumerable()Di2015NewLine                   .Concat(new [] { new ProdPriceDisplay Di2015NewLine                           { ProdPrice = "some additional text"; });Di2015NewLine}Di2015NewLine
298313Di2015UniqueSeparatorEnumerable.Repeat
298313Di2015UniqueSeparator(new ProdPriceDisplay { ... }, 1)
298313Di2015UniqueSeparatorAsEnumerable()
298324Di2015UniqueSeparator    System.Collections.Specialized.NameValueCollection k = Di2015NewLine        new System.Collections.Specialized.NameValueCollection();Di2015NewLineDi2015NewLine    k.Add("B", "Brown");Di2015NewLine    k.Add("G", "Green");Di2015NewLineDi2015NewLine    Console.WriteLine(k[0]);    // Writes BrownDi2015NewLine    Console.WriteLine(k["G"]);  // Writes GreenDi2015NewLine
298329Di2015UniqueSeparator// Domain classesDi2015NewLinepublic class AnimalDi2015NewLine{Di2015NewLine    public virtual int Id { get; set; }Di2015NewLine    public virtual string Name { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Cat : AnimalDi2015NewLine{Di2015NewLine    public virtual int WhiskerLength { get; set; }Di2015NewLine    public virtual int ClawCount { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Dog : AnimalDi2015NewLine{Di2015NewLine    public virtual int TailWagRate { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine// Mapping fileDi2015NewLinepublic class AnimalMap : ClassMap<Animal>Di2015NewLine{Di2015NewLine    public AnimalMap()Di2015NewLine    {Di2015NewLine        Id(x => x.Id)Di2015NewLine            .WithUnsavedValue(0)Di2015NewLine            .GeneratedBy.Native();Di2015NewLineDi2015NewLine        Map(x => x.Name);Di2015NewLineDi2015NewLine        var catMap = JoinedSubClass<Cat>("CatId", sm => sm.Map(x => x.Id));Di2015NewLineDi2015NewLine        catMap.Map(x => x.WhiskerLength)Di2015NewLine            .CanNotBeNull();Di2015NewLine        catMap.Map(x => x.ClawCount)Di2015NewLine            .CanNotBeNull();Di2015NewLineDi2015NewLine        JoinedSubClass<Dog>("DogId", sm => sm.Map(x => x.Id))Di2015NewLine            .Map(x => x.TailWagRate)Di2015NewLine                .CanNotBeNull();Di2015NewLine    }Di2015NewLine}Di2015NewLine
298379Di2015UniqueSeparatorusing System.Net;Di2015NewLineusing System.Net.Mail;Di2015NewLineDi2015NewLineDi2015NewLineSmtpClient smtpClient = new SmtpClient();Di2015NewLineNetworkCredential basicCredential = Di2015NewLine    new NetworkCredential("username", "password"); Di2015NewLineMailMessage message = new MailMessage(); Di2015NewLineMailAddress fromAddress = new MailAddress("from@yourdomain.com"); Di2015NewLineDi2015NewLinesmtpClient.Host = "mail.mydomain.com";Di2015NewLinesmtpClient.UseDefaultCredentials = false;Di2015NewLinesmtpClient.Credentials = basicCredential;Di2015NewLineDi2015NewLinemessage.From = fromAddress;Di2015NewLinemessage.Subject = "your subject";Di2015NewLine//Set IsBodyHtml to true means you can send HTML email.Di2015NewLinemessage.IsBodyHtml = true;Di2015NewLinemessage.Body = "<h1>your message body</h1>";Di2015NewLinemessage.To.Add("to@anydomain.com"); Di2015NewLineDi2015NewLinetryDi2015NewLine{Di2015NewLine    smtpClient.Send(message);Di2015NewLine}Di2015NewLinecatch(Exception ex)Di2015NewLine{Di2015NewLine    //Error, could not send the messageDi2015NewLine    Response.Write(ex.Message);Di2015NewLine}Di2015NewLine
298383Di2015UniqueSeparatorreturn View ("ShowCat", <TYPED_DATA_SET_OR_OTHER_MODEL>);Di2015NewLine
298710Di2015UniqueSeparator    <ListBox ItemsSource="{Binding}">Di2015NewLine        <ListBox.ItemTemplate>Di2015NewLine            <DataTemplate>Di2015NewLine                <Grid>Di2015NewLine                    <Grid.RowDefinitions>Di2015NewLine                        <RowDefinition></RowDefinition>Di2015NewLine                        <RowDefinition></RowDefinition>Di2015NewLine                    </Grid.RowDefinitions>Di2015NewLineDi2015NewLine                    <Grid Grid.Row="0" Height="20" >Di2015NewLine                        <TextBlock Text="Not Selected"></TextBlock>Di2015NewLine                    </Grid>Di2015NewLine                    <Grid x:Name="selectedOnlyGrid" Grid.Row="1" Visibility="Collapsed">Di2015NewLine                        <TextBlock Text="Selected"></TextBlock>Di2015NewLine                    </Grid>Di2015NewLineDi2015NewLine                </Grid>Di2015NewLineDi2015NewLine                <DataTemplate.Triggers>Di2015NewLine                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}, AncestorLevel=1}, Path=IsSelected}" Value="True">Di2015NewLine                        <Setter Property="Visibility" Value="Visible" TargetName="selectedOnlyGrid" />Di2015NewLine                    </DataTrigger>Di2015NewLine                </DataTemplate.Triggers>Di2015NewLine            </DataTemplate>Di2015NewLine        </ListBox.ItemTemplate>Di2015NewLine    </ListBox>Di2015NewLine
299120Di2015UniqueSeparatorTypeSwitch.Do(Di2015NewLine    sender,Di2015NewLine    TypeSwitch.Case<Button>(() => textBox1.Text = "Hit a Button"),Di2015NewLine    TypeSwitch.Case<CheckBox>(x => textBox1.Text = "Checkbox is " + x.Checked),Di2015NewLine    TypeSwitch.Default(() => textBox1.Text = "Not sure what is hovered over"));Di2015NewLine
299120Di2015UniqueSeparatorstatic class TypeSwitch {Di2015NewLine    public class CaseInfo {Di2015NewLine        public bool IsDefault { get; set; }Di2015NewLine        public Type Target { get; set; }Di2015NewLine        public Action<object> Action { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void Do(object source, params CaseInfo[] cases) {Di2015NewLine        var type = source.GetType();Di2015NewLine        foreach (var entry in cases) {Di2015NewLine            if (entry.IsDefault || entry.Target.IsAssignableFrom(type)) {Di2015NewLine                entry.Action(source);Di2015NewLine                break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static CaseInfo Case<T>(Action action) {Di2015NewLine        return new CaseInfo() {Di2015NewLine            Action = x => action(),Di2015NewLine            Target = typeof(T)Di2015NewLine        };Di2015NewLine    }Di2015NewLineDi2015NewLine    public static CaseInfo Case<T>(Action<T> action) {Di2015NewLine        return new CaseInfo() {Di2015NewLine            Action = (x) => action((T)x),Di2015NewLine            Target = typeof(T)Di2015NewLine        };Di2015NewLine    }Di2015NewLineDi2015NewLine    public static CaseInfo Default(Action action) {Di2015NewLine        return new CaseInfo() {Di2015NewLine            Action = x => action(),Di2015NewLine            IsDefault = trueDi2015NewLine        };Di2015NewLine    }Di2015NewLine
299143Di2015UniqueSeparatorint height2 = (int)Math.Round(width2 * (height1 / (float)width1));Di2015NewLine
299228Di2015UniqueSeparator//set up the datatableDi2015NewLineDataTable dt = new DataTable("parms");Di2015NewLinedt.Columns.Add("ParmName",typeof(string));Di2015NewLinedt.Columns.Add("ParmValue",typeof(string));Di2015NewLine//bind to a gui objectDi2015NewLinemyDataGridView.DataSource = dt;Di2015NewLineDi2015NewLine//do this after each sproc callDi2015NewLineforeach (SqlParameter parm in cmd.Parameters)Di2015NewLine{Di2015NewLine    if (parm.Direction == ParameterDirection.Output)Di2015NewLine    {Di2015NewLine        //do something with parm.ValueDi2015NewLine        dt.Rows.Add(new object [] { parm.ParameterName, Di2015NewLine            Convert.ToString(parm.Value) } );Di2015NewLine    }Di2015NewLine}Di2015NewLine
299273Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        //try the five second method with a 6 second timeoutDi2015NewLine        CallWithTimeout(FiveSecondMethod, 6000);Di2015NewLineDi2015NewLine        //try the five second method with a 4 second timeoutDi2015NewLine        //this will throw a timeout exceptionDi2015NewLine        CallWithTimeout(FiveSecondMethod, 4000);Di2015NewLine    }Di2015NewLineDi2015NewLine    static void FiveSecondMethod()Di2015NewLine    {Di2015NewLine        Thread.Sleep(5000);Di2015NewLine    }Di2015NewLine
299273Di2015UniqueSeparator    static void CallWithTimeout(Action action, int timeoutMilliseconds)Di2015NewLine    {Di2015NewLine        Thread threadToKill = null;Di2015NewLine        Action wrappedAction = () =>Di2015NewLine        {Di2015NewLine            threadToKill = Thread.CurrentThread;Di2015NewLine            action();Di2015NewLine        };Di2015NewLineDi2015NewLine        IAsyncResult result = wrappedAction.BeginInvoke(null, null);Di2015NewLine        if (result.AsyncWaitHandle.WaitOne(timeoutMilliseconds))Di2015NewLine        {Di2015NewLine            wrappedAction.EndInvoke(result);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            threadToKill.Abort();Di2015NewLine            throw new TimeoutException();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
299406Di2015UniqueSeparatorlet divmod n m = n / m, n % m    Di2015NewLineDi2015NewLinelet units = [Di2015NewLine    ("Centuries", TimeSpan.TicksPerDay * 365L * 100L );Di2015NewLine    ("Years", TimeSpan.TicksPerDay * 365L);Di2015NewLine    ("Weeks", TimeSpan.TicksPerDay * 7L);Di2015NewLine    ("Days", TimeSpan.TicksPerDay)Di2015NewLine]Di2015NewLineDi2015NewLinelet duration days =Di2015NewLine    let rec duration' ticks units acc =Di2015NewLine        match units withDi2015NewLine        | [] -> accDi2015NewLine        | (u::us) ->Di2015NewLine            let (wholeUnits, ticksRemaining) = divmod ticks (snd u)Di2015NewLine            duration' ticksRemaining us (((fst u), wholeUnits) :: acc)Di2015NewLine    duration' (TimeSpan.FromDays(float days).Ticks) units []Di2015NewLine
299522Di2015UniqueSeparatoreventAggregator.GetEvent<MainWindowShowEvent>().Publish(false);Di2015NewLine
299522Di2015UniqueSeparatoreventAggregator.GetEvent<MainWindowShowEvent>().Subscribe(b => View.Show(b) );Di2015NewLine
299526Di2015UniqueSeparatorExtensionAttribute
299526Di2015UniqueSeparatorExtensionAttribute
299526Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Runtime.CompilerServices;Di2015NewLineusing System.Reflection;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLinepublic static class FirstExtensionsDi2015NewLine{Di2015NewLine    public static void Foo(this string x) {}Di2015NewLine    public static void Bar(string x) {} // Not an ext. methodDi2015NewLine    public static void Baz(this int x) {} // Not on stringDi2015NewLine}Di2015NewLineDi2015NewLinepublic static class SecondExtensionsDi2015NewLine{Di2015NewLine    public static void Quux(this string x) {}Di2015NewLine}Di2015NewLineDi2015NewLinepublic class TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Assembly thisAssembly = typeof(Test).Assembly;Di2015NewLine        foreach (MethodInfo method in GetExtensionMethods(thisAssembly,Di2015NewLine            typeof(string)))Di2015NewLine        {Di2015NewLine            Console.WriteLine(method);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    static IEnumerable<MethodInfo> GetExtensionMethods(Assembly assembly,Di2015NewLine        Type extendedType)Di2015NewLine    {Di2015NewLine        var query = from type in assembly.GetTypes()Di2015NewLine                    where type.IsSealed && !type.IsGenericType && !type.IsNestedDi2015NewLine                    from method in type.GetMethods(BindingFlags.StaticDi2015NewLine                        | BindingFlags.Public | BindingFlags.NonPublic)Di2015NewLine                    where method.IsDefined(typeof(ExtensionAttribute), false)Di2015NewLine                    where method.GetParameters()[0].ParameterType == extendedTypeDi2015NewLine                    select method;Di2015NewLine        return query;Di2015NewLine    }Di2015NewLine}Di2015NewLine
299878Di2015UniqueSeparatorpublic class DoubleLookup<TKey, TValue>Di2015NewLine{Di2015NewLine  private IDictionary<TKey, TValue> keys;Di2015NewLine  private IDictionary<TValue, TKey> values;Di2015NewLineDi2015NewLine  //stuff...Di2015NewLineDi2015NewLine  public void Add(TKey key, TValue value)Di2015NewLine  {Di2015NewLine    this.keys.Add(key, value);Di2015NewLine    this.values.Add(value, key);Di2015NewLine  }Di2015NewLineDi2015NewLine  public TKey GetKeyFromValue(TValue value)Di2015NewLine  {Di2015NewLine    return this.values[value];Di2015NewLine  }Di2015NewLineDi2015NewLine  public TValue GetValueFromKey(TKey key)Di2015NewLine  {Di2015NewLine    return this.keys[key];Di2015NewLine  }Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLine
299887Di2015UniqueSeparatorstring xmlInput = ...;Di2015NewLineXDocument myDoc = XDocument.Parse(xmlInput);Di2015NewLine//Di2015NewLineList<XElement> someElements = myDoc.Descendants("a").ToList();Di2015NewLinesomeElements.ForEach(x => x.Value = "Foo");Di2015NewLine//Di2015NewLineConsole.WriteLine(myDoc);Di2015NewLine
299887Di2015UniqueSeparatorstring xmlInput = //...Di2015NewLineXDocument myDoc = XDocument.Parse(xmlInput);Di2015NewLine//Di2015NewLineList<XText> someText =Di2015NewLine  myDoc.Descendants()Di2015NewLine  .Nodes()Di2015NewLine  .OfType<XText>()Di2015NewLine  .Where(x => x.Value.StartsWith("{") && x.Value.EndsWith("}"))Di2015NewLine  .ToList();Di2015NewLine//Di2015NewLineList<XAttribute> someAttributes =Di2015NewLine  myDoc.Descendants()Di2015NewLine  .Attributes()Di2015NewLine  .Where(x => x.Value.StartsWith("{") && x.Value.EndsWith("}"))Di2015NewLine  .ToList();Di2015NewLine//Di2015NewLinesomeText.ForEach(x => x.Value = "Foo");Di2015NewLinesomeAttributes.ForEach(x => x.Value = "Bar");Di2015NewLine//Di2015NewLineConsole.WriteLine(myDoc);Di2015NewLine
299887Di2015UniqueSeparatorList<XElement> e = myDoc.Descendants("a").ToList();Di2015NewLinee.Where(x => x.Attribute("name").Value == "username").Single().Value = "abc";Di2015NewLinee.Where(x => x.Attribute("name").Value == "password").Single().Value = "abc";Di2015NewLine
299966Di2015UniqueSeparator<customtag>(.+?)</customtag>
299968Di2015UniqueSeparatorprivate void setListItem(int row, int column, int value) {Di2015NewLine  ListViewItem.ListViewSubItem item = listView1.Items[row].SubItems[column];Di2015NewLine  item.Tag = value;Di2015NewLine  item.Text = value.ToString();Di2015NewLine}Di2015NewLineprivate int getListItem(int row, int column) {Di2015NewLine  return (int)listView1.Items[row].SubItems[column].Tag;Di2015NewLine}Di2015NewLine
299983Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.Runtime.InteropServices;Di2015NewLineDi2015NewLinepublic class FixedTabControl : TabControl {Di2015NewLine  [DllImportAttribute("uxtheme.dll")]Di2015NewLine  private static extern int SetWindowTheme(IntPtr hWnd, string appname, string idlist);Di2015NewLineDi2015NewLine  protected override void OnHandleCreated(EventArgs e) {Di2015NewLine    SetWindowTheme(this.Handle, "", "");Di2015NewLine    base.OnHandleCreated(e);Di2015NewLine  }Di2015NewLine}Di2015NewLine
300008Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{    Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        string x = "hello";Di2015NewLine        string y = string.Copy(x);Di2015NewLineDi2015NewLine        Console.WriteLine(x==y); // Overload usedDi2015NewLine        Compare(x, y);Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Compare<T>(T x, T y) where T : classDi2015NewLine    {Di2015NewLine        Console.WriteLine(x == y); // Reference comparisonDi2015NewLine    }Di2015NewLine}Di2015NewLine
300207Di2015UniqueSeparatorpublic static BaseClass Create<T>() where T : BaseClass, new()Di2015NewLine{Di2015NewLine    T newVar = new T();Di2015NewLine    // Do something with newVarDi2015NewLine    return T;Di2015NewLine}Di2015NewLine
300207Di2015UniqueSeparatorDerivedClass d = BaseClass.Create<DerivedClass>();Di2015NewLine
300345Di2015UniqueSeparatorprotected override bool OnBubbleEvent(object source, EventArgs e)Di2015NewLine{Di2015NewLine    if (e is CommandEventArgs)Di2015NewLine    {Di2015NewLine        RepeaterCommandEventArgs args = new RepeaterCommandEventArgs(this, source, (CommandEventArgs) e);Di2015NewLine        base.RaiseBubbleEvent(this, args);Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine    return false;Di2015NewLine}Di2015NewLine
300408Di2015UniqueSeparatorDesignerAttribute
300408Di2015UniqueSeparatorControl
300408Di2015UniqueSeparatorComponent
300408Di2015UniqueSeparatorForm
300408Di2015UniqueSeparatorDesignerAttribute
300408Di2015UniqueSeparatorFormDocumentDesigner
300408Di2015UniqueSeparatorFormDocumentDesigner
300408Di2015UniqueSeparatorComponentDesigner
300418Di2015UniqueSeparatorentry.Element(xmlns + "author").Element(xmlns + "name").ValueDi2015NewLine
300466Di2015UniqueSeparator   var txt = new TextBox();Di2015NewLine   txt.ID = "MyID"+Number;Di2015NewLine   Controls.Add ( txt );Di2015NewLine   chkBox.Attributes.Add("onClick", "EnableTxtBox('" +txt.ClientID + "');");Di2015NewLine
300511Di2015UniqueSeparatorstring x = "hello";Di2015NewLine
300511Di2015UniqueSeparatorx
300511Di2015UniqueSeparatorx
300511Di2015UniqueSeparatorx
300689Di2015UniqueSeparatorpublic static char FindFirstNotAny(this string value, params char[] charset)Di2015NewLine{Di2015NewLine    return value.TrimStart(charset)[0];Di2015NewLine}Di2015NewLine
300733Di2015UniqueSeparatorbool valid = false;Di2015NewLineusing (DirectoryEntry entry = new DirectoryEntry( results[0].Path, userId, password ))Di2015NewLine{Di2015NewLine     tryDi2015NewLine     {Di2015NewLine         if (entry.Guid != null)Di2015NewLine         {Di2015NewLine            valid = true;Di2015NewLine         }Di2015NewLine     }Di2015NewLine     catch (NullReferenceException) {}Di2015NewLine}Di2015NewLine
300733Di2015UniqueSeparatorusing
300932Di2015UniqueSeparatorfrom yy in Tags_LookupsDi2015NewLinewhere (from xx in Tags_LookupsDi2015NewLine       where xx.Game_ID == new Guid("4962d645-711c-4db8-a7ce-ae9b36dd730c")Di2015NewLine       select xx.Tag_ID).ToList()Di2015NewLine                        .Contains( yy.Tag_ID )Di2015NewLineselect yyDi2015NewLine
301341Di2015UniqueSeparatorprotected override void OnShown(EventArgs e)Di2015NewLine{Di2015NewLine    base.OnShown(e);Di2015NewLine    this.Capture = true;Di2015NewLine}Di2015NewLineDi2015NewLineprotected override void OnCaptureChanged(EventArgs e)Di2015NewLine{Di2015NewLine    if (!this.Capture)Di2015NewLine    {Di2015NewLine        if (!this.RectangleToScreen(this.DisplayRectangle).Contains(Cursor.Position))Di2015NewLine        {Di2015NewLine            this.Close();Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            this.Capture = true;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    base.OnCaptureChanged(e);Di2015NewLine}Di2015NewLine
301360Di2015UniqueSeparatorICustomTypeDescriptor
301360Di2015UniqueSeparatorTypeDescriptionProvider
301360Di2015UniqueSeparatorPropertyDescriptor
301398Di2015UniqueSeparatorgiven folder /a/bDi2015NewLinelet /a/b/c point to /aDi2015NewLinethenDi2015NewLine/a/b/c/b/c/b becomes valid folder locations.Di2015NewLine
301398Di2015UniqueSeparatorprivate void FindFilesRec(Di2015NewLine    string newRootFolder,Di2015NewLine    Predicate<FileInfo> fileMustBeProcessedP,Di2015NewLine    Action<FileInfo> processFile)Di2015NewLine{Di2015NewLine    var rootDir = new DirectoryInfo(newRootFolder);Di2015NewLine    foreach (var file in from f in rootDir.GetFiles()Di2015NewLine                         where fileMustBeProcessedP(f)Di2015NewLine                         select f)Di2015NewLine    {Di2015NewLine        processFile(file);Di2015NewLine    }Di2015NewLineDi2015NewLine    foreach (var dir in from d in rootDir.GetDirectories()Di2015NewLine                        where (d.Attributes & FileAttributes.ReparsePoint) != FileAttributes.ReparsePointDi2015NewLine                        select d)Di2015NewLine    {Di2015NewLine        FindFilesRec(Di2015NewLine            dir.FullName,Di2015NewLine            fileMustBeProcessedP,Di2015NewLine            processFile);Di2015NewLine    }Di2015NewLine}Di2015NewLine
301440Di2015UniqueSeparatorvoid PopulateNewsItems (int? pageNo)Di2015NewLine{Di2015NewLine    var model = ModelFactory.GetNewsModel ();Di2015NewLine    var searchResults = model.GetNewsItems ();Di2015NewLineDi2015NewLine    var dataSource = new PagedDataSource ();Di2015NewLineDi2015NewLine    // CHANGED THE ARRAY OF NEWSITEMS INTO A GENERIC LIST OF NEWSITEMS.Di2015NewLine    dataSource.DataSource = new List<NewsItem> (searchResults);Di2015NewLine    dataSource.AllowPaging = true;Di2015NewLineDi2015NewLine    var pageSizeFromConfig = ConfigurationManager.AppSettings["NewsItemsPageCount"];Di2015NewLine    var pageSize = 10;Di2015NewLineDi2015NewLine    int.TryParse (pageSizeFromConfig, out pageSize);Di2015NewLineDi2015NewLine    dataSource.PageSize = pageSize;Di2015NewLine    dataSource.CurrentPageIndex = pageNo ?? 0;Di2015NewLineDi2015NewLine    PagingPanel.Controls.Clear ();Di2015NewLine    for (var i = 0; i < dataSource.PageCount; i++)Di2015NewLine    {Di2015NewLine        var linkButton = new LinkButton ();Di2015NewLine        linkButton.CommandArgument = i.ToString ();Di2015NewLine        linkButton.CommandName = "PageNo";Di2015NewLine        linkButton.Command += NavigationCommand;Di2015NewLine        linkButton.ID = string.Format ("PageNo{0}LinkButton", i);Di2015NewLine        if (pageNo == i || (pageNo == null && i == 0))Di2015NewLine        {Di2015NewLine            linkButton.Enabled = false;Di2015NewLine            linkButton.CssClass = "SelectedPageLink";Di2015NewLine        }Di2015NewLineDi2015NewLine        linkButton.Text = (i + 1).ToString ();Di2015NewLineDi2015NewLine        PagingPanel.Controls.Add (linkButton);Di2015NewLine        if (i < (dataSource.PageCount - 1))Di2015NewLine            PagingPanel.Controls.Add (new LiteralControl ("|"));Di2015NewLine    }Di2015NewLineDi2015NewLine    NewsRepeater.DataSource = dataSource;Di2015NewLine    NewsRepeater.DataBind ();Di2015NewLine}Di2015NewLineDi2015NewLinevoid NavigationCommand (object sender, CommandEventArgs e)Di2015NewLine{Di2015NewLine    PopulateNewsItems (int.Parse ((string)e.CommandArgument));Di2015NewLine}Di2015NewLine
301444Di2015UniqueSeparatorClass1: [OnDeserializing]Di2015NewLineClass2: [OnDeserializing]Di2015NewLineClass2: [OnDeserialized]Di2015NewLineClass1: [OnDeserialized]Di2015NewLineClass1: IDeserializationCallback.OnDeserializationDi2015NewLineClass2: IDeserializationCallback.OnDeserializationDi2015NewLine
301529Di2015UniqueSeparatorImage.FromStream
301529Di2015UniqueSeparatorImage.RawFormat
301775Di2015UniqueSeparatorsn -k new.snkDi2015NewLinetlbimp shdocvw.dll /out:axshdocvw.dll /keyfile:new.snkDi2015NewLine
301775Di2015UniqueSeparatorWebBrowser
301957Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        var propName = Nameof<SampleClass>.Property(e => e.Name);Di2015NewLineDi2015NewLine        Console.WriteLine(propName);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Nameof<T>Di2015NewLine{Di2015NewLine    public static string Property<TProp>(Expression<Func<T, TProp>> expression)Di2015NewLine    {Di2015NewLine        var body = expression.Body as MemberExpression;Di2015NewLine        if(body == null)Di2015NewLine            throw new ArgumentException("'expression' should be a member expression");Di2015NewLine        return body.Member.Name;Di2015NewLine    }Di2015NewLine}Di2015NewLine
301977Di2015UniqueSeparatorMonitor.Wait/Pulse/PulseAll
301977Di2015UniqueSeparatorMonitor.Wait
302023Di2015UniqueSeparator DELETE * FROM tblSignIns Di2015NewLine WHERE LastActivityTime < DATEADD("minute", -10, GETDATE());Di2015NewLine
302129Di2015UniqueSeparatordefault(T)
302129Di2015UniqueSeparatornull
302129Di2015UniqueSeparatorwhere T : class
302172Di2015UniqueSeparatorGetType()
302172Di2015UniqueSeparatorpublic abstract class Vehicle Di2015NewLine{Di2015NewLine    public void Go()Di2015NewLine    {Di2015NewLine        Log("vehicle {0} fired", GetType().Name);Di2015NewLine        GoImpl();Di2015NewLine    }Di2015NewLineDi2015NewLine    protected abstract void GoImpl();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Car : VehicleDi2015NewLine{Di2015NewLine    protected override void GoImpl()Di2015NewLine    {Di2015NewLine        // do somethingDi2015NewLine    }Di2015NewLine}Di2015NewLine
302492Di2015UniqueSeparatorGetGetMethod
302492Di2015UniqueSeparatorGetSetMethod
302865Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e) {Di2015NewLine  this.UseWaitCursor = true;Di2015NewLine  System.Threading.Thread.Sleep(3000);Di2015NewLine  this.UseWaitCursor = false;Di2015NewLine}Di2015NewLine
302865Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinepublic class HourGlass : IDisposable {Di2015NewLine  public HourGlass() {Di2015NewLine    Enabled = true;Di2015NewLine  }Di2015NewLine  public void Dispose() {Di2015NewLine    Enabled = false;Di2015NewLine  }Di2015NewLine  public static bool Enabled {Di2015NewLine    get { return Application.UseWaitCursor; }Di2015NewLine    set {Di2015NewLine      if (value == Application.UseWaitCursor) return;Di2015NewLine      Application.UseWaitCursor = value;Di2015NewLine      Form f = Form.ActiveForm;Di2015NewLine      if (f != null && f.Handle != IntPtr.Zero)   // Send WM_SETCURSORDi2015NewLine        SendMessage(f.Handle, 0x20, f.Handle, (IntPtr)1);Di2015NewLine    }Di2015NewLine  }Di2015NewLine  [System.Runtime.InteropServices.DllImport("user32.dll")]Di2015NewLine  private static extern IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wp, IntPtr lp);Di2015NewLine}Di2015NewLine
302865Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e) {Di2015NewLine  using (new HourGlass()) {Di2015NewLine    System.Threading.Thread.Sleep(3000);Di2015NewLine  }Di2015NewLine}Di2015NewLine
302891Di2015UniqueSeparatorStringWriter outStream = new StringWriter();Di2015NewLineXmlSerializer s = new XmlSerializer(typeof(List<List<string>>));Di2015NewLines.Serialize(outStream, myObj);Di2015NewLineproperties.AfterProperties["myNoteField"] = outStream.ToString();Di2015NewLine
303036Di2015UniqueSeparatorWebRequest wr = WebRequest.Create("http://localhost:49268/dostuff.aspx");Di2015NewLinewr.Timeout = 3500;Di2015NewLineDi2015NewLinetryDi2015NewLine{Di2015NewLine    HttpWebResponse response = (HttpWebResponse)wr.GetResponse();Di2015NewLine}Di2015NewLinecatch (Exception ex)Di2015NewLine{Di2015NewLine    //We know its going to fail but that dosent matter!!Di2015NewLine}Di2015NewLine
303220Di2015UniqueSeparatorpublic void Add(Output output)Di2015NewLine{Di2015NewLine    OutputCollectionItem oci = new OutputCollectionItem();Di2015NewLine    oci.item = output;Di2015NewLine    this.OutputCollection.Add(oci);Di2015NewLine}Di2015NewLine
303220Di2015UniqueSeparatorpublic void Add(Output output)Di2015NewLine{Di2015NewLine    OutputCollectionItem oci = new OutputCollectionItem();Di2015NewLine    oci.itemID = output.itemID;Di2015NewLine    this.OutputCollection.Add(oci);Di2015NewLine}Di2015NewLine
303283Di2015UniqueSeparator            List<Person> people = new List<Person>();Di2015NewLine            people.Add(new Person { Age = 25, FirstName = "Alex", LastName = "Johnson" });Di2015NewLine            people.Add(new Person { Age = 23, FirstName = "Jack", LastName = "Jones" });Di2015NewLine            people.Add(new Person { Age = 35, FirstName = "Mike", LastName = "Williams" });Di2015NewLine            people.Add(new Person { Age = 25, FirstName = "Gill", LastName = "JAckson" });Di2015NewLine            this.listBox1.DataSource = people;Di2015NewLine            this.listBox1.DisplayMember = "FirstName";Di2015NewLine            this.listBox1.ValueMember = "Age";Di2015NewLine
303294Di2015UniqueSeparatorSystem.Diagnostics.Debugger.Break()
303321Di2015UniqueSeparatorpublic static T GetNullable<T>(this IDataRecord dr, int ordinal)Di2015NewLine{Di2015NewLine    return dr.IsDBNull(ordinal) ? default(T) : (T) dr.GetValue(ordinal);Di2015NewLine}Di2015NewLine
303340Di2015UniqueSeparatorNullable<T>
303340Di2015UniqueSeparatorNullable<T>
303340Di2015UniqueSeparatorint
303340Di2015UniqueSeparatorint?
303340Di2015UniqueSeparatordecimal
303340Di2015UniqueSeparatorDateTime
303340Di2015UniqueSeparator&&
303340Di2015UniqueSeparator||
303340Di2015UniqueSeparatorbool someFlag = Method1() && Method2();Di2015NewLine
303340Di2015UniqueSeparatorMethod1()
303340Di2015UniqueSeparatorMethod2()
303340Di2015UniqueSeparatorMethod2()
303752Di2015UniqueSeparatorvar props = typeof(Foo)Di2015NewLine            .GetProperties(BindingFlags.Public | BindingFlags.Instance);Di2015NewLineDi2015NewLineforeach (PropertyInfo p in props)Di2015NewLine{Di2015NewLine     // p.Name gives name of propertyDi2015NewLine}Di2015NewLine
303856Di2015UniqueSeparator<?phpDi2015NewLineecho "Php max int: ".PHP_INT_MAX."\\n";Di2015NewLineecho "The Val: ".(-1580033017 + -2072974554)."\\n";Di2015NewLineecho "Intval of the val: ".intval(-3653007571)."\\n";Di2015NewLineecho "And 0xffffffff of the val: ".(-3653007571 & 0xffffffff)."\\n";Di2015NewLine?>Di2015NewLine
303856Di2015UniqueSeparatorPhp max int: 2147483647Di2015NewLineThe Val: -3653007571Di2015NewLineIntval of the val: -2147483648Di2015NewLineAnd of the val: -2147483648Di2015NewLine
303856Di2015UniqueSeparatorPhp max int: 2147483647Di2015NewLineThe Val: -3653007571Di2015NewLineIntval of the val: -641959725Di2015NewLineAnd of the val: -641959725Di2015NewLine
303856Di2015UniqueSeparatorPhp max int: 2147483647Di2015NewLineThe Val: -3653007571Di2015NewLineIntval of the val: -3653007571Di2015NewLineAnd of the val: -641959725Di2015NewLine
303856Di2015UniqueSeparatorfunction thirtyTwoBitIntval($value)Di2015NewLine{Di2015NewLine    if ($value < -2147483648)Di2015NewLine    {Di2015NewLine        return -(-($value) & 0xffffffff);Di2015NewLine    }Di2015NewLine    elseif ($value > 2147483647)Di2015NewLine    {Di2015NewLine        return ($value & 0xffffffff);Di2015NewLine    }Di2015NewLine    return $value;Di2015NewLine}Di2015NewLine
303936Di2015UniqueSeparatorfor( int i = 0; i < _numOrders; i++ )Di2015NewLine{Di2015NewLine    OrderTicket ticket = new OrderTicket(... );Di2015NewLine    ticket.CacheId = Guid.NewGuid();Di2015NewLine    Submit( ticket );  // note that this simply makes a remoting callDi2015NewLine}Di2015NewLine
303936Di2015UniqueSeparatorticket.CacheId = new Guid("00000000-0000-0000-0000-" + Di2015NewLine     string.Format("{0:000000000000}", i));Di2015NewLine
304368Di2015UniqueSeparator$_POST
304368Di2015UniqueSeparatorstring postData = "firstName=" + HttpUtility.UrlEncode(p.firstName) +Di2015NewLine                  "&lastName=" + HttpUtility.UrlEncode(p.lastName) +                    Di2015NewLine                  "&email=" + HttpUtility.UrlEncode(p.email) +Di2015NewLine                  "&deviceUUID=" + HttpUtility.UrlEncode(p.deviceUUID);Di2015NewLinebyte[] byteArray = Encoding.ASCII.GetBytes(postData);Di2015NewLine// etc...Di2015NewLine
304368Di2015UniqueSeparator$_POST
304368Di2015UniqueSeparatorstring postData = "json=" + HttpUtility.UrlEncode(serializer.Serialize(p) );Di2015NewLine
304368Di2015UniqueSeparator$json_array = json_decode($_POST['json']);Di2015NewLine
304376Di2015UniqueSeparator    static public IEnumerable<IVsProject> LoadedProjectsDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            IVsSolution solution = _serviceProvider.GetService(typeof(SVsSolution)) as IVsSolution;Di2015NewLine            IEnumHierarchies enumerator = null;Di2015NewLine            Guid guid = Guid.Empty;Di2015NewLine            solution.GetProjectEnum((uint)__VSENUMPROJFLAGS.EPF_LOADEDINSOLUTION, ref guid, out enumerator);Di2015NewLine            IVsHierarchy[] hierarchy = new IVsHierarchy[1] { null };Di2015NewLine            uint fetched = 0;Di2015NewLine            for (enumerator.Reset(); enumerator.Next(1, hierarchy, out fetched) == VSConstants.S_OK && fetched == 1; /*nothing*/)Di2015NewLine            {Di2015NewLine                yield return (IVsProject)hierarchy[0];Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
304387Di2015UniqueSeparatorforeach (string list in lists)Di2015NewLine{Di2015NewLine    string tmp = list;Di2015NewLine    Button btn = new Button();Di2015NewLine    btn.Click += new EventHandler(delegate { MessageBox.Show(tmp); });Di2015NewLine}Di2015NewLine
304387Di2015UniqueSeparatorforeach
304387Di2015UniqueSeparatorstring[] names = { "Fred", "Barney", "Betty", "Wilma" };Di2015NewLineusing (Form form = new Form())Di2015NewLine{Di2015NewLine    foreach (string name in names)Di2015NewLine    {Di2015NewLine        Button btn = new Button();Di2015NewLine        btn.Text = name;Di2015NewLine        btn.Click += delegateDi2015NewLine        {Di2015NewLine            MessageBox.Show(form, name);Di2015NewLine        };Di2015NewLine        btn.Dock = DockStyle.Top;Di2015NewLine        form.Controls.Add(btn);Di2015NewLine    }Di2015NewLine    Application.Run(form);Di2015NewLine}Di2015NewLine
304387Di2015UniqueSeparatorforeach (V v in x)
304387Di2015UniqueSeparatorembedded-statement
304387Di2015UniqueSeparator{Di2015NewLine    E e = ((C)(x)).GetEnumerator();Di2015NewLine    try {Di2015NewLine        V v;Di2015NewLine         while (e.MoveNext()) {Di2015NewLine            v = (V)(T)e.Current;Di2015NewLine             embedded-statementDi2015NewLine        }Di2015NewLine    }Di2015NewLine    finally {Di2015NewLine        â¦ // Dispose eDi2015NewLine    }Di2015NewLine}Di2015NewLine
304387Di2015UniqueSeparatorv
304387Di2015UniqueSeparatorlist
304387Di2015UniqueSeparatorv
304387Di2015UniqueSeparator{Di2015NewLine    E e = ((C)(x)).GetEnumerator();Di2015NewLine    try {Di2015NewLine        while (e.MoveNext()) {Di2015NewLine            V v = (V)(T)e.Current;Di2015NewLine            embedded-statementDi2015NewLine        }Di2015NewLine    }Di2015NewLine    finally {Di2015NewLine        â¦ // Dispose eDi2015NewLine    }Di2015NewLine}Di2015NewLine
304387Di2015UniqueSeparatorEventHandler foo = delegate {...code...};Di2015NewLineobj.SomeEvent += foo;Di2015NewLine...Di2015NewLineobj.SomeEvent -= foo;Di2015NewLine
304387Di2015UniqueSeparatorEventHandler bar = null; // necessary for "definite assignment"Di2015NewLinebar = delegate {Di2015NewLine  // ... codeDi2015NewLine  obj.SomeEvent -= bar;Di2015NewLine};Di2015NewLineobj.SomeEvent += bar;Di2015NewLine
304474Di2015UniqueSeparatorpublic class TableDi2015NewLine{Di2015NewLine   public Table(IMapInfo map)Di2015NewLine   {Di2015NewLine      _map = map;Di2015NewLine   }Di2015NewLineDi2015NewLine   public string NameDi2015NewLine   {Di2015NewLine      get Di2015NewLine      {Di2015NewLine        string value = _map.Eval("myexpression");Di2015NewLine        if (String.IsNullOrEmpty(value))Di2015NewLine        {Di2015NewLine            value = "none";Di2015NewLine        }Di2015NewLine        return value;Di2015NewLine      }Di2015NewLine   }Di2015NewLineDi2015NewLine   private IMapInfo _map;Di2015NewLine}Di2015NewLineDi2015NewLine[TestFixture]Di2015NewLinepublic class TableFixture // is this a pun?Di2015NewLine{Di2015NewLine   [Test]Di2015NewLine   public void CanHandleNullsFromCOM()Di2015NewLine   {Di2015NewLine       MockRepository mocks = new MockRepository(); // rhino mocks, btwDi2015NewLine       IMapInfo map = mocks.CreateMock<IMapInfo>();Di2015NewLineDi2015NewLine       using (mocks.Record())Di2015NewLine       {Di2015NewLine          Expect.Call(map.Eval("myexpression").Return(null);Di2015NewLine       }Di2015NewLineDi2015NewLine       using (mocks.PlayBack())Di2015NewLine       {Di2015NewLine          Table table = new Table(map);Di2015NewLine          Assert.AreEqual("none", table.Name, "We didn't handle nulls correctly.");Di2015NewLine       }Di2015NewLineDi2015NewLine       mocks.verify();Di2015NewLine   }Di2015NewLine}Di2015NewLine
304479Di2015UniqueSeparatorfor(int x = 1; x < files.length; x++)Di2015NewLine{Di2015NewLine     files[x]Di2015NewLine}Di2015NewLine
304479Di2015UniqueSeparatorusing (SqlConnection connection = new SqlConnection(conn_string))Di2015NewLine{Di2015NewLine    connection.Open();Di2015NewLine    using (SqlCommand cmd = new SqlCommand("SELECT * FROM MyTable", connection))Di2015NewLine    {Di2015NewLine         using (SqlDataReader dr = cmd.ExecuteReader())Di2015NewLine         {Di2015NewLine             return result;Di2015NewLine         }Di2015NewLine    }Di2015NewLine}Di2015NewLine
304681Di2015UniqueSeparatorc.Delete( this ); //this = windowDi2015NewLine// ...Di2015NewLinevoid business_Deleted(object sender, EventArgs e) {Di2015NewLine    bool isDeletedFromMe = false;Di2015NewLine    if ( e is DeletedEventArgs ) { isDeletedFromMe = object.ReferenceEquals( this, e.Author ); }Di2015NewLine    if ( false == isDeletedFromMe ) {Di2015NewLine        MessageBox.Show("Item has been deleted in another editor window.",Di2015NewLine            "...", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);Di2015NewLine        Close();Di2015NewLine    }Di2015NewLine}Di2015NewLine
304681Di2015UniqueSeparatorvoid business_Deleted(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if ( false == object.ReferenceEquals( sender, this.currentlyDeletingBusiness ) ) {Di2015NewLine        MessageBox.Show("Item has been deleted in another editor window.",Di2015NewLine            "...", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);Di2015NewLine    }Di2015NewLine    Close();Di2015NewLine}Di2015NewLineDi2015NewLineBusiness currentlyDeletingBusiness;Di2015NewLineprivate void deleteButton_Activate(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Business c = (Business)businessBindingSource.DataSource;Di2015NewLine    try {Di2015NewLine        this.currentlyDeletingBusiness = c;Di2015NewLine        c.Delete();Di2015NewLine    }Di2015NewLine    finally {Di2015NewLine        this.currentlyDeletingBusiness = null;Di2015NewLine    }Di2015NewLine}Di2015NewLine
304821Di2015UniqueSeparatorList<T>
304854Di2015UniqueSeparator    [Test]Di2015NewLine    public void CanGetSelectedItems()Di2015NewLine    {Di2015NewLine        // simple test to make sure that the SelectedIndicesDi2015NewLine        // property is updatedDi2015NewLine        using (var f = new DummyForm(listView))Di2015NewLine        {Di2015NewLine            f.Show();Di2015NewLineDi2015NewLine            listView.SelectedIndices.Add(0);Di2015NewLine            Assert.AreEqual(1, listView.SelectedIndices.Count);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private class DummyForm : FormDi2015NewLine    {Di2015NewLine        public DummyForm(ListView listView)Di2015NewLine        {Di2015NewLine            // Minimize and make it not appear in taskbar toDi2015NewLine            // avoid flicker etc when running the testsDi2015NewLine            this.WindowState = FormWindowState.Minimized;Di2015NewLine            this.ShowInTaskbar = false;Di2015NewLine            this.Controls.Add(listView);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
304860Di2015UniqueSeparatorSomeType result = default(SomeType); // for "definite assignment"Di2015NewLinetry {Di2015NewLine   // ...Di2015NewLine   return result;Di2015NewLine}Di2015NewLinefinally {Di2015NewLine    // inspect "result"Di2015NewLine}Di2015NewLine
305163Di2015UniqueSeparatorNullable<DateTime>
305163Di2015UniqueSeparatorDateTime?
305163Di2015UniqueSeparatornull
305163Di2015UniqueSeparatorDateTime
305163Di2015UniqueSeparatornull
305163Di2015UniqueSeparatorHasValue
305197Di2015UniqueSeparatorActivator
305197Di2015UniqueSeparatorActivator
305317Di2015UniqueSeparatorusing System.Threading;Di2015NewLineDi2015NewLinestring appSpecificGuid = "{007400FE-003D-00A5-AFFE-DA62E35CC1F5}";    Di2015NewLinebool exclusive;Di2015NewLineMutex m = new Mutex(true, appSpecificGuid, out exclusive);Di2015NewLineif (exclusive) {Di2015NewLine    // runDi2015NewLine} else {Di2015NewLine    // already runningDi2015NewLine}Di2015NewLine
305402Di2015UniqueSeparatorTask myCustomTask = new CustomTask();Di2015NewLinemyCustomTask.BuildEngine = this.BuildEngine;Di2015NewLinemyCustomTask.Execute();Di2015NewLine
305412Di2015UniqueSeparatorforeach
305412Di2015UniqueSeparatorobject
305412Di2015UniqueSeparatorforeach (object o in myList)Di2015NewLine{Di2015NewLine    // Not sure what you're actually trying to do in here...Di2015NewLine}Di2015NewLine
305412Di2015UniqueSeparatorToString
305412Di2015UniqueSeparatorvar strings = ((IEnumerable) result).Cast<object>.Select(x => x.ToString());Di2015NewLine
305412Di2015UniqueSeparatorstrings
305412Di2015UniqueSeparatorSequenceEqual
305596Di2015UniqueSeparatorPublic Function Import(dsnName As String, sourceTableName As String, targetTableName As String)Di2015NewLineâ if the table already existsm, delete it.Di2015NewLine   On Error GoTo CopyTableDi2015NewLine   DoCmd.DeleteObject acTable, targetTableNameDi2015NewLineCopyTable:Di2015NewLine   DoCmd.TransferDatabase _Di2015NewLine   acImport, _Di2015NewLine   "ODBC Database", _Di2015NewLine   "ODBC;DSN=" + dsnName, _Di2015NewLine   acTable, _Di2015NewLine   sourceTableName, _Di2015NewLine   targetTableNameDi2015NewLineEnd FunctionDi2015NewLine
305596Di2015UniqueSeparatorobject accessObject = null;Di2015NewLinetryDi2015NewLine{Di2015NewLine   accessObject = Activator.CreateInstance(Type.GetTypeFromProgID("Access.Application"));Di2015NewLineDi2015NewLine   accessObject.GetType().InvokeMember(Di2015NewLine      "OpenCurrentDatabase",Di2015NewLine      System.Reflection.BindingFlags.Default  System.Reflection.BindingFlags.InvokeMethod,Di2015NewLine      null,Di2015NewLine      accessObject,Di2015NewLine      new Object[] { "AccessDbase.mdb" });Di2015NewLineDi2015NewLine   accessObject.GetType().InvokeMember(Di2015NewLine      "Run",Di2015NewLine      System.Reflection.BindingFlags.Default  System.Reflection.BindingFlags.InvokeMethod,Di2015NewLine      null,Di2015NewLine      accessObject,Di2015NewLine      new Object[] { "Import", "DSN Name", "Source table name", "Target table name" });Di2015NewLineDi2015NewLine   accessObject.GetType().InvokeMember(Di2015NewLine      "CloseCurrentDatabase",Di2015NewLine      System.Reflection.BindingFlags.Default  System.Reflection.BindingFlags.InvokeMethod,Di2015NewLine      null,Di2015NewLine      accessObject,Di2015NewLine      null);Di2015NewLineDi2015NewLine   MessageBox.Show("Copy succeeded.");Di2015NewLine}Di2015NewLinecatch (Exception ex)Di2015NewLine{Di2015NewLine   string message = ex.Message;Di2015NewLine   while (ex.InnerException != null)Di2015NewLine   {Di2015NewLine      ex = ex.InnerException;Di2015NewLine      message += "\\r\\n----\\r\\n" + ex.Message;Di2015NewLine   }Di2015NewLine   MessageBox.Show(message);Di2015NewLine}Di2015NewLinefinallyDi2015NewLine{Di2015NewLine   if (accessObject != null)Di2015NewLine   {Di2015NewLine      System.Runtime.InteropServices.Marshal.ReleaseComObject(accessObject);Di2015NewLine      accessObject = null;Di2015NewLine   }Di2015NewLine}Di2015NewLine
305596Di2015UniqueSeparatorstrLinkFile = "C:\\Docs\\Link.mdb"Di2015NewLinestrAccessFile = "C:\\Docs\\LTD.mdb"Di2015NewLineDi2015NewLine'Create Link... 'Di2015NewLineSet cn = CreateObject("ADODB.Connection")Di2015NewLinecn.Open "Provider=Microsoft.Jet.OLEDB.4.0;" & _Di2015NewLine       "Data Source=" & strAccessFile & ";" & _Di2015NewLine       "Persist Security Info=False"Di2015NewLineDi2015NewLineSet adoCat = CreateObject("ADOX.Catalog")Di2015NewLineSet adoCat.ActiveConnection = cnDi2015NewLineDi2015NewLineSet adoTbl = CreateObject("ADOX.Table")Di2015NewLineDi2015NewLineSet adoTbl.ParentCatalog = adoCatDi2015NewLineadoTbl.Name = "LinkTable"Di2015NewLineDi2015NewLineadoTbl.properties("Jet OLEDB:Link Datasource") = strLinkFileDi2015NewLineadoTbl.properties("Jet OLEDB:Link Provider String") = "MS Access"Di2015NewLineadoTbl.properties("Jet OLEDB:Remote Table Name") = "Table1"Di2015NewLineadoTbl.properties("Jet OLEDB:Create Link") = TrueDi2015NewLineDi2015NewLine'Append the table to the tables collection 'Di2015NewLineadoCat.Tables.Append adoTblDi2015NewLine
305703Di2015UniqueSeparatorswitch
305703Di2015UniqueSeparatorTypeConverter
305703Di2015UniqueSeparator        DateTime foo = new DateTime(2008, 11, 20);Di2015NewLine        TypeConverter converter = TypeDescriptor.GetConverter(foo);Di2015NewLine        string s = converter.ConvertToInvariantString(foo);Di2015NewLine        object val = converter.ConvertFromInvariantString(s);Di2015NewLine
305732Di2015UniqueSeparatorprivate bool _Moving = false;Di2015NewLineprivate Point _Offset;Di2015NewLineprivate void Form1_MouseDown(object sender, MouseEventArgs e)Di2015NewLine{Di2015NewLine    _Moving = true;Di2015NewLine    _Offset = new Point(e.X, e.Y);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Form1_MouseMove(object sender, MouseEventArgs e)Di2015NewLine{Di2015NewLine    if (_Moving)Di2015NewLine    {Di2015NewLine        Point newlocation = this.Location;Di2015NewLine        newlocation.X += e.X - _Offset.X;Di2015NewLine        newlocation.Y += e.Y - _Offset.Y;Di2015NewLine        this.Location = newlocation;Di2015NewLine    }Di2015NewLine}Di2015NewLineprivate void Form1_MouseUp(object sender, MouseEventArgs e)Di2015NewLine{Di2015NewLine    if (_Moving)Di2015NewLine    {Di2015NewLine        _Moving = false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
305732Di2015UniqueSeparatorthis.DialogResult = DialogResult.OK;Di2015NewLine
305938Di2015UniqueSeparatorprivate System.Data.Linq.Link<String> _columnName;Di2015NewLine
305938Di2015UniqueSeparator[Column(Name = "column_name", Storage = "_columnName"...]Di2015NewLinepublic String ColumnName Di2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return _columnName.Value;Di2015NewLine    }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        _columnName.Value = value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
306096Di2015UniqueSeparatorLoaderExceptions
306096Di2015UniqueSeparatorAppDomain.ReflectionOnlyAssemblyResolve
306436Di2015UniqueSeparatorsomeList.Select(item => item.Name);Di2015NewLine
306436Di2015UniqueSeparatorFunc<Item, String> itemName = item => item.Name;Di2015NewLine...Di2015NewLinesomeList.Select(itemName);Di2015NewLine
306436Di2015UniqueSeparatorDictionary<UserType, Action<User>> showControls;Di2015NewLineshowControls = new Dictionary<UserType, Action<User>>();Di2015NewLineDi2015NewLineshowControls.Add(SomeEnum.Admin, setControlsForAdmin);Di2015NewLineshowControls.Add(SomeEnum.Normal, setControlsForNormalUser);Di2015NewLineshowControls.Add(SomeEnum.Unregistered, setControlsForUnregisteredUser);Di2015NewLine
306436Di2015UniqueSeparatorshowControls[user.UserType]();Di2015NewLine
306436Di2015UniqueSeparatorAction<User> neededMethod;Di2015NewLineDi2015NewLineneededMethod = showControls[user.UserType];Di2015NewLineDi2015NewLineSomeMethod(neededMethod);Di2015NewLine
306575Di2015UniqueSeparator<configSection>Di2015NewLine    <sectionDi2015NewLine            name="YOUR_CLASS_NAME_HERE"Di2015NewLine            type="YOUR.NAMESPACE.CLASSNAME, YOUR.NAMESPACE, Version=1.1.0.0, Culture=neutral, PublicKeyToken=PUBLIC_TOKEN_ID_FROM_ASSEMBLY"Di2015NewLine            allowLocation="true"Di2015NewLine            allowDefinition="Everywhere"Di2015NewLine          />Di2015NewLine</configSection>Di2015NewLine
306597Di2015UniqueSeparatorHKEY_CLASSES_ROOT\\MIME\\Database\\Content Type
306597Di2015UniqueSeparatorfile
306598Di2015UniqueSeparator        BinaryFormatter b = new BinaryFormatter();Di2015NewLine        s.Position = 0;Di2015NewLine        return (YourObjectType)b.Deserialize(s);Di2015NewLine
306624Di2015UniqueSeparatorObject[] ni = (Object[])nDoc.Items;Di2015NewLinestring names_values = "";Di2015NewLinefor (int x = 0; x < ni.Length; x++)Di2015NewLine{Di2015NewLineNotesItem item = (NotesItem)ni[x];Di2015NewLineif (!string.IsNullOrEmpty(item.Name)) names_values += x.ToString() + ": " + item.Name + "\\t\\t" + item.Text + "\\r\\n";Di2015NewLine}Di2015NewLine
306624Di2015UniqueSeparator0: Received \from example.com ([192.168.0.1])          by host.example.com (Lotus Domino Release 6.5.4 HF182)          with ESMTP id 2008111917343129-205078 ;          Wed, 19 Nov 2008 17:34:31 -0500Di2015NewLine1: Received \from example.com ([192.168.0.2])          by host2.example.com (Lotus Domino Release 6.5.4 HF182)          with ESMTP id 2008111917343129-205078 ;          Wed, 19 Nov 2008 17:34:31 -0500Di2015NewLine2: X_PGRTRKID   \130057945714tDi2015NewLine3: X_PGRSRC \IEDi2015NewLine4: ReplyTo  \"example" <name@email.example.com>Di2015NewLine5: Principal    \"example" <customerservice@email.example.com>Di2015NewLine6: From \\"IE130057945714t"<service@test.email.example.com>Di2015NewLine7: SendTo   \me@example.comDi2015NewLine8: Subject  \(Message subject redacted)Di2015NewLine9: PostedDate   \11/19/2008 03:34:15 PMDi2015NewLine10: MIME_Version    \1.0Di2015NewLine11: $Mailer \SMTP DirectMailDi2015NewLine12: $MIMETrack  \Itemize by SMTP Server on xxxPT02-CORP/example(Release 6.5.4 HF182|May 31, 2005) at 11/19/2008 05:34:31 PM;Serialize by Router on xxxPT02-CORP/example(Release 6.5.4 HF182|May 31, 2005) at 11/19/2008 05:34:32 PM;Serialize complete at 11/19/2008 05:34:32 PM;MIME-CD by Router on xxxPT02-CORP/example(Release 6.5.4 HF182|May 31, 2005) at 11/19/2008 05:34:32 PM;MIME-CD complete at 11/19/2008 05:34:32 PM;Itemize by Router on camp-db-05/example(Release 7.0.2 HF76|November 03, 2006) at 11/19/2008 05:34:32 PM;MIME-CD by Notes Client on MyName/Guest/example(Release 6.5.6|March 06, 2007) at 11/20/2008 12:46:25 PM;MIME-CD complete at 11/20/2008 12:46:25 PMDi2015NewLine13: Form    \MemoDi2015NewLine14: $UpdatedBy  \;CN=xxxPT02-CORP/O=exampleDi2015NewLine15: $ExportHeadersConverted \1Di2015NewLine16: $MessageID  \<redacted@LocalDomain>Di2015NewLine17: RouteServers    \CN=xxxPT02-CORP/O=example;CN=camp-db-05/O=exampleDi2015NewLine18: RouteTimes  \11/19/2008 03:34:31 PM-11/19/2008 03:34:32 PM;11/19/2008 03:34:32 PM-11/19/2008 03:34:32 PMDi2015NewLine19: $Orig   \958F2E4E4B666AB585257506007C02A7Di2015NewLine20: Categories  \Di2015NewLine21: $Revisions  \Di2015NewLine22: DeliveredDate   \11/19/2008 03:34:32 PMDi2015NewLine23: Body    \[]exampleexampleDi2015NewLine
306629Di2015UniqueSeparatorprivate string MyMethod(Match match, bool param1, int param2)Di2015NewLine{Di2015NewLine    //Do stuff hereDi2015NewLine}Di2015NewLineDi2015NewLineRegex reg = new Regex(@"{regex goes here}", RegexOptions.IgnoreCase);Di2015NewLineContent = reg.Replace(Content, new MatchEvaluator(delegate(Match match) { return MyMethod(match, false, 0); }));Di2015NewLine
306638Di2015UniqueSeparatorpublic void BindData(string mySQL)Di2015NewLine{Di2015NewLine  OracleConnection myConnection;Di2015NewLine  // Empty connection string for nowDi2015NewLine  OracleDataAdapter MainDataAdapter = new OracleDataAdapter(mySQL, ""); Di2015NewLine  DataTable MainDataTable = new DataTable();Di2015NewLine  string connectionString = "";Di2015NewLine  Label1.Visible = false;Di2015NewLine  Label1.Text = "";Di2015NewLineDi2015NewLine  foreach (ListItem li in CheckBoxList1.Items)Di2015NewLine  {Di2015NewLine    if (li.Selected)Di2015NewLine    {Di2015NewLine      connectionString = "Data Source=" + li.Text + "";Di2015NewLine      connectionString += ";Persist Security Info=True;User ID=user;Password=pass;Unicode=True";Di2015NewLine      MainDataAdapter.SelectCommand.Connection.ConnectionString = connectionStringDi2015NewLine      tryDi2015NewLine      {Di2015NewLine        MainDataAdapter.Fill(MainDataTable);Di2015NewLine      }Di2015NewLine      catch (OracleException e)Di2015NewLine      {Di2015NewLine        Label1.Visible = true;Di2015NewLine        Label1.Text = Label1.Text + e.Message + " on " + li.Text + "<br>";Di2015NewLine      }Di2015NewLine    }Di2015NewLine  }Di2015NewLine  GridView1.DataSourceID = String.Empty;Di2015NewLine  GridView1.DataSource = MainDataTable;Di2015NewLine  GridView1.DataBind();Di2015NewLine}Di2015NewLine
306923Di2015UniqueSeparatorquantity
306990Di2015UniqueSeparator<ContentControl Template="{DynamicResource thirdPartyControlTemplate}" />Di2015NewLine
306990Di2015UniqueSeparator  xmlns:thridParty="clr-namespace:WpfCustomControlLibrary1;assembly=WpfCustomControlLibrary1"                >Di2015NewLine<Application.Resources>Di2015NewLine    <ControlTemplate x:Key="thirdPartyControlTemplate" TargetType="{x:Type ContentControl}">Di2015NewLine        <thridParty:ThirdPartyControl />Di2015NewLine    </ControlTemplate>Di2015NewLine</Application.Resources>Di2015NewLine
307020Di2015UniqueSeparatorMouse.OverrideCursor = Cursors.Wait;Di2015NewLinetryDi2015NewLine{Di2015NewLine    // do stuffDi2015NewLine}Di2015NewLinefinallyDi2015NewLine{Di2015NewLine    Mouse.OverrideCursor = null;Di2015NewLine}Di2015NewLine
307039Di2015UniqueSeparatorReference.cs
307039Di2015UniqueSeparatorapp.config
307401Di2015UniqueSeparatorpdfStream.Seek(0,SeekOrigin.Begin)
307576Di2015UniqueSeparatorpublic class MyClass {Di2015NewLine    public int Foo { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic MyClass MyRef { get; }Di2015NewLine
307576Di2015UniqueSeparatorpublic static class MyRef {Di2015NewLine   public static int Foo { get; set; }Di2015NewLine}Di2015NewLine
307576Di2015UniqueSeparatorvoid method() {Di2015NewLine   MyRef.Foo = 4; // might be eitherDi2015NewLine}Di2015NewLineDi2015NewLinevoid method() {Di2015NewLine   this.MyRef.Foo = 4; // definitely property/fieldDi2015NewLine}Di2015NewLine
307600Di2015UniqueSeparatorpublic static IQueryable<T> OrderBy<T>(this IQueryable<T> source, string ordering, params object[] values) {Di2015NewLine    var type = typeof(T);Di2015NewLine    var property = type.GetProperty(ordering);Di2015NewLine    var parameter = Expression.Parameter(type, "p");Di2015NewLine    var propertyAccess = Expression.MakeMemberAccess(parameter, property);Di2015NewLine    var orderByExp = Expression.Lambda(propertyAccess, parameter);Di2015NewLine    MethodCallExpression resultExp = Expression.Call(typeof(Queryable), "OrderBy", new Type[] { type, property.PropertyType }, source.Expression, Expression.Quote(orderByExp));Di2015NewLine    return source.Provider.CreateQuery<T>(resultExp);Di2015NewLine}Di2015NewLine
307600Di2015UniqueSeparatorOrderByDescending
307600Di2015UniqueSeparatorMethodCallExpression resultExp = Expression.Call(typeof(Queryable), "OrderByDescending", new Type[] { type, property.PropertyType }, source.Expression, Expression.Quote(orderByExp));Di2015NewLine
307806Di2015UniqueSeparatorint minutes = DateTime.Now.Minute;Di2015NewLineint adjust = 10 - (minutes % 10);Di2015NewLinetimer.Interval = adjust * 60 * 1000;  Di2015NewLine
307836Di2015UniqueSeparatorpublic class LoaderDi2015NewLine{Di2015NewLineDi2015NewLine    private string connectionString;Di2015NewLine    private string fileName;Di2015NewLine    private Stream stream;Di2015NewLine    private DataFile dataFile;Di2015NewLineDi2015NewLine    public Loader(Stream stream, string fileName, string connectionString)Di2015NewLine    {Di2015NewLine        this.connectionString = connectionString;Di2015NewLine        this.fileName = fileName;Di2015NewLine        this.stream = stream;Di2015NewLine    }  Di2015NewLineDi2015NewLine    public void Process()Di2015NewLine    {Di2015NewLine        //*****  Create AppDomain HERE *****Di2015NewLine        string threadID = Thread.CurrentThread.ManagedThreadId.ToString();Di2015NewLine        AppDomain appDomain = AppDomain.CreateDomain(threadID);Di2015NewLineDi2015NewLine        DataFile dataFile = Di2015NewLine            (DataFile) appDomain.CreateInstanceAndUnwrap(Di2015NewLine            \\\"<DataFile AssemblyName>", Di2015NewLine            \\\"DataFile", Di2015NewLine            \\\true, Di2015NewLine            \\\BindingFlags.Default,Di2015NewLine            \\\null,Di2015NewLine            \\\new object[] Di2015NewLine            \\\{ Di2015NewLine            \\\\aredstream, Di2015NewLine            \\\\filename, Di2015NewLine            \\\\connectionString Di2015NewLine            \\\},Di2015NewLine            \\\null,Di2015NewLine            \\\null,Di2015NewLine            \\\null);Di2015NewLine        dataFile.ParseFile();Di2015NewLine        dataFile.Save();Di2015NewLineDi2015NewLine        appDomain.Unload(threadID);       Di2015NewLine    }Di2015NewLine}Di2015NewLine
307917Di2015UniqueSeparator    public static XAttribute GetMetadata(this XElement parent, string key)Di2015NewLine    {Di2015NewLine        return parent.Elements("metadata").Elements("dc")Di2015NewLine                 .FirstOrDefault(x => x.Attribute("element").Value == key)Di2015NewLine                 .Attribute("value");Di2015NewLine    }Di2015NewLine
307917Di2015UniqueSeparatorPublisher = (string)article.GetMetadata("dc.publisher");Di2015NewLine
308040Di2015UniqueSeparatorList<object>
308040Di2015UniqueSeparatorobject x = GetObjectFromSomewhere();Di2015NewLine// I want to create a List<?> containing the existingDi2015NewLine// object, but strongly typed to the "right" type dependingDi2015NewLine// on the type of the value of xDi2015NewLineMethodInfo method = GetType().GetMethod("BuildListHelper");Di2015NewLinemethod = method.MakeGenericMethod(new Type[] { x.GetType() });Di2015NewLineobject list = method.Invoke(this, new object[] { x });Di2015NewLineDi2015NewLine// LaterDi2015NewLineDi2015NewLinepublic IList<T> BuildListHelper<T>(T item)Di2015NewLine{Di2015NewLine    List<T> list = new List<T>();Di2015NewLine    list.Add(item);Di2015NewLine    return list;Di2015NewLine}Di2015NewLine
308337Di2015UniqueSeparatorString codeGenerationXmlns = "http://schemas.microsoft.com/ado/2006/04/codegeneration";Di2015NewLineEdmItemCollection edmItems = new EdmItemCollection(new XmlReader[] { csdlReader });Di2015NewLinevar ownEntities = from item in edmItemsDi2015NewLine    \\\  where item.BuiltInTypeKind == BuiltInTypeKind.EntityTypeDi2015NewLine    \\\  select item as EntityTypeBase;Di2015NewLinevar entityContainer = (from item in edmItemsDi2015NewLine    \\\\   where item.BuiltInTypeKind == BuiltInTypeKind.EntityContainerDi2015NewLine    \\\\   select item as EntityContainer).FirstOrDefault();Di2015NewLineEntities = (from ent in ownEntitiesDi2015NewLine    \\select new EntityDi2015NewLine    \\{Di2015NewLine    \\\Name = ent.Name,Di2015NewLine    \\\SetName = (from entSet in entityContainer.BaseEntitySetsDi2015NewLine    \\\\\   where (entSet.ElementType == ent) || (ent.BaseType != null && (entSet.ElementType.FullName.Equals(ent.BaseType.FullName)))Di2015NewLine    \\\\\   select entSet.Name).FirstOrDefault(),Di2015NewLine    \\\IsPublic = ((from metaProps in ent.MetadataPropertiesDi2015NewLine    \\\\\\ where metaProps.Name.Equals(codeGenerationXmlns + ":TypeAccess")Di2015NewLine    \\\\\\ select metaProps.Value).FirstOrDefault() ?? "Public").Equals("Public"),Di2015NewLine    \\\Keys = (from keys in ent.KeyMembersDi2015NewLine    \\\\\select new Entity.MemberDi2015NewLine    \\\\\{Di2015NewLine    \\\\\\Name = keys.Name,Di2015NewLine    \\\\\\Type = keys.TypeUsage.EdmType.NameDi2015NewLine    \\\\\}).ToList(),Di2015NewLine    \\\Properties = (from prop in ent.MembersDi2015NewLine    \\\\\\  select new Entity.MemberDi2015NewLine    \\\\\\  {Di2015NewLine    \\\\\\\  Name = prop.Name,Di2015NewLine    \\\\\\\  Type = prop.TypeUsage.EdmType.Name,Di2015NewLine    \\\\\\\  IsCollection = prop.TypeUsage.EdmType.BuiltInTypeKind == BuiltInTypeKind.CollectionType,Di2015NewLine    \\\\\\\  PrivateGetter = ((from metaProps in prop.MetadataPropertiesDi2015NewLine    \\\\\\\\\\\\where metaProps.Name.Equals(codeGenerationXmlns + ":GetterAccess")Di2015NewLine    \\\\\\\\\\\\select metaProps.Value).FirstOrDefault() ?? "Public").Equals("Private"),Di2015NewLine    \\\\\\\  PrivateSetter = ((from metaProps in prop.MetadataPropertiesDi2015NewLine    \\\\\\\\\\\\where metaProps.Name.Equals(codeGenerationXmlns + ":SetterAccess")Di2015NewLine    \\\\\\\\\\\\select metaProps.Value).FirstOrDefault() ?? "Public").Equals("Private"),Di2015NewLine    \\\\\\  }).ToList()Di2015NewLine    \\}).ToList();Di2015NewLine
308486Di2015UniqueSeparatorfor
308486Di2015UniqueSeparator        var l = new List<int>();Di2015NewLineDi2015NewLine        l.Add(0);Di2015NewLine        l.Add(1);Di2015NewLine        l.Add(2);Di2015NewLine        l.Add(3);Di2015NewLine        l.Add(4);Di2015NewLine        l.Add(5);Di2015NewLine        l.Add(6);Di2015NewLineDi2015NewLine        for (int i = 0; i < l.Count; i++)Di2015NewLine        {Di2015NewLine            if (l[i] % 2 == 0)Di2015NewLine            {Di2015NewLine                l.RemoveAt(i);Di2015NewLine                i--;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        foreach (var i in l)Di2015NewLine        {Di2015NewLine            Console.WriteLine(i);Di2015NewLine        }Di2015NewLine
308524Di2015UniqueSeparator[Tested]Di2015NewLineDi2015NewLinepublic virtual bool ContainsAll<U>(SCG.IEnumerable<U> items) where U : TDi2015NewLine{Di2015NewLine  HashBag<T> res = new HashBag<T>(itemequalityComparer);Di2015NewLineDi2015NewLine  foreach (T item in items)Di2015NewLine    if (res.ContainsCount(item) < ContainsCount(item))Di2015NewLine      res.Add(item);Di2015NewLine    elseDi2015NewLine      return false;Di2015NewLineDi2015NewLine  return true;Di2015NewLine}Di2015NewLine
308544Di2015UniqueSeparatorusing log4net;Di2015NewLineusing log4net.Appender;Di2015NewLineusing log4net.Layout;Di2015NewLineusing log4net.Repository.Hierarchy;Di2015NewLineDi2015NewLine// Set the level for a named loggerDi2015NewLinepublic static void SetLevel(string loggerName, string levelName)Di2015NewLine{Di2015NewLine    ILog log = LogManager.GetLogger(loggerName);Di2015NewLine    Logger l = (Logger)log.Logger;Di2015NewLineDi2015NewLine    l.Level = l.Hierarchy.LevelMap[levelName];Di2015NewLine    }Di2015NewLineDi2015NewLine// Add an appender to a loggerDi2015NewLinepublic static void AddAppender(string loggerName, IAppender appender)Di2015NewLine{Di2015NewLine    ILog log = LogManager.GetLogger(loggerName);Di2015NewLine    Logger l = (Logger)log.Logger;Di2015NewLineDi2015NewLine    l.AddAppender(appender);Di2015NewLine}Di2015NewLineDi2015NewLine// Create a new file appenderDi2015NewLinepublic static IAppender CreateFileAppender(string name, string fileName)Di2015NewLine{Di2015NewLine    FileAppender appender = newDi2015NewLine        FileAppender();Di2015NewLine    appender.Name = name;Di2015NewLine    appender.File = fileName;Di2015NewLine    appender.AppendToFile = true;Di2015NewLineDi2015NewLine    PatternLayout layout = new PatternLayout();Di2015NewLine    layout.ConversionPattern = "%d [%t] %-5p %c [%x] - %m%n";Di2015NewLine    layout.ActivateOptions();Di2015NewLineDi2015NewLine    appender.Layout = layout;Di2015NewLine    appender.ActivateOptions();Di2015NewLineDi2015NewLine    return appender;Di2015NewLine}Di2015NewLineDi2015NewLine// In order to set the level for a logger and add an appender reference youDi2015NewLine// can then use the following calls:Di2015NewLineSetLevel("Log4net.MainForm", "ALL");Di2015NewLineAddAppender("Log4net.MainForm", CreateFileAppender("appenderName", "fileName.log"));Di2015NewLineDi2015NewLine// repeat as desiredDi2015NewLine
308610Di2015UniqueSeparatoryield!
308610Di2015UniqueSeparatorforeach
308610Di2015UniqueSeparatoryield
308612Di2015UniqueSeparator(foo *)(-1)
308612Di2015UniqueSeparatortemplate<typename T>Di2015NewLinestatic inline void nullcheck(T *ptr) { Di2015NewLine    #if PLATFORM_TRAITS_NEW_RETURNS_NULLDi2015NewLine        if (ptr == NULL) throw std::bad_alloc();Di2015NewLine    #endifDi2015NewLine}Di2015NewLine
308648Di2015UniqueSeparatorpublic class LineReader : IDisposableDi2015NewLine{Di2015NewLine\private Stream stream;Di2015NewLine\private BinaryReader reader;Di2015NewLineDi2015NewLine\public LineReader(Stream stream) { reader = new BinaryReader(stream); }Di2015NewLineDi2015NewLine\public string ReadLine()Di2015NewLine\{Di2015NewLine\\StringBuilder result = new StringBuilder();Di2015NewLine\\char lastChar = reader.ReadChar();Di2015NewLine\\// an EndOfStreamException here would propogate to the callerDi2015NewLineDi2015NewLine\\tryDi2015NewLine\\{Di2015NewLine\\\char newChar = reader.ReadChar();Di2015NewLine\\\if (lastChar == '\\r' && newChar == '\\n')Di2015NewLine\\\\return result.ToString();Di2015NewLineDi2015NewLine\\\result.Append(lastChar);Di2015NewLine\\\lastChar = newChar;Di2015NewLine\\}Di2015NewLine\\catch (EndOfStreamException)Di2015NewLine\\{Di2015NewLine\\\result.Append(lastChar);Di2015NewLine\\\return result.ToString();Di2015NewLine\\}Di2015NewLine\}Di2015NewLineDi2015NewLine\public void Dispose()Di2015NewLine\{Di2015NewLine\\reader.Close();Di2015NewLine\}Di2015NewLine}Di2015NewLine
308953Di2015UniqueSeparatorXmlDocument doc = new XmlDocument();Di2015NewLineXPathNavigator nav = doc.CreateNavigator();Di2015NewLinetry Di2015NewLine{Di2015NewLine  XPathExpression expr = nav.Compile(xPathString);Di2015NewLine}Di2015NewLinecatch (XPathException)Di2015NewLine{Di2015NewLine  MessageBox.Show("Your XPath is invalid");Di2015NewLine}Di2015NewLine
308962Di2015UniqueSeparatorprivate static readonly Random rng = new Random();Di2015NewLineDi2015NewLineprivate static RandomChar(string domain)Di2015NewLine{Di2015NewLine    int selection = rng.Next(domain.Length);Di2015NewLine    return domain[selection];Di2015NewLine}Di2015NewLineDi2015NewLineprivate static char RandomDigit()Di2015NewLine{Di2015NewLine    return RandomChar("0123456789");Di2015NewLine}Di2015NewLineDi2015NewLineprivate static char RandomLetter()Di2015NewLine{Di2015NewLine    return RandomChar("ABCDEFGHIJKLMNOPQRSTUVWXYZ");Di2015NewLine}Di2015NewLineDi2015NewLinepublic static char RandomStringInSpecialFormat()Di2015NewLine{Di2015NewLine    char[] text = new char[6];Di2015NewLine    char[0] = RandomLetter();Di2015NewLine    char[1] = RandomDigit();Di2015NewLine    char[2] = RandomLetter();Di2015NewLine    char[3] = RandomDigit();Di2015NewLine    char[4] = RandomLetter();Di2015NewLine    char[5] = RandomDigit();Di2015NewLine    return new string(text);Di2015NewLine}Di2015NewLine
309005Di2015UniqueSeparatorIDepthFirstSearchTree<T>
309005Di2015UniqueSeparatorIBreadthFirstSearchTree<T>
309005Di2015UniqueSeparatorGraph<T>
309005Di2015UniqueSeparatorpublic IEnumerable<T> IterateBreadthFirst() { ... }Di2015NewLinepublic IEnumerable<T> IterateDepthFirst() { ... }Di2015NewLine
309076Di2015UniqueSeparatormscorlib
309076Di2015UniqueSeparatorIEnumerable
309076Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLineclass TestDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Assembly assembly = typeof(string).Assembly;Di2015NewLine        Type target = typeof(IEnumerable);        Di2015NewLine        var types = assembly.GetTypes()Di2015NewLine                            .Where(type => target.IsAssignableFrom(type));Di2015NewLineDi2015NewLine        foreach (Type type in types)Di2015NewLine        {Di2015NewLine            Console.WriteLine(type.Name);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
309119Di2015UniqueSeparatorgv.HeaderRow.TableSection = TableRowSection.TableHeader;Di2015NewLine
309182Di2015UniqueSeparatorthis
309182Di2015UniqueSeparatorpublic MyType(int arg)Di2015NewLine{Di2015NewLine    this.arg = arg;Di2015NewLine}Di2015NewLine
309182Di2015UniqueSeparatorpublic MyType(int arg)Di2015NewLine{Di2015NewLine    _arg = arg;Di2015NewLine}Di2015NewLine
309193Di2015UniqueSeparator0, 0, 255Di2015NewLine0, 255, 0Di2015NewLine255, 0, 0Di2015NewLine
309193Di2015UniqueSeparator0, 255, 255Di2015NewLine255, 0, 255Di2015NewLine255, 255, 0Di2015NewLine
309193Di2015UniqueSeparator0, 0, 128Di2015NewLine0, 128, 0Di2015NewLine128, 0, 0Di2015NewLine0, 128, 128Di2015NewLine128, 0, 128Di2015NewLine128, 128, 0Di2015NewLine
309193Di2015UniqueSeparator255, 255, 255Di2015NewLine128, 128, 128 Di2015NewLine
309193Di2015UniqueSeparator    static string[] ColourValues = new string[] { Di2015NewLine        "FF0000", "00FF00", "0000FF", "FFFF00", "FF00FF", "00FFFF", "000000", Di2015NewLine        "800000", "008000", "000080", "808000", "800080", "008080", "808080", Di2015NewLine        "C00000", "00C000", "0000C0", "C0C000", "C000C0", "00C0C0", "C0C0C0", Di2015NewLine        "400000", "004000", "000040", "404000", "400040", "004040", "404040", Di2015NewLine        "200000", "002000", "000020", "202000", "200020", "002020", "202020", Di2015NewLine        "600000", "006000", "000060", "606000", "600060", "006060", "606060", Di2015NewLine        "A00000", "00A000", "0000A0", "A0A000", "A000A0", "00A0A0", "A0A0A0", Di2015NewLine        "E00000", "00E000", "0000E0", "E0E000", "E000E0", "00E0E0", "E0E0E0", Di2015NewLine    };Di2015NewLine
309193Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLineclass Program {Di2015NewLine    static void Main(string[] args) {Di2015NewLine        ColourGenerator generator = new ColourGenerator();Di2015NewLine        for (int i = 0; i < 896; i++) {Di2015NewLine            Console.WriteLine(string.Format("{0}: {1}", i, generator.NextColour()));Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ColourGenerator {Di2015NewLineDi2015NewLine    private int index = 0;Di2015NewLine    private IntensityGenerator intensityGenerator = new IntensityGenerator();Di2015NewLineDi2015NewLine    public string NextColour() {Di2015NewLine        string colour = string.Format(PatternGenerator.NextPattern(index),Di2015NewLine            intensityGenerator.NextIntensity(index));Di2015NewLine        index++;Di2015NewLine        return colour;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class PatternGenerator {Di2015NewLine    public static string NextPattern(int index) {Di2015NewLine        switch (index % 7) {Di2015NewLine        case 0: return "{0}0000";Di2015NewLine        case 1: return "00{0}00";Di2015NewLine        case 2: return "0000{0}";Di2015NewLine        case 3: return "{0}{0}00";Di2015NewLine        case 4: return "{0}00{0}";Di2015NewLine        case 5: return "00{0}{0}";Di2015NewLine        case 6: return "{0}{0}{0}";Di2015NewLine        default: throw new Exception("Math error");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class IntensityGenerator {Di2015NewLine    private IntensityValueWalker walker;Di2015NewLine    private int current;Di2015NewLineDi2015NewLine    public string NextIntensity(int index) {Di2015NewLine        if (index == 0) {Di2015NewLine            current = 255;Di2015NewLine        }Di2015NewLine        else if (index % 7 == 0) {Di2015NewLine            if (walker == null) {Di2015NewLine                walker = new IntensityValueWalker();Di2015NewLine            }Di2015NewLine            else {Di2015NewLine                walker.MoveNext();Di2015NewLine            }Di2015NewLine            current = walker.Current.Value;Di2015NewLine        }Di2015NewLine        string currentText = current.ToString("X");Di2015NewLine        if (currentText.Length == 1) currentText = "0" + currentText;Di2015NewLine        return currentText;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class IntensityValue {Di2015NewLineDi2015NewLine    private IntensityValue mChildA;Di2015NewLine    private IntensityValue mChildB;Di2015NewLineDi2015NewLine    public IntensityValue(IntensityValue parent, int value, int level) {Di2015NewLine        if (level > 7) throw new Exception("There are no more colours left");Di2015NewLine        Value = value;Di2015NewLine        Parent = parent;Di2015NewLine        Level = level;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int Level { get; set; }Di2015NewLine    public int Value { get; set; }Di2015NewLine    public IntensityValue Parent { get; set; }Di2015NewLineDi2015NewLine    public IntensityValue ChildA {Di2015NewLine        get {Di2015NewLine            return mChildA ?? (mChildA = new IntensityValue(this, this.Value - (1<<(7-Level)), Level+1));Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public IntensityValue ChildB {Di2015NewLine        get {Di2015NewLine            return mChildB ?? (mChildB = new IntensityValue(this, Value + (1<<(7-Level)), Level+1));Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class IntensityValueWalker {Di2015NewLineDi2015NewLine    public IntensityValueWalker() {Di2015NewLine        Current = new IntensityValue(null, 1<<7, 1);Di2015NewLine    }Di2015NewLineDi2015NewLine    public IntensityValue Current { get; set; }Di2015NewLineDi2015NewLine    public void MoveNext() {Di2015NewLine        if (Current.Parent == null) {Di2015NewLine            Current = Current.ChildA;Di2015NewLine        }Di2015NewLine        else if (Current.Parent.ChildA == Current) {Di2015NewLine            Current = Current.Parent.ChildB;Di2015NewLine        }Di2015NewLine        else {Di2015NewLine            int levelsUp = 1;Di2015NewLine            Current = Current.Parent;Di2015NewLine            while (Current.Parent != null && Current == Current.Parent.ChildB) {Di2015NewLine                Current = Current.Parent;Di2015NewLine                levelsUp++;Di2015NewLine            }Di2015NewLine            if (Current.Parent != null) {Di2015NewLine                Current = Current.Parent.ChildB;Di2015NewLine            }Di2015NewLine            else {Di2015NewLine                levelsUp++;Di2015NewLine            }Di2015NewLine            for (int i = 0; i < levelsUp; i++) {Di2015NewLine                Current = Current.ChildA;Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
309339Di2015UniqueSeparatorint
309339Di2015UniqueSeparatorToString()
309339Di2015UniqueSeparatorint value = GetValueFromDb();Di2015NewLineEnumDisplayStatus enumDisplayStatus = ((EnumDisplayStatus)value);Di2015NewLinestring stringValue = enumDisplayStatus.ToString();Di2015NewLine
309414Di2015UniqueSeparator public static class ConfigurationManagerWrapperDi2015NewLine {Di2015NewLine      public static ConfigurationSection GetSection( string name )Di2015NewLine      {Di2015NewLine         return ConfigurationManager.GetSection( name );Di2015NewLine      }Di2015NewLineDi2015NewLine      .....Di2015NewLineDi2015NewLine      public static ConfigurationSection GetWidgetSection()Di2015NewLine      {Di2015NewLine          return GetSection( "widgets" );Di2015NewLine      }Di2015NewLine }Di2015NewLine
309429Di2015UniqueSeparator[DllImport("mscoree.dll", CharSet=CharSet.Unicode)]Di2015NewLinestatic extern bool StrongNameSignatureVerificationEx(string wszFilePath, bool fForceVerification, ref bool  pfWasVerified);Di2015NewLine
309528Di2015UniqueSeparatorclass SomeClassDi2015NewLine{Di2015NewLineDi2015NewLine    struct MyStructDi2015NewLine    {Di2015NewLine        private readonly string label;Di2015NewLine        private readonly int id;Di2015NewLineDi2015NewLine        public MyStruct (string label, int id)Di2015NewLine        {Di2015NewLine            this.label = label;Di2015NewLine            this.id = id;Di2015NewLine        }Di2015NewLineDi2015NewLine        public string Label { get { return label; } }Di2015NewLine        public string Id { get { return id; } }Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    static readonly IList<MyStruct> MyArray = new ReadOnlyCollection<MyStruct>Di2015NewLine        (new[] {Di2015NewLine             new MyStruct ("a", 1),Di2015NewLine             new MyStruct ("b", 5),Di2015NewLine             new MyStruct ("q", 29)Di2015NewLine        });Di2015NewLine}Di2015NewLine
309791Di2015UniqueSeparatorEncoding.Unicode.GetString
309791Di2015UniqueSeparatorint start = (i_fileBytes[0] == 0xff && i_fileBytes[1] == 0xfe) ? 2 : 0;Di2015NewLinestring text = Encoding.Unicode.GetString(i_fileBytes, start, i_fileBytes.Length-start);Di2015NewLine
309791Di2015UniqueSeparatorRead()
309791Di2015UniqueSeparatorReadToEnd()
310022Di2015UniqueSeparatorprivate void ShowPage(Page page)Di2015NewLine{Di2015NewLine    NavigationWindow popup = new NavigationWindow();  Di2015NewLine    popup.Height = 400;Di2015NewLine    popup.Width = 600;Di2015NewLine    popup.Show();Di2015NewLine    popup.Navigate(page);Di2015NewLine}Di2015NewLine
310145Di2015UniqueSeparatorHtmlEncode = false
310145Di2015UniqueSeparatorBoundField
310145Di2015UniqueSeparator <asp:BoundField DataField="SomeDataField" Di2015NewLine        HeaderText="SomeHeader<br />(OtherData)" Di2015NewLine        HtmlEncode="false" />Di2015NewLine
310145Di2015UniqueSeparatorBoundField.HtmlEncode
310171Di2015UniqueSeparatorList<T>
310171Di2015UniqueSeparatorQueue<T>
310171Di2015UniqueSeparatorIEnumerable<T>
310171Di2015UniqueSeparatorList<T> list = new List<T>(queue);Di2015NewLine
310179Di2015UniqueSeparator[ServiceKnownType(typeof(ConcreteDeviceType)]Di2015NewLine
310625Di2015UniqueSeparator/// <summary>Di2015NewLine/// Returns whether the given path/file is a linkDi2015NewLine/// </summary>Di2015NewLine/// <param name="shortcutFilename"></param>Di2015NewLine/// <returns></returns>Di2015NewLinepublic static bool IsLink(string shortcutFilename)Di2015NewLine{Di2015NewLine    string pathOnly = System.IO.Path.GetDirectoryName(shortcutFilename);Di2015NewLine    string filenameOnly = System.IO.Path.GetFileName(shortcutFilename);Di2015NewLineDi2015NewLine    Shell32.Shell shell = new Shell32.ShellClass();Di2015NewLine    Shell32.Folder folder = shell.NameSpace(pathOnly);Di2015NewLine    Shell32.FolderItem folderItem = folder.ParseName(filenameOnly);Di2015NewLine    if (folderItem != null)Di2015NewLine    {Di2015NewLine        return folderItem.IsLink;Di2015NewLine    }Di2015NewLine    return false; // not foundDi2015NewLine}Di2015NewLine
310625Di2015UniqueSeparator    /// <summary>Di2015NewLine    /// If path/file is a link returns the full pathname of the target,Di2015NewLine    /// Else return the original pathnameo "" if the file/path can't be foundDi2015NewLine    /// </summary>Di2015NewLine    /// <param name="shortcutFilename"></param>Di2015NewLine    /// <returns></returns>Di2015NewLine    public static string GetShortcutTarget(string shortcutFilename)Di2015NewLine    {Di2015NewLine        string pathOnly = System.IO.Path.GetDirectoryName(shortcutFilename);Di2015NewLine        string filenameOnly = System.IO.Path.GetFileName(shortcutFilename);Di2015NewLineDi2015NewLine        Shell32.Shell shell = new Shell32.ShellClass();Di2015NewLine        Shell32.Folder folder = shell.NameSpace(pathOnly);Di2015NewLine        Shell32.FolderItem folderItem = folder.ParseName(filenameOnly);Di2015NewLine        if (folderItem != null)Di2015NewLine        {Di2015NewLine            if (folderItem.IsLink)Di2015NewLine            {Di2015NewLine                Shell32.ShellLinkObject link = (Shell32.ShellLinkObject)folderItem.GetLink;Di2015NewLine                return link.Path;Di2015NewLine            }Di2015NewLine            return shortcutFilename;Di2015NewLine        }Di2015NewLine        return "";  // not foundDi2015NewLine    }Di2015NewLine
310709Di2015UniqueSeparator<%= Html.ActionLink("Click Here", "ViewDetails", "Plot", new { name="my-plot-name" }, null)%>Di2015NewLine
311129Di2015UniqueSeparatorpublic struct Vector3Di2015NewLine{Di2015NewLine  public float x;Di2015NewLine  public float y;Di2015NewLine  public float z;Di2015NewLine}Di2015NewLine
311179Di2015UniqueSeparatorpublic static string ByteArrayToString(byte[] ba)Di2015NewLine{Di2015NewLine  StringBuilder hex = new StringBuilder(ba.Length * 2);Di2015NewLine  foreach (byte b in ba)Di2015NewLine    hex.AppendFormat("{0:x2}", b);Di2015NewLine  return hex.ToString();Di2015NewLine}Di2015NewLine
311179Di2015UniqueSeparatorpublic static string ByteArrayToString(byte[] ba)Di2015NewLine{Di2015NewLine  string hex = BitConverter.ToString(ba);Di2015NewLine  return hex.Replace("-","");Di2015NewLine}Di2015NewLine
311179Di2015UniqueSeparatorpublic static byte[] StringToByteArray(String hex)Di2015NewLine{Di2015NewLine  int NumberChars = hex.Length;Di2015NewLine  byte[] bytes = new byte[NumberChars / 2];Di2015NewLine  for (int i = 0; i < NumberChars; i += 2)Di2015NewLine    bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);Di2015NewLine  return bytes;Di2015NewLine}Di2015NewLine
311179Di2015UniqueSeparatorpublic static byte[] StringToByteArray(String hex)Di2015NewLine{Di2015NewLine  int NumberChars = hex.Length/2;Di2015NewLine  byte[] bytes = new byte[NumberChars];Di2015NewLine  using (var sr = new StringReader(hex))Di2015NewLine  {Di2015NewLine    for (int i = 0; i < NumberChars; i++)Di2015NewLine      bytes[i] = Di2015NewLine        Convert.ToByte(new string(new char[2]{(char)sr.Read(), (char)sr.Read()}), 16);Di2015NewLine  }Di2015NewLine  return bytes;Di2015NewLine}Di2015NewLine
311195Di2015UniqueSeparatorpublic class MyClassDi2015NewLine{Di2015NewLine  public List<MyItem> Items;Di2015NewLine}Di2015NewLine
311195Di2015UniqueSeparatorpublic class MyItemCollection : List<MyItem>Di2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyClassDi2015NewLine{Di2015NewLine  public MyItemCollection Items;Di2015NewLine}Di2015NewLine
311195Di2015UniqueSeparatorpublic int Add(InstrumentTradeDataRow instTrade) { return List.Add(instTrade); }Di2015NewLine
311288Di2015UniqueSeparatorinterface IMyinterface { ... }Di2015NewLine
311288Di2015UniqueSeparatorinterface IMyinterface<T> : IMyinterface { ... }Di2015NewLine
311325Di2015UniqueSeparator   foreach (string key in Request.Form.Keys)Di2015NewLine   {Di2015NewLine        if (key.StartsWith("Email."))Di2015NewLine        {Di2015NewLine           ...Process this key...Di2015NewLine        }Di2015NewLine   }Di2015NewLine
311347Di2015UniqueSeparator"\\u001b*p{0:d}x1:d}Y", 1000, 1000Di2015NewLine
311347Di2015UniqueSeparator<esc>*p1000x1000YDi2015NewLine
311347Di2015UniqueSeparator<esc>*p1000x*p1000YDi2015NewLine
311347Di2015UniqueSeparatorInt32 deciHeight = original.Height / (int)original.HorizontalResolution * 720;Di2015NewLineInt32 deciWidth = original.Width / (int)original.VerticalResolution * 720;Di2015NewLinestream("\\u001b*t{0:d}h{1:d}V", deciHeight, deciWidth));Di2015NewLine
311420Di2015UniqueSeparatorbool has_maximize_btn = (GetWindowLong(hWnd, GWL_STYLE) & WS_MAXIMIZEBOX) != 0;Di2015NewLinebool has_minimize_btn = (GetWindowLong(hWnd, GWL_STYLE) & WS_MINIMIZEBOX) != 0;Di2015NewLine
311499Di2015UniqueSeparatorColor
311499Di2015UniqueSeparatorColor
311499Di2015UniqueSeparatorstatic
311499Di2015UniqueSeparatorstatic
311499Di2015UniqueSeparatorColor
311499Di2015UniqueSeparatorColor
311499Di2015UniqueSeparatorint
311499Di2015UniqueSeparatorColor
311499Di2015UniqueSeparatorclass
311499Di2015UniqueSeparatorstruct
311499Di2015UniqueSeparatorclass Heavy{Di2015NewLine    static Heavy first;Di2015NewLine    static Heavy second;Di2015NewLineDi2015NewLine    public static Heavy First{Di2015NewLine        get{Di2015NewLine            if(first == null)Di2015NewLine                first = new Heavy();Di2015NewLine            return first;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public static Heavy Second{Di2015NewLine        get{Di2015NewLine            if(second == null)Di2015NewLine                second = new Heavy();Di2015NewLine            return second;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
311499Di2015UniqueSeparatorColor
311499Di2015UniqueSeparatorColor
311499Di2015UniqueSeparatorColor.Red.G = 255;Di2015NewLine
311499Di2015UniqueSeparatorfor(int y = 0; y < bmp.Height; y++)Di2015NewLinefor(int x = 0; x < bmp.Width; x++)Di2015NewLine    if(bmp.GetPixel(x, y) == Color.Red))Di2015NewLine        MessageBox.Show("Found a red pixel!");Di2015NewLine
311499Di2015UniqueSeparatorColor
311499Di2015UniqueSeparatorColor
311499Di2015UniqueSeparatornew
311583Di2015UniqueSeparatorvar dates = TextBoxDateRange.Text.Split(new char[] { '-' }, StringSplitOptions.RemoveEmptyEntries);Di2015NewLineDi2015NewLinevar startDate = DateTime.Parse(dates[0], CultureInfo.CurrentCulture);Di2015NewLinevar endDate = DateTime.Parse(dates[1], CultureInfo.CurrentCulture);Di2015NewLine
311614Di2015UniqueSeparatorEventArgs
311614Di2015UniqueSeparatorEventArgs
311614Di2015UniqueSeparatorpublic event EventHandler<EventArgs<double, double, double>> Divided;Di2015NewLine
311614Di2015UniqueSeparatorprivate void OnDivided(object sender, EventArgs<double, double, double> e)Di2015NewLine{Di2015NewLine    // I have to just "know" this - it is a conventionDi2015NewLineDi2015NewLine    var numerator = e.Value1;Di2015NewLine    var denominator = e.Value2;Di2015NewLine    var result = e.Value3;Di2015NewLine}Di2015NewLine
311614Di2015UniqueSeparatorEventArgs
311614Di2015UniqueSeparatorprivate void OnDivided(object sender, DividedEventArgs e)Di2015NewLine{Di2015NewLine    var numerator = e.Numerator;Di2015NewLine    var denominator = e.Denominator;Di2015NewLine    var result = e.Result;Di2015NewLine}Di2015NewLine
311614Di2015UniqueSeparatorEventArgs
311685Di2015UniqueSeparatorpublic interface IRepository<T>Di2015NewLine{Di2015NewLine    T Add(T entity);Di2015NewLine    IQueryable<T> Fetch();Di2015NewLine    T Update(T entity);Di2015NewLine    void Delete(T entity);Di2015NewLine}Di2015NewLine
311739Di2015UniqueSeparatorvar sums = Enumerable.Range(0, myList[0].Length)Di2015NewLine           .Select(i => myList.Select(Di2015NewLine                     nums => nums[i]Di2015NewLine                  ).Sum()Di2015NewLine           );Di2015NewLine
311889Di2015UniqueSeparatormain.c
311889Di2015UniqueSeparatorPhase     Static                    DynamicDi2015NewLine--------  ----------------------    ------------------------Di2015NewLine          +---------+               +---------+Di2015NewLine          | main.c  |               | main.c  |Di2015NewLine          +---------+               +---------+Di2015NewLineCompile........|.........................|...................Di2015NewLine          +---------+ +---------+   +---------+ +--------+Di2015NewLine          | main.o  | | crtlib  |   | main.o  | | crtimp |Di2015NewLine          +---------+ +---------+   +---------+ +--------+Di2015NewLineLink...........|..........|..............|...........|.......Di2015NewLine               |          |              +-----------+Di2015NewLine               |          |              |Di2015NewLine          +---------+     |         +---------+ +--------+Di2015NewLine          |  main   |-----+         |  main   | | crtdll |Di2015NewLine          +---------+               +---------+ +--------+Di2015NewLineLoad/Run.......|.........................|..........|........Di2015NewLine          +---------+               +---------+     |Di2015NewLine          | main in |               | main in |-----+Di2015NewLine          | memory  |               | memory  |Di2015NewLine          +---------+               +---------+Di2015NewLine
312023Di2015UniqueSeparator(.*)
312023Di2015UniqueSeparator([a-z]*)
312023Di2015UniqueSeparator[DefaultProperty("Regex")]Di2015NewLinepublic partial class MaskedEdit : UserControlDi2015NewLine{Di2015NewLine    private Regex regex = new Regex("");Di2015NewLine    private bool myChange = false;Di2015NewLineDi2015NewLine    private string goodText;Di2015NewLine    private Font dataFont;Di2015NewLineDi2015NewLine    public MaskedEdit()Di2015NewLine    {Di2015NewLine        myChange = true;Di2015NewLine        InitializeComponent();Di2015NewLine        myChange = false;Di2015NewLine        dataFont = new Font(Font, FontStyle.Bold);Di2015NewLine        goodText = Text;Di2015NewLine    }Di2015NewLineDi2015NewLine    [Editor("System.ComponentModel.Design.MultilineStringEditor, System.Design", typeof(UITypeEditor)), Localizable(true)]Di2015NewLine    [DefaultValue("")]Di2015NewLine    public String RegexDi2015NewLine    {Di2015NewLine        get { return regex.ToString(); }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (value != null)Di2015NewLine            {Di2015NewLine                regex = new Regex(value);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    [EditorBrowsable(EditorBrowsableState.Always)]Di2015NewLine    [Browsable(true)] Di2015NewLine    [Editor("System.ComponentModel.Design.MultilineStringEditor, System.Design", typeof(UITypeEditor)), Localizable(true)]Di2015NewLine    [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]Di2015NewLine    public override string TextDi2015NewLine    {Di2015NewLine        get { return rtf.Text; }Di2015NewLine        set {Di2015NewLine            int selSt = rtf.SelectionStart;Di2015NewLine            int selLen = rtf.SelectionLength;Di2015NewLineDi2015NewLine            rtf.Text = value;Di2015NewLineDi2015NewLine            rtf.SelectionStart = selSt;Di2015NewLine            rtf.SelectionLength = selLen;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void rtf_TextChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (myChange) return;Di2015NewLine        Match m = regex.Match(Text);Di2015NewLine        if (m.Success)Di2015NewLine        {Di2015NewLine            goodText = Text;Di2015NewLine            Colorize(m);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            myChange = true;Di2015NewLine            Text = goodText;Di2015NewLine            myChange = false;Di2015NewLine            m = regex.Match(Text);Di2015NewLine            if (m.Success)Di2015NewLine            {Di2015NewLine                Colorize(m);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public IEnumerable<string> DataDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            Match m = regex.Match(Text);Di2015NewLine            bool first = true;Di2015NewLine            foreach (Group g in m.Groups)Di2015NewLine            {Di2015NewLine                if (first) { first = false; continue; }Di2015NewLine                yield return Text.Substring(g.Index, g.Length);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Colorize(Match m)Di2015NewLine    {Di2015NewLine        int selSt = rtf.SelectionStart;Di2015NewLine        int selLen = rtf.SelectionLength;Di2015NewLineDi2015NewLine        rtf.SelectionStart = 0;Di2015NewLine        rtf.SelectionLength = rtf.TextLength;Di2015NewLine        rtf.SelectionFont = Font;Di2015NewLine        bool first = true;Di2015NewLine        foreach (Group g in m.Groups)Di2015NewLine        {Di2015NewLine            if (first) { first = false; continue; }Di2015NewLine            rtf.SelectionStart = g.Index;Di2015NewLine            rtf.SelectionLength = g.Length;Di2015NewLine            rtf.SelectionFont = dataFont;Di2015NewLine        }Di2015NewLineDi2015NewLine        rtf.SelectionStart = selSt;Di2015NewLine        rtf.SelectionLength = selLen;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void MaskedEdit_FontChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        dataFont = new Font(Font, FontStyle.Bold);Di2015NewLine    }Di2015NewLine}Di2015NewLine
312037Di2015UniqueSeparator var duplicates = agents.GroupBy(a => a.ID).Where(a=>a.Count() > 1);Di2015NewLineDi2015NewLine foreach (var agent in duplicates)Di2015NewLine {Di2015NewLine         Console.WriteLine(agent.Key.ToString());Di2015NewLine }Di2015NewLine
312196Di2015UniqueSeparatorprotected void FrmAdd_DataBound(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // This is the same code as before, but done in the FormView's DataBound event.Di2015NewLine    ((DropDownList)FrmAdd.Row.FindControl("DdlAssigned")).SelectedValue =Di2015NewLine    \((Guid)Membership.GetUser().ProviderUserKey).ToString();Di2015NewLine}Di2015NewLine
312277Di2015UniqueSeparatorlet
312277Di2015UniqueSeparatorint[] result = Enumerable.Range(0, a.Length)Di2015NewLine                         .Select(i => a[i] * b[i])Di2015NewLine                         .ToArray();Di2015NewLine
312277Di2015UniqueSeparatorint[] result = a.Select((value, index) => value * b[index])Di2015NewLine                .ToArray();Di2015NewLine
312739Di2015UniqueSeparatorpublic static IEnumerable<String> GetWords()Di2015NewLine{Di2015NewLine    for (Char c1 = 'A'; c1 <= 'Z'; c1++)Di2015NewLine    {Di2015NewLine        for (Char c2 = 'A'; c2 <= 'Z'; c2++)Di2015NewLine        {Di2015NewLine            for (Char c3 = 'A'; c3 <= 'Z'; c3++)Di2015NewLine            {Di2015NewLine                for (Char c4 = 'A'; c4 <= 'Z'; c4++)Di2015NewLine                {Di2015NewLine                    yield return "" + c1 + c2 + c3 + c4;Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
312739Di2015UniqueSeparatorpublic static IEnumerable<String> GetWords(Int32 length)Di2015NewLine{Di2015NewLine    if (length <= 0)Di2015NewLine        yield break;Di2015NewLineDi2015NewLine    for (Char c = 'A'; c <= 'Z'; c++)Di2015NewLine    {Di2015NewLine        if (length > 1)Di2015NewLine        {Di2015NewLine            foreach (String restWord in GetWords(length - 1))Di2015NewLine                yield return c + restWord;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine            yield return "" + c;Di2015NewLine    }Di2015NewLine}Di2015NewLine
312771Di2015UniqueSeparatorSqlConnection
312771Di2015UniqueSeparatorusing
312806Di2015UniqueSeparator<a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.screen.aspx" rel="nofollow">System.Windows.Forms.Screen</a>
312806Di2015UniqueSeparator<a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.screen.allscreens.aspx" rel="nofollow">AllScreens</a>
312806Di2015UniqueSeparatorDi2015NewLinefor (int i = Screen.AllScreens.GetLowerBound(0); i <= Screen.AllScreens.GetUpperBound(0); i++)<br />Di2015NewLine{<br />Di2015NewLine    ScreensaverFormList[i].Bounds = Screen.AllScreens[i].Bounds;<br />Di2015NewLine}<br />Di2015NewLine
312999Di2015UniqueSeparatorMarquee
312999Di2015UniqueSeparatormyProgressBar.Style = ProgressBarStyle.Marquee;Di2015NewLine
312999Di2015UniqueSeparatorMarqueeAnimationSpeed
313034Di2015UniqueSeparatorshort number = 17;Di2015NewLineSystem.IO.BinaryWriter writer = new System.IO.BinaryWriter(stream);Di2015NewLinewriter.Write(number);Di2015NewLinewriter.Flush();Di2015NewLine
313044Di2015UniqueSeparator    // ...Di2015NewLine    {Di2015NewLine       //...Di2015NewLine       MyCollection1 collection3 = GetCollectionFromDb<MyCollection1>(Collection1Name);Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    private static T GetCollectionFromDb<T>(string pCollectionName) where T : MyCollectionBase<T>Di2015NewLine    {Di2015NewLine        IList<T> queryResult = db.Query((T c) => c.CollectionName == pCollectionName);Di2015NewLine        if (queryResult.Count != 0) return queryResult[0];Di2015NewLine        return null;Di2015NewLine    }Di2015NewLine
313044Di2015UniqueSeparator    private static MyCollection1 GetCollectionFromDb<MyCollection1>(string pCollectionName) where T : MyCollectionBase< MyCollection1 >Di2015NewLine    {Di2015NewLine        IList< MyCollection1 > queryResult = db.Query((MyCollection1 c) => c.CollectionName == pCollectionName);Di2015NewLine        if (queryResult.Count != 0) return queryResult[0];Di2015NewLine        return null;Di2015NewLine    }Di2015NewLine
313080Di2015UniqueSeparatorExpect.Call(sqr.CanRender(null)).IgnoreArguments()Di2015NewLine    .Do((Func<Shape, bool>) delegate(Agent x){return x.GetType() == typeof(Square);})Di2015NewLine    .Repeat.Any();Di2015NewLine
313275Di2015UniqueSeparatorpublic interface IMyTypeDi2015NewLine{Di2015NewLine    string SayHello();Di2015NewLine    string BaseTypeMethodIWantToUse();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyType : MyBaseType, IMyTypeDi2015NewLine{Di2015NewLine    public string SayHello()Di2015NewLine    {Di2015NewLine        return "Hello!";Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyRemoteableType : MarshalByRefObject, IMyTypeDi2015NewLine{Di2015NewLine    private MyType _instance = new MyType();Di2015NewLineDi2015NewLine    public string SayHello()Di2015NewLine    {Di2015NewLine        return _instance.SayHello();Di2015NewLine    }Di2015NewLineDi2015NewLine    public string BaseTypeMethodIWantToUse()Di2015NewLine    {Di2015NewLine        return _instance.BaseTypeMethodIWantToUse();Di2015NewLine    }Di2015NewLine}Di2015NewLine
313352Di2015UniqueSeparatorprivate static readonly Dictionary<string, string> ErrorCodesDi2015NewLine    = new Dictionary<string, string>Di2015NewLine{Di2015NewLine    { "1", "Error One" },Di2015NewLine    { "2", "Error Two" }Di2015NewLine};Di2015NewLine
313674Di2015UniqueSeparatorprivate void /*TreeNode*/ RecursiveAdd(OntologyNode on, TreeNode tn)Di2015NewLine{Di2015NewLine    if (on.Children.Count == 0)Di2015NewLine    {Di2015NewLine        return;             Di2015NewLine    }Di2015NewLine    foreach (OntologyNode child in on.Children)Di2015NewLine    {Di2015NewLine        TreeNode tCur = tn.Nodes.Add(child.Name);Di2015NewLine        tCur.Tag = child;//optional for some selected node eventsDi2015NewLine        RecursiveAdd(child, tCur);               Di2015NewLine    }Di2015NewLine }Di2015NewLine
313674Di2015UniqueSeparatorforeach( OntologyNode on in Nodes )Di2015NewLine {Di2015NewLine     if (on.IsTopLevelNode == true)// internal not pertinent to this code snippetDi2015NewLine     {Di2015NewLine          TreeNode tn = tvOntoBrowser.Nodes.Add(on.Name);Di2015NewLine          tn.Tag = on;Di2015NewLine          if (on.Children.Count > 0)Di2015NewLine          {Di2015NewLine               RecursiveAdd(on, tn);Di2015NewLine          }Di2015NewLine     }Di2015NewLineDi2015NewLine  }Di2015NewLine
313790Di2015UniqueSeparatormyObjects.GetType().GetElementType()Di2015NewLine
313799Di2015UniqueSeparatorPublic Function MembersOfGroup(ByVal GroupName As String) As List(Of DirectoryEntry)Di2015NewLine    Dim members As New List(Of DirectoryEntry)Di2015NewLine    TryDi2015NewLine        Using search As New DirectoryEntry("WinNT://./" & GroupName & ",group")Di2015NewLine            For Each member As Object In DirectCast(search.Invoke("Members"), IEnumerable)Di2015NewLine                Dim memberEntry As New DirectoryEntry(member)Di2015NewLine                members.Add(memberEntry)Di2015NewLine            NextDi2015NewLine        End UsingDi2015NewLine    Catch ex As ExceptionDi2015NewLine        MessageBox.Show(ex.ToString)Di2015NewLine    End TryDi2015NewLine    Return membersDi2015NewLineEnd FunctionDi2015NewLine
313876Di2015UniqueSeparatorusing (new Impersonator("username", "", "password"))Di2015NewLine{Di2015NewLine\tryDi2015NewLine\{Di2015NewLine\\X509Store serviceRuntimeUserCertificateStore = new X509Store(StoreName.My);Di2015NewLine\\string baseDir = AppDomain.CurrentDomain.BaseDirectory;Di2015NewLine\\string certPath = Path.Combine(baseDir, certificateFolder);Di2015NewLineDi2015NewLine\\string certificateFile = "c:\\\\file.cert";Di2015NewLine\\string certificatePassword = "somePassword";\\\Di2015NewLine\\string certificateLocation = certPath + "\\\\" + certificateFile;Di2015NewLineDi2015NewLine\\InstallCertificate(certificateLocation, certificatePassword);Di2015NewLine\}Di2015NewLine\catch (Exception ex)Di2015NewLine\{Di2015NewLine\\Console.WriteLine(ex);Di2015NewLine\}Di2015NewLine}Di2015NewLineDi2015NewLineprivate static void InstallCertificate(string certificatePath, string certificatePassword)Di2015NewLine{Di2015NewLine\tryDi2015NewLine\{Di2015NewLine\    var serviceRuntimeUserCertificateStore = new X509Store(StoreName.My);Di2015NewLine        serviceRuntimeUserCertificateStore.Open(OpenFlags.ReadWrite);Di2015NewLineDi2015NewLine\\X509Certificate2 cert;Di2015NewLineDi2015NewLine\\tryDi2015NewLine\\{Di2015NewLine\\\cert = new X509Certificate2(certificatePath, certificatePassword);Di2015NewLine\\}Di2015NewLine\\catch(Exception ex)Di2015NewLine\\{Di2015NewLine\\\Console.WriteLine("Failed to load certificate " + certificatePath);Di2015NewLine\\\throw new DataException("Certificate appeared to load successfully but also seems to be null.", ex);Di2015NewLine\\}Di2015NewLineDi2015NewLine\\serviceRuntimeUserCertificateStore.Add(cert);\\\Di2015NewLine\\serviceRuntimeUserCertificateStore.Close();Di2015NewLine\}Di2015NewLine\catch(Exception)Di2015NewLine\{Di2015NewLine\\Console.WriteLine("Failed to install {0}.  Check the certificate index entry and verify the certificate file exists.", certificatePath);Di2015NewLine\}Di2015NewLine}Di2015NewLine
313954Di2015UniqueSeparator[XmlArray(ElementName = "TypesOfThings")]Di2015NewLine[XmlArrayItem(ElementName="Thing")]Di2015NewLinepublic List<string> TypesOfThingsDi2015NewLine{Di2015NewLine   get;Di2015NewLine   set;Di2015NewLine}Di2015NewLine
314010Di2015UniqueSeparatorDictionary<string, CustomObj>
314010Di2015UniqueSeparatorDictionary<string, CustomObj> map = new Dictionary<string, CustomObj>();Di2015NewLineDi2015NewLineforeach (string name in stringArray)Di2015NewLine{Di2015NewLine    map[name] = new CustomObj(name);Di2015NewLine}Di2015NewLine
314097Di2015UniqueSeparator    Match m = Regex.Match(htmlSourceString, "href=[\\\\\\"\\\\\\'](http:\\\\/\\\\/|\\\\.\\\\/|\\\\/)?\\\\w+(\\\\.\\\\w+)*(\\\\/\\\\w+(\\\\.\\\\w+)?)*(\\\\/|\\\\?\\\\w*=\\\\w*(&\\\\w*=\\\\w*)*)?[\\\\\\"\\\\\\']");Di2015NewLine    Console.Write("values = ");Di2015NewLine    while (m.Success) Di2015NewLine    { Di2015NewLine        Console.Write(m.Value);Di2015NewLine        Console.Write(", "); // DelimiterDi2015NewLine        m = m.NextMatch();Di2015NewLine    }Di2015NewLine    Console.WriteLine();Di2015NewLine
314130Di2015UniqueSeparatorforeach (var result in aggregationResult) ;Di2015NewLine
314130Di2015UniqueSeparatorIList<T>
314263Di2015UniqueSeparatorContainer.Value.Length > 0 ? Convert.ToDateTime(Container.Value).ToShortTimeString() : ""Di2015NewLine
314263Di2015UniqueSeparatorContainer.Value
314322Di2015UniqueSeparatorbool networkUpDi2015NewLine    = System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable();Di2015NewLine
314322Di2015UniqueSeparatorNetworkInterface[] networkCardsDi2015NewLine    = System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces();Di2015NewLine
314343Di2015UniqueSeparator[System.Xml.Serialization.XmlElement("FooBar")]Di2015NewLinepublic virtual List<FooBar> FooBars Di2015NewLine{ Di2015NewLine    get { return fooBars; } Di2015NewLine    set { fooBars = value; }Di2015NewLine}Di2015NewLine
314343Di2015UniqueSeparator<FooMain xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http:/Di2015NewLine/www.w3.org/2001/XMLSchema">Di2015NewLine  <FooBar>Di2015NewLine    <MyProperty>7</MyProperty>Di2015NewLine  </FooBar>Di2015NewLine  <FooBar>Di2015NewLine    <MyProperty>76</MyProperty>Di2015NewLine  </FooBar>Di2015NewLine  <FooBar>Di2015NewLine    <MyProperty>67</MyProperty>Di2015NewLine  </FooBar>Di2015NewLine</FooMain>Di2015NewLine
314378Di2015UniqueSeparatorPrivate Sub YourGridcontrol_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles YourGridcontrol.MouseDownDi2015NewLine    YourGridcontrol.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.EnterEditMode)Di2015NewLineEnd SubDi2015NewLineDi2015NewLinePrivate Sub YourGridcontrol_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles YourGridcontrol.MouseUpDi2015NewLine    YourGridcontrol.PerformAction(Infragistics.Win.UltraWinGrid.UltraGridAction.ExitEditMode)Di2015NewLineEnd SubDi2015NewLine
314475Di2015UniqueSeparator  char[] alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray();Di2015NewLine
314507Di2015UniqueSeparator[Obsolete]
314507Di2015UniqueSeparator[Obsolete("Not used anymore",true)]Di2015NewLinepublic class MyDeprecatedClassDi2015NewLine{Di2015NewLine\//...Di2015NewLine}Di2015NewLine
315064Di2015UniqueSeparatorclass Foo {Di2015NewLinepublic:Di2015NewLine  int Bar();Di2015NewLine};Di2015NewLineFoo* Foo_Create() { return new Foo(); }Di2015NewLineint Foo_Bar(Foo* pFoo) { return pFoo->Bar(); }Di2015NewLinevoid Foo_Delete(Foo* pFoo) { delete pFoo; }Di2015NewLine
315064Di2015UniqueSeparator[DllImport("Foo.dll")]Di2015NewLinepublic static extern IntPtr Foo_Create();Di2015NewLineDi2015NewLine[DllImport("Foo.dll")]Di2015NewLinepublic static extern int Foo_Bar(IntPtr value);Di2015NewLineDi2015NewLine[DllImport("Foo.dll")]Di2015NewLinepulbic static extern void Foo_Delete(IntPtr value);Di2015NewLine
315109Di2015UniqueSeparatorusing (SqlConnection con = new SqlConnection(connectionString))Di2015NewLine{Di2015NewLine    con.Open();Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        Console.WriteLine("Server is {0}", con.ServerVersion);Di2015NewLine        Console.WriteLine("Clr is {0}", Environment.Version);Di2015NewLine        for (int i = 0; i < 5; i++)Di2015NewLine        {Di2015NewLine            using (SqlCommand cmd = con.CreateCommand())Di2015NewLine            {Di2015NewLine                cmd.CommandText = "insert into TXTEST values ( " + i + " )";Di2015NewLine                cmd.ExecuteNonQuery();Di2015NewLine            }Di2015NewLine            Console.WriteLine("Row inserted");Di2015NewLine        }Di2015NewLine        Thread.Sleep(TimeSpan.FromSeconds(1));Di2015NewLine    }Di2015NewLine    catchDi2015NewLine    {Di2015NewLine        SqlConnection.ClearPool(con);Di2015NewLine        throw;Di2015NewLine    }Di2015NewLine}Di2015NewLine
315137Di2015UniqueSeparatorpublic ActionResult List()Di2015NewLine{Di2015NewLine    List<string> myList = database.GetListOfStrings();Di2015NewLine    (...)Di2015NewLine}Di2015NewLine
315137Di2015UniqueSeparatorpublic ActionResult List()Di2015NewLine{Di2015NewLine    List<string> myList = database.GetListOfStrings();Di2015NewLine    (...)Di2015NewLine    return View("List", myList);Di2015NewLine}Di2015NewLine
315137Di2015UniqueSeparatorpublic partial class List : ViewPage<string>Di2015NewLine{Di2015NewLine    (...)Di2015NewLine}Di2015NewLine
315137Di2015UniqueSeparator<ul>Di2015NewLine    <% foreach(var s in this.ViewData.Model){ %>Di2015NewLine    <li> <%= s %> </li>Di2015NewLine    <% } %>Di2015NewLine</ul>Di2015NewLine
315186Di2015UniqueSeparatorobject
315265Di2015UniqueSeparatorclass FooDi2015NewLine{Di2015NewLine    public string Bar { get; set; }Di2015NewLine}Di2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Type type = typeof(Foo); // possibly from a stringDi2015NewLine        IList list = (IList) Activator.CreateInstance(Di2015NewLine            typeof(List<>).MakeGenericType(type));Di2015NewLineDi2015NewLine        object obj = Activator.CreateInstance(type);Di2015NewLine        type.GetProperty("Bar").SetValue(obj, "abc", null);Di2015NewLine        list.Add(obj);Di2015NewLine    }Di2015NewLine}Di2015NewLine
315296Di2015UniqueSeparatorpublic enum TestDi2015NewLine{Di2015NewLine    One, Two, ThreeDi2015NewLine}Di2015NewLineDi2015NewLinepublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        this.comboBox1.DataSource = Enum.GetNames(typeof(Test));Di2015NewLine    }Di2015NewLineDi2015NewLine    public Test TestDi2015NewLine    {Di2015NewLine        get Di2015NewLine        {Di2015NewLine            return (Test)Enum.Parse(typeof(Test), this.comboBox1.Text);Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            this.comboBox1.Text = value.ToString();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        MessageBox.Show(this.Test.ToString());Di2015NewLineDi2015NewLine        this.Test = Test.Two;Di2015NewLineDi2015NewLine        MessageBox.Show(this.Test.ToString());Di2015NewLine    }Di2015NewLine}Di2015NewLine
315321Di2015UniqueSeparatorDateTimeFormatInfo
315321Di2015UniqueSeparator// Will return JanuaryDi2015NewLinestring name = DateTimeFormatInfo.CurrentInfo.GetMonthName(1);Di2015NewLine
315321Di2015UniqueSeparatorstring[] names = DateTimeFormatInfo.CurrentInfo.MonthNames;Di2015NewLine
315321Di2015UniqueSeparatorDateTimeFormatInfo
315321Di2015UniqueSeparatorCultureInfo
315321Di2015UniqueSeparatorDateTimeFormatInfo.GetInstance
315321Di2015UniqueSeparatorCultureInfo.DateTimeFormat
315369Di2015UniqueSeparatorList<T>.Reverse()
315369Di2015UniqueSeparatorvoid
315369Di2015UniqueSeparatorList<string> names = "Tom,Scott,Bob".Split(',').ToList<string>();Di2015NewLinenames.Reverse();Di2015NewLine
315369Di2015UniqueSeparatorIList<string> names = "Tom,Scott,Bob".Split(',').Reverse().ToList<string>();Di2015NewLine
315369Di2015UniqueSeparatorIEnumerable<T>
315369Di2015UniqueSeparatorList<T>
315369Di2015UniqueSeparatorEnumerable.Reverse<T>()
315369Di2015UniqueSeparatorList<T>.Reverse()
315369Di2015UniqueSeparatorstring[] namesArray = "Tom,Scott,Bob".Split(',');Di2015NewLineList<string> namesList = new List<string>(namesArray.Length);Di2015NewLinenamesList.AddRange(namesArray);Di2015NewLinenamesList.Reverse();Di2015NewLine
315417Di2015UniqueSeparatorSqlConnection
315417Di2015UniqueSeparatorusing
315611Di2015UniqueSeparator  public static Bitmap GetBitmap( string filename )Di2015NewLine  {Di2015NewLine     Bitmap retBitmap = null;Di2015NewLine     string path = String.Concat( BitmapDir, filename );Di2015NewLine     if ( File.Exists( path ) )Di2015NewLine     {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine           retBitmap = new Bitmap( path, true );Di2015NewLine        }Di2015NewLine        catch { }Di2015NewLine     }Di2015NewLine     return retBitmap;Di2015NewLine  }Di2015NewLine
315611Di2015UniqueSeparatorstring[] files = Directory.GetFiles( BitmapDir, "*.gif" );Di2015NewLine
315658Di2015UniqueSeparator#if !SILVERLIGHTDi2015NewLine#define NOT_SILVERLIGHTDi2015NewLine#endifDi2015NewLineDi2015NewLine[Conditional("NOT_SILVERLIGHT")]Di2015NewLineprivate void DoStuffThatSilverlightCant() {...}Di2015NewLine
315721Di2015UniqueSeparatorusing Microsoft.Office.Interop.Excel;Di2015NewLineDi2015NewLineXlConslidationFunction func = (XlConsolidationFunction)Di2015NewLine                               Enum.Parse( typeof(XlConsolidationFunction),Di2015NewLine                                           stringVal );Di2015NewLine
315835Di2015UniqueSeparatorobject c = new FooBar();Di2015NewLineif(c is FooBar)Di2015NewLine     Console.WriteLine("FOOBAR!!!");Di2015NewLine
315851Di2015UniqueSeparatorstatic string SanitizeHtml(string html)Di2015NewLine{Di2015NewLine    string acceptable = "script|link|title";Di2015NewLine    string stringPattern = @"</?(?(?=" + acceptable + @")notag|[a-zA-Z0-9]+)(?:\\s[a-zA-Z0-9\\-]+=?(?:(["",']?).*?\\1?)?)*\\s*/?>";Di2015NewLine    return Regex.Replace(html, stringPattern, "sausage");Di2015NewLine}Di2015NewLine
315950Di2015UniqueSeparatordb.Users.OrderByDescending(u => u.UserId).FirstOrDefault()Di2015NewLine
315980Di2015UniqueSeparatorSCOPE_IDENTITY()
315980Di2015UniqueSeparatorCREATE PROCEDURE dbo.MyProcedureDi2015NewLine(Di2015NewLine    @RowId INT = NULL OUTPUTDi2015NewLine)Di2015NewLineASDi2015NewLineDi2015NewLineINSERT INTO MyTableDi2015NewLine(Di2015NewLine    Column1Di2015NewLine    ,Column2Di2015NewLine    ,...Di2015NewLine)Di2015NewLineVALUESDi2015NewLine(Di2015NewLine    @Param1Di2015NewLine    ,@Param2Di2015NewLine    ,...Di2015NewLine);Di2015NewLineDi2015NewLineSET @RowId = SCOPE_IDENTITY();Di2015NewLine
315980Di2015UniqueSeparator;
315980Di2015UniqueSeparatorvar sql = "INSERT INTO MyTable (Column1, Column2, ...) VALUES (@P1, @P2, ...);" +Di2015NewLine          "SELECT SCOPE_IDENTITY();";Di2015NewLine
315980Di2015UniqueSeparatorExecuteScalar
315980Di2015UniqueSeparatorvar sql = "DECLARE @RowId INT;" + Di2015NewLine          "INSERT INTO MyTable (Column1, Column2, ...) VALUES (@P1, @P2, ...);" +Di2015NewLine          "SET @RowId = SCOPE_IDENTITY();" +Di2015NewLine          "INSERT INTO MyOtherTable (Column1, ...) VALUES (@P3, @P4, ...);";Di2015NewLine
315980Di2015UniqueSeparatorSET NOCOUNT ON;
315985Di2015UniqueSeparatorvar item = from InventoryItem item inDi2015NewLine              db.Inventory.Include("ItemTypeReference").Include("OrderLineItems")Di2015NewLine           where item.ID == idDi2015NewLine           select item;Di2015NewLine
315985Di2015UniqueSeparatorusing (DataContext db = new DataContext())Di2015NewLine{Di2015NewLine    DataLoadOptions options = new DataLoadOptions();Di2015NewLine    options.LoadWith<InventoryItem>(ii => ii.ItemTypeReference);Di2015NewLine    options.LoadWith<InventoryItem>(ii => ii.OrderLineItems);Di2015NewLine    db.LoadOptions = options;Di2015NewLineDi2015NewLine    var item = from InventoryItem item in db.InventoryDi2015NewLine               where item.ID == idDi2015NewLine               select item;Di2015NewLine}Di2015NewLine
316016Di2015UniqueSeparatorDirectory.GetFullPath().Split("\\\\").Length;Di2015NewLine
316583Di2015UniqueSeparatorConsole.Write("What is your name? ");Di2015NewLinevar name = Console.ReadLine();Di2015NewLine
316695Di2015UniqueSeparatorString sDescription =Di2015NewLine@"Options:Di2015NewLine    -t          Description of -t argument.";Di2015NewLine
316695Di2015UniqueSeparatorstring formatString = "{0:10} {1}";Di2015NewLineConsole.WriteLine("Options:");Di2015NewLineConsole.WriteLine(formatString, "-t", "Description of -t argument.");Di2015NewLineConsole.WriteLine(formatString, "-b", "Description of -b argument.");Di2015NewLine
316731Di2015UniqueSeparator        double x = 3.65, y = 0.05, z = 3.7;Di2015NewLine        Console.WriteLine((x + y) == z); // falseDi2015NewLine
316913Di2015UniqueSeparatorstring file = Path.Combine(dir, Guid.NewGuid().ToString() + ".tmp");Di2015NewLine// perhaps check File.Exists(file), but it would be a long-shot...Di2015NewLinebool canCreate;Di2015NewLinetryDi2015NewLine{Di2015NewLine    using (File.Create(file)) { }Di2015NewLine    File.Delete(file);Di2015NewLine    canCreate = true;Di2015NewLine}Di2015NewLinecatchDi2015NewLine{Di2015NewLine    canCreate = false;Di2015NewLine}Di2015NewLine
316925Di2015UniqueSeparatorpublic static T Parse<T, U>(string datadictionary) where T : List<U>Di2015NewLine
316925Di2015UniqueSeparatorpublic static List<T> Parse<T>(string datadictionary)Di2015NewLine
316925Di2015UniqueSeparatorList<int> data = Parse<int>(whatever);Di2015NewLine
316925Di2015UniqueSeparatorList<T>
316925Di2015UniqueSeparatorIList<T>
316996Di2015UniqueSeparator<%=Html.ActionLink("Modify Villa", "Modify", new {id = "1"})%>Di2015NewLine
316996Di2015UniqueSeparator<%=Html.ActionLink("Modify Villa", "Modify", "Villa", new {id = "1"}, null)%>Di2015NewLine
317075Di2015UniqueSeparator(?=[\\s\\S]*?\\<PARTITION)(?![\\s\\S]+?\\<SEM\\>)\\<SEM\\>Di2015NewLine
317075Di2015UniqueSeparator(?=[\\s\\S]*?\\<PARTITION) means "While ahead somewhere is a PARTITION tag"Di2015NewLine(?![\\s\\S]+?\\<SEM\\>) means "While ahead somewhere is not a SEM tag"Di2015NewLine\\<SEM\\> means "Match a SEM tag"Di2015NewLine
317076Di2015UniqueSeparatorSELECT parent.*,Di2015NewLine       (SELECT * FROM childDi2015NewLine       WHERE child.parentid = parent.id FOR XML PATH('child'), TYPE)Di2015NewLineFROM parentDi2015NewLineFOR XML PATH('parent')Di2015NewLine
317076Di2015UniqueSeparator// sample from MSDNDi2015NewLineNorthwnd db = new Northwnd(@"c:\\northwnd.mdf");Di2015NewLineDataLoadOptions dlo = new DataLoadOptions();Di2015NewLinedlo.LoadWith<Customer>(c => c.Orders);Di2015NewLinedb.LoadOptions = dlo;Di2015NewLineDi2015NewLinevar londonCustomers =Di2015NewLine    from cust in db.CustomersDi2015NewLine    where cust.City == "London"Di2015NewLine    select cust;Di2015NewLineDi2015NewLineforeach (var custObj in londonCustomers)Di2015NewLine{Di2015NewLine    Console.WriteLine(custObj.CustomerID);Di2015NewLine}Di2015NewLine
317076Di2015UniqueSeparatorLoadWith
317104Di2015UniqueSeparatorhandle.exe
317201Di2015UniqueSeparatorIDisposable
317201Di2015UniqueSeparatorIDisposable
317201Di2015UniqueSeparatorDispose()
317201Di2015UniqueSeparatorIDisposable
317201Di2015UniqueSeparator#if DEBUGDi2015NewLine    ~Foo() {Di2015NewLine        // complain loudly that smoebody forgot to dispose...Di2015NewLine    }Di2015NewLine#endifDi2015NewLine
317201Di2015UniqueSeparatorDispose
317201Di2015UniqueSeparatorGC.SuppressFinalize
317248Di2015UniqueSeparator public ActionResult Add( string name ) {Di2015NewLine    ....Di2015NewLine }Di2015NewLineDi2015NewLine orDi2015NewLineDi2015NewLine public ActionResult Add( FormCollection form ) {Di2015NewLine      string name = form["Name"];Di2015NewLine }Di2015NewLineDi2015NewLine orDi2015NewLineDi2015NewLine public ActionResult Add( [Bind(Prefix="")]Villa villa ) {Di2015NewLine       villa.Name ...Di2015NewLine }Di2015NewLine
317293Di2015UniqueSeparator ICartListItemDi2015NewLine
317293Di2015UniqueSeparator List<ICartListItem>Di2015NewLine
317379Di2015UniqueSeparatorList<Foo>
317379Di2015UniqueSeparatorList<IFoo>
317379Di2015UniqueSeparatorMyOwnFoo
317379Di2015UniqueSeparatorIFoo
317379Di2015UniqueSeparatorList<IFoo>
317379Di2015UniqueSeparatorList<Foo>
317477Di2015UniqueSeparatorIEnumerable<SomethingAppropriate>Di2015NewLineIEnumerator<SomethingApropriate>Di2015NewLine
317477Di2015UniqueSeparatorpublic IEnumerable<AClass> YourMethod()Di2015NewLine{Di2015NewLine    foreach (XElement header in headersXml.Root.Elements())Di2015NewLine    {Di2015NewLine        yield return (ParseHeader(header));                Di2015NewLine    }Di2015NewLine}Di2015NewLine
317549Di2015UniqueSeparatorSelect(i => new SubItem() {Name = "foo", MagicNumber = i});Di2015NewLine
317549Di2015UniqueSeparatorSubItem
317549Di2015UniqueSeparatorSubItem
317549Di2015UniqueSeparatorvar items = range.Select(i => new SubItem() {Name = "foo", MagicNumber = i}).ToList();Di2015NewLine
317608Di2015UniqueSeparatorint[] validIds = { 1, 4, 5 };Di2015NewLinevar query = from order in db.OrdersDi2015NewLine            where validIds.Contains(order.Id)Di2015NewLine            select orderDi2015NewLine
317608Di2015UniqueSeparatorint[] validIds = { 1, 4, 5 };Di2015NewLinevar query = db.Orders.Where(order => validIds.Contains(order.Id));Di2015NewLine
317753Di2015UniqueSeparatorreturn RedirectToAction("Index")
318116Di2015UniqueSeparatorpublic IEnumerator<Expression<T>> GetEnumerator()Di2015NewLine{Di2015NewLine    if (IsLeaf)Di2015NewLine    {Di2015NewLine        yield return this;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        foreach (Expression<T> expr in LeftExpression)Di2015NewLine        {Di2015NewLine            yield return expr;Di2015NewLine        }Di2015NewLine        foreach (Expression<T> expr in RightExpression)Di2015NewLine        {Di2015NewLine            yield return expr;Di2015NewLine        }Di2015NewLine        yield return this;Di2015NewLine    }Di2015NewLine}Di2015NewLine
318119Di2015UniqueSeparatorthings.Sort((t1, t2) => Di2015NewLine{Di2015NewLine if (t1 == null)Di2015NewLine {Di2015NewLine   return (t2 == null) ? 0 : -1;Di2015NewLine }Di2015NewLine if (t2 == null)Di2015NewLine {Di2015NewLine   return 1;Di2015NewLine }Di2015NewLine return t1.EditDate.CompareTo(t2.EditDate);Di2015NewLine});Di2015NewLine
318119Di2015UniqueSeparatorEndDate
318119Di2015UniqueSeparatornull
318119Di2015UniqueSeparatorEndDate
318119Di2015UniqueSeparatornull
318119Di2015UniqueSeparatort1
318119Di2015UniqueSeparatort2
318119Di2015UniqueSeparatornull
318280Di2015UniqueSeparator[Authorize(Roles="Admin, Editor")]Di2015NewLinepublic ActionResult Delete(int id){Di2015NewLine    (...)Di2015NewLine}Di2015NewLine
318280Di2015UniqueSeparator[AcceptVerbs(HttpVerbs.Post)]Di2015NewLine[Authorize(Roles="Admin, Editor")]Di2015NewLinepublic ActionResult Delete(int id){Di2015NewLine    (...)Di2015NewLine}Di2015NewLine
318493Di2015UniqueSeparator    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        IEnumerable<int> list = new List<int>() { -5, 3, -2, 1, 2, -7 };Di2015NewLine        IEnumerable<bool> isPositiveList = list.Select<int, bool>(i => i > 0);Di2015NewLineDi2015NewLine        foreach (bool isPositive in isPositiveList)Di2015NewLine        {Di2015NewLine            Console.WriteLine(isPositive);Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.ReadKey();        Di2015NewLine    }Di2015NewLine
318617Di2015UniqueSeparatortryDi2015NewLine   {Di2015NewLine     using (ZipFile zip = new ZipFile("MyZipFile.zip")Di2015NewLine     {Di2015NewLine       zip.AddFile("c:\\\\photos\\\\personal\\\\7440-N49th.png");Di2015NewLine       zip.AddFile("c:\\\\Desktop\\\\2005_Annual_Report.pdf");Di2015NewLine       zip.AddFile("ReadMe.txt");Di2015NewLine       zip.Save();Di2015NewLine     }Di2015NewLine   }Di2015NewLine   catch (System.Exception ex1)Di2015NewLine   {Di2015NewLine     System.Console.Error.WriteLine("exception: " + ex1);Di2015NewLine   }Di2015NewLine
318634Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic; Di2015NewLineusing System.Text; Di2015NewLineusing System.Management; Di2015NewLineDi2015NewLineDi2015NewLineclass ProcessObserver : IDisposable Di2015NewLine{ Di2015NewLine    ManagementEventWatcher m_processStartEvent = null; Di2015NewLine    ManagementEventWatcher m_processStopEvent = null; Di2015NewLineDi2015NewLineDi2015NewLine    public ProcessObserver(string processName, EventArrivedEventHandler onStart, EventArrivedEventHandler onStop) Di2015NewLine    { Di2015NewLine        WqlEventQuery startQuery = new WqlEventQuery("Win32_ProcessStartTrace", String.Format("ProcessName='{0}'", processName)); Di2015NewLine        m_processStartEvent = new ManagementEventWatcher(startQuery); Di2015NewLineDi2015NewLineDi2015NewLine        WqlEventQuery stopQuery = new WqlEventQuery("Win32_ProcessStopTrace", String.Format("ProcessName='{0}'", processName)); Di2015NewLine        m_processStopEvent = new ManagementEventWatcher(stopQuery); Di2015NewLineDi2015NewLineDi2015NewLine        if (onStart != null) Di2015NewLine            m_processStartEvent.EventArrived += onStart; Di2015NewLineDi2015NewLineDi2015NewLine        if (onStop != null) Di2015NewLine            m_processStopEvent.EventArrived += onStop; Di2015NewLine    } Di2015NewLineDi2015NewLineDi2015NewLine    public void Start() Di2015NewLine    { Di2015NewLine        m_processStartEvent.Start(); Di2015NewLine        m_processStopEvent.Start(); Di2015NewLine    } Di2015NewLineDi2015NewLineDi2015NewLine    public void Dispose() Di2015NewLine    { Di2015NewLine        m_processStartEvent.Dispose(); Di2015NewLine        m_processStopEvent.Dispose(); Di2015NewLine    } Di2015NewLine}Di2015NewLine
318650Di2015UniqueSeparatornew BindingList<MyObject>(orderedList.ToList())Di2015NewLine
318667Di2015UniqueSeparator        // the dataDi2015NewLine        var outer = new[] {Di2015NewLine            new[] {Di2015NewLine                new {ID=1,Amount=4}, // [0] [Child_0] [ID: 1, Amount: 4]Di2015NewLine                new {ID=2,Amount=7}  // [0] [Child_1] [ID: 2, Amount: 7]Di2015NewLine            },Di2015NewLine            new[] {Di2015NewLine                new {ID=1, Amount=2}, // [1] [Child_0] [ID: 1, Amount: 2]Di2015NewLine                new {ID=2, Amount=4}  // [1] [Child_1] [ID: 2, Amount: 4]Di2015NewLine            },Di2015NewLine            new[] {Di2015NewLine                new {ID=1, Amount=5}, // [2] [Child_0] [ID: 1, Amount: 5]Di2015NewLine                new {ID=2, Amount=3}  // [2] [Child_1] [ID: 2, Amount: 3]Di2015NewLine            }Di2015NewLine        };Di2015NewLine        var qry = from x in outerDi2015NewLine                  from y in xDi2015NewLine                  group y by y.ID into grpDi2015NewLine                  select new { Id = grp.Key, Avg = grp.Average(z => z.Amount) };Di2015NewLineDi2015NewLine        foreach (var item in qry)Di2015NewLine        {Di2015NewLine            Console.WriteLine("{0}: {1}", item.Id, item.Avg);Di2015NewLine        }Di2015NewLine
319104Di2015UniqueSeparatorIs<ColumnName>Null()
319104Di2015UniqueSeparatorusing System.Di2015NewLineusing System.Data;Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        DataTable dt = new DataTable();Di2015NewLine        dt.Columns.Add("test", typeof (char));Di2015NewLine        dt.Columns["test"].AllowDBNull = true;Di2015NewLineDi2015NewLine        DataRow dr = dt.Rows.Add();Di2015NewLine        char? test;Di2015NewLineDi2015NewLine        tryDi2015NewLine        {Di2015NewLine            test = (char?)dr["test"];Di2015NewLine        }Di2015NewLine        catch (InvalidCastException)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Simply casting to a nullable type doesn't work.");Di2015NewLine        }Di2015NewLineDi2015NewLine        test  = dr.Field<char?>("test");Di2015NewLine        if (test == null)Di2015NewLine        {Di2015NewLine            Console.WriteLine("The Field extension method in .NET 3.5 converts System.DBNull to null.");                Di2015NewLine        }Di2015NewLineDi2015NewLine        test = (dr["test"] is DBNull) ? null : (char?) dr["test"];Di2015NewLine        if (test == null)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Before .NET 3.5, you have to check the type of the column's value.");Di2015NewLine        }Di2015NewLineDi2015NewLine        test = (dr["test"] == DBNull.Value) ? null : (char?) dr["test"];Di2015NewLine        if (test == null)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Comparing the field's value to DBNull.Value is very marginally faster, but takes a bit more code.");Di2015NewLine        }Di2015NewLineDi2015NewLine        // now let's put the data backDi2015NewLineDi2015NewLine        tryDi2015NewLine        {Di2015NewLine            dr["test"] = test;Di2015NewLine        }Di2015NewLine        catch (ArgumentException)Di2015NewLine        {Di2015NewLine            Console.WriteLine("You can't set nullable columns to null.");Di2015NewLine        }Di2015NewLineDi2015NewLine        dr.SetField("test", test);Di2015NewLine        if (dr["test"] is DBNull)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Again, in .NET 3.5 extension methods make this relatively easy.");Di2015NewLine        }Di2015NewLineDi2015NewLine        dr["test"] = (object)test ?? DBNull.Value;Di2015NewLine        if (dr["test"] is DBNull)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Before .NET 3.5, you can use the null coalescing operator, but note the awful cast required.");Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLine
319300Di2015UniqueSeparatorDataGridView
319300Di2015UniqueSeparatorAutoGenerateColumn
319300Di2015UniqueSeparatorDataPropertyName
319300Di2015UniqueSeparatorDataGridView
319300Di2015UniqueSeparatorTypeDescriptor
319300Di2015UniqueSeparatorList<T>
319300Di2015UniqueSeparatorT
319300Di2015UniqueSeparatorobject
319300Di2015UniqueSeparatorArrayList
319300Di2015UniqueSeparatorArrayList
319312Di2015UniqueSeparatorProcess p = new Process();Di2015NewLinep.StartInfo.UseShellExecute = false;Di2015NewLinep.StartInfo.RedirectStandardOutput = true;Di2015NewLinep.StartInfo.FileName = "myExec.exe";Di2015NewLinep.Start();Di2015NewLine
319770Di2015UniqueSeparatorint first = 0, last = 9; // TODO: Set first and last to correct values according to page number and sizeDi2015NewLineSearcher searcher = new IndexSearcher(YourIndexFolder);Di2015NewLineQuery query = BuildQuery(); // TODO: Implement BuildQueryDi2015NewLineHits hits = searcher.Search(query);Di2015NewLineList<Document> results = new List<Document>();Di2015NewLinefor (int i = first; i <= last && i < hits.Length(); i++)Di2015NewLine    results.Add(hits.Doc(i));Di2015NewLineDi2015NewLine// results now contains a page of documents matching the queryDi2015NewLine
319826Di2015UniqueSeparatorpublic T RandomEnum<T>()Di2015NewLine{ Di2015NewLine  T[] values = (T[]) Enum.GetValues(typeof(T));Di2015NewLine  return values[new Random().Next(0,values.Length)];Di2015NewLine}Di2015NewLine
319976Di2015UniqueSeparatorvar firstFiveItems = myList.Take(5);Di2015NewLine
319976Di2015UniqueSeparatorvar secondFiveItems = myList.Skip(5).Take(5);Di2015NewLine
319976Di2015UniqueSeparatorvar firstFiveArrivals = myList.OrderBy(i => i.ArrivalTime).Take(5);Di2015NewLine
320035Di2015UniqueSeparator<Window x:Class="DataBinding.MyWindow" ...Di2015NewLine    Title="MyWindow" Height="300" Width="300">Di2015NewLine    <StackPanel x:Name="TopLevelContainer">Di2015NewLine        <TextBox x:Name="txtValue"  Background="AliceBlue" Text="{Binding Path=MyDotNetProperty}" />Di2015NewLine        <TextBlock TextWrapping="Wrap">We're twin blue boxes bound to the same property.</TextBlock>Di2015NewLine        <TextBox x:Name="txtValue2"  Background="AliceBlue" Text="{Binding Path=MyDotNetProperty}" />Di2015NewLine    </StackPanel>Di2015NewLine</Window>Di2015NewLine
320035Di2015UniqueSeparatorpublic partial class MyWindow : Window, INotifyPropertyChangedDi2015NewLine{Di2015NewLine    public MyWindow()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        this.MyDotNetProperty = "Go ahead. Change my value.";Di2015NewLine        TopLevelContainer.DataContext = this;Di2015NewLine    }Di2015NewLineDi2015NewLine    private string m_sValue;Di2015NewLine    public string MyDotNetPropertyDi2015NewLine    {Di2015NewLine        get { return m_sValue; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            m_sValue = value;Di2015NewLine            if (null != this.PropertyChanged)Di2015NewLine            {Di2015NewLine                PropertyChanged(this, new PropertyChangedEventArgs("MyDotNetProperty"));Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    #region INotifyPropertyChanged MembersDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine    #endregionDi2015NewLine}Di2015NewLine
320145Di2015UniqueSeparatorDi2015NewLineusing System;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.ComponentModel;Di2015NewLineDi2015NewLinenamespace NoMinimizeTestDi2015NewLine{Di2015NewLine    public class MinimizeControlForm : FormDi2015NewLine    {Di2015NewLine        private const int WM_SYSCOMMAND = 0x0112;Di2015NewLine        private const int SC_MINIMIZE = 0xf020;Di2015NewLineDi2015NewLine        protected MinimizeControlForm()Di2015NewLine        {Di2015NewLine            AllowMinimize = true;Di2015NewLine        }Di2015NewLineDi2015NewLine        protected override void WndProc(ref Message m)Di2015NewLine        {Di2015NewLine            if (!AllowMinimize)Di2015NewLine            {Di2015NewLine                if (m.Msg == WM_SYSCOMMAND)Di2015NewLine                {Di2015NewLine                    if (m.WParam.ToInt32() == SC_MINIMIZE)Di2015NewLine                    {Di2015NewLine                        m.Result = IntPtr.Zero;Di2015NewLine                        return;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine            base.WndProc(ref m);Di2015NewLine        }Di2015NewLineDi2015NewLine        [Browsable(true)]Di2015NewLine        [Category("Behavior")]Di2015NewLine        [Description("Specifies whether to allow the window to minimize when the minimize button and command are enabled.")]Di2015NewLine        [DefaultValue(true)]Di2015NewLine        public bool AllowMinimizeDi2015NewLine        {Di2015NewLine            get;Di2015NewLine            set;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
320145Di2015UniqueSeparatorDi2015NewLineusing System;Di2015NewLineusing System.Windows.Forms;Di2015NewLineusing System.ComponentModel;Di2015NewLineDi2015NewLinenamespace NoMinimizeTestDi2015NewLine{Di2015NewLine    public class MinimizeControlForm : FormDi2015NewLine    {Di2015NewLine        private const int WM_SYSCOMMAND = 0x0112;Di2015NewLine        private const int SC_MINIMIZE = 0xf020;Di2015NewLineDi2015NewLine        protected MinimizeControlForm()Di2015NewLine        {Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        protected override void WndProc(ref Message m)Di2015NewLine        {Di2015NewLine            if (m.Msg == WM_SYSCOMMAND)Di2015NewLine            {Di2015NewLine                if (m.WParam.ToInt32() == SC_MINIMIZE && !CheckMinimizingAllowed())Di2015NewLine                {Di2015NewLine                    m.Result = IntPtr.Zero;Di2015NewLine                    return;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            base.WndProc(ref m);Di2015NewLine        }Di2015NewLineDi2015NewLine        private bool CheckMinimizingAllowed()Di2015NewLine        {Di2015NewLine            CancelEventArgs args = new CancelEventArgs(false);Di2015NewLine            OnMinimizing(args);Di2015NewLine            return !args.Cancel;Di2015NewLine        }Di2015NewLineDi2015NewLine        [Browsable(true)]Di2015NewLine        [Category("Behavior")]Di2015NewLine        [Description("Allows a listener to prevent a window from being minimized.")]Di2015NewLine        public event CancelEventHandler Minimizing;Di2015NewLineDi2015NewLine        protected virtual void OnMinimizing(CancelEventArgs e)Di2015NewLine        {Di2015NewLine            if (Minimizing != null)Di2015NewLine                Minimizing(this, e);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
320164Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // Fetch your XML here and transform it.  This string representsDi2015NewLine    // the transformed outputDi2015NewLine    string content = @"Di2015NewLine        <asp:Button runat=""server"" Text=""Hello"" />Di2015NewLine        <asp:Button runat=""server"" Text=""World"" />";Di2015NewLineDi2015NewLine    var controls = ParseControl(content);Di2015NewLineDi2015NewLine    foreach (var control in controls)Di2015NewLine    {Di2015NewLine        // Wire up events, change settings etc hereDi2015NewLine    }Di2015NewLineDi2015NewLine    // placeHolder is simply an ASP.Net PlaceHolder control on the pageDi2015NewLine    // where I would like the controls to end upDi2015NewLine    placeHolder.Controls.Add(controls);Di2015NewLine}Di2015NewLine
320293Di2015UniqueSeparatorbinding.DataSourceUpdateMode = DataSourceUpdateMode.OnPropertyChanged;
320293Di2015UniqueSeparatorDataBindings.Add(...)
320293Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Diagnostics;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLineclass MyForm : FormDi2015NewLine{Di2015NewLine    public MyForm()Di2015NewLine    {Di2015NewLine        MyBusinessObject obj = new MyBusinessObject();Di2015NewLine        Button btn = new Button();Di2015NewLine        btn.Click += delegate { Foo++; };Di2015NewLine        DataBindings.Add("Foo", obj, "Bar", false, DataSourceUpdateMode.OnPropertyChanged);Di2015NewLine        DataBindings.Add("Text", obj, "Bar");Di2015NewLine        Controls.Add(btn);Di2015NewLine    }Di2015NewLineDi2015NewLine    private int foo;Di2015NewLine    public event EventHandler FooChanged;Di2015NewLine    public int FooDi2015NewLine    {Di2015NewLine        get { return foo; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (foo != value)Di2015NewLine            {Di2015NewLine                foo = value;Di2015NewLine                Debug.WriteLine("Foo changed to " + foo);Di2015NewLine                if (FooChanged != null) FooChanged(this, EventArgs.Empty);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass MyBusinessObjectDi2015NewLine{Di2015NewLine    private int bar;Di2015NewLine    public event EventHandler BarChanged;Di2015NewLine    public int BarDi2015NewLine    {Di2015NewLine        get { return bar; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (bar != value)Di2015NewLine            {Di2015NewLine                bar = value;Di2015NewLine                Debug.WriteLine("Bar changed to " + bar);Di2015NewLine                if (BarChanged != null) BarChanged(this, EventArgs.Empty);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinestatic class ProgramDi2015NewLine{Di2015NewLine    [STAThread]Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Application.Run(new MyForm());Di2015NewLine    }Di2015NewLine}Di2015NewLine
320320Di2015UniqueSeparatorfor(int i = 0 ; i < arr.Length ; i++) {Di2015NewLine    arr[i] = value;Di2015NewLine}Di2015NewLine
320320Di2015UniqueSeparatorArray.Clear
320320Di2015UniqueSeparatorpublic static void FillChar<T>(this T[] arr, T value) {...}Di2015NewLine
320320Di2015UniqueSeparatorint[] data = {1,2,3,4,5};Di2015NewLine//...Di2015NewLinedata.FillChar(7);Di2015NewLine
320320Di2015UniqueSeparatorBuffer.BlockCopy
320325Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing iTextSharp.text.pdf;Di2015NewLineusing iTextSharp.text.xml;Di2015NewLinenamespace GetPages_PDFDi2015NewLine{Di2015NewLine  class ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine      {Di2015NewLine       // Right side of equation is location of YOUR pdf fileDi2015NewLine        string ppath = "C:\\\\aworking\\\\Hawkins.pdf";Di2015NewLine        PdfReader pdfReader = new PdfReader(ppath);Di2015NewLine        int numberOfPages = pdfReader.NumberOfPages;Di2015NewLine        Console.WriteLine(numberOfPages);Di2015NewLine        Console.ReadLine();Di2015NewLine      }Di2015NewLine   }Di2015NewLine}Di2015NewLine
320375Di2015UniqueSeparator    XAttribute attrib = new XAttribute("Foo", "12345");Di2015NewLine    int i = (int)attrib;Di2015NewLine    string s = (string)attrib;Di2015NewLine
320375Di2015UniqueSeparatorNonNullable<T>
320451Di2015UniqueSeparatorFunc<string> getter = () => blah_de_blah;Di2015NewLineAction<string> setter = x => blah_de_blah = x;Di2015NewLine
320451Di2015UniqueSeparatorvar myHuge = foo.bar.bwah.blah.whatever.very.very.huge;Di2015NewLine// now access myHuge.a everywhereDi2015NewLine
320478Di2015UniqueSeparator(?<=n)nDi2015NewLine
320478Di2015UniqueSeparator(?=nn)n
320478Di2015UniqueSeparator(n)(?=(n))Di2015NewLine
320488Di2015UniqueSeparatorif (txtPackage.Text == "abc")Di2015NewLine{Di2015NewLineDi2015NewLine//Di2015NewLineDi2015NewLine}Di2015NewLine
320518Di2015UniqueSeparator    ConverterBase typeConverter = new ConverterBase();Di2015NewLine    var target = Expression.Parameter(typeof(U), "target");Di2015NewLine    var getter = Expression.MakeMemberAccess(target, info);Di2015NewLine    var converter = Expression.Constant(typeConverter, typeof(ConverterBase));Di2015NewLineDi2015NewLine    return Expression.Lambda<Func<U, string>>(Di2015NewLine    Expression.Call(converter, typeof(ConverterBase).GetMethod("FieldToString"),Di2015NewLine        getter), target).Compile();Di2015NewLine
320518Di2015UniqueSeparator    MethodInfo method = typeof(ConverterBase).GetMethod("FieldToString");Di2015NewLine    return Expression.Lambda<Func<U, string>>(Di2015NewLine        Expression.Call(converter, method,Di2015NewLine            Expression.Convert(getter, method.GetParameters().Single().ParameterType)),Di2015NewLine            target).Compile();Di2015NewLine
320653Di2015UniqueSeparatorfunction getplaceholders() {Di2015NewLine        var placeholders = $('.ui-sortable');Di2015NewLine        var results = new Array();Di2015NewLine        placeholders.each(function() {Di2015NewLine            var ph = $(this).attr('id');Di2015NewLine            var sections = $(this).find('.sort');Di2015NewLine            var section;Di2015NewLineDi2015NewLine            sections.each(function(i, item) {Di2015NewLine                var sid = $(item).attr('id');Di2015NewLine                var o = { 'SectionId': sid, 'Placeholder': ph, 'Position': i };Di2015NewLine                results.push(o);Di2015NewLine            });Di2015NewLine        });Di2015NewLine        var postData = { widgets: results };Di2015NewLine        var widgets = results;Di2015NewLine        $.ajax({Di2015NewLine            url: '/portal/Designer.mvc/SaveOrUpdate',Di2015NewLine            type: 'POST',Di2015NewLine            dataType: 'json',Di2015NewLine            data: $.toJSON(widgets),Di2015NewLine            contentType: 'application/json; charset=utf-8',Di2015NewLine            success: function(result) {Di2015NewLine                alert(result.Result);Di2015NewLine            }Di2015NewLine        });Di2015NewLine    };Di2015NewLine
320653Di2015UniqueSeparator[JsonFilter(Param = "widgets", JsonDataType = typeof(List<PageDesignWidget>))]Di2015NewLinepublic JsonResult SaveOrUpdate(List<PageDesignWidget> widgetsDi2015NewLine
320653Di2015UniqueSeparatorpublic class JsonFilter : ActionFilterAttributeDi2015NewLine{Di2015NewLine    public string Param { get; set; }Di2015NewLine    public Type JsonDataType { get; set; }Di2015NewLine    public override void OnActionExecuting(ActionExecutingContext filterContext)Di2015NewLine    {Di2015NewLine        if (filterContext.HttpContext.Request.ContentType.Contains("application/json"))Di2015NewLine        {Di2015NewLine            string inputContent;Di2015NewLine            using (var sr = new StreamReader(filterContext.HttpContext.Request.InputStream))Di2015NewLine            {Di2015NewLine                inputContent = sr.ReadToEnd();Di2015NewLine            }Di2015NewLine            var result = JsonConvert.DeserializeObject(inputContent, JsonDataType);Di2015NewLine            filterContext.ActionParameters[Param] = result;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
320670Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Diagnostics;Di2015NewLineDi2015NewLinenamespace ProcessStatusDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Process[] processes = Process.GetProcesses();Di2015NewLineDi2015NewLine            foreach (Process process in processes)Di2015NewLine            {Di2015NewLine                Console.WriteLine("Process Name: {0}, Responding: {1}", process.ProcessName, process.Responding);Di2015NewLine            }Di2015NewLineDi2015NewLine            Console.Write("press enter");Di2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
320863Di2015UniqueSeparatorIList employeesWithAddresses = sess.CreateCriteria(typeof(Employee))Di2015NewLine    .CreateCriteria("Address", "address").Add( Expression.IsNotNull("Id") )Di2015NewLine    .List();Di2015NewLine
320877Di2015UniqueSeparatorServerConnection conn = new ServerConnection("rune\\\\sql2008");Di2015NewLineServer server = new Server(conn);Di2015NewLineDi2015NewLineDatabase newdb = new Database(server, "new database");Di2015NewLinenewdb.Create();Di2015NewLineDi2015NewLineTransfer transfer = new Transfer(server.Databases["source database"]);Di2015NewLinetransfer.CopyAllObjects = true;Di2015NewLinetransfer.CopyAllUsers = true;Di2015NewLinetransfer.Options.WithDependencies = true;Di2015NewLinetransfer.DestinationDatabase = newdb.Name;Di2015NewLinetransfer.DestinationServer = server.Name;Di2015NewLinetransfer.DestinationLoginSecure = true;Di2015NewLinetransfer.CopySchema = true;Di2015NewLinetransfer.CopyData = true;Di2015NewLinetransfer.Options.ContinueScriptingOnError = true;Di2015NewLinetransfer.TransferData();Di2015NewLine
320956Di2015UniqueSeparatorType.GetType
320956Di2015UniqueSeparator    bool      System.BooleanDi2015NewLine    byte      System.ByteDi2015NewLine    sbyte     System.SByteDi2015NewLine    char      System.CharDi2015NewLine    decimal   System.DecimalDi2015NewLine    double    System.DoubleDi2015NewLine    float     System.SingleDi2015NewLine    int       System.Int32Di2015NewLine    uint      System.UInt32Di2015NewLine    long      System.Int64Di2015NewLine    ulong     System.UInt64Di2015NewLine    object    System.ObjectDi2015NewLine    short     System.Int16Di2015NewLine    ushort    System.UInt16Di2015NewLine    string    System.StringDi2015NewLine
321104Di2015UniqueSeparatorint size = list.Count;Di2015NewLineint index = list.Add(element);Di2015NewLineAssert.AreEqual(size, index); // Element is always added at the endDi2015NewLineAssert.AreEqual(element, list[index]); // Returned index is position in listDi2015NewLine
321104Di2015UniqueSeparatorArrayList
321104Di2015UniqueSeparatorList<T>
321104Di2015UniqueSeparatorList<T>
321148Di2015UniqueSeparator// Default beepDi2015NewLineConsole.Beep();Di2015NewLine
321148Di2015UniqueSeparator// Beep at 5000 Hz for 1 secondDi2015NewLineConsole.Beep(5000, 1000);Di2015NewLine
321163Di2015UniqueSeparatorWebClient wc = new WebClient();Di2015NewLinewc.DownloadFile("http://stackoverflow.com/Content/Img/stackoverflow-logo-250.png", "Foo.png");Di2015NewLineFileStream fooStream;Di2015NewLineusing (fooStream = new FileStream("foo.png", FileMode.Open))Di2015NewLine{Di2015NewLine\// do stuffDi2015NewLine}Di2015NewLineFile.Move("foo.png", "foo2.png");Di2015NewLine
321404Di2015UniqueSeparatorpublic static byte[] StringToByteArray(string hex) {Di2015NewLine    return Enumerable.Range(0, hex.Length)Di2015NewLine                     .Where(x => x % 2 == 0)Di2015NewLine                     .Select(x => Convert.ToByte(hex.Substring(x, 2), 16))Di2015NewLine                     .ToArray();Di2015NewLine}Di2015NewLine
321435Di2015UniqueSeparator    public int GetInt(IConvertible x)Di2015NewLine    {Di2015NewLine        int y = Convert.ToInt32(x);Di2015NewLine        if (Convert.ToDouble(x) != Convert.ToDouble(y))Di2015NewLine            throw new ArgumentException("Input was not an integer");Di2015NewLine        return y;Di2015NewLine    }Di2015NewLine
321548Di2015UniqueSeparatorstring xml = @"Di2015NewLine    <rss version='2.0' xmlns:media='http://search.yahoo.com/mrss/'> Di2015NewLine    <channel> Di2015NewLine        <title>Title of RSS feed</title> Di2015NewLine        <link>http://www.google.com</link> Di2015NewLine        <description>Details about the feed</description> Di2015NewLine        <pubDate>Mon, 24 Nov 08 21:44:21 -0500</pubDate> Di2015NewLine        <language>en</language> Di2015NewLine        <item> Di2015NewLine            <title>Article 1</title> Di2015NewLine            <description><![CDATA[How to use StackOverflow.com]]></description> Di2015NewLine            <link>http://youtube.com/?v=y6_-cLWwEU0</link> Di2015NewLine            <media:player url='http://youtube.com/?v=y6_-cLWwEU0' /> Di2015NewLine            <media:thumbnail url='http://img.youtube.com/vi/y6_-cLWwEU0/default.jpg' width='120' height='90' /> Di2015NewLine            <media:title>Jared on StackOverflow</media:title> Di2015NewLine            <media:category label='Tags'>tag1, tag2</media:category> Di2015NewLine            <media:credit>Jared</media:credit> Di2015NewLine            <enclosure url='http://youtube.com/v/y6_-cLWwEU0.swf' length='233' type='application/x-shockwave-flash'/> Di2015NewLine        </item> Di2015NewLine    </channel>Di2015NewLine    </rss>Di2015NewLine    ";Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLineXElement rss = XElement.Parse( xml );Di2015NewLineXNamespace media = "http://search.yahoo.com/mrss/";Di2015NewLineDi2015NewLinevar player = rss.Element( "channel" ).Element( "item" ).Element(media + "player").Attribute( "url" );Di2015NewLineplayer.Dump();Di2015NewLine
321678Di2015UniqueSeparatorreportViewer.LocalReport.ExecuteReportInCurrentAppDomain(System.Reflection.Assembly.GetExecutingAssembly().Evidence);Di2015NewLine
321686Di2015UniqueSeparatorExpression.Assign
321686Di2015UniqueSeparatorFieldInfo field = typeof(T).GetField("fieldName");Di2015NewLineParameterExpression targetExp = Expression.Parameter(typeof(T), "target");Di2015NewLineParameterExpression valueExp = Expression.Parameter(typeof(string), "value");Di2015NewLineDi2015NewLine// Expression.Property can be used here as wellDi2015NewLineMemberExpression fieldExp = Expression.Field(targetExp, field);Di2015NewLineBinaryExpression assignExp = Expression.Assign(fieldExp, valueExp);Di2015NewLineDi2015NewLinevar setter = Expression.Lambda<Action<T, string>>Di2015NewLine    (assignExp, targetExp, valueExp).Compile();Di2015NewLineDi2015NewLinesetter(subject, "new value");Di2015NewLine
321686Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    class MyObjectDi2015NewLine    {Di2015NewLine        public int MyField;Di2015NewLine    }Di2015NewLineDi2015NewLine    static Action<T,TValue> MakeSetter<T,TValue>(FieldInfo field)Di2015NewLine    {Di2015NewLine        DynamicMethod m = new DynamicMethod(Di2015NewLine            "setter", typeof(void), new Type[] { typeof(T), typeof(TValue) }, typeof(Program));Di2015NewLine        ILGenerator cg = m.GetILGenerator();Di2015NewLineDi2015NewLine        // arg0.<field> = arg1Di2015NewLine        cg.Emit(OpCodes.Ldarg_0);Di2015NewLine        cg.Emit(OpCodes.Ldarg_1);Di2015NewLine        cg.Emit(OpCodes.Stfld, field);Di2015NewLine        cg.Emit(OpCodes.Ret);Di2015NewLineDi2015NewLine        return (Action<T,TValue>) m.CreateDelegate(typeof(Action<T,TValue>));Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        FieldInfo f = typeof(MyObject).GetField("MyField");Di2015NewLineDi2015NewLine        Action<MyObject,int> setter = MakeSetter<MyObject,int>(f);Di2015NewLineDi2015NewLine        var obj = new MyObject();Di2015NewLine        obj.MyField = 10;Di2015NewLineDi2015NewLine        setter(obj, 42);Di2015NewLineDi2015NewLine        Console.WriteLine(obj.MyField);Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine}Di2015NewLine
321727Di2015UniqueSeparator    public XDocument Serialize<T>(T source)Di2015NewLine    {Di2015NewLine        XDocument target = new XDocument();Di2015NewLine        XmlSerializer s = new XmlSerializer(typeof(T));Di2015NewLine        System.Xml.XmlWriter writer = target.CreateWriter();Di2015NewLine        s.Serialize(writer, source);Di2015NewLine        writer.Close();Di2015NewLine        return target;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Test1()Di2015NewLine    {Di2015NewLine        MyClass c = new MyClass() { SomeValue = "bar" };Di2015NewLine        XDocument doc = Serialize<MyClass>(c);Di2015NewLine        Console.WriteLine(doc.ToString());Di2015NewLine    }Di2015NewLine
321751Di2015UniqueSeparatorform1.SelectNextControl(textBox1, true, true, true, true);Di2015NewLine
321814Di2015UniqueSeparator<tr onclick="window.location='DetailPage.aspx?id=<%= IdFromDb %>'">Di2015NewLine    <!-- etc......-->Di2015NewLine</tr>Di2015NewLine
321814Di2015UniqueSeparatorprotected void GridView1_RowDataBound(object sender, GridViewRowEventArgs e)Di2015NewLineDi2015NewLine{Di2015NewLineDi2015NewLine    string OnClickCmd = "window.location='DetailPage.aspx?id=";Di2015NewLineDi2015NewLine    if (e.Row.RowType == DataControlRowType.DataRow)Di2015NewLineDi2015NewLine    {Di2015NewLineDi2015NewLine        OnClickCmd += DataBinder.Eval(e.Row.DataItem, "IdFromDb").ToString() + "'";Di2015NewLineDi2015NewLine        e.Row.Attributes.Add("onclick", OnClickCmd);Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
321823Di2015UniqueSeparatorThread.Abort()
321823Di2015UniqueSeparatorThreadAbortExcpetion
321823Di2015UniqueSeparatorThread.Join()
321987Di2015UniqueSeparator<Setter Property="Validation.ErrorTemplate">Di2015NewLine    <Setter.Value>Di2015NewLine        <ControlTemplate>Di2015NewLine            <ControlTemplate.Resources>Di2015NewLine                <BooleanToVisibilityConverter x:Key="converter" />Di2015NewLine        </ControlTemplate.Resources>Di2015NewLine            <DockPanel LastChildFill="True">Di2015NewLine                <Border Di2015NewLine                    BorderThickness="1"Di2015NewLine                    BorderBrush="Red"Di2015NewLine                    Visibility="{Binding ElementName=placeholder, Mode=OneWay, Path=AdornedElement.IsVisible, Converter={StaticResource converter}}">Di2015NewLine                    <AdornedElementPlaceholder x:Name="placeholder" />Di2015NewLine                </Border>Di2015NewLine             </DockPanel>Di2015NewLine         </ControlTemplate>Di2015NewLine    </Setter.Value>Di2015NewLine</Setter>Di2015NewLine
321997Di2015UniqueSeparatorusing System;Di2015NewLineusing System.IO;Di2015NewLineusing System.Xml.Serialization;Di2015NewLineusing System.Collections.Generic;Di2015NewLineDi2015NewLinepublic class ProgramDi2015NewLine{Di2015NewLine    [XmlArrayItem("Property")]Di2015NewLine    public List<string> Properties = new List<string>();Di2015NewLineDi2015NewLine    public static void Main(string[] args)Di2015NewLine    {Di2015NewLine        Program program = new Program();Di2015NewLine        program.Properties.Add("test1");Di2015NewLine        program.Properties.Add("test2");Di2015NewLine        program.Properties.Add("test3");Di2015NewLineDi2015NewLine        XmlSerializer xser = new XmlSerializer(typeof(Program));Di2015NewLine        xser.Serialize(new FileStream("test.xml", FileMode.Create), program);Di2015NewLine    }Di2015NewLine}Di2015NewLine
321997Di2015UniqueSeparator<?xml version="1.0"?>Di2015NewLine<Program xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">Di2015NewLine  <Properties>Di2015NewLine    <Property>test1</Property>Di2015NewLine    <Property>test2</Property>Di2015NewLine    <Property>test3</Property>Di2015NewLine  </Properties>Di2015NewLine</Program>Di2015NewLine
322004Di2015UniqueSeparatorSystem.Collection.Extensions
322004Di2015UniqueSeparatorCompany.Collections
322004Di2015UniqueSeparatorCompany.Collections.Extension
322544Di2015UniqueSeparatorpublic partial class frmDialog240x240: frmDialogDi2015NewLine
322544Di2015UniqueSeparatorpublic partial class frmDialog240x240: FormDi2015NewLine
323016Di2015UniqueSeparator</p>Di2015NewLineDi2015NewLine<pre><code>object tag;Di2015NewLineButton button;Di2015NewLineMenuItem menuItem = sender as MenuItem;Di2015NewLineif (menuItem  != null)Di2015NewLine{Di2015NewLine    tag = menuItem.Tag;Di2015NewLine}Di2015NewLineelse if( (button = sender as Button) != null )Di2015NewLine{Di2015NewLine    tag = button.Tag;Di2015NewLine} Di2015NewLineelse Di2015NewLine{Di2015NewLine    //not button nor MenuItem Di2015NewLine}Di2015NewLine
323039Di2015UniqueSeparatorList<Foo> fooList = new List<Foo>();Di2015NewLineIEnumerable<Foo> extract = from foo in fooList where foo.Bar > 10 select Foo.Name.ToUpper();Di2015NewLine
323085Di2015UniqueSeparatorpublic class UsefulBindingList<T> : BindingList<T>Di2015NewLine{Di2015NewLine    private bool _isSorted = false;Di2015NewLine    private ListSortDirection _sortDirection;Di2015NewLine    private PropertyDescriptor _sortProperty;Di2015NewLineDi2015NewLine    protected override bool SupportsSortingCoreDi2015NewLine    {Di2015NewLine    \get { return true; }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override bool IsSortedCoreDi2015NewLine    {Di2015NewLine    \get { return _isSorted; }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override ListSortDirection SortDirectionCoreDi2015NewLine    {Di2015NewLine    \get { return _sortDirection; }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override PropertyDescriptor SortPropertyCoreDi2015NewLine    {Di2015NewLine    \get { return _sortProperty; }Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    public void AddRange(IEnumerable<T> collection)Di2015NewLine    {Di2015NewLine    \IEnumerator<T> e = collection.GetEnumerator();Di2015NewLine    \while (e.MoveNext())Di2015NewLine    \{Di2015NewLine    \\this.Add(e.Current);Di2015NewLine    \}Di2015NewLine    }Di2015NewLineDi2015NewLine    public T Find(Predicate<T> match)Di2015NewLine    {Di2015NewLine    \List<T> items = this.Items as List<T>;Di2015NewLine    \if (items != null)Di2015NewLine    \\return items.Find(match);Di2015NewLine    \elseDi2015NewLine    \\return default(T);Di2015NewLine    }Di2015NewLineDi2015NewLine    public int FindIndex(Predicate<T> match)Di2015NewLine    {Di2015NewLine    \List<T> items = this.Items as List<T>;Di2015NewLine    \if (items != null)Di2015NewLine    \\return items.FindIndex(match);Di2015NewLine    \elseDi2015NewLine    \\return -1;Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool Exists(Predicate<T> match)Di2015NewLine    {Di2015NewLine    \List<T> items = this.Items as List<T>;Di2015NewLine    \return items.Exists(match);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Sort()Di2015NewLine    {Di2015NewLine    \List<T> items = this.Items as List<T>;Di2015NewLine    \if (items != null)Di2015NewLine    \\items.Sort();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Sort(Comparison<T> comparison)Di2015NewLine    {Di2015NewLine    \List<T> items = this.Items as List<T>;Di2015NewLine    \if (items != null)Di2015NewLine    \\items.Sort(comparison);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Sort(IComparer<T> comparer)Di2015NewLine    {Di2015NewLine    \List<T> items = this.Items as List<T>;Di2015NewLine    \if (items != null)Di2015NewLine    \\items.Sort(comparer);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction)Di2015NewLine    {Di2015NewLine    \_sortProperty = prop;Di2015NewLine    \_sortDirection = direction;Di2015NewLineDi2015NewLine    \List<T> items = this.Items as List<T>;Di2015NewLine    \if (items != null)Di2015NewLine    \{Di2015NewLine    \\PropertyComparer<T> pc = new PropertyComparer<T>(prop, direction);Di2015NewLine    \\items.Sort(pc);Di2015NewLine    \\_isSorted = true;Di2015NewLine    \}Di2015NewLine    \elseDi2015NewLine    \{Di2015NewLine    \\_isSorted = false;Di2015NewLine    \}Di2015NewLine    \this.OnListChanged(new ListChangedEventArgs(ListChangedType.Reset, -1));Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void RemoveSortCore()Di2015NewLine    {Di2015NewLine    \_isSorted = false;Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinepublic class PropertyComparer<T> : IComparer<T>Di2015NewLine{Di2015NewLine    private ListSortDirection _sortDirection;Di2015NewLine    private PropertyDescriptor _property;Di2015NewLineDi2015NewLine    public PropertyComparer(PropertyDescriptor property, ListSortDirection direction)Di2015NewLine    {Di2015NewLine    \_property = property;Di2015NewLine    \_sortDirection = direction;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int Compare(T x, T y)Di2015NewLine    {Di2015NewLine    \int rv = 0;Di2015NewLine    \object vx = _property.GetValue(x);Di2015NewLine    \object vy = _property.GetValue(y);Di2015NewLine    \rv = System.Collections.Comparer.Default.Compare(vx, vy);Di2015NewLine    \if (_sortDirection == ListSortDirection.Descending)Di2015NewLine    \\rv = -rv;Di2015NewLine    \return rv;Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
323177Di2015UniqueSeparator<select id="View" name="View">Di2015NewLine   <option value="1" <% if (something) { %> selected <% } %> >With issue covers</option>Di2015NewLine   <option value="0" <% if (!something) { %> selected <% } %> >No issue covers</option>Di2015NewLine</select>Di2015NewLine
323312Di2015UniqueSeparatorNameValueCollection oQuery = Request.QueryString;Di2015NewLineoQuery = (NameValueCollection)Request.GetType().GetField("_queryString",BindingFlags.NonPublic | BindingFlags.Instance).GetValue(Request);Di2015NewLinePropertyInfo oReadable = oQuery .GetType().GetProperty("IsReadOnly", BindingFlags.NonPublic | BindingFlags.Instance);Di2015NewLineoReadable.SetValue(oQuery, false, null);Di2015NewLineoQuery["foo"] = "bar";Di2015NewLineoReadable.SetValue(oQuery, true, null);Di2015NewLine
323357Di2015UniqueSeparator <asp:Repeater ID="rp" runat="server">Di2015NewLine   <ItemTemplate>Di2015NewLine        <asp:DropDownList ID="DropDownList1" AutoPostBack="true" runat="server" OnSelectedIndexChanged="DropDownList1_SelectedIndexChanged">Di2015NewLine        <asp:ListItem>1</asp:ListItem>Di2015NewLine        <asp:ListItem>2</asp:ListItem>Di2015NewLine        <asp:ListItem>3</asp:ListItem>Di2015NewLine        <asp:ListItem>4</asp:ListItem>Di2015NewLine        <asp:ListItem>5</asp:ListItem>Di2015NewLine        <asp:ListItem>6</asp:ListItem>Di2015NewLineDi2015NewLine        </asp:DropDownList>Di2015NewLine        <asp:ImageButton ID="Button1" runat="server" Enabled="False" />Di2015NewLine        </ItemTemplate>Di2015NewLine        </asp:Repeater>Di2015NewLine
323357Di2015UniqueSeparatorprotected void DropDownList1_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        DropDownList control = (DropDownList)sender;Di2015NewLineDi2015NewLine        RepeaterItem rpItem = control.NamingContainer as RepeaterItem;Di2015NewLine        if (rpItem != null)Di2015NewLine        {Di2015NewLine            ImageButton btn = ((ImageButton)rpItem.FindControl("Button1"));Di2015NewLine            btn.Enabled = true;Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine
323377Di2015UniqueSeparatormyTable.DefaultView.Sort = "myColumn DESC";Di2015NewLine
323575Di2015UniqueSeparatorThread
323575Di2015UniqueSeparatorThreadPool
323575Di2015UniqueSeparatorControl.Invoke
323575Di2015UniqueSeparator    Thread t = new Thread(() => SomeMethod(arg));Di2015NewLine    t.IsBackground = true;Di2015NewLine    t.Name = "Worker n";Di2015NewLine    t.Start();Di2015NewLine
323575Di2015UniqueSeparatorThreadPool
323578Di2015UniqueSeparatorusing System.DirectoryServices; Di2015NewLineDi2015NewLinepublic class testDi2015NewLine{Di2015NewLineDi2015NewLine    private void main()Di2015NewLine    {Di2015NewLine        foreach (string @group in GetGroups())Di2015NewLine        {Di2015NewLine            Debug.Print(@group);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public List<string> GetGroups()Di2015NewLine    {Di2015NewLine        DirectoryEntry objADAM = default(DirectoryEntry);Di2015NewLine        // Binding object. Di2015NewLine        DirectoryEntry objGroupEntry = default(DirectoryEntry);Di2015NewLine        // Group Results. Di2015NewLine        DirectorySearcher objSearchADAM = default(DirectorySearcher);Di2015NewLine        // Search object. Di2015NewLine        SearchResultCollection objSearchResults = default(SearchResultCollection);Di2015NewLine        // Results collection. Di2015NewLine        string strPath = null;Di2015NewLine        // Binding path. Di2015NewLine        List<string> result = new List<string>();Di2015NewLineDi2015NewLine        // Construct the binding string. Di2015NewLine        strPath = "LDAP://stefanserver.stefannet.local";Di2015NewLine        //Change to your ADserver Di2015NewLineDi2015NewLine        // Get the AD LDS object. Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            objADAM = new DirectoryEntry(strPath);Di2015NewLine            objADAM.RefreshCache();Di2015NewLine        }Di2015NewLine        catch (Exception e)Di2015NewLine        {Di2015NewLine            throw e;Di2015NewLine        }Di2015NewLineDi2015NewLine        // Get search object, specify filter and scope, Di2015NewLine        // perform search. Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            objSearchADAM = new DirectorySearcher(objADAM);Di2015NewLine            objSearchADAM.Filter = "(&(objectClass=group))";Di2015NewLine            objSearchADAM.SearchScope = SearchScope.Subtree;Di2015NewLine            objSearchResults = objSearchADAM.FindAll();Di2015NewLine        }Di2015NewLine        catch (Exception e)Di2015NewLine        {Di2015NewLine            throw e;Di2015NewLine        }Di2015NewLineDi2015NewLine        // Enumerate groups Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            if (objSearchResults.Count != 0)Di2015NewLine            {Di2015NewLine                foreach (SearchResult objResult in objSearchResults)Di2015NewLine                {Di2015NewLine                    objGroupEntry = objResult.GetDirectoryEntry;Di2015NewLine                    result.Add(objGroupEntry.Name);Di2015NewLine                }Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                throw new Exception("No groups found");Di2015NewLine            }Di2015NewLine        }Di2015NewLine        catch (Exception e)Di2015NewLine        {Di2015NewLine            throw new Exception(e.Message);Di2015NewLine        }Di2015NewLineDi2015NewLine        return result;Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
323578Di2015UniqueSeparatorImports System.DirectoryServicesDi2015NewLineDi2015NewLinePublic Class Form1Di2015NewLineDi2015NewLinePrivate Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.LoadDi2015NewLine    For Each group As String In GetGroups()Di2015NewLine        Debug.Print(group)Di2015NewLine    NextDi2015NewLineEnd SubDi2015NewLineDi2015NewLinePublic Function GetGroups() As List(Of String)Di2015NewLine    Dim objADAM As DirectoryEntry                   ' Binding object.Di2015NewLine    Dim objGroupEntry As DirectoryEntry             ' Group Results.Di2015NewLine    Dim objSearchADAM As DirectorySearcher          ' Search object.Di2015NewLine    Dim objSearchResults As SearchResultCollection  ' Results collection.Di2015NewLine    Dim strPath As String                           ' Binding path.Di2015NewLine    Dim result As New List(Of String)Di2015NewLineDi2015NewLine    ' Construct the binding string.        Di2015NewLine    strPath = "LDAP://stefanserver.stefannet.local" 'Change to your ADserverDi2015NewLineDi2015NewLine    ' Get the AD LDS object.Di2015NewLine    TryDi2015NewLine        objADAM = New DirectoryEntry(strPath)Di2015NewLine        objADAM.RefreshCache()Di2015NewLine    Catch e As ExceptionDi2015NewLine        Throw eDi2015NewLine    End TryDi2015NewLineDi2015NewLine    ' Get search object, specify filter and scope,Di2015NewLine    ' perform search.Di2015NewLine    TryDi2015NewLine        objSearchADAM = New DirectorySearcher(objADAM)Di2015NewLine        objSearchADAM.Filter = "(&(objectClass=group))"Di2015NewLine        objSearchADAM.SearchScope = SearchScope.SubtreeDi2015NewLine        objSearchResults = objSearchADAM.FindAll()Di2015NewLine    Catch e As ExceptionDi2015NewLine        Throw eDi2015NewLine    End TryDi2015NewLineDi2015NewLine    ' Enumerate groupsDi2015NewLine    TryDi2015NewLine        If objSearchResults.Count <> 0 ThenDi2015NewLine            Dim objResult As SearchResultDi2015NewLine            For Each objResult In objSearchResultsDi2015NewLine                objGroupEntry = objResult.GetDirectoryEntryDi2015NewLine                result.Add(objGroupEntry.Name)Di2015NewLine            Next objResultDi2015NewLine        ElseDi2015NewLine            Throw New Exception("No groups found")Di2015NewLine        End IfDi2015NewLine    Catch e As ExceptionDi2015NewLine        Throw New Exception(e.Message)Di2015NewLine    End TryDi2015NewLineDi2015NewLine    Return resultDi2015NewLineEnd FunctionDi2015NewLineEnd ClassDi2015NewLine
323756Di2015UniqueSeparator(?<!\\.asp)$Di2015NewLine
323756Di2015UniqueSeparator^.*(?<!\\.asp)$Di2015NewLine
323756Di2015UniqueSeparator^[^#?]+(?<!\\.asp)([#?]|$)Di2015NewLine
323756Di2015UniqueSeparator^[^#?]+(?<!\\.asp)([#?].+|$)Di2015NewLine
323958Di2015UniqueSeparatorprivate static void InitUser(User user, SqlDataReader dr)Di2015NewLine{ // could also use an interface here, or generics with T : UserDi2015NewLine  user.Name = Convert.ToString(dr["name"]);Di2015NewLine  user.Age ...Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic static User InitUser(SqlDataReader dr)Di2015NewLine{Di2015NewLine    User user = new User();Di2015NewLine    InitUser(user, dr);Di2015NewLine    return user;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static UserExtension InitUserExtension(SqlDataReader dr)Di2015NewLine{Di2015NewLine  UserExtension user = new UserExtension();Di2015NewLine  InitUser(user, dr);Di2015NewLine  user.Lastname = Convert.ToString(dr["lastname"]);Di2015NewLine  user.Password = ....;Di2015NewLine  return user;Di2015NewLine}Di2015NewLine
323958Di2015UniqueSeparatorprivate static T InitUserCore<T>(SqlDataReader dr) where T : User, new()Di2015NewLine{Di2015NewLine    T user = new T();Di2015NewLine    // ...Di2015NewLine    return user;Di2015NewLine}Di2015NewLinepublic static User InitUser(SqlDataReader dr)Di2015NewLine{Di2015NewLine    return InitUserCore<User>(dr);Di2015NewLine}Di2015NewLinepublic static UserExtension InitUserExtension(SqlDataReader dr)Di2015NewLine{Di2015NewLine    UserExtension user = InitUserCore<UserExtension>(dr);Di2015NewLine    // ...Di2015NewLine    return user;Di2015NewLine}Di2015NewLine
324078Di2015UniqueSeparatorthis(...)
324078Di2015UniqueSeparatorbase(...)
324078Di2015UniqueSeparatorbase(...)
324120Di2015UniqueSeparatorproject.Employee
324120Di2015UniqueSeparatorproject.Employee1
324120Di2015UniqueSeparatorthis.OpenedByName.Text = data.OpenedByEmployee.Name;Di2015NewLinethis.ClosedByName.Text = data.ClosedByEmployee.Name;Di2015NewLine
324190Di2015UniqueSeparator<head>
324356Di2015UniqueSeparatorpublic static Instance CreateInstance(int id)Di2015NewLine{Di2015NewLine    MyTemplate def = new MyTemplate();Di2015NewLine    return def.GetInstance(id);Di2015NewLine}Di2015NewLine
324464Di2015UniqueSeparator[System.Runtime.InteropServices.DllImport("user32.dll")]Di2015NewLinepublic static extern bool SetForegroundWindow(IntPtr hWnd);Di2015NewLine
324464Di2015UniqueSeparatorSetForegroundWindow(this.Handle);Di2015NewLine
324616Di2015UniqueSeparatorvar choiceList = myXDoc.RootDi2015NewLine                       .Element("BetaSection")Di2015NewLine                       .Descendants("Choice")Di2015NewLine                       .Select(element => newDi2015NewLine                               {Di2015NewLine                                  Name = element.Attribute("id").Value,Di2015NewLine                                  Data = element.Value;Di2015NewLine                               });Di2015NewLine
324735Di2015UniqueSeparatorprivate int SetupFields( object[] fields )Di2015NewLine{Di2015NewLine    fields[ 0 ] = 100;Di2015NewLine    fields[ 1 ] = "Hello";Di2015NewLine    return 2;Di2015NewLine}Di2015NewLineDi2015NewLine[Test]Di2015NewLinepublic void TestGetValues()Di2015NewLine{Di2015NewLine    MockRepository mocks = new MockRepository();Di2015NewLineDi2015NewLine    using ( mocks.Record() )Di2015NewLine    {Di2015NewLine        ExpectDi2015NewLine            .Call( reader.GetValues( null ) )Di2015NewLine            .IgnoreArguments()Di2015NewLine            .Do( new Func<object[], int>( SetupField ) )Di2015NewLine    }    Di2015NewLineDi2015NewLine    // verify hereDi2015NewLine}Di2015NewLine
324809Di2015UniqueSeparatorString
324809Di2015UniqueSeparatorDictionary(String, String)
324809Di2015UniqueSeparatorInputString.Replace(DictionaryEntry.Key, DictionaryEntry.Value)
324809Di2015UniqueSeparator.Replace.Replace
324812Di2015UniqueSeparatorprivate static string ToLiteral(string input)Di2015NewLine{Di2015NewLine    using (var writer = new StringWriter())Di2015NewLine    {Di2015NewLine        using (var provider = CodeDomProvider.CreateProvider("CSharp"))Di2015NewLine        {Di2015NewLine            provider.GenerateCodeFromExpression(new CodePrimitiveExpression(input), writer, null);Di2015NewLine            return writer.ToString();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
324812Di2015UniqueSeparatorvar input = "\\tHello\\r\\n\\tWorld!";Di2015NewLineConsole.WriteLine(input);Di2015NewLineConsole.WriteLine(ToLiteral(input));Di2015NewLine
324812Di2015UniqueSeparator    HelloDi2015NewLine    World!Di2015NewLine"\\tHello\\r\\n\\tWorld!"Di2015NewLine
324837Di2015UniqueSeparator        // gotoDi2015NewLine        for (int i = 0; i < 100; i++)Di2015NewLine        {Di2015NewLine            for (int j = 0; j < 100; j++)Di2015NewLine            {Di2015NewLine                goto Foo; // yeuck!Di2015NewLine            }Di2015NewLine        }Di2015NewLine    Foo:Di2015NewLine        Console.WriteLine("Hi");Di2015NewLineDi2015NewLine        // anon-methodDi2015NewLine        Action work = delegateDi2015NewLine        {Di2015NewLine            for (int x = 0; x < 100; x++)Di2015NewLine            {Di2015NewLine                for (int y = 0; y < 100; y++)Di2015NewLine                {Di2015NewLine                    return; // exits anon-methodDi2015NewLine                }Di2015NewLine            }Di2015NewLine        };Di2015NewLine        work(); // execute anon-methodDi2015NewLine        Console.WriteLine("Hi");Di2015NewLine
324842Di2015UniqueSeparator[ServiceContract]Di2015NewLinepublic interface IExampleWebServiceDi2015NewLine{Di2015NewLine    [OperationContract]Di2015NewLine    CreateAccountResponse CreateAccount(int parameter, CreateAccountArguments another parameter);Di2015NewLineDi2015NewLine    [OperationContract]Di2015NewLine    DeleteAccountResponse DeleteAccount(int parameter);Di2015NewLine}Di2015NewLine
324842Di2015UniqueSeparator[DataContract]Di2015NewLinepublic class CreateAccountResponseDi2015NewLine{Di2015NewLine    [DataMember]Di2015NewLine    public bool CreatedOk { get; set; }Di2015NewLineDi2015NewLine    [DataMember]Di2015NewLine    public int AccountId { get; set; }Di2015NewLine}Di2015NewLine
325098Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Web.Script.Serialization;Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main( string[] args )Di2015NewLine    {Di2015NewLine    \string json = System.IO.File.ReadAllText( "../../input.json" );Di2015NewLineDi2015NewLine    \var serializer = new JavaScriptSerializer();Di2015NewLine    \Structure jsonStructure = serializer.Deserialize<Structure>( json );Di2015NewLine    \System.Diagnostics.Debugger.Break();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass StructureDi2015NewLine{Di2015NewLine    public StructureObjects objects;Di2015NewLine}Di2015NewLineDi2015NewLineclass StructureObjectsDi2015NewLine{Di2015NewLine    public List<StructureCategory> categories;Di2015NewLine    public List<StructurePresent> present;Di2015NewLine}Di2015NewLineDi2015NewLineclass StructureCategoryDi2015NewLine{Di2015NewLine    public string name;Di2015NewLine    public int imageID;Di2015NewLine    public DateTime dateUpdated;Di2015NewLine    public int isActive;Di2015NewLine    public int displayOrder;Di2015NewLine}Di2015NewLineDi2015NewLineclass StructurePresentDi2015NewLine{Di2015NewLine    public int presentID;Di2015NewLine    public string name;Di2015NewLine    public int categoryID;Di2015NewLine    public int imageID;Di2015NewLine    public DateTime dateUpdated;Di2015NewLine    public int isActive;Di2015NewLine    public int? isAnimated;Di2015NewLine    public int? isInteractive;Di2015NewLine    public int? isAdaptive;Di2015NewLine    public Uri webLinkURL;Di2015NewLine}Di2015NewLine
325161Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Reflection;Di2015NewLineDi2015NewLinenamespace InterfacesDi2015NewLine{Di2015NewLine    interface IFoo {}Di2015NewLine    interface IBar {}Di2015NewLine    interface IBaz {}Di2015NewLine}Di2015NewLineDi2015NewLinepublic class TestDi2015NewLine{Di2015NewLine    public static void CallMe<T>()Di2015NewLine    {Di2015NewLine        Console.WriteLine("typeof(T): {0}", typeof(T));Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        MethodInfo method = typeof(Test).GetMethod("CallMe");Di2015NewLineDi2015NewLine        var types = typeof(Test).Assembly.GetTypes()Di2015NewLine                                .Where(t => t.Namespace == "Interfaces");Di2015NewLineDi2015NewLine        foreach (Type type in types)Di2015NewLine        {Di2015NewLine            MethodInfo genericMethod = method.MakeGenericMethod(new Type[] {type});Di2015NewLine            genericMethod.Invoke(null, null); // No target, no argumentsDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
325161Di2015UniqueSeparatorMethod<MyNamespace.Interface<string>>(); // (Or whatever instead of string)Di2015NewLine
325161Di2015UniqueSeparatorMethod<MyNamespace.Interface>();Di2015NewLine
325280Di2015UniqueSeparatorforeach (ListViewItem item in lvFiles.SelectedItems)Di2015NewLine{Di2015NewLine....................................Di2015NewLine}Di2015NewLine
325286Di2015UniqueSeparatorGraphics
325286Di2015UniqueSeparatorPictureBox
325308Di2015UniqueSeparatorobject o = new[] { "string1", "string2" };Di2015NewLine
325308Di2015UniqueSeparatornew[] { A, B, C, D, ... }Di2015NewLine
325308Di2015UniqueSeparatornew[] { new Form(), new MemoryStream() }Di2015NewLine
325308Di2015UniqueSeparatorMemoryStream
325308Di2015UniqueSeparatorForm
325308Di2015UniqueSeparatornew[] { GetSomeIDisposable(), new MemoryStream() }Di2015NewLine
325308Di2015UniqueSeparatorIDisposable[]
325308Di2015UniqueSeparatorMemoryStream
325308Di2015UniqueSeparatorIDisposable
325308Di2015UniqueSeparatornew[] { 0, 1, 3.5 } // double[]Di2015NewLinenew[] { 1, 3, 100L } // long[]Di2015NewLine
325412Di2015UniqueSeparatorTreeListView
325491Di2015UniqueSeparatorSystem.IO.DirectoryInfo di = new System.IO.DirectoryInfo("c:\\\\");Di2015NewLineSystem.IO.FileSystemInfo[] files = di.GetFileSystemInfos();Di2015NewLinecheckedListBox1.Items.AddRange(files);Di2015NewLine
325536Di2015UniqueSeparatorpublic class HomeController : ControllerDi2015NewLine{Di2015NewLine    public ActionResult Index()Di2015NewLine    {Di2015NewLine    \this.ViewData.Model = new MyObjectDi2015NewLine    \{Di2015NewLine    \\Name = "Timmy",Di2015NewLine    \\FavColor = "Blue",Di2015NewLine    \};Di2015NewLineDi2015NewLine    \return View();Di2015NewLine    }Di2015NewLineDi2015NewLine    public class MyObjectDi2015NewLine    {Di2015NewLine    \public string Name { get; set; }Di2015NewLineDi2015NewLine    \public string FavColor { get; set; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
325536Di2015UniqueSeparator<%=Html.TextBox("FavColor") %>Di2015NewLine
325542Di2015UniqueSeparator public abstract class TaxRateDi2015NewLine {Di2015NewLine     public static readonly TaxRate Normal = new NormalTaxRate();Di2015NewLine     public static readonly TaxRate Whatever = new OtherTaxRate();Di2015NewLineDi2015NewLine     // Only allow nested classes to derive from this - and we trust those!Di2015NewLine     private TaxRate() {}Di2015NewLineDi2015NewLine     public abstract string Name { get; }Di2015NewLine     public abstract decimal Rate { get; }Di2015NewLineDi2015NewLine     private class NormalTaxRate : TaxRateDi2015NewLine     {Di2015NewLine         public override string Name { get { return "Regelsteuersatz"; } }Di2015NewLine         public override decimal Rate { get { return 20m; } }Di2015NewLine     }Di2015NewLineDi2015NewLine     private class OtherTaxRate : TaxRateDi2015NewLine     {Di2015NewLine         public override string Name { get { return "Something else"; } }Di2015NewLine         public override decimal Rate { get { return 120m; } }Di2015NewLine     }Di2015NewLine }Di2015NewLine
325542Di2015UniqueSeparator// TaxRate.csDi2015NewLinepublic partial abstract class TaxRateDi2015NewLine{Di2015NewLine    // All the stuff apart from the nested classesDi2015NewLine}Di2015NewLineDi2015NewLine// TaxRate.Normal.csDi2015NewLinepublic partial abstract class TaxRateDi2015NewLine{Di2015NewLine    private class NormalTaxRate : TaxRateDi2015NewLine    {Di2015NewLine        public override string Name { get { return "Regelsteuersatz"; } }Di2015NewLine        public override decimal Rate { get { return 20m; } }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// TaxRate.Other.csDi2015NewLinepublic partial abstract class TaxRateDi2015NewLine{Di2015NewLine    private class OtherTaxRate : TaxRateDi2015NewLine    {Di2015NewLine        public override string Name { get { return "Something else"; } }Di2015NewLine        public override decimal Rate { get { return 120m; } }Di2015NewLine    }Di2015NewLine}Di2015NewLine
325568Di2015UniqueSeparator public static string RSSRepeater<T>(this HtmlHelper html, IEnumerable<T> rss)Di2015NewLine     where T : IRSSableDi2015NewLine {Di2015NewLine     ...Di2015NewLine }Di2015NewLine
325568Di2015UniqueSeparatorIRSSable
325568Di2015UniqueSeparatorT
325568Di2015UniqueSeparatorIssue
325568Di2015UniqueSeparatorStringBuilder
325568Di2015UniqueSeparator    StringBuilder result = new StringBuilder();Di2015NewLineDi2015NewLine    foreach (IRSSable item in rss)Di2015NewLine    {Di2015NewLine        result.Append("<item>").Append(item.GetRSSItem().InnerXml).Append("</item>");Di2015NewLine    }Di2015NewLineDi2015NewLine    return result.ToString();Di2015NewLine
325578Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Threading;Di2015NewLineDi2015NewLinenamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine    \static List<RunningProcess> runningProcesses = new List<RunningProcess>();Di2015NewLineDi2015NewLine    \static void Main(string[] args)Di2015NewLine    \{Di2015NewLine    \\Console.WriteLine("Starting...");Di2015NewLineDi2015NewLine    \\for (int i = 0; i < 100; i++)Di2015NewLine    \\{Di2015NewLine    \\\DoSomethingOrTimeOut(30);Di2015NewLine    \\}Di2015NewLineDi2015NewLine    \\bool isSomethingRunning = false;Di2015NewLineDi2015NewLine    \\doDi2015NewLine    \\{Di2015NewLine    \\\foreach (RunningProcess proc in runningProcesses)Di2015NewLine    \\\{Di2015NewLine    \\\\// If this process is running...Di2015NewLine    \\\\if (proc.ProcessThread.ThreadState == ThreadState.Running)Di2015NewLine    \\\\{Di2015NewLine    \\\\\isSomethingRunning = true;Di2015NewLineDi2015NewLine    \\\\\// see if it needs to timeout...Di2015NewLine    \\\\\if (DateTime.Now.Subtract(proc.StartTime).TotalSeconds > proc.TimeOutInSeconds)Di2015NewLine    \\\\\{Di2015NewLine    \\\\\\proc.ProcessThread.Abort();Di2015NewLine    \\\\\}Di2015NewLine    \\\\}Di2015NewLine    \\\}Di2015NewLine    \\}Di2015NewLine    \\while (isSomethingRunning);Di2015NewLineDi2015NewLine    \\Console.WriteLine("Done!");    Di2015NewLineDi2015NewLine    \\Console.ReadLine();Di2015NewLine    \}Di2015NewLineDi2015NewLine    \static void DoSomethingOrTimeOut(int timeout)Di2015NewLine    \{Di2015NewLine    \\runningProcesses.Add(new RunningProcessDi2015NewLine    \\{Di2015NewLine    \\\StartTime = DateTime.Now,Di2015NewLine    \\\TimeOutInSeconds = timeout,Di2015NewLine    \\\ProcessThread = new Thread(new ThreadStart(delegateDi2015NewLine    \\\  {Di2015NewLine    \\\\  // do task here...Di2015NewLine    \\\  })),Di2015NewLine    \\});Di2015NewLineDi2015NewLine    \\runningProcesses[runningProcesses.Count - 1].ProcessThread.Start();Di2015NewLine    \}Di2015NewLine    }Di2015NewLineDi2015NewLine    class RunningProcessDi2015NewLine    {Di2015NewLine    \public int TimeOutInSeconds { get; set; }Di2015NewLineDi2015NewLine    \public DateTime StartTime { get; set; }Di2015NewLineDi2015NewLine    \public Thread ProcessThread { get; set; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
325684Di2015UniqueSeparatorImageList
325684Di2015UniqueSeparatorlistViewItem.ImageList = imageList
325684Di2015UniqueSeparatorlistViewItem.ImageIndex = 0
325846Di2015UniqueSeparatorvar wp = new WindowsPrincipalEx(WindowsIdentity.GetCurrent());Di2015NewLineresult = wp.IsInRole(@"domain\\role");Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLinepublic class WindowsPrincipalEx : IPrincipalDi2015NewLine{Di2015NewLine    // Dictionary to store all groups, key = uppercase groupname, value = groupname as entered in ADDi2015NewLine    private Dictionary<string,string> completeGroupList = new Dictionary<string,string>();Di2015NewLine    // Private varsDi2015NewLine    private WindowsIdentity identity;Di2015NewLine    private string domain;Di2015NewLineDi2015NewLine    // Identity propertyDi2015NewLine    public IIdentity IdentityDi2015NewLine    { Di2015NewLine        get { return identity; }Di2015NewLine    }Di2015NewLineDi2015NewLine    // Constructor, accepts identityDi2015NewLine    public WindowsPrincipalEx(IIdentity identity)Di2015NewLine    {Di2015NewLine        this.identity = (WindowsIdentity)identity;Di2015NewLine        // Find domain name and store it for filtering purposesDi2015NewLine        if (identity.Name.Contains('\\\\'))Di2015NewLine            this.domain = identity.Name.Substring(0, identity.Name.IndexOf('\\\\') + 1);Di2015NewLineDi2015NewLine        // Find all groups this user belongs to, and store the list for later useDi2015NewLine        getRoles(completeGroupList);Di2015NewLine    }Di2015NewLineDi2015NewLine    public bool IsInRole(string role)Di2015NewLine    {Di2015NewLine        // Remove domainDi2015NewLine        if (role.StartsWith(domain, StringComparison.CurrentCultureIgnoreCase))Di2015NewLine            role = role.Substring(domain.Length);Di2015NewLine        return completeGroupList.ContainsKey(role.ToUpper());Di2015NewLine    }Di2015NewLineDi2015NewLine    private void getRoles(Dictionary<string,string> groupList)Di2015NewLine    {Di2015NewLine        // Find username and remove domainDi2015NewLine        string name = Identity.Name.Replace(domain,"");Di2015NewLineDi2015NewLine        // Find user in ADDi2015NewLine        DirectorySearcher search = new DirectorySearcher("(&(sAMAccountName="+name+")(objectCategory=user))");Di2015NewLine        search.PropertiesToLoad.Add("memberof");Di2015NewLineDi2015NewLine        SearchResult result = search.FindOne();Di2015NewLine        if (result != null)Di2015NewLine        {Di2015NewLine            // Add all groups to the groupList dictionaryDi2015NewLine            foreach (string s in result.Properties["memberOf"])Di2015NewLine            {Di2015NewLine                string[] elements = s.Split(new char[] { ',' });Di2015NewLine                foreach (string e in elements)Di2015NewLine                    if (e.StartsWith("CN=", StringComparison.CurrentCultureIgnoreCase))Di2015NewLine                    {Di2015NewLine                        if (!groupList.ContainsKey(e.Substring(3).ToUpper()))Di2015NewLine                            groupList.Add(e.Substring(3).ToUpper(),e.Substring(3));Di2015NewLine                        break;Di2015NewLine                    }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        // Scan through all groups found, and find group on group memberships recursevlyDi2015NewLine        foreach (var ng in groupList.ToArray())Di2015NewLine            getRolesInRoles(groupList, ng.Key);Di2015NewLine    }Di2015NewLineDi2015NewLine    private void getRolesInRoles(Dictionary<string, string> groupList, string roleName)Di2015NewLine    {Di2015NewLine        string name = roleName.Replace(domain, "");Di2015NewLineDi2015NewLine        // Find group in ADDi2015NewLine        DirectorySearcher search = new DirectorySearcher("(&(cn="+name+")(objectCategory=group))");Di2015NewLine        search.PropertiesToLoad.Add("memberof");Di2015NewLineDi2015NewLine        SearchResult result = search.FindOne();Di2015NewLine        if (result != null)Di2015NewLine        {Di2015NewLine            // Add all groups to the groupList dictionaryDi2015NewLine            foreach (string s in result.Properties["memberOf"])Di2015NewLine            {Di2015NewLine                string[] elements = s.Split(new char[] { ',' });Di2015NewLine                foreach (string e in elements)Di2015NewLine                    if (e.StartsWith("CN=", StringComparison.CurrentCultureIgnoreCase))Di2015NewLine                    {Di2015NewLine                        if (!groupList.ContainsKey(e.Substring(3).ToUpper()))Di2015NewLine                        {Di2015NewLine                            groupList.Add(e.Substring(3).ToUpper(),e.Substring(3));Di2015NewLine                            getRolesInRoles(groupList, e.Substring(3));Di2015NewLine                        }Di2015NewLine                        break;Di2015NewLine                    }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
325932Di2015UniqueSeparatorPrivate AJAXTimer As New TimerDi2015NewLineDi2015NewLinePrivate Sub WaitHandler1(ByVal sender As Object, ByVal e As System.EventArgs)Di2015NewLine    'Confirm that your AJAX operation has completed.Di2015NewLine    Dim ProgressBar = Browser1.Document.All("progressBar")Di2015NewLine    If ProgressBar Is Nothing Then Exit SubDi2015NewLineDi2015NewLine    If ProgressBar.Style.ToLower.Contains("display: none") ThenDi2015NewLine        'Stop listening for ticksDi2015NewLine        AJAXTimer.Stop()Di2015NewLineDi2015NewLine        'Clear the handler for the tick event so you can reuse the timer.Di2015NewLine        RemoveHandler AJAXTimer.Tick, AddressOf CoveragesWaitDi2015NewLineDi2015NewLine        'Do what you need to do to the page here...Di2015NewLineDi2015NewLine        'If you will wait for another AJAX event, then set aDi2015NewLine        'new handler for your Timer. If you are navigating theDi2015NewLine        'page, add a handler to WebBrowser.DocumentCompleteDi2015NewLine    End IfDi2015NewLineExit SubDi2015NewLineDi2015NewLinePrivate Function InvokeMember(ByVal FieldName As String, ByVal methodName As String) As BooleanDi2015NewLine        Dim Field = Browser1.Document.GetElementById(FieldName)Di2015NewLine        If Field Is Nothing Then Return FalseDi2015NewLineDi2015NewLine        Field.InvokeMember(methodName)Di2015NewLineDi2015NewLine        Return TrueDi2015NewLine    End FunctionDi2015NewLine
325932Di2015UniqueSeparatorAddHandler AJAXTimer.Tick, AddressOf WaitHandler1Di2015NewLineInvokeMember("ContinueButton", "click")Di2015NewLineAJAXTimer.StartDi2015NewLine
325932Di2015UniqueSeparatorAddHandler Browser1.DocumentComplete, AddressOf AddSocialDocCompDi2015NewLineBrowser1.Navigate(NextURL) 'or InvokeMember("ControlName", "click") if working on a form.Di2015NewLine
326011Di2015UniqueSeparatorusing System.Reflection;Di2015NewLineDi2015NewLinestatic Program()Di2015NewLine{Di2015NewLine    AppDomain.CurrentDomain.AssemblyResolve += delegate(object sender, ResolveEventArgs e)Di2015NewLine    {Di2015NewLine        AssemblyName requestedName = new AssemblyName(e.Name);Di2015NewLineDi2015NewLine        if (requestedName.Name == "AssemblyNameToRedirect")Di2015NewLine        {Di2015NewLine            // Put code here to load whatever version of the assembly you actually haveDi2015NewLineDi2015NewLine            return Assembly.LoadFrom("RedirectedAssembly.DLL");Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            return null;Di2015NewLine        }Di2015NewLine    };Di2015NewLine}Di2015NewLine
326071Di2015UniqueSeparator//This will set the variable test to null:Di2015NewLinestring test = Convert.ToString(ConfigurationSettings.AppSettings["Missing.Value"]);Di2015NewLineDi2015NewLine//This will throw an exception:Di2015NewLinestring test = ConfigurationSettings.AppSettings["Missing.Value"].ToString();Di2015NewLine
326104Di2015UniqueSeparatorprotected override void WndProc(ref Message m) {Di2015NewLine    switch((WindowsMessagesFlags) m.Msg) {Di2015NewLine        case WindowsMessagesFlags.WM_DISPLAYCHANGE:Di2015NewLine                FixWindowSnapping();Di2015NewLine                break;Di2015NewLine        case WindowsMessagesFlags.WM_EXITSIZEMOVE:Di2015NewLine                SaveWindowProperties();Di2015NewLine                break;Di2015NewLine        case WindowsMessagesFlags.WM_MOVING:Di2015NewLine                KeepProperLocation(ref m);Di2015NewLine                break;Di2015NewLine    }Di2015NewLine}Di2015NewLine
326104Di2015UniqueSeparatorHttpStatusCode status = someWindowsMessageFlag;Di2015NewLine
326218Di2015UniqueSeparatorSPSite site;Di2015NewLineSPWeb web;Di2015NewLineSPListItem item;Di2015NewLine
326218Di2015UniqueSeparatorSPFieldUserValue usersField = new SPFieldUserValue(mainWeb, item["Users"].ToString());Di2015NewLinebool isUser = SPUtility.IsLoginValid(site, usersField.User.LoginName);Di2015NewLineList<SPUser> users = new List<SPUser>();Di2015NewLineDi2015NewLineif (isUser)Di2015NewLine{Di2015NewLine    // add a single user to the listDi2015NewLine    users.Add(usersField.User);Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    SPGroup group = web.Groups.GetByID(usersField.LookupId);Di2015NewLineDi2015NewLine    foreach (SPUser user in group.Users)Di2015NewLine    {Di2015NewLine        // add all the group users to the listDi2015NewLine        users.Add(user.User);Di2015NewLine    }Di2015NewLine}Di2015NewLine
326297Di2015UniqueSeparatorType.MakeGenericType(type[])
326297Di2015UniqueSeparatorType elementType = GetElementType(); // get this type at runtimeDi2015NewLineType listType = typeof(List<>);Di2015NewLineType combinedType = listType.MakeGenericType(elementType);Di2015NewLineIList elements = (IList) Activator.CreateInstance(combinedType);Di2015NewLine
326297Di2015UniqueSeparatorIList
326297Di2015UniqueSeparatorDictionary<,>
326319Di2015UniqueSeparatorpublic List<Object> ObjectsDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        lock (container)Di2015NewLine        {Di2015NewLine            return this.container;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
326406Di2015UniqueSeparatorObservableCollection< YourNewClass  >
326406Di2015UniqueSeparator   public class YourNewClass :INotifyPropertyChangedDi2015NewLine{Di2015NewLine    public YourDataObject Object { get; set; }Di2015NewLineDi2015NewLine    private bool _isChecked;Di2015NewLine    public bool IsCheckedDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return _isChecked;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            _isChecked = value;Di2015NewLine            OnPropertyChanged("IsChecked");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine    protected virtual void OnPropertyChanged(string propertyName)Di2015NewLine    {Di2015NewLine        if (PropertyChanged != null)Di2015NewLine            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine    }Di2015NewLine}Di2015NewLine
326458Di2015UniqueSeparatorSetAttribute("discriminator-value", "-1");Di2015NewLine
326458Di2015UniqueSeparatorDiscriminateSubClassesOnColumn<sbyte>("Type", (sbyte)-1)Di2015NewLine
326496Di2015UniqueSeparatorGetAnyExpression<T>
326496Di2015UniqueSeparatorpropertyExp.Type
326496Di2015UniqueSeparatorGetAnyExpression<T>
326496Di2015UniqueSeparatorpropertyExp
326496Di2015UniqueSeparatorExpression
326496Di2015UniqueSeparatorGetAnyExpression
326496Di2015UniqueSeparatorExpression
326496Di2015UniqueSeparatorEnumerable.Any<T>
326496Di2015UniqueSeparatorAny
326496Di2015UniqueSeparatorLambdaExpression
326496Di2015UniqueSeparatorExpression
326496Di2015UniqueSeparatorAny
326496Di2015UniqueSeparatorMemberExpression
326496Di2015UniqueSeparatorMemberExpression
326496Di2015UniqueSeparatorExpression
326496Di2015UniqueSeparatorIEnumerable<>
326496Di2015UniqueSeparatorAny
326496Di2015UniqueSeparatorstatic MethodBase GetGenericMethod(Type type, string name, Type[] typeArgs, Di2015NewLine    Type[] argTypes, BindingFlags flags)Di2015NewLine{Di2015NewLine    int typeArity = typeArgs.Length;Di2015NewLine    var methods = type.GetMethods()Di2015NewLine        .Where(m => m.Name == name)Di2015NewLine        .Where(m => m.GetGenericArguments().Length == typeArity)Di2015NewLine        .Select(m => m.MakeGenericMethod(typeArgs));Di2015NewLineDi2015NewLine    return Type.DefaultBinder.SelectMethod(flags, methods.ToArray(), argTypes, null);Di2015NewLine}Di2015NewLine
326496Di2015UniqueSeparatorpropertyExp
326496Di2015UniqueSeparatorExpression
326496Di2015UniqueSeparatorExpression
326496Di2015UniqueSeparatorList<T>
326496Di2015UniqueSeparatorIEnumerable<T>
326496Di2015UniqueSeparatorstatic bool IsIEnumerable(Type type)Di2015NewLine{Di2015NewLine    return type.IsGenericTypeDi2015NewLine        && type.GetGenericTypeDefinition() == typeof(IEnumerable<>);Di2015NewLine}Di2015NewLineDi2015NewLinestatic Type GetIEnumerableImpl(Type type)Di2015NewLine{Di2015NewLine    // Get IEnumerable implementation. Either type is IEnumerable<T> for some T, Di2015NewLine    // or it implements IEnumerable<T> for some T. We need to find the interface.Di2015NewLine    if (IsIEnumerable(type))Di2015NewLine        return type;Di2015NewLine    Type[] t = type.FindInterfaces((m, o) => IsIEnumerable(m), null);Di2015NewLine    Debug.Assert(t.Length == 1);Di2015NewLine    return t[0];Di2015NewLine}Di2015NewLine
326496Di2015UniqueSeparatorType
326496Di2015UniqueSeparatorIEnumerable<T>
326496Di2015UniqueSeparatorstatic Expression CallAny(Expression collection, Delegate predicate)Di2015NewLine{Di2015NewLine    Type cType = GetIEnumerableImpl(collection.Type);Di2015NewLine    collection = Expression.Convert(collection, cType);Di2015NewLineDi2015NewLine    Type elemType = cType.GetGenericArguments()[0];Di2015NewLine    Type predType = typeof(Func<,>).MakeGenericType(elemType, typeof(bool));Di2015NewLineDi2015NewLine    // Enumerable.Any<T>(IEnumerable<T>, Func<T,bool>)Di2015NewLine    MethodInfo anyMethod = (MethodInfo)Di2015NewLine        GetGenericMethod(typeof(Enumerable), "Any", new[] { elemType }, Di2015NewLine            new[] { cType, predType }, BindingFlags.Static);Di2015NewLineDi2015NewLine    return Expression.Call(Di2015NewLine        anyMethod,Di2015NewLine            collection,Di2015NewLine            Expression.Constant(predicate));Di2015NewLine}Di2015NewLine
326496Di2015UniqueSeparatorMain()
326496Di2015UniqueSeparatorstatic void Main()Di2015NewLine{Di2015NewLine    // sampleDi2015NewLine    List<string> strings = new List<string> { "foo", "bar", "baz" };Di2015NewLineDi2015NewLine    // Trivial predicate: x => x.StartsWith("b")Di2015NewLine    ParameterExpression p = Expression.Parameter(typeof(string), "item");Di2015NewLine    Delegate predicate = Expression.Lambda(Di2015NewLine        Expression.Call(Di2015NewLine            p,Di2015NewLine            typeof(string).GetMethod("StartsWith", new[] { typeof(string) }),Di2015NewLine            Expression.Constant("b")),Di2015NewLine        p).Compile();Di2015NewLineDi2015NewLine    Expression anyCall = CallAny(Di2015NewLine        Expression.Constant(strings),Di2015NewLine        predicate);Di2015NewLineDi2015NewLine    // now test it.Di2015NewLine    Func<bool> a = (Func<bool>) Expression.Lambda(anyCall).Compile();Di2015NewLine    Console.WriteLine("Found? {0}", a());Di2015NewLine    Console.ReadLine();Di2015NewLine}Di2015NewLine
326574Di2015UniqueSeparatorToolStripMenuItem it = (ToolStripMenuItem)item.DropDownItems.Add(element);Di2015NewLineit.Name = element;Di2015NewLine// etc..Di2015NewLine
326774Di2015UniqueSeparator        System.Collections.Hashtable ht = new System.Collections.Hashtable();Di2015NewLineDi2015NewLine        ht.Add("test1", "test2");Di2015NewLine        ht.Add("test3", "test4");Di2015NewLineDi2015NewLine        List<string> keys = new List<string>();Di2015NewLine        foreach (System.Collections.DictionaryEntry de in ht)Di2015NewLine            keys.Add(de.Key.ToString());Di2015NewLineDi2015NewLine        foreach(string key in keys)Di2015NewLine        {Di2015NewLine            ht[key] = DateTime.Now;Di2015NewLine            Console.WriteLine(ht[key]);Di2015NewLine        }Di2015NewLine
326900Di2015UniqueSeparatorSelect<Tsource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>
326900Di2015UniqueSeparatorIEnumerable<TSource>
326900Di2015UniqueSeparatorFunc<Tsource, TResult>
326900Di2015UniqueSeparatorFunc<Tsource, TResult>
326900Di2015UniqueSeparatorSelect
326900Di2015UniqueSeparatorTResult
326900Di2015UniqueSeparatorSelect
326900Di2015UniqueSeparatorTResult ReturnAnonymousType<TResult>(Func<TResult> f) {Di2015NewLine   return f();Di2015NewLine}Di2015NewLineDi2015NewLineConsole.WriteLine(ReturnAnonymousType(Di2015NewLine   () => return new { Text = "Hello World!" } // type defined here, before calling Di2015NewLine);Di2015NewLine
327073Di2015UniqueSeparator bool valid = false;Di2015NewLine using (PrincipalContext context = new PrincipalContext(ContextType.Domain))Di2015NewLine {Di2015NewLine     valid = context.ValidateCredentials( username, password );Di2015NewLine }Di2015NewLine
327312Di2015UniqueSeparatorMovieUser
327312Di2015UniqueSeparatorIEnumerable<MovieUser> users = RetrieveUsers();Di2015NewLineDi2015NewLineIDictionary<MovieUser, float> questions = new Dictionary<MovieUser, float>();Di2015NewLineforeach (MovieUser user in users)Di2015NewLine{Di2015NewLine    questions[user] = RetrieveGuess(user);Di2015NewLine}Di2015NewLine
327312Di2015UniqueSeparatorIDictionary<MovieUser, float> questions = Di2015NewLine    RetrieveUsers.ToDictionary(user => user, user => RetrieveGuess(user));Di2015NewLine
327312Di2015UniqueSeparatorRetrieveUsers()
327312Di2015UniqueSeparatorDispose
327312Di2015UniqueSeparatorIEnumerator<T>
327312Di2015UniqueSeparatorGetEnumerator
327312Di2015UniqueSeparatorforeach
327312Di2015UniqueSeparatorMovieUser
327320Di2015UniqueSeparator public partial class Form1 : FormDi2015NewLine {Di2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        ListBox1.Items.AddRange(new Object[] { "First Item", "Second Item"});Di2015NewLine        ListBox1.DrawMode = DrawMode.OwnerDrawFixed;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void ListBox1_DrawItem(object sender, DrawItemEventArgs e)Di2015NewLine    {Di2015NewLine        e.DrawBackground();Di2015NewLine        e.Graphics.DrawString(ListBox1.Items[e.Index].ToString(), new Font("Arial", 10, FontStyle.Bold), Brushes.Black, e.Bounds);Di2015NewLine        e.DrawFocusRectangle();Di2015NewLine    }Di2015NewLine }Di2015NewLine
327494Di2015UniqueSeparator[MethodImpl]
327494Di2015UniqueSeparator[MethodImpl(MethodImplOptions.Synchronized)]Di2015NewLinepublic void Foo() {...}Di2015NewLineDi2015NewLine[MethodImpl(MethodImplOptions.Synchronized)]Di2015NewLinepublic void Bar() {...}Di2015NewLine
327494Di2015UniqueSeparatorthis
327494Di2015UniqueSeparatortypeof(TheClass)
327494Di2015UniqueSeparatorprivate readonly object syncLock = new object(); // or static if neededDi2015NewLineDi2015NewLine...Di2015NewLinepublic void Foo() {Di2015NewLine   lock(syncLock) {Di2015NewLine      ...Di2015NewLine   }Di2015NewLine}Di2015NewLine
327496Di2015UniqueSeparatorabstract class ParentDi2015NewLine{Di2015NewLine    abstract public int MyInt { get; }Di2015NewLine}Di2015NewLineDi2015NewLineclass Father : ParentDi2015NewLine{Di2015NewLine    public override int MyIntDi2015NewLine    {Di2015NewLine        get { /* Apply formula "X" and return a value */ }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass Mother : ParentDi2015NewLine{Di2015NewLine    public override int MyIntDi2015NewLine    {Di2015NewLine        get { /* Apply formula "Y" and return a value */ }Di2015NewLine    }Di2015NewLine}Di2015NewLine
327646Di2015UniqueSeparatorIEnumerable
327646Di2015UniqueSeparatorIEnumerable<T>
327646Di2015UniqueSeparatorimport
327646Di2015UniqueSeparatorSystem.Collections
327646Di2015UniqueSeparatorSystem.Collections.Generic
327646Di2015UniqueSeparatorobject
327646Di2015UniqueSeparatorIComparable
327934Di2015UniqueSeparatorint CompareStrings(String a, String b) {Di2015NewLine   if (a < b)Di2015NewLine      return -1;Di2015NewLine   else if (a > b)Di2015NewLine      return 1;Di2015NewLine   elseDi2015NewLine      return 0;Di2015NewLine}Di2015NewLine
327934Di2015UniqueSeparator1     4        8     10    Di2015NewLine   2     5  7     9Di2015NewLine------------ becomes ------------> Di2015NewLine1  2  4  5  7  8  9  10Di2015NewLine
328011Di2015UniqueSeparatorusing (SqlConnection cn = new SqlConnection(connectionString))Di2015NewLine{   Di2015NewLine    SqlCommand cm = new SqlCommand(commandString, cn)Di2015NewLine    cn.Open();Di2015NewLine    cm.ExecuteNonQuery();       Di2015NewLine}Di2015NewLine
328270Di2015UniqueSeparatorFormsAuth.SetAuthCookie(userName, rememberme);Di2015NewLineDi2015NewLine// get the full name (ex "John Doe") from the datbase here during loginDi2015NewLinestring fullName = "John Doe";Di2015NewLineDi2015NewLineResponse.Cookies["FullName"].Value = fullName;Di2015NewLineResponse.Cookies["FullName"].expires = DateTime.Now.AddDays(30);Di2015NewLine
328270Di2015UniqueSeparatorstring fullName = HttpContext.Current.Request.Cookies["FullName"].ValueDi2015NewLine
328275Di2015UniqueSeparatorAny
328275Di2015UniqueSeparatorEquals
328275Di2015UniqueSeparatorContains
328275Di2015UniqueSeparatorbool result = Enum.GetNames(typeof(FileExtensions)).Contains("mp3");Di2015NewLine
328677Di2015UniqueSeparator.Where(string.Format("it.ID in {0}", string.Join(",", valueIds.ToArray())));Di2015NewLine
328677Di2015UniqueSeparatorvar statusesToFind = new List<int> {1, 2, 3, 4};Di2015NewLinevar foos = from foo in myEntities.FoosDi2015NewLine           where statusesToFind.Contains(foo.Status)Di2015NewLine           select foo;Di2015NewLine
328767Di2015UniqueSeparatorstring[] array = new string[collection.Count];Di2015NewLinecollection.CopyTo(array, 0);Di2015NewLine
328800Di2015UniqueSeparatorpublic interface IMyDictionaryDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Di2015NewLine    /// </summary>Di2015NewLine    Dictionary<string, IFoo>.KeyCollection Keys { get; }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Di2015NewLine    /// </summary>Di2015NewLine    Dictionary<string, IFoo>.ValueCollection Values { get; }Di2015NewLine}Di2015NewLine
328836Di2015UniqueSeparatorDictionary
329072Di2015UniqueSeparator__MonoCS__
329072Di2015UniqueSeparatorbool runningOnMono = Type.GetType ("Mono.Runtime") != null;Di2015NewLine
329106Di2015UniqueSeparatorpublic interface IDataProducer<T>Di2015NewLine{Di2015NewLine    event Action<T> DataProduced;Di2015NewLine    event Action EndOfData;Di2015NewLine}Di2015NewLine
329324Di2015UniqueSeparatorWebClient x = new WebClient();Di2015NewLinestring source = x.DownloadString("http://www.singingeels.com/");Di2015NewLine
329324Di2015UniqueSeparatorstring title = Regex.Match(source, @"\\<title\\b[^>]*\\>\\s*(?<Title>[\\s\\S]*?)\\</title\\>", RegexOptions.IgnoreCase).Groups["Title"].Value;Di2015NewLine
329562Di2015UniqueSeparator[AdminAuthorize (Roles = "Administrator", Exempt = "Login, Logout") ]Di2015NewLinepublic class AdminController : ControllerDi2015NewLine{Di2015NewLine    public ActionResult Login()Di2015NewLine    {Di2015NewLine        return View();Di2015NewLine    }Di2015NewLineDi2015NewLine    public ActionResult Login()Di2015NewLine    {Di2015NewLine        return View();Di2015NewLine    }Di2015NewLineDi2015NewLine    ... other, restricted actions ...Di2015NewLine}Di2015NewLine
329562Di2015UniqueSeparator[Public]
329895Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Web.UI;Di2015NewLineusing System.Web.UI.WebControls;Di2015NewLineDi2015NewLinepublic class EmptyCapableRepeater : RepeaterDi2015NewLine{Di2015NewLine    public ITemplate EmptyDataTemplate { get; set; }Di2015NewLineDi2015NewLine    protected override void OnDataBinding ( EventArgs e )Di2015NewLine    {Di2015NewLine        base.OnDataBinding( e );Di2015NewLineDi2015NewLine        if ( this.Items.Count == 0 )Di2015NewLine        {Di2015NewLine            EmptyDataTemplate.InstantiateIn( this );Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
329895Di2015UniqueSeparator<custom:EmptyCapableRepeater runat="server" ID="rptSearchResults">Di2015NewLine    <ItemTemplate>Di2015NewLine        <%# Eval( "Result" )%>Di2015NewLine    </ItemTemplate>Di2015NewLine    <SeparatorTemplate>Di2015NewLine        <br />Di2015NewLine    </SeparatorTemplate>Di2015NewLine    <EmptyDataTemplate>Di2015NewLine        <em>No results were found.</em>Di2015NewLine    </EmptyDataTemplate>Di2015NewLine</custom:EmptyCapableRepeater>Di2015NewLine
329915Di2015UniqueSeparatorclass Curve: IEnumerable<RTRatePoint> {Di2015NewLine  IEnumerator<RTRatePoint> IEnumerable<RTRatePoint>.GetEnumerator() { Di2015NewLine    return GetEnumerator();Di2015NewLine  }Di2015NewLine  public RTRatePointEnumerator GetEnumerator() {Di2015NewLine    return new RTRatePointEnumerator(_hash);Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLineclass CurvePointEnumerator : IEnumerator<CurvePoint>Di2015NewLine
329915Di2015UniqueSeparatorvoid IDispose.Dispose() {Di2015NewLine  // Nothing to see hereDi2015NewLine}Di2015NewLine
330350Di2015UniqueSeparatorImage i = Image.FromFile("image.jpg");Di2015NewLine
330484Di2015UniqueSeparatorint? accom = (accomStr == "noval" ? (int?)null : Convert.ToInt32(accomStr));Di2015NewLine
330533Di2015UniqueSeparatorBinarReader.ReadBytes(int.MaxValue)
330546Di2015UniqueSeparator// using System.Collections;Di2015NewLine// using System.Collections.Generic;Di2015NewLine// using System.LinqDi2015NewLineDi2015NewLinepublic delegate string Indexer<T>(T obj);Di2015NewLineDi2015NewLinepublic static string concatenate<T>(IEnumerable<T> collection, Indexer<T> indexer, char separator)Di2015NewLine{Di2015NewLine    StringBuilder sb = new StringBuilder();Di2015NewLine    foreach (T t in collection) sb.Append(indexer(t)).Append(separator);Di2015NewLine    return sb.Remove(sb.Length - 1, 1).ToString();Di2015NewLine}Di2015NewLineDi2015NewLine// version for non-generic collectionsDi2015NewLinepublic static string concatenate<T>(IEnumerable collection, Indexer<T> indexer, char separator)Di2015NewLine{Di2015NewLine    StringBuilder sb = new StringBuilder();Di2015NewLine    foreach (object t in collection) sb.Append(indexer((T)t)).Append(separator);Di2015NewLine    return sb.Remove(sb.Length - 1, 1).ToString();Di2015NewLine}Di2015NewLineDi2015NewLine// example 1: simple int listDi2015NewLinestring getAllInts(IEnumerable<int> listOfInts)Di2015NewLine{Di2015NewLine    return concatenate<int>(listOfInts, Convert.ToString, ',');Di2015NewLine}Di2015NewLineDi2015NewLine// example 2: DataTable.RowsDi2015NewLinestring getTitle(DataRow row) { return row["title"].ToString(); }Di2015NewLinestring getAllTitles(DataTable table)Di2015NewLine{Di2015NewLine    return concatenate<DataRow>(table.Rows, getTitle, '\\n');Di2015NewLine}Di2015NewLineDi2015NewLine// example 3: DataTable.Rows without Indexer functionDi2015NewLinestring getAllTitles(DataTable table)Di2015NewLine{Di2015NewLine    return concatenate<DataRow>(table.Rows, r => r["title"].ToString(), '\\n');Di2015NewLine}Di2015NewLine
330578Di2015UniqueSeparator<MenuItem Header="My Items" ItemsSource="{Binding Path=MyMenuItems}" Click="DataBoundMenuItem_Click" />Di2015NewLine
330578Di2015UniqueSeparatorprivate void DataBoundMenuItem_Click(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine   MenuItem obMenuItem = e.OriginalSource as MenuItem;Di2015NewLine   MessageBox.Show( String.Format("{0} just said Hi!", obMenuItem.Header));Di2015NewLine}Di2015NewLine
330640Di2015UniqueSeparatorXElement author = doc.Root.Posts.Author;Di2015NewLine
330644Di2015UniqueSeparator<%# myUrlFunction(Eval("id"), Eval("stype")) %>Di2015NewLine
330644Di2015UniqueSeparatorprivate string myUrlFunction(object id, object stype)Di2015NewLine{Di2015NewLine    return "mypagename.aspx?whatever=" + id.ToString() + Di2015NewLine        "&youwanttodo=" + stype.ToString();Di2015NewLine}Di2015NewLine
330728Di2015UniqueSeparatorINSERT INTO YourTable(val1, val2, val3 ...) Di2015NewLineVALUES(@val1, @val2, @val3...);Di2015NewLineSELECT SCOPE_IDENTITY();Di2015NewLine
330833Di2015UniqueSeparatorvar methInfo = typeof(Test).GetMethod("MyToString", new Type[] {o.GetType()});Di2015NewLinemethInfo.Invoke(this, new object[] {o});Di2015NewLine
331014Di2015UniqueSeparatorHashSet<string> stringSet = new HashSet<string>(someStringCollection);Di2015NewLineDi2015NewLineif (stringSet.Contains(someString))Di2015NewLine{Di2015NewLine    ...Di2015NewLine}Di2015NewLine
331062Di2015UniqueSeparatorShouldSerializeOldObject ()Di2015NewLine{Di2015NewLine   return true;Di2015NewLine}Di2015NewLineDi2015NewLineShouldSerializeAnotherOldObject ()Di2015NewLine{Di2015NewLine   return trueDi2015NewLine}Di2015NewLine
331098Di2015UniqueSeparator    private void menuStrip1_MenuActivate( object sender, EventArgs e )Di2015NewLine    {Di2015NewLine        menuStrip1.Focus();Di2015NewLine    }Di2015NewLine
331430Di2015UniqueSeparator    public partial class MyClassDi2015NewLine    {Di2015NewLine        public Uri MyUriDi2015NewLine        {Di2015NewLine            getDi2015NewLine                { return new Uri(StringUriPropertyFromDB); }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
331466Di2015UniqueSeparatorvar userProjectIds =Di2015NewLine    from project in GetProjects()Di2015NewLine    select project.ProjectId;Di2015NewLineDi2015NewLinevar nonUserProjects =Di2015NewLine    from project in db.ProjectsDi2015NewLine    where !userProjectIds.Contains(project.ProjectId)Di2015NewLine    select project;Di2015NewLine
331640Di2015UniqueSeparator  foreach( RigidBodyBase body in doc.Bodies)Di2015NewLine     foreach ( RigidBodyBase otherBody in doc.Bodies)Di2015NewLine         if (!otherBody.Anchored && otherBody != body)  // or otherBody.Id != body.Id -- whatever is required... Di2015NewLine              // then do the work hereDi2015NewLine
331640Di2015UniqueSeparator   foreach (RigidBodyBase body in doc.Bodies)Di2015NewLine       body.TotalForce += body.GravityForce;Di2015NewLine
331662Di2015UniqueSeparatorif(e.Row.RowType == DataControlRowType.DataRow)Di2015NewLine{Di2015NewLine    e.Row.Attributes["onClick"] = "location.href='view.aspx?id=" + DataBinder.Eval(e.Row.DataItem, "id") + "'";Di2015NewLine}Di2015NewLine
331761Di2015UniqueSeparatorHMODULE hEXE = GetModuleHandle(NULL);Di2015NewLine
331795Di2015UniqueSeparatorDispose
331795Di2015UniqueSeparatorDispose
331795Di2015UniqueSeparatorDispose
331795Di2015UniqueSeparatorpublic void Log(string line)Di2015NewLine{Di2015NewLine    var sw = new StreamWriter(File.Open(Di2015NewLine        "LogFile.log", FileMode.OpenOrCreate, FileAccess.Write, FileShare.None));Di2015NewLineDi2015NewLine    sw.WriteLine(line);Di2015NewLineDi2015NewLine    // Since we don't close the stream the FileStream finalizer will do that for Di2015NewLine    // us but we don't know when that will be and until then the file is locked.Di2015NewLine}Di2015NewLine
331795Di2015UniqueSeparatorStreamWriter
331795Di2015UniqueSeparatorpublic void Log(string line)Di2015NewLine{Di2015NewLine    using (var sw = new StreamWriter(File.Open(Di2015NewLine        "LogFile.log", FileMode.OpenOrCreate, FileAccess.Write, FileShare.None))) {Di2015NewLineDi2015NewLine        sw.WriteLine(line);Di2015NewLine    }Di2015NewLineDi2015NewLine    // Since we use the using block (which conveniently calls Dispose() for us)Di2015NewLine    // the file well be closed at this point.Di2015NewLine}Di2015NewLine
331983Di2015UniqueSeparatorJavaScriptSerializer serializer = new JavaScriptSerializer();Di2015NewLinevar output = serializer.Serialize(your_anon_object);Di2015NewLine
331994Di2015UniqueSeparator  public partial class FooRowDi2015NewLine  {    Di2015NewLine       private void myColumnChanging Handler(object sender, EventArgs e)Di2015NewLine       {Di2015NewLine            // ImplementationDi2015NewLine       }Di2015NewLine       private void myColumnChanged Handler(object sender, EventArgs e)Di2015NewLine       {Di2015NewLine            // ImplementationDi2015NewLine       }Di2015NewLine       public void RegisterEvents()Di2015NewLine       {Di2015NewLine          ((DataRow)this).Table.ColumnChanging += myColumnChanging; Di2015NewLine          ((DataRow)this).Table.ColumnChanged += myColumnChanged; Di2015NewLine       }Di2015NewLine   }Di2015NewLine
331994Di2015UniqueSeparatorpublic class FooDataTable Di2015NewLine{Di2015NewLine    //  -- Other implementationDi2015NewLine    public FooRow MyNewFooRow()Di2015NewLine    {Di2015NewLine        FooRow fr = this.NewFooRow(); // call the original factoryDi2015NewLine        fr.RegisterEvents();Di2015NewLine        return fr;Di2015NewLine    }Di2015NewLine }Di2015NewLine
332444Di2015UniqueSeparatorXmlDocument doc = new XmlDocument();Di2015NewLineDi2015NewLineXmlElement root = doc.CreateElement("JOBS");Di2015NewLineroot.SetAttribute("xmlns:JOBS", "http://www.example.com");Di2015NewLineroot.SetAttribute("xmlns:JOB", "http://www.example.com");Di2015NewLinedoc.AppendChild(root);Di2015NewLineDi2015NewLineXmlElement job = doc.CreateElement("JOB");Di2015NewLineDi2015NewLineXmlElement docInputs    = doc.CreateElement("JOB", "DOCINPUTS", "http://www.example.com");Di2015NewLineXmlElement docInput     = doc.CreateElement("JOB", "DOCINPUT", "http://www.example.com");Di2015NewLinedocInputs.AppendChild(docInput);Di2015NewLinejob.AppendChild(docInputs);Di2015NewLineDi2015NewLineXmlElement docOutputs   = doc.CreateElement("JOB", "DOCOUTPUTS", "http://www.example.com");Di2015NewLineXmlElement docOutput    = doc.CreateElement("JOB", "DOCOUTPUT", "http://www.example.com");Di2015NewLinedocOutputs.AppendChild(docOutput);Di2015NewLinejob.AppendChild(docOutputs);Di2015NewLineDi2015NewLinedoc.DocumentElement.AppendChild(job);Di2015NewLine
332471Di2015UniqueSeparator<Database ... Serialization="Unidirectional">...Di2015NewLine
332496Di2015UniqueSeparatorHKCU\\Software\\Microsoft\\Internet Explorer\\Main\\Start PageDi2015NewLine
332644Di2015UniqueSeparatorFormsAuthenticationTicket ticket = new FormsAuthenticationTicket(Di2015NewLine                1, // Ticket versionDi2015NewLine                name, // Username associated with ticketDi2015NewLine                DateTime.Now, // Date/time issuedDi2015NewLine                DateTime.Now.AddMonths(1), // Date/time to expireDi2015NewLine                true, // "true" for a persistent user cookieDi2015NewLine                DateTime.Now.ToUniversalTime(), // last time the users was checkedDi2015NewLine                FormsAuthentication.FormsCookiePath);// Path cookie valid forDi2015NewLineDi2015NewLine        // Encrypt the cookie using the machine key for secure transportDi2015NewLine        string hash = FormsAuthentication.Encrypt(ticket);Di2015NewLine        HttpCookie cookie = new HttpCookie(Di2015NewLine            FormsAuthentication.FormsCookieName, // Name of auth cookieDi2015NewLine            hash); // Hashed ticketDi2015NewLineDi2015NewLine        cookie.HttpOnly = true;Di2015NewLineDi2015NewLine        // Set the cookie's expiration time to the tickets expiration timeDi2015NewLine        if (ticket.IsPersistent) cookie.Expires = ticket.Expiration;Di2015NewLine        //cookie.Secure = FormsAuthentication.RequireSSL;Di2015NewLine        Response.Cookies.Add(cookie);Di2015NewLine
332644Di2015UniqueSeparatorpublic void FormsAuthentication_OnAuthenticate(object sender, Di2015NewLine                           FormsAuthenticationEventArgs args)Di2015NewLine    {Di2015NewLine        if (FormsAuthentication.CookiesSupported)Di2015NewLine        {Di2015NewLine            if (Request.Cookies[FormsAuthentication.FormsCookieName] != null)Di2015NewLine            {Di2015NewLine                tryDi2015NewLine                {Di2015NewLine                    FormsAuthenticationTicket ticket = FormsAuthentication.Decrypt(Di2015NewLine                      Request.Cookies[FormsAuthentication.FormsCookieName].Value);Di2015NewLineDi2015NewLine                    DateTime lastCheckedTime = DateTime.TryParse(ticket.UserData);Di2015NewLine                    TimeSpan elapsed = DateTime.Now - lastCheckedTime;Di2015NewLine                    if (elapsed.TotalMinutes > 10)//Get 10 from the configDi2015NewLine                    {Di2015NewLine                        //Check if user exists in the database. Di2015NewLine                        if (CheckIfUserIsValid())Di2015NewLine                        {Di2015NewLine                            //Reset the last checked timeDi2015NewLine                            // and set the authentication cookie againDi2015NewLine                        }Di2015NewLine                        elseDi2015NewLine                        {Di2015NewLine                            FormsAuthentication.SignOut();Di2015NewLine                            FormsAuthentication.RedirectToLoginPage();Di2015NewLine                            return;Di2015NewLine                        }Di2015NewLine                    }Di2015NewLineDi2015NewLine                }Di2015NewLine                catch (Exception e)Di2015NewLine                {Di2015NewLine                    // Decrypt method failed.Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
332932Di2015UniqueSeparatorpublic class dgv : DataGridViewDi2015NewLine{Di2015NewLineprotected override bool ProcessDialogKey(Keys keyData)Di2015NewLine{Di2015NewLine    Keys key = (keyData & Keys.KeyCode);Di2015NewLine    if (key == Keys.Enter)Di2015NewLine    {Di2015NewLine        return this.ProcessRightKey(keyData);Di2015NewLine    }Di2015NewLine    return base.ProcessDialogKey(keyData);Di2015NewLine}Di2015NewLineprotected override bool ProcessDataGridViewKey(KeyEventArgs e)Di2015NewLine{Di2015NewLine    if (e.KeyCode == Keys.Enter)Di2015NewLine    {Di2015NewLine        return this.ProcessRightKey(e.KeyData);Di2015NewLine    }Di2015NewLine    return base.ProcessDataGridViewKey(e);Di2015NewLine}Di2015NewLine
333034Di2015UniqueSeparatorbool isSubset = !t2.Except(t1).Any();Di2015NewLine
333062Di2015UniqueSeparatorpublic struct user Di2015NewLine{ Di2015NewLine    public string FirstName; Di2015NewLine    public string LastName; Di2015NewLine    public string zilionotherproperties; Di2015NewLine    public bool SearchByLastNameOnly; Di2015NewLine} Di2015NewLinepublic user[] GetUserData(user usr) Di2015NewLine{ Di2015NewLine    //search for users using passed data and return an array of users. Di2015NewLine}Di2015NewLine
333263Di2015UniqueSeparatorPageAccessChecker.CheckIfRoleAllowed(path);Di2015NewLine
333263Di2015UniqueSeparatorPageAccessChecker._default.CheckIfRoleAllowed(path);Di2015NewLine
333268Di2015UniqueSeparator'Clean just a filenameDi2015NewLineDim filename As String = "salmnas dlajhdla kjha;dmas'lkasn"Di2015NewLineFor Each c In IO.Path.GetInvalidFileNameCharsDi2015NewLine    filename = filename.Replace(c, "")Di2015NewLineNextDi2015NewLineDi2015NewLine'See also IO.Path.GetInvalidPathCharsDi2015NewLine
333276Di2015UniqueSeparator(?<!<EM>[^<]+)</EM>Di2015NewLine
333276Di2015UniqueSeparator</EM>
333276Di2015UniqueSeparator?!
333276Di2015UniqueSeparator</EM>
333276Di2015UniqueSeparator(?!=<EM>.*)
333276Di2015UniqueSeparator=<EM>.*
333276Di2015UniqueSeparator=
333276Di2015UniqueSeparator?<!
333475Di2015UniqueSeparator   public string GetAppPoolName() {Di2015NewLineDi2015NewLine        string AppPath = Context.Request.ServerVariables["APPL_MD_PATH"];Di2015NewLineDi2015NewLine        AppPath = AppPath.Replace("/LM/", "IIS://localhost/");Di2015NewLine        DirectoryEntry root = new DirectoryEntry(AppPath);Di2015NewLine        if ((root == null)) {Di2015NewLine            return " no object got";Di2015NewLine        }Di2015NewLine        string AppPoolId = (string)root.Properties["AppPoolId"].Value;Di2015NewLine        return AppPoolId;Di2015NewLine    }Di2015NewLine
333671Di2015UniqueSeparatorBindingFlags.Public | BindingFlags.Static
333718Di2015UniqueSeparator.InnerTextDi2015NewLine
333786Di2015UniqueSeparatorAssembly.GetExecutingAssembly().Location
333840Di2015UniqueSeparatorMyStruct[] foo = new MyStruct[1000];Di2015NewLine
333840Di2015UniqueSeparatorRational[] fractions = new Rational[1000];Di2015NewLine
333840Di2015UniqueSeparatornew Guid()
333866Di2015UniqueSeparatornew HttpContextWrapper( httpContext )
333866Di2015UniqueSeparatorclass WebInstanceService Di2015NewLine{Di2015NewLine    private HttpContextBase _Context;        Di2015NewLineDi2015NewLine    public WebInstanceService( ... , HttpContextBase HttpContext )Di2015NewLine    {Di2015NewLine        ....Di2015NewLine        _Context = HttpContext;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Methods...Di2015NewLine    public string GetInstanceVariable(string VariableName)Di2015NewLine    {Di2015NewLine         return _Context.Session[VariableName];Di2015NewLine    }Di2015NewLine}Di2015NewLine
333966Di2015UniqueSeparatorConsole.WriteLine(ex.ToString());Di2015NewLine
333966Di2015UniqueSeparatorToString
333966Di2015UniqueSeparatorSystem.Object
333966Di2015UniqueSeparatorToString
334062Di2015UniqueSeparator<asp:TemplateField AccessibleHeaderText="Edit">Di2015NewLine    <ItemTemplate>Di2015NewLine        <asp:Button runat="server" ID="btnEdit" PostBackUrl="~/Default.aspx" OnClientClick='form1.ActivityId.value = this.Tag;' Tag='<%# Eval("ActivityId") %>' Text="Edit"/>Di2015NewLine    </ItemTemplate>Di2015NewLine</asp:TemplateField>Di2015NewLine
334291Di2015UniqueSeparatorXmlDocument doc = new XmlDocument();Di2015NewLineXmlDeclaration declaration = doc.CreateXmlDeclaration("1.0", "ISO-8859-1", null);Di2015NewLinedoc.AppendChild(declaration);Di2015NewLineXmlProcessingInstruction pi = doc.CreateProcessingInstruction("MyCustomNameHere", "attribute1=\\"val1\\" attribute2=\\"val2\\"");Di2015NewLinedoc.AppendChild(pi);Di2015NewLine
334327Di2015UniqueSeparatorSelectionForeColor
334327Di2015UniqueSeparatorSelectionBackColor
334327Di2015UniqueSeparatorDefaultCellStyle
334327Di2015UniqueSeparatorPrivate Sub dgv_CellFormatting(ByVal sender As System.Object, ByVal e As System.Windows.Forms.DataGridViewCellFormattingEventArgs) Handles dgv.CellFormattingDi2015NewLine    If e.RowIndex < 0 Then Exit SubDi2015NewLineDi2015NewLine    If e.RowIndex Mod 2 = 0 ThenDi2015NewLine        e.CellStyle.BackColor = Color.OrangeDi2015NewLine    ElseDi2015NewLine        e.CellStyle.BackColor = Color.RedDi2015NewLine    End IfDi2015NewLineDi2015NewLine    'Make the selected cell the same colorDi2015NewLine    e.CellStyle.SelectionBackColor = e.CellStyle.BackColorDi2015NewLine    e.CellStyle.SelectionForeColor = e.CellStyle.ForeColorDi2015NewLineEnd SubDi2015NewLine
334586Di2015UniqueSeparatorBitmap FinalBitmap = new Bitmap();Di2015NewLineMemoryStream msStream = new MemoryStream();Di2015NewLineDi2015NewLinestrInputParameter == Request.Params("MagicParm").ToString()Di2015NewLineDi2015NewLine// Magic code goes here to generate your bitmap image.Di2015NewLineFinalBitmap.Save(msStream, ImageFormat.Png);Di2015NewLineDi2015NewLineResponse.Clear();Di2015NewLineResponse.ContentType = "image/png";Di2015NewLineDi2015NewLinemsStream.WriteTo(Response.OutputStream);Di2015NewLineDi2015NewLineif ((FinalBitmap != null)) FinalBitmap.Dispose();Di2015NewLine
334645Di2015UniqueSeparatorProcess.Start(String, String)Di2015NewLine
334645Di2015UniqueSeparatorexplorer.exe -pDi2015NewLine
334645Di2015UniqueSeparatorProcess.Start("explorer.exe", "-p")Di2015NewLine
334672Di2015UniqueSeparatorthis.checkedListBox1.SelectionMode = System.Windows.Forms.SelectionMode.None;Di2015NewLine
334672Di2015UniqueSeparator  private void checkedListBox1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        for (int i = 0; i < checkedListBox1.Items.Count; i++)Di2015NewLine\\{Di2015NewLineDi2015NewLineDi2015NewLine          if (checkedListBox1.GetItemRectangle(i).Contains(checkedListBox1.PointToClient(MousePosition)))Di2015NewLine          {Di2015NewLine              switch (checkedListBox1.GetItemCheckState(i))Di2015NewLine              {Di2015NewLine                  case CheckState.Checked:Di2015NewLine                      checkedListBox1.SetItemCheckState(i, CheckState.Unchecked);Di2015NewLine                      break;Di2015NewLine                  case CheckState.Indeterminate:Di2015NewLine                  case CheckState.Unchecked:Di2015NewLine                      checkedListBox1.SetItemCheckState(i, CheckState.Checked);Di2015NewLine                       break;Di2015NewLine              } Di2015NewLineDi2015NewLine          }Di2015NewLineDi2015NewLine\\}Di2015NewLine    }Di2015NewLine
334920Di2015UniqueSeparator<a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.backgroundworker.aspx" rel="nofollow">System.ComponentModel.BackgroundWorker</a>
335204Di2015UniqueSeparator// The http://www.adventure-works.com namespace is forced to be the default namespace.Di2015NewLineXNamespace aw = "http://www.adventure-works.com";Di2015NewLineXNamespace fc = "www.fourthcoffee.com";Di2015NewLineXElement root = new XElement(aw + "Root",Di2015NewLine    new XAttribute("xmlns", "http://www.adventure-works.com"),Di2015NewLine///////////  I say, check out this line.Di2015NewLine    new XAttribute(XNamespace.Xmlns + "fc", "www.fourthcoffee.com"),Di2015NewLine///////////Di2015NewLine    new XElement(fc + "Child",Di2015NewLine        new XElement(aw + "DifferentChild", "other content")Di2015NewLine    ),Di2015NewLine    new XElement(aw + "Child2", "c2 content"),Di2015NewLine    new XElement(fc + "Child3", "c3 content")Di2015NewLine);Di2015NewLineConsole.WriteLine(root);Di2015NewLine
335333Di2015UniqueSeparatorfunction warning() {            Di2015NewLineDi2015NewLine    var ele;Di2015NewLine    var startDate;Di2015NewLine    var endDate;Di2015NewLine    var threeWeeksInMilliseconds = 1814400000; //1000 ms * 60 sec * 60 min * 24 hr * 21 daysDi2015NewLineDi2015NewLine    //get starting valueDi2015NewLine    ele = document.getElementById('txtStartDate');Di2015NewLine    if (ele == 'undefined'){Di2015NewLine    \return false; //no start elementDi2015NewLine    }Di2015NewLine    else {Di2015NewLine    \try{Di2015NewLine    \\startDate = new Date(ele.value);Di2015NewLine    \}Di2015NewLine    \catch (e) {Di2015NewLine    \\return false;Di2015NewLine    \}Di2015NewLine    }Di2015NewLineDi2015NewLine    //get the ending valueDi2015NewLine    ele = document.getElementById('txtEndDate');Di2015NewLine    if (ele == 'undefined'){Di2015NewLine    \return false; //no start elementDi2015NewLine    }Di2015NewLine    else {Di2015NewLine    \try{Di2015NewLine    \\endDate = new Date(ele.value);Di2015NewLine    \}Di2015NewLine    \catch (e) {Di2015NewLine    \\return false;Di2015NewLine    \}Di2015NewLine    }Di2015NewLineDi2015NewLine    //getTime() returns millisecondsDi2015NewLine    if ((endDate.getTime() - startDate.getTime()) < threeWeeksInMilliseconds) {Di2015NewLine    \return true;Di2015NewLine    }Di2015NewLine    //else present the message for confirmation.Di2015NewLineDi2015NewLine    var msg = "The date range you have selected will return a substantial " + "" +Di2015NewLine        \"amount of data and will take some time to process.\\n\\n" + Di2015NewLine        \"Are you sure you want to continue?";Di2015NewLine    var answer;Di2015NewLineDi2015NewLine    answer = confirm(msg);Di2015NewLineDi2015NewLine    if (answer) {Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine    else {Di2015NewLine        return false;Di2015NewLine    }Di2015NewLineDi2015NewLine    //default return condition - nothing should get here so this indicates an error.Di2015NewLine    //Use true if you want to allow this to process. Di2015NewLine    return false;Di2015NewLine}Di2015NewLine
335453Di2015UniqueSeparatorprivate bool ascending;Di2015NewLineprivate int sortColumn;Di2015NewLineprivate void dgv_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)Di2015NewLine{Di2015NewLine    List<SomeObject> list = (List<SomeObject>)someBindingSource.DataSource;Di2015NewLine    if (e.ColumnIndex != sortColumn) ascending = false;Di2015NewLineDi2015NewLine    int 1 = e.ColumnIndex;Di2015NewLine    if (i == DescriptionColumn.Index)Di2015NewLine        list.Sort(new Comparison<SomeObject>((x,y) => x.ID.CompareTo(y.ID)));Di2015NewLineDi2015NewLine    sortColumn = e.ColumnIndex;Di2015NewLine    ascending = !ascending;Di2015NewLine    if (!ascending) list.Reverse():Di2015NewLineDi2015NewLine    someBindingSource.ResetBindings(false);Di2015NewLine    // you may also have to call dgv.Invalidate();Di2015NewLine}Di2015NewLine
335502Di2015UniqueSeparatorpublic class MyBLClassDi2015NewLine{Di2015NewLine    public void DoSomething(Form1 theForm)Di2015NewLine    {Di2015NewLine        //You can use theForm.cancelSearch to get the valueDi2015NewLine    }Di2015NewLine}Di2015NewLine
335502Di2015UniqueSeparatorMyBlClass myClassInstance = new MyBlClass;Di2015NewLinemyClassInstance.DoSomething(this);Di2015NewLine
335563Di2015UniqueSeparatorList<string> words = System.IO.File.ReadAllText("MyWords.txt").Split(new string[]{Environment.NewLine}).ToList();Di2015NewLineDi2015NewLine// C# 3.0 (LINQ) example:Di2015NewLineDi2015NewLine    // get all words of length 5:Di2015NewLine    from word in words where word.length==5 select wordDi2015NewLineDi2015NewLine    // get partial matches on "foo"Di2015NewLine    from word in words where word.Contains("foo") select wordDi2015NewLineDi2015NewLine// C# 2.0 example:Di2015NewLineDi2015NewLine    // get all words of length 5:Di2015NewLine    words.FindAll(delegate(string s) { return s.Length == 5; });Di2015NewLineDi2015NewLine    // get partial matches on "foo"Di2015NewLine    words.FindAll(delegate(string s) { return s.Contains("foo"); });Di2015NewLine
335669Di2015UniqueSeparatorselect count(*) from bob
335669Di2015UniqueSeparatorint retryCount = 3;Di2015NewLinebool success = false;  Di2015NewLinewhile (retryCount > 0 && !success) Di2015NewLine{Di2015NewLine  tryDi2015NewLine  {Di2015NewLine     // your sql hereDi2015NewLine     success = true; Di2015NewLine  } Di2015NewLine  catch (SqlException exception)Di2015NewLine  {Di2015NewLine     if (exception.Number != 1205)Di2015NewLine     {Di2015NewLine       // a sql exception that is not a deadlock Di2015NewLine       throw; Di2015NewLine     }Di2015NewLine     // Add delay here if you wish. Di2015NewLine     retryCount--; Di2015NewLine     if (retryCount == 0) throw;Di2015NewLine  }Di2015NewLine}Di2015NewLine
335706Di2015UniqueSeparatorpublic class MyCustomBuildLogger : ILoggerDi2015NewLine{Di2015NewLine    private IEventSource source;Di2015NewLineDi2015NewLine public void Initialize(IEventSource eventSource)Di2015NewLine        {Di2015NewLine            this.source = eventSource;Di2015NewLine            //Events.ProjectStarted += new ProjectStartedEventHandler(Events_ProjectStarted);Di2015NewLine            //Events.ProjectFinished += new ProjectFinishedEventHandler(Events_ProjectFinished);Di2015NewLine            Events.WarningRaised += new BuildWarningEventHandler(Events_WarningRaised);Di2015NewLine            Events.ErrorRaised += new BuildErrorEventHandler(Events_ErrorRaised);Di2015NewLine            Events.BuildFinished += new BuildFinishedEventHandler(Events_BuildFinished);Di2015NewLine            //Events.BuildStarted += new BuildStartedEventHandler(Events_BuildStarted);Di2015NewLine            Events.MessageRaised += new BuildMessageEventHandler(Events_MessageRaised);Di2015NewLine            //Events.CustomEventRaised += new CustomBuildEventHandler(Events_CustomEventRaised);Di2015NewLineDi2015NewLine            Events.MessageRaised += new BuildMessageEventHandler(Events_MessageRaised);Di2015NewLine        }Di2015NewLineDi2015NewLine void Events_ErrorRaised(object sender, BuildErrorEventArgs e)Di2015NewLine        {Di2015NewLine            // This logs the error to VS Error List tool windowDi2015NewLine            Log.LogError(String.Empty, Di2015NewLineDi2015NewLineDi2015NewLine             String.Empty,Di2015NewLine                    String.Empty, Di2015NewLine                    e.File, Di2015NewLine                    e.LineNumber, Di2015NewLine                    e.ColumnNumber,Di2015NewLine                    e.LineNumber, Di2015NewLine                    e.ColumnNumber, Di2015NewLine                    e.Message);Di2015NewLine           }Di2015NewLine}Di2015NewLine
335706Di2015UniqueSeparator_logger = new MyCustomBuildLogger();Di2015NewLine_logger.Log = Log;Di2015NewLine_engine.RegisterLogger(_logger);Di2015NewLine
335740Di2015UniqueSeparatorPreviewTextInput
335740Di2015UniqueSeparatore.Handled = true
335943Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine  throw new DivideByZeroException();Di2015NewLine}Di2015NewLinecatch (DivideByZeroException ex)Di2015NewLine{Di2015NewLine  LogHelper.Error("TEST EXCEPTION", ex);Di2015NewLine}Di2015NewLine
336050Di2015UniqueSeparatorScreen.FromControl(this)Di2015NewLine
336112Di2015UniqueSeparator.dump
336112Di2015UniqueSeparatorshell.c
336112Di2015UniqueSeparator.dump
336112Di2015UniqueSeparatordo_meta_command
336314Di2015UniqueSeparatorusing Moq;Di2015NewLineusing NUnitFramework;Di2015NewLineDi2015NewLinenamespace MyNameSpaceDi2015NewLine    {Di2015NewLine        [TestFixture]Di2015NewLine        public class MyClassTestsDi2015NewLine        {Di2015NewLineDi2015NewLine            [Test]Di2015NewLine            public void TestGetSomeString()Di2015NewLine            {Di2015NewLine                const string EXPECTED_STRING = "Some String!";Di2015NewLineDi2015NewLine                Mock<IDependance> myMock = new Mock<IDependance>();Di2015NewLine                myMock.Expect(m => m.GiveMeAString()).Returns("Hello World");Di2015NewLineDi2015NewLine                MyClass myobject = new MyClass();Di2015NewLineDi2015NewLine                string someString = myobject.GetSomeString(myMock.Object);Di2015NewLineDi2015NewLine                Assert.AreEqual(EXPECTED_STRING, someString);Di2015NewLine                myMock.VerifyAll();Di2015NewLineDi2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        public class MyClassDi2015NewLine        {Di2015NewLineDi2015NewLine            public virtual string GetSomeString(IDependance objectThatITalkTo)Di2015NewLine            {Di2015NewLine                return objectThatITalkTo.GiveMeAString();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public interface IDependanceDi2015NewLine        {Di2015NewLine            string GiveMeAString();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
336314Di2015UniqueSeparator            public virtual string GetSomeString(IDependance objectThatITalkTo)Di2015NewLine            {Di2015NewLine                if (objectThatITalkTo.GiveMeAString() == "Hello World")Di2015NewLine                    return "Hi";Di2015NewLine            }Di2015NewLine
336314Di2015UniqueSeparatormyMock.Expect(m => m.GiveMeAString()).Returns(null);Di2015NewLine
