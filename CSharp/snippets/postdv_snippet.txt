21040446Di2015UniqueSeparator  string[] Options= form["option"].Split(new string[] { Environment.NewLine }, StringSplitOptions.None);Di2015NewLine
21040446Di2015UniqueSeparatorstring[] lines = theText.Split(new string[] { "\\r\\n", "\\n" }, StringSplitOptions.None);Di2015NewLine
21040644Di2015UniqueSeparatorvoid YourFunc(Int32[] input1, Int32[] input2, out Int32[] output1, out Int32[] output2)Di2015NewLine{Di2015NewLine   output1 = new Int32[] { 1, 2, 3 };Di2015NewLine   output2 = new Int32[] { 4, 5, 6 };Di2015NewLine}Di2015NewLineDi2015NewLineâ€¦Di2015NewLineDi2015NewLineYourFunc(i1, i2, out o1, out o2);Di2015NewLine
21040741Di2015UniqueSeparatorRandom
21040741Di2015UniqueSeparator  Random rnd = new Random();Di2015NewLine  int toss = rnd.Next(1,3);Di2015NewLine
21040741Di2015UniqueSeparator   // Let it be thread-safeDi2015NewLine   private static ThreadLocal<Random> s_Gen = new ThreadLocal<Random>(Di2015NewLine    () => new Random());Di2015NewLineDi2015NewLine   // Thread-safe non-skewed generatorDi2015NewLine   public static Random Generator {Di2015NewLine     get {Di2015NewLine       return s_Gen.Value;Di2015NewLine     }Di2015NewLine   }Di2015NewLineDi2015NewLine   ...Di2015NewLineDi2015NewLine   int toss = Generator.Next(1,3);Di2015NewLine
21040796Di2015UniqueSeparatorCateringItems
21040796Di2015UniqueSeparatorBookedCateringItem
21040796Di2015UniqueSeparatorCateringItem
21041104Di2015UniqueSeparator    public class FooModelDi2015NewLine    {Di2015NewLine        public int CategoryId { get; set; }Di2015NewLine        public int SubCategoryId { get; set; }Di2015NewLine        public List<Category> Categories { get; set; }Di2015NewLine        public List<SubCategory> SubCategories { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class CategoryDi2015NewLine    {Di2015NewLine        public int Id { get; set; }Di2015NewLine        public string Description { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class SubCategoryDi2015NewLine    {Di2015NewLine        public int Id { get; set; }Di2015NewLine        public string Description { get; set; }Di2015NewLine        public int CategoryId { get; set; }Di2015NewLine    }Di2015NewLine
21041104Di2015UniqueSeparator   public ActionResult Ddl()Di2015NewLine    {Di2015NewLine        var model = new FooModel();Di2015NewLine        var categories = new List<Category>();Di2015NewLine        var subCategories = new List<SubCategory>();Di2015NewLineDi2015NewLine        // Read from dbDi2015NewLine        categories.Add(new Category { Id = 1, Description = "Cat 1" });Di2015NewLine        categories.Add(new Category { Id = 2, Description = "Cat 2" });Di2015NewLine        subCategories.Add(new SubCategory { Id = 1, Description = "Sub-Cat 1", CategoryId = 1 });Di2015NewLine        subCategories.Add(new SubCategory { Id = 2, Description = "Sub-Cat 2", CategoryId = 2 });Di2015NewLineDi2015NewLine        model.Categories = categories;Di2015NewLine        model.SubCategories = subCategories.Where(s => s.Id == 1).ToList();Di2015NewLineDi2015NewLine        // initially set selectedDi2015NewLine        model.CategoryId = 1;Di2015NewLine        model.SubCategoryId = 1;Di2015NewLineDi2015NewLine        return View(model);Di2015NewLine    }Di2015NewLineDi2015NewLine    [HttpPost]Di2015NewLine    public ActionResult Ddl(FooModel model)Di2015NewLine    {Di2015NewLine        var subCategoryId = model.SubCategoryId;Di2015NewLineDi2015NewLine        // Send categories back to model etcDi2015NewLine        ...Di2015NewLineDi2015NewLine        return View(model);Di2015NewLine    }Di2015NewLine
21041104Di2015UniqueSeparator    [HttpGet]Di2015NewLine    public ActionResult GetSubCategories(int id)Di2015NewLine    {Di2015NewLine        var subCategories = new List<SubCategory>();Di2015NewLine        subCategories.Add(new SubCategory { Id = 1, Description = "Sub-Cat 1", CategoryId = 1 });Di2015NewLine        subCategories.Add(new SubCategory { Id = 2, Description = "Sub-Cat 2", CategoryId = 2 });Di2015NewLine        var filteredCategories = subCategories.Where(s => s.Id == id).ToList();Di2015NewLine        return Json(filteredCategories, JsonRequestBehavior.AllowGet);Di2015NewLine    }Di2015NewLine
21041104Di2015UniqueSeparator@model FooModelDi2015NewLineDi2015NewLine@using (Html.BeginForm())Di2015NewLine{Di2015NewLine    @Html.DropDownListFor(m => m.CategoryId, new SelectList(Model.Categories.AsEnumerable(), "Id", "Description"))Di2015NewLine    @Html.DropDownListFor(m => m.SubCategoryId,new SelectList(Model.SubCategories.AsEnumerable(), "Id", "Description"))Di2015NewLine    <input type="submit" value="submit" />Di2015NewLine}Di2015NewLine<script src="~/Scripts/jquery-1.8.2.min.js"></script>Di2015NewLine<script>Di2015NewLine    var getsubCategoryUrl = '@Url.Action("GetSubCategories")';Di2015NewLine    $(function () {Di2015NewLineDi2015NewLine        $('#CategoryId').change(function () {Di2015NewLine            var selectedCategory = $('#CategoryId').val();Di2015NewLine            if (selectedCategory != null) {Di2015NewLine                $.getJSON(getsubCategoryUrl, { id: selectedCategory }, function (subs) {Di2015NewLineDi2015NewLine                    var subSelect = $('#SubCategoryId');Di2015NewLine                    subSelect.empty();Di2015NewLineDi2015NewLine                    $.each(subs, function (index, sub) {Di2015NewLine                        subSelect.append($('<option/>', {Di2015NewLine                            value: sub.Id,Di2015NewLine                            text: sub.DescriptionDi2015NewLine                        }));Di2015NewLine                    });Di2015NewLineDi2015NewLine                });Di2015NewLine            }Di2015NewLine        });Di2015NewLineDi2015NewLine    });Di2015NewLine</script>Di2015NewLine
21041188Di2015UniqueSeparator<rule name="Rewrite rule1 for Thing 2" patternSyntax="Wildcard" stopProcessing="true">Di2015NewLine    <match url="My/Test\\.dll" />Di2015NewLine    <action type="Rewrite" url="Api/Test" appendQueryString="false" />Di2015NewLine</rule>Di2015NewLine
21041422Di2015UniqueSeparator<system.serviceModel>Di2015NewLine    <bindings>Di2015NewLine        <basicHttpBinding>Di2015NewLine            <binding name="BasicHttpBinding_NorthWind" maxBufferSize="2147483647" maxReceivedMessageSize="2147483647">Di2015NewLine                <readerQuotas maxDepth="32" maxStringContentLength="2097152" maxArrayLength="2097152" maxBytesPerRead="4096" maxNameTableCharCount="16384"/>Di2015NewLine                <security mode="None">Di2015NewLine                    <transport clientCredentialType="None" proxyCredentialType="None" realm=""/>Di2015NewLine                    <message clientCredentialType="UserName" algorithmSuite="Default"/>Di2015NewLine                </security>Di2015NewLine            </binding>Di2015NewLine        </basicHttpBinding>Di2015NewLine    </bindings>Di2015NewLineDi2015NewLine    <client>Di2015NewLine        <endpoint Di2015NewLine              address="http://somesite.com/endpoint.svc"Di2015NewLine              binding="basicHttpBinding"Di2015NewLine              bindingConfiguration="BasicHttpBinding_NorthWind"Di2015NewLine              contract="IYourServiceContract" />Di2015NewLine    </client>Di2015NewLine</system.serviceModel>Di2015NewLine
21041501Di2015UniqueSeparator                    int angka = Convert.ToInt32(angkaString) + x;Di2015NewLine
21041501Di2015UniqueSeparator                    int angka = Convert.ToInt32(angkaString) + 1;Di2015NewLine
21041550Di2015UniqueSeparatornull
21041550Di2015UniqueSeparatorint? l = lc.HasValue ? (int)lc.Value : (int?)null; Di2015NewLine
21041550Di2015UniqueSeparatorif-else
21041550Di2015UniqueSeparatorif (lc.HasValue)Di2015NewLine    l = (int)lc.Value;Di2015NewLineelseDi2015NewLine    l = null;  // worksDi2015NewLine
21041550Di2015UniqueSeparator?: operator
21041550Di2015UniqueSeparatorint
21041550Di2015UniqueSeparatornull
21041550Di2015UniqueSeparatorenum
21041550Di2015UniqueSeparatorint?
21041550Di2015UniqueSeparatorint
21041550Di2015UniqueSeparatorint? l = lc.HasValue ? (int?)lc.Value : null; // works alsoDi2015NewLine
21041550Di2015UniqueSeparatorint? l = (int?)lc;Di2015NewLine
21041644Di2015UniqueSeparator var results = qas.GroupBy(x => x.AgentName)Di2015NewLine    .Select(x => newDi2015NewLine    {Di2015NewLine        AnalystId = x.Key,Di2015NewLine        Analyst = x.FirstOrDefault().Analyst.AgentName,Di2015NewLine        Correct= x.Where(x => x.questions ==1).Count(),Di2015NewLine        Wrong= x.Where(x => x.questions ==0).Count()Di2015NewLine    })Di2015NewLine
21041661Di2015UniqueSeparatorTrigger
21041661Di2015UniqueSeparator<Style TargetType="TextBlock" x:Key="textBlock">Di2015NewLine    <Style.Triggers>Di2015NewLine        <Trigger Property="TextBlock.Text" Value="00:00">Di2015NewLine            <Setter Property="Background" Value="Red" />Di2015NewLine        </Trigger>Di2015NewLine    </Style.Triggers>Di2015NewLine</Style>Di2015NewLine
21041864Di2015UniqueSeparatorElementAt
21041864Di2015UniqueSeparatorFind
21041864Di2015UniqueSeparatorFirst()
21041864Di2015UniqueSeparatorGetNextRequest()
21041864Di2015UniqueSeparator        var repo = new Mock<IRepository<ExportRequest>>();Di2015NewLine        repo.Setup(rep => rep.Min(It.IsAny<Expression<Func<ExportRequest, int>>>()))Di2015NewLine            .Returns<Expression<Func<ExportRequest, int>>>(expr => requests.Min(e => e.Id));Di2015NewLineDi2015NewLine        repo.Setup(rep => rep.Get(It.IsAny<int>())).Returns<int>(i => requests.Find(er => er.Id == i));Di2015NewLineDi2015NewLine        repo.Setup(rep => rep.Delete(It.IsAny<ExportRequest>()))Di2015NewLine            .Callback<ExportRequest>(req => Assert.IsTrue(requests.Remove(req), "Couldn't remove {0} from list", req.Id));Di2015NewLineDi2015NewLineDi2015NewLine        var exportRequestRepository = new ExportRequestRepository(repo.Object);Di2015NewLineDi2015NewLine        Assert.AreEqual(0, exportRequestRepository.GetNextRequest().Id);Di2015NewLine        Assert.AreEqual(1, exportRequestRepository.GetNextRequest().Id);Di2015NewLineDi2015NewLine        var top = requests.First();Di2015NewLine        var third = exportRequestRepository.GetNextRequest();Di2015NewLineDi2015NewLine        Assert.AreEqual(top.Id, third.Id, "Top element in list has id of {0}, but return from repository is {1}", top.Id, third.Id);Di2015NewLine
21041864Di2015UniqueSeparatorGet
21041864Di2015UniqueSeparatorrequests.Find()
21041864Di2015UniqueSeparatorrequests.ElementAt
21041876Di2015UniqueSeparatorRedirect
21041876Di2015UniqueSeparatorModelState
21041876Di2015UniqueSeparatorpublic ActionResult OpenTicket(string serialNumber, string version)Di2015NewLine{Di2015NewLine   if (!customerSubscription.IsExpired)           Di2015NewLine   {Di2015NewLine       // use the Redirect method from base controllerDi2015NewLine       return Redirect("https://devdept.zendesk.com/tickets/new?ticket[fields[111111]]=" + serialNumber + "&ticket[fields[222222]]=" + version);Di2015NewLine   }Di2015NewLine   elseDi2015NewLine   {Di2015NewLine       // display an error page with upsell optionsDi2015NewLine       ModelState.AddModelError("ErrorKey", "Custom error message");Di2015NewLine       // it will return OpenTicket view, otr pass a name you want to returnDi2015NewLine       return View(); Di2015NewLineDi2015NewLine       // if you redirect here, you will lose the ModelState.Di2015NewLine   }   Di2015NewLine}Di2015NewLine
21041876Di2015UniqueSeparator@Html.ValidationSummary()Di2015NewLine
21041905Di2015UniqueSeparator// Our required dateDi2015NewLineDateTime reportDate = new DateTime(2014,1,1).Date; Di2015NewLine// Let's find number of days between now and required day. Ensure that the date is not in the future!Di2015NewLineint deltaDays = (DateTime.Now.Date - date).Days; Di2015NewLine// Let's get the list of dates which we need the reports forDi2015NewLinevar dates = Enumerable.Range(0, deltaDays + 1).Select(dd => DateTime.Now.Date.AddDays(-dd).ToString("MM/dd/yyyy")).ToArray();Di2015NewLine// and query by this listDi2015NewLinevar query = (from o in db.Order_ReportsDi2015NewLine          where o.ReportDueDateTime in datesDi2015NewLine          select o);Di2015NewLine
21041977Di2015UniqueSeparator  String str = @"tv_rocscores_DeDeP005M3TSub.csv FMR: 0.0009 FNMR: 0.023809524 SCORE: -4  Conformity: True";Di2015NewLineDi2015NewLine  String[] parts = str.Split(' ');Di2015NewLine  parts[0] = Regex.Match(parts[0], @"P\\d\\d\\d").Value; // <- "P005"Di2015NewLine
21042008Di2015UniqueSeparatorusing Amazon.S3.Transfer;
21042176Di2015UniqueSeparatorTrim
21042176Di2015UniqueSeparatorpublic string Trim()Di2015NewLine{Di2015NewLine  return this.TrimHelper(2);Di2015NewLine}Di2015NewLine
21042176Di2015UniqueSeparatorTrim
21042176Di2015UniqueSeparatorpublic class TestDi2015NewLine{Di2015NewLine    public int Prop {get;set;}Di2015NewLineDi2015NewLine    public Test DoStuf()Di2015NewLine    {Di2015NewLine        Prop=1;Di2015NewLine        return this;Di2015NewLine    }Di2015NewLineDi2015NewLine    public Test DoOtherStuff()Di2015NewLine    {Di2015NewLine       return new Test();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21042176Di2015UniqueSeparatorvar test = new Test();Di2015NewLinetest.DoStuff().DoOtherStuff();Di2015NewLine
21042207Di2015UniqueSeparatorDataContract
21042207Di2015UniqueSeparatorDataMember
21042283Di2015UniqueSeparatorclass MapLocationDi2015NewLine    {Di2015NewLine        public MapLocation()Di2015NewLine        {Di2015NewLine        }Di2015NewLineDi2015NewLine        public LatLng Location {get; set;}Di2015NewLine        public BitmapDescriptor icon {get; set;}Di2015NewLine        public String Snippet {get; set;}Di2015NewLine        public String Title {get; set;}Di2015NewLine    }Di2015NewLine}Di2015NewLine
21042311Di2015UniqueSeparatorISO 639-2 three-letter code
21042311Di2015UniqueSeparatorISO 639-1 two-letter code
21042311Di2015UniqueSeparatorISO 639-3
21042311Di2015UniqueSeparatorCultureInfo
21042311Di2015UniqueSeparatorDictionary<string,string>
21042311Di2015UniqueSeparatorISO 639-3
21042311Di2015UniqueSeparatorISO 639-2
21042311Di2015UniqueSeparatorCultureInfo
21042311Di2015UniqueSeparatorISO 639-3
21042341Di2015UniqueSeparatorvar myData = myData2.Select(data2 => new MyData() { Data2 = data2 });Di2015NewLinevar collection = new ObservableCollection<MyData>(myData);Di2015NewLine
21042380Di2015UniqueSeparatordatesList.Sort((x, y) => x.StoredDate.CompareTo(y.StoredDate));Di2015NewLine
21042380Di2015UniqueSeparatorvar list = dateList.OrderBy(x => x.TimeOfDay).ToList(); Di2015NewLine
21042385Di2015UniqueSeparatorvar _expr = Expression.Parameter(typeof(MongoDoc), "x");Di2015NewLineDi2015NewLine//x.DataDi2015NewLineExpression member = Expression.PropertyOrField(_expr, "Data");Di2015NewLineDi2015NewLine//x.Data["Identifier"]Di2015NewLinemember = Expression.Property(member, "Item", new Expression[]{Expression.Constant("Identifier")}); Di2015NewLineDi2015NewLine//x.Data["Identifier"] == "H7PXXK"Di2015NewLinemember = Expression.Equal(member, Expression.Constant((BsonValue)"H7PXXK"));Di2015NewLine
21042385Di2015UniqueSeparator//x.Data["MoreData"]Di2015NewLinemember = Expression.Property(member, "Item", new Expression[]{Expression.Constant("MoreData")}); Di2015NewLine//x.Data["MoreData"]["Identifier"]Di2015NewLinemember = Expression.Property(member, "Item", new Expression[]{Expression.Constant("Identifier")});Di2015NewLine
21042399Di2015UniqueSeparatornull
21042399Di2015UniqueSeparatorNullable<>
21042399Di2015UniqueSeparatorx = nullDi2015NewLine
21042399Di2015UniqueSeparatorx
21042399Di2015UniqueSeparatorx
21042399Di2015UniqueSeparatornull
21042399Di2015UniqueSeparatorx
21042399Di2015UniqueSeparatorstring
21042399Di2015UniqueSeparatornull
21042399Di2015UniqueSeparatornull
21042399Di2015UniqueSeparatorx
21042399Di2015UniqueSeparatorint?
21042399Di2015UniqueSeparatornull
21042399Di2015UniqueSeparatorNullable<int>
21042399Di2015UniqueSeparatorHasValue
21042399Di2015UniqueSeparatorx
21042399Di2015UniqueSeparatorint
21042399Di2015UniqueSeparatorvar x = null;
21042399Di2015UniqueSeparatorvar
21042399Di2015UniqueSeparatornull
21042399Di2015UniqueSeparatorsomeBoolean ? 42 : null /* illegal */Di2015NewLine
21042399Di2015UniqueSeparatornull
21042399Di2015UniqueSeparatorint
21042399Di2015UniqueSeparatorNullable<>
21042399Di2015UniqueSeparatorsomeBoolean ? (int?)42 : nullDi2015NewLine
21042399Di2015UniqueSeparatorsomeBoolean ? 42 : (int?)nullDi2015NewLine
21042399Di2015UniqueSeparator:
21042399Di2015UniqueSeparatorint?
21042399Di2015UniqueSeparatorint
21042399Di2015UniqueSeparatorsomeBoolean ? (object)42 : nullDi2015NewLine
21042399Di2015UniqueSeparatorsomeBoolean ? 42 : (object)nullDi2015NewLine
21042399Di2015UniqueSeparator?:
21042399Di2015UniqueSeparatorint? x;Di2015NewLinex = someBoolean ? 42 : null; // still illegal!Di2015NewLine
21042399Di2015UniqueSeparatorsomeBoolean ? 42 : null
21042399Di2015UniqueSeparatorx = someBoolean ? 42 : null
21042399Di2015UniqueSeparatorx
21042399Di2015UniqueSeparatorx
21042399Di2015UniqueSeparator?:
21042401Di2015UniqueSeparatorClassName
21042401Di2015UniqueSeparatorClassName.Clone()
21042401Di2015UniqueSeparatorpublic ObservableCollection<ParentNode> CreateTreeViewCollection(string ClassName)Di2015NewLine{Di2015NewLine    EnumerateFullData AllData = new EnumerateFullData(ClassName);Di2015NewLine}Di2015NewLineDi2015NewLinepublic class EnumerateFullDataDi2015NewLine{Di2015NewLine    public EnumerateFullData (string className)Di2015NewLine    { Di2015NewLine        ClassName  = className;Di2015NewLine    }Di2015NewLine    public string ClassName { get; set; }Di2015NewLine    public List<PropertyData> Properties { get; set; }Di2015NewLine}Di2015NewLine
21042424Di2015UniqueSeparator"SELECT * From `" + ID + "_" + objectName + "` ORDER BY date DESC LIMIT 1"Di2015NewLine
21042471Di2015UniqueSeparatorXmlSerializer
21042471Di2015UniqueSeparatorprotected
21042471Di2015UniqueSeparatorXmlSerializer
21042980Di2015UniqueSeparatorvar yourstring = "===20th and 21st centuries===";Di2015NewLinevar regex = new Regex(Regex.Escape("==="));Di2015NewLine// The last 1 tells to replace only the first occurence of the EscapeDi2015NewLineyourstring = regex.Replace(yourstring, "</p><p class=\\"strong\\">", 1);Di2015NewLineyourstring = regex.Replace(yourstring, "<p>", 1);Di2015NewLine
21043051Di2015UniqueSeparatorResponse.End(
21043051Di2015UniqueSeparatorHttpContext.Current.ApplicationInstance.CompleteRequest()
21043051Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    string fileToDownload = MapPath(@"~\\Sample.txt");Di2015NewLine    string fileToRead = MapPath(@"~\\FileNotExist.txt");Di2015NewLineDi2015NewLine    tryDi2015NewLine    {Di2015NewLine        //Section 1Di2015NewLine        tryDi2015NewLine        { Di2015NewLine            // try to read the file which does not exist to raise the exceptionDi2015NewLine            StreamReader ss = new StreamReader(fileToRead);Di2015NewLine        }Di2015NewLine        catch (IOException IoEx)Di2015NewLine        {Di2015NewLine            // Just for sample exceptionDi2015NewLine        }Di2015NewLineDi2015NewLine        // Section 2 code block still execute because exception handled by upper try catch block Di2015NewLine        //Section 2Di2015NewLineDi2015NewLine        Response.Clear();Di2015NewLine        Response.ClearHeaders();Di2015NewLine        Response.AddHeader("Content-Length", fileToDownload.Length.ToString()); Di2015NewLine        Response.AddHeader("Content-Disposition","attachment;filename=SampleTemplate.txt");Di2015NewLine        Response.ContentType = "text";Di2015NewLine        Response.WriteFile(fileToDownload);Di2015NewLine        Response.Flush();Di2015NewLine        HttpContext.Current.ApplicationInstance.CompleteRequest();Di2015NewLineDi2015NewLine    }Di2015NewLine    catch (System.Threading.ThreadAbortException abrtEx)Di2015NewLine    {Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    //Section 3 Code block not executing even after exception handeled by ThreadAbortException Di2015NewLine    //Section 3Di2015NewLine     string test = "Do futher process after sample downloaded";Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLinecatch (Exception ex) // Outer Catch BlockDi2015NewLine{Di2015NewLine    throw ex;Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLine
21043140Di2015UniqueSeparator<ItemGroup>Di2015NewLine  <Compile Include="..\\Foo\\**\\*.cs" Exclude="..\\Foo\\**\\AssemblyInfo.cs" />Di2015NewLine</ItemGroup>Di2015NewLine
21043163Di2015UniqueSeparatorBatch
21043163Di2015UniqueSeparatorIEnumerable<IEnumerable<int>> chuncks = list.Batch(9);Di2015NewLine
21043163Di2015UniqueSeparatorpublic static List<List<T>> Batch(this IEnumerable<T> source, int batchSize)Di2015NewLine{Di2015NewLine    List<List<T>> result = new List<List<T>>();Di2015NewLine    List<T> batch = new List<T>(batchSize);Di2015NewLineDi2015NewLine    foreach(T item in source)Di2015NewLine    {Di2015NewLine        if (batch.Count == batchSize)Di2015NewLine        {Di2015NewLine            result.Add(batch);Di2015NewLine            batch = new List<T>(batchSize);                 Di2015NewLine        }Di2015NewLineDi2015NewLine        batch.Add(item);Di2015NewLine    }Di2015NewLineDi2015NewLine    if (batch.Any())Di2015NewLine       result.Add(batch);Di2015NewLineDi2015NewLine    return result;        Di2015NewLine}Di2015NewLine
21043163Di2015UniqueSeparatorlist.Skip(i)
21043180Di2015UniqueSeparatorpublic interface IRepository<TEntity> where TEntity : BaseClassDi2015NewLine...Di2015NewLinepublic class Repository<TEntity> : IRepository<TEntity> where TEntity : BaseClassDi2015NewLine...Di2015NewLinepublic virtual IRepository<TEntity> Repository<TEntity>() where TEntity : BaseClassDi2015NewLine
21043180Di2015UniqueSeparatorunit_of_work.Repository<BaseClass>().Insert(<whatever>);Di2015NewLine
21043650Di2015UniqueSeparatorExecuteSqlCommand
21043650Di2015UniqueSeparatorSqlQuery
21043650Di2015UniqueSeparatordataContext.Database.ExecuteSqlCommand("name", parameter)Di2015NewLine
21043808Di2015UniqueSeparatorproperty.GetValue(obj)
21043808Di2015UniqueSeparatorproperty.GetValue(obj, null)
21043808Di2015UniqueSeparatorproperty.GetValue(obj)
21043808Di2015UniqueSeparatorproperty.GetValue(obj, null)
21044069Di2015UniqueSeparatorEnumerable.GroupBy
21044069Di2015UniqueSeparatorSum
21044069Di2015UniqueSeparatorvar companyGroups = tblCompany.AsEnumerable()Di2015NewLine    .GroupBy(row => new {Di2015NewLine        Company = row.Field<string>("Company"),Di2015NewLine        Manager = row.Field<string>("Manager"),Di2015NewLine        Location = row.Field<string>("Location"),Di2015NewLine    });Di2015NewLine// creates an empty DataTable with the same columns:Di2015NewLinevar merge = tblCompany.Clone();  Di2015NewLineforeach(var companyGroup in  companyGroups)Di2015NewLine{Di2015NewLine    merge.Rows.Add(Di2015NewLine        companyGroup.Key.Company,Di2015NewLine        companyGroup.Key.Manager,Di2015NewLine        companyGroup.Key.Location,Di2015NewLine        companyGroup.Sum(row => row.Field<int>("Count1")),Di2015NewLine        companyGroup.Sum(row => row.Field<int>("Count2")),Di2015NewLine        companyGroup.Sum(row => row.Field<int>("Count3")));Di2015NewLine}Di2015NewLine
21044069Di2015UniqueSeparatorvar tblCompany = new DataTable();Di2015NewLinetblCompany.Columns.Add("Company", typeof(string));Di2015NewLinetblCompany.Columns.Add("Manager", typeof(string));Di2015NewLinetblCompany.Columns.Add("Location", typeof(string));Di2015NewLinetblCompany.Columns.Add("Count1", typeof(int));Di2015NewLinetblCompany.Columns.Add("Count2", typeof(int));Di2015NewLinetblCompany.Columns.Add("Count3", typeof(int));Di2015NewLineDi2015NewLinetblCompany.Rows.Add("C1", "Mgr", "LocName", 1, 0, 0);Di2015NewLinetblCompany.Rows.Add("C1", "Mgr", "LocName", 1, 3, 0);Di2015NewLinetblCompany.Rows.Add("C1", "Mgr", "LocName", 0, 0, 7);Di2015NewLinetblCompany.Rows.Add("C2", "Mgr2", "LocName2", 0, 0, 5);Di2015NewLine
21044069Di2015UniqueSeparator!= 0
21044069Di2015UniqueSeparatorforeach (var companyGroup in companyGroups)Di2015NewLine{Di2015NewLine    merge.Rows.Add(Di2015NewLine        companyGroup.Key.Company,Di2015NewLine        companyGroup.Key.Manager,Di2015NewLine        companyGroup.Key.Location,Di2015NewLine        companyGroupDi2015NewLine            .Select(row => row.Field<int>("Count1"))Di2015NewLine            .Where(i => i != 0)Di2015NewLine            .FirstOrDefault(),Di2015NewLine        companyGroupDi2015NewLine            .Select(row => row.Field<int>("Count2"))Di2015NewLine            .Where(i => i != 0)Di2015NewLine            .FirstOrDefault(),Di2015NewLine        companyGroupDi2015NewLine            .Select(row => row.Field<int>("Count3"))Di2015NewLine            .Where(i => i != 0)Di2015NewLine            .FirstOrDefault());Di2015NewLine}Di2015NewLine
21044069Di2015UniqueSeparatorforeach (var companyGroup in companyGroups)Di2015NewLine{Di2015NewLine    // modify just the first row of each group, Di2015NewLine    // all others will be removed after the mergeDi2015NewLine    DataRow first = companyGroup.First();Di2015NewLine    first.SetField("Count1", companyGroup.Sum(row => row.Field<int>("Count1")));Di2015NewLine    first.SetField("Count2", companyGroup.Sum(row => row.Field<int>("Count2")));Di2015NewLine    first.SetField("Count3", companyGroup.Sum(row => row.Field<int>("Count3")));Di2015NewLine    foreach (DataRow other in companyGroup.Skip(1))Di2015NewLine        tblCompany.Rows.Remove(other);Di2015NewLine}Di2015NewLine
21044314Di2015UniqueSeparatorstatic class MySpriteEffectsDi2015NewLine{Di2015NewLine    public const SpriteEffects FlipVertically = SpriteEffect.FlipVertically;Di2015NewLine    public const SpriteEffects FlipHorizontally = SpriteEffect.FlipHorizontally;Di2015NewLine    public const SpriteEffects FlipBoth = SpriteEffect.FlipVertically | SpriteEffects.FlipHozizontally;Di2015NewLine}Di2015NewLine
21044314Di2015UniqueSeparator.Draw(..., MySpriteEffects.FlipBoth);Di2015NewLine
21044314Di2015UniqueSeparatorFlipVertically
21044314Di2015UniqueSeparatorFlipHorizontally
21044424Di2015UniqueSeparatorbpm.Blogs
21044424Di2015UniqueSeparatorbpm.Blogs.BlogComment = new List<BlogComment>();
21044424Di2015UniqueSeparatorBlogs
21044424Di2015UniqueSeparatorbpm.Blogs = new Blog();Di2015NewLine
21044461Di2015UniqueSeparatorprivate void flipView_SelectionChanged(object sender, Windows.UI.Xaml.Controls.SelectionChangedEventArgs e)Di2015NewLine    {Di2015NewLine        if (flipView != null)Di2015NewLine        {Di2015NewLine            var item = flipView.SelectedItem as MyObj;Di2015NewLine            string question = item.Question;Di2015NewLine            string answer = item.Answer;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
21044461Di2015UniqueSeparatorpublic class MyObjDi2015NewLine{Di2015NewLine    public string Question { get; set; }Di2015NewLine    public string Answer { get; set; }Di2015NewLine}Di2015NewLine
21044461Di2015UniqueSeparatorpublic class MyObjDi2015NewLine{Di2015NewLine    [JsonProperty(PropertyName = "Question")Di2015NewLine    public string Question { get; set; }Di2015NewLineDi2015NewLine    [JsonProperty(PropertyName = "Answer")]Di2015NewLine    public string Answer { get; set; }Di2015NewLine}Di2015NewLine
21044807Di2015UniqueSeparatorroute.MapRouteDi2015NewLine
21044807Di2015UniqueSeparatorpublic static void Register(HttpConfiguration config) {Di2015NewLine    config.MapHttpAttributeRoutesDi2015NewLineDi2015NewLine    config.Routes.MapHttpRoute(Di2015NewLine        name: "CatchAll", routeTemplate: "values/path/{*pathvalue}", Di2015NewLine        defaults: new {id = RouteParameter.Optional });Di2015NewLine}Di2015NewLine
21044932Di2015UniqueSeparatorpublic HttpResponseMessage GetAll() {Di2015NewLineDi2015NewLineList<MyEntity> before = MyEntityRepository.GetAll();Di2015NewLinereturn Request.CreateResponse(HttpStatusCode.OK,Di2015NewLine    before.Select(x => new ExtendedEntity Di2015NewLine    {Di2015NewLine       Property1    = x.Property1,Di2015NewLine       Property2    = x.Property2,Di2015NewLine       ExtendedProp = ExtendedPropProvider.getExtended(x)Di2015NewLine    }));Di2015NewLine
21045056Di2015UniqueSeparatorpublic sealed class DerivedTool : IToolWrapper {Di2015NewLine    private Tool _tool;Di2015NewLineDi2015NewLine    public DerivedTool(String filename) : base() {Di2015NewLine        _tool = LoadFromFile(filename) as Tool;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static implicit operator Tool(DerivedTool dt)Di2015NewLine    {Di2015NewLine        return dt._tool;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21045333Di2015UniqueSeparatorthis
21045333Di2015UniqueSeparatorpublic static Anfrage Create(byte[] dis)Di2015NewLine{Di2015NewLine    XmlSerializer deser = new XmlSerializer(typeof(Anfrage));Di2015NewLine    Stream str = new MemoryStream();Di2015NewLine    str.Write(dis, 0, dis.Length);Di2015NewLine    return (Anfrage)deser.Deserialize(str);Di2015NewLine}Di2015NewLine
21045333Di2015UniqueSeparatorvar anfrage = Anfrage.Create(bytes);Di2015NewLine
21045346Di2015UniqueSeparatorMicrosoft.TeamFoundation.Build.Activities.dll
21045346Di2015UniqueSeparatorpublic sealed class GetDefaultWorkspace : BaseActivity<Workspace>Di2015NewLine{     Di2015NewLine    public override Activity CreateBody()Di2015NewLine    {Di2015NewLine        var type = typeof(TfGetSources).Assembly.GetType("Microsoft.TeamFoundation.Build.Activities.TeamFoundation.TfGetSources+GetDefaultWorkspaceName");Di2015NewLineDi2015NewLine        var activity = (CodeActivity<string>)Activator.CreateInstance(type);Di2015NewLine        var sequence = new Sequence();Di2015NewLine        var workspaceName = new Variable<string>();Di2015NewLineDi2015NewLine        sequence.Variables.Add(workspaceName);Di2015NewLine        sequence.Activities.Add(activity);Di2015NewLine        activity.Result = (OutArgument<string>) workspaceName;Di2015NewLineDi2015NewLine        sequence.Activities.Add(new GetWorkspaceDi2015NewLine            {Di2015NewLine                Name = workspaceName,Di2015NewLine                Result = new LambdaReference<Workspace>(ctx => Result.Get(ctx))Di2015NewLine            });Di2015NewLineDi2015NewLine        return sequence;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21045366Di2015UniqueSeparatorService Management API
21045366Di2015UniqueSeparatorWindows Azure Management Library
21045366Di2015UniqueSeparatorWindows Azure Platform Training Kit
21045469Di2015UniqueSeparatorreturn myCollectionDi2015NewLine     .Select(x => {Di2015NewLine                  x.ToBeDetermined = determine(x);Di2015NewLine                  return x;Di2015NewLine             })Di2015NewLine     .Where(x => x.ToBeTermined == true);Di2015NewLine
21045693Di2015UniqueSeparatorPaint
21045693Di2015UniqueSeparatorRegion
21045693Di2015UniqueSeparatorGraphics
21045693Di2015UniqueSeparatorPaint
21045693Di2015UniqueSeparatorOnPaint
21045693Di2015UniqueSeparatorGraphics
21045732Di2015UniqueSeparator_SrNo   _Name   _Address  _City  _CountryDi2015NewLine
21045732Di2015UniqueSeparatorSomeoneName =  MYdataGrid[_Name.Index,1].Value ;Di2015NewLine
21045773Di2015UniqueSeparatorRandom
21045773Di2015UniqueSeparator    Random r = new Random();Di2015NewLine    r.Next(1, 20);Di2015NewLine
21045773Di2015UniqueSeparator    int[,] arr = new int [10, 10];Di2015NewLine    Random r = new Random();Di2015NewLine    for (int ki = 0; ki < 10; i++)Di2015NewLine    {Di2015NewLine        for (int kj = 0; kj < 10; j++)Di2015NewLine        {Di2015NewLine            arr[ki, kj] = r.Next(1, 20);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
21045847Di2015UniqueSeparatorMoq.As<TInterface>
21045847Di2015UniqueSeparatoras
21045847Di2015UniqueSeparator// ArrangeDi2015NewLinevar foo = Mock.Create<IFoo>();Di2015NewLinevar iDisposable = foo as IDisposable; // <<<<<<<<<<<<<<<<<<<<<<<<<<<< Di2015NewLine
21045894Di2015UniqueSeparatorList<string> names = Di2015NewLine    dt.AsEnumerable().Select(r => r.Field<string>("Name")).ToList();Di2015NewLine
21045894Di2015UniqueSeparatorList<string> names = new List<string>();Di2015NewLineDi2015NewLineforeach(DataRow r in dt.Rows)    Di2015NewLine    names.Add((string)r["Name"]);Di2015NewLine
21045902Di2015UniqueSeparatorpublic class EllipseDi2015NewLine{Di2015NewLine    public PointF Center { get; set; }Di2015NewLine    public Brush Brush { get; set; }Di2015NewLine    public float Diameter { get; set; }Di2015NewLine    public float DiameterDelta { get; set; }Di2015NewLineDi2015NewLine    public Ellipse(float x, float y)Di2015NewLine    {Di2015NewLine        Center = new PointF(x, y);Di2015NewLine        Brush = Brushes.Blue;Di2015NewLine        Diameter = 5;Di2015NewLine        DiameterDelta = 1;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21045902Di2015UniqueSeparatorEllipse.DiameterDelta
21045902Di2015UniqueSeparator5
21045902Di2015UniqueSeparator25
21045902Di2015UniqueSeparator1
21045902Di2015UniqueSeparatorTimer.Interval
21045902Di2015UniqueSeparatorprivate void timer_Tick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // presuming that you made a separate user controlDi2015NewLine    // which has a collection of ellipses in a `Clouds` propertyDi2015NewLineDi2015NewLine    foreach (var c in cloudBox.Clouds)Di2015NewLine        Animate(c);Di2015NewLineDi2015NewLine    cloudBox.Invalidate();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Animate(Ellipse c)Di2015NewLine{Di2015NewLine    // update diameterDi2015NewLine    c.Diameter += c.DiameterDelta;Di2015NewLineDi2015NewLine    // when you reach bounds, change delta directionDi2015NewLine    if ((c.DiameterDelta < 0 && c.Diameter <= 5) ||Di2015NewLine        (c.DiameterDelta > 0 && c.Diameter >= 25))Di2015NewLine        c.DiameterDelta = -c.DiameterDelta;Di2015NewLine}Di2015NewLine
21045902Di2015UniqueSeparatorControlStyles.AllPaintingInWmPaint
21045902Di2015UniqueSeparatorControlStyles.OptimizedDoubleBuffer
21045902Di2015UniqueSeparatorPictureBox
21045902Di2015UniqueSeparatorpublic partial class CloudBox : UserControlDi2015NewLine{Di2015NewLine    public CloudBox()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        SetStyle(Di2015NewLine            ControlStyles.AllPaintingInWmPaint |Di2015NewLine            ControlStyles.OptimizedDoubleBuffer |Di2015NewLine            ControlStyles.UserPaint |Di2015NewLine            ControlStyles.ResizeRedraw, true);Di2015NewLine    }Di2015NewLineDi2015NewLine    private readonly List<Ellipse> _clouds = new List<Ellipse>();Di2015NewLine    public List<Ellipse> CloudsDi2015NewLine    {Di2015NewLine        get { return _clouds; }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnPaint(PaintEventArgs e)Di2015NewLine    {Di2015NewLine        e.Graphics.CompositingQuality = CompositingQuality.HighQuality;Di2015NewLine        e.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;Di2015NewLine        e.Graphics.SmoothingMode = SmoothingMode.HighQuality;Di2015NewLineDi2015NewLine        foreach (var cloud in _clouds)Di2015NewLine        {Di2015NewLine            e.Graphics.FillEllipse(Di2015NewLine               cloud.Brush, cloud.Center.X, cloud.Center.Y,Di2015NewLine               cloud.Diameter, cloud.Diameter);Di2015NewLine        }Di2015NewLineDi2015NewLine        base.OnPaint(e);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21045902Di2015UniqueSeparatorTimer.Interval
21045902Di2015UniqueSeparatorForm.Load
21045902Di2015UniqueSeparatorfor (int i = 0; i < 400; i += 50)Di2015NewLine    for (int j = 0; j < 400; j += 50)Di2015NewLine        cloudBox.Clouds.Add(new Ellipse(i, j));Di2015NewLine
21046051Di2015UniqueSeparatorActivationContext
21046051Di2015UniqueSeparatorActivationContext
21046051Di2015UniqueSeparatorAppDomain
21046051Di2015UniqueSeparatorAppDomain.CurrentDomain.ActivationContext
21046157Di2015UniqueSeparatortrue
21046157Di2015UniqueSeparatorif (flag) value++;Di2015NewLine
21046157Di2015UniqueSeparatorvalue = value ?? 0; // 1Di2015NewLineDi2015NewLineif (flag) // 2Di2015NewLine    value++;Di2015NewLine
21046262Di2015UniqueSeparatoraddNewMessageToPage
21046262Di2015UniqueSeparatorPost
21046262Di2015UniqueSeparatorvar hubContext = GlobalHost.ConnectionManager.GetHubContext<ChatHub>();Di2015NewLinehubContext.Clients.All.addNewMessageToPage(chat.Name, chat.Message);Di2015NewLine
21046262Di2015UniqueSeparatorvar chatHub = $.connection.chatHub;Di2015NewLineDi2015NewLinechatHub.client.addNewMessageToPage= function (name, message) {Di2015NewLine    //Add name and message to the page hereDi2015NewLine};Di2015NewLine$.connection.hub.start();Di2015NewLine
21046328Di2015UniqueSeparatorvar filter = Expression.Call(mex, Di2015NewLine    typeof(string).GetMethod("Contains"), Di2015NewLine    constForeignKeyID);Di2015NewLine
21046328Di2015UniqueSeparatorx => x.Prop.Contains(searchString)Di2015NewLine
21046348Di2015UniqueSeparatorint
21046348Di2015UniqueSeparatorint?
21046348Di2015UniqueSeparatornullable<int>
21046348Di2015UniqueSeparator.HasValue
21046348Di2015UniqueSeparator.Value
21046353Di2015UniqueSeparator Label_connectiontest.Text = conn.State.ToString();Di2015NewLine
21046438Di2015UniqueSeparatorDataTable
21046438Di2015UniqueSeparatorList
21046438Di2015UniqueSeparatorpublic class DataItemDi2015NewLine{Di2015NewLine    public double Values {get; set;}Di2015NewLine    public double MaxValue {get; set;}Di2015NewLine}Di2015NewLine
21046438Di2015UniqueSeparatorDataItem
21046438Di2015UniqueSeparatorfor (int i = 0; i < rows;i++)Di2015NewLine{Di2015NewLine    DataItem item = new DataItem();Di2015NewLine    item.Value = startValue += offset;Di2015NewLine    item.MaxValue = MaxValue(item.Value);Di2015NewLineDi2015NewLine    valuesList.Add(item);Di2015NewLine}Di2015NewLine
21046438Di2015UniqueSeparatorDataGrid
21046438Di2015UniqueSeparatorvaluesGrid.ItemsSource = valuesList;Di2015NewLine
21046478Di2015UniqueSeparatorprivate void WriteStringOnImage()Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            byte[] imgData = getData(@"E:\\0000.tif");Di2015NewLine            using (System.Drawing.Image img = System.Drawing.Image.FromStream(new MemoryStream(imgData)))Di2015NewLine            {Di2015NewLine                for (int i = 1; i <= 1000; i++)Di2015NewLine                {Di2015NewLine                    Bitmap img1 = new Bitmap(new Bitmap(img));Di2015NewLine                    RectangleF rectf = new RectangleF(800, 550, 200, 200);Di2015NewLine                    Graphics g = Graphics.FromImage(img1);Di2015NewLine                    g.DrawString(i.ToString("0000"), new Font("Thaoma", 30), Brushes.Black, rectf);Di2015NewLine                    img1.Save(@"E:\\Img\\" + i.ToString("0000") + ".tif");Di2015NewLine                    g.Flush();Di2015NewLine                    g.Dispose();Di2015NewLine                    img1.Dispose();Di2015NewLine                    GC.Collect();Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        catch (Exception){}Di2015NewLine    }Di2015NewLine
21046478Di2015UniqueSeparatorClassA abc=new ClassA();Di2015NewLineabc=xyz;Di2015NewLine
21046478Di2015UniqueSeparatorClassA abc=xyz;Di2015NewLine
21046655Di2015UniqueSeparatorPersonRepository.Where(x => x.EmailAddressesDi2015NewLine                             .Any(a => a.Address == "myemail@host.com"))Di2015NewLine
21046688Di2015UniqueSeparatorTextures
21046688Di2015UniqueSeparatorTexture
21046688Di2015UniqueSeparatorTextureA, Path = ADi2015NewLineTextureB, Path = BDi2015NewLine
21046688Di2015UniqueSeparatorTextures[0].Path == texture.Path
21046688Di2015UniqueSeparatorTextureA, Path = ADi2015NewLineTextureB, Path = BDi2015NewLineTextureC, Path = BDi2015NewLine
21046688Di2015UniqueSeparatorTextureB.Path == TextureC.Path
21046688Di2015UniqueSeparatorTextureA, Path = A;Di2015NewLineTextureC, Path = B;Di2015NewLineTextureC, Path = BDi2015NewLine
21046890Di2015UniqueSeparatorpublic class CountryCity {Di2015NewLineDi2015NewLine  [TypeConverter(typeof(CountryConverter))]Di2015NewLine  public string Country { get; set; }Di2015NewLineDi2015NewLine  [TypeConverter(typeof(CityConverter))]Di2015NewLine  public string City { get; set; }Di2015NewLineDi2015NewLine  private static List<CountryCity> cityList = new List<CountryCity>();Di2015NewLineDi2015NewLine  static CountryCity() {Di2015NewLine    cityList.Add(new CountryCity() { Country = "Germany", City = "Berlin" });Di2015NewLine    cityList.Add(new CountryCity() { Country = "Germany", City = "Hamburg" });Di2015NewLine    cityList.Add(new CountryCity() { Country = "Germany", City = "Munich" });Di2015NewLine    cityList.Add(new CountryCity() { Country = "US", City = "Atlanta" });Di2015NewLine    cityList.Add(new CountryCity() { Country = "US", City = "Chicago" });Di2015NewLine    cityList.Add(new CountryCity() { Country = "US", City = "Los Angeles" });Di2015NewLine    cityList.Add(new CountryCity() { Country = "US", City = "New York" });Di2015NewLine  }Di2015NewLineDi2015NewLine  public class CityConverter : TypeConverter {Di2015NewLine    public override bool GetStandardValuesSupported(ITypeDescriptorContext context) {Di2015NewLine      return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) {Di2015NewLine      List<string> cities = new List<string>();Di2015NewLineDi2015NewLine      CountryCity cc = context.Instance as CountryCity;Di2015NewLine      if (cc != null) {Di2015NewLine        if (cc.Country == null) {Di2015NewLine          cities.AddRange(cityList.Select(x => x.City));Di2015NewLine        } else {Di2015NewLine          cities.AddRange(cityList.Where(x => x.Country == cc.Country)Di2015NewLine                                  .Select(y => y.City));Di2015NewLine        }Di2015NewLine      }Di2015NewLine      return new StandardValuesCollection(cities);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) {Di2015NewLine      if (sourceType == typeof(string)) {Di2015NewLine        return true;Di2015NewLine      }Di2015NewLine      return base.CanConvertFrom(context, sourceType);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) {Di2015NewLine      if (value is string) {Di2015NewLine        foreach (CountryCity cc in cityList) {Di2015NewLine          if (cc.City == (string)value) {Di2015NewLine            return cc.City;Di2015NewLine          }Di2015NewLine        }Di2015NewLine      }Di2015NewLine      return base.ConvertFrom(context, culture, value);Di2015NewLine    }Di2015NewLine  }Di2015NewLineDi2015NewLine  public class CountryConverter : TypeConverter {Di2015NewLine    public override bool GetStandardValuesSupported(ITypeDescriptorContext context) {Di2015NewLine      return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) {Di2015NewLine      List<string> items = cityList.Select(x => x.Country).Distinct().ToList();Di2015NewLine      return new StandardValuesCollection(items);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) {Di2015NewLine      if (sourceType == typeof(string)) {Di2015NewLine        return true;Di2015NewLine      }Di2015NewLine      return base.CanConvertFrom(context, sourceType);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) {Di2015NewLine      if (value is string) {Di2015NewLine        foreach (CountryCity cc in cityList) {Di2015NewLine          if (cc.Country == (string)value) {Di2015NewLine            return cc.Country;Di2015NewLine          }Di2015NewLine        }Di2015NewLine      }Di2015NewLine      return base.ConvertFrom(context, culture, value);Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
21046890Di2015UniqueSeparatorpropertyGrid1.SelectedObject = new CountryCity();Di2015NewLine
21046896Di2015UniqueSeparator  // Let's encode the keywordsDi2015NewLine  // I've chosen HashSet as being the most efficent collection to look for: O(1)Di2015NewLine  HashSet<String> SqlKeyWords = new HashSet<String>() {Di2015NewLine     "ADD", Di2015NewLine     "ALL",Di2015NewLine     "ALTER",Di2015NewLine     // I've let myself omit the entire listDi2015NewLine     // see http://technet.microsoft.com/en-us/library/ms189822.aspxDi2015NewLine     ...Di2015NewLine     "WRITETEXT"};Di2015NewLineDi2015NewLine  ...Di2015NewLineDi2015NewLine  if (SqlKeyWords.Contains(wordToTest)) {Di2015NewLine    ...  Di2015NewLine  }Di2015NewLine
21046985Di2015UniqueSeparator@Model.Sum(i => i.Qualified)Di2015NewLine
21046985Di2015UniqueSeparatorQualified
21047127Di2015UniqueSeparatorXmlNode xhousing = xDoc.SelectSingleNode(@"//house[@windowsc='three']/windows");Di2015NewLineXmlNode xName = xDoc.CreateElement("Name");Di2015NewLinexName.InnerText = "hi";Di2015NewLinexhousing.AppendChild(xName);Di2015NewLine
21047387Di2015UniqueSeparatorint z = ... ;Di2015NewLineint[,] array = new int[get1stDimensionLength(), z];Di2015NewLine// programmatically fill the arrayDi2015NewLinefor (int i = 0; i < array.GetLength(0); i++) {Di2015NewLine    for (int j = 0; j < array.GetLength(1); j++) {Di2015NewLine        array[i,j] = 18;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21047433Di2015UniqueSeparator^(http|https):\\/\\/[\\w\\d]+\\.[\\w]+(\\/[\\w\\d]+)$Di2015NewLine
21047433Di2015UniqueSeparator(http|https):\\/\\/Di2015NewLine
21047433Di2015UniqueSeparatorhttp
21047433Di2015UniqueSeparatorhttps
21047433Di2015UniqueSeparator://
21047433Di2015UniqueSeparator[\\w\\d]+Di2015NewLine
21047433Di2015UniqueSeparator\\.[\\w]+Di2015NewLine
21047433Di2015UniqueSeparatordot
21047433Di2015UniqueSeparator.com
21047433Di2015UniqueSeparator.net
21047433Di2015UniqueSeparator\\.[\\d\\w]+
21047433Di2015UniqueSeparator(\\/[\\w\\d]+)Di2015NewLine
21047433Di2015UniqueSeparator/
21047433Di2015UniqueSeparator/questions
21047534Di2015UniqueSeparatormyWorker.RunWorkerAsync(rtb.Text);Di2015NewLine
21047534Di2015UniqueSeparatorDoWork
21047534Di2015UniqueSeparatorvar myRtbText = e.Argument.ToString();Di2015NewLine
21047534Di2015UniqueSeparatorProgressChanged
21047534Di2015UniqueSeparatorRichTextBox
21047534Di2015UniqueSeparatorDoWork
21047534Di2015UniqueSeparatorText
21047534Di2015UniqueSeparatorLines
21047534Di2015UniqueSeparatorLines
21047534Di2015UniqueSeparatorEnvironment.NewLine
21047534Di2015UniqueSeparatorvar allLinesDi2015NewLine    = myRtbText.Split(new[] {Environment.NewLine}, StringSplitOptions.None);Di2015NewLine
21047552Di2015UniqueSeparator~/Views/Shared/DisplayTemplates/YourTemplate.cshtml
21047552Di2015UniqueSeparator@model IEnumerable<YourModelType>Di2015NewLineDi2015NewLine<table>Di2015NewLine    <tr>Di2015NewLine        <th>Property 1</th>Di2015NewLine        <th>Property 2</th>Di2015NewLine    </tr>Di2015NewLine    // e.g. print data rows in a loop Di2015NewLine</table>Di2015NewLine
21047552Di2015UniqueSeparatorHtml.EditorFor
21047565Di2015UniqueSeparatorDateTime.Parse
21047565Di2015UniqueSeparatorDateTimeStyles.NoCurrentDateDefault
21047565Di2015UniqueSeparatorCultureInfo culture = CultureInfo.InvariantCulture;Di2015NewLineDi2015NewLinevar dt1 = DateTime.Parse("10:00:00", culture, DateTimeStyles.NoCurrentDateDefault);Di2015NewLinevar dt2 = DateTime.Parse("10pm", culture, DateTimeStyles.NoCurrentDateDefault);Di2015NewLinevar dt3 = DateTime.Parse("01/02/2014", culture, DateTimeStyles.NoCurrentDateDefault);Di2015NewLinevar dt4 = DateTime.Parse("01/02/2014 10:00:00", culture, DateTimeStyles.NoCurrentDateDefault);Di2015NewLine// problem, is this a date only or a date+time?Di2015NewLinevar dt5 = DateTime.Parse("01/02/2014 00:00:00", culture, DateTimeStyles.NoCurrentDateDefault);Di2015NewLine
21047565Di2015UniqueSeparatorbool dt1TimeOnly, dt1DateOnly, dt1DateAndTime;Di2015NewLinedt1TimeOnly = dt1.Year == 1;Di2015NewLinedt1DateOnly = !dt1TimeOnly && dt1.TimeOfDay == TimeSpan.FromHours(0);Di2015NewLinedt1DateAndTime = !dt1TimeOnly && !dt1DateOnly;Di2015NewLine
21047565Di2015UniqueSeparatorDateTime.TryParseExact
21047565Di2015UniqueSeparatorpublic enum DateTimeTypeDi2015NewLine{ Di2015NewLine    Date,Di2015NewLine    Time,Di2015NewLine    DateTime,Di2015NewLine    UnknownDi2015NewLine}Di2015NewLine
21047565Di2015UniqueSeparatorpublic DateTimeType GetDateTimeType(string input, CultureInfo culture, out DateTime parsedDate)Di2015NewLine{ Di2015NewLine   if(culture == null) culture = CultureInfo.CurrentCulture;Di2015NewLine   var supportedFormats = new[] { Di2015NewLine        new{ Pattern = culture.DateTimeFormat.ShortDatePattern, Type = DateTimeType.Date },Di2015NewLine        new{ Pattern = culture.DateTimeFormat.ShortTimePattern, Type = DateTimeType.Time },Di2015NewLine        new{ Pattern = culture.DateTimeFormat.LongDatePattern, Type  = DateTimeType.Date },Di2015NewLine        new{ Pattern = culture.DateTimeFormat.LongTimePattern, Type  = DateTimeType.Time },Di2015NewLine        new{ Pattern = "hhtt", Type = DateTimeType.Time},Di2015NewLine        new{ Di2015NewLine            Pattern = culture.DateTimeFormat.ShortDatePattern + " " + culture.DateTimeFormat.LongTimePattern, Di2015NewLine            Type = DateTimeType.DateTimeDi2015NewLine        }Di2015NewLine    };Di2015NewLineDi2015NewLine    foreach(var fi in supportedFormats)Di2015NewLine    {Di2015NewLine        DateTime dt;Di2015NewLine        if (DateTime.TryParseExact(input, fi.Pattern, culture, DateTimeStyles.NoCurrentDateDefault, out dt))Di2015NewLine        {Di2015NewLine            parsedDate = dt;Di2015NewLine            return fi.Type;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    parsedDate = default(DateTime);Di2015NewLine    return DateTimeType.Unknown;Di2015NewLine}Di2015NewLine
21047565Di2015UniqueSeparatorDateTimeTypes
21047565Di2015UniqueSeparatorDateTime dt1;Di2015NewLineDateTimeType type1 = GetDateTimeType("10:00:00", culture, out dt1);Di2015NewLineDateTime dt2;Di2015NewLineDateTimeType type2 = GetDateTimeType("10pm", culture, out dt2);Di2015NewLineDateTime dt3;Di2015NewLineDateTimeType type3 = GetDateTimeType("01/02/2014", culture, out dt3);Di2015NewLineDateTime dt4;Di2015NewLineDateTimeType type4 = GetDateTimeType("01/02/2014 10:00:00", culture, out dt4);Di2015NewLineDateTime dt5;Di2015NewLineDateTimeType type5 = GetDateTimeType("01/02/2014 00:00:00", culture, out dt5);Di2015NewLine
21047590Di2015UniqueSeparator@model MvcMusicStore.ViewModels.StoreIndexViewModelDi2015NewLine
21047590Di2015UniqueSeparator<p>Select from @Model.NumberOfGenres</p>Di2015NewLine
21047653Di2015UniqueSeparatorfunction SetMouseDown(element) {Di2015NewLine    var r = confirm('Are you sure?');Di2015NewLine    var url = window.location.pathname;Di2015NewLine    var pathArray = url.split('/');Di2015NewLine    var host = pathArray[1];Di2015NewLine    var newHost = '/About.aspx';Di2015NewLineDi2015NewLine    if (r == true) {Di2015NewLine        //window.location = host + newHost;Di2015NewLineDi2015NewLine        window.open(host + newHost,'name','width=200,height=200');Di2015NewLine    }Di2015NewLine    else {Di2015NewLine        alert('it didnt work');Di2015NewLine    }Di2015NewLine    return false;Di2015NewLine}Di2015NewLine
21047837Di2015UniqueSeparatorprivate void randomPaint(int numberOfTimes)Di2015NewLine{Di2015NewLine    Random r = new Random();Di2015NewLine    Color rC;Di2015NewLine    SolidBrush b1;Di2015NewLineDi2015NewLine    Graphics g = pnlDraw.CreateGraphics();Di2015NewLineDi2015NewLine    for (int i = 0; i < numberOfTimes; i++)Di2015NewLine    {Di2015NewLine        rC = Color.FromArgb(r.Next(255), r.Next(255), r.Next(255));Di2015NewLine        b1 = new SolidBrush(rC);Di2015NewLine        g.FillEllipse(b1, r.Next(pnlDraw.Size.Width), r.Next(pnlDraw.Size.Height), 30, 30);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21047837Di2015UniqueSeparatorprivate void cmbDots_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        randomPaint(Convert.ToInt32(cmbDots.SelectedItem));Di2015NewLine    }Di2015NewLine    catch (Exception err)Di2015NewLine    {Di2015NewLine        Console.WriteLine(err.Message);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21047939Di2015UniqueSeparatorMessage
21047939Di2015UniqueSeparatorTimeToBeReceived
21047989Di2015UniqueSeparator"Some  Words"//notice the double spaceDi2015NewLine
21047989Di2015UniqueSeparatorSplit()
21047989Di2015UniqueSeparatorStringSplitOptions.RemoveEmptyEntries
21047989Di2015UniqueSeparatornew char[0]
21047989Di2015UniqueSeparatorStringSplitOptions
21047989Di2015UniqueSeparatornull
21047989Di2015UniqueSeparatornull
21047989Di2015UniqueSeparatorchar[]
21047989Di2015UniqueSeparatorstring[]
21047989Di2015UniqueSeparator(char[])null
21047989Di2015UniqueSeparatornull as char[]
21048041Di2015UniqueSeparatorBigInteger
21048041Di2015UniqueSeparatorBigInteger
21048041Di2015UniqueSeparatoruint[]
21048041Di2015UniqueSeparatoruint
21048041Di2015UniqueSeparatorBigInteger
21048041Di2015UniqueSeparator<gcAllowVeryLargeObjects>
21048041Di2015UniqueSeparatoruint
21048041Di2015UniqueSeparatorvar bi = BigInteger.Pow(1 << 30, 1 << 30);Di2015NewLine
21048041Di2015UniqueSeparatorOutOfMemoryException: Array dimensions exceeded supported range.Di2015NewLine
21048041Di2015UniqueSeparatorvar s = new uint[1 << 30];Di2015NewLine
21048154Di2015UniqueSeparator<asp:requiredfieldvalidator ID="RequiredfieldvalidatorAddress" runat="server" ValidationGroup="Group" Display="Dynamic" SetFocusOnError="true" ControlToValidate="Address" Text="Please Enter Your Address" InitialValue="Enter Address"/>Di2015NewLine
21048164Di2015UniqueSeparator<ItemStyle CssClass="TableItemStyle" />Di2015NewLine     <AlternatingItemStyle CssClass="TableAlternatingItemStyle" />Di2015NewLine
21048164Di2015UniqueSeparatorOnItemDataBound
21048164Di2015UniqueSeparator <asp:DataGrid ID="dgErrors"Di2015NewLineCssClass="cssErrors"Di2015NewLineCaption="Errors"  Di2015NewLineAutoGenerateColumns="false"Di2015NewLineCellPadding="3"Di2015NewLinerunat="server" Di2015NewLineOnItemDataBound = "dgErrors_ItemBound">Di2015NewLine
21048164Di2015UniqueSeparatorprotected void dgErrors_ItemBound(Object sender, DataGridItemEventArgs e)Di2015NewLine    {Di2015NewLine            if (e.Item.ItemType == ListItemType.Item)Di2015NewLine            {Di2015NewLine                e.Item.Cells[0].CssClass = "TableItemStyleRowNo";Di2015NewLine            }Di2015NewLine            else if(e.Item.ItemType == ListItemType.AlternatingItem)Di2015NewLine            {Di2015NewLine                e.Item.Cells[0].CssClass = "AlternateTableItemStyleRowNo";Di2015NewLine            }Di2015NewLine    }Di2015NewLine
21048210Di2015UniqueSeparatorcb b2 b7 19 d1 29 40 51 b6 94 42 04 a6 f6 be 93Di2015NewLine
21048210Di2015UniqueSeparator19 b7 b2 cb 29 d1 51 40 b6 94 42 04 a6 f6 be 93Di2015NewLine
21048234Di2015UniqueSeparatorSELECT      p.*, c.*Di2015NewLineFROM        Parents            pDi2015NewLineLEFT JOIN   ParentsChildren    pc    ON    pc.parent_Id    = p.parentIdDi2015NewLineLEFT JOIN   Children           c     ON    c.childId       = pc.childIdDi2015NewLine
21048303Di2015UniqueSeparatorBorder.BorderBrush
21048303Di2015UniqueSeparatorLauncherButton
21048303Di2015UniqueSeparatorNormalBorderBrush
21048303Di2015UniqueSeparatorMouseOverBorderBrush
21048303Di2015UniqueSeparatorButton
21048303Di2015UniqueSeparatorBorder
21048303Di2015UniqueSeparatorSteelBlue
21048303Di2015UniqueSeparatorPaleGoldenRod
21048303Di2015UniqueSeparatorRelativeSource FindAncestor
21048303Di2015UniqueSeparatorAncestorType
21048303Di2015UniqueSeparatorlocal:LauncherButton
21048303Di2015UniqueSeparatorNormalBorderBrush
21048303Di2015UniqueSeparatorMouseOverBorderBrush
21048303Di2015UniqueSeparatorpublic class LauncherButton : ButtonBase {Di2015NewLine  ...Di2015NewLineDi2015NewLine  public static readonly DependencyProperty NormalBorderBrushProperty =Di2015NewLine    DependencyProperty.Register("NormalBorderBrush", typeof(Brush), typeof(LauncherButton),Di2015NewLine      new UIPropertyMetadata(Brushes.Blue));Di2015NewLineDi2015NewLine  public static readonly DependencyProperty MouseOverBorderBrushProperty =Di2015NewLine    DependencyProperty.Register("MouseOverBorderBrush", typeof(Brush), typeof(LauncherButton),Di2015NewLine      new UIPropertyMetadata(Brushes.Red));Di2015NewLineDi2015NewLine  public Brush NormalBorderBrushDi2015NewLine  {Di2015NewLine    get { return (Brush)GetValue(NormalBorderBrushProperty); }Di2015NewLine    set { SetValue(NormalBorderBrushProperty, value); }Di2015NewLine  }Di2015NewLineDi2015NewLine  public Brush MouseOverBorderBrushDi2015NewLine  {Di2015NewLine    get { return (Brush)GetValue(MouseOverBorderBrushProperty); }Di2015NewLine    set { SetValue(MouseOverBorderBrushProperty, value); }Di2015NewLine  }Di2015NewLine}Di2015NewLine
21048303Di2015UniqueSeparator<Border.Style>Di2015NewLine  <Style TargetType="{x:Type Border}">Di2015NewLine    <Setter Property="BorderBrush"Di2015NewLine            Value="{Binding RelativeSource={RelativeSource FindAncestor,Di2015NewLine                                                            AncestorType={x:Type local:LauncherButton}},Di2015NewLine                            Path=NormalBorderBrush}" />Di2015NewLine    <Style.Triggers>Di2015NewLine      <Trigger Property="IsMouseOver"Di2015NewLine                Value="True">Di2015NewLine        <Setter Property="BorderBrush"Di2015NewLine                Value="{Binding RelativeSource={RelativeSource FindAncestor,Di2015NewLine                                                                AncestorType={x:Type local:LauncherButton}},Di2015NewLine                                Path=MouseOverBorderBrush}" />Di2015NewLine      </Trigger>Di2015NewLine    </Style.Triggers>Di2015NewLine  </Style>Di2015NewLine</Border.Style>Di2015NewLine
21048303Di2015UniqueSeparator<local:LauncherButton BThickness="5"Di2015NewLine                      Content="Hellooooo"Di2015NewLine                      MouseOverBorderBrush="Green"Di2015NewLine                      NormalBorderBrush="Aqua" />Di2015NewLine
21048303Di2015UniqueSeparatorBorderBrush
21048303Di2015UniqueSeparatorTemplateBinding BorderBrush
21048303Di2015UniqueSeparatorBorderBrush
21048303Di2015UniqueSeparatorIsMouseOver
21048303Di2015UniqueSeparatorStyle
21048303Di2015UniqueSeparatorBorder
21048347Di2015UniqueSeparatorToLookup
21048347Di2015UniqueSeparatorvar ordered = cs.ToLookup(c => c).OrderByDescending(c => c.Count()).First().Key;Di2015NewLine
21048347Di2015UniqueSeparatorpublic static Color Mode(this IEnumerable<Color> colors)Di2015NewLine{Di2015NewLine     return colors.ToLookup(c => c).OrderByDescending(c => c.Count()).First().Key;Di2015NewLine}Di2015NewLine
21048469Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Threading.Tasks;Di2015NewLineDi2015NewLinenamespace BoardDi2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        { Di2015NewLine            // Create the boardDi2015NewLine            Board b = new Board();Di2015NewLine            // Print the mazeDi2015NewLine            Console.Write(b.ToString());Di2015NewLine            Console.ReadKey();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    class BoardDi2015NewLine    {Di2015NewLine        private BoardItem[,] items = new BoardItem[10, 10];Di2015NewLineDi2015NewLine        // Board contructor - populate the multidimensional array - do you own login here to populate the cells.Di2015NewLine        public Board()Di2015NewLine        {Di2015NewLine            for (int i = 0; i < 10; i++)Di2015NewLine            {Di2015NewLine                for (int j = 0; j < 10; j++)Di2015NewLine                {                        Di2015NewLine                    items[i, j] = new BoardItem();Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        // Print each cell from the MineSweeperDi2015NewLine        public override string ToString()Di2015NewLine        {Di2015NewLine            string ret = "";Di2015NewLine            for (int i = 0; i < 10; i++)Di2015NewLine            {Di2015NewLine                for (int j = 0; j < 10; j++)Di2015NewLine                {Di2015NewLine                    ret += items[i, j].ToString();Di2015NewLine                }Di2015NewLine                ret += Environment.NewLine;Di2015NewLine            }Di2015NewLineDi2015NewLine            return ret;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    class BoardItemDi2015NewLine    {Di2015NewLine        char BoardItemCharToPriint = '-';Di2015NewLineDi2015NewLine        // Print the current cellDi2015NewLine        public override string ToString()Di2015NewLine        {Di2015NewLine            return BoardItemCharToPriint.ToString();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21048581Di2015UniqueSeparatorPackerHandlerBase
21048581Di2015UniqueSeparatorInfoPacket
21048581Di2015UniqueSeparatorUsagePacket
21048581Di2015UniqueSeparatorPacketHandler1011
21048581Di2015UniqueSeparatorPacketHandler1014
21048581Di2015UniqueSeparatorInfoPacket1011
21048581Di2015UniqueSeparatorInfoPacket1014
21048581Di2015UniqueSeparatorpublic abstract class PacketHandlerBase : EngineDi2015NewLine{Di2015NewLine    public abstract bool SendInfoPacket(int someInt, string someInput);Di2015NewLine    public abstract List<InfoPacket> BuildInfoPacket(string someInput);Di2015NewLineDi2015NewLine    public abstract bool SendUsagePacket(int someInt, string someInput);Di2015NewLine    public abstract List<UsagePacker> BuildUsagePacket(string someInput);Di2015NewLine    //...Di2015NewLine}Di2015NewLineDi2015NewLinepublic class InfoPacket1014 : InfoPacketDi2015NewLine{ Di2015NewLine    ///...Di2015NewLine}Di2015NewLineDi2015NewLinepublic class PacketHandler1011 : PackerHandlerBaseDi2015NewLine{Di2015NewLine    //...Di2015NewLine    public override List<InfoPacket> BuildInfoPacket(string someInput);Di2015NewLine    {Di2015NewLine        // code implementationDi2015NewLine        return new List<InfoPacket> { new InfoPacket1011(), ... };Di2015NewLine    }Di2015NewLine}Di2015NewLine
21048753Di2015UniqueSeparatorList<Test1> test1 = new List<Test1>();Di2015NewLineABC abc = (ABC)test1;Di2015NewLine
21048753Di2015UniqueSeparatorList<Test1> test1 = new ABC();Di2015NewLineABC abc = (ABC)test1;Di2015NewLine
21048753Di2015UniqueSeparatorpublic class ABC : List<Test1>Di2015NewLine{Di2015NewLine   public ABC(IEnumerable<Test1> enumerable)Di2015NewLine   {Di2015NewLine      if (enumerable != null)Di2015NewLine         this.AddRange(enumerable);Di2015NewLine   }Di2015NewLine}Di2015NewLine
21048753Di2015UniqueSeparatorreturn new ABC(result.OrderBy(i=>i.s).ThenBy(j=>j.a));Di2015NewLine
21048963Di2015UniqueSeparatorpublic static IEnumerable<Control> GetAncestors (Control control)Di2015NewLine{Di2015NewLine    var current = control.Parent;Di2015NewLine    while (current != null)Di2015NewLine    {Di2015NewLine        yield return current;Di2015NewLine        current = current.Parent;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21048963Di2015UniqueSeparatorElementAt
21048963Di2015UniqueSeparatorvar grandparent = someControl.ElementAt(2);Di2015NewLine
21049093Di2015UniqueSeparatorColor
21049093Di2015UniqueSeparatorBrush
21049093Di2015UniqueSeparatorSolidColorBrush
21049093Di2015UniqueSeparator<Button Content="Text">Di2015NewLine    <Button.Background>Di2015NewLine        <SolidColorBrush Color="{Binding Source={x:Static s:MySettings.BackgroundColor}}"/>Di2015NewLine    </Button.Background>Di2015NewLine    <Button.Foreground>Di2015NewLine        <SolidColorBrush Color="{Binding Source={x:Static s:MySettings.FontColor}}"/>Di2015NewLine    </Button.Foreground>Di2015NewLine    <Button.BorderBrush>Di2015NewLine        <SolidColorBrush Color="{Binding Source={x:Static s:MySettings.FontColor}}"/>Di2015NewLine    </Button.BorderBrush>Di2015NewLine</Button>Di2015NewLine
21049130Di2015UniqueSeparatorApplication.Run
21049130Di2015UniqueSeparatorMain
21049130Di2015UniqueSeparatorpublic static void Main()Di2015NewLine{Di2015NewLine    Application.EnableVisualStyles();Di2015NewLine    Application.SetCompatibleTextRenderingDefault(false);Di2015NewLineDi2015NewLine    //Show splash form (which checks for updates)Di2015NewLine    FormSplash splash = new FormSplash();Di2015NewLine    splash.ShowDialog();//will wait until splash closedDi2015NewLineDi2015NewLine    //check if first run and show if neededDi2015NewLine    if(IsFirstRun())Di2015NewLine    {Di2015NewLine        FormWizard wizard = new FormWizard();Di2015NewLine        wizard.ShowDialog();//will wait until wizard is closedDi2015NewLine    }Di2015NewLineDi2015NewLine    //Finally, run your application as normalDi2015NewLine    Application.Run(new frm_Main());Di2015NewLine}Di2015NewLine
21049130Di2015UniqueSeparatorApplication.Run
21049144Di2015UniqueSeparator[HttpGet]Di2015NewLinepublic bool GetUserMessageHistory(string userId, int messageId)Di2015NewLine{Di2015NewLine    var userMessageHistory = (from i in db.UserMessageHistoriesDi2015NewLine                              where i.UserId == userId &&Di2015NewLine                              i.MessageId == messageIdDi2015NewLine                              select newDi2015NewLine                              {Di2015NewLine                                  UserId = i.UserId,Di2015NewLine                                  MessageId = i.MessageId,Di2015NewLine                                  LastSeen = i.LastSeen,Di2015NewLine                              }).ToList();Di2015NewLineDi2015NewLineDi2015NewLine    return userMessageHistory.any();Di2015NewLine}Di2015NewLine
21049195Di2015UniqueSeparatorbreak
21049195Di2015UniqueSeparatorwhile
21049195Di2015UniqueSeparatorbool continueLoop;Di2015NewLinedoDi2015NewLine{Di2015NewLine  Console.Write(">$");Di2015NewLine  continueLoop = ProcessCommand(Console.ReadLine());Di2015NewLine} while (!continueLoop);Di2015NewLineDi2015NewLinepublic static bool ProcessCommand(string command)Di2015NewLine{Di2015NewLine    return command != "exit";Di2015NewLine}Di2015NewLine
21049398Di2015UniqueSeparatorrunat=server
21049398Di2015UniqueSeparator<asp:TableCell runat="server" ID="Cell1"></asp:TableCell>Di2015NewLine
21049398Di2015UniqueSeparatorCell1.Text = "New Value"; Di2015NewLine
21049398Di2015UniqueSeparatorRows
21049398Di2015UniqueSeparatorCells
21049398Di2015UniqueSeparatorTable1.Rows[0].Cells[0].Text = "New Value";Di2015NewLine
21049447Di2015UniqueSeparatorcontains
21049447Di2015UniqueSeparatororelse
21049447Di2015UniqueSeparatorin
21049447Di2015UniqueSeparator        var SourceEnumList = new List<string>();Di2015NewLine        if (checkBox_WebPortal.Checked)Di2015NewLine        {Di2015NewLine            SourceEnumList.Add("WebPortal");Di2015NewLine        }Di2015NewLineDi2015NewLine        if (checkBox_SubService.Checked)Di2015NewLine        {Di2015NewLine            SourceEnumList.Add("SubService");Di2015NewLine        }Di2015NewLineDi2015NewLine        if (checkBox_TruckRouting.Checked)Di2015NewLine        {Di2015NewLine            SourceEnumList.Add("TruckRouting");Di2015NewLine        }Di2015NewLineDi2015NewLine        if (checkBox_SuburbanHub.Checked)Di2015NewLine        {Di2015NewLine            SourceEnumList.Add("SuburbanHub");Di2015NewLineDi2015NewLine        }Di2015NewLine        if (SourceEnumList.Any())Di2015NewLine        {Di2015NewLine            qry = qry.Where(x => SourceEnumList.Contains(x.SourceEnum) );Di2015NewLine        }Di2015NewLine
21049524Di2015UniqueSeparator\\storage\\summary\\summaryfile2.txt
21049524Di2015UniqueSeparatorhref
21049524Di2015UniqueSeparatorhttp
21049524Di2015UniqueSeparatorftp
21049524Di2015UniqueSeparatorhttp
21049524Di2015UniqueSeparatorlocalhost
21049524Di2015UniqueSeparator"   <strong><a class='tp-backlog-desc-group' href=file://{{FilePath}}>{{Name}}</a></strong>",Di2015NewLine
21049524Di2015UniqueSeparatorpath = Server.MapPath("~" + path);Di2015NewLine
21049524Di2015UniqueSeparatorhttp://yoursite/storage/summary/summaryfile2.txt
21049529Di2015UniqueSeparatorKey
21049529Di2015UniqueSeparatorDbUserMatchCriteria
21049680Di2015UniqueSeparatorBinaryWriter
21049680Di2015UniqueSeparatorStreamWriter
21049716Di2015UniqueSeparatorSELECT   productID, SUM(Quantity) AS QuantityDi2015NewLineFROM     myTableDi2015NewLineGROUP BY productIDDi2015NewLine
21049848Di2015UniqueSeparatorprivate void btnColour_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    ColorDialog clrDialog = new ColorDialog();Di2015NewLineDi2015NewLine    //show the colour dialog and check that user clicked okDi2015NewLine    if (clrDialog.ShowDialog() == DialogResult.OK)Di2015NewLine    {Di2015NewLine        //save the colour that the user choseDi2015NewLine        c = clrDialog.Color;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineColor c = Color.Black;Di2015NewLine
21049877Di2015UniqueSeparatorPictureBox
21049877Di2015UniqueSeparatorvoid SetVisible(PictureBox[] pictures, int index, bool visible) {Di2015NewLine    for (int i=index; i < pictures.Length; ++i)Di2015NewLine        pictures[i].Visible = visible;Di2015NewLine}Di2015NewLine
21049877Di2015UniqueSeparatorvoid SetVisible(PictureBox[] pictures, PictureBox item, bool visible) {Di2015NewLine    SetVisible(pictures, Array.IndexOf(item), visible);Di2015NewLine}Di2015NewLine
21049877Di2015UniqueSeparatorint FindFirstVisibleAncestorIndex(PictureBox[] pictures, int index) {Di2015NewLine    for (int i=index; i >= 0; i--) {Di2015NewLine        if (pictures[i].Visible)Di2015NewLine            return i;Di2015NewLine    }Di2015NewLineDi2015NewLine    return -1;Di2015NewLine}Di2015NewLine
21050149Di2015UniqueSeparatorpublic static class ExtensionsDi2015NewLine{Di2015NewLine    public static bool IsNull(this DataSet dataSet, int rowNumber, string columnName)Di2015NewLine    {Di2015NewLine        return dataSet.Tables[0].Rows[rowNumber].IsNull(columnName);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21050149Di2015UniqueSeparatordataSet1.IsNull(0, "column");Di2015NewLine
21050149Di2015UniqueSeparatorstring errorMsg
21050149Di2015UniqueSeparatorpublic static bool IsNull(this DataSet dataSet, int rowNumber, string columnName, string errorMsg)Di2015NewLine{Di2015NewLine    if(dataSet.Tables[0].Rows[rowNumber].IsNull(columnName))Di2015NewLine    {Di2015NewLine        // print an error message using Console or MessageBox, or whatever you useDi2015NewLine        return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    return false;Di2015NewLine}Di2015NewLine
21050149Di2015UniqueSeparatordataSet1.IsNull(0, "column", "error");Di2015NewLine
21050228Di2015UniqueSeparatorcontent-disposition
21050228Di2015UniqueSeparatorPDFResult
21050228Di2015UniqueSeparatorpublic PdfResult Pdf()Di2015NewLine{Di2015NewLine  Response.AddHeader("content-disposition", "attachment; filename=YourSanitazedFileName.pdf");Di2015NewLineDi2015NewLine  // With no Model and default view name.  Pdf is always the default view nameDi2015NewLine  return new PdfResult();Di2015NewLine}Di2015NewLine
21050330Di2015UniqueSeparator<asp:DataGrid ID="dgMyGrid" DataSourceID="dsMySource" runat="server">Di2015NewLine    <Columns>Di2015NewLine        <asp:BoundField DataField="MyColumn" HeaderText=" My Column">Di2015NewLineDi2015NewLine        </TemplateField>Di2015NewLine    </Columns>Di2015NewLine</DataGrid>Di2015NewLineDi2015NewLine<asp:SqlDataSource ID="dsMySource" runat="server"  ConnectionString="<%$ Your Connectionstring %>"Di2015NewLine        SelectCommand="SELECT * FROM YourTable" Di2015NewLine</asp:SqlDataSource>Di2015NewLine
21050330Di2015UniqueSeparatorMyGrid.DataSource = YourDataTable;Di2015NewLineMyGrid.DataBind();Di2015NewLine
21050465Di2015UniqueSeparatorusing
21050465Di2015UniqueSeparatorusing NodaTime.Serialization.JsonNet;Di2015NewLine
21050465Di2015UniqueSeparatorJsonSerializer serializer = new JsonSerializer();Di2015NewLineserializer.ConfigureForNodaTime(DateTimeZoneProviders.Tzdb);Di2015NewLine
21050465Di2015UniqueSeparatorLocalDateTime
21050465Di2015UniqueSeparatorJObject
21050465Di2015UniqueSeparatorToObject<LocalDateTime>(serializer)
21050465Di2015UniqueSeparatorusing (var sr = new StreamReader(stream))Di2015NewLine{Di2015NewLine    using (var jr = new JsonTextReader(sr))Di2015NewLine    {Di2015NewLine        root = serializer.Deserialize<JObject>(jr);Di2015NewLineDi2015NewLine        // Deserialize other elementsDi2015NewLineDi2015NewLine        var time = root.GetValue("time");Di2015NewLine        var parsedTime = time.ToObject<LocalDateTime>(serializer);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21050554Di2015UniqueSeparatorZip
21050554Di2015UniqueSeparatorDistinct
21050554Di2015UniqueSeparatorvar result = accounts.Zip(projects, (a, p) => a + "-" + p)Di2015NewLine                     .Zip(subprojects, (a, s) => a + "-" + s)Di2015NewLine                     .Distinct()Di2015NewLine                     .ToList();Di2015NewLine
21050554Di2015UniqueSeparatorpublic static partial class EnumerableExtensionsDi2015NewLine{Di2015NewLine    public static IEnumerable<TResult> Zip<TSource, TResult>(Di2015NewLine        this IEnumerable<IEnumerable<TSource>> sequences,Di2015NewLine        Func<IEnumerable<TSource>, TResult> resultSelector)Di2015NewLine    {Di2015NewLine        var enumerators = sequences.Select(sequence => sequence.GetEnumerator()).ToArray();Di2015NewLine        while (enumerators.All(enumerator => enumerator.MoveNext()))Di2015NewLine            yield return resultSelector(enumerators.Select(enumerator => enumerator.Current));Di2015NewLine    }Di2015NewLine}Di2015NewLine
21050554Di2015UniqueSeparatorstring[][] sequences = { accounts, projects, subprojects };Di2015NewLinevar results = sequences.Zip(items => string.Join("-", items))Di2015NewLine                        .Distinct()Di2015NewLine                        .ToList();Di2015NewLine
21050743Di2015UniqueSeparatorText
21050743Di2015UniqueSeparatorText
21050743Di2015UniqueSeparatorTextBox
21050743Di2015UniqueSeparator    finalTextBox.Text = textBox1.Text + textBox2.Text + textBox3.Text ;Di2015NewLine                //andDi2015NewLine    finalLabel.Text = textBox1.Text + textBox2.Text + textBox3.Text ;Di2015NewLine    // logic for storing in a database.   Di2015NewLine    // finalTextBox is the final TextBox in which you want to store the contents of other textboxes.Di2015NewLine    // textBox1,2 and 3 are the three textboxes.Di2015NewLine
21050780Di2015UniqueSeparatorStyle
21050780Di2015UniqueSeparatorIsEnabled
21050780Di2015UniqueSeparatorRadioButton
21050780Di2015UniqueSeparatorComboBox
21050780Di2015UniqueSeparator<RadioButton x:Name="radioButton1" Grid.Row="1" Grid.Column="0" >Di2015NewLine    <TextBlock  HorizontalAlignment="Right" Text="Option 1 (Optional):" VerticalAlignment="Top"/>Di2015NewLine</RadioButton>Di2015NewLine<ComboBox Grid.Row="1" Grid.Column="2" VerticalAlignment="Top" Name="cboOption1" ItemsSource="{Binding ComboItems}">Di2015NewLine    <ComboBox.Style>Di2015NewLine        <Style TargetType="ComboBox">Di2015NewLine            <Setter Property="SelectedItem" Value="{Binding SelectedOption1, UpdateSourceTrigger=PropertyChanged}" />Di2015NewLine            <Style.Triggers>Di2015NewLine                <DataTrigger Binding="{Binding Path=IsChecked,ElementName=radioButton1}" Value="False">Di2015NewLine                    <Setter Property="IsEnabled" Value="False"/>Di2015NewLine                    <Setter Property="SelectedItem" Value="{x:Null}" />Di2015NewLine                </DataTrigger>Di2015NewLine            </Style.Triggers>Di2015NewLine        </Style>Di2015NewLine    </ComboBox.Style>Di2015NewLine</ComboBox>Di2015NewLine
21050780Di2015UniqueSeparatorStyle
21050780Di2015UniqueSeparatorradioButton1
21050818Di2015UniqueSeparatorvar attribute =Di2015NewLine   xDocument.Root.Elements()Di2015NewLine                 .Single(element => element.Attribute("key").Value == "RelativePath")Di2015NewLine                 .Attribute("value");Di2015NewLinestring oldValue = attribute.Value;   // to retrieveDi2015NewLineattribute.Value = newValue;          // to updateDi2015NewLine
21050982Di2015UniqueSeparatorvar args = Environment.GetCommandLineArgs()Di2015NewLineif(args.Length > 0) {Di2015NewLine    foreach(var s in args) {Di2015NewLine       Console.WriteLine(s);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21050989Di2015UniqueSeparatorpublic Open_Saved_Design_Form(string imagePath)Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine    _imagePath = imagePath;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Open_Saved_Design_Form_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    pbxArt.ImageLocation = _imagePath;Di2015NewLine    Label1.Text = _imagePath;Di2015NewLine}Di2015NewLine
21051380Di2015UniqueSeparator    private void serialPort1_DataReceived(object sender, System.IO.Ports.SerialDataReceivedEventArgs e)Di2015NewLine    {Di2015NewLine        //RxString = serialPort1.ReadExisting();Di2015NewLine        byte [] bytesRead = new byte[serialPort1.BytesToRead];Di2015NewLine        serialPort1.Read(bytesRead, 0, bytesRead.Length);Di2015NewLine        RxString = ByteArrayToString(bytesRead);Di2015NewLine        this.Invoke(new EventHandler(DisplayText));Di2015NewLine        //Console.WriteLine("Hex ouput: {0}", ByteArrayToString(bytesRead)); Di2015NewLine    }Di2015NewLineDi2015NewLine    private void DisplayText(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        textBox1.AppendText(RxString);Di2015NewLine    }Di2015NewLineDi2015NewLine    public string ByteArrayToString(byte[] inBytes)Di2015NewLine    {Di2015NewLine        StringBuilder hex = new StringBuilder(inBytes.Length * 2);Di2015NewLine        foreach (byte b in inBytes)Di2015NewLine            hex.AppendFormat("{0:x2}", b);Di2015NewLine        return hex.ToString();Di2015NewLine    }Di2015NewLine
21051617Di2015UniqueSeparatorif (points != null) {Di2015NewLine    var next = points.FirstOrDefault();Di2015NewLine    if (next != null && next.X != null) return next.X;Di2015NewLine}   Di2015NewLinereturn -1;Di2015NewLine
21051617Di2015UniqueSeparatorvar bestValue = points?.FirstOrDefault()?.X ?? -1;Di2015NewLine
21051617Di2015UniqueSeparator(xstring ?? "xx").ToLower();
21051676Di2015UniqueSeparatorList<string> tTextList = tText.Split(';', StringSplitOptions.RemoveEmptyEntries).ToList();Di2015NewLine
21051676Di2015UniqueSeparatorList<string> tTextList = tText.Split(new char[] { ';' }, StringSplitOptions.RemoveEmptyEntries)Di2015NewLine
21051676Di2015UniqueSeparatorstring.Split
21051745Di2015UniqueSeparator<i:InvokeCommandAction Di2015NewLine    Command="{Binding DataContext.UpdateSomeProperty, Di2015NewLine                      RelativeSource={Di2015NewLine                          RelativeSource FindAncestor, AncestorType=Window}}"/>Di2015NewLine
21051864Di2015UniqueSeparatorstring URI = "http://www.myurl.com/post.php";Di2015NewLinestring myParameters = "param1=value1&param2=value2&param3=value3";Di2015NewLineDi2015NewLineusing (WebClient wc = new WebClient())Di2015NewLine{Di2015NewLine    wc.Headers[HttpRequestHeader.ContentType] = "application/x-www-form-urlencoded";Di2015NewLine    string HtmlResult = wc.UploadString(URI, myParameters);Di2015NewLine}Di2015NewLine
21051898Di2015UniqueSeparatorpublic class MyImageWrapper Di2015NewLine{Di2015NewLine    public MyImageWrapper Parent { get; set; }Di2015NewLine    public Image Image { get; set; }Di2015NewLineDi2015NewLine    public MyImageWrapper(Image i, MyImageWrapper parent = null)Di2015NewLine    {Di2015NewLine        Parent = parent;Di2015NewLine        Image = i;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21051898Di2015UniqueSeparatorImage
21051898Di2015UniqueSeparatorMyImageWrapper
21051898Di2015UniqueSeparatorImages[1].Parent = Images[0]Di2015NewLine
21051898Di2015UniqueSeparatorpictureBox1.Image = Images[0].Image;Di2015NewLine
21051898Di2015UniqueSeparatorimages[0] = new ImageWrapper(Image.FromFile("MyImage.png"));Di2015NewLine
21052043Di2015UniqueSeparatorBuild
21052043Di2015UniqueSeparatorTarget Framework
21052109Di2015UniqueSeparator    <configuration>Di2015NewLine       <startup>Di2015NewLine           <supportedRuntime version="v2.0.50727"/>Di2015NewLine       </startup>Di2015NewLine    </configuration>Di2015NewLine
21052286Di2015UniqueSeparatorstring root = Path.GetPathRoot(System.Reflection.Assembly.GetEntryAssembly().Location);Di2015NewLine
21052286Di2015UniqueSeparatorPath.GetPathRoot()
21052487Di2015UniqueSeparatorpublic class ViewModel1 // Find a better name ;)Di2015NewLine{Di2015NewLine    public ViewModel1 ()Di2015NewLine    {Di2015NewLine    }Di2015NewLine    public int Id{ get; set; }Di2015NewLine    public List<Items> Items{ get; set; }Di2015NewLine}Di2015NewLine
21052589Di2015UniqueSeparator<asp:updatepanel runat="server" id="UpdatePanel" UpdateMode="Conditional">Di2015NewLine<contenttemplate>Di2015NewLine<asp:dropdownlist runat="server" id="drop_date"  OnSelectedIndexChanged="drop_date_SelectedIndexChanged" AutoPostBack="true">Di2015NewLine    </asp:dropdownlist>Di2015NewLineDi2015NewLine<asp:dropdownlist runat="server" id="drop_newsletter">Di2015NewLine</asp:dropdownlist>Di2015NewLine</contenttemplate>Di2015NewLine</asp:updatepanel>Di2015NewLine
21052589Di2015UniqueSeparator    DataSet ds = new DataSet();Di2015NewLine    SqlDataAdapter myda = new SqlDataAdapter("Select newsletter FROM tablename where date='"+drop_date.SelectedValue+"'",connection_Object);Di2015NewLine    myda.Fill(ds);Di2015NewLine    drop_newsletter.DataSource = ds;Di2015NewLine    drop_newsletter.DataValueField = "newsletter";Di2015NewLine    drop_newsletter.DataBind();Di2015NewLine    drop_newsletter.Items.Insert(0, new ListItem("Select", "0"));Di2015NewLine    //This updates the panel AsynchronouslyDi2015NewLine    UpdatePanel.Update();Di2015NewLine}Di2015NewLine
21052649Di2015UniqueSeparatorstring pwApplication = "XXXXXXXXX";Di2015NewLinebool isAndroid = uuid.DevicePlatform == "android";Di2015NewLinevar myNotif = new JObject(Di2015NewLine                new JProperty("send_date", "now"),Di2015NewLine                new JProperty("ignore_user_timezone", true),Di2015NewLine                new JProperty("platforms", isAndroid ? 3 : 1),Di2015NewLine                new JProperty("devices", uuid.UuidId)Di2015NewLine                );Di2015NewLineif (isAndroid)Di2015NewLine{Di2015NewLine    myNotif.Add(new JProperty("android_header", "whatever you put here"));Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    myNotif.Add(new JProperty("ios_badges", totalBadgeCount.BadgeCount));Di2015NewLine}Di2015NewLinemyNotif.Add(new JProperty("uuid_list", string.Join(",",Di2015NewLine   totalBadgeCount.Uuids.Where(x => x.DevicePlatform == uuid.DevicePlatform)Di2015NewLine                        .Select(x => x.UuidId))));Di2015NewLinevar json = new JObject(Di2015NewLine    new JProperty("application", pwApplication),Di2015NewLine    new JProperty("auth", pwAuth),Di2015NewLine    new JProperty("notifications",Di2015NewLine        new JArray(myNotif)));Di2015NewLinePwCall("createMessage", json);Di2015NewLine
21052649Di2015UniqueSeparatorJObject
21052649Di2015UniqueSeparatorpublic class NotificationDi2015NewLine{Di2015NewLine    public string send_date { get; set; }Di2015NewLine    public bool ignore_user_timezone { get; set; }Di2015NewLine    public int platforms { get; set; }Di2015NewLine    [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]Di2015NewLine    public int? ios_badges { get; set; }Di2015NewLine    public string devices { get; set; }Di2015NewLine    [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]Di2015NewLine    public string android_header { get; set; }Di2015NewLine    public string uuid_list { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class MyMessageDi2015NewLine{Di2015NewLine    public string application { get; set; }Di2015NewLine    public string auth { get; set; }Di2015NewLine    public List<Notification> notifications { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinestring pwApplication = "XXXXXXXXX";Di2015NewLinebool isAndroid = uuid.DevicePlatform == "android";Di2015NewLinevar myNotif =Di2015NewLine    new NotificationDi2015NewLine    {Di2015NewLine        send_date = "now",Di2015NewLine        ignore_user_timezone = true,Di2015NewLine        platforms = isAndroid ? 3 : 1,Di2015NewLine        devices = uuid.UuidIdDi2015NewLine    };Di2015NewLineif (isAndroid)Di2015NewLine{Di2015NewLine    myNotif.android_header = "whatever you put here";Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    myNotif.ios_badges = totalBadgeCount.BadgeCount;Di2015NewLine}Di2015NewLinemyNotif.uuid_list = string.Join(",",Di2015NewLine   totalBadgeCount.Uuids.Where(x => x.DevicePlatform == uuid.DevicePlatform)Di2015NewLine                        .Select(x => x.UuidId));Di2015NewLinevar myMessage = new MyMessageDi2015NewLine{Di2015NewLine    application = pwApplication,Di2015NewLine    auth = pwAuth,Di2015NewLine    notifications = new List<Notification> { myNotif }Di2015NewLine};Di2015NewLinevar json = JsonConvert.SerializeObject(myMessage);Di2015NewLinePwCall("createMessage", json);Di2015NewLine
21052686Di2015UniqueSeparatorlistADi2015NewLine .Zip(listB, (a, b) => new { a, b } )Di2015NewLine .Where(pair => pair.a)Di2015NewLine .Select(pair => pair.b);Di2015NewLine
21052686Di2015UniqueSeparatorlistADi2015NewLine .Zip(listB, (shouldIncludeValue, value) => new { shouldIncludeValue, value } )Di2015NewLine .Where(pair => pair.shouldIncludeValue)Di2015NewLine .Select(pair => pair.value);Di2015NewLine
21052704Di2015UniqueSeparatorNameTokenTemplate
21052704Di2015UniqueSeparatorgeneric.xaml
21052704Di2015UniqueSeparator<Style TargetType="{x:Type local:TokenizingControl}">
21052704Di2015UniqueSeparatorgeneric.xaml
21052704Di2015UniqueSeparatorApp.xaml
21052704Di2015UniqueSeparator    <Application.Resources>Di2015NewLine        <ResourceDictionary>Di2015NewLine            <vm:ViewModelLocator x:Key="Locator" d:IsDataSource="True" />Di2015NewLine            <ResourceDictionary.MergedDictionaries>Di2015NewLine                <ResourceDictionary Source="Views/generic.xaml"/>Di2015NewLine            </ResourceDictionary.MergedDictionaries>Di2015NewLine        </ResourceDictionary>Di2015NewLine    </Application.Resources>Di2015NewLine
21052716Di2015UniqueSeparator&
21052716Di2015UniqueSeparatorr
21052716Di2015UniqueSeparatora = (r & (1 << 0)) != 0;Di2015NewLineb = (r & (1 << 1)) != 0;Di2015NewLinec = (r & (1 << 2)) != 0;Di2015NewLined = (r & (1 << 3)) != 0;Di2015NewLinee = (r & (1 << 4)) != 0;Di2015NewLinef = (r & (1 << 5)) != 0;Di2015NewLineg = (r & (1 << 6)) != 0;Di2015NewLineh = (r & (1 << 7)) != 0;Di2015NewLinei = (r & (1 << 8)) != 0;Di2015NewLine
21052716Di2015UniqueSeparatorr
21052716Di2015UniqueSeparatora
21052716Di2015UniqueSeparatorb
21052716Di2015UniqueSeparatorr
21052978Di2015UniqueSeparatorpublic IList<DifferenceFooObject> RunPropComparison(List<FooObject> foos)Di2015NewLine{Di2015NewLine    var differences = new List<DifferenceFooObject>();Di2015NewLine    foreach (var group in foos.GroupBy(x => x.Test1))Di2015NewLine    {Di2015NewLine        var difference = new DifferenceFooObject();Di2015NewLine        difference.SharedTest1 = group.Key;Di2015NewLine        difference.SubTest1 = group.SelectMany(x => x.SubTest1).ToList();Di2015NewLine        differences.Add(difference);Di2015NewLine    }Di2015NewLine    return differences;Di2015NewLine}Di2015NewLine
21052978Di2015UniqueSeparatorpublic DifferenceFooObject(string sharedTest1, IEnumerable<FooSubObject> subTest1)Di2015NewLine{Di2015NewLine    this.SharedTest1 = sharedTest1;Di2015NewLine    this.SubTest1 = subTest1.ToList();Di2015NewLine}Di2015NewLine
21052978Di2015UniqueSeparatorpublic IList<DifferenceFooObject> RunPropComparison(List<FooObject> foos)Di2015NewLine{Di2015NewLine    return foos.GroupBy(x => x.Test1)Di2015NewLine      .Select(g => new DifferenceFooObject(g.Key, g.SelectMany(x => x.SubTest1)))Di2015NewLine      .ToList();Di2015NewLine}Di2015NewLine
21053062Di2015UniqueSeparatornumTasks
21053062Di2015UniqueSeparatorint numTasks = 5;Di2015NewLineSemaphoreSlim semaphore = new SemaphoreSlim(numTasks);Di2015NewLinewhile(true)Di2015NewLine{Di2015NewLine    semaphore.Wait();Di2015NewLine    Task.Run(() =>Di2015NewLine        {Di2015NewLine            DoSomething();Di2015NewLine        })Di2015NewLine        .ContinueWith(_ => semaphore.Release());Di2015NewLine}Di2015NewLine
21053139Di2015UniqueSeparatorstatic public void RegexTry()Di2015NewLine{Di2015NewLine    StreamReader stream = new StreamReader(@"test.xml");Di2015NewLine    string xmlfile = stream.ReadToEnd();Di2015NewLine    stream.Close();Di2015NewLineDi2015NewLine    string text = "";Di2015NewLineDi2015NewLine    for (int i = 0; i < 128; i++ )Di2015NewLine    {Di2015NewLine        char t = (char) i;Di2015NewLineDi2015NewLine        text = xmlfile.Replace('ÐŸ', t);Di2015NewLineDi2015NewLine        XmlDocument xml = new XmlDocument();Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            xml.LoadXml(text);Di2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine            Console.WriteLine("Char("+i.ToString() +"): " + t + " => error! " + ex.Message);Di2015NewLine            continue;Di2015NewLine        }Di2015NewLineDi2015NewLine        Console.WriteLine("Char(" + i.ToString() + "): " + t + " => fine!");Di2015NewLine    }Di2015NewLineDi2015NewLine    Console.ReadKey();Di2015NewLine}Di2015NewLine
21053139Di2015UniqueSeparatorChar(0): => error! '.', hexadecimal value 0x00, is an invalid character. Line 5, position 7.Di2015NewLineChar(1): => error! '', hexadecimal value 0x01, is an invalid character. Line 5, position 7.Di2015NewLineChar(2): => error! '', hexadecimal value 0x02, is an invalid character. Line 5, position 7.Di2015NewLineChar(3): => error! '', hexadecimal value 0x03, is an invalid character. Line 5, position 7.Di2015NewLineChar(4): => error! '', hexadecimal value 0x04, is an invalid character. Line 5, position 7.Di2015NewLineChar(5): => error! '', hexadecimal value 0x05, is an invalid character. Line 5, position 7.Di2015NewLineChar(6): => error! '', hexadecimal value 0x06, is an invalid character. Line 5, position 7.Di2015NewLineChar(7): => error! '', hexadecimal value 0x07, is an invalid character. Line 5, position 7.Di2015NewLineChar(8): => error! '', hexadecimal value 0x08, is an invalid character. Line 5, position 7.Di2015NewLineChar(9):     => fine!Di2015NewLineChar(10): Di2015NewLine => fine!Di2015NewLineChar(11): => error! '', hexadecimal value 0x0B, is an invalid character. Line 5, position 7.Di2015NewLineChar(12): => error! '', hexadecimal value 0x0C, is an invalid character. Line 5, position 7.Di2015NewLineChar(13): Di2015NewLine => fine!Di2015NewLineChar(14): => error! '', hexadecimal value 0x0E, is an invalid character. Line 5, position 7.Di2015NewLineChar(15): => error! '', hexadecimal value 0x0F, is an invalid character. Line 5, position 7.Di2015NewLineChar(16): => error! '', hexadecimal value 0x10, is an invalid character. Line 5, position 7.Di2015NewLineChar(17): => error! '', hexadecimal value 0x11, is an invalid character. Line 5, position 7.Di2015NewLineChar(18): => error! '', hexadecimal value 0x12, is an invalid character. Line 5, position 7.Di2015NewLineChar(19): => error! '', hexadecimal value 0x13, is an invalid character. Line 5, position 7.Di2015NewLineChar(20): => error! '', hexadecimal value 0x14, is an invalid character. Line 5, position 7.Di2015NewLineChar(21): => error! '', hexadecimal value 0x15, is an invalid character. Line 5, position 7.Di2015NewLineChar(22): => error! '', hexadecimal value 0x16, is an invalid character. Line 5, position 7.Di2015NewLineChar(23): => error! '', hexadecimal value 0x17, is an invalid character. Line 5, position 7.Di2015NewLineChar(24): => error! '', hexadecimal value 0x18, is an invalid character. Line 5, position 7.Di2015NewLineChar(25): => error! '', hexadecimal value 0x19, is an invalid character. Line 5, position 7.Di2015NewLineChar(26): => error! '', hexadecimal value 0x1A, is an invalid character. Line 5, position 7.Di2015NewLineChar(27): => error! '', hexadecimal value 0x1B, is an invalid character. Line 5, position 7.Di2015NewLineChar(28): => error! '', hexadecimal value 0x1C, is an invalid character. Line 5, position 7.Di2015NewLineChar(29): => error! '', hexadecimal value 0x1D, is an invalid character. Line 5, position 7.Di2015NewLineChar(30): => error! '', hexadecimal value 0x1E, is an invalid character. Line 5, position 7.Di2015NewLineChar(31): => error! '', hexadecimal value 0x1F, is an invalid character. Line 5, position 7.Di2015NewLineChar(32):   => fine!Di2015NewLineChar(33): ! => fine!Di2015NewLineChar(34): " => fine!Di2015NewLineChar(35): # => fine!Di2015NewLineChar(36): $ => fine!Di2015NewLineChar(37): % => fine!Di2015NewLineChar(38): => error! An error occurred while parsing EntityName. Line 5, position 8.Di2015NewLineChar(39): ' => fine!Di2015NewLineChar(40): ( => fine!Di2015NewLineChar(41): ) => fine!Di2015NewLineChar(42): * => fine!Di2015NewLineChar(43): + => fine!Di2015NewLineChar(44): , => fine!Di2015NewLineChar(45): - => fine!Di2015NewLineChar(46): . => fine!Di2015NewLineChar(47): / => fine!Di2015NewLineChar(48): 0 => fine!Di2015NewLineChar(49): 1 => fine!Di2015NewLineChar(50): 2 => fine!Di2015NewLineChar(51): 3 => fine!Di2015NewLineChar(52): 4 => fine!Di2015NewLineChar(53): 5 => fine!Di2015NewLineChar(54): 6 => fine!Di2015NewLineChar(55): 7 => fine!Di2015NewLineChar(56): 8 => fine!Di2015NewLineChar(57): 9 => fine!Di2015NewLineChar(58): : => fine!Di2015NewLineChar(59): ; => fine!Di2015NewLineChar(60): => error! The '<' character, hexadecimal value 0x3C, cannot be included in a name. Line 5, position 13.Di2015NewLineChar(61): = => fine!Di2015NewLineChar(62): > => fine!Di2015NewLineChar(63): ? => fine!Di2015NewLineChar(64): @ => fine!Di2015NewLineChar(65): A => fine!Di2015NewLineChar(66): B => fine!Di2015NewLineChar(67): C => fine!Di2015NewLineChar(68): D => fine!Di2015NewLineChar(69): E => fine!Di2015NewLineChar(70): F => fine!Di2015NewLineChar(71): G => fine!Di2015NewLineChar(72): H => fine!Di2015NewLineChar(73): I => fine!Di2015NewLineChar(74): J => fine!Di2015NewLineChar(75): K => fine!Di2015NewLineChar(76): L => fine!Di2015NewLineChar(77): M => fine!Di2015NewLineChar(78): N => fine!Di2015NewLineChar(79): O => fine!Di2015NewLineChar(80): P => fine!Di2015NewLineChar(81): Q => fine!Di2015NewLineChar(82): R => fine!Di2015NewLineChar(83): S => fine!Di2015NewLineChar(84): T => fine!Di2015NewLineChar(85): U => fine!Di2015NewLineChar(86): V => fine!Di2015NewLineChar(87): W => fine!Di2015NewLineChar(88): X => fine!Di2015NewLineChar(89): Y => fine!Di2015NewLineChar(90): Z => fine!Di2015NewLineChar(91): [ => fine!Di2015NewLineChar(92): \\ => fine!Di2015NewLineChar(93): ] => fine!Di2015NewLineChar(94): ^ => fine!Di2015NewLineChar(95): _ => fine!Di2015NewLineChar(96): ` => fine!Di2015NewLineChar(97): a => fine!Di2015NewLineChar(98): b => fine!Di2015NewLineChar(99): c => fine!Di2015NewLineChar(100): d => fine!Di2015NewLineChar(101): e => fine!Di2015NewLineChar(102): f => fine!Di2015NewLineChar(103): g => fine!Di2015NewLineChar(104): h => fine!Di2015NewLineChar(105): i => fine!Di2015NewLineChar(106): j => fine!Di2015NewLineChar(107): k => fine!Di2015NewLineChar(108): l => fine!Di2015NewLineChar(109): m => fine!Di2015NewLineChar(110): n => fine!Di2015NewLineChar(111): o => fine!Di2015NewLineChar(112): p => fine!Di2015NewLineChar(113): q => fine!Di2015NewLineChar(114): r => fine!Di2015NewLineChar(115): s => fine!Di2015NewLineChar(116): t => fine!Di2015NewLineChar(117): u => fine!Di2015NewLineChar(118): v => fine!Di2015NewLineChar(119): w => fine!Di2015NewLineChar(120): x => fine!Di2015NewLineChar(121): y => fine!Di2015NewLineChar(122): z => fine!Di2015NewLineChar(123): { => fine!Di2015NewLineChar(124): | => fine!Di2015NewLineChar(125): } => fine!Di2015NewLineChar(126): ~ => fine!Di2015NewLineChar(127):  => fine!  Di2015NewLine
21053139Di2015UniqueSeparatorstatic string ReplaceHexadecimalSymbols(string txt)Di2015NewLine{Di2015NewLine    string r = "[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x26]";Di2015NewLine    return Regex.Replace(txt, r,"",RegexOptions.Compiled);Di2015NewLine}Di2015NewLine
21053392Di2015UniqueSeparatorDateTime
21053392Di2015UniqueSeparatorDateTime
21053392Di2015UniqueSeparatorDateTime
21053392Di2015UniqueSeparatorParse
21053392Di2015UniqueSeparatorDateTime
21053392Di2015UniqueSeparatorDateTime.ParseExact
21053392Di2015UniqueSeparatorParseExact
21053475Di2015UniqueSeparatortheDate.ToString("yyyy-MM-dd HH:mm:ss.000")Di2015NewLine
21053631Di2015UniqueSeparator_vc = new VlanClass(_context);Di2015NewLine_ec = new EnvironmentTypesClass(_context);Di2015NewLineDi2015NewLineif (!IsPostBack)Di2015NewLine{Di2015NewLine    Session["vlans"] = _vc.GetAllVlans();Di2015NewLine    BindData();Di2015NewLine}Di2015NewLine
21053631Di2015UniqueSeparatorif (Session["vlans"] == null )Di2015NewLine{Di2015NewLine   _context = new nsdc_supplyEntities();  // only create the context here not in the instance var declaration.Di2015NewLine   _vc = new VlanClass(_context);Di2015NewLine   _ec = new EnvironmentTypesClass(_context);Di2015NewLine    Session["vc"] = _vc;Di2015NewLine    Session["vlans"] = _vc.GetAllVlans();Di2015NewLine    Session["context"] = _context;Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    _context = (DbContext)Session["context"];  // cast to your ContextDi2015NewLine   _vc = (VlanClass) Session["vc"]  ;Di2015NewLine}Di2015NewLineDi2015NewLineif (!IsPostBack)Di2015NewLine{Di2015NewLine    BindData();Di2015NewLine}Di2015NewLine
21053851Di2015UniqueSeparator Start A TransactionDi2015NewLine DELETE FROM userDepartment WHERE UserID=1Di2015NewLine for each department choosenDi2015NewLine    INSERT INTO userDepartment (userID, deparmentID) values (1, departmentIDChoosen)Di2015NewLine NextDi2015NewLine Commit TransactionDi2015NewLine
21053851Di2015UniqueSeparatorCREATE TYPE dbo.UserDeptTableType AS TABLEDi2015NewLine    ( UserID int, DeptID int )Di2015NewLineDi2015NewLineCREATE PROCEDURE usp_UpdateUserDepartmentDi2015NewLine(@userID int, @tbpNewDepts dbo.UserDeptTableType READONLY)Di2015NewLineASDi2015NewLineBEGIN TRANSACTION T1Di2015NewLine    DELETE FROM userDepartment WHERE UserID=@userIDDi2015NewLine    INSERT INTO dbo.userDepartment (UserID, DeptID)Di2015NewLine    SELECT ud.UserID, ud.DeptID FROM @tvpNewDepts AS udDi2015NewLineCOMMIT TRANSACTION T1Di2015NewLine
21053851Di2015UniqueSeparatorusing (connection)Di2015NewLine{Di2015NewLine      DataTable depts = GetUserIDWithDepartments();Di2015NewLine      SqlCommand insertCommand = new SqlCommand("usp_UpdateUserDepartment", connection);Di2015NewLine      insertCommand.CommandType = CommandType.StoredProcedure;Di2015NewLine      insertCommand.Parameters.AddWithValue("@userID", currentUserID);Di2015NewLine      SqlParameter tvpParam = insertCommand.Parameters.AddWithValue("@tvpNewDepts", depts);Di2015NewLine      tvpParam.SqlDbType = SqlDbType.Structured;Di2015NewLine      insertCommand.ExecuteNonQuery();Di2015NewLine}Di2015NewLine
21054198Di2015UniqueSeparatorint iterationsPerThread = 10 * 1000000;Di2015NewLinevar taskCount = Environment.ProcessorCount;Di2015NewLineDi2015NewLineint counter = 0;Di2015NewLineDi2015NewLinevar tasks =Di2015NewLine    Enumerable.Range(0, taskCount)Di2015NewLine    .Select(_ => Task.Factory.StartNew(() =>Di2015NewLine    {Di2015NewLine        for (int i = 0; i < iterationsPerThread; i++)Di2015NewLine        {Di2015NewLine            counter = counter + 1; //racy!Di2015NewLine        }Di2015NewLine    }))Di2015NewLine    .ToArray();Di2015NewLineDi2015NewLineTask.WaitAll(tasks); //quiece systemDi2015NewLineDi2015NewLineConsole.WriteLine("Expected: " + (iterationsPerThread * taskCount));Di2015NewLineConsole.WriteLine("Actual: " + counter);Di2015NewLine
21054198Di2015UniqueSeparatorExpected: 80000000Di2015NewLineActual:   22799012 //about 75% of increments lostDi2015NewLine
21054339Di2015UniqueSeparatorif (bitmapImage != null) {Di2015NewLine    // create WriteableBitmap object from captured BitmapImageDi2015NewLine    WriteableBitmap writeableBitmap = new WriteableBitmap(bitmapImage);Di2015NewLineDi2015NewLine    using (MemoryStream ms = new MemoryStream())Di2015NewLine    {Di2015NewLine        writeableBitmap.SaveJpeg(ms, writeableBitmap.PixelWidth, writeableBitmap.PixelHeight, 0, 100);Di2015NewLineDi2015NewLine        ms.Position = 0;Di2015NewLine        imageBuffer = new byte[ms.Length];Di2015NewLine        ms.Read(imageBuffer, 0, imageBuffer.Length);Di2015NewLine        ms.Dispose();Di2015NewLine    }                Di2015NewLine}Di2015NewLine
21054545Di2015UniqueSeparatorpublic Siffra[,] SudokuArray = new Siffra[9,9];Di2015NewLine
21054545Di2015UniqueSeparatornull
21054545Di2015UniqueSeparatorSudokuArray[x,y].nummer = value;Di2015NewLine
21054545Di2015UniqueSeparatornull
21054545Di2015UniqueSeparatornummer
21054545Di2015UniqueSeparatornull
21054545Di2015UniqueSeparatorRuta
21054545Di2015UniqueSeparatorfor (int x = 0; x < 9; x++)Di2015NewLine  for (int y = 0; y < 9; y++)Di2015NewLine     SudokuArray[x,y] = new Siffra();Di2015NewLine
21054798Di2015UniqueSeparatorpublic class CarroMontadora<T1, T2>Di2015NewLine    where T2 : IFooDi2015NewLine    where T1 : ILang<T2>Di2015NewLine{Di2015NewLine}Di2015NewLine
21054859Di2015UniqueSeparatorButton
21054859Di2015UniqueSeparatorSystem.Windows.Controls.Button
21054859Di2015UniqueSeparatorButton
21054859Di2015UniqueSeparatorObservableCollection
21054938Di2015UniqueSeparator^([\\p{Lu}\\p{Lt}]\\p{L}+\\s*){2,5}
21054945Di2015UniqueSeparatorAdd
21054945Di2015UniqueSeparatorstring myStr = "var2";Di2015NewLineDi2015NewLinevar json = new JObject(Di2015NewLine    new JProperty("var1", var1));Di2015NewLineif (myStr == "var2")Di2015NewLine{Di2015NewLine    json.Add(new JProperty("var2", var2));Di2015NewLine}Di2015NewLine
21055173Di2015UniqueSeparatorServer
21055173Di2015UniqueSeparatorMicrosoft.AnalysisServices
21055173Di2015UniqueSeparatorMicrosoft.AnalysisServices.dll
21055173Di2015UniqueSeparatorC:\\Program Files (x86)\\Microsoft SQL Server\\%VERSION%\\SDK\\Assemblies\\Microsoft.AnalysisServices.dllDi2015NewLine
21055236Di2015UniqueSeparatorReverse
21055236Di2015UniqueSeparatorcolors.Reverse();Di2015NewLineHeatMap map = new HeatMap(colors, width, height, file, U, V);Di2015NewLine
21055236Di2015UniqueSeparatorReverse
21055236Di2015UniqueSeparatorList<Color>
21055236Di2015UniqueSeparatorReverse
21055236Di2015UniqueSeparatorvoid
21055496Di2015UniqueSeparatorsomeCollection.Where(x => listOfValues.Select(y => y[0]).Contains(x => x.id_num);Di2015NewLine
21055496Di2015UniqueSeparatorlistOfValues
21055496Di2015UniqueSeparatorHasSet<string>
21055496Di2015UniqueSeparatorvar set = new HashSet<string>(listOfValues.Select(y => y[0]));Di2015NewLinesomeCollection.Where(x => set.Contains(x));Di2015NewLine
21055660Di2015UniqueSeparatorasync
21055660Di2015UniqueSeparatorStartToastCycle
21055660Di2015UniqueSeparatorasync
21055660Di2015UniqueSeparatorawait
21055660Di2015UniqueSeparatorTask.Delay
21055660Di2015UniqueSeparatorprivate async void StartToastCycle(int MaxNotifications)Di2015NewLine{Di2015NewLine    while (App.RunningInBackground)Di2015NewLine    {Di2015NewLine        if (NotificationCount >= MaxNotifications || !App.RunningInBackground)Di2015NewLine            break;Di2015NewLine        if (NotificationCount < MaxNotifications && NotificationLastSent < DateTime.Now.AddMinutes(-2))Di2015NewLine        {Di2015NewLine            Microsoft.Phone.Shell.ShellToast toast = new Microsoft.Phone.Shell.ShellToast();Di2015NewLine            toast.Content = "Test";Di2015NewLine            toast.Title = "Test: ";Di2015NewLine            toast.NavigationUri = new Uri("/Views/HomePage.xaml", UriKind.Relative);Di2015NewLine            toast.Show();Di2015NewLine            NotificationCount++;Di2015NewLine            NotificationLastSent = DateTime.Now;Di2015NewLine        }Di2015NewLine        await Task.Delay(TimeSpan.FromSeconds(10));Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
21055714Di2015UniqueSeparatorrunat="server"
21055714Di2015UniqueSeparator<head runat="server">Di2015NewLine
21055753Di2015UniqueSeparatorp
21055753Di2015UniqueSeparator[StructLayout(LayoutKind.Sequential)]Di2015NewLinepublic class OUR_MEM_STR {Di2015NewLine    public IntPtr p;Di2015NewLine    public int len;Di2015NewLine};Di2015NewLine
21055753Di2015UniqueSeparatorp
21055945Di2015UniqueSeparatorGetHashCode()
21055945Di2015UniqueSeparatorpublic class TilePositionCompare : IEqualityComparer<TilePosition>Di2015NewLine{Di2015NewLine    public bool Equals(TilePosition tileA, TilePosition tileB)Di2015NewLine    {Di2015NewLine        return tileA.PosX == tileB.PosX && tileA.PosY == tileB.PosY;Di2015NewLine    }Di2015NewLineDi2015NewLine    public int GetHashCode(TilePosition tile)Di2015NewLine    {Di2015NewLine        var hash = 17;Di2015NewLine        hash = hash * 23 + tile.PosX.GetHashCode();Di2015NewLine        hash = hash * 23 + tile.PosY.GetHashCode();Di2015NewLine        return hash;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21055961Di2015UniqueSeparatorSplit(new char[] { ' ' }, 1)
21055961Di2015UniqueSeparatorRemoveEmptyEntries
21055961Di2015UniqueSeparatorFile.ReadAllText
21055961Di2015UniqueSeparatorFile.ReadAllText("path")Di2015NewLine    .Split(new [] { ' ' }, StringSplitOptions.RemoveEmptyEntries)Di2015NewLine    .Select(n => int.Parse(n))Di2015NewLine    .ToList();Di2015NewLine
21056267Di2015UniqueSeparatorGetCurrentThreadId
21056267Di2015UniqueSeparator[DllImport("kernel32.dll")]Di2015NewLinestatic extern uint GetCurrentThreadId();Di2015NewLine
21056267Di2015UniqueSeparatorWiScn_Run
21056267Di2015UniqueSeparatorDocDoneCallback
21056270Di2015UniqueSeparatorpublic DateTime convert(string date)Di2015NewLine{Di2015NewLine    int hour = int.Parse(date.Substring(0, 2));Di2015NewLine    int minute = int.Parse(date.Substring(2, 2));Di2015NewLine    if (hour < 12 && date.Substring(4, 2) == "PM")Di2015NewLine    {Di2015NewLine        hour = hour + 12;Di2015NewLine    }Di2015NewLineDi2015NewLine    return new DateTime(2014, 1, 10, hour, minute, 0);Di2015NewLine}Di2015NewLine
21056320Di2015UniqueSeparatortask.GetAwaiter().GetResult()
21056320Di2015UniqueSeparatorTestAsync
21056320Di2015UniqueSeparatorstatic Task Test()Di2015NewLine{Di2015NewLine    var random = new Random(Environment.TickCount).Next();Di2015NewLine    if (random % 2 != 0)Di2015NewLine        throw new ApplicationException("1st");Di2015NewLineDi2015NewLine    return TestAsync();Di2015NewLine}Di2015NewLineDi2015NewLinestatic async Task TestAsync()Di2015NewLine{Di2015NewLine    await Task.Delay(2000);Di2015NewLine    Console.WriteLine("after await Task.Delay");Di2015NewLine    throw new ApplicationException("2nd");Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLinestatic void Main(string[] args)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        Test();Di2015NewLine        Console.WriteLine("TestAsync continues asynchronously...");Di2015NewLine    }Di2015NewLine    catch (Exception e)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Error: " + e.ToString());Di2015NewLine    }Di2015NewLineDi2015NewLine    Console.WriteLine("Press Enter to exit...");Di2015NewLine    Console.ReadLine();Di2015NewLine}Di2015NewLine
21056408Di2015UniqueSeparatorCreate
21056408Di2015UniqueSeparatorStudent
21056408Di2015UniqueSeparatorCreate(Student)
21056408Di2015UniqueSeparatorHttpPost
21056408Di2015UniqueSeparatorCreate()
21056408Di2015UniqueSeparatorCreate()
21056408Di2015UniqueSeparator[HttpGet]
21056629Di2015UniqueSeparatorHow to Enable Remote MySQL Connection in cPanel
21056629Di2015UniqueSeparatorssh
21056707Di2015UniqueSeparatorBackgroundWorker
21056707Di2015UniqueSeparatorResult
21056707Di2015UniqueSeparatorpublic object ResultDi2015NewLine{Di2015NewLine  getDi2015NewLine  {Di2015NewLine    this.RaiseExceptionIfNecessary();Di2015NewLine    return this.result;Di2015NewLine  }Di2015NewLine}Di2015NewLine
21056707Di2015UniqueSeparatorRaiseExceptionIfNecessary()
21056707Di2015UniqueSeparatorprotected void RaiseExceptionIfNecessary()Di2015NewLine{Di2015NewLine  if (this.Error != null)Di2015NewLine    throw new TargetInvocationException(SR.GetString("Async_ExceptionOccurred"), this.Error);Di2015NewLine  if (this.Cancelled)Di2015NewLine    throw new InvalidOperationException(SR.GetString("Async_OperationCancelled"));Di2015NewLine}Di2015NewLine
21056707Di2015UniqueSeparatorResult
21056707Di2015UniqueSeparatorInvalidOperationException
21056707Di2015UniqueSeparatorDoWork
21056880Di2015UniqueSeparatorfoo
21056880Di2015UniqueSeparatorbar
21056880Di2015UniqueSeparatorblah
21056880Di2015UniqueSeparatorblah
21056880Di2015UniqueSeparatorfoo.bar
21056880Di2015UniqueSeparatorblah
21056880Di2015UniqueSeparatorblah
21056880Di2015UniqueSeparatorfoo
21056880Di2015UniqueSeparatorblah
21056880Di2015UniqueSeparatorbar
21056932Di2015UniqueSeparatorstring newPath = System.IO.Path.Combine(currentDir, newName)Di2015NewLineSystem.IO.File.Move(file.FullName, newPath);Di2015NewLine
21056966Di2015UniqueSeparatorvar xDoc = XDocument.Load("Input.xml");Di2015NewLineDi2015NewLinevar author = "Barry White";Di2015NewLinevar titles = (from r in xDoc.Root.Elements("Record")Di2015NewLine              let _author = (string)r.Element("Author")Di2015NewLine              let _title = (string)r.Element("Title")Di2015NewLine              where _author == authorDi2015NewLine              select _title).ToList();Di2015NewLine
21056966Di2015UniqueSeparatorvar titles = xDoc.Root.Elements("Record")Di2015NewLine                 .Where(r => (string)r.Element("Author") == author)Di2015NewLine                 .Select(r => (string)r.Element("Title"))Di2015NewLine                 .ToList();Di2015NewLine
21057083Di2015UniqueSeparator_behavior = (IBehavior)Activator.CreateInstance(Type.GetType(Behavior));Di2015NewLine
21057083Di2015UniqueSeparatornew object()
21057083Di2015UniqueSeparatorMethodBase.Invoke(Object, Object[])
21057083Di2015UniqueSeparator.GetConstructor(Type.EmptyTypes).Invoke(new object(), null)Di2015NewLine
21057083Di2015UniqueSeparatorConstructorInfo.Invoke(Object[])
21057083Di2015UniqueSeparator_behavior = (IBehavior)Type.GetType(Behavior)Di2015NewLine                           .GetConstructor(Type.EmptyTypes)Di2015NewLine                           .Invoke(new object[] { });Di2015NewLine
21057083Di2015UniqueSeparatorArgumentNullException
21057083Di2015UniqueSeparatorActivator.CreateInstance
21057083Di2015UniqueSeparatorActivator.CreateInstance(Type.GetType("ConsoleApplication.SomeClass"))Di2015NewLine
21057178Di2015UniqueSeparator// Source: http://download.csdn.net/download/laviewpbt/4900954Di2015NewLine// Author: http://download.csdn.net/user/laviewpbtDi2015NewLineDi2015NewLinenamespace PrimeLibDi2015NewLine{Di2015NewLine    public enum DitherTypeDi2015NewLine    {Di2015NewLine        DitherTypeNone = 0,Di2015NewLine        DitherTypeSolid = 1,Di2015NewLine        DitherTypeOrdered4x4 = 2,Di2015NewLine        DitherTypeOrdered8x8 = 3,Di2015NewLine        DitherTypeOrdered16x16 = 4,Di2015NewLine        DitherTypeSpiral4x4 = 5,Di2015NewLine        DitherTypeSpiral8x8 = 6,Di2015NewLine        DitherTypeDualSpiral4x4 = 7,Di2015NewLine        DitherTypeDualSpiral8x8 = 8,Di2015NewLine        DitherTypeErrorDiffusion = 9,Di2015NewLine        DitherTypeMax = 10Di2015NewLine    }Di2015NewLine    public enum PaletteTypeDi2015NewLine    {Di2015NewLine        PaletteTypeCustom = 0,Di2015NewLine        PaletteTypeOptimal = 1,Di2015NewLine        PaletteTypeFixedBW = 2,Di2015NewLine        PaletteTypeFixedHalftone8 = 3,Di2015NewLine        PaletteTypeFixedHalftone27 = 4,Di2015NewLine        PaletteTypeFixedHalftone64 = 5,Di2015NewLine        PaletteTypeFixedHalftone125 = 6,Di2015NewLine        PaletteTypeFixedHalftone216 = 7,Di2015NewLine        PaletteTypeFixedHalftone252 = 8,Di2015NewLine        PaletteTypeFixedHalftone256 = 9Di2015NewLine    }Di2015NewLineDi2015NewLine    public static class GdipEffectDi2015NewLine    {Di2015NewLine        [DllImport("gdiplus.dll", SetLastError = true, ExactSpelling = true, CharSet = CharSet.Unicode)]Di2015NewLine        private static extern int GdipInitializePalette(ref GdiPalette Pal, int palettetype, int optimalColors,Di2015NewLine            int useTransparentColor, IntPtr bitmap);Di2015NewLineDi2015NewLine        [DllImport("gdiplus.dll", SetLastError = true, ExactSpelling = true, CharSet = CharSet.Unicode)]Di2015NewLine        private static extern int GdipInitializePalette(int[] Pal, PaletteType palettetype, int optimalColors,Di2015NewLine            int useTransparentColor, IntPtr bitmap);Di2015NewLineDi2015NewLine        [DllImport("gdiplus.dll", SetLastError = true, ExactSpelling = true, CharSet = CharSet.Unicode)]Di2015NewLine        private static extern int GdipBitmapConvertFormat(IntPtr bitmap, int pixelFormat, DitherType dithertype,Di2015NewLine            PaletteType palettetype, ref GdiPalette Pal, float alphaThresholdPercent);Di2015NewLineDi2015NewLine        [DllImport("gdiplus.dll", SetLastError = true, ExactSpelling = true, CharSet = CharSet.Unicode)]Di2015NewLine        private static extern int GdipBitmapConvertFormat(IntPtr bitmap, int pixelFormat, DitherType dithertype,Di2015NewLine            PaletteType palettetype, int[] Pal, float alphaThresholdPercent);Di2015NewLineDi2015NewLine        [DllImport("gdiplus.dll", SetLastError = true, ExactSpelling = true, CharSet = CharSet.Unicode)]Di2015NewLine        private static extern int GdipBitmapConvertFormat(IntPtr bitmap, int pixelFormat, DitherType dithertype,Di2015NewLine            PaletteType palettetype, IntPtr Pal, float alphaThresholdPercent);Di2015NewLineDi2015NewLine        public static void ChangeTo8bppIndexed(this Bitmap Bmp, PaletteType palettetype = PaletteType.PaletteTypeOptimal,Di2015NewLine            DitherType ditherType = DitherType.DitherTypeErrorDiffusion, int optimalColors = 256)Di2015NewLine        {Di2015NewLine            int Entries;Di2015NewLine            // http://msdn.microsoft.com/en-us/library/ms534159(v=vs.85).aspxDi2015NewLine            switch (palettetype)Di2015NewLine            {Di2015NewLine                case PaletteType.PaletteTypeFixedBW:Di2015NewLine                    Entries = 2;Di2015NewLine                    break;Di2015NewLine                case PaletteType.PaletteTypeFixedHalftone8:Di2015NewLine                    Entries = 16;Di2015NewLine                    break;Di2015NewLine                case PaletteType.PaletteTypeFixedHalftone27:Di2015NewLine                    Entries = 36;Di2015NewLine                    break;Di2015NewLine                case PaletteType.PaletteTypeFixedHalftone64:Di2015NewLine                    Entries = 73;Di2015NewLine                    break;Di2015NewLine                case PaletteType.PaletteTypeFixedHalftone125:Di2015NewLine                    Entries = 134;Di2015NewLine                    break;Di2015NewLine                case PaletteType.PaletteTypeFixedHalftone216:Di2015NewLine                    Entries = 225;Di2015NewLine                    break;Di2015NewLine                case PaletteType.PaletteTypeFixedHalftone252:Di2015NewLine                    Entries = 253;Di2015NewLine                    break;Di2015NewLine                case PaletteType.PaletteTypeFixedHalftone256:Di2015NewLine                    Entries = 256;Di2015NewLine                    break;Di2015NewLine                case PaletteType.PaletteTypeOptimal:Di2015NewLine                    if (optimalColors <= 0 || optimalColors > 256)Di2015NewLine                        throw new ArgumentOutOfRangeException(Di2015NewLine                            "Colors should be between 0 (inclusive) and 256 (exclusive)");Di2015NewLine                    Entries = optimalColors;Di2015NewLine                    break;Di2015NewLine                default:Di2015NewLine                    throw new ArgumentException("Error");Di2015NewLine            }Di2015NewLine            var Pal = new int[2 + Entries];Di2015NewLine            Pal[0] = (int) PaletteFlags.GrayScale; // FlagDi2015NewLine            Pal[1] = Entries; // CountDi2015NewLine            if (palettetype == PaletteType.PaletteTypeOptimal)Di2015NewLine                GdipInitializePalette(Pal, palettetype, Entries, 0, Bmp.NativeHandle());Di2015NewLine            elseDi2015NewLine                GdipInitializePalette(Pal, palettetype, Entries, 0, IntPtr.Zero);Di2015NewLine            if (palettetype == PaletteType.PaletteTypeOptimal)Di2015NewLine                if (ditherType != DitherType.DitherTypeNone && ditherType != DitherType.DitherTypeSolid &&Di2015NewLine                    ditherType != DitherType.DitherTypeErrorDiffusion)Di2015NewLine                    throw new ArgumentException("Arguments error");Di2015NewLine            GdipBitmapConvertFormat(Bmp.NativeHandle(), Convert.ToInt32(PixelFormat.Format8bppIndexed), ditherType,Di2015NewLine                palettetype, Pal, 50f);Di2015NewLine        }Di2015NewLineDi2015NewLine        public static void ChangeToSpecialIndexed(this Bitmap Bmp, PaletteType palettetype = PaletteType.PaletteTypeOptimal,Di2015NewLine           DitherType ditherType = DitherType.DitherTypeErrorDiffusion, int optimalColors = 256)Di2015NewLine        {Di2015NewLine            int Entries;Di2015NewLine            // http://msdn.microsoft.com/en-us/library/ms534159(v=vs.85).aspxDi2015NewLine            switch (palettetype)Di2015NewLine            {Di2015NewLine                case PaletteType.PaletteTypeFixedBW:Di2015NewLine                    Entries = 2;Di2015NewLine                    break;Di2015NewLine                case PaletteType.PaletteTypeFixedHalftone8:Di2015NewLine                    Entries = 16;Di2015NewLine                    break;Di2015NewLine                case PaletteType.PaletteTypeFixedHalftone27:Di2015NewLine                    Entries = 36;Di2015NewLine                    break;Di2015NewLine                case PaletteType.PaletteTypeFixedHalftone64:Di2015NewLine                    Entries = 73;Di2015NewLine                    break;Di2015NewLine                case PaletteType.PaletteTypeFixedHalftone125:Di2015NewLine                    Entries = 134;Di2015NewLine                    break;Di2015NewLine                case PaletteType.PaletteTypeFixedHalftone216:Di2015NewLine                    Entries = 225;Di2015NewLine                    break;Di2015NewLine                case PaletteType.PaletteTypeFixedHalftone252:Di2015NewLine                    Entries = 253;Di2015NewLine                    break;Di2015NewLine                case PaletteType.PaletteTypeFixedHalftone256:Di2015NewLine                    Entries = 256;Di2015NewLine                    break;Di2015NewLine                case PaletteType.PaletteTypeOptimal:Di2015NewLine                    if (optimalColors <= 0 || optimalColors > 256)Di2015NewLine                        throw new ArgumentOutOfRangeException(Di2015NewLine                            "Colors should be between 0 (inclusive) and 256 (exclusive)");Di2015NewLine                    Entries = optimalColors;Di2015NewLine                    break;Di2015NewLine                default:Di2015NewLine                    throw new ArgumentException("Error");Di2015NewLine            }Di2015NewLine            var Pal = new int[2 + Entries];Di2015NewLine            Pal[0] = (int)PaletteFlags.GrayScale; // FlagDi2015NewLine            Pal[1] = Entries; // CountDi2015NewLine            if (palettetype == PaletteType.PaletteTypeOptimal)Di2015NewLine                GdipInitializePalette(Pal, palettetype, Entries, 0, Bmp.NativeHandle());Di2015NewLine            elseDi2015NewLine                GdipInitializePalette(Pal, palettetype, Entries, 0, IntPtr.Zero);Di2015NewLine            if (palettetype == PaletteType.PaletteTypeOptimal)Di2015NewLine                if (ditherType != DitherType.DitherTypeNone && ditherType != DitherType.DitherTypeSolid &&Di2015NewLine                    ditherType != DitherType.DitherTypeErrorDiffusion)Di2015NewLine                    throw new ArgumentException("Arguments error");Di2015NewLine            GdipBitmapConvertFormat(Bmp.NativeHandle(), Convert.ToInt32(PixelFormat.Format16bppArgb1555), ditherType,Di2015NewLine                palettetype, Pal, 50f);Di2015NewLine        }Di2015NewLineDi2015NewLine        public static void ChangeTo4bppIndexed(this Bitmap Bmp, PaletteType palettetype = PaletteType.PaletteTypeOptimal,Di2015NewLine            DitherType ditherType = DitherType.DitherTypeErrorDiffusion, int optimalColors = 16)Di2015NewLine        {Di2015NewLine            int Entries;Di2015NewLine            // http://msdn.microsoft.com/en-us/library/ms534159(v=vs.85).aspxDi2015NewLine            switch (palettetype)Di2015NewLine            {Di2015NewLine                case PaletteType.PaletteTypeFixedBW:Di2015NewLine                    Entries = 2;Di2015NewLine                    break;Di2015NewLine                case PaletteType.PaletteTypeFixedHalftone8:Di2015NewLine                    Entries = 16;Di2015NewLine                    break;Di2015NewLine                case PaletteType.PaletteTypeOptimal:Di2015NewLine                    if (optimalColors <= 0 || optimalColors > 16)Di2015NewLine                        throw new ArgumentOutOfRangeException("Colors should be between 0 (inclusive) and 16 (exclusive)");Di2015NewLine                    Entries = optimalColors;Di2015NewLine                    break;Di2015NewLine                default:Di2015NewLine                    throw new ArgumentException("Error");Di2015NewLine            }Di2015NewLine            var Pal = new int[2 + Entries];Di2015NewLine            Pal[0] = (int) PaletteFlags.GrayScale; // FlagDi2015NewLine            Pal[1] = Entries; // CountDi2015NewLine            if (palettetype == PaletteType.PaletteTypeOptimal)Di2015NewLine                GdipInitializePalette(Pal, palettetype, Entries, 0, Bmp.NativeHandle());Di2015NewLine            elseDi2015NewLine                GdipInitializePalette(Pal, palettetype, Entries, 0, IntPtr.Zero);Di2015NewLine            if (palettetype == PaletteType.PaletteTypeOptimal)Di2015NewLine                if (ditherType != DitherType.DitherTypeNone && ditherType != DitherType.DitherTypeSolid &&Di2015NewLine                    ditherType != DitherType.DitherTypeErrorDiffusion)Di2015NewLine                    throw new ArgumentException("Arguments error");Di2015NewLine            GdipBitmapConvertFormat(Bmp.NativeHandle(), Convert.ToInt32(PixelFormat.Format4bppIndexed), ditherType,Di2015NewLine                palettetype, Pal, 50f);Di2015NewLine        }Di2015NewLineDi2015NewLine        public static void ChangeTo1bppIndexed(this Bitmap Bmp,Di2015NewLine            DitherType ditherType = DitherType.DitherTypeErrorDiffusion)Di2015NewLine        {Di2015NewLine            if (ditherType != DitherType.DitherTypeSolid && ditherType != DitherType.DitherTypeErrorDiffusion)Di2015NewLine                throw new ArgumentException("Arguments error.");Di2015NewLine            var Pal = new int[4];Di2015NewLine            Pal[0] = (int) PaletteFlags.GrayScale; // FlagDi2015NewLine            Pal[1] = 2; // CountDi2015NewLine            GdipInitializePalette(Pal, PaletteType.PaletteTypeFixedBW, 2, 0, IntPtr.Zero);Di2015NewLine            GdipBitmapConvertFormat(Bmp.NativeHandle(), Convert.ToInt32(PixelFormat.Format1bppIndexed), ditherType,Di2015NewLine                PaletteType.PaletteTypeFixedBW, Pal, 50f);Di2015NewLine        }Di2015NewLineDi2015NewLine        public static void ChangeTo16bppRgb555(this Bitmap Bmp,Di2015NewLine            DitherType ditherType = DitherType.DitherTypeErrorDiffusion)Di2015NewLine        {Di2015NewLine            GdipBitmapConvertFormat(Bmp.NativeHandle(), Convert.ToInt32(PixelFormat.Format16bppRgb555), ditherType,Di2015NewLine                PaletteType.PaletteTypeCustom, IntPtr.Zero, 50f);Di2015NewLine        }Di2015NewLineDi2015NewLine        public static void ChangeTo24bppRgb(this Bitmap Bmp)Di2015NewLine        {Di2015NewLine            GdipBitmapConvertFormat(Bmp.NativeHandle(), Convert.ToInt32(PixelFormat.Format24bppRgb),Di2015NewLine                DitherType.DitherTypeNone, PaletteType.PaletteTypeCustom, IntPtr.Zero, 50f);Di2015NewLine        }Di2015NewLineDi2015NewLine        public static void ChangeTo32bppARGB(this Bitmap Bmp)Di2015NewLine        {Di2015NewLine            GdipBitmapConvertFormat(Bmp.NativeHandle(), Convert.ToInt32(PixelFormat.Format32bppArgb),Di2015NewLine                DitherType.DitherTypeNone, PaletteType.PaletteTypeCustom, IntPtr.Zero, 50f);Di2015NewLine        }Di2015NewLineDi2015NewLine        internal static TResult GetPrivateField<TResult>(this object obj, string fieldName)Di2015NewLine        {Di2015NewLine            if (obj == null) return default(TResult);Di2015NewLine            Type ltType = obj.GetType();Di2015NewLine            FieldInfo lfiFieldInfo = ltType.GetField(fieldName,Di2015NewLine                BindingFlags.GetField | BindingFlags.Instance | BindingFlags.NonPublic);Di2015NewLine            if (lfiFieldInfo != null)Di2015NewLine                return (TResult) lfiFieldInfo.GetValue(obj);Di2015NewLine            throw new InvalidOperationException(Di2015NewLine                string.Format("Instance field '{0}' could not be located in object of type '{1}'.", fieldName,Di2015NewLine                    obj.GetType().FullName));Di2015NewLine        }Di2015NewLineDi2015NewLine        public static IntPtr NativeHandle(this Bitmap Bmp)Di2015NewLine        {Di2015NewLine            return Bmp.GetPrivateField<IntPtr>("nativeImage");Di2015NewLine        }Di2015NewLineDi2015NewLine        [StructLayout(LayoutKind.Sequential)]Di2015NewLine        private struct GdiPaletteDi2015NewLine        {Di2015NewLine            internal readonly PaletteFlags Flag;Di2015NewLine            internal readonly int Count;Di2015NewLine            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 1024)] internal readonly byte[] Entries;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21057190Di2015UniqueSeparatorsession
21057190Di2015UniqueSeparatordbRecipes
21057190Di2015UniqueSeparatorsession
21057238Di2015UniqueSeparatorGrid.RowDefinitions
21057238Di2015UniqueSeparator<ScrollViewer>Di2015NewLine    <Grid>Di2015NewLine        <Grid.RowDefinitions>Di2015NewLine            <RowDefinition Height="140"/>Di2015NewLine            <RowDefinition Height="65" />Di2015NewLine            <RowDefinition Height="30" />Di2015NewLine            <RowDefinition Height="65" />Di2015NewLine            <RowDefinition Height="30" />Di2015NewLine            <RowDefinition Height="65" />Di2015NewLine            <RowDefinition Height="30" />Di2015NewLine            <RowDefinition Height="65" />Di2015NewLine            <RowDefinition Height="30" />Di2015NewLine            <RowDefinition Height="65" />Di2015NewLine            <RowDefinition Height="30" />Di2015NewLine            <RowDefinition Height="65" />Di2015NewLine            <RowDefinition Height="65" />Di2015NewLine            <RowDefinition Height="30" />Di2015NewLine            <RowDefinition Height="*"/>Di2015NewLine        </Grid.RowDefinitions>Di2015NewLine    </Grid>Di2015NewLine</ScrollViewer>Di2015NewLine
21057238Di2015UniqueSeparator<ScrollViewer>Di2015NewLine    <Grid>Di2015NewLine        <Grid.RowDefinitions>Di2015NewLine            <RowDefinition/>Di2015NewLine            <RowDefinition/>Di2015NewLine            <RowDefinition/>Di2015NewLine        </Grid.RowDefinitions>Di2015NewLineDi2015NewLine        <TextBlock Text="1" Grid.Row="0" FontSize="400"/>Di2015NewLine        <TextBlock Text="2" Grid.Row="1" FontSize="400"/>Di2015NewLine        <TextBlock Text="3" Grid.Row="2" FontSize="400"/>Di2015NewLine    </Grid>Di2015NewLine</ScrollViewer>Di2015NewLine
21057238Di2015UniqueSeparator<Grid>Di2015NewLine    <Grid.RowDefinitions>Di2015NewLine        <RowDefinition/>Di2015NewLine        <RowDefinition/>Di2015NewLine    </Grid.RowDefinitions>Di2015NewLineDi2015NewLine    <ScrollViewer Grid.Row="0" VerticalAlignment="Top">Di2015NewLine        <Grid>Di2015NewLine            <Grid.RowDefinitions>Di2015NewLine                <RowDefinition/>Di2015NewLine                <RowDefinition/>Di2015NewLine                <RowDefinition/>Di2015NewLine            </Grid.RowDefinitions>Di2015NewLineDi2015NewLine            <TextBlock Text="1" Grid.Row="0" FontSize="400"/>Di2015NewLine            <TextBlock Text="2" Grid.Row="1" FontSize="400"/>Di2015NewLine            <TextBlock Text="3" Grid.Row="2" FontSize="400"/>Di2015NewLine       </Grid>Di2015NewLine    </ScrollViewer>Di2015NewLineDi2015NewLine    <Grid Grid.Row="1">Di2015NewLine        <TextBlock Di2015NewLine            Text="outside of ScrollView control"Di2015NewLine            Foreground="Red" FontSize="50"Di2015NewLine            VerticalAlignment="Center" Di2015NewLine            HorizontalAlignment="Center"/>Di2015NewLine    </Grid>Di2015NewLine</Grid>Di2015NewLine
21057364Di2015UniqueSeparatorwater
21057364Di2015UniqueSeparator<zwr:Location>
21057364Di2015UniqueSeparatorwater_language = water.Element(zwr + "Example").Attribute(zwr + "language").ValueDi2015NewLine
21057364Di2015UniqueSeparatorLocation
21057364Di2015UniqueSeparatorExample
21057364Di2015UniqueSeparatorlanguage
21057485Di2015UniqueSeparatorif (userValue == "1")Di2015NewLine   WriteLine ("You won a new car!");Di2015NewLine   ReadLine ();Di2015NewLine
21057485Di2015UniqueSeparatorif (userValue == "1")Di2015NewLine{Di2015NewLine    WriteLine ("You won a new car!");Di2015NewLine    ReadLine ();Di2015NewLine}Di2015NewLine
21057608Di2015UniqueSeparatorGet
21057608Di2015UniqueSeparatorController
21057608Di2015UniqueSeparatorSubject
21057608Di2015UniqueSeparatorList<Subject>
21057608Di2015UniqueSeparatorpublic List<Subject> Get(int id)Di2015NewLine{Di2015NewLine    IQueryable<Subject> query;Di2015NewLine    return query = from Subjects in db.SubjectContext.Where(v => v.CreatedBy == id).ToList();Di2015NewLine}Di2015NewLine
21057608Di2015UniqueSeparatorid
21057608Di2015UniqueSeparatorcreatedById
21057608Di2015UniqueSeparatorid
21057608Di2015UniqueSeparatorSubjects
21057608Di2015UniqueSeparatorSubject
21057608Di2015UniqueSeparatorGet
21057608Di2015UniqueSeparatorget
21057608Di2015UniqueSeparatorList<Subject>
21057608Di2015UniqueSeparatorpublic List<Subject> Get(int id)Di2015NewLine{Di2015NewLine    using(var context = new YourDataContext())Di2015NewLine    {Di2015NewLine        var queryResult = (from Subjects in db.SubjectContext.Where(v => v.CreatedBy == id)).ToList();Di2015NewLine        return queryResult;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21057608Di2015UniqueSeparatorpublic List<Subject> Get(int id)Di2015NewLine{Di2015NewLine    using(var context = new YourDataContext())Di2015NewLine    {Di2015NewLine        return context.Subjects.Where(v => v.CreatedBy == id)).ToList();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21057889Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    MultiView1.DataBind();Di2015NewLine}Di2015NewLineDi2015NewLinepublic int test()Di2015NewLine{Di2015NewLine    return 0;Di2015NewLine}Di2015NewLine
21057904Di2015UniqueSeparatorWordprocessingDocument _TempDoc = WordprocessingDocument.Open(Server.MapPath("~/") + filename, true);Di2015NewLine
21057904Di2015UniqueSeparatorXDocument xdoc = XDocument.Load(Server.MapPath("~/") + filename);Di2015NewLine
21057904Di2015UniqueSeparatorXDocument
21057904Di2015UniqueSeparatorWordProcessingDocument.Open()
21057904Di2015UniqueSeparatorXDocument
21057904Di2015UniqueSeparatorXDocument
21057904Di2015UniqueSeparatorWordProcessingDocument
21057969Di2015UniqueSeparator    public void StreamFromUser()Di2015NewLine    {Di2015NewLine        var block = new AutoResetEvent(false);Di2015NewLineDi2015NewLine        var service = GetAuthenticatedService();Di2015NewLineDi2015NewLine        service.StreamUser((streamEvent, response) =>Di2015NewLine        {Di2015NewLine            if (streamEvent is TwitterUserStreamEnd)Di2015NewLine            {Di2015NewLine                block.Set();Di2015NewLine            }Di2015NewLineDi2015NewLine            if (response.StatusCode == 0)Di2015NewLine            {Di2015NewLine                if (streamEvent is TwitterUserStreamFriends)Di2015NewLine                {Di2015NewLine                    var friends = (TwitterUserStreamFriends)streamEvent;Di2015NewLine                }Di2015NewLineDi2015NewLine                if (streamEvent is TwitterUserStreamEvent)Di2015NewLine                {Di2015NewLine                    var @event = (TwitterUserStreamEvent)streamEvent;Di2015NewLine                }Di2015NewLineDi2015NewLine                if (streamEvent is TwitterUserStreamStatus)Di2015NewLine                {Di2015NewLine                    var tweet = ((TwitterUserStreamStatus)streamEvent).Status;Di2015NewLine                }Di2015NewLineDi2015NewLine                if (streamEvent is TwitterUserStreamDirectMessage)Di2015NewLine                {Di2015NewLine                    var dm = ((TwitterUserStreamDirectMessage)streamEvent).DirectMessage;Di2015NewLine                }Di2015NewLineDi2015NewLine                if (streamEvent is TwitterUserStreamDeleteStatus)Di2015NewLine                {Di2015NewLine                    var deleted = (TwitterUserStreamDeleteStatus)streamEvent;Di2015NewLine                }Di2015NewLineDi2015NewLine                if (streamEvent is TwitterUserStreamDeleteDirectMessage)Di2015NewLine                {Di2015NewLine                    var deleted = (TwitterUserStreamDeleteDirectMessage)streamEvent;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                Assert.Ignore("Stream responsed with status code: {0}", response.StatusCode);Di2015NewLine            }Di2015NewLine        });Di2015NewLineDi2015NewLine        block.WaitOne();Di2015NewLine        service.CancelStreaming();Di2015NewLine    }Di2015NewLine
21058001Di2015UniqueSeparatorstring valueX = "assdf";Di2015NewLinestring valueY = "assdf";Di2015NewLineDi2015NewLineif (valueX.Length == valueY.Length)Di2015NewLine{Di2015NewLine    Console.WriteLine("Ok, Array is same lenght ... lets check the content");Di2015NewLineDi2015NewLine    for (int i = 0; i < valueX.Length; i++)Di2015NewLine    {Di2015NewLine        if (valueX[i] != valueY[i])Di2015NewLine        {Di2015NewLine            Console.WriteLine("Not the same array!");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    Console.WriteLine("Array is not equal in lenght");Di2015NewLine}Di2015NewLine
21058165Di2015UniqueSeparatorwhile (!Console.KeyAvailable)Di2015NewLine{Di2015NewLine    WriteBlinkingText(blinkExit, 500, true);Di2015NewLine    WriteBlinkingText(blinkExit, 500, false);Di2015NewLine}Di2015NewLine
21058487Di2015UniqueSeparatorvar tag = db.Tags.SingleOrDefault(t => t.id == id);Di2015NewLineDi2015NewLineif (tag == null) Di2015NewLine{Di2015NewLine    return Request.CreateResponse(HttpStatusCode.NotFound);Di2015NewLine}Di2015NewLineDi2015NewLineif (tag.Pages.Any()) Di2015NewLine{Di2015NewLine    return Request.CreateResponse(Di2015NewLine        HttpStatusCode.BadRequest, Di2015NewLine        "A tag must not be assigned to any page before you delete it"Di2015NewLine    );Di2015NewLine}Di2015NewLineDi2015NewLinedb.Tags.Remove(tag);Di2015NewLinedb.SaveChanges();Di2015NewLineDi2015NewLinereturn Request.CreateResponse(HttpStatusCode.OK, tag);Di2015NewLine
21058591Di2015UniqueSeparatorvar path = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\CommandStore\\shell\\Next";Di2015NewLineMicrosoft.Win32.Registry.LocalMachine.CreateSubKey(path, true); // True makes it writeableDi2015NewLineMicrosoft.Win32.Registry.LocalMachine.OpenSubKey(path).SetValue("@", "Reset", Microsoft.Win32.RegistryValueKind.String);Di2015NewLine
21059109Di2015UniqueSeparatorRelation
21059109Di2015UniqueSeparatorRelation
21059109Di2015UniqueSeparatorpublic class RelationList: List<Relation<MyEntity2, MyEntity2>>Di2015NewLine{Di2015NewLine}Di2015NewLine
21059109Di2015UniqueSeparatorpublic class RelationList<T1, T2> : List<Relation<T1, T2>> Di2015NewLine        where T1: EntityDi2015NewLine        where T2: EntityDi2015NewLine{Di2015NewLine}Di2015NewLine
21059109Di2015UniqueSeparatorRelationList
21059109Di2015UniqueSeparatorRelation<T1, T2>
21059109Di2015UniqueSeparatorT1
21059109Di2015UniqueSeparatorT2
21059109Di2015UniqueSeparatorpublic interface IRelationDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Relation<T1, T2> : IRelationDi2015NewLine    where T1: Entity where T2: EntityDi2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic class RelationList : List<IRelation>Di2015NewLine{Di2015NewLine}Di2015NewLine
21059271Di2015UniqueSeparatorsealed class ToolsDi2015NewLine{Di2015NewLine    public static readonly Tools Instance = new Tools();Di2015NewLineDi2015NewLine    private UnmanagedType ut = new UnmanagedType ();Di2015NewLineDi2015NewLine    ~Tools() {Di2015NewLine      // TODO: destroy this.utDi2015NewLine    }Di2015NewLine}Di2015NewLine
21059538Di2015UniqueSeparatorIdentityDbContext<ApplicationUser>
21059886Di2015UniqueSeparatorprivate void Test(byte inputParam)Di2015NewLine{Di2015NewLine    Contract.Assert(inputParam < 3, "Invalid inputParam");Di2015NewLine    ...Di2015NewLine}Di2015NewLine
21059886Di2015UniqueSeparatorcccheck.exe
21060039Di2015UniqueSeparatornull
21060039Di2015UniqueSeparatorUploadImageControl1.BinaryData = Di2015NewLine    ServiceInfoDt["SERVICE_LOGO"]!= System.DBNull.Value Di2015NewLine    ? (byte []) ServiceInfoDt["SERVICE_LOGO"]Di2015NewLine    : null;Di2015NewLine
21060541Di2015UniqueSeparatorvar doc = new XPathDocument(Application.StartupPath + "/DBConn.xml");Di2015NewLineDi2015NewLinevar navigator = doc.CreateNavigator();Di2015NewLineDi2015NewLinevar serverName = navigator.SelectSingleNode("//appsettings/servername");Di2015NewLinevar username = navigator.SelectSingleNode("//appsettings/username");Di2015NewLinevar password = navigator.SelectSingleNode("//appsettings/password");Di2015NewLinevar database = navigator.SelectSingleNode("//appsettings/database");Di2015NewLineDi2015NewLineusing (SqlConnection sqlConnection = new SqlConnection(@"Data Source=" + serverName + ";Initial Catalog=" + database + ";User Id=" + username + ";Password=" + password + ";MultipleActiveResultSets = True"))Di2015NewLine{Di2015NewLineSqlCommand cmd = new SqlCommand("use TelecomNames SELECT xName FROM dbo.Character", connection);Di2015NewLineconnection.Open();Di2015NewLinecmd.ExecuteNonQuery();Di2015NewLineSqlDataReader reader = cmd.ExecuteReader();Di2015NewLineAutoCompleteStringCollection MyCollection = new AutoCompleteStringCollection();Di2015NewLinewhile (reader.Read())Di2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLineconnection.Close();Di2015NewLineDi2015NewLine}Di2015NewLine
21060703Di2015UniqueSeparatorList<Polygon>
21060703Di2015UniqueSeparatorPolygon
21060703Di2015UniqueSeparator...Di2015NewLinepublic List<Polygon> polygonList = new List<Polygon>();Di2015NewLinepublic List<Point2D> vertexPoints = new List<Point2D>();Di2015NewLine
21060703Di2015UniqueSeparatorPolygon
21060703Di2015UniqueSeparatorpublic static List<Polygon> polygonList = new List<Polygon>();Di2015NewLinepublic static List<Point2D> vertexPoints = new List<Point2D>();Di2015NewLine
21060857Di2015UniqueSeparator <asp:RegularExpressionValidator ID="RegularExpressionValidator1" runat="server"Di2015NewLine            ControlToValidate="TextBox2" Di2015NewLine            ErrorMessage="Password à¸•à¹‰à¸­à¸‡à¸¡à¸µà¸„à¸§à¸²à¸¡à¸¢à¸²à¸§à¸•à¸±à¹‰à¸‡à¹?à¸•à¹ˆ 4-13 à¸•à¸±à¸§à¸­à¸±à¸?à¸©à¸£" ForeColor="Red" Di2015NewLine            ValidationExpression="^.{4,13}$" ValidationGroup="Group1" EnableClientScript="false">*</asp:RegularExpressionValidator>Di2015NewLine
21060968Di2015UniqueSeparatorMasterItem
21060968Di2015UniqueSeparator__Base template
21060968Di2015UniqueSeparator__Base template
21060968Di2015UniqueSeparatorvar baseTemplates = GetAllTemplates.Children;Di2015NewLinevar baseTemplateIds = baseTemplates.Select(item => item.ID.ToString());Di2015NewLinevar fieldValue = String.Join("|",baseTemplateIds);Di2015NewLineDi2015NewLineusing (new Sitecore.SecurityModel.SecurityDisabler())Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        MasterItem.Editing.BeginEdit();Di2015NewLine        MasterItem["__Base template"] = fieldValue;Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {   Di2015NewLine        MasterItem.Editing.EndEdit();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21061004Di2015UniqueSeparatorself.MessageLog = "TEST VALUE"Di2015NewLineprint self.MessageLogDi2015NewLine
21061089Di2015UniqueSeparatorIdleTime = System.Environment.TickCount - LastInput.dwTime;Di2015NewLineint hours = IdleTime / 3600000;Di2015NewLineint minutes = IdleTime / 60000 - hour * 60;Di2015NewLineint seconds = IdleTime / 1000 - min * 60;Di2015NewLine
21061089Di2015UniqueSeparatorIdleTime
21061167Di2015UniqueSeparatorXmlWriter
21061167Di2015UniqueSeparatorXmlDocument
21061167Di2015UniqueSeparatorXmlDocument
21061167Di2015UniqueSeparatorXmlWriter
21061167Di2015UniqueSeparatorXmlWriter
21061167Di2015UniqueSeparatorusing(XmlWriter writer = XmlWriter.Create(fileName))Di2015NewLine{Di2015NewLine   writer.WriteStartDocument();Di2015NewLine   writer.WriteStartElement("Products");Di2015NewLineDi2015NewLine   foreach (var pv in pvs)Di2015NewLine   {Di2015NewLine       writer.WriteStartElement("Product");Di2015NewLine       writer.WriteAttributeString("SKU", pv.Sku);Di2015NewLine       writer.WriteElementString("Name", pv.Product.Name);           Di2015NewLine       // ...Di2015NewLine       writer.WriteEndElement();Di2015NewLine   }Di2015NewLineDi2015NewLine   writer.WriteEndElement();Di2015NewLine   writer.WriteEndDocument();Di2015NewLine}Di2015NewLine
21061167Di2015UniqueSeparatormrpstring
21061167Di2015UniqueSeparatordecimal oldPrice = Math.Round(pv.OldPrice, 2);Di2015NewLinevar SKU_MRP = _barcodeService.GetMRPsBySku(pv.Sku);Di2015NewLinevar newPrices = SKU_MRP.AsEnumerable()Di2015NewLine                       .Select(s => Math.Round(s.MRP, 2))Di2015NewLine                       .Where(mrp => mrp != oldPrice); Di2015NewLineDi2015NewLinemrpstring = String.Join(",", newPrices);Di2015NewLine
21061167Di2015UniqueSeparatordecimals
21061167Di2015UniqueSeparatormrpstring
21061239Di2015UniqueSeparatorpublic Form1()Di2015NewLine{Di2015NewLine   InitializeComponent();Di2015NewLine   Load += Form1_Shown;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Form1_Shown(Object sender, EventArgs e) Di2015NewLine{Di2015NewLine   btnFacebookLogin.PerformClick(); Di2015NewLine}Di2015NewLine
21061302Di2015UniqueSeparatorenum TextTypeDi2015NewLine{ Di2015NewLine    High,Di2015NewLine    Medium,Di2015NewLine    LowDi2015NewLine}Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var html = "<font color=Red><b>Sample High Text</b></font>Sample Low Text<font color=Blue><u>Sample Medium Text</u></font>";Di2015NewLine        var rawStrings = System.Text.RegularExpressions.Regex.Split(html, "(?=<font)|(</font>)");Di2015NewLine        var nonEmptyRawStrings = rawStrings.Select(s => System.Text.RegularExpressions.Regex.Replace(s, "</font>|</u>|</b>", ""))Di2015NewLine            .Where(s => !String.IsNullOrEmpty(s))Di2015NewLine            .ToList();Di2015NewLineDi2015NewLine        const string highPrefix = "<font color=Red><b>";Di2015NewLine        const string mediumPrefix = "<font color=Blue><u>";Di2015NewLineDi2015NewLine        var typedString = nonEmptyRawStrings.Select(s => newDi2015NewLine        {Di2015NewLine            Type = s.StartsWith(highPrefix) ? TextType.High : (s.StartsWith(mediumPrefix) ? TextType.Medium : TextType.Low),Di2015NewLine            String = s.Replace(highPrefix, "").Replace(mediumPrefix, "")Di2015NewLine        }).ToList();Di2015NewLineDi2015NewLine        typedString.ForEach(s => Console.WriteLine("Type: {0}\\tString: {1}", s.Type, s.String));Di2015NewLine    }Di2015NewLine}Di2015NewLine
21061317Di2015UniqueSeparatorcellValue
21061317Di2015UniqueSeparator0,5833333333
21061317Di2015UniqueSeparator0.5833333
21061317Di2015UniqueSeparator58333333333
21061317Di2015UniqueSeparator'.'
21061317Di2015UniqueSeparator12:00
21061317Di2015UniqueSeparator06:00
21061317Di2015UniqueSeparator0,25
21061317Di2015UniqueSeparator25
21061442Di2015UniqueSeparator<asp:RegularExpressionValidator ID="ValidName" runat="server" ControlToValidate="Name" Display="Dynamic" ValidationGroup="Group1" ValidationExpression="^[^0-9]+$">syntax error...</asp:RegularExpressionValidator>Di2015NewLine
21061492Di2015UniqueSeparatorString query = "select * from table where RecordId in ({0});";Di2015NewLineString formatted = String.Format(query, String.Join(",", list.ToArray()));Di2015NewLine
21061492Di2015UniqueSeparatorIEnumerable<TableRow> query =Di2015NewLine  from t in db.TableDi2015NewLine  where RecordList.Any(r => t.RecordId == r)Di2015NewLine  select t;Di2015NewLine
21061492Di2015UniqueSeparatorIN
21061553Di2015UniqueSeparatorBar
21061553Di2015UniqueSeparatorFoo
21061553Di2015UniqueSeparatornamespace LibraryDi2015NewLine{Di2015NewLine    public class BarDi2015NewLine    {Di2015NewLine         // whatever insideDi2015NewLine    }Di2015NewLineDi2015NewLine    public class FooDi2015NewLine    {    Di2015NewLine         public Bar BarMember { get; private set; }Di2015NewLineDi2015NewLine         public Foo()Di2015NewLine         {Di2015NewLine             BarMember = new Bar();    Di2015NewLine         }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine namespace Project1Di2015NewLine {Di2015NewLine     class ProgramDi2015NewLine     {Di2015NewLine         static void Main(string[] args)Di2015NewLine         {Di2015NewLine             Foo foo = new Foo();Di2015NewLine             // foo.BarMember is accessible hereDi2015NewLine         }Di2015NewLine     }Di2015NewLine }Di2015NewLine
21061553Di2015UniqueSeparatorBar
21061553Di2015UniqueSeparatorFoo
21061553Di2015UniqueSeparatorBar
21061553Di2015UniqueSeparatorLibrary
21061553Di2015UniqueSeparatorpublic
21061614Di2015UniqueSeparator@inherits MyWebViewPage<dynamic>Di2015NewLine
21061614Di2015UniqueSeparator@model dynamicDi2015NewLine
21061614Di2015UniqueSeparator@inherits System.Web.Mvc.WebViewPage<W2G.Models.EmailModel>Di2015NewLine
21061790Di2015UniqueSeparatorSomeMethod
21061790Di2015UniqueSeparatorCancellationToken
21061790Di2015UniqueSeparatorOperationCanceledException
21061865Di2015UniqueSeparatorpigLatin
21061865Di2015UniqueSeparator List<string> plWords = new List<string>();         Di2015NewLine // translate each word into pig latinDi2015NewLine foreach (string word in transWord)Di2015NewLine {Di2015NewLine         // check for empty TextBoxDi2015NewLine         tryDi2015NewLine         {Di2015NewLine             let1 = word[0];Di2015NewLine             restLet = word.Substring(1, word.Length - 1);Di2015NewLineDi2015NewLine             if (!vokal.Contains(let1))Di2015NewLine             {Di2015NewLine                 pigLatin = restLet + let1 + "ay";Di2015NewLine             }Di2015NewLine             elseDi2015NewLine             {Di2015NewLine                 pigLatin = word + "way";Di2015NewLine             }Di2015NewLineDi2015NewLine             plWords.Add(pigLatin);Di2015NewLine         }Di2015NewLine         catch (System.ArgumentOutOfRangeException)Di2015NewLine         {Di2015NewLine             MessageBox.Show("Du mÃ¥ste skriva in ett engelskt ord", "PigLatin",Di2015NewLine             MessageBoxButtons.OK, MessageBoxIcon.Error);Di2015NewLine         }Di2015NewLine }Di2015NewLineDi2015NewLine engWord.Clear();    Di2015NewLine latinInput.Text = string.Join(" ", plWords.ToArray());Di2015NewLine
21061865Di2015UniqueSeparatorprivate static string MakePigLatin(string word)Di2015NewLine{Di2015NewLine    const string vowels = "AEIOUaeiou";Di2015NewLineDi2015NewLine    char let1 = word[0];Di2015NewLine    string restLet = word.Substring(1, word.Length - 1);Di2015NewLineDi2015NewLine    return vowels.Contains(let1) ? word + "way" : restLet + let1 + "ay";Di2015NewLine}Di2015NewLineDi2015NewLineprivate void btnTrans_Click( object sender, EventArgs e )Di2015NewLine{Di2015NewLine     var plWords = engWord.TextDi2015NewLine                          .Split(new[]{' '}, StringSplitOptions.RemoveEmptyEntries)Di2015NewLine                          .Select(MakePigLatin);Di2015NewLineDi2015NewLine     latinInput.Text = string.Join(" ", plWords);Di2015NewLine     engWord.Clear();    Di2015NewLine}Di2015NewLine
21062161Di2015UniqueSeparatorobject
21062161Di2015UniqueSeparatorobject
21062161Di2015UniqueSeparatorprivate readonly object fLockReadQuests = new object();Di2015NewLine
21062272Di2015UniqueSeparatorList<string>
21062272Di2015UniqueSeparatorRemoveAll
21062272Di2015UniqueSeparatorMyList.RemoveAll(s => s.Any(c => !Char.IsLetter(c)));Di2015NewLine
21062542Di2015UniqueSeparator- (IBAction)buttonPressed {Di2015NewLine    count++;Di2015NewLine    scoreLabel.text = [NSString stringWithFormat:@"%i", count];Di2015NewLine}Di2015NewLine- (IBAction)resetButton {Di2015NewLine    count = 0; //Resets the countDi2015NewLine    scoreLabel.text = [NSString stringWithFormat:@"%i", count];;Di2015NewLineDi2015NewLine}Di2015NewLine
21062643Di2015UniqueSeparatorDateTime.Ticks
21062643Di2015UniqueSeparatorlong ticks = DateTime.Today.Ticks;Di2015NewLineDi2015NewLine// Later in the code when you need a DateTime againDi2015NewLineDateTime dateTime = new DateTime(ticks);Di2015NewLine
21062643Di2015UniqueSeparatorDateTime.UtcNow
21062643Di2015UniqueSeparatorDateTime.Today
21062643Di2015UniqueSeparatorint
21062643Di2015UniqueSeparatorlong
21062822Di2015UniqueSeparatorDataAccess.BreakAwayContext
21062885Di2015UniqueSeparator public Int JobPosition;Di2015NewLine
21062885Di2015UniqueSeparatorbtnLogin_Click
21062885Di2015UniqueSeparator  private void btnLogin_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            //retrieve connection information info from App.configDi2015NewLine            string strConnectionString = ConfigurationManager.ConnectionStrings["sacpConnection"].ConnectionString;Di2015NewLine            //STEP 1: Create connectionDi2015NewLine            SqlConnection myConnect = new SqlConnection(strConnectionString);Di2015NewLine            //STEP 2: Create commandDi2015NewLine            string strCommandtext = "SELECT dUsername, dPassword from DOCTOR";Di2015NewLine            // Add a WHERE Clause to SQL statementDi2015NewLine            strCommandtext += "   WHERE dUsername=@dname AND dPassword=@dpwd;";Di2015NewLine            strCommandtext += "SELECT nUsername, nPassword from NURSE WHERE nUsername=@nname AND nPassword=@npwd;";Di2015NewLine            SqlCommand cmd = new SqlCommand(strCommandtext, myConnect);Di2015NewLine            cmd.Parameters.AddWithValue("@dname", textUsername.Text);Di2015NewLine            cmd.Parameters.AddWithValue("@dpwd", txtPassword.Text);Di2015NewLine            cmd.Parameters.AddWithValue("@nname", textUsername.Text);Di2015NewLine            cmd.Parameters.AddWithValue("@npwd", txtPassword.Text);Di2015NewLineDi2015NewLineDi2015NewLine            tryDi2015NewLine            {Di2015NewLine                // STEP 3: open connection and retrieve data by calling ExecuteReaderDi2015NewLine                myConnect.Open();Di2015NewLine                // STEP 4: Access DataDi2015NewLine                SqlDataReader reader = cmd.ExecuteReader();Di2015NewLineDi2015NewLineDi2015NewLine                while (reader.Read()) //For DoctorDi2015NewLine                {Di2015NewLine                    if (MessageBox.Show("Login Successful") == DialogResult.OK)Di2015NewLine                    {Di2015NewLine                        JobPosition = 1; //DoctorDi2015NewLine                        page_two form = new page_two(JobPosition);Di2015NewLine                        form.Show();Di2015NewLine                        return;Di2015NewLine                    }                                     Di2015NewLine                } Di2015NewLine                reader.NextResult();Di2015NewLine                while (reader.Read()) //For NurseDi2015NewLine                {Di2015NewLine                    if (MessageBox.Show("Login Successful") == DialogResult.OK)Di2015NewLine                    {Di2015NewLineDi2015NewLine                        JobPosition = 2; //NurseDi2015NewLine                        page_two form = new page_two(JobPosition);Di2015NewLine                        form.Show();Di2015NewLine                        return;Di2015NewLine                    }Di2015NewLine                }Di2015NewLineDi2015NewLine                //STEP 5: close connectionDi2015NewLine                reader.Close();Di2015NewLine                MessageBox.Show("Invalid username or password");Di2015NewLine            }Di2015NewLine            catch (SqlException ex)Di2015NewLine            {Di2015NewLineDi2015NewLine            }Di2015NewLine            finallyDi2015NewLine            {Di2015NewLine                //STEP 5: close connectionDi2015NewLine                myConnect.Close();Di2015NewLine            }Di2015NewLine        }    Di2015NewLine
21062885Di2015UniqueSeparatorPage_two
21062885Di2015UniqueSeparator using System;Di2015NewLine using System.Collections.Generic;Di2015NewLine using System.ComponentModel;Di2015NewLine using System.Data;Di2015NewLine using System.Drawing;Di2015NewLine using System.Linq;Di2015NewLine using System.Text;Di2015NewLine using System.Windows.Forms;Di2015NewLineDi2015NewLinenamespace GRP_02_03_SACPDi2015NewLine{Di2015NewLinepublic partial class page_two : FormDi2015NewLine{Di2015NewLine    private Int JopPosition;Di2015NewLine    public page_two()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    public page_two(Int _Position)Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        JopPosition = _Position;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void btnDoctor1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    private void btnDoctor2_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    private void btnNurse1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (JopPosition == 1)Di2015NewLine        {Di2015NewLine           MessageBox.Show("access denied");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void btnNurse2_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
21063101Di2015UniqueSeparatorprivate void AppendValue(string valueToAppend)Di2015NewLine{Di2015NewLine    if(remainTxt.BackColor == Color.FromArgb(245, 244, 162))Di2015NewLine    {Di2015NewLine        remainTxt.AppendText(valueToAppend);Di2015NewLine    }Di2015NewLine    else if (totalTxt.BackColor == Color.FromArgb(245, 244, 162))Di2015NewLine    {Di2015NewLine        totalTxt.AppendText(valueToAppend);Di2015NewLine    }Di2015NewLine    else if (paidTxt.BackColor == Color.FromArgb(245, 244, 162))Di2015NewLine    {Di2015NewLine        paidTxt.AppendText(valueToAppend);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21063101Di2015UniqueSeparatorprivate void btn1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    AppendValue("1");Di2015NewLine}Di2015NewLine
21063101Di2015UniqueSeparatorbtnback_Click
21063101Di2015UniqueSeparatorAppendValue
21063211Di2015UniqueSeparatorInnerDbContext.Set<T>();
21063211Di2015UniqueSeparatorDbContext.Set<T>
21063211Di2015UniqueSeparatorvirtual
21063211Di2015UniqueSeparatorBaseRepository
21063211Di2015UniqueSeparatorDbContext
21063211Di2015UniqueSeparatorDbSet<T>
21063211Di2015UniqueSeparatorpublic BaseRepository(DbSet<T> dbSet)Di2015NewLine{Di2015NewLine    InnerDbSet = dbSet;Di2015NewLine}Di2015NewLine
21063211Di2015UniqueSeparatorDbContext
21063211Di2015UniqueSeparatorpublic interface IDbContextDi2015NewLine{Di2015NewLine    DbSet<T> Set<T>() where T : class;Di2015NewLine}Di2015NewLineDi2015NewLinepublic class TimeSketchContext : DbContext, IDbContextDi2015NewLine{Di2015NewLine    public virtual DbSet<EmployeeSkill> EmployeeSkill { get; set; }Di2015NewLine}Di2015NewLine
21063211Di2015UniqueSeparatorIDbContext
21063211Di2015UniqueSeparatorBaseRepository
21063211Di2015UniqueSeparatorpublic class BaseRepository<T> : IRepositoryBase<T> where T : class, IEntity, new()Di2015NewLine{Di2015NewLine    protected readonly IDbContext InnerDbContext;Di2015NewLine    protected DbSet<T> InnerDbSet;Di2015NewLineDi2015NewLine    public BaseRepository(IDbContext innerDbContext)Di2015NewLine    {Di2015NewLine        InnerDbContext = innerDbContext;Di2015NewLine        InnerDbSet = InnerDbContext.Set<T>();Di2015NewLine    }Di2015NewLineDi2015NewLine    public virtual Task<T> FindAsync(long id)Di2015NewLine    {Di2015NewLine        return InnerDbSet.FirstOrDefaultAsync(x => x.Id == id);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21063211Di2015UniqueSeparatorvar mockContext = new Mock<IDbContext>();Di2015NewLinemockContext.Setup(c => c.Set<EmployeeSkill>()).Returns(mockSet.Object);Di2015NewLine
21063233Di2015UniqueSeparatorpublic partial class MyPictureBox : PictureBoxDi2015NewLine
21063233Di2015UniqueSeparatorMyPictureBox pictureBox1Control = new MyPictureBox();Di2015NewLinepictureBox1Control.Image...Di2015NewLine
21063607Di2015UniqueSeparator    string playerStats = "D:\\\\playerStats.csv";Di2015NewLine    string lineToDelete = listBox1.SelectedItem.ToString();Di2015NewLineDi2015NewLine    if (File.Exists(playerStats))Di2015NewLine    {Di2015NewLine        string[] lines = File.ReadAllLines(playerStats);Di2015NewLineDi2015NewLine        using (StreamWriter sw = new StreamWriter(playerStats, false))Di2015NewLine        {Di2015NewLine            foreach (var line in lines)Di2015NewLine            {Di2015NewLine                string[] parts = line.Split(',');Di2015NewLine                if (parts[0] != lineToDelete)Di2015NewLine                {Di2015NewLine                    sw.WriteLine(line);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    MessageBox.Show("Player: " + lineToDelete + "Has been deleted");Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        MessageBox.Show("playerStats.csv does not exist, Check Filepath");Di2015NewLine    }Di2015NewLine
21063662Di2015UniqueSeparator@Url.Content("~/Content/" + item.Pdf)Di2015NewLine
21063756Di2015UniqueSeparatorusing (var dlg = new frmLogin()) {Di2015NewLine   if (dlg.ShowDialog() != DialogResult.OK) return;Di2015NewLine}Di2015NewLineApplication.Run(new frmMain());Di2015NewLine
21063980Di2015UniqueSeparator    public class FooModelDi2015NewLine    {Di2015NewLine        public List<Category> Categories { get; set; }Di2015NewLine        public List<SubCategory> SubCategories { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class CategoryDi2015NewLine    {Di2015NewLine        public int Id { get; set; }Di2015NewLine        public string Description { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class SubCategoryDi2015NewLine    {Di2015NewLine        public int Id { get; set; }Di2015NewLine        public string Description { get; set; }Di2015NewLine        public int CategoryId { get; set; }Di2015NewLine    }Di2015NewLine
21063980Di2015UniqueSeparator    public ActionResult Index()Di2015NewLine    {Di2015NewLine        var model = new FooModel();Di2015NewLine        var categories = new List<Category>();Di2015NewLine        var subCategories = new List<SubCategory>();Di2015NewLineDi2015NewLine        categories.Add(new Category { Id = 1, Description = "Cat 1" });Di2015NewLine        categories.Add(new Category { Id = 2, Description = "Cat 2" });Di2015NewLine        subCategories.Add(new SubCategory { Id = 1, Description = "Sub-Cat 1", CategoryId = 1 });Di2015NewLine        subCategories.Add(new SubCategory { Id = 2, Description = "Sub-Cat 2", CategoryId = 2 });Di2015NewLineDi2015NewLine        model.Categories = categories;Di2015NewLine        model.SubCategories = subCategories.Where(s => s.Id == 1).ToList();Di2015NewLineDi2015NewLineDi2015NewLine        return View(model);Di2015NewLine    }Di2015NewLine
21063980Di2015UniqueSeparatorFooModel
21063980Di2015UniqueSeparatorIndex
21064066Di2015UniqueSeparatorT
21064066Di2015UniqueSeparator_t
21064066Di2015UniqueSeparator6
21064066Di2015UniqueSeparator_6
21064066Di2015UniqueSeparator//using System.Text.RegularExpressionDi2015NewLineDi2015NewLine//your inputDi2015NewLinestring input = "MyOtherTClass1Name";Di2015NewLineDi2015NewLine//the regexDi2015NewLinestring result = Regex.Replace(Di2015NewLine    input, Di2015NewLine    "((?<!^)[A-Z0-9])", //the regex, see below for explanationDi2015NewLine    delegate(Match m) { return "_" + m.ToString().ToLower(); }, //replace functionDi2015NewLine    RegexOptions.NoneDi2015NewLine);Di2015NewLineresult = result.ToLower(); //one more time ToLower(); for the first character of the inputDi2015NewLineDi2015NewLineConsole.WriteLine(result);Di2015NewLine
21064066Di2015UniqueSeparator(           #start of capturing groupDi2015NewLine  (?<!      #negative lookbehindDi2015NewLine     ^      #beginning of the stringDi2015NewLine  )         #end of lookbehindDi2015NewLine  [A-Z0-9]  #one of A-Z or 0-9Di2015NewLine)           #end of capturing groupDi2015NewLine
21064174Di2015UniqueSeparatorGot: foo0Di2015NewLineGot: foo1Di2015NewLineGot: foo3Di2015NewLineGot: foo5Di2015NewLineGot: foo6Di2015NewLineGot: foo8Di2015NewLineGot: foo9Di2015NewLineGot: foo7Di2015NewLineGot: foo4Di2015NewLineGot: foo2Di2015NewLinequeue length: 0Di2015NewLine
21064174Di2015UniqueSeparatorredis-cli
21064174Di2015UniqueSeparatormonitor
21064174Di2015UniqueSeparatorredis 127.0.0.1:6379> monitorDi2015NewLineOKDi2015NewLine1389454168.068869 [0 127.0.0.1:4957] "INFO"Di2015NewLine1389454168.068869 [0 127.0.0.1:4957] "CONFIG" "GET" "timeout"Di2015NewLine1389454168.068869 [0 127.0.0.1:4957] "DEL" "test"Di2015NewLine1389454168.129869 [0 127.0.0.1:4958] "INFO"Di2015NewLine1389454168.129869 [0 127.0.0.1:4958] "CONFIG" "GET" "timeout"Di2015NewLine1389454168.136869 [0 127.0.0.1:4958] "BLPOP" "test" "0"Di2015NewLine1389454168.139872 [0 127.0.0.1:4959] "INFO"Di2015NewLine1389454168.139872 [0 127.0.0.1:4959] "CONFIG" "GET" "timeout"Di2015NewLine1389454168.139872 [0 127.0.0.1:4959] "LPUSH" "test" "foo0"Di2015NewLine1389454168.142869 [0 127.0.0.1:4959] "LPUSH" "test" "foo1"Di2015NewLine1389454168.142869 [0 127.0.0.1:4958] "BLPOP" "test" "0"Di2015NewLine1389454168.142869 [0 127.0.0.1:4959] "LPUSH" "test" "foo2"Di2015NewLine1389454168.143871 [0 127.0.0.1:4959] "LPUSH" "test" "foo3"Di2015NewLine1389454168.143871 [0 127.0.0.1:4958] "BLPOP" "test" "0"Di2015NewLine1389454168.143871 [0 127.0.0.1:4959] "LPUSH" "test" "foo4"Di2015NewLine1389454168.143871 [0 127.0.0.1:4959] "LPUSH" "test" "foo5"Di2015NewLine1389454168.144870 [0 127.0.0.1:4958] "BLPOP" "test" "0"Di2015NewLine1389454168.144870 [0 127.0.0.1:4959] "LPUSH" "test" "foo6"Di2015NewLine1389454168.144870 [0 127.0.0.1:4958] "BLPOP" "test" "0"Di2015NewLine1389454168.144870 [0 127.0.0.1:4959] "LPUSH" "test" "foo7"Di2015NewLine1389454168.145869 [0 127.0.0.1:4959] "LPUSH" "test" "foo8"Di2015NewLine1389454168.145869 [0 127.0.0.1:4958] "BLPOP" "test" "0"Di2015NewLine1389454168.145869 [0 127.0.0.1:4959] "LPUSH" "test" "foo9"Di2015NewLine1389454168.145869 [0 127.0.0.1:4958] "BLPOP" "test" "0"Di2015NewLine1389454168.146869 [0 127.0.0.1:4958] "BLPOP" "test" "0"Di2015NewLine1389454168.146869 [0 127.0.0.1:4958] "BLPOP" "test" "0"Di2015NewLine1389454168.147870 [0 127.0.0.1:4958] "BLPOP" "test" "0"Di2015NewLine1389454168.147870 [0 127.0.0.1:4958] "BLPOP" "test" "0"Di2015NewLine1389454168.648594 [0 127.0.0.1:4959] "LLEN" "test"Di2015NewLine
21064174Di2015UniqueSeparatorredis-cli
21064174Di2015UniqueSeparatorAddLast
21064174Di2015UniqueSeparatorGot: foo0Di2015NewLineGot: foo1Di2015NewLineGot: foo2Di2015NewLineGot: foo3Di2015NewLineGot: foo4Di2015NewLineGot: foo5Di2015NewLineGot: foo6Di2015NewLineGot: foo7Di2015NewLineGot: foo8Di2015NewLineGot: foo9Di2015NewLinequeue length: 0Di2015NewLine
21064194Di2015UniqueSeparatorObservable.Interval
21064194Di2015UniqueSeparatorSelect
21064194Di2015UniqueSeparatorpublic class WeatherDi2015NewLine{Di2015NewLine    private readonly IWeatherDataProvider _weatherDataProvider;        Di2015NewLine    private CompositeDisposable disposables = new CompositeDisposable();Di2015NewLineDi2015NewLine    public Weather(IWeatherDataProvider weatherDataProvider)Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        _weatherDataProvider = weatherDataProvider;Di2015NewLineDi2015NewLine        Loaded += (sender, args) =>Di2015NewLine        {Di2015NewLine          var weather = Observable.Interval(TimeSpan.FromMinutes(15))Di2015NewLine              .SelectMany(_ => weatherDataProvider.GetWeather().ToObservable())Di2015NewLine              .ObserveOnDispatcher()Di2015NewLine              .Subscribe(data => DataContext = data);Di2015NewLine          disposables.Add(weather);Di2015NewLine        };Di2015NewLineDi2015NewLine        Unloaded += (sender, args) => disposables.Dispose();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21064194Di2015UniqueSeparatorObserveOnDispatcher
21064217Di2015UniqueSeparator<DataGrid Name="EmployeeContentView"Di2015NewLine          Margin="10,10,10,10"Di2015NewLine          RowHeight="20"Di2015NewLine          AutoGenerateColumns="True"    Di2015NewLine          ItemsSource="{Binding}"          Di2015NewLine          Height="auto" Width="auto">Di2015NewLine    <DataGrid.Columns>Di2015NewLine        <DataGridTemplateColumn Header="Married">Di2015NewLine            <DataGridTemplateColumn.CellTemplate>Di2015NewLine                <DataTemplate>Di2015NewLine                    <Image x:Name="IMG" Source="present.png" />Di2015NewLine                    <DataTemplate.Triggers>Di2015NewLine                        <DataTrigger Binding="{Binding Path=IsPRESENT}" Value="False">Di2015NewLine                            <Setter Property="Source" Value="notpresent.png" TargetName="IMG"/>Di2015NewLine                        </DataTrigger>Di2015NewLine                    </DataTemplate.Triggers>Di2015NewLine                </DataTemplate>Di2015NewLine            </DataGridTemplateColumn.CellTemplate>Di2015NewLine        </DataGridTemplateColumn>Di2015NewLine    </DataGrid.Columns>Di2015NewLine</DataGrid>Di2015NewLine
21064217Di2015UniqueSeparatorpresent.png
21064217Di2015UniqueSeparatornotpresent.png
21064217Di2015UniqueSeparatorBuildAction
21064217Di2015UniqueSeparatorResource
21064217Di2015UniqueSeparatorIsPRESENT
21064217Di2015UniqueSeparatorINotifyPropertyChanged
21064217Di2015UniqueSeparatorpublic class Employee_Details : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    private String eid;Di2015NewLine    private String ename;Di2015NewLine    private bool ispresent;Di2015NewLineDi2015NewLineDi2015NewLine    public String eIDDi2015NewLine    {Di2015NewLine        get { return eid; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (eid == value)Di2015NewLine                return;Di2015NewLineDi2015NewLine            eid = value;Di2015NewLine            this.OnPropertyChanged("eID");Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public String eNAMEDi2015NewLine    {Di2015NewLine        get { return ename; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (ename == value)Di2015NewLine                return;Di2015NewLineDi2015NewLine            ename = value;Di2015NewLine            this.OnPropertyChanged("eNAME");Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public bool IsPRESENTDi2015NewLine    {Di2015NewLine        get { return ispresent; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (ispresent == value)Di2015NewLine                return;Di2015NewLineDi2015NewLine            ispresent = value;Di2015NewLine            this.OnPropertyChanged("IsPRESENT");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine    protected void OnPropertyChanged(string propertyName)Di2015NewLine    {Di2015NewLine        if (this.PropertyChanged != null)Di2015NewLine            this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine    }Di2015NewLine}Di2015NewLine
21064240Di2015UniqueSeparatorbool dotControl = false;Di2015NewLine
21064240Di2015UniqueSeparatorprivate void btndot_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine   if(!dotControl)Di2015NewLine    {Di2015NewLine       AppendValue(".");Di2015NewLine       dotControl = true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21064240Di2015UniqueSeparatorint count = 0;Di2015NewLine
21064240Di2015UniqueSeparatorprivate void btn1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if(dotControl && count == 0)Di2015NewLine    {Di2015NewLine       AppendValue("1");Di2015NewLine       count++;Di2015NewLine    } Di2015NewLineDi2015NewLine    else if(!dotControl) {  AppendValue("1"); }Di2015NewLineDi2015NewLine}Di2015NewLine
21064276Di2015UniqueSeparatorvar query= (from x in dbquery.Employee join y in dbquery.Department on x.Emp_id equals y.Emp_id Di2015NewLine     where x.Emp_id==id  select new {x.Emp_id, x.Emp_name,x.Emp_Address,x.Emp_Contact, y.dept_id,y.dept_name,y.salary}).ToList(); return View(query);Di2015NewLine
21064276Di2015UniqueSeparator@foreach(var item in Model)Di2015NewLine        {Di2015NewLine            <li>item.Emp_Id</li>Di2015NewLine            <li>item.Emp_Name</li>Di2015NewLine            <li>item.Emp_Address</li>Di2015NewLine             <li>item.Emp_Contact</li>Di2015NewLine            <li>item.dept_id</li>Di2015NewLine            <li>item.dept_name</li>Di2015NewLine            <li>item.salary</li>Di2015NewLine        }Di2015NewLine
21064694Di2015UniqueSeparatorBase
21064694Di2015UniqueSeparatorDerived.Dispose
21064694Di2015UniqueSeparatorpublic class DisposeMe : IDisposableDi2015NewLine{Di2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine        Console.WriteLine("I'm disposed!");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class BaseDi2015NewLine{Di2015NewLine    private readonly Object _object;Di2015NewLine    protected Object _Object { get { return _object; } }Di2015NewLineDi2015NewLine    public Base(Object obj)Di2015NewLine    {Di2015NewLine        _object = obj;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Derived : Base, IDisposableDi2015NewLine{Di2015NewLine    public Derived()Di2015NewLine        : base(new DisposeMe())Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine        (_Object as IDisposable).Dispose();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21064881Di2015UniqueSeparatorPropertyChanged
21064881Di2015UniqueSeparatorprotected void OnPropertyChanged(string propertyName)Di2015NewLine{Di2015NewLine    if (propertyName != null)Di2015NewLine        PropertyChanged(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine}Di2015NewLine
21064881Di2015UniqueSeparatorprotected void OnPropertyChanged(string propertyName)Di2015NewLine{Di2015NewLine    var handler = PropertyChanged;Di2015NewLine    if (handler != null)Di2015NewLine    {Di2015NewLine        handler(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine    }Di2015NewLine}Di2015NewLine
21064941Di2015UniqueSeparatorApplication.Options.DefaultHighlightColorIndex Di2015NewLine
21064941Di2015UniqueSeparatorfind.Replacement.Highlight = TrueDi2015NewLine
21065158Di2015UniqueSeparatorImena[count] = new TextBox();Di2015NewLine
21065158Di2015UniqueSeparatornull[0] = new TextBox();Di2015NewLine
21065158Di2015UniqueSeparator// An array to hold 10 textboxesDi2015NewLineTextBox[] Imena = new TextBox[10];Di2015NewLine
21065158Di2015UniqueSeparatorList<TextBox> Imena = new List<TextBox>();Di2015NewLineDi2015NewLineImena.Add(new TextBox);Di2015NewLine
21065158Di2015UniqueSeparatorTextBox t1 = new List<TextBox>();Di2015NewLinet1.Location = new Point(10,10);Di2015NewLineformContainerInstance.Controls.Add(t1);Di2015NewLine
21065181Di2015UniqueSeparatorPropertyChanged
21065181Di2015UniqueSeparatorActualPerson
21065181Di2015UniqueSeparatorDataContext
21065181Di2015UniqueSeparatorpublic Person ActualPersonDi2015NewLine{Di2015NewLine    get { return this.actualPerson; }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        if (this.actualPerson == value)Di2015NewLine            return;Di2015NewLineDi2015NewLine        this.actualPerson = value;Di2015NewLine        this.OnPropertyChanged("ActualPerson");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLineprotected void OnPropertyChanged(string propertyName)Di2015NewLine{Di2015NewLine    if (this.PropertyChanged != null)Di2015NewLine        this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine}Di2015NewLine
21065181Di2015UniqueSeparatorUserControl
21065181Di2015UniqueSeparatorDependencyProperty
21065181Di2015UniqueSeparatorpublic static readonly DependencyProperty ActualPersonProperty = DependencyProperty.Register(Di2015NewLine    "ActualPerson", typeof (Person), typeof (MyUserControl), new PropertyMetadata(default(Person)));Di2015NewLineDi2015NewLinepublic Person ActualPersonDi2015NewLine{Di2015NewLine    get { return (Person) GetValue(ActualPersonProperty); }Di2015NewLine    set { SetValue(ActualPersonProperty, value); }Di2015NewLine}Di2015NewLine
21065335Di2015UniqueSeparatorDataContext = this
21065335Di2015UniqueSeparatorUserControl
21065335Di2015UniqueSeparatorWCCQuizText
21065335Di2015UniqueSeparatorUserControl
21065335Di2015UniqueSeparatorUserControl
21065335Di2015UniqueSeparatorUserControl
21065335Di2015UniqueSeparator<UserControl x:Name="SomeName" ... >Di2015NewLine   ....Di2015NewLine   <TextBlock ... Text="{Binding ElementName=SomeName, Path=SelectableButtonText}"Di2015NewLine
21065335Di2015UniqueSeparatorTextBlock
21065335Di2015UniqueSeparatorMode=TwoWay
21065467Di2015UniqueSeparatorMatchMyModelFieldByStrategy
21065467Di2015UniqueSeparatorselector
21065467Di2015UniqueSeparatorenum SearchStrategyDi2015NewLine{Di2015NewLine    Contains,Di2015NewLine    StartsWith,Di2015NewLine    EndsWith,Di2015NewLine    EqualsDi2015NewLine}Di2015NewLineDi2015NewLineclass SearchItemDi2015NewLine{Di2015NewLine    public SearchStrategy SearchStrategy { get; set; }Di2015NewLine    public string Value { get; set; }Di2015NewLine}Di2015NewLine
21065467Di2015UniqueSeparatorstatic class QueryBuilderDi2015NewLine{Di2015NewLine    private static readonly Lazy<MethodInfo> toLowerMethodInfo;Di2015NewLine    private static readonly Dictionary<SearchStrategy, Lazy<MethodInfo>> searchStrategyToMethodInfoMap;Di2015NewLineDi2015NewLine    static QueryBuilder()Di2015NewLine    {Di2015NewLine        toLowerMethodInfo = new Lazy<MethodInfo>(() => typeof(string).GetMethod("ToLower", new Type[0]));Di2015NewLineDi2015NewLine        searchStrategyToMethodInfoMap = new Dictionary<SearchStrategy, Lazy<MethodInfo>>Di2015NewLine        {Di2015NewLine            { Di2015NewLine                SearchStrategy.Contains, Di2015NewLine                new Lazy<MethodInfo>(() => typeof(string).GetMethod("Contains", new[] { typeof(string) })) Di2015NewLine            },Di2015NewLine            { Di2015NewLine                SearchStrategy.StartsWith, Di2015NewLine                new Lazy<MethodInfo>(() => typeof(string).GetMethod("StartsWith", new[] { typeof(string) })) Di2015NewLine            },Di2015NewLine            { Di2015NewLine                SearchStrategy.EndsWith, Di2015NewLine                new Lazy<MethodInfo>(() => typeof(string).GetMethod("EndsWith", new[] { typeof(string) })) Di2015NewLine            },Di2015NewLine            { Di2015NewLine                SearchStrategy.Equals, Di2015NewLine                new Lazy<MethodInfo>(() => typeof(string).GetMethod("Equals", new[] { typeof(string) })) Di2015NewLine            },Di2015NewLine        };Di2015NewLine    }Di2015NewLineDi2015NewLine    public static Expression<Func<T, bool>> MatchMyModelFieldByStrategy<T>(SearchItem searchItem, Expression<Func<T, string>> selector)Di2015NewLine    {Di2015NewLine        // "doe"Di2015NewLine        var searchItemKey = searchItem.Value.ToLower();Di2015NewLine        // _.Name.ToLower()Di2015NewLine        var toLowerCallExpr = Expression.Call(selector.Body, toLowerMethodInfo.Value);Di2015NewLine        // a method we shall use for searchingDi2015NewLine        var searchMethodInfo = searchStrategyToMethodInfoMap[searchItem.SearchStrategy].Value;Di2015NewLineDi2015NewLine        // _ => _.Name.ToLower().SomeSearchMethod("doe")Di2015NewLine        return Expression.Lambda<Func<T, bool>>(Di2015NewLine            Expression.Call(toLowerCallExpr, searchMethodInfo, Expression.Constant(searchItemKey)), Di2015NewLine            selector.Parameters);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21065467Di2015UniqueSeparatorMatchMyModelFieldByStrategy
21065467Di2015UniqueSeparatorclass MyEntityDi2015NewLine{Di2015NewLine    public int Id { get; set; }Di2015NewLine    public string Name { get; set; }Di2015NewLine}Di2015NewLine
21065467Di2015UniqueSeparator    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        Console.WriteLine(QueryBuilder.MatchMyModelFieldByStrategy<MyEntity>(Di2015NewLine            new SearchItem { SearchStrategy = SearchStrategy.Contains, Value = "doe" }, _ => _.Name));Di2015NewLine        Console.WriteLine(QueryBuilder.MatchMyModelFieldByStrategy<MyEntity>(Di2015NewLine            new SearchItem { SearchStrategy = SearchStrategy.StartsWith, Value = "doe" }, _ => _.Name));Di2015NewLine        Console.WriteLine(QueryBuilder.MatchMyModelFieldByStrategy<MyEntity>(Di2015NewLine            new SearchItem { SearchStrategy = SearchStrategy.EndsWith, Value = "doe" }, _ => _.Name));Di2015NewLine        Console.WriteLine(QueryBuilder.MatchMyModelFieldByStrategy<MyEntity>(Di2015NewLine            new SearchItem { SearchStrategy = SearchStrategy.Equals, Value = "doe" }, _ => _.Name));Di2015NewLineDi2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine
21065468Di2015UniqueSeparator<%# Eval("DUREE") == DBNull.Value ? <%# Eval("DUREE").GetType().ToString() %> : "NULL" %>Di2015NewLine
21065468Di2015UniqueSeparator<%# Eval("DUREE") == DBNull.Value ? "System.DBNull" : "NULL" %>Di2015NewLine
21065468Di2015UniqueSeparatorVisible
21065468Di2015UniqueSeparatorEval
21065468Di2015UniqueSeparator<asp:SqlDataSource ID="SqlDataSource" runat="server"></asp:SqlDataSource>Di2015NewLine<asp:ListView ID="List" runat="server">Di2015NewLineDi2015NewLine    ...Di2015NewLine    <asp:Label ID="Label6" runat="server" Text='NULL' Visible='<%# Eval("DUREE") == DBNull.Value %>'></asp:Label>Di2015NewLine    <asp:Label ID="Label8" runat="server" Text='<%# Eval("DUREE").GetType() %>' Visible='<%# Eval("DUREE") != DBNull.Value %>'></asp:Label>Di2015NewLine
21065474Di2015UniqueSeparatorstring strRegex = @"x=\\d+'>\\d+<";Di2015NewLineRegex myRegex = new Regex(strRegex, RegexOptions.None);Di2015NewLinestring strTargetString = @"Some data ..... x=123'>555< ... Some Data x=5433'>4212<";Di2015NewLineDi2015NewLineforeach (Match myMatch in myRegex.Matches(strTargetString))Di2015NewLine{Di2015NewLine  if (myMatch.Success)Di2015NewLine  {Di2015NewLine    // Add your code hereDi2015NewLine  }Di2015NewLine}Di2015NewLine
21065621Di2015UniqueSeparatorvar s = "goeirjew98rut34ktljre9t30t4j3der";Di2015NewLineRegex.Replace(s, @"(\\w{3})(\\w{4})(\\w{1})", "$1_$2_$3\\n").Dump();Di2015NewLine
21065689Di2015UniqueSeparatorA: December 30th 2013 - 20131230Di2015NewLineB: December 31st 2013 - 20131231Di2015NewLineC: January 1st 2014   - 20140101Di2015NewLine
21065689Di2015UniqueSeparatorDateTime
21065689Di2015UniqueSeparatorLocalDate
21065752Di2015UniqueSeparatorInitializes a new instance of the Mutex class with a Boolean value that indicates whether the Di2015NewLinecalling thread should have initial ownership of the mutex, and a string that is the name of the Di2015NewLinemutex.Di2015NewLine
21065752Di2015UniqueSeparator// Create a new Mutex. The creating thread owns the Di2015NewLine// Mutex. Di2015NewLineprivate static Mutex mut = new Mutex(true);Di2015NewLineprivate const int numIterations = 1;Di2015NewLineprivate const int numThreads = 3;Di2015NewLineDi2015NewLinestatic void Main()Di2015NewLine{Di2015NewLine    // Create the threads that will use the protected resource. Di2015NewLine    for(int i = 0; i < numThreads; i++)Di2015NewLine    {Di2015NewLine        Thread myThread = new Thread(new ThreadStart(MyThreadProc));Di2015NewLine        myThread.Name = String.Format("Thread{0}", i + 1);Di2015NewLine        myThread.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    // Wait one second before allowing other threads to Di2015NewLine    // acquire the Mutex.Di2015NewLine    Console.WriteLine("Creating thread owns the Mutex.");Di2015NewLine    Thread.Sleep(1000);Di2015NewLineDi2015NewLine    Console.WriteLine("Creating thread releases the Mutex.\\r\\n");Di2015NewLine    mut.ReleaseMutex();Di2015NewLine}Di2015NewLineDi2015NewLineprivate static void MyThreadProc()Di2015NewLine{Di2015NewLine    for(int i = 0; i < numIterations; i++)Di2015NewLine    {Di2015NewLine        UseResource();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// This method represents a resource that must be synchronized Di2015NewLine// so that only one thread at a time can enter. Di2015NewLineprivate static void UseResource()Di2015NewLine{Di2015NewLine    // Wait until it is safe to enter.Di2015NewLine    mut.WaitOne();Di2015NewLineDi2015NewLine    Console.WriteLine("{0} has entered the protected area", Di2015NewLine        Thread.CurrentThread.Name);Di2015NewLineDi2015NewLine    // Place code to access non-reentrant resources here. Di2015NewLineDi2015NewLine    // Simulate some work.Di2015NewLine    Thread.Sleep(500);Di2015NewLineDi2015NewLine    Console.WriteLine("{0} is leaving the protected area\\r\\n", Di2015NewLine        Thread.CurrentThread.Name);Di2015NewLineDi2015NewLine    // Release the Mutex.Di2015NewLine    mut.ReleaseMutex();Di2015NewLine}Di2015NewLine
21065752Di2015UniqueSeparatorIf a thread owns a Mutex, that thread can specify the same Mutex in repeated wait-request calls Di2015NewLinewithout blocking its execution; however, it must release the Mutex as many times to release Di2015NewLineownership.Di2015NewLine
21065766Di2015UniqueSeparatorif (tb.Text.Length > 0)Di2015NewLine{Di2015NewLine   if(char.IsDigit(tb.Text[tb.Text.Length - 1]) count = 0;Di2015NewLine   else Di2015NewLine   { Di2015NewLine       dotControl = false;Di2015NewLine       count = 0;Di2015NewLine   }Di2015NewLine    tb.Text = tb.Text.Remove(tb.Text.Length - 1, 1);Di2015NewLine}Di2015NewLine
21065766Di2015UniqueSeparatorcount = 0
21065818Di2015UniqueSeparator<%# Eval("DUREE") == DBNull.Value || Eval("DATE") == DBNull.ValueDi2015NewLine    ? " - "Di2015NewLine    : Convert.ToString(Convert.ToDateTime(Eval("DATE")).AddMinutes(Convert.ToInt32(Eval("DUREE")))), "{0:HH:mm}") %>Di2015NewLine
21065818Di2015UniqueSeparatorDataBinder.Eval
21065925Di2015UniqueSeparator var userId = Convert.ToInt32(Session["userid"]);Di2015NewLine myAdd = db.ActualStocks.Single(x => x.EAN == addSoeg.Text&&x.UserId == userId);Di2015NewLine
21065925Di2015UniqueSeparatorprotected void btnAdd_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine    SSDataContext db = new SSDataContext();Di2015NewLine    ActualStock myAdd = new ActualStock();Di2015NewLine    var userId = Convert.ToInt32(Session["userid"]);Di2015NewLineDi2015NewLine    if (!db.ActualStocks.Any(u => u.EAN == addSoeg.Text&&u.UserId == userId))Di2015NewLine    {Di2015NewLine        myAdd.EAN = addSoeg.Text;           Di2015NewLine        myAdd.UserID = userId;Di2015NewLine        myAdd.Quantity = 0;Di2015NewLine        db.ActualStocks.InsertOnSubmit(myAdd);Di2015NewLine        db.SubmitChanges();Di2015NewLineDi2015NewLine    }Di2015NewLine    myAdd = db.ActualStocks.Single(x => x.EAN == addSoeg.Text&&x.UserId == userId);Di2015NewLine    myAdd.UserID = userId ;       Di2015NewLine    myAdd.Quantity = myAdd.Quantity + Convert.ToInt32(quantity.Text);Di2015NewLine    db.SubmitChanges();Di2015NewLine    Response.Redirect(Request.RawUrl);Di2015NewLine}Di2015NewLine
21065965Di2015UniqueSeparatorGetInt
21065965Di2015UniqueSeparatorint
21065965Di2015UniqueSeparatorString numDonuts = GetInt("How many donuts would you like?: ");
21065965Di2015UniqueSeparatorint numDonuts = GetInt("How many donuts would you like?: ");
21066135Di2015UniqueSeparatorIpHlpApi.dll
21066135Di2015UniqueSeparatorDictionary<IPAddress, PhysicalAddress>
21066135Di2015UniqueSeparatorIPAddress
21066135Di2015UniqueSeparatorPhysicalAddress
21066135Di2015UniqueSeparatorOutpost Firewall
21066135Di2015UniqueSeparatorpublic class IPHelperDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// MIB_IPNETROW structure returned by GetIpNetTableDi2015NewLine    /// DO NOT MODIFY THIS STRUCTURE.Di2015NewLine    /// </summary>Di2015NewLine    [StructLayout(LayoutKind.Sequential)]Di2015NewLine    struct MIB_IPNETROWDi2015NewLine    {Di2015NewLine        [MarshalAs(UnmanagedType.U4)]Di2015NewLine        public int dwIndex;Di2015NewLine        [MarshalAs(UnmanagedType.U4)]Di2015NewLine        public int dwPhysAddrLen;Di2015NewLine        [MarshalAs(UnmanagedType.U1)]Di2015NewLine        public byte mac0;Di2015NewLine        [MarshalAs(UnmanagedType.U1)]Di2015NewLine        public byte mac1;Di2015NewLine        [MarshalAs(UnmanagedType.U1)]Di2015NewLine        public byte mac2;Di2015NewLine        [MarshalAs(UnmanagedType.U1)]Di2015NewLine        public byte mac3;Di2015NewLine        [MarshalAs(UnmanagedType.U1)]Di2015NewLine        public byte mac4;Di2015NewLine        [MarshalAs(UnmanagedType.U1)]Di2015NewLine        public byte mac5;Di2015NewLine        [MarshalAs(UnmanagedType.U1)]Di2015NewLine        public byte mac6;Di2015NewLine        [MarshalAs(UnmanagedType.U1)]Di2015NewLine        public byte mac7;Di2015NewLine        [MarshalAs(UnmanagedType.U4)]Di2015NewLine        public int dwAddr;Di2015NewLine        [MarshalAs(UnmanagedType.U4)]Di2015NewLine        public int dwType;Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// GetIpNetTable external methodDi2015NewLine    /// </summary>Di2015NewLine    /// <param name="pIpNetTable"></param>Di2015NewLine    /// <param name="pdwSize"></param>Di2015NewLine    /// <param name="bOrder"></param>Di2015NewLine    /// <returns></returns>Di2015NewLine    [DllImport("IpHlpApi.dll")]Di2015NewLine    [return: MarshalAs(UnmanagedType.U4)]Di2015NewLine    static extern int GetIpNetTable(IntPtr pIpNetTable,Di2015NewLine          [MarshalAs(UnmanagedType.U4)] ref int pdwSize, bool bOrder);Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Error codes GetIpNetTable returns that we recogniseDi2015NewLine    /// </summary>Di2015NewLine    const int ERROR_INSUFFICIENT_BUFFER = 122;Di2015NewLine    /// <summary>Di2015NewLine    /// Get the IP and MAC addresses of all known devices on the LANDi2015NewLine    /// </summary>Di2015NewLine    /// <remarks>Di2015NewLine    /// 1) This table is not updated often - it can take some human-scale time Di2015NewLine    ///    to notice that a device has dropped off the network, or a new deviceDi2015NewLine    ///    has connected.Di2015NewLine    /// 2) This discards non-local devices if they are found - these are multicastDi2015NewLine    ///    and can be discarded by IP address range.Di2015NewLine    /// </remarks>Di2015NewLine    /// <returns></returns>Di2015NewLine    public static Dictionary<IPAddress, PhysicalAddress> GetAllDevicesOnLAN()Di2015NewLine    {Di2015NewLine        Dictionary<IPAddress, PhysicalAddress> all = new Dictionary<IPAddress, PhysicalAddress>();Di2015NewLine        // Add this PC to the list...Di2015NewLine        all.Add(GetIPAddress(), GetMacAddress());Di2015NewLine        int spaceForNetTable = 0;Di2015NewLine        // Get the space neededDi2015NewLine        // We do that by requesting the table, but not giving any space at all.Di2015NewLine        // The return value will tell us how much we actually need.Di2015NewLine        GetIpNetTable(IntPtr.Zero, ref spaceForNetTable, false);Di2015NewLine        // Allocate the spaceDi2015NewLine        // We use a try-finally block to ensure release.Di2015NewLine        IntPtr rawTable = IntPtr.Zero;Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            rawTable = Marshal.AllocCoTaskMem(spaceForNetTable);Di2015NewLine            // Get the actual dataDi2015NewLine            int errorCode = GetIpNetTable(rawTable, ref spaceForNetTable, false);Di2015NewLine            if (errorCode != 0)Di2015NewLine            {Di2015NewLine                // Failed for some reason - can do no more here.Di2015NewLine                throw new Exception(string.Format(Di2015NewLine                  "Unable to retrieve network table. Error code {0}", errorCode));Di2015NewLine            }Di2015NewLine            // Get the rows countDi2015NewLine            int rowsCount = Marshal.ReadInt32(rawTable);Di2015NewLine            IntPtr currentBuffer = new IntPtr(rawTable.ToInt64() + Marshal.SizeOf(typeof(Int32)));Di2015NewLine            // Convert the raw table to individual entriesDi2015NewLine            MIB_IPNETROW[] rows = new MIB_IPNETROW[rowsCount];Di2015NewLine            for (int index = 0; index < rowsCount; index++)Di2015NewLine            {Di2015NewLine                rows[index] = (MIB_IPNETROW)Marshal.PtrToStructure(new IntPtr(currentBuffer.ToInt64() +Di2015NewLine                                            (index * Marshal.SizeOf(typeof(MIB_IPNETROW)))Di2015NewLine                                           ),Di2015NewLine                                            typeof(MIB_IPNETROW));Di2015NewLine            }Di2015NewLine            // Define the dummy entries list (we can discard these)Di2015NewLine            PhysicalAddress virtualMAC = new PhysicalAddress(new byte[] { 0, 0, 0, 0, 0, 0 });Di2015NewLine            PhysicalAddress broadcastMAC = new PhysicalAddress(new byte[] { 255, 255, 255, 255, 255, 255 });Di2015NewLine            foreach (MIB_IPNETROW row in rows)Di2015NewLine            {Di2015NewLine                IPAddress ip = new IPAddress(BitConverter.GetBytes(row.dwAddr));Di2015NewLine                byte[] rawMAC = new byte[] { row.mac0, row.mac1, row.mac2, row.mac3, row.mac4, row.mac5 };Di2015NewLine                PhysicalAddress pa = new PhysicalAddress(rawMAC);Di2015NewLine                if (!pa.Equals(virtualMAC) && !pa.Equals(broadcastMAC) && !IsMulticast(ip))Di2015NewLine                {Di2015NewLine                    //Console.WriteLine("IP: {0}\\t\\tMAC: {1}", ip.ToString(), pa.ToString());Di2015NewLine                    if (!all.ContainsKey(ip))Di2015NewLine                    {Di2015NewLine                        all.Add(ip, pa);Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        finallyDi2015NewLine        {Di2015NewLine            // Release the memory.Di2015NewLine            Marshal.FreeCoTaskMem(rawTable);Di2015NewLine        }Di2015NewLine        return all;Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Gets the IP address of the current PCDi2015NewLine    /// </summary>Di2015NewLine    /// <returns></returns>Di2015NewLine    public static IPAddress GetIPAddress()Di2015NewLine    {Di2015NewLine        String strHostName = Dns.GetHostName();Di2015NewLine        IPHostEntry ipEntry = Dns.GetHostEntry(strHostName);Di2015NewLine        IPAddress[] addr = ipEntry.AddressList;Di2015NewLine        foreach (IPAddress ip in addr)Di2015NewLine        {Di2015NewLine            if (!ip.IsIPv6LinkLocal)Di2015NewLine            {Di2015NewLine                return (ip);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return addr.Length > 0 ? addr[0] : null;Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Gets the MAC address of the current PC.Di2015NewLine    /// </summary>Di2015NewLine    /// <returns></returns>Di2015NewLine    public static PhysicalAddress GetMacAddress()Di2015NewLine    {Di2015NewLine        foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())Di2015NewLine        {Di2015NewLine            // Only consider Ethernet network interfacesDi2015NewLine            if (nic.NetworkInterfaceType == NetworkInterfaceType.Ethernet &&Di2015NewLine                nic.OperationalStatus == OperationalStatus.Up)Di2015NewLine            {Di2015NewLine                return nic.GetPhysicalAddress();Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return null;Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Returns true if the specified IP address is a multicast addressDi2015NewLine    /// </summary>Di2015NewLine    /// <param name="ip"></param>Di2015NewLine    /// <returns></returns>Di2015NewLine    public static bool IsMulticast(IPAddress ip)Di2015NewLine    {Di2015NewLine        bool result = true;Di2015NewLine        if (!ip.IsIPv6Multicast)Di2015NewLine        {Di2015NewLine            byte highIP = ip.GetAddressBytes()[0];Di2015NewLine            if (highIP < 224 || highIP > 239)Di2015NewLine            {Di2015NewLine                result = false;Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return result;Di2015NewLine    } Di2015NewLineDi2015NewLine    public static IPAddress GetIPAddress(PhysicalAddress physicalAddress)Di2015NewLine    {Di2015NewLine        var localIPs = GetAllDevicesOnLAN();Di2015NewLine        foreach (var pair in localIPs)Di2015NewLine        {Di2015NewLine            if (pair.Value.Equals(physicalAddress))Di2015NewLine                return pair.Key;Di2015NewLine        }Di2015NewLineDi2015NewLine        return null;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21066135Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {// Get my PC IP addressDi2015NewLine        Console.WriteLine("My IP : {0}", IPHelper.GetIPAddress());Di2015NewLine        // Get My PC MAC addressDi2015NewLine        Console.WriteLine("My MAC: {0}", IPHelper.GetMacAddress());Di2015NewLine        // Get all devices on networkDi2015NewLine        Dictionary<IPAddress, PhysicalAddress> all = IPHelper.GetAllDevicesOnLAN();Di2015NewLineDi2015NewLine        foreach (KeyValuePair<IPAddress, PhysicalAddress> kvp in all)Di2015NewLine        {Di2015NewLine            Console.WriteLine("IP : {0}\\n MAC {1}", kvp.Key, kvp.Value);Di2015NewLine        }Di2015NewLineDi2015NewLine        PhysicalAddress ph = PhysicalAddress.Parse("485B39C25E67");Di2015NewLineDi2015NewLine        var ip = IPHelper.GetIPAddress(ph);Di2015NewLine        Console.WriteLine("IP is {0}", ip);Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
21066616Di2015UniqueSeparatorregedit
21066616Di2015UniqueSeparatorHKEY_LOCAL_MACHINE folder
21066616Di2015UniqueSeparatorHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options
21066616Di2015UniqueSeparatorNew Key
21066616Di2015UniqueSeparatorAs Administrator
21066629Di2015UniqueSeparatorredirectMode="ResponseRewrite"
21066629Di2015UniqueSeparatorcustomErrors
21066629Di2015UniqueSeparatorredirectMode="ResponseRedirect"
21066869Di2015UniqueSeparatorclass MsgHeaderDi2015NewLine{Di2015NewLine    short syncPattern;  // e.g., 0xFDFDDi2015NewLine    short msgType;      // useful if you have different messagesDi2015NewLine    int   msgLength;    // length of the message minus headerDi2015NewLine}Di2015NewLine
21066869Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLineclass SystemInfoDi2015NewLine{Di2015NewLine    private string machineName;Di2015NewLine    private int freeSpace;Di2015NewLine    private int processorCount;Di2015NewLineDi2015NewLine    // Private so no one can create it directly.Di2015NewLine    private SystemInfo()Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    // This is a static method now.  Call SystemInfo.Encode() to use it.Di2015NewLine    public static byte[] Encode()Di2015NewLine    {Di2015NewLine        // Convert the machine name to an ASCII-based byte array.Di2015NewLine        var machineNameAsByteArray = Encoding.ASCII.GetBytes(Environment.MachineName);Di2015NewLineDi2015NewLine        // *THIS IS IMPORTANT*  The easiest way to encode a string value so that itDi2015NewLine        // can be easily decoded is to prepend the length of the string.  Otherwise,Di2015NewLine        // you're left guessing on the decode side about how long the string is.Di2015NewLineDi2015NewLine        // Calculate the message length.  This does *NOT* include the size ofDi2015NewLine        // the message length itself.Di2015NewLine        // NOTE:  As new fields are added to the message, account for theirDi2015NewLine        //        respective size here and encode them below.Di2015NewLine        var messageLength = sizeof(int)                   + // length of machine name stringDi2015NewLine                            machineNameAsByteArray.Length + // the machine name valueDi2015NewLine                            sizeof(int)                   + // free spaceDi2015NewLine                            sizeof(int);                    // processor countDi2015NewLineDi2015NewLine        // Calculate the required size of the byte array.  This *DOES* includeDi2015NewLine        // the size of the message length.Di2015NewLine        var byteArraySize = messageLength + // message itselfDi2015NewLine                            sizeof(int);    // 4-byte message length fieldDi2015NewLineDi2015NewLine        // Allocate the byte array.Di2015NewLine        var bytes = new byte[byteArraySize];Di2015NewLineDi2015NewLine        // The offset is used to keep track of where the next field should beDi2015NewLine        // placed in the byte array.Di2015NewLine        var offset = 0;Di2015NewLineDi2015NewLine        // Encode the message length (a very simple header).Di2015NewLine        Buffer.BlockCopy(BitConverter.GetBytes(messageLength), 0, bytes, offset, sizeof(int));Di2015NewLineDi2015NewLine        // Increment offset by the number of bytes added to the byte array.Di2015NewLine        // Note that the increment is equal to the value of the last parameterDi2015NewLine        // in the preceding BlockCopy call.Di2015NewLine        offset += sizeof(int);Di2015NewLineDi2015NewLine        // Encode the length of machine name to make it easier to decode.Di2015NewLine        Buffer.BlockCopy(BitConverter.GetBytes(machineNameAsByteArray.Length), 0, bytes, offset, sizeof(int));Di2015NewLineDi2015NewLine        // Increment the offset by the number of bytes added.Di2015NewLine        offset += sizeof(int);Di2015NewLineDi2015NewLine        // Encode the machine name as an ASCII-based byte array.Di2015NewLine        Buffer.BlockCopy(machineNameAsByteArray, 0, bytes, offset, machineNameAsByteArray.Length);Di2015NewLineDi2015NewLine        // Increment the offset.  See the pattern?Di2015NewLine        offset += machineNameAsByteArray.Length;Di2015NewLineDi2015NewLine        // Encode the free space.Di2015NewLine        Buffer.BlockCopy(BitConverter.GetBytes(GetTotalFreeSpace("C:\\\\")), 0, bytes, offset, sizeof(int));Di2015NewLineDi2015NewLine        // Increment the offset.Di2015NewLine        offset += sizeof(int);Di2015NewLineDi2015NewLine        // Encode the processor count.Di2015NewLine        Buffer.BlockCopy(BitConverter.GetBytes(Environment.ProcessorCount), 0, bytes, offset, sizeof(int));Di2015NewLineDi2015NewLine        // No reason to do this, but it completes the pattern.Di2015NewLine        offset += sizeof(int).Di2015NewLineDi2015NewLine        return bytes;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Static method.  Call is as SystemInfo.Decode(myReceivedByteArray);Di2015NewLine    public static SystemInfo Decode(byte[] message)Di2015NewLine    {Di2015NewLine        // When decoding, the presumption is that your socket code read the firstDi2015NewLine        // four bytes from the socket to determine the length of the message.  ItDi2015NewLine        // then allocated a byte array of that size and read the message into thatDi2015NewLine        // byte array.  So the byte array passed into this function does *NOT* haveDi2015NewLine        // the 4-byte message length field at the front of it.  It makes no senseDi2015NewLine        // in this class anyway.Di2015NewLineDi2015NewLine        // Create the SystemInfo object to be populated and returned.Di2015NewLine        var si = new SystemInfo();Di2015NewLineDi2015NewLine        // Use the offset to navigate through the byte array.Di2015NewLine        var offset = 0;Di2015NewLineDi2015NewLine        // Extract the length of the machine name string since that is the firstDi2015NewLine        // field encoded in the message.Di2015NewLine        var machineNameLength = BitConverter.ToInt32(message, offset);Di2015NewLineDi2015NewLine        // Increment the offset.Di2015NewLine        offset += sizeof(int);Di2015NewLineDi2015NewLine        // Extract the machine name now that we know its length.Di2015NewLine        si.machineName = Encoding.ASCII.GetString(message, offset, machineNameLength);Di2015NewLineDi2015NewLine        // Increment the offset.Di2015NewLine        offset += machineNameLength;Di2015NewLineDi2015NewLine        // Extract the free space.Di2015NewLine        si.freeSpace = BitConverter.ToInt32(message, offset);Di2015NewLineDi2015NewLine        // Increment the offset.Di2015NewLine        offset += sizeof(int);Di2015NewLineDi2015NewLine        // Extract the processor count.Di2015NewLine        si.processorCount = BitConverter.ToInt32(message, offset);Di2015NewLineDi2015NewLine        // No reason to do this, but it completes the pattern.Di2015NewLine        offset += sizeof(int);Di2015NewLineDi2015NewLine        return si;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21066869Di2015UniqueSeparatorEncode
21066869Di2015UniqueSeparatorbyte[] msg = SystemInfo.Encode();Di2015NewLine
21066869Di2015UniqueSeparatorDecode
21066869Di2015UniqueSeparatorSystemInfo si = SystemInfo.Decode(msg);Di2015NewLine
21066869Di2015UniqueSeparatorMsgHeader
21066869Di2015UniqueSeparatorSystemInfo
21066869Di2015UniqueSeparatormessageLength
21066869Di2015UniqueSeparatorint
21066869Di2015UniqueSeparatormessageLength
21066869Di2015UniqueSeparatorsizeof(int)
21066869Di2015UniqueSeparatorSystem.Buffer.BlockCopy
21066965Di2015UniqueSeparatorvar
21066965Di2015UniqueSeparatorprivate XPathNavigator Name;Di2015NewLineprivate XPathNavigator user;Di2015NewLineprivate XPathNavigator PPs;Di2015NewLineprivate XPathNavigator aze;Di2015NewLine
21066965Di2015UniqueSeparatorthis.Name = navigator.SelectSingleNode("//appsettings/name");Di2015NewLineDi2015NewLinethis.user = navigator.SelectSingleNode("//appsettings/user");Di2015NewLinethis.PPs = navigator.SelectSingleNode("//appsettings/PPs");Di2015NewLinethis.aze = navigator.SelectSingleNode("//appsettings/aze");Di2015NewLine
21067290Di2015UniqueSeparatormyProcess.StartInfo.RedirectStandardInput
21067290Di2015UniqueSeparatorProcess
21067290Di2015UniqueSeparatorProcess.StandardInput
21067425Di2015UniqueSeparatorOleDb/Access
21067425Di2015UniqueSeparatorOleDbDataReader
21067425Di2015UniqueSeparatorExecuteNonQuery
21067425Di2015UniqueSeparatorOleDbConnection/Command
21067425Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    string povezava = "........."Di2015NewLine    string zapisi = "update Zaposleni set ID=?,Ime=?,Priimek=?,Uporabnisko_ime=?,Geslo=?," + Di2015NewLine                    "E_posta=?,Ulica=?,Hisna_stevilka=?,Mesto=?,Delovno_mesto=? " + Di2015NewLine                    "where ID=?";Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        using(OleDbConnection baza = new OleDbConnection(povezava))Di2015NewLine        using(OleDbCommand beri = new OleDbCommand(zapisi, baza))Di2015NewLine        {Di2015NewLine            baza.Open();Di2015NewLine            beri.Parameters.AddWithValue("@p1",this.textBox1.Text);Di2015NewLine            beri.Parameters.AddWithValue("@p2",this.textBox2.Text);Di2015NewLine            beri.Parameters.AddWithValue("@p3",this.textBox3.Text);Di2015NewLine            .... and so on for the other parametersDi2015NewLine            beri.Parameters.AddWithValue("@p11",this.textBox1.Text);Di2015NewLine            int rowsAffected = beri.ExecuteNonQuery();Di2015NewLine        }Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        MessageBox.Show(ex.Message);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21067425Di2015UniqueSeparator beri.Parameters.AddWithValue("@p1",Convert.ToInt32(this.textBox1.Text));Di2015NewLine
21067432Di2015UniqueSeparatorXmlSerializer ser = new XmlSerializer(typeof(Game[]), Di2015NewLine              new XmlRootAttribute("GameArray") { Namespace = "http://foo.bar" });Di2015NewLinevar games = (Game[])ser.Deserialize(stream);Di2015NewLine
21067432Di2015UniqueSeparatorpublic class GameDi2015NewLine{Di2015NewLine    public string Id { set; get; }Di2015NewLine    public string Title { set; get; }Di2015NewLine}Di2015NewLine
21067432Di2015UniqueSeparatorstring xml = @"<?xml version=""1.0"" encoding=""utf-8""?>Di2015NewLine<GameArray xmlns=""http://foo.bar"">Di2015NewLine    <Game>Di2015NewLine    <Id>int</Id>Di2015NewLine    <Title>string</Title>Di2015NewLine    </Game>Di2015NewLine    <Game>Di2015NewLine    <Id>int</Id>Di2015NewLine    <Title>string</Title>Di2015NewLine    </Game>Di2015NewLine</GameArray>";Di2015NewLineDi2015NewLineXmlSerializer ser = new XmlSerializer(typeof(Game[]), Di2015NewLine                                        new XmlRootAttribute("GameArray") { Namespace = "http://foo.bar" });Di2015NewLinevar games = (Game[])ser.Deserialize(new StringReader(xml));Di2015NewLine
21067561Di2015UniqueSeparator// T1:Di2015NewLinefoo = 5 // non-volatileDi2015NewLinebar = 7 // non-volatileDi2015NewLinedone = True // volatile writeDi2015NewLineDi2015NewLine// T2:Di2015NewLineif (done) { // volatile readDi2015NewLine     foo and bar guaranteed to be 5, respectively 7 with non-volatile readsDi2015NewLine}Di2015NewLine
21067705Di2015UniqueSeparator@{ ViewData.Add("foo", "bar"); }Di2015NewLineDi2015NewLine@Html.Partial("_Navigation", ViewData)Di2015NewLine
21067745Di2015UniqueSeparatorDateTime startDate;Di2015NewLineDateTime endDate;Di2015NewLinepublic void Connect()Di2015NewLine{Di2015NewLine    //Do somethingDi2015NewLine    startDate = DateTime.Now;Di2015NewLine}Di2015NewLinepublic void Disconnect()Di2015NewLine{ Di2015NewLine   //Do somethingDi2015NewLine   endDate = DateTime.Now;Di2015NewLine   Console.Writeline(endDate.Subtract(startDate).TotalMinutes.ToString(););Di2015NewLine}Di2015NewLine
21067833Di2015UniqueSeparator<connectionStrings>
21067833Di2015UniqueSeparator<configuration>
21067833Di2015UniqueSeparator<configuration>Di2015NewLine  <connectionStrings>Di2015NewLine    <add name="NGO_MS" connectionString="data source=.\\SQLExpress;database=NGO_MS;integrated Security=SSPI;" providerName="System.Data.SqlClient" />Di2015NewLine  </connectionStrings>Di2015NewLine  ...Di2015NewLine
21067879Di2015UniqueSeparatorView
21067879Di2015UniqueSeparatorViewModel
21067879Di2015UniqueSeparatorGalaSoft.MvvmLight
21067879Di2015UniqueSeparatorEventToCommand
21067879Di2015UniqueSeparatorPassEventArgsToCommand
21067879Di2015UniqueSeparator<Button>Di2015NewLine    <i:Interaction.Triggers>Di2015NewLine        <i:EventTrigger EventName="MouseEnter">Di2015NewLine            <cmd:EventToCommand Command="{Binding FooCommand}"Di2015NewLine                                PassEventArgsToCommand="True" />Di2015NewLine        </i:EventTrigger>Di2015NewLine    </i:Interaction.Triggers>Di2015NewLine</Button>Di2015NewLine
21067879Di2015UniqueSeparatorViewModel
21067879Di2015UniqueSeparatorView
21067879Di2015UniqueSeparatorSome new notes
21067879Di2015UniqueSeparatorMVVM
21067879Di2015UniqueSeparatorView
21067879Di2015UniqueSeparatorView
21067879Di2015UniqueSeparatorViewModel
21067879Di2015UniqueSeparatorMVVM
21067879Di2015UniqueSeparatorMVVM
21067879Di2015UniqueSeparatorModel
21067879Di2015UniqueSeparatorView
21067894Di2015UniqueSeparatorHandleErrorAttribute
21067937Di2015UniqueSeparatormyController.Mrthod1()
21067937Di2015UniqueSeparatorthis
21067937Di2015UniqueSeparatorthis
21067937Di2015UniqueSeparatorController
21067937Di2015UniqueSeparatorController
21067951Di2015UniqueSeparatorDateTime
21067951Di2015UniqueSeparatorDateTimeOffset
21067951Di2015UniqueSeparatorDateTime
21067951Di2015UniqueSeparatorDateTimeOffset
21068019Di2015UniqueSeparatorHouse
21068019Di2015UniqueSeparatorCity
21068019Di2015UniqueSeparatorHouse
21068019Di2015UniqueSeparatorclass HouseDi2015NewLine{Di2015NewLine    List<Room> Rooms { get; set; }Di2015NewLine    string Name { get; set; }Di2015NewLine    public City City { get; set; }Di2015NewLine }Di2015NewLineDi2015NewLineclass RoomDi2015NewLine{Di2015NewLine    string Name { get; set; }Di2015NewLine    public House House { get; set; }Di2015NewLine}Di2015NewLine
21068019Di2015UniqueSeparator    City myCity = new City();Di2015NewLine    House myHouse = new House { City = myCity, Name = "myHome" };Di2015NewLine    Room myRoom = new Room { House = myHouse, Name = "myRoom" };Di2015NewLine    myHouse.Rooms = new List<Room>();    Di2015NewLine    myHouse.Rooms.Add(myRoom);Di2015NewLine    myCity.Houses = new List<House>();        Di2015NewLine    myCity.Houses.Add(myHouse);Di2015NewLine    // here you can use:Di2015NewLine    myRoom.House.City.NameDi2015NewLine
21068019Di2015UniqueSeparatorclass House Di2015NewLine{Di2015NewLine     public void AddRoom(Room room)Di2015NewLine     {Di2015NewLine        room.House = this;Di2015NewLine        if (Rooms == null)Di2015NewLine            Rooms = new List<Room>();Di2015NewLine        Rooms.Add(room);Di2015NewLine     }Di2015NewLine}Di2015NewLine
21068019Di2015UniqueSeparatorRoom myRoom = new Room { House = myHouse, Name = "myRoom" };Di2015NewLine
21068019Di2015UniqueSeparatormyHouse.AddRoom(new Room { Name = "myRoom" });Di2015NewLine
21068283Di2015UniqueSeparatorRelativeSource
21068283Di2015UniqueSeparatorSetSceneCommand
21068283Di2015UniqueSeparatorMenu
21068283Di2015UniqueSeparator<Setter Di2015NewLine   Property="Command" Di2015NewLine   Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Path=DataContext.SetSceneCommand}"/>Di2015NewLine
21068283Di2015UniqueSeparatorBinding
21068283Di2015UniqueSeparatorMenu
21068283Di2015UniqueSeparatorDataContext.SetSceneCommand
21068312Di2015UniqueSeparatorvar mockContext = Mock.Create<TimeSketchContext>();Di2015NewLinemockContext.Arrange(x => x.Set<EmployeeSkill>()).Returns(mockSet);Di2015NewLine
21068312Di2015UniqueSeparatorDbContext.Set<>
21068312Di2015UniqueSeparatorIDbContext.Set<>
21068312Di2015UniqueSeparatorIDbContext
21068312Di2015UniqueSeparatorvar mockContext = Mock.Create<IDbContext>();Di2015NewLine
21068312Di2015UniqueSeparatorBaseRepository
21068312Di2015UniqueSeparatorDbContext
21068312Di2015UniqueSeparatorpublic class BaseRepository<T> : IRepositoryBase<T> where T : class, IEntity, new()Di2015NewLine{Di2015NewLine    protected readonly DbContext InnerDbContext;Di2015NewLine    protected DbSet<T> InnerDbSet;Di2015NewLineDi2015NewLine    public BaseRepository(DbContext innerDbContext)Di2015NewLine    {Di2015NewLine        InnerDbContext = innerDbContext;Di2015NewLine        InnerDbSet = InnerDbContext.Set<T>();Di2015NewLine    }Di2015NewLineDi2015NewLine    public virtual Task<T> FindAsync(long id)Di2015NewLine    {Di2015NewLine        return InnerDbSet.FirstOrDefaultAsync(x => x.Id == id);Di2015NewLine    }Di2015NewLine}  Di2015NewLine
21068383Di2015UniqueSeparatorMain
21068383Di2015UniqueSeparatorSystem
21068383Di2015UniqueSeparatorSytem
21068383Di2015UniqueSeparatorWriteLine
21068383Di2015UniqueSeparatorReadLine
21068383Di2015UniqueSeparatorWriteline
21068383Di2015UniqueSeparatorReadline
21068383Di2015UniqueSeparatorusing System;Di2015NewLinenamespace RectangleApplicationDi2015NewLine{Di2015NewLine    class RectangleDi2015NewLine    {Di2015NewLine        // Member VariablesDi2015NewLine        double length;Di2015NewLine        double width;Di2015NewLine        public void Acceptdetails()Di2015NewLine        {Di2015NewLine            length = 4.5;Di2015NewLine            width = 3.5;Di2015NewLine        }Di2015NewLine        public double GetArea()Di2015NewLine        {Di2015NewLine            return length * width;Di2015NewLine        }Di2015NewLine        public void Display()Di2015NewLine        {Di2015NewLine            Console.WriteLine("Length: {0}", length);Di2015NewLine            Console.WriteLine("Width: {0}", width);Di2015NewLine            Console.WriteLine("Area: {0}", GetArea());Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    class ExecuteRectangleDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Rectangle r = new Rectangle();Di2015NewLine            r.Acceptdetails();Di2015NewLine            r.Display();Di2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21068497Di2015UniqueSeparator ComponentResourceManager resources = new ComponentResourceManager(typeof(Type));Di2015NewLine
21068497Di2015UniqueSeparatorthis.GetType()
21068497Di2015UniqueSeparator    private static void ChangeLanguage(string lang) {Di2015NewLine        foreach (Form frm in Application.OpenForms) {Di2015NewLine            localizeForm(frm);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void localizeForm(Form frm) {Di2015NewLine        var manager = new ComponentResourceManager(frm.GetType());Di2015NewLine        manager.ApplyResources(frm, "$this");Di2015NewLine        applyResources(manager, frm.Controls);Di2015NewLine    }Di2015NewLineDi2015NewLine    private static void applyResources(ComponentResourceManager manager, Control.ControlCollection ctls) {Di2015NewLine        foreach (Control ctl in ctls) {Di2015NewLine            manager.ApplyResources(ctl, ctl.Name);Di2015NewLine            applyResources(manager, ctl.Controls);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
21068713Di2015UniqueSeparator/// <summary>Di2015NewLine    /// Creates a new instance of the <see cref="T:System.Net.Http.StringContent"/> class.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="content">The content used to initialize the <see cref="T:System.Net.Http.StringContent"/>.</param><param name="encoding">The encoding to use for the content.</param><param name="mediaType">The media type to use for the content.</param>Di2015NewLine    [__DynamicallyInvokable]Di2015NewLine    public StringContent(string content, Encoding encoding, string mediaType)Di2015NewLine      : base(StringContent.GetContentByteArray(content, encoding))Di2015NewLine    {Di2015NewLine      this.Headers.ContentType = new MediaTypeHeaderValue(mediaType == null ? "text/plain" : mediaType)Di2015NewLine      {Di2015NewLine        CharSet = encoding == null ? HttpContent.DefaultStringEncoding.WebName : encoding.WebNameDi2015NewLine      };Di2015NewLine    }Di2015NewLine
21068755Di2015UniqueSeparator(select c.id, c.code, sc.subCodeDi2015NewLine from codes c joinDi2015NewLine      subcodes scDi2015NewLine      on c.id = sc.codeidDi2015NewLine) union allDi2015NewLine(select c.id, c.code, NULLDi2015NewLine from codes cDi2015NewLine)Di2015NewLine
21068958Di2015UniqueSeparatorComboBoxItem
21068958Di2015UniqueSeparatorForeground
21068958Di2015UniqueSeparatorForeground
21068958Di2015UniqueSeparator((ComboBoxItem)ComboBox1.Items[0]).Foreground = Brushes.Red;Di2015NewLine
21068958Di2015UniqueSeparatorComboBox1
21068958Di2015UniqueSeparatorComboBox1.Items.Add(new ComboBoxItem {Content = "Third Item"});Di2015NewLine
21068958Di2015UniqueSeparatorComboBox1.Items.Add("Third Item");Di2015NewLine
21068958Di2015UniqueSeparatorItemContainerGenerator
21068958Di2015UniqueSeparatorvar comboBoxItem = (ComboBoxItem)ComboBox1.ItemContainerGenerator.ContainerFromItem(ComboBox1.Items[0]);Di2015NewLinecomboBoxItem.Foreground = Brushes.Red;Di2015NewLine
21068987Di2015UniqueSeparatorhttpGetEnabled
21068987Di2015UniqueSeparator<behaviors>Di2015NewLine  <serviceBehaviors>Di2015NewLine    <behavior name="MyServiceBehavior">Di2015NewLine      <serviceMetadata httpGetEnabled="false" />Di2015NewLine    </behavior>Di2015NewLine  </serviceBehaviors>Di2015NewLine</behaviors>Di2015NewLine
21068987Di2015UniqueSeparatorhttpGetEnabled="false"
21068987Di2015UniqueSeparator<message>
21068987Di2015UniqueSeparator<wsHttpBinding>
21069192Di2015UniqueSeparatorPosition
21069192Di2015UniqueSeparatorMediaElement1.Position = TimeSpan.Zero;Di2015NewLineMediaElement1.Play(); Di2015NewLine
21069245Di2015UniqueSeparatorpictureBox1Control.pb1.Image = test.jpg;Di2015NewLine
21069245Di2015UniqueSeparatorpictureBox1Control.pb1.Load(@"c:\\test.jpg");Di2015NewLine
21069245Di2015UniqueSeparator public static PictureBox pb1;Di2015NewLine
21069245Di2015UniqueSeparatorthis.Controls.Add(pb1)Di2015NewLine
21069336Di2015UniqueSeparatorvoid
21069336Di2015UniqueSeparatorprivate void TestMethod()Di2015NewLine{Di2015NewLine    // Do somethingDi2015NewLine    if (conditionIsMet)Di2015NewLine        return; // Exits the method immediatelyDi2015NewLineDi2015NewLine    tryDi2015NewLine    {Di2015NewLine        // Do somethingDi2015NewLine        if (conditionIsMet)Di2015NewLine            return;  // Statements in finally block will be executed before exiting the methodDi2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        // Do some cleanupDi2015NewLine    }Di2015NewLineDi2015NewLine    using (var disposableObj = new DisposableObject())Di2015NewLine    {Di2015NewLine        // Do somethingDi2015NewLine        if (conditionIsMet)Di2015NewLine            return;  // disposableObj will be disposed before exiting the methodDi2015NewLine    }Di2015NewLine}Di2015NewLine
21069527Di2015UniqueSeparatorRestaurant
21069527Di2015UniqueSeparatorstring[] names = xdoc.Root.Elements("Restaurant")Di2015NewLine                     .Select(r => (string)r.Element("name"))Di2015NewLine                     .ToArray();Di2015NewLine
21069527Di2015UniqueSeparatorvar restaurants = from r in xdoc.Root.Elements("Restaurant")Di2015NewLine                  select new {Di2015NewLine                     Name = (string)r.Element("name"),Di2015NewLine                     Location = (string)r.Element("location")Di2015NewLine                  };Di2015NewLine
21069527Di2015UniqueSeparatorforeach(var restaurant in restaurants)Di2015NewLine{Di2015NewLine    // use restaurant.Name or restaurant.LocationDi2015NewLine}Di2015NewLine
21069527Di2015UniqueSeparatorRestaurant
21069527Di2015UniqueSeparatorrestaurants.ToArray()
21069579Di2015UniqueSeparator[HubName("myhub")]Di2015NewLine[Authorize]Di2015NewLinepublic class MyHub1 : HubDi2015NewLine{Di2015NewLine    public override System.Threading.Tasks.Task OnConnected()Di2015NewLine    {Di2015NewLine        var identity = Thread.CurrentPrincipal.Identity;Di2015NewLine        var request = Context.Request;Di2015NewLine        Clients.Client(Context.ConnectionId).sayhello("Hello " + identity.Name);Di2015NewLine        return base.OnConnected();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21069638Di2015UniqueSeparatortimer1_Tick
21069638Di2015UniqueSeparatorprivate void button_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    //two cards are open and not matching (if they matched, they would be already null)Di2015NewLine    if ( firstClicked != null && secondClicked != null )Di2015NewLine    {Di2015NewLine        //hide the buttonsDi2015NewLine        firstClicked.ForeColor = firstClicked.BackColor;Di2015NewLine        secondClicked.ForeColor = secondClicked.BackColor;Di2015NewLine        firstClicked = null;Di2015NewLine        secondClicked = null;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21069638Di2015UniqueSeparatortimer1.Start()
21069674Di2015UniqueSeparator;
21069674Di2015UniqueSeparator:
21069674Di2015UniqueSeparatorusing System;
21069674Di2015UniqueSeparatorusing System:
21069748Di2015UniqueSeparatorpublic static bool RequestIsValid(PaymentRequestImplementation1 preAuthorizeRequest)Di2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLinepublic static bool RequestIsValid(PaymentRequestImplementation2 preAuthorizeRequest)Di2015NewLine{Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLine
21069748Di2015UniqueSeparatorpublic static bool RequestIsValid(IRequest preAuthorizeRequest)Di2015NewLine{Di2015NewLine    var member = typeof (YourType).GetMethod(Di2015NewLine        "RequestIsValid",Di2015NewLine        BindingFlags.InvokeMethod | BindingFlags.Static | BindingFlags.Public,Di2015NewLine        null,Di2015NewLine        new [] {preAuthorizeRequest.GetType()},Di2015NewLine        null);Di2015NewLineDi2015NewLine    if (member.GetParameters()[0].ParameterType != typeof (IRequest))Di2015NewLine    {Di2015NewLine        member.Invoke(null, new[] {Convert.ChangeType(preAuthorizeRequest, preAuthorizeRequest.GetType())});Di2015NewLine    }Di2015NewLineDi2015NewLine    // defaultDi2015NewLine}Di2015NewLine
21069792Di2015UniqueSeparatorinput_int
21069792Di2015UniqueSeparatoroutput_int
21069792Di2015UniqueSeparatorindex
21069792Di2015UniqueSeparator32-bit value
21069792Di2015UniqueSeparatorIndex
21069792Di2015UniqueSeparatorinput_int
21069792Di2015UniqueSeparator32-bit value
21069792Di2015UniqueSeparatorinput_int
21069792Di2015UniqueSeparatoroutput_int
21069792Di2015UniqueSeparatorindex
21069792Di2015UniqueSeparator32-bit value
21069866Di2015UniqueSeparatorhtmlAttributes
21069866Di2015UniqueSeparatornew { @class = "yourclass" }Di2015NewLine
21069866Di2015UniqueSeparatorclass
21069866Di2015UniqueSeparatortitle
21069866Di2015UniqueSeparatortitle = "something"
21069866Di2015UniqueSeparator@Html.RadioButton("plantFilter", "IL", (bool)@TempData["MN"], new { @class = "yourclass" });Di2015NewLine
21069928Di2015UniqueSeparatorGroups
21069928Di2015UniqueSeparatorname
21069928Di2015UniqueSeparatorOnConnected()
21069928Di2015UniqueSeparatorname
21069928Di2015UniqueSeparatorList<string>
21069928Di2015UniqueSeparatorconnectionId
21069928Di2015UniqueSeparatorList<string> clientWindows; Di2015NewLineGroups.TryGetValue(name, out clientWindows); Di2015NewLineclientWindows.ForEach(connectionId => {Di2015NewLine    Clients.Client(connectionId)Di2015NewLine         .broadcastNotification(username, page, type, id, title);Di2015NewLine});Di2015NewLine
21069928Di2015UniqueSeparatorvar others = Groups.Where(n => n.Key != name).SelectMany(s => s.Value);Di2015NewLineClients.AllExcept(others.ToArray())Di2015NewLine    .broadcastNotification(username, page, type, id, title);Di2015NewLine
21069928Di2015UniqueSeparatorDictionary<string, List<string>> Groups = new Dictionary<string, List<string>>()Di2015NewLine
21069928Di2015UniqueSeparatorusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineDi2015NewLineprivate static Dictionary<string, List<string>> userGroups Di2015NewLine                                 = new Dictionary<string, List<string>>()Di2015NewLineprivate static object _lock = new object();Di2015NewLineDi2015NewLinepublic class NotificationHub : HubDi2015NewLine{Di2015NewLine    public void ShowSelfNotification(string page, string type, int id, string title)Di2015NewLine    {Di2015NewLine        string username = Context.User.Identity.Name;Di2015NewLine        Clients.Group(username).broadcastNotification(page, type, id, title);Di2015NewLine    }Di2015NewLineDi2015NewLine    public void ShowNotification(string page, string type, int id, string title)Di2015NewLine    {Di2015NewLine        string username = Context.User.Identity.Name;Di2015NewLine        var others = userGroups.Where(n => n.Key != username)Di2015NewLine                               .SelectMany(s => s.Value);Di2015NewLineDi2015NewLine        Clients.AllExcept(others.ToArray())Di2015NewLine               .broadcastNotification(username, page, type, id, title);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override Task OnConnected()Di2015NewLine    {Di2015NewLine        string name = Context.User.Identity.Name;Di2015NewLine        Groups.Add(Context.ConnectionId, name);Di2015NewLineDi2015NewLine        lock(_lock)Di2015NewLine        {Di2015NewLine            if (userGroups .ContainsKey(name))Di2015NewLine                userGroups [name].Add(Context.ConnectionId);Di2015NewLine            elseDi2015NewLine                userGroups .Add(name, new List<string>{Context.ConnectionId})Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        return base.OnConnected();Di2015NewLine    }Di2015NewLineDi2015NewLine   public override Task OnDisconnected()Di2015NewLine   {Di2015NewLine       string name = Context.User.Identity.Name;Di2015NewLine       lock(_lock)Di2015NewLine       {Di2015NewLine            if (userGroups .ContainsKey(name))Di2015NewLine                userGroups[name].Remove(Context.ConnectionId);Di2015NewLine       }Di2015NewLine       return base.OnDisconnected();Di2015NewLine   }Di2015NewLine}Di2015NewLine
21069947Di2015UniqueSeparatorIHtmlString
21069947Di2015UniqueSeparatorHtml.Raw()
21069947Di2015UniqueSeparator@
21069947Di2015UniqueSeparator<a>
21070045Di2015UniqueSeparatorbutton.InvokeIfRequired(() =>Di2015NewLine{Di2015NewLine    // This will run under the UI thread.Di2015NewLine    button.Text = "hamster";Di2015NewLine});Di2015NewLine
21070045Di2015UniqueSeparatorpublic static void InvokeIfRequired(this ISynchronizeInvoke control, MethodInvoker action)Di2015NewLine{Di2015NewLine    if (control.InvokeRequired)Di2015NewLine    {Di2015NewLine        control.Invoke(action);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        action();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21070256Di2015UniqueSeparatorSystem.IO.Path
21070256Di2015UniqueSeparatorGetFileName
21070256Di2015UniqueSeparatorPath.GetFileName( openDialog.FileName );Di2015NewLine
21070291Di2015UniqueSeparator<Restaurants>Di2015NewLine    <Restaurant>Di2015NewLine      <name>test</name>Di2015NewLine      <location>test</location>Di2015NewLine   </Restaurant>Di2015NewLine   <Restaurant>Di2015NewLine      <name>test2</name>Di2015NewLine      <location>test2</location>Di2015NewLine   </Restaurant>Di2015NewLine</Restaurants>Di2015NewLine
21070291Di2015UniqueSeparatorRestaurants
21070291Di2015UniqueSeparatorpublic class RestaurantDi2015NewLine{Di2015NewLine    [XmlElement(ElementName = "name")]Di2015NewLine    public string Name { get; set; }Di2015NewLine    [XmlElement(ElementName = "location")]Di2015NewLine    public string Location { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class RestaurantsDi2015NewLine{Di2015NewLine    [XmlElement(ElementName="Restaurant")]Di2015NewLine    public List<Restaurant> Items { get; set; }Di2015NewLine}Di2015NewLine
21070291Di2015UniqueSeparatorvar serializer = new XmlSerializer(typeof(Restaurants));Di2015NewLinevar restaurants = serializer.Deserialize(File.OpenRead("Input.txt"));Di2015NewLine
21070300Di2015UniqueSeparator    static void Main(string[] args)Di2015NewLine    {Di2015NewLineDi2015NewLine        Process p = new Process();Di2015NewLine        p.StartInfo.UseShellExecute = false;Di2015NewLine        p.StartInfo.RedirectStandardOutput = true;Di2015NewLine        p.StartInfo.RedirectStandardError = true;Di2015NewLine        p.StartInfo.FileName = @"CMD.EXE";Di2015NewLine        p.StartInfo.Arguments = @"/C bcdedit";Di2015NewLine        p.Start();Di2015NewLine        string output = p.StandardOutput.ReadToEnd();Di2015NewLine        p.WaitForExit();Di2015NewLineDi2015NewLine        // parse the outputDi2015NewLine        var lines = output.Split(new string[] { "\\r\\n" }, StringSplitOptions.RemoveEmptyEntries).Where(l => l.Length > 24);Di2015NewLine        foreach (var line in lines)Di2015NewLine        {Di2015NewLine            var key = line.Substring(0, 24).Replace(" ", string.Empty);Di2015NewLine            var value = line.Substring(24).Replace(" ", string.Empty);Di2015NewLine            Console.WriteLine(key + ":" + value);Di2015NewLine        }Di2015NewLine        Console.ReadLine();Di2015NewLine    }Di2015NewLine
21070300Di2015UniqueSeparator<requestedExecutionLevel level="asInvoker" uiAccess="false" />Di2015NewLine
21070300Di2015UniqueSeparator<requestedExecutionLevel  level="requireAdministrator" uiAccess="false" />Di2015NewLine
21070521Di2015UniqueSeparatordatagrid.AutoGenerateColumns = falseDi2015NewLine
21070542Di2015UniqueSeparator    private static Bitmap RotateImage(Image b, float angle)Di2015NewLine    {Di2015NewLine        var corners = new[]Di2015NewLine            {new PointF(0, 0), new Point(b.Width, 0), new PointF(0, b.Height), new PointF(b.Width, b.Height)};Di2015NewLineDi2015NewLine        var xc = corners.Select(p => Rotate(p, angle).X);Di2015NewLine        var yc = corners.Select(p => Rotate(p, angle).Y);Di2015NewLineDi2015NewLine        //create a new empty bitmap to hold rotated imageDi2015NewLine        Bitmap returnBitmap = new Bitmap((int)Math.Abs(xc.Max() - xc.Min()), (int)Math.Abs(yc.Max() - yc.Min()));Di2015NewLine        ...Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Rotates a point around the origin (0,0)Di2015NewLine    /// </summary>Di2015NewLine    private static PointF Rotate(PointF p, float angle)Di2015NewLine    {Di2015NewLine        // convert from angle to radiansDi2015NewLine        var theta = Math.PI*angle/180;Di2015NewLine        return new PointF(Di2015NewLine            (float) (Math.Cos(theta)*(p.X) - Math.Sin(theta)*(p.Y)),Di2015NewLine            (float) (Math.Sin(theta)*(p.X) + Math.Cos(theta)*(p.Y)));Di2015NewLine    }Di2015NewLine
21070577Di2015UniqueSeparatorstring myStr = test.dsSubjects.Tables[0].Rows[rowCtr -1]["SubjectName"].ToString();Di2015NewLinerowCtr++;Di2015NewLine
21070577Di2015UniqueSeparatorLastIndex + 1
21070577Di2015UniqueSeparatorint rN = test.dsSubjects.Tables[0].Rows.Count;Di2015NewLine
21070577Di2015UniqueSeparatorrN - 1
21070577Di2015UniqueSeparatortest.dsSubjects.Tables[0].Rows[rowCtr -1]["SubjectName"].ToString();
21070577Di2015UniqueSeparatorrowCtr
21070919Di2015UniqueSeparatoritem.FolderRelativeId
21070919Di2015UniqueSeparatorList<StorageFolder> folders = new List<StorageFolder>();Di2015NewLineWindows.Storage.ApplicationDataContainer localSettings = Windows.Storage.ApplicationData.Current.LocalSettings;Di2015NewLine// ...Di2015NewLineWindows.Storage.ApplicationDataCompositeValue data = new Windows.Storage.ApplicationDataCompositeValue();Di2015NewLinevar i = 0;Di2015NewLineforeach (var item in folders)Di2015NewLine{Di2015NewLine    if (item.Path == null || item.Path == "")Di2015NewLine        continue;Di2015NewLine    data[i.ToString()] = item.Path; // this is the line where I get the exceptionDi2015NewLine    i = i + 1;Di2015NewLine}Di2015NewLinelocalSettings.Values["folders"] = data;Di2015NewLine
21071058Di2015UniqueSeparatorphoneNumberChooserTask.show()
21071058Di2015UniqueSeparatornew Uri("/Chooser.xaml?tile=flip", UriKind.Relative);
21071058Di2015UniqueSeparatorphoneNumberChooserTask.show()
21071060Di2015UniqueSeparatorforeach
21071060Di2015UniqueSeparatorforeach
21071060Di2015UniqueSeparatorIEnumerable
21071060Di2015UniqueSeparatorT
21071060Di2015UniqueSeparatorIEnumerable<T>
21071060Di2015UniqueSeparatorArrayList
21071060Di2015UniqueSeparatorforeach
21071060Di2015UniqueSeparatorIEnumerable
21071060Di2015UniqueSeparatorforeach
21071060Di2015UniqueSeparatorIEnumerable<T>
21071060Di2015UniqueSeparatorIEnumerable
21071060Di2015UniqueSeparatorGetEnumerator
21071060Di2015UniqueSeparatorGetEnumerator
21071060Di2015UniqueSeparatorIEnumerator
21071060Di2015UniqueSeparatorIEnumerator<T>
21071060Di2015UniqueSeparatorstruct
21071060Di2015UniqueSeparatorvar results = from item in sourceDi2015NewLine              where item != "test"Di2015NewLine              select item.ToLower();Di2015NewLine
21071060Di2015UniqueSeparatorvar results = source.Where(x => x != "test")Di2015NewLine                    .Select(x => x.ToLower());Di2015NewLine
21071060Di2015UniqueSeparatorsource
21071060Di2015UniqueSeparatorasync
21071060Di2015UniqueSeparatorawait
21071102Di2015UniqueSeparatorCTRL + C
21071102Di2015UniqueSeparatorSendKeys.Send("^c") // CTRL + CDi2015NewLine
21071783Di2015UniqueSeparatorTask.Delay
21071783Di2015UniqueSeparatorDispatcherTimer
21071783Di2015UniqueSeparatorTask.Delay
21071882Di2015UniqueSeparatorOrderByDescending
21071882Di2015UniqueSeparatorusing System.Linq;Di2015NewLine
21071882Di2015UniqueSeparatorOrderByDescending
21071882Di2015UniqueSeparatorvar sortedArray = initiativeArray.OrderByDescending(item => item);Di2015NewLine
21071882Di2015UniqueSeparatorvar highestValue = sortedArray.First() Di2015NewLine
21071882Di2015UniqueSeparatorvar 1st = sortedArray.ElementAt(0);    Di2015NewLinevar 2nd = sortedArray.ElementAt(1);Di2015NewLinevar 3rd = sortedArray.ElementAt(2);Di2015NewLine...Di2015NewLine
21071988Di2015UniqueSeparatordouble
21071988Di2015UniqueSeparatorbyte[]
21071988Di2015UniqueSeparatorBitConverter.ToDouble(input, 0);Di2015NewLine
21071988Di2015UniqueSeparator3.7179659497173697E+183Di2015NewLine
21071988Di2015UniqueSeparatorrowversion
21071988Di2015UniqueSeparatorlong
21071988Di2015UniqueSeparatordouble
21071988Di2015UniqueSeparatorBitConverter.ToInt64(input, 0);Di2015NewLine
21071988Di2015UniqueSeparator7353252291589177344Di2015NewLine
21072099Di2015UniqueSeparator~$[something].docx
21072099Di2015UniqueSeparatorSystem.IO.DirectoryInfo dirInf = new System.IO.DirectoryInfo(@"C:\\myDir\\Documents");Di2015NewLinevar files = dirInf.GetFiles("*.doc").Where(f => (f.Attributes & System.IO.FileAttributes.Hidden) != System.IO.FileAttributes.Hidden).ToArray();Di2015NewLine
21072099Di2015UniqueSeparatordirInf.GetFiles
21072099Di2015UniqueSeparator.Where(f => (f.Attributes & System.IO.FileAttributes.Hidden) != System.IO.FileAttributes.Hidden)Di2015NewLine
21072099Di2015UniqueSeparator(f.Attributes & System.IO.FileAttributes.Hidden) != System.IO.FileAttributes.HiddenDi2015NewLine
21072102Di2015UniqueSeparatorvar xDoc = XDocument.Load("Input.txt");Di2015NewLineDi2015NewLinevar alpha = (from a in xDoc.Root.Elements("alpha")Di2015NewLine             let deltas = a.Elements("delta")Di2015NewLine             let deltaA = deltas.First(x => (string)x.Attribute("Type") == "A")Di2015NewLine             where (string)deltaA == "AlphaId2_DeltaTypeA"Di2015NewLine             select a).First();Di2015NewLineDi2015NewLinevar descriptions = alpha.Elements("kapa")Di2015NewLine                        .Select(x => (string)x.Element("description")).ToList();Di2015NewLine
21072102Di2015UniqueSeparator<delta>
21072102Di2015UniqueSeparatorType="A"
21072102Di2015UniqueSeparatorAlphaId2_DeltaTypeA
21072102Di2015UniqueSeparatorvar alpha = (from a in xDoc.Root.Elements("alpha")Di2015NewLine             let deltas = a.Elements("delta")Di2015NewLine             where deltas.Any(x => (string)x == "AlphaId2_DeltaTypeA")Di2015NewLine             select a).First();Di2015NewLine
21072102Di2015UniqueSeparatorvar alpha = (string)xDoc.RootDi2015NewLine                        .Elements("alpha")Di2015NewLine                        .First(x => (string)x.Attribute("Id") == "AlphaId_1")Di2015NewLine                        .Elements("delta")Di2015NewLine                        .First(x => (string)x.Attribute("Type") == "A");Di2015NewLine
21072317Di2015UniqueSeparatorDescription
21072317Di2015UniqueSeparatorNation
21072317Di2015UniqueSeparatorSearchParameterBase<uint>
21072317Di2015UniqueSeparatorNation
21072317Di2015UniqueSeparatorDescription
21072317Di2015UniqueSeparatorNation nationtest = Nation.GetAll().FirstOrDefault(n => n.Description == dataGridView1.Rows[0].Cells[2].Value);Di2015NewLine
21072441Di2015UniqueSeparatorwebsites
21072441Di2015UniqueSeparatorPlaySounds
21072441Di2015UniqueSeparatorInvokeRequired
21072441Di2015UniqueSeparatorprivate bool isPlayingSounds;Di2015NewLineprivate int index;Di2015NewLineprivate List<String> websites;Di2015NewLineprivate Timer myTimer;Di2015NewLineDi2015NewLineprivate void Form1_Load()Di2015NewLine{Di2015NewLine    myTimer = new System.Windows.Forms.Timer();Di2015NewLine    myTimer.Interval = 7000;Di2015NewLine    myTimer.Tick += new EventHandler(myTimer_Tick);Di2015NewLine}Di2015NewLineDi2015NewLinepublic void PlaySounds(List<String> websites)Di2015NewLine{Di2015NewLine    if (isPlayingSounds)Di2015NewLine    {Di2015NewLine        // Already playing.Di2015NewLine        // Throw exception here, or stop and play new website collection. Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        isPlayingSounds = true;Di2015NewLine        this.websites = websites;Di2015NewLine        PlayNextSound();Di2015NewLine    }Di2015NewLine} Di2015NewLineDi2015NewLineprivate void PlayNextSound()Di2015NewLine{Di2015NewLine    if (index < websites.Count)Di2015NewLine    {Di2015NewLine        webBrowser.Navigate(Uri.EscapeDataString(websites[index]));Di2015NewLine        myTimer.Start();Di2015NewLineDi2015NewLine        // Prepare for next website, if any. Di2015NewLine        index++;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        // Remove reference to object supplied by callerDi2015NewLine        websites = null;Di2015NewLineDi2015NewLine        / Reset index for next call to PlaySounds.Di2015NewLine        index = 0;Di2015NewLineDi2015NewLine        // Reset flag to indicate not playing. Di2015NewLine        isPlayingSounds = false;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void myTimer_Tick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    myTimer.Stop();Di2015NewLine    PlayNextSound();Di2015NewLine}Di2015NewLine
21072505Di2015UniqueSeparatorasync
21072505Di2015UniqueSeparatorasync
21072505Di2015UniqueSeparatorawait
21072505Di2015UniqueSeparatorprivate Task C_Async(int id)Di2015NewLine{Di2015NewLine    // This method executes very fastDi2015NewLine    var idTemp = paddID(id);Di2015NewLine    return D_Async(idTemp);Di2015NewLine}Di2015NewLineDi2015NewLineprivate Task D_Async(string id)Di2015NewLine{Di2015NewLine    // This method executes very fastDi2015NewLine    return E_Async(id);Di2015NewLine}Di2015NewLine
21072505Di2015UniqueSeparatorIndex
21072505Di2015UniqueSeparatorawait
21072505Di2015UniqueSeparatorE_Async
21072505Di2015UniqueSeparatorI/O
21072505Di2015UniqueSeparatorreturn View();
21072505Di2015UniqueSeparatorC_Async
21072505Di2015UniqueSeparatorD_Async
21072549Di2015UniqueSeparator<=
21072549Di2015UniqueSeparatorConsole.WriteLine("Enter Length");Di2015NewLineint length = int.Parse(Console.ReadLine());Di2015NewLinefor (int i = 0; i <= length; i++) Di2015NewLine{ Di2015NewLine  Console.WriteLine(i);Di2015NewLine}Di2015NewLine
21072610Di2015UniqueSeparator  select new { } Di2015NewLine
21072610Di2015UniqueSeparator  select new MyModel  { } Di2015NewLine
21072610Di2015UniqueSeparator    List<MyModel>Di2015NewLine
21072610Di2015UniqueSeparator     @model IEnumerable<MyModel>Di2015NewLine
21072634Di2015UniqueSeparatorBarEditItem
21072634Di2015UniqueSeparatorVisible
21072634Di2015UniqueSeparatorFalse
21072798Di2015UniqueSeparatorclass Announcements
21072798Di2015UniqueSeparatorpublic class Announcements
21072854Di2015UniqueSeparator           this.Icon.Dispose();Di2015NewLine
21072854Di2015UniqueSeparatorprivate void resultButton_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine    ResultForm rf = new ResultForm(this);Di2015NewLine    rf.Icon = this.Icon;Di2015NewLine    rf.Show();Di2015NewLine    this.Enabled = false;Di2015NewLine}Di2015NewLine
21072873Di2015UniqueSeparatorBodyContent
21072873Di2015UniqueSeparator<asp:Content ID="BodyContent" ContentPlaceHolderID="ContentPlaceHolder1" Di2015NewLine             runat="server">Di2015NewLine    <span id="SpanContent" runat="server"></span>Di2015NewLine</asp:Content>Di2015NewLine
21072873Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine     SpanContent.InnerHtml = "<b>Hello!</b>";Di2015NewLine}Di2015NewLine
21072895Di2015UniqueSeparatorpublic int Id { set { mId = value; } get { return mId; } }Di2015NewLine
21072895Di2015UniqueSeparatorvalue
21072988Di2015UniqueSeparator<ListBox.ItemContainerStyle>Di2015NewLine    <Style TargetType="ListBoxItem">Di2015NewLine        <Setter Property="Template">Di2015NewLine            <Setter.Value>Di2015NewLine                <ControlTemplate TargetType="ListBoxItem">Di2015NewLine                    <Border>Di2015NewLine                        <TextBlock HorizontalAlignment="Stretch" Text="{Binding}" />Di2015NewLine                    </Border>Di2015NewLine                </ControlTemplate>Di2015NewLine            </Setter.Value>Di2015NewLine        </Setter>Di2015NewLine    </Style>Di2015NewLine</ListBox.ItemContainerStyle>Di2015NewLine
21073022Di2015UniqueSeparatorDictionary<string, string>
21073022Di2015UniqueSeparatorstring json = @"Di2015NewLine{Di2015NewLine    ""origin-of_error"" : ""error_message"",Di2015NewLine    ""foo"" : ""bar""Di2015NewLine}";Di2015NewLineDi2015NewLinevar dict = JsonConvert.DeserializeObject<Dictionary<string, string>>(json);Di2015NewLineDi2015NewLineforeach (KeyValuePair<string, string> kvp in dict)Di2015NewLine{Di2015NewLine    Console.WriteLine(kvp.Key + ": " + kvp.Value);Di2015NewLine}Di2015NewLine
21073056Di2015UniqueSeparatorReadToEnd()
21073056Di2015UniqueSeparatorReadLine
21073056Di2015UniqueSeparator    HttpWebRequest  request  = (HttpWebRequest)WebRequest.Create("http://localhost:11034/handlers/handler1.ashx");Di2015NewLine    HttpWebResponse response = (HttpWebResponse)request.GetResponse();Di2015NewLineDi2015NewLine    using (response)Di2015NewLine    {Di2015NewLine        StreamReader reader = new StreamReader(response.GetResponseStream());Di2015NewLine        Label1.Text = reader.ReadToEnd();Di2015NewLine    }Di2015NewLine
21073181Di2015UniqueSeparator<asp:ScriptManager ID="ScriptManager1" runat="server">Di2015NewLine    </asp:ScriptManager>Di2015NewLine    <asp:UpdateProgress ID="UpdateProgress1" runat="server">Di2015NewLine        <ProgressTemplate>Di2015NewLine            <img src="ajax-loader.gif" />Di2015NewLine        </ProgressTemplate>Di2015NewLine    </asp:UpdateProgress>Di2015NewLine    <asp:Button ID="Button2" runat="server" Text="Button" />Di2015NewLine    <asp:Panel ID="Panel1" runat="server">Di2015NewLine        <asp:UpdatePanel ID="UpdatePanel1" runat="server">Di2015NewLine            <ContentTemplate>Di2015NewLine                <asp:Button ID="Button1" runat="server" Text="panel" OnClick="Button1_Click" />Di2015NewLine            </ContentTemplate>Di2015NewLine        </asp:UpdatePanel>Di2015NewLine    </asp:Panel>Di2015NewLine    <asp:ModalPopupExtender ID="modalExtender" runat="server" PopupControlID="Panel1"Di2015NewLine        TargetControlID="Button2">Di2015NewLine    </asp:ModalPopupExtender>Di2015NewLine
21073181Di2015UniqueSeparatorprotected void Button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    string script ="document.getElementById(";Di2015NewLine    script += "'";Di2015NewLine    script+=Panel1.ClientID;Di2015NewLine    script += "'";Di2015NewLine    script+=").style.display='none';";Di2015NewLine    ScriptManager.RegisterStartupScript(this, this.GetType(), "A",script , true);Di2015NewLine    System.Threading.Thread.Sleep(2000);Di2015NewLineDi2015NewLine}Di2015NewLine
21073269Di2015UniqueSeparatorvar filterRange = (from row in db.VenuesDi2015NewLine                       group row by true into rDi2015NewLine                       select newDi2015NewLine                       {Di2015NewLine                           minRent = r.Min(x => x.Rent),Di2015NewLine                           maxRent = r.Max(x => x.Rent),Di2015NewLine                           minCapacity = r.Min(x => x.Capacity),Di2015NewLine                           maxCapacity = r.Max(x => x.Capacity)Di2015NewLine                       }).ToList();Di2015NewLine
21073269Di2015UniqueSeparatorViewBag.mr = filterRange.Select(x => x.minRent).ToList();Di2015NewLineViewBag.xr = filterRange.Select(x => x.maxRent).ToList();Di2015NewLine
21073375Di2015UniqueSeparator    this.listView1.Items.Add("Test1");Di2015NewLine    this.listView1.Items.Add("Test2");Di2015NewLineDi2015NewLine    int Index = 0;Di2015NewLineDi2015NewLine    foreach (ListViewItem t in this.listView1.Items)Di2015NewLine    {Di2015NewLine         if (t.Text == "Test1")Di2015NewLine            Index = t.SelectedIndex;Di2015NewLine            break;Di2015NewLine    }Di2015NewLineDi2015NewLine    this.listView1.Items[Index].Selected = true;Di2015NewLine
21073438Di2015UniqueSeparator Form1 frm = new Form1();Di2015NewLine
21073438Di2015UniqueSeparator previewImage frm = new previewImage();Di2015NewLineDi2015NewLine frm.imageUrl=TextBox3.Text;Di2015NewLineDi2015NewLine frm.ShowDialog(this);Di2015NewLine
21073617Di2015UniqueSeparatorThis event (Deactivation) is also raised if the deviceâ€™s lock screen is engaged, unless application idle detection is disabled.
21073617Di2015UniqueSeparatorWhen the user navigates forward, away from an app, after the Deactivated event is raised, the operating system will attempt to put the app into a dormant state. In this state, all of the applicationâ€™s threads are stopped and no processing takes place, but the application remains intact in memory.
21073681Di2015UniqueSeparator<asp:Panel runat="server" ID="popup" CssClass="panelStyle">Di2015NewLine    <input type="button" id="btnCancel" onclick="Cancel()" value="Cancel" />Di2015NewLine</asp:Panel>Di2015NewLineDi2015NewLineDi2015NewLine<script type="text/javascript">Di2015NewLine    function Cancel() {Di2015NewLine        $find("modalBehavior").hide();Di2015NewLine    }Di2015NewLine</script>Di2015NewLine
21073692Di2015UniqueSeparatorControl.Click
21073692Di2015UniqueSeparatorpublic event EventHandler ClickDi2015NewLine
21073692Di2015UniqueSeparatorEventHandler
21073692Di2015UniqueSeparatorpublic delegate void EventHandler(Di2015NewLine    object sender,Di2015NewLine    EventArgs eDi2015NewLine)Di2015NewLine
21073692Di2015UniqueSeparatorvoid SomeClickHandler(object sender, EventArgs e)Di2015NewLine{Di2015NewLine   CountLines(); Di2015NewLine}Di2015NewLine
21073692Di2015UniqueSeparatorClick
21073692Di2015UniqueSeparatoritemCountLines.Click += SomeClickHandler;Di2015NewLine
21073692Di2015UniqueSeparator+=
21073692Di2015UniqueSeparatorClick
21073692Di2015UniqueSeparatorevent
21073692Di2015UniqueSeparatorEventHandler
21073692Di2015UniqueSeparatoritemCountLines.Click -= SomeClickHandler
21073692Di2015UniqueSeparatorClick
21073692Di2015UniqueSeparatorSomeClickHandler
21073692Di2015UniqueSeparatorSomeClickHandler
21073692Di2015UniqueSeparatoritemCountLines.Click += delegate(object sender, EventArgs args)   Di2015NewLine                  {   Di2015NewLine                    CountLines(); Di2015NewLine                  };  Di2015NewLine
21073692Di2015UniqueSeparatoritemCountLines.Click += (sender, args) => CountLines(); Di2015NewLine
21073718Di2015UniqueSeparatorSelectCommand = "SELECT CountryE FROM [CourseProperties].[tbl_Countries]"Di2015NewLine
21073718Di2015UniqueSeparatorSelectCommand = "SELECT CountryE FROM CourseProperties.tbl_Countries"Di2015NewLine
21073754Di2015UniqueSeparatoru => u.Id == 3
21073754Di2015UniqueSeparatorclass CompilerGeneratedClosure { public int UserId; }Di2015NewLinevar closure = new CompilerGeneratedClosure() { UserId = 3 };Di2015NewLineu => u.Id == closure.UserIdDi2015NewLine
21073754Di2015UniqueSeparatorclosure
21073798Di2015UniqueSeparatorOnPropertyChanged("<property Name>")
21074192Di2015UniqueSeparatorcombxPriority.SelectedValue
21074192Di2015UniqueSeparatornull
21074192Di2015UniqueSeparatorcombxPriority.SelectedValue.ToString()
21074192Di2015UniqueSeparatorcombxPriority.SelectedValue
21074357Di2015UniqueSeparatorSortedList<int, SortedList<int, int>>
21074494Di2015UniqueSeparatorWriteableBitmap
21074494Di2015UniqueSeparatorRenderMode
21074494Di2015UniqueSeparatorSoftwareOnly
21074494Di2015UniqueSeparatorusing System.Windows.Interop;Di2015NewLineDi2015NewLinepublic RenderMode RenderMode { get; set; }Di2015NewLineDi2015NewLineRenderMode = RenderMode.SoftwareOnly;Di2015NewLine
21074494Di2015UniqueSeparatorGarbageCollector
21074494Di2015UniqueSeparatorGC.Collect();Di2015NewLine
21074494Di2015UniqueSeparatorClearGrid()
21074494Di2015UniqueSeparatorWhy GC.Collect() doesn't help?
21074494Di2015UniqueSeparatorWriteableBitmap
21074494Di2015UniqueSeparatorgen0
21074494Di2015UniqueSeparatorgen1
21074494Di2015UniqueSeparatorgen2
21074494Di2015UniqueSeparatorgen2
21074680Di2015UniqueSeparatorVirtualization Technology (VTx)
21074680Di2015UniqueSeparatorSystem Security
21074680Di2015UniqueSeparatorSecurity
21074680Di2015UniqueSeparatorVirtualization Technology
21074680Di2015UniqueSeparatorVTx
21074680Di2015UniqueSeparatorVT-x
21074680Di2015UniqueSeparatorHardware Virtualization
21074680Di2015UniqueSeparatorVirtualization
21074680Di2015UniqueSeparatorEnable-WindowsOptionalFeature â€“FeatureName Microsoft-Hyper-V -AllDi2015NewLine
21074680Di2015UniqueSeparatorInstructions
21074680Di2015UniqueSeparatorVT-x
21074899Di2015UniqueSeparatorMenu
21074899Di2015UniqueSeparatorUnitOfWork
21074899Di2015UniqueSeparatorMenu
21074899Di2015UniqueSeparatorMenuRepository
21074899Di2015UniqueSeparatorMenuItems
21074899Di2015UniqueSeparatorMenu
21074899Di2015UniqueSeparatorMenuItems
21074899Di2015UniqueSeparatorMenu
21074899Di2015UniqueSeparatorMenuItem
21074899Di2015UniqueSeparatorLazy
21074899Di2015UniqueSeparatorEager
21074899Di2015UniqueSeparatorExplicit
21074964Di2015UniqueSeparatorpublic class JsData{Di2015NewLinepublic string Blob{get;set;}Di2015NewLine}Di2015NewLine
21074964Di2015UniqueSeparatorpublic User PostUser(string blob)Di2015NewLine
21074964Di2015UniqueSeparatorpublic User PostUser(JsData input) Di2015NewLine
21074968Di2015UniqueSeparatorforeach
21074968Di2015UniqueSeparator.ToList()
21074968Di2015UniqueSeparatorreturn
21074968Di2015UniqueSeparatoryield return
21075082Di2015UniqueSeparatorMath.Min()
21075120Di2015UniqueSeparatorstring
21075120Di2015UniqueSeparatorchar[]
21075120Di2015UniqueSeparatorMarshalAs
21075120Di2015UniqueSeparator[StructLayout(LayoutKind.Sequential, Pack = 1)]Di2015NewLinestruct MyStructDi2015NewLine{Di2015NewLine    public int Var1 { get; set; }Di2015NewLine    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 32)]Di2015NewLine    private char[] _Var2;Di2015NewLine    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 32)]Di2015NewLine    private char[] _Var3;Di2015NewLine    public int Var4 { get; set; }Di2015NewLineDi2015NewLine    public string Var2 {Di2015NewLine        get {Di2015NewLine            return new string(_var2);Di2015NewLine        }Di2015NewLine        set {Di2015NewLine            this._var2 = value.ToCharArray();Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public string Var3 {Di2015NewLine        get {Di2015NewLine            return new string(_var3);Di2015NewLine        }Di2015NewLine        set {Di2015NewLine            this._var3 = value.ToCharArray();Di2015NewLine        }Di2015NewLine    }Di2015NewLine};Di2015NewLine
21075326Di2015UniqueSeparatorprivate void dgvNews_RowHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)Di2015NewLine{Di2015NewLine        var databaseRecordId = e.RowIndex;Di2015NewLine        dgvNews.Rows[e.RowIndex].Cells[0].Value = "AAAAAA";Di2015NewLine}Di2015NewLine
21075349Di2015UniqueSeparatordynamic
21075349Di2015UniqueSeparatorConvert.ChangeType
21075349Di2015UniqueSeparatordynamic
21075349Di2015UniqueSeparatordynamic
21075349Di2015UniqueSeparatordynamic
21075349Di2015UniqueSeparatoris
21075349Di2015UniqueSeparatoras
21075349Di2015UniqueSeparatordynamic
21075349Di2015UniqueSeparatorIHelper<T>
21075349Di2015UniqueSeparatorIHelper<T>
21075349Di2015UniqueSeparatorList<IHelper>
21075349Di2015UniqueSeparatorIHelper<T>
21075349Di2015UniqueSeparatorT
21075349Di2015UniqueSeparatorT
21075349Di2015UniqueSeparatorIHelper
21075349Di2015UniqueSeparatorIHelper<T>
21075349Di2015UniqueSeparatorT
21075349Di2015UniqueSeparatorIHelper
21075349Di2015UniqueSeparatorIHelper
21075349Di2015UniqueSeparatorprivate readonly IList<IHelper> helpers;Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLinepublic void UseHelpers()Di2015NewLine{Di2015NewLine    foreach (dynamic helper in helpers)Di2015NewLine    {Di2015NewLine        UseHelper(helper); // Figures out type arguments itselfDi2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void UseHelper<T>(IHelper<T> helper)Di2015NewLine{Di2015NewLine    // Now you're in a generic method, so can use T appropriatelyDi2015NewLine}Di2015NewLine
21075461Di2015UniqueSeparator        Using sqlConnection As SqlConnection = New SqlConnection(Utilities.ConnectionString)Di2015NewLineDi2015NewLine        End UsingDi2015NewLine
21075521Di2015UniqueSeparatorItem
21075521Di2015UniqueSeparatorItemUnit
21075521Di2015UniqueSeparatoritemDropDownList
21075521Di2015UniqueSeparatorSetPreviousData()
21075521Di2015UniqueSeparatorrowIndex
21075521Di2015UniqueSeparatori
21075521Di2015UniqueSeparatori
21075521Di2015UniqueSeparatorPurchaseMgmtGridView_RowDeleting
21075521Di2015UniqueSeparatorSetPreviousData()
21075521Di2015UniqueSeparatorFindControl
21075521Di2015UniqueSeparatorSetPreviousData
21075521Di2015UniqueSeparatorPurchaseMgmtGridView_RowDeleting
21075521Di2015UniqueSeparator  protected void PurchaseMgmtGridView_RowDeleting(object sender, GridViewDeleteEventArgs e)Di2015NewLine        {Di2015NewLine            SetRowData();Di2015NewLine            if (ViewState["CurrentTable"] != null)Di2015NewLine            {Di2015NewLine                DataTable dt = (DataTable)ViewState["CurrentTable"];Di2015NewLine                DataRow drCurrentRow = null;Di2015NewLine                int rowIndex = Convert.ToInt32(e.RowIndex);Di2015NewLine                if (dt.Rows.Count > 1)Di2015NewLine                {Di2015NewLine                    dt.Rows.Remove(dt.Rows[rowIndex]);Di2015NewLine                    drCurrentRow = dt.NewRow();Di2015NewLine                    ViewState["CurrentTable"] = dt;Di2015NewLine                    PurchaseMgmtGridView.DataSource = dt;Di2015NewLine                    PurchaseMgmtGridView.DataBind();Di2015NewLineDi2015NewLine                    // Delete thisDi2015NewLine                    //for (int i = 0; i < PurchaseMgmtGridView.Rows.Count - 1; i++)Di2015NewLine                    //{Di2015NewLine                    //    PurchaseMgmtGridView.Rows[i].Cells[0].Text = Convert.ToString(i + 1);Di2015NewLine                    //}Di2015NewLine                    SetPreviousData();Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine
21075569Di2015UniqueSeparator((IQueryable<Blog>) mockSet).Provider.Returns(data.Provider);Di2015NewLine
21075569Di2015UniqueSeparator// Create a substitute for DbSet and IQueryable types:Di2015NewLinevar mockSet = Substitute.For<DbSet<Blog>, IQueryable<Blog>>();Di2015NewLineDi2015NewLine// And then as you do:Di2015NewLine((IQueryable<Blog>)mockSet).Provider.Returns(data.Provider);Di2015NewLine...Di2015NewLine
21075617Di2015UniqueSeparatorvar distinctArray = myArray.Distinct().ToArray();Di2015NewLine
21075633Di2015UniqueSeparatorVACUUM
21075633Di2015UniqueSeparatorVACUUM
21075659Di2015UniqueSeparator::
21076093Di2015UniqueSeparatorprotected
21076093Di2015UniqueSeparatorpublic
21076093Di2015UniqueSeparatorwhere T : ServiceBase
21076093Di2015UniqueSeparatorT
21076093Di2015UniqueSeparatorT
21076093Di2015UniqueSeparatorServiceBase
21076096Di2015UniqueSeparatormyDataList.Select((d,i) => new { Position = d.Position, Index = i })Di2015NewLine          .OrderBy(x => Math.Abs(x.Position - position))Di2015NewLine          .Select(x => x.Index)Di2015NewLine          .DefaultIfEmpty(-1) // return -1 if there is no data in myDataListDi2015NewLine          .First();Di2015NewLine
21076096Di2015UniqueSeparatorpublic int GetClosestIndexAt(double position)Di2015NewLine{Di2015NewLine    if (!myDataList.Any())Di2015NewLine        return -1;Di2015NewLineDi2015NewLine    return myDataList.Select((d,i) => new { Position = d.Position, Index = i })Di2015NewLine          .MinBy(x => Math.Abs(x.Position - position))Di2015NewLine          .Index;Di2015NewLine}Di2015NewLine
21076096Di2015UniqueSeparatorpublic static TSource MinBy<TSource, TKey>(Di2015NewLine    this IEnumerable<TSource> source, Func<TSource, TKey> selector)Di2015NewLine{Di2015NewLine    using (IEnumerator<TSource> sourceIterator = source.GetEnumerator())Di2015NewLine    {Di2015NewLine        if (!sourceIterator.MoveNext())            Di2015NewLine            throw new InvalidOperationException("Empty sequence");Di2015NewLineDi2015NewLine        var comparer = Comparer<TKey>.Default;Di2015NewLine        TSource min = sourceIterator.Current;Di2015NewLine        TKey minKey = selector(min);Di2015NewLineDi2015NewLine        while (sourceIterator.MoveNext())Di2015NewLine        {Di2015NewLine            TSource current = sourceIterator.Current;Di2015NewLine            TKey currentKey = selector(current);Di2015NewLineDi2015NewLine            if (comparer.Compare(currentKey, minKey) >= 0)Di2015NewLine                continue;Di2015NewLineDi2015NewLine            min = current;Di2015NewLine            minKey = currentKey;Di2015NewLine        }Di2015NewLineDi2015NewLine        return min;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21076161Di2015UniqueSeparatornamespace Tcp_ServerDi2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        delegate void AddTextCallback(string text);Di2015NewLineDi2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void btnStartServer_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            ThreadPool.QueueUserWorkItem(new WaitCallback(ServerHandler));Di2015NewLine        }Di2015NewLineDi2015NewLine        private void ServerHandler(object args)Di2015NewLine        {Di2015NewLine            TcpListener _listner = new TcpListener(IPAddress.Parse("127.0.0.1"), 7777);Di2015NewLineDi2015NewLine            // Start The Listner:Di2015NewLine            _listner.Start();Di2015NewLineDi2015NewLine            //Show the server is now listening (Note: UI Thread-Safe is required):Di2015NewLine            AddText("Server started - Listening on port 7777");Di2015NewLineDi2015NewLine            //Create a socket to accept - This is a Blocking Call:Di2015NewLine            Socket _sock = _listner.AcceptSocket();Di2015NewLineDi2015NewLine            //When Client Connects show server has accepted the socket:Di2015NewLine            AddText("User from IP " + _sock.RemoteEndPoint);Di2015NewLineDi2015NewLine            while (_sock.Connected)Di2015NewLine            {Di2015NewLineDi2015NewLine                // Create Byte to Receive Data:Di2015NewLine                byte[] _Buffer = new byte[1024];Di2015NewLineDi2015NewLine                // Create integer to hold how large the Data Received is:Di2015NewLine                int _DataReceived = _sock.Receive(_Buffer);Di2015NewLineDi2015NewLine                if (_DataReceived == 0)Di2015NewLine                {Di2015NewLine                    // Socket has been shutdown by the client.Di2015NewLine                    break;Di2015NewLine                }Di2015NewLineDi2015NewLine                // Lets Server Know Message is Received:Di2015NewLine                AddText("Message Received...");Di2015NewLineDi2015NewLine                // Convert Buffer to a String:Di2015NewLine                string _Message = Encoding.ASCII.GetString(_Buffer);Di2015NewLineDi2015NewLine                // Post Message to the Server Window:Di2015NewLine                AddText(_Message);Di2015NewLine            }Di2015NewLineDi2015NewLine            _sock.Close();Di2015NewLine            //When Client disconnect from the server:Di2015NewLine            AddText("Client Disconnected.");Di2015NewLineDi2015NewLine            _listner.Stop();Di2015NewLine            AddText("Server Stop.");Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        private void AddText(string text)Di2015NewLine        {Di2015NewLine            // InvokeRequired required compares the thread ID of the Di2015NewLine            // calling thread to the thread ID of the creating thread. Di2015NewLine            // If these threads are different, it returns true. Di2015NewLine            if (this.listStatus.InvokeRequired)Di2015NewLine            {Di2015NewLine                AddTextCallback d = new AddTextCallback(AddText);Di2015NewLine                this.Invoke(d, new object[] { text });Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                this.listStatus.Items.Add(text);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21076161Di2015UniqueSeparatornamespace Tcp_ClientDi2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        // Defind the TCP Client:Di2015NewLine        TcpClient _Client = null;Di2015NewLine        Stream _Stream = null;Di2015NewLineDi2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void btnConnect_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            _Client = new TcpClient();Di2015NewLineDi2015NewLine            // Connect the TCP Client:Di2015NewLine            _Client.Connect("127.0.0.1", 7777);Di2015NewLineDi2015NewLine            // Show the Client has Connected:Di2015NewLine            listStatus.Items.Add("Connected to Server 127.0.0.1");Di2015NewLineDi2015NewLine            // Create a Stream:                Di2015NewLine            _Stream = _Client.GetStream();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void btnSend_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            if (_Client.Connected)Di2015NewLine            {Di2015NewLine                // Create Instance of an Encoder:Di2015NewLine                ASCIIEncoding _Asc = new ASCIIEncoding();Di2015NewLineDi2015NewLine                byte[] _Buffer = new byte[1024];Di2015NewLineDi2015NewLine                // Create Buffer to Send Message:Di2015NewLine                _Buffer = _Asc.GetBytes(txtMessage.Text);Di2015NewLineDi2015NewLine                // Show Client is Sending Message:Di2015NewLine                listStatus.Items.Add("Tranmitting Message...");Di2015NewLineDi2015NewLine                // Write Message to the Stream:Di2015NewLine                _Stream.Write(_Buffer, 0, _Buffer.Length);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        private void btnDisconnect_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            _Stream.Close();Di2015NewLine            _Stream.Dispose();Di2015NewLine            _Client.Close();Di2015NewLine            listStatus.Items.Add("Disconnected from server.");Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21076485Di2015UniqueSeparator  sql = "";Di2015NewLine  sql = "SELECT dbo.ProductLog.ProductName, AND dbo.ProductLog.ProductName";Di2015NewLine  sql = " WHERE dbo.ProductLog.ProductCode = " + txtProdcutCode.Text + "";Di2015NewLine
21076485Di2015UniqueSeparator  sql += "SELECT ProductName, ProductPrice";Di2015NewLine  sql += "  FROM dbo.ProductLog";Di2015NewLine  sql += " WHERE ProductCode = '" + txtProdcutCode.Text + "'";Di2015NewLine
21076485Di2015UniqueSeparatortxtProductCode.Text
21076514Di2015UniqueSeparatorConsole.Read()
21076514Di2015UniqueSeparatorConsole.ReadLine()
21076514Di2015UniqueSeparatordouble.Parse
21076517Di2015UniqueSeparator  public Dbclass(string Constring)Di2015NewLine    {Di2015NewLine        this.ConStr = Constring;Di2015NewLine        DBcon = new SqlConnection(this.ConStr);Di2015NewLine    }Di2015NewLine
21076517Di2015UniqueSeparator    tryDi2015NewLine    {Di2015NewLine      //.......Di2015NewLine    }Di2015NewLine    catch (Exception err)Di2015NewLine    {Di2015NewLine         string error = err.ToString();Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine         this.DBcon.Close();Di2015NewLine    }Di2015NewLine
21076517Di2015UniqueSeparatorpublic DataSet SelectQuery(string[] coloumns,string[] tables,string cond)Di2015NewLine{Di2015NewLine    using (SqlConnection DBcon= new SqlConnection(this.ConStr))Di2015NewLine    {Di2015NewLine        string col = string.Join(",", coloumns);Di2015NewLine        string tbl = string.Join(",", tables);Di2015NewLine        string selectSQL = "SELECT " + col + " FROM " + tbl + cond;Di2015NewLine        SqlCommand cmd = new SqlCommand(selectSQL, this.DBcon);Di2015NewLine        SqlDataAdapter ada = new SqlDataAdapter();Di2015NewLine        DataSet retrnds = new DataSet();Di2015NewLine        tryDi2015NewLine        {Di2015NewLine             this.DBcon.Open();Di2015NewLine             ada.SelectCommand = cmd;Di2015NewLine             ada.Fill(retrnds);Di2015NewLine        }Di2015NewLine        catch (Exception err)Di2015NewLine        {Di2015NewLine             string error = err.ToString();Di2015NewLine        }Di2015NewLine        //no need for this.DBcon.Close();Di2015NewLineDi2015NewLine        return retrnds;Di2015NewLine    }Di2015NewLine}       Di2015NewLine
21076595Di2015UniqueSeparatorSemaphoreSlim
21076595Di2015UniqueSeparatorWaitAsync
21076595Di2015UniqueSeparatorawait
21076595Di2015UniqueSeparatorSemaphoreSlim _semaphore = new SemaphoreSlim(20);Di2015NewLineDi2015NewLineasync Task DoSomethingAsync()Di2015NewLine{Di2015NewLine    await _semaphore.WaitAsync();Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        // possibly async operations limited to 20Di2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        _semaphore.Release();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21076595Di2015UniqueSeparatorfor(int i=0; i < 100; i++)Di2015NewLine{Di2015NewLine    await DoSomethingAsync();Di2015NewLine}Di2015NewLine
21076658Di2015UniqueSeparatorclass myClass= new myClass();Di2015NewLine
21076658Di2015UniqueSeparatorclass
21076658Di2015UniqueSeparatorvar
21076658Di2015UniqueSeparatormyClass myClass = new myClass();Di2015NewLine// OrDi2015NewLinevar myClass = new myClass();Di2015NewLine
21076658Di2015UniqueSeparatornew customer Di2015NewLine{Di2015NewLine    Id = txtCustomerId.Text;Di2015NewLine    phoneNumber = txtPhonenumber.Text;Di2015NewLine    message = txtMessage.Text;Di2015NewLine}Di2015NewLine
21076658Di2015UniqueSeparator;
21076658Di2015UniqueSeparator,
21076658Di2015UniqueSeparatornew customer Di2015NewLine{Di2015NewLine    Id = txtCustomerId.Text,Di2015NewLine    phoneNumber = txtPhonenumber.Text,Di2015NewLine    message = txtMessage.Text,Di2015NewLine}Di2015NewLine
21076658Di2015UniqueSeparatorstring
21076658Di2015UniqueSeparatorint
21076658Di2015UniqueSeparatorphoneNumber = txtPhonenumber.TextDi2015NewLine
21076658Di2015UniqueSeparatorphoneNumber = int.Parse(txtPhonenumber.Text)Di2015NewLine
21076658Di2015UniqueSeparatorcustomerIdInfo
21076658Di2015UniqueSeparatorAdd()
21076658Di2015UniqueSeparatorcustomerIdInfo.Add(...);Di2015NewLine
21076658Di2015UniqueSeparatormyClass
21076658Di2015UniqueSeparatormyClass.customerIdInfo.Add(...);Di2015NewLine
21076706Di2015UniqueSeparatorthis
21076706Di2015UniqueSeparatorif (MessageBox.Show("Registered Successfully") == DialogResult.OK)Di2015NewLine{Di2015NewLine    this.Close();Di2015NewLine}Di2015NewLine
21076706Di2015UniqueSeparatorthis
21076706Di2015UniqueSeparatorClose();Di2015NewLine
21077192Di2015UniqueSeparatorvar mainWindowInstant = (MainWindow)App.Current.MainWindow;Di2015NewLinemainWindowInstant.Getcanvas.MouseMove += new MouseEventHandler(...);Di2015NewLine
21077665Di2015UniqueSeparatorForm
21077665Di2015UniqueSeparatorForm
21077665Di2015UniqueSeparatorclass DummyFocusControl : Control {Di2015NewLine    DummyFocusControl() {Di2015NewLine        SetStyle(ControlStyles.Selectable, true);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21077665Di2015UniqueSeparatorFocus()
21077665Di2015UniqueSeparatorSelect()
21077665Di2015UniqueSeparatoranotherControl.Focus(); // anotherControll will receive keyboard focusDi2015NewLine
21077705Di2015UniqueSeparatorusing(SqlConnection conn = new  SqlConnection(connString))Di2015NewLineusing(SqlCommand command = new SqlCommand(ProcName, conn))Di2015NewLineusing(SqlDataAdapter da = new SqlDataAdapter(command))Di2015NewLine{Di2015NewLine  command.CommandType = CommandType.StoredProcedure;Di2015NewLine  da.Fill(dt);Di2015NewLine}Di2015NewLine
21077779Di2015UniqueSeparator  string path = System.IO.Path.Combine(@"F:\\", textBox1.Text + ".txt");Di2015NewLine  System.IO.File.WriteAllLines(path, contents);Di2015NewLine
21077809Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    webBrowser1.DocumentText = htmlMessageBody(yourdataGridView).ToString();Di2015NewLine}Di2015NewLine
21077829Di2015UniqueSeparatorContext
21077829Di2015UniqueSeparatorHttpContext.Current
21077913Di2015UniqueSeparatormainForm.Show()
21077913Di2015UniqueSeparatorApplication.Run(new MainForm());Di2015NewLine
21077913Di2015UniqueSeparatorApplication.Run
21077913Di2015UniqueSeparatorShowDialog()
21077913Di2015UniqueSeparatormainForm.Show
21077913Di2015UniqueSeparatorApplication.Run(mainForm)
21078182Di2015UniqueSeparatorxmldata=
21078182Di2015UniqueSeparatorform-urlencoded
21078182Di2015UniqueSeparatorstring dataStr = "xmldata=" + HttpUtility.UrlEncode(XDocumentToString(xml));Di2015NewLinebyte[] data = Encoding.ASCII.GetBytes(dataStr);Di2015NewLine
21078182Di2015UniqueSeparatorclient.Headers.Add("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");Di2015NewLine
21078215Di2015UniqueSeparator public void Process(RenderFieldArgs args)Di2015NewLine   {Di2015NewLine      Assert.ArgumentNotNull((object) args, "args");Di2015NewLine      string fieldTypeKey = args.FieldTypeKey;Di2015NewLine      if (fieldTypeKey != "text" && fieldTypeKey != "single-line text")Di2015NewLine        return;Di2015NewLine      args.WebEditParameters.Add("prevent-line-break", "true");Di2015NewLine    }Di2015NewLine
21078215Di2015UniqueSeparator public void Process(RenderFieldArgs args)Di2015NewLine{Di2015NewLine  Assert.ArgumentNotNull((object) args, "args");Di2015NewLine  string fieldTypeKey = args.FieldTypeKey;Di2015NewLine  if (fieldTypeKey != "text" && fieldTypeKey != "single-line text")Di2015NewLine    return;Di2015NewLine  args.WebEditParameters.Add("prevent-line-break", "true");Di2015NewLine  args.Result.FirstPart = HttpUtility.HtmlEncode(args.Result.FirstPart);Di2015NewLine}Di2015NewLine
21078215Di2015UniqueSeparatornamespace Sitecore.Pipelines.RenderFieldDi2015NewLine{Di2015NewLine  /// <summary>Di2015NewLine  /// Implements the RenderField.Di2015NewLine  /// Di2015NewLine  /// </summary>Di2015NewLine  public class GetMemoFieldValueDi2015NewLine  {Di2015NewLine    /// <summary>Di2015NewLine    /// Gets the field value.Di2015NewLine    /// Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="args">The arguments.</param>Di2015NewLine    public void Process(RenderFieldArgs args)Di2015NewLine    {Di2015NewLine      string fieldTypeKey = args.FieldTypeKey;Di2015NewLine      if (fieldTypeKey != "memo" && fieldTypeKey != "multi-line text")Di2015NewLine        return;Di2015NewLine      string linebreaks = args.RenderParameters["linebreaks"];Di2015NewLine      if (linebreaks == null)Di2015NewLine        return;Di2015NewLine      args.Result.FirstPart = GetMemoFieldValue.Replace(args.Result.FirstPart, linebreaks);Di2015NewLine      args.Result.LastPart = GetMemoFieldValue.Replace(args.Result.LastPart, linebreaks);Di2015NewLine      args.WebEditParameters.Add("linebreak", "br");Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Replaces the specified linebreaks.Di2015NewLine    /// Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="linebreaks">The linebreaks.</param><param name="output">The output.</param>Di2015NewLine    /// <returns>Di2015NewLine    /// The replace.Di2015NewLine    /// </returns>Di2015NewLine    private static string Replace(string output, string linebreaks)Di2015NewLine    {Di2015NewLine      output = output.Replace("\\r\\n", linebreaks);Di2015NewLine      output = output.Replace("\\n\\r", linebreaks);Di2015NewLine      output = output.Replace("\\n", linebreaks);Di2015NewLine      output = output.Replace("\\r", linebreaks);Di2015NewLine      return output;Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
21078273Di2015UniqueSeparatorJoin
21078273Di2015UniqueSeparatorExpression<Func<B, true>>
21078273Di2015UniqueSeparatorList<T> result;Di2015NewLineDi2015NewLinevar param = Expression.Parameter(typeof(B), "x");Di2015NewLinevar trueExp = Expression.Constant(true);Di2015NewLinevar condition = Expression.Equal(Expression.Property(param, prop), trueExp);Di2015NewLinevar whereLambda = Expression.Lambda<Func<B, bool>>(condition, param);Di2015NewLineDi2015NewLineusing (var db = new DataContext())Di2015NewLine{Di2015NewLine    result = db.Table1Di2015NewLine               .Join(db.Table2.Where(whereLambda),Di2015NewLine                     t1 => t1.Id,Di2015NewLine                     t2 => t2.Id,Di2015NewLine                     (t1, t2) => new { t1, t2 })Di2015NewLine               .Select(t => t.t1)Di2015NewLine               .ToList();Di2015NewLine}Di2015NewLinereturn result;Di2015NewLine
21078273Di2015UniqueSeparatorpublic static Expression<Func<T, bool>> GetPropertyCondition<T>(T source, string prop)Di2015NewLine{Di2015NewLine    var param = Expression.Parameter(typeof(T), "x");Di2015NewLine    var trueExp = Expression.Constant(true);Di2015NewLine    var condition = Expression.Equal(Di2015NewLine                        Expression.Property(Di2015NewLine                            Expression.Property(param, "t2"), prop),Di2015NewLine                            trueExp);Di2015NewLine    var whereLambda = Expression.Lambda<Func<T, bool>>(condition, param);Di2015NewLine    return whereLambda;Di2015NewLine}Di2015NewLine
21078273Di2015UniqueSeparatorvar result = new List<A>();Di2015NewLineDi2015NewLinevar anonymous = new { t1 = (A)null, t2 = (B)null };Di2015NewLinevar condition = GetPropertyCondition(anonymous, prop);Di2015NewLineDi2015NewLineusing (var db = new DataContext())Di2015NewLine{Di2015NewLine    result = db.Table1.AsQueryable()Di2015NewLine               .Join(db.Table2.AsQueryable(), t1 => t1.Id, t2 => t2.Id, (t1, t2) => new { t1, t2 })Di2015NewLine               .Where(condition)Di2015NewLine               .Select(t => t.t1)Di2015NewLine               .ToList();Di2015NewLine}Di2015NewLinereturn result;Di2015NewLine
21078273Di2015UniqueSeparatortypeof(anonymous)
21078273Di2015UniqueSeparatorJoin
21078362Di2015UniqueSeparatorParameters.ReferencedAssemblies.Add("System.dll"); // System, System.Net, etc namespacesDi2015NewLineParameters.ReferencedAssemblies.Add("System.Data.dll"); // System.Data namespaceDi2015NewLineParameters.ReferencedAssemblies.Add("System.Data.SQLite.dll"); // System.Data.SqlLite namespaceDi2015NewLineParameters.ReferencedAssemblies.Add("System.Xml.dll"); // System.Xml namespaceDi2015NewLineParameters.ReferencedAssemblies.Add("System.Windows.Forms.dll"); // System.Windows.Forms namespaceDi2015NewLine
21078489Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine    $(document).ready(function () {Di2015NewLine       $("#news_date").datepicker({ dateFormat: 'dd/mm/yy' });Di2015NewLine    });Di2015NewLine</script>Di2015NewLine
21078543Di2015UniqueSeparatorMesh mesh = GetComponent<MeshFilter>().sharedMesh;Di2015NewLineVector3[] vertices = mesh.vertices;Di2015NewLineint[] triangles = mesh.triangles;Di2015NewLine...Di2015NewLine
21078599Di2015UniqueSeparatorroutes
21078599Di2015UniqueSeparator1
21078599Di2015UniqueSeparatorrouteInfo.Element(ns + "route")Di2015NewLine
21078599Di2015UniqueSeparatorroutes
21078599Di2015UniqueSeparatorroutes
21078599Di2015UniqueSeparator1
21078599Di2015UniqueSeparatorroute
21078599Di2015UniqueSeparatorroutes
21078599Di2015UniqueSeparatorElements()
21078599Di2015UniqueSeparatorforeach (var route in StopInfo.Descendants(ns + "routes").Elements())Di2015NewLine    lstResults.Items.Add((string)route);Di2015NewLine
21078599Di2015UniqueSeparatorXElement
21078812Di2015UniqueSeparatornull
21078812Di2015UniqueSeparatornull
21078983Di2015UniqueSeparator<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>Di2015NewLine<script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js"></script>Di2015NewLine<link rel="stylesheet" href="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/themes/ui-lightness/jquery-ui.min.css"/>Di2015NewLine
21078983Di2015UniqueSeparatorEditorFor
21078983Di2015UniqueSeparator@Html.LabelFor(b => b.Date)Di2015NewLine@Html.EditorFor(b => b.Date)Di2015NewLine
21078983Di2015UniqueSeparator$(document).ready(function () {Di2015NewLine    $("#@Html.IdFor(m => m.Date)").datepicker({ dateFormat: 'dd/mm/yy' });Di2015NewLine});Di2015NewLine
21079140Di2015UniqueSeparatorpublic static class ShowResults : MainDi2015NewLine{Di2015NewLine    public static void Results(string item, int counterL, int counterS, int counterB, long tick, int miss)Di2015NewLine    {Di2015NewLine        if (item == "Fbubble")Di2015NewLine        {Di2015NewLine            loadBubble.Text = counterL.ToString();Di2015NewLine            storeBubble.Text = counterS.ToString();Di2015NewLine            branchBubble.Text = counterB.ToString();Di2015NewLine            ticksBubble.Text = tick.ToString();Di2015NewLine            icMissInstrBubble.Text = miss.ToString();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21079140Di2015UniqueSeparatorbutton1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    ShowResults.Results(<String>, <Int32>, <Int32>, <Int32>, <long>, <Int32>);Di2015NewLine}Di2015NewLine
21079157Di2015UniqueSeparator[ForeignKey("UserId")]Di2015NewLinepublic int? UserId { get; set; }Di2015NewLine
21079157Di2015UniqueSeparator[ForeignKey("UserProfile")]Di2015NewLinepublic int UserId { get; set; }Di2015NewLine
21079430Di2015UniqueSeparatorFile.ReadAllLines
21079430Di2015UniqueSeparatorvar lines = File.ReadAllLines("test.txt").Skip(2).ToList();Di2015NewLineforeach(var line in lines)Di2015NewLine{Di2015NewLine    var fileName = line.Split(new char[] { ' ' },StringSplitOptions.RemoveEmptyEntries)[3]Di2015NewLineDi2015NewLine    Console.WriteLine(fileName.Replace("\\\\","/"));Di2015NewLine }Di2015NewLine
21079430Di2015UniqueSeparatorStreamReader
21079430Di2015UniqueSeparatorwhile loop
21079430Di2015UniqueSeparatorEnumerable.Skip
21079653Di2015UniqueSeparator// Get current Internet Connection Profile.Di2015NewLineConnectionProfile internetConnectionProfile = Windows.Networking.Connectivity.NetworkInformation.GetInternetConnectionProfile();Di2015NewLineDi2015NewLine// Check the connection details.Di2015NewLineif (internetConnectionProfile.NetworkAdapter.IanaInterfaceType != IANA_INTERFACE_TYPE_WIFI)Di2015NewLine{Di2015NewLine    // Connection is not a Wi-Fi connection. Di2015NewLine    if (internetConnectionProfile.GetConnectionCost().Roaming)Di2015NewLine    {Di2015NewLine        // User is roaming. Don't send data out.Di2015NewLine        m_bDoNotSendData = true;Di2015NewLine    }Di2015NewLineDi2015NewLine    if (internetConnectionProfile.GetConnectionCost().ApproachingDataLimit)Di2015NewLine    {Di2015NewLine        // User is approaching data limit. Send low-resolution images.Di2015NewLine        m_bSendLowResolutionImage = true;Di2015NewLine    }Di2015NewLineDi2015NewLine    if (internetConnectionProfile.GetConnectionCost().OverDataLimit)Di2015NewLine    {Di2015NewLine        // User is over data limit. Don't send data out.Di2015NewLine        m_bDoNotSendData = true;Di2015NewLine    }Di2015NewLine}Di2015NewLineelseDi2015NewLine{   Di2015NewLine    //Connection is a Wi-Fi connection. Data restrictions are not necessary.                        Di2015NewLine    m_bDoNotSendData = false;Di2015NewLine    m_bSendLowResolutionImage = false;Di2015NewLine}Di2015NewLineDi2015NewLine// Optionally, report the current values in a TextBox control.Di2015NewLinestring cost = string.Empty;Di2015NewLineswitch (internetConnectionProfile.GetConnectionCost().NetworkCostType)Di2015NewLine{Di2015NewLine    case NetworkCostType.Unrestricted:Di2015NewLine        cost += "Cost: Unrestricted";Di2015NewLine        break;Di2015NewLine    case NetworkCostType.Fixed:Di2015NewLine        cost += "Cost: Fixed";Di2015NewLine        break;Di2015NewLine    case NetworkCostType.Variable:Di2015NewLine        cost += "Cost: Variable";Di2015NewLine        break;Di2015NewLine    case NetworkCostType.Unknown:Di2015NewLine        cost += "Cost: Unknown";Di2015NewLine        break;Di2015NewLine    default:Di2015NewLine        cost += "Cost: Error";Di2015NewLine        break;Di2015NewLine}Di2015NewLinecost += "\\n";Di2015NewLinecost += "Roaming: " + internetConnectionProfile.GetConnectionCost().Roaming + "\\n";Di2015NewLinecost += "Over Data Limit: " + internetConnectionProfile.GetConnectionCost().OverDataLimit + "\\n";Di2015NewLinecost += "Approaching Data Limit : " + internetConnectionProfile.GetConnectionCost().ApproachingDataLimit + "\\n";Di2015NewLineDi2015NewLineNetworkStatus.Text = cost;Di2015NewLine
21079728Di2015UniqueSeparatorprivate string emails { get; set; };Di2015NewLine
21079728Di2015UniqueSeparatorDropDownListFor
21079728Di2015UniqueSeparator@Html.DropDownListFor(x => x.emails, Model.GetEmails())Di2015NewLine
21079728Di2015UniqueSeparator[HttpPost]Di2015NewLinepublic ActionResult Send(OverviewViewModel overviewModel)Di2015NewLine{Di2015NewLine    //here is the value from the drop downDi2015NewLine    var theEmail = overviewModel.emails;Di2015NewLine}Di2015NewLine
21079755Di2015UniqueSeparator try    Di2015NewLine  {Di2015NewLine     HttpResponseMessage response = await client.GetAsync("http://www.contoso.com/");Di2015NewLine     response.EnsureSuccessStatusCode();Di2015NewLine     string responseBody = await response.Content.ReadAsStringAsync();Di2015NewLine     // Above three lines can be replaced with new helper method below Di2015NewLine     // string responseBody = await client.GetStringAsync(uri);Di2015NewLineDi2015NewLine     Console.WriteLine(responseBody);Di2015NewLine  }  Di2015NewLine  catch(HttpRequestException e)Di2015NewLine  {Di2015NewLine     Console.WriteLine("\\nException Caught!");  Di2015NewLine     Console.WriteLine("Message :{0} ",e.Message);Di2015NewLine  }Di2015NewLine
21079755Di2015UniqueSeparatorusing (var client = new HttpClient())Di2015NewLine      client.BaseAddress = new Uri(CairoBaseUrl);Di2015NewLine      var getStringTask = client.GetStringAsync(requestUrl);Di2015NewLine      response = await getStringTask;Di2015NewLine
21079755Di2015UniqueSeparator  var getStringTask = await client.GetStringAsync(requestUrl);Di2015NewLine
21079789Di2015UniqueSeparatorConsole.WriteLine("Welcome to BattleShips. What is your name?");Di2015NewLinePlayer player1 = new Player(System.Console.ReadLine());Di2015NewLine
21079789Di2015UniqueSeparatorPlayer player1 = new Player();Di2015NewLineConsole.WriteLine("Welcome to BattleShips. What is your name?");Di2015NewLinevar name = System.Console.ReadLine();Di2015NewLineplayer1.Name = name;Di2015NewLine
21079796Di2015UniqueSeparatorfrom u in repo1.GetUsers()Di2015NewLinejoin r in repo2.GetRoles() on u.UserId equals r.UserIdDi2015NewLinewhere u.UserId = ...Di2015NewLine
21079796Di2015UniqueSeparatorDbSet
21079796Di2015UniqueSeparatorIQueryable
21079796Di2015UniqueSeparatorList
21079796Di2015UniqueSeparatorcontext.Users
21079796Di2015UniqueSeparatorSaveChanges()
21079796Di2015UniqueSeparatorTransactionScope
21079796Di2015UniqueSeparatorDbSet
21079921Di2015UniqueSeparatorpictureBoxArray[1].PictureBox.Parent = pictureBoxArray[0].PictureBoxDi2015NewLine
21079921Di2015UniqueSeparatorpictureBoxArray[1].Parent = pictureBoxArray[0];Di2015NewLineDi2015NewLinepictureBox2.Parent = pictureBox1;Di2015NewLine
21079939Di2015UniqueSeparatorpublic class AllowCrossSiteAttribute : ActionFilterAttribute {Di2015NewLineDi2015NewLine    public override void OnActionExecuted(HttpActionExecutedContext actionExecutedContext)Di2015NewLine    {Di2015NewLine       if (actionExecutedContext.Response != null)Di2015NewLine         actionExecutedContext.Response.Headers.Add("Access-Control-Allow-Origin", "*");Di2015NewLine          base.OnActionExecuted(actionExecutedContext);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21079939Di2015UniqueSeparator[System.Web.Http.AllowAnonymous]Di2015NewLinepublic HttpResponseMessage Options()Di2015NewLine{Di2015NewLine    return new HttpResponseMessage(HttpStatusCode.OK);Di2015NewLine}Di2015NewLine
21079939Di2015UniqueSeparator<system.webServer>Di2015NewLine    <httpProtocol>Di2015NewLine        <customHeaders>Di2015NewLine<add name="Access-Control-Allow-Origin" value="*" />Di2015NewLine            <add name="Access-Control-Allow-Headers" value="Content-Type, Authorization" />Di2015NewLine            <add name="Access-Control-Allow-Methods" value="GET, POST, PUT, DELETE, OPTIONS" />Di2015NewLine        </customHeaders>Di2015NewLine    </httpProtocol>Di2015NewLine</system.webServer>Di2015NewLine
21079939Di2015UniqueSeparatorResponse.AppendHeader("Access-Control-Allow-Origin", "*");Di2015NewLine
21079971Di2015UniqueSeparatorparams
21079971Di2015UniqueSeparatorpublic static void EnableControls(bool enable, params WebControl[] controls)Di2015NewLine{Di2015NewLine    foreach (WebControl c in controls)Di2015NewLine    {Di2015NewLine        if (c != null) c.Enabled = enable;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21079971Di2015UniqueSeparatorvoid
21079971Di2015UniqueSeparatorenable
21079971Di2015UniqueSeparatorWebControls
21079971Di2015UniqueSeparatorEnabled
21079971Di2015UniqueSeparatorTextBox
21079971Di2015UniqueSeparatorLabel
21079971Di2015UniqueSeparatorpublic static
21079971Di2015UniqueSeparatorPage
21079971Di2015UniqueSeparatorDropDownList
21079971Di2015UniqueSeparatorEnableControls(false, dropdown1, dropdown2, dropdown3);Di2015NewLine
21079971Di2015UniqueSeparatorvar manyDropDowns = new DropDownList[]{ dropdown1, ..., dropDown999999 };Di2015NewLineEnableControls(false, manyDropDowns);Di2015NewLine
21080109Di2015UniqueSeparatorpublic class Form1: FormDi2015NewLine{Di2015NewLine     private frm2 _currentInstance = null;Di2015NewLine     ....Di2015NewLineDi2015NewLine     if(_currentInstance != null)Di2015NewLine     {Di2015NewLine         _currentInstance = new frm2();Di2015NewLine         _currentInstance.FormClosed += instanceHasBeenClosed;Di2015NewLine     }Di2015NewLine     _currentInstance.Show();Di2015NewLineDi2015NewLine     ....Di2015NewLineDi2015NewLine     private void instanceHasBeenClosed(object sender, FormClosedEventArgs e)Di2015NewLine     {Di2015NewLine         _currentInstance = null;Di2015NewLine     }Di2015NewLine}Di2015NewLine
21080109Di2015UniqueSeparatorfrm2 f = Application.OpenForms["NameOfForm2"];Di2015NewLineif(f != null)Di2015NewLine   f.BringToFront();Di2015NewLineelseDi2015NewLine{Di2015NewLine   frm2 f = new frm2();Di2015NewLine   f.Show();Di2015NewLine}Di2015NewLine
21080155Di2015UniqueSeparatorModel.Company
21080185Di2015UniqueSeparatorstring query = "select * from Kartice where ID=" + combobox.SelectedItem.ID.ToString() + " AND Datum_Izvedbe BETWEEN @SDate AND @EDate";Di2015NewLine
21080360Di2015UniqueSeparatorstring extraction = text.SubString(text.IndexOf("Password:"), 34)Di2015NewLine
21080398Di2015UniqueSeparatorobject
21080398Di2015UniqueSeparatorint
21080398Di2015UniqueSeparatorobject a = 10; // intDi2015NewLineobject b = new Customer(); // customer objectDi2015NewLineobject c = new Product(); // product objectDi2015NewLineobject d = "Jon"; // stringDi2015NewLineobject e = new { Name = "Felipe", Age = 20 }; // anonymous typeDi2015NewLine
21080398Di2015UniqueSeparatorobject a = "Some Text";Di2015NewLinestring a1 = a.ToString();Di2015NewLineDi2015NewLine// call a string methogDi2015NewLinea1.ToUpper();Di2015NewLine
21080398Di2015UniqueSeparatorDynamic
21080398Di2015UniqueSeparatordynamic a new Class();Di2015NewLinea.Age = 18;Di2015NewLinea.Name = "Jon";Di2015NewLinea.Product = new Product();Di2015NewLineDi2015NewLinea.Name // read a stringDi2015NewLinea.Age // read an intDi2015NewLinea.Product.Name; // read a propertyDi2015NewLine
21080398Di2015UniqueSeparatorvar
21080398Di2015UniqueSeparatorvar a = 10; // intDi2015NewLinevar b = 10d; // doubleDi2015NewLinevar c = "text"; // stringDi2015NewLine
21080792Di2015UniqueSeparatorctrl
21080792Di2015UniqueSeparatorprivate void removeDrawing()Di2015NewLine{Di2015NewLine    foreach (var ctrl in this.Controls)Di2015NewLine    {Di2015NewLine        var shapeContainer = ctrl as ShapeContainer;Di2015NewLine        if (shapeContainer != null)Di2015NewLine        {Di2015NewLine            this.Controls.Remove(shapeContainer);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21080792Di2015UniqueSeparatorOfType
21080792Di2015UniqueSeparatorusing System.Linq;Di2015NewLine...Di2015NewLineDi2015NewLineprivate void removeDrawing()Di2015NewLine{Di2015NewLine    foreach (var ctrl in this.Controls.OfType<ShapeContainer>())Di2015NewLine    {Di2015NewLine        this.Controls.Remove(ctrl);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21080982Di2015UniqueSeparatorTempData.Add("PendingLeaveRequest", lrvm);Di2015NewLine
21080982Di2015UniqueSeparatorif (TempData.ContainsKey("PendingLeaveRequest"))Di2015NewLine{Di2015NewLine  var lrvm = TempData["PendingLeaveRequest"] as NewLeaveRequestViewModel;Di2015NewLine  // Do something with lrvmDi2015NewLine}Di2015NewLine
21081020Di2015UniqueSeparatorif (accesslevel >= 1 && accesslevel <= 3)Di2015NewLine{Di2015NewLine     Response.Redirect(string.Format("Page{0}.aspx", accesslevel));Di2015NewLine}Di2015NewLineelse {Di2015NewLine     Response.Write("ERROR! " + accesslevel);Di2015NewLine}Di2015NewLine
21081020Di2015UniqueSeparatorquery = String.Format("SELECT u_accesslevel FROM users WHERE u_email='{0}';", username);Di2015NewLineint accesslevel = Convert.ToInt32(command.ExecuteScalar());Di2015NewLine
21081020Di2015UniqueSeparatorquery = String.Format("SELECT u_accesslevel FROM users WHERE u_email='{0}';", username);Di2015NewLinecommand.CommandText = query;Di2015NewLineint accesslevel = Convert.ToInt32(command.ExecuteScalar());Di2015NewLine
21081096Di2015UniqueSeparatorvar list = new List<myStuff>();Di2015NewLinevar objectOne = new myStuff(string1, string2, string3);Di2015NewLine// more object hereDi2015NewLinelist.Add(objectOne);Di2015NewLine// list.Add other objects thereDi2015NewLineDi2015NewLineusing(Stream fileStream = File.Open("MyFile.Dat", FileMode.Create))Di2015NewLine{Di2015NewLine  BinaryFormatter serializer = new BinaryFormatter();Di2015NewLine  serializer.Serialize(fileStream, list);Di2015NewLine}Di2015NewLine
21081096Di2015UniqueSeparatorList<myStuff> list;Di2015NewLineusing(Stream fileStream = File.OpenRead("MyFile.DAT"))Di2015NewLine{Di2015NewLine  BinaryFormatter deserializer = new BinaryFormatter();Di2015NewLine  list = (myStuffList<myStuff>)deserializer.Deserialize(fileStream);Di2015NewLine}Di2015NewLine
21081166Di2015UniqueSeparatorprivate void Application_ClosingDi2015NewLine{Di2015NewLine   //objSaveData = null;  // no useDi2015NewLine   IsolatedStorageFile store = IsolatedStorageFile.GetUserStoreForApplication();Di2015NewLine   ... use it to save somethingDi2015NewLine}Di2015NewLineDi2015NewLinepublic class objSaveDataDi2015NewLine{Di2015NewLine// destructors are called in an unpredictable fashion, usually too late. Di2015NewLine//    ~objSaveDataDi2015NewLine//    {Di2015NewLine//      tryDi2015NewLine//      { Di2015NewLine//         IsolatedStorageFile store = IsolatedStorageFile.GetUserStoreForApplication();Di2015NewLine//      }Di2015NewLine// empty catch blocks hide errors, don't do thisDi2015NewLine//      catchDi2015NewLine//      {Di2015NewLine//      }Di2015NewLine//    }Di2015NewLine}Di2015NewLine
21081218Di2015UniqueSeparatorpublic DialogViewController (RootElement root, bool pushing)Di2015NewLine
21081348Di2015UniqueSeparator_
21081348Di2015UniqueSeparatorDel del5 = _ => Notify("http://stackoverflow.com");  Di2015NewLinedel5("whatever - ignored anyway"); // always calls Notify("http://stackoverflow.com")Di2015NewLine
21081348Di2015UniqueSeparatorstatic void Notify2(string siteName, string message) {...}Di2015NewLineDel messageToStackOverflow = message => Di2015NewLine      Notify2 ("http://stackoverflow.com", message);Di2015NewLineDi2015NewLine// calls Notify2 adding first argument SO: Di2015NewLine// Notify2("http://stackoverflow.com", "Useful message to SO")Di2015NewLinemessageToStackOverflow("Useful message to SO");Di2015NewLine
21081509Di2015UniqueSeparatorvar xElements = (from el in myListDi2015NewLine                     where (string)el.Attribute("type") == "a"Di2015NewLine                         select el).ToList();Di2015NewLine
21081509Di2015UniqueSeparatormyList.Elements("q")
21081712Di2015UniqueSeparatorint ipoints
21081712Di2015UniqueSeparatorint[] ipoints
21081847Di2015UniqueSeparatorzakaznik.Insert();Di2015NewLine
21081847Di2015UniqueSeparatorzakaznik.Insert(zakaznik1.ID_zakaznik, zakaznik1.Name, zakaznik1.LastName, zakaznik1.Login, zakaznik1.Password, zakaznik1.Number, zakaznik1.Email, zakaznik1.Adress);Di2015NewLine
21081938Di2015UniqueSeparatorbool
21081938Di2015UniqueSeparatorDataTable dt = new DataTable();Di2015NewLinedt.Columns.Add("First Column", typeof(String));Di2015NewLinedt.Columns.Add("Second Column", typeof(Decimal));Di2015NewLinedt.Columns.Add("Third Column", typeof(bool));Di2015NewLineforeach (var i in Query)Di2015NewLine{Di2015NewLine    List<Object> temp = new List<Object>();Di2015NewLine    temp.Add(i.FirstValue);Di2015NewLine    temp.Add(i.SecondValue);Di2015NewLine    temp.Add(false);  // false => unchecked, true => checked.       Di2015NewLine    dt.Rows.Add(temp.ToArray());Di2015NewLine}Di2015NewLine
21082548Di2015UniqueSeparator   if (tabControl1.SelectedIndex < tabControl1.TabCount)Di2015NewLine        tabControl1.SelectedIndex++;Di2015NewLine
21082639Di2015UniqueSeparatorClick
21082639Di2015UniqueSeparatormyRadioButton1.Click += radio_Click;Di2015NewLinemyRadioButton2.Click += radio_Click;Di2015NewLinemyRadioButton3.Click += radio_Click;Di2015NewLinemyRadioButton4.Click += radio_Click;Di2015NewLinemyRadioButton5.Click += radio_Click;Di2015NewLine
21082639Di2015UniqueSeparatorprivate void radio_Click(Object sender, EventArgs e)Di2015NewLine{Di2015NewLine    //your loop code hereDi2015NewLine}Di2015NewLine
21082781Di2015UniqueSeparatorSystem.Net.WebClient.DownloadString()
21082840Di2015UniqueSeparatorWindows.System.Launcher.LaunchUriAsync(new Uri("fb:"));Di2015NewLine
21083117Di2015UniqueSeparatorod
21083117Di2015UniqueSeparatororder
21083117Di2015UniqueSeparatorOrderDetails
21083117Di2015UniqueSeparatorfrom order in Entity.OrdersDi2015NewLinejoin od in Entity.OrderDetails on order.ID equals od.OrderIDDi2015NewLinewhere order.Status != 2Di2015NewLinegroup od by order.Username into usersDi2015NewLineselect new StatsiticsViewClients()Di2015NewLine{Di2015NewLine     Username = users.Key, Di2015NewLine     Qty = users.Sum(g => g.Quantity)Di2015NewLine}Di2015NewLine
21083213Di2015UniqueSeparatorApplication.DoEvents()
21083213Di2015UniqueSeparatorprivate void lbMethods_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    switch (lbMethods.SelectedIndex)Di2015NewLine    {Di2015NewLine        case (int)Methods.none:Di2015NewLine            break;Di2015NewLine        case (int)Methods.Susan:Di2015NewLine            Log("Starting Susan Edge Detection");Di2015NewLine            Progressing("Please wait for edge detection");Di2015NewLineDi2015NewLine            var dialog = new FrmProcessing();Di2015NewLine            dialog.StartTaskFunc = () =>Di2015NewLine                Task.Run(ProcessSusan);Di2015NewLine            dialog.ShowDialog();Di2015NewLineDi2015NewLine            Log("Detection Finished");Di2015NewLine            Progressing("", false);Di2015NewLine            break;Di2015NewLine        default:Di2015NewLine            break;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic partial class FrmProcessing : FormDi2015NewLine{Di2015NewLine    public Func<Task> StartTaskFunc { get; set; }Di2015NewLineDi2015NewLine    public string description { get; set; }Di2015NewLineDi2015NewLine    public FrmProcessing(string description)Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        lblDescription.Text = description;Di2015NewLineDi2015NewLine        // async event handler for "Form.Load"Di2015NewLine        this.Load += async (s, e) =>Di2015NewLine        {Di2015NewLine            // start the task and await itDi2015NewLine            await StartTaskFunc();Di2015NewLine            // close the modal form when the task finishedDi2015NewLine            this.Close();Di2015NewLine        };Di2015NewLine    }Di2015NewLine}Di2015NewLine
21083213Di2015UniqueSeparatorProcessSusan
21083229Di2015UniqueSeparatorhttp://cbbnideas.com/brydens-website/api/
21083229Di2015UniqueSeparator37Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine <!--All Categories (And Sub Categories)-->Di2015NewLineDi2015NewLine6bd8Di2015NewLine[{"term_id":"64","name":"Argentina","slug":"argentina","term_gr...Di2015NewLine
21083405Di2015UniqueSeparatorInvokeRequired
21083451Di2015UniqueSeparator[dbo].[Companies].[Deleted]
21083451Di2015UniqueSeparatorbit
21083451Di2015UniqueSeparatorCompany.Deleted
21083451Di2015UniqueSeparatortinyint
21083451Di2015UniqueSeparatorSystem.Byte
21083460Di2015UniqueSeparator    public static IEnumerable<IEnumerable<T>> ToInMemoryBatches<T>(this IEnumerable<T> source, int batchSize)Di2015NewLine    {Di2015NewLine        List<T> batch = null;Di2015NewLine        foreach (var item in source)Di2015NewLine        {Di2015NewLine            if (batch == null)Di2015NewLine                batch = new List<T>();Di2015NewLineDi2015NewLine            batch.Add(item);Di2015NewLineDi2015NewLine            if (batch.Count != batchSize)Di2015NewLine                continue;Di2015NewLineDi2015NewLine            yield return batch;Di2015NewLine            batch = null;Di2015NewLine        }Di2015NewLineDi2015NewLine        if (batch != null)Di2015NewLine            yield return batch;Di2015NewLine    }Di2015NewLine
21083515Di2015UniqueSeparatorHyperLink
21083515Di2015UniqueSeparatorStringBuilder
21083515Di2015UniqueSeparatorStringBuilder
21083515Di2015UniqueSeparatorHyperLink
21083515Di2015UniqueSeparator//create the HyperLink controlDi2015NewLineHyperLink link = new HyperLink();Di2015NewLineDi2015NewLine//set the related propertiesDi2015NewLinelink.ID = subjectid;Di2015NewLinelink.ImageUrl = iconUrl;Di2015NewLinelink.NavigateUrl = "~/Webform2.aspx";Di2015NewLinelink.Text = "HyperLink";Di2015NewLineDi2015NewLine//add it to the cell's control collectionDi2015NewLinetCell.Controls.Add(link);Di2015NewLine
21083520Di2015UniqueSeparatorvar process = Process.Start(...);Di2015NewLineprocess.WaitForExit();Di2015NewLine
21083520Di2015UniqueSeparatorstatic void ExecuteCommand(string command)Di2015NewLine{Di2015NewLine    int exitCode;Di2015NewLine    ProcessStartInfo processInfo;Di2015NewLine    Process process;Di2015NewLineDi2015NewLine    processInfo = new ProcessStartInfo("cmd.exe", "/c " + command);Di2015NewLine    processInfo.CreateNoWindow = true;Di2015NewLine    processInfo.UseShellExecute = false;Di2015NewLine    process = Process.Start(processInfo);Di2015NewLine    process.WaitForExit();Di2015NewLine    exitCode = process.ExitCode;Di2015NewLine    process.Close();Di2015NewLine}Di2015NewLine
21083520Di2015UniqueSeparatorExecuteCommand("C:\\app\\Process.bat C:\\app\\files\\uploads c:\\app\\files file2");Di2015NewLine
21083575Di2015UniqueSeparatorSELECT SCOPE_IDENTITY();
21083575Di2015UniqueSeparatorSELECT @@IDENTITY;
21083575Di2015UniqueSeparatorSELECT
21083575Di2015UniqueSeparatorINSERT dbo.Orders(CustomerID,OrderDate) SELECT @CustomerID,@OrderDate;Di2015NewLineSELECT ID = SCOPE_IDENTITY();Di2015NewLine
21083575Di2015UniqueSeparatorExecuteNonQuery()
21083575Di2015UniqueSeparatorSELECT @@IDENTITY
21083575Di2015UniqueSeparatorExecuteScalar
21083658Di2015UniqueSeparatorprivate int GenerateNextId()Di2015NewLine{Di2015NewLine   var file = XDocument.Load("yourFile.xml");  // or pass an XDocument inDi2015NewLine                                               // so you don't have to reload itDi2015NewLineDi2015NewLine   return file.Descendants("SomeElement")Di2015NewLine              .OrderByDescending(x => Convert.ToInt32(x.Attribute("ElementId").Value))Di2015NewLine              .Select(x => Convert.ToInt32(x.Attribute("ElementId").Value))Di2015NewLine              .FirstOrDefault() + 1;Di2015NewLine}Di2015NewLine
21083658Di2015UniqueSeparatorConvert.ToBase64String(Guid.NewGuid().ToByteArray());Di2015NewLine
21083658Di2015UniqueSeparator0b427c5a-1541-4cb4-8995-4e67dac61654Di2015NewLineWnxCC0EVtEyJlU5n2sYWVA==Di2015NewLineDi2015NewLined1205a49-f64b-4418-8449-b1cd52f06624Di2015NewLineSVog0Uv2GESESbHNUvBmJA==Di2015NewLine
21083707Di2015UniqueSeparatorclass ContextItem : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    public string Name;Di2015NewLine    public ICommand Action;Di2015NewLine    public Brush Icon;Di2015NewLine}Di2015NewLineDi2015NewLineObservableCollection<ContextItem> Items {get;set;}Di2015NewLine
21083707Di2015UniqueSeparator<Grid.ContextMenu>Di2015NewLine    <ContextMenu ItemsSource="{Binding Items}/>Di2015NewLine
21083713Di2015UniqueSeparatorpublic partial class MainWindowDi2015NewLine{Di2015NewLine    private VirtualizingStackPanel _panel;Di2015NewLine    public MainWindow()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        DataContext = new MyViewModel();Di2015NewLine    }Di2015NewLineDi2015NewLine    private IList<ChildViewModel> _snapshot = new List<ChildViewModel>();Di2015NewLineDi2015NewLine    private void OnPanelLoaded(object sender, RoutedEventArgs eventArgs)Di2015NewLine    {Di2015NewLine        _panel = (VirtualizingStackPanel)sender;Di2015NewLine        UpdateSnapshot();Di2015NewLine        _panel.ScrollOwner.ScrollChanged += (s,e) => UpdateSnapshot();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void UpdateSnapshot()Di2015NewLine    {Di2015NewLine        var layoutBounds = LayoutInformation.GetLayoutSlot(_panel);Di2015NewLineDi2015NewLine        var onScreenChildren = Di2015NewLine            (from visualChild in _panel.GetChildren()Di2015NewLine             let childBounds = LayoutInformation.GetLayoutSlot(visualChild)Di2015NewLine             where layoutBounds.Contains(childBounds) || layoutBounds.IntersectsWith(childBounds)Di2015NewLine             select visualChild.DataContext).Cast<ChildViewModel>().ToList();            Di2015NewLineDi2015NewLine        foreach (var removed in _snapshot.Except(onScreenChildren))Di2015NewLine        {Di2015NewLine            // TODO: Cancel pending calculations.Di2015NewLine            Console.WriteLine("{0} was removed.", removed.Value);Di2015NewLine        }Di2015NewLine        _snapshot = onScreenChildren;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21083713Di2015UniqueSeparatorpublic static class MyVisualTreeHelpersDi2015NewLine{Di2015NewLine    public static IEnumerable<FrameworkElement> GetChildren(this DependencyObject dependencyObject)Di2015NewLine    {Di2015NewLine        var numberOfChildren = VisualTreeHelper.GetChildrenCount(dependencyObject);Di2015NewLine        return (from index in Enumerable.Range(0, numberOfChildren)Di2015NewLine                select VisualTreeHelper.GetChild(dependencyObject, index)).Cast<FrameworkElement>();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21083713Di2015UniqueSeparatorpublic class MyViewModelDi2015NewLine{Di2015NewLine    public MyViewModel()Di2015NewLine    {Di2015NewLine        Children = new ObservableCollection<ChildViewModel>(GenerateChildren());Di2015NewLine    }Di2015NewLineDi2015NewLine    public ObservableCollection<ChildViewModel> Children { get; set; }Di2015NewLineDi2015NewLine    private static IEnumerable<ChildViewModel> GenerateChildren()Di2015NewLine    {Di2015NewLine        return from value in Enumerable.Range(1, 1000)Di2015NewLine               select new ChildViewModel {Value = value};Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ChildViewModelDi2015NewLine{Di2015NewLine    public int Value { get; set; }Di2015NewLine}Di2015NewLine
21083713Di2015UniqueSeparator<Window x:Class="WpfTest.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        xmlns:wpfTest="clr-namespace:WpfTest"Di2015NewLine        Title="MainWindow" Height="500" Width="500">Di2015NewLine    <ListBox ItemsSource="{Binding Children}">Di2015NewLine        <ListBox.ItemsPanel>Di2015NewLine            <ItemsPanelTemplate>Di2015NewLine                <VirtualizingStackPanel Loaded="OnPanelLoaded" />Di2015NewLine            </ItemsPanelTemplate>Di2015NewLine        </ListBox.ItemsPanel>Di2015NewLineDi2015NewLine        <ListBox.ItemTemplate>Di2015NewLine            <DataTemplate DataType="wpfTest:ChildViewModel">Di2015NewLine                <TextBlock Text="{Binding Value}" />Di2015NewLine            </DataTemplate>Di2015NewLine        </ListBox.ItemTemplate>Di2015NewLine    </ListBox>Di2015NewLine</Window>Di2015NewLine
21083724Di2015UniqueSeparatorpublic class ShippedItemsIndexDi2015NewLine    : AbstractIndexCreationTask<Order, ShippedItemsIndex.Result>Di2015NewLine{Di2015NewLine    public class ResultDi2015NewLine    {Di2015NewLine        public int OrderId { get; set; }Di2015NewLine        public string CustomerName { get; set; }Di2015NewLine        public string ProductName { get; set; }Di2015NewLine        public int Quantity { get; set; }Di2015NewLine        public DateTime ShipDate { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public ShippedItemsIndex()Di2015NewLine    {Di2015NewLine        Map = orders => Di2015NewLine            from order in ordersDi2015NewLine            from line in order.OrderLinesDi2015NewLine            where line.ShipDate != nullDi2015NewLine            select newDi2015NewLine            {Di2015NewLine                order.OrderId,Di2015NewLine                order.CustomerName,Di2015NewLine                line.ProductName,Di2015NewLine                line.Quantity,Di2015NewLine                line.ShipDateDi2015NewLine            };Di2015NewLineDi2015NewLine        StoreAllFields(FieldStorage.Yes);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21083724Di2015UniqueSeparatorvar query = session.Query<Order, ShippedItemsIndex>()Di2015NewLine    .ProjectFromIndexFieldsInto<ShippedItemsIndex.Result>()Di2015NewLine    .OrderByDescending(x => x.ShipDate)Di2015NewLine    .Take(10);Di2015NewLineDi2015NewLinevar results = query.ToList();Di2015NewLine
21083828Di2015UniqueSeparator$args = array( 'post_type' => 'product', 'posts_per_page' => 200, 'product_cat' => 'Alcopops' );Di2015NewLine$loop = new WP_Query( $args );Di2015NewLineecho json_encode($loop->get_posts());Di2015NewLinewp_reset_query(); Di2015NewLine
21083941Di2015UniqueSeparatorList<List<TextBox>> li = new List<List<TextBox>>();    Di2015NewLine
21083941Di2015UniqueSeparatorFlowLayoutPanel
21083941Di2015UniqueSeparatorList<TextBox> litxt = new List<TextBox>();Di2015NewLine
21083941Di2015UniqueSeparatorfor(int i = 0;i<3;i++)Di2015NewLine{Di2015NewLineTextBox txt = new TextBox();Di2015NewLinetxt.Size = new Size(35,20);Di2015NewLinelitxt.Add(txt);Di2015NewLine}  Di2015NewLine
21083941Di2015UniqueSeparatorforeach(TextBox txt in litxt)Di2015NewLine{Di2015NewLineFlowLayoutPanel.Controls.Add(txt);Di2015NewLine}    Di2015NewLine
21083941Di2015UniqueSeparator        public Rough()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void Rough_Load(object sender, EventArgs e)Di2015NewLine        {Di2015NewLineDi2015NewLine        }Di2015NewLine        static int i = 0;Di2015NewLine        private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine           for(int j = 0; j < 3 ; i++,j++)Di2015NewLine           {Di2015NewLine               TextBox txt = new TextBox();Di2015NewLine               txt.Size = new Size(35, 20);Di2015NewLine               txt.Name = i.ToString();Di2015NewLine               flowLayoutPanel1.Controls.Add(txt);Di2015NewLine            }   Di2015NewLine        }Di2015NewLine
21084264Di2015UniqueSeparatorList<string[]> _array = new List<string[]>() { new string[] {"A", "J", "S"}, new string[] { "B", "K", "T" },new string [] {"C", "L", "U"},Di2015NewLine            new string[] {"D", "M", "V"}, new string[] { "E", "N", "W" }, new string[] { "F", "O", "X" },Di2015NewLine            new string[] { "G", "P", "Y" },new string[] { "H", "Q", "Z" }, new string[] { "I", "R" }};Di2015NewLineDi2015NewLinebool _result = _array.Select(a => a.Any(s => Name.ToUpper().Contains(s))).FirstOrDefault();Di2015NewLineDi2015NewLineif(_result)Di2015NewLine    Response.Write("Your name is contained in Array");Di2015NewLineelseDi2015NewLine    Response.Write("Your name is Not Contained in Array");Di2015NewLine
21084264Di2015UniqueSeparatorName
21084352Di2015UniqueSeparatorsession.Get(id)
21084352Di2015UniqueSeparatorsession.Merge()
21084352Di2015UniqueSeparatorSaveOrUpdate()
21084352Di2015UniqueSeparatorISession
21084352Di2015UniqueSeparatorISession
21084352Di2015UniqueSeparatorsession.Merge()
21084352Di2015UniqueSeparatorISession
21084352Di2015UniqueSeparatorpublic override bool OnFlushDirty(object entity, Di2015NewLine    object id, Di2015NewLine    object[] currentState,Di2015NewLine    object[] previousState, Di2015NewLine    string[] propertyNames,Di2015NewLine    IType[] types)     Di2015NewLine
21084369Di2015UniqueSeparatormyCreated.Value = DateTime.Now.ToString("yyyy-MM-ddThh:mm:ss") & "-06:00"Di2015NewLine
21084369Di2015UniqueSeparatormyCreated.Value = DateTime.Now.ToString("s")Di2015NewLine
21084369Di2015UniqueSeparator<customBinding>Di2015NewLine        <binding name="NewBinding0" closeTimeout="00:01:00" openTimeout="00:01:00"Di2015NewLine    receiveTimeout="00:10:00" sendTimeout="00:10:00">Di2015NewLine          <textMessageEncoding messageVersion="Soap11" />Di2015NewLine          <security authenticationMode="MutualCertificate" Di2015NewLine                    requireDerivedKeys ="false"Di2015NewLine                    keyEntropyMode ="ClientEntropy"Di2015NewLine                    includeTimestamp="true" Di2015NewLine                    defaultAlgorithmSuite="Basic128" Di2015NewLine                    allowSerializedSigningTokenOnReply="true"Di2015NewLine                    messageProtectionOrder="SignBeforeEncrypt" Di2015NewLine                    messageSecurityVersion="WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10"Di2015NewLine                    requireSecurityContextCancellation ="false"Di2015NewLine                    enableUnsecuredResponse="true">Di2015NewLine            <secureConversationBootstrap />Di2015NewLine            <localClientSettings detectReplays="false" />Di2015NewLine          </security>Di2015NewLine          <httpsTransport />Di2015NewLine        </binding>Di2015NewLine      </customBinding>Di2015NewLine
21084717Di2015UniqueSeparator....GetHubContext<....
21084717Di2015UniqueSeparatorIHubContext
21084717Di2015UniqueSeparatorIHub
21084734Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Text;Di2015NewLineusing System.Transactions;Di2015NewLineDi2015NewLinenamespace RefSandBocDi2015NewLine{Di2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            Customer customer = new Customer()Di2015NewLine                {Di2015NewLine                    Name = "Foo",Di2015NewLine                    Surname = "Bar"Di2015NewLine                };Di2015NewLineDi2015NewLine            using (SampleAuditEntities dbContext = new SampleAuditEntities())Di2015NewLine            {Di2015NewLine                using (var scope = new TransactionScope(TransactionScopeOption.Required,Di2015NewLine                    new TransactionOptions { IsolationLevel = IsolationLevel.ReadCommitted }))Di2015NewLine                {Di2015NewLine                    InsertAuditTool insertAuditTool = new InsertAuditTool(dbContext);Di2015NewLineDi2015NewLine                    insertAuditTool.TestInsert(customer);Di2015NewLineDi2015NewLine                    //throw new Exception("Test Exception");Di2015NewLine                    scope.Complete();Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            Console.WriteLine("Customer ID = " + customer.ID);Di2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine        catch (Exception ex)Di2015NewLine        {Di2015NewLine            Console.WriteLine(ex.Message);Di2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass InsertAuditToolDi2015NewLine{Di2015NewLine    SampleAuditEntities dbContext;Di2015NewLineDi2015NewLine    public InsertAuditTool(SampleAuditEntities DbContext)Di2015NewLine    {Di2015NewLine        this.dbContext = DbContext;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void TestInsert(Customer InsertedCustomer)Di2015NewLine    {Di2015NewLine        dbContext.Customers.Add(InsertedCustomer);Di2015NewLine        dbContext.SaveChanges();Di2015NewLineDi2015NewLine        //throw new Exception("Test Exception");Di2015NewLineDi2015NewLine        Audit audit = new Audit()Di2015NewLine        {Di2015NewLine            DateTimeInserted = DateTime.Now,Di2015NewLine            InsertedID = InsertedCustomer.IDDi2015NewLine        };Di2015NewLineDi2015NewLine        dbContext.Audits.Add(audit);Di2015NewLine        dbContext.SaveChanges();Di2015NewLineDi2015NewLine        //throw new Exception("Test Exception");Di2015NewLine    }Di2015NewLine}Di2015NewLine}Di2015NewLine
21084851Di2015UniqueSeparatorvar Result = from Period in context.PeriodCostsDi2015NewLine             join Name in context.NameDi2015NewLine                 on new { ID = Period.ID, CCID = Period.CCID }Di2015NewLine                 equals new { ID = Name.PeriodID, CCID = Name.CCID }Di2015NewLine             Period.CCID equals Name.CCID"Di2015NewLine             select Name;Di2015NewLine
21084917Di2015UniqueSeparatorPoint cntr = new Point(this.Width/2, this.Height/2); // cntr Points Center of CircleDi2015NewLine// Count gives Number of Buttons        Di2015NewLineint count = 25; Di2015NewLine// angle gives angle Between each ButtonDi2015NewLinedouble angle = 360/(double)count; Di2015NewLineint radius = 150; // Circle's RadiusDi2015NewLinefor (int i = 0; i < count; i++)Di2015NewLine{Di2015NewLine    Button button = new Button();Di2015NewLine    button.Text = "Button " + i;Di2015NewLine    button.Location = new Point((int)(cntr.X + radius * Math.Cos((angle * i) * Math.PI / 180)),Di2015NewLine        (int)(cntr.Y + radius * Math.Sin((angle * i) * Math.PI / 180)));Di2015NewLine    this.Panle1.Controls.Add(button);Di2015NewLine}Di2015NewLine
21084920Di2015UniqueSeparator private void Walkdirectoryfulldepth(string dirPath, List<string> data)Di2015NewLine        {Di2015NewLine            DirectoryInfo dirInfo = new DirectoryInfo(dirPath);Di2015NewLine            var sorted = dirInfo.GetDirectories("*.*", SearchOption.TopDirectoryOnly).ToList();Di2015NewLine            DirectoryInfo[] subDirs = dirInfo.GetDirectories("*.*", SearchOption.TopDirectoryOnly);Di2015NewLine            string[] strDir=new string[subDirs.Count()];Di2015NewLine            int i =0;Di2015NewLine            foreach (var item in subDirs)Di2015NewLine            {Di2015NewLine                strDir[i] = item.FullName;Di2015NewLine                i++;Di2015NewLine            }Di2015NewLine             NumericComparer nc = new NumericComparer();Di2015NewLine             Array.Sort(strDir, nc);Di2015NewLine             foreach (var item in strDir)Di2015NewLine            {Di2015NewLine                data.Add(Path.GetFileName(item));Di2015NewLine                Walkdirectoryfulldepth(item, data);Di2015NewLine            }Di2015NewLine            //foreach (var item in subDirs)Di2015NewLine            //    Walkdirectoryfulldepth(item.FullName, data);Di2015NewLineDi2015NewLine        }Di2015NewLine
21084920Di2015UniqueSeparatorStrCmpLogicalW
21084920Di2015UniqueSeparatorNumericComparerDi2015NewLineStringLogicalComparerDi2015NewLine
21085166Di2015UniqueSeparatorAjaxControlToolkit
21085166Di2015UniqueSeparator4.5.7.123
21085166Di2015UniqueSeparator3.5.7.123
21085166Di2015UniqueSeparator<add name="ScriptResource"Di2015NewLine     virtualUrl="^~/ScriptResource.axd(.*)"Di2015NewLine     rewriteUrlParameter="IncludeQueryStringForRewrite"Di2015NewLine     destinationUrl="~/ ScriptResource.axd$1" ignoreCase="true"/>Di2015NewLine
21085256Di2015UniqueSeparatorControl.IsKeyLocked
21085256Di2015UniqueSeparatorprivate void Form1_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine  if (Control.IsKeyLocked(Keys.Insert))Di2015NewLine    radioButtonInsert.Checked = true;Di2015NewLine  elseDi2015NewLine    radioButtonOverstrike.Checked = true;Di2015NewLine}Di2015NewLine
21085256Di2015UniqueSeparatorKeys.Insert
21085451Di2015UniqueSeparatorclass MainParser {Di2015NewLine  public MyObject Parse(Filename file){Di2015NewLine    //Build the relevant parser implementation according to the type of the file Di2015NewLine    IParser myParser = ParserFactory.BuildParser(file) Di2015NewLineDi2015NewLine    //Build the intermediate objectDi2015NewLine    DTOObject intermediateObject = myParser.Parse(file);Di2015NewLineDi2015NewLine    //Finish the buildDi2015NewLine    return BuildMyObject(intermediateObject);Di2015NewLine  }Di2015NewLineDi2015NewLine  private MyObject BuildMyObject(DTOObject dtoObject){Di2015NewLine     //Do validation and so onDi2015NewLine  }Di2015NewLine}Di2015NewLine
21085468Di2015UniqueSeparatorpublic int sFunc(string sCol, int iId)Di2015NewLine{Di2015NewLine    var _tableRepository = TableRepository.Entities.Where(x => x.ID == iId).Select(e => e).FirstOrDefault();Di2015NewLine    if (_tableRepository == null) return 0;Di2015NewLineDi2015NewLine    var _value = _tableRepository.GetType().GetProperties().Where(a => a.Name == sCol).Select(p => p.GetValue(_tableRepository, null)).FirstOrDefault();Di2015NewLineDi2015NewLine    return _value != null ? Convert.ToInt32(_value.ToString()) : 0;Di2015NewLine}Di2015NewLine
21085468Di2015UniqueSeparatorsCol
21085553Di2015UniqueSeparatorScriptManager.RegisterStartupScript
21085553Di2015UniqueSeparatorScriptManager.RegisterStartupScript(this, typeof(string), "KEY", "javascript:alert('Alert Called');", true);Di2015NewLine
21085857Di2015UniqueSeparator/**Di2015NewLine * Hash given password.Di2015NewLine * @param string $password Unhashed password.Di2015NewLine * @return string Hashed password.Di2015NewLine */Di2015NewLine public function hashPassword($password) {Di2015NewLine    //this salt will be used in both algorithmsDi2015NewLine    //for bcrypt it is required to look like this,Di2015NewLine    //for sha512 it is not required but it can be used Di2015NewLine    $salt = "$2a$" . PASSWORD_BCRYPT_COST . "$" . PASSWORD_SALT;Di2015NewLineDi2015NewLine    if(PASSWORD_ENCRYPTION == "bcrypt") {Di2015NewLine        $newPassword = crypt($password, $salt);Di2015NewLine    }Di2015NewLine    else {Di2015NewLine        $newPassword = $password;Di2015NewLine        for($i=0; $i<PASSWORD_SHA512_ITERATIONS; $i++)Di2015NewLine            $newPassword = hash('sha512',$salt.$newPassword.$salt);Di2015NewLine    }Di2015NewLineDi2015NewLine    return $newPassword;Di2015NewLine }Di2015NewLine
21085857Di2015UniqueSeparator$2a$
21085857Di2015UniqueSeparatorBlowFish Encryption
21085857Di2015UniqueSeparator$13$
21085857Di2015UniqueSeparatorcost
21085857Di2015UniqueSeparatorbase64
21085857Di2015UniqueSeparatorEksblowfish
21085857Di2015UniqueSeparatorint PASSWORD_BCRYPT_COST = 13;Di2015NewLinestring PASSWORD_SALT = "/8Wncr26eAmxD1l6cAF9F8";Di2015NewLinestring salt = "$2a$" + PASSWORD_BCRYPT_COST + "$" + PASSWORD_SALT;Di2015NewLinestring password  "test123abc";Di2015NewLinevar hash = BCrypt.HashPassword(password, salt);Di2015NewLinetextBox1.Text = hash;Di2015NewLine
21085857Di2015UniqueSeparatortextbox1
21085857Di2015UniqueSeparator$2a$13$/8Wncr26eAmxD1l6cAF9FuVnazDlahXc73He5NB1GKNYG7v3mOOyS
21085857Di2015UniqueSeparatorecho hashPassword("test123abc");Di2015NewLine
21085857Di2015UniqueSeparator$2a$13$/8Wncr26eAmxD1l6cAF9FuVnazDlahXc73He5NB1GKNYG7v3mOOyS
21085857Di2015UniqueSeparator$2a$13$/8Wncr26eAmxD1l6cAF9FuVnazDlahXc73He5NB1GKNYG7v3mOOyS
21085857Di2015UniqueSeparator$2a$13$/8Wncr26eAmxD1l6cAF9FuVnazDlahXc73He5NB1GKNYG7v3mOOyS
21085857Di2015UniqueSeparator/// <summary>Di2015NewLine/// Hash a password using the OpenBSD bcrypt scheme.Di2015NewLine/// </summary>Di2015NewLine/// <param name="password">The password to hash.</param>Di2015NewLine/// <param name="salt">The salt to hash with (perhaps generatedDi2015NewLine/// using <c>BCrypt.GenerateSalt</c>).</param>Di2015NewLine/// <returns>The hashed password.</returns>Di2015NewLinepublic static string HashPassword(string password, string salt) {Di2015NewLine    if (password == null) {Di2015NewLine        throw new ArgumentNullException("password");Di2015NewLine    }Di2015NewLine    if (salt == null) {Di2015NewLine        throw new ArgumentNullException("salt");Di2015NewLine    }Di2015NewLineDi2015NewLine    char minor = (char)0;Di2015NewLineDi2015NewLine    if (salt[0] != '$' || salt[1] != '2') {Di2015NewLine        throw new ArgumentException("Invalid salt version");Di2015NewLine    }Di2015NewLineDi2015NewLine    int offset;Di2015NewLine    if (salt[1] != '$') {Di2015NewLine        minor = salt[2];Di2015NewLine        if (minor != 'a' || salt[3] != '$') {Di2015NewLine            throw new ArgumentException("Invalid salt revision");Di2015NewLine        }Di2015NewLine        offset = 4;Di2015NewLine    } else {Di2015NewLine        offset = 3;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Extract number of roundsDi2015NewLine    if (salt[offset + 2] > '$') {Di2015NewLine        throw new ArgumentException("Missing salt rounds");Di2015NewLine    }Di2015NewLineDi2015NewLine    int rounds = Int32.Parse(salt.Substring(offset, 2), NumberFormatInfo.InvariantInfo);Di2015NewLineDi2015NewLine    byte[] passwordBytes = Encoding.UTF8.GetBytes(password + (minor >= 'a' ? "\\0" : String.Empty));Di2015NewLine    byte[] saltBytes = DecodeBase64(salt.Substring(offset + 3, 22),Di2015NewLine                                    BCRYPT_SALT_LEN);Di2015NewLineDi2015NewLine    BCrypt bcrypt = new BCrypt();Di2015NewLineDi2015NewLine    byte[] hashed = bcrypt.CryptRaw(passwordBytes, saltBytes, rounds);Di2015NewLineDi2015NewLine    StringBuilder rs = new StringBuilder();Di2015NewLineDi2015NewLine    rs.Append("$2");Di2015NewLine    if (minor >= 'a') {Di2015NewLine        rs.Append(minor);Di2015NewLine    }Di2015NewLine    rs.Append('$');Di2015NewLine    if (rounds < 10) {Di2015NewLine        rs.Append('0');Di2015NewLine    }Di2015NewLine    rs.Append(rounds);Di2015NewLine    rs.Append('$');Di2015NewLine    rs.Append(EncodeBase64(saltBytes, saltBytes.Length));Di2015NewLine    rs.Append(EncodeBase64(hashed,Di2015NewLine                           (bf_crypt_ciphertext.Length * 4) - 1));Di2015NewLineDi2015NewLine    return rs.ToString();Di2015NewLine}Di2015NewLine
21086281Di2015UniqueSeparatorvar results = (from l in listDi2015NewLine        group new {l.ValueA, l.ValueB} by l.GroupIdDi2015NewLine        into gDi2015NewLine        select new {GroupId = g.Key, Values = g.ToList()}).ToList();Di2015NewLine
21086281Di2015UniqueSeparatorvar results = (list.GroupBy(l => l.GroupId, l => new {l.ValueA, l.ValueB})Di2015NewLine        .Select(g => new {GroupId = g.Key, Values = g.ToList()})).ToList();Di2015NewLine
21086281Di2015UniqueSeparatorGroupId
21086281Di2015UniqueSeparatorforeach (var result in results)Di2015NewLine{Di2015NewLine    foreach (var value in result.Values)Di2015NewLine    {Di2015NewLine        int valueA = value.ValueA;Di2015NewLine        int valueB = value.ValueB;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21086334Di2015UniqueSeparatorinternal class MidnightTimerDi2015NewLine{Di2015NewLine    internal event EventHandler Elapsed = delegate { };Di2015NewLine    private Timer timer;Di2015NewLine    private DateTime previousRun;Di2015NewLineDi2015NewLine    internal MidnightTimer()Di2015NewLine    {Di2015NewLine        SystemEvents.TimeChanged += SystemEvents_TimeChanged;Di2015NewLineDi2015NewLine        timer = new Timer();Di2015NewLine        timer.AutoReset = false;Di2015NewLine        timer.Elapsed += timer_Elapsed;Di2015NewLine    }Di2015NewLineDi2015NewLine    internal void Start()Di2015NewLine    {Di2015NewLine        previousRun = DateTime.Today;Di2015NewLineDi2015NewLine        TimeSpan timeSpanToMidnight = GetNextMidnight().Subtract(DateTime.Now);Di2015NewLine        timer.Interval = timeSpanToMidnight.TotalMilliseconds;Di2015NewLine        timer.Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void timer_Elapsed(object sender, ElapsedEventArgs e)Di2015NewLine    {Di2015NewLine        if (previousRun != DateTime.Today)Di2015NewLine            Elapsed(this, EventArgs.Empty);Di2015NewLineDi2015NewLine        timer.Stop();Di2015NewLine        Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    private void SystemEvents_TimeChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        timer.Stop();Di2015NewLine        Start();Di2015NewLine    }Di2015NewLineDi2015NewLine    private static DateTime GetNextMidnight()Di2015NewLine    {Di2015NewLine        return DateTime.Today.AddDays(1);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21086334Di2015UniqueSeparatorGetNextMidnight
21086334Di2015UniqueSeparatorAutoReset
21086334Di2015UniqueSeparatorSystemEvents.TimeChanged
21086347Di2015UniqueSeparatorserverRemarksTB.Value = server.remarks;Di2015NewLine
21086347Di2015UniqueSeparatorPage_Load
21086347Di2015UniqueSeparatorGET
21086347Di2015UniqueSeparatorPOST
21086347Di2015UniqueSeparatorPage_Load
21086347Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine        //code to retrieve data from database and store in server instanceDi2015NewLine        if(!IsPostBack)Di2015NewLine            serverRemarksTB.Value = server.remarks;Di2015NewLine }Di2015NewLine
21086368Di2015UniqueSeparatorusing (ClearWhiteDBEntities cwContext = new ClearWhiteDBEntities())Di2015NewLine{Di2015NewLine    var qlstfld = from lstflds in cwContext.tblListFieldsDi2015NewLine                              where lstflds.listId == theLongSrcDi2015NewLine                              select lstflds;Di2015NewLineDi2015NewLine    foreach (var item in qlstfld)Di2015NewLine    {Di2015NewLine        cwContext.ObjectStateManager.ChangeObjectState(item, System.Data.EntityState.Added);Di2015NewLine        item.Id = 0;Di2015NewLine        item.listId = theLongDes; //this field must be change in pasteDi2015NewLine    }Di2015NewLine    cwContext.SaveChanges();Di2015NewLine}Di2015NewLine
21086373Di2015UniqueSeparatorpublic Task(string von, string was, string an, DateTime zeit)Di2015NewLine{Di2015NewLine ...Di2015NewLine}Di2015NewLineDi2015NewLinepublic Task(string von, string was, string an) : this(von, was, an, DateTime.Now)Di2015NewLine{Di2015NewLine  ...Di2015NewLine}Di2015NewLine
21086468Di2015UniqueSeparator myDynCheckBox.CheckedChanged += CBCheckedChanged;Di2015NewLine        private void CBCheckedChanged(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            var temp = sender as CheckBox;Di2015NewLine            if (temp != null)Di2015NewLine            {Di2015NewLine                if (temp.Checked)Di2015NewLine                {Di2015NewLine                    MyButton.Enabled = false;Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    MyButton.Enabled = true;Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine
21086799Di2015UniqueSeparator  Intent intent= new Intent(this.ApplicationContext, typeof(AutoLinkActivity));Di2015NewLine
21086978Di2015UniqueSeparatorWorkingDirectory
21086978Di2015UniqueSeparatorProcessStartInfo
21086978Di2015UniqueSeparatorvar startInfo = new System.Diagnostics.ProcessStartInfoDi2015NewLine{Di2015NewLine  WorkingDirectory = @"The\\Process\\Working\\Directory",Di2015NewLine  WindowStyle = System.Diagnostics.ProcessWindowStyle.Normal,Di2015NewLine  FileName = "cmd.exe",Di2015NewLine  RedirectStandardInput = true,Di2015NewLine  UseShellExecute = falseDi2015NewLine};Di2015NewLine
21087071Di2015UniqueSeparatorIReferenceClock refClock = (IReferenceClock) new SystemClock();Di2015NewLine
21087071Di2015UniqueSeparatorIReferenceClock refClock = myFilter as IReferenceClock;Di2015NewLineIMediaFilter mediaFilter = filterGraph as IMediaFilter;Di2015NewLinemediaFilter.SetSyncSource(refClock);Di2015NewLine
21087086Di2015UniqueSeparatorTreeProvider tree = new TreeProvider(CMSContext.CurrentUser);Di2015NewLineDi2015NewLine// Select root at parentDi2015NewLineTreeNode parentNode = tree.SelectSingleNode(CMSContext.CurrentSiteName, "/", "en-us");Di2015NewLineDi2015NewLine// Create a new instance of the Tree nodeDi2015NewLineTreeNode newNode = TreeNode.New("CMS.MenuItem", tree);Di2015NewLineDi2015NewLine// Set the document's propertiesDi2015NewLinenewNode.DocumentName = "Document name";Di2015NewLinenewNode.DocumentCulture = "en-us";Di2015NewLineDi2015NewLine// Set document type specific fieldsDi2015NewLinenewNode.SetValue("Field1", "value");Di2015NewLineDi2015NewLine// Insert the document into the content treeDi2015NewLineDocumentHelper.InsertDocument(newNode, parentNode, tree);Di2015NewLine
21087478Di2015UniqueSeparatorUIElement.PreviewKeyDown
21087478Di2015UniqueSeparatore.Handled
21087478Di2015UniqueSeparatortrue
21087478Di2015UniqueSeparatorprivate void ListBoxPreviewKeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    if ((Keyboard.Modifiers & ModifierKeys.Control) == ModifierKeys.Control)Di2015NewLine    {Di2015NewLine        // Ctrl Key is pressedDi2015NewLine        if (e.Key == Key.C || e.Key == Key.X) e.Handled = true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21087504Di2015UniqueSeparatorlong
21087504Di2015UniqueSeparatorChar.IsDigit
21087504Di2015UniqueSeparatorChar[] digitsOnly = "3e317188a00577".Where(Char.IsDigit).ToArray();Di2015NewLineif(digitsOnly.Length > 0)Di2015NewLine{Di2015NewLine    long result;Di2015NewLine    if (long.TryParse(new string(digitsOnly), out result))Di2015NewLine    {Di2015NewLine        Console.Write("Successfully parsed to: " + result);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21087504Di2015UniqueSeparatorSuccessfully parsed to: 331718800577
21087504Di2015UniqueSeparatorlong result = long.Parse("3e317188a00577", System.Globalization.NumberStyles.HexNumber);Di2015NewLine
21087504Di2015UniqueSeparator17505812249314679
21087542Di2015UniqueSeparator<ScrollViewer HorizontalScrollBarVisibility="Auto">Di2015NewLine    <!-- place your content controls here -->Di2015NewLine</ScrollViewer>Di2015NewLine
21087550Di2015UniqueSeparatorEntityCollection
21087550Di2015UniqueSeparatorEntityCollection<CustomerEntity>()
21087550Di2015UniqueSeparatornew EntityCollection(new CustomerEntityFactory())
21087550Di2015UniqueSeparatornew EntityCollection<CustomerEntity>();
21087550Di2015UniqueSeparatorvar customerEntity = new CustomerEntity(1);Di2015NewLine
21087550Di2015UniqueSeparatoradapter.FetchEntityCollection(customerEntityColl,null);Di2015NewLine
21087579Di2015UniqueSeparatorManagementBaseObject
21087579Di2015UniqueSeparatorCustomTypeDescriptor
21087579Di2015UniqueSeparatorPropertyDescriptor
21087579Di2015UniqueSeparatorinternal sealed class ManagementObjectPropertDescriptor : PropertyDescriptorDi2015NewLine{Di2015NewLine    private readonly PropertyData propertyData;Di2015NewLineDi2015NewLine    public ManagementObjectPropertDescriptor(PropertyData propertyData)Di2015NewLine        : base(propertyData.Name, null)Di2015NewLine    {Di2015NewLine        this.propertyData = propertyData;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool CanResetValue(object component)Di2015NewLine    {Di2015NewLine        return false;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override Type ComponentTypeDi2015NewLine    {Di2015NewLine        get { return typeof(ManagementObjectTypeDescriptor); }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override object GetValue(object component)Di2015NewLine    {Di2015NewLine        return propertyData.Value;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool IsReadOnlyDi2015NewLine    {Di2015NewLine        get { return true; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override Type PropertyTypeDi2015NewLine    {Di2015NewLine        get { return propertyData.Value != null ? propertyData.Value.GetType() : typeof(object); }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void ResetValue(object component)Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void SetValue(object component, object value)Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool ShouldSerializeValue(object component)Di2015NewLine    {Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic sealed class ManagementObjectTypeDescriptor : CustomTypeDescriptorDi2015NewLine{Di2015NewLine    private PropertyData[] managementObjectProperties;Di2015NewLineDi2015NewLine    public ManagementObjectTypeDescriptor(ManagementBaseObject source)Di2015NewLine    {Di2015NewLine        this.managementObjectProperties = sourceDi2015NewLine            .PropertiesDi2015NewLine            .Cast<PropertyData>()Di2015NewLine            .ToArray();Di2015NewLine    }Di2015NewLineDi2015NewLine    public override PropertyDescriptorCollection GetProperties()Di2015NewLine    {Di2015NewLine        return new PropertyDescriptorCollection(managementObjectPropertiesDi2015NewLine            .Select(p => new ManagementObjectPropertDescriptor(p))Di2015NewLine            .ToArray());Di2015NewLine    }Di2015NewLine}Di2015NewLine
21087579Di2015UniqueSeparatorManagementObjectCollection
21087579Di2015UniqueSeparatorManagementObjectTypeDescriptor
21087579Di2015UniqueSeparator        ManagementScope scope = new ManagementScope(@"\\\\" + strComputer + @"\\root\\cimv2");Di2015NewLine        SelectQuery query = new SelectQuery("Select * From Win32_Service");Di2015NewLineDi2015NewLine        var typeDescriptors = new ObservableCollection<ManagementObjectTypeDescriptor>();Di2015NewLineDi2015NewLine        using (var searcher = new ManagementObjectSearcher(scope, query))Di2015NewLine        {Di2015NewLine            using (var managementObjects = searcher.Get())Di2015NewLine            {Di2015NewLine                foreach (ManagementBaseObject managementObject in managementObjects)Di2015NewLine                {Di2015NewLine                    using (managementObject)Di2015NewLine                    {Di2015NewLine                        typeDescriptors.Add(new ManagementObjectTypeDescriptor(managementObject));Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        dgResults.ItemsSource = new ArrayList(typeDescriptors);Di2015NewLine
21087579Di2015UniqueSeparatorItemsSource
21087579Di2015UniqueSeparatorIList
21087579Di2015UniqueSeparatorDataGrid
21087579Di2015UniqueSeparatorIList<ManagementObjectTypeDescriptor>
21087579Di2015UniqueSeparatorDG
21087579Di2015UniqueSeparatorCustomTypeDescriptor
21087579Di2015UniqueSeparatorIList
21087611Di2015UniqueSeparator*.rtf
21087611Di2015UniqueSeparator*.doc
21087611Di2015UniqueSeparator*.rtf
21087611Di2015UniqueSeparator*.doc
21087611Di2015UniqueSeparatordialog.Filter = "RTF Files (*.rtf)|*.rtf|Wordfile (*.doc)|*.doc|Text Files (*.txt)|*.txt";Di2015NewLine
21087701Di2015UniqueSeparatorpublic struct CityDi2015NewLine{Di2015NewLine    public string cityName { get; set; }Di2015NewLine    public float cityTemp { get; set; }Di2015NewLine}Di2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var cityList = new List<City>();Di2015NewLine        cityList.Add(new CityDi2015NewLine        {Di2015NewLine            cityName = "Stockholm",Di2015NewLine            cityTemp = 22.65fDi2015NewLine        });Di2015NewLine        cityList.Add(new CityDi2015NewLine        {Di2015NewLine            cityName = "London",Di2015NewLine            cityTemp = 25.24fDi2015NewLine        });         Di2015NewLine        Console.WriteLine("List: ");Di2015NewLine        foreach (var city in cityList)Di2015NewLine        {Di2015NewLine            Console.WriteLine(string.Format("City: {0} is currently: {1}oC", city.cityName, city.cityTemp);Di2015NewLine        }Di2015NewLine        Console.ReadKey();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21087701Di2015UniqueSeparatorToString()
21087701Di2015UniqueSeparatorpublic struct CityDi2015NewLine{Di2015NewLine    public string cityName { get; set; }Di2015NewLine    public float cityTemp { get; set; }Di2015NewLine    public override string ToString()Di2015NewLine    {Di2015NewLine        return String.Format("City: {0} is currently: {1}oC", cityName, cityTemp);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21087701Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var cityList = new List<City>();Di2015NewLine        cityList.Add(new CityDi2015NewLine        {Di2015NewLine            cityName = "Stockholm",Di2015NewLine            cityTemp = 22.65fDi2015NewLine        });Di2015NewLine        cityList.Add(new CityDi2015NewLine        {Di2015NewLine            cityName = "London",Di2015NewLine            cityTemp = 25.24fDi2015NewLine        });         Di2015NewLine        Console.WriteLine("List: ");Di2015NewLine        foreach (var city in cityList)Di2015NewLine        {Di2015NewLine            Console.WriteLine(city);Di2015NewLine        }Di2015NewLine        Console.ReadKey();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21087817Di2015UniqueSeparatorRefresh
21087817Di2015UniqueSeparatorUpdate
21087817Di2015UniqueSeparatorAnimateWindow
21087817Di2015UniqueSeparatorThread.Sleep
21087817Di2015UniqueSeparatorRefresh
21087817Di2015UniqueSeparatorTimer
21087877Di2015UniqueSeparatorHasManyToMany(x => x.Tags)Di2015NewLine.Cascade.All();Di2015NewLine
21088034Di2015UniqueSeparatorcmd.Parameters.Add("@JobNumbers", SqlDbType.VarChar, -1);Di2015NewLine
21088059Di2015UniqueSeparatorProvider=Microsoft.ACE.OLEDB.12.0;Data Source='D:\\abc1.xlsx';Extended Properties="Excel 12.0 Xml;HDR=YES";Di2015NewLine
21088231Di2015UniqueSeparatorset
21088231Di2015UniqueSeparatorprivate bool temp;Di2015NewLineDi2015NewLinepublic bool UsedDi2015NewLine{Di2015NewLine    get { return temp; }Di2015NewLine    set { temp= value; }Di2015NewLine}Di2015NewLine
21088292Di2015UniqueSeparatorDirectory.GetFiles
21088292Di2015UniqueSeparatorstring
21088292Di2015UniqueSeparatorstring [] filePaths = Directory.GetFiles(targetDirectory);Di2015NewLine
21088292Di2015UniqueSeparatorpublic string[] RandomizeStrings(string[] arr)Di2015NewLine{Di2015NewLine    List<KeyValuePair<int, string>> list = new List<KeyValuePair<int, string>>();Di2015NewLine    // Add all strings from arrayDi2015NewLine    // Add new random int each timeDi2015NewLine    foreach (string s in arr)Di2015NewLine    {Di2015NewLine        list.Add(new KeyValuePair<int, string>(_random.Next(), s));Di2015NewLine    }Di2015NewLine    // Sort the list by the random numberDi2015NewLine    var sorted = from item in listDi2015NewLine             orderby item.KeyDi2015NewLine             select item;Di2015NewLine    // Allocate new string arrayDi2015NewLine    string[] result = new string[arr.Length];Di2015NewLine    // Copy values to arrayDi2015NewLine    int index = 0;Di2015NewLine    foreach (KeyValuePair<int, string> pair in sorted)Di2015NewLine    {Di2015NewLine        result[index] = pair.Value;Di2015NewLine        index++;Di2015NewLine    }Di2015NewLine    // Return copied arrayDi2015NewLine    return result;Di2015NewLine}Di2015NewLine
21088292Di2015UniqueSeparatorstring[] filePathsToUse = new string[filePaths.Length * 2];Di2015NewLinefilePaths = RandomizeStrings(filePaths);Di2015NewLinefor (int count = 0; count < yourRequiredNumber; count++)Di2015NewLine{Di2015NewLine    filePathsToUse.Add(filePaths(count));Di2015NewLine    filePathsToUse.Add(filePaths(count));Di2015NewLine}Di2015NewLine// Finally, randomize the collection again:Di2015NewLineObservableCollection<string> filePathsToBindTo = new Di2015NewLine    ObservableCollection<string>(RandomizeStrings(filePathsToUse));Di2015NewLine
21088328Di2015UniqueSeparatorprivate void Form1_Load(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            //WebBrowser webBrowser1 = new WebBrowser();Di2015NewLine            webBrowser1.Navigate("http://www.facebook.com");Di2015NewLineDi2015NewLine            webBrowser1.DocumentCompleted += new WebBrowserDocumentCompletedEventHandler(loaded);Di2015NewLineDi2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        private void loaded(object sender, WebBrowserDocumentCompletedEventArgs e)Di2015NewLine        {Di2015NewLine            var bro = sender as WebBrowser;Di2015NewLine            var List = bro.Document.GetElementsByTagName("input");Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine            foreach (HtmlElement Item in List)Di2015NewLine            {Di2015NewLine                String Value = Item.GetAttribute("value");Di2015NewLine                if(Value != null && Value == "Log In")Di2015NewLine                {Di2015NewLine                    MessageBox.Show(Value);Di2015NewLineDi2015NewLine                    bro.Document.GetElementById("email").SetAttribute("value", "Some Email");Di2015NewLine                    bro.Document.GetElementById("pass").SetAttribute("value", "Some Pass");Di2015NewLineDi2015NewLine                    Item.InvokeMember("click");Di2015NewLine                    // avoid RepetitionDi2015NewLine                    bro.DocumentCompleted -= new WebBrowserDocumentCompletedEventHandler(loaded);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine
21088431Di2015UniqueSeparatorValidator.ValidateObject
21088431Di2015UniqueSeparatorBoolean
21088431Di2015UniqueSeparatorpublic static void ValidateObject(Di2015NewLine  Object instance,Di2015NewLine  ValidationContext validationContext,Di2015NewLine  bool validateAllPropertiesDi2015NewLine)Di2015NewLine
21088431Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine  Validator.ValidateObject(change, new ValidationContext(change, null, null), true);Di2015NewLine}Di2015NewLinecatch (Exception ex)Di2015NewLine{Di2015NewLine  Console.WriteLine(ex.Message);Di2015NewLine  Console.ReadLine();Di2015NewLineDi2015NewLine  throw ex;Di2015NewLine}Di2015NewLine
21088457Di2015UniqueSeparatorExcel.Range usedrange = wrkst.UsedRange;Di2015NewLineusedrange.Columns.AutoFit();Di2015NewLine
21088457Di2015UniqueSeparatorusedrange.Rows.AutoFit();Di2015NewLine
21088457Di2015UniqueSeparator  foreach (Excel.Worksheet wrkst in workBook.Worksheets)Di2015NewLine    {Di2015NewLine      Excel.Range usedrange = wrkst.UsedRange;Di2015NewLine      usedrange.Columns.AutoFit();       Di2015NewLine    }Di2015NewLine
21088537Di2015UniqueSeparatorstring DateTime = CT.ToShortDateString();Di2015NewLine
21088537Di2015UniqueSeparatorstring dateTime = CT.ToShortDateString();Di2015NewLine
21088537Di2015UniqueSeparatorDateTime
21088537Di2015UniqueSeparatorDateTime
21088537Di2015UniqueSeparatorDateTime
21088537Di2015UniqueSeparatorNow
21088537Di2015UniqueSeparatorDateTime
21088657Di2015UniqueSeparatorequipment
21088657Di2015UniqueSeparatorAppHost
21088657Di2015UniqueSeparatorJsConfig.EmitCamelCaseNames = true;Di2015NewLine
21088657Di2015UniqueSeparatorlocation
21088657Di2015UniqueSeparatorLocation
21088657Di2015UniqueSeparatortest.html
21088657Di2015UniqueSeparatorbin
21088657Di2015UniqueSeparatorhttp://localhost:7571/test.html
21088657Di2015UniqueSeparator<!doctype html>Di2015NewLine<html>Di2015NewLine    <head>Di2015NewLine        <title>Test</title>Di2015NewLine        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>Di2015NewLine        <script>Di2015NewLine            function send()Di2015NewLine            {Di2015NewLine                // Send data to the serviceDi2015NewLine                $.ajax({Di2015NewLine                    type: "POST",Di2015NewLine                    url: "/equipment/create/DP112",Di2015NewLine                    contentType: "application/json",Di2015NewLine                    data: JSON.stringify({Di2015NewLine                        eMCo: "1",Di2015NewLine                        equipment: "DP112",Di2015NewLine                        location: "Field",Di2015NewLine                        manufacturer: "",Di2015NewLine                        model: "",Di2015NewLine                        modelYr: "2013",Di2015NewLine                        vinNumber: "",Di2015NewLine                        description: "Trevor",Di2015NewLine                        status: "A",Di2015NewLine                        attachToEquip: "BR118",Di2015NewLine                        licensePlateNo: ""Di2015NewLine                    })Di2015NewLine                }).done(function(result){Di2015NewLineDi2015NewLine                });Di2015NewLine            }Di2015NewLine        </script>Di2015NewLine</head>Di2015NewLine<body>Di2015NewLine    <button onclick="send()">Send Request</button>Di2015NewLine</body>Di2015NewLine</html>Di2015NewLine
21088657Di2015UniqueSeparatorhttp://localhost:7571/requestlogs
21088657Di2015UniqueSeparatorPlugins.Add(new RequestLogsFeature());Di2015NewLine
21088657Di2015UniqueSeparatorcontentType
21088657Di2015UniqueSeparatorapplication/json
21088740Di2015UniqueSeparatorA
21088740Di2015UniqueSeparatorAB
21088740Di2015UniqueSeparatorAB
21088740Di2015UniqueSeparatorB
21088740Di2015UniqueSeparatorA
21088788Di2015UniqueSeparator_db.Products.Where(p => CatId.Contains(p.Category.CategoryID));Di2015NewLine
21088788Di2015UniqueSeparator_db.Products.Where(p => p.Categories.Any(c => CatId.Contains(c.CategoryID)));Di2015NewLine
21088788Di2015UniqueSeparatorcategoryIds
21088799Di2015UniqueSeparatorforeach (XElement b in xDoc.Descendants("B"))Di2015NewLine{Di2015NewLine    int seq = 1;Di2015NewLine    foreach (XElement c in b.Elements("C"))Di2015NewLine        c.Add(new XAttribute("Sno", seq++));Di2015NewLine}Di2015NewLine
21088805Di2015UniqueSeparatorCellStyle
21088805Di2015UniqueSeparatorDataGrid
21088805Di2015UniqueSeparatorDragEnter
21088805Di2015UniqueSeparator<DataGrid.CellStyle>Di2015NewLine    <Style TargetType={x:Type DataGridCell}>Di2015NewLine        <EventSetter Event="DragEnter" Handler="OnDataGridCellDragEnter" />Di2015NewLine    </Style>Di2015NewLine</DataGrid.CellStyle>Di2015NewLine
21088805Di2015UniqueSeparatorprivate void OnDataGridCellDragEnter(object sender, DragEventArgs e)Di2015NewLine{Di2015NewLine    var viewModel = ((FrameworkElement)sender).DataContext;Di2015NewLine}Di2015NewLine
21088805Di2015UniqueSeparatorDragEnter
21088805Di2015UniqueSeparatorDragDrop.DoDragDrop
21088805Di2015UniqueSeparatorMouseOver
21088805Di2015UniqueSeparatorDragEnter
21088842Di2015UniqueSeparatorProduct
21088842Di2015UniqueSeparator.Where()
21088842Di2015UniqueSeparator.Mappings(m =>Di2015NewLine    m.AutoMappingsDi2015NewLine     .Add(AutoMap.AssemblyOf<Product>()Di2015NewLine                 .Where(t => t.Namespace ==...Di2015NewLine
21089037Di2015UniqueSeparatordb2.SaveChanges();
21089037Di2015UniqueSeparatornull
21089037Di2015UniqueSeparatordb
21089037Di2015UniqueSeparatorSaveChanges()
21089037Di2015UniqueSeparatordb
21089246Di2015UniqueSeparator$("#dates").datepicker("option", "dateFormat", "dd-mm-yy");   // it will give format dd-mm-yyDi2015NewLine
21089246Di2015UniqueSeparator$("#dates").datepicker("option", "dateFormat", "mm-dd-yy"); // it will give format mm-dd-yyDi2015NewLine
21089246Di2015UniqueSeparator$(".datepicker").datepicker({ dateFormat: 'dd-mm-yy' });Di2015NewLine
21089246Di2015UniqueSeparatorconst string dateformate = "dd/MM/yyyy";Di2015NewLinevar reachDate = DateTime.ParseExact(dates, dateformate, CultureInfo.InvariantCulture);Di2015NewLine
21089287Di2015UniqueSeparatorvar menus = new List<Menu>();Di2015NewLineDi2015NewLineforeach (XmlNode menuNode in nodeList)Di2015NewLine{Di2015NewLine     var groupName = new List<Group>(); // create list hereDi2015NewLineDi2015NewLine     foreach (XmlNode childNode in menuNode)Di2015NewLine        groupName.Add(new Group { name = childNode.Attributes["name"].Value });Di2015NewLineDi2015NewLine     menus.Add(new Menu {Di2015NewLine        name = menuNode.Attributes["name"].Value,Di2015NewLine        group = groupNameDi2015NewLine     });  Di2015NewLine}Di2015NewLine
21089287Di2015UniqueSeparatorvar xdoc = XDocument.Load(file);Di2015NewLinevar menus = xdoc.Descendants("role")Di2015NewLine                .Where(r => (string)r.Attribute("name") == "admin")Di2015NewLine                .Elements("menu")Di2015NewLine                .Select(m => new Menu {Di2015NewLine                    name = (string)m.Attribute("name"),Di2015NewLine                    group = m.Elements("group")Di2015NewLine                                .Select(g => new Group { Di2015NewLine                                     name = (string)g.Attribute("name") Di2015NewLine                                }).ToList()Di2015NewLine                }).ToList();Di2015NewLine
21089287Di2015UniqueSeparatorvar menus = xdoc.XPathSelectElements("//role[@name='admin']/menu")Di2015NewLine                .Select(m => new Menu { /* create menu as above */ })Di2015NewLine                .ToList();Di2015NewLine
21089287Di2015UniqueSeparatorpublic class MenuDi2015NewLine{Di2015NewLine    public string Name { get; set; }Di2015NewLine    public List<Group> Groups { get; set; }Di2015NewLine}Di2015NewLine
21089368Di2015UniqueSeparatorJObject o = JObject.Parse(response);Di2015NewLineDi2015NewLineswitch (o.First.First.Path)Di2015NewLine{Di2015NewLine    case "Players":Di2015NewLine        // do stuff Di2015NewLine        break;Di2015NewLine    // ...Di2015NewLine}Di2015NewLine
21089416Di2015UniqueSeparatorpublic string Text {Di2015NewLine    get;Di2015NewLine    set;Di2015NewLine}Di2015NewLine
21089416Di2015UniqueSeparatorpublic event EventHandler TextChanged;Di2015NewLineDi2015NewLineprivate string _text;Di2015NewLinepublic string Text {Di2015NewLine    get { return _text; }Di2015NewLine    set {  _text = value; TextChanged.Raise(this);  }Di2015NewLine}Di2015NewLine
21089534Di2015UniqueSeparatorbase.Configuration.LazyLoadingEnabled = false;
21089534Di2015UniqueSeparatorSkipstoneContext
21089534Di2015UniqueSeparatorpublic SkipstoneContext()Di2015NewLine    : base("DefaultConnection")Di2015NewLine{Di2015NewLine    base.Configuration.LazyLoadingEnabled = false;Di2015NewLine}Di2015NewLine
21089752Di2015UniqueSeparatorInvoke
21089752Di2015UniqueSeparatorBeginInvoke
21089752Di2015UniqueSeparatorInvoke
21089851Di2015UniqueSeparatorif
21089851Di2015UniqueSeparatorelse
21089851Di2015UniqueSeparatori % 5
21089851Di2015UniqueSeparatori
21089851Di2015UniqueSeparator    for (int i = 1; i <= value; i++)Di2015NewLine    {Di2015NewLine        if (i % 3 == 0)            Di2015NewLine            ViewBag.Output += "Fizz ";             Di2015NewLineDi2015NewLine        if (i % 5 == 0)            Di2015NewLine            ViewBag.Output += "Buzz ";Di2015NewLineDi2015NewLine        if ((i % 3 != 0) && (i % 5 != 0))Di2015NewLine            ViewBag.Output += i.ToString() + " ";            Di2015NewLine    }Di2015NewLine
21089851Di2015UniqueSeparatorelse
21089851Di2015UniqueSeparator    for (int i = 1; i <= value; i++)Di2015NewLine    {Di2015NewLine        if (i % 3 == 0)Di2015NewLine        {          Di2015NewLine            ViewBag.Output += "Fizz ";Di2015NewLineDi2015NewLine            if (i % 5 == 0)Di2015NewLine                ViewBag.Output += "Buzz ";             Di2015NewLine        }Di2015NewLine        else if (i % 5 == 0)Di2015NewLine        {Di2015NewLine            ViewBag.Output += "Buzz "Di2015NewLine        }Di2015NewLine        else // neither divided by 3 nor by 5Di2015NewLine        {Di2015NewLine           ViewBag.Output += i.ToString() + " ";Di2015NewLine        }Di2015NewLine    }Di2015NewLine
21089851Di2015UniqueSeparatorvar valuesToCheck = new Dictionary<int, string> {Di2015NewLine    { 3, "Fizz" },Di2015NewLine    { 5, "Buzz" }Di2015NewLine};Di2015NewLineDi2015NewLinefor (int i = 1; i <= value; i++)Di2015NewLine{Di2015NewLine     bool divisorFound = false;Di2015NewLineDi2015NewLine     foreach(var kvp in valuesToCheck)Di2015NewLine     {Di2015NewLine         if (i % kvp.Key == 0)Di2015NewLine         {Di2015NewLine             divisorFound = true;Di2015NewLine             ViewBag.Output += kvp.Value + " ";Di2015NewLine         }Di2015NewLine     }Di2015NewLineDi2015NewLine     if (!divisorFound)Di2015NewLine         ViewBag.Output += i + " ";Di2015NewLine}Di2015NewLine
21089912Di2015UniqueSeparatorItemsPanel
21089912Di2015UniqueSeparatorItemsSource
21089912Di2015UniqueSeparatorprivate void TextBlock_OnTap(object sender, GestureEventArgs e)Di2015NewLine{Di2015NewLine    var sourceObject = ((FrameworkElement) sender).DataContext as TypeOfLocation;Di2015NewLine    int index = ViewModel.Locations.IndexOf(item => item.City == sourceObject.City);Di2015NewLine}Di2015NewLine
21089912Di2015UniqueSeparatorpublic MyViewModel ViewModelDi2015NewLine{  Di2015NewLine    get { return (MyViewModel) this.DataContext; }Di2015NewLine}Di2015NewLine
21090003Di2015UniqueSeparatorprivate Thread _thread;Di2015NewLineDi2015NewLinepublic DistanceForm()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLineDi2015NewLine    _thread = new Thread(new ThreadStart(totalDistance));Di2015NewLine    _thread.Start();Di2015NewLine}Di2015NewLineDi2015NewLinepublic void FormClosed(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    killThread = true;Di2015NewLine    _thread.Join();Di2015NewLine}Di2015NewLine
21090003Di2015UniqueSeparatorprivate Thread _thread;Di2015NewLineprivate ManualResetEvent _started = new ManualResetEvent(false);Di2015NewLineprivate ManualResetEvent _terminating = new ManualResetEvent(false);Di2015NewLineprivate ManualResetEvent _terminated = new ManualResetEvent(false);Di2015NewLineDi2015NewLinepublic void InitializeComponent()Di2015NewLine{Di2015NewLine    _thread = new Thread(() => totalDistance());Di2015NewLine    _thread.Start();Di2015NewLineDi2015NewLine    // wait until the thread is started.Di2015NewLine    _started.WaitOne();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void totalDistance()Di2015NewLine{Di2015NewLine    // do some initialization stuff..Di2015NewLineDi2015NewLine    // Set started.Di2015NewLine    _started.Set();Di2015NewLine    while(!_terminating.WaitOne(0))Di2015NewLine    {Di2015NewLine        // ...Di2015NewLine    }Di2015NewLine    _terminated.Set();Di2015NewLine}Di2015NewLineDi2015NewLinepublic void FormClosed(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // request for terminating.Di2015NewLine    _terminating.Set();Di2015NewLine    // wait until it's terminated.Di2015NewLine    _terminated.WaitOne();Di2015NewLine}Di2015NewLine
21090003Di2015UniqueSeparatorstarted
21090060Di2015UniqueSeparatorLast block incomplete in decryption
21090060Di2015UniqueSeparatorcipher.Init(false, new KeyParameter(Encoding.UTF8.GetBytes(KEY)));
21090098Di2015UniqueSeparator<asp:Repeater runat="server" ID="rptFire">Di2015NewLine    <ItemTemplate>Di2015NewLine        <tr>Di2015NewLine            <td>Di2015NewLine                <%#Eval("LocationName") %>Di2015NewLine            </td>Di2015NewLine            <td>Di2015NewLine                <%# Eval("SqrMtr") %>Di2015NewLine            </td>Di2015NewLine            <td>Di2015NewLine                <%#String.Format("{0}", Convert.ToInt32(Eval("SqrMtr")) * Convert.ToInt32(Eval("PPI"))) %>Di2015NewLine            </td>Di2015NewLine            <td>Di2015NewLine                <%# Eval("PPI") %>Di2015NewLine            </td>Di2015NewLine            <td>Di2015NewLine                <%# String.Format("{0}",Convert.ToInt32(Eval("SqrMtr")) * Convert.ToInt32(Eval("MDPI"))) %>Di2015NewLine            </td>Di2015NewLine            <td>WORK OUT</td>Di2015NewLine            <td>WORK OUT</td>Di2015NewLineDi2015NewLine        </tr>Di2015NewLine    </ItemTemplate>Di2015NewLine</asp:Repeater>Di2015NewLine
21090343Di2015UniqueSeparatordbEntry.Property(propertyName).GetType()Di2015NewLine
21090343Di2015UniqueSeparatorDateTime?
21090343Di2015UniqueSeparatorModifiedType
21090343Di2015UniqueSeparatorDateTime?
21090343Di2015UniqueSeparatorAuditZone
21090343Di2015UniqueSeparatorvar auditExcludedProps = dbEntry.Entity.GetType()Di2015NewLine                                       .GetProperties()Di2015NewLine                                       .Where(p => p.GetCustomAttributes(typeof(DoNotAudit), false).Any())Di2015NewLine                                       .Select(p => p.Name)Di2015NewLine                                       .ToList();Di2015NewLineDi2015NewLineforeach (string propertyName in dbEntry.OriginalValues.PropertyNames)Di2015NewLine{Di2015NewLineDi2015NewLine    var doNotAUditDefined = auditExcludedProps.Contains(propertyName);Di2015NewLineDi2015NewLine    ...Di2015NewLine}Di2015NewLine
21090343Di2015UniqueSeparatordbEntry.Entity.GetType()
21090343Di2015UniqueSeparatorAuditZone
21090343Di2015UniqueSeparatorModifiedDate
21090397Di2015UniqueSeparatorprivate void GetRepliesStats_Load(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            WebBrowser bro = new WebBrowser();Di2015NewLine            bro.Navigate("http://library.islamweb.net/hadith/RawyDetails.php?RawyID=1");Di2015NewLine            bro.DocumentCompleted += new WebBrowserDocumentCompletedEventHandler(BrowsingCompleted);Di2015NewLineDi2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLineprivate void BrowsingCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)Di2015NewLine            {Di2015NewLine                WebBrowser browser = sender as WebBrowser;Di2015NewLineDi2015NewLine                Stream documentStream = browser.DocumentStream;Di2015NewLine                StreamReader streamReader = new StreamReader(documentStream, Encoding.GetEncoding("windows-1256"));Di2015NewLineDi2015NewLine                documentStream.Position = 0L;Di2015NewLine                String My_Result = streamReader.ReadToEnd();Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLine
21090402Di2015UniqueSeparatorDragDropBehaviour
21090402Di2015UniqueSeparatorBehavior<T>
21090402Di2015UniqueSeparatorListBox
21090447Di2015UniqueSeparatorprivate void toolStripComboBox_size_SelectedIndexChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    float size = float.Parse(((ToolStripComboBox)sender).SelectedItem.ToString());Di2015NewLine    SetFontSize(richTextBox1, size);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void SetFontSize(RichTextBox rtb, float size)Di2015NewLine{Di2015NewLine    int selectionStart = rtb.SelectionStart;Di2015NewLine    int selectionLength = rtb.SelectionLength;Di2015NewLine    int selectionEnd = selectionStart + selectionLength;Di2015NewLine    for (int x = selectionStart; x < selectionEnd; ++x)Di2015NewLine    {Di2015NewLine        // Set temporary selectionDi2015NewLine        rtb.Select(x, 1);Di2015NewLine        // Toggle font style of the selection   Di2015NewLine        rtb.SelectionFont = new Font(rtb.SelectionFont.FontFamily, size, rtb.SelectionFont.Style);Di2015NewLine    }Di2015NewLine    // Restore the original selectionDi2015NewLine    rtb.Select(selectionStart, selectionLength);Di2015NewLine}Di2015NewLine
21090500Di2015UniqueSeparatorstatic int[] Base64ToIntArray3(string base64, int size) {Di2015NewLine  byte[] data = Convert.FromBase64String(base64);Di2015NewLine  int cnt = data.Length / size;Di2015NewLine  int[] res = new int[cnt];Di2015NewLine  for (int i = 0; i < cnt; i++) {Di2015NewLine    switch (size) {Di2015NewLine      case 1: res[i] = data[i]; break;Di2015NewLine      case 2: res[i] = BitConverter.ToInt16(data, i * 2); break;Di2015NewLine      case 3: res[i] = data[i * 3] + data[i * 3 + 1] * 256 + data[i * 3 + 2] * 65536; break;Di2015NewLine      case 4: res[i] = BitConverter.ToInt32(data, i * 4); break;Di2015NewLine    }Di2015NewLine  }Di2015NewLine  return res;Di2015NewLine}Di2015NewLine
21090628Di2015UniqueSeparatorRXTX
21090642Di2015UniqueSeparator[1, 2, 3, 4, 3, 1, 5]Di2015NewLine
21090642Di2015UniqueSeparatorc
21090642Di2015UniqueSeparator1, 2, 3, 4, 4, 4, 5Di2015NewLine
21090642Di2015UniqueSeparator5
21090678Di2015UniqueSeparatorExcept
21090678Di2015UniqueSeparatorList<myListclass> liFinal = liAll.Except(liJoin).ToList();  Di2015NewLine
21090678Di2015UniqueSeparatorIEquatable<T>
21090678Di2015UniqueSeparatorpublic class myListclass : IEquatable<myListclass>Di2015NewLine{Di2015NewLine    public Nullable<decimal> ClassId { get; set; }Di2015NewLine    public Nullable<decimal> SectionId { get; set; }Di2015NewLine    public Nullable<decimal> MediumId { get; set; }Di2015NewLine    public Nullable<decimal> StreamId { get; set; }Di2015NewLine    public Nullable<decimal> ShiftId { get; set; }Di2015NewLineDi2015NewLine    public bool Equals(myListclass other)Di2015NewLine    {Di2015NewLine        returnDi2015NewLine            other != null &&Di2015NewLine            this.ClassId == other.ClassId &&Di2015NewLine            this.SectionId == other.SectionId &&Di2015NewLine            this.MediumId == other.MediumId &&Di2015NewLine            this.StreamId == other.StreamId &&Di2015NewLine            this.ShiftId == other.ShiftId;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool Equals(object obj)Di2015NewLine    {Di2015NewLine        return this.Equals(obj as myListclass);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override int GetHashCode()Di2015NewLine    {Di2015NewLine        // http://stackoverflow.com/a/263416/1149773Di2015NewLine        uncheckedDi2015NewLine        {Di2015NewLine            int hash = 17;Di2015NewLine            hash = hash * 23 + ClassId.GetHashCode();Di2015NewLine            hash = hash * 23 + SectionId.GetHashCode();Di2015NewLine            hash = hash * 23 + MediumId.GetHashCode();Di2015NewLine            hash = hash * 23 + StreamId.GetHashCode();Di2015NewLine            hash = hash * 23 + ShiftId.GetHashCode();Di2015NewLine            return hash;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}  Di2015NewLine
21090678Di2015UniqueSeparatorGetHashCode()
21090848Di2015UniqueSeparatorstatic void Read<TKey, TValue(Dictionary<TKey, TValue> dict) {Di2015NewLine foreach(var keyValuePair in dict) { }Di2015NewLine}Di2015NewLine
21090848Di2015UniqueSeparatorMakeGenericMethod
21090848Di2015UniqueSeparatorRead((dynamic)value);Di2015NewLine
21090941Di2015UniqueSeparatorDaysOfTheWeek
21090941Di2015UniqueSeparatorFlags
21090941Di2015UniqueSeparatorDaysOfWeek = DaysOfTheWeek.Monday | DaysOfTheWeek.Tuesday | DaysOfTheWeek.WednesdayDi2015NewLine             | DaysOfTheWeek.Thursday | DaysOfTheWeek.Friday | DaysOfTheWeek.SaturdayDi2015NewLine
21091032Di2015UniqueSeparatorpublic interface IParentDi2015NewLine{Di2015NewLine    bool MyFunction();Di2015NewLine}Di2015NewLine
21091032Di2015UniqueSeparatorParent
21091032Di2015UniqueSeparatorIParent
21091032Di2015UniqueSeparatorprivate void button3_Click(object sender, EventArgs e)Di2015NewLine{            Di2015NewLine    if (Parent.MyFunction())        Di2015NewLine        this.Close();Di2015NewLine}Di2015NewLine
21091154Di2015UniqueSeparatorpublic static string ByteArrayToString(byte[] ba)Di2015NewLine{Di2015NewLine   string hex = BitConverter.ToString(ba);Di2015NewLine   return hex.Replace("-","");Di2015NewLine}Di2015NewLine
21091256Di2015UniqueSeparatorvar items = value.Cast<int?>().ToList();Di2015NewLine
21091294Di2015UniqueSeparatorClick
21091294Di2015UniqueSeparatorCommand
21091294Di2015UniqueSeparatorupdateClientPriceButton.Command += new System.EventHandler(updateClientPriceButton_Command);Di2015NewLineupdateClientPriceButton.CommandName = "SomeName";Di2015NewLineupdateClientPriceButton.CommandArgument = "test_value";Di2015NewLine
21091294Di2015UniqueSeparatorprotected void updateClientPriceButton_Command(object sender, CommandEventArgs e)Di2015NewLine{Di2015NewLine    // Do something with e.CommandName and e.CommandArgumentDi2015NewLine}Di2015NewLine
21091294Di2015UniqueSeparatorButton
21091294Di2015UniqueSeparatorButton.Click
21091294Di2015UniqueSeparatorCommand
21091384Di2015UniqueSeparatorDictionary
21091384Di2015UniqueSeparatorvar handlers=new Dictionary<int,Action<NetworkData>>();Di2015NewLinehandlers[Opcode.Foo]=HandleFoo;Di2015NewLinehandlers[Opcode.Bar]=HandleBar;Di2015NewLineDi2015NewLinevoid HandleFoo(NetworkData data)Di2015NewLine{Di2015NewLine  // WhateverDi2015NewLine}Di2015NewLineDi2015NewLinevoid HandleBar(NetworkData data)Di2015NewLine{Di2015NewLine  // WhateverDi2015NewLine}Di2015NewLine
21091485Di2015UniqueSeparator    public void SetAllFilesAsReadOnly(string rootPath)Di2015NewLine    {Di2015NewLine        //this will go over all files in the directory and sub directoriesDi2015NewLine        foreach (string file in Directory.EnumerateFiles(rootPath, "*.*", SearchOption.AllDirectories))Di2015NewLine        {Di2015NewLine            //Getting an object that holds some information about the current fileDi2015NewLine            FileAttributes attr = File.GetAttributes(file);Di2015NewLineDi2015NewLine            // set the file as read-onlyDi2015NewLine            attr = attr | FileAttributes.ReadOnly;Di2015NewLine            File.SetAttributes(file,attr);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
21091485Di2015UniqueSeparatorvar attr = File.GetAttributes(path);Di2015NewLine
21091485Di2015UniqueSeparatorRead only
21091485Di2015UniqueSeparator// set read-onlyDi2015NewLineattr = attr | FileAttributes.ReadOnly;Di2015NewLineFile.SetAttributes(path, attr);Di2015NewLine
21091485Di2015UniqueSeparatorRead only
21091485Di2015UniqueSeparator// unset read-onlyDi2015NewLineattr = attr & ~FileAttributes.ReadOnly;Di2015NewLineFile.SetAttributes(path, attr);Di2015NewLine
21091485Di2015UniqueSeparator foreach (string file in Directory.EnumerateFiles(path, "*.*", SearchOption.AllDirectories))Di2015NewLine    {Di2015NewLine        Console.WriteLine(file);Di2015NewLine    }Di2015NewLine
21091523Di2015UniqueSeparatorpublic List<string> Parse(HtmlDocument doc)Di2015NewLine
21091523Di2015UniqueSeparatorpublic sub(HtmlDocument doc, List<string> top)Di2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLine
21091523Di2015UniqueSeparatorvar top = Parse(htmlDocument);Di2015NewLinesub(htmlDocument, top);Di2015NewLine
21091625Di2015UniqueSeparatorusing System;Di2015NewLineusing ServiceStack;Di2015NewLineDi2015NewLinenamespace Testv4Di2015NewLine{Di2015NewLine    class MainClassDi2015NewLine    {Di2015NewLine        public static void Main()Di2015NewLine        {Di2015NewLine            var appHost = new AppHost(500);Di2015NewLine            appHost.Init();Di2015NewLine            appHost.Start("http://*:8082/");Di2015NewLine            Console.ReadKey();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class TestAppDi2015NewLine    {Di2015NewLine        [Route("/upload", "POST")]Di2015NewLine        public class UploadFileRequest {}Di2015NewLineDi2015NewLine        public class TestController : ServiceDi2015NewLine        {Di2015NewLine            public void Any(UploadFileRequest request)Di2015NewLine            {Di2015NewLine                Console.WriteLine(Request.Files.Length);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class AppHost : AppHostHttpListenerPoolBaseDi2015NewLine    {Di2015NewLine        public AppHost(int poolSize) : base("Test Service", poolSize, typeof(TestApp).Assembly)Di2015NewLine        {Di2015NewLine        }Di2015NewLineDi2015NewLine        public override void Configure(Funq.Container container)Di2015NewLine        {Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21091625Di2015UniqueSeparator<!doctype html>Di2015NewLine<html>Di2015NewLine    <head>Di2015NewLine        <title>Test</title>Di2015NewLine    </head>Di2015NewLine    <body>Di2015NewLine    <form action="/upload" method="POST" enctype="multipart/form-data">Di2015NewLine        <h1>Upload File</h1>Di2015NewLine        <input type="file" name="File1" />Di2015NewLine        <input type="submit" value="Upload" />Di2015NewLine    </form>Di2015NewLine    </body>Di2015NewLine</html>Di2015NewLine
21091625Di2015UniqueSeparatorHttpListener
21091625Di2015UniqueSeparatorContent-Disposition
21091815Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        Person person = new Person();Di2015NewLine        person.Name = "Person One";Di2015NewLine        person.Location = "India";Di2015NewLine        person.Emails = new PersonEmails();Di2015NewLine        person.Phones = new PersonPhones();Di2015NewLine        person.Emails.Emails = new PersonEmail[] { new PersonEmail() { Type = "Official", Value = "xyz@official.com" }, new PersonEmail() { Type = "Personal", Value = "xyz@personal.com" } };Di2015NewLine        person.Phones.Phones = new PersonPhone[] { new PersonPhone() { Type = "Official", Value = "789-456-1230" }, new PersonPhone() { Type = "Personal", Value = "123-456-7890" } };Di2015NewLineDi2015NewLine        List<ObjectField> fields = new List<ObjectField>();Di2015NewLineDi2015NewLine        fields = GetPropertyValues(person);Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    static List<ObjectField> GetPropertyValues(object obj)Di2015NewLine    {Di2015NewLine        List<ObjectField> propList = new List<ObjectField>();Di2015NewLineDi2015NewLine        foreach (PropertyInfo pinfo in obj.GetType().GetProperties())Di2015NewLine        {Di2015NewLine            var value = pinfo.GetValue(obj, null);Di2015NewLineDi2015NewLine            if (pinfo.PropertyType.IsArray)Di2015NewLine            {Di2015NewLine                var arr = value as object[];Di2015NewLine                for (var i = 0; i < arr.Length; i++)Di2015NewLine                {Di2015NewLine                    if (arr[i].GetType().IsPrimitive)Di2015NewLine                    {Di2015NewLine                        propList.Add(new ObjectField() { Name = pinfo.Name + i.ToString(), Value = arr[i].ToString() });Di2015NewLine                    }Di2015NewLine                    elseDi2015NewLine                    {Di2015NewLine                        var lst = GetPropertyValues(arr[i]);Di2015NewLine                        if (lst != null && lst.Count > 0)Di2015NewLine                            propList.AddRange(lst);Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                if (pinfo.PropertyType.IsPrimitive || value.GetType() == typeof(string))Di2015NewLine                {Di2015NewLine                    propList.Add(new ObjectField() { Name = pinfo.Name, Value = value.ToString() });Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    var lst = GetPropertyValues(value);Di2015NewLine                    if (lst != null && lst.Count > 0)Di2015NewLine                        propList.AddRange(lst);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return propList;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21091874Di2015UniqueSeparator[DllImport("msvcrt.dll", CallingConvention = CallingConvention.Cdecl)]Di2015NewLineextern static uint _controlfp(uint newcw,uint mask);Di2015NewLineDi2015NewLineconst uint _MCW_EM=0x0008001f;Di2015NewLineconst uint _EM_INVALID=0x00000010;Di2015NewLineDi2015NewLinepublic static void FixFPU() {Di2015NewLine{Di2015NewLine  _controlfp(_MCW_EM, _EM_INVALID);Di2015NewLine}Di2015NewLine
21091899Di2015UniqueSeparator_dataGridView.AutoResizeColumns();Di2015NewLine
21091899Di2015UniqueSeparator_dataGridView.AutoResizeColumn(0, DataGridViewAutoSizeColumnMode.AllCellsExceptHeader);Di2015NewLine
21091899Di2015UniqueSeparatorprivate void Form1_Load(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            List<MyClass> myList = new List<MyClass>();Di2015NewLineDi2015NewLine            myList.Add(new MyClass() { URL ="AAAAAAAAAAAAA AAAAAAAAAAAAA \\r AAAAAAAAAAAAAA" });Di2015NewLine            myList.Add(new MyClass() { URL = "AAAAAAAAAAAAAA AAAAAAAAAAAA \\r AAAAAAAAAAAAAA" });Di2015NewLine            myList.Add(new MyClass() { URL = "AAAAAAAAAAAAAAA AAAAAAAAAAA \\r AAAAAAAAAAAAAA" });Di2015NewLine            myList.Add(new MyClass() { URL = "AAAAAAAAAAAAAAAA AAAAAAAAAA \\r AAAAAAAAAAAAAA" });Di2015NewLineDi2015NewLineDi2015NewLine            dataGridView1.DataSource = myList;Di2015NewLine            dataGridView1.DefaultCellStyle.WrapMode = DataGridViewTriState.True;Di2015NewLine            dataGridView1.AutoResizeColumns();Di2015NewLine            dataGridView1.AutoResizeRows();Di2015NewLine        }Di2015NewLine
21092150Di2015UniqueSeparator@for ( int i = 0; i < Model.ContentList.Count; i++ )Di2015NewLine{Di2015NewLine   var Article = Model.ContentList[i];Di2015NewLine   if ( i < 3 ){Di2015NewLine      // for Items 1 - 3Di2015NewLine      <h1>@Article.Title</h1>Di2015NewLine   } else if ( i < 7 ){Di2015NewLine      // for Items 4 - 7Di2015NewLine      <h2>@Article.Title</h2>Di2015NewLine   } else {Di2015NewLine      // for Items 7 +Di2015NewLine      <h3>@Article.Title</h3>Di2015NewLine  }Di2015NewLine}Di2015NewLine
21092159Di2015UniqueSeparatorpublic static TRet ConvertToHexString<TVal, TRet>( this TVal _input ) {Di2015NewLine
21092159Di2015UniqueSeparatorpublic static TRet ConvertToHexString<TRet>( this string _input ) {Di2015NewLineDi2015NewLinepublic static TRet ConvertToHexString<TRet>( this byte[] _input ) {Di2015NewLineDi2015NewLineetc.Di2015NewLine
21092237Di2015UniqueSeparatorstring test = "BE45898287271283";Di2015NewLinetest = Regex.Replace(test, ".{4}", "$0 ").Trim();Di2015NewLine
21092274Di2015UniqueSeparatorObservableCollection<Pet> pets = new ObservableCollection<Pet>();Di2015NewLine
21092274Di2015UniqueSeparator<ListBox {...}>Di2015NewLine  <ListBox.ItemTemplate>Di2015NewLine    <DataTemplate>Di2015NewLine        <TextBlock Text="{Binding Name"}/>Di2015NewLine        <!--You can modify this template to suit your needs.-->Di2015NewLine     </DataTemplate>Di2015NewLine   </ListBox.ItemTemplate>Di2015NewLine</ListBox>Di2015NewLine
21092313Di2015UniqueSeparator.KeyColumn
21092313Di2015UniqueSeparator  HasMany(x => x.Dependencies)....KeyColumn("ProjectId")Di2015NewLineDi2015NewLine  HasMany(x => x.DependentProjects)....KeyColumn("DependentProjectId")Di2015NewLine
21092511Di2015UniqueSeparatorListBox
21092511Di2015UniqueSeparatorListBox
21092511Di2015UniqueSeparatorIList
21092511Di2015UniqueSeparatorIBindingList
21092511Di2015UniqueSeparatorIEnumerable
21092511Di2015UniqueSeparatorObservableCollection
21092511Di2015UniqueSeparatorListBox
21092511Di2015UniqueSeparatorINotifyPropertyChanged
21092511Di2015UniqueSeparatorpublic class Download : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    private string _WebsiteTitle;Di2015NewLine    public string WebsiteTitleDi2015NewLine    {            Di2015NewLine        get { return _WebsiteTitle; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (_WebsiteTitle == value)Di2015NewLine                return;Di2015NewLineDi2015NewLine            _WebsiteTitle = value;Di2015NewLine            this.OnPropertyChanged("WebsiteTitle");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private string _Status;Di2015NewLine    public string StatusDi2015NewLine    {Di2015NewLine        get { return _Status; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (_Status == value)Di2015NewLine                return;Di2015NewLineDi2015NewLine            _Status = value;Di2015NewLine            this.OnPropertyChanged("Status");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private string _DownloadStartDate;Di2015NewLine    public string DownloadStartDateDi2015NewLine    {Di2015NewLine        get { return _DownloadStartDate; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (_DownloadStartDate == value)Di2015NewLine                return;Di2015NewLineDi2015NewLine            _DownloadStartDate = value;Di2015NewLine            this.OnPropertyChanged("DownloadStartDate");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private string _DownloadingSpeed = "0 kb/s";Di2015NewLine    public string DownloadingSpeedDi2015NewLine    {Di2015NewLine        get { return _DownloadingSpeed; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (_DownloadingSpeed == value)Di2015NewLine                return;Di2015NewLineDi2015NewLine            _DownloadingSpeed = value;Di2015NewLine            this.OnPropertyChanged("DownloadingSpeed");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine    protected void OnPropertyChanged(string propertyName)Di2015NewLine    {Di2015NewLine        if(this.PropertyChanged != null)Di2015NewLine            this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine    }Di2015NewLine}Di2015NewLine
21092511Di2015UniqueSeparatorBindingController
21092511Di2015UniqueSeparatorpublic class BindingControllerDi2015NewLine{Di2015NewLine    public BindingController()Di2015NewLine    {Di2015NewLine        this.Downloads = new ObservableCollection<Download>();Di2015NewLine    }Di2015NewLineDi2015NewLine    public ObservableCollection<Download> Downloads { get; private set; }Di2015NewLine}Di2015NewLine
21092511Di2015UniqueSeparator<ListBox Width="Auto" Di2015NewLine         Name="WebsiteList"Di2015NewLine         Grid.Column="1" Di2015NewLine         Grid.Row="2" Di2015NewLine         Grid.RowSpan="2"             Di2015NewLine         ItemsSource="{Binding Downloads}"Di2015NewLine         ItemTemplate="{StaticResource DownloadedWebsitesListBox}"Di2015NewLine         Margin="0,0,0,0">Di2015NewLine</ListBox>Di2015NewLine
21092511Di2015UniqueSeparatorMainWindow
21092511Di2015UniqueSeparatorDownload download = new Download();Di2015NewLinedownload.DownloadingSpeed = "40kb/s";Di2015NewLinedownload.WebsiteTitle = "WebsiteTitle";Di2015NewLinedownload.Status = "Downloading";Di2015NewLinebc.Downloads.Add(download);Di2015NewLineDi2015NewLinethis.DataContext = bc;Di2015NewLine
21092594Di2015UniqueSeparatorProjections.Property("<colName>")
21092594Di2015UniqueSeparatorobject alias = null;Di2015NewLinevar result = session.QueryOver<object>(type.FullName)Di2015NewLine    .SelectList(list => listDi2015NewLine       .Select(Projections.Id())Di2015NewLine       .Select(Projections.Property("RoleId"))Di2015NewLine       .Select(Projections.Property("Name")))Di2015NewLine    .TransformUsing(Transformers.PassThrough)Di2015NewLine    .List<object[]>();Di2015NewLine
21092594Di2015UniqueSeparatortype
21093063Di2015UniqueSeparatorforeach (Control ctr in ctrl.Controls)Di2015NewLine        {Di2015NewLine            if (ctr is TextBox)Di2015NewLine            {Di2015NewLine                //Do your thingsDi2015NewLine                // ((TextBox)ctr).Text Di2015NewLine            }Di2015NewLine        }Di2015NewLine
21093073Di2015UniqueSeparatorIRepository
21093073Di2015UniqueSeparatorSync
21093073Di2015UniqueSeparatormethods defined by
21093122Di2015UniqueSeparatorprivate List<UserInformationProxy> GetContactsFromGuidList(List<Guid> contactList)Di2015NewLine{Di2015NewLine    var qe = new QueryExpression(Contact.EntityLogicalName);Di2015NewLine    qe.ColumnSet = new ColumnSet("fullname", "contactid")Di2015NewLine    qe.Criteria.AddCondition("contactid", ConditionOperator.In, list.Cast<Object>().ToArray());Di2015NewLine    qe.Distinct = true;Di2015NewLineDi2015NewLine    var results = service.RetrieveMultiple(qe).Entities.Select (e => e.ToEntity<Contact>()).Di2015NewLine        Select(x => new UserInformationProxy()Di2015NewLine        {Di2015NewLine            FullName = x.FullName,Di2015NewLine            Id = x.ContactIdDi2015NewLine        });Di2015NewLineDi2015NewLine    return results;Di2015NewLine}Di2015NewLine
21093165Di2015UniqueSeparatorInnerText
21093165Di2015UniqueSeparatorSplit
21093165Di2015UniqueSeparator150,42
21093165Di2015UniqueSeparatorHtmlNode priceNode = doc.DocumentNode.SelectSingleNode("//span[@class='bold colorwhite size11 floatLeft textCenter cartbox_right']");Di2015NewLinestring price = priceNode.InnerText.Split(';').Last().Trim();Di2015NewLine
21093182Di2015UniqueSeparator    [HttpPost]Di2015NewLine    public JsonResult GetItemTypeForm(string itemTypeId)Di2015NewLine    {Di2015NewLine        //pseudo codeDi2015NewLine        var data = from s in db.ItemsDi2015NewLine                   where s.ItemType.ItemTypeName == itemTypeIdDi2015NewLine                   select new { Value = s.ItemName, ItemsID = s.ItemId };Di2015NewLineDi2015NewLine        return Json(data);Di2015NewLine    }Di2015NewLine
21093186Di2015UniqueSeparatorGetDevices
21093220Di2015UniqueSeparatorTriggers
21093220Di2015UniqueSeparatorTriggers
21093220Di2015UniqueSeparatorDependencyObject
21093220Di2015UniqueSeparatorFrameworkElement
21093220Di2015UniqueSeparatorDependencyObject
21093220Di2015UniqueSeparatorUIElement
21093220Di2015UniqueSeparatorFrameworkElement
21093220Di2015UniqueSeparatorFrameworkElement
21093235Di2015UniqueSeparator    internal static async Task<String> GetLyrics(String Artist, String Title)Di2015NewLine    {Di2015NewLine        byte[] responseData;Di2015NewLineDi2015NewLine        string URL;Di2015NewLineDi2015NewLine        URL = "http://api.metrolyrics.com/v1/search/lyrics/?find=" + Artist + "%20" + Title + "&X-API-KEY=1234567890123456789012345678901234567890";Di2015NewLineDi2015NewLine        HttpClient wClient = new HttpClient();Di2015NewLine        responseData = await wClient.GetByteArrayAsync(URL); // success!Di2015NewLine        UTF8Encoding utf8 = new UTF8Encoding();Di2015NewLine        String Lyrics = utf8.GetString(responseData, 0, responseData.Length);Di2015NewLine        return Lyrics;Di2015NewLine    }Di2015NewLine
21093274Di2015UniqueSeparatorCol1    Col2    Col3Di2015NewLinezxcv    789 14:02Di2015NewLineasdf    123 12:00Di2015NewLineqwer    456 13:01Di2015NewLineasdf    123 12:00Di2015NewLine
21093274Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine    string[] lines = File.ReadAllLines("Tab.txt");Di2015NewLine    int start = 1; // set to zero, if no headerDi2015NewLineDi2015NewLine    var records = (from i in Enumerable.Range(start, lines.Length - 1)Di2015NewLine                   let pieces = lines[i].Split('\\t')Di2015NewLine                   select new { Col1 = pieces[0], Col2 = pieces[1], Col3 = pieces[2] })Di2015NewLine                   .GroupBy(c => c.Col1 + c.Col2 + c.Col3)Di2015NewLine                   .Select(gr => gr.First())Di2015NewLine                   .OrderBy(c => c.Col3);Di2015NewLineDi2015NewLine    foreach (var r in records)Di2015NewLine        Console.WriteLine("{0}, {1}, {2}", r.Col1, r.Col2, r.Col3);Di2015NewLineDi2015NewLine    Console.WriteLine();Di2015NewLine    Console.WriteLine("Done");Di2015NewLine    Console.ReadLine();Di2015NewLine}Di2015NewLine
21093610Di2015UniqueSeparatorIsDownloding
21093610Di2015UniqueSeparatorDownloadCompleted
21093610Di2015UniqueSeparatorvar bitmap = new BitmapImage(new Uri("http://123123.com/logo.png"));Di2015NewLineDi2015NewLineif (!bitmap.IsDownloading)Di2015NewLine{Di2015NewLine    // print immediatelyDi2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    bitmap.DownloadCompleted += (o, e) =>Di2015NewLine    {Di2015NewLine        // print when download completedDi2015NewLine    };Di2015NewLine}Di2015NewLine
21093610Di2015UniqueSeparatorvar buffer = new WebClient().DownloadData("http://123123.com/logo.png");Di2015NewLinevar bitmap = new BitmapImage();Di2015NewLineDi2015NewLineusing (var stream = new MemoryStream(buffer))Di2015NewLine{Di2015NewLine    bitmap.BeginInit();Di2015NewLine    bitmap.CacheOption = BitmapCacheOption.OnLoad;Di2015NewLine    bitmap.StreamSource = stream;Di2015NewLine    bitmap.EndInit();Di2015NewLine}Di2015NewLineDi2015NewLine// print nowDi2015NewLine
21093634Di2015UniqueSeparatorTheCustomClass[] filters = ...;Di2015NewLinevar queryable = enumerable.Where(x => filters.All(f => x[f.Name] == f.Value));Di2015NewLine
21093634Di2015UniqueSeparatorIQueryable<Something> q = ...; //initial queryDi2015NewLineforeach (var f in filters)Di2015NewLine q = q.Where(x => x[f.Name] == f.Value); //apply the filtersDi2015NewLine
21093634Di2015UniqueSeparatorx[f.Name]
21093810Di2015UniqueSeparatorItemDetailsViewModel
21093810Di2015UniqueSeparatorProductViewModel
21093810Di2015UniqueSeparatorItemDetailsViewModel
21093810Di2015UniqueSeparatorMapper.CreateMap<ProductViewModel, ItemDetailsViewModel>()Di2015NewLine    .ForMember(d => d.Id, opt => opt.Ignore())Di2015NewLine    .ForMember(d => d.Code, opt => opt.Ignore())Di2015NewLine    .ForMember(d => d.ProductId, o => o.MapFrom(s => s.Id))Di2015NewLine    .ForMember(d => d.ProductCode, o => o.MapFrom(s => s.Code));Di2015NewLine
21093839Di2015UniqueSeparatorusing (SqlDataAdapter adp = new SqlDataAdapter(SQL, conn)) {Di2015NewLine  adp.Fill(dt);Di2015NewLine}Di2015NewLine
21093947Di2015UniqueSeparator"@Url.Action("
21093947Di2015UniqueSeparator<img src='@Url.Action("Index", "ReturnImage", @Model.GUID)' alt="Doorstep signature" style="width:290px;height:290px;"/>Di2015NewLine
21093955Di2015UniqueSeparator|
21093955Di2015UniqueSeparator.,
21093955Di2015UniqueSeparator.
21093955Di2015UniqueSeparator,
21093955Di2015UniqueSeparator@"^(\\.|\\,)$"Di2015NewLine
21093955Di2015UniqueSeparator@"^[.,]$"Di2015NewLine
21094128Di2015UniqueSeparatorPermissions
21094128Di2015UniqueSeparatorList<User>
21094128Di2015UniqueSeparatorUser
21094128Di2015UniqueSeparatorUser
21094128Di2015UniqueSeparatorSingleOrDefault()
21094128Di2015UniqueSeparator...Di2015NewLinevar user = multipleResults.Read<User>().SingleOrDefault();Di2015NewLineDi2015NewLinevar permissions= multipleResults.Read<Permissions>().ToList();Di2015NewLineif (user != null&& permissions != null)Di2015NewLine{Di2015NewLine  user.Permissions.AddRange(permissions);Di2015NewLine}Di2015NewLineDi2015NewLinereturn user; // --> user type is UserDi2015NewLine...Di2015NewLine
21094128Di2015UniqueSeparatorList<User>
21094128Di2015UniqueSeparatorUser
21094128Di2015UniqueSeparatorList<User>
21094128Di2015UniqueSeparatorToList()
21094128Di2015UniqueSeparator...Di2015NewLinevar user = multipleResults.Read<User>().ToList();Di2015NewLinevar permissions = multipleResults.Read<Permissions>().ToList();Di2015NewLineDi2015NewLineif (user != null && permissions != null)Di2015NewLine{Di2015NewLine  user.Permissions.AddRange(permissions);Di2015NewLine}Di2015NewLineDi2015NewLinereturn user; // --> user type is List<User>Di2015NewLine...Di2015NewLine
21094242Di2015UniqueSeparatorUserControl.DataContext
21094242Di2015UniqueSeparatorUserControl
21094242Di2015UniqueSeparatorDataTemplate
21094242Di2015UniqueSeparatorResources
21094242Di2015UniqueSeparatorDataContext
21094242Di2015UniqueSeparator<DataTemplate DataType="{x:Type ViewModels:YourUserControlViewModel}">Di2015NewLine    <Views:YourUserControl />Di2015NewLine</DataTemplate>Di2015NewLine
21094242Di2015UniqueSeparatorUserControl
21094242Di2015UniqueSeparatorBinding
21094242Di2015UniqueSeparatorDataContext
21094242Di2015UniqueSeparatorDataTemplate
21094242Di2015UniqueSeparatorBinding
21094242Di2015UniqueSeparatorContent
21094242Di2015UniqueSeparatorContentControl
21094242Di2015UniqueSeparator<ContentControl Content="{Binding YourViewModelProperty}" />Di2015NewLine
21094242Di2015UniqueSeparatorContentControl
21094242Di2015UniqueSeparatorUserControl
21094242Di2015UniqueSeparatorDataTemplate
21094242Di2015UniqueSeparatorx:Key
21094242Di2015UniqueSeparatorDataTemplate
21094242Di2015UniqueSeparatorContentControl.ContentTemplate
21094242Di2015UniqueSeparatorx:Key
21094242Di2015UniqueSeparatorDataTemplate
21094242Di2015UniqueSeparatorContentControl
21094242Di2015UniqueSeparatorUserControl
21094242Di2015UniqueSeparatorDependencyProperty
21094242Di2015UniqueSeparatorBinding
21094242Di2015UniqueSeparator<Controls:SomeUserControl DataContext="{Binding SomeViewModelProperty}" />Di2015NewLine
21094266Di2015UniqueSeparatorstatic List<string> GetARP()Di2015NewLine{Di2015NewLine    List<string> _ret = new List<string>();Di2015NewLineDi2015NewLine    Process netUtility = new Process();Di2015NewLine    netUtility.StartInfo.FileName = "arp.exe";Di2015NewLine    netUtility.StartInfo.CreateNoWindow = true;Di2015NewLine    netUtility.StartInfo.Arguments = "-a";Di2015NewLine    netUtility.StartInfo.RedirectStandardOutput = true;Di2015NewLine    netUtility.StartInfo.UseShellExecute = false;Di2015NewLine    netUtility.StartInfo.RedirectStandardError = true;Di2015NewLine    netUtility.Start();Di2015NewLineDi2015NewLine    StreamReader streamReader = new StreamReader(netUtility.StandardOutput.BaseStream, netUtility.StandardOutput.CurrentEncoding);Di2015NewLineDi2015NewLine    string line = "";Di2015NewLine    while ((line = streamReader.ReadLine()) != null)Di2015NewLine    {Di2015NewLineDi2015NewLine        if (line.StartsWith("  "))Di2015NewLine        {Di2015NewLine            var Itms = line.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);Di2015NewLineDi2015NewLine            if (Itms.Length == 3)Di2015NewLine                _ret.Add(Itms[0]);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    streamReader.Close();Di2015NewLineDi2015NewLine    return _ret;Di2015NewLineDi2015NewLine}Di2015NewLine
21094266Di2015UniqueSeparatorDns.GetHostByAddress(targetIP)
21094313Di2015UniqueSeparatorGroupBy
21094313Di2015UniqueSeparatorString.Join
21094313Di2015UniqueSeparatorinvoices.GroupBy(i => new {i.Address, i.Reference1})Di2015NewLine        .Select(g => new InvoiceRO {Di2015NewLine                        ID              = g.First().ID, Di2015NewLine                        Address         = g.Key.Address, Di2015NewLine                        Reference1      = g.Key.Reference1,Di2015NewLine                        DNNumber        = string.Join(", ", g.Select(i => i.DNNumber)),Di2015NewLine                        QuotationNumber = string.Join(", ", g.Select(i => i.QuotationNumber))Di2015NewLine                        }Di2015NewLine
21094415Di2015UniqueSeparatorfalse
21094415Di2015UniqueSeparatortrue
21094415Di2015UniqueSeparatorreturn false
21094415Di2015UniqueSeparatorString.IsNullOrEmpty()
21094415Di2015UniqueSeparatornull
21094415Di2015UniqueSeparatorempty
21094415Di2015UniqueSeparatorwhitespaces
21094415Di2015UniqueSeparatorString.IsNullOrWhiteSpace()
21094415Di2015UniqueSeparatorString.IsNullOrEmpty()
21094415Di2015UniqueSeparatorprivate bool formValidation(string text)Di2015NewLine{Di2015NewLine    int number;Di2015NewLineDi2015NewLine    if (string.IsNullOrWhiteSpace(text))Di2015NewLine    {Di2015NewLine        MessageBox.Show("Please enter a first name");Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine    else if (!Int32.TryParse(text , out number))Di2015NewLine    {Di2015NewLine        MessageBox.Show("No numbers allowed for their first name");Di2015NewLine        return false;Di2015NewLine    }Di2015NewLineDi2015NewLine    return true;Di2015NewLine}Di2015NewLine
21094533Di2015UniqueSeparator!TypeDescriptor.GetConverter(this.ModelType).CanConvertFrom(typeof(string));Di2015NewLine
21094533Di2015UniqueSeparatorModelType
21094547Di2015UniqueSeparatorint nCorrect = 0;Di2015NewLineforeach(DataRow row in ds.Tables[0].Rows)Di2015NewLine    if (Convert.ToBoolean(row["correctAnswer"]) == true)Di2015NewLine        ++nCorrect;Di2015NewLineDi2015NewLineif( nCorrect > 1 )Di2015NewLine    //checkboxDi2015NewLineelseDi2015NewLine    //radiobuttonDi2015NewLine
21094547Di2015UniqueSeparatorint nCorrect = ds.Tables[0].AsEnumerable().Sum(Di2015NewLine    r => r.Field<bool>("correctAnswer") == true ? 1 : 0Di2015NewLine    );     // ick!Di2015NewLine
21094625Di2015UniqueSeparatorOnPropertyChanged(new PropertyChangedEventArgs(string.Empty));
21094643Di2015UniqueSeparatorToCollectionAsync
21094643Di2015UniqueSeparatorToListAsync
21094643Di2015UniqueSeparatorToCollectionAsync
21094643Di2015UniqueSeparatorvar names = await todoTableDi2015NewLine    .Where(t => t.email == "bob@abc.com")Di2015NewLine    .Select(t => t.fname)Di2015NewLine    .ToEnumerableAsync();Di2015NewLinevar myName = name.FirstOrDefault(); // name will be null if not foundDi2015NewLine
21094667Di2015UniqueSeparator// Called from any methodDi2015NewLinenew Thread(() => { UpdateRequest(); }).Start();Di2015NewLineDi2015NewLine// Background activityDi2015NewLineprivate void UpdateRequest() {Di2015NewLine  UpdateUI("new text everytime" + DateTime.Now.ToString());Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLineprivate void UpdateUI(string request)Di2015NewLine{Di2015NewLineDi2015NewLine  if (control.InvokeRequired)Di2015NewLine  {Di2015NewLine    this.Invoke(new Delegate(UpdateUI), new object[] { request });Di2015NewLine  }Di2015NewLine }Di2015NewLine
21094694Di2015UniqueSeparatorConnectionString
21094694Di2015UniqueSeparatorDbCar
21094694Di2015UniqueSeparatornew SqlConnection(System.Configuration.ConfigurationManager.Di2015NewLine                        ConnectionStrings["ConnectionString"].ConnectionString);Di2015NewLine
21094701Di2015UniqueSeparator    [Test]Di2015NewLine    public void Banana([Values (".ClassThree")] string targetClass, [Values ("#A32DF1")] string expectedColor)Di2015NewLine    {Di2015NewLine        var parser = new Parser();Di2015NewLine        var sheet = parser.Parse(sample);Di2015NewLine        var result = sheet.RulesetsDi2015NewLine            .Where(s => s.Selector.ToString() == targetClass)Di2015NewLine            .SelectMany(r => r.Declarations)Di2015NewLine            .FirstOrDefault(d => d.Name.Equals("background-color", StringComparison.InvariantCultureIgnoreCase))Di2015NewLine            .TermDi2015NewLine            .ToString();Di2015NewLine        Assert.AreEqual(expectedColor, result);            Di2015NewLine    }Di2015NewLine
21094701Di2015UniqueSeparator        var targetClasses = new List<string> { ".ClassOne", ".ClassThree" };Di2015NewLine        var targetDecls = new List<string> { "background-color" };Di2015NewLineDi2015NewLine        var parser = new Parser();Di2015NewLine        var sheet = parser.Parse(sample);Di2015NewLine        foreach (var r in sheet.Rulesets)Di2015NewLine        {Di2015NewLine            if (targetClasses.Contains(r.Selector.ToString()))Di2015NewLine            {Di2015NewLine                Debug.WriteLine(r.Selector.ToString());Di2015NewLine                Debug.WriteLine("{");Di2015NewLine                foreach (var d in r.Declarations)Di2015NewLine                {Di2015NewLine                    if (targetDecls.Contains(d.Name))Di2015NewLine                    {Di2015NewLine                        Debug.WriteLine("\\t" + d);Di2015NewLine                    }Di2015NewLine                }Di2015NewLine                Debug.WriteLine("}");Di2015NewLine            }Di2015NewLine        }Di2015NewLine
21094717Di2015UniqueSeparator<Window x:Class="RemoveItemsFromComboBox.MainWindow"Di2015NewLine    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine    Title="MainWindow" Height="350" Width="525">Di2015NewLine<Grid>Di2015NewLine    <ComboBox x:Name="CbxItems" VerticalAlignment="Top" HorizontalAlignment="Left" Width="250">Di2015NewLine        <ComboBox.ContextMenu>Di2015NewLine            <ContextMenu>Di2015NewLine                <MenuItem x:Name="MenuItem" Header="Delete" Click="MenuItem_OnClick"></MenuItem>Di2015NewLine            </ContextMenu>Di2015NewLine        </ComboBox.ContextMenu>Di2015NewLine        <TextBlock Text="Item 1"/>Di2015NewLine        <TextBlock Text="Item 2"/>Di2015NewLine        <TextBlock Text="Item 3"/>Di2015NewLine        <TextBlock Text="Item 4"/>Di2015NewLine    </ComboBox>Di2015NewLine</Grid>Di2015NewLine
21094717Di2015UniqueSeparatorpublic partial class MainWindowDi2015NewLine{Di2015NewLine    public MainWindow()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        CbxItems.PreviewMouseRightButtonDown += OnPreviewMouseRightButtonDown;Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    private void OnPreviewMouseRightButtonDown(object sender, MouseButtonEventArgs e)Di2015NewLine    {Di2015NewLine        var comboBoxItem = VisualUpwardSearch(e.OriginalSource as DependencyObject);Di2015NewLineDi2015NewLine        if (comboBoxItem == null) return;Di2015NewLine        comboBoxItem.IsSelected = true;Di2015NewLine        e.Handled = true;Di2015NewLine    }Di2015NewLineDi2015NewLine    private ComboBoxItem VisualUpwardSearch(DependencyObject source)Di2015NewLine    {Di2015NewLine        while (source != null && !(source is ComboBoxItem))Di2015NewLine            source = VisualTreeHelper.GetParent(source);Di2015NewLineDi2015NewLine        return source as ComboBoxItem;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void MenuItem_OnClick(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        CbxItems.Items.Remove(CbxItems.SelectedItem);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21094817Di2015UniqueSeparatorAutoResetEvent
21094817Di2015UniqueSeparatorSet
21094817Di2015UniqueSeparatorWait
21094817Di2015UniqueSeparatorManualResetEvent
21094817Di2015UniqueSeparatorSet
21095002Di2015UniqueSeparator&&
21095002Di2015UniqueSeparatorif(formValidation(firstnameTextBox.Text) &&Di2015NewLineformValidation(lastnameTextBox.Text) &&Di2015NewLineformValidation(usernameTextBox.Text) &&Di2015NewLineformValidation(passwordTextBox.Text) &&Di2015NewLineformValidation(emailTextBox.Text) &&Di2015NewLineformValidation(cellnumberTextBox.Text))Di2015NewLine{Di2015NewLine}Di2015NewLine
21095002Di2015UniqueSeparator&
21095002Di2015UniqueSeparatorvar fieldsToValidate = new TextBox[]{firstnameTextBox, lastnameTextBox, ...}Di2015NewLineif(fieldsToValidate.All(field => formValidation(field.Text));Di2015NewLine
21095186Di2015UniqueSeparatorusing
21095243Di2015UniqueSeparator/txt
21095243Di2015UniqueSeparator/img
21095243Di2015UniqueSeparatorabc.txt
21095243Di2015UniqueSeparatorabc.txt
21095243Di2015UniqueSeparatorabc.txt
21095243Di2015UniqueSeparatorabc-1.txt
21095243Di2015UniqueSeparatorabc-2.txt
21095243Di2015UniqueSeparatorabc-1.txt
21095256Di2015UniqueSeparatorint
21095256Di2015UniqueSeparatorpublic int Sum { get { return productList.Sum(x => x.Price); } }Di2015NewLine
21095256Di2015UniqueSeparator<TextBlock Name="SumPrice" Text="{Binding Sum}" />Di2015NewLine
21095256Di2015UniqueSeparatorcount
21095380Di2015UniqueSeparatorUpdate Table_ADi2015NewLineset Column_B = 'WhatEver'Di2015NewLinewhere column_C like String1 + '[_]' + String2 +'%' Di2015NewLineor column_C like String2 + '[_]' + String1 +'%'Di2015NewLine
21095408Di2015UniqueSeparatorItemsSource="{Binding Path=MyItems.MySubItems, Mode=OneWay}"Di2015NewLine
21095408Di2015UniqueSeparator<ComboBox ItemsSource="{Binding SelectedItem.SubItems}"Di2015NewLine          SelectedItem="{Binding SelectedComboItem}"Di2015NewLine          IsSynchronizedWithCurrentItem="True"/>Di2015NewLine
21095408Di2015UniqueSeparator<DataGrid ItemsSource="{Binding Path=MyItems, Mode=OneWay}"Di2015NewLine          SelectedItem="{Binding SelectedItem, Mode=TwoWay}">Di2015NewLine
21095432Di2015UniqueSeparatorEntity Key
21095432Di2015UniqueSeparatorfalse
21095432Di2015UniqueSeparatorStoreGeneratedPattern
21095432Di2015UniqueSeparatornone
21095432Di2015UniqueSeparatorEntity Key
21095432Di2015UniqueSeparatortrue
21095432Di2015UniqueSeparatorStoreGeneratedPattern
21095432Di2015UniqueSeparatorIdentity
21095432Di2015UniqueSeparatorStoreGeneratedPattern="Identity"
21095432Di2015UniqueSeparatorSaveChanges()
21095472Di2015UniqueSeparator<s:Envelope>Di2015NewLine  <s:Body>Di2015NewLine    <Add>Di2015NewLine      <n1>100</n1>Di2015NewLine      <n2>15.99</n2>Di2015NewLine    </Add>Di2015NewLine  </s:Body>Di2015NewLine</s:Envelope>Di2015NewLine
21095472Di2015UniqueSeparatorIsWrapped
21095472Di2015UniqueSeparatorfalse
21095472Di2015UniqueSeparatorAdd
21095472Di2015UniqueSeparator<s:Envelope>Di2015NewLine  <s:Body>Di2015NewLine    <n1>100</n1>Di2015NewLine    <n2>15.99</n2>Di2015NewLine  </s:Body>Di2015NewLine</s:Envelope>Di2015NewLine
21095487Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    Order o = IoC.Resolve<IOrderService>().GetOrderById(orderID);Di2015NewLine    Customer ThisCustomer = o.Customer;Di2015NewLineDi2015NewLine    // Specify file, instructions, and privelegdesDi2015NewLine    string path = System.Web.HttpContext.Current.Request.PhysicalPath;Di2015NewLine    int index = path.LastIndexOf("\\\\");Di2015NewLine    string realPath = path.Substring(0, index + 1);Di2015NewLine    FileStream file = new FileStream(realPath + "/../FedEx/" +Di2015NewLine        orderID.ToString() + ".txt", FileMode.OpenOrCreate, FileAccess.Write);Di2015NewLine}Di2015NewLine
21095542Di2015UniqueSeparatorType.GetType
21095542Di2015UniqueSeparatorType.GetType
21095542Di2015UniqueSeparatornull
21095542Di2015UniqueSeparatorType.AssemblyQualifiedName
21095542Di2015UniqueSeparatortypeof(MyService).AssemblyQualifiedName
21095688Di2015UniqueSeparatorSkip
21095688Di2015UniqueSeparatormyDataTable.Rows.Cast<DataRow>().Skip(n).Take(1).CopyToDataTable();Di2015NewLine
21095688Di2015UniqueSeparatorn
21095688Di2015UniqueSeparatorn
21095688Di2015UniqueSeparator1
21095688Di2015UniqueSeparatorCopyDataDataTable()
21095746Di2015UniqueSeparatorAjax.ActionLink
21095746Di2015UniqueSeparatorGET
21095746Di2015UniqueSeparatorPOST
21095746Di2015UniqueSeparator<script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>Di2015NewLine
21095772Di2015UniqueSeparatorNewtonsoft.Json.ReferenceLoopHandling.Objects
21095772Di2015UniqueSeparator// function to return a JSON object form a JSON.NET serialized object with $id/$ref key-valuesDi2015NewLine// obj: the obj of interest.Di2015NewLine// parentObj: the top level object containing all child objects as serialized by JSON.NET.Di2015NewLinefunction getJsonNetObject(obj, parentObj) {Di2015NewLine    // check if obj has $id key.Di2015NewLine    var objId = obj["$id"];Di2015NewLine    if (typeof (objId) !== "undefined" && objId != null) {Di2015NewLine        // $id key exists, so you have the actual object... return itDi2015NewLine        return obj;Di2015NewLine    }Di2015NewLine    // $id did not exist, so check if $ref key exists.Di2015NewLine    objId = obj["$ref"];Di2015NewLine    if (typeof (objId) !== "undefined" && objId != null) {Di2015NewLine        // $ref exists, we need to get the actual object by searching the parent object for $idDi2015NewLine        return getJsonNetObjectById(parentObj, objId);Di2015NewLine    }Di2015NewLine    // $id and $ref did not exist... return null caseDi2015NewLine    return null;Di2015NewLine}Di2015NewLineDi2015NewLine// function to return a JSON object by $idDi2015NewLine// parentObj: the top level object containing all child objects as serialized by JSON.NET.Di2015NewLine// id: the $id value of interestDi2015NewLinefunction getJsonNetObjectById(parentObj, id) {Di2015NewLine    var result = null;Di2015NewLine    // check if $id key exists.Di2015NewLine    var objId = parentObj["$id"];Di2015NewLine    if (typeof (objId) !== "undefined" && objId != null && objId == id) {Di2015NewLine        // $id key exists, and the id matches the id of interest, so you have the object... return itDi2015NewLine        result = parentObj;Di2015NewLine    }Di2015NewLine    if (result == null) {Di2015NewLine        for (var i in parentObj) {Di2015NewLine            if (typeof (parentObj[i]) == "object" && parentObj[i] != null) {Di2015NewLine                //going one step down in the object treeDi2015NewLine                result = getJsonNetObjectById(parentObj[i], id);Di2015NewLine                if (result != null) {Di2015NewLine                    // return found objectDi2015NewLine                    return result;Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    // return null caseDi2015NewLine    return result;Di2015NewLine}Di2015NewLine
21096069Di2015UniqueSeparatorXDocument.Parse(String)
21096069Di2015UniqueSeparatorSystem.Xml.Linq
21096069Di2015UniqueSeparatorString response = @"<?xml version=""1.0"" encoding=""utf-8""?>Di2015NewLine    <Request> Di2015NewLine        <TransactionType>ADMIN</TransactionType>   Di2015NewLine        <Username>abc</Username> Di2015NewLine        <Password>def</Password> Di2015NewLine    </Request>";Di2015NewLineDi2015NewLinevar xml = XDocument.Parse(response);Di2015NewLinevar request = xml.Element("Request");Di2015NewLineDi2015NewLinevar responseObject = new ResponseClass()Di2015NewLine{Di2015NewLine    UserName = request.Element("Username").Value,Di2015NewLine    Password = request.Element("Password").Value,Di2015NewLine    Transaction = request.Element("TransactionType").Value,Di2015NewLine};Di2015NewLine
21096069Di2015UniqueSeparatorXmlSerializer
21096069Di2015UniqueSeparatorXmlRoot
21096069Di2015UniqueSeparatorXmlElement
21096069Di2015UniqueSeparator[XmlRoot("Request")]Di2015NewLinepublic class ResponseClassDi2015NewLine{Di2015NewLine    [XmlElement("Username")]Di2015NewLine    public String UserName { get; set; }Di2015NewLineDi2015NewLine    [XmlElement("Password")]Di2015NewLine    public String Password { get; set; }Di2015NewLineDi2015NewLine    [XmlElement("TransactionType")]Di2015NewLine    public String Transaction { get; set; }Di2015NewLine}Di2015NewLine
21096069Di2015UniqueSeparatorXmlSerializer
21096069Di2015UniqueSeparatorStringReader
21096069Di2015UniqueSeparatorString response = @"<?xml version=""1.0"" encoding=""utf-8""?>Di2015NewLine    <Request> Di2015NewLine        <TransactionType>ADMIN</TransactionType>   Di2015NewLine        <Username>abc</Username> Di2015NewLine        <Password>def</Password> Di2015NewLine    </Request>";Di2015NewLineDi2015NewLinevar serializer = new XmlSerializer(typeof(ResponseClass));Di2015NewLineResponseClass responseObject;Di2015NewLineDi2015NewLineusing (var reader = new StringReader(response))Di2015NewLine{Di2015NewLine    responseObject = serializer.Deserialize(reader) as ResponseClass;Di2015NewLine}Di2015NewLine
21096097Di2015UniqueSeparatorpublic static String GetProviderParameter(string paramName, IDbConnection con)Di2015NewLine{Di2015NewLine    string prefix = "";Di2015NewLine    if(con is System.Data.SqlClient.SqlConnection)Di2015NewLine        prefix = "@";Di2015NewLine    else if(con is System.Data.OleDb.OleDbConnection)Di2015NewLine        prefix =  "?";Di2015NewLine    else if(con is System.Data.Odbc.OdbcConnection)Di2015NewLine        prefix =  "?";Di2015NewLine    else if(con is MySql.Data.MySqlClient.MySqlConnection)Di2015NewLine        prefix =  "?";Di2015NewLineDi2015NewLine    return prefix + paramName;Di2015NewLine}Di2015NewLine
21096097Di2015UniqueSeparatorparam1.ParameterName = GetProviderParameter("param1", connection);Di2015NewLine
21096097Di2015UniqueSeparatorprotected
21096097Di2015UniqueSeparatorGetParameterName
21096097Di2015UniqueSeparatorDbCommandBuilder
21096097Di2015UniqueSeparatorpublic static class DbDi2015NewLine{Di2015NewLine    static readonly Func<DbConnection, DbProviderFactory> getDbProviderFactory = Di2015NewLine        (Func<DbConnection, DbProviderFactory>)Delegate.CreateDelegate(typeof(Func<DbConnection, DbProviderFactory>), typeof(DbConnection).GetProperty("DbProviderFactory", BindingFlags.Instance | BindingFlags.NonPublic).GetGetMethod(true));Di2015NewLine    static readonly Func<DbCommandBuilder, string, string> getParameterName =Di2015NewLine        (Func<DbCommandBuilder, string, string>)Delegate.CreateDelegate(typeof(Func<DbCommandBuilder, string, string>), typeof(DbCommandBuilder).GetMethod("GetParameterName", BindingFlags.Instance | BindingFlags.NonPublic, Type.DefaultBinder, new Type[] { typeof(string) }, null));Di2015NewLineDi2015NewLine    public static DbProviderFactory GetProviderFactory(this DbConnection connection)Di2015NewLine    {Di2015NewLine        return getDbProviderFactory(connection);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static string GetParameterName(this DbConnection connection, string paramName)Di2015NewLine    {Di2015NewLine        DbCommandBuilder builder = GetProviderFactory(connection).CreateCommandBuilder();Di2015NewLineDi2015NewLine        return getParameterName(builder, paramName);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21096097Di2015UniqueSeparatorparam1.ParameterName = connection.GetParameterName("param1");Di2015NewLine
21096205Di2015UniqueSeparator        var auth = new SingleUserAuthorizerDi2015NewLine        {Di2015NewLine            Credentials = new SingleUserInMemoryCredentialsDi2015NewLine            {Di2015NewLine                ConsumerKey = ConfigurationManager.AppSettings["twitterConsumerKey"],Di2015NewLine                ConsumerSecret = ConfigurationManager.AppSettings["twitterConsumerSecret"],Di2015NewLine                TwitterAccessToken = ConfigurationManager.AppSettings["twitterAccessToken"],Di2015NewLine                TwitterAccessTokenSecret = ConfigurationManager.AppSettings["twitterAccessTokenSecret"]Di2015NewLine            }Di2015NewLine        };Di2015NewLine
21096215Di2015UniqueSeparatorUniformGrid
21096215Di2015UniqueSeparatorHorizontalContentAlignment="Right"
21096215Di2015UniqueSeparatorHorizontalAlignment="Right"
21096215Di2015UniqueSeparatorItemsControl
21096215Di2015UniqueSeparator<ItemsControl Grid.Row="2"Di2015NewLine              ...Di2015NewLine              HorizontalAlignment="Right">Di2015NewLine    ...Di2015NewLine</ItemsControl>Di2015NewLine
21096437Di2015UniqueSeparatorTemplate.Models.Question
21096437Di2015UniqueSeparatorfrom q in db.Questions
21096437Di2015UniqueSeparator@model Template.Models.GetQuestionViewModelDi2015NewLine
21096437Di2015UniqueSeparatorvar questions = (from q in db.QuestionsDi2015NewLine                where q.PageNumber == pageIdDi2015NewLine                orderby q.QuestionRankingDi2015NewLine                select q.ToViewModelExtensionMethod()).ToList();Di2015NewLineDi2015NewLinereturn View(questions);Di2015NewLine
21096437Di2015UniqueSeparatornamespace Template.Models.ExtensionsDi2015NewLine{Di2015NewLine    public static class QuestionExtensionsDi2015NewLine    {Di2015NewLine        public static GetQuestionViewModel ToViewModelExtensionMethod(this Question question)Di2015NewLine        {Di2015NewLine            var result = new GetQuestionViewModel();Di2015NewLine            result.field1 = question.field1;Di2015NewLine            // ... etcDi2015NewLine            return result;Di2015NewLine        }Di2015NewLine    }   Di2015NewLine}Di2015NewLine
21096646Di2015UniqueSeparatorforeach (var property in properties)Di2015NewLine{Di2015NewLine    Expression.Property( Di2015NewLine         Expression.ConvertChecked( inputObject, property.DeclaringType ),Di2015NewLine         property);Di2015NewLine}Di2015NewLine
21096646Di2015UniqueSeparatorvar objectType
21096646Di2015UniqueSeparatorA
21096646Di2015UniqueSeparatorB
21096646Di2015UniqueSeparatorproperty.DeclaringType
21096646Di2015UniqueSeparatorA
21096646Di2015UniqueSeparatorReflectedType
21096646Di2015UniqueSeparatorvar reflectingTypeForA = typeof(A).GetProperty("MyString").GetGetMethod().ReflectedType;Di2015NewLinevar reflectingTypeForB = typeof(B).GetProperty("MyString").GetGetMethod().ReflectedType;Di2015NewLine
21096646Di2015UniqueSeparatorA
21096646Di2015UniqueSeparatorA
21096646Di2015UniqueSeparatorB
21096646Di2015UniqueSeparatorB
21096646Di2015UniqueSeparatorB
21096646Di2015UniqueSeparatorproperty.DeclaringType
21096646Di2015UniqueSeparatorA
21096646Di2015UniqueSeparatorReflectedType
21096646Di2015UniqueSeparatorB
21096646Di2015UniqueSeparatorprivate static PropertyInfo GetProperty(MethodInfo mi)Di2015NewLine{Di2015NewLine    Type type = mi.DeclaringType;Di2015NewLine    BindingFlags flags = BindingFlags.Public | BindingFlags.NonPublic;Di2015NewLine    flags |= (mi.IsStatic) ? BindingFlags.Static : BindingFlags.Instance;Di2015NewLine    PropertyInfo[] props = type.GetProperties(flags);Di2015NewLine    foreach (PropertyInfo pi in props)Di2015NewLine    {Di2015NewLine        if (pi.CanRead && CheckMethod(mi, pi.GetGetMethod(true)))Di2015NewLine        {Di2015NewLine            return pi;Di2015NewLine        }Di2015NewLine        if (pi.CanWrite && CheckMethod(mi, pi.GetSetMethod(true)))Di2015NewLine        {Di2015NewLine            return pi;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    throw new SomeException();Di2015NewLine}Di2015NewLineDi2015NewLineprivate static bool CheckMethod(MethodInfo method, MethodInfo propertyMethod) { Di2015NewLine    if (method == propertyMethod) {Di2015NewLine        return true; Di2015NewLine    } Di2015NewLine    // If the type is an interface then the handle for the method got by the compiler will not be theDi2015NewLine    // same as that returned by reflection. Di2015NewLine    // Check for this condition and try and get the method from reflection.Di2015NewLine    Type type = method.DeclaringType;Di2015NewLine    if (type.IsInterface && method.Name == propertyMethod.Name && type.GetMethod(method.Name) == propertyMethod) {Di2015NewLine        return true; Di2015NewLine    }Di2015NewLine    return false; Di2015NewLine} Di2015NewLine
21096646Di2015UniqueSeparatorif (method == propertyMethod) {Di2015NewLine    return true; Di2015NewLine} Di2015NewLine
21096646Di2015UniqueSeparatorA
21096646Di2015UniqueSeparatorB
21096646Di2015UniqueSeparatorvar propertyAGetter = typeof(A).GetProperty("MyString").GetGetMethod();Di2015NewLinevar propertyBGetter = typeof(B).GetProperty("MyString").GetGetMethod();Di2015NewLinebool areTheSame = propertyAGetter == propertyBGetter; // it equals to falseDi2015NewLine
21096661Di2015UniqueSeparatorCREATE TABLE
21096769Di2015UniqueSeparatorstatic void getTwoArraysFromFile(string filein, ref double[] acc, ref double[] period)Di2015NewLine{Di2015NewLine    string line;Di2015NewLineDi2015NewLine    List<double> p1 = new List<double>();Di2015NewLine    List<double> p2 = new List<double>();Di2015NewLineDi2015NewLine    System.IO.StreamReader file = new System.IO.StreamReader(filein);Di2015NewLine    while ((line = file.ReadLine()) != null)Di2015NewLine        try {Di2015NewLine            String[] parms = line.Trim().Split(',');Di2015NewLineDi2015NewLine            p1.Add(double.Parse(parms[1], CultureInfo.InvariantCulture));       Di2015NewLine            p2.Add(double.Parse(parms[0], CultureInfo.InvariantCulture));Di2015NewLine        }Di2015NewLine        catch { }Di2015NewLineDi2015NewLine    acc = p1.ToArray();Di2015NewLine    period = p2.ToArray();Di2015NewLine}Di2015NewLine
21096827Di2015UniqueSeparatorDateTime
21096827Di2015UniqueSeparatorDateTime?
21096827Di2015UniqueSeparatorpublic class VisitsDi2015NewLine{Di2015NewLine    private DateTime _dischargeDate;Di2015NewLineDi2015NewLine    public DateTime? DischargeDateDi2015NewLine    {Di2015NewLine        get {Di2015NewLine            return _dischargeDate;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (value == null)Di2015NewLine            {Di2015NewLine                this._dischargeDate = DateTime.MinValue;Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                this._dischargeDate = value.Value;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21096827Di2015UniqueSeparator_dischargeDate
21096963Di2015UniqueSeparatorXmlSerializer
21096963Di2015UniqueSeparatorpublic class MyTypeDi2015NewLine{Di2015NewLine    private string _description = default(string); // Note the default is NULL, not "" for a stringDi2015NewLineDi2015NewLine    // However, why not determine the default yourself?Di2015NewLine    private string _location = "";Di2015NewLine    private string _provider;Di2015NewLineDi2015NewLine    public MyType()Di2015NewLine    {Di2015NewLine        // Or use the constructor to set the defaultsDi2015NewLine        _provider = string.Empty;Di2015NewLine    }Di2015NewLineDi2015NewLine    public string DescriptionDi2015NewLine    {Di2015NewLine        get { return _description; }Di2015NewLine        set { _description = value; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21097109Di2015UniqueSeparatorlegend.Reverse
21097109Di2015UniqueSeparatorEnumerable.Reverse
21097109Di2015UniqueSeparatorvar legendContents =Di2015NewLine Enumerable.Range(0, numberOfItems)Di2015NewLine .Select(i => step * i)Di2015NewLine .Reverse()Di2015NewLine .Select(i => new { Text = i.ToString(), Y = (newHeight / 10) + (verticalDistance * i) }Di2015NewLine .ToArray();Di2015NewLineDi2015NewLine//at this point you can easily examine all draw operations in the debuggerDi2015NewLineDi2015NewLinevar xPos = ((newWidth / 2) - 5);Di2015NewLineforeach (var legendItem in legendContents)Di2015NewLine g.DrawString(legendItem.Text, drawFontX, Brushes.White, xPos, legendItem.Y, stringFormatTimes);    Di2015NewLine
21097438Di2015UniqueSeparatorhomeButton.Click += delegate {Di2015NewLine    var second = new Intent(this, typeof(SecondPage));Di2015NewLine    second.PutExtra("reg", "qwe");Di2015NewLine    StartActivity (second);Di2015NewLine    }Di2015NewLine
21097472Di2015UniqueSeparatorMain
21097472Di2015UniqueSeparatorMainForm
21097512Di2015UniqueSeparator    public static string GetObjectHash<T>(this T foo)Di2015NewLine    {Di2015NewLine        byte[] serializedData = null;Di2015NewLine        var hasher = SHA256.Create();Di2015NewLine        var serializer = new DataContractSerializer(typeof(T));Di2015NewLineDi2015NewLine        using (var stream = new MemoryStream())Di2015NewLine        {Di2015NewLine            serializer.WriteObject(stream, foo);Di2015NewLine            serializedData = stream.ToArray();Di2015NewLine        }Di2015NewLineDi2015NewLine        serializedData = hasher.ComputeHash(serializedData);Di2015NewLineDi2015NewLine        return String.Concat(serializedData.Select(d => d.ToString("x2")));Di2015NewLine    }Di2015NewLine
21097576Di2015UniqueSeparatorforeach (XElement item in xmlDocument.Descendants("Itens").Elements("Item"))Di2015NewLine
21097725Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineDi2015NewLinenamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    static class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            Console.Write("Sum: ");Di2015NewLineDi2015NewLine            var sum = int.Parse(Console.ReadLine());Di2015NewLineDi2015NewLine            var prefix = new[] { 1, 2, 3, 4, 5, 6 };Di2015NewLine            var suffix = new[] { 0, 3, 2, 7, 7, 9, 12, 15 };Di2015NewLineDi2015NewLine            foreach (var item in Solution(prefix, suffix, 1, 3, sum))Di2015NewLine            {Di2015NewLine                Console.WriteLine("{0} = [ {1} ] + [ {2} ]", sum, string.Join(" + ", item.Item1.Select(T => prefix[T])), string.Join(" + ", item.Item2.Select(T => suffix[T])));Di2015NewLine            }Di2015NewLineDi2015NewLine            Console.WriteLine("Done here. Any key to close.");Di2015NewLine            Console.ReadKey();Di2015NewLine        }Di2015NewLineDi2015NewLine        public static IEnumerable<Tuple<int[], int[]>> Solution(int[] one, int[] two, int minElementCount, int maxElementCount, int sum)Di2015NewLine        {Di2015NewLine            if (one.Length < minElementCount || two.Length < minElementCount)Di2015NewLine            {Di2015NewLine                throw new Exception("Nah.");Di2015NewLine            }Di2015NewLineDi2015NewLine            var cacheOne = new Dictionary<int, List<int[]>>();Di2015NewLine            var cacheTwo = new Dictionary<int, List<int[]>>();Di2015NewLine            var result = new List<Tuple<int[], int[]>>();Di2015NewLineDi2015NewLine            for (int countInOne = minElementCount; countInOne <= Math.Min(one.Length, maxElementCount); countInOne++)Di2015NewLine            {Di2015NewLine                for (int countInTwo = minElementCount; countInTwo <= Math.Min(two.Length, maxElementCount); countInTwo++)Di2015NewLine                {Di2015NewLine                    List<int[]> permutationsOne;Di2015NewLine                    List<int[]> permutationsTwo;Di2015NewLineDi2015NewLine                    if (!cacheOne.TryGetValue(countInOne, out permutationsOne))Di2015NewLine                    {Di2015NewLine                        permutationsOne = cacheOne[countInOne] = PermutationsIndices(one, countInOne).ToList();Di2015NewLine                    }Di2015NewLineDi2015NewLine                    if (!cacheTwo.TryGetValue(countInTwo, out permutationsTwo))Di2015NewLine                    {Di2015NewLine                        permutationsTwo = cacheTwo[countInTwo] = PermutationsIndices(two, countInTwo).ToList();Di2015NewLine                    }Di2015NewLineDi2015NewLine                    foreach (var permutationOne in permutationsOne)Di2015NewLine                    {Di2015NewLine                        var sumOne = permutationOne.Select(T => one[T]).Sum();Di2015NewLineDi2015NewLine                        if (sumOne <= sum)Di2015NewLine                        {Di2015NewLine                            foreach (var permutationTwo in permutationsTwo)Di2015NewLine                            {Di2015NewLine                                if ((sumOne + permutationTwo.Select(T => two[T]).Sum() == sum))Di2015NewLine                                {Di2015NewLine                                    yield return Tuple.Create(permutationOne, permutationTwo);Di2015NewLine                                }Di2015NewLine                            }Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        public static IEnumerable<int[]> PermutationsIndices<T>(this T[] e, int count)Di2015NewLine        {Di2015NewLine            if (count > e.Length)Di2015NewLine            {Di2015NewLine                throw new Exception("Nah.");Di2015NewLine            }Di2015NewLineDi2015NewLine            return TraverseArray(e, new Stack<int>(), 0, count - 1);Di2015NewLine        }Di2015NewLine        public static IEnumerable<int[]> TraverseArray<T>(T[] array, Stack<int> stack, int index, int iterations)Di2015NewLine        {Di2015NewLine            for (int i = index; i < array.Length - iterations; i++)Di2015NewLine            {Di2015NewLine                stack.Push(i);Di2015NewLineDi2015NewLine                if (iterations == 0)Di2015NewLine                {Di2015NewLine                    yield return stack.Reverse().ToArray();Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    foreach (int[] item in TraverseArray(array, stack, i + 1, iterations - 1))Di2015NewLine                    {Di2015NewLine                        yield return item;Di2015NewLine                    }Di2015NewLine                }Di2015NewLineDi2015NewLine                stack.Pop();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21097725Di2015UniqueSeparatorprefix = { 0, 0, 3, 8, 8, 15 }Di2015NewLinesuffix = { 0, 3, 2, 7, 7, 9, 12, 15 }Di2015NewLine
21097725Di2015UniqueSeparatorSum: 42Di2015NewLine42 = [ 15 ] + [ 12 + 15 ]Di2015NewLine42 = [ 8 ] + [ 7 + 12 + 15 ]Di2015NewLine42 = [ 8 ] + [ 7 + 12 + 15 ]Di2015NewLine42 = [ 8 ] + [ 7 + 12 + 15 ]Di2015NewLine42 = [ 8 ] + [ 7 + 12 + 15 ]Di2015NewLine42 = [ 15 ] + [ 0 + 12 + 15 ]Di2015NewLine42 = [ 15 ] + [ 3 + 9 + 15 ]Di2015NewLine42 = [ 0 + 15 ] + [ 12 + 15 ]Di2015NewLine42 = [ 0 + 15 ] + [ 12 + 15 ]Di2015NewLine42 = [ 3 + 15 ] + [ 9 + 15 ]Di2015NewLine42 = [ 8 + 15 ] + [ 7 + 12 ]Di2015NewLine42 = [ 8 + 15 ] + [ 7 + 12 ]Di2015NewLine42 = [ 8 + 15 ] + [ 7 + 12 ]Di2015NewLine42 = [ 8 + 15 ] + [ 7 + 12 ]Di2015NewLine42 = [ 0 + 8 ] + [ 7 + 12 + 15 ]Di2015NewLine42 = [ 0 + 8 ] + [ 7 + 12 + 15 ]Di2015NewLine42 = [ 0 + 8 ] + [ 7 + 12 + 15 ]Di2015NewLine42 = [ 0 + 8 ] + [ 7 + 12 + 15 ]Di2015NewLine42 = [ 0 + 15 ] + [ 0 + 12 + 15 ]Di2015NewLine42 = [ 0 + 15 ] + [ 3 + 9 + 15 ]Di2015NewLine42 = [ 0 + 8 ] + [ 7 + 12 + 15 ]Di2015NewLine42 = [ 0 + 8 ] + [ 7 + 12 + 15 ]Di2015NewLine42 = [ 0 + 8 ] + [ 7 + 12 + 15 ]Di2015NewLine42 = [ 0 + 8 ] + [ 7 + 12 + 15 ]Di2015NewLine42 = [ 0 + 15 ] + [ 0 + 12 + 15 ]Di2015NewLine42 = [ 0 + 15 ] + [ 3 + 9 + 15 ]Di2015NewLine42 = [ 3 + 8 ] + [ 7 + 9 + 15 ]Di2015NewLine42 = [ 3 + 8 ] + [ 7 + 9 + 15 ]Di2015NewLine42 = [ 3 + 8 ] + [ 7 + 9 + 15 ]Di2015NewLine42 = [ 3 + 8 ] + [ 7 + 9 + 15 ]Di2015NewLine42 = [ 3 + 15 ] + [ 0 + 9 + 15 ]Di2015NewLine42 = [ 3 + 15 ] + [ 3 + 9 + 12 ]Di2015NewLine42 = [ 3 + 15 ] + [ 2 + 7 + 15 ]Di2015NewLine42 = [ 3 + 15 ] + [ 2 + 7 + 15 ]Di2015NewLine42 = [ 8 + 8 ] + [ 2 + 9 + 15 ]Di2015NewLine42 = [ 8 + 8 ] + [ 7 + 7 + 12 ]Di2015NewLine42 = [ 8 + 15 ] + [ 0 + 7 + 12 ]Di2015NewLine42 = [ 8 + 15 ] + [ 0 + 7 + 12 ]Di2015NewLine42 = [ 8 + 15 ] + [ 3 + 7 + 9 ]Di2015NewLine42 = [ 8 + 15 ] + [ 3 + 7 + 9 ]Di2015NewLine42 = [ 8 + 15 ] + [ 0 + 7 + 12 ]Di2015NewLine42 = [ 8 + 15 ] + [ 0 + 7 + 12 ]Di2015NewLine42 = [ 8 + 15 ] + [ 3 + 7 + 9 ]Di2015NewLine42 = [ 8 + 15 ] + [ 3 + 7 + 9 ]Di2015NewLine42 = [ 0 + 0 + 15 ] + [ 12 + 15 ]Di2015NewLine42 = [ 0 + 3 + 15 ] + [ 9 + 15 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 7 + 12 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 7 + 12 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 7 + 12 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 7 + 12 ]Di2015NewLine42 = [ 0 + 3 + 15 ] + [ 9 + 15 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 7 + 12 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 7 + 12 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 7 + 12 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 7 + 12 ]Di2015NewLine42 = [ 3 + 8 + 15 ] + [ 7 + 9 ]Di2015NewLine42 = [ 3 + 8 + 15 ] + [ 7 + 9 ]Di2015NewLine42 = [ 3 + 8 + 15 ] + [ 7 + 9 ]Di2015NewLine42 = [ 3 + 8 + 15 ] + [ 7 + 9 ]Di2015NewLine42 = [ 8 + 8 + 15 ] + [ 2 + 9 ]Di2015NewLine42 = [ 0 + 0 + 8 ] + [ 7 + 12 + 15 ]Di2015NewLine42 = [ 0 + 0 + 8 ] + [ 7 + 12 + 15 ]Di2015NewLine42 = [ 0 + 0 + 8 ] + [ 7 + 12 + 15 ]Di2015NewLine42 = [ 0 + 0 + 8 ] + [ 7 + 12 + 15 ]Di2015NewLine42 = [ 0 + 0 + 15 ] + [ 0 + 12 + 15 ]Di2015NewLine42 = [ 0 + 0 + 15 ] + [ 3 + 9 + 15 ]Di2015NewLine42 = [ 0 + 3 + 8 ] + [ 7 + 9 + 15 ]Di2015NewLine42 = [ 0 + 3 + 8 ] + [ 7 + 9 + 15 ]Di2015NewLine42 = [ 0 + 3 + 8 ] + [ 7 + 9 + 15 ]Di2015NewLine42 = [ 0 + 3 + 8 ] + [ 7 + 9 + 15 ]Di2015NewLine42 = [ 0 + 3 + 15 ] + [ 0 + 9 + 15 ]Di2015NewLine42 = [ 0 + 3 + 15 ] + [ 3 + 9 + 12 ]Di2015NewLine42 = [ 0 + 3 + 15 ] + [ 2 + 7 + 15 ]Di2015NewLine42 = [ 0 + 3 + 15 ] + [ 2 + 7 + 15 ]Di2015NewLine42 = [ 0 + 8 + 8 ] + [ 2 + 9 + 15 ]Di2015NewLine42 = [ 0 + 8 + 8 ] + [ 7 + 7 + 12 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 0 + 7 + 12 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 0 + 7 + 12 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 3 + 7 + 9 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 3 + 7 + 9 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 0 + 7 + 12 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 0 + 7 + 12 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 3 + 7 + 9 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 3 + 7 + 9 ]Di2015NewLine42 = [ 0 + 3 + 8 ] + [ 7 + 9 + 15 ]Di2015NewLine42 = [ 0 + 3 + 8 ] + [ 7 + 9 + 15 ]Di2015NewLine42 = [ 0 + 3 + 8 ] + [ 7 + 9 + 15 ]Di2015NewLine42 = [ 0 + 3 + 8 ] + [ 7 + 9 + 15 ]Di2015NewLine42 = [ 0 + 3 + 15 ] + [ 0 + 9 + 15 ]Di2015NewLine42 = [ 0 + 3 + 15 ] + [ 3 + 9 + 12 ]Di2015NewLine42 = [ 0 + 3 + 15 ] + [ 2 + 7 + 15 ]Di2015NewLine42 = [ 0 + 3 + 15 ] + [ 2 + 7 + 15 ]Di2015NewLine42 = [ 0 + 8 + 8 ] + [ 2 + 9 + 15 ]Di2015NewLine42 = [ 0 + 8 + 8 ] + [ 7 + 7 + 12 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 0 + 7 + 12 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 0 + 7 + 12 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 3 + 7 + 9 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 3 + 7 + 9 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 0 + 7 + 12 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 0 + 7 + 12 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 3 + 7 + 9 ]Di2015NewLine42 = [ 0 + 8 + 15 ] + [ 3 + 7 + 9 ]Di2015NewLine42 = [ 3 + 8 + 8 ] + [ 2 + 9 + 12 ]Di2015NewLine42 = [ 3 + 8 + 8 ] + [ 7 + 7 + 9 ]Di2015NewLine42 = [ 3 + 8 + 15 ] + [ 0 + 7 + 9 ]Di2015NewLine42 = [ 3 + 8 + 15 ] + [ 0 + 7 + 9 ]Di2015NewLine42 = [ 3 + 8 + 15 ] + [ 2 + 7 + 7 ]Di2015NewLine42 = [ 3 + 8 + 15 ] + [ 0 + 7 + 9 ]Di2015NewLine42 = [ 3 + 8 + 15 ] + [ 0 + 7 + 9 ]Di2015NewLine42 = [ 3 + 8 + 15 ] + [ 2 + 7 + 7 ]Di2015NewLine42 = [ 8 + 8 + 15 ] + [ 0 + 2 + 9 ]Di2015NewLineDone here. Any key to close.Di2015NewLine
21097759Di2015UniqueSeparator<..., _    Di2015NewLineSystem.ServiceModel.ServiceContractAttribute(..., ProtectionLevel:=Net.Security.ProtectionLevel.Sign)> _Di2015NewLinePublic Interface OperationsDi2015NewLine
21097759Di2015UniqueSeparatorRequired timestamp missing in security headerDi2015NewLine
21097759Di2015UniqueSeparatorincludeTimestamp="false"Di2015NewLine
21097818Di2015UniqueSeparatordouble value = ...Di2015NewLineint rounded = ((int)Math.Ceiling(value / 100.0)) * 100;Di2015NewLine
21098252Di2015UniqueSeparatorbool IsDefault
21098252Di2015UniqueSeparatorRole
21098252Di2015UniqueSeparatorpublic class RoleDi2015NewLine{Di2015NewLine    public virtual int ID { get; set; }Di2015NewLine    public virtual String Name { get; set; }Di2015NewLine    public virtual String Description { get; set; }Di2015NewLine    public virtual bool IsActive { get; set; }Di2015NewLine    public virtual bool IncludeInReports { get; set; }Di2015NewLine    public virtual bool IsDefault { get; set; }Di2015NewLine}Di2015NewLine
21098252Di2015UniqueSeparator@Html.DropDownListFor(h => h.SelectedRoleID, new SelectList(Model.Roles, "ID", "Description", Model.Roles.First(x => x.IsDefault).ID))Di2015NewLine
21098252Di2015UniqueSeparatorSelectedRoleID
21098252Di2015UniqueSeparator@Html.DropDownListFor(h => h.SelectedRoleID, new SelectList(Model.Roles, "ID", "Description", Model.SelectedRoleID))Di2015NewLine
21098271Di2015UniqueSeparatorfixed(byte* ptrOutput= &outputBufferBuffer[0])Di2015NewLine{Di2015NewLine    MoveMemory(ptrOutput, ptrInput, 4);Di2015NewLine}Di2015NewLineDi2015NewLine[DllImport("Kernel32.dll", EntryPoint = "RtlMoveMemory", SetLastError = false)]Di2015NewLineprivate static unsafe extern void MoveMemory(void* dest, void* src, int size);Di2015NewLine
21098271Di2015UniqueSeparatorpublic static byte[] ApplyLookupTableToBufferV2(byte[] lookupTable, ushort[] inputBuffer)Di2015NewLine{Di2015NewLine    int lookupTableLength = lookupTable.Length;Di2015NewLine    int bufferLength = inputBuffer.Length;Di2015NewLine    byte[] outputBuffer = new byte[bufferLength * 4];Di2015NewLine    int outIndex = 0, curPixelValue = 0;Di2015NewLineDi2015NewLine    unsafeDi2015NewLine    {Di2015NewLine        fixed (byte* ptrOutput = &outputBuffer[0])Di2015NewLine        fixed (byte* ptrLookup = &lookupTable[0])Di2015NewLine        {Di2015NewLine            uint* lkp = (uint*)ptrLookup;Di2015NewLine            uint* opt = (uint*)ptrOutput;Di2015NewLineDi2015NewLine            for (int index = 0; index < bufferLength; index++)Di2015NewLine            {Di2015NewLine                outIndex = index;Di2015NewLine                curPixelValue = inputBuffer[index];Di2015NewLineDi2015NewLine                if ((curPixelValue + 3) < lookupTableLength)Di2015NewLine                {Di2015NewLine                    opt[outIndex] = lkp[curPixelValue];Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return outputBuffer;Di2015NewLine}Di2015NewLine
21098271Di2015UniqueSeparatorint tc1 = Environment.TickCount;Di2015NewLineDi2015NewLinefor (int i = 0; i < 200; i++)Di2015NewLine{Di2015NewLine    byte[] a = ApplyLookupTableToBufferV1(lt, ib);Di2015NewLine}Di2015NewLineDi2015NewLinetc1 = Environment.TickCount - tc1;Di2015NewLineDi2015NewLineConsole.WriteLine("V1: " + tc1.ToString() + "ms");Di2015NewLine
21098271Di2015UniqueSeparatorint tc2 = Environment.TickCount;Di2015NewLineDi2015NewLinefor (int i = 0; i < 200; i++)Di2015NewLine{Di2015NewLine    byte[] a = ApplyLookupTableToBufferV2(lt, ib);Di2015NewLine}Di2015NewLineDi2015NewLinetc2 = Environment.TickCount - tc2;Di2015NewLineDi2015NewLineConsole.WriteLine("V2: " + tc2.ToString() + "ms");Di2015NewLine
21098328Di2015UniqueSeparatorc.Col3[1]
21098328Di2015UniqueSeparatorc.Col3
21098328Di2015UniqueSeparatorDistinct
21098328Di2015UniqueSeparatorGroupBy
21098328Di2015UniqueSeparatorEquals
21098328Di2015UniqueSeparatorGetHashCode
21098328Di2015UniqueSeparatorReadLines
21098328Di2015UniqueSeparatorReadAllLines
21098334Di2015UniqueSeparator private void search_tlstb_txtbox_TextChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if (search_tlstb_txtbox.Text != string.Empty && owners_dgv.RowCount > 0)Di2015NewLine        {Di2015NewLine            for (int i = 0; i < owners_dgv.Rows.Count - 1; i++)Di2015NewLine            {Di2015NewLine                for (int j = 0; j < owners_dgv.Rows[i].Cells.Count; j++)Di2015NewLine                {Di2015NewLine                    if (owners_dgv.Rows[i].Cells[j].Value.ToString().Contains(search_tlstb_txtbox.Text))Di2015NewLine                    {Di2015NewLine                        owners_dgv.Rows[i].Visible = true;Di2015NewLine                        break;Di2015NewLine                    }Di2015NewLine                    elseDi2015NewLine                    {Di2015NewLine                        owners_dgv.CurrentCell = null;Di2015NewLine                        owners_dgv.Rows[i].Visible = false;Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine        elseDi2015NewLine            this.OwnersTBLTableAdapter1.Fill(this.rtmS_DS1.OwnersTBL);Di2015NewLine    }Di2015NewLine
21098402Di2015UniqueSeparatordevenv /SafemodeDi2015NewLine
21098492Di2015UniqueSeparatortrue
21098492Di2015UniqueSeparatorbin
21098520Di2015UniqueSeparatorusing System.Reflection;Di2015NewLineDi2015NewLineDi2015NewLinepublic MainPage()Di2015NewLine{Di2015NewLine  this.InitializeComponent();Di2015NewLine  Assembly asm = typeof(MainPage).GetTypeInfo().Assembly;Di2015NewLine  Stream stream = asm.GetManifestResourceStream("YourNamespace.filename.extension");Di2015NewLineDi2015NewLineDi2015NewLine  ConvertToFileAndCopyToLocalDirectory(stream);Di2015NewLine}Di2015NewLine
21098810Di2015UniqueSeparatorusing (IDataReader rdr =Di2015NewLine    db.ExecSPGetDataReader("dbo.someStoredProcedure", paramList))Di2015NewLine{Di2015NewLine    if (rdr.Read())Di2015NewLine    {Di2015NewLine        List<nameValuePair> formValues =Di2015NewLine            Utils.nameValuePairs(rdr["valuepairs"].ToString());Di2015NewLine        foreach (nameValuePair nvp in formValues)Di2015NewLine        {Di2015NewLine            if (nvp.name.ToLower() == "name")Di2015NewLine            {Di2015NewLine                outString = nvp.value;Di2015NewLine                break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21098810Di2015UniqueSeparatorusing
21098810Di2015UniqueSeparatorDispose
21098891Di2015UniqueSeparatoras
21098891Di2015UniqueSeparatorvar student = (Students) o;Di2015NewLine
21098891Di2015UniqueSeparatorStudents
21098891Di2015UniqueSeparatoras
21098891Di2015UniqueSeparatorusing System;Di2015NewLineDi2015NewLinenamespace BadDi2015NewLine{Di2015NewLine    class Students {}Di2015NewLineDi2015NewLine    class TestDi2015NewLine    {Di2015NewLine        static void Main()Di2015NewLine        {Di2015NewLine            object o = new Good.Students();Di2015NewLine            Students cast = (Students) o;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinenamespace GoodDi2015NewLine{Di2015NewLine    class Students {}Di2015NewLine}Di2015NewLine
21098891Di2015UniqueSeparatorUnhandled Exception: System.InvalidCastException:Di2015NewLine    Unable to cast object of type 'Good.Students' to type 'Bad.Students'.Di2015NewLine   at Bad.Test.Main()Di2015NewLine
21098891Di2015UniqueSeparatoras
21099145Di2015UniqueSeparatorIDisposables
21099145Di2015UniqueSeparatorDispose
21099145Di2015UniqueSeparatorIDisposable
21099225Di2015UniqueSeparatorMoveFileEx
21099225Di2015UniqueSeparatorMOVEFILE_DELAY_UNTIL_REBOOT
21099317Di2015UniqueSeparatorShowError
21099317Di2015UniqueSeparatorProgressBar
21099317Di2015UniqueSeparatorLabel
21099317Di2015UniqueSeparator<ProgressBar>Di2015NewLine    <ProgressBar.Style>Di2015NewLine        <Style TargetType="{x:Type ProgressBar}">Di2015NewLine            <Style.Triggers>Di2015NewLine                <DataTrigger Binding="{Binding ShowError}" Value="True">Di2015NewLine                    <Setter Property="Foreground" Value="Red"/>Di2015NewLine                </DataTrigger>Di2015NewLine            </Style.Triggers>Di2015NewLine        </Style>Di2015NewLine    </ProgressBar.Style>Di2015NewLine</ProgressBar>Di2015NewLine
21099388Di2015UniqueSeparator<View>...</View>
21099388Di2015UniqueSeparator<Query>
21099388Di2015UniqueSeparatorID
21099388Di2015UniqueSeparatorId
21099388Di2015UniqueSeparatorvar item = list.GetItemById(ID);Di2015NewLine
21099407Di2015UniqueSeparatorRegionInfo.DisplayName
21099407Di2015UniqueSeparatorRegionInfo.NativeName
21099511Di2015UniqueSeparatorDelegate
21099511Di2015UniqueSeparatorFunc<>
21099511Di2015UniqueSeparatorvar dict = new Dictionary<int, Delegate>();Di2015NewLinedict.Add(1, (Func<int, int>)((int x) => x * 10));Di2015NewLinedict.Add(2, (Func<int>)(() => 10));Di2015NewLine
21099511Di2015UniqueSeparatorvar result1 = dict[1].DynamicInvoke(10);Di2015NewLinevar result2 = dict[2].DynamicInvoke();Di2015NewLine
21099586Di2015UniqueSeparator^
21099586Di2015UniqueSeparator$
21099586Di2015UniqueSeparatorRegex r = new Regex(@"^Type / Subtype: (\\d+) / (\\d+)");Di2015NewLinestring arg = "Type / Subtype: 001 / 002 Additional pointless information that we don't need";Di2015NewLineMatch match = r.Match(arg);Di2015NewLineif (match.Success)Di2015NewLine{Di2015NewLine    string num1 = match.Groups[1].Value;    // "001"Di2015NewLine    string num2 = match.Groups[2].Value;    // "002"Di2015NewLine}Di2015NewLine
21099586Di2015UniqueSeparator"SubType"
21099586Di2015UniqueSeparator"Subtype"
21099586Di2015UniqueSeparatorRegex r = new Regex(@"^Type / Subtype: (\\d+) / (\\d+) (.*)");Di2015NewLine// ...Di2015NewLinestring remainder = match.Groups[3].Value;Di2015NewLine
21099586Di2015UniqueSeparator.
21099586Di2015UniqueSeparatorRegexOptions.Singleline
21099714Di2015UniqueSeparator        BindingSource bs = new BindingSource();Di2015NewLine        bs.DataSource = typeof(Book); // Book is a type of your Entity classDi2015NewLineDi2015NewLine        db.Book.ToList().ForEach(n => bs.Add(n)); Di2015NewLine        dgv.DataSource = bs;Di2015NewLine
21099721Di2015UniqueSeparator var table = doc.DocumentNode.SelectSingleNode("//table[@border='3']")Di2015NewLine                .Descendants("tr") Di2015NewLine                .Skip(1)  Di2015NewLine                .Where(tr => tr.Elements("td").Count() >= 4)Di2015NewLine                .Select(tr => tr.Elements("td")Di2015NewLine                    .Select(td => new { Text = td.InnerText.Trim(), Duration = td.Attributes["Colspan"] != null ? td.Attributes["Colspan"].Value: "1").ToList())Di2015NewLine                .ToList();Di2015NewLine
21099721Di2015UniqueSeparator List<List<Tuple<string, string>> table = doc.DocumentNode.SelectSingleNode("//table[@border='3']")Di2015NewLine                .Descendants("tr") Di2015NewLine                .Skip(1)  Di2015NewLine                .Where(tr => tr.Elements("td").Count() >= 4)Di2015NewLine                .Select(tr => tr.Elements("td")Di2015NewLine                    .Select(td => new Tuple<string,string>(td.InnerText.Trim(),  td.Attributes["Colspan"] != null ? td.Attributes["Colspan"].Value: "1").ToList())Di2015NewLine                .ToList();Di2015NewLine
21099954Di2015UniqueSeparatorResourceSet
21099954Di2015UniqueSeparatorDictionaryEntry
21099954Di2015UniqueSeparatorDictionary<string, string>
21099954Di2015UniqueSeparatorresourceSet.Cast<DictionaryEntry>()Di2015NewLine           .ToDictionary(x => x.Key.ToString(),Di2015NewLine                         x => x.Value.ToString());Di2015NewLineDi2015NewLinevar jsonString = JsonConvert.SerializeObject(resourceSet);Di2015NewLine
21100041Di2015UniqueSeparatorforeach (var batch in dataToUpload.Batch(100))Di2015NewLine{Di2015NewLine    using (var context = new Context())Di2015NewLine    {Di2015NewLine        foreach (var item in batch)Di2015NewLine        {Di2015NewLine            ...Di2015NewLine        }Di2015NewLine        context.SaveChanges();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21100041Di2015UniqueSeparatori % 100
21100167Di2015UniqueSeparatorItemsSource
21100167Di2015UniqueSeparatorMyDataGrid.ItemsSource = ds.Tables[0];Di2015NewLine
21100167Di2015UniqueSeparatorDataSource
21100167Di2015UniqueSeparatorWindows Forms
21100174Di2015UniqueSeparator///     if (reverseLookupResult != null && reverseLookupResult.Matches.Count > 0)Di2015NewLine
21100174Di2015UniqueSeparator&
21100174Di2015UniqueSeparator&
21100174Di2015UniqueSeparator&
21100174Di2015UniqueSeparator///     if (reverseLookupResult != null && reverseLookupResult.Matches.Count > 0)Di2015NewLine
21100174Di2015UniqueSeparatorO(log n)
21100286Di2015UniqueSeparatorMyCheckBox
21100286Di2015UniqueSeparatorCheckBox1
21100286Di2015UniqueSeparator    CheckBox myCheckBox = (CheckBox)item.FindControl("CheckBox1");Di2015NewLine    if (myCheckBox.Checked)         //  <===  generate a null object.Di2015NewLine    {Di2015NewLine        KeyRdvId = Convert.ToInt32(ListView1.DataKeys[item.DataItemIndex].Value); Di2015NewLine          //  ( I want to get the key of the selected listview) Di2015NewLine    }Di2015NewLine
21100482Di2015UniqueSeparator    //root is a grid element identified in the XAMLDi2015NewLine    public WebBrowser webb;Di2015NewLineDi2015NewLine    public MainWindow()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLineDi2015NewLine        webb = new WebBrowser();Di2015NewLine        webb.Visibility = System.Windows.Visibility.Hidden;Di2015NewLine        root.Children.Add(webb);Di2015NewLine        webb.LoadCompleted += webb_LoadCompleted;Di2015NewLine        webb.Navigate("http://www.google.com");Di2015NewLine    }Di2015NewLineDi2015NewLine    void webb_LoadCompleted(object sender, NavigationEventArgs e)Di2015NewLine    {Di2015NewLine        MessageBox.Show("Completed loading the page");Di2015NewLineDi2015NewLine        mshtml.HTMLDocument doc = webb.Document as mshtml.HTMLDocument;Di2015NewLine        mshtml.HTMLInputElement obj = doc.getElementById("gs_taif0") as mshtml.HTMLInputElement;Di2015NewLine        mshtml.HTMLFormElement form = doc.forms.item(Type.Missing, 0) as mshtml.HTMLFormElement;Di2015NewLineDi2015NewLine        webb.LoadCompleted -= webb_LoadCompleted; //REMOVE THE OLD EVENT METHOD BINDINGDi2015NewLine        webb.LoadCompleted += webb_LoadCompleted2; //BIND TO A NEW METHOD FOR THE EVENTDi2015NewLine        obj.value = "test search";Di2015NewLine        form.submit(); //PERFORM THE POST ON THE FORM OR SEARCHDi2015NewLine    }Di2015NewLineDi2015NewLine    //SECOND EVENT TO FIRE AFTER YOU POST INFORMATIONDi2015NewLine    void webb_LoadCompleted2(object sender, NavigationEventArgs e)Di2015NewLine    {Di2015NewLine        MessageBox.Show("Completed loading the page second time after post"); Di2015NewLine    }Di2015NewLine
21100516Di2015UniqueSeparatorprivate static int TestWithIndex(int[] array)Di2015NewLine{Di2015NewLine    int x = array[1] * 2;Di2015NewLine    int y = array[1] * 3;Di2015NewLine    int z = array[1] * 4;Di2015NewLine    return x + y + z;Di2015NewLine}Di2015NewLineDi2015NewLineprivate static int TestWithTemp(int[] array)Di2015NewLine{Di2015NewLine    int value = array[1];Di2015NewLine    int x = value * 2;Di2015NewLine    int y = value * 3;Di2015NewLine    int z = value * 4;Di2015NewLine    return x + y + z;Di2015NewLine}Di2015NewLine
21100516Di2015UniqueSeparatorint.MaxValue
21100516Di2015UniqueSeparatorRelease
21100516Di2015UniqueSeparatorTestWithIndex
21100516Di2015UniqueSeparatorTestWithTemp
21100516Di2015UniqueSeparator.method private hidebysig static Di2015NewLine    int32 TestWithIndex (Di2015NewLine        int32[] 'array'Di2015NewLine    ) cil managed Di2015NewLine{Di2015NewLine    // Method begins at RVA 0x2564Di2015NewLine    // Code size 29 (0x1d)Di2015NewLine    .maxstack 2Di2015NewLine    .locals init (Di2015NewLine        [0] int32 x,Di2015NewLine        [1] int32 y,Di2015NewLine        [2] int32 z,Di2015NewLine        [3] int32 CS$1$0000Di2015NewLine    )Di2015NewLineDi2015NewLine    IL_0000: nopDi2015NewLine    IL_0001: ldarg.0Di2015NewLine    IL_0002: ldc.i4.1Di2015NewLine    IL_0003: ldelem.i4Di2015NewLine    IL_0004: ldc.i4.2Di2015NewLine    IL_0005: mulDi2015NewLine    IL_0006: stloc.0Di2015NewLine    IL_0007: ldarg.0Di2015NewLine    IL_0008: ldc.i4.1Di2015NewLine    IL_0009: ldelem.i4Di2015NewLine    IL_000a: ldc.i4.3Di2015NewLine    IL_000b: mulDi2015NewLine    IL_000c: stloc.1Di2015NewLine    IL_000d: ldarg.0Di2015NewLine    IL_000e: ldc.i4.1Di2015NewLine    IL_000f: ldelem.i4Di2015NewLine    IL_0010: ldc.i4.4Di2015NewLine    IL_0011: mulDi2015NewLine    IL_0012: stloc.2Di2015NewLine    IL_0013: ldloc.0Di2015NewLine    IL_0014: ldloc.1Di2015NewLine    IL_0015: addDi2015NewLine    IL_0016: ldloc.2Di2015NewLine    IL_0017: addDi2015NewLine    IL_0018: stloc.3Di2015NewLine    IL_0019: br.s IL_001bDi2015NewLineDi2015NewLine    IL_001b: ldloc.3Di2015NewLine    IL_001c: retDi2015NewLine} // end of method Program::TestWithIndexDi2015NewLine
21100516Di2015UniqueSeparatorldelem.i4
21100516Di2015UniqueSeparator.method private hidebysig static Di2015NewLine    int32 TestWithTemp (Di2015NewLine        int32[] 'array'Di2015NewLine    ) cil managed Di2015NewLine{Di2015NewLine    // Method begins at RVA 0x2590Di2015NewLine    // Code size 29 (0x1d)Di2015NewLine    .maxstack 2Di2015NewLine    .locals init (Di2015NewLine        [0] int32 'value',Di2015NewLine        [1] int32 x,Di2015NewLine        [2] int32 y,Di2015NewLine        [3] int32 z,Di2015NewLine        [4] int32 CS$1$0000Di2015NewLine    )Di2015NewLineDi2015NewLine    IL_0000: nopDi2015NewLine    IL_0001: ldarg.0Di2015NewLine    IL_0002: ldc.i4.1Di2015NewLine    IL_0003: ldelem.i4Di2015NewLine    IL_0004: stloc.0Di2015NewLine    IL_0005: ldloc.0Di2015NewLine    IL_0006: ldc.i4.2Di2015NewLine    IL_0007: mulDi2015NewLine    IL_0008: stloc.1Di2015NewLine    IL_0009: ldloc.0Di2015NewLine    IL_000a: ldc.i4.3Di2015NewLine    IL_000b: mulDi2015NewLine    IL_000c: stloc.2Di2015NewLine    IL_000d: ldloc.0Di2015NewLine    IL_000e: ldc.i4.4Di2015NewLine    IL_000f: mulDi2015NewLine    IL_0010: stloc.3Di2015NewLine    IL_0011: ldloc.1Di2015NewLine    IL_0012: ldloc.2Di2015NewLine    IL_0013: addDi2015NewLine    IL_0014: ldloc.3Di2015NewLine    IL_0015: addDi2015NewLine    IL_0016: stloc.s CS$1$0000Di2015NewLine    IL_0018: br.s IL_001aDi2015NewLineDi2015NewLine    IL_001a: ldloc.s CS$1$0000Di2015NewLine    IL_001c: retDi2015NewLine} // end of method Program::TestWithTempDi2015NewLine
21100516Di2015UniqueSeparatorldelem.i4
21100858Di2015UniqueSeparatorgraphicsLayerHeat.Graphics.AddRange(buffersList);  Di2015NewLine
21100858Di2015UniqueSeparatorgraphicsLayerHeat.Graphics.Add(graphic);  Di2015NewLine
21100858Di2015UniqueSeparatorbufferlist
21100858Di2015UniqueSeparatorAddRange
21100860Di2015UniqueSeparatorContext
21100860Di2015UniqueSeparatorpublic static void saveAllFiles(Context context)Di2015NewLine{Di2015NewLine    var objectTypes = new List<Type> {typeof (int), typeof (string)}; Di2015NewLineDi2015NewLine    foreach(Type objectType in objectTypes)Di2015NewLine    {Di2015NewLine        var properties = objectType.GetProperties(BindingFlags.Instance | BindingFlags.Public);Di2015NewLine        var dataSetObjects = context.Set(objectType);Di2015NewLineDi2015NewLine        foreach(var dataSetObject in dataSetObjects)Di2015NewLine        {Di2015NewLine            foreach( var property in properties )Di2015NewLine            {Di2015NewLine                var value = property.GetValue(dataSetObject);Di2015NewLine                var name = property.Name;Di2015NewLine            }                   Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21100863Di2015UniqueSeparatorpublic static class CustomHtmlHelper {Di2015NewLineDi2015NewLine    public static MvcHtmlString MyFieldBox<TModel, TProperty>(this HtmlHelper<TModel> html, Expression<Func<TModel, TProperty>> expression, String title) {Di2015NewLineDi2015NewLine        StringBuilder sb = new StringBuilder();Di2015NewLine        sb.AppendLine("<div class=\\"field-box\\">");Di2015NewLine        sb.AppendLine("<div class=\\"field-box">\\");Di2015NewLine        sb.AppendLine("<label>{0}</label>", title);Di2015NewLine        sb.AppendLine("<div class=\\"col-md-7\\">");Di2015NewLine        sb.AppendLine( htmlHelper.TextBoxFor( expression, new { @class = "form-control inline-input" }) );Di2015NewLine        sb.AppendLine("</div>");Di2015NewLine        sb.AppendLine( htmlHelper.ValidationMessageFor( expression );Di2015NewLine        sb.AppendLine("</div>");Di2015NewLine        return new MvcHtmlString( sb.ToString() );Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
21100863Di2015UniqueSeparator<%= Html.MyFieldBox( m => m.Name, "Name" ) %>Di2015NewLine
21100886Di2015UniqueSeparatorstring content = string.Empty;Di2015NewLinestring resource_file = "Data/myfile.json";Di2015NewLineDi2015NewLineif (IsLocalResourceFileExists(resource_file))Di2015NewLine        {Di2015NewLine            var resource = Application.GetResourceStream(new Uri(@"/YourProjectName;component/" + resource_file, UriKind.Relative));Di2015NewLine            StreamReader streamReader = new StreamReader(resource.Stream, System.Text.Encoding.UTF8);Di2015NewLine            content = streamReader.ReadToEnd();Di2015NewLine            streamReader.Close();Di2015NewLine        }Di2015NewLine
21100886Di2015UniqueSeparatorpublic bool IsLocalResourceFileExists(string relativePath)Di2015NewLine    {Di2015NewLine        return Application.GetResourceStream(new Uri(@"/YourProjectName;component/" + relativePath, UriKind.Relative)) != null;Di2015NewLine    }Di2015NewLine
21100922Di2015UniqueSeparatorPdfWriter
21100922Di2015UniqueSeparatorObjectDisposedException
21100922Di2015UniqueSeparatorCloseStream
21100922Di2015UniqueSeparatorfalse
21100922Di2015UniqueSeparatorusing (var memoryStream = new MemoryStream())Di2015NewLine{Di2015NewLine    using (var document = new iTextSharp.text.Document(iTextSharp.text.PageSize.A4.Rotate()))Di2015NewLine    {Di2015NewLine        PdfWriter writer = PdfWriter.GetInstance(document, memoryStream);Di2015NewLine        writer.CloseStream = false;Di2015NewLineDi2015NewLine        // Write PDF here.Di2015NewLine    }Di2015NewLineDi2015NewLine    byte[] docArray = memoryStream.ToArray();Di2015NewLine}Di2015NewLine
21100955Di2015UniqueSeparatorfunction onGridViewRowSelected(rowIdx) {Di2015NewLine    var selRow = getSelectedRow(rowIdx);Di2015NewLine    if (curSelRow != null) {Di2015NewLine        curSelRow.style.backgroundColor = curRowSty;Di2015NewLine    } if (null != selRow) {Di2015NewLine        curSelRow = selRow;Di2015NewLine        curRowSty = curSelRow.style.backgroundColor;Di2015NewLine        curSelRow.style.backgroundColor = '#ababab';Di2015NewLine    }Di2015NewLine    clearTimeout(rowHighLightTimeOut);Di2015NewLine}Di2015NewLine
21101079Di2015UniqueSeparatorvar re = new Regex(@"\\{\\}");Di2015NewLineDi2015NewLinestring s = "This sample will count: {}, {}, {}.";Di2015NewLineDi2015NewLinestring[] replacementStrings = new string[]{"r1", "r2", "r3"};Di2015NewLineDi2015NewLineint i = 0;Di2015NewLineDi2015NewLinestring n = re.Replace(s, m => Di2015NewLine    {Di2015NewLine        return replacementStrings[i++];Di2015NewLine    }); Di2015NewLineDi2015NewLineConsole.WriteLine(n); // outputs: This sample will count: r1, r2, r3.Di2015NewLine
21101261Di2015UniqueSeparatorB
21101261Di2015UniqueSeparatorB
21101261Di2015UniqueSeparatorA
21101261Di2015UniqueSeparatorpublic interface IReadValuesDi2015NewLine{Di2015NewLine    string Val1 { get; }Di2015NewLine    string Val2 { get; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ADi2015NewLine{Di2015NewLine    public int Index { get; set; }Di2015NewLineDi2015NewLine    public IReadValues ConfigOne { get; set; }Di2015NewLine    public IReadValues ConfigTwo { get; set; }Di2015NewLineDi2015NewLine    public void SetConfigOne(string val1, string val2);Di2015NewLine    public void SetConfigTwo(string val1, string val2);Di2015NewLine}Di2015NewLineDi2015NewLinepublic class B : IReadValuesDi2015NewLine{Di2015NewLine    public string Val1 { get; set; }Di2015NewLine    public string Val2 { get; set; }Di2015NewLine}Di2015NewLine
21101261Di2015UniqueSeparatorA
21101261Di2015UniqueSeparatorB
21101261Di2015UniqueSeparatorA
21101276Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLine    public Form1()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnLoad(EventArgs e)Di2015NewLine    {Di2015NewLine        base.OnLoad(e);Di2015NewLine        textBox1.TextChanged+=new EventHandler(textBox_TextChanged);Di2015NewLine        textBox2.TextChanged+=new EventHandler(textBox_TextChanged);            Di2015NewLine    }Di2015NewLineDi2015NewLine    void textBox_TextChanged(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        string text=(sender as TextBox).Text;Di2015NewLine        if(!textBox1.Text.Equals(text)) { textBox1.Text=text; }Di2015NewLine        if(!textBox2.Text.Equals(text)) { textBox2.Text=text; }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
21101539Di2015UniqueSeparatornew XElement("AllNumbers",Di2015NewLine  numbers.Any() ?Di2015NewLine  from n in numbersDi2015NewLine  select new XElement("Numbers", numbers.ToArray())Di2015NewLine  : null, // should be , instead of ;Di2015NewLineDi2015NewLine  bonusNumbers.Any() ?Di2015NewLine  from n in bonusNumbersDi2015NewLine  select new XElement("BonusNumbers", bonusNumbers.ToArray())Di2015NewLine  : null);Di2015NewLine
21101539Di2015UniqueSeparatornew XElement("AllNumbers",Di2015NewLine    numbers.Any() ? new XElement("Numbers", numbers) : null,Di2015NewLine    bonusNumbers.Any() ? new XElement("BonusNumbers", bonusNumbers) : null);Di2015NewLine
21101539Di2015UniqueSeparatornew XElement("AllNumbers",Di2015NewLine    numbers.Any() ? Di2015NewLine         new XElement("Numbers", Di2015NewLine             numbers.Select(n => new XElement("Number", n))) : null,Di2015NewLine    bonusNumbers.Any() ? Di2015NewLine         new XElement("BonusNumbers", Di2015NewLine             bonusNumbers.Select(n => new XElement("Number", n))) : null);Di2015NewLine
21101632Di2015UniqueSeparatoroneway
21101632Di2015UniqueSeparatoroneway
21101632Di2015UniqueSeparatoroneway
21101632Di2015UniqueSeparatorthrows
21101632Di2015UniqueSeparatoroneway
21101632Di2015UniqueSeparatorTApplicationException
21101632Di2015UniqueSeparatorTTransportException
21101632Di2015UniqueSeparatorTProtocolException
21101718Di2015UniqueSeparatorvar list1 = File.ReadAllLines("file1.tsv"); Di2015NewLinevar list2 = File.ReadAllLines("file2.tsv").Select(x=>x.Trim()); Di2015NewLineDi2015NewLine//select col3 from list1Di2015NewLineforeach (var x in list1.Select(y=>y.Split("\\t")[2]) { Di2015NewLine   if (list2.Contains(x.Trim())) { Di2015NewLine      Console.WriteLine(x); Di2015NewLine   } Di2015NewLine}Di2015NewLine
21101718Di2015UniqueSeparator.ToLookup()
21101718Di2015UniqueSeparator.Contains()
21101857Di2015UniqueSeparatorstring cmdText = "UPDATE Doctor SET doctorName=@doctorName,dateApt=@dateApt,Di2015NewLine   hrApt=@hrApt,clientname=@clientName WHERE apointmentId=@apointementId";Di2015NewLine
21101857Di2015UniqueSeparatorcmd.Parameters.AddWithValue("@isAvailable", "False");Di2015NewLine// You aren't passing this in your query but have it listed as a parameter...Di2015NewLine
21101857Di2015UniqueSeparatorcmd.Parameters.AddWithValue("@doctorName", // @doctorName type needs to go here);Di2015NewLinecmd.Parameters.AddWithValue("@dateApt", // @dateApt type needs to go here);Di2015NewLinecmd.Parameters.AddWithValue("@hrApt", // @hrApt type needs to go here);Di2015NewLine
21101934Di2015UniqueSeparatorpublic partial class ExampleEntity : IValidatableObjectDi2015NewLine{Di2015NewLine    public bool OptionA { get; set; }Di2015NewLine    public int OptionAValue { get;set; }Di2015NewLine    public bool OptionB { get; set; }Di2015NewLine    public int OptionBValue { get;set; }Di2015NewLineDi2015NewLine    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)Di2015NewLine    {Di2015NewLine        if (OptionA)Di2015NewLine        {Di2015NewLine            var aIsValid = PerformAValidation();Di2015NewLine            if (!aIsValid)Di2015NewLine            {Di2015NewLine                yield return new ValidationResult("A was not valid", new[] {"OptionAValue", OptionAValue});Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        if (OptionB)Di2015NewLine        {Di2015NewLine            var bIsValid = PerformBValidation();Di2015NewLine            if (!bIsValid)Di2015NewLine            {Di2015NewLine                yield return new ValidationResult("B was not valid", new[] {"OptionBValue", OptionBValue});Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private bool PerformAValidation()Di2015NewLine    {Di2015NewLine        if (OptionAValue < 100)Di2015NewLine        {Di2015NewLine            return false;Di2015NewLine        }Di2015NewLineDi2015NewLine        return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    private bool PerformBValidation()Di2015NewLine    {Di2015NewLine        if (OptionBValue > 100)Di2015NewLine        {Di2015NewLine            return false;Di2015NewLine        }Di2015NewLineDi2015NewLine        return true;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21101978Di2015UniqueSeparatorvar result = client.InitiateOutboundCall("+15555555555","+15556666666","http://www.mysite.com/targetsite.aspx?number=%2B15557777777");Di2015NewLine
21101978Di2015UniqueSeparatorstring number = request["number"];Di2015NewLine
21102033Di2015UniqueSeparatorApplyFilters
21102033Di2015UniqueSeparatorApplyFilters
21102033Di2015UniqueSeparatorBMP
21102033Di2015UniqueSeparatorFilters
21102033Di2015UniqueSeparatorBMP
21102098Di2015UniqueSeparatorvar count = myDict.Values.Intersect(myArray).Count();Di2015NewLine
21102229Di2015UniqueSeparator\\B
21102229Di2015UniqueSeparator\\B("[^"]*)-([^"]*")\\B
21102229Di2015UniqueSeparator$1 $2
21102332Di2015UniqueSeparatorstring fileName = @"Shared\\ShellContent\\Tile.jpg";Di2015NewLineGrid someElement = new Grid() Di2015NewLine{Di2015NewLine    // Add StuffDi2015NewLine}Di2015NewLinesomeElement.Measure(new Size(width, height));Di2015NewLinesomeElement.Arrange(new Rect(0,0,width, height));Di2015NewLinevar bitmap = new WriteableBitmap(someElement, null);Di2015NewLineDi2015NewLineusing(var stream = IsolatedStorageFile.GetUserStoreForApplication().OpenFile(fileName, FileMode.OpenOrCreate))Di2015NewLine{Di2015NewLine    bitmap.SaveJpeg(stream, width, height, 0, 100);Di2015NewLine}Di2015NewLineDi2015NewLineUri uri = new Uri("isostore:/" + fileName, UriKind.Absolute);Di2015NewLine
21102539Di2015UniqueSeparatorstring
21102539Di2015UniqueSeparatorstring[]
21102539Di2015UniqueSeparatorefStudent.sponsor = new string[] { Convert.ToString(student.Sponsor) };Di2015NewLine
21102630Di2015UniqueSeparator"(.*?)"|(\\S+)
21102630Di2015UniqueSeparatorOR
21102630Di2015UniqueSeparator\\"(.*?)\\"
21102630Di2015UniqueSeparator(.*?)
21102630Di2015UniqueSeparator([^"]*)
21102630Di2015UniqueSeparator"
21102630Di2015UniqueSeparator([^"]*)
21102630Di2015UniqueSeparator"
21102680Di2015UniqueSeparatorMIB_IPNETROW
21102680Di2015UniqueSeparatorMIB_IPNETTABLE
21102737Di2015UniqueSeparatorString
21102737Di2015UniqueSeparatorstring p1 = keysC[pos]+"="+valsC[pos];Di2015NewLineint tabs = (60 - p1.Length) / 4;Di2015NewLinewr.WriteLine(p1 + new string('\\t', tabs) +"//"+comsC[pos]);Di2015NewLine
21102737Di2015UniqueSeparatorchar
21102737Di2015UniqueSeparatorstring
21102761Di2015UniqueSeparatorprivate string getTextfrom()Di2015NewLine{Di2015NewLine    HtmlDocument doc = new HtmlDocument();Di2015NewLine    //doc.LoadHtml("<span itemprop=\\"price\\" content=\\"164,06\\"></span>");Di2015NewLine    string htmlContent = GetPageContent("http://pastebin.com/raw.php?i=zE31NWtU");Di2015NewLine    doc.LoadHtml(htmlContent);Di2015NewLineDi2015NewLine    HtmlNode priceNode = doc.DocumentNode.SelectNodes("//span")[0];Di2015NewLine    HtmlAttribute valueAttribute = priceNode.Attributes["content"];Di2015NewLine    return valueAttribute.Value;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static String GetPageContent(string Url)Di2015NewLine{Di2015NewLineDi2015NewLine    HttpWebRequest myRequest = (HttpWebRequest)WebRequest.Create(Url);Di2015NewLine    myRequest.Method = "GET";Di2015NewLine    WebResponse myResponse = myRequest.GetResponse();Di2015NewLine    StreamReader sr = new StreamReader(myResponse.GetResponseStream(), System.Text.Encoding.UTF8);Di2015NewLine    string result = sr.ReadToEnd();Di2015NewLine    sr.Close();Di2015NewLine    myResponse.Close();Di2015NewLineDi2015NewLine    return result;Di2015NewLine}Di2015NewLine
21102845Di2015UniqueSeparatorExecuteNonQuery
21102845Di2015UniqueSeparatornumberOfRecordsUpdated
21102845Di2015UniqueSeparatorUPDATE
21102845Di2015UniqueSeparatorint numberOfRecordsUpdated = comm.ExecuteNonQuery();Di2015NewLine
21102898Di2015UniqueSeparatorINotifyPropertyChanged
21102898Di2015UniqueSeparatorDoImport
21102898Di2015UniqueSeparatorprivate bool doImport;Di2015NewLinepublic bool DoImportDi2015NewLine{Di2015NewLine    get { return doImport; }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        doImport = value;Di2015NewLine        this.OnPropertyChanged("DoImport");Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLineprotected void OnPropertyChanged(string propertyName)Di2015NewLine{Di2015NewLine    if (this.PropertyChanged != null)Di2015NewLine        this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine}Di2015NewLine
21102979Di2015UniqueSeparatorstring xlFile = @"\\\\prdhilfs03\\l&i-sales&mkt\\......\\ZipCodeTest.xlsx"; Di2015NewLineConsole.WriteLine(File.Exists(xlFile) ? "Excel File exists." : "Excel File does not exist."); Di2015NewLine
21103127Di2015UniqueSeparatorWebClient
21103127Di2015UniqueSeparatorstring
21103127Di2015UniqueSeparatorDownload...Completed
21103127Di2015UniqueSeparatorDownloadStringCompletedEventHandler
21103127Di2015UniqueSeparatorpublic static void DownloadStringInBackground2 (string address)Di2015NewLine{Di2015NewLine    WebClient client = new WebClient ();Di2015NewLine    Uri uri = new Uri(address);Di2015NewLineDi2015NewLine    // Specify that the DownloadStringCallback2 method gets called Di2015NewLine    // when the download completes.Di2015NewLine    client.DownloadStringCompleted += new DownloadStringCompletedEventHandler(Di2015NewLineDownloadStringCallback2);Di2015NewLine    client.DownloadStringAsync (uri);Di2015NewLine}Di2015NewLineDi2015NewLineprivate static void DownloadStringCallback2 (Object sender, Di2015NewLineDownloadStringCompletedEventArgs e)Di2015NewLine{Di2015NewLine    // If the request was not canceled and did not throw Di2015NewLine    // an exception, display the resource. Di2015NewLine    if (!e.Cancelled && e.Error == null)Di2015NewLine    {Di2015NewLine        string textString = (string)e.Result;Di2015NewLineDi2015NewLine        Console.WriteLine (textString);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21103127Di2015UniqueSeparatorWebClient.DownloadStringAsync
21103127Di2015UniqueSeparatorWebClient.DownloadFileAsync
21103131Di2015UniqueSeparatorForeColor
21103244Di2015UniqueSeparatorStretch
21103244Di2015UniqueSeparatorStretch.None
21103244Di2015UniqueSeparatorStretch.Uniform
21103244Di2015UniqueSeparatorpublic class SizeToStretchConverter : IValueConverterDi2015NewLine{Di2015NewLine    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)Di2015NewLine    {Di2015NewLine        return (int)value <= targetWidth ? Stretch.None : Stretch.Uniform;Di2015NewLine    }Di2015NewLineDi2015NewLine    public object ConvertBack(object value, Type targetType, object parameter,CultureInfo culture)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21103266Di2015UniqueSeparatorprivate async void addImageButton_Click(object sender, RoutedEventArgs e)Di2015NewLineDi2015NewLine{Di2015NewLineDi2015NewLineWindows.Storage.Pickers.FileOpenPicker filePicker = new Windows.Storage.Pickers.FileOpenPicker();Di2015NewLineDi2015NewLinefilePicker.SuggestedStartLocation = Windows.Storage.Pickers.PickerLocationId.PicturesLibrary;Di2015NewLineDi2015NewLinefilePicker.FileTypeFilter.Add(".jpg");Di2015NewLinefilePicker.FileTypeFilter.Add(".png");Di2015NewLinefilePicker.FileTypeFilter.Add(".bmp");Di2015NewLineDi2015NewLinefilePicker.ViewMode = Windows.Storage.Pickers.PickerViewMode.Thumbnail;Di2015NewLineDi2015NewLineWindows.Storage.StorageFile imageFile = await filePicker.PickSingleFileAsync();Di2015NewLineDi2015NewLineif (imageFile != null)Di2015NewLineDi2015NewLine{Di2015NewLineDi2015NewLineDi2015NewLineWindows.UI.Xaml.Media.Imaging.BitmapImage bitmap = new Windows.UI.Xaml.Media.Imaging.BitmapImage();Di2015NewLineDi2015NewLineWindows.Storage.Streams.IRandomAccessStream stream = await imageFile.OpenAsync(Windows.Storage.FileAccessMode.Read);Di2015NewLineDi2015NewLineImage newImage = new Image();Di2015NewLineDi2015NewLinebitmap.SetSource(stream);Di2015NewLineDi2015NewLinenewImage.Source = bitmap;Di2015NewLineDi2015NewLinenewImage.Height = 250;Di2015NewLinenewImage.Stretch = Stretch.UniformToFill;Di2015NewLinenewImage.ManipulationMode = ManipulationModes.All;Di2015NewLinenewImage.ManipulationDelta += TestImage_ManipulationDelta;Di2015NewLineDi2015NewLinethis.theCanvas.Children.Add(newImage);Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLine}Di2015NewLine
21103290Di2015UniqueSeparatorPopup popup = new Popup { Child = CreateXamlControlInCode() };Di2015NewLinepopup.IsOpen = true;Di2015NewLine
21103319Di2015UniqueSeparatorrunat="server"
21103319Di2015UniqueSeparatorButton2_Click
21103678Di2015UniqueSeparatorDataContractSerializer
21103882Di2015UniqueSeparatorpublic class StringGuidConverter: JsonConverter {Di2015NewLine    public override bool CanConvert(Type objectType) {Di2015NewLine        return objectType == typeof(string);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {Di2015NewLine        return new Guid((string)reader.Value);Di2015NewLine    }Di2015NewLineDi2015NewLine    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {Di2015NewLine        writer.WriteValue(((Guid)value).ToString("N"));Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Asset {Di2015NewLine    /// <summary>Di2015NewLine    /// Initializes a new instance of the <see cref="Asset"/> class.Di2015NewLine    /// </summary>Di2015NewLine    public Asset() {Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Initializes a new instance of the <see cref="Asset"/> class.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="fileId">The file ID.</param>Di2015NewLine    /// <param name="signature">The file signature.</param>Di2015NewLine    [JsonConstructor]Di2015NewLine    public Asset(string fileId, Guid signature) {Di2015NewLine        this.FileId = fileId;Di2015NewLine        this.Signature = signature;Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Gets the file ID to be used with the render service.Di2015NewLine    /// </summary>Di2015NewLine    [JsonProperty("file_id")]Di2015NewLine    public string FileId { get; private set; }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Gets file signature to be used with the render service.Di2015NewLine    /// </summary>Di2015NewLine    [JsonProperty("signature")]Di2015NewLine    [JsonConverter(typeof(StringGuidConverter))]Di2015NewLine    public Guid Signature { get; private set; }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Gets the JSON representation of this instance.Di2015NewLine    /// </summary>Di2015NewLine    /// <returns>Returns a JSON <see cref="String"/>.</returns>Di2015NewLine    public override string ToString() {Di2015NewLine        return JsonConvert.SerializeObject(this);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class FilesResponse {Di2015NewLine    /// <summary>Di2015NewLine    /// Initializes a new instance of the <see cref="FilesResponse"/> class.Di2015NewLine    /// </summary>Di2015NewLine    public FilesResponse() {Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Initializes a new instance of the <see cref="FilesResponse"/> class.Di2015NewLine    /// </summary>Di2015NewLine    /// <param name="files">A collection of assets by their name.</param>Di2015NewLine    [JsonConstructor]Di2015NewLine    public FilesResponse(Dictionary<string, Asset> files) {Di2015NewLine        this.Files = files;Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Gets the collection of assets by their name.Di2015NewLine    /// </summary>Di2015NewLine    [JsonProperty]Di2015NewLine    public Dictionary<string, Asset> Files { get; private set; }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Gets the JSON representation of this instance.Di2015NewLine    /// </summary>Di2015NewLine    /// <returns>Returns a JSON <see cref="String"/>.</returns>Di2015NewLine    public override string ToString() {Di2015NewLine        return JsonConvert.SerializeObject(this);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass Test {Di2015NewLine    public static void Run() {Di2015NewLine        var json = @"{Di2015NewLine  ""map_waypoint"": { ""file_id"": 157353, ""signature"": ""32633AF8ADEA696AE32D617B10D3AC57"" },Di2015NewLine  ""map_waypoint_contested"": { ""file_id"": 102349, ""signature"": ""32633AF8ADEA696AE32D617B10D3AC57"" },Di2015NewLine  ""map_waypoint_hover"": { ""file_id"": 157354, ""signature"": ""32633AF8ADEA696AE32D617B10D3AC57"" }Di2015NewLine}";Di2015NewLineDi2015NewLineDi2015NewLine        var result2 = JsonConvert.DeserializeObject<FilesResponse>(json);Di2015NewLine        var result3 = new FilesResponse(JsonConvert.DeserializeObject<Dictionary<string, Asset>>(json));Di2015NewLine    }Di2015NewLine}Di2015NewLine
21103882Di2015UniqueSeparatorresult2
21103882Di2015UniqueSeparatorFilesResponse
21103882Di2015UniqueSeparatorpublic class FilesResponse2: Dictionary<string, Asset>Di2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Initializes a new instance of the <see cref="FilesResponse"/> class.Di2015NewLine    /// </summary>Di2015NewLine    public FilesResponse2() {Di2015NewLine    }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Gets the collection of assets by their name.Di2015NewLine    /// </summary>Di2015NewLine    public Dictionary<string, Asset> Files { get { return this; } }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// Gets the JSON representation of this instance.Di2015NewLine    /// </summary>Di2015NewLine    /// <returns>Returns a JSON <see cref="String"/>.</returns>Di2015NewLine    public override string ToString() {Di2015NewLine        return JsonConvert.SerializeObject(this);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// deserialization:Di2015NewLinevar result22 = JsonConvert.DeserializeObject<FilesResponse2>(json);Di2015NewLine
21103916Di2015UniqueSeparatorSingleline
21103916Di2015UniqueSeparatorSingleline
21103916Di2015UniqueSeparator(?inxs)Di2015NewLine<!--((?!-->).)+-->Di2015NewLine(?!Di2015NewLine  ((?!</?(script|style)).)*Di2015NewLine  </(script|style)Di2015NewLine)Di2015NewLine
21103916Di2015UniqueSeparator(?inxs)
21103916Di2015UniqueSeparatorIgnoreCase
21103916Di2015UniqueSeparatorExplicitCapture
21103916Di2015UniqueSeparatorIgnorePatternWhitespace
21103916Di2015UniqueSeparatorSingleline
21103916Di2015UniqueSeparator@"(?ins)<!--((?!-->).)+-->(?!((?!</?(script|style)).)*</(script|style))"Di2015NewLine
21103942Di2015UniqueSeparatorvar query = DbContext.Clients.Where(c => c.FamilyNames.Any(fn => fn == textEnteredByUser)).ToList();Di2015NewLine
21103942Di2015UniqueSeparatorvar query = DbContext.Clients.Where(c => c.FamilyNames.Any(fn => fn == textEnteredByUser)).Include(c => c.FamilyNames).ToList();Di2015NewLine
21104001Di2015UniqueSeparatorInternaute
21104258Di2015UniqueSeparatorBitmapImage
21104258Di2015UniqueSeparatorMemoryStream
21104258Di2015UniqueSeparatorBitmapImage
21104258Di2015UniqueSeparatorMemoryStream
21104425Di2015UniqueSeparatorvar query = from ev in db.EventsDi2015NewLine        group ev by ev.EventDateID into grpDi2015NewLine        select new Di2015NewLine            {Di2015NewLine                EventDateID = grp.Key,Di2015NewLine                Count = grp.Count(),Di2015NewLine                IsFull = grp.Count() >= 10Di2015NewLine            };Di2015NewLine
21104582Di2015UniqueSeparator<Canvas Name="canvas" Di2015NewLine        MouseDown="canvas_MouseDown" Di2015NewLine        MouseUp="canvas_MouseUp" Di2015NewLine        Background="Transparent"/>Di2015NewLine
21104970Di2015UniqueSeparatorItemsSource
21104970Di2015UniqueSeparatorCurrentDay
21104970Di2015UniqueSeparatorObservableCollection
21104970Di2015UniqueSeparatorItems
21104970Di2015UniqueSeparatorObservableCollection
21104970Di2015UniqueSeparatorCurrentDay
21104970Di2015UniqueSeparatornew ObservableCollection<Item>()
21104970Di2015UniqueSeparatorCurrentDay.Clear();Di2015NewLineforeach (var item in result.results.items)Di2015NewLine    CurrentDay.Add(item);Di2015NewLine
21104970Di2015UniqueSeparatorCurrentDay = new ObservableCollection<Item>();Di2015NewLine
21105170Di2015UniqueSeparatorValue
21105170Di2015UniqueSeparatorToString()
21105170Di2015UniqueSeparatorDouble.TryParse(Convert.ToString(dataGridView1.Rows[i].Cells[0].Value), out d);Di2015NewLine
21105170Di2015UniqueSeparatorConvert.ToString()
21105170Di2015UniqueSeparatorToString()
21105170Di2015UniqueSeparatorValue
21105170Di2015UniqueSeparatord
21105344Di2015UniqueSeparatorpublic class ProductViewModelDi2015NewLine{Di2015NewLine    public IPagedList<Product> Products { get; set; }Di2015NewLine    public IEnumerable<Order> Orders { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic ActionResult Index()Di2015NewLine{Di2015NewLine    var model = new ProductViewModel();Di2015NewLine    model.Products = // ... fetch from databaseDi2015NewLine    model.Orders = // ... fetch from databaseDi2015NewLineDi2015NewLine    return View(model);Di2015NewLine}Di2015NewLine
21105344Di2015UniqueSeparator@model ProductViewModelDi2015NewLine
21105467Di2015UniqueSeparatorpublic <T extends Page> T getPage(Class<T> pageClass)Di2015NewLine
21105467Di2015UniqueSeparatorMyPage page = myClass.Page(MyPage.class);Di2015NewLine
21105493Di2015UniqueSeparatorPortaSerial spSistema
21105493Di2015UniqueSeparatorEnviarComandoWeb
21105493Di2015UniqueSeparatorPortaSerial spSistema = new PortaSerial();Di2015NewLine
21105493Di2015UniqueSeparatorspSistema.EnviarComandoWeb(comando);Di2015NewLine
21105744Di2015UniqueSeparator(s[counter] == s[s.Length - counter - 1])
21105744Di2015UniqueSeparators[counter]
21105744Di2015UniqueSeparators.Length - counter - 1
21105761Di2015UniqueSeparatorMySQL
21105761Di2015UniqueSeparatordatetime
21105761Di2015UniqueSeparatorstring query = "INSERT INTO master (NoInvoice, Name, Date, Type, Additionaltext) VALUES (@NoInvoice, @sName, @dtDate, @sType, @sAdditionalText)";Di2015NewLineusing(SqlCommand command = New SqlCommand(query, yourconnection)Di2015NewLine{Di2015NewLine    command.Parameters.AddWithValue("@NoInvoice", property_NoInvoice);Di2015NewLine    command.Parameters.AddWithValue("@sName ", property_sName);Di2015NewLine    command.Parameters.AddWithValue("@dtDate ", property_dtDate);Di2015NewLine    command.Parameters.AddWithValue("@sType ", property_sType);Di2015NewLine    command.Parameters.AddWithValue("@sAdditionalText ", property_sAdditionalText);Di2015NewLineDi2015NewLine    command.ExecuteNonQuery();Di2015NewLine}Di2015NewLine
21105761Di2015UniqueSeparatordatetimepicker
21105761Di2015UniqueSeparatorDateTime
21105761Di2015UniqueSeparatorDateTime
21105761Di2015UniqueSeparatorclsDbConnect.property_dtDate = datetimepicker1.Value;Di2015NewLine
21105779Di2015UniqueSeparatorProduct
21105779Di2015UniqueSeparatorProductEdit
21105779Di2015UniqueSeparatorprivate void btReset_Click(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    Product = new Product();Di2015NewLine}Di2015NewLine
21105779Di2015UniqueSeparatorProduct
21105779Di2015UniqueSeparator(._.)?
21105779Di2015UniqueSeparatordb.Entry(Product).State = EntityState.Unchanged;Di2015NewLine
21105836Di2015UniqueSeparator_command
21105836Di2015UniqueSeparatorcommand
21105836Di2015UniqueSeparator_command
21106077Di2015UniqueSeparatorint[] array = { 25, 35, 55, 5, 60, 200, 18, 18, 30, 10 };Di2015NewLineint selectdVal = 5;Di2015NewLineDi2015NewLineint barMin = 1;Di2015NewLineint barMax = 100;Di2015NewLineDi2015NewLinedecimal rangeMin = array.Min();Di2015NewLinedecimal rangeMax = array.Max();Di2015NewLineDi2015NewLinedecimal ratio = (barMax - barMin) / (rangeMax - rangeMin);Di2015NewLineDi2015NewLineint bar = barMax - (int)(ratio * (selectdVal - rangeMin));Di2015NewLine
21106447Di2015UniqueSeparatorEnvDTE.UIHierarchy solutionExplorer = dte.ToolWindows.SolutionExplorer;Di2015NewLineobject[] items = solutionExplorer.SelectedItems as object[];Di2015NewLineEnvDTE.UIHierarchyItem item = items[0] as EnvDTE.UIHierarchyItem;Di2015NewLineEnvDTE.ProjectItem projectItem = item.Object as EnvDTE.ProjectItem;Di2015NewLinestring path = projectItem.Properties.Item("FullPath").Value.ToString();Di2015NewLine
21106709Di2015UniqueSeparatorMasked TextBox
21106709Di2015UniqueSeparatorTextBox
21106911Di2015UniqueSeparatorIQueryable<Foo> query = context.Where(p => idCollection.Contains(p.ID));Di2015NewLine
21106911Di2015UniqueSeparatorIQueryable<Foo> query = context.Where(p => !idCollection.Contains(p.ID));Di2015NewLine
21107054Di2015UniqueSeparatorbyte[]
21107054Di2015UniqueSeparatorvar output = input.Select(x => (byte)x).ToArray();Di2015NewLine
21107102Di2015UniqueSeparator<w:bookmarkStart w:name="bkStart" w:id="0" />Di2015NewLine
21107114Di2015UniqueSeparatorHasMany(x => x.AccessPointPosition)Di2015NewLine   // these are most likely by conventionDi2015NewLine   // .Table("tbl_AccessPointPosition") Di2015NewLine   // .KeyColumn("Transport_id")Di2015NewLine   // ...Di2015NewLine   .AsEntityMap("Endpoint_id")Di2015NewLine   .Element("integer_col", part => part.Type<int>());Di2015NewLine
21107165Di2015UniqueSeparatorCount()
21107165Di2015UniqueSeparatorif (((SelectList)ViewData["_CellPhoneCarrier"]).Items.Count() == 1))Di2015NewLine
21107165Di2015UniqueSeparatorpublic class CellPhoneCarriersViewModelDi2015NewLine{Di2015NewLine    public SelectList Items { get; set; }Di2015NewLine    public int CellPhoneCarrier { get; set; }Di2015NewLine}Di2015NewLine
21107165Di2015UniqueSeparatorSelectList
21107165Di2015UniqueSeparatorViewData
21107165Di2015UniqueSeparatorpublic ActionResult Index()Di2015NewLine{Di2015NewLine    var model = new CellPhoneCarriersViewModel();Di2015NewLine    model.Items = new SelectList(...);Di2015NewLineDi2015NewLine    return View(model);Di2015NewLine}Di2015NewLine
21107165Di2015UniqueSeparator@if (Model.Items.Count() == 1)Di2015NewLine{Di2015NewLine    @Html.HiddenFor(m => m.CellPhoneCarrier)Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    @Html.DropDownListFor(m => m.CellPhoneCarrier, Model.Items)Di2015NewLine}Di2015NewLine
21107165Di2015UniqueSeparatorpublic static class HtmlExtensionsDi2015NewLine{Di2015NewLine    public static HtmlString HiddenOrDropDownFor<TModel, TProperty>(this HtmlHelper<TModel> helper,Di2015NewLine        Expression<Func<TModel, TProperty>> target, IEnumerable<SelectListItem> selectList)Di2015NewLine    {Di2015NewLine        if (selectList.Count() == 1)Di2015NewLine            return helper.HiddenFor(target);Di2015NewLineDi2015NewLine        return helper.DropDownListFor(target, selectList);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21107165Di2015UniqueSeparator@Html.HiddenOrDropDownFor(m => m.CellPhoneCarrier, Model.Items)Di2015NewLine
21107347Di2015UniqueSeparatorcheckbox
21107347Di2015UniqueSeparator#chkAgree
21107354Di2015UniqueSeparatorstatic public ObservableCollection<GetDrive> RootDrive = new ObservableCollection<GetDrive>();Di2015NewLineDi2015NewLinepublic MainWindow()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLineDi2015NewLine    foreach (DriveInfo di in DriveInfo.GetDrives())Di2015NewLine    {Di2015NewLine        ObservableCollection<GetDirectory>directories = new ObservableCollection<GetDirectory>();Di2015NewLine        tryDi2015NewLine        {Di2015NewLine            foreach (string s in Directory.GetDirectories(di.Name))Di2015NewLine            {Di2015NewLine                directories.Add(new GetDirectory(s));Di2015NewLine            }               Di2015NewLine        }Di2015NewLine        catch (IOException)  //drive is not ready, e.g. DVD driveDi2015NewLine        {Di2015NewLine           // Handle it?Di2015NewLine        }    Di2015NewLine        RootDrive.Add(new GetDrive(di.Name, directories));Di2015NewLine    }Di2015NewLine}Di2015NewLine
21107588Di2015UniqueSeparatorItem
21107588Di2015UniqueSeparatorvar param = Expression.Parameter(typeof(Employee), "t");Di2015NewLineMemberExpression member = Expression.Property(param, "EmployeeName");Di2015NewLinevar body = Expression.Property(param, "Item", Expression.Constant(10));Di2015NewLinevar lambda = Expression.Lambda<Func<Employee, string>>(body, param);Di2015NewLinevar compiled = lambda.Compile();Di2015NewLine
21107588Di2015UniqueSeparatorFunc<Employee, string> compiled = t => t[10];Di2015NewLine
21107618Di2015UniqueSeparatorIEnumerable
21107618Di2015UniqueSeparatorAllCustomers
21107618Di2015UniqueSeparatorGetAllCustomers
21107618Di2015UniqueSeparatorToList
21107618Di2015UniqueSeparatorAllCustomer
21107618Di2015UniqueSeparatorIQueryable
21107618Di2015UniqueSeparatorAllCustomers
21107618Di2015UniqueSeparatorAllCustomers
21107618Di2015UniqueSeparatorIEnumerable
21107618Di2015UniqueSeparatorList
21107618Di2015UniqueSeparatorIReadOnlyList
21107618Di2015UniqueSeparatorIEnumerable
21107630Di2015UniqueSeparatorSortExpression
21107630Di2015UniqueSeparator<asp:TemplateField HeaderText="Customer ID" SortExpression="Customer_ID">Di2015NewLine
21107764Di2015UniqueSeparatorMath.Ceiling
21107764Di2015UniqueSeparatordouble RoundUpToHalf(double number)Di2015NewLine{Di2015NewLine    number *= 2;  // Turn 2.4 to 4.8Di2015NewLine    number = Math.Ceiling(number)  // Round up to 5Di2015NewLine    return number/2;  // Back to 2.5Di2015NewLine}Di2015NewLine
21107839Di2015UniqueSeparatorattributes
21107839Di2015UniqueSeparatorList<Sura>
21107839Di2015UniqueSeparatorvar items = (from sura in doc.Root.Element("suras").Elements("sura")Di2015NewLine             select new Sura {Di2015NewLine                  Aya = (string)sura.Attribute("Aya"),Di2015NewLine                  AyaTranslation = (string)sura.Attribute("AyaTranslation")Di2015NewLine             }).ToList();Di2015NewLine
21107839Di2015UniqueSeparatorfrom
21107839Di2015UniqueSeparatorwhere
21107839Di2015UniqueSeparatorElement("name")
21107839Di2015UniqueSeparatorRoot
21107864Di2015UniqueSeparator _token = thing.WeakSubscribe(() => parameter.Value, HandleValueChanged);Di2015NewLine
21107864Di2015UniqueSeparator _token.Dispose();Di2015NewLine _token = null;Di2015NewLine
21107864Di2015UniqueSeparatorDispose
21107864Di2015UniqueSeparator    protected virtual void Dispose(bool disposing)Di2015NewLine    {Di2015NewLine        if (disposing)Di2015NewLine        {Di2015NewLine            RemoveEventHandler();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void RemoveEventHandler()Di2015NewLine    {Di2015NewLine        if (!_subscribed)Di2015NewLine            return;Di2015NewLineDi2015NewLine        var source = (TSource) _sourceReference.Target;Di2015NewLine        if (source != null)Di2015NewLine        {Di2015NewLine            _sourceEventInfo.GetRemoveMethod().Invoke(source, new object[] {CreateEventHandler()});Di2015NewLine            _subscribed = false;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
21107869Di2015UniqueSeparatorbool IsValidEmail(string email)Di2015NewLine{Di2015NewLine    try {Di2015NewLine        var mail = new System.Net.Mail.MailAddress(email);Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine    catch {Di2015NewLine        return false;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21107906Di2015UniqueSeparatorConvert.ToString(object)
21107906Di2015UniqueSeparatorstring.Empty
21107906Di2015UniqueSeparatorobject
21107906Di2015UniqueSeparatornull
21107906Di2015UniqueSeparatorConvert.ToString(string)
21107906Di2015UniqueSeparatornull
21107906Di2015UniqueSeparator.ToUpper()
21107906Di2015UniqueSeparatornull
21108120Di2015UniqueSeparatorselect s
21108120Di2015UniqueSeparatorx
21108120Di2015UniqueSeparatorfrom s
21108120Di2015UniqueSeparatorreturn db.sims.Where(x => x.has_been_modified).ToList();Di2015NewLine
21108120Di2015UniqueSeparatorList<Sim>
21108120Di2015UniqueSeparatorList<String>
21108293Di2015UniqueSeparatorViewModels
21108293Di2015UniqueSeparatorView
21108293Di2015UniqueSeparatorView
21108293Di2015UniqueSeparatorViewModels
21108293Di2015UniqueSeparatorUsing the strategy pattern
21108293Di2015UniqueSeparatorStrategy
21108293Di2015UniqueSeparatorConclusion for Strategy pattern
21108293Di2015UniqueSeparatorC
21108293Di2015UniqueSeparatorR
21108293Di2015UniqueSeparatorU
21108293Di2015UniqueSeparatorD
21108293Di2015UniqueSeparatorUsing several ViewModels for one View
21108293Di2015UniqueSeparatorViewModels
21108293Di2015UniqueSeparatorView
21108293Di2015UniqueSeparatorDataTemplate
21108293Di2015UniqueSeparatorDataTemplateSelector
21108293Di2015UniqueSeparatorDataTemplate
21108293Di2015UniqueSeparatorViewModel
21108293Di2015UniqueSeparatorDataTemplateSelector
21108293Di2015UniqueSeparator<ContentControl Name="DynamicContentRightPanel"                            Di2015NewLine                Style="{StaticResource ContentControlRightPanelStyle}"Di2015NewLine                Content="{Binding Path=ContentRightPanelModel.ContentType,Di2015NewLine                                  Mode=TwoWay,Di2015NewLine                                  UpdateSourceTrigger=PropertyChanged}" />Di2015NewLine
21108293Di2015UniqueSeparatorContentControlRightPanelStyle
21108293Di2015UniqueSeparator<Style x:Key="ContentControlRightPanelStyle" TargetType="{x:Type ContentControl}">Di2015NewLine    <Setter Property="ContentTemplateSelector" Value="{StaticResource MyTemplateSelector}" />                Di2015NewLineDi2015NewLine    <Setter Property="DataTemplateSelectors:DynamicTemplateSelector.Templates">Di2015NewLine        <Setter.Value>Di2015NewLine            <DataTemplateSelectors:TemplateCollection>Di2015NewLine                <DataTemplateSelectors:Template Value="DateCalculator" Di2015NewLine                                                DataTemplate="{StaticResource DateCalcTemplate}" />Di2015NewLineDi2015NewLine                <DataTemplateSelectors:Template Value="Test" Di2015NewLine                                                DataTemplate="{StaticResource TestTemplate}" />Di2015NewLine            </DataTemplateSelectors:TemplateCollection>Di2015NewLine        </Setter.Value>Di2015NewLine    </Setter>Di2015NewLine</Style>    Di2015NewLine
21108293Di2015UniqueSeparatorDynamicTemplateSelector (taken and little reworked from CodeProject)
21108293Di2015UniqueSeparatorpublic class DynamicTemplateSelector : DataTemplateSelectorDi2015NewLine{Di2015NewLine    #region Templates Dependency PropertyDi2015NewLineDi2015NewLine    public static readonly DependencyProperty TemplatesProperty =Di2015NewLine        DependencyProperty.RegisterAttached("Templates", typeof(TemplateCollection), typeof(DataTemplateSelector),Di2015NewLine        new FrameworkPropertyMetadata(new TemplateCollection(), FrameworkPropertyMetadataOptions.Inherits));Di2015NewLineDi2015NewLine    public static TemplateCollection GetTemplates(UIElement element)Di2015NewLine    {Di2015NewLine        return (TemplateCollection)element.GetValue(TemplatesProperty);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static void SetTemplates(UIElement element, TemplateCollection collection)Di2015NewLine    {Di2015NewLine        element.SetValue(TemplatesProperty, collection);Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region SelectTemplateDi2015NewLineDi2015NewLine    public override DataTemplate SelectTemplate(object item, DependencyObject container)Di2015NewLine    {Di2015NewLine        string myStringItem = (string)item;Di2015NewLineDi2015NewLine        if (!(container is UIElement))Di2015NewLine        {Di2015NewLine            return base.SelectTemplate(item, container);Di2015NewLine        }Di2015NewLineDi2015NewLine        TemplateCollection templates = GetTemplates(container as UIElement);Di2015NewLineDi2015NewLine        if (templates == null || templates.Count == 0)Di2015NewLine        {Di2015NewLine            base.SelectTemplate(item, container);Di2015NewLine        }Di2015NewLineDi2015NewLine        foreach (var template in templates)Di2015NewLine        {Di2015NewLine            if (myStringItem.Equals(template.Value.ToString()))Di2015NewLine            {Di2015NewLine                return template.DataTemplate;Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        return base.SelectTemplate(item, container);Di2015NewLine    }Di2015NewLineDi2015NewLine    #endregionDi2015NewLine}Di2015NewLineDi2015NewLine#region TemplateCollectionDi2015NewLineDi2015NewLinepublic class TemplateCollection : List<Template>Di2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLine#endregionDi2015NewLineDi2015NewLine#region Template Dependency ObjectDi2015NewLineDi2015NewLinepublic class Template : DependencyObjectDi2015NewLine{Di2015NewLine    public static readonly DependencyProperty ValueProperty = DependencyProperty.Register("Value", typeof(string), typeof(Template));Di2015NewLineDi2015NewLine    public static readonly DependencyProperty DataTemplateProperty =Di2015NewLine       DependencyProperty.Register("DataTemplate", typeof(DataTemplate), typeof(Template));Di2015NewLineDi2015NewLine    public string ValueDi2015NewLine    { get { return (string)GetValue(ValueProperty); } set { SetValue(ValueProperty, value); } }Di2015NewLineDi2015NewLine    public DataTemplate DataTemplateDi2015NewLine    { get { return (DataTemplate)GetValue(DataTemplateProperty); } set { SetValue(DataTemplateProperty, value); } }Di2015NewLine}Di2015NewLineDi2015NewLine#endregionDi2015NewLine
21108293Di2015UniqueSeparatorConclusion for several ViewModels / one main View
21108293Di2015UniqueSeparatorViewModel / View
21108534Di2015UniqueSeparatorCustomSummaryInformation
21108534Di2015UniqueSeparator protected override void Execute(CodeActivityContext context)Di2015NewLine {Di2015NewLine    var summaryReport = new CustomSummaryInformation()Di2015NewLine    {Di2015NewLine    Message = "Your message",Di2015NewLine    SectionPriority = 0,Di2015NewLine    SectionHeader = "Header Name",Di2015NewLine    SectionName = "Section Name",Di2015NewLine    };Di2015NewLine    context.Track(summaryReport);Di2015NewLine}Di2015NewLine
21108552Di2015UniqueSeparatorHtml.BeginForm
21108552Di2015UniqueSeparatorAjax.BeginForm
21108552Di2015UniqueSeparator<input type="submit" ....
21108562Di2015UniqueSeparatorGeoCoordinate
21108562Di2015UniqueSeparatorMap.Center
21108562Di2015UniqueSeparatorGeoCoordinate _center;Di2015NewLinepublic GeoCoordinate CenterDi2015NewLine{Di2015NewLine    get { return _center; }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        _center = value;Di2015NewLine        OnPropertyChanged("Center"); // or whatever hereDi2015NewLine    }Di2015NewLine}Di2015NewLine
21108562Di2015UniqueSeparatorMap.Center
21108634Di2015UniqueSeparatorMicrosoft.Bcl.Async
21108818Di2015UniqueSeparatorBuild
21108818Di2015UniqueSeparatorConfiguration Manager
21108818Di2015UniqueSeparatorBuild
21108818Di2015UniqueSeparatorDebug
21108818Di2015UniqueSeparatorRelease
21108860Di2015UniqueSeparatornetTcpBinding
21108860Di2015UniqueSeparatorwsDualHttpBinding
21108860Di2015UniqueSeparatornetTcpBinding
21108860Di2015UniqueSeparatorwsDualHttpBinding
21109041Di2015UniqueSeparatorGLCheck.Call(() => GL.ClearColor(Color.White));Di2015NewLineGLCheck.Call(() => GL.MatrixMode(MatrixMode.Modelview));Di2015NewLineGLCheck.Call(() => GL.PushMatrix());Di2015NewLine
21109041Di2015UniqueSeparatorCall
21109041Di2015UniqueSeparatorpublic static void Call(Action a)Di2015NewLine{Di2015NewLine    a();Di2015NewLine    CheckError();Di2015NewLine}Di2015NewLine
21109041Di2015UniqueSeparatorGLCheck.Call(GL.PushMatrix);Di2015NewLine
21109041Di2015UniqueSeparator()
21109041Di2015UniqueSeparatorPushMatrix
21109113Di2015UniqueSeparatorint value = 12345678;Di2015NewLinefloat test = (float)value / int.MaxValue / 2 + 1;Di2015NewLineConsole.WriteLine(test);Di2015NewLine
21109113Di2015UniqueSeparatorvalue
21109113Di2015UniqueSeparatorvalue == 2300
21109113Di2015UniqueSeparator0
21109113Di2015UniqueSeparatorvalue == 2400
21109113Di2015UniqueSeparator1.000001
21109113Di2015UniqueSeparatordouble
21109113Di2015UniqueSeparatorint value = 1;Di2015NewLinedouble test = (double)value / int.MaxValue / 2 + 1;Di2015NewLineConsole.WriteLine(test);Di2015NewLine
21109113Di2015UniqueSeparator1.00000000023283
21109114Di2015UniqueSeparatorScanForAxisCameras()
21109114Di2015UniqueSeparatorScanForAxisCameras
21109114Di2015UniqueSeparatorpublic static void ScanForAxisCameras() {Di2015NewLine        DNSSDService service = new DNSSDService();Di2015NewLine        DNSSDEventManager eventManager = new DNSSDEventManager();Di2015NewLine        eventManager.ServiceFound += new _IDNSSDEvents_ServiceFoundEventHandler(eventManager_ServiceFound);Di2015NewLine        DNSSDService browse = service.Browse(0, 0, "_axis-video._tcp", null, eventManager);Di2015NewLine        Application.Run();//if not invoked everything above does not startDi2015NewLine}Di2015NewLine
21109114Di2015UniqueSeparatorApplication.Run()
21109114Di2015UniqueSeparatorservice
21109114Di2015UniqueSeparatoreventManager
21109114Di2015UniqueSeparatorbrowse
21109114Di2015UniqueSeparatorScanForAxisCameras
21109114Di2015UniqueSeparatorServiceFound
21109114Di2015UniqueSeparatorApplication.Run()
21109114Di2015UniqueSeparatorScanForAxisCameras
21109114Di2015UniqueSeparatorApplication.Run()
21109114Di2015UniqueSeparator[STAThread]
21109114Di2015UniqueSeparatorScanForAxisCameras
21109135Di2015UniqueSeparator<Window x:Class="WpfApplication1.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        xmlns:local="clr-namespace:WpfApplication1"Di2015NewLine        Title="MainWindow" Height="350" Width="525">Di2015NewLine    <Window.DataContext>Di2015NewLine        <local:MainWindowViewModel></local:MainWindowViewModel>Di2015NewLine    </Window.DataContext>Di2015NewLine    <Grid>Di2015NewLineDi2015NewLine        <Grid.ColumnDefinitions>Di2015NewLine            <ColumnDefinition Width="*"/>Di2015NewLine            <ColumnDefinition Width="*"/>Di2015NewLine        </Grid.ColumnDefinitions>Di2015NewLineDi2015NewLine        <Grid.RowDefinitions>Di2015NewLine            <RowDefinition Height="20"/>Di2015NewLine            <RowDefinition Height="*"/>Di2015NewLine        </Grid.RowDefinitions>Di2015NewLine        <Button Grid.Row="0" Grid.Column="0" Command="{Binding ChangeFirstViewCommand}">Change View #1</Button>Di2015NewLine        <Button Grid.Row="0" Grid.Column="1" Command="{Binding ChangeSecondViewCommand}">Change View #2</Button>Di2015NewLine        <ContentControl  Grid.Row="1" Grid.ColumnSpan="2" Content="{Binding ContentControlView}"></ContentControl>Di2015NewLine    </Grid>Di2015NewLine</Window>Di2015NewLine
21109135Di2015UniqueSeparatorusing GalaSoft.MvvmLight;Di2015NewLineusing GalaSoft.MvvmLight.Command;Di2015NewLineusing GalaSoft.MvvmLight.Messaging;Di2015NewLineusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Threading.Tasks;Di2015NewLineusing System.Windows;Di2015NewLineusing System.Windows.Input;Di2015NewLineDi2015NewLinenamespace WpfApplication1Di2015NewLine{Di2015NewLine    public class MainWindowViewModel : ViewModelBaseDi2015NewLine    {Di2015NewLine        private FrameworkElement _contentControlView;Di2015NewLine        public FrameworkElement ContentControlViewDi2015NewLine        {Di2015NewLine            get { return _contentControlView; }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                _contentControlView = value;Di2015NewLine                RaisePropertyChanged("ContentControlView");Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public MainWindowViewModel()Di2015NewLine        {Di2015NewLine            Messenger.Default.Register<SwitchViewMessage>(this, (switchViewMessage) =>Di2015NewLine            {Di2015NewLine                SwitchView(switchViewMessage.ViewName);Di2015NewLine            });Di2015NewLine        }Di2015NewLineDi2015NewLine        public ICommand ChangeFirstViewCommandDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return new RelayCommand(() =>Di2015NewLine                {Di2015NewLine                    SwitchView("FirstView");Di2015NewLineDi2015NewLine                });Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        public ICommand ChangeSecondViewCommandDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return new RelayCommand(() =>Di2015NewLine                {Di2015NewLine                    SwitchView("SecondView");Di2015NewLine                });Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public void SwitchView(string viewName)Di2015NewLine        {Di2015NewLine            switch (viewName)Di2015NewLine            {Di2015NewLine                case "FirstView":Di2015NewLine                    ContentControlView = new FirstView();Di2015NewLine                    ContentControlView.DataContext = new FirstViewModel() { Text = "This is the first View" };Di2015NewLine                    break;Di2015NewLineDi2015NewLine                default:Di2015NewLine                    ContentControlView = new SecondView();Di2015NewLine                    ContentControlView.DataContext = new SecondViewModel() { Text = "This is the second View" };Di2015NewLine                    break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21109135Di2015UniqueSeparator<UserControl x:Class="WpfApplication1.FirstView"Di2015NewLine             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" Di2015NewLine             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" Di2015NewLine             mc:Ignorable="d" Di2015NewLine             d:DesignHeight="300" d:DesignWidth="300">Di2015NewLine    <StackPanel>Di2015NewLine        <Label>This is the second view</Label>Di2015NewLine        <Label Content="{Binding Text}" />Di2015NewLine        <Button Command="{Binding ChangeToSecondViewCommand}">Change to Second View</Button>Di2015NewLine    </StackPanel>Di2015NewLine</UserControl>Di2015NewLine
21109135Di2015UniqueSeparatorusing GalaSoft.MvvmLight;Di2015NewLineusing GalaSoft.MvvmLight.Command;Di2015NewLineusing GalaSoft.MvvmLight.Messaging;Di2015NewLineusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Threading.Tasks;Di2015NewLineusing System.Windows.Input;Di2015NewLineDi2015NewLinenamespace WpfApplication1Di2015NewLine{Di2015NewLine    public class FirstViewModel : ViewModelBaseDi2015NewLine    {Di2015NewLineDi2015NewLine        private string _text;Di2015NewLine        public string TextDi2015NewLine        {Di2015NewLine            get { return _text; }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                _text = value;Di2015NewLine                RaisePropertyChanged("Text");Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public ICommand ChangeToSecondViewCommandDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return new RelayCommand(() =>Di2015NewLine                {Di2015NewLine                    Messenger.Default.Send<SwitchViewMessage>(new SwitchViewMessage { ViewName = "SecondView" });Di2015NewLine                });Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21109135Di2015UniqueSeparator<UserControl x:Class="WpfApplication1.SecondView"Di2015NewLine             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" Di2015NewLine             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" Di2015NewLine             mc:Ignorable="d" Di2015NewLine             d:DesignHeight="300" d:DesignWidth="300">Di2015NewLine    <StackPanel>Di2015NewLine        <Label>This is the second view</Label>Di2015NewLine        <Label Content="{Binding Text}" />Di2015NewLine        <Button Command="{Binding ChangeToFirstViewCommand}">Change to First View</Button>Di2015NewLine    </StackPanel>Di2015NewLine</UserControl>Di2015NewLine
21109135Di2015UniqueSeparatorusing GalaSoft.MvvmLight;Di2015NewLineusing GalaSoft.MvvmLight.Command;Di2015NewLineusing GalaSoft.MvvmLight.Messaging;Di2015NewLineusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Threading.Tasks;Di2015NewLineusing System.Windows.Input;Di2015NewLineDi2015NewLinenamespace WpfApplication1Di2015NewLine{Di2015NewLine    public class SecondViewModel : ViewModelBaseDi2015NewLine    {Di2015NewLineDi2015NewLine        private string _text;Di2015NewLine        public string TextDi2015NewLine        {Di2015NewLine            get { return _text; }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                _text = value;Di2015NewLine                RaisePropertyChanged("Text");Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public ICommand ChangeToFirstViewCommandDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return new RelayCommand(() =>Di2015NewLine                {Di2015NewLine                    Messenger.Default.Send<SwitchViewMessage>(new SwitchViewMessage { ViewName = "FirstView" });Di2015NewLine                });Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21109135Di2015UniqueSeparatornamespace WpfApplication1Di2015NewLine{Di2015NewLine    public class SwitchViewMessageDi2015NewLine    {Di2015NewLine        public string ViewName { get; set; }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21109144Di2015UniqueSeparatorclass ContactDi2015NewLine{Di2015NewLine   public string name_edit {get; set;}Di2015NewLine   public string surname_edit {get; set;}Di2015NewLine   public string phone_edit {get; set;}Di2015NewLine   public string email_edit {get; set;}Di2015NewLine}Di2015NewLine
21109144Di2015UniqueSeparatorSecondaryForm
21109144Di2015UniqueSeparatorContact
21109144Di2015UniqueSeparatorpublic SecondaryForm (Contact contact)Di2015NewLine{Di2015NewLine   ...Di2015NewLine}Di2015NewLine
21109161Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    System.IO.FileAttributes attr = System.IO.File.GetAttributes(file);Di2015NewLine}Di2015NewLinecatch(Exception ex)Di2015NewLine{Di2015NewLine    files.add(file)Di2015NewLine}Di2015NewLine
21109348Di2015UniqueSeparatorxmlData.AddRange(myvals.Cast<object>().Select(O => O == null ? Di2015NewLine                                                      string.Empty : Di2015NewLine                                                      O.ToString()).ToList());Di2015NewLine
21109398Di2015UniqueSeparatorforeach (var prop in instance.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance))Di2015NewLine{Di2015NewLine    Console.WriteLine(prop.Name);Di2015NewLine}Di2015NewLine
21109398Di2015UniqueSeparatorforeach (var obj in mainClass.listObj1)Di2015NewLine{Di2015NewLine    var innerClasses = obj.dictObj2.Values;Di2015NewLine    // do something with inner classesDi2015NewLine}Di2015NewLine
21109398Di2015UniqueSeparatorforeach (var prop in typeof(Class2).GetProperties(BindingFlags.Public | BindingFlags.Instance))Di2015NewLine{Di2015NewLine    foreach (var obj in mainClass.listObj1)Di2015NewLine    {Di2015NewLine        foreach (var innerClass in obj.dictObj2.Values)Di2015NewLine        {Di2015NewLine            Console.WriteLine(prop.GetValue(innerClass, null));Di2015NewLine        }Di2015NewLine    }   Di2015NewLine}Di2015NewLine
21109398Di2015UniqueSeparatorfor
21109410Di2015UniqueSeparatorObjectFactory.Initialize(config => {Di2015NewLine    config.For<ISessionFactory>().Singleton().Use(() => Di2015NewLine      Fluently.Configure()Di2015NewLine        .Database(MsSqlConfiguration.MsSql2008.ConnectionString(c =>Di2015NewLine        c.FromConnectionStringWithKey("DefaultConnection")))Di2015NewLine        .Cache(c => c.UseQueryCache().ProviderClass<HashtableCacheProvider>())Di2015NewLine        .Mappings(m => m.FluentMappings.AddFromAssemblyOf<Post>())Di2015NewLine        .BuildConfiguration()Di2015NewLine        .BuildSessionFactory()));Di2015NewLine    config.For<ISession>().HttpContextScoped()Di2015NewLine      .Use(c => c.GetInstance<ISessionFactory>().OpenSession());Di2015NewLine});Di2015NewLine
21109416Di2015UniqueSeparatorstring
21109416Di2015UniqueSeparatorusing
21109416Di2015UniqueSeparatorIDisposable
21109416Di2015UniqueSeparatorstring
21109416Di2015UniqueSeparator    public static HtmlTable Table(this HtmlHelper ht, string classe)Di2015NewLine    {Di2015NewLine        var table = new HtmlTable();Di2015NewLine        table.Attributes.Add("class", classe);Di2015NewLine        return table;Di2015NewLine    }Di2015NewLine
21109416Di2015UniqueSeparator@using(var table = @Html.Table("table_data")){Di2015NewLine}Di2015NewLine
21109416Di2015UniqueSeparatortable
21109487Di2015UniqueSeparatorRuntimeTypeModel
21109487Di2015UniqueSeparatorEFTable
21109487Di2015UniqueSeparatorRuntimeTypeModel.Default.Add(typeof(EFTable), false).Add("str", "num",);Di2015NewLine
21109487Di2015UniqueSeparatorRuntimeTypeModel
21109487Di2015UniqueSeparatorpublic static void Generate(IEnumerable<Type> types)Di2015NewLine{Di2015NewLine    var model = RuntimeTypeModel.Default;Di2015NewLineDi2015NewLine    foreach (var type in types)Di2015NewLine    {Di2015NewLine        int counter = 1;Di2015NewLine        var metaType = model.Add(type, false);Di2015NewLineDi2015NewLine        var properties = type.GetProperties(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public);Di2015NewLine        foreach (var propertyInfo in properties)Di2015NewLine        {Di2015NewLine            metaType.Add(counter++, propertyInfo.Name);Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLine}   Di2015NewLine
21109487Di2015UniqueSeparatorGenerate(new List<Type>() { // list of objects that should be registered with ProtoBuf-NetDi2015NewLine    typeof(ASPStateTempSession),  Di2015NewLine    typeof(ASPStateTempApplication) Di2015NewLine});Di2015NewLine
21109641Di2015UniqueSeparatorpublic enum AnimalsDi2015NewLine{Di2015NewLine    dog = 0,Di2015NewLine    cat = 1,Di2015NewLine    rat = 2Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLineAnimals answer;Di2015NewLineDi2015NewLineif (Enum.TryParse("CAT", true, out answer))Di2015NewLine{Di2015NewLine    int value = (int) answer;Di2015NewLine    Console.WriteLine(value);Di2015NewLine}Di2015NewLine
21109641Di2015UniqueSeparatorAnimal
21109641Di2015UniqueSeparatorAnimals
21109732Di2015UniqueSeparatorPrintImages
21109732Di2015UniqueSeparatorimage.Freeze()
21109732Di2015UniqueSeparatorprivate void DownloadAndPrintImagesAsync(IEnumerable<string> urls)Di2015NewLine{Di2015NewLine    ThreadPool.QueueUserWorkItem(o =>Di2015NewLine    {Di2015NewLine        var images = urls.Select(url => DownloadImage(url));Di2015NewLineDi2015NewLine        Dispatcher.Invoke(new Action(() => PrintImages(images)));Di2015NewLine    });Di2015NewLine}Di2015NewLineDi2015NewLineprivate BitmapImage DownloadImage(string url)Di2015NewLine{Di2015NewLine    var buffer = new WebClient().DownloadData(url);Di2015NewLine    var image = new BitmapImage();Di2015NewLineDi2015NewLine    using (var stream = new MemoryStream(buffer))Di2015NewLine    {Di2015NewLine        image.BeginInit();Di2015NewLine        image.CacheOption = BitmapCacheOption.OnLoad;Di2015NewLine        image.StreamSource = stream;Di2015NewLine        image.EndInit();Di2015NewLine    }Di2015NewLineDi2015NewLine    image.Freeze();Di2015NewLine    return image;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void PrintImages(IEnumerable<BitmapImage> images)Di2015NewLine{Di2015NewLine    // print hereDi2015NewLine}Di2015NewLine
21109732Di2015UniqueSeparatorDownloadAndPrintImagesAsync
21109732Di2015UniqueSeparatorprivate List<BitmapImage> images = new List<BitmapImage>();Di2015NewLineDi2015NewLineprivate void DownloadAndPrintImagesAsync(IEnumerable<string> urls)Di2015NewLine{Di2015NewLine    foreach (var url in urls)Di2015NewLine    {Di2015NewLine        var webClient = new WebClient();Di2015NewLine        webClient.DownloadDataCompleted += ImageDownloadCompleted;Di2015NewLine        webClient.DownloadDataAsync(new Uri(url));Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void ImageDownloadCompleted(object sender, DownloadDataCompletedEventArgs e)Di2015NewLine{Di2015NewLine    if (!e.Cancelled && e.Error == null)Di2015NewLine    {Di2015NewLine        var image = new BitmapImage();Di2015NewLineDi2015NewLine        using (var stream = new MemoryStream(e.Result))Di2015NewLine        {Di2015NewLine            image.BeginInit();Di2015NewLine            image.CacheOption = BitmapCacheOption.OnLoad;Di2015NewLine            image.StreamSource = stream;Di2015NewLine            image.EndInit();Di2015NewLine        }Di2015NewLineDi2015NewLine        images.Add(image);Di2015NewLineDi2015NewLine        if (images.Count == 2) // or whateverDi2015NewLine        {Di2015NewLine            // print imagesDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21109930Di2015UniqueSeparatorApplication.ThreadException
21109930Di2015UniqueSeparatorApplication.ThreadException
21110077Di2015UniqueSeparatorPanel
21110077Di2015UniqueSeparatorItemsPanel
21110077Di2015UniqueSeparator<ListBox ItemSource="{Binding SomeCollection}">Di2015NewLine    <ListBox.ItemsPanel>Di2015NewLine        <ItemsPanelTemplate>Di2015NewLine            <Controls:AnimatedRotationPanel EntryAnimationType="Slide" Di2015NewLineEntryAnimationDirection="Up" HorizontalContentAlignment="Stretch" Di2015NewLineExitAnimationType="Slide" ExitAnimationDirection="Down" />Di2015NewLine        </ItemsPanelTemplate>Di2015NewLine    </ListBox.ItemsPanel>Di2015NewLine</ListBox>Di2015NewLine
21110077Di2015UniqueSeparatorPanel
21110077Di2015UniqueSeparatorPanel
21110333Di2015UniqueSeparatorUserControl
21110333Di2015UniqueSeparatorUserControl
21110333Di2015UniqueSeparatorContentControl
21110333Di2015UniqueSeparatorDataTemplate
21110333Di2015UniqueSeparatorDataTemplate
21110333Di2015UniqueSeparator<DataTemplate x:Key="NameTemplate" DataType="{x:Type ViewModels:UserViewModel}">Di2015NewLine    <TextBlock Text="{Binding Name}" />Di2015NewLine</DataTemplate>Di2015NewLine...Di2015NewLine<DataTemplate DataType="{x:Type ViewModels:UserDerivedViewModel}">Di2015NewLine    <ContentControl Content="{Binding}" Di2015NewLine        ContentTemplate="{StaticResource NameTemplate}" />Di2015NewLine    <TextBlock Text="{Binding Age}" />Di2015NewLine</DataTemplate>Di2015NewLine
21110440Di2015UniqueSeparatorstring
21110496Di2015UniqueSeparatorItems
21110496Di2015UniqueSeparator  public ActionResult Details(int Items)Di2015NewLine    {Di2015NewLine        var item = db.Items.Find(Items);Di2015NewLineDi2015NewLine        return View(item);Di2015NewLine    }Di2015NewLine
21110510Di2015UniqueSeparatorStringBuilder sb = new StringBuildeR();Di2015NewLineDi2015NewLinefor (int i = 0; i < m.rows; i++)Di2015NewLine{Di2015NewLine    bool first = true;Di2015NewLineDi2015NewLine    for (int j = 0; j < m.cols; j++)Di2015NewLine    {Di2015NewLine        sb.Append(m[i, j]);Di2015NewLineDi2015NewLine        if (first)Di2015NewLine        {Di2015NewLine            first = false;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            sb.Append(",");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    sb.AppendLine();Di2015NewLine}Di2015NewLineDi2015NewLinestring output = sb.ToString();Di2015NewLine
21110601Di2015UniqueSeparatorstring path_cartella = Server.MapPath("~/temp/document");Di2015NewLinestring path_cartella_zip = Server.MapPath("~/temp/document_zip");Di2015NewLine
21110644Di2015UniqueSeparatorString.Contains
21110644Di2015UniqueSeparatorEnumerable.Contains
21110644Di2015UniqueSeparatorfilteredData
21110644Di2015UniqueSeparatorvar data = db.database_BWICs.AsQueryable();Di2015NewLineif (!string.IsNullOrEmpty(query.name))Di2015NewLine{Di2015NewLine    var ids = query.name.Split(',');Di2015NewLine    data = data.Where(c => c.Name != null && ids.Contains(c.Name)));Di2015NewLine}Di2015NewLine//etc.Di2015NewLineDi2015NewLineif (query.price_type != null)Di2015NewLine{Di2015NewLine     var ids = query.price_type.Split(',');Di2015NewLine     data = data.Where(c => ids.Contains(c.Type));Di2015NewLine}Di2015NewLine
21110644Di2015UniqueSeparator//manage the queries with OR clause firstDi2015NewLinevar innerOr = Predicate.True<database_BWICs>();//or the real type of your entityDi2015NewLineDi2015NewLineif (!String.IsNullOrEmpty(query.id1))Di2015NewLine{Di2015NewLine    var ids = query.id1.Split(',');Di2015NewLine    innerOr = innerOr.Or(c => c.ID1!= null && ids.Contains(c.ID1));Di2015NewLine}Di2015NewLineif (!String.IsNullOrEmpty(query.id2))Di2015NewLine{Di2015NewLine    var ids = query.id2.Split(',');Di2015NewLine    innerOr = innerOr.Or(c => c.ID2!= null && ids.Contains(c.ID2));Di2015NewLine}Di2015NewLine//now manage the queries with AND clausesDi2015NewLinevar innerAnd = Predicate.True<database_BWICs>();//or the real type of your entityDi2015NewLineDi2015NewLineif (query.price_type != null)Di2015NewLine{Di2015NewLine    var ids = query.price_type.Split(',');Di2015NewLine    innerAnd = innerAnd.And(c => ids.Contains(c.Type));Di2015NewLine}Di2015NewLine//etc.Di2015NewLineDi2015NewLineinnerAnd = innerAnd.And(innerOr);Di2015NewLineDi2015NewLinevar data = db.database_BWICs.AsQueryable().Where(innerAnd);Di2015NewLine
21110870Di2015UniqueSeparatorpublic class FooBarModelDi2015NewLine{Di2015NewLine    public AbortReason Foo { get;set;}Di2015NewLine    public Activity Bar { get;set;}Di2015NewLine}Di2015NewLine
21110870Di2015UniqueSeparatorIndex
21110870Di2015UniqueSeparatorusing(MobilePhoneXchangeEntities1 ent = new MobilePhoneXchangeEntities1())Di2015NewLine{Di2015NewLine    var result = from foo in ent.t_AbortReasonDi2015NewLine                 from bar in ent.t_ActivityDi2015NewLine                 where foo.AbortReasonCategoryId != null && bar.ActivityId != nullDi2015NewLine                 select new FooBarModel() { Foo = foo, Bar = bar };Di2015NewLine    return View(result);Di2015NewLine}Di2015NewLine
21110870Di2015UniqueSeparator@model IEnumerable<my.namespace.FooBarModel>Di2015NewLine
21110992Di2015UniqueSeparatorpublic bool Addcomment(string Post_ID, string User_ID, string Comment_Content, DateTime Comment_Add_Date, DateTime Comment_Last_Date, bool Comment_Flag)Di2015NewLine{Di2015NewLineDi2015NewLine    SqlCommand cmd = new SqlCommand("dbo.Insertintocomments");Di2015NewLine    cmd.CommandType = CommandType.StoredProcedure;Di2015NewLine    cmd.Parameters.AddWithValue("@Post_ID", Post_ID);Di2015NewLine    cmd.Parameters.AddWithValue("@User_ID", User_ID);Di2015NewLine    Comment_Content = Comment_Content.Contains(",") ? Comment_Content.Replace(",", null) : Comment_Content;Di2015NewLine    cmd.Parameters.AddWithValue("@Comment_Content", Comment_Content);Di2015NewLine    cmd.Parameters.AddWithValue("@Comment_Add_Date", Comment_Add_Date);Di2015NewLine    cmd.Parameters.AddWithValue("@Comment_Last_Date", Comment_Last_Date);Di2015NewLineDi2015NewLine    cmd.Parameters.AddWithValue("@Comment_Flag", Comment_Flag);Di2015NewLineDi2015NewLine    return DBHelper.Instance().Insert(cmd);Di2015NewLine}Di2015NewLine
21111084Di2015UniqueSeparator[Authorize]Di2015NewLinepublic class MyController : ControllerDi2015NewLine{Di2015NewLine    public ActionResult Index()Di2015NewLine    {Di2015NewLine        return View();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21111194Di2015UniqueSeparatorA
21111194Di2015UniqueSeparatorpublic static IQueryable<Foo> IncludeA(this DbSet<Foo> foos)Di2015NewLine{Di2015NewLine    return foos.Include("B").Include("C.D");Di2015NewLine}Di2015NewLine
21111194Di2015UniqueSeparatordb.Foos.IncludeA()Di2015NewLine
21111350Di2015UniqueSeparatorint QuoteNo = currQuotetNo + 1;Di2015NewLinestring strQuoteNo = QuoteNo.ToString("D4");Di2015NewLine
21111496Di2015UniqueSeparatorAddDatesInPast()
21111496Di2015UniqueSeparatorDateTime.Now
21111496Di2015UniqueSeparatorSelectedDate
21111496Di2015UniqueSeparatorCalendarDateRange
21111506Di2015UniqueSeparatorwhere
21111506Di2015UniqueSeparatorid
21111506Di2015UniqueSeparatorvar item = "456";Di2015NewLinexDoc.Descendants("div").Where(s => s.Attribute("id") != null && s.Attribute("id").Value == "item" + item).Remove();Di2015NewLine
21111655Di2015UniqueSeparatorlong foo = 42;Di2015NewLineDi2015NewLineif (foo == null) { }Di2015NewLine
21111655Di2015UniqueSeparator==  !=Di2015NewLine
21111655Di2015UniqueSeparatorlong
21111655Di2015UniqueSeparator==
21111655Di2015UniqueSeparatorfoo
21111655Di2015UniqueSeparatornull
21111655Di2015UniqueSeparator(long)foo == nullDi2015NewLine
21111655Di2015UniqueSeparator(long?)foo == (long?)nullDi2015NewLine
21111655Di2015UniqueSeparatorfoo
21111655Di2015UniqueSeparatorlong
21111655Di2015UniqueSeparatorlong
21111655Di2015UniqueSeparator==
21111655Di2015UniqueSeparatorlong? foo = 42;Di2015NewLinelong bar = 42;Di2015NewLineDi2015NewLineConsole.WriteLine(foo == bar); // trueDi2015NewLineDi2015NewLinefoo = null;Di2015NewLineConsole.WriteLine(bar == foo); // falseDi2015NewLine
21111655Di2015UniqueSeparator==
21111655Di2015UniqueSeparatorlong?
21111655Di2015UniqueSeparatorlong
21111655Di2015UniqueSeparatorNullable<T>
21111655Di2015UniqueSeparator==
21111655Di2015UniqueSeparatorlong
21111655Di2015UniqueSeparator==
21111655Di2015UniqueSeparatorlong?
21111728Di2015UniqueSeparatorif (System.Web.HttpContext.Current.User.Identity.IsAuthenticated)Di2015NewLine{Di2015NewLine   string username = System.Web.HttpContext.Current.User.Identity.Name;Di2015NewLine}Di2015NewLine
21111728Di2015UniqueSeparatorEnvironment.Username
21111857Di2015UniqueSeparatorpublic object Convert(object value, Type targetType, object parameter, CultureInfo culture)Di2015NewLineDi2015NewLine    {Di2015NewLine        if (value == null) { return "White"; }Di2015NewLine        var valueAsString = (string)value;Di2015NewLineDi2015NewLine        if ( String.IsNullOrWhiteSpace(valueAsString) )Di2015NewLine        {Di2015NewLine            return "White";Di2015NewLine        }Di2015NewLineDi2015NewLine        if (valueAsString.ToLower().Contains("Late".ToLower()))Di2015NewLine        {Di2015NewLine            return "Yellow";Di2015NewLine        }Di2015NewLine        return "White";         Di2015NewLine    }Di2015NewLine
21111918Di2015UniqueSeparatorFilterType
21111918Di2015UniqueSeparatorfiltervalue
21111918Di2015UniqueSeparatorvar groupColumn = table.Columns["FilterType"];Di2015NewLinevar valueColumn = table.Columns["filtervalue"];Di2015NewLineDi2015NewLineforeach (var group in table.Rows.Cast<DataRow>().GroupBy(x => x[groupColumn]))Di2015NewLine{Di2015NewLine    var values = groupDi2015NewLine        .Select(x => String.Format("'{0}'", x[valueColumn]))Di2015NewLine        .Distinct();Di2015NewLineDi2015NewLine    // This is value you need for one group (by FilterType)    Di2015NewLine    string text = String.Format("{0} IN ({1})",Di2015NewLine        group.Key, String.Join(",", values));Di2015NewLine}Di2015NewLine
21111918Di2015UniqueSeparatortext
21111918Di2015UniqueSeparatorCOMPANY IN ('ONS','TEK')Di2015NewLineCUSTOMERID IN ('178822') Di2015NewLineMANAGERID  IN ('05082807')Di2015NewLineSITEID IN ('00525', '00720')Di2015NewLine
21111921Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Task t = new Task(() =>Di2015NewLine    {Di2015NewLine        lmc.ForEach(l => l.Run());Di2015NewLine    });Di2015NewLineDi2015NewLine    t.Start();Di2015NewLineDi2015NewLine    t.ContinueWith(_ =>Di2015NewLine    {Di2015NewLine        Invoke(new System.Action(UploadDone));Di2015NewLine    });Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLineprivate void UploadDone()Di2015NewLine{Di2015NewLine    Console.Write("Done");Di2015NewLine}Di2015NewLine
21112018Di2015UniqueSeparatorIEnumerable
21112018Di2015UniqueSeparatorGetData()
21112018Di2015UniqueSeparatorWhenCalled()
21112018Di2015UniqueSeparatorvar stubEnumerable = MockRepository.GenerateStub<IEnumerable<int>>();Di2015NewLinestubEnumerable.Stub(x => x.GetEnumerator()).Return(null).WhenCalled(x => x.ReturnValue = ... );Di2015NewLinevar stub = MockRepository.GenerateStub<IIEnumerableProvider<int>>();Di2015NewLinestub.Stub(x => x.GetData()).Return(stubEnumerable).Repeat.Once();Di2015NewLine
21112020Di2015UniqueSeparatorParameterizedThreadStart
21112020Di2015UniqueSeparatorParameterizedThreadStart
21112020Di2015UniqueSeparatorSendResultToClient
21112020Di2015UniqueSeparatorpublic void SendResultToClient(object data)Di2015NewLine{Di2015NewLine    double result = (double)data;Di2015NewLine    Thread.Sleep(500);Di2015NewLine    callback.Result(result);Di2015NewLine}Di2015NewLine
21112020Di2015UniqueSeparatorParameterizedThreadStart op = SendResultToClient;Di2015NewLineThread t = new Thread(op);Di2015NewLinet.Start(result);Di2015NewLine
21112158Di2015UniqueSeparatorpublic WelcomForm(string userName)Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine    userNameLabel.Text = userName;Di2015NewLine}Di2015NewLine
21112158Di2015UniqueSeparatorpublic string UserName // on LoginFormDi2015NewLine{Di2015NewLine    get { return userNameTextBox.Text; }Di2015NewLine}Di2015NewLine
21112158Di2015UniqueSeparatorLoginForm loginForm = new LoginForm();Di2015NewLineif (loginForm.ShowDialog() != DialogResult.OK)Di2015NewLine    return;Di2015NewLineDi2015NewLineWelcomForm welcomeForm = new WelcomeForm(loginForm.UserName);Di2015NewLinewelcomeForm.ShowDialog();Di2015NewLine
21112334Di2015UniqueSeparatorTextBox
21112334Di2015UniqueSeparatortextb.Text
21112334Di2015UniqueSeparatorw2.passval
21112334Di2015UniqueSeparatorw2.passval = textb.Text;Di2015NewLine
21112334Di2015UniqueSeparatortextb.Text
21112334Di2015UniqueSeparatorw2.passval
21112334Di2015UniqueSeparatorw2
21112334Di2015UniqueSeparatorWin1
21112334Di2015UniqueSeparatorw2.passval
21112334Di2015UniqueSeparatorw2.passval
21112334Di2015UniqueSeparatorWin1
21112334Di2015UniqueSeparatorpublic win1()         Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLineDi2015NewLine    DispatcherTimer timer = new DispatcherTimer(new TimeSpan(0,0,1), DispatcherPriority.Normal, delegateDi2015NewLine    {Di2015NewLine        this.textb.Text = DateTime.Now.ToString("HH:mm:ss tt");Di2015NewLine        if (_w2 != null)Di2015NewLine            _w2.passval = textb.Text;Di2015NewLine    }, this.Dispatcher);Di2015NewLine}Di2015NewLineDi2015NewLineprivate win2 _w2 = null; // Reference to your Win2Di2015NewLineDi2015NewLineprivate void but_send_Click(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    _w2 = new win2();Di2015NewLine    _w2.passval = textb.Text;Di2015NewLine    this.Hide();Di2015NewLine    w2.ShowDialog();Di2015NewLine}Di2015NewLine
21112334Di2015UniqueSeparatorLabel
21112334Di2015UniqueSeparatorWin2
21112334Di2015UniqueSeparatorprivate string nm;Di2015NewLineDi2015NewLinepublic string passvalDi2015NewLine{Di2015NewLine    get { return nm; }Di2015NewLine    set { Di2015NewLine        nm = value; Di2015NewLine        // This should rather be done somewhere else, not in the setterDi2015NewLine        lbl1.Content = "Time " + nm; Di2015NewLine    }Di2015NewLine} Di2015NewLine
21112452Di2015UniqueSeparatorpublic static int DaysInWeek(DateTime arrivalDate, int weekNumber, int duration)Di2015NewLine{Di2015NewLine    // Handle a Saturday as start dayDi2015NewLine    var daysInFirstWeek = arrivalDate.DayOfWeek == DayOfWeek.Saturday ? 7 : DayOfWeek.Saturday - arrivalDate.DayOfWeek;Di2015NewLineDi2015NewLine    // First weekDi2015NewLine    if (weekNumber == 1) return Math.Min(duration, daysInFirstWeek);Di2015NewLineDi2015NewLine    // Other weekDi2015NewLine    var start = daysInFirstWeek + ((weekNumber - 2) * 7);Di2015NewLine    return Math.Max(0, Math.Min(7, duration - start));Di2015NewLine}Di2015NewLine
21112610Di2015UniqueSeparatorThe name "SerialPort" Does not exist in the current context
21112610Di2015UniqueSeparator'System.IO.Ports.SerialPort.GetPortNames()' cannot be accessed with an instance        reference; qualify it with a type name instead
21112610Di2015UniqueSeparatorstring[] ports = System.IO.Ports.SerialPort.GetPortNames();Di2015NewLine
21112610Di2015UniqueSeparatorusing
21112610Di2015UniqueSeparatorusing System.IO.Ports;Di2015NewLine.....Di2015NewLinestring[] ports = SerialPort.GetPortNames();Di2015NewLine
21112710Di2015UniqueSeparatorvar aaData = PatList.Select(d => (new string[] { Di2015NewLine        d.Username,Di2015NewLine        d.Address1,Di2015NewLine        d.Age.ToString()Di2015NewLine    }.Union(d.Columns.Select(c => c.ColumnHeader))).ToArray()Di2015NewLine).ToArray();Di2015NewLine
21112710Di2015UniqueSeparatorUser
21112710Di2015UniqueSeparatorPatList
21112710Di2015UniqueSeparatorUsername, Address1, Age & all ColumnHeaders
21112765Di2015UniqueSeparatorCellBeginEdit
21112765Di2015UniqueSeparatorCellEndEdit
21112765Di2015UniqueSeparatordatagridview.Tag
21112765Di2015UniqueSeparatorvoid dgv_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)Di2015NewLine{Di2015NewLine    //Save old value to datagridview.TagDi2015NewLine    dgv.Tag = dgv.CurrentCell.Value;Di2015NewLine}Di2015NewLine
21112765Di2015UniqueSeparatorCellEndEdit
21112765Di2015UniqueSeparatorvoid dgv_CellEndEdit(object sender, DataGridViewCellEventArgs e)Di2015NewLine{Di2015NewLine    //Here you can use your old value from .TagDi2015NewLine    //For example compare is new value same as oldDi2015NewLine    if(dgv.Tag != dgv.CurrentCell.Value)Di2015NewLine    {Di2015NewLine        //Do your things with new valueDi2015NewLine    }Di2015NewLine}Di2015NewLine
21112768Di2015UniqueSeparatorvar ActionCounts = tms.TechnologyAudits.Where(a =>Di2015NewLine    (EntityFunctions.TruncateTime(a.DateTimeEnd) == d && a.TechnologyID != null))Di2015NewLine    .GroupBy(a => a.AuditAction.Name.ToLower())Di2015NewLine    .Select(g => new {Di2015NewLine        Action = g.KeyDi2015NewLine        ItemCount = g.Count();Di2015NewLine    }).ToLookup(a => a.Action);Di2015NewLine
21112768Di2015UniqueSeparatorvar tmpCustomCount = tms.CustomAssets.Sum(a => (int?)a.Quantity);Di2015NewLineDi2015NewLine[Insert here:]Di2015NewLineDi2015NewLine        SystemInformation s = new SystemInformation()Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLineDeleteNo = ActionCounts["delete"] == null ? 0 : ActionCounts["delete"].Single().ItemCount;Di2015NewLineCreateNo = ActionCounts["add"] == null ? 0 : ActionsCount["add"].Single().ItemCount;Di2015NewLineEditNo = ActionCounts["edit"] == null ? 0 : ActionsCount["edit"].Single().ItemCount;Di2015NewLine
21112823Di2015UniqueSeparatorXElement[]
21112823Di2015UniqueSeparatorIEnumerable<XElement>
21112823Di2015UniqueSeparatorXElement
21112823Di2015UniqueSeparatorvar messages = events.Select(item => new XElement("n",Di2015NewLine                new XAttribute("page", item.page),Di2015NewLine                new XAttribute("sequence", item.sequence),Di2015NewLine                new XAttribute("priority", item.priority),Di2015NewLine                new XAttribute("errorText", item.errorText)Di2015NewLine               ));Di2015NewLineDi2015NewLineXDocument triggerDocument = new XDocument(Di2015NewLine                   new XDeclaration("1.0", "utf-8", null));Di2015NewLineDi2015NewLineXElement triggerRoot = new XElement("config",Di2015NewLine    new XElement("maketool-config",Di2015NewLine    new XElement("hmi",Di2015NewLine    new XElement("Messages", messages))) // <<<--- This is the important part.Di2015NewLine);Di2015NewLinetriggerDocument.Add(triggerRoot);Di2015NewLine
21112962Di2015UniqueSeparatordataBase.accdb
21112962Di2015UniqueSeparatordocument/bin/debug/database
21112962Di2015UniqueSeparatorbin
21112962Di2015UniqueSeparator.mdf
21113023Di2015UniqueSeparatorbyte[] chr = BitConverter.GetBytes(hex);Di2015NewLinedata += Encoding.Default.GetString(chr);Di2015NewLine
21113023Di2015UniqueSeparatorint
21113023Di2015UniqueSeparatorbyte[]
21113023Di2015UniqueSeparatorGetString(byte[])
21113031Di2015UniqueSeparatorContextMenuOpening
21113031Di2015UniqueSeparatorFrameworkElement
21113031Di2015UniqueSeparator<Button Name="Button"Di2015NewLine        Content="Test"Di2015NewLine        VerticalAlignment="Center"Di2015NewLine        HorizontalAlignment="Center"Di2015NewLine        Padding="10"Di2015NewLine        Click="ButtonBase_OnClick">Di2015NewLine    <Button.ContextMenu>Di2015NewLine        <ContextMenu>Di2015NewLine            <MenuItem Name="Item0" Header="Load To Stack">Di2015NewLine                <MenuItem Name="SubItem0" Header="Stack 1" IsCheckable="False"/>Di2015NewLine                <MenuItem Name="SubItem1" Header="Stack 2" IsCheckable="False"/>Di2015NewLine                <MenuItem Name="SubItem2" Header="Stack 3" IsCheckable="False"/>Di2015NewLine                <MenuItem Name="SubItem3" Header="Stack 4" IsCheckable="False"/>Di2015NewLine            </MenuItem>Di2015NewLine        </ContextMenu>Di2015NewLine    </Button.ContextMenu>Di2015NewLine</Button>Di2015NewLine
21113031Di2015UniqueSeparatorprivate bool _contextMenuEnabled;Di2015NewLineDi2015NewLinepublic MainWindow()Di2015NewLine{Di2015NewLine    _contextMenuEnabled = true;Di2015NewLine    InitializeComponent();Di2015NewLine    Button.ContextMenuOpening += Button_ContextMenuOpening;Di2015NewLine}Di2015NewLineDi2015NewLinevoid Button_ContextMenuOpening(object sender, ContextMenuEventArgs e)Di2015NewLine{Di2015NewLine    e.Handled = !_contextMenuEnabled;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void ButtonBase_OnClick(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    _contextMenuEnabled = !_contextMenuEnabled;Di2015NewLine}Di2015NewLine
21113043Di2015UniqueSeparatorreturn RedirectToAction("EditDetail", new { id = 23, returnUrl = "" });
21113043Di2015UniqueSeparatorEditDetail
21113043Di2015UniqueSeparatorRouteValueCollection
21113043Di2015UniqueSeparatorreturn View("EditDetail")
21113043Di2015UniqueSeparatorreturn
21113043Di2015UniqueSeparator[HttpPost]Di2015NewLine[Authorize]Di2015NewLinepublic ActionResult EditDetail(int customerId, int? orderId, List<string> productId, List<string> quantity, string returnUrl, string TargetDate)Di2015NewLine
21113043Di2015UniqueSeparatorActionName
21113043Di2015UniqueSeparatorreturn View();
21113089Di2015UniqueSeparatorGetHashCode
21113089Di2015UniqueSeparatorEquals
21113089Di2015UniqueSeparatorDictionary
21113089Di2015UniqueSeparatorEquals
21113089Di2015UniqueSeparatorName
21113089Di2015UniqueSeparatorpublic class ItemDi2015NewLine{Di2015NewLine    public override int GetHashCode()Di2015NewLine    {Di2015NewLine        return Name == null ? 0 : Name.GetHashCode();Di2015NewLine    }Di2015NewLineDi2015NewLine    public override bool Equals(object obj)Di2015NewLine    {Di2015NewLine        if (obj == null) return false;Di2015NewLine        if(object.ReferenceEquals(this, obj)) return true;Di2015NewLine        Item i2 = obj as Item;Di2015NewLine        if(i2 == null) return false;Di2015NewLine        return StringComparer.CurrentCulture.Equals(Name, i2.Name);Di2015NewLine    }Di2015NewLine    // rest of class  ...Di2015NewLine}Di2015NewLine
21113089Di2015UniqueSeparatorforeach(var kv in mydictronary)Di2015NewLine{Di2015NewLine     Item i = kv.Key;Di2015NewLine    // now you have all properties of itDi2015NewLine}Di2015NewLine
21113144Di2015UniqueSeparator        XmlWriterSettings xws = myXslTransform.OutputSettings.Clone();Di2015NewLine        xws.Encoding = Encoding.UTF8;Di2015NewLineDi2015NewLine        using (XmlWriter xw = XmlWriter.Create("out.xml", xws))Di2015NewLine        {Di2015NewLine          myXslTransform.Transform(@".\\in.xml", xw);Di2015NewLine        }Di2015NewLine
21113302Di2015UniqueSeparatorterritories
21113302Di2015UniqueSeparatorvar territoriesInt = territories.Select(x => int.Parse(x)).ToArray()
21113302Di2015UniqueSeparatorterritoryID.ToString()
21113430Di2015UniqueSeparatorif (this.Parent.GetType().ToString() == "YOURTYPE")Di2015NewLine
21113430Di2015UniqueSeparatorif (this.Parent is YOURINTERFACETYPE)Di2015NewLine
21113515Di2015UniqueSeparatorMouseLeftButtonDown
21113515Di2015UniqueSeparatorMouseLeftButtonUp
21113515Di2015UniqueSeparatorMouseDown
21113515Di2015UniqueSeparatorMouseUp
21113515Di2015UniqueSeparator<Canvas Background="Transparent"Di2015NewLine        MouseLeftButtonDown="Canvas_MouseLeftButtonDown"Di2015NewLine        MouseLeftButtonUp="Canvas_MouseLeftButtonUp"Di2015NewLine        MouseMove="Canvas_MouseMove"/>Di2015NewLine
21113515Di2015UniqueSeparatorprivate void Canvas_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)Di2015NewLine{Di2015NewLine    var canvas = (Canvas)sender;Di2015NewLineDi2015NewLine    if (canvas.CaptureMouse())Di2015NewLine    {Di2015NewLine        var startPoint = e.GetPosition(canvas);Di2015NewLine        var line = new LineDi2015NewLine        {Di2015NewLine            Stroke = Brushes.Blue,Di2015NewLine            StrokeThickness = 3,Di2015NewLine            X1 = startPoint.X,Di2015NewLine            Y1 = startPoint.Y,Di2015NewLine            X2 = startPoint.X,Di2015NewLine            Y2 = startPoint.Y,Di2015NewLine        };Di2015NewLineDi2015NewLine        canvas.Children.Add(line);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Canvas_MouseMove(object sender, MouseEventArgs e)Di2015NewLine{Di2015NewLine    var canvas = (Canvas)sender;Di2015NewLineDi2015NewLine    if (canvas.IsMouseCaptured && e.LeftButton == MouseButtonState.Pressed)Di2015NewLine    {Di2015NewLine        var line = canvas.Children.OfType<Line>().LastOrDefault();Di2015NewLineDi2015NewLine        if (line != null)Di2015NewLine        {Di2015NewLine            var endPoint = e.GetPosition(canvas);Di2015NewLine            line.X2 = endPoint.X;Di2015NewLine            line.Y2 = endPoint.Y;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Canvas_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)Di2015NewLine{Di2015NewLine    ((Canvas)sender).ReleaseMouseCapture();Di2015NewLine}Di2015NewLine
21113574Di2015UniqueSeparatorTryValidateObject
21113574Di2015UniqueSeparatorRangeAttribute
21113574Di2015UniqueSeparatorint
21113574Di2015UniqueSeparatordouble
21113574Di2015UniqueSeparatorint
21113574Di2015UniqueSeparatorint
21113574Di2015UniqueSeparator1.1
21113574Di2015UniqueSeparator1
21113574Di2015UniqueSeparatordouble
21113574Di2015UniqueSeparatorint
21113574Di2015UniqueSeparator[Range(0.0, 1.0)]Di2015NewLinepublic decimal LowerDecimal { get; set; }Di2015NewLine
21113725Di2015UniqueSeparator        var minDate = DateTime.MinValue;Di2015NewLine        var maxDate = DateTime.MaxValue;Di2015NewLine        foreach (var item in data)Di2015NewLine        {Di2015NewLine            switch (item.name)Di2015NewLine            {Di2015NewLine                case CustomFieldConstants.MinDate:Di2015NewLine                    DateTime.TryParse((string)item.value, out minDate);Di2015NewLine                    break;Di2015NewLine                case CustomFieldConstants.MaxDate:Di2015NewLine                    DateTime.TryParse((string)item.value, out maxDate);Di2015NewLine                    break;Di2015NewLine            }Di2015NewLine        }Di2015NewLine
21113823Di2015UniqueSeparatorxlWorkSheet.Range("A1", "A1").EntireRow.Value;Di2015NewLine
21113826Di2015UniqueSeparator SqlDbType.VarCharDi2015NewLine
21113826Di2015UniqueSeparator SqlDbType.TextDi2015NewLine
21113826Di2015UniqueSeparatorSqlDbType.Text
21114194Di2015UniqueSeparatorHtmlTable
21114194Di2015UniqueSeparatorSystem.Web.UI.HtmlControls
21114194Di2015UniqueSeparatorWebGrid
21114390Di2015UniqueSeparator from p in punchesDi2015NewLine group p by new { p.EmployeeID, p.ShiftDate } into gDi2015NewLine let punch = g.First()Di2015NewLine select new ShiftDi2015NewLine {Di2015NewLine      EmployeeID = punch.EmployeeID,Di2015NewLine      FirstName = punch.FirstName,Di2015NewLine      LastName = punch.LastName,Di2015NewLine      TimeClockID = punch.TimeClockID,Di2015NewLine      Hours = g.OrderBy(p => p.TimeStamp)Di2015NewLine               .Select((p,i) => new {Punch = p, Index = i})Di2015NewLine               .GroupBy(x => x.Index / 2)Di2015NewLine               .Select(inOut => new {Di2015NewLine                   PunchInTime = inOut.First().Punch.TimeStamp, Di2015NewLine                   PunchOutTime = inOut.Last().Punch.TimeStamp Di2015NewLine               })Di2015NewLine               .Sum(x => x.PunchOutTime.Subtract(x.PunchInTime).TotalHours)Di2015NewLine  }).ToList();Di2015NewLine
21114390Di2015UniqueSeparator{ Punch, Index }
21114390Di2015UniqueSeparatorinOut
21114390Di2015UniqueSeparator{ Punch, Index }
21114506Di2015UniqueSeparatorlock
21114506Di2015UniqueSeparatoratomic
21114663Di2015UniqueSeparatorprivate void LongListSelector_SelectionChanged(object sender, SelectionChangedEventArgs e)Di2015NewLine{Di2015NewLine   var si = MainLongListSelector.SelectedItem as PivotApp3.ViewModels.ItemViewModel;Di2015NewLineDi2015NewLine    if(si.LineOne.Equals("+ To Do List"))Di2015NewLine       NavigationService.Navigate(new Uri("/todolistPage.xaml", UriKind.Relative));Di2015NewLine    else if(si.LineOne.Equals("another"))Di2015NewLine       NavigationService.Navigate(new Uri("/another.xaml", UriKind.Relative));Di2015NewLine}Di2015NewLine
21114663Di2015UniqueSeparatorpublic void LoadData()Di2015NewLine{Di2015NewLine    // Sample data; replace with real dataDi2015NewLine    this.Items.Add(new ItemViewModel() { LineOne = "+ To Do List", GotoUri = new Uri("/todolistPage.xaml", UriKind.Relative) });Di2015NewLine    this.Items.Add(new ItemViewModel() { LineOne = "+ Reminder", GotoUri = new Uri("/other.xaml", UriKind.Relative) });Di2015NewLine    this.Items.Add(new ItemViewModel() { LineOne = "+ Expenses", GotoUri = new Uri("/other2.xaml", UriKind.Relative) });Di2015NewLineDi2015NewLine    this.IsDataLoaded = true;Di2015NewLine}Di2015NewLine
21114663Di2015UniqueSeparatorpublic class ItemViewModel : INotifyPropertyChangedDi2015NewLine{Di2015NewLine  public Uri GotoUri {get; set;}Di2015NewLine  //...Di2015NewLine}Di2015NewLineDi2015NewLineprivate void LongListSelector_SelectionChanged(object sender, SelectionChangedEventArgs e)Di2015NewLine{Di2015NewLine   var si = MainLongListSelector.SelectedItem as PivotApp3.ViewModels.ItemViewModel;Di2015NewLine       if(si != null)Di2015NewLine       NavigationService.Navigate(si.GotoUri, UriKind.Relative));Di2015NewLine}Di2015NewLine
21114733Di2015UniqueSeparatorApplication.EnableVisualStyles()
21114752Di2015UniqueSeparatorDataSet ds = new DataSet();Di2015NewLine
21114752Di2015UniqueSeparator// create a datasetDi2015NewLineDataSet ds = new DataSet();Di2015NewLineDi2015NewLine// create a datatableDi2015NewLineDataTable dt = new DataTable();Di2015NewLineDi2015NewLine// add the columns into this tableDi2015NewLinedt.Columns.Add("col1");Di2015NewLinedt.Columns.Add("col2");Di2015NewLinedt.Columns.Add("col3");Di2015NewLinedt.Columns.Add("col4");Di2015NewLineDi2015NewLine// add this table to datasetDi2015NewLineds.Tables.Add(dt);Di2015NewLine
21114752Di2015UniqueSeparatords
21114753Di2015UniqueSeparatorXPathNavigator result = nav.SelectSingleNode("//*[local-name()='p']");Di2015NewLine
21114761Di2015UniqueSeparatorvar ordered = students.OrderBy(x=>x.FinalGrade(course));Di2015NewLine
21114761Di2015UniqueSeparatorcourse
21114761Di2015UniqueSeparatorvar ordered = students.OrderBy(x=>x.FinalGrade(course)).ThenBy(x=>x.FinalGrade(course2));Di2015NewLine
21114943Di2015UniqueSeparatorfoundMatch = Regex.IsMatch(subjectString, Di2015NewLine    @"\\bDi2015NewLine    (?:[a-z]\\d{7}|Di2015NewLine    \\d[a-z]\\d{6}|Di2015NewLine    \\d{2}[a-z]\\d{5}|Di2015NewLine    \\d{3}[a-z]\\d{4}|Di2015NewLine    \\d{4}[a-z]\\d{3}|Di2015NewLine    \\d{5}[a-z]\\d{2}|Di2015NewLine    \\d{6}[a-z]\\d{1}|Di2015NewLine    \\d{7}[a-z])Di2015NewLine    \\b", Di2015NewLine    RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace);Di2015NewLine
21114979Di2015UniqueSeparatorreturn string.Format("* First name: {0}\\n* Last name: {1}\\n* Born: {2}\\n* Country: {3}\\n* State: {4}\\n* Oklahoma: {5}\\n* Zip code: {6}\\n* Occupation: {7:C}\\n* Income:{8} ",Di2015NewLine                            FirstName, LastName, YearOfBirth, Country, City, State, Zip, Occupation, AvarageIncome);Di2015NewLine
21114981Di2015UniqueSeparatorErrorProvider
21114981Di2015UniqueSeparatorValidating
21114981Di2015UniqueSeparatorprivate void textBox_Validating(object sender, CancelEventArgs e)Di2015NewLine{Di2015NewLine    TextBox tb = (TextBox)sender;Di2015NewLineDi2015NewLine    if (String.IsNullOrEmpty(tb.Text))Di2015NewLine    {Di2015NewLine        errorProvider.SetError(tb, "*");Di2015NewLine        e.Cancel = true; Di2015NewLine        return;          Di2015NewLine    }Di2015NewLineDi2015NewLine    errorProvider.SetError(tb, String.Empty);Di2015NewLine}Di2015NewLine
21114981Di2015UniqueSeparatorCauseValidation
21114981Di2015UniqueSeparatorfalse
21114981Di2015UniqueSeparatorprivate void CancelButton_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    userControl.AutoValidate = AutoValidate.Disable;Di2015NewLine    Close();Di2015NewLine}Di2015NewLine
21115004Di2015UniqueSeparatorRandomAttribute
21115004Di2015UniqueSeparator[Test]Di2015NewLine[TestCase(15)]Di2015NewLine[TestCase(38)]Di2015NewLine[TestCase(2)]Di2015NewLine[TestCase(72)]Di2015NewLine[TestCase(69)]Di2015NewLinepublic void RandomTest(int value)Di2015NewLine{Di2015NewLine    Assert.IsTrue(true);Di2015NewLine}Di2015NewLine
21115046Di2015UniqueSeparatorHubConnection
21115046Di2015UniqueSeparatorHubConnection
21115046Di2015UniqueSeparatorHubConnection.CreateHubProxy
21115046Di2015UniqueSeparatorIHubProxy
21115233Di2015UniqueSeparatorvar workbook = Workbook.Load(fileToValidate);Di2015NewLineforeach (var v in workbook.Worksheets)Di2015NewLine{Di2015NewLine     //coulmn count for each sheetDi2015NewLine     int count = v.Columns.Count();Di2015NewLineDi2015NewLine}Di2015NewLine
21115488Di2015UniqueSeparatordraggedObject
21115488Di2015UniqueSeparatorType
21115488Di2015UniqueSeparatordraggedObject
21115488Di2015UniqueSeparatorAddress
21115488Di2015UniqueSeparatorobject draggedItem = e.Data.GetData(this.format.Name);Di2015NewLineAddress draggedAddress = (Address)draggedItem;Di2015NewLineDoSomethingWith(draggedAddress.PostCode);Di2015NewLine
21115498Di2015UniqueSeparatorUserState
21115498Di2015UniqueSeparatorDownloadDataCompletedEventArgs
21115498Di2015UniqueSeparatorprivate void ImageDownloadCompleted(object sender, DownloadDataCompletedEventArgs e)Di2015NewLine{Di2015NewLine    if (!e.Cancelled && e.Error == null)Di2015NewLine    {Di2015NewLine        var url = (string)e.UserState;Di2015NewLine        ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
21115716Di2015UniqueSeparatorDispatcher.Invoke
21115716Di2015UniqueSeparatorPropertyChanged
21115716Di2015UniqueSeparatorPropertyChanged
21115716Di2015UniqueSeparatorObservableCollection
21115858Di2015UniqueSeparatorsource: @Html.Raw(Json.Encode(@ViewBag.Items));Di2015NewLine
21115867Di2015UniqueSeparatorCoerceValueCallback
21115867Di2015UniqueSeparatorDependencyProperty
21115867Di2015UniqueSeparatornull
21115867Di2015UniqueSeparatorCoerceValueCallback
21115867Di2015UniqueSeparatornull
21115867Di2015UniqueSeparatorpublic static readonly DependencyProperty MyPropertyProperty =Di2015NewLine    DependencyProperty.Register(Di2015NewLine        "MyProperty",Di2015NewLine        typeof(object),Di2015NewLine        typeof(OwnerType),Di2015NewLine        new PropertyMetadata(default(object), null, CoerceMyProperty));Di2015NewLineDi2015NewLineprivate static object CoerceMyProperty(DependencyObject d, object baseValue)Di2015NewLine{Di2015NewLine    if (baseValue == null)Di2015NewLine        return SomeAlternateValue;Di2015NewLine    return baseValue;Di2015NewLine}Di2015NewLine
21115867Di2015UniqueSeparatorMyProperty
21115867Di2015UniqueSeparatorCoerceMyProperty
21115867Di2015UniqueSeparatornull
21115867Di2015UniqueSeparatorCoerceMyProperty
21115867Di2015UniqueSeparatorthis.MyProperty = null;Di2015NewLinethis.ClearValue(MyPropertyProperty);Di2015NewLine
21115977Di2015UniqueSeparator    protected override void OnModelCreating(DbModelBuilder modelBuilder)Di2015NewLine    {Di2015NewLine        modelBuilder.Properties<string>().Configure(p => p.IsMaxLength());Di2015NewLine    }Di2015NewLine
21115977Di2015UniqueSeparatorDbContext
21116072Di2015UniqueSeparator<% %>
21116072Di2015UniqueSeparator<%= %>
21116072Di2015UniqueSeparator<%: %>
21116072Di2015UniqueSeparator<%# %>
21116072Di2015UniqueSeparator<%$ %>
21116072Di2015UniqueSeparator<%@ %>
21116072Di2015UniqueSeparator<%-- --%>
21116333Di2015UniqueSeparatorTask.Factory.StartNew
21116333Di2015UniqueSeparatorTask.Run
21116333Di2015UniqueSeparatorControl.Invoke
21116333Di2015UniqueSeparatorawait Task.Factory.StartNew(Di2015NewLine    () => {Di2015NewLine        this.webBrowser1.Document.InvokeScript(...);Di2015NewLine    },Di2015NewLine    CancellationToken.None,Di2015NewLine    TaskCreationOptions.None,Di2015NewLine    TaskScheduler.FromCurrentSynchronizationContext());Di2015NewLine
21116333Di2015UniqueSeparatorawait Task.Yield();Di2015NewLinethis.webBrowser1.Document.InvokeScript(...);Di2015NewLine
21116333Di2015UniqueSeparatorawait
21116333Di2015UniqueSeparatorthis.webBrowser1.BeginInvoke(new Action( ()=> Di2015NewLine    this.webBrowser1.Document.InvokeScript(...) ));Di2015NewLine
21116333Di2015UniqueSeparatorawait Task.Run( () => this.Invoke(...) )
21116333Di2015UniqueSeparatorprivate async void button_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        // start and await the background taskDi2015NewLine        var words = new String[] { "fire", "water", "air" };Di2015NewLineDi2015NewLine        await Task.Run(() =>Di2015NewLine        {Di2015NewLine            // do some CPU-bound work, e.g. find synonyms of wordsDi2015NewLine            foreach (var word in words)Di2015NewLine            {Di2015NewLine                // do the next piece of work and get the resultDi2015NewLine                var synonyms = FindSynonyms(word);Di2015NewLineDi2015NewLine                // queue an async UI updateDi2015NewLine                var wordArg = word;Di2015NewLine                var synonymsArg = String.Join(",", synonyms);Di2015NewLineDi2015NewLine                this.webBrowser.BeginInvoke(new Action(() =>Di2015NewLine                {Di2015NewLine                    this.webBrowser.Document.InvokeScript("updateSynonyms",Di2015NewLine                        new object[] { wordArg, synonymsArg });Di2015NewLine                }));Di2015NewLine            }Di2015NewLine        });Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        // catch all exceptions inside this "async void" event handlerDi2015NewLine        MessageBox.Show(ex.Message);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21116349Di2015UniqueSeparatorDateTime
21116349Di2015UniqueSeparatorDateTime
21116349Di2015UniqueSeparatorpublic DataTable GetRecords(DateTime dtParameter)Di2015NewLine{Di2015NewLine    DataTable dt = null;Di2015NewLine    using (SqlConnection conn = new SqlConnection("connection string"))Di2015NewLine    {Di2015NewLine        using (SqlCommand cmd = new SqlCommand("SELECT * from yourTable where DateField = @dateparameter"))Di2015NewLine        {Di2015NewLine            conn.Open();Di2015NewLine            cmd.Parameters.AddWithValue("@dateparameter",dtParameter);Di2015NewLine            SqlDataReader dr = cmd.ExecuteReader();Di2015NewLine            //...rest of the codeDi2015NewLine            dt.Load(dr);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return dt;Di2015NewLine}Di2015NewLine
21116405Di2015UniqueSeparatorJavascriptSerializer
21116405Di2015UniqueSeparator3
21116405Di2015UniqueSeparatorJsonConvert.SerializeObject(new { ResponseType = ReponseType.Success })Di2015NewLine
21116405Di2015UniqueSeparatordata.ResponseTypeDi2015NewLine
21116573Di2015UniqueSeparatorOwnedProducts
21116573Di2015UniqueSeparatornull
21116573Di2015UniqueSeparatorHeinrich.OwnedProducts.Add(test1);Di2015NewLine
21116573Di2015UniqueSeparatorpublic Kunde(string name, string anschrift, string mail)Di2015NewLine{Di2015NewLine    this.Anschrift = anschrift;Di2015NewLine    this.eMail = mail;Di2015NewLine    this.Name = name;Di2015NewLine    this.OwnedProducts = new Produkte();Di2015NewLine}Di2015NewLine
21116573Di2015UniqueSeparatorMainWindow
21116573Di2015UniqueSeparatorpublic MainWindow()Di2015NewLine{Di2015NewLine    InitializeComponent(); // Call this firstDi2015NewLine    initializeME();Di2015NewLine}Di2015NewLine
21116681Di2015UniqueSeparatorusing
21116681Di2015UniqueSeparatortry-finally
21116681Di2015UniqueSeparatorusing
21116681Di2015UniqueSeparatortry-finally
21116681Di2015UniqueSeparatorcatch
21116681Di2015UniqueSeparatorfinally
21116681Di2015UniqueSeparator{Di2015NewLine    SqlConnection conn = new SqlConnection("your connection string");Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        //your codeDi2015NewLine    }Di2015NewLine    catch (SqlException se)Di2015NewLine    {Di2015NewLine        //handle particular exception firstDi2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLineDi2015NewLine        //handle all other exceptionsDi2015NewLine    }Di2015NewLine    finallyDi2015NewLine    {Di2015NewLine        if (conn != null)Di2015NewLine            conn.Dispose();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21116692Di2015UniqueSeparatorif(Input.touchCount > 0 && Input.GetTouch(0).phase == TouchPhase.Began)Di2015NewLine{Di2015NewLine    //Your stuff hereDi2015NewLine}Di2015NewLine
21116692Di2015UniqueSeparatorif(Input.GetMouseButtonDown(0))Di2015NewLine{Di2015NewLine    //Your stuff hereDi2015NewLine}Di2015NewLine
21116692Di2015UniqueSeparatorif(Input.GetMouseButtonUp(0))Di2015NewLine{Di2015NewLine    //Your stuff hereDi2015NewLine}Di2015NewLine
21116692Di2015UniqueSeparatorGetMouseButtonDown
21116692Di2015UniqueSeparatorGetMouseButtonUp
21116692Di2015UniqueSeparatorif(Input.GetMouseButtonDown(0))Di2015NewLine{Di2015NewLine    Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);Di2015NewLine    RaycastHit hit;Di2015NewLine    if(Physics.Raycast(ray,out hit) && hit.collider.gameObject.name == "myObjectName")Di2015NewLine    {Di2015NewLine        //Your stuff hereDi2015NewLine    }Di2015NewLine}Di2015NewLine
21116792Di2015UniqueSeparatorvar cookie = Request.Cookies["cookieName"];Di2015NewLineif (cookie != null)Di2015NewLine{Di2015NewLine    cookie.Value = "new value";Di2015NewLine    Response.SetCookie(cookie);Di2015NewLine}Di2015NewLine
21116822Di2015UniqueSeparatorShoppingBasket
21116822Di2015UniqueSeparatorIEnumerable
21116822Di2015UniqueSeparatorforeach
21116822Di2015UniqueSeparatorList<T>
21116822Di2015UniqueSeparatorpublic class ShoppingBasket : IEnumerable<OrderItem>Di2015NewLine{Di2015NewLine    private List<OrderItem> items = new List<OrderItem>();Di2015NewLineDi2015NewLine    // ...Di2015NewLineDi2015NewLine    public IEnumerator<OrderItem> GetEnumerator()Di2015NewLine    {Di2015NewLine        return items.GetEnumerator();Di2015NewLine    }Di2015NewLineDi2015NewLine    IEnumerator IEnumerable.GetEnumerator()Di2015NewLine    {Di2015NewLine        return GetEnumerator();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21116822Di2015UniqueSeparatorIEnumerator GetEnumerator()
21116822Di2015UniqueSeparatorIEnumerable
21116822Di2015UniqueSeparatorforeach
21116960Di2015UniqueSeparatorSystem.IO.File.WriteAllLines(myFileName,Di2015NewLine                System.Reflection.Assembly.LoadFile(myDllPath)Di2015NewLine                    .GetType(className)Di2015NewLine                    .GetMethods()Di2015NewLine                    .Select(m => m.Name)Di2015NewLine                    .ToArray());Di2015NewLine
21116960Di2015UniqueSeparator System.IO.File.WriteAllLines(myFileName,Di2015NewLine                System.Reflection.Assembly.LoadFile(myDllPath)Di2015NewLine                    .GetTypes()                    Di2015NewLine                    .SelectMany(t => t.GetMethods())Di2015NewLine                    .Select(m => m.Name)Di2015NewLine                    .ToArray());Di2015NewLine
21116962Di2015UniqueSeparatorGrid
21116962Di2015UniqueSeparatorGrid.SetRow
21116962Di2015UniqueSeparatorGrid.SetColumn
21116962Di2015UniqueSeparatorGrid.SetRow(myControl, 1)Di2015NewLineGrid.SetColumn(myControl, 1)Di2015NewLine
21116962Di2015UniqueSeparatorGrid.Row
21116962Di2015UniqueSeparatorGrid.Column
21116962Di2015UniqueSeparatormyControl
21117031Di2015UniqueSeparator<script type="text/javascript" src="@Url.Content("~/Scripts/one.js")"></script>Di2015NewLine
21117031Di2015UniqueSeparator@{Html.RenderPartial("~/Views/One/_OneScript.cshtml");}Di2015NewLine
21117122Di2015UniqueSeparatorvar parsedList = new List<Stuff>();Di2015NewLinestring[] lines = System.IO.File.ReadAllLines(@"C:\\input.txt");Di2015NewLineforeach (var line in lines)Di2015NewLine{Di2015NewLine    var lineSplit = line.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);Di2015NewLine    var stuff = new Stuff(lineSplit[0], Int32.Parse(lineSplit[1]), decimal.Parse(lineSplit[2]), double.Parse([3])  );Di2015NewLine    parsedList.Add(stuff);Di2015NewLine}Di2015NewLineStuff[]  arrayOfStuff = parsedList.ToArray();Di2015NewLine
21117469Di2015UniqueSeparatorIList<Guid> results = Session.QueryOver<Document>(() => documentAlias)Di2015NewLine    .WithSubquery.WhereNotExists(Di2015NewLine        QueryOver.Of<MasterDocument>()Di2015NewLine                .Where(md => md.ID == documentAlias.MasterDocument.ID) // Not sure about thisDi2015NewLine            .JoinQueryOver(md => md.Compartments)Di2015NewLine            .JoinQueryOver(cmp => cmp.AssociatedCompartment)Di2015NewLine                .WhereNot(acmp => acmp.GroupName.IsIn(new[] { "P1", "P3", "P4", "P7" })))Di2015NewLine    .Select(doc => doc.ID)Di2015NewLine    .List<Guid>();Di2015NewLine
21117469Di2015UniqueSeparatorMasterDocument.ID
21117469Di2015UniqueSeparatorDocument.MasterDocument.ID
21117591Di2015UniqueSeparatorthis
21117591Di2015UniqueSeparatorPoint targetPoint = tlp.PointToClient(new Point(e.X, e.Y));Di2015NewLineobject controlAtPoint = tlp.GetChildAtPoint(targetPoint);Di2015NewLineif (!(controlAtPoint is ListBox))Di2015NewLine  return;Di2015NewLineListBox targetListbox = tlp.GetChildAtPoint(targetPoint) as ListBox;Di2015NewLine
21117610Di2015UniqueSeparatorO(nlogn)
21117610Di2015UniqueSeparatorA[i]
21117610Di2015UniqueSeparatorS-A[i]
21117610Di2015UniqueSeparatorO(nlogn)
21117673Di2015UniqueSeparatorFunc<Animal>
21117673Di2015UniqueSeparatorLazy
21117673Di2015UniqueSeparatorLazy
21117673Di2015UniqueSeparatorFunc
21117748Di2015UniqueSeparatorXAML
21117748Di2015UniqueSeparatorDataContext
21117748Di2015UniqueSeparatorTextBox
21117748Di2015UniqueSeparatornamespace WPF1Di2015NewLine{Di2015NewLine  public partial class MainWindow : WindowDi2015NewLine  {Di2015NewLine    personalApp currentApplication = new personalApp ();Di2015NewLineDi2015NewLine    public MainWindow()Di2015NewLine    {Di2015NewLine      InitializeComponent();Di2015NewLine      this.DataContext = currentApplication;Di2015NewLine    }Di2015NewLine  }Di2015NewLine}Di2015NewLine
21117748Di2015UniqueSeparator<TextBox Name="txt_FirstName" Text="{Binding FirstName, UpdateSourceTrigger=PropertyChanged}" />Di2015NewLine
21117853Di2015UniqueSeparatorvar dict = db2_table.Rows.Cast<DataRow>().ToDictionary(row2 => row2["keycolumn"].Value); // this is the hashing, make sure no duplicate keys exist!Di2015NewLineforeach (DataRow row1 in db1_table.Rows) {Di2015NewLine    DataRow row2;Di2015NewLine    if (dict.TryGetValue(row1["keycolumn"].Value, out row2)) {Di2015NewLine        // row1 and row2 match by the key column, do something with themDi2015NewLine        dict.Remove(row2["keycolumn"].Value);Di2015NewLine    }Di2015NewLine    // else no match, row1 must be a new rowDi2015NewLine}Di2015NewLine// now dict contains the keys from db2 which have no match in db1, they must have been deletedDi2015NewLine
21117909Di2015UniqueSeparator<authentication mode="Forms"/>Di2015NewLine
21117909Di2015UniqueSeparator<authentication mode="Windows"/>Di2015NewLine
21117985Di2015UniqueSeparator        XDocument doc = XDocument.Load("products.xml");Di2015NewLineDi2015NewLine        var products = from p in doc.Descendants("product")Di2015NewLine                       where Double.Parse(p.Element("stack").Value) <= 5Di2015NewLine                       select p;Di2015NewLineDi2015NewLine        XDocument output = new XDocument();Di2015NewLine        XElement root = new XElement("root");Di2015NewLine        output.Add(root);Di2015NewLine        foreach(var e in products)Di2015NewLine        {Di2015NewLine            root.Add(e);Di2015NewLine        }Di2015NewLineDi2015NewLine        output.Save("found.xml");Di2015NewLine
21117985Di2015UniqueSeparator        XmlDocument doc = new XmlDocument();Di2015NewLine        doc.Load("products.xml");Di2015NewLineDi2015NewLine        XmlNodeList products = doc.GetElementsByTagName("product");Di2015NewLineDi2015NewLine        XmlDocument output = new XmlDocument();Di2015NewLine        XmlElement root = output.CreateElement("root");Di2015NewLine        output.AppendChild(root);Di2015NewLine        foreach(XmlNode e in products)Di2015NewLine        {Di2015NewLine            if (Double.Parse(e.ChildNodes[2].InnerText) <= 5)Di2015NewLine            {Di2015NewLine                XmlNode imported = output.ImportNode(e, true);Di2015NewLine                root.AppendChild(imported);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        output.Save("found.xml");Di2015NewLine
21118022Di2015UniqueSeparatorInlines
21118022Di2015UniqueSeparatorTextBlock tb = this.txtDi2015NewLineSpan span = (Span) tb.Inlines.FirstInline;Di2015NewLineRun run = (Run) span.Inlines.FirstInline;Di2015NewLinestring text = run.Text;Di2015NewLine
21118154Di2015UniqueSeparatorpublic virtual Task<List<T>> GetListAsync(Func<IQueryable<T>, IOrderedQueryable<T>> orderby)Di2015NewLine{Di2015NewLine    IQueryable<T> dbQuery = _dbContext.Set<T>();Di2015NewLine    if (orderby != null)Di2015NewLine    {Di2015NewLine        if (orderby != null)Di2015NewLine        {Di2015NewLine            dbQuery = orderby(dbQuery);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return dbQuery.ToListAsync<T>();Di2015NewLine}Di2015NewLine
21118154Di2015UniqueSeparatorvar data = await GetListAsync(q => q.OrderBy(it => it.Name))Di2015NewLine
21118159Di2015UniqueSeparatorpublic class TestDi2015NewLine{Di2015NewLine   // ...Di2015NewLine   public virtual ICollection<TestQuestion> Questions { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class TestQuestionDi2015NewLine{Di2015NewLine   public virtual Test Test { get; set; }Di2015NewLine   public virtual Question Question { get; set; }Di2015NewLine   public int Order { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class QuestionDi2015NewLine{Di2015NewLine   // ...Di2015NewLine}Di2015NewLine
21118159Di2015UniqueSeparatormodelBuilder.Entity<Test>()Di2015NewLine            .HasMany(t => t.Questions)Di2015NewLine            .WithRequired(tq => tq.Test);Di2015NewLineDi2015NewLinemodelBuilder.Entity<TestQuestion>()Di2015NewLine            .HasRequired(tq => tq.Question)Di2015NewLine            .WithOptional();Di2015NewLine
21118196Di2015UniqueSeparatorDataObject someDataObject = ...;Di2015NewLinetypeof(DataObject).GetProperty("SomePropertyName").GetValue(someDataObject)Di2015NewLine
21118196Di2015UniqueSeparatorvar filtered = dataCollection.Where(obj => Di2015NewLine                    criteriaCollection.Any(cond => obj.GetType()Di2015NewLine                                                      .GetProperty(cond.ColumnName)Di2015NewLine                                                      .GetValue(obj)Di2015NewLine                                                      .Equals(cond.ColumnValue)))Di2015NewLine                             .ToList();Di2015NewLine
21118254Di2015UniqueSeparatorfinally
21118254Di2015UniqueSeparatorusing
21118254Di2015UniqueSeparatorusing (ResourceType r1 = e1, r2 = e2, ..., rN = eN) statement Di2015NewLine
21118254Di2015UniqueSeparatorusing (ResourceType r1 = e1)Di2015NewLine   using (ResourceType r2 = e2)Di2015NewLine      ...Di2015NewLine         using (ResourceType rN = eN)Di2015NewLine            statementDi2015NewLine
21118320Di2015UniqueSeparatorTruth
21118320Di2015UniqueSeparatornull
21118320Di2015UniqueSeparatorInvalidOperationException: Nullable object must have a value
21118320Di2015UniqueSeparatortrue
21118320Di2015UniqueSeparatornull
21118524Di2015UniqueSeparator@@DATEFIRST
21118524Di2015UniqueSeparatorCREATE FUNCTION [dbo].[GetWeek](@dt datetime)Di2015NewLineRETURNS intDi2015NewLineBEGINDi2015NewLine    RETURN DATEPART( wk, @dt)Di2015NewLineENDDi2015NewLine
21118524Di2015UniqueSeparatorSystem.Data.Linq.Mapping.FunctionAttribute
21118524Di2015UniqueSeparator[Function(Name="dbo.GetWeek", IsComposable=true)]Di2015NewLinepublic int GetWeekNumber([Parameter(Name="@dt", DbType="datetime")]DateTime date)Di2015NewLine{Di2015NewLine  Calendar cal = DateTimeFormatInfo.CurrentInfo.Calendar;Di2015NewLine  return cal.GetWeekOfYear(date, CalendarWeekRule.FirstDay, DayOfWeek.Monday);Di2015NewLine}Di2015NewLine
21118524Di2015UniqueSeparatorIsComposable=true
21118524Di2015UniqueSeparatordbc.GetWeekNumber
21118524Di2015UniqueSeparatorWeekStuff.GetWeekNumber
21118524Di2015UniqueSeparator[Function(Name="dbo.GetWeek", IsComposable=true)]Di2015NewLinepublic int GetWeekNumber([Parameter(Name="@dt", DbType="datetime")]DateTime date)Di2015NewLine{Di2015NewLine  return (int)ExecuteMethodCall(this, (MethodInfo)MethodInfo.GetCurrentMethod(), date).ReturnValue;Di2015NewLine}Di2015NewLine
21118552Di2015UniqueSeparatorDataContext
21118552Di2015UniqueSeparatorTextBlock
21118552Di2015UniqueSeparatorGroupItem
21118552Di2015UniqueSeparatorMS.Internal.Data.CollectionViewGroupInternal
21118552Di2015UniqueSeparatorName
21118552Di2015UniqueSeparator{Binding Name}
21118552Di2015UniqueSeparator{Binding B}
21118603Di2015UniqueSeparatorTextBox1.Text = Ersch_Online[1].ToShortDateString();Di2015NewLine// orDi2015NewLineTextBox1.Text = Ersch_Online[1].ToString("d");Di2015NewLine// orDi2015NewLineTextBox1.Text = Ersch_Online[1].ToString("dd.MM.yyyy");Di2015NewLine
21118603Di2015UniqueSeparatorTextBox1.Text = Ersch_Online[1].ToShortTimeString();Di2015NewLine// orDi2015NewLineTextBox1.Text = Ersch_Online[1].ToString("t");Di2015NewLine// orDi2015NewLineTextBox1.Text = Ersch_Online[1].ToString("HH:mm:ss");Di2015NewLine
21118687Di2015UniqueSeparatorConsole.WriteLine("Please enter the date you wish to specify: (DD/MM/YYYY)");Di2015NewLinestring userInput;Di2015NewLineuserInput = Console.ReadLine();Di2015NewLinewhile (userInput != "0")Di2015NewLine{Di2015NewLine    DateTime calc = DateTime.Parse(userInput);Di2015NewLine    TimeSpan days = DateTime.Now.Subtract(calc);Di2015NewLine    Console.WriteLine(days.TotalDays);Di2015NewLine    Console.WriteLine("Add another date");Di2015NewLine    userInput = Console.ReadLine();Di2015NewLine}Di2015NewLine
21118900Di2015UniqueSeparatorlstAssignedTo.DataSource = dt;Di2015NewLinelstAssignedTo.DataTextField = "Name";Di2015NewLinelstAssignedTo.DataValueField = "EmailAddress"Di2015NewLinelstAssignedTo.DataBind();Di2015NewLinelstAssignedTo.Items.Insert(0, "Select Onsite Tech");Di2015NewLine
21118900Di2015UniqueSeparatorvar value = lstAssignedTo.SelectedValue;Di2015NewLine
21118909Di2015UniqueSeparatornew { s.Key, s.Value }
21118909Di2015UniqueSeparatorKey
21118909Di2015UniqueSeparatorValue
21118909Di2015UniqueSeparatorKeyValuePair
21118909Di2015UniqueSeparatornew KeyValuePair(s.Key, s.Value)
21118909Di2015UniqueSeparatorWhere
21118909Di2015UniqueSeparatorKeyValuePairs
21118909Di2015UniqueSeparatorSelect
21118909Di2015UniqueSeparatorKeyValuePair
21118909Di2015UniqueSeparatortp = st.Where(s => s.Key == (int)Status.Open || s.Key == (int)Status.Reviewed)Di2015NewLine       .Select(kvp => new KeyValuePair(kvp.Key, kvp.Value)).ToList();Di2015NewLine
21118909Di2015UniqueSeparatorSelect
21118909Di2015UniqueSeparatortp = st.Where(s => s.Key == (int)Status.Open || s.Key == (int)Status.Reviewed).ToList();Di2015NewLine
21118909Di2015UniqueSeparatorLinq
21118909Di2015UniqueSeparatorKey
21118909Di2015UniqueSeparatorValue
21118909Di2015UniqueSeparatorKeyValuePairs
21118909Di2015UniqueSeparatortp
21118909Di2015UniqueSeparatorreturn
21118909Di2015UniqueSeparatorswitch
21119181Di2015UniqueSeparatorpublic static Action<TObj, TProp> GenerateSetter<TObj, TProp>(string propertyName)Di2015NewLine{Di2015NewLine    var type = typeof(TObj);Di2015NewLine    var property = type.GetProperty(propertyName, BindingFlags.Instance | BindingFlags.NonPublic);Di2015NewLineDi2015NewLine    MethodInfo setterMethodInfo = property.SetMethod;Di2015NewLineDi2015NewLine    ParameterExpression paramo = Expression.Parameter(typeof(TObj), "param");Di2015NewLine    ParameterExpression parami = Expression.Parameter(typeof(TProp), "newvalue");Di2015NewLineDi2015NewLine    MethodCallExpression methodCallSetterOfProperty = Expression.Call(paramo, setterMethodInfo, parami);Di2015NewLine    Expression setPropertyValueExp = Expression.Lambda(methodCallSetterOfProperty, paramo, parami);Di2015NewLineDi2015NewLine    var setPropertyValueLambda = (Expression<Action<TObj, TProp>>)setPropertyValueExp;Di2015NewLine    var setterFunc = setPropertyValueLambda.Compile();Di2015NewLine    return setterFunc;Di2015NewLine}Di2015NewLine
21119181Di2015UniqueSeparatorAction<A, string> action = GenerateSetter<A, string>("Test");Di2015NewLineA obj = new A();Di2015NewLineaction(obj, "newValue");Di2015NewLine
21119181Di2015UniqueSeparatorpublic class ADi2015NewLine{Di2015NewLine    private string Test { get; set; }Di2015NewLine}Di2015NewLine
21119304Di2015UniqueSeparatorIEquatable<string>
21119304Di2015UniqueSeparatorpublic bool Equals(string other)Di2015NewLine{Di2015NewLine    ConversionOperator item = new ConversionOperator(other);Di2015NewLineDi2015NewLine    return this.Equals(item);Di2015NewLine}Di2015NewLine
21119685Di2015UniqueSeparator\\content
21119685Di2015UniqueSeparator<link rel="stylesheet" href="content/nivo-slider.css" type="text/css" />Di2015NewLine<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js"Di2015NewLine        type="text/javascript"></script>Di2015NewLine<script src="content/jquery.nivo.slider.pack.js" type="text/javascript"></script>Di2015NewLine
21119685Di2015UniqueSeparator\\images
21119685Di2015UniqueSeparator<div id="slider" class="nivoSlider">Di2015NewLine    <img src="images/slide1.jpg" alt="" />Di2015NewLine    <a href="http://dev7studios.com"><img src="images/slide2.jpg" alt="" title="#htmlcaption" /></a>Di2015NewLine    <img src="images/slide3.jpg" alt="" title="This is an example of a caption" />Di2015NewLine    <img src="images/slide4.jpg" alt="" />Di2015NewLine</div>Di2015NewLine<div id="htmlcaption" class="nivo-html-caption">Di2015NewLine    <strong>This</strong> is an example of a <em>HTML</em> caption with <a href="#">a link</a>.Di2015NewLine</div>Di2015NewLine
21119685Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine  $(document).ready(function() {Di2015NewLine    $('#slider').nivoSlider();Di2015NewLine  });Di2015NewLine</script>Di2015NewLine
21119746Di2015UniqueSeparatorprivate void spremiUDatotekuToolStripMenuItem1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLineif (saveFileDialog1.ShowDialog() == DialogResult.OK)Di2015NewLine{Di2015NewLine    System.IO.StreamWriter sw = newDi2015NewLine    System.IO.StreamWriter(saveFileDialog1.FileName);Di2015NewLineDi2015NewLine    for (int x = 0; x < dataGridView1.Rows.Count; x++)Di2015NewLine    {Di2015NewLineDi2015NewLine        for (int y = 0; y < dataGridView1.Columns.Count; y++)Di2015NewLine        {Di2015NewLine            sw.Write(dataGridView1.Rows[x].Cells[y].Value);Di2015NewLine            if (y != dataGridView1.Columns.Count - 1) // Count - 1 is the last value. y will never reach count because you have "<" signDi2015NewLine            {Di2015NewLine                sw.Write("|");                    Di2015NewLine            }Di2015NewLine        }Di2015NewLine        sw.WriteLine();Di2015NewLine    }Di2015NewLine    sw.Close();Di2015NewLine}Di2015NewLine
21120065Di2015UniqueSeparator<Window.Resources>
21120065Di2015UniqueSeparator<Window x:Class="WpfApplication2.MainWindow"Di2015NewLine            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine            Title="MainWindow" Height="350" Width="525" Di2015NewLine            xmlns:Converters="clr-namespace: here.yournamespace.converts">Di2015NewLine        <Window.Resources>Di2015NewLine            <Converters:SuccessConverter x:Key="nullableBooleanConverter" />Di2015NewLine        </Window.Resources>Di2015NewLine        <Grid>Di2015NewLineDi2015NewLine        </Grid>Di2015NewLine    </Window>Di2015NewLine
21120075Di2015UniqueSeparatorsomeParameter
21120075Di2015UniqueSeparatorcolumn3 = (from t3 in TableThreeDi2015NewLine           where Di2015NewLine              someParameter != null &&Di2015NewLine              t3.id == "someId"Di2015NewLine           select new SomeObjectDi2015NewLine           {Di2015NewLine                Field1 = t3.Col1,Di2015NewLine                Field2 = t3.Col2Di2015NewLine           }).ToList()Di2015NewLine
21120101Di2015UniqueSeparatorbool clockedIn = false;Di2015NewLineDi2015NewLinepublic void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (!clockedIn)Di2015NewLine    {Di2015NewLine        // employee just arrived - log arrival timeDi2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        // employee leaving - log departure timeDi2015NewLine    }Di2015NewLineDi2015NewLine    clockedIn = !clockedIn;Di2015NewLine}Di2015NewLine
21120233Di2015UniqueSeparator: object
21120233Di2015UniqueSeparatorSystem.Converter<string,T>
21120233Di2015UniqueSeparatorConverter<string, object>
21120233Di2015UniqueSeparatorT
21120233Di2015UniqueSeparatorobject
21120324Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing Newtonsoft.Json;Di2015NewLineDi2015NewLinenamespace ConsoleApplication7Di2015NewLine{Di2015NewLine    class Item : List<object>Di2015NewLine    {Di2015NewLineDi2015NewLine        public Item()Di2015NewLine        {Di2015NewLine            this.Add(""); // for name;Di2015NewLine            this.Add(0); // for value;Di2015NewLine        }Di2015NewLine        [JsonIgnore]Di2015NewLine        public string Name { get { return this[0].ToString(); } set { this[0] = value; } }Di2015NewLine        [JsonIgnore]Di2015NewLine        public int Value { get { return (int)this[1]; } set { this[1] = value; } }Di2015NewLine    }Di2015NewLineDi2015NewLine    class CategoryDi2015NewLine    {Di2015NewLine        public string name { get; set; }Di2015NewLine        public List<Item> data { get; set; }Di2015NewLine        public Category()Di2015NewLine        {Di2015NewLine            this.data = new List<Item>();Di2015NewLine        }Di2015NewLine    }Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            var all = new Dictionary<string, Category>Di2015NewLine                {Di2015NewLine                    {Di2015NewLine                        "Animals", new Category()Di2015NewLine                            {Di2015NewLine                                name = "Animals",Di2015NewLine                                data =Di2015NewLine                                    new List<Item>()Di2015NewLine                                        {Di2015NewLine                                            new Item() {Name = "Cows", Value = 2},Di2015NewLine                                            new Item() {Name = "Sheep", Value = 3}Di2015NewLine                                        }Di2015NewLine                            }Di2015NewLineDi2015NewLine                        //include your other items hereDi2015NewLine                    }Di2015NewLine                };Di2015NewLineDi2015NewLine            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(all));Di2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21120344Di2015UniqueSeparatorlazy
21120344Di2015UniqueSeparator<property>
21120428Di2015UniqueSeparator==
21120428Di2015UniqueSeparator=
21120428Di2015UniqueSeparators1.Skip = true;Di2015NewLine
21120461Di2015UniqueSeparatorprivate string GetParentId(string appId)Di2015NewLine{Di2015NewLine   ObjectParameter parentID = new ObjectParameter("ParentID", typeof(string));Di2015NewLine   GetParentID(appId, parentID);Di2015NewLine   return parentID.Value.ToString();Di2015NewLine}Di2015NewLine
21120564Di2015UniqueSeparatorint tryCatchVar = 0;Di2015NewLineDi2015NewLinetryDi2015NewLine{Di2015NewLine    ...other code...Di2015NewLine}Di2015NewLinecatchDi2015NewLine{Di2015NewLine    if (tryCatchVar != 0) return;Di2015NewLine}Di2015NewLine
21120765Di2015UniqueSeparatorSelectMany
21120765Di2015UniqueSeparatorGroupBy
21120765Di2015UniqueSeparatorvar sections = records.GroupBy(g => new { g.SectionId, g.SectionType })Di2015NewLine.Select(s => new SectionDi2015NewLine{Di2015NewLine    Id = s.Key.SectionId,Di2015NewLine    Type = s.Key.SectionType,Di2015NewLine    Records = s.SelectMany(x => x.RecordValues)Di2015NewLine               .GroupBy(x => x.Key)Di2015NewLine               .ToDictionary(g => g.Key, g => g.SelectMany(x => x.Value).ToList())Di2015NewLine}).ToList();Di2015NewLine
21120765Di2015UniqueSeparatorvar sections = records.GroupBy(g => new { g.SectionId, g.SectionType })Di2015NewLine.Select(s => new SectionDi2015NewLine{Di2015NewLine    Id = s.Key.SectionId,Di2015NewLine    Type = s.Key.SectionType,Di2015NewLine    Records = s.SelectMany(x => x.RecordValues).ToDictionary(g => g.Key, g => g.Value)Di2015NewLine}).ToList();Di2015NewLine
21120776Di2015UniqueSeparatorclass public auto ansi beforefieldinit SomeNamespace.Test extends [mscorlib]System.ObjectDi2015NewLine{Di2015NewLine  .custom instance void SomeNamespace.TestAttribute::.ctor(string) = (Di2015NewLine    01 00 04 54 65 73 74 00 00Di2015NewLine  )Di2015NewLine  .field public static literal string Name = "Test"Di2015NewLine  .method public hidebysig specialname rtspecialname instance void .ctor () cil managedDi2015NewLine  {Di2015NewLine    .maxstack 8Di2015NewLine    ldarg.0Di2015NewLine    call instance void [mscorlib]System.Object::.ctor()Di2015NewLine    retDi2015NewLine  }Di2015NewLine}Di2015NewLine
21121026Di2015UniqueSeparatordayView.Collection = e.NewValue as AppointmentCollections;Di2015NewLine
21121026Di2015UniqueSeparatordayView.DataContext = dayView.Collection;Di2015NewLine
21121041Di2015UniqueSeparatorpublic class ParagonClass : INotifyPropertyChangedDi2015NewLine{Di2015NewLine  //some variablesDi2015NewLine  private decimal _totalValue;Di2015NewLineDi2015NewLine  public decimal TotalValueDi2015NewLine  {Di2015NewLine    getDi2015NewLine    {Di2015NewLine        if (ProductID > 0)Di2015NewLine            _totalValue = Math.Round(ProductCount * PriceBrutto, 2, MidpointRounding.AwayFromZero);Di2015NewLine        return _totalValue;Di2015NewLine    }Di2015NewLine  // No need for a setter if its calculatedDi2015NewLine  // See Sheridan's answer for how to do thisDi2015NewLine  //       setDi2015NewLine  //       {Di2015NewLine  //           _totalValue = value;Di2015NewLine  //           NotifyPropertyChanged("TotalValue");Di2015NewLine  //       }Di2015NewLine  }Di2015NewLineDi2015NewLine  ...Di2015NewLine}Di2015NewLine
21121041Di2015UniqueSeparatorpublic class ParagonCollection : ObservableCollection<ParagonClass>, INotifyPropertyChangedDi2015NewLine{Di2015NewLine  private int sum;Di2015NewLine  public int SumDi2015NewLine  { Di2015NewLine    get{ return sum;} Di2015NewLine    setDi2015NewLine    {Di2015NewLine      sum = value;Di2015NewLine      NotifyPropertyChanged("Sum");Di2015NewLine    }Di2015NewLine }Di2015NewLine  // You'll need as implantation of INotifyPropertyChanged hereDi2015NewLine  // and some extra stuff to comeDi2015NewLine  ...Di2015NewLine}Di2015NewLine
21121041Di2015UniqueSeparatorpublic ParagonCollection()Di2015NewLine{Di2015NewLine   // When the collection changes set the Sum to the new Sum of TotalValuesDi2015NewLine   this.CollectionChanged += OnCollectionChanged;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs notifyCollectionChangedEventArgs)Di2015NewLine{Di2015NewLine  Recalculate();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Recalculate()Di2015NewLine{Di2015NewLine  Sum = this.Sum(x=>x.TotalValue);Di2015NewLine}Di2015NewLine
21121041Di2015UniqueSeparatorParagonClass
21121041Di2015UniqueSeparatorprivate void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs args)Di2015NewLine{Di2015NewLine  foreach(ParagonClass item in args.OldItems)Di2015NewLine  {Di2015NewLine    // Unsubscribe to changes in each itemDi2015NewLine    item.PropertyChanged -= OnItemChanged;Di2015NewLine  }Di2015NewLine  foreach(ParagonClass item in args.NewItems)Di2015NewLine  {Di2015NewLine    // Subscribe to future changes for each itemDi2015NewLine    item.PropertyChanged += OnItemChanged;Di2015NewLine  }Di2015NewLineDi2015NewLine  Recalculate();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void OnItemChanged(object sender, PropertyChangedEventArgs args)Di2015NewLine{Di2015NewLine  Recalulate();Di2015NewLineDi2015NewLine  // You might decide that you only want to recalculate for some property Di2015NewLine  // changes, and do something like the following insteadDi2015NewLine  // if (args.PropertyName=="TotalValue")Di2015NewLine  //   Recalulate();Di2015NewLine}Di2015NewLine
21121279Di2015UniqueSeparatorProxyPass        / http://localhost:9005/ #your backendDi2015NewLineProxyPassReverse / http://localhost:9005/ #your backendDi2015NewLineProxyPreserveHost OnDi2015NewLineDi2015NewLine## Rewrite rulesDi2015NewLineRewriteEngine OnDi2015NewLineRewriteCond %{LA-U:REMOTE_USER} (.+)Di2015NewLineRewriteRule . - [E=RU:%1]Di2015NewLineDi2015NewLine## Request header rulesDi2015NewLine## as per http://httpd.apache.org/docs/2.2/mod/mod_headers.html#requestheaderDi2015NewLineRequestHeader set X-Forwarded-User %{RU}eDi2015NewLineDi2015NewLine<Location />Di2015NewLine   AuthName "Kerberos Login"Di2015NewLine   AuthType KerberosDi2015NewLine   Krb5Keytab /path/to your keytab/HTTP.keytabDi2015NewLine   KrbAuthRealm DOMAIN.LOCDi2015NewLine   KrbMethodNegotiate onDi2015NewLine   KrbSaveCredentials offDi2015NewLine   KrbVerifyKDC offDi2015NewLine   KrbServiceName HTTP/YOURAPP.AD2008R2.LOCDi2015NewLine   Require valid-userDi2015NewLine</Location> Di2015NewLine
21121279Di2015UniqueSeparatorX-Forwarded-User
21121296Di2015UniqueSeparatorSystem.IO.StreamReader rdr = System.IO.File.OpenText("c:\\\\myfile.txt")Di2015NewLinestring stringvalues = rdr.ReadToEnd();Di2015NewLinerdr.Close();Di2015NewLine
21121296Di2015UniqueSeparatorstring[] stringvalues = csvintegers.split(',');Di2015NewLine
21121296Di2015UniqueSeparatorList<double> doublevalues = new List<double>();Di2015NewLineforeach(string value in stringvalues)Di2015NewLine{Di2015NewLine    doublevalues.Add(double.Parse(value));Di2015NewLine}Di2015NewLine
21121395Di2015UniqueSeparatorwindow.location
21121395Di2015UniqueSeparator<a>
21121395Di2015UniqueSeparatorhref
21121420Di2015UniqueSeparatorclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLineDi2015NewLine        ParCard pc = new ParCard();Di2015NewLine        pc.ExtrFreq = "Daily";Di2015NewLine        pc.LastDay = "20140101";Di2015NewLine        pc.FolderPath = @"c:\\temp";Di2015NewLine        pc.Files = new List<EFile>() { new EFile() { FileName = "file1.txt" }, new EFile { FileName = "file2.txt" } };Di2015NewLine        pc.FTPAddress = "10.1.1.100";Di2015NewLine        pc.FTPPath = "Home";Di2015NewLine        pc.FTPUser = "User";Di2015NewLine        pc.FTPPass = "Pass";Di2015NewLineDi2015NewLine        Serialize(pc);Di2015NewLine    }Di2015NewLineDi2015NewLine    static public void Serialize(ParCard pc)Di2015NewLine    {Di2015NewLine        XmlSerializer serializer = new XmlSerializer(typeof(ParCard));Di2015NewLine        using (TextWriter writer = new StreamWriter(@"Teste.xml"))Di2015NewLine        {Di2015NewLine            serializer.Serialize(writer, pc);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ParCardDi2015NewLine{Di2015NewLine    public string ExtrFreq { get; set; }Di2015NewLine    public string LastDay { get; set; }Di2015NewLine    public string FolderPath { get; set; } Di2015NewLineDi2015NewLine    [XmlIgnore]Di2015NewLine    public List<EFile> Files { get; set; }Di2015NewLineDi2015NewLine    [XmlArray("Files"), XmlArrayItem(typeof(string), ElementName = "FileName")]Di2015NewLine    public List<string> FilesAsString { get; set; }Di2015NewLine    public string FTPAddress { get; set; }Di2015NewLine    public string FTPPath { get; set; }Di2015NewLine    public string FTPUser { get; set; }Di2015NewLine    public string FTPPass { get; set; }Di2015NewLineDi2015NewLine    public bool ShouldSerializeFilesAsString()Di2015NewLine    {Di2015NewLine        List<string> fileNames = new List<string>();Di2015NewLine        foreach (var eFile in Files)Di2015NewLine        {Di2015NewLine            fileNames.Add(eFile.FileName);Di2015NewLine        }Di2015NewLineDi2015NewLine        FilesAsString = fileNames;Di2015NewLine        return true;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic class EFileDi2015NewLine{Di2015NewLine    public string FileName { get; set; }Di2015NewLine}Di2015NewLine
21121420Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine<ParCard xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">Di2015NewLine    <ExtrFreq>Daily</ExtrFreq>Di2015NewLine    <LastDay>20140101</LastDay>Di2015NewLine    <FolderPath>c:\\temp</FolderPath>Di2015NewLine    <Files>Di2015NewLine        <FileName>file1.txt</FileName>Di2015NewLine        <FileName>file2.txt</FileName>Di2015NewLine    </Files>Di2015NewLine    <FTPAddress>10.1.1.100</FTPAddress>Di2015NewLine    <FTPPath>Home</FTPPath>Di2015NewLine    <FTPUser>User</FTPUser>Di2015NewLine    <FTPPass>Pass</FTPPass>Di2015NewLine</ParCard>Di2015NewLine
21121555Di2015UniqueSeparatorProductUID_autocomplete
21121555Di2015UniqueSeparatorValidationMessageFor
21121555Di2015UniqueSeparatorProductUID
21121555Di2015UniqueSeparator@Html.ValidationMessage("ProductUID_autocomplete")Di2015NewLine
21121555Di2015UniqueSeparatorProductUID_autocomplete
21121555Di2015UniqueSeparatorModelState
21121555Di2015UniqueSeparatorValidationMessage
21121555Di2015UniqueSeparator_autocomplete
21121869Di2015UniqueSeparatorMultipleActiveResultSets=true;
21121905Di2015UniqueSeparator// Class B ConstructorDi2015NewLinepublic class ClassBDi2015NewLine{Di2015NewLine    public classB()Di2015NewLine    {Di2015NewLine        this.classC = new ClassC(); Di2015NewLine    }Di2015NewLine}Di2015NewLine
21122097Di2015UniqueSeparatorPOPSUser
21122097Di2015UniqueSeparatorDB.OperationsTeam.Select(u => u.UserEmail).Distinct();Di2015NewLine
21122097Di2015UniqueSeparatorSELECT DISTINCTDi2015NewLine   [Extent1].[UserEmail] AS [UserEmail]Di2015NewLineFROM [dbo].[OperationsTeam] AS [Extent1]Di2015NewLine
21122131Di2015UniqueSeparator// Here is Example for Book EntityDi2015NewLineDi2015NewLineDi2015NewLine context.Book.ToList().ForEach(n => bs.Add(n)); Di2015NewLine // attach event after fill dataDi2015NewLine bs.ListChanged += bs_ListChanged;Di2015NewLineDi2015NewLineDi2015NewLinevoid bs_ListChanged(object sender, ListChangedEventArgs e)Di2015NewLine    {Di2015NewLine        switch (e.ListChangedType)Di2015NewLine        {Di2015NewLine            case ListChangedType.ItemAdded:Di2015NewLine                context.Book.Add((Book)((BindingSource)sender).List[e.NewIndex]); // Adding to Navigating Collection Di2015NewLine                break;Di2015NewLineDi2015NewLine            case ListChangedType.ItemDeleted:Di2015NewLine                contextBook.Remove((Book)((BindingSource)sender).List[e.OldIndex]);Di2015NewLine                break;Di2015NewLine        }Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine//detaching events for reloading data Di2015NewLinebs.ListChanged -= bs_ListChanged;Di2015NewLine// here reloading data from dbaseDi2015NewLinebs.ListChanged += bs_ListChanged;Di2015NewLine
21122131Di2015UniqueSeparatorpublic class JoinClassDi2015NewLine{Di2015NewLine    private Book _Book;Di2015NewLine    private LibraryStock _LibraryStock;Di2015NewLine    public Book GetBook() { return _Book; }Di2015NewLine    public LibraryStock GetLibraryStock() { return _LibraryStock; }Di2015NewLineDi2015NewLine    public JoinClass()Di2015NewLine    {Di2015NewLine        _LibraryStock = new LibraryStock();Di2015NewLine        _Book = new Book();Di2015NewLine        _LibraryStock.Book = _Book;Di2015NewLine    }Di2015NewLine    public JoinClass(LibraryStock libraryStock)Di2015NewLine    {Di2015NewLine        _LibraryStock = libraryStock;Di2015NewLine        _Book = libraryStock.Book;Di2015NewLine    }Di2015NewLineDi2015NewLine // here properties of both entitiesDi2015NewLineDi2015NewLine}Di2015NewLine
21122220Di2015UniqueSeparatorstring query = "insert into table(data) values('"+DateTime.Now.ToString("yyyy-MM-dd")+"')";Di2015NewLineDi2015NewLineOleDbConnection conexao = new OleDbConnection();Di2015NewLineconexao.ConnectionString = this.string_conexao;Di2015NewLineconexao.Open();Di2015NewLineDi2015NewLineOleDbCommand comando = new OleDbCommand();Di2015NewLinecomando.CommandText = query;Di2015NewLinecomando.Connection = conexao;Di2015NewLinetryDi2015NewLine{Di2015NewLinecomando.ExecuteNonQuery();Di2015NewLine}Di2015NewLinecatchDi2015NewLine{Di2015NewLine}Di2015NewLine
21122293Di2015UniqueSeparatornew Byte()
21122293Di2015UniqueSeparatorbyte
21122293Di2015UniqueSeparator0
21122293Di2015UniqueSeparatornew Byte[0]
21122361Di2015UniqueSeparator           foreach (HtmlNode bodyNode in doc.DocumentNode.SelectNodes("//body"))Di2015NewLine            {Di2015NewLine                string newImg = "new-value.png";Di2015NewLine                if (bodyNode.Attributes.Contains("style") && bodyNode.Attributes["style"].Value.Contains("background-image:url"))Di2015NewLine                {                     Di2015NewLine                    string style = bodyNode.Attributes["style"].Value;Di2015NewLine                    string oldImg = Regex.Match(style, @"(?<=\\().+?(?=\\))").Value;Di2015NewLine                    string oldStyle = bodyNode.Attributes["style"].Value;Di2015NewLine                    string newStyle = oldStyle.Replace(oldImg, newImg);Di2015NewLineDi2015NewLine                    bodyNode.Attributes.Remove("style");Di2015NewLine                    bodyNode.Attributes.Add("style", newStyle);Di2015NewLine                }Di2015NewLineDi2015NewLine            }Di2015NewLine
21122854Di2015UniqueSeparator    protected void Page_Load(object sender, EventArgs e) Di2015NewLine    { Di2015NewLine        Session["CurrentUrl"] = Request.Url.ToString();Di2015NewLine        Response.Redirect("~/SecondPage.aspx");Di2015NewLine    }Di2015NewLine
21122854Di2015UniqueSeparator    private string BackToLastPage { get { return (Session["CurrentUrl"] == null) ? "" : Session["CurrentUrl"].ToString(); } }Di2015NewLineDi2015NewLine    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        int BrugerId = Convert.ToInt32(Session["BrugerId"]);Di2015NewLine        int TeamId = Convert.ToInt32(Request.QueryString["HoldId"]);Di2015NewLineDi2015NewLine        if (Session["brugerId"] != null)Di2015NewLine        {Di2015NewLine            //CUT CODE OUT DONT HAVE YOUR DEFINITIONSDi2015NewLine            Response.Write("brugerid was not null");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void BackToLastPageBtn_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        //YOU SHOULD SET THE CURRENT URL TO NULL HERE.Di2015NewLine        string tempUrl = BackToLastPage;Di2015NewLine        Session["CurrentUrl"] = null;Di2015NewLine        Response.Redirect(tempUrl);Di2015NewLine    }Di2015NewLine
21122854Di2015UniqueSeparator<form id="form1" runat="server">Di2015NewLine<div>Di2015NewLine    <asp:Button ID="btnOne" runat="server" OnClick="BackToLastPageBtn_Click" Text="Button One" />Di2015NewLine    <asp:HiddenField ID="hfPreviousUrl" runat="server" />Di2015NewLine</div>Di2015NewLine</form>Di2015NewLine
21122854Di2015UniqueSeparator    private string BackToLastPage //THIS WILL NOW PERSIST POSTBACKSDi2015NewLine    { Di2015NewLine        get { return hfPreviousUrl.Value; } Di2015NewLine        set { hfPreviousUrl.Value = value;}Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void Page_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if(!Page.IsPostBack)//THIS PREVENTS THE VALUE FROM BEING RESET ON BUTTON CLICKDi2015NewLine            BackToLastPage = (string)Session["CurrentUrl"];Di2015NewLineDi2015NewLine        int BrugerId = Convert.ToInt32(Session["BrugerId"]);Di2015NewLine        int TeamId = Convert.ToInt32(Request.QueryString["HoldId"]);Di2015NewLineDi2015NewLine        //Resets sessionurl.Di2015NewLine        Session["CurrentUrl"] = null;Di2015NewLineDi2015NewLine        if (Session["brugerId"] != null)Di2015NewLine        {Di2015NewLine            Response.Write("brugerID was not null");Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            //REMOVED FOR TEST PURPOSESDi2015NewLine            //Response.Redirect("Login.aspx");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    protected void BackToLastPageBtn_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        Response.Redirect(BackToLastPage);Di2015NewLine    }Di2015NewLine
21122926Di2015UniqueSeparatorPage.Validate("signup");Di2015NewLineDi2015NewLineif (!Page.IsValid)Di2015NewLine{Di2015NewLine    return;Di2015NewLine}Di2015NewLine
21122947Di2015UniqueSeparatorvoid label1_MouseDown(object sender, MouseEventArgs e) {Di2015NewLine  if (e.Button == MouseButtons.Left) {Di2015NewLine    contextMenuStrip1.Show(label1, e.Location);Di2015NewLine  }Di2015NewLine}Di2015NewLine
21123024Di2015UniqueSeparatorusing System.Text;Di2015NewLine
21123268Di2015UniqueSeparatorPATH
21123268Di2015UniqueSeparatorini
21123268Di2015UniqueSeparatorPATH
21123394Di2015UniqueSeparatorNullable<DateTime>.Value
21123394Di2015UniqueSeparatorDateTime
21123394Di2015UniqueSeparatorreturn DateUpdated.Value.ToString("MMMM dd, yyyy");Di2015NewLine
21123494Di2015UniqueSeparator_waitHandle
21123494Di2015UniqueSeparatorDelete
21123494Di2015UniqueSeparatorpublic void Delete(string id)Di2015NewLine{Di2015NewLine    ManualResetEvent waitHandle = new ManualResetEvent(false);Di2015NewLine    _handlerToServerObj.OnDelete += () => waitHandle.Set();Di2015NewLine    _handlerToServerObj.Delete(id);Di2015NewLine    waitHandle.WaitOne();Di2015NewLine}Di2015NewLine
21123536Di2015UniqueSeparatorpublic class myBLLDi2015NewLine{Di2015NewLine    public static addByID(int ID)Di2015NewLine    {Di2015NewLine        //do some stuffDi2015NewLine        LogString("You have added: {0}", ID);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static removeByID(int ID)Di2015NewLine    {Di2015NewLine        //do some other stuffDi2015NewLine        LogString("You have removed: {0}", ID);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static LogString(string message, int ID)Di2015NewLine    {Di2015NewLine        string myString = "";Di2015NewLineDi2015NewLine        if(ID == 1)Di2015NewLine            myString = "string 1";Di2015NewLine        elseDi2015NewLine            myString = "string 2";Di2015NewLineDi2015NewLine        Console.WriteLine(string.Format(message, myString);Di2015NewLine     }Di2015NewLine}Di2015NewLine
21123536Di2015UniqueSeparatorpublic class MyObjectDi2015NewLine{Di2015NewLine    int ID;Di2015NewLineDi2015NewLine    public GetString()Di2015NewLine    {Di2015NewLine        if(ID == 1)Di2015NewLine            return "string 1";Di2015NewLine        elseDi2015NewLine            return "string 2";Di2015NewLine     }Di2015NewLineDi2015NewLine}Di2015NewLine
21123790Di2015UniqueSeparatorsourcePin
21123790Di2015UniqueSeparatoroutPin
21123927Di2015UniqueSeparatorThumb
21123927Di2015UniqueSeparatorRotateTransform
21123927Di2015UniqueSeparatorTextBox
21123927Di2015UniqueSeparatorThumb.RenderTransform
21123927Di2015UniqueSeparator<UserControl x:Class="Test.RotatableUserControl"Di2015NewLine         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine         xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" Di2015NewLine         xmlns:d="http://schemas.microsoft.com/expression/blend/2008" Di2015NewLine         mc:Ignorable="d" Di2015NewLine         d:DesignHeight="300" d:DesignWidth="300">Di2015NewLine<Grid>Di2015NewLine    <Thumb DragDelta="OnDragDelta" DragCompleted="OnDragCompleted" DragStarted="OnDragStarted">Di2015NewLine        <Thumb.Template>Di2015NewLine            <ControlTemplate TargetType="Thumb">Di2015NewLine                <Border Padding="5" Background="DarkGray" Cursor="ScrollAll">Di2015NewLine                    <TextBox  Text="hello" />Di2015NewLine                </Border>Di2015NewLine            </ControlTemplate>Di2015NewLine        </Thumb.Template>Di2015NewLine    </Thumb>Di2015NewLine</Grid>Di2015NewLine</UserControl>Di2015NewLine
21123927Di2015UniqueSeparatorpublic partial class RotatableUserControl : UserControlDi2015NewLine{Di2015NewLine    private Point _center;Di2015NewLineDi2015NewLine    public RotatableUserControl()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void OnDragStarted(object sender, DragStartedEventArgs e)Di2015NewLine    {Di2015NewLine        var thumb = (Thumb)sender;Di2015NewLine        _center = new Point(thumb.ActualWidth/2, thumb.ActualHeight/2);Di2015NewLine        thumb.RenderTransform = (thumb.RenderTransform as RotateTransform) ?? new RotateTransform(0, _center.X, _center.Y);Di2015NewLine    }Di2015NewLine    public void OnDragDelta(object sender, DragDeltaEventArgs e)Di2015NewLine    {Di2015NewLine        var thumb = (Thumb)sender;Di2015NewLine        var pos = Mouse.GetPosition(thumb);Di2015NewLine        var rotate = (RotateTransform)thumb.RenderTransform;Di2015NewLine        double angle = Math.Atan((pos.X-_center.X) / (pos.Y-_center.Y));Di2015NewLine        rotate.Angle += angle;Di2015NewLine    }Di2015NewLine    public void OnDragCompleted(object sender, DragCompletedEventArgs e)Di2015NewLine    {Di2015NewLine        var thumb = (Thumb)sender;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21123940Di2015UniqueSeparatorMailAddress
21123940Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    var test = new MailAddress("");Di2015NewLine}Di2015NewLinecatch (FormatException ex)Di2015NewLine{Di2015NewLine    // wrong format for emailDi2015NewLine}Di2015NewLine
21124020Di2015UniqueSeparatorCharSet.Ansi
21124020Di2015UniqueSeparatorstring
21124083Di2015UniqueSeparator  FormsAuthentication.SetAuthCookie(User.Identity.Name.ToString(), false);Di2015NewLine
21124083Di2015UniqueSeparator    protected void btnLogin_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        if ( username_password_pair_is_correct ) Di2015NewLine           FormsAuthentication.SetAuthCookie(User.Identity.Name.ToString(), false);Di2015NewLine    }Di2015NewLine
21124140Di2015UniqueSeparatorSource
21124140Di2015UniqueSeparatorBinding
21124140Di2015UniqueSeparatorPath
21124140Di2015UniqueSeparatorPath
21124140Di2015UniqueSeparator<ListView ItemsSource="{Binding history}"  ...>Di2015NewLine
21124140Di2015UniqueSeparatorhistory
21124140Di2015UniqueSeparatorreadonly
21124223Di2015UniqueSeparatorfor
21124223Di2015UniqueSeparatorp = p.getNext()
21124223Di2015UniqueSeparatorp.getNext()
21124223Di2015UniqueSeparatorgetNext
21124223Di2015UniqueSeparatorp
21124223Di2015UniqueSeparatorfor (IntNode p = _head; p.getNext() != null; p = p.getNext()) { }Di2015NewLine
21124223Di2015UniqueSeparator_head
21124223Di2015UniqueSeparatorp
21124223Di2015UniqueSeparatorIntNode p = _head;Di2015NewLinewhile (p.getNext() != null) { Di2015NewLine  p = p.getNext();Di2015NewLine}Di2015NewLinep.setNext(node);Di2015NewLine
21124265Di2015UniqueSeparator<DataTemplate DataType="{x:Type local:Task}">Di2015NewLine  <StackPanel>Di2015NewLine    <TextBlock Text="{Binding Path=TaskName}" />Di2015NewLine    <TextBlock Text="{Binding Path=Description}"/>Di2015NewLine    <TextBlock Text="{Binding Path=Priority}"/>Di2015NewLine  </StackPanel>Di2015NewLine</DataTemplate>Di2015NewLine
21124294Di2015UniqueSeparatorvar img = await ArticleStorage.GetLocalImageAsync(src);Di2015NewLineimg = await ArticleStorage.ResizeAndCompressLocalImage(img);Di2015NewLine
21124294Di2015UniqueSeparatorpublic const string CachedImagesFolderFullPath = "ms-appdata:///local/cache/";Di2015NewLinepublic const string CachedImagesFolderEndFolderPath = "cache";Di2015NewLinepublic const string OfflinePhotoImgPath = "ms-appx:///Assets/OfflinePhoto.png";Di2015NewLinepublic const int MaximumColumnWidth = 700;Di2015NewLineDi2015NewLinepublic static async Task<string> GetLocalImageAsync(string internetUri)Di2015NewLine{Di2015NewLine    if (string.IsNullOrEmpty(internetUri))Di2015NewLine    {Di2015NewLine        return null;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Show default image if local folder does not existDi2015NewLine    var localFolder = ApplicationData.Current.LocalFolder;Di2015NewLine    if (localFolder == null)Di2015NewLine    {Di2015NewLine        return OfflinePhotoImgPath;Di2015NewLine    }Di2015NewLineDi2015NewLine    // Default to offline photoDi2015NewLine    string src = OfflinePhotoImgPath;Di2015NewLineDi2015NewLine    tryDi2015NewLine    {Di2015NewLine        using (var response = await HttpWebRequest.CreateHttp(internetUri)Di2015NewLine                                                  .GetResponseAsync())Di2015NewLine        {Di2015NewLine            using (var stream = response.GetResponseStream())Di2015NewLine            {Di2015NewLine                // New random filename (e.g. x53fjtje.jpg)Di2015NewLine                string fileName = string.Format("{0}.jpg",Di2015NewLine                    Path.GetFileNameWithoutExtension(Path.GetRandomFileName()));Di2015NewLineDi2015NewLine                var imageFolder = await localFolder.CreateFolderAsync(Di2015NewLine                    CachedImagesFolderEndFolderPath, Di2015NewLine                    CreationCollisionOption.OpenIfExists);Di2015NewLineDi2015NewLine                var file = await imageFolder.CreateFileAsync(fileName, Di2015NewLine                    CreationCollisionOption.ReplaceExisting);Di2015NewLineDi2015NewLine                // Copy bytes from stream to local file Di2015NewLine                // without changing any file informationDi2015NewLine                using (var filestream = await file.OpenStreamForWriteAsync())Di2015NewLine                {Di2015NewLine                    await stream.CopyToAsync(filestream);Di2015NewLineDi2015NewLine                    // Send back the local path to the image Di2015NewLine                    // (including 'ms-appdata:///local/cache/')Di2015NewLine                    return string.Format(CachedImagesFolderFullPath + "{0}", Di2015NewLine                         fileName);Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    catch (Exception)Di2015NewLine    {Di2015NewLine        // Is implicitly handled with the setting Di2015NewLine        // of the initilized value of srcDi2015NewLine    }Di2015NewLineDi2015NewLine    // If not succesfull, return the default offline imageDi2015NewLine    return src;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static async Task<string> ResizeAndCompressLocalImage(string imgSrc)Di2015NewLine{Di2015NewLine    // Remove 'ms-appdata:///local/cache/' from the path ... Di2015NewLine    string sourcepathShort = imgSrc.Replace(Di2015NewLine                                 CachedImagesFolderFullPath,Di2015NewLine                                 string.Empty);Di2015NewLineDi2015NewLine    // Get the cached images folderDi2015NewLine    var folder = await ApplicationData.CurrentDi2015NewLine                          .LocalFolderDi2015NewLine                          .GetFolderAsync(Di2015NewLine                               CachedImagesFolderEndFolderPath);Di2015NewLineDi2015NewLine    // Get a new random name (e.g. '555jkdhr5.jpg')Di2015NewLine    var targetPath = string.Format("{0}.jpg",Di2015NewLine                          Path.GetFileNameWithoutExtension(Di2015NewLine                              Path.GetRandomFileName()));Di2015NewLineDi2015NewLine    // Retrieve source and create target fileDi2015NewLine    var sourceFile = await folder.GetFileAsync(sourcepathShort);Di2015NewLine    var targetFile = await folder.CreateFileAsync(targetPath);Di2015NewLineDi2015NewLine    using (var sourceFileStream = await sourceFile.OpenAsync(Di2015NewLine                   Windows.Storage.FileAccessMode.Read))Di2015NewLine    {Di2015NewLine        using (var destFileStream = await targetFile.OpenAsync(Di2015NewLine                   FileAccessMode.ReadWrite))Di2015NewLine        {Di2015NewLine            // Prepare decoding of the source imageDi2015NewLine            BitmapDecoder decoder = await BitmapDecoder.CreateAsync(Di2015NewLine                                              sourceFileStream);Di2015NewLineDi2015NewLine            // Find out if image needs resizingDi2015NewLine            double proportionWidth = (double)decoder.PixelWidth /Di2015NewLine                                     LayoutDimensions.MaximumColumnWidth;Di2015NewLineDi2015NewLine            double proportionImage = decoder.PixelHeight / Di2015NewLine                                     (double)decoder.PixelWidth;Di2015NewLineDi2015NewLine            // Get the new sizes of the image whether it is the same or should be resizedDi2015NewLine            var newWidth = proportionWidth > 1 ? Di2015NewLine                           (uint)(MaximumColumnWidth) : Di2015NewLine                           decoder.PixelWidth;Di2015NewLineDi2015NewLine            var newHeight = proportionWidth > 1 ? Di2015NewLine                            (uint)(MaximumColumnWidth * proportionImage) : Di2015NewLine                            decoder.PixelHeight;Di2015NewLineDi2015NewLine            // Prepare set of properties for the bitmapDi2015NewLine            BitmapPropertySet propertySet = new BitmapPropertySet();Di2015NewLineDi2015NewLine            // Set ImageQualityDi2015NewLine            BitmapTypedValue qualityValue = new BitmapTypedValue(0.75, Di2015NewLine                                                    PropertyType.Single);Di2015NewLine            propertySet.Add("ImageQuality", qualityValue);Di2015NewLineDi2015NewLine            //BitmapEncoder enc = await BitmapEncoder.CreateForTranscodingAsync(Di2015NewLine                                            destFileStream, decoder);Di2015NewLine            BitmapEncoder enc = await BitmapEncoder.CreateAsync(Di2015NewLine                                          BitmapEncoder.JpegEncoderId, Di2015NewLine                                          destFileStream, propertySet);Di2015NewLineDi2015NewLine            // Set the new dimensionsDi2015NewLine            enc.BitmapTransform.ScaledHeight = newHeight;Di2015NewLine            enc.BitmapTransform.ScaledWidth = newWidth;Di2015NewLineDi2015NewLine            // Get image data from the source imageDi2015NewLine            PixelDataProvider pixelData = await decoder.GetPixelDataAsync();Di2015NewLineDi2015NewLine            // Copy in all pixel data from source to targetDi2015NewLine            enc.SetPixelData(Di2015NewLine                decoder.BitmapPixelFormat,Di2015NewLine                decoder.BitmapAlphaMode,Di2015NewLine                decoder.PixelWidth, Di2015NewLine                decoder.PixelHeight, Di2015NewLine                decoder.DpiX, Di2015NewLine                decoder.DpiY, Di2015NewLine                pixelData.DetachPixelData()Di2015NewLine                );Di2015NewLineDi2015NewLine            // Make the encoder process the imageDi2015NewLine            await enc.FlushAsync();Di2015NewLineDi2015NewLine            // Write everything to the filestream Di2015NewLine            await destFileStream.FlushAsync();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    tryDi2015NewLine    {Di2015NewLine        // Delete the source fileDi2015NewLine        await sourceFile.DeleteAsync();Di2015NewLine    }Di2015NewLine    catch(Exception)Di2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    // Return the new path Di2015NewLine    // including "ms-appdata:///local/cache/"Di2015NewLine    return string.Format(CachedImagesFolderFullPath + "{0}", Di2015NewLine         targetPath);Di2015NewLine}Di2015NewLine
21124702Di2015UniqueSeparatorget {Di2015NewLine    return items.Select(x => x.UserItem).ToList();Di2015NewLine}Di2015NewLine
21124702Di2015UniqueSeparatorSelect
21124702Di2015UniqueSeparatorUserItem
21124702Di2015UniqueSeparatoritems
21125331Di2015UniqueSeparatorlist2
21125331Di2015UniqueSeparatorlist1
21125331Di2015UniqueSeparatorlist2
21125331Di2015UniqueSeparatorfirst
21125331Di2015UniqueSeparatorIEnumerable<T>
21125419Di2015UniqueSeparatorConsole.WriteLine(Di2015NewLine
21125419Di2015UniqueSeparatorResponse.Write(string.Format(Di2015NewLine
21125700Di2015UniqueSeparatorpublic class EmploymentApplication : INotifyPropertyChangedDi2015NewLine{Di2015NewLine    private byte appType = 0; // 1 = normal; 2 = expeditedDi2015NewLineDi2015NewLine    public byte AppTypeDi2015NewLine    {Di2015NewLine        get { return appType; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            appType = value;Di2015NewLine            OnPropertyChanged("AppType");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine    void OnPropertyChanged(string propName)Di2015NewLine    {Di2015NewLine        if (PropertyChanged != null)Di2015NewLine            PropertyChanged(this, new PropertyChangedEventArgs(propName));Di2015NewLine    } Di2015NewLine}Di2015NewLine
21125700Di2015UniqueSeparatorpublic class AppTypeConverter : IValueConverterDi2015NewLine{Di2015NewLine    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)Di2015NewLine    {Di2015NewLine        var b = (byte)value;Di2015NewLine        if (b == 1) return "Normal";Di2015NewLine        if (b == 2) return "Expedited";Di2015NewLine        return string.Empty;Di2015NewLine    }Di2015NewLineDi2015NewLine    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)Di2015NewLine    {Di2015NewLine        var strValue = (string) value;Di2015NewLine        byte result = 0;Di2015NewLine        if (strValue.Equals("Normal", StringComparison.Ordinal))Di2015NewLine        {Di2015NewLine            result = 1;Di2015NewLine        }Di2015NewLine        else if (strValue.Equals("Expedited", StringComparison.OrdinalIgnoreCase))Di2015NewLine        {Di2015NewLine            result = 2;Di2015NewLine        }Di2015NewLine        return result;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21125700Di2015UniqueSeparatorpublic partial class MainWindow : WindowDi2015NewLine{Di2015NewLine    public MainWindow()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        DataContext = new EmploymentApplication();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21125700Di2015UniqueSeparator<Window x:Class="WpfConvertion.MainWindow"Di2015NewLine    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine    xmlns:local="clr-namespace:WpfConvertion"Di2015NewLine    Title="MainWindow" Height="350" Width="525">Di2015NewLine<Window.Resources>Di2015NewLine    <local:AppTypeConverter x:Key="Converter"></local:AppTypeConverter>Di2015NewLine</Window.Resources>Di2015NewLine<Grid>Di2015NewLine    <ComboBox Height="20" SelectedValue="{Binding AppType, Converter={StaticResource Converter}}" SelectedValuePath="Content">Di2015NewLine        <ComboBoxItem>Normal</ComboBoxItem>Di2015NewLine        <ComboBoxItem>Expedited</ComboBoxItem>Di2015NewLine    </ComboBox>Di2015NewLine</Grid>Di2015NewLine
21125810Di2015UniqueSeparatornull
21125810Di2015UniqueSeparatorvar entity = platypi.Find(p => p.Id == id);Di2015NewLineDi2015NewLinereturn entity == null ? string.Empty : entity.Name;Di2015NewLine
21125810Di2015UniqueSeparatorFind
21125810Di2015UniqueSeparatorFind
21125923Di2015UniqueSeparator<ResultCode i:nil=\\"true\\"/>Di2015NewLine
21125923Di2015UniqueSeparator<ResultCode />Di2015NewLine
21125923Di2015UniqueSeparator[DataContract(Namespace = "")]Di2015NewLine
21125949Di2015UniqueSeparator<dependentAssembly>Di2015NewLine    <assemblyIdentity name="someAssembly"Di2015NewLine      publicKeyToken="32ab4ba45e0a69a1"Di2015NewLine      culture="en-us" />Di2015NewLineDi2015NewLine    <bindingRedirect oldVersion="7.0.0.0" newVersion="8.0.0.0" />Di2015NewLine</dependentAssembly>Di2015NewLine
21125975Di2015UniqueSeparatorDataRange
21125975Di2015UniqueSeparatorUpdateColormapped()
21125975Di2015UniqueSeparatorTuple<float,float>
21125975Di2015UniqueSeparatorILSurface
21125975Di2015UniqueSeparatorPadding
21125975Di2015UniqueSeparatorprivate void ilPanel1_Load(object sender, EventArgs e) {Di2015NewLine    var scene = new ILScene();Di2015NewLine    // add a new plot cube Di2015NewLine    var pc = scene.Add(new ILPlotCube(twoDMode:false));Di2015NewLineDi2015NewLine    // Create DataDi2015NewLine    ILArray<float> A = ILSpecialData.torus(0.75f, .25f);Di2015NewLine    ILArray<float> B = ILSpecialData.torus(3.0f, .65f);Di2015NewLine    // Add the surfacesDi2015NewLine    var cdr = Tuple.Create<float,float>(-0.6f, 0.6f);  Di2015NewLine    var sf1 = new ILSurface(0);Di2015NewLine    var sf2 = new ILSurface(0);Di2015NewLine    // provide the same datarange to both surfacesDi2015NewLine    sf1.UpdateColormapped(A, dataRange: cdr);Di2015NewLine    sf2.UpdateColormapped(B, dataRange: cdr);Di2015NewLineDi2015NewLine    pc.Add(sf1);Di2015NewLine    pc.Add(sf2);Di2015NewLine    sf1.Colormap = Colormaps.Jet;Di2015NewLine    sf2.Colormap = Colormaps.Jet;Di2015NewLineDi2015NewLine    var cb = new ILColorbar() {Di2015NewLine        Padding = new SizeF(10,30),Di2015NewLine        Children = {Di2015NewLine            new ILLabel("Title") {Di2015NewLine                Position = new Vector3(.5f,.1f,0),Di2015NewLine                Anchor = new PointF(.5f,.7f),Di2015NewLine                Font = new Font(DefaultFont, FontStyle.Bold)Di2015NewLine            },Di2015NewLine            new ILLabel("Label") {Di2015NewLine                Position = new Vector3(.12f,.5f,0),Di2015NewLine                Rotation = -Math.PI / 2,Di2015NewLine            }Di2015NewLine        }Di2015NewLine    };Di2015NewLine    sf1.Add(cb);Di2015NewLine    ilPanel1.Scene = scene;Di2015NewLine}Di2015NewLine
21125975Di2015UniqueSeparatorscene.Camera
21126103Di2015UniqueSeparatorvar re = new Regex(" [a-z]{3} ");Di2015NewLinevar matches = re.Matches("Alice has a cat ");Di2015NewLineforeach(Match m in matches)Di2015NewLine{Di2015NewLine    Console.WriteLine(m.Value);Di2015NewLine}Di2015NewLine
21126103Di2015UniqueSeparatorRegex
21126103Di2015UniqueSeparatorvar matches = Regex.Matches("Alice has a cat ", " [a-z]{3} ");Di2015NewLineforeach(Match m in matches)Di2015NewLine{Di2015NewLine    Console.WriteLine(m.Value);Di2015NewLine}Di2015NewLine
21126149Di2015UniqueSeparatorstring lidID;
21126149Di2015UniqueSeparatorstring lidID = "";
21126149Di2015UniqueSeparatorbool reserveerStatus;
21126149Di2015UniqueSeparatorbool reserveerStatus = false;
21126173Di2015UniqueSeparator   private void button1_Click(object sender, EventArgs e)Di2015NewLine   {Di2015NewLine        int l;Di2015NewLine        int w;Di2015NewLine        int h;Di2015NewLine        int paint;Di2015NewLine        int answer;Di2015NewLineDi2015NewLine        l = int.Parse(LengthtextBox.Text);Di2015NewLine        w = int.Parse(WidthtextBox.Text);Di2015NewLine        h = int.Parse(HeighttextBox.Text);Di2015NewLine        paint = 350;Di2015NewLineDi2015NewLine        answer = (l * w * h) / paint;Di2015NewLineDi2015NewLine         MessageBox.Show( answer.ToString() );Di2015NewLine    }Di2015NewLine
21126173Di2015UniqueSeparatorTryParse
21126173Di2015UniqueSeparator  int l;Di2015NewLine  if(!Int32.TryParse(LengthtextBox.Text, out l))Di2015NewLine  {Di2015NewLine       MessageBox.Show("Please type a valid number for Length");Di2015NewLine       return;Di2015NewLine  }Di2015NewLine
21126279Di2015UniqueSeparatorForeground="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}}"Di2015NewLine
21126655Di2015UniqueSeparator<phone:PivotItem Header = "21.jpg" />Di2015NewLine
21126655Di2015UniqueSeparatorHeaderTemplate
21126668Di2015UniqueSeparatorMatchCollection
21126668Di2015UniqueSeparatorMatch
21126668Di2015UniqueSeparatorvar match = reg.Match("fjasij 1234 gdsgds");Di2015NewLine
21126842Di2015UniqueSeparatorstatic class ExtensionsDi2015NewLine{Di2015NewLine    public static bool IsNull<T>(this T obj) where T : classDi2015NewLine    {Di2015NewLine        return obj == null;Di2015NewLine    }Di2015NewLineDi2015NewLine    public static bool IsNull<T>(this T? obj) where T : structDi2015NewLine    {Di2015NewLine        return !obj.HasValue;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21127057Di2015UniqueSeparatoroGizmo
21127057Di2015UniqueSeparatordoSomethingWith
21127057Di2015UniqueSeparatorWindows Runtime Object
21127057Di2015UniqueSeparatorMarshalAs(UnmanagedType.IUnknown)
21127057Di2015UniqueSeparatorGiveMeAGizmo()
21127057Di2015UniqueSeparatorGizmo
21127057Di2015UniqueSeparatordoSomethingWith
21127057Di2015UniqueSeparator[ComVisible(true), ClassInterface(ClassInterfaceType.AutoDispatch)]Di2015NewLinepublic class ObjectForScriptingDi2015NewLine{Di2015NewLine    [return: MarshalAs(UnmanagedType.IUnknown)]Di2015NewLine    public object GiveMeAGizmo()Di2015NewLine    {Di2015NewLine        return new Gizmo();Di2015NewLine    }Di2015NewLineDi2015NewLine    public object GiveMeAGizmoUser()Di2015NewLine    {Di2015NewLine        return new GizmoUser();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21127057Di2015UniqueSeparatorUnmanagedType.IDispatch
21127057Di2015UniqueSeparatorUnmanagedType.Struct
21127057Di2015UniqueSeparatorVARIANT
21127057Di2015UniqueSeparatorgizmo1
21127057Di2015UniqueSeparatorgizmo2
21127057Di2015UniqueSeparator// pass a Gizmo object to JavaScriptDi2015NewLinethis.webBrowser.Document.InvokeScript("SetGizmo", new Object[] { new Gizmo()});Di2015NewLineDi2015NewLine// get it back, this worksDi2015NewLinevar gizmo1 = (Gizmo)this.webBrowser.Document.InvokeScript("GetGizmo");Di2015NewLineDi2015NewLine// get a new Gizmo, via window.external.GiveMeAGizmo()Di2015NewLine// this failsDi2015NewLinevar gizmo2 = (Gizmo)this.webBrowser.Document.InvokeScript("GetGizmo2");Di2015NewLine
21127057Di2015UniqueSeparatorvar _gizmo;Di2015NewLineDi2015NewLinefunction SetGizmo(gizmo) { _gizmo = gizmo; }Di2015NewLineDi2015NewLinefunction GetGizmo() { return _gizmo; }Di2015NewLineDi2015NewLinefunction GetGizmo2() { return window.external.GiveMeAGizmo(); }Di2015NewLine
21127057Di2015UniqueSeparatorWebBrowser.ObjectForScripting
21127169Di2015UniqueSeparatorif (Session["previouslySelected"] != null && Session["previouslySelected"].ToString() != "-1")Di2015NewLine        {Di2015NewLine            decimal CompraTotal2 = 0;Di2015NewLine            MySqlConnection connection = new MySqlConnection(GlobalVars.mysql);Di2015NewLine            connection.Open();Di2015NewLineDi2015NewLine        MySqlCommand command = connection.CreateCommand();Di2015NewLine        command.CommandText = "QUERY";Di2015NewLine        command.Parameters.AddWithValue("?GUID", Session["GUID"]);Di2015NewLine        command.Parameters.AddWithValue("?Nombre", Session["previouslySelected"].ToString());Di2015NewLine        MySqlDataReader reader = command.ExecuteReader();Di2015NewLine        decimal Precio = 0;Di2015NewLine        while (reader.Read())Di2015NewLine        {Di2015NewLine            // reader.GetString(0);Di2015NewLine            Precio = Convert.ToDecimal(reader["Precio"]);Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        CompraTotal2 = Convert.ToDecimal(Session["CompraTotal"]);Di2015NewLine        CompraTotal2 = Precio - CompraTotal2;Di2015NewLine        Session["CompraTotal"] = CompraTotal2;Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    if (CheckBoxList1.SelectedIndex != -1)Di2015NewLine    {Di2015NewLine        decimal CompraTotal = 0;Di2015NewLine        MySqlConnection connection = new MySqlConnection(GlobalVars.mysql);Di2015NewLine        connection.Open();Di2015NewLineDi2015NewLine        MySqlCommand command = connection.CreateCommand();Di2015NewLine        command.CommandText = "QUERY";Di2015NewLine        command.Parameters.AddWithValue("?GUID", Session["GUID"]);Di2015NewLine        command.Parameters.AddWithValue("?Nombre", CheckBoxList1.SelectedValue);Di2015NewLine        MySqlDataReader reader = command.ExecuteReader();Di2015NewLine        decimal Precio = 0;Di2015NewLine        int i = 0;Di2015NewLine        while (reader.Read())Di2015NewLine        {Di2015NewLine            // reader.GetString(0);Di2015NewLine            Precio = Convert.ToDecimal(reader["Precio"]);Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine        CompraTotal = Convert.ToDecimal(Session["CompraTotal"]);Di2015NewLine        CompraTotal = CompraTotal + Precio;Di2015NewLine        Session["CompraTotal"] = CompraTotal;Di2015NewLine    }Di2015NewLineDi2015NewLine    Session["previouslySelected"] = CheckBoxList1.SelectedIndex;Di2015NewLine    Label3.Text = Convert.ToString(Session["CompraTotal"]);Di2015NewLineDi2015NewLineDi2015NewLine    }Di2015NewLine
21127175Di2015UniqueSeparatorclient.GetAsync()
21127175Di2015UniqueSeparatorclient _Di2015NewLine   .GetAsync("api/products/2") _Di2015NewLine   .ContinueWith( _Di2015NewLine       Sub(t As Task(Of HttpResponseMessage))Di2015NewLine           ...Di2015NewLine       End Sub, _Di2015NewLine       TaskScheduler.FromCurrentSynchronizationContext())Di2015NewLine
21127345Di2015UniqueSeparatorstring xmlString = @"<organization>Di2015NewLine                           <metadata>Di2015NewLine                           </metadata>Di2015NewLine                           <main>Di2015NewLine                             <otherInfo>Di2015NewLine                             </otherInfo>Di2015NewLine                             <employeeInfo>Di2015NewLine                              <employees>Di2015NewLine                                <employee>Di2015NewLine                                   <id>1</id>Di2015NewLine                                   <name>ABC</name>Di2015NewLine                                </employee>Di2015NewLine                                <employee>Di2015NewLine                                   <id>2</id>Di2015NewLine                                   <name>ASE</name>Di2015NewLine                                </employee>Di2015NewLine                                <employee>Di2015NewLine                                   <id>3</id>Di2015NewLine                                   <name>XYZ</name>Di2015NewLine                                </employee>Di2015NewLine                              </employees>Di2015NewLine                             </employeeInfo>Di2015NewLine                            </main>Di2015NewLine                        </organization>";Di2015NewLineDi2015NewLine        XDocument xDoc = XDocument.Parse(xmlString);Di2015NewLine        var allEmployees = from d in xDoc.Descendants("employeeInfo")Di2015NewLine           from ms in d.Elements("employees")                                   Di2015NewLine           from m in ms.Elements("employee")Di2015NewLine           select m;Di2015NewLineDi2015NewLine        foreach (var emp in allEmployees) {Di2015NewLine            Console.WriteLine(emp);Di2015NewLine        }Di2015NewLine        Console.Read();Di2015NewLine
21127522Di2015UniqueSeparatorWinForms
21127522Di2015UniqueSeparatorWPF
21127522Di2015UniqueSeparatorWinForms
21127522Di2015UniqueSeparatorWPF
21127522Di2015UniqueSeparator<Window x:Class="SampleWpf.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        xmlns:l="clr-namespace:SampleWpf"Di2015NewLine        Title="MainWindow" Height="250" Width="400" >Di2015NewLine    <Window.Background>Di2015NewLine        <ImageBrush ImageSource="images.jpg" />Di2015NewLine    </Window.Background>Di2015NewLine    <Grid>Di2015NewLine        <TextBox Margin="5" Background="Transparent" Text="HELLO THERE!"Di2015NewLine                 FontSize="20" FontWeight="Bold" Foreground="White" />Di2015NewLine    </Grid>Di2015NewLine</Window>Di2015NewLine
21127619Di2015UniqueSeparatortoggleRunningMenuItem.Header = "Pause";Di2015NewLine
21127619Di2015UniqueSeparatorprivate void ToggleRunningStatus(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    var menuItem = (MenuItem)e.OriginalSource;Di2015NewLine    menuItem.Header = "Pause";Di2015NewLine}Di2015NewLine
21127689Di2015UniqueSeparatorObservableCollection<T>
21127689Di2015UniqueSeparatorvar observableCollection = new ObservableCollection<string>();Di2015NewLineobservableCollection.CollectionChanged += (s, e) => Di2015NewLine    {Di2015NewLine        doStuff();Di2015NewLine    }Di2015NewLineDi2015NewLineclass ADi2015NewLine{Di2015NewLine     public static ObservableCollection<A> list = new ObservableCollection<A>();Di2015NewLine}Di2015NewLineDi2015NewLineclass BDi2015NewLine{Di2015NewLine    public void StartListening()Di2015NewLine    {Di2015NewLine        A.list.CollectionChanged += collectionSizeChanged;Di2015NewLine    }Di2015NewLine    public void StopListening()Di2015NewLine    {Di2015NewLine        A.list.CollectionChanged -= collectionSizeChanged;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void collectionSizeChange(object sender, NotifyCollectionChangedEventArgs eventArgs)Di2015NewLine    {Di2015NewLine        doStuff();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21127985Di2015UniqueSeparatorSignature
21127985Di2015UniqueSeparatorWhen
21127985Di2015UniqueSeparatorDateTimeOffset
21127985Di2015UniqueSeparatorcom.Author.WhenDi2015NewLine
21128113Di2015UniqueSeparator<asp:Panel ID="LoggedInPanel" runat="server" visible="False">Di2015NewLine    <asp:Literal ID="UserLoggedInName" runat="server" />Di2015NewLine    - <asp:HyperLink ID="LogOutLink" runat="server">Log out</asp:HyperLink>Di2015NewLine</asp:Label>Di2015NewLine
21128113Di2015UniqueSeparatorLoggedInPanel.Visible = isUserLoggedIn;    Di2015NewLineif (isUserLoggedIn)Di2015NewLine        {Di2015NewLine            UserLoggedInName.Text = String.Format("Logged in as: {0}",AuthHelper.getUserLoggedIn(Session).ToString());Di2015NewLine// Set the logout URL here.Di2015NewLine        }Di2015NewLine
21128295Di2015UniqueSeparatorHttpListener
21128295Di2015UniqueSeparatorListener.Prefixes.Add("http://+:3070/")
21128295Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Net;Di2015NewLineusing System.Text;Di2015NewLineDi2015NewLinenamespace TestServerDi2015NewLine{Di2015NewLine    class ServerMainDi2015NewLine    {Di2015NewLine        // To enable this so that it can be run in a non-administrator account:Di2015NewLine        // Open an Administrator command prompt.Di2015NewLine        // netsh http add urlacl http://+:8008/ user=Everyone listen=trueDi2015NewLineDi2015NewLine        const string Prefix = "http://+:3070/";Di2015NewLine        static HttpListener Listener = null;Di2015NewLine        static int RequestNumber = 0;Di2015NewLine        static readonly DateTime StartupDate = DateTime.UtcNow;Di2015NewLineDi2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            if (!HttpListener.IsSupported)Di2015NewLine            {Di2015NewLine                Console.WriteLine("HttpListener is not supported on this platform.");Di2015NewLine                return;Di2015NewLine            }Di2015NewLine            using (Listener = new HttpListener())Di2015NewLine            {Di2015NewLine                Listener.Prefixes.Add(Prefix);Di2015NewLine                Listener.Start();Di2015NewLine                // Begin waiting for requests.Di2015NewLine                Listener.BeginGetContext(GetContextCallback, null);Di2015NewLine                Console.WriteLine("Listening. Press Enter to stop.");Di2015NewLine                Console.ReadLine();Di2015NewLine                Listener.Stop();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        static void GetContextCallback(IAsyncResult ar)Di2015NewLine        {Di2015NewLine            int req = ++RequestNumber;Di2015NewLineDi2015NewLine            // Get the contextDi2015NewLine            var context = Listener.EndGetContext(ar);Di2015NewLineDi2015NewLine            // listen for the next requestDi2015NewLine            Listener.BeginGetContext(GetContextCallback, null);Di2015NewLineDi2015NewLine            // get the requestDi2015NewLine            var NowTime = DateTime.UtcNow;Di2015NewLineDi2015NewLine            Console.WriteLine("{0}: {1}", NowTime.ToString("R"), context.Request.RawUrl);Di2015NewLineDi2015NewLine            var responseString = string.Format("<html><body>Your request, \\"{0}\\", was received at {1}.<br/>It is request #{2:N0} since {3}.",Di2015NewLine                context.Request.RawUrl, NowTime.ToString("R"), req, StartupDate.ToString("R"));Di2015NewLineDi2015NewLine            byte[] buffer = Encoding.UTF8.GetBytes(responseString);Di2015NewLine            // and send itDi2015NewLine            var response = context.Response;Di2015NewLine            response.ContentType = "text/html";Di2015NewLine            response.ContentLength64 = buffer.Length;Di2015NewLine            response.StatusCode = 200;Di2015NewLine            response.OutputStream.Write(buffer, 0, buffer.Length);Di2015NewLine            response.OutputStream.Close();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21128360Di2015UniqueSeparatorRectangle rect = new Rectangle { Width = w, Height = h, Fill = Brushes.Black };Di2015NewLine
21128360Di2015UniqueSeparatorCanvas.SetLeft(rect, x);Di2015NewLineCanvas.SetTop(rect, y);Di2015NewLinec.Children.Add(rect);Di2015NewLine
21128360Di2015UniqueSeparatornamespace MyExtensionMethodsDi2015NewLine{Di2015NewLine    public static class CanvasExtensionsDi2015NewLine    {Di2015NewLine        public static int AddChild(this Canvas canvas, UIElement element, int x, int y)Di2015NewLine        {Di2015NewLine            Canvas.SetLeft(element, x);Di2015NewLine            Canvas.SetTop(element, y);Di2015NewLine            return canvas.Children.Add(element);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21128360Di2015UniqueSeparatorusing MyExtensionMethods;Di2015NewLine
21128360Di2015UniqueSeparatorRectangle rect = new Rectangle { Width = w, Height = h, Fill = Brushes.Black };Di2015NewLinec.AddChild(rect, x, y);Di2015NewLine
21128459Di2015UniqueSeparator int value = 123;Di2015NewLine fail objfail = new fail();Di2015NewLine var t = new Thread(() => objfail.DoWork(value));Di2015NewLine t.Start();Di2015NewLine
21128465Di2015UniqueSeparatorList<string> strings = new List<string>() { "2014-01-14" };Di2015NewLineDi2015NewLineList<DateTime> dates = strings.Select(date => DateTime.Parse(date)).ToList();Di2015NewLine
21128569Di2015UniqueSeparatorcollectionName.Last()
21128569Di2015UniqueSeparatorcollectionName[4]
21128570Di2015UniqueSeparatoriEnum4
21128570Di2015UniqueSeparatorexampleArray.Skip(1).Take(5).Skip(1).Take(2)
21128570Di2015UniqueSeparatorCount
21128570Di2015UniqueSeparatorint count
21128570Di2015UniqueSeparatoriEnum3
21128570Di2015UniqueSeparatoriEnum3.Count()
21128570Di2015UniqueSeparatoriEnum4.Count()
21128570Di2015UniqueSeparatoriEnum3.Count()
21128570Di2015UniqueSeparatorexampleArray
21128825Di2015UniqueSeparator        var actions = new Dictionary<string, Func<MenuItem, RoutedEventHandler>>()Di2015NewLine        {Di2015NewLine            { "New", mi => (s, e) => { MessageBox.Show("New File Created."); }},Di2015NewLine            { "Open", mi => (s, e) => { MessageBox.Show("File Opened."); }},Di2015NewLine            { "Save", mi => (s, e) => { MessageBox.Show("File Saved."); }},Di2015NewLine        };Di2015NewLineDi2015NewLine        foreach (MenuItem mi in FileMenu.Items)Di2015NewLine        {Di2015NewLine            if (actions.ContainsKey(mi.Name))Di2015NewLine            {Di2015NewLine                mi.Click += actions[mi.Name](mi);Di2015NewLine            }Di2015NewLine        }Di2015NewLine
21128825Di2015UniqueSeparator            {Di2015NewLine                "New",Di2015NewLine                mi =>Di2015NewLine                    (s, e) =>Di2015NewLine                    {Di2015NewLine                        MessageBox.Show("New File Created.");Di2015NewLine                        MessageBox.Show(Di2015NewLine                            String.Format("You clicked the {0} menu.", mi.Name));Di2015NewLine                    }Di2015NewLine            },Di2015NewLine
21128825Di2015UniqueSeparatormi
21128881Di2015UniqueSeparatorvar myString = "john10smith250";Di2015NewLinevar myNumbers = myString.Where(x => char.IsDigit(x)).Select(x => x).ToArray();Di2015NewLinevar myNewString = new String(myNumbers);Di2015NewLine
21129121Di2015UniqueSeparatorvar employee = new Dictionary<string, object>();Di2015NewLineemployee["FirstName"] = "Steve";Di2015NewLineemployee["LastName"] = "McQueen";Di2015NewLineemployee["DOB"] = new DateTime(1942, 1, 5);Di2015NewLineemployee["Salary"] = 215000m;Di2015NewLine
21129121Di2015UniqueSeparatorvar employee = new Employee {Di2015NewLine    FirstName = "Steve",Di2015NewLine    LastName = "McQueen",Di2015NewLine    DOB = new DateTime(1942, 1, 5),Di2015NewLine    Salary = 215000mDi2015NewLine};Di2015NewLine
21129121Di2015UniqueSeparatorDOB
21129121Di2015UniqueSeparatorDateOfBirth
21129121Di2015UniqueSeparatorvar employee = employeeRepository.GetById(25);Di2015NewLine
21129121Di2015UniqueSeparatoremployee
21129121Di2015UniqueSeparatoremployee
21129272Di2015UniqueSeparatorpublic class Camera : INotifyPropertyChangedDi2015NewLine{Di2015NewLine        private ObservableCollection<Camera> _extension;Di2015NewLine        public ObservableCollection<Camera> extension;Di2015NewLine        {Di2015NewLine            get { return _extension; }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                if (_extension != value)Di2015NewLine                {Di2015NewLine                     _extension= value;Di2015NewLine                     OnPropertyChanged("extension");Di2015NewLine                }Di2015NewLineDi2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Raises the PropertyChanged notification in a thread safe mannerDi2015NewLine        /// </summary>Di2015NewLine        /// <param name="propertyName"></param>Di2015NewLine        private void OnPropertyChanged(string propertyName)Di2015NewLine        {Di2015NewLine            PropertyChangedEventHandler handler = PropertyChanged;Di2015NewLine            if (handler != null)Di2015NewLine            {Di2015NewLine                handler(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        #region INotifyPropertyChanged MembersDi2015NewLineDi2015NewLine        public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine        #endregionDi2015NewLineDi2015NewLine}Di2015NewLine
21129272Di2015UniqueSeparatorDataContext = this
21129272Di2015UniqueSeparatorpublic partial class MainWindow : Window, INotifyPropertyChangedDi2015NewLine{Di2015NewLine        public MainWindow() {Di2015NewLine            DataContext = this;Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        // ... Di2015NewLineDi2015NewLine        private Camera _camera;Di2015NewLine        public Camera Camera;Di2015NewLine        {Di2015NewLine            get { return _camera; }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                if (_camera != value)Di2015NewLine                {Di2015NewLine                     _camera= value;Di2015NewLine                     OnPropertyChanged("Camera");Di2015NewLine                }Di2015NewLineDi2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        /// <summary>Di2015NewLine        /// Raises the PropertyChanged notification in a thread safe mannerDi2015NewLine        /// </summary>Di2015NewLine        /// <param name="propertyName"></param>Di2015NewLine        private void OnPropertyChanged(string propertyName)Di2015NewLine        {Di2015NewLine            PropertyChangedEventHandler handler = PropertyChanged;Di2015NewLine            if (handler != null)Di2015NewLine            {Di2015NewLine                handler(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        #region INotifyPropertyChanged MembersDi2015NewLineDi2015NewLine        public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine        #endregionDi2015NewLine}Di2015NewLine
21129272Di2015UniqueSeparator<ListBox x:Name="CameraListBox"Di2015NewLine         ItemsSource="{Binding Path=Camera.extension}">Di2015NewLine    <ListBox.Resources>Di2015NewLine        <DataTemplate DataType="{x:Type local:Camera}">Di2015NewLine            <Border BorderBrush="Black" BorderThickness="1" CornerRadius="5">Di2015NewLine                <TextBox Text="Hello World" />Di2015NewLine            </Border>Di2015NewLine        </DataTemplate>Di2015NewLine    </ListBox.Resources>Di2015NewLine</ListBox>Di2015NewLine
21129303Di2015UniqueSeparatorRowCount
21129303Di2015UniqueSeparatorfor (int i = 0; i < dataGridView1.RowCount; i++)Di2015NewLine
21129303Di2015UniqueSeparator// Use File.ReadAllLines, it's easierDi2015NewLinestring[] lines = File.ReadAllLines("test.txt");Di2015NewLineDi2015NewLineforeach(line in lines)Di2015NewLine{Di2015NewLine   var text = line.Split('\\t','\\n');Di2015NewLine   dataGridView1.Rows.Add(text);Di2015NewLine}Di2015NewLine
21129545Di2015UniqueSeparatorpublic class YourModel {Di2015NewLine    public string FuelType { get; set; }Di2015NewLine    public int VehicleYear { get; set; }Di2015NewLineDi2015NewLine    public string CatalystLabelText {Di2015NewLine        get {Di2015NewLine            return (this.FuelType == "D" &&Di2015NewLine                   this.VehicleYear >= 2009) ? _resNMHCCatalyst : _resCatalyst;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21129545Di2015UniqueSeparator<b> @Html.LabelFor(model => model.testObd.Catalyst, Model.CatalystLabelText) </b>Di2015NewLine
21129837Di2015UniqueSeparatorWM_HOTKEY
21129837Di2015UniqueSeparatorLPARAM
21129837Di2015UniqueSeparatorLPARAM & 0xffff
21129837Di2015UniqueSeparatorLPARAM >> 16
21129837Di2015UniqueSeparatorLPARAM & 0xffff
21129837Di2015UniqueSeparator   V bit 31                              V bit 0Di2015NewLine   HIGH WORD           LOW WORDDi2015NewLine0y vvvv vvvv vvvv vvvv mmmm mmmm mmmm mmmm where v is the vk, and m is the modifier Di2015NewLine0y 0000 0000 0000 0000 1111 1111 1111 1111 == 0x0000ffffDi2015NewLine========================================== Bitwise andDi2015NewLine0y 0000 0000 0000 0000 mmmm mmmm mmmm mmmm Just left with the modifier bitsDi2015NewLine
21129837Di2015UniqueSeparatorLPARAM >> 16
21129837Di2015UniqueSeparator   V bit 31                              V bit 0Di2015NewLine   HIGH WORD           LOW WORDDi2015NewLine0y vvvv vvvv vvvv vvvv mmmm mmmm mmmm mmmm where v is the vk, and m is the modifier Di2015NewLine0y 0vvv vvvv vvvv vvvv vmmm mmmm mmmm mmmm right shifted once (>> 1)Di2015NewLine0y 00vv vvvv vvvv vvvv vvmm mmmm mmmm mmmm right shifted twice (>> 2)Di2015NewLine...Di2015NewLine0y 0000 0000 0000 0000 vvvv vvvv vvvv vvvv right shifted sixteen times (>> 16)Di2015NewLine
21129837Di2015UniqueSeparatorLPARAM
21129837Di2015UniqueSeparatorIntPtr
21129837Di2015UniqueSeparatorint
21129837Di2015UniqueSeparatorchecked
21129837Di2015UniqueSeparatorOverflowException
21129837Di2015UniqueSeparatorIntPtr
21129837Di2015UniqueSeparatorlong
21129837Di2015UniqueSeparatorint
21129837Di2015UniqueSeparatorIntPtr
21129837Di2015UniqueSeparatorInt32
21129837Di2015UniqueSeparatorlparam >> 16
21129837Di2015UniqueSeparatorIntPtr lparam = /* comes from WndProc */;Di2015NewLineInt32 lparam32 = unchecked((int)(long)lparam);Di2015NewLineDi2015NewLineInt16 lowWord = lparam32 & 0xffff;Di2015NewLineInt16 highWord = lparam32 >> 16;Di2015NewLine
21129837Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Runtime.CompilerServices;Di2015NewLineusing System.Runtime.InteropServices;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinepublic sealed class KeyboardHook : IDisposableDi2015NewLine{Di2015NewLine    private int _currentId;Di2015NewLine    private Window _window;Di2015NewLineDi2015NewLine    public event EventHandler<KeyPressedEventArgs> KeyPressed;Di2015NewLineDi2015NewLine    public KeyboardHook()Di2015NewLine    {Di2015NewLine        EventHandler<KeyPressedEventArgs> handler = null;Di2015NewLine        this._window = new Window();Di2015NewLine        if (handler == null)Di2015NewLine        {Di2015NewLine            handler = delegate (object sender, KeyPressedEventArgs args) {Di2015NewLine                if (this.KeyPressed != null)Di2015NewLine                {Di2015NewLine                    this.KeyPressed(this, args);Di2015NewLine                }Di2015NewLine            };Di2015NewLine        }Di2015NewLine        this._window.KeyPressed += handler;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine        for (int i = this._currentId; i > 0; i--)Di2015NewLine        {Di2015NewLine            UnregisterHotKey(this._window.Handle, i);Di2015NewLine        }Di2015NewLine        this._window.Dispose();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void RegisterHotKey(ModifierKeys modifier, Keys key)Di2015NewLine    {Di2015NewLine        this._currentId++;Di2015NewLine        if (!RegisterHotKey(this._window.Handle, this._currentId, (uint) modifier, (uint) key))Di2015NewLine        {Di2015NewLine            throw new InvalidOperationException("Couldnâ€™t register the hot key.");Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    [DllImport("user32.dll")]Di2015NewLine    private static extern bool RegisterHotKey(IntPtr hWnd, int id, uint fsModifiers, uint vk);Di2015NewLine    [DllImport("user32.dll")]Di2015NewLine    private static extern bool UnregisterHotKey(IntPtr hWnd, int id);Di2015NewLineDi2015NewLine    private class Window : NativeWindow, IDisposableDi2015NewLine    {Di2015NewLine        private static int WM_HOTKEY = 0x312;Di2015NewLineDi2015NewLine        public event EventHandler<KeyPressedEventArgs> KeyPressed;Di2015NewLineDi2015NewLine        public Window()Di2015NewLine        {Di2015NewLine            this.CreateHandle(new CreateParams());Di2015NewLine        }Di2015NewLineDi2015NewLine        public void Dispose()Di2015NewLine        {Di2015NewLine            this.DestroyHandle();Di2015NewLine        }Di2015NewLineDi2015NewLine        protected override void WndProc(ref Message m)Di2015NewLine        {Di2015NewLine            base.WndProc(ref m);Di2015NewLine            if (m.Msg == WM_HOTKEY)Di2015NewLine            {Di2015NewLine                Keys key = ((Keys) (((int) m.LParam) >> 0x10)) & Keys.KeyCode;Di2015NewLine                ModifierKeys modifier = ((ModifierKeys) ((int) m.LParam)) & ((ModifierKeys) 0xffff);Di2015NewLine                if (this.KeyPressed != null)Di2015NewLine                {Di2015NewLine                    this.KeyPressed(this, new KeyPressedEventArgs(modifier, key));Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21129994Di2015UniqueSeparator[XmlRoot(ElementName = "users")]Di2015NewLinepublic class UsersDi2015NewLine{Di2015NewLine    [XmlElement(ElementName = "user")]Di2015NewLine    public List<User> users { get; set; }Di2015NewLine}Di2015NewLine
21129994Di2015UniqueSeparatortypeof(Users)
21129994Di2015UniqueSeparatorXmlSerializer s = new XmlSerializer(typeof(Users));Di2015NewLineUsers r = (Users)s.Deserialize(reader);Di2015NewLine
21129994Di2015UniqueSeparatorUser
21129994Di2015UniqueSeparatorr.users
21130052Di2015UniqueSeparatorstring exePath = Path.GetFullPath("C:\\test.exe");Di2015NewLineProcess.Start(exePath);Di2015NewLine
21130052Di2015UniqueSeparatorPublic Shared Function GetMyPath() As StringDi2015NewLine    ' SomeYourType is any class from your assembly, you can f.e. create a private class with single purpose of being used by this functionDi2015NewLine    Dim installPath = Path.GetDirectoryName(Assembly.GetAssembly(GetType(SomeYourType)).CodeBase)Di2015NewLine    Return installPath.Substring(6)Di2015NewLineEnd FunctionDi2015NewLine
21130052Di2015UniqueSeparatorstring exePath = Path.Combine(GetMyPath(), "test.exe");Di2015NewLineProcess.Start(exePath);Di2015NewLine
21130112Di2015UniqueSeparatorTag
21130112Di2015UniqueSeparatorControls.Find
21130112Di2015UniqueSeparatorprivate void nextDialog_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (calculate <= 7)Di2015NewLine    {Di2015NewLine        TextBox text = new TextBox();Di2015NewLine        text.Location = new Point(filePathText.Location.X, filePathText.Location.Y + y);Di2015NewLine        text.Size = new Size(194, 20);Di2015NewLine        text.ReadOnly = true;Di2015NewLine        text.Name = "filePathText" + "{calculate}";Di2015NewLine        //MessageBox.Show(text.Name);Di2015NewLine        this.Controls.Add(text);Di2015NewLineDi2015NewLine        Button button = new Button();Di2015NewLine        button.Location = new Point(OpenFileDialogButton.Location.X, OpenFileDialogButton.Location.Y + y);Di2015NewLine        button.Size = new Size(33, 24);Di2015NewLine        button.Text = "...";Di2015NewLine        button.Tag = text.Name;  //Name of associated TextBox added to Tag PropertyDi2015NewLine        button.Click += new EventHandler(OpenFileDialogButton_Click);Di2015NewLine        this.Controls.Add(button);Di2015NewLineDi2015NewLine        this.nextDialog.Location = new Point(22, 49 + y);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        this.nextDialog.Controls.Remove(nextDialog);Di2015NewLine        this.nextDialog.Dispose();Di2015NewLine        MessageBox.Show("MaximÃ¡lnÃ­ moÅ¾nost poÄ?tÅ¯ pÅ™idanÃ½ch souborÅ¯ byla dosaÅ¾ena!");Di2015NewLine    }Di2015NewLineDi2015NewLine    y = y + 28;Di2015NewLine    calculate++;Di2015NewLine}Di2015NewLine
21130112Di2015UniqueSeparatorprivate void OpenFileDialogButton_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    OpenFileDialog openFileDialog1 = new OpenFileDialog();Di2015NewLineDi2015NewLine    if (openFileDialog1.ShowDialog() == System.Windows.Forms.DialogResult.OK)Di2015NewLine    {Di2015NewLine        Button btn = sender as Button; //Get the Button that was clickedDi2015NewLine        string souborFilename = openFileDialog1.FileName;Di2015NewLine        this.Controls.Find((string)btn.Tag), true )[0].Text = souborFilename; //Find textbox that matches stored nameDi2015NewLine                                                                             //since method returns an array you willDi2015NewLine                                                                             //have to access it threw an index.Di2015NewLine    }Di2015NewLine}Di2015NewLine
21130371Di2015UniqueSeparatorXmlSerializer
21130371Di2015UniqueSeparatorvar serviceInfo = new Serviceinfo { Profiles = new List<string> { "one", "two", "three" }, state = new List<int> { 1, 2, 4 } };Di2015NewLineDi2015NewLinevar xml = new XDocument(Di2015NewLine            new XElement("serviceinfo",Di2015NewLine                serviceInfo.ProfilesDi2015NewLine                           .Zip(serviceInfo.state, (p, s) => new { p, s })Di2015NewLine                           .Select(x =>Di2015NewLine                               new XElement("profiles",Di2015NewLine                                   new XElement("profile", x.p),Di2015NewLine                                   new XElement("state", x.s.ToString())))));Di2015NewLine
21130371Di2015UniqueSeparator[XmlRoot(ElementName = "serviceInfo")]Di2015NewLinepublic class ServiceinfoDi2015NewLine{Di2015NewLine    [XmlElement("profiles")]Di2015NewLine    public List<Profile> Profiles { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ProfileDi2015NewLine{Di2015NewLine    [XmlElement(ElementName = "profile")]Di2015NewLine    public string Name { get; set; }Di2015NewLine    [XmlElement(ElementName = "state")]Di2015NewLine    public int State { get; set; }Di2015NewLine}Di2015NewLine
21130371Di2015UniqueSeparatorXmlSerializer
21130371Di2015UniqueSeparatorvar serviceInfo = new ServiceinfoDi2015NewLine{Di2015NewLine    Profiles = new List<Profile>() {Di2015NewLine        new Profile { Name = "one", State = 1 },Di2015NewLine        new Profile { Name = "two", State = 2 }Di2015NewLine    }Di2015NewLine};Di2015NewLineDi2015NewLinevar writer = new StringWriter();Di2015NewLinevar serializer = new XmlSerializer(typeof(Serviceinfo));Di2015NewLineDi2015NewLineserializer.Serialize(writer, serviceInfo);Di2015NewLineDi2015NewLinevar xml = writer.ToString();Di2015NewLine
21130437Di2015UniqueSeparatorRandom random = new Random();Di2015NewLinevar someRandomItem = myList[random.Next(myList.Count)];Di2015NewLine
21130529Di2015UniqueSeparatorpublic enum PsBlendModeDi2015NewLine{Di2015NewLine    psColorBlend = 22Di2015NewLine}Di2015NewLineDi2015NewLinevar ColorlendMode = PsBlendMode.psColorBlend;Di2015NewLine
21130539Di2015UniqueSeparator    byte[] buffer = new byte[1024];Di2015NewLine    int numberOfBytesRead = 0;Di2015NewLineDi2015NewLine    FileStream fs = new FileStream(@"C:\\file.png", FileMode.Create, FileAccess.Write);Di2015NewLine    doDi2015NewLine    {Di2015NewLine        numberOfBytesRead = serverStream.Read(buffer, 0, buffer.Length); //Read from network streamDi2015NewLine        fs.Write(buffer, 0, numberOfBytesRead);Di2015NewLine    } while (serverStream.DataAvailable);Di2015NewLine    fs.Close();Di2015NewLine
21130797Di2015UniqueSeparator// Design pattern for a base class.Di2015NewLinepublic class Base: IDisposableDi2015NewLine{Di2015NewLine    private bool disposed = false;Di2015NewLineDi2015NewLine    //Implement IDisposable.Di2015NewLine    public void Dispose()Di2015NewLine    {Di2015NewLine        Dispose(true);Di2015NewLine        GC.SuppressFinalize(this);Di2015NewLine    }Di2015NewLineDi2015NewLine    protected virtual void Dispose(bool disposing)Di2015NewLine    {Di2015NewLine        if (!disposed)Di2015NewLine        {Di2015NewLine            if (disposing)Di2015NewLine            {Di2015NewLine                // Free other state (managed objects).Di2015NewLine            }Di2015NewLine            // Free your own state (unmanaged objects).Di2015NewLine            // Set large fields to null.Di2015NewLine            disposed = true;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    // Use C# destructor syntax for finalization code.Di2015NewLine    ~Base()Di2015NewLine    {Di2015NewLine        // Simply call Dispose(false).Di2015NewLine        Dispose (false);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine// Design pattern for a derived class.Di2015NewLinepublic class Derived: BaseDi2015NewLine{Di2015NewLine    private bool disposed = false;Di2015NewLineDi2015NewLine    protected override void Dispose(bool disposing)Di2015NewLine    {Di2015NewLine        if (!disposed)Di2015NewLine        {Di2015NewLine            if (disposing)Di2015NewLine            {Di2015NewLine                // Release managed resources.Di2015NewLine            }Di2015NewLine            // Release unmanaged resources.Di2015NewLine            // Set large fields to null.Di2015NewLine           // Call Dispose on your base class.Di2015NewLine            disposed = true;Di2015NewLine        }Di2015NewLine        base.Dispose(disposing);Di2015NewLine    }Di2015NewLine    // The derived class does not have a Finalize methodDi2015NewLine    // or a Dispose method without parameters because it inheritsDi2015NewLine    // them from the base class.Di2015NewLine}Di2015NewLine
21130930Di2015UniqueSeparatorString.Format
21130930Di2015UniqueSeparatorString.Format
21130930Di2015UniqueSeparatorStringFormatMethodAttribute
21130930Di2015UniqueSeparator[StringFormatMethod("formatStr")]Di2015NewLinepublic string MyStringFomratter(string formatStr, params object[] arguments)Di2015NewLine{Di2015NewLine    // Do some checking and apply some logicDi2015NewLine    return string.Format(formatStr, arguments);Di2015NewLine}Di2015NewLine
21130951Di2015UniqueSeparator// Data context for the local databaseDi2015NewLinepublic ToDoDataContext toDoDB;Di2015NewLine
21130951Di2015UniqueSeparatorpublic new static App Current Di2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return (App)Application.Current;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21130951Di2015UniqueSeparatorApp.Current.toDoDB...Di2015NewLine
21131230Di2015UniqueSeparatorStoryBoard
21131230Di2015UniqueSeparator<Page.Resources>Di2015NewLine    <Storyboard x:Name="TextForegroundSb" RepeatBehavior="Forever">Di2015NewLine        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Tag)" Storyboard.TargetName="textBlock">Di2015NewLine        <DiscreteObjectKeyFrame KeyTime="0:0:0.0" Value="Red"/>Di2015NewLine            <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="Green"/>Di2015NewLine            <DiscreteObjectKeyFrame KeyTime="0:0:0.4" Value="Blue"/>Di2015NewLine        </ObjectAnimationUsingKeyFrames>Di2015NewLine    </Storyboard>Di2015NewLine</Page.Resources>Di2015NewLine
21131230Di2015UniqueSeparator<TextBlock x:Name="textBlock" TextWrapping="Wrap" Text="TextBlock"  FontSize="48" Tag="Red" FontWeight="Bold" Foreground="{Binding Tag, RelativeSource={RelativeSource Mode=Self}}" FontFamily="Global User Interface" />Di2015NewLine
21131230Di2015UniqueSeparatorDiscreteObjectKeyFrame  KeyTime
21131230Di2015UniqueSeparatorxmlns:Interactivity="using:Microsoft.Xaml.Interactivity" <br/>               Di2015NewLinexmlns:Core="using:Microsoft.Xaml.Interactions.Core"  <br/>Di2015NewLinexmlns:Media="using:Microsoft.Xaml.Interactions.Media" <br/>Di2015NewLineDi2015NewLine  <Button Content="Start sb" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="915,285,0,0" Height="119" Width="276">Di2015NewLine        <Interactivity:Interaction.Behaviors>Di2015NewLine            <Core:EventTriggerBehavior EventName="Click">Di2015NewLine                <Media:ControlStoryboardAction Storyboard="{StaticResource TextForegroundSb}"/>Di2015NewLine            </Core:EventTriggerBehavior>Di2015NewLine        </Interactivity:Interaction.Behaviors>Di2015NewLine    </Button>Di2015NewLine
21131308Di2015UniqueSeparatorbuf = String.Format("{0}\\r\\n{1}\\r\\n", "SMDR", "PCCSMDR");Di2015NewLine
21131421Di2015UniqueSeparatorAny()
21131421Di2015UniqueSeparatorent.Patients.Where(p => p.Doctor.Admins.Any(a => a.AdminID == 'x'));Di2015NewLine
21131732Di2015UniqueSeparatorReader
21131732Di2015UniqueSeparatorAnalyzer
21131732Di2015UniqueSeparatorForm1
21131732Di2015UniqueSeparatorstopReader
21131732Di2015UniqueSeparatorstopAnalyzer
21131732Di2015UniqueSeparatorreadQueue
21131732Di2015UniqueSeparatoranalyzedQueue
21131732Di2015UniqueSeparatorreadQueue
21131732Di2015UniqueSeparatorreadQueue
21131732Di2015UniqueSeparatoranalyzedQueue
21131732Di2015UniqueSeparatoranalyzedQueue
21131732Di2015UniqueSeparatorvoid runReader()Di2015NewLine{Di2015NewLine    while (!stopReader)Di2015NewLine    {Di2015NewLine        var data = ...; // read data from deviceDi2015NewLine        readQueue.Enqueue(data);Di2015NewLine    } Di2015NewLine}Di2015NewLineDi2015NewLinevoid runAnalyzer()Di2015NewLine{Di2015NewLine    while (!stopAnalyzer)Di2015NewLine    {Di2015NewLine        Data data;Di2015NewLine        if (readQueue.TryDequeue(out data))Di2015NewLine        {Di2015NewLine            var result = ...; // analyze dataDi2015NewLine            analyzedQueue.Enqueue(result);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            Thread.Sleep(...); // wait a whileDi2015NewLine        } Di2015NewLine    }Di2015NewLine}Di2015NewLine
21131732Di2015UniqueSeparatorThread.Sleep
21131732Di2015UniqueSeparatorstopAnalyzer
21131732Di2015UniqueSeparatorBlockingCollection.Take
21131824Di2015UniqueSeparatorGridViewRow gvRow = (GridViewRow)((Button)sender).Parent.Parent;Di2015NewLineint ID = Convert.ToInt32(grdView.DataKeys[gvRow.RowIndex]["ID"]);Di2015NewLineDi2015NewLineDataTable grdContent = (DataTable)ViewState["grdContent"];Di2015NewLineDi2015NewLineforeach (DataRow dr in grdContent.Rows)Di2015NewLine{Di2015NewLine    if (dr["ID"].ToString() == ID.ToString())Di2015NewLine    {Di2015NewLine        grdContent.Rows.Remove(dr);Di2015NewLine        grdContent.AcceptChanges();Di2015NewLine        break;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinegrdView.DataSource = grdContent;Di2015NewLinegrdView.DataBind();Di2015NewLine
21131982Di2015UniqueSeparatori
21131982Di2015UniqueSeparatorj
21131982Di2015UniqueSeparatorif (i ^ j) {Di2015NewLine}Di2015NewLine
21131982Di2015UniqueSeparator(!i ^ !j) Di2015NewLine// The ! converts i to boolean.Di2015NewLine// It also negates the value but you don't need to reverse it back as you are comparing the relative valuesDi2015NewLine
21131982Di2015UniqueSeparator(A ^ B)Di2015NewLine// Make sure A or B are boolean expressions, you will get a compile time error if they are not though.Di2015NewLine
21132015Di2015UniqueSeparatorusing System.IO;Di2015NewLineusing System;Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        int? x=null;Di2015NewLine        Console.WriteLine(x.Value==null);  //-> Console.WriteLine(false);    Di2015NewLine    }Di2015NewLine}Di2015NewLine
21132015Di2015UniqueSeparatorint' with null is
21132167Di2015UniqueSeparatorAddressU = wrap;
21132379Di2015UniqueSeparator// Create an HttpClient and set the timeout for requestsDi2015NewLineHttpClient client = new HttpClient();Di2015NewLineclient.Timeout = TimeSpan.FromSeconds(10);Di2015NewLineDi2015NewLine// Issue a requestDi2015NewLineclient.GetAsync(_address).ContinueWith(Di2015NewLine    getTask =>Di2015NewLine     {Di2015NewLine            if (getTask.IsCanceled)Di2015NewLine            {Di2015NewLine              Console.WriteLine("Request was canceled");Di2015NewLine            }Di2015NewLine            else if (getTask.IsFaulted)Di2015NewLine            {Di2015NewLine               Console.WriteLine("Request failed: {0}", getTask.Exception);Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine               HttpResponseMessage response = getTask.Result;Di2015NewLine               Console.WriteLine("Request completed with status code {0}", response.StatusCode);Di2015NewLine            }Di2015NewLine    });Di2015NewLine
21132438Di2015UniqueSeparatorpublic class EmptyDateCoverter: IValueConverterDi2015NewLine{Di2015NewLine    public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine    {Di2015NewLine        if(value is DateTime)Di2015NewLine        {Di2015NewLine            if((DateTime)value == DateTime.MinValue)Di2015NewLine            {Di2015NewLine                 return "";Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return value;Di2015NewLine    }Di2015NewLineDi2015NewLine    public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)Di2015NewLine    {Di2015NewLine        //We don't need convert backDi2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21132438Di2015UniqueSeparator<conv:EmptyDateCoverter x:Key="EmptyDate" />Di2015NewLine
21132438Di2015UniqueSeparator<GridViewColumn x:Name="DataGridLastEdit" Header="Last Edit" Width="150px" DisplayMemberBinding="{Binding lastEdit, Converter={StaticResource EmptyDate}}" />Di2015NewLine
21132640Di2015UniqueSeparatorpublic class NewViewModel Di2015NewLine{Di2015NewLine    // list of files with additional dataDi2015NewLine    public List<UploadItem> UploadItems { get; set; }Di2015NewLineDi2015NewLine    public string AnotherPropForView { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class UploadItemDi2015NewLine{Di2015NewLine    // your additional dataDi2015NewLine    public string CustomProp1  { get; set; }Di2015NewLine    public string CustomProp2  { get; set; }Di2015NewLine    // fileDi2015NewLine    public HttpPostedFileBase UpFile { get; set; }Di2015NewLine}Di2015NewLine
21132640Di2015UniqueSeparatorpublic class SomeController : Controller Di2015NewLine{Di2015NewLine    public ActionResult Create() Di2015NewLine    {Di2015NewLine      NewViewModel model = new NewViewModelDi2015NewLine      {Di2015NewLine         // inicialize listDi2015NewLine         UploadItems = new List<UploadItems> Di2015NewLine         {Di2015NewLine            // inicialize empty objects ( if you want to have 2 file fields with additional data)Di2015NewLine            // or inicialize only one object and another fields add by JavascriptDi2015NewLine            new UploadItem {},Di2015NewLine            new UploadItem {},Di2015NewLine         }Di2015NewLine      }Di2015NewLine      return View(model);Di2015NewLine    }Di2015NewLineDi2015NewLine    [HttpPost]Di2015NewLine    [ValidateAntiForgeryToken]Di2015NewLine    public ActionResult Create(NewViewModel model) Di2015NewLine    {Di2015NewLine        // if (ModelState.IsValid) etc...Di2015NewLine        foreach (var uploadItem in model.UploadItems)Di2015NewLine        {Di2015NewLine            // work with file and additional dataDi2015NewLine            var file = uploadItem.UpFile;Di2015NewLine            var prop1 = uploadItem.CustomProp1;Di2015NewLine            // file.SaveAs("/some/where"); atc ...Di2015NewLine        }Di2015NewLineDi2015NewLine        // return some view...Di2015NewLine    }Di2015NewLine}Di2015NewLine
21132640Di2015UniqueSeparator@model Path.To.NewViewModelDi2015NewLine@using (Html.BeginForm("Create", "Some", FormMethod.Post, new { enctype = "multipart/form-data" }))Di2015NewLine{Di2015NewLine@* Print all inicialized upload items *@Di2015NewLine  @for (int i = 0; i < Model.UploadItems.Count; i++)Di2015NewLine  {Di2015NewLine    @Html.TextBoxFor(model => model.UploadItems[@i].CustomProp1)Di2015NewLine    @Html.TextBoxFor(model => model.UploadItems[@i].CustomProp2)Di2015NewLine    <input type="file" id="UploadItems[@i].UpFile" name="UploadItems[@i].UpFile" />Di2015NewLine  }Di2015NewLineDi2015NewLine<button name="Action" type="submit" value="Save" class="btn">Save</button>Di2015NewLine}Di2015NewLine
21132674Di2015UniqueSeparatorstring connectionString = ""; //Set your MySQL connection string here.Di2015NewLinestring query =""; // set query to fetch data "Select * from  tabelname"; Di2015NewLineusing(MySqlConnection conn = new MySqlConnection(connStr))Di2015NewLine{Di2015NewLine    using(MySqlDataAdapter adapter = new MySqlDataAdapter(query, conn))Di2015NewLine    {Di2015NewLine        DataSet ds = new DataSet();Di2015NewLine        adapter.Fill(ds);Di2015NewLine        DataGridView1.DataSource= ds.Tables[0];Di2015NewLine    }Di2015NewLine}Di2015NewLine
21132748Di2015UniqueSeparatorpublic class PhoneApplicationPage : PageDi2015NewLine{Di2015NewLine    public static readonly DependencyProperty ApplicationBarProperty;Di2015NewLine    public static readonly DependencyProperty OrientationProperty;Di2015NewLine    public static readonly DependencyProperty SupportedOrientationsProperty;Di2015NewLineDi2015NewLine    public PhoneApplicationPage();Di2015NewLineDi2015NewLine    public IApplicationBar ApplicationBar { get; set; }Di2015NewLine    public PageOrientation Orientation { get; set; }Di2015NewLine    ....Di2015NewLine}Di2015NewLine
21132748Di2015UniqueSeparatorpublic sealed class ApplicationBar : IApplicationBarDi2015NewLine{Di2015NewLine    public ApplicationBar();Di2015NewLine    public Color BackgroundColor { get; set; }Di2015NewLine    public IList Buttons { get; }Di2015NewLine    public double DefaultSize { get; }Di2015NewLine    public Color ForegroundColor { get; set; }Di2015NewLine    public bool IsMenuEnabled { get; set; }Di2015NewLine    public bool IsVisible { get; set; }Di2015NewLine    public IList MenuItems { get; }Di2015NewLine    public double MiniSize { get; }Di2015NewLine    public ApplicationBarMode Mode { get; set; }Di2015NewLine    public double Opacity { get; set; }Di2015NewLine    public event EventHandler<ApplicationBarStateChangedEventArgs> StateChanged;Di2015NewLine}Di2015NewLine
21132748Di2015UniqueSeparator(ApplicationBar.Buttons[0] as ApplicationBarIconButton).Text = "my first button text";Di2015NewLine
21132748Di2015UniqueSeparatorApplicationBar
21132748Di2015UniqueSeparatorButtons
21132748Di2015UniqueSeparatorApplicationBar
21132748Di2015UniqueSeparatorpublic interface IApplicationBarDi2015NewLine{Di2015NewLine    Color BackgroundColor { get; set; }Di2015NewLine    IList Buttons { get; }Di2015NewLine    double DefaultSize { get; }Di2015NewLine    Color ForegroundColor { get; set; }Di2015NewLine    bool IsMenuEnabled { get; set; }Di2015NewLine    bool IsVisible { get; set; }Di2015NewLine    IList MenuItems { get; }Di2015NewLine    double MiniSize { get; }Di2015NewLine    ApplicationBarMode Mode { get; set; }Di2015NewLine    double Opacity { get; set; }Di2015NewLineDi2015NewLine    event EventHandler<ApplicationBarStateChangedEventArgs> StateChanged;Di2015NewLine}Di2015NewLine
21132748Di2015UniqueSeparatorApplicationBar
21132764Di2015UniqueSeparator<% Di2015NewLine int i=0;Di2015NewLineforeach (ClassCancelInfo ci in ClassCancelInfo.ListCancel())Di2015NewLine{ Di2015NewLine%>Di2015NewLineDi2015NewLine<input type='checkbox'  id="chk_<%=i.ToString()%>"/>Di2015NewLine<label for="chk_<%=i.ToString()%>"><%=ci.CancelDetail%></label>Di2015NewLine<!--<asp:CheckBox runat="server" ID="chk" Text="<%=ci.CancelDetail%>" />-->Di2015NewLineDi2015NewLine<% i=i+1;Di2015NewLine } Di2015NewLine%>Di2015NewLine
21132877Di2015UniqueSeparatorpublic static bool ProcessDirectory(string targetDirectory, List<string> foundFiles, List<string> errorFiles)Di2015NewLine{Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        // Process the list of files found in the directory.Di2015NewLine        string [] fileEntries = Directory.GetFiles(targetDirectory);Di2015NewLine        foreach (string fileName in fileEntries)Di2015NewLine        {Di2015NewLine            if (foundFiles.Count() >= maxcheck)Di2015NewLine            {Di2015NewLineDi2015NewLine                ConsoleKeyInfo answer;Di2015NewLine                Console.Clear();Di2015NewLine                Console.SetCursorPosition(2, 2);Di2015NewLine                Console.ForegroundColor = ConsoleColor.White;Di2015NewLine                Console.WriteLine("{0} files has been searched.", maxcheck);Di2015NewLine                Console.Write("  Do you wish to continue (Y/N): ");Di2015NewLine                Console.ForegroundColor = ConsoleColor.Green;Di2015NewLine                answer = Console.ReadKey();Di2015NewLine                Console.Clear();Di2015NewLineDi2015NewLine                if (answer.Key == ConsoleKey.Y)Di2015NewLine                {Di2015NewLine                    maxcheck = maxcheck + 1000;Di2015NewLine                }Di2015NewLine                if (answer.Key == ConsoleKey.N)Di2015NewLine                {Di2015NewLine                    return false;Di2015NewLine                }Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                ProcessFile(fileName, foundFiles, errorFiles);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        // Recurse into subdirectories of this directory.Di2015NewLine        string [] subdirectoryEntries = Directory.GetDirectories(targetDirectory);Di2015NewLineDi2015NewLine        foreach (string subdirectory in subdirectoryEntries)Di2015NewLine            if (!ProcessDirectory(subdirectory, foundFiles, errorFiles))Di2015NewLine                return false;Di2015NewLineDi2015NewLine        return true;Di2015NewLine    }Di2015NewLineDi2015NewLine    catch (Exception)Di2015NewLine    {Di2015NewLine        errorFiles.Add(targetDirectory);Di2015NewLine        return false; // or true if you want to continue in the face of exceptions.Di2015NewLine    }Di2015NewLine}Di2015NewLine
21132961Di2015UniqueSeparatorCustomerViewModel
21132961Di2015UniqueSeparatorproperties
21132961Di2015UniqueSeparator        public bool CareerPlanning { get; set; }Di2015NewLine        public bool Personal{ get; set; }Di2015NewLine        public bool RelationShip{ get; set; }Di2015NewLine        and So on.....Di2015NewLine
21132961Di2015UniqueSeparator     @Html.CheckBoxFor(Model => Model.CareerPlanning )<span>  Career Planning </span>Di2015NewLine     @Html.CheckBoxFor(Model => Model.Personal)<span>  Personal </span>Di2015NewLine     @Html.CheckBoxFor(Model => Model.RelationShip) <span> RelationShip</span>Di2015NewLine     and So on.....Di2015NewLine
21132961Di2015UniqueSeparatorPurpose
21132961Di2015UniqueSeparator StringBuilder sb=new StringBuilder();Di2015NewLine   if(model.CareerPlanning)Di2015NewLine     sb.Append("Carrer Planning");Di2015NewLine   if(model.Personal)Di2015NewLine     sb.Append("-Personal");Di2015NewLine and so on....Di2015NewLine
21132961Di2015UniqueSeparatormodel.Purpose=sb.ToString();Di2015NewLine
21133050Di2015UniqueSeparator<% Di2015NewLine int i=0;Di2015NewLineforeach (ClassCancelInfo ci in ClassCancelInfo.ListCancel())Di2015NewLine{ Di2015NewLine%>Di2015NewLineDi2015NewLine<input type='checkbox' id="chk_<%=i.ToString()%>"/>Di2015NewLine<label for="chk_<%=i.ToString()%>"><%=ci.CancelDetail%></label>Di2015NewLine<br/>Di2015NewLine<% i=i+1;Di2015NewLine } Di2015NewLine%>Di2015NewLine
21133200Di2015UniqueSeparator        private void dataGridView2_DragEnter(object sender, DragEventArgs e)Di2015NewLine    {Di2015NewLine        e.Effect = DragDropEffects.Copy;Di2015NewLine    }Di2015NewLineDi2015NewLine    /* Drag & Drop */Di2015NewLine    private Rectangle dragBoxFromMouseDown;Di2015NewLine    private object valueFromMouseDown;Di2015NewLine    private void dataGridView1_MouseMove(object sender, MouseEventArgs e)Di2015NewLine    {Di2015NewLine        if ((e.Button & MouseButtons.Left) == MouseButtons.Left)Di2015NewLine        {Di2015NewLine            // If the mouse moves outside the rectangle, start the drag.Di2015NewLine            if (dragBoxFromMouseDown != Rectangle.Empty && !dragBoxFromMouseDown.Contains(e.X, e.Y))Di2015NewLine            {Di2015NewLine                // Proceed with the drag and drop, passing in the list item.                    Di2015NewLine                DragDropEffects dropEffect = dataGridView1.DoDragDrop(valueFromMouseDown, DragDropEffects.Copy);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    private void dataGridView1_MouseDown(object sender, MouseEventArgs e)Di2015NewLine    {Di2015NewLine        // Get the index of the item the mouse is below.Di2015NewLine        var hittestInfo = dataGridView1.HitTest(e.X, e.Y);Di2015NewLineDi2015NewLine        if (hittestInfo.RowIndex != -1 && hittestInfo.ColumnIndex != -1)Di2015NewLine        {Di2015NewLine            valueFromMouseDown = dataGridView1.Rows[hittestInfo.RowIndex].Cells[hittestInfo.ColumnIndex].Value;Di2015NewLine            if (valueFromMouseDown != null)Di2015NewLine            {Di2015NewLine                // Remember the point where the mouse down occurred. Di2015NewLine                // The DragSize indicates the size that the mouse can move Di2015NewLine                // before a drag event should be started.                Di2015NewLine                Size dragSize = SystemInformation.DragSize;Di2015NewLineDi2015NewLine                // Create a rectangle using the DragSize, with the mouse position beingDi2015NewLine                // at the center of the rectangle.Di2015NewLine                dragBoxFromMouseDown = new Rectangle(new Point(e.X - (dragSize.Width / 2), e.Y - (dragSize.Height / 2)), dragSize);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        elseDi2015NewLine            // Reset the rectangle if the mouse is not over an item in the ListBox.Di2015NewLine            dragBoxFromMouseDown = Rectangle.Empty;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void dataGridView2_DragOver(object sender, DragEventArgs e)Di2015NewLine    {Di2015NewLine        e.Effect = DragDropEffects.Copy;Di2015NewLine    }Di2015NewLineDi2015NewLine    private void dataGridView2_DragDrop(object sender, DragEventArgs e)Di2015NewLine    {Di2015NewLine        // The mouse locations are relative to the screen, so they must be Di2015NewLine        // converted to client coordinates.Di2015NewLine        Point clientPoint = dataGridView2.PointToClient(new Point(e.X, e.Y));Di2015NewLineDi2015NewLine        // If the drag operation was a copy then add the row to the other control.Di2015NewLine        if (e.Effect == DragDropEffects.Copy)Di2015NewLine        {Di2015NewLine            string cellvalue = e.Data.GetData(typeof(string)) as string;Di2015NewLine            var hittest = dataGridView2.HitTest(clientPoint.X, clientPoint.Y);Di2015NewLine            if (hittest.ColumnIndex != -1Di2015NewLine                && hittest.RowIndex != -1)Di2015NewLine                dataGridView2[hittest.ColumnIndex, hittest.RowIndex].Value = cellvalue;Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine
21133221Di2015UniqueSeparator// needs to be done once only, before any serialization/deserialization is doneDi2015NewLineRuntimeTypeModel.Default.Add(typeof(GraphicsBuffer), false)Di2015NewLine    .SetSurrogate(typeof(StoredData));Di2015NewLine
21133221Di2015UniqueSeparator[ProtoContract(UseProtoMembersOnly= true)]Di2015NewLinepublic sealed class StoredDataDi2015NewLine{Di2015NewLine    [ProtoMember(1)]Di2015NewLine    public byte[] GpuData;Di2015NewLineDi2015NewLine    public static explicit operator GraphicsBuffer(StoredData value)Di2015NewLine    {Di2015NewLine        if (value == null) return null;Di2015NewLine        throw new NotImplementedException("Your conversion code here");Di2015NewLine    }Di2015NewLine    public static explicit operator StoredData(GraphicsBuffer value)Di2015NewLine    {Di2015NewLine        if (value == null) return null;Di2015NewLine        throw new NotImplementedException("Your conversion code here");Di2015NewLine    }Di2015NewLine}Di2015NewLine
21133221Di2015UniqueSeparatorGraphicsBuffer
21133221Di2015UniqueSeparatorStoredData
21133221Di2015UniqueSeparatorStoredData
21133422Di2015UniqueSeparator @"^(([\\w\\.\\-]+)@([\\w\\-]+)((\\.(\\w){2,3})+)|(No Email))$"Di2015NewLine
21133452Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    using (SqlConnection connection = CreateSqlConnection(connString))Di2015NewLine    {Di2015NewLine               using (SqlCommand command = CreateSqlCommand()Di2015NewLine               {Di2015NewLine                   //open connection + execute command + do something elseDi2015NewLine               }Di2015NewLine    }Di2015NewLine}Di2015NewLinecatchDi2015NewLine{Di2015NewLine //do somethingDi2015NewLine}Di2015NewLine
21133681Di2015UniqueSeparator<input type="submit" value="Submit" class="btn-primary" onclick="javascript: return checkform()" >Di2015NewLineDi2015NewLinefunction checkform()Di2015NewLine{Di2015NewLinevar fname= $('#FirstName').val();Di2015NewLinevar lname= $('#LastName').val();Di2015NewLineif(fname=="" && lname=="")Di2015NewLine  {Di2015NewLine    alert("Enter either first name or last name") ;Di2015NewLine    return false;Di2015NewLine  }Di2015NewLine}Di2015NewLine
21133799Di2015UniqueSeparator<script type = "text/javascript">Di2015NewLineDi2015NewLinefunction GetCheckBoxListValues(chkBoxID)Di2015NewLine{Di2015NewLine    var chkBox = document.getElementById('<%= cblHotelFacility.ClientID %>');Di2015NewLine    var options = chkBox.getElementsByTagName('input');Di2015NewLine    var listOfSpans = chkBox.getElementsByTagName('span');Di2015NewLine    for (var i = 0; i < options.length; i++)Di2015NewLine    {Di2015NewLine        if(options[i].checked)Di2015NewLine        {Di2015NewLine            alert(listOfSpans[i].attributes["JSvalue"].value);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLine</script> Di2015NewLine
21133857Di2015UniqueSeparatorusing (SFTDBEntities db = new SFTDBEntities())Di2015NewLine{Di2015NewLine    db.CommandTimeout = int.MaxValue; //For testDi2015NewLineDi2015NewLine    Guid Id_LogServerLogFile = Guid.Parse(lblId.Text.Trim());Di2015NewLine    LogServerLogFile logServerLogFile = new LogServerLogFile();Di2015NewLine    logServerLogFile = db.LogServerLogFiles.FirstOrDefault(x => x.Id == Id_LogServerLogFile);Di2015NewLine    byte[] data = logServerLogFile.LogServerLogFilesData.TFFileData;Di2015NewLine    long sz = logServerLogFile.TFFileSize;Di2015NewLine    Response.ClearContent();Di2015NewLine    Response.ContentType = logServerLogFile.TFFileMimeType;Di2015NewLine    Response.AddHeader("Content-Disposition", string.Format("attachment; filename = " + logServerLogFile.TFFileName));Di2015NewLine    Response.AddHeader("Content-Length", sz.ToString("F0"));Di2015NewLine    Response.Expires = 30;Di2015NewLine    Response.Buffer = true;Di2015NewLine    Response.BinaryWrite(data);Di2015NewLine    Response.Flush();Di2015NewLine    Response.End();Di2015NewLine}Di2015NewLine
21133857Di2015UniqueSeparatorconnection timeout
21133857Di2015UniqueSeparator<connectionStrings>Di2015NewLineDi2015NewLine    <add name="AdventureWorksEntities"       connectionString="metadata=.\\AdventureWorks.csdl|.\\AdventureWorks.ssdl|.\\AdventureWorks.msl;Di2015NewLineprovider=System.Data.SqlClient;provider connection string='Data Source=localhost;Di2015NewLineInitial Catalog=AdventureWorks;Integrated Security=True;Connection Timeout=180;Di2015NewLinemultipleactiveresultsets=true'" providerName="System.Data.EntityClient" />Di2015NewLineDi2015NewLine</connectionStrings>Di2015NewLine
21133857Di2015UniqueSeparatorpublic class SFTDBEntities : DbContextDi2015NewLine{Di2015NewLine    public SFTDBEntities ()Di2015NewLine        : base(ContextHelper.CreateConnection("Connection string"), true)Di2015NewLine    {Di2015NewLine        ((IObjectContextAdapter)this).ObjectContext.CommandTimeout = 180;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21133896Di2015UniqueSeparatorDirectoryInfo dir = new DirectoryInfo(userPath);Di2015NewLinevar fileList = dir.EnumerateFiles("*.*", SearchOption.TopDirectoryOnly)Di2015NewLine                  .Where(f => f.Extension.Equals(".stat", StringComparison.InvariantCultureIgnoreCase) || Di2015NewLine                              f.Extension.Equals(".kill", StringComparison.InvariantCultureIgnoreCase))Di2015NewLine                  .OrderBy(f => f.CreationTime);Di2015NewLine
21133896Di2015UniqueSeparatorExtension
21133908Di2015UniqueSeparator    public List<Student> GetStudentsByCourseName(string courseName)Di2015NewLine    {Di2015NewLine        var list = new List<Student>();Di2015NewLine        var course = db.Courses.SingleOrDefault(o => o.Title == courseName);Di2015NewLineDi2015NewLine        if (course != null)Di2015NewLine        {Di2015NewLine            list = course.Enrollments.Select(o => new Student {Di2015NewLine                    FirstName = o.Student.FirstName,Di2015NewLine                    LastName = o.Student.LastNameDi2015NewLine                }).ToList();Di2015NewLine        }Di2015NewLineDi2015NewLine        return list;Di2015NewLine    }Di2015NewLine
21133972Di2015UniqueSeparatorList<List<List<double>>> listVal = new List<List<List<double>>>(){Di2015NewLine    new List<List<double>>{Di2015NewLine        new List<double>(){1,1,3},Di2015NewLine        new List<double>(){2,1,2},Di2015NewLine        new List<double>(){1,2,3}Di2015NewLine    },Di2015NewLine    new List<List<double>>{Di2015NewLine        new List<double>(){2,1,3},Di2015NewLine        new List<double>(){2,4,2},Di2015NewLine        new List<double>(){3,1,3}Di2015NewLine    },Di2015NewLine    new List<List<double>>{Di2015NewLine        new List<double>(){4,1,1},Di2015NewLine        new List<double>(){4,2,1},Di2015NewLine        new List<double>(){4,3,1}Di2015NewLine    }Di2015NewLine};Di2015NewLineList<List<List<double>>> listQ = new List<List<List<double>>>(){Di2015NewLine        new List<List<double>>{Di2015NewLine        new List<double>(){3,7,4},Di2015NewLine        new List<double>(){8,15,23},Di2015NewLine        new List<double>(){11,13,17}Di2015NewLine    },Di2015NewLine    new List<List<double>>{Di2015NewLine        new List<double>(){90,3,7},Di2015NewLine        new List<double>(){5,7,12},Di2015NewLine        new List<double>(){7,14,21}Di2015NewLine    },Di2015NewLine    new List<List<double>>{Di2015NewLine        new List<double>(){32,4,1},Di2015NewLine        new List<double>(){55,12,8},Di2015NewLine        new List<double>(){3,5,8}Di2015NewLine    }Di2015NewLine};Di2015NewLineDi2015NewLineDi2015NewLine//Linq awesomenessDi2015NewLinevar qry = listVal.SelectMany((l1, i0) =>Di2015NewLine                l1.SelectMany((l2, i1) =>Di2015NewLine                    l2.Select((ele, i2) =>Di2015NewLine                        new { i0, i1, i2, gVal = ele, qVal = listQ[i0][i1][i2] })))Di2015NewLine                .GroupBy(x => new { x.i0, x.i1, x.gVal }) // if you want to average across the innermost lists only Di2015NewLine                //.GroupBy(x => x.gVal)                   //if you want to average acreoss the whole dataDi2015NewLine                .SelectMany(x => x.Select(e => new { e.i0, e.i1, e.i2, avg = x.Average(y => y.qVal) }));Di2015NewLineforeach (var e in qry)Di2015NewLine{Di2015NewLine    listQ[e.i0][e.i1][e.i2] = e.avg;Di2015NewLine}Di2015NewLine
21134179Di2015UniqueSeparator<image source="X.png" /> Di2015NewLine
21134397Di2015UniqueSeparatorvar ordersByCustomers = customers.Select(x => new { CustomerName = x.Name, Product = x.Orders.Join(products, order => order.ProductID, product => product.ProductID, (order, product) => new { ProductID = product.ProductID, TotalAmount = order.Quantity * product.Price }).Select(y => y) });Di2015NewLine
21134397Di2015UniqueSeparatorvar totalAmountByCustomers = ordersByCustomers.Select(x => new { CustomerName = x.CustomerName, TotalAmount = x.Product.Sum(y => y.TotalAmount) });Di2015NewLine
21134496Di2015UniqueSeparatorif(x & 4)
21134496Di2015UniqueSeparatorif((x & 4) != 0)
21134496Di2015UniqueSeparatortrue
21134496Di2015UniqueSeparatorfalse
21134496Di2015UniqueSeparatorbool
21134496Di2015UniqueSeparator!
21134496Di2015UniqueSeparator~
21134496Di2015UniqueSeparator!
21134496Di2015UniqueSeparatorbool
21134496Di2015UniqueSeparatorint
21134496Di2015UniqueSeparator~
21134496Di2015UniqueSeparatorint
21134496Di2015UniqueSeparatorbool
21134496Di2015UniqueSeparator!someInteger
21134496Di2015UniqueSeparatorsomeInteger == 0
21134496Di2015UniqueSeparatorbool
21134496Di2015UniqueSeparatorA() && B()
21134496Di2015UniqueSeparatorB()
21134496Di2015UniqueSeparatorA()
21134496Di2015UniqueSeparatorA() & B()
21134496Di2015UniqueSeparatorâˆ§
21134496Di2015UniqueSeparatorB()
21134496Di2015UniqueSeparatorB()
21134496Di2015UniqueSeparator&&
21134496Di2015UniqueSeparatorx != null && x.Length != 0
21134496Di2015UniqueSeparator|
21134496Di2015UniqueSeparator&
21134539Di2015UniqueSeparatorWebBrowser
21134539Di2015UniqueSeparator<script>
21134539Di2015UniqueSeparatorwindow.alert
21134539Di2015UniqueSeparatoralert
21134539Di2015UniqueSeparatorWebBrowser
21134719Di2015UniqueSeparatorpublic class My<T,S>Di2015NewLine{Di2015NewLine   public My(G<S> g, T t)Di2015NewLine   {Di2015NewLine       // code that DOES NOT use S in any wayDi2015NewLine   } Di2015NewLine}Di2015NewLine
21134799Di2015UniqueSeparatorWeb Application
21134799Di2015UniqueSeparatorWeb Site
21134799Di2015UniqueSeparatorCodeFile
21134799Di2015UniqueSeparatorWeb Applications
21134799Di2015UniqueSeparatorCodeFile
21134799Di2015UniqueSeparatorCodeBehind
21134799Di2015UniqueSeparatorCodeBehind
21134799Di2015UniqueSeparatorbin
21134799Di2015UniqueSeparator.aspx
21134799Di2015UniqueSeparatorCodeBehind="your.aspx.cs"
21134799Di2015UniqueSeparator.cs
21134799Di2015UniqueSeparator.designer.cs
21134799Di2015UniqueSeparatorbuild-action
21134799Di2015UniqueSeparatorcompile
21134799Di2015UniqueSeparator.cs
21134799Di2015UniqueSeparator.cs
21134799Di2015UniqueSeparator.dll
21134799Di2015UniqueSeparatorbin
21134799Di2015UniqueSeparator.cs
21134799Di2015UniqueSeparator.aspx
21134799Di2015UniqueSeparatorCodeFile="your.aspx.cs"
21134799Di2015UniqueSeparator.cs
21134799Di2015UniqueSeparatorbuild-action
21134799Di2015UniqueSeparatorcontent
21134799Di2015UniqueSeparator.designer.cs
21134799Di2015UniqueSeparatorbuild-action
21134799Di2015UniqueSeparatornone
21134799Di2015UniqueSeparator.cs
21134799Di2015UniqueSeparator.dll
21134799Di2015UniqueSeparator.dll
21134824Di2015UniqueSeparatorwhile(!finished)Di2015NewLine{Di2015NewLine     cancelToken.ThrowIfCancellationRequested();Di2015NewLine     //Some not cancelable operationsDi2015NewLine}Di2015NewLine
21134824Di2015UniqueSeparatorprivate static void LongRunning(CancellationToken cancelToken)Di2015NewLine{Di2015NewLine    while (true)Di2015NewLine    {Di2015NewLine        if(cancelToken.IsCancellationRequested)Di2015NewLine        {Di2015NewLine            return;Di2015NewLine        }Di2015NewLine        //Not canceled, continue to workDi2015NewLine    }Di2015NewLine}Di2015NewLine
21134824Di2015UniqueSeparatorAbort
21135070Di2015UniqueSeparator==
21135070Di2015UniqueSeparator if(obj1.type == obj2.type)Di2015NewLine
21135070Di2015UniqueSeparator==
21135070Di2015UniqueSeparatorbool
21135070Di2015UniqueSeparatorint
21135070Di2015UniqueSeparatorobj1.type
21135070Di2015UniqueSeparatorobj2.type
21135070Di2015UniqueSeparator1
21135070Di2015UniqueSeparator==
21135070Di2015UniqueSeparatorif(obj1.type == 1 && obj2.type == 1)Di2015NewLine
21135228Di2015UniqueSeparatorAppointment app;Di2015NewLineDi2015NewLineint count = app.RequiredAttendees.Count(x => (x.ResponseType.HasValue && x.ResponseType.Value == MeetingResponseType.Accept));Di2015NewLine
21135324Di2015UniqueSeparatorBiddingTierSetViewModel
21135390Di2015UniqueSeparatorSum
21135390Di2015UniqueSeparatorString.Join
21135390Di2015UniqueSeparatorvar selectedItems = checkedUsers.Items.Cast<ListItem>()Di2015NewLine    .Where(li => li.Selected)Di2015NewLine    .Select(li => int.Parse(li.Text));Di2015NewLineint sum = selectedItems.Sum();Di2015NewLinestring items = string.Join(",", selectedItems);Di2015NewLine
21135418Di2015UniqueSeparatorCustomUserSession
21135418Di2015UniqueSeparatorCustomCredentialsAuthProvider
21135418Di2015UniqueSeparatorusing ServiceStack.CacheAccess;Di2015NewLineusing ServiceStack.CacheAccess.Providers;Di2015NewLineusing ServiceStack.ServiceInterface;Di2015NewLineusing ServiceStack.ServiceInterface.Auth;Di2015NewLineusing ServiceStack.ServiceHost;Di2015NewLineusing ServiceStack.WebHost.Endpoints;Di2015NewLineDi2015NewLinenamespace Testv3Di2015NewLine{Di2015NewLine    class MainClassDi2015NewLine    {Di2015NewLine        public static void Main()Di2015NewLine        {Di2015NewLine            // Very basic console hostDi2015NewLine            var appHost = new AppHost();Di2015NewLine            appHost.Init();Di2015NewLine            appHost.Start("http://*:8082/");Di2015NewLine            Console.ReadKey();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class AppHost : AppHostHttpListenerBaseDi2015NewLine    {Di2015NewLine        public AppHost() : base("Test Service", typeof(TestApp).Assembly) {}Di2015NewLineDi2015NewLine        public override void Configure(Funq.Container container)Di2015NewLine        {Di2015NewLine            // Cache and session IoCDi2015NewLine            container.Register<ICacheClient>(new MemoryCacheClient());Di2015NewLine            container.Register<ISessionFactory>(c => new SessionFactory(c.Resolve<ICacheClient>()));Di2015NewLineDi2015NewLine            // Register the Auth Feature with the CustomCredentialsAuthProvider.Di2015NewLine            Plugins.Add(new AuthFeature(Di2015NewLine                () => new CustomUserSession(), Di2015NewLine                new IAuthProvider[]Di2015NewLine                {Di2015NewLine                    new CustomCredentialsAuthProvider(),Di2015NewLine                    new BasicAuthProvider(),Di2015NewLine                })Di2015NewLine            );Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class CustomCredentialsAuthProvider : CredentialsAuthProviderDi2015NewLine    {Di2015NewLine        public override bool TryAuthenticate(IServiceBase authService, string userName, string password)Di2015NewLine        {Di2015NewLine            // Replace with a database lookupDi2015NewLine            return (userName == "clark.kent" && password == "kryptonite");Di2015NewLine        }Di2015NewLineDi2015NewLine        public override void OnAuthenticated(IServiceBase authService, IAuthSession session, IOAuthTokens tokens, Dictionary<string, string> authInfo)Di2015NewLine        {Di2015NewLine            var customSession = session as CustomUserSession;Di2015NewLine            if(customSession != null)Di2015NewLine            {Di2015NewLine                // Replace these static values with a database lookupDi2015NewLine                customSession.FirstName = "Clark";Di2015NewLine                customSession.LastName = "Kent";Di2015NewLine                customSession.SuperHeroIdentity = "Superman";Di2015NewLine            }Di2015NewLine            authService.SaveSession(customSession, SessionExpiry);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class CustomUserSession : AuthUserSession Di2015NewLine    {Di2015NewLine        // Our added session propertyDi2015NewLine        public string SuperHeroIdentity { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public static class TestAppDi2015NewLine    {Di2015NewLine        [Route("/SuperHeroTime", "GET")]Di2015NewLine        public class SuperHeroTimeRequest {}Di2015NewLineDi2015NewLine        public class TestController : ServiceDi2015NewLine        {Di2015NewLine            public CustomUserSession CustomUserSessionDi2015NewLine            {Di2015NewLine                get Di2015NewLine                { Di2015NewLine                    // Returns the typed sessionDi2015NewLine                    return SessionAs<CustomUserSession>(); Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            [Authenticate]Di2015NewLine            public object Get(SuperHeroTimeRequest request)Di2015NewLine            {Di2015NewLine                // Return the result objectDi2015NewLine                return new { CustomUserSession.FirstName, CustomUserSession.LastName, Time = DateTime.Now.ToString(), CustomUserSession.SuperHeroIdentity };Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21135418Di2015UniqueSeparatorindex.html
21135418Di2015UniqueSeparatorbin
21135418Di2015UniqueSeparatorhttp://localhost:8082/index.html
21135418Di2015UniqueSeparator<!doctype html>Di2015NewLine<html>Di2015NewLine    <head>Di2015NewLine        <title>Test</title>Di2015NewLine        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>Di2015NewLine        <script>Di2015NewLine            function login()Di2015NewLine            {Di2015NewLine                $.ajax({Di2015NewLine                    type: "POST",Di2015NewLine                    url: "/auth/credentials",Di2015NewLine                    contentType: "application/json",Di2015NewLine                    data: JSON.stringify({Di2015NewLine                        UserName: "clark.kent",Di2015NewLine                        Password: "kryptonite",Di2015NewLine                        RememberMe: trueDi2015NewLine                    })Di2015NewLine                }).done(function(result){Di2015NewLine                    getSuperHeroTime();Di2015NewLine                });Di2015NewLine            }Di2015NewLine            function getSuperHeroTime()Di2015NewLine            {Di2015NewLine                $.ajax({Di2015NewLine                    type: "GET",Di2015NewLine                    url: "/SuperHeroTime",Di2015NewLine                    contentType: "application/json",Di2015NewLine                }).done(function(result){Di2015NewLine                    $("#result").html(result.FirstName + " " +Di2015NewLine                                    result.LastName + " is " +Di2015NewLine                                    result.SuperHeroIdentity + " (" +Di2015NewLine                                    result.Time + ")");Di2015NewLine                });Di2015NewLine            }Di2015NewLine        </script>Di2015NewLine</head>Di2015NewLine<body>Di2015NewLine    <h1>Super Hero Time</h1>Di2015NewLine    <button onclick="login()">Go</button>Di2015NewLine    <div id="result"></div>Di2015NewLine</body>Di2015NewLine</html>Di2015NewLine
21135418Di2015UniqueSeparatorSomeClass1
21135418Di2015UniqueSeparatorJsonServiceClient
21135418Di2015UniqueSeparatorSomeClass2
21135418Di2015UniqueSeparatornull
21135418Di2015UniqueSeparatorJsonServiceClient
21135418Di2015UniqueSeparatorJsonServiceClient
21135418Di2015UniqueSeparatorvar authClient = new JsonServiceClient(url);Di2015NewLineauthclient.Post<AuthResponse>("/auth", new Auth {Di2015NewLine    UserName = "clark.kent",Di2015NewLine    Password = "kryptonite",Di2015NewLine    RememberMe = trueDi2015NewLine});Di2015NewLineDi2015NewLine// Get the session cookiesDi2015NewLinevar cookies = authClient.CookieContainer.GetCookies(new Uri(url));Di2015NewLineDi2015NewLine// In your other `JsonServiceClient`s set the cookies before making requestsDi2015NewLinevar anotherClient = new JsonServiceClient(url);Di2015NewLineanotherClient.CookiesCollection.add(cookies);Di2015NewLineDi2015NewLineanotherClient.Post( ...Di2015NewLine
21135418Di2015UniqueSeparatorbase.TryResolve<EService>();Di2015NewLine
21135418Di2015UniqueSeparatorOnly ASP.NET Requests accessible via Singletons are supported
21135418Di2015UniqueSeparatorbase.ResolveService<EService>();Di2015NewLine
21135456Di2015UniqueSeparatorstatic Tuple<ISomething, Action> CreateMock()Di2015NewLine{        Di2015NewLine    return new Tuple<ISomething, Action>(new MockSomething(), Di2015NewLine                                         () => Console.WriteLine("Releasing..."));Di2015NewLine}Di2015NewLine
21135456Di2015UniqueSeparatorvar obj = new OtherClass(new ExportFactory<ISomething>(CreateMock));Di2015NewLine
21135714Di2015UniqueSeparatorint[] array = list.Select(obj=>obj.a).ToArray();Di2015NewLine
21135714Di2015UniqueSeparatorToArray
21135803Di2015UniqueSeparator            var posters = new FacebookBatchParameter[]Di2015NewLine            {Di2015NewLine                new FacebookBatchParameter(HttpMethod.Post,string.Format("/{0}/feed", "100000481752xxx"),messagePost),Di2015NewLine                new FacebookBatchParameter(HttpMethod.Post,string.Format("/{0}/feed", "100003279105xxx"),messagePost)Di2015NewLine            };Di2015NewLineDi2015NewLine            var result = client.Batch(posters);Di2015NewLine
21135807Di2015UniqueSeparatorpublic static class FileHelperDi2015NewLine{Di2015NewLine    public static string ReadFile(string filePath)Di2015NewLine    {Di2015NewLine        var ResrouceStream = Application.GetResourceStream(new Uri(filePath, UriKind.Relative));Di2015NewLine        if (ResrouceStream != null)Di2015NewLine        {Di2015NewLine            Stream myFileStream = ResrouceStream.Stream;Di2015NewLine            if (myFileStream.CanRead)Di2015NewLine            {Di2015NewLine                StreamReader myStreamReader = new StreamReader(myFileStream);Di2015NewLineDi2015NewLine                return myStreamReader.ReadToEnd();Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return "";Di2015NewLine    }Di2015NewLine}Di2015NewLine
21135807Di2015UniqueSeparatorvar textFileContent = FileHelper.ReadFile(@"Assets\\MyTextFile.txt");Di2015NewLine
21135808Di2015UniqueSeparatorpublic static Expression<Func<Model, ViewModel>> ToViewModelDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return x => GetViewModel(x);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic ViewModel GetViewModel(Model x)Di2015NewLine{Di2015NewLine    var vm = new PositionViewModelDi2015NewLine    {Di2015NewLine        Id = x.Id,Di2015NewLine        Name = x.NameDi2015NewLine    };Di2015NewLineDi2015NewLine    vm.Employees = x.Employees.Select(p => new EmployeeDi2015NewLine    {Di2015NewLine        Id = p.Id,Di2015NewLine        Name = p.Name,Di2015NewLine        Position = vmDi2015NewLine    }).ToList();Di2015NewLineDi2015NewLine    return vm;Di2015NewLine}Di2015NewLine
21135944Di2015UniqueSeparatorCurrentUICulture
21135944Di2015UniqueSeparatorInvariantCulture
21135944Di2015UniqueSeparatoren-US
21135944Di2015UniqueSeparatorif(CultureInfo.CurrentUICulture == CultureInfo.InvariantCulture)Di2015NewLine{Di2015NewLine     var month = DateTime.ParseExact("January", "MMMM", CultureInfo.InvariantCulture);Di2015NewLine     Console.WriteLine(month.ToString("MMMM", new CultureInfo("tr-TR"))); //ocakDi2015NewLine}Di2015NewLineelse if(CultureInfo.CurrentUICulture == new CultureInfo("tr-TR"))Di2015NewLine{Di2015NewLine     var month = DateTime.ParseExact("Ocak", "MMMM", new CultureInfo("tr-TR"));Di2015NewLine     Console.WriteLine(month); //ocakDi2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine     //Di2015NewLine}Di2015NewLine
21136066Di2015UniqueSeparatorForm1
21136066Di2015UniqueSeparatorForm2
21136066Di2015UniqueSeparatornamespace WindowsFormsApplication1Di2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void label1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            Form2 frm = new Form2(this); // <---- Pass a reference to this form to Form2Di2015NewLine            frm.SetBtn = "teste test";Di2015NewLine            frm.Show();Di2015NewLine        }Di2015NewLineDi2015NewLine        public string setLbDi2015NewLine        {Di2015NewLine            setDi2015NewLine            {Di2015NewLine                label1.Text = value;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21136066Di2015UniqueSeparatorForm2
21136066Di2015UniqueSeparatornamespace WindowsFormsApplication1Di2015NewLine{Di2015NewLine    public partial class Form2 : FormDi2015NewLine    {Di2015NewLine        private Form1 other;Di2015NewLineDi2015NewLine        //Empty constructor for the designerDi2015NewLine        public Form2()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        public Form2(Form1 other)Di2015NewLine        {Di2015NewLine            this.other = other;Di2015NewLine            InitializeComponent();Di2015NewLine        }Di2015NewLineDi2015NewLine        private void button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            other.setLb = "test test";Di2015NewLine        }Di2015NewLineDi2015NewLine        public string SetBtnDi2015NewLine        {Di2015NewLine            setDi2015NewLine            {Di2015NewLine                button1.Text = value;Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21136106Di2015UniqueSeparatorList.FindAll
21136106Di2015UniqueSeparatorList<Geluidsfragment> result = fragmenten.FindAll(f => f.Title.Contains(title));Di2015NewLine
21136106Di2015UniqueSeparatorEnumerable.Where
21136106Di2015UniqueSeparatorEnumerable.ToList
21136106Di2015UniqueSeparatorresult = fragmenten.Where(f => f.Title.Contains(title)).ToList();Di2015NewLine
21136122Di2015UniqueSeparator/^[*_?]{1}$/Di2015NewLine
21136122Di2015UniqueSeparator^
21136122Di2015UniqueSeparator[*_?]
21136122Di2015UniqueSeparator[]
21136122Di2015UniqueSeparator{1}
21136122Di2015UniqueSeparator$
21136327Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Windows.Forms;Di2015NewLineDi2015NewLinenamespace WindowsFormsApplication1Di2015NewLine{Di2015NewLine    public partial class Form1 : FormDi2015NewLine    {Di2015NewLine        public Form1()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLine            lbBasket.Items.Add(new Basket("Name 1", (decimal) 1.00, 1));Di2015NewLine            lbBasket.Items.Add(new Basket("Name 2", (decimal) 2.00, 2));Di2015NewLine        }Di2015NewLineDi2015NewLine        private void btnAdd_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            var newItem = new Basket(txtName.Text, Convert.ToDecimal(txtPrice.Text), Convert.ToInt32(txtQuantity.Text));Di2015NewLineDi2015NewLine            var existingItem =Di2015NewLine                lbBasket.Items.Cast<Basket>()Di2015NewLine                    .FirstOrDefault(li => li.Name.Equals(newItem.Name, StringComparison.OrdinalIgnoreCase));Di2015NewLine            // There is something there Di2015NewLine            if (existingItem != null)Di2015NewLine            {Di2015NewLine                // You already have the best oneDi2015NewLine                if (existingItem.Price > newItem.Price)Di2015NewLine                {Di2015NewLine                    // Do nothingDi2015NewLine                    return;Di2015NewLine                }Di2015NewLine                // Price is the sameDi2015NewLine                if (existingItem.Price == newItem.Price)Di2015NewLine                {Di2015NewLine                    lbBasket.Items.Remove(existingItem);Di2015NewLine                    newItem.Quantity += existingItem.Quantity;Di2015NewLine                    lbBasket.Items.Add(newItem);Di2015NewLine                }Di2015NewLine                // Remove the old item and add the new oneDi2015NewLine                else if (existingItem.Price < newItem.Price)Di2015NewLine                {Di2015NewLine                    lbBasket.Items.Remove(existingItem);Di2015NewLine                    lbBasket.Items.Add(newItem);Di2015NewLine                }Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                lbBasket.Items.Add(newItem);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public class BasketDi2015NewLine    {Di2015NewLine        public string Name { get; set; }Di2015NewLine        public decimal Price { get; set; }Di2015NewLine        public int Quantity { get; set; }Di2015NewLineDi2015NewLine        public Basket(string name, decimal price, int quantity)Di2015NewLine        {Di2015NewLine            Name = name;Di2015NewLine            Price = price;Di2015NewLine            Quantity = quantity;Di2015NewLine        }Di2015NewLineDi2015NewLine        public override string ToString()Di2015NewLine        {Di2015NewLine            return Name + " Â£" + Price + " " + Quantity;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21136369Di2015UniqueSeparatorselect j.* Di2015NewLinefrom jobs j Di2015NewLineinner join workers w on w.work_id = j.wor_idDi2015NewLinewhere w.wor_login='ANONYMOUS'Di2015NewLine
21136401Di2015UniqueSeparatorListView
21136401Di2015UniqueSeparatorpublic class DataObjectDi2015NewLine{Di2015NewLine    public void DataObject()Di2015NewLine    {Di2015NewLine        Id = Guid.NewGuid();Di2015NewLine    }Di2015NewLineDi2015NewLine    public Guid Id{ get; private set; }Di2015NewLine}Di2015NewLine
21136401Di2015UniqueSeparatorGroupName
21136401Di2015UniqueSeparator<RadioButton Name="radioToInsert" GroupName="{Binding Id, Mode=OneWay}" />Di2015NewLine
21136401Di2015UniqueSeparatorId
21136492Di2015UniqueSeparatorpublic bool IsContentUrlExists(string url)Di2015NewLine{Di2015NewLine      url = url.Trim().TrimEnd(new[]{'/'});Di2015NewLine      return Context.Contents.Any(content => content.Url == url || content.Url == url + "/");Di2015NewLine}Di2015NewLine
21136501Di2015UniqueSeparator?
21136501Di2015UniqueSeparator@
21136501Di2015UniqueSeparator?Student_FName
21136501Di2015UniqueSeparator@Student_FName
21136501Di2015UniqueSeparatorstring myConn = "Server=localhost;Port=3306;Database=DBName;Uid=UserName;Pwd=Password;"Di2015NewLine
21136601Di2015UniqueSeparatorIf
21136601Di2015UniqueSeparatorWhere
21136601Di2015UniqueSeparatorPublic Function GetAllItemsByUserName(ByVal userName As String, equals As Boolean) As List(Of MyRecords)Di2015NewLine    Dim itemsQuery = Di2015NewLine        From myRecord In _ListOfRecordsDi2015NewLine        Where If(equals, myRecord.Name = userName, myRecord.Name <> userName)Di2015NewLine        Select myRecordDi2015NewLine    Return itemsQuery.ToListDi2015NewLineEnd FunctionDi2015NewLine
21136728Di2015UniqueSeparatorfirstWord + secondWord
21136728Di2015UniqueSeparatorstring
21136728Di2015UniqueSeparatorobject
21136728Di2015UniqueSeparatorstring
21136728Di2015UniqueSeparator(string) combination
21136728Di2015UniqueSeparatorstring
21136728Di2015UniqueSeparatorcombination
21136728Di2015UniqueSeparatorstring
21136728Di2015UniqueSeparatorConsole.WriteLine(object)
21136728Di2015UniqueSeparatorstring
21136728Di2015UniqueSeparatorstring
21136874Di2015UniqueSeparatorOrderBy
21136874Di2015UniqueSeparatorstring
21136874Di2015UniqueSeparatorvar strSort = "Name";Di2015NewLineList<Order> SortedList = objListOrder.OrderBy(o=>o.GetType().GetProperty(strSort).GetValue(o, null)).ToList();Di2015NewLine
21136874Di2015UniqueSeparatorvar strSort = "Name";Di2015NewLineDi2015NewLinevar query = objListOrder;Di2015NewLineif(strSort == "OrderDate")Di2015NewLine    query = query.OrderBy(o=>o.OrderDate);Di2015NewLineelse if(strSort == "Name")Di2015NewLine    query = query.OrderBy(o=>o.Name);Di2015NewLineelse if(strSort == "Amount")Di2015NewLine    query = query.OrderBy(o=>o.Amount);Di2015NewLineDi2015NewLineList<Order> SortedList = query.ToList();Di2015NewLine
21136892Di2015UniqueSeparatorAsyncCallback
21136892Di2015UniqueSeparatorTcpClient
21136892Di2015UniqueSeparatorTcpClient
21136892Di2015UniqueSeparatorTcpClient.Connected
21136892Di2015UniqueSeparatorTcpClient
21136892Di2015UniqueSeparatorstatic TcpClient cli = new TcpClient(); //Initialize a new TcpClientDi2015NewLinestatic void Main(string[] args)Di2015NewLine{Di2015NewLine    send("Something");Di2015NewLine    Console.ReadLine();Di2015NewLine}Di2015NewLineprivate static void doSomething(IAsyncResult result)Di2015NewLine{Di2015NewLine    if (cli.Connected) //Connected to host, do somethingDi2015NewLine    {Di2015NewLine        Console.WriteLine("Connected"); //Write 'Connected'Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        //Not connected, do somethingDi2015NewLine    }Di2015NewLine    Console.ReadLine(); //Wait for user inputDi2015NewLine}Di2015NewLineprivate static void send(string msg)Di2015NewLine{Di2015NewLine    AsyncCallback callBack = new AsyncCallback(doSomething); //Set the callback to the doSomething voidDi2015NewLine    cli.BeginConnect("google.com", 80, callBack, cli); //Try to connect to Google on port 80Di2015NewLine}Di2015NewLine
21136892Di2015UniqueSeparatorSystem.Threading.Thread newThread = new System.Threading.Thread((System.Threading.ThreadStart)delegate {Di2015NewLine//Do whatever you want in a new threadDi2015NewLine    while (!cli.Connected)Di2015NewLine    {Di2015NewLine        //Do somethingDi2015NewLine    }Di2015NewLine});Di2015NewLinenewThread.Start(); //Start executing the code inside the threadDi2015NewLine//This code will still run while the newThread is runningDi2015NewLineConsole.ReadLine(); //Wait for user inputDi2015NewLinenewThread.Abort(); //Stop the thread when the user inserts any thingDi2015NewLine
21137043Di2015UniqueSeparatorCar.numCar++
21137245Di2015UniqueSeparatorpublic struct ADi2015NewLine{Di2015NewLine    [MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]Di2015NewLine    public double[];Di2015NewLine    [MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]Di2015NewLine    public uint[] df;Di2015NewLine    [MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]Di2015NewLine    public uint[] dfn;Di2015NewLine    [MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]Di2015NewLine    public IntPtr[] dc;Di2015NewLine    [MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]Di2015NewLine    public float[] dg;Di2015NewLine    public float g;Di2015NewLine    public byte gs;Di2015NewLine}Di2015NewLine
21137245Di2015UniqueSeparatorUnmanagedType.ByValArray
21137245Di2015UniqueSeparator[DllImport("DevControl.dll", CallingConvention=CallingConvention.Cdecl)]Di2015NewLinestatic extern int DevConfig (ref A a, int b, uint c, bool[] d);Di2015NewLine
21137245Di2015UniqueSeparatorcdecl
21137245Di2015UniqueSeparatordc
21137245Di2015UniqueSeparatordouble[,]
21137245Di2015UniqueSeparatordouble*[]
21137245Di2015UniqueSeparatorIntPtr[]
21137245Di2015UniqueSeparatorMarshal
21137245Di2015UniqueSeparatorIntPtr[] CreateUnmanagedArrays(double[][] arr)Di2015NewLine{Di2015NewLine    IntPtr[] result = new IntPtr[arr.Length];Di2015NewLine    for (int i=0; i<arr.Length; i++)Di2015NewLine    {Di2015NewLine        result[i] = Marshal.AllocCoTaskMem(arr[i].Length*sizeof(double));Di2015NewLine        Marshal.Copy(arr[i], 0, result[i], arr[i].Length);Di2015NewLine    }Di2015NewLine    return result;Di2015NewLine}Di2015NewLineDi2015NewLinevoid DestroyUnmanagedArrays(IntPtr[] arr)Di2015NewLine{Di2015NewLine    for (int i=0; i<arr.Length; i++)Di2015NewLine    {Di2015NewLine        Marshal.FreeCoTaskMem(arr[i]);Di2015NewLine        arr[i] = IntPtr.Zero;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21137308Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Windows;Di2015NewLineusing System.Windows.Controls;Di2015NewLineusing System.Windows.Data;Di2015NewLineusing System.Windows.Documents;Di2015NewLineusing System.Windows.Input;Di2015NewLineusing System.Windows.Media;Di2015NewLineusing System.Windows.Media.Imaging;Di2015NewLineusing System.Windows.Navigation;Di2015NewLineusing System.Windows.Shapes;Di2015NewLineusing System.ComponentModel;Di2015NewLineDi2015NewLinenamespace WpfApplication2Di2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// Interaction logic for MainWindow.xamlDi2015NewLine    /// </summary>Di2015NewLine    public partial class MainWindow : WindowDi2015NewLine    {Di2015NewLine        BackgroundWorker bckg =  new BackgroundWorker();Di2015NewLine        private List<string> allXmlFiles;   Di2015NewLine        public MainWindow()Di2015NewLine        {Di2015NewLine            InitializeComponent();Di2015NewLineDi2015NewLine            bckg.DoWork += new DoWorkEventHandler(bckg_DoWork);Di2015NewLine            bckg.ProgressChanged += new ProgressChangedEventHandler(bckg_ProgressChanged);Di2015NewLine            bckg.RunWorkerCompleted += new RunWorkerCompletedEventHandler(bckg_RunWorkerCompleted);Di2015NewLineDi2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        void bckg_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)Di2015NewLine        {Di2015NewLine            if (e.Error!=null)Di2015NewLine            {Di2015NewLine                textbox.Text += String.Format("\\nCannot process file {0}", filepath);Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        void bckg_ProgressChanged(object sender, ProgressChangedEventArgs e)Di2015NewLine        {Di2015NewLine            //here you can update your textblox Di2015NewLineDi2015NewLine            Dispatcher.Invoke(() =>Di2015NewLine                {Di2015NewLine                    textbox.Text = e.UserState.ToString();Di2015NewLine                });Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        void bckg_DoWork(object sender, DoWorkEventArgs e)Di2015NewLine        {Di2015NewLine            allXmlFiles = ProcessDirectory(selectedDir);Di2015NewLine            if (allXmlFiles.Count > 0)Di2015NewLine            {Di2015NewLineDi2015NewLine                bckg.ReportProgress("here in percentage", "\\nProcessing files...");Di2015NewLine                foreach (string filepath in allXmlFiles)Di2015NewLine                {Di2015NewLine                    tryDi2015NewLine                    {Di2015NewLine                        ParseFile(filepath);Di2015NewLine                    }Di2015NewLine                    catchDi2015NewLine                    {Di2015NewLine                        throw;  Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLineDi2015NewLine        private void button1_Click(object sender, RoutedEventArgs e)Di2015NewLine        {Di2015NewLineDi2015NewLine            textbox.Text += String.Format("\\n{0} files will be processed", allXmlFiles.Count);Di2015NewLine            bckg.RunWorkerAsync();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21137318Di2015UniqueSeparatorHiddenField
21137318Di2015UniqueSeparatortab
21137318Di2015UniqueSeparator<asp:HiddenField ID="hidTAB" runat="server" Value="image" />Di2015NewLine
21137318Di2015UniqueSeparatorclick
21137318Di2015UniqueSeparatortabs
21137318Di2015UniqueSeparatorHiddenField
21137318Di2015UniqueSeparatortab
21137318Di2015UniqueSeparatordocument.getElementById('<%=hidTAB.ClientID %>').value = "image";Di2015NewLine
21137318Di2015UniqueSeparatorjQuery
21137318Di2015UniqueSeparatordocument.ready
21137318Di2015UniqueSeparatorHiddenField
21137318Di2015UniqueSeparatorPostback
21137318Di2015UniqueSeparator$(document).ready( function(){Di2015NewLine    var tab = document.getElementById('<%= hidTAB.ClientID%>').value;Di2015NewLine    $( '#myTab a[href="' + tab + '"]' ).tab( 'show' );Di2015NewLine});Di2015NewLine
21137335Di2015UniqueSeparatorseriesColour
21137335Di2015UniqueSeparatorDispatcher
21137335Di2015UniqueSeparatorseriesColour.Dispatcher.CheckAccess()
21137335Di2015UniqueSeparatorseriesColour
21137335Di2015UniqueSeparatorthis.Dispatcher.Invoke((Action)(() =>Di2015NewLine{Di2015NewLine        seriesColour = _colourBrushes[field.SeriesColour];Di2015NewLine        ...// your code here.Di2015NewLine}));Di2015NewLine
21137345Di2015UniqueSeparatorstring
21137345Di2015UniqueSeparatorpublic class MealDi2015NewLine{Di2015NewLine    public DateTime EatedTime { get; set; }Di2015NewLine    public decimal Amount { get; set; }Di2015NewLine    public int PatientID { get; set; }Di2015NewLine    public int MealTypeID { get; set; }Di2015NewLine    ...Di2015NewLine}Di2015NewLine
21137345Di2015UniqueSeparatorbool AddMeal(Meal meal)Di2015NewLine
21137345Di2015UniqueSeparatormeal
21137490Di2015UniqueSeparatorstring sql = "Select studname from Profile where pemgrp = '" + sql1 + "'";Di2015NewLine
21137490Di2015UniqueSeparatorstring sql = "Select studname from Profile where pemgrp in (" + sql1+ ")";Di2015NewLine
21137527Di2015UniqueSeparatorcartesianProduct
21137527Di2015UniqueSeparatorvar first10000 = cartesianProduct.Take(10000);Di2015NewLine
21137608Di2015UniqueSeparatorTokenStream
21137608Di2015UniqueSeparatorpublic MyTokenStream {Di2015NewLine    public Token nextToken() {Di2015NewLine        // ...Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic TokenStream plumb() {Di2015NewLine    return new MyTokenStream();Di2015NewLine}Di2015NewLine
21137608Di2015UniqueSeparator    public class TokenStreamDi2015NewLine    {Di2015NewLine    }Di2015NewLineDi2015NewLine    public class SomeClassDi2015NewLine    {            Di2015NewLine        public Func<TokenStream> Plumb()Di2015NewLine        {Di2015NewLine            // I'm returning a function that returns a new TokenStream for whoever calls itDi2015NewLine            return () => new TokenStream();Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var someClass = new SomeClass();Di2015NewLine        TokenStream stream = someClass.Plumb()(); // note double bracketsDi2015NewLine    }Di2015NewLine
21137631Di2015UniqueSeparatorImage.FromFile
21137631Di2015UniqueSeparatorBitmap.GetPixel
21137631Di2015UniqueSeparatorBitmap.LockBits
21137631Di2015UniqueSeparatorDictionary
21137671Di2015UniqueSeparatorobject obj = await command.ExecuteScalarAsync();Di2015NewLine
21137671Di2015UniqueSeparatorExecuteScalarAsync
21137671Di2015UniqueSeparatorTask<T>
21137864Di2015UniqueSeparatorvar datagridTopic = new DataGrid {Width = 400, IsReadOnly = true};Di2015NewLine//I only need one columnDi2015NewLinevar column1 = new DataGridTextColumn()Di2015NewLine{Di2015NewLine    Header = "ID",Di2015NewLine    Width = datagridTopic.Width - 8 //after adding rows the grid gets scroll, so made column width lowerDi2015NewLine};Di2015NewLinecolumn1.Binding = new Binding("ID")Di2015NewLinedatagridTopic.Columns.Add(column1);Di2015NewLineDi2015NewLinevar column2 = new DataGridTextColumn()Di2015NewLine{Di2015NewLine    Header = "Title",Di2015NewLine    Width = datagridTopic.Width - 8 //after adding rows the grid gets scroll, so made column width lowerDi2015NewLine};Di2015NewLinecolumn2.Binding = new Binding("Title")Di2015NewLinedatagridTopic.Columns.Add(column2);Di2015NewLineDi2015NewLinevar items = xElementArray.Select(x => new { ID= x.Attribute("id").Value, Title = x.Attribute("title").Value});Di2015NewLineDi2015NewLineDi2015NewLinedatagridTopic.ItemsSource = items; //set the data source for the grid to custom created items.Di2015NewLineDi2015NewLineStackPanelContent.Children.Add(datagridTopic);Di2015NewLine
21138166Di2015UniqueSeparator0.25
21138166Di2015UniqueSeparatordouble rounded = round(4.0 * hoursEntered) / 4.0Di2015NewLine
21138166Di2015UniqueSeparatorround
21138166Di2015UniqueSeparatorSystem.Math.Round
21138166Di2015UniqueSeparatorround
21138293Di2015UniqueSeparatorLabelContactNumber.Text = (Session["sContactNumber"] != null)Di2015NewLine                              ? Session["sContactNumber"].ToString()Di2015NewLine                              : string.Empty //or whatever default value your want;Di2015NewLine
21138375Di2015UniqueSeparatorcdecl
21138375Di2015UniqueSeparatorstdcall
21138375Di2015UniqueSeparator[Out]
21138375Di2015UniqueSeparatorout
21138375Di2015UniqueSeparatorCoTaskMemAlloc
21138375Di2015UniqueSeparatorMashal.FreeCoTaskMem
21138403Di2015UniqueSeparatorpublic Form1()Di2015NewLine{Di2015NewLine     InitializeComponent();Di2015NewLine     this.Activated += Form1_Activated;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Form1_Activated(object sender, EventArgs e)Di2015NewLine{Di2015NewLine   if (this.WindowState == FormWindowState.Minimized)Di2015NewLine   {Di2015NewLine      //TODO: take required action hereDi2015NewLine   }Di2015NewLine}Di2015NewLine
21138582Di2015UniqueSeparatorForm.DialogResult
21138582Di2015UniqueSeparatorForm1
21138582Di2015UniqueSeparatordialogResult
21138582Di2015UniqueSeparatorif ( DialogResult == DialogResult.No)Di2015NewLine
21138582Di2015UniqueSeparatorif (dialogResult == DialogResult.No)Di2015NewLine
21138733Di2015UniqueSeparatorViewState["questionNumberCounter"]=Convert.ToInt32(ViewState["questionNumberCounter"])+1Di2015NewLine
21138848Di2015UniqueSeparator activity.SelectedValueDi2015NewLine
21138848Di2015UniqueSeparatoractivity.Items[activity.SelectedIndex]
21138981Di2015UniqueSeparatorDateTime.ParseExact
21138981Di2015UniqueSeparatorvar date = DateTime.ParseExact(Di2015NewLine    "Mon Jan 13 2014 00:00:00 GMT+0000 (GMT Standard Time)",Di2015NewLine    "ddd MMM dd yyyy HH:mm:ss 'GMT'K '(GMT Standard Time)'",Di2015NewLine    CultureInfo.InvariantCulture);Di2015NewLine
21138981Di2015UniqueSeparatordate.ToString("yyyy-MM-dd");Di2015NewLine
21139338Di2015UniqueSeparatorRowDetailsTemplate
21139399Di2015UniqueSeparatorIComparable<T>
21139399Di2015UniqueSeparatorvoid Foo<T>(IList<T> list) where T : IComparable<T>Di2015NewLine{Di2015NewLine    T x = ...;Di2015NewLine    T y = ...;Di2015NewLine    if (x.CompareTo(y) < 0)Di2015NewLine    {Di2015NewLine        ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
21139399Di2015UniqueSeparator<
21139399Di2015UniqueSeparator>
21139399Di2015UniqueSeparator+
21139399Di2015UniqueSeparator-
21139516Di2015UniqueSeparator<dx:ASPxButton runat="server" ID="_exportBtn" ClientInstanceName="_exportBtn" ClientVisible="false" OnClick="OnClickExport" />Di2015NewLine
21139516Di2015UniqueSeparator    public void OnClickExport(object sender, EventArgs args)Di2015NewLine    {Di2015NewLine        gridExport.WriteXlsxToResponse();Di2015NewLine    }Di2015NewLine
21139516Di2015UniqueSeparator    else if (name = "Excel")Di2015NewLine    {Di2015NewLine       //What to do here?Di2015NewLine       _exportBtn.OnClick();Di2015NewLine    }Di2015NewLine
21139541Di2015UniqueSeparator!AccountDi2015NewLineNJoint Brokerage AccountDi2015NewLineTInvstDi2015NewLine^Di2015NewLine
21139659Di2015UniqueSeparatorParallel.For(0, 10, _ => myAction());Di2015NewLine
21139659Di2015UniqueSeparatorParallel.For()
21139659Di2015UniqueSeparatorWhenAll()
21139659Di2015UniqueSeparatorawait
21139659Di2015UniqueSeparatorParallel.For(0, 10, i => myAction(i, somethingElse));Di2015NewLine
21139659Di2015UniqueSeparatorsomethingElse
21139659Di2015UniqueSeparatormyAction
21139659Di2015UniqueSeparatorWhenAll()
21139659Di2015UniqueSeparatorvar tasks Enumerable.Range(0, 10)Di2015NewLine    .Select(i => Task.Run(() => doSomething(i));Di2015NewLine
21139659Di2015UniqueSeparatorAction
21139659Di2015UniqueSeparatorvar tasks Enumerable.Range(0, 10)Di2015NewLine    .Select(_ => Task.Run(doSomething);Di2015NewLine
21139659Di2015UniqueSeparatorTask
21139659Di2015UniqueSeparatorWhenAll()
21139659Di2015UniqueSeparatorTask
21139743Di2015UniqueSeparatorSites
21139743Di2015UniqueSeparator.Include("Sites.ChildOfSites")Di2015NewLine
21139751Di2015UniqueSeparatorrunat="server"
21140161Di2015UniqueSeparatorSystem.Text.Encoding.UTF8.GetBytes("Â©"); // { 194, 169 }Di2015NewLine
21140161Di2015UniqueSeparatorbyte[] newBytes = new Byte[] { 194, 169 };Di2015NewLinestring string1 = System.Text.Encoding.UTF8.GetString(newBytes, 0, newBytes.Length);Di2015NewLine
21140161Di2015UniqueSeparatorbyte[] newBytes = new Byte[] { 169 };Di2015NewLinevar encoding = Encoding.GetEncoding(1252);Di2015NewLinestring string1 = encoding.GetString(newBytes, 0, newBytes.Length); // "Â©"Di2015NewLine
21140232Di2015UniqueSeparatorpublic void Init(HttpApplication context)Di2015NewLine{Di2015NewLine    context.PreRequestHandlerExecute += new EventHandler(this.RegisterPagePrerenderHandler);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void RegisterPagePrerenderHandler(object s, EventArgs e)Di2015NewLine{Di2015NewLine    if (HttpContext.Current.Handler is Page)Di2015NewLine    {Di2015NewLine        Page page = (Page) HttpContext.Current.Handler;Di2015NewLine        page.PreRender += delegate (object ss, EventArgs ee) {Di2015NewLine            if (page is CDefault)Di2015NewLine            {Di2015NewLine                page.ClientScript.RegisterClientScriptInclude("key", page.ResolveUrl("~/myjs.js"));Di2015NewLine            }Di2015NewLine        };Di2015NewLine    }Di2015NewLine}Di2015NewLine
21140252Di2015UniqueSeparatorDataTable dt = db.GetDataTable(Program.CONN, "SELECT ID FROM table WHERE column LIKE 'False%'");Di2015NewLineint count = dt.Columns.Count;Di2015NewLineusing (DataTableReader dtr = dt.CreateDataReader())Di2015NewLine{Di2015NewLine    while (dtr.Read())Di2015NewLine    {Di2015NewLine        for (int rt = 0 ; rt < count ; rt ++)Di2015NewLine        {Di2015NewLine            string line = dtr.GetValue(rt).ToString();Di2015NewLine            idList.Add(line);Di2015NewLine        }Di2015NewLine     }Di2015NewLine}Di2015NewLine
21140252Di2015UniqueSeparatorDataTable dt = db.GetDataTable(Program.CONN, "SELECT ID FROM table WHERE column LIKE 'False%'");Di2015NewLineusing (DataTableReader dtr = dt.CreateDataReader())Di2015NewLine{Di2015NewLine    while (dtr.Read())Di2015NewLine    {Di2015NewLine        foreach (DataColumn col in dt.Columns)Di2015NewLine        {Di2015NewLine            string line = dtr[col.ColumnName].ToString();Di2015NewLine            idList.Add(line);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21140299Di2015UniqueSeparatorpublic class FooBarDi2015NewLine{Di2015NewLine    public int Var1 { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var foo = new FooBar();Di2015NewLine        foo.Var1 = 0;Di2015NewLine        Thread t = new Thread(new ParameterizedThreadStart(NewThread));Di2015NewLine        t.Start(foo);Di2015NewLineDi2015NewLine        lock (foo)Di2015NewLine        {Di2015NewLine            foo.Var1 = 1;Di2015NewLine            Thread.Sleep(10000);Di2015NewLine            foo.Var1 = 2;Di2015NewLine        }Di2015NewLine    }Di2015NewLine    public static void NewThread(object foo)Di2015NewLine    {Di2015NewLine        Thread.Sleep(5000);Di2015NewLine        Console.WriteLine((foo as FooBar).Var1);Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
21140302Di2015UniqueSeparator<asp:RadioButton ID="_listOne" runat="server" GroupName="xx" AutoPostBack="true" OnSelectedIndexChanged="ListOneIndexChanged">Di2015NewLine</asp:RadioButton>Di2015NewLine<asp:RadioButton ID="_listTwo" runat="server" GroupName="xx" AutoPostBack="true" OnSelectedIndexChanged="ListTwoIndexChanged">Di2015NewLine</asp:RadioButton>Di2015NewLine
21140336Di2015UniqueSeparatorAction<Type,int>
21140336Di2015UniqueSeparatorAction<object,int>
21140336Di2015UniqueSeparator var p=Expression.Parameter(typeof(object));Di2015NewLine var conversion=Expression.Convert(p,type);Di2015NewLine var call=Expression.Invoke(setPropertyValueExp,conversion);Di2015NewLine var lambda=Expression.Lambda(call,p);Di2015NewLine return lambda.Compile() as Action<object,int>;Di2015NewLine
21140403Di2015UniqueSeparatorapi/MyController/GetRowsOfType/userName/tableName/rowType
21140403Di2015UniqueSeparatorRowsByType
21140418Di2015UniqueSeparatorXmlSerializer
21140527Di2015UniqueSeparatorLINQtoXML
21140527Di2015UniqueSeparatorvar doc = XDocument.Load(file);Di2015NewLineXNamespace ns = "http://www.cnas.ro/siui/2.0";Di2015NewLinevar nodes = doc.Root.Element(ns + "physician")Di2015NewLine                        .Element(ns + "services")Di2015NewLine                            .Elements(ns + "service");Di2015NewLine
21140527Di2015UniqueSeparatorDescendants
21140527Di2015UniqueSeparatorvar nodes = doc.Root.Descendants(ns + "service");Di2015NewLine
21140527Di2015UniqueSeparatorIEnumerable<XElement>
21140527Di2015UniqueSeparatorusing System.Xml.Linq;
21140527Di2015UniqueSeparatorvar services = from n in nodesDi2015NewLine               select newDi2015NewLine                   {Di2015NewLine                       Id = n.Attribute("id").Value, Di2015NewLine                       Diagnostic = n.Attribute("diagnostic").ValueDi2015NewLine                   };Di2015NewLine
21140527Di2015UniqueSeparatorservices
21140527Di2015UniqueSeparatorIEnumerable<AnonymousType>
21140527Di2015UniqueSeparatorforeach (var service in services)Di2015NewLine{Di2015NewLine    Console.WriteLine(service.Id + " - " + service.Diagnostic);Di2015NewLine}Di2015NewLine
21140532Di2015UniqueSeparatorvar username = await Windows.System.UserProfile.UserInformation.GetDomainNameAsync();Di2015NewLine
21140850Di2015UniqueSeparatormaturityData
21140850Di2015UniqueSeparatorstring
21140850Di2015UniqueSeparatorDateTime
21140850Di2015UniqueSeparatorvar todaysdate = DateTime.Today;Di2015NewLineDi2015NewLineif (DateTime.Parse(acct.maturityDate) <= todaysdate ) {Di2015NewLine   maturityText.Visible = true;  Di2015NewLine}Di2015NewLine
21140850Di2015UniqueSeparatorTryParse
21140850Di2015UniqueSeparatorParseExact
21140870Di2015UniqueSeparatorBankAccount.
21140870Di2015UniqueSeparatorPayPalAccount.
21140870Di2015UniqueSeparatorPerson
21140870Di2015UniqueSeparator@Html.EditorFor(m => m.BankAccount.BankName)Di2015NewLine
21140870Di2015UniqueSeparatorBankAccount.
21140870Di2015UniqueSeparator<input ... name='BankAccount.BankName' ... />
21140870Di2015UniqueSeparatorpublic class BakAccountModelDi2015NewLine{Di2015NewLine   // make sure the property name is the same as in the Person view modelDi2015NewLine   public BankAccount { get; set; } Di2015NewLine}Di2015NewLine
21140870Di2015UniqueSeparatorModelState
21140880Di2015UniqueSeparatorItemsSource
21140880Di2015UniqueSeparatorvar total = dataGrid1.ItemsSource.Count() + dataGrid2.ItemsSource.Count() + dataGrid3.ItemsSource.Count();Di2015NewLine
21141082Di2015UniqueSeparatorpublic interface IGraphVertexDi2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinepublic interface IGraph<T>Di2015NewLine    where T: IGraphVertexDi2015NewLine{Di2015NewLine    void addEdge(T a, T b);Di2015NewLine}Di2015NewLine
21141082Di2015UniqueSeparatorpublic class Graph2dVertex : IGraphVertexDi2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLinepublic class Graph2d : IGraph<Graph2dVertex>Di2015NewLine{Di2015NewLine    public void addEdge(Graph2dVertex a, Graph2dVertex b)Di2015NewLine    {Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
21141119Di2015UniqueSeparatorXDocument xdoc = XDocument.Load(reader, LoadOptions.PreserveWhitespace | LoadOptions.SetLineInfo | LoadOptions.SetBaseUri);Di2015NewLine
21141119Di2015UniqueSeparatorIXmlLineInfo node = sender as IXmlLineInfo;Di2015NewLineif (node != null && node.HasLineInfo()) ...Di2015NewLine
21141141Di2015UniqueSeparator<% @ServiceHost Service="MyService" Factory="System.ServiceModel.Activation.WebServiceHostFactory" Language="C#" debug="true" %>Di2015NewLine
21141148Di2015UniqueSeparatorpublic interface IRepositoryDi2015NewLine{Di2015NewLine   IEnumerable<TEntity> Get<TEntity>(Expression<Func<TEntity, bool>> filter = null,Di2015NewLine        Func<IQueryable<TEntity>, IOrderedEnumerable<TEntity>> orderBy = null,Di2015NewLine        string includeProperties = "")Di2015NewLine}Di2015NewLine
21141148Di2015UniqueSeparatorpublic interface IRepository<TEntity>Di2015NewLine{Di2015NewLine   IEnumerable<TEntity> Get(Expression<Func<TEntity, bool>> filter = null,Di2015NewLine        Func<IQueryable<TEntity>, IOrderedEnumerable<TEntity>> orderBy = null,Di2015NewLine        string includeProperties = "")Di2015NewLine}Di2015NewLine
21141209Di2015UniqueSeparator// Change to a bigger value if your x and y axis labels are not shown anymoreDi2015NewLinevolumeChart.ChartAreas[0].InnerPlotPosition.X = 0;Di2015NewLinevolumeChart.ChartAreas[0].InnerPlotPosition.Y = 0;Di2015NewLineDi2015NewLine// Height and width are in percentage (%)Di2015NewLinevolumeChart.ChartAreas[0].InnerPlotPosition.Height = 100;Di2015NewLinevolumeChart.ChartAreas[0].InnerPlotPosition.Width = 100;Di2015NewLine
21141279Di2015UniqueSeparator for (int i = 0; i < dataGridView1.Rows.Count; i++)Di2015NewLine
21141279Di2015UniqueSeparatori
21141279Di2015UniqueSeparatori
21141369Di2015UniqueSeparatorRootObject
21141369Di2015UniqueSeparator var root = JsonConvert.DeserializeObject(jSONSurvey);Di2015NewLine Console.WriteLine(root.id);Di2015NewLine
21141369Di2015UniqueSeparatorRootObject
21141394Di2015UniqueSeparatorvar zonedCountries = (from dz in db.DeliveryZones.Include(d => d.Places)Di2015NewLine                      where model.DeliveryZones.Contains(dz.ID)Di2015NewLine                      from p in dz.PlacesDi2015NewLine                      select p);Di2015NewLine
21141394Di2015UniqueSeparatorSelectMany
21141394Di2015UniqueSeparatorvar zonedCountries = db.DeliveryZones.Include(d => d.Places)Di2015NewLine                       .Where(dz => model.DeliveryZones.Contains(dz.ID))Di2015NewLine                       .SelectMany(dz => dz.Places);Di2015NewLine
21141394Di2015UniqueSeparatorDistinct()
21141394Di2015UniqueSeparatorToList()
21141395Di2015UniqueSeparatorTools
21141395Di2015UniqueSeparatorOptions
21141395Di2015UniqueSeparatorEnvironment
21141395Di2015UniqueSeparatorKeyboard
21141395Di2015UniqueSeparatorEdit.CommentSelection
21141395Di2015UniqueSeparatorEdit.FormatDocument
21141398Di2015UniqueSeparatornull
21141398Di2015UniqueSeparatorpublic OleDbConnection myConnection;Di2015NewLine
21141398Di2015UniqueSeparatorpublic OleDbConnection myConnection = new OleDbConnection(ConnectionString);Di2015NewLine
21141398Di2015UniqueSeparatormyConnection = new OleDbConnection(ConnectionString);Di2015NewLineOleDbCommand myCmd = new OleDbCommand("SPtblCities", myConnection);Di2015NewLine
21141433Di2015UniqueSeparator<New ...>
21141545Di2015UniqueSeparatorprivate static void Invert(XmlNode startingNode, string path)Di2015NewLine{Di2015NewLine    XmlNode node = startingNode.SelectSingleNode(path);Di2015NewLine    if (node != null)Di2015NewLine    {Di2015NewLine        XmlNode firstChild = node.SelectSingleNode("*");Di2015NewLineDi2015NewLine        if(firstChild != null)Di2015NewLine        {Di2015NewLine            XmlNodeList others = Di2015NewLine                 node.SelectNodes("node()[not(self::*)] | *[position() > 1]");Di2015NewLine            foreach (XmlNode other in others)Di2015NewLine            {Di2015NewLine                firstChild.AppendChild(other);Di2015NewLine            }Di2015NewLine            node.ParentNode.ReplaceChild(firstChild, node);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21141545Di2015UniqueSeparator Invert(doc, "/root/body/nodeList/node");Di2015NewLine
21141545Di2015UniqueSeparator<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">Di2015NewLine  <xsl:output method="xml" indent="yes" omit-xml-declaration="yes"/>Di2015NewLineDi2015NewLine  <xsl:template match="@* | node()">Di2015NewLine    <xsl:copy>Di2015NewLine      <xsl:apply-templates select="@* | node()"/>Di2015NewLine    </xsl:copy>Di2015NewLine  </xsl:template>Di2015NewLineDi2015NewLine  <xsl:template match="nodeList/node">Di2015NewLine    <xsl:apply-templates select="*[1]" mode="newParent" />Di2015NewLine  </xsl:template>Di2015NewLineDi2015NewLine  <xsl:template match="*" mode="newParent">Di2015NewLine    <xsl:copy>Di2015NewLine      <xsl:apply-templates select="@*" />Di2015NewLine      <xsl:apply-templates select="../node()[generate-id() !=Di2015NewLine                                             generate-id(current())]" />Di2015NewLine    </xsl:copy>Di2015NewLine  </xsl:template>Di2015NewLine</xsl:stylesheet>Di2015NewLine
21141659Di2015UniqueSeparator@helper PropriÃ©tÃ©s(List<string> propriÃ©tÃ©s)Di2015NewLine{Di2015NewLine    foreach (var p in propriÃ©tÃ©s)Di2015NewLine    {Di2015NewLine    <span>p</span>Di2015NewLine    }Di2015NewLine}Di2015NewLine
21141659Di2015UniqueSeparatorformat: <text>@PropriÃ©tÃ©s(@item.PropriÃ©tÃ©s)</text>Di2015NewLine
21141917Di2015UniqueSeparatorSTART
21141917Di2015UniqueSeparator/D
21141917Di2015UniqueSeparatorstart "" /D "C:\\Program Files (x86)\\myApp" "C:\\Program Files (x86)\\myApp\\myApp.exe"Di2015NewLine
21142005Di2015UniqueSeparatorDirectorateList
21142005Di2015UniqueSeparatorDirectorateID
21142005Di2015UniqueSeparatorpublic ActionResult EditNonMember(int id, string feedback, string courseDateID, Di2015NewLine                                                                 string courseID)Di2015NewLine{Di2015NewLine    //code to retrieve data hereDi2015NewLine    var userDetails=repositary.GetUserFromSomeId(id);Di2015NewLine    vm.Employers=GetEmployers();Di2015NewLine    vm.Employer = userDetails.Employer;Di2015NewLine    vm.DirectorateList=GetDirectorateListForEmployer(userDetails.Employer);Di2015NewLine    vm.DirectorateID = userDetails.DirectorateID;Di2015NewLineDi2015NewLine    return View(vm);Di2015NewLine}Di2015NewLineprivate List<SelectListItem> GetEmployers()Di2015NewLine{Di2015NewLine  // to do : Return all employers here in List<SelectListItem>Di2015NewLine}Di2015NewLineprivate List<SelectListItem> GetDirectorateListForEmployer(int employerId)Di2015NewLine{Di2015NewLine  // to do : Return all Directorates for the selected employer Di2015NewLine}Di2015NewLine
21142015Di2015UniqueSeparator[Required]
21142015Di2015UniqueSeparatorLocation
21142015Di2015UniqueSeparator//You don't need a [Required] annotation on an int because it isn't nullableDi2015NewLinepublic int LocationID {get; set;}Di2015NewLineDi2015NewLinepublic virtual DbGeographicalArea Location { get; set; }Di2015NewLine
21142015Di2015UniqueSeparatorLocationID
21142015Di2015UniqueSeparatorUsers
21142015Di2015UniqueSeparatorDbGeographicalAreas
21142015Di2015UniqueSeparatorInclude
21142030Di2015UniqueSeparatorWindowsIdentity
21142100Di2015UniqueSeparatorawait
21142249Di2015UniqueSeparator(?<!(?:WWW|XXX)\\s*)(AAA|BBB)Di2015NewLine
21142249Di2015UniqueSeparator(?<!         # Assert it's impossible to match this before the current position:Di2015NewLine (?:WWW|XXX) # WWW or XXXDi2015NewLine \\s*         # followed by any number of whitespace charactersDi2015NewLine)            # End of lookbehindDi2015NewLine(AAA|BBB)    # Match AAA or BBB, capture the result in group 1Di2015NewLine
21142315Di2015UniqueSeparatorBeginAccept
21142315Di2015UniqueSeparatorBeginReceive
21142315Di2015UniqueSeparatorBeginSend
21142327Di2015UniqueSeparator@Html.DropDownList("id_category", new SelectList(list_cat, "Id_category", "CName", Model.Id_category))Di2015NewLine
21142370Di2015UniqueSeparatorPadLeft
21142370Di2015UniqueSeparatorstring result = myString.PadLeft(10, '0');Di2015NewLine
21142419Di2015UniqueSeparatorprivate bool ValidateChildren()Di2015NewLine {Di2015NewLine   bool IsValid = true;Di2015NewLine   // Clear error provider only once.Di2015NewLine   usrError.Clear(); Di2015NewLineDi2015NewLine   //use if condition for every condtion, dont use else-ifDi2015NewLine   if (string.IsNullOrEmpty(usrTxtBox.Text.Trim()))Di2015NewLine      {Di2015NewLine       usrError.SetError(usrTxtBox, "field required!"); Di2015NewLine       IsValid =false;              Di2015NewLine      }Di2015NewLineDi2015NewLine   if (!Regex.IsMatch(usrTxtBox.Text, "</REGEX PATTERN/>"))Di2015NewLine      {            Di2015NewLine       usrError.SetError(usrTxtBox, "</ERROR MESSAGE/>");Di2015NewLine        IsValid =false; Di2015NewLine      }Di2015NewLine    return IsValid ;Di2015NewLine  }Di2015NewLine
21142419Di2015UniqueSeparator   private void rgstr_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine      if (ValidateChildren())Di2015NewLine        {Di2015NewLine          // validDi2015NewLine        }Di2015NewLine      elseDi2015NewLine       {Di2015NewLine         //Error will shown respective control with error providerDi2015NewLine       }Di2015NewLine    }Di2015NewLine
21142451Di2015UniqueSeparatorvar f = File.Open("somepath");Di2015NewLinef.Write(foo);Di2015NewLinethrow new Exception();Di2015NewLinef.Close();Di2015NewLinef.Dispose();Di2015NewLine
21142451Di2015UniqueSeparatorusing(var f = File.Open("somepath")){Di2015NewLine    throw new Exception();Di2015NewLine}Di2015NewLine
21142451Di2015UniqueSeparatorFileStream f = File.Open("somepath");Di2015NewLinetry{Di2015NewLine    throw new Exception();Di2015NewLine}finally{Di2015NewLine    f.Close();Di2015NewLine}Di2015NewLine
21142475Di2015UniqueSeparatorWeatherInfo
21142475Di2015UniqueSeparatorpublic class WeatherInfoDi2015NewLine{Di2015NewLine    public WeatherInfo(string date, string tempLow, string tempHigh)Di2015NewLine    {Di2015NewLine        this.Date = date;Di2015NewLine        this.TempLow = tempLow;Di2015NewLine        this.TempHigh = tempHigh;Di2015NewLine    }Di2015NewLineDi2015NewLine    public string Date { get; private set; }Di2015NewLine    public string TempLow { get; private set; }Di2015NewLine    public string TempHigh { get; private set; }Di2015NewLine}Di2015NewLine
21142475Di2015UniqueSeparatorWeatherInfo weather = new WeatherInfo("01/01/2014", "56F", "89F");Di2015NewLine
21142475Di2015UniqueSeparatorWeatherInfo[]
21142475Di2015UniqueSeparatorWeatherInfo[] infos = new WeatherInfo[5];Di2015NewLine
21142475Di2015UniqueSeparatorinfos[0]
21142475Di2015UniqueSeparatorWeatherInfo
21142475Di2015UniqueSeparatorforeach (WeatherInfo info in infos)Di2015NewLine{Di2015NewLine    var mycommand = new SqlCommand("INSERT INTO RSS2 VALUES(@Date, @Templow, @Temphigh)", myConnection);Di2015NewLine    mycommand.Parameters.AddWithValue("@Date", info.Date);Di2015NewLine    mycommand.Parameters.AddWithValue("@Templow", info.TempLow);Di2015NewLine    mycommand.Parameters.AddWithValue("@Temphigh", info.TempHigh);Di2015NewLine    mycommand.ExecuteNonQuery();Di2015NewLine}Di2015NewLine
21142475Di2015UniqueSeparatorfor (i = 0; i < infos.Length; i++)Di2015NewLine{Di2015NewLine    SqlCommand myCommand = new SqlCommand(Di2015NewLine        "INSERT INTO RSS2 (Date, Templow, Temphigh)" +Di2015NewLine        "Values ('" + infos[i].Date + "','" + infos[i].TempLow + "','" + infos[i].TempHigh + "')", Di2015NewLine        myConnection);Di2015NewLine    myCommand.ExecuteNonQuery();Di2015NewLine}Di2015NewLine
21142475Di2015UniqueSeparator1; SELECT * FROM table;
21142475Di2015UniqueSeparatorstring
21142562Di2015UniqueSeparator    private void IncrementLikes_Click(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        //where Likes is your ObservableCollection keeping data from databaseDi2015NewLine        LikeItem oneAndOnly = Likes.First() as LikeItem;Di2015NewLine        //you pulled one and only LikeItem object, now you increment the likes countDi2015NewLine        oneAndOnly.LikesCount += 1;Di2015NewLine        //and here you tell the database that the changes need to be saved.Di2015NewLine        //This call can be delayed to the OnNavigatedFrom event,Di2015NewLine        //  depending on your needs.Di2015NewLine        LikeDB.SubmitChanges();Di2015NewLine    }Di2015NewLine
21142562Di2015UniqueSeparator    //your database contextDi2015NewLine    private YourDatabaseDataContext LikeDB;Di2015NewLineDi2015NewLine    // Define an observable collection property that controls can bind to.Di2015NewLine    private ObservableCollection<LikeItem> _likes;Di2015NewLine    public ObservableCollection<LikeItem> LikesDi2015NewLine    {Di2015NewLine        getDi2015NewLine        {Di2015NewLine            return _likes;Di2015NewLine        }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (_likes != value)Di2015NewLine            {Di2015NewLine                _likes = value;Di2015NewLine                NotifyPropertyChanged("Likes");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    // ConstructorDi2015NewLine    public MainPage()Di2015NewLine    {Di2015NewLine        InitializeComponent();Di2015NewLine        LikeDB = new YourDatabaseDataContext(YourDatabaseDataContext.DBConnectionString);Di2015NewLine        this.DataContext = this;Di2015NewLine    }Di2015NewLineDi2015NewLine    protected override void OnNavigatedTo(System.Windows.Navigation.NavigationEventArgs e)Di2015NewLine    {Di2015NewLine        // Define the query to gather all of the to-do items.Di2015NewLine        var likesFromDB = from LikeItem like in LikeDB.LikesDi2015NewLine                            select like;Di2015NewLineDi2015NewLine        // Execute the query and place the results into a collection.Di2015NewLine        Likes = new ObservableCollection<LikeItem>(likesFromDB);Di2015NewLineDi2015NewLine        // Call the base method.Di2015NewLine        base.OnNavigatedTo(e);Di2015NewLine    }Di2015NewLine
21142621Di2015UniqueSeparatorget
21142621Di2015UniqueSeparatorset
21142621Di2015UniqueSeparatorget
21142621Di2015UniqueSeparatorif (someEntity.AnotherEntity != null) // this will lazy load the instanceDi2015NewLine    someEntity.AnotherEntity = null; // now tell EF to remove the associationDi2015NewLine
21142649Di2015UniqueSeparatorOnLoad
21142649Di2015UniqueSeparatorshowDBDropDown
21142649Di2015UniqueSeparator<asp:DropDownList runat="server" ID="showDBDropDown" />Di2015NewLine
21142649Di2015UniqueSeparatorshowDBDropDown
21142649Di2015UniqueSeparatorPage_Load
21142649Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (!IsPostBack)Di2015NewLine    {Di2015NewLine        BindDropdowns();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void BindDropdowns()Di2015NewLine{Di2015NewLine    String queryString = "SELECT TAG from dbo.Tags";Di2015NewLine    List<String> tagsShow = new List<String>();Di2015NewLine    tagsShow.Add("Show all");Di2015NewLine    using (SqlConnection conn = new SqlConnection(info.connectionString))Di2015NewLine    using (var cmd = conn.CreateCommand())Di2015NewLine    {Di2015NewLine        conn.Open();Di2015NewLine        cmd.CommandText = queryString;Di2015NewLine        using (SqlDataReader reader = cmd.ExecuteReader())Di2015NewLine        {Di2015NewLine            while (reader.Read())Di2015NewLine            {Di2015NewLine                tagsShow.Add(reader.GetString(0));Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    showDBDropDown.DataSource = tagsShow;Di2015NewLine    showDBDropDown.DataBind();Di2015NewLine}Di2015NewLine
21142888Di2015UniqueSeparatorvar truncated = new DateTime(dtNow.Year, dtNow.Month, dtNow.Day,Di2015NewLine                             dtNow.Hour, dtNow.Minute, dtNow.Second);Di2015NewLine// Use truncated as the parameter in your commandDi2015NewLine
21142888Di2015UniqueSeparatorvar truncated = dtNow.TruncateToSecond();Di2015NewLine
21143066Di2015UniqueSeparatorpublic IEnumerable<TEntity> GetAll(string[] includes)Di2015NewLine{Di2015NewLine    var query = this.dbEntitySet;Di2015NewLineDi2015NewLine    foreach (var include in includes)Di2015NewLine        query = query.Include(include);Di2015NewLineDi2015NewLine    return query;Di2015NewLine}Di2015NewLine
21143066Di2015UniqueSeparatorInclude
21143066Di2015UniqueSeparatorDbSet
21143066Di2015UniqueSeparatorDbQuery
21143112Di2015UniqueSeparatorpublic interface IBaseClassDi2015NewLine{Di2015NewLine    Foo GetValue();Di2015NewLineDi2015NewLine    void SetValue(Foo value);Di2015NewLine}Di2015NewLineDi2015NewLinepublic abstract class BaseClass<T> : IBaseClassDi2015NewLine    where T : FooDi2015NewLine{Di2015NewLine    public T GetValue<T>()Di2015NewLine    { /* ... */ }Di2015NewLineDi2015NewLine    public void SetValue<T>(T value)Di2015NewLine    { /* ... */ }Di2015NewLineDi2015NewLine    Foo IBaseClass.GetValue()    // Explicit interface method implementationDi2015NewLine    {Di2015NewLine        return (Foo)GetValue<T>();Di2015NewLine    }Di2015NewLineDi2015NewLine    void IBaseClass.SetValue(Foo value)    // Explicit interface method impl.Di2015NewLine    {Di2015NewLine        SetValue<T>((T)value);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21143112Di2015UniqueSeparatorIBaseClass
21143112Di2015UniqueSeparatorBaseClass<?>
21143112Di2015UniqueSeparatorIBaseClass myClass;Di2015NewLineFoo f = myClass.GetValue();Di2015NewLine
21143167Di2015UniqueSeparatorRequest
21143309Di2015UniqueSeparatorMainForm
21143309Di2015UniqueSeparatorForm2
21143309Di2015UniqueSeparatorMainForm
21143310Di2015UniqueSeparatorDictionary<TKey, TValue>
21143310Di2015UniqueSeparatorEquals()
21143310Di2015UniqueSeparatorGetHashCode()
21143310Di2015UniqueSeparatorEquals()
21143310Di2015UniqueSeparatorGetHashCode()
21143310Di2015UniqueSeparatorTuple<...>
21143310Di2015UniqueSeparatorExpression.New(Di2015NewLine    Type.GetType("System.Tuple`" + fields.Length)Di2015NewLine        .MakeGenericType(fields.Select(studentType.GetProperty), Di2015NewLine    fields.Select(f => Expression.PropertyOrField(itemParam, f))Di2015NewLine)Di2015NewLine
21143327Di2015UniqueSeparatorAction
21143327Di2015UniqueSeparatorpublic void Foo(Action action) {}Di2015NewLine
21143327Di2015UniqueSeparatorFoo(() => SomeMethod(firstArgument, secondArgument));Di2015NewLine
21143327Di2015UniqueSeparatorList<Action>
21143436Di2015UniqueSeparatorValidationRule
21143436Di2015UniqueSeparatorIDataErrorInfo
21143436Di2015UniqueSeparator<StackPanel>Di2015NewLine    <CheckBox x:Name="requirePinNumberCheckBox" IsChecked="{Binding Path=RequirePinNumber, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">Require PIN number</CheckBox>Di2015NewLine    <TextBox x:Name="pinNumberTextBox" Di2015NewLine             PreviewTextInput="pinNumberTextBox_PreviewTextInput"Di2015NewLine             Text="{Binding PinNumber, ValidatesOnDataErrors=True}"Di2015NewLine             ToolTip="{Binding (Validation.Errors).CurrentItem.ErrorContent, RelativeSource={RelativeSource Self}}" />Di2015NewLine</StackPanel>Di2015NewLine
21143436Di2015UniqueSeparator   public class ViewModel : IDataErrorInfo, INotifyPropertyChangedDi2015NewLine    {Di2015NewLine            private bool _requirePinNumber;Di2015NewLine            public bool RequirePinNumberDi2015NewLine            {Di2015NewLine                getDi2015NewLine                {Di2015NewLine                    return this._requirePinNumber;Di2015NewLine                }Di2015NewLine                setDi2015NewLine                {Di2015NewLine                    this._requirePinNumber = value;Di2015NewLine                    if (this.PropertyChanged != null)Di2015NewLine                    {Di2015NewLine                        this.PropertyChanged(this, new PropertyChangedEventArgs("RequirePinNumber"));Di2015NewLine                        this.PropertyChanged(this, new PropertyChangedEventArgs("PinNumber"));Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            private string _pinNumber;Di2015NewLine            public string PinNumber Di2015NewLine            { Di2015NewLine                getDi2015NewLine                {Di2015NewLine                    return this._pinNumber;Di2015NewLine                }Di2015NewLine                setDi2015NewLine                {Di2015NewLine                    this._pinNumber = value;Di2015NewLine                    if (this.PropertyChanged != null)Di2015NewLine                    {Di2015NewLine                        this.PropertyChanged(this, new PropertyChangedEventArgs("PinNumber"));Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            public string ErrorDi2015NewLine            {Di2015NewLine                get Di2015NewLine                { Di2015NewLine                    throw new NotImplementedException(); Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            public string this[string columnName]Di2015NewLine            {Di2015NewLine                get Di2015NewLine                {Di2015NewLine                    if (columnName == "PinNumber") Di2015NewLine                    {Di2015NewLine                        if (this.RequirePinNumber && string.IsNullOrEmpty(this.PinNumber))Di2015NewLine                        {Di2015NewLine                            return "PIN number cannot be blank.";Di2015NewLine                        }Di2015NewLine                    }Di2015NewLine                    return string.Empty;Di2015NewLine                }Di2015NewLine            }Di2015NewLineDi2015NewLine            public event PropertyChangedEventHandler PropertyChanged;Di2015NewLine        }Di2015NewLine
21143580Di2015UniqueSeparatorvar convertedString = new StringBuilder();Di2015NewLineDi2015NewLineforeach(var hex in hexString.Split('-'))Di2015NewLine{Di2015NewLine    var unicode = int.Parse(hex, NumberStyles.HexNumber);Di2015NewLine    convertedString.Append((char)unicode);Di2015NewLine}Di2015NewLineDi2015NewLinereturn convertedString.ToString();Di2015NewLine
21143652Di2015UniqueSeparatorprivate void Canvas_MouseDown_1(object sender, System.Windows.Input.MouseButtonEventArgs e)Di2015NewLine{Di2015NewLine    // Console.WriteLine("Clicked");Di2015NewLine     if (e.ButtonState == MouseButtonState.Pressed)Di2015NewLine      {Di2015NewLine          offset = e.GetPosition(sender as FrameworkElement);Di2015NewLine          Console.WriteLine("Offset: " + offset.ToString());Di2015NewLine          currentPoint = e.GetPosition(sender as FrameworkElement); //  Change hereDi2015NewLine      }Di2015NewLine}Di2015NewLineDi2015NewLineprivate void Canvas_MouseMove_1(object sender, System.Windows.Input.MouseEventArgs e)Di2015NewLine{Di2015NewLine      if (e.LeftButton == MouseButtonState.Pressed)Di2015NewLine      {Di2015NewLine            Line line = new Line();Di2015NewLine            line.Stroke = SystemColors.WindowFrameBrush;Di2015NewLine            line.X1 = currentPoint.X;Di2015NewLine            line.Y1 = currentPoint.Y;Di2015NewLine            line.X2 = e.GetPosition(sender as FrameworkElement).X; //  Change hereDi2015NewLine            line.Y2 = e.GetPosition(sender as FrameworkElement).Y; //  Change hereDi2015NewLineDi2015NewLine            currentPoint = e.GetPosition(sender as FrameworkElement); //  Change hereDi2015NewLineDi2015NewLine            canvas.Children.Add(line);Di2015NewLine      }Di2015NewLine}Di2015NewLine
21143652Di2015UniqueSeparatorMouseButtonEventArgs.GetPosition
21143652Di2015UniqueSeparatorMouseEventArgs.GetPosition
21143652Di2015UniqueSeparatorthis
21143652Di2015UniqueSeparatorWindow
21143652Di2015UniqueSeparatorsender
21143652Di2015UniqueSeparatorCanvas
21143652Di2015UniqueSeparatorCanvas
21143652Di2015UniqueSeparatorLine
21143652Di2015UniqueSeparatorCanvas
21143652Di2015UniqueSeparatorCanvas
21143666Di2015UniqueSeparator(char)3
21143666Di2015UniqueSeparatorprivate const int MaxResponse = 42;Di2015NewLineprivate const int STX = 2;Di2015NewLineprivate const int ETX = 3;Di2015NewLineprivate byte[MaxResponse] response;Di2015NewLineprivate int responseLength;Di2015NewLineDi2015NewLinevoid sp_DataReceived(object sender, SerialDataReceivedEventArgs e)Di2015NewLine{Di2015NewLine   var sp = (SerialPort)sender;Di2015NewLine   int cnt = sp.BytesToReceive;Di2015NewLine   for (int ix = 0; ix < cnt; ++ix) {Di2015NewLine       byte b = (byte)sp.ReadByte();Di2015NewLine       if (responseLength == 0 && b != STX) continue;Di2015NewLine       if (b != ETX) response[responseLength++] = b;Di2015NewLine       else {Di2015NewLine           var str = Encoding.ASCII.GetString(response, 0, responseLength);Di2015NewLine           HandleResponse(str);Di2015NewLine           responseLength = 0;Di2015NewLine       }Di2015NewLine   }Di2015NewLine}Di2015NewLine
21143780Di2015UniqueSeparatorpublic interface AuditableDi2015NewLine{Di2015NewLine    string    CreatedById { get; set; }Di2015NewLine    DateTime? CreatedTime { get; set; }Di2015NewLine    string    UpdatedById { get; set; }Di2015NewLine    DateTime? UpdatedTime { get; set; }Di2015NewLine}Di2015NewLine
21143780Di2015UniqueSeparatorvar userId = Current.User.Identity.Name.ToUpper();   Di2015NewLinevar entity = entityInfo.Entity as Auditable;    Di2015NewLineif (entity != null) { /* set the audit values */ }Di2015NewLine
21143886Di2015UniqueSeparator[HttpPost]Di2015NewLinepublic ActionResult GetSessionVariable()Di2015NewLine{Di2015NewLine    const string sessionVariableName = "MySessionVariable";Di2015NewLineDi2015NewLine    var sessionVariable = Session[sessionVariableName] as string;Di2015NewLineDi2015NewLine    if (sessionVariable == null)Di2015NewLine    {Di2015NewLine        Session[sessionVariableName] = "No";Di2015NewLine        sessionVariable = "No";Di2015NewLine    }Di2015NewLineDi2015NewLine    return Content(sessionVariable);Di2015NewLine}Di2015NewLine
21143886Di2015UniqueSeparator<form id="MyForm">Di2015NewLine<fieldset>Di2015NewLine    <legend>My Form</legend>Di2015NewLine    <p>Di2015NewLine        <label>Radio buttons</label>Di2015NewLineDi2015NewLine        <input type="radio" name="radioYesNo" id="radioNo" value="No" checked="checked" />Di2015NewLine        <label for="radioNo">No</label>Di2015NewLineDi2015NewLine        <input type="radio" name="radioYesNo" id="radioYes" value="Yes" />Di2015NewLine        <label for="radioYes">Yes</label>Di2015NewLineDi2015NewLine        <button type="submit" onclick="UpdateRadioBox();">Update Radio Button</button>Di2015NewLine    </p>Di2015NewLine</fieldset>Di2015NewLine</form>Di2015NewLine
21143886Di2015UniqueSeparator<script>Di2015NewLineDi2015NewLine    function UpdateRadioBox() {Di2015NewLine        $("#MyForm").submit(Di2015NewLine                function () {Di2015NewLine                    var url = "Home/GetSessionVariable";Di2015NewLineDi2015NewLine                    $.ajaxDi2015NewLine                    (Di2015NewLine                        {Di2015NewLine                            type: "POST",Di2015NewLine                            url: url,Di2015NewLine                            success: function (data) {Di2015NewLine                                if (data == "Yes") {Di2015NewLine                                    $("#radioYes").attr('checked', 'checked');Di2015NewLine                                } else {Di2015NewLine                                    $("#radioNo").attr('checked', 'checked');Di2015NewLine                                }Di2015NewLine                            }Di2015NewLine                        }Di2015NewLine                    );Di2015NewLineDi2015NewLine                    return false;Di2015NewLine                }Di2015NewLine            );Di2015NewLine        }Di2015NewLineDi2015NewLine</script>Di2015NewLine
21143929Di2015UniqueSeparator+=
21143929Di2015UniqueSeparatorUPDATE MyTable SET overallRating=overallRating+1 WHERE ...Di2015NewLine
21144075Di2015UniqueSeparatorvar hubContext = GlobalHost.ConnectionManager.GetHubContext<NotificationHub>();Di2015NewLinehubContext.Groups.Add(connectionId, groupName);Di2015NewLine
21144258Di2015UniqueSeparator/api
21144258Di2015UniqueSeparatorpublic override void Configure(Container container)Di2015NewLine{Di2015NewLine    SetConfig(new EndpointHostConfig { ServiceStackHandlerFactoryPath = "api" });Di2015NewLine}Di2015NewLine
21144258Di2015UniqueSeparatorService
21144258Di2015UniqueSeparatorGetAppHost().Config.ServiceStackHandlerFactoryPathDi2015NewLine
21144258Di2015UniqueSeparatorAppHost.Instance.Config.WebHostUrlDi2015NewLine
21144258Di2015UniqueSeparatorToUrl()
21144258Di2015UniqueSeparator/
21144284Di2015UniqueSeparatorprotected MyConstructor() : this(null) { }  // This calls the other constructorDi2015NewLineDi2015NewLineprotected MyConstructor(object whatever)Di2015NewLine{Di2015NewLine    Frob(whatever);Di2015NewLine}Di2015NewLine
21144406Di2015UniqueSeparatormanager.setEntityTypeForResourceName("TestMethod", "Product");Di2015NewLine
21144406Di2015UniqueSeparatorvar query = entityQuery.from('TestMethod').toType("Product");Di2015NewLinereturn manager.executeQuery(query)Di2015NewLine
21144447Di2015UniqueSeparatorCount
21144447Di2015UniqueSeparatorUploader
21144447Di2015UniqueSeparatorselect new Di2015NewLine{ Di2015NewLine    Username = g.Key.UserName, Di2015NewLine    Photos = g.Where(i => i.Uploader != null).Count() Di2015NewLine};Di2015NewLine
21144788Di2015UniqueSeparatorprivate static Dictionary<int, List<IBatchServiceCallback>> Processes = Di2015NewLine                    new Dictionary<int, List<IBatchServiceCallback>>();Di2015NewLine
21144788Di2015UniqueSeparator[ServiceBehavior(InstanceContextMode = InstanceContextMode.PerSession)]Di2015NewLinepublic class BatchService : IBatchServiceDi2015NewLine
21144879Di2015UniqueSeparator        using (SqlDataAdapter adapter = new SqlDataAdapter(updateCommand, connection))Di2015NewLine
21144879Di2015UniqueSeparatorFill
21144879Di2015UniqueSeparator.SelectCommand
21144921Di2015UniqueSeparatorDoWork
21144921Di2015UniqueSeparatorDoWork
21145001Di2015UniqueSeparatortry
21145001Di2015UniqueSeparatortry {Di2015NewLine    try {Di2015NewLine        throw ...;Di2015NewLine    } catch(SpecificException) {Di2015NewLine        // HandleDi2015NewLine        throw;Di2015NewLine    }Di2015NewLine} catch(Exception) {Di2015NewLine    // HandleDi2015NewLine}Di2015NewLine
21145012Di2015UniqueSeparatorFindChild
21145012Di2015UniqueSeparatorpublic static T FindVisualChildByName<T> (this FrameworkElement elem, string name) where T : DependencyObjectDi2015NewLine    {Di2015NewLine        for (var i = 0; i < VisualTreeHelper.GetChildrenCount (elem); i++)Di2015NewLine        {Di2015NewLine            var child = VisualTreeHelper.GetChild (elem, i) as FrameworkElement;Di2015NewLine            if (child == null)Di2015NewLine                continue;Di2015NewLineDi2015NewLine            var controlName = child.GetValue (Control.NameProperty) as string;Di2015NewLine            if (controlName == name)Di2015NewLine                return child as T;Di2015NewLineDi2015NewLine            var result = FindVisualChildByName<T> (child, name);Di2015NewLine            if (result != null)Di2015NewLine                return result;Di2015NewLine        }Di2015NewLine        return null;Di2015NewLine    }Di2015NewLine
21145184Di2015UniqueSeparatorvar labels = Dictionary<string, Label> { { "A", label_0 }, { "B", label_1 }, ... };Di2015NewLine
21145184Di2015UniqueSeparatorforeach (var wa in wrong_answers)Di2015NewLine    labels[wa].Visible = false;Di2015NewLine
21145219Di2015UniqueSeparatorStartForm.dt
21145219Di2015UniqueSeparatorclassName.variableName
21145219Di2015UniqueSeparatorstatic
21145219Di2015UniqueSeparatorinstances
21145219Di2015UniqueSeparatorclass
21145219Di2015UniqueSeparatordt
21145219Di2015UniqueSeparatorinstance
21145219Di2015UniqueSeparatorinstance
21145219Di2015UniqueSeparatorclass
21145219Di2015UniqueSeparatorcurrent time
21145219Di2015UniqueSeparatorforms constructor
21145219Di2015UniqueSeparatorinstance variable
21145242Di2015UniqueSeparatorfunction(data)
21145242Di2015UniqueSeparatorfunction(data)
21145298Di2015UniqueSeparator.Name("whatYouWantForHtmlId")Di2015NewLine
21145331Di2015UniqueSeparators1 = Convert.ToDouble( _dr["Quantity"]);Di2015NewLine
21145331Di2015UniqueSeparators1 = (float) _dr["Quantity"];Di2015NewLine
21145434Di2015UniqueSeparatorDSN=myDsn;Uid=myUsername;Pwd=;Di2015NewLine
21145434Di2015UniqueSeparatorData Source=myDsn;User Id=uid;Password=pwd;Di2015NewLine
21145646Di2015UniqueSeparatorConcat
21145646Di2015UniqueSeparatorvar max = data.Max(p => p.Value.Count);Di2015NewLinevar result = Di2015NewLinedata.Select(p => new KeyValuePair<string, List<string>>(Di2015NewLine            p.Key,Di2015NewLine            p.Value.Count == max Di2015NewLine               ? p.Value Di2015NewLine               : p.Value.Concat(Enumerable.Repeat(p.Value.First(), Di2015NewLine                                                  max - p.Value.Count))Di2015NewLine                        .ToList())Di2015NewLine           );Di2015NewLine
21145794Di2015UniqueSeparatorIEnumerable<T>
21145794Di2015UniqueSeparatorICollection<T>
21145794Di2015UniqueSeparatorforeach
21145794Di2015UniqueSeparatorIEnumerable<T>
21145794Di2015UniqueSeparatorList<T>
21145794Di2015UniqueSeparator    static IEnumerable<string> GetSomeData()Di2015NewLine    {Di2015NewLine        using (var connection = new SqlConnection("..."))Di2015NewLine        {Di2015NewLine            connection.Open();Di2015NewLine            using (var command = new SqlCommand("select name from some_table", connection))Di2015NewLine            using (var reader = command.ExecuteReader())Di2015NewLine            {Di2015NewLine                yield return reader.GetString(0);Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
21145794Di2015UniqueSeparatorGetSomeData
21145794Di2015UniqueSeparatorList<T>
21145794Di2015UniqueSeparatorAdd
21145794Di2015UniqueSeparator        var list = new List<string>(GetSomeData());            Di2015NewLine
21145794Di2015UniqueSeparatorIEnumerable<T>
21145801Di2015UniqueSeparatorstatic void Main(string[] args)Di2015NewLine{Di2015NewLine var originalColor = Console.BackgroundColor;Di2015NewLine Console.BackgroundColor = ConsoleColor.Red;Di2015NewLine Console.Write("The background color is red. ");Di2015NewLine Console.BackgroundColor = originalColor;Di2015NewLine Console.ForegroundColor = ConsoleColor.Green;Di2015NewLine Console.Write("The foreground color is green");Di2015NewLine Console.ReadKey();Di2015NewLine}Di2015NewLine
21146008Di2015UniqueSeparatormethodName
21146008Di2015UniqueSeparatorclassName
21146008Di2015UniqueSeparatorstatic void GetClassMethod(string filename, string className, string methodName)Di2015NewLine{Di2015NewLine    var syntaxTree = SyntaxTree.ParseFile(filename);Di2015NewLine    var root = syntaxTree.GetRoot();Di2015NewLine    var @class = root.DescendantNodes()Di2015NewLine                      .OfType<ClassDeclarationSyntax>()Di2015NewLine                      .Where(md => md.Identifier.ValueText.Equals(className))Di2015NewLine                      .FirstOrDefault();Di2015NewLine    var method = @class.DescendantNodes()Di2015NewLine                      .OfType<MethodDeclarationSyntax>()Di2015NewLine                      .Where(md => md.Identifier.ValueText.Equals(methodName))Di2015NewLine                      .FirstOrDefault();Di2015NewLine}Di2015NewLine
21146120Di2015UniqueSeparatorUInt64
21146120Di2015UniqueSeparatorbinary(8)
21146120Di2015UniqueSeparatorUInt64
21146120Di2015UniqueSeparatorInt64
21146120Di2015UniqueSeparatorUInt64
21146120Di2015UniqueSeparator0xFFFFFFFFFFFFFFFF
21146120Di2015UniqueSeparator0
21146120Di2015UniqueSeparatorInt64
21146120Di2015UniqueSeparator-1
21146120Di2015UniqueSeparator0
21146154Di2015UniqueSeparator.ToDataSourceResult(request)
21146154Di2015UniqueSeparatorLeerExt_GraficoServicio
21146154Di2015UniqueSeparatorData
21146154Di2015UniqueSeparatorpublic ActionResult LeerExt_GraficoServicio(string txtFechaInicio, string txtFechaFin)Di2015NewLine{Di2015NewLine    return Json(GetServiciosByFecha(txtFechaInicio, txtFechaFin));Di2015NewLine}Di2015NewLine
21146209Di2015UniqueSeparatordescendant-or-self
21146209Di2015UniqueSeparatordescendant-or-self::*[@class='value']Di2015NewLine
21146209Di2015UniqueSeparator-or-self
21146215Di2015UniqueSeparator.\\private$\\queuename_fail
21146215Di2015UniqueSeparatorprivate readonly MessageQueue _failQueue;Di2015NewLineprivate readonly MessageQueue _messageQueue;Di2015NewLine/* Other code here (cursor, peek action, run method, initialization etc) */Di2015NewLineDi2015NewLineprivate void dumpToFailQueue(Message message)Di2015NewLine{Di2015NewLine    var oldId = message.Id;Di2015NewLine    _failQueue.Send(message, MessageQueueTransactionType.Single);Di2015NewLineDi2015NewLine    // Remove the poisoned messageDi2015NewLine    _messageQueue.ReceiveById(oldId);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void moveToEnd(Message message)Di2015NewLine{Di2015NewLine    var oldId = message.Id;Di2015NewLine    _messageQueue.Send(message, MessageQueueTransactionType.Single);Di2015NewLineDi2015NewLine    // Remove the poisoned messageDi2015NewLine    _messageQueue.ReceiveById(oldId);Di2015NewLine}Di2015NewLine
21146318Di2015UniqueSeparatorvar resultsJSON = JsonConvert.DeserializeObject<List<AnnouncementListObject>>(json); //line1Di2015NewLine
21146339Di2015UniqueSeparator  <targets>Di2015NewLine    <target name="file" xsi:type="File" layout="${verbose}" fileName="${basedir}/${gdc:DataFile}.log" />Di2015NewLine  </targets>Di2015NewLine
21146339Di2015UniqueSeparatorNLog.GlobalDiagnosticContext.Set("DataFile", "SomeName");Di2015NewLine
21146339Di2015UniqueSeparator  <targets>Di2015NewLine    <target name="file" xsi:type="File" layout="${verbose}"fileName="${basedir}/${counter}.log" />Di2015NewLine  </targets>Di2015NewLine
21146339Di2015UniqueSeparator  <targets>Di2015NewLine    <target name="file" xsi:type="File" layout="${verbose}"fileName="${basedir}/MyDataStuff_${counter}.log" />Di2015NewLine  </targets>Di2015NewLine
21146575Di2015UniqueSeparatorpublic static void addSomething(int id)Di2015NewLine{Di2015NewLine    string msg = getStringMsg(id);Di2015NewLine    tryDi2015NewLine    {Di2015NewLine        //do lots of stuffDi2015NewLine        Console.WriteLine(msg)Di2015NewLine    }Di2015NewLine    catch (Exception e)Di2015NewLine    {Di2015NewLine        string errorMessage = (id == 1) ? Di2015NewLine           "Exception msg 1: " : "Exception msg 2: ";Di2015NewLineDi2015NewLine        throw new FooException(errorMessage + msg, e);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21146665Di2015UniqueSeparatorSystem.Data
21146886Di2015UniqueSeparator   var cmd = new NpgsqlCommand("select array_to_string(column, ', '),othercolumn,othercolumn from table",connection);Di2015NewLineDi2015NewLine   var l = new ArrayList();Di2015NewLine   l.Add("2th");Di2015NewLine   l.Add("3th");Di2015NewLineDi2015NewLine   cmd.Parameters.Add(new NpgsqlParameter("parameterlist", NpgsqlDbType.Array | NpgsqlDbType.Varchar));      Di2015NewLineDi2015NewLine   cmd.Parameters[0].Value = l.ToArray();Di2015NewLineDi2015NewLine   var dr = cmd.ExecuteReader();Di2015NewLineDi2015NewLine   while (dr.Read())Di2015NewLine     Console.Write("{0} \\n", dr[0].ToString());Di2015NewLineDi2015NewLine   Console.ReadKey();Di2015NewLine   conn.Close();Di2015NewLine
21146962Di2015UniqueSeparatorDropdownList
21146962Di2015UniqueSeparator@Html.DropDownList("CurrencyCode.CurrencyCode", new SelectList(ViewBag.Currencies, "CurrencyCode", "CurrencyCode"), Model.LocalCurrencyCode.CurrencyCode)Di2015NewLine
21147062Di2015UniqueSeparatorListBox
21147062Di2015UniqueSeparator listb1.Invoke((MethodInvoker)delegate {  listb1.Items.Add("testing"); });Di2015NewLine
21147125Di2015UniqueSeparatorMouseDown
21147125Di2015UniqueSeparatorMouseUp
21147125Di2015UniqueSeparatorMouseDown
21147125Di2015UniqueSeparatorMouseUp
21147125Di2015UniqueSeparatorprivate bool _run = false;Di2015NewLineDi2015NewLinepublic void button_MouseDown(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    _run = true;Di2015NewLine    MyAction();Di2015NewLine}Di2015NewLineDi2015NewLinepublic void button_MouseUp(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    _run = false;Di2015NewLine}Di2015NewLineDi2015NewLinepublic void MyAction()Di2015NewLine{Di2015NewLine    while(_run)Di2015NewLine    {Di2015NewLine        //You actionsDi2015NewLine    }Di2015NewLine}Di2015NewLine
21147125Di2015UniqueSeparatorBackgroundWorker
21147287Di2015UniqueSeparatorDockPanel
21147287Di2015UniqueSeparator <Setter Property="Template">Di2015NewLine                <Setter.Value>Di2015NewLine                    <ControlTemplate TargetType="{x:Type CheckBox}">Di2015NewLine                        <DockPanel>Di2015NewLine                            <Border x:Name="bg" BorderBrush="Yellow" BorderThickness="1" CornerRadius="1" Width="15" Height="15" Background="Purple"Di2015NewLine                                    DockPanel.Dock="Left">Di2015NewLine                                <Path x:Name="CheckMark"Di2015NewLine                                          Width="8"Di2015NewLine                                          Height="8"Di2015NewLine                                          VerticalAlignment="Center"Di2015NewLine                                          Data="M 0 0 L 8 8 M 0 8 L 8 0"Di2015NewLine                                          Stretch="Fill"Di2015NewLine                                          Stroke="Yellow"Di2015NewLine                                          StrokeEndLineCap="Round"Di2015NewLine                                          StrokeStartLineCap="Round"Di2015NewLine                                          StrokeThickness="1" />Di2015NewLine                            </Border>Di2015NewLineDi2015NewLine                            <ContentPresenter Margin="4,0,0,0"Di2015NewLine                                              VerticalAlignment="Center"/>Di2015NewLineDi2015NewLine                        </DockPanel>Di2015NewLineDi2015NewLine                        <ControlTemplate.Triggers>Di2015NewLine                            <Trigger Property="IsChecked" Value="false">Di2015NewLine                                <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />Di2015NewLine                            </Trigger>Di2015NewLine                        </ControlTemplate.Triggers>Di2015NewLine                    </ControlTemplate>Di2015NewLine                </Setter.Value>Di2015NewLine            </Setter>Di2015NewLine
21147388Di2015UniqueSeparator<asp:Button OnClientClick="String" />Di2015NewLine
21147509Di2015UniqueSeparatorORDER BY
21147509Di2015UniqueSeparatorinsert into dbo.[Agency]Di2015NewLine output inserted.IdDi2015NewLine select *,'cm',GETDATE(),'comp',GETDATE() from @AgencyHeadersDi2015NewLineORDER BY inserted.Id;Di2015NewLine
21147509Di2015UniqueSeparator.sort()
21147509Di2015UniqueSeparatorORDER BY
21147509Di2015UniqueSeparator'55' < '9'
21147604Di2015UniqueSeparatorstat = CML_EVENT_STATUS.EVENT_STATUS_BRAKEDi2015NewLine
21147604Di2015UniqueSeparatorstat = amp.ReadEventSticky(stat)Di2015NewLine
21147604Di2015UniqueSeparatorref
21147604Di2015UniqueSeparatorout
21147604Di2015UniqueSeparatorref
21147604Di2015UniqueSeparatorout
21147604Di2015UniqueSeparatorref
21147604Di2015UniqueSeparatorref
21147604Di2015UniqueSeparatorout
21147604Di2015UniqueSeparatorReadEventSticky
21147604Di2015UniqueSeparatorvoid
21147604Di2015UniqueSeparatorCML_EVENT_STATUS
21147895Di2015UniqueSeparatordynamic
21147895Di2015UniqueSeparatorcase-label
21147895Di2015UniqueSeparatordynamic thing = "thing";Di2015NewLine//and some later time `thing` changed toDi2015NewLinething = 1;Di2015NewLine
21147963Di2015UniqueSeparatornull
21147963Di2015UniqueSeparatorEventHandler handler = null;Di2015NewLinehandler = (o,e)=>{Di2015NewLine   Console.WriteLine("Clicked!");Di2015NewLine   c.Click -= handler;Di2015NewLine}Di2015NewLinec.Click += handler;Di2015NewLine
21148001Di2015UniqueSeparatorstring s = "lana del rey" Di2015NewLinestring d = s;Di2015NewLine
21148001Di2015UniqueSeparators
21148001Di2015UniqueSeparatord
21148001Di2015UniqueSeparators = "elvis presley";Di2015NewLine
21148001Di2015UniqueSeparator"elvis presley"
21148001Di2015UniqueSeparators
21148001Di2015UniqueSeparators
21148001Di2015UniqueSeparatord
21148001Di2015UniqueSeparator"lana del rey"
21148001Di2015UniqueSeparatorA
21148001Di2015UniqueSeparatorB
21148001Di2015UniqueSeparatorA
21148001Di2015UniqueSeparatorA
21148001Di2015UniqueSeparatorB
21148183Di2015UniqueSeparatorString
21148185Di2015UniqueSeparatorCustNo
21148185Di2015UniqueSeparatorvar myNumber = 12;Di2015NewLinevar xmlNodeExist = String.Format("Buchhaltung/Customers/CustNo[. = {0}]", myNumber.ToString());Di2015NewLine
21148185Di2015UniqueSeparatorFirst
21148185Di2015UniqueSeparatorvar myNumber = 12;Di2015NewLinevar xmlNodeExist = "Buchhaltung/Customers/CustNo";Di2015NewLinevar CustNoExist = xdoc.XPathSelectElements(xmlNodeExist).FirstOrDefault(x => (int)x == myNumber);Di2015NewLine
21148190Di2015UniqueSeparatorSqlParameter
21148190Di2015UniqueSeparatorSqlParameter
21148190Di2015UniqueSeparatorSqlCommand
21148190Di2015UniqueSeparatorSqlConnection
21148190Di2015UniqueSeparatorusing
21148190Di2015UniqueSeparatorstring mySqlCommandText = "INSERT INTO some_table VALUES (@Value1, @Value2, @Value3)";    Di2015NewLineDi2015NewLine//Wrap your connection/command in using blocksDi2015NewLineusing (var conn = new SqlConnection(mySqlConnectionString))Di2015NewLineusing (var cmd = new SqlCommand(mySqlCommandText, conn))Di2015NewLine{Di2015NewLine    //Add your values to the parametersDi2015NewLine    //This is how you avoid the SQL Injection attackDi2015NewLine    cmd.Parameters.AddWithValue("@Value1", myValue1);Di2015NewLine    cmd.Parameters.AddWithValue("@Value2", myValue2);Di2015NewLine    cmd.Parameters.AddWithValue("@Value3", myValue3);Di2015NewLineDi2015NewLine    conn.Open();Di2015NewLine    cmd.ExecuteNonQuery();Di2015NewLine }  //The cmd and conn objects are disposed of here as they are now out of scope. Di2015NewLine
21148215Di2015UniqueSeparatorList<string> duplicates = list1.Intersect(list2).ToList();Di2015NewLine
21148395Di2015UniqueSeparatorSELECT TOP 3 score from score_table order BY score descDi2015NewLine
21148446Di2015UniqueSeparatorLoggedInPersonViewModel
21148446Di2015UniqueSeparatorPerson
21148446Di2015UniqueSeparatorpublic ActionResult UpdateDetails()Di2015NewLine{Di2015NewLine    var person = repository.GetLoggedInPerson();Di2015NewLine    LoggedInPersonViewModel vm = new LoggedInPersonViewModel();Di2015NewLineDi2015NewLine    vm.PersonId = person.PersonId;Di2015NewLine    //Rest of propertiesDi2015NewLine    ...Di2015NewLineDi2015NewLine    //return view modelDi2015NewLine    return View(vm);Di2015NewLine}Di2015NewLine
21148483Di2015UniqueSeparatorTypeDescriptor
21148483Di2015UniqueSeparatorXmlSerializer
21148483Di2015UniqueSeparatorXmlSerializer
21148483Di2015UniqueSeparatorXmlAttributeOverrides
21148483Di2015UniqueSeparatorXmlSerializer
21148483Di2015UniqueSeparatorIXmlSerializable
21148483Di2015UniqueSeparatorXmlSerializer
21148483Di2015UniqueSeparatorXmlReader
21148483Di2015UniqueSeparatorXmlWriter
21148483Di2015UniqueSeparatorIXmlSerializable
21148542Di2015UniqueSeparatorList<object>
21148542Di2015UniqueSeparator// Pseudocode to serialize two objects into the same fileDi2015NewLineDi2015NewLine// First serialize to memory    Di2015NewLinebyte[] bytes1 = object1.Serialize();Di2015NewLinebyte[] bytes2 = object2.Serialize();    Di2015NewLineDi2015NewLine// Write header:Di2015NewLinefile.Write(2);              // Number of objectsDi2015NewLinefile.Write(bytes1.Length);  // Size of first objectDi2015NewLinefile.Write(bytes2.Length);  // Size of second objectDi2015NewLineDi2015NewLine// Write data:Di2015NewLinefile.Write(bytes1);Di2015NewLinefile.Write(bytes2);Di2015NewLine
21148542Di2015UniqueSeparatornumObjs = file.readInt();Di2015NewLinefor(i=0..numObjs)Di2015NewLine    size[i] = file.readInt();Di2015NewLine
21148542Di2015UniqueSeparatorSystem.IO.Packaging
21148557Di2015UniqueSeparatorWorkspace
21148557Di2015UniqueSeparatorWorkspaceInfo workspaceInfo = Workstation.Current.GetLocalWorkspaceInfo(path);Di2015NewLineWorkspace workspace = workspaceInfo.GetWorkspace(new TfsTeamProjectCollection(workspaceInfo.ServerUri);Di2015NewLine
21148557Di2015UniqueSeparatorTfsTeamProjectCollection tpc = new TfsTeamProjectCollection(new Uri("http://server:8080/tfs/DefaultCollection"));Di2015NewLineVersionControlServer vcs = tpc.GetService<VersionControlServer>();Di2015NewLineWorkspace workspace = vcs.CreateWorkspace("MERGE-TEMP");Di2015NewLineworkspace.Map("$/Merge-Source", @"C:\\Temp\\Merge\\Source");Di2015NewLineworkspace.Map("$/Merge-Target", @"C:\\Temp\\Merge\\Target");Di2015NewLine
21148557Di2015UniqueSeparatorNumConflicts
21148557Di2015UniqueSeparatorCheckin
21149171Di2015UniqueSeparatorToString("yyyy-MM")
21149171Di2015UniqueSeparatormm
21149171Di2015UniqueSeparatorM - The month, from 1 through 12.
21149171Di2015UniqueSeparatorMM - The month, from 01 through 12.
21149171Di2015UniqueSeparatorMMM - The abbreviated name of the month.
21149171Di2015UniqueSeparatorMMMM - The full name of the month.
21149321Di2015UniqueSeparatorSqlCommand(@"SELECT Title, Author FROM Books INNER JOIN Borrow ON Borrow.BookID = Books.BookID WHERE Borrow.StudID = '"+dataGridView2.SelectedRows[0].Cells[0].Value.ToString()+"';");Di2015NewLine
21149321Di2015UniqueSeparatorstring qryString = @"SELECT Title, Author FROM Books INNER JOIN Borrow ON Borrow.BookID = Books.BookID WHERE Borrow.StudID = '"+dataGridView2.SelectedRows[0].Cells[0].Value.ToString()+"';"Di2015NewLineDi2015NewLineSqlCommand(qryString);Di2015NewLine
21149321Di2015UniqueSeparatorpublic void loadGrid1()Di2015NewLine{Di2015NewLine    con.Open();Di2015NewLine    cmd = new SqlCommand(@"SELECT StudID, Stud_Lname, Stud_Fname FROM STUDENTS;",con);Di2015NewLine    rdr = cmd.ExecuteReader();Di2015NewLine    while (rdr.Read())Di2015NewLine    {Di2015NewLine        dataGridView2.Rows.Add(rdr[0].ToString(), rdr[1].ToString(), rdr[2].ToString());Di2015NewLine    }Di2015NewLineDi2015NewLine    // check if dataGridView2 has more than 0 rowsDi2015NewLine    // and then select the first row by defaultDi2015NewLine    if(dataGridView2.Rows.Count > 0)Di2015NewLine    {Di2015NewLine        dataGridView2.Rows[0].Selected = trueDi2015NewLine    }Di2015NewLine    con.Close();Di2015NewLine}Di2015NewLine
21149333Di2015UniqueSeparator    CryptoStream crStream = new CryptoStream(_MemoryStream, cryptic.CreateEncryptor(), CryptoStreamMode.Write);Di2015NewLine    using (var output = new FileStream(path.FullName, FileMode.Create, FileAccess.Write))Di2015NewLine    {Di2015NewLine        crStream.CopyTo(output);Di2015NewLine    }Di2015NewLine
21149452Di2015UniqueSeparatorstring one = "Hello";Di2015NewLinestring two = one;Di2015NewLineDi2015NewLinetwo = "World";Di2015NewLineDi2015NewLineConsole.WriteLine(one);Di2015NewLine
21149452Di2015UniqueSeparatortwo
21149452Di2015UniqueSeparatorone
21149467Di2015UniqueSeparatorfor
21149604Di2015UniqueSeparatorshimAccount.CreateCloudTableClient = () => { return shimTableClient; };Di2015NewLine
21149604Di2015UniqueSeparatorshimTable.ExecuteQueryOf1TableQueryOfM0TableRequestOptionsOperationContext<MyEntity>((query, options, context) =>Di2015NewLine{Di2015NewLine    return new List<MyEntity>();Di2015NewLine});Di2015NewLine
21149628Di2015UniqueSeparatorelseDi2015NewLine{Di2015NewLine    //not implemented, supposed to handle fragmented packetsDi2015NewLine
21149628Di2015UniqueSeparatorcls.dataphase = true;
21149654Di2015UniqueSeparator<Window x:Class="WpfApplication1.MainWindow"Di2015NewLine        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine        Title="MainWindow"Di2015NewLine        SizeToContent='Width'>Di2015NewLine  <Grid>Di2015NewLine    <Button Width='200' Content='The Button' />Di2015NewLine  </Grid>Di2015NewLine</Window>Di2015NewLine
21150022Di2015UniqueSeparator[ComVisible(true)]Di2015NewLinepublic class ScriptObjectDi2015NewLine{Di2015NewLine    public void LongRunningProcess(string data, object callback)Di2015NewLine    {Di2015NewLine        string result = String.Empty;Di2015NewLineDi2015NewLine        // do work, call the callbackDi2015NewLineDi2015NewLine        callback.GetType().InvokeMember(Di2015NewLine            name: "[DispID=0]",Di2015NewLine            invokeAttr: BindingFlags.Instance | BindingFlags.InvokeMethod,Di2015NewLine            binder: null,Di2015NewLine            target: callback,Di2015NewLine            args: new Object[] { result });Di2015NewLine    }Di2015NewLine}Di2015NewLine
21150022Di2015UniqueSeparatordynamic
21150022Di2015UniqueSeparator[ComVisible(true)]Di2015NewLinepublic class ScriptObjectDi2015NewLine{Di2015NewLine    public void LongRunningProcess(string data, object callback)Di2015NewLine    {Di2015NewLine        string result = String.Empty;Di2015NewLineDi2015NewLine        // do work, call the callbackDi2015NewLineDi2015NewLine        dynamic callbackFunc = callback;Di2015NewLine        callbackFunc(result);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21150022Di2015UniqueSeparatordynamic
21150022Di2015UniqueSeparatordynamic
21150022Di2015UniqueSeparatorpublic void CallbackTest(object callback)Di2015NewLine{Di2015NewLine    dynamic callbackFunc = callback;Di2015NewLine    callbackFunc("Hello!");Di2015NewLine}Di2015NewLine
21150022Di2015UniqueSeparatorwindow.external.CallbackTest(function(msg) { alert(msg) })Di2015NewLine
21150055Di2015UniqueSeparatorthis.BackColor = Properties.Settings.Default.myColor;Di2015NewLine
21150055Di2015UniqueSeparatorProperties.Settings.Default.Save();Di2015NewLine
21150058Di2015UniqueSeparatorToString
21150058Di2015UniqueSeparatornull
21150058Di2015UniqueSeparatorStringBuilder
21150058Di2015UniqueSeparatorAppend
21150058Di2015UniqueSeparatornull
21150058Di2015UniqueSeparatorStringBuilder sb = new StringBuilder("A");Di2015NewLinesb.Append((string) null);Di2015NewLinesb.Append("B");Di2015NewLineDi2015NewLineConsole.WriteLine(sb.ToString() == "AB"); // trueDi2015NewLine
21150225Di2015UniqueSeparatorstring text = "Booking ID: 27620 ..."; Di2015NewLineforeach (string line in new LineReader(() => new StringReader(text))Di2015NewLine{Di2015NewLine    string result = Regex.Replace(line, @"[^\\d]", "");Di2015NewLine    Console.WriteLine(result); // >> 27620Di2015NewLine}Di2015NewLine
21150225Di2015UniqueSeparator"[^\\d]"
21150225Di2015UniqueSeparator[]
21150225Di2015UniqueSeparator^\\d
21150225Di2015UniqueSeparator^
21150225Di2015UniqueSeparator\\d
21150225Di2015UniqueSeparatorReplace
21150225Di2015UniqueSeparatorstring input = "Booking ID: 27620";Di2015NewLineDictionary<string, string> dict = Di2015NewLine    new Dictionary<string, string>{key = input.Split(':')[0], Di2015NewLine                                 value = input.Split(':')[1]};Di2015NewLine
21150350Di2015UniqueSeparatorstring myConnection = "server=****;user=****;database=***;port=3306;password=***;";Di2015NewLineMySqlConnection myConn = new MySqlConnection(myConnection);Di2015NewLineMySqlCommand cmd = conn.CreateCommand(); Di2015NewLineSELECT DATEDIFF(NOW(), your_date)Di2015NewLinecmd.CommandText = "SELECT DATEDIFF(NOW(), end_date) FROM TABLE WHERE username = '" + this.username_txt.Text + "'";Di2015NewLinemyConn.Open();Di2015NewLineMessageBox.Show(cmd.ExecuteScalar());Di2015NewLine
21150350Di2015UniqueSeparatorTABLE
21150596Di2015UniqueSeparatorTestInformation testInfo = null;Di2015NewLine// ...Di2015NewLinestringRequestXML = XMLCommunicationPackets.SetTestInformation (testInfo, Di2015NewLine                                               testInfo.TestID, ...);Di2015NewLine//                                                     ^^ BANG!Di2015NewLine
21150596Di2015UniqueSeparatortestInfo
21150596Di2015UniqueSeparatornull
21150596Di2015UniqueSeparatornull
21150596Di2015UniqueSeparatorNullReferenceException
21150596Di2015UniqueSeparatorPopulateTestDataXml
21150596Di2015UniqueSeparatorTestInformation testInfo = PopulateTestDataXml(); // assign itDi2015NewLine
21150623Di2015UniqueSeparatorCREATE VIEW vwperson_lastproactivenote as Di2015NewLineSELECT people.person_id AS id, Di2015NewLine    (SELECT max(notes.note_date) AS maxDi2015NewLine     FROM notesDi2015NewLine     WHERE notes.person_id = people.person_id AND notes.note_type_id = 5) AS dateDi2015NewLineFROM people;Di2015NewLine
21150623Di2015UniqueSeparatorpublic class PersonLastProactiveCallDi2015NewLine{Di2015NewLine    [Required]Di2015NewLine    [ForeignKey("Id")]Di2015NewLine    public virtual Person Person { get; set; }Di2015NewLineDi2015NewLine    public DateTime? Date { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLine// On person modelDi2015NewLine[ForeignKey("Id")]Di2015NewLinepublic virtual PersonLastProactiveCall LastProactiveCall { get; set; }Di2015NewLine
21150623Di2015UniqueSeparatorDataContext.Set<Person>().Include("LastProactiveCall").Where(...);Di2015NewLineDi2015NewLineperson.LastProactiveCall.Date  // <-- Yay!!!!Di2015NewLine
21150701Di2015UniqueSeparatorMenu1.Items[0].NavigateUrl = AfeAttachment;Di2015NewLine
21150717Di2015UniqueSeparatorvar client = new WebClient();Di2015NewLineMessageBox.Show(client.DownloadString("http://localhost:28642/api/departments/Count"));Di2015NewLine
21150717Di2015UniqueSeparatorprivate void buttonGetDeptCount2_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    MessageBox.Show(GetScalarVal("http://localhost:28642/api/departments/Count"));Di2015NewLine}Di2015NewLineDi2015NewLineprivate string GetScalarVal(string uri)Di2015NewLine{Di2015NewLine    var client = new WebClient();Di2015NewLine    return client.DownloadString(uri);Di2015NewLine}Di2015NewLine
21150836Di2015UniqueSeparatorcmd.CommandText = "SELECT DATEDIFF(end_date, NOW()) FROM `as_users` WHERE username = '" + this.username_txt.Text + "'";Di2015NewLineconn.Open();Di2015NewLineint daysLeft = Convert.ToInt32(cmd.ExecuteScalar());Di2015NewLineMessageBox.Show("Days Left: " + daysLeft );Di2015NewLineif (daysLeft >= 0)Di2015NewLine{Di2015NewLine    MessageBox.Show("expired");Di2015NewLine}Di2015NewLine
21150852Di2015UniqueSeparatorvar res = new List<List<Tuple<double, double>>>();Di2015NewLine// w is the result of tile.list as per the sample in ?tile.listDi2015NewLinevar n = engine.Evaluate("length(w)").AsInteger()[0];Di2015NewLinefor (int i = 1; i <= n; i++)Di2015NewLine{Di2015NewLine    var x = engine.Evaluate("w[[" + i + "]]$x").AsNumeric().ToArray();Di2015NewLine    var y = engine.Evaluate("w[[" + i + "]]$y").AsNumeric().ToArray();Di2015NewLine    var t = x.Zip(y, (first, second) => Tuple.Create(first, second)).ToList();Di2015NewLine    res.Add(t);Di2015NewLine}Di2015NewLine
21150897Di2015UniqueSeparatorString insSQL2 = Di2015NewLine    "select * from Produtos where nome = '" + txtBuscaNome.Text + "'";Di2015NewLine//                                       ^^ here                   ^^ hereDi2015NewLine
21150930Di2015UniqueSeparatorFindOne
21150930Di2015UniqueSeparator// get the user entryDi2015NewLinevar s = new DirectorySearcher(entry);Di2015NewLines.Filter = "(samaccountname=" + username + ")";Di2015NewLineSearchResult user = s.FindOne();Di2015NewLineDi2015NewLine// read / do some changesDi2015NewLinevar d = user.GetDirectoryEntry();Di2015NewLined.Properties[...]Di2015NewLined.Invoke(...);Di2015NewLined.CommitChanges();Di2015NewLine
21150948Di2015UniqueSeparatorstartActivity(new Intent(context, YourActivity.class).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)Di2015NewLine
21150972Di2015UniqueSeparatorawait Windows.System.Launcher.LaunchUriAsync(new Uri("whatsapp:"));Di2015NewLine
21150972Di2015UniqueSeparatorwhatsapp://send?text=Hello%2C%20World!Di2015NewLine
21151204Di2015UniqueSeparatorQueryEngine
21151204Di2015UniqueSeparator[Export(typeof(IQueryEngine))]Di2015NewLinepublic class QueryEngine : QueryEngine Di2015NewLine
21151204Di2015UniqueSeparator[Import(typeof(IQueryEngine), RequiredCreationPolicy = CreationPolicy.Shared)]Di2015NewLinepublic IQueryEngine QueryEngineDi2015NewLine{Di2015NewLine    get { return _queryEngine; }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        _queryEngine = value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21151204Di2015UniqueSeparator[Export]
21151204Di2015UniqueSeparatorIQueryEngine
21151240Di2015UniqueSeparatorvar method = typeof(MyProcessor).GetMethod("CreateProcessor", new Type[] { typeof(string) });Di2015NewLinenew List<Type> { typeof(AAA), typeof(BBB) }.ForEach(x =>Di2015NewLine{Di2015NewLine    dynamic processor = method.MakeGenericMethod(x).Invoke(null, new[] { x.Name });Di2015NewLine    processor.process();Di2015NewLine});Di2015NewLine
21151574Di2015UniqueSeparatorpublic class CustomControlADi2015NewLine{Di2015NewLine     public virtual void OverrideableMethod()Di2015NewLine     {Di2015NewLine      // some codes hereDi2015NewLine      }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class UserControlB: CustomControlADi2015NewLine{Di2015NewLine     public override void OverrideableMethod()Di2015NewLine     {Di2015NewLine         // some codes hereDi2015NewLine     }Di2015NewLineDi2015NewLine}Di2015NewLine
21151574Di2015UniqueSeparatorUserContorlB.OverrideableMethod()
21151574Di2015UniqueSeparatorpublic class CustomControlADi2015NewLine{Di2015NewLine    public void OverrideableMethod()Di2015NewLine    {Di2015NewLine        // do somethingDi2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class UserContorlB : System.Web.UI.UserControlDi2015NewLine{Di2015NewLine    protected CustomControlA someVariableForCustomControlA;Di2015NewLineDi2015NewLine    public void OverrideableMethod()Di2015NewLine    {Di2015NewLine        if(some condition is true)Di2015NewLine        {Di2015NewLine             someVariableForCustomControlA.OverrideableMethod();Di2015NewLine        }Di2015NewLine        else Di2015NewLine        {Di2015NewLine             // do some logic hereDi2015NewLine        }   Di2015NewLine    }Di2015NewLine}Di2015NewLine
21151600Di2015UniqueSeparatoroffset
21151600Di2015UniqueSeparatorIDXGISurface*
21151600Di2015UniqueSeparatorIDXGISurface
21151833Di2015UniqueSeparatorOnLaunched
21151833Di2015UniqueSeparatorOnLaunched
21151833Di2015UniqueSeparatorOnFileActivated
21151833Di2015UniqueSeparatorOnLaunched
21151833Di2015UniqueSeparator/// <summary> Di2015NewLine/// Invoked when the application is launched normally by the end user.  Other entry points Di2015NewLine/// will be used when the application is launched to open a specific file, to display Di2015NewLine/// search results, and so forth. Di2015NewLine/// </summary> Di2015NewLine/// <param name="args">Details about the launch request and process.</param> Di2015NewLine
21151833Di2015UniqueSeparator/// <summary> Di2015NewLine// Handle file activations. Di2015NewLine/// </summary> Di2015NewLineprotected override async void OnFileActivated(FileActivatedEventArgs args) Di2015NewLine{ Di2015NewLine    Frame rootFrame = Window.Current.Content as Frame; Di2015NewLine    // Do not repeat app initialization when the Window already has content, Di2015NewLine    // just ensure that the window is active Di2015NewLine    if (rootFrame == null) Di2015NewLine    { Di2015NewLine        // Create a Frame to act as the navigation context and navigate to the first page Di2015NewLine        rootFrame = new Frame(); Di2015NewLine        // Associate the frame with a SuspensionManager key Di2015NewLine        SuspensionManager.RegisterFrame(rootFrame, "AppFrame"); Di2015NewLine        if (args.PreviousExecutionState == ApplicationExecutionState.Terminated) Di2015NewLine        { Di2015NewLine            // Restore the saved session state only when appropriate Di2015NewLine            try Di2015NewLine            { Di2015NewLine                await SuspensionManager.RestoreAsync(); Di2015NewLine            } Di2015NewLine            catch (SuspensionManagerException) Di2015NewLine            { Di2015NewLine                //Something went wrong restoring state. Di2015NewLine                //Assume there is no state and continue Di2015NewLine            } Di2015NewLine        } Di2015NewLineDi2015NewLine        // Place the frame in the current Window Di2015NewLine        Window.Current.Content = rootFrame; Di2015NewLine    } Di2015NewLineDi2015NewLine    if (rootFrame.Content == null) Di2015NewLine    { Di2015NewLine        if (!rootFrame.Navigate(typeof(MainPage))) Di2015NewLine        { Di2015NewLine            throw new Exception("Failed to create initial page"); Di2015NewLine        } Di2015NewLine    } Di2015NewLineDi2015NewLine    var p = rootFrame.Content as MainPage; Di2015NewLine    p.FileEvent = args; Di2015NewLine    p.ProtocolEvent = null; Di2015NewLine    p.NavigateToFilePage(); Di2015NewLineDi2015NewLine    // Ensure the current window is active Di2015NewLine    Window.Current.Activate(); Di2015NewLine} Di2015NewLine
21151833Di2015UniqueSeparatorMessageDialogs
21151833Di2015UniqueSeparatorActivated
21151833Di2015UniqueSeparatorExtendedSplash
21152019Di2015UniqueSeparatorSubtractBackgroundFromBuffer:
21152019Di2015UniqueSeparatorSubtractBackgroundFromBufferWithCalcOpt:
21152019Di2015UniqueSeparatorSubtractBackgroundFromBufferParallelFor:
21152019Di2015UniqueSeparatorSubtractBackgroundFromBufferBlockParallelFor:
21152019Di2015UniqueSeparatorSubtractBackgroundFromBufferPartitionedParallelForEach:
21152019Di2015UniqueSeparatorSubtractBackgroundFromBufferPartitionedParallelForEachHack:
21152019Di2015UniqueSeparatorSubtractBackgroundFromBufferBlockParallelFor
21152019Di2015UniqueSeparatorBuffer[i] = (ushort)Math.Max(difference, 0);Di2015NewLine
21152019Di2015UniqueSeparatorif (difference >= 0)Di2015NewLine    Buffer[i] = (ushort)difference;Di2015NewLineelseDi2015NewLine    Buffer[i] = 0;Di2015NewLine
21152019Di2015UniqueSeparatorSubtractBackgroundFromBuffer(ms):                                 2,062.23 Di2015NewLineSubtractBackgroundFromBufferWithCalcOpt(ms):                      2,245.42Di2015NewLineSubtractBackgroundFromBufferParallelFor(ms):                      4,021.58Di2015NewLineSubtractBackgroundFromBufferBlockParallelFor(ms):                   769.74Di2015NewLineSubtractBackgroundFromBufferPartitionedParallelForEach(ms):         827.48Di2015NewLineSubtractBackgroundFromBufferPartitionedParallelForEachHack(ms):     539.60Di2015NewLine
21152019Di2015UniqueSeparatorParallel.For
21152019Di2015UniqueSeparatorStopwatch
21152019Di2015UniqueSeparatorSystem.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();Di2015NewLineushort[] bgImg = GenerateRandomBuffer(327680, 818687447);Di2015NewLineDi2015NewLinefor (int i = 0; i < 1000; i++)Di2015NewLine{Di2015NewLine    Buffer = GenerateRandomBuffer(327680, 128011992);                Di2015NewLineDi2015NewLine    sw.Start();Di2015NewLine    SubtractBackgroundFromBuffer(bgImg);Di2015NewLine    sw.Stop();Di2015NewLine}Di2015NewLineDi2015NewLineConsole.WriteLine("SubtractBackgroundFromBuffer(ms): " + sw.Elapsed.TotalMilliseconds.ToString("N2"));Di2015NewLineDi2015NewLineDi2015NewLinepublic static ushort[] GenerateRandomBuffer(int size, int randomSeed)Di2015NewLine{Di2015NewLine    ushort[] buffer = new ushort[327680];Di2015NewLine    Random random = new Random(randomSeed);Di2015NewLineDi2015NewLine    for (int i = 0; i < size; i++)Di2015NewLine    {Di2015NewLine        buffer[i] = (ushort)random.Next(ushort.MinValue, ushort.MaxValue);Di2015NewLine    }Di2015NewLineDi2015NewLine    return buffer;Di2015NewLine}Di2015NewLine
21152019Di2015UniqueSeparatorpublic static void SubtractBackgroundFromBuffer(ushort[] backgroundBuffer)Di2015NewLine{Di2015NewLine    int bufferLength = Buffer.Length;Di2015NewLineDi2015NewLine    for (int index = 0; index < bufferLength; index++)Di2015NewLine    {Di2015NewLine        int difference = Buffer[index] - backgroundBuffer[index];Di2015NewLineDi2015NewLine        if (difference >= 0)Di2015NewLine            Buffer[index] = (ushort)difference;Di2015NewLine        elseDi2015NewLine            Buffer[index] = 0;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void SubtractBackgroundFromBufferWithCalcOpt(ushort[] backgroundBuffer)Di2015NewLine{Di2015NewLine    int bufferLength = Buffer.Length;Di2015NewLineDi2015NewLine    for (int index = 0; index < bufferLength; index++)Di2015NewLine    {Di2015NewLine        if (Buffer[index] < backgroundBuffer[index])Di2015NewLine        {Di2015NewLine            Buffer[index] = 0;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            Buffer[index] -= backgroundBuffer[index];Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void SubtractBackgroundFromBufferParallelFor(ushort[] backgroundBuffer)Di2015NewLine{Di2015NewLine    Parallel.For(0, Buffer.Length, (i) =>Di2015NewLine    {Di2015NewLine        int difference = Buffer[i] - backgroundBuffer[i];Di2015NewLine        if (difference >= 0)Di2015NewLine            Buffer[i] = (ushort)difference;Di2015NewLine        elseDi2015NewLine            Buffer[i] = 0;Di2015NewLine    });Di2015NewLine}        Di2015NewLineDi2015NewLinepublic static void SubtractBackgroundFromBufferBlockParallelFor(ushort[] backgroundBuffer)Di2015NewLine{Di2015NewLine    int blockSize = 4096;Di2015NewLineDi2015NewLine    Parallel.For(0, (int)Math.Ceiling(Buffer.Length / (double)blockSize), (j) =>Di2015NewLine    {Di2015NewLine        for (int i = j * blockSize; i < (j + 1) * blockSize; i++)Di2015NewLine        {Di2015NewLine            int difference = Buffer[i] - backgroundBuffer[i];Di2015NewLineDi2015NewLine            Buffer[i] = (ushort)Math.Max(difference, 0);                    Di2015NewLine        }Di2015NewLine    });Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void SubtractBackgroundFromBufferPartitionedParallelForEach(ushort[] backgroundBuffer)Di2015NewLine{Di2015NewLine    Parallel.ForEach(Partitioner.Create(0, Buffer.Length), range =>Di2015NewLine        {Di2015NewLine            for (int i = range.Item1; i < range.Item2; ++i)Di2015NewLine            {Di2015NewLine                if (Buffer[i] < backgroundBuffer[i])Di2015NewLine                {Di2015NewLine                    Buffer[i] = 0;Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    Buffer[i] -= backgroundBuffer[i];Di2015NewLine                }Di2015NewLine            }Di2015NewLine        });Di2015NewLine}Di2015NewLineDi2015NewLinepublic static void SubtractBackgroundFromBufferPartitionedParallelForEachHack(ushort[] backgroundBuffer)Di2015NewLine{Di2015NewLine    Parallel.ForEach(Partitioner.Create(0, Buffer.Length), range =>Di2015NewLine    {Di2015NewLine        for (int i = range.Item1; i < range.Item2; ++i)Di2015NewLine        {Di2015NewLine            unsafeDi2015NewLine            {Di2015NewLine                var nonNegative = Buffer[i] > backgroundBuffer[i];Di2015NewLine                Buffer[i] = (ushort)((Buffer[i] - backgroundBuffer[i]) *Di2015NewLine                    *((int*)(&nonNegative)));Di2015NewLine            }Di2015NewLine        }Di2015NewLine    });Di2015NewLine}Di2015NewLine
21152405Di2015UniqueSeparatornew Application()
21152405Di2015UniqueSeparatorApplication.Current
21152405Di2015UniqueSeparatorApplication app = Application.Current;Di2015NewLine
21152410Di2015UniqueSeparatorID
21152410Di2015UniqueSeparatorvar children = new HashSet<string>(list.SelectMany(x => x.MyList.Select(c => c.Id)));Di2015NewLinevar results = list.Where(x => !children.Contains(x.Id)).ToList();Di2015NewLine
21152410Di2015UniqueSeparatorHashSet
21152410Di2015UniqueSeparatorHashSet
21152410Di2015UniqueSeparatorvar results = list.Where(x => !list.Any(c => c.MyList.Contains(x))).ToList();Di2015NewLine
21152410Di2015UniqueSeparatorParent
21152410Di2015UniqueSeparatorpublic MyObj Parent { get; set; }Di2015NewLine
21152410Di2015UniqueSeparatorParent == null
21152410Di2015UniqueSeparatorvar results = list.Where(x => x.Parent == null).ToList();Di2015NewLine
21152485Di2015UniqueSeparatorAddress
21152485Di2015UniqueSeparatorstring
21152485Di2015UniqueSeparatorPerson
21152485Di2015UniqueSeparatorIXmlSerializable
21152485Di2015UniqueSeparatorAddress
21152485Di2015UniqueSeparatorIXmlSerializable
21152485Di2015UniqueSeparatorInnerXml
21152485Di2015UniqueSeparatorpublic class PersonDi2015NewLine{Di2015NewLine    public string Name { get; set; }Di2015NewLine    public InnerXml Address { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class InnerXml : IXmlSerializableDi2015NewLine{Di2015NewLine    public string Content { get; set; }Di2015NewLineDi2015NewLine    public System.Xml.Schema.XmlSchema GetSchema()Di2015NewLine    {Di2015NewLine        return null;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void ReadXml(System.Xml.XmlReader reader)Di2015NewLine    {Di2015NewLine        Content = reader.ReadInnerXml();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void WriteXml(System.Xml.XmlWriter writer)Di2015NewLine    {Di2015NewLine        if (Content != null)Di2015NewLine        {Di2015NewLine            writer.WriteRaw(Content);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineusing (var testXmlReader = new StringReader(testXml))Di2015NewLine{Di2015NewLine    var serializer = new XmlSerializer(typeof(Person));Di2015NewLine    var person = (Person)serializer.Deserialize(testXmlReader);Di2015NewLineDi2015NewLine    Console.WriteLine(person.Address.Content); //outputs <Hotel>Merriot</Hotel>Di2015NewLine}Di2015NewLine
21152507Di2015UniqueSeparator21
21152507Di2015UniqueSeparator2l
21152507Di2015UniqueSeparatorl
21152507Di2015UniqueSeparatorl
21152507Di2015UniqueSeparatorlong
21152507Di2015UniqueSeparatorstruct
21152604Di2015UniqueSeparatorstr
21152604Di2015UniqueSeparatorstr2
21152604Di2015UniqueSeparator\\r\\n
21152604Di2015UniqueSeparator\\n
21152690Di2015UniqueSeparatordata: ko.toJSON({ reportData: ko.toJSON(InProgressBriefs.Briefs) }),Di2015NewLine
21152690Di2015UniqueSeparatorreportData
21152690Di2015UniqueSeparatordata: ko.toJSON({ reportData: ko.toJS(InProgressBriefs.Briefs) }),Di2015NewLine
21152758Di2015UniqueSeparatorvar result = queue.Select((x, i) => newDi2015NewLine             {Di2015NewLine                 x.QueueDetail,Di2015NewLine                 x.Value,Di2015NewLine                 ServerName = servernames[i]Di2015NewLine             }).ToList();Di2015NewLine
21152758Di2015UniqueSeparatorservernames
21152758Di2015UniqueSeparatorqueue
21152758Di2015UniqueSeparator...Di2015NewLineServerName = i < servernames.Count ? servernames[i] : ""Di2015NewLine...Di2015NewLine
21152758Di2015UniqueSeparatorvar result = queue.Select((x, i) => newDi2015NewLine        {Di2015NewLine            x.QueueDetail,Di2015NewLine            x.Value,Di2015NewLine            ServerName = (i == 0 ? string.Join(",", servernames) : "")Di2015NewLine        }).ToList();Di2015NewLine
21153277Di2015UniqueSeparatorTrace.Assert()
21153376Di2015UniqueSeparatorToShortDateString()
21153376Di2015UniqueSeparatormm/dd/yyyy
21153376Di2015UniqueSeparatorMessageBox.Show(tempdt.Value.Date.AddDays(d).ToString("dd/MM/yyyy"));Di2015NewLine
21153376Di2015UniqueSeparatortempdt
21153376Di2015UniqueSeparatorDate
21153376Di2015UniqueSeparatorint a = getWeeks();//method that gets the weeks between start and endDi2015NewLineint d = 0;Di2015NewLineDi2015NewLinefor (int i = 0; i < a; i++)Di2015NewLine{Di2015NewLine    d += 7; Di2015NewLine    MessageBox.Show(start.Value.AddDays(d).ToString("dd/MM/yyyy"));Di2015NewLine}Di2015NewLine
21153403Di2015UniqueSeparator''
21153403Di2015UniqueSeparatorGlobal.deleteData("DELETE FROM Quizzes WHERE name = '" + listBoxQuizzes.SelectedItem.ToString() + "'");Di2015NewLine
21153695Di2015UniqueSeparator        string strTester = "AaaaAA";Di2015NewLineDi2015NewLine        var results = System.Text.RegularExpressions.Regex.Matches(strTester,"(.*[A-Z]{1}.*){3,}");Di2015NewLine        var occuranceCount = results.Count;Di2015NewLineDi2015NewLine        if (occuranceCount >= 1 ) {Di2015NewLine            Console.WriteLine("true");Di2015NewLine        }Di2015NewLine        else {Di2015NewLine            Console.WriteLine("false");Di2015NewLine        }Di2015NewLine
21153696Di2015UniqueSeparatorroutes.MapHttpRoute(Di2015NewLine    name: "API Default",Di2015NewLine    routeTemplate: "api/{controller}/{id}",Di2015NewLine    defaults: new { id = RouteParameter.Optional }Di2015NewLine);Di2015NewLine
21153696Di2015UniqueSeparatorconfig.Routes.MapHttpRoute(Di2015NewLine                name: "ApiWithAction",Di2015NewLine                routeTemplate: "api/{controller}/{action}/{id}",Di2015NewLine                defaults: new { id = RouteParameter.Optional }Di2015NewLine            );Di2015NewLineDi2015NewLine config.Routes.MapHttpRoute(Di2015NewLine            name: "DefaultApi",Di2015NewLine            routeTemplate: "api/{controller}/{id}",Di2015NewLine            defaults: new { id = RouteParameter.Optional }Di2015NewLine        );Di2015NewLine
21153717Di2015UniqueSeparatorstrCellData = strCellData.Replace("'", "'");Di2015NewLine
21153932Di2015UniqueSeparatoraspnet_client
21153932Di2015UniqueSeparatorc:\\inetpub\\wwwroot
21153932Di2015UniqueSeparatorvirtual directory
21153932Di2015UniqueSeparatoraspnet_client
21153932Di2015UniqueSeparatorc:\\inetpub\\wwwroot
21154024Di2015UniqueSeparator<asp:DropDownList ID="dd1" runat="server" AutoPostBack="true" OnSelectedIndexChanged="dd1_SelectedIndexChanged1">Di2015NewLine            <asp:ListItem Text="---Select amount" Selected="True" Value="0"></asp:ListItem>Di2015NewLine            <asp:ListItem Text="Master card" Value="1"></asp:ListItem>Di2015NewLine            <asp:ListItem Text="Maestro" Value="2"></asp:ListItem>Di2015NewLine            <asp:ListItem Text="Visa" Value="3"></asp:ListItem>Di2015NewLine            <asp:ListItem Text="Visa Debit" Value="4"></asp:ListItem>Di2015NewLine            <asp:ListItem Text="Post office Credit card" Value="5"></asp:ListItem>Di2015NewLine        </asp:DropDownList>Di2015NewLine        <asp:MultiView ID="multiview" ActiveViewIndex="0" runat="server">Di2015NewLine            <asp:View ID="viewtext" runat="server">Di2015NewLine                <p>Di2015NewLine                    Default ViewDi2015NewLine                </p>Di2015NewLine            </asp:View>Di2015NewLine            <asp:View ID="view1" runat="server">Di2015NewLine                <p>Di2015NewLine                 Master cardDi2015NewLine                </p>Di2015NewLine            </asp:View>Di2015NewLine            <asp:View ID="view2" runat="server">Di2015NewLine                <p>Di2015NewLine                   MaestroDi2015NewLine                </p>Di2015NewLine            </asp:View>Di2015NewLine            <asp:View ID="view3" runat="server">Di2015NewLine                <p>Di2015NewLine                    VisaDi2015NewLine                </p>Di2015NewLine            </asp:View>Di2015NewLine            <asp:View ID="view4" runat="server">Di2015NewLine                <p>Di2015NewLine                    Visa DebitDi2015NewLine                </p>Di2015NewLine            </asp:View>Di2015NewLine            <asp:View ID="view5" runat="server">Di2015NewLine                <p>Di2015NewLine                   Post office Credit cardDi2015NewLine                </p>Di2015NewLine            </asp:View>Di2015NewLine        </asp:MultiView>Di2015NewLine
21154024Di2015UniqueSeparator protected void dd1_SelectedIndexChanged1(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            if (dd1.SelectedItem != null)Di2015NewLine            {Di2015NewLine                multiview.ActiveViewIndex = Convert.ToInt16(dd1.SelectedValue);Di2015NewLine            }Di2015NewLine        }Di2015NewLine
21154194Di2015UniqueSeparatorclass InvoiceJoinDi2015NewLine{Di2015NewLine   private TblInvoice invoice;Di2015NewLine   private TblClient client;Di2015NewLine   public InvoiceJoin(TblInvoice invoice,TblClient client)Di2015NewLine   {Di2015NewLine      this.invoice=invoice;Di2015NewLine      this.client=client;Di2015NewLine     //...Di2015NewLine   }Di2015NewLine    public string RakeNumber{ get{return invoice.RakeNumber} set{invoice.RakeNumber=value;}}Di2015NewLine   //... ather invoice properties you want to see in gridDi2015NewLine    public string ClientCode{ get{return client.ClientCode} set{client.ClientCode=value;}}Di2015NewLine   // ...ather clientproperties you want to see in gridDi2015NewLine}Di2015NewLine
21154194Di2015UniqueSeparatorList<InvoiceJoin> data = (from invoice in db.TblInvoicesDi2015NewLine                          join client in db.TblClientsDi2015NewLine                          on  invoice.ReceiverCode equals client.client Di2015NewLine                          select new{Invoice=invoice,Client=client}).ToList() Di2015NewLine                          .Select(n=>new InvoiceJoin(n.Invoice,n.Client)).ToList()Di2015NewLine
21154205Di2015UniqueSeparator    DateTime currentDateTime = firstDate;Di2015NewLine    while (firstDate <= lastDate)Di2015NewLine    {Di2015NewLine         foreach (AccountCategory a in db.AccountCategories)Di2015NewLine         {Di2015NewLine             var result = Settings.dtCurrent.AsEnumerable()Di2015NewLine                   .Where(b => b.Field<string>("Account") == a.Account Di2015NewLine                             && (b.Field<DateTime>("Date") <= currentDateTime).OrderByDescending(b=> b.Field<DateTime>("Date")).FirstOrDefault();Di2015NewLineDi2015NewLineDi2015NewLine   }Di2015NewLine}Di2015NewLine
21154396Di2015UniqueSeparatorpublic string GeneratePassword(string input)Di2015NewLine{Di2015NewLine    var add= new byte[] {12,2,17,5,16,31,28,10,16,20,22,1};Di2015NewLine    var subst = new Dictionary<byte, byte> {{58,122},{59,121},{60,120},{61,119},{62,118},{63,117},{64,116},{91,115},{92,114},{93,113},{94,112},{45,111},{96,110}};Di2015NewLineDi2015NewLine    var inputMac = input.Replace(":", "").ToUpperInvariant();Di2015NewLine    if (!Regex.IsMatch(inputMac, "^[A-F0-9]{12}$") || (inputMac == "000000000000"))Di2015NewLine    {Di2015NewLine        return "invalid";Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        var c="";Di2015NewLine        for(var b = 0; b < 12; b++)Di2015NewLine        {Di2015NewLine            var a = (byte)((byte)inputMac[b] + add[b]);Di2015NewLine            if(subst.ContainsKey(a))Di2015NewLine            {Di2015NewLine                a=subst[a];Di2015NewLine            }Di2015NewLine            c += (char)a;Di2015NewLine        }Di2015NewLine        return "2008" + c;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21154430Di2015UniqueSeparatorToString()
21154430Di2015UniqueSeparatork.p_status = Convert.ToChar(dr[2]);Di2015NewLine
21154617Di2015UniqueSeparatorContinueWith
21154617Di2015UniqueSeparator var task = Task.Factory.StartNew(startMethod);Di2015NewLine return RedirectToAction("Profile", "UserProfile");Di2015NewLine
21154720Di2015UniqueSeparatoratanh(x) = (log(1+x) - log(1-x))/2Di2015NewLine
21154720Di2015UniqueSeparatorpublic static double ATanh(double x)Di2015NewLine{Di2015NewLine    return (Math.Log(1 + x) - Math.Log(1 - x))/2;Di2015NewLine}Di2015NewLine
21154754Di2015UniqueSeparatordeduct
21154754Di2015UniqueSeparatorif (player == true)Di2015NewLine{Di2015NewLine  money1 -= deduct;Di2015NewLine  p1owned[roll] = "Owned";Di2015NewLine}Di2015NewLineelse if (player == false)Di2015NewLine{Di2015NewLine  money2 -= deduct;Di2015NewLine  p2owned[roll] = "False";Di2015NewLine}Di2015NewLine
21155027Di2015UniqueSeparatorAllocate
21155027Di2015UniqueSeparator_arr
21155027Di2015UniqueSeparator_arr
21155027Di2015UniqueSeparator_arr
21155042Di2015UniqueSeparatortypeof(EmployeeModel).GetProperty(â€?Firstâ€?).GetCustomAttributes(...)
21155244Di2015UniqueSeparatorHANDLE
21155244Di2015UniqueSeparator[DllImport("user32.dll")]Di2015NewLineprivate static extern bool EnumDesktopWindows(IntPtr hDesktop, EnumWindowsProc ewp, int lParam);Di2015NewLineDi2015NewLine[DllImport("user32.dll")]Di2015NewLineprivate static extern bool IsWindowVisible(IntPtr hwnd);Di2015NewLineDi2015NewLinepublic delegate bool EnumWindowsProc(IntPtr hWnd, int lParam);Di2015NewLineDi2015NewLineprivate static void Main(string[] args)Di2015NewLine{Di2015NewLine  var collection = new Collection<IntPtr>();Di2015NewLineDi2015NewLine  EnumWindowsProc enumerateHandle = delegate(IntPtr hWnd, int lParam)Di2015NewLine  {        Di2015NewLine    if (IsWindowVisible(hWnd)) // remove to include hidden windowsDi2015NewLine      collection.Add(hWnd);       Di2015NewLineDi2015NewLine    return true;Di2015NewLine  };Di2015NewLineDi2015NewLine  if (EnumDesktopWindows(IntPtr.Zero, enumerateHandle, 0)) {Di2015NewLine    foreach (var item in collection) {Di2015NewLine      Console.WriteLine(item);Di2015NewLine    }Di2015NewLine  }Di2015NewLineDi2015NewLine  Console.Read();Di2015NewLine}Di2015NewLine
21155259Di2015UniqueSeparatorcookie[System.Web.HttpUtility.UrlEncode(encryptedName)] = System.Web.HttpUtility.UrlEncode(encryptedData);Di2015NewLine
21155473Di2015UniqueSeparatorstring IPAddress = GetIPAddress();Di2015NewLine    public string GetIPAddress()Di2015NewLine    {Di2015NewLineDi2015NewLine        IPHostEntry Host = default(IPHostEntry);Di2015NewLine        string Hostname = null;Di2015NewLine        Hostname = System.Environment.MachineName;Di2015NewLine        Host = Dns.GetHostEntry(Hostname);Di2015NewLine        foreach (IPAddress IP in Host.AddressList) {Di2015NewLine            if (IP.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork) {Di2015NewLine                IPAddress = Convert.ToString(IP);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        return IPAddress;Di2015NewLineDi2015NewLine    }Di2015NewLine
21155473Di2015UniqueSeparator     Dim Host As IPHostEntryDi2015NewLine     Dim Hostname As StringDi2015NewLine     Hostname = My.Computer.NameDi2015NewLine     Host = Dns.GetHostEntry(Hostname)Di2015NewLine    For Each IP As IPAddress In Host.AddressListDi2015NewLine      If IP.AddressFamily = System.Net.Sockets.AddressFamily.InterNetwork ThenDi2015NewLine            IPAddress = Convert.ToString(IP)Di2015NewLine       End IfDi2015NewLine    NextDi2015NewLine  Return IPAddressDi2015NewLine
21155607Di2015UniqueSeparator<system.web>Di2015NewLine    <httpRuntime executionTimeout = "300"/>Di2015NewLine  </system.web>Di2015NewLine
21155607Di2015UniqueSeparator  <location path="Controller/Action">Di2015NewLine    <system.web>Di2015NewLine      <httpRuntime executionTimeout="300"/>Di2015NewLine    </system.web>Di2015NewLine  </location>Di2015NewLine
21155740Di2015UniqueSeparatorCmdBase
21155740Di2015UniqueSeparatorCmd1
21155740Di2015UniqueSeparatorCmd2
21155740Di2015UniqueSeparatorpublic abstract class HwBase<T> where T : CmdBase, new()Di2015NewLine{Di2015NewLine    protected static readonly T Commands = new T();Di2015NewLine    public virtual void SetLED()Di2015NewLine    {Di2015NewLine        SendCommand(Commands.SET_LED); // 0x10Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Hw1 : HwBase<Cmd1>Di2015NewLine{Di2015NewLine    public override void SetLED()Di2015NewLine    {Di2015NewLine        SendCommand(Commands.SET_LED); // 0x20Di2015NewLine    }Di2015NewLine}Di2015NewLinepublic class Hw2 : HwBase<Cmd2>Di2015NewLine{Di2015NewLine    public override void SetLED2()Di2015NewLine    {Di2015NewLine        SendCommand(Commands.SET_LED_2); // 0x30Di2015NewLine    }Di2015NewLine}Di2015NewLine
21155835Di2015UniqueSeparator#pragma warning disable 1998Di2015NewLine
21155835Di2015UniqueSeparator#pragma warning disable 1998Di2015NewLineasync Task Foo() {}Di2015NewLine#pragma warning restore 1998Di2015NewLine
21155858Di2015UniqueSeparatorPkgCmdIDList
21155858Di2015UniqueSeparatorpublic const uint cmdiChangesets = 0x101; // or cmdiYourMenu instead of cmdiChangesetsDi2015NewLinepublic const uint cmdidCheckin = 0x102;Di2015NewLinepublic const uint cmdidGet = 0x103;Di2015NewLine
21155858Di2015UniqueSeparatorprivate void TfsMenuItemBranchCallback(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // do somethingDi2015NewLine}Di2015NewLineDi2015NewLineprivate void TfsMenuItemPendingCallback(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // do somethingDi2015NewLine}Di2015NewLineDi2015NewLine...Di2015NewLine
21155858Di2015UniqueSeparator<Buttons>
21155858Di2015UniqueSeparator        <Button guid="guidTfsUtilityCmdSet" id="cmdidChangesets" priority="0x0101" type="Button">Di2015NewLine            <Parent guid="guidTfsUtilityCmdSet" id="MyMenuGroup" />Di2015NewLine            <Strings>Di2015NewLine                <ButtonText>Changesets</ButtonText>Di2015NewLine            </Strings>Di2015NewLine        </Button>Di2015NewLineDi2015NewLine        <Button guid="guidTfsUtilityCmdSet" id="cmdidCheckin" priority="0x0102" type="Button">Di2015NewLine            <Parent guid="guidTfsUtilityCmdSet" id="MyMenuGroup" />Di2015NewLine            <Strings>Di2015NewLine                <ButtonText>Pending changes</ButtonText>Di2015NewLine            </Strings>Di2015NewLine        </Button>Di2015NewLine
21155858Di2015UniqueSeparator<GuidSymbol>
21155858Di2015UniqueSeparator<IDSymbol name="cmdidChangesets" value="0x0101" />Di2015NewLine   <IDSymbol name="cmdidCheckin" value="0x0102" />
21155858Di2015UniqueSeparator0x0101
21155858Di2015UniqueSeparatorPkgCmdIDList
21155858Di2015UniqueSeparator0x101
21155979Di2015UniqueSeparatorText
21155979Di2015UniqueSeparatorRow Cell
21155979Di2015UniqueSeparatorwhitespace
21155979Di2015UniqueSeparatorempty
21155979Di2015UniqueSeparator   if(string.IsNullOrWhiteSpace(e.Row.Cells[5].Text) || Di2015NewLine       string.IsNullOrWhiteSpace(e.Row.Cells[3].Text))Di2015NewLine          return;Di2015NewLine
21156342Di2015UniqueSeparator                <Button Margin="0" Name="m_DropDownButton" Padding="0, 4"Di2015NewLine                        HorizontalAlignment="Center" VerticalAlignment="Center"                            Di2015NewLine                        ContextMenuService.IsEnabled="False" Click="m_DropDownButton_Click"Di2015NewLine                        Tag="{Binding ElementName=myDataGrid}"Di2015NewLine                        >Di2015NewLine                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">Di2015NewLine                        <Path x:Name="BtnArrow" Margin="4" VerticalAlignment="Center" Width="6" Fill="#FF000000" Stretch="Uniform" HorizontalAlignment="Right" Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z "/>Di2015NewLine                    </StackPanel>Di2015NewLine                    <Button.ContextMenu>Di2015NewLine                        <ContextMenu>Di2015NewLine                            <MenuItem Header="All files" Command="{Binding AllFilesCommand}" />Di2015NewLine                            <MenuItem Header="Selected files only" Di2015NewLine                                      Command="{Binding SelectedFilesOnlyCommand}"Di2015NewLine                                      CommandParameter="{Binding Path=PlacementTarget.Tag.SelectedItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}"/>Di2015NewLine                        </ContextMenu>Di2015NewLine                    </Button.ContextMenu>Di2015NewLine                </Button>Di2015NewLine
21156342Di2015UniqueSeparator    private void m_DropDownButton_Click(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        var button = (Button)sender;Di2015NewLine        button.ContextMenu.PlacementTarget = button;Di2015NewLine        button.ContextMenu.IsOpen = true;Di2015NewLine    }Di2015NewLine
21156667Di2015UniqueSeparatorcontainer.RegisterManyForOpenGeneric(Di2015NewLine    typeof(IRepository<>), Di2015NewLine    typeof(StateRepository).Assembly);Di2015NewLine
21156667Di2015UniqueSeparatorIRepository<T>
21156667Di2015UniqueSeparatorcontainer.Register<IRepository<A>, RepositoryA>();Di2015NewLinecontainer.Register<IRepository<B>, RepositoryB>();Di2015NewLinecontainer.Register<IRepository<C>, RepositoryC>();Di2015NewLine/* add more here */Di2015NewLine
21156667Di2015UniqueSeparatorOpenGenericBatchRegistrationExtensions.GetTypesToRegister
21156667Di2015UniqueSeparatorvar repositoryTypes = OpenGenericBatchRegistrationExtensions.GetTypesToRegister(Di2015NewLine    container, typeof(IRepository<>), repositoryAssembly);Di2015NewLineDi2015NewLineforeach (Type implementationType in repositoryTypes)Di2015NewLine{Di2015NewLine    Type serviceType = Di2015NewLine        implementationType.GetInterfaces().Where(i => !i.IsGenericType).Single();Di2015NewLineDi2015NewLine    container.Register(serviceType, implementationType, Lifestyle.Transient);Di2015NewLine}Di2015NewLine
21156745Di2015UniqueSeparatorWebBrowser
21156745Di2015UniqueSeparatorHtmlDocument.MouseDown
21156745Di2015UniqueSeparatorMicrosoft.mshtml
21156745Di2015UniqueSeparatorpublic MainWindow()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine    this.webBrowser1.Navigated += webBrowser1_Navigated;Di2015NewLine    this.webBrowser1.Source = new Uri("your url");Di2015NewLine}Di2015NewLineDi2015NewLinevoid webBrowser1_Navigated(object sender, NavigationEventArgs e)Di2015NewLine{Di2015NewLine    HTMLDocumentClass document = this.webBrowser1.Document as HTMLDocumentClass;Di2015NewLine    document.HTMLDocumentEvents2_Event_onclick += document_HTMLDocumentEvents2_Event_onclick;Di2015NewLine}Di2015NewLineDi2015NewLinebool document_HTMLDocumentEvents2_Event_onclick(IHTMLEventObj pEvtObj)Di2015NewLine{Di2015NewLine    // here you can check if the clicked element is your formDi2015NewLine    // if (pEvtObj.fromElement.id == "some id")Di2015NewLine    MessageBox.Show("test");Di2015NewLine    return true;Di2015NewLine}Di2015NewLine
21156822Di2015UniqueSeparatorvar Query = (from invoice in _godownEntity.TblInvoicesDi2015NewLine             join client in _godownEntity.TblClients on invoice.ReceiverCode equals client.ClientCodeDi2015NewLine             join customer in _godownEntity.TblCustomers on invoice.**X** equals customer.**Y**Di2015NewLine             select *WHAT U WANT*Di2015NewLine
21156860Di2015UniqueSeparatorMainWindowHandle
21156860Di2015UniqueSeparatorHANDLE
21156860Di2015UniqueSeparatorEnumDesktopWindows
21156860Di2015UniqueSeparatorHwndWrapper
21156860Di2015UniqueSeparatorGuid
21156860Di2015UniqueSeparatorHide()
21156860Di2015UniqueSeparatorUpdateVisibilityProperty(Visibility.Hidden)
21156860Di2015UniqueSeparatorUIElement
21156860Di2015UniqueSeparatorShow()
21156860Di2015UniqueSeparatorWPF Window
21156860Di2015UniqueSeparatorUpdateVisibilityProperty(Visibility.Visible)
21156860Di2015UniqueSeparatorUIElement
21156860Di2015UniqueSeparatorShowWindow()
21156860Di2015UniqueSeparatorUpdateVisibilityProperty()
21156860Di2015UniqueSeparatorWPF Window
21156860Di2015UniqueSeparatorShow()
21156860Di2015UniqueSeparatorHide()
21156860Di2015UniqueSeparatorWM_SHOWWINDOW
21156860Di2015UniqueSeparatorconst int GWL_EXSTYLE = (-20);Di2015NewLineconst uint WS_EX_APPWINDOW = 0x40000;Di2015NewLineDi2015NewLineconst uint WM_SHOWWINDOW = 0x0018;Di2015NewLineconst int SW_PARENTOPENING = 3;Di2015NewLineDi2015NewLine[DllImport("user32.dll")]Di2015NewLinestatic extern IntPtr SendMessage(IntPtr hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam);Di2015NewLineDi2015NewLine[DllImport("user32.dll")]Di2015NewLineprivate static extern bool EnumDesktopWindows(IntPtr hDesktop, EnumWindowsProc ewp, int lParam);Di2015NewLineDi2015NewLine[DllImport("user32.dll")]Di2015NewLinestatic extern uint GetWindowThreadProcessId(IntPtr hWnd, out int lpdwProcessId);Di2015NewLineDi2015NewLine[DllImport("user32.dll")]Di2015NewLineprivate static extern uint GetWindowTextLength(IntPtr hWnd);Di2015NewLineDi2015NewLine[DllImport("user32.dll")]Di2015NewLineprivate static extern uint GetWindowText(IntPtr hWnd, StringBuilder lpString, uint nMaxCount);Di2015NewLineDi2015NewLine[DllImport("user32.dll", CharSet = CharSet.Auto)]Di2015NewLinestatic extern bool GetClassName(IntPtr hWnd, StringBuilder lpClassName, int nMaxCount);Di2015NewLineDi2015NewLine[DllImport("user32.dll")]Di2015NewLinestatic extern int GetWindowLong(IntPtr hWnd, int nIndex);Di2015NewLineDi2015NewLinedelegate bool EnumWindowsProc(IntPtr hWnd, int lParam);Di2015NewLineDi2015NewLinestatic bool IsApplicationWindow(IntPtr hWnd) {Di2015NewLine  return (GetWindowLong(hWnd, GWL_EXSTYLE) & WS_EX_APPWINDOW) != 0;Di2015NewLine}Di2015NewLineDi2015NewLinestatic IntPtr GetWindowHandle(int pid, string title) {Di2015NewLine  var result = IntPtr.Zero;Di2015NewLineDi2015NewLine  EnumWindowsProc enumerateHandle = delegate(IntPtr hWnd, int lParam)Di2015NewLine  {Di2015NewLine    int id;Di2015NewLine    GetWindowThreadProcessId(hWnd, out id);        Di2015NewLineDi2015NewLine    if (pid == id) {Di2015NewLine      var clsName = new StringBuilder(256);Di2015NewLine      var hasClass = GetClassName(hWnd, clsName, 256);Di2015NewLine      if (hasClass) {Di2015NewLineDi2015NewLine        var maxLength = (int)GetWindowTextLength(hWnd);Di2015NewLine        var builder = new StringBuilder(maxLength + 1);Di2015NewLine        GetWindowText(hWnd, builder, (uint)builder.Capacity);Di2015NewLineDi2015NewLine        var text = builder.ToString(); Di2015NewLine        var className = clsName.ToString();Di2015NewLineDi2015NewLine        // There could be multiple handle associated with our pid, Di2015NewLine        // so we return the first handle that satisfy:Di2015NewLine        // 1) the handle title/ caption matches our window title,Di2015NewLine        // 2) the window class name starts with HwndWrapper (WPF specific)Di2015NewLine        // 3) the window has WS_EX_APPWINDOW styleDi2015NewLineDi2015NewLine        if (title == text && className.StartsWith("HwndWrapper") && IsApplicationWindow(hWnd))Di2015NewLine        {Di2015NewLine          result = hWnd;Di2015NewLine          return false;Di2015NewLine        }Di2015NewLine      }Di2015NewLine    }Di2015NewLine    return true;Di2015NewLine  };Di2015NewLineDi2015NewLine  EnumDesktopWindows(IntPtr.Zero, enumerateHandle, 0);Di2015NewLineDi2015NewLine  return result;Di2015NewLine}Di2015NewLine
21156860Di2015UniqueSeparator...Di2015NewLineif (runningProcess.MainWindowHandle == IntPtr.Zero) {Di2015NewLine  var handle = GetWindowHandle(runningProcess.Id, runningProcess.MainWindowTitle);Di2015NewLine  if (handle != IntPtr.Zero) {Di2015NewLine    // show windowDi2015NewLine    ShowWindow(handle, 5);Di2015NewLine    // send WM_SHOWWINDOW message to toggle the visibility flagDi2015NewLine    SendMessage(handle, WM_SHOWWINDOW, IntPtr.Zero, new IntPtr(SW_PARENTOPENING));Di2015NewLine  }Di2015NewLine}Di2015NewLine...Di2015NewLine
21156937Di2015UniqueSeparatorString FileName = tbl.Rows[0][0].ToString();Di2015NewLineString FilePath = "C:/...."; //Replace thisDi2015NewLineDi2015NewLineSystem.Web.HttpResponse response = System.Web.HttpContext.Current.Response;Di2015NewLineresponse.ClearContent();Di2015NewLineresponse.Clear();Di2015NewLineresponse.ContentType = "text/plain";Di2015NewLineresponse.AddHeader("Content-Disposition", "attachment; filename=" + FileName + ";");Di2015NewLinebyte[] blob = File.ReadAllBytes(FilePath );Di2015NewLineresponse.BinaryWrite(blob );Di2015NewLineresponse.Flush();Di2015NewLineresponse.End();Di2015NewLine
21156988Di2015UniqueSeparatorKeyPress
21156988Di2015UniqueSeparatorKeyPressEventArgs
21156988Di2015UniqueSeparatorKeyEventArgs
21156988Di2015UniqueSeparatorKeyPress
21156988Di2015UniqueSeparatorKeyDown
21156988Di2015UniqueSeparatorthis.listView.KeyDown+= new System.Windows.Forms.KeyPressEventHandler(this.listView_KeyDown);Di2015NewLineDi2015NewLineprivate void listView_KeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLine    if (e.KeyCode == Keys.Delete)Di2015NewLine    {Di2015NewLine        DeleteContact();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21157065Di2015UniqueSeparatorGlobal\\
21157065Di2015UniqueSeparatorAppMutex
21157065Di2015UniqueSeparator[Setup]Di2015NewLineAppMutex=Global\\LoaderDi2015NewLine
21157207Di2015UniqueSeparatorprivate bool UpdateDataLog(BsonValue Id, List<Ping> tempPings, MongoCollection<Datalog> mongoCollection)Di2015NewLine{Di2015NewLine    bool success = false;Di2015NewLineDi2015NewLine    tryDi2015NewLine    {Di2015NewLine        var query = new QueryDocument("_id", Id);Di2015NewLine        var update = Update<Datalog>.PushAll(e => e.Pings, tempPings);Di2015NewLine        mongoCollection.Update(query, update);Di2015NewLine        success = true;Di2015NewLine    }Di2015NewLine    catch (Exception ex)Di2015NewLine    {Di2015NewLine        string error = ex.Message;Di2015NewLine    }Di2015NewLineDi2015NewLine    return success;Di2015NewLine}Di2015NewLine
21157288Di2015UniqueSeparator,(?=[^{}]*(?:(?:(?'O'{)[^{}]*)+(?:(?'-O'})[^{}]*?)+)*(?(O)(?!))$)Di2015NewLine
21157288Di2015UniqueSeparator{}
21157288Di2015UniqueSeparator{}
21157288Di2015UniqueSeparatorstring msg= "{1,{Cat,{Blue,1}},2}";Di2015NewLinemsg = msg.Substring(1, msg.Length - 2);Di2015NewLinestring[] charSetOccurences = Regex.Split(msg, @",(?=[^{}]*(?:(?:(?'O'{)[^{}]*)+(?:(?'-O'})[^{}]*?)+)*(?(O)(?!))$)");Di2015NewLineforeach (string s in charSetOccurences)Di2015NewLine{Di2015NewLine    Console.WriteLine(s);Di2015NewLine}Di2015NewLine
21157288Di2015UniqueSeparator1Di2015NewLine{Cat,{Blue,1}}Di2015NewLine2Di2015NewLine
21157288Di2015UniqueSeparator(?=[^{}]*(?:(?:(?'O'{)[^{}]*)+(?:(?'-O'})[^{}]*?)+)*(?(O)(?!))$)Di2015NewLine
21157288Di2015UniqueSeparator[^{}]*
21157288Di2015UniqueSeparator{}
21157288Di2015UniqueSeparator(?:(?:(?'O'{)[^{}]*)+(?:(?'-O'})[^{}]*?)+)*(?(O)(?!))
21157288Di2015UniqueSeparator{}
21157288Di2015UniqueSeparator{
21157288Di2015UniqueSeparatorO
21157288Di2015UniqueSeparator(?:(?:(?'O'{)[^{}]*)+(?:(?'-O'})[^{}]*?)+)*(?(O)(?!))Di2015NewLine           ^Di2015NewLine
21157288Di2015UniqueSeparator(?:(?:(?'O'{)[^{}]*)+(?:(?'-O'})[^{}]*?)+)*(?(O)(?!))Di2015NewLine             ^^^^^^Di2015NewLine
21157288Di2015UniqueSeparator(?:(?:(?'O'{)[^{}]*)+(?:(?'-O'})[^{}]*?)+)*(?(O)(?!))Di2015NewLine                    ^Di2015NewLine
21157288Di2015UniqueSeparator(?:(?:(?'O'{)[^{}]*)+(?:(?'-O'})[^{}]*?)+)*(?(O)(?!))Di2015NewLine                        ^^^^^^^^Di2015NewLine
21157288Di2015UniqueSeparator{}
21157288Di2015UniqueSeparator(?:(?:(?'O'{)[^{}]*)+(?:(?'-O'})[^{}]*?)+)*(?(O)(?!))Di2015NewLine                                ^^^^^^^ ^Di2015NewLine
21157288Di2015UniqueSeparator(?:(?:(?'O'{)[^{}]*)+(?:(?'-O'})[^{}]*?)+)*(?(O)(?!))Di2015NewLine                                          ^Di2015NewLine
21157371Di2015UniqueSeparatorstatic IDictionary<TKey, TValue> Merge<TKey, TValue>(Di2015NewLine    this IDictionary<TKey, TValue> left,Di2015NewLine    IDictionary<TKey, TValue> right,Di2015NewLine    Func<TKey, TValue, TValue, TValue> valueMerger)Di2015NewLine{Di2015NewLine    var result = new Dictionary<TKey, TValue>();Di2015NewLine    foreach(var pair in left.Concat(right))Di2015NewLine    {Di2015NewLine        if (result.ContainsKey(pair.Key))Di2015NewLine        {Di2015NewLine            result[pair.Key] = valueMerger(Di2015NewLine                                   pair.Key,Di2015NewLine                                   pair.Value,Di2015NewLine                                   result[pair.Key]);Di2015NewLine            continue;Di2015NewLine        }Di2015NewLineDi2015NewLine        result.Add(pair.Key, pair.Value);Di2015NewLine    }Di2015NewLineDi2015NewLine    return result;Di2015NewLine}Di2015NewLine
21157371Di2015UniqueSeparatorvar dictionary1 = new Dictionary<Class1.Deneme, List<string>>();Di2015NewLinevar dictionary2 = new Dictionary<Class1.Deneme, List<string>>();Di2015NewLineDi2015NewLinevar merged = dictionary1.Merge(Di2015NewLine                 dictionary2,Di2015NewLine                 (key, left, right) => left.Concat(right));Di2015NewLine
21157371Di2015UniqueSeparator   var merged = dictionary1.Merge(Di2015NewLine                 dictionary2,Di2015NewLine                 (key, left, right) => throw new ArgumentException("right", ...);Di2015NewLine
21157440Di2015UniqueSeparatorif (ModelState.IsValid)Di2015NewLine{Di2015NewLine     // perform your logic hereDi2015NewLine}Di2015NewLineDi2015NewLine// if you reached this code, that means the model validation failedDi2015NewLine// so you will have to reinitialize the ViewBagDi2015NewLineDi2015NewLineViewBag.brands = Brand.GetAllBrands();Di2015NewLinereturn View(car);Di2015NewLine
21157603Di2015UniqueSeparatorisBusy = true;Di2015NewLineisBusyMessage = "Loading...";Di2015NewLine    WebClient client = new WebClient();Di2015NewLine    Uri uri = new Uri(transportURL1 + latitude + "%2C" + longitude + transportURL2, UriKind.Absolute);Di2015NewLine    client.DownloadStringCompleted += (s, e) =>Di2015NewLine    {Di2015NewLine        if (e.Error == null)Di2015NewLine        {Di2015NewLine            RootObject result = JsonConvert.DeserializeObject<RootObject>(e.Result);Di2015NewLine            hereRestProperty = new ObservableCollection<Item>(result.results.items);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            MessageBox.Show(e.Error.ToString());Di2015NewLine        }Di2015NewLine        // Dispatcher.Invoke for lines below, if neededDi2015NewLine        // Dispatcher.Invoke(DispatcherPriority.Normal, new Action(() => {Di2015NewLine        isBusy = false;Di2015NewLine        isBusyMessage = "Finished";Di2015NewLine        // }));Di2015NewLine    };Di2015NewLine    client.DownloadStringAsync(uri);Di2015NewLine
21157665Di2015UniqueSeparatorpublic ICommand AddClientCommand Di2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        return new DelegateCommand(AddClient, CanExecuteAddClient);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21157665Di2015UniqueSeparator_clients
21157665Di2015UniqueSeparatorList<Client>
21157665Di2015UniqueSeparatorObservableCollection<Client>
21157665Di2015UniqueSeparator_newClient
21157665Di2015UniqueSeparatorClient
21158132Di2015UniqueSeparatorCheckBox.CheckState
21158132Di2015UniqueSeparatordemonstration
21158279Di2015UniqueSeparatorvar result = g.GroupBy(x => x.City, (key, group) => new {Di2015NewLine                           city = key,Di2015NewLine                           employees = group.Select(emp => new {Di2015NewLine                               fullname = emp.FirstName + " " + emp.LastName,Di2015NewLine                               title = emp.TitleDi2015NewLine                           })Di2015NewLine                       });Di2015NewLine
21158346Di2015UniqueSeparatorpublic Cat(string name, string type, bool water, bool yalel);Di2015NewLine
21158346Di2015UniqueSeparatorpublic Cat(string name, string type, bool water, bool yalel)Di2015NewLine{Di2015NewLine   // Do something like :Di2015NewLine   // this.name = name;Di2015NewLine   // this.type = type;Di2015NewLine   // etc...Di2015NewLine}Di2015NewLine
21158352Di2015UniqueSeparator    var assayData = '[{"AssayCode":"0001C","AssayName":"Assay A","Comments":"Here is the comment"},{"AssayCode":"0002D","AssayName":"Assay B","Comments":"Here is the comment for assay b"}]';Di2015NewLineDi2015NewLineconsole.log(assayData);Di2015NewLineDi2015NewLine//using the ko.mapping.fromJSON to make your rawData properties into observables, so the list updates with any changesDi2015NewLine//download from http://knockoutjs.com/documentation/plugins-mapping.htmlDi2015NewLinevar assays = ko.mapping.fromJSON(assayData);Di2015NewLineconsole.log(assays());Di2015NewLinevar viewModel ={};Di2015NewLineDi2015NewLinevar selectedAssay=ko.observable(); //initialize the selectedAssay which will be set by the edit button click, but we need to initialize it firstDi2015NewLineDi2015NewLineDi2015NewLine//just for debugging, subscribe to the selectedAssay so we can see when it's been changedDi2015NewLineselectedAssay.subscribe(function(){Di2015NewLine    console.log('selected assay changed');Di2015NewLine    console.log(selectedAssay().AssayName());Di2015NewLine});Di2015NewLineDi2015NewLinevar addNewAssay=function(){Di2015NewLine    //create a new Assay initializing each property to a ko.observable so the data in the list updates when the data changes in the edit screenDi2015NewLine    var newAssay ={"AssayCode":ko.observable(""),"AssayName":ko.observable(""),"Comments":ko.observable("")};Di2015NewLine    assays.push(newAssay);Di2015NewLine    selectedAssay(newAssay);Di2015NewLine}Di2015NewLineDi2015NewLineviewModel.Assays=assays;Di2015NewLineviewModel.selectedAssay=selectedAssay;Di2015NewLineviewModel.addNewAssay=addNewAssay;Di2015NewLineDi2015NewLineko.applyBindings(viewModel);Di2015NewLine
21158352Di2015UniqueSeparator <form data-bind="with:selectedAssay">Di2015NewLine    <div class="form-group" >Di2015NewLine        <div><span class="h1" data-bind="text:AssayName"></span></div>Di2015NewLine        <label for="form_geneassaycode">Gene Assay Code:</label>Di2015NewLine        <input type="text" class="form-control" id="form_geneassaycode" placeholder="Enter Gene Assay Code" data-bind="value:AssayCode"/>         Di2015NewLineDi2015NewLineetc.Di2015NewLine
21158459Di2015UniqueSeparatorILPlotCube.TwoDMode
21158459Di2015UniqueSeparatorfalse
21158459Di2015UniqueSeparatorplotCube.ZoomRectangle.Lines.Positions
21158459Di2015UniqueSeparatorsurface.MouseMove += (_s,_a) => { yourHandler(_a); }Di2015NewLine
21158459Di2015UniqueSeparatorILLabel
21158459Di2015UniqueSeparatorILScreenObject
21158520Di2015UniqueSeparatorList<Nullable<int>> list;
21158520Di2015UniqueSeparatoravailable_identifier, ListDi2015NewLine<Di2015NewLineavailable_identifier, NullableDi2015NewLine<Di2015NewLineintegral_type, intDi2015NewLine>Di2015NewLine>Di2015NewLineavailable_identifier, listDi2015NewLine;Di2015NewLine
21158520Di2015UniqueSeparatorLALR(1)
21158520Di2015UniqueSeparator>>
21158520Di2015UniqueSeparatordeclaration_statement:Di2015NewLine    | local_variable_declaration ";" Di2015NewLine    | local_constant_declaration ";" Di2015NewLineDi2015NewLinelocal_variable_declaration:Di2015NewLine    | local_variable_type local_variable_declarators Di2015NewLineDi2015NewLinelocal_variable_type:Di2015NewLine    | type Di2015NewLine    | "var"Di2015NewLineDi2015NewLinelocal_variable_declarators:Di2015NewLine    | local_variable_declarator Di2015NewLine    | local_variable_declarators "," local_variable_declarator Di2015NewLineDi2015NewLinelocal_variable_declarator:Di2015NewLine    | identifier Di2015NewLine    | identifier "=" local_variable_initializer Di2015NewLineDi2015NewLinetype:Di2015NewLine    | value_type Di2015NewLine    | reference_type Di2015NewLine    | type_parameter Di2015NewLine    | type_unsafe Di2015NewLineDi2015NewLinevalue_type:Di2015NewLine    | struct_type Di2015NewLine    | enum_type Di2015NewLineDi2015NewLinestruct_type:Di2015NewLine    | type_name Di2015NewLine    | simple_type Di2015NewLine    | nullable_type Di2015NewLineDi2015NewLinesimple_type:Di2015NewLine    | numeric_type Di2015NewLine    | bool Di2015NewLineDi2015NewLinenumeric_type:Di2015NewLine    | integral_type Di2015NewLine    | floating_point_type Di2015NewLine    | decimal Di2015NewLineDi2015NewLineintegral_type:Di2015NewLine    | "sbyte" Di2015NewLine    | "byte" Di2015NewLine    | "short" Di2015NewLine    | "ushort" Di2015NewLine    | "int"Di2015NewLine    | "uint" Di2015NewLine    | "long"Di2015NewLine    | "ulong" Di2015NewLine    | "char"Di2015NewLineDi2015NewLinereference_type:Di2015NewLine    | class_type Di2015NewLine    | interface_type Di2015NewLine    | array_type Di2015NewLine    | delegate_type Di2015NewLineDi2015NewLineclass_type:Di2015NewLine    | type_name Di2015NewLine    | "object"Di2015NewLine    | "dynamic" Di2015NewLine    | "string"Di2015NewLineDi2015NewLinetype_name:Di2015NewLine    | namespace_or_type_name Di2015NewLineDi2015NewLinenamespace_or_type_name:Di2015NewLine    | identifier type_argument_list? Di2015NewLine    | namespace_or_type_name "." identifier type_argument_list? Di2015NewLine    | qualified_alias_member Di2015NewLineDi2015NewLineidentifier:Di2015NewLine    | available_identifier Di2015NewLine    | "@" identifier_or_keyword Di2015NewLineDi2015NewLinetype_argument_list:Di2015NewLine    | "<" type_arguments ">" Di2015NewLineDi2015NewLinetype_arguments:Di2015NewLine    | type_argument Di2015NewLine    | type_arguments "," type_argument Di2015NewLineDi2015NewLinetype_argument:Di2015NewLine    | type Di2015NewLine
21158520Di2015UniqueSeparatorrule_name:Di2015NewLine    | production_1Di2015NewLine    | production_2Di2015NewLine    | production_2Di2015NewLine
21158520Di2015UniqueSeparatorintegral_type
21158520Di2015UniqueSeparatorTuple<int, int, double>
21158520Di2015UniqueSeparatorList<Nullable<int>> list;
21158520Di2015UniqueSeparatorStep 0Di2015NewLineParse Stack:    emptyDi2015NewLineLook Ahead:     available_identifierDi2015NewLineUnscanned:      List<Nullable<int>> list;Di2015NewLineParser Action:  ShiftDi2015NewLine
21158520Di2015UniqueSeparatoridentifier <- available_identifier
21158520Di2015UniqueSeparatorStep 1Di2015NewLineParse Stack:    available_identifierDi2015NewLineLook Ahead:     "<"Di2015NewLineUnscanned:      <Nullable<int>> list;Di2015NewLineParser Action:  Reduce by identifier <- available_identifierDi2015NewLine
21158520Di2015UniqueSeparatorStep 10Di2015NewLineParse Stack:    identifier "<" identifier "<" type_arguments ">"Di2015NewLineLook Ahead:     ">"Di2015NewLineUnscanned:      > list;Di2015NewLineParser Action:  Reduce by type_argument_list <- "<" type_arguments ">"Di2015NewLine
21158520Di2015UniqueSeparatortype_argument_list
21158520Di2015UniqueSeparatorStep 13Di2015NewLineParse Stack:    identifier "<" type_arguments ">"Di2015NewLineLook Ahead:     ">"Di2015NewLineUnscanned:      list;Di2015NewLineParser Action:  Reduce by type_argument_list <- "<" type_arguments ">"Di2015NewLine
21158520Di2015UniqueSeparatortype_argument_list <- "<" type_arguments ">"
21158520Di2015UniqueSeparator>>
21158520Di2015UniqueSeparatordeclaration_statement <- local_variable_declaration ";"
21158520Di2015UniqueSeparatorList<Nullable<int>>
21158520Di2015UniqueSeparatorf(g<a, b>(c))
21158520Di2015UniqueSeparatorinvocation_expression
21158520Di2015UniqueSeparatorinvocation_expression -> primary_expression ( argument_list? )
21158520Di2015UniqueSeparatorg<a, b>(c)
21158520Di2015UniqueSeparatorg<a,b>
21158520Di2015UniqueSeparatoridentifier
21158520Di2015UniqueSeparatortype_argument_list
21158520Di2015UniqueSeparator"("
21158520Di2015UniqueSeparatoridentifier type_argument_list
21158520Di2015UniqueSeparatorprimary_expression <- primary_no_array_creation_expressionDi2015NewLine    <- simple_name <- identifier type_argument_list?Di2015NewLine
21158520Di2015UniqueSeparator"("
21158520Di2015UniqueSeparatorc
21158520Di2015UniqueSeparatorc
21158520Di2015UniqueSeparatorargument_list <- argument <- argument_value <- expressionDi2015NewLine    <- <a really long list of rules> <- simple_nameDi2015NewLine    <- identifier <- available_identifierDi2015NewLine
21158520Di2015UniqueSeparatorprimary_expression ( argument_list? )Di2015NewLine
21158520Di2015UniqueSeparatorinvocation_expression
21158520Di2015UniqueSeparatorg<a, b>(c)
21158520Di2015UniqueSeparatorf
21158520Di2015UniqueSeparatoridentifier
21158520Di2015UniqueSeparatorprimary_expression <- primary_no_array_creation_expressionDi2015NewLine    <- simple_name <- identifier type_argument_list?Di2015NewLine
21158520Di2015UniqueSeparatorprimary_expression "(" invocation_expressionDi2015NewLine        ^           ^            ^Di2015NewLine        f           (        g<a, b>(c)Di2015NewLine
21158520Di2015UniqueSeparator")"
21158520Di2015UniqueSeparatorinvocation_expression
21158520Di2015UniqueSeparatorargument_list <- argument <- argument_value <- expressionDi2015NewLine    <- <the same really long list of rules> <- primary_expressionDi2015NewLine    <- primary_no_array_creation_expression <- invocation_expressionDi2015NewLine
21158520Di2015UniqueSeparator")"
21158520Di2015UniqueSeparator    primary_expression "(" argument_list ")"Di2015NewLine            ^           ^        ^        ^Di2015NewLine            f           (    g<a, b>(c)   )Di2015NewLine
21158520Di2015UniqueSeparatorinvocation_expression
21158520Di2015UniqueSeparatorf(g<a, b>(c))
21158669Di2015UniqueSeparatortemp
21158669Di2015UniqueSeparatorvar temp = Console.ReadLine();Di2015NewLinewhile (temp.Length > 5)Di2015NewLine{Di2015NewLine    Console.WriteLine("Error. Zip code is not 5 digits. Please enter a valid number.");Di2015NewLine    temp = Console.ReadLine(); Di2015NewLine}Di2015NewLineDi2015NewLineaddress.zipCode = int.Parse(temp);Di2015NewLine
21158728Di2015UniqueSeparatorpublic static IEnumerable<List<int>> ToConsecutiveGroups(Di2015NewLine    this IEnumerable<int> source)Di2015NewLine{Di2015NewLine    using (var iterator = source.GetEnumerator())Di2015NewLine    {Di2015NewLine        if (!iterator.MoveNext())Di2015NewLine        {Di2015NewLine            yield break;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {                    Di2015NewLine            int current = iterator.Current;Di2015NewLine            List<int> group = new List<int> { current };Di2015NewLineDi2015NewLine            while (iterator.MoveNext())Di2015NewLine            {Di2015NewLine                int next = iterator.Current;Di2015NewLine                if (next < current || current + 1 < next)Di2015NewLine                {Di2015NewLine                    yield return group;Di2015NewLine                    group = new List<int>();                            Di2015NewLine                }Di2015NewLineDi2015NewLine                current = next;Di2015NewLine                group.Add(current);Di2015NewLine            }Di2015NewLineDi2015NewLine            if (group.Any())Di2015NewLine                yield return group;Di2015NewLine        }                Di2015NewLine    }Di2015NewLine}Di2015NewLine
21158728Di2015UniqueSeparatorvar listOfInt = new List<int> { 1, 2, 3, 4, 7, 8, 12, 13, 14 };Di2015NewLinevar groups = listOfInt.ToConsecutiveGroups();Di2015NewLine
21158728Di2015UniqueSeparator[Di2015NewLine  [ 1, 2, 3, 4 ],Di2015NewLine  [ 7, 8 ],Di2015NewLine  [ 12, 13, 14 ]Di2015NewLine]Di2015NewLine
21158728Di2015UniqueSeparatorpublic static IEnumerable<List<T>> ToConsecutiveGroups<T>(Di2015NewLine    this IEnumerable<T> source, Func<T,T, bool> isConsequtive)Di2015NewLine{Di2015NewLine    using (var iterator = source.GetEnumerator())Di2015NewLine    {Di2015NewLine        if (!iterator.MoveNext())Di2015NewLine        {Di2015NewLine            yield break;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {                    Di2015NewLine            T current = iterator.Current;Di2015NewLine            List<T> group = new List<T> { current };Di2015NewLineDi2015NewLine            while (iterator.MoveNext())Di2015NewLine            {Di2015NewLine                T next = iterator.Current;Di2015NewLine                if (!isConsequtive(current, next))Di2015NewLine                {Di2015NewLine                    yield return group;Di2015NewLine                    group = new List<T>();                            Di2015NewLine                }Di2015NewLineDi2015NewLine                current = next;Di2015NewLine                group.Add(current);Di2015NewLine            }Di2015NewLineDi2015NewLine            if (group.Any())Di2015NewLine                yield return group;Di2015NewLine        }                Di2015NewLine    }Di2015NewLine}Di2015NewLine
21158728Di2015UniqueSeparatorvar result = listOfInt.ToConsecutiveGroups((x,y) => (x == y) || (x == y - 1));Di2015NewLine
21158762Di2015UniqueSeparatorpublic void QueryOrderBy<T>(T myValue)Di2015NewLine{Di2015NewLine    var query = table.AsEnumerable()Di2015NewLine                     .OrderBy(x => x.Field<T>(myValue))Di2015NewLine                     .CopyToDataTable();Di2015NewLine}Di2015NewLine
21158893Di2015UniqueSeparatorRepeater1.DataSource = new[]{ movie };Di2015NewLine
21158893Di2015UniqueSeparatorFormView
21158893Di2015UniqueSeparatorDetailsView
21158959Di2015UniqueSeparatorFormB bForm = new FormB ();Di2015NewLinebForm .StartPosition = FormStartPosition.Manual;Di2015NewLinebForm .Location = new Point(this.Location.X + (this.Width - bForm.Width) / 2,       Di2015NewLine   this.Location.Y + (this.Height - bForm.Height) / 2); //this is just an example , you can customize the locationDi2015NewLinebForm .Show();Di2015NewLine
21159180Di2015UniqueSeparatora.Betas.Add(b);
21159180Di2015UniqueSeparatorsession.Clear()
21159235Di2015UniqueSeparator[%@template language="CSharp" providerOptions="CompilerVersion=v3.5" %]Di2015NewLine[%@ Reference name="C:\\Program Files\\Reference Assemblies\\Microsoft\\Framework\\v3.5\\System.Core.dll" %]Di2015NewLine[%@ namespace name="System.Linq" %]Di2015NewLine
21159274Di2015UniqueSeparatorusing System.Text.RegularExpression;Di2015NewLine...Di2015NewLinestring result = Regex.Match(s, @"\\((.*?)\\)").Groups[1].Value;Di2015NewLine
21159395Di2015UniqueSeparatorIsolatedStorageSettings settings = IsolatedStorageSettings.ApplicationSettings;Di2015NewLine// txtInput is a TextBox defined in XAML.Di2015NewLineif (!settings.Contains(key))Di2015NewLine {Di2015NewLine     settings.Add(key, value);  // adding new valueDi2015NewLine     settings.Save();Di2015NewLine }Di2015NewLine
21159470Di2015UniqueSeparatorMainViewModel
21159470Di2015UniqueSeparatorLoadData
21159470Di2015UniqueSeparatorMainViewModel
21159470Di2015UniqueSeparatorMainViewModel's LoadData
21159470Di2015UniqueSeparatorprivate void refreshButton_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine     var vm = (MainViewModel)this.DataContext;Di2015NewLine     vm.LoadData();Di2015NewLine}Di2015NewLine
21159470Di2015UniqueSeparatorINotifyPropertyChanged
21159470Di2015UniqueSeparatorMainViewModel
21159643Di2015UniqueSeparatorpublic double GetUsedVacation(int year)Di2015NewLine {Di2015NewLine    double hours = 0;Di2015NewLineDi2015NewLine    IEnumerable<HtVacationDay> vacationDays = Di2015NewLine        HtVacationDays.Where(x => x.FromDate.Year == year && Di2015NewLine                                  x.FromDate < DateTime.Today);Di2015NewLineDi2015NewLine    DateTime firstDayOfYear = new DateTime(year, 1, 1);Di2015NewLine    DateTime lastDayOfYear = new DateTime(year, 12, 31);Di2015NewLineDi2015NewLine    foreach (HtVacationDay vacation in vacationDays)Di2015NewLine    {Di2015NewLine        DateTime from = vacation.FromDate.Date < firstDayOfYear ?Di2015NewLine              firstDayOfYear : vacation.FromDate;Di2015NewLineDi2015NewLine        DateTime to = vacation.ToDate.Date > lastDayOfYear ?Di2015NewLine              lastDayOfYear : vacation.ToDate;Di2015NewLineDi2015NewLine        var vacationHours = (to - from).TotalHours;            Di2015NewLineDi2015NewLine        if (vacationHours > 8)            Di2015NewLine            hours += vacationHours / 3;            Di2015NewLine        else            Di2015NewLine            hours += vacationHours;            Di2015NewLine    }Di2015NewLineDi2015NewLine    return hours / 8;Di2015NewLine}Di2015NewLine
21159643Di2015UniqueSeparator3
21159643Di2015UniqueSeparator5 + 4 = 9
21159689Di2015UniqueSeparatorvoid Main()Di2015NewLine{Di2015NewLine    Verify(ROUND(3206.618652, 2), 3206.62).Dump();Di2015NewLine    Verify(ROUND(3206.618652, 1), 3206.6).Dump();Di2015NewLine    Verify(ROUND(3206.618652, 0), 3207).Dump();Di2015NewLine    Verify(ROUND(3206.618652, -1), 3210).Dump();Di2015NewLine    Verify(ROUND(3206.618652, -2), 3200).Dump();Di2015NewLineDi2015NewLine    Verify(ROUND(3207.618652, 2), 3207.62).Dump();Di2015NewLine    Verify(ROUND(3207.618652, 1), 3207.6).Dump();Di2015NewLine    Verify(ROUND(3207.618652, 0), 3208).Dump();Di2015NewLine    Verify(ROUND(3207.618652, -1), 3210).Dump();Di2015NewLine    Verify(ROUND(3207.618652, -2), 3200).Dump();Di2015NewLineDi2015NewLine    Verify(ROUND(3205.618652, 2), 3205.62).Dump();Di2015NewLine    Verify(ROUND(3205.618652, 1), 3205.6).Dump();Di2015NewLine    Verify(ROUND(3205.618652, 0), 3206).Dump();Di2015NewLine    Verify(ROUND(3205.618652, -1), 3210).Dump();Di2015NewLine    Verify(ROUND(3205.618652, -2), 3200).Dump();Di2015NewLineDi2015NewLine    Verify(ROUND(-3206.618652, 2), -3206.62).Dump();Di2015NewLine    Verify(ROUND(-3206.618652, 1), -3206.6).Dump();Di2015NewLine    Verify(ROUND(-3206.618652, 0), -3207).Dump();Di2015NewLine    Verify(ROUND(-3206.618652, -1), -3210).Dump();Di2015NewLine    Verify(ROUND(-3206.618652, -2), -3200).Dump();Di2015NewLineDi2015NewLine    Verify(ROUND(-3207.618652, 2), -3206.62).Dump();Di2015NewLine    Verify(ROUND(-3207.618652, 1), -3206.6).Dump();Di2015NewLine    Verify(ROUND(-3207.618652, 0), -3207).Dump();Di2015NewLine    Verify(ROUND(-3207.618652, -1), -3210).Dump();Di2015NewLine    Verify(ROUND(-3207.618652, -2), -3200).Dump();Di2015NewLineDi2015NewLine    Verify(ROUND(-3205.618652, 2), -3205.62).Dump();Di2015NewLine    Verify(ROUND(-3205.618652, 1), -3205.6).Dump();Di2015NewLine    Verify(ROUND(-3205.618652, 0), -3206).Dump();Di2015NewLine    Verify(ROUND(-3205.618652, -1), -3210).Dump();Di2015NewLine    Verify(ROUND(-3205.618652, -2), -3200).Dump();Di2015NewLineDi2015NewLine    Verify(ROUND(3205.4, 0), 3204).Dump();Di2015NewLine    Verify(ROUND(3205.6, 0), 3205).Dump();Di2015NewLineDi2015NewLine    Verify(ROUND(-4.4, 0), -4).Dump();Di2015NewLine    Verify(ROUND(-4.5, 0), -5).Dump();Di2015NewLine    Verify(ROUND(-4.6, 0), -5).Dump();Di2015NewLine    Verify(ROUND(4.4, 0), 4).Dump();Di2015NewLine    Verify(ROUND(4.5, 0), 5).Dump();Di2015NewLine    Verify(ROUND(4.6, 0), 5).Dump();Di2015NewLine}Di2015NewLineDi2015NewLinepublic static string Verify(double value, double expected)Di2015NewLine{Di2015NewLine    if (Math.Abs(value - expected) < 1e-8)Di2015NewLine        return string.Empty;Di2015NewLineDi2015NewLine    return value + " is not equal (enough) to " + expected;Di2015NewLine}Di2015NewLineDi2015NewLinepublic static double ROUND(double value, int decimals)Di2015NewLine{Di2015NewLine    if (decimals < 0)Di2015NewLine    {Di2015NewLine        var factor = Math.Pow(10, -decimals);Di2015NewLine        return ROUND(value / factor, 0) * factor;Di2015NewLine    }Di2015NewLine    return Math.Round(value, decimals, MidpointRounding.AwayFromZero);Di2015NewLine}Di2015NewLine
21159793Di2015UniqueSeparatorSystem.Diagnostics
21159793Di2015UniqueSeparatorusing (var fileStream = File.OpenWrite(path))Di2015NewLine{Di2015NewLine    double fileSize = Math.Pow(10, 10); // 10 GBDi2015NewLine    int bufferSize = 1024; // 1KBDi2015NewLine    byte[] buffer = new byte[bufferSize]; // Create an array of zero'sDi2015NewLineDi2015NewLine    for (int written = 0; written < fileSize; written += bufferSize)Di2015NewLine    {Di2015NewLine        // Write 1024 bytes (all zero's: 000000000000...0)Di2015NewLine        fileStream.Write(Di2015NewLine            array: buffer,Di2015NewLine            offset: 0,Di2015NewLine            count: bufferSize);Di2015NewLine    }Di2015NewLine    /* Optional inside a "using" block: */ fileStream.Flush();Di2015NewLine}Di2015NewLine
21159837Di2015UniqueSeparatorSelectedIndexChanged
21159837Di2015UniqueSeparatorIsActive
21159837Di2015UniqueSeparatortrue
21159837Di2015UniqueSeparatorpublic class DayOfWeekElement : INotifyPropertyChangedDi2015NewLine{Di2015NewLine   public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine   private void NotifyPropertyChanged(string propertyName)Di2015NewLine   {Di2015NewLine       if (PropertyChanged != null)Di2015NewLine       {Di2015NewLine                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine       }Di2015NewLine   }Di2015NewLineDi2015NewLineDi2015NewLine   private bool isActive = false;Di2015NewLine   public bool IsActive { Di2015NewLine      getDi2015NewLine      {Di2015NewLine          return this.isActive;Di2015NewLine      } Di2015NewLine      setDi2015NewLine      {Di2015NewLine          if (value != this.isActive)Di2015NewLine          {Di2015NewLine             this.isActive= value;Di2015NewLine             NotifyPropertyChanged("IsActive");Di2015NewLine          }Di2015NewLine      }  Di2015NewLine   }Di2015NewLine}Di2015NewLine
21159951Di2015UniqueSeparatorDataTable table = new DataTable();Di2015NewLinetable.Columns.Add("yourField", typeof(string));Di2015NewLinetable.Rows.Add(masterTab1.HeaderGrid.SelectedRows[0].Cells[0].Value.ToString());Di2015NewLine
21159951Di2015UniqueSeparatortable
21159951Di2015UniqueSeparator SerialNumberGrid.DataSource = table ;Di2015NewLine SerialNumberGrid.DataBind();Di2015NewLine
21159951Di2015UniqueSeparator masterTab1.SelectedRows[0].Cells[0].Value.ToString();Di2015NewLine
21159951Di2015UniqueSeparator masterTab1.SelectedRows[0].Cells[0].Text;Di2015NewLine
21160167Di2015UniqueSeparatorValueChanged
21160167Di2015UniqueSeparatorInitializeComponent()
21160167Di2015UniqueSeparatorTextBlock
21160167Di2015UniqueSeparatorInitializeComponent()
21160167Di2015UniqueSeparator<TextBlock x:Name="OpacityNumberTextBlock" HorizontalAlignment="Center"/>Di2015NewLine<Slider x:Name="MenuOpacitySlider"  Minimum="1" Maximum="6" Margin="12,20,12,0" Value="1"/>Di2015NewLine
21160167Di2015UniqueSeparatorpublic MainPage()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine    MenuOpacitySlider.ValueChanged+=MenuOpacitySlider_ValueChanged;Di2015NewLine}Di2015NewLine
21160356Di2015UniqueSeparatoruniqueidentifier
21160531Di2015UniqueSeparator    var customer = new Customer { CustomerName = "test" };Di2015NewLine    _context.Customers.Add(customer);Di2015NewLine    var newContact = new Contact();   Di2015NewLineDi2015NewLine    customer.Contacts = new ObservableListSource<Contact>();// it needs becorse your collection is null Di2015NewLineDi2015NewLineDi2015NewLine    customer.Contacts.Add(newContact);  //just add new child to collection of parentDi2015NewLine    _context.Customers.Add(customer);Di2015NewLine    _context.SaveChanges();Di2015NewLine
21160531Di2015UniqueSeparatorpublic partial class CustomerDi2015NewLine{Di2015NewLinepublic Customer()Di2015NewLine{Di2015NewLine    this.Contacts = new ObservableListSource<Contact>();Di2015NewLine}Di2015NewLineDi2015NewLinepublic int CustomerId { get; set; }Di2015NewLinepublic int CustomerCustomId { get; set; }Di2015NewLinepublic string CustomerName { get; set; }Di2015NewLineprotected ObservableListSource<Contact> _Contacts;Di2015NewLinepublic virtual ObservableListSource<Contact> Contacts Di2015NewLine{ Di2015NewLine  get{            Di2015NewLineDi2015NewLine    if( _Contacts==null) _Contacts= new ObservableListSource<Contact>();            Di2015NewLine      return _Contacts;Di2015NewLine      } Di2015NewLine    set{Di2015NewLine         _Contacts=value;Di2015NewLine       } Di2015NewLine     }Di2015NewLine} Di2015NewLine
21160683Di2015UniqueSeparatorprivate void Map_Tap(object sender, System.Windows.Input.GestureEventArgs e)Di2015NewLine {Di2015NewLine    GeoCoordinate asd = this.Map.ConvertViewportPointToGeoCoordinate(e.GetPosition(this.Map));Di2015NewLine}Di2015NewLine
21160878Di2015UniqueSeparatorvoid DoThisTwice([InstantHandle] Action action)Di2015NewLine{Di2015NewLine    action();Di2015NewLine    action();Di2015NewLine}Di2015NewLine
21160878Di2015UniqueSeparatorInstantHandle
21160940Di2015UniqueSeparatorfor(int i=0; i<10; i++)Di2015NewLine{Di2015NewLine    int number = i;Di2015NewLine    MyApi.AddLazyCreate(() => new foo(/*other params*/ number)); Di2015NewLine}Di2015NewLine
21161237Di2015UniqueSeparatorpublic class ArtistDi2015NewLine{Di2015NewLine    public int Id { get; set; }Di2015NewLine    public string ArtistName { get; set; }Di2015NewLineDi2015NewLine    #region Navigation PropertiesDi2015NewLine    public virtual ICollection<Album> Albums { get; set; }Di2015NewLine    #endregionDi2015NewLine}Di2015NewLineDi2015NewLinepublic class AlbumDi2015NewLine{Di2015NewLine    public int Id { get; set; }Di2015NewLine    public string AlbumName { get; set; }Di2015NewLineDi2015NewLine    public virtual ICollection<Artist> Artists { get; set; }Di2015NewLine}Di2015NewLine
21161265Di2015UniqueSeparatorextern "C" _declspec(dllexport) void TestFunc();Di2015NewLine
21161265Di2015UniqueSeparator_declspec(dllexport) void TestFunc()Di2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLine
21161265Di2015UniqueSeparator[DllImport(@"ImportTest.dll",Di2015NewLine                 EntryPoint = "TestFunc",Di2015NewLine                 ExactSpelling = false,Di2015NewLine                 CallingConvention = CallingConvention.Cdecl)]Di2015NewLine            static extern void NewTestFunc()Di2015NewLine
21161381Di2015UniqueSeparatorCategory
21161420Di2015UniqueSeparatorpublic int ResponderId {get;set;}Di2015NewLinepublic virtual Employee Responder { get; set; }Di2015NewLine
21161420Di2015UniqueSeparatorUnchanged
21161420Di2015UniqueSeparatorvar employee = em.GetEmployeeById(employeeId);Di2015NewLinerequest.ResponderId = employee.Id;Di2015NewLine
21161446Di2015UniqueSeparatorList<object>
21161446Di2015UniqueSeparatorList<double>
21161446Di2015UniqueSeparatorIConvertible
21161446Di2015UniqueSeparatorlong
21161446Di2015UniqueSeparatorint
21161446Di2015UniqueSeparatorshort
21161446Di2015UniqueSeparatorfloat
21161446Di2015UniqueSeparatorvar doubleList = objectList.Select(x=> Convert.ToDouble(x)).ToList();Di2015NewLine
21161840Di2015UniqueSeparator[SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]Di2015NewLine
21161871Di2015UniqueSeparatorvar desc = html.ViewContext.HttpContext.Request.QueryString.Get("desc");Di2015NewLine
21161877Di2015UniqueSeparator$(document).ready(function {Di2015NewLine    $.ajax({Di2015NewLine        type: 'GET',Di2015NewLine        url: '/Controller/Method', // Update with proper URLDi2015NewLine        cache: false,Di2015NewLine        success: function(result) {Di2015NewLine            // You may skip this if you don't expect any resultDi2015NewLine        }Di2015NewLine    });Di2015NewLine});Di2015NewLine
21161877Di2015UniqueSeparatorurl: '@Url.Action("MethodName", "ControllerName")',Di2015NewLine
21161877Di2015UniqueSeparatordata
21161877Di2015UniqueSeparatorvoid
21161877Di2015UniqueSeparatorsuccess
21162322Di2015UniqueSeparatorTextBox
21162322Di2015UniqueSeparatorTextBoxBase
21162322Di2015UniqueSeparatorMaskedTextBox
21162322Di2015UniqueSeparatorRichTextBox
21162322Di2015UniqueSeparatorClear()
21162322Di2015UniqueSeparatorprivate void ClearTextBoxes(ControlCollection controls)Di2015NewLine{Di2015NewLine    foreach (Control c in collection)Di2015NewLine    {Di2015NewLine        if (c.HasChildren)Di2015NewLine        {Di2015NewLine            ClearTextBoxes(c.Controls);Di2015NewLine            continue;Di2015NewLine        }Di2015NewLineDi2015NewLine        TextBox tb = c as TextBox; // or TextBoxBaseDi2015NewLine        if (tb != null)Di2015NewLine            tb.Clear();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21162364Di2015UniqueSeparatorOnDeserialized
21162364Di2015UniqueSeparatorOnDeserialized
21162364Di2015UniqueSeparatoranimations_
21162364Di2015UniqueSeparatorAnimationManager
21162364Di2015UniqueSeparatorOnDeserialized
21162364Di2015UniqueSeparatorAnimationManager
21162364Di2015UniqueSeparatorOnDeserialized
21162419Di2015UniqueSeparatorServer.HtmlEncode(Eval("post_content").ToString())Di2015NewLine    .Replace(Environment.NewLine, "<br>"+Environment.NewLine)Di2015NewLine
21162419Di2015UniqueSeparator<br>
21162465Di2015UniqueSeparatorLIKE '*Ra*'
21162465Di2015UniqueSeparatorLIKE '%Ra%'
21162644Di2015UniqueSeparatorTextObject
21162644Di2015UniqueSeparatorFormula
21162644Di2015UniqueSeparatorReportObjects
21162644Di2015UniqueSeparatorReportDocument.DataDefinition.FormulaFields
21162644Di2015UniqueSeparatorKind
21162644Di2015UniqueSeparatorCrystalDecisions.Shared.FieldKind.FormulaField
21162644Di2015UniqueSeparatorValueType
21162644Di2015UniqueSeparatorCrystalDecisions.Shared.FieldValueType.StringField
21162644Di2015UniqueSeparatortryDi2015NewLine{Di2015NewLine    var sFormula = formula.Text;Di2015NewLine    string pattern = "\\"[\\\\w ]*\\"";Di2015NewLine    Regex r = new Regex(pattern);Di2015NewLine    MatchCollection mc = r.Matches(sFormula);Di2015NewLineDi2015NewLine    foreach (Match m in mc)Di2015NewLine    {Di2015NewLine        var sValue =m.Value;Di2015NewLine        var sParsedValue = sValue.Substring(1, sValue.Length - 2);Di2015NewLineDi2015NewLine        if (sParsedValue.StartsWith("s"))Di2015NewLine        {Di2015NewLine            var stest = "\\"" + CApplicationData.TranslateStringValue(sParsedValue) + "\\"";Di2015NewLine            sFormula = sFormula.Replace(sValue, stest);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    formula.Text = sFormula;Di2015NewLine}Di2015NewLinecatch{}Di2015NewLine
21162644Di2015UniqueSeparator"sPage" + " " + totext(PageNumber) + " " + "sOf" + " " + totext(TotalPageCount)
21162644Di2015UniqueSeparator"PÃ¡gina" + " " + totext(PageNumber) + " " + "de" + " " + totext(TotalPageCount)
21162644Di2015UniqueSeparatorPÃ¡gina 1 de 4
21162816Di2015UniqueSeparatorRunAsync
21162816Di2015UniqueSeparatorClose
21162816Di2015UniqueSeparatortask.Task = task.ContinueWith(Close(), ...)
21162816Di2015UniqueSeparatorawait
21162816Di2015UniqueSeparatorContinueWith
21162816Di2015UniqueSeparatorfrmProgressAsync prog = new frmProgressAsync(true);Di2015NewLineTaskWithProgress t = new TaskWithProgress("Smoothing CP", true);Di2015NewLinet.Task = ShowMovingAveragesAsync(A, B, tension, t.Progress);Di2015NewLineawait prog.RunAsync(t);Di2015NewLineDi2015NewLineprivate async Task ShowMovingAveragesAsync(TA A, TA B, TT tession, IProgress<string> progress)Di2015NewLine{Di2015NewLine  progress.Report("Smoothing FG");Di2015NewLine  await A.ShowMovingAverageAsync(tension, progress);Di2015NewLine  progress.Report("Smoothing FG");Di2015NewLine  await B.ShowMovingAverageAsync(tension, progress);Di2015NewLine}Di2015NewLineDi2015NewLinepublic virtual async Task RunAsync(TaskWithProgress task)Di2015NewLine{Di2015NewLine  Show();Di2015NewLine  TaskIsRunning();Di2015NewLine  await task;Di2015NewLine  Close();Di2015NewLine}Di2015NewLine
21162879Di2015UniqueSeparatorIEnumerable<KeyValuePair<Key, Value>>
21162879Di2015UniqueSeparatorSelectMany
21162879Di2015UniqueSeparatorvar dict = new Dictionary<string, IEnumerable<string>>();Di2015NewLineIEnumerable<KeyValuePair<string, string>> flattenedDict = dictDi2015NewLine    .SelectMany(kv => Di2015NewLine        kv.Value.Select(v => new KeyValuePair<string, string>(kv.Key, v)));Di2015NewLine
21162923Di2015UniqueSeparatorType.GetProperty(String, BindingFlags)
21162923Di2015UniqueSeparatorBindingFlags.DeclaredOnly
21162923Di2015UniqueSeparatornamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    class ClassADi2015NewLine    {Di2015NewLine        public string ClassAProp { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    class ClassB : ClassADi2015NewLine    {Di2015NewLine        public string ClassBProp { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    class ClassC : ClassBDi2015NewLine    {Di2015NewLine        public string ClassCProp { get; set; }Di2015NewLine    }Di2015NewLineDi2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            var c = new ClassC();Di2015NewLine            var t = c.GetType();Di2015NewLine            while (t.BaseType != null)Di2015NewLine            {Di2015NewLine                var cProps = t.GetProperties(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public);Di2015NewLine                foreach (var p in cProps)Di2015NewLine                {Di2015NewLine                    Console.WriteLine("{0} defines {1}", t.Name, p.Name);Di2015NewLine                }Di2015NewLine                t = t.BaseType;Di2015NewLine            }Di2015NewLine            Console.ReadLine();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21162923Di2015UniqueSeparatorType.BaseType
21162923Di2015UniqueSeparatorobject
21162923Di2015UniqueSeparatorwhile (t != TypeYouWantToStopAt.GetType())
21162964Di2015UniqueSeparatorOrderby
21162964Di2015UniqueSeparatorfrom c in child_categories Di2015NewLineorderby c.Translated_Syntax == "Other", c.Translated_SyntaxDi2015NewLine
21162964Di2015UniqueSeparatorbool
21162964Di2015UniqueSeparatortrue
21162964Di2015UniqueSeparator1
21162964Di2015UniqueSeparatorfalse
21162964Di2015UniqueSeparator0
21162964Di2015UniqueSeparatororderby Translated_Syntax == "Other"
21162964Di2015UniqueSeparatordescending
21162977Di2015UniqueSeparatorHeader
21162977Di2015UniqueSeparatorIDerived
21162977Di2015UniqueSeparatorIBaseReader
21162977Di2015UniqueSeparatorinterface IDerived : IBaseReader {Di2015NewLine   string Delimiter {get; set;}}Di2015NewLine
21162977Di2015UniqueSeparatorinterface IHasDelimiter {Di2015NewLine   string Delimiter {get; set;}}Di2015NewLine
21162977Di2015UniqueSeparatorHeader
21162977Di2015UniqueSeparator_reader
21162977Di2015UniqueSeparatorvar items = _reader.Header.Split((_reader as ICustomReader).Delimiter);Di2015NewLine
21162979Di2015UniqueSeparator<serviceBehaviors>Di2015NewLine    <behavior>Di2015NewLine        <!-- name attribute missing in behavior -->Di2015NewLine    </behavior>Di2015NewLine  </serviceBehaviors>Di2015NewLine
21162987Di2015UniqueSeparatorDbQuery<T>
21162987Di2015UniqueSeparatorparams
21162987Di2015UniqueSeparatorpublic IEnumerable<T> GetAll(params string[] includes)Di2015NewLine{Di2015NewLine    IQueryable<T> query = context.Set<T>();Di2015NewLine    foreach (var include in includes)Di2015NewLine        query = query.Include(include);Di2015NewLineDi2015NewLine    return query;Di2015NewLine}Di2015NewLine
21162987Di2015UniqueSeparatorpublic IList<Page> GetPublished()Di2015NewLine{Di2015NewLine    return Repository.GetAll("ForbiddenUsers", "ForbiddenGroups")Di2015NewLine                     .Where(model => model.Published)Di2015NewLine                     .ToList();Di2015NewLine}Di2015NewLine
21162997Di2015UniqueSeparatorEnum.Parse
21162997Di2015UniqueSeparatorEnum.Parse
21162997Di2015UniqueSeparatorlstCust.AddRange((from xx in db.vw_AllCustomizationDi2015NewLine                                  where xx.CatID == CatID && xx.ProductID == PIDDi2015NewLine                                  select xx)Di2015NewLine                        .TolList()  // Moves to LINQ To Object hereDi2015NewLine                        .Select(xx => new itmCustomization()Di2015NewLine                                  {Di2015NewLine                                      itmName = xx.Description,Di2015NewLine                                      catId = (int)xx.CatID,Di2015NewLine                                      proId = (int)xx.ProductID,Di2015NewLine                                      custType = (customizationType)Enum.Parse(typeof(customizationType), xx.CustType)Di2015NewLine                                  }).ToList<itmCustomization>());Di2015NewLine
21162998Di2015UniqueSeparatorprivate void Rebind(myWorksheet currWorksheet, out Excel.Workbook workbook)Di2015NewLine{Di2015NewLineDi2015NewLine  currWorksheet.Application.Calculation = Excel.XlCalculation.xlCalculationManualDi2015NewLine  currWorksheet.Application.ScreenUpdating=FalseDi2015NewLineDi2015NewLine  foreach (string connectedWorksheet in currWorksheet.Dependencies)Di2015NewLine  {Di2015NewLine    myWorksheet ws = DataHelper.FindWorksheetFromList(connectedWorksheet, this.WorksheetList);Di2015NewLine    Excel.Worksheet sheet = DataHelper.FindWorksheetFromWorkbook(connectedWorksheet,workbook);Di2015NewLineDi2015NewLine    this.LoadData(sheet,ws);Di2015NewLine  }Di2015NewLineDi2015NewLine  Excel.Worksheet sheetMain = DataHelper.FindWorksheetFromWorkbook(currWorksheet.WorksheetName,workbook);Di2015NewLine  this.LoadData(sheetMain,currWorksheet);Di2015NewLineDi2015NewLine  currWorksheet.Application.Calculation = Excel.XlCalculation.xlCalculationAutomaticDi2015NewLine  currWorksheet.Application.ScreenUpdating=TrueDi2015NewLine }Di2015NewLine
21163030Di2015UniqueSeparator<form id="form1" runat="server">Di2015NewLine    <asp:Button ID="Button1" runat="server" Text="Button" OnClick="Button1_Click" />Di2015NewLine     <asp:Button ID="Button2" runat="server" Text="Button" OnClick="Button2_Click" />Di2015NewLine</form>Di2015NewLineDi2015NewLine  protected void Button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine    // do something with button 1Di2015NewLineDi2015NewLine}Di2015NewLineprotected void Button2_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    // do something with button 2Di2015NewLine}Di2015NewLine
21163036Di2015UniqueSeparatorLoadData
21163036Di2015UniqueSeparatorpublic async Task LoadDataAsync()Di2015NewLine{        Di2015NewLine    PanItem1 = await PanItem1Table.ToCollectionAsync<PanItem1>();Di2015NewLine    PanItem2 = await PanItem2Table.ToCollectionAsync<PanItem2>();Di2015NewLine    PanItem3 = await PanItem3Table.ToCollectionAsync<PanItem3>();Di2015NewLine}Di2015NewLine
21163036Di2015UniqueSeparatorprivate void bw_DoWork(object sender, DoWorkEventArgs e)Di2015NewLine{Di2015NewLine    BackgroundWorker worker = sender as BackgroundWorker;Di2015NewLine    App.ViewModel.LoadData().Wait();Di2015NewLine    System.Threading.Thread.Sleep(3000);Di2015NewLine}Di2015NewLine
21163036Di2015UniqueSeparatorBackgroundWorker
21163036Di2015UniqueSeparatorpublic async Task LoadDataAsync()Di2015NewLine{        Di2015NewLine    PanItem1 = await PanItem1Table.ToCollectionAsync<PanItem1>();Di2015NewLine    PanItem2 = await PanItem2Table.ToCollectionAsync<PanItem2>();Di2015NewLine    PanItem3 = await PanItem3Table.ToCollectionAsync<PanItem3>();Di2015NewLine    RefreshBinding();Di2015NewLine}Di2015NewLine
21163280Di2015UniqueSeparatorSemaphoreSlim
21163280Di2015UniqueSeparator1
21163280Di2015UniqueSeparatorprivate static SemaphoreSlim semaphore = new SemaphoreSlim(1);Di2015NewLineDi2015NewLineprivate async static void DoSomethingAsync()Di2015NewLine{Di2015NewLine     await semaphore.WaitAsync();Di2015NewLine     tryDi2015NewLine     {Di2015NewLine        await Task.Factory.StartNew(() =>Di2015NewLine        {Di2015NewLine            Console.WriteLine("start");Di2015NewLine            Thread.Sleep(5000);Di2015NewLine            Console.WriteLine("end");Di2015NewLine        });Di2015NewLine     }Di2015NewLine     finallyDi2015NewLine     {Di2015NewLine        semaphore.Release();Di2015NewLine     }Di2015NewLine}Di2015NewLineDi2015NewLineprivate static void Main(string[] args)Di2015NewLine{Di2015NewLine    DoSomethingAsync();Di2015NewLine    DoSomethingAsync();Di2015NewLine    Console.Read();Di2015NewLine}Di2015NewLine
21163296Di2015UniqueSeparatorBar
21163296Di2015UniqueSeparatorFoo
21163296Di2015UniqueSeparatorFoo
21163296Di2015UniqueSeparatorBar
21163296Di2015UniqueSeparatorFoo
21163296Di2015UniqueSeparatorFoo
21163296Di2015UniqueSeparatorFooChild
21163296Di2015UniqueSeparatorFooChild.Bar
21163296Di2015UniqueSeparatorFoo.Bar
21163296Di2015UniqueSeparatorBar
21163296Di2015UniqueSeparator    Bar bar = new Bar();Di2015NewLine
21163296Di2015UniqueSeparatorBar
21163296Di2015UniqueSeparatorBar
21163296Di2015UniqueSeparatorBar
21163296Di2015UniqueSeparatorFoo
21163296Di2015UniqueSeparatorabstract class FooDi2015NewLine{Di2015NewLine    public abstract Bar CreateBar();Di2015NewLine    public void RandomFunction()Di2015NewLine    {Di2015NewLine        Bar bar = CreateBar();Di2015NewLine        bar.Foobar();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21163296Di2015UniqueSeparatorBar
21163312Di2015UniqueSeparatorXElement output = XElement.Load("c:\\\\temp\\\\input.xml");Di2015NewLineIEnumerable<XElement> users = output.Elements(); Di2015NewLineDi2015NewLine        DataTable dt = new DataTable();Di2015NewLine                dt.Columns.Add("CLIENT_INPUT_MHS_ID", typeof(int));Di2015NewLine                dt.Columns.Add("CLIENT_INPUT_MHS_GUID",typeof(Guid));Di2015NewLine                dt.Columns.Add("ITEM", typeof(string));Di2015NewLine                dt.Columns.Add("ITEM_ID", typeof(int));Di2015NewLine                dt.Columns.Add("ITEM_NUMBER", typeof(string));Di2015NewLine                dt.Columns.Add("CATEGORY", typeof(string));        Di2015NewLineDi2015NewLine        foreach (XElement str in users)Di2015NewLine        {Di2015NewLine            DataRow dr = dt.NewRow();Di2015NewLine            foreach (XElement node in str.Elements())Di2015NewLine            {Di2015NewLine                dr[node.Name.LocalName] = node.Value;Di2015NewLine            }Di2015NewLineDi2015NewLine            dt.Rows.Add(dr);Di2015NewLine        }Di2015NewLineSqlBulkCopy bulkCopy = new SqlBulkCopy("ConnectionString...");Di2015NewLine using (bulkCopy )Di2015NewLine                {Di2015NewLine                    bulkCopy .BulkCopyTimeout = 0;Di2015NewLine                    bulkCopy .ColumnMappings.Add(dt.Columns[0].ColumnName, "CLIENT_INPUT_MHS_ID");Di2015NewLine                    bulkCopy .ColumnMappings.Add(dt.Columns[1].ColumnName, "CLIENT_INPUT_MHS_GUID");Di2015NewLine                    bulkCopy .ColumnMappings.Add(dt.Columns[2].ColumnName, "ITEM");Di2015NewLine                    bulkCopy .ColumnMappings.Add(dt.Columns[3].ColumnName, "ITEM_ID");Di2015NewLine                    bulkCopy .ColumnMappings.Add(dt.Columns[4].ColumnName, "ITEM_NUMBER");Di2015NewLine                    bulkCopy .ColumnMappings.Add(dt.Columns[5].ColumnName, "CATEGORY");Di2015NewLine                    bulkCopy.DestinationTableName = "DestinationTableName";                   Di2015NewLine                    bulkCopy.WriteToServer(dt); }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLineIts working fine with my scenario.Di2015NewLine
21163364Di2015UniqueSeparatorStream s = new MemoryStream();Di2015NewLineStreamReader sr = new StreamReader(s);Di2015NewLine// Read things here.Di2015NewLines.Position = 10;Di2015NewLinesr.DiscardBufferedData();        // reader now reading from position 0Di2015NewLinesr.BaseStream.Seek(10, SeekOrigin.Begin); // Reader now reading from location 10.Di2015NewLine
21163364Di2015UniqueSeparatorStreamReader.BaseStream.Position = SOMETHING_ELSE;Di2015NewLinesr.DiscardBufferedData();Di2015NewLineStreamReader.BaseStream.Seek(SOMETHING_ELSE, SeekOrigin.Begin);Di2015NewLineConsole.WriteLine(StreamReader.ReadLine());Di2015NewLine
21163364Di2015UniqueSeparatorStreamReader.BaseStream.Position = CursorValue;Di2015NewLinesr.DiscardBufferedData();Di2015NewLineStreamReader.BaseStream.Seek(CursorValue, SeekOrigin.Begin);Di2015NewLine
21163464Di2015UniqueSeparatorVerticalAlignment
21163464Di2015UniqueSeparatorDataGrid
21163464Di2015UniqueSeparatorTop
21163464Di2015UniqueSeparatorStretch
21163464Di2015UniqueSeparatorStackPanel
21163464Di2015UniqueSeparatorStackPanel
21163464Di2015UniqueSeparatorStackPanel
21163464Di2015UniqueSeparatorStretch
21163464Di2015UniqueSeparatorMSDN
21163567Di2015UniqueSeparator Keepers.Add(outp);Di2015NewLineDi2015NewLineKeepers.Sort();Di2015NewLineDi2015NewLine newKeepers = Keepers.Distinct().ToList();Di2015NewLineDi2015NewLineforeach (object o in newKeepers)Di2015NewLine            {Di2015NewLine                Console.WriteLine(o);Di2015NewLine            }Di2015NewLineConsole.ReadLine();Di2015NewLine
21163720Di2015UniqueSeparatorDataGridView
21163996Di2015UniqueSeparatorParallel.For
21163996Di2015UniqueSeparatorlocalResults
21163996Di2015UniqueSeparator//EDIT - Create an array of length 0 here    V    for input to first iterationDi2015NewLineParallel.For(0, iScenarios, () => new double[0],Di2015NewLine    (int k, ParallelLoopState state, double[] localResults) =>Di2015NewLine        {Di2015NewLine            List<double> CalcResults = new List<double>();Di2015NewLine            for (int n = iStart; n < iEnd; n++)Di2015NewLine            {Di2015NewLine                CalcResults.AddRange(CalcRoutine(n, k));Di2015NewLine            }Di2015NewLine            localResults = localResults.Concat(Di2015NewLine                               this.SumOfResults(CalcResults)Di2015NewLine                           ).ToArray();Di2015NewLine            return localResults;                   Di2015NewLine        },Di2015NewLine         (double[] localResults) =>Di2015NewLine         {                    Di2015NewLine             lock (locker)Di2015NewLine            {Di2015NewLine                 TotalResults.AddRange(localResults);Di2015NewLine             }Di2015NewLine         });Di2015NewLine
21163996Di2015UniqueSeparatorConcat
21163996Di2015UniqueSeparatorList<double>
21163996Di2015UniqueSeparatordouble[]
21163996Di2015UniqueSeparatorSumOfResults
21163996Di2015UniqueSeparatorParallel.For(0, iScenarios, Enumerable.Empty<double>(),Di2015NewLine    (int k, ParallelLoopState state, IEnumerable<double> localResults) =>Di2015NewLine    {Di2015NewLine        List<double> CalcResults = new List<double>();Di2015NewLine        for (int n = iStart; n < iEnd; n++)Di2015NewLine        {Di2015NewLine            CalcResults.AddRange(CalcRoutine(n, k));Di2015NewLine        }Di2015NewLine        return localResults.Concat(this.SumOfResults(CalcResults));                   Di2015NewLine    },Di2015NewLine     (IEnumerable<double> localResults) =>Di2015NewLine     {                    Di2015NewLine         lock (locker)Di2015NewLine        {Di2015NewLine             TotalResults.AddRange(localResults);Di2015NewLine         }Di2015NewLine     });Di2015NewLine
21164012Di2015UniqueSeparatorSystem.Web
21164012Di2015UniqueSeparatorUri uri = new Uri("http://www.youtube.com/watch?v=9BYphSyf0qY");Di2015NewLineSystem.Web.HttpUtility.ParseQueryString(uri.Query).Get("v");Di2015NewLine
21164047Di2015UniqueSeparatorint callID = Convert.ToInt32(DataBinder.Eval(e.Row.DataItem, "CagriID"));Di2015NewLine
21164047Di2015UniqueSeparator    protected void gvListele_RowDataBound(object sender, GridViewRowEventArgs e)Di2015NewLine{Di2015NewLine    dbeDataContext db = new dbeDataContext();Di2015NewLine    var c = (from v in db.CAGRIs where v.UserID != Convert.ToInt32(Session["user"]) select v).ToArray();Di2015NewLine    if (c != null)Di2015NewLine    {Di2015NewLine        foreach (var item in c)Di2015NewLine        {Di2015NewLine            if (e.Row.RowType == DataControlRowType.DataRow)Di2015NewLine            {Di2015NewLine                int callID = Convert.ToInt32(DataBinder.Eval(e.Row.DataItem, "CagriID"));Di2015NewLine                if (callID == item.CagriID)Di2015NewLine                {Di2015NewLine                    e.Row.Enabled = false;Di2015NewLine                    continue;Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21164056Di2015UniqueSeparatorDbContext
21164056Di2015UniqueSeparatorpublic class MyDbContext: DbContextDi2015NewLine{Di2015NewLine    public DbSet<Device> Devices {get; set;}Di2015NewLine    public DbSet<DeviceDictionary> Dictionaries { get; set; }Di2015NewLine}Di2015NewLine
21164060Di2015UniqueSeparatorstruct
21164060Di2015UniqueSeparatorIEnumerable<int>
21164060Di2015UniqueSeparatorIEnumerable<long>
21164060Di2015UniqueSeparatorIEnumerable<object>
21164060Di2015UniqueSeparatorint
21164060Di2015UniqueSeparatorlong
21164060Di2015UniqueSeparatorobject
21164060Di2015UniqueSeparatorNullable<T>
21164060Di2015UniqueSeparatorT
21164060Di2015UniqueSeparatorNullable<T>
21164060Di2015UniqueSeparatorstruct
21164073Di2015UniqueSeparatorPerson person = null;Di2015NewLineDi2015NewLinevar peopleThatChose =Di2015NewLine    Session.QueryOver<Person>(() => person)Di2015NewLine        .JoinQueryOver<Contract>(person => person.Contracts)Di2015NewLine        .JoinQueryOver<Budget>(contract => contract.Budget)Di2015NewLine        .JoinQueryOver<Choice>(budget => budget.Choice)Di2015NewLine        .JoinQueryOver<ChosenBenefit>(choice => choice.ChosenBenefit)Di2015NewLine            .Where(chosen => chosen.BenefitImplementation.Id == 77)Di2015NewLine        .SelectList(list => listDi2015NewLine            .Select(() => person.FirstName)Di2015NewLine            .Select(() => person.LastName))Di2015NewLine        .List<object[]>();Di2015NewLine
21164103Di2015UniqueSeparatorMySql*
21164103Di2015UniqueSeparatorSql*
21164103Di2015UniqueSeparatorDataTable dt;Di2015NewLineprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{            Di2015NewLine    //Fetch data from mysql databaseDi2015NewLine    SqlConnection conn = new SqlConnection("server=localhost;uid=root;Di2015NewLine         password=priya123;database=world;pooling=false;");Di2015NewLine    conn.Open();Di2015NewLine    string cmd = "select * from country limit 7";Di2015NewLine    SqlDataAdapter dAdapter = new SqlDataAdapter(cmd, conn);Di2015NewLine    DataSet ds = new DataSet();Di2015NewLine    dAdapter.Fill(ds);Di2015NewLine    dt=ds.Tables[0];Di2015NewLine    //Bind the fetched data to gridviewDi2015NewLine    GridView1.DataSource = dt;Di2015NewLine    GridView1.DataBind();Di2015NewLine}Di2015NewLineDi2015NewLineprotected void GridView1_RowCommand(object sender, GridViewCommandEventArgs e)Di2015NewLine{Di2015NewLine    if(e.CommandName.Equals("detail"))Di2015NewLine    {Di2015NewLine        int index = Convert.ToInt32(e.CommandArgument);Di2015NewLine        string code = GridView1.DataKeys[index].Value.ToString();Di2015NewLineDi2015NewLine        IEnumerable<DataRow> query = from i in dt.AsEnumerable()Di2015NewLine                          where i.Field<String>("Code").Equals(code)Di2015NewLine                           select i;Di2015NewLine        DataTable detailTable = query.CopyToDataTable<DataRow>();Di2015NewLine        DetailsView1.DataSource = detailTable;Di2015NewLine        DetailsView1.DataBind();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21164109Di2015UniqueSeparatorforeach(var key in d.Keys.ToArray())Di2015NewLine{Di2015NewLine    d[key] = "absent";Di2015NewLine}Di2015NewLine
21164109Di2015UniqueSeparator.ToArray()
21164109Di2015UniqueSeparatorforeach
21164109Di2015UniqueSeparatord.Keys
21164161Di2015UniqueSeparatorControlTemplate
21164161Di2015UniqueSeparatorControlTemplate.FindName
21164161Di2015UniqueSeparatorControlTemplate
21164161Di2015UniqueSeparatorControlTemplate
21164161Di2015UniqueSeparator// Assuming that your DockPanel in the ControlTemplate was named DockPanelDi2015NewLineDockPanel dockPanel = Di2015NewLine    frameControl.Template.FindName("DockPanel", frameControl) as DockPanel;Di2015NewLineif (dockPanel != null) // You must check for nullDi2015NewLine{Di2015NewLine    DoSomethingHereWith(dockPanel);Di2015NewLine}Di2015NewLine
21164504Di2015UniqueSeparatorpublic class CombinedItem : ItemDi2015NewLine{Di2015NewLine   private readonly ObjectItem _objectItem = new ObjectItem();Di2015NewLineDi2015NewLine   public CombinedItem()Di2015NewLine   {Di2015NewLine       _objectItem.PropertyChanged += (s, e) => Di2015NewLine       {Di2015NewLine           if (e.PropertyName == "IsExpanded")Di2015NewLine               OnPropertyChanged("IsExpanded");Di2015NewLine       }Di2015NewLine   }Di2015NewLineDi2015NewLine   public bool IsExpandedDi2015NewLine   {Di2015NewLine      get { return _objectItem.IsExpanded; }Di2015NewLine      set { _objectItem.IsExpanded = value; }Di2015NewLine   }Di2015NewLineDi2015NewLine   public static implicit operator ObjectItem(CombinedItem combinedItem)Di2015NewLine   {Di2015NewLine      return combinedItem._objectItem;Di2015NewLine   }Di2015NewLine}Di2015NewLine
21164562Di2015UniqueSeparator<asp:TemplateField HeaderText="Bureau">Di2015NewLine    <ItemStyle Width="120px" Wrap="true"></ItemStyle>Di2015NewLine    <FooterStyle Wrap="true"></FooterStyle>Di2015NewLine    <ItemTemplate>Di2015NewLine    ...Di2015NewLine
21164562Di2015UniqueSeparator<ItemStyle>
21164562Di2015UniqueSeparator<FooterStyle>
21164612Di2015UniqueSeparatorvar pageHandler = HttpContext.Current.CurrentHandler;Di2015NewLineif (pageHandler  is  System.Web.UI.Page)Di2015NewLine{Di2015NewLine  ((System.Web.UI.Page)pageHandler).Master.FindControl("...").Visible=false;Di2015NewLine}Di2015NewLine
21164691Di2015UniqueSeparator SqlCommand getDataPath = new SqlCommand("select physical_name from sys.database_files;", baseConnection); // get default path where the sqlserver saves filesDi2015NewLine            string temp = getDataPath.ExecuteScalar().ToString();Di2015NewLine            temp = temp.Replace(temp.Split('\\\\').Last(), string.Empty);Di2015NewLine            StringBuilder sqlScript = new StringBuilder(Scripts.CreateDatabase); //CreateDatabase could be in ressourcesDi2015NewLine            ///The @@@@ are used to replace the hardcorededpath in your scriptDi2015NewLine            sqlScript.Replace("@@@@MAINDATAFILENAME@@@@", string.Concat(temp, "test.mdf"));Di2015NewLine            sqlScript.Replace("@@@@LOGDATAFILENAME@@@@", string.Concat(temp, "test_log.ldf"));Di2015NewLine            string[] splittedScript = new string[] { "\\r\\nGO\\r\\n" }; //remove GODi2015NewLine            string[] commands = sqlScript.ToString().Split(splittedScript,Di2015NewLine              StringSplitOptions.RemoveEmptyEntries);Di2015NewLine
21164691Di2015UniqueSeparatorSqlCommand cmd = new SqlCommand(command[x], baseConnection);
21164709Di2015UniqueSeparatorUIEdgeInsetsInsetRect
21164709Di2015UniqueSeparatorUIEdgeInsets
21164709Di2015UniqueSeparatorInsetRect
21164709Di2015UniqueSeparatorRectangleF
21164709Di2015UniqueSeparatorpublic override void DrawText(RectangleF rect)Di2015NewLine{Di2015NewLine    base.DrawText (Insets.InsetRect (rect));Di2015NewLine}Di2015NewLine
21164850Di2015UniqueSeparatorAlleCoaches.ToList()Di2015NewLine.ForEach(n=>n.NumOfPlayer=AllePlayer.Where(n=>coachNumer==n.coachNumer).Count());Di2015NewLine
21165204Di2015UniqueSeparatorclient_id
21165204Di2015UniqueSeparatorclient_secret
21165518Di2015UniqueSeparatorvar grid = sender as DataGrid;Di2015NewLine
21165518Di2015UniqueSeparatorDataGrid
21165518Di2015UniqueSeparatornull
21165518Di2015UniqueSeparatorvar grid = sender as RadGridView;Di2015NewLine
21165630Di2015UniqueSeparator     1Di2015NewLine   2   3Di2015NewLine311  6    3Di2015NewLine
21165669Di2015UniqueSeparatorDateTime
21165669Di2015UniqueSeparatorDateTime.Parse
21165669Di2015UniqueSeparatorDateTime.ParseExact
21165669Di2015UniqueSeparatorDateTime.TryParseExact
21165669Di2015UniqueSeparator?
21165773Di2015UniqueSeparator(?m)Di2015NewLine
21165773Di2015UniqueSeparator(?m)^\\s*10 (\\S*)([^.]*)\\.Di2015NewLine
21165869Di2015UniqueSeparatorhub.start()
21165869Di2015UniqueSeparatorhub.start()
21165869Di2015UniqueSeparator$.connection.notificationHub.on('scanReceived ', function (text) {Di2015NewLine    alert("scan received");Di2015NewLine});Di2015NewLine
21166180Di2015UniqueSeparatorFriend Shared Function GetRequestTokenQuery() As OAuthWebQueryDi2015NewLine    Dim oauth = New OAuthWorkflow() With { _Di2015NewLine        .ConsumerKey = AppSettings.consumerKey, _Di2015NewLine        .ConsumerSecret = AppSettings.consumerKeySecret, _Di2015NewLine        .SignatureMethod = OAuthSignatureMethod.HmacSha1, _Di2015NewLine        .ParameterHandling = OAuthParameterHandling.HttpAuthorizationHeader, _Di2015NewLine        .RequestTokenUrl = AppSettings.RequestTokenUri, _Di2015NewLine        .Version = AppSettings.oAuthVersion, _Di2015NewLine        .CallbackUrl = AppSettings.CallbackUri _Di2015NewLine    }Di2015NewLineDi2015NewLine        Dim info = oauth.BuildRequestTokenInfo(WebMethod.[Get])Di2015NewLine        Dim objOAuthWebQuery = New OAuthWebQuery(info, False)Di2015NewLine        objOAuthWebQuery.HasElevatedPermissions = TrueDi2015NewLine        objOAuthWebQuery.SilverlightUserAgentHeader = "Hammock"Di2015NewLine        Return objOAuthWebQueryDi2015NewLine    End FunctionDi2015NewLine
21166229Di2015UniqueSeparatorBy.cssSelector()
21166229Di2015UniqueSeparatorBy.id()
21166229Di2015UniqueSeparatorBy.id()
21166229Di2015UniqueSeparator    @OverrideDi2015NewLine    public List<WebElement> findElements(SearchContext context) {Di2015NewLine      if (context instanceof FindsById)Di2015NewLine        return ((FindsById) context).findElementsById(id);Di2015NewLine      return ((FindsByXPath) context).findElementsByXPath(".//*[@id = '" + idDi2015NewLine          + "']");Di2015NewLine    }Di2015NewLineDi2015NewLine    @OverrideDi2015NewLine    public WebElement findElement(SearchContext context) {Di2015NewLine      if (context instanceof FindsById)Di2015NewLine        return ((FindsById) context).findElementById(id);Di2015NewLine      return ((FindsByXPath) context).findElementByXPath(".//*[@id = '" + idDi2015NewLine          + "']");Di2015NewLine    }Di2015NewLine
21166229Di2015UniqueSeparatorBy.cssSelector
21166229Di2015UniqueSeparatorBy.cssSelector
21166229Di2015UniqueSeparatorBy.id
21166363Di2015UniqueSeparatorController
21166363Di2015UniqueSeparator<% using(Html.BeginForm("ResetService", "Controller"))Di2015NewLine{%> Di2015NewLine  <input type="submit" value="Send" />Di2015NewLine<% } %>Di2015NewLine
21166363Di2015UniqueSeparator@Html.Action("ResetService")Di2015NewLine
21166478Di2015UniqueSeparatorDim serviceWrapper As New
21166478Di2015UniqueSeparatorDim serviceWrapper = New
21166478Di2015UniqueSeparatorOption Infer Off
21166478Di2015UniqueSeparatorOption Strict On
21166605Di2015UniqueSeparatorbool SelectAll;Di2015NewLine
21166605Di2015UniqueSeparatorPageLoad
21166605Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if(!IsPostback){Di2015NewLine        SelectAll = StatusCheckBoxList.Items.Cast<ListItem>().FirstOrDefault(d => d.Text == "Select All" && d.Selected) != null;Di2015NewLineDi2015NewLine    }Di2015NewLine}Di2015NewLine
21166605Di2015UniqueSeparatorprotected void StatusCheckBoxListChanged(object sender, System.EventArgs e)Di2015NewLine{Di2015NewLine    if(SelectAll != (StatusCheckBoxList.Items.Cast<ListItem>().FirstOrDefault(d => d.Text == "Select All" && d.Selected) != null)){Di2015NewLine        SelectAll = !SelectAll;Di2015NewLine        foreach(var li in StatusCheckBoxList.Items){Di2015NewLine            li.Selected = SelectAll;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21166605Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if(!IsPostback){Di2015NewLine        SelectAll = StatusCheckBoxList.Items[0].Selected;Di2015NewLine        foreach(var li in StatusCheckBoxList.Items){Di2015NewLine            li.Selected = SelectAll;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21166605Di2015UniqueSeparatorprotected void StatusCheckBoxListChanged(object sender, System.EventArgs e)Di2015NewLine{Di2015NewLine    if(SelectAll != StatusCheckBoxList.Items[0].Selected){Di2015NewLine        SelectAll = !SelectAll;Di2015NewLine        foreach(var li in StatusCheckBoxList.Items){Di2015NewLine            li.Selected = SelectAll;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21166607Di2015UniqueSeparator<
21166607Di2015UniqueSeparator<asp:LinkButton runat ="server" ID="lnkTest"><lll</asp:LinkButton>Di2015NewLine
21166607Di2015UniqueSeparator<
21166607Di2015UniqueSeparator<
21166607Di2015UniqueSeparator<
21166713Di2015UniqueSeparatorDataBinding
21166713Di2015UniqueSeparatorItem
21166713Di2015UniqueSeparatorItems
21166713Di2015UniqueSeparatorpublic class ItemDi2015NewLine{Di2015NewLine    public Item(string letter, Brush back, Brush front)Di2015NewLine    {Di2015NewLineDi2015NewLine        Letter = letter;Di2015NewLine        BackColor = back;Di2015NewLine        FrontColor = front;Di2015NewLine    }Di2015NewLineDi2015NewLine    public Item(string letter, Brush back, Brush front, List<Item> items)Di2015NewLine        : this(letter, back, front)Di2015NewLine    {Di2015NewLine        Items = items;Di2015NewLine    }Di2015NewLineDi2015NewLine    public List<Item> Items { get; set; }Di2015NewLineDi2015NewLineDi2015NewLine    public string Letter { get; set; }Di2015NewLine    public Brush BackColor { get; set; }Di2015NewLine    public Brush FrontColor { get; set; }Di2015NewLine}Di2015NewLine
21166713Di2015UniqueSeparator<Window x:Class="WpfApplication1.MainWindow"Di2015NewLine    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:wpfApplication1="clr-namespace:WpfApplication1"Di2015NewLine    Title="MainWindow" Height="350" Width="525"Di2015NewLine    DataContext="{Binding RelativeSource={RelativeSource Self}}">Di2015NewLine<Grid>Di2015NewLineDi2015NewLine    <Grid.Resources>Di2015NewLine        <DataTemplate DataType="{x:Type wpfApplication1:Item}">Di2015NewLine            <Button Content="{Binding Letter}" Foreground="{Binding FrontColor}" Background="{Binding BackColor}" Click="Button_OnClick" Tag="{Binding}"/>Di2015NewLine        </DataTemplate>Di2015NewLine    </Grid.Resources>Di2015NewLineDi2015NewLine    <Grid.ColumnDefinitions>Di2015NewLine        <ColumnDefinition />Di2015NewLine        <ColumnDefinition />Di2015NewLine    </Grid.ColumnDefinitions>Di2015NewLine    <Grid.RowDefinitions>Di2015NewLine        <RowDefinition  />Di2015NewLine        <RowDefinition />Di2015NewLine        <RowDefinition Height="10"/>Di2015NewLine        <RowDefinition Height="40"/>Di2015NewLineDi2015NewLine    </Grid.RowDefinitions>Di2015NewLineDi2015NewLine    <ContentPresenter Grid.Row="0" Grid.Column="0" Content="{Binding Items[0]}"/>Di2015NewLine    <ContentPresenter Grid.Row="0" Grid.Column="1" Content="{Binding Items[1]}"/>Di2015NewLine    <ContentPresenter Grid.Row="1" Grid.Column="0" Content="{Binding Items[2]}"/>Di2015NewLine    <ContentPresenter Grid.Row="1" Grid.Column="1" Content="{Binding Items[3]}"/>Di2015NewLineDi2015NewLine    <Button Name="Button5" Grid.Row="4" Grid.Column="0">Back</Button>Di2015NewLine    <Button Name="Button6" Grid.Row="4" Grid.Column="1">Next</Button>Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine</Grid>Di2015NewLine
21166713Di2015UniqueSeparator/// <summary>Di2015NewLine/// Interaktionslogik fÃ¼r MainWindow.xamlDi2015NewLine/// </summary>Di2015NewLinepublic partial class MainWindow : Window, INotifyPropertyChangedDi2015NewLine{Di2015NewLine    public MainWindow()Di2015NewLine    {Di2015NewLine        Items = BuildItems();Di2015NewLine        InitializeComponent();Di2015NewLine    }Di2015NewLineDi2015NewLine    private List<Item> BuildItems()Di2015NewLine    {Di2015NewLine        var list = new List<Item>();Di2015NewLineDi2015NewLine        //  Add option "A" with suboptionsDi2015NewLine        list.Add(new Item("A", Brushes.Red, Brushes.Yellow, new List<Item>Di2015NewLine            {Di2015NewLine                new Item("E", Brushes.Green, Brushes.Black),Di2015NewLine                new Item("F", Brushes.LightBlue, Brushes.Black),Di2015NewLine                new Item("G", Brushes.Red, Brushes.Black),Di2015NewLine                new Item("H", Brushes.LemonChiffon, Brushes.Black)Di2015NewLine            }));Di2015NewLineDi2015NewLine        // Add option "B"Di2015NewLine        list.Add(new Item("B", Brushes.Yellow, Brushes.Green));Di2015NewLine        // Add option "C"Di2015NewLine        list.Add(new Item("C", Brushes.Blue, Brushes.Yellow));Di2015NewLine        // Add option "D"Di2015NewLine        list.Add(new Item("D", Brushes.GreenYellow, Brushes.Yellow));Di2015NewLineDi2015NewLineDi2015NewLine        return list;Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    private List<Item> item;Di2015NewLineDi2015NewLine    public List<Item> ItemsDi2015NewLine    {Di2015NewLine        get { return item; }Di2015NewLine        setDi2015NewLine        {Di2015NewLine            if (item != value)Di2015NewLine            {Di2015NewLine                item = value;Di2015NewLine                OnPropertyChanged("Items");Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public event PropertyChangedEventHandler PropertyChanged;Di2015NewLineDi2015NewLine    protected virtual void OnPropertyChanged(string propertyName)Di2015NewLine    {Di2015NewLine        var handler = PropertyChanged;Di2015NewLine        if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));Di2015NewLine    }Di2015NewLineDi2015NewLine    private void Button_OnClick(object sender, RoutedEventArgs e)Di2015NewLine    {Di2015NewLine        var item = (sender as Button).Tag as Item;Di2015NewLine        if (item != null && item.Items != null)Di2015NewLine            Items = item.Items;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21166713Di2015UniqueSeparatorList<Item> BuildItems()
21166721Di2015UniqueSeparatorRegistryKey
21166721Di2015UniqueSeparatorDim key = Microsoft.Win32.Registry.CurrentUser.OpenSubKey(Di2015NewLine                  "SOFTWARE\\\\Microsoft\\\\Windows\\\\DWM", True)Di2015NewLineIf key IsNot Nothing Then Di2015NewLine    key.SetValue("ColorizationGlassAttribute", 2)Di2015NewLine    key.Close()Di2015NewLineEnd If Di2015NewLine
21166751Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine    if ((string)HttpContext.Current.Session["System"] == "sysA")Di2015NewLine    {Di2015NewLine        gvSystemB.Visible = false;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        gvSystemA.Visible = false;Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
21166846Di2015UniqueSeparatorOnStart
21166846Di2015UniqueSeparatorprivate System.Threading.Thread _thread;Di2015NewLineprotected override void OnStart(string[] args)Di2015NewLine{Di2015NewLine    _thread = new Thread(DoWork);Di2015NewLine    _thread.Start();Di2015NewLine}Di2015NewLineDi2015NewLineprivate void DoWork()Di2015NewLine{Di2015NewLine    // create and monitor socket here...Di2015NewLine}Di2015NewLine
21166846Di2015UniqueSeparatorwhile (true)
21166846Di2015UniqueSeparatorManualResetEvent
21166846Di2015UniqueSeparatorusing System.Threading;Di2015NewLineprivate ManualResetEvent _shutdownEvent = new ManualResetEvent(false);Di2015NewLineDi2015NewLineprivate void DoWork()Di2015NewLine{Di2015NewLine    // initialize socket and fileDi2015NewLineDi2015NewLine    // thread loopDi2015NewLine    while (!_shutdownEvent.Wait(0))Di2015NewLine    {Di2015NewLine        // read socket, write to fileDi2015NewLine    }Di2015NewLineDi2015NewLine    // close socket and fileDi2015NewLine}Di2015NewLineDi2015NewLineprotected override void OnStop()Di2015NewLine{Di2015NewLine    _shutdownEvent.Set();Di2015NewLine    _thread.Join();  // wait for thread to stopDi2015NewLine}Di2015NewLine
21166911Di2015UniqueSeparator_context
21166911Di2015UniqueSeparatorprivate void Form1_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    using (winappContext _context = new winappContext())Di2015NewLine    {Di2015NewLine        var query = from c in _context.CustomersDi2015NewLine                    orderby c.CustomerNameDi2015NewLine                    select c;Di2015NewLineDi2015NewLine        this.customerBindingSource.DataSource = query.ToList();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21166911Di2015UniqueSeparatorIDisposable
21166911Di2015UniqueSeparatorusing (_context = new winappContext())Di2015NewLine{Di2015NewLine    _context = new winappContext();Di2015NewLine    ...Di2015NewLine}Di2015NewLine
21166911Di2015UniqueSeparatorusing
21166911Di2015UniqueSeparatorwinappContext
21167080Di2015UniqueSeparatorParseExact
21167080Di2015UniqueSeparatorParseExact("sDateRdv", "MM/dd/yyyy")Di2015NewLine
21167080Di2015UniqueSeparatorsDateRdv
21167080Di2015UniqueSeparatorsDateRdv
21167080Di2015UniqueSeparatorParseExact(sDateRdv, "MM/dd/yyyy")Di2015NewLine
21167080Di2015UniqueSeparatorRequest.QueryString["sTrialDate"]
21167080Di2015UniqueSeparatorDateTime
21167085Di2015UniqueSeparatorsb.AppendLine(html.LabelFor(expression.Compile()()).ToHtmlString());Di2015NewLine
21167145Di2015UniqueSeparatorint f(List<someObject> x, Func<SomeObject, int> selector)Di2015NewLine{Di2015NewLine    return x.Select(selector).Sum();Di2015NewLine}Di2015NewLine
21167145Di2015UniqueSeparatorint field1Result = f(list, o => o.field1);Di2015NewLineint field2Result = f(list, o => o.field2);Di2015NewLine
21167264Di2015UniqueSeparator"DName  DFirstName"
21167264Di2015UniqueSeparatorUser
21167264Di2015UniqueSeparatorget { return DName + " " + DFirstName; }Di2015NewLine
21167286Di2015UniqueSeparator string str = GetValue(9).ToString().TrimEnd(':');Di2015NewLine string[] strList = str.Split(':');Di2015NewLineDi2015NewLineDi2015NewLine foreach (string s in strList)Di2015NewLine        {Di2015NewLine            foreach (ListItem item in chkTopics.Items)Di2015NewLine            {Di2015NewLine                if (item.Value == s)Di2015NewLine                {Di2015NewLine                    item.Selected = true;Di2015NewLine                    break;Di2015NewLine                }Di2015NewLineDi2015NewLine            }Di2015NewLineDi2015NewLine        }Di2015NewLine
21167313Di2015UniqueSeparatorusing DotNet.Highcharts.Enums;Di2015NewLine
21167313Di2015UniqueSeparatorDotNet.Highcharts.Enums.ChartTypes.ColumnDi2015NewLine
21167545Di2015UniqueSeparatorif(!Page.IsPostBack) {Di2015NewLineDi2015NewLine}Di2015NewLine
21167726Di2015UniqueSeparatorusing System.Linq;Di2015NewLineDi2015NewLineDi2015NewLineFileInfo[] files = new System.IO.DirectoryInfo().GetFiles(@"D:\\pic\\*.bmp").OrderBy(file => file.Name).Skip(1).ToArray()Di2015NewLine
21167817Di2015UniqueSeparatorpublic class ListViewSorter : IComparerDi2015NewLine        {Di2015NewLine            public int ByColumn { get; set; }Di2015NewLineDi2015NewLine            public int LastSort { get; set; }Di2015NewLineDi2015NewLine            public int Compare(object o1, object o2)Di2015NewLine            {Di2015NewLine                if (!(o1 is ListViewItem) || o1 is ListViewGroup)Di2015NewLine                    return (0);Di2015NewLine                if (!(o2 is ListViewItem) || o2 is ListViewGroup)Di2015NewLine                    return (0);Di2015NewLineDi2015NewLine                var itm = (ListViewItem)o1;Di2015NewLine                if (itm.Group.Header.Contains("Multi"))Di2015NewLine                    return (0);Di2015NewLineDi2015NewLine                itm = (ListViewItem)o2;Di2015NewLine                if (itm.Group.Header.Contains("Multi"))Di2015NewLine                    return (0);Di2015NewLineDi2015NewLine                var lvi1 = (ListViewItem)o2;Di2015NewLine                string str1 = "";Di2015NewLine                if (lvi1.SubItems.Count > ByColumn)Di2015NewLine                    str1 = lvi1.SubItems[ByColumn].Text;Di2015NewLineDi2015NewLine                var lvi2 = (ListViewItem)o1;Di2015NewLine                string str2 = "";Di2015NewLine                if (lvi2.SubItems.Count > ByColumn)Di2015NewLine                    str2 = lvi2.SubItems[ByColumn].Text;Di2015NewLineDi2015NewLine                int result;Di2015NewLineDi2015NewLine                string a, b;Di2015NewLine                if (lvi1.ListView.Sorting == SortOrder.Ascending)Di2015NewLine                {Di2015NewLine                    a = str1;Di2015NewLine                    b = str2;Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    a = str2;Di2015NewLine                    b = str1;Di2015NewLine                }Di2015NewLineDi2015NewLine                DateTime dateTimeA;Di2015NewLine                DateTime dateTimeB;Di2015NewLine                double doubleA;Di2015NewLine                double doubleB;Di2015NewLine                if (DateTime.TryParse(a, out dateTimeA)Di2015NewLine                  && DateTime.TryParse(b, out dateTimeB))Di2015NewLine                {Di2015NewLine                    result = DateTime.Compare(dateTimeA, dateTimeB);Di2015NewLine                }Di2015NewLine                elseDi2015NewLine                {Di2015NewLine                    if (double.TryParse(a, out doubleA)Di2015NewLine                      && double.TryParse(b, out doubleB))Di2015NewLine                    {Di2015NewLine                        result = doubleA.CompareTo(doubleB);Di2015NewLine                    }Di2015NewLine                    elseDi2015NewLine                    {Di2015NewLine                        result = String.Compare(a, b);Di2015NewLine                    }Di2015NewLine                }Di2015NewLineDi2015NewLine                LastSort = ByColumn;Di2015NewLineDi2015NewLine                return (result);Di2015NewLine            }Di2015NewLine        }Di2015NewLine
21167902Di2015UniqueSeparatorpublic void Enqueue(T item)Di2015NewLine{Di2015NewLine    if (this._size == this._array.Length)Di2015NewLine    {Di2015NewLine        int num = (int)((long)this._array.Length * 200L / 100L);Di2015NewLine        if (num < this._array.Length + 4)Di2015NewLine        {Di2015NewLine            num = this._array.Length + 4;Di2015NewLine        }Di2015NewLine        this.SetCapacity(num);Di2015NewLine    }Di2015NewLine    this._array[this._tail] = item;Di2015NewLine    this._tail = (this._tail + 1) % this._array.Length;Di2015NewLine    this._size++;Di2015NewLine    this._version++;Di2015NewLine}Di2015NewLineDi2015NewLineprivate void SetCapacity(int capacity)Di2015NewLine{Di2015NewLine    T[] array = new T[capacity];Di2015NewLine    if (this._size > 0)Di2015NewLine    {Di2015NewLine        if (this._head < this._tail)Di2015NewLine        {Di2015NewLine            Array.Copy(this._array, this._head, array, 0, this._size);Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            Array.Copy(this._array, this._head, array, 0, this._array.Length - this._head);Di2015NewLine            Array.Copy(this._array, 0, array, this._array.Length - this._head, this._tail);Di2015NewLine        }Di2015NewLine    }Di2015NewLine    this._array = array;Di2015NewLine    this._head = 0;Di2015NewLine    this._tail = ((this._size == capacity) ? 0 : this._size);Di2015NewLine    this._version++;Di2015NewLine}Di2015NewLine
21167946Di2015UniqueSeparatorC
21167946Di2015UniqueSeparatorobject
21167946Di2015UniqueSeparatorpublic string SerializeForAPI(C myObject)Di2015NewLine
21167946Di2015UniqueSeparatorA
21167946Di2015UniqueSeparatorB
21167946Di2015UniqueSeparatoroauth_consumer_key
21167946Di2015UniqueSeparatoroauth_token
21167946Di2015UniqueSeparatorobject
21167970Di2015UniqueSeparatorDeffered
21167970Di2015UniqueSeparatorSpriteBatch.End
21167970Di2015UniqueSeparatorDraw
21167970Di2015UniqueSeparatorImmediate
21167970Di2015UniqueSeparatorDraw
21167970Di2015UniqueSeparatorStopwatch
21168085Di2015UniqueSeparatorXmlElement
21168085Di2015UniqueSeparator    [XmlElement("C")]Di2015NewLine    public List<Attr> Attrs { get; set; }Di2015NewLine
21168265Di2015UniqueSeparator^0[89]\\d{16}$Di2015NewLine
21168332Di2015UniqueSeparatorDataGrid.Rows.Add(myobject);Di2015NewLine
21168332Di2015UniqueSeparatorobject
21168332Di2015UniqueSeparatorvar myobject = DataGrid.Row[x] as MyClass;Di2015NewLine
21168332Di2015UniqueSeparatorObservableCollection<MyClass>
21168332Di2015UniqueSeparatorMyCollection.Add(myobject);Di2015NewLine
21168332Di2015UniqueSeparatorMyCollection[x] //this is already an instance of MyClass and does not need any casting.Di2015NewLine
21168535Di2015UniqueSeparatorpublic ICollection<Policy> Policies { get; set; }
21168535Di2015UniqueSeparatorpublic virtual ICollection<Policy> Policies { get; set; }
21168535Di2015UniqueSeparatorHasRequired(a => a.Identity).WithOptional(x => x.Account)Di2015NewLine
21168535Di2015UniqueSeparatorIdentityId
21168535Di2015UniqueSeparatorAccount
21168535Di2015UniqueSeparatorIdentity
21168535Di2015UniqueSeparatorAccount
21168535Di2015UniqueSeparatorHasOptional(p => p.InsuredIdentity).WithOptionalPrincipal()Di2015NewLine
21168535Di2015UniqueSeparatorIdentity
21168535Di2015UniqueSeparatorPolicy
21168535Di2015UniqueSeparatorHasOptional(p => p.InsuredIdentity).WithMany()Di2015NewLine    .HasForeignKey(x => x.InsuredIdentityId)Di2015NewLine    .WillCascadeOnDelete(false);Di2015NewLine
21168535Di2015UniqueSeparatorIdentity
21168535Di2015UniqueSeparatorPolicy
21168535Di2015UniqueSeparator.WithMany()
21168535Di2015UniqueSeparatorIdentity
21168535Di2015UniqueSeparatorPolicy
21168535Di2015UniqueSeparatorPolicy
21168535Di2015UniqueSeparatorIdentity
21168535Di2015UniqueSeparatorPolicy.InsuredIdentityId
21168535Di2015UniqueSeparatorSystem.Nullable<long>
21168669Di2015UniqueSeparatorIAddressee
21168669Di2015UniqueSeparatorIsAddressChangeable
21168669Di2015UniqueSeparatorinterface IAddresseeDi2015NewLine{Di2015NewLine    int Address { get; }Di2015NewLineDi2015NewLine    bool IsAddressChangeable { get; }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// If address can be changed (IsAddressChangeable == true):Di2015NewLine    ///     - change the addressDi2015NewLine    ///     - set Address to new addressDi2015NewLine    /// Di2015NewLine    /// If address can not be changed (IsAddressChangeable == false):Di2015NewLine    ///     - throw InvalidOperationException;Di2015NewLine    /// </summary>Di2015NewLine    void ChangeAddress(int address);Di2015NewLine}Di2015NewLineDi2015NewLineinterface IDevice : IAddresseeDi2015NewLine{Di2015NewLine    bool IsActive { get; }Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// If device is active (IsActive == true):Di2015NewLine    ///     - throw InvalidOperationException;Di2015NewLine    /// Di2015NewLine    /// If device is not active (IsActive == false):Di2015NewLine    ///     - activate the deviceDi2015NewLine    ///     - set IsActive to trueDi2015NewLine    ///     - set IsAddressChangeable to falseDi2015NewLine    /// </summary>Di2015NewLine    void Activate();Di2015NewLineDi2015NewLine    /// <summary>Di2015NewLine    /// If device is active (IsActive == true):Di2015NewLine    ///     - deactivate the deviceDi2015NewLine    ///     - set IsActive to falseDi2015NewLine    ///     - set IsAddressChangeable to trueDi2015NewLine    /// Di2015NewLine    /// If device is not active (IsActive == false):Di2015NewLine    ///     - throw InvalidOperationException;Di2015NewLine    /// </summary>Di2015NewLine    void Deactivate();Di2015NewLine}Di2015NewLine
21168669Di2015UniqueSeparatorIDevice
21168669Di2015UniqueSeparatorIsAddessChangeable
21168669Di2015UniqueSeparatorIsActive == false
21168754Di2015UniqueSeparatorinit=/path/to/my/applicationDi2015NewLine
21168754Di2015UniqueSeparatorinit
21168754Di2015UniqueSeparatorinit
21168754Di2015UniqueSeparator/sbin/init
21168824Di2015UniqueSeparatorAAAA
21168824Di2015UniqueSeparatorBBBB
21168824Di2015UniqueSeparatorAAAA
21168933Di2015UniqueSeparatorvar colors = Enum.GetValues(typeof(KnownColor))Di2015NewLine                 .Cast<KnownColor>() // Or cast the arrayDi2015NewLine                 .Select(Color.FromKnownColor)Di2015NewLine                 .ToList();Di2015NewLine
21168933Di2015UniqueSeparatorList<Color>
21169010Di2015UniqueSeparator^
21169010Di2015UniqueSeparator\\d+
21169010Di2015UniqueSeparator.
21169010Di2015UniqueSeparator\\.
21169010Di2015UniqueSeparator[a-z]+
21169010Di2015UniqueSeparator@"^\\d+ \\.[a-z]+"Di2015NewLine
21169165Di2015UniqueSeparatorpublic static class UriExtensionsDi2015NewLine{Di2015NewLine    public static Uri CreateUriWithQuery(Uri uri, NameValueCollection values)Di2015NewLine    {Di2015NewLine        var queryStr = new StringBuilder();Di2015NewLine        // presumes that if there's a Query set, it starts with a ?Di2015NewLine        var str = string.IsNullOrWhiteSpace(uri.Query) ?Di2015NewLine                  "" : uri.Query.Substring(1) + "&";Di2015NewLineDi2015NewLine        foreach (var value in values)Di2015NewLine        {Di2015NewLine            queryStr.Append(str + value.Key + "=" + value.Value);Di2015NewLine            str = "&";Di2015NewLine        }Di2015NewLine        // query string will be encoded by building a new Uri instanceDi2015NewLine        // clobbers the existing Query if it existsDi2015NewLine        return new UriBuilder(uri)Di2015NewLine        {Di2015NewLine            Query = queryStr.ToString()Di2015NewLine        }.Uri;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class NameValueCollection : Dictionary<string, string> Di2015NewLine{Di2015NewLine}Di2015NewLine
21169165Di2015UniqueSeparatorvar uri = UriExtensions.CreateUriWithQuery(new Uri("http://example.com"), Di2015NewLine    new NameValueCollection { { "key1", "value1" }, { "key2", "value2" }});Di2015NewLine
21169165Di2015UniqueSeparatorhttp://localhost/?key1=value1&key2=value2Di2015NewLine
21169265Di2015UniqueSeparatorstring[,] info1 = new string[2,3]{{"string1","string2","string3"},Di2015NewLine                                  {"string4","string5","string6"}};Di2015NewLinevar json1 = new JavaScriptSerializer().Serialize(info1);Di2015NewLine
21169265Di2015UniqueSeparator["string1","string2","string3","string4","string5","string6"]
21169265Di2015UniqueSeparatorstring[][] info2 = new string[][] { new[]{ "string1", "string2", "string3" }, Di2015NewLine                                    new[]{ "string4", "string5", "string6" } };Di2015NewLinevar json2 = new JavaScriptSerializer().Serialize(info2);Di2015NewLine
21169265Di2015UniqueSeparator[["string1","string2","string3"],["string4","string5","string6"]]
21169265Di2015UniqueSeparatorGetInfo()
21169265Di2015UniqueSeparatorvar json1 = JsonConvert.SerializeObject(info1);Di2015NewLine
21169272Di2015UniqueSeparatorcurrentPage * pageSize
21169272Di2015UniqueSeparatorallRows
21169272Di2015UniqueSeparatorSkip
21169272Di2015UniqueSeparatorpageOfRows
21169272Di2015UniqueSeparatorcurrentPage * pageSize
21169365Di2015UniqueSeparator<ApplicationDi2015NewLine    ...Di2015NewLine    xmlns:lib="clr-namespace:YourApp.LibClassProj;assembly=YourApp.LibClassProj">Di2015NewLineDi2015NewLine    <Application.Resources>Di2015NewLine        <ResourceDictionary>Di2015NewLine            <ResourceDictionary.MergedDictionaries>Di2015NewLine               ...Di2015NewLine            </ResourceDictionary.MergedDictionaries>Di2015NewLineDi2015NewLine            <lib:LocalizedStrings x:Key="LocalizedStrings"/>Di2015NewLine        </ResourceDictionary>Di2015NewLine    </Application.Resources>Di2015NewLine</Application>Di2015NewLine
21169365Di2015UniqueSeparator<TextBlock Text="{Binding Source={StaticResource LocalizedStrings}, Path=LocalizedResources.strTestButtonTitleClose}"/>Di2015NewLine
21169495Di2015UniqueSeparatorWhere
21169495Di2015UniqueSeparatorvar thisProject = myEntities.tbProjects.Where(x => x.yourIdColumn == id).ToList();Di2015NewLine
21169497Di2015UniqueSeparatordropdowns = gridview.getElementsByTagName('select');Di2015NewLine
21169767Di2015UniqueSeparatorSelectList
21169767Di2015UniqueSeparatorSelectList
21169767Di2015UniqueSeparatorIEnumerable<T>
21169767Di2015UniqueSeparatorSelectListItem
21169767Di2015UniqueSeparatorvar states = Ctx.States.ToList()Di2015NewLine            .Select(state => new SelectListItemDi2015NewLine            {Di2015NewLine                Text = state.Name,Di2015NewLine                Value = state.NameDi2015NewLine            }).OrderBy(x => x.Text).ToList();Di2015NewLine
21169767Di2015UniqueSeparatorvar states = Ctx.States.OrderBy(x => x.Name).ToList();Di2015NewLine
21169767Di2015UniqueSeparatorViewBag
21169767Di2015UniqueSeparatorName
21169767Di2015UniqueSeparator// Removed the long type name for clarityDi2015NewLineViewBag.SelectedStateOne = new SelectList(states, "Name", "Name", YourSelected.State.Name);Di2015NewLine
21169767Di2015UniqueSeparator@Html.DropDownList("SelectedStateOne", null, new { @class = "form-control" })Di2015NewLine
21169767Di2015UniqueSeparatorYourSelected.State.Name
21169767Di2015UniqueSeparatorstates
21170038Di2015UniqueSeparatorFunc<string, string> moo = x => x.ToString();Di2015NewLine
21170038Di2015UniqueSeparatorvar
21170038Di2015UniqueSeparatorvar moo = new Func<string, string>(x => x.ToString());Di2015NewLine
21170336Di2015UniqueSeparatorselect ID from FROM TableA WHERE someConditionsDi2015NewLineselect count(*) from TableB where refID = (select ID from FROM TableA WHERE someConditions)Di2015NewLineselect count(*) from TableC where refID = (select ID from FROM TableA WHERE someConditions) Di2015NewLine
21170455Di2015UniqueSeparatorresult += (char)('A' + ((message[i] - 'A') ^ (key[j] - 'A')));Di2015NewLine
21170593Di2015UniqueSeparatorwindow.open
21170691Di2015UniqueSeparatoris
21170691Di2015UniqueSeparatorj is shortDi2015NewLinej is objectDi2015NewLinek is intDi2015NewLinek is objectDi2015NewLine
21170691Di2015UniqueSeparatorj is intDi2015NewLinek is shortDi2015NewLine
21170691Di2015UniqueSeparatorint
21170691Di2015UniqueSeparatorshort
21170691Di2015UniqueSeparatoris
21170691Di2015UniqueSeparatorint
21170691Di2015UniqueSeparatordouble
21170691Di2015UniqueSeparatorint
21170691Di2015UniqueSeparatordouble
21170765Di2015UniqueSeparatorstring path = @"C:\\Whatever\\Wherever";
21170765Di2015UniqueSeparatorstring path = "C:\\\\Whatever\\\\Wherever";
21170769Di2015UniqueSeparator[WebMethod]Di2015NewLinepublic static string getProjectByID(int id)Di2015NewLine{Di2015NewLine    using (dbPSREntities4 myEntities = new dbPSREntities4())Di2015NewLine    {Di2015NewLine        var thisProject = myEntities.tbProjects.Where(x => x.ProjectID == id);Di2015NewLineDi2015NewLine        var columns = thisProject.Select(x => new { x.ProjectContactFirstName, x.ProjectContactLastName }).ToList();Di2015NewLineDi2015NewLine        JavaScriptSerializer serializer = new JavaScriptSerializer();Di2015NewLineDi2015NewLine        var json = serializer.Serialize(columns); Di2015NewLineDi2015NewLine        return json;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21171061Di2015UniqueSeparatorWhere
21171061Di2015UniqueSeparatorWhere="IsAvailable = True && dateApt >= DateTime.Now"Di2015NewLine
21171182Di2015UniqueSeparatormyBitmap.Save(new_fileName, myImageCodecInfo, myEncoderParameters);Di2015NewLine
21171270Di2015UniqueSeparator\\\\your-server-name\\share\\path\\to\\file.txtDi2015NewLine
21171270Di2015UniqueSeparator\\\\your-server-name.domain.com\\c$\\path\\to\\file.txtDi2015NewLine
21171270Di2015UniqueSeparatorStream
21171270Di2015UniqueSeparatorbyte
21171270Di2015UniqueSeparatorhttp://localhost/root/path/to/file.txt
21171319Di2015UniqueSeparatorApiController
21171319Di2015UniqueSeparatorController
21171319Di2015UniqueSeparatorvar response = Request.CreateResponse(HttpStatusCode.Notfound);Di2015NewLinereturn responseDi2015NewLineDi2015NewLine// GET api/employees/12345Di2015NewLinepublic HttpResponseMessage Get(int id)Di2015NewLine{Di2015NewLine    HttpResponseMessage response = null;Di2015NewLine    var employee = list.FirstOrDefault(e => e.Id == id);Di2015NewLineDi2015NewLine    if (employee == null)Di2015NewLine    {Di2015NewLine        response = new HttpResponseMessage(HttpStatusCode.NotFound);Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        response = Request.CreateResponse(HttpStatusCode.OK, employee);Di2015NewLine    }Di2015NewLineDi2015NewLine    return response;Di2015NewLine}Di2015NewLine
21171433Di2015UniqueSeparatorB
21171433Di2015UniqueSeparatorclass C : B
21171433Di2015UniqueSeparatorclass B
21171433Di2015UniqueSeparatorB
21171433Di2015UniqueSeparatorA<int>
21171433Di2015UniqueSeparatorB
21171433Di2015UniqueSeparatorclass C : A<int>.B
21171433Di2015UniqueSeparatorc
21171433Di2015UniqueSeparatorA<string>.B.C
21171433Di2015UniqueSeparatorA<string>.B.C.c()
21171433Di2015UniqueSeparatorT
21171433Di2015UniqueSeparatorA<string>
21171433Di2015UniqueSeparatorstring
21171433Di2015UniqueSeparatorc.c()
21171433Di2015UniqueSeparatorString
21171433Di2015UniqueSeparatorT
21171433Di2015UniqueSeparatorA<string>.B.C.b()
21171433Di2015UniqueSeparatorA<string>.B.C
21171433Di2015UniqueSeparatorA<int>.B
21171433Di2015UniqueSeparatorA<int>.B.b()
21171433Di2015UniqueSeparatorT
21171433Di2015UniqueSeparatorA<int>
21171433Di2015UniqueSeparatorint
21171433Di2015UniqueSeparatorA<string>.B.D.d()
21171433Di2015UniqueSeparatorT
21171433Di2015UniqueSeparatorstring
21171433Di2015UniqueSeparatorA<string>
21171433Di2015UniqueSeparatorA<string>.B.D.b()
21171433Di2015UniqueSeparatorA<string>.B.D
21171433Di2015UniqueSeparatorT
21171433Di2015UniqueSeparatorstring
21171433Di2015UniqueSeparatorA<string>
21171433Di2015UniqueSeparatorA<string>.B
21171433Di2015UniqueSeparatorA<string>.B.b()
21171433Di2015UniqueSeparatorclass A_stringDi2015NewLine{Di2015NewLine    public class B : A_intDi2015NewLine    {Di2015NewLine        public void b()Di2015NewLine        {Di2015NewLine            Console.WriteLine(typeof(string).ToString());Di2015NewLine        }Di2015NewLine        public class C : A_int.B // Note!Di2015NewLine        {Di2015NewLine            public void c()Di2015NewLine            {Di2015NewLine                Console.WriteLine(typeof(string).ToString());Di2015NewLine            }Di2015NewLine        }Di2015NewLine        public class D : A_string.BDi2015NewLine        {Di2015NewLine            public void d()Di2015NewLine            {Di2015NewLine                Console.WriteLine(typeof(string).ToString());Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21171433Di2015UniqueSeparatorclass A_intDi2015NewLine{Di2015NewLine    public class B : A_intDi2015NewLine    {Di2015NewLine        public void b()Di2015NewLine        {Di2015NewLine            Console.WriteLine(typeof(int).ToString());Di2015NewLine        }Di2015NewLine        public class C : A_int.B // Note!Di2015NewLine        {Di2015NewLine            public void c()Di2015NewLine            {Di2015NewLine                Console.WriteLine(typeof(int).ToString());Di2015NewLine            }Di2015NewLine        }Di2015NewLine        public class D : A_int.BDi2015NewLine        {Di2015NewLine            public void d()Di2015NewLine            {Di2015NewLine                Console.WriteLine(typeof(int).ToString());Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21171433Di2015UniqueSeparatorA_string.B.C.c()
21171433Di2015UniqueSeparatorA_string.B.C.b()
21171558Di2015UniqueSeparatorXmlReader
21171558Di2015UniqueSeparatorusing (XmlReader reader = XmlReader.Create(xmlPath, settings))Di2015NewLine{Di2015NewLine    // rest of codeDi2015NewLine}Di2015NewLine
21171717Di2015UniqueSeparatorPage_Load
21171717Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (IsPostBack)Di2015NewLine        return;Di2015NewLineDi2015NewLine    // Your code hereDi2015NewLine}Di2015NewLine
21171717Di2015UniqueSeparatorSqlCommand
21171717Di2015UniqueSeparatorSqlReader
21171808Di2015UniqueSeparatorStartPosition
21171808Di2015UniqueSeparatorLocation
21171808Di2015UniqueSeparatorpublic Form1()Di2015NewLine{Di2015NewLine    InitializeComponent();Di2015NewLine    this.StartPosition = FormStartPosition.Manual;Di2015NewLine    this.Location = new Point(0, 0);Di2015NewLine}Di2015NewLine
21171808Di2015UniqueSeparatorFormStartPosition.Manual
21171928Di2015UniqueSeparator        //Define rowsDi2015NewLine        DataRow dr;Di2015NewLine        for (int l = 0; l < a_raw.Length; l++)Di2015NewLine        {Di2015NewLine            dr = tvsa.NewRow();Di2015NewLine            dr[filenames[i]] = a_raw[l];Di2015NewLine            tvsa.Rows.Add(dr);Di2015NewLine        }Di2015NewLine
21171928Di2015UniqueSeparator        //Define rowsDi2015NewLine        DataRow dr;Di2015NewLine        for (int l = 0; l < a_raw.Length; l++)Di2015NewLine        {Di2015NewLine            if ( tvsa.Rows.Count > l  )Di2015NewLine            {Di2015NewLine              dr = tvsa.Rows[l];Di2015NewLine            }Di2015NewLine            else{Di2015NewLine              dr = tvsa.NewRow();Di2015NewLine              tvsa.Rows.Add(dr);Di2015NewLine            }Di2015NewLine            dr[filenames[i]] = a_raw[l];Di2015NewLineDi2015NewLine        }Di2015NewLine
21172014Di2015UniqueSeparatorfor
21172014Di2015UniqueSeparatorlines - i - 1
21172014Di2015UniqueSeparator0
21172014Di2015UniqueSeparatorx
21172014Di2015UniqueSeparator1
21172014Di2015UniqueSeparatorxxx
21172014Di2015UniqueSeparator2
21172014Di2015UniqueSeparatorxxxxx
21172014Di2015UniqueSeparatorlines
21172014Di2015UniqueSeparatori
21172014Di2015UniqueSeparator__x     2 for the 1st line.Di2015NewLine_xxx    1 for the 2nd line.Di2015NewLinexxxxx   0 for the 3rd line.Di2015NewLine
21172014Di2015UniqueSeparatorfor
21172014Di2015UniqueSeparatorx
21172014Di2015UniqueSeparatori = 0
21172014Di2015UniqueSeparatorx
21172014Di2015UniqueSeparatori
21172014Di2015UniqueSeparator0
21172014Di2015UniqueSeparatory
21172014Di2015UniqueSeparator1
21172014Di2015UniqueSeparator+ 1
21172014Di2015UniqueSeparator* 2
21172014Di2015UniqueSeparatori * 2 + 1 = {1, 3, 5, 7...}
21172014Di2015UniqueSeparatorx
21172014Di2015UniqueSeparatorfor
21172014Di2015UniqueSeparatorx
21172014Di2015UniqueSeparatorConsole.Write(new String(' ', lines - 1) + "x");Di2015NewLine
21172014Di2015UniqueSeparatorfor
21172307Di2015UniqueSeparatorprotected override void OnNavigatedTo(NavigationEventArgs e)Di2015NewLine{Di2015NewLine        foreach( KeyValuePair<string, Object> entry in IsolatedStorageSettings.ApplicationSettings)Di2015NewLine        {Di2015NewLine            lstStops.Items.Add(entry.Value as String);Di2015NewLine        }Di2015NewLineDi2015NewLine    base.OnNavigatedTo(e);Di2015NewLine}Di2015NewLine
21172307Di2015UniqueSeparatorstopNumber
21172307Di2015UniqueSeparatorentry.Key
21172355Di2015UniqueSeparatorLinq-To-DataSet
21172355Di2015UniqueSeparatorvar ordered = from row in dt.AsEnumerable()Di2015NewLine              let col2 = row.Field<string>("column2")Di2015NewLine              orderby  col2 == "something" ? 1 : col2 == "somethingElse" ? 2 : 3Di2015NewLine              select row;Di2015NewLine
21172355Di2015UniqueSeparatorbool
21172355Di2015UniqueSeparatortrue
21172355Di2015UniqueSeparator1
21172355Di2015UniqueSeparatorfalse
21172355Di2015UniqueSeparator0
21172355Di2015UniqueSeparatorascending
21172355Di2015UniqueSeparatorforeach
21172355Di2015UniqueSeparatorforeach(DataRow row in ordered)Di2015NewLine{Di2015NewLine    // ..Di2015NewLine}Di2015NewLine
21172355Di2015UniqueSeparatorToList
21172355Di2015UniqueSeparatorToArray
21172355Di2015UniqueSeparatorDataTable
21172355Di2015UniqueSeparatorDataTable orderedTable = ordered.CopyToDataTale();Di2015NewLine
21172359Di2015UniqueSeparator<?xml version="1.0" encoding="utf-8"?>Di2015NewLine<Settings>Di2015NewLine    <add key="hostname" value="QA_hostname" />Di2015NewLine    <add key="username" value="QA_username" />Di2015NewLine</Settings>Di2015NewLine
21172359Di2015UniqueSeparator        private Hashtable getSettings(string path)Di2015NewLine        {Di2015NewLine            Hashtable _ret = new Hashtable();Di2015NewLine            if (File.Exists(path))Di2015NewLine            {Di2015NewLine                StreamReader reader = new StreamReaderDi2015NewLine                (Di2015NewLine                    new FileStream(Di2015NewLine                        path,Di2015NewLine                        FileMode.Open,Di2015NewLine                        FileAccess.Read,Di2015NewLine                        FileShare.Read)Di2015NewLine                );Di2015NewLine                XmlDocument doc = new XmlDocument();Di2015NewLine                string xmlIn = reader.ReadToEnd();Di2015NewLine                reader.Close();Di2015NewLine                doc.LoadXml(xmlIn);Di2015NewLine                foreach (XmlNode child in doc.ChildNodes)Di2015NewLine                    if (child.Name.Equals("Settings"))Di2015NewLine                        foreach (XmlNode node in child.ChildNodes)Di2015NewLine                            if (node.Name.Equals("add"))Di2015NewLine                                _ret.AddDi2015NewLine                                (Di2015NewLine                                    node.Attributes["key"].Value,Di2015NewLine                                    node.Attributes["value"].ValueDi2015NewLine                                );Di2015NewLine            }Di2015NewLine            return (_ret);Di2015NewLine        }Di2015NewLine
21172359Di2015UniqueSeparatorConfigurationManager.AppSettings[]
21172359Di2015UniqueSeparatorapp.config
21172369Di2015UniqueSeparatorVisualTreeHelper.HitTest
21172369Di2015UniqueSeparatorHitTest
21172445Di2015UniqueSeparatorFile()
21172445Di2015UniqueSeparatorcsv
21172445Di2015UniqueSeparatorbyte[]
21172445Di2015UniqueSeparatorvar csvBytes = Encoding.ASCII.GetBytes(csv);Di2015NewLinereturn File(csvBytes, "text/csv", "myfile.csv");Di2015NewLine
21172592Di2015UniqueSeparatorvar metadata = ModelMetadata.FromLambdaExpression(expression, html.ViewData);Di2015NewLinevar propName = metadata.PropertyName;Di2015NewLine
21172592Di2015UniqueSeparatorMemberExpression memberExpression = (MemberExpression) expression.Body;Di2015NewLinevar member = memberExpression.Member as PropertyInfo;Di2015NewLinevar attributes = member.GetCustomAttributes();Di2015NewLine
21172592Di2015UniqueSeparatorpublic static MvcHtmlString TextboxForCustom<TModel, TResult>(this HtmlHelper<TModel> html,Di2015NewLine        Expression<Func<TModel, TResult>> expression)Di2015NewLine    {Di2015NewLine        var metadata = ModelMetadata.FromLambdaExpression(expression, html.ViewData);Di2015NewLine        var propName = metadata.PropertyName;Di2015NewLineDi2015NewLine        StringBuilder sb = new StringBuilder();Di2015NewLine        sb.AppendFormat("<input type=\\"text\\" id=\\"{0}\\" />", propName);Di2015NewLineDi2015NewLine        return MvcHtmlString.Create(sb.ToString());Di2015NewLineDi2015NewLine    }Di2015NewLine
21172742Di2015UniqueSeparatorartistNode.InnerText
21172742Di2015UniqueSeparatorartistNode.value
21172758Di2015UniqueSeparatorWebServiceProperty
21172758Di2015UniqueSeparatorWebserviceProperty.GetValue(wsController.GetTheSingleton(), null)Di2015NewLine
21172758Di2015UniqueSeparatorwsController
21173031Di2015UniqueSeparatorusing
21173112Di2015UniqueSeparator@"^[/\\\\]+"Di2015NewLine
21173112Di2015UniqueSeparator^
21173112Di2015UniqueSeparator[/\\\\]
21173112Di2015UniqueSeparator/
21173112Di2015UniqueSeparator\\
21173153Di2015UniqueSeparatorProcess 1Di2015NewLineDEBIT BANK ACCOUNTDi2015NewLineCREDIT VENDOR ACCOUNTDi2015NewLineDi2015NewLineProcess 2Di2015NewLineCREDIT VENDOR ACCOUNTDi2015NewLineDEBIT BANK ACCOUNTDi2015NewLine
21173181Di2015UniqueSeparatorFill
21173181Di2015UniqueSeparatorStroke
21173181Di2015UniqueSeparatorIValueConverter
21173181Di2015UniqueSeparator<Window.Resources>Di2015NewLine    <local:DateToBrushConverter x:Key="DateToBrushConverter" />Di2015NewLine</Window.Resources>Di2015NewLineDi2015NewLine<Rectangle Fill="{Binding targetstartdate,Converter={StaticResource DateToBrushConverter}}" Di2015NewLine... />Di2015NewLine
21173181Di2015UniqueSeparatorConvert
21173181Di2015UniqueSeparatorBrush
21173181Di2015UniqueSeparatorRectangle.Fill
21173181Di2015UniqueSeparatorpublic class DateToBrushConverter : IValueConverterDi2015NewLine{Di2015NewLine    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)Di2015NewLine    {Di2015NewLine        var date = value as DateTime?;Di2015NewLine        if (!date.HasValue)Di2015NewLine            return new SolidColorBrush(Colors.Transparent);Di2015NewLine        else if (!date.Value > DateTime.Today.AddDays(-1))Di2015NewLine            return new SolidColorBrush(Colors.Blue);Di2015NewLine        // etcDi2015NewLine    }Di2015NewLineDi2015NewLine    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)Di2015NewLine    {Di2015NewLine        throw new NotImplementedException();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21173195Di2015UniqueSeparator    success: function (result) {Di2015NewLine        //alert(result);Di2015NewLine        $("#txtContactFirstEdit").val(result.d[0].ProjectContactFirstName); <-- How do I populate from JSON?Di2015NewLine        $("#txtContactLastEdit").val(result.d[0].ProjectContactLastName); <-- How do I populate from JSON?Di2015NewLine    }Di2015NewLine
21173273Di2015UniqueSeparator<StatusBarItem Grid.Column="2">Di2015NewLine    <TextBlock Name="zoomIndicator" Text="{Binding ElementName=mapCanvasScaleSlider,Path=Value,StringFormat=0%}"Di2015NewLine                MouseDown="ResetZoomWindow" ToolTip="Zoom level; click to reset">Di2015NewLine        <TextBlock.Style>Di2015NewLine            <Style>Di2015NewLine                <Setter Property="TextBlock.TextDecorations" Value="" />Di2015NewLine                <Style.Triggers>Di2015NewLine                    <Trigger Property="TextBlock.IsMouseOver" Value="True">Di2015NewLine                        <Setter Property="TextBlock.TextDecorations" Value="Underline" />Di2015NewLine                    </Trigger>Di2015NewLine                </Style.Triggers>Di2015NewLine            </Style>Di2015NewLine        </TextBlock.Style>Di2015NewLine    </TextBlock>Di2015NewLine</StatusBarItem>Di2015NewLine
21173274Di2015UniqueSeparatorpublic interface IShapeDi2015NewLine{Di2015NewLine    void load();Di2015NewLine} Di2015NewLine
21173274Di2015UniqueSeparatorRegion
21173274Di2015UniqueSeparatorArea
21173274Di2015UniqueSeparatorpublic class Region : IShapeDi2015NewLine{Di2015NewLine    public void load() { /* Region Implementation */ }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Area : IShapeDi2015NewLine{Di2015NewLine    public void load() { /* Area Implementation */ }  Di2015NewLine}Di2015NewLine
21173274Di2015UniqueSeparatorvoid Detail(IShape shape)Di2015NewLine{Di2015NewLine    shape.load();Di2015NewLine}Di2015NewLine
21173274Di2015UniqueSeparatorDetail
21173274Di2015UniqueSeparatorArea
21173274Di2015UniqueSeparatorRegion
21173274Di2015UniqueSeparatorIShape
21173274Di2015UniqueSeparatorload()
21173274Di2015UniqueSeparatorpublic static class ShapeFactoryDi2015NewLine{Di2015NewLine    private static Dictionary<string, Func<IShape>> _shapes = new Dictionary<string, Func<IShape>>();Di2015NewLineDi2015NewLine    static ShapeFactory()Di2015NewLine    {Di2015NewLine        // Register some creators:Di2015NewLine        _shapes.Add("region", () => return new Region());Di2015NewLine        _shapes.Add("area", () => return new Area());Di2015NewLine    }Di2015NewLineDi2015NewLine    public static IShape Create(string shape) Di2015NewLine    {Di2015NewLine        return _shapes[shape]();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21173274Di2015UniqueSeparatorvoid Detail(string shape)Di2015NewLine{Di2015NewLine    ShapeFactory.Create(shape).load();Di2015NewLine}Di2015NewLine
21173274Di2015UniqueSeparatorIShape
21173274Di2015UniqueSeparatorload
21173274Di2015UniqueSeparatorpublic interface IShapeWrapperDi2015NewLine{Di2015NewLine    void load();Di2015NewLine}Di2015NewLine
21173274Di2015UniqueSeparatorpublic class RegionWrapper : IShapeWrapperDi2015NewLine{Di2015NewLine    private Region _region;Di2015NewLine    public RegionWrapper()Di2015NewLine    {Di2015NewLine        _region = new Region();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void load()Di2015NewLine    {Di2015NewLine        _region.load();Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinepublic class AreaWrapper : IShapeWrapperDi2015NewLine{Di2015NewLine    private Area _area;Di2015NewLine    public AreaWrapper()Di2015NewLine    {Di2015NewLine        _area = new Area();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void load()Di2015NewLine    {Di2015NewLine        _area.load();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21173345Di2015UniqueSeparatorOrderBy
21173345Di2015UniqueSeparatorExpression<Func<TEntity, TKey>>
21173345Di2015UniqueSeparatorreturn query.OrderBy(t => t.SomeProperty)Di2015NewLine            .Skip(skip)Di2015NewLine            .Take(take)Di2015NewLine            .ToList();Di2015NewLine
21173573Di2015UniqueSeparatorvar output = Regex.Replace(input, @"(?<!\\\\)""", @"\\""")Di2015NewLine
21173573Di2015UniqueSeparatorvar output = Regex.Replace(input, @"\\\\?""", @"\\""")Di2015NewLine
21173573Di2015UniqueSeparator"
21173573Di2015UniqueSeparator\\"
21173573Di2015UniqueSeparator\\"
21173573Di2015UniqueSeparator\\"
21173643Di2015UniqueSeparatorprivate void pictureBox1_MouseEnter(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    int x = pictureBox1.Location.X;Di2015NewLine    int y = pictureBox1.Location.Y;Di2015NewLine    pictureBox1.Location = new Point(x + 25, y + 15);Di2015NewLine}Di2015NewLineDi2015NewLineprivate void pictureBox1_MouseLeave(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    int x = pictureBox1.Location.X;Di2015NewLine    int y = pictureBox1.Location.Y;Di2015NewLine    pictureBox1.Location = new Point(x - 25, y - 15);Di2015NewLine}Di2015NewLine
21173865Di2015UniqueSeparatorSystem.Net.Http.Formatting
21173865Di2015UniqueSeparatorMicrosoft.AspNet.WebApi.Client
21173933Di2015UniqueSeparatorprivate void favouriteSelectionHold(object sender, System.Windows.Input.GestureEventArgs e)Di2015NewLine{Di2015NewLine    string n = (e.OriginalSource as TextBlock).Text;Di2015NewLine}Di2015NewLine
21174013Di2015UniqueSeparatorvar res = string.Join(", ", data.Substring(data.IndexOf("@") + 1).Replace("$", " ").Split('&'));Di2015NewLine
21174434Di2015UniqueSeparatorint
21174434Di2015UniqueSeparator~0x0001 & 0xFFFF
21174534Di2015UniqueSeparatorItemTemplate
21174534Di2015UniqueSeparatorListView
21174534Di2015UniqueSeparatorDataTemplate
21174534Di2015UniqueSeparatorHorizontalContentAlignment
21174534Di2015UniqueSeparatorListView
21174534Di2015UniqueSeparatorDockPanel
21174534Di2015UniqueSeparatorDataTemplate
21174534Di2015UniqueSeparatorScrollViewer.HorizontalScrollBarVisbility
21174534Di2015UniqueSeparatorListView
21174534Di2015UniqueSeparator<ListView Di2015NewLine    ItemsSource="{Binding Items}"Di2015NewLine    HorizontalContentAlignment="Stretch"Di2015NewLine    ScrollViewer.HorizontalScrollBarVisibility="Disabled">Di2015NewLine    <ListView.ItemTemplate>Di2015NewLine        <DataTemplate>Di2015NewLine            <DockPanel>Di2015NewLine                <TextBlock Di2015NewLine                    TextWrapping="Wrap" Di2015NewLine                    Text="{Binding Date}" Di2015NewLine                    Background="Magenta" Di2015NewLine                    DockPanel.Dock="Right" />Di2015NewLine                <TextBlock Text="{Binding Content}" Background="Lime" />Di2015NewLine            </DockPanel>Di2015NewLine        </DataTemplate>Di2015NewLine    </ListView.ItemTemplate>Di2015NewLine</ListView>Di2015NewLine
21174542Di2015UniqueSeparatorusing
21174542Di2015UniqueSeparatorpublic List<SalesList> ExecuteSales(List<string> items, int storeID, int W1, int W2, int vendorID, int retailerID)Di2015NewLine{Di2015NewLine    var sales = new List<SalesList>();Di2015NewLine    var table = new DataTable();Di2015NewLine    table.Columns.Add("ItemNumber");Di2015NewLine    foreach (var item in items)Di2015NewLine    {Di2015NewLine        table.Rows.Add(item);Di2015NewLine    }Di2015NewLine    using (var connection = new SqlConnection("ConnectionString"))Di2015NewLine    {Di2015NewLine        connection.Open();Di2015NewLine        using (var command = connection.CreateCommand())Di2015NewLine        {Di2015NewLine            command.CommandType = CommandType.StoredProcedure;Di2015NewLine            command.CommandText = "cp_ExecuteSales";Di2015NewLine            command.Parameters.AddWithValue("@RetailerID", retailerID);Di2015NewLine            command.Parameters.AddWithValue("@VendorID", vendorID);Di2015NewLine            command.Parameters.AddWithValue("@StoreID", storeID);Di2015NewLine            var tvp = new SqlParameter("@ItemIds", SqlDbType.Structured)Di2015NewLine            {Di2015NewLine                 TypeName = "tvpItems",Di2015NewLine                 Value = tableDi2015NewLine            };Di2015NewLine            command.Parameters.Add(tvp);Di2015NewLine            using (var reader = command.ExecuteReader())Di2015NewLine            {Di2015NewLine                //DoWorkDi2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine    return sales;Di2015NewLine}Di2015NewLine
21174542Di2015UniqueSeparatorCREATE TYPE [dbo].[tvpItems] AS TABLE(Di2015NewLine[ItemNumber] [int] NULLDi2015NewLine
21174542Di2015UniqueSeparatorCREATE PROCEDURE cp_ExecuteSalesDi2015NewLine     @RetailerID VARCHAR(50),Di2015NewLine     @VendorID VARCHAR(50),Di2015NewLine     @StoreID VARCHAR(50),Di2015NewLine     @ItemIds tvpItems READONLYDi2015NewLineASDi2015NewLine  SELECT  I.ITEM_NBRDi2015NewLine          ,I.ITEM_DESC1Di2015NewLine          ,I.ITEM_DESC2Di2015NewLine          ,I.VENDOR_STK_NBRDi2015NewLine          ,SUM(SA.POS_QTY) AS POS_QTYDi2015NewLine          ,SUM(SA.POS_SALES) AS POS_SALESDi2015NewLine  FROM  SALES_FTBL SADi2015NewLine        INNER JOIN ITEM_TBL I ON SA.RETAILER_ID = I.RETAILER_ID Di2015NewLine            AND SA.ITEM_NBR = I.ITEM_NBRDi2015NewLine        INNER JOIN @ItemIds ID ON SA.ITEM_NBR = ID.ItemNumberDi2015NewLine  WHERE SA.RETAILER_ID=I.RETAILER_IDDi2015NewLine        AND SA.RETAILER_ID = @RetailerIDDi2015NewLine        AND SA.VENDOR_NBR  = @VendorIDDi2015NewLine        AND SA.STORE_NBR  = @StoreIDDi2015NewLine        AND SA.ITEM_NBR=I.ITEM_NBRDi2015NewLine
21174542Di2015UniqueSeparatorCREATE TYPE [dbo].[IntList] AS TABLE(Di2015NewLine    [Value] [Int] NULLDi2015NewLine)Di2015NewLine
21174542Di2015UniqueSeparatorSqlDbType.Structured
21174542Di2015UniqueSeparatorTypeName
21174542Di2015UniqueSeparatorREADONLY
21174627Di2015UniqueSeparatorMock.Get<T>
21174627Di2015UniqueSeparatorMock.Get(foo).Verify(x => x.Bar()); Di2015NewLine
21174714Di2015UniqueSeparatorViewModel
21174714Di2015UniqueSeparatorTextBlock
21174714Di2015UniqueSeparatorTextBlock
21174827Di2015UniqueSeparatorvar servers = networkElement.Element("dnsServers") ?? new XElement("dnsServers");Di2015NewLinevar dnsServers = servers.Elements("dnsServer");Di2015NewLine
21174827Di2015UniqueSeparator<dnsServers>
21174827Di2015UniqueSeparatorElements("dnsServer")
21174827Di2015UniqueSeparatorvar dnsServers = (networkElement.Element("dnsServers") ?? new XElement("dnsServers")).Elements("dnsServer");Di2015NewLine
21175432Di2015UniqueSeparatorPrivateObject
21175565Di2015UniqueSeparator<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">Di2015NewLine  <Import Project="$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props')" />Di2015NewLine
21175784Di2015UniqueSeparatorcorrectAnswerClick
21175784Di2015UniqueSeparatorfalseClick
21175784Di2015UniqueSeparatorpublic partial class Form1 : FormDi2015NewLine{Di2015NewLineDi2015NewLine    private void Form1_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        var btnns = new List<Button>();Di2015NewLine        btnns.Add(button1);Di2015NewLine        btnns.Add(button2);Di2015NewLine        btnns.Add(button3);Di2015NewLine        btnns.Add(button4);Di2015NewLineDi2015NewLine        //Shuffle the listDi2015NewLine        Shuffle<Button>(ref btnns);Di2015NewLineDi2015NewLine        //Add an event handler for success to your first buttonDi2015NewLine        btnns[0].Click += successClick;Di2015NewLine        btnns[0].Text = "Correct";Di2015NewLineDi2015NewLine        for (int i = 1; i < btnns.Count; i++)Di2015NewLine        {Di2015NewLine            btnns[i].Click += failedClick;Di2015NewLine            btnns[i].Text = "Wrong " + i;Di2015NewLine        }Di2015NewLineDi2015NewLineDi2015NewLine    }Di2015NewLine    private void failedClick(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        //Add a true value to the viewstate listDi2015NewLine            AddAnswer(true);Di2015NewLine    } Di2015NewLine    private void successClick(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        //Yay, it's correctDi2015NewLine        AddAnswer(false);Di2015NewLine    }Di2015NewLine    public void AddAnswer(bool correctornot)Di2015NewLine    {Di2015NewLine           //I am not 100% sure about the code below (not tested), but it should give you an ideaDi2015NewLine           if (Session["listOfAnswers"] != null)Di2015NewLine           {Di2015NewLine                var currentList = (List<bool>) Session["listOfAnswers"];Di2015NewLine                currentList.Add(correctornot);Di2015NewLine                Session["listOfAnswers"] = currentlist;Di2015NewLine           }Di2015NewLine           elseDi2015NewLine           {Di2015NewLine               var currentlist = new List<bool>();Di2015NewLine               currentlist.Add(correctornot);Di2015NewLine               Session["listOfAnswers"] = currentlist;Di2015NewLine            }Di2015NewLine    }Di2015NewLine    public void Shuffle<T>(ref List<T> list)Di2015NewLine    {Di2015NewLine        Random rng = new Random();Di2015NewLine        int n = list.Count;Di2015NewLine        while (n > 1)Di2015NewLine        {Di2015NewLine            n--;Di2015NewLine            int k = rng.Next(n + 1);Di2015NewLine            T value = list[k];Di2015NewLine            list[k] = list[n];Di2015NewLine            list[n] = value;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21175877Di2015UniqueSeparatorList<T>
21175881Di2015UniqueSeparatornamespace MyNameSpaceDi2015NewLine{Di2015NewLine   int i; <-- THIS NEEDS TO BE INSIDE THE CLASSDi2015NewLineDi2015NewLine   class MyClassDi2015NewLine   {Di2015NewLine      ...Di2015NewLine   }Di2015NewLine}Di2015NewLine
21175881Di2015UniqueSeparator}
21175950Di2015UniqueSeparatorisAllRequiredFilesExist
21175950Di2015UniqueSeparatorpublic bool isAllRequiredFilesExist()Di2015NewLine{Di2015NewLine    string pathDirectory = Server.MapPath("~/UploadFiles/");Di2015NewLine    string[] fileNameRequired = { "test1.txt", "test2.txt", "test3.txt" };Di2015NewLine    //Check if all the required file exist in the folderDi2015NewLine    foreach (string names in fileNameRequired)Di2015NewLine    {Di2015NewLine        //Loop through the folderDi2015NewLine        //if there is a missing file then notified the user Di2015NewLineDi2015NewLine        foreach (string fileNameToCheck in Directory.EnumerateFiles(pathDirectory, names, SearchOption.AllDirectories))Di2015NewLine        {Di2015NewLine            if (!File.Exists(fileNameToCheck))Di2015NewLine            {Di2015NewLine                lblMessage.Text = "Missing file: " + names;Di2015NewLine                return false;Di2015NewLine            }    Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    return true;Di2015NewLine}Di2015NewLine
21175950Di2015UniqueSeparatorEnumerateFiles
21175950Di2015UniqueSeparatorFile.Exists
21175950Di2015UniqueSeparatorvar files = Directory.EnumerateFiles(pathDirectory, names, SearchOption.AllDirectories);Di2015NewLineif (!files.Any())Di2015NewLine{Di2015NewLine   lblMessage.Text = "Missing file: " + names;Di2015NewLine   return false;Di2015NewLine}Di2015NewLine
21175985Di2015UniqueSeparatornamespace ConsoleApplication1Di2015NewLine{Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    //private const string xmlPath = @"C:\\Users\\Jumast\\Desktop\\StackOverflowQuestion.xml";Di2015NewLine    private const string xmlPath, // put the file path hereDi2015NewLineDi2015NewLine    static Body makeBody()Di2015NewLine    {Di2015NewLine        var instance1 = new MyType() { Category = Category.MyTypeA, Foo = "bar" };Di2015NewLine        var instance2 = new MyType() { Category = Category.MyTypeB, Foo = "bar" };Di2015NewLine        return new Body(){Instance1 = instance1, Instance2 = instance2};Di2015NewLine    }Di2015NewLineDi2015NewLine    static void serializeBody(Body body, string path)Di2015NewLine    {Di2015NewLine        var ser = new DataContractSerializer(body.GetType(), body.GetType().Name, "");Di2015NewLine        using (var w = XmlWriter.Create(path, new XmlWriterSettings() { Indent = true }))Di2015NewLine        {Di2015NewLine            ser.WriteObject(w, body);Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    static Body deseerializeBody(string xmlPath)Di2015NewLine    {Di2015NewLine        Body deserializedBody;Di2015NewLine        var ser = new XmlSerializer(typeof(Body));Di2015NewLine        using (Stream stream = File.OpenRead(xmlPath))Di2015NewLine        {Di2015NewLine            deserializedBody = (Body)ser.Deserialize(stream);Di2015NewLine        }Di2015NewLine        return deserializedBody;Di2015NewLine    }Di2015NewLineDi2015NewLine    static void writeBodyToConsole(Body body)Di2015NewLine    {Di2015NewLine        Console.WriteLine("Instance1: " + body.Instance1);Di2015NewLine        Console.WriteLine("Instance2: " + body.Instance2);Di2015NewLine        Console.ReadKey();Di2015NewLine    }Di2015NewLineDi2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        serializeBody(makeBody(), xmlPath);Di2015NewLine        writeBodyToConsole(deseerializeBody(xmlPath));Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Body : IXmlSerializableDi2015NewLine{Di2015NewLine    #region PropertiesDi2015NewLine    public MyType Instance1 { get; set; }Di2015NewLine    public MyType Instance2 { get; set; }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region IXmlSerializableDi2015NewLine    public System.Xml.Schema.XmlSchema GetSchema()Di2015NewLine    {Di2015NewLine        return null;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void ReadXml(System.Xml.XmlReader reader)Di2015NewLine    {Di2015NewLine        reader.ReadStartElement();Di2015NewLine        Instance1 = new MyType(reader);Di2015NewLine        Instance2 = new MyType(reader);Di2015NewLine        reader.ReadEndElement();Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    public void WriteXml(System.Xml.XmlWriter writer)Di2015NewLine    {Di2015NewLine        Instance1.WriteXml(writer);Di2015NewLine        Instance2.WriteXml(writer);Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLine}Di2015NewLineDi2015NewLinepublic class MyType : IXmlSerializableDi2015NewLine{Di2015NewLine    #region FieldsDi2015NewLine    private Category _category;Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region ConstructorsDi2015NewLine    public MyType()Di2015NewLine    {Di2015NewLine        _category = Category.nil;Di2015NewLine        Foo = string.Empty;Di2015NewLine    }Di2015NewLine    public MyType(XmlReader reader) { ReadXml(reader);}Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region MethodsDi2015NewLine    public override string ToString()Di2015NewLine    {Di2015NewLine        var sb = new StringBuilder();Di2015NewLine        sb.Append(string.Format("Foo = {0}", Foo));Di2015NewLine        sb.Append(" , ");Di2015NewLine        sb.Append(string.Format("Category = {0}", Category));Di2015NewLine        return sb.ToString();Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region PropertiesDi2015NewLine    public string Foo { get; set; }Di2015NewLineDi2015NewLine    public Category CategoryDi2015NewLine    {Di2015NewLine        get { return this._category; }Di2015NewLine        set { this._category = value; }Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLineDi2015NewLine    #region IXmlSerializableDi2015NewLine    public System.Xml.Schema.XmlSchema GetSchema()Di2015NewLine    {Di2015NewLine        return null;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void ReadXml(System.Xml.XmlReader reader)Di2015NewLine    {Di2015NewLine        Enum.TryParse(reader.Name, out _category);Di2015NewLine        reader.Read();Di2015NewLine        Foo = reader.ReadElementContentAsString("Foo", "");Di2015NewLine        reader.ReadEndElement();Di2015NewLine    }Di2015NewLineDi2015NewLine    public void WriteXml(System.Xml.XmlWriter writer)Di2015NewLine    {Di2015NewLine        writer.WriteStartElement(this.Category.ToString(), "");Di2015NewLine        writer.WriteElementString("Foo", Foo);Di2015NewLine        writer.WriteEndElement();Di2015NewLine    }Di2015NewLine    #endregionDi2015NewLine}Di2015NewLineDi2015NewLinepublic enum CategoryDi2015NewLine{Di2015NewLine    MyTypeA,Di2015NewLine    MyTypeB,Di2015NewLine    nilDi2015NewLine}Di2015NewLine}Di2015NewLine
21176004Di2015UniqueSeparatorvar crcVal = BitConverter.ToInt32(crc32.ComputeHash(bytes), 0);Di2015NewLine
21176004Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Security.Cryptography;Di2015NewLineDi2015NewLinepublic class ProgramDi2015NewLine{Di2015NewLine    public void Main()Di2015NewLine    {Di2015NewLine        // first convert string to byte-arrayDi2015NewLine        String input = "test";Di2015NewLine        byte[] bytes = new byte[input.Length * sizeof(char)];Di2015NewLine        System.Buffer.BlockCopy(input.ToCharArray(), 0, bytes, 0, bytes.Length);Di2015NewLineDi2015NewLine        // then calculate the valueDi2015NewLine        var crcVal = crc32(input);Di2015NewLineDi2015NewLine        Console.WriteLine((int)crcVal);Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    public uint crc32(string input) {Di2015NewLine        var table = new uint[]{Di2015NewLine            0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F,Di2015NewLine                0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,Di2015NewLine                0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2,Di2015NewLine                0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,Di2015NewLine                0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9,Di2015NewLine                0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,Di2015NewLine                0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C,Di2015NewLine                0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,Di2015NewLine                0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423,Di2015NewLine                0xCFBA9599, 0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,Di2015NewLine                0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190, 0x01DB7106,Di2015NewLine                0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,Di2015NewLine                0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D,Di2015NewLine                0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,Di2015NewLine                0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950,Di2015NewLine                0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,Di2015NewLine                0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7,Di2015NewLine                0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,Di2015NewLine                0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA,Di2015NewLine                0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,Di2015NewLine                0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81,Di2015NewLine                0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,Di2015NewLine                0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84,Di2015NewLine                0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,Di2015NewLine                0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB,Di2015NewLine                0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,Di2015NewLine                0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8, 0xA1D1937E,Di2015NewLine                0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,Di2015NewLine                0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55,Di2015NewLine                0x316E8EEF, 0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,Di2015NewLine                0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28,Di2015NewLine                0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,Di2015NewLine                0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F,Di2015NewLine                0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,Di2015NewLine                0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,Di2015NewLine                0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,Di2015NewLine                0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69,Di2015NewLine                0x616BFFD3, 0x166CCF45, 0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,Di2015NewLine                0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC,Di2015NewLine                0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,Di2015NewLine                0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693,Di2015NewLine                0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,Di2015NewLine                0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8DDi2015NewLine        };Di2015NewLineDi2015NewLine        unchecked Di2015NewLine        {Di2015NewLine            uint crc = (uint)(((uint)0) ^ (-1));Di2015NewLine            var len = input.Length;Di2015NewLine            for (var i=0; i < len; i++) {Di2015NewLine                    crc = (crc >> 8) ^ table[Di2015NewLine                        (crc ^ (byte)input[i]) & 0xFFDi2015NewLine                ];Di2015NewLine            }Di2015NewLine            crc = (uint)(crc ^ (-1));Di2015NewLineDi2015NewLine            if (crc < 0) {Di2015NewLine                crc += (uint)4294967296;Di2015NewLine            }Di2015NewLineDi2015NewLine            return crc;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
21176043Di2015UniqueSeparatorvar dt =  document.getElementById("yourDate"); //get your dateDi2015NewLinevar today = new Date(); //get date todayDi2015NewLineif(dt.value <  today )Di2015NewLine{Di2015NewLine    dt.style.color="red";  Di2015NewLine}Di2015NewLine
21176189Di2015UniqueSeparator.Net
21176189Di2015UniqueSeparatorTreeNode
21176189Di2015UniqueSeparatorTreeNode
21176262Di2015UniqueSeparatorRegisterClassMap
21176262Di2015UniqueSeparatorBsonClassMap.RegisterClassMap<Post>(cm =>Di2015NewLine{Di2015NewLine    cm.AutoMap();Di2015NewLine    cm.SetIdMember(cm.GetMemberMap(p => p.Id));Di2015NewLine});Di2015NewLine
21176262Di2015UniqueSeparatorUpdate<Post>.Replace(p)
21176573Di2015UniqueSeparatorNumerical Properties
21176573Di2015UniqueSeparatorJSON
21176573Di2015UniqueSeparatordatabase
21176573Di2015UniqueSeparatorprivate string _metaScore;Di2015NewLine[JsonProperty(PropertyName = "Metascore")]Di2015NewLinepublic String Metascore { Di2015NewLineget { return _metaScore; } Di2015NewLineset { _metaScore = value; Di2015NewLine      int result;Di2015NewLine      if(int.TryParse(_metaScore, NumberStyles.AllowThousands, CultureInfo.InvariantCulture, out result))Di2015NewLine       MetaScoreInt = result;Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLine[Column("metascore")]Di2015NewLinepublic int MetascoreIntDi2015NewLine{Di2015NewLine    get;set;Di2015NewLine}Di2015NewLine
21176611Di2015UniqueSeparatorvar query = context.Database.SqlQuery<ApplicationUser>(commandText, new SqlParameter("@email",email));Di2015NewLinereturn query.First();Di2015NewLine
21176611Di2015UniqueSeparatorToListAsync()
21176611Di2015UniqueSeparatorResult
21176611Di2015UniqueSeparatorpublic async Task<ApplicationUser> FindByEMailAsync(String email)Di2015NewLine{Di2015NewLine    var context = base.Context;Di2015NewLineDi2015NewLine    String commandText = "Select * from AspNetUsers Where EMail = @email";Di2015NewLine    var query = context.Database.SqlQuery<ApplicationUser>(commandText, new SqlParameter("@email",email));Di2015NewLine    var data = await query.ToListAsync();Di2015NewLine    return data.First();Di2015NewLine}Di2015NewLine
21176611Di2015UniqueSeparatorEnumerable.Select
21176611Di2015UniqueSeparatora.Select(u => (ApplicationUser)u);
21176611Di2015UniqueSeparatora.Cast<ApplicationUser>().First()
21176611Di2015UniqueSeparatorFirstOrDefaultAsync()
21176611Di2015UniqueSeparatorFirstOrDefault()
21176611Di2015UniqueSeparatorFirst
21176611Di2015UniqueSeparatorIndexOutOfRangeException
21176611Di2015UniqueSeparatorInvalidOperationException
21176619Di2015UniqueSeparator$.ajax({Di2015NewLine    url: '/Order/Create',Di2015NewLine    dataType: 'json',Di2015NewLine    type: 'POST',Di2015NewLine    contentType: 'application/json',Di2015NewLine    data: JSON.stringify(order)Di2015NewLine});Di2015NewLine
21176619Di2015UniqueSeparatorOrderModel
21176619Di2015UniqueSeparatorList<OrderItem>
21176619Di2015UniqueSeparatorList<MenuItem>
21176619Di2015UniqueSeparatorJSON.stringify
21176709Di2015UniqueSeparatorint blogID  = int.Parse(Request.QueryString["ID"]);Di2015NewLine
21176709Di2015UniqueSeparatorint.TryParse
21176709Di2015UniqueSeparatorint blogID;Di2015NewLineint.TryParse(Request.Querystring["ID"], out blogID); Di2015NewLine
21176914Di2015UniqueSeparatorvar groups = result.Items.GroupBy(r => r.itemType).Select(g => new { id = g.Key, count = g.Count() });Di2015NewLinevar res = new Dictionary<itemType, int>();Di2015NewLineres = groups.ToDictionary(a => a.id, a=>a.count);Di2015NewLine
21177004Di2015UniqueSeparatorif(ds.Tables[0].Rows.Count <1)Di2015NewLine{Di2015NewLine    Page.ClientScript.RegisterStartupScript(this.GetType(), "messagebox", "<script>$(document).ready( function() { csscody.error('<br/><h1>   Error</h1><br/><left> 'Hello!' </left>');});</script>", false);Di2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    GridView1.DataSource = ds;Di2015NewLine    GridView1.DataBind();Di2015NewLine}Di2015NewLine
21177277Di2015UniqueSeparatorxdoc.Root.Elements("Blocks").Elements("Block")Di2015NewLine    .Where(w => (string)w.Attribute("Name") == "block1")Di2015NewLine    .Elements("Attributes")Di2015NewLine    .Select(s => new BlockDi2015NewLine    {Di2015NewLine        Tag = (string)s.Element("Tag"),Di2015NewLine        Layer = (string)s.Element("Layer")Di2015NewLine    });Di2015NewLine
21177277Di2015UniqueSeparatorfrom a in (from b in xdoc.Root.Elements("Blocks").Elements("Block")Di2015NewLine        where (string)b.Attribute("Name") == "block1"Di2015NewLine        select b).Elements("Attributes")Di2015NewLine        select  new BlockDi2015NewLine        {Di2015NewLine            Tag = (string)a.Element("Tag"),Di2015NewLine            Layer = (string)a.Element("Layer")Di2015NewLine        };Di2015NewLine
21177343Di2015UniqueSeparatorfor (int v = 0; v < 8; v++) {Di2015NewLine    int[] lutX = new int[] {-1, -1, -1, -1, 1, 1, 1, 1};Di2015NewLine    int[] lutY = new int[] {-1, -1, -1, -1, 1, 1, 1, 1};Di2015NewLine    int[] lutZ = new int[] {-1, -1, 1, 1, -1, -1, 1, 1};Di2015NewLine    float x = lutX[v];Di2015NewLine    float y = lutY[v];Di2015NewLine    float z = lutZ[v];Di2015NewLine}Di2015NewLine
21177343Di2015UniqueSeparatorIf for v==0, the OR-logic adds 1 to X, set lutX[0] to 1.Di2015NewLineElse set lutX[0] to -1Di2015NewLine
21177432Di2015UniqueSeparatorMath.Pow(bVal, 2) - (4 * aVal * cVal)
21177432Di2015UniqueSeparator-56
21177432Di2015UniqueSeparatorSqrt
21177432Di2015UniqueSeparatorNaN
21177432Di2015UniqueSeparatorvar sqrt = Math.Sqrt(Math.Pow(bVal, 2.0) - (4.0 * aVal * cVal));Di2015NewLinevar xVal1 = (-bVal + sqrt) / (2.0 * aVal); //Positive CalculationDi2015NewLinevar xVal2 = (-bVal - sqrt) / (2.0 * aVal); //Negative CalculationDi2015NewLine
21177432Di2015UniqueSeparator-
21177432Di2015UniqueSeparatorbVal
21177432Di2015UniqueSeparator2 * aVal
21177432Di2015UniqueSeparator.0
21177633Di2015UniqueSeparatorstring
21177633Di2015UniqueSeparatorstring
21177633Di2015UniqueSeparatorObject.ReferenceEquals
21177633Di2015UniqueSeparatorpublic bool areSame(string s1,string s2){Di2015NewLine   return Object.ReferenceEquals(s1, s2);Di2015NewLine}Di2015NewLine
21177702Di2015UniqueSeparatorTimeSpan time = timeOnWake - timeOnSleep;Di2015NewLinevar hours = time.TotalHours;Di2015NewLine
21178095Di2015UniqueSeparator.Show()
21178417Di2015UniqueSeparatorstring example1 = "^[a-zA-Z0-9\\\\\\\\]*?$"; //two backslash characters assigned to the stringDi2015NewLine
21178417Di2015UniqueSeparator\\n
21178417Di2015UniqueSeparator\\s
21178417Di2015UniqueSeparator@
21178417Di2015UniqueSeparatorstring example2 = @"^[a-zA-Z0-9\\\\]*?$" //same here but the @ symbol saves us the headacheDi2015NewLine
21178417Di2015UniqueSeparator^[a-zA-Z0-9\\]*?$
21178417Di2015UniqueSeparator]
21178417Di2015UniqueSeparator*
21178417Di2015UniqueSeparator?
21178417Di2015UniqueSeparator$
21178567Di2015UniqueSeparatorde
21178567Di2015UniqueSeparatorm
21178567Di2015UniqueSeparatorpublic static void Main()Di2015NewLine    {Di2015NewLine        // Alternate Method for getting the Fields from the XML fileDi2015NewLine        XmlDocument xmlDocument = new XmlDocument();Di2015NewLine        xmlDocument.Load("C:/Users/Administrator/Downloads/direct.xml");Di2015NewLine        XmlNamespaceManager xmlnm = new XmlNamespaceManager(xmlDocument.NameTable);Di2015NewLineDi2015NewLine        xmlnm.AddNamespace("de", "http://www.w3.org/2005/Atom"); Di2015NewLineDi2015NewLine        **** add this too****Di2015NewLine        xmlnm.AddNamespace("m", "http://schemas.giooglt.com/ado/2007/08/dataservices/metadata");Di2015NewLineDi2015NewLine        ParseXML(xmlDocument, xmlnm);Di2015NewLineDi2015NewLine        Console.WriteLine("\\n---XML parsed---");Di2015NewLine        Console.ReadKey();Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine public static void ParseXML(XmlDocument xmlFile, XmlNamespaceManager xmlnm)Di2015NewLine    {Di2015NewLine       /// inline should be ""m"" not ""de""Di2015NewLine        XmlNodeList nodes = xmlFile.SelectNodes("//de:entry/de:link/m:inline/de:feed/de:id", xmlnm);Di2015NewLine        foreach (XmlNode node in nodes)Di2015NewLine        {Di2015NewLine            Console.WriteLine(node.Name + " = " + node.InnerXml);Di2015NewLine        }Di2015NewLine    }Di2015NewLine
21178786Di2015UniqueSeparatorGetAbbreviatedMonthName
21178786Di2015UniqueSeparatorDateTimeFormatInfo
21178786Di2015UniqueSeparatorDateTimeFormatInfo.CurrentInfo
21178786Di2015UniqueSeparatorDateTimeFormatInfo
21178786Di2015UniqueSeparatormonList.Add(System.Globalization.DateTimeFormatInfo.CurrentInfo.GetAbbreviatedMonthName(3));Di2015NewLine
21178941Di2015UniqueSeparatorSetDefaultPrinter
21178941Di2015UniqueSeparator   using System.Runtime.InteropServices;Di2015NewLineDi2015NewLine   ...Di2015NewLineDi2015NewLine   [DllImport("winspool.drv", Di2015NewLine              CharSet = CharSet.Auto, Di2015NewLine              SetLastError = true)]Di2015NewLine   [return: MarshalAs(UnmanagedType.Bool)]Di2015NewLine   public static extern Boolean SetDefaultPrinter(String name);Di2015NewLineDi2015NewLine   ...Di2015NewLineDi2015NewLine   SetDefaultPrinter(PrinterName);Di2015NewLine
21179151Di2015UniqueSeparator Var srs = (from s in dcDistrict.ScheduledReportStatus.AsEnumerable()Di2015NewLine                                         where s.ReportConfigId.Equals(ConfigId)Di2015NewLine                                         && s.Status.HasValue && s.Status.ValueDi2015NewLine                                         && (Convert.ToString(s.SentDate).Split(' ')[0]).Equals(Convert.ToString(DateTime.Now.Date).Split(' ')[0])Di2015NewLine                                         select s).FirstOrDefault();Di2015NewLine
21179304Di2015UniqueSeparatorcalli
21179340Di2015UniqueSeparatorXmlNode xnd = xworkload.SelectSingleNode("//PowerSupply/Item/quantity");Di2015NewLine
21179340Di2015UniqueSeparatorquantity
21179340Di2015UniqueSeparatorPowerSupply
21179340Di2015UniqueSeparatorItem
21179340Di2015UniqueSeparatorPowerSupply
21179340Di2015UniqueSeparator//
21179340Di2015UniqueSeparatorvar xdoc = XDocument.Load(dlg.FileName);Di2015NewLineint quantity = (int)xdoc.XPathSelectElement("//PowerSupply/Item/quantity");Di2015NewLine
21179340Di2015UniqueSeparatorPowerSupply
21179340Di2015UniqueSeparatorint sum = xdoc.XPathSelectElements("//PowerSupply/Item/quantity")Di2015NewLine              .Sum(q => (int)q);Di2015NewLine
21179340Di2015UniqueSeparatorXmlNodeList quantities = xworkload.SelectNodes("//PowerSupply/Item/quantity");Di2015NewLineint sum = 0;Di2015NewLineforeach (XmlNode quantity in quantities)Di2015NewLine    sum += Int32.Parse(quantity.InnerText);Di2015NewLine
21180049Di2015UniqueSeparatorRow.DataBoundItem
21180049Di2015UniqueSeparatorpublic class CustomerDi2015NewLine{Di2015NewLine    string name;Di2015NewLine    int age;Di2015NewLineDi2015NewLine    public Customer(string thename, int theage)Di2015NewLine    {Di2015NewLine        name = thename;Di2015NewLine        age = theage;Di2015NewLine    }Di2015NewLineDi2015NewLine    public string NameDi2015NewLine    {Di2015NewLine        get { return name; }Di2015NewLine        set { name = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine    public int AgeDi2015NewLine    {Di2015NewLine        get { return age; }Di2015NewLine        set { age = value; }Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLinepublic class ChildForm : FormDi2015NewLine{Di2015NewLine    DataGridView dataGridView1 = new DataGridView();Di2015NewLine    public ChildForm()Di2015NewLine    {Di2015NewLine        this.ClientSize = new System.Drawing.Size(284, 262);Di2015NewLine        this.Controls.Add(dataGridView1);Di2015NewLine        dataGridView1.Dock = DockStyle.Fill;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void AddData(List<Customer> theData)Di2015NewLine    {Di2015NewLine        dataGridView1.AutoGenerateColumns = true;Di2015NewLine        dataGridView1.DataSource = theData;Di2015NewLine    }Di2015NewLine}Di2015NewLinepublic class ParentForm : FormDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// The main entry point for the application.Di2015NewLine    /// </summary>Di2015NewLine    [STAThread]Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        Application.EnableVisualStyles();Di2015NewLine        Application.SetCompatibleTextRenderingDefault(false);Di2015NewLine        Application.Run(new ParentForm());Di2015NewLine    }Di2015NewLineDi2015NewLineDi2015NewLine    DataGridView dataGridView1 = new DataGridView();Di2015NewLine    Button button1 = new Button();Di2015NewLine    ChildForm childForm = new ChildForm();Di2015NewLineDi2015NewLine    public ParentForm()Di2015NewLine    {Di2015NewLine        this.ClientSize = new System.Drawing.Size(284, 262);Di2015NewLine        this.Controls.Add(dataGridView1);Di2015NewLine        this.Controls.Add(button1);Di2015NewLine        this.Load += new EventHandler(ParentForm_Load);Di2015NewLine        button1.Click += new EventHandler(button1_Click);Di2015NewLine        button1.Dock = DockStyle.Top;Di2015NewLine        button1.Text = "CopyToChild";Di2015NewLine        dataGridView1.Dock = DockStyle.Fill;Di2015NewLine    }Di2015NewLineDi2015NewLine    void button1_Click(object sender, EventArgs e)Di2015NewLine    {Di2015NewLine        List<Customer> customers = new List<Customer>();Di2015NewLine        foreach (DataGridViewRow row in this.dataGridView1.SelectedRows)Di2015NewLine        {Di2015NewLine            Customer customer = row.DataBoundItem as Customer;Di2015NewLine            if (customer != null)Di2015NewLine            {Di2015NewLine                customers.Add(customer);Di2015NewLine            }Di2015NewLine        }Di2015NewLine        childForm.AddData(customers);Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLine    private void ParentForm_Load(object sender, EventArgs e)Di2015NewLine    {Di2015NewLineDi2015NewLine        System.Collections.ArrayList customers = new System.Collections.ArrayList();Di2015NewLineDi2015NewLine        customers.Add(new Customer("Thor", 120));Di2015NewLine        customers.Add(new Customer("Loki", 110));Di2015NewLine        dataGridView1.AutoGenerateColumns = true;Di2015NewLine        dataGridView1.SelectionMode = DataGridViewSelectionMode.FullRowSelect;Di2015NewLine        dataGridView1.DataSource = customers;Di2015NewLine        childForm.Show();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21180122Di2015UniqueSeparatorReportParameter
21180122Di2015UniqueSeparatorReportParameter[] parameters = new ReportParameter[x];Di2015NewLineparameters[0] = new ReportParameter("name1", value1);Di2015NewLine...Di2015NewLineparameters[x] = new ReportParameter("namex", valuex);Di2015NewLinethis.reportViewer1.LocalReport.SetParameters(parameters);Di2015NewLine
21180195Di2015UniqueSeparatorKey
21180195Di2015UniqueSeparatorDictionary<string, List<object>>
21180195Di2015UniqueSeparatorDictionary<string, List<object>> dict = new ...;Di2015NewLinedict["mon_number"] = new List<object>();Di2015NewLinedict["mon_number"].Add(1);Di2015NewLinedict["mon_number"].Add(2);Di2015NewLinedict["mon_number"].Add(5);Di2015NewLinedict["mon_name"] = new List<object>();Di2015NewLinedict["mon_name"].Add("jan");Di2015NewLinedict["mon_name"].Add("apr");Di2015NewLinedict["mon_name"].Add("may");    Di2015NewLine...Di2015NewLine
21180195Di2015UniqueSeparatorDictionary<string, object[]> dict = new ...;Di2015NewLinedict["mon_number"] = new [] {1, 2, 5 };Di2015NewLinedict["mon_name"] = new[] { "jan", "apr", "may" }Di2015NewLine
21180353Di2015UniqueSeparatorÐ¡Ð¿Ð¸Ñ?Ð¾Ðº<T>
21180353Di2015UniqueSeparatorList<T>
21180353Di2015UniqueSeparatorList<T>
21180353Di2015UniqueSeparatorList<T>
21180353Di2015UniqueSeparator// which is odd, because ToList() already existsDi2015NewLinepublic static List<T> ToList<T>(this IEnumerable<T> source)Di2015NewLine{Di2015NewLine    return source.ToList();Di2015NewLine}Di2015NewLine
21180353Di2015UniqueSeparatorpublic static Ð¡Ð¿Ð¸Ñ?Ð¾Ðº<T> ÐŸÑ€Ð¸Ð²ÐµÑ?Ñ‚Ð¸ÐšÐ¡Ð¿Ð¸Ñ?ÐºÑƒ<T>(this IEnumerable<T> source)Di2015NewLine{Di2015NewLine    var Ñ?Ð¿Ð¸Ñ?Ð¾Ðº = new Ð¡Ð¿Ð¸Ñ?Ð¾Ðº<T>();Di2015NewLine    Ñ?Ð¿Ð¸Ñ?Ð¾Ðº.AddRange(source);Di2015NewLine    return Ñ?Ð¿Ð¸Ñ?Ð¾Ðº;Di2015NewLine}Di2015NewLine
21180616Di2015UniqueSeparatorManyToOne(x => x.Country, m =>Di2015NewLine{Di2015NewLine    m.Column("column_country");Di2015NewLine    // or...Di2015NewLine    m.Column(c =>Di2015NewLine    {Di2015NewLine        c.Name("column_country");Di2015NewLine        // other standard column optionsDi2015NewLine    });Di2015NewLine...Di2015NewLine
21180616Di2015UniqueSeparatorSet(x => x.States, c =>Di2015NewLine{ Di2015NewLine    c.Lazy(CollectionLazy.Lazy); // or CollectionLazy.NoLazy, CollectionLazy.ExtraDi2015NewLineDi2015NewLine    c.Table("tableName");Di2015NewLine    c.Schema("schemaName");Di2015NewLine    c.BatchSize(100);Di2015NewLine    ...Di2015NewLine
21180699Di2015UniqueSeparatorBoolean
21180699Di2015UniqueSeparatorfrmLeaveRequestConfirmation frm = Di2015NewLinenew frmLeaveRequestConfirmation(dtpStartdate.Value, dtpEndDate.Value,   Di2015NewLinecmbStartDate.SelectedIndex.ToString(), cmbEndDate.SelectedIndex.ToString(),   Di2015NewLinerbStartHalfDay.Checked);Di2015NewLinefrm.ShowDialog();Di2015NewLine
21180699Di2015UniqueSeparatorpublic frmLeaveRequestConfirmation(  Di2015NewLineDateTime SDate, DateTime EDate, string SDFH, string EDFH, Boolean RBHD)Di2015NewLine{Di2015NewLine   ......Di2015NewLine
21180908Di2015UniqueSeparatorSelectionChanged
21180908Di2015UniqueSeparatorListView
21180908Di2015UniqueSeparator.xaml
21180908Di2015UniqueSeparator<ListView Name="lview" ...Di2015NewLine          SelectionChanged="lview_SelectionChanged" />Di2015NewLine
21180908Di2015UniqueSeparator.xaml.cs
21180908Di2015UniqueSeparatorprivate void lview_SelectionChanged(object sender, System.Windows.RoutedEventArgs e)Di2015NewLine{Di2015NewLine    // Assuming the property is Employee.FirstNameDi2015NewLine    tb_firstname.Text = ((Employee)lview.SelectedItem).FirstName;Di2015NewLine}Di2015NewLine
21180993Di2015UniqueSeparator group new { p, l } by newDi2015NewLine          {Di2015NewLine            p.postid, Di2015NewLine            p.title, Di2015NewLine            p.disabled, Di2015NewLine            l.locationnameDi2015NewLine           } into gDi2015NewLine  orderby g.Key.PostId descending Di2015NewLineDi2015NewLine select newDi2015NewLine          {Di2015NewLine           g.key.postid, Di2015NewLine           g.key.title, Di2015NewLine           g.key.disabled, Di2015NewLine           g.key.locationnameDi2015NewLineDi2015NewLine           } Di2015NewLine
21181036Di2015UniqueSeparatorInvalidate
21181036Di2015UniqueSeparatorcontrol.Invalidate(new Rectangle(32, 32, 32, 32));Di2015NewLinecontrol.Update(); //to invalidate control immediatelyDi2015NewLine
21181263Di2015UniqueSeparatorD3DCREATE_FPU_PRESERVE
21181263Di2015UniqueSeparatorCreateDevice
21181273Di2015UniqueSeparatorkml
21181273Di2015UniqueSeparatorstring name = "RFA13";Di2015NewLinevar xdoc = XDocument.Load(path_to_xml);Di2015NewLinevar ns = xdoc.Root.GetDefaultNamespace(); // get namespaceDi2015NewLine// find placemark element with name you providedDi2015NewLinevar placemark = xdoc.Descendants(ns + "Placemark")Di2015NewLine                    .FirstOrDefault(p => (string)p.Element(ns + "name") == name);Di2015NewLineDi2015NewLineif (placemark != null) // check if placemark foundDi2015NewLine{Di2015NewLine    // assume every placemark has coordinatesDi2015NewLine    string coordinates = placemark.Descendants(ns + "coordinates")Di2015NewLine                                  .Select(c => (string)c)Di2015NewLine                                  .First();Di2015NewLine}Di2015NewLine
21181380Di2015UniqueSeparator<asp:Button ID="Submit1" runat="server" Text="Update" OnClick="btnClick_Click"/>Di2015NewLine
21181380Di2015UniqueSeparatorprotected void btnclick_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine   tbStatus.Text += Environment.NewLine + "Button clicked. ";Di2015NewLine}Di2015NewLine
21181462Di2015UniqueSeparator[HttpPost]Di2015NewLinepublic ActionResult Index(CoursePreference pref)Di2015NewLine{Di2015NewLine    // Insert code to fetch database context into variable "db"Di2015NewLine    db.CoursePreferences.Add(pref);Di2015NewLine    db.SaveChanges();Di2015NewLine    return RedirectToAction("Index");Di2015NewLine}Di2015NewLine
21181462Di2015UniqueSeparator@Html.HiddenFor(model => model.CoursePreferenceId)
21181462Di2015UniqueSeparatorEditorFor
21181462Di2015UniqueSeparatorLabelFor
21181734Di2015UniqueSeparatorGlobal.answers.RemoveAt(i);Di2015NewLine
21181857Di2015UniqueSeparator<button class="fake_section" type="button">Choose Photo</button>Di2015NewLine
21181987Di2015UniqueSeparatorT
21181987Di2015UniqueSeparatorTest
21181987Di2015UniqueSeparator==
21181987Di2015UniqueSeparatorT
21181987Di2015UniqueSeparatorTest
21181987Di2015UniqueSeparatorTest
21182031Di2015UniqueSeparatorvar expression = String.Format("//Customers[CustNo/text() = {0}]/", CustNos);Di2015NewLineDi2015NewLinevar SurnameNode = xmlDoc.SelectNodes(expression + "Surname");Di2015NewLinevar ForenameNode = xmlDoc.SelectNodes(expression +"Forename");Di2015NewLine
21182329Di2015UniqueSeparatorif ... else if ... else
21182329Di2015UniqueSeparator[ValidateInput(false)]Di2015NewLine[AcceptVerbs(HttpVerbs.Post)]Di2015NewLinepublic ActionResult Search(SearchViewModel searchViewModel)Di2015NewLine{Di2015NewLine    return RedirectToAction(searchViewModel.SelectedCategory == 1 ? "Artists" : searchViewModel.SelectedCategory == 2 ? "Albums" : "Tracks", "Search");Di2015NewLine}Di2015NewLine
21182369Di2015UniqueSeparatorMainWindow
21182369Di2015UniqueSeparatorInstance
21182369Di2015UniqueSeparatorAboutWindow
21182369Di2015UniqueSeparatorWindowBase
21182369Di2015UniqueSeparatorWindowBase
21182369Di2015UniqueSeparatorAboutWindow
21182369Di2015UniqueSeparatorpublic
21182369Di2015UniqueSeparatorpublic
21182369Di2015UniqueSeparatorprivate
21182369Di2015UniqueSeparatorAboutWindow
21182429Di2015UniqueSeparatordual
21182429Di2015UniqueSeparatorvar result = new Di2015NewLine{ Di2015NewLine    RestaurantsCount = context.Restaurants.Count(),Di2015NewLine    ShopsCount = context.Shops.Count(),Di2015NewLine    ProductsCount = context.Products.Count()Di2015NewLine};Di2015NewLine
21182429Di2015UniqueSeparator        var result = from dummyRow in new List<string> { "X" }Di2015NewLine                     join product in context.products on 1 equals 1 into pgDi2015NewLine                     join shop in context.shops on 1 equals 1 into sgDi2015NewLine                     join restaurant in context.restaurants on 1 equals 1 into rgDi2015NewLine                     select newDi2015NewLine                     {Di2015NewLine                         productsCount = pg.Count(),Di2015NewLine                         shopsCount = sg.Count(),Di2015NewLine                         restaurantsCount = rg.Count()Di2015NewLine                     };Di2015NewLine
21182465Di2015UniqueSeparatorprivate int id;Di2015NewLinepublic int IdDi2015NewLine{Di2015NewLine    setDi2015NewLine    {Di2015NewLine        // Perform some validation?Di2015NewLine        id = value;Di2015NewLine    }Di2015NewLine    get { return id; }Di2015NewLine}Di2015NewLine
21182465Di2015UniqueSeparatorpublic int Id { get; set; }Di2015NewLine
21182477Di2015UniqueSeparatorGlobalVariables.open.timer1.Enabled = true;Di2015NewLine
21182477Di2015UniqueSeparatortimer1
21182477Di2015UniqueSeparatorpublic
21182477Di2015UniqueSeparatorinternal
21182477Di2015UniqueSeparatorpublic
21182477Di2015UniqueSeparatorclass PortBrowserForm : FormDi2015NewLine{Di2015NewLine    public void SetTimerEnabled(bool enabled)Di2015NewLine    {Di2015NewLine        timer1.Enabled = enabled;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21182477Di2015UniqueSeparatorGlobalVariables.open.SetTimerEnabled(true);Di2015NewLine
21182493Di2015UniqueSeparatorpublic ActionResult Index()Di2015NewLine{Di2015NewLine    return View(_studentService.GetAllStudents());Di2015NewLine}Di2015NewLine
21182493Di2015UniqueSeparator  @foreach (var item in Model)Di2015NewLine{Di2015NewLine    <tr>Di2015NewLine        <td>Di2015NewLine        @Html.DisplayNameFor(modelItem => item.Name)Di2015NewLine        </td>Di2015NewLine        <td>Di2015NewLine        @Html.DisplayFor(modelItem => item.Name)Di2015NewLine        </td>Di2015NewLine    </tr>Di2015NewLine}Di2015NewLine
21182583Di2015UniqueSeparator<Style x:Key="PasswordBoxStyle" TargetType="PasswordBox">Di2015NewLine        <Setter Property="FontFamily" Value="{StaticResource PhoneFontFamilyNormal}"/>Di2015NewLine        <Setter Property="FontSize" Value="{StaticResource PhoneFontSizeMediumLarge}"/>Di2015NewLine        <Setter Property="Background" Value="{StaticResource PhoneTextBoxBrush}"/>Di2015NewLine        <Setter Property="Foreground" Value="{StaticResource PhoneTextBoxForegroundBrush}"/>Di2015NewLine        <Setter Property="BorderBrush" Value="{StaticResource PhoneTextBoxBrush}"/>Di2015NewLine        <Setter Property="BorderThickness" Value="{StaticResource PhoneBorderThickness}"/>Di2015NewLine        <Setter Property="SelectionBackground" Value="{StaticResource PhoneAccentBrush}"/>Di2015NewLine        <Setter Property="SelectionForeground" Value="{StaticResource PhoneContrastBackgroundBrush}"/>Di2015NewLine        <Setter Property="Padding" Value="2"/>Di2015NewLine        <Setter Property="Template">Di2015NewLine            <Setter.Value>Di2015NewLine                <ControlTemplate TargetType="PasswordBox">Di2015NewLine                    <Grid Background="Transparent">Di2015NewLine                        <VisualStateManager.VisualStateGroups>Di2015NewLine                            <VisualStateGroup x:Name="CommonStates">Di2015NewLine                                <VisualState x:Name="Normal"/>Di2015NewLine                                <VisualState x:Name="MouseOver"/>Di2015NewLine                                <VisualState x:Name="Disabled">Di2015NewLine                                    <Storyboard>Di2015NewLine                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="EnabledBorder">Di2015NewLine                                            <DiscreteObjectKeyFrame KeyTime="0">Di2015NewLine                                                <DiscreteObjectKeyFrame.Value>Di2015NewLine                                                    <Visibility>Collapsed</Visibility>Di2015NewLine                                                </DiscreteObjectKeyFrame.Value>Di2015NewLine                                            </DiscreteObjectKeyFrame>Di2015NewLine                                        </ObjectAnimationUsingKeyFrames>Di2015NewLine                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="DisabledBorder">Di2015NewLine                                            <DiscreteObjectKeyFrame KeyTime="0">Di2015NewLine                                                <DiscreteObjectKeyFrame.Value>Di2015NewLine                                                    <Visibility>Visible</Visibility>Di2015NewLine                                                </DiscreteObjectKeyFrame.Value>Di2015NewLine                                            </DiscreteObjectKeyFrame>Di2015NewLine                                        </ObjectAnimationUsingKeyFrames>Di2015NewLine                                    </Storyboard>Di2015NewLine                                </VisualState>Di2015NewLine                            </VisualStateGroup>Di2015NewLine                            <VisualStateGroup x:Name="FocusStates">Di2015NewLine                                <VisualState x:Name="Focused">Di2015NewLine                                    <Storyboard>Di2015NewLine                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Background" Storyboard.TargetName="EnabledBorder">Di2015NewLine                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource PhoneTextBoxEditBackgroundBrush}"/>Di2015NewLine                                        </ObjectAnimationUsingKeyFrames>Di2015NewLine                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="BorderBrush" Storyboard.TargetName="EnabledBorder">Di2015NewLine                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource PhoneTextBoxEditBorderBrush}"/>Di2015NewLine                                        </ObjectAnimationUsingKeyFrames>Di2015NewLine                                    </Storyboard>Di2015NewLine                                </VisualState>Di2015NewLine                                <VisualState x:Name="Unfocused"/>Di2015NewLine                            </VisualStateGroup>Di2015NewLine                        </VisualStateManager.VisualStateGroups>Di2015NewLine                        <Border x:Name="EnabledBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Margin="{StaticResource PhoneTouchTargetOverhang}">Di2015NewLine                            <Border x:Name="ContentElement" BorderThickness="0" Margin="{StaticResource PhonePasswordBoxInnerMargin}" Padding="{TemplateBinding Padding}"/>Di2015NewLine                        </Border>Di2015NewLine                        <Border x:Name="DisabledBorder" BorderBrush="{StaticResource PhoneDisabledBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" Margin="{StaticResource PhoneTouchTargetOverhang}" Visibility="Collapsed">Di2015NewLine                            <PasswordBox x:Name="DisabledContent" Background="Transparent" Foreground="{StaticResource PhoneDisabledBrush}" Password="{TemplateBinding Password}" PasswordChar="{TemplateBinding PasswordChar}" Template="{StaticResource PhoneDisabledPasswordBoxTemplate}"/>Di2015NewLine                        </Border>Di2015NewLine                    </Grid>Di2015NewLine                </ControlTemplate>Di2015NewLine            </Setter.Value>Di2015NewLine        </Setter>Di2015NewLine    </Style>Di2015NewLine
21182617Di2015UniqueSeparatorAddHandler AccessTokenQuery.QueryResponse, AddressOf AccessTokenQuery_QueryResponseDi2015NewLine
21182644Di2015UniqueSeparator#container2 img {Di2015NewLine    left: 0px;Di2015NewLine    top: 0px;Di2015NewLine    margin: 0;Di2015NewLineDi2015NewLine}Di2015NewLine
21182654Di2015UniqueSeparatorvar list = CustomerDataSourceDi2015NewLine           .customerDataDi2015NewLine           .Where(c => c.GetType()Di2015NewLine                        .GetProperties(BindingFlags.Instance | BindingFlags.Public)Di2015NewLine                        .Any(pi => pi.GetValue(c).ToString().Contains("York")))Di2015NewLine           .ToList();Di2015NewLine
21182654Di2015UniqueSeparatorcustomer2
21182654Di2015UniqueSeparator[AttributeUsage(AttributeTargets.Property)]Di2015NewLinesealed class SearchableAttribute : AttributeDi2015NewLine{Di2015NewLine    public SearchableAttribute()Di2015NewLine    {Di2015NewLine    }Di2015NewLine}Di2015NewLine
21182654Di2015UniqueSeparatorname
21182654Di2015UniqueSeparatorpublic class CustomerDi2015NewLine{Di2015NewLine    [Searchable]Di2015NewLine    public string name { get; set; }Di2015NewLine    public string address { get; set; }Di2015NewLine}Di2015NewLine
21182654Di2015UniqueSeparatorvar list = CustomerDataSourceDi2015NewLine           .customerDataDi2015NewLine           .Where(c => c.GetType()Di2015NewLine                        .GetProperties(BindingFlags.Instance | BindingFlags.Public)Di2015NewLine                        .Where(pi => pi.GetCustomAttribute<SearchableAttribute>() != null)Di2015NewLine                        .Any(pi => pi.GetValue(c).ToString().Contains("York")))Di2015NewLine           .ToList();Di2015NewLine
21182654Di2015UniqueSeparator.ToString()
21182654Di2015UniqueSeparator.ToString()
21182654Di2015UniqueSeparatorvar list = CustomerDataSourceDi2015NewLine           .customerDataDi2015NewLine           .Where(c => c.GetType()Di2015NewLine           .GetProperties(BindingFlags.Instance | BindingFlags.Public)Di2015NewLine           .Where(pi => pi.GetCustomAttribute<SearchableAttribute>() != null)Di2015NewLine           .Any(pi => pi.PropertyType.IsArray Di2015NewLine                          ? (pi.GetValue(c) as IEnumerable<object>)Di2015NewLine                               .Any(o => o.ToString().Contains("Paris"))Di2015NewLine                          : pi.GetValue(c).ToString().Contains("Paris")))Di2015NewLine
21182669Di2015UniqueSeparatorPutBlockAsync
21182669Di2015UniqueSeparatorPutBlockListAsync
21182669Di2015UniqueSeparatorusing Microsoft.WindowsAzure.Storage;Di2015NewLineusing Microsoft.WindowsAzure.Storage.Auth;Di2015NewLineusing Microsoft.WindowsAzure.Storage.Blob;Di2015NewLineusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.IO;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Text;Di2015NewLineusing System.Threading;Di2015NewLineusing System.Threading.Tasks;Di2015NewLineDi2015NewLinenamespace ConsoleApplication1Di2015NewLine{Di2015NewLine    class ProgramDi2015NewLine    {Di2015NewLine        static CloudStorageAccount storageAccount = new CloudStorageAccount(new StorageCredentials("accountname", "accountkey"), true);Di2015NewLine        static void Main(string[] args)Di2015NewLine        {Di2015NewLine            CloudBlobClient myBlobClient = storageAccount.CreateCloudBlobClient();Di2015NewLine            myBlobClient.SingleBlobUploadThresholdInBytes = 1024 * 1024;Di2015NewLine            CloudBlobContainer container = myBlobClient.GetContainerReference("adokontajnerneki");Di2015NewLine            //container.CreateIfNotExists();Di2015NewLine            CloudBlockBlob myBlob = container.GetBlockBlobReference("cfx.zip");Di2015NewLine            var blockSize = 256 * 1024;Di2015NewLine            myBlob.StreamWriteSizeInBytes = blockSize;Di2015NewLine            var fileName = @"D:\\cfx.zip";Di2015NewLine            long bytesToUpload = (new FileInfo(fileName)).Length;Di2015NewLine            long fileSize = bytesToUpload;Di2015NewLineDi2015NewLine            if (bytesToUpload < blockSize)Di2015NewLine            {Di2015NewLine                CancellationToken ca = new CancellationToken();Di2015NewLine                var ado = myBlob.UploadFromFileAsync(fileName, FileMode.Open, ca);Di2015NewLine                Console.WriteLine(ado.Status); //Does Not Help MuchDi2015NewLine                ado.ContinueWith(t =>Di2015NewLine                {Di2015NewLine                    Console.WriteLine("Status = " + t.Status);Di2015NewLine                    Console.WriteLine("It is over"); //this is working OKDi2015NewLine                });Di2015NewLine            }Di2015NewLine            elseDi2015NewLine            {Di2015NewLine                List<string> blockIds = new List<string>();Di2015NewLine                int index = 1;Di2015NewLine                long startPosition = 0;Di2015NewLine                long bytesUploaded = 0;Di2015NewLine                doDi2015NewLine                {Di2015NewLine                    var bytesToRead = Math.Min(blockSize, bytesToUpload);Di2015NewLine                    var blobContents = new byte[bytesToRead];Di2015NewLine                    using (FileStream fs = new FileStream(fileName, FileMode.Open))Di2015NewLine                    {Di2015NewLine                        fs.Position = startPosition;Di2015NewLine                        fs.Read(blobContents, 0, (int)bytesToRead);Di2015NewLine                    }Di2015NewLine                    ManualResetEvent mre = new ManualResetEvent(false);Di2015NewLine                    var blockId = Convert.ToBase64String(Encoding.UTF8.GetBytes(index.ToString("d6")));Di2015NewLine                    Console.WriteLine("Now uploading block # " + index.ToString("d6"));Di2015NewLine                    blockIds.Add(blockId);Di2015NewLine                    var ado = myBlob.PutBlockAsync(blockId, new MemoryStream(blobContents), null);Di2015NewLine                    ado.ContinueWith(t =>Di2015NewLine                    {Di2015NewLine                        bytesUploaded += bytesToRead;Di2015NewLine                        bytesToUpload -= bytesToRead;Di2015NewLine                        startPosition += bytesToRead;Di2015NewLine                        index++;Di2015NewLine                        double percentComplete = (double)bytesUploaded / (double)fileSize;Di2015NewLine                        Console.WriteLine("Percent complete = " + percentComplete.ToString("P"));Di2015NewLine                        mre.Set();Di2015NewLine                    });Di2015NewLine                    mre.WaitOne();Di2015NewLine                }Di2015NewLine                while (bytesToUpload > 0);Di2015NewLine                Console.WriteLine("Now committing block list");Di2015NewLine                var pbl = myBlob.PutBlockListAsync(blockIds);Di2015NewLine                pbl.ContinueWith(t =>Di2015NewLine                {Di2015NewLine                    Console.WriteLine("Blob uploaded completely.");Di2015NewLine                });Di2015NewLine            }Di2015NewLine            Console.ReadKey();Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21182945Di2015UniqueSeparatorself-executing
21182945Di2015UniqueSeparatorvar myMath = (function MyMath() {Di2015NewLine    this.Pi = 3.14;Di2015NewLine    this.R = 0;Di2015NewLineDi2015NewLine    var MyPrivateProp1 = 15;Di2015NewLineDi2015NewLine    this.MyCalcMethod = function() {Di2015NewLine      return R * MyPrivateProp1;Di2015NewLine    };Di2015NewLineDi2015NewLine    return this;Di2015NewLine})();Di2015NewLineDi2015NewLinemyMath.R = 5;Di2015NewLineDi2015NewLinevar x = myMath.Pi * myMath.R;Di2015NewLineDi2015NewLineconsole.log(myMath.Pi);Di2015NewLineconsole.log(myMath.R);Di2015NewLineconsole.log(myMath.MyPrivateProp1); //This is returned as Undefined because it is a Private Variable to the Object.Di2015NewLineconsole.log(myMath.MyCalcMethod());Di2015NewLineconsole.log(x);Di2015NewLine
21182945Di2015UniqueSeparatorreturn this
21182945Di2015UniqueSeparatormyMath
21183130Di2015UniqueSeparatorvar tableNames = context.MetadataWorkspace.GetItems(DataSpace.SSpace)Di2015NewLine                        .Select(t => t.Name)Di2015NewLine                        .ToList();Di2015NewLine
21183130Di2015UniqueSeparatorusing System.Data.Metadata.Edm;Di2015NewLineusing System.Data.Objects;Di2015NewLineusing System.Data.Entity.Infrastructure;Di2015NewLineDi2015NewLine...Di2015NewLineDi2015NewLineusing (dbcontext context = new TestContext())Di2015NewLine{Di2015NewLine   ObjectContext objContext = ((IObjectContextAdapter)context).ObjectContext;Di2015NewLine   MetadataWorkspace workspace = objContext.MetadataWorkspace;Di2015NewLine   IEnumerable<EntityType> tables = workspace.GetItems<EntityType>(DataSpace.SSpace);Di2015NewLineDi2015NewLine}Di2015NewLine
21183194Di2015UniqueSeparatorJsonConverterAttribute
21183194Di2015UniqueSeparatorJsonConverter
21183194Di2015UniqueSeparatorpublic class IntegerConverter : JsonConverterDi2015NewLine{Di2015NewLine  public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)Di2015NewLine  {Di2015NewLine    serializer.Serialize(writer, Convert.ToInt32(value));Di2015NewLine  }Di2015NewLineDi2015NewLine  public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)Di2015NewLine  {Di2015NewLine    throw new NotImplementedException();Di2015NewLine  }Di2015NewLineDi2015NewLine  public override bool CanConvert(Type objectType)Di2015NewLine  {Di2015NewLine    return objectType == typeof(string);Di2015NewLine  }Di2015NewLine}Di2015NewLineDi2015NewLineclass TestJsonDi2015NewLine{Di2015NewLine  public string Field1 { get; set; }Di2015NewLine  public string Field2 { get; set; }Di2015NewLine  public string Field3 { get; set; }Di2015NewLineDi2015NewLine  [JsonConverter(typeof(IntegerConverter))]Di2015NewLine  public string Field4 { get; set; }        Di2015NewLine}Di2015NewLine
21183194Di2015UniqueSeparatorJsonConvert
21183194Di2015UniqueSeparatorvar test = new TestJson {Field1 = "1", Field2 = "2", Field3 = "3", Field4 = "4"};Di2015NewLineDi2015NewLinevar jsonString = JsonConvert.SerializeObject(test);Di2015NewLine
21183213Di2015UniqueSeparator5
21183213Di2015UniqueSeparatorSeasons
21183213Di2015UniqueSeparatorSeasons season = (Seasons)5;Di2015NewLine
21183213Di2015UniqueSeparator.class public auto ansi sealed SeasonsDi2015NewLine    extends [mscorlib]System.EnumDi2015NewLine{Di2015NewLine    .field public static literal valuetype Foo.Seasons Autumn = int32(2)Di2015NewLine    .field public static literal valuetype Foo.Seasons Spring = int32(0)Di2015NewLine    .field public static literal valuetype Foo.Seasons Summer = int32(1)Di2015NewLine    .field public specialname rtspecialname int32 value__Di2015NewLine    .field public static literal valuetype Foo.Seasons Winter = int32(3)Di2015NewLine}Di2015NewLine
21183213Di2015UniqueSeparatorSeasons season = Seasons.Autumn;Di2015NewLineConsole.WriteLine(season);Di2015NewLine
21183213Di2015UniqueSeparator.locals init (Di2015NewLine    [0] valuetype Foo.Seasons seasons) // it's value type!Di2015NewLine L_0000: nop Di2015NewLine L_0001: ldc.i4.2 // here simple integer value 2 is loadedDi2015NewLine L_0002: stloc.0 Di2015NewLine L_0003: ldloc.0 Di2015NewLine L_0004: box Foo.Seasons Di2015NewLine L_0009: call void [mscorlib]System.Console::WriteLine(object)Di2015NewLine
21183213Di2015UniqueSeparatorEnum.GetValues
21183213Di2015UniqueSeparatorHashtable
21183213Di2015UniqueSeparatorfieldInfoHash
21183213Di2015UniqueSeparatorEnum
21183213Di2015UniqueSeparatorHashtable
21183213Di2015UniqueSeparatorHashEntry
21183213Di2015UniqueSeparatorulong
21183213Di2015UniqueSeparatorstring
21183213Di2015UniqueSeparatorEnum
21183213Di2015UniqueSeparatorGetNames
21183213Di2015UniqueSeparatorIdDefined
21183213Di2015UniqueSeparatorulong
21183213Di2015UniqueSeparatorEnum.ToObject
21183213Di2015UniqueSeparatorulong[] values = Enum.InternalGetValues(this);Di2015NewLineArray array = Array.UnsafeCreateInstance(this, values.Length);Di2015NewLinefor (int i = 0; i < values.Length; i++)Di2015NewLine{Di2015NewLine    object obj2 = Enum.ToObject(this, values[i]);Di2015NewLine    array.SetValue(obj2, i);Di2015NewLine}Di2015NewLinereturn array;Di2015NewLine
21183213Di2015UniqueSeparatorulong
21183290Di2015UniqueSeparatorWebApp.Start<Startup>(url);Di2015NewLine
21183290Di2015UniqueSeparatorclass StartupDi2015NewLine    {Di2015NewLine        public void Configuration(IAppBuilder app)Di2015NewLine        {Di2015NewLine            app.MapSignalR();Di2015NewLine        }Di2015NewLine    }Di2015NewLine
21183357Di2015UniqueSeparator"Ã¤pfel@domain.com"
21183357Di2015UniqueSeparatorCultureInvariant
21183357Di2015UniqueSeparatorConsole.Write(Regex.IsMatch("Ã¤pfel@domain.com", @"^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$", RegexOptions.CultureInvariant));
21183357Di2015UniqueSeparatortrue
21183357Di2015UniqueSeparatorinfo@Î¿Ï…Ï„Î¿Ï€Î¯Î±.Î´Ï€Î¸.gr
21183357Di2015UniqueSeparatorAbc\\@def@example.com
21183357Di2015UniqueSeparatorAbc\\@def@example.com
21183357Di2015UniqueSeparatortrue
21183490Di2015UniqueSeparatorSortedDictionary<TKey, TValue>
21183490Di2015UniqueSeparatorSystem.Collections.Generic
21183490Di2015UniqueSeparatorDictionary<TKey, TValue>
21183490Di2015UniqueSeparatorSystem.Collections.Generic
21183575Di2015UniqueSeparator    double val = 150.20;Di2015NewLine    double val1 = 30.50;Di2015NewLineDi2015NewLine    string[] temp1 = val.ToString().Split('.');Di2015NewLine    string[] temp2 = val1.ToString().Split('.');Di2015NewLine    TimeSpan ts1 = TimeSpan.FromHours(double.Parse(temp1[0])) + TimeSpan.FromMinutes(double.Parse(temp1[1] + "0"));Di2015NewLine    TimeSpan ts2 = TimeSpan.FromHours(double.Parse(temp2[0])) + TimeSpan.FromMinutes(double.Parse(temp2[1] + "0"));Di2015NewLineDi2015NewLine    TimeSpan ts = ts1.Subtract(ts2);Di2015NewLine    double totalHours = ts.TotalHours;Di2015NewLine    string[] temp = totalHours.ToString().Split('.');Di2015NewLine    Console.WriteLine(temp[0] + "." + double.Parse("0." + temp[1]) * 60);Di2015NewLine
21183759Di2015UniqueSeparatorvar MainClassObjects = context.MainClassObjectsDi2015NewLine.Include("FirstLevelObjects")Di2015NewLine.Include("FirstLevelObjects.SecondLevelObjects")Di2015NewLine.ToList();Di2015NewLine
21183759Di2015UniqueSeparatorvar MainClassObjects = context.MainClassObjectsDi2015NewLine.Include("FirstLevelObjects.SecondLevelObjectsA")Di2015NewLine.Include("FirstLevelObjects.SecondLevelObjectsB")Di2015NewLine.ToList();Di2015NewLine
21183855Di2015UniqueSeparator0x
21183855Di2015UniqueSeparator"0x01, 0x02, 0x03"
21183855Di2015UniqueSeparatorvar input = "0x01, 0x02, 0x03";Di2015NewLineDi2015NewLine// no validation whatsoeverDi2015NewLinevar array = inputDi2015NewLine    .Split(',')Di2015NewLine    .Select(i => i.Trim().Replace("0x", ""))Di2015NewLine    .Select(i => Convert.ToByte(i, 16))Di2015NewLine    .ToArray();Di2015NewLine
21183855Di2015UniqueSeparatorprivate static byte[] GetByteArrayFromHexString(string input)Di2015NewLine{Di2015NewLine    return inputDi2015NewLine        .Split(new[] { ',',' ','\\t' }, StringSplitOptions.RemoveEmptyEntries)Di2015NewLine        .Select(i => i.Trim().Replace("0x", ""))Di2015NewLine        .Select(i => Convert.ToByte(i, 16))Di2015NewLine        .ToArray();Di2015NewLine}Di2015NewLine
21183855Di2015UniqueSeparator// all these variants produce the same outputDi2015NewLineGetByteArrayFromHexString("0x01, 0x02, 0x03")  // --> new byte[] { 1, 2, 3 }Di2015NewLineGetByteArrayFromHexString("0x01 0x02 0x03")    // --> new byte[] { 1, 2, 3 }Di2015NewLineGetByteArrayFromHexString("01 02 03")          // --> new byte[] { 1, 2, 3 }Di2015NewLine
21183880Di2015UniqueSeparator#if DEBUGDi2015NewLine  bool DebugMode = true;Di2015NewLine#elseDi2015NewLine  bool DebugMode = false;Di2015NewLine#endifDi2015NewLine
21184017Di2015UniqueSeparatorAddressOf
21184017Di2015UniqueSeparatorPrivate Function PersonColumnImageGetter(object rowObject) As ObjectDi2015NewLine    Dim p As Person = DirectCast(rowObject, Person)Di2015NewLine    If "AEIOU".Contains(p.Name.Substring(0, 1)) ThenDi2015NewLine        Return 0Di2015NewLine    Else If p.Name.CompareTo("N") < 0 ThenDi2015NewLine        Return 1Di2015NewLine    ElseDi2015NewLine        Return 2Di2015NewLine    End IfDi2015NewLineEnd FunctionDi2015NewLine
21184017Di2015UniqueSeparatorthis
21184017Di2015UniqueSeparatorMe
21184017Di2015UniqueSeparatorMe.personColumn.ImageGetter = New ImageGetterDelegate(AddressOf PersonColumnImageGetter)Di2015NewLine
21184017Di2015UniqueSeparatorMe.personColumn.ImageGetter =  Function (object rowObject) As ObjectDi2015NewLine                                   Dim p As Person = DirectCast(rowObject, Person)Di2015NewLine                                   If "AEIOU".Contains(p.Name.Substring(0, 1)) ThenDi2015NewLine                                       Return 0Di2015NewLine                                   Else If p.Name.CompareTo("N") < 0 ThenDi2015NewLine                                       Return 1Di2015NewLine                                   ElseDi2015NewLine                                       Return 2Di2015NewLine                                   End IfDi2015NewLine                               End FunctionDi2015NewLine
21184055Di2015UniqueSeparatorXmlAttributeCollection
21184055Di2015UniqueSeparatorIEnumerable
21184055Di2015UniqueSeparatorIEnumerable<T>
21184055Di2015UniqueSeparatorvar enumAttr = from XmlAttribute attr in element.Attributes select attr;Di2015NewLine
21184055Di2015UniqueSeparatorvar enumAttr = from attr in element.Attributes.Cast<XmlAttribute>() select attr;Di2015NewLine
21184055Di2015UniqueSeparatorforeach (XmlAttribute data in enumAttr.Attributes)Di2015NewLine
21184348Di2015UniqueSeparatorroutes.MapRoute(Di2015NewLine    "Default",                                              Di2015NewLine    "{controller}/{action}/{id}",                           Di2015NewLine    new { controller = "Home", action = "Index", id = UrlParameter.Optional },Di2015NewLine    new { controller = "^(?!Embedded).+"}Di2015NewLine);Di2015NewLine
21184499Di2015UniqueSeparatorPath=/
21184499Di2015UniqueSeparatorCollectionView.CurrentItem
21184499Di2015UniqueSeparatorPath=.
21184499Di2015UniqueSeparatorPath
21184499Di2015UniqueSeparator<TextBlock Text="{Binding Path=., Converter=...}Di2015NewLine
21184499Di2015UniqueSeparator<TextBlock Text="{Binding Converter=...}Di2015NewLine
21184499Di2015UniqueSeparatorAmount
21184499Di2015UniqueSeparatorProduct.Price
21184499Di2015UniqueSeparatorMultiBinding
21184499Di2015UniqueSeparatorIMultiValueConverter
21184953Di2015UniqueSeparatorpublic void showMessage(string message, bool InLine)Di2015NewLine{Di2015NewLine    if (InLine)Di2015NewLine        messageBox.Items[messageBox.Items.Count-1] += message;Di2015NewLine    elseDi2015NewLine        messageBox.Items.Add(message);Di2015NewLine}Di2015NewLine
21185153Di2015UniqueSeparator    private void Window_Drop(object sender, DragEventArgs e) {Di2015NewLine        // Do something with dropped objectDi2015NewLine        //...Di2015NewLine        this.Dispatcher.BeginInvoke(new Action(() => {Di2015NewLine            var dlg = new DialogWindow();Di2015NewLine            dlg.Owner = this;Di2015NewLine            var result = dlg.ShowDialog();Di2015NewLine            // etc..Di2015NewLine        }));Di2015NewLine    }Di2015NewLine
21185339Di2015UniqueSeparatorpublic class MyClassDi2015NewLine{Di2015NewLine  public Int64 id_11 { get; set; }Di2015NewLinepublic Int64 countryid { get; set; }Di2015NewLinepublic string state { get; set; }Di2015NewLine}Di2015NewLine
21185339Di2015UniqueSeparator Ilist<MyClass> myclassList=new List<MyClass>();Di2015NewLine
21185339Di2015UniqueSeparatormyclassList.Add(new MyClass(){Di2015NewLine    id_11=ts.id_11,Di2015NewLine    countryid =ts.countryid,Di2015NewLine    state =ts.stateDi2015NewLine});Di2015NewLine
21185339Di2015UniqueSeparatorIList<MyClass>
21185339Di2015UniqueSeparatorfor(int i = 0; i < aa.Length; i++)Di2015NewLine{Di2015NewLine       var obj=(testing)aa[i]Di2015NewLine}Di2015NewLine
21185876Di2015UniqueSeparatorExpression<Function<t,bool>> predicate
21185876Di2015UniqueSeparatorFunc<t,bool> predicate
21185876Di2015UniqueSeparatorExpression<Func<t,bool>>
21186363Di2015UniqueSeparator<c1002>checked</c1002> Di2015NewLine
21186363Di2015UniqueSeparator<xs:element name="c1001" type="checkboxType" minOccurs="0"/>Di2015NewLine
21186392Di2015UniqueSeparatorCultureInfo
21186392Di2015UniqueSeparatorNumberFormatInfo.NumberDecimalSeparator
21186392Di2015UniqueSeparator,
21186392Di2015UniqueSeparator.
21186392Di2015UniqueSeparator123,22
21186392Di2015UniqueSeparatorstring s = "123,23";Di2015NewLinedecimal d = Convert.ToDecimal(s, CultureInfo.CurrentCulture); //123,23Di2015NewLine
21186392Di2015UniqueSeparator123.22
21186392Di2015UniqueSeparatorString.Replace
21186392Di2015UniqueSeparator,
21186392Di2015UniqueSeparator.
21186392Di2015UniqueSeparatorstring s = "123.23";Di2015NewLineif(s.Contains('.'))Di2015NewLine   s = s.Replace('.', ',');Di2015NewLinedecimal d = Convert.ToDecimal(s, CultureInfo.CurrentCulture); //123,23Di2015NewLine
21186405Di2015UniqueSeparatorpublic Something()Di2015NewLine{Di2015NewLine    someObject = new SomeObject();  //let's say this takes 350msDi2015NewLine}Di2015NewLineDi2015NewLinepublic byte[] DoIt(byte[] bytes)Di2015NewLine{Di2015NewLine    return someObject.ComputeHash(bytes);  //let's say this takes 3msDi2015NewLine}Di2015NewLine
21186405Di2015UniqueSeparatorprivate void doSomething()Di2015NewLine{Di2015NewLine    for(int i = 0; i < 100000; i++) { Di2015NewLine      someList.Add(something.DoIt(someBytes)); //this will take 5 minutesDi2015NewLine    }  // but if someObject is created and freed in the loop it will takeDi2015NewLine}      // almost ten hours!Di2015NewLine
21186405Di2015UniqueSeparatorSomething
21186405Di2015UniqueSeparatorsomeObject
21186405Di2015UniqueSeparatorSomething
21186498Di2015UniqueSeparatorDate
21186498Di2015UniqueSeparatorvar result = from device inDi2015NewLine                 (Di2015NewLine                     from d in DevicesRepository.GetAll()Di2015NewLine                     select new Di2015NewLine                     { Di2015NewLine                         Device = d, Di2015NewLine                         AddedDate = EntityFunctions.TruncateTime(d.Added) Di2015NewLine                     }Di2015NewLine                 )Di2015NewLine             orderby device.AddedDateDi2015NewLine             group device by device.AddedDate into gDi2015NewLine             select newDi2015NewLine             {Di2015NewLine                 Date = g.Key,Di2015NewLine                 Count = g.Count()Di2015NewLine             };Di2015NewLine
21186522Di2015UniqueSeparatorclass
21186522Di2015UniqueSeparatorstruct
21186522Di2015UniqueSeparatorstruct
21186522Di2015UniqueSeparatorstruct
21186522Di2015UniqueSeparatorclass
21186522Di2015UniqueSeparatorclass
21186522Di2015UniqueSeparatorstruct
21186650Di2015UniqueSeparatorint I
21186650Di2015UniqueSeparatori
21186650Di2015UniqueSeparatory
21186650Di2015UniqueSeparatorstring[] x={ "A", "B", "C", "D", "E", "F", "G" };Di2015NewLinestring[] y=new string[number];Di2015NewLineDi2015NewLinefor(int i=0;i<number;i++)Di2015NewLine{Di2015NewLine    y[i] = x[i];Di2015NewLine}Di2015NewLine
21186650Di2015UniqueSeparatornumber
21186650Di2015UniqueSeparator3
21186671Di2015UniqueSeparatorApp.xaml.cs
21186671Di2015UniqueSeparatorpublic static bool IsInternetAvailableDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        var profiles = NetworkInformation.GetConnectionProfiles();Di2015NewLine        var internetProfile = NetworkInformation.GetInternetConnectionProfile();Di2015NewLine        return profiles.Any(s => s.GetNetworkConnectivityLevel() == NetworkConnectivityLevel.InternetAccess)Di2015NewLine            || (internetProfile != nullDi2015NewLine                    && internetProfile.GetNetworkConnectivityLevel() == NetworkConnectivityLevel.InternetAccess);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineif(App.IsInternetAvailable)Di2015NewLine{Di2015NewLine    //Do operation of Bing mapDi2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    //Show message dialogDi2015NewLine}Di2015NewLine
21186805Di2015UniqueSeparatorB b = new B("From A");Di2015NewLine
21186994Di2015UniqueSeparatorcount++
21186994Di2015UniqueSeparator++count
21186994Di2015UniqueSeparatorcount++
21186994Di2015UniqueSeparator++count
21187024Di2015UniqueSeparatorprogress.Report(new CalcProgressInfo(i,Di2015NewLine    string.Format("Calculation is in progress now. - {0}/{1}", i, count)));Di2015NewLine
21187024Di2015UniqueSeparatorif (i % 100 == 0)Di2015NewLine{Di2015NewLine    progress.Report(new CalcProgressInfo(i,Di2015NewLine        string.Format("Calculation is in progress now. - {0}/{1}", i, count)));Di2015NewLine}Di2015NewLine
21187024Di2015UniqueSeparator100
21187024Di2015UniqueSeparatorDispatcher
21187024Di2015UniqueSeparatorProgress<T>
21187024Di2015UniqueSeparatorvar progress = new Progress<CalcProgressInfo>(info =>Di2015NewLine{Di2015NewLine    CurrentCalcCount = info.CurrentCount;Di2015NewLine    ProgressText = info.Message;Di2015NewLine});Di2015NewLine
21187051Di2015UniqueSeparatorDateTime.Parse("2014-01-17T09:59:24.000Z")
21187051Di2015UniqueSeparator2008-11-01T19:35:00.0000000Z Di2015NewLineDi2015NewLine2008-11-01T19:35:00.0000000-07:00Di2015NewLine
21187130Di2015UniqueSeparatorFirstOrDefault
21187130Di2015UniqueSeparatorSelect
21187130Di2015UniqueSeparatorvar user = context.DbUsersDi2015NewLine                  .Where(u => u.u_LoginName == id)Di2015NewLine                  .Select(u => new { u.u_Name, u.u_Email })Di2015NewLine                  .FirstOrDefault(); // query is executed hereDi2015NewLineDi2015NewLinestring name = user.u_Name; // user is anonymous objectDi2015NewLinestring email = user.u_Email;Di2015NewLine
21187130Di2015UniqueSeparator SELECT TOP 1 u_Name, u_Email FROM DbUsersDi2015NewLine WHERE u_LoginName = @idDi2015NewLine
21187130Di2015UniqueSeparatorTOP 1
21187130Di2015UniqueSeparatorvar query = context.DbUsersDi2015NewLine                   .Where(u => u.u_LoginName == id)Di2015NewLine                   .Select(u => new { u.u_Name, u.u_Email }); Di2015NewLineDi2015NewLine// query is defined but not executed yetDi2015NewLineforeach (var user in query) // executed nowDi2015NewLine{Di2015NewLine   //Stuff HereDi2015NewLine}Di2015NewLine
21187130Di2015UniqueSeparatorDbUsers user = context.DbUsersDi2015NewLine                      .Where(u => u.u_LoginName == id)Di2015NewLine                      .FirstOrDefault(); // query is executed hereDi2015NewLineDi2015NewLinestring name = user.u_Name; // user is DbUsers entity with all fields mappedDi2015NewLinestring email = user.u_Email;    Di2015NewLine
21187130Di2015UniqueSeparator SELECT TOP 1 u_LoginName, u_Name, u_Email /* etc */ FROM DbUsersDi2015NewLine WHERE u_LoginName = @idDi2015NewLine
21187164Di2015UniqueSeparatorCREATE TABLE Device ( Id, Name, ManufacturerId )Di2015NewLine
21187164Di2015UniqueSeparatorCREATE TABLE Manufacturer ( Id, Name )Di2015NewLine
21187168Di2015UniqueSeparator{{1|2}|{3|4}} - {{5|6}|{7|8}}
21187168Di2015UniqueSeparator{1|2|3|4} - {5|6|7|8}
21187204Di2015UniqueSeparator double a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2)Di2015NewLine            + Math.Cos(prevLat) * Math.Sin(dLong / 2) * Math.Sin(dLong / 2);Di2015NewLine
21187204Di2015UniqueSeparatordouble c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));Di2015NewLine
21187204Di2015UniqueSeparatorpublic static double Calculate(double sLatitude, double sLongitude, double eLatitude, double eLongitude)Di2015NewLine        {Di2015NewLine            var sLatitudeRadians = sLatitude * (Math.PI / 180.0);Di2015NewLine            var sLongitudeRadians = sLongitude * (Math.PI / 180.0);Di2015NewLine            var eLatitudeRadians = eLatitude * (Math.PI / 180.0);Di2015NewLine            var eLongitudeRadians = eLongitude * (Math.PI / 180.0);Di2015NewLine            var dLongitude = eLongitudeRadians - sLongitudeRadians;Di2015NewLine            var dLatitude = eLatitudeRadians - sLatitudeRadians;Di2015NewLine            var result1 = Math.Pow(Math.Sin(dLatitude / 2.0), 2.0) + Math.Cos(sLatitudeRadians) * Math.Cos(eLatitudeRadians) * Math.Pow(Math.Sin(dLongitude / 2.0), 2.0);Di2015NewLine            var result2 = 6371 * 2.0 * Math.Atan2(Math.Sqrt(result1), Math.Sqrt(1.0 - result1));Di2015NewLine            return result2;Di2015NewLine        }Di2015NewLine//whereDi2015NewLine//sLatitude=PreviousPointLatitudeDi2015NewLine//sLongitude=PreviousPointLongitudeDi2015NewLineDi2015NewLine//eLatitude=CurrentPointLatitudeDi2015NewLine//elongitude=CurrentPointLongitudeDi2015NewLine
21187229Di2015UniqueSeparatorViewBox
21187229Di2015UniqueSeparatorCanvas
21187229Di2015UniqueSeparatorViewBox
21187229Di2015UniqueSeparatorCanvas
21187229Di2015UniqueSeparatorHeight
21187229Di2015UniqueSeparatorWidth
21187229Di2015UniqueSeparatorTextBlock
21187229Di2015UniqueSeparatorCanvas
21187229Di2015UniqueSeparatorVerticalAlignment
21187229Di2015UniqueSeparatorViewBox
21187229Di2015UniqueSeparator<Viewbox VerticalAlignment="Top">Di2015NewLine    ...Di2015NewLine</Viewbox>Di2015NewLine
21187229Di2015UniqueSeparatorHeight
21187487Di2015UniqueSeparatornew Point(X,Y)
21187487Di2015UniqueSeparatore.Graphics.DrawLine(new Pen(Color.Gray, 1), new Point(22, 10), new Point(22, 1100));Di2015NewLine
21187488Di2015UniqueSeparator    private static void Main(string[] args)Di2015NewLine    {Di2015NewLine        using (Document doc = new Document(PageSize.A4, 36, 36, 36, 36))Di2015NewLine        {Di2015NewLine            using (PdfWriter pw = PdfWriter.GetInstance(doc, new FileStream("c:\\\\ImageTest.pdf", FileMode.Create)))Di2015NewLine            {Di2015NewLine                pw.SetTagged();Di2015NewLine                pw.UserProperties = true;Di2015NewLine                doc.Open();Di2015NewLine                pw.PdfVersion = PdfWriter.VERSION_1_7;Di2015NewLine                Image img = Image.GetInstance(@"c:\\images\\WA.png");Di2015NewLine                img.SetAbsolutePosition(36, 592);Di2015NewLine                img.Alt = "Alt Text for Image!";Di2015NewLine                doc.Add(img);Di2015NewLine                doc.Close();Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine
21187516Di2015UniqueSeparatorasync'/
21187516Di2015UniqueSeparatorkeywords available to you. With your current little example app, you are going to run into trouble if you try to update your UI from
21187516Di2015UniqueSeparatoror
21187516Di2015UniqueSeparator//notice the async keywords in the method declarationsDi2015NewLineprivate async void Threads_Button_Click_1(object sender, RoutedEventArgs e)Di2015NewLine{Di2015NewLine    List<Task> tasks = new List<Task>();Di2015NewLine   tasks.Add(doSomething1());Di2015NewLine   tasks.Add(doSomething2());Di2015NewLine   //this will wait until both doSomething1() and doSomething2() are done in a non-blocking fashionDi2015NewLine    await Task.WhenAll(tasks);Di2015NewLine}Di2015NewLineprivate async Task doSomething1()Di2015NewLine{Di2015NewLine   //you can now update UI controls hereDi2015NewLine   Console.WriteLine("Starting doSomething1");Di2015NewLine   await Task.Delay(3000);Di2015NewLine   Console.WriteLine("Finishing doSomething1");Di2015NewLine}Di2015NewLineprivate async Task doSomething2()Di2015NewLine{Di2015NewLine   //you can now update UI controls hereDi2015NewLine   Console.WriteLine("Starting doSomething2");Di2015NewLine   await Task.Delay(6000);Di2015NewLine   Console.WriteLine("Finishing doSomething2");Di2015NewLine}Di2015NewLine
21187516Di2015UniqueSeparatorasync
21187516Di2015UniqueSeparatorawait
21187777Di2015UniqueSeparatorpublic void GiveWheel(Wheel myWheel){Di2015NewLine    Sim.DLL_GiveWheelToCar(this.nativeCarObject, myWheel);Di2015NewLine}Di2015NewLine
21187777Di2015UniqueSeparatormyWheel
21187777Di2015UniqueSeparatorWheel
21187777Di2015UniqueSeparatorIntPtr
21187777Di2015UniqueSeparatorWheel
21187777Di2015UniqueSeparatornativeCarObject
21187777Di2015UniqueSeparatornativeCarObject
21187777Di2015UniqueSeparatorWheel
21187777Di2015UniqueSeparatornativeWheelObject
21187777Di2015UniqueSeparatorcdecl
21187777Di2015UniqueSeparatorpublic class CarDi2015NewLine{Di2015NewLine    public readonly IntPtr nativeCarObject = Sim.DLL_AddCar();Di2015NewLineDi2015NewLine    public void GiveWheel(Wheel myWheel)Di2015NewLine    {Di2015NewLine        Sim.DLL_GiveWheelToCar(this.nativeCarObject, myWheel.nativeWheelObject);Di2015NewLine    }    Di2015NewLine}Di2015NewLineDi2015NewLinepublic class WheelDi2015NewLine{Di2015NewLine    public readonly IntPtr nativeWheelObject = Sim.DLL_AddWheel();Di2015NewLine}Di2015NewLineDi2015NewLineinternal class SimDi2015NewLine{Di2015NewLine    public const string pluginName = "MyDLL";Di2015NewLineDi2015NewLine    [DllImport(pluginName, CallingConvention=CallingConvention.Cdecl)]Di2015NewLine    public static extern IntPtr DLL_AddCar();Di2015NewLine    [DllImport(pluginName, CallingConvention = CallingConvention.Cdecl)]Di2015NewLine    public static extern IntPtr DLL_AddWheel();Di2015NewLine    [DllImport(pluginName, CallingConvention = CallingConvention.Cdecl)]Di2015NewLine    public static extern void DLL_GiveWheelToCar(IntPtr car, IntPtr wheel);Di2015NewLine}Di2015NewLine
21187804Di2015UniqueSeparatorList
21187804Di2015UniqueSeparatorC#
21187804Di2015UniqueSeparatorclass List  implements Iterator {Di2015NewLine   private $position = 0;Di2015NewLine   private $array = array();  Di2015NewLineDi2015NewLinepublic function __construct(array $list) { // array of string or objects or assoc.arrayDi2015NewLine    $this->array = $list;Di2015NewLine    $this->position = 0;Di2015NewLine}Di2015NewLineDi2015NewLinepublic add($item){Di2015NewLine     $this->array[] = $item;   Di2015NewLine} Di2015NewLineDi2015NewLinepublic delete($position){Di2015NewLine     unset($this->array[$position]);Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLinefunction rewind() {Di2015NewLine    $this->position = 0;Di2015NewLine}Di2015NewLineDi2015NewLinefunction current() {Di2015NewLine    return $this->array[$this->position];Di2015NewLine}Di2015NewLineDi2015NewLinefunction key() {Di2015NewLine    return $this->position;Di2015NewLine}Di2015NewLineDi2015NewLinefunction next() {Di2015NewLine     ++$this->position;Di2015NewLine}   Di2015NewLineDi2015NewLineDi2015NewLine}Di2015NewLine
21187806Di2015UniqueSeparator try this     Di2015NewLineDi2015NewLine typeof(TestContext).GetProperties().Select(n => n.PropertyType) // here we get all properties of contect classDi2015NewLine.Where(n => n.Name.Contais("DbSet") && n.IsGenericType) // here we select only DBSet collectionsDi2015NewLine.Select(n=>n.GetGenericArgumenrs()[0])//Here we access to TEntiy type in DbSet<TEntity> Di2015NewLine.Where(n => n.GetCustomAttributes(true).OfType<DoNotAudit>().FirstOrDefault()== null) // here we check for attribute existenceDi2015NewLine .OrderBy(n=>n.Name) // Here is sorting by NameDi2015NewLine.Select(n => n.Name).ToList(); // here we select the names of entity classesDi2015NewLine
21187917Di2015UniqueSeparatorRandom
21187917Di2015UniqueSeparatortimer1_Tick
21187917Di2015UniqueSeparatorRandom random = new Random(); Di2015NewLineprivate void timer1_Tick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine        int X = random.Next(0, 1230); Di2015NewLine        int y = X; Di2015NewLine        label2.Location = new Point(X, 5);Di2015NewLine        label3.Location = new Point(X, 5);Di2015NewLine        for (int i = 5; i <= 470; i++)Di2015NewLine        {Di2015NewLine            label2.Location = new Point(y, i);Di2015NewLine            label3.Location = new Point(y, i);Di2015NewLine            Thread.Sleep(1);Di2015NewLine        }Di2015NewLine}Di2015NewLine
21187968Di2015UniqueSeparatorbtn1.PreviewKeyDown += new KeyEventHandler(btn1_KeyDown);Di2015NewLinebtn2.PreviewKeyDown += new KeyEventHandler(btn2_KeyDown);Di2015NewLine
21187968Di2015UniqueSeparatorprivate void btn1_KeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine    if (e.Key == Key.Tab && (Keyboard.IsKeyDown(Key.LeftShift) || Keyboard.IsKeyDown(Key.RightShift)))Di2015NewLine    {Di2015NewLine        //do what you want when shift+tab is pressed.Di2015NewLine        e.Handled = true;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        btn2.Focus();Di2015NewLine        e.Handled = true;Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLineDi2015NewLineprivate void btn2_KeyDown(object sender, KeyEventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine    if (e.Key == Key.Tab && (Keyboard.IsKeyDown(Key.LeftShift) || Keyboard.IsKeyDown(Key.RightShift)))Di2015NewLine    {Di2015NewLine        //do what you want when shift+tab is pressed.Di2015NewLine        e.Handled = true;Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        btn1.Focus();Di2015NewLine        e.Handled = true;Di2015NewLine    }Di2015NewLineDi2015NewLine}Di2015NewLine
21188107Di2015UniqueSeparator@for (var i = 0; i < 4; i++)Di2015NewLine{Di2015NewLine    <div>Di2015NewLine        @switch (i)Di2015NewLine        {Di2015NewLine            case 0: Di2015NewLine                     <div>Custom Value 1</div>Di2015NewLine                     break;Di2015NewLine            case 1: Di2015NewLine                     <span>Custom Value 2</span>Di2015NewLine                     break;Di2015NewLine        }Di2015NewLine    </div>Di2015NewLine}Di2015NewLine
21188118Di2015UniqueSeparator_progress.Show();Di2015NewLine
21188118Di2015UniqueSeparator_progress.ShowDialog();Di2015NewLine
21188342Di2015UniqueSeparatorprivate void radGridView1_CellFormatting(object sender, CellFormattingEventArgs e)Di2015NewLine    {Di2015NewLine        bool checkedRow = Convert.ToBoolean(e.Row.Cells["hereThenameOfYourCheckboxcolumn"].Value);Di2015NewLine        e.CellElement.NumberOfColors = 1;Di2015NewLine        e.CellElement.DrawFill = false;Di2015NewLine        if (checkedRow)Di2015NewLine        {Di2015NewLine            e.CellElement.ForeColor = Color.Green;Di2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            e.CellElement.ForeColor = Color.Red;Di2015NewLine        }Di2015NewLine    }Di2015NewLine
21188554Di2015UniqueSeparatorlong
21188554Di2015UniqueSeparatorulong
21188554Di2015UniqueSeparatorlong
21188554Di2015UniqueSeparatorulong
21188554Di2015UniqueSeparatorlong l = (long) ((ulong) number) >> 2;Di2015NewLine
21188554Di2015UniqueSeparatorulong ulongNumber = (ulong)number;Di2015NewLinelong longNumber = (long)ulongNumber;Di2015NewLinelong shiftedlongNumber = longNumber >> 2;Di2015NewLine
21188554Di2015UniqueSeparatornumber
21188554Di2015UniqueSeparator-2147483648L
21188554Di2015UniqueSeparator536870912
21188554Di2015UniqueSeparatorlong l = (long) (((ulong) number) >> 2);Di2015NewLine
21188554Di2015UniqueSeparatorulong ulongNumber = (ulong)number;Di2015NewLineulong shiftedulongNumber = ulongNumber >> 2;Di2015NewLinelong longShiftedNumber = (long)shiftedulongNumber;Di2015NewLine
21188554Di2015UniqueSeparatornumber
21188554Di2015UniqueSeparator-2147483648L
21188554Di2015UniqueSeparator4611686017890516992
21188554Di2015UniqueSeparatorlong l = (long) ((ulong) number >> 2);Di2015NewLine
21188583Di2015UniqueSeparatorImageSource="pack://application:,,,/my_assembly;component/Resources/your_image.pâ€Œâ€‹ng"Di2015NewLine
21188706Di2015UniqueSeparatorExecuteScalar
21188706Di2015UniqueSeparatorint nShoppingCart = cmdInsert.ExecuteNonQuery();Di2015NewLine
21188706Di2015UniqueSeparatorTotalAmount
21188706Di2015UniqueSeparator"'" + DbNull.Value + "'"Di2015NewLine
21188706Di2015UniqueSeparator'NULL'
21188706Di2015UniqueSeparatorSCOPE-IDENTITY()
21188766Di2015UniqueSeparatorpublic partial class PrimaryEntityDi2015NewLine{Di2015NewLine    public PrimaryEntity()Di2015NewLine    {Di2015NewLine        ID = Guid.NewGuid();Di2015NewLine    }Di2015NewLine    [Key]Di2015NewLine    public Guid ID { get; set; }Di2015NewLine    public string Name { get; set; }Di2015NewLine    public string Value { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic partial class DependentEntityDi2015NewLine{Di2015NewLine    public DependentEntity()Di2015NewLine    {Di2015NewLine        ID = Guid.NewGuid();Di2015NewLine    }Di2015NewLine    [Key]Di2015NewLine    public Guid ID { get; set; }Di2015NewLine    public string Name { get; set; }Di2015NewLineDi2015NewLine    public Guid CurrentPrimaryEntityId { get; set; }Di2015NewLine    public virtual PrimaryEntity CurrentPrimaryEntity { get; set; } Di2015NewLine}Di2015NewLine    // override this in DataContextDi2015NewLine    protected override void OnModelCreating(DbModelBuilder modelBuilder)Di2015NewLine    {Di2015NewLine        modelBuilder.Entity<DependentEntity>().HasRequired(a => a.CurrentPrimaryEntity).WithMany().HasForeignKey(a => a.CurrentPrimaryEntityId);Di2015NewLine        base.OnModelCreating(modelBuilder);Di2015NewLine    }Di2015NewLineDi2015NewLine protected override void Seed(MyDataComtext db)Di2015NewLine    {Di2015NewLine        // here is a restriction that FK must be uniqueDi2015NewLine        db.Database.ExecuteSqlCommand("ALTER TABLE dbo.[DependentEntity] ADD CONSTRAINT uc_Dependent UNIQUE(CurrentPrimaryEntityId)");Di2015NewLineDi2015NewLine    }Di2015NewLineDi2015NewLinevar primary = new PrimaryEntity();Di2015NewLine db.PrimaryEntity.Add(PrimaryEntity);Di2015NewLinevar dependent = new DependentEntity();Di2015NewLinedependent.CurrentPrimaryEntity = primary;  Di2015NewLine  db.DependentEntity.Add(dependent);Di2015NewLine  db.SaveChanges();Di2015NewLine
21188899Di2015UniqueSeparatorawait
21188899Di2015UniqueSeparatorTaskCompletionSource<T>
21188899Di2015UniqueSeparatorprivate Task NavigateAsync(string url)Di2015NewLine{Di2015NewLine  var tcs = new TaskCompletionSource<object>();Di2015NewLine  LoadCompletedEventHandler subscription = null;Di2015NewLine  subscription = (_, __) =>Di2015NewLine  {Di2015NewLine    browser.LoadCompleted -= subscription;Di2015NewLine    tcs.TrySetResult(null);Di2015NewLine  };Di2015NewLine  browser.LoadCompleted += subscription;Di2015NewLine  browser.Navigate(url);Di2015NewLine  return tcs.Task;Di2015NewLine}Di2015NewLineDi2015NewLineprivate async void ButtonClickEvent( object sender, EventArgs e)Di2015NewLine{Di2015NewLine  await NavigateAsync(URL);Di2015NewLine  browser.FindElementByID("User").Text = "abc";Di2015NewLine}Di2015NewLine
21189025Di2015UniqueSeparator/
21189025Di2015UniqueSeparatorpriceField
21189025Di2015UniqueSeparatorpriceField
21189025Di2015UniqueSeparator(double)priceField / 100 * percentField;Di2015NewLine
21189025Di2015UniqueSeparatorresult
21189025Di2015UniqueSeparatorint
21189025Di2015UniqueSeparatorresult = (int)((double)priceField / 100 * percentField);Di2015NewLine
21189025Di2015UniqueSeparatorresult
21189025Di2015UniqueSeparatordouble
21189085Di2015UniqueSeparatorpublic Bitmap overlayBitmapDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        // Build bitmap overlayDi2015NewLine        return overlayBitmapOutput;Di2015NewLine    }Di2015NewLine...Di2015NewLine}Di2015NewLine
21189123Di2015UniqueSeparator<DataGrid ColumnWidth = "*"/>Di2015NewLine
21189123Di2015UniqueSeparator<DataGridTextColumn Width="*" />Di2015NewLine
21189123Di2015UniqueSeparatorvar columnDetails = new DataGridTextColumnDi2015NewLine{Di2015NewLine    Header = "Details",Di2015NewLine    CanUserSort = false,Di2015NewLine    CanUserResize = false,Di2015NewLine    Binding = new Binding("Details"),Di2015NewLine    Width = new DataGridLength(1.0, DataGridLengthUnitType.Star)Di2015NewLine
21189482Di2015UniqueSeparatorstring connectionString = myconnectionstringReadedFromFile;Di2015NewLineDi2015NewLine//Di2015NewLine// In a using statement, acquire the SqlConnection as a resource.Di2015NewLine//Di2015NewLineusing (SqlConnection con = new SqlConnection(myconnectionstringReadedFromFile))Di2015NewLine{Di2015NewLine    //Di2015NewLine    // Open the SqlConnection.Di2015NewLine    //Di2015NewLine    con.Open();Di2015NewLineDi2015NewLine    //.... your stuffDi2015NewLineDi2015NewLine}Di2015NewLine
21189762Di2015UniqueSeparatorType.IsAssignableFrom
21189762Di2015UniqueSeparatorif (typeof(ICustomItem).IsAssignableFrom(typeof(T)))Di2015NewLine
21189915Di2015UniqueSeparatorfile.*
21189915Di2015UniqueSeparatorfile
21189915Di2015UniqueSeparator*
21189915Di2015UniqueSeparatorfile
21189915Di2015UniqueSeparatorfile.txt
21189983Di2015UniqueSeparatorpublic class ModelWrapper{Di2015NewLineDi2015NewLine      public object Model { get; set}Di2015NewLine}Di2015NewLine
21190109Di2015UniqueSeparatorDescendants
21190109Di2015UniqueSeparatorforeach (XNode node in xdoc.Descendants())Di2015NewLine{Di2015NewLine     Console.WriteLine("Node: " + node);Di2015NewLine}Di2015NewLine
21190193Di2015UniqueSeparator^(?=.*(?:best [0-9]|[0-9] best)).*$Di2015NewLine
21190193Di2015UniqueSeparator^(?=.*(best [0-9]|[0-9] best)).*$Di2015NewLine
21190193Di2015UniqueSeparatorbest [0-9]
21190193Di2015UniqueSeparator[0-9] best
21190325Di2015UniqueSeparatorDictionary<int, int> holiday = new Dictionary<int, int>();Di2015NewLineDi2015NewLineholiday[2013] = 5;Di2015NewLineholiday[2014] = 20;Di2015NewLine
21190325Di2015UniqueSeparatorint
21190378Di2015UniqueSeparatorDialogResult
21190378Di2015UniqueSeparatorDialogResult
21190408Di2015UniqueSeparator/com/TextEntry
21190408Di2015UniqueSeparator   meta.SetQuery("/com/TextEntry", "xxx".ToCharArray());Di2015NewLine
21190601Di2015UniqueSeparatorBatchJoinBlock
21190601Di2015UniqueSeparatorBatchJoinBlock
21190601Di2015UniqueSeparatorBatchBlock
21190601Di2015UniqueSeparatorJoinBlock
21190601Di2015UniqueSeparatorBatchJoinBlock
21190676Di2015UniqueSeparatorDateTime
21190676Di2015UniqueSeparatorDateTime.MinValue
21190676Di2015UniqueSeparatoritem.EarlyDod
21190676Di2015UniqueSeparatorDateTime?
21190676Di2015UniqueSeparatoritem.EarlyDod != nullDi2015NewLine
21190676Di2015UniqueSeparatoritem.EarlyDod != DBNull.ValueDi2015NewLine
21190676Di2015UniqueSeparatoritem.EarlyDod != DateTime.MinValue Di2015NewLine
21190837Di2015UniqueSeparatorfor (int i = 0; i < number; i++)Di2015NewLine{Di2015NewLine    dt.Columns.RemoveAt(0);Di2015NewLine}Di2015NewLine
21190919Di2015UniqueSeparatorpictureBox1.Image = bitmap;Di2015NewLinepictureBox1.Image.Save("c:\\\\image\\\\image1.jpg");Di2015NewLine
21190919Di2015UniqueSeparatorvoid cam_NewFrame(object sender, NewFrameEventArgs eventArgs)Di2015NewLine{Di2015NewLine    bitmap = (Bitmap)eventArgs.Frame.Clone();Di2015NewLine    pictureBox1.Image = bitmap;Di2015NewLineDi2015NewLine         tryDi2015NewLine         {Di2015NewLine             this.Invoke((MethodInvoker)delegateDi2015NewLine             {Di2015NewLine                 //saves image on its threadDi2015NewLineDi2015NewLine                 pictureBox1.Image.Save("c:\\\\image\\\\image1.jpg");Di2015NewLineDi2015NewLine             });Di2015NewLine         }Di2015NewLine         catch (Exception ex)Di2015NewLine         {Di2015NewLine             MessageBox.Show(""+ex);Di2015NewLine         }Di2015NewLine }Di2015NewLine
21190929Di2015UniqueSeparatorid = gr.Select(s => s.ID)
21190929Di2015UniqueSeparator.GroupBy(m => new{m.ID, m.Name})
21190986Di2015UniqueSeparator **The .aspx files goes here :**    Di2015NewLine
21190986Di2015UniqueSeparator<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">Di2015NewLineDi2015NewLine<html xmlns="http://www.w3.org/1999/xhtml">Di2015NewLine<head runat="server">Di2015NewLine<title></title>Di2015NewLine<style type="text/css">Di2015NewLine    #form1Di2015NewLine    {Di2015NewLine        height: 199px;Di2015NewLine    }Di2015NewLine</style>Di2015NewLine</head>Di2015NewLine<body>Di2015NewLine<form id="form1" runat="server">Di2015NewLine<div>Di2015NewLine    <asp:ScriptManager ID="ScriptManager1" runat="server">Di2015NewLine    </asp:ScriptManager>Di2015NewLine    <br />Di2015NewLine    <asp:Button ID="Button2" runat="server" onclick="Button2_Click" Di2015NewLine        Text="Outside Update Button (+2)" />Di2015NewLine    <br />Di2015NewLine    <asp:UpdatePanel ID="UpdatePanel1" runat="server">Di2015NewLine        <ContentTemplate>Di2015NewLine             <asp:Button ID="Button1" runat="server" onclick="Button1_Click" Di2015NewLine                Text="Inside Update  Button (+1)" />Di2015NewLine            <br />Di2015NewLine             Di2015NewLine            <asp:Label ID="Label1" runat="server" Font-Bold="True" Text="Label"></asp:Label>Di2015NewLine             <br />  Di2015NewLine            <asp:Label ID="Label2" runat="server" style="font-weight: 700" Text="Label"></asp:Label>Di2015NewLine            <br />  <asp:PlaceHolder ID="PlaceHolder1" runat="server"></asp:PlaceHolder>Di2015NewLine            <br />Di2015NewLine             Di2015NewLine            <br />Di2015NewLine             Di2015NewLine            <br />Di2015NewLine        </ContentTemplate>Di2015NewLine        <Triggers>Di2015NewLine            <asp:AsyncPostBackTrigger ControlID="Button2" EventName="Click" />Di2015NewLine        </Triggers>Di2015NewLineDi2015NewLine    </asp:UpdatePanel>Di2015NewLine</div>Di2015NewLine</form>Di2015NewLine
21190986Di2015UniqueSeparator**The .cs file goes here :**Di2015NewLineDi2015NewLineusing System;Di2015NewLineusing System.Collections.Generic;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Web;Di2015NewLineusing System.Web.UI;Di2015NewLineusing System.Web.UI.WebControls;Di2015NewLineDi2015NewLinepublic partial class Test_ankit_27Oct_Research_step_by_step : System.Web.UI.PageDi2015NewLine{Di2015NewLine    static int start_number_rows = 1; //initial counter default row as 1Di2015NewLine    static int counter = start_number_rows;Di2015NewLine    protected void Page_Init(object sender, EventArgs e)Di2015NewLine   {Di2015NewLine       ViewState["RowsCount"] = start_number_rows;Di2015NewLine       Label1.Text = "Total Rows : "+counter.ToString();Di2015NewLineDi2015NewLine  }Di2015NewLineprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    if (!IsPostBack)Di2015NewLine    {Di2015NewLine        generate_table();Di2015NewLine    }Di2015NewLine    elseDi2015NewLine    {Di2015NewLine        //the below part of the code is required to distinguish between autopost back of textbox Di2015NewLine        //and the autopost back of button controlsDi2015NewLineDi2015NewLine        string CtrlID = string.Empty;Di2015NewLine        if (Request.Form["__EVENTTARGET"] != null &&Di2015NewLine                 Request.Form["__EVENTTARGET"] != string.Empty)Di2015NewLine        {Di2015NewLineDi2015NewLine             generate_table();Di2015NewLine             // for all postbacks except external and internal clicksDi2015NewLineDi2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLineDi2015NewLineDi2015NewLine            //to check which button or image button click caused the postbackDi2015NewLine            foreach (string controlID in Request.Form)Di2015NewLine            {Di2015NewLine                Control objControl = Page.FindControl(controlID);Di2015NewLine                if (objControl is Button)Di2015NewLine                {Di2015NewLine                    CtrlID = objControl.ID;Di2015NewLine                    if (CtrlID == "Button1")Di2015NewLine                    {Di2015NewLineDi2015NewLine                        //now the call will go to Button1_Click functionDi2015NewLineDi2015NewLineDi2015NewLine                    }Di2015NewLine                    if (CtrlID == "Button2")Di2015NewLine                    {Di2015NewLineDi2015NewLine                        //now the call will go to Button2_Click functionDi2015NewLineDi2015NewLineDi2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine       //then let the control flow to button click eventsDi2015NewLine    }Di2015NewLine}Di2015NewLineprotected void generate_table()Di2015NewLine{Di2015NewLineDi2015NewLine    Table table = new Table();Di2015NewLine    TableRow row;Di2015NewLine    TableCell cell;Di2015NewLine    TextBox tb;Di2015NewLine    table.ID = "Table1";Di2015NewLineDi2015NewLine    int s_rows = Convert.ToInt32(ViewState["RowsCount"].ToString());Di2015NewLineDi2015NewLine    for (int k = 1; k <= s_rows; k++)Di2015NewLine    {Di2015NewLine        row = new TableRow();Di2015NewLine        cell = new TableCell();Di2015NewLineDi2015NewLine        tb = new TextBox();Di2015NewLine        tb.ID = "tb_" + k;Di2015NewLine        tb.TextChanged += new EventHandler(tb_TextChanged);Di2015NewLine        tb.AutoPostBack = true;Di2015NewLine        cell.Controls.Add(tb);Di2015NewLineDi2015NewLine        row.Cells.Add(cell);Di2015NewLine        table.Rows.Add(row);Di2015NewLine    }Di2015NewLineDi2015NewLine   PlaceHolder1.Controls.Add(table);Di2015NewLine}Di2015NewLineDi2015NewLineprotected void setdata()Di2015NewLine{Di2015NewLine    Table table = (Table)Page.FindControl("Table1");Di2015NewLine    if (table != null)Di2015NewLine    {Di2015NewLineDi2015NewLine        foreach (TableRow tr in table.Rows)Di2015NewLine        {Di2015NewLine            foreach (TableCell tc in tr.Cells)Di2015NewLine            {Di2015NewLine                foreach (Control ct in tc.Controls)Di2015NewLine                {Di2015NewLine                    if (ct is TextBox)Di2015NewLine                    {Di2015NewLineDi2015NewLine                        ((TextBox)ct).Text = Request.Form[ct.ID];Di2015NewLine                    }Di2015NewLine                    if (ct is DropDownList)Di2015NewLine                    {Di2015NewLine                        ((DropDownList)ct).Text = Request.Form[ct.ID];Di2015NewLine                    }Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineDi2015NewLineprotected void Button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine    counter++;Di2015NewLine    Label1.Text = "Total Rows : "+counter.ToString();Di2015NewLine    //Label1.Text = "Refreshed at " + DateTime.Now.ToString();Di2015NewLineDi2015NewLine    int new_rows_count = Convert.ToInt32(ViewState["RowsCount"]) + 1; //add one rows at a timeDi2015NewLine    ViewState["RowsCount"] = new_rows_count;Di2015NewLine    generate_table();Di2015NewLine    setdata();        //set the values of any of the previously generated  controlsDi2015NewLine}Di2015NewLineprotected void Button2_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLineDi2015NewLine     counter=counter+2;Di2015NewLine     Label1.Text = "Total Rows : " + counter.ToString();Di2015NewLine    //Label1.Text = "Refreshed at " + DateTime.Now.ToString();Di2015NewLineDi2015NewLine    int new_rows_count = Convert.ToInt32(ViewState["RowsCount"]) + 2; //add 2 rows at a timeDi2015NewLine    ViewState["RowsCount"] = new_rows_count;Di2015NewLineDi2015NewLine    generate_table();Di2015NewLine    setdata();        //set the values of any of the previously generated  controlsDi2015NewLine}Di2015NewLineDi2015NewLineprotected void tb_TextChanged(object sender, EventArgs e)Di2015NewLine{Di2015NewLineDi2015NewLine    TextBox tb = (TextBox)sender;Di2015NewLine    Label2.Text = "Text of textbox "+ tb.ID+ " changed to " + tb.Text;Di2015NewLineDi2015NewLine}Di2015NewLine
21191029Di2015UniqueSeparatorinterface ADi2015NewLine{Di2015NewLine    int MustReturn3();Di2015NewLine}Di2015NewLineDi2015NewLineclass B : ADi2015NewLine{Di2015NewLine   public int MustReturn3()Di2015NewLine   {Di2015NewLine      return Get3();Di2015NewLine   }Di2015NewLine   public int Get3()Di2015NewLine   {Di2015NewLine      return 2 + 1;Di2015NewLine   }Di2015NewLine}Di2015NewLine
21191029Di2015UniqueSeparatorA
21191029Di2015UniqueSeparatorB
21191029Di2015UniqueSeparatorB
21191029Di2015UniqueSeparatorA
21191029Di2015UniqueSeparatorGet3()
21191029Di2015UniqueSeparatorMustReturn3()
21191029Di2015UniqueSeparatorprivate A _a;Di2015NewLineDi2015NewLine[TestInitialize]Di2015NewLinepublic void Initialize()Di2015NewLine{Di2015NewLine    _a = new B();Di2015NewLine}Di2015NewLineDi2015NewLine[TestMethod]Di2015NewLinepublic void ShouldReturn3WhenICallMustReturn3()Di2015NewLine{Di2015NewLine    Assert.AreEqual(3, _a.MustReturn3());Di2015NewLine}Di2015NewLine
21191052Di2015UniqueSeparatoriTextSharp
21191182Di2015UniqueSeparatorXML
21191182Di2015UniqueSeparatorJSON
21191182Di2015UniqueSeparatorProto
21191182Di2015UniqueSeparatormessage Person {Di2015NewLine  required int32 id = 1;Di2015NewLine  required string name = 2;Di2015NewLine  optional string email = 3;Di2015NewLine}Di2015NewLine
21191331Di2015UniqueSeparator<=
21191331Di2015UniqueSeparator<
21191331Di2015UniqueSeparatorfor (int i = 0; i < ScaleGroup1and3.Count; i++)Di2015NewLine...Di2015NewLinefor (int i = 0; i < ScaleGroup2and3.Count; i++)Di2015NewLine
21191331Di2015UniqueSeparatorScaleGroup1and3[ScaleGroup1and3.Count]Di2015NewLine
21191593Di2015UniqueSeparatorpublic partial class DataDi2015NewLine    {Di2015NewLine        public string AccountNumber { get; set; } // only property left that is mapped toDi2015NewLine                                                  // database because the type matchesDi2015NewLine        public long VisitKey Di2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return Convert.ToInt64(_visitKey);Di2015NewLine            }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                _visitKey = value.ToString();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public long CodeKeyDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return Convert.ToInt64(_codeKey);Di2015NewLine            }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                _codeKey = value.ToString();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public short GroupKeyDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return Convert.ToInt16(_groupKey);Di2015NewLine            }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                _groupKey = value.ToString();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public int GroupVersionDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return Convert.ToInt32(_groupVersion);Di2015NewLine            }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                _groupVersion = value.ToString();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        public int ClassificationDi2015NewLine        {Di2015NewLine            getDi2015NewLine            {Di2015NewLine                return Convert.ToInt32(_classification);Di2015NewLine            }Di2015NewLine            setDi2015NewLine            {Di2015NewLine                _classification = value.ToString();Di2015NewLine            }Di2015NewLine        }Di2015NewLineDi2015NewLine        // these fields need to be mapped to the databaseDi2015NewLine        private string _visitKey;Di2015NewLine        private string _codeKey;Di2015NewLine        private string _groupKey;Di2015NewLine        private string _groupVersion;Di2015NewLine        private string _classification;Di2015NewLine    }Di2015NewLine
21191595Di2015UniqueSeparatorXElement
21191595Di2015UniqueSeparatorXmlNode
21191595Di2015UniqueSeparatorXmlElement
21191595Di2015UniqueSeparatorName
21191595Di2015UniqueSeparatorXName
21191595Di2015UniqueSeparatorName
21191595Di2015UniqueSeparatorLocalName
21191595Di2015UniqueSeparatorXElement
21191595Di2015UniqueSeparatorXName
21191595Di2015UniqueSeparatorif (element.Name.LocalName == "title")Di2015NewLine{Di2015NewLine   // Do something with title dataDi2015NewLine}Di2015NewLineelse if (element.Name.LocalName == "assignableunit")Di2015NewLine{Di2015NewLine  // Do something with assignableunit dataDi2015NewLine  foreach(XElement childElement in element.Descendents())Di2015NewLine  {Di2015NewLine      if (childElement.Name.LocalName == "other")Di2015NewLine      {Di2015NewLineDi2015NewLine      }Di2015NewLine      else if (........)Di2015NewLine      {Di2015NewLine      }Di2015NewLine  }Di2015NewLine}Di2015NewLine
21191654Di2015UniqueSeparatorIf ( ( Lat <= NW.Lat && Lat >= SE.Lat ) &&Di2015NewLine     ( Lon >= NW.Lon && Lon <= SE.Lon ) )Di2015NewLine{Di2015NewLine    // The point is in the boxDi2015NewLine}Di2015NewLine
21191699Di2015UniqueSeparatorint stop = counter + amtperpage;Di2015NewLineif (stop >= al.Count)Di2015NewLine    stop = al.Count - 1; // - 1 to prevent index out of range error.Di2015NewLineDi2015NewLinewhile (counter <= stop)Di2015NewLine{Di2015NewLine    textToPrint = al[counter].ToString() + " - test";Di2015NewLine    e.Graphics.DrawString(textToPrint, printFontArial10, Brushes.Black, leftMargin, topMargin + lineInc);Di2015NewLineDi2015NewLine    lineInc += 12;Di2015NewLine    counter++;Di2015NewLine}Di2015NewLineDi2015NewLinepage++;Di2015NewLinee.HasMorePages = counter < al.Count - 1; // pesky zero-based array issue again.Di2015NewLine
21191747Di2015UniqueSeparatorx => x.Provide(fromKeys[i])
21191747Di2015UniqueSeparatori
21191747Di2015UniqueSeparatorfromKeys.Count
21191747Di2015UniqueSeparatorfor
21191747Di2015UniqueSeparatorfor (int i = 0; i < fromKeys.Count; ++i)Di2015NewLine{Di2015NewLine    int j = i;Di2015NewLine    myMock.Setup(x => x.Provide(fromKeys[j])).Returns(new Sth(fromKeys[j], _values[j]));Di2015NewLine}Di2015NewLine
21191869Di2015UniqueSeparatorbool readytofire = true;Di2015NewLinepublic override void Update()Di2015NewLine{Di2015NewLine    KeyboardState newState = Keyboard.GetState();Di2015NewLineDi2015NewLine    readytofire = !newState.IsKeyDown(Keys.Space);Di2015NewLineDi2015NewLine    if (newState.IsKeyDown(Keys.Space) && readytofire)Di2015NewLine    {Di2015NewLine        bulletList.Add(new Bullet(content.Load<Texture2D>(@"bullet"), new Vector2(initialPos.X, initialPos.Y - 28), new Vector2(2, 4), spriteBatch));Di2015NewLine    }Di2015NewLine}Di2015NewLine
21192169Di2015UniqueSeparator\\b
21192169Di2015UniqueSeparatorstring regex = "\\\\b" + "ct" + "\\\\b";Di2015NewLine
21192212Di2015UniqueSeparatorBrushes.Color
21192212Di2015UniqueSeparatorpublic void printTitle(string title, Brushes titleColor)Di2015NewLine{Di2015NewLine    // settings for stringformatDi2015NewLine    g.DrawString(title, drawFontTitle, titleColor, x, y, stringFormatTitle);Di2015NewLine}Di2015NewLine
21192212Di2015UniqueSeparatorpublic void printTitle(string title, Brush titleColor)Di2015NewLine{Di2015NewLine    // settings for stringformatDi2015NewLine    g.DrawString(title, drawFontTitle, titleColor, x, y, stringFormatTitle);Di2015NewLine}Di2015NewLine
21192402Di2015UniqueSeparatorString.GetHashCode
21192402Di2015UniqueSeparatorString.GetHashCode
21192496Di2015UniqueSeparatorMyClient client = new MyService.MyClient();Di2015NewLineclient.Endpoint.Address = new EndpointAddress(new Uri("target URL"));Di2015NewLineclient.Open();Di2015NewLine
21192602Di2015UniqueSeparator<DependentUpon>
21192602Di2015UniqueSeparator<Compile Include="Yadayada.cs">Di2015NewLine  <SubType>Form</SubType>Di2015NewLine</Compile>Di2015NewLine<Compile Include="Yadayada.Designer.cs">Di2015NewLine  <DependentUpon>Yadayada.cs</DependentUpon>Di2015NewLine</Compile>Di2015NewLine
21193007Di2015UniqueSeparatorprivate JArray GetRESTData(string uri)Di2015NewLine{Di2015NewLine    var webRequest = (HttpWebRequest)WebRequest.Create(uri);Di2015NewLine    var webResponse = (HttpWebResponse)webRequest.GetResponse();Di2015NewLineDi2015NewLine    var reader = new StreamReader(webResponse.GetResponseStream());Di2015NewLine    string s = reader.ReadToEnd();Di2015NewLineDi2015NewLine    return JsonConvert.DeserializeObject<JArray>(s);Di2015NewLine}Di2015NewLine
21193007Di2015UniqueSeparatorStatusCode
21193007Di2015UniqueSeparatorHttpWebResponse
21193007Di2015UniqueSeparatorMessageBox
21193007Di2015UniqueSeparatorprivate JArray GetRESTData(string uri)Di2015NewLine{Di2015NewLine    var json = ReadFromUri(uri);Di2015NewLineDi2015NewLine    return JsonConvert.DeserializeObject<JArray>(json);Di2015NewLine}Di2015NewLineDi2015NewLineprivate string ReadFromUri(string uri)Di2015NewLine{Di2015NewLine    using (var webRequest = (HttpWebRequest)WebRequest.Create(uri))Di2015NewLine    using (var webResponse = (HttpWebResponse)webRequest.GetResponse())Di2015NewLine    using (var reader = new StreamReader(webResponse.GetResponseStream()))Di2015NewLine    {Di2015NewLine        return reader.ReadToEnd();Di2015NewLine    }   Di2015NewLine}Di2015NewLine
21193007Di2015UniqueSeparatortry Di2015NewLine{Di2015NewLine    var myArray = GetRESTData("http://someservice.com/bananabread");Di2015NewLine} Di2015NewLinecatch (WebException exception)Di2015NewLine{Di2015NewLine    MessageBox.Show("Some exception happened: {0}", exception);Di2015NewLine}Di2015NewLine
21193111Di2015UniqueSeparator[0-9]+
21193111Di2015UniqueSeparator[.]?
21193111Di2015UniqueSeparator[0-9]+
21193111Di2015UniqueSeparatori?
21193111Di2015UniqueSeparator|
21193111Di2015UniqueSeparator[+-*/]?
21193111Di2015UniqueSeparatorpublic static void ParseComplex(string input)Di2015NewLine{Di2015NewLine    char[] operators = new[] { '+', '-', '*', '/' };Di2015NewLineDi2015NewLine    Regex regex = new Regex("[0-9]+[.]?[0-9]+i?|[+-/*]?");Di2015NewLine    foreach (Match match in regex.Matches(input))Di2015NewLine    {Di2015NewLine        if (string.IsNullOrEmpty(match.Value))Di2015NewLine            continue;Di2015NewLineDi2015NewLine        if (operators.Contains(match.Value[0]))Di2015NewLine        {Di2015NewLine            Console.WriteLine("operator {0}", match.Value[0]);Di2015NewLine            continue;Di2015NewLine        }Di2015NewLineDi2015NewLine        if (match.Value.EndsWith("i"))Di2015NewLine        {Di2015NewLine            Console.WriteLine("imaginary part {0}", match.Value);Di2015NewLine            continue;Di2015NewLineDi2015NewLine        }Di2015NewLine        elseDi2015NewLine        {Di2015NewLine            Console.WriteLine("real part {0}", match.Value);Di2015NewLineDi2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21193230Di2015UniqueSeparator    string input = "function(aa, bb, cc);";Di2015NewLineDi2015NewLine    string pattern = @"\\((?<str>.+)\\)";Di2015NewLineDi2015NewLine    Regex regex = new Regex(pattern);Di2015NewLine    Match m = regex.Match(input);Di2015NewLineDi2015NewLine    if(m.Success)Di2015NewLine    {Di2015NewLine        string str = m.Groups["str"].Value;Di2015NewLine        Console.WriteLine(str);Di2015NewLine        string[] args = str.Split(new char[] {',', ' '}, StringSplitOptions.RemoveEmptyEntries);Di2015NewLineDi2015NewLine    } else {Di2015NewLine        // unable to parseDi2015NewLine    }Di2015NewLine
21193238Di2015UniqueSeparatorList<long>
21193238Di2015UniqueSeparatorvar ids = lstId.Select(i => i.listId).ToList();Di2015NewLine
21193238Di2015UniqueSeparatorwhere ids.All(i => adAdFields.Select(co => co.listId).Contains(i))Di2015NewLine
21193238Di2015UniqueSeparatorwhere lstId.Select(i => i.listId).All(i => adAdFields.Select(co => co.listId).Contains(i))Di2015NewLine
21193250Di2015UniqueSeparator<a>
21193250Di2015UniqueSeparatordriver.FindElement(By.CssSelector("ul#menu li#test_tab > a[title='Update']")).Click();Di2015NewLine
21193318Di2015UniqueSeparatorObjectDataSource.SelectParameter
21193318Di2015UniqueSeparatorstring DataSetName = "DataSet1Parameter";Di2015NewLinestring SelectedMethod = "GetSomeEmployees";Di2015NewLinestring Parameter = "ID";Di2015NewLineDi2015NewLineObjectDataSource objDataSource = new ObjectDataSource() { ID = DataSetName, TypeName = "BussinessLogic.Custom", SelectMethod = SelectedMethod};Di2015NewLine    objDataSource.SelectParameters.Add(new Parameter("id"));Di2015NewLine
21193318Di2015UniqueSeparatorObjectDataSource.Selecting
21193318Di2015UniqueSeparatorprotected void objDataSource_SelectingDi2015NewLine    (object sender, ObjectDataSourceSelectingEventArgs e)Di2015NewLine{Di2015NewLine    e.InputParameters["id"] = "1";Di2015NewLine}Di2015NewLine
21193579Di2015UniqueSeparatorGridView
21193627Di2015UniqueSeparatorSystem.Drawing.Bitmap bitmap = new System.Drawing.Bitmap(800, 1000); Di2015NewLineGraphics g = Graphics.FromImage(bitmap);Di2015NewLine/* Add this */ g.FillRectangle(Brushes.White, new Rectangle(0,0, 800, 1000));Di2015NewLineg.DrawString("Name: " + Name.Text, outputFont, Brushes.Black, new PointF(0, 20));Di2015NewLineg.DrawString("Date Of Birth: " + Date_Of_Birth.Text, outputFont, Brushes.Black, new PointF(0, 40));Di2015NewLineg.DrawString("Address: " + Address.Text, outputFont, Brushes.Black, new PointF(0, 60));Di2015NewLineg.DrawString("City: " + City.Text, outputFont, Brushes.Black, new PointF(0, 80));Di2015NewLineg.DrawString("State: " + State.Text, outputFont, Brushes.Black, new PointF(0, 100));Di2015NewLineg.DrawString("Zip Code: " + Zip_Code.Text, outputFont, Brushes.Black, new PointF(0, 120));Di2015NewLineg.DrawString("Phone: " + Phone.Text, outputFont, Brushes.Black, new PointF(0, 140));Di2015NewLineg.DrawString(" ID: " + ID.Text, outputFont, Brushes.Black, new PointF(0, 160));Di2015NewLinefileName = saveDirectory + id + ".tif";Di2015NewLinebitmap.Save(fileName, ImageFormat.Tiff);Di2015NewLine
21193810Di2015UniqueSeparator    public class HojaDeVidaDi2015NewLine{Di2015NewLine    public HojaDeVida()Di2015NewLine    {Di2015NewLine        ExperienciasLaborales = new List<ExperienciaLaboral>();Di2015NewLine    }Di2015NewLineDi2015NewLine    public string Nombre { get; set; }Di2015NewLine    public string Apellido { get; set; }Di2015NewLine    public IList<ExperienciaLaboral> ExperienciasLaborales { get; set; }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ExperienciaLaboralDi2015NewLine{Di2015NewLine    public string Empresa { get; set; }Di2015NewLine    public int Anios { get; set; }Di2015NewLine}Di2015NewLine
21193810Di2015UniqueSeparator    public class HomeController : ControllerDi2015NewLine{Di2015NewLine    [HttpGet]Di2015NewLine    public ActionResult Index()Di2015NewLine    {Di2015NewLine        TempData["hojavida"] = new HojaDeVida();Di2015NewLine        return View();Di2015NewLine    }Di2015NewLineDi2015NewLine    [HttpPost]Di2015NewLine    public ActionResult Index(HojaDeVida hojaDeVida)Di2015NewLine    {Di2015NewLine         //Submit the info in "hojaDeVida" and TempData["HojaVida"]Di2015NewLine        return new EmptyResult();Di2015NewLine    }Di2015NewLineDi2015NewLine    [HttpPost]Di2015NewLine    public PartialViewResult AddExperienciaLaboral(ExperienciaLaboral experiencia)Di2015NewLine    {Di2015NewLine        var hojadevida = (HojaDeVida)TempData["hojavida"];Di2015NewLine        hojadevida.ExperienciasLaborales.Add(experiencia);Di2015NewLine        TempData["hojavida"] = hojadevida;Di2015NewLine        return PartialView("_ListExperiencias", hojadevida.ExperienciasLaborales);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21193810Di2015UniqueSeparator@using WebApplication1.ControllersDi2015NewLine@model HojaDeVidaDi2015NewLine@{Di2015NewLine    ViewBag.Title = "Home Page";Di2015NewLine}Di2015NewLineDi2015NewLine@using (Html.BeginForm("Index", "Home"))Di2015NewLine    {Di2015NewLine        <div>Di2015NewLine            @Html.LabelFor(x => x.Nombre)Di2015NewLine            @Html.EditorFor(x => x.Nombre)Di2015NewLine        </div>Di2015NewLine        <div>Di2015NewLine            @Html.LabelFor(x => x.Apellido)Di2015NewLine            @Html.EditorFor(x => x.Apellido)Di2015NewLine        </div>Di2015NewLine        <input type="submit" value="Guardar Hoja de Vida" />Di2015NewLine    }Di2015NewLineDi2015NewLine@Html.Partial("_AddExperiencia", new ExperienciaLaboral())Di2015NewLineDi2015NewLine@section scriptsDi2015NewLine{Di2015NewLine    @Scripts.Render("~/Scripts/jquery.unobtrusive-ajax.min.js")Di2015NewLine}Di2015NewLine
21193810Di2015UniqueSeparator@using WebApplication1.ControllersDi2015NewLine@model ExperienciaLaboralDi2015NewLine@using (Ajax.BeginForm("AddExperienciaLaboral", "Home", new AjaxOptions { UpdateTargetId = "data", HttpMethod = "POST" }))Di2015NewLine    {Di2015NewLine        <div>Di2015NewLine            @Html.LabelFor(x => Model.Empresa)Di2015NewLine            @Html.EditorFor(x => Model.Empresa)Di2015NewLine        </div>Di2015NewLine        <div>Di2015NewLine            @Html.LabelFor(x => Model.Anios)Di2015NewLine            @Html.EditorFor(x => Model.Anios)Di2015NewLine        </div>Di2015NewLine        <input type="submit" value="Agregar Experiencia" />Di2015NewLine    }Di2015NewLine<div id="data">Di2015NewLine    @Html.Partial("_ListExperiencias", new List<ExperienciaLaboral>())Di2015NewLine</div>Di2015NewLine
21193810Di2015UniqueSeparator@model IList<WebApplication1.Controllers.ExperienciaLaboral>Di2015NewLine@foreach (var item in Model)Di2015NewLine    {Di2015NewLine        <div>Di2015NewLine            @string.Format("Empresa : {0} | AÃ±os: {1}", item.Empresa, item.Anios)Di2015NewLine    </div>Di2015NewLine    }Di2015NewLine
21193975Di2015UniqueSeparatorA
21193975Di2015UniqueSeparatorB
21193975Di2015UniqueSeparatorA
21193975Di2015UniqueSeparatorB
21193975Di2015UniqueSeparatorB
21193975Di2015UniqueSeparatorpublic interface ISomethingDi2015NewLine{Di2015NewLine    void PerformAction();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ActionManagerDi2015NewLine{Di2015NewLine    public void DoSomething(ISomething something)Di2015NewLine    {Di2015NewLine        something.PerformAction();Di2015NewLine    }Di2015NewLine}Di2015NewLine
21193975Di2015UniqueSeparatorA
21193975Di2015UniqueSeparatorB
21193975Di2015UniqueSeparatorpublic class ActionPerformer : ISomethingDi2015NewLine{Di2015NewLine    public void PerformAction()Di2015NewLine    {Di2015NewLine        ...Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLinepublic class ProgramDi2015NewLine{Di2015NewLine    public static void Main()Di2015NewLine    {Di2015NewLine        ActionManager manager = new ActionManager();Di2015NewLine        ActionPerformer performer = new ActionPerformer();Di2015NewLineDi2015NewLine        manager.DoSomething(performer);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21193975Di2015UniqueSeparatorA
21193975Di2015UniqueSeparatorB
21193975Di2015UniqueSeparatorB
21193975Di2015UniqueSeparatorA
21194068Di2015UniqueSeparatorAction
21194068Di2015UniqueSeparatorFunc<T>
21194068Di2015UniqueSeparatorpublic static class DummyClassNameDi2015NewLine{Di2015NewLine    public static void DummyTemplateFunc(DummyInterfaceName aaa1, Action action)Di2015NewLine    {Di2015NewLine        // you cannot assign result to variable, because it returns voidDi2015NewLine        action();Di2015NewLineDi2015NewLine        // I also changed method to return void, so you can't return anythingDi2015NewLine        // return something;Di2015NewLineDi2015NewLine        // ofc you can make it return something insteadDi2015NewLine    }Di2015NewLine}Di2015NewLine
21194230Di2015UniqueSeparatorstring uuid = System.Guid.NewGuid().ToString();Di2015NewLine
21194321Di2015UniqueSeparator<Window Di2015NewLine    x:Class="MyApplication.Widgets.Controls.DiagnosticsWindow"Di2015NewLine    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"Di2015NewLine    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"Di2015NewLine    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" Di2015NewLine    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"Di2015NewLine    xmlns:forms="clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms"Di2015NewLine    mc:Ignorable="d" Di2015NewLine    SizeToContent="WidthAndHeight"Di2015NewLine    WindowStartupLocation="Manual">Di2015NewLineDi2015NewLine    <WindowsFormsHost>Di2015NewLine        <forms:WebBrowser Di2015NewLine            x:Name="DiagnosticsWebBrowser" Di2015NewLine            Width="420"Di2015NewLine            Height="240"Di2015NewLine            ScrollBarsEnabled="False" Di2015NewLine            DocumentCompleted="DiagnosticsWebBrowser_DocumentCompleted" />Di2015NewLine    </WindowsFormsHost>Di2015NewLine</Window>Di2015NewLine
21194321Di2015UniqueSeparator// Called after the document has been renderedDi2015NewLineprivate void DiagnosticsWebBrowser_DocumentCompleted(object sender, System.Windows.Forms.WebBrowserDocumentCompletedEventArgs e)Di2015NewLine    {Di2015NewLine        // Resize the windowDi2015NewLine        int width = WebBrowser.Document.Body.ScrollRectangle.Size.Width;Di2015NewLine        width = Math.Min(width, (int)SystemParameters.WorkArea.Width - 100);Di2015NewLineDi2015NewLine        int height = WebBrowser.Document.Body.ScrollRectangle.Size.Height;Di2015NewLine        height = Math.Min(height, (int)SystemParameters.WorkArea.Height - 100);Di2015NewLineDi2015NewLine        DiagnosticsWebBrowser.Size = new System.Drawing.Size(width, height);Di2015NewLine        UpdateLayout();Di2015NewLineDi2015NewLine        // Re-center the windowDi2015NewLine        WindowStartupLocation = WindowStartupLocation.Manual;Di2015NewLine        Left = (SystemParameters.WorkArea.Width - ActualWidth) / 2 + SystemParameters.WorkArea.Left;Di2015NewLine        Top = (SystemParameters.WorkArea.Height - ActualHeight) / 2 + SystemParameters.WorkArea.Top;Di2015NewLine    }Di2015NewLine
21194341Di2015UniqueSeparatorvar word = (from p in wordsListDi2015NewLine            where p.Id == savedIdDi2015NewLine            select p).Single()Di2015NewLine
21194341Di2015UniqueSeparatorcollection.Single(condition)
21194721Di2015UniqueSeparatorprivate void myTextbox_KeyUp(object sender, System.Windows.Input.KeyEventArgs e)Di2015NewLine{Di2015NewLine   char added = myTextbox.Text.ElementAt(myTextbox.Text.Length - 1);Di2015NewLine}Di2015NewLine
21194764Di2015UniqueSeparatorif (Keyboard.Modifiers == ModifierKeys.Shift && Keyboard.IsKeyDown(Key.Enter))Di2015NewLine{Di2015NewLine    MessageBox.Show("test");Di2015NewLine}Di2015NewLine
21194782Di2015UniqueSeparatorIUserStore<TUser>
21194782Di2015UniqueSeparatorUserManager
21194782Di2015UniqueSeparatorvar userStore = new Mock<IUserStore<ApplicationUser>>();Di2015NewLinevar userManager = new UserManager(userStore.Object);Di2015NewLine
21194782Di2015UniqueSeparatorvar passwordManager = userStore.As<IUserPasswordStore<ApplicationUser>>()Di2015NewLine    .Setup(...).Returns(...);Di2015NewLine
21194782Di2015UniqueSeparator.As<T>()
21194782Di2015UniqueSeparatorIUserStore<T>
21195195Di2015UniqueSeparatorSELECT appointmentIDDi2015NewLine   ,aDateDi2015NewLine   ,aTimeDi2015NewLine   ,aStatusDi2015NewLine   ,aContactDi2015NewLine   ,aHeightDi2015NewLine   ,aWeightDi2015NewLine   ,p.pFirstNameDi2015NewLine   ,m.mcCentreDi2015NewLine   ,n.nFirstName       Di2015NewLineFROM APPOINTMENT AS aDi2015NewLineLEFT OUTER JOIN Nurse AS n Di2015NewLineON a.nurseID = n.NurseIDDi2015NewLineLeft outer join Patient as pDi2015NewLineon a.patientid = p.patientIdDi2015NewLineleft outer join medicalcentre as mDi2015NewLineon a.mcID = m.mcidDi2015NewLine
21195371Di2015UniqueSeparatorFlagsAttribute
21195371Di2015UniqueSeparator[Flags]Di2015NewLinepublic enum FooDi2015NewLine{Di2015NewLine  NoSelection = 0,Di2015NewLine  X = 1, Di2015NewLine  Y = 2Di2015NewLine  Z = 4Di2015NewLine}Di2015NewLine
21195371Di2015UniqueSeparator|=
21195371Di2015UniqueSeparatorFoo foo = Foo.NoSelection;Di2015NewLineDi2015NewLineif (allowX) foo |= Foo.X;Di2015NewLineif (allowY) foo |= Foo.Y;Di2015NewLineif (allowZ) foo |= Foo.Z;Di2015NewLine
21195371Di2015UniqueSeparatorbool allowX = true;Di2015NewLinebool allowY = false;Di2015NewLinebool allowZ = true;Di2015NewLineDi2015NewLineFoo foo = Foo.NoSelection;Di2015NewLineDi2015NewLineif (allowX) foo |= Foo.X;Di2015NewLineif (allowY) foo |= Foo.Y;Di2015NewLineif (allowZ) foo |= Foo.Z;Di2015NewLineDi2015NewLineConsole.WriteLine("allowX = {0}", ((foo & Foo.X) == Foo.X) ? "true" : "false");Di2015NewLineConsole.WriteLine("allowY = {0}", ((foo & Foo.Y) == Foo.Y) ? "true" : "false");Di2015NewLineConsole.WriteLine("allowZ = {0}", ((foo & Foo.Z) == Foo.Z) ? "true" : "false");Di2015NewLine
21195735Di2015UniqueSeparator//by default, BlockingCollection will use ConcurrentQueueDi2015NewLineBlockingCollection<int> coll = new BlockingCollection<int>();Di2015NewLineDi2015NewLinecoll.Add(1);Di2015NewLinecoll.Add(2);Di2015NewLinecoll.CompleteAdding();Di2015NewLineDi2015NewLineint item;Di2015NewLineDi2015NewLineif (coll.TryTake(out item, -1))Di2015NewLine{Di2015NewLine    Console.WriteLine(item);Di2015NewLine}Di2015NewLineDi2015NewLineif (coll.TryTake(out item, -1))Di2015NewLine{Di2015NewLine    Console.WriteLine(item);Di2015NewLine}Di2015NewLineDi2015NewLineif (coll.TryTake(out item, -1))Di2015NewLine{Di2015NewLine    //this won't get hitDi2015NewLine}Di2015NewLineelseDi2015NewLine{Di2015NewLine    Console.WriteLine("TryTake returned false!");Di2015NewLine}Di2015NewLine
21196011Di2015UniqueSeparatorcontext.SaveChanges();
21196011Di2015UniqueSeparator   context.tbProjects.AddObject(proj);Di2015NewLineDi2015NewLine   context.SaveChanges();Di2015NewLineDi2015NewLine   id = proj.Id;Di2015NewLine
21196024Di2015UniqueSeparatorpublic class MessageDi2015NewLine{Di2015NewLine   public int Id {get; set;}             // MessageIdDi2015NewLine   public Article Article { get; set; }  // OwnerDi2015NewLine   public string body {get; set;}Di2015NewLine}Di2015NewLine
21196024Di2015UniqueSeparatorpublic class MessageDi2015NewLine{Di2015NewLine   public int Id {get; set;}             // MessageIdDi2015NewLineDi2015NewLine   // use the 'virtual' keyword and/or add an ArticleId and/or use some Attributes.  Di2015NewLine   public int ArticleId { get; set; }Di2015NewLine   public virtual Article Article { get; set; }  // OwnerDi2015NewLine   public string body {get; set;}Di2015NewLine}Di2015NewLine
21196248Di2015UniqueSeparatorForEach
21196248Di2015UniqueSeparatorParallelOptions
21196248Di2015UniqueSeparatorTaskScheduler
21196248Di2015UniqueSeparatorTaskSchedueler
21196248Di2015UniqueSeparatorQueuedTaskScheduler
21196248Di2015UniqueSeparatorprivate static void Main(string[] args)Di2015NewLine{Di2015NewLine    int totalMaxConcurrancy = Environment.ProcessorCount;Di2015NewLine    int highPriorityMaxConcurrancy = totalMaxConcurrancy / 2;Di2015NewLineDi2015NewLine    if (highPriorityMaxConcurrancy == 0)Di2015NewLine        highPriorityMaxConcurrancy = 1;Di2015NewLineDi2015NewLine    QueuedTaskScheduler qts = new QueuedTaskScheduler(TaskScheduler.Default, totalMaxConcurrancy);Di2015NewLine    var highPriortiyScheduler = qts.ActivateNewQueue(0);Di2015NewLine    var lowPriorityScheduler = qts.ActivateNewQueue(1);Di2015NewLineDi2015NewLine    BlockingCollection<Foo> highPriorityWork = new BlockingCollection<Foo>();Di2015NewLine    BlockingCollection<Foo> lowPriorityWork = new BlockingCollection<Foo>();Di2015NewLineDi2015NewLine    List<Task> processors = new List<Task>(2);Di2015NewLineDi2015NewLine    processors.Add(Task.Factory.StartNew(() =>Di2015NewLine    {Di2015NewLine        Parallel.ForEach(highPriorityWork.GetConsumingPartitioner(),  //.GetConsumingPartitioner() is also from ParallelExtensionExtras, it gives better performance than .GetConsumingEnumerable() with Parallel.ForEeach(Di2015NewLine                         new ParallelOptions() { TaskScheduler = highPriortiyScheduler, MaxDegreeOfParallelism = highPriorityMaxConcurrancy }, Di2015NewLine                         ProcessWork);Di2015NewLine    }, TaskCreationOptions.LongRunning));Di2015NewLineDi2015NewLine    processors.Add(Task.Factory.StartNew(() =>Di2015NewLine    {Di2015NewLine        Parallel.ForEach(lowPriorityWork.GetConsumingPartitioner(), Di2015NewLine                         new ParallelOptions() { TaskScheduler = lowPriorityScheduler}, Di2015NewLine                         ProcessWork);Di2015NewLine    }, TaskCreationOptions.LongRunning));Di2015NewLineDi2015NewLineDi2015NewLine    //Add some work to do here to the highPriorityWork or lowPriorityWork collectionsDi2015NewLineDi2015NewLineDi2015NewLine    //Lets the blocking collections know we are no-longer going to be adding new items so it will break out of the `ForEach` once it has finished the pending work.Di2015NewLine    highPriorityWork.CompleteAdding();Di2015NewLine    lowPriorityWork.CompleteAdding();Di2015NewLineDi2015NewLine    //Waits for the two collections to compleatly empty before continueingDi2015NewLine    Task.WaitAll(processors.ToArray());Di2015NewLine}Di2015NewLineDi2015NewLineprivate static void ProcessWork(Foo work)Di2015NewLine{Di2015NewLine    //...Di2015NewLine}Di2015NewLine
21196248Di2015UniqueSeparatorParallel.ForEach
21196248Di2015UniqueSeparatorMaxConcurrency
21196248Di2015UniqueSeparatorQueuedTaskScheduler
21196248Di2015UniqueSeparatorhighPriorityWork
21196248Di2015UniqueSeparatorRoundRobinTaskSchedulerQueue
21196282Di2015UniqueSeparatorSingleOrDefault
21196282Di2015UniqueSeparatorSingle
21196282Di2015UniqueSeparatorSingleOrDefault<T>
21196282Di2015UniqueSeparatordefault(T)
21196282Di2015UniqueSeparatornull
21196286Di2015UniqueSeparator// Constructor of MainWindow classDi2015NewLinepubic MainWindow()Di2015NewLine{Di2015NewLine    b.Click+=new OtherClass().mainwinButton_click;Di2015NewLine}Di2015NewLine
21196286Di2015UniqueSeparatorpublic class OtherClassDi2015NewLine{Di2015NewLine    public void RegisterUnregisterDi2015NewLine    {Di2015NewLine        // Reference to main classDi2015NewLine        MainWindow ref =...;Di2015NewLineDi2015NewLine        // register event...Di2015NewLine        ref.b.Click+=mainwinButton_click;Di2015NewLineDi2015NewLine        // Unregister event...Di2015NewLine        ref.b.Click-=mainwinButton_click;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21196286Di2015UniqueSeparator// MainWindow.csDi2015NewLinepublic partial class MainWindowDi2015NewLine{Di2015NewLine    // your button hereDi2015NewLine}Di2015NewLineDi2015NewLine// MainWindow.Events.csDi2015NewLinepublic partial class MainWindowDi2015NewLine{Di2015NewLine     private void mainwinButton_click(...)Di2015NewLine}Di2015NewLine
21196386Di2015UniqueSeparator{Binding Path=Name}
21196386Di2015UniqueSeparatorPath
21196386Di2015UniqueSeparatorPath
21196386Di2015UniqueSeparatorName
21196386Di2015UniqueSeparator<TextBlock Text="{Binding Path=Name}" />Di2015NewLine
21196386Di2015UniqueSeparatorpublic class ViewModelDi2015NewLine{Di2015NewLine    public string Name { get; set; }Di2015NewLine}Di2015NewLine
21196386Di2015UniqueSeparatorViewModel vm = new ViewModel();Di2015NewLinevm.Name = "Test";Di2015NewLineDi2015NewLinethis.DataContext = vm;Di2015NewLine
21196810Di2015UniqueSeparatorFROM
21196810Di2015UniqueSeparator[FROM]
21196810Di2015UniqueSeparatorstring query="insert into Feedback ([From],Message) values(@frm,@msg)";Di2015NewLine
21196810Di2015UniqueSeparatorusing
21196810Di2015UniqueSeparatorSqlConnection
21196810Di2015UniqueSeparatorstring query = "insert into Feedback ([From],Message) values(@frm,@msg)";Di2015NewLineusing(SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["SampleConnectionString"].ConnectionString))Di2015NewLine{Di2015NewLine  SqlCommand comm = new SqlCommand(query, con);Di2015NewLine  comm.Parameters.AddWithValue("@frm", Convert.ToInt32(TextBoxid.Text));Di2015NewLine  comm.Parameters.AddWithValue("@msg",TextBoxFeedBack.text);Di2015NewLine  con.Open();Di2015NewLine  comm.ExecuteNonQuery();Di2015NewLine  con.Close();Di2015NewLine}Di2015NewLine
21196946Di2015UniqueSeparatorSelectParameters
21196946Di2015UniqueSeparatorSqlDataSource
21196946Di2015UniqueSeparator<asp:SqlDataSource ID="SqlDataSource1" runat="server"Di2015NewLine     ConnectionString="<%$ ConnectionStrings:finchsize_polibudaConnectionString %>"Di2015NewLine     SelectCommand="SELECT ocena FROM Oceny AS lista WHERE przedmiot = @ID">Di2015NewLine     <SelectParameters>Di2015NewLine       <asp:ControlParameter ControlID="TextBox1" DefaultValue="0" Name="ID"Di2015NewLine            PropertyName="Text" Type="String" />Di2015NewLine     </SelectParameters>Di2015NewLine</asp:SqlDataSource>Di2015NewLine
21197458Di2015UniqueSeparatorfor (; totalPasswords > 0; totalPasswords--)Di2015NewLine{Di2015NewLine    for (var i = length; i > 0; i--)Di2015NewLine    {Di2015NewLine        sw.Write(minatecken[rnd.Next(0, 62)]);Di2015NewLine    }Di2015NewLine    richTextBoxPasswords.Text += sw + "\\n";Di2015NewLine}Di2015NewLine
21197520Di2015UniqueSeparatorIMyDelayedCaller
21197520Di2015UniqueSeparatorinterface IMyDelayedCallerDi2015NewLine{Di2015NewLine    void Invoke();Di2015NewLine}Di2015NewLine
21197520Di2015UniqueSeparatorMyDelayedCaller
21197520Di2015UniqueSeparatorclass MyDelayedCaller<T1> : IMyDelayedCallerDi2015NewLine{Di2015NewLine    private Action<T1> _target;Di2015NewLine    public T1 _param;Di2015NewLineDi2015NewLine    public MyDelayedCaller(Action<T1> target, T1 parameter)Di2015NewLine    {Di2015NewLine        _target = target;Di2015NewLine        _param = parameter;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Invoke()Di2015NewLine    {Di2015NewLine        _target(_param);Di2015NewLine    }Di2015NewLine}Di2015NewLineDi2015NewLineclass MyDelayedCaller<T1, T2> : IMyDelayedCallerDi2015NewLine{Di2015NewLine    private Action<T1, T2> _target;Di2015NewLine    public T1 _param1;Di2015NewLine    public T2 _param2;Di2015NewLineDi2015NewLine    public MyDelayedCaller(Action<T1, T2> target, T1 param1, T2 param2)Di2015NewLine    {Di2015NewLine        _target = target;Di2015NewLine        _param1 = param1;Di2015NewLine        _param2 = param2;Di2015NewLine    }Di2015NewLineDi2015NewLine    public void Invoke()Di2015NewLine    {Di2015NewLine        _target(_param1, _param2);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21197520Di2015UniqueSeparatorList<IMyDelayedCaller>
21197520Di2015UniqueSeparatorList<IMyDelayedCaller> Temporary = new List<IMyDelayedCaller>();Di2015NewLine
21197520Di2015UniqueSeparatorTemporary.Add(new MyDelayedCaller<int, bool>(DoSomething1, 10, true));Di2015NewLineTemporary.Add(new MyDelayedCaller<string>(DoSomething3, "Some text"));Di2015NewLine
21197520Di2015UniqueSeparatorforeach (var item in Temporary)Di2015NewLine{Di2015NewLine    item.Invoke();Di2015NewLine}Di2015NewLineTemporary.Clear();Di2015NewLine
21197520Di2015UniqueSeparatorstatic class MyDelayedCallerDi2015NewLine{Di2015NewLine    public static MyDelayedCaller<T1> Create<T1>(Action<T1> target, T1 param)Di2015NewLine    {Di2015NewLine        return new MyDelayedCaller<T1>(target, param1);Di2015NewLine    }Di2015NewLineDi2015NewLine    public static MyDelayedCaller<T1, T2> Create<T1, T2>(Action<T1, T2> target, T1 param1, T2 param2)Di2015NewLine    {Di2015NewLine        return new MyDelayedCaller<T1, T2>(target, param1, param2);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21197520Di2015UniqueSeparatorTemporary.Add(MyDelayedCaller.Create(DoSomething1, 10, true));Di2015NewLineTemporary.Add(MyDelayedCaller.Create(DoSomething3, "Some text"));Di2015NewLine
21197528Di2015UniqueSeparatorproductArray[week,day] +=  int.Parse(value);Di2015NewLine
21197702Di2015UniqueSeparatorToListAsync().ResultDi2015NewLine
21197702Di2015UniqueSeparatorxxx.Where(x => x.word == text)Di2015NewLine
21197702Di2015UniqueSeparatorToListAsync
21197702Di2015UniqueSeparator.Result
21197702Di2015UniqueSeparatorprivate async Task Search(string text)Di2015NewLine{Di2015NewLine    // execute the LINQ query with the TPLDi2015NewLine    List<Word> words = await Database.connection.Table<Word>().Where(x => x.word == text).ToListAsync();Di2015NewLineDi2015NewLine    // we are back on the UI threadDi2015NewLine    foreach(Word word in words)Di2015NewLine    {Di2015NewLine        // do somethingDi2015NewLine    }Di2015NewLine}Di2015NewLine
21197796Di2015UniqueSeparatorif(Convert.IsDBNull(xlWorksheet.Cells[num, 1].Font.Size))Di2015NewLine{Di2015NewLine}Di2015NewLineelse if((int)xlWorksheet.Cells[num, 1].Font.Size == 14)Di2015NewLine{Di2015NewLine    // do Something....Di2015NewLine}Di2015NewLine
21197829Di2015UniqueSeparatorKnownColor
21197829Di2015UniqueSeparatorvar listOfColors =Di2015NewLine    Enum.GetValues(typeof(KnownColor))Di2015NewLine        .OfType<KnownColor>()Di2015NewLine        .Select(kc => Color.FromKnownColor(kc))Di2015NewLine        .OrderBy(c => c.GetHue());Di2015NewLine
21198138Di2015UniqueSeparatorIMySortedList
21198138Di2015UniqueSeparatorSortedList
21198138Di2015UniqueSeparatorpublic interface IMySortedList<TKey, out TValue>: IEnumerable {Di2015NewLine    // .. Di2015NewLine}Di2015NewLine
21198138Di2015UniqueSeparatorpublic class MySortedList<TKey, TValue>Di2015NewLine    : SortedList<TKey, TValue>, IMySortedList<TKey, TValue> {Di2015NewLine    // .. Di2015NewLine}Di2015NewLine
21198138Di2015UniqueSeparatorpublic class OutputFile: File {Di2015NewLine    public override FileHeaderRecord FileHeaderRecord {Di2015NewLine        get {Di2015NewLine            if(fileHeaderRecord==null) {Di2015NewLine                fileHeaderRecord=new OutputFileHeaderRecord();Di2015NewLine            }Di2015NewLineDi2015NewLine            return fileHeaderRecord;Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    public override IMySortedList<int, FileDetailRecord> FileDetailRecords {Di2015NewLine        get {Di2015NewLine            if(fileDetailRecords==null) {Di2015NewLine                fileDetailRecords=Di2015NewLine                    new MySortedList<int, OutputFileDetailRecord>();Di2015NewLine            }Di2015NewLineDi2015NewLine            return fileDetailRecords;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21198239Di2015UniqueSeparatorpublic interface IDrawableDi2015NewLine{Di2015NewLine    double x { get; set; }Di2015NewLine    double y { get; set; }Di2015NewLine    // ...Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Beacon : IDrawableDi2015NewLine{Di2015NewLine    public double x { get; set; }Di2015NewLine    public double y { get; set; }Di2015NewLineDi2015NewLine    public Beacon(string id, double x, double y)Di2015NewLine    {Di2015NewLine        // ...Di2015NewLine        this.x = x;Di2015NewLine        this.y = y;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21198239Di2015UniqueSeparatorpublic abstract class DrawableDi2015NewLine{Di2015NewLine    public double x { get; set; }Di2015NewLine    public double y { get; set; }Di2015NewLine    public abstract object GetDrawable();Di2015NewLine}Di2015NewLineDi2015NewLinepublic class Beacon : DrawableDi2015NewLine{Di2015NewLine    public Beacon(string id, double x, double y)Di2015NewLine    {Di2015NewLine        //this.id = id;Di2015NewLine        this.x = x; Di2015NewLine        this.y = y;Di2015NewLine    }Di2015NewLineDi2015NewLine    public override object GetDrawable()Di2015NewLine    {Di2015NewLine        // ...Di2015NewLine    }Di2015NewLine}Di2015NewLine
21198385Di2015UniqueSeparatorreturn inventoryItems.Where(i => 0 < String.Compare(i.ID, ID))Di2015NewLine                     .Take(CountToFetch)Di2015NewLine                     .OrderBy(i => i.pksize);Di2015NewLine
21198385Di2015UniqueSeparatorOrderBy
21198385Di2015UniqueSeparatorTake
21198385Di2015UniqueSeparatorreturn inventoryItems.Where(i => 0 < String.Compare(i.ID, ID))Di2015NewLine                     .OrderBy(i => i.pksize)Di2015NewLine                     .Take(CountToFetch);Di2015NewLine
21198513Di2015UniqueSeparatorIEquatable<T>
21198513Di2015UniqueSeparatorIComparable
21198513Di2015UniqueSeparatorIComparable<T>
21198513Di2015UniqueSeparatorIComparer<Nucleotide>
21198513Di2015UniqueSeparatorIComparable
21198513Di2015UniqueSeparatorIComparable<T>
21198572Di2015UniqueSeparator<pre> Di2015NewLine    @Html.Raw(Model.Contents)Di2015NewLine</pre>Di2015NewLine
21198572Di2015UniqueSeparatorwhitespace:pre;Di2015NewLine
21198763Di2015UniqueSeparator//Change following variables accordinglyDi2015NewLinevar ctx = new YourDbContext();Di2015NewLinevar id = 3;Di2015NewLineDi2015NewLinefrom tblWeekDays in ctx.WeekDaysDi2015NewLinejoin tblDayTimes in ctx.DayTimesDi2015NewLineon tblWeekDays.WeekDayId == tblDayTimes.WeekDayIdDi2015NewLinewhere tblWeekDays.classID == idDi2015NewLineselect newDi2015NewLine{Di2015NewLine    WeekDay = tblWeekDays.WeekDay,Di2015NewLine    TimeFrom = tblDayTimes.TimeFrom,Di2015NewLine    TimeTo = tblDayTimes.TimeToDi2015NewLine};Di2015NewLine
21199161Di2015UniqueSeparator(?=.{6,})(?=(.*\\d){1,})(?=(.*\\W){1,})Di2015NewLine
21199161Di2015UniqueSeparator(?=.{8,})(?=.*\\d)(?=.*\\W)Di2015NewLine
21199161Di2015UniqueSeparator.*
21199161Di2015UniqueSeparator(?=\\d)
21199161Di2015UniqueSeparator(?=\\W)
21199161Di2015UniqueSeparator\\W
21199161Di2015UniqueSeparator.*
21199161Di2015UniqueSeparator\\d
21199161Di2015UniqueSeparator\\W
21199296Di2015UniqueSeparatorSomeMethod
21199296Di2015UniqueSeparatorCreate
21199296Di2015UniqueSeparatorCreate
21199643Di2015UniqueSeparator//specify file name, instructions, and privelegesDi2015NewLine        FileStream CurrentDataFile = new FileStream (filename, FileMode.OpenOrCreate, FileAccess.Write);Di2015NewLine        //create a new stream to write to the fileDi2015NewLine        StreamWriter CurrentData = new StreamWriter (CurrentDataFile);Di2015NewLine
21199643Di2015UniqueSeparatorusing
21199643Di2015UniqueSeparator File.WriteAllText(aStringWithDataThatIwantInTheFile);Di2015NewLineDi2015NewLine string fileContents = File.ReadAllText(@"C:\\thefilepath.txt");Di2015NewLineDi2015NewLine string[] fileLines = File.ReadAllLines(AStringWithMyFilePath);Di2015NewLineDi2015NewLine File.WriteAllLines(AStringArrayGoesHere);Di2015NewLine
21199643Di2015UniqueSeparatorStreamWriter
21199894Di2015UniqueSeparatorbool OnPreUpdate(PreUpdateEvent @event); Di2015NewLine
21199894Di2015UniqueSeparator@event
21199894Di2015UniqueSeparatorclass PreUpdateEvent
21199894Di2015UniqueSeparator/// <summary> The entity involved in the database operation. </summary>Di2015NewLinepublic object Entity { get; }Di2015NewLine/// <summary> The id to be used in the database operation. </summary>Di2015NewLinepublic object Id { get; }Di2015NewLine/// <summary>Di2015NewLine/// Retrieves the state to be used in the update.Di2015NewLine/// </summary>Di2015NewLinepublic object[] State { get; }Di2015NewLine/// <summary>Di2015NewLine/// The old state of the entity at the time it was last loaded from theDi2015NewLine/// database; can be null in the case of detached entities.Di2015NewLine/// </summary>Di2015NewLinepublic object[] OldState { get; }Di2015NewLine
21199894Di2015UniqueSeparatorState
21199894Di2015UniqueSeparatorOldState
21199894Di2015UniqueSeparatorsession.get()
21199894Di2015UniqueSeparatorUpdate()
21199894Di2015UniqueSeparatorsession.Merge(ourInstance)
21199894Di2015UniqueSeparatorsessin.GetById(id)
21199894Di2015UniqueSeparatorsession.Flush()
21199894Di2015UniqueSeparatorOldState
21199894Di2015UniqueSeparatorsession
21199894Di2015UniqueSeparatorsession.Update(instance)
21199894Di2015UniqueSeparatorsession.Merge(instance)
21199894Di2015UniqueSeparatorUpdate()
21199894Di2015UniqueSeparatorPreUpdate
21200213Di2015UniqueSeparatorMediumTile.xaml
21200213Di2015UniqueSeparatorx:Class="MyProject.UserControls.MediumTile" Di2015NewLine
21200213Di2015UniqueSeparatorMediumTile.xaml.cs
21200213Di2015UniqueSeparatornamespace MyProject.UserControlsDi2015NewLine{Di2015NewLine    public partial class MediumTile : UserControlDi2015NewLine    ...Di2015NewLine
21200213Di2015UniqueSeparatorCurrentProject/Di2015NewLine    -MyPage.xamlDi2015NewLineDi2015NewLineSubProject/Di2015NewLine    -MediumTile.xamlDi2015NewLine
21200213Di2015UniqueSeparatorProperties
21200213Di2015UniqueSeparatorProject Dependencies
21200213Di2015UniqueSeparatorDepends On
21200213Di2015UniqueSeparatorStartUp Project
21200213Di2015UniqueSeparatorSingle StartUp Project
21200213Di2015UniqueSeparatorMediumTile.xaml
21200213Di2015UniqueSeparator<ListBox.ItemTemplate>Di2015NewLine    <DataTemplate>Di2015NewLine        <customControls:MediumTile/>Di2015NewLine...Di2015NewLine
21200213Di2015UniqueSeparatorMediumTile mediumTile = new MediumTile()Di2015NewLine
21200213Di2015UniqueSeparatorLayoutRoot
21200287Di2015UniqueSeparatorif (textbox1.Text.Length > 0)Di2015NewLine{Di2015NewLine  ...Di2015NewLine}Di2015NewLine
21200287Di2015UniqueSeparatorif (!string.IsNullOrEmpty(textbox1.Text))Di2015NewLine{Di2015NewLine  ...Di2015NewLine}Di2015NewLine
21200409Di2015UniqueSeparatorpublic static Particle UpdateParticle(Particle p)Di2015NewLine{Di2015NewLine    p.Position += p.Velocity;Di2015NewLine    return p;Di2015NewLine}Di2015NewLine
21200765Di2015UniqueSeparatorselect Di2015NewLine    Company,Di2015NewLine    Year,Di2015NewLine    Month, Di2015NewLine    Max(ActiveVersion) as ActiveVersion Di2015NewLinefrom Di2015NewLine    CompanyInfo Di2015NewLineGroup by Di2015NewLine    Company, Di2015NewLine    Year, Di2015NewLine    MonthDi2015NewLine
21200765Di2015UniqueSeparatorvar result = from comp in CompanyInfoDi2015NewLine                    group comp by new { comp.Company, comp.Year, comp.Month } into grpDi2015NewLine                    select new {Di2015NewLine                             grp.Key.Company,Di2015NewLine                             grp.Key.Year,Di2015NewLine                             grp.Key.Month,Di2015NewLine                             Version = grp.Max(a => a.ActiveVersion)};Di2015NewLine
21200765Di2015UniqueSeparatorvar result = infos.GroupBy(grp => new { grp.Company, grp.Year, grp.Month })Di2015NewLine            .Select(t => new CompanyInfo()Di2015NewLine                {Di2015NewLine                    Company = t.Key.Company,Di2015NewLine                    Year = t.Key.Year,Di2015NewLine                    Month = t.Key.Month,Di2015NewLine                    ActiveVersion = t.Max(v => v.ActiveVersion)Di2015NewLine                }).ToList();Di2015NewLine
21200785Di2015UniqueSeparatorMD5(SHA1("stackoverflow")); //341fe8f2ac67f95f20d2d0b721d53847Di2015NewLineDi2015NewLinepublic String MD5(String input)Di2015NewLine{Di2015NewLine    System.Security.Cryptography.MD5 md5 = System.Security.Cryptography.MD5.Create();Di2015NewLine    Byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(input);Di2015NewLine    Byte[] hash = md5.ComputeHash(inputBytes);Di2015NewLineDi2015NewLine    StringBuilder sb = new StringBuilder();Di2015NewLine    for(int i = 0; i < hash.Length; i++)Di2015NewLine    {Di2015NewLine        sb.Append(hash[i].ToString("X2"));Di2015NewLine    }Di2015NewLine    return sb.ToString();Di2015NewLine}Di2015NewLineDi2015NewLinepublic String SHA1(String s)Di2015NewLine{Di2015NewLine    Byte[] bytes = Encoding.UTF8.GetBytes(s);Di2015NewLine    var sha1 = System.Security.Cryptography.SHA1.Create();Di2015NewLine    Byte[] hashBytes = sha1.ComputeHash(bytes);Di2015NewLine    return HexStringFromBytes(hashBytes);Di2015NewLine}Di2015NewLineDi2015NewLinepublic String HexStringFromBytes(Byte[] bytes)Di2015NewLine{Di2015NewLine    var sb = new StringBuilder();Di2015NewLine    foreach(byte b in bytes)Di2015NewLine    {Di2015NewLine        var hex = b.ToString("x2");Di2015NewLine        sb.Append(hex);Di2015NewLine    }Di2015NewLine    return sb.ToString();Di2015NewLine}Di2015NewLine
21200890Di2015UniqueSeparatorprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine        for (int i = 0; i < 3; i++)Di2015NewLine        {Di2015NewLine            TableCell cell_name = new TableCell();Di2015NewLine            cell_name.Text = "Some name";Di2015NewLineDi2015NewLine            TableCell cell_active = new TableCell();Di2015NewLine            CheckBox checkbox = new CheckBox();Di2015NewLine            cell_active.Controls.Add(checkbox);Di2015NewLineDi2015NewLine            TableCell cell_actions = new TableCell();Di2015NewLine            ImageButton button = new ImageButton();Di2015NewLine            button.CommandArgument=i.ToString();Di2015NewLine            button.Click += RowClick;Di2015NewLine            cell_actions.Controls.Add(button);Di2015NewLineDi2015NewLine            TableRow row = new TableRow();Di2015NewLine            row.Cells.Add(cell_name);Di2015NewLine            row.Cells.Add(cell_active);Di2015NewLine            row.Cells.Add(cell_actions);Di2015NewLineDi2015NewLine            table1.Rows.Add(row);Di2015NewLine        }Di2015NewLine}Di2015NewLineprotected void RowClick(object sender, EventArgs e)Di2015NewLine{Di2015NewLine        int rowIndex =int.Parse( ((ImageButton)sender).CommandArgument);Di2015NewLine        Response.Write("RowIndex = " + rowIndex);Di2015NewLine}Di2015NewLine
21200926Di2015UniqueSeparatorclass OutExampleDi2015NewLine{Di2015NewLine    static void Method(out int i)Di2015NewLine    {Di2015NewLine        i = 44;Di2015NewLine    }Di2015NewLine    static void Main()Di2015NewLine    {Di2015NewLine        int value;Di2015NewLine        Method(out value);Di2015NewLine        // value is now 44Di2015NewLine    }Di2015NewLine}Di2015NewLine
21200926Di2015UniqueSeparatorout
21200926Di2015UniqueSeparatorclass ReturnTestDi2015NewLine    {Di2015NewLine        static double CalculateArea(int r)Di2015NewLine        {Di2015NewLine            double area = r * r * Math.PI;Di2015NewLine            return area;Di2015NewLine        }Di2015NewLineDi2015NewLine        static void Main()Di2015NewLine        {Di2015NewLine            int radius = 5;Di2015NewLine            double result = CalculateArea(radius);Di2015NewLine            Console.WriteLine("The area is {0:0.00}", result);Di2015NewLineDi2015NewLine            // Keep the console open in debug mode.Di2015NewLine            Console.WriteLine("Press any key to exit.");Di2015NewLine            Console.ReadKey();Di2015NewLine        }Di2015NewLine    }Di2015NewLine    // Output: The area is 78.54Di2015NewLine
21200926Di2015UniqueSeparatorReturn
21201481Di2015UniqueSeparatorSystem.IO.Compression
21201481Di2015UniqueSeparatorMicrosoft.Bcl.Compression
21201509Di2015UniqueSeparatornamespace MyNamespace {Di2015NewLine    class MyClass {Di2015NewLine
21201509Di2015UniqueSeparatornamespace MyNamespace {Di2015NewLine    public class MyClass {Di2015NewLine
21201640Di2015UniqueSeparatorAssembly.GetExecutingAssembly()
21201640Di2015UniqueSeparatorAssembly.GetCallingAssembly
21201640Di2015UniqueSeparatorGetType().GetTypeInfo().Assembly
21201640Di2015UniqueSeparatortypeof(TheTypeYourMethodIsIn).GetTypeInfo().Assembly
21201640Di2015UniqueSeparatorGetTypeInfo()
21201640Di2015UniqueSeparatorGetTypeInfo()
21201710Di2015UniqueSeparatorprivate void button1_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    var textInEachLine = richTextBox1.Text.Split(new string[] {"\\n"}, StringSplitOptions.RemoveEmptyEntries);Di2015NewLine    string whereClause = string.Join("', '", textInEachLine).ToString();Di2015NewLine    MessageBox.Show(" IN ( '" + whereClause + "')");Di2015NewLine}Di2015NewLine
21201864Di2015UniqueSeparatorProcess.Start(new ProcessStartInfo(arr[pos]) { WindowStyle = ProcessWindowStyle.Hidden });Di2015NewLine
21201912Di2015UniqueSeparatorExecute
21201912Di2015UniqueSeparatorBusyIndicatorCommand.Execute(EnableIndicator);Di2015NewLine
21201991Di2015UniqueSeparator bool for3 = false;Di2015NewLine                    for (; ; )Di2015NewLine                    {Di2015NewLine                        Norm.ShowBalloonTip(10000);Di2015NewLine                        System.Threading.Thread.Sleep(10000);Di2015NewLine                        Application.DoEvents();Di2015NewLine                        if (loopVariable)Di2015NewLine                            for3 = true;Di2015NewLine                        if (for3) break;Di2015NewLine                        System.Threading.Thread.Sleep(60000);Di2015NewLineDi2015NewLine                    }Di2015NewLineprivate static bool loopVariable = false;Di2015NewLineDi2015NewLine  void Norm_BalloonTipClicked(object sender, EventArgs e)Di2015NewLine   {Di2015NewLine       loopVariable = true;Di2015NewLine   }Di2015NewLine
21202064Di2015UniqueSeparator$.ajax({Di2015NewLine       data: data,Di2015NewLine       url: "ur url",Di2015NewLine       type: "POST",Di2015NewLine       contentType: "application/json; charset=utf-8",Di2015NewLine       success: function (result) {Di2015NewLine       //ur code to bind data to dropdownDi2015NewLine       }Di2015NewLine       error: function OnError(result) {Di2015NewLine        //ur codeDi2015NewLine       }Di2015NewLine    }); Di2015NewLine
21202064Di2015UniqueSeparator<asp:UpdatePanel ID="UpdatePanel1" UpdateMode="Conditional" runat="server">Di2015NewLine   <ContentTemplate>Di2015NewLine      <asp:TextBox ID="txtBox1" OnTextChanged="txtBox1_TextChanged" AutoPostBack="true" runat="server" />Di2015NewLine   </ContentTemplate>Di2015NewLine</asp:UpdatePanel>Di2015NewLine
21202115Di2015UniqueSeparatorprotected void Button1_Click(object sender, EventArgs e)Di2015NewLine        {Di2015NewLine            ClientScript.RegisterStartupScript(this.GetType(), "myscript", "PrintElem('#mydiv')",true);Di2015NewLine        } Di2015NewLine
21202235Di2015UniqueSeparatorprivate static void Main(string[] args)Di2015NewLine{Di2015NewLine    using (var sessionManager = GetDefaultAudioSessionManager2(DataFlow.Render))Di2015NewLine    {Di2015NewLine        using (var sessionEnumerator = sessionManager.GetSessionEnumerator())Di2015NewLine        {Di2015NewLine            foreach (var session in sessionEnumerator)Di2015NewLine            {Di2015NewLine                using (var audioMeterInformation = session.QueryInterface<AudioMeterInformation>())Di2015NewLine                {Di2015NewLine                    Console.WriteLine(audioMeterInformation.GetPeakValue());Di2015NewLine                }Di2015NewLine            }Di2015NewLine        }Di2015NewLine    }Di2015NewLineDi2015NewLine    Console.ReadKey();Di2015NewLine}Di2015NewLineDi2015NewLineprivate static AudioSessionManager2 GetDefaultAudioSessionManager2(DataFlow dataFlow)Di2015NewLine{Di2015NewLine    using (var enumerator = new MMDeviceEnumerator())Di2015NewLine    {Di2015NewLine        using (var device = enumerator.GetDefaultAudioEndpoint(dataFlow, Role.Multimedia))Di2015NewLine        {Di2015NewLine            Debug.WriteLine("DefaultDevice: " + device.FriendlyName);Di2015NewLine            var sessionManager = AudioSessionManager2.FromMMDevice(device);Di2015NewLine            return sessionManager;Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21202257Di2015UniqueSeparatorSelectedItem="{Binding Path=SelectedItem}"Di2015NewLine
21202257Di2015UniqueSeparatorpublic List<Product> lstSelectedStocksDi2015NewLine{Di2015NewLine    // ...Di2015NewLine}Di2015NewLine
21202257Di2015UniqueSeparatorpublic Product SelectedItemDi2015NewLine{Di2015NewLine    // ...Di2015NewLine}Di2015NewLine
21202257Di2015UniqueSeparator<Button Content="Add Quantity" Command="{Binding Path=AddQuantity}" />Di2015NewLine
21202257Di2015UniqueSeparatorSelectedItem="{Binding Path=SelectedItem}"
21202459Di2015UniqueSeparatordb.Save()
21202459Di2015UniqueSeparatordb.Save(item);Di2015NewLineitem.Id //populated with the auto-incremented idDi2015NewLine
21202459Di2015UniqueSeparatorvar itemId = db.Insert(item, selectIdentity:true);Di2015NewLine
21202601Di2015UniqueSeparatorgaugeElement
21202601Di2015UniqueSeparatortpxElement
21202601Di2015UniqueSeparatorXElement
21202601Di2015UniqueSeparatorusing System;Di2015NewLineusing System.Linq;Di2015NewLineusing System.Xml.Linq;Di2015NewLineDi2015NewLineclass ProgramDi2015NewLine{Di2015NewLine    static void Main(string[] args)Di2015NewLine    {Di2015NewLine        var doc = XDocument.Load("test.xml");Di2015NewLine        XNamespace ns = "http://somestuff.new/ns3";Di2015NewLine        var gauges = docDi2015NewLine            .Descendants(ns + "Gauges")Di2015NewLine            .Select(x => new { // You'd use new Gauge hereDi2015NewLine                Speed = (double?) x.Element(ns + "Speed") ?? 0.0,Di2015NewLine                Rpm = (int?) x.Element(ns + "Rpm") ?? 0Di2015NewLine            });Di2015NewLine        foreach (var gauge in gauges)Di2015NewLine        {Di2015NewLine            Console.WriteLine(gauge);Di2015NewLine        }Di2015NewLine    }Di2015NewLine}Di2015NewLine
21202601Di2015UniqueSeparator{ Speed = 100, Rpm = 3200 }Di2015NewLine
21202752Di2015UniqueSeparatorEnum
21202752Di2015UniqueSeparatorIEnumerable<int>
21202752Di2015UniqueSeparatorIEnumerable<object>
21202756Di2015UniqueSeparator^(?<name>.+?)=(?<value>[^;]+)(?:(?=.*(?:Expires=(?<expires>[^;]+))))?(?:(?=.*(?:Path=(?<path>[^;]+))))?(?:(?=.*(?:Domain=(?<domain>[^;]+))))?(?:(?=.*(?<httponly>HttpOnly)))?(?:(?=.*(?<secure>Secure)))?Di2015NewLine
21202827Di2015UniqueSeparatorprotected override void OnNavigatedTo(System.Windows.Navigation.NavigationEventArgs e)Di2015NewLine{Di2015NewLine    OnActivity_Click(this.btn1, null);Di2015NewLine}Di2015NewLine
21203168Di2015UniqueSeparatorStorageFolder temp = ApplicationData.Current.TemporaryFolder;Di2015NewLineStorageFile file = await temp.CreateFileAsync("temp.rtf", Di2015NewLine                         CreationCollisionOption.ReplaceExisting);Di2015NewLineIRandomAccessStream stream = await file.OpenAsync(FileAccessMode.ReadWrite);Di2015NewLineeditor.Document.SaveToStream(TextGetOptions.FormatRtf, stream);Di2015NewLine
21203168Di2015UniqueSeparatorCreateFileAsync
21203168Di2015UniqueSeparatorOpenAsync
21203168Di2015UniqueSeparatorStream
21203168Di2015UniqueSeparatorCreationCollisionOption.GenerateUniqueName
21203168Di2015UniqueSeparatorCreationCollisionOption.ReplaceExisting
21203168Di2015UniqueSeparatorIRandomAccessStream
21203168Di2015UniqueSeparatorIDisposable
21203168Di2015UniqueSeparatorDispose
21203168Di2015UniqueSeparatorusing
21203168Di2015UniqueSeparatorStorageFolder temp = ApplicationData.Current.TemporaryFolder;Di2015NewLineStorageFile file = await temp.CreateFileAsync("temp.rtf",Di2015NewLine                            CreationCollisionOption.GenerateUniqueName);Di2015NewLineusing (IRandomAccessStream stream = await file.OpenAsync(FileAccessMode.ReadWrite))Di2015NewLine{Di2015NewLine    Editor.Document.SaveToStream(TextGetOptions.FormatRtf, stream);Di2015NewLine    await stream.FlushAsync();Di2015NewLine}Di2015NewLine
21203227Di2015UniqueSeparator if (comboBox1.SelectedItem != null)Di2015NewLineDi2015NewLine    {Di2015NewLineDi2015NewLine    ComboBoxItem cbItem = (ComboBoxItem) comboBox1.SelectedItem;Di2015NewLineDi2015NewLine    MessageBox.Show(cbItem.Content.ToString());Di2015NewLineDi2015NewLine    }Di2015NewLine
21203349Di2015UniqueSeparatorpublic static List<int> money = new List<int>();Di2015NewLineDi2015NewLineprotected void Page_Load(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    DataTable dt = new DataTable();Di2015NewLine    dt.Columns.Add("ID", typeof(Int32));Di2015NewLine    dt.Columns.Add("Name");Di2015NewLine    dt.Rows.Add();Di2015NewLine    dt.Rows[dt.Rows.Count - 1]["ID"] = 1;Di2015NewLine    dt.Rows[dt.Rows.Count - 1]["Name"] = "Test1";Di2015NewLineDi2015NewLineDi2015NewLineDi2015NewLine    DataTable dt2 = new DataTable();Di2015NewLine    dt2.Columns.Add("ID", typeof(Int32));Di2015NewLine    dt2.Columns.Add("Name");Di2015NewLine    dt2.Rows.Add();Di2015NewLine    dt2.Rows[dt2.Rows.Count - 1]["ID"] = 2;Di2015NewLine    dt2.Rows[dt2.Rows.Count - 1]["Name"] = "Test2";Di2015NewLineDi2015NewLineDi2015NewLine    DataTable dt3 = new DataTable();Di2015NewLine    dt3.Columns.Add("ID", typeof(Int32));Di2015NewLine    dt3.Columns.Add("Name");Di2015NewLine    dt3.Rows.Add();Di2015NewLine    dt3.Rows[dt3.Rows.Count - 1]["ID"] = 3;Di2015NewLine    dt3.Rows[dt3.Rows.Count - 1]["Name"] = "Test2";Di2015NewLineDi2015NewLineDi2015NewLine    money = (from row in dt.AsEnumerable() select Convert.ToInt32(row["ID"])).ToList();Di2015NewLine    money.AddRange((from row in dt2.AsEnumerable() select Convert.ToInt32(row["ID"])).ToList());Di2015NewLine    money.AddRange((from row in dt3.AsEnumerable() select Convert.ToInt32(row["ID"])).ToList());Di2015NewLine}Di2015NewLine
21203650Di2015UniqueSeparatorCtrl+I
21203650Di2015UniqueSeparatorKeyRoutedEventArgs.Handled = true;
21203650Di2015UniqueSeparatore.Handled=true;
21203678Di2015UniqueSeparator\\\\
21203678Di2015UniqueSeparator\\
21203678Di2015UniqueSeparatorstring Text = ".\\\\MyExample.txt";  // Text == ".\\MyExample.txt"Di2015NewLine
21203678Di2015UniqueSeparator\\\\
21203678Di2015UniqueSeparatorstring Text = @".\\\\MyExample.txt";Di2015NewLinestring Text = ".\\\\\\\\MyExample.txt";Di2015NewLine
21203734Di2015UniqueSeparatorDbContexts
21203734Di2015UniqueSeparatorusing
21203734Di2015UniqueSeparatorTransactionScope
21203734Di2015UniqueSeparatorDbContext.SaveChanges
21203734Di2015UniqueSeparatorEnlist=false
21203938Di2015UniqueSeparatorthis.AcptBtn.DialogResult = System.Windows.Forms.DialogResult.OK;Di2015NewLine
21203938Di2015UniqueSeparatorthis.DialogResult = System.Windows.Forms.DialogResult.OK;Di2015NewLine
21204243Di2015UniqueSeparator@color: #4D926F;Di2015NewLineDi2015NewLine#header {Di2015NewLine  color: @color;Di2015NewLine}Di2015NewLineh2 {Di2015NewLine  color: @color;Di2015NewLine}Di2015NewLine
21204243Di2015UniqueSeparator#header {Di2015NewLine  color: #4d926f;Di2015NewLine}Di2015NewLineh2 {Di2015NewLine  color: #4d926f;Di2015NewLine}Di2015NewLine
21204324Di2015UniqueSeparatorBeginExecuteReader
21204453Di2015UniqueSeparatorUpdateSourceTrigger = PropertyChangedDi2015NewLine
21204583Di2015UniqueSeparatorturn
21204583Di2015UniqueSeparatorPage_Load
21204583Di2015UniqueSeparatorPage_Load
21204583Di2015UniqueSeparatorpublic int turnDi2015NewLine{Di2015NewLine    getDi2015NewLine    {Di2015NewLine        if ( Session["turn"] != null )Di2015NewLine             return (int)Session["turn"];Di2015NewLine        return 0; // default value if not set beforeDi2015NewLine    }Di2015NewLine    setDi2015NewLine    {Di2015NewLine        Session["turn"] = value;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21204583Di2015UniqueSeparatorturn
21204610Di2015UniqueSeparatorSetCancelledHandler
21204610Di2015UniqueSeparatorRunAsync
21204610Di2015UniqueSeparatorSetCancelledHandler
21204610Di2015UniqueSeparatorOnCanceled
21204610Di2015UniqueSeparatorOnFaulted
21204610Di2015UniqueSeparatorTPL
21204610Di2015UniqueSeparatorawait
21204610Di2015UniqueSeparatorawait
21204610Di2015UniqueSeparatorawait
21204617Di2015UniqueSeparatordeliveryDate[i] = ((DateTime)dt.Rows[i][1]).ToString("dd/M/yyyy", CultureInfo.InvariantCulture);Di2015NewLine
21204617Di2015UniqueSeparatorRows
21204617Di2015UniqueSeparatorobject
21204698Di2015UniqueSeparatorLastChildFill
21204698Di2015UniqueSeparatorTrue
21204698Di2015UniqueSeparator<DockPanel LastChildFill="True">Di2015NewLine   <Button x:Name="dropBtn" Width="20" DockPanel.Dock="Right" Di2015NewLine           HorizontalAlignment="Right">Di2015NewLine       <Path VerticalAlignment="Center"Di2015NewLine             Width="10"Di2015NewLine             Height="8"Di2015NewLine             Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"Di2015NewLine             Stretch="Fill"Di2015NewLine             Fill="HotPink"/>Di2015NewLine   </Button>Di2015NewLine   <Border x:Name="bg" BorderBrush="Yellow" Background="HotPink"Di2015NewLine           BorderThickness="1" CornerRadius="0" DockPanel.Dock="Left">Di2015NewLine      <ContentPresenterDi2015NewLine             Name="ContentSite"Di2015NewLine             IsHitTestVisible="False" Di2015NewLine             Content="{TemplateBinding SelectionBoxItem}"Di2015NewLine             ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"Di2015NewLine             ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"Di2015NewLine             Margin="3,3,23,3"Di2015NewLine             VerticalAlignment="Center"Di2015NewLine             HorizontalAlignment="Left"/>Di2015NewLine   </Border>Di2015NewLine</DockPanel>Di2015NewLine
21204788Di2015UniqueSeparatorstd::copy_if
21204788Di2015UniqueSeparatorstd::vector<int> foo = {25,15,5,-5,-15};Di2015NewLinestd::vector<int> bar;Di2015NewLineDi2015NewLine// copy only positive numbers:Di2015NewLineauto it = std::copy_if (foo.begin(), foo.end(), std::back_inserter(bar), [](int i){return i>=0;} );Di2015NewLine
21204788Di2015UniqueSeparatorstd::copy_if
21204788Di2015UniqueSeparatorfoo
21204788Di2015UniqueSeparatortrue
21204788Di2015UniqueSeparatorbar
21204788Di2015UniqueSeparatorstd::back_inserter
21204788Di2015UniqueSeparatorbar
21204788Di2015UniqueSeparatorpush_back()
21205081Di2015UniqueSeparatorusing (var subscription = redisClient.CreateSubscription())Di2015NewLine{Di2015NewLine    subscription.OnUnSubscribe = channel => Di2015NewLine        Log.Debug("OnUnSubscribe: " + channel);Di2015NewLineDi2015NewLine    subscription.OnMessage = (channel, msg) =>Di2015NewLine    {Di2015NewLine        if (msg == "STOP")Di2015NewLine        {Di2015NewLine            Log.Debug("Stop Command Issued");Di2015NewLine            Log.Debug("Unsubscribing from all Channels...");Di2015NewLine            subscription.UnSubscribeFromAllChannels(); //Unblocks thread.Di2015NewLine        }Di2015NewLine    };Di2015NewLineDi2015NewLine    subscription.SubscribeToChannels(QueueNames.TopicIn); //blocks threadDi2015NewLine}Di2015NewLine
21205188Di2015UniqueSeparator[ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]Di2015NewLinepublic class WcfServiceTest : IContractDi2015NewLine{Di2015NewLine    static int _counter;Di2015NewLineDi2015NewLine    public WcfServiceTest()Di2015NewLine    {Di2015NewLine        _counter++;Di2015NewLine    }Di2015NewLine    public string GetData(string p1)Di2015NewLine    {Di2015NewLine        return Convert.ToString(_counter);Di2015NewLine    }Di2015NewLine}Di2015NewLine
21205188Di2015UniqueSeparator[ServiceBehavior(InstanceContextMode=InstanceContextMode.PerCall)]Di2015NewLinepublic class MyService:IMyServiceDi2015NewLine{Di2015NewLine    int m_Counter = 0;Di2015NewLineDi2015NewLine    public int MyMethod()Di2015NewLine    {Di2015NewLine        m_Counter++;Di2015NewLine        return m_Counter;Di2015NewLine    }       Di2015NewLine}Di2015NewLine
21205256Di2015UniqueSeparatordynamic
21205533Di2015UniqueSeparatorif (txtMyOtherText.Text == string.Empty)Di2015NewLine{Di2015NewLine    MessageBox.Show("The other text field should not be empty.");Di2015NewLine    txtMyText.TextChanged -= textMyText_TextChanged;Di2015NewLine    txtMyText.Clear(); Di2015NewLine    txtMyText.TextChanged += textMyText_TextChanged;Di2015NewLine    return;Di2015NewLine} Di2015NewLine
21205555Di2015UniqueSeparatorTotalWeighting
21205555Di2015UniqueSeparatornull
21205555Di2015UniqueSeparatorTotalWeighting("alpha", "bravo", null, null, null, null, null, null, null, null, null, null);
21205555Di2015UniqueSeparatorpublic static double TotalWeighting(Di2015NewLine    string STRtb1 = null,Di2015NewLine    string STRtb2 = null,Di2015NewLine    string STRtb3 = null,Di2015NewLine    string STRtb4 = null,Di2015NewLine    string STRtb5 = null,Di2015NewLine    string STRtb6 = null,Di2015NewLine    string STRtb7 = null,Di2015NewLine    string STRtb8 = null,Di2015NewLine    string STRtb9 = null,Di2015NewLine    string STRtb10 = null,Di2015NewLine    string STRtb12 = null)Di2015NewLine{Di2015NewLine    return 0;Di2015NewLine}
21205555Di2015UniqueSeparatorpublic static double TotalWeighting(string STRtb1) { ... }Di2015NewLinepublic static double TotalWeighting(string STRtb1, string STRtb2) { ... }Di2015NewLine ...
21205555Di2015UniqueSeparatorpublic static double TotalWeighting(params string[] input) { ... }
21205699Di2015UniqueSeparatortotalQuantity
21205699Di2015UniqueSeparatorcatSumList
21205699Di2015UniqueSeparatorList<ProductPacking> catSumList = new List<ProductPacking>();Di2015NewLinecatSumList = BLL.getSumCategoryByMonth("Some Category");Di2015NewLinedecimal[] totalQuantity = new decimal[catSumList.Count];Di2015NewLine
21205699Di2015UniqueSeparatortotalQuantity
21205699Di2015UniqueSeparatorcount
21205699Di2015UniqueSeparatorfor
21205699Di2015UniqueSeparatorfor (int count = 0; count < catSumList.Count; count++)Di2015NewLine{Di2015NewLine    deliveryDate = catSumList[count].deliveryDate;Di2015NewLine    totalQuantity[count] = Convert.ToDecimal(catSumList[count].productQuantity);Di2015NewLine}Di2015NewLine
21205731Di2015UniqueSeparatorShow
21205731Di2015UniqueSeparatorRemoveBackEntry
21205731Di2015UniqueSeparatorNavigate
21205731Di2015UniqueSeparatorShow
21205731Di2015UniqueSeparatorUINavigationController
21205731Di2015UniqueSeparatorViewControllers
21205731Di2015UniqueSeparatorNoHistory=true
21205920Di2015UniqueSeparatorvar doc = XDocument.Parse(xml);Di2015NewLinevar lyrics = doc.Root.Element("lyrics").Value;Di2015NewLinevar url = doc.Root.Element("url").Value;Di2015NewLine
21205920Di2015UniqueSeparatorxml
21206075Di2015UniqueSeparatorAutoPostBack="true"
21206075Di2015UniqueSeparatorTextBox1
21206075Di2015UniqueSeparatorTextBox2
21206075Di2015UniqueSeparator<asp:TextBox ID="TextBox1" runat="server" AutoPostBack="true" OnTextChanged="TextBox1_TextChanged" />Di2015NewLine<asp:TextBox ID="TextBox2" runat="server" AutoPostBack="true" OnTextChanged="TextBox2_TextChanged" />Di2015NewLine
21206233Di2015UniqueSeparatorResponse.Redirect("~/ViewInvoices.aspx", false); Di2015NewLine
21206630Di2015UniqueSeparatorpublic class NewLogDi2015NewLine{Di2015NewLine    public int ResidentID { get; set; }Di2015NewLine    public string PFName { get; set; }Di2015NewLine    public string PLName { get; set; }Di2015NewLine    public string Comment { get; set; }Di2015NewLine    // other propertiesDi2015NewLine}Di2015NewLine
21206630Di2015UniqueSeparatorpublic ActionResult Create(int ResidentID)Di2015NewLine{Di2015NewLine    var resident = db.Residents.Find(ResidentID);Di2015NewLineDi2015NewLine    var nl = new NewLogDi2015NewLine    {Di2015NewLine        ResidentID = ResidentID,Di2015NewLine        PFName = resident.PFName,Di2015NewLine        PLName = resident.PLName,Di2015NewLine        Comment = string.Empty,Di2015NewLine    };Di2015NewLine    return View(nl);Di2015NewLine}Di2015NewLine
21206630Di2015UniqueSeparator@model My.Models.NewLogDi2015NewLine
21206630Di2015UniqueSeparator        @Html.TextBoxFor(model => model.ResidentID, new {@Type = "Hidden"})Di2015NewLine
21206630Di2015UniqueSeparator        @Html.DisplayFor(model => model.PFName)Di2015NewLine        @Html.DisplayFor(model => model.PLName)Di2015NewLine
21206630Di2015UniqueSeparator    @Html.ActionLink("New Log Entry", "../Log/Create", new { @ResidentID = item.ResidentID, item.PFName, item.PLName})Di2015NewLine
21206683Di2015UniqueSeparatorcontentType: "application/json; charset=utf-8"
21206683Di2015UniqueSeparator$.ajax({Di2015NewLine    type: "POST",Di2015NewLine    url: "../Pages/MyPage.aspx/CallUCMethodFromJQuery",Di2015NewLine    data: "{'sAvailability' : 'Availability'}",Di2015NewLine    dataType: "json",Di2015NewLine    contentType: "application/json; charset=utf-8",Di2015NewLine    success: fnsuccesscallback,Di2015NewLine    error: fnerrorcallbackDi2015NewLine});Di2015NewLine
21206683Di2015UniqueSeparatorEditAvailabilityValue
21206683Di2015UniqueSeparatorpublic static void EditAvailabilityValue(string sAvailability)Di2015NewLine{Di2015NewLineDi2015NewLine}Di2015NewLine
21206683Di2015UniqueSeparatorCallUCMethodFromJQuery
21206683Di2015UniqueSeparatorstatic
21206683Di2015UniqueSeparator[System.Web.Services.WebMethod]Di2015NewLinepublic static void CallUCMethodFromJQuery(string sAvailability)Di2015NewLine{Di2015NewLine    MyNamespace.UserControls.ControlName.EditAvailabilityValue(sAvailability);Di2015NewLine}Di2015NewLine
21206907Di2015UniqueSeparatorpublic override void ViewDidLoad ()Di2015NewLine{Di2015NewLine    base.ViewDidLoad ();Di2015NewLineDi2015NewLine    this.NavigationItem.SetHidesBackButton (true, false);Di2015NewLine}Di2015NewLine
21206949Di2015UniqueSeparatorCheckedChanged
21206949Di2015UniqueSeparator private void barButtonPanelVisibleCheck_CheckedChanged(object sender, Di2015NewLine                             DevExpress.XtraBars.ItemClickEventArgs e)Di2015NewLine {Di2015NewLine       tryDi2015NewLine       {Di2015NewLineDi2015NewLine           this.barButtonPanelVisibleCheck.CheckedChanged -=  Di2015NewLine                barButtonPanelVisibleCheck_CheckedChanged;Di2015NewLineDi2015NewLine           ... do your checked changed hereDi2015NewLineDi2015NewLine       }Di2015NewLine       finallyDi2015NewLine       {Di2015NewLine            this.barButtonPanelVisibleCheck.CheckedChanged +=  Di2015NewLine                barButtonPanelVisibleCheck_CheckedChanged;Di2015NewLine       }Di2015NewLine }Di2015NewLine
21206949Di2015UniqueSeparatorfinally
21207064Di2015UniqueSeparatorpublic Boolean ContainsValue (Node<T> tree, int value)Di2015NewLine{Di2015NewLine    if (tree == null)Di2015NewLine        return false;Di2015NewLineDi2015NewLine    if (tree.Data.Equals(value))Di2015NewLine        return true;Di2015NewLineDi2015NewLine    if (value.CompareTo(tree.Data) < 0)Di2015NewLine        return ContainsValue(tree.Left, value);Di2015NewLineDi2015NewLine    if (value.CompareTo(tree.Data) > 0)Di2015NewLine        return ContainsValue(tree.Right, value);Di2015NewLineDi2015NewLine    // hereDi2015NewLine    // return some_value;Di2015NewLine    // or throw exceptionDi2015NewLine}Di2015NewLine
21207064Di2015UniqueSeparatorpublic bool ContainsValue (Node<T> tree, int value)Di2015NewLine{Di2015NewLine    if (tree == null)Di2015NewLine        return false;Di2015NewLineDi2015NewLine    if (tree.Data.Equals(value))Di2015NewLine        return true;Di2015NewLineDi2015NewLine    if (value.CompareTo(tree.Data) < 0)Di2015NewLine        return ContainsValue(tree.Left, value);Di2015NewLineDi2015NewLine    // thus you already verified case when value is less or equal to dataDi2015NewLine    // you don't need if condition hereDi2015NewLine    return ContainsValue(tree.Right, value);Di2015NewLine}Di2015NewLine
21207148Di2015UniqueSeparatorthis
21207148Di2015UniqueSeparatorint top = 50;Di2015NewLineint left = 100;Di2015NewLineDi2015NewLinefor (int i = 0; i < 10; i++)Di2015NewLine{Di2015NewLine    Button button = new Button();Di2015NewLine    button.Left = left;Di2015NewLine    button.Top = top;Di2015NewLine    panel.Controls.Add(button); // hereDi2015NewLine    top += button.Height + 2;Di2015NewLine}Di2015NewLine
21207148Di2015UniqueSeparator    button.Click += Button_Click;Di2015NewLine
21207148Di2015UniqueSeparatorsender
21207148Di2015UniqueSeparatorprivate void Button_Click(object sender, EventArgs e)Di2015NewLine{Di2015NewLine    Button button = (Button)sender;Di2015NewLine    // you have instance of buttonDi2015NewLine    // ...Di2015NewLine}Di2015NewLine
21207244Di2015UniqueSeparator"sTxtBlock_numRequest.Text"
21207244Di2015UniqueSeparatordoc.Root.Elements("Single_Request") Di2015NewLine   .Where(t => (string)t.Attribute("num") == sTxtBlock_numRequest.Text)Di2015NewLine   .Remove();Di2015NewLine
21207244Di2015UniqueSeparatorElements
21207244Di2015UniqueSeparatorSingle_Request
21207244Di2015UniqueSeparatorDescendants
21207244Di2015UniqueSeparatorRemove()
21207379Di2015UniqueSeparatorvar smilies = new OrderedDictionaryDi2015NewLine{Di2015NewLine    {@">:(", "smile_angryx24"},  // Put this one firstDi2015NewLine    {@":(", "smile_sadx24"},Di2015NewLine};Di2015NewLineDi2015NewLineforeach (string smiley in smilies.Keys)Di2015NewLine{Di2015NewLine    var re = new Regex(@"(?<!(=""))" + Regex.Escape(smiley) + @"(?!(""))"); Di2015NewLine                       // Second should be a negative lookahead  ^^Di2015NewLine    if (re.IsMatch(incomingtext))Di2015NewLine    {Di2015NewLine        string m2 = re.Replace(incomingtext, "<img src=\\"/Content/themes/mavi/img/custom/smiles/" + smilies[smiley] + ".png\\"  alt=\\"" + smiley + "\\"/>");Di2015NewLine        incomingtext = m2;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21207379Di2015UniqueSeparator"
21207532Di2015UniqueSeparatorCheckBox
21207532Di2015UniqueSeparatorSystem.Windows.Forms.CheckBox cbDi2015NewLine    = (System.Windows.Forms.CheckBox)Controls["checkBox" + id];Di2015NewLine
21207544Di2015UniqueSeparatoropenWindow(true)
21207544Di2015UniqueSeparatorfirstTime
21207544Di2015UniqueSeparator<script type="text/javascript">Di2015NewLine  var firstTime = false; // make use of temp variableDi2015NewLineDi2015NewLine  function OpenWindow(k) {Di2015NewLine       firstTime = k;Di2015NewLine       popupWindow = window.open('WebForm2.aspx', 'popUpWindow', 'height=500,width=400,left=100,top=100,resizable=yes,scrollbars=yes')Di2015NewLine  }Di2015NewLine  function closeWindow(){Di2015NewLine       if(firstTime == false)  popupWindow.close();Di2015NewLine       firstTime=false;Di2015NewLine  }Di2015NewLineDi2015NewLine</script>Di2015NewLineDi2015NewLine<div id="daf" style="height: 100vh;" onclick="closeWindow()">           Di2015NewLine    <a id="myLink" href="#" onclick="OpenWindow(true)">link text</a>Di2015NewLine</div>Di2015NewLine
21207544Di2015UniqueSeparatorfirstTime
21207544Di2015UniqueSeparatorlink text
21207964Di2015UniqueSeparator[ComImport, System.Security.SuppressUnmanagedCodeSecurity,Di2015NewLineGuid("0579154A-2B53-4994-B0D0-E773148EFF85"),Di2015NewLineInterfaceType(ComInterfaceType.InterfaceIsIUnknown)]Di2015NewLinepublic interface ISampleGrabberCBDi2015NewLine{Di2015NewLine    /// <summary>Di2015NewLine    /// When called, callee must release pSampleDi2015NewLine    /// </summary>Di2015NewLine    [PreserveSig]Di2015NewLine    int SampleCB(double SampleTime, IMediaSample pSample);Di2015NewLineDi2015NewLine    [PreserveSig]Di2015NewLine    int BufferCB(double SampleTime, IntPtr pBuffer, int BufferLen);Di2015NewLine}Di2015NewLine
21208137Di2015UniqueSeparatorGetComponents
21208137Di2015UniqueSeparatorShotScript[]
21208137Di2015UniqueSeparatorGameObject
21208137Di2015UniqueSeparatorShotScript[]
21208137Di2015UniqueSeparatorShotScript
21208137Di2015UniqueSeparatorShotScript
21208137Di2015UniqueSeparatorGetComponent
21208137Di2015UniqueSeparatornull
21208137Di2015UniqueSeparatorShotScript shot = collider.gameObject.GetComponent<ShotScript>();Di2015NewLine
21208137Di2015UniqueSeparatorShotScript
21208137Di2015UniqueSeparatorGameObject
21208214Di2015UniqueSeparator// Obtain the number of data rows. Di2015NewLineint dataRowCount = gridView.DataRowCount;Di2015NewLine// Traverse data rows  Di2015NewLinefor (int i = 0; i < dataRowCount; i++) {Di2015NewLine    object cellValue = gridView.GetRowCellValue(i, "... specify field name here ...");Di2015NewLine    // do something with cell ValueDi2015NewLineDi2015NewLine}Di2015NewLine
21208501Di2015UniqueSeparatorhasher = new md5Di2015NewLineloopDi2015NewLine    read a block of the fileDi2015NewLine    hasher.addblock(current block)Di2015NewLine    hasher2 = hasher.clone()Di2015NewLine    hasher.finish()Di2015NewLine    hasher = hasher2Di2015NewLineend loopDi2015NewLine
21209010Di2015UniqueSeparatorpublic class ProductAttributeDi2015NewLine{Di2015NewLine    [Key]Di2015NewLine    [Required]Di2015NewLine    public string FieldName { get; set; }Di2015NewLineDi2015NewLine    public string FieldValue { get; set; }Di2015NewLineDi2015NewLine    [Key]Di2015NewLine    [ForeignKey("Item"), Column(Order = 1)]Di2015NewLine    public string ItemNo { get; set; }Di2015NewLineDi2015NewLine    [Key]Di2015NewLine    [ForeignKey("Item"), Column(Order = 2)]Di2015NewLine    public string VariantCode { get; set; }Di2015NewLineDi2015NewLine    public virtual Product Item { get; set; }Di2015NewLine}Di2015NewLine
21209039Di2015UniqueSeparatorSystem.IO.IOException
21209039Di2015UniqueSeparatorNetworkStream
21209039Di2015UniqueSeparatorSystem.Net.Sockets.SocketException
21209039Di2015UniqueSeparatorErrorCode
21209039Di2015UniqueSeparatorSocketErrorCode
21209039Di2015UniqueSeparatorConnectionReset
21209039Di2015UniqueSeparatortry-catch
21209039Di2015UniqueSeparatorusing System;Di2015NewLineusing System.IO;Di2015NewLineusing System.Net.Sockets;Di2015NewLineDi2015NewLinestream = client.GetStream();Di2015NewLinenew Thread(() =>Di2015NewLine  {Di2015NewLine      tryDi2015NewLine      {Di2015NewLine          while ((i = stream.Read(datalength, 0, 4)) != 0)Di2015NewLine          {Di2015NewLine              byte[] data = new byte[BitConverter.ToInt32(datalength, 0)];Di2015NewLine              stream.Read(data, 0, data.Length);Di2015NewLine              this.Invoke((MethodInvoker)delegateDi2015NewLine              {Di2015NewLine                  txtLog.Text += System.Environment.NewLine + "Server : " + Encoding.Default.GetString(data);Di2015NewLine              });Di2015NewLine          }Di2015NewLine      }Di2015NewLine      catch (IOException ioex)Di2015NewLine      {Di2015NewLine          if (ioex.InnerException != null)Di2015NewLine          {Di2015NewLine              var sex = ex.InnerException as SocketException;Di2015NewLine              if (sex == null)Di2015NewLine              {Di2015NewLine                  txtLog.Text += Environment.NewLine + "An unknown exception occurred.";Di2015NewLine              }Di2015NewLine              elseDi2015NewLine              {Di2015NewLine                  switch (sex.SocketErrorCode)Di2015NewLine                  {Di2015NewLine                      case SocketError.ConnectionReset:Di2015NewLine                          txtLog.Text += Environment.NewLine + "A ConnectionReset SocketException occurred."Di2015NewLine                          break;Di2015NewLine                      default:Di2015NewLine                          txtLog.Text += Environment.NewLine + "A SocketException occurred.";Di2015NewLine                          break;Di2015NewLine                  }Di2015NewLine              }Di2015NewLine          }Di2015NewLine          elseDi2015NewLine          {Di2015NewLine              txtLog.Text += Environment.NewLine + "An IOException occurred.";Di2015NewLine          }Di2015NewLine      }Di2015NewLine  }).Start();Di2015NewLine
21209118Di2015UniqueSeparatorIEnumerable<T>
21209118Di2015UniqueSeparatorTask<T>
21209118Di2015UniqueSeparatorSelectMany
21209118Di2015UniqueSeparator// In both cases, we want the command to be disabled when loading:Di2015NewLineLoadModels = new ReactiveCommand(this.WhenAny(x => x.LoadingModels, x => !x.Value));Di2015NewLineDi2015NewLineLoadModels.RegisterAsyncTask(_ => taskClient.GetModelsAsync())Di2015NewLine    .Subscribe(items => Di2015NewLine    {Di2015NewLine        // This Using makes it so the UI only looks at the collectionDi2015NewLine        // once we're totally done updating it, since we're basicallyDi2015NewLine        // changing it completely.Di2015NewLine        using (_models.SuppressChangeNotifications())Di2015NewLine        {Di2015NewLine            _models.Clear();Di2015NewLine            _models.AddRange(items);Di2015NewLine        }Di2015NewLine    });Di2015NewLineDi2015NewLineLoadModels.ThrownExceptionsDi2015NewLine    .Subscribe(ex => Console.WriteLine("GetModelsAsync blew up: " + ex.ToString());Di2015NewLineDi2015NewLine// NB: _loadingModels is an ObservableAsPropertyHelper<bool>Di2015NewLineLoadModels.IsExecutingDi2015NewLine    .ToProperty(this, x => x.LoadingModels, out _loadingModels);Di2015NewLine
21209481Di2015UniqueSeparatorMicrosoft.CSharp.targets
21209481Di2015UniqueSeparatorCoreCompile
21209481Di2015UniqueSeparatorMicrosoft.CSharp.targets
21209597Di2015UniqueSeparatorIEnumerator
21209597Di2015UniqueSeparatorpublic IEnumerator SomethingElse() {Di2015NewLine  animationTest = false;Di2015NewLine  Debug.Log("check1");Di2015NewLine  yield return new WaidForSeconds(6f);Di2015NewLine  Debug.Log("check2");Di2015NewLine  yield return true;Di2015NewLine}Di2015NewLineDi2015NewLinevoid FixedUpdate() {Di2015NewLine  if (animationTest) {Di2015NewLine    StartCoroutine(SomethingElse());Di2015NewLine  }Di2015NewLine}Di2015NewLine
21209597Di2015UniqueSeparatoranimationTest
21209772Di2015UniqueSeparatorPaymentInfo
21209772Di2015UniqueSeparatorCustomerInfo
21209772Di2015UniqueSeparatorpublic class PaymentConfirmationViewModel{Di2015NewLineDi2015NewLine    public CustomerInfo Customer {get;set;}Di2015NewLineDi2015NewLine    public PaymentInfo Payment {get;set;}Di2015NewLineDi2015NewLine}Di2015NewLine
21209772Di2015UniqueSeparatorpublic void PaymentConfirmation(PaymentConfirmationViewModel model)Di2015NewLine{Di2015NewLine    //do stuffDi2015NewLine}Di2015NewLine
21209772Di2015UniqueSeparator@Html.LabelFor(x=>x.FirstName) Di2015NewLine
21209772Di2015UniqueSeparator@Html.LabelFor(x=>x.Customer.FirstName)Di2015NewLine
21209772Di2015UniqueSeparator<input type="text" id="FirstName" name="FirstName" />Di2015NewLine
21209772Di2015UniqueSeparator<input type="text" id="Customer_FirstName" name="Customer.FirstName" />Di2015NewLine
21209857Di2015UniqueSeparatorDateTime
21209857Di2015UniqueSeparatorDateTime dateTime;Di2015NewLine
21209857Di2015UniqueSeparatorcmd.Parameter.AddWithValue("@DateTime",dateTime.Now);Di2015NewLine
21209857Di2015UniqueSeparatorDateTimePicker
21209857Di2015UniqueSeparatorcmd.Parameter.AddWithValue("@DateTime",dateTimePicker1.Value);Di2015NewLine
21210266Di2015UniqueSeparatortxtContactLastEdit.Text
21210266Di2015UniqueSeparator[WebMethod]Di2015NewLinepublic static string updateProject(int id, string textBoxValue)Di2015NewLine{Di2015NewLine  // your code.Di2015NewLine}Di2015NewLine
21210916Di2015UniqueSeparatorvar doc = new HtmlAgilityPack.HtmlDocument();Di2015NewLinedoc.LoadHtml(orghtml);Di2015NewLineDi2015NewLinevar brs = doc.DocumentNode.SelectNodes("//span/br"); //all br's in span'sDi2015NewLineforeach(var br in brs )Di2015NewLine{Di2015NewLine    var span = br.ParentNode;Di2015NewLine    span.ParentNode.InsertAfter(HtmlAgilityPack.HtmlNode.CreateNode("<br>"), span);Di2015NewLine    br.Remove();Di2015NewLine}Di2015NewLinevar newhtml = doc.DocumentNode.OuterHtml;Di2015NewLine
21210916Di2015UniqueSeparator<span>Some info<br /></span>Di2015NewLine<span>Some info</span><br />Di2015NewLine<span>Some other kind of info. <br /> More info</span>Di2015NewLine<span>Some other kind of info. More info</span><br />Di2015NewLine
21210916Di2015UniqueSeparator<span>Some info</span><br>Di2015NewLine<span>Some info</span><br>Di2015NewLine<span>Some other kind of info.  More info</span><br>Di2015NewLine<span>Some other kind of info. More info</span><br>Di2015NewLine
21210980Di2015UniqueSeparatorClosing
21210980Di2015UniqueSeparatorClosed
21211081Di2015UniqueSeparatorvar byteArray = dataString.Select(x => (byte)x).ToArray();Di2015NewLine
21211196Di2015UniqueSeparatorelse if
21211196Di2015UniqueSeparatorelse if (activeCharacter.DestY >= 600)Di2015NewLine
21211196Di2015UniqueSeparatorelseDi2015NewLine
21211651Di2015UniqueSeparatorawait
21211761Di2015UniqueSeparatorpublic static DNSSDService service;Di2015NewLinepublic static DNSSDEventManager eventManager;Di2015NewLine public static DNSSDService browse;Di2015NewLine
21211817Di2015UniqueSeparatorprivate static RegistryKey _key;Di2015NewLineprivate static RegistryKey Key {Di2015NewLine    get {Di2015NewLine        if (_key == null) {Di2015NewLine            // calculate the value and set _key hereDi2015NewLine        }Di2015NewLine        return _key;Di2015NewLine    }Di2015NewLine}Di2015NewLine
21211817Di2015UniqueSeparatorKey
21211927Di2015UniqueSeparator\\b
21211927Di2015UniqueSeparatorRtf
21211927Di2015UniqueSeparatorthis.notes_pln.Rtf = @"{\\rtf1\\ansi this word is \\b bold \\b0 }";Di2015NewLine
21211927Di2015UniqueSeparatorclass RtfBuilder { Di2015NewLine  StringBuilder _builder = new StringBuilder();Di2015NewLineDi2015NewLine  public void AppendBold(string text) { Di2015NewLine    _builder.Append(@"\\b ");Di2015NewLine    _builder.Append(text);Di2015NewLine    _builder.Append("\\b0 ");Di2015NewLine  }Di2015NewLineDi2015NewLine  public void Append(string text) { Di2015NewLine    _builder.Append(text);Di2015NewLine  }Di2015NewLineDi2015NewLine  public void AppendLine(string text) { Di2015NewLine    _builder.Append(text);Di2015NewLine    _builder.Append(@"\\line");Di2015NewLine  }Di2015NewLineDi2015NewLine  public string ToRtf() { Di2015NewLine    return @"{\\rtf1\\ansi " + ToString() + @" }";Di2015NewLine  }Di2015NewLine}Di2015NewLine
21212016Di2015UniqueSeparatortree structure.
21212016Di2015UniqueSeparatorpublic class Node Di2015NewLine{Di2015NewLine   public Node Parent { get; set; }Di2015NewLine   public ICollection<Node> Childrens { get; set; }Di2015NewLine}Di2015NewLine
21212232Di2015UniqueSeparatorMicrosoft.VisualBasic.dll
21212261Di2015UniqueSeparatorMediaFile
21212261Di2015UniqueSeparatornew MediaFile(filePath)Di2015NewLine
21212261Di2015UniqueSeparatorMediaFile
21212261Di2015UniqueSeparatorinternal sealed class MediaFileDi2015NewLine{Di2015NewLine    private readonly Lazy<UltraID3> _lazyFile;Di2015NewLineDi2015NewLine    public MediaFile(string filePath)Di2015NewLine    { Di2015NewLine        _lazyFile = new Lazy<UltraID3>(() =>Di2015NewLine        {Di2015NewLine            var file = new UltraID3();Di2015NewLine            file.Read(filePath);Di2015NewLine            return file;Di2015NewLine        });Di2015NewLine    }Di2015NewLineDi2015NewLine    public string TitleDi2015NewLine    {Di2015NewLine        get { return _lazyFile.Value.Title; }Di2015NewLine    }Di2015NewLineDi2015NewLine    // ...Di2015NewLine}Di2015NewLine
21212261Di2015UniqueSeparatorMediaFiles.OrderBy(x => x.Title).ToList()
